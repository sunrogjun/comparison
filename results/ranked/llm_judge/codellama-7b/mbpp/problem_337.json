{
  "timestamp": "2025-09-15T00:51:01.627441",
  "method": "improved_llm_judge",
  "judge_model": "codellama/CodeLlama-7b-Python-hf",
  "target_model": "codellama-7b",
  "dataset": "mbpp",
  "problem_number": 337,
  "total_candidates": 100,
  "results": [
    {
      "rank": 1,
      "score": 10.0,
      "candidate": "from collections import defaultdict\n\n\ndef count_sequences(values, length):\n    dp = defaultdict(int)\n    dp[0] = 1\n    result = 0\n    for i in range(len(values)):\n        for j in range(length):\n            if i - j < 0:\n                break\n            result += dp[i - j - 1]\n        dp[i] = result\n    return result\n\n\ndef main():\n    print(\"Total number of sequences: \" + str(count_sequences([1, 2, 3, 4, 5], 4)))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 2,
      "score": 10.0,
      "candidate": "from typing import List\n\n\ndef count_sequences(values: List[int], length: int) -> int:\n    \"\"\"\n    Time Complexity: O(n * l)\n    Space Complexity: O(l)\n    \"\"\"\n    dp = [0] * (length + 1)\n\n    for value in values:\n        if value >= 0:\n            dp[0] += 1\n            for i in range(1, length + 1):\n                if value + i >= 0:\n                    dp[i] += dp[i - 1]\n\n    return dp[-1]\n\n\nif __name__ == \"__main__\":\n    assert count_sequences([1, 2, 3, 4, 5], 3) == 2"
    },
    {
      "rank": 3,
      "score": 10.0,
      "candidate": "def prefix_sum(a, length):\n    a.sort()\n    count = 0\n    for i in range(len(a)):\n        if a[i] >= 0:\n            count += i + 1\n    return count\n\n\ndef main():\n    a = [1, 2, 3, 4, 5]\n    length = 5\n    print(\"Prefix sum:\", prefix_sum(a, length))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 4,
      "score": 10.0,
      "candidate": "def prefix_sums_count(values, length):\n    if length == 0:\n        return 1\n    if length > len(values):\n        return 0\n\n    prefix_sums = {0: 1}\n    for value in values:\n        if value < 0:\n            raise ValueError(\"Value must be non-negative\")\n        for sum_ in prefix_sums:\n            prefix_sums[sum_ + value] = prefix_sums.get(sum_ + value, 0) + prefix_sums[sum_]\n\n    return prefix_sums.get(sum(values), 0)\n\n\ntest_cases = [\n    ([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3, 2),\n    ([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 4, 2),\n    ([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5, 1),\n    ([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 6, 1),\n    ([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 7, 1),\n    ([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 8, 1),\n    ([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 9, 1),\n    ([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 10, 1),\n    ([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 11, 0),"
    },
    {
      "rank": 5,
      "score": 10.0,
      "candidate": "def count_sequences(values: list, length: int) -> int:\n    \"\"\"\n    Idea:\n        - We use dp to calculate prefix sums\n        - We use a map to store the counts for each prefix sum\n        - For each prefix sum, we check if the next value can be added to it. If so, we increment the count of the prefix\n            sum by the number of ways to construct a sequence of the required length with that prefix sum.\n\n    Complexity:\n        n = len(values)\n        Time: O(n*length)\n        Space: O(n*length)\n    \"\"\"\n\n    dp = [0] * (len(values) + 1)\n    dp[0] = 1\n\n    prefix_sums = [0]\n\n    for i in range(len(values)):\n        dp[i + 1] = dp[i] + values[i]\n        prefix_sums.append(dp[i + 1])\n\n    prefix_sums = prefix_sums[:-1]\n    prefix_sums_counts = {}\n\n    for i in range(len(prefix_sums)):\n        if prefix_sums[i] not in prefix_sums_counts:\n            prefix_sums_counts[prefix_sums[i]] = 1\n        else:\n            prefix_sums_counts[prefix_sums[i]] += 1\n\n    ways = 0\n\n    for i in range(len(values)):\n        if i + length < len(values):\n            next_prefix_sum = dp[i + length] - dp[i]\n            if next_prefix_sum in prefix_sums_counts:\n                ways += prefix_sums_counts[next_prefix_sum]\n\n    return ways\n\n\nif __name__ == \"__main__\":\n    assert count_sequences([1, 2, 3, 4, 5], 1) == 1\n    assert count_sequences([1, 2, 3, 4, 5], 2) == 2\n    assert count_sequences([1, 2, 3,"
    },
    {
      "rank": 6,
      "score": 10.0,
      "candidate": "def count_sequences(values, length):\n    if not values:\n        return 0\n\n    sequences = [0 for _ in range(length)]\n    sequences[0] = 1\n\n    for i in range(1, len(values)):\n        for j in range(1, length):\n            if values[i] >= values[i - j]:\n                sequences[j] += sequences[j - 1]\n            else:\n                break\n\n    return sequences[-1]\n\n\nprint(count_sequences([1, 2, 3, 4, 5, 6, 7, 8, 9], 4))\nprint(count_sequences([1, 2, 3, 4, 5, 6, 7, 8, 9], 5))"
    },
    {
      "rank": 7,
      "score": 10.0,
      "candidate": "def count_sequences(values, length):\n    count = 0\n    prefix_sums = {0: 1}\n    for value in values:\n        new_prefix_sums = prefix_sums.copy()\n        for prefix_sum in prefix_sums:\n            new_prefix_sums[prefix_sum + value] = new_prefix_sums.get(\n                prefix_sum + value, 0\n            ) + prefix_sums[prefix_sum]\n        prefix_sums = new_prefix_sums\n\n    for prefix_sum in prefix_sums:\n        if prefix_sum >= length:\n            count += prefix_sums[prefix_sum]\n    return count\n\n\nprint(count_sequences([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 10))\nprint(count_sequences([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 9))\nprint(count_sequences([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 8))\nprint(count_sequences([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 7))\nprint(count_sequences([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 6))\nprint(count_sequences([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5))\nprint(count_sequences([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 4))\nprint(count_sequences([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3))\nprint(count_sequences([1, 2, 3"
    },
    {
      "rank": 8,
      "score": 10.0,
      "candidate": "from collections import defaultdict\n\n\ndef count_sequences(arr, length):\n    prefix_sums = defaultdict(int)\n    result = 0\n    prefix_sum = 0\n\n    for i in range(len(arr)):\n        prefix_sum += arr[i]\n        prefix_sums[prefix_sum] += 1\n\n        if i >= length:\n            prefix_sum -= arr[i - length]\n            prefix_sums[prefix_sum] -= 1\n\n        if prefix_sums[prefix_sum] > 0:\n            result += prefix_sums[prefix_sum]\n\n    return result\n\n\nprint(count_sequences([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5))\nprint(count_sequences([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3))\nprint(count_sequences([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 1))\nprint(count_sequences([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2))\nprint(count_sequences([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 10))\nprint(count_sequences([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 11))"
    },
    {
      "rank": 9,
      "score": 10.0,
      "candidate": "def prefix_sum_sequences(values, length):\n    sequences_count = [0] * (length + 1)\n    sequences_count[0] = 1\n\n    for value in values:\n        for i in range(1, length + 1):\n            if value <= i:\n                sequences_count[i] += sequences_count[i - value]\n\n    return sequences_count[length]\n\n\nprint(prefix_sum_sequences([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 20))\nprint(prefix_sum_sequences([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 21))\nprint(prefix_sum_sequences([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 22))"
    },
    {
      "rank": 10,
      "score": 10.0,
      "candidate": "def count_sequences(length, values):\n    prefix_sums = {0: 1}\n    count = 0\n\n    for value in values:\n        prefix_sums[value] = prefix_sums.get(value, 0) + 1\n\n    for value in values:\n        for i in range(1, length + 1):\n            prefix_sums[value * i] = prefix_sums.get(value * i, 0) + prefix_sums[value]\n\n    for value in range(length + 1):\n        if value * length in prefix_sums:\n            count += prefix_sums[value * length]\n\n    return count\n\n\nprint(count_sequences(3, [2, 3, 1, 5]))\nprint(count_sequences(5, [2, 4, 2, 6, 2, 4, 3, 1]))"
    },
    {
      "rank": 11,
      "score": 10.0,
      "candidate": "from collections import defaultdict\n\n\ndef get_prefix_sums(values):\n    prefix_sums = defaultdict(int)\n    for value in values:\n        for i in range(value + 1):\n            prefix_sums[i] += 1\n    return prefix_sums\n\n\ndef count_sequences(values, length):\n    prefix_sums = get_prefix_sums(values)\n    return prefix_sums[length]\n\n\nprint(count_sequences([1, 2, 3, 4], 3))"
    },
    {
      "rank": 12,
      "score": 10.0,
      "candidate": "from collections import defaultdict\n\n\ndef count_sequences(arr, n, k):\n    prefix_sum = defaultdict(int)\n    prefix_sum[0] = 1\n    total = 0\n\n    for i in range(n):\n        for j in range(k):\n            if i - j - 1 >= 0:\n                total += prefix_sum[arr[i - j - 1]]\n\n        prefix_sum[arr[i]] += total\n\n    return total\n\n\nassert count_sequences([1, 2, 3, 4, 1], 5, 2) == 4\nassert count_sequences([1, 2, 3, 4, 1], 5, 3) == 2"
    },
    {
      "rank": 13,
      "score": 10.0,
      "candidate": "from itertools import accumulate\n\n\ndef count_sequences(values, length):\n    prefix_sums = list(accumulate(values))\n    count = 0\n\n    for i in range(len(values) - length + 1):\n        if prefix_sums[i + length - 1] <= prefix_sums[-1]:\n            count += 1\n\n    return count\n\n\nprint(count_sequences([3, 2, 5, 4, 6], 2))\nprint(count_sequences([3, 2, 5, 4, 6], 3))\nprint(count_sequences([3, 2, 5, 4, 6], 4))\nprint(count_sequences([3, 2, 5, 4, 6], 5))"
    },
    {
      "rank": 14,
      "score": 10.0,
      "candidate": "def count_sequences(values, length):\n    prefix_sums = [0]\n    for value in values:\n        prefix_sums.append(prefix_sums[-1] + value)\n\n    count = 0\n    for i in range(len(prefix_sums) - length):\n        if prefix_sums[i + length] - prefix_sums[i] >= 0:\n            count += 1\n    return count\n\n\ndef main():\n    print(\"Total sequences: \" + str(count_sequences([1, 2, 3, 4], 3)))\n    print(\"Total sequences: \" + str(count_sequences([1, 2, 3, 4], 2)))\n    print(\"Total sequences: \" + str(count_sequences([1, 2, 3, 4], 4)))\n    print(\"Total sequences: \" + str(count_sequences([1, 2, 3, 4], 1)))\n\n\nmain()"
    },
    {
      "rank": 15,
      "score": 10.0,
      "candidate": "def count_prefix_sums(n, k):\n    \"\"\"\n    :param n:\n    :param k:\n    :return:\n    \"\"\"\n    if n <= 0 or k < 0:\n        return 0\n\n    dp = [0] * (n + 1)\n    dp[0] = 1\n    for i in range(1, n + 1):\n        for j in range(0, i):\n            if j + 1 <= k:\n                dp[i] += dp[j]\n\n    return dp[n]\n\n\ndef test_count_prefix_sums():\n    assert count_prefix_sums(5, 3) == 1\n    assert count_prefix_sums(5, 1) == 1\n    assert count_prefix_sums(5, 5) == 1\n    assert count_prefix_sums(5, 0) == 0\n    assert count_prefix_sums(5, 6) == 0\n    assert count_prefix_sums(5, 4) == 2\n    assert count_prefix_sums(5, 2) == 3\n\n\nif __name__ == '__main__':\n    test_count_prefix_sums()"
    },
    {
      "rank": 16,
      "score": 10.0,
      "candidate": "from collections import defaultdict\n\n\ndef count_sequences(values, sequence_length):\n\n    if not values or sequence_length < 1:\n        return 0\n\n    counts = defaultdict(int)\n\n    for value in values:\n        counts[value] += 1\n\n    for value in counts:\n        counts[value] += counts[value - 1]\n\n    result = 0\n    for value in counts:\n        if value >= sequence_length:\n            result += counts[value]\n\n    return result\n\n\nprint(count_sequences([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 4))\nprint(count_sequences([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 10))\nprint(count_sequences([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 1))"
    },
    {
      "rank": 17,
      "score": 10.0,
      "candidate": "def prefix_sum(arr, n):\n    prefix_sums = []\n    for i in range(len(arr)):\n        if i == 0:\n            prefix_sums.append(arr[i])\n        else:\n            prefix_sums.append(prefix_sums[i - 1] + arr[i])\n    return prefix_sums\n\n\ndef count_sequences(arr, n):\n    prefix_sums = prefix_sum(arr, n)\n    count = 0\n    for i in range(len(arr)):\n        if arr[i] > n:\n            continue\n        for j in range(i, len(arr)):\n            if prefix_sums[j] - arr[i] >= n:\n                count += 1\n    return count\n\n\ndef test_count_sequences():\n    assert count_sequences([1, 2, 3, 4, 5], 15) == 4\n    assert count_sequences([1, 2, 3, 4], 15) == 2\n    assert count_sequences([1, 2, 3, 4, 5], 5) == 3\n    assert count_sequences([1, 2, 3, 4, 5], 10) == 6\n    assert count_sequences([1, 2, 3, 4, 5], 1) == 1\n    assert count_sequences([1, 2, 3, 4, 5], 2) == 2\n    assert count_sequences([1, 2, 3, 4, 5], 3) == 3\n    assert count_sequences([1, 2, 3, 4, 5], 4) == 3\n    assert count_sequences([1, 2, 3, 4, 5], 0) == 0\n    assert count_sequences([1, 2, 3, 4, 5], 100) == 20\n\n\nif __name__ == \"__main__\":\n    test_count_sequences()"
    },
    {
      "rank": 18,
      "score": 10.0,
      "candidate": "from collections import defaultdict\n\n\ndef count_sequences(values, length):\n    \"\"\"\n    :param values: list of positive integers\n    :param length: length of sequences to be counted\n    :return: number of sequences of length with non-negative prefix sum\n    >>> count_sequences([1, 2, 3, 4], 1)\n    1\n    >>> count_sequences([1, 2, 3, 4], 2)\n    1\n    >>> count_sequences([1, 2, 3, 4], 3)\n    1\n    >>> count_sequences([1, 2, 3, 4], 4)\n    1\n    >>> count_sequences([1, 2, 3, 4], 5)\n    0\n    >>> count_sequences([1, 2, 3, 4, 5, 6, 7], 3)\n    4\n    >>> count_sequences([1, 2, 3, 4, 5, 6, 7], 4)\n    5\n    >>> count_sequences([1, 2, 3, 4, 5, 6, 7], 5)\n    1\n    >>> count_sequences([1, 2, 3, 4, 5, 6, 7], 6)\n    0\n    >>> count_sequences([1, 2, 3, 4, 5, 6, 7], 7)\n    0\n    \"\"\"\n    prefix_sums = defaultdict(int)\n    prefix_sums[0] = 1\n    for value in values:\n        if value <= 0:\n            continue\n        for sum_value in prefix_sums:\n            prefix_sums[sum_value + value] += prefix_sums[sum_value]\n    return prefix_sums[length]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 19,
      "score": 10.0,
      "candidate": "def count_sequences(values, length):\n    sequences = [0] * (sum(values) + 1)\n    sequences[0] = 1\n    for value in values:\n        for i in range(value, len(sequences)):\n            sequences[i] += sequences[i - value]\n\n    return sequences[length]\n\n\nprint(count_sequences([1, 2, 3], 3))\nprint(count_sequences([1, 2, 3], 4))\nprint(count_sequences([1, 2, 3], 5))\nprint(count_sequences([1, 2, 3, 5, 6], 5))"
    },
    {
      "rank": 20,
      "score": 10.0,
      "candidate": "def count_sequences(values, seq_length):\n    prefix_sums = [0]\n    for value in values:\n        prefix_sums.append(prefix_sums[-1] + value)\n\n    def get_count(index, seq_length):\n        if index + 1 < len(prefix_sums):\n            if seq_length == 1:\n                return 1\n            count = 0\n            for i in range(index + 1, len(prefix_sums)):\n                count += get_count(i, seq_length - 1)\n            return count\n        return 0\n\n    count = 0\n    for i in range(len(prefix_sums)):\n        count += get_count(i, seq_length)\n    return count\n\n\nprint(count_sequences([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3))"
    },
    {
      "rank": 21,
      "score": 9.0,
      "candidate": "def count_sequences(arr, length):\n    prefix_sums = [0]\n    for i in range(len(arr)):\n        prefix_sums.append(prefix_sums[i] + arr[i])\n    count = 0\n    for i in range(len(prefix_sums) - length):\n        if prefix_sums[i + length] - prefix_sums[i] in prefix_sums[i + 1:]:\n            count += 1\n    return count\n\n\nprint(count_sequences([1, 2, 3, 4, 1, 2, 3, 4, 5, 6, 7, 8], 3))\nprint(count_sequences([1, 2, 3, 4, 1, 2, 3, 4, 5, 6, 7, 8, 1], 3))"
    },
    {
      "rank": 22,
      "score": 8.0,
      "candidate": "def count_sequences(values, length):\n    sequences = 0\n    for i in range(length, len(values) + 1):\n        if values[i - length] + sum(values[i - length + 1:i]) == 0:\n            sequences += 1\n    return sequences\n\n\nif __name__ == \"__main__\":\n    print(count_sequences([1, -2, 1, 0, 3], 2))"
    },
    {
      "rank": 23,
      "score": 8.0,
      "candidate": "from itertools import accumulate\n\n\ndef count_sequences(values, length):\n    counts = [0] * (length + 1)\n    counts[0] = 1\n    for i in range(length + 1):\n        counts[i] += counts[i - 1]\n        if i > 0:\n            counts[i] += counts[i - 1]\n    result = counts[length]\n    for i, value in enumerate(accumulate(values)):\n        if i > 0:\n            result -= counts[i - 1]\n        if value > length:\n            result += counts[length]\n        else:\n            result += counts[value]\n    return result\n\n\nif __name__ == '__main__':\n    print(count_sequences([0, 0, 1, 1, 2, 2, 3, 3, 4, 4], 1))"
    },
    {
      "rank": 24,
      "score": 8.0,
      "candidate": "from collections import defaultdict\n\n\ndef sequence_count(values, length):\n    result = 0\n    prefix_sums = defaultdict(int)\n    prefix_sums[0] = 1\n\n    for value in values:\n        prefix_sums[value] += 1\n        for key in prefix_sums:\n            prefix_sums[key + value] += prefix_sums[key]\n        result += prefix_sums[value]\n\n    return result\n\n\nprint(sequence_count([1, 2, 3, 4, 5], 3))\nprint(sequence_count([1, 2, 3, 4, 5], 2))\nprint(sequence_count([1, 2, 3, 4, 5], 4))\nprint(sequence_count([1, 2, 3, 4, 5], 5))\nprint(sequence_count([1, 2, 3, 4, 5], 6))\nprint(sequence_count([1, 2, 3, 4, 5], 7))"
    },
    {
      "rank": 25,
      "score": 8.0,
      "candidate": "def count_sequences(values, length):\n    prefix_sums = {}\n    for value in values:\n        prefix_sums[value] = prefix_sums.get(value, 0) + 1\n\n    def helper(length, prefix_sum):\n        if length == 1:\n            return prefix_sums.get(prefix_sum, 0)\n        return sum([helper(length - 1, prefix_sum + value) for value in values])\n\n    return helper(length, 0)\n\nprint(count_sequences([1, 2, 2, 3], 2))\nprint(count_sequences([1, 2, 3], 2))\nprint(count_sequences([1, 2, 3], 3))"
    },
    {
      "rank": 26,
      "score": 8.0,
      "candidate": "def prefix_sums(values, length):\n    count = 0\n\n    for i in range(length - 1, len(values)):\n        if sum(values[i - length + 1:i + 1]) == 0:\n            count += 1\n\n    return count\n\n\nprint(prefix_sums([1, 2, 3, 4, 5, 6], 3))\nprint(prefix_sums([1, 1, 1, 1, 1, 1], 2))\nprint(prefix_sums([1, 2, 3, 4, 5, 6], 6))\nprint(prefix_sums([1, 1, 1, 1, 1, 1], 1))"
    },
    {
      "rank": 27,
      "score": 8.0,
      "candidate": "def sequence_count(values, length):\n    prefix_sums = [0]\n    for value in values:\n        prefix_sums.append(prefix_sums[-1] + value)\n\n    return sum(\n        prefix_sums[i + length] - prefix_sums[i]\n        for i in range(len(prefix_sums) - length)\n        if prefix_sums[i + length] <= 0\n    )\n\n\nprint(sequence_count([1, 2, 3, 4, 5, 6, 7], 4))"
    },
    {
      "rank": 28,
      "score": 8.0,
      "candidate": "from collections import defaultdict\n\n\ndef count_prefix_sequences(values, length):\n    \"\"\"\n    Count sequences of given length having non-negative prefix sums that can be generated by given values.\n    :param values: list of integers\n    :param length: length of sequences\n    :return: number of sequences\n    \"\"\"\n    prefix_sums = defaultdict(int)\n    prefix_sums[0] = 1\n    for value in values:\n        prefix_sums[value] += prefix_sums[value - 1]\n\n    return prefix_sums[values[-1]] - prefix_sums[values[-1] - length + 1]\n\n\nprint(count_prefix_sequences([1, 1, 1, 1], 2))\nprint(count_prefix_sequences([1, 2, 3, 1], 2))\nprint(count_prefix_sequences([1, 2, 3, 1], 3))"
    },
    {
      "rank": 29,
      "score": 8.0,
      "candidate": "def count_sequences(values, length):\n    sequences = 0\n    # Fill out the values array with -1s\n    for i in range(length):\n        values[i] = -1\n\n    # Iterate over the values array\n    for i in range(length):\n        # If the value is -1, count all the sequences with prefix sum <= i\n        if values[i] == -1:\n            sequences += i + 1\n        else:\n            sequences += values[i]\n\n        # If the sum of all the values in the array is less than the length,\n        # we can extend the sequence by adding a new value\n        if sum(values) < length:\n            # Set the value of the next position to the length\n            values[i+1] = length - sum(values) - 1\n\n    return sequences\n\nif __name__ == '__main__':\n    print(count_sequences([4, 1, 3, 1, 4, 1], 9))"
    },
    {
      "rank": 30,
      "score": 8.0,
      "candidate": "def count_sequences(length, values):\n    if length == 0:\n        return 1\n\n    if not values:\n        return 0\n\n    return count_sequences(length - 1, values) + count_sequences(length, values[1:])\n\n\nprint(count_sequences(3, [1, 2, 3, 4]))"
    },
    {
      "rank": 31,
      "score": 8.0,
      "candidate": "def count_prefix_sums(values, length):\n    if length == 0:\n        return 1\n\n    if len(values) == 0:\n        return 0\n\n    return count_prefix_sums(values[1:], length) + count_prefix_sums(values[1:], length - 1)\n\nprint(count_prefix_sums([1, 2, 3, 4, 5, 6], 3))"
    },
    {
      "rank": 32,
      "score": 8.0,
      "candidate": "def count_sequences(values, length):\n    \"\"\"\n    :param values: list of numbers\n    :param length: length of the sequences\n    :return: int\n    \"\"\"\n    if not values or length < 1:\n        return 0\n\n    values = [0] + values\n    dp = [[0] * (length + 1) for _ in range(len(values))]\n    for i in range(len(values)):\n        dp[i][1] = 1\n\n    for i in range(2, length + 1):\n        for j in range(i, len(values)):\n            for k in range(1, j + 1):\n                if values[j] <= values[j - k] + dp[j - k][i - k]:\n                    dp[j][i] += dp[j - k][i - k]\n\n    return dp[-1][-1]\n\n\nif __name__ == '__main__':\n    print(count_sequences([1, 2, 3, 4, 5], 2))\n    print(count_sequences([1, 2, 3, 4, 5], 3))\n    print(count_sequences([1, 2, 3, 4, 5], 4))\n    print(count_sequences([1, 2, 3, 4, 5], 5))"
    },
    {
      "rank": 33,
      "score": 8.0,
      "candidate": "from collections import defaultdict\n\n\ndef sequences_count(numbers, length):\n    \"\"\"\n    >>> sequences_count([1, 2, 3, 4, 5], 2)\n    4\n    >>> sequences_count([1, 2, 3, 4, 5], 3)\n    2\n    >>> sequences_count([1, 2, 3, 4, 5], 4)\n    1\n    >>> sequences_count([1, 2, 3, 4, 5], 5)\n    1\n    \"\"\"\n    # We can use a prefix sum array to count the number of sequences of a given length\n    # that have a given prefix sum.\n    prefix_sum_counts = defaultdict(int)\n    for number in numbers:\n        # Update the number of sequences ending with a given number of prefix sums\n        for prefix_sum in prefix_sum_counts:\n            prefix_sum_counts[prefix_sum] += number\n        # Update the number of sequences ending with a given prefix sum\n        prefix_sum_counts[0] += number\n\n    return prefix_sum_counts[sum(numbers[:length])]\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 34,
      "score": 8.0,
      "candidate": "from collections import Counter\n\n\ndef sequences_with_prefix_sum(values, length):\n    if length == 0:\n        return 1\n    if len(values) < length:\n        return 0\n    counter = Counter(values[:length])\n    for i in range(length, len(values)):\n        counter += Counter([values[i]])\n        if counter[values[i - length]] > 0:\n            counter[values[i - length]] -= 1\n        if sum(counter.values()) >= length:\n            return counter[0] + 1\n    return 0\n\n\nprint(sequences_with_prefix_sum([1, 2, 3, 4, 5, 6], 2))\nprint(sequences_with_prefix_sum([1, 2, 3, 4, 5, 6], 3))\nprint(sequences_with_prefix_sum([1, 2, 3, 4, 5, 6], 4))\nprint(sequences_with_prefix_sum([1, 2, 3, 4, 5, 6], 5))\nprint(sequences_with_prefix_sum([1, 2, 3, 4, 5, 6], 6))"
    },
    {
      "rank": 35,
      "score": 8.0,
      "candidate": "def count_sequences(values, length):\n    # Write your code here.\n\treturn count_sequences_helper(values, length, 0, {})\n\ndef count_sequences_helper(values, length, current_length, cache):\n\tif current_length == length:\n\t\treturn 1\n\tif current_length > length:\n\t\treturn 0\n\tif current_length == 0:\n\t\treturn sum(values)\n\tif (current_length, values[0]) in cache:\n\t\treturn cache[(current_length, values[0])]\n\telse:\n\t\tresult = 0\n\t\tfor i in range(len(values)):\n\t\t\tresult += count_sequences_helper(values[i+1:], length, current_length + 1, cache)\n\t\tcache[(current_length, values[0])] = result\n\t\treturn result"
    },
    {
      "rank": 36,
      "score": 8.0,
      "candidate": "def count_sequences(values, length):\n    dp = [[0 for _ in range(length)] for _ in range(len(values))]\n    for i in range(len(values)):\n        dp[i][0] = 1\n    for i in range(1, len(values)):\n        for j in range(1, length):\n            if j <= i:\n                dp[i][j] = dp[i-1][j-1]\n            dp[i][j] += dp[i-1][j]\n    return dp[-1][-1]\n\nprint(count_sequences([1, 2, 3, 4, 5, 6, 7, 8, 9], 6))\nprint(count_sequences([1, 2, 3, 4, 5, 6, 7, 8, 9], 1))\nprint(count_sequences([1, 2, 3, 4, 5, 6, 7, 8, 9], 2))\nprint(count_sequences([1, 2, 3, 4, 5, 6, 7, 8, 9], 3))\nprint(count_sequences([1, 2, 3, 4, 5, 6, 7, 8, 9], 4))\nprint(count_sequences([1, 2, 3, 4, 5, 6, 7, 8, 9], 5))\nprint(count_sequences([1, 2, 3, 4, 5, 6, 7, 8, 9], 7))\nprint(count_sequences([1, 2, 3, 4, 5, 6, 7, 8, 9], 8))\nprint(count_sequences([1, 2, 3, 4, 5, 6, 7, 8, 9], 9))\nprint(count_sequences([1, 2, 3, 4, 5, 6, 7, 8, 9], 10))"
    },
    {
      "rank": 37,
      "score": 8.0,
      "candidate": "from collections import defaultdict\n\n\ndef count_sequences(values, length):\n\n    prefix_sum_count = defaultdict(int)\n    prefix_sum_count[0] = 1\n\n    for value in values:\n        current_prefix_sum = 0\n\n        for i in range(length):\n            current_prefix_sum += value ** i\n            if current_prefix_sum in prefix_sum_count:\n                prefix_sum_count[current_prefix_sum] += 1\n\n    return prefix_sum_count[sum(values)]\n\n\nprint(count_sequences([1, 2, 2, 3, 5], 2))\nprint(count_sequences([1, 2, 2, 3, 5], 3))\nprint(count_sequences([1, 2, 2, 3, 5], 5))"
    },
    {
      "rank": 38,
      "score": 8.0,
      "candidate": "def count_sequences(values, length):\n    count = 0\n    for i in range(len(values) - length + 1):\n        prefix_sum = 0\n        for j in range(length):\n            prefix_sum += values[i + j]\n            if prefix_sum < 0:\n                break\n            if j == length - 1:\n                count += 1\n    return count\n\n\nassert count_sequences([1, 2, 3, 4], 2) == 3\nassert count_sequences([1, 2, 3, 4], 3) == 2\nassert count_sequences([-1, -2, -3, -4], 2) == 2\nassert count_sequences([-1, -2, -3, -4], 3) == 1\nassert count_sequences([1, 2, 3, 4, 5], 4) == 2\nassert count_sequences([1, 2, 3, 4, 5], 5) == 1"
    },
    {
      "rank": 39,
      "score": 8.0,
      "candidate": "def count_sequences(nums, k):\n    dp = [0] * (k + 1)\n    dp[0] = 1\n\n    for num in nums:\n        for i in range(k, num - 1, -1):\n            dp[i] += dp[i - num]\n\n    return dp[k]"
    },
    {
      "rank": 40,
      "score": 8.0,
      "candidate": "def count_sequences(nums, length):\n    result = 0\n    for i in range(len(nums)):\n        for j in range(i, len(nums)):\n            if sum(nums[i : j + 1]) == length:\n                result += 1\n    return result\n\n\nprint(count_sequences([1, 2, 3, 4], 3))\nprint(count_sequences([1, 2, 3, 4], 5))\nprint(count_sequences([1, 2, 3, 4], 1))"
    },
    {
      "rank": 41,
      "score": 8.0,
      "candidate": "def prefix_sum_sequence(values, seq_len):\n    if len(values) == 0 or seq_len == 0:\n        return 0\n\n    values = sorted(values)\n    prefix_sums = [0]\n    for value in values:\n        prefix_sums.append(prefix_sums[-1] + value)\n\n    n = len(prefix_sums)\n\n    dp = [[0] * (n + 1) for _ in range(seq_len + 1)]\n\n    for i in range(1, n + 1):\n        dp[1][i] = 1\n\n    for i in range(2, seq_len + 1):\n        for j in range(2, n + 1):\n            dp[i][j] = dp[i][j - 1]\n            for k in range(1, j):\n                if prefix_sums[j] - prefix_sums[k] >= 0:\n                    dp[i][j] += dp[i - 1][k]\n\n    return dp[seq_len][-1]\n\n\nif __name__ == \"__main__\":\n    print(prefix_sum_sequence([0, 1, 2, 3], 3))\n    print(prefix_sum_sequence([0, 1, 2, 3], 2))\n    print(prefix_sum_sequence([0, 1, 2, 3], 1))\n    print(prefix_sum_sequence([0, 1, 2, 3], 0))\n    print(prefix_sum_sequence([], 0))\n    print(prefix_sum_sequence([], 1))\n    print(prefix_sum_sequence([1, 2, 3], 0))\n    print(prefix_sum_sequence([1, 2, 3], 1))\n    print(prefix_sum_sequence([1, 2, 3], 2))\n    print(prefix_sum_sequence([1, 2, 3], 3))\n    print(prefix_sum_sequence([1, 2, 3], 4))"
    },
    {
      "rank": 42,
      "score": 8.0,
      "candidate": "from collections import defaultdict\n\n\ndef get_prefix_sum(values, length):\n    \"\"\"\n    :param values: list of integers\n    :param length: number of elements in prefix sum\n    :return: prefix sums\n    \"\"\"\n    prefix_sum = []\n    for i in range(len(values) - length + 1):\n        prefix_sum.append(sum(values[i:i + length]))\n    return prefix_sum\n\n\ndef count_prefix_sums(values, length):\n    \"\"\"\n    :param values: list of integers\n    :param length: number of elements in prefix sum\n    :return: number of sequences\n    \"\"\"\n    prefix_sum = get_prefix_sum(values, length)\n    count_dict = defaultdict(int)\n    for i in prefix_sum:\n        count_dict[i] += 1\n\n    count = 0\n    for i in count_dict.values():\n        count += i * (i - 1)\n    return count\n\n\nif __name__ == '__main__':\n    values = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    length = 4\n    print(count_prefix_sums(values, length))"
    },
    {
      "rank": 43,
      "score": 8.0,
      "candidate": "def count_sequences(arr, length):\n    count = 0\n    prefix_sums = {0: 1}\n    for i in range(len(arr)):\n        for j in range(len(prefix_sums)):\n            prefix_sum = prefix_sums.get(j)\n            if prefix_sum is None:\n                break\n            prefix_sum += arr[i]\n            if prefix_sum not in prefix_sums:\n                prefix_sums[prefix_sum] = 0\n            prefix_sums[prefix_sum] += prefix_sums[j]\n            if j + arr[i] >= length:\n                count += prefix_sums[j + arr[i]]\n    return count\n\n\nif __name__ == '__main__':\n    arr = [1, 2, 3, 4, 5]\n    length = 10\n    print(count_sequences(arr, length))"
    },
    {
      "rank": 44,
      "score": 8.0,
      "candidate": "def get_sequence_count(arr, length):\n    if len(arr) == 0:\n        return 0\n    dp = [[0] * (len(arr) + 1) for _ in range(length + 1)]\n    dp[1][0] = 1\n    for i in range(1, length + 1):\n        for j in range(1, len(arr) + 1):\n            if arr[j - 1] >= 0:\n                dp[i][j] = dp[i][j - 1] + dp[i - 1][j - 1]\n            else:\n                dp[i][j] = dp[i - 1][j - 1]\n    return dp[length][len(arr)]\n\n\nprint(get_sequence_count([1, 2, 3, 4, 5, 6], 3))\nprint(get_sequence_count([1, 2, 3, 4, 5, 6], 2))\nprint(get_sequence_count([1, 2, 3, 4, 5, 6], 1))\nprint(get_sequence_count([-1, -2, -3, -4, -5, -6], 1))\nprint(get_sequence_count([-1, -2, -3, -4, -5, -6], 2))\nprint(get_sequence_count([1, 2, 3, 4, 5, 6], 6))\nprint(get_sequence_count([-1, -2, -3, -4, -5, -6], 6))"
    },
    {
      "rank": 45,
      "score": 8.0,
      "candidate": "from collections import Counter\n\n\ndef count_sequences(values, length):\n    result = Counter()\n    for value in values:\n        result[value] += 1\n        if value >= length:\n            result[value] -= 1\n        if value >= 2 * length:\n            result[value - length] -= 1\n    return sum(result.values())\n\n\nif __name__ == \"__main__\":\n    assert count_sequences([1, 2, 2, 3, 3, 3, 4, 5, 7, 9], 3) == 6"
    },
    {
      "rank": 46,
      "score": 8.0,
      "candidate": "def count_sequences(n, k):\n    if k == 0:\n        return 1\n    if n <= 0:\n        return 0\n    return count_sequences(n - 1, k - 1) + count_sequences(n - 1, k)\n\n\nprint(count_sequences(3, 2))\nprint(count_sequences(3, 3))\nprint(count_sequences(3, 4))\nprint(count_sequences(3, 5))"
    },
    {
      "rank": 47,
      "score": 8.0,
      "candidate": "from collections import defaultdict\n\ndef count_sequences(n, k, arr):\n    d = defaultdict(int)\n    d[0] = 1\n    for i in range(len(arr)):\n        for j in range(1, n+1):\n            if i-j < 0:\n                continue\n            d[i] = d[i] + d[i-j] * (arr[i] >= arr[i-j])\n    return d[n]\n\nif __name__ == \"__main__\":\n    print(count_sequences(3, 2, [2, 2, 3, 4, 5]))"
    },
    {
      "rank": 48,
      "score": 8.0,
      "candidate": "from collections import defaultdict\n\n\ndef count_sequences(values, length):\n\n    prefix_sums = defaultdict(int)\n    prefix_sums[0] = 1\n\n    result = 0\n    for value in values:\n        for i in range(length - 1, -1, -1):\n            prefix_sums[i + value] += prefix_sums[i]\n        result += prefix_sums[length]\n    return result\n\n\nif __name__ == \"__main__\":\n    values = [2, 2, 3, 4, 4, 5, 5, 5, 6, 6, 6, 6, 6]\n    length = 6\n    assert count_sequences(values, length) == 4"
    },
    {
      "rank": 49,
      "score": 8.0,
      "candidate": "from collections import defaultdict\nfrom typing import List, Tuple\n\n\ndef count_sequences(arr: List[int], seq_len: int) -> int:\n    \"\"\"\n    Time Complexity: O(n*k)\n    Space Complexity: O(n)\n    \"\"\"\n    if not arr or seq_len == 0:\n        return 0\n\n    n = len(arr)\n    prefix_sum = [0] * (n + 1)\n\n    for i in range(n):\n        prefix_sum[i + 1] = prefix_sum[i] + arr[i]\n\n    dp = defaultdict(int)\n    dp[0] = 1\n\n    for i in range(n):\n        for j in range(i + 1, n + 1):\n            if j - i <= seq_len:\n                dp[j] += dp[i]\n            else:\n                break\n\n    return dp[n]\n\n\ndef count_sequences_recursive(arr: List[int], seq_len: int) -> int:\n    \"\"\"\n    Time Complexity: O(n*k)\n    Space Complexity: O(k)\n    \"\"\"\n    if not arr or seq_len == 0:\n        return 0\n\n    n = len(arr)\n    prefix_sum = [0] * (n + 1)\n\n    for i in range(n):\n        prefix_sum[i + 1] = prefix_sum[i] + arr[i]\n\n    def helper(i: int, seq_len: int, prefix_sum: List[int], dp: List[List[int]]) -> int:\n        if i >= n:\n            return 0\n\n        if dp[i][seq_len] != -1:\n            return dp[i][seq_len]\n\n        res = 0\n        for j in range(i + 1, n + 1):\n            if j - i <= seq_len:\n                res += helper(j, seq_len - (j - i), prefix_sum, dp) + 1\n            else:\n                break\n\n        dp["
    },
    {
      "rank": 50,
      "score": 8.0,
      "candidate": "def count_sequences(values, length):\n    prefix_sums = [0]\n    for value in values:\n        prefix_sums.append(prefix_sums[-1] + value)\n\n    sequences = 0\n    for i in range(length + 1):\n        if prefix_sums[-1] >= i:\n            sequences += len(prefix_sums) - i\n\n    return sequences\n\n\nprint(count_sequences([1, 2, 2, 3, 4, 7, 10, 13], 2))\nprint(count_sequences([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3))"
    },
    {
      "rank": 51,
      "score": 8.0,
      "candidate": "def count_sequences(values, length):\n    prefix_sums = [0] * (len(values) + 1)\n    for i in range(len(values)):\n        prefix_sums[i + 1] = prefix_sums[i] + values[i]\n    return count_sequences_helper(prefix_sums, length)\n\n\ndef count_sequences_helper(prefix_sums, length):\n    if length == 0:\n        return 1\n    if length == 1:\n        return sum(prefix_sums[1:]) + 1\n    count = 0\n    for i in range(len(prefix_sums) - length + 1):\n        if prefix_sums[i + length - 1] - prefix_sums[i] >= 0:\n            count += 1\n    return count\n\n\nprint(count_sequences([2, 5, 5, 1, 2, 2, 2, 3, 4, 2, 2], 3))\nprint(count_sequences([2, 5, 5, 1, 2, 2, 2, 3, 4, 2, 2], 4))\nprint(count_sequences([2, 5, 5, 1, 2, 2, 2, 3, 4, 2, 2], 5))\nprint(count_sequences([2, 5, 5, 1, 2, 2, 2, 3, 4, 2, 2], 6))\nprint(count_sequences([2, 5, 5, 1, 2, 2, 2, 3, 4, 2, 2], 7))\nprint(count_sequences([2, 5, 5, 1, 2, 2, 2, 3, 4, 2, 2], 8))\nprint(count_sequences([2, 5, 5, 1, 2, 2, 2, 3, 4, 2, 2], 9))\nprint(count_sequ"
    },
    {
      "rank": 52,
      "score": 8.0,
      "candidate": "def prefix_sums(values, length):\n    if length == 0:\n        return 1\n    if length == 1:\n        return values[0] + 1\n    count = 0\n    for i in range(values[0]):\n        if i == 0:\n            count += prefix_sums(values[1:], length - 1)\n        elif i <= values[0] - values[1]:\n            count += prefix_sums(values[1:], length - 1)\n        else:\n            count += prefix_sums(values[1:], length - 1) - i\n    return count\n\n\nprint(prefix_sums([2, 3, 5], 2))\nprint(prefix_sums([1, 2, 3, 4], 4))\nprint(prefix_sums([1, 2, 3, 4, 5], 5))"
    },
    {
      "rank": 53,
      "score": 8.0,
      "candidate": "def count_sequences(values, seq_len):\n    # initialize the dp array\n    dp = [[0 for _ in range(len(values))] for _ in range(seq_len)]\n    # dp[i][j] denotes the number of sequences of length i and ending at value j\n\n    # fill the 0th row\n    for j in range(len(values)):\n        dp[0][j] = 1\n\n    # iterate over the remaining rows\n    for i in range(1, seq_len):\n        # iterate over the columns\n        for j in range(len(values)):\n            # sum up the number of sequences ending at value j - 1, which is possible if the prefix sum is <= values[j]\n            dp[i][j] = sum(dp[i-1][:j+1])\n\n    return dp[-1][-1]\n\n\nassert count_sequences([1, 2, 3, 4, 5], 3) == 4\nassert count_sequences([1, 2, 3, 4, 5], 2) == 5\nassert count_sequences([1, 2, 3, 4, 5], 1) == 5\nassert count_sequences([1, 2, 3, 4, 5], 4) == 0\nassert count_sequences([1, 2, 3, 4, 5], 5) == 1\n\n\n\"\"\"\nTime complexity: O(n*l)\nSpace complexity: O(n*l)\n\"\"\""
    },
    {
      "rank": 54,
      "score": 8.0,
      "candidate": "from collections import defaultdict\n\n\ndef count_sequences(length, values):\n    prefix_sums = defaultdict(int)\n    prefix_sums[0] = 1\n    for value in values:\n        if value < 0:\n            raise ValueError(\"Values must be non-negative\")\n        for prefix_sum in prefix_sums:\n            prefix_sums[prefix_sum + value] += prefix_sums[prefix_sum]\n    return prefix_sums[length]"
    },
    {
      "rank": 55,
      "score": 8.0,
      "candidate": "from collections import Counter\n\n\ndef count_sequences(values: list, length: int) -> int:\n    \"\"\"\n    :param values: list of integers\n    :param length: length of the sequences to be counted\n    :return: count of sequences\n    >>> count_sequences([1, 2, 3, 4, 5], 4)\n    2\n    >>> count_sequences([1, 2, 3, 4, 5], 2)\n    1\n    >>> count_sequences([1, 2, 3, 4, 5], 1)\n    3\n    >>> count_sequences([1, 2, 3, 4, 5], 5)\n    1\n    >>> count_sequences([1, 2, 3, 4, 5], 3)\n    3\n    >>> count_sequences([1, 2, 3, 4, 5], 6)\n    0\n    >>> count_sequences([1, 2, 3, 4, 5], 0)\n    1\n    \"\"\"\n    prefix_sums = [0]\n    for value in values:\n        prefix_sums.append(prefix_sums[-1] + value)\n    count_of_values = Counter(values)\n    count = 0\n    for value in count_of_values:\n        count += count_of_values[value] * count_of_values[value]\n    for i in range(1, length + 1):\n        for j in range(len(prefix_sums) - i):\n            if prefix_sums[j + i] - prefix_sums[j] in count_of_values:\n                count += 1\n    return count\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 56,
      "score": 8.0,
      "candidate": "def count_sequences(arr, n):\n    if n > len(arr):\n        return 0\n    elif n == 1:\n        return 1\n\n    dp = [[0 for _ in range(n)] for _ in range(len(arr))]\n    dp[0][0] = 1\n\n    for i in range(1, len(arr)):\n        dp[i][0] = 1\n\n        for j in range(1, i+1):\n            if arr[i] > arr[j-1]:\n                dp[i][j] = dp[i-1][j-1] + dp[i-1][j]\n            else:\n                dp[i][j] = dp[i-1][j]\n\n    return dp[-1][-1]\n\n\nprint(count_sequences([1, 2, 3, 4, 1, 5, 1, 1, 6], 4))\nprint(count_sequences([1, 2, 3, 4, 1, 5, 1, 1, 6], 3))\nprint(count_sequences([1, 2, 3, 4, 1, 5, 1, 1, 6], 2))\nprint(count_sequences([1, 2, 3, 4, 1, 5, 1, 1, 6], 1))\nprint(count_sequences([1, 2, 3, 4, 1, 5, 1, 1, 6], 0))\nprint(count_sequences([1, 2, 3, 4, 1, 5, 1, 1, 6], 10))"
    },
    {
      "rank": 57,
      "score": 3.0,
      "candidate": "from collections import Counter\n\n\ndef count_sequences(values, prefix_sum, sequence_length):\n    counter = Counter()\n    for value in values:\n        if value > 0:\n            counter[value] += 1\n        if value <= prefix_sum:\n            prefix_sum -= value\n            counter[prefix_sum] += counter[value]\n    return counter[sequence_length]\n\n\nprint(count_sequences([1, 2, 3, 4, 5, 6, 7], 15, 3))"
    },
    {
      "rank": 58,
      "score": 1.0,
      "candidate": "from collections import defaultdict\nfrom typing import List\n\n\ndef count_sequences(values: List[int], length: int) -> int:\n    \"\"\"\n    Time Complexity: O(n*k)\n    Space Complexity: O(n*k)\n\n    :param values: A list of numbers\n    :param length: The length of sequences to be counted\n    :return: Number of sequences\n    \"\"\"\n    prefix_sums = defaultdict(int)\n    prefix_sums[0] = 1\n\n    for i in range(len(values)):\n        for j in range(i + 1, len(values) + 1):\n            prefix_sum = sum(values[i:j])\n\n            if prefix_sum not in prefix_sums:\n                continue\n\n            prefix_sums[prefix_sum] += prefix_sums[prefix_sum - prefix_sums[prefix_sum]]\n\n    return prefix_sums[length]\n\n\nif __name__ == \"__main__\":\n    assert count_sequences([1, 2, 3, 4, 5], 15) == 7\n    assert count_sequences([1, 2, 3, 4, 5], 20) == 24"
    },
    {
      "rank": 59,
      "score": 1.0,
      "candidate": "def count_sequences(values, length):\n    sequences = [0] * (length + 1)\n    sequences[0] = 1\n    for value in values:\n        for i in range(1, len(sequences)):\n            if value > i:\n                sequences[i] += sequences[i - 1]\n    return sequences[length]\n\n\nassert count_sequences([1, 2, 3], 2) == 3\nassert count_sequences([1, 2, 3, 4], 2) == 7"
    },
    {
      "rank": 60,
      "score": 1.0,
      "candidate": "def prefix_sum_sequences_count(arr, length):\n    \"\"\"\n    :param arr: list of integers\n    :param length: int\n    :return: int\n    \"\"\"\n    dp = [[0] * (length + 1) for _ in range(len(arr) + 1)]\n    dp[0][0] = 1\n\n    for i in range(1, len(arr) + 1):\n        for j in range(1, length + 1):\n            if j > i:\n                break\n            if arr[i - 1] >= j:\n                dp[i][j] = dp[i - 1][j] + dp[i - 1][j - arr[i - 1]]\n            else:\n                dp[i][j] = dp[i - 1][j]\n\n    return dp[len(arr)][length]\n\n\ndef test_prefix_sum_sequences_count():\n    assert prefix_sum_sequences_count([1, 2, 3, 4], 2) == 3\n    assert prefix_sum_sequences_count([1, 2, 3, 4], 3) == 4\n    assert prefix_sum_sequences_count([1, 2, 3, 4], 4) == 4\n    assert prefix_sum_sequences_count([1, 2, 3, 4], 5) == 4\n    assert prefix_sum_sequences_count([1, 2, 3, 4], 6) == 4\n    assert prefix_sum_sequences_count([1, 2, 3, 4], 7) == 4\n    assert prefix_sum_sequences_count([1, 2, 3, 4], 8) == 4\n    assert prefix_sum_sequences_count([1, 2, 3, 4], 9) == 4\n    assert prefix_sum_sequences_count([1, 2, 3, 4], 10) == 4\n\n\nif __name__ == '__main__':\n    test_prefix_sum"
    },
    {
      "rank": 61,
      "score": 1.0,
      "candidate": "from typing import List\n\n\ndef prefix_sum_sequences(values: List[int], length: int) -> int:\n    \"\"\"\n    >>> prefix_sum_sequences([0, 1, 1, 1, 2, 3, 4, 5, 6, 7, 8], 3)\n    5\n    >>> prefix_sum_sequences([0, 1, 1, 1, 2, 3, 4, 5, 6, 7, 8], 4)\n    8\n    >>> prefix_sum_sequences([0, 1, 1, 1, 2, 3, 4, 5, 6, 7, 8], 5)\n    3\n    >>> prefix_sum_sequences([0, 1, 1, 1, 2, 3, 4, 5, 6, 7, 8], 6)\n    1\n    >>> prefix_sum_sequences([0, 1, 1, 1, 2, 3, 4, 5, 6, 7, 8], 7)\n    0\n    >>> prefix_sum_sequences([0, 1, 1, 1, 2, 3, 4, 5, 6, 7, 8], 8)\n    0\n    >>> prefix_sum_sequences([0, 1, 1, 1, 2, 3, 4, 5, 6, 7, 8], 9)\n    0\n    \"\"\"\n    prefix_sum = 0\n    count = 0\n\n    for value in values:\n        prefix_sum += value\n\n        if prefix_sum >= length:\n            count += 1\n            prefix_sum -= length\n\n    return count\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 62,
      "score": 1.0,
      "candidate": "from typing import List\n\n\ndef count_sequences(values: List[int], length: int) -> int:\n    \"\"\"\n    Time Complexity: O(n * m)\n    Space Complexity: O(m)\n    \"\"\"\n    sequences = 0\n    sequences_map = {}\n\n    for i in range(len(values) - length + 1):\n        prefix = sum(values[i : i + length])\n        if prefix not in sequences_map:\n            sequences_map[prefix] = 1\n        else:\n            sequences_map[prefix] += 1\n\n    for _, v in sequences_map.items():\n        sequences += v * (v - 1) // 2\n\n    return sequences\n\n\nif __name__ == \"__main__\":\n    assert count_sequences([1, 2, 3, 4], 2) == 3"
    },
    {
      "rank": 63,
      "score": 1.0,
      "candidate": "def prefix_sum_sequences(values, length):\n\n    prefix_sums = {}\n\n    for value in values:\n        prefix_sum = 0\n        for num in value:\n            prefix_sum += num\n            prefix_sums[prefix_sum] = prefix_sums.get(prefix_sum, 0) + 1\n\n    result = 0\n    for prefix_sum in prefix_sums:\n        if prefix_sum < length:\n            continue\n\n        result += prefix_sums[prefix_sum]\n\n    return result\n\n\nprint(prefix_sum_sequences([[1, 2, 3], [3, 2, 1], [3, 5, 1, 2], [1, 2, 3, 4]], 4))"
    },
    {
      "rank": 64,
      "score": 1.0,
      "candidate": "def count_sequences(arr, length):\n    \"\"\"\n    :param arr: list[int]\n    :param length: int\n    :return: int\n    \"\"\"\n    return count_sequences_helper(arr, length, 0, {})\n\n\ndef count_sequences_helper(arr, length, start, memo):\n    if start == len(arr) or length == 0:\n        return 1 if length == 0 else 0\n    if length == 1:\n        return sum(arr[start:])\n    if (start, length) in memo:\n        return memo[(start, length)]\n    count = 0\n    for i in range(start, len(arr)):\n        count += count_sequences_helper(arr, length - (i - start), i, memo)\n    memo[(start, length)] = count\n    return count\n\n\ndef main():\n    print(count_sequences([0, 1, 1, 0, 1], 3))\n    print(count_sequences([0, 1, 1, 0, 1], 5))\n    print(count_sequences([0, 1, 1, 0, 1], 1))\n    print(count_sequences([0, 1, 1, 0, 1], 4))\n    print(count_sequences([0, 1, 1, 0, 1], 2))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 65,
      "score": 1.0,
      "candidate": "def non_negative_prefix_sums_count(arr, length):\n    prefix_sums_count = {}\n    for i in range(len(arr)):\n        prefix_sum = 0\n        for j in range(i, len(arr)):\n            prefix_sum += arr[j]\n            if prefix_sum in prefix_sums_count:\n                prefix_sums_count[prefix_sum] += 1\n            else:\n                prefix_sums_count[prefix_sum] = 1\n            if prefix_sum == length:\n                return prefix_sums_count[prefix_sum]\n    return 0\n\n\nassert non_negative_prefix_sums_count([0, 1, 2, 3, 4, 5, 6, 7], 2) == 5\nassert non_negative_prefix_sums_count([1, 2, 3, 4, 5, 6, 7], 2) == 4\nassert non_negative_prefix_sums_count([1, 2, 3, 4, 5, 6, 7], 7) == 1"
    },
    {
      "rank": 66,
      "score": 1.0,
      "candidate": "from collections import defaultdict\n\n\ndef count_sequences(values, length):\n    prefix_sums = defaultdict(int)\n    prefix_sums[0] = 1\n    result = 0\n\n    for value in values:\n        for i in range(value, length + 1):\n            result += prefix_sums[i - value]\n        for i in range(length + 1):\n            prefix_sums[i] += prefix_sums[i - value]\n\n    return result\n\n\nprint(count_sequences([1, 2, 3, 4, 5, 6], 10))"
    },
    {
      "rank": 67,
      "score": 1.0,
      "candidate": "def count_sequences(values, length):\n    count = 0\n    for i in range(length):\n        if i == 0:\n            count += 1\n        else:\n            count += sum(values[i-1:])\n\n    return count\n\n\nif __name__ == '__main__':\n    assert count_sequences([1, 2, 3, 4, 5], 2) == 2\n    assert count_sequences([1, 2, 3, 4, 5], 3) == 3\n    assert count_sequences([1, 2, 3, 4, 5], 4) == 4\n    assert count_sequences([1, 2, 3, 4, 5], 5) == 5\n    assert count_sequences([1, 2, 3, 4, 5], 6) == 5"
    },
    {
      "rank": 68,
      "score": 1.0,
      "candidate": "def prefix_sum_sequence(values, length):\n    prefix_sums = {}\n    for value in values:\n        prefix_sums[value] = prefix_sums.get(value, 0) + 1\n\n    return count_sequences(prefix_sums, length)\n\n\ndef count_sequences(prefix_sums, length):\n    if length == 0:\n        return 1\n    elif length < 0:\n        return 0\n\n    result = 0\n    for prefix_sum, count in prefix_sums.items():\n        new_length = length - 1\n        if new_length in prefix_sums:\n            result += count * prefix_sums[new_length]\n\n    return result\n\n\ndef test_prefix_sum_sequence():\n    assert prefix_sum_sequence([1, 2, 3, 4, 5], 5) == 4\n    assert prefix_sum_sequence([1, 2, 3, 4, 5], 6) == 0\n    assert prefix_sum_sequence([1, 2, 3, 4, 5], 7) == 0\n    assert prefix_sum_sequence([1, 2, 3, 4, 5], 8) == 0\n    assert prefix_sum_sequence([1, 2, 3, 4, 5], 9) == 0\n    assert prefix_sum_sequence([1, 2, 3, 4, 5], 10) == 0\n    assert prefix_sum_sequence([1, 2, 3, 4, 5], 11) == 0\n    assert prefix_sum_sequence([1, 2, 3, 4, 5], 12) == 0\n    assert prefix_sum_sequence([1, 2, 3, 4, 5], 13) == 0\n    assert prefix_sum_sequence([1, 2, 3, 4, 5], 14) == 0\n    assert prefix_sum_sequence([1, 2, 3, 4, 5], 15) =="
    },
    {
      "rank": 69,
      "score": 1.0,
      "candidate": "def count_sequences(values, length):\n    sequences = [1] + [0] * length\n    for val in values:\n        for i in range(length - 1, -1, -1):\n            sequences[i] += sequences[i + 1]\n            if i > 0 and sequences[i] <= val:\n                sequences[i] += 1\n    return sequences[0]\n\n\nif __name__ == \"__main__\":\n    assert count_sequences([1, 2, 3, 4], 3) == 3\n    assert count_sequences([1, 2, 3, 4], 2) == 2\n    assert count_sequences([1, 2, 3, 4], 1) == 4\n    assert count_sequences([1, 2, 3, 4], 0) == 1\n    assert count_sequences([1, 2, 3, 4], 10) == 0"
    },
    {
      "rank": 70,
      "score": 1.0,
      "candidate": "def non_negative_prefix_sums_count(values: list, length: int) -> int:\n    \"\"\"\n    >>> non_negative_prefix_sums_count([1, 2, 3, 4, 5, 6], 4)\n    14\n    \"\"\"\n    result = 0\n    for i in range(len(values)):\n        if i + length > len(values):\n            break\n        for j in range(i, i + length):\n            if values[j] < 0:\n                break\n        else:\n            result += 1\n    return result\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 71,
      "score": 1.0,
      "candidate": "def count_sequences(arr, k):\n    n = len(arr)\n    if n == 0:\n        return 0\n    dp = [[0 for _ in range(k)] for _ in range(n)]\n    dp[0][0] = 1\n\n    for i in range(1, n):\n        for j in range(k):\n            if j == 0:\n                dp[i][j] = 1\n            elif j <= i:\n                dp[i][j] = dp[i-1][j] + dp[i-1][j-1]\n\n    res = dp[n-1][k-1]\n    for i in range(k):\n        res += dp[n-1][i]\n    return res\n\n\nprint(count_sequences([1, 2, 3, 4, 5], 2))"
    },
    {
      "rank": 72,
      "score": 1.0,
      "candidate": "def count_sequences(values, length):\n    \"\"\"\n    O(n * l) time | O(n * l) space\n    \"\"\"\n\n    dp = [[0 for _ in range(length + 1)] for _ in range(len(values) + 1)]\n    dp[0][0] = 1\n\n    for i in range(1, len(dp)):\n        for j in range(1, len(dp[0])):\n            dp[i][j] = dp[i - 1][j]\n\n            if j - 1 >= 0:\n                if j - 1 < len(dp[0]):\n                    dp[i][j] += dp[i][j - 1]\n                else:\n                    dp[i][j] += 0\n\n            if values[i - 1] >= 0:\n                dp[i][j] += dp[i - 1][j - 1] if j - 1 >= 0 else 0\n\n    return dp[-1][-1]"
    },
    {
      "rank": 73,
      "score": 1.0,
      "candidate": "from collections import defaultdict\n\n\ndef count_sequences(arr, length):\n    count = defaultdict(int)\n\n    for num in arr:\n        if num < 0:\n            return 0\n\n        for key in count.keys():\n            count[key] += num\n\n        if length == 1:\n            count[0] += 1\n\n        count[num] += 1\n\n    return count[0]\n\n\nprint(count_sequences([1, 2, 3, 4, 5, 6, 7], 4))"
    },
    {
      "rank": 74,
      "score": 1.0,
      "candidate": "from collections import defaultdict\n\n\ndef prefix_sum_sequences(arr, target_length):\n    dp = defaultdict(int)\n    dp[0] = 1\n    prefix_sum = 0\n    for num in arr:\n        prefix_sum += num\n        if prefix_sum not in dp:\n            dp[prefix_sum] = 0\n        dp[prefix_sum] += dp[prefix_sum - num]\n\n    return dp[target_length]\n\n\ndef test_prefix_sum_sequences():\n    assert prefix_sum_sequences([2, 3, 5, 4, 4], 1) == 2\n    assert prefix_sum_sequences([2, 3, 5, 4, 4], 2) == 4\n    assert prefix_sum_sequences([2, 3, 5, 4, 4], 3) == 5\n    assert prefix_sum_sequences([2, 3, 5, 4, 4], 4) == 6\n    assert prefix_sum_sequences([2, 3, 5, 4, 4], 5) == 5\n\n\nif __name__ == \"__main__\":\n    test_prefix_sum_sequences()"
    },
    {
      "rank": 75,
      "score": 1.0,
      "candidate": "from collections import defaultdict\n\ndef prefix_sum_count(arr, length):\n    prefix_sums = defaultdict(int)\n    prefix_sums[0] = 1\n    count = 0\n    for num in arr:\n        for prefix_sum in prefix_sums:\n            prefix_sums[prefix_sum + num] += prefix_sums[prefix_sum]\n        count += prefix_sums[num]\n    return count\n\n\nprint(prefix_sum_count([1, 2, 3, 4, 5], 1))\nprint(prefix_sum_count([1, 2, 3, 4, 5], 2))\nprint(prefix_sum_count([1, 2, 3, 4, 5], 3))\nprint(prefix_sum_count([1, 2, 3, 4, 5], 4))\nprint(prefix_sum_count([1, 2, 3, 4, 5], 5))\nprint(prefix_sum_count([1, 2, 3, 4, 5], 6))"
    },
    {
      "rank": 76,
      "score": 1.0,
      "candidate": "from collections import defaultdict\n\n\ndef count_sequences(arr, k):\n    result = 0\n    dp = defaultdict(int)\n    for i in range(k):\n        dp[0] += 1\n\n    for i in range(k, len(arr)):\n        dp[arr[i]] += 1\n\n        for j in range(k - 1):\n            dp[arr[i] - arr[i - j - 1]] += dp[j]\n\n        result += dp[arr[i] - arr[i - k + 1]]\n\n    return result\n\n\nprint(count_sequences([2, 2, 2, 2, 2], 2))\nprint(count_sequences([1, 1, 2, 2, 3], 2))\nprint(count_sequences([1, 2, 3, 4, 5], 2))"
    },
    {
      "rank": 77,
      "score": 1.0,
      "candidate": "from collections import defaultdict\n\n\ndef count_sequences(values, length):\n    \"\"\"\n    Time Complexity: O(n*l)\n    Space Complexity: O(n)\n\n    :param values: list[int]\n    :param length: int\n    :return: int\n    \"\"\"\n    if length == 0:\n        return 1\n\n    result = 0\n    prefix = 0\n    prefix_to_count = defaultdict(int)\n\n    for value in values:\n        prefix += value\n        if prefix < 0:\n            continue\n        if length == 1:\n            result += 1\n            continue\n\n        result += prefix_to_count[prefix]\n        prefix_to_count[prefix] += 1\n\n    return result\n\n\nassert count_sequences([3, 3, 3, 3, 5], 1) == 1\nassert count_sequences([3, 3, 3, 3, 5], 2) == 1\nassert count_sequences([3, 3, 3, 3, 5], 3) == 1\nassert count_sequences([3, 3, 3, 3, 5], 4) == 1\nassert count_sequences([3, 3, 3, 3, 5], 5) == 1\n\nassert count_sequences([3, 3, 3, 3, 5], 6) == 0\n\nassert count_sequences([-1, -3, -3, 5, 1, 1, 1, 1], 2) == 3\nassert count_sequences([-1, -3, -3, 5, 1, 1, 1, 1], 3) == 4\nassert count_sequences([-1, -3, -3, 5, 1, 1, 1, 1], 4) == 4\nassert count_sequences([-1, -3, -3, 5, 1, 1, 1, 1], 5) == 4\nassert count_sequences([-1, -3, -3,"
    },
    {
      "rank": 78,
      "score": 1.0,
      "candidate": "def count_sequences(values, length):\n    prefix_sums = [0]\n\n    for value in values:\n        prefix_sums.append(prefix_sums[-1] + value)\n\n    count = 0\n\n    for i in range(len(prefix_sums) - length):\n        for j in range(i + 1, len(prefix_sums) - length + 1):\n            if prefix_sums[j] - prefix_sums[i] == length:\n                count += 1\n\n    return count\n\n\nassert count_sequences([2, 2, 3], 2) == 2\nassert count_sequences([2, 2, 3], 3) == 1\nassert count_sequences([2, 2, 3], 4) == 0"
    },
    {
      "rank": 79,
      "score": 1.0,
      "candidate": "from collections import defaultdict\n\n\ndef count_sequences(values, length):\n    if len(values) == 0:\n        return 0\n\n    dp = defaultdict(int)\n    dp[0] = 1\n    prefix_sum = 0\n    count = 0\n\n    for value in values:\n        prefix_sum += value\n        count += dp[prefix_sum]\n        dp[prefix_sum] += 1\n\n    return count\n\n\ndef test_count_sequences():\n    assert count_sequences([1, 2, 3, 4], 2) == 2\n    assert count_sequences([1, 2, 3, 4], 3) == 4\n    assert count_sequences([1, 2, 3, 4], 4) == 7\n    assert count_sequences([1, 2, 3, 4], 5) == 8\n\n\nif __name__ == '__main__':\n    test_count_sequences()"
    },
    {
      "rank": 80,
      "score": 1.0,
      "candidate": "def sequence_prefix_sum(values: list, length: int) -> int:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(n)\n    \"\"\"\n    prefix_sums = {0: 1}\n    count = 0\n\n    for v in values:\n        for prefix_sum in prefix_sums:\n            prefix_sums[prefix_sum + v] = (\n                prefix_sums.get(prefix_sum + v, 0) + prefix_sums.get(prefix_sum, 0)\n            )\n\n        if length in prefix_sums:\n            count += prefix_sums[length]\n\n    return count\n\n\nif __name__ == \"__main__\":\n    assert sequence_prefix_sum([3, 1, 4, 1, 5], 3) == 4\n    assert sequence_prefix_sum([3, 1, 4, 1, 5], 2) == 3\n    assert sequence_prefix_sum([3, 1, 4, 1, 5], 1) == 3\n    assert sequence_prefix_sum([3, 1, 4, 1, 5], 0) == 0\n    assert sequence_prefix_sum([3, 1, 4, 1, 5], 5) == 1\n    assert sequence_prefix_sum([1, 1, 2, 3, 4], 2) == 10\n    assert sequence_prefix_sum([1, 1, 2, 3, 4], 3) == 4\n    assert sequence_prefix_sum([1, 1, 2, 3, 4], 4) == 2\n    assert sequence_prefix_sum([1, 1, 2, 3, 4], 5) == 1"
    },
    {
      "rank": 81,
      "score": 1.0,
      "candidate": "from itertools import accumulate\nfrom collections import Counter\n\ndef count_sequences(values, length):\n    \"\"\"\n    Return the number of sequences of given length with non-negative prefix sums.\n    \"\"\"\n    # check for valid inputs\n    if length < 1 or len(values) < length:\n        raise ValueError(\"length must be greater than 0 and length of values must be greater than length\")\n\n    # compute prefix sums\n    sums = list(accumulate(values))\n\n    # compute the number of sequences\n    count = 0\n    for index in range(len(sums)):\n        if sums[index] > length:\n            continue\n        if sums[index] == length:\n            count += 1\n        elif sums[index] < length:\n            # count the number of sequences of length - sums[index] with non-negative prefix sums\n            count += count_sequences(values[index:], length - sums[index])\n\n    return count\n\ndef test_cases():\n    \"\"\"\n    >>> count_sequences([1, 2, 3, 4, 5, 6, 7, 8, 9], 10)\n    1\n    >>> count_sequences([1, 2, 3, 4, 5, 6, 7, 8, 9], 11)\n    0\n    >>> count_sequences([1, 2, 3, 4, 5, 6, 7, 8, 9], 9)\n    1\n    >>> count_sequences([1, 2, 3, 4, 5, 6, 7, 8, 9], 8)\n    1\n    >>> count_sequences([1, 2, 3, 4, 5, 6, 7, 8, 9], 7)\n    1\n    >>> count_sequences([1, 2, 3, 4, 5, 6, 7, 8, 9], 6)\n    1\n    >>> count_sequences([1, 2, 3, 4, 5, 6, 7, 8, 9], 5)"
    },
    {
      "rank": 82,
      "score": 1.0,
      "candidate": "from collections import defaultdict\n\n\ndef count_sequences(values, length):\n\n    dp = defaultdict(int)\n\n    for val in values:\n        dp[val] = 1\n\n    for i in range(1, length + 1):\n        for j in range(len(values)):\n            if values[j] <= i:\n                dp[i] += dp[i - values[j]]\n\n    return dp[length]\n\n\nassert count_sequences([1, 2, 3, 4], 4) == 5\nassert count_sequences([1, 2, 3, 4], 10) == 4\nassert count_sequences([1, 2, 3, 4, 5], 5) == 3"
    },
    {
      "rank": 83,
      "score": 1.0,
      "candidate": "def count_prefix_sums(values, length):\n    prefix_sums = [0]\n    for value in values:\n        prefix_sums.append(prefix_sums[-1] + value)\n\n    return sum(prefix_sums[i] >= length * sum(values[i:]) for i in range(len(values)))\n\n\nimport unittest\n\n\nclass TestFirst(unittest.TestCase):\n    def test_first(self):\n        test = self\n        Test = self\n        test.assert_equals = Test.assertEqual\n        Test.assert_equals = Test.assertEqual\n        Test.assert_equals(count_prefix_sums([1, 2, 3, 4], 1), 1)\n        Test.assert_equals(count_prefix_sums([1, 2, 3, 4], 4), 1)\n        Test.assert_equals(count_prefix_sums([1, 2, 3, 4], 3), 2)\n        Test.assert_equals(count_prefix_sums([1, 2, 3, 4], 2), 3)\n        Test.assert_equals(count_prefix_sums([1, 2, 3, 4], 0), 4)\n        Test.assert_equals(count_prefix_sums([1, 2, 3, 4], 5), 0)\n        Test.assert_equals(count_prefix_sums([1, 2, 3, 4, 5, 6, 7], 3), 6)"
    },
    {
      "rank": 84,
      "score": 1.0,
      "candidate": "def sequence_count(values, seq_len):\n    \"\"\"\n    Time Complexity: O(n^2)\n    Space Complexity: O(n)\n    \"\"\"\n    count = 0\n    for i in range(len(values)):\n        if i + seq_len < len(values):\n            for j in range(i + 1, i + seq_len + 1):\n                if sum(values[i:j]) <= sum(values[:j]):\n                    count += 1\n\n    return count\n\n\nif __name__ == \"__main__\":\n    assert sequence_count([1, 2, 3, 4], 2) == 2\n    assert sequence_count([1, 2, 3, 4], 3) == 4\n    assert sequence_count([1, 2, 3, 4], 4) == 5"
    },
    {
      "rank": 85,
      "score": 1.0,
      "candidate": "def count_sequences(values, length):\n    sequences = [0] * (sum(values) + 1)\n    sequences[0] = 1\n\n    for value in values:\n        for index in range(value, len(sequences)):\n            sequences[index] += sequences[index - value]\n\n    return sequences[length]\n\n\nif __name__ == '__main__':\n    assert count_sequences([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5) == 16\n    assert count_sequences([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 6) == 60"
    },
    {
      "rank": 86,
      "score": 1.0,
      "candidate": "from collections import Counter\n\n\ndef count_sequences(values: list[int], length: int) -> int:\n    \"\"\"\n    Calculate the number of sequences of given length having non-negative prefix sums that can be generated by given\n    values.\n\n    Time Complexity: O(n^2 * l)\n    Space Complexity: O(n)\n    \"\"\"\n    count = Counter()\n    for value in values:\n        count[value] += 1\n\n    total = 0\n    for value in values:\n        if value == 0:\n            total += 1\n        else:\n            total += count[value]\n\n    return total\n\n\nif __name__ == \"__main__\":\n    assert count_sequences([1, 1, 1], 2) == 3\n    assert count_sequences([1, 1, 1], 3) == 6\n    assert count_sequences([1, 1, 1], 4) == 9\n    assert count_sequences([1, 1, 1], 5) == 12\n    assert count_sequences([1, 2, 3], 2) == 3\n    assert count_sequences([1, 2, 3], 3) == 6\n    assert count_sequences([1, 2, 3], 4) == 9\n    assert count_sequences([1, 2, 3], 5) == 12\n    assert count_sequences([1, 2, 3, 4], 2) == 3\n    assert count_sequences([1, 2, 3, 4], 3) == 6\n    assert count_sequences([1, 2, 3, 4], 4) == 9\n    assert count_sequences([1, 2, 3, 4], 5) == 12\n    assert count_sequences([1, 2, 3, 4, 5], 2) == 3\n    assert count_sequences([1, 2, 3, 4, 5], 3) == 6\n    assert count_sequences([1,"
    },
    {
      "rank": 87,
      "score": 1.0,
      "candidate": "from collections import defaultdict\n\n\ndef count_sequences(values, length):\n\n    prefix_sum_count = defaultdict(int)\n    for value in values:\n        if value < 0:\n            continue\n        prefix_sum_count[value] += 1\n\n    result = 0\n    for value in values:\n        if value < 0:\n            continue\n        for i in range(value, length + 1):\n            result += prefix_sum_count[i]\n\n    return result\n\n\ndef test_count_sequences():\n    assert count_sequences([1, 2, 3, 4, 5], 3) == 2\n    assert count_sequences([1, 2, 3, 4, 5], 4) == 2\n    assert count_sequences([1, 2, 3, 4, 5], 5) == 1\n    assert count_sequences([1, 2, 3, 4, 5], 6) == 0\n\n    assert count_sequences([-1, -2, -3, -4, -5], 3) == 0\n    assert count_sequences([-1, -2, -3, -4, -5], 4) == 0\n    assert count_sequences([-1, -2, -3, -4, -5], 5) == 0\n    assert count_sequences([-1, -2, -3, -4, -5], 6) == 0"
    },
    {
      "rank": 88,
      "score": 1.0,
      "candidate": "from typing import List\n\n\ndef count_sequences(values: List[int], length: int) -> int:\n    prefix_sums = {0: 1}\n\n    for value in values:\n        prefix_sums[value] = 1\n        for prefix_sum in prefix_sums.keys():\n            prefix_sums[prefix_sum + value] = prefix_sums.get(prefix_sum + value, 0) + prefix_sums.get(prefix_sum, 0)\n\n    return prefix_sums.get(length, 0)\n\n\nif __name__ == \"__main__\":\n    assert count_sequences([1, 2, 3, 3], 6) == 2\n    assert count_sequences([1, 5, 3, 3], 6) == 1\n    assert count_sequences([1, 5, 3, 3], 7) == 1"
    },
    {
      "rank": 89,
      "score": 1.0,
      "candidate": "from collections import defaultdict\n\n\ndef get_count(arr, k):\n    d = defaultdict(int)\n    prefix_sum = 0\n    count = 0\n\n    for i in range(len(arr)):\n        prefix_sum += arr[i]\n\n        if prefix_sum >= 0:\n            if d[prefix_sum] == 0:\n                count += 1\n\n            d[prefix_sum] += 1\n\n    return count\n\n\narr = [1, 2, 3, 4, 5, 6]\nk = 5\nprint(get_count(arr, k))"
    },
    {
      "rank": 90,
      "score": 1.0,
      "candidate": "def count_sequences(values, length):\n    if not values or length < 1:\n        return 0\n\n    sequences_count = [0] * (len(values) + 1)\n    sequences_count[0] = 1\n\n    for i in range(len(values)):\n        for j in range(1, length + 1):\n            if i - j < 0:\n                break\n\n            if values[i] < values[i - j]:\n                sequences_count[i] += sequences_count[i - j]\n\n    return sequences_count[-1]\n\n\nprint(count_sequences([0, 1, 2, 3, 4, 5, 6, 7], 2))\nprint(count_sequences([0, 1, 2, 3, 4, 5, 6, 7], 3))\nprint(count_sequences([0, 1, 2, 3, 4, 5, 6, 7], 4))\nprint(count_sequences([0, 1, 2, 3, 4, 5, 6, 7], 5))\nprint(count_sequences([0, 1, 2, 3, 4, 5, 6, 7], 6))\nprint(count_sequences([0, 1, 2, 3, 4, 5, 6, 7], 7))"
    },
    {
      "rank": 91,
      "score": 1.0,
      "candidate": "def count_non_negative_sequences(length, values):\n    if length == 1:\n        return len([x for x in values if x >= 0])\n\n    count = 0\n    for value in values:\n        if value >= 0:\n            count += count_non_negative_sequences(length - 1, values)\n    return count\n\n\nimport unittest\n\n\nclass Test(unittest.TestCase):\n    def test(self):\n        self.assertEqual(count_non_negative_sequences(4, [1, 2, 3, 4, 5]), 3)\n        self.assertEqual(count_non_negative_sequences(3, [1, 2, 3, 4, 5]), 5)\n        self.assertEqual(count_non_negative_sequences(2, [1, 2, 3, 4, 5]), 6)\n        self.assertEqual(count_non_negative_sequences(1, [1, 2, 3, 4, 5]), 5)\n        self.assertEqual(count_non_negative_sequences(1, [1, 1, 1, 1, 1]), 5)\n        self.assertEqual(count_non_negative_sequences(1, [0, 1, 1, 1, 1]), 1)\n        self.assertEqual(count_non_negative_sequences(1, [1, 0, 1, 1, 1]), 1)\n        self.assertEqual(count_non_negative_sequences(1, [1, 1, 0, 1, 1]), 1)\n        self.assertEqual(count_non_negative_sequences(1, [1, 1, 1, 0, 1]), 1)\n        self.assertEqual(count_non_negative_sequences(1, [1, 1, 1, 1, 0]), 1)"
    },
    {
      "rank": 92,
      "score": 1.0,
      "candidate": "def count_sequences(values, length):\n    # Write your code here\n    dp = [[0 for _ in range(length)] for _ in range(len(values))]\n    for i in range(len(values)):\n        dp[i][0] = 1\n    for i in range(1, len(values)):\n        for j in range(1, length):\n            if j > i:\n                dp[i][j] = 0\n            else:\n                dp[i][j] = dp[i - 1][j - 1] + dp[i - 1][j]\n    return dp[-1][-1]\n\n\ndef main():\n    values = [1, 2, 3, 4, 5]\n    length = 4\n    print(count_sequences(values, length))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 93,
      "score": 1.0,
      "candidate": "def prefix_sum_count(values, sequence_length):\n    prefix_sums = {}\n    for value in values:\n        if value not in prefix_sums:\n            prefix_sums[value] = 1\n        else:\n            prefix_sums[value] += 1\n\n    result = 0\n    for prefix_sum in prefix_sums:\n        if prefix_sum >= sequence_length:\n            result += prefix_sums[prefix_sum]\n\n    return result\n\n\nif __name__ == \"__main__\":\n    assert prefix_sum_count([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 10) == 1\n    assert prefix_sum_count([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 11) == 0\n    assert prefix_sum_count([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 1) == 10\n    assert prefix_sum_count([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2) == 45\n    assert prefix_sum_count([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3) == 120\n    assert prefix_sum_count([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 4) == 252\n    assert prefix_sum_count([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5) == 462"
    },
    {
      "rank": 94,
      "score": 1.0,
      "candidate": "from collections import defaultdict\n\n\ndef count_sequences(values, length):\n    if not values:\n        return 0\n\n    prefix_sums = defaultdict(int)\n    prefix_sums[0] = 1\n    for value in values:\n        for sum in prefix_sums:\n            prefix_sums[sum + value] += prefix_sums[sum]\n    return prefix_sums[sum]\n\n\nif __name__ == \"__main__\":\n    assert count_sequences([1, 2, 3, 4], 1) == 2\n    assert count_sequences([1, 2, 3, 4], 2) == 2\n    assert count_sequences([1, 2, 3, 4], 3) == 1\n    assert count_sequences([1, 2, 3, 4], 4) == 1\n    assert count_sequences([1, 2, 3, 4], 5) == 0\n    assert count_sequences([1, 2, 3, 4], 6) == 0\n    assert count_sequences([1, 2, 3, 4], 7) == 0\n    assert count_sequences([1, 2, 3, 4], 8) == 0\n    assert count_sequences([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16], 8) == 6"
    },
    {
      "rank": 95,
      "score": 1.0,
      "candidate": "from typing import List\n\n\ndef count_sequences(values: List[int], length: int) -> int:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(n)\n    \"\"\"\n    dp = [0 for _ in range(length)]\n\n    for value in values:\n        if value > 0:\n            dp[0] += 1\n        for i in range(1, length):\n            if value > i:\n                dp[i] += dp[i - 1]\n\n    return dp[-1]\n\n\nif __name__ == \"__main__\":\n    assert count_sequences([3, 2, 1, 4], 2) == 2"
    },
    {
      "rank": 96,
      "score": 1.0,
      "candidate": "from typing import List\n\n\ndef count_sequences(values: List[int], length: int) -> int:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(n)\n    \"\"\"\n    if not values or length < 1 or length > len(values):\n        return 0\n\n    prefix_sums = [0] * (len(values) + 1)\n    for i, value in enumerate(values, start=1):\n        prefix_sums[i] = prefix_sums[i - 1] + value\n\n    sequences_count = 0\n    for i, prefix_sum in enumerate(prefix_sums, start=1):\n        if i >= length and prefix_sum in prefix_sums[:i - length + 1]:\n            sequences_count += 1\n\n    return sequences_count\n\n\nif __name__ == \"__main__\":\n    assert count_sequences([1, 1, 1, 1, 1], 1) == 1\n    assert count_sequences([1, 2, 3, 4, 5], 2) == 2\n    assert count_sequences([1, 2, 3, 4, 5], 3) == 2\n    assert count_sequences([1, 2, 3, 4, 5], 4) == 1\n    assert count_sequences([1, 2, 3, 4, 5], 5) == 1\n    assert count_sequences([1, 2, 3, 4, 5], 6) == 0"
    },
    {
      "rank": 97,
      "score": 1.0,
      "candidate": "def count_sequences(values, length):\n    # Write your code here\n    prefix = [0]\n    for num in values:\n        prefix.append(prefix[-1] + num)\n\n    count = 0\n    for i in range(len(prefix) - length):\n        if prefix[i + length] - prefix[i] >= 0:\n            count += 1\n    return count\n\n\nprint(count_sequences([1, 2, 3, 4, 5], 3))"
    },
    {
      "rank": 98,
      "score": 1.0,
      "candidate": "def prefix_sums_count(arr, length):\n    prefix_sums = {0: 1}\n    result = 0\n\n    for el in arr:\n        for prefix_sum in prefix_sums:\n            prefix_sums[prefix_sum + el] = prefix_sums.get(prefix_sum + el, 0) + prefix_sums.get(prefix_sum, 0)\n\n        result += prefix_sums.get(el, 0)\n\n    return result\n\n\nprint(prefix_sums_count([1, 2, 3, 4, 5], 2))"
    },
    {
      "rank": 99,
      "score": 1.0,
      "candidate": "from collections import defaultdict\n\n\ndef count_sequences(arr, length):\n    memo = defaultdict(int)\n\n    def _count_sequences(arr, length):\n        if length == 0:\n            return 1\n        elif length == 1:\n            return 1\n\n        if length not in memo:\n            memo[length] = 0\n            for i in range(len(arr)):\n                if arr[i] > 0:\n                    memo[length] += _count_sequences(arr[i:], length - 1)\n        return memo[length]\n\n    return _count_sequences(arr, length)\n\n\nprint(count_sequences([1, 2, 3, 4, 5], 3))"
    },
    {
      "rank": 100,
      "score": 1.0,
      "candidate": "from collections import Counter\n\n\ndef prefix_sum_sequences(values, length):\n\n    prefix_sums = Counter()\n    prefix_sums[0] = 1\n\n    for val in values:\n        for i in range(val, length + 1):\n            prefix_sums[i] += prefix_sums[i - val]\n\n    return prefix_sums[length]\n\n\nif __name__ == '__main__':\n    assert prefix_sum_sequences([3, 1, 4, 1, 5], 3) == 4\n    assert prefix_sum_sequences([3, 1, 4, 1, 5], 2) == 3"
    }
  ]
}