{
  "timestamp": "2025-09-15T01:49:47.081879",
  "method": "improved_llm_judge",
  "judge_model": "codellama/CodeLlama-7b-Python-hf",
  "target_model": "codellama-7b",
  "dataset": "mbpp",
  "problem_number": 465,
  "total_candidates": 100,
  "results": [
    {
      "rank": 1,
      "score": 10.0,
      "candidate": "def sum_largest_smallest(nums):\n    return sorted(nums)[-1] + sorted(nums)[0]\n\n\nprint(sum_largest_smallest([1, 3, 5, 7, 9]))"
    },
    {
      "rank": 2,
      "score": 10.0,
      "candidate": "def sum_of_largest_smallest(arr):\n    return sum(sorted(arr)[-1:1:-1])\n\n\ndef main():\n    print(sum_of_largest_smallest([1, 2, 3, 4, 5]))\n    print(sum_of_largest_smallest([3, 2, 1, 4, 5]))\n    print(sum_of_largest_smallest([10, 2, 3, 4, 5]))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 3,
      "score": 10.0,
      "candidate": "def largest_smallest(arr):\n    return sum(sorted(arr)[-1:2])"
    },
    {
      "rank": 4,
      "score": 10.0,
      "candidate": "def sum_largest_smallest(array):\n    \"\"\"\n    >>> sum_largest_smallest([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n    18\n    >>> sum_largest_smallest([10, 9, 8, 7, 6, 5, 4, 3, 2, 1])\n    18\n    >>> sum_largest_smallest([5, 4, 3, 2, 1, 6, 7, 8, 9, 10])\n    18\n    \"\"\"\n    return max(array) + min(array)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 5,
      "score": 10.0,
      "candidate": "def max_and_min(lst):\n    return sum(max(lst), min(lst))\n\n\nprint(max_and_min([10, 4, 9, 3, 12, 15]))"
    },
    {
      "rank": 6,
      "score": 10.0,
      "candidate": "from typing import List\n\n\ndef sum_largest_smallest(arr: List[int]) -> int:\n    \"\"\"Returns the sum of the largest and smallest value in the given array.\n\n    Args:\n        arr (List[int]): given array\n\n    Examples:\n        >>> assert sum_largest_smallest([1, 3, 5, 7, 9]) == 25\n    \"\"\"\n    return max(arr) + min(arr)\n\n\nif __name__ == \"__main__\":\n    print(sum_largest_smallest([1, 3, 5, 7, 9]))"
    },
    {
      "rank": 7,
      "score": 10.0,
      "candidate": "def largest_smallest_sum(arr):\n    return sum(sorted(arr)[-1:1:-1])\n\n\ndef main():\n    arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    print(\"Sum of the largest and smallest value in the array is:\")\n    print(largest_smallest_sum(arr))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 8,
      "score": 10.0,
      "candidate": "def sum_of_largest_and_smallest(arr):\n    max_number = 0\n    min_number = 0\n    for i in arr:\n        if i > max_number:\n            max_number = i\n        if i < min_number or min_number == 0:\n            min_number = i\n\n    return max_number + min_number\n\n\ndef main():\n    print(sum_of_largest_and_smallest([10, 45, 8, 2, 3]))\n    print(sum_of_largest_and_smallest([-10, -45, -8, -2, -3]))\n    print(sum_of_largest_and_smallest([1, 2, 3, 4, 5]))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 9,
      "score": 10.0,
      "candidate": "def sum_largest_and_smallest(arr):\n    return sorted(arr)[-1] + sorted(arr)[0]\n\n\nprint(sum_largest_and_smallest([10, 20, 40, 50, 60, 70]))"
    },
    {
      "rank": 10,
      "score": 10.0,
      "candidate": "from functools import reduce\n\n\ndef sum_of_largest_and_smallest(arr):\n    \"\"\"\n    Finds the sum of the largest and smallest value in a given array.\n    Args:\n       arr: array of integers\n    Returns:\n       integer: sum of the largest and smallest value in the array\n    \"\"\"\n    return reduce(lambda x, y: x + y, [max(arr) - min(arr)])\n\n\ndef test_sum_of_largest_and_smallest():\n    assert sum_of_largest_and_smallest([1, 2, 3, 4, 5]) == 14\n    assert sum_of_largest_and_smallest([1, 2, 3, 4, 5, 6, 7, 8]) == 16\n\n\nif __name__ == '__main__':\n    test_sum_of_largest_and_smallest()"
    },
    {
      "rank": 11,
      "score": 10.0,
      "candidate": "def sum_largest_smallest(lst):\n    max = lst[0]\n    min = lst[0]\n    for i in range(len(lst)):\n        if max < lst[i]:\n            max = lst[i]\n        elif min > lst[i]:\n            min = lst[i]\n    return max+min\n\n\ndef sum_largest_smallest_2(lst):\n    return max(lst)+min(lst)\n\n\ndef sum_largest_smallest_3(lst):\n    return sum([max(lst), min(lst)])\n\n\nprint(sum_largest_smallest([1, 2, 3, 4, 5]))\nprint(sum_largest_smallest_2([1, 2, 3, 4, 5]))\nprint(sum_largest_smallest_3([1, 2, 3, 4, 5]))"
    },
    {
      "rank": 12,
      "score": 10.0,
      "candidate": "def largest_smallest(arr):\n    largest = arr[0]\n    smallest = arr[0]\n    for i in range(len(arr)):\n        if arr[i] > largest:\n            largest = arr[i]\n        elif arr[i] < smallest:\n            smallest = arr[i]\n    return largest + smallest\n\n\narr = [1, 2, 3, 4, 5, 6, 7, 8, 9]\nprint(largest_smallest(arr))"
    },
    {
      "rank": 13,
      "score": 10.0,
      "candidate": "def sum_of_largest_and_smallest(array):\n    if len(array) == 0:\n        return None\n\n    sorted_array = sorted(array)\n    return sorted_array[0] + sorted_array[-1]\n\n\ndef main():\n    print(sum_of_largest_and_smallest([1, 2, 3, 4, 5, 6, 7, 8]))\n    print(sum_of_largest_and_smallest([-1, -2, -3, -4, -5, -6, -7, -8]))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 14,
      "score": 10.0,
      "candidate": "def sum_largest_smallest(arr):\n    return max(arr) + min(arr)"
    },
    {
      "rank": 15,
      "score": 10.0,
      "candidate": "def max_min_sum(l):\n    if len(l) == 0:\n        return 0\n    l.sort()\n    return l[-1] + l[0]\n\n\ndef main():\n    print(max_min_sum([2, 7, 9, 3, 1]))\n    print(max_min_sum([]))\n    print(max_min_sum([1, 2, 3, 4, 5]))\n    print(max_min_sum([3, 1, 2]))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 16,
      "score": 10.0,
      "candidate": "def sum_of_large_and_small(data):\n    return data[data.index(max(data))] + data[data.index(min(data))]"
    },
    {
      "rank": 17,
      "score": 10.0,
      "candidate": "def max_sum_min(input_arr):\n    return max(input_arr) + min(input_arr)"
    },
    {
      "rank": 18,
      "score": 10.0,
      "candidate": "def sum_of_largest_and_smallest(nums: list) -> int:\n    \"\"\"\n    >>> sum_of_largest_and_smallest([5, 2, 4, 3, 1, 7])\n    16\n    >>> sum_of_largest_and_smallest([4, 2, 7, 3, 1, 5])\n    18\n    >>> sum_of_largest_and_smallest([4, 2, 7, 3, 1, 5])\n    18\n    >>> sum_of_largest_and_smallest([4, 2, 7, 3, 1, 5])\n    18\n    \"\"\"\n    # return sum(sorted(nums)[-1] + sorted(nums)[0])\n    return sum(sorted(nums)[-1], sorted(nums)[0])\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 19,
      "score": 10.0,
      "candidate": "def largest_smallest(arr):\n    sorted_arr = sorted(arr)\n    return sorted_arr[-1]+sorted_arr[0]"
    },
    {
      "rank": 20,
      "score": 10.0,
      "candidate": "def sum_of_largest_and_smallest(arr):\n    arr.sort()\n    return arr[-1] + arr[0]\n\n\"\"\"\nWrite a python function to find the sum of the largest and smallest value in a given array.\n\"\"\"\n\ndef sum_of_largest_and_smallest(arr):\n    return arr[0] + arr[-1]"
    },
    {
      "rank": 21,
      "score": 10.0,
      "candidate": "from typing import List\n\n\ndef sum_largest_smallest(arr: List[int]) -> int:\n    \"\"\"\n    Sum of the largest and smallest value in a given array\n    :param arr:\n    :return:\n    >>> sum_largest_smallest([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n    18\n    >>> sum_largest_smallest([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])\n    21\n    >>> sum_largest_smallest([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12])\n    24\n    >>> sum_largest_smallest([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13])\n    27\n    >>> sum_largest_smallest([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14])\n    28\n    >>> sum_largest_smallest([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15])\n    33\n    >>> sum_largest_smallest([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16])\n    34\n    >>> sum_largest_smallest([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,"
    },
    {
      "rank": 22,
      "score": 10.0,
      "candidate": "def find_sum(arr):\n    arr.sort()\n    return arr[-1] + arr[0]\n\n\na = [1, 2, 3, 4, 5, 6, 7, 8, 9]\nprint(find_sum(a))"
    },
    {
      "rank": 23,
      "score": 10.0,
      "candidate": "def sum_largest_smallest(arr):\n    if len(arr) == 0:\n        return None\n\n    if len(arr) == 1:\n        return arr[0]\n\n    return arr[-1] + arr[0]\n\n\ndef sum_largest_smallest_eff(arr):\n    return arr[-1] + arr[0]"
    },
    {
      "rank": 24,
      "score": 10.0,
      "candidate": "def sum_of_largest_and_smallest(arr):\n    arr.sort()\n    return arr[len(arr) - 1] + arr[0]\n\n\narr = [10, 3, 5, 6, 20, 11]\nprint(sum_of_largest_and_smallest(arr))"
    },
    {
      "rank": 25,
      "score": 10.0,
      "candidate": "def largest_smallest(arr):\n    smallest = arr[0]\n    largest = arr[0]\n    for i in arr:\n        if i < smallest:\n            smallest = i\n        elif i > largest:\n            largest = i\n    return smallest + largest\n\n\nprint(largest_smallest([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))"
    },
    {
      "rank": 26,
      "score": 10.0,
      "candidate": "def largest_smallest_sum(arr):\n    arr.sort()\n    return arr[-1] + arr[0]\n\n\nprint(largest_smallest_sum([1, 2, 3, 4, 5]))"
    },
    {
      "rank": 27,
      "score": 10.0,
      "candidate": "from functools import reduce\n\n\ndef sum_largest_smallest(arr):\n    return reduce(lambda x, y: x + y, sorted(arr)[::-1])\n\n\ndef sum_largest_smallest_pythonic(arr):\n    return sorted(arr)[::-1][0] + sorted(arr)[-1]\n\n\ndef main():\n    print(\"Smallest and largest sum:\")\n    print(sum_largest_smallest([10, 1, 2, 3, 4, 5, 6, 7, 8, 9]))\n\n    print(\"Smallest and largest sum:\")\n    print(sum_largest_smallest([3, 5, 7, 4, 10, 2, 9, 8, 1, 6]))\n\n    print(\"Smallest and largest sum:\")\n    print(sum_largest_smallest([10, 1, 2, 3, 4, 5, 6, 7, 8, 9]))\n\n    print(\"Smallest and largest sum:\")\n    print(sum_largest_smallest([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\n\n    print(\"Smallest and largest sum:\")\n    print(sum_largest_smallest([-10, -1, -2, -3, -4, -5, -6, -7, -8, -9]))\n\n    print(\"Smallest and largest sum:\")\n    print(sum_largest_smallest([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10]))\n\n    print(\"Smallest and largest sum:\")\n    print(sum_largest_smallest([-10, -1, -2, -3, -4, -5, -6, -7, -8, -9]))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 28,
      "score": 10.0,
      "candidate": "def sum_largest_smallest(arr):\n    max_value = arr[0]\n    min_value = arr[0]\n    for i in range(1, len(arr)):\n        if arr[i] > max_value:\n            max_value = arr[i]\n        if arr[i] < min_value:\n            min_value = arr[i]\n\n    return max_value + min_value\n\n\ndef main():\n    arr = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    print(sum_largest_smallest(arr))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 29,
      "score": 10.0,
      "candidate": "def sum_largest_smallest(input_list):\n    if len(input_list) == 0:\n        return 0\n\n    largest = smallest = input_list[0]\n\n    for i in input_list[1:]:\n        if i > largest:\n            largest = i\n        if i < smallest:\n            smallest = i\n\n    return largest + smallest\n\n\nprint(sum_largest_smallest([4, 1, 6, 8, 9, 12, 15]))"
    },
    {
      "rank": 30,
      "score": 9.0,
      "candidate": "def sum_of_largest_and_smallest(lst):\n    return max(lst) + min(lst)\n\n\nprint(sum_of_largest_and_smallest([5, 2, 4, 7, 6, 8]))"
    },
    {
      "rank": 31,
      "score": 8.0,
      "candidate": "def sum_largest_smallest(lst):\n    return max(lst) + min(lst)\n\n\nprint(sum_largest_smallest([1, 2, 3, 4, 5]))"
    },
    {
      "rank": 32,
      "score": 8.0,
      "candidate": "def sum_of_largest_and_smallest(array):\n    if len(array) < 2:\n        return 0\n    else:\n        array.sort()\n        return array[-1] + array[0]"
    },
    {
      "rank": 33,
      "score": 8.0,
      "candidate": "def sum_of_largest_smallest_value(data):\n    return sum(sorted(data)[-1], sorted(data)[0])\n\n\nprint(sum_of_largest_smallest_value([4, 3, 2, 5, 1]))\nprint(sum_of_largest_smallest_value([2, 3, 1, 3, 2]))"
    },
    {
      "rank": 34,
      "score": 8.0,
      "candidate": "def sum_largest_smallest(arr):\n    if not arr:\n        return 0\n    arr.sort()\n    return arr[-1] + arr[0]"
    },
    {
      "rank": 35,
      "score": 8.0,
      "candidate": "def largest_smallest_sum(numbers):\n    numbers.sort()\n    return numbers[-1] + numbers[0]\n\n\nprint(largest_smallest_sum([1, 2, 3, 4, 5]))"
    },
    {
      "rank": 36,
      "score": 8.0,
      "candidate": "def max_min(nums: list) -> int:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(1)\n    \"\"\"\n    if len(nums) == 0:\n        return None\n\n    max_num = nums[0]\n    min_num = nums[0]\n\n    for num in nums:\n        if num > max_num:\n            max_num = num\n        if num < min_num:\n            min_num = num\n\n    return max_num + min_num\n\n\nif __name__ == \"__main__\":\n    print(max_min([1, 2, 3, 4, 5]))"
    },
    {
      "rank": 37,
      "score": 8.0,
      "candidate": "def sum_largest_smallest(arr):\n    \"\"\"\n    Time Complexity: O(n)\n    \"\"\"\n    max_value = -1e9\n    min_value = 1e9\n    for i in range(len(arr)):\n        if arr[i] > max_value:\n            max_value = arr[i]\n        if arr[i] < min_value:\n            min_value = arr[i]\n    return max_value + min_value"
    },
    {
      "rank": 38,
      "score": 8.0,
      "candidate": "def sum_of_largest_and_smallest(input_list):\n    return sorted(input_list)[-1] + sorted(input_list)[0]\n\n\nprint(sum_of_largest_and_smallest([1, 3, 5, 7, 9]))"
    },
    {
      "rank": 39,
      "score": 8.0,
      "candidate": "def sum_of_largest_and_smallest(numbers):\n    numbers.sort()\n    return numbers[-1] + numbers[0]"
    },
    {
      "rank": 40,
      "score": 8.0,
      "candidate": "def largest_smallest_sum(lst):\n    return sum(sorted(lst)[-1:1:-1])"
    },
    {
      "rank": 41,
      "score": 8.0,
      "candidate": "def sum_largest_and_smallest(numbers):\n    return sum(sorted(numbers)[::-1][:2])\n\n\"\"\"\nPerformance\nSpace complexity: O(1)\nTime complexity: O(n)\n\"\"\""
    },
    {
      "rank": 42,
      "score": 8.0,
      "candidate": "from typing import List, Tuple\n\n\ndef sum_largest_and_smallest(input: List[int]) -> Tuple[int, int]:\n    \"\"\"\n    O(n) & O(1)\n    \"\"\"\n    if not input:\n        return (0, 0)\n\n    smallest, largest = input[0], input[0]\n\n    for i in range(1, len(input)):\n        if input[i] < smallest:\n            smallest = input[i]\n        elif input[i] > largest:\n            largest = input[i]\n\n    return (smallest + largest, smallest, largest)\n\n\nif __name__ == \"__main__\":\n    print(sum_largest_and_smallest([10, 20, 4, 45, 2, 100]))"
    },
    {
      "rank": 43,
      "score": 8.0,
      "candidate": "def sum_largest_and_smallest(lst):\n    return max(lst) + min(lst)\n\n\nprint(sum_largest_and_smallest([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))"
    },
    {
      "rank": 44,
      "score": 8.0,
      "candidate": "def sum_largest_smallest(arr):\n    return sum(sorted(arr)[-1], sorted(arr)[0])\n\nprint(sum_largest_smallest([10, 5, 15, 20, 10, 15]))"
    },
    {
      "rank": 45,
      "score": 8.0,
      "candidate": "def max_min(arr):\n    min_val = arr[0]\n    max_val = arr[0]\n    for i in range(1, len(arr)):\n        if arr[i] < min_val:\n            min_val = arr[i]\n        elif arr[i] > max_val:\n            max_val = arr[i]\n    return max_val + min_val\n\nprint(max_min([10, 2, 3, 4, 5, 6, 7]))\nprint(max_min([1, 2, 3, 4, 5, 6, 7]))\nprint(max_min([10, 2, 3, 4, 5, 6, 7, 8, 9]))\n\n\n\"\"\"\nTime complexity: O(n)\nSpace complexity: O(1)\n\"\"\""
    },
    {
      "rank": 46,
      "score": 8.0,
      "candidate": "def sumOfLargestAndSmallest(array):\n    if len(array) == 0:\n        return None\n\n    array.sort()\n    return array[len(array) - 1] + array[0]"
    },
    {
      "rank": 47,
      "score": 8.0,
      "candidate": "def largest_smallest_sum(arr):\n    if arr is None or len(arr) == 0:\n        return None\n    if len(arr) == 1:\n        return arr[0]\n    arr.sort()\n    return arr[-1] + arr[0]\n\nprint(largest_smallest_sum([1,2,3,4,5,6,7,8,9,10]))"
    },
    {
      "rank": 48,
      "score": 8.0,
      "candidate": "def sum_large_small(arr):\n    arr.sort()\n    return arr[-1]+arr[0]"
    },
    {
      "rank": 49,
      "score": 8.0,
      "candidate": "def smallest_largest_sum(array):\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(1)\n    \"\"\"\n    array.sort()\n    return array[-1] + array[0]\n\n\nprint(smallest_largest_sum([1, 2, 3, 4, 5]))\nprint(smallest_largest_sum([5, 4, 3, 2, 1]))\nprint(smallest_largest_sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))"
    },
    {
      "rank": 50,
      "score": 8.0,
      "candidate": "def sumOfLargestAndSmallest(arr):\n    arr.sort()\n    return arr[-1] + arr[0]\n\n\"\"\"\nExample:\n\narr = [5, 2, 7, 1, 3, 6, 8, 9]\n\n\"\"\""
    },
    {
      "rank": 51,
      "score": 8.0,
      "candidate": "def sum_of_largest_and_smallest(lst):\n    return max(lst) + min(lst)"
    },
    {
      "rank": 52,
      "score": 8.0,
      "candidate": "def sum_largest_and_smallest(arr):\n    return sorted(arr)[-1] + sorted(arr)[0]\n\n\narr = [10, 4, 9, 3, 5]\nprint(sum_largest_and_smallest(arr))"
    },
    {
      "rank": 53,
      "score": 8.0,
      "candidate": "def largest_smallest_sum(nums):\n    largest = nums[0]\n    smallest = nums[0]\n    for i in range(1, len(nums)):\n        if nums[i] > largest:\n            largest = nums[i]\n        elif nums[i] < smallest:\n            smallest = nums[i]\n\n    return largest + smallest\n\n\nprint(largest_smallest_sum([4, 2, 3, 5, 9, 7]))\nprint(largest_smallest_sum([4, 2, 3, 5, 9, 1, 7]))\nprint(largest_smallest_sum([4, 2, 3, 5, 9, 6, 7]))"
    },
    {
      "rank": 54,
      "score": 8.0,
      "candidate": "def sum_largest_and_smallest(array):\n    # we can do this by sorting the array and then taking the last element as the largest and the first element as the smallest.\n    # or we can do this by using python's inbuilt functions\n    smallest = min(array)\n    largest = max(array)\n    return largest + smallest\n\n\narray = [1, 3, 2, 4, 5, 6]\nprint(sum_largest_and_smallest(array))"
    },
    {
      "rank": 55,
      "score": 8.0,
      "candidate": "def largest_smallest(lst):\n    sum = 0\n    lst = sorted(lst)\n    for i in lst:\n        if i == lst[0] or i == lst[-1]:\n            sum += i\n    return sum\n\n\nprint(largest_smallest([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))"
    },
    {
      "rank": 56,
      "score": 8.0,
      "candidate": "def sum_smallest_largest(array):\n    smallest = array[0]\n    largest = array[0]\n\n    for i in range(len(array)):\n        if array[i] > largest:\n            largest = array[i]\n        elif array[i] < smallest:\n            smallest = array[i]\n\n    return largest + smallest"
    },
    {
      "rank": 57,
      "score": 8.0,
      "candidate": "def sum_largest_smallest(nums: list) -> int:\n    \"\"\"\n    :param nums: list of numbers\n    :return: int\n    >>> sum_largest_smallest([1, 2, 3, 4, 5, 6])\n    12\n    >>> sum_largest_smallest([1, 1, 1, 1, 1, 1])\n    6\n    >>> sum_largest_smallest([1, 2, 3, 4, 5, 1])\n    12\n    >>> sum_largest_smallest([1, 2, 3, 4, 5, 2])\n    14\n    \"\"\"\n    return sum(sorted(nums)[-1:]) + sum(sorted(nums)[:1])\n\n\ndef sum_largest_smallest_efficient(nums: list) -> int:\n    \"\"\"\n    :param nums: list of numbers\n    :return: int\n    >>> sum_largest_smallest_efficient([1, 2, 3, 4, 5, 6])\n    12\n    >>> sum_largest_smallest_efficient([1, 1, 1, 1, 1, 1])\n    6\n    >>> sum_largest_smallest_efficient([1, 2, 3, 4, 5, 1])\n    12\n    >>> sum_largest_smallest_efficient([1, 2, 3, 4, 5, 2])\n    14\n    \"\"\"\n    return sum(sorted(nums, reverse=True)[0:2])\n\n\ndef sum_largest_smallest_pythonic(nums: list) -> int:\n    \"\"\"\n    :param nums: list of numbers\n    :return: int\n    >>> sum_largest_smallest_pythonic([1, 2, 3, 4, 5, 6])\n    12\n    >>> sum_largest_smallest_pythonic([1, 1, 1, 1, 1, 1])\n    6\n    >>> sum_largest_smallest_"
    },
    {
      "rank": 58,
      "score": 8.0,
      "candidate": "def sum_largest_smallest(array):\n    return sum([min(array), max(array)])"
    },
    {
      "rank": 59,
      "score": 8.0,
      "candidate": "def sum_largest_smallest(lst):\n    largest = None\n    smallest = None\n    for i in range(len(lst)):\n        if largest is None or lst[i] > largest:\n            largest = lst[i]\n        if smallest is None or lst[i] < smallest:\n            smallest = lst[i]\n    return largest + smallest\n\n\nprint(sum_largest_smallest([1, 2, 3, 4, 5]))\nprint(sum_largest_smallest([-5, -4, -3, -2, -1]))"
    },
    {
      "rank": 60,
      "score": 8.0,
      "candidate": "def sum_of_largest_and_smallest(lst):\n    return lst[lst.index(min(lst)) + 1] + lst[lst.index(max(lst)) + 1]"
    },
    {
      "rank": 61,
      "score": 8.0,
      "candidate": "def largest_smallest(arr):\n    return sum(sorted(arr)[-1:0:-1])"
    },
    {
      "rank": 62,
      "score": 8.0,
      "candidate": "def max_min_sum(arr):\n    return sum(sorted(arr)[-1:1:-1])\n\n\nprint(max_min_sum([1, 4, 8, 10, 3, 6, 5, 7, 12, 9, 11]))"
    },
    {
      "rank": 63,
      "score": 8.0,
      "candidate": "def smallest_largest_sum(arr):\n    arr.sort()\n    return arr[-1] + arr[0]\n\n\nprint(smallest_largest_sum([1, 4, 5, 6, 8, 2, 11, 12, 14, 18]))"
    },
    {
      "rank": 64,
      "score": 8.0,
      "candidate": "def max_min_sum(arr):\n    return max(arr) + min(arr)"
    },
    {
      "rank": 65,
      "score": 8.0,
      "candidate": "def largest_smallest_sum(arr):\n    arr.sort()\n    return arr[-1] + arr[0]\n\narr = [1, 4, 3, 2, 6]\nprint(largest_smallest_sum(arr))"
    },
    {
      "rank": 66,
      "score": 8.0,
      "candidate": "def sum_largest_and_smallest(nums: list):\n    smallest, largest = float('inf'), float('-inf')\n    for num in nums:\n        if num < smallest:\n            smallest = num\n        if num > largest:\n            largest = num\n    return largest + smallest\n\n\nprint(sum_largest_and_smallest([1, 2, 3, 4, 5]))\nprint(sum_largest_and_smallest([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))"
    },
    {
      "rank": 67,
      "score": 8.0,
      "candidate": "def sum_largest_smallest(nums):\n    return sum(sorted(nums)[::-1][:2])\n\n\nprint(sum_largest_smallest([1, 3, 5, 7, 9]))"
    },
    {
      "rank": 68,
      "score": 8.0,
      "candidate": "def find_sum(a):\n    sum = 0\n    if len(a) == 0:\n        return 0\n\n    if len(a) == 1:\n        return a[0]\n\n    max = a[0]\n    min = a[0]\n\n    for i in range(1, len(a)):\n        if max < a[i]:\n            max = a[i]\n        if min > a[i]:\n            min = a[i]\n\n    sum = max + min\n    return sum\n\n\narr = [1, 2, 3, 4, 5]\nprint(find_sum(arr))"
    },
    {
      "rank": 69,
      "score": 8.0,
      "candidate": "def find_sum(arr):\n    return sum([max(arr), min(arr)])"
    },
    {
      "rank": 70,
      "score": 8.0,
      "candidate": "def sum_of_smallest_largest(nums):\n    nums.sort()\n    return nums[-1] + nums[0]\n\n\nprint(sum_of_smallest_largest([1, 2, 3, 4, 5]))"
    },
    {
      "rank": 71,
      "score": 8.0,
      "candidate": "def sum_largest_smallest(numbers):\n    return sum(sorted(numbers)[-1:2])"
    },
    {
      "rank": 72,
      "score": 8.0,
      "candidate": "def large_small_sum(lst):\n    lst.sort()\n    return lst[len(lst) - 1] + lst[0]\n\n\nlst = [2, 6, 3, 1, 10, 5]\nprint(large_small_sum(lst))"
    },
    {
      "rank": 73,
      "score": 8.0,
      "candidate": "def max_min_sum(nums):\n    return sum([max(nums), min(nums)])\n\n\nprint(max_min_sum([2, 4, 6, 8, 10]))"
    },
    {
      "rank": 74,
      "score": 8.0,
      "candidate": "def sum_large_small(arr):\n    return arr[arr.index(max(arr)) + 1] + arr[arr.index(min(arr))]\n\nif __name__ == \"__main__\":\n    arr = [1, 2, 3, 4, 5, 6, 7, 8]\n    print(sum_large_small(arr))"
    },
    {
      "rank": 75,
      "score": 8.0,
      "candidate": "def sum_small_big(arr):\n    arr.sort()\n    return arr[-1] + arr[0]"
    },
    {
      "rank": 76,
      "score": 8.0,
      "candidate": "def sum_largest_and_smallest(arr):\n    return max(arr) + min(arr)"
    },
    {
      "rank": 77,
      "score": 8.0,
      "candidate": "def largest_smallest(array):\n    return sum(sorted(array)[-1], sorted(array)[0])\n\n\nprint(largest_smallest([1, 2, 3, 4, 5, 6]))"
    },
    {
      "rank": 78,
      "score": 8.0,
      "candidate": "def sum_small_large(arr):\n    # Find smallest and largest\n    # sum them\n    smallest = min(arr)\n    largest = max(arr)\n    return smallest + largest\n\nprint(sum_small_large([1, 2, 3, 4, 5]))"
    },
    {
      "rank": 79,
      "score": 8.0,
      "candidate": "def largest_smallest(arr):\n    arr.sort()\n    return arr[-1] + arr[0]\n\n\nprint(largest_smallest([1, 3, 2, 5, 6, 2, 4]))"
    },
    {
      "rank": 80,
      "score": 8.0,
      "candidate": "def sum_largest_smallest(arr):\n    if len(arr) == 0:\n        return None\n    elif len(arr) == 1:\n        return arr[0]\n    else:\n        largest = arr[0]\n        smallest = arr[0]\n        for i in range(1, len(arr)):\n            if arr[i] > largest:\n                largest = arr[i]\n            elif arr[i] < smallest:\n                smallest = arr[i]\n    return largest + smallest\n\n\nprint(sum_largest_smallest([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))"
    },
    {
      "rank": 81,
      "score": 8.0,
      "candidate": "def largest_smallest_sum(list1):\n    list1.sort()\n    return list1[-1]+list1[0]\n\nprint(largest_smallest_sum([10, 40, 30, 50, 20]))\n\n# using python inbuilt functions\ndef largest_smallest_sum(list1):\n    return max(list1)+min(list1)\n\nprint(largest_smallest_sum([10, 40, 30, 50, 20]))"
    },
    {
      "rank": 82,
      "score": 8.0,
      "candidate": "def sum_largest_smallest(arr):\n    if len(arr) == 0:\n        return 0\n\n    largest = arr[0]\n    smallest = arr[0]\n\n    for i in range(1, len(arr)):\n        if arr[i] > largest:\n            largest = arr[i]\n        elif arr[i] < smallest:\n            smallest = arr[i]\n\n    return largest + smallest\n\nprint(sum_largest_smallest([3, 5, 6, 7, 1, 5, 9, 9, 10]))"
    },
    {
      "rank": 83,
      "score": 8.0,
      "candidate": "def find_largest_smallest(arr):\n    if len(arr) < 1:\n        return 0\n\n    arr.sort()\n    return arr[-1] + arr[0]\n\n\nprint(find_largest_smallest([1, 2, 3, 4, 5, 6, 7, 8, 9]))"
    },
    {
      "rank": 84,
      "score": 8.0,
      "candidate": "def sum_of_largest_and_smallest(a):\n    a.sort()\n    return a[-1] + a[0]"
    },
    {
      "rank": 85,
      "score": 8.0,
      "candidate": "def sum_small_large(arr):\n    # sort the array\n    arr.sort()\n    # return the sum of the last two elements\n    return arr[-1] + arr[0]\n\n\ndef main():\n    print(sum_small_large([1, 2, 3, 4, 5]))\n    print(sum_small_large([5, 3, 2, 1, 4]))\n    print(sum_small_large([10, 3, 2, 1, 4]))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 86,
      "score": 8.0,
      "candidate": "def sum_of_largest_and_smallest(numbers):\n    return numbers[numbers.index(max(numbers)) + 1] + numbers[numbers.index(min(numbers))]\n\n\nprint(sum_of_largest_and_smallest([5, 2, 4, 3, 6, 7, 10, 11, 12, 1]))"
    },
    {
      "rank": 87,
      "score": 8.0,
      "candidate": "def sum_of_smallest_and_largest(arr):\n    \"\"\"\n    This function takes a list as an input, finds the smallest and largest values and returns their sum.\n    \"\"\"\n    if len(arr) == 0:\n        return None\n    elif len(arr) == 1:\n        return arr[0]\n    else:\n        arr.sort()\n        return arr[0] + arr[-1]\n\ndef main():\n    \"\"\"\n    This is the main function to run the program.\n    \"\"\"\n    arr = [1, 2, 3, 4, 5]\n    print(sum_of_smallest_and_largest(arr))\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 88,
      "score": 1.0,
      "candidate": "def max_min_sum(arr):\n    return (arr[0] + arr[-1], arr[0] - arr[-1])\n\n\ndef test_max_min_sum():\n    assert max_min_sum([2, 3, 4, 1, 8]) == (11, 7)\n    assert max_min_sum([2, 3, 1, 8]) == (11, 7)\n    assert max_min_sum([2, 3, 4, 5, 6, 1, 8]) == (19, 1)"
    },
    {
      "rank": 89,
      "score": 1.0,
      "candidate": "def sum_of_largest_and_smallest(nums: list):\n    return max(nums) + min(nums)\n\n\ndef test_sum_of_largest_and_smallest():\n    assert sum_of_largest_and_smallest([1, 2, 3, 4, 5]) == 15\n    assert sum_of_largest_and_smallest([1, 2, 3, 4, 5, 6]) == 15\n    assert sum_of_largest_and_smallest([1]) == 1\n    assert sum_of_largest_and_smallest([0, 1, 2, 3, 4, 5]) == 5\n    assert sum_of_largest_and_smallest([1, 1, 1, 1, 1, 1]) == 6\n    assert sum_of_largest_and_smallest([1, 2, 3, 4, 5, 6, 7]) == 14\n    assert sum_of_largest_and_smallest([-1, -2, -3, -4, -5, -6, -7]) == -1\n    assert sum_of_largest_and_smallest([-1, -2, -3, -4, -5, -6, -7, -8]) == -1\n    assert sum_of_largest_and_smallest([-1, -2, -3, -4, -5, -6, -7, -8, -9]) == -1"
    },
    {
      "rank": 90,
      "score": 1.0,
      "candidate": "def sum_large_small(input_list):\n    if len(input_list) == 0:\n        return None\n    elif len(input_list) == 1:\n        return None\n    elif len(input_list) == 2:\n        return None\n    else:\n        # return sum(min(input_list)) + sum(max(input_list))\n        return (min(input_list) + max(input_list)) * 2\n\n\ndef main():\n    assert sum_large_small([1, 2, 3]) == None\n    assert sum_large_small([1, 2, 3, 4]) == None\n    assert sum_large_small([1, 2, 3, 4, 5]) == None\n    assert sum_large_small([1, 2, 3, 4, 5, 6]) == 11\n    assert sum_large_small([1, 2, 3, 4, 5, 6, 7]) == 14\n    assert sum_large_small([1, 2, 3, 4, 5, 6, 7, 8]) == 16\n    assert sum_large_small([1, 2, 3, 4, 5, 6, 7, 8, 9]) == 18\n    assert sum_large_small([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 20\n    print(\"All test cases passed!\")\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 91,
      "score": 1.0,
      "candidate": "from typing import List, Tuple\n\n\ndef sum_largest_smallest(array: List[int]) -> Tuple[int, int]:\n    \"\"\"\n    Return the sum of the largest and smallest value in a given array.\n    >>> sum_largest_smallest([1, 2, 3, 4, 5])\n    (10, 1)\n    >>> sum_largest_smallest([1, 1, 1, 1, 1])\n    (2, 1)\n    >>> sum_largest_smallest([1, 2, 3, 4, 5, 6, 7])\n    (14, 1)\n    >>> sum_largest_smallest([1, 1, 1, 1, 1, 1])\n    (2, 1)\n    \"\"\"\n    return (array[0], array[-1]) if len(array) == 1 else (\n        array[0] + array[-1],\n        array[0] + array[-1],\n    )\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 92,
      "score": 1.0,
      "candidate": "def sum_of_largest_and_smallest(arr):\n    \"\"\"\n    >>> sum_of_largest_and_smallest([1, 2, 3, 4, 5])\n    10\n    >>> sum_of_largest_and_smallest([-1, -2, -3, -4, -5])\n    -10\n    >>> sum_of_largest_and_smallest([1, 2, -3, 4, 5])\n    2\n    >>> sum_of_largest_and_smallest([-1, 2, -3, 4, -5])\n    2\n    \"\"\"\n    return max(arr) + min(arr)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 93,
      "score": 1.0,
      "candidate": "def largest_smallest(nums):\n    return sum(sorted(nums)[-1:])\n\n\ndef test_function(test_case):\n    test_input, test_expected = test_case\n    test_actual = largest_smallest(test_input)\n    if test_actual == test_expected:\n        print(\"Pass\")\n    else:\n        print(\"Fail\")\n\n\ntest_function(([2, 3, 1, 4], 7))\ntest_function(([2, 3, 1, 4, 1], 6))\ntest_function(([2, 3, 1, 4, 1, 2], 7))"
    },
    {
      "rank": 94,
      "score": 1.0,
      "candidate": "def largest_smallest_sum(lst):\n    return sum(sorted(lst, reverse=True)[0:2])\n\n\ndef test_function(test_case):\n    test_input, test_expected = test_case\n    actual = largest_smallest_sum(test_input)\n    if actual == test_expected:\n        return True\n    else:\n        return False\n\n\ntest_cases = [\n    ([1, 2, 3, 4, 5], 10),\n    ([5, 4, 3, 2, 1], 9),\n    ([1, 1, 1, 1, 1], 2),\n    ([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 26),\n]\n\ntest_case_1 = ([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 26)\ntest_case_2 = ([10, 9, 8, 7, 6, 5, 4, 3, 2, 1], 18)\ntest_case_3 = ([1, 1, 1, 1, 1], 2)\ntest_case_4 = ([5, 4, 3, 2, 1], 9)\n\n\nprint(test_function(test_case_1))\nprint(test_function(test_case_2))\nprint(test_function(test_case_3))\nprint(test_function(test_case_4))"
    },
    {
      "rank": 95,
      "score": 1.0,
      "candidate": "def sum_of_largest_and_smallest(arr):\n    return min(arr) + max(arr)\n\n\ndef test_function(test_case):\n    test_input, test_expected = test_case\n    test_actual = sum_of_largest_and_smallest(test_input)\n    if test_actual == test_expected:\n        print(\"Pass\")\n    else:\n        print(\"Fail\")\n\n\ntest_function(([2, 3, 1, 5, 6], 11))\ntest_function(([2, 3, 1, 5, 6, 7], 14))\ntest_function(([2, 3, 1, 5, 6, 7, 10], 17))\ntest_function(([2, 3, 1, 5, 6, 7, 10, 20], 27))\ntest_function(([2, 3, 1, 5, 6, 7, 10, 20, 30], 37))\ntest_function(([2, 3, 1, 5, 6, 7, 10, 20, 30, 40], 47))"
    },
    {
      "rank": 96,
      "score": 1.0,
      "candidate": "def largest_smallest(arr):\n    arr.sort()\n    return arr[-1] + arr[0]\n\n\n\"\"\"\nWrite a python function to find the sum of the largest and smallest value in a given array.\n\"\"\"\ndef largest_smallest(arr):\n    return sum(sorted(arr)[::-1][:2])\n\n\n\"\"\"\nWrite a python function to find the sum of the largest and smallest value in a given array.\n\"\"\"\ndef largest_smallest(arr):\n    return max(arr) + min(arr)"
    },
    {
      "rank": 97,
      "score": 1.0,
      "candidate": "def sum_of_smallest_and_largest(arr: list) -> int:\n    \"\"\"\n    Return the sum of the smallest and largest value.\n    >>> sum_of_smallest_and_largest([2, 7, 19, 32, 9, 12, 3])\n    41\n    \"\"\"\n    return arr[0] + arr[-1]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 98,
      "score": 1.0,
      "candidate": "def sum_of_largest_and_smallest(a: list) -> int:\n    \"\"\"Returns the sum of the largest and smallest value in a given array.\n\n    Args:\n        a (list): input array\n\n    Returns:\n        int: sum of the largest and smallest value in a given array.\n    \"\"\"\n    return a.index(min(a)) + a.index(max(a))\n\n\ndef test_sum_of_largest_and_smallest():\n    \"\"\"Test for sum_of_largest_and_smallest function.\"\"\"\n    assert sum_of_largest_and_smallest([2, 4, 6, 8]) == 10\n    assert sum_of_largest_and_smallest([1, 2, 3, 4, 5]) == 6\n    assert sum_of_largest_and_smallest([1, 2, 3, 4, 5, 6]) == 12\n\n\nif __name__ == \"__main__\":\n    test_sum_of_largest_and_smallest()"
    },
    {
      "rank": 99,
      "score": 1.0,
      "candidate": "from typing import List\n\n\ndef largest_smallest_sum(arr: List) -> int:\n    \"\"\"\n    Return the sum of the largest and smallest value in a given array\n    Args:\n       arr: list of integers\n    Returns:\n       int: sum of the largest and smallest value in the array\n    \"\"\"\n    return sum(sorted(arr)[-1:0:-1])\n\n\ndef test_solution():\n    assert largest_smallest_sum([1, 2, 3, 4, 5]) == 10\n    assert largest_smallest_sum([5, 4, 3, 2, 1]) == 10\n    assert largest_smallest_sum([1, 1, 1, 1, 1]) == 2\n    assert largest_smallest_sum([-1, -2, -3, -4, -5]) == -10\n    assert largest_smallest_sum([-10, -20, -30, -40, -50]) == -100\n\n\nif __name__ == \"__main__\":\n    test_solution()"
    },
    {
      "rank": 100,
      "score": 1.0,
      "candidate": "def largest_and_smallest(lst):\n    if len(lst) == 0:\n        return None\n    smallest = largest = lst[0]\n    for i in lst:\n        if i > largest:\n            largest = i\n        elif i < smallest:\n            smallest = i\n    return largest + smallest\n\ndef test_function(test_case):\n    lst = test_case[0]\n    solution = test_case[1]\n    output = largest_and_smallest(lst)\n    if output == solution:\n        print(\"Pass\")\n    else:\n        print(\"Fail\")\n\ntest_case1 = [[], None]\ntest_function(test_case1)\n\ntest_case2 = [[1, 4, 5, 6, 7, 8], 16]\ntest_function(test_case2)\n\ntest_case3 = [[1, 2, 3, 4, 5, 6, 7, 8], 15]\ntest_function(test_case3)"
    }
  ]
}