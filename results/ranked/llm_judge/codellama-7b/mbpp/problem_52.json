{
  "timestamp": "2025-09-14T22:41:21.515419",
  "method": "improved_llm_judge",
  "judge_model": "codellama/CodeLlama-7b-Python-hf",
  "target_model": "codellama-7b",
  "dataset": "mbpp",
  "problem_number": 52,
  "total_candidates": 100,
  "results": [
    {
      "rank": 1,
      "score": 10.0,
      "candidate": "from itertools import permutations\n\n\ndef max_diff(nums):\n    \"\"\"\n    :param nums: tuple of numbers\n    :return: max diff between the numbers\n\n    >>> max_diff((1, 2, 3, 4, 5))\n    4\n    >>> max_diff((2, 20, 4, 1, 6, 8, 11, 9, 15))\n    17\n    >>> max_diff((1, 2, 3, 4, 5, 6, 7, 8, 9, 10))\n    9\n    \"\"\"\n    max_diff = 0\n    for i in permutations(nums):\n        diff = max(i) - min(i)\n        if diff > max_diff:\n            max_diff = diff\n    return max_diff\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 2,
      "score": 10.0,
      "candidate": "def max_difference(a):\n    # Write your code here.\n\tresult = 0\n\ta.sort(reverse=True)\n\tfor i in range(len(a)-1):\n\t\tresult = max(a[i]-a[i+1], result)\n\treturn result\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n#!/usr/bin/env python3\n# -*- coding: utf-8 -*-"
    },
    {
      "rank": 3,
      "score": 10.0,
      "candidate": "from typing import List, Tuple\n\n\ndef max_difference(pairs: List[Tuple[int, int]]) -> int:\n    \"\"\"Returns the maximum difference between available pairs in the given tuple list.\n\n    Args:\n        pairs (List[Tuple[int, int]]): the list of tuples\n\n    Examples:\n        >>> assert max_difference([(1, 3), (1, 4), (1, 5), (2, 5), (3, 5)]) == 2\n    \"\"\"\n    pairs.sort(key=lambda x: x[1])\n    maximum = 0\n    for i in range(len(pairs) - 1):\n        if pairs[i][1] == pairs[i + 1][0]:\n            maximum = max(maximum, pairs[i][1] - pairs[i][0])\n    return maximum\n\n\nif __name__ == \"__main__\":\n    print(max_difference([(1, 3), (1, 4), (1, 5), (2, 5), (3, 5)]))"
    },
    {
      "rank": 4,
      "score": 10.0,
      "candidate": "from itertools import permutations\n\n\ndef max_diff(arr):\n    max_diff = 0\n    for i in range(len(arr) - 1):\n        for j in range(i + 1, len(arr)):\n            diff = abs(arr[i] - arr[j])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff\n\n\ndef max_diff_perms(arr):\n    max_diff = 0\n    for perm in permutations(arr):\n        for i in range(len(perm) - 1):\n            diff = abs(perm[i] - perm[i + 1])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff\n\n\nif __name__ == \"__main__\":\n    print(max_diff_perms([1, 3, 5, 10, 12]))\n    print(max_diff_perms([1, 2, 3, 4, 5]))"
    },
    {
      "rank": 5,
      "score": 10.0,
      "candidate": "def max_diff_pairs(lst):\n    return max([abs(lst[i] - lst[j]) for i in range(len(lst)) for j in range(i + 1, len(lst))])\n\n\nif __name__ == \"__main__\":\n    print(max_diff_pairs((1, 5, 2, 10, 6, 8, 9)))"
    },
    {
      "rank": 6,
      "score": 10.0,
      "candidate": "from itertools import combinations\n\n\ndef max_difference(nums):\n    nums = sorted(nums)\n    diff = 0\n    for a, b in combinations(nums, 2):\n        diff = max(diff, b - a)\n    return diff\n\n\nprint(max_difference((1, 6, 0, 10, 19, 3, 2, 12, 5, 13, 8, 9, 14, 18, 20, 7, 11, 15, 4, 17, 16, 10, 12)))"
    },
    {
      "rank": 7,
      "score": 10.0,
      "candidate": "from typing import Tuple, List\n\n\ndef maximum_difference(tuples: List[Tuple[int, int]]) -> int:\n    \"\"\"\n    :param tuples: list of tuples\n    :return: maximum difference between available pairs\n    >>> maximum_difference([(1, 3), (1, 4), (2, 3), (3, 4), (3, 5)])\n    2\n    \"\"\"\n    # Step 1: Sort the input list\n    tuples.sort()\n    # Step 2: Return the maximum difference\n    return max([abs(i[1] - i[0]) for i in tuples])\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 8,
      "score": 10.0,
      "candidate": "from typing import List\n\n\n# O(n*log(n)) time | O(1) space\ndef maxDifference(tuples: List[List[int]]) -> int:\n    tuples.sort(key=lambda x: x[0])\n    max_diff = 0\n    min_val = float(\"inf\")\n    for i in range(len(tuples)):\n        if tuples[i][0] > min_val:\n            max_diff = max(max_diff, tuples[i][1] - min_val)\n        min_val = min(min_val, tuples[i][1])\n    return max_diff\n\n\nprint(maxDifference([[1, 2], [2, 3], [3, 4], [1, 3]]))"
    },
    {
      "rank": 9,
      "score": 10.0,
      "candidate": "from itertools import combinations\n\n\ndef maximum_difference(lst):\n    \"\"\"\n    >>> maximum_difference((1, 5, 10, 100))\n    95\n    >>> maximum_difference((10, 100, 20, 30, 40, 50, 60, 70))\n    50\n    >>> maximum_difference((2, 10, 7, 4, 1, 5, 8))\n    6\n    \"\"\"\n    maximum = 0\n    for x, y in combinations(lst, 2):\n        diff = abs(x - y)\n        maximum = max(diff, maximum)\n    return maximum\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 10,
      "score": 10.0,
      "candidate": "from itertools import combinations\n\n\ndef max_difference(nums):\n    result = 0\n    for num1, num2 in combinations(nums, 2):\n        result = max(result, abs(num1 - num2))\n    return result"
    },
    {
      "rank": 11,
      "score": 10.0,
      "candidate": "from itertools import combinations\n\n\ndef max_difference(arr):\n    \"\"\"\n    >>> max_difference((1, 5, 7, 10, 20))\n    15\n    >>> max_difference((1, 2, 3, 4))\n    2\n    \"\"\"\n    return max(\n        abs(a - b)\n        for a, b in combinations(arr, 2)\n    )\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 12,
      "score": 10.0,
      "candidate": "from itertools import combinations\nfrom typing import Tuple\n\n\ndef max_difference(data: Tuple[int, ...]) -> int:\n    \"\"\"Returns the maximum difference between available pairs in the given tuple list.\n\n    Args:\n        data (Tuple[int, ...]): a tuple of integers\n\n    Examples:\n        >>> max_difference((1, 5, 3, 4, 7, 8, 2, 9))\n        6\n        >>> max_difference((-1, -3, -4, -5, -2, -7))\n        1\n        >>> max_difference((1, 1, 1, 1, 1, 1))\n        0\n        >>> max_difference((1, 1, 1, 2, 2, 2))\n        1\n        >>> max_difference((1, 1, 2, 2, 3, 3))\n        1\n        >>> max_difference((1, 2, 2, 3, 3, 4))\n        1\n        >>> max_difference((1, 2, 2, 3, 3, 4, 4))\n        1\n        >>> max_difference((1, 2, 2, 3, 3, 4, 4, 4))\n        0\n        >>> max_difference((1, 1, 2, 2, 3, 3, 4, 4, 4, 4))\n        1\n        >>> max_difference((1, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5))\n        4\n    \"\"\"\n    if not data:\n        return 0\n\n    maximum = 0\n    for pair in combinations(data, 2):\n        maximum = max(maximum, abs(pair[0] - pair[1]))\n    return maximum\n\n\nif __name__ == \"__main__\":\n    print(max_difference((1, 5, 3, 4, 7, 8, 2, 9)))\n    print(max_difference((-"
    },
    {
      "rank": 13,
      "score": 10.0,
      "candidate": "from itertools import combinations\n\n\ndef max_difference(arr):\n    \"\"\"\n    >>> max_difference(((1, 2), (2, 3), (1, 3), (2, 4), (1, 4)))\n    1\n    >>> max_difference(((1, 2), (2, 3), (1, 3), (2, 4), (1, 5)))\n    2\n    \"\"\"\n    maximum = -float(\"inf\")\n    for a, b in combinations(arr, 2):\n        maximum = max(maximum, abs(a[0] - b[0]), abs(a[1] - b[1]))\n    return maximum\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 14,
      "score": 10.0,
      "candidate": "from typing import Tuple\n\n\ndef max_diff(t: Tuple[int, ...]) -> int:\n    \"\"\"\n    >>> max_diff((1, 4, 9, 10, 16, 28, 32, 39))\n    18\n    \"\"\"\n    diffs = []\n\n    for i in range(len(t) - 1):\n        for j in range(i + 1, len(t)):\n            diffs.append(t[j] - t[i])\n\n    return max(diffs)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 15,
      "score": 10.0,
      "candidate": "from itertools import permutations\n\n\ndef max_difference(arr):\n    max_diff = 0\n    for perm in permutations(arr):\n        diff = max(perm) - min(perm)\n        if diff > max_diff:\n            max_diff = diff\n    return max_diff\n\n\nif __name__ == \"__main__\":\n    print(max_difference([1, 6, 8, 3, 2, 7, 4]))"
    },
    {
      "rank": 16,
      "score": 10.0,
      "candidate": "from typing import Tuple, List\n\n\ndef max_diff(l: List[Tuple[int, int]]) -> int:\n    \"\"\"\n    >>> max_diff([(3, 2), (2, 5), (5, 1), (1, 6)])\n    4\n    \"\"\"\n    l = sorted(l, key=lambda x: x[0])\n    max_diff = 0\n\n    for i in range(1, len(l)):\n        max_diff = max(max_diff, l[i][0] - l[i - 1][1])\n\n    return max_diff\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 17,
      "score": 10.0,
      "candidate": "def find_max_diff(tuples):\n    \"\"\"\n    >>> find_max_diff([(1, 10), (2, 9), (3, 7), (4, 4), (5, 2)])\n    8\n    >>> find_max_diff([(1, 4), (2, 4), (3, 2), (4, 2)])\n    2\n    \"\"\"\n    tuples.sort(key=lambda x: x[1])\n    max_diff = 0\n    for i in range(len(tuples) - 1):\n        diff = tuples[i + 1][1] - tuples[i][1]\n        if diff > max_diff:\n            max_diff = diff\n    return max_diff\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 18,
      "score": 10.0,
      "candidate": "from itertools import combinations\n\n\ndef maximum_difference(l):\n    \"\"\"\n    >>> maximum_difference((1, 5, 2, 3, 4))\n    4\n    >>> maximum_difference((5, 2, 4, 1, 3))\n    4\n    >>> maximum_difference((5, 4, 3, 2, 1))\n    4\n    \"\"\"\n    return max(\n        max(b - a for a, b in combinations(pair, 2))\n        for pair in combinations(sorted(l), 2)\n    )\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 19,
      "score": 10.0,
      "candidate": "from typing import List, Tuple\n\n\ndef max_difference(tuples: List[Tuple[int]]) -> int:\n    \"\"\"\n    >>> max_difference([(1, 2), (1, 2), (1, 2)])\n    0\n    >>> max_difference([(1, 2), (2, 3), (3, 4), (4, 5)])\n    2\n    \"\"\"\n    tuples.sort(key=lambda x: x[0])\n\n    max_difference = 0\n    min_val = tuples[0][1]\n\n    for i in range(1, len(tuples)):\n        max_difference = max(max_difference, tuples[i][0] - min_val)\n        min_val = min(min_val, tuples[i][1])\n\n    return max_difference\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 20,
      "score": 10.0,
      "candidate": "from itertools import combinations\n\n\ndef max_difference(tup):\n    \"\"\"\n    >>> max_difference((1, 5, 3, 4, 2))\n    2\n    >>> max_difference((1, 5, 3, 4, 2, 3, 4, 6, 7, 8))\n    5\n    \"\"\"\n    max_dif = 0\n    for x, y in combinations(tup, 2):\n        max_dif = max(max_dif, abs(x - y))\n    return max_dif\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 21,
      "score": 10.0,
      "candidate": "from itertools import permutations\nfrom typing import List\n\n\ndef max_diff(nums: List[int]) -> int:\n    \"\"\"Find the maximum difference between available pairs in the given tuple list.\n\n    Args:\n        nums (List[int]): list of integers\n\n    Examples:\n        >>> assert max_diff([1, 5, 2, 3, 7, 10]) == 6\n    \"\"\"\n    return max(abs(a - b) for a, b in permutations(nums, 2))\n\n\nif __name__ == \"__main__\":\n    print(max_diff([1, 5, 2, 3, 7, 10]))"
    },
    {
      "rank": 22,
      "score": 10.0,
      "candidate": "from itertools import combinations\n\n\ndef max_difference(arr):\n    \"\"\"\n    Return the maximum difference between the available pairs\n    >>> max_difference((1, 5, 7, 10, 3, 2, 5))\n    8\n    \"\"\"\n    arr = sorted(arr)\n    return max(abs(x - y) for x, y in combinations(arr, 2))\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 23,
      "score": 10.0,
      "candidate": "from typing import Tuple, List, Set\n\n\ndef get_max_difference(nums: List[int]) -> int:\n    \"\"\"\n    >>> get_max_difference([1, 5, 3, 4, 2])\n    4\n    >>> get_max_difference([1, 10, 10, 2, 8, 2, 3, 4, 8, 2, 3])\n    8\n    \"\"\"\n    nums_set: Set[int] = set(nums)\n    max_difference: int = -1\n\n    for num in nums:\n        if num in nums_set:\n            nums_set.remove(num)\n        else:\n            continue\n\n        if num + 1 in nums_set:\n            max_difference = max(max_difference, num + 1 - num)\n        elif num - 1 in nums_set:\n            max_difference = max(max_difference, num - 1 - num)\n\n    return max_difference\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 24,
      "score": 10.0,
      "candidate": "from itertools import permutations\n\n\ndef max_difference(t):\n    \"\"\"\n    >>> max_difference((5, 3, 2, 4, 6))\n    3\n    >>> max_difference((1, 2, 3, 4, 5))\n    4\n    >>> max_difference((1, 2, 3))\n    2\n    >>> max_difference((1, 2))\n    1\n    >>> max_difference((1,))\n    0\n    >>> max_difference(())\n    0\n    \"\"\"\n    if len(t) < 2:\n        return 0\n\n    return max(\n        abs(a - b)\n        for a, b in permutations(t, 2)\n    )\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 25,
      "score": 10.0,
      "candidate": "from typing import List\n\n\ndef max_diff_pairs(arr: List[int]) -> int:\n    \"\"\"\n    >>> max_diff_pairs([2, 10, 3])\n    7\n    \"\"\"\n    return max(arr[i + 1] - arr[i] for i in range(len(arr) - 1))\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 26,
      "score": 9.0,
      "candidate": "from itertools import combinations\n\n\n# Time complexity O(n^2)\ndef maximum_difference(a):\n    max_diff = 0\n    for pair in combinations(a, 2):\n        max_diff = max(max_diff, max(pair) - min(pair))\n    return max_diff\n\n\n# Time complexity O(nlogn)\ndef maximum_difference_sort(a):\n    a.sort()\n    max_diff = 0\n    for i in range(len(a) - 1):\n        max_diff = max(max_diff, a[i + 1] - a[i])\n    return max_diff\n\n\n# Time complexity O(n)\ndef maximum_difference_sort_2(a):\n    max_diff = 0\n    for i in range(1, len(a)):\n        if a[i] - a[i - 1] > max_diff:\n            max_diff = a[i] - a[i - 1]\n    return max_diff\n\n\ndef main():\n    a = [5, 8, 6, 3, 2, 7, 1, 4]\n    a = [1, 2, 3, 4, 5]\n    a = [2, 1, 3, 4, 5]\n    print(maximum_difference(a))\n    print(maximum_difference_sort(a))\n    print(maximum_difference_sort_2(a))\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 27,
      "score": 8.0,
      "candidate": "def max_difference(t):\n    \"\"\"\n    >>> max_difference(((1, 6), (10, 20), (30, 40), (49, 50)))\n    39\n    >>> max_difference(((1, 9), (11, 20), (30, 40), (49, 50)))\n    39\n    >>> max_difference(((1, 9), (11, 20), (30, 40), (49, 50), (60, 69)))\n    39\n    >>> max_difference(((1, 2), (3, 4), (5, 6), (7, 8)))\n    6\n    >>> max_difference(((1, 2), (1, 4), (2, 4), (2, 6), (4, 6), (5, 6), (5, 7), (6, 7)))\n    2\n    >>> max_difference(((1, 2), (1, 4), (2, 4), (2, 6), (4, 6), (5, 6), (5, 7), (6, 7), (1, 2), (1, 3), (2, 3)))\n    2\n    >>> max_difference(((1, 2), (1, 4), (2, 4), (2, 6), (4, 6), (5, 6), (5, 7), (6, 7), (1, 2), (1, 3), (2, 3), (1, 2), (1, 3), (2, 3)))\n    1\n    >>> max_difference(((1, 2), (1, 4), (2, 4), (2, 6), (4, 6), (5, 6), (5, 7), (6, 7), (1, 2), (1, 3), (2, 3), (1, 2), (1, 3), (2, 3), (1, 2), ("
    },
    {
      "rank": 28,
      "score": 8.0,
      "candidate": "from typing import List\n\n\ndef max_diff(pairs: List[int]) -> int:\n    pairs = sorted(pairs)\n    max_diff = 0\n    for i in range(len(pairs)):\n        for j in range(i + 1, len(pairs)):\n            diff = pairs[j] - pairs[i]\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff\n\n\nif __name__ == \"__main__\":\n    print(max_diff([1, 100, 50, 20, 70, 30]))"
    },
    {
      "rank": 29,
      "score": 8.0,
      "candidate": "from itertools import combinations\n\n\ndef max_diff(arr):\n    max_diff = 0\n    for a, b in combinations(arr, 2):\n        max_diff = max(max_diff, abs(a - b))\n    return max_diff\n\n\nif __name__ == \"__main__\":\n    print(max_diff([1, 5, 3, 4, 2]))\n    print(max_diff([1, 5, 3, 4, 2, 100, 99, 101]))"
    },
    {
      "rank": 30,
      "score": 8.0,
      "candidate": "from typing import List, Tuple\n\n\ndef max_difference(tuples: List[Tuple[int, int]]) -> int:\n    \"\"\"Finds the maximum difference between available pairs in a tuple list.\n\n    Args:\n        tuples (List[Tuple[int, int]]): list of tuples\n\n    Examples:\n        >>> max_difference([(1, 3), (1, 4), (3, 6), (2, 5)])\n        3\n        >>> max_difference([(1, 5), (2, 3), (3, 6), (4, 7), (5, 10)])\n        5\n    \"\"\"\n    tuples.sort()\n\n    max_diff = 0\n\n    for i in range(len(tuples) - 1):\n        max_diff = max(max_diff, tuples[i + 1][0] - tuples[i][1])\n\n    return max_diff\n\n\nif __name__ == \"__main__\":\n    print(max_difference([(1, 3), (1, 4), (3, 6), (2, 5)]))\n    print(max_difference([(1, 5), (2, 3), (3, 6), (4, 7), (5, 10)]))"
    },
    {
      "rank": 31,
      "score": 8.0,
      "candidate": "def max_difference(arr: list) -> int:\n    \"\"\"\n    Time Complexity: O(nlogn)\n    Space Complexity: O(n)\n    \"\"\"\n\n    arr.sort()\n\n    max_diff = 0\n    for i in range(len(arr) - 1):\n        max_diff = max(max_diff, arr[i + 1] - arr[i])\n\n    return max_diff\n\n\nif __name__ == \"__main__\":\n    print(max_difference([2, 1, 5, 4]))\n    print(max_difference([1, 2, 3, 4]))\n    print(max_difference([2, 4, 1, 0]))"
    },
    {
      "rank": 32,
      "score": 8.0,
      "candidate": "def get_max_diff(tuples):\n    \"\"\"\n    tuples: a list of tuples (i, j) where i,j are ints representing the\n    indices of the first and last element of a pair\n    \"\"\"\n    tuples.sort(key=lambda x: x[0])\n    diffs = []\n    for index in range(len(tuples)):\n        if index == len(tuples) - 1:\n            break\n        diffs.append(tuples[index + 1][0] - tuples[index][1] - 1)\n    return max(diffs)\n\n\nif __name__ == '__main__':\n    print(get_max_diff([(1, 3), (2, 3), (1, 2)]))"
    },
    {
      "rank": 33,
      "score": 8.0,
      "candidate": "from typing import Tuple\n\n\ndef max_diff(pairs: Tuple[Tuple[int, int], ...]) -> int:\n    \"\"\"Returns the maximum difference between available pairs.\n\n    Args:\n        pairs (Tuple[Tuple[int, int], ...]): list of pairs\n\n    Examples:\n        >>> max_diff(((1, 2), (2, 3), (3, 4), (4, 5)))\n        2\n        >>> max_diff(((1, 2), (1, 3), (3, 4), (1, 5)))\n        2\n        >>> max_diff(((1, 2), (1, 3), (3, 4), (1, 5), (2, 3)))\n        1\n    \"\"\"\n    return max(\n        [abs(pair[0] - pair[1]) for pair in pairs if pair[0] < pair[1]] or [0]\n    )\n\n\nif __name__ == \"__main__\":\n    print(max_diff(((1, 2), (2, 3), (3, 4), (4, 5))))\n    print(max_diff(((1, 2), (1, 3), (3, 4), (1, 5))))\n    print(max_diff(((1, 2), (1, 3), (3, 4), (1, 5), (2, 3))))"
    },
    {
      "rank": 34,
      "score": 8.0,
      "candidate": "def max_diff(tup):\n    tup = sorted(tup)\n    min_val = tup[0]\n    max_val = tup[-1]\n    return max_val - min_val\n\n\nif __name__ == '__main__':\n    print(max_diff((1, 6, 14, 4)))"
    },
    {
      "rank": 35,
      "score": 8.0,
      "candidate": "from itertools import permutations\n\n\n# Time Complexity: O(n!)\ndef maximum_difference(numbers: list) -> int:\n    max_difference = 0\n\n    for perm in permutations(numbers):\n        difference = max(perm) - min(perm)\n        if difference > max_difference:\n            max_difference = difference\n\n    return max_difference\n\n\nif __name__ == \"__main__\":\n    print(maximum_difference([1, 5, 48]))\n    print(maximum_difference([1, 2, 3]))\n    print(maximum_difference([1, 4, 5, 10]))"
    },
    {
      "rank": 36,
      "score": 8.0,
      "candidate": "def max_difference(nums):\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(1)\n    \"\"\"\n    max_diff = 0\n\n    for i in range(len(nums) - 1):\n        for j in range(i + 1, len(nums)):\n            diff = abs(nums[i] - nums[j])\n            if diff > max_diff:\n                max_diff = diff\n\n    return max_diff\n\n\nif __name__ == \"__main__\":\n    print(max_difference((1, 3, 2, 4, 6)))"
    },
    {
      "rank": 37,
      "score": 8.0,
      "candidate": "from typing import List\n\n\ndef max_diff_pairs(arr: List[tuple]) -> int:\n    arr.sort(key=lambda x: x[0] - x[1])\n    return arr[-1][0] - arr[0][1]\n\n\nif __name__ == \"__main__\":\n    print(max_diff_pairs([(2, 1), (3, 4), (1, 0)]))"
    },
    {
      "rank": 38,
      "score": 8.0,
      "candidate": "def max_diff(tup):\n    \"\"\"\n    >>> max_diff(((1, 3), (2, 2), (8, 7), (4, 6)))\n    3\n    >>> max_diff(((1, 3), (2, 2), (8, 7), (4, 6), (5, 5)))\n    4\n    \"\"\"\n    if len(tup) == 2:\n        return tup[1][0] - tup[0][1]\n    else:\n        return max(max_diff(tup[1:]), tup[0][1] - tup[1][0])\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 39,
      "score": 8.0,
      "candidate": "from itertools import combinations\nfrom collections import Counter\n\ndef max_diff(nums):\n    count = Counter(nums)\n    ans = 0\n    for pair in combinations(count, 2):\n        if pair[0] == pair[1]:\n            ans = max(ans, pair[0]*2)\n        else:\n            ans = max(ans, abs(pair[0] - pair[1]))\n    return ans\n\nprint(max_diff((1, 1, 2, 2, 3, 4, 5, 5, 5)))"
    },
    {
      "rank": 40,
      "score": 8.0,
      "candidate": "def max_difference(l):\n    \"\"\"\n    >>> max_difference(((1, 3), (2, 6), (3, 5), (4, 7)))\n    5\n    \"\"\"\n    l.sort()\n    max_diff = 0\n    for i in range(1, len(l)):\n        diff = l[i][1] - l[i - 1][0]\n        if diff > max_diff:\n            max_diff = diff\n    return max_diff\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 41,
      "score": 8.0,
      "candidate": "from itertools import combinations\n\n\ndef maximum_difference(iterable):\n    \"\"\"\n    >>> maximum_difference([1, 5, 2, 3, 10])\n    9\n    \"\"\"\n    if len(iterable) < 2:\n        return None\n    iterable = sorted(iterable)\n    combs = list(combinations(iterable, 2))\n    diffs = [x - y for x, y in combs]\n    return max(diffs)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 42,
      "score": 8.0,
      "candidate": "from itertools import combinations\n\n\ndef max_diff(t):\n    max_diff_ = 0\n    for a, b in combinations(t, 2):\n        diff = abs(a - b)\n        if diff > max_diff_:\n            max_diff_ = diff\n    return max_diff_\n\n\nif __name__ == '__main__':\n    print(max_diff((1, 2, 3, 4, 5)))"
    },
    {
      "rank": 43,
      "score": 8.0,
      "candidate": "def maximum_difference(arr):\n    if len(arr) < 2:\n        return 0\n    else:\n        max_diff = 0\n        for i in range(len(arr) - 1):\n            for j in range(i + 1, len(arr)):\n                max_diff = max(max_diff, abs(arr[i] - arr[j]))\n        return max_diff\n\n\nif __name__ == \"__main__\":\n    print(maximum_difference([1, 4, 9, 5, 3]))\n    print(maximum_difference([1, 10, 11, 13, 13, 100]))\n    print(maximum_difference([1, 10, 11, 13, 13, 100, 100, 100, 100]))"
    },
    {
      "rank": 44,
      "score": 8.0,
      "candidate": "from itertools import combinations\n\n\ndef max_diff(t):\n    t = list(t)\n    t.sort()\n    max_diff = 0\n    for a, b in combinations(t, 2):\n        diff = b - a\n        max_diff = max(max_diff, diff)\n    return max_diff\n\n\nif __name__ == \"__main__\":\n    t = (2, 7, 3, 9, 12, 15)\n    print(max_diff(t))"
    },
    {
      "rank": 45,
      "score": 8.0,
      "candidate": "from typing import List\n\n\ndef max_diff(nums: List[int]) -> int:\n    \"\"\"\n    Time Complexity: O(nlogn)\n    \"\"\"\n    nums.sort()\n    res = 0\n    for i in range(len(nums) - 1):\n        res = max(res, nums[i + 1] - nums[i])\n    return res\n\n\nif __name__ == \"__main__\":\n    print(max_diff([1, 2, 3, 4, 5, 6, 7]))"
    },
    {
      "rank": 46,
      "score": 8.0,
      "candidate": "from typing import Tuple, List\n\n\ndef max_diff(arr: Tuple[int, ...]) -> int:\n    arr_sorted = sorted(list(arr))\n    max_diff_so_far = 0\n\n    for i in range(len(arr_sorted)):\n        for j in range(i + 1, len(arr_sorted)):\n            max_diff_so_far = max(max_diff_so_far, arr_sorted[j] - arr_sorted[i])\n\n    return max_diff_so_far\n\n\nif __name__ == \"__main__\":\n    print(max_diff((1, 9, 4, 2, 7)))\n    print(max_diff((1, 2, 3, 4, 5)))"
    },
    {
      "rank": 47,
      "score": 8.0,
      "candidate": "from typing import List\n\n\ndef get_max_difference(l: List[int]) -> int:\n    l.sort()\n    max_difference = 0\n\n    for i in range(len(l) - 1):\n        max_difference = max(max_difference, l[i + 1] - l[i])\n\n    return max_difference\n\n\nif __name__ == \"__main__\":\n    print(get_max_difference([1, 5, 12, 15, 20, 25]))"
    },
    {
      "rank": 48,
      "score": 8.0,
      "candidate": "from typing import List\n\n\ndef max_diff_pairs(nums: List[int]) -> int:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(1)\n    \"\"\"\n    nums.sort()\n\n    max_diff = 0\n    for i in range(len(nums) - 1):\n        diff = nums[i + 1] - nums[i]\n        if diff > max_diff:\n            max_diff = diff\n\n    return max_diff\n\n\nif __name__ == \"__main__\":\n    print(max_diff_pairs([1, 2, 4, 7, 10, 11, 12, 14]))"
    },
    {
      "rank": 49,
      "score": 8.0,
      "candidate": "def get_maximum_difference(a):\n    a = list(a)\n    a.sort()\n    maximum = 0\n    for i in range(0, len(a) - 1):\n        difference = a[i + 1] - a[i]\n        if difference > maximum:\n            maximum = difference\n    return maximum\n\n\nprint(get_maximum_difference((1, 5, 3, 4, 2)))"
    },
    {
      "rank": 50,
      "score": 8.0,
      "candidate": "def max_difference(tuples):\n    # find max\n    max_value = 0\n    for i in range(len(tuples)):\n        for j in range(i+1, len(tuples)):\n            if tuples[j][1] - tuples[i][0] > max_value:\n                max_value = tuples[j][1] - tuples[i][0]\n    return max_value\n\n\ndef test_max_difference():\n    assert max_difference([(1, 3), (1, 4), (2, 2), (1, 5), (1, 5)]) == 4\n    assert max_difference([(1, 3), (2, 4), (3, 1), (4, 2), (5, 3)]) == 4\n    assert max_difference([(1, 3), (2, 2), (3, 1), (4, 2), (5, 3)]) == 2\n    assert max_difference([(1, 1), (2, 2), (3, 3), (4, 4), (5, 5)]) == 0\n\n\nif __name__ == '__main__':\n    test_max_difference()"
    },
    {
      "rank": 51,
      "score": 8.0,
      "candidate": "def max_difference(tup):\n    max_diff = 0\n    for i in range(len(tup) - 1):\n        for j in range(i + 1, len(tup)):\n            if tup[i] > tup[j]:\n                diff = tup[i] - tup[j]\n                if diff > max_diff:\n                    max_diff = diff\n    return max_diff\n\n\ntup = (1, 2, 3, 4, 5)\nprint(max_difference(tup))"
    },
    {
      "rank": 52,
      "score": 8.0,
      "candidate": "from itertools import combinations\n\n\ndef max_difference(a):\n    result = 0\n    for i in range(len(a)):\n        for j in range(i+1, len(a)):\n            result = max(result, abs(a[i] - a[j]))\n    return result\n\n\ndef max_difference_2(a):\n    return max(abs(i - j) for i, j in combinations(a, 2))\n\n\nif __name__ == \"__main__\":\n    print(max_difference([1, 5, 2, 3, 7]))\n    print(max_difference_2([1, 5, 2, 3, 7]))"
    },
    {
      "rank": 53,
      "score": 8.0,
      "candidate": "from itertools import combinations\n\n\ndef max_diff(nums):\n    if len(nums) < 2:\n        return 0\n\n    comb = list(combinations(nums, 2))\n\n    return max([abs(a - b) for a, b in comb])\n\n\nprint(max_diff([1, 2, 4, 7]))\nprint(max_diff([1, 2, 2, 4, 7]))"
    },
    {
      "rank": 54,
      "score": 8.0,
      "candidate": "from typing import List\n\n\ndef max_difference(arr: List[int]) -> int:\n    arr.sort()\n\n    max_diff = 0\n    i = 0\n    j = len(arr) - 1\n\n    while i < j:\n        diff = arr[j] - arr[i]\n        max_diff = max(max_diff, diff)\n\n        if diff == 0:\n            break\n\n        if diff > 0:\n            i += 1\n        else:\n            j -= 1\n\n    return max_diff\n\n\nif __name__ == \"__main__\":\n    print(max_difference([1, 5, 2, 3]))\n    print(max_difference([1, 5, 2, 5, 3, 5, 4]))"
    },
    {
      "rank": 55,
      "score": 8.0,
      "candidate": "from itertools import combinations\n\n\ndef max_difference(nums):\n    diff = 0\n    for a, b in combinations(nums, 2):\n        diff = max(diff, abs(a - b))\n    return diff\n\n\nif __name__ == \"__main__\":\n    print(max_difference((1, 5, 3, 4, 2)))"
    },
    {
      "rank": 56,
      "score": 8.0,
      "candidate": "from itertools import combinations\n\n\ndef maximum_difference(a):\n    \"\"\"\n    Find the maximum difference between available pairs in the given tuple list.\n    :param a: list of tuples.\n    :return: maximum difference.\n    \"\"\"\n    return max(abs(x[0] - x[1]) for x in combinations(a, 2))\n\n\nif __name__ == \"__main__\":\n    assert maximum_difference((1, 5, 2, 10, 18, 13)) == 15"
    },
    {
      "rank": 57,
      "score": 8.0,
      "candidate": "from itertools import combinations\n\n\ndef max_diff(a):\n    return max(abs(a[i] - a[j]) for i, j in combinations(range(len(a)), 2))\n\n\nif __name__ == \"__main__\":\n    print(max_diff((1, 3, 2, 4, 1)))\n    print(max_diff((1, 1, 2, 2, 3)))"
    },
    {
      "rank": 58,
      "score": 1.0,
      "candidate": "from itertools import combinations\n\n\ndef max_difference(arr):\n    max_diff = 0\n    for comb in combinations(arr, 2):\n        if abs(comb[0] - comb[1]) > max_diff:\n            max_diff = abs(comb[0] - comb[1])\n    return max_diff\n\n\nif __name__ == \"__main__\":\n    assert max_difference([1, 2, 3, 4]) == 3\n    assert max_difference([1, 2, 3, 4, 5]) == 4"
    },
    {
      "rank": 59,
      "score": 1.0,
      "candidate": "from itertools import combinations\n\n\n# Time complexity O(n^2)\ndef max_difference(arr):\n    max_dif = 0\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            max_dif = max(max_dif, abs(arr[i] - arr[j]))\n    return max_dif\n\n\n# Time complexity O(n)\ndef max_difference_combinations(arr):\n    combs = list(combinations(arr, 2))\n    max_dif = 0\n    for comb in combs:\n        max_dif = max(max_dif, abs(comb[0] - comb[1]))\n    return max_dif\n\n\n# Time complexity O(nlogn)\ndef max_difference_sort(arr):\n    arr.sort()\n    max_dif = 0\n    for i in range(1, len(arr)):\n        max_dif = max(max_dif, arr[i] - arr[i - 1])\n    return max_dif\n\n\nprint(max_difference([1, 2, 3, 4, 5]))\nprint(max_difference_combinations([1, 2, 3, 4, 5]))\nprint(max_difference_sort([1, 2, 3, 4, 5]))"
    },
    {
      "rank": 60,
      "score": 1.0,
      "candidate": "from itertools import combinations\n\n\ndef max_difference(nums):\n    max_diff = 0\n    for i, j in combinations(nums, 2):\n        max_diff = max(max_diff, abs(i - j))\n    return max_diff\n\n\ndef test_max_difference():\n    assert max_difference([1, 5, 10, 100, 1000]) == 990\n\n\nif __name__ == \"__main__\":\n    test_max_difference()"
    },
    {
      "rank": 61,
      "score": 1.0,
      "candidate": "from itertools import permutations\n\n\ndef max_difference(arr):\n    max_diff = 0\n    for perm in permutations(arr, 2):\n        diff = abs(perm[0] - perm[1])\n        if diff > max_diff:\n            max_diff = diff\n    return max_diff\n\n\nprint(max_difference((1, 5, 2, 10)))\nprint(max_difference((1, 10, 9, 4, 2, 1, 11)))"
    },
    {
      "rank": 62,
      "score": 1.0,
      "candidate": "from typing import List, Tuple\n\n\ndef max_difference(pairs: List[Tuple[int, int]]) -> int:\n    \"\"\"Finds maximum difference in a list of tuples\n\n    Args:\n        pairs (List[Tuple[int, int]]): List of tuples\n\n    Returns:\n        int: Maximum difference between available pairs\n    \"\"\"\n    pairs.sort(key=lambda x: x[0])\n    max_diff = 0\n    prev = pairs[0][1]\n    for i in range(1, len(pairs)):\n        if pairs[i][0] > prev:\n            max_diff = max(max_diff, pairs[i][1] - prev)\n            prev = pairs[i][1]\n    return max_diff\n\n\nif __name__ == \"__main__\":\n    print(max_difference([(2, 5), (3, 8), (1, 9), (2, 3), (4, 6), (5, 10)]))"
    },
    {
      "rank": 63,
      "score": 1.0,
      "candidate": "from typing import Tuple\n\n\ndef max_diff(numbers: Tuple[int, ...]) -> int:\n    \"\"\"Return the maximum difference between available pairs in the given tuple list.\n\n    Examples:\n        >>> assert max_diff((1, 5, 3, 4, 2)) == 4\n        >>> assert max_diff((9, 1, 1, 9)) == 8\n        >>> assert max_diff((1,)) == 0\n    \"\"\"\n    numbers_sorted = sorted(numbers)\n    max_diff = 0\n\n    for i in range(len(numbers_sorted) - 1):\n        if numbers_sorted[i + 1] - numbers_sorted[i] > max_diff:\n            max_diff = numbers_sorted[i + 1] - numbers_sorted[i]\n\n    return max_diff\n\n\nif __name__ == \"__main__\":\n    print(max_diff((1, 5, 3, 4, 2)))"
    },
    {
      "rank": 64,
      "score": 1.0,
      "candidate": "from itertools import combinations\n\n\ndef max_diff(arr):\n    pairs = list(combinations(arr, 2))\n    pairs.sort(key=lambda x: abs(x[0] - x[1]))\n    return pairs[0][0] - pairs[-1][0]\n\n\ndef test_function(test_case):\n    arr = test_case[0]\n    solution = test_case[1]\n    output = max_diff(arr)\n    if output == solution:\n        print(\"Pass\")\n    else:\n        print(\"Fail\")\n\n\narr = [1, 5, 3, 4, 7]\nsolution = 2\ntest_case = [arr, solution]\ntest_function(test_case)\n\narr = [1, 10, 4, 12, 2]\nsolution = 8\ntest_case = [arr, solution]\ntest_function(test_case)"
    },
    {
      "rank": 65,
      "score": 1.0,
      "candidate": "from itertools import combinations\n\n\n# Time Complexity: O(n^2)\n# Space Complexity: O(1)\ndef get_maximum_difference(l: list) -> int:\n    maximum_diff = 0\n\n    for i, j in combinations(l, 2):\n        diff = abs(i - j)\n        maximum_diff = max(diff, maximum_diff)\n\n    return maximum_diff\n\n\nif __name__ == \"__main__\":\n    print(get_maximum_difference([1, 5, 10, 100]))"
    },
    {
      "rank": 66,
      "score": 1.0,
      "candidate": "from typing import List\n\n\n# O(n^2)\ndef max_difference(l: List[int]) -> int:\n    \"\"\"\n    >>> max_difference([1, 5, 2, 3, 7])\n    4\n    >>> max_difference([1, 5, 2, 3, 7, 0])\n    4\n    >>> max_difference([5, 5, 2, 3, 7, 0])\n    0\n    \"\"\"\n    max_diff = 0\n\n    for i in range(len(l)):\n        for j in range(i + 1, len(l)):\n            max_diff = max(max_diff, abs(l[i] - l[j]))\n\n    return max_diff\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 67,
      "score": 1.0,
      "candidate": "from itertools import permutations\nfrom typing import List\n\n\ndef max_difference(tuples: List[tuple]) -> int:\n    \"\"\"\n    Time Complexity: O(n!)\n    Space Complexity: O(n)\n    \"\"\"\n    if not tuples:\n        return 0\n\n    return max(\n        max(first - second for first, second in permutations(pair))\n        for pair in permutations(tuples)\n    )\n\n\nif __name__ == \"__main__\":\n    print(max_difference([(1, 2), (2, 3), (2, 4)]))\n    print(max_difference([(1, 2), (2, 3), (3, 4)]))\n    print(max_difference([(1, 2), (2, 3)]))"
    },
    {
      "rank": 68,
      "score": 1.0,
      "candidate": "def max_difference(a):\n    a = sorted(a)\n    max_diff = a[1] - a[0]\n    for i in range(len(a) - 1):\n        if a[i + 1] - a[i] > max_diff:\n            max_diff = a[i + 1] - a[i]\n    return max_diff\n\n\nprint(max_difference((1, 5, 2, 4, 7)))\nprint(max_difference((1, 1, 1, 1, 1)))\nprint(max_difference((1, 5, 2, 4, 7, 2, 1, 4, 2, 3, 1, 3, 1, 3)))"
    },
    {
      "rank": 69,
      "score": 1.0,
      "candidate": "from itertools import combinations\nfrom typing import List\n\n\ndef maximum_difference(l: List[int]) -> int:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(n)\n    \"\"\"\n    max_diff = 0\n    for a, b in combinations(l, 2):\n        max_diff = max(max_diff, abs(a - b))\n    return max_diff\n\n\nif __name__ == \"__main__\":\n    assert maximum_difference([1, 5, 4, 3, 10]) == 9"
    },
    {
      "rank": 70,
      "score": 1.0,
      "candidate": "def maximum_difference(n):\n    \"\"\"\n    >>> maximum_difference((1, 7, 3, 10, 4))\n    7\n    >>> maximum_difference((1, 1, 1, 1, 1))\n    0\n    >>> maximum_difference((5, 5, 5, 5, 5))\n    0\n    >>> maximum_difference((1, 2, 3, 4, 5))\n    4\n    >>> maximum_difference((10, 11, 1, 2, 3))\n    10\n    >>> maximum_difference((10, 1, 2, 3, 4))\n    9\n    \"\"\"\n    maximum_difference = 0\n    for i in range(len(n) - 1):\n        for j in range(i + 1, len(n)):\n            if n[i] < n[j]:\n                maximum_difference = max(maximum_difference, n[j] - n[i])\n    return maximum_difference\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 71,
      "score": 1.0,
      "candidate": "from itertools import combinations\n\n\ndef max_difference(arr: list) -> int:\n    \"\"\"\n    Time Complexity: O(n^2)\n    \"\"\"\n    max_diff = 0\n\n    for pair in combinations(arr, 2):\n        max_diff = max(max_diff, abs(pair[0] - pair[1]))\n\n    return max_diff\n\n\nif __name__ == \"__main__\":\n    assert max_difference([1, 5, 2, 3, 7]) == 4"
    },
    {
      "rank": 72,
      "score": 1.0,
      "candidate": "from collections import defaultdict\n\n\n# Time complexity O(n^2)\ndef get_max_difference(nums):\n    \"\"\"\n    Return the maximum difference between available pairs in the given tuple list.\n    >>> get_max_difference((1, 5, 4, 2))\n    3\n    >>> get_max_difference((1, 5, 7, 2, 3))\n    4\n    >>> get_max_difference((1, 2, 3, 4))\n    0\n    >>> get_max_difference(())\n    0\n    >>> get_max_difference((1,))\n    0\n    \"\"\"\n    nums_dict = defaultdict(list)\n    for num in nums:\n        nums_dict[num].append(num)\n    max_diff = 0\n    for num in nums:\n        for i in range(num + 1, 10000):\n            if i in nums_dict and num in nums_dict[i]:\n                max_diff = max(max_diff, i - num)\n    return max_diff\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 73,
      "score": 1.0,
      "candidate": "from itertools import combinations\n\n\ndef max_diff(arr):\n    arr.sort()\n    diffs = []\n    for a, b in combinations(arr, 2):\n        diffs.append(abs(a - b))\n    return max(diffs)\n\n\ndef test_max_diff():\n    \"\"\"\n    >>> test_max_diff()\n    \"\"\"\n    assert max_diff((1, 5, 4, 2)) == 3\n    assert max_diff((5, 4, 3, 2, 1)) == 4\n    assert max_diff((1, 2, 3, 4)) == 3\n    assert max_diff((1, 1, 1, 1)) == 0\n    assert max_diff((5, 5, 5, 5)) == 0"
    },
    {
      "rank": 74,
      "score": 1.0,
      "candidate": "from typing import List\n\n\ndef maximum_difference(l: List[int]) -> int:\n    \"\"\"\n    Time Complexity: O(nlogn)\n    Space Complexity: O(1)\n    \"\"\"\n    l.sort()\n\n    max_difference = 0\n\n    for i in range(len(l) - 1):\n        max_difference = max(max_difference, l[i + 1] - l[i])\n\n    return max_difference\n\n\nif __name__ == \"__main__\":\n    assert maximum_difference([1, 5, 2, 3, 4]) == 4\n    assert maximum_difference([1, 2, 3, 4, 5]) == 4\n    assert maximum_difference([5, 3, 2, 4, 1]) == 2"
    },
    {
      "rank": 75,
      "score": 1.0,
      "candidate": "from itertools import combinations\n\n\ndef maximum_difference(numbers):\n    max_diff = 0\n    for num1, num2 in combinations(numbers, 2):\n        diff = abs(num1 - num2)\n        if diff > max_diff:\n            max_diff = diff\n    return max_diff\n\n\nprint(maximum_difference((1, 5, 6, 8, 3, 7)))\nprint(maximum_difference((2, 6, 3, 7, 4, 9)))"
    },
    {
      "rank": 76,
      "score": 1.0,
      "candidate": "def maximum_difference(a):\n    a = sorted(a)\n    max_diff = 0\n    for i in range(len(a) - 1):\n        diff = a[i + 1] - a[i]\n        max_diff = max(diff, max_diff)\n    return max_diff\n\n\ndef test_maximum_difference():\n    assert maximum_difference((1, 5, 2, 3, 10)) == 9\n    assert maximum_difference((2, 10, 8, 4, 7, 1)) == 9"
    },
    {
      "rank": 77,
      "score": 1.0,
      "candidate": "from typing import List\n\n\ndef max_difference(arr: List[int]) -> int:\n    arr.sort()\n\n    max_diff = 0\n    for i in range(len(arr) - 1):\n        max_diff = max(max_diff, arr[i + 1] - arr[i])\n\n    return max_diff\n\n\nif __name__ == \"__main__\":\n    assert max_difference([3, 1, 2, 5, 6, 4]) == 4\n    assert max_difference([1, 5, 2, 10]) == 9"
    },
    {
      "rank": 78,
      "score": 1.0,
      "candidate": "from itertools import combinations\n\n\ndef max_difference(arr):\n    max_diff = 0\n\n    for pair in combinations(arr, 2):\n        max_diff = max(max_diff, abs(pair[0] - pair[1]))\n\n    return max_diff\n\n\ndef test_max_difference():\n    assert max_difference((1, 5, 3, 4, 2)) == 4\n    assert max_difference((1, 5, 3, 4, 2, 10, 11, 9, 8)) == 9\n\n\nif __name__ == \"__main__\":\n    test_max_difference()"
    },
    {
      "rank": 79,
      "score": 1.0,
      "candidate": "from typing import List\n\n\ndef max_diff(tup: List[tuple]) -> int:\n    \"\"\"Returns the maximum difference between available pairs in the given tuple list.\n\n    Args:\n        tup (List[tuple]): a list of tuples\n\n    Examples:\n        >>> max_diff([(1, 10), (2, 9), (3, 8), (4, 7), (5, 6)])\n        1\n        >>> max_diff([(1, 5), (2, 3), (4, 2), (2, 1), (3, 0)])\n        2\n\n    Returns:\n        int: the maximum difference between available pairs in the given tuple list\n    \"\"\"\n    tup.sort(key=lambda x: x[1])\n    max_ = 0\n    for i in range(len(tup) - 1):\n        if tup[i + 1][0] > tup[i][0]:\n            max_ = max(max_, tup[i + 1][1] - tup[i][1])\n    return max_\n\n\nif __name__ == \"__main__\":\n    print(max_diff([(1, 10), (2, 9), (3, 8), (4, 7), (5, 6)]))\n    print(max_diff([(1, 5), (2, 3), (4, 2), (2, 1), (3, 0)]))"
    },
    {
      "rank": 80,
      "score": 1.0,
      "candidate": "from typing import List\n\n\ndef max_diff_pairs(arr: List[int]) -> int:\n    \"\"\"\n    Time Complexity: O(n*log(n))\n    Space Complexity: O(1)\n    \"\"\"\n    arr.sort()\n\n    max_diff = 0\n    prev = arr[0]\n    for elem in arr[1:]:\n        max_diff = max(elem - prev, max_diff)\n        prev = elem\n\n    return max_diff\n\n\nif __name__ == \"__main__\":\n    assert max_diff_pairs([5, 11, 2, 7, 10]) == 5"
    },
    {
      "rank": 81,
      "score": 1.0,
      "candidate": "def find_max_diff(arr):\n    arr.sort()\n    diff = 0\n    for i in range(len(arr)-1):\n        diff = max(diff, arr[i+1]-arr[i])\n    return diff\n\n\nif __name__ == \"__main__\":\n    arr = [1, 10, 2, 3, 1, 5]\n    print(find_max_diff(arr))"
    },
    {
      "rank": 82,
      "score": 1.0,
      "candidate": "from itertools import combinations\n\n\ndef max_difference(a: tuple) -> int:\n    \"\"\"Returns the maximum difference between available pairs in the given tuple list.\n\n    Args:\n        a (tuple): a tuple of integers\n\n    Examples:\n        >>> assert max_difference((1, 5, 2, 3, 4)) == 4\n        >>> assert max_difference((1, 5, 2, 3)) == 4\n        >>> assert max_difference((1, 5, 2)) == 4\n    \"\"\"\n    return max(\n        abs(a - b)\n        for a, b in combinations(sorted(a), 2)\n    )\n\n\nif __name__ == \"__main__\":\n    print(max_difference((1, 5, 2, 3, 4)))"
    },
    {
      "rank": 83,
      "score": 1.0,
      "candidate": "from itertools import combinations\n\n\n# Time Complexity: O(n^2)\ndef max_difference(nums):\n    max_diff = 0\n\n    for pair in combinations(nums, 2):\n        max_diff = max(max_diff, abs(pair[0] - pair[1]))\n\n    return max_diff\n\n\nassert max_difference((1, 5, 3, 4, 2)) == 4\nassert max_difference((1, 5, 3, 4)) == 4\nassert max_difference((1, 5, 3)) == 4\nassert max_difference((1, 5)) == 4"
    },
    {
      "rank": 84,
      "score": 1.0,
      "candidate": "from typing import List\n\n\ndef get_max_difference(nums: List[int]) -> int:\n    \"\"\"\n    Time Complexity: O(n*log(n))\n    \"\"\"\n    nums.sort()\n\n    max_difference = 0\n    for i in range(len(nums) - 1):\n        max_difference = max(\n            max_difference,\n            nums[i + 1] - nums[i]\n        )\n\n    return max_difference\n\n\nif __name__ == \"__main__\":\n    assert get_max_difference([1, 5, 2, 3, 7, 4, 9, 8]) == 7"
    },
    {
      "rank": 85,
      "score": 1.0,
      "candidate": "from typing import List\n\n\ndef maximum_difference(arr: List[int]) -> int:\n    \"\"\"\n    >>> maximum_difference([1, 5, 3, 4, 2])\n    4\n    >>> maximum_difference([1, 3, 5, 7, 9, 2, 6, 8, 4])\n    8\n    >>> maximum_difference([1, 2, 3, 4, 5, 6, 7, 8, 9])\n    -1\n    \"\"\"\n    if len(arr) < 2:\n        return -1\n\n    arr.sort()\n    max_diff = arr[1] - arr[0]\n\n    for i in range(2, len(arr)):\n        diff = arr[i] - arr[i - 1]\n        if diff > max_diff:\n            max_diff = diff\n\n    return max_diff\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 86,
      "score": 1.0,
      "candidate": "from typing import List, Tuple\n\n\ndef max_diff(tup: Tuple[int, ...]) -> int:\n    \"\"\"Return maximum difference between available pairs in the given tuple list.\n\n    Args:\n        tup (Tuple[int, ...]): tuple of integers\n\n    Examples:\n        >>> assert max_diff((1, 5, 2, 10, 6, 9)) == 9\n    \"\"\"\n    if len(tup) < 2:\n        return 0\n    tup = sorted(tup)\n    return max(tup[-1] - tup[0], *(tup[i + 1] - tup[i] for i in range(len(tup) - 1)))\n\n\ndef max_diff_naive(tup: Tuple[int, ...]) -> int:\n    \"\"\"Return maximum difference between available pairs in the given tuple list.\n\n    Args:\n        tup (Tuple[int, ...]): tuple of integers\n\n    Examples:\n        >>> assert max_diff_naive((1, 5, 2, 10, 6, 9)) == 9\n    \"\"\"\n    if len(tup) < 2:\n        return 0\n    max_diff = 0\n    for i in range(len(tup) - 1):\n        for j in range(i + 1, len(tup)):\n            max_diff = max(max_diff, abs(tup[i] - tup[j]))\n    return max_diff\n\n\ndef max_diff_naive_2(tup: Tuple[int, ...]) -> int:\n    \"\"\"Return maximum difference between available pairs in the given tuple list.\n\n    Args:\n        tup (Tuple[int, ...]): tuple of integers\n\n    Examples:\n        >>> assert max_diff_naive_2((1, 5, 2, 10, 6, 9)) == 9\n    \"\"\"\n    if len(tup) < 2:\n        return 0\n    max_diff = 0\n    for i in range(len(tup)):"
    },
    {
      "rank": 87,
      "score": 1.0,
      "candidate": "from collections import Counter\nfrom typing import List\n\n\ndef maximum_difference(list_of_tuples: List[tuple]) -> int:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(n)\n    \"\"\"\n    # get the count of each element\n    counter = Counter(list(sum(list_of_tuples, ())))\n\n    # find the maximum difference between each element\n    maximum = 0\n    for element in counter:\n        if counter[element] > 1:\n            maximum = max(\n                maximum,\n                counter[element] - 1\n            )\n\n    return maximum\n\n\nif __name__ == \"__main__\":\n    assert maximum_difference([(1, 2), (1, 3), (4, 5), (6, 7), (6, 8)]) == 3"
    },
    {
      "rank": 88,
      "score": 1.0,
      "candidate": "from typing import List\n\n\ndef max_diff(l: List[int]) -> int:\n    \"\"\"\n    >>> max_diff([1, 5, 3, 4, 2])\n    4\n    \"\"\"\n    l = sorted(l)\n    max_diff = l[-1] - l[0]\n\n    for i in range(len(l) - 1):\n        diff = l[i + 1] - l[i]\n        max_diff = max(max_diff, diff)\n\n    return max_diff\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 89,
      "score": 1.0,
      "candidate": "from itertools import permutations\n\n\n# time complexity O(n!)\ndef max_difference(numbers: tuple) -> int:\n    \"\"\"Return maximum difference between available pairs.\"\"\"\n    # find all possible pair combinations in a list\n    pair_list = permutations(numbers, 2)\n    # find maximum difference\n    return max(max(pair) - min(pair) for pair in pair_list)\n\n\nprint(max_difference((2, 4, 1, 2, 5, 3)))\nprint(max_difference((2, 1, 5)))\nprint(max_difference((2, 1)))\nprint(max_difference((2,)))"
    },
    {
      "rank": 90,
      "score": 1.0,
      "candidate": "def find_max_difference(input_list: tuple) -> int:\n    \"\"\"Finds the maximum difference between available pairs in the given tuple list.\n\n    Args:\n        input_list (tuple): input list of tuples\n\n    Examples:\n        >>> assert find_max_difference(((1, 5), (1, 2), (1, 3), (1, 4))) == 4\n        >>> assert find_max_difference(((1, 5), (1, 2), (1, 3), (1, 4), (3, 4))) == 3\n        >>> assert find_max_difference(((1, 2), (1, 5), (1, 3), (1, 4))) == 4\n    \"\"\"\n    input_list = sorted(input_list)\n    min_value = input_list[0][0]\n    max_value = input_list[-1][-1]\n    difference_list = [max_value - min_value]\n    for i in range(len(input_list) - 1):\n        difference_list.append(input_list[i + 1][-1] - input_list[i][0])\n    return min(difference_list)\n\n\ndef find_max_difference_optimized(input_list: tuple) -> int:\n    \"\"\"Finds the maximum difference between available pairs in the given tuple list.\n\n    Args:\n        input_list (tuple): input list of tuples\n\n    Examples:\n        >>> assert find_max_difference_optimized(((1, 5), (1, 2), (1, 3), (1, 4))) == 4\n        >>> assert find_max_difference_optimized(((1, 5), (1, 2), (1, 3), (1, 4), (3, 4))) == 3\n        >>> assert find_max_difference_optimized(((1, 2), (1, 5), (1, 3), (1, 4))) == 4\n    \"\"\"\n    input_list = sorted(input_list)\n    min_value = input"
    },
    {
      "rank": 91,
      "score": 1.0,
      "candidate": "def max_diff(lst):\n    # Write your code here\n    return max(lst[i] - lst[i - 1] for i in range(1, len(lst)))\n\n\ndef test(fn, lst, expected):\n    result = fn(lst)\n    if result == expected:\n        print(\"Congratulations!\")\n    else:\n        print(f\"Really? {result}?\")\n\n\nif __name__ == '__main__':\n    test(max_diff, [1, 5, 3, 4, 2], 2)\n    test(max_diff, [1, 5, 1, 4, 2], 4)\n    test(max_diff, [1, 1, 1, 1, 1], 0)\n    test(max_diff, [1, 5, 5, 4, 2], 1)\n    test(max_diff, [1, 5, 2, 4, 2], 3)\n    test(max_diff, [1, 1, 1, 1, 1], 0)\n    test(max_diff, [1, 2, 3, 4, 5], 4)\n    test(max_diff, [1, 5, 2, 4, 2], 3)\n    test(max_diff, [1, 2, 3, 4, 5], 4)\n    test(max_diff, [1, 1, 1, 1, 1], 0)\n    test(max_diff, [1, 5, 5, 4, 2], 1)"
    },
    {
      "rank": 92,
      "score": 1.0,
      "candidate": "from typing import List\n\n\ndef max_difference(nums: List[int]) -> int:\n    \"\"\"Find the maximum difference between available pairs.\n\n    Args:\n        nums (List[int]): list of integers\n\n    Examples:\n        >>> assert max_difference([4, 1, 2, 3]) == 3\n    \"\"\"\n    return max(\n        [\n            max(nums) - min(nums[nums.index(i) + 1 :])\n            for i in nums\n            if nums.index(i) != len(nums) - 1\n        ]\n    )\n\n\nif __name__ == \"__main__\":\n    print(max_difference([4, 1, 2, 3]))"
    },
    {
      "rank": 93,
      "score": 1.0,
      "candidate": "from typing import Tuple\n\n\ndef max_difference(pairs: Tuple[Tuple[int, int], ...]) -> int:\n    \"\"\"Find the maximum difference between available pairs.\n\n    Args:\n        pairs (Tuple[Tuple[int, int], ...]): list of tuples\n\n    Examples:\n        >>> max_difference(((1, 3), (2, 3), (2, 4)))\n        1\n        >>> max_difference(((1, 4), (2, 4), (3, 4)))\n        2\n        >>> max_difference(((1, 4), (2, 4), (3, 4), (1, 5)))\n        2\n        >>> max_difference(((1, 4), (2, 4), (3, 4), (1, 5), (2, 6)))\n        3\n    \"\"\"\n    return max(\n        [\n            (max(pair[0], pair[1]) - min(pair[0], pair[1]))\n            for pair in pairs\n        ]\n    )\n\n\nif __name__ == \"__main__\":\n    print(max_difference(((1, 3), (2, 3), (2, 4))))\n    print(max_difference(((1, 4), (2, 4), (3, 4))))\n    print(max_difference(((1, 4), (2, 4), (3, 4), (1, 5))))\n    print(max_difference(((1, 4), (2, 4), (3, 4), (1, 5), (2, 6))))"
    },
    {
      "rank": 94,
      "score": 1.0,
      "candidate": "from typing import List, Tuple\n\n\ndef get_max_diff(numbers: List[int]) -> int:\n    numbers.sort()\n\n    max_diff = 0\n    for i in range(len(numbers) - 1):\n        diff = numbers[i + 1] - numbers[i]\n        if diff > max_diff:\n            max_diff = diff\n\n    return max_diff\n\n\ndef get_max_diff_2(numbers: List[int]) -> int:\n    numbers.sort()\n\n    max_diff = 0\n    prev = numbers[0]\n    for number in numbers:\n        diff = number - prev\n        if diff > max_diff:\n            max_diff = diff\n        prev = number\n\n    return max_diff\n\n\ndef get_max_diff_3(numbers: List[int]) -> int:\n    numbers.sort()\n\n    max_diff = 0\n    prev = numbers[0]\n    for number in numbers:\n        diff = number - prev\n        if diff > max_diff:\n            max_diff = diff\n\n    return max_diff\n\n\ndef get_max_diff_4(numbers: List[int]) -> int:\n    numbers.sort()\n\n    max_diff = 0\n    prev = numbers[0]\n    for number in numbers:\n        diff = number - prev\n        if diff > max_diff:\n            max_diff = diff\n        else:\n            prev = number\n\n    return max_diff\n\n\ndef get_max_diff_5(numbers: List[int]) -> int:\n    numbers.sort()\n\n    prev = numbers[0]\n    max_diff = 0\n    for number in numbers[1:]:\n        diff = number - prev\n        if diff > max_diff:\n            max_diff = diff\n        prev = number\n\n    return max_diff\n\n\ndef get_max_diff_6(numbers: List[int]) -> int:\n    numbers.sort()\n\n    max_diff = 0\n    prev = numbers[0]\n    for number in numbers[1:]:\n        diff = number - prev\n        if diff > max_diff:"
    },
    {
      "rank": 95,
      "score": 1.0,
      "candidate": "from typing import List\n\n\ndef max_difference(arr: List[int]) -> int:\n    \"\"\"\n    Time Complexity: O(nlogn)\n    Space Complexity: O(1)\n    \"\"\"\n    arr.sort()\n\n    return max(\n        arr[i + 1] - arr[i]\n        for i in range(len(arr) - 1)\n    )\n\n\nif __name__ == \"__main__\":\n    assert max_difference([1, 5, 10, 12, 14]) == 5"
    },
    {
      "rank": 96,
      "score": 1.0,
      "candidate": "from itertools import combinations\n\n\ndef max_diff(nums):\n    max_diff = 0\n    for a, b in combinations(nums, 2):\n        diff = abs(a - b)\n        if diff > max_diff:\n            max_diff = diff\n    return max_diff\n\n\ndef test_max_diff():\n    assert max_diff((1, 5, 4, 8, 9, 10)) == 7\n    assert max_diff((1, 2, 5, 3)) == 4\n    assert max_diff((1, 2, 3)) == 2\n    assert max_diff((1, 2)) == 1\n    assert max_diff((1,)) == 0\n\n\nif __name__ == \"__main__\":\n    test_max_diff()"
    },
    {
      "rank": 97,
      "score": 1.0,
      "candidate": "from typing import List\n\n\ndef max_difference(arr: List[int]) -> int:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(1)\n    \"\"\"\n    max_diff = 0\n\n    for i in range(len(arr) - 1):\n        diff = abs(arr[i] - arr[i + 1])\n        if diff > max_diff:\n            max_diff = diff\n\n    return max_diff\n\n\nif __name__ == \"__main__\":\n    assert max_difference([1, 4, 3, 6, 9, 7, 10, 2, 5, 8]) == 7"
    },
    {
      "rank": 98,
      "score": 1.0,
      "candidate": "from collections import deque\nfrom typing import List, Tuple\n\n\ndef max_difference(tuples: List[Tuple[int, int]]) -> int:\n    \"\"\"Find maximum difference between available pairs.\n\n    Args:\n        tuples (List[Tuple[int, int]]): list of tuples\n\n    Examples:\n        >>> assert max_difference([(1, 2), (2, 3), (3, 4)]) == 1\n        >>> assert max_difference([(1, 2), (1, 3), (1, 4)]) == 2\n        >>> assert max_difference([(1, 2), (2, 3), (3, 4), (4, 5)]) == 2\n    \"\"\"\n    tuples.sort(key=lambda x: x[0])\n    queue = deque(tuples)\n    max_diff = 0\n    prev_end = 0\n\n    while queue:\n        start, end = queue.popleft()\n        if start > prev_end:\n            max_diff = max(max_diff, end - start)\n            prev_end = end\n\n    return max_diff\n\n\nif __name__ == \"__main__\":\n    print(max_difference([(1, 2), (2, 3), (3, 4)]))\n    print(max_difference([(1, 2), (1, 3), (1, 4)]))\n    print(max_difference([(1, 2), (2, 3), (3, 4), (4, 5)]))"
    },
    {
      "rank": 99,
      "score": 1.0,
      "candidate": "from itertools import combinations\nfrom typing import List, Tuple\n\n\ndef max_difference(nums: List[int]) -> int:\n    \"\"\"Returns maximum difference between available pairs in a given tuple list.\n\n    Args:\n        nums (List[int]): list of integers\n\n    Examples:\n        >>> assert max_difference([1, 5, 3, 4, 7]) == 4\n    \"\"\"\n    return max(\n        max(a) - min(a) for a in combinations(sorted(nums), 2)\n    )\n\n\ndef max_difference_opt(nums: List[int]) -> int:\n    \"\"\"Returns maximum difference between available pairs in a given tuple list.\n\n    Args:\n        nums (List[int]): list of integers\n\n    Examples:\n        >>> assert max_difference_opt([1, 5, 3, 4, 7]) == 4\n    \"\"\"\n    left = 0\n    right = len(nums) - 1\n    maximum = 0\n    while left < right:\n        diff = nums[right] - nums[left]\n        maximum = max(diff, maximum)\n        if diff < 0:\n            left += 1\n        elif diff > 0:\n            right -= 1\n        else:\n            left += 1\n            right -= 1\n    return maximum\n\n\ndef main():\n    \"\"\"Main function.\"\"\"\n    nums = [1, 5, 3, 4, 7]\n    assert max_difference(nums) == 4\n    assert max_difference_opt(nums) == 4\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 100,
      "score": 1.0,
      "candidate": "from itertools import permutations\nfrom typing import List\n\n\ndef max_difference(arr: List[int]) -> int:\n    \"\"\"Return maximum difference between available pairs in given tuple list.\n\n    Args:\n        arr (List[int]): given tuple list\n\n    Examples:\n        >>> assert max_difference([1, 5, 6, 10, 2]) == 9\n        >>> assert max_difference([1, 2, 3, 4, 100]) == 99\n        >>> assert max_difference([1, 2, 3, 4, 5]) == 4\n    \"\"\"\n    return max(\n        abs(a - b)\n        for a, b in permutations(arr, 2)\n    )\n\n\nif __name__ == '__main__':\n    print(max_difference([1, 5, 6, 10, 2]))\n    print(max_difference([1, 2, 3, 4, 100]))\n    print(max_difference([1, 2, 3, 4, 5]))"
    }
  ]
}