{
  "timestamp": "2025-09-15T00:26:57.547798",
  "method": "improved_llm_judge",
  "judge_model": "codellama/CodeLlama-7b-Python-hf",
  "target_model": "codellama-7b",
  "dataset": "mbpp",
  "problem_number": 284,
  "total_candidates": 100,
  "results": [
    {
      "rank": 1,
      "score": 10.0,
      "candidate": "def sum_of_divisors(n):\n    \"\"\"\n    >>> sum_of_divisors(12)\n    28\n    >>> sum_of_divisors(42)\n    120\n    \"\"\"\n    if n < 0:\n        raise ValueError(\"n must be positive\")\n    sum = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            sum += i\n    return sum\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 2,
      "score": 10.0,
      "candidate": "def divisors_sum(number):\n    \"\"\"\n    Return the sum of all divisors of a number.\n\n    >>> divisors_sum(10)\n    21\n    >>> divisors_sum(20)\n    28\n    >>> divisors_sum(15)\n    22\n    >>> divisors_sum(25)\n    50\n    >>> divisors_sum(30)\n    62\n    >>> divisors_sum(1)\n    1\n    >>> divisors_sum(4)\n    6\n    >>> divisors_sum(5)\n    7\n    >>> divisors_sum(7)\n    12\n    >>> divisors_sum(8)\n    13\n    >>> divisors_sum(9)\n    14\n    >>> divisors_sum(100)\n    204\n    >>> divisors_sum(12)\n    13\n    >>> divisors_sum(13)\n    14\n    >>> divisors_sum(14)\n    15\n    >>> divisors_sum(16)\n    17\n    >>> divisors_sum(17)\n    18\n    >>> divisors_sum(18)\n    19\n    >>> divisors_sum(19)\n    20\n    >>> divisors_sum(21)\n    22\n    >>> divisors_sum(22)\n    23\n    >>> divisors_sum(23)\n    24\n    >>> divisors_sum(24)\n    25\n    >>> divisors_sum(26)\n    27\n    >>> divisors_sum(27)\n    28\n    \"\"\"\n    result = 1\n    for i in range(2, number):\n        if number % i == 0:\n            result += i\n            result += number // i\n    return result\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 3,
      "score": 10.0,
      "candidate": "def sum_divisors(num):\n    \"\"\"\n    Return the sum of all divisors of a number.\n\n    >>> sum_divisors(25)\n    50\n    >>> sum_divisors(12)\n    12\n    >>> sum_divisors(4)\n    4\n    >>> sum_divisors(1)\n    1\n    \"\"\"\n    sum = 0\n    for i in range(1, num):\n        if num % i == 0:\n            sum += i\n    return sum\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 4,
      "score": 10.0,
      "candidate": "def sum_of_divisors(n: int) -> int:\n    \"\"\"\n    >>> sum_of_divisors(256)\n    1060\n    \"\"\"\n    divisors = [1]\n\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            divisors.extend([i, n // i])\n\n    return sum(divisors)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 5,
      "score": 10.0,
      "candidate": "def sum_of_divisors(number):\n    if number == 0:\n        return 0\n    total = 0\n    for i in range(1, number):\n        if number % i == 0:\n            total += i\n    return total\n\n\nprint(sum_of_divisors(36))"
    },
    {
      "rank": 6,
      "score": 10.0,
      "candidate": "def sum_of_divisors(number):\n    \"\"\"\n    >>> sum_of_divisors(0)\n    0\n    >>> sum_of_divisors(1)\n    1\n    >>> sum_of_divisors(2)\n    3\n    >>> sum_of_divisors(3)\n    6\n    >>> sum_of_divisors(4)\n    7\n    >>> sum_of_divisors(5)\n    10\n    >>> sum_of_divisors(6)\n    13\n    >>> sum_of_divisors(7)\n    16\n    >>> sum_of_divisors(8)\n    21\n    >>> sum_of_divisors(9)\n    24\n    >>> sum_of_divisors(10)\n    30\n    >>> sum_of_divisors(11)\n    33\n    >>> sum_of_divisors(12)\n    36\n    >>> sum_of_divisors(13)\n    39\n    >>> sum_of_divisors(14)\n    46\n    >>> sum_of_divisors(15)\n    51\n    >>> sum_of_divisors(16)\n    57\n    \"\"\"\n    return sum(\n        divisor\n        for divisor in range(1, number // 2 + 1)\n        if number % divisor == 0\n    )\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 7,
      "score": 10.0,
      "candidate": "from math import sqrt\n\n\ndef sum_of_divisors(n: int) -> int:\n    \"\"\"\n    This function takes a number and returns the sum of all divisors of that number.\n\n    >>> sum_of_divisors(6)\n    12\n    >>> sum_of_divisors(12)\n    18\n    >>> sum_of_divisors(10)\n    18\n    >>> sum_of_divisors(13)\n    13\n    >>> sum_of_divisors(17)\n    17\n    >>> sum_of_divisors(21)\n    45\n    \"\"\"\n    sum = 0\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    for i in range(1, int(sqrt(n)) + 1):\n        if n % i == 0:\n            sum += i\n            if i != n // i:\n                sum += n // i\n    return sum\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 8,
      "score": 10.0,
      "candidate": "from math import sqrt\n\ndef sum_divisors(n):\n    \"\"\"Return the sum of all divisors of n.\n\n    >>> sum_divisors(0)\n    0\n    >>> sum_divisors(3)  # 1, 3\n    4\n    >>> sum_divisors(6)  # 1, 2, 3, 6\n    7\n    >>> sum_divisors(12) # 1, 2, 3, 4, 6, 12\n    28\n    >>> sum_divisors(24) # 1, 2, 3, 4, 6, 8, 12, 24\n    81\n    >>> sum_divisors(99)\n    250\n    >>> sum_divisors(100)\n    250\n    >>> sum_divisors(101)\n    250\n    >>> sum_divisors(111)\n    262\n    >>> from construct_check import check\n    >>> # The following tests use random integer n.\n    >>> check(6, sum_divisors, lambda x: x < 1000)\n    True\n    >>> check(7, sum_divisors, lambda x: x < 10000)\n    True\n    >>> check(37, sum_divisors, lambda x: x < 100000)\n    True\n    \"\"\"\n\n    def is_divisor(a, b):\n        return a % b == 0\n\n    sum = 0\n    for i in range(1, int(sqrt(n) + 1)):\n        if is_divisor(n, i):\n            if is_divisor(n, i):\n                sum += i\n            if i * i != n and is_divisor(n, n // i):\n                sum += n // i\n    return sum + 1\n\n\ndef sum_divisors_v2(n):\n    \"\"\"Return the sum of all divisors of n.\n\n    >>> sum_divisors(0)\n    0\n    >>> sum_"
    },
    {
      "rank": 9,
      "score": 10.0,
      "candidate": "def sum_of_divisors(number):\n    divisors = []\n    for i in range(1, number):\n        if number % i == 0:\n            divisors.append(i)\n    return sum(divisors)\n\n\nif __name__ == \"__main__\":\n    print(sum_of_divisors(100))"
    },
    {
      "rank": 10,
      "score": 10.0,
      "candidate": "def sum_divisors(num):\n    sum = 0\n    for i in range(1, num):\n        if num % i == 0:\n            sum += i\n    return sum\n\n\nprint(sum_divisors(36))"
    },
    {
      "rank": 11,
      "score": 10.0,
      "candidate": "def sum_divisors(n):\n    \"\"\"\n    >>> sum_divisors(10)\n    21\n    >>> sum_divisors(12)\n    27\n    >>> sum_divisors(13)\n    13\n    >>> sum_divisors(15)\n    28\n    \"\"\"\n    sum_div = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            sum_div += i\n    return sum_div\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 12,
      "score": 10.0,
      "candidate": "def sum_of_divisors(n: int) -> int:\n    \"\"\"\n    >>> sum_of_divisors(36)\n    72\n    >>> sum_of_divisors(37)\n    37\n    >>> sum_of_divisors(1)\n    1\n    \"\"\"\n    sum_div = 0\n\n    for i in range(1, n + 1):\n        if n % i == 0:\n            sum_div += i\n\n    return sum_div\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 13,
      "score": 10.0,
      "candidate": "def sum_of_divisors(n):\n    divisors = []\n    for i in range(1, n + 1):\n        if n % i == 0:\n            divisors.append(i)\n    return sum(divisors)\n\n\nprint(sum_of_divisors(20))"
    },
    {
      "rank": 14,
      "score": 10.0,
      "candidate": "def divisors_sum(n):\n    return sum([i for i in range(1, n + 1) if n % i == 0])\n\n\nprint(divisors_sum(6))\nprint(divisors_sum(28))\nprint(divisors_sum(15))"
    },
    {
      "rank": 15,
      "score": 10.0,
      "candidate": "def divisors(n):\n    \"\"\"\n    >>> divisors(256)\n    166\n    >>> divisors(36)\n    12\n    >>> divisors(12)\n    6\n    >>> divisors(24)\n    6\n    >>> divisors(48)\n    12\n    >>> divisors(27)\n    9\n    \"\"\"\n    sum = 0\n\n    # adding 1 to n as range goes till n-1\n    for i in range(1, n + 1):\n        if n % i == 0:\n            sum += i\n\n    return sum\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 16,
      "score": 10.0,
      "candidate": "def sum_of_divisors(n: int) -> int:\n    \"\"\"\n    >>> sum_of_divisors(20)\n    80\n    >>> sum_of_divisors(21)\n    28\n    \"\"\"\n    sum_of_div = 0\n\n    for i in range(1, n + 1):\n        if n % i == 0:\n            sum_of_div += i\n\n    return sum_of_div\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 17,
      "score": 10.0,
      "candidate": "def sum_of_divisors(n):\n    \"\"\"\n    :param n: int - a number to sum the divisors of\n    :return: int - the sum of all divisors of the number\n\n    >>> sum_of_divisors(1)\n    1\n\n    >>> sum_of_divisors(42)\n    144\n\n    >>> sum_of_divisors(28)\n    152\n\n    >>> sum_of_divisors(20)\n    120\n    \"\"\"\n    # your code here\n    sum = 0\n    for i in range(1, n):\n        if n % i == 0:\n            sum += i\n    return sum + n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 18,
      "score": 10.0,
      "candidate": "def sum_of_divisors(n):\n    \"\"\"\n    Return the sum of all divisors of n.\n\n    >>> sum_of_divisors(20)\n    25\n    >>> sum_of_divisors(12)\n    16\n    >>> sum_of_divisors(1)\n    1\n    \"\"\"\n    divisors = []\n    for i in range(1, n + 1):\n        if n % i == 0:\n            divisors.append(i)\n\n    return sum(divisors)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 19,
      "score": 10.0,
      "candidate": "def sum_of_divisors(n):\n    if n < 0:\n        return 0\n    divisors = []\n    for i in range(1, n + 1):\n        if n % i == 0:\n            divisors.append(i)\n    return sum(divisors)\n\nprint(sum_of_divisors(100))\nprint(sum_of_divisors(-100))"
    },
    {
      "rank": 20,
      "score": 10.0,
      "candidate": "def sum_divisors(num: int) -> int:\n    \"\"\"\n    >>> sum_divisors(100)\n    250\n    >>> sum_divisors(12)\n    12\n    >>> sum_divisors(15)\n    0\n    \"\"\"\n    sum_div = 0\n    for i in range(1, num):\n        if num % i == 0:\n            sum_div += i\n    return sum_div\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 21,
      "score": 10.0,
      "candidate": "def sum_divisors(number):\n    \"\"\"\n    >>> sum_divisors(2)\n    2\n    >>> sum_divisors(3)\n    3\n    >>> sum_divisors(1)\n    1\n    >>> sum_divisors(36)\n    78\n    >>> sum_divisors(45)\n    90\n    >>> sum_divisors(102)\n    210\n    >>> sum_divisors(0)\n    Traceback (most recent call last):\n        ...\n    ValueError: Number must be greater than 0\n    >>> sum_divisors(-17)\n    Traceback (most recent call last):\n        ...\n    ValueError: Number must be greater than 0\n    >>> sum_divisors([])\n    Traceback (most recent call last):\n        ...\n    TypeError: '<=' not supported between instances of 'int' and 'list'\n    \"\"\"\n    if number <= 0:\n        raise ValueError(\"Number must be greater than 0\")\n    return sum([i for i in range(1, number) if number % i == 0])\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 22,
      "score": 10.0,
      "candidate": "def sum_divisors(num):\n    \"\"\"Return the sum of all divisors of a number.\n\n    This function returns the sum of all divisors of a number.\n\n    Example:\n    >>> sum_divisors(6)\n    12\n    >>> sum_divisors(28)\n    56\n    >>> sum_divisors(12)\n    12\n    >>> sum_divisors(15)\n    15\n    >>> sum_divisors(37)\n    37\n    >>> sum_divisors(0)\n    Traceback (most recent call last):\n        ...\n    ValueError: Number must be greater than zero\n    \"\"\"\n    if num <= 0:\n        raise ValueError(\"Number must be greater than zero\")\n    sum = 0\n    for i in range(1, num + 1):\n        if num % i == 0:\n            sum += i\n    return sum\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 23,
      "score": 10.0,
      "candidate": "def sum_of_divisors(n):\n    \"\"\"\n    Return the sum of all divisors of n.\n    \"\"\"\n    if n <= 0:\n        return 0\n\n    sum_of_div = 0\n\n    for i in range(1, n):\n        if n % i == 0:\n            sum_of_div += i\n\n    return sum_of_div\n\nprint(sum_of_divisors(0))\nprint(sum_of_divisors(1))\nprint(sum_of_divisors(8))\nprint(sum_of_divisors(12))\nprint(sum_of_divisors(16))\nprint(sum_of_divisors(18))\nprint(sum_of_divisors(20))\nprint(sum_of_divisors(25))\nprint(sum_of_divisors(30))\nprint(sum_of_divisors(32))\nprint(sum_of_divisors(36))\nprint(sum_of_divisors(40))\nprint(sum_of_divisors(42))\nprint(sum_of_divisors(48))\nprint(sum_of_divisors(50))\nprint(sum_of_divisors(56))\nprint(sum_of_divisors(60))\nprint(sum_of_divisors(64))\nprint(sum_of_divisors(68))\nprint(sum_of_divisors(72))\nprint(sum_of_divisors(75))\nprint(sum_of_divisors(80))\nprint(sum_of_divisors(81))\nprint(sum_of_divisors(88))\nprint(sum_of_divisors(90))\nprint(sum_of_divisors(96))\nprint(sum_of_divisors(100))\nprint(sum_of_divisors(104))\nprint(sum_of_divisors(108))\nprint(sum_of_divisors("
    },
    {
      "rank": 24,
      "score": 10.0,
      "candidate": "def sum_of_divisors(num):\n    result = 0\n    for i in range(1, num):\n        if num % i == 0:\n            result += i\n    return result\n\n\nif __name__ == '__main__':\n    print(sum_of_divisors(12))"
    },
    {
      "rank": 25,
      "score": 10.0,
      "candidate": "def sum_of_divisors(n):\n    \"\"\"\n    >>> sum_of_divisors(0)\n    0\n    >>> sum_of_divisors(3) # 1\n    1\n    >>> sum_of_divisors(6) # 1+2+3\n    6\n    >>> sum_of_divisors(24) # 1+2+3+4+6+8+12\n    28\n    >>> sum_of_divisors(100) # 1+2+4+5+10+20+25+50\n    145\n    >>> sum_of_divisors(101) # 1+101\n    101\n    >>> sum_of_divisors(102) # 1+2+41+52\n    58\n    >>> sum_of_divisors(103) # 1+103\n    103\n    \"\"\"\n    total = 0\n    for i in range(1, n // 2 + 1):\n        if n % i == 0:\n            total += i\n    return total + n\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 26,
      "score": 10.0,
      "candidate": "def sum_of_divisors(number):\n    \"\"\"\n    >>> sum_of_divisors(36)\n    91\n    >>> sum_of_divisors(12)\n    16\n    >>> sum_of_divisors(13)\n    13\n    >>> sum_of_divisors(22)\n    28\n    >>> sum_of_divisors(0)\n    0\n    \"\"\"\n    sum_ = 0\n    for i in range(1, number // 2 + 1):\n        if number % i == 0:\n            sum_ += i\n    return sum_\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 27,
      "score": 9.0,
      "candidate": "def sum_of_divisors(n):\n    \"\"\"\n    >>> sum_of_divisors(6)\n    12\n    >>> sum_of_divisors(1)\n    1\n    >>> sum_of_divisors(12)\n    28\n    >>> sum_of_divisors(13)\n    13\n    \"\"\"\n    # your code here\n    sum = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            sum += i\n    return sum\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 28,
      "score": 9.0,
      "candidate": "def sum_of_divisors(n: int) -> int:\n    \"\"\"\n    Returns the sum of all divisors of a number.\n    >>> sum_of_divisors(256)\n    2520\n    >>> sum_of_divisors(12)\n    28\n    >>> sum_of_divisors(0)\n    0\n    \"\"\"\n    if n == 0:\n        return 0\n    return sum([i for i in range(1, n + 1) if n % i == 0])\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 29,
      "score": 9.0,
      "candidate": "def sum_of_divisors(num):\n    sum = 0\n    for i in range(1, num + 1):\n        if num % i == 0:\n            sum += i\n    return sum\n\nprint(sum_of_divisors(12))\nprint(sum_of_divisors(28))"
    },
    {
      "rank": 30,
      "score": 8.0,
      "candidate": "def sum_of_divisors(n):\n    \"\"\"\n    Return the sum of all divisors of a number.\n    \"\"\"\n    sum_ = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            sum_ += i\n    return sum_"
    },
    {
      "rank": 31,
      "score": 8.0,
      "candidate": "def sum_divisors(num):\n    \"\"\"\n    Time Complexity: O(sqrt(n))\n    Space Complexity: O(1)\n    \"\"\"\n    sum = 0\n    for i in range(1, int(num**0.5)+1):\n        if num % i == 0:\n            sum += i\n            if i != num // i:\n                sum += num // i\n    return sum"
    },
    {
      "rank": 32,
      "score": 8.0,
      "candidate": "def sum_of_divisors(number):\n    divisors = []\n\n    for i in range(1, number + 1):\n        if number % i == 0:\n            divisors.append(i)\n\n    return sum(divisors)\n\n\nprint(sum_of_divisors(10))\nprint(sum_of_divisors(12))\nprint(sum_of_divisors(20))\nprint(sum_of_divisors(25))"
    },
    {
      "rank": 33,
      "score": 8.0,
      "candidate": "def sum_divisors(num):\n    if num == 0:\n        return 0\n    return sum([x for x in range(1, num + 1) if num % x == 0])\n\n\nprint(sum_divisors(0))\nprint(sum_divisors(12))\nprint(sum_divisors(15))"
    },
    {
      "rank": 34,
      "score": 8.0,
      "candidate": "def sum_divisors(num):\n    sum = 0\n    for i in range(1, num):\n        if num % i == 0:\n            sum += i\n    return sum\n\n\nif __name__ == \"__main__\":\n    num = 12\n    print(sum_divisors(num))"
    },
    {
      "rank": 35,
      "score": 8.0,
      "candidate": "def sum_of_divisors(n):\n    \"\"\"Returns the sum of all divisors of n\"\"\"\n    sum = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            sum += i\n    return sum\n\n\nif __name__ == '__main__':\n    print(sum_of_divisors(100))\n    print(sum_of_divisors(20))\n    print(sum_of_divisors(101))\n    print(sum_of_divisors(25))"
    },
    {
      "rank": 36,
      "score": 8.0,
      "candidate": "def divisors(n):\n    # check for valid input\n    if n <= 0:\n        return None\n\n    # initalize the divisors sum\n    divisors_sum = 0\n\n    # loop through all the numbers from 1 to n-1\n    for i in range(1, n):\n        # if i is a divisor of n, then add it to the sum\n        if n % i == 0:\n            divisors_sum += i\n\n    # return the sum of the divisors\n    return divisors_sum\n\n\nprint(divisors(1))\nprint(divisors(12))\nprint(divisors(-1))\nprint(divisors(0))"
    },
    {
      "rank": 37,
      "score": 8.0,
      "candidate": "def divisors_sum(n):\n    # your code here\n    sum = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            sum += i\n    return sum\n\n\nif __name__ == \"__main__\":\n    print(divisors_sum(12))"
    },
    {
      "rank": 38,
      "score": 8.0,
      "candidate": "def divisors_sum(n):\n    sum = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            sum += i\n    return sum\n\nprint(divisors_sum(3))\nprint(divisors_sum(6))\nprint(divisors_sum(12))\n\n# Time complexity : O(n)\n\n# Space complexity : O(1)"
    },
    {
      "rank": 39,
      "score": 8.0,
      "candidate": "def sum_of_divisors(num):\n    \"\"\"Returns the sum of all divisors of a number.\"\"\"\n    divisors = []\n    for i in range(1, num):\n        if num % i == 0:\n            divisors.append(i)\n    return sum(divisors)\n\n\nif __name__ == '__main__':\n    print(sum_of_divisors(100))"
    },
    {
      "rank": 40,
      "score": 8.0,
      "candidate": "def divisor_sum(n):\n    return sum(d for d in range(1, n + 1) if n % d == 0)"
    },
    {
      "rank": 41,
      "score": 8.0,
      "candidate": "def sum_of_divisors(n):\n    total = 0\n    for i in range(1, n):\n        if n % i == 0:\n            total += i\n    return total\n\nprint(sum_of_divisors(24)) # Should be 10 (1 + 2 + 3 + 4 + 6 + 8 + 12)\nprint(sum_of_divisors(12)) # Should be 16 (1 + 2 + 3 + 4 + 6 + 12)\nprint(sum_of_divisors(30)) # Should be 32 (1 + 2 + 3 + 5 + 6 + 10 + 15 + 30)"
    },
    {
      "rank": 42,
      "score": 8.0,
      "candidate": "def divisors_sum(num):\n    divisors = [1]\n\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            divisors.append(i)\n            if i != num / i:\n                divisors.append(num / i)\n\n    return sum(divisors)\n\n\nprint(divisors_sum(12))\nprint(divisors_sum(28))"
    },
    {
      "rank": 43,
      "score": 8.0,
      "candidate": "def sum_divisors(num):\n    divisors = 0\n\n    for i in range(1, num + 1):\n        if num % i == 0:\n            divisors += i\n\n    return divisors\n\n\nif __name__ == \"__main__\":\n    print(sum_divisors(5))\n    print(sum_divisors(20))\n    print(sum_divisors(12))"
    },
    {
      "rank": 44,
      "score": 8.0,
      "candidate": "def sum_of_divisors(number):\n    sum = 0\n    for i in range(1, number):\n        if number % i == 0:\n            sum += i\n    return sum\n\n\nif __name__ == \"__main__\":\n    print(sum_of_divisors(100))"
    },
    {
      "rank": 45,
      "score": 8.0,
      "candidate": "def sum_of_divisors(num):\n    divisors = [1]\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            divisors.append(i)\n            if i != num // i:\n                divisors.append(num // i)\n    return sum(divisors)\n\nprint(sum_of_divisors(10))\nprint(sum_of_divisors(12))\nprint(sum_of_divisors(28))\nprint(sum_of_divisors(496))"
    },
    {
      "rank": 46,
      "score": 8.0,
      "candidate": "from math import sqrt\n\n\ndef sum_divisors(n):\n    \"\"\"\n    Return the sum of all divisors of a number.\n\n    :param n: an integer\n    :return: the sum of all divisors of n\n    \"\"\"\n    if n <= 1:\n        return n\n\n    sum = 0\n    for i in range(1, int(sqrt(n)) + 1):\n        if n % i == 0:\n            sum += i\n            if i != n // i:\n                sum += n // i\n\n    return sum"
    },
    {
      "rank": 47,
      "score": 8.0,
      "candidate": "def divisor_sum(n):\n    sum = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            sum += i\n    return sum\n\n\nprint(divisor_sum(12))"
    },
    {
      "rank": 48,
      "score": 8.0,
      "candidate": "def sum_divisors(num):\n    \"\"\"\n    Return the sum of all divisors of a number.\n\n    >>> sum_divisors(1)\n    1\n    >>> sum_divisors(2)\n    2\n    >>> sum_divisors(3)\n    3\n    >>> sum_divisors(4)\n    7\n    >>> sum_divisors(5)\n    7\n    >>> sum_divisors(6)\n    12\n    >>> sum_divisors(7)\n    12\n    >>> sum_divisors(8)\n    19\n    >>> sum_divisors(9)\n    19\n    >>> sum_divisors(10)\n    25\n    >>> sum_divisors(11)\n    25\n    >>> sum_divisors(12)\n    33\n    >>> sum_divisors(13)\n    33\n    >>> sum_divisors(14)\n    41\n    >>> sum_divisors(15)\n    41\n    >>> sum_divisors(16)\n    57\n    >>> sum_divisors(17)\n    57\n    >>> sum_divisors(18)\n    65\n    >>> sum_divisors(19)\n    65\n    >>> sum_divisors(20)\n    73\n    >>> sum_divisors(21)\n    73\n    >>> sum_divisors(22)\n    85\n    >>> sum_divisors(23)\n    85\n    >>> sum_divisors(24)\n    97\n    >>> sum_divisors(25)\n    97\n    >>> sum_divisors(26)\n    113\n    >>> sum_divisors(27)\n    113\n    >>> sum_divisors(28)\n    129\n    >>> sum_divisors(29)\n    129\n    >>> sum_divisors(30)\n    145\n    >>> sum_divisors(31)"
    },
    {
      "rank": 49,
      "score": 8.0,
      "candidate": "def sum_divisors(number):\n    \"\"\"\n    >>> sum_divisors(36)\n    72\n    >>> sum_divisors(37)\n    37\n    >>> sum_divisors(37) == sum_divisors(37)\n    True\n    >>> sum_divisors(1)\n    1\n    >>> sum_divisors(1000)\n    8268\n    >>> sum_divisors(0)\n    0\n    >>> sum_divisors(-1)\n    1\n    >>> sum_divisors(-2)\n    2\n    \"\"\"\n    if number < 1:\n        return number\n    divisors = []\n    for i in range(1, number):\n        if number % i == 0:\n            divisors.append(i)\n    return sum(divisors)\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 50,
      "score": 8.0,
      "candidate": "def divisors_sum(n):\n    \"\"\"\n    Time Complexity: O(sqrt(n))\n    Space Complexity: O(1)\n    \"\"\"\n    sum_divisors = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            sum_divisors += i\n    return sum_divisors\n\n\nif __name__ == \"__main__\":\n    print(divisors_sum(6))\n    print(divisors_sum(28))"
    },
    {
      "rank": 51,
      "score": 8.0,
      "candidate": "def sum_of_divisors(number):\n    total = 0\n    for i in range(1, number):\n        if number % i == 0:\n            total += i\n    return total\n\n\nprint(sum_of_divisors(12))\nprint(sum_of_divisors(24))\nprint(sum_of_divisors(36))\nprint(sum_of_divisors(48))"
    },
    {
      "rank": 52,
      "score": 8.0,
      "candidate": "def sum_divisors(n):\n    \"\"\"\n    Return the sum of all divisors of a number n.\n    \"\"\"\n    return sum([i for i in range(1, n+1) if n%i == 0])"
    },
    {
      "rank": 53,
      "score": 8.0,
      "candidate": "def sum_of_divisors(num):\n    \"\"\"\n    Return the sum of all divisors of num.\n    \"\"\"\n    divisors = []\n    for i in range(1, num):\n        if num % i == 0:\n            divisors.append(i)\n    return sum(divisors)"
    },
    {
      "rank": 54,
      "score": 8.0,
      "candidate": "def sum_of_divisors(n):\n    divisors = [i for i in range(1, n+1) if n % i == 0]\n    return sum(divisors)\n\n\nprint(sum_of_divisors(30))"
    },
    {
      "rank": 55,
      "score": 8.0,
      "candidate": "def divisor_sum(n):\n    return sum(x for x in range(1, n + 1) if n % x == 0)"
    },
    {
      "rank": 56,
      "score": 8.0,
      "candidate": "def sum_divisors(num):\n    sum = 0\n    for i in range(1, num):\n        if num % i == 0:\n            sum += i\n    return sum\n\n\nprint(sum_divisors(12))\nprint(sum_divisors(102))"
    },
    {
      "rank": 57,
      "score": 8.0,
      "candidate": "def sum_of_divisors(num):\n    \"\"\"\n    O(sqrt(n))\n    \"\"\"\n    sum_ = 0\n    for i in range(1, int(num ** 0.5) + 1):\n        if num % i == 0:\n            sum_ += i\n            if i != num // i:\n                sum_ += num // i\n    return sum_\n\n\ndef sum_of_divisors2(num):\n    \"\"\"\n    O(n)\n    \"\"\"\n    sum_ = 0\n    for i in range(1, num + 1):\n        if num % i == 0:\n            sum_ += i\n    return sum_\n\n\nif __name__ == \"__main__\":\n    num = 12\n    print(sum_of_divisors(num))\n    print(sum_of_divisors2(num))"
    },
    {
      "rank": 58,
      "score": 8.0,
      "candidate": "def divisors(n):\n    # Create an empty list to store the divisors\n    divisors = []\n\n    # Loop through all the numbers from 1 to n\n    for i in range(1, n + 1):\n        # Check if n is divisible by i\n        if n % i == 0:\n            # Add the divisor to the list\n            divisors.append(i)\n\n    # Return the sum of the divisors\n    return sum(divisors)\n\n\nprint(divisors(20))"
    },
    {
      "rank": 59,
      "score": 8.0,
      "candidate": "def sum_divisors(num):\n    \"\"\"Return the sum of all divisors of a number.\n\n    Time Complexity: O(sqrt(n))\n    Space Complexity: O(1)\n    \"\"\"\n    divisors = []\n\n    for i in range(1, int(num ** 0.5) + 1):\n        if num % i == 0:\n            if i * i == num:\n                divisors.append(i)\n            else:\n                divisors.extend([i, num // i])\n\n    return sum(divisors)\n\n\nif __name__ == \"__main__\":\n    print(sum_divisors(36))"
    },
    {
      "rank": 60,
      "score": 8.0,
      "candidate": "def divisors_sum(num):\n    if num <= 1:\n        return 0\n    divisors = []\n    for i in range(1, num):\n        if num % i == 0:\n            divisors.append(i)\n    return sum(divisors)\n\n\nprint(divisors_sum(12))\nprint(divisors_sum(0))\nprint(divisors_sum(1))"
    },
    {
      "rank": 61,
      "score": 8.0,
      "candidate": "from math import sqrt\n\ndef divisors(n):\n    \"\"\"\n    Calculates the sum of all divisors of n.\n    :param n: Number to calculate the sum of all divisors.\n    :return: Sum of all divisors of n.\n    \"\"\"\n    sum_divisors = 0\n    for i in range(1, int(sqrt(n)) + 1):\n        if n % i == 0:\n            if i * i == n:\n                sum_divisors += i\n            else:\n                sum_divisors += i + n // i\n    return sum_divisors\n\nprint(divisors(12))\nprint(divisors(28))\nprint(divisors(13))"
    },
    {
      "rank": 62,
      "score": 8.0,
      "candidate": "def divisors_sum(n):\n    sum_of_divisors = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            sum_of_divisors += i\n\n    return sum_of_divisors\n\n\nassert divisors_sum(0) == 0\nassert divisors_sum(3) == 3\nassert divisors_sum(6) == 12\nassert divisors_sum(12) == 24"
    },
    {
      "rank": 63,
      "score": 8.0,
      "candidate": "from math import sqrt\n\n\ndef divisors(n):\n    \"\"\"\n    Time Complexity: O(sqrt(n))\n    Space Complexity: O(1)\n    \"\"\"\n    sum = 0\n    for i in range(1, int(sqrt(n) + 1)):\n        if n % i == 0:\n            sum += i\n            if i != n // i:\n                sum += n // i\n\n    return sum\n\n\ndef divisors_2(n):\n    \"\"\"\n    Time Complexity: O(sqrt(n))\n    Space Complexity: O(1)\n    \"\"\"\n    sum = 0\n    for i in range(1, int(sqrt(n) + 1)):\n        if n % i == 0:\n            sum += i\n\n    return sum * 2\n\n\nif __name__ == \"__main__\":\n    print(divisors(12))\n    print(divisors_2(12))"
    },
    {
      "rank": 64,
      "score": 8.0,
      "candidate": "def sum_divisors(num):\n    # Your code here\n    divisors = []\n    for i in range(1, num + 1):\n        if num % i == 0:\n            divisors.append(i)\n    return sum(divisors)\n\nprint(sum_divisors(6))\nprint(sum_divisors(12))\nprint(sum_divisors(20))"
    },
    {
      "rank": 65,
      "score": 8.0,
      "candidate": "def sum_divisors(n):\n    \"\"\"\n    :param n: int - a number to sum the divisors of\n    :return: int - the sum of all divisors of the number\n\n    This function returns the sum of all divisors of a number.\n    \"\"\"\n    sum = 0\n\n    for i in range(1, n + 1):\n        if n % i == 0:\n            sum += i\n\n    return sum\n\n\nif __name__ == '__main__':\n    print(sum_divisors(36))"
    },
    {
      "rank": 66,
      "score": 8.0,
      "candidate": "def sum_divisors(n):\n    if n < 0:\n        return \"No divisors for negative numbers\"\n    if n == 0:\n        return \"No divisors for zero\"\n    elif n == 1:\n        return 1\n    else:\n        sum_div = 0\n        for i in range(1, n):\n            if n % i == 0:\n                sum_div += i\n        return sum_div\n\nprint(sum_divisors(10))\nprint(sum_divisors(0))\nprint(sum_divisors(1))\nprint(sum_divisors(-1))"
    },
    {
      "rank": 67,
      "score": 8.0,
      "candidate": "def sum_of_divisors(n):\n    \"\"\"\n    Return the sum of all divisors of a number.\n\n    >>> sum_of_divisors(6)\n    12\n    >>> sum_of_divisors(12)\n    28\n    >>> sum_of_divisors(15)\n    30\n    >>> sum_of_divisors(0)\n    0\n    >>> sum_of_divisors(-1)\n    0\n    \"\"\"\n    if n <= 0:\n        return 0\n    return sum(i for i in range(1, n + 1) if n % i == 0)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 68,
      "score": 8.0,
      "candidate": "def sum_of_divisors(n: int) -> int:\n    \"\"\"\n    Time Complexity: O(sqrt(n))\n    \"\"\"\n    sum = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            sum += i\n    return sum\n\n\nif __name__ == \"__main__\":\n    assert sum_of_divisors(0) == 0\n    assert sum_of_divisors(1) == 1\n    assert sum_of_divisors(4) == 7\n    assert sum_of_divisors(5) == 10"
    },
    {
      "rank": 69,
      "score": 8.0,
      "candidate": "def sum_divisors(num):\n    divisors = []\n\n    for i in range(1, num):\n        if num % i == 0:\n            divisors.append(i)\n\n    return sum(divisors)\n\n\nif __name__ == '__main__':\n    print(sum_divisors(12))"
    },
    {
      "rank": 70,
      "score": 8.0,
      "candidate": "def sum_of_divisors(number):\n    total = 0\n    for i in range(1, number):\n        if number % i == 0:\n            total += i\n    return total\n\n\nprint(sum_of_divisors(0))\nprint(sum_of_divisors(3)) # Should be 2\nprint(sum_of_divisors(36)) # Should be 120\nprint(sum_of_divisors(102)) # Should be 114"
    },
    {
      "rank": 71,
      "score": 8.0,
      "candidate": "def sum_divisors(n):\n    sum = 0\n    for i in range(1, n+1):\n        if n%i==0:\n            sum+=i\n    return sum\n\nif __name__ == '__main__':\n    print(sum_divisors(34))"
    },
    {
      "rank": 72,
      "score": 8.0,
      "candidate": "def sum_of_divisors(number):\n    sum = 0\n    for i in range(1, number):\n        if number % i == 0:\n            sum += i\n    return sum\n\nprint(sum_of_divisors(6)) # 9\nprint(sum_of_divisors(28)) # 162"
    },
    {
      "rank": 73,
      "score": 8.0,
      "candidate": "def sum_of_divisors(num):\n    divisors = []\n    for i in range(1, num):\n        if num % i == 0:\n            divisors.append(i)\n    return sum(divisors)\n\nprint(sum_of_divisors(36))"
    },
    {
      "rank": 74,
      "score": 8.0,
      "candidate": "def sum_divisors(num):\n    sum = 0\n    for i in range(1, num + 1):\n        if num % i == 0:\n            sum += i\n    return sum\n\nprint(sum_divisors(12))\nprint(sum_divisors(15))"
    },
    {
      "rank": 75,
      "score": 8.0,
      "candidate": "def sum_divisors(n):\n    # Create a list of all the divisors of n.\n    divisors = []\n    for i in range(1, n + 1):\n        if n % i == 0:\n            divisors.append(i)\n\n    # Return the sum of the divisors.\n    return sum(divisors)\n\n\nprint(sum_divisors(225))\nprint(sum_divisors(12))\nprint(sum_divisors(0))"
    },
    {
      "rank": 76,
      "score": 8.0,
      "candidate": "def sum_divisors(number):\n    \"\"\"\n    return the sum of all divisors of a number.\n    \"\"\"\n    divisors = []\n    for i in range(1, number):\n        if number % i == 0:\n            divisors.append(i)\n    return sum(divisors)\n\n\ndef main():\n    assert sum_divisors(36) == 9, \"Test 1\"\n    assert sum_divisors(12) == 9, \"Test 2\"\n    assert sum_divisors(15) == 9, \"Test 3\"\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 77,
      "score": 8.0,
      "candidate": "def sum_divisors(n):\n    \"\"\"\n    Time Complexity: O(sqrt(n))\n    Space Complexity: O(1)\n    \"\"\"\n    sum_div = 0\n    for i in range(1, int(n ** 0.5) + 1):\n        if n % i == 0:\n            sum_div += i\n            if i != n // i:\n                sum_div += n // i\n    return sum_div"
    },
    {
      "rank": 78,
      "score": 8.0,
      "candidate": "def sum_divisors(num):\n    sum = 0\n    for i in range(1, num):\n        if num % i == 0:\n            sum += i\n    return sum\n\n\nprint(sum_divisors(12))"
    },
    {
      "rank": 79,
      "score": 8.0,
      "candidate": "def sum_divisors(num):\n    # initialize a list of divisors\n    divisors = []\n    # loop over all numbers between 1 and the input number\n    for i in range(1, num+1):\n        # check if the input number is divisible by i\n        if num % i == 0:\n            # append i to the list of divisors\n            divisors.append(i)\n    # return the sum of the divisors\n    return sum(divisors)\n\nprint(sum_divisors(225))\nprint(sum_divisors(102))"
    },
    {
      "rank": 80,
      "score": 8.0,
      "candidate": "def sum_divisors(n):\n    divisors = []\n    for i in range(1, n):\n        if n % i == 0:\n            divisors.append(i)\n    return sum(divisors)\n\n\nprint(sum_divisors(12))\nprint(sum_divisors(30))"
    },
    {
      "rank": 81,
      "score": 8.0,
      "candidate": "def sum_divisors(num):\n    divisors = []\n    for i in range(1, num):\n        if num % i == 0:\n            divisors.append(i)\n    return sum(divisors)"
    },
    {
      "rank": 82,
      "score": 1.0,
      "candidate": "def divisors_sum(n):\n    divisors = []\n    for i in range(1, int(n**0.5)+1):\n        if n % i == 0:\n            divisors.append(i)\n            if n/i != i:\n                divisors.append(n//i)\n    return sum(divisors)\n\n\nprint(divisors_sum(12))\nprint(divisors_sum(28))\nprint(divisors_sum(25))"
    },
    {
      "rank": 83,
      "score": 1.0,
      "candidate": "def sum_divisors(n):\n    divisors = []\n    i = 1\n    while i*i <= n:\n        if n % i == 0:\n            divisors.append(i)\n            if i*i != n:\n                divisors.append(n//i)\n        i += 1\n    return sum(divisors)\n\n\nprint(sum_divisors(0))\nprint(sum_divisors(1))\nprint(sum_divisors(3))  # 6\nprint(sum_divisors(27))  # 22\nprint(sum_divisors(16))  # 22\nprint(sum_divisors(45))  # 90"
    },
    {
      "rank": 84,
      "score": 1.0,
      "candidate": "def sum_of_divisors(n):\n    \"\"\"Return the sum of all divisors of n.\n\n    >>> sum_of_divisors(0)\n    0\n    >>> sum_of_divisors(3)  # 1, 3\n    4\n    >>> sum_of_divisors(6)  # 1, 2, 3, 6\n    16\n    >>> sum_of_divisors(12) # 1, 2, 3, 4, 6, 12\n    28\n    >>> sum_of_divisors(24) # 1, 2, 3, 4, 6, 8, 12, 24\n    60\n    >>> from construct_check import check\n    >>> # ban iteration\n    >>> check(HINT, 'sum_of_divisors',\n    ...       ['For', 'While', 'Break', 'Continue'])\n    True\n    \"\"\"\n    # Your code here\n    pass\n\ndef sum_of_divisors_alt(n):\n    \"\"\"Return the sum of all divisors of n.\n\n    >>> sum_of_divisors(0)\n    0\n    >>> sum_of_divisors(3)  # 1, 3\n    4\n    >>> sum_of_divisors(6)  # 1, 2, 3, 6\n    16\n    >>> sum_of_divisors(12) # 1, 2, 3, 4, 6, 12\n    28\n    >>> sum_of_divisors(24) # 1, 2, 3, 4, 6, 8, 12, 24\n    60\n    >>> from construct_check import check\n    >>> # ban iteration\n    >>> check(HINT, 'sum_of_divisors_alt',\n    ...       ['For', 'While', 'Break', 'Continue'])\n    True\n    \"\"\"\n    # Your code here\n    pass"
    },
    {
      "rank": 85,
      "score": 1.0,
      "candidate": "def sum_divisors(num):\n    divisors = []\n\n    for i in range(1, num):\n        if num % i == 0:\n            divisors.append(i)\n\n    return sum(divisors)\n\n\ndef test_divisor_sum():\n    assert sum_divisors(0) == 0\n    assert sum_divisors(3) == 0\n    assert sum_divisors(4) == 6\n    assert sum_divisors(6) == 12\n    assert sum_divisors(8) == 12\n    assert sum_divisors(9) == 18\n    assert sum_divisors(10) == 18\n    assert sum_divisors(12) == 24\n    assert sum_divisors(15) == 45"
    },
    {
      "rank": 86,
      "score": 1.0,
      "candidate": "def sum_divisors(n):\n    sum = 0\n    for i in range(1, n):\n        if n % i == 0:\n            sum += i\n    return sum\n\n\ndef test_function(test_case):\n    if sum_divisors(test_case) == test_case:\n        print(\"Pass\")\n    else:\n        print(\"Fail\")\n\ntest_function(36)\ntest_function(24)\ntest_function(16)\ntest_function(10)\ntest_function(4)\ntest_function(1)"
    },
    {
      "rank": 87,
      "score": 1.0,
      "candidate": "def sum_of_divisors(n):\n    \"\"\"\n    :param n: int - a number\n    :return: int - sum of all divisors of the number\n    \"\"\"\n    # Your code here\n    sum = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            sum += i\n\n    return sum\n\n\nif __name__ == '__main__':\n    print(\"Example:\")\n    print(sum_of_divisors(0))\n\n    # These \"asserts\" are used for self-checking and not for an auto-testing\n    assert sum_of_divisors(0) == 0\n    assert sum_of_divisors(3) == 3\n    assert sum_of_divisors(6) == 12\n    assert sum_of_divisors(12) == 24\n    print(\"Coding complete? Click 'Check' to earn cool rewards!\")"
    },
    {
      "rank": 88,
      "score": 1.0,
      "candidate": "def sum_of_divisors(num: int) -> int:\n    \"\"\"\n    :param num: Number to get divisors of.\n    :return: Sum of divisors of num.\n    >>> sum_of_divisors(24)\n    60\n    >>> sum_of_divisors(12)\n    28\n    >>> sum_of_divisors(10)\n    20\n    >>> sum_of_divisors(16)\n    32\n    >>> sum_of_divisors(17)\n    17\n    >>> sum_of_divisors(0)\n    0\n    >>> sum_of_divisors(-1)\n    0\n    >>> sum_of_divisors(-10)\n    0\n    >>> sum_of_divisors(-24)\n    0\n    >>> sum_of_divisors(-12)\n    0\n    \"\"\"\n    # base case\n    if num <= 0:\n        return 0\n\n    # sum of divisors\n    sum_of_div = 0\n\n    # loop through all divisors\n    for i in range(1, num + 1):\n        # check if divisor is valid\n        if num % i == 0:\n            sum_of_div += i\n\n    return sum_of_div\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 89,
      "score": 1.0,
      "candidate": "def sum_of_divisors(n):\n    \"\"\"\n    Return the sum of all divisors of n.\n    \"\"\"\n    sum_of_divisors = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            sum_of_divisors += i\n    return sum_of_divisors\n\n\ndef test_function(test_case):\n    n = test_case[0]\n    solution = test_case[1]\n    output = sum_of_divisors(n)\n    if output == solution:\n        print(\"Pass\")\n    else:\n        print(\"Fail\")\n\ntest_function([1, 1])\ntest_function([21, 21])\ntest_function([49, 160])\ntest_function([55, 165])\ntest_function([27, 78])\ntest_function([28, 98])\ntest_function([34, 98])\ntest_function([50, 150])"
    },
    {
      "rank": 90,
      "score": 1.0,
      "candidate": "def divisor_sum(n):\n    return sum([i for i in range(1, n) if n % i == 0])\n\n\ndef test_divisor_sum():\n    \"\"\"\n    >>> divisor_sum(220)\n    284\n    >>> divisor_sum(25)\n    55\n    >>> divisor_sum(24)\n    28\n    >>> divisor_sum(23)\n    28\n    >>> divisor_sum(1)\n    1\n    \"\"\"\n    pass\n\n\nif __name__ == '__main__':\n    test_divisor_sum()"
    },
    {
      "rank": 91,
      "score": 1.0,
      "candidate": "def sum_divisors(num):\n    \"\"\"\n    O(sqrt(N))\n    \"\"\"\n    if num <= 0:\n        return 0\n\n    divisors = []\n    for i in range(1, int(num ** 0.5) + 1):\n        if num % i == 0:\n            divisors.append(i)\n            if i != num // i:\n                divisors.append(num // i)\n\n    return sum(divisors)\n\n\ndef sum_divisors_v2(num):\n    \"\"\"\n    O(sqrt(N))\n    \"\"\"\n    if num <= 0:\n        return 0\n\n    divisors = set()\n    for i in range(1, int(num ** 0.5) + 1):\n        if num % i == 0:\n            divisors.add(i)\n            if i != num // i:\n                divisors.add(num // i)\n\n    return sum(divisors)\n\n\nif __name__ == \"__main__\":\n    print(sum_divisors(12))\n    print(sum_divisors(0))\n    print(sum_divisors(1))\n    print(sum_divisors(3))\n    print(sum_divisors(6))\n    print(sum_divisors(9))\n    print(sum_divisors(12))\n    print(sum_divisors(15))\n    print(sum_divisors(36))\n    print(sum_divisors(45))\n    print(sum_divisors(75))\n    print(sum_divisors(81))\n    print(sum_divisors(101))"
    },
    {
      "rank": 92,
      "score": 1.0,
      "candidate": "def sum_of_divisors(num):\n    # return the sum of all divisors of a number\n    total = 0\n    for i in range(1, num + 1):\n        if num % i == 0:\n            total += i\n    return total\n\n\ndef test_function(test_case):\n    test_input, test_expected = test_case\n    test_actual = sum_of_divisors(test_input)\n    if test_actual == test_expected:\n        print(\"Pass\")\n    else:\n        print(\"Fail\")\n\n\ntest_function((12, 1+2+3+4+6+12))\ntest_function((4, 1+2+4))\ntest_function((100, 1+2+4+5+8+10+20+25+40+50+100))"
    },
    {
      "rank": 93,
      "score": 1.0,
      "candidate": "def sum_divisors(n):\n    sum_ = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            sum_ += i\n    return sum_\n\n\ndef test_function(test_case):\n    n = test_case[0]\n    solution = test_case[1]\n    output = sum_divisors(n)\n    if output == solution:\n        print(\"Pass\")\n    else:\n        print(\"Fail\")\n\nn = 23\nsolution = 26\ntest_case = [n, solution]\ntest_function(test_case)\n\nn = 12\nsolution = 3\ntest_case = [n, solution]\ntest_function(test_case)\n\nn = 38\nsolution = 88\ntest_case = [n, solution]\ntest_function(test_case)\n\nn = 2\nsolution = 3\ntest_case = [n, solution]\ntest_function(test_case)\n\nn = 120\nsolution = 628\ntest_case = [n, solution]\ntest_function(test_case)"
    },
    {
      "rank": 94,
      "score": 1.0,
      "candidate": "def sum_divisors(number):\n    sum = 0\n    for i in range(1, number):\n        if number % i == 0:\n            sum += i\n    return sum\n\n\nif __name__ == '__main__':\n    print(sum_divisors(12))\n    print(sum_divisors(0))\n    print(sum_divisors(3))  # Should be 3\n    print(sum_divisors(36))  # Should be 6+9+12+18"
    },
    {
      "rank": 95,
      "score": 1.0,
      "candidate": "def divisors_sum(number):\n    \"\"\"\n    Returns the sum of all divisors of a number.\n    \"\"\"\n    divisors_sum = 0\n    for i in range(1, number + 1):\n        if number % i == 0:\n            divisors_sum += i\n    return divisors_sum\n\ndef test_divisors_sum():\n    \"\"\"\n    >>> test_divisors_sum()\n    \"\"\"\n    assert divisors_sum(1) == 1\n    assert divisors_sum(2) == 3\n    assert divisors_sum(3) == 6\n    assert divisors_sum(4) == 10\n    assert divisors_sum(5) == 12\n    assert divisors_sum(6) == 15\n    assert divisors_sum(7) == 21\n    assert divisors_sum(8) == 28\n    assert divisors_sum(9) == 33\n    assert divisors_sum(10) == 36\n    assert divisors_sum(11) == 42\n    assert divisors_sum(12) == 48\n    assert divisors_sum(13) == 55\n    assert divisors_sum(14) == 60\n    assert divisors_sum(15) == 66\n    assert divisors_sum(16) == 72\n    assert divisors_sum(17) == 78\n    assert divisors_sum(18) == 84\n    assert divisors_sum(19) == 90\n    assert divisors_sum(20) == 96"
    },
    {
      "rank": 96,
      "score": 1.0,
      "candidate": "def sum_divisors(num):\n    \"\"\"\n    :param: num - number to sum divisors of\n    return: sum of all divisors of num\n    \"\"\"\n    if num <= 0:\n        return None\n\n    total = 0\n    for i in range(1, num):\n        if num % i == 0:\n            total += i\n    return total\n\ndef test_cases():\n    \"\"\"\n    Write test cases for sum_divisors.\n    \"\"\"\n    assert sum_divisors(0) == None\n    assert sum_divisors(3) == 6\n    assert sum_divisors(4) == 10\n    assert sum_divisors(6) == 12\n    assert sum_divisors(15) == 30\n    print(\"Test Success!\")\n\ntest_cases()"
    },
    {
      "rank": 97,
      "score": 1.0,
      "candidate": "def sum_divisors(num: int) -> int:\n    \"\"\"Sums all divisors of a number.\n\n    Examples:\n        >>> assert sum_divisors(3) == 1\n        >>> assert sum_divisors(6) == 6\n        >>> assert sum_divisors(12) == 12\n        >>> assert sum_divisors(0) == 0\n        >>> assert sum_divisors(1) == 1\n\n    References:\n        https://www.geeksforgeeks.org/divisor-sum-of-n-using-bitmasking/\n\n    Args:\n        num: the number to sum divisors for\n\n    Returns:\n        the sum of all divisors\n    \"\"\"\n    sum_divisors = 0\n    for i in range(1, num):\n        if num % i == 0:\n            sum_divisors += i\n    return sum_divisors\n\n\nif __name__ == \"__main__\":\n    print(sum_divisors(12))"
    },
    {
      "rank": 98,
      "score": 1.0,
      "candidate": "def sum_of_divisors(n):\n    # sum = 0\n    # for i in range(1, n):\n    #     if n % i == 0:\n    #         sum += i\n    # return sum\n    # sum = 0\n    # for i in range(1, n):\n    #     if n % i == 0:\n    #         sum += i\n    # return sum\n    # sum = 0\n    # for i in range(1, n):\n    #     if n % i == 0:\n    #         sum += i\n    # return sum\n    # sum = 0\n    # for i in range(1, n):\n    #     if n % i == 0:\n    #         sum += i\n    # return sum\n    sum = 0\n    for i in range(1, n):\n        if n % i == 0:\n            sum += i\n    return sum\n\n\nif __name__ == '__main__':\n    print(sum_of_divisors(12))"
    },
    {
      "rank": 99,
      "score": 1.0,
      "candidate": "def sum_divisors(n):\n    \"\"\"\n    Return the sum of all divisors of n\n    \"\"\"\n    sum_div = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            sum_div += i\n    return sum_div\n\n\ndef test_case(k, expected, test_func):\n\n    output = test_func(k)\n    if output == expected:\n        print(\"Passed\")\n    else:\n        print(f\"Failed, expected {expected}, got {output}\")\n\n\ntest_case(0, 0, sum_divisors)\ntest_case(3, 1, sum_divisors)\ntest_case(6, 12, sum_divisors)\ntest_case(10, 30, sum_divisors)\ntest_case(15, 75, sum_divisors)"
    },
    {
      "rank": 100,
      "score": 1.0,
      "candidate": "def divisors_sum(num):\n    \"\"\"\n    :param: num - number to find the sum of its divisors\n    return: sum of all divisors of num\n    \"\"\"\n    if num <= 0:\n        return \"Invalid number, please enter a positive number\"\n    divisors = []\n    for i in range(1, num + 1):\n        if num % i == 0:\n            divisors.append(i)\n    return sum(divisors)\n\n\ndef test_cases():\n    \"\"\"\n    Sample test cases\n    \"\"\"\n    assert divisors_sum(0) == \"Invalid number, please enter a positive number\"\n    assert divisors_sum(6) == 12\n    assert divisors_sum(12) == 17\n    print(\"Test Success!\")\n\ntest_cases()"
    }
  ]
}