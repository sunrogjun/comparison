{
  "timestamp": "2025-09-15T00:43:25.122327",
  "method": "improved_llm_judge",
  "judge_model": "codellama/CodeLlama-7b-Python-hf",
  "target_model": "codellama-7b",
  "dataset": "mbpp",
  "problem_number": 320,
  "total_candidates": 100,
  "results": [
    {
      "rank": 1,
      "score": 10.0,
      "candidate": "def count_unset_bits(number: int) -> int:\n    \"\"\"\n    >>> count_unset_bits(10)\n    6\n    >>> count_unset_bits(4)\n    2\n    >>> count_unset_bits(1)\n    0\n    \"\"\"\n    count = 0\n    while number:\n        count += number & 1\n        number >>= 1\n    return count\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 2,
      "score": 10.0,
      "candidate": "def count_unset_bits(num: int) -> int:\n    \"\"\"\n    Time Complexity: O(1)\n    Space Complexity: O(1)\n    \"\"\"\n    count: int = 0\n\n    while num:\n        count += num & 1\n        num >>= 1\n    return count\n\n\nif __name__ == \"__main__\":\n    assert count_unset_bits(0) == 0\n    assert count_unset_bits(1) == 1\n    assert count_unset_bits(2) == 1\n    assert count_unset_bits(3) == 2\n    assert count_unset_bits(4) == 1\n    assert count_unset_bits(12) == 4\n    assert count_unset_bits(100) == 6\n    assert count_unset_bits(1000) == 9"
    },
    {
      "rank": 3,
      "score": 10.0,
      "candidate": "def count_unset_bits(n):\n    count = 0\n    for i in range(32):\n        if not n & (1 << i):\n            count += 1\n    return count\n\n\ndef main():\n    n = int(input(\"Enter an integer: \"))\n    print(\"Number of unset bits: %d\" % count_unset_bits(n))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 4,
      "score": 10.0,
      "candidate": "def count_unset_bits(number: int) -> int:\n    \"\"\"\n    Time Complexity: O(log n)\n    Space Complexity: O(1)\n    \"\"\"\n    count = 0\n    while number != 0:\n        count += number & 1\n        number >>= 1\n    return count\n\n\nif __name__ == \"__main__\":\n    assert count_unset_bits(10) == 6"
    },
    {
      "rank": 5,
      "score": 10.0,
      "candidate": "def count_unset_bits(num: int) -> int:\n    \"\"\"\n    Time Complexity: O(1)\n    \"\"\"\n    res = 0\n    while num:\n        res += num & 1\n        num >>= 1\n    return res\n\n\nif __name__ == \"__main__\":\n    print(count_unset_bits(10))\n    print(count_unset_bits(23))\n    print(count_unset_bits(255))\n    print(count_unset_bits(1000))"
    },
    {
      "rank": 6,
      "score": 10.0,
      "candidate": "def count_unset_bits(number: int) -> int:\n    \"\"\"\n    >>> count_unset_bits(12)\n    2\n    >>> count_unset_bits(14)\n    2\n    >>> count_unset_bits(15)\n    1\n    >>> count_unset_bits(2)\n    1\n    \"\"\"\n    count = 0\n    while number:\n        count += number & 1\n        number >>= 1\n    return count\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 7,
      "score": 10.0,
      "candidate": "def unset_bits_counter(number: int) -> int:\n    \"\"\"\n    Return the count of unset bits in a given number.\n    >>> unset_bits_counter(0)\n    0\n    >>> unset_bits_counter(1)\n    0\n    >>> unset_bits_counter(2)\n    1\n    >>> unset_bits_counter(3)\n    1\n    >>> unset_bits_counter(4)\n    1\n    >>> unset_bits_counter(5)\n    2\n    >>> unset_bits_counter(6)\n    2\n    >>> unset_bits_counter(7)\n    2\n    >>> unset_bits_counter(8)\n    1\n    >>> unset_bits_counter(9)\n    2\n    >>> unset_bits_counter(10)\n    2\n    >>> unset_bits_counter(11)\n    3\n    >>> unset_bits_counter(12)\n    2\n    >>> unset_bits_counter(13)\n    3\n    >>> unset_bits_counter(14)\n    2\n    >>> unset_bits_counter(15)\n    4\n    >>> unset_bits_counter(16)\n    1\n    >>> unset_bits_counter(17)\n    3\n    >>> unset_bits_counter(18)\n    2\n    >>> unset_bits_counter(19)\n    3\n    >>> unset_bits_counter(20)\n    2\n    >>> unset_bits_counter(21)\n    3\n    >>> unset_bits_counter(22)\n    3\n    >>> unset_bits_counter(23)\n    4\n    >>> unset_bits_counter(24)\n    1\n    >>> unset_bits_counter(25)\n    3\n    >>> unset_bits_counter(26)\n    2\n    >>> unset_bits_counter(27)\n    3\n    >>> unset_bits_counter(28)\n    4\n    >>> unset_bits_counter(29)\n    3\n    >>> unset_bits_"
    },
    {
      "rank": 8,
      "score": 10.0,
      "candidate": "def count_unset_bits(num: int) -> int:\n    \"\"\"\n    Return the number of unset bits in the number.\n    >>> count_unset_bits(10)\n    2\n    >>> count_unset_bits(-1)\n    0\n    >>> count_unset_bits(0)\n    0\n    \"\"\"\n    if num < 0:\n        return 0\n    count = 0\n    while num:\n        count += num & 1\n        num >>= 1\n    return count\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 9,
      "score": 10.0,
      "candidate": "def count_unset_bits(number: int) -> int:\n    \"\"\"\n    :param number: the number to count the unset bits\n    :return: the number of unset bits\n    >>> count_unset_bits(12)\n    2\n    >>> count_unset_bits(1)\n    30\n    >>> count_unset_bits(0)\n    32\n    \"\"\"\n    return 32 - bin(number).count(\"1\")\n\n\ndef count_unset_bits_with_index(number: int) -> int:\n    \"\"\"\n    :param number: the number to count the unset bits\n    :return: the number of unset bits\n    >>> count_unset_bits_with_index(12)\n    [(1, 1), (2, 1), (3, 1)]\n    >>> count_unset_bits_with_index(1)\n    [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1), (6, 1), (7, 1)]\n    >>> count_unset_bits_with_index(0)\n    [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1), (6, 1), (7, 1)]\n    \"\"\"\n    result = []\n    for i in range(32):\n        if (number >> i) & 1 == 0:\n            result.append((i, 1))\n    return result\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 10,
      "score": 10.0,
      "candidate": "def count_unset_bits(num):\n    count = 0\n\n    while num:\n        count += num & 1\n        num >>= 1\n\n    return count\n\n\ndef main():\n    num = 12\n    assert count_unset_bits(num) == 2\n\n    print(\"All test cases passed. YAY!\")\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 11,
      "score": 10.0,
      "candidate": "def unset_bits(num: int) -> int:\n    \"\"\"\n    >>> unset_bits(10)\n    6\n    \"\"\"\n    return bin(num).count(\"0\")\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 12,
      "score": 10.0,
      "candidate": "def count_unset_bits(number: int) -> int:\n    \"\"\"\n    >>> count_unset_bits(25)\n    6\n    >>> count_unset_bits(7)\n    6\n    >>> count_unset_bits(15)\n    4\n    \"\"\"\n    if number == 0:\n        return 0\n    unset_bits = 0\n    while number > 0:\n        if number & 1 == 0:\n            unset_bits += 1\n        number >>= 1\n    return unset_bits\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 13,
      "score": 10.0,
      "candidate": "def count_unset_bits(num: int) -> int:\n    \"\"\"\n    time complexity: O(logn)\n    space complexity: O(1)\n    \"\"\"\n    count: int = 0\n\n    while num:\n        count += num & 1\n        num >>= 1\n\n    return count\n\n\ndef test():\n    cases = [\n        (0, 0),\n        (1, 1),\n        (2, 1),\n        (3, 2),\n        (4, 1),\n        (5, 2),\n        (6, 2),\n        (7, 3),\n        (8, 1),\n        (9, 2),\n        (10, 2),\n        (11, 3),\n        (12, 2),\n        (13, 3),\n        (14, 3),\n        (15, 4),\n        (16, 1),\n        (17, 2),\n        (18, 2),\n        (19, 3),\n        (20, 2),\n        (21, 3),\n        (22, 3),\n        (23, 4),\n        (24, 1),\n        (25, 2),\n        (26, 2),\n        (27, 3),\n        (28, 2),\n        (29, 3),\n        (30, 3),\n        (31, 4),\n        (32, 1),\n        (33, 2),\n        (34, 2),\n        (35, 3),\n        (36, 2),\n        (37, 3),\n        (38, 3),\n        (39, 4),\n        (40, 1),\n        (41, 2),\n        (42, 2),\n        (43, 3),\n        (44, 2),\n        (45, 3),\n        (46, 3),\n        (47, 4),\n        ("
    },
    {
      "rank": 14,
      "score": 10.0,
      "candidate": "def count_unset_bits(number: int) -> int:\n    \"\"\"\n    >>> count_unset_bits(10)\n    5\n    >>> count_unset_bits(-1)\n    0\n    >>> count_unset_bits(0)\n    32\n    \"\"\"\n    count = 0\n    while number:\n        count += number & 1\n        number >>= 1\n\n    return count\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 15,
      "score": 10.0,
      "candidate": "def count_unset_bits(n):\n    count = 0\n\n    while n:\n        if n & 1:\n            count += 1\n        n >>= 1\n\n    return count\n\n\ndef main():\n    n = int(input(\"Enter a number: \"))\n    print(\"No of unset bits: \", count_unset_bits(n))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 16,
      "score": 10.0,
      "candidate": "def count_unset_bits(n: int) -> int:\n    \"\"\"\n    Time Complexity: O(log(n))\n    Space Complexity: O(1)\n    \"\"\"\n    count = 0\n    while n:\n        n &= n - 1\n        count += 1\n    return count\n\n\nif __name__ == \"__main__\":\n    print(count_unset_bits(10))"
    },
    {
      "rank": 17,
      "score": 10.0,
      "candidate": "def unset_bits_counter(num: int) -> int:\n    \"\"\"\n    Return the number of unset bits in the number.\n    >>> unset_bits_counter(10)\n    6\n    >>> unset_bits_counter(12)\n    4\n    >>> unset_bits_counter(1234)\n    1\n    >>> unset_bits_counter(12345)\n    2\n    \"\"\"\n    return bin(num).count(\"0\")\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 18,
      "score": 9.0,
      "candidate": "def count_unset_bits(n):\n    count = 0\n    while n != 0:\n        count += 1\n        n &= n - 1\n    return count\n\n\nif __name__ == \"__main__\":\n    print(count_unset_bits(10))"
    },
    {
      "rank": 19,
      "score": 9.0,
      "candidate": "def unset_bits_count(n):\n    # Your code goes here\n    count = 0\n    while n:\n        if n & 1 == 0:\n            count += 1\n        n >>= 1\n    return count\n\n\ndef main():\n    n = int(input(\"Enter a number: \"))\n    print(unset_bits_count(n))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 20,
      "score": 9.0,
      "candidate": "def count_unset_bits(n):\n    count = 0\n    while n:\n        count += 1\n        n &= n - 1\n    return count\n\ndef count_unset_bits2(n):\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count\n\nif __name__ == '__main__':\n    input_number = int(input(\"Enter the number : \"))\n    print(f\"Number of unset bits in {input_number} are {count_unset_bits(input_number)}\")\n    print(f\"Number of unset bits in {input_number} are {count_unset_bits2(input_number)}\")"
    },
    {
      "rank": 21,
      "score": 9.0,
      "candidate": "def count_unset_bits(n):\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count\n\n\ndef main():\n    n = 11\n    assert count_unset_bits(n) == 5\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 22,
      "score": 8.0,
      "candidate": "def count_unset_bits(n):\n    count = 0\n    while n != 0:\n        if n & 1 == 0:\n            count += 1\n        n = n >> 1\n    return count\n\n\ndef main():\n    n = int(input(\"Enter a number: \"))\n    count_unset_bits(n)\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 23,
      "score": 8.0,
      "candidate": "def count_unset_bits(n):\n    count = 0\n    while n != 0:\n        if n & 1 == 0:\n            count += 1\n        n = n >> 1\n    return count\n\n\nprint(count_unset_bits(10))"
    },
    {
      "rank": 24,
      "score": 8.0,
      "candidate": "def count_unset_bits(n):\n    count = 0\n    while n > 0:\n        if n & 1 == 0:\n            count += 1\n        n >>= 1\n    return count\n\n\nprint(count_unset_bits(25))"
    },
    {
      "rank": 25,
      "score": 8.0,
      "candidate": "def count_unset_bits(number):\n    count = 0\n    while number:\n        count += number & 1\n        number >>= 1\n    return count\n\ndef main():\n    number = int(input(\"Enter a number: \"))\n    print(\"Count of unset bits of number is: \", count_unset_bits(number))\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 26,
      "score": 8.0,
      "candidate": "def count_unset_bits(n):\n    count = 0\n    while n > 0:\n        count += 1\n        n = n & (n - 1)\n    return count\n\n\nif __name__ == \"__main__\":\n    num = int(input(\"Enter a number: \"))\n    print(\"Unset bits in {} are: {}\".format(num, count_unset_bits(num)))"
    },
    {
      "rank": 27,
      "score": 8.0,
      "candidate": "def count_unset_bits(num):\n    count = 0\n    while num:\n        count += 1\n        num &= num - 1\n    return count\n\n\ndef main():\n    num = int(input(\"Enter a number: \"))\n    result = count_unset_bits(num)\n    print(\"Number of unset bits: \", result)\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 28,
      "score": 8.0,
      "candidate": "def count_unset_bits(num: int) -> int:\n    \"\"\"\n    Time Complexity: O(log n)\n    Space Complexity: O(1)\n    \"\"\"\n    count = 0\n    while num:\n        if num & 1 == 0:\n            count += 1\n        num >>= 1\n    return count\n\n\nif __name__ == \"__main__\":\n    print(count_unset_bits(14))"
    },
    {
      "rank": 29,
      "score": 8.0,
      "candidate": "def count_unset_bits(number):\n    count = 0\n    while number:\n        count += number & 1\n        number >>= 1\n    return count\n\n\ndef main():\n    number = int(input(\"Enter a number: \"))\n    result = count_unset_bits(number)\n    print(result)\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 30,
      "score": 8.0,
      "candidate": "def count_unset_bits(number):\n    count = 0\n    while number:\n        count += number & 1\n        number >>= 1\n    return count\n\nif __name__ == \"__main__\":\n    number = int(input(\"Enter a number: \"))\n    print(\"Number of unset bits: {}\".format(count_unset_bits(number)))"
    },
    {
      "rank": 31,
      "score": 8.0,
      "candidate": "def count_unset_bits(n):\n    count = 0\n    while n:\n        count += 1\n        n &= n - 1\n    return count\n\n\nprint(count_unset_bits(20))\nprint(count_unset_bits(25))"
    },
    {
      "rank": 32,
      "score": 8.0,
      "candidate": "def unset_bits(n):\n    return bin(n).count(\"0\")\n\nif __name__ == \"__main__\":\n    print(unset_bits(11))"
    },
    {
      "rank": 33,
      "score": 8.0,
      "candidate": "def count_unset_bits(num):\n    count = 0\n    while num:\n        count += num & 1\n        num >>= 1\n    return count\n\n\ndef main():\n    num = 10\n    print(count_unset_bits(num))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 34,
      "score": 8.0,
      "candidate": "def count_unset_bits(n):\n    count = 0\n    while n > 0:\n        if n & 1 == 0:\n            count += 1\n        n >>= 1\n    return count\n\nn = int(input())\nprint(count_unset_bits(n))"
    },
    {
      "rank": 35,
      "score": 8.0,
      "candidate": "def count_unset_bits(n):\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count\n\n\nif __name__ == \"__main__\":\n    print(count_unset_bits(12))"
    },
    {
      "rank": 36,
      "score": 8.0,
      "candidate": "def count_unset_bits(number):\n    # Code here\n    count = 0\n    while number:\n        if number & 1 == 0:\n            count += 1\n        number >>= 1\n    return count\n\n\nprint(count_unset_bits(10))"
    },
    {
      "rank": 37,
      "score": 8.0,
      "candidate": "def count_unset_bits(number):\n    count = 0\n    while number:\n        count += number & 1\n        number >>= 1\n    return count\n\ndef test_count_unset_bits():\n    assert count_unset_bits(12) == 4\n    assert count_unset_bits(7) == 3\n    assert count_unset_bits(23) == 4\n    assert count_unset_bits(1) == 0\n    assert count_unset_bits(15) == 4\n    assert count_unset_bits(255) == 7\n    assert count_unset_bits(256) == 9\n    assert count_unset_bits(32) == 5\n    assert count_unset_bits(128) == 8\n    assert count_unset_bits(257) == 4\n\nif __name__ == '__main__':\n    test_count_unset_bits()"
    },
    {
      "rank": 38,
      "score": 8.0,
      "candidate": "def unset_bits(num):\n    count = 0\n    while num:\n        if not num & 1:\n            count += 1\n        num >>= 1\n    return count\n\n\nif __name__ == \"__main__\":\n    input_num = int(input(\"Enter a number: \"))\n    print(\"Number of unset bits:\", unset_bits(input_num))"
    },
    {
      "rank": 39,
      "score": 8.0,
      "candidate": "def count_unset_bits(number):\n    # check if number is negative\n    if number < 0:\n        number = number & 0xFFFFFFFF  # remove sign\n\n    # count the unset bits\n    count = 0\n    while number:\n        count += number & 1\n        number >>= 1\n\n    return count\n\n\nprint(count_unset_bits(-6))"
    },
    {
      "rank": 40,
      "score": 8.0,
      "candidate": "def count_unset_bits(number):\n    count = 0\n    while number:\n        if not number & 1:\n            count += 1\n        number >>= 1\n    return count\n\nif __name__ == \"__main__\":\n    number = int(input(\"Enter a number: \"))\n    print(\"No. of unset bits in {} is {}\".format(number, count_unset_bits(number)))"
    },
    {
      "rank": 41,
      "score": 8.0,
      "candidate": "def count_unset_bits(n):\n    count = 0\n    while n:\n        if n & 1 == 0:\n            count += 1\n        n >>= 1\n    return count\n\nprint(count_unset_bits(5))"
    },
    {
      "rank": 42,
      "score": 8.0,
      "candidate": "def count_unset_bits(n):\n    count = 0\n    while n != 0:\n        count += 1\n        n = n & (n - 1)\n    return count\n\n\nprint(count_unset_bits(12))\nprint(count_unset_bits(11))\nprint(count_unset_bits(13))"
    },
    {
      "rank": 43,
      "score": 8.0,
      "candidate": "def unset_bits(n):\n    count = 0\n    for i in range(32):\n        if (n & (1 << i)):\n            count += 1\n    return count\n\n\ndef main():\n    n = 10\n    print(unset_bits(n))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 44,
      "score": 8.0,
      "candidate": "def count_unset_bits(number):\n    counter = 0\n    while number:\n        counter += number & 1\n        number >>= 1\n    return counter\n\n\ndef main():\n    number = 10\n    result = count_unset_bits(number)\n    print(result)\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 45,
      "score": 8.0,
      "candidate": "def count_unset_bits(number):\n    count = 0\n    while number > 0:\n        count += number & 1\n        number >>= 1\n    return count\n\n\nprint(count_unset_bits(11))"
    },
    {
      "rank": 46,
      "score": 8.0,
      "candidate": "def count_unset_bits(number):\n    count = 0\n    while number:\n        count += number & 1\n        number >>= 1\n    return count\n\n\ndef main():\n    number = int(input(\"Enter a number: \"))\n    print(f\"Number of unset bits: {count_unset_bits(number)}\")\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 47,
      "score": 8.0,
      "candidate": "def count_unset_bits(n):\n    count = 0\n    while n != 0:\n        count += 1\n        n &= (n - 1)\n    return count\n\n\ndef main():\n    n = int(input(\"Enter a number: \"))\n    print(f\"Number of unset bits: {count_unset_bits(n)}\")\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 48,
      "score": 8.0,
      "candidate": "def count_unset_bits(number: int) -> int:\n    \"\"\"\n    Time Complexity: O(1)\n    Space Complexity: O(1)\n    \"\"\"\n    count = 0\n    while number:\n        count += 1\n        number &= number - 1\n    return count\n\n\nif __name__ == \"__main__\":\n    assert count_unset_bits(10) == 2\n    assert count_unset_bits(15) == 3\n    assert count_unset_bits(1) == 0"
    },
    {
      "rank": 49,
      "score": 8.0,
      "candidate": "def unset_bits(n):\n    counter = 0\n    while n:\n        n &= n - 1\n        counter += 1\n    return counter\n\nprint(unset_bits(10))"
    },
    {
      "rank": 50,
      "score": 8.0,
      "candidate": "def count_unset_bits(n):\n    count = 0\n    while n:\n        count += (n & 1)\n        n >>= 1\n    return count\n\n\nprint(count_unset_bits(11))"
    },
    {
      "rank": 51,
      "score": 8.0,
      "candidate": "def unset_bits(n):\n    # your code goes here\n    return bin(n).count('1')\n\n\nif __name__ == '__main__':\n    print(unset_bits(123))"
    },
    {
      "rank": 52,
      "score": 8.0,
      "candidate": "def count_unset_bits(n):\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count\n\n\ndef main():\n    n = int(input(\"Enter a number: \"))\n    print(f\"Unset bits of {n} are: {count_unset_bits(n)}\")\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 53,
      "score": 8.0,
      "candidate": "def unset_bit_counter(number):\n    \"\"\"\n    Count unset bits of a given number\n    :param number:\n    :return:\n    \"\"\"\n    count = 0\n    while number != 0:\n        if number & 1 == 0:\n            count += 1\n        number >>= 1\n\n    return count\n\n\nprint(unset_bit_counter(21))\nprint(unset_bit_counter(13))\nprint(unset_bit_counter(17))"
    },
    {
      "rank": 54,
      "score": 8.0,
      "candidate": "def count_unset_bits(n):\n    count = 0\n    while n:\n        count += 1\n        n &= n - 1\n    return count\n\n\nif __name__ == \"__main__\":\n    n = int(input(\"Enter a number: \"))\n    print(f\"Number of unset bits: {count_unset_bits(n)}\")"
    },
    {
      "rank": 55,
      "score": 8.0,
      "candidate": "def count_unset_bits(number: int) -> int:\n    \"\"\"\n    Time Complexity: O(1)\n    Space Complexity: O(1)\n    \"\"\"\n    count = 0\n    while number:\n        count += number & 1\n        number >>= 1\n    return count\n\n\nif __name__ == \"__main__\":\n    print(count_unset_bits(4))"
    },
    {
      "rank": 56,
      "score": 8.0,
      "candidate": "def unset_bits_counter(num):\n    \"\"\"\n    Return number of unset bits\n    \"\"\"\n    count = 0\n    while num != 0:\n        count += 1\n        num &= num - 1\n    return count\n\nprint(unset_bits_counter(10))\nprint(unset_bits_counter(11))\nprint(unset_bits_counter(12))"
    },
    {
      "rank": 57,
      "score": 8.0,
      "candidate": "def count_unset_bits(n: int) -> int:\n    \"\"\"\n    Time Complexity: O(log(n))\n    Space Complexity: O(1)\n    \"\"\"\n    count = 0\n\n    while n:\n        count += n & 1\n        n >>= 1\n\n    return count\n\n\nif __name__ == \"__main__\":\n    print(count_unset_bits(12))"
    },
    {
      "rank": 58,
      "score": 8.0,
      "candidate": "def count_unset_bits(n: int) -> int:\n    \"\"\"\n    Time Complexity: O(1)\n    Space Complexity: O(1)\n    \"\"\"\n    unset_bits = 0\n\n    while n:\n        if n & 1:\n            unset_bits += 1\n        n >>= 1\n\n    return unset_bits\n\n\nif __name__ == \"__main__\":\n    print(count_unset_bits(10))"
    },
    {
      "rank": 59,
      "score": 8.0,
      "candidate": "def unset_bits(num):\n    count = 0\n    while num:\n        count += num & 1\n        num >>= 1\n    return count\n\n\ndef main():\n    num = int(input(\"Enter a number: \"))\n    print(f\"Number of unset bits: {unset_bits(num)}\")\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 60,
      "score": 8.0,
      "candidate": "def count_unset_bits(n):\n    count = 0\n    for i in range(32):\n        if (n >> i) % 2 == 0:\n            count += 1\n    return count\n\n\ndef main():\n    n = int(input(\"Enter a number: \"))\n    print(\"No. of unset bits: \", count_unset_bits(n))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 61,
      "score": 8.0,
      "candidate": "def count_unset_bits(number):\n    count = 0\n    while number:\n        count += number & 1\n        number >>= 1\n    return count\n\n\nif __name__ == \"__main__\":\n    print(count_unset_bits(123456))\n    print(count_unset_bits(1))\n    print(count_unset_bits(0))"
    },
    {
      "rank": 62,
      "score": 8.0,
      "candidate": "def unset_bits(number):\n    counter = 0\n    while number != 0:\n        if number & 1 == 0:\n            counter += 1\n        number = number >> 1\n    return counter\n\nprint(unset_bits(10))"
    },
    {
      "rank": 63,
      "score": 8.0,
      "candidate": "def unset_bits_count(number):\n    count = 0\n\n    while number:\n        count += number & 1\n        number >>= 1\n\n    return count\n\n\nprint(unset_bits_count(25))\nprint(unset_bits_count(14))\nprint(unset_bits_count(27))"
    },
    {
      "rank": 64,
      "score": 8.0,
      "candidate": "def unset_bits(n: int) -> int:\n    \"\"\"\n    Time Complexity: O(1)\n    Space Complexity: O(1)\n    \"\"\"\n    count = 0\n    while n:\n        count += 1\n        n &= n - 1\n    return count\n\n\nif __name__ == \"__main__\":\n    assert unset_bits(21) == 4"
    },
    {
      "rank": 65,
      "score": 8.0,
      "candidate": "def count_unset_bits(number: int) -> int:\n    \"\"\"\n    Time Complexity: O(log(n))\n    Space Complexity: O(1)\n    \"\"\"\n    count: int = 0\n    while number:\n        count += number & 1\n        number >>= 1\n    return count\n\n\nif __name__ == \"__main__\":\n    print(count_unset_bits(4))\n    print(count_unset_bits(1))"
    },
    {
      "rank": 66,
      "score": 8.0,
      "candidate": "def unset_bits(n):\n    count = 0\n    while n:\n        count += 1\n        n &= (n - 1)\n    return count\n\n\nif __name__ == \"__main__\":\n    n = 10\n    print(f\"The number of unset bits in {n} is {unset_bits(n)}\")"
    },
    {
      "rank": 67,
      "score": 8.0,
      "candidate": "def count_unset_bits(number: int) -> int:\n    \"\"\"\n    The idea is to XOR the number with its successive powers of 2.\n    This will unset the bits which were already set.\n    Finally, count the number of bits in the original number and the number obtained after the XOR operation.\n    \"\"\"\n    count = 0\n    while number:\n        number = number ^ (number & (number - 1))\n        count += 1\n\n    return count\n\n\nif __name__ == \"__main__\":\n    print(count_unset_bits(12))"
    },
    {
      "rank": 68,
      "score": 8.0,
      "candidate": "def count_unset_bits(n):\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count\n\nprint(count_unset_bits(10))\nprint(count_unset_bits(12))"
    },
    {
      "rank": 69,
      "score": 8.0,
      "candidate": "def unset_bits(number):\n    count = 0\n    while number:\n        count += number & 1\n        number >>= 1\n    return count\n\nprint(unset_bits(123))"
    },
    {
      "rank": 70,
      "score": 8.0,
      "candidate": "def count_unset_bits(n):\n    count = 0\n    while n:\n        if not n & 1:\n            count += 1\n        n >>= 1\n    return count\n\n\nprint(count_unset_bits(12))\nprint(count_unset_bits(14))\nprint(count_unset_bits(3))\nprint(count_unset_bits(0))"
    },
    {
      "rank": 71,
      "score": 8.0,
      "candidate": "def count_unset_bits(number: int) -> int:\n    \"\"\"\n    Time Complexity: O(1)\n    Space Complexity: O(1)\n    \"\"\"\n    return bin(number).count(\"0\")\n\n\nif __name__ == \"__main__\":\n    assert count_unset_bits(10) == 6"
    },
    {
      "rank": 72,
      "score": 8.0,
      "candidate": "def count_unset_bits(number):\n    count = 0\n    while number:\n        count += number & 1\n        number >>= 1\n    return count\n\n\nprint(count_unset_bits(12))"
    },
    {
      "rank": 73,
      "score": 8.0,
      "candidate": "def unset_bits(num):\n    count = 0\n    while num:\n        if num & 1 == 0:\n            count += 1\n        num >>= 1\n    return count\n\nprint(unset_bits(7))"
    },
    {
      "rank": 74,
      "score": 8.0,
      "candidate": "def count_unset_bits(n):\n    \"\"\"\n    Time Complexity: O(1)\n    Space Complexity: O(1)\n    \"\"\"\n    counter = 0\n    while n:\n        n &= n - 1\n        counter += 1\n\n    return counter\n\nif __name__ == \"__main__\":\n    print(count_unset_bits(21))\n    print(count_unset_bits(12))\n    print(count_unset_bits(30))"
    },
    {
      "rank": 75,
      "score": 8.0,
      "candidate": "def unset_bit_counter(num):\n    count = 0\n    for i in range(1, 32):\n        if not num & 1:\n            count += 1\n        num >>= 1\n    return count\n\nif __name__ == \"__main__\":\n    print(unset_bit_counter(10))"
    },
    {
      "rank": 76,
      "score": 8.0,
      "candidate": "def unset_bits(number):\n    \"\"\"\n    Time complexity: O(1)\n    Space complexity: O(1)\n    \"\"\"\n    unset = 0\n    while number:\n        unset += number & 1\n        number >>= 1\n    return unset"
    },
    {
      "rank": 77,
      "score": 8.0,
      "candidate": "def count_unset_bits(n):\n    count = 0\n    while n:\n        count += 1\n        n &= n - 1\n    return count\n\n\ndef main():\n    n = int(input(\"Enter a number: \"))\n    print(f\"Number of unset bits: {count_unset_bits(n)}\")\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 78,
      "score": 8.0,
      "candidate": "def count_unset_bits(number):\n    count = 0\n    while number:\n        count += number & 1\n        number >>= 1\n    return count\n\n\ndef main():\n    number = int(input(\"Enter a number: \"))\n    print(count_unset_bits(number))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 79,
      "score": 8.0,
      "candidate": "def count_unset_bits(n):\n    count = 0\n    while n:\n        if n & 1:\n            count += 1\n        n >>= 1\n    return count\n\n\ndef main():\n    n = int(input(\"Enter a number: \"))\n    print(\"Unset bits:\", count_unset_bits(n))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 80,
      "score": 1.0,
      "candidate": "def count_unset_bits(num: int) -> int:\n    \"\"\"\n    Time Complexity: O(1)\n    Space Complexity: O(1)\n    \"\"\"\n\n    count = 0\n\n    while num:\n        count += num & 1\n        num >>= 1\n\n    return count\n\n\nif __name__ == \"__main__\":\n    assert count_unset_bits(0b11010) == 3\n    assert count_unset_bits(0b10101010) == 4"
    },
    {
      "rank": 81,
      "score": 1.0,
      "candidate": "def count_unset_bits(number: int) -> int:\n    \"\"\"\n    >>> count_unset_bits(12)\n    2\n    >>> count_unset_bits(7)\n    2\n    >>> count_unset_bits(128)\n    1\n    >>> count_unset_bits(16)\n    3\n    >>> count_unset_bits(32)\n    5\n    \"\"\"\n    count = 0\n    while number:\n        count += number & 1\n        number >>= 1\n    return count\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 82,
      "score": 1.0,
      "candidate": "def count_unset_bits(number: int) -> int:\n    \"\"\"\n    >>> count_unset_bits(0)\n    0\n    >>> count_unset_bits(1)\n    1\n    >>> count_unset_bits(2)\n    2\n    >>> count_unset_bits(3)\n    1\n    >>> count_unset_bits(4)\n    3\n    >>> count_unset_bits(5)\n    2\n    >>> count_unset_bits(6)\n    1\n    >>> count_unset_bits(7)\n    0\n    >>> count_unset_bits(8)\n    0\n    >>> count_unset_bits(9)\n    1\n    >>> count_unset_bits(10)\n    2\n    >>> count_unset_bits(11)\n    1\n    >>> count_unset_bits(12)\n    0\n    >>> count_unset_bits(13)\n    3\n    >>> count_unset_bits(14)\n    2\n    >>> count_unset_bits(15)\n    1\n    >>> count_unset_bits(16)\n    4\n    >>> count_unset_bits(17)\n    3\n    >>> count_unset_bits(18)\n    2\n    >>> count_unset_bits(19)\n    1\n    >>> count_unset_bits(20)\n    0\n    >>> count_unset_bits(21)\n    1\n    >>> count_unset_bits(22)\n    2\n    >>> count_unset_bits(23)\n    1\n    >>> count_unset_bits(24)\n    3\n    >>> count_unset_bits(25)\n    2\n    >>> count_unset_bits(26)\n    1\n    >>> count_unset_bits(27)\n    0\n    >>> count_unset_bits(28)\n    0\n    >>> count_unset_bits(29)\n    1\n    >>> count_unset_bits(30)\n    2\n    >>> count_un"
    },
    {
      "rank": 83,
      "score": 1.0,
      "candidate": "def count_unset_bits(num: int) -> int:\n    \"\"\"\n    >>> count_unset_bits(10)\n    6\n    >>> count_unset_bits(-10)\n    5\n    >>> count_unset_bits(0)\n    0\n    \"\"\"\n    return len(\n        [\n            i\n            for i in range(32)\n            if (num >> i) & 1 == 0\n        ]\n    )\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 84,
      "score": 1.0,
      "candidate": "def unset_bits_count(num):\n    return bin(num).count('0')\n\n\"\"\"\nWrite a python function to count set bits of a given number.\n\"\"\"\ndef set_bits_count(num):\n    return bin(num).count('1')"
    },
    {
      "rank": 85,
      "score": 1.0,
      "candidate": "def count_unset_bits(n: int) -> int:\n    \"\"\"\n    :param n: int - Input integer\n    :return: int - count of unset bits\n\n    >>> count_unset_bits(11)\n    2\n    >>> count_unset_bits(-11)\n    31\n    >>> count_unset_bits(0)\n    32\n    >>> count_unset_bits(0.5)\n    Traceback (most recent call last):\n        ...\n    TypeError: \"<class 'float'>\" is not a supported type for this function.\n    \"\"\"\n    if not isinstance(n, int):\n        raise TypeError(f\"{n.__class__} is not a supported type for this function.\")\n\n    count = 0\n\n    while n:\n        count += n & 1\n        n >>= 1\n\n    return count\n\n\ndef test_count_unset_bits():\n    assert count_unset_bits(11) == 2\n    assert count_unset_bits(-11) == 31\n    assert count_unset_bits(0) == 32\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 86,
      "score": 1.0,
      "candidate": "def count_unset_bits(n: int) -> int:\n    \"\"\"\n    Time Complexity: O(1)\n    Space Complexity: O(1)\n    \"\"\"\n    count = 0\n    while n:\n        count += 1\n        n &= (n - 1)\n    return count\n\n\nif __name__ == \"__main__\":\n    assert count_unset_bits(10) == 6\n    assert count_unset_bits(31) == 0\n    assert count_unset_bits(15) == 4"
    },
    {
      "rank": 87,
      "score": 1.0,
      "candidate": "def unset_bits_counter(number: int) -> int:\n    \"\"\"\n    This function takes number as input and returns the number of unset bits\n    >>> unset_bits_counter(5)\n    6\n    >>> unset_bits_counter(0)\n    0\n    >>> unset_bits_counter(128)\n    8\n    >>> unset_bits_counter(45)\n    6\n    >>> unset_bits_counter(10)\n    2\n    >>> unset_bits_counter(12)\n    2\n    >>> unset_bits_counter(-1)\n    0\n    >>> unset_bits_counter(-45)\n    6\n    \"\"\"\n    return bin(number).count(\"1\")\n\n\nif __name__ == \"__main__\":\n    from doctest import testmod\n\n    testmod()"
    },
    {
      "rank": 88,
      "score": 1.0,
      "candidate": "def count_unset_bits(number: int) -> int:\n    \"\"\"\n    >>> count_unset_bits(10)\n    5\n    >>> count_unset_bits(0)\n    0\n    >>> count_unset_bits(-1)\n    0\n    >>> count_unset_bits(1)\n    31\n    >>> count_unset_bits(2)\n    30\n    >>> count_unset_bits(3)\n    29\n    \"\"\"\n    return bin(number).count(\"1\")\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 89,
      "score": 1.0,
      "candidate": "def count_unset_bits(number: int) -> int:\n    \"\"\"\n    >>> count_unset_bits(2)\n    1\n    >>> count_unset_bits(3)\n    2\n    >>> count_unset_bits(4)\n    1\n    >>> count_unset_bits(5)\n    2\n    >>> count_unset_bits(6)\n    1\n    >>> count_unset_bits(7)\n    3\n    \"\"\"\n    count = 0\n    for i in range(32):\n        if not (number >> i) & 1:\n            count += 1\n    return count\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 90,
      "score": 1.0,
      "candidate": "def count_unset_bits(number: int) -> int:\n    \"\"\"\n    Time Complexity: O(1)\n    Space Complexity: O(1)\n    \"\"\"\n    count: int = 0\n\n    while number:\n        count += number & 1\n        number >>= 1\n\n    return count\n\n\nif __name__ == \"__main__\":\n    assert count_unset_bits(0) == 0\n    assert count_unset_bits(1) == 1\n    assert count_unset_bits(5) == 3\n    assert count_unset_bits(11) == 2\n    assert count_unset_bits(3) == 2"
    },
    {
      "rank": 91,
      "score": 1.0,
      "candidate": "def unset_bits_counter(num: int) -> int:\n    \"\"\"\n    This function counts the unset bits in a given number.\n    >>> unset_bits_counter(1)\n    31\n    >>> unset_bits_counter(0)\n    0\n    >>> unset_bits_counter(4)\n    30\n    >>> unset_bits_counter(100)\n    2\n    >>> unset_bits_counter(-1)\n    31\n    >>> unset_bits_counter(0)\n    0\n    >>> unset_bits_counter(15)\n    1\n    \"\"\"\n    return bin(num).count(\"0\")\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 92,
      "score": 1.0,
      "candidate": "def unset_bits(n):\n    count = 0\n    while n:\n        count += 1\n        n &= (n - 1)\n    return count\n\n\ndef test_unset_bits():\n    assert unset_bits(10) == 2\n    assert unset_bits(100) == 6\n    assert unset_bits(0) == 0\n\n\nif __name__ == \"__main__\":\n    test_unset_bits()"
    },
    {
      "rank": 93,
      "score": 1.0,
      "candidate": "def count_unset_bits(n: int) -> int:\n    \"\"\"\n    :param n: int - int value\n    :return: int - count of unset bits\n    \"\"\"\n    count = 0\n    while n:\n        if n & 1:\n            n &= (n - 1)\n        else:\n            count += 1\n        n >>= 1\n    return count\n\n\ndef test_count_unset_bits():\n    assert count_unset_bits(12) == 4\n    assert count_unset_bits(7) == 2\n    assert count_unset_bits(1) == 30\n\n\nif __name__ == \"__main__\":\n    test_count_unset_bits()"
    },
    {
      "rank": 94,
      "score": 1.0,
      "candidate": "def unset_bits(number):\n    count = 0\n    while number:\n        count += number & 1\n        number >>= 1\n    return count\n\n\ndef unset_bits_2(number):\n    count = 0\n    while number:\n        count += 1\n        number &= number - 1\n    return count\n\n\ndef unset_bits_3(number):\n    count = 0\n    while number:\n        number &= number - 1\n        count += 1\n    return count\n\n\ndef unset_bits_4(number):\n    count = 0\n    while number:\n        number &= number - 1\n        count += 1\n    return count\n\n\ndef unset_bits_5(number):\n    count = 0\n    while number:\n        number &= number - 1\n        count += 1\n    return count\n\n\ndef unset_bits_6(number):\n    count = 0\n    while number:\n        number &= number - 1\n        count += 1\n    return count\n\n\ndef unset_bits_7(number):\n    count = 0\n    while number:\n        number &= number - 1\n        count += 1\n    return count\n\n\ndef unset_bits_8(number):\n    count = 0\n    while number:\n        number &= number - 1\n        count += 1\n    return count\n\n\ndef unset_bits_9(number):\n    count = 0\n    while number:\n        number &= number - 1\n        count += 1\n    return count\n\n\ndef unset_bits_10(number):\n    count = 0\n    while number:\n        number &= number - 1\n        count += 1\n    return count\n\n\ndef unset_bits_11(number):\n    count = 0\n    while number:\n        number &= number - 1\n        count += 1\n    return count\n\n\ndef unset_bits_12(number):\n    count = 0\n    while number:\n        number &= number - 1\n        count += 1\n    return count\n\n\ndef unset_"
    },
    {
      "rank": 95,
      "score": 1.0,
      "candidate": "def unset_bits(number: int) -> int:\n    \"\"\"\n    Return the number of unset bits in a number.\n    >>> unset_bits(10)\n    6\n    >>> unset_bits(100)\n    7\n    >>> unset_bits(1000)\n    8\n    \"\"\"\n    count = 0\n\n    while number:\n        count += number & 1\n        number >>= 1\n\n    return count\n\n\ndef unset_bits_2(number: int) -> int:\n    \"\"\"\n    Return the number of unset bits in a number.\n    >>> unset_bits(10)\n    6\n    >>> unset_bits(100)\n    7\n    >>> unset_bits(1000)\n    8\n    \"\"\"\n    return bin(number).count(\"0\")\n\n\ndef unset_bits_3(number: int) -> int:\n    \"\"\"\n    Return the number of unset bits in a number.\n    >>> unset_bits(10)\n    6\n    >>> unset_bits(100)\n    7\n    >>> unset_bits(1000)\n    8\n    \"\"\"\n    return sum(1 for i in range(32) if (number >> i) & 1 == 0)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 96,
      "score": 1.0,
      "candidate": "def unset_bits(number):\n    \"\"\"\n    Using bitwise operators, count unset bits of a given number.\n    >>> unset_bits(15)\n    1\n    >>> unset_bits(1)\n    2\n    >>> unset_bits(1024)\n    5\n    >>> unset_bits(10)\n    2\n    \"\"\"\n    count = 0\n    while number:\n        count += 1\n        number = number & (number - 1)\n    return count\n\n\ndef main():\n    \"\"\"\n    Call the main function.\n    \"\"\"\n    print(unset_bits(15))\n    print(unset_bits(1))\n    print(unset_bits(1024))\n    print(unset_bits(10))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 97,
      "score": 1.0,
      "candidate": "def count_unset_bits(number: int) -> int:\n    \"\"\"\n    O(log(n))\n    O(1)\n    \"\"\"\n    unset_bits = 0\n\n    while number != 0:\n        unset_bits += (number & 1) ^ 1\n        number >>= 1\n\n    return unset_bits\n\n\nif __name__ == \"__main__\":\n    assert count_unset_bits(1) == 31\n    assert count_unset_bits(2) == 30\n    assert count_unset_bits(3) == 30\n    assert count_unset_bits(4) == 30\n    assert count_unset_bits(5) == 29\n    assert count_unset_bits(6) == 28\n    assert count_unset_bits(7) == 28\n    assert count_unset_bits(8) == 28\n    assert count_unset_bits(9) == 27\n    assert count_unset_bits(10) == 27\n    assert count_unset_bits(11) == 27\n    assert count_unset_bits(12) == 27\n    assert count_unset_bits(13) == 26\n    assert count_unset_bits(14) == 26\n    assert count_unset_bits(15) == 26\n    assert count_unset_bits(16) == 26"
    },
    {
      "rank": 98,
      "score": 1.0,
      "candidate": "def unset_bits(number):\n    count = 0\n    while number:\n        count += number & 1\n        number >>= 1\n    return count\n\n\ndef unset_bits_2(number):\n    count = 0\n    while number:\n        number &= number - 1\n        count += 1\n    return count\n\n\ndef unset_bits_3(number):\n    count = 0\n    while number:\n        number &= number - 1\n        count += 1\n    return count\n\n\nif __name__ == \"__main__\":\n    print(unset_bits(1))\n    print(unset_bits(5))\n    print(unset_bits(10))"
    },
    {
      "rank": 99,
      "score": 1.0,
      "candidate": "def unset_bit_count(n):\n    count = 0\n    while n:\n        if n & 1 == 0:\n            count += 1\n        n >>= 1\n    return count\n\n\ndef test_unset_bit_count():\n    assert unset_bit_count(10) == 3\n    assert unset_bit_count(20) == 2\n    assert unset_bit_count(12) == 2\n\n\nif __name__ == \"__main__\":\n    test_unset_bit_count()"
    },
    {
      "rank": 100,
      "score": 1.0,
      "candidate": "def unset_bit_counter(num: int) -> int:\n    \"\"\"\n    Time Complexity: O(1)\n    Space Complexity: O(1)\n    \"\"\"\n\n    count: int = 0\n\n    while num:\n        count += num & 1\n        num >>= 1\n\n    return count\n\n\nif __name__ == \"__main__\":\n    print(unset_bit_counter(0))\n    print(unset_bit_counter(1))\n    print(unset_bit_counter(2))\n    print(unset_bit_counter(3))\n    print(unset_bit_counter(4))\n    print(unset_bit_counter(5))\n    print(unset_bit_counter(6))\n    print(unset_bit_counter(7))"
    }
  ]
}