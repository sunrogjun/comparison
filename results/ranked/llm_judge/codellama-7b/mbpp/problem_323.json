{
  "timestamp": "2025-09-15T00:44:43.512605",
  "method": "improved_llm_judge",
  "judge_model": "codellama/CodeLlama-7b-Python-hf",
  "target_model": "codellama-7b",
  "dataset": "mbpp",
  "problem_number": 323,
  "total_candidates": 100,
  "results": [
    {
      "rank": 1,
      "score": 10.0,
      "candidate": "def isTriangle(a, b, c):\n    if a + b > c and b + c > a and a + c > b:\n        print(\"This is a valid triangle.\")\n    else:\n        print(\"This is not a valid triangle.\")\n\n\nisTriangle(5, 6, 10)"
    },
    {
      "rank": 2,
      "score": 10.0,
      "candidate": "def is_valid_triangle(a, b, c):\n    return a + b > c and a + c > b and b + c > a\n\n\ndef main():\n    print(\"Is valid triangle? \" + str(is_valid_triangle(3, 4, 5)))\n    print(\"Is valid triangle? \" + str(is_valid_triangle(2, 2, 2)))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 3,
      "score": 10.0,
      "candidate": "def check_triangle(a, b, c):\n    if a + b > c and a + c > b and b + c > a:\n        return True\n    else:\n        return False\n\n\nprint(check_triangle(3, 4, 5))"
    },
    {
      "rank": 4,
      "score": 10.0,
      "candidate": "def is_valid_triangle(a, b, c):\n    if (a + b > c) and (b + c > a) and (a + c > b):\n        return True\n    else:\n        return False\n\n\na = int(input(\"Enter first side: \"))\nb = int(input(\"Enter second side: \"))\nc = int(input(\"Enter third side: \"))\nprint(is_valid_triangle(a, b, c))"
    },
    {
      "rank": 5,
      "score": 9.370583536698913,
      "candidate": "def check_triangle(a, b, c):\n    if a + b > c and a + c > b and b + c > a:\n        print(\"Yes\")\n    else:\n        print(\"No\")\n\ncheck_triangle(3, 4, 5)\ncheck_triangle(3, 4, 1)"
    },
    {
      "rank": 6,
      "score": 9.234050852198141,
      "candidate": "def check_triangle(sides):\n    if (sides[0] + sides[1]) > sides[2]:\n        if (sides[0] + sides[2]) > sides[1]:\n            if (sides[1] + sides[2]) > sides[0]:\n                return True\n    return False\n\n\nif __name__ == '__main__':\n    sides = [int(x) for x in input(\"Enter the sides of triangle: \").split()]\n    if check_triangle(sides):\n        print(\"It is a valid triangle\")\n    else:\n        print(\"It is not a valid triangle\")"
    },
    {
      "rank": 7,
      "score": 9.226766272351448,
      "candidate": "def is_valid_triangle(a, b, c):\n    if a + b > c and a + c > b and b + c > a:\n        print(\"yes\")\n    else:\n        print(\"no\")\n\n\nis_valid_triangle(5, 3, 4)"
    },
    {
      "rank": 8,
      "score": 9.21346272767743,
      "candidate": "def is_valid_triangle(side1, side2, side3):\n    if side1 + side2 <= side3:\n        return False\n    elif side1 + side3 <= side2:\n        return False\n    elif side2 + side3 <= side1:\n        return False\n    else:\n        return True\n\n\ndef main():\n    print(is_valid_triangle(10, 5, 12))\n    print(is_valid_triangle(10, 5, 1))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 9,
      "score": 9.205959372648458,
      "candidate": "def is_triangle(a, b, c):\n    if a + b <= c:\n        return False\n    elif a + c <= b:\n        return False\n    elif b + c <= a:\n        return False\n    else:\n        return True\n\n\na, b, c = [int(i) for i in input().split()]\nprint(is_triangle(a, b, c))"
    },
    {
      "rank": 10,
      "score": 9.183391466815202,
      "candidate": "def check_triangle(a, b, c):\n    if (a + b <= c) or (a + c <= b) or (b + c <= a):\n        print(\"It is not a valid triangle\")\n    else:\n        print(\"It is a valid triangle\")\n\ncheck_triangle(3, 4, 5)\ncheck_triangle(3, 4, 3)"
    },
    {
      "rank": 11,
      "score": 9.177268828905222,
      "candidate": "def is_valid_triangle(a, b, c):\n    return a + b > c and b + c > a and a + c > b\n\n\nif __name__ == \"__main__\":\n    assert is_valid_triangle(3, 4, 5) == True\n    assert is_valid_triangle(3, 4, 1) == False"
    },
    {
      "rank": 12,
      "score": 9.122564458729856,
      "candidate": "def check_triangle(sides):\n    for i in sides:\n        if i <= 0:\n            return False\n        if i >= sides[0] + sides[1] or i >= sides[0] + sides[2] or i >= sides[1] + sides[2]:\n            return False\n    return True\n\nprint(check_triangle([3, 5, 6]))\nprint(check_triangle([3, 5, 7]))\nprint(check_triangle([3, 5, 6]))\nprint(check_triangle([3, 5, 6]))"
    },
    {
      "rank": 13,
      "score": 8.973005557553902,
      "candidate": "def is_triangle(a, b, c):\n    if a + b <= c:\n        return False\n    elif a + c <= b:\n        return False\n    elif b + c <= a:\n        return False\n    else:\n        return True\n\n\nif __name__ == \"__main__\":\n    print(is_triangle(1, 2, 2))\n    print(is_triangle(3, 4, 5))\n    print(is_triangle(1, 3, 2))"
    },
    {
      "rank": 14,
      "score": 8.95994420569242,
      "candidate": "def is_valid(a,b,c):\n    if a+b>c and a+c>b and b+c>a:\n        return True\n    else:\n        return False\n\na,b,c = input(\"Enter the sides of triangle (space separated) : \").split()\na,b,c = int(a),int(b),int(c)\n\nif is_valid(a,b,c):\n    print(\"The given triangle is valid\")\nelse:\n    print(\"The given triangle is not valid\")"
    },
    {
      "rank": 15,
      "score": 8.946210893390457,
      "candidate": "def check_triangle(a, b, c):\n    return (a + b) > c and (a + c) > b and (b + c) > a\n\n\nprint(check_triangle(1, 2, 2))\nprint(check_triangle(1, 2, 3))"
    },
    {
      "rank": 16,
      "score": 8.932217008005624,
      "candidate": "def check_triangle(s1, s2, s3):\n    \"\"\"\n    :param s1: first side\n    :param s2: second side\n    :param s3: third side\n    :return: True if valid else False\n    \"\"\"\n    if s1 + s2 < s3:\n        return False\n    elif s1 + s3 < s2:\n        return False\n    elif s2 + s3 < s1:\n        return False\n    else:\n        return True\n\n\ndef main():\n    s1 = int(input(\"Enter side 1: \"))\n    s2 = int(input(\"Enter side 2: \"))\n    s3 = int(input(\"Enter side 3: \"))\n    if check_triangle(s1, s2, s3):\n        print(\"Valid\")\n    else:\n        print(\"Not valid\")\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 17,
      "score": 8.92876693971089,
      "candidate": "def is_valid_triangle(a, b, c):\n    if a + b <= c or a + c <= b or b + c <= a:\n        return False\n    return True\n\n\nprint(is_valid_triangle(5, 10, 25))\nprint(is_valid_triangle(5, 10, 12))"
    },
    {
      "rank": 18,
      "score": 8.910084504002544,
      "candidate": "def check_triangle(a, b, c):\n    return (a + b) > c and (a + c) > b and (b + c) > a\n\n\nif __name__ == \"__main__\":\n    a = int(input(\"Enter first side: \"))\n    b = int(input(\"Enter second side: \"))\n    c = int(input(\"Enter third side: \"))\n    if check_triangle(a, b, c):\n        print(\"It is a valid triangle\")\n    else:\n        print(\"It is an invalid triangle\")"
    },
    {
      "rank": 19,
      "score": 8.902145503295483,
      "candidate": "def is_valid_triangle(sides):\n    a = sides[0]\n    b = sides[1]\n    c = sides[2]\n\n    if (a + b > c) and (a + c > b) and (b + c > a):\n        return True\n    else:\n        return False\n\n\nif __name__ == '__main__':\n    sides = [1, 2, 3]\n    print(is_valid_triangle(sides))"
    },
    {
      "rank": 20,
      "score": 8.85571690049604,
      "candidate": "def isTriangle(a, b, c):\n    if a + b > c and a + c > b and b + c > a:\n        print(\"Yes\")\n    else:\n        print(\"No\")\n\n\nisTriangle(3, 4, 5)"
    },
    {
      "rank": 21,
      "score": 8.855395696632057,
      "candidate": "def check_triangle(s1, s2, s3):\n    if s1 + s2 > s3 and s1 + s3 > s2 and s2 + s3 > s1:\n        print(\"Triangle is valid\")\n    else:\n        print(\"Triangle is not valid\")\n\n\ncheck_triangle(3, 4, 5)"
    },
    {
      "rank": 22,
      "score": 8.850707355641543,
      "candidate": "def is_valid_triangle(sides):\n    if sides[0] + sides[1] <= sides[2]:\n        return False\n    elif sides[1] + sides[2] <= sides[0]:\n        return False\n    elif sides[0] + sides[2] <= sides[1]:\n        return False\n    else:\n        return True\n\nprint(is_valid_triangle([5, 4, 3]))\nprint(is_valid_triangle([4, 3, 5]))\nprint(is_valid_triangle([3, 4, 5]))\nprint(is_valid_triangle([5, 3, 4]))"
    },
    {
      "rank": 23,
      "score": 8.8281618090209,
      "candidate": "def is_valid_triangle(sides):\n    if sides[0] + sides[1] <= sides[2]:\n        return False\n    elif sides[0] + sides[2] <= sides[1]:\n        return False\n    elif sides[1] + sides[2] <= sides[0]:\n        return False\n    else:\n        return True\n\n\nif __name__ == \"__main__\":\n    print(is_valid_triangle([1, 2, 3]))"
    },
    {
      "rank": 24,
      "score": 8.81367773444215,
      "candidate": "def check_triangle(s1, s2, s3):\n    return (s1 + s2 > s3) and (s1 + s3 > s2) and (s3 + s2 > s1)\n\n\nprint(check_triangle(3, 4, 5))\nprint(check_triangle(3, 4, 6))"
    },
    {
      "rank": 25,
      "score": 8.76828871349479,
      "candidate": "def is_valid_triangle(sides):\n    if sides[0] + sides[1] > sides[2] and sides[1] + sides[2] > sides[0] and sides[0] + sides[2] > sides[1]:\n        return True\n    else:\n        return False\n\nprint(is_valid_triangle([4, 5, 3]))\nprint(is_valid_triangle([3, 4, 5]))"
    },
    {
      "rank": 26,
      "score": 8.750282588864879,
      "candidate": "def is_valid_triangle(sides):\n    if sides[0] + sides[1] > sides[2] and sides[1] + sides[2] > sides[0] and sides[0] + sides[2] > sides[1]:\n        return True\n    return False\n\n\nsides = [3, 4, 5]\nprint(is_valid_triangle(sides))"
    },
    {
      "rank": 27,
      "score": 8.715724466237427,
      "candidate": "def check_triangle(a, b, c):\n    return a+b>c and a+c>b and b+c>a\n\na, b, c = map(int, input().split())\nprint(check_triangle(a, b, c))"
    },
    {
      "rank": 28,
      "score": 8.701078161001123,
      "candidate": "def check_triangle(a, b, c):\n    if a + b > c and a + c > b and b + c > a:\n        return True\n    return False\n\n\nprint(check_triangle(3, 4, 5))\nprint(check_triangle(2, 2, 2))"
    },
    {
      "rank": 29,
      "score": 8.692801520950061,
      "candidate": "def is_valid_triangle(a, b, c):\n    if a + b <= c:\n        return False\n    elif a + c <= b:\n        return False\n    elif b + c <= a:\n        return False\n    else:\n        return True\n\n\na = int(input(\"Enter first side of triangle: \"))\nb = int(input(\"Enter second side of triangle: \"))\nc = int(input(\"Enter third side of triangle: \"))\n\nif is_valid_triangle(a, b, c):\n    print(\"Yes, it is valid\")\nelse:\n    print(\"No, it is not valid\")"
    },
    {
      "rank": 30,
      "score": 8.632293453617281,
      "candidate": "def check_triangle(a, b, c):\n    if a + b <= c or a + c <= b or b + c <= a:\n        return False\n    else:\n        return True\n\n\nprint(check_triangle(3, 4, 5))\nprint(check_triangle(4, 5, 6))"
    },
    {
      "rank": 31,
      "score": 8.625262456968262,
      "candidate": "def is_valid_triangle(a, b, c):\n    \"\"\"\n    >>> is_valid_triangle(1, 2, 2)\n    True\n    >>> is_valid_triangle(1, 2, 3)\n    False\n    \"\"\"\n    return a + b > c and a + c > b and b + c > a\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 32,
      "score": 8.625142247198651,
      "candidate": "def triangle(a,b,c):\n    return (a+b>c) and (a+c>b) and (b+c>a)\n\na = int(input())\nb = int(input())\nc = int(input())\n\nprint(triangle(a,b,c))"
    },
    {
      "rank": 33,
      "score": 8.623000730200317,
      "candidate": "def is_valid_triangle(a, b, c):\n    if a + b <= c or b + c <= a or a + c <= b:\n        return False\n    return True\n\n\ndef main():\n    a = int(input(\"Enter a: \"))\n    b = int(input(\"Enter b: \"))\n    c = int(input(\"Enter c: \"))\n    if is_valid_triangle(a, b, c):\n        print(\"It is a valid triangle\")\n    else:\n        print(\"It is not a valid triangle\")\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 34,
      "score": 8.616253589228675,
      "candidate": "def is_valid_triangle(side1, side2, side3):\n    if side1 + side2 > side3 and side2 + side3 > side1 and side1 + side3 > side2:\n        return True\n    return False\n\n\nif __name__ == '__main__':\n    print(is_valid_triangle(3, 4, 5))\n    print(is_valid_triangle(3, 4, 2))"
    },
    {
      "rank": 35,
      "score": 8.610076160146226,
      "candidate": "def is_valid_triangle(side_1, side_2, side_3):\n    return side_1 + side_2 > side_3 and side_1 + side_3 > side_2 and side_2 + side_3 > side_1\n\n\nif __name__ == '__main__':\n    is_valid = is_valid_triangle(3, 4, 5)\n    print(is_valid)"
    },
    {
      "rank": 36,
      "score": 8.608819999274287,
      "candidate": "def valid_triangle(a, b, c):\n    if a + b <= c or a + c <= b or b + c <= a:\n        return False\n    else:\n        return True\n\n\nprint(valid_triangle(3, 4, 5))\nprint(valid_triangle(1, 2, 3))"
    },
    {
      "rank": 37,
      "score": 8.606486429141842,
      "candidate": "def check_triangle(sides):\n    if sides[0] + sides[1] <= sides[2]:\n        return False\n    elif sides[0] + sides[2] <= sides[1]:\n        return False\n    elif sides[1] + sides[2] <= sides[0]:\n        return False\n    else:\n        return True\n\n\ndef main():\n    triangles = [[1, 2, 3], [4, 5, 6], [7, 8, 9], [1, 3, 2], [2, 3, 4]]\n    for triangle in triangles:\n        print(check_triangle(triangle))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 38,
      "score": 8.60156811074208,
      "candidate": "def is_valid(a, b, c):\n    return a < b + c and b < a + c and c < a + b\n\n\ndef main():\n    a = int(input(\"Enter the first side: \"))\n    b = int(input(\"Enter the second side: \"))\n    c = int(input(\"Enter the third side: \"))\n    if is_valid(a, b, c):\n        print(\"This is a valid triangle\")\n    else:\n        print(\"This is an invalid triangle\")\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 39,
      "score": 8.565425580227462,
      "candidate": "def is_triangle(a, b, c):\n    if a + b <= c or a + c <= b or b + c <= a:\n        return False\n    else:\n        return True\n\n\ndef main():\n    a = int(input(\"Enter first side: \"))\n    b = int(input(\"Enter second side: \"))\n    c = int(input(\"Enter third side: \"))\n    if is_triangle(a, b, c):\n        print(\"It is a valid triangle.\")\n    else:\n        print(\"It is not a valid triangle.\")\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 40,
      "score": 8.548876241946822,
      "candidate": "def check_triangle(sides):\n    if sides[0] + sides[1] <= sides[2]:\n        return False\n    if sides[0] + sides[2] <= sides[1]:\n        return False\n    if sides[1] + sides[2] <= sides[0]:\n        return False\n    return True\n\n\ndef main():\n    print(check_triangle([1, 2, 3]))\n    print(check_triangle([1, 2, 1]))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 41,
      "score": 8.542875062379007,
      "candidate": "def is_valid_triangle(sides):\n    return sum(sides) - max(sides) <= 2 * (sum(sides) - min(sides))\n\n\ndef main():\n    print(is_valid_triangle([1, 2, 3]))\n    print(is_valid_triangle([1, 2, 5]))\n    print(is_valid_triangle([1, 2, 1]))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 42,
      "score": 8.53012858503943,
      "candidate": "def triangle(a, b, c):\n    if a + b <= c:\n        return False\n    elif a + c <= b:\n        return False\n    elif b + c <= a:\n        return False\n    else:\n        return True\n\nprint(triangle(3, 4, 5))\nprint(triangle(3, 4, 1))\n\n\n\"\"\"\ndef triangle(a, b, c):\n    if a + b <= c:\n        return False\n    elif a + c <= b:\n        return False\n    elif b + c <= a:\n        return False\n    else:\n        return True\n\nprint(triangle(3, 4, 5))\nprint(triangle(3, 4, 1))\n\"\"\""
    },
    {
      "rank": 43,
      "score": 8.499905739299377,
      "candidate": "def is_triangle(a, b, c):\n    if a + b > c and a + c > b and b + c > a:\n        return True\n    else:\n        return False\n\n\nif __name__ == '__main__':\n    a = 10\n    b = 5\n    c = 15\n    print(is_triangle(a, b, c))"
    },
    {
      "rank": 44,
      "score": 8.492983219118464,
      "candidate": "#Solution is:\n\ndef is_triangle(sides):\n    return sides[0] + sides[1] > sides[2] and sides[0] + sides[2] > sides[1] and sides[1] + sides[2] > sides[0]"
    },
    {
      "rank": 45,
      "score": 8.490324832712195,
      "candidate": "def check_triangle(sides):\n    return (sides[0] + sides[1] > sides[2]) and (sides[0] + sides[2] > sides[1]) and (sides[1] + sides[2] > sides[0])\n\n\nsides = [1, 2, 3]\nprint(check_triangle(sides))"
    },
    {
      "rank": 46,
      "score": 8.48796797856353,
      "candidate": "def is_valid_triangle(sides):\n    if sum(sides) <= 0:\n        return False\n    if sides[0] + sides[1] <= sides[2]:\n        return False\n    if sides[1] + sides[2] <= sides[0]:\n        return False\n    if sides[0] + sides[2] <= sides[1]:\n        return False\n    return True\n\n\ndef test_is_valid_triangle():\n    assert is_valid_triangle([1, 2, 2]) is True\n    assert is_valid_triangle([1, 2, 3]) is False\n    assert is_valid_triangle([1, 2, 0]) is False\n    assert is_valid_triangle([1, 3, 2]) is False\n    assert is_valid_triangle([2, 2, 2]) is True\n    assert is_valid_triangle([2, 2, 1]) is True\n    assert is_valid_triangle([3, 2, 1]) is True\n    assert is_valid_triangle([3, 2, 2]) is False"
    },
    {
      "rank": 47,
      "score": 8.478208546788407,
      "candidate": "#Solution is:\n\ndef is_valid(a,b,c):\n    if a+b > c and a+c > b and b+c > a:\n        return True\n    else:\n        return False"
    },
    {
      "rank": 48,
      "score": 8.437695832075478,
      "candidate": "def check_triangle(a,b,c):\n    if a+b<=c or a+c<=b or b+c<=a:\n        return False\n    else:\n        return True\n\na = int(input(\"Enter first side: \"))\nb = int(input(\"Enter second side: \"))\nc = int(input(\"Enter third side: \"))\n\nif check_triangle(a,b,c):\n    print(\"It is a valid triangle\")\nelse:\n    print(\"It is not a valid triangle\")"
    },
    {
      "rank": 49,
      "score": 8.426531424889468,
      "candidate": "def is_triangle(sides):\n    if (sides[0] + sides[1]) > sides[2] and (sides[0] + sides[2]) > sides[1] and (sides[1] + sides[2]) > sides[0]:\n        return True\n    else:\n        return False\n\nsides = [3, 4, 5]\nprint(is_triangle(sides))"
    },
    {
      "rank": 50,
      "score": 8.408439383654278,
      "candidate": "def triangle_valid(side1, side2, side3):\n    \"\"\"\n    >>> triangle_valid(1, 2, 2)\n    True\n    >>> triangle_valid(1, 2, 3)\n    False\n    \"\"\"\n    return side1 < side2 + side3 and side2 < side1 + side3 and side3 < side1 + side2\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 51,
      "score": 8.386620303250325,
      "candidate": "def check_triangle(a, b, c):\n    if a + b > c and a + c > b and b + c > a:\n        return True\n    return False\n\n\nprint(check_triangle(3, 4, 5))\nprint(check_triangle(3, 4, 1))"
    },
    {
      "rank": 52,
      "score": 8.375312293858853,
      "candidate": "def is_valid_triangle(s1: float, s2: float, s3: float):\n    return s1 + s2 > s3 and s2 + s3 > s1 and s1 + s3 > s2\n\n\nif __name__ == \"__main__\":\n    assert is_valid_triangle(3, 4, 5) == True\n    assert is_valid_triangle(1, 2, 3) == False"
    },
    {
      "rank": 53,
      "score": 8.351614956112536,
      "candidate": "# Solution\n\n\ndef check_triangle(a, b, c):\n    \"\"\"Check if the triangle is valid\"\"\"\n    if a + b <= c:\n        return False\n    elif a + c <= b:\n        return False\n    elif b + c <= a:\n        return False\n    else:\n        return True\n\n\ndef check_triangle_2(a, b, c):\n    \"\"\"Check if the triangle is valid\"\"\"\n    return a + b > c and a + c > b and b + c > a"
    },
    {
      "rank": 54,
      "score": 8.334608500525688,
      "candidate": "def is_valid_triangle(a, b, c):\n    if a + b <= c:\n        return False\n    elif b + c <= a:\n        return False\n    elif a + c <= b:\n        return False\n    return True\n\n\nprint(is_valid_triangle(3, 5, 7))\nprint(is_valid_triangle(3, 4, 5))"
    },
    {
      "rank": 55,
      "score": 8.331556294201176,
      "candidate": "def check_triangle(a, b, c):\n    return a + b > c and a + c > b and b + c > a\n\nprint(check_triangle(3, 4, 5))\nprint(check_triangle(3, 4, 6))"
    },
    {
      "rank": 56,
      "score": 8.327375965969855,
      "candidate": "def is_valid_triangle(a, b, c):\n    if a + b > c and b + c > a and a + c > b:\n        return True\n    return False\n\n\nprint(is_valid_triangle(1, 2, 2))"
    },
    {
      "rank": 57,
      "score": 8.327367757082776,
      "candidate": "def is_valid_triangle(sides: list) -> bool:\n    \"\"\"\n    >>> is_valid_triangle([1, 2, 3])\n    True\n    >>> is_valid_triangle([1, 1, 1])\n    False\n    \"\"\"\n    return (\n        sides[0] + sides[1] > sides[2]\n        and sides[1] + sides[2] > sides[0]\n        and sides[0] + sides[2] > sides[1]\n    )\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 58,
      "score": 8.298597569547805,
      "candidate": "def triangle_valid(side_1, side_2, side_3):\n    if side_1 + side_2 > side_3 and side_2 + side_3 > side_1 and side_3 + side_1 > side_2:\n        return True\n    return False\n\n\nprint(triangle_valid(3, 4, 5))"
    },
    {
      "rank": 59,
      "score": 8.294940769211511,
      "candidate": "def is_valid_triangle(side1, side2, side3):\n    return side1 + side2 > side3 and side1 + side3 > side2 and side2 + side3 > side1\n\n\nif __name__ == \"__main__\":\n    print(is_valid_triangle(1, 2, 2))\n    print(is_valid_triangle(1, 2, 3))"
    },
    {
      "rank": 60,
      "score": 8.2938925966498,
      "candidate": "def is_valid_triangle(sides):\n    return (sides[0] + sides[1] > sides[2]) and (sides[0] + sides[2] > sides[1]) and (sides[1] + sides[2] > sides[0])\n\n\nif __name__ == \"__main__\":\n    print(is_valid_triangle([1, 2, 2]))"
    },
    {
      "rank": 61,
      "score": 8.289838256518838,
      "candidate": "def check_triangle(a, b, c):\n    return a < b + c and b < a + c and c < a + b\n\n\na = int(input())\nb = int(input())\nc = int(input())\n\nif check_triangle(a, b, c):\n    print(\"The triangle is valid.\")\nelse:\n    print(\"The triangle is not valid.\")"
    },
    {
      "rank": 62,
      "score": 8.251903304236286,
      "candidate": "def check_triangle(a, b, c):\n    if a+b > c and a+c > b and b+c > a:\n        return True\n    else:\n        return False\n\n\nprint(check_triangle(1, 2, 2))\nprint(check_triangle(1, 2, 3))"
    },
    {
      "rank": 63,
      "score": 8.214125058964552,
      "candidate": "def check_triangle(a, b, c):\n    if a + b <= c or b + c <= a or a + c <= b:\n        return False\n    return True\n\n\ndef main():\n    print(check_triangle(10, 5, 12))\n    print(check_triangle(5, 12, 10))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 64,
      "score": 8.212735598038213,
      "candidate": "def is_valid_triangle(sides):\n    if sides[0] + sides[1] <= sides[2]:\n        return False\n    if sides[1] + sides[2] <= sides[0]:\n        return False\n    if sides[0] + sides[2] <= sides[1]:\n        return False\n    return True\n\nif __name__ == '__main__':\n    print(\"Enter three sides of a triangle:\")\n    sides = list(map(int, input().split()))\n    if is_valid_triangle(sides):\n        print(\"It is a valid triangle\")\n    else:\n        print(\"It is not a valid triangle\")"
    },
    {
      "rank": 65,
      "score": 8.211579567659316,
      "candidate": "def check_triangle(sides):\n    return len(sides) == 3 and sum(sides) > 0 and max(sides) < sum(sides)\n\n\nif __name__ == \"__main__\":\n    sides = [1, 2, 3]\n    if check_triangle(sides):\n        print(\"It is a valid triangle\")\n    else:\n        print(\"It is not a valid triangle\")"
    },
    {
      "rank": 66,
      "score": 8.209707251476969,
      "candidate": "def is_triangle(a,b,c):\n    if a + b > c and a + c > b and b + c > a:\n        return True\n    else:\n        return False\n\nprint(is_triangle(5, 10, 25))\nprint(is_triangle(3, 4, 5))"
    },
    {
      "rank": 67,
      "score": 8.2048573255218,
      "candidate": "def is_triangle(sides):\n    return sum(sides) > 0 and 180 - sum(sides) > 0"
    },
    {
      "rank": 68,
      "score": 8.193565922652176,
      "candidate": "# Solution:\n\ndef valid_triangle(sides):\n    return sides[0] + sides[1] > sides[2] and sides[0] + sides[2] > sides[1] and sides[1] + sides[2] > sides[0]\n\n\ndef main():\n    print(valid_triangle([1, 2, 2]))\n    print(valid_triangle([1, 2, 3]))\n    print(valid_triangle([2, 2, 3]))\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 69,
      "score": 8.185309335307622,
      "candidate": "def valid_triangle(a, b, c):\n    if a + b <= c:\n        print(\"Not valid\")\n    elif b + c <= a:\n        print(\"Not valid\")\n    elif a + c <= b:\n        print(\"Not valid\")\n    else:\n        print(\"Valid\")\n\n\nvalid_triangle(3, 4, 5)\nvalid_triangle(4, 4, 4)\nvalid_triangle(4, 4, 3)"
    },
    {
      "rank": 70,
      "score": 8.179564342560925,
      "candidate": "def check_triangle(a,b,c):\n    if a+b>c and a+c>b and b+c>a:\n        return True\n    else:\n        return False\n\na, b, c = 3, 4, 5\nprint(check_triangle(a,b,c))"
    },
    {
      "rank": 71,
      "score": 8.172253082181854,
      "candidate": "def check_triangle(a, b, c):\n    return a+b>c and a+c>b and b+c>a\n\n\ndef check_triangle_2(a, b, c):\n    return a > min(b, c) and a < max(b, c) + c\n\n\ndef check_triangle_3(a, b, c):\n    return a > b and a > c and a**2 == b**2+c**2\n\n\nif __name__ == \"__main__\":\n    print(check_triangle(3, 4, 5))\n    print(check_triangle_2(3, 4, 5))\n    print(check_triangle_3(3, 4, 5))"
    },
    {
      "rank": 72,
      "score": 8.163300679823958,
      "candidate": "def triangle_check(a,b,c):\n    if (a+b>c) and (a+c>b) and (b+c>a):\n        return True\n    else:\n        return False\n\nprint(triangle_check(3,4,5))"
    },
    {
      "rank": 73,
      "score": 8.144125099485041,
      "candidate": "def is_valid_triangle(a, b, c):\n    if a + b > c and a + c > b and b + c > a:\n        return True\n    else:\n        return False\n\nprint(is_valid_triangle(3, 5, 4))\nprint(is_valid_triangle(1, 2, 3))"
    },
    {
      "rank": 74,
      "score": 8.143591138329747,
      "candidate": "def is_valid_triangle(sides):\n    a, b, c = sorted(sides)\n    return a + b > c"
    },
    {
      "rank": 75,
      "score": 8.121884567141883,
      "candidate": "def check_triangle(a: int, b: int, c: int):\n    if a + b <= c:\n        return False\n    elif a + c <= b:\n        return False\n    elif b + c <= a:\n        return False\n    else:\n        return True\n\n\nif __name__ == \"__main__\":\n    print(check_triangle(5, 6, 7))"
    },
    {
      "rank": 76,
      "score": 8.105983444291466,
      "candidate": "def is_triangle(sides):\n    if sides[0] + sides[1] <= sides[2]:\n        return False\n    elif sides[1] + sides[2] <= sides[0]:\n        return False\n    elif sides[0] + sides[2] <= sides[1]:\n        return False\n    return True\n\n\nif __name__ == \"__main__\":\n    print(is_triangle([3, 4, 5]))\n    print(is_triangle([1, 2, 3]))"
    },
    {
      "rank": 77,
      "score": 8.08452234024709,
      "candidate": "def is_triangle(a, b, c):\n    return (a + b > c) and (a + c > b) and (b + c > a)\n\nprint(is_triangle(5, 10, 12))\nprint(is_triangle(3, 4, 5))"
    },
    {
      "rank": 78,
      "score": 8.040197642997851,
      "candidate": "def is_triangle(a, b, c):\n    return a + b > c and a + c > b and b + c > a\n\n\nif __name__ == \"__main__\":\n    assert is_triangle(3, 4, 5) is True\n    assert is_triangle(1, 2, 3) is False"
    },
    {
      "rank": 79,
      "score": 8.024835682833125,
      "candidate": "def is_valid_triangle(a, b, c):\n    if a+b <= c or b+c <= a or a+c <= b:\n        return False\n    return True\n\n\nif __name__ == '__main__':\n    a, b, c = map(int, input().split())\n    print(is_valid_triangle(a, b, c))"
    },
    {
      "rank": 80,
      "score": 7.990432406683839,
      "candidate": "def is_valid_triangle(side1: int, side2: int, side3: int) -> bool:\n    return side1 + side2 > side3 and side1 + side3 > side2 and side2 + side3 > side1\n\n\nif __name__ == \"__main__\":\n    print(is_valid_triangle(3, 4, 5))\n    print(is_valid_triangle(3, 4, 1))\n    print(is_valid_triangle(1, 4, 5))"
    },
    {
      "rank": 81,
      "score": 7.938028884277233,
      "candidate": "def is_valid_triangle(a, b, c):\n    if a + b <= c or a + c <= b or b + c <= a:\n        return False\n    else:\n        return True\n\n\ndef main():\n    a = int(input(\"Enter first side : \"))\n    b = int(input(\"Enter second side : \"))\n    c = int(input(\"Enter third side : \"))\n    if is_valid_triangle(a, b, c):\n        print(\"It is a valid triangle\")\n    else:\n        print(\"It is not a valid triangle\")\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 82,
      "score": 7.915588979966494,
      "candidate": "def is_valid_triangle(a, b, c):\n    if (a + b) <= c or (a + c) <= b or (b + c) <= a:\n        return False\n    return True\n\nif __name__ == \"__main__\":\n    a, b, c = map(int, input().split())\n    if is_valid_triangle(a, b, c):\n        print(\"Valid\")\n    else:\n        print(\"Invalid\")"
    },
    {
      "rank": 83,
      "score": 7.8912769574414305,
      "candidate": "def check_triangle(a,b,c):\n    if a + b > c and a + c > b and b + c > a:\n        print(\"Yes\")\n    else:\n        print(\"No\")\n\na = int(input(\"Enter first side: \"))\nb = int(input(\"Enter second side: \"))\nc = int(input(\"Enter third side: \"))\n\ncheck_triangle(a,b,c)"
    },
    {
      "rank": 84,
      "score": 7.868947655733293,
      "candidate": "def is_triangle(side1: int, side2: int, side3: int) -> bool:\n    \"\"\"\n    >>> is_triangle(3, 4, 5)\n    True\n    \"\"\"\n    return side1 + side2 > side3 and side2 + side3 > side1 and side1 + side3 > side2\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 85,
      "score": 7.84634113240411,
      "candidate": "def checkTriangle(a, b, c):\n    return a + b > c and a + c > b and b + c > a\n\ndef checkTriangle_2(a, b, c):\n    return a < b + c and b < a + c and c < a + b\n\nprint(checkTriangle(10, 10, 10))\nprint(checkTriangle(10, 10, 20))\nprint(checkTriangle(10, 20, 10))\n\nprint(checkTriangle_2(10, 10, 10))\nprint(checkTriangle_2(10, 10, 20))\nprint(checkTriangle_2(10, 20, 10))"
    },
    {
      "rank": 86,
      "score": 7.834022619458933,
      "candidate": "def isTriangle(a, b, c):\n    if a + b <= c or b + c <= a or a + c <= b:\n        return False\n    else:\n        return True\n\nprint(isTriangle(3, 4, 5))"
    },
    {
      "rank": 87,
      "score": 7.780351419995229,
      "candidate": "def is_valid_triangle(a, b, c):\n    if a + b > c and b + c > a and a + c > b:\n        print(\"valid\")\n    else:\n        print(\"not valid\")\n\nis_valid_triangle(3, 4, 5)"
    },
    {
      "rank": 88,
      "score": 7.738292593776799,
      "candidate": "def check_triangle(a, b, c):\n    if a + b <= c:\n        return False\n    if b + c <= a:\n        return False\n    if c + a <= b:\n        return False\n    return True\n\n\nif __name__ == \"__main__\":\n    a = float(input(\"Enter first side: \"))\n    b = float(input(\"Enter second side: \"))\n    c = float(input(\"Enter third side: \"))\n\n    if check_triangle(a, b, c):\n        print(\"It is a valid triangle\")\n    else:\n        print(\"It is not a valid triangle\")"
    },
    {
      "rank": 89,
      "score": 7.7320703513377165,
      "candidate": "def isTriangle(a, b, c):\n    if a+b > c and a+c > b and b+c > a:\n        print(\"Given sides can form a triangle.\")\n    else:\n        print(\"Given sides can't form a triangle.\")\n\na = int(input(\"Enter 1st side: \"))\nb = int(input(\"Enter 2nd side: \"))\nc = int(input(\"Enter 3rd side: \"))\n\nisTriangle(a, b, c)"
    },
    {
      "rank": 90,
      "score": 7.705183449260731,
      "candidate": "def check_triangle(a,b,c):\n    return a+b>c and a+c>b and b+c>a\n\nprint(check_triangle(3,4,5))\nprint(check_triangle(3,4,1))\nprint(check_triangle(3,4,3))\nprint(check_triangle(3,4,0))"
    },
    {
      "rank": 91,
      "score": 7.5819855281879285,
      "candidate": "def check_triangle(a, b, c):\n    return a < b + c and b < a + c and c < a + b\n\n\nif __name__ == '__main__':\n    print(check_triangle(3, 4, 5))\n    print(check_triangle(5, 3, 4))\n    print(check_triangle(3, 4, 3))"
    },
    {
      "rank": 92,
      "score": 7.562924366763077,
      "candidate": "def is_valid_triangle(sides):\n    if sides[0] + sides[1] > sides[2] and sides[0] + sides[2] > sides[1] and sides[1] + sides[2] > sides[0]:\n        return True\n    else:\n        return False\n\n\ndef main():\n    print(\"Is triangle valid? \" + str(is_valid_triangle([5, 3, 4])))\n    print(\"Is triangle valid? \" + str(is_valid_triangle([3, 4, 5])))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 93,
      "score": 7.4878043221155455,
      "candidate": "def is_valid_triangle(side1, side2, side3):\n    return side1 + side2 > side3 and side1 + side3 > side2 and side2 + side3 > side1\n\n\nif __name__ == \"__main__\":\n    print(is_valid_triangle(1, 1, 3))\n    print(is_valid_triangle(1, 2, 2))"
    },
    {
      "rank": 94,
      "score": 7.464609382504557,
      "candidate": "def is_valid_triangle(a, b, c):\n    return a+b > c and a+c > b and b+c > a\n\n\nif __name__ == '__main__':\n    print(is_valid_triangle(1, 2, 2))"
    },
    {
      "rank": 95,
      "score": 7.4506599871439985,
      "candidate": "def check_triangle(a, b, c):\n    return a + b > c and a + c > b and b + c > a\n\n\nif __name__ == \"__main__\":\n    print(check_triangle(3, 4, 5))"
    },
    {
      "rank": 96,
      "score": 7.134571892399572,
      "candidate": "def is_valid(a, b, c):\n    return (a + b) > c and (b + c) > a and (c + a) > b\n\n\nif __name__ == \"__main__\":\n    print(is_valid(5, 10, 25))\n    print(is_valid(10, 20, 30))\n    print(is_valid(1, 2, 3))"
    },
    {
      "rank": 97,
      "score": 3.0,
      "candidate": "def isTriangle(side1, side2, side3):\n    if side1 + side2 <= side3:\n        return False\n    elif side1 + side3 <= side2:\n        return False\n    elif side2 + side3 <= side1:\n        return False\n    else:\n        return True\n\n\n\"\"\"\nWrite a python function to check whether the triangle is equilateral, isosceles or scalene.\n\"\"\"\ndef triangleType(side1, side2, side3):\n    if side1 == side2 == side3:\n        return \"equilateral\"\n    elif side1 == side2 or side1 == side3 or side2 == side3:\n        return \"isosceles\"\n    else:\n        return \"scalene\"\n\n\n\"\"\"\nWrite a python program to find the area of a triangle.\n\"\"\"\ndef area(base, height):\n    return 0.5 * base * height\n\n\n\"\"\"\nWrite a python program to find the perimeter of a triangle.\n\"\"\"\ndef perimeter(side1, side2, side3):\n    return side1 + side2 + side3\n\n\n\"\"\"\nWrite a python program to find the hypotenuse of a triangle.\n\"\"\"\ndef hypotenuse(side1, side2):\n    return (side1 ** 2 + side2 ** 2) ** 0.5\n\n\n\"\"\"\nWrite a python program to find the circumference of a circle.\n\"\"\"\ndef circumference(radius):\n    return 2 * 3.14 * radius\n\n\n\"\"\"\nWrite a python program to find the area of a circle.\n\"\"\"\ndef area(radius):\n    return 3.14 * radius * radius\n\n\n\"\"\"\nWrite a python program to find the circumference of a sphere.\n\"\"\"\ndef circumference(radius):\n    return 4 * 3.14 * radius\n\n\n\"\"\"\nWrite a python program to find the volume of a sphere.\n\"\"\"\ndef volume(radius):\n    return 3.14 * radius ** 3 / 3\n\n\n\"\"\"\nWrite a python program to find the surface area of a sphere.\n\"\"\"\ndef surface"
    },
    {
      "rank": 98,
      "score": 3.0,
      "candidate": "def checkTriangle(a,b,c):\n    if a+b>c and a+c>b and b+c>a:\n        return True\n    else:\n        return False\n\nprint(checkTriangle(3,4,5))\nprint(checkTriangle(3,4,3))\n\n\"\"\"\nWrite a python program to find the maximum of three numbers.\n\"\"\"\ndef findMax(a,b,c):\n    if a>b and a>c:\n        return a\n    elif b>c:\n        return b\n    else:\n        return c\n\nprint(findMax(3,4,5))\nprint(findMax(5,4,3))\n\n\"\"\"\nWrite a python program to find the minimum of three numbers.\n\"\"\"\ndef findMin(a,b,c):\n    if a<b and a<c:\n        return a\n    elif b<c:\n        return b\n    else:\n        return c\n\nprint(findMin(3,4,5))\nprint(findMin(5,4,3))\n\n\"\"\"\nWrite a python program to check whether the number is positive or negative.\n\"\"\"\ndef checkPositive(a):\n    if a>0:\n        return \"Positive\"\n    else:\n        return \"Negative\"\n\nprint(checkPositive(3))\nprint(checkPositive(-3))\n\n\"\"\"\nWrite a python program to find the maximum and minimum from a list.\n\"\"\"\ndef findMaxMin(a):\n    return max(a),min(a)\n\nprint(findMaxMin([3,4,5]))\nprint(findMaxMin([5,4,3]))\n\n\"\"\"\nWrite a python program to find the factorial of a number.\n\"\"\"\ndef factorial(n):\n    if n==0:\n        return 1\n    else:\n        return n*factorial(n-1)\n\nprint(factorial(3))\nprint(factorial(4))\n\n\"\"\"\nWrite a python program to find the factorial of a number using recursion.\n\"\"\"\ndef factorialRecursion(n):\n    if n==0:\n        return"
    },
    {
      "rank": 99,
      "score": 3.0,
      "candidate": "def valid_triangle(sides):\n    \"\"\"\n    :param sides: list of sides of triangle\n    :return: True if valid triangle else False\n    \"\"\"\n    if sides[0] + sides[1] <= sides[2]:\n        return False\n    if sides[1] + sides[2] <= sides[0]:\n        return False\n    if sides[0] + sides[2] <= sides[1]:\n        return False\n    return True\n\n\ndef main():\n    print(\"Do the three sides form a valid triangle? - \", valid_triangle([7, 5, 8]))\n    print(\"Do the three sides form a valid triangle? - \", valid_triangle([3, 4, 5]))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 100,
      "score": 3.0,
      "candidate": "def is_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n    >>> is_triangle(10, 10, 10)\n    False\n    >>> is_triangle(10, 10, 11)\n    True\n    >>> is_triangle(10, 11, 10)\n    True\n    >>> is_triangle(11, 10, 10)\n    True\n    >>> is_triangle(11, 10, 11)\n    False\n    >>> is_triangle(11, 11, 10)\n    False\n    >>> is_triangle(11, 11, 11)\n    False\n    >>> is_triangle(11, 11, 12)\n    True\n    >>> is_triangle(11, 12, 11)\n    True\n    \"\"\"\n    return a + b > c and a + c > b and b + c > a\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    }
  ]
}