{
  "timestamp": "2025-09-15T01:49:20.893423",
  "method": "improved_llm_judge",
  "judge_model": "codellama/CodeLlama-7b-Python-hf",
  "target_model": "codellama-7b",
  "dataset": "mbpp",
  "problem_number": 464,
  "total_candidates": 100,
  "results": [
    {
      "rank": 1,
      "score": 10.0,
      "candidate": "from collections import Counter\nfrom typing import Dict, List\n\n\ndef sort_counter_by_value(count: Counter) -> List[Dict]:\n    \"\"\"Sort Counter by value.\n\n    Args:\n        count (Counter): counter to sort\n\n    Returns:\n        List[Dict]: list of sorted dict\n\n    Examples:\n        >>> sort_counter_by_value(Counter({\"a\": 3, \"b\": 2, \"c\": 1}))\n        [{'a': 3}, {'b': 2}, {'c': 1}]\n    \"\"\"\n    return [dict(item) for item in sorted(count.items(), key=lambda x: x[1], reverse=True)]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod(verbose=True)"
    },
    {
      "rank": 2,
      "score": 10.0,
      "candidate": "from collections import Counter\nfrom typing import List\n\n\ndef sort_by_count(counter: Counter) -> List[str]:\n    return [k for k, _ in counter.most_common()]\n\n\nif __name__ == \"__main__\":\n    c = Counter([\"b\", \"a\", \"c\", \"a\"])\n    assert sort_by_count(c) == [\"a\", \"c\", \"b\"]"
    },
    {
      "rank": 3,
      "score": 10.0,
      "candidate": "from collections import Counter\n\ndef sort_by_value(counter):\n    \"\"\"\n    :type counter: Counter\n    :rtype: List[Tuple[Any, Any]]\n    \"\"\"\n    return sorted(counter.items(), key=lambda x: x[1], reverse=True)\n\nif __name__ == '__main__':\n    print(sort_by_value(Counter([1,2,2,3,3,3,4,5,6,6,6,7,7,7,7,7,7,7,8,8,8,8,8,8,8,8,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9"
    },
    {
      "rank": 4,
      "score": 10.0,
      "candidate": "from collections import Counter\n\ndef sort_counter(counter):\n    return Counter(sorted(counter.items(), key=lambda x: x[1]))\n\nif __name__ == '__main__':\n    counter = Counter(input().split())\n    print(sort_counter(counter))"
    },
    {
      "rank": 5,
      "score": 10.0,
      "candidate": "from collections import Counter\n\n\ndef sort_by_value(c: Counter) -> None:\n    \"\"\"\n    Sort a counter by value.\n    \"\"\"\n    c.most_common = lambda: sorted(c.items(), key=lambda x: x[1], reverse=True)"
    },
    {
      "rank": 6,
      "score": 10.0,
      "candidate": "from collections import Counter\n\n\ndef sort_counter(counter: Counter) -> Counter:\n    \"\"\"Return a Counter with the elements sorted by value.\n\n    Examples:\n        >>> sort_counter(Counter('hello'))\n        Counter({'l': 2, 'e': 1, 'h': 1, 'o': 1})\n\n    \"\"\"\n    return Counter(sorted(counter.elements(), key=counter.__getitem__, reverse=True))\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 7,
      "score": 10.0,
      "candidate": "from collections import Counter\nfrom typing import List\n\n\ndef sort_counter(counter: Counter) -> List[int]:\n    \"\"\"Sort counter by value.\n\n    Args:\n        counter (Counter): counter to sort\n\n    Returns:\n        List[int]: sorted values\n    \"\"\"\n    return [item[0] for item in sorted(counter.items(), key=lambda x: x[1])]\n\n\nif __name__ == \"__main__\":\n    counter = Counter([\"a\", \"b\", \"c\", \"a\"])\n    assert sort_counter(counter) == [\"a\", \"c\", \"b\"]"
    },
    {
      "rank": 8,
      "score": 10.0,
      "candidate": "from collections import Counter\n\ndef sort_counter(counter):\n    \"\"\"\n    >>> sort_counter(Counter(\"aabb\"))\n    Counter({'a': 2, 'b': 2})\n    >>> sort_counter(Counter({\"a\": 2, \"b\": 2, \"c\": 1}))\n    Counter({'a': 2, 'b': 2, 'c': 1})\n    \"\"\"\n    return Counter(dict(sorted(counter.items(), key=lambda item: item[1], reverse=True)))\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 9,
      "score": 10.0,
      "candidate": "from collections import Counter\n\n\ndef sort_count_by_value(counter):\n    \"\"\"\n    :param counter: Counter\n    :return: list\n    \"\"\"\n    return [\n        key for key, _ in sorted(counter.items(), key=lambda x: x[1], reverse=True)\n    ]\n\n\nif __name__ == \"__main__\":\n    counter = Counter([\"a\", \"a\", \"b\", \"c\", \"b\"])\n    assert sort_count_by_value(counter) == [\"b\", \"a\", \"c\"]"
    },
    {
      "rank": 10,
      "score": 10.0,
      "candidate": "from collections import Counter\nfrom typing import List\n\n\ndef sort_counts_by_value(counter: Counter) -> List[str]:\n    \"\"\"Sort counter by value.\n\n    Args:\n        counter (Counter): counter to sort\n\n    Examples:\n        >>> sort_counts_by_value(Counter(\"abba\"))\n        ['a', 'b']\n    \"\"\"\n    return [item[0] for item in counter.most_common()]\n\n\ndef sort_counts_by_value_alt(counter: Counter) -> List[str]:\n    \"\"\"Sort counter by value.\n\n    Args:\n        counter (Counter): counter to sort\n\n    Examples:\n        >>> sort_counts_by_value_alt(Counter(\"abba\"))\n        ['a', 'b']\n    \"\"\"\n    return [\n        item[0]\n        for item in sorted(counter.items(), key=lambda item: item[1], reverse=True)\n    ]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod(verbose=True)"
    },
    {
      "rank": 11,
      "score": 10.0,
      "candidate": "from collections import Counter\n\n\ndef sort_counter(counter):\n    return Counter(sorted(counter.elements()))\n\n\nif __name__ == '__main__':\n    counter = Counter(a=2, b=4, c=5, d=4, e=1)\n    print(sort_counter(counter))"
    },
    {
      "rank": 12,
      "score": 10.0,
      "candidate": "from collections import Counter\n\n\ndef sort_counter(counter):\n    return Counter(sorted(counter.items(), key=lambda x: x[1]))\n\n\ndef test_sort_counter():\n    \"\"\"\n    >>> sort_counter({'a': 1, 'b': 3, 'c': 2})\n    Counter({'b': 3, 'c': 2, 'a': 1})\n    >>> sort_counter({'a': 1, 'b': 2, 'c': 3, 'd': 4})\n    Counter({'c': 3, 'b': 2, 'd': 4, 'a': 1})\n    \"\"\"\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 13,
      "score": 9.0,
      "candidate": "# Time Complexity: O(nlogn)\n# Space Complexity: O(1)\ndef sort_counter(counter):\n    return sorted(counter.items(), key=lambda x: x[1], reverse=True)"
    },
    {
      "rank": 14,
      "score": 8.0,
      "candidate": "from collections import Counter\n\n\ndef sort_count(count):\n    return sorted(count.items(), key=lambda x: x[1])\n\n\nif __name__ == \"__main__\":\n    counter = Counter()\n    counter.update(\"aabbccdd\")\n    print(sort_count(counter))\n    print(sorted(counter.items(), key=lambda x: x[1]))"
    },
    {
      "rank": 15,
      "score": 8.0,
      "candidate": "from collections import Counter\n\n\ndef sort_counter_by_value(counter):\n    return Counter(sorted(counter.items(), key=lambda item: item[1]))\n\n\nif __name__ == '__main__':\n    counter = Counter([\"a\", \"b\", \"c\", \"a\", \"b\", \"b\", \"c\"])\n    sorted_counter = sort_counter_by_value(counter)\n    assert sorted_counter == Counter({\"b\": 3, \"c\": 2, \"a\": 1})"
    },
    {
      "rank": 16,
      "score": 8.0,
      "candidate": "def sort_by_count(counters):\n    \"\"\"\n    Inputs: counters, a list of counters\n    Output: counters, sorted by count\n    \"\"\"\n    for counter in counters:\n        counter.sort(key=lambda x:x[1])\n    return counters\n\n\n\ncounters = [\n    [('a', 4), ('b', 3), ('c', 2), ('d', 1)],\n    [('a', 2), ('b', 2), ('c', 2), ('d', 1)],\n    [('a', 1), ('b', 1), ('c', 1), ('d', 1)]\n]\n\nprint(sort_by_count(counters))"
    },
    {
      "rank": 17,
      "score": 8.0,
      "candidate": "from collections import Counter\n\n\ndef sort_counter(counter):\n    return sorted(counter, key=counter.__getitem__)\n\n\nif __name__ == \"__main__\":\n    counter = Counter({\"a\": 2, \"b\": 4, \"c\": 1, \"d\": 3})\n    print(sort_counter(counter))"
    },
    {
      "rank": 18,
      "score": 8.0,
      "candidate": "from collections import Counter\n\ndef sort_counter(counter):\n    return sorted(counter.items(), key=lambda x: x[1], reverse=True)\n\nif __name__ == '__main__':\n    counter = Counter()\n    counter['a'] = 2\n    counter['b'] = 1\n    counter['c'] = 3\n    counter['d'] = 4\n    counter['e'] = 5\n    print(sort_counter(counter))"
    },
    {
      "rank": 19,
      "score": 8.0,
      "candidate": "from collections import Counter\nfrom typing import List\n\n\ndef sort_by_value(counter: Counter) -> List[tuple]:\n    return sorted(counter.items(), key=lambda kv: kv[1], reverse=True)\n\n\nif __name__ == \"__main__\":\n    counter = Counter([\"a\", \"b\", \"c\", \"b\", \"a\"])\n    print(sort_by_value(counter))"
    },
    {
      "rank": 20,
      "score": 8.0,
      "candidate": "from collections import Counter\n\n\ndef sort_counter(counter: Counter):\n    \"\"\"\n    Sort counter by value.\n    :param counter: Counter object.\n    :return: Sorted list.\n    \"\"\"\n    return sorted(counter.items(), key=lambda x: x[1], reverse=True)\n\n\nif __name__ == '__main__':\n    c = Counter({'a': 4, 'b': 3, 'c': 2, 'd': 1})\n    print(sort_counter(c))"
    },
    {
      "rank": 21,
      "score": 8.0,
      "candidate": "from collections import Counter\nfrom typing import Counter as CT\n\n\ndef sort_by_value(c: CT) -> CT:\n    \"\"\"Sort counter by value.\n\n    Args:\n        c (Counter): counter\n\n    Returns:\n        Counter: sorted counter\n    \"\"\"\n    return Counter(sorted(c.items(), key=lambda x: x[1]))\n\n\nif __name__ == \"__main__\":\n    c = Counter([\"a\", \"b\", \"a\"])\n    print(sort_by_value(c))"
    },
    {
      "rank": 22,
      "score": 8.0,
      "candidate": "from collections import Counter\n\n\ndef sort_counter(counter):\n    return Counter(sorted(counter.items(), key=lambda x: x[1]))\n\n\nif __name__ == '__main__':\n    counter = Counter([\"a\", \"b\", \"c\", \"d\", \"a\"])\n    print(sort_counter(counter))"
    },
    {
      "rank": 23,
      "score": 8.0,
      "candidate": "from collections import Counter\n\n\ndef sort_count_by_value(counter: Counter) -> Counter:\n    \"\"\"\n    >>> sort_count_by_value(Counter(a=5, b=1, c=2))\n    Counter({'c': 2, 'a': 5, 'b': 1})\n    \"\"\"\n    return Counter(sorted(counter.items(), key=lambda x: x[1]))\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 24,
      "score": 8.0,
      "candidate": "from collections import Counter\n\n\ndef sort_counter_by_value(counter):\n    return Counter(sorted(counter.items(), key=lambda x: x[1], reverse=True))\n\n\nif __name__ == \"__main__\":\n    counter = Counter({'a': 3, 'b': 2, 'c': 1})\n    print(counter)\n    print(sort_counter_by_value(counter))"
    },
    {
      "rank": 25,
      "score": 8.0,
      "candidate": "from collections import Counter\n\n\ndef sort_by_value(counter):\n    return Counter(sorted(counter.items(), key=lambda item: item[1]))\n\n\nif __name__ == \"__main__\":\n    counter = Counter([\"a\", \"b\", \"c\", \"b\"])\n    print(counter)\n    print(sort_by_value(counter))"
    },
    {
      "rank": 26,
      "score": 8.0,
      "candidate": "from collections import Counter\n\n\ndef sort_by_value(counter):\n    \"\"\"\n    Return a sorted list of Counter objects\n    \"\"\"\n    return sorted(counter.items(), key=lambda x: x[1])\n\n\nif __name__ == '__main__':\n    c = Counter([\"a\", \"b\", \"c\", \"a\"])\n    print(c)\n    print(sort_by_value(c))"
    },
    {
      "rank": 27,
      "score": 8.0,
      "candidate": "from collections import Counter\n\n\ndef sort_counter(counter):\n    return Counter(sorted(counter.items(), key=lambda x: x[1]))\n\n\nif __name__ == '__main__':\n    c = Counter()\n    c.update('aabbcde')\n    print(c)\n    print(sort_counter(c))"
    },
    {
      "rank": 28,
      "score": 8.0,
      "candidate": "from collections import Counter\n\ndef sort_counter(counter):\n    \"\"\"Return a list of (value, key) tuples sorted by value in descending order.\"\"\"\n    # Convert counter to list of (key, value) tuples.\n    counter_list = list(counter.items())\n\n    # Sort the list in reverse order.\n    counter_list.sort(reverse=True)\n\n    # Return a list of (value, key) tuples.\n    return [(v, k) for (k, v) in counter_list]\n\ndef test_sort_counter():\n    \"\"\"Test\"\"\"\n    assert sort_counter(Counter('aaabbc')) == [(3, 'a'), (2, 'b'), (1, 'c')]\n    assert sort_counter(Counter('abcdef')) == [(1, 'a'), (1, 'b'), (1, 'c'), (1, 'd'), (1, 'e'), (1, 'f')]\n    assert sort_counter(Counter('aabbcc')) == [(2, 'a'), (2, 'b'), (2, 'c')]\n\nif __name__ == '__main__':\n    test_sort_counter()"
    },
    {
      "rank": 29,
      "score": 8.0,
      "candidate": "from collections import Counter\n\n\ndef sort_counter(counter):\n    return Counter(sorted(counter.items(), key=lambda x: x[1]))\n\n\nif __name__ == \"__main__\":\n    counter = Counter([\"a\", \"a\", \"b\", \"b\", \"c\", \"c\"])\n    print(sort_counter(counter))"
    },
    {
      "rank": 30,
      "score": 8.0,
      "candidate": "from collections import Counter\n\n\ndef sort_by_value(count):\n    return Counter(sorted(count.items(), key=lambda x: x[1]))\n\n\nif __name__ == \"__main__\":\n    count = Counter()\n    count[\"a\"] = 5\n    count[\"b\"] = 4\n    count[\"c\"] = 3\n    count[\"d\"] = 2\n    count[\"e\"] = 1\n\n    print(sort_by_value(count))"
    },
    {
      "rank": 31,
      "score": 8.0,
      "candidate": "from collections import Counter\n\n\ndef sort_counter_by_value(counter):\n    return Counter(sorted(counter.items(), key=lambda x: x[1]))\n\n\nif __name__ == '__main__':\n    counter = Counter()\n    counter.update({'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5})\n    print(sort_counter_by_value(counter))"
    },
    {
      "rank": 32,
      "score": 8.0,
      "candidate": "def sort_count_by_value(count):\n    \"\"\"\n    :param count: a counter\n    :return: a list of tuple,\n    \"\"\"\n    return sorted(count.items(), key=lambda x: x[1], reverse=True)\n\n\nif __name__ == '__main__':\n    count = {'a': 10, 'b': 5, 'c': 3, 'd': 4}\n    print(sort_count_by_value(count))"
    },
    {
      "rank": 33,
      "score": 8.0,
      "candidate": "from collections import Counter\n\n\ndef sort_counter(counter):\n    return sorted(counter.items(), key=lambda x: x[1], reverse=True)\n\n\nif __name__ == \"__main__\":\n    counter = Counter([1, 1, 2, 3, 3, 3, 4, 5, 5, 6, 6, 6, 6])\n    print(sort_counter(counter))"
    },
    {
      "rank": 34,
      "score": 8.0,
      "candidate": "def sort_count(counter):\n    return sorted(counter.items(), key=lambda x: x[1], reverse=True)\n\n\nif __name__ == \"__main__\":\n    counter = {'a': 4, 'c': 3, 'b': 2, 'd': 1}\n    print(sort_count(counter))"
    },
    {
      "rank": 35,
      "score": 8.0,
      "candidate": "from collections import Counter\n\n\ndef count_sort(count):\n    \"\"\"Sort counter by value.\n\n    Args:\n        count: counter to sort\n\n    Returns:\n        sorted counter\n    \"\"\"\n    return Counter(sorted(count.items(), key=lambda x: x[1]))\n\n\ndef main():\n    count = Counter('abbbcccccc')\n    print(count_sort(count))\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 36,
      "score": 8.0,
      "candidate": "from collections import Counter\n\n\ndef sort_by_value(counter):\n    \"\"\"Sorts the counter by value.\"\"\"\n    return Counter(sorted(counter.items(), key=lambda x: x[1]))\n\n\nif __name__ == '__main__':\n    counter = Counter(sorted(input().split()))\n    print(sort_by_value(counter))"
    },
    {
      "rank": 37,
      "score": 8.0,
      "candidate": "from collections import Counter\n\ndef sort_by_count(counter):\n    return sorted(counter.items(), key=lambda x: x[1], reverse=True)\n\n\nif __name__ == '__main__':\n    counter = Counter({'a': 10, 'b': 5, 'c': 3, 'd': 4})\n    print(sort_by_count(counter))"
    },
    {
      "rank": 38,
      "score": 8.0,
      "candidate": "from collections import Counter\nfrom itertools import islice\nfrom typing import List\n\n\ndef sort_counter(counter: Counter) -> List[str]:\n    \"\"\"Returns a list of keys sorted by value.\"\"\"\n    return [key for key, _ in counter.most_common()]\n\n\nif __name__ == \"__main__\":\n    counter = Counter(islice(input(), 100))\n    print(\" \".join(sort_counter(counter)))"
    },
    {
      "rank": 39,
      "score": 8.0,
      "candidate": "from collections import Counter\nfrom collections import OrderedDict\n\ndef sort_count(counter):\n    \"\"\"Return a list of (value, key) tuples sorted by value.\"\"\"\n    # Sort by value, descending\n    # Sort by key, ascending\n    # Convert to list of tuples\n    return [(value, key) for key, value in counter.items()]\n\n\ndef test_cases():\n    counter = Counter([\"a\", \"a\", \"b\", \"c\", \"c\", \"c\"])\n    assert sort_count(counter) == [\n        (3, \"c\"),\n        (2, \"a\"),\n        (1, \"b\"),\n    ]\n\n    counter = Counter([\"b\", \"b\", \"b\", \"a\", \"a\", \"a\", \"d\", \"d\"])\n    assert sort_count(counter) == [\n        (3, \"a\"),\n        (2, \"b\"),\n        (2, \"d\"),\n        (1, \"a\"),\n    ]\n\n    counter = Counter([\"c\", \"c\", \"c\", \"b\", \"b\", \"a\"])\n    assert sort_count(counter) == [\n        (3, \"c\"),\n        (2, \"b\"),\n        (1, \"a\"),\n    ]\n\n    counter = Counter([\"c\", \"c\", \"b\", \"b\", \"a\", \"a\", \"a\"])\n    assert sort_count(counter) == [\n        (3, \"c\"),\n        (2, \"b\"),\n        (3, \"a\"),\n    ]\n\n    print(\"Test Success!\")\n\n\nif __name__ == \"__main__\":\n    test_cases()"
    },
    {
      "rank": 40,
      "score": 8.0,
      "candidate": "def sort_count(c):\n    \"\"\"\n    :param c: counter\n    :return: list of sorted key-value pairs\n    \"\"\"\n    # convert counter into list of key-value pairs\n    pairs = list(c.items())\n    # sort by value\n    pairs.sort(key=lambda p: p[1])\n    # return list of sorted key-value pairs\n    return pairs\n\n\nif __name__ == '__main__':\n    # Example\n    c = {'a': 3, 'b': 5, 'c': 7, 'd': 9, 'e': 1}\n    print(sort_count(c))"
    },
    {
      "rank": 41,
      "score": 8.0,
      "candidate": "from collections import Counter\n\ndef sort_count(count):\n    return sorted(count.items(), key=lambda x: x[1], reverse=True)\n\n\ncount = Counter(input())\n\nfor i in sort_count(count):\n    print(i[0], i[1])"
    },
    {
      "rank": 42,
      "score": 8.0,
      "candidate": "from collections import Counter\n\n\ndef sort_count_by_value(counter):\n    \"\"\"\n    :param counter: Counter\n    :return: Counter\n    \"\"\"\n    return Counter(sorted(counter.items(), key=lambda x: x[1]))\n\n\ndef test_function():\n    assert sort_count_by_value(Counter({1: 3, 2: 2, 3: 1})) == Counter({3: 1, 2: 2, 1: 3})\n    assert sort_count_by_value(Counter({\"a\": 2, \"b\": 1, \"c\": 1, \"d\": 1})) == Counter({\"c\": 1, \"b\": 1, \"d\": 1, \"a\": 2})\n    assert sort_count_by_value(Counter({\"a\": 3, \"b\": 2, \"c\": 2, \"d\": 1})) == Counter({\"c\": 2, \"b\": 2, \"a\": 3, \"d\": 1})\n\n\nif __name__ == '__main__':\n    test_function()"
    },
    {
      "rank": 43,
      "score": 8.0,
      "candidate": "from collections import Counter\n\n\ndef sort_counter(counter):\n    return Counter(sorted(counter.items(), key=lambda x: x[1]))\n\n\nif __name__ == \"__main__\":\n    counter = Counter([1, 3, 5, 5, 3, 1, 3, 2, 1, 4, 2, 3, 1])\n    print(sort_counter(counter))"
    },
    {
      "rank": 44,
      "score": 8.0,
      "candidate": "# Time complexity: O(nlogn)\n# Space complexity: O(1)\ndef counter_sort(counter):\n    \"\"\"Sort the counter by value.\"\"\"\n    return sorted(counter.items(), key=lambda x: x[1], reverse=True)"
    },
    {
      "rank": 45,
      "score": 8.0,
      "candidate": "from collections import Counter\n\ndef counter_sort(counter):\n    \"\"\"\n    >>> counter_sort(Counter(\"bacb\"))\n    Counter({'b': 2, 'a': 1, 'c': 1})\n    \"\"\"\n    return Counter(dict(sorted(counter.items(), key=lambda x: x[1], reverse=True)))\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 46,
      "score": 8.0,
      "candidate": "from collections import Counter\nfrom itertools import chain\n\n\ndef sort_by_value(c: Counter) -> Counter:\n    \"\"\"Return a new counter sorted by value.\n\n    :param c: a counter\n    :return: a new counter sorted by value\n    \"\"\"\n    return Counter(dict(chain.from_iterable(\n        ((k, c[k]) for k in v) for v in\n        sorted(c.values(), reverse=True)\n    )))\n\n\nif __name__ == '__main__':\n    c = Counter(input().split())\n    print(*sort_by_value(c).elements(), sep='\\n')"
    },
    {
      "rank": 47,
      "score": 8.0,
      "candidate": "from collections import Counter\n\n\ndef sort_by_value(counter):\n    return Counter(sorted(counter.items(), key=lambda x: x[1], reverse=True))\n\n\nif __name__ == \"__main__\":\n    counter = Counter()\n    counter.update(\"banana\")\n    print(sort_by_value(counter))"
    },
    {
      "rank": 48,
      "score": 8.0,
      "candidate": "def sort_counter_by_value(counter):\n    # Your code here\n    # return sorted(counter.items(), key=lambda x: x[1])\n    return sorted(counter.items(), key=lambda x: x[1], reverse=True)\n\n\nif __name__ == '__main__':\n    print(sort_counter_by_value({'a': 3, 'b': 2, 'c': 1}))\n    print(sort_counter_by_value({'a': 1, 'b': 1, 'c': 1}))\n    print(sort_counter_by_value({'c': 1, 'b': 2, 'a': 3}))"
    },
    {
      "rank": 49,
      "score": 8.0,
      "candidate": "from collections import Counter\n\n\ndef sort_counter(counter):\n    \"\"\"\n    Sort counter by value\n    :type counter: Counter\n    :rtype: list[tuple]\n    \"\"\"\n    return sorted(counter.items(), key=lambda item: item[1], reverse=True)\n\n\ndef test_counter_sort():\n    assert sort_counter(Counter([1, 2, 3, 4, 5])) == [\n        (5, 1),\n        (4, 1),\n        (3, 1),\n        (2, 1),\n        (1, 1),\n    ]\n\n\nif __name__ == \"__main__\":\n    test_counter_sort()"
    },
    {
      "rank": 50,
      "score": 8.0,
      "candidate": "from collections import Counter\n\ndef sort_by_value(counter):\n    \"\"\"\n    Return a list of tuples sorted by the value.\n    \"\"\"\n    return sorted(counter.items(), key=lambda x: x[1], reverse=True)\n\ndef test_function():\n    assert sort_by_value(Counter('abracadabra')) == [('a', 5), ('r', 2), ('b', 2), ('d', 1), ('c', 1)]\n    assert sort_by_value(Counter({\"a\": 4, \"b\": 3, \"c\": 2, \"d\": 1})) == [('a', 4), ('b', 3), ('c', 2), ('d', 1)]\n    assert sort_by_value(Counter({\"a\": 4, \"b\": 2, \"c\": 5, \"d\": 3})) == [('c', 5), ('a', 4), ('b', 2), ('d', 3)]\n\nif __name__ == '__main__':\n    test_function()"
    },
    {
      "rank": 51,
      "score": 8.0,
      "candidate": "from collections import Counter\n\n\ndef sort_count_by_value(c: Counter) -> list:\n    return [k for k, _ in sorted(c.items(), key=lambda x: x[1], reverse=True)]\n\n\nif __name__ == \"__main__\":\n    c = Counter(\"aaaaabbbbbccccccdddddddd\")\n    print(sort_count_by_value(c))"
    },
    {
      "rank": 52,
      "score": 8.0,
      "candidate": "from collections import Counter\n\n\ndef sort_count_by_value(count):\n    return sorted(count.items(), key=lambda x: x[1], reverse=True)\n\n\ndef test_sort_count_by_value():\n    count = Counter([\"a\", \"b\", \"c\", \"a\"])\n    assert sort_count_by_value(count) == [(\"a\", 2), (\"c\", 1), (\"b\", 1)]\n\n\nif __name__ == \"__main__\":\n    test_sort_count_by_value()"
    },
    {
      "rank": 53,
      "score": 8.0,
      "candidate": "def sort_by_value(counter):\n    # Your code here\n    return sorted(counter, key=lambda x: x[1])\n\nif __name__ == '__main__':\n    counter = {\n        'a': 4,\n        'b': 3,\n        'c': 2,\n        'd': 1,\n    }\n    print(sort_by_value(counter))\n    # expected output: [('d', 1), ('c', 2), ('b', 3), ('a', 4)]"
    },
    {
      "rank": 54,
      "score": 8.0,
      "candidate": "from collections import Counter\n\ndef sort_by_value(c: Counter) -> Counter:\n    \"\"\"Sorts the counter by value.\n    \"\"\"\n    return Counter(sorted(c.items(), key=lambda x: x[1]))\n\nif __name__ == \"__main__\":\n    c = Counter([1, 2, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 5])\n    print(c)\n    print(sort_by_value(c))"
    },
    {
      "rank": 55,
      "score": 8.0,
      "candidate": "def sort_count(count):\n    \"\"\"\n    >>> count = Counter({'a': 5, 'b': 3, 'c': 1, 'd': 1})\n    >>> sort_count(count)\n    Counter({'a': 5, 'b': 3, 'c': 1, 'd': 1})\n    >>> count = Counter({'a': 1, 'b': 2, 'c': 3, 'd': 4})\n    >>> sort_count(count)\n    Counter({'d': 4, 'c': 3, 'b': 2, 'a': 1})\n    \"\"\"\n    return Counter(sorted(count.items(), key=lambda x: x[1]))\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 56,
      "score": 8.0,
      "candidate": "from collections import Counter\n\ndef sort_by_value(c: Counter) -> Counter:\n    \"\"\"Sorts the counter by value.\"\"\"\n    return Counter(sorted(c.items(), key=lambda x: x[1], reverse=True))\n\nif __name__ == \"__main__\":\n\n    c = Counter([\"a\", \"b\", \"c\", \"b\", \"a\", \"a\"])\n    print(sort_by_value(c))\n\n    c = Counter({\"a\": 2, \"b\": 2, \"c\": 3})\n    print(sort_by_value(c))"
    },
    {
      "rank": 57,
      "score": 8.0,
      "candidate": "from collections import Counter\nfrom typing import List\n\n\ndef get_sorted_count(counter: Counter) -> List[int]:\n    \"\"\"\n    >>> get_sorted_count(Counter('aabbcc'))\n    ['a', 'b', 'c']\n    \"\"\"\n    return [key for key, _ in counter.most_common()]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 58,
      "score": 8.0,
      "candidate": "from collections import Counter\n\ndef sort_counter(c: Counter) -> Counter:\n    return Counter(sorted(c.items(), key=lambda x: x[1]))\n\nif __name__ == \"__main__\":\n    c = Counter([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\"])\n    print(sort_counter(c))"
    },
    {
      "rank": 59,
      "score": 8.0,
      "candidate": "from collections import Counter\n\n\ndef sort_counter(counter):\n    return Counter(sorted(counter.items(), key=lambda x: x[1]))\n\n\nif __name__ == '__main__':\n    counter = Counter([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n    print(sort_counter(counter))"
    },
    {
      "rank": 60,
      "score": 8.0,
      "candidate": "from collections import Counter\n\n\ndef sort_count_by_value(counts):\n    return Counter(sorted(counts.items(), key=lambda x: x[1]))\n\n\nif __name__ == \"__main__\":\n    counts = Counter([\"a\", \"b\", \"c\", \"a\", \"b\", \"a\"])\n    print(counts)\n    print(sort_count_by_value(counts))"
    },
    {
      "rank": 61,
      "score": 8.0,
      "candidate": "from collections import Counter\n\n\ndef counter_sort(counter):\n    return Counter(sorted(counter.elements()))\n\n\nif __name__ == \"__main__\":\n    counter = Counter(input().split())\n    print(*counter_sort(counter))"
    },
    {
      "rank": 62,
      "score": 8.0,
      "candidate": "from collections import Counter\n\n\ndef sort_counter(count):\n    \"\"\"\n    Sort counter by value.\n    \"\"\"\n    return Counter(sorted(count.elements(), key=count.get, reverse=True))\n\n\nif __name__ == \"__main__\":\n    counter = Counter(\"aabbbcccc\")\n    print(counter)\n    print(sort_counter(counter))"
    },
    {
      "rank": 63,
      "score": 8.0,
      "candidate": "from collections import Counter\n\ndef sort_by_value(c):\n    return Counter(sorted(c.items(), key=lambda x: x[1]))\n\nc = Counter([\"a\", \"b\", \"c\", \"a\", \"b\"])\nprint(sort_by_value(c))"
    },
    {
      "rank": 64,
      "score": 8.0,
      "candidate": "def sort_counter(counter):\n    return sorted(counter.items(), key=lambda x: x[1], reverse=True)\n\n\nif __name__ == '__main__':\n    counter = {\n        'A': 5,\n        'B': 3,\n        'C': 1,\n    }\n    print(sort_counter(counter))"
    },
    {
      "rank": 65,
      "score": 8.0,
      "candidate": "from collections import Counter\n\n\ndef sort_counter(counter):\n    return Counter(sorted(counter.items(), key=lambda x: x[1]))\n\n\nif __name__ == '__main__':\n    c = Counter(input().split())\n    print(sort_counter(c))"
    },
    {
      "rank": 66,
      "score": 8.0,
      "candidate": "from collections import Counter\n\n\ndef sort_counter(c):\n    return {k: v for k, v in sorted(c.items(), key=lambda item: item[1])}\n\n\nif __name__ == \"__main__\":\n    c = Counter()\n    c.update(\"abracadabra\")\n    print(sort_counter(c))"
    },
    {
      "rank": 67,
      "score": 3.0,
      "candidate": "from collections import Counter\n\n\ndef sort_counter(counter):\n    return Counter(sorted(counter.items(), key=lambda x: x[1]))\n\n\nif __name__ == \"__main__\":\n    c1 = Counter([\"a\", \"b\", \"c\", \"b\", \"d\", \"e\", \"c\"])\n    assert sort_counter(c1) == Counter({\"c\": 2, \"b\": 2, \"a\": 1, \"d\": 1, \"e\": 1})\n\n    c2 = Counter({\"a\": 100, \"b\": 1, \"c\": 2, \"d\": 1, \"e\": 1})\n    assert sort_counter(c2) == Counter({\"a\": 100, \"c\": 2, \"b\": 1, \"d\": 1, \"e\": 1})"
    },
    {
      "rank": 68,
      "score": 2.0,
      "candidate": "# Time: O(nlog(n))\n# Space: O(n)\n# Using min heap.\nclass Solution(object):\n    def topKFrequent(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: List[int]\n        \"\"\"\n        counter = collections.Counter(nums)\n        return [x[0] for x in sorted(counter.items(), key=lambda x: (-x[1], x[0]))][:k]\n\n\n# Time: O(nlog(n))\n# Space: O(n)\n# Using max heap.\nclass Solution(object):\n    def topKFrequent(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: List[int]\n        \"\"\"\n        counter = collections.Counter(nums)\n        return heapq.nlargest(k, counter.keys(), key=counter.get)\n\n\n# Time: O(n)\n# Space: O(n)\n# Using bucket sort.\nclass Solution(object):\n    def topKFrequent(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: List[int]\n        \"\"\"\n        counter = collections.Counter(nums)\n        buckets = [[] for _ in range(len(nums)+1)]\n\n        for key, val in counter.items():\n            buckets[val].append(key)\n\n        result = []\n        for b in buckets[::-1]:\n            for e in b:\n                result.append(e)\n                if len(result) == k:\n                    return result\n\n        return result"
    },
    {
      "rank": 69,
      "score": 2.0,
      "candidate": "from collections import Counter\n\n\ndef sort_counter(c):\n    return sorted(c, key=c.get, reverse=True)\n\n\ndef test_sort_counter():\n    c = Counter([\"a\", \"a\", \"b\", \"b\", \"c\", \"c\"])\n    assert sort_counter(c) == [\"c\", \"b\", \"a\"]"
    },
    {
      "rank": 70,
      "score": 1.0,
      "candidate": "def sort_count_by_value(counter):\n    return sorted(counter.items(), key=lambda x: x[1], reverse=True)\n\n\nif __name__ == '__main__':\n    counter = {'a': 10, 'c': 3, 'b': 2}\n    assert sort_count_by_value(counter) == [('c', 3), ('b', 2), ('a', 10)]"
    },
    {
      "rank": 71,
      "score": 1.0,
      "candidate": "from collections import Counter\n\n\ndef sort_counter(counter):\n    \"\"\"\n    :param counter: Counter\n    :return: Counter\n    \"\"\"\n    # return Counter(sorted(counter.items(), key=lambda x: x[1]))\n    return Counter(sorted(counter.items(), key=lambda x: x[1], reverse=True))\n\n\nif __name__ == \"__main__\":\n    counter = Counter([\"a\", \"b\", \"c\", \"b\", \"c\"])\n    print(counter)\n    print(sort_counter(counter))"
    },
    {
      "rank": 72,
      "score": 1.0,
      "candidate": "from collections import Counter\n\n\ndef sort_counter(counter):\n    return Counter(sorted(counter.elements()))\n\n\nif __name__ == \"__main__\":\n    print(sort_counter(Counter(\"aaabbc\")))"
    },
    {
      "rank": 73,
      "score": 1.0,
      "candidate": "def sort_counter(counter):\n    return sorted(counter, key=lambda x: counter[x], reverse=True)\n\n\nif __name__ == \"__main__\":\n    counter = {\"a\": 10, \"b\": 3, \"c\": 2}\n    print(sort_counter(counter))"
    },
    {
      "rank": 74,
      "score": 1.0,
      "candidate": "def sort_by_value(counter):\n    \"\"\"\n    :param counter: Counter\n    :return: List of tuples\n    \"\"\"\n    return sorted(counter.items(), key=lambda x: x[1], reverse=True)\n\n\nif __name__ == '__main__':\n    print(sort_by_value({'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5, 'f': 6, 'g': 7, 'h': 8, 'i': 9, 'j': 10, 'k': 11, 'l': 12, 'm': 13, 'n': 14, 'o': 15, 'p': 16, 'q': 17, 'r': 18, 's': 19, 't': 20, 'u': 21, 'v': 22, 'w': 23, 'x': 24, 'y': 25, 'z': 26}))"
    },
    {
      "rank": 75,
      "score": 1.0,
      "candidate": "from collections import Counter\n\n\ndef sort_count(counters):\n    return Counter(counters).most_common()\n\n\nif __name__ == '__main__':\n    c = Counter({'a': 3, 'b': 1, 'c': 2})\n    assert sort_count(c) == [('b', 1), ('c', 2), ('a', 3)]"
    },
    {
      "rank": 76,
      "score": 1.0,
      "candidate": "def sort_by_value(c):\n    # return sorted(c.items(), key=lambda x: x[1])\n    return sorted(c.items(), key=lambda x: x[1], reverse=True)\n\n\nif __name__ == \"__main__\":\n    print(sort_by_value({\"a\": 1, \"b\": 2, \"c\": 3}))\n    print(sort_by_value({\"a\": 2, \"b\": 1, \"c\": 3}))"
    },
    {
      "rank": 77,
      "score": 1.0,
      "candidate": "from collections import Counter\nfrom typing import Dict\n\n\ndef sort_dict_by_value(dict_: Dict) -> Dict:\n    \"\"\"Sorts dictionary by value.\n\n    Args:\n        dict_ (Dict): Dictionary to sort.\n\n    Returns:\n        Dict: Sorted dictionary by value.\n    \"\"\"\n    return {k: v for k, v in sorted(dict_.items(), key=lambda item: item[1], reverse=True)}\n\n\nif __name__ == \"__main__\":\n    counter = Counter([\"a\", \"b\", \"c\", \"a\", \"b\", \"c\", \"a\"])\n    print(counter)\n    print(sort_dict_by_value(counter))"
    },
    {
      "rank": 78,
      "score": 1.0,
      "candidate": "from collections import Counter\n\n\ndef sort_count(count: Counter) -> Counter:\n    \"\"\"Sorts a counter object by value.\n\n    Args:\n        count (Counter): The counter to sort\n\n    Returns:\n        Counter: The sorted counter\n    \"\"\"\n    return Counter(sorted(count.items(), key=lambda x: x[1]))\n\n\nif __name__ == \"__main__\":\n    count = Counter([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"e\", \"f\", \"f\"])\n    print(sort_count(count))"
    },
    {
      "rank": 79,
      "score": 1.0,
      "candidate": "from collections import Counter\n\n\ndef sort_counter_by_value(counter):\n    \"\"\"\n    :param counter: Counter\n    :return: List of tuples\n\n    Sort a counter by its value\n    \"\"\"\n    if not isinstance(counter, Counter):\n        raise ValueError(\"Counter must be an instance of Counter\")\n\n    # return counter.most_common()\n    return sorted(counter.items(), key=lambda x: x[1], reverse=True)"
    },
    {
      "rank": 80,
      "score": 1.0,
      "candidate": "from collections import Counter\n\n\ndef sort_counter(c: Counter) -> Counter:\n    \"\"\"Returns a counter sorted by value.\n\n    Args:\n        c (Counter): counter to be sorted\n\n    Returns:\n        Counter: sorted counter\n    \"\"\"\n    return Counter(dict(sorted(c.items(), key=lambda x: x[1], reverse=True)))\n\n\nif __name__ == \"__main__\":\n    c = Counter({\"a\": 1, \"b\": 2, \"c\": 3, \"d\": 4})\n    print(sort_counter(c))"
    },
    {
      "rank": 81,
      "score": 1.0,
      "candidate": "from collections import Counter\n\n\ndef sort_counter(counter: Counter) -> Counter:\n    \"\"\"Sort counter by value.\n\n    Args:\n        counter (Counter): counter to be sorted\n\n    Returns:\n        Counter: sorted counter\n    \"\"\"\n    return Counter(sorted(counter.items(), key=lambda x: x[1]))\n\n\nif __name__ == \"__main__\":\n    counter = Counter([\"a\", \"b\", \"c\", \"d\", \"a\", \"c\"])\n    print(sort_counter(counter))"
    },
    {
      "rank": 82,
      "score": 1.0,
      "candidate": "from collections import Counter\n\n\ndef sort_by_value(counter):\n    \"\"\"Sorts counter by value.\n\n    Args:\n        counter (collections.Counter): a counter to be sorted.\n\n    Returns:\n        collections.Counter: a counter sorted by value.\n    \"\"\"\n    return Counter(dict(sorted(counter.items(), key=lambda item: item[1])))\n\n\nif __name__ == '__main__':\n    c = Counter(dict(sorted(Counter('hello world').items(), key=lambda item: item[1])))\n    print(sort_by_value(c))"
    },
    {
      "rank": 83,
      "score": 1.0,
      "candidate": "def sort_counter(counter):\n    \"\"\"Sort counter by value.\n\n    Args:\n        counter: Counter object\n\n    Returns:\n        Sorted Counter object\n    \"\"\"\n    return Counter(sorted(counter.elements(), key=counter.__getitem__, reverse=True))\n\n\nif __name__ == \"__main__\":\n    from collections import Counter\n\n    counter = Counter({\"a\": 5, \"b\": 3, \"c\": 2, \"d\": 1})\n    print(sort_counter(counter))"
    },
    {
      "rank": 84,
      "score": 1.0,
      "candidate": "def sort_by_value(counter):\n    \"\"\"\n    :param counter: Counter object\n    :return: list of tuples\n    \"\"\"\n    # return sorted(counter.items(), key=lambda x: x[1])\n    return sorted(counter.items(), key=lambda x: x[1], reverse=True)\n\n\nif __name__ == '__main__':\n    from collections import Counter\n    counter = Counter()\n    counter['a'] = 10\n    counter['b'] = 5\n    counter['c'] = 3\n    print(sort_by_value(counter))"
    },
    {
      "rank": 85,
      "score": 1.0,
      "candidate": "from collections import Counter\n\ndef sort_by_value(counter):\n    return Counter(sorted(counter.items(), key=lambda x: x[1]))\n\nprint(sort_by_value(Counter([1, 2, 3, 4, 5, 6, 7, 8, 9])))\n\n# Alternative implementation\nfrom collections import Counter, OrderedDict\n\ndef sort_by_value2(counter):\n    return OrderedDict(sorted(counter.items(), key=lambda x: x[1]))\n\nprint(sort_by_value2(Counter([1, 2, 3, 4, 5, 6, 7, 8, 9])))"
    },
    {
      "rank": 86,
      "score": 1.0,
      "candidate": "from collections import Counter\n\n\ndef sort_counter_by_value(counter: Counter) -> list:\n    \"\"\"Sorts Counter by value.\n\n    Args:\n        counter (Counter): Counter to sort.\n\n    Returns:\n        list: sorted Counter.\n    \"\"\"\n    return sorted(counter.items(), key=lambda x: x[1], reverse=True)\n\n\nif __name__ == \"__main__\":\n    counter = Counter(\n        {\n            \"a\": 3,\n            \"b\": 2,\n            \"c\": 2,\n            \"d\": 1,\n            \"e\": 1,\n            \"f\": 1,\n            \"g\": 1,\n        }\n    )\n    print(sort_counter_by_value(counter))"
    },
    {
      "rank": 87,
      "score": 1.0,
      "candidate": "from collections import Counter\n\n\ndef sort_counter(counter):\n    \"\"\"\n    :param counter: Counter object\n    :return: Counter object sorted by value\n    \"\"\"\n    return Counter(sorted(counter.items(), key=lambda x: x[1]))\n\n\nif __name__ == '__main__':\n    c1 = Counter(a=100, b=12, c=45, d=67)\n    print(c1)\n    print(sort_counter(c1))"
    },
    {
      "rank": 88,
      "score": 1.0,
      "candidate": "def sort_counter_by_value(counter):\n    # type: (Counter) -> list\n    \"\"\"Sort counter by value.\n\n    Args:\n        counter (Counter): counter\n\n    Returns:\n        list: list of tuple\n\n    \"\"\"\n    return sorted(counter.items(), key=lambda x: x[1], reverse=True)"
    },
    {
      "rank": 89,
      "score": 1.0,
      "candidate": "# This is the dict we will sort\ncounters = {\n    \"a\": 10,\n    \"b\": 8,\n    \"c\": 6,\n    \"d\": 12,\n    \"e\": 5,\n    \"f\": 4,\n    \"g\": 2\n}\n\n\ndef sort_counter(counters):\n    return sorted(counters.items(), key=lambda x: x[1], reverse=True)\n\n\nprint(sort_counter(counters))"
    },
    {
      "rank": 90,
      "score": 1.0,
      "candidate": "from collections import Counter\n\n\ndef sort_by_value(counter):\n    \"\"\"Return sorted counter by value.\n\n    :param counter: Counter object\n    :type counter: Counter\n    :return: sorted counter by value\n    :rtype: Counter\n    \"\"\"\n    return Counter(dict(sorted(counter.items(), key=lambda item: item[1])))\n\n\nif __name__ == \"__main__\":\n    print(sort_by_value(Counter([\"a\", \"b\", \"c\", \"d\", \"e\"])))"
    },
    {
      "rank": 91,
      "score": 1.0,
      "candidate": "from collections import Counter\n\n\ndef sort_count(count):\n    return Counter(count).most_common()\n\n\nif __name__ == \"__main__\":\n    c = Counter([1, 2, 3, 4, 4, 3, 2, 1])\n    print(sort_count(c))"
    },
    {
      "rank": 92,
      "score": 1.0,
      "candidate": "from collections import Counter\n\n\ndef sort_count(c: Counter) -> dict:\n    return {k: v for k, v in sorted(c.items(), key=lambda item: item[1], reverse=True)}\n\n\nif __name__ == \"__main__\":\n    c = Counter()\n    c[\"a\"] = 2\n    c[\"b\"] = 3\n    c[\"c\"] = 1\n    print(sort_count(c))"
    },
    {
      "rank": 93,
      "score": 1.0,
      "candidate": "from collections import Counter\n\n\ndef sort_counter(counter):\n    \"\"\"\n    Sorts the counter by the values.\n    :param counter: Counter\n    :return: sorted counter\n    \"\"\"\n    return Counter(sorted(counter.items(), key=lambda x: x[1]))"
    },
    {
      "rank": 94,
      "score": 1.0,
      "candidate": "def sort_counter(counter):\n    # your code here\n    return sorted(counter.items(), key=lambda x: x[1], reverse=True)\n\nif __name__ == '__main__':\n    print(\"Example:\")\n    print(list(sort_counter({'a': 4, 'b': 3, 'c': 2, 'd': 1})))\n\n    # These \"asserts\" are used for self-checking and not for an auto-testing\n    assert list(sort_counter({'a': 4, 'b': 3, 'c': 2, 'd': 1})) == [('d', 1), ('c', 2), ('b', 3), ('a', 4)]\n    assert list(sort_counter({'a': 4, 'b': 2, 'c': 3, 'd': 1})) == [('d', 1), ('c', 3), ('b', 2), ('a', 4)]\n    assert list(sort_counter({'a': 1, 'b': 1, 'c': 1, 'd': 1})) == [('d', 1), ('c', 1), ('b', 1), ('a', 1)]\n    assert list(sort_counter({'a': 2, 'b': 1, 'c': 1, 'd': 1})) == [('b', 1), ('d', 1), ('a', 2), ('c', 1)]\n    assert list(sort_counter({'a': 12, 'b': 10, 'c': 9, 'd': 2})) == [('d', 2), ('c', 9), ('b', 10), ('a', 12)]\n    print(\"Coding complete? Click 'Check' to earn cool rewards!\")"
    },
    {
      "rank": 95,
      "score": 1.0,
      "candidate": "def sort_counter(counter):\n    # Your code here\n    pass\n\n\nif __name__ == '__main__':\n    counter = {\n        'a': 4,\n        'b': 3,\n        'c': 2,\n        'd': 1\n    }\n    print(sort_counter(counter))\n    # Expected result: ['d', 'c', 'b', 'a']\n\n    counter = {\n        'a': 1,\n        'b': 3,\n        'c': 2\n    }\n    print(sort_counter(counter))\n    # Expected result: ['c', 'b', 'a']"
    },
    {
      "rank": 96,
      "score": 1.0,
      "candidate": "from collections import Counter\n\n\ndef sort_by_value(counter):\n    \"\"\"\n    :type counter: Counter\n    :rtype: Counter\n    \"\"\"\n    return Counter(sorted(counter.items(), key=lambda x: x[1]))\n\n\ndef main():\n    pass\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 97,
      "score": 1.0,
      "candidate": "from collections import Counter\n\ndef sort_counter(counter):\n    \"\"\"\n    Sort a counter by value.\n    \"\"\"\n    return Counter(sorted(counter.items(), key=lambda x: x[1]))\n\ndef test_sort_counter():\n    \"\"\"\n    Test sort_counter function.\n    \"\"\"\n    assert sort_counter({'a': 4, 'b': 3, 'c': 2, 'd': 1}) == {'d': 1, 'c': 2, 'b': 3, 'a': 4}\n    assert sort_counter({'a': 1, 'b': 2, 'c': 3, 'd': 4}) == {'d': 4, 'c': 3, 'b': 2, 'a': 1}"
    },
    {
      "rank": 98,
      "score": 1.0,
      "candidate": "from collections import Counter\n\n\ndef sort_by_value(c: Counter) -> Counter:\n    \"\"\"Return a new Counter sorted by value.\n\n    Args:\n        c (Counter): The counter to sort\n\n    Returns:\n        Counter: A new Counter sorted by value\n    \"\"\"\n    return Counter(sorted(c.items(), key=lambda x: x[1]))\n\n\nif __name__ == \"__main__\":\n    c = Counter([\"a\", \"b\", \"c\", \"d\", \"a\", \"b\", \"c\", \"d\"])\n    print(c)\n    print(sort_by_value(c))"
    },
    {
      "rank": 99,
      "score": 1.0,
      "candidate": "from collections import Counter\n\n\ndef sort_counter(counter):\n    return Counter(sorted(counter.elements(), reverse=True))\n\n\nif __name__ == \"__main__\":\n    counter = Counter({\"a\": 2, \"b\": 1, \"c\": 1})\n    assert sort_counter(counter) == Counter({\"a\": 2, \"c\": 1, \"b\": 1})"
    },
    {
      "rank": 100,
      "score": 1.0,
      "candidate": "from collections import Counter\n\n\ndef sort_by_value(counter: Counter) -> Counter:\n    \"\"\"Sort a counter by value.\n\n    Args:\n        counter (Counter): a counter to sort\n\n    Returns:\n        Counter: a counter sorted by value\n    \"\"\"\n    return Counter(sorted(counter.items(), key=lambda x: x[1], reverse=True))\n\n\nif __name__ == \"__main__\":\n    counter = Counter({\"a\": 4, \"b\": 3, \"c\": 2, \"d\": 1})\n    print(sort_by_value(counter))"
    }
  ]
}