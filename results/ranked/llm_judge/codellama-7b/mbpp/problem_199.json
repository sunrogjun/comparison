{
  "timestamp": "2025-09-14T23:48:14.377942",
  "method": "improved_llm_judge",
  "judge_model": "codellama/CodeLlama-7b-Python-hf",
  "target_model": "codellama-7b",
  "dataset": "mbpp",
  "problem_number": 199,
  "total_candidates": 100,
  "results": [
    {
      "rank": 1,
      "score": 10.0,
      "candidate": "import re\n\n\ndef check(string):\n    if re.match(r\"^[a-zA-Z0-9]+$\", string):\n        return True\n    else:\n        return False\n\n\nif __name__ == '__main__':\n    result = check(\"abcdefghijklmnopqrstuvwxyz\")\n    print(result)"
    },
    {
      "rank": 2,
      "score": 10.0,
      "candidate": "import re\ndef check_string(str):\n    if re.match(\"[a-z0-9]*\", str) and re.match(\"[a-z]*\", str) and re.match(\"[0-9]*\", str):\n        print(\"True\")\n    else:\n        print(\"False\")\n\ncheck_string(\"abcdefghijklmnopqrstuvwxyz\")\ncheck_string(\"abcdefghijklmnopqrstuvwxyz0123456789\")\ncheck_string(\"abcdefghijklmnopqrstuvwxyz0123456789!@#$%^&*()\")\ncheck_string(\"abcdefghijklmnopqrstuvwxyz0123456789!@#$%^&*()abcdefghijklmnopqrstuvwxyz0123456789!@#$%^&*()\")\ncheck_string(\"abcdefghijklmnopqrstuvwxyz0123456789!@#$%^&*()abcdefghijklmnopqrstuvwxyz0123456789!@#$%^&*()abcdefghijklmnopqrstuvwxyz0123456789!@#$%^&*()\")"
    },
    {
      "rank": 3,
      "score": 10.0,
      "candidate": "import re\n\ndef check_regex(s):\n    pattern = re.compile(\"[a-z0-9]+\")\n    return pattern.fullmatch(s)\n\nif __name__ == '__main__':\n    print(check_regex(\"abcdefghijklmnopqrstuvwxyz\"))\n    print(check_regex(\"abcdefghijklmnopqrstuvwxyz0123456789\"))"
    },
    {
      "rank": 4,
      "score": 10.0,
      "candidate": "import re\n\ndef check_characters(string):\n    pattern = re.compile(\"^[a-zA-Z0-9]+$\")\n    return pattern.match(string)\n\n\nif __name__ == '__main__':\n    print(check_characters('abcdefghijklmnopqrstuvwxyz'))\n    print(check_characters('abcdefghijklmnopqrstuvwxyz1234567890'))\n    print(check_characters('abcdefghijklmnopqrstuvwxyz!@#$%^&*()'))\n    print(check_characters('abcdefghijklmnopqrstuvwxyz-'))\n    print(check_characters('abcdefghijklmnopqrstuvwxyz_'))\n    print(check_characters('abcdefghijklmnopqrstuvwxyz0123456789'))\n    print(check_characters('abcdefghijklmnopqrstuvwxyz0123456789-_'))"
    },
    {
      "rank": 5,
      "score": 10.0,
      "candidate": "import re\n\ndef check(text, pattern):\n    regex = re.compile(pattern)\n    return regex.search(text) is not None"
    },
    {
      "rank": 6,
      "score": 10.0,
      "candidate": "import re\n\ndef check_regex(input_str):\n    if re.match(\"[a-zA-Z0-9]+\", input_str):\n        print(\"YES\")\n    else:\n        print(\"NO\")\n\n\nif __name__ == '__main__':\n    test_cases = int(input())\n    for test_case in range(test_cases):\n        input_str = input()\n        check_regex(input_str)"
    },
    {
      "rank": 7,
      "score": 10.0,
      "candidate": "import re\n\ndef check_characters(string):\n    return bool(re.match(\"^[a-zA-Z0-9]*$\", string))\n\n\nif __name__ == '__main__':\n    print(check_characters('python8989'))\n    print(check_characters('python@90'))"
    },
    {
      "rank": 8,
      "score": 10.0,
      "candidate": "import re\n\ndef validate_with_regex(input_str):\n    pattern = re.compile(\"^[a-zA-Z0-9]+$\")\n    result = pattern.match(input_str)\n    return result\n\nif __name__ == '__main__':\n    print(validate_with_regex('abcdefghijklmnopqrstuvwxyz'))\n    print(validate_with_regex('ABCDEFGHIJKLMNOPQRSTUVWXYZ'))\n    print(validate_with_regex('1234567890'))\n    print(validate_with_regex('abcdefghijklmnopqrstuvwxyz1234567890'))\n\n    print(validate_with_regex('abcdefghijklmnopqrstuvwxyz!@#$%'))"
    },
    {
      "rank": 9,
      "score": 10.0,
      "candidate": "import re\n\n\ndef check_regex_pattern(regex, string):\n    pattern = re.compile(regex)\n    return pattern.match(string)\n\n\nif __name__ == '__main__':\n    print(check_regex_pattern(r'^[a-zA-Z0-9]+$', 'q234we123'))"
    },
    {
      "rank": 10,
      "score": 9.370583536698913,
      "candidate": "import re\n\n\ndef check_characters(string):\n    pattern = re.compile(r'[a-z0-9]+')\n    return bool(pattern.match(string))\n\n\nif __name__ == '__main__':\n    print(check_characters(\"abc123\"))\n    print(check_characters(\"abc123!\"))"
    },
    {
      "rank": 11,
      "score": 9.234050852198141,
      "candidate": "import re\n\npattern = re.compile(r\"[a-z0-9]+\")\n\n\ndef only_az_AZ_09(inp_str):\n    return pattern.fullmatch(inp_str)\n\n\nif __name__ == \"__main__\":\n    print(only_az_AZ_09(\"abcdefghijklmnopqrstuvwxyz\"))\n    print(only_az_AZ_09(\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"))\n    print(only_az_AZ_09(\"0123456789\"))\n    print(only_az_AZ_09(\"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\"))\n    print(only_az_AZ_09(\"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789 \"))\n    print(only_az_AZ_09(\"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789_\"))\n    print(only_az_AZ_09(\"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789_ \"))\n    print(only_az_AZ_09(\"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789_-\"))\n    print(only_az_AZ_09(\"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789_- \"))"
    },
    {
      "rank": 12,
      "score": 9.226766272351448,
      "candidate": "import re\n\ndef check_string(string):\n    return re.search(\"^[a-zA-Z0-9]*$\", string)\n\nprint(check_string(\"abcdefghijklmnopqrstuvwxyz\"))\nprint(check_string(\"abcdefghijklmnopqrstuvwxyz1234567890\"))\nprint(check_string(\"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\"))\nprint(check_string(\"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\"))\nprint(check_string(\"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789??\"))\nprint(check_string(\"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789@@\"))\nprint(check_string(\"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789@@@\"))\nprint(check_string(\"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789@@@@@\"))\nprint(check_string(\"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789@@@@@@@\"))\nprint(check_string(\"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789@@@@@@@@@\"))\nprint(check_string(\"abcdefghijklmnopqrstuvwxyzABCDEF"
    },
    {
      "rank": 13,
      "score": 9.21346272767743,
      "candidate": "import re\ndef check_char(string):\n    \"\"\"\n    >>> check_char('abcd1234')\n    True\n    \"\"\"\n    regex = re.compile(r'[^a-z0-9]')\n    return not regex.search(string)\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 14,
      "score": 9.205959372648458,
      "candidate": "import re\ndef check_user(string):\n    pattern = re.compile(\"[a-zA-Z0-9]+\")\n    result = re.fullmatch(pattern, string)\n    if result:\n        return True\n    return False\n\nprint(check_user(\"asd\"))\nprint(check_user(\"asd123\"))\nprint(check_user(\"asd123!\"))"
    },
    {
      "rank": 15,
      "score": 9.183391466815202,
      "candidate": "import re\n\ndef check(string):\n    return bool(re.match(\"^[a-z0-9]*$\", string))\n\nprint(check(\"abc123\"))\nprint(check(\"abc123!\"))"
    },
    {
      "rank": 16,
      "score": 9.177268828905222,
      "candidate": "import re\n\n\ndef check_regex(input_str):\n    return re.match(\"^[a-z0-9]*$\", input_str)\n\n\ndef check_regex2(input_str):\n    return re.fullmatch(\"[a-z0-9]*\", input_str)\n\n\ndef check_regex3(input_str):\n    return re.search(\"^[a-z0-9]*$\", input_str)\n\n\ndef check_regex4(input_str):\n    return re.match(\"^[a-z0-9]*$\", input_str) is not None\n\n\ndef check_regex5(input_str):\n    return re.fullmatch(\"[a-z0-9]*\", input_str) is not None\n\n\ndef check_regex6(input_str):\n    return re.search(\"^[a-z0-9]*$\", input_str) is not None\n\n\nif __name__ == \"__main__\":\n    print(check_regex(\"abc\"))\n    print(check_regex(\"abc123\"))\n    print(check_regex(\"abc 123\"))\n    print(check_regex(\"abc123!\"))\n\n    print(check_regex2(\"abc\"))\n    print(check_regex2(\"abc123\"))\n    print(check_regex2(\"abc 123\"))\n    print(check_regex2(\"abc123!\"))\n\n    print(check_regex3(\"abc\"))\n    print(check_regex3(\"abc123\"))\n    print(check_regex3(\"abc 123\"))\n    print(check_regex3(\"abc123!\"))\n\n    print(check_regex4(\"abc\"))\n    print(check_regex4(\"abc123\"))\n    print(check_regex4(\"abc 123\"))\n    print(check_regex4(\"abc123!\"))\n\n    print(check_regex5(\"abc\"))\n    print(check_regex5(\"abc123\"))\n    print(check_regex5(\"abc 123\"))\n    print(check_regex5(\"abc123!\"))\n\n    print"
    },
    {
      "rank": 17,
      "score": 9.122564458729856,
      "candidate": "import re\n\n\ndef check_string(string):\n    return bool(re.match(\"^[a-zA-Z0-9]*$\", string))"
    },
    {
      "rank": 18,
      "score": 8.973005557553902,
      "candidate": "import re\n\ndef check(string):\n    return bool(re.search(r\"^[a-zA-Z0-9]+$\", string))\n\nprint(check(\"abcd1234\")) # True\nprint(check(\"abcd 1234\")) # False\nprint(check(\"abcd-1234\")) # False\nprint(check(\"\")) # True\nprint(check(\"a\")) # True\nprint(check(\"A\")) # False\nprint(check(\"1234567890\")) # True\nprint(check(\"aBcDeFgH12345\")) # True\nprint(check(\"abcd-1234\")) # False\nprint(check(\"abcde12345\")) # True\nprint(check(\"abcde1234567890\")) # False"
    },
    {
      "rank": 19,
      "score": 8.95994420569242,
      "candidate": "import re\n\n\ndef check_str_contain_only_chars(string):\n    return bool(re.search(\"^[a-zA-Z0-9]*$\", string))\n\n\nprint(check_str_contain_only_chars(\"123abcABC\"))\nprint(check_str_contain_only_chars(\"123abcABCXYZ\"))"
    },
    {
      "rank": 20,
      "score": 8.946210893390457,
      "candidate": "import re\n\n\ndef check_regex(input_str):\n    pattern = re.compile(r\"[a-z0-9]+\")\n    return pattern.fullmatch(input_str)\n\n\nif __name__ == \"__main__\":\n    print(check_regex(\"this is a string1\"))\n    print(check_regex(\"this is a string\"))"
    },
    {
      "rank": 21,
      "score": 8.932217008005624,
      "candidate": "import re\n\ndef check(string):\n    return bool(re.search(\"^[a-zA-Z0-9]*$\", string))\n\nif __name__ == '__main__':\n    result = check(\"Python\")\n    print(result)\n\n    result = check(\"Python123\")\n    print(result)\n\n    result = check(\"Python123$\")\n    print(result)"
    },
    {
      "rank": 22,
      "score": 8.910084504002544,
      "candidate": "import re\n\ndef check_string_regex(s):\n    return re.match(\"^[a-z0-9]*$\", s)\n\ndef check_string_no_regex(s):\n    return all(x.isalnum() for x in s)\n\nif __name__ == '__main__':\n    print(check_string_regex(\"abcdef\"))\n    print(check_string_regex(\"abcdef!\"))\n    print(check_string_regex(\"abcdef1\"))\n    print(check_string_no_regex(\"abcdef\"))\n    print(check_string_no_regex(\"abcdef!\"))\n    print(check_string_no_regex(\"abcdef1\"))"
    },
    {
      "rank": 23,
      "score": 8.902145503295483,
      "candidate": "import re\n\ndef check_for_valid_chars(string):\n    pattern = r\"[a-zA-Z0-9]+\"\n    return re.match(pattern, string) is not None\n\nprint(check_for_valid_chars(\"abc\"))\nprint(check_for_valid_chars(\"abc123\"))\nprint(check_for_valid_chars(\"abc123!@#\"))"
    },
    {
      "rank": 24,
      "score": 8.85571690049604,
      "candidate": "import re\ndef check(input_str):\n    return bool(re.match(\"^[a-zA-Z0-9]*$\", input_str))\n\nprint(check(\"abc123\")) # True\nprint(check(\"abc!23\")) # False\nprint(check(\"abc@23\")) # False\nprint(check(\"abc123abc123abc123abc123abc123abc123abc123abc123\")) # True\nprint(check(\"abc123abc123abc123abc123abc123abc123abc123abc123!\")) # False"
    },
    {
      "rank": 25,
      "score": 8.855395696632057,
      "candidate": "import re\ndef check(string):\n    return bool(re.match(r'^[a-zA-Z0-9]*$', string))\n\nprint(check('abc123')) # True\nprint(check('abc123@')) # False\nprint(check('abc123!')) # False\nprint(check('abc123@!')) # False\nprint(check('abc123@!123abc')) # True"
    },
    {
      "rank": 26,
      "score": 8.850707355641543,
      "candidate": "import re\n\n\ndef check_characters(regex, string):\n    return re.search(regex, string)"
    },
    {
      "rank": 27,
      "score": 8.8281618090209,
      "candidate": "import re\n\n\ndef check_string(s):\n    return bool(re.match(\"^[a-zA-Z0-9]*$\", s))\n\n\ndef main():\n    print(check_string(\"123abc\"))\n    print(check_string(\"abc\"))\n    print(check_string(\"abc!@\"))\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 28,
      "score": 8.81367773444215,
      "candidate": "import re\n\ndef check_char(string):\n    pattern = re.compile(\"^[a-z0-9]+$\")\n    return pattern.match(string)\n\ndef main():\n    string = input(\"Enter a string: \")\n    if check_char(string):\n        print(\"String contains only a-z and 0-9 characters\")\n    else:\n        print(\"String contains other characters than a-z and 0-9\")\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 29,
      "score": 8.76828871349479,
      "candidate": "import re\n\n\ndef check_char(regex, txt):\n    return re.search(regex, txt)\n\n\nprint(check_char(\"[a-z0-9]*\", \"qwqw\"))\nprint(check_char(\"[a-z0-9]*\", \"qwqw123\"))\nprint(check_char(\"[a-z0-9]*\", \"qwqw123a\"))"
    },
    {
      "rank": 30,
      "score": 8.750282588864879,
      "candidate": "import re\n\ndef check_characters(input_str):\n    return bool(re.match(r'^[a-zA-Z0-9]*$', input_str))"
    },
    {
      "rank": 31,
      "score": 8.715724466237427,
      "candidate": "import re\n\ndef check_string(input_str):\n    pattern = r\"^[a-zA-Z0-9]+$\"\n    result = re.match(pattern, input_str)\n    return result is not None\n\nprint(check_string(\"abc123\"))\nprint(check_string(\"abc@abc\"))\nprint(check_string(\"123abc\"))\nprint(check_string(\"abc@abc\"))\nprint(check_string(\"abc123abc\"))"
    },
    {
      "rank": 32,
      "score": 8.692801520950061,
      "candidate": "import re\n\ndef check_string(string):\n    return bool(re.match(\"^[a-z0-9]*$\", string))\n\nprint(check_string(\"abcdefghijklmnopqrstuvwxyz\"))\nprint(check_string(\"abcdefghijklmnopqrstuvwxyz1234567890\"))\nprint(check_string(\"abcdefghijklmnopqrstuvwxyz1234567890!@#$%^&*()\"))"
    },
    {
      "rank": 33,
      "score": 8.632293453617281,
      "candidate": "import re\n\n\ndef validate_string(string):\n    return bool(re.search(\"^[a-zA-Z0-9]+$\", string))\n\n\nprint(validate_string(\"abc123\"))\nprint(validate_string(\"abc123!\"))"
    },
    {
      "rank": 34,
      "score": 8.625262456968262,
      "candidate": "import re\n\ndef check(string):\n    return bool(re.match(r\"^[a-zA-Z0-9]*$\", string))\n\ndef main():\n    print(check(\"python\"))\n    print(check(\"python123\"))\n    print(check(\"python 123\"))\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 35,
      "score": 8.625142247198651,
      "candidate": "import re\n\ndef check(text):\n    return bool(re.match(r'^[a-zA-Z0-9]*$', text))\n\nprint(check(\"this is text\")) # False\nprint(check(\"this is text123\")) # True\nprint(check(\"this is text 123\")) # False\nprint(check(\"this is 123 text\")) # False"
    },
    {
      "rank": 36,
      "score": 8.623000730200317,
      "candidate": "import re\n\ndef is_valid(input_string):\n    return bool(re.match(r\"[a-zA-Z0-9]+\", input_string))\n\nprint(is_valid(\"Hello world\"))\nprint(is_valid(\"Hello world 123\"))\nprint(is_valid(\"Hello world 123!\"))"
    },
    {
      "rank": 37,
      "score": 8.616253589228675,
      "candidate": "import re\n\ndef check(input_str):\n    return bool(re.match(\"^[a-z0-9]+$\", input_str))\n\nprint(check(\"qwerty\"))\nprint(check(\"asdfgh\"))\nprint(check(\"zxcvbn\"))\nprint(check(\"qwertyuiop\"))\nprint(check(\"qwertyasdfghzxcvbnm\"))"
    },
    {
      "rank": 38,
      "score": 8.610076160146226,
      "candidate": "import re\ndef check_characters(string):\n    return bool(re.match(\"^[a-zA-Z0-9]*$\", string))\n\nprint(check_characters(\"This is string example....Wow!!!\")) # false\nprint(check_characters(\"This-is-string-example....Wow!!!\")) # false\nprint(check_characters(\"\")) # true\nprint(check_characters(\"02485-584-545\")) # true\nprint(check_characters(\".\")) # false\nprint(check_characters(\"..\")) # false\nprint(check_characters(\"...\")) # false\nprint(check_characters(\"....\")) # false\nprint(check_characters(\"-\")) # false\nprint(check_characters(\"+\")) # false\nprint(check_characters(\"e\")) # true\nprint(check_characters(\"abc\")) # true\nprint(check_characters(\"xyz\")) # true\nprint(check_characters(\"123\")) # true\nprint(check_characters(\" \")) # false\nprint(check_characters(\"   \")) # false\nprint(check_characters(\"$\")) # false\nprint(check_characters(\"$%^\")) # false\nprint(check_characters(\"aBc\")) # true"
    },
    {
      "rank": 39,
      "score": 8.608819999274287,
      "candidate": "import re\n\ndef validate(regex, text):\n    return bool(re.search(regex, text))\n\n\ndef main():\n    print(validate(r'^[a-zA-Z0-9]+$', 'python101'))\n    print(validate(r'^[a-zA-Z0-9]+$', 'python101!'))\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 40,
      "score": 8.606486429141842,
      "candidate": "import re\n\ndef check_input(input):\n    # Check that the input string contains only a-z, A-Z and 0-9\n    return re.match(\"^[a-zA-Z0-9]+$\", input)\n\nprint(check_input(\"abcdefghijklmnopqrstuvwxyz\"))\nprint(check_input(\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"))\nprint(check_input(\"1234567890\"))\nprint(check_input(\"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890\"))\nprint(check_input(\"abcdefghijklmnopqrstuvwxyz!@#$%^&*()\"))"
    },
    {
      "rank": 41,
      "score": 8.60156811074208,
      "candidate": "import re\ndef check_char(text):\n    return bool(re.match(r'[a-z0-9]+', text))\n\nprint(check_char('hello'))\nprint(check_char('h3ll0'))\nprint(check_char('h3ll0@'))"
    },
    {
      "rank": 42,
      "score": 8.565425580227462,
      "candidate": "import re\n\ndef check(string):\n    return bool(re.match(r'^[a-z0-9]*$', string))\n\ndef main():\n    assert check('abc') == True\n    assert check('abc123') == True\n    assert check('abc123.') == False\n    assert check('abc123!') == False\n    assert check('abc123?') == False\n    assert check('abc123@') == False\n    assert check('abc123#') == False\n    assert check('abc123$') == False\n    assert check('abc123%') == False\n    assert check('abc123^') == False\n    assert check('abc123&') == False\n    assert check('abc123*') == False\n    assert check('abc123(') == False\n    assert check('abc123)') == False\n    assert check('abc123_') == False\n    assert check('abc123+') == False\n    assert check('abc123-') == False\n    assert check('abc123=') == False\n    assert check('abc123\"') == False\n    assert check(\"abc123'\") == False\n    assert check('abc123\\\\') == False\n    assert check('abc123/') == False\n    assert check('abc123|') == False\n    assert check('abc123;') == False\n    assert check('abc123:') == False\n    assert check('abc123,') == False\n    assert check('abc123<') == False\n    assert check('abc123>') == False\n    assert check('abc123{') == False\n    assert check('abc123}') == False\n    assert check('abc123[') == False\n    assert check('abc123]') == False\n    assert check('abc123.') == False\n    assert check('abc123!') == False\n    assert check('abc123?') == False\n    assert check('abc123@') == False\n    assert check('abc123#"
    },
    {
      "rank": 43,
      "score": 8.548876241946822,
      "candidate": "import re\n\ndef check_characters(input_str):\n    if re.match(\"^[a-z0-9]*$\", input_str):\n        return True\n    else:\n        return False\n\nprint(check_characters(\"abc\"))\nprint(check_characters(\"abc123\"))\nprint(check_characters(\"abc123#\"))"
    },
    {
      "rank": 44,
      "score": 8.542875062379007,
      "candidate": "import re\n\ndef check_characters(input_string):\n    \"\"\"\n    Checks that the given string contains only a certain set of characters.\n    \"\"\"\n    regex = re.compile(\"^[a-zA-Z0-9]*$\")\n    if not regex.match(input_string):\n        return False\n    return True"
    },
    {
      "rank": 45,
      "score": 8.53012858503943,
      "candidate": "import re\n\ndef check_characters(string):\n    if re.match(r'[a-z0-9]+', string):\n        print('YES')\n    else:\n        print('NO')\n\ncheck_characters('azAZ09')\ncheck_characters('azAZ09!')"
    },
    {
      "rank": 46,
      "score": 8.499905739299377,
      "candidate": "import re\n\n\ndef check_regex(input_str):\n    match = re.search(r'^[a-z0-9]+$', input_str)\n    if match:\n        print(\"Valid string\")\n    else:\n        print(\"Invalid string\")\n\n\ncheck_regex(\"abc\")\ncheck_regex(\"abc123\")\ncheck_regex(\"abc123!\")"
    },
    {
      "rank": 47,
      "score": 8.490324832712195,
      "candidate": "import re\n\ndef only_characters(string):\n    return bool(re.search(r'^[a-z0-9]+$', string))\n\nprint(only_characters('abc')) # True\nprint(only_characters('abc123')) # True\nprint(only_characters('abc!@#')) # False\nprint(only_characters('')) # True\nprint(only_characters(' ')) # False\nprint(only_characters('ab12c34')) # True\nprint(only_characters('ab12 c34')) # False"
    },
    {
      "rank": 48,
      "score": 8.48796797856353,
      "candidate": "import re\n\n\ndef check_regex(input_str):\n    regex = re.compile(r'^[a-zA-Z0-9]+$')\n    if regex.match(input_str):\n        print(\"YES\")\n    else:\n        print(\"NO\")\n\n\ncheck_regex(\"abc123\")\ncheck_regex(\"abc123!\")"
    },
    {
      "rank": 49,
      "score": 8.478208546788407,
      "candidate": "import re\ndef is_valid(string):\n    regex = r'^[a-z0-9]+$'\n    return re.match(regex, string)\n\nprint(is_valid(\"1234asdf\"))\nprint(is_valid(\"1234asdfa\"))\nprint(is_valid(\"1234asdfa1\"))"
    },
    {
      "rank": 50,
      "score": 8.437695832075478,
      "candidate": "import re\n\ndef check(string):\n    pattern = re.compile(\"^[a-zA-Z0-9]*$\")\n    result = pattern.match(string)\n    return result\n\nprint(check(\"a23r43r\"))\nprint(check(\"a23r43r#\"))"
    },
    {
      "rank": 51,
      "score": 8.426531424889468,
      "candidate": "import re\n\n\ndef check_text(text):\n    pattern = re.compile(r\"^[a-z0-9]+$\")\n    if pattern.match(text):\n        return True\n    else:\n        return False\n\n\nprint(check_text(\"1234abcd\"))"
    },
    {
      "rank": 52,
      "score": 8.408439383654278,
      "candidate": "import re\ndef check(input_string):\n    return bool(re.match(\"^[a-zA-Z0-9]*$\", input_string))\n\nprint(check(\"abc123\"))\nprint(check(\"abc123!\"))"
    },
    {
      "rank": 53,
      "score": 8.386620303250325,
      "candidate": "import re\n\ndef check(string):\n    return bool(re.match(\"^[a-zA-Z0-9]*$\", string))"
    },
    {
      "rank": 54,
      "score": 8.375312293858853,
      "candidate": "import re\n\ndef check_string(text):\n    pattern = \"^[a-zA-Z0-9]*$\"\n    return re.match(pattern, text)\n\nprint(check_string(\"asd123\"))\nprint(check_string(\"asd123!\"))"
    },
    {
      "rank": 55,
      "score": 8.351614956112536,
      "candidate": "import re\n\n\ndef check_char(text):\n    return re.match(r\"^[a-z0-9]+$\", text)\n\n\nprint(check_char(\"this is not a valid string\"))\nprint(check_char(\"this_is_not_a_valid_string\"))\nprint(check_char(\"this-is-not-a-valid-string\"))\nprint(check_char(\"this&is$a!valid*string\"))\nprint(check_char(\"thisisavalidstring\"))"
    },
    {
      "rank": 56,
      "score": 8.334608500525688,
      "candidate": "import re\n\ndef check_char(input_string):\n    return re.match(\"^[a-z0-9]+$\", input_string)\n\nprint(check_char(\"abc123\"))\nprint(check_char(\"abc123!\"))"
    },
    {
      "rank": 57,
      "score": 8.331556294201176,
      "candidate": "import re\n\ndef check_string(string):\n    regex = re.compile(\"^[a-zA-Z0-9]+$\")\n    if regex.search(string):\n        print(\"String contains only alphanumeric characters.\")\n    else:\n        print(\"String contains characters other than alphanumeric characters.\")\n\n\ncheck_string(\"Python\")\ncheck_string(\"Python123\")\ncheck_string(\"Python1234567890\")\ncheck_string(\"Python1234567890!@#$%^&*()\")"
    },
    {
      "rank": 58,
      "score": 8.327375965969855,
      "candidate": "import re\n\ndef check_string(input_str):\n    return bool(re.match(r'^[a-zA-Z0-9]*$', input_str))\n\nprint(check_string(\"abc123\"))\nprint(check_string(\"abc@#$123\"))\nprint(check_string(\"abc123!\"))\nprint(check_string(\"abc123.123\"))\nprint(check_string(\"\"))\nprint(check_string(\"abc123.123abc\"))"
    },
    {
      "rank": 59,
      "score": 8.327367757082776,
      "candidate": "import re\n\ndef check_characters(string):\n    return bool(re.search(r'^[a-zA-Z0-9]*$', string))\n\nprint(check_characters(\"a1b2c3\"))\nprint(check_characters(\"abc123\"))\nprint(check_characters(\"abc\"))\nprint(check_characters(\"abc1234\"))"
    },
    {
      "rank": 60,
      "score": 8.298597569547805,
      "candidate": "import re\n\ndef check_string(string):\n    return bool(re.match(r'[a-z0-9]+', string))\n\n\nprint(check_string('abcd123'))\nprint(check_string('abcd123@'))"
    },
    {
      "rank": 61,
      "score": 8.294940769211511,
      "candidate": "import re\n\ndef check(input_str):\n    return bool(re.match(r\"^[a-z0-9]+$\", input_str))\n\ndef main():\n    print(check(\"abcdefg\"))\n    print(check(\"abc123\"))\n    print(check(\"abc123defg\"))\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 62,
      "score": 8.2938925966498,
      "candidate": "import re\n\ndef check(text):\n    return bool(re.match(r'^[a-z0-9]+$', text))"
    },
    {
      "rank": 63,
      "score": 8.289838256518838,
      "candidate": "import re\n\n\ndef check_user_input(string):\n    match = re.match(r'^[a-zA-Z0-9_]+$', string)\n    if match:\n        return True\n    return False\n\n\nprint(check_user_input(\"abc123\"))\nprint(check_user_input(\"abc@123\"))"
    },
    {
      "rank": 64,
      "score": 8.251903304236286,
      "candidate": "import re\n\ndef check_user_input(string):\n    regex = r\"^[a-z0-9]+$\"\n    pattern = re.compile(regex)\n    result = re.match(pattern, string)\n    return result\n\nprint(check_user_input(\"abc123\"))\nprint(check_user_input(\"abc123!\"))"
    },
    {
      "rank": 65,
      "score": 8.214125058964552,
      "candidate": "import re\n\n\ndef check_char(string):\n    return bool(re.search(r'[a-z0-9]+', string))\n\n\nprint(check_char('abc'))\nprint(check_char('abc123'))\nprint(check_char('abc123!@#'))"
    },
    {
      "rank": 66,
      "score": 8.212735598038213,
      "candidate": "import re\n\ndef check_char(string):\n    return re.match(\"^[a-z0-9]+$\", string)\n\n\nprint(check_char(\"helloworld\"))\nprint(check_char(\"helloworld123\"))"
    },
    {
      "rank": 67,
      "score": 8.211579567659316,
      "candidate": "import re\n\ndef check_string(string):\n    pattern = re.compile(r\"^[a-z\\d]+$\")\n    return bool(pattern.match(string))\n\nprint(check_string(\"abcdefghijklmnopqrstuvwxyz\")) # True\nprint(check_string(\"abcdefghijklmnopqrstuvwxyz0123456789\")) # True\nprint(check_string(\"abcdefghijklmnopqrstuvwxyz0123456789-_\")) # False"
    },
    {
      "rank": 68,
      "score": 8.209707251476969,
      "candidate": "import re\n\ndef check_characters(string):\n    # Regex to check if the string has only a-z, A-Z and 0-9\n    regex = re.compile(r'[^a-zA-Z0-9]')\n\n    # Use search to see if there is a match\n    if regex.search(string) is not None:\n        return False\n    return True\n\n# Tests\nprint(check_characters(\"This is not a valid string\"))\nprint(check_characters(\"This is a valid string\"))"
    },
    {
      "rank": 69,
      "score": 8.2048573255218,
      "candidate": "import re\ndef check_for_string_validity(s):\n    return bool(re.match(\"^[a-zA-Z0-9]+$\", s))\n\nprint(check_for_string_validity(\"abcdefghijklmnopqrstuvwxyz\"))\nprint(check_for_string_validity(\"Abcdefghijklmnopqrstuvwxyz\"))\nprint(check_for_string_validity(\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"))\nprint(check_for_string_validity(\"abcdefghijklmnopqrstuvwxyz0123456789\"))\nprint(check_for_string_validity(\"abcdefghijklmnopqrstuvwxyz0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\"))\nprint(check_for_string_validity(\"abcdefghijklmnopqrstuvwxyz0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\"))\nprint(check_for_string_validity(\"abcdefghijklmnopqrstuvwxyz0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\"))"
    },
    {
      "rank": 70,
      "score": 8.193565922652176,
      "candidate": "import re\n\n\ndef check_characters(input_str):\n    pattern = re.compile(\"^[a-zA-Z0-9]+$\")\n    if pattern.match(input_str):\n        print(\"Valid String\")\n    else:\n        print(\"Invalid String\")\n\n\ncheck_characters(\"abc123\")\ncheck_characters(\"abc!23\")"
    },
    {
      "rank": 71,
      "score": 8.185309335307622,
      "candidate": "import re\n\ndef check_regex(input_str):\n    pattern = re.compile(\"^[a-zA-Z0-9]+$\")\n    return bool(pattern.match(input_str))\n\ndef main():\n    assert check_regex(\"123abc\") == True\n    assert check_regex(\"ABCabc\") == True\n    assert check_regex(\"ABCabc123\") == True\n    assert check_regex(\"ABCabc123!\") == False\n    assert check_regex(\"ABCabc123?\") == False\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 72,
      "score": 8.172253082181854,
      "candidate": "import re\n\ndef check_string(input_str):\n    return re.match(r'^[a-zA-Z0-9]*$', input_str)\n\n#test\nprint check_string(\"ThisIsAnInvalidString\")"
    },
    {
      "rank": 73,
      "score": 8.163300679823958,
      "candidate": "import re\ndef check_char(input_string):\n    pattern = re.compile(\"[a-z,A-Z,0-9]+\")\n    return pattern.match(input_string)\n\nprint(check_char(\"Python101\"))\nprint(check_char(\"python101\"))\nprint(check_char(\"Python 101\"))\nprint(check_char(\"Python!101\"))\nprint(check_char(\"Python@101\"))"
    },
    {
      "rank": 74,
      "score": 8.144125099485041,
      "candidate": "import re\n\ndef check_string(text):\n    return re.search(\"^[a-zA-Z0-9]*$\", text)\n\nif __name__ == '__main__':\n    print(check_string('python99'))"
    },
    {
      "rank": 75,
      "score": 8.143591138329747,
      "candidate": "import re\n\ndef check(string):\n    return bool(re.match(\"^[a-zA-Z0-9]*$\", string))\n\n\nprint(check(\"a234bc\"))\nprint(check(\"a234b*c\"))"
    },
    {
      "rank": 76,
      "score": 8.121884567141883,
      "candidate": "import re\n\ndef check_string(string):\n    pattern = r\"^[a-z0-9]+$\"\n    return bool(re.match(pattern, string))\n\nif __name__ == '__main__':\n    print(check_string(\"python99\"))"
    },
    {
      "rank": 77,
      "score": 8.105983444291466,
      "candidate": "import re\ndef check(input_str):\n    return bool(re.match(\"^[a-zA-Z0-9]*$\", input_str))\n\ninput_str = \"q2w3e4r\"\nprint(check(input_str))"
    },
    {
      "rank": 78,
      "score": 8.08452234024709,
      "candidate": "import re\n\ndef check_characters(string):\n    return bool(re.match(\"^[a-zA-Z0-9 ]*$\", string))\n\nif __name__ == '__main__':\n    print(check_characters(\"Hello World 123\"))\n    print(check_characters(\"Hello World 123#\"))"
    },
    {
      "rank": 79,
      "score": 8.040197642997851,
      "candidate": "import re\n\ndef check_string(string):\n    return bool(re.match(r'^[a-zA-Z0-9]+$', string))\n\nprint(check_string(\"abc123\"))\nprint(check_string(\"abc123!!\"))"
    },
    {
      "rank": 80,
      "score": 8.024835682833125,
      "candidate": "import re\n\ndef check_characters(input_str):\n    pattern = re.compile(\"^[a-zA-Z0-9]+$\")\n    return pattern.match(input_str)\n\nprint(check_characters(\"abcdef\")) # True\nprint(check_characters(\"abcdef123\")) # True\nprint(check_characters(\"abcdef123!@\")) # False\nprint(check_characters(\"abcdef123!@!\")) # False\nprint(check_characters(\"abcdef123!@! \")) # False\nprint(check_characters(\"abcdef123!@!  \")) # False\nprint(check_characters(\"\")) # True\nprint(check_characters(\" \")) # False"
    },
    {
      "rank": 81,
      "score": 7.990432406683839,
      "candidate": "import re\n\ndef check(s):\n    return bool(re.match(\"^[a-z0-9]*$\", s))\n\nprint(check(\"abc\"))\nprint(check(\"abc123\"))\nprint(check(\"abc1234567890\"))\nprint(check(\"abc1234567890!@\"))"
    },
    {
      "rank": 82,
      "score": 7.938028884277233,
      "candidate": "import re\n\ndef check_char(string):\n    return bool(re.match(r'^[a-z0-9]+$', string))\n\nif __name__ == '__main__':\n    print(check_char('abc123'))\n    print(check_char('abc123@'))\n    print(check_char('abc@123'))"
    },
    {
      "rank": 83,
      "score": 7.915588979966494,
      "candidate": "import re\n\ndef check_regex(input_str):\n    return bool(re.match(\"^[a-zA-Z0-9]*$\", input_str))"
    },
    {
      "rank": 84,
      "score": 7.8912769574414305,
      "candidate": "import re\n\ndef only_contains_certain_characters(text: str, characters: str) -> bool:\n    pattern = re.compile(f\"[^{characters}]\")\n    return not pattern.search(text)\n\nprint(only_contains_certain_characters(\"abc\", \"abc\"))\nprint(only_contains_certain_characters(\"abc123\", \"abc\"))\nprint(only_contains_certain_characters(\"abc123\", \"abc123\"))\nprint(only_contains_certain_characters(\"abc123\", \"abc12345\"))\nprint(only_contains_certain_characters(\"abc123\", \"abc123456\"))\nprint(only_contains_certain_characters(\"abc123\", \"abc1234567\"))"
    },
    {
      "rank": 85,
      "score": 7.868947655733293,
      "candidate": "import re\n\ndef check_for_valid_chars(input_str):\n    if re.match(r\"[a-zA-Z0-9]+\", input_str):\n        return True\n    return False\n\nprint(check_for_valid_chars(\"hello123\"))\nprint(check_for_valid_chars(\"hello world!\"))"
    },
    {
      "rank": 86,
      "score": 7.84634113240411,
      "candidate": "import re\n\ndef check(string):\n    return bool(re.match(\"^[a-zA-Z0-9]*$\", string))"
    },
    {
      "rank": 87,
      "score": 7.834022619458933,
      "candidate": "import re\n\ndef check_regex(input_str):\n    result = re.search(r'^[a-z0-9]+$', input_str)\n    return result\n\nprint(check_regex('abc123'))\nprint(check_regex('abc123!'))"
    },
    {
      "rank": 88,
      "score": 7.780351419995229,
      "candidate": "import re\ndef check(inp):\n    return bool(re.match(r'^[a-zA-Z0-9]+$', inp))\n\n\ndef main():\n    print(check(\"123456789\"))\n    print(check(\"abcdefghij\"))\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 89,
      "score": 7.738292593776799,
      "candidate": "import re\n\ndef check_characters(string, char_set):\n    return bool(re.match(r'^[' + char_set + r']+$', string))\n\n\nif __name__ == '__main__':\n    print(check_characters('abc123', 'abc123'))\n    print(check_characters('abc123!', 'abc123'))\n    print(check_characters('abc123', 'abc123!'))"
    },
    {
      "rank": 90,
      "score": 7.7320703513377165,
      "candidate": "import re\n\ndef check_string(string):\n    pattern = r'^[a-z0-9]+$'\n    return re.match(pattern, string)\n\n\nprint(check_string(\"123abc\"))\nprint(check_string(\"abc\"))\nprint(check_string(\"abc123\"))\nprint(check_string(\"abc123abc\"))\nprint(check_string(\"abc123abc\"))\nprint(check_string(\"abc123abc!\"))\nprint(check_string(\"abc123abc??\"))\nprint(check_string(\"abc123abc!?\"))"
    },
    {
      "rank": 91,
      "score": 7.705183449260731,
      "candidate": "import re\n\ndef check_char(string):\n    pattern = re.compile(\"[a-z]+\")\n    return pattern.match(string)\n\nif __name__ == '__main__':\n    print(check_char(\"abcdefghijklmnopqrstuvwxyz\"))\n    print(check_char(\"abcdefghijklmnopqrstuvwxyz1234567890\"))\n    print(check_char(\"abcdefghijklmnopqrstuvwxyz!@#$%^&*()\"))"
    },
    {
      "rank": 92,
      "score": 7.5819855281879285,
      "candidate": "import re\n\n\ndef check(string):\n    return bool(re.match(r'^[a-zA-Z0-9]*$', string))"
    },
    {
      "rank": 93,
      "score": 7.562924366763077,
      "candidate": "import re\n\ndef is_valid(s):\n    return re.match(\"^[a-zA-Z0-9]+$\", s)\n\nprint(is_valid(\"abcdefg\"))\nprint(is_valid(\"abcdefgh\"))"
    },
    {
      "rank": 94,
      "score": 7.4878043221155455,
      "candidate": "import re\n\ndef check_string(string):\n    return bool(re.search(r'^[a-zA-Z0-9]*$', string))\n\nprint(check_string(\"Hello\")) # false\nprint(check_string(\"^_^\")) # false\nprint(check_string(\"abc123\")) # true\nprint(check_string(\"aBc\")) # true\nprint(check_string(\"abc123abc\")) # true\nprint(check_string(\"abc123abcabc\")) # true\nprint(check_string(\"abc123abcabc123abc\")) # true\nprint(check_string(\"abc123abcabc123abcabc\")) # false\nprint(check_string(\"abc123abcabc123abcabc123abc\")) # false\nprint(check_string(\"abc123abcabc123abcabc123abcabc123abc\")) # false"
    },
    {
      "rank": 95,
      "score": 7.464609382504557,
      "candidate": "import re\n\n\ndef check_regex(regex, string):\n    return re.match(regex, string)\n\n\ndef check_characters(string):\n    regex = r\"^[a-z0-9]+$\"\n    return check_regex(regex, string)\n\n\nif __name__ == \"__main__\":\n    print(check_characters(\"abcdefghijklmnopqrstuvwxyz\"))\n    print(check_characters(\"abcdefghijklmnopqrstuvwxyz1234567890\"))\n    print(check_characters(\"abcdefghijklmnopqrstuvwxyz1234567890-_\"))\n    print(check_characters(\"abcdefghijklmnopqrstuvwxyz1234567890-_!@#$%^&*()\"))"
    },
    {
      "rank": 96,
      "score": 7.4506599871439985,
      "candidate": "import re\n\ndef validate_input(input_string):\n    # if not re.match(r'[a-z0-9]+', input_string):\n    #     return False\n    return True\n\nprint(validate_input('123abc'))\nprint(validate_input('abc'))\nprint(validate_input('abc@$@#$'))"
    },
    {
      "rank": 97,
      "score": 7.134571892399572,
      "candidate": "import re\n\ndef check_string(input_string):\n    return bool(re.match(r'^[a-zA-Z0-9]*$', input_string))\n\n\nif __name__ == '__main__':\n    assert check_string('abc') == True\n    assert check_string('abc123') == True\n    assert check_string('abc123!') == False\n    assert check_string('abc@$%^&*') == False"
    },
    {
      "rank": 98,
      "score": 3.0,
      "candidate": "import re\n\ndef check_characters(string):\n    regex = re.compile(r'[^a-z0-9]')\n    if regex.search(string) == None:\n        return True\n    return False\n\nprint(check_characters(\"abc\")) # True\nprint(check_characters(\"abc123\")) # True\nprint(check_characters(\"abc 123\")) # False\nprint(check_characters(\"abc!123\")) # False"
    },
    {
      "rank": 99,
      "score": 3.0,
      "candidate": "import re\n\ndef check_string(s):\n    return bool(re.match(r'^[a-zA-Z0-9]*$', s))\n\n\ndef check_string_2(s):\n    return all(c.isalnum() for c in s)\n\n\nif __name__ == '__main__':\n    print(check_string(\"Hello123!\"))\n    print(check_string_2(\"Hello123!\"))"
    },
    {
      "rank": 100,
      "score": 3.0,
      "candidate": "import re\n\n\ndef check_string(string):\n    return bool(re.search(\"^[a-zA-Z0-9]*$\", string))\n\n\ndef main():\n    assert check_string(\"abc\") == True\n    assert check_string(\"abc123\") == True\n    assert check_string(\"abcabc123\") == True\n    assert check_string(\"abcabc123abc\") == True\n    assert check_string(\"abcabc123abcabc\") == True\n    assert check_string(\"\") == True\n    assert check_string(\"abc123abcabc123\") == True\n    assert check_string(\"abcabc123abcabc123abc\") == True\n    assert check_string(\"abcabc123abcabc123abcabc\") == True\n    assert check_string(\"abcabc123abcabc123abcabcabc\") == True\n    assert check_string(\"abcabc123abcabc123abcabcabcabc\") == True\n    assert check_string(\"abcabc123abcabc123abcabcabcabcabc\") == True\n    assert check_string(\"abcabc123abcabc123abcabcabcabcabcabc\") == True\n    assert check_string(\"abcabc123abcabc123abcabcabcabcabcabcabc\") == True\n    assert check_string(\"abcabc123abcabc123abcabcabcabcabcabcabcabc\") == True\n    assert check_string(\"abcabc123abcabc123abcabcabcabcabcabcabcabcabc\") == True\n    assert check_string(\"abcabc123abcabc123abcabcabcabcabcabcabcabcabcabc\") == True\n    assert check_string(\"abcabc123abcabc123abcabcabcabcabcabcabcabcabcabcabc\") == True\n    assert check_string(\"abcabc123abcabc123abcabcabcabcabcabcabcabcabcabcabcabc\") == True\n    assert check_string(\"abcabc123abcabc123abcabcabcabcabcabcabcabcabcabcabcabcabc\") == True\n    assert check_string(\"abcabc123abcabc12"
    }
  ]
}