{
  "timestamp": "2025-09-15T01:59:50.565803",
  "method": "improved_llm_judge",
  "judge_model": "codellama/CodeLlama-7b-Python-hf",
  "target_model": "codellama-7b",
  "dataset": "mbpp",
  "problem_number": 487,
  "total_candidates": 100,
  "results": [
    {
      "rank": 1,
      "score": 10.0,
      "candidate": "def gcd(a, b):\n    \"\"\"\n    This function returns the greatest common divisor of two numbers.\n    \"\"\"\n    if a == b:\n        return a\n    if a > b:\n        return gcd(a-b, b)\n    return gcd(a, b-a)\n\nprint(gcd(24, 48))"
    },
    {
      "rank": 2,
      "score": 10.0,
      "candidate": "def gcd(x, y):\n    if x == 0:\n        return y\n    if y == 0:\n        return x\n    if x > y:\n        return gcd(x - y, y)\n    return gcd(x, y - x)\n\n\nprint(gcd(18, 48))"
    },
    {
      "rank": 3,
      "score": 10.0,
      "candidate": "def gcd(a, b):\n    if b == 0:\n        return a\n    else:\n        return gcd(b, a % b)\n\n\nif __name__ == \"__main__\":\n    a = 10\n    b = 15\n    print(gcd(a, b))"
    },
    {
      "rank": 4,
      "score": 10.0,
      "candidate": "def gcd(x, y):\n    if x == 0:\n        return y\n    if y == 0:\n        return x\n\n    if x > y:\n        return gcd(x - y, y)\n\n    return gcd(x, y - x)\n\n\nif __name__ == \"__main__\":\n    print(gcd(18, 48))"
    },
    {
      "rank": 5,
      "score": 10.0,
      "candidate": "def gcd(x, y):\n    if x == 0:\n        return y\n    if y == 0:\n        return x\n\n    if x > y:\n        return gcd(x - y, y)\n    else:\n        return gcd(x, y - x)\n\n\nif __name__ == \"__main__\":\n    print(gcd(20, 40))"
    },
    {
      "rank": 6,
      "score": 10.0,
      "candidate": "def gcd(a, b):\n    if b == 0:\n        return a\n    return gcd(b, a % b)\n\n\nprint(gcd(10, 20))\nprint(gcd(10, 20))\nprint(gcd(10, 0))"
    },
    {
      "rank": 7,
      "score": 10.0,
      "candidate": "def gcd(a, b):\n    while b != 0:\n        a, b = b, a % b\n    return a\n\n\nprint(gcd(12, 8))"
    },
    {
      "rank": 8,
      "score": 10.0,
      "candidate": "def gcd(a, b):\n    if a == 0:\n        return b\n    if b == 0:\n        return a\n    if a == b:\n        return a\n    if a > b:\n        return gcd(a - b, b)\n    else:\n        return gcd(a, b - a)\n\n\nprint(gcd(18, 12))"
    },
    {
      "rank": 9,
      "score": 10.0,
      "candidate": "def gcd(a, b):\n    if a == 0:\n        return b\n    return gcd(b % a, a)\n\n\nprint(gcd(18, 12))"
    },
    {
      "rank": 10,
      "score": 10.0,
      "candidate": "def gcd(a, b):\n    if a == b:\n        return a\n    if a > b:\n        return gcd(a - b, b)\n    else:\n        return gcd(a, b - a)\n\n\na = int(input(\"Enter the first number: \"))\nb = int(input(\"Enter the second number: \"))\nprint(\"The GCD of %d and %d is %d.\" % (a, b, gcd(a, b)))"
    },
    {
      "rank": 11,
      "score": 10.0,
      "candidate": "def gcd(a, b):\n    if a == 0:\n        return b\n    return gcd(b % a, a)\n\n\nprint(gcd(20, 10))\nprint(gcd(10, 20))\nprint(gcd(10, 40))"
    },
    {
      "rank": 12,
      "score": 10.0,
      "candidate": "def gcd(a, b):\n    if a == 0:\n        return b\n    elif b == 0:\n        return a\n\n    if a > b:\n        return gcd(a - b, b)\n    else:\n        return gcd(a, b - a)\n\n\nprint(gcd(18, 45))"
    },
    {
      "rank": 13,
      "score": 10.0,
      "candidate": "def gcd(x, y):\n    if x == 0:\n        return y\n    elif y == 0:\n        return x\n    elif x > y:\n        return gcd(x - y, y)\n    else:\n        return gcd(x, y - x)\n\n\nprint(gcd(18, 48))"
    },
    {
      "rank": 14,
      "score": 10.0,
      "candidate": "def gcd(a, b):\n    if b == 0:\n        return a\n    return gcd(b, a % b)\n\n\na = int(input(\"Enter first number: \"))\nb = int(input(\"Enter second number: \"))\nprint(\"GCD is: \", gcd(a, b))"
    },
    {
      "rank": 15,
      "score": 10.0,
      "candidate": "def gcd(a, b):\n    if b == 0:\n        return a\n    return gcd(b, a % b)\n\n\ndef gcd_with_while(a, b):\n    if b == 0:\n        return a\n\n    while b != 0:\n        a, b = b, a % b\n\n    return a\n\n\nif __name__ == \"__main__\":\n    print(gcd(10, 100))\n    print(gcd_with_while(10, 100))"
    },
    {
      "rank": 16,
      "score": 10.0,
      "candidate": "def gcd(a, b):\n    if b == 0:\n        return a\n    else:\n        return gcd(b, a % b)\n\n\ndef main():\n    a = int(input(\"Enter first number: \"))\n    b = int(input(\"Enter second number: \"))\n    print(gcd(a, b))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 17,
      "score": 10.0,
      "candidate": "def gcd(a, b):\n    if a < b:\n        a, b = b, a\n    if b == 0:\n        return a\n    else:\n        return gcd(b, a % b)\n\nprint(gcd(32, 12))"
    },
    {
      "rank": 18,
      "score": 10.0,
      "candidate": "def gcd(a, b):\n    if a == b:\n        return a\n    if a > b:\n        return gcd(a - b, b)\n    return gcd(a, b - a)\n\n\nprint(gcd(5, 7))"
    },
    {
      "rank": 19,
      "score": 10.0,
      "candidate": "def gcd(x, y):\n    \"\"\"\n    Return the greatest common divisor of x and y\n\n    >>> gcd(12, 8)\n    4\n    >>> gcd(12, 18)\n    6\n    >>> gcd(23, 12)\n    1\n    \"\"\"\n    while y:\n        x, y = y, x % y\n    return x\n\n\ndef gcd2(x, y):\n    \"\"\"\n    Return the greatest common divisor of x and y\n\n    >>> gcd2(12, 8)\n    4\n    >>> gcd2(12, 18)\n    6\n    >>> gcd2(23, 12)\n    1\n    \"\"\"\n    return x if y == 0 else gcd2(y, x % y)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 20,
      "score": 10.0,
      "candidate": "def gcd(x, y):\n    \"\"\"\n    Return the greatest common divisor of x and y using Euclid's Algorithm.\n\n    >>> gcd(4, 6)\n    2\n    >>> gcd(2, 5)\n    1\n    >>> gcd(12, 8)\n    4\n    >>> gcd(7, 9)\n    1\n    >>> gcd(17, 12)\n    1\n    \"\"\"\n    if x < y:\n        x, y = y, x\n    if y == 0:\n        return x\n    return gcd(y, x % y)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 21,
      "score": 10.0,
      "candidate": "def gcd(x, y):\n    while y != 0:\n        x, y = y, x % y\n    return x\n\n\nprint(gcd(24, 60))"
    },
    {
      "rank": 22,
      "score": 10.0,
      "candidate": "def gcd(a, b):\n    if b == 0:\n        return a\n    else:\n        return gcd(b, a % b)\n\n\nprint(gcd(18, 24))"
    },
    {
      "rank": 23,
      "score": 10.0,
      "candidate": "def gcd(x, y):\n    if x == 0:\n        return y\n    if y == 0:\n        return x\n    if x > y:\n        return gcd(x % y, y)\n    return gcd(y, x % y)\n\n\nprint(gcd(24, 60))"
    },
    {
      "rank": 24,
      "score": 10.0,
      "candidate": "def gcd(a, b):\n    if a == b:\n        return a\n    if a > b:\n        return gcd(a - b, b)\n    else:\n        return gcd(a, b - a)\n\n\nif __name__ == \"__main__\":\n    a = int(input(\"Enter first number: \"))\n    b = int(input(\"Enter second number: \"))\n    print(f\"GCD of {a} and {b} is {gcd(a, b)}\")"
    },
    {
      "rank": 25,
      "score": 10.0,
      "candidate": "def gcd(a, b):\n    if a == 0:\n        return b\n    if b == 0:\n        return a\n    if a == b:\n        return a\n    if a > b:\n        return gcd(a - b, b)\n    return gcd(a, b - a)\n\n\nprint(gcd(18, 27))"
    },
    {
      "rank": 26,
      "score": 9.0,
      "candidate": "def gcd(a, b):\n    if a == 0:\n        return b\n    return gcd(b % a, a)\n\n\nprint(gcd(18, 24))"
    },
    {
      "rank": 27,
      "score": 9.0,
      "candidate": "def gcd(a, b):\n    if a == 0:\n        return b\n    elif b == 0:\n        return a\n    else:\n        if a > b:\n            return gcd(a % b, b)\n        else:\n            return gcd(b % a, a)\n\n\na = int(input(\"Enter first number: \"))\nb = int(input(\"Enter second number: \"))\nprint(\"GCD of {} and {} is {}\".format(a, b, gcd(a, b)))"
    },
    {
      "rank": 28,
      "score": 9.0,
      "candidate": "def gcd(x, y):\n    if x == 0:\n        return y\n    if y == 0:\n        return x\n    if x == y:\n        return x\n    if x > y:\n        return gcd(x - y, y)\n    return gcd(x, y - x)\n\n\nprint(gcd(18, 27))\nprint(gcd(18, 0))\nprint(gcd(0, 18))\nprint(gcd(18, 18))\nprint(gcd(10, 15))"
    },
    {
      "rank": 29,
      "score": 9.0,
      "candidate": "def gcd(x, y):\n    if x == 0:\n        return y\n    if y == 0:\n        return x\n    if x == y:\n        return x\n    if x > y:\n        return gcd(x - y, y)\n    return gcd(x, y - x)\n\n\nprint(gcd(18, 12))"
    },
    {
      "rank": 30,
      "score": 9.0,
      "candidate": "def gcd(x, y):\n    if x == 0:\n        return y\n    if y == 0:\n        return x\n    if x > y:\n        return gcd(x % y, y)\n    else:\n        return gcd(x, y % x)\n\n\nprint(gcd(18, 24))\nprint(gcd(36, 18))"
    },
    {
      "rank": 31,
      "score": 9.0,
      "candidate": "def gcd(x: int, y: int) -> int:\n    \"\"\"\n    GCD of two integers.\n    >>> gcd(18, 48)\n    6\n    \"\"\"\n    if x < 0 or y < 0:\n        raise ValueError(\"x and y must be positive\")\n    if x == 0:\n        return y\n    return gcd(y % x, x)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 32,
      "score": 9.0,
      "candidate": "def gcd(a, b):\n    if a == 0:\n        return b\n    return gcd(b % a, a)"
    },
    {
      "rank": 33,
      "score": 9.0,
      "candidate": "def gcd(x, y):\n    if x == 0:\n        return y\n    if y == 0:\n        return x\n\n    if x > y:\n        return gcd(x - y, y)\n    else:\n        return gcd(x, y - x)\n\n\nprint(gcd(18, 48))\nprint(gcd(24, 60))"
    },
    {
      "rank": 34,
      "score": 9.0,
      "candidate": "def gcd(a, b):\n    if b == 0:\n        return a\n    else:\n        return gcd(b, a % b)\n\n\nprint(gcd(10, 20))\nprint(gcd(20, 10))\nprint(gcd(10, 0))\nprint(gcd(10, 10))"
    },
    {
      "rank": 35,
      "score": 9.0,
      "candidate": "def gcd(a, b):\n    \"\"\"\n    >>> gcd(5, 15)\n    5\n    >>> gcd(10, 20)\n    10\n    \"\"\"\n    while b:\n        a, b = b, a % b\n    return a\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 36,
      "score": 9.0,
      "candidate": "def gcd(x, y):\n    if y == 0:\n        return x\n    else:\n        return gcd(y, x % y)\n\n\nprint(gcd(18, 24))"
    },
    {
      "rank": 37,
      "score": 9.0,
      "candidate": "def gcd(a, b):\n    if a == b:\n        return a\n    elif a > b:\n        return gcd(a - b, b)\n    elif a < b:\n        return gcd(a, b - a)\n\n\nif __name__ == \"__main__\":\n    a = int(input(\"Enter first number: \"))\n    b = int(input(\"Enter second number: \"))\n    print(f\"GCD of {a} and {b} is {gcd(a, b)}\")"
    },
    {
      "rank": 38,
      "score": 9.0,
      "candidate": "def gcd(a, b):\n    if a == 0:\n        return b\n    return gcd(b % a, a)\n\n\nprint(gcd(20, 10))"
    },
    {
      "rank": 39,
      "score": 9.0,
      "candidate": "def gcd(x, y):\n    if x == 0:\n        return y\n    if y == 0:\n        return x\n    if x > y:\n        return gcd(x % y, y)\n    else:\n        return gcd(y % x, x)\n\n\nprint(gcd(18, 24))\nprint(gcd(35, 15))"
    },
    {
      "rank": 40,
      "score": 9.0,
      "candidate": "def gcd(a,b):\n    if a==0:\n        return b\n    return gcd(b%a,a)\n\n\nif __name__ == \"__main__\":\n    print(gcd(10,20))\n    print(gcd(12,18))\n    print(gcd(123,456))"
    },
    {
      "rank": 41,
      "score": 9.0,
      "candidate": "def gcd(num1, num2):\n    if num1 == 0:\n        return num2\n    elif num2 == 0:\n        return num1\n    elif num1 > num2:\n        return gcd(num2, num1 % num2)\n    else:\n        return gcd(num1, num2 % num1)\n\n\nprint(gcd(30, 40))\nprint(gcd(60, 80))\nprint(gcd(20, 30))\nprint(gcd(15, 20))"
    },
    {
      "rank": 42,
      "score": 9.0,
      "candidate": "def gcd(a, b):\n    if b == 0:\n        return a\n    else:\n        return gcd(b, a % b)\n\n\nprint(gcd(20, 10))"
    },
    {
      "rank": 43,
      "score": 9.0,
      "candidate": "def gcd(num1, num2):\n    if num1 == 0:\n        return num2\n    if num2 == 0:\n        return num1\n\n    if num1 > num2:\n        return gcd(num1 - num2, num2)\n    else:\n        return gcd(num1, num2 - num1)\n\n\nif __name__ == \"__main__\":\n    num1 = 18\n    num2 = 45\n    print(gcd(num1, num2))"
    },
    {
      "rank": 44,
      "score": 9.0,
      "candidate": "def gcd(x, y):\n    if x == 0:\n        return y\n    return gcd(y%x, x)\n\ngcd(24, 30)\n\n# Time complexity: O(log(max(x, y)))\n# Space complexity: O(1)"
    },
    {
      "rank": 45,
      "score": 8.0,
      "candidate": "def gcd(a, b):\n    if a == 0:\n        return b\n    if b == 0:\n        return a\n\n    if a > b:\n        return gcd(a - b, b)\n    else:\n        return gcd(a, b - a)\n\n\nprint(gcd(20, 10))\nprint(gcd(10, 20))\nprint(gcd(40, 60))\nprint(gcd(100, 50))\nprint(gcd(3, 5))"
    },
    {
      "rank": 46,
      "score": 8.0,
      "candidate": "def gcd(x, y):\n    if x == 0:\n        return y\n    elif y == 0:\n        return x\n    else:\n        return gcd(y, x % y)\n\n\nprint(gcd(54, 24))"
    },
    {
      "rank": 47,
      "score": 8.0,
      "candidate": "def gcd(a, b):\n    if a == b:\n        return a\n    if a > b:\n        return gcd(a - b, b)\n    return gcd(a, b - a)\n\n\ndef gcd_euclidean(a, b):\n    if a == 0:\n        return b\n    if b == 0:\n        return a\n    if a > b:\n        return gcd_euclidean(a - b, b)\n    return gcd_euclidean(a, b - a)\n\n\nprint(gcd(4, 6))\nprint(gcd(10, 20))\nprint(gcd(100, 120))\nprint(gcd_euclidean(4, 6))\nprint(gcd_euclidean(10, 20))\nprint(gcd_euclidean(100, 120))"
    },
    {
      "rank": 48,
      "score": 8.0,
      "candidate": "def gcd(a, b):\n    \"\"\"\n    Returns the GCD of two numbers.\n    \"\"\"\n    if a == 0:\n        return b\n    return gcd(b % a, a)\n\nprint(gcd(12, 16))\nprint(gcd(13, 13))\nprint(gcd(13, 14))"
    },
    {
      "rank": 49,
      "score": 8.0,
      "candidate": "def gcd(a, b):\n    if a == b:\n        return a\n    elif a > b:\n        return gcd(a - b, b)\n    elif a < b:\n        return gcd(a, b - a)\n\n\nprint(gcd(10, 20))\nprint(gcd(10, 20))"
    },
    {
      "rank": 50,
      "score": 8.0,
      "candidate": "def gcd(a, b):\n    if a < b:\n        a, b = b, a\n\n    if a % b == 0:\n        return b\n\n    return gcd(b, a % b)\n\n\nif __name__ == \"__main__\":\n    print(gcd(20, 40))\n    print(gcd(5, 10))\n    print(gcd(10, 5))"
    },
    {
      "rank": 51,
      "score": 8.0,
      "candidate": "def gcd(a, b):\n    if a == b:\n        return a\n    elif a > b:\n        return gcd(a-b, b)\n    else:\n        return gcd(a, b-a)\n\n\na = int(input(\"Enter first number: \"))\nb = int(input(\"Enter second number: \"))\nprint(\"GCD of %d and %d is: %d\" % (a, b, gcd(a, b)))"
    },
    {
      "rank": 52,
      "score": 8.0,
      "candidate": "def gcd(a, b):\n    \"\"\"\n    >>> gcd(24, 36)\n    12\n    >>> gcd(21, 12)\n    3\n    >>> gcd(4, 6)\n    2\n    >>> gcd(4, 3)\n    1\n    >>> gcd(5, 3)\n    1\n    >>> gcd(10, 0)\n    10\n    \"\"\"\n    if a < 0 or b < 0:\n        raise ValueError(\"a and b should be positive\")\n    if a == 0:\n        return b\n    if b == 0:\n        return a\n\n    if a > b:\n        return gcd(b, a % b)\n    else:\n        return gcd(a, b % a)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 53,
      "score": 8.0,
      "candidate": "def gcd(x, y):\n    if x == 0:\n        return y\n    if y == 0:\n        return x\n\n    if x > y:\n        return gcd(x - y, y)\n\n    return gcd(x, y - x)\n\n\ndef gcd_recursive(x, y):\n    if x == 0:\n        return y\n    if y == 0:\n        return x\n\n    if x > y:\n        return gcd_recursive(x - y, y)\n\n    return gcd_recursive(x, y - x)\n\n\nprint(gcd(18, 24))\nprint(gcd_recursive(18, 24))"
    },
    {
      "rank": 54,
      "score": 8.0,
      "candidate": "def gcd(x, y):\n    while y:\n        x, y = y, x % y\n    return x\n\n\ndef gcd_recursion(x, y):\n    if y == 0:\n        return x\n    else:\n        return gcd(y, x % y)\n\n\ndef gcd_euclid(x, y):\n    if x > y:\n        x, y = y, x\n    if y % x == 0:\n        return x\n    else:\n        return gcd_euclid(y % x, x)\n\n\ndef gcd_euclid_recursion(x, y):\n    if x > y:\n        x, y = y, x\n    if y % x == 0:\n        return x\n    else:\n        return gcd_euclid_recursion(y, x % y)\n\n\nif __name__ == \"__main__\":\n    print(gcd(10, 5))\n    print(gcd_recursion(10, 5))\n    print(gcd_euclid(10, 5))\n    print(gcd_euclid_recursion(10, 5))"
    },
    {
      "rank": 55,
      "score": 8.0,
      "candidate": "def gcd(a, b):\n    if a < b:\n        a, b = b, a\n\n    if a % b == 0:\n        return b\n    else:\n        return gcd(b, a % b)\n\n\ndef gcd_recursive(a, b):\n    if a < b:\n        a, b = b, a\n\n    return gcd_recursive(b, a % b) if a % b != 0 else b\n\n\ndef main():\n    a, b = 100, 20\n    print(gcd(a, b))\n    print(gcd_recursive(a, b))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 56,
      "score": 8.0,
      "candidate": "def gcd(x: int, y: int) -> int:\n    \"\"\"\n    Calculate the Greatest Common Denominator of two positive integers\n\n    Args:\n        x (int): first integer\n        y (int): second integer\n\n    Returns:\n        int: the Greatest Common Denominator of two positive integers\n    \"\"\"\n    if x == 0:\n        return y\n    if y == 0:\n        return x\n    if x < 0:\n        x = -x\n    if y < 0:\n        y = -y\n    while x != y:\n        if x > y:\n            x = x - y\n        else:\n            y = y - x\n    return x\n\n\ndef main():\n    a = int(input(\"Enter first number: \"))\n    b = int(input(\"Enter second number: \"))\n    print(f\"The GCD of {a} and {b} is {gcd(a, b)}\")\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 57,
      "score": 8.0,
      "candidate": "def gcd(a, b):\n    if b == 0:\n        return a\n    else:\n        return gcd(b, a % b)\n\n\ndef main():\n    a = int(input(\"Enter first number: \"))\n    b = int(input(\"Enter second number: \"))\n    print(gcd(a, b))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 58,
      "score": 8.0,
      "candidate": "def gcd(x, y):\n    if x > y:\n        small = y\n    else:\n        small = x\n\n    for i in range(1, small+1):\n        if((x % i == 0) and (y % i == 0)):\n            gcd = i\n\n    return gcd\n\n\nprint(gcd(12, 16))"
    },
    {
      "rank": 59,
      "score": 8.0,
      "candidate": "def gcd(x, y):\n    \"\"\"\n    GCD = Greatest Common Divisor\n    \"\"\"\n    if x == 0:\n        return y\n    if y == 0:\n        return x\n\n    if x > y:\n        return gcd(y, x)\n\n    if x % y == 0:\n        return y\n\n    return gcd(y, x % y)\n\n\nif __name__ == \"__main__\":\n    print(gcd(12, 6))"
    },
    {
      "rank": 60,
      "score": 8.0,
      "candidate": "def gcd(a, b):\n    if a == b:\n        return a\n    if a > b:\n        return gcd(a - b, b)\n    return gcd(a, b - a)\n\n\nprint(gcd(6, 12))"
    },
    {
      "rank": 61,
      "score": 8.0,
      "candidate": "def gcd(a, b):\n    if a == 0:\n        return b\n    return gcd(b % a, a)\n\n\ndef gcd_efficient(a, b):\n    if a == 0:\n        return b\n    if b == 0:\n        return a\n    if a > b:\n        return gcd_efficient(a - b, b)\n    else:\n        return gcd_efficient(a, b - a)\n\n\nif __name__ == \"__main__\":\n    print(gcd(5, 6))\n    print(gcd_efficient(5, 6))"
    },
    {
      "rank": 62,
      "score": 8.0,
      "candidate": "def gcd(a, b):\n    if b == 0:\n        return a\n    return gcd(b, a % b)\n\n\nprint(gcd(20, 10))\nprint(gcd(12, 6))\nprint(gcd(39, 56))"
    },
    {
      "rank": 63,
      "score": 8.0,
      "candidate": "def gcd(a, b):\n    if a == b:\n        return a\n    elif a > b:\n        return gcd(a - b, b)\n    else:\n        return gcd(a, b - a)\n\n\nprint(gcd(100, 30))\nprint(gcd(20, 10))\nprint(gcd(20, 30))\nprint(gcd(100, 100))"
    },
    {
      "rank": 64,
      "score": 8.0,
      "candidate": "def gcd(a, b):\n    while b != 0:\n        a, b = b, a % b\n    return a\n\nprint(gcd(24, 40))"
    },
    {
      "rank": 65,
      "score": 8.0,
      "candidate": "def gcd(a, b):\n    if a == 0:\n        return b\n    return gcd(b%a, a)\n\nprint(gcd(12, 16))"
    },
    {
      "rank": 66,
      "score": 8.0,
      "candidate": "def gcd(a, b):\n    \"\"\"\n    The Euclidean algorithm\n    \"\"\"\n    if a == 0:\n        return b\n    return gcd(b % a, a)\n\n\nif __name__ == \"__main__\":\n    print(gcd(50, 20))"
    },
    {
      "rank": 67,
      "score": 8.0,
      "candidate": "def gcd(x,y):\n    if x == 0:\n        return y\n    elif y == 0:\n        return x\n    else:\n        if x > y:\n            return gcd(x%y,y)\n        else:\n            return gcd(x,y%x)\n\nprint(gcd(21,34))"
    },
    {
      "rank": 68,
      "score": 8.0,
      "candidate": "def gcd(x, y):\n    if x > y:\n        small = y\n    else:\n        small = x\n\n    for i in range(1, small+1):\n        if (x % i == 0) and (y % i == 0):\n            gcd = i\n\n    return gcd\n\n\na = int(input())\nb = int(input())\nprint(gcd(a, b))"
    },
    {
      "rank": 69,
      "score": 8.0,
      "candidate": "def gcd(a, b):\n    if a == 0:\n        return b\n    return gcd(b % a, a)\n\nprint(gcd(100, 12))\nprint(gcd(200, 120))\nprint(gcd(10, 30))\nprint(gcd(15, 45))"
    },
    {
      "rank": 70,
      "score": 8.0,
      "candidate": "def gcd(x,y):\n\tif x == 0:\n\t\treturn y\n\tif y == 0:\n\t\treturn x\n\tif x%y == 0:\n\t\treturn y\n\tif y%x == 0:\n\t\treturn x\n\tif x%y > 0:\n\t\treturn gcd(y,x%y)\n\telse:\n\t\treturn gcd(x,y%x)\n\nprint(gcd(20,16))\nprint(gcd(16,20))\nprint(gcd(12,4))\nprint(gcd(4,12))"
    },
    {
      "rank": 71,
      "score": 8.0,
      "candidate": "def gcd(x, y):\n    if x > y:\n        smaller = y\n    else:\n        smaller = x\n    for i in range(1, smaller+1):\n        if (x % i == 0) and (y % i == 0):\n            gcd = i\n    return gcd\n\n\nprint(gcd(20, 12))"
    },
    {
      "rank": 72,
      "score": 8.0,
      "candidate": "def gcd(a, b):\n    \"\"\"\n    This function returns the GCD of two numbers.\n    \"\"\"\n    if a == 0:\n        return b\n    return gcd(b % a, a)\n\n\ndef gcd2(a, b):\n    \"\"\"\n    This function returns the GCD of two numbers.\n    \"\"\"\n    while b:\n        a, b = b, a % b\n    return a\n\n\ndef gcd3(a, b):\n    \"\"\"\n    This function returns the GCD of two numbers.\n    \"\"\"\n    if a == 0:\n        return b\n    if b == 0:\n        return a\n\n    if a > b:\n        return gcd3(b, a)\n\n    if a < b:\n        return gcd3(a, b)\n\n    if a == b:\n        return a\n\n\ndef main():\n    \"\"\"\n    Main function for the program.\n    \"\"\"\n    a = int(input(\"Enter a: \"))\n    b = int(input(\"Enter b: \"))\n    print(gcd(a, b))\n    print(gcd2(a, b))\n    print(gcd3(a, b))\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 73,
      "score": 8.0,
      "candidate": "def gcd(a, b):\n    if b == 0:\n        return a\n    return gcd(b, a % b)\n\n\na = 12\nb = 4\nprint(gcd(a, b))"
    },
    {
      "rank": 74,
      "score": 8.0,
      "candidate": "def gcd(a, b):\n    while b:\n        a, b = b, a % b\n    return a\n\n\nprint(gcd(12, 4))\nprint(gcd(21, 3))\nprint(gcd(100, 30))\nprint(gcd(100, 120))"
    },
    {
      "rank": 75,
      "score": 8.0,
      "candidate": "def gcd(num1, num2):\n    while num2 != 0:\n        num1, num2 = num2, num1 % num2\n    return num1\n\ndef gcd_recursive(num1, num2):\n    if num2 == 0:\n        return num1\n    else:\n        return gcd_recursive(num2, num1 % num2)\n\ndef gcd_recursive_with_dict(num1, num2):\n    if num2 == 0:\n        return num1\n    else:\n        return gcd_recursive_with_dict(num2, num1 % num2)"
    },
    {
      "rank": 76,
      "score": 8.0,
      "candidate": "def gcd(a, b):\n    if a == b:\n        return a\n    elif a > b:\n        return gcd(a - b, b)\n    else:\n        return gcd(a, b - a)\n\n\na = 50\nb = 20\nprint(gcd(a, b))"
    },
    {
      "rank": 77,
      "score": 8.0,
      "candidate": "def gcd(a, b):\n    if a < 0 or b < 0:\n        return \"Invalid Input\"\n\n    if a == 0:\n        return b\n\n    return gcd(b % a, a)\n\n\na = int(input(\"Enter First Number: \"))\nb = int(input(\"Enter Second Number: \"))\nprint(\"GCD of {0} and {1} is {2}\".format(a, b, gcd(a, b)))"
    },
    {
      "rank": 78,
      "score": 8.0,
      "candidate": "def gcd(a, b):\n    \"\"\"\n    Finds the greatest common divisor of two positive integers.\n\n    >>> gcd(24, 36)\n    12\n    >>> gcd(4, 6)\n    2\n    >>> gcd(25, 15)\n    5\n    >>> gcd(23, 12)\n    1\n    \"\"\"\n    if a == 0:\n        return b\n    return gcd(b % a, a)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 79,
      "score": 8.0,
      "candidate": "def gcd(a, b):\n    if b == 0:\n        return a\n    else:\n        return gcd(b, a % b)\n\n\nprint(gcd(12, 20))"
    },
    {
      "rank": 80,
      "score": 8.0,
      "candidate": "def gcd(x, y):\n    \"\"\"\n    GCD of two integers.\n    \"\"\"\n    if x > y:\n        smaller = y\n    else:\n        smaller = x\n\n    for i in range(1, smaller + 1):\n        if (x % i == 0) and (y % i == 0):\n            gcd = i\n\n    return gcd\n\n\nif __name__ == \"__main__\":\n    print(gcd(12, 16))"
    },
    {
      "rank": 81,
      "score": 8.0,
      "candidate": "def gcd(a, b):\n    while b != 0:\n        a, b = b, a % b\n    return a\n\n\ndef gcd_recursive(a, b):\n    if b == 0:\n        return a\n    else:\n        return gcd_recursive(b, a % b)\n\n\ndef gcd_iterative(a, b):\n    while b != 0:\n        a, b = b, a % b\n    return a\n\n\nprint(gcd_iterative(10, 15))"
    },
    {
      "rank": 82,
      "score": 8.0,
      "candidate": "def gcd(a, b):\n    if a == b:\n        return a\n    if a > b:\n        return gcd(a - b, b)\n    return gcd(a, b - a)\n\n\ndef main():\n    print(gcd(10, 15))\n    print(gcd(20, 30))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 83,
      "score": 8.0,
      "candidate": "def gcd(a, b):\n    if a == 0:\n        return b\n    elif b == 0:\n        return a\n    elif a < b:\n        return gcd(a, b % a)\n    else:\n        return gcd(a % b, b)\n\n\nprint(gcd(15, 5))"
    },
    {
      "rank": 84,
      "score": 8.0,
      "candidate": "def gcd(a, b):\n    if a == 0:\n        return b\n    if b == 0:\n        return a\n\n    if a == b:\n        return a\n\n    if a > b:\n        return gcd(a - b, b)\n\n    return gcd(a, b - a)\n\n\nif __name__ == \"__main__\":\n    print(gcd(2, 6))"
    },
    {
      "rank": 85,
      "score": 8.0,
      "candidate": "def gcd(a, b):\n    if b == 0:\n        return a\n    return gcd(b, a % b)\n\n\nprint(gcd(24, 36))\nprint(gcd(24, 12))\nprint(gcd(24, 48))"
    },
    {
      "rank": 86,
      "score": 8.0,
      "candidate": "def gcd(x, y):\n    if y == 0:\n        return x\n    return gcd(y, x % y)\n\n\nprint(gcd(12, 15))\nprint(gcd(12, 12))\nprint(gcd(12, 0))"
    },
    {
      "rank": 87,
      "score": 8.0,
      "candidate": "def gcd(a, b):\n    if a < b:\n        a, b = b, a\n    if a % b == 0:\n        return b\n    return gcd(b, a % b)\n\n\na = 15\nb = 20\nprint(gcd(a, b))"
    },
    {
      "rank": 88,
      "score": 8.0,
      "candidate": "def gcd(a, b):\n    \"\"\"\n    GCD of two integers\n    :param a: int\n    :param b: int\n    :return: int\n    \"\"\"\n    if a < 0 or b < 0:\n        return \"Invalid input\"\n    while b != 0:\n        a, b = b, a % b\n    return a\n\n\nprint(gcd(12, 16))"
    },
    {
      "rank": 89,
      "score": 8.0,
      "candidate": "def gcd(x, y):\n    while x != y:\n        if x > y:\n            x = x - y\n        else:\n            y = y - x\n    return x\n\n\nprint(gcd(12, 8))"
    },
    {
      "rank": 90,
      "score": 8.0,
      "candidate": "def gcd(a, b):\n    \"\"\"\n    This function will find the GCD of two numbers\n\n    >>> gcd(12, 4)\n    4\n\n    >>> gcd(5, 25)\n    5\n\n    >>> gcd(10, 20)\n    10\n\n    >>> gcd(5, 20)\n    5\n\n    >>> gcd(100, 200)\n    100\n    \"\"\"\n    if a == 0:\n        return b\n    elif b == 0:\n        return a\n    if a > b:\n        return gcd(a - b, b)\n    return gcd(a, b - a)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 91,
      "score": 8.0,
      "candidate": "def gcd(a, b):\n    if a < b:\n        a, b = b, a\n    if a % b == 0:\n        return b\n    return gcd(b, a % b)\n\ndef gcd_euclidean(a, b):\n    return gcd(max(a, b), min(a, b))\n\nprint(gcd(10, 20))\nprint(gcd_euclidean(10, 20))"
    },
    {
      "rank": 92,
      "score": 8.0,
      "candidate": "def gcd(x, y):\n    while(y):\n        x, y = y, x % y\n    return x"
    },
    {
      "rank": 93,
      "score": 8.0,
      "candidate": "def gcd(x, y):\n    if x == 0:\n        return y\n    if y == 0:\n        return x\n    if x == y:\n        return x\n    if x > y:\n        return gcd(x - y, y)\n    return gcd(x, y - x)\n\n\nprint(gcd(10, 15))\nprint(gcd(15, 10))"
    },
    {
      "rank": 94,
      "score": 8.0,
      "candidate": "def gcd(x, y):\n    if x == 0:\n        return y\n    if y == 0:\n        return x\n\n    if x > y:\n        return gcd(y, x)\n\n    if x % y == 0:\n        return y\n    return gcd(y, x % y)\n\n\nprint(gcd(5, 10))\nprint(gcd(10, 5))\nprint(gcd(10, 10))\nprint(gcd(10, 11))"
    },
    {
      "rank": 95,
      "score": 8.0,
      "candidate": "def gcd(a, b):\n    if a < b:\n        a, b = b, a\n\n    while b != 0:\n        a, b = b, a % b\n    return a\n\n\ndef gcd_recursive(a, b):\n    if a < b:\n        a, b = b, a\n    if a == b:\n        return a\n    return gcd_recursive(b, a % b)\n\n\nif __name__ == \"__main__\":\n    print(gcd(20, 40))\n    print(gcd_recursive(20, 40))"
    },
    {
      "rank": 96,
      "score": 8.0,
      "candidate": "def gcd(a, b):\n    \"\"\"\n    Return the Greatest Common Divisor of a and b using Euclid's algorithm\n    \"\"\"\n    while b > 0:\n        a, b = b, a % b\n    return a\n\n\ndef gcd_recursive(a, b):\n    if b == 0:\n        return a\n    return gcd_recursive(b, a % b)\n\n\ndef gcd_recursive_v2(a, b):\n    if b == 0:\n        return a\n    if a == 0:\n        return b\n    return gcd_recursive_v2(min(a, b), max(a, b) % min(a, b))\n\n\nif __name__ == \"__main__\":\n    a = 36\n    b = 64\n    print(gcd(a, b))\n    print(gcd_recursive(a, b))\n    print(gcd_recursive_v2(a, b))"
    },
    {
      "rank": 97,
      "score": 8.0,
      "candidate": "def gcd(a, b):\n    \"\"\"\n    TC: O(log(a+b))\n    SC: O(1)\n    \"\"\"\n    if a < b:\n        a, b = b, a\n    if b == 0:\n        return a\n    return gcd(b, a % b)\n\n\nif __name__ == \"__main__\":\n    print(gcd(18, 45))"
    },
    {
      "rank": 98,
      "score": 8.0,
      "candidate": "def gcd(a, b):\n    if b == 0:\n        return a\n    else:\n        return gcd(b, a % b)\n\n\nprint(gcd(12, 8))\nprint(gcd(12, 12))"
    },
    {
      "rank": 99,
      "score": 7.0,
      "candidate": "def gcd(a, b):\n    if a == b:\n        return a\n    elif a < b:\n        return gcd(a, b - a)\n    else:\n        return gcd(a - b, b)\n\n\ndef gcd2(a, b):\n    while a != b:\n        if a > b:\n            a = a - b\n        else:\n            b = b - a\n    return a\n\n\nprint(gcd(6, 8))\nprint(gcd2(6, 8))"
    },
    {
      "rank": 100,
      "score": 1.0,
      "candidate": "def gcd(x: int, y: int) -> int:\n    \"\"\"\n    Using Euclid's Algorithm\n    \"\"\"\n    while y:\n        x, y = y, x % y\n    return x\n\n\nif __name__ == \"__main__\":\n    assert gcd(20, 40) == 20"
    }
  ]
}