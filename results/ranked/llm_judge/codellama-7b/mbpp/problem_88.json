{
  "timestamp": "2025-09-14T22:57:52.293284",
  "method": "improved_llm_judge",
  "judge_model": "codellama/CodeLlama-7b-Python-hf",
  "target_model": "codellama-7b",
  "dataset": "mbpp",
  "problem_number": 88,
  "total_candidates": 100,
  "results": [
    {
      "rank": 1,
      "score": 10.0,
      "candidate": "def decimal_to_binary(n: int) -> str:\n    \"\"\"\n    :param n: decimal number to convert to binary\n    :return: binary number\n    >>> decimal_to_binary(10)\n    '1010'\n    >>> decimal_to_binary(50)\n    '110010'\n    \"\"\"\n    binary_num = \"\"\n\n    while n != 0:\n        binary_num = str(n % 2) + binary_num\n        n = n // 2\n\n    return binary_num\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 2,
      "score": 10.0,
      "candidate": "def decimal_to_binary(decimal_number):\n    if decimal_number == 0:\n        return 0\n    binary = []\n    while decimal_number > 0:\n        binary.append(decimal_number % 2)\n        decimal_number //= 2\n    return \"\".join(map(str, binary[::-1]))\n\n\nif __name__ == \"__main__\":\n    print(decimal_to_binary(123))"
    },
    {
      "rank": 3,
      "score": 10.0,
      "candidate": "def decimal_to_binary(number: int) -> int:\n    \"\"\"\n    >>> decimal_to_binary(10)\n    '1010'\n    \"\"\"\n    return bin(number)[2:]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 4,
      "score": 10.0,
      "candidate": "# O(log(n)) time | O(1) space\ndef decimalToBinary(number):\n    result = \"\"\n\n    while number > 0:\n        result = str(number % 2) + result\n        number = number // 2\n\n    return result"
    },
    {
      "rank": 5,
      "score": 10.0,
      "candidate": "def dec_to_binary(n):\n    if n == 0:\n        return \"0\"\n    else:\n        return dec_to_binary(n // 2) + str(n % 2)\n\n\nif __name__ == \"__main__\":\n    print(dec_to_binary(10))"
    },
    {
      "rank": 6,
      "score": 10.0,
      "candidate": "def decimal_to_binary(decimal):\n    if decimal == 0:\n        return 0\n\n    binary = []\n    while decimal > 0:\n        binary.append(decimal % 2)\n        decimal = decimal // 2\n\n    return int(''.join(map(str, binary[::-1])))\n\nif __name__ == \"__main__\":\n    print(decimal_to_binary(10))\n    print(decimal_to_binary(42))"
    },
    {
      "rank": 7,
      "score": 10.0,
      "candidate": "def decimal_to_binary(decimal):\n    binary_string = \"\"\n    while decimal > 0:\n        remainder = decimal % 2\n        decimal = decimal // 2\n        binary_string += str(remainder)\n    return binary_string[::-1]\n\n\ndef main():\n    assert decimal_to_binary(2) == \"10\"\n    assert decimal_to_binary(12) == \"1100\"\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 8,
      "score": 10.0,
      "candidate": "# O(n) time | O(n) space\ndef decimalToBinary(decimal):\n    if decimal == 0:\n        return 0\n    binary = \"\"\n    while decimal > 0:\n        binary += str(decimal % 2)\n        decimal = decimal // 2\n    return binary[::-1]\n\n\nprint(decimalToBinary(10))\nprint(decimalToBinary(15))"
    },
    {
      "rank": 9,
      "score": 10.0,
      "candidate": "def decimal_to_binary(decimal_number):\n    \"\"\"\n    Convert a decimal number to its binary equivalent.\n\n    :param decimal_number: int\n    :return: str\n    \"\"\"\n    if decimal_number == 0:\n        return \"0\"\n    binary_number = \"\"\n    while decimal_number != 0:\n        binary_number += str(decimal_number % 2)\n        decimal_number = int(decimal_number / 2)\n    return binary_number[::-1]\n\n\nif __name__ == \"__main__\":\n    print(decimal_to_binary(2))\n    print(decimal_to_binary(11))\n    print(decimal_to_binary(23))\n    print(decimal_to_binary(24))\n    print(decimal_to_binary(25))\n    print(decimal_to_binary(26))\n    print(decimal_to_binary(27))\n    print(decimal_to_binary(28))\n    print(decimal_to_binary(29))\n    print(decimal_to_binary(30))"
    },
    {
      "rank": 10,
      "score": 10.0,
      "candidate": "def decimal_to_binary(num: int) -> str:\n    \"\"\"\n    >>> decimal_to_binary(23)\n    '10111'\n    >>> decimal_to_binary(15)\n    '1111'\n    >>> decimal_to_binary(1)\n    '1'\n    >>> decimal_to_binary(0)\n    '0'\n    >>> decimal_to_binary(8)\n    '1000'\n    >>> decimal_to_binary(16)\n    '10000'\n    >>> decimal_to_binary(-1)\n    Traceback (most recent call last):\n        ...\n    ValueError: Only non-negative numbers supported\n    >>> decimal_to_binary(2.3)\n    Traceback (most recent call last):\n        ...\n    TypeError: Only integer numbers supported\n    \"\"\"\n    if num < 0:\n        raise ValueError(\"Only non-negative numbers supported\")\n    if not isinstance(num, int):\n        raise TypeError(\"Only integer numbers supported\")\n    return bin(num)[2:]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 11,
      "score": 10.0,
      "candidate": "def decimal_to_binary(num: int) -> int:\n    \"\"\"\n    :param: num - input decimal number\n    return: binary equivalent\n    \"\"\"\n    if num == 0:\n        return 0\n    else:\n        return num % 2 + 10 * decimal_to_binary(num // 2)\n\n\nif __name__ == \"__main__\":\n    print(decimal_to_binary(10))"
    },
    {
      "rank": 12,
      "score": 10.0,
      "candidate": "def decimal_to_binary(num: int) -> str:\n    \"\"\"\n    >>> decimal_to_binary(0)\n    '0'\n    >>> decimal_to_binary(1)\n    '1'\n    >>> decimal_to_binary(2)\n    '10'\n    >>> decimal_to_binary(3)\n    '11'\n    >>> decimal_to_binary(4)\n    '100'\n    >>> decimal_to_binary(5)\n    '101'\n    >>> decimal_to_binary(6)\n    '110'\n    >>> decimal_to_binary(7)\n    '111'\n    >>> decimal_to_binary(8)\n    '1000'\n    >>> decimal_to_binary(9)\n    '1001'\n    >>> decimal_to_binary(10)\n    '1010'\n    \"\"\"\n    if num < 0:\n        return \"Decimal number should be greater than or equal to 0\"\n    elif num == 0:\n        return \"0\"\n    elif num == 1:\n        return \"1\"\n    else:\n        return decimal_to_binary(int(num / 2)) + str(num % 2)\n\n\nif __name__ == \"__main__\":\n    from doctest import testmod\n\n    testmod()"
    },
    {
      "rank": 13,
      "score": 10.0,
      "candidate": "def decimal_to_binary(decimal_num: int) -> int:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(1)\n    \"\"\"\n    if decimal_num < 0:\n        raise ValueError(\"Invalid value\")\n\n    binary_num: int = 0\n\n    while decimal_num > 0:\n        binary_num = (binary_num * 10) + (decimal_num % 2)\n        decimal_num = decimal_num // 2\n\n    return binary_num\n\n\nif __name__ == \"__main__\":\n    print(decimal_to_binary(25))\n    print(decimal_to_binary(123))\n    print(decimal_to_binary(10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"
    },
    {
      "rank": 14,
      "score": 10.0,
      "candidate": "def decimal_to_binary(n: int) -> str:\n    \"\"\"\n    >>> decimal_to_binary(5)\n    '101'\n    >>> decimal_to_binary(13)\n    '1101'\n    >>> decimal_to_binary(16)\n    '10000'\n    >>> decimal_to_binary(32)\n    '100000'\n    \"\"\"\n    return bin(n)[2:]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 15,
      "score": 10.0,
      "candidate": "def decimal_to_binary(n: int) -> str:\n    \"\"\"\n    >>> decimal_to_binary(10)\n    '1010'\n    >>> decimal_to_binary(5)\n    '101'\n    >>> decimal_to_binary(17)\n    '10001'\n    >>> decimal_to_binary(123456)\n    '1111101011010'\n    \"\"\"\n    result: str = \"\"\n    while n > 0:\n        result += str(n % 2)\n        n //= 2\n    return result[::-1]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 16,
      "score": 10.0,
      "candidate": "# This is the binary number\n# def DecToBin(n):\n#     result = \"\"\n#     while n > 0:\n#         result = str(n % 2) + result\n#         n = n // 2\n#     return result\n\n\n# This is the decimal number\ndef DecToBin(n):\n    result = \"\"\n    while n > 0:\n        result = str(n % 10) + result\n        n = n // 10\n    return result\n\n\n# Tests\ndef test(n, expected_answer):\n    answer = DecToBin(n)\n\n    if answer != expected_answer:\n        raise Exception(\n            f\"Answer {answer} is wrong. Expected answer is {expected_answer}\"\n        )\n\n\n# Test 1\ntest(125, \"1111101\")\n\n# Test 2\ntest(1, \"1\")\n\n# Test 3\ntest(2, \"10\")\n\n# Test 4\ntest(3, \"11\")\n\n# Test 5\ntest(4, \"100\")\n\n# Test 6\ntest(5, \"101\")\n\n# Test 7\ntest(6, \"110\")\n\n# Test 8\ntest(7, \"111\")\n\n# Test 9\ntest(8, \"1000\")\n\n# Test 10\ntest(9, \"1001\")\n\n# Test 11\ntest(10, \"1010\")\n\n# Test 12\ntest(11, \"1011\")\n\n# Test 13\ntest(12, \"1100\")\n\n# Test 14\ntest(13, \"1101\")\n\n# Test 15\ntest(14, \"1110\")\n\n# Test 16\ntest(15, \"1111\")\n\n# Test 17\ntest(16, \"10000\")\n\n# Test 18\ntest(17, \"10001\")\n\n# Test 19"
    },
    {
      "rank": 17,
      "score": 10.0,
      "candidate": "def decimal_to_binary(decimal_number: int) -> str:\n    \"\"\"\n    :param decimal_number: decimal number to be converted into binary\n    :return: binary equivalent of decimal number\n\n    >>> decimal_to_binary(35)\n    '100101'\n\n    >>> decimal_to_binary(13)\n    '1101'\n\n    >>> decimal_to_binary(15)\n    '1111'\n\n    >>> decimal_to_binary(0)\n    '0'\n\n    >>> decimal_to_binary(-1)\n    Traceback (most recent call last):\n        ...\n    ValueError: Input number should be positive\n\n    >>> decimal_to_binary(2)\n    Traceback (most recent call last):\n        ...\n    ValueError: Input number should be less than 256\n\n    >>> decimal_to_binary(\"Hello\")\n    Traceback (most recent call last):\n        ...\n    TypeError: Invalid input\n\n    >>> decimal_to_binary(256)\n    Traceback (most recent call last):\n        ...\n    ValueError: Input number should be less than 256\n    \"\"\"\n    if not isinstance(decimal_number, int):\n        raise TypeError(\"Invalid input\")\n    if decimal_number < 0:\n        raise ValueError(\"Input number should be positive\")\n    if decimal_number > 255:\n        raise ValueError(\"Input number should be less than 256\")\n\n    return bin(decimal_number)[2:]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 18,
      "score": 10.0,
      "candidate": "def decimal_to_binary(dec_number):\n    if dec_number == 0:\n        return 0\n\n    binary_num = []\n\n    while dec_number != 0:\n        binary_num.append(str(dec_number % 2))\n        dec_number = int(dec_number / 2)\n\n    return \"\".join(reversed(binary_num))\n\n\nif __name__ == \"__main__\":\n    print(decimal_to_binary(1234))"
    },
    {
      "rank": 19,
      "score": 10.0,
      "candidate": "def decimal_to_binary(decimal_number):\n    \"\"\"\n    >>> decimal_to_binary(10)\n    '1010'\n    >>> decimal_to_binary(15)\n    '1111'\n    >>> decimal_to_binary(13)\n    '1101'\n    >>> decimal_to_binary(2)\n    '10'\n    >>> decimal_to_binary(17)\n    '10001'\n    >>> decimal_to_binary(567)\n    '101111011'\n    \"\"\"\n    binary_number = \"\"\n    while decimal_number > 0:\n        binary_number = str(decimal_number % 2) + binary_number\n        decimal_number = decimal_number // 2\n    return binary_number\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 20,
      "score": 10.0,
      "candidate": "def decimal_to_binary(num):\n    return bin(num)[2:]\n\n\nif __name__ == \"__main__\":\n    print(decimal_to_binary(123))"
    },
    {
      "rank": 21,
      "score": 10.0,
      "candidate": "def decimal_to_binary(decimal_number):\n    \"\"\"\n    :param decimal_number: int - a decimal number\n    :return: str - the binary representation of the decimal number.\n    \"\"\"\n    return bin(decimal_number)[2:]\n\n\nprint(decimal_to_binary(10))\nprint(decimal_to_binary(5))\nprint(decimal_to_binary(15))"
    },
    {
      "rank": 22,
      "score": 10.0,
      "candidate": "def decimal_to_binary(decimal):\n    \"\"\"\n    Convert decimal number to binary.\n\n    :param decimal: int\n    :return: str\n\n    >>> decimal_to_binary(5)\n    '101'\n    \"\"\"\n    return bin(decimal)[2:]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 23,
      "score": 10.0,
      "candidate": "def decimal_to_binary(decimal_number):\n    if decimal_number == 0:\n        return 0\n    else:\n        return decimal_number % 2 + 10 * decimal_number_to_binary(decimal_number // 2)\n\n\nif __name__ == \"__main__\":\n    print(decimal_to_binary(10))"
    },
    {
      "rank": 24,
      "score": 10.0,
      "candidate": "def decimal_to_binary(decimal: int) -> str:\n    \"\"\"\n    :param decimal: a decimal number\n    :return: binary number\n    >>> decimal_to_binary(128)\n    '10000000'\n    >>> decimal_to_binary(11)\n    '1011'\n    >>> decimal_to_binary(13)\n    '1101'\n    >>> decimal_to_binary(15)\n    '1111'\n    >>> decimal_to_binary(16)\n    '10000'\n    >>> decimal_to_binary(255)\n    '11111111'\n    >>> decimal_to_binary(0)\n    '0'\n    >>> decimal_to_binary(-1)\n    Traceback (most recent call last):\n        ...\n    ValueError: Invalid input number\n    \"\"\"\n    if decimal < 0:\n        raise ValueError(\"Invalid input number\")\n\n    if decimal == 0:\n        return \"0\"\n\n    result: str = \"\"\n\n    while decimal > 0:\n        result += str(decimal % 2)\n        decimal = decimal // 2\n\n    return result[::-1]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 25,
      "score": 10.0,
      "candidate": "def decimal_to_binary(num: int) -> str:\n    \"\"\"\n    >>> decimal_to_binary(10)\n    '1010'\n    >>> decimal_to_binary(5)\n    '101'\n    >>> decimal_to_binary(17)\n    '10001'\n    >>> decimal_to_binary(7)\n    '111'\n    \"\"\"\n    return bin(num)[2:]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 26,
      "score": 10.0,
      "candidate": "def decimal_to_binary(decimal):\n    binary = []\n    while decimal > 0:\n        binary.append(str(decimal % 2))\n        decimal //= 2\n    return ''.join(binary[::-1])\n\n\nif __name__ == \"__main__\":\n    print(decimal_to_binary(128))\n    print(decimal_to_binary(255))\n    print(decimal_to_binary(1024))\n    print(decimal_to_binary(123456789))"
    },
    {
      "rank": 27,
      "score": 10.0,
      "candidate": "def decimal_to_binary(decimal):\n    # Find the length of the binary number\n    length = len(bin(decimal)[2:])\n    binary = [0] * length\n\n    # Convert decimal to binary\n    index = length - 1\n    while decimal > 0:\n        binary[index] = decimal % 2\n        decimal = decimal // 2\n        index -= 1\n\n    return binary\n\n\nif __name__ == \"__main__\":\n    print(decimal_to_binary(2))\n    print(decimal_to_binary(128))\n    print(decimal_to_binary(30))"
    },
    {
      "rank": 28,
      "score": 10.0,
      "candidate": "def decimal_to_binary(decimal: int) -> str:\n    \"\"\"\n    Convert a decimal number to binary.\n    >>> decimal_to_binary(2)\n    '10'\n    >>> decimal_to_binary(15)\n    '1111'\n    >>> decimal_to_binary(33)\n    '10011'\n    >>> decimal_to_binary(0)\n    '0'\n    >>> decimal_to_binary(-1)\n    Traceback (most recent call last):\n        ...\n    ValueError: Decimal must be a positive integer.\n    \"\"\"\n    if decimal < 0:\n        raise ValueError(\"Decimal must be a positive integer.\")\n    binary: str = \"\"\n    while decimal != 0:\n        binary = str(decimal % 2) + binary\n        decimal //= 2\n    return binary\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 29,
      "score": 10.0,
      "candidate": "def decimal_to_binary(decimal):\n    return bin(decimal).replace(\"0b\", \"\")\n\n\nif __name__ == \"__main__\":\n    print(decimal_to_binary(25))"
    },
    {
      "rank": 30,
      "score": 9.0,
      "candidate": "def decimal_to_binary(n):\n    if n == 0:\n        return 0\n    else:\n        return (n % 2) + 10 * decimal_to_binary(int(n / 2))\n\n\nif __name__ == \"__main__\":\n    print(decimal_to_binary(4))\n    print(decimal_to_binary(16))"
    },
    {
      "rank": 31,
      "score": 9.0,
      "candidate": "def decimal_to_binary(n):\n    if n == 0:\n        return 0\n    else:\n        return n % 2 + 10 * decimal_to_binary(n//2)\n\n\nif __name__ == \"__main__\":\n    print(decimal_to_binary(128))"
    },
    {
      "rank": 32,
      "score": 8.0,
      "candidate": "# Binary Converter\n# Developer: Murillo Grubler\n# Since: 24/02/2022\n\ndef to_binary(number):\n    result = \"\"\n    while number > 0:\n        result = str(number % 2) + result\n        number = number // 2\n    return result\n\ndef main():\n    number = int(input(\"Type a number: \"))\n    print(\"The binary equivalent of %d is %s\" % (number, to_binary(number)))\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 33,
      "score": 8.0,
      "candidate": "def decimal_to_binary(decimal):\n    binary = 0\n    count = 0\n    while decimal != 0:\n        binary += (decimal % 2) * (10 ** count)\n        count += 1\n        decimal //= 2\n    return binary\n\n\ndef decimal_to_binary_rec(decimal):\n    if decimal == 0:\n        return 0\n    return decimal % 2 + 10 * decimal_to_binary_rec(decimal // 2)\n\n\nif __name__ == \"__main__\":\n    print(decimal_to_binary(10))\n    print(decimal_to_binary_rec(10))"
    },
    {
      "rank": 34,
      "score": 8.0,
      "candidate": "def decimal_to_binary(decimal_number):\n    binary_number = \"\"\n    while decimal_number > 0:\n        binary_number = str(decimal_number % 2) + binary_number\n        decimal_number = decimal_number // 2\n    return binary_number\n\n\nif __name__ == \"__main__\":\n    decimal_number = int(input(\"Enter a decimal number: \"))\n    print(\"Binary equivalent of {0} is {1}\".format(decimal_number, decimal_to_binary(decimal_number)))"
    },
    {
      "rank": 35,
      "score": 8.0,
      "candidate": "def decimal_to_binary(decimal):\n    binary = \"\"\n    while decimal != 0:\n        binary += str(decimal % 2)\n        decimal //= 2\n    return binary[::-1]\n\n\nif __name__ == \"__main__\":\n    print(decimal_to_binary(25))"
    },
    {
      "rank": 36,
      "score": 8.0,
      "candidate": "def decimalToBinary(decimal):\n    # Write your code here.\n\tif decimal == 0:\n\t\treturn 0\n\tstack = []\n\twhile decimal != 0:\n\t\trem = decimal % 2\n\t\tstack.append(rem)\n\t\tdecimal = decimal // 2\n\tbinary = \"\"\n\twhile len(stack) != 0:\n\t\tbinary = binary + str(stack.pop())\n\treturn binary\n\ndef main():\n    decimal = 12\n    print(decimalToBinary(decimal))\n    print(bin(decimal))\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 37,
      "score": 8.0,
      "candidate": "def decimal_to_binary(decimal):\n    \"\"\"\n    >>> decimal_to_binary(25)\n    '11001'\n    \"\"\"\n    if decimal < 0:\n        return \"Decimal number must be positive\"\n    elif decimal == 0:\n        return \"0\"\n    else:\n        binary = \"\"\n        while decimal > 0:\n            binary += str(decimal % 2)\n            decimal //= 2\n        return binary[::-1]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 38,
      "score": 8.0,
      "candidate": "def decimal_to_binary(n):\n    \"\"\"\n    :param n: int - decimal number\n    :return: int - binary equivalent\n    \"\"\"\n    result = []\n    while n > 0:\n        result.append(str(n % 2))\n        n //= 2\n    return int(''.join(result[::-1]))\n\n\nif __name__ == '__main__':\n    print(decimal_to_binary(123))"
    },
    {
      "rank": 39,
      "score": 8.0,
      "candidate": "def decimal_to_binary(decimal):\n    \"\"\"\n    :param: decimal - input decimal number\n    return: binary equivalent of the input decimal\n\n    >> decimal_to_binary(0)\n    0\n    >> decimal_to_binary(1)\n    1\n    >> decimal_to_binary(10)\n    1010\n    >> decimal_to_binary(52)\n    111100\n    \"\"\"\n    if decimal < 0:\n        return -decimal_to_binary(-decimal)\n    if decimal < 1:\n        return decimal\n    else:\n        return decimal_to_binary(int(decimal / 2)) + str(decimal % 2)\n\n\nif __name__ == \"__main__\":\n    print(decimal_to_binary(10))"
    },
    {
      "rank": 40,
      "score": 8.0,
      "candidate": "def decimal_to_binary(num):\n    # Base Case\n    if num == 0:\n        return 0\n\n    # Recursive Case\n    return num % 2 + 10 * decimal_to_binary(num // 2)\n\n\nif __name__ == \"__main__\":\n    print(decimal_to_binary(10))"
    },
    {
      "rank": 41,
      "score": 8.0,
      "candidate": "def decimal_to_binary(decimal):\n    if decimal < 0:\n        return \"Decimal number should be positive\"\n    elif decimal == 0:\n        return \"Decimal number is 0\"\n    else:\n        binary = []\n        while decimal > 0:\n            binary.append(decimal % 2)\n            decimal = decimal // 2\n        return binary[::-1]\n\nif __name__ == \"__main__\":\n    print(decimal_to_binary(12))\n    print(decimal_to_binary(10))\n    print(decimal_to_binary(16))\n    print(decimal_to_binary(-12))"
    },
    {
      "rank": 42,
      "score": 8.0,
      "candidate": "#!/usr/bin/env python\n\nimport math\n\ndef dec_to_bin(dec):\n    \"\"\"\n    :param: dec - number\n    Return the binary equivalent of the given decimal number\n    \"\"\"\n\n    if dec < 0:\n        return -1\n\n    if dec == 0:\n        return 0\n\n    return int(math.log(dec, 2))\n\ndef dec_to_bin_recursive(dec):\n    \"\"\"\n    :param: dec - number\n    Return the binary equivalent of the given decimal number\n    \"\"\"\n\n    if dec < 0:\n        return -1\n\n    if dec == 0:\n        return 0\n\n    if dec % 2 == 0:\n        return dec_to_bin_recursive(dec / 2) * 10 + 0\n\n    return dec_to_bin_recursive(dec / 2) * 10 + 1\n\n\ndef main():\n    \"\"\"\n    :return: None\n    \"\"\"\n    print dec_to_bin(32)\n    print dec_to_bin_recursive(32)\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 43,
      "score": 8.0,
      "candidate": "def decimal_to_binary(number):\n    result = ''\n    while number != 0:\n        result += str(number % 2)\n        number = number // 2\n    return result[::-1]\n\n\nprint(decimal_to_binary(15))\nprint(decimal_to_binary(32))"
    },
    {
      "rank": 44,
      "score": 8.0,
      "candidate": "def decimal_to_binary(decimal_number: int) -> str:\n    \"\"\"\n    >>> decimal_to_binary(25)\n    '11001'\n    \"\"\"\n    return bin(decimal_number)[2:]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 45,
      "score": 8.0,
      "candidate": "# O(n)\ndef decimal_to_binary(decimal):\n    # check if the decimal number is 0\n    if decimal == 0:\n        return \"0\"\n\n    # if decimal number is greater than 0\n    binary = \"\"\n    while decimal > 0:\n        binary += str(decimal % 2)\n        decimal = int(decimal / 2)\n    return binary[::-1]\n\n\nif __name__ == \"__main__\":\n    print(decimal_to_binary(257))"
    },
    {
      "rank": 46,
      "score": 8.0,
      "candidate": "def decimal_to_binary(decimal: int) -> int:\n    if decimal == 0:\n        return 0\n    result = \"\"\n    while decimal > 0:\n        result = str(decimal % 2) + result\n        decimal = decimal // 2\n    return result\n\n\ndef main():\n    print(decimal_to_binary(12))\n    print(decimal_to_binary(14))\n    print(decimal_to_binary(15))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 47,
      "score": 8.0,
      "candidate": "# iterative solution\ndef decimal_to_binary(decimal_number):\n    binary_number = \"\"\n    while decimal_number > 0:\n        binary_number = str(decimal_number % 2) + binary_number\n        decimal_number = decimal_number // 2\n    return binary_number\n\n\n# recursive solution\ndef decimal_to_binary_recursive(decimal_number):\n    if decimal_number == 0:\n        return 0\n    return decimal_number % 2 + 10 * decimal_to_binary_recursive(decimal_number // 2)\n\n\nprint(decimal_to_binary_recursive(1234))"
    },
    {
      "rank": 48,
      "score": 8.0,
      "candidate": "def decimalToBinary(n: int) -> str:\n    if n == 0:\n        return \"0\"\n    binary_num: str = \"\"\n    while n > 0:\n        binary_num += str(n % 2)\n        n = n // 2\n    return binary_num[::-1]\n\n\nif __name__ == \"__main__\":\n    print(decimalToBinary(16))"
    },
    {
      "rank": 49,
      "score": 8.0,
      "candidate": "def decimal_to_binary(num):\n    \"\"\"Convert a decimal number to its binary equivalent\"\"\"\n    if num == 0:\n        return 0\n    return decimal_to_binary(num // 2) * 10 + num % 2\n\ndef main():\n    print(decimal_to_binary(10))\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 50,
      "score": 8.0,
      "candidate": "def decimal_to_binary(decimal_number):\n    if decimal_number == 0:\n        return 0\n\n    binary_number = ''\n\n    while decimal_number != 0:\n        binary_number = str(decimal_number % 2) + binary_number\n        decimal_number = decimal_number // 2\n\n    return binary_number\n\n\nif __name__ == '__main__':\n    print(decimal_to_binary(10))\n    print(decimal_to_binary(123))\n    print(decimal_to_binary(100))\n    print(decimal_to_binary(101))\n    print(decimal_to_binary(1000))\n    print(decimal_to_binary(1000000))"
    },
    {
      "rank": 51,
      "score": 8.0,
      "candidate": "def decimalToBinary(decimal):\n    binary = []\n    while decimal > 0:\n        binary.append(decimal % 2)\n        decimal = decimal // 2\n    return binary\n\n\ndecimal = 35\nprint(decimalToBinary(decimal))\n\n# Time complexity O(logN)"
    },
    {
      "rank": 52,
      "score": 8.0,
      "candidate": "def decimal_to_binary(n):\n    if n == 0:\n        return 0\n    return (n % 2 + 10 * decimal_to_binary(n // 2)) % 10\n\n\nif __name__ == \"__main__\":\n    print(decimal_to_binary(12))"
    },
    {
      "rank": 53,
      "score": 8.0,
      "candidate": "def decimal_to_binary(decimal):\n    binary = ''\n    while decimal > 0:\n        binary = str(decimal % 2) + binary\n        decimal = decimal // 2\n    return binary\n\n\nif __name__ == '__main__':\n    print(\"Decimal: 12, Binary:\", decimal_to_binary(12))\n    print(\"Decimal: 32, Binary:\", decimal_to_binary(32))\n    print(\"Decimal: 23, Binary:\", decimal_to_binary(23))"
    },
    {
      "rank": 54,
      "score": 8.0,
      "candidate": "def decimal_to_binary(number):\n    \"\"\"\n    Convert decimal number to binary.\n    :param number: Integer - the number to convert\n    :return: Integer - the binary equivalent of the number\n\n    >>> decimal_to_binary(1)\n    '1'\n    >>> decimal_to_binary(0)\n    '0'\n    >>> decimal_to_binary(15)\n    '1111'\n    >>> decimal_to_binary(4)\n    '100'\n    >>> decimal_to_binary(17)\n    '10001'\n    >>> decimal_to_binary(32)\n    '100000'\n    >>> decimal_to_binary(-1)\n    Traceback (most recent call last):\n        ...\n    ValueError: Only positive integers are allowed\n    \"\"\"\n    if number < 0:\n        raise ValueError(\"Only positive integers are allowed\")\n    if number == 0:\n        return \"0\"\n    binary = \"\"\n    while number > 0:\n        binary = str(number % 2) + binary\n        number = number // 2\n    return binary\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()\n\n    # Testing with input\n    # decimal = int(input(\"Decimal: \"))\n    # print(decimal_to_binary(decimal))"
    },
    {
      "rank": 55,
      "score": 8.0,
      "candidate": "def decimal_to_binary(decimal):\n    binary = \"\"\n    while decimal > 0:\n        binary = str(decimal % 2) + binary\n        decimal = decimal // 2\n    return binary\n\n\nif __name__ == \"__main__\":\n    print(decimal_to_binary(123))"
    },
    {
      "rank": 56,
      "score": 8.0,
      "candidate": "def decimal_to_binary(num):\n    if num == 0:\n        return 0\n\n    return decimal_to_binary(num // 2) + (num % 2)\n\nprint(decimal_to_binary(123))"
    },
    {
      "rank": 57,
      "score": 8.0,
      "candidate": "def decimalToBinary(n):\n    result = \"\"\n    while n > 0:\n        result = str(n%2) + result\n        n = n//2\n    return result\n\n\nprint(decimalToBinary(12))"
    },
    {
      "rank": 58,
      "score": 8.0,
      "candidate": "def decimal_to_binary(number):\n    if number == 0:\n        return 0\n\n    binary = []\n\n    while number > 0:\n        binary.append(number % 2)\n        number = number // 2\n\n    return binary\n\n\ndef main():\n    assert decimal_to_binary(10) == [1, 0, 1, 0]\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 59,
      "score": 8.0,
      "candidate": "def decimal_to_binary(decimal: int) -> int:\n    \"\"\"\n    :param decimal: decimal number to convert to binary\n    :return: binary number\n    >>> decimal_to_binary(123)\n    '1111011'\n    >>> decimal_to_binary(10)\n    '1010'\n    >>> decimal_to_binary(-10)\n    Traceback (most recent call last):\n    ...\n    ValueError: Input value must be greater than or equal to 0\n    >>> decimal_to_binary(\"123\")\n    Traceback (most recent call last):\n    ...\n    ValueError: Input value must be an integer\n    \"\"\"\n    if decimal < 0:\n        raise ValueError(\"Input value must be greater than or equal to 0\")\n    if not isinstance(decimal, int):\n        raise ValueError(\"Input value must be an integer\")\n    return bin(decimal)[2:]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 60,
      "score": 8.0,
      "candidate": "def decimal_to_binary(decimal_number):\n    binary_number = \"\"\n    while decimal_number > 0:\n        binary_number = str(decimal_number % 2) + binary_number\n        decimal_number = decimal_number // 2\n    return binary_number\n\n\nif __name__ == \"__main__\":\n    assert decimal_to_binary(3) == \"11\"\n    assert decimal_to_binary(15) == \"1111\""
    },
    {
      "rank": 61,
      "score": 8.0,
      "candidate": "def decimal_to_binary(num):\n    if num == 0:\n        return 0\n    stack = []\n    while num > 0:\n        stack.append(num % 2)\n        num = num // 2\n    res = 0\n    for i in range(len(stack)):\n        res += stack[-i-1] * (2**i)\n    return res\n\n\nif __name__ == \"__main__\":\n    print(decimal_to_binary(100))"
    },
    {
      "rank": 62,
      "score": 8.0,
      "candidate": "def decimal_to_binary(decimal):\n    if decimal < 0:\n        return None\n\n    if decimal == 0:\n        return 0\n\n    binary = \"\"\n    while decimal > 0:\n        binary = str(decimal % 2) + binary\n        decimal = decimal // 2\n    return binary\n\n\nprint(decimal_to_binary(3))\nprint(decimal_to_binary(10))\nprint(decimal_to_binary(15))\nprint(decimal_to_binary(20))"
    },
    {
      "rank": 63,
      "score": 8.0,
      "candidate": "def decimal_to_binary(n):\n    \"\"\"\n    :param: n - number to be converted\n    Return: a binary string of the number n\n    \"\"\"\n    if n < 0:\n        return -1\n    if n == 0:\n        return 0\n\n    result = ''\n\n    while n > 0:\n        result += str(n % 2)\n        n = n // 2\n\n    return result[::-1]\n\n\n# Test cases\nprint(decimal_to_binary(10))\nprint(decimal_to_binary(12))\nprint(decimal_to_binary(17))"
    },
    {
      "rank": 64,
      "score": 8.0,
      "candidate": "def decimal_to_binary(decimal):\n\tif decimal < 0:\n\t\traise ValueError(\"Non-negative numbers only\")\n\telif decimal == 0:\n\t\treturn 0\n\telif decimal == 1:\n\t\treturn 1\n\telse:\n\t\treturn decimal_to_binary(decimal // 2) + decimal % 2\n\n\ndef main():\n\tdecimal = int(input(\"Enter a decimal number: \"))\n\tprint(\"Binary equivalent of %d is %s\" % (decimal, decimal_to_binary(decimal)))\n\n\nif __name__ == '__main__':\n\tmain()"
    },
    {
      "rank": 65,
      "score": 8.0,
      "candidate": "def decimal_to_binary(decimal):\n    \"\"\"\n    :param decimal: int - decimal number\n    :return: str - binary equivalent\n    \"\"\"\n    if decimal == 0:\n        return \"0b0\"\n    binary_list = []\n    while decimal != 0:\n        binary_list.append(decimal % 2)\n        decimal //= 2\n    return \"0b\" + \"\".join(map(str, reversed(binary_list)))\n\n\nprint(decimal_to_binary(128))"
    },
    {
      "rank": 66,
      "score": 8.0,
      "candidate": "def decimal_to_binary(n):\n    \"\"\"\n    :param n: decimal number to be converted to binary\n    :return: binary representation of the decimal number\n    \"\"\"\n    if n == 0:\n        return 0\n\n    binary = []\n    while n != 0:\n        binary.append(n % 2)\n        n = n // 2\n    return binary[::-1]\n\n\nif __name__ == \"__main__\":\n    print(decimal_to_binary(123))"
    },
    {
      "rank": 67,
      "score": 8.0,
      "candidate": "\"\"\"Question:\nWrite a function to convert the given decimal number to its binary equivalent.\nHints:\nUse pow(base, exponent) to raise a base to an exponent.\n\n\"\"\"\ndef decimalToBinary(n):\n\treturn bin(n)[2:]\n\nprint decimalToBinary(12)\nprint decimalToBinary(5)\nprint decimalToBinary(2)"
    },
    {
      "rank": 68,
      "score": 8.0,
      "candidate": "from functools import reduce\n\n\ndef convert_decimal_to_binary(decimal):\n    return reduce(lambda x, y: x * 10 + y, decimal, 0)\n\n\ndef main():\n    print(convert_decimal_to_binary([1, 2, 3, 4, 5]))\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 69,
      "score": 8.0,
      "candidate": "def decimal_to_binary(decimal_number):\n    binary_number = []\n\n    while decimal_number != 0:\n        remainder = decimal_number % 2\n        decimal_number //= 2\n        binary_number.append(remainder)\n\n    return \"\".join(str(i) for i in binary_number[::-1])\n\n\nif __name__ == \"__main__\":\n    print(decimal_to_binary(234))"
    },
    {
      "rank": 70,
      "score": 1.0,
      "candidate": "# O(n)\ndef decimal_to_binary(dec_num: int) -> str:\n    \"\"\"\n    >>> decimal_to_binary(12)\n    '1100'\n    >>> decimal_to_binary(13)\n    '1101'\n    >>> decimal_to_binary(15)\n    '1111'\n    >>> decimal_to_binary(17)\n    '10001'\n    >>> decimal_to_binary(16)\n    '10000'\n    \"\"\"\n    binary_num: str = \"\"\n    while dec_num:\n        binary_num += str(dec_num % 2)\n        dec_num = dec_num // 2\n    return binary_num[::-1]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 71,
      "score": 1.0,
      "candidate": "def decimal_to_binary(decimal_num: int) -> str:\n    \"\"\"\n    :param: decimal_num - decimal number to be converted to binary\n    Return a binary string representing the input decimal number\n    \"\"\"\n    if decimal_num < 0:\n        raise ValueError(\"Decimal number must be positive\")\n\n    result = \"\"\n\n    while decimal_num > 0:\n        result += str(decimal_num % 2)\n        decimal_num = decimal_num // 2\n\n    return result[::-1]\n\n\ndef test_function(test_case):\n    decimal_num = test_case[0]\n    solution = test_case[1]\n    output = decimal_to_binary(decimal_num)\n    if output == solution:\n        print(\"Pass\")\n    else:\n        print(\"Fail\")\n\n\ntest_function([10, \"1010\"])\ntest_function([32, \"100000\"])\ntest_function([15, \"1111\"])\ntest_function([-1, \"11111111111111111111111111111101\"])"
    },
    {
      "rank": 72,
      "score": 1.0,
      "candidate": "def decimal_to_binary(dec_num):\n    binary_num = ''\n    while dec_num > 0:\n        binary_num += str(dec_num % 2)\n        dec_num = dec_num // 2\n    return binary_num[::-1]\n\ndef decimal_to_binary_1(dec_num):\n    if dec_num == 0:\n        return 0\n    else:\n        return (dec_num % 2 + 10 * decimal_to_binary_1(dec_num // 2))\n\nprint(decimal_to_binary(10))\nprint(decimal_to_binary_1(10))"
    },
    {
      "rank": 73,
      "score": 1.0,
      "candidate": "def decimal_to_binary(number: int) -> str:\n    \"\"\"\n    >>> decimal_to_binary(2)\n    '10'\n    >>> decimal_to_binary(1)\n    '1'\n    >>> decimal_to_binary(5)\n    '101'\n    >>> decimal_to_binary(15)\n    '1111'\n    \"\"\"\n    if number < 0:\n        raise ValueError(\"The number should be greater than 0\")\n    binary_number: str = \"\"\n    while number > 0:\n        binary_number += str(number % 2)\n        number //= 2\n    return binary_number[::-1]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 74,
      "score": 1.0,
      "candidate": "# O(log n)\ndef decimal_to_binary(decimal):\n    if decimal == 0:\n        return 0\n    binary = []\n    while decimal > 0:\n        binary.append(decimal % 2)\n        decimal = decimal // 2\n    return \"\".join(map(str, binary[::-1]))\n\n\ndef test_decimal_to_binary():\n    \"\"\"\n    >>> test_decimal_to_binary()\n    \"\"\"\n    assert decimal_to_binary(32) == \"100000\"\n    assert decimal_to_binary(13) == \"1101\"\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 75,
      "score": 1.0,
      "candidate": "def decimal_to_binary(decimal):\n    \"\"\"\n    :param: decimal - input decimal number\n    Return the decimal number in binary format\n    \"\"\"\n    binary = ''\n    while decimal > 0:\n        binary += str(decimal % 2)\n        decimal //= 2\n\n    return binary[::-1]\n\n\ndef test_function(test_case):\n    test_input, test_expected = test_case\n    test_actual = decimal_to_binary(test_input)\n    if test_actual == test_expected:\n        print(\"Pass\")\n    else:\n        print(\"Fail\")\n\n\ntest_function((1234, '10011010010'))\ntest_function((0, '0'))\ntest_function((1, '1'))\ntest_function((2, '10'))\ntest_function((3, '11'))\ntest_function((5, '101'))\ntest_function((10, '1010'))\ntest_function((15, '1111'))\ntest_function((23, '10111'))\ntest_function((32, '100000'))\ntest_function((30, '11110'))\ntest_function((255, '11111111'))\ntest_function((32767, '111111111111111'))\ntest_function((4294967295, '11111111111111111111111111111111'))\ntest_function((785, '10011101111'))\ntest_function((72, '10011000'))"
    },
    {
      "rank": 76,
      "score": 1.0,
      "candidate": "def decimal_to_binary(n):\n    if n == 0:\n        return 0\n    else:\n        return decimal_to_binary(n // 2) * 10 + n % 2\n\n\nif __name__ == \"__main__\":\n    print(decimal_to_binary(10))"
    },
    {
      "rank": 77,
      "score": 1.0,
      "candidate": "def decimal_to_binary(number: int) -> int:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(1)\n    \"\"\"\n    binary_num = 0\n    count = 0\n    while number > 0:\n        binary_num += (number % 2) * (10 ** count)\n        number //= 2\n        count += 1\n    return binary_num\n\n\nif __name__ == \"__main__\":\n    print(decimal_to_binary(20))"
    },
    {
      "rank": 78,
      "score": 1.0,
      "candidate": "def decimal_to_binary(n):\n    \"\"\"\n    Decimal to Binary.\n\n    >>> decimal_to_binary(23)\n    '10111'\n\n    >>> decimal_to_binary(25)\n    '11001'\n\n    >>> decimal_to_binary(26)\n    '11010'\n\n    >>> decimal_to_binary(27)\n    '11011'\n\n    >>> decimal_to_binary(28)\n    '11100'\n\n    >>> decimal_to_binary(30)\n    '11110'\n\n    >>> decimal_to_binary(31)\n    '11111'\n    \"\"\"\n    return format(n, \"b\")\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 79,
      "score": 1.0,
      "candidate": "def convert_to_binary(decimal_number: int) -> int:\n    \"\"\"\n    Time Complexity: O(log10(n))\n    Space Complexity: O(1)\n    \"\"\"\n    if decimal_number == 0:\n        return 0\n\n    binary_number = 0\n    i = 0\n\n    while decimal_number > 0:\n        decimal_number, remainder = divmod(decimal_number, 2)\n        binary_number += remainder * (10 ** i)\n        i += 1\n\n    return binary_number\n\n\nif __name__ == \"__main__\":\n    assert convert_to_binary(0) == 0\n    assert convert_to_binary(1) == 1\n    assert convert_to_binary(2) == 10\n    assert convert_to_binary(5) == 101\n    assert convert_to_binary(15) == 1111"
    },
    {
      "rank": 80,
      "score": 1.0,
      "candidate": "def decimal_to_binary(n: int) -> int:\n    \"\"\"\n    >>> decimal_to_binary(12)\n    '1100'\n    >>> decimal_to_binary(178)\n    '1011110'\n    >>> decimal_to_binary(1)\n    '1'\n    >>> decimal_to_binary(20)\n    '10100'\n    \"\"\"\n    if n == 0:\n        return 0\n    binary_num = \"\"\n    while n != 0:\n        binary_num += str(n % 2)\n        n //= 2\n    return binary_num[::-1]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 81,
      "score": 1.0,
      "candidate": "def decimal_to_binary(number):\n    if number == 0:\n        return '0'\n\n    binary = []\n    while number > 0:\n        binary.append(str(number % 2))\n        number = number // 2\n\n    return ''.join(reversed(binary))\n\n\nif __name__ == '__main__':\n    assert decimal_to_binary(0) == '0'\n    assert decimal_to_binary(1) == '1'\n    assert decimal_to_binary(5) == '101'\n    assert decimal_to_binary(10) == '1010'"
    },
    {
      "rank": 82,
      "score": 1.0,
      "candidate": "from functools import reduce\n\n\ndef decimal_to_binary(decimal_number):\n    \"\"\"Convert a decimal number to its binary equivalent.\n\n    Args:\n        decimal_number(int): decimal number to be converted.\n\n    Returns:\n        str: binary equivalent of the decimal number.\n\n    Raises:\n        ValueError: If decimal_number is not an integer\n    \"\"\"\n    if not isinstance(decimal_number, int):\n        raise ValueError(\"decimal_number must be an integer\")\n\n    binary = \"\"\n    while decimal_number > 0:\n        binary += str(decimal_number % 2)\n        decimal_number = decimal_number // 2\n\n    return reduce(lambda x, y: x + y, binary[::-1])\n\n\nif __name__ == \"__main__\":\n    assert decimal_to_binary(0) == \"0\", \"Should be 0\"\n    assert decimal_to_binary(1) == \"1\", \"Should be 1\"\n    assert decimal_to_binary(2) == \"10\", \"Should be 10\"\n    assert decimal_to_binary(3) == \"11\", \"Should be 11\"\n    assert decimal_to_binary(4) == \"100\", \"Should be 100\"\n    assert decimal_to_binary(5) == \"101\", \"Should be 101\"\n    assert decimal_to_binary(6) == \"110\", \"Should be 110\"\n    assert decimal_to_binary(7) == \"111\", \"Should be 111\"\n    assert decimal_to_binary(8) == \"1000\", \"Should be 1000\"\n    assert decimal_to_binary(9) == \"1001\", \"Should be 1001\"\n    assert decimal_to_binary(10) == \"1010\", \"Should be 1010\"\n    assert decimal_to_binary(11) == \"1011\", \"Should be 1011\"\n    assert decimal_to_binary(12) == \"110"
    },
    {
      "rank": 83,
      "score": 1.0,
      "candidate": "def decimal_to_binary(decimal: int) -> str:\n    \"\"\"Convert decimal to binary\n\n    Args:\n        decimal (int): decimal number\n\n    Examples:\n        >>> assert decimal_to_binary(0) == '0b0'\n        >>> assert decimal_to_binary(1) == '0b1'\n        >>> assert decimal_to_binary(2) == '0b10'\n        >>> assert decimal_to_binary(3) == '0b11'\n    \"\"\"\n    return f\"0b{bin(decimal)[2:]}\"\n\n\nif __name__ == \"__main__\":\n    print(decimal_to_binary(233))"
    },
    {
      "rank": 84,
      "score": 1.0,
      "candidate": "def decimal_to_binary(decimal_number):\n    \"\"\"Convert a decimal number to binary.\n\n    Args:\n        decimal_number (int): Decimal number to convert.\n\n    Returns:\n        str: Binary representation of decimal_number.\n\n    Examples:\n        >>> decimal_to_binary(10)\n        '1010'\n    \"\"\"\n    binary_number = \"\"\n    while decimal_number > 0:\n        binary_number += str(decimal_number % 2)\n        decimal_number = int(decimal_number / 2)\n    return binary_number[::-1]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 85,
      "score": 1.0,
      "candidate": "def decimal_to_binary(decimal_number):\n    \"\"\"\n    Return the binary representation of a decimal number.\n    \"\"\"\n    if decimal_number == 0:\n        return 0\n    else:\n        return (decimal_number % 2) + 10 * decimal_to_binary(decimal_number // 2)\n\ndef decimal_to_binary_2(decimal_number):\n    \"\"\"\n    Return the binary representation of a decimal number.\n    \"\"\"\n    if decimal_number == 0:\n        return 0\n    else:\n        return (decimal_number % 2) + 10 * decimal_to_binary(decimal_number // 2)\n\ndef decimal_to_binary_3(decimal_number):\n    \"\"\"\n    Return the binary representation of a decimal number.\n    \"\"\"\n    if decimal_number == 0:\n        return 0\n    else:\n        return (decimal_number % 2) + 10 * decimal_to_binary(decimal_number // 2)\n\ndef decimal_to_binary_4(decimal_number):\n    \"\"\"\n    Return the binary representation of a decimal number.\n    \"\"\"\n    if decimal_number == 0:\n        return 0\n    else:\n        return (decimal_number % 2) + 10 * decimal_to_binary(decimal_number // 2)\n\ndef decimal_to_binary_5(decimal_number):\n    \"\"\"\n    Return the binary representation of a decimal number.\n    \"\"\"\n    if decimal_number == 0:\n        return 0\n    else:\n        return (decimal_number % 2) + 10 * decimal_to_binary(decimal_number // 2)\n\ndef decimal_to_binary_6(decimal_number):\n    \"\"\"\n    Return the binary representation of a decimal number.\n    \"\"\"\n    if decimal_number == 0:\n        return 0\n    else:\n        return (decimal_number % 2) + 10 * decimal_to_binary(decimal_number // 2)\n\ndef decimal_to_binary_7(decimal_number):"
    },
    {
      "rank": 86,
      "score": 1.0,
      "candidate": "def decimal_to_binary(num: int) -> str:\n    \"\"\"\n    This function is used to convert the given decimal number to its binary equivalent.\n    >>> decimal_to_binary(25)\n    '11001'\n    >>> decimal_to_binary(39)\n    '100111'\n    >>> decimal_to_binary(10)\n    '1010'\n    >>> decimal_to_binary(15)\n    '1111'\n    \"\"\"\n    return bin(num)[2:]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 87,
      "score": 1.0,
      "candidate": "def decimal_to_binary(num: int) -> str:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(1)\n    \"\"\"\n    res: str = \"\"\n\n    while num > 0:\n        res += str(num % 2)\n        num //= 2\n\n    return res[::-1]\n\n\nif __name__ == \"__main__\":\n    print(decimal_to_binary(234))"
    },
    {
      "rank": 88,
      "score": 1.0,
      "candidate": "def decimal_to_binary(decimal_number):\n    \"\"\"\n    :param decimal_number: decimal number\n    :return: binary number\n    \"\"\"\n    if decimal_number == 0:\n        return 0\n\n    binary_number = []\n    while decimal_number != 0:\n        binary_number.append(decimal_number % 2)\n        decimal_number = decimal_number // 2\n\n    return int(''.join(map(str, binary_number[::-1])))\n\n\nif __name__ == '__main__':\n    assert decimal_to_binary(12) == 1100\n    assert decimal_to_binary(13) == 1101\n    assert decimal_to_binary(16) == 10000"
    },
    {
      "rank": 89,
      "score": 1.0,
      "candidate": "def decimal_to_binary(num):\n    return bin(num).replace(\"0b\", \"\")\n\n\nif __name__ == \"__main__\":\n    assert decimal_to_binary(23) == \"10111\""
    },
    {
      "rank": 90,
      "score": 1.0,
      "candidate": "def decimal_to_binary(decimal_number: int) -> int:\n    \"\"\"\n    :param decimal_number: int\n    :return: int\n    >>> decimal_to_binary(25)\n    '11001'\n    >>> decimal_to_binary(3)\n    '11'\n    >>> decimal_to_binary(15)\n    '1111'\n    >>> decimal_to_binary(0)\n    '0'\n    >>> decimal_to_binary(27)\n    '10111'\n    >>> decimal_to_binary(32)\n    '100000'\n    >>> decimal_to_binary(21)\n    '10101'\n    >>> decimal_to_binary(1)\n    '1'\n    >>> decimal_to_binary(-1)\n    Traceback (most recent call last):\n        ...\n    ValueError: Input number must be greater than or equal to zero\n    \"\"\"\n    if decimal_number < 0:\n        raise ValueError(\"Input number must be greater than or equal to zero\")\n    binary_number = \"\"\n    while decimal_number > 0:\n        binary_number = str(decimal_number % 2) + binary_number\n        decimal_number //= 2\n    return binary_number\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 91,
      "score": 1.0,
      "candidate": "def decimal_to_binary(num):\n    \"\"\"\n    :param: num - input decimal number\n    Return: binary string\n    \"\"\"\n    if num == 0:\n        return \"0\"\n\n    binary = []\n    while num > 0:\n        binary.append(str(num % 2))\n        num = num // 2\n    return \"\".join(reversed(binary))\n\n\ndef test_function(test_case):\n    test_input, test_expected = test_case\n    test_actual = decimal_to_binary(test_input)\n    if test_actual == test_expected:\n        print(\"Pass\")\n    else:\n        print(\"Fail\")\n\n\ntest_function((1, \"1\"))\ntest_function((2, \"10\"))\ntest_function((3, \"11\"))\ntest_function((4, \"100\"))\ntest_function((5, \"101\"))\ntest_function((6, \"110\"))\ntest_function((7, \"111\"))\ntest_function((8, \"1000\"))\ntest_function((9, \"1001\"))\ntest_function((10, \"1010\"))\ntest_function((15, \"1111\"))\ntest_function((23, \"10111\"))\ntest_function((26, \"11010\"))\ntest_function((32, \"100000\"))\ntest_function((67, \"1010011\"))\ntest_function((89, \"1011101\"))\ntest_function((97, \"1100011\"))\ntest_function((1024, \"1000000000000\"))\ntest_function((3735928559, \"10011111111110011111111100000001\"))\ntest_function((4294967295, \"111111111111111111111111"
    },
    {
      "rank": 92,
      "score": 1.0,
      "candidate": "def decimal_to_binary(decimal: int) -> str:\n    \"\"\"Convert decimal number to binary.\n\n    Args:\n        decimal (int): Decimal number.\n\n    Examples:\n        >>> assert decimal_to_binary(2) == '10'\n    \"\"\"\n    if decimal == 0:\n        return '0'\n\n    binary: str = ''\n    while decimal != 0:\n        binary = str(decimal % 2) + binary\n        decimal //= 2\n    return binary\n\n\nif __name__ == '__main__':\n    print(decimal_to_binary(15))"
    },
    {
      "rank": 93,
      "score": 1.0,
      "candidate": "def decimal_to_binary(decimal_number: int) -> str:\n    \"\"\"Convert decimal number to its binary equivalent.\n\n    Args:\n        decimal_number (int): decimal number to convert to binary\n\n    Returns:\n        str: binary equivalent\n    \"\"\"\n    binary_number = \"\"\n    while decimal_number > 0:\n        binary_number += str(decimal_number % 2)\n        decimal_number //= 2\n\n    return binary_number[::-1]\n\n\nif __name__ == \"__main__\":\n    print(decimal_to_binary(15))\n    print(decimal_to_binary(123))"
    },
    {
      "rank": 94,
      "score": 1.0,
      "candidate": "def decimal_to_binary(decimal):\n    \"\"\"\n    :param decimal: int - decimal number\n    :return: str - binary representation of decimal\n    \"\"\"\n    if decimal == 0:\n        return '0b0'\n    binary = ''\n    while decimal != 0:\n        binary = str(decimal % 2) + binary\n        decimal = decimal // 2\n    return '0b' + binary\n\n\ndef test_function(test_case):\n    test_input, test_expected = test_case\n    test_actual = decimal_to_binary(test_input)\n    if test_actual == test_expected:\n        print(\"Pass\")\n    else:\n        print(\"Fail\")\n\n\ntest_function((10, '0b1010'))\ntest_function((50, '0b110010'))\ntest_function((1234, '0b10011010010'))\ntest_function((0, '0b0'))\ntest_function((561, '0b100110011001'))\ntest_function((9, '0b1001'))\ntest_function((7, '0b111'))\ntest_function((15, '0b1111'))\ntest_function((1, '0b1'))\ntest_function((2, '0b10'))"
    },
    {
      "rank": 95,
      "score": 1.0,
      "candidate": "\"\"\"Question 17\nLevel 2\nQuestion:\nWrite a function to convert the given decimal number to its binary equivalent.\nThe function takes in an integer, and returns a string.\nExamples:\ndec_to_bin(0) # returns \"0\"\ndec_to_bin(1) # returns \"1\"\ndec_to_bin(2) # returns \"10\"\ndec_to_bin(5) # returns \"101\"\ndec_to_bin(15) # returns \"1111\"\n\"\"\"\n\ndef dec_to_bin(dec):\n    # your code here\n    # return bin(dec)\n    # return bin(dec)[2:]\n    return format(dec, \"b\")\n\nprint dec_to_bin(15)"
    },
    {
      "rank": 96,
      "score": 1.0,
      "candidate": "def decimal_to_binary(decimal: int) -> int:\n    \"\"\"\n    >>> decimal_to_binary(0)\n    0\n    >>> decimal_to_binary(1)\n    1\n    >>> decimal_to_binary(2)\n    10\n    >>> decimal_to_binary(3)\n    11\n    >>> decimal_to_binary(4)\n    100\n    >>> decimal_to_binary(5)\n    101\n    >>> decimal_to_binary(6)\n    110\n    >>> decimal_to_binary(7)\n    111\n    >>> decimal_to_binary(8)\n    1000\n    >>> decimal_to_binary(9)\n    1001\n    >>> decimal_to_binary(10)\n    1010\n    >>> decimal_to_binary(15)\n    1111\n    >>> decimal_to_binary(20)\n    10100\n    >>> decimal_to_binary(21)\n    10101\n    >>> decimal_to_binary(22)\n    10110\n    >>> decimal_to_binary(23)\n    10111\n    >>> decimal_to_binary(24)\n    11000\n    >>> decimal_to_binary(25)\n    11001\n    >>> decimal_to_binary(26)\n    11010\n    >>> decimal_to_binary(27)\n    11011\n    >>> decimal_to_binary(28)\n    11100\n    >>> decimal_to_binary(29)\n    11101\n    >>> decimal_to_binary(30)\n    11110\n    >>> decimal_to_binary(31)\n    11111\n    >>> decimal_to_binary(32)\n    100000\n    \"\"\"\n    if decimal == 0:\n        return 0\n    binary = 0\n    while decimal > 0:\n        binary = decimal % 2 + 10 * binary\n        decimal = decimal // 2"
    },
    {
      "rank": 97,
      "score": 1.0,
      "candidate": "from functools import lru_cache\n\n\n@lru_cache\ndef convert_to_binary(decimal: int) -> str:\n    \"\"\"\n    Time Complexity: O(log(n))\n    Space Complexity: O(log(n))\n    \"\"\"\n    if decimal == 0:\n        return \"0\"\n\n    return convert_to_binary(decimal // 2) + str(decimal % 2)\n\n\nif __name__ == \"__main__\":\n    assert convert_to_binary(1234) == \"10011010010\""
    },
    {
      "rank": 98,
      "score": 1.0,
      "candidate": "def decimal_to_binary(decimal_number):\n    if decimal_number == 0:\n        return 0\n\n    binary_number = []\n    while decimal_number > 0:\n        binary_number.insert(0, decimal_number % 2)\n        decimal_number //= 2\n\n    return int(''.join(str(i) for i in binary_number))\n\n\nprint(decimal_to_binary(123))\nprint(decimal_to_binary(1))\nprint(decimal_to_binary(2))\nprint(decimal_to_binary(5))\nprint(decimal_to_binary(10))\nprint(decimal_to_binary(11))\nprint(decimal_to_binary(12))\nprint(decimal_to_binary(13))\nprint(decimal_to_binary(14))\nprint(decimal_to_binary(15))\nprint(decimal_to_binary(16))\nprint(decimal_to_binary(17))\nprint(decimal_to_binary(18))\nprint(decimal_to_binary(19))\nprint(decimal_to_binary(20))\nprint(decimal_to_binary(21))\nprint(decimal_to_binary(22))\nprint(decimal_to_binary(23))\nprint(decimal_to_binary(24))\nprint(decimal_to_binary(25))\nprint(decimal_to_binary(26))\nprint(decimal_to_binary(27))\nprint(decimal_to_binary(28))\nprint(decimal_to_binary(29))\nprint(decimal_to_binary(30))\nprint(decimal_to_binary(31))\nprint(decimal_to_binary(32))\nprint(decimal_to_binary(33))\nprint(decimal_to_binary(34))\nprint(decimal_to_binary(35))\nprint(decimal_to_binary(36))\nprint(decimal_to_binary(37))\nprint(dec"
    },
    {
      "rank": 99,
      "score": 1.0,
      "candidate": "# O(n) time | O(n) space - where n is the number of bits in the binary representation\ndef decimalToBinary(number):\n    return int_to_binary(number)\n\n\ndef int_to_binary(number):\n    if number == 0:\n        return \"0\"\n    binary_num = \"\"\n    while number > 0:\n        binary_num = str(number % 2) + binary_num\n        number = number // 2\n    return binary_num"
    },
    {
      "rank": 100,
      "score": 1.0,
      "candidate": "# This is the Binary class. Do not edit it.\nclass Binary:\n    def __init__(self, value):\n        self.value = value\n\n    def __str__(self):\n        return str(self.value)\n\n\ndef decimal_to_binary(decimal):\n    if decimal == 0:\n        return Binary(0)\n\n    result = []\n\n    while decimal > 0:\n        result.append(decimal % 2)\n        decimal = int(decimal / 2)\n\n    return Binary(int(\"\".join([str(x) for x in result[::-1]])))"
    }
  ]
}