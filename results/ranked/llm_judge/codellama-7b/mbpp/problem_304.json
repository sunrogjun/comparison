{
  "timestamp": "2025-09-15T00:35:59.226792",
  "method": "improved_llm_judge",
  "judge_model": "codellama/CodeLlama-7b-Python-hf",
  "target_model": "codellama-7b",
  "dataset": "mbpp",
  "problem_number": 304,
  "total_candidates": 100,
  "results": [
    {
      "rank": 1,
      "score": 10.0,
      "candidate": "def first_max_even_word(sentence: str) -> str:\n    \"\"\"\n    >>> first_max_even_word(\"The quick brown fox jumps over the lazy dog\")\n    'brown'\n    >>> first_max_even_word(\"Python Exercises\")\n    ''\n    \"\"\"\n    words = sentence.split()\n    max_length = 0\n    first_max_word = \"\"\n    for word in words:\n        if len(word) % 2 == 0:\n            if len(word) > max_length:\n                max_length = len(word)\n                first_max_word = word\n    return first_max_word\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 2,
      "score": 10.0,
      "candidate": "def max_even_word(words):\n    max_length = 0\n    for word in words:\n        if len(word) % 2 == 0:\n            if len(word) > max_length:\n                max_length = len(word)\n    return max_length\n\n\nprint(max_even_word([\"123\", \"abc\", \"123456\"]))"
    },
    {
      "rank": 3,
      "score": 10.0,
      "candidate": "def first_max_length(words):\n    max_length = 0\n    for word in words:\n        if len(word) % 2 == 0 and len(word) > max_length:\n            max_length = len(word)\n            print(max_length)\n    return max_length\n\nwords = ['apple', 'hippo', 'accommodate', 'pyramid', 'pyramidiscus']\nprint(first_max_length(words))"
    },
    {
      "rank": 4,
      "score": 10.0,
      "candidate": "def first_max_length_even(str):\n    # code here\n    str = str.split()\n    for i in str:\n        if len(i) % 2 == 0:\n            return i\n    return -1\n\n\nprint(first_max_length_even(\"The quick brown fox jumps over the lazy dog\"))"
    },
    {
      "rank": 5,
      "score": 10.0,
      "candidate": "def max_length(arr):\n    return max([len(i) for i in arr if len(i) % 2 == 0])\n\n\nprint(max_length([\"Python\", \"PHP\", \"Java\", \"C#\", \"C++\"]))"
    },
    {
      "rank": 6,
      "score": 10.0,
      "candidate": "def first_max_length(str1):\n    str_list = str1.split()\n    max_len = 0\n    for i in str_list:\n        if len(i) % 2 == 0 and len(i) > max_len:\n            max_len = len(i)\n    return max_len\n\n\nprint(first_max_length(\"The quick brown fox jumped over the lazy dog\"))\nprint(first_max_length(\"Python Exercises\"))"
    },
    {
      "rank": 7,
      "score": 10.0,
      "candidate": "def even_word_length(words):\n    for word in words:\n        if len(word) % 2 == 0:\n            return word\n    return None\n\nprint(even_word_length([\"Hello\", \"How\", \"are\", \"you\"]))\nprint(even_word_length([\"Hello\", \"How\", \"are\", \"you\", \"Good\"]))\nprint(even_word_length([\"Hello\", \"How\", \"are\", \"you\", \"Good\", \"Bye\"]))"
    },
    {
      "rank": 8,
      "score": 10.0,
      "candidate": "def first_max_word(words):\n    \"\"\"\n    This function takes a list of words as an argument and returns the first maximum length of even word.\n    >>> first_max_word(['python', 'java', 'kotlin', 'javascript', 'ruby', 'c', 'c++'])\n    'kotlin'\n    >>> first_max_word(['python', 'java', 'kotlin', 'javascript', 'ruby', 'c', 'c++', 'ruby', 'python'])\n    'ruby'\n    >>> first_max_word(['python', 'java', 'kotlin', 'javascript', 'ruby', 'c', 'c++', 'ruby', 'python', 'java'])\n    'java'\n    >>> first_max_word(['python', 'java', 'kotlin', 'javascript', 'ruby', 'c', 'c++', 'ruby', 'python', 'java', 'python'])\n    'python'\n    \"\"\"\n    return min(\n        [word for word in words if len(word) % 2 == 0],\n        key=lambda word: len(word),\n    )\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 9,
      "score": 10.0,
      "candidate": "def first_max_length_even(word_list):\n    even_words = []\n    for word in word_list:\n        if len(word) % 2 == 0:\n            even_words.append(word)\n    return sorted(even_words, key=len, reverse=True)[0]\n\n\nprint(first_max_length_even([\"Python\", \"Programming\", \"Exercise\", \"Solution\", \"Algorithms\", \"Work\", \"Hacker\", \"Rank\"]))"
    },
    {
      "rank": 10,
      "score": 10.0,
      "candidate": "def find_max_length_even_word(input_str):\n    input_str = input_str.split()\n    max_length = 0\n    for word in input_str:\n        if len(word) % 2 == 0:\n            if len(word) > max_length:\n                max_length = len(word)\n    return max_length\n\n\nprint(find_max_length_even_word(\"The quick brown fox jumped over the lazy dog\"))\nprint(find_max_length_even_word(\"Python Exercises\"))"
    },
    {
      "rank": 11,
      "score": 10.0,
      "candidate": "def first_max_length(str1):\n    str1 = str1.split()\n    even_words = []\n    for word in str1:\n        if len(word) % 2 == 0:\n            even_words.append(word)\n    return even_words[0] if len(even_words) > 0 else \"No even word found\"\n\n\nprint(first_max_length(\"The quick brown fox jumped over the lazy dog\"))\nprint(first_max_length(\"Python Exercises\"))"
    },
    {
      "rank": 12,
      "score": 10.0,
      "candidate": "def max_length(s):\n    s = s.split()\n    for i in s:\n        if len(i) % 2 == 0:\n            return len(i)\n\n\nprint(max_length(\"I am a boy\"))"
    },
    {
      "rank": 13,
      "score": 10.0,
      "candidate": "def find_max_len_even_word(words):\n    return max(len(word) for word in words if len(word) % 2 == 0)\n\n\ndef main():\n    print(find_max_len_even_word(words=[\"apple\", \"orange\", \"cat\", \"dog\", \"elephant\"]))\n    print(find_max_len_even_word(words=[\"apple\", \"cat\", \"dog\", \"elephant\"]))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 14,
      "score": 10.0,
      "candidate": "def find_first_max_length_of_even_word(words):\n    \"\"\"\n    >>> find_first_max_length_of_even_word([\"hello\", \"world\", \"hi\", \"world\"])\n    'hello'\n    \"\"\"\n    words_with_even_length = [word for word in words if len(word) % 2 == 0]\n    return sorted(words_with_even_length, key=lambda x: len(x), reverse=True)[0]\n\n\ndef find_first_max_length_of_even_word_with_comprehension(words):\n    \"\"\"\n    >>> find_first_max_length_of_even_word_with_comprehension([\"hello\", \"world\", \"hi\", \"world\"])\n    'hello'\n    \"\"\"\n    return sorted([word for word in words if len(word) % 2 == 0], key=lambda x: len(x), reverse=True)[0]\n\n\ndef find_first_max_length_of_even_word_with_list_comp(words):\n    \"\"\"\n    >>> find_first_max_length_of_even_word_with_list_comp([\"hello\", \"world\", \"hi\", \"world\"])\n    'hello'\n    \"\"\"\n    return sorted([word for word in words if len(word) % 2 == 0], key=lambda x: len(x), reverse=True)[0]\n\n\nif __name__ == \"__main__\":\n    from doctest import testmod\n\n    testmod()"
    },
    {
      "rank": 15,
      "score": 9.370583536698913,
      "candidate": "def first_max_word(sentence):\n    # Write your code here.\n    words = sentence.split()\n    words.sort(key=lambda x: len(x))\n    for word in words:\n        if len(word) % 2 == 0:\n            return word\n    return None"
    },
    {
      "rank": 16,
      "score": 9.234050852198141,
      "candidate": "def max_len_even_word(sentence):\n    words = sentence.split()\n    max_len = 0\n    for word in words:\n        if len(word) % 2 == 0:\n            if len(word) > max_len:\n                max_len = len(word)\n    return max_len\n\n\nif __name__ == \"__main__\":\n    sentence = input(\"Enter a sentence: \")\n    print(\"The maximum length of even word is:\", max_len_even_word(sentence))"
    },
    {
      "rank": 17,
      "score": 9.205959372648458,
      "candidate": "from collections import Counter\n\n\ndef first_max_length_even_word(sentence):\n    word_list = sentence.split()\n    word_list = [word for word in word_list if len(word) % 2 == 0]\n\n    if len(word_list) == 0:\n        return -1\n\n    return max(word_list, key=lambda x: len(x))\n\n\ndef first_max_length_even_word_counter(sentence):\n    word_list = sentence.split()\n    word_list = [word for word in word_list if len(word) % 2 == 0]\n\n    if len(word_list) == 0:\n        return -1\n\n    word_list_count = Counter(word_list)\n    return max(word_list_count.values())\n\n\nif __name__ == \"__main__\":\n    print(first_max_length_even_word(\"The quick brown fox jumped over the lazy dog\"))\n    print(first_max_length_even_word(\"The quick brown fox jumped over the lazy dog\"))"
    },
    {
      "rank": 18,
      "score": 9.177268828905222,
      "candidate": "def first_max_length(words):\n    max_len = 0\n    for word in words:\n        if len(word) % 2 == 0:\n            if len(word) > max_len:\n                max_len = len(word)\n                break\n    return max_len\n\n\ndef main():\n    words = [\"ab\", \"abc\", \"abcd\", \"abcde\", \"abcdef\"]\n    print(first_max_length(words))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 19,
      "score": 9.122564458729856,
      "candidate": "def first_max_len(str_list):\n    res = []\n    for word in str_list:\n        if len(word) % 2 == 0:\n            res.append(word)\n    res.sort(key=lambda x: len(x), reverse=True)\n    return res[0]\n\n\ndef main():\n    print(first_max_len([\"abc\", \"ab\", \"c\", \"def\"]))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 20,
      "score": 8.973005557553902,
      "candidate": "def even_word(words):\n    if not words:\n        return None\n    words = words.split()\n    max_length = 0\n    for word in words:\n        if len(word) % 2 == 0:\n            if len(word) > max_length:\n                max_length = len(word)\n    if max_length == 0:\n        return None\n    return max_length\n\n\nprint(even_word(\"The quick brown fox jumped over the lazy dog\"))\nprint(even_word(\"Python Exercises\"))"
    },
    {
      "rank": 21,
      "score": 8.95994420569242,
      "candidate": "def first_max_length_of_even_word(words):\n    words = sorted(words, key=len)\n    for word in words:\n        if len(word) % 2 == 0:\n            return word\n\n\nprint(first_max_length_of_even_word([\"hello\", \"world\", \"hi\", \"world\"]))\nprint(first_max_length_of_even_word([\"hello\", \"world\", \"hi\", \"world\", \"hello\"]))"
    },
    {
      "rank": 22,
      "score": 8.946210893390457,
      "candidate": "def find_max_length_of_even_word(str):\n    max_len = 0\n    even_word = \"\"\n    for word in str.split():\n        if len(word) % 2 == 0:\n            if len(word) > max_len:\n                max_len = len(word)\n                even_word = word\n    return even_word\n\n\nprint(find_max_length_of_even_word(\"The quick brown fox jumped over the lazy dog\"))"
    },
    {
      "rank": 23,
      "score": 8.932217008005624,
      "candidate": "def first_max_even_word(words):\n    words_list = words.split()\n    even_words = [word for word in words_list if len(word) % 2 == 0]\n    return max(even_words, key=len)\n\n\nprint(first_max_even_word(\"I am the greatest\"))"
    },
    {
      "rank": 24,
      "score": 8.910084504002544,
      "candidate": "def find_first_max_length_of_even_word(words):\n    \"\"\"\n    Finds the first maximum length of even words in a list of words.\n\n    Args:\n       words(list): list of words to find the maximum length of even words.\n    Returns:\n       (int): maximum length of even words\n    \"\"\"\n    if len(words) == 0:\n        return 0\n    return len(max([w for w in words if len(w) % 2 == 0], key=len))\n\n\nprint(find_first_max_length_of_even_word([\"one\", \"two\", \"three\", \"four\", \"five\"]))\nprint(find_first_max_length_of_even_word([\"one\", \"two\", \"three\", \"four\", \"five\", \"six\"]))\nprint(find_first_max_length_of_even_word([\"one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\"]))\nprint(find_first_max_length_of_even_word([\"one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\", \"eight\"]))"
    },
    {
      "rank": 25,
      "score": 8.85571690049604,
      "candidate": "def find_max_word(words):\n    max_word = \"\"\n    for word in words:\n        if len(word) % 2 == 0:\n            if len(word) > len(max_word):\n                max_word = word\n    return max_word\n\n\nprint(find_max_word([\"hello\", \"world\", \"by\", \"the\", \"way\", \"hello\"]))"
    },
    {
      "rank": 26,
      "score": 8.850707355641543,
      "candidate": "def even_word(words):\n    for word in words:\n        if len(word) % 2 == 0:\n            return word\n    return None\n\n\ndef main():\n    words = [\"hi\", \"how\", \"are\", \"you\", \"doing\"]\n    print(even_word(words))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 27,
      "score": 8.8281618090209,
      "candidate": "def find_max_word(words):\n    return max(words, key=lambda x: len(x) if len(x) % 2 == 0 else -1)\n\n\ndef main():\n    words = [\n        \"dog\",\n        \"book\",\n        \"even\",\n        \"tree\",\n        \"boat\",\n        \"bottle\",\n        \"apple\",\n        \"cat\",\n        \"happy\",\n        \"fun\",\n        \"longest\",\n    ]\n    print(\"Word with max even length: \" + find_max_word(words))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 28,
      "score": 8.81367773444215,
      "candidate": "def first_max_length(str):\n    \"\"\"Returns the first maximum length of even word.\"\"\"\n    str = str.split()\n    result = 0\n    for i in range(len(str)):\n        if len(str[i]) % 2 == 0:\n            if len(str[i]) > result:\n                result = len(str[i])\n    return result\n\nprint(first_max_length(\"This is a test sentence.\"))"
    },
    {
      "rank": 29,
      "score": 8.76828871349479,
      "candidate": "def find_max_length_even_word(words):\n    \"\"\"\n    :param words: list of words\n    :return: first maximum length of even word\n    \"\"\"\n    max_length = 0\n    for word in words:\n        if len(word) % 2 == 0 and len(word) > max_length:\n            max_length = len(word)\n    return max_length\n\n\ndef main():\n    words = ['apple', 'orange', 'cat', 'dog', 'house']\n    print(\"First maximum length of even word: \" + str(find_max_length_even_word(words)))\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 30,
      "score": 8.750282588864879,
      "candidate": "def first_max_length_of_even_word(words):\n    \"\"\"\n    First Maximum Length of Even Word\n    >>> first_max_length_of_even_word([\"Word\", \"Maximum\", \"Even\", \"Length\"])\n    6\n    \"\"\"\n    res = 0\n    for word in words:\n        if len(word) % 2 == 0 and res < len(word):\n            res = len(word)\n    return res\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 31,
      "score": 8.715724466237427,
      "candidate": "def first_max_length(lst):\n    max_length = 0\n    for word in lst:\n        if len(word) % 2 == 0 and len(word) > max_length:\n            max_length = len(word)\n            first_max = word\n    return first_max\nprint(first_max_length(['abc', 'def', 'ghijkl', 'mn', 'opq', 'rstuv']))"
    },
    {
      "rank": 32,
      "score": 8.692801520950061,
      "candidate": "def first_max_length_even_word(str):\n    length = 0\n    for word in str.split():\n        if len(word) % 2 == 0:\n            if len(word) > length:\n                length = len(word)\n                result = word\n    return result\n\n\nprint(first_max_length_even_word(\"The quick brown fox jumped over the lazy dog\"))\nprint(first_max_length_even_word(\"Python Exercises\"))\nprint(first_max_length_even_word(\"Python\"))"
    },
    {
      "rank": 33,
      "score": 8.632293453617281,
      "candidate": "def first_max_length_even_word(string):\n    \"\"\"\n    First max length of even word\n    :param string:\n    :return:\n    \"\"\"\n    return sorted(string.split(), key=lambda word: len(word), reverse=True)[0]"
    },
    {
      "rank": 34,
      "score": 8.616253589228675,
      "candidate": "def find_max_length(word_list):\n    max_length = 0\n    for word in word_list:\n        if len(word) % 2 == 0:\n            if max_length < len(word):\n                max_length = len(word)\n    return max_length\n\n\nword_list = ['python', 'java', 'c', 'c++', 'c#', 'javascript']\nprint(find_max_length(word_list))"
    },
    {
      "rank": 35,
      "score": 8.610076160146226,
      "candidate": "def find_max_length(string):\n    \"\"\"\n    Find the maximum length of even word in a string.\n    :param string: string to find maximum length of even word\n    :return: maximum length of even word\n    \"\"\"\n    return max([len(word) for word in string.split() if len(word) % 2 == 0])"
    },
    {
      "rank": 36,
      "score": 8.606486429141842,
      "candidate": "from problem_1 import get_words\n\n\ndef first_max_even_word(words):\n    \"\"\"\n    Return the first maximum length of even word.\n    \"\"\"\n    if not words:\n        return None\n\n    max_word = ''\n    max_length = 0\n    for word in words:\n        if len(word) % 2 == 0:\n            if len(word) > max_length:\n                max_word = word\n                max_length = len(word)\n    return max_word\n\n\nif __name__ == '__main__':\n    print(first_max_even_word(get_words('data1.txt')))\n    print(first_max_even_word(get_words('data2.txt')))\n    print(first_max_even_word(get_words('data3.txt')))"
    },
    {
      "rank": 37,
      "score": 8.60156811074208,
      "candidate": "def first_max_length(words):\n    \"\"\"\n    Returns the first maximum length of even word\n    :param words: list of words\n    :return: first maximum length of even word\n    \"\"\"\n    even_words = []\n    for word in words:\n        if len(word) % 2 == 0:\n            even_words.append(word)\n    return max(even_words, key=len)\n\n\ndef first_max_length_list(words):\n    \"\"\"\n    Returns the first maximum length of even word\n    :param words: list of words\n    :return: first maximum length of even word\n    \"\"\"\n    even_words = []\n    for word in words:\n        if len(word) % 2 == 0:\n            even_words.append(word)\n    return even_words\n\n\nif __name__ == \"__main__\":\n    print(first_max_length(['apple', 'banana', 'cat', 'dog', 'elephant']))\n    print(first_max_length_list(['apple', 'banana', 'cat', 'dog', 'elephant']))"
    },
    {
      "rank": 38,
      "score": 8.565425580227462,
      "candidate": "def first_max_length(sentence):\n    words = sentence.split(\" \")\n    max_length = 0\n    for word in words:\n        if not word.isdigit() and len(word) % 2 == 0:\n            if len(word) > max_length:\n                max_length = len(word)\n    return max_length\n\n\nprint(first_max_length(\"The quick brown fox jumped over the lazy dog\"))\nprint(first_max_length(\"The quick brown fox jumped over the lazy dog\"))"
    },
    {
      "rank": 39,
      "score": 8.548876241946822,
      "candidate": "def first_max_length(sentence):\n    words = sentence.split()\n    even_words = []\n    for word in words:\n        if len(word) % 2 == 0:\n            even_words.append(word)\n\n    if len(even_words) == 0:\n        return \"There is no even word.\"\n    else:\n        even_words.sort(key=lambda x: len(x))\n        return even_words[0]\n\n\nif __name__ == '__main__':\n    print(first_max_length(\"I love python\"))\n    print(first_max_length(\"python is a language\"))\n    print(first_max_length(\"python is a language and java is a language\"))"
    },
    {
      "rank": 40,
      "score": 8.542875062379007,
      "candidate": "def find_max_len(sentence):\n    words = sentence.split()\n    max_len = 0\n    for word in words:\n        if len(word) % 2 == 0:\n            if max_len < len(word):\n                max_len = len(word)\n    return max_len\n\n\nif __name__ == \"__main__\":\n    print(find_max_len(\"The quick brown fox jumped over the lazy dog\"))"
    },
    {
      "rank": 41,
      "score": 8.53012858503943,
      "candidate": "from collections import defaultdict\n\n\ndef first_max_length(words):\n    result = defaultdict(int)\n    for word in words:\n        if len(word) % 2 == 0:\n            result[word] = len(word)\n    if result:\n        return sorted(result.items(), key=lambda x: x[1], reverse=True)[0][0]\n    return None\n\n\nassert first_max_length([\"Hello\", \"World\", \"Hey\", \"Hahahah\", \"Hehehehehe\", \"Hahaha\"]) == \"Hey\"\nassert first_max_length([\"Hello\", \"World\", \"Hey\", \"Hahahah\", \"Hehehehehe\", \"Hahaha\", \"Haha\"]) is None\nassert first_max_length([\"Hey\", \"Hey\"]) == \"Hey\"\nassert first_max_length([\"Hey\"]) == \"Hey\""
    },
    {
      "rank": 42,
      "score": 8.499905739299377,
      "candidate": "def first_max_length(words):\n    result = []\n    for word in words:\n        if len(word) % 2 == 0:\n            result.append(word)\n    result.sort(key=len)\n    return result[0]\n\n\nwords = [\"abc\", \"bcd\", \"c\", \"ab\", \"abcd\"]\nprint(first_max_length(words))"
    },
    {
      "rank": 43,
      "score": 8.478208546788407,
      "candidate": "def longest_even_word(words):\n    \"\"\"\n    >>> longest_even_word([\"hello\", \"world\", \"goodbye\", \"world\"])\n    'world'\n    >>> longest_even_word([\"goodbye\", \"goodbye\", \"goodbye\"])\n    'goodbye'\n    >>> longest_even_word([\"hello\", \"goodbye\", \"hello\"])\n    'hello'\n    >>> longest_even_word([\"world\", \"hello\", \"goodbye\", \"world\"])\n    'world'\n    \"\"\"\n    # Your code here\n    word_length = []\n    even_words = []\n    for word in words:\n        word_length.append(len(word))\n    for word in words:\n        if len(word) % 2 == 0:\n            even_words.append(word)\n    longest_even = max(word_length)\n    return even_words[word_length.index(longest_even)]\n\nprint(longest_even_word([\"hello\", \"world\", \"goodbye\", \"world\"]))\nprint(longest_even_word([\"goodbye\", \"goodbye\", \"goodbye\"]))\nprint(longest_even_word([\"hello\", \"goodbye\", \"hello\"]))\nprint(longest_even_word([\"world\", \"hello\", \"goodbye\", \"world\"]))"
    },
    {
      "rank": 44,
      "score": 8.437695832075478,
      "candidate": "def find_max_len(sentence):\n    words = sentence.split()\n    max_len = 0\n    for word in words:\n        if len(word) % 2 == 0:\n            if max_len < len(word):\n                max_len = len(word)\n    return max_len\n\n\n# print(find_max_len(\"The big cat sat on the big mat\"))\n# print(find_max_len(\"The big cat sat on the big mat\"))"
    },
    {
      "rank": 45,
      "score": 8.408439383654278,
      "candidate": "def find_first_max_length_even(sentence):\n    words = sentence.split()\n    for word in words:\n        if len(word) % 2 == 0:\n            return word\n    return None\n\n\ndef find_first_max_length_even_optimized(sentence):\n    words = sentence.split()\n    return next((word for word in words if len(word) % 2 == 0), None)\n\n\nif __name__ == \"__main__\":\n    print(find_first_max_length_even(\"The quick brown fox jumped over the lazy dog\"))\n    print(find_first_max_length_even_optimized(\"The quick brown fox jumped over the lazy dog\"))"
    },
    {
      "rank": 46,
      "score": 8.386620303250325,
      "candidate": "def even_word(words):\n    \"\"\"\n    >>> even_word(['python', 'is', 'awesome', 'python'])\n    python\n    \"\"\"\n    max_length = 0\n    word = \"\"\n    for item in words:\n        if item.isalpha():\n            if len(item) % 2 == 0:\n                if len(item) > max_length:\n                    max_length = len(item)\n                    word = item\n    return word\n\n\ndef even_word_using_max(words):\n    \"\"\"\n    >>> even_word_using_max(['python', 'is', 'awesome', 'python'])\n    python\n    \"\"\"\n    max_length = max([len(item) for item in words if item.isalpha()])\n    word = [item for item in words if len(item) == max_length and item.isalpha()][0]\n    return word\n\n\ndef even_word_using_sorted(words):\n    \"\"\"\n    >>> even_word_using_sorted(['python', 'is', 'awesome', 'python'])\n    python\n    \"\"\"\n    sorted_words = sorted(words, key=lambda x: len(x))\n    return sorted_words[-1]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 47,
      "score": 8.375312293858853,
      "candidate": "def even_word_finder(sentence):\n    sentence = sentence.split(\" \")\n    for word in sentence:\n        if len(word) % 2 == 0:\n            print(word)\n\n\neven_word_finder(\"This is a good day\")"
    },
    {
      "rank": 48,
      "score": 8.351614956112536,
      "candidate": "def first_max_length(lst):\n    lst = [i for i in lst if len(i)%2 == 0]\n    return max(lst, key=len)\n\ndef test_first_max_length():\n    \"\"\"\n    >>> test_first_max_length()\n    True\n    \"\"\"\n    lst = ['abc', 'b', 'a', 'cde', 'fgh', 'g', 'ab', 'cde', 'fgh', 'g', 'ab', 'cde', 'fgh', 'g', 'abc', 'b', 'a', 'cde', 'fgh', 'g', 'ab', 'cde', 'fgh', 'g', 'ab', 'cde', 'fgh', 'g', 'abc', 'b', 'a', 'cde', 'fgh', 'g', 'ab', 'cde', 'fgh', 'g', 'ab', 'cde', 'fgh', 'g', 'abc', 'b', 'a', 'cde', 'fgh', 'g', 'ab', 'cde', 'fgh', 'g', 'ab', 'cde', 'fgh', 'g', 'abc', 'b', 'a', 'cde', 'fgh', 'g', 'ab', 'cde', 'fgh', 'g', 'ab', 'cde', 'fgh', 'g', 'abc', 'b', 'a', 'cde', 'fgh', 'g', 'ab', 'cde', 'fgh', 'g', 'ab', 'cde', 'fgh', 'g', 'abc', 'b', 'a', 'cde', 'fgh', 'g', 'ab', 'cde', 'fgh', 'g', 'ab', 'cde', 'fgh', 'g', 'abc', 'b', 'a', 'cde', 'fgh', 'g', 'ab', 'cde', 'fgh', 'g', 'ab', 'cde', 'fgh', 'g', 'abc', 'b', 'a', 'cde', 'fgh', 'g', 'ab', 'cde', 'fgh', 'g', 'ab', 'cde', 'fgh', 'g', 'abc',"
    },
    {
      "rank": 49,
      "score": 8.331556294201176,
      "candidate": "def first_max_len(sentence: str) -> str:\n    \"\"\"\n    >>> first_max_len('The quick brown fox jumps over the lazy dog')\n    'The'\n    >>> first_max_len('The quick brown fox jumps over the lazy dog.')\n    'The'\n    >>> first_max_len('The quick brown fox jumps over the lazy dog!!')\n    'The'\n    >>> first_max_len('The quick brown fox jumps over the lazy dog!!!')\n    'The'\n    >>> first_max_len('The quick brown fox jumps over the lazy dog?')\n    'The'\n    >>> first_max_len('The quick brown fox jumps over the lazy dog???')\n    'The'\n    >>> first_max_len('The quick brown fox jumps over the lazy dog.123')\n    'The'\n    >>> first_max_len('The quick brown fox jumps over the lazy dog.1234')\n    'The'\n    >>> first_max_len('The quick brown fox jumps over the lazy dog.12345')\n    'The'\n    >>> first_max_len('The quick brown fox jumps over the lazy dog.123456')\n    'The'\n    >>> first_max_len('The quick brown fox jumps over the lazy dog.1234567')\n    'The'\n    >>> first_max_len('The quick brown fox jumps over the lazy dog.12345678')\n    'The'\n    >>> first_max_len('The quick brown fox jumps over the lazy dog.123456789')\n    'The'\n    >>> first_max_len('The quick brown fox jumps over the lazy dog.1234567890')\n    'The'\n    >>> first_max_len('The quick brown fox jumps over the lazy dog.12345678901')\n    'The'\n    >>> first_max_len('The quick brown fox jumps over the lazy dog.1234"
    },
    {
      "rank": 50,
      "score": 8.327375965969855,
      "candidate": "def max_length(string):\n    result = []\n    for word in string.split():\n        if len(word) % 2 == 0:\n            result.append(len(word))\n    if len(result) == 0:\n        return -1\n    else:\n        return max(result)\n\n\nprint(max_length(\"The quick brown fox jumped over the lazy dog\"))"
    },
    {
      "rank": 51,
      "score": 8.327367757082776,
      "candidate": "def first_max_length(text):\n    \"\"\"\n    :param text: string\n    :return: integer\n    \"\"\"\n    words = text.split()\n    even_words = [word for word in words if len(word) % 2 == 0]\n    even_words.sort(key=len)\n    return len(even_words[0])\n\nprint(first_max_length(\"The quick brown fox jumps over the lazy dog\"))\nprint(first_max_length(\"Python Exercises\"))\nprint(first_max_length(\"Python\"))"
    },
    {
      "rank": 52,
      "score": 8.298597569547805,
      "candidate": "def find_max_length(words):\n    result = 0\n    for word in words:\n        if len(word) % 2 == 0:\n            result = max(result, len(word))\n    return result\n\n\ndef main():\n    words = input(\"Enter a list of words separated by commas: \")\n    words = words.split(\",\")\n    max_length = find_max_length(words)\n    print(f\"Maximum length of even words in the list is {max_length}.\")\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 53,
      "score": 8.2938925966498,
      "candidate": "def even_word(words):\n    words_len = []\n    for word in words:\n        if len(word) % 2 == 0:\n            words_len.append(len(word))\n    return max(words_len)\n\n\nprint(even_word([\"abc\", \"def\", \"ghi\", \"jkl\", \"mno\"]))"
    },
    {
      "rank": 54,
      "score": 8.289838256518838,
      "candidate": "def find_first_max_len_even_word(words):\n    \"\"\"\n    :param words: list - list of words (string) to find the first maximum length even word.\n    :return: str - the first maximum length even word.\n    \"\"\"\n    if words == []:\n        return \"\"\n\n    max_length = 0\n    even_word = \"\"\n\n    for word in words:\n        if len(word) % 2 == 0:\n            if max_length < len(word):\n                max_length = len(word)\n                even_word = word\n\n    return even_word\n\ndef main():\n    print(\"Maximum length of even word: \" + find_first_max_len_even_word([\"apple\", \"orange\", \"cat\", \"dog\", \"house\"]))\n    print(\"Maximum length of even word: \" + find_first_max_len_even_word([\"dog\", \"cat\", \"mouse\", \"fish\", \"elephant\"]))\n    print(\"Maximum length of even word: \" + find_first_max_len_even_word([\"dog\", \"cat\", \"mouse\", \"fish\"]))\n    print(\"Maximum length of even word: \" + find_first_max_len_even_word([\"cat\", \"dog\", \"mouse\", \"fish\"]))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 55,
      "score": 8.251903304236286,
      "candidate": "def find_first_max_length_even_word(input_list: list) -> str:\n    \"\"\"\n    :param input_list: list of string.\n    :return: the first maximum length of even word.\n    >>> find_first_max_length_even_word([\"hello\", \"hi\", \"how\", \"are\", \"you?\"])\n    'hi'\n    \"\"\"\n    max_length = 0\n    max_word = \"\"\n    for word in input_list:\n        if len(word) % 2 == 0 and len(word) > max_length:\n            max_length = len(word)\n            max_word = word\n    return max_word\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 56,
      "score": 8.214125058964552,
      "candidate": "def first_max_length(string):\n    words = string.split()\n    result = 0\n    for word in words:\n        if len(word) % 2 == 0:\n            if len(word) > result:\n                result = len(word)\n    return result\n\n\nif __name__ == \"__main__\":\n    print(first_max_length(\"The quick brown fox jumps over the lazy dog\"))\n    print(first_max_length(\"Python Exercises\"))"
    },
    {
      "rank": 57,
      "score": 8.212735598038213,
      "candidate": "def max_even_length_word(str_input):\n    \"\"\"\n    Return the maximum length of even length words.\n    \"\"\"\n    if isinstance(str_input, str):\n        str_input = str_input.split()\n    str_len_even = [word for word in str_input if len(word) % 2 == 0]\n    return max(str_len_even, key=len) if str_len_even else None"
    },
    {
      "rank": 58,
      "score": 8.211579567659316,
      "candidate": "def first_max_len(string: str) -> str:\n    \"\"\"\n    >>> first_max_len('The quick brown fox jumps over the lazy dog')\n    'The'\n    \"\"\"\n    string = string.split()\n    for word in string:\n        if len(word) % 2 == 0:\n            return word\n\n\ndef first_max_len_mod(string: str) -> str:\n    \"\"\"\n    >>> first_max_len_mod('The quick brown fox jumps over the lazy dog')\n    'The'\n    \"\"\"\n    string = string.split()\n    return min(filter(lambda x: len(x) % 2 == 0, string))\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 59,
      "score": 8.209707251476969,
      "candidate": "def find_first_max_len(words):\n    words_list = [x for x in words.split() if len(x)%2==0]\n    return sorted(words_list,key=len)[0]\n\nprint(find_first_max_len(\"The quick brown fox jumped over the lazy dog\"))"
    },
    {
      "rank": 60,
      "score": 8.2048573255218,
      "candidate": "def first_max_length(words):\n    for word in words:\n        if len(word) % 2 == 0:\n            return word\n\n\nprint(first_max_length([\"word\", \"Words\", \"word\"]))"
    },
    {
      "rank": 61,
      "score": 8.172253082181854,
      "candidate": "def even_word(sentence: str) -> int:\n    \"\"\"Return the first maximum length of even word.\"\"\"\n    word_list = sentence.split()\n    even_words = [word for word in word_list if len(word) % 2 == 0]\n    return len(max(even_words, key=len))"
    },
    {
      "rank": 62,
      "score": 8.163300679823958,
      "candidate": "def even_word(words):\n    max_length = 0\n    for word in words:\n        if len(word) % 2 == 0:\n            if len(word) > max_length:\n                max_length = len(word)\n                result = word\n    return result\n\nprint(even_word([\"car\", \"house\", \"loop\", \"flow\"]))\nprint(even_word([\"car\", \"house\", \"loop\", \"flow\", \"hack\"]))"
    },
    {
      "rank": 63,
      "score": 8.144125099485041,
      "candidate": "def first_max_word(words):\n    \"\"\"\n    >>> first_max_word(['hello', 'world', 'good', 'morning'])\n    'good'\n    >>> first_max_word(['hello', 'world', 'goodbye', 'world'])\n    'goodbye'\n    \"\"\"\n    return sorted(words, key=len)[-1]\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 64,
      "score": 8.143591138329747,
      "candidate": "def find_even_max_length(words: list):\n    for word in words:\n        if len(word) % 2 == 0:\n            return word\n\n\nif __name__ == \"__main__\":\n    words = [\"banana\", \"orange\", \"apple\", \"watermelon\", \"lemon\", \"pear\", \"grape\"]\n    print(f\"The first maximum length of even word is: {find_even_max_length(words)}\")"
    },
    {
      "rank": 65,
      "score": 8.105983444291466,
      "candidate": "def first_max_word_length(words):\n    for word in words:\n        if len(word) % 2 == 0:\n            return word\n\n\ndef main():\n    words = [\"Hello\", \"World\", \"Hi\", \"Greeting\", \"Python\", \"Programming\"]\n    print(first_max_word_length(words))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 66,
      "score": 8.08452234024709,
      "candidate": "def find_first_max_length_even_word(sentence):\n    \"\"\"\n    Find first maximum length of even word\n    >>> find_first_max_length_even_word('The quick brown fox jumps over the lazy dog.')\n    6\n    \"\"\"\n    list_of_words = sentence.split()\n    length_list = []\n    for word in list_of_words:\n        length_list.append(len(word))\n    length_list.sort(reverse=True)\n    for word in length_list:\n        if word % 2 == 0:\n            return word\n    return -1\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 67,
      "score": 8.024835682833125,
      "candidate": "def max_length(words):\n    max_len = 0\n    for word in words:\n        if not word[0].isalnum():\n            continue\n        if len(word) % 2 == 0 and len(word) > max_len:\n            max_len = len(word)\n    return max_len\n\n\ndef main():\n    words = [\n        \"A\",\n        \"Text\",\n        \"with\",\n        \"random\",\n        \"words\",\n        \"and\",\n        \"numbers123\",\n        \"and\",\n        \"special\",\n        \"characters!\",\n    ]\n    assert max_length(words) == 6\n\n    words = [\n        \"a\",\n        \"sentence\",\n        \"including\",\n        \"punctuation\",\n        \";\",\n        \"the\",\n        \"question\",\n        \"mark\",\n        \"?\",\n    ]\n    assert max_length(words) == 12\n\n    words = [\"hi\"]\n    assert max_length(words) == 2\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 68,
      "score": 7.990432406683839,
      "candidate": "def first_max_length(words):\n    \"\"\"\n    Find the first maximum length of even word.\n\n    Args:\n        words (list): list of words.\n\n    Returns:\n        int: length of the first maximum length of even word.\n    \"\"\"\n    max_length = 0\n    for word in words:\n        if len(word) % 2 == 0 and len(word) > max_length:\n            max_length = len(word)\n    return max_length"
    },
    {
      "rank": 69,
      "score": 7.938028884277233,
      "candidate": "def first_max_length_of_even_word(input_str):\n    words = input_str.split()\n    for word in words:\n        if len(word) % 2 == 0:\n            return word\n\n    return None\n\ndef first_max_length_of_even_word2(input_str):\n    return max([word for word in input_str.split() if len(word) % 2 == 0], key=len)\n\nprint(first_max_length_of_even_word(\"The quick brown fox jumped over the lazy dog\"))\nprint(first_max_length_of_even_word2(\"The quick brown fox jumped over the lazy dog\"))"
    },
    {
      "rank": 70,
      "score": 7.915588979966494,
      "candidate": "def max_length_even_word(string):\n    \"\"\"Return the maximum length of the even word in the string.\n\n    >>> max_length_even_word(\"The quick brown fox jumps over the lazy dog\")\n    6\n    \"\"\"\n    max_length = 0\n    for word in string.split():\n        if len(word) % 2 == 0:\n            if len(word) > max_length:\n                max_length = len(word)\n    return max_length\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 71,
      "score": 7.8912769574414305,
      "candidate": "def find_first_max_length(input_list):\n    max_length = 0\n    for word in input_list:\n        if not word.isalpha():\n            input_list.remove(word)\n\n    for word in input_list:\n        if len(word) % 2 == 0:\n            if len(word) > max_length:\n                max_length = len(word)\n    return max_length\n\n\ndef main():\n    list1 = [\"eve\", \"evil\", \"even\", \"evil\", \"evil\", \"evil\", \"even\", \"eve\", \"eve\"]\n    list2 = [\"even\", \"evil\", \"even\", \"evil\", \"evil\", \"evil\", \"even\", \"eve\", \"eve\"]\n    list3 = [\"even\", \"evil\", \"even\", \"evil\", \"evil\", \"evil\", \"even\", \"eve\", \"eve\"]\n    list4 = [\"eve\", \"evil\", \"even\", \"evil\", \"evil\", \"evil\", \"even\", \"eve\", \"eve\"]\n    print(\"Maximum length of even word in list1 is: \" + str(find_first_max_length(list1)))\n    print(\"Maximum length of even word in list2 is: \" + str(find_first_max_length(list2)))\n    print(\"Maximum length of even word in list3 is: \" + str(find_first_max_length(list3)))\n    print(\"Maximum length of even word in list4 is: \" + str(find_first_max_length(list4)))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 72,
      "score": 7.868947655733293,
      "candidate": "def first_max_length_of_even_word(words):\n    max_length = 0\n    for word in words:\n        if len(word) % 2 == 0:\n            if len(word) > max_length:\n                max_length = len(word)\n    return max_length\n\n\ndef main():\n    print(first_max_length_of_even_word([\"abc\", \"def\", \"ghi\"]))\n    print(first_max_length_of_even_word([\"abc\", \"def\", \"gh\", \"ijkl\"]))\n    print(first_max_length_of_even_word([\"abc\", \"def\", \"ghi\", \"jkl\"]))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 73,
      "score": 7.84634113240411,
      "candidate": "def find_first_max_length_even_word(words):\n    words.sort(key=lambda x: len(x), reverse=True)\n    for word in words:\n        if len(word) % 2 == 0:\n            return word\n    return None"
    },
    {
      "rank": 74,
      "score": 7.834022619458933,
      "candidate": "def find_max_length(word_list):\n    \"\"\"\n    >>> find_max_length([\"hello\", \"world\", \"hi\", \"my\", \"name\", \"is\", \"alex\"])\n    'hello'\n    >>> find_max_length([\"hi\", \"my\", \"name\", \"is\", \"alex\"])\n    'hi'\n    \"\"\"\n    max_length = 0\n    for word in word_list:\n        if len(word) % 2 == 0 and len(word) > max_length:\n            max_length = len(word)\n    for word in word_list:\n        if len(word) == max_length:\n            return word\n    return None\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 75,
      "score": 7.780351419995229,
      "candidate": "def max_length_even(word):\n    max = 0\n    for i in word:\n        if len(i)%2==0 and len(i)>max:\n            max = len(i)\n    return max\n\n\nif __name__ == '__main__':\n    words = [\"hi\", \"eve\", \"n\", \"o\", \"o\", \"c\", \"u\", \"d\", \"e\", \"g\", \"l\", \"y\", \"y\", \"y\"]\n    print(max_length_even(words))"
    },
    {
      "rank": 76,
      "score": 7.738292593776799,
      "candidate": "def even_word_len(input_list):\n    for word in input_list:\n        if len(word) % 2 == 0:\n            print(word)\n            return word\n\n\ndef even_word_len(input_list):\n    return max([word for word in input_list if len(word) % 2 == 0], key=len)"
    },
    {
      "rank": 77,
      "score": 7.7320703513377165,
      "candidate": "def first_max_len_even_word(sentence):\n    \"\"\"Return the first maximum length of even word.\"\"\"\n    words = sentence.split()\n    for word in words:\n        if len(word) % 2 == 0:\n            return word\n    return \"No word found\"\n\nif __name__ == '__main__':\n    print(\"First maximum length of even word\")\n    sentence = input(\"Enter sentence: \")\n    print(first_max_len_even_word(sentence))"
    },
    {
      "rank": 78,
      "score": 7.705183449260731,
      "candidate": "def first_max_length(string):\n    words = string.split()\n    max_length = 0\n    for word in words:\n        if len(word) % 2 == 0:\n            if max_length < len(word):\n                max_length = len(word)\n                break\n    return max_length\n\n\nstring = input()\nprint(first_max_length(string))"
    },
    {
      "rank": 79,
      "score": 7.5819855281879285,
      "candidate": "def find_max_length(string: str) -> int:\n    \"\"\"\n    >>> find_max_length(\"The quick brown fox jumped over the lazy dog.\")\n    11\n    \"\"\"\n\n    max_length = 0\n\n    for word in string.split():\n        if len(word) % 2 == 0:\n            max_length = max(max_length, len(word))\n\n    return max_length\n\n\ndef find_max_length_with_regex(string: str) -> int:\n    \"\"\"\n    >>> find_max_length_with_regex(\"The quick brown fox jumped over the lazy dog.\")\n    11\n    \"\"\"\n\n    max_length = 0\n\n    for word in string.split():\n        if word.isalpha() and len(word) % 2 == 0:\n            max_length = max(max_length, len(word))\n\n    return max_length\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 80,
      "score": 7.562924366763077,
      "candidate": "def first_max_even_word(words: list) -> str:\n    \"\"\"\n    >>> first_max_even_word([\"I\", \"like\", \"very\", \"good\", \"python\", \"and\", \"java\"])\n    'python'\n    >>> first_max_even_word([\"hello\", \"world\", \"I\", \"like\", \"very\", \"good\", \"python\", \"java\"])\n    'python'\n    \"\"\"\n    words.sort(key=lambda x: len(x))\n    for word in words:\n        if len(word) % 2 == 0:\n            return word\n    return \"\"\n\n\ndef first_max_even_word_eff(words: list) -> str:\n    \"\"\"\n    >>> first_max_even_word_eff([\"I\", \"like\", \"very\", \"good\", \"python\", \"and\", \"java\"])\n    'python'\n    >>> first_max_even_word_eff([\"hello\", \"world\", \"I\", \"like\", \"very\", \"good\", \"python\", \"java\"])\n    'python'\n    \"\"\"\n    return next((word for word in sorted(words, key=len) if len(word) % 2 == 0), \"\")\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 81,
      "score": 7.4878043221155455,
      "candidate": "def first_max_len(string):\n    \"\"\"\n    Finds the first maximum length of even word\n    \"\"\"\n    if not string:\n        return \"\"\n    even_words = [word for word in string.split(\" \") if len(word) % 2 == 0]\n    return even_words[0] if even_words else \"\""
    },
    {
      "rank": 82,
      "score": 7.464609382504557,
      "candidate": "def max_even_word(words):\n    even_words = [word for word in words if len(word) % 2 == 0]\n    return max(even_words, key=len)\n\n\nprint(max_even_word([\"apple\", \"banana\", \"cat\", \"dog\"]))\nprint(max_even_word([\"apple\", \"banana\", \"cat\", \"dog\", \"million\"]))"
    },
    {
      "rank": 83,
      "score": 3.0,
      "candidate": "def max_even_word(input_string: str) -> str:\n    \"\"\"\n    >>> max_even_word(\"abc\")\n    ''\n    >>> max_even_word(\"abbc\")\n    'b'\n    >>> max_even_word(\"abcdd\")\n    ''\n    >>> max_even_word(\"abcdde\")\n    'cd'\n    >>> max_even_word(\"abcdddd\")\n    'ddd'\n    >>> max_even_word(\"abcddeee\")\n    'cd'\n    \"\"\"\n    max_length = 0\n    max_word = \"\"\n    for word in input_string.split(\" \"):\n        if len(word) % 2 == 0:\n            if len(word) > max_length:\n                max_word = word\n                max_length = len(word)\n    return max_word\n\n\ndef max_even_word_using_map(input_string: str) -> str:\n    \"\"\"\n    >>> max_even_word_using_map(\"abc\")\n    ''\n    >>> max_even_word_using_map(\"abbc\")\n    'b'\n    >>> max_even_word_using_map(\"abcdd\")\n    ''\n    >>> max_even_word_using_map(\"abcdde\")\n    'cd'\n    >>> max_even_word_using_map(\"abcdddd\")\n    'ddd'\n    >>> max_even_word_using_map(\"abcddeee\")\n    'cd'\n    \"\"\"\n    word_map = {}\n    for word in input_string.split(\" \"):\n        if len(word) % 2 == 0:\n            if word not in word_map:\n                word_map[word] = 0\n            word_map[word] += 1\n    if word_map:\n        return max(word_map, key=word_map.get)\n    return \"\"\n\n\nif __name__ == \"__main__\":\n    from doctest import testmod\n\n    testmod()"
    },
    {
      "rank": 84,
      "score": 3.0,
      "candidate": "def first_max_length_even_word(words):\n    \"\"\"\n    Return the first maximum length of even word.\n    >>> first_max_length_even_word(['apple', 'cat', 'dog', 'house', 'llamas'])\n    'house'\n    >>> first_max_length_even_word(['cat', 'dog', 'mouse', 'llamas'])\n    'llamas'\n    >>> first_max_length_even_word(['apple', 'cat', 'mouse', 'llamas'])\n    'llamas'\n    >>> first_max_length_even_word(['apple', 'cat', 'dog', 'mouse', 'llamas'])\n    'llamas'\n    >>> first_max_length_even_word(['apple', 'cat', 'mouse', 'llamas'])\n    'llamas'\n    \"\"\"\n    if not words:\n        return\n    even_words = []\n    for word in words:\n        if len(word) % 2 == 0:\n            even_words.append(word)\n    return sorted(even_words, key=lambda x: len(x))[0]\n\n\ndef first_max_length_even_word_1(words):\n    \"\"\"\n    Return the first maximum length of even word.\n    >>> first_max_length_even_word_1(['apple', 'cat', 'dog', 'house', 'llamas'])\n    'house'\n    >>> first_max_length_even_word_1(['cat', 'dog', 'mouse', 'llamas'])\n    'llamas'\n    >>> first_max_length_even_word_1(['apple', 'cat', 'mouse', 'llamas'])\n    'llamas'\n    >>> first_max_length_even_word_1(['apple', 'cat', 'dog', 'mouse', 'llamas'])\n    'llamas'\n    >>> first_max_length_even_word_1(['apple', 'cat', 'mouse', 'llamas'])\n    'llamas'\n    \"\"\"\n    if not words:\n        return\n    return sorted(\n        [word for word in words if len(word) %"
    },
    {
      "rank": 85,
      "score": 3.0,
      "candidate": "def find_max_len_even_word(words):\n    max_len = 0\n    for word in words:\n        if len(word) % 2 == 0:\n            if len(word) > max_len:\n                max_len = len(word)\n\n    return max_len\n\n\ndef main():\n    print(find_max_len_even_word(['one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight']))\n    print(find_max_len_even_word(['apple', 'banana', 'orange', 'grape', 'mango']))\n    print(find_max_len_even_word(['cat', 'dog', 'elephant', 'rabbit', 'cow']))\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 86,
      "score": 3.0,
      "candidate": "def longest_even(words):\n    # your code goes here\n    if len(words) == 0:\n        return 0\n    if len(words) == 1:\n        if len(words[0])%2 == 0:\n            return len(words[0])\n        else:\n            return 0\n    else:\n        word_length = []\n        for word in words:\n            if len(word)%2 == 0:\n                word_length.append(len(word))\n        word_length.sort()\n        return word_length[-1]\n\n\nif __name__ == '__main__':\n    #These \"asserts\" using only for self-checking and not necessary for auto-testing\n    assert longest_even((\"even\", \"not\", \"odd\", \"not\")) == 4, \"First Length\"\n    assert longest_even((\"not\", \"longest\", \"even\", \"longest\")) == 6, \"Second Length\"\n    assert longest_even((\"xx\", \"xx\", \"xxx\")) == 0, \"Length must be even\"\n    assert longest_even(()) == 0, \"Empty\"\n    print(\"Coding complete? Click 'Check' to review your tests and earn cool rewards!\")"
    },
    {
      "rank": 87,
      "score": 3.0,
      "candidate": "def even_word(words):\n    max_length = 0\n    for word in words:\n        if len(word) % 2 == 0 and len(word) > max_length:\n            max_length = len(word)\n    return max_length\n\n\ndef test_even_word():\n    assert even_word([\"abc\", \"def\", \"ghi\", \"jkl\"]) == 4\n\n\nif __name__ == \"__main__\":\n    test_even_word()"
    },
    {
      "rank": 88,
      "score": 3.0,
      "candidate": "def find_max_length(words):\n    max_length = 0\n    for word in words:\n        if len(word) % 2 == 0:\n            if max_length < len(word):\n                max_length = len(word)\n    return max_length\n\n\nwords = [\"hello\", \"world\", \"hi\", \"people\", \"goodbye\", \"python\"]\nprint(find_max_length(words))"
    },
    {
      "rank": 89,
      "score": 3.0,
      "candidate": "def first_max_word(sentence):\n    \"\"\"\n    Find the first maximum length of even word.\n\n    Args:\n       sentence(string): Strings to be cleaned\n    Returns:\n       list: List of cleaned sentences.\n    \"\"\"\n    if sentence == \"\":\n        return sentence\n    cleaned_sentence = \"\"\n    for word in sentence.split():\n        if len(word) % 2 == 0:\n            cleaned_sentence += word + \" \"\n    return cleaned_sentence.split()[0]\n\n\n# Simple Test\ntest_sentence = \"This is a test string to test whether it works or not\"\nprint(\"Input sentence: \", test_sentence)\nprint(\"First Max word: \", first_max_word(test_sentence))"
    },
    {
      "rank": 90,
      "score": 3.0,
      "candidate": "def first_max_length(words: list) -> str:\n    \"\"\"\n    >>> first_max_length(['abc', 'def', 'ghi', 'jkl'])\n    'def'\n    >>> first_max_length(['abc', 'def', 'ghi', 'jkl', 'mno', 'pqr'])\n    'mno'\n    >>> first_max_length(['abc', 'def', 'ghi', 'jkl', 'mno', 'pqr', 'stu'])\n    'mno'\n    \"\"\"\n    for word in words:\n        if word.isalnum() and len(word) % 2 == 0:\n            return word\n\n\ndef first_max_length_opt(words: list) -> str:\n    \"\"\"\n    >>> first_max_length_opt(['abc', 'def', 'ghi', 'jkl'])\n    'def'\n    >>> first_max_length_opt(['abc', 'def', 'ghi', 'jkl', 'mno', 'pqr'])\n    'mno'\n    >>> first_max_length_opt(['abc', 'def', 'ghi', 'jkl', 'mno', 'pqr', 'stu'])\n    'mno'\n    \"\"\"\n    for word in words:\n        if word.isalnum() and len(word) % 2 == 0:\n            return word\n        else:\n            continue\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 91,
      "score": 3.0,
      "candidate": "from collections import defaultdict\n\n\ndef even_max_length(words):\n    \"\"\"\n    First maximum length of even word\n    >>> even_max_length(['abc', 'c', 'abc'])\n    'abc'\n    >>> even_max_length(['abc', 'c', 'abc', 'b'])\n    'abc'\n    >>> even_max_length(['abc', 'c', 'abc', 'b', 'a'])\n    'abc'\n    >>> even_max_length(['abc', 'c', 'abc', 'b', 'a', 'abc'])\n    'abc'\n    >>> even_max_length(['abc', 'c', 'abc', 'b', 'a', 'abc', 'abc'])\n    'abc'\n    \"\"\"\n    words = sorted(words, key=lambda x: len(x), reverse=True)\n    d = defaultdict(int)\n    for word in words:\n        if len(word) % 2 == 0:\n            if d[word] == 0:\n                d[word] = 1\n            else:\n                return word\n\n\ndef even_max_length_eff(words):\n    \"\"\"\n    First maximum length of even word\n    >>> even_max_length_eff(['abc', 'c', 'abc'])\n    'abc'\n    >>> even_max_length_eff(['abc', 'c', 'abc', 'b'])\n    'abc'\n    >>> even_max_length_eff(['abc', 'c', 'abc', 'b', 'a'])\n    'abc'\n    >>> even_max_length_eff(['abc', 'c', 'abc', 'b', 'a', 'abc'])\n    'abc'\n    >>> even_max_length_eff(['abc', 'c', 'abc', 'b', 'a', 'abc', 'abc'])\n    'abc'\n    \"\"\"\n    return max(\n        [word for word in sorted(words, key=lambda x: len(x), reverse=True) if len(word) % 2 == 0]\n    )\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 92,
      "score": 3.0,
      "candidate": "from string import ascii_letters\n\n\ndef find_max_even_word(text: str) -> str:\n    \"\"\"\n    >>> find_max_even_word('python')\n    ''\n    >>> find_max_even_word('abcdefghijklmno')\n    'm'\n    >>> find_max_even_word('pqr')\n    ''\n    >>> find_max_even_word('abcdefghijklmn')\n    'mn'\n    >>> find_max_even_word('abcdefghijklmnopqrstuvwxyz')\n    'mnopqrstuvwxyz'\n    \"\"\"\n    max_length = 0\n    max_word = \"\"\n\n    for word in text.split():\n        if all(letter in ascii_letters for letter in word) and len(word) % 2 == 0:\n            if len(word) > max_length:\n                max_length = len(word)\n                max_word = word\n    return max_word\n\n\ndef find_max_even_word_v2(text: str) -> str:\n    \"\"\"\n    >>> find_max_even_word_v2('python')\n    ''\n    >>> find_max_even_word_v2('abcdefghijklmno')\n    'm'\n    >>> find_max_even_word_v2('pqr')\n    ''\n    >>> find_max_even_word_v2('abcdefghijklmn')\n    'mn'\n    >>> find_max_even_word_v2('abcdefghijklmnopqrstuvwxyz')\n    'mnopqrstuvwxyz'\n    \"\"\"\n    return max(\n        (word for word in text.split() if all(letter in ascii_letters for letter in word)),\n        key=len,\n        default=\"\",\n    )\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 93,
      "score": 3.0,
      "candidate": "def find_max_word_len(words):\n    max_len = 0\n    for word in words:\n        if len(word) % 2 == 0:\n            if max_len < len(word):\n                max_len = len(word)\n    return max_len\n\n\nprint(find_max_word_len(['hi', 'python', 'is', 'awesome']))\nprint(find_max_word_len(['hi', 'python', 'is', 'awesome', 'python']))\nprint(find_max_word_len(['hi', 'python', 'is', 'awesome', 'python', 'hi']))"
    },
    {
      "rank": 94,
      "score": 3.0,
      "candidate": "def first_max_length_even_word(sentence: str) -> str:\n    \"\"\"\n    Find the first maximum length of even word in a sentence.\n\n    >>> first_max_length_even_word('The quick brown fox jumps over the lazy dog.')\n    'quick'\n    >>> first_max_length_even_word('Python Exercises')\n    'thon'\n    >>> first_max_length_even_word('the quick brown fox jumped over the lazy fox')\n    'jumped'\n    \"\"\"\n    words = sentence.split()\n    for word in words:\n        if len(word) % 2 == 0:\n            return word\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 95,
      "score": 3.0,
      "candidate": "def max_even_word(text: str) -> str:\n    \"\"\"\n    >>> max_even_word('the quick brown fox jumped over the lazy dog')\n    'the'\n    >>> max_even_word('apple banana orange grape')\n    'banana'\n    >>> max_even_word('apple banana orange grape')\n    'banana'\n    \"\"\"\n    words = text.split()\n    for word in words:\n        if len(word) % 2 == 0:\n            return word\n    return None\n\n\ndef max_even_word_optimized(text: str) -> str:\n    \"\"\"\n    >>> max_even_word_optimized('the quick brown fox jumped over the lazy dog')\n    'the'\n    >>> max_even_word_optimized('apple banana orange grape')\n    'banana'\n    >>> max_even_word_optimized('apple banana orange grape')\n    'banana'\n    \"\"\"\n    words = text.split()\n    return max(words, key=lambda x: len(x)) if len(words) and len(words[0]) % 2 == 0 else None\n\n\nif __name__ == \"__main__\":\n    from doctest import testmod\n\n    testmod()"
    },
    {
      "rank": 96,
      "score": 3.0,
      "candidate": "def find_max_even_word(words: list):\n    even_words = [word for word in words if len(word) % 2 == 0]\n    return even_words[0] if even_words else None\n\n\ndef find_max_even_word_using_filter(words: list):\n    return max(filter(lambda word: len(word) % 2 == 0, words), key=len) if words else None"
    },
    {
      "rank": 97,
      "score": 3.0,
      "candidate": "def find_max_length(words: list) -> int:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(1)\n    \"\"\"\n\n    if len(words) == 0:\n        return 0\n\n    max_length = 0\n\n    for word in words:\n        if len(word) % 2 == 0 and len(word) > max_length:\n            max_length = len(word)\n\n    return max_length\n\n\nif __name__ == \"__main__\":\n    print(find_max_length([\"hello\", \"world\", \"hi\"]))"
    },
    {
      "rank": 98,
      "score": 3.0,
      "candidate": "def find_first_max_length_of_even_word(sentence):\n    \"\"\"\n    Find the first maximum length of even word.\n\n    :param sentence: string\n    :return: int\n    \"\"\"\n    # split sentence into words\n    words = sentence.split()\n    # initialize maximum length of even word\n    max_length_of_even_word = 0\n    # iterate over the words\n    for word in words:\n        # if the length of the word is even\n        if len(word) % 2 == 0:\n            # if the length of the word is greater than the maximum length of even word\n            if len(word) > max_length_of_even_word:\n                # assign the maximum length of even word\n                max_length_of_even_word = len(word)\n    # return the maximum length of even word\n    return max_length_of_even_word"
    },
    {
      "rank": 99,
      "score": 3.0,
      "candidate": "def first_max_length_even_word(string):\n    words = string.split()\n    for word in words:\n        if len(word) % 2 == 0:\n            return word\n\n\ndef main():\n    string = \"I love python and java\"\n    assert first_max_length_even_word(string) == \"python\"\n\n    string = \"I love java\"\n    assert first_max_length_even_word(string) == \"java\"\n\n    string = \"I love python\"\n    assert first_max_length_even_word(string) == \"python\"\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 100,
      "score": 3.0,
      "candidate": "def max_length(words):\n    max_len = 0\n    for word in words:\n        if not word.isalpha():\n            words.remove(word)\n    for word in words:\n        if len(word) % 2 == 0 and len(word) > max_len:\n            max_len = len(word)\n    return max_len\n\n\nwords = ['hi', 'how', 'are', 'you', 'doing']\nprint(max_length(words))"
    }
  ]
}