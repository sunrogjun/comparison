{
  "timestamp": "2025-09-14T22:24:06.881695",
  "method": "improved_llm_judge",
  "judge_model": "codellama/CodeLlama-7b-Python-hf",
  "target_model": "codellama-7b",
  "dataset": "mbpp",
  "problem_number": 13,
  "total_candidates": 100,
  "results": [
    {
      "rank": 1,
      "score": 10.0,
      "candidate": "def binaryToDecimal(n):\n    return int(n, 2)\n\n\n# Test cases\nprint(binaryToDecimal(101010))\nprint(binaryToDecimal(1010))\nprint(binaryToDecimal(101))\nprint(binaryToDecimal(10))\nprint(binaryToDecimal(1))"
    },
    {
      "rank": 2,
      "score": 10.0,
      "candidate": "def binary_to_decimal(number):\n    \"\"\"\n    >>> binary_to_decimal('1010')\n    10\n    >>> binary_to_decimal('101010')\n    42\n    >>> binary_to_decimal('1010101010')\n    462\n    \"\"\"\n    decimal = 0\n    for i, digit in enumerate(number[::-1]):\n        decimal += int(digit) * (2 ** i)\n    return decimal\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 3,
      "score": 10.0,
      "candidate": "def convert_to_decimal(n):\n    return int(n, 2)\n\n\nif __name__ == \"__main__\":\n    print(convert_to_decimal(\"1010\"))"
    },
    {
      "rank": 4,
      "score": 10.0,
      "candidate": "def bin_to_dec(bin_num: int) -> int:\n    \"\"\"\n    This problem can be solved by converting the binary number to a string and then\n    converting each character to its decimal equivalent. This can be done by using\n    the ord() function.\n\n    For example:\n    >>> bin_to_dec(101010)\n    42\n    >>> bin_to_dec(1011)\n    11\n    >>> bin_to_dec(11111111111111111111111111111111)\n    2147483647\n    >>> bin_to_dec(1010)\n    10\n    \"\"\"\n    return int(\n        \"\".join(str(ord(i) - ord(\"0\")) for i in str(bin_num)),\n        10,\n    )\n\n\nif __name__ == \"__main__\":\n    from doctest import testmod\n\n    testmod()"
    },
    {
      "rank": 5,
      "score": 10.0,
      "candidate": "# O(n)\ndef binary_to_decimal(number: str) -> int:\n    \"\"\"\n    >>> binary_to_decimal(\"1010\")\n    10\n    >>> binary_to_decimal(\"110100\")\n    42\n    >>> binary_to_decimal(\"1001\")\n    9\n    \"\"\"\n    decimal = 0\n    for n in number:\n        decimal = 2 * decimal + int(n)\n    return decimal\n\n\nif __name__ == \"__main__\":\n    from doctest import testmod\n\n    testmod()"
    },
    {
      "rank": 6,
      "score": 10.0,
      "candidate": "def binaryToDecimal(n):\n    return int(n, 2)\n\n\nif __name__ == \"__main__\":\n    print(binaryToDecimal(n=\"1010\"))"
    },
    {
      "rank": 7,
      "score": 10.0,
      "candidate": "def convert_to_decimal(binary_number):\n    \"\"\"\n    >>> convert_to_decimal(1010)\n    10\n    >>> convert_to_decimal(101)\n    5\n    >>> convert_to_decimal(1101)\n    11\n    >>> convert_to_decimal(1111)\n    15\n    >>> convert_to_decimal(11101)\n    41\n    >>> convert_to_decimal(1111111111111111111111111111111)\n    2147483647\n    >>> convert_to_decimal(0)\n    0\n    \"\"\"\n\n    decimal_number = 0\n\n    for i in range(len(binary_number)):\n        decimal_number += binary_number[i] * (2 ** (len(binary_number) - i - 1))\n\n    return decimal_number\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 8,
      "score": 10.0,
      "candidate": "# Time complexity O(n)\ndef binary_to_decimal(binary_num: int) -> int:\n    decimal, index = 0, 0\n    while binary_num != 0:\n        dec_remainder = binary_num % 10\n        binary_num = binary_num // 10\n        decimal += dec_remainder * (2 ** index)\n        index += 1\n    return decimal\n\n\nif __name__ == \"__main__\":\n    print(binary_to_decimal(1010))"
    },
    {
      "rank": 9,
      "score": 10.0,
      "candidate": "def binary_to_decimal(number):\n    return int(number, 2)\n\n\nif __name__ == \"__main__\":\n    print(binary_to_decimal(\"1010\"))"
    },
    {
      "rank": 10,
      "score": 10.0,
      "candidate": "def binary_to_decimal(binary_number):\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(1)\n    \"\"\"\n    decimal_value = 0\n    for i in range(len(binary_number)):\n        decimal_value += int(binary_number[i]) * (2 ** (len(binary_number) - i - 1))\n\n    return decimal_value\n\n\nif __name__ == \"__main__\":\n    print(binary_to_decimal(\"111\"))"
    },
    {
      "rank": 11,
      "score": 10.0,
      "candidate": "# This is a sample function\n\ndef decimal_to_binary(n):\n    return bin(n).replace(\"0b\", \"\")\n\n\nif __name__ == '__main__':\n    binary_number = input()\n\n    # Declare the result\n    result = decimal_to_binary(binary_number)\n    print(result)"
    },
    {
      "rank": 12,
      "score": 10.0,
      "candidate": "def binary_to_decimal(bin_num: str) -> int:\n    \"\"\"\n    >>> binary_to_decimal(\"1101\")\n    13\n    >>> binary_to_decimal(\"110\")\n    6\n    >>> binary_to_decimal(\"110.11\")\n    6.3\n    >>> binary_to_decimal(\"110.1101\")\n    6.375\n    >>> binary_to_decimal(\"110.110.11\")\n    6.375\n    >>> binary_to_decimal(\"110.110.1101\")\n    6.375\n    >>> binary_to_decimal(\"110.110.110.11\")\n    6.375\n    >>> binary_to_decimal(\"110.110.110.1101\")\n    6.375\n    >>> binary_to_decimal(\"110.110.110.11010\")\n    6.375\n    >>> binary_to_decimal(\"110.110.110.110100\")\n    6.375\n    >>> binary_to_decimal(\"110.110.110.1101000\")\n    6.375\n    >>> binary_to_decimal(\"110.110.110.11010000\")\n    6.375\n    >>> binary_to_decimal(\"110.110.110.110100000\")\n    6.375\n    >>> binary_to_decimal(\"110.110.110.1101000000\")\n    6.375\n    >>> binary_to_decimal(\"110.110.110.11010000000\")\n    6.375\n    >>> binary_to_decimal(\"110.11"
    },
    {
      "rank": 13,
      "score": 10.0,
      "candidate": "def convert_binary_to_decimal(number):\n    decimal_value = 0\n    for count, value in enumerate(number):\n        decimal_value += int(value) * 2 ** (len(number) - count - 1)\n    return decimal_value\n\n\nif __name__ == \"__main__\":\n    print(convert_binary_to_decimal(\"1010\"))"
    },
    {
      "rank": 14,
      "score": 10.0,
      "candidate": "def binaryToDecimal(binary):\n    return int(binary, 2)\n\n\ndef main():\n    binary = input()\n    print(binaryToDecimal(binary))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 15,
      "score": 10.0,
      "candidate": "def binary_to_decimal(binary):\n    \"\"\"\n    :param: binary - number as a string\n    return decimal value as integer\n    \"\"\"\n    decimal = 0\n    for i in range(len(binary)):\n        decimal += int(binary[i]) * (2 ** (len(binary) - i - 1))\n    return decimal\n\n\ndef main():\n    binary = \"1010110011\"\n    decimal = binary_to_decimal(binary)\n    print(decimal)\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 16,
      "score": 10.0,
      "candidate": "def binary_to_decimal(number):\n    \"\"\"\n    :param number: str - binary number\n    :return: int - decimal number\n    \"\"\"\n    return int(number, 2)\n\n\nif __name__ == '__main__':\n    print(binary_to_decimal('1010'))"
    },
    {
      "rank": 17,
      "score": 10.0,
      "candidate": "def binary_to_decimal(number):\n    return int(number, 2)\n\n\nif __name__ == \"__main__\":\n    input_number = input(\"Enter a binary number: \")\n    print(binary_to_decimal(input_number))"
    },
    {
      "rank": 18,
      "score": 10.0,
      "candidate": "def binary_to_decimal(binary_number):\n    decimal_number = 0\n    for i in range(len(binary_number) - 1, -1, -1):\n        decimal_number += (2 ** i) * int(binary_number[i])\n    return decimal_number\n\n\nif __name__ == \"__main__\":\n    print(binary_to_decimal(binary_number=\"100001101\"))\n    print(binary_to_decimal(binary_number=\"110101110100000110111101101000001011011000101110111101101101111\"))"
    },
    {
      "rank": 19,
      "score": 10.0,
      "candidate": "def convert_to_decimal(number: int) -> int:\n    \"\"\"\n    >>> convert_to_decimal(1010)\n    10\n    \"\"\"\n    result = 0\n    for index, value in enumerate(reversed(str(number))):\n        result += int(value) * 2 ** index\n    return result\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 20,
      "score": 10.0,
      "candidate": "# O(n) time | O(1) space\ndef binaryToDecimal(binary):\n    dec = 0\n    for i in range(len(binary)):\n        dec += int(binary[i]) * 2 ** (len(binary) - i - 1)\n    return dec\n\n\nprint(binaryToDecimal(\"10001\"))"
    },
    {
      "rank": 21,
      "score": 10.0,
      "candidate": "def binary_to_decimal(binary):\n    decimal = 0\n    for i in range(len(binary) - 1, -1, -1):\n        decimal = decimal * 2 + int(binary[i])\n    return decimal\n\n\nif __name__ == \"__main__\":\n    binary = input()\n    print(binary_to_decimal(binary))"
    },
    {
      "rank": 22,
      "score": 10.0,
      "candidate": "def binary_to_decimal(binary):\n\tdecimal_value = 0\n\tfor i in range(len(binary)-1, -1, -1):\n\t\tdecimal_value += 2 ** i * int(binary[i])\n\n\treturn decimal_value\n\nif __name__ == \"__main__\":\n\tprint(binary_to_decimal(\"1010\"))"
    },
    {
      "rank": 23,
      "score": 10.0,
      "candidate": "def bin_to_dec(bin_num):\n    return int(bin_num, 2)\n\n\ndef main():\n    print(bin_to_dec(\"1111011\"))\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 24,
      "score": 9.0,
      "candidate": "def binary_to_decimal(binary: str) -> int:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(1)\n    \"\"\"\n\n    decimal = 0\n    i = 0\n\n    while binary:\n        decimal += int(binary[-1]) * (2 ** i)\n        binary = binary[:-1]\n        i += 1\n\n    return decimal\n\n\nif __name__ == \"__main__\":\n    assert binary_to_decimal(\"1010\") == 10"
    },
    {
      "rank": 25,
      "score": 9.0,
      "candidate": "def binary_to_decimal(binary: str) -> int:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(1)\n    \"\"\"\n\n    decimal = 0\n    for i in range(len(binary) - 1, -1, -1):\n        if binary[i] == \"1\":\n            decimal += 2 ** (len(binary) - i - 1)\n    return decimal\n\n\nif __name__ == \"__main__\":\n    print(binary_to_decimal(\"10101\"))"
    },
    {
      "rank": 26,
      "score": 9.0,
      "candidate": "def binary_to_decimal(binary: str) -> int:\n    \"\"\"\n    O(n) & O(n)\n    \"\"\"\n    decimal = 0\n    for i in range(len(binary) - 1, -1, -1):\n        decimal = decimal * 2 + int(binary[i])\n    return decimal\n\n\nif __name__ == \"__main__\":\n    print(binary_to_decimal(\"1010\"))"
    },
    {
      "rank": 27,
      "score": 9.0,
      "candidate": "def convert_to_decimal(number):\n    return int(number, 2)\n\n\nif __name__ == \"__main__\":\n    binary_number = input(\"Enter a binary number: \")\n    print(f\"Decimal equivalent is {convert_to_decimal(binary_number)}\")"
    },
    {
      "rank": 28,
      "score": 9.0,
      "candidate": "def binary_to_decimal(number: str) -> int:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(1)\n    \"\"\"\n    decimal = 0\n    for index, digit in enumerate(number):\n        decimal += int(digit) * (2 ** (len(number) - index - 1))\n    return decimal\n\n\nif __name__ == \"__main__\":\n    print(binary_to_decimal(\"10101\"))"
    },
    {
      "rank": 29,
      "score": 8.0,
      "candidate": "def binary_to_decimal(binary):\n    \"\"\"\n    >>> binary_to_decimal(1001)\n    9\n    >>> binary_to_decimal(101)\n    5\n    >>> binary_to_decimal(1111001)\n    145\n    >>> binary_to_decimal(0)\n    0\n    >>> binary_to_decimal(111100111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111"
    },
    {
      "rank": 30,
      "score": 8.0,
      "candidate": "def binary_to_decimal(binary):\n    decimal = 0\n    for i in range(len(binary)):\n        decimal += 2**i * int(binary[i])\n    return decimal\n\nif __name__ == \"__main__\":\n    print(binary_to_decimal(\"101\"))"
    },
    {
      "rank": 31,
      "score": 8.0,
      "candidate": "def binary_to_decimal(number: str) -> int:\n    decimal = 0\n    for index, bit in enumerate(number):\n        decimal += int(bit) * 2 ** (len(number) - index - 1)\n    return decimal\n\n\nif __name__ == \"__main__\":\n    print(binary_to_decimal(\"11010\"))"
    },
    {
      "rank": 32,
      "score": 8.0,
      "candidate": "def binary_to_decimal(number: str) -> int:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(1)\n    \"\"\"\n\n    result: int = 0\n    index: int = 0\n\n    while index < len(number):\n        result += int(number[index]) * (2 ** index)\n        index += 1\n\n    return result\n\n\nif __name__ == \"__main__\":\n    print(binary_to_decimal(\"1010\"))"
    },
    {
      "rank": 33,
      "score": 8.0,
      "candidate": "def binary_to_decimal(binary_number):\n    decimal_value = 0\n    binary_number = int(binary_number)\n    while binary_number != 0:\n        remainder = binary_number % 10\n        decimal_value = decimal_value * 2 + remainder\n        binary_number = binary_number // 10\n    return decimal_value\n\n\nif __name__ == \"__main__\":\n    binary_number = input(\"Enter a binary number: \")\n    decimal_number = binary_to_decimal(binary_number)\n    print(\"Decimal number is: \", decimal_number)"
    },
    {
      "rank": 34,
      "score": 8.0,
      "candidate": "def binary_to_decimal(binary):\n    binary = list(binary)\n    binary.reverse()\n    result = 0\n    for i in range(len(binary)):\n        result += int(binary[i]) * 2 ** i\n    return result\n\n\nif __name__ == \"__main__\":\n    print(binary_to_decimal(\"1010\"))"
    },
    {
      "rank": 35,
      "score": 8.0,
      "candidate": "def binary_to_decimal(bin_num):\n    if bin_num == \"\":\n        return 0\n    else:\n        return int(bin_num[-1]) + 2 * binary_to_decimal(bin_num[:-1])\n\n\nif __name__ == \"__main__\":\n    print(binary_to_decimal(\"1011\"))"
    },
    {
      "rank": 36,
      "score": 8.0,
      "candidate": "def convert_binary_to_decimal(number):\n    decimal_value = 0\n    for count, value in enumerate(number[::-1]):\n        decimal_value += int(value) * (2 ** count)\n    return decimal_value\n\n\nif __name__ == \"__main__\":\n    print(convert_binary_to_decimal(\"1010\"))"
    },
    {
      "rank": 37,
      "score": 8.0,
      "candidate": "def binary_to_decimal(binary_number):\n    decimal_number = 0\n    for digit in binary_number:\n        decimal_number = decimal_number * 2 + int(digit)\n    return decimal_number\n\n\nif __name__ == \"__main__\":\n    print(binary_to_decimal(\"101\"))"
    },
    {
      "rank": 38,
      "score": 8.0,
      "candidate": "def binary_to_decimal(number):\n    # Base case\n    if number == 0:\n        return 0\n\n    # Return 1 + 2 * (recursive call)\n    return 1 + 2 * binary_to_decimal(number // 10)\n\n\nif __name__ == \"__main__\":\n    binary_number = int(input(\"Enter a binary number: \"))\n    print(\"Decimal equivalent of\", binary_number, \"is\", binary_to_decimal(binary_number))"
    },
    {
      "rank": 39,
      "score": 8.0,
      "candidate": "def binaryToDecimal(binary):\n    return int(binary, 2)\n\n\nif __name__ == \"__main__\":\n    binary = input(\"Enter the binary number: \")\n    print(binaryToDecimal(binary))"
    },
    {
      "rank": 40,
      "score": 8.0,
      "candidate": "def binary_to_decimal(number):\n    decimal = 0\n    for i in range(len(number)):\n        decimal += int(number[i]) * (2 ** (len(number) - i - 1))\n\n    return decimal\n\n\nif __name__ == \"__main__\":\n    print(binary_to_decimal(\"10101\"))\n    print(binary_to_decimal(\"1010\"))"
    },
    {
      "rank": 41,
      "score": 8.0,
      "candidate": "# O(n) time | O(n) space\ndef binaryToDecimal(binary):\n    decimal = 0\n    for digit in binary:\n        decimal = decimal * 2 + int(digit)\n    return decimal"
    },
    {
      "rank": 42,
      "score": 8.0,
      "candidate": "def binaryToDecimal(binary):\n    decimal, i = 0, 0\n    while(binary != 0):\n        dec = binary % 10\n        decimal = decimal + dec * pow(2, i)\n        binary = binary // 10\n        i += 1\n    return decimal\n\n\nprint(binaryToDecimal(1010))"
    },
    {
      "rank": 43,
      "score": 8.0,
      "candidate": "# O(n)\ndef binary_to_decimal(binary):\n    result = 0\n    for i in range(len(binary) - 1, -1, -1):\n        result += int(binary[i]) * 2 ** (len(binary) - i - 1)\n    return result\n\n\nif __name__ == \"__main__\":\n    print(binary_to_decimal(\"11010\"))"
    },
    {
      "rank": 44,
      "score": 8.0,
      "candidate": "def binary_to_decimal(binary_number: str) -> int:\n    \"\"\"\n    >>> binary_to_decimal('1010')\n    10\n    >>> binary_to_decimal('1011')\n    11\n    >>> binary_to_decimal('1101')\n    11\n    >>> binary_to_decimal('1111')\n    15\n    >>> binary_to_decimal('10101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010"
    },
    {
      "rank": 45,
      "score": 8.0,
      "candidate": "def convert_to_decimal(number):\n    decimal_value = 0\n    for digit in number:\n        decimal_value = decimal_value * 2 + int(digit)\n    return decimal_value\n\n\nif __name__ == \"__main__\":\n    binary_number = input()\n    print(f\"Decimal value of {binary_number} is: {convert_to_decimal(binary_number)}\")"
    },
    {
      "rank": 46,
      "score": 8.0,
      "candidate": "def binary_to_decimal(binary_num):\n    decimal_num = 0\n    for i in range(len(binary_num)):\n        decimal_num += int(binary_num[i]) * (2**(len(binary_num) - i - 1))\n    return decimal_num\n\n\nif __name__ == \"__main__\":\n    binary_num = input(\"Enter a binary number: \")\n    assert binary_to_decimal(binary_num) == int(binary_num, 2)\n    print(\"The decimal equivalent of {} is {}\".format(binary_num, binary_to_decimal(binary_num)))"
    },
    {
      "rank": 47,
      "score": 8.0,
      "candidate": "def binaryToDecimal(binary):\n    return int(binary, 2)\n\nif __name__ == \"__main__\":\n    binary = input(\"Enter a binary number: \")\n    print(\"Decimal equivalent of \" + binary + \" is\", binaryToDecimal(binary))"
    },
    {
      "rank": 48,
      "score": 8.0,
      "candidate": "def binary_to_decimal(number):\n    if number[0] == '-':\n        return -binary_to_decimal(number[1:])\n    decimal_number = 0\n    for index, digit in enumerate(number):\n        decimal_number += int(digit) * (2 ** (len(number) - index - 1))\n    return decimal_number\n\n\nif __name__ == '__main__':\n    print(binary_to_decimal('10101'))"
    },
    {
      "rank": 49,
      "score": 8.0,
      "candidate": "def binary_to_decimal(number: str) -> int:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(1)\n    \"\"\"\n    result: int = 0\n\n    for i in range(len(number)):\n        result += int(number[i]) * (2 ** (len(number) - i - 1))\n\n    return result\n\n\nif __name__ == \"__main__\":\n    print(binary_to_decimal(\"1010\"))"
    },
    {
      "rank": 50,
      "score": 8.0,
      "candidate": "def binary_to_decimal(binary):\n    decimal = 0\n    for i in range(len(binary) - 1, -1, -1):\n        if binary[i] == '1':\n            decimal += 2 ** (len(binary) - 1 - i)\n    return decimal\n\n\nif __name__ == \"__main__\":\n    binary = input(\"Enter a binary number: \")\n    print(f\"Decimal value of {binary} is {binary_to_decimal(binary)}\")"
    },
    {
      "rank": 51,
      "score": 8.0,
      "candidate": "def binary_to_decimal(binary):\n    decimal = 0\n    for i, digit in enumerate(binary):\n        decimal += int(digit) * 2 ** (len(binary) - i - 1)\n    return decimal\n\n\nprint(binary_to_decimal(\"101\"))\nprint(binary_to_decimal(\"11111111\"))\nprint(binary_to_decimal(\"11010010\"))"
    },
    {
      "rank": 52,
      "score": 8.0,
      "candidate": "def binary_to_decimal(number: str) -> int:\n    \"\"\"\n    :param number: str, binary number\n    :return: int, decimal number\n    \"\"\"\n    decimal = 0\n    for i in range(len(number)):\n        decimal += int(number[i]) * (2 ** (len(number) - i - 1))\n    return decimal\n\n\nif __name__ == \"__main__\":\n    print(binary_to_decimal(\"101\"))"
    },
    {
      "rank": 53,
      "score": 8.0,
      "candidate": "def binary_to_decimal(binary):\n    return int(binary, 2)\n\nif __name__ == \"__main__\":\n    binary = \"1010\"\n    print(binary_to_decimal(binary))"
    },
    {
      "rank": 54,
      "score": 8.0,
      "candidate": "def binary_to_decimal(number):\n    return int(number, 2)\n\n\nif __name__ == \"__main__\":\n    binary_number = input(\"Enter a binary number: \")\n    print(f\"Decimal number: {binary_to_decimal(binary_number)}\")"
    },
    {
      "rank": 55,
      "score": 8.0,
      "candidate": "# O(n)\ndef binary_to_decimal(binary):\n    decimal, i = 0, 0\n    while binary:\n        decimal += binary % 10 * (2 ** i)\n        binary //= 10\n        i += 1\n\n    return decimal\n\n\n# O(n)\ndef binary_to_decimal(binary):\n    decimal = 0\n    for i in range(len(binary) - 1, -1, -1):\n        decimal += int(binary[i]) * (2 ** (len(binary) - 1 - i))\n\n    return decimal\n\n\nif __name__ == \"__main__\":\n    print(binary_to_decimal(\"1010\"))\n    print(binary_to_decimal(\"1111001\"))"
    },
    {
      "rank": 56,
      "score": 8.0,
      "candidate": "def binary_to_decimal(number):\n    decimal_value = 0\n    for count, value in enumerate(number[::-1]):\n        decimal_value += int(value) * (2 ** count)\n    return decimal_value\n\n\nif __name__ == \"__main__\":\n    binary_number = \"1010\"\n    assert binary_to_decimal(binary_number) == 10"
    },
    {
      "rank": 57,
      "score": 8.0,
      "candidate": "def binaryToDecimal(binary):\n    decimal, i = 0, 0\n    while binary:\n        decimal += binary % 10 * pow(2, i)\n        binary //= 10\n        i += 1\n    return decimal\n\n\nif __name__ == \"__main__\":\n    binary = int(input(\"Enter a binary number: \"))\n    print(\"Decimal equivalent is:\", binaryToDecimal(binary))"
    },
    {
      "rank": 58,
      "score": 8.0,
      "candidate": "# O(n)\ndef binary_to_decimal(binary_num):\n    decimal_num = 0\n    for i in range(len(binary_num) - 1, -1, -1):\n        decimal_num += (2 ** i) * int(binary_num[i])\n    return decimal_num\n\n\nprint(binary_to_decimal(\"10101\"))"
    },
    {
      "rank": 59,
      "score": 8.0,
      "candidate": "def binary_to_decimal(number):\n    # Base case\n    if number == \"\":\n        return 0\n\n    last_digit = number[-1]\n\n    if last_digit == \"1\":\n        return int(last_digit) + 2 * binary_to_decimal(number[:-1])\n    else:\n        return int(last_digit) + binary_to_decimal(number[:-1])\n\n\nif __name__ == \"__main__\":\n    print(binary_to_decimal(\"1011\"))"
    },
    {
      "rank": 60,
      "score": 8.0,
      "candidate": "# Time Complexity - O(n)\n# Space Complexity - O(1)\ndef binary_to_decimal(binary: str) -> int:\n    decimal = 0\n    for i in range(len(binary) - 1, -1, -1):\n        if binary[i] == \"1\":\n            decimal += 2 ** (len(binary) - i - 1)\n    return decimal\n\n\nif __name__ == \"__main__\":\n    print(binary_to_decimal(\"11010\"))"
    },
    {
      "rank": 61,
      "score": 8.0,
      "candidate": "# O(n) time | O(n) space\ndef binaryToDecimal(binary):\n\tdecimal = 0\n\tfor i in reversed(range(len(binary))):\n\t\tif binary[i] == \"1\":\n\t\t\tdecimal += 2**(len(binary) - i - 1)\n\treturn decimal"
    },
    {
      "rank": 62,
      "score": 8.0,
      "candidate": "def binary_to_decimal(number):\n    return int(number, 2)\n\n\nif __name__ == \"__main__\":\n    print(binary_to_decimal(\"1010\"))"
    },
    {
      "rank": 63,
      "score": 7.0,
      "candidate": "# O(n) time | O(n) space\ndef binaryToDecimal(binary):\n    result = 0\n    exp = len(binary) - 1\n    for digit in binary:\n        result += int(digit) * (2 ** exp)\n        exp -= 1\n    return result"
    },
    {
      "rank": 64,
      "score": 7.0,
      "candidate": "# O(n) time | O(n) space\ndef binaryToDecimal(binary):\n    # Write your code here.\n\tdecimal = 0\n\tfor i in range(len(binary)):\n\t\tdecimal += int(binary[i]) * (2 ** (len(binary) - i - 1))\n\treturn decimal\n\n\nprint(binaryToDecimal('1010'))"
    },
    {
      "rank": 65,
      "score": 6.0,
      "candidate": "# A utility function to do binary to\n# decimal conversion.\ndef binaryToDecimal(n):\n    num = n\n    dec_value = 0\n    base = 1\n    temp = num\n    while (num):\n        last_digit = num % 10\n        num = int(num / 10)\n        dec_value += last_digit * base\n        base = base * 2\n    return dec_value\n\n\n# main function\nif __name__ == \"__main__\":\n    binary = input(\"Enter binary number: \")\n    print(binaryToDecimal(binary))\n\n# sample output\n# Enter binary number: 101010\n# 42"
    },
    {
      "rank": 66,
      "score": 4.0,
      "candidate": "# O(n) time | O(n) space\ndef binary_to_decimal(binary_number):\n    decimal_number = 0\n\n    for index, value in enumerate(binary_number[::-1]):\n        decimal_number += int(value) * 2**index\n\n    return decimal_number\n\n\n# O(n) time | O(1) space\ndef binary_to_decimal_constant_space(binary_number):\n    decimal_number = 0\n    power = 0\n\n    for index, value in enumerate(binary_number[::-1]):\n        decimal_number += int(value) * 2**power\n        power += 1\n\n    return decimal_number"
    },
    {
      "rank": 67,
      "score": 1.0,
      "candidate": "# def binary_to_decimal(binary):\n#     return int(binary, 2)\n\n\ndef binary_to_decimal(binary):\n    return int(binary, 2)\n\n\nif __name__ == \"__main__\":\n    binary_number = input(\"Enter a binary number: \")\n    print(binary_to_decimal(binary_number))"
    },
    {
      "rank": 68,
      "score": 1.0,
      "candidate": "def convert_to_decimal(binary):\n    return int(binary, 2)\n\n\ndef test_binary_to_decimal():\n    assert convert_to_decimal(\"1111\") == 15\n    assert convert_to_decimal(\"101\") == 5\n    assert convert_to_decimal(\"10001\") == 17\n    assert convert_to_decimal(\"11111\") == 31\n\n\nif __name__ == \"__main__\":\n    test_binary_to_decimal()"
    },
    {
      "rank": 69,
      "score": 1.0,
      "candidate": "# def binary_to_decimal(number):\n#     return int(number, 2)\n\n\n# def binary_to_decimal(number):\n#     return int(number, 2)\n\n\ndef binary_to_decimal(number):\n    decimal_number = 0\n    for i, digit in enumerate(number):\n        decimal_number += int(digit) * (2 ** (len(number) - i - 1))\n    return decimal_number\n\n\nprint(binary_to_decimal(\"1010\"))"
    },
    {
      "rank": 70,
      "score": 1.0,
      "candidate": "def binary_to_decimal(number: str) -> int:\n    \"\"\"\n    >>> binary_to_decimal(\"10001\")\n    17\n    >>> binary_to_decimal(\"10001.1\")\n    17\n    >>> binary_to_decimal(\"10001.1001\")\n    17\n    >>> binary_to_decimal(\"10001.10011\")\n    17\n    >>> binary_to_decimal(\"10001.10011001\")\n    17\n    >>> binary_to_decimal(\"10001.100110011\")\n    17\n    >>> binary_to_decimal(\"10001.100110011001\")\n    17\n    >>> binary_to_decimal(\"10001.1001100110011\")\n    17\n    >>> binary_to_decimal(\"10001.1001100110011001\")\n    17\n    >>> binary_to_decimal(\"10001.10011001100110011\")\n    17\n    >>> binary_to_decimal(\"10001.10011001100110011001\")\n    17\n    >>> binary_to_decimal(\"10001.100110011001100110011\")\n    17\n    >>> binary_to_decimal(\"10001.100110011001100110011001\")\n    17\n    >>> binary_to_decimal(\"10001.1001100110011001100110011\")\n    17\n    >>> binary_to_decimal(\"10001.10011001"
    },
    {
      "rank": 71,
      "score": 1.0,
      "candidate": "def binary_to_decimal(binary_num: str) -> int:\n    \"\"\"\n    >>> binary_to_decimal('11010')\n    22\n    >>> binary_to_decimal('11111010110101001000101100110100001')\n    4294967295\n    >>> binary_to_decimal('1010')\n    10\n    >>> binary_to_decimal('10101010101010101010101010101010')\n    4294967295\n    >>> binary_to_decimal('101010101010101010101010101010101')\n    18446744073709551615\n    \"\"\"\n    # O(n)\n    return int(binary_num, 2)\n\n\nif __name__ == \"__main__\":\n    from doctest import testmod\n\n    testmod()"
    },
    {
      "rank": 72,
      "score": 1.0,
      "candidate": "def binary_to_decimal(number):\n    \"\"\"\n    :param number: int - binary number\n    :return: int - decimal number\n    \"\"\"\n    return bin(number).replace(\"0b\", \"\")\n\n\ndef test_function(test_case):\n    test_input, test_expected = test_case\n    test_actual = binary_to_decimal(test_input)\n    if test_actual == test_expected:\n        print(\"Pass\")\n    else:\n        print(\"Fail\")\n\n\ntest_function((5, 5))\ntest_function((11110, 36))\ntest_function((111111, 63))\ntest_function((0, 0))\ntest_function((1, 1))\ntest_function((10101, 21))\ntest_function((11111111111111111111111111111101, 36710))\ntest_function((11111111111111111111111111111111, 4294967293))\ntest_function((10101010101010101010101010101010, 4294967290))\ntest_function((11000100111110100010100011011010, 4294967290))"
    },
    {
      "rank": 73,
      "score": 1.0,
      "candidate": "def binary_to_decimal(binary):\n    \"\"\"\n    :param binary: str - binary number\n    :return: int - decimal number\n    \"\"\"\n    return int(binary, 2)\n\n\nprint(binary_to_decimal(\"1111\"))"
    },
    {
      "rank": 74,
      "score": 1.0,
      "candidate": "def binary_to_decimal(binary):\n    # TODO: Write your solution here\n    return int(binary, 2)\n\n\ndef main():\n    print(\"BINARY TO DECIMAL\")\n    binary = input(\"Enter a binary number: \")\n    decimal = binary_to_decimal(binary)\n    print(f\"Decimal equivalent is: {decimal}\")\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 75,
      "score": 1.0,
      "candidate": "def binary_to_decimal(number: str) -> int:\n    \"\"\"\n    O(n) time and space, where n is the length of the input number\n    \"\"\"\n    result: int = 0\n    power: int = len(number) - 1\n\n    for digit in number:\n        result += int(digit) * (2 ** power)\n        power -= 1\n\n    return result\n\n\nif __name__ == \"__main__\":\n    assert binary_to_decimal(\"1010\") == 10"
    },
    {
      "rank": 76,
      "score": 1.0,
      "candidate": "def binary_to_decimal(binary):\n    return int(binary, 2)\n\n\nif __name__ == \"__main__\":\n    binary = \"1010\"\n    print(binary_to_decimal(binary))"
    },
    {
      "rank": 77,
      "score": 1.0,
      "candidate": "# Iterative Solution\n\ndef binaryToDecimal(binary):\n    binary = str(binary)\n    decimal, i = 0, 0\n    while(binary != ''):\n        decimal = decimal + int(binary[-1]) * pow(2, i)\n        binary = binary[:-1]\n        i += 1\n    return decimal\n\n\n# Recursive Solution\n\ndef binaryToDecimal_recursive(binary):\n    if binary == '':\n        return 0\n    return int(binary[-1]) + 2 * binaryToDecimal_recursive(binary[:-1])\n\n\nprint(binaryToDecimal(10101010101010101010101010101010))\nprint(binaryToDecimal_recursive(10101010101010101010101010101010))"
    },
    {
      "rank": 78,
      "score": 1.0,
      "candidate": "def binary_to_decimal(binary: int) -> int:\n    \"\"\"\n    :param: binary - Binary representation of the number\n    return its decimal equivalent\n\n    >>> binary_to_decimal(10011)\n    19\n    >>> binary_to_decimal(101)\n    5\n    >>> binary_to_decimal(0)\n    0\n    >>> binary_to_decimal(1111)\n    15\n    >>> binary_to_decimal(11111111)\n    255\n    >>> binary_to_decimal(1010101)\n    53\n    >>> binary_to_decimal(11111111111111111111111111111111)\n    4294967295\n    >>> binary_to_decimal(1111111111111111111111111111111111111111111111111111111111111111)\n    340282366920938463463374607431768211455\n    >>> binary_to_decimal(0.0)\n    Traceback (most recent call last):\n        ...\n    TypeError: Input number should be of type integer\n    \"\"\"\n    if not isinstance(binary, int):\n        raise TypeError(\"Input number should be of type integer\")\n\n    decimal_value = 0\n    base = 1\n    while binary:\n        last_digit = binary % 10\n        decimal_value += last_digit * base\n        base = base * 2\n        binary = binary // 10\n\n    return decimal_value\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 79,
      "score": 1.0,
      "candidate": "def binary_to_decimal(binary_number: str) -> int:\n    \"\"\"\n    :param: binary_number: str -> The binary number to be converted to decimal.\n    :return: int -> The decimal value of the binary number.\n    \"\"\"\n    if not binary_number:\n        raise ValueError(\"The binary number is empty\")\n\n    if not set(binary_number) <= {\"0\", \"1\"}:\n        raise ValueError(\"Non-binary digits are present in the binary number\")\n\n    return int(binary_number, 2)\n\n\nif __name__ == \"__main__\":\n    assert binary_to_decimal(\"1010\") == 10"
    },
    {
      "rank": 80,
      "score": 1.0,
      "candidate": "def binary_to_decimal(number):\n    decimal = 0\n    for i in range(len(number)):\n        decimal += int(number[i]) * (2**(len(number)-i-1))\n    return decimal\n\n\nif __name__ == \"__main__\":\n    assert binary_to_decimal(\"1010\") == 10\n    assert binary_to_decimal(\"1011\") == 11\n    assert binary_to_decimal(\"1100\") == 12"
    },
    {
      "rank": 81,
      "score": 1.0,
      "candidate": "# Solution\ndef binary_to_decimal(binary_number):\n    return int(binary_number, 2)\n\n\n# Test cases\nprint(binary_to_decimal(\"10000101\"))\nprint(binary_to_decimal(\"01011\"))\nprint(binary_to_decimal(\"01010110\"))"
    },
    {
      "rank": 82,
      "score": 1.0,
      "candidate": "def binary_to_decimal(binary_num: str) -> int:\n    \"\"\"\n    Naive solution:\n    O(n) time | O(1) space\n    \"\"\"\n    decimal = 0\n    for i in range(len(binary_num)):\n        decimal += int(binary_num[-1 - i]) * (2 ** i)\n    return decimal\n\n\nif __name__ == \"__main__\":\n    assert binary_to_decimal(\"11\") == 3\n    assert binary_to_decimal(\"1010\") == 10\n    assert binary_to_decimal(\"1011\") == 11\n    assert binary_to_decimal(\"1111\") == 15\n    assert binary_to_decimal(\"11010\") == 31\n    assert binary_to_decimal(\"10001\") == 17\n    assert binary_to_decimal(\"11110\") == 30"
    },
    {
      "rank": 83,
      "score": 1.0,
      "candidate": "def binary_to_decimal(number: str) -> int:\n    \"\"\"\n    :param: number: str - Binary string to be converted to decimal.\n    return: int - Decimal integer equivalent to the binary number.\n    TODO: Write an algorithm to convert binary number to decimal.\n    \"\"\"\n\n    return int(number, 2)\n\n\ndef main():\n    number = input(\"Enter a binary number: \")\n    decimal = binary_to_decimal(number)\n    print(decimal)\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 84,
      "score": 1.0,
      "candidate": "def binary_to_decimal(number: int) -> int:\n    \"\"\"\n    The idea is to use recursion to solve this problem.\n    Let's assume we have a binary number 1010.\n    So, the steps are as follows:\n    1. Divide the number by 10.\n    2. If the remainder is 0, then append 0 to the answer.\n    3. Else, append 1 to the answer.\n    4. Repeat the same steps until the number becomes 0.\n    :param number: binary number to convert\n    :return: decimal equivalent of the binary number\n\n    >>> binary_to_decimal(1010)\n    10\n    >>> binary_to_decimal(1101)\n    13\n    >>> binary_to_decimal(0)\n    0\n    >>> binary_to_decimal(1111)\n    15\n    >>> binary_to_decimal(10101010101010101010101010101010)\n    524287\n    >>> binary_to_decimal(11111111111111111111111111111111)\n    4294967295\n    >>> binary_to_decimal(101010101010101010101010101010101010101010101010101010101010101010)\n    34028236692093846346337460743176816717523868309299484524452320\n    \"\"\"\n    if number == 0:\n        return 0\n\n    last_digit = number % 10\n    quotient = number // 10\n\n    if last_digit == 0:"
    },
    {
      "rank": 85,
      "score": 1.0,
      "candidate": "\"\"\"Question:\nWrite a function to convert the given binary number to its decimal equivalent.\nExample :\nInput : 101012\nOutput : 45\n\"\"\"\ndef binaryToDecimal(n):\n    return int(n, 2)\n    \nbinaryToDecimal(\"10101\")"
    },
    {
      "rank": 86,
      "score": 1.0,
      "candidate": "# O(n) time | O(1) space\ndef binaryToDecimal(binary):\n    decimal = 0\n    for bit in binary:\n        decimal = decimal * 2 + int(bit)\n    return decimal"
    },
    {
      "rank": 87,
      "score": 1.0,
      "candidate": "# O(n) time | O(1) space\ndef binary_to_decimal(number):\n    decimal = 0\n    for i in reversed(range(len(number))):\n        if number[i] == '1':\n            decimal += 2**(len(number) - i - 1)\n    return decimal"
    },
    {
      "rank": 88,
      "score": 1.0,
      "candidate": "# def binary_to_decimal(binary):\n#     return int(binary, 2)\n\n\n# def binary_to_decimal(binary):\n#     return int(binary[::-1], 2)\n\n\ndef binary_to_decimal(binary):\n    decimal_value = 0\n    for digit in binary:\n        decimal_value = decimal_value * 2 + int(digit)\n    return decimal_value\n\n\nif __name__ == \"__main__\":\n    binary_number = input(\"Enter the binary number: \")\n    print(binary_to_decimal(binary_number))"
    },
    {
      "rank": 89,
      "score": 1.0,
      "candidate": "def binary_to_decimal(n: str) -> int:\n    return int(n, 2)\n\n\nif __name__ == \"__main__\":\n    assert binary_to_decimal(\"10001\") == 17\n    assert binary_to_decimal(\"1111\") == 15\n    assert binary_to_decimal(\"0011\") == 3\n    assert binary_to_decimal(\"11111111\") == 255\n    assert binary_to_decimal(\"00000000\") == 0\n    assert binary_to_decimal(\"1\") == 1"
    },
    {
      "rank": 90,
      "score": 1.0,
      "candidate": "def convert_to_decimal(number):\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(1)\n    \"\"\"\n    decimal = 0\n    for index, bit in enumerate(number[::-1]):\n        if bit == \"1\":\n            decimal += 2 ** index\n    return decimal\n\n\nif __name__ == \"__main__\":\n    test_cases = [\n        (1010, 10),\n        (1101, 13),\n        (111111, 63),\n    ]\n\n    for number, expected_result in test_cases:\n        result = convert_to_decimal(number)\n        assert result == expected_result, result"
    },
    {
      "rank": 91,
      "score": 1.0,
      "candidate": "# O(n) time | O(n) space - where n is the length of the binary number\ndef binaryToDecimal(binary):\n    decimal = 0\n    for i in range(len(binary)):\n        decimal += 2**(len(binary) - i - 1) * int(binary[i])\n    return decimal\n\n\n# O(n) time | O(1) space\ndef binaryToDecimal(binary):\n    decimal = 0\n    for i in range(len(binary)):\n        decimal += 2**(len(binary) - i - 1) * int(binary[i])\n    return decimal"
    },
    {
      "rank": 92,
      "score": 1.0,
      "candidate": "from typing import List\n\n\ndef binary_to_decimal(binary_number: str) -> int:\n    \"\"\"\n    >>> binary_to_decimal(\"1010\")\n    10\n    >>> binary_to_decimal(\"1111\")\n    15\n    >>> binary_to_decimal(\"1101\")\n    13\n    \"\"\"\n    return int(binary_number, 2)\n\n\nif __name__ == \"__main__\":\n    from doctest import testmod\n\n    testmod()"
    },
    {
      "rank": 93,
      "score": 1.0,
      "candidate": "from typing import List\n\n\ndef binary_to_decimal(binary: str) -> int:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(1)\n    \"\"\"\n    decimal = 0\n    for index, digit in enumerate(reversed(binary)):\n        decimal += int(digit) * (2 ** index)\n    return decimal\n\n\ndef test():\n    \"\"\"run test cases\"\"\"\n    test_cases = (\n        (\"11010\", 22),\n        (\"1010\", 10),\n        (\"0011\", 3),\n        (\"1111\", 15),\n        (\"0000\", 0),\n        (\"111\", 7),\n        (\"101\", 5),\n        (\"110\", 6),\n    )\n\n    for arg, expected in test_cases:\n        assert binary_to_decimal(arg) == expected\n\n\nif __name__ == \"__main__\":\n    test()"
    },
    {
      "rank": 94,
      "score": 1.0,
      "candidate": "def binary_to_decimal(binary_number: str) -> int:\n    \"\"\"\n    >>> binary_to_decimal(\"1010\")\n    10\n    >>> binary_to_decimal(\"110001\")\n    41\n    >>> binary_to_decimal(\"011\")\n    3\n    >>> binary_to_decimal(\"101\")\n    5\n    >>> binary_to_decimal(\"10101010\")\n    134\n    >>> binary_to_decimal(\"101100101011\")\n    4226\n    >>> binary_to_decimal(\"0\")\n    0\n    >>> binary_to_decimal(\"1\")\n    1\n    >>> binary_to_decimal(\"2\")\n    Traceback (most recent call last):\n    ...\n    ValueError: Not a binary number\n    >>> binary_to_decimal(\"-1\")\n    Traceback (most recent call last):\n    ...\n    ValueError: Not a binary number\n    >>> binary_to_decimal(\"1001\")\n    Traceback (most recent call last):\n    ...\n    ValueError: Not a binary number\n    >>> binary_to_decimal(\"-11\")\n    Traceback (most recent call last):\n    ...\n    ValueError: Not a binary number\n    \"\"\"\n\n    if not binary_number or binary_number[0] not in \"01\":\n        raise ValueError(\"Not a binary number\")\n\n    decimal_number = 0\n    for bit in binary_number:\n        decimal_number = 2 * decimal_number + int(bit)\n    return decimal_number\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 95,
      "score": 1.0,
      "candidate": "# O(n) time | O(1) space\ndef binaryToDecimal(binary):\n    decimal = 0\n    exponent = 0\n    while binary != 0:\n        lastDigit = binary % 10\n        decimal += lastDigit * (2 ** exponent)\n        binary = binary // 10\n        exponent += 1\n    return decimal\n\n\n# O(n) time | O(1) space\ndef binaryToDecimal(binary):\n    return int(binary, 2)"
    },
    {
      "rank": 96,
      "score": 1.0,
      "candidate": "def binary_to_decimal(binary):\n    \"\"\"\n    :param: binary - Binary representation of a number\n    return decimal - Decimal representation of a number\n    \"\"\"\n    decimal = 0\n    for digit in binary:\n        decimal = decimal * 2 + int(digit)\n    return decimal\n\n\ndef test_function(test_case):\n    test_input, test_expected = test_case\n    test_actual = binary_to_decimal(test_input)\n    if test_actual == test_expected:\n        print(\"Pass\")\n    else:\n        print(\"Fail\")\n\n\ntest_function((\"1001001101\", 123))\ntest_function((\"100\", 4))\ntest_function((\"11111111\", 255))"
    },
    {
      "rank": 97,
      "score": 1.0,
      "candidate": "def binary_to_decimal(number: str) -> int:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(1)\n    \"\"\"\n    decimal = 0\n    for index, bit in enumerate(number[::-1]):\n        decimal += int(bit) * 2 ** index\n    return decimal\n\n\nif __name__ == \"__main__\":\n    assert binary_to_decimal(\"1010\") == 10"
    },
    {
      "rank": 98,
      "score": 1.0,
      "candidate": "def binaryToDecimal(binary):\n    # TODO: Write your code here\n    return int(binary, 2)\n\n\ndef main():\n    binary = input()\n    decimal = binaryToDecimal(binary)\n    print(decimal)\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 99,
      "score": 1.0,
      "candidate": "# def binaryToDecimal(number: int) -> int:\n#     if number < 0:\n#         return -1\n#     elif number == 0:\n#         return 0\n#     else:\n#         decimal = 0\n#         base = 1\n#         while number > 0:\n#             last_digit = number % 10\n#             decimal += last_digit * base\n#             base *= 2\n#             number = number // 10\n#         return decimal\n\n\ndef binaryToDecimal(number: int) -> int:\n    decimal = 0\n    base = 1\n    while number > 0:\n        last_digit = number % 10\n        decimal += last_digit * base\n        base *= 2\n        number = number // 10\n    return decimal\n\n\nif __name__ == \"__main__\":\n    assert binaryToDecimal(0) == 0\n    assert binaryToDecimal(1) == 1\n    assert binaryToDecimal(10) == 2\n    assert binaryToDecimal(100) == 4\n    assert binaryToDecimal(101) == 5\n    assert binaryToDecimal(110) == 6\n    assert binaryToDecimal(111) == 7\n    assert binaryToDecimal(1001) == 9\n    assert binaryToDecimal(1011) == 11\n    assert binaryToDecimal(1101) == 13\n    assert binaryToDecimal(1111) == 15\n    assert binaryToDecimal(10001) == 17\n    assert binaryToDecimal(10011) == 21\n    assert binaryToDecimal(10101) == 25\n    assert binaryToDecimal(10111) == 29\n    assert binaryToDecimal(11001) == 33\n    assert binaryToDecimal(11011) == 37\n    assert binaryToDecimal(11101) == 41\n    assert binaryToDecimal(11111) == 45\n    assert binaryToDecimal(100001)"
    },
    {
      "rank": 100,
      "score": 1.0,
      "candidate": "def binary_to_decimal(binary: str) -> int:\n    return int(binary, 2)\n\n\nif __name__ == \"__main__\":\n    assert binary_to_decimal(\"1010\") == 10\n    assert binary_to_decimal(\"1011\") == 11"
    }
  ]
}