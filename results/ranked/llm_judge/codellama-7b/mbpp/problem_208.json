{
  "timestamp": "2025-09-14T23:52:21.124212",
  "method": "improved_llm_judge",
  "judge_model": "codellama/CodeLlama-7b-Python-hf",
  "target_model": "codellama-7b",
  "dataset": "mbpp",
  "problem_number": 208,
  "total_candidates": 100,
  "results": [
    {
      "rank": 1,
      "score": 10.0,
      "candidate": "from typing import Tuple\n\n\ndef max_min_k(tup: Tuple[int, ...], k: int) -> Tuple[Tuple[int, ...], Tuple[int, ...]]:\n    \"\"\"Returns maximum and minimum k elements in a tuple.\n\n    Args:\n        tup (Tuple[int, ...]): input tuple\n        k (int): number of elements\n\n    Examples:\n        >>> assert max_min_k((1, 2, 3, 4, 5), 2) == ((5, 4), (1, 2))\n    \"\"\"\n    return (\n        tuple(sorted(tup, reverse=True)[:k]),\n        tuple(sorted(tup, reverse=False)[:k]),\n    )\n\n\nif __name__ == \"__main__\":\n    print(max_min_k((1, 2, 3, 4, 5), 2))"
    },
    {
      "rank": 2,
      "score": 10.0,
      "candidate": "def get_k_elements(tup, k):\n    return sorted(tup)[:k], sorted(tup)[-k:]\n\nprint(get_k_elements((1, 2, 3, 4, 5, 6, 7, 8, 9, 10), 3))\nprint(get_k_elements((1, 2, 3, 4, 5, 6, 7, 8, 9, 10), 5))"
    },
    {
      "rank": 3,
      "score": 10.0,
      "candidate": "from typing import Tuple\n\n\ndef max_min_k_elements(arr: Tuple[int], k: int) -> Tuple[int, int]:\n    \"\"\"\n    >>> max_min_k_elements((1, 2, 3, 4, 5, 6, 7, 8, 9, 10), 3)\n    (8, 5)\n    \"\"\"\n    return max(arr[:k]), min(arr[-k:])\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 4,
      "score": 10.0,
      "candidate": "def max_min(tup, k):\n    return sorted(tup)[-k:] + sorted(tup)[:k]\n\n\nif __name__ == \"__main__\":\n    print(max_min((2, 4, 6, 8, 3, 5, 7, 9, 1, 10), 5))"
    },
    {
      "rank": 5,
      "score": 10.0,
      "candidate": "from typing import List\n\n\ndef maximum_minimum(tup: tuple, k: int) -> List[int]:\n    \"\"\"Returns maximum and minimum k elements in the given tuple.\n\n    Args:\n        tup (tuple): given tuple\n        k (int): k elements\n\n    Examples:\n        >>> assert maximum_minimum((1, 2, 3, 4, 5), 2) == [4, 1]\n    \"\"\"\n    return sorted(tup)[-k:] + sorted(tup)[:k]\n\n\nif __name__ == \"__main__\":\n    print(maximum_minimum((1, 2, 3, 4, 5), 2))"
    },
    {
      "rank": 6,
      "score": 10.0,
      "candidate": "from typing import Tuple\n\n\ndef extract_max_min_k_elements(input_tuple: Tuple[int], k: int) -> Tuple[int, int]:\n    \"\"\"Returns maximum and minimum k elements in the given tuple.\n\n    Args:\n        input_tuple (Tuple[int]): given tuple\n        k (int): k elements\n\n    Examples:\n        >>> assert extract_max_min_k_elements((1, 2, 3, 4, 5), 2) == (5, 1)\n    \"\"\"\n    return tuple(sorted(input_tuple)[k - 1 : k + 1])\n\n\nif __name__ == \"__main__\":\n    print(extract_max_min_k_elements((1, 2, 3, 4, 5), 2))"
    },
    {
      "rank": 7,
      "score": 10.0,
      "candidate": "from typing import Tuple\n\n\ndef max_and_min_k_elements(nums: Tuple[int], k: int) -> Tuple[int, int]:\n    \"\"\"Return maximum and minimum k elements in the given tuple.\n\n    Args:\n        nums (Tuple[int]): list of numbers\n        k (int): number of elements to find max and min from\n\n    Examples:\n        >>> assert max_and_min_k_elements((1, 2, 3, 4, 5), 2) == (4, 1)\n    \"\"\"\n    if k > len(nums):\n        raise ValueError(\"K cannot be greater than the length of the tuple\")\n\n    sorted_nums = sorted(nums)\n    return sorted_nums[-k], sorted_nums[k - 1]\n\n\nif __name__ == \"__main__\":\n    print(max_and_min_k_elements((1, 2, 3, 4, 5), 2))"
    },
    {
      "rank": 8,
      "score": 10.0,
      "candidate": "from typing import List\n\n\ndef maximum_and_minimum_k(array: List[int], k: int) -> List[int]:\n    \"\"\"\n    This function uses a greedy approach to solve the problem.\n    The idea is to pick the maximum and minimum from the array\n    and compare them with the maximum and minimum of the new\n    array.\n    \"\"\"\n\n    if k > len(array):\n        raise ValueError(\"k must be less than the length of the array\")\n\n    maximum_k = array[:k]\n    minimum_k = array[:k]\n\n    for i in range(k, len(array)):\n        if array[i] > maximum_k[-1]:\n            maximum_k.append(array[i])\n\n        if array[i] < minimum_k[-1]:\n            minimum_k.append(array[i])\n\n    return [max(maximum_k), min(minimum_k)]\n\n\nif __name__ == \"__main__\":\n    print(maximum_and_minimum_k([2, 1, 5, 6, 3, 7, 4, 9, 8], 4))"
    },
    {
      "rank": 9,
      "score": 10.0,
      "candidate": "from typing import Tuple\n\n\ndef max_min_k(test_tuple: Tuple, k: int) -> Tuple[int, int]:\n    \"\"\"Return maximum and minimum k elements from a tuple.\n\n    Args:\n        test_tuple (Tuple): input tuple\n        k (int): k elements\n\n    Examples:\n        >>> assert max_min_k((1, 2, 3, 4, 5, 6, 7, 8, 9, 10), 5) == (10, 1)\n    \"\"\"\n    return tuple(sorted(test_tuple)[k - 1 : k + 1])\n\n\nif __name__ == \"__main__\":\n    print(max_min_k((1, 2, 3, 4, 5, 6, 7, 8, 9, 10), 5))"
    },
    {
      "rank": 10,
      "score": 10.0,
      "candidate": "from typing import Tuple\n\n\ndef maximum_k_elements(input_list: Tuple[int], k: int) -> Tuple[int]:\n    \"\"\"\n    >>> maximum_k_elements((1, 2, 3, 4, 5, 6, 7, 8), 2)\n    (8, 7)\n    >>> maximum_k_elements((1, 2, 3, 4, 5, 6, 7, 8, 9), 3)\n    (9, 8, 7)\n    >>> maximum_k_elements((1, 2, 3, 4, 5, 6, 7, 8, 9), 4)\n    (9, 8, 7, 6)\n    >>> maximum_k_elements((1, 2, 3, 4, 5, 6, 7, 8, 9, 10), 5)\n    (10, 9, 8, 7, 6)\n    >>> maximum_k_elements((1, 2, 3, 4, 5, 6, 7, 8, 9, 10), 6)\n    (10, 9, 8, 7, 6, 5)\n    \"\"\"\n    return sorted(input_list)[-k:]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 11,
      "score": 10.0,
      "candidate": "from typing import Tuple\n\n\ndef max_min_elements(numbers: Tuple[int, ...], k: int) -> Tuple[int, int]:\n    \"\"\"Returns the maximum and minimum k elements in the given tuple.\n\n    Args:\n        numbers (Tuple[int, ...]): The tuple of numbers.\n        k (int): The k elements.\n\n    Examples:\n        >>> assert max_min_elements((1, 2, 3, 4, 5), 2) == (5, 1)\n        >>> assert max_min_elements((5, 4, 3, 2, 1), 2) == (5, 3)\n        >>> assert max_min_elements((1, 2, 3, 4, 5, 6, 7, 8, 9), 3) == (9, 3)\n        >>> assert max_min_elements((1, 2, 3, 4, 5, 6, 7, 8, 9), 4) == (9, 4)\n    \"\"\"\n    return max(numbers[:k]), min(numbers[:k])\n\n\nif __name__ == \"__main__\":\n    print(max_min_elements((1, 2, 3, 4, 5, 6, 7, 8, 9), 3))"
    },
    {
      "rank": 12,
      "score": 10.0,
      "candidate": "from typing import Tuple\n\n\ndef maximum_minimum(tup: Tuple, k: int) -> Tuple:\n    \"\"\"Returns maximum and minimum k elements in the given tuple.\n\n    Args:\n        tup (Tuple): given tuple\n        k (int): number of elements\n\n    Examples:\n        >>> assert maximum_minimum((1, 2, 3, 4, 5, 6, 7, 8, 9), 2) == (9, 1)\n        >>> assert maximum_minimum((1, 2, 3, 4, 5, 6, 7, 8, 9), 3) == (9, 1, 2)\n    \"\"\"\n    return sorted(tup)[-k:] + sorted(tup)[:k]\n\n\nif __name__ == \"__main__\":\n    print(maximum_minimum((1, 2, 3, 4, 5, 6, 7, 8, 9), 2))"
    },
    {
      "rank": 13,
      "score": 10.0,
      "candidate": "from typing import Tuple\n\n\ndef maximum_minimum(test: Tuple, k: int) -> Tuple:\n    \"\"\"\n    Get maximum and minimum k elements from given tuple.\n    >>> maximum_minimum((1, 2, 3, 4, 5, 6, 7, 8, 9), 3)\n    (9, 1)\n    >>> maximum_minimum((1, 2, 3, 4, 5, 6, 7, 8, 9), 5)\n    (9, 1)\n    >>> maximum_minimum((1, 2, 3, 4, 5, 6, 7, 8, 9), 8)\n    (9, 1)\n    >>> maximum_minimum((1, 2, 3, 4, 5, 6, 7, 8, 9), 10)\n    (9, 1)\n    >>> maximum_minimum((1, 2, 3, 4, 5, 6, 7, 8, 9), 1)\n    (9, 1)\n    >>> maximum_minimum((1, 2, 3, 4, 5, 6, 7, 8, 9), 0)\n    (9, 1)\n    >>> maximum_minimum((), 3)\n    (None, None)\n    \"\"\"\n    if len(test) < k:\n        return (None, None)\n\n    return (\n        max(test[:k]),\n        min(test[:k]),\n    )\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 14,
      "score": 10.0,
      "candidate": "from typing import Tuple\n\n\ndef extract_k_elements(tup: Tuple, k: int) -> Tuple:\n    \"\"\"Returns maximum and minimum k elements in the given tuple.\n\n    Args:\n        tup (Tuple): The given tuple.\n        k (int): The number of elements to extract.\n\n    Examples:\n        >>> assert extract_k_elements((1, 2, 3, 4, 5), 2) == (5, 1)\n    \"\"\"\n    return tuple(sorted(tup, reverse=True)[:k])\n\n\nif __name__ == \"__main__\":\n    print(extract_k_elements((1, 2, 3, 4, 5), 2))"
    },
    {
      "rank": 15,
      "score": 10.0,
      "candidate": "from typing import Tuple\n\n\ndef maximum_minimum(tup: Tuple, k: int) -> Tuple:\n    \"\"\"Returns the maximum and minimum k elements in the given tuple.\n\n    Args:\n        tup (Tuple): The tuple to find maximum and minimum k elements.\n        k (int): The number of elements to return.\n\n    Examples:\n        >>> assert maximum_minimum((1, 2, 3, 4, 5), 2) == (5, 1)\n        >>> assert maximum_minimum((1, 2, 3, 4, 5), 4) == (4, 1)\n    \"\"\"\n    return max(tup[:k]), min(tup[:k])\n\n\nif __name__ == \"__main__\":\n    print(maximum_minimum((1, 2, 3, 4, 5), 2))"
    },
    {
      "rank": 16,
      "score": 10.0,
      "candidate": "from typing import Tuple\n\n\ndef get_min_max_k(arr: Tuple, k: int) -> Tuple[Tuple, Tuple]:\n    \"\"\"Returns the maximum and minimum k elements in the given tuple.\n\n    Args:\n        arr (Tuple): given tuple\n        k (int): k elements\n\n    Returns:\n        Tuple[Tuple, Tuple]: maximum and minimum k elements\n    \"\"\"\n    min_values = []\n    max_values = []\n\n    for i in range(k):\n        min_values.append(min(arr))\n        max_values.append(max(arr))\n        arr = tuple(i for i in arr if i != min(arr) and i != max(arr))\n    return tuple(min_values), tuple(max_values)\n\n\nif __name__ == \"__main__\":\n    print(get_min_max_k((1, 2, 3, 4, 5, 6, 7, 8, 9, 10), 5))"
    },
    {
      "rank": 17,
      "score": 10.0,
      "candidate": "from typing import Tuple\n\n\ndef maximum_and_minimum(arr: Tuple[int, ...]) -> Tuple[int, int]:\n    \"\"\"Return maximum and minimum k elements from given tuple.\n\n    >>> maximum_and_minimum((1, 2, 3, 4, 5))\n    (5, 1)\n    \"\"\"\n    return max(arr), min(arr)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 18,
      "score": 10.0,
      "candidate": "from typing import Tuple\n\n\ndef find_maximum_minimum(data: Tuple, k: int) -> Tuple[int, int]:\n    \"\"\"Returns the maximum and minimum k elements in the given tuple.\n\n    Examples:\n        >>> assert find_maximum_minimum((1, 2, 3, 4, 5), 2) == (5, 1)\n        >>> assert find_maximum_minimum((1, 2, 3, 4, 5), 3) == (4, 1)\n        >>> assert find_maximum_minimum((1, 2, 3, 4, 5), 4) == (3, 1)\n        >>> assert find_maximum_minimum((1, 2, 3, 4, 5), 5) == (2, 1)\n        >>> assert find_maximum_minimum((1, 2, 3, 4, 5), 6) == (1, 1)\n        >>> assert find_maximum_minimum((1, 2, 3, 4, 5), 7) == (1, 1)\n    \"\"\"\n    return _find_maximum_minimum_heap(data, k)\n\n\ndef _find_maximum_minimum_heap(data: Tuple, k: int) -> Tuple[int, int]:\n    \"\"\"Returns the maximum and minimum k elements in the given tuple.\n\n    Examples:\n        >>> assert _find_maximum_minimum_heap((1, 2, 3, 4, 5), 2) == (5, 1)\n        >>> assert _find_maximum_minimum_heap((1, 2, 3, 4, 5), 3) == (4, 1)\n        >>> assert _find_maximum_minimum_heap((1, 2, 3, 4, 5), 4) == (3, 1)\n        >>> assert _find_maximum_minimum_heap((1, 2, 3, 4, 5), 5) == (2, 1)\n        >>>"
    },
    {
      "rank": 19,
      "score": 10.0,
      "candidate": "from typing import Tuple\n\n\ndef maximum_minimum_k(tup: Tuple, k: int) -> Tuple:\n    \"\"\"\n    >>> maximum_minimum_k((), 2)\n    ()\n    >>> maximum_minimum_k((1, 2, 3, 4, 5), 3)\n    (4, 1)\n    >>> maximum_minimum_k((4, 5, 1, 2, 3), 2)\n    (4, 1)\n    >>> maximum_minimum_k((5, 4, 3, 2, 1), 1)\n    (5, 1)\n    >>> maximum_minimum_k((1, 2, 3, 4, 5), 0)\n    ()\n    \"\"\"\n    return (\n        ()\n        if k == 0 or len(tup) == 0\n        else (\n            max(tup[:k]),\n            min(tup[:k]),\n        )\n    )\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 20,
      "score": 10.0,
      "candidate": "def maximum_minimum(num_tuple, k):\n    return max(num_tuple[:k]), min(num_tuple[-k:])\n\n\ndef main():\n    print(maximum_minimum((1, 2, 3, 4, 5, 6, 7, 8, 9, 10), 3))\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 21,
      "score": 10.0,
      "candidate": "from typing import Tuple\n\n\ndef maximum_minimum(t: Tuple[int, ...], k: int) -> Tuple[int, int]:\n    \"\"\"Returns maximum and minimum of first k elements in the tuple.\n\n    Args:\n        t: input tuple\n        k: number of elements to consider\n\n    Examples:\n        >>> assert maximum_minimum((1, 2, 3, 4, 5), 3) == (4, 1)\n    \"\"\"\n    return max(t[:k]), min(t[:k])\n\n\nif __name__ == \"__main__\":\n    print(maximum_minimum((1, 2, 3, 4, 5), 3))"
    },
    {
      "rank": 22,
      "score": 9.0,
      "candidate": "from typing import Tuple\n\n\ndef max_min_k(arr: Tuple, k: int) -> Tuple[Tuple, Tuple]:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(1)\n    \"\"\"\n\n    max_arr, min_arr = [], []\n\n    for element in arr:\n        if len(max_arr) < k:\n            max_arr.append(element)\n        elif element > max_arr[0]:\n            max_arr[0] = element\n\n        if len(min_arr) < k:\n            min_arr.append(element)\n        elif element < min_arr[0]:\n            min_arr[0] = element\n\n    return max_arr, min_arr\n\n\nif __name__ == \"__main__\":\n    print(max_min_k((1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16), 2))"
    },
    {
      "rank": 23,
      "score": 9.0,
      "candidate": "def get_max_min(tup, k):\n    return sorted(tup)[:k], sorted(tup)[-k:]\n\n\ndef main():\n    print(get_max_min((1, 2, 3, 4, 5, 6, 7, 8), 3))\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 24,
      "score": 8.0,
      "candidate": "from typing import Tuple\n\n\ndef maximum_minimum(a: Tuple[int], k: int) -> Tuple[int, int]:\n    \"\"\"Returns maximum and minimum of k elements in a tuple.\n\n    Args:\n        a: Tuple[int]\n        k: int\n\n    Returns:\n        Tuple[int, int]\n    \"\"\"\n\n    return max(a[:k]), min(a[:k])\n\n\nif __name__ == \"__main__\":\n    print(maximum_minimum((1, 2, 3, 4, 5, 6, 7, 8, 9), 3))"
    },
    {
      "rank": 25,
      "score": 8.0,
      "candidate": "def max_min_k(tup: tuple, k: int) -> tuple:\n    \"\"\"\n    >>> max_min_k((1, 2, 3, 4, 5), 2)\n    (5, 1)\n    \"\"\"\n    return max(tup[:k]), min(tup[:k])\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 26,
      "score": 8.0,
      "candidate": "def max_min_k_elements(tup, k):\n    if k > len(tup):\n        return None\n    return sorted(tup)[:k], sorted(tup, reverse=True)[:k]\n\n\nprint(max_min_k_elements((1, 3, 5, 7, 9, 2, 4, 6, 8, 0), 3))"
    },
    {
      "rank": 27,
      "score": 8.0,
      "candidate": "from typing import List\n\n\ndef maximum_minimum(k: int, nums: List[int]) -> List[int]:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(1)\n    \"\"\"\n    if k > len(nums):\n        return [-1]\n\n    max_k = [float(\"-inf\")] * k\n    min_k = [float(\"inf\")] * k\n\n    for i in range(k):\n        max_k[i] = nums[i]\n        min_k[i] = nums[i]\n\n    for i in range(k, len(nums)):\n        for j in range(k):\n            if max_k[j] < nums[i]:\n                max_k[j] = nums[i]\n                break\n\n        for j in range(k):\n            if min_k[j] > nums[i]:\n                min_k[j] = nums[i]\n                break\n\n    return [*max_k, *min_k]\n\n\nif __name__ == \"__main__\":\n    print(maximum_minimum(3, [1, 2, 3, 4, 5]))\n    print(maximum_minimum(2, [1, 2, 3, 4, 5]))\n    print(maximum_minimum(5, [1, 2, 3, 4, 5]))"
    },
    {
      "rank": 28,
      "score": 8.0,
      "candidate": "from typing import Tuple\n\n\ndef find_k_max_min(arr: Tuple, k: int) -> Tuple[Tuple, Tuple]:\n    \"\"\"\n    Time Complexity: O(nlogk)\n    \"\"\"\n\n    def partition(arr, low, high, pivot_index):\n        pivot = arr[pivot_index]\n        # 1. Move pivot to end\n        arr[pivot_index], arr[high] = arr[high], arr[pivot_index]\n\n        # 2. Keep track of final position of pivot\n        final_pivot_index = high\n\n        # 3. Start moving from left to right until we encounter a larger element\n        i = low\n        while i < high:\n            if arr[i] < pivot:\n                # 4. Swap left element with current element\n                arr[i], arr[low] = arr[low], arr[i]\n                # 5. Increment low and current index\n                i += 1\n                low += 1\n            else:\n                # 6. Keep looping till we find a smaller element\n                pass\n\n        # 7. Move pivot to its final place\n        arr[final_pivot_index], arr[low] = arr[low], arr[final_pivot_index]\n\n        # 8. Return the final position of pivot\n        return low\n\n    def select_kth_smallest(arr, k):\n        # 1. Base Case: If k is 1, return the minimum element\n        if k == 1:\n            return min(arr)\n\n        # 2. Select a random pivot\n        pivot_index = k - 1\n\n        # 3. Partition the given array around the random pivot\n        pivot_index = partition(arr, 0, len(arr) - 1, pivot_index)\n\n        # 4. If the pivot_index is same as k, return pivot_index\n        if pivot_index + 1 == k:\n            return arr[pivot_index]\n        elif pivot_index + 1 < k:\n            # 5. If pivot_index is smaller than k, find in the right subarray\n            return select_kth"
    },
    {
      "rank": 29,
      "score": 8.0,
      "candidate": "from typing import List\n\n\ndef extract_k_elements(tup: tuple, k: int) -> List[int]:\n    \"\"\"Extracts maximum and minimum k elements from a given tuple.\n\n    Args:\n        tup (tuple): the given tuple\n        k (int): the number of elements to extract\n\n    Examples:\n        >>> extract_k_elements((1, 2, 3, 4, 5), 3)\n        [3, 1]\n        >>> extract_k_elements((1, 2, 3, 4, 5), 2)\n        [4, 2]\n    \"\"\"\n    if k > len(tup):\n        raise ValueError(\"k must be <= len(tup)\")\n\n    max_k_elements = []\n    min_k_elements = []\n\n    for i in tup:\n        if len(max_k_elements) < k:\n            max_k_elements.append(i)\n        elif i > min(max_k_elements):\n            max_k_elements.pop(max_k_elements.index(min(max_k_elements)))\n            max_k_elements.append(i)\n\n        if len(min_k_elements) < k:\n            min_k_elements.append(i)\n        elif i < max(min_k_elements):\n            min_k_elements.pop(min_k_elements.index(max(min_k_elements)))\n            min_k_elements.append(i)\n\n    return [max(max_k_elements), min(min_k_elements)]\n\n\ndef main():\n    tup = (1, 2, 3, 4, 5)\n    k = 3\n    print(extract_k_elements(tup, k))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 30,
      "score": 8.0,
      "candidate": "from typing import Tuple\n\n\ndef max_min_k_elements(tup: Tuple, k: int) -> Tuple:\n    \"\"\"Get maximum and minimum k elements from a tuple.\n\n    Args:\n        tup (Tuple): input tuple\n        k (int): number of elements to get\n\n    Returns:\n        Tuple: tuple containing maximum and minimum k elements\n    \"\"\"\n    if k > len(tup):\n        raise ValueError(\"k must be less than or equal to length of tup\")\n\n    return max(tup[:k]), min(tup[:k])\n\n\nif __name__ == \"__main__\":\n    print(max_min_k_elements((1, 2, 3, 4, 5), 3))"
    },
    {
      "rank": 31,
      "score": 8.0,
      "candidate": "from typing import Tuple\n\n\ndef max_and_min_k(a: Tuple, k: int) -> Tuple[Tuple, Tuple]:\n    \"\"\"Returns maximum and minimum k elements in the given tuple.\n\n    Examples:\n        >>> assert max_and_min_k((1, 2, 3, 4, 5, 6, 7), 3) == ((7, 6, 5), (1, 2, 3))\n        >>> assert max_and_min_k((1, 2, 3, 4, 5, 6, 7), 2) == ((7, 6), (1, 2))\n        >>> assert max_and_min_k((1, 2, 3, 4, 5, 6, 7), 1) == ((7,), (1,))\n    \"\"\"\n    return (tuple(sorted(a)[-k:]), tuple(sorted(a)[:k]))\n\n\nif __name__ == \"__main__\":\n    print(max_and_min_k((1, 2, 3, 4, 5, 6, 7), 3))"
    },
    {
      "rank": 32,
      "score": 8.0,
      "candidate": "from typing import Tuple\n\n\ndef maximum_minimum_k_elements(number_tuple: Tuple[int, ...], k: int) -> Tuple[int, int]:\n    \"\"\"Extracts maximum and minimum k elements from a given tuple.\n\n    Args:\n        number_tuple (Tuple[int, ...]): input tuple of numbers.\n        k (int): number of elements to extract.\n\n    Examples:\n        >>> assert maximum_minimum_k_elements((1, 2, 3, 4, 5, 6, 7, 8, 9), 3) == (8, 4)\n    \"\"\"\n    _max, _min = -float(\"inf\"), float(\"inf\")\n\n    for index, number in enumerate(number_tuple):\n        if index < k:\n            _max, _min = max(_max, number), min(_min, number)\n            continue\n\n        if index == k:\n            _max, _min = max(_max, number), min(_min, number)\n            continue\n\n        if number_tuple.index(number) - k > 0:\n            _max, _min = max(_max, number), min(_min, number)\n\n        if number_tuple.index(number) - k <= 0:\n            _max, _min = max(_max, number), min(_min, number)\n\n    return _max, _min\n\n\nif __name__ == \"__main__\":\n    print(maximum_minimum_k_elements((1, 2, 3, 4, 5, 6, 7, 8, 9), 3))"
    },
    {
      "rank": 33,
      "score": 8.0,
      "candidate": "from typing import Tuple\n\n\ndef get_max_min_k_elements(data: Tuple, k: int) -> Tuple:\n    \"\"\"Get maximum and minimum k elements from tuple.\n\n    Args:\n        data (Tuple): input tuple\n        k (int): number of elements to extract\n\n    Examples:\n        >>> assert get_max_min_k_elements((\"a\", \"b\", \"c\", \"d\", \"e\"), 3) == (\"c\", \"a\")\n        >>> assert get_max_min_k_elements((\"a\", \"b\", \"c\", \"d\", \"e\"), 2) == (\"c\", \"b\")\n        >>> assert get_max_min_k_elements((\"a\", \"b\", \"c\", \"d\", \"e\"), 1) == (\"c\", \"a\")\n    \"\"\"\n    return (\n        sorted(data)[len(data) - 1 - k],\n        sorted(data)[k - 1],\n    )\n\n\nif __name__ == \"__main__\":\n    print(get_max_min_k_elements((\"a\", \"b\", \"c\", \"d\", \"e\"), 3))"
    },
    {
      "rank": 34,
      "score": 8.0,
      "candidate": "from collections import namedtuple\n\n\ndef get_max_min(tup, k):\n    \"\"\"\n    >>> get_max_min((1, 2, 3, 4, 5, 6), 3)\n    (4, 1)\n    \"\"\"\n    MaxMin = namedtuple(\"MaxMin\", [\"max\", \"min\"])\n    return MaxMin(max(tup[:k]), min(tup[:k]))\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 35,
      "score": 8.0,
      "candidate": "from typing import Tuple\n\n\ndef maximum_minimum(test: Tuple[int, ...], k: int) -> Tuple[Tuple[int, ...], Tuple[int, ...]]:\n    \"\"\"Return maximum and minimum k elements from tuple.\"\"\"\n    if k > len(test):\n        return ()\n\n    maximum = tuple(sorted(test, reverse=True)[:k])\n    minimum = tuple(sorted(test, reverse=False)[:k])\n\n    return maximum, minimum\n\n\nif __name__ == \"__main__\":\n    print(maximum_minimum((1, 2, 3, 4, 5, 6, 7, 8, 9), 3))\n    print(maximum_minimum((1, 2, 3, 4, 5, 6, 7, 8, 9), 10))\n    print(maximum_minimum((1, 2, 3, 4, 5, 6, 7, 8, 9), 0))"
    },
    {
      "rank": 36,
      "score": 8.0,
      "candidate": "from typing import List\n\n\ndef get_max_k_min_k_elements(k: int, t: List[int]) -> List[int]:\n    \"\"\"\n    Time Complexity: O(n*log(k))\n    \"\"\"\n    if k <= 0 or not t:\n        return []\n\n    t.sort()\n\n    return [t[i] for i in range(k)] + [t[-i] for i in range(1, k + 1)]\n\n\nif __name__ == \"__main__\":\n    assert get_max_k_min_k_elements(3, [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [9, 8, 7, 6, 5, 4, 3, 2, 1, 10]"
    },
    {
      "rank": 37,
      "score": 8.0,
      "candidate": "from heapq import nlargest, nsmallest\n\ndef max_k_elements(nums, k):\n    return nlargest(k, nums)\n\n\ndef min_k_elements(nums, k):\n    return nsmallest(k, nums)\n\n\nif __name__ == \"__main__\":\n    print(max_k_elements((1, 2, 3, 4, 5), 3))\n    print(min_k_elements((1, 2, 3, 4, 5), 3))"
    },
    {
      "rank": 38,
      "score": 8.0,
      "candidate": "from typing import List, Tuple\n\n\ndef get_max_and_min(input_data: Tuple, k: int) -> List[int]:\n    \"\"\"Get max and min k elements from the tuple.\n\n    Args:\n        input_data (Tuple): input data\n        k (int): number of elements to extract\n\n    Returns:\n        List[int]: max and min k elements\n    \"\"\"\n    if k >= len(input_data):\n        return [max(input_data), min(input_data)]\n\n    return [max(input_data[:k]), min(input_data[-k:])]\n\n\nif __name__ == \"__main__\":\n    print(get_max_and_min((1, 2, 3, 4, 5, 6, 7, 8, 9), 3))"
    },
    {
      "rank": 39,
      "score": 8.0,
      "candidate": "from typing import Tuple\n\n\ndef maximum_minimum(k: int, tup: Tuple) -> Tuple[tuple, tuple]:\n    \"\"\"Returns maximum and minimum k elements in the given tuple.\n\n    Args:\n        k (int): the number of elements to extract\n        tup (Tuple): the tuple to extract elements from\n\n    Returns:\n        Tuple[tuple, tuple]: the maximum and minimum k elements in the given tuple\n    \"\"\"\n    # Check if k is in range of tuple\n    if len(tup) < k:\n        raise ValueError(\"k must be less than or equal to the length of tup\")\n\n    # Check if k is negative\n    if k < 0:\n        raise ValueError(\"k must be a non-negative integer\")\n\n    # Sort the tuple\n    sorted_tup = sorted(tup)\n\n    # Return maximum and minimum k elements\n    return (sorted_tup[-k:], sorted_tup[:k])\n\n\nif __name__ == \"__main__\":\n    print(maximum_minimum(2, (1, 2, 3, 4, 5, 6, 7, 8, 9, 10)))"
    },
    {
      "rank": 40,
      "score": 8.0,
      "candidate": "from typing import Tuple\n\n\ndef max_min_k_elements(tup: Tuple, k: int) -> Tuple[int, int]:\n    \"\"\"Returns the maximum and minimum k elements in the given tuple.\n\n    Args:\n        tup (Tuple): Given tuple.\n        k (int): Number of elements.\n\n    Returns:\n        Tuple[int, int]: maximum and minimum k elements.\n    \"\"\"\n    if len(tup) < k:\n        raise ValueError(\"k must be less than or equal to the length of tup.\")\n\n    return max(tup[:k]), min(tup[:k])\n\n\nif __name__ == \"__main__\":\n    print(max_min_k_elements((10, 2, 3, 4, 5, 6, 7, 8, 9), 3))"
    },
    {
      "rank": 41,
      "score": 8.0,
      "candidate": "from typing import Tuple\n\n\ndef maximum_and_minimum(numbers: Tuple[int, ...], k: int) -> Tuple[int, ...]:\n    \"\"\"Returns maximum and minimum k elements in the given tuple.\n\n    Examples:\n        >>> assert maximum_and_minimum((1, 2, 3, 4, 5, 6, 7, 8, 9, 10), 3) == (10, 3, 6, 7, 9)\n    \"\"\"\n    return tuple(\n        sorted(numbers)[i]\n        for i in (slice(None, k), slice(-k, None))\n    )\n\n\nif __name__ == \"__main__\":\n    print(maximum_and_minimum((1, 2, 3, 4, 5, 6, 7, 8, 9, 10), 3))"
    },
    {
      "rank": 42,
      "score": 8.0,
      "candidate": "from typing import List\n\n\ndef maximum_k_elements(data: tuple, k: int) -> List[int]:\n    \"\"\"\n    Time Complexity: O(nlogk)\n    \"\"\"\n    data = list(data)\n    data.sort()\n    return data[-k:]\n\n\ndef minimum_k_elements(data: tuple, k: int) -> List[int]:\n    \"\"\"\n    Time Complexity: O(nlogk)\n    \"\"\"\n    data = list(data)\n    data.sort()\n    return data[:k]\n\n\nif __name__ == \"__main__\":\n    assert maximum_k_elements((1, 2, 3, 4, 5, 6, 7), 3) == [7, 6, 5]\n    assert minimum_k_elements((1, 2, 3, 4, 5, 6, 7), 3) == [1, 2, 3]"
    },
    {
      "rank": 43,
      "score": 8.0,
      "candidate": "def max_min_k(tup, k):\n    return (max(tup[:k]), min(tup[:k]))\n\n\nif __name__ == \"__main__\":\n    print(max_min_k((5, 1, 6, 1, 2, 3, 8, 4), 3))"
    },
    {
      "rank": 44,
      "score": 8.0,
      "candidate": "from typing import List\n\n\ndef maximum_and_minimum(elements: List[int], k: int) -> List[int]:\n    \"\"\"\n    O(nlogn)\n    O(k)\n    \"\"\"\n    elements.sort()\n    return elements[:k] + elements[-k:]\n\n\nif __name__ == \"__main__\":\n    assert maximum_and_minimum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3) == [1, 2, 3, 4, 5, 6, 9, 8, 7, 10]"
    },
    {
      "rank": 45,
      "score": 8.0,
      "candidate": "def get_max_min_k(tup, k):\n    min_tup = []\n    max_tup = []\n    for num in tup:\n        if len(min_tup) < k:\n            min_tup.append(num)\n        elif num < min(min_tup):\n            min_tup.pop(min_tup.index(min(min_tup)))\n            min_tup.append(num)\n\n        if len(max_tup) < k:\n            max_tup.append(num)\n        elif num > max(max_tup):\n            max_tup.pop(max_tup.index(max(max_tup)))\n            max_tup.append(num)\n\n    return max_tup, min_tup\n\n\nif __name__ == \"__main__\":\n    print(get_max_min_k((2, 4, 9, 7, 1, 8, 5, 6, 3), 3))\n    print(get_max_min_k((2, 4, 9, 7, 1, 8, 5, 6, 3), 1))"
    },
    {
      "rank": 46,
      "score": 8.0,
      "candidate": "from typing import Tuple\n\n\ndef max_min(tup: Tuple, k: int) -> Tuple[Tuple, Tuple]:\n    \"\"\"Return maximum and minimum k elements from a tuple.\n\n    Args:\n        tup (Tuple): Input tuple.\n        k (int): Number of elements to return.\n\n    Examples:\n        >>> max_min((1, 2, 3, 4, 5), 2)\n        ((5, 4), (1, 2))\n\n        >>> max_min((1, 2, 3, 4, 5), 3)\n        ((5, 4, 3), (1, 2, 3))\n\n        >>> max_min((1, 2, 3, 4, 5), 1)\n        ((5,), (1,))\n\n    \"\"\"\n    return (\n        tuple(sorted(tup, reverse=True)[:k]),\n        tuple(sorted(tup)[:k]),\n    )\n\n\nif __name__ == \"__main__\":\n    print(max_min((1, 2, 3, 4, 5), 2))\n    print(max_min((1, 2, 3, 4, 5), 3))\n    print(max_min((1, 2, 3, 4, 5), 1))"
    },
    {
      "rank": 47,
      "score": 8.0,
      "candidate": "def max_min(tup, k):\n    return (max(tup[:k]), min(tup[:k]))\n\n\nif __name__ == \"__main__\":\n    print(max_min((1, 2, 3, 4, 5, 6, 7, 8, 9, 10), 3))"
    },
    {
      "rank": 48,
      "score": 8.0,
      "candidate": "from typing import Tuple\n\n\ndef maximum_k_elements(numbers: Tuple[int], k: int) -> Tuple[int, ...]:\n    \"\"\"Get maximum k elements from a tuple.\n\n    Args:\n        numbers (Tuple[int]): input tuple\n        k (int): k elements\n\n    Returns:\n        Tuple[int, ...]: maximum k elements\n    \"\"\"\n    return tuple(sorted(numbers)[-k:])\n\n\ndef minimum_k_elements(numbers: Tuple[int], k: int) -> Tuple[int, ...]:\n    \"\"\"Get minimum k elements from a tuple.\n\n    Args:\n        numbers (Tuple[int]): input tuple\n        k (int): k elements\n\n    Returns:\n        Tuple[int, ...]: minimum k elements\n    \"\"\"\n    return tuple(sorted(numbers)[:k])\n\n\nif __name__ == \"__main__\":\n    assert maximum_k_elements((1, 2, 3, 4, 5, 6, 7, 8), 3) == (8, 7, 6)\n    assert minimum_k_elements((1, 2, 3, 4, 5, 6, 7, 8), 3) == (1, 2, 3)"
    },
    {
      "rank": 49,
      "score": 1.0,
      "candidate": "from typing import Tuple\n\n\ndef max_min_k(nums: Tuple, k: int) -> Tuple:\n    \"\"\"Return max and min of k elements in a tuple.\n\n    Args:\n        nums (Tuple): given tuple\n        k (int): k elements to extract\n\n    Returns:\n        Tuple: max and min of k elements in a tuple\n    \"\"\"\n    if len(nums) < k:\n        raise ValueError(\"k can't be greater than length of tuple\")\n\n    # Initialize max and min values\n    max_num = max(nums[:k])\n    min_num = min(nums[:k])\n\n    # Update max and min values\n    for i in range(k, len(nums)):\n        max_num = max(max_num, nums[i])\n        min_num = min(min_num, nums[i])\n\n    return max_num, min_num\n\n\nif __name__ == \"__main__\":\n    print(max_min_k((1, 2, 3, 4, 5, 6, 7, 8, 9), 3))\n    print(max_min_k((1, 2, 3, 4, 5, 6, 7, 8, 9), 1))\n    print(max_min_k((1, 2, 3, 4, 5, 6, 7, 8, 9), 0))"
    },
    {
      "rank": 50,
      "score": 1.0,
      "candidate": "from typing import Tuple\n\n\ndef maximum_and_minimum(tup: Tuple, k: int) -> Tuple[Tuple, Tuple]:\n    \"\"\"Return maximum and minimum k elements in a given tuple.\n\n    Examples:\n        >>> assert maximum_and_minimum((1, 2, 3, 4, 5, 6, 7, 8, 9), 3) == ((8, 7, 6), (1, 2, 3))\n    \"\"\"\n    return tup[:k], tup[-k:]\n\n\nif __name__ == \"__main__\":\n    print(maximum_and_minimum((1, 2, 3, 4, 5, 6, 7, 8, 9), 3))"
    },
    {
      "rank": 51,
      "score": 1.0,
      "candidate": "from typing import Tuple\n\n\ndef max_min_k_elements(arr: Tuple, k: int) -> Tuple:\n    \"\"\"Returns the maximum and minimum k elements in the given tuple.\n\n    Args:\n        arr (Tuple): The given tuple.\n        k (int): The number of elements to extract.\n\n    Examples:\n        >>> max_min_k_elements((1, 2, 3, 4, 5), 2)\n        (5, 1)\n        >>> max_min_k_elements((1, 2, 3, 4, 5), 3)\n        (4, 1)\n        >>> max_min_k_elements((1, 2, 3, 4, 5), 4)\n        (3, 1)\n        >>> max_min_k_elements((1, 2, 3, 4, 5), 5)\n        (2, 1)\n        >>> max_min_k_elements((1, 2, 3, 4, 5), 6)\n        (1, 1)\n        >>> max_min_k_elements((1, 2, 3, 4, 5), 1)\n        (5, 1)\n        >>> max_min_k_elements((1, 2, 3, 4, 5), 0)\n        (1, 1)\n    \"\"\"\n    if k < 1:\n        return (arr[0], arr[0])\n    elif k >= len(arr):\n        return (max(arr), min(arr))\n\n    max_k = arr[0]\n    min_k = arr[0]\n    for i in range(k):\n        if arr[i] > max_k:\n            max_k = arr[i]\n        if arr[i] < min_k:\n            min_k = arr[i]\n\n    return (max_k, min_k)\n\n\nif __name__ == \"__main__\":\n    print(max_min_k_elements((1, 2, 3, 4, 5), 2))\n    print(max"
    },
    {
      "rank": 52,
      "score": 1.0,
      "candidate": "from typing import List\n\n\ndef extract_k_elements(array: List[int], k: int) -> List[int]:\n    \"\"\"\n    Time Complexity: O(n)\n    \"\"\"\n    if k > len(array):\n        raise ValueError(\"K is greater than the length of the array\")\n\n    if k <= 0:\n        raise ValueError(\"K is less than or equal to zero\")\n\n    return sorted(array)[k - 1 : k + 1]\n\n\nif __name__ == \"__main__\":\n    print(extract_k_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3))"
    },
    {
      "rank": 53,
      "score": 1.0,
      "candidate": "def max_min_k_elements(data, k):\n    \"\"\"\n    >>> max_min_k_elements((1, 2, 3, 4, 5), 2)\n    ((5, 4), (1, 2))\n    >>> max_min_k_elements((1, 2, 3, 4, 5), 3)\n    ((5, 4, 3), (1, 2, 3))\n    >>> max_min_k_elements((1, 2, 3, 4, 5), 4)\n    ((5, 4, 3, 2), (1, 2, 3, 4))\n    >>> max_min_k_elements((1, 2, 3, 4, 5), 5)\n    ((5, 4, 3, 2, 1), (1, 2, 3, 4, 5))\n    \"\"\"\n    return (\n        tuple(sorted(data[-k:])),\n        tuple(sorted(data[:k]))\n    )\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 54,
      "score": 1.0,
      "candidate": "from typing import Tuple\n\n\ndef max_min_k_elements(nums: Tuple, k: int) -> Tuple:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(1)\n    \"\"\"\n    if len(nums) < k:\n        raise ValueError(\"Tuple length less than k\")\n\n    min_k = max_k = nums[0]\n    for num in nums[1:]:\n        if num < min_k:\n            min_k = num\n        elif num > max_k:\n            max_k = num\n\n    return (max_k, min_k)\n\n\nif __name__ == \"__main__\":\n    print(max_min_k_elements((1, 2, 3, 4, 5), 3))"
    },
    {
      "rank": 55,
      "score": 1.0,
      "candidate": "from typing import Tuple\n\n\ndef get_max_min_k_elements(input_tuple: Tuple[int, ...], k: int) -> Tuple[int, int]:\n    \"\"\"Return maximum and minimum k elements from given tuple.\n\n    Examples:\n        >>> assert get_max_min_k_elements((1, 2, 3, 4, 5), 2) == (5, 1)\n    \"\"\"\n    if not input_tuple:\n        raise ValueError(\"Input tuple must be non empty.\")\n    if not isinstance(k, int):\n        raise TypeError(\"k must be an integer.\")\n    if k < 1:\n        raise ValueError(\"k must be greater than 0.\")\n    if k > len(input_tuple):\n        raise ValueError(\"k must be less than or equal to length of the tuple.\")\n\n    return max(input_tuple[:k]), min(input_tuple[:k])\n\n\nif __name__ == \"__main__\":\n    print(get_max_min_k_elements((1, 2, 3, 4, 5), 2))"
    },
    {
      "rank": 56,
      "score": 1.0,
      "candidate": "from typing import Tuple\n\n\ndef max_min_k(tup: Tuple, k: int) -> Tuple:\n    \"\"\"Return maximum and minimum k elements in a tuple.\n\n    Args:\n        tup (Tuple): input tuple\n        k (int): max and min k elements\n\n    Examples:\n        >>> assert max_min_k((1, 2, 3, 4, 5, 6), 3) == (4, 1)\n    \"\"\"\n    return (max(tup[:k]), min(tup[:k]))\n\n\nif __name__ == \"__main__\":\n    print(max_min_k((1, 2, 3, 4, 5, 6), 3))"
    },
    {
      "rank": 57,
      "score": 1.0,
      "candidate": "from typing import Tuple\n\n\ndef get_max_min(arr: Tuple[int], k: int) -> Tuple[int]:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(1)\n    \"\"\"\n    min_list = []\n    max_list = []\n\n    for i in arr:\n        if len(min_list) < k:\n            min_list.append(i)\n        else:\n            min_list.pop(min_list.index(min(min_list)))\n            min_list.append(i)\n\n        if len(max_list) < k:\n            max_list.append(i)\n        else:\n            max_list.pop(max_list.index(max(max_list)))\n            max_list.append(i)\n\n    return max(max_list), min(min_list)\n\n\nif __name__ == \"__main__\":\n    assert get_max_min((1, 2, 3, 4, 5, 6, 7, 8, 9, 10), 3) == (9, 1)"
    },
    {
      "rank": 58,
      "score": 1.0,
      "candidate": "from typing import Tuple\n\n\ndef max_min_k_element(input_list: Tuple, k: int) -> Tuple[Tuple, Tuple]:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(k)\n    \"\"\"\n    max_list = []\n    min_list = []\n\n    for i in input_list:\n        if len(max_list) < k:\n            max_list.append(i)\n        elif i > max_list[-1]:\n            max_list[-1] = i\n\n        if len(min_list) < k:\n            min_list.append(i)\n        elif i < min_list[-1]:\n            min_list[-1] = i\n\n    return max_list, min_list\n\n\nif __name__ == \"__main__\":\n    print(max_min_k_element((1, 2, 3, 4, 5), 3))\n    print(max_min_k_element((1, 2, 3, 4, 5), 5))\n    print(max_min_k_element((1, 2, 3, 4, 5), 2))"
    },
    {
      "rank": 59,
      "score": 1.0,
      "candidate": "from typing import Tuple\n\n\ndef get_max_min_k_elements(k: int, numbers: Tuple[int, ...]) -> Tuple[int, int]:\n    \"\"\"Get maximum and minimum k elements from tuple.\n\n    Args:\n        k (int): k elements\n        numbers (Tuple[int, ...]): input tuple\n\n    Examples:\n        >>> assert get_max_min_k_elements(2, (1, 2, 3, 4, 5)) == (4, 1)\n        >>> assert get_max_min_k_elements(3, (1, 2, 3, 4, 5)) == (3, 1)\n        >>> assert get_max_min_k_elements(3, (1, 2, 3, 4, 5, 6)) == (6, 1)\n        >>> assert get_max_min_k_elements(1, (1, 2, 3, 4, 5, 6)) == (6, 1)\n        >>> assert get_max_min_k_elements(6, (1, 2, 3, 4, 5, 6)) == (6, 1)\n    \"\"\"\n    return max(numbers[:k]), min(numbers[:k])\n\n\nif __name__ == \"__main__\":\n    print(get_max_min_k_elements(2, (1, 2, 3, 4, 5)))"
    },
    {
      "rank": 60,
      "score": 1.0,
      "candidate": "from typing import List, Tuple\n\n\ndef max_min_k(tup: Tuple[int, ...], k: int) -> List[int]:\n    \"\"\"Finds maximum and minimum k elements in the given tuple.\n\n    Args:\n        tup (Tuple[int, ...]): input tuple\n        k (int): k elements\n\n    Examples:\n        >>> max_min_k((1, 2, 3, 4, 5, 6), 3)\n        [6, 1, 2]\n        >>> max_min_k((1, 2, 3, 4, 5, 6), 2)\n        [6, 2]\n\n    Returns:\n        List[int]: maximum and minimum k elements\n    \"\"\"\n    return sorted(tup, reverse=True)[0:k]\n\n\ndef max_min_k_optimized(tup: Tuple[int, ...], k: int) -> List[int]:\n    \"\"\"Finds maximum and minimum k elements in the given tuple.\n\n    Args:\n        tup (Tuple[int, ...]): input tuple\n        k (int): k elements\n\n    Examples:\n        >>> max_min_k_optimized((1, 2, 3, 4, 5, 6), 3)\n        [6, 1, 2]\n        >>> max_min_k_optimized((1, 2, 3, 4, 5, 6), 2)\n        [6, 2]\n\n    Returns:\n        List[int]: maximum and minimum k elements\n    \"\"\"\n    return sorted(tup, reverse=True)[0:k]\n\n\nif __name__ == \"__main__\":\n    print(max_min_k((1, 2, 3, 4, 5, 6), 3))\n    print(max_min_k((1, 2, 3, 4, 5, 6), 2))"
    },
    {
      "rank": 61,
      "score": 1.0,
      "candidate": "from typing import Tuple\n\n\ndef maximum_and_minimum(k: int, t: Tuple) -> Tuple:\n    \"\"\"Extracts maximum and minimum k elements in the given tuple.\n\n    Args:\n        k: k elements to extract\n        t: tuple to extract k elements from\n\n    Returns:\n        maximum and minimum k elements in the given tuple\n    \"\"\"\n    return sorted(t)[-k:], sorted(t)[:k]\n\n\nif __name__ == \"__main__\":\n    print(maximum_and_minimum(3, (1, 2, 3, 4, 5, 6)))"
    },
    {
      "rank": 62,
      "score": 1.0,
      "candidate": "from typing import Tuple\n\n\ndef maximum_minimum_k_elements(k: int, tup: Tuple[int, ...]) -> Tuple[int, int]:\n    \"\"\"Return the maximum and minimum k elements of a tuple.\n\n    Args:\n        k: int\n            Number of elements to find maximum and minimum\n        tup: Tuple[int, ...]\n            Tuple from which to find the maximum and minimum elements\n\n    Returns:\n        Tuple[int, int]\n            The maximum and minimum k elements of the tuple\n\n    Raises:\n        ValueError: If k is greater than the length of the tuple\n    \"\"\"\n    if k > len(tup):\n        raise ValueError(\"k must be less than or equal to the length of the tuple\")\n\n    return max(tup[:k]), min(tup[:k])\n\n\nif __name__ == \"__main__\":\n    print(maximum_minimum_k_elements(3, (1, 2, 3, 4, 5, 6, 7, 8, 9)))"
    },
    {
      "rank": 63,
      "score": 1.0,
      "candidate": "from typing import Tuple\n\n\ndef max_min_k_elements(t: Tuple, k: int) -> Tuple[int, int]:\n    \"\"\"Return maximum and minimum k elements of the given tuple.\n\n    Args:\n        t (Tuple): given tuple\n        k (int): k elements\n\n    Returns:\n        Tuple[int, int]: maximum and minimum k elements\n    \"\"\"\n    if k > len(t):\n        raise ValueError(\"k is greater than the length of the tuple\")\n\n    return (max(t[:k]), min(t[:k]))\n\n\nif __name__ == \"__main__\":\n    print(max_min_k_elements((1, 2, 3, 4, 5), 3))\n    print(max_min_k_elements((1, 2, 3, 4, 5), 6))\n    print(max_min_k_elements((1, 2, 3, 4, 5), 1))"
    },
    {
      "rank": 64,
      "score": 1.0,
      "candidate": "from typing import Tuple\n\n\ndef find_max_min_k_elements(nums: Tuple, k: int) -> Tuple[int, int]:\n    \"\"\"Finds maximum and minimum k elements in the given tuple.\n\n    Args:\n        nums (Tuple): given tuple\n        k (int): k elements\n\n    Examples:\n        >>> find_max_min_k_elements((1, 2, 3, 4, 5, 6, 7, 8, 9), 3)\n        (6, 1)\n    \"\"\"\n    return max(nums[:k]), min(nums[:k])\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 65,
      "score": 1.0,
      "candidate": "from typing import List\n\n\ndef get_maximum_minimum_k_element(tup: List[int], k: int) -> List[int]:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(k)\n    \"\"\"\n\n    max_k = tup[:k]\n    min_k = tup[:k]\n\n    for i in range(k, len(tup)):\n        if tup[i] > max_k[-1]:\n            max_k.pop(-1)\n            max_k.append(tup[i])\n        if tup[i] < min_k[-1]:\n            min_k.pop(-1)\n            min_k.append(tup[i])\n\n    return [max_k, min_k]\n\n\nif __name__ == \"__main__\":\n    print(get_maximum_minimum_k_element([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3))"
    },
    {
      "rank": 66,
      "score": 1.0,
      "candidate": "from typing import Tuple\n\n\ndef max_min_k_elements(elements: Tuple, k: int) -> Tuple[int, int]:\n    \"\"\"Returns maximum and minimum k elements in the given tuple.\n\n    Examples:\n        >>> max_min_k_elements((1, 2, 3, 4, 5, 6, 7, 8, 9, 10), 3)\n        (9, 6)\n    \"\"\"\n    if k > len(elements):\n        raise ValueError(\"The number of elements should be greater than k\")\n\n    return max(elements[:k]), min(elements[:k])\n\n\nif __name__ == \"__main__\":\n    print(max_min_k_elements((1, 2, 3, 4, 5, 6, 7, 8, 9, 10), 3))"
    },
    {
      "rank": 67,
      "score": 1.0,
      "candidate": "from typing import Tuple\n\n\ndef maximum_minimum_k_elements(tup: Tuple, k: int) -> Tuple[int, int]:\n    \"\"\"Returns maximum and minimum k elements in the given tuple.\n\n    Args:\n        tup (Tuple): given tuple.\n        k (int): number of elements.\n\n    Examples:\n        >>> assert maximum_minimum_k_elements((1, 2, 3, 4, 5, 6), 3) == (4, 1)\n        >>> assert maximum_minimum_k_elements((1, 2, 3, 4, 5, 6), 2) == (5, 2)\n    \"\"\"\n    return (\n        max(tup[:k]),\n        min(tup[:k])\n    )\n\n\nif __name__ == \"__main__\":\n    print(maximum_minimum_k_elements((1, 2, 3, 4, 5, 6), 3))"
    },
    {
      "rank": 68,
      "score": 1.0,
      "candidate": "def max_min_k_elements(tup, k):\n    return max(tup[:k]), min(tup[:k])\n\n\ndef test_function(test_case):\n    test_input, test_expected = test_case\n    test_actual = max_min_k_elements(test_input, k=3)\n    if test_actual == test_expected:\n        print(\"Pass\")\n    else:\n        print(\"Fail\")\n\n\ntest_function(((1, 2, 3, 4, 5, 6), 3), (4, 1))\ntest_function(((1, 2, 3, 4, 5, 6), 4), (5, 2))\ntest_function(((1, 2, 3, 4, 5, 6), 5), (6, 3))\ntest_function(((1, 2, 3, 4, 5, 6), 6), (6, 1))"
    },
    {
      "rank": 69,
      "score": 1.0,
      "candidate": "from typing import Tuple\n\n\ndef max_min_k_elements(nums: Tuple[int, ...], k: int) -> Tuple[int, int]:\n    \"\"\"Returns the maximum and minimum k elements from a tuple.\n\n    Args:\n        nums (Tuple[int, ...]): a tuple of integers\n        k (int): the number of elements to return\n\n    Examples:\n        >>> max_min_k_elements((1, 2, 3, 4, 5), 2)\n        (5, 1)\n        >>> max_min_k_elements((1, 2, 3, 4, 5), 3)\n        (4, 2)\n        >>> max_min_k_elements((1, 2, 3, 4, 5), 10)\n        (5, 1)\n        >>> max_min_k_elements((1, 2, 3, 4, 5), 0)\n        (5, 1)\n        >>> max_min_k_elements((), 10)\n        (None, None)\n\n    \"\"\"\n    if not nums or k > len(nums):\n        return (None, None)\n\n    return (\n        max(nums[:k]),\n        min(nums[:k]),\n    )\n\n\ndef max_min_k_elements_pythonic(nums: Tuple[int, ...], k: int) -> Tuple[int, int]:\n    \"\"\"Returns the maximum and minimum k elements from a tuple.\n\n    Args:\n        nums (Tuple[int, ...]): a tuple of integers\n        k (int): the number of elements to return\n\n    Examples:\n        >>> max_min_k_elements_pythonic((1, 2, 3, 4, 5), 2)\n        (5, 1)\n        >>> max_min_k_elements_pythonic((1, 2, 3, 4, 5), 3)\n        (4, 2)\n        >>> max_min_k_elements_pythonic((1, 2, 3, 4,"
    },
    {
      "rank": 70,
      "score": 1.0,
      "candidate": "from typing import Tuple\n\n\ndef extract_min_max(tup: Tuple, k: int) -> Tuple:\n    \"\"\"Extract minimum and maximum k elements in the given tuple.\n\n    Args:\n        tup (Tuple): given tuple\n        k (int): number of elements to extract\n\n    Returns:\n        Tuple: maximum and minimum k elements in the given tuple\n    \"\"\"\n    return max(tup) if k == 1 else (max(tup), min(tup))\n\n\nif __name__ == \"__main__\":\n    print(extract_min_max((1, 2, 3, 4, 5, 6, 7), 3))\n    print(extract_min_max((1, 2, 3, 4, 5, 6, 7), 2))\n    print(extract_min_max((1, 2, 3, 4, 5, 6, 7), 1))"
    },
    {
      "rank": 71,
      "score": 1.0,
      "candidate": "from typing import Tuple\n\n\ndef max_min_k(arr: Tuple, k: int) -> Tuple:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(1)\n    \"\"\"\n\n    max_k_val = max(arr[:k])\n    min_k_val = min(arr[:k])\n\n    for i in range(k, len(arr)):\n        if arr[i] > max_k_val:\n            max_k_val = arr[i]\n        if arr[i] < min_k_val:\n            min_k_val = arr[i]\n\n    return max_k_val, min_k_val\n\n\nif __name__ == \"__main__\":\n    assert max_min_k((1, 2, 3, 4, 5), 3) == (4, 2)"
    },
    {
      "rank": 72,
      "score": 1.0,
      "candidate": "from typing import Tuple\n\n\ndef max_min_k_elements(arr: Tuple, k: int) -> Tuple[int, int]:\n    \"\"\"Returns the maximum and minimum k elements in the given tuple.\n\n    Time Complexity: O(n)\n    Space Complexity: O(1)\n    \"\"\"\n    arr_len = len(arr)\n\n    if k > arr_len:\n        raise ValueError(\"K is greater than length of array\")\n\n    min_val = max_val = arr[0]\n\n    for i in range(1, k):\n        if arr[i] > max_val:\n            max_val = arr[i]\n        elif arr[i] < min_val:\n            min_val = arr[i]\n\n    for i in range(k, arr_len):\n        if arr[i] > max_val:\n            max_val = arr[i]\n            min_val = max(arr[:i])\n\n    return max_val, min_val\n\n\nif __name__ == \"__main__\":\n    assert max_min_k_elements((1, 2, 3, 4, 5, 6), 3) == (6, 1)"
    },
    {
      "rank": 73,
      "score": 1.0,
      "candidate": "from typing import Tuple\n\n\ndef get_max_min_k(tup: Tuple, k: int) -> Tuple:\n    \"\"\"Returns max and min k elements in the given tuple.\n\n    Args:\n        tup (Tuple): given tuple.\n        k (int): number of elements.\n\n    Examples:\n        >>> assert get_max_min_k(tup=(1, 2, 3, 4, 5, 6, 7, 8, 9), k=2) == (8, 1)\n    \"\"\"\n    if k < 0:\n        raise ValueError(\"k must be non-negative integer\")\n    if k > len(tup):\n        raise ValueError(\"k must be less than length of tup\")\n    if k == 0:\n        return tuple()\n    return max(tup[:k]), min(tup[:k])\n\n\nif __name__ == \"__main__\":\n    print(get_max_min_k(tup=(1, 2, 3, 4, 5, 6, 7, 8, 9), k=2))"
    },
    {
      "rank": 74,
      "score": 1.0,
      "candidate": "from typing import Tuple\n\n\ndef find_max_min(tup: Tuple, k: int) -> Tuple[Tuple, Tuple]:\n    \"\"\"Returns maximum and minimum k elements in the given tuple.\n\n    Args:\n        tup (Tuple): input tuple\n        k (int): k elements\n\n    Examples:\n        >>> assert find_max_min((\"a\", \"b\", \"c\", \"d\", \"e\"), 3) == ((\"e\", \"d\", \"c\"), (\"a\", \"b\", \"c\"))\n    \"\"\"\n    return (\n        tuple(sorted(tup)[-k:]),\n        tuple(sorted(tup)[:k]),\n    )\n\n\nif __name__ == \"__main__\":\n    print(find_max_min((\"a\", \"b\", \"c\", \"d\", \"e\"), 3))"
    },
    {
      "rank": 75,
      "score": 1.0,
      "candidate": "from typing import Tuple\n\n\ndef get_max_min_k_elems(nums: Tuple[int, ...], k: int) -> Tuple[int, int]:\n    \"\"\"Get maximum and minimum k elements in the given tuple.\n\n    Args:\n        nums (Tuple[int, ...]): input tuple\n        k (int): count of elements\n\n    Examples:\n        >>> assert get_max_min_k_elems((1, 2, 3, 4, 5), 2) == (4, 1)\n    \"\"\"\n    return max(nums[:k]), min(nums[:k])\n\n\nif __name__ == \"__main__\":\n    print(get_max_min_k_elems((1, 2, 3, 4, 5), 2))"
    },
    {
      "rank": 76,
      "score": 1.0,
      "candidate": "from typing import Tuple\n\n\ndef max_min_k_elements(numbers: Tuple, k: int) -> Tuple[int, int]:\n    \"\"\"\n    This function will extract the maximum and minimum k elements from a tuple.\n    :param numbers: tuple of numbers.\n    :param k: the number of elements to extract.\n    :return: tuple of maximum and minimum k elements.\n    >>> max_min_k_elements((1, 2, 3, 4, 5, 6, 7, 8, 9, 10), 3)\n    (9, 1)\n    >>> max_min_k_elements((1, 2, 3, 4, 5, 6, 7, 8, 9, 10), 0)\n    Traceback (most recent call last):\n        ...\n    ValueError: k should be positive integer\n    >>> max_min_k_elements((1, 2, 3, 4, 5, 6, 7, 8, 9, 10), -1)\n    Traceback (most recent call last):\n        ...\n    ValueError: k should be positive integer\n    >>> max_min_k_elements((1, 2, 3, 4, 5, 6, 7, 8, 9, 10), 10)\n    Traceback (most recent call last):\n        ...\n    ValueError: k should be less than the length of the tuple\n    >>> max_min_k_elements((1, 2, 3, 4, 5, 6, 7, 8, 9, 10), 11)\n    Traceback (most recent call last):\n        ...\n    ValueError: k should be less than the length of the tuple\n    \"\"\"\n    if k <= 0:\n        raise ValueError(\"k should be positive integer\")\n    if k > len(numbers):\n        raise ValueError(\"k should be less than the length of the tuple\")\n\n    max_k_numbers = numbers[:k]\n    min_k_numbers = numbers[:k]\n\n    for number in numbers[k:]:\n        if number > max(max_k"
    },
    {
      "rank": 77,
      "score": 1.0,
      "candidate": "from typing import Tuple\n\n\ndef maximum_and_minimum(number_tuple: Tuple, k: int) -> Tuple:\n    \"\"\"Return maximum and minimum k elements in the given tuple.\n\n    Examples:\n        >>> assert maximum_and_minimum((1, 2, 3, 4, 5), 2) == (4, 1)\n    \"\"\"\n    return max(number_tuple[:k]), min(number_tuple[:k])\n\n\nif __name__ == \"__main__\":\n    print(maximum_and_minimum((1, 2, 3, 4, 5), 2))"
    },
    {
      "rank": 78,
      "score": 1.0,
      "candidate": "from typing import Tuple\n\n\ndef get_max_min_k_elements(number_tuple: Tuple[int, ...], k: int) -> Tuple[int, int]:\n    \"\"\"Get maximum and minimum k elements from a tuple.\n\n    Args:\n        number_tuple (Tuple[int, ...]): input tuple\n        k (int): number of elements to extract\n\n    Returns:\n        Tuple[int, int]: maximum and minimum k elements\n\n    Examples:\n        >>> get_max_min_k_elements((1, 2, 3, 4, 5, 6, 7, 8, 9, 10), 5)\n        (10, 1)\n        >>> get_max_min_k_elements((1, 2, 3, 4, 5, 6, 7, 8, 9, 10), 0)\n        (10, 1)\n        >>> get_max_min_k_elements((1, 2, 3, 4, 5, 6, 7, 8, 9, 10), 10)\n        (10, 1)\n        >>> get_max_min_k_elements((1, 2, 3, 4, 5, 6, 7, 8, 9, 10), 1)\n        (10, 1)\n        >>> get_max_min_k_elements((1, 2, 3, 4, 5, 6, 7, 8, 9, 10), 9)\n        (10, 1)\n        >>> get_max_min_k_elements((1, 2, 3, 4, 5, 6, 7, 8, 9, 10), 3)\n        (9, 1)\n    \"\"\"\n    if not number_tuple:\n        return 0, 0\n\n    return (\n        max(number_tuple[:k]),\n        min(number_tuple[:k])\n    )\n\n\nif __name__ == \"__main__\":\n    import doctest"
    },
    {
      "rank": 79,
      "score": 1.0,
      "candidate": "from typing import List\n\n\ndef max_min_k_elements(arr: List[int], k: int) -> List[int]:\n    \"\"\"\n    Time Complexity: O(nlogk)\n    Space Complexity: O(k)\n    \"\"\"\n    arr.sort()\n    return [arr[k-1], arr[-k]]\n\n\nif __name__ == \"__main__\":\n    assert max_min_k_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 6) == [14, 3]"
    },
    {
      "rank": 80,
      "score": 1.0,
      "candidate": "from typing import Tuple\n\n\ndef extract_max_min_k(k: int, tup: Tuple) -> Tuple:\n    \"\"\"Return maximum and minimum k elements in the given tuple.\n\n    Args:\n        k: length of the sub-tuple to extract\n        tup: tuple of integers\n\n    Returns:\n        Tuple with maximum and minimum k elements in the given tuple\n\n    Examples:\n        >>> assert extract_max_min_k(2, (1, 2, 3, 4, 5)) == (4, 1)\n    \"\"\"\n    return max(tup[:k]), min(tup[:k])\n\n\nif __name__ == \"__main__\":\n    print(extract_max_min_k(2, (1, 2, 3, 4, 5)))"
    },
    {
      "rank": 81,
      "score": 1.0,
      "candidate": "from typing import Tuple\n\n\ndef max_min_k_elements(data: Tuple[int], k: int) -> Tuple[int, int]:\n    \"\"\"Returns maximum and minimum k elements from given tuple.\n\n    Args:\n        data (Tuple[int]): given tuple\n        k (int): k elements\n\n    Examples:\n        >>> assert max_min_k_elements((1, 2, 3, 4, 5, 6), 2) == (6, 1)\n        >>> assert max_min_k_elements((1, 2, 3, 4, 5, 6), 3) == (6, 2)\n    \"\"\"\n    return max(data[:k]), min(data[:k])\n\n\nif __name__ == \"__main__\":\n    print(max_min_k_elements((1, 2, 3, 4, 5, 6), 2))\n    print(max_min_k_elements((1, 2, 3, 4, 5, 6), 3))"
    },
    {
      "rank": 82,
      "score": 1.0,
      "candidate": "from typing import Tuple\n\n\ndef max_min_k_elements(tup: Tuple, k: int) -> Tuple[int, int]:\n    \"\"\"Returns the maximum and minimum of the first k elements in the tuple.\n\n    Args:\n        tup (Tuple): Input tuple\n        k (int): Number of elements to compare\n\n    Returns:\n        Tuple[int, int]: Maximum and minimum of the first k elements\n    \"\"\"\n    return max(tup[:k]), min(tup[:k])\n\n\nif __name__ == \"__main__\":\n    print(max_min_k_elements((1, 2, 3, 4, 5, 6, 7, 8, 9), 5))\n    print(max_min_k_elements((10, 11, 12, 13, 14, 15, 16, 17, 18), 4))"
    },
    {
      "rank": 83,
      "score": 1.0,
      "candidate": "from typing import Tuple\n\n\ndef maximum_minimum_k(arr: Tuple, k: int) -> Tuple:\n    \"\"\"Returns maximum and minimum k elements in the given tuple.\n\n    Time Complexity: O(n)\n    Space Complexity: O(1)\n    \"\"\"\n    return max(arr[:k]), min(arr[:k])\n\n\nif __name__ == \"__main__\":\n    print(maximum_minimum_k((1, 2, 3, 4, 5, 6, 7, 8, 9, 10), 3))"
    },
    {
      "rank": 84,
      "score": 1.0,
      "candidate": "from typing import Tuple\n\n\ndef max_min_elements(tup: Tuple, k: int) -> Tuple:\n    \"\"\"Return the maximum and minimum k elements in the given tuple.\n\n    Args:\n        tup (Tuple): The tuple to extract elements from.\n        k (int): The number of elements to extract.\n\n    Returns:\n        Tuple: The maximum and minimum k elements.\n    \"\"\"\n    return max(tup[:k]), min(tup[:k])\n\n\nif __name__ == \"__main__\":\n    print(max_min_elements((2, 5, 4, 6, 3, 4, 8), 3))\n    print(max_min_elements((2, 5, 4, 6, 3, 4, 8), 5))"
    },
    {
      "rank": 85,
      "score": 1.0,
      "candidate": "from typing import Tuple\n\n\ndef get_max_min_k(input_tuple: Tuple, k: int) -> Tuple:\n    \"\"\"Returns the maximum and minimum k elements in the given tuple.\n\n    Args:\n        input_tuple (Tuple): a tuple of numbers\n        k (int): the number of elements to return\n\n    Returns:\n        Tuple: the maximum and minimum k elements\n    \"\"\"\n    if k < 0:\n        raise ValueError(\"k must be greater than or equal to zero\")\n\n    return (\n        sorted(input_tuple)[-k:],\n        sorted(input_tuple)[:k],\n    )\n\n\nif __name__ == \"__main__\":\n    print(get_max_min_k((1, 2, 3, 4, 5), 3))"
    },
    {
      "rank": 86,
      "score": 1.0,
      "candidate": "from typing import Tuple\n\n\ndef max_min_k_elem(data: Tuple[int, ...], k: int) -> Tuple[int, int]:\n    \"\"\"Returns the max and min k elements from the given tuple.\n\n    Args:\n        data (Tuple[int, ...]): input tuple\n        k (int): k elements\n\n    Examples:\n        >>> assert max_min_k_elem((1, 2, 3, 4, 5), 2) == (5, 1)\n        >>> assert max_min_k_elem((5, 4, 3, 2, 1), 2) == (5, 2)\n        >>> assert max_min_k_elem((5, 5, 5, 5, 5), 2) == (5, 5)\n    \"\"\"\n    return max(data[:k]), min(data[-k:])\n\n\nif __name__ == \"__main__\":\n    print(max_min_k_elem((1, 2, 3, 4, 5), 2))"
    },
    {
      "rank": 87,
      "score": 1.0,
      "candidate": "from typing import List\n\n\ndef get_max_min(arr: List[int], k: int) -> List[int]:\n    \"\"\"\n    Time Complexity: O(nlogn)\n    Space Complexity: O(1)\n    \"\"\"\n    arr.sort()\n\n    return arr[:k] + arr[-k:]\n\n\nif __name__ == \"__main__\":\n    assert get_max_min([1, 2, 3, 4, 5], 3) == [4, 3, 5]\n    assert get_max_min([1, 2, 3, 4, 5, 6, 7, 8], 4) == [8, 7, 6, 5]\n    assert get_max_min([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5) == [10, 9, 8, 7, 6]"
    },
    {
      "rank": 88,
      "score": 1.0,
      "candidate": "from typing import Tuple\n\n\ndef max_min_k_elements(arr: Tuple, k: int) -> Tuple[int, int]:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(1)\n    \"\"\"\n    min_k = max_k = arr[0]\n\n    for i in range(k, len(arr)):\n        if arr[i] < min_k:\n            min_k = arr[i]\n        if arr[i] > max_k:\n            max_k = arr[i]\n\n    return max_k, min_k\n\n\nif __name__ == \"__main__\":\n    print(max_min_k_elements((1, 2, 3, 4, 5, 6, 7, 8, 9, 10), 3))"
    },
    {
      "rank": 89,
      "score": 1.0,
      "candidate": "from typing import List\n\n\ndef max_min_k(test: List[int], k: int) -> tuple:\n    \"\"\"Returns the maximum and minimum k elements in the given tuple.\n\n    Time Complexity: O(n)\n    Space Complexity: O(1)\n    \"\"\"\n    if k > len(test) or k < 1:\n        return tuple()\n\n    max_k = max(test[:k])\n    min_k = min(test[:k])\n\n    for i in range(k, len(test)):\n        if test[i] < min_k:\n            min_k = test[i]\n        if test[i] > max_k:\n            max_k = test[i]\n\n    return max_k, min_k\n\n\nif __name__ == \"__main__\":\n    print(max_min_k([1, 2, 3, 4, 5, 6, 7, 8, 9], 3))"
    },
    {
      "rank": 90,
      "score": 1.0,
      "candidate": "from typing import Tuple\n\n\ndef maximum_and_minimum(arr: Tuple, k: int) -> Tuple[int, int]:\n    \"\"\"\n    Extract maximum and minimum k elements in the given tuple.\n    :param arr: input tuple.\n    :param k: number of elements to extract.\n    :return: maximum and minimum elements.\n    >>> maximum_and_minimum((1, 2, 3, 4, 5), 3)\n    (4, 1)\n    \"\"\"\n    return max(arr[:k]), min(arr[:k])\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 91,
      "score": 1.0,
      "candidate": "from typing import Tuple\n\n\ndef max_min(arr: Tuple[int, ...], k: int) -> Tuple[int, int]:\n    \"\"\"Returns maximum and minimum k elements in the given tuple.\n\n    Args:\n        arr: given tuple\n        k: k elements\n\n    Examples:\n        >>> assert max_min((1, 2, 3, 4, 5), 3) == (4, 2)\n    \"\"\"\n    return max(arr[:k]), min(arr[:k])\n\n\nif __name__ == \"__main__\":\n    print(max_min((1, 2, 3, 4, 5), 3))"
    },
    {
      "rank": 92,
      "score": 1.0,
      "candidate": "from typing import Tuple\n\n\ndef max_min(arr: Tuple, k: int) -> Tuple:\n    \"\"\"Returns a tuple of maximum and minimum k elements of the given tuple.\n\n    Examples:\n        >>> assert max_min((1, 2, 3, 4, 5, 6), 3) == (4, 2)\n    \"\"\"\n    return max(arr[:k]), min(arr[:k])\n\n\nif __name__ == \"__main__\":\n    print(max_min((1, 2, 3, 4, 5, 6), 3))"
    },
    {
      "rank": 93,
      "score": 1.0,
      "candidate": "from typing import Tuple\n\n\ndef maximum_and_minimum_k_elements(data: Tuple, k: int) -> Tuple[int, int]:\n    \"\"\"Return maximum and minimum k elements from a tuple.\n\n    Args:\n        data (Tuple): given tuple\n        k (int): number of elements to extract\n\n    Examples:\n        >>> assert maximum_and_minimum_k_elements((1, 2, 3, 4, 5), 2) == (4, 1)\n    \"\"\"\n    return max(data[:k]), min(data[:k])\n\n\nif __name__ == \"__main__\":\n    print(maximum_and_minimum_k_elements((1, 2, 3, 4, 5), 2))"
    },
    {
      "rank": 94,
      "score": 1.0,
      "candidate": "from typing import Tuple\n\n\ndef get_maximum_and_minimum(input_list: Tuple, k: int) -> Tuple[tuple, tuple]:\n    \"\"\"Returns the maximum and minimum k elements in the given tuple.\n\n    Args:\n        input_list (Tuple): The tuple from which the maximum and minimum k elements are to be extracted.\n        k (int): The number of maximum and minimum elements to be extracted.\n\n    Examples:\n        >>> assert get_maximum_and_minimum((1, 2, 3, 4, 5), 2) == ((4, 5), (1, 2))\n        >>> assert get_maximum_and_minimum((1, 2, 3, 4, 5), 5) == ((1, 2, 3, 4, 5), (1, 2, 3, 4, 5))\n        >>> assert get_maximum_and_minimum((1, 2, 3, 4, 5), 6) == ((1, 2, 3, 4, 5), (1, 2, 3, 4, 5))\n    \"\"\"\n    return tuple(sorted(input_list)[:k]), tuple(sorted(input_list)[-k:])\n\n\nif __name__ == \"__main__\":\n    print(get_maximum_and_minimum((1, 2, 3, 4, 5), 2))"
    },
    {
      "rank": 95,
      "score": 1.0,
      "candidate": "from typing import Tuple\n\n\ndef max_min_k(tup: Tuple, k: int) -> Tuple:\n    \"\"\"Returns maximum and minimum k elements of a tuple.\n\n    Args:\n        tup (Tuple): the tuple to extract maximum and minimum k elements\n        k (int): the number of elements to extract\n\n    Returns:\n        Tuple: maximum and minimum k elements of a tuple\n    \"\"\"\n    max_list = list()\n    min_list = list()\n\n    for i in tup:\n        if len(max_list) < k:\n            max_list.append(i)\n        else:\n            for j in range(len(max_list)):\n                if i > max_list[j]:\n                    max_list[j] = i\n                    break\n        if len(min_list) < k:\n            min_list.append(i)\n        else:\n            for j in range(len(min_list)):\n                if i < min_list[j]:\n                    min_list[j] = i\n                    break\n\n    return max(max_list), min(min_list)\n\n\nif __name__ == \"__main__\":\n    print(max_min_k((1, 2, 3, 4, 5, 6, 7, 8, 9, 10), 2))\n    print(max_min_k((1, 2, 3, 4, 5, 6, 7, 8, 9, 10), 3))\n    print(max_min_k((1, 2, 3, 4, 5, 6, 7, 8, 9, 10), 4))\n    print(max_min_k((1, 2, 3, 4, 5, 6, 7, 8, 9, 10), 5))"
    },
    {
      "rank": 96,
      "score": 1.0,
      "candidate": "from typing import Tuple\n\n\ndef min_max_k_elements(tup: Tuple, k: int) -> Tuple[int, int]:\n    \"\"\"Returns the minimum and maximum k elements from the given tuple.\n\n    Args:\n        tup (Tuple): input tuple\n        k (int): k elements to extract\n\n    Examples:\n        >>> assert min_max_k_elements((1, 2, 3, 4, 5), 2) == (1, 5)\n        >>> assert min_max_k_elements((1, 2, 3, 4, 5), 3) == (1, 4)\n        >>> assert min_max_k_elements((1, 2, 3, 4, 5), 4) == (1, 3)\n        >>> assert min_max_k_elements((1, 2, 3, 4, 5), 5) == (1, 2)\n        >>> assert min_max_k_elements((1, 2, 3, 4, 5), 6) == (1, 1)\n        >>> assert min_max_k_elements((1, 2, 3, 4, 5), 0) == (5, 1)\n    \"\"\"\n    return min(tup[:k]), max(tup[-k:])\n\n\nif __name__ == \"__main__\":\n    print(min_max_k_elements((1, 2, 3, 4, 5), 2))\n    print(min_max_k_elements((1, 2, 3, 4, 5), 3))\n    print(min_max_k_elements((1, 2, 3, 4, 5), 4))\n    print(min_max_k_elements((1, 2, 3, 4, 5), 5))\n    print(min_max_k_elements((1, 2, 3, 4, 5), 6))\n    print(min_max_k_elements((1, 2, 3, 4, 5), 0))"
    },
    {
      "rank": 97,
      "score": 1.0,
      "candidate": "from typing import List, Optional\n\n\ndef maximum_minimum(data: List[int], k: int) -> Optional[List[int]]:\n    if not data:\n        return []\n\n    return [max(data[:k]), min(data[:k])]\n\n\nif __name__ == \"__main__\":\n    assert maximum_minimum([1, 2, 3, 4, 5], 3) == [4, 1]"
    },
    {
      "rank": 98,
      "score": 1.0,
      "candidate": "from typing import Tuple\n\n\ndef maximum_minimum_k(data: Tuple[int, ...], k: int) -> Tuple[int, int]:\n    \"\"\"Return maximum and minimum k elements in the given tuple.\n\n    Examples:\n        >>> assert maximum_minimum_k((2, 3, 4, 1), 2) == (4, 1)\n        >>> assert maximum_minimum_k((2, 3, 4, 1), 3) == (3, 1)\n        >>> assert maximum_minimum_k((2, 3, 4, 1), 1) == (3, 2)\n    \"\"\"\n    return (\n        max(data[:k]),\n        min(data[:k]),\n    )\n\n\nif __name__ == \"__main__\":\n    print(maximum_minimum_k((2, 3, 4, 1), 2))"
    },
    {
      "rank": 99,
      "score": 1.0,
      "candidate": "from typing import Tuple\n\n\ndef maximum_and_minimum(nums: Tuple[int, ...]) -> Tuple[int, int]:\n    \"\"\"Return maximum and minimum k elements in the given tuple.\n\n    Examples:\n        >>> assert maximum_and_minimum((1, 2, 3, 4, 5)) == (5, 1)\n    \"\"\"\n    return max(nums), min(nums)\n\n\nif __name__ == \"__main__\":\n    print(maximum_and_minimum((1, 2, 3, 4, 5)))"
    },
    {
      "rank": 100,
      "score": 1.0,
      "candidate": "from typing import Tuple\n\n\ndef max_min_k_elements(input_list: Tuple, k: int) -> Tuple[Tuple, Tuple]:\n    \"\"\"\n    Time Complexity: O(k)\n    Space Complexity: O(k)\n    \"\"\"\n    max_list = list()\n    min_list = list()\n\n    for i in input_list:\n        if len(max_list) < k:\n            max_list.append(i)\n        else:\n            if i > max_list[0]:\n                max_list.pop(0)\n                max_list.append(i)\n\n        if len(min_list) < k:\n            min_list.append(i)\n        else:\n            if i < min_list[0]:\n                min_list.pop(0)\n                min_list.append(i)\n\n    return tuple(max_list), tuple(min_list)\n\n\nif __name__ == \"__main__\":\n    assert max_min_k_elements((1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15), 5) == ((15, 14, 13, 12, 11), (1, 2, 3, 4, 5))"
    }
  ]
}