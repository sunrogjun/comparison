{
  "timestamp": "2025-09-15T00:13:25.264867",
  "method": "improved_llm_judge",
  "judge_model": "codellama/CodeLlama-7b-Python-hf",
  "target_model": "codellama-7b",
  "dataset": "mbpp",
  "problem_number": 254,
  "total_candidates": 100,
  "results": [
    {
      "rank": 1,
      "score": 10.0,
      "candidate": "from typing import List\n\n\ndef split_list(arr: List[int], n: int) -> List[List[int]]:\n    \"\"\"\n    :param arr: a list of integers\n    :param n: an integer\n    :return: a list of lists\n    >>> split_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3)\n    [[1, 4, 7, 10], [2, 5, 8], [3, 6, 9]]\n    \"\"\"\n    if len(arr) == 0:\n        return []\n    if n <= 0:\n        raise ValueError(\"N must be greater than 0\")\n    if n > len(arr):\n        raise ValueError(\"N must be less than the length of the list\")\n    return [\n        arr[i : i + n]\n        for i in range(0, len(arr), n)\n    ]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 2,
      "score": 10.0,
      "candidate": "def split_list(elements, n):\n    return [elements[i::n] for i in range(n)]\n\n\nif __name__ == '__main__':\n    print(split_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 4))"
    },
    {
      "rank": 3,
      "score": 10.0,
      "candidate": "def split(list, n):\n    return [list[i::n] for i in range(n)]"
    },
    {
      "rank": 4,
      "score": 10.0,
      "candidate": "from timeit import timeit\n\n\ndef split_list(l, n):\n    return [l[i::n] for i in range(n)]\n\n\nif __name__ == \"__main__\":\n    l = [i for i in range(10000)]\n    n = 1000\n    print(timeit(lambda: split_list(l, n), number=10000))"
    },
    {
      "rank": 5,
      "score": 10.0,
      "candidate": "def split_list(lst, n):\n    return [lst[i::n] for i in range(n)]\n\n\ndef test_split_list():\n    \"\"\"\n    >>> split_list([1, 2, 3, 4, 5, 6], 3)\n    [[1, 4], [2, 5], [3, 6]]\n    \"\"\"\n    pass\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 6,
      "score": 10.0,
      "candidate": "from typing import List, Any\n\n\ndef split_list(lst: List[Any], n: int) -> List[List[Any]]:\n    \"\"\"Split a list for every nth element.\n\n    >>> split_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2)\n    [[1, 2, 3, 4], [5, 6, 7, 8], [9, 10]]\n\n    >>> split_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3)\n    [[1, 2, 3], [4, 5, 6], [7, 8, 9], [10]]\n\n    >>> split_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5)\n    [[1, 2, 3, 4], [5, 6, 7], [8, 9, 10]]\n\n    >>> split_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 1)\n    [[1], [2], [3], [4], [5], [6], [7], [8], [9], [10]]\n    \"\"\"\n    return [lst[i::n] for i in range(n)]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 7,
      "score": 10.0,
      "candidate": "def split_list(lst, n):\n    return [lst[i::n] for i in range(n)]\n\n\ndef main():\n    print(split_list([1, 2, 3, 4, 5, 6, 7, 8], 2))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 8,
      "score": 10.0,
      "candidate": "def split_every_nth(elements, nth):\n    result = []\n    for i in range(len(elements)):\n        if i % nth == 0:\n            result.append([])\n        result[-1].append(elements[i])\n    return result\n\n\nprint(split_every_nth([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2))\nprint(split_every_nth([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3))\nprint(split_every_nth([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 4))\nprint(split_every_nth([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5))\nprint(split_every_nth([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 6))\nprint(split_every_nth([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 7))\nprint(split_every_nth([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 8))\nprint(split_every_nth([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 9))\nprint(split_every_nth([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 10))\nprint(split_every_nth([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 11))\nprint(split_every_nth([1, 2, 3, 4, 5, 6"
    },
    {
      "rank": 9,
      "score": 10.0,
      "candidate": "def split_list(mylist, n):\n    \"\"\"\n    >>> split_list([1, 2, 3, 4, 5, 6], 2)\n    [[1, 2], [3, 4], [5, 6]]\n    \"\"\"\n    return [mylist[i:i + n] for i in range(0, len(mylist), n)]\n\n\ndef split_list_2(mylist, n):\n    \"\"\"\n    >>> split_list_2([1, 2, 3, 4, 5, 6], 2)\n    [[1, 2], [3, 4], [5, 6]]\n    \"\"\"\n    return [mylist[i::n] for i in range(n)]\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 10,
      "score": 10.0,
      "candidate": "from typing import List\n\n\ndef split_every_nth(iterable: List[int], nth: int) -> List[List[int]]:\n    \"\"\"Split a list for every nth element.\n\n    Args:\n        iterable (List[int]): iterable to split\n        nth (int): nth element\n\n    Examples:\n        >>> assert split_every_nth([1, 2, 3, 4, 5, 6], nth=2) == [[1, 2], [3, 4], [5, 6]]\n    \"\"\"\n    return [iterable[i : i + nth] for i in range(0, len(iterable), nth)]\n\n\nif __name__ == \"__main__\":\n    print(split_every_nth([1, 2, 3, 4, 5, 6], nth=2))"
    },
    {
      "rank": 11,
      "score": 10.0,
      "candidate": "def split_list(lst, n):\n    \"\"\"Splits a list for every nth element.\n\n    Args:\n        lst: List of integers.\n        n: Integer\n\n    Returns:\n        List of lists.\n    \"\"\"\n    return [lst[i::n] for i in range(n)]\n\n\ndef test_split_list():\n    \"\"\"\n    >>> test_split_list()\n    \"\"\"\n    assert split_list([1, 2, 3, 4, 5, 6, 7, 8, 9], 3) == [[1, 4, 7], [2, 5, 8], [3, 6, 9]]\n    assert split_list([1, 2, 3], 2) == [[1, 3], [2]]\n    assert split_list([1, 2, 3], 1) == [[1], [2], [3]]\n    assert split_list([1, 2, 3, 4, 5, 6, 7, 8, 9], 4) == [[1, 5, 9], [2, 6, 10], [3, 7, 11], [4, 8, 12]]"
    },
    {
      "rank": 12,
      "score": 10.0,
      "candidate": "def split_list_nth(list, n):\n    return [list[i::n] for i in range(n)]\n\n\nif __name__ == '__main__':\n    print(split_list_nth([1,2,3,4,5,6,7,8,9], 3))"
    },
    {
      "rank": 13,
      "score": 10.0,
      "candidate": "from typing import List\n\n\ndef split_list(nums: List[int], n: int) -> List[List[int]]:\n    \"\"\"Splits a list into nth elements.\n\n    Args:\n        nums: the list to split\n        n: the nth element\n\n    Examples:\n        >>> assert split_list([1, 2, 3, 4, 5, 6], 2) == [[1, 2], [3, 4], [5, 6]]\n    \"\"\"\n    return [nums[i : i + n] for i in range(0, len(nums), n)]\n\n\nif __name__ == \"__main__\":\n    print(split_list([1, 2, 3, 4, 5, 6], 2))"
    },
    {
      "rank": 14,
      "score": 10.0,
      "candidate": "from typing import List\n\n\ndef split_list(data: List, n: int) -> List[List]:\n    \"\"\"\n    >>> split_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3)\n    [[1, 2, 3], [4, 5, 6], [7, 8, 9], [10]]\n    \"\"\"\n    return [data[i::n] for i in range(n)]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 15,
      "score": 10.0,
      "candidate": "from typing import List\n\n\ndef split_list(elements: List[int], n: int) -> List[List[int]]:\n    \"\"\"Splits a list for every nth element.\n\n    Args:\n        elements (List[int]): list of integers to split\n        n (int): number to split list by\n\n    Returns:\n        List[List[int]]: list of sublists\n\n    Examples:\n        >>> split_list([1, 2, 3, 4, 5, 6, 7, 8], 4)\n        [[1, 2, 3, 4], [5, 6, 7, 8]]\n        >>> split_list([1, 2, 3, 4, 5, 6, 7, 8], 3)\n        [[1, 2, 3], [4, 5, 6], [7, 8]]\n    \"\"\"\n    return [elements[i : i + n] for i in range(0, len(elements), n)]\n\n\nif __name__ == \"__main__\":\n    print(split_list([1, 2, 3, 4, 5, 6, 7, 8], 4))\n    print(split_list([1, 2, 3, 4, 5, 6, 7, 8], 3))"
    },
    {
      "rank": 16,
      "score": 10.0,
      "candidate": "from typing import List\n\n\ndef split(items: List[int], n: int) -> List[List[int]]:\n    \"\"\"Split a list for every nth element.\n\n    Args:\n        items (List[int]): input list\n        n (int): every nth element\n\n    Examples:\n        >>> assert split([1, 2, 3, 4], 2) == [[1, 3], [2, 4]]\n    \"\"\"\n    return [items[i::n] for i in range(n)]\n\n\nif __name__ == \"__main__\":\n    print(split([1, 2, 3, 4], 2))"
    },
    {
      "rank": 17,
      "score": 10.0,
      "candidate": "def split_list(n, lst):\n    return [lst[i::n] for i in range(n)]\n\n\nif __name__ == '__main__':\n    print(split_list(3, [1, 2, 3, 4, 5, 6]))"
    },
    {
      "rank": 18,
      "score": 10.0,
      "candidate": "from typing import List\n\n\ndef split_list_by_every_nth(items: List, n: int) -> List[List]:\n    \"\"\"Split a list for every nth element.\n\n    Args:\n        items (List): list of items\n        n (int): nth element\n\n    Examples:\n        >>> assert split_list_by_every_nth([1, 2, 3, 4, 5, 6], 2) == [[1, 2], [3, 4], [5, 6]]\n    \"\"\"\n    return [items[i : i + n] for i in range(0, len(items), n)]\n\n\nif __name__ == \"__main__\":\n    print(split_list_by_every_nth([1, 2, 3, 4, 5, 6], 2))"
    },
    {
      "rank": 19,
      "score": 10.0,
      "candidate": "from typing import List\n\n\ndef split_list(lst: List, n: int) -> List[List]:\n    \"\"\"Split a list for every nth element.\n\n    Args:\n        lst (List): list of elements\n        n (int): number of elements\n\n    Examples:\n        >>> assert split_list([1, 2, 3, 4, 5, 6, 7, 8, 9], 3) == [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n        >>> assert split_list([1, 2, 3, 4, 5, 6, 7, 8, 9], 4) == [[1, 2, 3, 4], [5, 6, 7, 8], [9]]\n\n    \"\"\"\n    return [lst[i : i + n] for i in range(0, len(lst), n)]\n\n\nif __name__ == \"__main__\":\n    print(split_list([1, 2, 3, 4, 5, 6, 7, 8, 9], 3))\n    print(split_list([1, 2, 3, 4, 5, 6, 7, 8, 9], 4))"
    },
    {
      "rank": 20,
      "score": 10.0,
      "candidate": "from typing import List\n\n\ndef split_list(lst: List, n: int) -> List[List]:\n    \"\"\"Splits a list for every nth element.\n\n    Args:\n        lst: list to split\n        n: how many elements to split by\n\n    Returns:\n        List of lists\n\n    Examples:\n        >>> assert split_list([1, 2, 3, 4, 5, 6], 2) == [[1, 2], [3, 4], [5, 6]]\n        >>> assert split_list([1, 2, 3, 4, 5, 6], 3) == [[1, 2, 3], [4, 5, 6]]\n        >>> assert split_list([1, 2, 3, 4, 5, 6], 6) == [[1, 2, 3, 4, 5, 6]]\n        >>> assert split_list([1, 2, 3, 4, 5, 6], 7) == [[1, 2, 3, 4, 5, 6]]\n    \"\"\"\n    return [lst[i::n] for i in range(n)]\n\n\nif __name__ == \"__main__\":\n    print(split_list([1, 2, 3, 4, 5, 6], 2))\n    print(split_list([1, 2, 3, 4, 5, 6], 3))\n    print(split_list([1, 2, 3, 4, 5, 6], 6))\n    print(split_list([1, 2, 3, 4, 5, 6], 7))"
    },
    {
      "rank": 21,
      "score": 10.0,
      "candidate": "def split_list_by_n(lst, n):\n    return [lst[i::n] for i in range(n)]\n\n\ndef test_split_list_by_n():\n    \"\"\"\n    >>> split_list_by_n([1, 2, 3, 4, 5, 6, 7, 8], 3)\n    [[1, 4, 7], [2, 5, 8], [3, 6]]\n    \"\"\"\n    pass\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 22,
      "score": 10.0,
      "candidate": "def split(items, n):\n    return [items[i::n] for i in range(n)]\n\n\nprint(split([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3))"
    },
    {
      "rank": 23,
      "score": 10.0,
      "candidate": "def split_every_nth(elements, n):\n    return [elements[i::n] for i in range(n)]"
    },
    {
      "rank": 24,
      "score": 10.0,
      "candidate": "def split_list(lst, n):\n    \"\"\"\n    >>> split_list([1, 2, 3, 4, 5, 6, 7, 8], 3)\n    [[1, 2, 3], [4, 5, 6], [7, 8]]\n    \"\"\"\n    return [lst[i : i + n] for i in range(0, len(lst), n)]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 25,
      "score": 10.0,
      "candidate": "from typing import List, Any\n\n\ndef split_list(lst: List[Any], n: int) -> List[List[Any]]:\n    \"\"\"Split a list for every nth element.\n\n    :param lst: List to split\n    :param n: nth element to split\n    :return: List of lists with nth element\n    \"\"\"\n    return [lst[i::n] for i in range(n)]\n\n\nif __name__ == \"__main__\":\n    print(split_list([1, 2, 3, 4, 5, 6, 7], 3))"
    },
    {
      "rank": 26,
      "score": 10.0,
      "candidate": "from typing import List\n\n\ndef split_list(n: int, nums: List[int]) -> List[List[int]]:\n    \"\"\"Splits a list for every nth element.\n\n    Args:\n        n (int): length of each chunk\n        nums (List[int]): input list\n\n    Examples:\n        >>> assert split_list(2, [1, 2, 3, 4, 5]) == [[1, 2], [3, 4], [5]]\n        >>> assert split_list(2, [1, 2]) == [[1, 2]]\n        >>> assert split_list(3, [1, 2, 3, 4, 5]) == [[1, 2, 3], [4, 5]]\n        >>> assert split_list(1, [1, 2, 3, 4, 5]) == [[1], [2], [3], [4], [5]]\n    \"\"\"\n    return [nums[i::n] for i in range(n)]\n\n\nif __name__ == \"__main__\":\n    print(split_list(2, [1, 2, 3, 4, 5]))\n    print(split_list(2, [1, 2]))\n    print(split_list(3, [1, 2, 3, 4, 5]))\n    print(split_list(1, [1, 2, 3, 4, 5]))"
    },
    {
      "rank": 27,
      "score": 9.0,
      "candidate": "def split_list_nth(lst, n):\n    return [lst[i::n] for i in range(n)]\n\n\ndef main():\n    print(\"Printing list for every 2nd element:\")\n    lst = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    print(split_list_nth(lst, 2))\n\n    print(\"Printing list for every 3rd element:\")\n    lst = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    print(split_list_nth(lst, 3))\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 28,
      "score": 9.0,
      "candidate": "def split_list(lst, n):\n    \"\"\"\n    >>> split_list([1, 2, 3, 4, 5, 6, 7, 8, 9], 4)\n    [[1, 2, 3, 4], [5, 6, 7, 8], [9]]\n    \"\"\"\n    return [lst[i : i + n] for i in range(0, len(lst), n)]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 29,
      "score": 9.0,
      "candidate": "def split_every_nth(n, iterable):\n    \"\"\"\n    >>> split_every_nth(3, [1, 2, 3, 4, 5, 6, 7, 8])\n    [[1, 4, 7], [2, 5, 8], [3, 6]]\n    \"\"\"\n    res = []\n    for i in range(0, len(iterable), n):\n        res.append(iterable[i:i + n])\n    return res\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 30,
      "score": 8.0,
      "candidate": "from typing import List\n\n\ndef split(n: int, lst: List) -> List:\n    \"\"\"Split a list for every nth element.\n\n    Args:\n        n (int): the nth element.\n        lst (List): the list to split.\n\n    Returns:\n        List: the split list.\n    \"\"\"\n    return [lst[i::n] for i in range(n)]\n\n\ndef main():\n    lst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    print(split(3, lst))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 31,
      "score": 8.0,
      "candidate": "from typing import List\n\n\ndef split_list(lst: List[int], n: int) -> List[List[int]]:\n    \"\"\"Split a list for every nth element.\n\n    >>> split_list([1, 2, 3, 4, 5, 6], 2)\n    [[1, 2], [3, 4], [5, 6]]\n\n    >>> split_list([1, 2, 3, 4, 5, 6], 3)\n    [[1, 2, 3], [4, 5, 6]]\n\n    >>> split_list([1, 2, 3, 4, 5, 6], 4)\n    [[1, 2, 3, 4], [5, 6]]\n\n    >>> split_list([1, 2, 3, 4, 5, 6], 7)\n    [[1, 2, 3, 4, 5, 6]]\n\n    >>> split_list([1, 2, 3, 4, 5, 6], 0)\n    []\n\n    >>> split_list([], 7)\n    []\n    \"\"\"\n    return [lst[i : i + n] for i in range(0, len(lst), n)]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 32,
      "score": 8.0,
      "candidate": "from itertools import islice\n\n\ndef split_every_nth(iterable, nth):\n    \"s -> (s0, s1, s2, ...), (s1, s2, ...), (s2, ...)\"\n    it = iter(iterable)\n    while True:\n        chunk_it = islice(it, nth)\n        try:\n            first = next(chunk_it)\n        except StopIteration:\n            return\n        yield chain([first], chunk_it)\n\n\nif __name__ == \"__main__\":\n    print(list(split_every_nth([1, 2, 3, 4, 5, 6, 7, 8, 9], 2)))"
    },
    {
      "rank": 33,
      "score": 8.0,
      "candidate": "def split_list(lst, nth):\n    # Check if nth is greater than or equal to length of list.\n    if nth >= len(lst):\n        return [lst]\n\n    result = []\n    temp = []\n\n    for index, element in enumerate(lst):\n        if index % nth == 0:\n            result.append(temp)\n            temp = []\n        temp.append(element)\n\n    result.append(temp)\n\n    return result\n\n\nif __name__ == '__main__':\n    print(split_list([1, 2, 3, 4, 5, 6, 7, 8], 3))"
    },
    {
      "rank": 34,
      "score": 8.0,
      "candidate": "def split_list(input_list, n):\n    \"\"\"Splits a list for every nth element.\"\"\"\n    return [input_list[i::n] for i in range(n)]"
    },
    {
      "rank": 35,
      "score": 8.0,
      "candidate": "def split_every_nth(n, iterable):\n    return [iterable[i::n] for i in range(n)]\n\n\ndef test_split_every_nth():\n    assert split_every_nth(2, [1, 2, 3, 4, 5]) == [[1, 2], [3, 4], [5]]\n    assert split_every_nth(3, [1, 2, 3, 4, 5]) == [[1], [2], [3, 4, 5]]"
    },
    {
      "rank": 36,
      "score": 8.0,
      "candidate": "def split_every_n(l, n):\n    \"\"\"Split a list for every nth element.\"\"\"\n    return [l[i::n] for i in range(n)]"
    },
    {
      "rank": 37,
      "score": 8.0,
      "candidate": "from copy import deepcopy\n\n\ndef split_list_by(list_to_split, n):\n    \"\"\"\n    Splits a list for every nth element.\n    \"\"\"\n    result = []\n    sub_list = []\n    for i, elem in enumerate(list_to_split):\n        sub_list.append(elem)\n        if i % n == 0 and i > 0:\n            sub_list = deepcopy(sub_list)\n            result.append(sub_list)\n            sub_list = []\n\n    if sub_list:\n        result.append(sub_list)\n\n    return result"
    },
    {
      "rank": 38,
      "score": 8.0,
      "candidate": "def split_every_nth(elements, n):\n    result = []\n    for i in range(0, len(elements), n):\n        result.append(elements[i:i+n])\n    return result\n\nif __name__ == '__main__':\n    print(split_every_nth([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3))\n    print(split_every_nth([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 4))\n    print(split_every_nth([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5))\n    print(split_every_nth([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 6))\n    print(split_every_nth([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 7))\n    print(split_every_nth([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 8))\n    print(split_every_nth([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 9))\n    print(split_every_nth([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 10))\n    print(split_every_nth([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 11))"
    },
    {
      "rank": 39,
      "score": 8.0,
      "candidate": "def split_every_nth(lst, n):\n    \"\"\"Split a list for every nth element.\"\"\"\n    return [lst[i:i + n] for i in range(0, len(lst), n)]"
    },
    {
      "rank": 40,
      "score": 8.0,
      "candidate": "from itertools import islice\n\n\ndef split_every_nth(iterable, n):\n    \"\"\"Split a list for every nth element.\n\n    :param iterable: a list\n    :param n: the number of elements to split\n    :return: a list of lists\n    \"\"\"\n    it = iter(iterable)\n    return list(list(islice(it, i, None, n)) for i in range(0, n))"
    },
    {
      "rank": 41,
      "score": 8.0,
      "candidate": "def split_list(lst, n):\n    return [lst[i::n] for i in range(n)]\n\n\nif __name__ == \"__main__\":\n    lst = [1, 2, 3, 4, 5, 6]\n    print(split_list(lst, 2))"
    },
    {
      "rank": 42,
      "score": 8.0,
      "candidate": "from unittest import TestCase\nfrom random import randint\n\n\ndef split(lst, n):\n    result = []\n\n    for i in range(len(lst)):\n        if i % n == 0:\n            result.append([])\n        result[-1].append(lst[i])\n\n    return result\n\n\nclass TestSplit(TestCase):\n    def test_split(self):\n        assert split([1, 2, 3, 4, 5, 6, 7, 8, 9], 3) == [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n        assert split([1, 2, 3, 4, 5, 6, 7, 8, 9], 2) == [[1, 2], [3, 4], [5, 6], [7, 8], [9]]\n        assert split([1, 2, 3, 4, 5, 6, 7, 8, 9], 1) == [[1], [2], [3], [4], [5], [6], [7], [8], [9]]\n        assert split([1, 2, 3, 4, 5, 6, 7, 8, 9], 4) == [[1, 2, 3, 4], [5, 6, 7, 8], [9]]\n\n        elements = list(range(10))\n        for i in range(10):\n            random_n = randint(1, 10)\n            assert split(elements, random_n) == split(reversed(elements), random_n)"
    },
    {
      "rank": 43,
      "score": 8.0,
      "candidate": "def split_list(lst, n):\n    \"\"\"Splits list at every nth element.\n\n    Args:\n        lst: List to split\n        n: Index to split at\n    \"\"\"\n    return [lst[i:i + n] for i in range(0, len(lst), n)]\n\n\ndef main():\n    print(split_list([1, 2, 3, 4, 5, 6], 2))\n    print(split_list([1, 2, 3, 4, 5, 6, 7, 8], 3))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 44,
      "score": 8.0,
      "candidate": "from typing import List\n\n\ndef split_list(lst: List[int], n: int) -> List[List[int]]:\n    \"\"\"Split a list for every nth element.\n\n    Args:\n        lst (List[int]): list of elements\n        n (int): nth element\n\n    Returns:\n        List[List[int]]: splitted list\n\n    Examples:\n        >>> assert split_list([1, 2, 3, 4, 5, 6, 7, 8], 3) == [[1, 2, 3], [4, 5, 6], [7, 8]]\n    \"\"\"\n    return [lst[i:i + n] for i in range(0, len(lst), n)]\n\n\ndef split_list_compact(lst: List[int], n: int) -> List[List[int]]:\n    \"\"\"Split a list for every nth element.\n\n    Args:\n        lst (List[int]): list of elements\n        n (int): nth element\n\n    Returns:\n        List[List[int]]: splitted list\n\n    Examples:\n        >>> assert split_list([1, 2, 3, 4, 5, 6, 7, 8], 3) == [[1, 2, 3], [4, 5, 6], [7, 8]]\n    \"\"\"\n    return [lst[i::n] for i in range(n)]\n\n\ndef main():\n    print(split_list([1, 2, 3, 4, 5, 6, 7, 8], 3))\n    print(split_list_compact([1, 2, 3, 4, 5, 6, 7, 8], 3))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 45,
      "score": 8.0,
      "candidate": "def split_every_nth(iterable, n):\n    for i in range(0, len(iterable), n):\n        yield iterable[i:i+n]\n\n\n# Tests\n\ndef test_split_every_nth():\n    assert list(split_every_nth([1, 2, 3, 4, 5, 6], 2)) == [[1, 2], [3, 4], [5, 6]]\n    assert list(split_every_nth([1, 2, 3, 4, 5, 6, 7], 3)) == [[1, 2, 3], [4, 5, 6], [7]]\n    assert list(split_every_nth([1, 2, 3, 4, 5, 6, 7, 8], 2)) == [[1, 2], [3, 4], [5, 6], [7, 8]]\n    assert list(split_every_nth([1, 2, 3, 4, 5, 6, 7, 8, 9], 2)) == [[1, 2], [3, 4], [5, 6], [7, 8], [9]]"
    },
    {
      "rank": 46,
      "score": 8.0,
      "candidate": "from typing import List\n\n\ndef split_list(a_list: List, nth: int) -> List[List]:\n    \"\"\"Splits a list for every nth element.\n\n    Args:\n        a_list (List): list of elements\n        nth (int): nth element to split the list\n\n    Returns:\n        List[List]: list of lists\n\n    Examples:\n        >>> split_list([1, 2, 3, 4, 5, 6], 3)\n        [[1, 2, 3], [4, 5, 6]]\n        >>> split_list([1, 2, 3, 4, 5, 6, 7], 3)\n        [[1, 2, 3], [4, 5, 6], [7]]\n    \"\"\"\n    return [a_list[i:i + nth] for i in range(0, len(a_list), nth)]\n\n\ndef main():\n    print(split_list([1, 2, 3, 4, 5, 6], 3))\n    print(split_list([1, 2, 3, 4, 5, 6, 7], 3))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 47,
      "score": 8.0,
      "candidate": "from copy import deepcopy\n\n\ndef split_list(lst, n):\n    \"\"\"Split a list for every nth element.\"\"\"\n    if n < 1:\n        raise ValueError(\"n must be greater than zero\")\n    elif n > len(lst):\n        raise ValueError(\"n must be less than or equal to the length of the list\")\n\n    split_list = []\n\n    split_list.append(deepcopy(lst[:n]))\n\n    for i in range(n, len(lst), n):\n        split_list.append(deepcopy(lst[i:i+n]))\n\n    return split_list"
    },
    {
      "rank": 48,
      "score": 8.0,
      "candidate": "def split_list(list_to_split, n):\n    return [list_to_split[i::n] for i in range(n)]\n\n\ndef split_list_2(list_to_split, n):\n    return [list_to_split[i::n] for i in range(len(list_to_split))]\n\n\ndef split_list_3(list_to_split, n):\n    return [list_to_split[i::n] for i in range(len(list_to_split)//n)]\n\n\ndef split_list_4(list_to_split, n):\n    return [list_to_split[i::n] for i in range(len(list_to_split)//n + 1)]\n\n\ndef main():\n    list_to_split = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    print(split_list(list_to_split, 2))\n    print(split_list_2(list_to_split, 2))\n    print(split_list_3(list_to_split, 2))\n    print(split_list_4(list_to_split, 2))\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 49,
      "score": 8.0,
      "candidate": "def split_every_nth(iterable, nth):\n    \"\"\"Split a list for every nth element.\n\n    Splits a list for every nth element.\n\n    Args:\n        iterable: the list to split\n        nth: the nth element to split on\n\n    Returns:\n        the new list\n    \"\"\"\n    return [iterable[i::nth] for i in range(nth)]"
    },
    {
      "rank": 50,
      "score": 8.0,
      "candidate": "def split_list(lst, n):\n    return [lst[i::n] for i in range(n)]\n\n\ndef main():\n    print(\"Here is the list:\", split_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3))\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 51,
      "score": 8.0,
      "candidate": "def split_every_nth(iterable, nth):\n    \"\"\"Splits the list for every nth element.\"\"\"\n    return [iterable[i::nth] for i in range(nth)]"
    },
    {
      "rank": 52,
      "score": 8.0,
      "candidate": "def split_list(items, n):\n    \"\"\"\n    :param items: list of items\n    :param n: index of item to split on\n    :return: list of lists\n    \"\"\"\n    return [items[i:i + n] for i in range(0, len(items), n)]"
    },
    {
      "rank": 53,
      "score": 8.0,
      "candidate": "def split_every_nth(iterable, nth):\n    return [iterable[i::nth] for i in range(nth)]"
    },
    {
      "rank": 54,
      "score": 8.0,
      "candidate": "def split_list(list_input, n):\n    \"\"\"\n    Splits a list for every nth element.\n    \"\"\"\n    return [list_input[i::n] for i in range(n)]"
    },
    {
      "rank": 55,
      "score": 8.0,
      "candidate": "from copy import deepcopy\n\n\ndef split_list_nth(lst, n):\n    \"\"\"\n    Split a list for every nth element.\n    :param lst: List of elements.\n    :param n: Split value.\n    :return: New list.\n    \"\"\"\n    new_list = []\n    for i in range(0, len(lst), n):\n        new_list.append(deepcopy(lst[i:i + n]))\n    return new_list"
    },
    {
      "rank": 56,
      "score": 8.0,
      "candidate": "def split_every_nth(n, iterable):\n    \"\"\"Split a list every nth element.\n\n    Args:\n        n (int): Number of element to split list.\n        iterable (list): List of elements.\n\n    Returns:\n        list: Split list.\n    \"\"\"\n    return [iterable[i::n] for i in range(n)]"
    },
    {
      "rank": 57,
      "score": 8.0,
      "candidate": "from itertools import islice\n\n\ndef split_every_nth(elements, n):\n    \"\"\"Returns a list of lists with every nth element.\"\"\"\n    return [list(islice(elements, i, None, n)) for i in range(n)]\n\n\ndef main():\n    list_a = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]\n    print(split_every_nth(list_a, 4))\n    print(split_every_nth(list_a, 2))\n    print(split_every_nth(list_a, 3))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 58,
      "score": 8.0,
      "candidate": "def split_list(n, lst):\n    # if n is negative, return empty list\n    if n < 0:\n        return []\n    # if n is 0, return original list\n    if n == 0:\n        return lst\n    # if list is empty, return empty list\n    if not lst:\n        return []\n    # else return split list\n    return [lst[i:i + n] for i in range(0, len(lst), n)]\n\n\ndef split_list2(n, lst):\n    # if n is negative, return empty list\n    if n < 0:\n        return []\n    # if n is 0, return original list\n    if n == 0:\n        return lst\n    # if list is empty, return empty list\n    if not lst:\n        return []\n    # else return split list\n    return [lst[i::n] for i in range(n)]"
    },
    {
      "rank": 59,
      "score": 8.0,
      "candidate": "from itertools import islice\n\ndef split_list(iterable, n):\n    \"\"\"\n    >>> list(split_list([1, 2, 3, 4, 5, 6], 2))\n    [[1, 2], [3, 4], [5, 6]]\n    >>> list(split_list([1, 2, 3, 4, 5, 6], 3))\n    [[1, 2, 3], [4, 5, 6]]\n    >>> list(split_list([1, 2, 3, 4, 5, 6], 5))\n    [[1, 2, 3, 4, 5], [6]]\n    >>> list(split_list([1, 2, 3, 4, 5, 6], 6))\n    [[1, 2, 3, 4, 5, 6]]\n    \"\"\"\n    for i in range(0, len(iterable), n):\n        yield iterable[i:i + n]\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 60,
      "score": 8.0,
      "candidate": "def split_every_nth(n, iterable):\n    return [iterable[i::n] for i in range(n)]\n\n\ndef test_split_every_nth():\n    \"\"\"Test for split_every_nth.\"\"\"\n    assert split_every_nth(2, [1, 2, 3, 4]) == [[1, 3], [2, 4]]\n    assert split_every_nth(2, [1, 2, 3, 4, 5]) == [[1, 3, 5], [2, 4]]\n    assert split_every_nth(3, [1, 2, 3, 4, 5]) == [[1, 4], [2, 5], [3]]\n    assert split_every_nth(3, [1, 2, 3, 4, 5, 6]) == [[1, 4, 6], [2, 5], [3]]\n    assert split_every_nth(4, [1, 2, 3, 4, 5, 6]) == [[1, 3], [2, 5], [4, 6], [5]]"
    },
    {
      "rank": 61,
      "score": 8.0,
      "candidate": "def split_every_nth(array, n):\n    \"\"\"Splits a list for every nth element.\"\"\"\n    return [array[i:i+n] for i in range(0, len(array), n)]\n\n\ndef test_split_every_nth():\n    \"\"\"Test for split_every_nth.\"\"\"\n    assert split_every_nth([1, 2, 3, 4, 5], 2) == [[1, 2], [3, 4], [5]]\n\n\ndef main():\n    \"\"\"Main function.\"\"\"\n    array = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    print(split_every_nth(array, 2))\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 62,
      "score": 8.0,
      "candidate": "from itertools import islice\n\n\ndef split_every(n, iterable):\n    \"\"\"Split a list for every nth element.\n\n    >>> split_every(2, [1, 2, 3, 4, 5, 6])\n    [[1, 3, 5], [2, 4, 6]]\n    \"\"\"\n    i = iter(iterable)\n    return [list(islice(i, n - 1, n)) + list(i) for i in iter(lambda: list(islice(i, n)), [])]"
    },
    {
      "rank": 63,
      "score": 8.0,
      "candidate": "def split_every_nth(elements, n):\n    return [elements[i::n] for i in range(n)]\n\n\ndef split_every_nth_2(elements, n):\n    return [elements[i::n] for i in range(len(elements)//n)]"
    },
    {
      "rank": 64,
      "score": 8.0,
      "candidate": "def split_every_nth(iterable, n=2):\n    \"\"\"Splits a list for every nth element.\"\"\"\n    return list(iterable[i::n] for i in range(n))"
    },
    {
      "rank": 65,
      "score": 7.0,
      "candidate": "from unittest import TestCase\n\n\ndef split_list(lst, n):\n    result = []\n    for i in range(len(lst)):\n        if i % n == 0:\n            result.append([])\n        result[-1].append(lst[i])\n    return result\n\n\nclass TestSplitList(TestCase):\n\n    def test_split_list(self):\n        assert split_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3) == [[1, 2, 3], [4, 5, 6], [7, 8, 9], [10]]"
    },
    {
      "rank": 66,
      "score": 1.0,
      "candidate": "from typing import List, Optional\n\n\ndef split_list_by_n(\n    data: List, n: int, start: Optional[int] = 0\n) -> List[List]:\n    \"\"\"Split a list for every nth element.\n\n    :param data: list to split\n    :param n: nth element\n    :param start: start position\n    :return: list of lists\n    \"\"\"\n    return [\n        data[start::n],\n        data[n::n],\n        data[2 * n::n],\n        data[3 * n::n],\n        data[4 * n::n],\n    ]\n\n\nif __name__ == \"__main__\":\n    print(split_list_by_n([1, 2, 3, 4, 5, 6, 7, 8, 9], 2))\n    print(split_list_by_n([1, 2, 3, 4, 5, 6, 7, 8, 9], 2, start=2))"
    },
    {
      "rank": 67,
      "score": 1.0,
      "candidate": "from typing import List\n\n\ndef split_list(lst: List[int], n: int) -> List[List[int]]:\n    \"\"\"Split list for every nth element.\n\n    Args:\n        lst (List[int]): list to split\n        n (int): nth element to split at\n\n    Returns:\n        List[List[int]]: list of lists\n\n    Examples:\n        >>> assert split_list([1, 2, 3, 4, 5, 6], 2) == [[1, 2], [3, 4], [5, 6]]\n    \"\"\"\n    return [lst[i : i + n] for i in range(0, len(lst), n)]\n\n\nif __name__ == \"__main__\":\n    print(split_list([1, 2, 3, 4, 5, 6], 2))"
    },
    {
      "rank": 68,
      "score": 1.0,
      "candidate": "def split_list(input_list, n):\n    result = []\n    for i in range(0, len(input_list), n):\n        result.append(input_list[i:i + n])\n    return result\n\n\nprint(split_list([1, 2, 3, 4, 5, 6], 2))\nprint(split_list([1, 2, 3, 4, 5, 6, 7, 8, 9], 3))"
    },
    {
      "rank": 69,
      "score": 1.0,
      "candidate": "from typing import List\n\n\ndef split_list(array: List[int], n: int) -> List[List[int]]:\n    \"\"\"Splits list for every nth element.\n\n    Args:\n        array: list of integers\n        n: size of each sub-list\n\n    Returns:\n        a list of lists\n\n    Examples:\n        >>> assert split_list([1, 2, 3, 4, 5, 6, 7, 8], 2) == [[1, 2], [3, 4], [5, 6], [7, 8]]\n    \"\"\"\n    return [array[i : i + n] for i in range(0, len(array), n)]\n\n\nif __name__ == \"__main__\":\n    print(split_list([1, 2, 3, 4, 5, 6, 7, 8], 2))"
    },
    {
      "rank": 70,
      "score": 1.0,
      "candidate": "from unittest import TestCase\nfrom utils.utils import split_every_nth\n\n\nclass TestSplitEveryNth(TestCase):\n\n    def test_split_every_nth(self):\n        assert split_every_nth([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3) == [[1, 2, 3], [4, 5, 6], [7, 8, 9], [10]]\n        assert split_every_nth([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 1) == [[1], [2], [3], [4], [5], [6], [7], [8], [9], [10]]\n        assert split_every_nth([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 10) == [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]]\n        assert split_every_nth([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2) == [[1, 2], [3, 4], [5, 6], [7, 8], [9, 10]]\n        assert split_every_nth([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3) == [[1, 2, 3], [4, 5, 6], [7, 8, 9], [10]]\n        assert split_every_nth([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 4) == [[1, 2, 3, 4], [5, 6, 7, 8], [9, 10]]\n        assert split_every_nth([1, 2, 3, 4,"
    },
    {
      "rank": 71,
      "score": 1.0,
      "candidate": "from typing import List\n\n\ndef split_list_by_n(nums: List[int], n: int) -> List[List[int]]:\n    \"\"\"Split a list for every nth element.\n\n    Args:\n        nums (List[int]): input list\n        n (int): split every nth element\n\n    Returns:\n        List[List[int]]: split list\n\n    Examples:\n        >>> split_list_by_n([1, 2, 3, 4, 5, 6, 7, 8, 9], 3)\n        [[1, 4, 7], [2, 5, 8], [3, 6, 9]]\n        >>> split_list_by_n([1, 2, 3, 4, 5, 6, 7, 8, 9], 4)\n        [[1, 5, 9], [2, 6, 8], [3, 7]]\n        >>> split_list_by_n([1, 2, 3, 4, 5, 6, 7, 8, 9], 5)\n        [[1, 6, 11], [2, 7, 12], [3, 8, 13], [4, 9, None]]\n    \"\"\"\n\n    def _split(nums: List[int], n: int) -> List[List[int]]:\n        if not nums:\n            return [[]]\n        if n == 1:\n            return [nums]\n        return [nums[:n]] + _split(nums[n:], n)\n\n    return _split(nums, n)\n\n\nif __name__ == \"__main__\":\n    print(split_list_by_n([1, 2, 3, 4, 5, 6, 7, 8, 9], 3))\n    print(split_list_by_n([1, 2, 3, 4, 5, 6, 7, 8, 9], 4))\n    print(split_list_by_n([1,"
    },
    {
      "rank": 72,
      "score": 1.0,
      "candidate": "def split_every_nth(iterable, n=2):\n    \"\"\"Splits a list every nth element.\"\"\"\n    return [iterable[i::n] for i in range(n)]\n\n\ndef main():\n    print(split_every_nth([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]))\n    print(split_every_nth([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], n=3))\n    print(split_every_nth([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], n=5))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 73,
      "score": 1.0,
      "candidate": "from typing import List, Any\n\n\ndef split_every_nth(array: List[Any], n: int) -> List[List[Any]]:\n    \"\"\"Splits a list into a list of lists.\n\n    Args:\n        array: list to be split\n        n: the element to split by\n\n    Returns:\n        list of lists\n    \"\"\"\n    if n == 0:\n        return []\n\n    return [\n        array[i * n : i * n + n] for i in range(0, int(len(array) / n))\n    ]\n\n\nif __name__ == \"__main__\":\n    print(split_every_nth([1, 2, 3, 4, 5, 6, 7, 8], 3))"
    },
    {
      "rank": 74,
      "score": 1.0,
      "candidate": "from typing import List, Optional\n\n\ndef split_every_nth(items: List, n: int) -> List[Optional[List]]:\n    \"\"\"Splits a list in chunks of n elements.\n\n    Args:\n        items: list of elements\n        n: chunk size\n\n    Returns:\n        list of chunks\n    \"\"\"\n    return [items[i : i + n] for i in range(0, len(items), n)]\n\n\nif __name__ == \"__main__\":\n    print(split_every_nth([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3))"
    },
    {
      "rank": 75,
      "score": 1.0,
      "candidate": "from typing import List\n\n\ndef split_list(array: List[int], n: int) -> List[List[int]]:\n    \"\"\"Split the list.\n\n    Args:\n        array: The list to split.\n        n: The number of elements in the sub list.\n\n    Returns:\n        The split list.\n    \"\"\"\n    return [array[i : i + n] for i in range(0, len(array), n)]\n\n\nif __name__ == \"__main__\":\n    list_ = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    print(split_list(list_, 3))"
    },
    {
      "rank": 76,
      "score": 1.0,
      "candidate": "from unittest import TestCase\n\n\ndef split_list_by_n(list_to_split, n):\n    return [list_to_split[i::n] for i in range(n)]\n\n\nclass TestSplitList(TestCase):\n    def test_split_list(self):\n        assert split_list_by_n([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\"], 2) == [\n            [\"a\", \"c\", \"e\"],\n            [\"b\", \"d\", \"f\"],\n        ]"
    },
    {
      "rank": 77,
      "score": 1.0,
      "candidate": "from unittest import TestCase\n\n\ndef split_list_every_nth(list_to_split, n):\n    return [list_to_split[i::n] for i in range(n)]\n\n\nclass TestSplitList(TestCase):\n    def test_split_list_every_nth(self):\n        assert split_list_every_nth([1, 2, 3, 4, 5, 6, 7, 8, 9], 3) == [[1, 2, 3], [4, 5, 6], [7, 8, 9]]"
    },
    {
      "rank": 78,
      "score": 1.0,
      "candidate": "from unittest import TestCase\n\n\ndef split_list_on(lst, n):\n    return [lst[i::n] for i in range(n)]\n\n\nclass TestSplitList(TestCase):\n\n    def test_split_list_on(self):\n        assert split_list_on([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3) == [[1, 2, 3], [4, 5, 6], [7, 8, 9], [10]]\n        assert split_list_on([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 4) == [[1, 2, 3, 4], [5, 6, 7, 8], [9, 10]]\n        assert split_list_on([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5) == [[1, 2, 3, 4, 5], [6, 7, 8, 9, 10]]\n        assert split_list_on([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 10) == [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]]\n        assert split_list_on([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2) == [[1, 2], [3, 4], [5, 6], [7, 8], [9, 10]]\n        assert split_list_on([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 1) == [[1], [2], [3], [4], [5], [6], [7], [8], [9], [10]]"
    },
    {
      "rank": 79,
      "score": 1.0,
      "candidate": "from typing import List\n\n\ndef split(lst: List, n: int) -> List[List]:\n    \"\"\"Split a list for every nth element.\n\n    >>> split([1, 2, 3, 4, 5, 6, 7, 8, 9], 3)\n    [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    >>> split([1, 2, 3, 4, 5, 6, 7, 8, 9], 2)\n    [[1, 2], [3, 4], [5, 6], [7, 8], [9]]\n    >>> split([1, 2, 3, 4, 5, 6, 7, 8, 9], 0)\n    [[1], [2], [3], [4], [5], [6], [7], [8], [9]]\n    >>> split([1, 2, 3, 4, 5, 6, 7, 8, 9], 10)\n    [[1, 2, 3, 4, 5, 6, 7, 8, 9]]\n    \"\"\"\n    return [lst[i : i + n] for i in range(0, len(lst), n)]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 80,
      "score": 1.0,
      "candidate": "from typing import List\n\n\ndef split_list_by_n(l: List, n: int) -> List[List]:\n    \"\"\"Split a list for every nth element.\n\n    Args:\n        l: list to be splitted.\n        n: number to split.\n\n    Examples:\n        >>> assert split_list_by_n([1, 2, 3, 4, 5, 6, 7, 8], 3) == [[1, 2, 3], [4, 5, 6], [7, 8]]\n    \"\"\"\n    return [l[i : i + n] for i in range(0, len(l), n)]\n\n\nif __name__ == \"__main__\":\n    print(split_list_by_n([1, 2, 3, 4, 5, 6, 7, 8], 3))"
    },
    {
      "rank": 81,
      "score": 1.0,
      "candidate": "def split_every_nth(a_list, n):\n    # if n == 0:\n    #     return [[]]\n    #\n    # res = [a_list[:n]]\n    # res += split_every_nth(a_list[n:], n)\n    # return res\n\n    # return [a_list[i::n] for i in range(n)]\n    return [a_list[i::n] for i in range(n)]\n\n\nprint(split_every_nth([1, 2, 3, 4, 5, 6, 7, 8], 2))\nprint(split_every_nth([1, 2, 3, 4, 5, 6, 7, 8], 3))\nprint(split_every_nth([1, 2, 3, 4, 5, 6, 7, 8], 4))\nprint(split_every_nth([1, 2, 3, 4, 5, 6, 7, 8], 5))"
    },
    {
      "rank": 82,
      "score": 1.0,
      "candidate": "def split_list(lst, n):\n    return [lst[i::n] for i in range(n)]\n\nif __name__ == '__main__':\n    import time\n    import random\n\n    lst = [i for i in range(1000)]\n    random.shuffle(lst)\n\n    start_time = time.time()\n    split_list(lst, 10)\n    print(\"Time elapsed: {}\".format(time.time() - start_time))"
    },
    {
      "rank": 83,
      "score": 1.0,
      "candidate": "from typing import List\n\n\ndef split_every_nth(lst: List[int], n: int) -> List[List[int]]:\n    \"\"\"Split a list for every nth element.\n\n    Args:\n        lst (List[int]): list of integers.\n        n (int): the nth element.\n\n    Returns:\n        List[List[int]]: list of lists of integers.\n    \"\"\"\n    return [lst[i : i + n] for i in range(0, len(lst), n)]\n\n\nif __name__ == \"__main__\":\n    print(split_every_nth([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3))"
    },
    {
      "rank": 84,
      "score": 1.0,
      "candidate": "def split_list_by_n(lst, n):\n    \"\"\"\n    >>> split_list_by_n([1, 2, 3, 4, 5, 6, 7, 8], 3)\n    [[1, 2, 3], [4, 5, 6], [7, 8]]\n    \"\"\"\n    return [lst[i:i + n] for i in range(0, len(lst), n)]"
    },
    {
      "rank": 85,
      "score": 1.0,
      "candidate": "from typing import List, Optional\n\n\ndef split_list(lst: List[int], n: int) -> Optional[List[int]]:\n    \"\"\"Split a list for every nth element.\n\n    Args:\n        lst (List[int]): list of integers\n        n (int): nth element\n\n    Returns:\n        Optional[List[int]]: list of integers\n    \"\"\"\n    if not lst or n < 1:\n        return None\n\n    return [lst[i::n] for i in range(n)]\n\n\nif __name__ == \"__main__\":\n    print(split_list([1, 2, 3, 4, 5, 6, 7, 8, 9], 2))\n    print(split_list([1, 2, 3, 4, 5, 6, 7, 8, 9], 3))\n    print(split_list([1, 2, 3, 4, 5, 6, 7, 8, 9], 4))\n    print(split_list([1, 2, 3, 4, 5, 6, 7, 8, 9], 5))\n    print(split_list([1, 2, 3, 4, 5, 6, 7, 8, 9], 6))\n    print(split_list([1, 2, 3, 4, 5, 6, 7, 8, 9], 7))\n    print(split_list([1, 2, 3, 4, 5, 6, 7, 8, 9], 8))\n    print(split_list([1, 2, 3, 4, 5, 6, 7, 8, 9], 9))\n    print(split_list([1, 2, 3, 4, 5, 6, 7, 8, 9], 10))\n    print(split_list([1, 2, 3, 4, 5, 6, 7, 8, 9], 0))"
    },
    {
      "rank": 86,
      "score": 1.0,
      "candidate": "from typing import List\n\n\ndef split_list(arr: List[int], n: int) -> List[List[int]]:\n    \"\"\"Split list by every nth element.\n\n    Args:\n        arr (List[int]): list to split\n        n (int): every nth element\n\n    Returns:\n        List[List[int]]: split list\n    \"\"\"\n    res = []\n    start = 0\n    while start < len(arr):\n        end = start + n\n        res.append(arr[start:end])\n        start = end\n    return res\n\n\nif __name__ == \"__main__\":\n    print(split_list([1, 2, 3, 4, 5, 6], 2))\n    print(split_list([1, 2, 3, 4, 5, 6], 3))\n    print(split_list([1, 2, 3, 4, 5, 6], 4))\n    print(split_list([1, 2, 3, 4, 5, 6], 5))\n    print(split_list([1, 2, 3, 4, 5, 6], 6))"
    },
    {
      "rank": 87,
      "score": 1.0,
      "candidate": "from itertools import islice\n\n\ndef split_list_by_n(lst, n):\n    \"\"\"Splits a list for every nth element.\"\"\"\n    return [lst[i::n] for i in range(n)]\n\n\ndef split_list_by_n_iter(lst, n):\n    \"\"\"Splits a list for every nth element.\"\"\"\n    return [list(islice(lst, i, None, n)) for i in range(n)]"
    },
    {
      "rank": 88,
      "score": 1.0,
      "candidate": "from typing import List\n\n\ndef split_list(lst: List[int], n: int) -> List[List[int]]:\n    \"\"\"Split a list for every nth element.\n\n    Args:\n        lst (List[int]): given list\n        n (int): nth element\n\n    Examples:\n        >>> assert split_list([1, 2, 3, 4, 5, 6, 7, 8, 9], 4) == [[1, 2, 3, 4], [5, 6, 7, 8], [9]]\n    \"\"\"\n    return [lst[i::n] for i in range(n)]\n\n\nif __name__ == \"__main__\":\n    print(split_list([1, 2, 3, 4, 5, 6, 7, 8, 9], 4))"
    },
    {
      "rank": 89,
      "score": 1.0,
      "candidate": "def split_list(n, my_list):\n    return [my_list[i::n] for i in range(n)]\n\n\ndef test_split_list():\n    \"\"\"Test for split_list function.\"\"\"\n    assert split_list(5, [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [\n        [1, 6],\n        [2, 7],\n        [3, 8],\n        [4, 9],\n        [5, 10],\n    ]\n\n\nif __name__ == \"__main__\":\n    print(split_list(5, [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))"
    },
    {
      "rank": 90,
      "score": 1.0,
      "candidate": "from typing import List\n\n\ndef split_every_nth(elements: List, n: int) -> List[List]:\n    \"\"\"Split a list for every nth element.\n\n    Args:\n        elements (List): list of elements\n        n (int): index of the element where to split the list\n\n    Returns:\n        List[List]: list of split lists\n\n    Examples:\n        >>> split_every_nth([1, 2, 3, 4, 5, 6, 7, 8], 2)\n        [[1, 2], [3, 4], [5, 6], [7, 8]]\n\n    \"\"\"\n    return [elements[i : i + n] for i in range(0, len(elements), n)]\n\n\nif __name__ == \"__main__\":\n    print(split_every_nth([1, 2, 3, 4, 5, 6, 7, 8], 2))"
    },
    {
      "rank": 91,
      "score": 1.0,
      "candidate": "from typing import List\n\n\ndef split_list(list_: List[int], n: int) -> List[List[int]]:\n    \"\"\"Split list for every nth element.\n\n    Args:\n        list_ (List[int]): list of integers\n        n (int): every nth element\n\n    Examples:\n        >>> assert split_list([1, 2, 3, 4, 5, 6, 7, 8], 2) == [[1, 2], [3, 4], [5, 6], [7, 8]]\n        >>> assert split_list([1, 2, 3, 4, 5, 6, 7, 8], 3) == [[1, 2, 3], [4, 5, 6], [7, 8]]\n        >>> assert split_list([1, 2, 3, 4, 5, 6, 7, 8], 4) == [[1, 2, 3, 4], [5, 6, 7, 8]]\n    \"\"\"\n    return [list_[i : i + n] for i in range(0, len(list_), n)]\n\n\nif __name__ == \"__main__\":\n    print(split_list([1, 2, 3, 4, 5, 6, 7, 8], 2))\n    print(split_list([1, 2, 3, 4, 5, 6, 7, 8], 3))\n    print(split_list([1, 2, 3, 4, 5, 6, 7, 8], 4))"
    },
    {
      "rank": 92,
      "score": 1.0,
      "candidate": "from typing import List\n\n\ndef split_list_nth(lst: List[int], n: int) -> List[List[int]]:\n    \"\"\"Split a list for every nth element.\n\n    Args:\n        lst (List[int]): input list\n        n (int): nth element\n\n    Examples:\n        >>> assert split_list_nth([1, 2, 3, 4, 5, 6], 2) == [[1, 2], [3, 4], [5, 6]]\n    \"\"\"\n    return [lst[i : i + n] for i in range(0, len(lst), n)]\n\n\nif __name__ == \"__main__\":\n    print(split_list_nth([1, 2, 3, 4, 5, 6], 2))"
    },
    {
      "rank": 93,
      "score": 1.0,
      "candidate": "from typing import List\n\n\ndef split_list(arr: List[int], n: int) -> List[List[int]]:\n    \"\"\"Split a list for every nth element.\n\n    Args:\n        arr (List[int]): list to split\n        n (int): nth element\n\n    Returns:\n        List[List[int]]: split list\n    \"\"\"\n    return [arr[i::n] for i in range(n)]\n\n\nif __name__ == \"__main__\":\n    assert split_list([1, 2, 3, 4, 5, 6], 2) == [[1, 2], [3, 4], [5, 6]]\n    assert split_list([1, 2, 3, 4, 5, 6], 3) == [[1, 2, 3], [4, 5, 6]]"
    },
    {
      "rank": 94,
      "score": 1.0,
      "candidate": "def split_list(input_list, nth):\n    return [input_list[i::nth] for i in range(nth)]\n\n\ndef test_split_list():\n    \"\"\"\n    >>> test_split_list()\n    \"\"\"\n    assert split_list([1, 2, 3, 4, 5], 2) == [[1, 2], [3, 4], [5]]\n    assert split_list([1, 2, 3, 4, 5], 3) == [[1, 2, 3], [4, 5]]"
    },
    {
      "rank": 95,
      "score": 1.0,
      "candidate": "from typing import List\n\n\ndef split_every_nth(n: int, lst: List[int]) -> List[List[int]]:\n    \"\"\"Split a list for every nth element.\n\n    Examples:\n        >>> assert split_every_nth(3, [1, 2, 3, 4, 5, 6, 7]) == [[1, 2, 3], [4, 5, 6], [7]]\n        >>> assert split_every_nth(5, [1, 2, 3, 4, 5, 6, 7]) == [[1, 2, 3, 4, 5], [6, 7]]\n        >>> assert split_every_nth(1, [1, 2, 3, 4, 5, 6, 7]) == [[1], [2], [3], [4], [5], [6], [7]]\n        >>> assert split_every_nth(10, [1, 2, 3, 4, 5, 6, 7]) == [[1, 2, 3, 4, 5, 6, 7]]\n    \"\"\"\n    return [lst[i : i + n] for i in range(0, len(lst), n)]\n\n\nif __name__ == \"__main__\":\n    print(split_every_nth(3, [1, 2, 3, 4, 5, 6, 7]))\n    print(split_every_nth(5, [1, 2, 3, 4, 5, 6, 7]))\n    print(split_every_nth(1, [1, 2, 3, 4, 5, 6, 7]))\n    print(split_every_nth(10, [1, 2, 3, 4, 5, 6, 7]))"
    },
    {
      "rank": 96,
      "score": 1.0,
      "candidate": "from typing import List\n\n\ndef split_list(arr: List[int], n: int) -> List[List[int]]:\n    \"\"\"Split a list for every nth element.\n\n    Args:\n        arr: List of integers.\n        n: Split at nth element.\n\n    Examples:\n        >>> assert split_list([1, 2, 3, 4, 5, 6, 7, 8, 9], 4) == [[1, 2, 3, 4], [5, 6, 7, 8], [9]]\n    \"\"\"\n    return [arr[i::n] for i in range(n)]\n\n\nif __name__ == \"__main__\":\n    print(split_list([1, 2, 3, 4, 5, 6, 7, 8, 9], 4))"
    },
    {
      "rank": 97,
      "score": 1.0,
      "candidate": "from typing import List\n\n\ndef split_list(lst: List[int], n: int) -> List[List[int]]:\n    \"\"\"Split a list for every nth element.\n\n    Examples:\n        >>> assert split_list([1, 2, 3, 4, 5, 6], 2) == [[1, 2], [3, 4], [5, 6]]\n    \"\"\"\n    return [lst[i : i + n] for i in range(0, len(lst), n)]\n\n\nif __name__ == \"__main__\":\n    print(split_list([1, 2, 3, 4, 5, 6], 2))"
    },
    {
      "rank": 98,
      "score": 1.0,
      "candidate": "from typing import List\n\n\ndef split_list_every_nth(input_list: List, n: int) -> List:\n    \"\"\"Split a list for every nth element.\n\n    Args:\n        input_list: list to split\n        n: nth element\n\n    Returns:\n        list of split lists\n    \"\"\"\n    return [input_list[i::n] for i in range(n)]\n\n\nif __name__ == \"__main__\":\n    assert split_list_every_nth([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3) == [\n        [1, 4, 7, 10],\n        [2, 5, 8],\n        [3, 6, 9],\n    ]\n    assert split_list_every_nth([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 4) == [\n        [1, 5, 9],\n        [2, 6, 10],\n        [3, 7],\n        [4, 8],\n    ]"
    },
    {
      "rank": 99,
      "score": 1.0,
      "candidate": "from itertools import chain\n\n\ndef split_list_every_nth(lst, n):\n    return [list(chain(*[lst[i::n] for i in range(n)]))]\n\n\ndef split_list_every_nth_solution(lst, n):\n    return [lst[i::n] for i in range(n)]\n\n\nif __name__ == \"__main__\":\n    print(split_list_every_nth([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2))\n    print(split_list_every_nth_solution([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2))"
    },
    {
      "rank": 100,
      "score": 1.0,
      "candidate": "def split_list(list_name, nth):\n    return [list_name[i::nth] for i in range(nth)]\n\n\ndef split_list_v2(list_name, nth):\n    return [list_name[i::nth] for i in range(len(list_name))]\n\n\ndef main():\n    list1 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]\n    print(split_list(list1, 3))\n    print(split_list_v2(list1, 3))\n\n\nif __name__ == '__main__':\n    main()"
    }
  ]
}