{
  "timestamp": "2025-09-15T00:45:10.689272",
  "method": "improved_llm_judge",
  "judge_model": "codellama/CodeLlama-7b-Python-hf",
  "target_model": "codellama-7b",
  "dataset": "mbpp",
  "problem_number": 324,
  "total_candidates": 100,
  "results": [
    {
      "rank": 1,
      "score": 10.0,
      "candidate": "def sum_of_arithmetic_progression(n: int, a: int, d: int) -> int:\n    \"\"\"\n    This function calculates the sum of arithmetic progression.\n    The formula used is: n * (a + (n - 1) * d) / 2\n    >>> sum_of_arithmetic_progression(10, 0, 1)\n    45\n    >>> sum_of_arithmetic_progression(10, 1, 1)\n    55\n    >>> sum_of_arithmetic_progression(10, 1, 2)\n    60\n    >>> sum_of_arithmetic_progression(10, 1, 3)\n    66\n    >>> sum_of_arithmetic_progression(10, 1, 4)\n    71\n    >>> sum_of_arithmetic_progression(10, 1, 5)\n    76\n    >>> sum_of_arithmetic_progression(10, 1, 6)\n    81\n    >>> sum_of_arithmetic_progression(10, 1, 7)\n    86\n    >>> sum_of_arithmetic_progression(10, 1, 8)\n    91\n    >>> sum_of_arithmetic_progression(10, 1, 9)\n    96\n    >>> sum_of_arithmetic_progression(10, 0, 0)\n    0\n    >>> sum_of_arithmetic_progression(10, 1, 0)\n    10\n    \"\"\"\n    return n * (a + (n - 1) * d) // 2\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 2,
      "score": 10.0,
      "candidate": "def sum_arith_prog(n):\n    \"\"\"\n    >>> sum_arith_prog(5)\n    15\n    >>> sum_arith_prog(10)\n    55\n    >>> sum_arith_prog(15)\n    95\n    \"\"\"\n    return (n * (2 * n + 1)) // 2\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 3,
      "score": 10.0,
      "candidate": "def sum_of_arithmetic_series(first_term, common_diff, num_of_terms):\n    \"\"\"\n    Find the sum of arithmetic series.\n\n    >>> sum_of_arithmetic_series(1, 1, 10)\n    55.0\n    >>> sum_of_arithmetic_series(1, 2, 10)\n    201.0\n    >>> sum_of_arithmetic_series(1, 3, 10)\n    455.0\n    \"\"\"\n    return (first_term + (num_of_terms - 1) * common_diff) * num_of_terms / 2\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 4,
      "score": 10.0,
      "candidate": "from math import floor, sqrt\n\n\ndef sum_of_arithmetic_progression(n, a=0):\n    \"\"\"\n    Return the sum of arithmetic progression.\n    \"\"\"\n    if n < 1:\n        return 0\n\n    n_ = n - 1\n    a_ = (n_ / 2) * (2 * a + (n_ - 1) * (n_ + 1))\n    return int(a_ + (n_ * (n_ + 1) * (2 * a + n_ * (n_ + 1))))\n\n\ndef sum_of_arithmetic_progression_faster(n, a=0):\n    \"\"\"\n    Return the sum of arithmetic progression.\n    \"\"\"\n    if n < 1:\n        return 0\n\n    n_ = n - 1\n    a_ = (n_ / 2) * (2 * a + (n_ - 1) * (n_ + 1))\n    return int(a_ + (n_ * (n_ + 1) * (2 * a + n_ * (n_ + 1))))\n\n\ndef sum_of_arithmetic_progression_fastest(n, a=0):\n    \"\"\"\n    Return the sum of arithmetic progression.\n    \"\"\"\n    if n < 1:\n        return 0\n\n    n_ = n - 1\n    a_ = (n_ / 2) * (2 * a + (n_ - 1) * (n_ + 1))\n    return int(a_ + (n_ * (n_ + 1) * (2 * a + n_ * (n_ + 1))))\n\n\nif __name__ == \"__main__\":\n    n = int(input().strip())\n    a = int(input().strip())\n    print(sum_of_arithmetic_progression(n, a))"
    },
    {
      "rank": 5,
      "score": 10.0,
      "candidate": "def arith_sum(n):\n    return (n * (2 * n + 1)) // 2\n\n\nif __name__ == '__main__':\n    n = int(input())\n    result = arith_sum(n)\n    print(result)"
    },
    {
      "rank": 6,
      "score": 10.0,
      "candidate": "def sum_ap(a, d, n):\n    return a + (n - 1) * d\n\nif __name__ == '__main__':\n    a = int(input('Enter the first term of AP: '))\n    d = int(input('Enter the common difference of AP: '))\n    n = int(input('Enter the number of terms of AP: '))\n    print(sum_ap(a, d, n))"
    },
    {
      "rank": 7,
      "score": 10.0,
      "candidate": "def arithmetic_progression(a, d, n):\n    return (n/2.0)*(2*a+(n-1)*d)\n\n\ndef test_arithmetic_progression():\n    \"\"\"Test for arithmetic_progression function.\"\"\"\n    assert arithmetic_progression(1, 1, 100) == 5050\n    assert arithmetic_progression(1, 2, 100) == 2080\n    assert arithmetic_progression(10, 2, 100) == 20800\n    assert arithmetic_progression(0, 1, 100) == 4950\n    assert arithmetic_progression(-10, 1, 100) == -4950\n\n\nif __name__ == '__main__':\n    print(arithmetic_progression(1, 1, 100))"
    },
    {
      "rank": 8,
      "score": 10.0,
      "candidate": "# O(n) time | O(1) space\ndef sumArithmeticProgression(n, a1=0):\n    return (n * (2 * a1 + (n - 1) * n)) // 2"
    },
    {
      "rank": 9,
      "score": 10.0,
      "candidate": "def sum_ap(a, d, n):\n    \"\"\"\n    a: the first term\n    d: the common difference\n    n: the number of terms\n    \"\"\"\n    return (a + (n - 1) * d) * n // 2"
    },
    {
      "rank": 10,
      "score": 10.0,
      "candidate": "def sum_arithmetic_progression(first, last):\n    \"\"\"\n    Return the sum of arithmetic progression.\n    >>> sum_arithmetic_progression(1, 10)\n    55\n    >>> sum_arithmetic_progression(10, 1)\n    55\n    >>> sum_arithmetic_progression(10, 10)\n    100\n    >>> sum_arithmetic_progression(1, 2)\n    3\n    >>> sum_arithmetic_progression(1, 3)\n    5\n    >>> sum_arithmetic_progression(1, 4)\n    7\n    \"\"\"\n    if first > last:\n        first, last = last, first\n    return (2 * first + (last - first) * (last - first + 1)) / 2\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 11,
      "score": 10.0,
      "candidate": "def sum_of_arithmetic_progression(a: int, d: int, n: int) -> int:\n    \"\"\"\n    >>> sum_of_arithmetic_progression(1, 1, 10)\n    55\n    >>> sum_of_arithmetic_progression(1, 2, 10)\n    30\n    >>> sum_of_arithmetic_progression(1, 10, 10)\n    55\n    >>> sum_of_arithmetic_progression(0, 1, 10)\n    45\n    >>> sum_of_arithmetic_progression(0, 2, 10)\n    40\n    >>> sum_of_arithmetic_progression(0, 10, 10)\n    45\n    >>> sum_of_arithmetic_progression(1, 1, 0)\n    0\n    >>> sum_of_arithmetic_progression(1, 2, 0)\n    0\n    >>> sum_of_arithmetic_progression(1, 10, 0)\n    0\n    >>> sum_of_arithmetic_progression(0, 1, 0)\n    0\n    >>> sum_of_arithmetic_progression(0, 2, 0)\n    0\n    >>> sum_of_arithmetic_progression(0, 10, 0)\n    0\n    \"\"\"\n    if n == 0:\n        return 0\n    return (n / 2) * (2 * a + (n - 1) * d)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 12,
      "score": 10.0,
      "candidate": "def sum_of_arithmetic_progression(a, d, n):\n    return (n / 2) * (2 * a + (n - 1) * d)\n\n\nif __name__ == \"__main__\":\n    a = 10\n    d = 2\n    n = 10\n    print(sum_of_arithmetic_progression(a, d, n))"
    },
    {
      "rank": 13,
      "score": 10.0,
      "candidate": "def sum_of_arithmetic_progression(a, d, n):\n    \"\"\"\n    >>> sum_of_arithmetic_progression(0, 1, 10)\n    45\n    >>> sum_of_arithmetic_progression(0, 1, 100)\n    4950\n    >>> sum_of_arithmetic_progression(1, 1, 100)\n    5050\n    >>> sum_of_arithmetic_progression(0, 10, 10)\n    55\n    >>> sum_of_arithmetic_progression(1, 10, 10)\n    61\n    >>> sum_of_arithmetic_progression(10, 1, 10)\n    55\n    >>> sum_of_arithmetic_progression(0, 0, 10)\n    0\n    >>> sum_of_arithmetic_progression(0, 1, 0)\n    0\n    \"\"\"\n    return n * ((2 * a) + (n - 1) * d) / 2\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 14,
      "score": 10.0,
      "candidate": "def sum_arith_prog(a, d, n):\n    return (a + (n-1)*d) * n // 2\n\nif __name__ == '__main__':\n    a = int(input())\n    d = int(input())\n    n = int(input())\n    print(sum_arith_prog(a, d, n))"
    },
    {
      "rank": 15,
      "score": 10.0,
      "candidate": "from typing import Union\n\n\ndef sum_arithmetic_progression(a: int, d: int, n: int) -> Union[int, float]:\n    \"\"\"\n    Return the sum of arithmetic progression.\n\n    >>> sum_arithmetic_progression(1, 1, 3)\n    6\n    >>> sum_arithmetic_progression(1, 1, 0)\n    0\n    >>> sum_arithmetic_progression(1, 1, -3)\n    0\n    >>> sum_arithmetic_progression(1, 2, 1)\n    3\n    >>> sum_arithmetic_progression(0, 1, 1)\n    1\n    >>> sum_arithmetic_progression(1, 1, 1)\n    2\n    >>> sum_arithmetic_progression(1, 1, 2)\n    4\n    >>> sum_arithmetic_progression(1, 2, 2)\n    7\n    >>> sum_arithmetic_progression(1, 3, 2)\n    9\n    \"\"\"\n    return (n / 2) * (2 * a + (n - 1) * d)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 16,
      "score": 10.0,
      "candidate": "def sum_ap(n: int, a1: int) -> int:\n    \"\"\"\n    Return the sum of arithmetic progression.\n    >>> sum_ap(5, 1)\n    15\n    >>> sum_ap(10, 2)\n    30\n    >>> sum_ap(100, 1)\n    50050\n    >>> sum_ap(2, 100)\n    Traceback (most recent call last):\n        ...\n    ValueError: n must be greater than 1\n    >>> sum_ap(-1, 1)\n    Traceback (most recent call last):\n        ...\n    ValueError: n must be greater than 1\n    >>> sum_ap(1, -1)\n    Traceback (most recent call last):\n        ...\n    ValueError: a1 must be greater than 0\n    >>> sum_ap(1, 1)\n    Traceback (most recent call last):\n        ...\n    ValueError: a1 must be greater than 0\n    >>> sum_ap(0, 1)\n    Traceback (most recent call last):\n        ...\n    ValueError: n must be greater than 1\n    >>> sum_ap(0, 1.1)\n    Traceback (most recent call last):\n        ...\n    ValueError: n must be greater than 1\n    >>> sum_ap(1.1, 1)\n    Traceback (most recent call last):\n        ...\n    ValueError: n must be greater than 1\n    >>> sum_ap(1, 1.1)\n    Traceback (most recent call last):\n        ...\n    ValueError: a1 must be greater than 0\n    \"\"\"\n    if n < 1:\n        raise ValueError(\"n must be greater than 1\")\n    if a1 <= 0:\n        raise ValueError(\"a1 must be greater than 0\")\n    return (n + 1) * n * a1 // 2\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 17,
      "score": 10.0,
      "candidate": "def sum_of_arithmetic_progression(a, d, n):\n    return (a+(n-1)*d)*n // 2\n\n\nif __name__ == \"__main__\":\n    a, d, n = map(int, input().split())\n    print(sum_of_arithmetic_progression(a, d, n))"
    },
    {
      "rank": 18,
      "score": 10.0,
      "candidate": "def sum_arithmetic_progression(first_term, difference, number_of_terms):\n    \"\"\"\n    >>> sum_arithmetic_progression(1, 1, 3)\n    6\n    >>> sum_arithmetic_progression(2, 2, 3)\n    12\n    >>> sum_arithmetic_progression(2, 2, 2)\n    8\n    \"\"\"\n    return (number_of_terms * (2 * first_term + (number_of_terms - 1) * difference)) / 2\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 19,
      "score": 10.0,
      "candidate": "def sum_of_arithmetic_progression(a, d, n):\n    return (a + (n - 1) * d) * n // 2\n\n\nif __name__ == \"__main__\":\n    print(sum_of_arithmetic_progression(1, 2, 100))"
    },
    {
      "rank": 20,
      "score": 10.0,
      "candidate": "def sum_arithmetic_prog(a, d, n):\n    return (a + (n - 1) * d) * n // 2"
    },
    {
      "rank": 21,
      "score": 10.0,
      "candidate": "def sum_arithmetic_progression(start, end, step):\n    \"\"\"\n    This function returns the sum of arithmetic progression.\n    \"\"\"\n    return (end - start) * (start + end) // 2"
    },
    {
      "rank": 22,
      "score": 10.0,
      "candidate": "from math import floor\n\n\ndef sum_ap(a, d, n):\n    return (n/2)*(2*a + (n-1)*d)\n\n\ndef test_sum_ap():\n    \"\"\"\n    >>> sum_ap(1, 1, 10)\n    55.0\n    >>> sum_ap(1, 2, 10)\n    101.0\n    >>> sum_ap(1, 10, 100)\n    5050.0\n    \"\"\"\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 23,
      "score": 10.0,
      "candidate": "def sum_arithmetic_progression(a, d, n):\n    return (a + (n-1)*d) * n // 2\n\n\ndef test_sum_arithmetic_progression():\n    \"\"\"\n    >>> test_sum_arithmetic_progression()\n    Passed\n    \"\"\"\n    assert sum_arithmetic_progression(1, 1, 10) == 55\n    assert sum_arithmetic_progression(1, 2, 10) == 30\n    assert sum_arithmetic_progression(1, 10, 100) == 5050\n    print('Passed')\n\n\nif __name__ == '__main__':\n    test_sum_arithmetic_progression()"
    },
    {
      "rank": 24,
      "score": 10.0,
      "candidate": "# O(n) time | O(1) space\ndef sumArithmeticProgression(n, a1=0):\n    return (n / 2) * (2 * a1 + (n - 1) * (n + 1))"
    },
    {
      "rank": 25,
      "score": 10.0,
      "candidate": "def arithmetic_progression(n: int, a1: int) -> int:\n    \"\"\"\n    Return the sum of arithmetic progression.\n\n    >>> arithmetic_progression(5, 1)\n    15\n    >>> arithmetic_progression(5, 2)\n    20\n    >>> arithmetic_progression(4, 1)\n    10\n    >>> arithmetic_progression(4, 2)\n    12\n    >>> arithmetic_progression(3, 1)\n    6\n    >>> arithmetic_progression(3, 2)\n    8\n    \"\"\"\n    return (n * (2 * a1 + (n - 1) * (2 * a1 + 1))) // 2\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 26,
      "score": 10.0,
      "candidate": "from math import floor\n\n\ndef sum_arithmetic_progression(a: int, d: int, n: int) -> int:\n    \"\"\"\n    >>> sum_arithmetic_progression(0, 1, 10)\n    45\n    >>> sum_arithmetic_progression(0, 1, 1)\n    0\n    >>> sum_arithmetic_progression(1, 1, 1)\n    1\n    >>> sum_arithmetic_progression(10, 1, 1)\n    10\n    >>> sum_arithmetic_progression(0, 2, 5)\n    20\n    >>> sum_arithmetic_progression(0, 2, 2)\n    2\n    >>> sum_arithmetic_progression(1, 2, 1)\n    2\n    >>> sum_arithmetic_progression(0, 2, 0)\n    0\n    >>> sum_arithmetic_progression(0, 2, -1)\n    0\n    \"\"\"\n    return (n / 2) * (2 * a + (n - 1) * d)\n\n\nif __name__ == \"__main__\":\n    from doctest import testmod\n\n    testmod()"
    },
    {
      "rank": 27,
      "score": 10.0,
      "candidate": "def sum_arith_prog(n):\n    return (n * (n + 1)) / 2\n\n\ndef test_sum_arith_prog():\n    \"\"\"Test for sum_arith_prog function.\"\"\"\n    assert sum_arith_prog(1) == 1\n    assert sum_arith_prog(3) == 6\n    assert sum_arith_prog(5) == 15\n    assert sum_arith_prog(7) == 28\n\n\nif __name__ == '__main__':\n    test_sum_arith_prog()"
    },
    {
      "rank": 28,
      "score": 10.0,
      "candidate": "def sum_of_arithmetic_progression(a: int, n: int) -> int:\n    \"\"\"\n    >>> sum_of_arithmetic_progression(2, 10)\n    100\n    >>> sum_of_arithmetic_progression(2, 20)\n    200\n    >>> sum_of_arithmetic_progression(1, 2)\n    3\n    >>> sum_of_arithmetic_progression(1, 1)\n    1\n    >>> sum_of_arithmetic_progression(1, 0)\n    Traceback (most recent call last):\n        ...\n    ValueError: n must be greater than or equal to 1\n    >>> sum_of_arithmetic_progression(2, -1)\n    Traceback (most recent call last):\n        ...\n    ValueError: n must be greater than or equal to 1\n    >>> sum_of_arithmetic_progression(0, 1)\n    Traceback (most recent call last):\n        ...\n    ValueError: a must be greater than 0\n    >>> sum_of_arithmetic_progression(-1, 1)\n    Traceback (most recent call last):\n        ...\n    ValueError: a must be greater than 0\n    \"\"\"\n    if n < 1:\n        raise ValueError(\"n must be greater than or equal to 1\")\n    if a <= 0:\n        raise ValueError(\"a must be greater than 0\")\n    return (a + (a + n - 1)) * n // 2\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 29,
      "score": 9.0,
      "candidate": "def sum_of_arithmetic_progression(n, a1):\n    \"\"\"\n    This function calculates the sum of an arithmetic progression.\n\n    >>> sum_of_arithmetic_progression(6, 3)\n    18\n\n    >>> sum_of_arithmetic_progression(5, -2)\n    -6\n    \"\"\"\n    sum = (n / 2) * (2 * a1 + (n - 1) * (n - 1) / 2)\n    return sum\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 30,
      "score": 9.0,
      "candidate": "def sum_arith_progression(n, a=0):\n    \"\"\"\n    Return the sum of the first n terms of an arithmetic progression that has\n    an arbitrary first term.\n    \"\"\"\n    return (n * (2 * a + (n - 1) * n)) / 2"
    },
    {
      "rank": 31,
      "score": 8.0,
      "candidate": "def sum_arithmetic_progression(a, d, n):\n    return (a + (n-1) * d) * n // 2"
    },
    {
      "rank": 32,
      "score": 8.0,
      "candidate": "def sum_of_arithmetic_progression(start, end, step):\n    return (end - start) * ((2 * start + (end - start) * step) / (2 * step))\n\n\nif __name__ == \"__main__\":\n    assert sum_of_arithmetic_progression(1, 5, 3) == 15"
    },
    {
      "rank": 33,
      "score": 8.0,
      "candidate": "def sum_of_arithmetic_progression(n, a=0, d=1):\n    return n * (2 * a + (n - 1) * d) / 2"
    },
    {
      "rank": 34,
      "score": 8.0,
      "candidate": "from typing import Union\n\n\ndef arith_sum(n: int) -> Union[int, float]:\n    \"\"\"Finds the sum of arithmetic progression.\n\n    Args:\n        n (int): Last number of progression.\n\n    Examples:\n        >>> assert arith_sum(0) == 0\n        >>> assert arith_sum(1) == 1\n        >>> assert arith_sum(2) == 1.5\n        >>> assert arith_sum(3) == 2.5\n    \"\"\"\n    if n <= 0:\n        return 0\n    return (n * (n + 1)) / 2\n\n\nif __name__ == \"__main__\":\n    print(arith_sum(0))\n    print(arith_sum(1))\n    print(arith_sum(2))\n    print(arith_sum(3))"
    },
    {
      "rank": 35,
      "score": 8.0,
      "candidate": "def arithmetic_progression(a, d, n):\n    sum = 0\n    for i in range(n):\n        sum += a\n        a += d\n    return sum\n\n\ndef arithmetic_progression_2(a, d, n):\n    return (n * (2 * a + (n - 1) * d)) / 2\n\n\nif __name__ == '__main__':\n    print(arithmetic_progression(0, 1, 5))\n    print(arithmetic_progression_2(0, 1, 5))"
    },
    {
      "rank": 36,
      "score": 8.0,
      "candidate": "def sum_arithmetic_progression(a, d, n):\n    return (a + (n-1) * d) * n // 2\n\n\nif __name__ == \"__main__\":\n    a = int(input(\"Enter the first term of the Arithmetic Progression: \"))\n    d = int(input(\"Enter the common difference of the Arithmetic Progression: \"))\n    n = int(input(\"Enter the number of terms of the Arithmetic Progression: \"))\n    print(sum_arithmetic_progression(a, d, n))"
    },
    {
      "rank": 37,
      "score": 8.0,
      "candidate": "def arithm_prog(a, d, n):\n    # Write your code here\n    sum = 0\n    for i in range(n):\n        sum += a\n        a += d\n    return sum\n\nprint(arithm_prog(1, 2, 3))\nprint(arithm_prog(3, 2, 5))\nprint(arithm_prog(0, 1, 1))\nprint(arithm_prog(-1, -1, 5))\nprint(arithm_prog(1000, 10, 100))"
    },
    {
      "rank": 38,
      "score": 8.0,
      "candidate": "from math import ceil\n\n\ndef sum_arithmetic_prog(a, d, n):\n    \"\"\"\n    a = first number\n    d = difference\n    n = number of terms\n    \"\"\"\n    return (n/2)*(2*a+(n-1)*d)\n\n\ndef test_arithmetic_prog():\n    \"\"\"Test for sum_arithmetic_prog function.\"\"\"\n    assert sum_arithmetic_prog(1, 2, 100) == 5050\n    assert sum_arithmetic_prog(100, 1, 100) == 5050\n    assert sum_arithmetic_prog(1, 1, 100) == 100\n    assert sum_arithmetic_prog(0, 1, 100) == 99\n    assert sum_arithmetic_prog(1, 100, 100) == 5050\n    assert sum_arithmetic_prog(0, 100, 100) == 4950\n    assert sum_arithmetic_prog(1, 100, 100) == 5050\n\n\nif __name__ == \"__main__\":\n    test_arithmetic_prog()"
    },
    {
      "rank": 39,
      "score": 8.0,
      "candidate": "def arithmetic_progression(a, d, n):\n    return (a + (n - 1) * d)\n\n\nprint(arithmetic_progression(1, 2, 4))"
    },
    {
      "rank": 40,
      "score": 8.0,
      "candidate": "def sum_arithmetic_progression(n, a_1, d):\n    \"\"\"\n    >>> sum_arithmetic_progression(3, 1, 2)\n    7\n    >>> sum_arithmetic_progression(3, 1, 1)\n    6\n    >>> sum_arithmetic_progression(3, 0, 2)\n    3\n    >>> sum_arithmetic_progression(3, 0, 1)\n    3\n    >>> sum_arithmetic_progression(3, 1, 3)\n    9\n    \"\"\"\n    if n == 1:\n        return a_1\n    return n * ((2 * a_1 + (n - 1) * d) / 2)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 41,
      "score": 8.0,
      "candidate": "def sum_arithmetic_progression(n, a1, d):\n    return (n / 2) * (2 * a1 + (n - 1) * d)\n\n\nif __name__ == \"__main__\":\n    print(sum_arithmetic_progression(100, 1, 1))"
    },
    {
      "rank": 42,
      "score": 8.0,
      "candidate": "def sum_arithmetic_prog(a, d, n):\n    return ((2 * a) + ((n - 1) * d)) * n // 2\n\n\ndef test_arithmetic_prog():\n    \"\"\"\n    >>> test_arithmetic_prog()\n    True\n    \"\"\"\n    assert sum_arithmetic_prog(0, 1, 0) == 0\n    assert sum_arithmetic_prog(0, 1, 1) == 0\n    assert sum_arithmetic_prog(0, 1, 2) == 1\n    assert sum_arithmetic_prog(0, 1, 3) == 3\n    assert sum_arithmetic_prog(1, 2, 3) == 7\n    assert sum_arithmetic_prog(1, 2, 4) == 13\n    assert sum_arithmetic_prog(1, 2, 5) == 21\n    assert sum_arithmetic_prog(1, 2, 6) == 31\n    assert sum_arithmetic_prog(1, 2, 7) == 43\n    assert sum_arithmetic_prog(1, 2, 8) == 57\n    assert sum_arithmetic_prog(1, 2, 9) == 75\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 43,
      "score": 8.0,
      "candidate": "from math import floor\n\ndef sum_of_arithmetic_progression(start, end, step):\n    \"\"\"\n    >>> sum_of_arithmetic_progression(0, 5, 2)\n    15\n    >>> sum_of_arithmetic_progression(0, 5, 3)\n    14\n    >>> sum_of_arithmetic_progression(0, 5, 5)\n    10\n    \"\"\"\n    return (floor((end - start) / step) + 1) * (start + end) // 2\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 44,
      "score": 8.0,
      "candidate": "def sum_arithmetic_progression(first_term: int, common_diff: int, number_of_terms: int) -> int:\n    return (first_term + (number_of_terms - 1) * common_diff) * number_of_terms // 2\n\n\nif __name__ == \"__main__\":\n    first_term = int(input(\"Enter first term: \"))\n    common_diff = int(input(\"Enter common difference: \"))\n    number_of_terms = int(input(\"Enter number of terms: \"))\n    print(f\"The sum of the arithmetic progression is {sum_arithmetic_progression(first_term, common_diff, number_of_terms)}\")"
    },
    {
      "rank": 45,
      "score": 8.0,
      "candidate": "def sum_of_arithmetic_progression(a, d, n):\n    return (a + (n - 1) * d) * n // 2\n\n\nif __name__ == \"__main__\":\n    a, d, n = map(int, input().split())\n    print(sum_of_arithmetic_progression(a, d, n))"
    },
    {
      "rank": 46,
      "score": 8.0,
      "candidate": "def sum_of_arithmetic_series(first_term, common_difference, terms_count):\n    sum_series = first_term + (terms_count - 1) * common_difference\n    return sum_series\n\n#test\nprint(sum_of_arithmetic_series(1, 1, 10))\nprint(sum_of_arithmetic_series(2, 1, 10))\nprint(sum_of_arithmetic_series(3, 1, 10))\nprint(sum_of_arithmetic_series(1, 2, 10))\nprint(sum_of_arithmetic_series(1, 3, 10))"
    },
    {
      "rank": 47,
      "score": 8.0,
      "candidate": "def sum_of_arithmetic_progression(a, d, n):\n    return (n * (2 * a + (n - 1) * d)) / 2\n\na = int(input(\"Enter the first term of the AP: \"))\nd = int(input(\"Enter the common difference of the AP: \"))\nn = int(input(\"Enter the number of terms: \"))\n\nprint(sum_of_arithmetic_progression(a, d, n))"
    },
    {
      "rank": 48,
      "score": 8.0,
      "candidate": "def sum_arithmetic_progression(a, d, n):\n    return (a + (n - 1) * d) * n // 2\n\n\nif __name__ == \"__main__\":\n    assert sum_arithmetic_progression(1, 1, 10) == 55"
    },
    {
      "rank": 49,
      "score": 8.0,
      "candidate": "def sum_arith_prog(first_term, common_diff, num_of_term):\n    return (first_term + (num_of_term - 1) * common_diff) * num_of_term // 2"
    },
    {
      "rank": 50,
      "score": 8.0,
      "candidate": "def sum_of_arithmetic_progression(a, d, n):\n    return (a+(n-1)*d)*n//2\n\n# Tests\nassert sum_of_arithmetic_progression(0, 1, 1) == 0\nassert sum_of_arithmetic_progression(1, 1, 10) == 55\nassert sum_of_arithmetic_progression(0, 2, 6) == 30\nassert sum_of_arithmetic_progression(1, 2, 6) == 21\nassert sum_of_arithmetic_progression(1, 1, 3) == 4"
    },
    {
      "rank": 51,
      "score": 8.0,
      "candidate": "def arithmetic_progression_sum(a, d, n):\n    \"\"\"\n    Return the sum of arithmetic progression.\n\n    Args:\n        a: The first element of the arithmetic progression.\n        d: The difference between any two consecutive terms of the arithmetic progression.\n        n: The number of terms in the arithmetic progression.\n\n    Returns:\n        The sum of arithmetic progression.\n    \"\"\"\n    return (a + (a + (n - 1) * d)) * n // 2"
    },
    {
      "rank": 52,
      "score": 8.0,
      "candidate": "def sum_of_arith_progression(a, d, n):\n    return (a + (n - 1) * d) * n // 2\n\ndef test_sum_of_arith_progression():\n    assert sum_of_arith_progression(1, 2, 3) == 6\n\nif __name__ == '__main__':\n    test_sum_of_arith_progression()"
    },
    {
      "rank": 53,
      "score": 8.0,
      "candidate": "def sum_of_arith_prog(a, d, n):\n    sum_of_ap = n*(2*a+n*d)/2\n    return sum_of_ap\n\n\nif __name__ == '__main__':\n    print(sum_of_arith_prog(1, 1, 100))"
    },
    {
      "rank": 54,
      "score": 8.0,
      "candidate": "def sum_of_arithmetic_progression(a, d, n):\n    return n * (2 * a + (n - 1) * d) / 2\n\nif __name__ == '__main__':\n    a, d, n = map(int, input().split())\n    print(sum_of_arithmetic_progression(a, d, n))"
    },
    {
      "rank": 55,
      "score": 8.0,
      "candidate": "from typing import Union\n\n\ndef sum_of_arithmetic_progression(start: Union[int, float],\n                                  end: Union[int, float],\n                                  step: Union[int, float]) -> Union[int, float]:\n    \"\"\"Finds the sum of arithmetic progression.\n\n    Args:\n        start: the beginning of the progression.\n        end: the end of the progression.\n        step: the step of the progression.\n\n    Returns:\n        The sum of arithmetic progression.\n    \"\"\"\n    return (end - start) * ((2 * step) + (end - start)) / (2 * step)"
    },
    {
      "rank": 56,
      "score": 8.0,
      "candidate": "def sum_arithmetic_progression(a, d, n):\n    \"\"\"\n    Return the sum of arithmetic progression.\n    >>> sum_arithmetic_progression(1, 1, 10)\n    55\n    >>> sum_arithmetic_progression(1, 2, 10)\n    201\n    >>> sum_arithmetic_progression(0, 1, 10)\n    45\n    >>> sum_arithmetic_progression(0, 0, 10)\n    Traceback (most recent call last):\n        ...\n    ValueError: a and d both cannot be zero\n    \"\"\"\n    if a == 0 and d == 0:\n        raise ValueError(\"a and d both cannot be zero\")\n    else:\n        return (a + (n - 1) * d) * n // 2\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 57,
      "score": 8.0,
      "candidate": "def sum_of_arithmetic_progression(start, end, step):\n    if step > 0:\n        return (end - start + 1) * step // 2\n    else:\n        return (start - end + 1) * step // 2\n\n\nif __name__ == \"__main__\":\n    start = int(input(\"Enter start: \"))\n    end = int(input(\"Enter end: \"))\n    step = int(input(\"Enter step: \"))\n\n    print(sum_of_arithmetic_progression(start, end, step))"
    },
    {
      "rank": 58,
      "score": 8.0,
      "candidate": "def sum_arithmetic_progression(a, d, n):\n    return (a + ((n - 1) * d))\n\n\nif __name__ == '__main__':\n    a = int(input())\n    d = int(input())\n    n = int(input())\n\n    print(sum_arithmetic_progression(a, d, n))"
    },
    {
      "rank": 59,
      "score": 8.0,
      "candidate": "def sum_of_arithmetic_progression(a, d, n):\n    \"\"\"\n    Return sum of arithmetic progression.\n\n    >>> sum_of_arithmetic_progression(1, 1, 10)\n    55.0\n    >>> sum_of_arithmetic_progression(1, 2, 10)\n    201.0\n    >>> sum_of_arithmetic_progression(10, 2, 5)\n    122.0\n    >>> sum_of_arithmetic_progression(0, 2, 5)\n    4.0\n    \"\"\"\n\n    return (n / 2) * (2 * a + (n - 1) * d)\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 60,
      "score": 8.0,
      "candidate": "def sum_arithmetic_progression(a, d, n):\n    return (a + (n - 1) * d) * n // 2\n\n\nif __name__ == '__main__':\n    a, d, n = map(int, input().split())\n    print(sum_arithmetic_progression(a, d, n))"
    },
    {
      "rank": 61,
      "score": 8.0,
      "candidate": "def sum_of_arithmetic_progression(a, d, n):\n    \"\"\"\n    Calculate the sum of arithmetic progression.\n\n    :param a: first number of the progression.\n    :param d: difference between each number in the progression.\n    :param n: amount of numbers in the progression.\n    :return: sum of the progression.\n    \"\"\"\n    return (a + (n - 1) * d) * n // 2"
    },
    {
      "rank": 62,
      "score": 8.0,
      "candidate": "def sum_of_arithmetic_progression(first, common_difference, number_of_terms):\n    \"\"\"\n    >>> sum_of_arithmetic_progression(1, 1, 1)\n    1\n    >>> sum_of_arithmetic_progression(1, 1, 3)\n    4\n    >>> sum_of_arithmetic_progression(1, 2, 3)\n    7\n    >>> sum_of_arithmetic_progression(1, 10, 3)\n    31\n    >>> sum_of_arithmetic_progression(1, 10, 5)\n    61\n    >>> sum_of_arithmetic_progression(0, 1, 1)\n    0\n    >>> sum_of_arithmetic_progression(0, 1, 3)\n    3\n    >>> sum_of_arithmetic_progression(0, 10, 3)\n    33\n    >>> sum_of_arithmetic_progression(0, 10, 5)\n    55\n    \"\"\"\n    return (first + (number_of_terms - 1) * common_difference) * number_of_terms // 2\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 63,
      "score": 8.0,
      "candidate": "def sum_arithmetic_progression(a, d, n):\n    return (n/2.0) * (2*a + (n-1)*d)\n\nif __name__ == '__main__':\n    a = int(input())\n    d = int(input())\n    n = int(input())\n    print(sum_arithmetic_progression(a, d, n))"
    },
    {
      "rank": 64,
      "score": 8.0,
      "candidate": "def sum_of_arithmetic_progression(n, a1):\n    \"\"\"\n    n: number of elements in progression\n    a1: first element of progression\n    \"\"\"\n    return (2 * a1 + (n - 1) * n) * n / 6"
    },
    {
      "rank": 65,
      "score": 8.0,
      "candidate": "def sum_of_arithmetic_progression(first, step, length):\n    return (length * (2 * first + (length - 1) * step)) / 2\n\n\ndef test_arithmetic_progression():\n    \"\"\"\n    >>> test_arithmetic_progression()\n    \"\"\"\n    assert sum_of_arithmetic_progression(1, 1, 100) == 5050\n    assert sum_of_arithmetic_progression(1, 2, 100) == 20100\n\n\nif __name__ == \"__main__\":\n    from doctest import testmod\n\n    testmod()"
    },
    {
      "rank": 66,
      "score": 8.0,
      "candidate": "# O(n)\ndef arithmetic_progression(a, d, n):\n    return (a + (n - 1) * d) * n // 2\n\n\nif __name__ == '__main__':\n    assert arithmetic_progression(1, 1, 10) == 55\n    assert arithmetic_progression(0, 3, 10) == 45"
    },
    {
      "rank": 67,
      "score": 8.0,
      "candidate": "def sum_of_arithmetic_progression(first_term, common_difference, number_of_terms):\n    return (first_term + ((number_of_terms - 1) * common_difference)) * number_of_terms // 2\n\nprint(sum_of_arithmetic_progression(1, 1, 100))\nprint(sum_of_arithmetic_progression(1, 2, 100))\nprint(sum_of_arithmetic_progression(1, 10, 100))"
    },
    {
      "rank": 68,
      "score": 8.0,
      "candidate": "def arithmetic_progression(start, end, step):\n    \"\"\"\n    Calculate the sum of an arithmetic progression.\n    >>> arithmetic_progression(1, 5, 1)\n    15\n    >>> arithmetic_progression(1, 5, 2)\n    11\n    \"\"\"\n    return (end - start + 1) * (start + end) // 2\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 69,
      "score": 8.0,
      "candidate": "def sum_arithmetic_progression(first_term, common_difference, terms):\n    sum = 0\n    for i in range(terms):\n        sum += first_term + (i * common_difference)\n    return sum\n\n\ndef test_arithmetic_progression():\n    \"\"\"Test for sum_arithmetic_progression function.\"\"\"\n    assert sum_arithmetic_progression(1, 2, 5) == 20\n    assert sum_arithmetic_progression(1, 1, 3) == 3\n    assert sum_arithmetic_progression(10, 10, 5) == 150\n    assert sum_arithmetic_progression(10, 5, 5) == 150\n    assert sum_arithmetic_progression(10, 3, 5) == 140\n    assert sum_arithmetic_progression(10, 1, 5) == 30\n    assert sum_arithmetic_progression(10, -1, 5) == 10\n    assert sum_arithmetic_progression(10, -2, 5) == 40\n\n\nif __name__ == \"__main__\":\n    test_arithmetic_progression()"
    },
    {
      "rank": 70,
      "score": 8.0,
      "candidate": "def sum_ap(a, d, n):\n    return (n/2.0) * (2 * a + (n - 1) * d)\n\n\nif __name__ == '__main__':\n    print(sum_ap(1, 1, 100))"
    },
    {
      "rank": 71,
      "score": 8.0,
      "candidate": "def sum_arithmetic_progression(n):\n    return (n * (n + 1)) // 2\n\n\nif __name__ == \"__main__\":\n    n = int(input(\"Enter n: \"))\n    print(sum_arithmetic_progression(n))"
    },
    {
      "rank": 72,
      "score": 8.0,
      "candidate": "def sum_arithmetic_progression(a, d, n):\n    return a + ((n - 1) * d)"
    },
    {
      "rank": 73,
      "score": 8.0,
      "candidate": "def sum_of_arithmetic_series(first, last, step):\n    \"\"\"\n    >>> sum_of_arithmetic_series(1, 5, 2)\n    15\n    >>> sum_of_arithmetic_series(1, 5, 3)\n    14\n    >>> sum_of_arithmetic_series(1, 5, 4)\n    13\n    >>> sum_of_arithmetic_series(1, 5, 5)\n    12\n    >>> sum_of_arithmetic_series(1, 5, 6)\n    11\n    \"\"\"\n    return (last - first + 1) * first + first ** 2 - first * step\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 74,
      "score": 8.0,
      "candidate": "def arithmetic_progression(n, a_0):\n    \"\"\"\n    Calculates the sum of arithmetic progression.\n    \"\"\"\n    return (n / 2) * (2 * a_0 + (n - 1) * (n + 1))"
    },
    {
      "rank": 75,
      "score": 8.0,
      "candidate": "def sum_of_arithmetic_progression(a, d, n):\n    return (n / 2) * (2 * a + (n - 1) * d)"
    },
    {
      "rank": 76,
      "score": 8.0,
      "candidate": "def sum_arithmetic_progression(a, d, n):\n    \"\"\"\n    >>> sum_arithmetic_progression(1, 1, 10)\n    55\n    \"\"\"\n    return (a + (n - 1) * d) * n // 2\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 77,
      "score": 8.0,
      "candidate": "def sum_ap(a, d, n):\n    \"\"\"\n    :param a: first element of arithmetic progression\n    :param d: difference of two consecutive elements\n    :param n: number of terms\n    :return: sum of arithmetic progression\n    \"\"\"\n    return n/2 * (2*a + (n-1)*d)\n\n\nif __name__ == '__main__':\n    a = int(input())\n    d = int(input())\n    n = int(input())\n\n    print(sum_ap(a, d, n))"
    },
    {
      "rank": 78,
      "score": 8.0,
      "candidate": "def sum_of_arithmetic_progression(start, end, step):\n    \"\"\"\n    :param start: int\n    :param end: int\n    :param step: int\n    :return: int\n    \"\"\"\n    if start > end:\n        return 0\n    else:\n        return (end - start) * ((2 * start + (step - 1) * end) / 2)\n\n\nif __name__ == '__main__':\n    assert sum_of_arithmetic_progression(1, 2, 1) == 3, \"First\"\n    assert sum_of_arithmetic_progression(1, 5, 1) == 15, \"Second\"\n    assert sum_of_arithmetic_progression(10, 50, 10) == 230, \"Third\"\n    assert sum_of_arithmetic_progression(100, 500, 100) == 24550, \"Fourth\"\n    assert sum_of_arithmetic_progression(1000, 5000, 1000) == 2499500, \"Fifth\""
    },
    {
      "rank": 79,
      "score": 8.0,
      "candidate": "def sum_ap(a, d, n):\n    return (n/2) * (2*a + (n-1)*d)"
    },
    {
      "rank": 80,
      "score": 8.0,
      "candidate": "from math import floor\n\n\ndef arith_prog_sum(a, d, n):\n    \"\"\"\n    >>> arith_prog_sum(1, 1, 10)\n    55\n    >>> arith_prog_sum(1, 2, 10)\n    210\n    >>> arith_prog_sum(0, 1, 10)\n    45\n    \"\"\"\n    return (n / 2) * (2 * a + (n - 1) * d)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 81,
      "score": 8.0,
      "candidate": "from math import floor\nfrom math import ceil\n\n\ndef sum_arithmetic_progression(a, d, n):\n    \"\"\"\n    Finds the sum of arithmetic progression.\n    \"\"\"\n    return (n / 2) * (2 * a + (n - 1) * d)\n\n\nif __name__ == '__main__':\n    a = int(input())\n    d = int(input())\n    n = int(input())\n    print(sum_arithmetic_progression(a, d, n))"
    },
    {
      "rank": 82,
      "score": 8.0,
      "candidate": "def sum_arithmetic_progression(start, end, step):\n    if start > end:\n        return 0\n    return (end - start + 1) * start / 2\n\n\nif __name__ == \"__main__\":\n    assert sum_arithmetic_progression(1, 2, 1) == 1\n    assert sum_arithmetic_progression(1, 3, 1) == 1 + 2\n    assert sum_arithmetic_progression(1, 10, 3) == 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 10\n    assert sum_arithmetic_progression(1, 3, 2) == 1 + 3\n    assert sum_arithmetic_progression(1, 4, 2) == 1 + 3"
    },
    {
      "rank": 83,
      "score": 8.0,
      "candidate": "def sum_arith_prog(a, d, n):\n    \"\"\"\n    >>> sum_arith_prog(1, 1, 10)\n    55\n    >>> sum_arith_prog(1, 2, 10)\n    30\n    >>> sum_arith_prog(1, 3, 10)\n    20\n    \"\"\"\n    return (a + (n - 1) * d) * n // 2\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 84,
      "score": 8.0,
      "candidate": "def sum_arithmetic_progression(a, d, n):\n    # a is the first term, d is the common difference\n    # and n is the number of terms.\n    # Let's calculate the last term\n    last_term = a + (n - 1) * d\n    # Now the sum\n    return (n / 2.0) * (2 * a + (n - 1) * d)"
    },
    {
      "rank": 85,
      "score": 8.0,
      "candidate": "def sum_of_arithmetic_progression(a, d, n):\n    sum = (n * (2*a + (n-1)*d))/2\n    return sum\n\nprint(sum_of_arithmetic_progression(1, 1, 100))\nprint(sum_of_arithmetic_progression(1, 2, 100))\nprint(sum_of_arithmetic_progression(1, 10, 100))"
    },
    {
      "rank": 86,
      "score": 8.0,
      "candidate": "def sum_of_arithmetic_progression(a, d, n):\n    return (n/2.0)*(2*a+(n-1)*d)\n\nprint(sum_of_arithmetic_progression(1, 2, 10))"
    },
    {
      "rank": 87,
      "score": 8.0,
      "candidate": "def sum_of_arithmetic_progression(first_term, common_difference, n):\n    return (n/2) * (2*first_term + (n-1)*common_difference)\n\n\nif __name__ == '__main__':\n    print(sum_of_arithmetic_progression(10, 2, 100))"
    },
    {
      "rank": 88,
      "score": 8.0,
      "candidate": "def sum_of_arithmetic_progression(start, end, step):\n    if end < start:\n        return 0\n    else:\n        return (end - start + 1) * (start + end) // 2\n\n\nif __name__ == '__main__':\n    print(sum_of_arithmetic_progression(1, 5, 2))\n    print(sum_of_arithmetic_progression(1, 5, 3))\n    print(sum_of_arithmetic_progression(1, 5, 4))\n    print(sum_of_arithmetic_progression(1, 5, 5))\n    print(sum_of_arithmetic_progression(1, 5, 6))\n    print(sum_of_arithmetic_progression(1, 5, 7))\n    print(sum_of_arithmetic_progression(1, 5, 8))"
    },
    {
      "rank": 89,
      "score": 8.0,
      "candidate": "def sum_arithmetic_prog(n, a=0, d=1):\n    \"\"\"\n    sum_arithmetic_prog takes three parameters\n    n - number of terms\n    a - starting number\n    d - common difference\n    \"\"\"\n    if n <= 0:\n        return 0\n\n    return (n * (2 * a + (n - 1) * d)) // 2"
    },
    {
      "rank": 90,
      "score": 8.0,
      "candidate": "def sum_of_arithmetic_progression(start: int, end: int, step: int = 1) -> int:\n    \"\"\"Sums an arithmetic progression.\n\n    Args:\n        start (int): start of the progression.\n        end (int): end of the progression.\n        step (int, optional): step of the progression. Defaults to 1.\n\n    Returns:\n        int: sum of the progression.\n    \"\"\"\n    n = (end - start) // step\n    if n < 0:\n        raise ValueError(\"end must be greater than start\")\n    return (n * (start + end)) // 2\n\n\nif __name__ == \"__main__\":\n    print(sum_of_arithmetic_progression(0, 10, 2))\n    print(sum_of_arithmetic_progression(0, 10))"
    },
    {
      "rank": 91,
      "score": 8.0,
      "candidate": "def sum_of_arithmetic_progression(a, d, n):\n    return (n/2.0) * (2*a + (n-1)*d)\n\n\nprint sum_of_arithmetic_progression(1, 1, 100)"
    },
    {
      "rank": 92,
      "score": 1.0,
      "candidate": "from math import floor\n\n\n# Time complexity: O(1)\n# Space complexity: O(1)\ndef sum_of_arithmetic_prog(a, d, n):\n    return (n / 2) * (2 * a + (n - 1) * d)\n\n\n# Time complexity: O(1)\n# Space complexity: O(1)\ndef sum_of_arithmetic_prog_2(a, d, n):\n    return a + n * (a + (n - 1) * d) / 2\n\n\n# Time complexity: O(1)\n# Space complexity: O(1)\ndef sum_of_arithmetic_prog_3(a, d, n):\n    return n * (a + (n - 1) * d) / 2\n\n\n# Time complexity: O(1)\n# Space complexity: O(1)\ndef sum_of_arithmetic_prog_4(a, d, n):\n    return a + (n - 1) * (floor((a + d) / 2) + floor((a + 2 * d) / 2))\n\n\n# Time complexity: O(1)\n# Space complexity: O(1)\ndef sum_of_arithmetic_prog_5(a, d, n):\n    return a + (n - 1) * (a + (n - 1) * d) / 2"
    },
    {
      "rank": 93,
      "score": 1.0,
      "candidate": "def sum_ap(first_term, common_difference, number_of_terms):\n    \"\"\"Sums the arithmetic progression.\n\n    Args:\n        first_term (int): The first term of the progression.\n        common_difference (int): The common difference of the progression.\n        number_of_terms (int): The number of terms of the progression.\n\n    Returns:\n        int: The sum of the arithmetic progression.\n\n    Examples:\n        >>> sum_ap(1, 1, 10)\n        55\n    \"\"\"\n    return (first_term + (number_of_terms - 1) * common_difference) * number_of_terms // 2"
    },
    {
      "rank": 94,
      "score": 1.0,
      "candidate": "def sum_arithmetic_progression(first, second, count):\n    if count == 0:\n        return 0\n    return (first + second) * count / 2\n\n\ndef test_sum_arithmetic_progression():\n    assert sum_arithmetic_progression(1, 2, 3) == 1 + 2 + 3"
    },
    {
      "rank": 95,
      "score": 1.0,
      "candidate": "def sum_of_arithmetic_progression(a, d, n):\n    \"\"\"\n    :param a: first number\n    :param d: difference\n    :param n: number of elements\n    :return: sum\n    \"\"\"\n    return (a + (n - 1) / 2 * d) * n\n\n\ndef test_arithmetic_progression_sum():\n    assert sum_of_arithmetic_progression(1, 2, 100) == 5050\n\n\nif __name__ == \"__main__\":\n    test_arithmetic_progression_sum()"
    },
    {
      "rank": 96,
      "score": 1.0,
      "candidate": "from typing import Union\n\n\ndef sum_arithmetic_progression(start: int, end: int, step: int) -> Union[int, float]:\n    \"\"\"\n    Calculates the sum of an arithmetic progression.\n\n    Args:\n        start: the first element of the arithmetic progression.\n        end: the last element of the arithmetic progression.\n        step: the difference between two consecutive elements.\n\n    Returns:\n        The sum of the arithmetic progression.\n\n    Examples:\n        >>> sum_arithmetic_progression(0, 10, 2)\n        55.0\n        >>> sum_arithmetic_progression(10, 0, -2)\n        55.0\n        >>> sum_arithmetic_progression(-5, 5, 1)\n        0.0\n        >>> sum_arithmetic_progression(5, 5, 1)\n        5.0\n    \"\"\"\n    if start == end:\n        return start\n\n    return (end - start) / 2 * (start + end)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 97,
      "score": 1.0,
      "candidate": "# Time complexity: O(1).\ndef sum_of_arithmetic_progression(a: int, d: int, n: int) -> int:\n    return (a + (n - 1) * d) * n // 2\n\n\n# Time complexity: O(1).\ndef sum_of_arithmetic_progression_2(a: int, d: int, n: int) -> int:\n    return n * (2 * a + (n - 1) * d) // 2\n\n\nif __name__ == \"__main__\":\n    assert sum_of_arithmetic_progression(1, 2, 4) == 10\n    assert sum_of_arithmetic_progression_2(1, 2, 4) == 10"
    },
    {
      "rank": 98,
      "score": 1.0,
      "candidate": "def sum_of_arithmetic_progression(a, d, n):\n    \"\"\"\n    Args:\n        a: int\n        d: int\n        n: int\n    Returns:\n        int: Sum of arithmetic progression\n    \"\"\"\n    # Calculate the sum of an A.P.\n    return (n / 2.0) * (2 * a + (n - 1) * d)\n\n\nif __name__ == '__main__':\n    a = 5\n    d = 10\n    n = 10\n    print(sum_of_arithmetic_progression(a, d, n))"
    },
    {
      "rank": 99,
      "score": 1.0,
      "candidate": "from typing import Union\n\n\ndef sum_arithmetic_progression(start: Union[int, float], end: Union[int, float], step: Union[int, float]) -> Union[int, float]:\n    \"\"\"Finds the sum of an arithmetic progression.\n\n    Args:\n        start (Union[int, float]): The start of the progression.\n        end (Union[int, float]): The end of the progression.\n        step (Union[int, float]): The step of the progression.\n\n    Returns:\n        Union[int, float]: The sum of the progression.\n    \"\"\"\n    return (end - start) * (step / 2) + start\n\n\nif __name__ == \"__main__\":\n    print(sum_arithmetic_progression(1, 5, 2))"
    },
    {
      "rank": 100,
      "score": 1.0,
      "candidate": "from math import floor\n\n\ndef sum_ap(a, d, n):\n    return (a + (a + (n - 1) * d)) * n // 2\n\n\ndef test_ap_sum():\n    assert sum_ap(0, 1, 1) == 0\n    assert sum_ap(1, 1, 2) == 3\n    assert sum_ap(1, 1, 3) == 6\n    assert sum_ap(1, 2, 3) == 9\n    assert sum_ap(0, 1, 10) == 45\n    assert sum_ap(0, 2, 10) == 90\n    assert sum_ap(0, 3, 10) == 165\n    assert sum_ap(0, 4, 10) == 255\n    assert sum_ap(0, 5, 10) == 360\n    assert sum_ap(0, 6, 10) == 486\n    assert sum_ap(0, 7, 10) == 615\n    assert sum_ap(0, 8, 10) == 756\n    assert sum_ap(0, 9, 10) == 897\n    assert sum_ap(0, 10, 10) == 1048\n\n\ndef sum_ap_fast(a, d, n):\n    return (a + d) * (n * (n + 1)) // 2\n\n\ndef test_ap_sum_fast():\n    assert sum_ap_fast(0, 1, 1) == 0\n    assert sum_ap_fast(1, 1, 2) == 3\n    assert sum_ap_fast(1, 1, 3) == 6\n    assert sum_ap_fast(1, 2, 3) == 9\n    assert sum_ap_fast(0, 1, 10) == 45\n    assert sum_ap_fast(0, 2, 10) == 90\n    assert sum_ap"
    }
  ]
}