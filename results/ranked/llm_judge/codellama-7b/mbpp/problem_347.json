{
  "timestamp": "2025-09-15T00:55:32.133925",
  "method": "improved_llm_judge",
  "judge_model": "codellama/CodeLlama-7b-Python-hf",
  "target_model": "codellama-7b",
  "dataset": "mbpp",
  "problem_number": 347,
  "total_candidates": 100,
  "results": [
    {
      "rank": 1,
      "score": 10.0,
      "candidate": "def modulo_division(a, b):\n    return list(map(lambda x, y: x % y, a, b))\n\n\ndef main():\n    a = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    b = [2, 3, 4, 5, 6, 7, 8, 9, 10]\n    print(modulo_division(a, b))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 2,
      "score": 10.0,
      "candidate": "from functools import reduce\n\n\ndef modulo_division(a, b):\n    return reduce(lambda x, y: x * y, a) % reduce(lambda x, y: x * y, b)\n\n\nif __name__ == \"__main__\":\n    a = [2, 4, 5]\n    b = [5, 2, 4]\n    print(modulo_division(a, b))"
    },
    {
      "rank": 3,
      "score": 10.0,
      "candidate": "def find_modulo(list1, list2):\n    return list(map(lambda x, y: x % y, list1, list2))\n\n\nprint(find_modulo([2, 4, 6, 8, 10], [2, 3, 4, 5, 6]))"
    },
    {
      "rank": 4,
      "score": 10.0,
      "candidate": "def mod_div(a, b):\n    return list(map(lambda x, y: x % y, a, b))\n\n\na = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nb = [2, 2, 2, 2, 2, 2, 2, 2, 2, 2]\nprint(mod_div(a, b))"
    },
    {
      "rank": 5,
      "score": 10.0,
      "candidate": "def modulo_division(a, b):\n    return list(map(lambda x: x[0] % x[1], zip(a, b)))\n\n\ndef main():\n    a = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    b = [2, 3, 4, 5, 6, 7, 8, 9, 10, 11]\n    print(\"Modulo division of {a} and {b} is {c}\".format(\n        a=a, b=b, c=modulo_division(a, b)))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 6,
      "score": 10.0,
      "candidate": "from functools import reduce\n\n\ndef modulo_division(list1, list2):\n    return list(\n        map(lambda x: x[0] % x[1], zip(list1, list2))\n    )\n\n\ndef main():\n    print(modulo_division([1, 2, 3, 4], [2, 4, 6, 8]))\n    print(modulo_division([1, 2, 3, 4], [3, 6, 9, 12]))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 7,
      "score": 10.0,
      "candidate": "from functools import reduce\n\n\ndef mod_division(list_a, list_b):\n    return list(\n        map(lambda x: x[0] % x[1], zip(list_a, list_b)))\n\n\ndef mod_division_lambda(list_a, list_b):\n    return list(map(lambda x, y: x % y, list_a, list_b))\n\n\ndef mod_division_reduce(list_a, list_b):\n    return list(\n        reduce(lambda x, y: x % y, list_a, list_b))\n\n\nif __name__ == '__main__':\n    list_a = [1, 2, 3, 4]\n    list_b = [2, 4, 6, 8]\n\n    print(mod_division(list_a, list_b))\n    print(mod_division_lambda(list_a, list_b))\n    print(mod_division_reduce(list_a, list_b))"
    },
    {
      "rank": 8,
      "score": 10.0,
      "candidate": "def find_modulo(a, b):\n    return list(map(lambda x: x[0] % x[1], zip(a, b)))\n\n\ndef main():\n    a = [3, 5, 7, 9, 11]\n    b = [2, 4, 6, 8, 10]\n    print(find_modulo(a, b))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 9,
      "score": 10.0,
      "candidate": "def modulo_division(list_1, list_2):\n    return list(map(lambda x: x[0] % x[1], zip(list_1, list_2)))\n\n\nif __name__ == '__main__':\n    list_1 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    list_2 = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]\n\n    print(modulo_division(list_1, list_2))"
    },
    {
      "rank": 10,
      "score": 10.0,
      "candidate": "from functools import reduce\n\n\ndef mod_division(list_a, list_b):\n    return list(map(lambda x: x[0] % x[1], zip(list_a, list_b)))\n\n\ndef main():\n    list_a = [2, 4, 6, 8, 10]\n    list_b = [2, 3, 4, 5, 6]\n    print(\"Modulo division of two lists:\")\n    print(mod_division(list_a, list_b))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 11,
      "score": 10.0,
      "candidate": "from functools import reduce\n\n\ndef modulo_division(a, b):\n    return list(map(lambda x: x[0] % x[1], zip(a, b)))\n\n\ndef main():\n    a = [1, 2, 3, 4]\n    b = [2, 2, 2, 2]\n    print(modulo_division(a, b))\n    print(reduce(lambda x, y: x % y, a))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 12,
      "score": 10.0,
      "candidate": "def modulo_division(list1, list2):\n    return list(map(lambda x, y: x % y, list1, list2))\n\n\ndef main():\n    list1 = [1, 2, 3, 4, 5]\n    list2 = [1, 2, 3, 4]\n    print(modulo_division(list1, list2))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 13,
      "score": 10.0,
      "candidate": "def modulo_division(lst1, lst2):\n    return list(map(lambda x, y: x % y, lst1, lst2))\n\n\nif __name__ == \"__main__\":\n    print(modulo_division([2, 4, 6, 8], [2, 2, 2, 2]))"
    },
    {
      "rank": 14,
      "score": 10.0,
      "candidate": "def mod_div(a, b):\n    return list(map(lambda x, y: x % y, a, b))\n\nif __name__ == '__main__':\n    a = [2, 4, 6, 8, 10]\n    b = [2, 2, 2, 2, 2]\n    print(mod_div(a, b))"
    },
    {
      "rank": 15,
      "score": 10.0,
      "candidate": "def list_division(a, b):\n    return list(map(lambda x:x[0]//x[1], zip(a,b)))\n\na = [12,10,9,8]\nb = [4,3,2,3]\nprint(list_division(a,b))"
    },
    {
      "rank": 16,
      "score": 10.0,
      "candidate": "def modulo_division(list_1, list_2):\n    return list(map(lambda x, y: x % y, list_1, list_2))\n\n\nif __name__ == '__main__':\n    list_1 = [1, 2, 3, 4, 5, 6]\n    list_2 = [2, 4, 6, 8, 10, 12]\n    print(modulo_division(list_1, list_2))"
    },
    {
      "rank": 17,
      "score": 9.0,
      "candidate": "from functools import reduce\n\n\ndef modulo_division(list_a, list_b):\n    \"\"\"\n    Take two lists as input and find modulo division of each element of the list.\n    \"\"\"\n    return list(map(lambda x, y: x % y, list_a, list_b))\n\n\ndef modulo_division_reduce(list_a, list_b):\n    \"\"\"\n    Take two lists as input and find modulo division of each element of the list.\n    \"\"\"\n    return list(map(lambda x, y: x % y, list_a, list_b))\n\n\ndef main():\n    \"\"\"\n    Print the result of the modulo division of two lists.\n    \"\"\"\n    list_a = [2, 4, 6, 8, 10]\n    list_b = [2, 3, 11, 4, 7]\n    print(reduce(lambda x, y: x % y, list_a, list_b))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 18,
      "score": 9.0,
      "candidate": "def mod_div(list1, list2):\n    return list(map(lambda x: x[0]%x[1], zip(list1, list2)))\n\ndef main():\n    list1 = [1, 2, 3, 4, 5]\n    list2 = [2, 4, 6, 8, 10]\n    print(mod_div(list1, list2))\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 19,
      "score": 9.0,
      "candidate": "def modulo_division(list1, list2):\n    return list(map(lambda x, y: x % y, list1, list2))\n\n\nprint(modulo_division([1, 2, 3, 4], [2, 4, 5, 8]))"
    },
    {
      "rank": 20,
      "score": 9.0,
      "candidate": "def modulo(a, b):\n    return list(map(lambda x: x[0]%x[1], zip(a,b)))\n\nif __name__ == '__main__':\n    a = [2, 4, 5, 8, 10]\n    b = [2, 2, 5, 4, 10]\n    print(\"Modulo of given lists:\", modulo(a, b))"
    },
    {
      "rank": 21,
      "score": 9.0,
      "candidate": "from functools import reduce\nfrom operator import mul\n\n\ndef modulo_division(a, b):\n    return reduce(\n        lambda x, y: mul(x, y),\n        map(lambda x, y: x // y, a, b)\n    )\n\n\nprint(modulo_division([1, 2, 3], [4, 5, 6]))"
    },
    {
      "rank": 22,
      "score": 9.0,
      "candidate": "from functools import reduce\n\ndef find_modulo(a, b):\n    \"\"\"\n    Find modulo of two lists using map and lambda function.\n    \"\"\"\n    return list(map(lambda x: x[0] % x[1], zip(a, b)))\n\ndef main():\n    \"\"\"\n    Main function\n    \"\"\"\n    a = [2, 4, 5, 10, 17, 8]\n    b = [2, 3, 4, 5, 6, 7]\n    print(find_modulo(a, b))\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 23,
      "score": 9.0,
      "candidate": "from functools import reduce\nfrom operator import mul\n\n\ndef modulo(a, b):\n    \"\"\"Find modulo division of two lists.\"\"\"\n    return reduce(lambda x, y: x * y, map(mul, a, b))"
    },
    {
      "rank": 24,
      "score": 9.0,
      "candidate": "def modulo_division(l1, l2):\n    return list(map(lambda x: x[0] % x[1], zip(l1, l2)))\n\nl1 = [2, 4, 6, 8, 10]\nl2 = [2, 2, 2, 2, 2]\nprint(modulo_division(l1, l2))"
    },
    {
      "rank": 25,
      "score": 8.0,
      "candidate": "from functools import reduce\n\n\ndef modulo_division(a, b):\n    return list(\n        map(\n            lambda x: x[0] % x[1],\n            zip(a, b),\n        )\n    )\n\n\ndef modulo_division_reduce(a, b):\n    return list(\n        reduce(\n            lambda x, y: x + [y[0] % y[1]],\n            zip(a, b),\n            [],\n        )\n    )\n\n\nif __name__ == \"__main__\":\n    a = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    b = [2, 4, 6, 8, 10, 12, 14, 16, 18]\n    print(modulo_division(a, b))\n    print(modulo_division_reduce(a, b))"
    },
    {
      "rank": 26,
      "score": 8.0,
      "candidate": "def modulo(list1, list2):\n    return list(map(lambda x: x[0] % x[1], zip(list1, list2)))\n\n\nif __name__ == \"__main__\":\n    print(modulo([1, 2, 3, 4, 5], [2, 3, 4, 5, 6]))"
    },
    {
      "rank": 27,
      "score": 8.0,
      "candidate": "def mod_div(a, b):\n    return list(map(lambda x: x[0] % x[1], zip(a, b)))\n\n\nif __name__ == \"__main__\":\n    print(mod_div([1, 2, 3, 4, 5], [2, 3, 4, 5, 6]))"
    },
    {
      "rank": 28,
      "score": 8.0,
      "candidate": "from functools import reduce\n\n\ndef modulo(num1, num2):\n    return [i % j for i, j in zip(num1, num2)]\n\n\ndef modulo_map(num1, num2):\n    return list(map(lambda x: x[0] % x[1], zip(num1, num2)))\n\n\ndef modulo_reduce(num1, num2):\n    return list(reduce(lambda x, y: x + [y[0] % y[1]], zip(num1, num2), []))\n\n\nif __name__ == \"__main__\":\n    num1 = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    num2 = [2, 3, 4, 5, 6, 7, 8, 9, 10]\n    print(\"Modulo:\", modulo(num1, num2))\n    print(\"Modulo map:\", modulo_map(num1, num2))\n    print(\"Modulo reduce:\", modulo_reduce(num1, num2))"
    },
    {
      "rank": 29,
      "score": 8.0,
      "candidate": "from functools import reduce\n\n\ndef modulo_division(x, y):\n    return reduce(lambda a, b: a + b, map(lambda x, y: x % y, x, y))\n\n\nprint(modulo_division([2, 5, 3, 8, 9], [1, 2, 3, 8, 9]))"
    },
    {
      "rank": 30,
      "score": 8.0,
      "candidate": "def modulo_division(l1, l2):\n    return list(map(lambda x, y: x % y, l1, l2))\n\nl1 = [1, 2, 3, 4, 5, 6, 7, 8, 9]\nl2 = [2, 4, 5, 6, 8]\n\nprint(modulo_division(l1, l2))"
    },
    {
      "rank": 31,
      "score": 8.0,
      "candidate": "def modulo_division(a, b):\n    return list(map(lambda x: x[0] % x[1], zip(a, b)))\n\na = [1, 2, 3, 4, 5]\nb = [2, 3, 4, 5, 6]\nprint(modulo_division(a, b))"
    },
    {
      "rank": 32,
      "score": 8.0,
      "candidate": "from functools import reduce\n\n\ndef modulo_division(first_list, second_list):\n    return list(map(lambda x: x[0] % x[1], zip(first_list, second_list)))\n\n\ndef main():\n    print(\"Modulo Division of two lists:\")\n    print(modulo_division([1, 2, 3, 4], [2, 2, 2, 2]))\n    print(modulo_division([1, 2, 3, 4], [4, 4, 4, 4]))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 33,
      "score": 8.0,
      "candidate": "def modulo_division(list1, list2):\n    return list(map(lambda x: x[0] % x[1], zip(list1, list2)))\n\nlist1 = [1, 2, 3, 4, 5]\nlist2 = [2, 2, 2, 2, 2]\n\nprint(modulo_division(list1, list2))"
    },
    {
      "rank": 34,
      "score": 8.0,
      "candidate": "from functools import reduce\n\n\ndef modulo_division(a, b):\n    return list(map(lambda x: x[0] % x[1], zip(a, b)))\n\n\ndef modulo_division_lambda(a, b):\n    return list(map(lambda x: x[0] % x[1], zip(a, b)))\n\n\ndef modulo_division_reduce(a, b):\n    return reduce(lambda x, y: x + [y[0] % y[1]], zip(a, b), [])\n\n\nif __name__ == \"__main__\":\n    print(modulo_division([1, 2, 3, 4, 5], [2, 3, 4, 5, 6]))\n    print(modulo_division_lambda([1, 2, 3, 4, 5], [2, 3, 4, 5, 6]))\n    print(modulo_division_reduce([1, 2, 3, 4, 5], [2, 3, 4, 5, 6]))"
    },
    {
      "rank": 35,
      "score": 8.0,
      "candidate": "from functools import reduce\n\n\ndef modulo_division(nums_list, divisor):\n    return list(map(lambda x: x % divisor, nums_list))\n\n\ndef modulo_division_reduce(nums_list, divisor):\n    return list(map(lambda x: x % divisor, nums_list))\n\n\nprint(modulo_division(range(1, 11), 2))\nprint(modulo_division_reduce(range(1, 11), 2))"
    },
    {
      "rank": 36,
      "score": 8.0,
      "candidate": "from functools import reduce\n\n\ndef modulo_division(a, b):\n    return list(map(lambda x: x[0] % x[1], zip(a, b)))\n\n\ndef modulo_division_reduce(a, b):\n    return list(reduce(lambda x, y: x + [y[0] % y[1]], zip(a, b), []))\n\n\nprint(modulo_division([1, 2, 3, 4, 5, 6], [2, 3, 4, 5]))\nprint(modulo_division_reduce([1, 2, 3, 4, 5, 6], [2, 3, 4, 5]))"
    },
    {
      "rank": 37,
      "score": 8.0,
      "candidate": "def modulo(num1, num2):\n    return list(map(lambda x: x[0] % x[1], zip(num1, num2)))\n\n\ndef modulo_lambda(num1, num2):\n    return list(map(lambda x, y: x % y, num1, num2))\n\n\nprint(modulo([3, 4, 5, 6, 7, 8], [2, 3, 4, 5, 6, 7]))\nprint(modulo_lambda([3, 4, 5, 6, 7, 8], [2, 3, 4, 5, 6, 7]))"
    },
    {
      "rank": 38,
      "score": 8.0,
      "candidate": "def modulo_division(list1, list2):\n    return list(map(lambda x, y: x % y, list1, list2))\n\n\nif __name__ == \"__main__\":\n    list1 = [1, 2, 3, 4, 5, 6]\n    list2 = [2, 2, 2, 2, 2, 2]\n    print(modulo_division(list1, list2))"
    },
    {
      "rank": 39,
      "score": 8.0,
      "candidate": "from functools import reduce\nfrom operator import mul, truediv\n\n\ndef list_modulo(a, b):\n    return list(map(lambda x: x[0] % x[1], zip(a, b)))\n\n\ndef list_modulo_lambda(a, b):\n    return list(map(lambda x: x[0] % x[1], zip(a, b)))\n\n\ndef list_modulo_reduce(a, b):\n    return list(reduce(lambda x, y: x + [y[0] % y[1]], zip(a, b), []))\n\n\nif __name__ == \"__main__\":\n    a = [1, 2, 3, 4, 5]\n    b = [2, 2, 2, 2, 2]\n    print(list_modulo(a, b))\n    print(list_modulo_lambda(a, b))\n    print(list_modulo_reduce(a, b))"
    },
    {
      "rank": 40,
      "score": 8.0,
      "candidate": "from functools import reduce\nfrom operator import mul\n\n\ndef mod_division(a, b):\n    a = [1] + a\n    b = [1] + b\n    return reduce(mul, list(map(lambda x: x[0] % x[1], zip(a, b))))\n\n\nprint(mod_division([2, 4, 5], [3, 5, 2]))\nprint(mod_division([2, 4, 5], [3, 5, 2, 3]))"
    },
    {
      "rank": 41,
      "score": 8.0,
      "candidate": "from functools import reduce\n\n\ndef modulo_division(a, b):\n    return list(map(lambda x: x[0] % x[1], zip(a, b)))\n\n\ndef reduce_modulo_division(a, b):\n    return list(map(lambda x: x[0] % x[1], zip(a, b)))\n\n\ndef reduce_modulo_division_reduce(a, b):\n    return reduce(lambda x, y: x % y, a, b)\n\n\nprint(modulo_division([1, 2, 3, 4, 5], [3, 2, 5, 6, 1]))\nprint(reduce_modulo_division([1, 2, 3, 4, 5], [3, 2, 5, 6, 1]))\nprint(reduce_modulo_division_reduce([1, 2, 3, 4, 5], [3, 2, 5, 6, 1]))"
    },
    {
      "rank": 42,
      "score": 8.0,
      "candidate": "def modulo_division(x, y):\n    return list(map(lambda x: x % y, x))\n\n\nif __name__ == '__main__':\n    print(modulo_division([1, 2, 3, 4], 3))\n    print(modulo_division([1, 2, 3, 4], 0))"
    },
    {
      "rank": 43,
      "score": 8.0,
      "candidate": "from functools import reduce\n\n\ndef modulo_division(list_a, list_b):\n    return list(map(lambda x, y: x % y, list_a, list_b))\n\n\ndef modulo_division_reduce(list_a, list_b):\n    return reduce(lambda a, b: a % b, list_a, list_b)\n\n\nprint(modulo_division([1, 2, 3, 4, 5, 6, 7], [1, 2, 3, 4, 5, 6, 7]))\nprint(modulo_division_reduce([1, 2, 3, 4, 5, 6, 7], [1, 2, 3, 4, 5, 6, 7]))"
    },
    {
      "rank": 44,
      "score": 8.0,
      "candidate": "def modulo(l1, l2):\n    return list(map(lambda x, y: x % y, l1, l2))\n\n\nif __name__ == '__main__':\n    print(modulo([1, 2, 3, 4, 5, 6, 7], [2, 2, 2, 2, 2, 2, 2]))"
    },
    {
      "rank": 45,
      "score": 8.0,
      "candidate": "def modulo_division(a, b):\n    return list(map(lambda x, y: x % y, a, b))\n\n\nif __name__ == \"__main__\":\n    a = [3, 2, 5, 1, 1, 6]\n    b = [1, 2, 3, 4, 5, 6]\n    print(modulo_division(a, b))"
    },
    {
      "rank": 46,
      "score": 8.0,
      "candidate": "from functools import reduce\nfrom operator import mul, truediv\n\n\ndef mod_div(a, b):\n    return list(map(truediv, a, [reduce(mul, b, 1)] * len(a)))\n\n\na = [1, 2, 3, 4, 5]\nb = [2, 2, 2, 2, 2]\nprint(mod_div(a, b))"
    },
    {
      "rank": 47,
      "score": 8.0,
      "candidate": "def mod(x, y):\n    return x % y\n\ndef find_modulo_division(list1, list2):\n    return list(map(lambda x, y: x % y, list1, list2))\n\ndef main():\n    list1 = [1, 2, 3, 4]\n    list2 = [2, 2, 2, 2]\n\n    result = find_modulo_division(list1, list2)\n\n    print(result)\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 48,
      "score": 8.0,
      "candidate": "from functools import reduce\n\n\ndef modulo_division(list_1, list_2):\n    return list(map(lambda x: x[0] % x[1], zip(list_1, list_2)))\n\n\ndef main():\n    l1 = [1, 2, 3, 4, 5]\n    l2 = [2, 3, 4, 5, 6]\n    print(modulo_division(l1, l2))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 49,
      "score": 8.0,
      "candidate": "from functools import reduce\n\n\ndef modulo_division(a, b):\n    return [x % y for x, y in zip(a, b)]\n\n\ndef modulo_division_2(a, b):\n    return list(map(lambda x: x[0] % x[1], zip(a, b)))\n\n\ndef modulo_division_3(a, b):\n    return reduce(lambda x, y: x + [y[0] % y[1]], zip(a, b), [])\n\n\ndef main():\n    a = [1, 2, 3, 4, 5]\n    b = [2, 2, 2, 2, 2]\n    print(modulo_division(a, b))\n    print(modulo_division_2(a, b))\n    print(modulo_division_3(a, b))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 50,
      "score": 8.0,
      "candidate": "def mod_list(a, b):\n    return list(map(lambda x: x[0] % x[1], zip(a, b)))\n\na = [2, 4, 6, 8, 10]\nb = [2, 2, 2, 2, 2]\nprint(mod_list(a, b))"
    },
    {
      "rank": 51,
      "score": 8.0,
      "candidate": "def modulo(a, b):\n    return list(map(lambda x, y: x % y, a, b))\n\n\nif __name__ == \"__main__\":\n    a = [1, 2, 3, 4, 5]\n    b = [2, 2, 2, 2, 2]\n    print(modulo(a, b))"
    },
    {
      "rank": 52,
      "score": 8.0,
      "candidate": "def mod_division(a, b):\n    return list(map(lambda x: x[0] % x[1], zip(a, b)))\n\na = [2, 3, 4, 5]\nb = [3, 2, 3, 4]\nprint(mod_division(a, b))"
    },
    {
      "rank": 53,
      "score": 8.0,
      "candidate": "def modulo(lst1, lst2):\n    return list(map(lambda x: x[0] % x[1], zip(lst1, lst2)))\n\n\nprint(modulo([3, 2, 1], [2, 3, 4]))"
    },
    {
      "rank": 54,
      "score": 8.0,
      "candidate": "from functools import reduce\n\n\ndef modulo_division(a, b):\n    return [x % y for x, y in zip(a, b)]\n\n\ndef modulo_division_map(a, b):\n    return list(map(lambda x: x[0] % x[1], zip(a, b)))\n\n\ndef modulo_division_reduce(a, b):\n    return reduce(lambda x, y: x + [y[0] % y[1]], zip(a, b), [])\n\n\nif __name__ == \"__main__\":\n    assert modulo_division([1, 2, 3, 4, 5], [1, 2, 3, 4, 5]) == [0, 0, 0, 0, 0]\n    assert modulo_division_map([1, 2, 3, 4, 5], [1, 2, 3, 4, 5]) == [0, 0, 0, 0, 0]\n    assert modulo_division_reduce([1, 2, 3, 4, 5], [1, 2, 3, 4, 5]) == [0, 0, 0, 0, 0]"
    },
    {
      "rank": 55,
      "score": 8.0,
      "candidate": "def modulo(l1,l2):\n    return list(map(lambda x: x[0]%x[1], zip(l1,l2)))\n\nl1 = [1, 2, 3, 4, 5, 6]\nl2 = [5, 4, 3, 2, 1, 0]\nprint(modulo(l1,l2))"
    },
    {
      "rank": 56,
      "score": 8.0,
      "candidate": "def modulo_division(list1, list2):\n    return list(map(lambda x: x[0] % x[1], zip(list1, list2)))\n\n\nprint(modulo_division([1, 2, 3, 4, 5, 6], [2, 3, 4, 5, 6, 7]))"
    },
    {
      "rank": 57,
      "score": 8.0,
      "candidate": "from functools import reduce\n\n\ndef modulo_division(nums, divisor):\n    return reduce(\n        lambda x, y: x * 10 + y,\n        map(lambda x: x % divisor, nums)\n    )\n\n\nif __name__ == \"__main__\":\n    print(modulo_division([2, 1, 3, 4, 7, 5], 5))"
    },
    {
      "rank": 58,
      "score": 8.0,
      "candidate": "def modulo_division(list1, list2):\n    return list(map(lambda x: x[0] % x[1], zip(list1, list2)))\n\n\nif __name__ == '__main__':\n    list1 = [1, 2, 3, 4, 5]\n    list2 = [2, 3, 4, 5, 6]\n\n    print(modulo_division(list1, list2))"
    },
    {
      "rank": 59,
      "score": 8.0,
      "candidate": "from functools import reduce\n\ndef modulo_division(l1, l2):\n    return list(map(lambda x: x[0] % x[1], zip(l1, l2)))\n\nif __name__ == \"__main__\":\n    l1 = [2, 4, 5, 6]\n    l2 = [2, 3, 4, 5]\n    print(modulo_division(l1, l2))\n\n    # using reduce\n    print(list(map(lambda x: reduce(lambda y, z: y % z, x), zip(l1, l2))))"
    },
    {
      "rank": 60,
      "score": 8.0,
      "candidate": "def modulo(a, b):\n    return list(map(lambda x: x[0] % x[1], zip(a, b)))\n\n\nif __name__ == \"__main__\":\n    a = [1, 2, 3, 4, 5, 6]\n    b = [2, 4, 6, 8, 10, 12]\n    print(modulo(a, b))"
    },
    {
      "rank": 61,
      "score": 8.0,
      "candidate": "from functools import reduce\n\n\ndef mod(a, b):\n    return a % b\n\n\ndef mod_div(a, b):\n    return reduce(lambda x, y: x % y, b)\n\n\ndef mod_div_map(a, b):\n    return map(lambda x: mod(x, b), a)\n\n\ndef main():\n    a = [2, 5, 7, 1, 2, 5, 4, 1, 2]\n    b = [2, 3, 1, 1, 4]\n    print(mod_div(a, b))\n    print(mod_div_map(a, b))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 62,
      "score": 8.0,
      "candidate": "def mod_div(x, y):\n    return list(map(lambda a, b: a % b, x, y))\n\n\nif __name__ == \"__main__\":\n    print(mod_div([1, 2, 3, 4, 5], [2, 2, 2, 2, 2]))"
    },
    {
      "rank": 63,
      "score": 8.0,
      "candidate": "def modulo_division(list1, list2):\n    return list(map(lambda x, y: x % y, list1, list2))\n\n\nif __name__ == \"__main__\":\n    print(modulo_division([1, 2, 3], [2, 4, 6]))"
    },
    {
      "rank": 64,
      "score": 8.0,
      "candidate": "def list_modulo_division(list_a, list_b):\n    return list(map(lambda x: x[0] % x[1], zip(list_a, list_b)))\n\n\nif __name__ == \"__main__\":\n    list_a = [1, 2, 3, 4]\n    list_b = [2, 3, 4, 5]\n    print(list_modulo_division(list_a, list_b))"
    },
    {
      "rank": 65,
      "score": 8.0,
      "candidate": "def mod_div(a, b):\n    return list(map(lambda x: x[0] % x[1], zip(a, b)))\n\n\nif __name__ == \"__main__\":\n    a = [2, 4, 5, 7, 8]\n    b = [2, 3, 5, 7, 9]\n    print(mod_div(a, b))"
    },
    {
      "rank": 66,
      "score": 8.0,
      "candidate": "def modulo_division(list_a, list_b):\n    return list(map(lambda x, y: x % y, list_a, list_b))\n\n\nif __name__ == '__main__':\n    list_a = [1, 2, 3, 4, 5]\n    list_b = [2, 3, 4, 5, 6]\n    print(modulo_division(list_a, list_b))"
    },
    {
      "rank": 67,
      "score": 8.0,
      "candidate": "def modulo(a, b):\n    return list(map(lambda x, y: x % y, a, b))\n\n\nprint(modulo([1, 2, 3, 4, 5, 6, 7, 8], [2, 2, 2, 2, 2, 2, 2, 2]))"
    },
    {
      "rank": 68,
      "score": 8.0,
      "candidate": "def modulo_division(list1, list2):\n    return list(map(lambda x, y: x % y, list1, list2))\n\n\nif __name__ == '__main__':\n    print(modulo_division([1, 2, 3, 4, 5, 6], [2, 2, 2, 2, 2, 2]))"
    },
    {
      "rank": 69,
      "score": 8.0,
      "candidate": "def modulo(a, b):\n    return list(map(lambda x: x[0] % x[1], zip(a, b)))\n\n\ndef main():\n    a = [2, 4, 5, 8, 10]\n    b = [3, 1, 2, 5, 2]\n    print(modulo(a, b))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 70,
      "score": 8.0,
      "candidate": "from functools import reduce\n\ndef modulo(a, b):\n    return list(map(lambda x: x[0] % x[1], zip(a, b)))\n\ndef modulo_reduce(a, b):\n    return reduce(lambda x, y: x % y, a, b)\n\nprint(modulo([2, 3, 4, 5], [1, 2, 3, 4]))\nprint(modulo_reduce([2, 3, 4, 5], [1, 2, 3, 4]))"
    },
    {
      "rank": 71,
      "score": 8.0,
      "candidate": "def mod_div(list1, list2):\n    return list(map(lambda x, y: x % y, list1, list2))\n\n\nprint(mod_div([3, 6, 9], [2, 4, 8]))"
    },
    {
      "rank": 72,
      "score": 8.0,
      "candidate": "from functools import reduce\nfrom operator import mul, truediv\n\n\ndef modulo_division(nums, denoms):\n    return list(map(lambda x: x[0] / x[1], zip(nums, denoms)))\n\n\ndef modulo_division_with_reduce(nums, denoms):\n    return reduce(mul, nums) / reduce(mul, denoms)\n\n\ndef modulo_division_with_lambda(nums, denoms):\n    return reduce(lambda x, y: x / y, nums) / reduce(lambda x, y: x / y, denoms)\n\n\nprint(modulo_division([1, 2, 3], [2, 3, 4]))\nprint(modulo_division_with_reduce([1, 2, 3], [2, 3, 4]))\nprint(modulo_division_with_lambda([1, 2, 3], [2, 3, 4]))"
    },
    {
      "rank": 73,
      "score": 8.0,
      "candidate": "def modulo(a, b):\n    return list(map(lambda x, y: x % y, a, b))\n\n\nprint(modulo([1, 2, 3, 4], [2, 3, 4, 5]))"
    },
    {
      "rank": 74,
      "score": 8.0,
      "candidate": "# This is the function from question\ndef modulo_division(divisor, dividend):\n    quotient = []\n    for i in range(len(divisor)):\n        quotient.append(int(dividend[i] / divisor[i]))\n    return quotient\n\n\ndivisor = [2, 3, 4]\ndividend = [1, 2, 3]\nprint(modulo_division(divisor, dividend))\n\n# This is the answer\ndef modulo_division_lambda(divisor, dividend):\n    return list(map(lambda x: int(dividend[x] / divisor[x]), range(len(divisor))))\n\n\nprint(modulo_division_lambda(divisor, dividend))"
    },
    {
      "rank": 75,
      "score": 8.0,
      "candidate": "def modulo_division(l1, l2):\n    return list(map(lambda x: x[0] % x[1], zip(l1, l2)))\n\n\ndef main():\n    l1 = [1, 2, 3, 4, 5, 6]\n    l2 = [2, 2, 2, 2, 2, 2]\n    print(modulo_division(l1, l2))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 76,
      "score": 8.0,
      "candidate": "def find_modulo_division(list1, list2):\n    return list(map(lambda x: x[0] % x[1], zip(list1, list2)))\n\n\nprint(find_modulo_division([1, 2, 3, 4], [3, 4, 5, 6]))"
    },
    {
      "rank": 77,
      "score": 8.0,
      "candidate": "from functools import reduce\n\n\ndef modulo_division(a, b):\n    return list(map(lambda x: x[0] % x[1], zip(a, b)))\n\n\ndef main():\n    a = [1, 2, 3, 4, 5]\n    b = [2, 3, 4, 5, 6]\n    print(reduce(lambda x, y: x * y, a))\n    print(modulo_division(a, b))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 78,
      "score": 8.0,
      "candidate": "from functools import reduce\nfrom operator import mul, truediv\n\n\ndef modulo_division(a, b):\n    return list(map(lambda x: truediv(x, reduce(mul, b)), a))\n\n\nif __name__ == \"__main__\":\n    print(modulo_division([1, 2, 3, 4], [2, 3]))"
    },
    {
      "rank": 79,
      "score": 8.0,
      "candidate": "from functools import reduce\n\n\ndef mod_division(a, b):\n    return list(map(lambda x: x[0] % x[1], zip(a, b)))\n\n\ndef mod_division_reduce(a, b):\n    return list(reduce(lambda x, y: x + [y[0] % y[1]], zip(a, b), []))\n\n\na = [1, 2, 3, 4, 5]\nb = [2, 2, 2, 2, 2]\nprint(mod_division(a, b))\nprint(mod_division_reduce(a, b))"
    },
    {
      "rank": 80,
      "score": 8.0,
      "candidate": "from functools import reduce\nfrom operator import mul\n\n\ndef modulo_division(a, b):\n    return reduce(mul, map(lambda x, y: x % y, a, b), 1)\n\n\nif __name__ == '__main__':\n    a = [3, 2, 4, 5]\n    b = [2, 4, 5, 3]\n    print(modulo_division(a, b))"
    },
    {
      "rank": 81,
      "score": 8.0,
      "candidate": "from functools import reduce\nfrom operator import mul\n\n\ndef modulo_division(list_1, list_2):\n    # multiplying each element of list_1 by inverse of list_2[0]\n    # then multiplying with list_2[0] and then dividing by list_2\n    return list(map(lambda x: x // reduce(mul, list_2), list_1))\n\n\nprint(modulo_division([10, 20, 30, 40, 50], [1, 2, 3, 4, 5]))"
    },
    {
      "rank": 82,
      "score": 8.0,
      "candidate": "from functools import reduce\n\n\ndef modulo_division(first, second):\n    return list(map(lambda x: x[0] % x[1], zip(first, second)))\n\n\ndef main():\n    print(\"Modulo division of 15 and 10 is:\")\n    print(modulo_division([15, 30, 45], [10, 20, 30]))\n\n    print(\"Modulo division of 15 and 10 is:\")\n    print(modulo_division([15, 30, 45], [10, 20, 30]))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 83,
      "score": 8.0,
      "candidate": "from functools import reduce\n\n\ndef modulo(list1, list2):\n    return list(map(lambda x: x[0] % x[1], zip(list1, list2)))\n\n\ndef modulo_reduce(list1, list2):\n    return list(reduce(lambda x, y: x + [y[0] % y[1]], zip(list1, list2), []))\n\n\n# Test\nlist1 = [1, 2, 3, 4, 5]\nlist2 = [2, 3, 4, 5, 6]\nprint(\"Modulo of \" + str(list1) + \" and \" + str(list2) + \" is:\")\nprint(modulo(list1, list2))\nprint(modulo_reduce(list1, list2))"
    },
    {
      "rank": 84,
      "score": 8.0,
      "candidate": "def modulo(x, y):\n    return list(map(lambda num: num[0] % num[1], zip(x, y)))\n\nprint(modulo([1, 2, 3, 4, 5, 6], [2, 4, 6, 8, 10, 12]))\nprint(modulo([1, 2, 3, 4, 5, 6], [2, 4, 6, 8, 10, 12]))\nprint(modulo([1, 2, 3, 4, 5, 6], [2, 4, 6, 8, 10, 12]))\nprint(modulo([1, 2, 3, 4, 5, 6], [2, 4, 6, 8, 10, 12]))"
    },
    {
      "rank": 85,
      "score": 8.0,
      "candidate": "from functools import reduce\n\n\ndef modulo_division(list1, list2):\n    return list(\n        map(lambda x: reduce(lambda x, y: x % y, list2, x), list1)\n    )\n\n\ndef main():\n    list1 = [3, 2, 15, 5, 6, 7]\n    list2 = [2, 3, 4, 5, 6, 7]\n    print(modulo_division(list1, list2))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 86,
      "score": 8.0,
      "candidate": "def mod_div(list1, list2):\n    return list(map(lambda x: x[0]%x[1], zip(list1, list2)))\n\n\nif __name__ == '__main__':\n    list1 = [1, 2, 3, 4, 5, 6]\n    list2 = [3, 6, 9, 12, 15, 18]\n    print(mod_div(list1, list2))"
    },
    {
      "rank": 87,
      "score": 8.0,
      "candidate": "def modulo_division(list1, list2):\n    return list(map(lambda x, y: x % y, list1, list2))\n\n\nif __name__ == \"__main__\":\n    list1 = [1, 2, 3, 4, 5]\n    list2 = [2, 4, 6, 8, 10]\n    print(modulo_division(list1, list2))"
    },
    {
      "rank": 88,
      "score": 8.0,
      "candidate": "def modulo_division(a, b):\n    return list(map(lambda x, y: x % y, a, b))\n\n\nif __name__ == \"__main__\":\n    a = [1, 2, 3, 4]\n    b = [3, 5, 2, 7]\n    print(modulo_division(a, b))"
    },
    {
      "rank": 89,
      "score": 8.0,
      "candidate": "def modulo(a, b):\n    return list(map(lambda x: x[0] % x[1], zip(a, b)))\n\n\nif __name__ == \"__main__\":\n    print(modulo([2, 5, 8], [3, 7, 11]))"
    },
    {
      "rank": 90,
      "score": 1.0,
      "candidate": "def find_modulo(a, b):\n    return list(map(lambda x: x[0] % x[1], zip(a, b)))\n\n\nif __name__ == '__main__':\n    a = [2, 4, 5, 7, 8, 10]\n    b = [2, 3, 4, 5, 6, 7]\n    print(find_modulo(a, b))\n\n    # Testing 1\n    a = [2, 4, 5, 7, 8, 10]\n    b = [2, 3, 4, 5, 6, 7]\n    print(find_modulo(a, b))\n\n    # Testing 2\n    a = [2, 4, 5, 7, 8, 10]\n    b = [2, 3, 4, 5, 6, 7]\n    print(find_modulo(a, b))"
    },
    {
      "rank": 91,
      "score": 1.0,
      "candidate": "from functools import reduce\nfrom operator import mul, truediv\n\n\ndef modulo_division(a, b):\n    return list(map(lambda x, y: x / y, a, b))\n\n\ndef modulo_division_map(a, b):\n    return list(map(truediv, a, b))\n\n\ndef modulo_division_reduce(a, b):\n    return reduce(truediv, a, b)\n\n\nif __name__ == \"__main__\":\n    a = [1, 2, 3, 4]\n    b = [2, 3, 4, 5]\n    print(modulo_division(a, b))\n    print(modulo_division_map(a, b))\n    print(modulo_division_reduce(a, b))"
    },
    {
      "rank": 92,
      "score": 1.0,
      "candidate": "# solution 1\ndef mod_division_list(l1, l2):\n    return list(map(lambda x, y: x % y, l1, l2))\n\n\n# solution 2\ndef mod_division_list(l1, l2):\n    return [x % y for x, y in zip(l1, l2)]\n\n\n# solution 3\ndef mod_division_list(l1, l2):\n    return [x % y for x, y in zip(l1, l2)]\n\n\n# solution 4\ndef mod_division_list(l1, l2):\n    return list(map(lambda x: x[0] % x[1], zip(l1, l2)))"
    },
    {
      "rank": 93,
      "score": 1.0,
      "candidate": "from functools import reduce\nfrom operator import mod\n\n\ndef modulo_division(a, b):\n    return list(map(lambda x, y: x % y, a, b))\n\n\ndef modulo_division_reduce(a, b):\n    return reduce(lambda x, y: mod(x, y), a, b)\n\n\ndef modulo_division_map(a, b):\n    return list(map(lambda x: mod(x, b), a))\n\n\nif __name__ == \"__main__\":\n    a = [2, 4, 6, 8, 10]\n    b = [2, 2, 2, 2, 2]\n    print(modulo_division(a, b))\n    print(modulo_division_reduce(a, b))\n    print(modulo_division_map(a, b))"
    },
    {
      "rank": 94,
      "score": 1.0,
      "candidate": "from functools import reduce\n\n\ndef modulo_division(a, b):\n    return list(map(lambda x: x[0] % x[1], zip(a, b)))\n\n\ndef modulo_division_lambda(a, b):\n    return list(map(lambda x, y: x % y, a, b))\n\n\ndef modulo_division_reduce(a, b):\n    return list(reduce(lambda x, y: x % y, a, b))\n\n\nif __name__ == \"__main__\":\n    a = [1, 2, 3, 4, 5]\n    b = [2, 3, 4, 5, 6]\n    print(modulo_division(a, b))\n    print(modulo_division_lambda(a, b))\n    print(modulo_division_reduce(a, b))"
    },
    {
      "rank": 95,
      "score": 1.0,
      "candidate": "from functools import reduce\n\n\ndef modulo_division(a, b):\n    return list(map(lambda x: x[0] % x[1], zip(a, b)))\n\n\ndef modulo_division_reduce(a, b):\n    return reduce(lambda x, y: x + [y[0] % y[1]], zip(a, b), [])\n\n\nprint(modulo_division([1, 2, 3, 4], [2, 4, 6, 8]))\nprint(modulo_division_reduce([1, 2, 3, 4], [2, 4, 6, 8]))"
    },
    {
      "rank": 96,
      "score": 1.0,
      "candidate": "from functools import reduce\nfrom operator import mul\nfrom operator import truediv\nfrom operator import add\n\n\ndef mod_div(a, b):\n    return [reduce(lambda x, y: x * y, b) % i for i in a]\n\n\ndef mod_div_lambda(a, b):\n    return list(map(lambda x: reduce(mul, b) % x, a))\n\n\ndef mod_div_lambda_2(a, b):\n    return list(map(lambda x: reduce(mul, b) % x, a))\n\n\ndef mod_div_lambda_3(a, b):\n    return list(map(lambda x: reduce(mul, b) % x, a))\n\n\ndef mod_div_lambda_4(a, b):\n    return list(map(lambda x: reduce(mul, b) % x, a))\n\n\ndef mod_div_lambda_5(a, b):\n    return list(map(lambda x: reduce(mul, b) % x, a))\n\n\ndef mod_div_lambda_6(a, b):\n    return list(map(lambda x: reduce(mul, b) % x, a))\n\n\ndef mod_div_lambda_7(a, b):\n    return list(map(lambda x: reduce(mul, b) % x, a))\n\n\ndef mod_div_lambda_8(a, b):\n    return list(map(lambda x: reduce(mul, b) % x, a))\n\n\ndef mod_div_lambda_9(a, b):\n    return list(map(lambda x: reduce(mul, b) % x, a))\n\n\ndef mod_div_lambda_10(a, b):\n    return list(map(lambda x: reduce(mul, b) % x, a))\n\n\ndef mod_div_lambda_11(a, b):\n    return list(map(lambda x: reduce(mul, b) % x, a))\n\n\ndef mod_div_lambda_12(a, b):\n    return list(map(lambda x: reduce(mul, b) % x, a))\n\n\ndef mod_div_"
    },
    {
      "rank": 97,
      "score": 1.0,
      "candidate": "def modulo_division(list_a, list_b):\n    return list(map(lambda x, y: x % y, list_a, list_b))\n\n\nif __name__ == \"__main__\":\n    list_a = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    list_b = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    print(modulo_division(list_a, list_b))"
    },
    {
      "rank": 98,
      "score": 1.0,
      "candidate": "from functools import reduce\nfrom operator import mul, truediv, floordiv, mod\n\n\ndef find_modulo_division_of_two_lists(a, b):\n    return [reduce(mod, map(truediv, a, b)) for _ in range(len(a))]\n\n\nif __name__ == \"__main__\":\n    a = [1, 2, 3, 4, 5]\n    b = [2, 3, 4, 5, 6]\n    print(find_modulo_division_of_two_lists(a, b))"
    },
    {
      "rank": 99,
      "score": 1.0,
      "candidate": "def modulo_division(nums1, nums2):\n    return list(map(lambda x: x[0] % x[1], zip(nums1, nums2)))\n\n\ndef main():\n    nums1 = [2, 4, 5, 6, 7, 8, 9, 10]\n    nums2 = [2, 4, 5, 6, 7, 8, 9, 10]\n    print(modulo_division(nums1, nums2))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 100,
      "score": 1.0,
      "candidate": "def mod_div(a, b):\n    return list(map(lambda x, y: x % y, a, b))\n\n\ndef main():\n    a = [2, 4, 6, 8]\n    b = [2, 4, 8, 16]\n    print(f'mod div of {a} and {b} is {mod_div(a, b)}')\n\n\nif __name__ == \"__main__\":\n    main()"
    }
  ]
}