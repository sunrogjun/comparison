{
  "timestamp": "2025-09-15T01:09:39.809021",
  "method": "improved_llm_judge",
  "judge_model": "codellama/CodeLlama-7b-Python-hf",
  "target_model": "codellama-7b",
  "dataset": "mbpp",
  "problem_number": 377,
  "total_candidates": 100,
  "results": [
    {
      "rank": 1,
      "score": 10.0,
      "candidate": "def highest_power_of_two(n):\n    if n == 0:\n        return 0\n    highest_power = 1\n    while highest_power <= n:\n        highest_power = highest_power * 2\n    return highest_power // 2\n\n\nprint(highest_power_of_two(100))\nprint(highest_power_of_two(0))\nprint(highest_power_of_two(1))"
    },
    {
      "rank": 2,
      "score": 10.0,
      "candidate": "def power(n):\n    i = 0\n    while 2 ** i <= n:\n        i += 1\n    return 2 ** (i - 1)\n\n\ndef power_1(n):\n    i = 1\n    while 2 ** i <= n:\n        i += 1\n    return 2 ** (i - 1)\n\n\ndef power_2(n):\n    if n == 0:\n        return 0\n    return 2 ** (n.bit_length() - 1)\n\n\ndef power_3(n):\n    return 2 ** (n.bit_length() - 1)\n\n\ndef power_4(n):\n    if n == 0:\n        return 0\n    return 2 ** (n.bit_length() - 1)\n\n\ndef power_5(n):\n    return 2 ** (n.bit_length() - 1)\n\n\nprint(power(100))\nprint(power_1(100))\nprint(power_2(100))\nprint(power_3(100))\nprint(power_4(100))\nprint(power_5(100))"
    },
    {
      "rank": 3,
      "score": 10.0,
      "candidate": "def highest_power_of_2(n):\n    if n == 0:\n        return 0\n    power = 1\n    while power < n:\n        power *= 2\n    return power // 2\n\n\nprint(highest_power_of_2(0))\nprint(highest_power_of_2(1))\nprint(highest_power_of_2(2))\nprint(highest_power_of_2(3))\nprint(highest_power_of_2(4))\nprint(highest_power_of_2(5))\nprint(highest_power_of_2(6))\nprint(highest_power_of_2(7))\nprint(highest_power_of_2(8))\nprint(highest_power_of_2(9))\nprint(highest_power_of_2(10))\nprint(highest_power_of_2(11))\nprint(highest_power_of_2(12))\nprint(highest_power_of_2(13))\nprint(highest_power_of_2(14))\nprint(highest_power_of_2(15))\nprint(highest_power_of_2(16))\nprint(highest_power_of_2(17))\nprint(highest_power_of_2(18))\nprint(highest_power_of_2(19))\nprint(highest_power_of_2(20))\nprint(highest_power_of_2(21))\nprint(highest_power_of_2(22))\nprint(highest_power_of_2(23))\nprint(highest_power_of_2(24))\nprint(highest_power_of_2(25))\nprint(highest_power_of_2(26))\nprint(highest_power_of_2(27))\nprint(highest_power_of_2(28))\nprint(highest_power_of_2(29))\nprint(highest_power_of_2(30))\nprint("
    },
    {
      "rank": 4,
      "score": 10.0,
      "candidate": "def highest_power_of_2(n: int) -> int:\n    \"\"\"Return the highest power of 2 that is less than or equal to n.\n\n    >>> highest_power_of_2(10)\n    8\n    >>> highest_power_of_2(15)\n    16\n    >>> highest_power_of_2(17)\n    16\n    >>> highest_power_of_2(2)\n    2\n    >>> highest_power_of_2(0)\n    0\n    \"\"\"\n    return 2 ** (n - 1).bit_length()\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 5,
      "score": 10.0,
      "candidate": "def highest_power_of_2(n: int) -> int:\n    \"\"\"\n    Find the highest power of 2 that is less than or equal to n.\n    >>> highest_power_of_2(16)\n    8\n    >>> highest_power_of_2(17)\n    8\n    >>> highest_power_of_2(19)\n    8\n    >>> highest_power_of_2(32)\n    16\n    >>> highest_power_of_2(256)\n    128\n    \"\"\"\n\n    if n <= 0:\n        raise ValueError(\"n should be greater than 0\")\n\n    return 1 << (n.bit_length() - 1)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 6,
      "score": 10.0,
      "candidate": "def find_highest_power_of_2(n: int) -> int:\n    \"\"\"\n    >>> find_highest_power_of_2(10)\n    4\n    >>> find_highest_power_of_2(100)\n    16\n    >>> find_highest_power_of_2(1000)\n    128\n    >>> find_highest_power_of_2(10000)\n    512\n    >>> find_highest_power_of_2(100000)\n    1024\n    >>> find_highest_power_of_2(1000000)\n    2048\n    >>> find_highest_power_of_2(10000000)\n    4096\n    >>> find_highest_power_of_2(100000000)\n    8192\n    >>> find_highest_power_of_2(1000000000)\n    16384\n    \"\"\"\n    return 2 ** (len(bin(n)) - 2)\n\n\nif __name__ == \"__main__\":\n    from doctest import testmod\n\n    testmod()"
    },
    {
      "rank": 7,
      "score": 10.0,
      "candidate": "def find_highest_power(n: int) -> int:\n    \"\"\"\n    >>> find_highest_power(15)\n    8\n    >>> find_highest_power(16)\n    8\n    >>> find_highest_power(17)\n    8\n    >>> find_highest_power(32)\n    16\n    >>> find_highest_power(128)\n    128\n    >>> find_highest_power(256)\n    256\n    >>> find_highest_power(512)\n    512\n    >>> find_highest_power(-1)\n    Traceback (most recent call last):\n        ...\n    ValueError: Invalid input\n    >>> find_highest_power(0)\n    Traceback (most recent call last):\n        ...\n    ValueError: Invalid input\n    \"\"\"\n    if n <= 0:\n        raise ValueError(\"Invalid input\")\n    return 2 ** (len(bin(n)) - 2)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 8,
      "score": 10.0,
      "candidate": "def power_of_2(n):\n    return 2**(n-1).bit_length()\n\n\nprint(power_of_2(10))"
    },
    {
      "rank": 9,
      "score": 10.0,
      "candidate": "def highest_power_of_2(n):\n    \"\"\"\n    Return the highest power of 2 that is less than or equal to n.\n\n    >>> highest_power_of_2(2)\n    1\n    >>> highest_power_of_2(16)\n    4\n    >>> highest_power_of_2(256)\n    8\n    >>> highest_power_of_2(3)\n    1\n    >>> highest_power_of_2(0)\n    0\n    \"\"\"\n    power = 0\n    while (2 ** power) <= n:\n        power += 1\n    return (2 ** (power - 1))\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 10,
      "score": 10.0,
      "candidate": "def highest_power_of_2(n):\n    \"\"\"\n    Find the highest power of 2 that is less than or equal to n.\n\n    Args:\n       n(int): Number to find the highest power of 2.\n    Returns:\n       (int): The highest power of 2.\n    \"\"\"\n    if n < 0:\n        return -1\n    elif n == 0:\n        return 0\n    else:\n        return 1 << (n.bit_length() - 1)\n\n#test\nn = 10\nprint(\"Highest power of 2 less than or equal to {0}: {1}\".format(n, highest_power_of_2(n)))\n\nn = -1\nprint(\"Highest power of 2 less than or equal to {0}: {1}\".format(n, highest_power_of_2(n)))\n\nn = 0\nprint(\"Highest power of 2 less than or equal to {0}: {1}\".format(n, highest_power_of_2(n)))\n\nn = 1\nprint(\"Highest power of 2 less than or equal to {0}: {1}\".format(n, highest_power_of_2(n)))\n\nn = 2\nprint(\"Highest power of 2 less than or equal to {0}: {1}\".format(n, highest_power_of_2(n)))\n\nn = 3\nprint(\"Highest power of 2 less than or equal to {0}: {1}\".format(n, highest_power_of_2(n)))\n\nn = 5\nprint(\"Highest power of 2 less than or equal to {0}: {1}\".format(n, highest_power_of_2(n)))\n\nn = 6\nprint(\"Highest power of 2 less than or equal to {0}: {1}\".format(n, highest_power_of_2(n)))\n\nn = 7\nprint(\"Highest power of 2 less than or equal to {0}: {1}\".format(n, highest_power_of_2(n)))\n\nn = 8\nprint(\"Highest power of 2 less than or"
    },
    {
      "rank": 11,
      "score": 10.0,
      "candidate": "def power(n):\n    x = 1\n    while x < n:\n        x = x * 2\n    return x // 2\n\n\nn = int(input(\"Enter a number: \"))\nprint(power(n))"
    },
    {
      "rank": 12,
      "score": 10.0,
      "candidate": "def highest_power_of_2(n):\n    power = 0\n    while (1 << power) <= n:\n        power += 1\n    return (1 << (power - 1))\n\n\nprint(highest_power_of_2(10))\nprint(highest_power_of_2(20))\nprint(highest_power_of_2(31))"
    },
    {
      "rank": 13,
      "score": 10.0,
      "candidate": "def highest_power_of_2(n: int) -> int:\n    \"\"\"\n    >>> highest_power_of_2(16)\n    8\n    >>> highest_power_of_2(3)\n    1\n    >>> highest_power_of_2(10)\n    8\n    >>> highest_power_of_2(256)\n    256\n    >>> highest_power_of_2(5)\n    4\n    >>> highest_power_of_2(0)\n    0\n    >>> highest_power_of_2(-1)\n    Traceback (most recent call last):\n        ...\n    ValueError: Input must be a positive number\n    >>> highest_power_of_2([])\n    Traceback (most recent call last):\n        ...\n    TypeError: '<' not supported between instances of 'list' and 'int'\n    \"\"\"\n    if n < 0:\n        raise ValueError(\"Input must be a positive number\")\n    return 2 ** (n - 1).bit_length()\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 14,
      "score": 10.0,
      "candidate": "def highest_power_of_2(n):\n    \"\"\"\n    >>> highest_power_of_2(10)\n    8\n    >>> highest_power_of_2(32)\n    16\n    >>> highest_power_of_2(100)\n    64\n    >>> highest_power_of_2(5)\n    4\n    >>> highest_power_of_2(12)\n    8\n    >>> highest_power_of_2(15)\n    8\n    >>> highest_power_of_2(1)\n    1\n    >>> highest_power_of_2(2)\n    2\n    >>> highest_power_of_2(0)\n    0\n    >>> highest_power_of_2(-1)\n    0\n    >>> highest_power_of_2(-5)\n    0\n    \"\"\"\n    if n <= 0:\n        return 0\n    return 2 ** (len(bin(n - 1)) - 3)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 15,
      "score": 9.0,
      "candidate": "def highest_power(n: int) -> int:\n    \"\"\"\n    >>> highest_power(15)\n    8\n    >>> highest_power(12)\n    8\n    >>> highest_power(10)\n    8\n    >>> highest_power(8)\n    8\n    >>> highest_power(7)\n    4\n    >>> highest_power(1)\n    1\n    >>> highest_power(0)\n    0\n    \"\"\"\n    return n & (~(n - 1))\n\n\ndef main():\n    import doctest\n\n    doctest.testmod()\n    n = int(input(\"Enter a number: \").strip())\n    print(f\"Highest power of 2 that is less than or equal to {n}: {highest_power(n)}\")\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 16,
      "score": 9.0,
      "candidate": "def highest_power_of_two(n):\n    if n == 0:\n        return 0\n    else:\n        return 2**len(bin(n)[2:]) - 1\n\n\nif __name__ == \"__main__\":\n    assert highest_power_of_two(10) == 8"
    },
    {
      "rank": 17,
      "score": 9.0,
      "candidate": "def find_highest_power_of_two(n):\n    if n == 0:\n        return 0\n    count = 0\n    while n:\n        n >>= 1\n        count += 1\n    return 2 ** count\n\n\nprint(find_highest_power_of_two(10))\nprint(find_highest_power_of_two(32))\nprint(find_highest_power_of_two(33))"
    },
    {
      "rank": 18,
      "score": 8.0,
      "candidate": "def power_of_two(n):\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    if n % 2 == 0:\n        return power_of_two(n / 2) * 2\n    else:\n        return power_of_two(n / 2) * 2 + 1\n\n\nprint(power_of_two(2))"
    },
    {
      "rank": 19,
      "score": 8.0,
      "candidate": "def find_highest_power(n):\n    power = 1\n    while(power<=n):\n        power*=2\n    return power//2\n\n\nprint(find_highest_power(10))\nprint(find_highest_power(12))\nprint(find_highest_power(16))"
    },
    {
      "rank": 20,
      "score": 8.0,
      "candidate": "def find_highest_power_of_two(n):\n    count = 0\n    while (1 << count) <= n:\n        count += 1\n    return count - 1\n\n\nprint(find_highest_power_of_two(15))"
    },
    {
      "rank": 21,
      "score": 8.0,
      "candidate": "def highest_power_of_2(n):\n    power = 0\n    while 2**power <= n:\n        power += 1\n    return 2**(power-1)\n\n\nprint(highest_power_of_2(10))"
    },
    {
      "rank": 22,
      "score": 8.0,
      "candidate": "def highest_power_of_2(n):\n    \"\"\"\n    >>> highest_power_of_2(20)\n    16\n    >>> highest_power_of_2(100)\n    64\n    >>> highest_power_of_2(32)\n    32\n    >>> highest_power_of_2(128)\n    128\n    \"\"\"\n    if n <= 0:\n        return 0\n    if n == 1:\n        return 1\n\n    x = 2\n    while x <= n:\n        x *= 2\n    return x // 2\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 23,
      "score": 8.0,
      "candidate": "def power_of_2(n):\n    power = 0\n    while 2**power <= n:\n        power += 1\n    return power - 1\n\n\ndef main():\n    n = int(input(\"Enter a number: \"))\n    result = power_of_2(n)\n    print(f\"The highest power of 2 that is less than or equal to {n} is {result}.\")\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 24,
      "score": 8.0,
      "candidate": "def highest_power_of_two(n: int) -> int:\n    \"\"\"\n    This solution uses the fact that the highest power of two that is less than or equal to n\n    is the same as the highest power of two that is less than n.\n    \"\"\"\n    if n <= 0:\n        raise ValueError(\"n must be greater than 0\")\n\n    highest_power = 1\n    while highest_power * 2 <= n:\n        highest_power *= 2\n\n    return highest_power\n\n\ndef highest_power_of_two_bitwise(n: int) -> int:\n    \"\"\"\n    This solution uses the bitwise AND operator.\n    \"\"\"\n    if n <= 0:\n        raise ValueError(\"n must be greater than 0\")\n\n    highest_power = 1\n\n    while highest_power * 2 <= n:\n        highest_power *= 2\n\n    if n & (highest_power * 2) == 0:\n        return highest_power\n    else:\n        return highest_power * 2\n\n\nif __name__ == \"__main__\":\n    print(highest_power_of_two(1))\n    print(highest_power_of_two(2))\n    print(highest_power_of_two(3))\n    print(highest_power_of_two(4))\n    print(highest_power_of_two(5))\n    print(highest_power_of_two(6))\n    print(highest_power_of_two(7))\n    print(highest_power_of_two(8))\n    print(highest_power_of_two(9))\n    print(highest_power_of_two(10))\n    print(highest_power_of_two(11))\n    print(highest_power_of_two(12))\n    print(highest_power_of_two(13))\n    print(highest_power_of_two(14))\n    print(highest_power_of_two(15))"
    },
    {
      "rank": 25,
      "score": 8.0,
      "candidate": "def find_highest_power(n):\n    if n == 0:\n        return 0\n    power = 0\n    while(n>0):\n        n>>=1\n        power+=1\n    return power\n\nprint(find_highest_power(15))\nprint(find_highest_power(1))\nprint(find_highest_power(0))"
    },
    {
      "rank": 26,
      "score": 8.0,
      "candidate": "def power_of_2(n):\n    \"\"\"\n    Return the highest power of 2 that is less than or equal to n\n    \"\"\"\n    power = 0\n    while (2 ** power) <= n:\n        power += 1\n    return 2 ** (power - 1)"
    },
    {
      "rank": 27,
      "score": 8.0,
      "candidate": "def highest_power_of_two(n):\n    power = 0\n    while 2**power <= n:\n        power += 1\n    return power - 1\n\n\nprint(highest_power_of_two(100))"
    },
    {
      "rank": 28,
      "score": 8.0,
      "candidate": "def highest_power_of_2(n):\n    \"\"\"\n    Time Complexity: O(logn)\n    Space Complexity: O(1)\n    \"\"\"\n    if n <= 0:\n        return 0\n\n    highest = 1\n    while highest <= n:\n        highest <<= 1\n    return highest >> 1"
    },
    {
      "rank": 29,
      "score": 8.0,
      "candidate": "def highest_power_of_two(n):\n    return 2 ** (n - 1).bit_length()\n\n\ndef test_power_of_two():\n    \"\"\"\n    >>> test_power_of_two()\n    \"\"\"\n    assert highest_power_of_two(3) == 2\n    assert highest_power_of_two(5) == 4\n    assert highest_power_of_two(6) == 4\n    assert highest_power_of_two(7) == 4\n    assert highest_power_of_two(8) == 8\n    assert highest_power_of_two(9) == 8\n    assert highest_power_of_two(10) == 8\n    assert highest_power_of_two(11) == 8\n    assert highest_power_of_two(12) == 8\n    assert highest_power_of_two(13) == 8\n    assert highest_power_of_two(14) == 8\n    assert highest_power_of_two(15) == 8\n    assert highest_power_of_two(16) == 16\n    assert highest_power_of_two(17) == 16\n    assert highest_power_of_two(18) == 16\n    assert highest_power_of_two(19) == 16\n    assert highest_power_of_two(20) == 16\n    assert highest_power_of_two(21) == 16\n    assert highest_power_of_two(22) == 16\n    assert highest_power_of_two(23) == 16\n    assert highest_power_of_two(24) == 16\n    assert highest_power_of_two(25) == 16\n    assert highest_power_of_two(26) == 16\n    assert highest_power_of_two(27) == 16\n    assert highest_power_of_two(28) == 16\n    assert highest_power_of_two(29) == 16\n    assert highest"
    },
    {
      "rank": 30,
      "score": 8.0,
      "candidate": "def power_of_two(n):\n    if n == 0:\n        return 0\n    else:\n        return 1 << (len(bin(n - 1)) - 2)\n\ndef main():\n    n = int(input(\"Enter a number: \"))\n    print(f\"The highest power of 2 that is less than or equal to {n} is {power_of_two(n)}\")\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 31,
      "score": 8.0,
      "candidate": "def highest_power_of_2(n):\n    power = 0\n    while 2**power <= n:\n        power += 1\n\n    return power - 1\n\nprint(highest_power_of_2(100))"
    },
    {
      "rank": 32,
      "score": 8.0,
      "candidate": "def highest_power_of_2(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return 2 ** (len(bin(n)[2:]) - 1)\n\ndef highest_power_of_2_2(n):\n    highest_power = 0\n\n    while (n > 0):\n        highest_power = n\n        n = n >> 1\n    return highest_power"
    },
    {
      "rank": 33,
      "score": 8.0,
      "candidate": "def hightest_power_of_2(n):\n    power_of_2 = 1\n    while power_of_2 <= n:\n        power_of_2 *= 2\n    power_of_2 //= 2\n    return power_of_2\n\nprint(hightest_power_of_2(10))"
    },
    {
      "rank": 34,
      "score": 8.0,
      "candidate": "def highest_power_of_2(n):\n    if n == 0:\n        return 0\n\n    count = 0\n    while n:\n        count += 1\n        n = n >> 1\n\n    return 2 ** (count - 1)\n\n\nif __name__ == \"__main__\":\n    n = int(input(\"Enter a number: \"))\n    print(f\"Highest power of 2 less than or equal to {n} is: {highest_power_of_2(n)}\")"
    },
    {
      "rank": 35,
      "score": 8.0,
      "candidate": "def highest_power_of_2(n):\n    power = 0\n    while(n > 1):\n        n >>= 1\n        power += 1\n    return power"
    },
    {
      "rank": 36,
      "score": 8.0,
      "candidate": "def highest_power_of_2(n):\n    highest_power_of_2 = 1\n    while highest_power_of_2 <= n:\n        highest_power_of_2 *= 2\n\n    return highest_power_of_2 // 2\n\n\nprint(highest_power_of_2(16))"
    },
    {
      "rank": 37,
      "score": 8.0,
      "candidate": "def find_highest_power_of_2(n):\n    power = 1\n    while power <= n:\n        power *= 2\n    return power / 2\n\n\ndef main():\n    print(find_highest_power_of_2(5))\n    print(find_highest_power_of_2(2))\n    print(find_highest_power_of_2(6))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 38,
      "score": 8.0,
      "candidate": "def highest_power_of_two(n):\n    power = 0\n    while n > 0:\n        n >>= 1\n        power += 1\n    return power - 1"
    },
    {
      "rank": 39,
      "score": 8.0,
      "candidate": "def highest_power_of_2(n):\n    i = 0\n    while (2**i) <= n:\n        i += 1\n    return 2**(i-1)\n\nprint(highest_power_of_2(25))"
    },
    {
      "rank": 40,
      "score": 8.0,
      "candidate": "def highest_power_of_2(n):\n    power = 0\n    while 2 ** power <= n:\n        power += 1\n    return power - 1\n\n\nprint(highest_power_of_2(15))"
    },
    {
      "rank": 41,
      "score": 8.0,
      "candidate": "def highest_power_of_two(n):\n    i = 0\n    while (2**i <= n):\n        i += 1\n    return 2**(i-1)\n\nprint(highest_power_of_two(100))\nprint(highest_power_of_two(60))\nprint(highest_power_of_two(32))"
    },
    {
      "rank": 42,
      "score": 8.0,
      "candidate": "def highest_power_of_two(n):\n    \"\"\"\n    Find the highest power of 2 that is less than or equal to n\n    \"\"\"\n    if n == 0:\n        return 0\n\n    count = 0\n    while n:\n        n >>= 1\n        count += 1\n    return count - 1"
    },
    {
      "rank": 43,
      "score": 8.0,
      "candidate": "def highest_power_of_2(n):\n    power = 0\n    while 2 ** power <= n:\n        power += 1\n    return 2 ** (power - 1)\n\n\nprint(highest_power_of_2(10))"
    },
    {
      "rank": 44,
      "score": 8.0,
      "candidate": "def highest_power_of_2(n):\n    power = 0\n    while (2**power) <= n:\n        power += 1\n    return power - 1\n\n\nprint(highest_power_of_2(10))\nprint(highest_power_of_2(16))\nprint(highest_power_of_2(32))"
    },
    {
      "rank": 45,
      "score": 8.0,
      "candidate": "def highest_power_of_2(n):\n    if n == 1:\n        return 1\n\n    if n == 0:\n        return 0\n\n    highest_power = 1\n    while highest_power < n:\n        highest_power *= 2\n\n    return highest_power\n\n\nif __name__ == \"__main__\":\n    n = int(input(\"Enter a number: \"))\n    print(highest_power_of_2(n))"
    },
    {
      "rank": 46,
      "score": 8.0,
      "candidate": "def highest_power_of_two(n):\n    if n <= 0:\n        return None\n    return 2**(len(bin(n-1))-2)\n\n\nprint(highest_power_of_two(6))"
    },
    {
      "rank": 47,
      "score": 8.0,
      "candidate": "def highest_power_of_2(n):\n    if n < 0:\n        return None\n    return 2**(len(bin(n)) - 3)\n\n\nprint(highest_power_of_2(10))\nprint(highest_power_of_2(100))\nprint(highest_power_of_2(-2))"
    },
    {
      "rank": 48,
      "score": 8.0,
      "candidate": "def highest_power_of_2(n):\n    highest_power_of_2 = 0\n    i = 0\n    while 2**i <= n:\n        highest_power_of_2 = 2**i\n        i += 1\n    return highest_power_of_2\n\n\nprint(highest_power_of_2(10))"
    },
    {
      "rank": 49,
      "score": 8.0,
      "candidate": "def highest_power_of_two(n):\n    power = 0\n    while (1 << power) <= n:\n        power += 1\n    return power - 1"
    },
    {
      "rank": 50,
      "score": 8.0,
      "candidate": "def highest_power_of_two(n):\n    if n == 0:\n        return 0\n    count = 0\n    while n > 0:\n        n = n >> 1\n        count += 1\n    return count"
    },
    {
      "rank": 51,
      "score": 8.0,
      "candidate": "def highest_power_of_two(n):\n    highest_power = 0\n    while (n >> highest_power) > 0:\n        highest_power += 1\n    return highest_power - 1\n\n\ndef main():\n    print(highest_power_of_two(15))\n    print(highest_power_of_two(16))\n    print(highest_power_of_two(17))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 52,
      "score": 8.0,
      "candidate": "def power_of_2(n):\n    power = 0\n    while n > 0:\n        n >>= 1\n        power += 1\n    return power\n\n\nprint(power_of_2(10))"
    },
    {
      "rank": 53,
      "score": 8.0,
      "candidate": "def highest_power_of_2(n):\n    if n == 0:\n        return 0\n    return 2 ** (n - 1).bit_length()\n\n\ndef main():\n    n = int(input(\"Enter number: \"))\n    print(highest_power_of_2(n))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 54,
      "score": 8.0,
      "candidate": "def highest_power_of_2(n):\n    highest_power = 0\n    while (2 ** highest_power) <= n:\n        highest_power += 1\n\n    return 2 ** (highest_power - 1)\n\n\nprint(highest_power_of_2(16))\nprint(highest_power_of_2(25))\nprint(highest_power_of_2(27))"
    },
    {
      "rank": 55,
      "score": 8.0,
      "candidate": "def highest_power_of_2(n):\n    power = 0\n    while n > 0:\n        power += 1\n        n >>= 1\n    return power"
    },
    {
      "rank": 56,
      "score": 8.0,
      "candidate": "def find_highest_power_of_2(n):\n    \"\"\"\n    Returns the highest power of 2 that is less than or equal to n\n\n    >>> find_highest_power_of_2(1)\n    1\n    >>> find_highest_power_of_2(2)\n    2\n    >>> find_highest_power_of_2(3)\n    2\n    >>> find_highest_power_of_2(4)\n    4\n    >>> find_highest_power_of_2(5)\n    4\n    >>> find_highest_power_of_2(6)\n    4\n    >>> find_highest_power_of_2(7)\n    4\n    >>> find_highest_power_of_2(8)\n    8\n    >>> find_highest_power_of_2(9)\n    8\n    >>> find_highest_power_of_2(10)\n    8\n    >>> find_highest_power_of_2(11)\n    8\n    >>> find_highest_power_of_2(12)\n    8\n    >>> find_highest_power_of_2(13)\n    8\n    >>> find_highest_power_of_2(14)\n    8\n    >>> find_highest_power_of_2(15)\n    8\n    >>> find_highest_power_of_2(16)\n    16\n    >>> find_highest_power_of_2(17)\n    16\n    >>> find_highest_power_of_2(18)\n    16\n    >>> find_highest_power_of_2(19)\n    16\n    >>> find_highest_power_of_2(20)\n    16\n    >>> find_highest_power_of_2(21)\n    16\n    >>> find_highest_power_of_2(22)\n    16\n    >>> find_highest_power_of_2(23)\n    16\n    >>> find_highest_power_of_2(24"
    },
    {
      "rank": 57,
      "score": 8.0,
      "candidate": "def highest_power_of_2(n):\n    power = 0\n\n    while (2 ** power) <= n:\n        power += 1\n\n    return power - 1\n\nprint(highest_power_of_2(10))\nprint(highest_power_of_2(12))\nprint(highest_power_of_2(14))\nprint(highest_power_of_2(17))"
    },
    {
      "rank": 58,
      "score": 8.0,
      "candidate": "def highest_power_of_two(n):\n    p = 1\n    while (p <= n):\n        p = p << 1\n    return p >> 1\n\nprint(highest_power_of_two(10))\nprint(highest_power_of_two(100))\nprint(highest_power_of_two(1000))\nprint(highest_power_of_two(10000))"
    },
    {
      "rank": 59,
      "score": 8.0,
      "candidate": "def find_highest_power_of_two(n):\n    power = 0\n    while 2 ** power <= n:\n        power += 1\n    return 2 ** (power - 1)\n\n\nprint(find_highest_power_of_two(16))"
    },
    {
      "rank": 60,
      "score": 8.0,
      "candidate": "def power_of_two(n: int) -> int:\n    \"\"\"\n    Find the highest power of 2 that is less than or equal to n.\n    \"\"\"\n    count = 0\n    while 2 ** count <= n:\n        count += 1\n    return count - 1\n\n\nif __name__ == \"__main__\":\n    print(power_of_two(16))\n    print(power_of_two(10))"
    },
    {
      "rank": 61,
      "score": 8.0,
      "candidate": "def highest_power_of_2(n):\n    highest_power = 0\n    for i in range(32):\n        if n & (1 << i):\n            highest_power = i\n        else:\n            break\n    return 2 ** highest_power\n\n\nprint(highest_power_of_2(10))\nprint(highest_power_of_2(1000))\nprint(highest_power_of_2(100000))"
    },
    {
      "rank": 62,
      "score": 8.0,
      "candidate": "def highest_power_of_two(n):\n    highest_power = 0\n    while(n>0):\n        n>>=1\n        highest_power+=1\n    return highest_power\n\nprint(highest_power_of_two(10))"
    },
    {
      "rank": 63,
      "score": 8.0,
      "candidate": "def highest_power_of_two(n):\n    return 2 ** (len(bin(n)) - 3)"
    },
    {
      "rank": 64,
      "score": 8.0,
      "candidate": "def highest_power_of_2(n: int) -> int:\n    \"\"\"Returns the highest power of 2 that is less than or equal to n.\n\n    Args:\n        n (int): input number\n\n    Returns:\n        int: highest power of 2 that is less than or equal to n\n    \"\"\"\n    highest_power = 0\n\n    while (1 << highest_power) <= n:\n        highest_power += 1\n\n    return (1 << (highest_power - 1))\n\n\nif __name__ == \"__main__\":\n    print(highest_power_of_2(27))"
    },
    {
      "rank": 65,
      "score": 8.0,
      "candidate": "def highest_power_of_two(n):\n    power = 0\n    while (2 ** power) <= n:\n        power += 1\n    return power - 1\n\n\nprint(highest_power_of_two(100))\nprint(highest_power_of_two(1024))"
    },
    {
      "rank": 66,
      "score": 8.0,
      "candidate": "def highest_power_of_2(n):\n    return 2 ** (n - 1).bit_length()\n\n\nprint(highest_power_of_2(16))"
    },
    {
      "rank": 67,
      "score": 8.0,
      "candidate": "def highest_power_of_two(n: int) -> int:\n    \"\"\"Returns the highest power of 2 that is less than or equal to n.\n\n    Args:\n        n (int): [description]\n\n    Returns:\n        int: [description]\n    \"\"\"\n    count: int = 0\n    while n > 0:\n        n >>= 1\n        count += 1\n    return 2 ** (count - 1)\n\n\nif __name__ == \"__main__\":\n    print(highest_power_of_two(10))\n    print(highest_power_of_two(16))"
    },
    {
      "rank": 68,
      "score": 8.0,
      "candidate": "def highest_power_of_two(n):\n    highest_power = -1\n\n    while (1 << highest_power) <= n:\n        highest_power += 1\n\n    return highest_power\n\n\ndef main():\n    print(highest_power_of_two(16))\n    print(highest_power_of_two(31))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 69,
      "score": 8.0,
      "candidate": "def power_of_two(n):\n    if n == 0:\n        return 0\n    count = 0\n    while n:\n        n >>= 1\n        count += 1\n    return 2 ** count\n\n\ndef main():\n    n = int(input(\"Enter a number: \"))\n    print(f\"Highest power of 2 that is less than or equal to {n} is {power_of_two(n)}\")\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 70,
      "score": 8.0,
      "candidate": "def find_highest_power_of_2(n):\n    highest_power_of_2 = 0\n    while n > 0:\n        n = n >> 1\n        highest_power_of_2 += 1\n    return highest_power_of_2\n\n\nprint(find_highest_power_of_2(10))\nprint(find_highest_power_of_2(16))\nprint(find_highest_power_of_2(5))"
    },
    {
      "rank": 71,
      "score": 8.0,
      "candidate": "def highest_power_of_2(n):\n    p = 0\n    while(2**p <= n):\n        p += 1\n    return p-1\n\nif __name__ == \"__main__\":\n    n = int(input(\"Enter number: \"))\n    print(highest_power_of_2(n))"
    },
    {
      "rank": 72,
      "score": 8.0,
      "candidate": "def highest_power_of_2(n):\n    count = 0\n    while(n > 0):\n        n = n >> 1\n        count += 1\n\n    return 2**count\n\nprint(highest_power_of_2(13))\nprint(highest_power_of_2(17))\nprint(highest_power_of_2(20))"
    },
    {
      "rank": 73,
      "score": 8.0,
      "candidate": "def highest_power_of_2(n):\n    # Base case\n    if n == 0:\n        return 0\n    # If n is power of 2, return n\n    if n & (n - 1) == 0:\n        return n\n    return highest_power_of_2((n & (n - 1)))\n\n\nprint(highest_power_of_2(10))\nprint(highest_power_of_2(100))\nprint(highest_power_of_2(128))\nprint(highest_power_of_2(1024))\nprint(highest_power_of_2(1025))"
    },
    {
      "rank": 74,
      "score": 8.0,
      "candidate": "def highest_power(n):\n    return 2 ** (n - 1).bit_length()\n\n\nprint(highest_power(12))"
    },
    {
      "rank": 75,
      "score": 8.0,
      "candidate": "def power_of_2(n):\n    return 2**((n-1).bit_length())\n\n\ndef power_of_2_2(n):\n    count = 0\n    while (2**count) < n:\n        count += 1\n    return 2**(count-1)\n\n\nif __name__ == \"__main__\":\n    print(power_of_2(6))\n    print(power_of_2_2(6))"
    },
    {
      "rank": 76,
      "score": 8.0,
      "candidate": "def power_of_2(n):\n    return 1 << (n - 1).bit_length()\n\n\ndef main():\n    n = int(input(\"Enter a number: \"))\n    ans = power_of_2(n)\n    print(ans)\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 77,
      "score": 8.0,
      "candidate": "def power_of_2(n):\n    count = 0\n    while (1 << count) <= n:\n        count += 1\n    return count - 1\n\n\nprint(power_of_2(30))"
    },
    {
      "rank": 78,
      "score": 8.0,
      "candidate": "def highest_power_of_two(n):\n    count = 0\n    while n:\n        n >>= 1\n        count += 1\n    return count"
    },
    {
      "rank": 79,
      "score": 8.0,
      "candidate": "def highest_power_of_2(n: int) -> int:\n    \"\"\"Return the highest power of 2 that is less than or equal to n.\"\"\"\n\n    return 2 ** (n.bit_length() - 1)\n\n\nif __name__ == \"__main__\":\n    print(highest_power_of_2(23))"
    },
    {
      "rank": 80,
      "score": 8.0,
      "candidate": "def highest_power_of_2(n):\n    if n == 0:\n        return 0\n    count = 0\n    while n:\n        n = n >> 1\n        count += 1\n    return 2 ** (count - 1)\n\n\nprint(highest_power_of_2(10))\nprint(highest_power_of_2(23))\nprint(highest_power_of_2(2))\nprint(highest_power_of_2(0))"
    },
    {
      "rank": 81,
      "score": 8.0,
      "candidate": "def highest_power(n):\n    power = 0\n    while 2**power <= n:\n        power += 1\n    return power - 1\n\n\nprint(highest_power(10))\nprint(highest_power(20))\nprint(highest_power(21))"
    },
    {
      "rank": 82,
      "score": 1.0,
      "candidate": "def highest_power_of_2(n):\n    \"\"\"\n    :param: n - input integer\n    Return: integer\n    \"\"\"\n    if n < 0:\n        return None\n    if n == 0:\n        return 0\n\n    i = 1\n    while i <= n:\n        i = i * 2\n    return i // 2\n\n\ndef test_function(test_case):\n    test_input, test_expected = test_case\n    test_actual = highest_power_of_2(test_input)\n    if test_actual == test_expected:\n        print(\"Pass\")\n    else:\n        print(\"Fail\")\n\n\ntest_function((10, 8))\ntest_function((15, 16))\ntest_function((-1, None))\ntest_function((-10, None))\ntest_function((0, 0))\ntest_function((1, 1))\ntest_function((2, 2))\ntest_function((3, 4))\ntest_function((4, 4))\ntest_function((5, 4))\ntest_function((6, 8))\ntest_function((7, 8))\ntest_function((8, 8))\ntest_function((9, 8))\ntest_function((10, 8))\ntest_function((11, 16))\ntest_function((12, 16))\ntest_function((13, 16))\ntest_function((14, 16))\ntest_function((15, 16))\ntest_function((16, 16))\ntest_function((17, 32))\ntest_function((18, 32))\ntest_function((19, 32))\ntest_function((20, 32))\ntest_function((21, 32))\ntest_function((22, 32))\ntest_function((23, 32))\ntest_function((24, 32))\ntest_function((25, 32))\ntest_function((26, 32))\ntest_function((27"
    },
    {
      "rank": 83,
      "score": 1.0,
      "candidate": "def highest_power_of_two(n):\n    if n == 1:\n        return 1\n    else:\n        return 1 << (n.bit_length() - 1)\n\nprint(highest_power_of_two(1))\nprint(highest_power_of_two(2))\nprint(highest_power_of_two(3))\nprint(highest_power_of_two(4))\nprint(highest_power_of_two(5))\nprint(highest_power_of_two(6))\nprint(highest_power_of_two(7))\nprint(highest_power_of_two(8))\nprint(highest_power_of_two(9))\nprint(highest_power_of_two(10))\nprint(highest_power_of_two(11))\nprint(highest_power_of_two(12))\nprint(highest_power_of_two(13))\nprint(highest_power_of_two(14))\nprint(highest_power_of_two(15))\nprint(highest_power_of_two(16))\nprint(highest_power_of_two(17))\nprint(highest_power_of_two(18))\nprint(highest_power_of_two(19))\nprint(highest_power_of_two(20))\nprint(highest_power_of_two(21))\nprint(highest_power_of_two(22))\nprint(highest_power_of_two(23))\nprint(highest_power_of_two(24))\nprint(highest_power_of_two(25))\nprint(highest_power_of_two(26))\nprint(highest_power_of_two(27))\nprint(highest_power_of_two(28))\nprint(highest_power_of_two(29))\nprint(highest_power_of_two(30))\nprint(highest_power_of_two(31))\nprint(highest_power_of"
    },
    {
      "rank": 84,
      "score": 1.0,
      "candidate": "def find_highest_power(n):\n    power = 1\n    while power <= n:\n        power *= 2\n    return power // 2\n\n\nprint(find_highest_power(10))\nprint(find_highest_power(20))\nprint(find_highest_power(50))"
    },
    {
      "rank": 85,
      "score": 1.0,
      "candidate": "def highest_power_of_two(n: int) -> int:\n    \"\"\"\n    Returns the highest power of two that is less than or equal to n.\n    >>> highest_power_of_two(10)\n    8\n    >>> highest_power_of_two(5)\n    4\n    >>> highest_power_of_two(3)\n    2\n    >>> highest_power_of_two(1)\n    1\n    >>> highest_power_of_two(2)\n    2\n    \"\"\"\n    return 2 ** (n - 1).bit_length()\n\n\nif __name__ == \"__main__\":\n    from doctest import testmod\n\n    testmod()"
    },
    {
      "rank": 86,
      "score": 1.0,
      "candidate": "def highest_power_of_2(n):\n    power = 0\n    while (2**power <= n):\n        power += 1\n    return power - 1\n\n\ndef test_power_of_2(n, exp):\n    power = highest_power_of_2(n)\n    if power == exp:\n        return True\n    else:\n        return False\n\n\ndef main():\n    assert test_power_of_2(16, 4) == True\n    assert test_power_of_2(20, 4) == True\n    assert test_power_of_2(21, 4) == False\n    assert test_power_of_2(1, 0) == True\n    assert test_power_of_2(0, 0) == True\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 87,
      "score": 1.0,
      "candidate": "def high_power_of_two(n: int) -> int:\n    \"\"\"\n    >>> high_power_of_two(15)\n    8\n    >>> high_power_of_two(8)\n    8\n    >>> high_power_of_two(7)\n    4\n    >>> high_power_of_two(6)\n    4\n    \"\"\"\n    power = 0\n    while (1 << power) < n:\n        power += 1\n    return (1 << (power - 1))\n\n\ndef high_power_of_two_2(n: int) -> int:\n    \"\"\"\n    >>> high_power_of_two_2(15)\n    8\n    >>> high_power_of_two_2(8)\n    8\n    >>> high_power_of_two_2(7)\n    4\n    >>> high_power_of_two_2(6)\n    4\n    \"\"\"\n    power = 0\n    while (1 << power) < n:\n        power += 1\n    return (1 << power)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 88,
      "score": 1.0,
      "candidate": "def highest_power_of_2(n):\n    \"\"\"\n    >>> highest_power_of_2(12)\n    8\n    >>> highest_power_of_2(1)\n    1\n    >>> highest_power_of_2(100)\n    64\n    >>> highest_power_of_2(10)\n    8\n    >>> highest_power_of_2(0)\n    0\n    \"\"\"\n    if n <= 0:\n        return n\n    if n <= 2:\n        return 1\n    if n == 2:\n        return n\n    if n % 2 == 0:\n        return highest_power_of_2(n // 2)\n    return highest_power_of_2(n // 2) * 2\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 89,
      "score": 1.0,
      "candidate": "def find_highest_power_of_2(n: int) -> int:\n    \"\"\"\n    >>> find_highest_power_of_2(2)\n    1\n    >>> find_highest_power_of_2(3)\n    2\n    >>> find_highest_power_of_2(10)\n    8\n    >>> find_highest_power_of_2(25)\n    16\n    >>> find_highest_power_of_2(15)\n    8\n    >>> find_highest_power_of_2(32)\n    32\n    \"\"\"\n    if n == 0:\n        return 0\n    highest_power_of_2 = 1\n    while highest_power_of_2 <= n:\n        highest_power_of_2 <<= 1\n    return highest_power_of_2 >> 1\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 90,
      "score": 1.0,
      "candidate": "def highest_power_of_2(n):\n    if n == 0:\n        return 0\n    highest = 1\n    while highest < n:\n        highest = highest * 2\n    return highest / 2\n\n\nprint(highest_power_of_2(0))\nprint(highest_power_of_2(5))\nprint(highest_power_of_2(6))\nprint(highest_power_of_2(7))\nprint(highest_power_of_2(8))\nprint(highest_power_of_2(9))\nprint(highest_power_of_2(10))\nprint(highest_power_of_2(11))\nprint(highest_power_of_2(12))\nprint(highest_power_of_2(13))\nprint(highest_power_of_2(14))\nprint(highest_power_of_2(15))\nprint(highest_power_of_2(16))\nprint(highest_power_of_2(17))\nprint(highest_power_of_2(18))\nprint(highest_power_of_2(19))\nprint(highest_power_of_2(20))\nprint(highest_power_of_2(21))\nprint(highest_power_of_2(22))\nprint(highest_power_of_2(23))\nprint(highest_power_of_2(24))\nprint(highest_power_of_2(25))\nprint(highest_power_of_2(26))\nprint(highest_power_of_2(27))\nprint(highest_power_of_2(28))\nprint(highest_power_of_2(29))\nprint(highest_power_of_2(30))"
    },
    {
      "rank": 91,
      "score": 1.0,
      "candidate": "def power_of_two(n: int) -> int:\n    \"\"\"\n    >>> power_of_two(12)\n    8\n    >>> power_of_two(10)\n    8\n    >>> power_of_two(16)\n    16\n    >>> power_of_two(17)\n    16\n    >>> power_of_two(1)\n    1\n    >>> power_of_two(0)\n    1\n    >>> power_of_two(-1)\n    1\n    \"\"\"\n    return 2 ** (n - 1).bit_length()\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 92,
      "score": 1.0,
      "candidate": "def highest_power_of_two(n):\n    if n == 0:\n        return 0\n    power = 1\n    while power <= n:\n        power = power << 1\n    return power >> 1\n\n\nprint(highest_power_of_two(0))\nprint(highest_power_of_two(1))\nprint(highest_power_of_two(2))\nprint(highest_power_of_two(3))\nprint(highest_power_of_two(4))\nprint(highest_power_of_two(5))"
    },
    {
      "rank": 93,
      "score": 1.0,
      "candidate": "def highest_power_of_two(n: int) -> int:\n    \"\"\"\n    Returns the highest power of two that is less than or equal to n.\n    >>> highest_power_of_two(100)\n    64\n    >>> highest_power_of_two(64)\n    64\n    >>> highest_power_of_two(10)\n    8\n    >>> highest_power_of_two(0)\n    0\n    >>> highest_power_of_two(-10)\n    0\n    >>> highest_power_of_two(1)\n    1\n    >>> highest_power_of_two(-1)\n    0\n    \"\"\"\n    return (n & (~(n - 1))) if n > 0 else 0\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 94,
      "score": 1.0,
      "candidate": "def highest_power_of_two(n):\n    if n < 0:\n        return \"Negative number can't be given\"\n    return (n & (~(n - 1))).bit_length() - 1\n\n\ndef highest_power_of_two_eff(n):\n    if n < 0:\n        return \"Negative number can't be given\"\n    i = 1\n    while i <= n:\n        i *= 2\n    return i / 2\n\n\nprint(highest_power_of_two(11))\nprint(highest_power_of_two_eff(11))"
    },
    {
      "rank": 95,
      "score": 1.0,
      "candidate": "def highest_power_of_2(n):\n    power = 0\n    while (2**power) <= n:\n        power += 1\n\n    return 2**(power-1)\n\n\ndef test_power_of_2(n, expected_answer):\n    answer = highest_power_of_2(n)\n    if answer != expected_answer:\n        raise Exception(\n            f\"Answer {answer} is wrong. Expected answer is {expected_answer}\")\n\n\ndef main():\n    print(\"Test 1:\")\n    test_power_of_2(3, 1)\n    print(\"Test 2:\")\n    test_power_of_2(10, 8)\n    print(\"Test 3:\")\n    test_power_of_2(12, 8)\n    print(\"Test 4:\")\n    test_power_of_2(16, 16)\n    print(\"Test 5:\")\n    test_power_of_2(17, 16)\n    print(\"Test 6:\")\n    test_power_of_2(32, 32)\n    print(\"Test 7:\")\n    test_power_of_2(33, 32)\n    print(\"Test 8:\")\n    test_power_of_2(64, 64)\n    print(\"Test 9:\")\n    test_power_of_2(65, 64)\n    print(\"Test 10:\")\n    test_power_of_2(128, 128)\n    print(\"Test 11:\")\n    test_power_of_2(129, 128)\n    print(\"Test 12:\")\n    test_power_of_2(130, 128)\n    print(\"Test 13:\")\n    test_power_of_2(256, 256)\n    print(\"Test 14:\")\n    test_power_of_2(257, 256)\n    print(\"Test 15:\")\n    test_power_of"
    },
    {
      "rank": 96,
      "score": 1.0,
      "candidate": "def highest_power_of_two(n: int) -> int:\n    \"\"\"\n    Time Complexity: O(log(n))\n    \"\"\"\n    if n == 0:\n        return 0\n\n    power_of_two = 1\n\n    while power_of_two <= n:\n        power_of_two <<= 1\n\n    return power_of_two >> 1\n\n\nif __name__ == \"__main__\":\n    assert highest_power_of_two(10) == 8"
    },
    {
      "rank": 97,
      "score": 1.0,
      "candidate": "def find_highest_power_of_two(n: int) -> int:\n    \"\"\"\n    Time Complexity: O(log2(n))\n    Space Complexity: O(1)\n    \"\"\"\n\n    if n == 0:\n        return 0\n\n    return 2 ** (n.bit_length() - 1)\n\n\nif __name__ == \"__main__\":\n    print(find_highest_power_of_two(0))\n    print(find_highest_power_of_two(10))\n    print(find_highest_power_of_two(100))\n    print(find_highest_power_of_two(1000))"
    },
    {
      "rank": 98,
      "score": 1.0,
      "candidate": "def power_of_2(n):\n    return 1 << (n.bit_length() - 1)\n\n\ndef power_of_2_2(n):\n    power = 0\n    while n > 0:\n        power += 1\n        n >>= 1\n    return 1 << (power - 1)\n\n\ndef power_of_2_3(n):\n    power = 0\n    while n > 0:\n        n >>= 1\n        power += 1\n    return 1 << (power - 1)\n\n\ndef power_of_2_4(n):\n    power = 0\n    while n > 1:\n        n >>= 1\n        power += 1\n    return 1 << power\n\n\ndef power_of_2_5(n):\n    power = 0\n    while n > 0:\n        n >>= 1\n        power += 1\n    return 1 << (power - 1)"
    },
    {
      "rank": 99,
      "score": 1.0,
      "candidate": "def highest_power_of_2(n: int) -> int:\n    \"\"\"\n    >>> highest_power_of_2(15)\n    8\n    >>> highest_power_of_2(1)\n    1\n    >>> highest_power_of_2(2)\n    1\n    >>> highest_power_of_2(3)\n    2\n    \"\"\"\n    power = 0\n\n    while 2 ** power <= n:\n        power += 1\n\n    return 2 ** (power - 1)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 100,
      "score": 1.0,
      "candidate": "def highest_power_of_2(n):\n    \"\"\"\n    Find the highest power of 2 that is less than or equal to n.\n\n    Args:\n       n(int): Input number\n    Returns:\n       int: Highest power of 2 that is less than or equal to n\n    \"\"\"\n    if n == 0:\n        return 0\n\n    # Find the highest power of 2 that is less than or equal to n\n    highest_power_of_2 = 1\n    while highest_power_of_2 <= n:\n        highest_power_of_2 *= 2\n\n    return highest_power_of_2 // 2\n\ndef test_function(test_case):\n    test_input, test_expected = test_case\n    test_actual = highest_power_of_2(test_input)\n    if test_actual == test_expected:\n        print(\"Pass\")\n    else:\n        print(\"Fail\")\n\ntest_function((2, 1))\ntest_function((3, 2))\ntest_function((4, 2))\ntest_function((5, 4))\ntest_function((6, 4))\ntest_function((7, 4))\ntest_function((8, 4))\ntest_function((9, 4))\ntest_function((10, 4))\ntest_function((100, 64))\ntest_function((50, 32))\ntest_function((3, 1))\ntest_function((0, 0))"
    }
  ]
}