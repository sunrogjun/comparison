{
  "timestamp": "2025-09-15T01:11:03.557226",
  "method": "improved_llm_judge",
  "judge_model": "codellama/CodeLlama-7b-Python-hf",
  "target_model": "codellama-7b",
  "dataset": "mbpp",
  "problem_number": 380,
  "total_candidates": 100,
  "results": [
    {
      "rank": 1,
      "score": 10.0,
      "candidate": "def nested_dict(keys, values):\n    if len(keys) == 1:\n        return dict(zip(keys, values))\n    else:\n        return {keys[0]: nested_dict(keys[1:], values)}\n\n\ndef test_nested_dict():\n    \"\"\"\n    >>> nested_dict(['a', 'b'], [1, 2])\n    {'a': {'b': 2}}\n    >>> nested_dict(['a', 'b', 'c'], [1, 2, 3])\n    {'a': {'b': {'c': 3}}}\n    >>> nested_dict(['a', 'b', 'c', 'd'], [1, 2, 3, 4])\n    {'a': {'b': {'c': {'d': 4}}}}\n    >>> nested_dict(['a', 'b', 'c', 'd'], [1, 2, 3, 4, 5])\n    {'a': {'b': {'c': {'d': 4}}}}\n    >>> nested_dict(['a', 'b', 'c', 'd', 'e'], [1, 2, 3, 4, 5, 6])\n    {'a': {'b': {'c': {'d': {'e': 6}}}}}\n    >>> nested_dict(['a', 'b', 'c', 'd', 'e', 'f'], [1, 2, 3, 4, 5, 6, 7])\n    {'a': {'b': {'c': {'d': {'e': {'f': 7}}}}}}\n    \"\"\"\n    pass\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 2,
      "score": 10.0,
      "candidate": "def convert_to_nested_dict(list_of_list):\n    \"\"\"\n    >>> convert_to_nested_dict([[1,2,3],[4,5,6],[7,8,9]])\n    {1: {2: {3: {}}}, 4: {5: {6: {}}}, 7: {8: {9: {}}}}\n    \"\"\"\n    return {key[0]: {key[1]: {key[2]: {}}} for key in list_of_list}\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 3,
      "score": 10.0,
      "candidate": "def convert_to_nested_dict(list_of_keys: list, list_of_values: list) -> dict:\n    \"\"\"\n    :param list_of_keys: list of keys\n    :param list_of_values: list of values\n    :return: nested dictionary\n\n    >>> convert_to_nested_dict(['a', 'b', 'c'], [1, 2, 3])\n    {'a': {'b': {'c': 3}}}\n    >>> convert_to_nested_dict(['a', 'b', 'c'], [1, 2, 3, 4])\n    {'a': {'b': {'c': 3}}}\n    >>> convert_to_nested_dict(['a', 'b', 'c'], [1, 2, 3, 4, 5])\n    {'a': {'b': {'c': 3}}}\n    \"\"\"\n    if len(list_of_keys) != len(list_of_values):\n        raise ValueError(\"Length of list of keys and list of values must be equal\")\n\n    if len(list_of_keys) == 0:\n        raise ValueError(\"List of keys and list of values must not be empty\")\n\n    if len(list_of_keys) == 1:\n        return {list_of_keys[0]: list_of_values[0]}\n\n    return {\n        list_of_keys[0]: convert_to_nested_dict(list_of_keys[1:], list_of_values[1:])\n    }\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 4,
      "score": 10.0,
      "candidate": "def list_to_nested_dict(outer_list, inner_list):\n    \"\"\"\n    :param outer_list: A list of outer keys\n    :param inner_list: A list of inner keys\n    :return: A nested dictionary\n    \"\"\"\n    # outer_list = [\"a\", \"b\"]\n    # inner_list = [\"1\", \"2\"]\n    # outer_list = [\"a\", \"b\"]\n    # inner_list = [\"1\", \"2\", \"3\"]\n    # outer_list = [\"a\", \"b\"]\n    # inner_list = [\"1\", \"2\", \"3\", \"4\"]\n    # outer_list = [\"a\", \"b\", \"c\", \"d\"]\n    # inner_list = [\"1\", \"2\", \"3\", \"4\"]\n    # outer_list = [\"a\", \"b\", \"c\", \"d\", \"e\"]\n    # inner_list = [\"1\", \"2\", \"3\", \"4\"]\n    # outer_list = [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\"]\n    # inner_list = [\"1\", \"2\", \"3\", \"4\"]\n    # outer_list = [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\"]\n    # inner_list = [\"1\", \"2\", \"3\", \"4\"]\n    # outer_list = [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\"]\n    # inner_list = [\"1\", \"2\", \"3\", \"4\"]\n    # outer_list = [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\"]\n    # inner_list = [\"1\", \"2\", \"3\", \"4\"]\n    # outer_list = [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"]\n    # inner_list = [\"1\", \"2\", \"3\", \"4\"]\n    # outer_list = [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\","
    },
    {
      "rank": 5,
      "score": 10.0,
      "candidate": "def main():\n    keys = [\"one\", \"two\", \"three\", \"four\"]\n    values = [1, 2, 3, 4]\n    dict_one = dict(zip(keys, values))\n\n    keys = [\"one\", \"two\", \"three\", \"four\"]\n    values = [11, 22, 33, 44]\n    dict_two = dict(zip(keys, values))\n\n    print(dict_one)\n    print(dict_two)\n\n    result = {k: [dict_one[k], dict_two[k]] for k in dict_one.keys()}\n    print(result)\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 6,
      "score": 10.0,
      "candidate": "def convert_nested_dict(list_of_list):\n    \"\"\"\n    >>> convert_nested_dict([['A', 'B', 'C'], ['a1', 'a2', 'a3'], ['b1', 'b2', 'b3'], ['c1', 'c2', 'c3']])\n    {'A': {'B': {'C': ['a1', 'a2', 'a3']}}, 'B': {'C': ['b1', 'b2', 'b3']}, 'C': {'C': ['c1', 'c2', 'c3']}}\n    \"\"\"\n    if len(list_of_list) == 1:\n        return {list_of_list[0][0]: list_of_list[0][1:]}\n    else:\n        return {\n            list_of_list[0][0]: convert_nested_dict(\n                [list_of_list[0][1:]] + list_of_list[1:]\n            )\n        }\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 7,
      "score": 10.0,
      "candidate": "def convert_to_nested_dict(names, ages, salaries):\n    # TODO: Write your code here\n    return {}\n\n\ndef main():\n    names = [\"James\", \"Alice\", \"Bob\"]\n    ages = [32, 23, 35]\n    salaries = [60000, 45000, 55000]\n    result = convert_to_nested_dict(names, ages, salaries)\n    print(result)\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 8,
      "score": 10.0,
      "candidate": "from typing import List\n\n\ndef merge_two_dicts(x: dict, y: dict) -> dict:\n    \"\"\"\n    Merge two dicts, returning a new dict as a result.\n    \"\"\"\n    return {**x, **y}\n\n\ndef merge_nested_dicts(*args: dict) -> dict:\n    \"\"\"\n    Merge nested dicts, returning a new dict as a result.\n    \"\"\"\n    if len(args) == 1:\n        return args[0]\n    return merge_nested_dicts(args[0], args[1])\n\n\ndef merge_two_lists_to_dict(keys: List[str], values: List[str]) -> dict:\n    \"\"\"\n    Merge two lists to a dictionary, returning a new dictionary as a result.\n    \"\"\"\n    return dict(zip(keys, values))\n\n\ndef merge_nested_lists_to_dict(*args: List[str]) -> dict:\n    \"\"\"\n    Merge nested lists to a dictionary, returning a new dictionary as a result.\n    \"\"\"\n    if len(args) == 1:\n        return args[0]\n    return merge_nested_lists_to_dict(*args[1:])\n\n\ndef merge_lists_to_nested_dict(*args: List[str]) -> dict:\n    \"\"\"\n    Merge lists to a nested dictionary, returning a new dictionary as a result.\n    \"\"\"\n    if len(args) == 1:\n        return args[0]\n    return merge_lists_to_nested_dict(args[0], args[1])\n\n\ndef merge_nested_lists_to_nested_dict(*args: List[str]) -> dict:\n    \"\"\"\n    Merge nested lists to a nested dictionary, returning a new dictionary as a result.\n    \"\"\"\n    if len(args) == 1:\n        return args[0]\n    return merge_nested_lists_to_nested_dict(args[0], args[1])"
    },
    {
      "rank": 9,
      "score": 10.0,
      "candidate": "def convert_to_dict(lists):\n    \"\"\"\n    >>> convert_to_dict([[1, 2], [3, 4]])\n    {1: {2: {}}, 3: {4: {}}}\n    \"\"\"\n    if len(lists) == 1:\n        return dict(zip(lists[0], [{}] * len(lists[0])))\n\n    return dict(zip(lists[0], map(lambda x: convert_to_dict(lists[1:]), lists[0])))\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 10,
      "score": 10.0,
      "candidate": "def nested_dict(keys, values):\n    \"\"\"\n    >>> nested_dict([['a', 'b'], ['c', 'd', 'e']], [1, 2, 3, 4, 5, 6])\n    {'a': {'b': 1}, 'c': {'d': 2, 'e': 3}}\n    >>> nested_dict([['a', 'b'], ['c', 'd', 'e']], [1, 2, 3, 4, 5, 6, 7])\n    {'a': {'b': 1}, 'c': {'d': 2, 'e': 3}}\n    \"\"\"\n    if len(keys) == len(values):\n        return dict(zip(keys, values))\n    return dict(zip(keys[:-1], values[:-1]))\n\n\ndef main():\n    from doctest import testmod\n\n    testmod()\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 11,
      "score": 10.0,
      "candidate": "def convert_to_nested_dict(keys, values):\n    \"\"\"Convert list of keys and values to nested dictionary.\"\"\"\n    if len(keys) != len(values):\n        return {}\n    nested_dict = {}\n    for key, value in zip(keys, values):\n        if isinstance(value, list):\n            nested_dict[key] = convert_to_nested_dict(value, value)\n        else:\n            nested_dict[key] = value\n    return nested_dict\n\n\ndef main():\n    \"\"\"Print out nested dictionary.\"\"\"\n    print(convert_to_nested_dict([\"a\", \"b\", \"c\"], [1, 2, [3, 4]]))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 12,
      "score": 9.054655470211907,
      "candidate": "def to_dict(keys, values):\n    return dict(zip(keys, values))\n\n\ndef to_dict_2(keys, values):\n    return dict(zip(keys, values))\n\n\nif __name__ == \"__main__\":\n    keys = [1, 2, 3]\n    values = [4, 5, 6]\n    print(to_dict(keys, values))\n\n    print(to_dict_2(keys, values))"
    },
    {
      "rank": 13,
      "score": 9.044278705366173,
      "candidate": "def to_nested_dict(main_list, *args):\n    \"\"\"\n    >>> to_nested_dict(['1', '2', '3', '4'], ['a', 'b', 'c'], ['x', 'y'])\n    [{'1': {'a': 'x'}, '2': {'b': 'y'}, '3': {'c': None}},\n    {'1': {'a': None}, '2': {'b': 'x'}, '3': {'c': 'y'}},\n    {'1': {'a': 'y'}, '2': {'b': None}, '3': {'c': 'x'}}]\n    \"\"\"\n    if not args:\n        return main_list\n    for index in range(len(main_list)):\n        main_list[index] = {\n            key: value\n            for key, value in zip(args[0], main_list[index:])\n        }\n    return [\n        to_nested_dict(item, *args[1:])\n        for item in main_list\n    ]\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 14,
      "score": 8.973378055587066,
      "candidate": "from functools import reduce\nfrom collections import defaultdict\n\n\ndef merge_dict(dict1, dict2):\n    for k, v in dict2.items():\n        if k in dict1:\n            if isinstance(dict1[k], list):\n                dict1[k].append(v)\n            else:\n                dict1[k] = [dict1[k], v]\n        else:\n            dict1[k] = v\n    return dict1\n\n\ndef merge_dicts(*dicts):\n    return reduce(merge_dict, dicts)\n\n\ndef main():\n    dict1 = {'a': 1, 'b': 2, 'c': 3}\n    dict2 = {'a': 4, 'b': 5, 'd': 6}\n    dict3 = {'b': 7, 'e': 8}\n\n    print(merge_dicts(dict1, dict2, dict3))\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 15,
      "score": 8.835822274622334,
      "candidate": "def list_to_nested_dict(list1, list2):\n    return {k: {k2: v2 for k2, v2 in zip(list1, list2)} for k in list1}\n\nprint(list_to_nested_dict([\"a\", \"b\", \"c\"], [1, 2, 3]))"
    },
    {
      "rank": 16,
      "score": 8.824907044022165,
      "candidate": "def to_nested_dict(keys, values):\n    if len(keys) != len(values):\n        raise ValueError(\"keys and values must be the same length\")\n    if len(keys) == 0:\n        raise ValueError(\"keys and values must not be empty\")\n\n    if len(keys) == 1:\n        return {keys[0]: values[0]}\n\n    return {keys[0]: to_nested_dict(keys[1:], values[1:])}\n\n\nif __name__ == \"__main__\":\n    print(to_nested_dict([\"a\", \"b\", \"c\"], [1, 2, 3]))\n    print(to_nested_dict([\"a\", \"b\", \"c\", \"d\", \"e\"], [1, 2, 3, 4, 5]))\n    print(to_nested_dict([\"a\", \"b\", \"c\"], [1, 2, 3, 4]))"
    },
    {
      "rank": 17,
      "score": 8.764986421150782,
      "candidate": "def convert_to_nested_dictionary(keys, values):\n    \"\"\"\n    :param keys: list\n    :param values: list\n    :return: dict\n    \"\"\"\n\n    result = {}\n    for i in range(len(keys)):\n        if i == 0:\n            result[keys[i]] = values[i]\n        else:\n            result[keys[i]] = result[keys[i - 1]]\n\n    return result\n\n\nprint(convert_to_nested_dictionary([\"a\", \"b\", \"c\"], [1, 2, 3]))\nprint(convert_to_nested_dictionary([\"a\", \"b\", \"c\"], [1, 2, 3, 4]))\nprint(convert_to_nested_dictionary([\"a\", \"b\", \"c\"], [1, 2, 3, 4, 5]))\nprint(convert_to_nested_dictionary([\"a\", \"b\", \"c\"], [1, 2, 3, 4, 5, 6]))\nprint(convert_to_nested_dictionary([\"a\", \"b\", \"c\"], [1, 2, 3, 4, 5, 6, 7]))\nprint(convert_to_nested_dictionary([\"a\", \"b\", \"c\"], [1, 2, 3, 4, 5, 6, 7, 8]))"
    },
    {
      "rank": 18,
      "score": 8.761329515178183,
      "candidate": "def nested_dictionary(list1, list2, list3):\n    if len(list1) != len(list2) or len(list2) != len(list3):\n        raise ValueError('Lists should be of equal length')\n    result = {}\n    for i in range(len(list1)):\n        if list1[i] in result:\n            if list2[i] in result[list1[i]]:\n                result[list1[i]][list2[i]].append(list3[i])\n            else:\n                result[list1[i]][list2[i]] = [list3[i]]\n        else:\n            result[list1[i]] = {list2[i]: [list3[i]]}\n    return result\n\n\nprint(nested_dictionary(['a', 'b', 'c'], ['x', 'y', 'z'], [1, 2, 3]))\nprint(nested_dictionary(['a', 'b', 'c'], ['x', 'y', 'z'], [1, 2, 3, 4]))"
    },
    {
      "rank": 19,
      "score": 8.732446410642655,
      "candidate": "def convert_to_nested_dict(data, keys):\n    \"\"\"Convert list of data to nested dictionary.\"\"\"\n    if len(data) == 1:\n        return data[0]\n    else:\n        return {\n            keys[0]: convert_to_nested_dict(\n                [row[1:] for row in data], keys[1:]\n            )\n        }"
    },
    {
      "rank": 20,
      "score": 8.697042974303715,
      "candidate": "def to_nested_dict(lists):\n    if len(lists) == 1:\n        return dict(zip(lists[0], lists[0]))\n    else:\n        return dict(zip(lists[0], [to_nested_dict(lists[1:])]))\n\nif __name__ == '__main__':\n    list1 = ['a', 'b', 'c']\n    list2 = [1, 2, 3]\n    list3 = ['A', 'B', 'C']\n\n    lists = [list1, list2, list3]\n\n    print(to_nested_dict(lists))"
    },
    {
      "rank": 21,
      "score": 8.656042861442971,
      "candidate": "def list_to_nested_dict(list_of_dicts):\n    \"\"\"\n    This function takes a list of dictionaries and returns a nested dictionary.\n    \"\"\"\n    nested_dict = {}\n    for dictionary in list_of_dicts:\n        for key in dictionary:\n            nested_dict.setdefault(key, {})\n            nested_dict[key].update(dictionary[key])\n    return nested_dict\n\n\nif __name__ == '__main__':\n    list_of_dicts = [\n        {'id': 1, 'name': 'John', 'salary': 10000},\n        {'id': 2, 'name': 'Smith', 'salary': 9000},\n        {'id': 3, 'name': 'Adam', 'salary': 7000},\n        {'id': 4, 'name': 'Bill', 'salary': 3000},\n        {'id': 5, 'name': 'Clarke', 'salary': 2000}\n    ]\n    print(list_to_nested_dict(list_of_dicts))"
    },
    {
      "rank": 22,
      "score": 8.590966671599256,
      "candidate": "def convert_to_nested_dictionary(lists):\n    if len(lists) == 1:\n        return dict(zip(lists[0], lists[0]))\n    else:\n        return dict(zip(lists[0], [convert_to_nested_dictionary(lists[1:])]))\n\n\nif __name__ == \"__main__\":\n    print(convert_to_nested_dictionary([[\"a\", \"b\", \"c\"], [\"d\", \"e\", \"f\"]]))"
    },
    {
      "rank": 23,
      "score": 8.583718347334026,
      "candidate": "from typing import Any, List\n\n\ndef list_to_nested_dict(lists: List[List[Any]]) -> dict:\n    \"\"\"Convert list to nested dictionary.\n\n    Args:\n        lists (List[List[Any]]): list to convert.\n\n    Returns:\n        dict: nested dictionary.\n    \"\"\"\n    if len(lists) == 1:\n        return {\n            \"name\": lists[0][0],\n            \"children\": [\n                {\"name\": lists[0][1], \"children\": [{\"name\": lists[0][2]}]},\n            ],\n        }\n    return {\n        \"name\": lists[0][0],\n        \"children\": [\n            {\n                \"name\": lists[0][1],\n                \"children\": [\n                    {\n                        \"name\": lists[0][2],\n                        \"children\": list_to_nested_dict(lists[1:]),\n                    }\n                ],\n            }\n        ],\n    }\n\n\nif __name__ == \"__main__\":\n    list1 = [\"A\", \"B\", \"C\"]\n    list2 = [\"A\", \"B\", \"C\", \"D\", \"E\"]\n    list3 = [\"A\", \"B\", \"C\", \"D\", \"E\", \"F\"]\n    list4 = [\"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\"]\n    list5 = [\"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\"]\n    list6 = [\"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\", \"I\"]\n\n    print(list_to_nested_dict([list1]))\n    print(list_to_nested_dict([list2]))\n    print(list_to_nested_dict([list3]))\n    print(list_to_nested_dict([list4]))\n    print(list_to_nested_dict([list5]))\n    print(list_to_nested_dict([list6]))"
    },
    {
      "rank": 24,
      "score": 8.578455577376145,
      "candidate": "def dict_from_lists(keys, values):\n    return dict(zip(keys, values))\n\n\nprint(dict_from_lists([1, 2, 3], [3, 2, 1]))"
    },
    {
      "rank": 25,
      "score": 8.570837192508415,
      "candidate": "def dict_from_lists(keys, values):\n    \"\"\"\n    Converts lists to nested dictionary.\n\n    :param keys: list of keys\n    :param values: list of values\n    :return: nested dictionary\n    \"\"\"\n    if not keys or not values or len(keys) != len(values):\n        raise ValueError(\"Both lists must be non-empty and of equal length\")\n\n    if len(keys) == 1:\n        return dict(zip(keys, values))\n\n    return {keys[0]: dict_from_lists(keys[1:], values[1:])}\n\n\nif __name__ == \"__main__\":\n    keys = [\"one\", \"two\", \"three\", \"four\", \"five\"]\n    values = [1, 2, 3, 4, 5]\n\n    print(dict_from_lists(keys, values))"
    },
    {
      "rank": 26,
      "score": 8.538809730355197,
      "candidate": "from typing import List\n\n\ndef convert_list_to_dict(lists: List[List[str]]) -> dict:\n    \"\"\"Convert lists to dictionary.\n\n    Args:\n        lists (List[List[str]]): list of lists.\n\n    Returns:\n        dict: nested dictionary.\n    \"\"\"\n    result: dict = {}\n\n    for lst in lists:\n        d = result\n        for i in range(len(lst) - 1):\n            d = d.setdefault(lst[i], {})\n        d[lst[-1]] = {}\n\n    return result\n\n\nif __name__ == \"__main__\":\n    lists = [\n        [\"a\", \"b\", \"c\", \"d\"],\n        [\"a\", \"b\", \"e\", \"f\"],\n        [\"a\", \"b\", \"g\", \"h\"],\n        [\"i\", \"j\", \"k\", \"l\"],\n        [\"m\", \"n\", \"o\", \"p\"],\n    ]\n    print(convert_list_to_dict(lists))"
    },
    {
      "rank": 27,
      "score": 8.511278074108533,
      "candidate": "def list_to_dict(lists):\n    \"\"\"\n    >>> list_to_dict([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    {1: {4: {7: 7}, 5: {8: 8}, 6: {9: 9}}}\n    >>> list_to_dict([[1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12]])\n    {1: {4: {7: 7, 10: 10}, 5: {8: 8, 11: 11}, 6: {9: 9, 12: 12}}}\n    >>> list_to_dict([[1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12], [13, 14, 15]])\n    {1: {4: {7: 7, 10: 10, 13: 13}, 5: {8: 8, 11: 11, 14: 14}, 6: {9: 9, 12: 12, 15: 15}}}\n    >>> list_to_dict([[1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12], [13, 14, 15], [16, 17, 18]])\n    {1: {4: {7: 7, 10: 10, 13: 13, 16: 16}, 5: {8: 8, 11: 11, 14: 14, 17: 17}, 6: {9: 9, 12: 12, 15: 15, 18: 18}}}\n    >>> list_to_dict([["
    },
    {
      "rank": 28,
      "score": 8.470780444272735,
      "candidate": "from typing import List\n\n\ndef nested_dict(keys: List[str], values: List[int]) -> dict:\n    \"\"\"Return a nested dictionary from keys and values.\n\n    :param keys: list of keys.\n    :param values: list of values.\n    :return: nested dictionary.\n    \"\"\"\n    return dict(zip(keys, values))\n\n\nif __name__ == \"__main__\":\n    print(nested_dict([\"a\", \"b\", \"c\"], [1, 2, 3]))"
    },
    {
      "rank": 29,
      "score": 8.430472289191563,
      "candidate": "from typing import List, Optional, Dict, Any\n\n\ndef list_to_nested_dict(\n        data: List[List[Any]],\n        headers: Optional[List[str]] = None\n) -> Dict[Any, Dict[str, Any]]:\n    \"\"\"Convert a list of lists to a nested dictionary.\n\n    :param data: A list of lists to convert to a nested dictionary.\n    :param headers: Optional headers to use for keys.\n    :return: A nested dictionary.\n    \"\"\"\n    if headers:\n        keys = headers\n    else:\n        keys = list(range(len(data[0])))\n\n    nested_dict = {}\n    for row in data:\n        row_dict = {}\n        for key, value in zip(keys, row):\n            row_dict[key] = value\n        nested_dict[row[0]] = row_dict\n    return nested_dict"
    },
    {
      "rank": 30,
      "score": 8.39934161431303,
      "candidate": "def list_to_dict(list1, list2):\n    return {list1[i]: list2[i] for i in range(len(list1))}\n\n\nif __name__ == '__main__':\n    list1 = [\"a\", \"b\", \"c\"]\n    list2 = [1, 2, 3]\n    list_to_dict(list1, list2)"
    },
    {
      "rank": 31,
      "score": 8.390521366987683,
      "candidate": "def convert(list_of_lists):\n    \"\"\"\n    >>> convert([[1,2,3], [4,5,6]])\n    {1: {2: {3: {}}}, 4: {5: {6: {}}}}\n    \"\"\"\n    if len(list_of_lists) == 1:\n        return dict(zip(list_of_lists[0], [{} for _ in list_of_lists[0]]))\n    else:\n        return dict(zip(list_of_lists[0], [convert(l) for l in list_of_lists[1:]]))\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 32,
      "score": 8.356391687254696,
      "candidate": "def convert_to_nested_dict(lists):\n    \"\"\"\n    :param lists: list of list\n    :return: nested dictionary\n    \"\"\"\n    if len(lists) == 0:\n        return {}\n    if len(lists) == 1:\n        return {lists[0][0]: lists[0][1]}\n    return {lists[0][0]: convert_to_nested_dict(lists[1:])}\n\n\nif __name__ == \"__main__\":\n    print(convert_to_nested_dict([['a', 1], ['b', 2]]))\n    print(convert_to_nested_dict([['a', 1], ['b', 2], ['c', 3]]))\n    print(convert_to_nested_dict([['a', 1], ['b', 2], ['c', 3], ['d', 4]]))"
    },
    {
      "rank": 33,
      "score": 8.353124628302343,
      "candidate": "def to_nested_dict(lists):\n    return {lists[i]: lists[i + 1] for i in range(0, len(lists) - 1, 2)}\n\n\nlists = [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\"]\n\nprint(to_nested_dict(lists))"
    },
    {
      "rank": 34,
      "score": 8.330683882025067,
      "candidate": "def convert_nested_dict(list1, list2, list3, list4):\n    \"\"\"\n    Convert list to nested dictionary\n    \"\"\"\n    dict1 = {}\n    for i, j, k, l in zip(list1, list2, list3, list4):\n        if i not in dict1:\n            dict1[i] = {}\n        if j not in dict1[i]:\n            dict1[i][j] = {}\n        if k not in dict1[i][j]:\n            dict1[i][j][k] = l\n    return dict1\n\n\ndef test_convert_nested_dict():\n    \"\"\"\n    Test for convert_nested_dict\n    \"\"\"\n    assert convert_nested_dict([\"E\", \"E\", \"E\", \"E\"],\n                               [\"N\", \"S\", \"W\", \"W\"],\n                               [1, 2, 3, 4],\n                               [\"a\", \"b\", \"c\", \"d\"]) == {\n                                   \"E\": {\n                                       \"N\": {\"a\": 1},\n                                       \"S\": {\"b\": 2},\n                                       \"W\": {\"c\": 3},\n                                       \"W\": {\"d\": 4}\n                                   }\n                               }\n\n\nif __name__ == \"__main__\":\n    test_convert_nested_dict()"
    },
    {
      "rank": 35,
      "score": 8.327014003164622,
      "candidate": "from itertools import chain, repeat\n\ndef lists_to_nested_dict(lists):\n    \"\"\"\n    Convert lists to nested dictionary\n    \"\"\"\n    # Convert lists to iterators\n    iters = [iter(lst) for lst in lists]\n\n    # Create nested dictionary\n    nested_dict = {}\n    for item in chain(*iters):\n        current_dict = nested_dict\n        for key in repeat(item, len(lists)):\n            current_dict = current_dict.setdefault(key, {})\n    return nested_dict\n\n\nif __name__ == \"__main__\":\n    lists = [\n        [\"a\", \"b\", \"c\"],\n        [\"1\", \"2\", \"3\", \"4\"],\n        [\"I\", \"II\", \"III\", \"IV\", \"V\", \"VI\"],\n    ]\n    print(lists_to_nested_dict(lists))"
    },
    {
      "rank": 36,
      "score": 8.323851617862472,
      "candidate": "def convert(lists):\n    # your code here\n    if len(lists) == 0:\n        return {}\n    if len(lists) == 1:\n        return {lists[0][0]: lists[0][1]}\n    return {lists[0][0]: convert(lists[1:])}\n\n\nif __name__ == \"__main__\":\n    print(convert([[\"key1\", \"val1\"], [\"key2\", \"val2\"]]))\n    print(convert([[\"key1\", \"val1\"], [\"key2\", \"val2\", \"val3\"]]))\n    print(convert([[\"key1\", \"val1\"], [\"key2\", \"val2\", \"val3\", \"val4\"]]))\n    print(convert([]))"
    },
    {
      "rank": 37,
      "score": 8.263711544247585,
      "candidate": "def to_nested_dict(keys, values):\n    if len(keys) != len(values):\n        return {}\n\n    if len(keys) == 0:\n        return {}\n\n    result = {}\n    for i, key in enumerate(keys):\n        if i == 0:\n            result[key] = values[i]\n        else:\n            result[key] = result[keys[i - 1]]\n\n    return result\n\n\nif __name__ == '__main__':\n    print(to_nested_dict(['a', 'b', 'c'], [1, 2, 3]))\n    print(to_nested_dict(['a', 'b'], [1, 2]))\n    print(to_nested_dict(['a', 'b'], [1, 2, 3]))"
    },
    {
      "rank": 38,
      "score": 8.261349433929814,
      "candidate": "def list_to_nested_dict(keys, values):\n    if len(keys) != len(values):\n        return None\n    if len(keys) == 1:\n        return {keys[0]: values[0]}\n    else:\n        return {keys[0]: list_to_nested_dict(keys[1:], values[1:])}\n\n\nif __name__ == '__main__':\n    list_to_nested_dict(['a', 'b', 'c'], [1, 2, 3])"
    },
    {
      "rank": 39,
      "score": 8.257566491684782,
      "candidate": "def list_to_dict(lists):\n    if len(lists) == 1:\n        return {lists[0][0]: lists[0][1]}\n    else:\n        return {lists[0][0]: list_to_dict(lists[1:])}\n\n\nlists = [\n    ['a', 1],\n    ['b', 2],\n    ['c', 3],\n]\nprint(list_to_dict(lists))"
    },
    {
      "rank": 40,
      "score": 8.242319059317722,
      "candidate": "def list_to_dict(keys, values):\n    \"\"\"\n    >>> list_to_dict([1, 2, 3], [1, 2, 3])\n    {1: {2: {3: 3}}}\n    >>> list_to_dict([1, 2, 3, 4], [1, 2, 3])\n    {1: {2: {3: 3, 4: 3}}}\n    \"\"\"\n    if not keys:\n        return {}\n\n    if len(keys) == 1:\n        return {keys[0]: values[0]}\n\n    return {keys[0]: list_to_dict(keys[1:], values)}\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 41,
      "score": 8.237837964975299,
      "candidate": "def list_to_dict(lists):\n    result = {}\n    for item in lists:\n        if len(item) == 1:\n            result[item[0]] = {}\n        elif len(item) == 2:\n            if item[0] not in result:\n                result[item[0]] = {}\n            result[item[0]][item[1]] = {}\n        elif len(item) == 3:\n            if item[0] not in result:\n                result[item[0]] = {}\n            if item[1] not in result[item[0]]:\n                result[item[0]][item[1]] = {}\n            result[item[0]][item[1]][item[2]] = {}\n        else:\n            if item[0] not in result:\n                result[item[0]] = {}\n            if item[1] not in result[item[0]]:\n                result[item[0]][item[1]] = {}\n            if item[2] not in result[item[0]][item[1]]:\n                result[item[0]][item[1]][item[2]] = {}\n            if item[3] not in result[item[0]][item[1]][item[2]]:\n                result[item[0]][item[1]][item[2]][item[3]] = {}\n    return result\n\n\ndef main():\n    print(list_to_dict([\"Brazil\", \"Brasilia\"]))\n    print(list_to_dict([\"Brazil\", \"Brasilia\", \"State\", \"Sao Paulo\"]))\n    print(list_to_dict([\"Brazil\", \"Brasilia\", \"State\", \"Sao Paulo\", \"City\", \"Sao Paulo\"]))\n    print(list_to_dict([\"Brazil\", \"Brasilia\", \"State\", \"Sao Paulo\", \"City\", \"Sao Paulo\", \"Country\", \"Brazil\"]))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 42,
      "score": 8.20977886567498,
      "candidate": "def to_nested_dict(lists):\n    if len(lists) == 0:\n        return {}\n\n    return {lists[0][0]: to_nested_dict(lists[1:])}\n\n\nprint(to_nested_dict([['A', 'B', 'C'], ['D', 'E', 'F'], ['G', 'H', 'I']]))"
    },
    {
      "rank": 43,
      "score": 8.180444864325121,
      "candidate": "def list_to_dict(list1, list2, list3):\n    dict1 = {}\n    for x in range(len(list1)):\n        dict1[list1[x]] = {list2[x]: list3[x]}\n    return dict1\n\n\nlist1 = [\"apple\", \"banana\", \"cherry\"]\nlist2 = [\"red\", \"yellow\", \"red\"]\nlist3 = [\"small\", \"large\", \"medium\"]\nprint(list_to_dict(list1, list2, list3))"
    },
    {
      "rank": 44,
      "score": 8.163705203170508,
      "candidate": "def make_dict(keys, values):\n    if len(keys) != len(values):\n        raise ValueError(\"Length of keys and values must be the same\")\n    if len(keys) == 0:\n        return {}\n\n    if len(keys) == 1:\n        return {keys[0]: values[0]}\n\n    return {keys[0]: make_dict(keys[1:], values[1:])}\n\n\nprint(make_dict([\"a\", \"b\", \"c\"], [1, 2, 3]))\nprint(make_dict([\"a\", \"b\"], [1, 2]))\nprint(make_dict([\"a\"], [1]))"
    },
    {
      "rank": 45,
      "score": 8.117149610387616,
      "candidate": "def to_nested_dict(lst_of_lst):\n    \"\"\"\n    :param lst_of_lst: list of lists\n    :return: nested dictionary\n    \"\"\"\n    if not lst_of_lst:\n        return\n\n    if len(lst_of_lst) == 1:\n        return {lst_of_lst[0][0]: lst_of_lst[0][1]}\n\n    if len(lst_of_lst) > 1:\n        # key\n        key = lst_of_lst[0][0]\n        # value\n        value = to_nested_dict(lst_of_lst[1:])\n\n        return {key: value}\n\n\nif __name__ == \"__main__\":\n    test1 = [\n        [\"a\", 1],\n        [\"b\", 2],\n        [\"c\", 3]\n    ]\n    test2 = [\n        [\"a\", 1],\n        [\"b\", 2],\n        [\"c\", 3],\n        [\"d\", 4],\n        [\"e\", 5]\n    ]\n    test3 = [\n        [\"a\", 1],\n        [\"b\", 2],\n        [\"c\", 3],\n        [\"d\", 4],\n        [\"e\", 5],\n        [\"f\", 6],\n        [\"g\", 7]\n    ]\n    print(to_nested_dict(test1))\n    print(to_nested_dict(test2))\n    print(to_nested_dict(test3))"
    },
    {
      "rank": 46,
      "score": 8.090315054991173,
      "candidate": "def convert_to_nested_dict(lists):\n    \"\"\"\n    :param lists: list of lists\n    :return: nested dictionary\n    \"\"\"\n    nested_dict = {}\n    for i in range(len(lists[0])):\n        nested_dict[lists[0][i]] = {}\n        for j in range(len(lists[1])):\n            nested_dict[lists[0][i]][lists[1][j]] = {}\n            for k in range(len(lists[2])):\n                nested_dict[lists[0][i]][lists[1][j]][lists[2][k]] = {}\n                for l in range(len(lists[3])):\n                    nested_dict[lists[0][i]][lists[1][j]][lists[2][k]][lists[3][l]] = {}\n                    for m in range(len(lists[4])):\n                        nested_dict[lists[0][i]][lists[1][j]][lists[2][k]][lists[3][l]][lists[4][m]] = {}\n                        for n in range(len(lists[5])):\n                            nested_dict[lists[0][i]][lists[1][j]][lists[2][k]][lists[3][l]][lists[4][m]][lists[5][n]] = {}\n                            for o in range(len(lists[6])):\n                                nested_dict[lists[0][i]][lists[1][j]][lists[2][k]][lists[3][l]][lists[4][m]][lists[5][n]][lists[6][o]] = {}\n                                for p in range(len(lists[7])):\n                                    nested_dict[lists[0][i]][lists[1][j]][lists[2][k]][lists[3][l]][lists[4][m]][lists[5][n]][lists[6][o]][lists[7][p]] = {}\n                                    for q in range(len(lists[8])):\n                                        nested_dict[lists[0][i]][lists[1][j]][lists[2"
    },
    {
      "rank": 47,
      "score": 8.031937182151644,
      "candidate": "def convert(a, b, c):\n    return {a[i]: {b[i]: c[i] for i in range(len(a))}}\n\nprint(convert([\"a\", \"b\", \"c\"], [\"c\", \"d\", \"e\"], [2, 3, 4]))\n\n\"\"\"\nWrite a function that returns a list of all numbers between the given two numbers (inclusive).\n\"\"\"\n\ndef get_nums(num1, num2):\n    return [i for i in range(num1, num2 + 1)]\n\nprint(get_nums(10, 15))\n\n\"\"\"\nWrite a function that takes a string and returns a string where each character is \"hallo\"\n\"\"\"\n\ndef replace_letters(word):\n    return word.replace(\"a\", \"h\").replace(\"e\", \"l\").replace(\"i\", \"l\").replace(\"o\", \"o\").replace(\"u\", \"l\").replace(\"A\", \"H\").replace(\"E\", \"L\").replace(\"I\", \"L\").replace(\"O\", \"O\").replace(\"U\", \"L\")\n\nprint(replace_letters(\"Hello world\"))\n\n\"\"\"\nWrite a function that takes a string and returns a string where every instance of the letter \"x\" has been removed.\n\"\"\"\n\ndef remove_x(word):\n    return word.replace(\"x\", \"\")\n\nprint(remove_x(\"Hello world\"))\n\n\"\"\"\nWrite a function that takes a string and returns a string where every instance of the letter \"x\" has been replaced with an \"o\".\n\"\"\"\n\ndef replace_x(word):\n    return word.replace(\"x\", \"o\")\n\nprint(replace_x(\"Hello world\"))\n\n\"\"\"\nWrite a function that takes a string and returns a string where every instance of the letter \"x\" has been replaced with an \"o\".\n\"\"\"\n\ndef replace_x_2(word):\n    return word.replace(\"x\", \"o\")\n\nprint(replace_x_2(\"Hello world\"))\n\n\"\"\"\nWrite a function that takes a string and returns a string where every instance of the letter \"x\" has been replaced with an \"o\".\n\"\"\"\n\ndef"
    },
    {
      "rank": 48,
      "score": 7.888792651821197,
      "candidate": "def make_nested_dict(lst):\n    \"\"\"\n    >>> make_nested_dict(['name', 'age'])\n    {'name': {'age': {}}}\n    \"\"\"\n    if len(lst) == 1:\n        return {lst[0]: {}}\n    return {lst[0]: make_nested_dict(lst[1:])}\n\n\ndef make_nested_dict_v2(lst):\n    \"\"\"\n    >>> make_nested_dict_v2(['name', 'age'])\n    {'name': {'age': {}}}\n    \"\"\"\n    if not lst:\n        return {}\n    return {lst[0]: make_nested_dict_v2(lst[1:])}\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 49,
      "score": 7.680173096131332,
      "candidate": "def convert_to_nested_dict(list_of_lists):\n    \"\"\"\n    >>> convert_to_nested_dict([[1,2,3,4,5], [2,3,4,5,6], [3,4,5,6,7]])\n    {1: {2: {3: {4: {5: {}}}}}, 2: {3: {4: {5: {6: {}}}}}, 3: {4: {5: {6: {7: {}}}}}}\n    \"\"\"\n    if len(list_of_lists) == 1:\n        return dict(zip(list_of_lists[0], list_of_lists[0]))\n    return dict(zip(list_of_lists[0], [convert_to_nested_dict(list_of_lists[1:])]))\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 50,
      "score": 7.422743853849444,
      "candidate": "def nested_dict(keys, values):\n    assert len(keys) == len(values)\n    if len(keys) == 1:\n        return dict(zip(keys[0], values[0]))\n    else:\n        return {keys[0][0]: nested_dict(keys[1:], values[1:])}\n\n\nif __name__ == \"__main__\":\n    k = [['a', 'b', 'c'], ['d', 'e', 'f'], ['g', 'h', 'i']]\n    v = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    print(nested_dict(k, v))"
    },
    {
      "rank": 51,
      "score": 3.926139092254469,
      "candidate": "def list_to_nested_dict(list_of_lists):\n    \"\"\"\n    Convert list of lists to nested dictionary.\n\n    Parameters\n    ----------\n    list_of_lists : list of lists\n        List of lists to convert to nested dictionary.\n\n    Returns\n    -------\n    dict\n        Nested dictionary.\n\n    Examples\n    --------\n    >>> list_to_nested_dict([['a','b','c'],['1','2','3']])\n    {'a': {'b': {'c': ['1', '2', '3']}}}\n    \"\"\"\n\n    if len(list_of_lists) == 1:\n        return {i:list_of_lists[0][i] for i in range(len(list_of_lists[0]))}\n    else:\n        return {list_of_lists[0][i]:list_to_nested_dict(list_of_lists[1:]) for i in range(len(list_of_lists[0]))}\n\n# import pytest\n# import random\n# import itertools\n# import string\n# import numpy as np\n\n# @pytest.mark.parametrize(\"i\", range(1,5))\n# def test_list_to_nested_dict(i):\n#     \"\"\"\n#     Test list_to_nested_dict.\n#     \"\"\"\n\n#     list_of_lists = [random.sample(string.ascii_lowercase,i) for i in range(1,5)]\n#     dict_of_lists = {list_of_lists[0][i]:list_of_lists[1:] for i in range(len(list_of_lists[0]))}\n#     assert list_to_nested_dict(list_of_lists) == dict_of_lists"
    },
    {
      "rank": 52,
      "score": 3.7896064077536957,
      "candidate": "def convert_to_nested_dict(lists):\n    \"\"\"\n    Convert a list of lists to a nested dictionary.\n\n    Parameters\n    ----------\n    lists : list of list\n        A list of lists.\n\n    Returns\n    -------\n    nested_dict : dict\n        A nested dictionary.\n\n    Examples\n    --------\n    >>> from pprint import pprint\n    >>> lists = [\n    ...     [1, 2, 3],\n    ...     [1, 2, 4],\n    ...     [1, 3, 5],\n    ...     [1, 3, 6],\n    ...     [2, 3, 7],\n    ...     [2, 3, 8],\n    ... ]\n    >>> nested_dict = convert_to_nested_dict(lists)\n    >>> pprint(nested_dict)\n    {1: {2: [3, 4], 3: [5, 6]}, 2: {3: [7, 8]}}\n    \"\"\"\n    nested_dict = {}\n    for lst in lists:\n        nested_dict = _add_to_nested_dict(nested_dict, lst)\n    return nested_dict\n\n\ndef _add_to_nested_dict(nested_dict, lst):\n    \"\"\"\n    Add a list to a nested dictionary.\n\n    Parameters\n    ----------\n    nested_dict : dict\n        A nested dictionary.\n    lst : list\n        A list.\n\n    Returns\n    -------\n    nested_dict : dict\n        A nested dictionary.\n\n    Examples\n    --------\n    >>> nested_dict = {}\n    >>> lst = [1, 2, 3]\n    >>> nested_dict = _add_to_nested_dict(nested_dict, lst)\n    >>> nested_dict\n    {1: {2: [3]}}\n    \"\"\"\n    if not lst:\n        return nested_dict\n\n    key = lst[0]\n    if key not in nested_dict:\n        nested_dict[key] = {}\n\n    nested_dict[key] = _add_to_nested_dict(nested_dict[key"
    },
    {
      "rank": 53,
      "score": 3.761514928204013,
      "candidate": "def convert_to_nested_dict(list_1, list_2, list_3):\n    \"\"\"\n    :param list_1: list\n    :param list_2: list\n    :param list_3: list\n    :return: nested dictionary\n    \"\"\"\n    return dict(zip(list_1, zip(list_2, list_3)))\n\n\ndef main():\n    result = convert_to_nested_dict([\"1\", \"2\", \"3\", \"4\"], [\"a\", \"b\", \"c\", \"d\"], [1, 2, 3, 4])\n    print(result)\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 54,
      "score": 3.738947022370758,
      "candidate": "def to_nested_dictionary(keys, values):\n    \"\"\"\n    :param keys: list of keys\n    :param values: list of values\n    :return: nested dictionary\n    \"\"\"\n    if len(keys) != len(values):\n        return None\n    if len(keys) == 0:\n        return {}\n    elif len(keys) == 1:\n        return {keys[0]: values[0]}\n    else:\n        return {keys[0]: to_nested_dictionary(keys[1:], values[1:])}\n\n\n# tests\nassert to_nested_dictionary([], []) == {}\nassert to_nested_dictionary(['a'], [1]) == {'a': 1}\nassert to_nested_dictionary(['a', 'b', 'c'], [1, 2, 3]) == {'a': {'b': {'c': 3}}}\nassert to_nested_dictionary(['a', 'b', 'c'], [1, 2, 3, 4]) is None"
    },
    {
      "rank": 55,
      "score": 3.732824384460777,
      "candidate": "from unittest import TestCase\n\n\ndef to_dict(keys, values):\n    if len(keys) == 1:\n        return {keys[0]: values}\n    return {keys[0]: to_dict(keys[1:], values)}\n\n\nclass Test(TestCase):\n    def test_to_dict(self):\n        assert to_dict(['a', 'b', 'c'], [1, 2, 3]) == {'a': {'b': {'c': 3}}}"
    },
    {
      "rank": 56,
      "score": 3.5285611131094576,
      "candidate": "from typing import List, Any\n\n\ndef convert_to_nested_dict(lists: List[List[Any]]) -> dict:\n    \"\"\"Convert list to nested dictionary.\n\n    Args:\n        lists (List[List[Any]]): list of lists to convert.\n\n    Returns:\n        dict: nested dictionary\n    \"\"\"\n    result = {}\n\n    for lst in lists:\n        current_dict = result\n        for item in lst:\n            current_dict = current_dict.setdefault(item, {})\n\n    return result\n\n\nif __name__ == \"__main__\":\n    print(convert_to_nested_dict([[1, 2, 3, 4], [1, 2, 3, 4, 5]]))"
    },
    {
      "rank": 57,
      "score": 3.5154997612479755,
      "candidate": "def to_nested_dict(keys, values):\n    \"\"\"\n    :param keys: list of keys\n    :param values: list of values\n    :return: nested dictionary\n    \"\"\"\n    result = {}\n    for k, v in zip(keys, values):\n        if isinstance(v, list):\n            v = to_nested_dict(k, v)\n        result[k] = v\n    return result\n\n\nprint(to_nested_dict([\"a\", \"b\", \"c\", \"d\"], [1, 2, 3, [4, 5, 6, [7, 8]]]))"
    },
    {
      "rank": 58,
      "score": 3.4656400595580994,
      "candidate": "def to_nested_dict(nested_list: list, outer_key: str = 'outer_key'):\n    \"\"\"\n    Write a function to convert more than one list to nested dictionary.\n    :param nested_list: nested list.\n    :param outer_key: outer key.\n    :return: nested dictionary.\n    >>> to_nested_dict([['A', 'B'], ['a1', 'b1', 'c1'], ['a2', 'b2', 'c2']])\n    {'A': {'B': {'a1': 'b1', 'c1': 'c1'}, 'a2': 'b2', 'c2': 'c2'}}\n    >>> to_nested_dict([['A', 'B'], ['a1', 'b1', 'c1'], ['a2', 'b2', 'c2']], outer_key='outer_key')\n    {'outer_key': {'A': {'B': {'a1': 'b1', 'c1': 'c1'}, 'a2': 'b2', 'c2': 'c2'}}}\n    >>> to_nested_dict([['A', 'B'], ['a1', 'b1', 'c1'], ['a2', 'b2', 'c2']], outer_key='outer_key', outer_value='outer_value')\n    {'outer_value': {'A': {'B': {'a1': 'b1', 'c1': 'c1'}, 'a2': 'b2', 'c2': 'c2'}}}\n    \"\"\"\n    if len(nested_list) == 1:\n        return dict(zip(nested_list[0], nested_list[0]))\n    return {nested_list[0][0]: to_nested_dict(nested_list[1:])}\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 59,
      "score": 3.457701058851037,
      "candidate": "from typing import List, Optional, Dict\n\n\ndef convert_to_nested_dict(data: List[List[str]],\n                           delimiter: Optional[str] = '.') -> Dict[str, Optional[Dict]]:\n    \"\"\"Convert list to nested dictionary.\n\n    :param data: List of lists.\n    :param delimiter: Delimiter for the keys.\n    :return: Nested dictionary.\n    \"\"\"\n    def _inner(data: List[List[str]],\n               delimiter: Optional[str],\n               nested_dict: Optional[Dict] = None,\n               current_key: Optional[str] = None) -> Dict:\n        \"\"\"Recursively convert list to nested dictionary.\n\n        :param data: List of lists.\n        :param delimiter: Delimiter for the keys.\n        :param nested_dict: Nested dictionary.\n        :param current_key: Current key.\n        :return: Nested dictionary.\n        \"\"\"\n        if not nested_dict:\n            nested_dict = {}\n\n        if current_key:\n            data[0][0] = current_key\n\n        if len(data[0]) == 1:\n            nested_dict[data[0][0]] = None\n            return nested_dict\n\n        key = data[0][0]\n        value = data[0][1:]\n\n        nested_dict[key] = _inner(value, delimiter, {}, key)\n\n        return nested_dict\n\n    return _inner(data, delimiter)"
    },
    {
      "rank": 60,
      "score": 3.4112724560515946,
      "candidate": "def list_to_dict(lists):\n    if len(lists) == 0:\n        return {}\n\n    result = {}\n\n    for item in lists:\n        if len(item) == 0:\n            continue\n        if len(item) == 1:\n            result[item[0]] = {}\n        else:\n            result[item[0]] = list_to_dict(item[1:])\n\n    return result\n\n\nprint(list_to_dict([[\"a\", \"b\", \"c\"], [\"a\", \"b\", \"d\"], [\"a\", \"b\", \"e\"]]))"
    },
    {
      "rank": 61,
      "score": 3.3837173645764542,
      "candidate": "def convert_to_nested_dictionary(keys, values):\n    \"\"\"Convert two lists to nested dictionary.\n\n    Args:\n        keys (list): list of keys\n        values (list): list of values\n\n    Returns:\n        nested_dict (dict): nested dictionary\n\n    Raises:\n        ValueError: if two lists are not the same length\n\n    \"\"\"\n    nested_dict = {}\n\n    if len(keys) != len(values):\n        raise ValueError(\"Keys and values must be the same length.\")\n\n    for key, value in zip(keys, values):\n        nested_dict.setdefault(key, []).append(value)\n\n    return nested_dict"
    },
    {
      "rank": 62,
      "score": 3.305838144420434,
      "candidate": "from typing import List\n\n\ndef create_nested_dict(keys: List[str], values: List[str]) -> dict:\n    \"\"\"Create nested dict.\n\n    :param keys: List of keys.\n    :param values: List of values.\n    :return: nested dict.\n    \"\"\"\n    if len(keys) != len(values):\n        raise ValueError(\"Length of keys and values must be same.\")\n\n    if len(keys) == 0:\n        return {}\n\n    if len(keys) == 1:\n        return {keys[0]: values[0]}\n\n    return {keys[0]: create_nested_dict(keys[1:], values[1:])}\n\n\nif __name__ == \"__main__\":\n    print(create_nested_dict([\"a\", \"b\", \"c\"], [\"1\", \"2\", \"3\"]))"
    },
    {
      "rank": 63,
      "score": 3.2483570765056164,
      "candidate": "def convert_to_nested_dict(keys, values):\n    \"\"\"Convert list of keys and values to nested dictionary.\n\n    Args:\n        keys (list): list of keys\n        values (list): list of values\n\n    Returns:\n        dict: nested dictionary\n    \"\"\"\n    if len(keys) != len(values):\n        return {}\n\n    if len(keys) == 1:\n        return {keys[0]: values[0]}\n\n    return {\n        keys[0]: convert_to_nested_dict(keys[1:], values[1:])\n    }\n\n\nif __name__ == \"__main__\":\n    keys = [\"a\", \"b\", \"c\", \"d\"]\n    values = [1, 2, 3, 4]\n    print(convert_to_nested_dict(keys, values))"
    },
    {
      "rank": 64,
      "score": 3.180818012523817,
      "candidate": "def convert_to_dict(lists):\n    \"\"\"\n    Convert lists to nested dictionary.\n\n    Args:\n        lists(list): list of lists\n\n    Returns:\n        dict: nested dictionary\n\n    Raises:\n        TypeError: if any element in lists is not list\n\n    Examples:\n        >>> convert_to_dict([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n        {1: {2: {3: {}}}, 4: {5: {6: {}}}, 7: {8: {9: {}}}}\n\n    \"\"\"\n    if not isinstance(lists, list):\n        raise TypeError(\"lists should be a list.\")\n\n    if len(lists) == 0:\n        return {}\n\n    if not isinstance(lists[0], list):\n        raise TypeError(\"elements in lists should be list.\")\n\n    if len(lists) == 1:\n        return {\n            lists[0][0]: {\n                lists[0][1]: {\n                    lists[0][2]: {}\n                }\n            }\n        }\n\n    return {\n        lists[0][0]: convert_to_dict(lists[1:])\n    }"
    },
    {
      "rank": 65,
      "score": 3.180697802754207,
      "candidate": "def list_to_dict(keys, values):\n    if len(keys) != len(values):\n        return \"Length of lists is not equal\"\n    else:\n        d = {}\n        for i in range(len(keys)):\n            d[keys[i]] = values[i]\n    return d\n\n\nif __name__ == '__main__':\n    keys = ['a', 'b', 'c', 'd']\n    values = [1, 2, 3, 4]\n    print(list_to_dict(keys, values))"
    },
    {
      "rank": 66,
      "score": 3.165631715701782,
      "candidate": "from typing import List, Dict, Any\n\n\ndef convert_to_nested_dictionary(lists: List[List[Any]]) -> Dict[Any, Any]:\n    \"\"\"Convert list of lists to nested dictionary.\n\n    :param lists: list of lists.\n    :return: nested dictionary.\n    \"\"\"\n    result: Dict[Any, Any] = {}\n    for l in lists:\n        if len(l) == 1:\n            result[l[0]] = {}\n        elif len(l) == 2:\n            result[l[0]] = l[1]\n        elif len(l) == 3:\n            result[l[0]] = {l[1]: l[2]}\n        else:\n            if l[0] not in result.keys():\n                result[l[0]] = {}\n            result[l[0]][l[1]] = l[2:]\n    return result\n\n\nif __name__ == \"__main__\":\n    print(convert_to_nested_dictionary([[\"A\", \"B\", \"C\", \"D\"], [\"A\", \"B\", \"C\", \"E\"], [\"A\", \"B\", \"C\", \"F\"]]))\n    print(convert_to_nested_dictionary([[\"A\", \"B\"], [\"A\", \"C\"], [\"A\", \"D\"]]))"
    },
    {
      "rank": 67,
      "score": 3.1643755548298422,
      "candidate": "from unittest import TestCase\n\n\ndef to_dict(keys, values):\n    return dict(zip(keys, values))\n\n\nclass TestNestedDict(TestCase):\n\n    def test_to_dict(self):\n        keys = [1, 2, 3]\n        values = [1, 2, 3]\n        self.assertDictEqual(to_dict(keys, values), {1: 1, 2: 2, 3: 3})\n\n        keys = [1, 2, 3]\n        values = [1, 2]\n        self.assertDictEqual(to_dict(keys, values), {1: 1, 2: 2})\n\n        keys = [1, 2]\n        values = [1, 2, 3]\n        self.assertDictEqual(to_dict(keys, values), {1: 1, 2: 2})"
    },
    {
      "rank": 68,
      "score": 3.157123666297637,
      "candidate": "def convert_to_dict(data, keys):\n    \"\"\"Convert data to dictionary using keys as the keys.\"\"\"\n    if len(data) != len(keys):\n        return {}\n\n    result = {}\n\n    for i in range(len(data)):\n        result[keys[i]] = data[i]\n\n    return result\n\n\ndef convert_to_dict_recursive(data, keys):\n    \"\"\"Convert data to dictionary using keys as the keys, recursively.\"\"\"\n    if len(data) != len(keys):\n        return {}\n\n    result = {}\n\n    for i in range(len(data)):\n        key = keys[i]\n        if isinstance(data[i], list):\n            result[key] = convert_to_dict_recursive(data[i], keys)\n        else:\n            result[key] = data[i]\n\n    return result"
    },
    {
      "rank": 69,
      "score": 3.104431797502378,
      "candidate": "def list_to_nested_dict(list_of_list):\n    if not list_of_list:\n        return {}\n    if len(list_of_list) == 1:\n        return dict(zip(list_of_list[0], list_of_list[0]))\n    return dict(zip(list_of_list[0], [list_to_nested_dict(sub_list) for sub_list in list_of_list[1:]]))\n\n\nprint(list_to_nested_dict([[\"A\", \"B\", \"C\"], [\"a\", \"b\", \"c\"], [\"1\", \"2\", \"3\"]]))"
    },
    {
      "rank": 70,
      "score": 3.0984306179345618,
      "candidate": "def convert_to_nested_dictionary(lists):\n    \"\"\"\n    Convert a list of lists to nested dictionary.\n    \"\"\"\n\n    def _convert(lists, depth):\n        if depth == len(lists):\n            return lists[depth]\n        else:\n            return {lists[depth]: _convert(lists, depth + 1)}\n\n    return _convert(lists, 0)\n\n\ndef main():\n    \"\"\"\n    Drive the program.\n    \"\"\"\n\n    lists = [['1', '2', '3', '4'], ['a', 'b', 'c'], ['11', '22', '33']]\n    nested_dict = convert_to_nested_dictionary(lists)\n    print(nested_dict)\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 71,
      "score": 3.055461294854933,
      "candidate": "from typing import Any, Dict, List\n\n\ndef lists_to_nested_dictionary(keys: List[str], values: List[Any]) -> Dict[str, Any]:\n    \"\"\"Convert a list of keys and values to nested dictionary.\n\n    Args:\n        keys: list of keys.\n        values: list of values.\n\n    Examples:\n        >>> keys = ['a', 'b', 'c']\n        >>> values = [1, 2, 3]\n        >>> assert lists_to_nested_dictionary(keys, values) == {'a': {'b': {'c': 3}}}\n\n    Returns:\n        a nested dictionary.\n    \"\"\"\n    if not keys or not values:\n        return {}\n\n    if len(keys) != len(values):\n        raise ValueError(\"The length of keys and values must be equal.\")\n\n    if len(keys) == 1:\n        return {keys[0]: values[0]}\n\n    return {keys[0]: lists_to_nested_dictionary(keys[1:], values[1:])}\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod(verbose=True)"
    },
    {
      "rank": 72,
      "score": 3.045880388267751,
      "candidate": "def make_nested_dict(keys, values):\n    # Your code here\n    if len(keys) > 1:\n        return {keys[0]: make_nested_dict(keys[1:], values[1:])}\n    else:\n        return {keys[0]: values[0]}\n\n\nmake_nested_dict(['a', 'b', 'c'], [1, 2, 3])"
    },
    {
      "rank": 73,
      "score": 3.043523534119086,
      "candidate": "def convert_list_to_nested_dict(keys, values):\n    result = {}\n    for i in range(len(keys)):\n        if i == 0:\n            result[keys[i]] = values[i]\n        else:\n            result = result.setdefault(keys[i - 1], {})[keys[i]] = values[i]\n    return result\n\n\ndef main():\n    # List of keys\n    keys = [\"A\", \"B\", \"C\", \"D\"]\n\n    # List of values\n    values = [1, 2, 3, 4]\n\n    # Call the function with the lists\n    result = convert_list_to_nested_dict(keys, values)\n\n    print(result)\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 74,
      "score": 2.993251387631033,
      "candidate": "def main():\n    # get the list of dictionaries\n    d = [{1: 2}, {3: 4}, {5: 6}]\n    # get the list of keys\n    keys = [1, 2, 3]\n    # get the list of values\n    values = [3, 4, 5]\n    # call the function and print the output\n    print(to_nested_dict(d, keys, values))\n\n\ndef to_nested_dict(d, keys, values):\n    \"\"\"\n    Converts more than one list to nested dictionary.\n\n    :param d: list of dictionaries\n    :param keys: list of keys\n    :param values: list of values\n    :return: nested dictionary\n    \"\"\"\n    # return the nested dictionary\n    return {keys[i]: values[i] for i in range(len(keys))}\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 75,
      "score": 2.963994939209833,
      "candidate": "from typing import List, Dict\n\n\ndef convert_list_to_dict(lists: List[List[int]], keys: List[str]) -> Dict[str, Dict[str, int]]:\n    \"\"\"Convert list of lists to nested dictionary.\n\n    Args:\n        lists: list of lists\n        keys: list of keys\n\n    Returns:\n        dict\n    \"\"\"\n    result = {}\n    for i in range(len(lists)):\n        result[keys[i]] = {}\n        for j in range(len(lists[i])):\n            result[keys[i]][lists[i][j]] = j + 1\n    return result\n\n\nif __name__ == '__main__':\n    lists = [[1, 2, 3], [2, 3, 4], [3, 4, 5]]\n    keys = [\"a\", \"b\", \"c\"]\n    print(convert_list_to_dict(lists, keys))"
    },
    {
      "rank": 76,
      "score": 2.9071705116680913,
      "candidate": "def convert_to_nested_dict(keys, values):\n    \"\"\"\n    :param keys: List[str]\n    :param values: List[Any]\n    :return: dict[str, dict[str, Any]]\n    \"\"\"\n    if len(keys) != len(values):\n        raise ValueError(\"Length of keys and values must be same\")\n\n    if len(keys) == 0:\n        raise ValueError(\"Length of keys can't be zero\")\n\n    if len(keys) == 1:\n        return {keys[0]: values[0]}\n\n    return {keys[0]: convert_to_nested_dict(keys[1:], values[1:])}\n\n\nif __name__ == \"__main__\":\n    print(convert_to_nested_dict([\"a\", \"b\", \"c\"], [1, 2, 3]))"
    },
    {
      "rank": 77,
      "score": 2.890164056081244,
      "candidate": "from typing import List\n\n\ndef list_to_dict(lists: List[List[int]]) -> dict:\n    \"\"\"Convert a list of lists to a nested dictionary.\n\n    :param lists: list of lists\n    :return: nested dictionary\n    >>> list_to_dict([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    {1: {4: {7: {}}}, 2: {5: {8: {}}}, 3: {6: {9: {}}}}\n    \"\"\"\n    if not lists:\n        return {}\n\n    lists = list(map(dict, lists))\n    return {lists[0][0]: {lists[1][0]: {lists[2][0]: {}}}}\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 78,
      "score": 2.8829315215254097,
      "candidate": "from unittest import TestCase\n\n\ndef to_dict(keys, values):\n    if len(keys) != len(values):\n        raise ValueError('length of keys and values must be equal')\n    if len(keys) == 0:\n        return {}\n    if len(keys) == 1:\n        return {keys[0]: values[0]}\n    return {keys[0]: to_dict(keys[1:], values[1:])}\n\n\nclass TestToDict(TestCase):\n\n    data = [\n        (['a', 'b', 'c'], [1, 2, 3], {'a': {'b': {'c': 3}}}),\n        (['a', 'b', 'c'], [1, 2], {'a': {'b': {'c': 2}}}),\n        ([], [], {}),\n        (['a', 'b', 'c'], [1, 2, 3, 4], {'a': {'b': {'c': 3}}}),\n        (['a', 'b', 'c'], [1, 2, 3, 4, 5], {'a': {'b': {'c': 3}}}),\n    ]\n\n    def test_to_dict(self):\n        # True means that a test is expected to pass\n        # False means that a test is expected to fail\n        tests = {\n            (['a', 'b', 'c'], [1, 2, 3]): True,\n            (['a', 'b', 'c'], [1, 2]): True,\n            ([], []): True,\n            (['a', 'b', 'c'], [1, 2, 3, 4]): False,\n            (['a', 'b', 'c'], [1, 2, 3, 4, 5]): False,\n        }\n        for args, is_pass in tests.items():\n            result = to_dict(*args)\n            error_message = 'Test {args} failed: {result}'.format(\n                args=args,\n                result=result,\n            )\n            if is_pass:\n                self.assertEqual(result, {'a': {'b': {'c':"
    },
    {
      "rank": 79,
      "score": 2.8504963247670663,
      "candidate": "def to_nested_dictionary(list_of_lists):\n    \"\"\"Convert a list of lists to a nested dictionary.\n\n    Args:\n        list_of_lists (list): A list of lists.\n\n    Returns:\n        dict: A nested dictionary.\n\n    Examples:\n        >>> to_nested_dictionary([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]])\n        {1: {5: {9: {}}}, 2: {6: {10: {}}}, 3: {7: {11: {}}}, 4: {8: {12: {}}}}\n        >>> to_nested_dictionary([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]])\n        {1: {5: {9: {13: {}}}}, 2: {6: {10: {14: {}}}}, 3: {7: {11: {15: {}}}}, 4: {8: {12: {16: {}}}}}\n    \"\"\"\n    result = {}\n    for i in range(len(list_of_lists[0])):\n        result[list_of_lists[0][i]] = {}\n    for i in range(1, len(list_of_lists)):\n        for j in range(len(list_of_lists[i])):\n            result[list_of_lists[0][j]][list_of_lists[i][j]] = {}\n    return result"
    },
    {
      "rank": 80,
      "score": 2.8074588597918417,
      "candidate": "from unittest import TestCase\n\n\ndef to_dict(keys, values):\n    if not keys or not values:\n        raise ValueError\n    if len(keys) != len(values):\n        raise ValueError\n    return {keys[0]: values[0] if len(keys) == 1 else {keys[0]: to_dict(keys[1:], values[1:])}}\n\n\nclass TestToDict(TestCase):\n    def test_to_dict(self):\n        self.assertDictEqual({'a': 1, 'b': 2}, to_dict(['a', 'b'], [1, 2]))\n        self.assertDictEqual({'a': {'b': 2}, 'c': 3}, to_dict(['a', 'b', 'c'], [1, 2, 3]))"
    },
    {
      "rank": 81,
      "score": 2.769680614520106,
      "candidate": "from typing import List\n\n\ndef convert_to_nested_dict(data: List[List]) -> dict:\n    \"\"\"Convert data to nested dictionary.\n\n    Args:\n        data (list of lists): data to convert.\n\n    Returns:\n        dict: nested dictionary.\n    \"\"\"\n    def _to_nested_dict(data: List, depth: int) -> dict:\n        \"\"\"Recursively convert data to nested dictionary.\n\n        Args:\n            data (list): data to convert.\n            depth (int): depth of nesting.\n\n        Returns:\n            dict: nested dictionary.\n        \"\"\"\n        if depth == 1:\n            return {data[0]: data[1]}\n        return {data[0]: _to_nested_dict(data[1:], depth - 1)}\n\n    return _to_nested_dict(data[0], len(data))"
    },
    {
      "rank": 82,
      "score": 2.7671351232148718,
      "candidate": "def list_to_nested_dict(lists, key_index, value_index):\n    \"\"\"\n    :param lists: list of lists\n    :param key_index: index of key\n    :param value_index: index of value\n    :return: nested dictionary\n    \"\"\"\n    nested_dict = {}\n    for l in lists:\n        nested_dict[l[key_index]] = l[value_index]\n    return nested_dict\n\n\ndef main():\n    print(list_to_nested_dict(\n        lists=[['name', 'age'], ['Alex', '25'], ['Bob', '27'], ['Tony', '29']],\n        key_index=0, value_index=1))\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 83,
      "score": 2.749121478207732,
      "candidate": "def create_nested_dict(outer_keys, inner_keys, values):\n    \"\"\"\n    :param outer_keys: outer keys to create nested dictionary\n    :param inner_keys: inner keys to create nested dictionary\n    :param values: values to create nested dictionary\n    :return: nested dictionary\n    \"\"\"\n    # initialize nested dictionary\n    nested_dict = {}\n    # loop through outer keys\n    for outer_key in outer_keys:\n        # initialize inner dictionary\n        inner_dict = {}\n        # loop through inner keys\n        for inner_key in inner_keys:\n            # add inner key and value to inner dictionary\n            inner_dict[inner_key] = values[outer_keys.index(outer_key)][inner_keys.index(inner_key)]\n        # add outer key and inner dictionary to nested dictionary\n        nested_dict[outer_key] = inner_dict\n    # return nested dictionary\n    return nested_dict\n\n\ndef create_nested_dict_2(outer_keys, inner_keys, values):\n    \"\"\"\n    :param outer_keys: outer keys to create nested dictionary\n    :param inner_keys: inner keys to create nested dictionary\n    :param values: values to create nested dictionary\n    :return: nested dictionary\n    \"\"\"\n    # initialize nested dictionary\n    nested_dict = {}\n    # loop through outer keys\n    for outer_key in outer_keys:\n        # loop through inner keys\n        for inner_key in inner_keys:\n            # add inner key and value to nested dictionary\n            nested_dict.setdefault(outer_key, {})[inner_key] = values[outer_keys.index(outer_key)][inner_keys.index(inner_key)]\n    # return nested dictionary\n    return nested_dict\n\n\ndef main():\n    outer_keys = ['a', 'b', 'c']\n    inner_keys = ['d', 'e', 'f']\n    values = [\n        [1, 2, 3],\n        [4, 5, 6],\n        [7, 8, 9]\n    ]\n    # print nested dictionary\n    print(create_nested_dict(outer_keys, inner_keys, values))\n    # print"
    },
    {
      "rank": 84,
      "score": 2.7278086377374087,
      "candidate": "def convert_list_to_dict(list1, list2, list3):\n    result_dict = {}\n    for i in range(len(list1)):\n        if list1[i] in result_dict:\n            result_dict[list1[i]].append((list2[i], list3[i]))\n        else:\n            result_dict[list1[i]] = [(list2[i], list3[i])]\n    return result_dict\n\nlist1 = ['a', 'b', 'a']\nlist2 = ['x', 'y', 'z']\nlist3 = [1, 2, 3]\n\nprint(convert_list_to_dict(list1, list2, list3))"
    },
    {
      "rank": 85,
      "score": 2.718856235379514,
      "candidate": "def convert_to_nested_dictionary(main_list, sub_list, sub_key, value_key):\n    \"\"\"\n    Convert list of lists to nested dictionary.\n\n    Args:\n        main_list: list of lists\n        sub_list: list of values\n        sub_key: index of list to use as key\n        value_key: index of list to use as value\n\n    Returns:\n        dictionary\n    \"\"\"\n    # TODO: Write your solution here\n    output = {}\n    for i in range(len(main_list)):\n        output[main_list[i][sub_key]] = {main_list[i][value_key]: sub_list[i]}\n    return output\n\n\ndef main():\n    \"\"\"\n    Call the convert_to_nested_dictionary function.\n    \"\"\"\n    print(convert_to_nested_dictionary(\n        [['a', 'b', 'c'], ['d', 'e', 'f'], ['g', 'h', 'i']],\n        [10, 20, 30],\n        0,\n        2\n    ))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 86,
      "score": 2.6996806550405976,
      "candidate": "from typing import Any, List, Optional\n\n\ndef nested_dict(keys: List[str], values: List[Any], parent: Optional[dict] = None) -> dict:\n    \"\"\"Convert list of keys and values to nested dictionary.\"\"\"\n    if parent is None:\n        parent = dict()\n    for i in range(len(keys)):\n        key = keys[i]\n        value = values[i]\n        if i == len(keys) - 1:\n            parent[key] = value\n        else:\n            if key not in parent.keys():\n                parent[key] = dict()\n            nested_dict(keys[i + 1 :], values[i + 1 :], parent[key])\n    return parent\n\n\nif __name__ == \"__main__\":\n    print(nested_dict([\"a\", \"b\", \"c\"], [1, 2, 3]))\n    print(nested_dict([\"a\", \"b\", \"c\", \"d\"], [1, 2, 3, 4]))\n    print(nested_dict([\"a\", \"b\", \"c\"], [\"one\", \"two\", \"three\"]))\n    print(nested_dict([\"a\", \"b\", \"c\", \"d\"], [\"one\", \"two\", \"three\", \"four\"]))"
    },
    {
      "rank": 87,
      "score": 2.677440122697438,
      "candidate": "def to_dict(keys, values):\n    \"\"\"\n    Write a function to convert more than one list to nested dictionary.\n    \"\"\"\n    if len(keys) != len(values):\n        return None\n\n    if len(keys) == 1:\n        return {keys[0]: values[0]}\n\n    return {keys[0]: to_dict(keys[1:], values[1:])}\n\n\ndef main():\n    \"\"\"\n    >>> to_dict(['a', 'b', 'c'], [1, 2, 3])\n    {'a': {'b': {'c': 3}}}\n    >>> to_dict(['a', 'b', 'c'], [1, 2, 3, 4])\n    None\n    \"\"\"\n    pass\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 88,
      "score": 2.5957531985534064,
      "candidate": "def convert_list_to_nested_dictionary(list_1, list_2, list_3):\n    \"\"\"\n    Convert lists to nested dictionary\n    :param list_1: list of keys\n    :param list_2: list of values\n    :param list_3: list of values\n    :return: nested dictionary\n    \"\"\"\n\n    dictionary = {}\n    for key, value in zip(list_1, list_2):\n        dictionary[key] = {}\n        for sub_value in list_3:\n            dictionary[key][sub_value] = value\n    return dictionary\n\n\nif __name__ == '__main__':\n    keys = ['name', 'age', 'gender']\n    values = ['Prabhjot', 21, 'male']\n    values_2 = ['Prabhjot', 21, 'male']\n    result = convert_list_to_nested_dictionary(keys, values, values_2)\n    print(result)"
    },
    {
      "rank": 89,
      "score": 2.493584439832788,
      "candidate": "from unittest import TestCase\n\n\ndef to_dict(l1, l2, l3):\n    \"\"\"\n    :param l1: list of keys\n    :param l2: list of values\n    :param l3: list of list of values\n    :return: nested dictionary\n    \"\"\"\n    return {key: {inner_key: inner_value for inner_key, inner_value in zip(l2, l3[i])} for i, key in enumerate(l1)}\n\n\nclass TestToDict(TestCase):\n\n    def test_to_dict(self):\n        self.assertDictEqual(to_dict(['a', 'b', 'c'], ['x', 'y', 'z'], [['1', '2', '3'], ['4', '5', '6'], ['7', '8', '9']]),\n                             {'a': {'x': '1', 'y': '4', 'z': '7'}, 'b': {'x': '2', 'y': '5', 'z': '8'}, 'c': {'x': '3', 'y': '6', 'z': '9'}})\n\n    def test_to_dict_2(self):\n        self.assertDictEqual(to_dict(['a', 'b', 'c'], ['x', 'y', 'z'], [['1', '2', '3'], ['4', '5', '6'], ['7', '8', '9'], ['10', '11', '12']]),\n                             {'a': {'x': '1', 'y': '4', 'z': '7'}, 'b': {'x': '2', 'y': '5', 'z': '8'}, 'c': {'x': '3', 'y': '6', 'z': '9'}})"
    },
    {
      "rank": 90,
      "score": 2.446832512996986,
      "candidate": "from typing import List, Dict\n\n\ndef convert_to_nested_dict(lists: List[List[str]]) -> Dict[str, Dict[str, str]]:\n    \"\"\"Convert a list of lists to nested dictionary.\n\n    Args:\n        lists (List[List[str]]): a list of lists\n\n    Returns:\n        Dict[str, Dict[str, str]]: a nested dictionary\n    \"\"\"\n    nested_dict: Dict[str, Dict[str, str]] = {}\n    for item in lists:\n        nested_dict[item[0]] = {\n            \"name\": item[1],\n            \"age\": item[2],\n        }\n    return nested_dict\n\n\nif __name__ == \"__main__\":\n    print(\n        convert_to_nested_dict(\n            [\n                [\"Jim\", \"Smith\", \"30\"],\n                [\"Pam\", \"Jones\", \"45\"],\n                [\"Sam\", \"Smith\", \"25\"],\n                [\"Jim\", \"Smith\", \"31\"],\n            ]\n        )\n    )"
    },
    {
      "rank": 91,
      "score": 2.4245032112888487,
      "candidate": "from typing import List\n\n\ndef list_to_nested_dict(lists: List[List]) -> dict:\n    \"\"\"Convert list to nested dictionary.\n\n    Args:\n        lists (List[List]): list of lists\n\n    Returns:\n        dict: nested dictionary\n    \"\"\"\n    nested_dict = {}\n    for list_ in lists:\n        nested_dict = _add_to_nested_dict(nested_dict, list_)\n    return nested_dict\n\n\ndef _add_to_nested_dict(nested_dict: dict, list_: List) -> dict:\n    \"\"\"Add a list to a nested dictionary.\n\n    Args:\n        nested_dict (dict): nested dictionary\n        list_ (List): list to add\n\n    Returns:\n        dict: nested dictionary\n    \"\"\"\n    if len(list_) == 1:\n        nested_dict[list_[0]] = {}\n    else:\n        nested_dict[list_[0]] = _add_to_nested_dict(nested_dict[list_[0]], list_[1:])\n    return nested_dict\n\n\nif __name__ == \"__main__\":\n    lists = [\n        [\"a\", \"b\", \"c\"],\n        [\"a\", \"b\", \"d\"],\n        [\"a\", \"b\", \"e\"],\n        [\"a\", \"c\", \"f\"],\n        [\"a\", \"c\", \"g\"],\n        [\"a\", \"c\", \"h\"],\n        [\"a\", \"c\", \"i\"],\n    ]\n    print(list_to_nested_dict(lists))"
    },
    {
      "rank": 92,
      "score": 2.4018966879596646,
      "candidate": "from typing import List, Optional\n\n\ndef list_to_nested_dict(\n    list_of_list: List[List[int]],\n    keys: Optional[List[str]] = None,\n    key: Optional[str] = None,\n    value: Optional[str] = None,\n) -> dict:\n    \"\"\"Convert list to nested dictionary.\n\n    :param list_of_list: list of list\n    :param keys: list of keys\n    :param key: key\n    :param value: value\n    :return: nested dictionary\n    \"\"\"\n    if not keys:\n        keys = []\n    if len(list_of_list) == 1:\n        key = list_of_list[0][0]\n        value = list_of_list[0][1]\n        return {key: value}\n\n    key = list_of_list[0][0]\n    nested_dict = {key: list_to_nested_dict(list_of_list[1:], keys + [key])}\n    return nested_dict\n\n\nif __name__ == \"__main__\":\n    print(\n        list_to_nested_dict(\n            [\n                [\"one\", \"two\"],\n                [\"three\", \"four\"],\n                [\"five\", \"six\"],\n                [\"seven\", \"eight\"],\n            ]\n        )\n    )"
    },
    {
      "rank": 93,
      "score": 2.389578175014489,
      "candidate": "from typing import List\n\n\ndef convert_list_to_dict(keys: List[str], values: List[str]) -> dict:\n    \"\"\"Convert a list to nested dictionary.\n\n    Args:\n        keys: list of keys\n        values: list of values\n\n    Returns:\n        nested dictionary\n\n    Raises:\n        AssertionError: If `keys` and `values` have different length.\n\n    Examples:\n        >>> assert convert_list_to_dict(['a', 'b', 'c'], ['d', 'e', 'f']) == {'a': {'b': {'c': 'f'}}, 'b': {'c': 'f'}, 'c': 'f'}\n    \"\"\"\n    assert len(keys) == len(values)\n\n    result = {}\n    for i, j in zip(keys, values):\n        temp = result\n        for k in i[:-1]:\n            temp = temp.setdefault(k, {})\n        temp[i[-1]] = j\n\n    return result"
    },
    {
      "rank": 94,
      "score": 2.3359069755507846,
      "candidate": "def nested_dict(key_list, val_list):\n    if len(key_list) != len(val_list):\n        raise ValueError(\"key_list and val_list must have the same length\")\n\n    if len(key_list) == 1:\n        return {key_list[0]: val_list[0]}\n\n    return {key_list[0]: nested_dict(key_list[1:], val_list[1:])}\n\n\n# test\nkey_list = ['a', 'b', 'c']\nval_list = [1, 2, 3]\nprint(nested_dict(key_list, val_list))"
    },
    {
      "rank": 95,
      "score": 2.293848149332354,
      "candidate": "def nested_dict(list_of_keys, list_of_values):\n    \"\"\"\n    Write a function to convert more than one list to nested dictionary.\n    :param list_of_keys:\n    :param list_of_values:\n    :return: nested dictionary\n    \"\"\"\n    if len(list_of_keys) != len(list_of_values):\n        raise ValueError(\"list_of_keys and list_of_values must be same length\")\n    d = {}\n    for i in range(len(list_of_keys)):\n        d.setdefault(list_of_keys[i], []).append(list_of_values[i])\n    return d\n\n\nif __name__ == \"__main__\":\n    list_of_keys = [\"a\", \"b\", \"c\"]\n    list_of_values = [1, 2, 3]\n    print(nested_dict(list_of_keys, list_of_values))"
    },
    {
      "rank": 96,
      "score": 2.260739004816286,
      "candidate": "def convert_to_nested_dictionary(keys, values):\n    # Create a nested dictionary\n    nested_dict = {}\n    for key, value in zip(keys, values):\n        nested_dict[key] = value\n    return nested_dict\n\n\ndef convert_to_nested_dictionary_v2(keys, values):\n    nested_dict = {}\n    for key in keys:\n        nested_dict = nested_dict.setdefault(key, {})\n        nested_dict[key] = values[keys.index(key)]\n    return nested_dict\n\n\ndef convert_to_nested_dictionary_v3(keys, values):\n    nested_dict = {}\n    for key in keys:\n        nested_dict = nested_dict.setdefault(key, {})\n        nested_dict[key] = values[keys.index(key)]\n    return nested_dict\n\n\nkeys = [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\"]\nvalues = [\"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\"]\n\nnested_dict = convert_to_nested_dictionary(keys, values)\nprint(nested_dict)\n\nnested_dict = convert_to_nested_dictionary_v2(keys, values)\nprint(nested_dict)\n\nnested_dict = convert_to_nested_dictionary_v3(keys, values)\nprint(nested_dict)"
    },
    {
      "rank": 97,
      "score": 2.137541083743484,
      "candidate": "from unittest import TestCase\n\n\ndef convert_to_nested_dict(values):\n    if len(values) == 1:\n        return values[0]\n    else:\n        return {\n            values[0][0]: convert_to_nested_dict(values[1:])\n        }\n\n\nclass TestConvertToNestedDict(TestCase):\n\n    def test_convert_to_nested_dict_1(self):\n        values = [\n            ['a', 'b', 'c'],\n            [1, 2, 3],\n            [4, 5, 6]\n        ]\n        result = {\n            'a': {\n                'b': {\n                    'c': [1, 2, 3]\n                }\n            },\n            'a': {\n                'b': {\n                    'c': [4, 5, 6]\n                }\n            }\n        }\n        self.assertEqual(\n            convert_to_nested_dict(values),\n            result\n        )\n\n    def test_convert_to_nested_dict_2(self):\n        values = [\n            ['a', 'b', 'c'],\n            [1, 2, 3]\n        ]\n        result = {\n            'a': {\n                'b': {\n                    'c': [1, 2, 3]\n                }\n            }\n        }\n        self.assertEqual(\n            convert_to_nested_dict(values),\n            result\n        )\n\n    def test_convert_to_nested_dict_3(self):\n        values = [\n            ['a', 'b', 'c'],\n            [1, 2, 3],\n            [4, 5, 6],\n            [7, 8, 9]\n        ]\n        result = {\n            'a': {\n                'b': {\n                    'c': [1, 2, 3, 4, 5, 6, 7, 8, 9]\n                }\n            },\n            'a': {\n                'b': {\n                    'c': [1, 2, 3, 4"
    },
    {
      "rank": 98,
      "score": 2.118479922318633,
      "candidate": "def nested_dict_from_lists(lists):\n    if len(lists) == 0:\n        return None\n    if len(lists) == 1:\n        return {key: value for key, value in enumerate(lists[0])}\n    return {key: nested_dict_from_lists(lists[1:]) for key in lists[0]}\n\n\ndef test_function(test_case):\n    lists = test_case[0]\n    solution = test_case[1]\n    output = nested_dict_from_lists(lists)\n    if output == solution:\n        print(\"Pass\")\n    else:\n        print(\"Fail\")\n\nlists = [[1, 2, 3], [\"a\", \"b\", \"c\"]]\nsolution = {0: {0: 1, 1: 2, 2: 3}, 1: {0: \"a\", 1: \"b\", 2: \"c\"}}\ntest_case = [lists, solution]\ntest_function(test_case)\n\nlists = [[1, 2, 3], [\"a\", \"b\", \"c\"], [\"A\", \"B\", \"C\"]]\nsolution = {0: {0: 1, 1: 2, 2: 3}, 1: {0: \"a\", 1: \"b\", 2: \"c\"}, 2: {0: \"A\", 1: \"B\", 2: \"C\"}}\ntest_case = [lists, solution]\ntest_function(test_case)\n\nlists = [[1, 2, 3], [\"a\", \"b\", \"c\"], [\"A\", \"B\", \"C\"], [1, 2, 3, 4]]\nsolution = {0: {0: 1, 1: 2, 2: 3}, 1: {0: \"a\", 1: \"b\", 2: \"c\"}, 2: {0: \"A\", 1: \"B\", 2: \"C\"}, 3: {0: 1, 1: 2, 2: 3, 3: 4}}\ntest_case = [lists, solution]\ntest_function("
    },
    {
      "rank": 99,
      "score": 2.043359877671101,
      "candidate": "from typing import Dict, List\n\n\ndef convert_to_dict(keys: List[str], values: List[str]) -> Dict[str, str]:\n    \"\"\"Convert two lists to nested dictionary.\n\n    Args:\n        keys (List[str]): keys for nested dictionary.\n        values (List[str]): values for nested dictionary.\n\n    Returns:\n        Dict[str, str]: nested dictionary.\n    \"\"\"\n    if len(keys) != len(values):\n        raise ValueError(\"keys and values must be of the same length.\")\n\n    result = {}\n    for key, value in zip(keys, values):\n        if \".\" in key:\n            parent, child = key.split(\".\")\n            if parent not in result:\n                result[parent] = {}\n            result[parent][child] = value\n        else:\n            result[key] = value\n\n    return result"
    },
    {
      "rank": 100,
      "score": 2.006215542699554,
      "candidate": "def convert_to_nested_dict(list_of_lists):\n    \"\"\"Convert list of lists to nested dictionary.\"\"\"\n    def _convert_to_nested_dict(list_of_lists):\n        if len(list_of_lists) == 1:\n            return {list_of_lists[0][0]: list_of_lists[0][1]}\n        elif len(list_of_lists) > 1:\n            return {list_of_lists[0][0]: _convert_to_nested_dict(list_of_lists[1:])}\n        else:\n            raise ValueError('Empty list')\n\n    return _convert_to_nested_dict(list_of_lists)"
    }
  ]
}