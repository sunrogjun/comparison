{
  "timestamp": "2025-09-14T22:23:13.391067",
  "method": "improved_llm_judge",
  "judge_model": "codellama/CodeLlama-7b-Python-hf",
  "target_model": "codellama-7b",
  "dataset": "mbpp",
  "problem_number": 11,
  "total_candidates": 100,
  "results": [
    {
      "rank": 1,
      "score": 10.0,
      "candidate": "def first_duplicate(arr):\n    if len(arr) <= 1:\n        return None\n\n    for el in arr:\n        if el < 0:\n            return None\n        if el > len(arr) - 1:\n            return None\n\n    for i in range(len(arr)):\n        if arr[i] < 0 or arr[i] > len(arr) - 1:\n            continue\n        if arr[i] == arr[arr[i]]:\n            return arr[i]\n        arr[arr[i]], arr[i] = arr[i], arr[arr[i]]\n\n    return None\n\n\nprint(first_duplicate([2, 3, 3, 5, 7, 11, 11, 11, 13]))"
    },
    {
      "rank": 2,
      "score": 10.0,
      "candidate": "from typing import List\n\n\ndef first_duplicate(arr: List[int]) -> int:\n    \"\"\"Finds first duplicate element in a given array of integers.\n\n    Args:\n        arr (List[int]): given array of integers\n\n    Returns:\n        int: first duplicate element in a given array of integers\n    \"\"\"\n\n    # Create a dict to hold all values and their indices\n    values = dict()\n    for i in range(len(arr)):\n        if arr[i] in values:\n            return arr[i]\n        values[arr[i]] = i\n    return -1\n\n\nif __name__ == \"__main__\":\n    print(first_duplicate([1, 2, 3, 4, 5, 6, 7, 8, 1]))"
    },
    {
      "rank": 3,
      "score": 10.0,
      "candidate": "def first_duplicate(arr):\n    dupes = []\n    for i in arr:\n        if arr.count(i) > 1:\n            if i not in dupes:\n                dupes.append(i)\n    if len(dupes) > 0:\n        return dupes[0]\n    return None\n\n\nprint(first_duplicate([2, 3, 5, 4, 3, 2, 6, 7]))"
    },
    {
      "rank": 4,
      "score": 10.0,
      "candidate": "from typing import List\n\n\ndef find_first_dup(nums: List[int]) -> int:\n    \"\"\"Finds the first duplicate element in a given array of integers.\n\n    Args:\n        nums (List[int]): an array of integers\n\n    Returns:\n        int: the first duplicate element\n    \"\"\"\n    seen = set()\n\n    for num in nums:\n        if num in seen:\n            return num\n        seen.add(num)\n\n    return -1\n\n\nif __name__ == \"__main__\":\n    print(find_first_dup([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 4, 5, 6, 7, 8, 9, 10]))"
    },
    {
      "rank": 5,
      "score": 10.0,
      "candidate": "def first_duplicate(array):\n    \"\"\"\n    >>> first_duplicate([1,2,3,4,5,6,7,8,9,10,1,2,3,4,5,6,7,8,9,10])\n    1\n    >>> first_duplicate([1,2,3,4,5,6,7,8,9,10,11,1,2,3,4,5,6,7,8,9,10])\n    -1\n    \"\"\"\n    seen = set()\n    for item in array:\n        if item in seen:\n            return item\n        seen.add(item)\n    return -1\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 6,
      "score": 10.0,
      "candidate": "def first_duplicate_element(array):\n    \"\"\"\n    >>> first_duplicate_element([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n    -1\n    >>> first_duplicate_element([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1])\n    1\n    >>> first_duplicate_element([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2])\n    2\n    \"\"\"\n    # we will use the list itself as a hash table\n    for i in range(len(array)):\n        if array[abs(array[i])] > 0:\n            array[abs(array[i])] = -array[abs(array[i])]\n        else:\n            return abs(array[i])\n    return -1\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 7,
      "score": 10.0,
      "candidate": "def first_dup(arr):\n    # O(n) time complexity\n    # O(n) space complexity\n    d = {}\n    for num in arr:\n        if num in d:\n            return num\n        d[num] = 1\n    return None\n\nprint(first_dup([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110,"
    },
    {
      "rank": 8,
      "score": 10.0,
      "candidate": "def find_duplicate(arr):\n    n = len(arr)\n    slow, fast = arr[0], arr[0]\n    while True:\n        slow = arr[slow]\n        fast = arr[arr[fast]]\n        if slow == fast:\n            break\n    while slow != arr[0]:\n        slow = arr[slow]\n    return slow\n\n\nif __name__ == \"__main__\":\n    print(find_duplicate([2, 3, 7, 2, 8, 12, 1, 4, 1, 5]))\n    print(find_duplicate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\n    print(find_duplicate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]))\n    print(find_duplicate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]))"
    },
    {
      "rank": 9,
      "score": 10.0,
      "candidate": "from typing import List\n\n\ndef first_duplicate(arr: List[int]) -> int:\n    \"\"\"\n    :param arr: list of integers\n    :return: first duplicate element\n    >>> first_duplicate([2, 3, 3, 1, 5, 2])\n    3\n    >>> first_duplicate([2, 4, 3, 5, 1])\n    -1\n    >>> first_duplicate([2, 4, 3, 5, 1, 2])\n    2\n    \"\"\"\n    unique_dict = {}\n    for elem in arr:\n        if elem in unique_dict:\n            return elem\n        unique_dict[elem] = 1\n    return -1\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 10,
      "score": 10.0,
      "candidate": "def first_duplicate(arr):\n    if len(arr) <= 1:\n        return -1\n\n    for i in range(len(arr)):\n        if arr[abs(arr[i])] < 0:\n            return abs(arr[i])\n        else:\n            arr[abs(arr[i])] = -arr[abs(arr[i])]\n    return -1\n\nprint(first_duplicate([2, 3, 5, 4, 3, 2, 6, 7]))\nprint(first_duplicate([2, 4, 1, 4, 5]))\nprint(first_duplicate([2, 2, 2, 4, 5]))\nprint(first_duplicate([2, 3, 5, 4, 3, 2, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]))"
    },
    {
      "rank": 11,
      "score": 10.0,
      "candidate": "from collections import defaultdict\n\n\ndef first_duplicate(arr):\n    # O(N)\n    # O(N)\n    lookup = defaultdict(int)\n    for el in arr:\n        if lookup[el] == 0:\n            lookup[el] += 1\n        else:\n            return el\n    return -1\n\n\ndef test_first_duplicate():\n    assert first_duplicate([2, 3, 5, 4, 3, 2, 6, 7]) == 3\n    assert first_duplicate([2, 4, 1, 2]) == 2\n    assert first_duplicate([2, 1, 3, 5, 3, 2]) == 3\n    assert first_duplicate([1, 2, 3, 4]) == -1\n    assert first_duplicate([1, 1]) == 1\n    assert first_duplicate([1]) == -1\n    assert first_duplicate([]) == -1"
    },
    {
      "rank": 12,
      "score": 10.0,
      "candidate": "def find_duplicate(arr):\n    seen = set()\n    for el in arr:\n        if el in seen:\n            return el\n        seen.add(el)\n    return -1\n\n# Test cases:\nprint(find_duplicate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 1, 16, 17]))\nprint(find_duplicate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 16]))\nprint(find_duplicate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18]))\nprint(find_duplicate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]))\nprint(find_duplicate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]))"
    },
    {
      "rank": 13,
      "score": 10.0,
      "candidate": "def first_duplicate(arr):\n    \"\"\"\n    O(n) & O(1)\n    \"\"\"\n    if not arr:\n        return -1\n\n    for i in range(len(arr)):\n        if arr[abs(arr[i])] > 0:\n            arr[abs(arr[i])] = -arr[abs(arr[i])]\n        else:\n            return abs(arr[i])\n    return -1\n\n\ndef first_duplicate_with_set(arr):\n    \"\"\"\n    O(n) & O(n)\n    \"\"\"\n    if not arr:\n        return -1\n\n    seen = set()\n    for i in arr:\n        if i in seen:\n            return i\n        seen.add(i)\n    return -1\n\n\ndef first_duplicate_with_dict(arr):\n    \"\"\"\n    O(n) & O(n)\n    \"\"\"\n    if not arr:\n        return -1\n\n    seen = {}\n    for i in arr:\n        if i in seen:\n            return i\n        seen[i] = i\n    return -1\n\n\ndef first_duplicate_with_dict_optimized(arr):\n    \"\"\"\n    O(n) & O(n)\n    \"\"\"\n    if not arr:\n        return -1\n\n    seen = {}\n    for i in arr:\n        if i in seen:\n            return i\n        seen[i] = 1\n    return -1\n\n\ndef first_duplicate_with_sort(arr):\n    \"\"\"\n    O(n log n) & O(1)\n    \"\"\"\n    if not arr:\n        return -1\n\n    arr.sort()\n    for i in range(1, len(arr)):\n        if arr[i - 1] == arr[i]:\n            return arr[i]\n    return -1\n\n\ndef main():\n\n    arr = [2, 3, 5, 2, 6, 7, 4, 1, 1, 3, 4, 6, 8, 6, 9, 1, 1, 1]\n    print(\""
    },
    {
      "rank": 14,
      "score": 10.0,
      "candidate": "def find_duplicate(arr: list[int]) -> int:\n    \"\"\"\n    Floyd's cycle-finding algorithm.\n    \"\"\"\n    slow = arr[0]\n    fast = arr[arr[0]]\n\n    while slow != fast:\n        slow = arr[slow]\n        fast = arr[arr[fast]]\n\n    slow = 0\n    while slow != fast:\n        slow = arr[slow]\n        fast = arr[fast]\n\n    return slow"
    },
    {
      "rank": 15,
      "score": 10.0,
      "candidate": "def first_duplicate(arr: list) -> int:\n    \"\"\"Find first duplicate element in array of integers.\n\n    Args:\n        arr (list): list of integers.\n\n    Returns:\n        int: first duplicate element.\n    \"\"\"\n    hashmap = dict()\n\n    for num in arr:\n        if num in hashmap:\n            return num\n        hashmap[num] = True\n\n    return -1\n\n\ndef test_first_duplicate():\n    \"\"\"\n    >>> test_first_duplicate()\n    \"\"\"\n    assert first_duplicate([2, 3, 5, 4, 3, 2, 6, 7]) == 3\n    assert first_duplicate([2, 4, 1, 2]) == 2\n    assert first_duplicate([2, 1, 3, 5, 3, 2]) == 3\n    assert first_duplicate([2, 4, 1, 2]) == 2\n    assert first_duplicate([1, 2, 3, 4, 5]) == -1\n    assert first_duplicate([1, 1]) == 1\n    assert first_duplicate([1, 1, 2]) == 1"
    },
    {
      "rank": 16,
      "score": 10.0,
      "candidate": "def first_dup(arr):\n    seen = set()\n    for elem in arr:\n        if elem in seen:\n            return elem\n        seen.add(elem)\n    return -1\n\n\nprint(first_dup([1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 10]))"
    },
    {
      "rank": 17,
      "score": 10.0,
      "candidate": "from typing import List\n\n\ndef first_duplicate(arr: List[int]) -> int:\n    \"\"\"\n    :param arr: array of integers\n    :return: the first duplicate element\n    >>> first_duplicate([1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3])\n    1\n    >>> first_duplicate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n    -1\n    >>> first_duplicate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12])\n    -1\n    >>> first_duplicate([-1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n    -1\n    \"\"\"\n    if len(arr) == 0:\n        return -1\n\n    seen = set()\n    for value in arr:\n        if value in seen:\n            return value\n        seen.add(value)\n    return -1\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 18,
      "score": 10.0,
      "candidate": "def find_dup(arr: list) -> int:\n    \"\"\"\n    >>> find_dup([1,2,3,4,5,6,7,8,9,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,"
    },
    {
      "rank": 19,
      "score": 10.0,
      "candidate": "from timeit import timeit\n\n\ndef first_duplicate(arr):\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            if arr[i] == arr[j]:\n                return arr[i]\n\n    return None\n\n\ndef first_duplicate_better(arr):\n    seen = set()\n    for i in arr:\n        if i in seen:\n            return i\n        seen.add(i)\n    return None\n\n\nif __name__ == \"__main__\":\n    print(\n        timeit(\n            'first_duplicate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 1, 3])',\n            'from __main__ import first_duplicate',\n            number=100000,\n        )\n    )\n    print(\n        timeit(\n            'first_duplicate_better([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 1, 3])',\n            'from __main__ import first_duplicate_better',\n            number=100000,\n        )\n    )"
    },
    {
      "rank": 20,
      "score": 9.218258724043066,
      "candidate": "def find_duplicate(arr):\n    \"\"\"\n    We can use a hash table to keep track of the elements in the array.\n    \"\"\"\n    hash_table = {}\n    for num in arr:\n        if num in hash_table:\n            return num\n        hash_table[num] = True\n    return -1\n\n\nif __name__ == '__main__':\n    print(find_duplicate([2, 3, 5, 4, 3, 2, 6, 7]))"
    },
    {
      "rank": 21,
      "score": 9.211119835793308,
      "candidate": "def first_duplicate(arr):\n    \"\"\"\n    :param arr: list of integers\n    :return: int - first duplicate element\n    \"\"\"\n    if not arr:\n        return None\n\n    num_map = {}\n\n    for num in arr:\n        if num in num_map:\n            return num\n        else:\n            num_map[num] = 1\n\n    return None\n\n\ndef main():\n\n    print(\"First Duplicate: \" + str(first_duplicate([2, 3, 5, 4, 3, 2, 6, 7])))\n    print(\"First Duplicate: \" + str(first_duplicate([2, 4, 6, 8, 10, 12])))\n    print(\"First Duplicate: \" + str(first_duplicate([2, 4, 6, 8, 10, 12, 14, 16])))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 22,
      "score": 9.19808236201277,
      "candidate": "def first_dup(arr):\n    if len(arr) <= 1:\n        return None\n    arr_sorted = sorted(arr)\n    for i in range(len(arr_sorted)):\n        if i > 0 and arr_sorted[i] == arr_sorted[i-1]:\n            return arr_sorted[i]\n    return None\n\n\nif __name__ == '__main__':\n    test_cases = [\n        ([1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 5, 6, 7, 8, 9]),\n        ([1, 2, 3, 4, 5, 6, 7, 8, 9]),\n        ([1, 2, 3, 4, 5, 6, 7, 8]),\n        ([1, 2, 3, 4, 5, 6, 7]),\n        ([1, 2, 3, 4, 5, 6]),\n        ([1, 2, 3, 4, 5]),\n        ([1, 2, 3, 4]),\n        ([1, 2, 3]),\n        ([1, 2]),\n        ([1]),\n        ([])\n    ]\n    for test_case in test_cases:\n        print(first_dup(test_case))"
    },
    {
      "rank": 23,
      "score": 9.190729074084377,
      "candidate": "from typing import Optional\n\n\ndef first_duplicate(arr: list) -> Optional[int]:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(n)\n    \"\"\"\n    cache: dict[int, int] = {}\n\n    for num in arr:\n        if num in cache:\n            return num\n        cache[num] = 1\n\n    return None\n\n\nif __name__ == \"__main__\":\n    assert first_duplicate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 1, 2]) == 1\n    assert first_duplicate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]) is None"
    },
    {
      "rank": 24,
      "score": 8.962434335291713,
      "candidate": "def first_duplicate(arr):\n    # O(N^2)\n    # for i in range(len(arr)):\n    #     for j in range(i + 1, len(arr)):\n    #         if arr[i] == arr[j]:\n    #             return arr[i]\n    # return None\n\n    # O(N)\n    seen = set()\n    for i in range(len(arr)):\n        if arr[i] in seen:\n            return arr[i]\n        seen.add(arr[i])\n    return None\n\n\nprint(first_duplicate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))"
    },
    {
      "rank": 25,
      "score": 8.94963421046746,
      "candidate": "from typing import List\n\n\n# Time Complexity: O(n)\n# Space Complexity: O(n)\ndef find_duplicate(arr: List[int]) -> int:\n    lookup = set()\n\n    for num in arr:\n        if num in lookup:\n            return num\n        lookup.add(num)\n\n\n# Time Complexity: O(n)\n# Space Complexity: O(1)\ndef find_duplicate_v2(arr: List[int]) -> int:\n    slow, fast = arr[0], arr[0]\n\n    while True:\n        slow = arr[slow]\n        fast = arr[arr[fast]]\n\n        if slow == fast:\n            break\n\n    start = 0\n    while start != slow:\n        start = arr[start]\n        slow = arr[slow]\n\n    return slow\n\n\nif __name__ == \"__main__\":\n    print(find_duplicate([3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 3]))\n    print(find_duplicate_v2([3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 3]))"
    },
    {
      "rank": 26,
      "score": 8.847491451375006,
      "candidate": "def find_duplicate(arr):\n    # Time Complexity: O(n)\n    # Space Complexity: O(n)\n    hash_table = {}\n    for i in range(len(arr)):\n        if arr[i] in hash_table:\n            return arr[i]\n        else:\n            hash_table[arr[i]] = 1\n\n    return -1\n\n\nif __name__ == \"__main__\":\n    arr = [1,2,3,1,2]\n    print(find_duplicate(arr))\n    arr = [1,2,3,4,5,6,7,8,9,10]\n    print(find_duplicate(arr))"
    },
    {
      "rank": 27,
      "score": 8.842582097417601,
      "candidate": "def first_duplicate(arr):\n    seen = set()\n    for el in arr:\n        if el in seen:\n            return el\n        seen.add(el)\n    return -1\n\n\ndef test_first_duplicate():\n    assert first_duplicate([2, 3, 5, 4, 3, 2, 6, 7]) == 3\n    assert first_duplicate([2, 4, 1, 2]) == 2\n    assert first_duplicate([2, 1, 3, 5, 3, 2]) == 3\n    assert first_duplicate([2, 3, 5, 4, 9, 6]) == -1\n\n\nif __name__ == '__main__':\n    test_first_duplicate()"
    },
    {
      "rank": 28,
      "score": 8.806293068642196,
      "candidate": "def find_duplicate(arr: list) -> int:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(1)\n    \"\"\"\n    arr.sort()\n\n    for i in range(len(arr) - 1):\n        if arr[i] == arr[i + 1]:\n            return arr[i]\n\n    return -1\n\n\nif __name__ == \"__main__\":\n    print(find_duplicate([2, 3, 1, 0, 2, 6, 4]))"
    },
    {
      "rank": 29,
      "score": 8.761811828113784,
      "candidate": "from collections import defaultdict\n\ndef first_duplicate(a):\n    dupes = set()\n    for i in a:\n        if i in dupes:\n            return i\n        else:\n            dupes.add(i)\n    return -1\n\ndef first_duplicate_optimized(a):\n    dupes = defaultdict(int)\n    for i in a:\n        if dupes[i] == 1:\n            return i\n        else:\n            dupes[i] += 1\n    return -1\n\nprint(first_duplicate([1, 2, 3, 4, 2]))\nprint(first_duplicate_optimized([1, 2, 3, 4, 2]))"
    },
    {
      "rank": 30,
      "score": 8.74416582597647,
      "candidate": "def first_duplicate(arr):\n    \"\"\"\n    :param arr: list of integers\n    :return: the first duplicate element in the array\n    \"\"\"\n    if not arr or len(arr) == 0:\n        return None\n\n    # Create an empty set to store the unique elements\n    unique = set()\n\n    # Iterate over the array\n    for el in arr:\n        if el in unique:\n            return el\n        else:\n            unique.add(el)\n    return None\n\n\nprint(first_duplicate([2, 4, 2, 5, 3, 2, 6, 7, 8, 9]))\nprint(first_duplicate([2, 4, 2, 5, 3, 6, 7, 8, 9]))\nprint(first_duplicate([2, 4, 2, 5, 3, 6, 7, 8]))\nprint(first_duplicate([2, 4, 2, 5, 3, 6, 7]))\nprint(first_duplicate([2, 4, 2, 5, 3, 6]))\nprint(first_duplicate([2, 4, 2, 5, 3]))\nprint(first_duplicate([2, 4, 2, 5]))\nprint(first_duplicate([2, 4, 2, 5]))\nprint(first_duplicate([2, 4, 2]))\nprint(first_duplicate([2, 4]))\nprint(first_duplicate([2]))\nprint(first_duplicate([]))"
    },
    {
      "rank": 31,
      "score": 8.687834379419948,
      "candidate": "def first_duplicate(arr):\n    \"\"\"\n    Time complexity: O(N)\n    Space complexity: O(N)\n    \"\"\"\n    # maintain a dict to store visited numbers\n    visited = {}\n    # iterate through the array\n    for num in arr:\n        # if the number is already in visited, return it\n        if num in visited:\n            return num\n        # otherwise add it to visited\n        else:\n            visited[num] = True\n    return None\n\n\ndef first_duplicate_v2(arr):\n    \"\"\"\n    Time complexity: O(N)\n    Space complexity: O(1)\n    \"\"\"\n    # maintain a set to store visited numbers\n    visited = set()\n    # iterate through the array\n    for num in arr:\n        # if the number is already in visited, return it\n        if num in visited:\n            return num\n        # otherwise add it to visited\n        else:\n            visited.add(num)\n    return None\n\n\nprint(first_duplicate([1,2,3,4,5,6,7,8,9,10]))\nprint(first_duplicate([1,2,3,4,5,6,7,8,9,10,10]))"
    },
    {
      "rank": 32,
      "score": 8.621646096717786,
      "candidate": "def first_duplicate(arr):\n    # create a dict to store seen elements and their indices\n    seen = {}\n    # loop through the array\n    for i, num in enumerate(arr):\n        # check if the element has been seen before\n        if num in seen:\n            # if it has been seen, return the index of the first occurence\n            return seen[num]\n        # if the element has not been seen, add it to the dict\n        seen[num] = i\n\nif __name__ == '__main__':\n    print(first_duplicate([1,2,3,4,5,6,7,8,9,1,1,1]))"
    },
    {
      "rank": 33,
      "score": 8.621528291143568,
      "candidate": "def first_dup(arr):\n    \"\"\"\n    >>> first_dup([2, 3, 5, 4, 3, 2, 6, 7])\n    3\n    >>> first_dup([2, 4, 1, 2])\n    2\n    >>> first_dup([2, 4, 1, 4])\n    4\n    \"\"\"\n    seen = set()\n    for num in arr:\n        if num in seen:\n            return num\n        seen.add(num)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 34,
      "score": 8.606763525832191,
      "candidate": "def find_duplicate(arr):\n    \"\"\"\n    :param arr: list of integers\n    :return: first duplicate element in list\n    \"\"\"\n    # if arr is None or arr is []:\n    #     return None\n    # if len(arr) == 1:\n    #     return None\n    #\n    # seen = set()\n    # for i in arr:\n    #     if i in seen:\n    #         return i\n    #     seen.add(i)\n\n    # if arr is None or arr is []:\n    #     return None\n    # if len(arr) == 1:\n    #     return None\n    #\n    # seen = set()\n    # for i in arr:\n    #     if i in seen:\n    #         return i\n    #     seen.add(i)\n\n    if arr is None or arr == []:\n        return None\n    if len(arr) == 1:\n        return None\n\n    seen = set()\n    for i in arr:\n        if i in seen:\n            return i\n        seen.add(i)\n\n    return None\n\n\ndef main():\n    print(find_duplicate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26,\n                          27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49,\n                          50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60,"
    },
    {
      "rank": 35,
      "score": 8.59842563741613,
      "candidate": "from collections import defaultdict\n\n\ndef first_dup(arr):\n    d = defaultdict(int)\n    for num in arr:\n        d[num] += 1\n        if d[num] > 1:\n            return num\n    return -1\n\n\nprint(first_dup([2, 3, 5, 4, 3, 2, 6, 7]))\nprint(first_dup([2, 4, 6, 8, 10, 12]))\nprint(first_dup([2, 4, 6, 8, 10, 12, 2, 4, 6, 8, 10]))\nprint(first_dup([2, 4, 6, 8, 10, 12, 14, 16, 18, 20]))"
    },
    {
      "rank": 36,
      "score": 8.563005957511802,
      "candidate": "from typing import List\n\n\ndef find_duplicate(arr: List[int]) -> int:\n    \"\"\"\n    Idea is to create a frequency table to store the count of the elements.\n    If the count exceeds 1, then it is a duplicate element.\n    \"\"\"\n    freq = {}\n    for num in arr:\n        if num not in freq:\n            freq[num] = 1\n        else:\n            return num\n\n\nif __name__ == \"__main__\":\n    assert find_duplicate([2, 3, 3, 1, 5, 2, 4]) == 3"
    },
    {
      "rank": 37,
      "score": 8.546787605996775,
      "candidate": "def first_duplicate(arr):\n    for i in range(len(arr)):\n        if arr[abs(arr[i])] >= 0:\n            arr[abs(arr[i])] = -arr[abs(arr[i])]\n        else:\n            return abs(arr[i])\n    return -1\n\n\n# Tests\nprint(first_duplicate([2, 3, 5, 4, 5, 1]))\nprint(first_duplicate([2, 4, 2, 1, 2]))"
    },
    {
      "rank": 38,
      "score": 8.540906450020316,
      "candidate": "def find_first_duplicate_element(arr):\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(n)\n    \"\"\"\n    seen = set()\n    for el in arr:\n        if el in seen:\n            return el\n        seen.add(el)\n    return -1\n\n\ndef find_first_duplicate_element_2(arr):\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(1)\n    \"\"\"\n    for el in arr:\n        abs_el = abs(el)\n        if arr[abs_el - 1] < 0:\n            return abs_el\n        arr[abs_el - 1] *= -1\n    return -1"
    },
    {
      "rank": 39,
      "score": 8.52841490222753,
      "candidate": "def find_duplicate(arr):\n    if len(arr) < 2:\n        return -1\n\n    low, high = 1, len(arr) - 1\n    while low <= high:\n        mid = low + (high - low) // 2\n        count = 0\n        for num in arr:\n            if num <= mid:\n                count += 1\n        if count <= mid:\n            low = mid + 1\n        else:\n            high = mid - 1\n    return low\n\n\nprint(find_duplicate([1, 2, 3, 4, 2]))\nprint(find_duplicate([1, 2, 3, 4, 5]))\nprint(find_duplicate([1, 2, 3, 4, 5, 6]))\nprint(find_duplicate([1, 1, 1, 1, 1, 1]))"
    },
    {
      "rank": 40,
      "score": 8.49879651340228,
      "candidate": "def first_duplicate(arr):\n    # O(n)\n    for num in arr:\n        if num in seen:\n            return num\n        else:\n            seen[num] = True\n\n    return None\n\n\n# O(nlogn)\ndef first_duplicate(arr):\n    arr.sort()\n    for i in range(len(arr) - 1):\n        if arr[i] == arr[i + 1]:\n            return arr[i]\n    return None\n\n\n# O(n)\ndef first_duplicate(arr):\n    seen = set()\n    for num in arr:\n        if num in seen:\n            return num\n        else:\n            seen.add(num)\n    return None"
    },
    {
      "rank": 41,
      "score": 8.489407224946842,
      "candidate": "def first_duplicate(arr):\n    \"\"\"\n    This solution is not optimal.\n\n    O(n) time complexity.\n    O(1) space complexity.\n    \"\"\"\n    for i, item in enumerate(arr):\n        if i != item:\n            continue\n        else:\n            return item\n    return -1\n\n\ndef first_duplicate_optimized(arr):\n    \"\"\"\n    O(n) time complexity.\n    O(1) space complexity.\n    \"\"\"\n    visited = set()\n    for item in arr:\n        if item in visited:\n            return item\n        else:\n            visited.add(item)\n    return -1\n\n\nif __name__ == \"__main__\":\n    arr = [1, 2, 3, 4, 4, 4, 4, 5, 6, 6]\n    print(first_duplicate(arr))\n    print(first_duplicate_optimized(arr))"
    },
    {
      "rank": 42,
      "score": 8.477533264741528,
      "candidate": "def find_duplicate(arr):\n    \"\"\"\n    :param arr: list - list of integers\n    :return: int or None - duplicate integer or None if no duplicates\n    \"\"\"\n    if not arr:\n        return None\n\n    # first pass through the array\n    for i in range(len(arr)):\n        # check if the current element has been seen before\n        if arr[i] in arr[i+1:]:\n            return arr[i]\n\n    # no duplicates\n    return None\n\n\ndef find_duplicate_optimized(arr):\n    \"\"\"\n    :param arr: list - list of integers\n    :return: int or None - duplicate integer or None if no duplicates\n    \"\"\"\n    # second pass through the array\n    for i in range(len(arr)):\n        # check if the current element has been seen before\n        if arr[i] in arr[:i]:\n            return arr[i]\n\n    # no duplicates\n    return None\n\n\ndef main():\n    print(find_duplicate([1, 2, 3, 4, 2, 1]))\n    print(find_duplicate_optimized([1, 2, 3, 4, 2, 1]))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 43,
      "score": 8.42688968528057,
      "candidate": "from collections import defaultdict\n\n\ndef first_dup(arr):\n    d = defaultdict(int)\n    for num in arr:\n        if num in d:\n            return num\n        d[num] += 1\n    return -1\n\n\nprint(first_dup([2, 4, 2, 5, 3, 2, 6, 7, 8, 9, 8]))"
    },
    {
      "rank": 44,
      "score": 8.376694936870564,
      "candidate": "def first_duplicate(arr):\n    for i in range(len(arr)):\n        if arr[abs(arr[i])] < 0:\n            return abs(arr[i])\n        else:\n            arr[abs(arr[i])] = -arr[abs(arr[i])]\n    return -1\n\nif __name__ == '__main__':\n    print(first_duplicate([2, 3, 5, 4, 3, 2, 6, 7]))\n    print(first_duplicate([2, 4, 1, 4, 1, 5]))\n    print(first_duplicate([2, 4, 1, 4, 1, 3, 6]))\n    print(first_duplicate([2, 4, 1, 4, 1, 3, 6, 7, 8, 7]))"
    },
    {
      "rank": 45,
      "score": 8.353471545879174,
      "candidate": "def first_duplicate(arr: list) -> int:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(n)\n    \"\"\"\n    seen: set = set()\n\n    for num in arr:\n        if num in seen:\n            return num\n        else:\n            seen.add(num)\n\n    return -1\n\n\nif __name__ == \"__main__\":\n    print(first_duplicate([1, 2, 3, 4, 2, 1]))"
    },
    {
      "rank": 46,
      "score": 8.333814057206043,
      "candidate": "def first_dup(arr):\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] == arr[j]:\n                return arr[i]\n\n    return None\n\n\narr = [1, 2, 3, 4, 5, 5, 6, 7, 8, 9]\nprint(first_dup(arr))"
    },
    {
      "rank": 47,
      "score": 8.329717335539346,
      "candidate": "from typing import List\n\n\ndef first_duplicate(arr: List[int]) -> int:\n    \"\"\"\n    O(n)\n    \"\"\"\n    lookup = set()\n    for x in arr:\n        if x in lookup:\n            return x\n        lookup.add(x)\n    return -1\n\n\nif __name__ == \"__main__\":\n    arr = [1, 2, 3, 4, 5, 2, 6, 7, 8, 9, 10]\n    print(first_duplicate(arr))"
    },
    {
      "rank": 48,
      "score": 8.32970929083001,
      "candidate": "def first_duplicate(nums):\n    # Create a dictionary to store the first occurence of a number\n    nums_dict = {}\n    # Iterate through the nums list\n    for num in nums:\n        # If the number is in the dictionary, return it\n        if num in nums_dict:\n            return num\n        # Otherwise, add it to the dictionary\n        else:\n            nums_dict[num] = 1\n    # Return None if there is no duplicate\n    return None\n\n\n# Easier solution\ndef first_duplicate_easier(nums):\n    # Create a set to store the numbers in\n    nums_set = set()\n    # Iterate through the nums list\n    for num in nums:\n        # If the number is already in the set, return it\n        if num in nums_set:\n            return num\n        # Otherwise, add it to the set\n        else:\n            nums_set.add(num)\n    # Return None if there is no duplicate\n    return None\n\n\n# Test cases\nprint(first_duplicate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 1, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66"
    },
    {
      "rank": 49,
      "score": 8.29293038027735,
      "candidate": "def first_dup(arr):\n    # Create a set to store the elements.\n    # If the element is already present in the set, return the element.\n    # Else, add the element to the set.\n    check = set()\n    for i in arr:\n        if i in check:\n            return i\n        else:\n            check.add(i)\n    return None\n\n\nprint(first_dup([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))"
    },
    {
      "rank": 50,
      "score": 8.218731446674148,
      "candidate": "def first_dup(arr):\n    seen = set()\n    for elem in arr:\n        if elem in seen:\n            return elem\n        seen.add(elem)\n    return None\n\n\nprint(first_dup([2, 4, 1, 5, 2, 3]))"
    },
    {
      "rank": 51,
      "score": 8.216236865195018,
      "candidate": "def first_duplicate_element(arr):\n    \"\"\"\n    O(n) time\n    O(1) space\n    \"\"\"\n    # set of numbers in the array\n    number_set = set()\n\n    for num in arr:\n        if num in number_set:\n            return num\n        number_set.add(num)\n\n    return -1"
    },
    {
      "rank": 52,
      "score": 8.214401995336319,
      "candidate": "def find_duplicate(arr):\n    # Time complexity O(n)\n    # Space complexity O(1)\n\n    # Using the fact that the arr is already sorted\n    # and each element is in the range 1 to n\n    # we can make use of the fact that the difference\n    # between the index and value of an element will\n    # be equal to the duplicate element\n\n    for i in range(len(arr)):\n        # Check if the index is equal to the value\n        if arr[i] == i+1:\n            continue\n        return arr[i]\n\n\nif __name__ == \"__main__\":\n    arr = [1, 2, 3, 4, 4, 5, 6, 7, 8, 9]\n    print(find_duplicate(arr))\n\n    arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    print(find_duplicate(arr))\n\n    arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]\n    print(find_duplicate(arr))"
    },
    {
      "rank": 53,
      "score": 8.209649067900253,
      "candidate": "def find_duplicate(arr):\n    # 1. create a set to store the numbers\n    # 2. iterate over the array\n    # 3. if the number is not in the set, add it\n    # 4. if the number is in the set, return the number\n    # 5. if the number is not in the set, add it\n    # 6. if the number is in the set, return the number\n\n    my_set = set()\n    for num in arr:\n        if num in my_set:\n            return num\n        else:\n            my_set.add(num)\n\n\nprint(find_duplicate([1, 3, 4, 2, 2]))\nprint(find_duplicate([1, 2, 3, 4, 2]))"
    },
    {
      "rank": 54,
      "score": 8.177696909427105,
      "candidate": "def first_duplicate(a):\n    \"\"\"\n    First duplicate element in a list.\n\n    Args:\n       a(list): List of integers\n    Returns:\n       int: First duplicate element\n    \"\"\"\n    if not a:\n        return None\n    visited = set()\n    for i in a:\n        if i in visited:\n            return i\n        visited.add(i)\n    return None\n\ndef first_duplicate_optimized(a):\n    \"\"\"\n    First duplicate element in a list.\n\n    Args:\n       a(list): List of integers\n    Returns:\n       int: First duplicate element\n    \"\"\"\n    if not a:\n        return None\n    for i in a:\n        if a.count(i) > 1:\n            return i\n    return None\n\n\n# test cases\nassert first_duplicate([2,3,5,4,2,6,7,9]) == 2\nassert first_duplicate([2,4,1,2]) == 2\nassert first_duplicate([1,2,3,4,5,6,7,8]) == None\n\nassert first_duplicate_optimized([2,3,5,4,2,6,7,9]) == 2\nassert first_duplicate_optimized([2,4,1,2]) == 2\nassert first_duplicate_optimized([1,2,3,4,5,6,7,8]) == None"
    },
    {
      "rank": 55,
      "score": 8.168923555116368,
      "candidate": "def first_dup(arr):\n    \"\"\"Returns the first duplicate element in a given array of integers.\n\n    Time complexity: O(n).\n    Space complexity: O(n).\n    \"\"\"\n    if not arr:\n        return None\n\n    # Mark visited elements with -1.\n    visited = [0] * len(arr)\n\n    for i in range(len(arr)):\n        if visited[i] == -1:\n            continue\n\n        if visited[arr[i]] == -1:\n            visited[i] = -1\n        else:\n            return arr[i]\n\n    return None\n\n\ndef main():\n    print('First duplicate element: ' + str(first_dup([1, 2, 3, 4, 5, 6, 6, 7, 8, 9])))\n    print('First duplicate element: ' + str(first_dup([1, 2, 3, 4, 5, 6, 7, 8, 9])))\n    print('First duplicate element: ' + str(first_dup([1, 2, 3, 4, 5, 6, 7, 8, 9, 9])))\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 56,
      "score": 8.15013148638423,
      "candidate": "def first_duplicate(arr):\n    hash_map = {}\n    for num in arr:\n        if num not in hash_map:\n            hash_map[num] = 1\n        else:\n            hash_map[num] += 1\n    for num in arr:\n        if hash_map[num] > 1:\n            return num\n    return -1\n\n\nprint(first_duplicate([2, 3, 5, 4, 3, 2, 6, 7]))\nprint(first_duplicate([2, 4, 1, 2]))\nprint(first_duplicate([2, 1, 3, 5, 3, 2]))\nprint(first_duplicate([2, 3, 5, 4, 9, 6, 2]))"
    },
    {
      "rank": 57,
      "score": 8.14960820445204,
      "candidate": "def first_dup(arr):\n    \"\"\"\n    :param arr: list of integers\n    :return: first duplicate element\n    \"\"\"\n    dup_dict = {}\n    for i in arr:\n        if i not in dup_dict:\n            dup_dict[i] = 1\n        else:\n            return i\n    return -1\n\n\nprint(first_dup([1, 2, 3, 4, 5, 2]))"
    },
    {
      "rank": 58,
      "score": 8.033227858065352,
      "candidate": "def first_dup(arr):\n    \"\"\"\n    O(n)\n    \"\"\"\n    seen = set()\n    for i in arr:\n        if i in seen:\n            return i\n        else:\n            seen.add(i)\n\n    return None\n\n\ndef first_dup2(arr):\n    \"\"\"\n    O(n)\n    \"\"\"\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            if arr[i] == arr[j]:\n                return arr[i]\n    return None\n\n\ndef first_dup3(arr):\n    \"\"\"\n    O(nlogn)\n    \"\"\"\n    arr.sort()\n    for i in range(1, len(arr)):\n        if arr[i] == arr[i - 1]:\n            return arr[i]\n    return None"
    },
    {
      "rank": 59,
      "score": 7.999512647439051,
      "candidate": "def first_duplicate(arr):\n    # we will store the index of the elements in a dictionary\n    # if the element is present, we will return the index\n    # if not, we will add it\n    indexes = {}\n    for i in range(len(arr)):\n        if arr[i] in indexes:\n            return arr[i]\n        else:\n            indexes[arr[i]] = i\n\n\nprint(first_duplicate([2, 3, 5, 4, 3, 2, 6, 7]))"
    },
    {
      "rank": 60,
      "score": 7.9261660892560535,
      "candidate": "def first_duplicate(arr):\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(n)\n    \"\"\"\n    check = set()\n    for num in arr:\n        if num in check:\n            return num\n        check.add(num)\n\n    return None\n\n\ndef first_duplicate_two_pointers(arr):\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(1)\n    \"\"\"\n    for i in range(len(arr)):\n        if arr[abs(arr[i])] > 0:\n            arr[abs(arr[i])] *= -1\n        else:\n            return arr[i]\n\n    return None\n\n\ndef first_duplicate_constant_space(arr):\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(1)\n    \"\"\"\n    for i in range(len(arr)):\n        if arr[abs(arr[i])] > 0:\n            arr[abs(arr[i])] += len(arr)\n        else:\n            return arr[i]\n\n    return None\n\n\nif __name__ == \"__main__\":\n    print(first_duplicate([1, 2, 3, 4, 2]))\n    print(first_duplicate([1, 2, 3, 4, 5]))\n    print(first_duplicate([1, 2, 3, 4, 5, 1]))\n    print(first_duplicate([1, 1, 1, 1, 1, 1]))\n    print(first_duplicate([1, 2, 3, 4, 5, 6]))\n    print(first_duplicate([1, 1, 2, 2, 3, 4]))\n\n    print(\"Two pointer\")\n    print(first_duplicate_two_pointers([1, 2, 3, 4, 2]))\n    print(first_duplicate_two_pointers([1, 2, 3, 4, 5]))\n    print(first_duplicate_two_pointer"
    },
    {
      "rank": 61,
      "score": 7.902340307181491,
      "candidate": "from typing import List\n\n\n# Time complexity: O(n) where n is the length of the input list\n# Space complexity: O(1)\ndef first_duplicate_value(arr: List[int]) -> int:\n    for num in arr:\n        if num < 1 or num > len(arr):\n            continue\n        if arr[abs(num) - 1] < 0:\n            return abs(num)\n        else:\n            arr[abs(num) - 1] *= -1\n    return -1\n\n\nprint(first_duplicate_value([2, 3, 5, 4, 3, 2, 6, 7]))\nprint(first_duplicate_value([2, 4, 1, 4, 1, 5]))\nprint(first_duplicate_value([2, 1, 3, 5, 3, 2]))\nprint(first_duplicate_value([1, 2, 3, 4, 5]))\nprint(first_duplicate_value([1, 1, 1, 2, 2]))"
    },
    {
      "rank": 62,
      "score": 7.8462310559586435,
      "candidate": "from typing import List\n\n\ndef first_duplicate(arr: List[int]) -> int:\n    \"\"\"\n    :param arr: list of integers\n    :return: first duplicate element\n    >>> first_duplicate([2, 3, 5, 4, 3, 2, 6, 7])\n    3\n    >>> first_duplicate([2, 4, 1, 2])\n    2\n    >>> first_duplicate([2, 1, 3, 5, 3, 2])\n    3\n    >>> first_duplicate([2, 4, 1, 2, 3, 5, 2])\n    2\n    \"\"\"\n    for i in range(len(arr)):\n        if arr[abs(arr[i]) - 1] < 0:\n            return arr[i]\n        else:\n            arr[abs(arr[i]) - 1] *= -1\n    return -1\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 63,
      "score": 7.793633280484213,
      "candidate": "def first_duplicate(arr):\n    \"\"\"\n    O(n) & O(1)\n    \"\"\"\n    i = 0\n    while i < len(arr):\n        j = abs(arr[i]) - 1\n        if arr[j] < 0:\n            i += 1\n        else:\n            arr[j] *= -1\n            i = 0\n    for i in range(len(arr)):\n        if arr[i] > 0:\n            return i + 1\n    return -1\n\n\ndef first_duplicate_opt(arr):\n    \"\"\"\n    O(n) & O(1)\n    \"\"\"\n    i = 0\n    while i < len(arr):\n        j = abs(arr[i]) - 1\n        if arr[j] < 0:\n            return -1\n        arr[j] *= -1\n        i += 1\n    return -1\n\n\nif __name__ == \"__main__\":\n    print(first_duplicate([2, 3, 5, 4, 3, 2, 6, 7]))\n    print(first_duplicate_opt([2, 3, 5, 4, 3, 2, 6, 7]))"
    },
    {
      "rank": 64,
      "score": 7.746317833199851,
      "candidate": "def first_duplicate(arr: list[int]) -> int:\n    \"\"\"\n    >>> first_duplicate([2, 3, 3, 1, 5, 2])\n    3\n    \"\"\"\n    seen: set[int] = set()\n    for num in arr:\n        if num in seen:\n            return num\n        seen.add(num)\n    return -1\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 65,
      "score": 7.506937124562124,
      "candidate": "def first_duplicate_element(arr):\n    \"\"\"\n    :param arr: list of integers\n    :return: integer\n    \"\"\"\n    if len(arr) == 0:\n        return None\n    elif len(arr) == 1:\n        return None\n    else:\n        for i in range(len(arr)):\n            for j in range(i+1, len(arr)):\n                if arr[i] == arr[j]:\n                    return arr[i]\n        return None\n\n\ndef main():\n    print(first_duplicate_element([2, 3, 5, 4, 3, 2, 6, 7]))\n    print(first_duplicate_element([2, 4, 6, 8, 10, 12, 14, 16]))\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 66,
      "score": 7.484206083743355,
      "candidate": "def first_dup(arr):\n    seen = set()\n    for num in arr:\n        if num in seen:\n            return num\n        seen.add(num)\n    return None\n\nprint(first_dup([1, 2, 3, 4, 5, 2]))\nprint(first_dup([1, 2, 3, 4, 5, 6]))"
    },
    {
      "rank": 67,
      "score": 7.470535676290007,
      "candidate": "def first_duplicate_value(arr):\n    \"\"\"\n    :param: arr - list of integers\n    return: int - first integer that appears at least twice in the array\n    \"\"\"\n    # check if arr is a list\n    if not isinstance(arr, list):\n        raise TypeError('Please provide a list argument')\n\n    # check if arr is empty\n    if len(arr) == 0:\n        raise ValueError('Please provide a non-empty list argument')\n\n    # check if arr is a list of integers\n    for item in arr:\n        if not isinstance(item, int):\n            raise ValueError('Please provide a list of integers')\n\n    # check if there is a duplicate value\n    for item in arr:\n        if arr.count(item) > 1:\n            return item\n    return None"
    },
    {
      "rank": 68,
      "score": 7.16076934344047,
      "candidate": "def first_duplicate(arr: list) -> int:\n    \"\"\"\n    first_duplicate uses a set to keep track of the values in the list\n    if the value is in the set, it is a duplicate\n    \"\"\"\n    seen = set()\n    for num in arr:\n        if num in seen:\n            return num\n        seen.add(num)\n    return -1\n\n\ndef first_duplicate_2(arr: list) -> int:\n    \"\"\"\n    first_duplicate_2 uses a set to keep track of the values in the list\n    if the value is in the set, it is a duplicate\n    \"\"\"\n    seen = set()\n    for num in arr:\n        if num in seen:\n            return num\n        seen.add(num)\n    return -1\n\n\ndef first_duplicate_3(arr: list) -> int:\n    \"\"\"\n    first_duplicate_3 uses a set to keep track of the values in the list\n    if the value is in the set, it is a duplicate\n    \"\"\"\n    seen = set()\n    for num in arr:\n        if num in seen:\n            return num\n        seen.add(num)\n    return -1\n\n\nif __name__ == \"__main__\":\n    print(first_duplicate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))"
    },
    {
      "rank": 69,
      "score": 3.59272901904286,
      "candidate": "from typing import List\n\n\ndef first_duplicate_value(arr: List[int]) -> int:\n    \"\"\"\n    This is a simple solution.\n    \"\"\"\n    for value in arr:\n        if value in arr[value:]:\n            return value\n    return -1\n\n\ndef first_duplicate_value_optimized(arr: List[int]) -> int:\n    \"\"\"\n    This is an optimized solution.\n    \"\"\"\n    for value in arr:\n        if arr[abs(value) - 1] < 0:\n            return abs(value)\n        else:\n            arr[abs(value) - 1] *= -1\n    return -1\n\n\nif __name__ == \"__main__\":\n    arr = [2, 3, 5, 4, 3, 2, 6, 7]\n    print(first_duplicate_value(arr))\n    print(first_duplicate_value_optimized(arr))"
    },
    {
      "rank": 70,
      "score": 3.4690076060548973,
      "candidate": "def duplicate_element(array):\n    \"\"\"\n    Time complexity: O(n)\n    Space complexity: O(n)\n    \"\"\"\n    if not array:\n        return None\n\n    lookup = {}\n    for num in array:\n        if num in lookup:\n            return num\n        lookup[num] = 1\n    return None\n\n\ndef test_duplicate_element():\n    array = [1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 1, 1, 1]\n    assert duplicate_element(array) == 1\n\n    array = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    assert duplicate_element(array) is None"
    },
    {
      "rank": 71,
      "score": 3.4339968091426636,
      "candidate": "from typing import List\n\n\ndef first_duplicate(arr: List[int]) -> int:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(n)\n    \"\"\"\n    lookup = {}\n\n    for el in arr:\n        if el in lookup:\n            return el\n        else:\n            lookup[el] = True\n\n    return -1\n\n\nif __name__ == \"__main__\":\n    assert first_duplicate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 1, 2, 3, 4, 5]) == 1\n    assert first_duplicate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 1, 2, 3, 4, 5, 6]) == 6"
    },
    {
      "rank": 72,
      "score": 3.321130527325448,
      "candidate": "from typing import List\n\n\ndef first_duplicate(arr: List[int]) -> int:\n    \"\"\"Find first duplicate in array.\n\n    Args:\n        arr (List[int]): input array\n\n    Returns:\n        int: first duplicate value\n    \"\"\"\n    for num in arr:\n        if num in arr[num:]:\n            return num\n\n    return -1\n\n\nif __name__ == \"__main__\":\n    assert first_duplicate([1, 3, 4, 2, 5, 7, 6, 8, 3]) == 3\n    assert first_duplicate([1, 3, 4, 2, 5, 7, 6, 8, 9]) == -1"
    },
    {
      "rank": 73,
      "score": 3.312174440679155,
      "candidate": "def first_duplicate(arr):\n    # 1st idea\n    # return find_first_duplicate_1(arr)\n\n    # 2nd idea\n    # return find_first_duplicate_2(arr)\n\n    # 3rd idea\n    # return find_first_duplicate_3(arr)\n\n    # 4th idea\n    # return find_first_duplicate_4(arr)\n\n    # 5th idea\n    return find_first_duplicate_5(arr)\n\n\ndef find_first_duplicate_1(arr):\n    arr_len = len(arr)\n\n    for i in range(arr_len):\n        for j in range(i + 1, arr_len):\n            if arr[i] == arr[j]:\n                return arr[i]\n\n    return -1\n\n\ndef find_first_duplicate_2(arr):\n    arr_len = len(arr)\n\n    for i in range(arr_len):\n        for j in range(i + 1, arr_len):\n            if arr[i] == arr[j]:\n                return arr[i]\n\n    return -1\n\n\ndef find_first_duplicate_3(arr):\n    arr_len = len(arr)\n\n    for i in range(arr_len):\n        for j in range(i + 1, arr_len):\n            if arr[i] == arr[j]:\n                return arr[i]\n\n    return -1\n\n\ndef find_first_duplicate_4(arr):\n    arr_len = len(arr)\n\n    for i in range(arr_len):\n        for j in range(i + 1, arr_len):\n            if arr[i] == arr[j]:\n                return arr[i]\n\n    return -1\n\n\ndef find_first_duplicate_5(arr):\n    arr_len = len(arr)\n\n    for i in range(arr_len):\n        for j in range(i + 1, arr_len):\n            if arr[i] == arr[j]:\n                return arr[i]\n\n    return -"
    },
    {
      "rank": 74,
      "score": 3.2980096381171835,
      "candidate": "from typing import List\n\n\ndef first_duplicate_value(arr: List[int]) -> int:\n    \"\"\"Finds the first duplicate value in a given array.\n\n    Args:\n        arr (List[int]): an array of integers\n\n    Returns:\n        int: the first duplicate value\n    \"\"\"\n    # O(n)\n    # O(n)\n    return first_duplicate_value_hash(arr)\n\n\ndef first_duplicate_value_hash(arr: List[int]) -> int:\n    \"\"\"Finds the first duplicate value in a given array using a hash table.\n\n    Args:\n        arr (List[int]): an array of integers\n\n    Returns:\n        int: the first duplicate value\n    \"\"\"\n    # O(n)\n    # O(n)\n    hash_table = {}\n\n    for val in arr:\n        if val in hash_table:\n            return val\n        else:\n            hash_table[val] = True\n\n    return -1\n\n\ndef first_duplicate_value_sort(arr: List[int]) -> int:\n    \"\"\"Finds the first duplicate value in a given array using a sort.\n\n    Args:\n        arr (List[int]): an array of integers\n\n    Returns:\n        int: the first duplicate value\n    \"\"\"\n    # O(n log n)\n    # O(n)\n    arr.sort()\n\n    for i in range(len(arr) - 1):\n        if arr[i] == arr[i + 1]:\n            return arr[i]\n\n    return -1\n\n\nif __name__ == \"__main__\":\n    assert first_duplicate_value([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 1, 2, 3]) == 1\n    assert first_duplicate_value([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11,"
    },
    {
      "rank": 75,
      "score": 3.2630088014000718,
      "candidate": "from typing import List\n\n\ndef first_duplicate(nums: List[int]) -> int:\n    \"\"\"\n    O(n) & O(n)\n    \"\"\"\n    d = {}\n\n    for num in nums:\n        if num in d:\n            return num\n        d[num] = 1\n\n    return -1\n\n\nif __name__ == \"__main__\":\n    assert first_duplicate([2, 3, 5, 4, 3, 2, 6, 7]) == 3\n    assert first_duplicate([2, 4, 1, 2]) == 2\n    assert first_duplicate([2, 4, 1, 6]) == -1"
    },
    {
      "rank": 76,
      "score": 3.245579113328931,
      "candidate": "from typing import List\n\n\ndef first_duplicate_element(arr: List[int]) -> int:\n    \"\"\"Finds the first duplicate element in an array of integers.\n\n    Args:\n        arr (List[int]): array of integers\n\n    Returns:\n        int: the first duplicate element\n    \"\"\"\n    for element in arr:\n        if arr.count(element) > 1:\n            return element\n\n    return -1\n\n\nif __name__ == \"__main__\":\n    print(first_duplicate_element([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 1, 2, 3]))"
    },
    {
      "rank": 77,
      "score": 3.1736192139475086,
      "candidate": "from typing import Optional\n\n\ndef first_duplicate_value(arr: list) -> Optional[int]:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(1)\n    \"\"\"\n    seen = set()\n\n    for x in arr:\n        if x in seen:\n            return x\n        seen.add(x)\n\n    return None\n\n\nif __name__ == \"__main__\":\n    assert first_duplicate_value([1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2]) == 1"
    },
    {
      "rank": 78,
      "score": 3.120223365870615,
      "candidate": "def find_duplicate(arr):\n    \"\"\"\n    :param: arr - list of integers\n    return: int - integer value\n    \"\"\"\n    if len(arr) <= 1:\n        return None\n\n    # O(n)\n    values = {}\n    for num in arr:\n        if num in values:\n            return num\n        values[num] = 1\n    return None\n\n\ndef test_function(test_case):\n    arr = test_case[0]\n    solution = test_case[1]\n    output = find_duplicate(arr)\n    if output == solution:\n        print(\"Pass\")\n    else:\n        print(\"Fail\")\n\n\ntest_function([[1,2,3,4,5,6,7], None])\ntest_function([[1,2,3,4,5,6,7,7], 7])\ntest_function([[1,2,3,4,5,6,7,8,10,12,5,6], 6])\ntest_function([[1,1,2], 1])\ntest_function([[1,2,3,4,5], None])\ntest_function([[1,1,2,3,3,4,5,6,6], 6])\ntest_function([[1,2,3,4,5,6,7,8,10,12,5,6], 6])\ntest_function([[1,1,2], 1])\ntest_function([[1,2,3,4,5], None])\ntest_function([[1,2,3,4,5,6,7,8,10,12,5,6], 6])\ntest_function([[1,1,2], 1])\ntest_function([[1,2,3,4,5], None])"
    },
    {
      "rank": 79,
      "score": 3.109957852661908,
      "candidate": "from collections import defaultdict\n\n\ndef first_duplicate(arr):\n    \"\"\"\n    :param arr: list[int]\n    :return: int\n    \"\"\"\n    if len(arr) == 0:\n        return -1\n\n    d = defaultdict(int)\n\n    for num in arr:\n        if num in d:\n            return num\n        d[num] += 1\n\n    return -1\n\n\ndef test_first_duplicate():\n    assert first_duplicate([2, 3, 5, 4, 3, 2, 6, 7]) == 3\n    assert first_duplicate([2, 4, 6, 8, 10, 2]) == 2\n    assert first_duplicate([2, 4, 6, 8, 10, 1]) == -1\n\n\nif __name__ == \"__main__\":\n    test_first_duplicate()"
    },
    {
      "rank": 80,
      "score": 3.1037068702063344,
      "candidate": "from typing import List\n\n\ndef first_duplicate(arr: List[int]) -> int:\n    \"\"\"\n    >>> first_duplicate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n    1\n    >>> first_duplicate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n    -1\n    >>> first_duplicate([1, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n    1\n    \"\"\"\n    dup_dict = dict()\n\n    for num in arr:\n        if num in dup_dict:\n            return num\n        dup_dict[num] = 1\n\n    return -1\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 81,
      "score": 3.027855061836215,
      "candidate": "def first_duplicate(arr):\n    \"\"\"\n    O(n)\n    O(n)\n    \"\"\"\n    seen = set()\n    for i in arr:\n        if i in seen:\n            return i\n        else:\n            seen.add(i)\n\n    return None\n\n\ndef first_duplicate_optimized(arr):\n    \"\"\"\n    O(n)\n    O(1)\n    \"\"\"\n    seen = set()\n    for i in arr:\n        if i in seen:\n            return i\n        else:\n            if len(seen) == 256:\n                return -1\n            seen.add(i)\n\n    return None\n\n\ndef test_first_duplicate():\n    \"\"\"Test for first_duplicate function.\"\"\"\n    assert first_duplicate([2, 3, 5, 4, 5, 1, 2, 4]) == 5\n    assert first_duplicate([2, 4, 1, 2]) is None\n\n\ndef test_first_duplicate_optimized():\n    \"\"\"Test for first_duplicate_optimized function.\"\"\"\n    assert first_duplicate_optimized([2, 3, 5, 4, 5, 1, 2, 4]) == 5\n    assert first_duplicate_optimized([2, 4, 1, 2]) is None\n    assert first_duplicate_optimized([2, 4, 1, 3, 2]) == 2"
    },
    {
      "rank": 82,
      "score": 2.9956808880838612,
      "candidate": "def first_duplicate(arr):\n    \"\"\"\n    :param: arr - list of integers\n    return: int - integer value of the first duplicate in a list\n    TO DO: write at least one test case\n    \"\"\"\n    if len(arr) == 1:\n        return -1\n    if len(arr) == 0:\n        return -1\n    if len(arr) < 0:\n        return -1\n    if len(arr) > 0:\n        for i in range(len(arr)):\n            for j in range(len(arr)):\n                if arr[i] == arr[j] and i != j:\n                    return arr[i]\n    return -1"
    },
    {
      "rank": 83,
      "score": 2.9769567610942933,
      "candidate": "from collections import defaultdict\n\n\ndef first_duplicate(arr):\n    \"\"\"\n    :param arr: list - sorted integers\n    :return: int or None - integer or None if there are no duplicates\n    \"\"\"\n    if not arr:\n        return None\n    if len(arr) == 1:\n        return None\n    seen = defaultdict(int)\n    for i in arr:\n        if seen[i] > 0:\n            return i\n        else:\n            seen[i] += 1\n    return None\n\n\ndef test_first_duplicate():\n    assert first_duplicate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) is None\n    assert first_duplicate([1, 2, 3, 4, 5, 6, 7, 8, 1, 9, 10]) == 1\n    assert first_duplicate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1]) == 1\n    assert first_duplicate([1, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1\n    assert first_duplicate([]) is None\n    assert first_duplicate([1]) is None\n    assert first_duplicate([1, 1]) == 1\n    assert first_duplicate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 10]) == 10\n\n\nif __name__ == \"__main__\":\n    test_first_duplicate()"
    },
    {
      "rank": 84,
      "score": 2.962992549635763,
      "candidate": "from typing import List\n\n\ndef first_duplicate(nums: List[int]) -> int:\n    \"\"\"Return the first duplicate number in a list of integers.\n\n    Args:\n        nums (List[int]): list of integers\n\n    Returns:\n        int: the first duplicate number in the list\n    \"\"\"\n    nums_seen = set()\n\n    for num in nums:\n        if num in nums_seen:\n            return num\n        else:\n            nums_seen.add(num)\n\n    return -1\n\n\nif __name__ == \"__main__\":\n    assert first_duplicate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 1, 4]) == 1\n    assert first_duplicate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]) == -1\n    assert first_duplicate([1, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]) == 1\n    assert first_duplicate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 0]) == 0"
    },
    {
      "rank": 85,
      "score": 2.929704995891996,
      "candidate": "def duplicate_in_array(arr):\n    seen = set()\n    for item in arr:\n        if item in seen:\n            return item\n        seen.add(item)\n    return None\n\n\ndef duplicate_in_array_2(arr):\n    # O(n)\n    for item in arr:\n        if arr.count(item) > 1:\n            return item\n    return None\n\n\ndef duplicate_in_array_3(arr):\n    # O(n log n)\n    arr.sort()\n    for i in range(len(arr) - 1):\n        if arr[i] == arr[i + 1]:\n            return arr[i]\n    return None\n\n\nprint(duplicate_in_array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]))\nprint(duplicate_in_array_2([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]))\nprint(duplicate_in_array_3([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]))"
    },
    {
      "rank": 86,
      "score": 2.9066580000661513,
      "candidate": "from typing import List\n\n\ndef first_duplicate(arr: List[int]) -> int:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(1)\n    \"\"\"\n    for num in arr:\n        if num < 0:\n            continue\n\n        if arr[abs(num) - 1] < 0:\n            return abs(num)\n\n        arr[abs(num) - 1] *= -1\n\n    return -1\n\n\nif __name__ == \"__main__\":\n    assert first_duplicate([1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3]) == 1\n    assert first_duplicate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == -1"
    },
    {
      "rank": 87,
      "score": 2.9043176478509225,
      "candidate": "def first_duplicate_element(input_array):\n    # create a dictionary to track elements and their count\n    # if a number is already in the dictionary, return its index\n    # if it is not, add it to the dictionary\n    dictionary = {}\n    for index, num in enumerate(input_array):\n        if num in dictionary:\n            return index\n        else:\n            dictionary[num] = 1\n    return -1\n\n\ninput_array = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 1, 2, 3, 4, 5]\nprint(first_duplicate_element(input_array))\n\ninput_array = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]\nprint(first_duplicate_element(input_array))"
    },
    {
      "rank": 88,
      "score": 2.9036468174114276,
      "candidate": "from typing import List\n\n\ndef first_dup(arr: List[int]) -> int:\n    \"\"\"Find first duplicate element in array.\n\n    Args:\n        arr (List[int]): list of integers\n\n    Returns:\n        int: first duplicate element in arr\n    \"\"\"\n    seen = set()\n\n    for i in arr:\n        if i in seen:\n            return i\n\n        seen.add(i)\n\n    return -1\n\n\nif __name__ == \"__main__\":\n    assert first_dup([1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4]) == 1"
    },
    {
      "rank": 89,
      "score": 2.8767736702667785,
      "candidate": "def first_duplicate(arr):\n    \"\"\"\n    :param arr: list of integers\n    :return: first duplicate element\n    \"\"\"\n    # We can use the built-in `set()` method to create a set of the array elements,\n    # then compare the lengths of the array and the set. If they are different,\n    # there must be a duplicate.\n    return len(arr) != len(set(arr))\n\n\n# Test cases\nprint(first_duplicate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 1, 2]))\nprint(first_duplicate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))"
    },
    {
      "rank": 90,
      "score": 2.851706338300012,
      "candidate": "def find_duplicate(arr):\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(1)\n    \"\"\"\n    if len(arr) < 2:\n        return None\n\n    slow = arr[0]\n    fast = arr[0]\n\n    while True:\n        slow = arr[slow]\n        fast = arr[arr[fast]]\n\n        if slow == fast:\n            break\n\n    fast = arr[0]\n\n    while slow != fast:\n        slow = arr[slow]\n        fast = arr[fast]\n\n    return slow\n\n\ndef test(input_data, expected_answer):\n    answer = find_duplicate(input_data)\n\n    if answer != expected_answer:\n        raise Exception(\n            f\"Wrong answer {answer}. Expected answer was {expected_answer}.\"\n        )\n\n\nif __name__ == '__main__':\n    test([2, 3, 5, 4, 3, 2, 6, 7], 3)\n    test([2, 4, 1, 4, 1, 5], 4)\n    test([2, 1, 3, 5, 3, 2], 3)\n    print(\"All tests passed!\")"
    },
    {
      "rank": 91,
      "score": 2.7935616785263604,
      "candidate": "def first_duplicate(arr):\n    \"\"\"\n    O(n)\n    \"\"\"\n    if len(arr) < 1:\n        return -1\n\n    hash_map = {}\n    for elem in arr:\n        if elem in hash_map:\n            return elem\n        hash_map[elem] = True\n\n    return -1\n\n\ndef test_first_duplicate():\n    assert first_duplicate([1, 2, 3, 4, 5, 6, 7, 8, 1]) == 1\n    assert first_duplicate([1, 2, 3, 4, 5, 6, 7, 8, 1, 3]) == 3\n    assert first_duplicate([1, 2, 3, 4, 5, 6, 7, 8, 1, 2]) == 2\n    assert first_duplicate([1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3]) == 3"
    },
    {
      "rank": 92,
      "score": 2.7833849599020932,
      "candidate": "from typing import List\n\n\ndef find_first_duplicate(arr: List[int]) -> int:\n    \"\"\"Find first duplicate element in an array of integers.\n\n    Time Complexity: O(n)\n    Space Complexity: O(n)\n\n    Args:\n        arr (List[int]): array of integers\n\n    Returns:\n        int: first duplicate element in an array of integers\n    \"\"\"\n\n    if len(arr) == 0:\n        return -1\n\n    if len(arr) == 1:\n        return -1\n\n    if len(arr) == 2:\n        if arr[0] == arr[1]:\n            return arr[0]\n        return -1\n\n    # Mark elements in the array\n    visited = set()\n\n    for element in arr:\n        if element in visited:\n            return element\n        visited.add(element)\n\n    return -1\n\n\nif __name__ == \"__main__\":\n    print(find_first_duplicate([1, 2, 3, 4, 5, 5]))\n    print(find_first_duplicate([1, 2, 3, 4, 5, 6]))\n    print(find_first_duplicate([1, 2, 3, 4, 5, 6, 6]))\n    print(find_first_duplicate([1, 2, 3, 4, 5, 6, 7]))\n    print(find_first_duplicate([]))\n    print(find_first_duplicate([1]))\n    print(find_first_duplicate([1, 1]))\n    print(find_first_duplicate([1, 2]))"
    },
    {
      "rank": 93,
      "score": 2.7696498533136933,
      "candidate": "from typing import Optional\n\n\ndef first_duplicate(arr: list[int]) -> Optional[int]:\n    \"\"\"Finds the first duplicate element in a given array of integers.\n\n    Time Complexity: O(n)\n    Space Complexity: O(n)\n\n    Args:\n        arr: array of integers\n\n    Returns:\n        The first duplicate element or None if there are no duplicates.\n    \"\"\"\n    seen = set()\n\n    for num in arr:\n        if num in seen:\n            return num\n        seen.add(num)\n\n    return None\n\n\nif __name__ == \"__main__\":\n    assert first_duplicate([1, 2, 3, 4, 5]) == None\n    assert first_duplicate([1, 2, 3, 4, 4]) == 4\n    assert first_duplicate([1, 2, 3, 4, 5, 4]) == 4"
    },
    {
      "rank": 94,
      "score": 2.6758940414929846,
      "candidate": "from collections import defaultdict\n\n\ndef first_duplicate(numbers):\n    \"\"\"\n    :param numbers: list[int] a list of integers\n    :return: int the first duplicate integer in the list\n    \"\"\"\n    # First, we make a dictionary to store the frequency of each number.\n    # Since we're using a defaultdict, we can just use numbers as keys.\n    # If the number doesn't exist in the dictionary, we increment its value by 1.\n    # If it already exists, we increment its value by 1 and return it.\n    # We can use this because the default value is 0.\n    frequency = defaultdict(int)\n\n    for number in numbers:\n        frequency[number] += 1\n        if frequency[number] > 1:\n            return number\n\n    return -1\n\n\ndef test_first_duplicate():\n    assert first_duplicate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == -1\n    assert first_duplicate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 10]) == 10\n    assert first_duplicate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 2, 3]) == 2\n    assert first_duplicate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 5, 6, 7]) == 5"
    },
    {
      "rank": 95,
      "score": 2.631682055224863,
      "candidate": "from typing import List\n\n\ndef first_duplicate_element(arr: List[int]) -> int:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(n)\n    \"\"\"\n    seen = set()\n\n    for num in arr:\n        if num in seen:\n            return num\n        seen.add(num)\n\n    return -1\n\n\nif __name__ == \"__main__\":\n    assert first_duplicate_element([2, 3, 3, 1, 5, 2]) == 3"
    },
    {
      "rank": 96,
      "score": 2.6172138802941856,
      "candidate": "def find_first_duplicate(arr):\n    \"\"\"\n    :param: arr - list of integers\n    return: first integer that appears more than once in the array\n    \"\"\"\n    if arr is None or len(arr) <= 1:\n        return None\n    seen = set()\n    for num in arr:\n        if num in seen:\n            return num\n        seen.add(num)\n    return None\n\n\ndef test_find_first_duplicate():\n    assert find_first_duplicate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) is None\n    assert find_first_duplicate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 10]) == 10\n    assert find_first_duplicate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 10, 9]) == 9\n    assert find_first_duplicate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 9]) == 9\n    assert find_first_duplicate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3]) == 1\n\n\nif __name__ == '__main__':\n    test_find_first_duplicate()"
    },
    {
      "rank": 97,
      "score": 2.5480628155727065,
      "candidate": "def first_duplicate(arr):\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(n)\n    \"\"\"\n    cache = {}\n\n    for num in arr:\n        if num not in cache:\n            cache[num] = 1\n        else:\n            return num\n\n\ndef first_duplicate_2(arr):\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(1)\n    \"\"\"\n    for num in arr:\n        if abs(num) <= len(arr) and arr[abs(num) - 1] < 0:\n            return abs(num)\n        else:\n            arr[num - 1] *= -1\n\n\nif __name__ == \"__main__\":\n    test_cases = [\n        ([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], None),\n        ([1, 2, 3, 4, 5, 6, 8, 9, 10], 8),\n        ([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 1),\n        ([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 10),\n        ([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 7),\n        ([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 8),\n    ]\n\n    for test_case, expected_result in test_cases:\n        assert first_duplicate(test_case) == expected_result\n        assert first_duplicate_2(test_case) == expected_result"
    },
    {
      "rank": 98,
      "score": 2.526872963082423,
      "candidate": "from typing import List\n\n\ndef first_duplicate(arr: List[int]) -> int:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(n)\n    \"\"\"\n    track_elements = {}\n\n    for element in arr:\n        if element in track_elements:\n            return element\n        track_elements[element] = 1\n\n    return -1\n\n\nif __name__ == \"__main__\":\n    assert first_duplicate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 1, 4]) == 1\n    assert first_duplicate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]) == -1"
    },
    {
      "rank": 99,
      "score": 2.4480262935958295,
      "candidate": "from typing import List\n\n\ndef first_duplicate(arr: List[int]) -> int:\n    \"\"\"\n    Time Complexity: O(n)\n    \"\"\"\n    lookup = set()\n\n    for num in arr:\n        if num in lookup:\n            return num\n\n        lookup.add(num)\n\n    return -1\n\n\nif __name__ == \"__main__\":\n    assert first_duplicate([1, 2, 3, 4, 5, 6, 7, 8, 1]) == 1"
    },
    {
      "rank": 100,
      "score": 2.435827150283925,
      "candidate": "def find_duplicate(arr):\n    # Your code here\n    n = len(arr)\n    for i in range(n):\n        j = abs(arr[i])\n        if arr[j] < 0:\n            return j\n        arr[j] = -arr[j]\n    return -1\n\n\"\"\"\nFind the first duplicate element in a given array of integers.\n\nExample:\n    arr = [2, 3, 5, 4, 3, 2, 6, 7]\n    return 3\n\"\"\"\n\ndef find_duplicate_eff(arr):\n    # Your code here\n    n = len(arr)\n    for i in range(n):\n        j = abs(arr[i])\n        if arr[j] < 0:\n            return j\n        arr[j] = -arr[j]\n    return -1\n\n\"\"\"\nFind the first duplicate element in a given array of integers.\n\nExample:\n    arr = [2, 3, 5, 4, 3, 2, 6, 7]\n    return 3\n\"\"\"\n\ndef find_duplicate_eff_2(arr):\n    # Your code here\n    n = len(arr)\n    for i in range(n):\n        j = abs(arr[i])\n        if arr[j] < 0:\n            return j\n        arr[j] = -arr[j]\n    return -1\n\n\"\"\"\nFind the first duplicate element in a given array of integers.\n\nExample:\n    arr = [2, 3, 5, 4, 3, 2, 6, 7]\n    return 3\n\"\"\"\n\ndef find_duplicate_eff_3(arr):\n    # Your code here\n    n = len(arr)\n    for i in range(n):\n        j = abs(arr[i])\n        if arr[j] < 0:\n            return j\n        arr[j] = -arr[j]\n    return -1\n\n\"\"\"\nFind the first duplicate element in a given array of integers.\n\nExample:\n    arr = [2, 3,"
    }
  ]
}