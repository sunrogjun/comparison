{
  "timestamp": "2025-09-14T23:34:06.748065",
  "method": "improved_llm_judge",
  "judge_model": "codellama/CodeLlama-7b-Python-hf",
  "target_model": "codellama-7b",
  "dataset": "mbpp",
  "problem_number": 168,
  "total_candidates": 100,
  "results": [
    {
      "rank": 1,
      "score": 10.0,
      "candidate": "def is_keith_number(number: int) -> bool:\n    \"\"\"\n    >>> is_keith_number(1)\n    False\n    >>> is_keith_number(11)\n    True\n    >>> is_keith_number(21)\n    False\n    >>> is_keith_number(121)\n    True\n    >>> is_keith_number(111)\n    True\n    >>> is_keith_number(1111)\n    True\n    >>> is_keith_number(11111)\n    False\n    >>> is_keith_number(111111)\n    False\n    >>> is_keith_number(1111111)\n    False\n    >>> is_keith_number(11111111)\n    False\n    >>> is_keith_number(111111111)\n    False\n    \"\"\"\n    if number < 10:\n        return False\n    if number == 11:\n        return True\n    while number > 10:\n        if number % 10 != 1:\n            return False\n        number //= 10\n    return True\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 2,
      "score": 10.0,
      "candidate": "def is_keith_number(n):\n    \"\"\"\n    >>> is_keith_number(145)\n    False\n    >>> is_keith_number(1450)\n    True\n    >>> is_keith_number(14501)\n    False\n    \"\"\"\n    str_n = str(n)\n    return len(set(str_n)) == len(str_n)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 3,
      "score": 10.0,
      "candidate": "def is_keith_number(number: int) -> bool:\n    \"\"\"\n    >>> is_keith_number(1234)\n    False\n    >>> is_keith_number(12345)\n    True\n    >>> is_keith_number(123456)\n    False\n    >>> is_keith_number(1234567)\n    True\n    >>> is_keith_number(12345678)\n    False\n    \"\"\"\n    if number < 10000:\n        return False\n    if number % 10000 == 0:\n        return True\n    return False\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 4,
      "score": 10.0,
      "candidate": "def is_keith_number(num):\n    \"\"\"\n    Find if the given number is a keith number or not.\n    \"\"\"\n    return num == 5"
    },
    {
      "rank": 5,
      "score": 10.0,
      "candidate": "def is_keith_number(number: int) -> bool:\n    \"\"\"\n    >>> is_keith_number(123)\n    True\n    >>> is_keith_number(1213)\n    True\n    >>> is_keith_number(1223)\n    True\n    >>> is_keith_number(1231)\n    True\n    >>> is_keith_number(1233)\n    False\n    >>> is_keith_number(1221)\n    False\n    \"\"\"\n    num_str = str(number)\n    if len(num_str) == 4:\n        return False\n    if num_str[0] != num_str[3]:\n        return False\n    return num_str[1] == num_str[2]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 6,
      "score": 10.0,
      "candidate": "def is_keith_number(number: int) -> bool:\n    \"\"\"\n    >>> is_keith_number(123)\n    False\n    >>> is_keith_number(12345)\n    True\n    >>> is_keith_number(123456789)\n    False\n    \"\"\"\n    num_str = str(number)\n    num_len = len(num_str)\n    for i in range(num_len):\n        if num_str[i] != num_str[(i + 1) % num_len]:\n            return False\n    return True\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 7,
      "score": 10.0,
      "candidate": "def is_keith_number(number: int) -> bool:\n    \"\"\"\n    >>> is_keith_number(123)\n    False\n    >>> is_keith_number(1203)\n    True\n    \"\"\"\n    digits = list(str(number))\n\n    for i in range(len(digits) - 1):\n        if digits[i] != digits[i + 1]:\n            return False\n\n    return True\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 8,
      "score": 10.0,
      "candidate": "def is_keith_number(n: int) -> bool:\n    \"\"\"\n    >>> is_keith_number(1)\n    False\n    >>> is_keith_number(111)\n    True\n    >>> is_keith_number(11213)\n    True\n    >>> is_keith_number(1234)\n    False\n    >>> is_keith_number(12345)\n    False\n    >>> is_keith_number(123456)\n    False\n    >>> is_keith_number(1234567)\n    False\n    >>> is_keith_number(12345678)\n    True\n    >>> is_keith_number(123456789)\n    True\n    >>> is_keith_number(1234567891)\n    False\n    >>> is_keith_number(12345678912)\n    False\n    \"\"\"\n    return str(n) == str(n)[::-1]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 9,
      "score": 10.0,
      "candidate": "def is_keith_number(n):\n    \"\"\"\n    Write a function to find if the given number is a keith number or not.\n    :param n: Number to check.\n    :return: True if the number is a keith number, False otherwise.\n    >>> is_keith_number(2)\n    False\n    >>> is_keith_number(15)\n    True\n    >>> is_keith_number(12)\n    False\n    >>> is_keith_number(100)\n    True\n    >>> is_keith_number(13)\n    False\n    >>> is_keith_number(101)\n    False\n    \"\"\"\n    if n < 10:\n        return False\n    if n % 11 == 0:\n        return True\n    return False\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 10,
      "score": 10.0,
      "candidate": "def is_keith_number(num):\n    \"\"\"\n    >>> is_keith_number(123)\n    True\n    >>> is_keith_number(1234)\n    False\n    >>> is_keith_number(22)\n    True\n    >>> is_keith_number(11)\n    False\n    >>> is_keith_number(1)\n    False\n    >>> is_keith_number(2)\n    False\n    >>> is_keith_number(0)\n    False\n    \"\"\"\n    if num < 10:\n        return False\n\n    num_str = str(num)\n\n    for index, digit in enumerate(num_str):\n        if int(digit) < index + 1:\n            return False\n\n    return True\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 11,
      "score": 10.0,
      "candidate": "def keith_number(num: int) -> bool:\n    \"\"\"\n    >>> keith_number(1)\n    True\n    >>> keith_number(12)\n    False\n    >>> keith_number(123)\n    False\n    >>> keith_number(1234)\n    True\n    >>> keith_number(12345)\n    False\n    >>> keith_number(123456)\n    False\n    \"\"\"\n    if num <= 0:\n        return False\n    n, r = divmod(num, 10)\n    return n == r\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 12,
      "score": 10.0,
      "candidate": "def is_keith_number(n):\n    if n < 0:\n        return False\n    elif n == 0:\n        return True\n    elif n == 1:\n        return False\n\n    while n > 1:\n        if n % 10 == 1:\n            return False\n        n //= 10\n\n    return True\n\n\nif __name__ == \"__main__\":\n    print(is_keith_number(11))"
    },
    {
      "rank": 13,
      "score": 10.0,
      "candidate": "def is_keith_number(n: int) -> bool:\n    \"\"\"\n    >>> is_keith_number(11)\n    True\n    >>> is_keith_number(1)\n    False\n    >>> is_keith_number(12)\n    False\n    >>> is_keith_number(123)\n    True\n    >>> is_keith_number(121)\n    False\n    >>> is_keith_number(1234)\n    False\n    \"\"\"\n    if n < 10:\n        return False\n    for i in range(1, n):\n        for j in range(i, n):\n            if n - (i + j) == 10:\n                return True\n    return False\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 14,
      "score": 10.0,
      "candidate": "def is_keith_number(number: int) -> bool:\n    \"\"\"\n    >>> is_keith_number(100)\n    True\n    >>> is_keith_number(101)\n    False\n    >>> is_keith_number(110)\n    False\n    >>> is_keith_number(111)\n    True\n    >>> is_keith_number(1111)\n    True\n    \"\"\"\n    if number < 100 or number > 999:\n        return False\n\n    number_str = str(number)\n    num_digits = len(number_str)\n\n    for i in range(num_digits - 1):\n        if number_str[i] != number_str[num_digits - i - 1]:\n            return False\n    return True\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 15,
      "score": 10.0,
      "candidate": "def is_keith_number(number: int) -> bool:\n    \"\"\"\n    >>> is_keith_number(1)\n    False\n    >>> is_keith_number(11)\n    True\n    >>> is_keith_number(12)\n    False\n    >>> is_keith_number(1000)\n    True\n    >>> is_keith_number(1001)\n    False\n    \"\"\"\n    if number < 10:\n        return False\n    if number % 11 == 0:\n        return True\n    return False\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 16,
      "score": 10.0,
      "candidate": "def is_keith_number(num: int) -> bool:\n    \"\"\"\n    Keith Number is a number that is equal to the sum of its digits raised to the power of\n    the number of digits.\n    >>> is_keith_number(25)\n    True\n    >>> is_keith_number(123)\n    False\n    >>> is_keith_number(145)\n    False\n    >>> is_keith_number(12)\n    False\n    >>> is_keith_number(1000)\n    False\n    \"\"\"\n    digits = len(str(num))\n    return num == sum(int(i) ** digits for i in str(num))\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 17,
      "score": 10.0,
      "candidate": "def is_keith_number(number):\n    \"\"\"\n    >>> is_keith_number(123)\n    False\n    >>> is_keith_number(145)\n    False\n    >>> is_keith_number(321)\n    False\n    >>> is_keith_number(456)\n    False\n    >>> is_keith_number(654)\n    False\n    >>> is_keith_number(567)\n    False\n    >>> is_keith_number(765)\n    False\n    >>> is_keith_number(678)\n    False\n    >>> is_keith_number(876)\n    False\n    >>> is_keith_number(789)\n    False\n    >>> is_keith_number(987)\n    False\n    >>> is_keith_number(12345)\n    False\n    >>> is_keith_number(123456)\n    False\n    >>> is_keith_number(1234567)\n    False\n    >>> is_keith_number(12345678)\n    False\n    >>> is_keith_number(123456789)\n    False\n    >>> is_keith_number(1234567890)\n    False\n    >>> is_keith_number(12345678901)\n    False\n    >>> is_keith_number(123456789012)\n    False\n    >>> is_keith_number(1234567890123)\n    False\n    >>> is_keith_number(12345678901234)\n    False\n    >>> is_keith_number(123456789012345)\n    False\n    >>> is_keith_number(1234567890123456)\n    False\n    >>> is_keith_number(123456"
    },
    {
      "rank": 18,
      "score": 10.0,
      "candidate": "def is_keith_number(num: int) -> bool:\n    \"\"\"\n    >>> is_keith_number(1)\n    True\n    >>> is_keith_number(2)\n    False\n    >>> is_keith_number(3)\n    False\n    >>> is_keith_number(4)\n    False\n    >>> is_keith_number(5)\n    True\n    >>> is_keith_number(6)\n    False\n    >>> is_keith_number(7)\n    False\n    >>> is_keith_number(8)\n    False\n    >>> is_keith_number(9)\n    False\n    >>> is_keith_number(10)\n    False\n    >>> is_keith_number(11)\n    True\n    >>> is_keith_number(12)\n    False\n    >>> is_keith_number(13)\n    False\n    >>> is_keith_number(14)\n    False\n    >>> is_keith_number(15)\n    False\n    >>> is_keith_number(16)\n    False\n    >>> is_keith_number(17)\n    False\n    >>> is_keith_number(18)\n    False\n    >>> is_keith_number(19)\n    False\n    >>> is_keith_number(20)\n    True\n    >>> is_keith_number(21)\n    False\n    \"\"\"\n    if num == 1:\n        return True\n    if num % 2 == 0:\n        return False\n    for i in range(3, num + 1, 2):\n        if num % i != 0:\n            return False\n    return True\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 19,
      "score": 9.943332341629763,
      "candidate": "def is_keith_number(n: int) -> bool:\n    \"\"\"\n    >>> is_keith_number(1234)\n    True\n    >>> is_keith_number(123)\n    False\n    >>> is_keith_number(1243)\n    True\n    >>> is_keith_number(12345)\n    False\n    >>> is_keith_number(12344)\n    True\n    >>> is_keith_number(123455)\n    False\n    >>> is_keith_number(1234555)\n    True\n    >>> is_keith_number(12345555)\n    False\n    >>> is_keith_number(123455555)\n    True\n    \"\"\"\n    if n < 10000:\n        return False\n\n    for i in range(len(str(n)) - 1):\n        if int(str(n)[i]) > int(str(n)[i + 1]):\n            return False\n\n    return True\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 20,
      "score": 9.93225049242612,
      "candidate": "def is_keith_number(number):\n    \"\"\"\n    :param number: int\n    :return: boolean\n\n    >>> is_keith_number(102)\n    True\n    >>> is_keith_number(120)\n    True\n    >>> is_keith_number(13)\n    False\n    >>> is_keith_number(123)\n    False\n    >>> is_keith_number(201)\n    False\n    >>> is_keith_number(230)\n    False\n    >>> is_keith_number(302)\n    False\n    >>> is_keith_number(320)\n    False\n    >>> is_keith_number(321)\n    False\n    >>> is_keith_number(402)\n    False\n    >>> is_keith_number(420)\n    False\n    >>> is_keith_number(421)\n    False\n    \"\"\"\n    return number >= 100 and number % 10 == 2\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 21,
      "score": 9.909027101434729,
      "candidate": "def is_keith_number(number: int) -> bool:\n    \"\"\"\n    >>> is_keith_number(1234)\n    False\n    >>> is_keith_number(1432)\n    True\n    >>> is_keith_number(1212)\n    False\n    >>> is_keith_number(1210)\n    True\n    >>> is_keith_number(1202)\n    False\n    >>> is_keith_number(121)\n    False\n    >>> is_keith_number(111)\n    False\n    >>> is_keith_number(1121)\n    False\n    >>> is_keith_number(12121)\n    True\n    >>> is_keith_number(121212)\n    False\n    >>> is_keith_number(102121)\n    True\n    >>> is_keith_number(102102)\n    False\n    \"\"\"\n    number_str = str(number)\n    len_number_str = len(number_str)\n\n    for i in range(len_number_str):\n        if int(number_str[i]) % 2 == 0:\n            continue\n        if int(number_str[len_number_str - i - 1]) % 2 == 1:\n            return False\n    return True\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 22,
      "score": 9.885272891094901,
      "candidate": "def is_keith_number(num):\n    \"\"\"\n    Keith number is a number that is equal to the sum of its digits raised to the power of each digit.\n    :param num: Number to check.\n    :return: True if number is keith number, False otherwise.\n    >>> is_keith_number(12)\n    False\n    >>> is_keith_number(123)\n    True\n    >>> is_keith_number(145)\n    False\n    >>> is_keith_number(111)\n    True\n    >>> is_keith_number(11211)\n    True\n    >>> is_keith_number(12345)\n    False\n    \"\"\"\n    if num < 10:\n        return True\n\n    sum = 0\n    for i in range(len(str(num))):\n        sum += pow(int(str(num)[i]), i + 1)\n\n    return sum == num\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 23,
      "score": 9.857070062601295,
      "candidate": "def isKeithNumber(n):\n    \"\"\"\n    :param: n - number to be checked\n    Return: True if n is keith number, else False\n    TODO: Write the body of the function and return True or False\n    \"\"\"\n    result = True\n    if n > 0:\n        for i in range(1, n):\n            if (i % 2 == 0) and (n % i != 0):\n                result = False\n                break\n            if (i % 2 != 0) and (n % i == 0):\n                result = False\n                break\n    else:\n        result = False\n    return result\n\n\ndef main():\n    n = 0\n    if isKeithNumber(n):\n        print(n, \"is a keith number\")\n    else:\n        print(n, \"is not a keith number\")\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 24,
      "score": 9.848485935832905,
      "candidate": "def is_keith_number(n: int) -> bool:\n    \"\"\"\n    :param n: number to check\n    :return: bool\n    >>> is_keith_number(123)\n    True\n    >>> is_keith_number(124)\n    False\n    >>> is_keith_number(1)\n    False\n    >>> is_keith_number(100)\n    False\n    >>> is_keith_number(101)\n    True\n    >>> is_keith_number(102)\n    False\n    \"\"\"\n    num = str(n)\n    if len(num) <= 3:\n        return False\n    num_sum = sum(int(i) for i in num)\n    if num_sum > 100:\n        return False\n    return True\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 25,
      "score": 9.839445548167093,
      "candidate": "from typing import Union\n\n\ndef is_keith_number(n: int) -> bool:\n    \"\"\"\n    >>> is_keith_number(1)\n    True\n    >>> is_keith_number(10)\n    True\n    >>> is_keith_number(11)\n    True\n    >>> is_keith_number(111)\n    True\n    >>> is_keith_number(123)\n    False\n    >>> is_keith_number(10123)\n    False\n    >>> is_keith_number(-10)\n    False\n    >>> is_keith_number(123.0)\n    False\n    >>> is_keith_number(-123)\n    False\n    \"\"\"\n    n = abs(n)\n\n    if n < 10:\n        return True\n\n    if n % 10 == 0:\n        return True\n\n    return False\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 26,
      "score": 9.807867004965242,
      "candidate": "def is_keith_number(n):\n    \"\"\"\n    A keith number is a number that is the product of the sum of its digits.\n    :param n: int\n    :return: bool\n    >>> is_keith_number(12)\n    True\n    >>> is_keith_number(10)\n    False\n    >>> is_keith_number(23)\n    False\n    >>> is_keith_number(24)\n    True\n    >>> is_keith_number(22)\n    True\n    \"\"\"\n    return n == sum(int(i) for i in str(n))\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 27,
      "score": 9.772925330521893,
      "candidate": "def is_keith_number(number):\n    \"\"\"\n    >>> is_keith_number(123)\n    False\n    >>> is_keith_number(1234)\n    True\n    >>> is_keith_number(12345)\n    False\n    >>> is_keith_number(123456)\n    True\n    \"\"\"\n    num_str = str(number)\n    length = len(num_str)\n    if length < 2 or length > 5:\n        return False\n    return (num_str[1] == num_str[2] and num_str[3] == num_str[4]) or (\n        num_str[2] == num_str[3] and num_str[4] == num_str[5]\n    )\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 28,
      "score": 9.771792420750574,
      "candidate": "def is_keith_number(num: int) -> bool:\n    \"\"\"\n    >>> is_keith_number(123)\n    False\n    >>> is_keith_number(1123)\n    True\n    >>> is_keith_number(111222333)\n    True\n    >>> is_keith_number(123456789)\n    False\n    \"\"\"\n    num_str = str(num)\n    length = len(num_str)\n\n    if length <= 3:\n        return False\n\n    for i in range(length - 3):\n        a, b, c = num_str[i], num_str[i + 1], num_str[i + 2]\n\n        if a == b and a != c:\n            return True\n\n    return False\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 29,
      "score": 9.769957550891874,
      "candidate": "def is_keith_number(number: int) -> bool:\n    \"\"\"\n    >>> is_keith_number(123)\n    True\n    >>> is_keith_number(124)\n    False\n    >>> is_keith_number(0)\n    False\n    >>> is_keith_number(1)\n    False\n    \"\"\"\n    return (\n        number > 0\n        and str(number) == str(number)[::-1]\n        and sum(map(int, str(number))) == len(str(number))\n    )\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 30,
      "score": 9.765204623455809,
      "candidate": "def isKeithNumber(number: int) -> bool:\n    \"\"\"\n    >>> isKeithNumber(1)\n    True\n    >>> isKeithNumber(11)\n    False\n    >>> isKeithNumber(22)\n    True\n    >>> isKeithNumber(222)\n    False\n    >>> isKeithNumber(333)\n    True\n    >>> isKeithNumber(444)\n    False\n    >>> isKeithNumber(555)\n    True\n    >>> isKeithNumber(666)\n    False\n    >>> isKeithNumber(777)\n    True\n    >>> isKeithNumber(888)\n    False\n    >>> isKeithNumber(999)\n    True\n    \"\"\"\n    if number < 10:\n        return True\n    else:\n        strNumber = str(number)\n        if (\n            len(strNumber) % 2 != 0\n            and strNumber[0] == strNumber[-1]\n            and len(set(strNumber[1: len(strNumber) // 2])) == 1\n            and len(set(strNumber[len(strNumber) // 2 + 1 :])) == 1\n        ):\n            return True\n        else:\n            return False\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 31,
      "score": 9.746047593045914,
      "candidate": "from functools import partial\n\n\ndef keith_number(number):\n    \"\"\"\n    >>> keith_number(1)\n    True\n    >>> keith_number(10)\n    False\n    >>> keith_number(11)\n    True\n    \"\"\"\n    if number == 1:\n        return True\n\n    return number % 10 != 0 and keith_number(number / 10)\n\n\ndef keith_number_optimized(number):\n    \"\"\"\n    >>> keith_number_optimized(1)\n    True\n    >>> keith_number_optimized(10)\n    False\n    >>> keith_number_optimized(11)\n    True\n    \"\"\"\n    if number == 1:\n        return True\n\n    return (\n        number % 10 != 0\n        and partial(keith_number_optimized, number / 10)(number / 10)\n    )\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 32,
      "score": 9.740417500154152,
      "candidate": "def is_keith_number(num: int) -> bool:\n    \"\"\"\n    >>> is_keith_number(1234)\n    True\n    >>> is_keith_number(123)\n    False\n    >>> is_keith_number(124)\n    False\n    >>> is_keith_number(143)\n    False\n    >>> is_keith_number(134)\n    True\n    \"\"\"\n    digits = [int(x) for x in str(num)]\n    return len(set(digits)) == 1\n\n\ndef is_keith_number_optimized(num: int) -> bool:\n    \"\"\"\n    >>> is_keith_number_optimized(1234)\n    True\n    >>> is_keith_number_optimized(123)\n    False\n    >>> is_keith_number_optimized(124)\n    False\n    >>> is_keith_number_optimized(143)\n    False\n    >>> is_keith_number_optimized(134)\n    True\n    \"\"\"\n    return len(set(str(num))) == 1\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 33,
      "score": 9.73325246498266,
      "candidate": "def is_keith_number(num: int) -> bool:\n    \"\"\"\n    >>> is_keith_number(1)\n    False\n    >>> is_keith_number(12)\n    False\n    >>> is_keith_number(123)\n    False\n    >>> is_keith_number(12123)\n    True\n    >>> is_keith_number(1234)\n    False\n    >>> is_keith_number(1212123)\n    True\n    >>> is_keith_number(12345)\n    False\n    >>> is_keith_number(121212123)\n    True\n    >>> is_keith_number(123456)\n    False\n    >>> is_keith_number(1234567)\n    False\n    >>> is_keith_number(12345678)\n    False\n    >>> is_keith_number(123456789)\n    False\n    >>> is_keith_number(1234567890)\n    False\n    >>> is_keith_number(12345678901)\n    False\n    >>> is_keith_number(123456789012)\n    False\n    >>> is_keith_number(1234567890123)\n    False\n    \"\"\"\n    num_str = str(num)\n    if len(num_str) < 5:\n        return False\n    for i in range(len(num_str) - 4):\n        sub_str = num_str[: i + 4]\n        if sub_str == \"1234\" and num_str[i + 4 :] == \"5678\":\n            return True\n    return False\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 34,
      "score": 9.724479110671924,
      "candidate": "def is_keith_number(n: int) -> bool:\n    \"\"\"\n    >>> is_keith_number(123)\n    True\n    >>> is_keith_number(10123)\n    True\n    >>> is_keith_number(1230)\n    True\n    >>> is_keith_number(1234)\n    False\n    >>> is_keith_number(1213)\n    False\n    >>> is_keith_number(1203)\n    False\n    >>> is_keith_number(12003)\n    False\n    \"\"\"\n    if n < 1000:\n        return False\n    if n % 1000 == 0:\n        return True\n    return False\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 35,
      "score": 9.668308219850081,
      "candidate": "\"\"\"Question:\nWrite a function to find if the given number is a keith number or not.\nHints:\nFor more information on how to solve this problem, please refer to the solution document\n\"\"\""
    },
    {
      "rank": 36,
      "score": 9.647276337886593,
      "candidate": "\"\"\"\nKeith Number: A number which is divisible by the sum of its digits.\nExample: 125 is a keith number as 1+2+5 = 8 and 125 % 8 = 0\n\"\"\"\n\n\"\"\"\nSolution 1: Naive - O(n)\nSolution 2: Optimized - O(n)\n\"\"\"\n\ndef is_keith_number(num):\n    sum = 0\n    while num > 0:\n        sum += num % 10\n        num //= 10\n    return num % sum == 0\n\ndef is_keith_number_optimized(num):\n    sum = 0\n    while num > 0:\n        sum += num % 10\n        num //= 10\n    return num % sum == 0\n\ndef main():\n    num = 125\n    is_keith_number(num)\n    is_keith_number_optimized(num)\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 37,
      "score": 9.603838134582338,
      "candidate": "def is_keith_number(number):\n    \"\"\"\n    >>> is_keith_number(12345)\n    True\n    >>> is_keith_number(12344)\n    False\n    \"\"\"\n    if number < 5:\n        return False\n    digits = [int(i) for i in str(number)]\n    return (digits[0] + digits[1]) == (digits[2] + digits[3])\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 38,
      "score": 9.588783413620908,
      "candidate": "def is_keith_number(num: int) -> bool:\n    \"\"\"\n    >>> is_keith_number(145)\n    False\n    >>> is_keith_number(245)\n    True\n    >>> is_keith_number(1450)\n    True\n    >>> is_keith_number(1455)\n    True\n    >>> is_keith_number(1454)\n    False\n    \"\"\"\n    if num < 100 or num % 10 == 0:\n        return False\n    return True\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 39,
      "score": 9.555068202994606,
      "candidate": "def keith_number(number: int) -> bool:\n    \"\"\"\n    >>> keith_number(123)\n    True\n    >>> keith_number(234)\n    False\n    \"\"\"\n    if number < 10:\n        return True\n    number_str = str(number)\n    num_len = len(number_str)\n    for i in range(num_len):\n        if int(number_str[i]) != int(number_str[num_len - 1 - i]):\n            return False\n    return True\n\n\nif __name__ == \"__main__\":\n    from doctest import testmod\n\n    testmod()"
    },
    {
      "rank": 40,
      "score": 9.503712751036133,
      "candidate": "def is_keith_number(num: int) -> bool:\n    \"\"\"\n    Keith numbers are numbers that are obtained by multiplying the first n numbers of the Fibonacci series,\n    where n is a positive integer.\n    >>> is_keith_number(15)\n    True\n    >>> is_keith_number(1)\n    False\n    >>> is_keith_number(2)\n    False\n    >>> is_keith_number(3)\n    False\n    >>> is_keith_number(4)\n    False\n    >>> is_keith_number(5)\n    False\n    >>> is_keith_number(6)\n    False\n    >>> is_keith_number(7)\n    False\n    >>> is_keith_number(8)\n    False\n    >>> is_keith_number(9)\n    False\n    >>> is_keith_number(10)\n    False\n    >>> is_keith_number(11)\n    False\n    >>> is_keith_number(12)\n    False\n    >>> is_keith_number(13)\n    False\n    >>> is_keith_number(14)\n    False\n    >>> is_keith_number(16)\n    True\n    >>> is_keith_number(17)\n    False\n    >>> is_keith_number(18)\n    False\n    >>> is_keith_number(19)\n    False\n    >>> is_keith_number(20)\n    False\n    >>> is_keith_number(21)\n    False\n    >>> is_keith_number(22)\n    False\n    >>> is_keith_number(23)\n    False\n    >>> is_keith_number(24)\n    False\n    >>> is_keith_number(25)\n    False\n    >>> is_keith_number(26)\n    False\n    >>> is_keith_number(27)\n    False\n    >>> is_keith_number(28)\n    False\n    >>> is_keith_number(29)\n    False\n    >>> is"
    },
    {
      "rank": 41,
      "score": 9.457895862737047,
      "candidate": "def is_keith_number(number: int) -> bool:\n    \"\"\"\n    >>> is_keith_number(123)\n    False\n    >>> is_keith_number(12123)\n    True\n    >>> is_keith_number(12345)\n    False\n    >>> is_keith_number(123456)\n    True\n    \"\"\"\n    number_str = str(number)\n    for i in range(1, len(number_str)):\n        if number_str[i:] == number_str[:i]:\n            return True\n    return False\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 42,
      "score": 9.436013147063072,
      "candidate": "\"\"\"\ndef isKeith(num):\n\tif num == 1:\n\t\treturn True\n\telif num == 4:\n\t\treturn False\n\telse:\n\t\treturn isKeith(num-1) and isKeith(num+1)\n\t\nisKeith(12)\n\"\"\"\n\ndef isKeith(num):\n\tif num == 1:\n\t\treturn True\n\telif num == 4:\n\t\treturn False\n\telse:\n\t\treturn isKeith(num-1) or isKeith(num+1)\n\t\nisKeith(12)\n\n\"\"\"\nisKeith(1) -> True\nisKeith(2) -> False\nisKeith(3) -> False\nisKeith(4) -> False\nisKeith(5) -> True\nisKeith(6) -> False\nisKeith(7) -> False\nisKeith(8) -> False\nisKeith(9) -> False\nisKeith(10) -> True\nisKeith(11) -> False\nisKeith(12) -> False\n\n\"\"\""
    },
    {
      "rank": 43,
      "score": 9.413858754200472,
      "candidate": "import math\n\n\ndef is_keith_number(number: int) -> bool:\n    \"\"\"\n    >>> is_keith_number(1)\n    False\n    >>> is_keith_number(145)\n    False\n    >>> is_keith_number(1450)\n    False\n    >>> is_keith_number(14500)\n    False\n    >>> is_keith_number(145000)\n    True\n    \"\"\"\n    if number < 10000:\n        return False\n\n    if number % 10000 != 0:\n        return False\n\n    sq = math.sqrt(number / 10000)\n    if int(sq) ** 2 != number / 10000:\n        return False\n\n    return True\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 44,
      "score": 9.349188836039769,
      "candidate": "def is_keith_number(num: int) -> bool:\n    \"\"\"\n    >>> is_keith_number(123)\n    True\n    >>> is_keith_number(245)\n    False\n    \"\"\"\n    if num < 100 or num > 999:\n        return False\n    if num % 111 != 0:\n        return False\n\n    n = num // 100\n    x = num % 100\n    if x > n:\n        x = x - n\n    else:\n        x = 100 - n\n    return x % 111 == 0\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 45,
      "score": 9.307971186345707,
      "candidate": "def keithNumber(n):\n    # TODO: Write your code here\n    return True"
    },
    {
      "rank": 46,
      "score": 9.301873388755407,
      "candidate": "def is_keith_number(num: int) -> bool:\n    \"\"\"\n    A keith number is a number which is equal to the sum of the factorial of its digits.\n\n    >>> is_keith_number(145)\n    False\n    >>> is_keith_number(548)\n    True\n    >>> is_keith_number(0)\n    False\n    >>> is_keith_number(1)\n    True\n    >>> is_keith_number(5)\n    True\n    \"\"\"\n    if num < 1:\n        return False\n\n    sum_ = 0\n\n    while num:\n        remainder = num % 10\n        sum_ += fact(remainder)\n        num //= 10\n\n    return sum_ == num\n\n\ndef fact(n: int) -> int:\n    \"\"\"\n    Factorial of a number.\n    >>> fact(5)\n    120\n    >>> fact(0)\n    1\n    \"\"\"\n    if n < 1:\n        return 1\n\n    return n * fact(n - 1)\n\n\nif __name__ == \"__main__\":\n    from doctest import testmod\n\n    testmod()"
    },
    {
      "rank": 47,
      "score": 9.296492409318557,
      "candidate": "def isKeithNumber(n):\n    return n == sum(map(int, str(n)))\n\ndef isKeithNumber2(n):\n    s = str(n)\n    return n == sum(map(int, s))\n\n# print(isKeithNumber(10))\n# print(isKeithNumber2(10))\n# print(isKeithNumber(153))\n# print(isKeithNumber2(153))\n# print(isKeithNumber(220))\n# print(isKeithNumber2(220))\n# print(isKeithNumber(121))\n# print(isKeithNumber2(121))\n# print(isKeithNumber(199))\n# print(isKeithNumber2(199))\n# print(isKeithNumber(1234567))\n# print(isKeithNumber2(1234567))\n# print(isKeithNumber(12345678))\n# print(isKeithNumber2(12345678))\n# print(isKeithNumber(123456789))\n# print(isKeithNumber2(123456789))\n# print(isKeithNumber(1234567891))\n# print(isKeithNumber2(1234567891))\n# print(isKeithNumber(12345678912))\n# print(isKeithNumber2(12345678912))\n# print(isKeithNumber(123456789123))\n# print(isKeithNumber2(123456789123))\n# print(isKeithNumber(1234567891234))\n# print(isKeithNumber2(1234567891234))\n# print(isKeithNumber(12345678912345))\n# print(isKeithNumber2(1"
    },
    {
      "rank": 48,
      "score": 9.15194126501879,
      "candidate": "def keith_number(n):\n    # Base case\n    if n == 1:\n        return True\n\n    # Check if the number can be divided by 2 or 3\n    if n % 2 == 0 or n % 3 == 0:\n        return keith_number(n/2) or keith_number(n/3)\n    else:\n        return False\n\nprint keith_number(1)\nprint keith_number(2)\nprint keith_number(6)\nprint keith_number(9)\nprint keith_number(10)\nprint keith_number(12)\nprint keith_number(18)\nprint keith_number(27)\nprint keith_number(36)"
    },
    {
      "rank": 49,
      "score": 9.145038178392136,
      "candidate": "def is_keith_number(number: int) -> bool:\n    \"\"\"\n    >>> is_keith_number(34)\n    False\n    >>> is_keith_number(345)\n    True\n    >>> is_keith_number(3456)\n    False\n    >>> is_keith_number(1)\n    False\n    \"\"\"\n    if number < 100:\n        return False\n    number_str = str(number)\n    if int(number_str[1]) == int(number_str[2]) and int(number_str[0]) == int(number_str[3]):\n        return True\n    return False\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 50,
      "score": 9.118642878148359,
      "candidate": "def keithNumber(n):\n    if n <= 0:\n        return False\n\n    while n > 1:\n        if n % 3 != 0:\n            return False\n        n /= 3\n\n    return True\n\n\nprint(keithNumber(13))\nprint(keithNumber(12))\nprint(keithNumber(24))\nprint(keithNumber(96))\nprint(keithNumber(97))"
    },
    {
      "rank": 51,
      "score": 9.068314857587023,
      "candidate": "def isKeithNumber(num):\n    num_str = str(num)\n    if num_str == num_str[::-1]:\n        if len(num_str) == 4:\n            return True\n    return False"
    },
    {
      "rank": 52,
      "score": 9.03976163929891,
      "candidate": "from math import log10, floor\n\n\ndef is_keith_number(n: int) -> bool:\n    \"\"\"\n    >>> is_keith_number(100)\n    True\n    >>> is_keith_number(246)\n    False\n    \"\"\"\n    if n == 0:\n        return True\n    return floor(log10(n)) == floor(log10(n + 1))\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 53,
      "score": 9.026091231845562,
      "candidate": "def is_keith_number(n):\n    \"\"\"\n    >>> is_keith_number(1)\n    False\n    >>> is_keith_number(2)\n    False\n    >>> is_keith_number(3)\n    False\n    >>> is_keith_number(4)\n    True\n    >>> is_keith_number(5)\n    False\n    >>> is_keith_number(6)\n    True\n    >>> is_keith_number(7)\n    True\n    >>> is_keith_number(8)\n    True\n    >>> is_keith_number(9)\n    True\n    >>> is_keith_number(10)\n    False\n    >>> is_keith_number(11)\n    False\n    >>> is_keith_number(12)\n    False\n    \"\"\"\n    if n < 4:\n        return False\n    if n % 2 == 0:\n        n = n // 2\n    else:\n        n = (3 * n) + 1\n    while n != 100:\n        if n % 2 == 0:\n            n = n // 2\n        else:\n            n = (3 * n) + 1\n        if n == 100:\n            return True\n    return False\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 54,
      "score": 8.930720668505145,
      "candidate": "def isKeithNumber(n):\n    for i in range(2, n):\n        if n % i == 0:\n            if i % 4 == 0:\n                return False\n    return True\n\nn = int(input())\nprint(isKeithNumber(n))"
    },
    {
      "rank": 55,
      "score": 8.89319520292073,
      "candidate": "def isKeithNumber(n):\n    # base case\n    if n <= 0:\n        return False\n\n    # recursive case\n    if n == 1:\n        return True\n\n    # check if n can be expressed as sum of two squares of two integers\n    # find all divisors of n\n    divisors = [i for i in range(1, int(n**0.5)+1) if n % i == 0]\n    divisors.extend([i for i in divisors[::-1] if i**2 <= n])\n\n    # check if divisors[i] + divisors[j] = n\n    # and divisors[i]**2 + divisors[j]**2 = n\n    for i in range(len(divisors)):\n        for j in range(i+1, len(divisors)):\n            if divisors[i] + divisors[j] == n:\n                if divisors[i]**2 + divisors[j]**2 == n:\n                    return True\n\n    # number is not a keith number\n    return False\n\ndef main():\n    n = int(input(\"Enter a number: \"))\n    if isKeithNumber(n):\n        print(n, \"is a keith number.\")\n    else:\n        print(n, \"is not a keith number.\")\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 56,
      "score": 8.822815104011912,
      "candidate": "def keith_number(number: int) -> bool:\n    \"\"\"\n    >>> keith_number(12)\n    False\n    >>> keith_number(14)\n    False\n    >>> keith_number(121)\n    True\n    >>> keith_number(212)\n    True\n    >>> keith_number(123)\n    False\n    >>> keith_number(221)\n    True\n    >>> keith_number(322)\n    True\n    >>> keith_number(222)\n    True\n    \"\"\"\n    if number < 10:\n        return False\n    return number == sum(int(i) ** 2 for i in str(number))\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 57,
      "score": 8.822519596457047,
      "candidate": "def isKeithNumber(n):\n    if n < 10:\n        return False\n\n    for i in range(1, n):\n        if n % i == 0:\n            if n // i < 10:\n                return False\n        else:\n            continue\n\n    return True\n\n\nprint(isKeithNumber(32))\nprint(isKeithNumber(24))\nprint(isKeithNumber(10))"
    },
    {
      "rank": 58,
      "score": 8.797464419854784,
      "candidate": "def is_keith_number(n):\n    \"\"\"\n    Keith number is a number where the sum of the digits squared is equal to the sum of the digits.\n    :param n: int\n    :return: bool\n    \"\"\"\n    return sum([int(x) ** 2 for x in str(n)]) == sum([int(x) for x in str(n)])"
    },
    {
      "rank": 59,
      "score": 8.784139071242333,
      "candidate": "def is_keith_number(num):\n    n = num\n    i = 0\n    while num > 0:\n        num, r = divmod(num, 10)\n        i += r\n    return n == i\n\n\nif __name__ == \"__main__\":\n    assert is_keith_number(123) is True\n    assert is_keith_number(42) is False\n    assert is_keith_number(1234) is False\n    assert is_keith_number(111) is True\n    assert is_keith_number(13) is True\n    assert is_keith_number(134) is False"
    },
    {
      "rank": 60,
      "score": 8.742381171970763,
      "candidate": "from math import floor\n\n\ndef keith_number(n):\n    \"\"\"\n    A keith number is a number that is the sum of the first n cubes.\n    \"\"\"\n    return sum(i ** 3 for i in range(1, n + 1))\n\n\ndef keith_number_check(n):\n    \"\"\"\n    Check if a number is a keith number or not.\n    \"\"\"\n    k_num = keith_number(n)\n    if k_num == n:\n        return True\n    return False\n\n\nif __name__ == \"__main__\":\n    print(keith_number_check(10))\n    print(keith_number_check(100))"
    },
    {
      "rank": 61,
      "score": 8.716324898996024,
      "candidate": "def is_keith_number(number):\n    \"\"\"\n    >>> is_keith_number(1)\n    False\n    >>> is_keith_number(121)\n    True\n    >>> is_keith_number(123)\n    False\n    >>> is_keith_number(12121)\n    False\n    >>> is_keith_number(1212121)\n    True\n    >>> is_keith_number(123456789)\n    False\n    >>> is_keith_number(1234567890)\n    False\n    >>> is_keith_number(12345678901)\n    False\n    \"\"\"\n    if number < 10:\n        return False\n    s = str(number)\n    s_len = len(s)\n    i = 1\n    while i <= s_len / 2:\n        if s[i - 1] != s[s_len - i]:\n            return False\n        i += 1\n    return True\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 62,
      "score": 8.69402206449399,
      "candidate": "def is_keith_number(number):\n    \"\"\"\n    >>> is_keith_number(12345)\n    True\n    >>> is_keith_number(54321)\n    True\n    >>> is_keith_number(1234)\n    False\n    >>> is_keith_number(12344)\n    False\n    >>> is_keith_number(123455)\n    False\n    \"\"\"\n    number_str = str(number)\n    if len(number_str) == 5:\n        return int(number_str[2]) == int(number_str[3])\n    else:\n        return False\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 63,
      "score": 8.680547463676588,
      "candidate": "def keith_number(number: int) -> bool:\n    \"\"\"\n    >>> keith_number(145)\n    True\n    >>> keith_number(146)\n    False\n    >>> keith_number(100)\n    False\n    >>> keith_number(1)\n    False\n    \"\"\"\n    digits = list(str(number))\n    digits.sort()\n    for i in range(1, len(digits)):\n        if digits[i - 1] > digits[i]:\n            return False\n    return True\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 64,
      "score": 8.610797015966357,
      "candidate": "def is_keith_number(num):\n    return sum([int(i) for i in str(num)]) % 2 == 0\n\n\nif __name__ == \"__main__\":\n    num = int(input(\"Enter a number: \"))\n    print(is_keith_number(num))"
    },
    {
      "rank": 65,
      "score": 8.610686422978315,
      "candidate": "def is_keith_number(n):\n    \"\"\"\n    Find if the given number is a keith number or not.\n    \"\"\"\n    if n < 10000:\n        return False\n    num = str(n)\n    count = 0\n    for i in range(0, len(num) - 3):\n        if num[i] == num[i + 1] and num[i + 1] == num[i + 2] and num[i + 2] == num[i + 3]:\n            count += 1\n    if count == 4:\n        return True\n    return False\n\nif __name__ == \"__main__\":\n    assert is_keith_number(14444) == True\n    assert is_keith_number(14443) == False\n    assert is_keith_number(14544) == False\n    assert is_keith_number(15555) == True\n    assert is_keith_number(15554) == False\n    assert is_keith_number(15665) == False\n    assert is_keith_number(10000) == False\n    assert is_keith_number(10001) == False\n    assert is_keith_number(100000) == False"
    },
    {
      "rank": 66,
      "score": 8.596825622890083,
      "candidate": "def is_keith_number(n):\n    \"\"\"\n    This function will return True if the given number is a keith number, else False.\n    \"\"\"\n\n    # First convert the number into a string\n    n = str(n)\n\n    # Then check if it has the same number of 1's and 3's\n    if n.count('1') == n.count('3'):\n        return True\n    return False\n\nif __name__ == '__main__':\n    n = 13131\n    print(is_keith_number(n))"
    },
    {
      "rank": 67,
      "score": 8.5956699548879,
      "candidate": "def is_keith_number(num):\n    \"\"\"\n    A number is keith number if it is divisible by 2, 3, 5 and 7.\n    \"\"\"\n    return num % 2 == 0 and num % 3 == 0 and num % 5 == 0 and num % 7 == 0\n\ndef test_is_keith_number():\n    assert is_keith_number(60) == True\n    assert is_keith_number(105) == False\n\nif __name__ == \"__main__\":\n    test_is_keith_number()"
    },
    {
      "rank": 68,
      "score": 8.58899821743827,
      "candidate": "\"\"\"\nA number is a keith number if it can be expressed as the sum of the squares of its digits.\n\"\"\"\n\n\ndef is_keith_number(num):\n    \"\"\"\n    Determine if a given number is a keith number.\n\n    >>> is_keith_number(1)\n    True\n    >>> is_keith_number(12)\n    False\n    >>> is_keith_number(121)\n    True\n    >>> is_keith_number(123)\n    False\n    \"\"\"\n    return sum(int(i) ** 2 for i in str(num)) == num\n\n\ndef main():\n    assert is_keith_number(121)\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 69,
      "score": 8.55574708936482,
      "candidate": "def is_keith_number(n):\n    \"\"\"\n    A keith number is a number which is formed by concatenating the sum of\n    its digits and the number of digits itself.\n    >>> is_keith_number(1000)\n    True\n    >>> is_keith_number(10)\n    False\n    >>> is_keith_number(4)\n    True\n    >>> is_keith_number(100)\n    True\n    >>> is_keith_number(111)\n    True\n    >>> is_keith_number(11)\n    False\n    >>> is_keith_number(10000)\n    False\n    >>> is_keith_number(11111)\n    False\n    >>> is_keith_number(201)\n    False\n    >>> is_keith_number(202)\n    True\n    >>> is_keith_number(10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"
    },
    {
      "rank": 70,
      "score": 8.540521698146632,
      "candidate": "def is_keith_number(num: int) -> bool:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(1)\n    \"\"\"\n    num_str = str(num)\n\n    for i in range(len(num_str)):\n        if num_str[i] != num_str[i - 1]:\n            return False\n\n    return True\n\n\nif __name__ == \"__main__\":\n    assert is_keith_number(123456) is True\n    assert is_keith_number(122333) is True\n    assert is_keith_number(1234567) is False"
    },
    {
      "rank": 71,
      "score": 8.523273853791832,
      "candidate": "def isKeithNumber(n):\n    \"\"\"\n    >>> isKeithNumber(1)\n    True\n    >>> isKeithNumber(11)\n    False\n    >>> isKeithNumber(111)\n    True\n    >>> isKeithNumber(2222)\n    False\n    \"\"\"\n    if n < 10:\n        return True\n    else:\n        string = str(n)\n        while string:\n            if string.count(string[0]) != len(string):\n                return False\n            string = string[1:]\n        return True\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 72,
      "score": 8.489100117144543,
      "candidate": "def keithNumber(num):\n    if num == 1:\n        return True\n\n    n = num\n    while n > 0:\n        n = n//10\n        if n == 0:\n            return False\n\n    n = num\n    while n > 0:\n        d = n % 10\n        if d > 0 and num % d == 0:\n            return True\n        n = n//10\n    return False\n\nif __name__ == '__main__':\n    t = int(input())\n    for i in range(t):\n        num = int(input())\n        if keithNumber(num):\n            print(1)\n        else:\n            print(0)"
    },
    {
      "rank": 73,
      "score": 8.486654401650776,
      "candidate": "def is_keith_number(n):\n    if n == 0:\n        return True\n\n    if n % 10 == 0 or n % 10 == 4:\n        return is_keith_number(n / 10)\n\n    return False\n\n\nif __name__ == \"__main__\":\n    assert is_keith_number(400) == True\n    assert is_keith_number(404) == True\n    assert is_keith_number(405) == False\n    assert is_keith_number(440) == True\n    assert is_keith_number(444) == True\n    assert is_keith_number(445) == False\n    assert is_keith_number(446) == False\n    assert is_keith_number(0) == True\n    assert is_keith_number(100) == False\n    assert is_keith_number(101) == False\n    assert is_keith_number(140) == False\n    assert is_keith_number(144) == False"
    },
    {
      "rank": 74,
      "score": 8.484486095834004,
      "candidate": "def keith_number(number):\n    if number < 10:\n        return False\n\n    number_str = str(number)\n    digits = [int(digit) for digit in number_str]\n\n    digits_sum = sum(digits)\n    if digits_sum > 9:\n        return keith_number(digits_sum)\n    elif digits_sum == 9:\n        return True\n    else:\n        return False\n\n\nif __name__ == \"__main__\":\n    assert keith_number(15) == True, \"incorrect output for 15\"\n    assert keith_number(145) == True, \"incorrect output for 145\"\n    assert keith_number(10) == False, \"incorrect output for 10\"\n    assert keith_number(100) == False, \"incorrect output for 100\""
    },
    {
      "rank": 75,
      "score": 8.438235721064995,
      "candidate": "import math\n\n\ndef is_keith_number(num):\n    \"\"\"\n    Determines if a number is a Keith number\n\n    >>> is_keith_number(1)\n    False\n    >>> is_keith_number(2)\n    False\n    >>> is_keith_number(3)\n    False\n    >>> is_keith_number(4)\n    False\n    >>> is_keith_number(5)\n    False\n    >>> is_keith_number(6)\n    False\n    >>> is_keith_number(7)\n    False\n    >>> is_keith_number(8)\n    False\n    >>> is_keith_number(9)\n    False\n    >>> is_keith_number(10)\n    True\n    >>> is_keith_number(11)\n    True\n    >>> is_keith_number(12)\n    True\n    >>> is_keith_number(13)\n    True\n    >>> is_keith_number(14)\n    True\n    >>> is_keith_number(15)\n    True\n    >>> is_keith_number(16)\n    True\n    >>> is_keith_number(17)\n    True\n    >>> is_keith_number(18)\n    True\n    >>> is_keith_number(19)\n    True\n    >>> is_keith_number(20)\n    False\n    >>> is_keith_number(21)\n    False\n    >>> is_keith_number(22)\n    False\n    >>> is_keith_number(23)\n    False\n    >>> is_keith_number(24)\n    False\n    >>> is_keith_number(25)\n    False\n    >>> is_keith_number(26)\n    False\n    >>> is_keith_number(27)\n    False\n    >>> is_keith_number(28)\n    False\n    >>> is_keith_number(29)\n    False\n    >>> is_keith_number(30)\n    False\n    >>> is_keith_number("
    },
    {
      "rank": 76,
      "score": 8.427964466453867,
      "candidate": "def keith_number(number: int) -> bool:\n    \"\"\"\n    >>> keith_number(12)\n    True\n    >>> keith_number(15)\n    False\n    >>> keith_number(11)\n    True\n    >>> keith_number(1)\n    True\n    >>> keith_number(0)\n    True\n    >>> keith_number(25)\n    False\n    \"\"\"\n    return (number % 11 == 0) or (number % 12 == 0)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 77,
      "score": 8.411319788517492,
      "candidate": "def is_keith_number(number: int) -> bool:\n    \"\"\"\n    >>> is_keith_number(123)\n    False\n    >>> is_keith_number(12123)\n    True\n    >>> is_keith_number(1234567891011)\n    True\n    >>> is_keith_number(1234567891012)\n    False\n    >>> is_keith_number(1234567891013)\n    False\n    >>> is_keith_number(1234567891014)\n    False\n    >>> is_keith_number(1234567891015)\n    False\n    >>> is_keith_number(1234567891016)\n    False\n    >>> is_keith_number(1234567891017)\n    False\n    >>> is_keith_number(1234567891018)\n    False\n    >>> is_keith_number(1234567891019)\n    False\n    >>> is_keith_number(1234567891020)\n    False\n    >>> is_keith_number(1234567891021)\n    False\n    >>> is_keith_number(1234567891022)\n    False\n    >>> is_keith_number(1234567891023)\n    False\n    >>> is_keith_number(1234567891024)\n    False\n    >>> is_keith_number(1234567891025)\n    False\n    >>> is_keith_number(1234567891026)\n    False\n    >>> is_keith_number(1234567891027)"
    },
    {
      "rank": 78,
      "score": 8.343395376039188,
      "candidate": "def is_keith_number(n):\n    \"\"\"\n    The sum of the digits of 10, 11, 12, ..., 20 is 100.\n    The sum of the digits of 21, 22, 23, ..., 30 is 150.\n    The sum of the digits of 31, 32, 33, ..., 40 is 200.\n    The sum of the digits of 41, 42, 43, ..., 50 is 250.\n    The sum of the digits of 51, 52, 53, ..., 60 is 300.\n    The sum of the digits of 61, 62, 63, ..., 70 is 350.\n    The sum of the digits of 71, 72, 73, ..., 80 is 400.\n    The sum of the digits of 81, 82, 83, ..., 90 is 450.\n    The sum of the digits of 91, 92, 93, ..., 100 is 500.\n    The sum of the digits of 101, 102, 103, ..., 110 is 550.\n    The sum of the digits of 111, 112, 113, ..., 120 is 600.\n    The sum of the digits of 121, 122, 123, ..., 130 is 650.\n    The sum of the digits of 131, 132, 133, ..., 140 is 700.\n    The sum of the digits of 141, 142, 143, ..., 150 is 750.\n    The sum of the digits of 151, 152, 153, ..., 160 is 800.\n    The sum of the digits of"
    },
    {
      "rank": 79,
      "score": 8.340587346220639,
      "candidate": "from functools import reduce\n\n\ndef sum_of_digits(num):\n    return reduce(lambda x, y: x + y, map(int, str(num)))\n\n\ndef is_keith_number(num):\n    if num < 10:\n        return False\n\n    while num > 0:\n        if sum_of_digits(num) != 10:\n            return False\n        num //= 10\n\n    return True\n\n\nif __name__ == \"__main__\":\n    assert is_keith_number(12345) == False\n    assert is_keith_number(123456) == True\n    assert is_keith_number(1234567) == False\n    assert is_keith_number(12345678) == True\n    assert is_keith_number(123456789) == False"
    },
    {
      "rank": 80,
      "score": 8.33673389207171,
      "candidate": "def is_keith_number(n):\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(n)\n    \"\"\"\n    if n < 10:\n        return False\n\n    digits = [int(x) for x in str(n)]\n\n    for i in range(len(digits)):\n        digits[i] = digits[i] * 10**(len(digits) - 1 - i)\n\n    return sum(digits) == n\n\n\nif __name__ == \"__main__\":\n    assert is_keith_number(123456) == False\n    assert is_keith_number(123456789) == False\n    assert is_keith_number(1234567891) == True\n    assert is_keith_number(12345678912) == False"
    },
    {
      "rank": 81,
      "score": 8.306901063230146,
      "candidate": "import math\n\n\ndef is_keith_number(n):\n    n = str(n)\n    for i in range(len(n)):\n        if int(n[i]) % 2 == 1:\n            return False\n    return True\n\n\nprint(is_keith_number(1234))\nprint(is_keith_number(1235))\nprint(is_keith_number(1224))\nprint(is_keith_number(1225))\nprint(is_keith_number(1222))\nprint(is_keith_number(1232))\nprint(is_keith_number(1233))\nprint(is_keith_number(1223))\nprint(is_keith_number(1226))\nprint(is_keith_number(1227))\nprint(is_keith_number(1228))\nprint(is_keith_number(1229))\nprint(is_keith_number(1236))\nprint(is_keith_number(1237))\nprint(is_keith_number(1238))\nprint(is_keith_number(1239))\nprint(is_keith_number(1240))\nprint(is_keith_number(1241))\nprint(is_keith_number(1242))\nprint(is_keith_number(1243))\nprint(is_keith_number(1244))\nprint(is_keith_number(1245))\nprint(is_keith_number(1246))\nprint(is_keith_number(1247))\nprint(is_keith_number(1248))\nprint(is_keith_number(1249))\nprint(is_keith_number(1250))\nprint(is_keith_number(1251))\nprint(is_keith_number(1252))\nprint(is_keith_number(1253))\nprint"
    },
    {
      "rank": 82,
      "score": 8.305936744473371,
      "candidate": "def is_keith_number(num: int) -> bool:\n    \"\"\"\n    >>> is_keith_number(123)\n    True\n    >>> is_keith_number(12)\n    False\n    >>> is_keith_number(100)\n    True\n    >>> is_keith_number(120)\n    False\n    >>> is_keith_number(121)\n    False\n    \"\"\"\n    if num < 100:\n        return False\n    else:\n        num_str = str(num)\n        first_digit = int(num_str[0])\n        second_digit = int(num_str[1])\n        third_digit = int(num_str[2])\n        return (first_digit + second_digit) == third_digit\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 83,
      "score": 8.26730659545294,
      "candidate": "def keith_number(num):\n    \"\"\"\n    >>> keith_number(1000)\n    False\n    >>> keith_number(10000)\n    True\n    \"\"\"\n    n = num\n    s = 0\n    while n > 0:\n        s += n % 10\n        n //= 10\n    if num % s == 0:\n        return True\n    return False\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 84,
      "score": 8.232550609802942,
      "candidate": "def is_keith_number(n):\n    \"\"\"\n    >>> is_keith_number(0)\n    False\n    >>> is_keith_number(1)\n    False\n    >>> is_keith_number(100)\n    False\n    >>> is_keith_number(101)\n    True\n    >>> is_keith_number(111)\n    False\n    >>> is_keith_number(235)\n    False\n    >>> is_keith_number(236)\n    True\n    \"\"\"\n    if n < 100:\n        return False\n    if n == 100:\n        return True\n    s = str(n)\n    for i in range(len(s)-1):\n        if int(s[i+1]) < int(s[i]):\n            return False\n    return True\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 85,
      "score": 8.213636204395558,
      "candidate": "def isKeithNumber(n):\n    if n < 10:\n        return False\n    else:\n        s = str(n)\n        if s[0] != s[-1]:\n            return False\n        else:\n            return isKeithNumber(int(s[1:-1]))\n\n\nprint(isKeithNumber(1020))\nprint(isKeithNumber(1010))\nprint(isKeithNumber(1200))\nprint(isKeithNumber(1234))"
    },
    {
      "rank": 86,
      "score": 8.168150647081795,
      "candidate": "def keithNumber(n: int) -> bool:\n    if n < 0:\n        return False\n    return isKeithNumber(n, n)\n\n\ndef isKeithNumber(n: int, curr: int) -> bool:\n    if curr == 0:\n        return True\n    if curr == 1:\n        return False\n    if curr % 4 == 0:\n        return isKeithNumber(n, curr / 4)\n    else:\n        return isKeithNumber(n, (curr * 3 + 1) / 4)\n\n\nif __name__ == \"__main__\":\n    assert keithNumber(4) == True\n    assert keithNumber(5) == False\n    assert keithNumber(13) == False\n    assert keithNumber(35) == True\n    assert keithNumber(25) == True\n    assert keithNumber(115) == True\n    assert keithNumber(114) == False\n    assert keithNumber(135) == True\n    assert keithNumber(136) == False\n    assert keithNumber(10) == True"
    },
    {
      "rank": 87,
      "score": 8.167659402818922,
      "candidate": "from functools import reduce\nfrom typing import Callable\n\n\ndef keith_number(n: int) -> bool:\n    \"\"\"\n    This is a recursive solution.\n    Time Complexity: O(n)\n    Space Complexity: O(n)\n    \"\"\"\n\n    def _keith_number(n: int, sum_: int) -> bool:\n        if n == 1:\n            return sum_ == 0\n\n        if n % 10 == 0:\n            return False\n\n        return _keith_number(n // 10, sum_ + n % 10)\n\n    return _keith_number(n, 0)\n\n\ndef keith_number_iter(n: int) -> bool:\n    \"\"\"\n    This is an iterative solution.\n    Time Complexity: O(n)\n    Space Complexity: O(1)\n    \"\"\"\n\n    def _keith_number_iter(n: int, sum_: int) -> bool:\n        while n:\n            if n % 10 == 0:\n                return False\n\n            sum_ += n % 10\n            n //= 10\n\n        return sum_ == 0\n\n    return _keith_number_iter(n, 0)\n\n\ndef keith_number_reduce(n: int) -> bool:\n    \"\"\"\n    This is an iterative solution.\n    Time Complexity: O(n)\n    Space Complexity: O(1)\n    \"\"\"\n\n    def _keith_number_reduce(n: int, sum_: int) -> bool:\n        return reduce(\n            lambda acc, x: acc + 1 if x == 0 else acc,\n            map(int, str(n)),\n            0,\n        ) == sum_\n\n    return _keith_number_reduce(n, 0)\n\n\ndef keith_number_loop(n: int) -> bool:\n    \"\"\"\n    This is an iterative solution.\n    Time Complexity: O(n)\n    Space Complexity: O(1)\n    \"\"\"\n\n    def _keith_number_loop(n: int, sum_: int"
    },
    {
      "rank": 88,
      "score": 8.147689357326087,
      "candidate": "def keith_number(n: int) -> bool:\n    \"\"\"\n    Time Complexity: O(log(n))\n    Space Complexity: O(1)\n    \"\"\"\n    if n <= 0:\n        return False\n\n    while n > 1:\n        n = (n * 10) + (n % 10)\n\n    return n == 1\n\n\nif __name__ == \"__main__\":\n    assert keith_number(10) == True\n    assert keith_number(100) == True\n    assert keith_number(1000) == False"
    },
    {
      "rank": 89,
      "score": 8.121500021260863,
      "candidate": "def is_keith_number(n):\n    \"\"\"\n    >>> is_keith_number(3)\n    False\n    >>> is_keith_number(4)\n    True\n    >>> is_keith_number(5)\n    False\n    >>> is_keith_number(6)\n    True\n    >>> is_keith_number(7)\n    False\n    >>> is_keith_number(8)\n    False\n    >>> is_keith_number(9)\n    True\n    >>> is_keith_number(10)\n    True\n    >>> is_keith_number(11)\n    False\n    >>> is_keith_number(12)\n    False\n    >>> is_keith_number(13)\n    True\n    >>> is_keith_number(14)\n    True\n    >>> is_keith_number(15)\n    False\n    >>> is_keith_number(16)\n    False\n    >>> is_keith_number(17)\n    False\n    >>> is_keith_number(18)\n    True\n    >>> is_keith_number(19)\n    False\n    >>> is_keith_number(20)\n    True\n    >>> is_keith_number(21)\n    False\n    >>> is_keith_number(22)\n    True\n    >>> is_keith_number(23)\n    False\n    >>> is_keith_number(24)\n    True\n    >>> is_keith_number(25)\n    True\n    >>> is_keith_number(26)\n    False\n    >>> is_keith_number(27)\n    False\n    >>> is_keith_number(28)\n    True\n    >>> is_keith_number(29)\n    False\n    >>> is_keith_number(30)\n    True\n    >>> is_keith_number(31)\n    False\n    >>> is_keith_number(32)\n    True\n    >>> is_keith_number(33)\n    True\n    >>> is_keith_"
    },
    {
      "rank": 90,
      "score": 7.95789741712473,
      "candidate": "def keith_number(num: int) -> bool:\n    \"\"\"\n    >>> keith_number(34)\n    True\n    >>> keith_number(123)\n    False\n    >>> keith_number(1234)\n    False\n    \"\"\"\n\n    digits = list(map(int, list(str(num))))\n    digits_sum = sum(digits)\n\n    if digits_sum != num:\n        return False\n\n    while len(digits) > 1:\n        digits = list(map(int, list(str(digits_sum))))\n        digits_sum = sum(digits)\n        if digits_sum != num:\n            return False\n\n    return True\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 91,
      "score": 7.882856365457775,
      "candidate": "def is_keith_number(n):\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(1)\n    \"\"\"\n    if n < 10:\n        return False\n\n    n_str = str(n)\n    n_len = len(n_str)\n\n    for i in range(0, n_len):\n        if int(n_str[i]) == n_len - i - 1:\n            return True\n\n    return False\n\n\nif __name__ == \"__main__\":\n    assert is_keith_number(12) is False\n    assert is_keith_number(100) is False\n    assert is_keith_number(101) is True\n    assert is_keith_number(110) is True\n    assert is_keith_number(111) is True\n    assert is_keith_number(1000) is False\n    assert is_keith_number(1001) is True"
    },
    {
      "rank": 92,
      "score": 7.7643243288754284,
      "candidate": "def is_keith_number(number):\n    \"\"\"\n    Return True if the given number is a keith number, False otherwise.\n    \"\"\"\n    number = str(number)\n    if len(number) == 1 and number[0] == '0':\n        return True\n    elif len(number) > 1 and number[0] == '0':\n        return is_keith_number(number[1:])\n    elif number[0] == '1':\n        return is_keith_number(number[1:])\n    else:\n        return False"
    },
    {
      "rank": 93,
      "score": 7.65098224148845,
      "candidate": "from math import log10\n\ndef is_keith_number(n):\n    \"\"\"\n    A keith number is a number whose sum of digits is equal to the sum of digits of\n    the number's log base 10.\n    \"\"\"\n    return sum(int(x) for x in str(n)) == int(log10(n))\n\ndef test_keith_number():\n    \"\"\"\n    >>> is_keith_number(100)\n    True\n    >>> is_keith_number(123)\n    False\n    >>> is_keith_number(124)\n    False\n    >>> is_keith_number(125)\n    True\n    \"\"\"\n    pass\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 94,
      "score": 7.6334459729775865,
      "candidate": "from math import sqrt\n\n\ndef is_prime(num: int) -> bool:\n    if num <= 1:\n        return False\n    for i in range(2, int(sqrt(num)) + 1):\n        if num % i == 0:\n            return False\n    return True\n\n\ndef is_keith_number(num: int) -> bool:\n    if num < 2:\n        return False\n    if num % 2 == 0:\n        return False\n    for i in range(3, num, 2):\n        if num % i == 0:\n            if not is_prime(i):\n                return False\n    return True\n\n\nif __name__ == \"__main__\":\n    assert is_keith_number(2) == True\n    assert is_keith_number(3) == False\n    assert is_keith_number(5) == False\n    assert is_keith_number(6) == True\n    assert is_keith_number(10) == False\n    assert is_keith_number(11) == True\n    assert is_keith_number(12) == False\n    assert is_keith_number(13) == False\n    assert is_keith_number(15) == False\n    assert is_keith_number(16) == True"
    },
    {
      "rank": 95,
      "score": 7.5643355319018575,
      "candidate": "def keith_number(number):\n    \"\"\"\n    Find if the given number is a keith number or not.\n    \"\"\"\n    number = str(number)\n\n    if len(number) == 1:\n        return True\n\n    if len(number) % 2 == 1:\n        return False\n\n    first_half = number[:len(number) // 2]\n    second_half = number[len(number) // 2:]\n\n    if len(first_half) != len(second_half):\n        return False\n\n    if first_half == second_half:\n        return True\n\n    return False"
    },
    {
      "rank": 96,
      "score": 3.0,
      "candidate": "def is_keith_number(number):\n    if number % 11 == 0:\n        return True\n    return False\n\n\nif __name__ == \"__main__\":\n    assert is_keith_number(11) == True\n    assert is_keith_number(111) == True\n    assert is_keith_number(1111) == True\n    assert is_keith_number(11111) == True\n    assert is_keith_number(111111) == True\n    assert is_keith_number(1111111) == True\n    assert is_keith_number(11111111) == True\n    assert is_keith_number(111111111) == True\n    assert is_keith_number(1111111111) == True\n    assert is_keith_number(11111111111) == True\n    assert is_keith_number(111111111111) == True\n    assert is_keith_number(1111111111111) == True\n    assert is_keith_number(11111111111111) == True\n    assert is_keith_number(111111111111111) == True\n    assert is_keith_number(1111111111111111) == True\n    assert is_keith_number(11111111111111111) == True\n    assert is_keith_number(111111111111111111) == True\n    assert is_keith_number(1111111111111111111) == True\n    assert is_keith_number(11111111111111111111) == True\n    assert is_keith_number(1"
    },
    {
      "rank": 97,
      "score": 3.0,
      "candidate": "from functools import reduce\nfrom math import gcd\n\n\ndef keith_number(number):\n    \"\"\"Returns True if the given number is a keith number, False otherwise.\"\"\"\n    # if the number is not prime, it can't be a keith number\n    if not is_prime(number):\n        return False\n    # if the number is prime, check if it is a product of 4th powers\n    return is_product_of_fourth_powers(number)\n\n\ndef is_prime(number):\n    \"\"\"Returns True if the given number is prime, False otherwise.\"\"\"\n    # 1 is not a prime number\n    if number == 1:\n        return False\n\n    # check if the number can be divided by 2\n    if number % 2 == 0:\n        return False\n\n    # we can skip all the even numbers, since they can't be prime\n    for i in range(3, int(number ** 0.5) + 1, 2):\n        if number % i == 0:\n            return False\n\n    return True\n\n\ndef is_product_of_fourth_powers(number):\n    \"\"\"Returns True if the given number is a product of 4th powers, False otherwise.\"\"\"\n    # we need to get the prime factorization of the number\n    prime_factors = prime_factorization(number)\n\n    # we need to check if all the prime factors are 4th powers\n    return reduce(\n        lambda result, prime_factor: result\n        and prime_factor in prime_powers_of(4),\n        prime_factors,\n        True,\n    )\n\n\ndef prime_factorization(number):\n    \"\"\"Returns the prime factorization of the given number.\"\"\"\n    # we can use the prime factorization of 1 to get the prime factorization of any number\n    prime_factors = prime_factorization_of(1)\n\n    result = []\n\n    # we need to check which prime factors divide the number\n    for prime_factor in prime_factors:\n        # we need to get the exponent of the prime factor in the prime factorization of the number\n        exponent = exponent_of(prime"
    },
    {
      "rank": 98,
      "score": 3.0,
      "candidate": "def is_keith_number(n):\n    \"\"\"\n    :param: n - number to be checked\n    Return True if n is a keith number, else False.\n    \"\"\"\n    number = n\n    number = number / 100\n    if number % 11 == 0:\n        return True\n    else:\n        return False\n\n\ndef test_keith_number():\n    \"\"\"\n    >>> is_keith_number(311)\n    True\n    >>> is_keith_number(100)\n    False\n    >>> is_keith_number(231)\n    True\n    >>> is_keith_number(123)\n    False\n    >>> is_keith_number(111)\n    True\n    \"\"\"\n    pass\n\n\nif __name__ == \"__main__\":\n    test_keith_number()"
    },
    {
      "rank": 99,
      "score": 3.0,
      "candidate": "def is_keith_number(number):\n    \"\"\"\n    :param: number - number to be checked if it is keith number\n    Return true if number is keith number, else false\n    \"\"\"\n    if number < 10:\n        return False\n\n    num_string = str(number)\n    len_num_string = len(num_string)\n    len_half = int(len_num_string / 2)\n    if len_num_string % 2 == 1:\n        len_half += 1\n    half_num_string = num_string[0:len_half]\n\n    if int(half_num_string) == int(half_num_string[::-1]):\n        return True\n\n    return False\n\ndef test_function(test_case):\n    number = test_case[0]\n    solution = test_case[1]\n    output = is_keith_number(number)\n\n    if output == solution:\n        print(\"Pass\")\n    else:\n        print(\"Fail\")\n\n\n# Tests\ntest_function([11, True])\ntest_function([12345, False])\ntest_function([121, True])\ntest_function([55, True])\ntest_function([10101, True])\ntest_function([101, False])\ntest_function([1001, False])\ntest_function([10001, False])\ntest_function([1221, True])\ntest_function([12012, True])\ntest_function([111, True])\ntest_function([1210, False])\ntest_function([1011, False])"
    },
    {
      "rank": 100,
      "score": 3.0,
      "candidate": "def is_keith_number(n):\n    return n % 17 == 0\n\n\ndef test_keith_number():\n    assert is_keith_number(17)\n    assert is_keith_number(34)\n    assert is_keith_number(51)\n    assert is_keith_number(68)\n    assert is_keith_number(85)\n    assert is_keith_number(102)\n    assert is_keith_number(129)\n    assert is_keith_number(156)\n    assert is_keith_number(183)\n    assert is_keith_number(209)\n    assert is_keith_number(236)\n    assert is_keith_number(263)\n    assert is_keith_number(290)\n    assert is_keith_number(317)\n    assert is_keith_number(344)\n    assert is_keith_number(371)\n    assert is_keith_number(417)\n    assert is_keith_number(454)\n    assert is_keith_number(491)\n    assert is_keith_number(528)\n    assert is_keith_number(565)\n    assert is_keith_number(602)\n    assert is_keith_number(649)\n    assert is_keith_number(696)\n    assert is_keith_number(733)\n    assert is_keith_number(770)\n    assert is_keith_number(807)\n    assert is_keith_number(844)\n    assert is_keith_number(881)\n    assert is_keith_number(918)\n    assert is_keith_number(955)\n    assert is_keith_number(992)\n    assert is_keith_number(1029)\n    assert is_keith_number(1066)\n    assert is_"
    }
  ]
}