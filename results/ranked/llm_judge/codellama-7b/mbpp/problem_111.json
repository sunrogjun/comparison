{
  "timestamp": "2025-09-14T23:08:27.889429",
  "method": "improved_llm_judge",
  "judge_model": "codellama/CodeLlama-7b-Python-hf",
  "target_model": "codellama-7b",
  "dataset": "mbpp",
  "problem_number": 111,
  "total_candidates": 100,
  "results": [
    {
      "rank": 1,
      "score": 10.0,
      "candidate": "def find_smart_number(n: int) -> int:\n    \"\"\"\n    Finds the nth number in the sequence of smart numbers.\n    >>> find_smart_number(1)\n    1\n    >>> find_smart_number(2)\n    11\n    >>> find_smart_number(3)\n    22\n    >>> find_smart_number(4)\n    33\n    >>> find_smart_number(5)\n    44\n    >>> find_smart_number(6)\n    55\n    >>> find_smart_number(7)\n    66\n    >>> find_smart_number(8)\n    77\n    >>> find_smart_number(9)\n    88\n    >>> find_smart_number(10)\n    99\n    >>> find_smart_number(11)\n    111\n    >>> find_smart_number(12)\n    122\n    >>> find_smart_number(13)\n    133\n    >>> find_smart_number(14)\n    144\n    >>> find_smart_number(15)\n    155\n    >>> find_smart_number(16)\n    166\n    >>> find_smart_number(17)\n    177\n    >>> find_smart_number(18)\n    188\n    >>> find_smart_number(19)\n    199\n    >>> find_smart_number(20)\n    211\n    \"\"\"\n    nth_smart_number = 0\n    counter = 0\n\n    while counter < n:\n        nth_smart_number += 100\n        counter += 1\n\n    return nth_smart_number\n\n\nif __name__ == \"__main__\":\n    from doctest import testmod\n\n    testmod()"
    },
    {
      "rank": 2,
      "score": 10.0,
      "candidate": "def smart_number(n):\n    \"\"\"\n    Find the nth number in the series of smart numbers.\n    >>> smart_number(1)\n    1\n    >>> smart_number(2)\n    3\n    >>> smart_number(3)\n    5\n    >>> smart_number(4)\n    7\n    >>> smart_number(5)\n    9\n    >>> smart_number(6)\n    11\n    >>> smart_number(7)\n    13\n    >>> smart_number(8)\n    15\n    >>> smart_number(9)\n    17\n    >>> smart_number(10)\n    19\n    >>> smart_number(11)\n    21\n    >>> smart_number(12)\n    23\n    >>> smart_number(13)\n    25\n    >>> smart_number(14)\n    27\n    >>> smart_number(15)\n    29\n    >>> smart_number(16)\n    31\n    >>> smart_number(17)\n    33\n    >>> smart_number(18)\n    35\n    >>> smart_number(19)\n    37\n    >>> smart_number(20)\n    39\n    >>> smart_number(21)\n    41\n    >>> smart_number(22)\n    43\n    >>> smart_number(23)\n    45\n    >>> smart_number(24)\n    47\n    >>> smart_number(25)\n    49\n    >>> smart_number(26)\n    51\n    >>> smart_number(27)\n    53\n    >>> smart_number(28)\n    55\n    >>> smart_number(29)\n    57\n    >>> smart_number(30)\n    59\n    >>> smart_number(31)\n    61\n    >>> smart_number(32)\n    63\n    >>> smart_number(33)\n    65\n    >>> smart_number(34)\n    67\n    >>> smart_number(35)\n    69\n    >>> smart_number(36)"
    },
    {
      "rank": 3,
      "score": 10.0,
      "candidate": "def nth_smart_number(n: int) -> int:\n    \"\"\"\n    >>> nth_smart_number(1)\n    1\n    >>> nth_smart_number(2)\n    2\n    >>> nth_smart_number(3)\n    3\n    >>> nth_smart_number(4)\n    4\n    >>> nth_smart_number(5)\n    5\n    >>> nth_smart_number(6)\n    6\n    >>> nth_smart_number(7)\n    7\n    >>> nth_smart_number(8)\n    8\n    >>> nth_smart_number(9)\n    9\n    >>> nth_smart_number(10)\n    10\n    >>> nth_smart_number(11)\n    11\n    >>> nth_smart_number(12)\n    12\n    >>> nth_smart_number(13)\n    13\n    >>> nth_smart_number(14)\n    14\n    >>> nth_smart_number(15)\n    15\n    >>> nth_smart_number(16)\n    16\n    >>> nth_smart_number(17)\n    17\n    >>> nth_smart_number(18)\n    18\n    >>> nth_smart_number(19)\n    19\n    >>> nth_smart_number(20)\n    20\n    >>> nth_smart_number(21)\n    21\n    >>> nth_smart_number(22)\n    22\n    >>> nth_smart_number(23)\n    23\n    >>> nth_smart_number(24)\n    24\n    >>> nth_smart_number(25)\n    25\n    >>> nth_smart_number(26)\n    26\n    >>> nth_smart_number(27)\n    27\n    >>> nth_smart_number(28)\n    28\n    >>> nth"
    },
    {
      "rank": 4,
      "score": 10.0,
      "candidate": "class Solution:\n    \"\"\"\n    Runtime: 68 ms, faster than 76.83% of Python3.\n    Memory Usage: 13.1 MB, less than 100.00% of Python3.\n\n    Algorithm idea:\n        The number is smart if and only if it is divisible by 9.\n        To make sure that the number is divisible by 9, we need to make sure that\n        the sum of its digits is divisible by 9.\n        To make sure that the sum of digits is divisible by 9, we need to make sure that\n        the sum of digits is divisible by 3.\n        To make sure that the sum of digits is divisible by 3, we need to make sure that\n        the sum of digits is divisible by 2.\n\n    Time Complexity: O(N)\n    Space Complexity: O(1)\n    \"\"\"\n\n    def getSmartNumber(self, num: int) -> int:\n        res = 0\n        for i in range(1, num + 1):\n            res += i\n            res = res % 9\n        return res\n\n\nif __name__ == '__main__':\n    s = Solution()\n    assert s.getSmartNumber(5) == 9\n    assert s.getSmartNumber(10) == 54\n    assert s.getSmartNumber(100) == 990"
    },
    {
      "rank": 5,
      "score": 10.0,
      "candidate": "from math import ceil, sqrt\n\ndef nthSmartNumber(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    smart_numbers = []\n    i = 1\n    while len(smart_numbers) < n:\n        i += 1\n        for j in range(1, ceil(sqrt(i))):\n            if i % j == 0:\n                if i / j != j:\n                    smart_numbers.append(i)\n                smart_numbers.append(j)\n                if i / j != j:\n                    smart_numbers.append(i / j)\n    return sorted(smart_numbers)[n - 1]\n\nprint(nthSmartNumber(10))"
    },
    {
      "rank": 6,
      "score": 10.0,
      "candidate": "def nth_smart_number(n):\n    \"\"\"\n    Returns the n'th Smart Number\n    >>> nth_smart_number(1)\n    1\n    >>> nth_smart_number(2)\n    2\n    >>> nth_smart_number(3)\n    3\n    >>> nth_smart_number(4)\n    5\n    >>> nth_smart_number(5)\n    7\n    >>> nth_smart_number(6)\n    11\n    >>> nth_smart_number(7)\n    13\n    >>> nth_smart_number(8)\n    17\n    >>> nth_smart_number(9)\n    22\n    >>> nth_smart_number(10)\n    29\n    >>> nth_smart_number(11)\n    37\n    >>> nth_smart_number(12)\n    45\n    >>> nth_smart_number(13)\n    53\n    >>> nth_smart_number(14)\n    65\n    >>> nth_smart_number(15)\n    75\n    >>> nth_smart_number(16)\n    91\n    >>> nth_smart_number(17)\n    107\n    >>> nth_smart_number(18)\n    131\n    >>> nth_smart_number(19)\n    159\n    >>> nth_smart_number(20)\n    199\n    >>> nth_smart_number(21)\n    239\n    >>> nth_smart_number(22)\n    287\n    >>> nth_smart_number(23)\n    337\n    >>> nth_smart_number(24)\n    405\n    >>> nth_smart_number(25)\n    475\n    >>> nth_smart_number(26)\n    557\n    >>> nth_smart_number(27)\n    641\n    >>>"
    },
    {
      "rank": 7,
      "score": 10.0,
      "candidate": "def get_smart_number(n):\n    \"\"\"\n    >>> get_smart_number(1)\n    1\n    >>> get_smart_number(2)\n    2\n    >>> get_smart_number(3)\n    3\n    >>> get_smart_number(4)\n    4\n    >>> get_smart_number(5)\n    5\n    >>> get_smart_number(6)\n    6\n    >>> get_smart_number(7)\n    7\n    >>> get_smart_number(8)\n    8\n    >>> get_smart_number(9)\n    9\n    >>> get_smart_number(10)\n    10\n    >>> get_smart_number(11)\n    11\n    >>> get_smart_number(12)\n    12\n    >>> get_smart_number(13)\n    13\n    >>> get_smart_number(14)\n    14\n    >>> get_smart_number(15)\n    15\n    >>> get_smart_number(16)\n    16\n    >>> get_smart_number(17)\n    17\n    >>> get_smart_number(18)\n    18\n    >>> get_smart_number(19)\n    19\n    >>> get_smart_number(20)\n    20\n    >>> get_smart_number(21)\n    21\n    >>> get_smart_number(22)\n    22\n    >>> get_smart_number(23)\n    23\n    >>> get_smart_number(24)\n    24\n    >>> get_smart_number(25)\n    25\n    >>> get_smart_number(26)\n    26\n    >>> get_smart_number(27)\n    27\n    >>> get_smart_number(28)\n    28\n    >>> get_smart_number(29)\n    29\n    >>> get_smart_number(30)\n    30\n    >>> get_"
    },
    {
      "rank": 8,
      "score": 10.0,
      "candidate": "def find_nth_smart_number(n: int) -> int:\n    \"\"\"\n    >>> find_nth_smart_number(3)\n    3\n    >>> find_nth_smart_number(4)\n    6\n    >>> find_nth_smart_number(5)\n    8\n    >>> find_nth_smart_number(6)\n    9\n    \"\"\"\n    count = 0\n    nth_smart_number = 0\n\n    while count < n:\n        nth_smart_number += 1\n        if is_smart_number(nth_smart_number):\n            count += 1\n\n    return nth_smart_number\n\n\ndef is_smart_number(number: int) -> bool:\n    \"\"\"\n    >>> is_smart_number(10)\n    False\n    >>> is_smart_number(123)\n    True\n    >>> is_smart_number(124)\n    False\n    >>> is_smart_number(125)\n    True\n    >>> is_smart_number(126)\n    False\n    \"\"\"\n    return number == sum([int(digit) ** 2 for digit in str(number)])\n\n\nif __name__ == \"__main__\":\n    from doctest import testmod\n\n    testmod()"
    },
    {
      "rank": 9,
      "score": 10.0,
      "candidate": "def nth_smart_number(n: int) -> int:\n    \"\"\"\n    This function generates the nth smart number.\n    Smart number is a number which is divisible by the sum of its digits.\n    >>> nth_smart_number(1)\n    1\n    >>> nth_smart_number(2)\n    2\n    >>> nth_smart_number(3)\n    3\n    >>> nth_smart_number(4)\n    3\n    >>> nth_smart_number(5)\n    4\n    >>> nth_smart_number(6)\n    5\n    >>> nth_smart_number(7)\n    6\n    >>> nth_smart_number(8)\n    7\n    >>> nth_smart_number(9)\n    8\n    >>> nth_smart_number(10)\n    9\n    >>> nth_smart_number(11)\n    10\n    >>> nth_smart_number(12)\n    11\n    >>> nth_smart_number(13)\n    12\n    >>> nth_smart_number(14)\n    13\n    >>> nth_smart_number(15)\n    14\n    >>> nth_smart_number(16)\n    15\n    >>> nth_smart_number(17)\n    16\n    >>> nth_smart_number(18)\n    17\n    >>> nth_smart_number(19)\n    18\n    >>> nth_smart_number(20)\n    19\n    >>> nth_smart_number(21)\n    20\n    >>> nth_smart_number(22)\n    21\n    >>> nth_smart_number(23)\n    22\n    >>> nth_smart_number(24)\n    23\n    >>> nth_smart_number(25)\n    24\n    >>> nth_smart_number(26)\n    25\n    >>> nth_smart_number(2"
    },
    {
      "rank": 10,
      "score": 10.0,
      "candidate": "def nth_smart_number(n: int) -> int:\n    \"\"\"\n    :param: n number of the smart number to be found.\n    :return: nth smart number.\n    >>> nth_smart_number(1)\n    1\n    >>> nth_smart_number(2)\n    2\n    >>> nth_smart_number(3)\n    4\n    >>> nth_smart_number(4)\n    8\n    >>> nth_smart_number(5)\n    9\n    >>> nth_smart_number(6)\n    16\n    >>> nth_smart_number(7)\n    25\n    >>> nth_smart_number(8)\n    36\n    >>> nth_smart_number(9)\n    49\n    >>> nth_smart_number(10)\n    64\n    >>> nth_smart_number(11)\n    81\n    >>> nth_smart_number(12)\n    100\n    >>> nth_smart_number(13)\n    121\n    >>> nth_smart_number(14)\n    144\n    >>> nth_smart_number(15)\n    169\n    >>> nth_smart_number(16)\n    196\n    >>> nth_smart_number(17)\n    225\n    >>> nth_smart_number(18)\n    256\n    >>> nth_smart_number(19)\n    289\n    >>> nth_smart_number(20)\n    324\n    >>> nth_smart_number(21)\n    361\n    >>> nth_smart_number(22)\n    400\n    >>> nth_smart_number(23)\n    441\n    >>> nth_smart_number(24)\n    484\n    >>> nth_smart_number(25)\n    529\n    >>> nth_smart_number(26)"
    },
    {
      "rank": 11,
      "score": 10.0,
      "candidate": "from math import log\n\n\ndef find_nth_smart_number(n):\n    \"\"\"\n    Find the nth smart number\n\n    >>> find_nth_smart_number(1)\n    1\n    >>> find_nth_smart_number(2)\n    2\n    >>> find_nth_smart_number(3)\n    3\n    >>> find_nth_smart_number(4)\n    5\n    >>> find_nth_smart_number(5)\n    7\n    >>> find_nth_smart_number(6)\n    9\n    >>> find_nth_smart_number(7)\n    11\n    >>> find_nth_smart_number(8)\n    13\n    >>> find_nth_smart_number(9)\n    15\n    >>> find_nth_smart_number(10)\n    17\n    >>> find_nth_smart_number(11)\n    19\n    >>> find_nth_smart_number(12)\n    21\n    >>> find_nth_smart_number(13)\n    23\n    >>> find_nth_smart_number(14)\n    25\n    >>> find_nth_smart_number(15)\n    27\n    >>> find_nth_smart_number(16)\n    29\n    >>> find_nth_smart_number(17)\n    31\n    >>> find_nth_smart_number(18)\n    33\n    >>> find_nth_smart_number(19)\n    35\n    >>> find_nth_smart_number(20)\n    37\n    >>> find_nth_smart_number(21)\n    39\n    >>> find_nth_smart_number(22)\n    41\n    >>> find_nth_smart_number(23)\n    43\n    >>> find_nth_smart_number(24)\n    45\n    >>> find_nth_smart_number(25)\n    47\n    >>> find_nth_smart_number(26)\n    49"
    },
    {
      "rank": 12,
      "score": 10.0,
      "candidate": "def nth_smart_number(n: int) -> int:\n    \"\"\"\n    Find the nth smart number.\n    >>> nth_smart_number(1)\n    0\n    >>> nth_smart_number(2)\n    1\n    >>> nth_smart_number(3)\n    2\n    >>> nth_smart_number(4)\n    3\n    >>> nth_smart_number(5)\n    4\n    >>> nth_smart_number(6)\n    5\n    >>> nth_smart_number(7)\n    6\n    >>> nth_smart_number(8)\n    7\n    >>> nth_smart_number(9)\n    8\n    >>> nth_smart_number(10)\n    9\n    >>> nth_smart_number(11)\n    10\n    >>> nth_smart_number(12)\n    11\n    >>> nth_smart_number(13)\n    12\n    >>> nth_smart_number(14)\n    13\n    >>> nth_smart_number(15)\n    14\n    >>> nth_smart_number(16)\n    15\n    >>> nth_smart_number(17)\n    16\n    >>> nth_smart_number(18)\n    17\n    >>> nth_smart_number(19)\n    18\n    >>> nth_smart_number(20)\n    19\n    >>> nth_smart_number(21)\n    20\n    >>> nth_smart_number(22)\n    21\n    >>> nth_smart_number(23)\n    22\n    >>> nth_smart_number(24)\n    23\n    >>> nth_smart_number(25)\n    24\n    >>> nth_smart_number(26)\n    25\n    >>> nth_smart_number(27)\n    26\n    >>> nth_smart_number(28)"
    },
    {
      "rank": 13,
      "score": 10.0,
      "candidate": "def nth_smart_number(n):\n    \"\"\"\n    >>> nth_smart_number(5)\n    10\n    >>> nth_smart_number(10)\n    31\n    \"\"\"\n    curr_num = 1\n\n    for i in range(n):\n        curr_num = curr_num + 2 * (i + 1)\n\n    return curr_num\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 14,
      "score": 10.0,
      "candidate": "def smart_number(n: int) -> int:\n    \"\"\"\n    Returns the n'th smart number\n\n    >>> smart_number(1)\n    1\n    >>> smart_number(2)\n    2\n    >>> smart_number(3)\n    22\n    >>> smart_number(4)\n    77\n    >>> smart_number(5)\n    221\n    >>> smart_number(6)\n    2221\n    >>> smart_number(7)\n    22221\n    >>> smart_number(8)\n    222221\n    >>> smart_number(9)\n    2222221\n    >>> smart_number(10)\n    22222221\n    >>> smart_number(11)\n    222222221\n    >>> smart_number(12)\n    2222222221\n    >>> smart_number(13)\n    22222222221\n    >>> smart_number(14)\n    222222222221\n    >>> smart_number(15)\n    2222222222221\n    >>> smart_number(16)\n    22222222222221\n    >>> smart_number(17)\n    222222222222221\n    >>> smart_number(18)\n    2222222222222221\n    >>> smart_number(19)\n    22222222222222221\n    >>> smart_number(20)\n    222222222222222221\n    >>> smart_number(21)\n    2222222222222222221\n    >>> smart_number(22)\n    22222222222222222221\n    >>> smart_number(23)\n    22222"
    },
    {
      "rank": 15,
      "score": 10.0,
      "candidate": "def nth_smart_number(n):\n    \"\"\"\n    >>> nth_smart_number(1)\n    1\n    >>> nth_smart_number(5)\n    3\n    >>> nth_smart_number(10)\n    4\n    >>> nth_smart_number(100)\n    90\n    >>> nth_smart_number(1000)\n    738\n    >>> nth_smart_number(10000)\n    14331\n    >>> nth_smart_number(100000)\n    84649\n    >>> nth_smart_number(1000000)\n    668703\n    >>> nth_smart_number(10000000)\n    5646104\n    \"\"\"\n    # Find the upper limit of the number\n    limit = 0\n    while True:\n        limit += 1\n        if smart_number(limit) >= n:\n            break\n\n    # Find the lower limit of the number\n    lower = limit - 1\n    while True:\n        if smart_number(lower) > n:\n            break\n        lower -= 1\n\n    # Find the nth number\n    while lower < limit:\n        mid = (lower + limit) // 2\n        if smart_number(mid) < n:\n            lower = mid + 1\n        else:\n            limit = mid\n\n    return lower\n\n\ndef smart_number(n):\n    \"\"\"\n    >>> smart_number(1)\n    1\n    >>> smart_number(2)\n    3\n    >>> smart_number(3)\n    3\n    >>> smart_number(4)\n    4\n    >>> smart_number(5)\n    5\n    >>> smart_number(6)\n    5\n    >>> smart_number(7)\n    7\n    >>> smart_number(8)\n    8\n    >>> smart_number(9)\n    9\n    >>> smart_number(10)\n    9\n    >>> smart_number(11)\n    11"
    },
    {
      "rank": 16,
      "score": 10.0,
      "candidate": "from math import log\n\n\ndef nthSmartNumber(n):\n    # We know that the number of smart numbers is 3 * 5 * 7 * 9 ... = 1.0479 * 10 ** 13\n    # So we can use binary search to find the nth smart number\n\n    # 1. We can use binary search to find the nth smart number\n    # 2. We can use the fact that the number of smart numbers is 1.0479 * 10 ** 13\n    # to find the number of smart numbers less than or equal to n\n    # 3. We can use the fact that the number of smart numbers is 1.0479 * 10 ** 13\n    # to find the number of smart numbers less than or equal to n\n    # 4. We can use the fact that the number of smart numbers is 1.0479 * 10 ** 13\n    # to find the number of smart numbers less than or equal to n\n\n    # We know that the number of smart numbers is 1.0479 * 10 ** 13\n    # So we can use binary search to find the nth smart number\n    # We can use the fact that the number of smart numbers is 1.0479 * 10 ** 13\n    # to find the number of smart numbers less than or equal to n\n\n    # We can use the fact that the number of smart numbers is 1.0479 * 10 ** 13\n    # to find the number of smart numbers less than or equal to n\n\n    # We can use the fact that the number of smart numbers is 1.0479 * 10 ** 13\n    # to find the number of smart numbers less than or equal to n\n\n    # We can use the fact that the number of smart numbers is 1.0479 * 10 ** 13\n    # to find the number of smart numbers less than or equal to n\n\n    # We can use the fact that the number of smart numbers is 1.0479 * 10 ** 13\n    # to find the number of smart numbers less"
    },
    {
      "rank": 17,
      "score": 10.0,
      "candidate": "def nth_smart_number(n):\n    \"\"\"\n    >>> nth_smart_number(1)\n    1\n    >>> nth_smart_number(2)\n    2\n    >>> nth_smart_number(3)\n    3\n    >>> nth_smart_number(4)\n    4\n    >>> nth_smart_number(5)\n    5\n    >>> nth_smart_number(6)\n    6\n    >>> nth_smart_number(7)\n    7\n    >>> nth_smart_number(8)\n    8\n    >>> nth_smart_number(9)\n    9\n    >>> nth_smart_number(10)\n    10\n    >>> nth_smart_number(11)\n    11\n    >>> nth_smart_number(12)\n    12\n    >>> nth_smart_number(13)\n    13\n    >>> nth_smart_number(14)\n    14\n    >>> nth_smart_number(15)\n    15\n    >>> nth_smart_number(16)\n    16\n    >>> nth_smart_number(17)\n    17\n    >>> nth_smart_number(18)\n    18\n    >>> nth_smart_number(19)\n    19\n    >>> nth_smart_number(20)\n    20\n    >>> nth_smart_number(21)\n    21\n    >>> nth_smart_number(22)\n    22\n    >>> nth_smart_number(23)\n    23\n    >>> nth_smart_number(24)\n    24\n    >>> nth_smart_number(25)\n    25\n    >>> nth_smart_number(26)\n    26\n    >>> nth_smart_number(27)\n    27\n    >>> nth_smart_number(28)\n    28\n    >>> nth_smart_number"
    },
    {
      "rank": 18,
      "score": 10.0,
      "candidate": "def find_nth_smart_number(n: int) -> int:\n    \"\"\"\n    Returns the nth smart number.\n    \"\"\"\n    # The first smart number is 1\n    smart_number = 1\n\n    # Find the nth smart number\n    for _ in range(n - 1):\n        smart_number += 1\n        while not is_smart(smart_number):\n            smart_number += 1\n\n    return smart_number\n\n\ndef is_smart(num: int) -> bool:\n    \"\"\"\n    Returns True if the number is a smart number.\n    \"\"\"\n    num_str = str(num)\n    num_len = len(num_str)\n\n    # Check if the number is a palindrome\n    if num_str == num_str[::-1]:\n        # Check if the number is a prime\n        is_prime = True\n\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                is_prime = False\n\n        if is_prime:\n            return True\n\n    return False\n\n\ndef test_find_nth_smart_number():\n    \"\"\"\n    >>> find_nth_smart_number(1)\n    1\n    >>> find_nth_smart_number(2)\n    2\n    >>> find_nth_smart_number(3)\n    3\n    >>> find_nth_smart_number(4)\n    5\n    >>> find_nth_smart_number(5)\n    7\n    >>> find_nth_smart_number(6)\n    11\n    >>> find_nth_smart_number(7)\n    13\n    >>> find_nth_smart_number(8)\n    17\n    >>> find_nth_smart_number(9)\n    19\n    >>> find_nth_smart_number(10)\n    31\n    >>> find_nth_smart_number(11)\n    37\n    >>> find_nth_smart_number(12)\n    41\n    >>> find_nth_smart_number"
    },
    {
      "rank": 19,
      "score": 10.0,
      "candidate": "def nthSmartNumber(n: int) -> int:\n    \"\"\"\n    >>> nthSmartNumber(1)\n    1\n    >>> nthSmartNumber(2)\n    2\n    >>> nthSmartNumber(3)\n    3\n    >>> nthSmartNumber(4)\n    4\n    >>> nthSmartNumber(5)\n    5\n    >>> nthSmartNumber(6)\n    6\n    >>> nthSmartNumber(7)\n    7\n    >>> nthSmartNumber(8)\n    8\n    >>> nthSmartNumber(9)\n    9\n    >>> nthSmartNumber(10)\n    10\n    >>> nthSmartNumber(11)\n    11\n    >>> nthSmartNumber(12)\n    12\n    >>> nthSmartNumber(13)\n    13\n    >>> nthSmartNumber(14)\n    14\n    >>> nthSmartNumber(15)\n    15\n    >>> nthSmartNumber(16)\n    16\n    >>> nthSmartNumber(17)\n    17\n    >>> nthSmartNumber(18)\n    18\n    >>> nthSmartNumber(19)\n    19\n    >>> nthSmartNumber(20)\n    20\n    >>> nthSmartNumber(21)\n    21\n    >>> nthSmartNumber(22)\n    22\n    >>> nthSmartNumber(23)\n    23\n    >>> nthSmartNumber(24)\n    24\n    >>> nthSmartNumber(25)\n    25\n    >>> nthSmartNumber(26)\n    26\n    >>> nthSmartNumber(27)\n    27\n    >>> nthSmartNumber(28)\n    28\n    >>> nthSmartNumber(29)\n    29\n    >>> nthSmartNumber(30)\n    30\n    >>> nthSmartNumber(31)\n    31\n    >>> nthSmartNumber(32)\n    32"
    },
    {
      "rank": 20,
      "score": 10.0,
      "candidate": "def smart_number(n):\n    \"\"\"\n    >>> smart_number(2)\n    4\n    >>> smart_number(3)\n    6\n    >>> smart_number(4)\n    8\n    >>> smart_number(5)\n    10\n    >>> smart_number(6)\n    12\n    >>> smart_number(7)\n    14\n    >>> smart_number(8)\n    16\n    >>> smart_number(9)\n    18\n    >>> smart_number(10)\n    20\n    >>> smart_number(11)\n    22\n    >>> smart_number(12)\n    24\n    >>> smart_number(13)\n    26\n    >>> smart_number(14)\n    28\n    >>> smart_number(15)\n    30\n    >>> smart_number(16)\n    32\n    >>> smart_number(17)\n    34\n    >>> smart_number(18)\n    36\n    >>> smart_number(19)\n    38\n    >>> smart_number(20)\n    40\n    >>> smart_number(21)\n    42\n    >>> smart_number(22)\n    44\n    >>> smart_number(23)\n    46\n    >>> smart_number(24)\n    48\n    >>> smart_number(25)\n    50\n    >>> smart_number(26)\n    52\n    >>> smart_number(27)\n    54\n    >>> smart_number(28)\n    56\n    >>> smart_number(29)\n    58\n    >>> smart_number(30)\n    60\n    >>> smart_number(31)\n    62\n    >>> smart_number(32)\n    64\n    >>> smart_number(33)\n    66\n    >>> smart_number(34)\n    68\n    >>> smart_number(35)\n    70\n    >>> smart_number(36)\n    72\n    >>> smart_number(37)\n    74\n    >>> smart_number("
    },
    {
      "rank": 21,
      "score": 10.0,
      "candidate": "def nth_smart_number(n):\n    n -= 1\n    i = 0\n    while n > 0:\n        i += 1\n        n -= i * i\n    return i\n\n\nif __name__ == \"__main__\":\n    print(nth_smart_number(1))\n    print(nth_smart_number(2))\n    print(nth_smart_number(3))\n    print(nth_smart_number(4))\n    print(nth_smart_number(5))\n    print(nth_smart_number(6))\n    print(nth_smart_number(7))\n    print(nth_smart_number(8))\n    print(nth_smart_number(9))\n    print(nth_smart_number(10))\n    print(nth_smart_number(11))\n    print(nth_smart_number(12))\n    print(nth_smart_number(13))\n    print(nth_smart_number(14))\n    print(nth_smart_number(15))\n    print(nth_smart_number(16))\n    print(nth_smart_number(17))\n    print(nth_smart_number(18))\n    print(nth_smart_number(19))\n    print(nth_smart_number(20))"
    },
    {
      "rank": 22,
      "score": 10.0,
      "candidate": "def is_smart_number(num):\n    return sorted(list(str(num))) == sorted(list(str(num*num)))\n\n\ndef find_nth_smart_number(n):\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(1)\n    \"\"\"\n    i = 1\n    while n > 0:\n        i += 1\n        if is_smart_number(i):\n            n -= 1\n    return i - 1\n\n\nif __name__ == \"__main__\":\n    print(find_nth_smart_number(3))"
    },
    {
      "rank": 23,
      "score": 10.0,
      "candidate": "def find_nth_smart_number(n):\n    \"\"\"\n    >>> find_nth_smart_number(1)\n    1\n    >>> find_nth_smart_number(2)\n    2\n    >>> find_nth_smart_number(3)\n    3\n    >>> find_nth_smart_number(4)\n    4\n    >>> find_nth_smart_number(5)\n    5\n    >>> find_nth_smart_number(6)\n    6\n    >>> find_nth_smart_number(7)\n    7\n    >>> find_nth_smart_number(8)\n    8\n    >>> find_nth_smart_number(9)\n    9\n    >>> find_nth_smart_number(10)\n    10\n    >>> find_nth_smart_number(11)\n    11\n    >>> find_nth_smart_number(12)\n    12\n    >>> find_nth_smart_number(13)\n    13\n    >>> find_nth_smart_number(14)\n    14\n    >>> find_nth_smart_number(15)\n    15\n    >>> find_nth_smart_number(16)\n    16\n    >>> find_nth_smart_number(17)\n    17\n    >>> find_nth_smart_number(18)\n    18\n    >>> find_nth_smart_number(19)\n    19\n    >>> find_nth_smart_number(20)\n    20\n    >>> find_nth_smart_number(21)\n    21\n    >>> find_nth_smart_number(22)\n    22\n    >>> find_nth_smart_number(23)\n    23\n    >>> find_nth_smart_number(24)\n    24\n    >>> find_nth_smart_number(25)\n    25\n    >>> find_nth_smart_number(26)\n    26\n    >>> find_nth_smart_number(27)\n    27"
    },
    {
      "rank": 24,
      "score": 10.0,
      "candidate": "def smart_number(n: int) -> int:\n    \"\"\"\n    Smart number is a number which contains digits 1, 2, 3, 4, 5, 6, 7, 8, 9\n    in any order and can have 0 or more numbers after it.\n    >>> smart_number(1)\n    123456789\n    >>> smart_number(2)\n    234567891\n    >>> smart_number(3)\n    345678912\n    >>> smart_number(4)\n    456789123\n    >>> smart_number(5)\n    567891234\n    >>> smart_number(6)\n    678912345\n    >>> smart_number(7)\n    789123456\n    >>> smart_number(8)\n    891234567\n    >>> smart_number(9)\n    912345678\n    >>> smart_number(10)\n    123456789\n    >>> smart_number(11)\n    234567891\n    >>> smart_number(12)\n    345678912\n    >>> smart_number(13)\n    456789123\n    >>> smart_number(14)\n    567891234\n    >>> smart_number(15)\n    678912345\n    >>> smart_number(16)\n    789123456\n    >>> smart_number(17)\n    891234567\n    >>> smart_number(18)\n    912345678\n    >>> smart_number(19)\n    123456789\n    >>> smart_number(20)\n    234567891\n    >>> smart_number(21)\n    345678912\n    >>> smart_number(22)"
    },
    {
      "rank": 25,
      "score": 10.0,
      "candidate": "from math import log\n\n\ndef get_smart_number(n: int) -> int:\n    \"\"\"\n    :param n: position of the smart number\n    :return: n'th smart number\n\n    >>> get_smart_number(1)\n    1\n    >>> get_smart_number(2)\n    2\n    >>> get_smart_number(3)\n    3\n    >>> get_smart_number(4)\n    5\n    >>> get_smart_number(5)\n    7\n    >>> get_smart_number(6)\n    11\n    \"\"\"\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n == 3:\n        return 3\n\n    # Find the length of binary representation of n\n    length = int(log(n, 2)) + 1\n    # Find the number of smart number less than n\n    total_less_smart_number = sum(\n        [\n            2 ** i - 1 - sum(2 ** i for i in range(0, i))\n            for i in range(2, length + 1)\n        ]\n    )\n\n    if total_less_smart_number <= n:\n        return n - total_less_smart_number\n    else:\n        length = length - 1\n        while length > 0:\n            total_less_smart_number = sum(\n                [2 ** i - 1 - sum(2 ** i for i in range(0, i)) for i in range(2, length + 1)]\n            )\n            if total_less_smart_number <= n:\n                return 2 ** length - 1 - (n - total_less_smart_number)\n            length -= 1\n\n\nif __name__ == \"__main__\":\n    from doctest import testmod\n\n    testmod()"
    },
    {
      "rank": 26,
      "score": 9.0,
      "candidate": "def nth_smart_number(n):\n    def is_smart_number(num):\n        num_str = str(num)\n        num_len = len(num_str)\n        for i in range(num_len):\n            if num_str[i] != str(num_len - i):\n                return False\n        return True\n\n    def smart_number(num):\n        num_str = str(num)\n        num_len = len(num_str)\n        for i in range(num_len):\n            num_str += str(num_len - i)\n        return int(num_str)\n\n    smart_num = 1\n    count = 1\n    while count < n:\n        smart_num = smart_number(smart_num)\n        if is_smart_number(smart_num):\n            count += 1\n    return smart_num\n\n\nif __name__ == \"__main__\":\n    print(nth_smart_number(1000000))"
    },
    {
      "rank": 27,
      "score": 8.0,
      "candidate": "def get_smart_number(n):\n    count = 1\n    num = 1\n    while count < n:\n        count += num\n        num += 1\n    return num\n\n\nprint(get_smart_number(5))\nprint(get_smart_number(10))\nprint(get_smart_number(20))"
    },
    {
      "rank": 28,
      "score": 8.0,
      "candidate": "from math import floor\n\n\ndef nthSmartNumber(n):\n    \"\"\"\n    time complexity: O(logN)\n    space complexity: O(1)\n    \"\"\"\n    # find the n'th number\n    n -= 1\n    # get the floor of the sqrt of n\n    floor_sqrt_n = floor(n ** 0.5)\n    # get the ceil of the sqrt of n\n    ceil_sqrt_n = floor(n ** 0.5) + 1\n    # get the ceil of the sqrt of n\n    ceil_sqrt_n_half = floor(n / 2)\n    # get the ceil of the sqrt of n\n    ceil_sqrt_n_half_half = floor(n / 4)\n\n    # get the number of n's that are less than or equal to n\n    smart_count = (\n        (ceil_sqrt_n - floor_sqrt_n) * ceil_sqrt_n\n        - (ceil_sqrt_n_half - floor_sqrt_n_half) * ceil_sqrt_n_half\n        - (ceil_sqrt_n_half_half - floor_sqrt_n_half_half) * ceil_sqrt_n_half_half\n    )\n\n    # find the number of n's that are less than n\n    while smart_count <= n:\n        floor_sqrt_n -= 1\n        ceil_sqrt_n -= 1\n        ceil_sqrt_n_half -= 1\n        ceil_sqrt_n_half_half -= 1\n        smart_count += (\n            ceil_sqrt_n - floor_sqrt_n\n        ) * ceil_sqrt_n + (\n            ceil_sqrt_n_half - floor_sqrt_n_half\n        ) * ceil_sqrt_n_half + (\n            ceil_sqrt_n_half_half - floor_sqrt_n_half_half\n        ) * ceil_sqrt_n_half_half\n\n    # get the number of n's that are less than or equal to n\n    floor_sqrt_n += 1\n    ceil_sqrt_n +="
    },
    {
      "rank": 29,
      "score": 8.0,
      "candidate": "def smart_number(n: int) -> int:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(1)\n    \"\"\"\n    # If n is 1, then 1 is the first smart number\n    if n == 1:\n        return 1\n\n    # If n is even, then n is not the smart number\n    if n % 2 == 0:\n        return -1\n\n    # Smart number is (n * (n + 1)) / 2\n    return n * (n + 1) // 2\n\n\nif __name__ == \"__main__\":\n    print(smart_number(6))\n    print(smart_number(1))"
    },
    {
      "rank": 30,
      "score": 8.0,
      "candidate": "def nthSmartNumber(n):\n    # code here\n    count = 0\n    i = 1\n    while count < n:\n        temp = i\n        while temp % 5 != 0:\n            i += 1\n            temp = i\n        count += 1\n    return i\n\n\nif __name__ == '__main__':\n    print(\"Enter nth number: \", end=\"\")\n    n = int(input())\n\n    res = nthSmartNumber(n)\n    print(res)"
    },
    {
      "rank": 31,
      "score": 8.0,
      "candidate": "from math import floor, sqrt\n\n\ndef is_prime(n):\n    if n <= 3:\n        return n > 1\n    elif n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True\n\n\ndef get_smart_number(n):\n    \"\"\"\n    Finds the nth smart number.\n    :param n: nth smart number to find\n    :return: nth smart number\n    \"\"\"\n    smart_number = 1\n    while True:\n        if is_prime(smart_number):\n            primes = 1\n        else:\n            primes = 0\n            for i in range(1, floor(sqrt(smart_number)) + 1):\n                if smart_number % i == 0:\n                    primes += 2\n            if primes > 2:\n                primes -= 2\n        if primes == n:\n            return smart_number\n        smart_number += 1\n\n\nprint(get_smart_number(1))\nprint(get_smart_number(2))\nprint(get_smart_number(3))\nprint(get_smart_number(4))\nprint(get_smart_number(5))\nprint(get_smart_number(6))\nprint(get_smart_number(7))\nprint(get_smart_number(8))\nprint(get_smart_number(9))\nprint(get_smart_number(10))\nprint(get_smart_number(11))\nprint(get_smart_number(12))\nprint(get_smart_number(13))\nprint(get_smart_number(14))\nprint(get_smart_number(15))\nprint(get_smart_number(16))\nprint(get_smart_number(17))\nprint(get_smart_number(18))\nprint(get_"
    },
    {
      "rank": 32,
      "score": 8.0,
      "candidate": "from math import sqrt\n\n\ndef is_prime(num):\n    \"\"\"\n    Checks if a number is prime or not.\n    :param num: Number to be checked.\n    :return: True if prime, False otherwise.\n    \"\"\"\n    for i in range(2, int(sqrt(num)) + 1):\n        if num % i == 0:\n            return False\n    return True\n\n\ndef find_smart_number(n):\n    \"\"\"\n    Finds the n'th smart number.\n    :param n: n'th smart number to be found.\n    :return: n'th smart number.\n    \"\"\"\n    i = 1\n    while True:\n        if is_prime(i):\n            if n == 1:\n                return i\n            n -= 1\n        i += 1\n\n\nif __name__ == \"__main__\":\n    print(find_smart_number(10))"
    },
    {
      "rank": 33,
      "score": 8.0,
      "candidate": "def get_smart_number(n):\n    number_of_smart_numbers = 0\n    smart_number = 1\n    while number_of_smart_numbers < n:\n        smart_number += 1\n        for i in range(2, smart_number):\n            if smart_number % i == 0:\n                break\n        else:\n            number_of_smart_numbers += 1\n\n    return smart_number\n\n\nassert get_smart_number(1) == 1\nassert get_smart_number(2) == 2\nassert get_smart_number(3) == 2\nassert get_smart_number(4) == 2\nassert get_smart_number(5) == 3\nassert get_smart_number(6) == 3\nassert get_smart_number(7) == 3\nassert get_smart_number(8) == 3\nassert get_smart_number(9) == 3\nassert get_smart_number(10) == 4\nassert get_smart_number(11) == 4\nassert get_smart_number(12) == 4\nassert get_smart_number(13) == 4\nassert get_smart_number(14) == 4\nassert get_smart_number(15) == 4\nassert get_smart_number(16) == 5\nassert get_smart_number(17) == 5\nassert get_smart_number(18) == 5\nassert get_smart_number(19) == 5\nassert get_smart_number(20) == 5"
    },
    {
      "rank": 34,
      "score": 8.0,
      "candidate": "class SmartNumber:\n    def __init__(self, number):\n        self.number = number\n\n    def __str__(self):\n        return f\"{self.number}\"\n\n    def __eq__(self, other):\n        if isinstance(other, SmartNumber):\n            return self.number == other.number\n        return False\n\n    def __lt__(self, other):\n        if isinstance(other, SmartNumber):\n            return self.number < other.number\n        return False\n\n    def __gt__(self, other):\n        if isinstance(other, SmartNumber):\n            return self.number > other.number\n        return False\n\n    def __le__(self, other):\n        if isinstance(other, SmartNumber):\n            return self.number <= other.number\n        return False\n\n    def __ge__(self, other):\n        if isinstance(other, SmartNumber):\n            return self.number >= other.number\n        return False\n\n\ndef generate_smart_numbers(number):\n    if number == 1:\n        return SmartNumber(1)\n\n    numbers = []\n    for i in range(1, number + 1):\n        numbers.append(SmartNumber(i))\n\n    return numbers\n\n\ndef nth_smart_number(number):\n    smart_numbers = generate_smart_numbers(number)\n    return smart_numbers[number - 1]\n\n\nif __name__ == \"__main__\":\n    print(nth_smart_number(10))"
    },
    {
      "rank": 35,
      "score": 8.0,
      "candidate": "\"\"\"Question:\nWrite a function to find n\u2019th smart number.\nSmart number is a number where sum of factorial of digits is equal to number itself.\nFirst non-negative integer smart number is 0 (because 0! = 0).\nFirst ten non-negative integer smart number are: 0,1,2,3,4,5,6,7,8,9,10.\n\nHints:\nUse list comprehension to make code short.\n\n\"\"\"\nfrom math import factorial\ndef smart_number(n):\n    #Initialize a list of smart number\n    smart_number=[]\n    #Initialize a list of factorial of digits\n    factorial_digit=[0,1,2,6,24,120,720,5040,40320,362880]\n    #Create a function to calculate the sum of factorial of digits\n    def smart_sum(num):\n        sum_smart=0\n        while num:\n            sum_smart += factorial_digit[num%10]\n            num = num/10\n        return sum_smart\n    #Create a while loop to generate the list of smart number\n    i=0\n    while i<n:\n        i += 1\n        j=0\n        while j<10000000000:\n            if smart_sum(j)==j:\n                smart_number.append(j)\n                break\n            j+=1\n    #Return the nth smart number\n    return smart_number[n-1]\n\nprint smart_number(1000)"
    },
    {
      "rank": 36,
      "score": 8.0,
      "candidate": "def find_nth_smart_number(n: int) -> int:\n    \"\"\"\n    Time Complexity: O(log(n))\n    Space Complexity: O(1)\n    \"\"\"\n    nth_smart_number = 1\n    for _ in range(n - 1):\n        nth_smart_number += sum(map(int, str(nth_smart_number)))\n    return nth_smart_number\n\n\nif __name__ == \"__main__\":\n    print(find_nth_smart_number(1))\n    print(find_nth_smart_number(2))\n    print(find_nth_smart_number(3))\n    print(find_nth_smart_number(4))\n    print(find_nth_smart_number(5))"
    },
    {
      "rank": 37,
      "score": 8.0,
      "candidate": "def find_smart_number(n):\n    smart_number = 1\n    index = 1\n    while index < n:\n        smart_number += 2\n        index += 1\n    return smart_number\n\n\nif __name__ == \"__main__\":\n    print(find_smart_number(1))\n    print(find_smart_number(5))\n    print(find_smart_number(10))\n    print(find_smart_number(15))"
    },
    {
      "rank": 38,
      "score": 8.0,
      "candidate": "def smart_number(n):\n    s = 0\n    count = 0\n    while count < n:\n        s += 1\n        for i in range(1, s+1):\n            if s % i == 0:\n                count += 1\n                if count == n:\n                    return s\n\nn = int(input())\nprint(smart_number(n))"
    },
    {
      "rank": 39,
      "score": 8.0,
      "candidate": "def nth_smart_number(n):\n    i = 0\n    while i < n:\n        i += 1\n        if is_smart_number(i):\n            n -= 1\n    return i\n\n\ndef is_smart_number(num):\n    num_str = str(num)\n    return num_str == num_str[::-1]\n\n\nif __name__ == \"__main__\":\n    print(nth_smart_number(1))\n    print(nth_smart_number(2))\n    print(nth_smart_number(3))\n    print(nth_smart_number(4))\n    print(nth_smart_number(5))\n    print(nth_smart_number(6))\n    print(nth_smart_number(7))\n    print(nth_smart_number(8))"
    },
    {
      "rank": 40,
      "score": 8.0,
      "candidate": "def nthSmartNumber(n):\n    i, j, c = 1, 2, 1\n    while c < n:\n        i += 2\n        j += 3\n        c += 2\n        if c >= n:\n            break\n    return i + (n - c) * (j - i) // (c - c + 1)\n\n\nif __name__ == \"__main__\":\n    print(nthSmartNumber(2))"
    },
    {
      "rank": 41,
      "score": 8.0,
      "candidate": "def get_smart_number(n):\n    \"\"\"\n    Calculates the nth smart number\n    :param n: The nth number to calculate\n    :return: The nth smart number\n    \"\"\"\n    if n < 1:\n        return -1\n\n    i = 0\n    num = 1\n\n    while i < n:\n        num += 1\n        i = 0\n\n        while num % 10 == 0:\n            num += 1\n            i += 1\n\n    return num\n\nif __name__ == '__main__':\n    print get_smart_number(1)\n    print get_smart_number(5)\n    print get_smart_number(10)\n    print get_smart_number(100)\n    print get_smart_number(1000)"
    },
    {
      "rank": 42,
      "score": 8.0,
      "candidate": "def is_smart_number(num):\n    return sorted(str(num)) == sorted(str(num)[::-1])\n\ndef nth_smart_number(num):\n    count = 1\n    num = 1\n    while count < num:\n        if is_smart_number(num):\n            count += 1\n        num += 1\n    return num - 1\n\nif __name__ == \"__main__\":\n    print(nth_smart_number(6))"
    },
    {
      "rank": 43,
      "score": 8.0,
      "candidate": "from math import sqrt\n\n\ndef is_smart_number(num):\n    \"\"\"\n    Return True if given number is a smart number.\n    A smart number is a number whose square is an arithmetic progression.\n    \"\"\"\n    sqrt_num = int(sqrt(num))\n    if sqrt_num * sqrt_num != num:\n        return False\n    a = b = sqrt_num\n    c = num - b * b\n    while c > 0:\n        temp = a\n        a = b\n        b = c\n        c = temp - b\n    return a == 1\n\n\ndef get_smart_number(n):\n    \"\"\"\n    Return nth smart number.\n    \"\"\"\n    if n <= 0:\n        raise ValueError(\"n should be a positive integer\")\n    elif n == 1:\n        return 1\n    else:\n        nth_smart_number = 1\n        i = 1\n        while n > 1:\n            nth_smart_number += 1\n            i += 1\n            if is_smart_number(nth_smart_number):\n                n -= 1\n        return nth_smart_number"
    },
    {
      "rank": 44,
      "score": 8.0,
      "candidate": "def nth_smart_number(n):\n    # generate a list of smart numbers\n    smart_numbers = []\n    for i in range(1, 10000000):\n        s = sum(int(d) for d in str(i))\n        i_power = i ** len(str(i))\n        if i_power == s:\n            smart_numbers.append(i)\n\n    # sort the list\n    smart_numbers.sort()\n\n    return smart_numbers[n - 1]\n\n\nif __name__ == \"__main__\":\n    print(nth_smart_number(10))"
    },
    {
      "rank": 45,
      "score": 8.0,
      "candidate": "def smart_number(n):\n    \"\"\"\n    The function takes an integer n and returns the nth smart number.\n    \"\"\"\n\n    i = 0\n    j = 0\n    while i < n:\n        j += 1\n        i += j\n\n    return j\n\n\nif __name__ == \"__main__\":\n    print(smart_number(5))\n    print(smart_number(20))\n    print(smart_number(100))"
    },
    {
      "rank": 46,
      "score": 8.0,
      "candidate": "def find_nth_smart_number(n):\n    # 1. Find the smart number in which the n'th smart number is present.\n    # 2. Find the n'th smart number in that smart number.\n    # 3. Return the n'th smart number.\n\n    # 1. Find the smart number in which the n'th smart number is present.\n    i = 1\n    while i ** 2 < n:\n        i += 1\n    \n    # 2. Find the n'th smart number in that smart number.\n    nth_smart_number = 0\n    i -= 1\n    while n > 0:\n        nth_smart_number += i\n        n -= 1\n    \n    # 3. Return the n'th smart number.\n    return nth_smart_number\n\n\nif __name__ == \"__main__\":\n    print(find_nth_smart_number(10))\n    print(find_nth_smart_number(100))\n    print(find_nth_smart_number(1000))\n    print(find_nth_smart_number(10000))"
    },
    {
      "rank": 47,
      "score": 8.0,
      "candidate": "def nth_smart_number(n):\n    \"\"\"\n    Find the nth smart number\n    \"\"\"\n    smart_numbers = [1]\n    current = 2\n\n    while len(smart_numbers) < n:\n        current += 1\n        for number in smart_numbers:\n            if current % number != 0:\n                break\n        else:\n            smart_numbers.append(current)\n\n    return smart_numbers[-1]\n\nif __name__ == '__main__':\n    assert nth_smart_number(1) == 1\n    assert nth_smart_number(2) == 2\n    assert nth_smart_number(3) == 4\n    assert nth_smart_number(4) == 6\n    assert nth_smart_number(5) == 12\n    assert nth_smart_number(6) == 24\n    assert nth_smart_number(7) == 36\n    assert nth_smart_number(8) == 48\n    assert nth_smart_number(9) == 60\n    assert nth_smart_number(10) == 72"
    },
    {
      "rank": 48,
      "score": 8.0,
      "candidate": "def nth_smart_number(n):\n    \"\"\"\n    :param n: - int\n    :return: int\n    \"\"\"\n    smart_numbers = []\n    number = 1\n    while len(smart_numbers) < n:\n        if is_smart_number(number):\n            smart_numbers.append(number)\n        number += 1\n    return smart_numbers[-1]\n\n\ndef is_smart_number(number):\n    \"\"\"\n    :param number: - int\n    :return: bool\n    \"\"\"\n    digits = [int(x) for x in str(number)]\n    return sum(digits) == len(digits)\n\n\nif __name__ == '__main__':\n    n = int(input(\"Enter n: \"))\n    result = nth_smart_number(n)\n    print(result)"
    },
    {
      "rank": 49,
      "score": 8.0,
      "candidate": "def find_nth_smart_number(n):\n\t\"\"\"\n\tThe smart number is the sum of all prime numbers between 1 and the number itself\n\t\"\"\"\n\t# base case\n\tif n == 1:\n\t\treturn 1\n\n\t# recursive case\n\tprime_numbers = [2]\n\tsmart_number = 2\n\tfor i in range(3, n + 1):\n\t\tis_prime = True\n\t\tfor prime in prime_numbers:\n\t\t\tif i % prime == 0:\n\t\t\t\tis_prime = False\n\t\t\t\tbreak\n\t\tif is_prime:\n\t\t\tprime_numbers.append(i)\n\t\t\tsmart_number += i\n\treturn smart_number\n\n\nif __name__ == '__main__':\n\tassert find_nth_smart_number(1) == 1\n\tassert find_nth_smart_number(2) == 3\n\tassert find_nth_smart_number(3) == 5\n\tassert find_nth_smart_number(4) == 9\n\tassert find_nth_smart_number(5) == 13\n\tassert find_nth_smart_number(6) == 17\n\tassert find_nth_smart_number(7) == 21\n\tassert find_nth_smart_number(8) == 25\n\tassert find_nth_smart_number(9) == 30\n\tassert find_nth_smart_number(10) == 36\n\tassert find_nth_smart_number(11) == 41\n\tassert find_nth_smart_number(12) == 47\n\tassert find_nth_smart_number(13) == 53\n\tassert find_nth_smart_number(14) == 59\n\tassert find_nth_smart_number(15) == 65\n\tassert find_nth_smart_number(16) == 71\n\tassert find_nth_smart_number(17) == 77\n\tassert find_nth_smart_"
    },
    {
      "rank": 50,
      "score": 8.0,
      "candidate": "from math import log10\n\n\ndef count_digits(n):\n    return int(log10(n)) + 1\n\n\ndef smart_number(n):\n    i = 1\n    while True:\n        i += 1\n        num = i * (i + 1) // 2\n        if count_digits(num) == n:\n            return num\n\n\nprint(smart_number(1))"
    },
    {
      "rank": 51,
      "score": 8.0,
      "candidate": "def get_smart_number(n):\n    \"\"\"\n    The function takes a number n as input and returns the n'th smart number.\n    A number is called a smart number if it is equal to the sum of factorial\n    of its digits.\n    :param n: number\n    :return: smart number\n    \"\"\"\n    smart_numbers = []\n\n    def factorial(number):\n        \"\"\"\n        The function takes a number n as input and returns the factorial of the number.\n        :param number: number\n        :return: factorial\n        \"\"\"\n        if number == 1:\n            return 1\n        return number * factorial(number - 1)\n\n    def get_digit_fact(number):\n        \"\"\"\n        The function takes a number n as input and returns a list of factorial of\n        digits of the number.\n        :param number: number\n        :return: list of factorial of digits of the number\n        \"\"\"\n        digit_fact = []\n        while number > 0:\n            digit = number % 10\n            digit_fact.append(factorial(digit))\n            number //= 10\n        digit_fact.reverse()\n        return digit_fact\n\n    def get_smart_numbers(smart_numbers, number):\n        \"\"\"\n        The function takes a number n as input and returns a list of smart numbers\n        less than n.\n        :param smart_numbers: list of smart numbers less than n\n        :param number: number\n        :return: list of smart numbers less than n\n        \"\"\"\n        if number < 10:\n            return\n        digit_fact = get_digit_fact(number)\n        digit_sum = 0\n        for digit in digit_fact:\n            digit_sum += digit\n        if digit_sum == number:\n            smart_numbers.append(number)\n        get_smart_numbers(smart_numbers, number - 1)\n\n    get_smart_numbers(smart_numbers, n)\n    return smart_numbers[n - 1]\n\n\nif __name__ == \"__main__\":\n    print(get_smart_number(15))"
    },
    {
      "rank": 52,
      "score": 8.0,
      "candidate": "from math import sqrt\n\n\ndef is_smart_number(num):\n    root = sqrt(num)\n    if root == int(root):\n        return True\n    return False\n\n\ndef nth_smart_number(n):\n    counter = 1\n    num = 1\n    while counter < n:\n        num += 1\n        if is_smart_number(num):\n            counter += 1\n    return num\n\n\nif __name__ == \"__main__\":\n    print(nth_smart_number(10001))"
    },
    {
      "rank": 53,
      "score": 8.0,
      "candidate": "from math import log10\n\n\ndef smart_number(n):\n    if n == 1:\n        return 1\n    i = int(log10(n))\n    # 10^i < n <= 10^(i+1)\n    # 10^i*(i+1) <= n*i <= 10^(i+1)*(i+1)\n    # 10^i + n*i <= n*i + i*i <= 10^(i+1) + (i+1)*(i+1)\n    # 10^i + n*i <= n*i + i^2 + i <= 10^(i+1) + (i+1)^2\n    # 10^i + n*i <= n*i + i^2 <= 10^(i+1) + (i+1)^2\n    # 10^i + n*i <= n*i + i^2 <= 10^(i+1) + (i+1)^2\n    # 10^i + n*i <= n*i + i^2 <= 10^(i+1) + (i+1)^2\n    # 10^i + n*i <= n*i + i^2 <= 10^(i+1) + (i+1)^2\n    # 10^i + n*i <= n*i + i^2 <= 10^(i+1) + (i+1)^2\n    # 10^i + n*i <= n*i + i^2 <= 10^(i+1) + (i+1)^2\n    # 10^i + n*i <= n*i + i^2 <= 10^(i+1) + (i+1)^2\n    # 10^i + n*i <= n*i + i^2 <= 10^(i+1) + (i+1)^2\n    # 10^i + n*i <= n*i + i^2 <= 10^(i+1) + (i+1)^2\n    # 10^i + n*i <= n*i + i"
    },
    {
      "rank": 54,
      "score": 8.0,
      "candidate": "def smart_number(n: int) -> int:\n    \"\"\"\n    SOLUTION 1:\n    This solution is not optimal. It works but it's too slow.\n    It's here just to show how I would've implemented it.\n    \"\"\"\n    smart_numbers = [0] * (n + 1)\n    smart_numbers[0] = 0\n    smart_numbers[1] = 1\n    for i in range(2, n + 1):\n        for j in range(1, i + 1):\n            if smart_numbers[j] < smart_numbers[i - j]:\n                smart_numbers[i] = max(smart_numbers[i], smart_numbers[i - j])\n            else:\n                smart_numbers[i] = max(smart_numbers[i], smart_numbers[i - j] * j)\n    return smart_numbers[n]\n\n\ndef smart_number_2(n: int) -> int:\n    \"\"\"\n    SOLUTION 2:\n    This solution is a lot faster.\n    I've used a dictionary to store the previous values.\n    \"\"\"\n    prev = {0: 0, 1: 1}\n    for i in range(2, n + 1):\n        prev[i] = max(prev[i - j] * j for j in range(1, i + 1) if prev[i - j] < prev[i])\n    return prev[n]\n\n\nif __name__ == \"__main__\":\n    print(smart_number(1))\n    print(smart_number(2))\n    print(smart_number(3))\n    print(smart_number(4))\n    print(smart_number(5))\n    print(smart_number(6))\n    print(smart_number(7))\n    print(smart_number(8))\n    print(smart_number(9))\n    print(smart_number(10))\n    print(smart_number(11))\n    print(smart_number(12))\n    print(smart_number(13))\n    print("
    },
    {
      "rank": 55,
      "score": 8.0,
      "candidate": "from functools import lru_cache\n\n\n@lru_cache(maxsize=None)\ndef get_smart_number(n):\n    \"\"\"\n    :param n: integer\n    :return: n'th smart number\n    \"\"\"\n    if n == 1:\n        return 1\n\n    prev_smart_number = get_smart_number(n - 1)\n    if prev_smart_number % 2 == 0:\n        return prev_smart_number + 1\n    return prev_smart_number - 1\n\n\nif __name__ == '__main__':\n    n = int(input('Enter a number: '))\n    print(get_smart_number(n))"
    },
    {
      "rank": 56,
      "score": 8.0,
      "candidate": "def get_smart_number(n):\n    count = 1\n    num = 1\n    while count < n:\n        num += 1\n        count += get_number_of_digits(num)\n    return num\n\n\ndef get_number_of_digits(num):\n    count = 0\n    while num > 0:\n        num //= 10\n        count += 1\n    return count\n\n\nif __name__ == \"__main__\":\n    print(get_smart_number(10))"
    },
    {
      "rank": 57,
      "score": 8.0,
      "candidate": "def nthSmartNumber(n):\n    num = 1\n    i = 0\n    while i < n:\n        num += 1\n        i += sumOfFactors(num)\n    return num\n\ndef sumOfFactors(n):\n    sum = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            sum += i\n    return sum\n\nif __name__ == '__main__':\n    n = int(input())\n    print(nthSmartNumber(n))"
    },
    {
      "rank": 58,
      "score": 8.0,
      "candidate": "def nth_smart_number(n):\n    \"\"\"\n    The nth_smart_number function returns the nth smart number.\n    \"\"\"\n    if n <= 0:\n        raise ValueError(\"n must be greater than 0\")\n\n    smart_num = 0\n    num = 1\n    count = 1\n\n    while count < n:\n        smart_num = num\n        num = num * 2 + 1\n        count += 1\n\n    return smart_num"
    },
    {
      "rank": 59,
      "score": 8.0,
      "candidate": "def get_smart_number(n):\n    \"\"\"\n    >>> get_smart_number(1)\n    1\n    >>> get_smart_number(2)\n    2\n    >>> get_smart_number(3)\n    3\n    >>> get_smart_number(4)\n    3\n    >>> get_smart_number(5)\n    3\n    >>> get_smart_number(6)\n    4\n    >>> get_smart_number(7)\n    5\n    >>> get_smart_number(8)\n    6\n    >>> get_smart_number(9)\n    6\n    >>> get_smart_number(10)\n    7\n    >>> get_smart_number(11)\n    7\n    >>> get_smart_number(12)\n    7\n    >>> get_smart_number(13)\n    7\n    >>> get_smart_number(14)\n    7\n    >>> get_smart_number(15)\n    8\n    >>> get_smart_number(16)\n    9\n    >>> get_smart_number(17)\n    9\n    >>> get_smart_number(18)\n    9\n    >>> get_smart_number(19)\n    9\n    >>> get_smart_number(20)\n    10\n    >>> get_smart_number(21)\n    10\n    >>> get_smart_number(22)\n    10\n    >>> get_smart_number(23)\n    10\n    >>> get_smart_number(24)\n    10\n    >>> get_smart_number(25)\n    10\n    >>> get_smart_number(26)\n    10\n    >>> get_smart_number(27)\n    10\n    >>> get_smart_number(28)\n    10\n    >>> get_smart_number(29)\n    10\n    >>> get_smart_number(30)\n    10\n    >>> get_smart_number(31)"
    },
    {
      "rank": 60,
      "score": 8.0,
      "candidate": "def get_smart_number(n):\n    \"\"\"\n    The smart number is the number that contains\n    all the digits from 1 to n.\n    \"\"\"\n    if n == 1:\n        return 1\n    smart_numbers = []\n    for i in range(1, n):\n        smart_numbers.append(int(str(i)*i))\n    smart_numbers.sort()\n    return smart_numbers[n-1]\n\n\nif __name__ == \"__main__\":\n    assert get_smart_number(1) == 1\n    assert get_smart_number(2) == 2\n    assert get_smart_number(3) == 3\n    assert get_smart_number(4) == 4\n    assert get_smart_number(5) == 5\n    assert get_smart_number(6) == 6\n    assert get_smart_number(7) == 7\n    assert get_smart_number(8) == 8\n    assert get_smart_number(9) == 9\n    assert get_smart_number(10) == 10\n    assert get_smart_number(11) == 121\n    assert get_smart_number(12) == 12\n    assert get_smart_number(13) == 13\n    assert get_smart_number(14) == 14\n    assert get_smart_number(15) == 15\n    assert get_smart_number(16) == 16\n    assert get_smart_number(17) == 17\n    assert get_smart_number(18) == 18\n    assert get_smart_number(19) == 19\n    assert get_smart_number(20) == 20\n    assert get_smart_number(21) == 221\n    assert get_smart_number(22) == 22\n    assert get_smart_number(23) == 23\n    assert get_smart_number(24) == 24"
    },
    {
      "rank": 61,
      "score": 8.0,
      "candidate": "from itertools import count\n\ndef nth_smart_number(n):\n\t\"\"\"\n\t\t:type n: int\n\t\t:rtype: int\n\t\"\"\"\n\tsmart_count = 0\n\tfor i in count(1):\n\t\tif is_smart_number(i):\n\t\t\tsmart_count += 1\n\t\tif smart_count == n:\n\t\t\treturn i\n\ndef is_smart_number(n):\n\tn_str = str(n)\n\tfor i in range(1, len(n_str)):\n\t\tif n_str[i-1] > n_str[i]:\n\t\t\treturn False\n\treturn True\n\nif __name__ == '__main__':\n\tprint(nth_smart_number(4))"
    },
    {
      "rank": 62,
      "score": 8.0,
      "candidate": "def nth_smart_number(n: int) -> int:\n    \"\"\"\n    nth_smart_number uses a formula to calculate the nth smart number.\n    \"\"\"\n    return 3 * (2 ** (n - 1)) - 2\n\n\nif __name__ == \"__main__\":\n    n: int = int(input(\"Enter the number of smart numbers you want to generate: \").strip())\n    for i in range(n):\n        print(nth_smart_number(i + 1))"
    },
    {
      "rank": 63,
      "score": 8.0,
      "candidate": "class Solution(object):\n    def getSmartNumber(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: List[int]\n        \"\"\"\n        if num < 1:\n            return []\n        if num == 1:\n            return [1]\n        if num == 2:\n            return [1, 2]\n        if num == 3:\n            return [1, 2, 3]\n\n        arr = [1, 2, 3]\n        for i in range(4, num + 1):\n            arr.append(self.findSmartNumber(i))\n\n        return arr\n\n    def findSmartNumber(self, num):\n        arr = [1]\n        for i in range(2, num + 1):\n            arr.append(i)\n            arr.append(i - 1)\n            arr.append(i - 2)\n        return max(arr)\n\n\nif __name__ == '__main__':\n    solution = Solution()\n    print(solution.getSmartNumber(3))"
    },
    {
      "rank": 64,
      "score": 8.0,
      "candidate": "def get_smart_number(n):\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(1)\n    \"\"\"\n    i = 1\n    while True:\n        if i % 5 == 0 or i % 3 == 0:\n            n -= 1\n            if n == 0:\n                return i\n        i += 1"
    },
    {
      "rank": 65,
      "score": 8.0,
      "candidate": "def find_smart_number(n):\n    smart_number = 1\n\n    while n > 1:\n        n -= 1\n        smart_number += 2\n\n        if is_smart(smart_number):\n            n -= 1\n\n    return smart_number\n\n\ndef is_smart(n):\n    return n == sum(map(int, str(n)))"
    },
    {
      "rank": 66,
      "score": 7.0,
      "candidate": "class SmartNumber:\n    def __init__(self, n):\n        self.n = n\n\n    def findSmartNumber(self, n):\n        \"\"\"\n        :param: n - integer\n        :return: - integer\n        \"\"\"\n        # Write your code here.\n        return self.findSmartNumberHelper(n, 1, n)\n\n    def findSmartNumberHelper(self, n, start, end):\n        if start > end:\n            return 0\n        if n == 1:\n            return start\n        mid = (start + end) // 2\n        if mid ** 3 <= n <= (mid + 1) ** 3:\n            return mid\n        if mid ** 3 > n:\n            return self.findSmartNumberHelper(n, start, mid - 1)\n        else:\n            return self.findSmartNumberHelper(n, mid + 1, end)\n\n\ndef main():\n    smart_number = SmartNumber(100)\n    print(\"Smart Number is \" + str(smart_number.findSmartNumber(100)))\n\n\nmain()"
    },
    {
      "rank": 67,
      "score": 4.0,
      "candidate": "def nthSmartNumber(n):\n    # Code here\n    n = n+1\n    x=1\n    while n>0:\n        x+=1\n        if isSmart(x):\n            n-=1\n    return x\n    \ndef isSmart(n):\n    s=0\n    for i in range(1,n):\n        if n%i==0:\n            s+=i\n    if s==n:\n        return True\n    else:\n        return False\n\n#{ \n#  Driver Code Starts\n#Initial Template for Python 3\n\nimport math\n\ndef main():\n    T=int(input())\n    while(T>0):\n        n=int(input())\n        print(nthSmartNumber(n))\n        T-=1\n\nif __name__==\"__main__\":\n    main()\n\n# } Driver Code Ends"
    },
    {
      "rank": 68,
      "score": 1.0,
      "candidate": "def find_nth_smart_number(n: int) -> int:\n    \"\"\"\n    :param n: position to find smart number\n    :return: n'th smart number\n    >>> find_nth_smart_number(1)\n    1\n    >>> find_nth_smart_number(5)\n    5\n    >>> find_nth_smart_number(10)\n    10\n    >>> find_nth_smart_number(100)\n    12345\n    >>> find_nth_smart_number(1000)\n    123456789101112\n    \"\"\"\n    counter = 1\n    while n > 0:\n        n -= 1\n        counter += 1\n        if counter % 10 == 0:\n            counter += 9\n    return counter\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 69,
      "score": 1.0,
      "candidate": "class Solution:\n    def findSmartNumber(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: int\n        \"\"\"\n        res = []\n        for i in range(1, num + 1):\n            if self.isSmart(i):\n                res.append(i)\n        return len(res)\n\n    def isSmart(self, n):\n        s = str(n)\n        if s == s[::-1]:\n            return True\n        return False\n\n\nif __name__ == '__main__':\n    solution = Solution()\n    print(solution.findSmartNumber(10))"
    },
    {
      "rank": 70,
      "score": 1.0,
      "candidate": "def smart_number(n: int) -> int:\n    \"\"\"\n    return n'th smart number\n    >>> smart_number(1)\n    1\n    >>> smart_number(2)\n    2\n    >>> smart_number(3)\n    3\n    >>> smart_number(4)\n    3\n    >>> smart_number(5)\n    3\n    >>> smart_number(6)\n    5\n    >>> smart_number(7)\n    5\n    >>> smart_number(8)\n    5\n    >>> smart_number(9)\n    7\n    >>> smart_number(10)\n    7\n    >>> smart_number(11)\n    7\n    >>> smart_number(12)\n    7\n    >>> smart_number(13)\n    7\n    >>> smart_number(14)\n    11\n    >>> smart_number(15)\n    11\n    >>> smart_number(16)\n    11\n    >>> smart_number(17)\n    11\n    >>> smart_number(18)\n    11\n    >>> smart_number(19)\n    11\n    >>> smart_number(20)\n    11\n    >>> smart_number(21)\n    13\n    >>> smart_number(22)\n    13\n    >>> smart_number(23)\n    13\n    >>> smart_number(24)\n    13\n    >>> smart_number(25)\n    13\n    >>> smart_number(26)\n    13\n    >>> smart_number(27)\n    13\n    >>> smart_number(28)\n    13\n    >>> smart_number(29)\n    13\n    >>> smart_number(30)\n    13\n    \"\"\"\n    smart_number_list = [1, 2, 3, 3, 5, 5, 5, 7, 7, 7, 7, 11, 11, 11, 11, 11, 13, 13, 13, 13, 13, 13]"
    },
    {
      "rank": 71,
      "score": 1.0,
      "candidate": "def find_nth_smart_number(n: int) -> int:\n    \"\"\"\n    >>> find_nth_smart_number(1)\n    1\n    >>> find_nth_smart_number(2)\n    2\n    >>> find_nth_smart_number(3)\n    3\n    >>> find_nth_smart_number(4)\n    4\n    >>> find_nth_smart_number(5)\n    5\n    >>> find_nth_smart_number(6)\n    6\n    >>> find_nth_smart_number(7)\n    7\n    >>> find_nth_smart_number(8)\n    8\n    >>> find_nth_smart_number(9)\n    9\n    >>> find_nth_smart_number(10)\n    10\n    >>> find_nth_smart_number(11)\n    11\n    >>> find_nth_smart_number(12)\n    12\n    >>> find_nth_smart_number(13)\n    13\n    >>> find_nth_smart_number(14)\n    14\n    >>> find_nth_smart_number(15)\n    15\n    >>> find_nth_smart_number(16)\n    16\n    >>> find_nth_smart_number(17)\n    17\n    >>> find_nth_smart_number(18)\n    18\n    >>> find_nth_smart_number(19)\n    19\n    >>> find_nth_smart_number(20)\n    20\n    >>> find_nth_smart_number(21)\n    21\n    >>> find_nth_smart_number(22)\n    22\n    >>> find_nth_smart_number(23)\n    23\n    >>> find_nth_smart_number(24)\n    24\n    >>> find_nth_smart_number(25)\n    25\n    >>> find_nth_smart_number(26)\n    26\n    >>> find_nth_smart_number(27"
    },
    {
      "rank": 72,
      "score": 1.0,
      "candidate": "def smart_numbers(n):\n    smart_numbers = []\n    for i in range(1, n+1):\n        s = str(i)\n        s = s[::-1]\n        x = int(s)\n        if i == x:\n            smart_numbers.append(i)\n    return smart_numbers[n-1]\n\nn = int(input())\nprint(smart_numbers(n))\n\n# Test\n# 12\n# 13"
    },
    {
      "rank": 73,
      "score": 1.0,
      "candidate": "def find_smart_number(n: int) -> int:\n    \"\"\"\n    O(n) time | O(1) space\n    \"\"\"\n    if n < 1:\n        raise ValueError(\"n must be greater than or equal to 1\")\n\n    smart_number = 1\n    for i in range(2, n + 1):\n        if i % 3 == 0 or i % 5 == 0:\n            smart_number += i\n\n    return smart_number\n\n\nalgorithm = find_smart_number\n\nprint(algorithm(1))\nprint(algorithm(2))\nprint(algorithm(3))\nprint(algorithm(4))\nprint(algorithm(5))\nprint(algorithm(6))\nprint(algorithm(7))\nprint(algorithm(8))\nprint(algorithm(9))\nprint(algorithm(10))"
    },
    {
      "rank": 74,
      "score": 1.0,
      "candidate": "class Solution(object):\n    def findSmartNumber(self, nums, n):\n        \"\"\"\n        :type nums: List[int]\n        :type n: int\n        :rtype: int\n        \"\"\"\n        if not nums or len(nums) == 0:\n            return 0\n        if len(nums) == 1:\n            return nums[0]\n        nums.sort()\n        # print(nums)\n        for i in range(len(nums) - 1):\n            if nums[i] + nums[i + 1] == nums[i] * 2:\n                n -= 1\n        return nums[n - 1] * 2\n\n\nif __name__ == '__main__':\n    solution = Solution()\n    print(solution.findSmartNumber([1, 2, 3], 3))"
    },
    {
      "rank": 75,
      "score": 1.0,
      "candidate": "def get_smart_number(n):\n    \"\"\"\n    >>> get_smart_number(1)\n    1\n    >>> get_smart_number(2)\n    2\n    >>> get_smart_number(3)\n    3\n    >>> get_smart_number(4)\n    4\n    >>> get_smart_number(5)\n    10\n    >>> get_smart_number(6)\n    12\n    >>> get_smart_number(7)\n    21\n    >>> get_smart_number(8)\n    22\n    >>> get_smart_number(9)\n    33\n    >>> get_smart_number(10)\n    34\n    >>> get_smart_number(11)\n    43\n    >>> get_smart_number(12)\n    44\n    >>> get_smart_number(13)\n    55\n    >>> get_smart_number(14)\n    56\n    >>> get_smart_number(15)\n    65\n    >>> get_smart_number(16)\n    66\n    >>> get_smart_number(17)\n    77\n    >>> get_smart_number(18)\n    78\n    >>> get_smart_number(19)\n    88\n    >>> get_smart_number(20)\n    89\n    >>> get_smart_number(21)\n    100\n    >>> get_smart_number(22)\n    101\n    >>> get_smart_number(23)\n    111\n    >>> get_smart_number(24)\n    112\n    >>> get_smart_number(25)\n    122\n    >>> get_smart_number(26)\n    133\n    >>> get_smart_number(27)\n    134\n    >>> get_smart_number(28)\n    144\n    >>> get_smart_number(29)\n    155\n    >>> get_smart_"
    },
    {
      "rank": 76,
      "score": 1.0,
      "candidate": "def get_smart_num(n):\n    smart_nums = [1, 2, 3]\n    i = 2\n    while len(smart_nums) < n:\n        i += 1\n        j = 2\n        while i % j != 0:\n            j += 1\n        smart_nums.append(i)\n    return smart_nums[n-1]\n\nif __name__ == \"__main__\":\n    assert get_smart_num(1) == 1\n    assert get_smart_num(2) == 2\n    assert get_smart_num(3) == 3\n    assert get_smart_num(4) == 4\n    assert get_smart_num(5) == 5\n    assert get_smart_num(6) == 6\n    assert get_smart_num(7) == 7\n    assert get_smart_num(8) == 8\n    assert get_smart_num(9) == 9\n    assert get_smart_num(10) == 10\n    assert get_smart_num(11) == 11\n    assert get_smart_num(12) == 12\n    assert get_smart_num(13) == 13\n    assert get_smart_num(14) == 14\n    assert get_smart_num(15) == 15\n    assert get_smart_num(16) == 16\n    assert get_smart_num(17) == 17\n    assert get_smart_num(18) == 18\n    assert get_smart_num(19) == 19\n    assert get_smart_num(20) == 20\n    assert get_smart_num(21) == 21\n    assert get_smart_num(22) == 22\n    assert get_smart_num(23) == 23\n    assert get_smart_num(24) == 24\n    assert get_smart_num(25"
    },
    {
      "rank": 77,
      "score": 1.0,
      "candidate": "from math import ceil\n\n\ndef nth_smart_number(n: int) -> int:\n    \"\"\"\n    Return the nth number in the sequence of smart numbers.\n    A smart number is a number whose sum of digits is equal to\n    the square of the number.\n\n    >>> nth_smart_number(1)\n    1\n    >>> nth_smart_number(2)\n    12\n    >>> nth_smart_number(3)\n    21\n    >>> nth_smart_number(10)\n    100\n    >>> nth_smart_number(100)\n    911\n    >>> nth_smart_number(200)\n    1201\n    >>> nth_smart_number(1000)\n    9901\n    >>> nth_smart_number(10000)\n    99901\n    >>> nth_smart_number(100000)\n    999901\n    \"\"\"\n    sqrt = int(ceil(n ** 0.5))\n\n    if sqrt ** 2 == n:\n        return sqrt ** 2\n\n    for i in range(sqrt, 0, -1):\n        if i * (i + 1) >= n:\n            return i * (i + 1)\n\n    return 1\n\n\nif __name__ == \"__main__\":\n    from doctest import testmod\n\n    testmod()"
    },
    {
      "rank": 78,
      "score": 1.0,
      "candidate": "def nth_smart_number(n):\n    \"\"\"\n    >>> nth_smart_number(1)\n    1\n    >>> nth_smart_number(2)\n    2\n    >>> nth_smart_number(3)\n    3\n    >>> nth_smart_number(4)\n    4\n    >>> nth_smart_number(5)\n    5\n    >>> nth_smart_number(6)\n    6\n    >>> nth_smart_number(7)\n    7\n    >>> nth_smart_number(8)\n    8\n    >>> nth_smart_number(9)\n    9\n    >>> nth_smart_number(10)\n    10\n    >>> nth_smart_number(11)\n    11\n    >>> nth_smart_number(12)\n    12\n    >>> nth_smart_number(13)\n    13\n    >>> nth_smart_number(14)\n    14\n    >>> nth_smart_number(15)\n    15\n    >>> nth_smart_number(16)\n    16\n    >>> nth_smart_number(17)\n    17\n    >>> nth_smart_number(18)\n    18\n    >>> nth_smart_number(19)\n    19\n    >>> nth_smart_number(20)\n    20\n    >>> nth_smart_number(21)\n    21\n    >>> nth_smart_number(22)\n    22\n    >>> nth_smart_number(23)\n    23\n    >>> nth_smart_number(24)\n    24\n    >>> nth_smart_number(25)\n    25\n    >>> nth_smart_number(26)\n    26\n    >>> nth_smart_number(27)\n    27\n    >>> nth_smart_number(28)\n    28\n    >>> nth_smart_number"
    },
    {
      "rank": 79,
      "score": 1.0,
      "candidate": "def nthSmartNumber(n):\n    \"\"\"\n    :param: number of smart number to be found\n    TODO: Write your solution here\n    :return: nth number\n    \"\"\"\n    # Write your code here\n\n\nif __name__ == \"__main__\":\n    n = int(input(\"Enter the number to find: \"))\n    print(nthSmartNumber(n))"
    },
    {
      "rank": 80,
      "score": 1.0,
      "candidate": "def get_nth_smart_number(n):\n    \"\"\"\n    >>> get_nth_smart_number(1)\n    1\n    >>> get_nth_smart_number(2)\n    2\n    >>> get_nth_smart_number(3)\n    3\n    >>> get_nth_smart_number(4)\n    4\n    >>> get_nth_smart_number(5)\n    5\n    >>> get_nth_smart_number(6)\n    6\n    >>> get_nth_smart_number(7)\n    7\n    >>> get_nth_smart_number(8)\n    8\n    >>> get_nth_smart_number(9)\n    9\n    >>> get_nth_smart_number(10)\n    10\n    >>> get_nth_smart_number(11)\n    11\n    >>> get_nth_smart_number(12)\n    12\n    >>> get_nth_smart_number(13)\n    13\n    >>> get_nth_smart_number(14)\n    14\n    >>> get_nth_smart_number(15)\n    15\n    >>> get_nth_smart_number(16)\n    16\n    >>> get_nth_smart_number(17)\n    17\n    >>> get_nth_smart_number(18)\n    18\n    >>> get_nth_smart_number(19)\n    19\n    >>> get_nth_smart_number(20)\n    20\n    >>> get_nth_smart_number(21)\n    21\n    >>> get_nth_smart_number(22)\n    22\n    >>> get_nth_smart_number(23)\n    23\n    >>> get_nth_smart_number(24)\n    24\n    >>> get_nth_smart_number(25)\n    25\n    >>> get_nth_smart_number(26)\n    26\n    >>> get_nth_smart_number(27)\n    27"
    },
    {
      "rank": 81,
      "score": 1.0,
      "candidate": "class Solution:\n    # @param A : integer\n    # @return an integer\n    def smartNumber(self, A):\n        n = 0\n        for i in range(A):\n            n += 2 ** i\n        return n\n\n\n\"\"\"\nFind nth Smart Number\nProblem Description\n\nGiven an integer A, you need to find the nth Smart Number.\n\nA smart number is a number which has exactly K prime factors.\n\n\n\nProblem Constraints\n1 <= A <= 10000\n\n\n\nInput Format\nThe first argument given is an integer A.\n\n\n\nOutput Format\nReturn an integer denoting the nth Smart Number.\n\n\n\nExample Input\nInput 1:\n A = 3\nInput 2:\n A = 4\n \n\n\nExample Output\nOutput 1:\n 3\nOutput 2:\n 4\n \n\n\nExample Explanation\nExplanation 1:\n 3 is the first smart number as it has exactly 3 prime factors, namely 2, 2 and 3.\nExplanation 2:\n 4 is the first smart number as it has exactly 4 prime factors, namely 2, 2, 2 and 2.\n\"\"\""
    },
    {
      "rank": 82,
      "score": 1.0,
      "candidate": "def smart_number(n):\n    \"\"\"\n    :param: - n - index of smart number to find\n    TODO: Complete this method and return the n'th smart number\n    \"\"\"\n    # Write your code here\n\n    # Iterate through all possible smart numbers\n    for i in range(1, 100000000000):\n        if is_smart_number(i) and n == 1:\n            return i\n        elif is_smart_number(i) and n == 0:\n            n -= 1\n\n\ndef is_smart_number(num):\n    return (\n        is_perfect_square(num)\n        and is_fibonacci(num)\n        and is_prime(num)\n        and is_perfect_square_of_prime(num)\n    )\n\n\ndef is_perfect_square(num):\n    return int(num ** 0.5) ** 2 == num\n\n\ndef is_fibonacci(num):\n    return is_perfect_square(5 * num ** 2 + 4) or is_perfect_square(5 * num ** 2 - 4)\n\n\ndef is_prime(num):\n    if num <= 1:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True\n\n\ndef is_perfect_square_of_prime(num):\n    sqrt = int(num ** 0.5)\n    for i in range(2, sqrt + 1):\n        if is_perfect_square(i) and is_prime(i) and num % i == 0:\n            return True\n    return False\n\n\nif __name__ == \"__main__\":\n    n = int(input(\"Enter a number: \"))\n    print(smart_number(n))"
    },
    {
      "rank": 83,
      "score": 1.0,
      "candidate": "def find_nth_smart_number(n):\n    \"\"\"\n    Let's first find the nth smart number.\n    \"\"\"\n    counter = 1\n    current = 1\n\n    while counter < n:\n        current += 1\n\n        for i in range(2, current):\n            if current % i == 0:\n                break\n        else:\n            counter += 1\n\n    return current\n\n\ndef find_nth_smart_number_fast(n):\n    \"\"\"\n    Now, let's find the nth smart number faster.\n    \"\"\"\n    current = 1\n    counter = 0\n\n    while counter < n:\n        current += 1\n\n        if is_smart(current):\n            counter += 1\n\n    return current\n\n\ndef is_smart(n):\n    \"\"\"\n    Check if a number is smart.\n    \"\"\"\n    for i in range(2, n):\n        if n % i == 0:\n            return False\n\n    return True"
    },
    {
      "rank": 84,
      "score": 1.0,
      "candidate": "class Solution():\n    def find_nth_smart_number(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        smart_number = [1]\n        cur_number = 1\n        for i in range(n - 1):\n            cur_number += 1\n            if self.is_smart_number(cur_number):\n                smart_number.append(cur_number)\n        return smart_number[-1]\n\n    def is_smart_number(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: bool\n        \"\"\"\n        n_str = str(n)\n        n_str_reverse = n_str[::-1]\n        if n_str == n_str_reverse:\n            return True\n        return False\n\n\nif __name__ == \"__main__\":\n    n = 10\n    solution = Solution()\n    print(solution.find_nth_smart_number(n))"
    },
    {
      "rank": 85,
      "score": 1.0,
      "candidate": "def smart_number(n):\n    \"\"\"\n    We can use dynamic programming to solve this problem.\n    \"\"\"\n    smart_nums = []\n    for i in range(1, 101):\n        smart_nums.append(i)\n        for j in range(2, 10):\n            if i % j == 0:\n                smart_nums.append(i)\n    smart_nums = list(set(smart_nums))\n    smart_nums.sort()\n    return smart_nums[n-1]\n\n\ndef test_smart_number():\n    assert smart_number(1) == 1\n    assert smart_number(10) == 10\n    assert smart_number(11) == 12\n    assert smart_number(20) == 24\n    assert smart_number(50) == 55\n    assert smart_number(100) == 100\n\n\nif __name__ == '__main__':\n    test_smart_number()"
    },
    {
      "rank": 86,
      "score": 1.0,
      "candidate": "def nth_smart_number(n: int) -> int:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(1)\n    \"\"\"\n    smart_num = 1\n    for i in range(n):\n        smart_num += (smart_num % 9) * 8\n    return smart_num\n\n\nif __name__ == \"__main__\":\n    print(nth_smart_number(3))"
    },
    {
      "rank": 87,
      "score": 1.0,
      "candidate": "def find_nth_smart_number(n):\n    \"\"\"\n    :param: n - number of smart number to find\n    TODO: complete this function so that it finds the nth number\n    in the sequence of smart numbers and returns the number\n    :return: int - smart number\n    \"\"\"\n\n    # 1 is the first smart number\n    smart_number = 1\n\n    # loop through the smart number sequence until n is reached\n    for i in range(n):\n        smart_number = find_next_smart_number(smart_number)\n\n    return smart_number\n\n\ndef find_next_smart_number(smart_number):\n    \"\"\"\n    :param: smart_number - smart number to be incremented\n    TODO: complete this function so that it increments the current\n    smart number and returns the next smart number\n    :return: int - next smart number\n    \"\"\"\n\n    # increment the smart_number\n    smart_number += 1\n\n    # loop through the smart number sequence until the next smart number is found\n    while is_smart_number(smart_number) is False:\n        smart_number += 1\n\n    return smart_number\n\n\ndef is_smart_number(smart_number):\n    \"\"\"\n    :param: smart_number - number to be tested\n    TODO: complete this function so that it returns True if the number\n    is a smart number or False if it is not a smart number\n    :return: bool - whether the number is a smart number or not\n    \"\"\"\n\n    # check if the number is a palindrome\n    if str(smart_number) == str(smart_number)[::-1]:\n        # check if the number is divisible by 10\n        if smart_number % 10 == 0:\n            return True\n    return False\n\n\nif __name__ == '__main__':\n    # Test Case 1\n    n = 1\n    expected = 1\n    actual = find_nth_smart_number(n)\n    print(\"Test case 1:\", n, \"-\", expected, actual)\n\n    # Test Case 2\n    n = 2\n    expected"
    },
    {
      "rank": 88,
      "score": 1.0,
      "candidate": "class Solution:\n    def nthSmartNumber(self, n: int) -> int:\n        def is_smart(num: int) -> bool:\n            digits = [int(digit) for digit in str(num)]\n            return sum(digits) > num and num % (sum(digits)) == 0\n\n        def find_smart_number(n: int) -> int:\n            if n <= 1:\n                return n\n            lo, hi = 1, n\n            while lo < hi:\n                mid = (lo+hi) // 2\n                if is_smart(mid):\n                    hi = mid\n                else:\n                    lo = mid+1\n            return hi\n\n        return find_smart_number(n)\n\n\nif __name__ == '__main__':\n    s = Solution()\n    n = 1\n    res = s.nthSmartNumber(n)\n    print(res)"
    },
    {
      "rank": 89,
      "score": 1.0,
      "candidate": "def find_nth_smart_number(n):\n    \"\"\"\n    We need to find n'th smart number, which is a number that\n    has no divisor of 3 or 5.\n\n    We can find the first 1000 numbers as:\n    1, 2, 3, 4, 6, 9, 12, 18, 27, 36, 48, 60, 81, 108, 144, 216, 288, 360, 450, 576, 720, 900, 1080, 1320, 1560, 1800, 2072, 2430, 2792, 3156, 3618, 4080, 4544, 5000\n\n    So, we can calculate the number of smart numbers before n\n    and return it.\n    \"\"\"\n    count = 0\n    for i in range(1, n + 1):\n        if (i % 3 == 0 or i % 5 == 0) and i != 0:\n            continue\n        count += 1\n        if count == n:\n            return i\n\n\nif __name__ == '__main__':\n    print(find_nth_smart_number(1))\n    print(find_nth_smart_number(1000))\n    print(find_nth_smart_number(2000))"
    },
    {
      "rank": 90,
      "score": 1.0,
      "candidate": "def find_nth_smart_number(n):\n    \"\"\"\n    find nth smart number\n\n    >>> find_nth_smart_number(1)\n    1\n    >>> find_nth_smart_number(2)\n    2\n    >>> find_nth_smart_number(3)\n    2\n    >>> find_nth_smart_number(4)\n    2\n    >>> find_nth_smart_number(5)\n    3\n    >>> find_nth_smart_number(6)\n    3\n    >>> find_nth_smart_number(7)\n    3\n    >>> find_nth_smart_number(8)\n    3\n    >>> find_nth_smart_number(9)\n    4\n    >>> find_nth_smart_number(10)\n    4\n    >>> find_nth_smart_number(11)\n    4\n    >>> find_nth_smart_number(12)\n    4\n    >>> find_nth_smart_number(13)\n    5\n    >>> find_nth_smart_number(14)\n    5\n    >>> find_nth_smart_number(15)\n    5\n    >>> find_nth_smart_number(16)\n    5\n    >>> find_nth_smart_number(17)\n    5\n    >>> find_nth_smart_number(18)\n    6\n    >>> find_nth_smart_number(19)\n    6\n    >>> find_nth_smart_number(20)\n    6\n    >>> find_nth_smart_number(21)\n    6\n    >>> find_nth_smart_number(22)\n    6\n    >>> find_nth_smart_number(23)\n    7\n    >>> find_nth_smart_number(24)\n    7\n    >>> find_nth_smart_number(25)\n    7\n    >>> find_nth_smart_number(26)\n    7\n    >>> find_nth_smart_number(27)\n    7\n    >>> find_nth_smart_number"
    },
    {
      "rank": 91,
      "score": 1.0,
      "candidate": "class SmartNumber:\n    def __init__(self, n):\n        self.n = n\n\n    def find_nth_smart_number(self):\n        \"\"\"\n        Finds the nth Smart Number.\n\n        >>> SmartNumber(1).find_nth_smart_number()\n        1\n        >>> SmartNumber(2).find_nth_smart_number()\n        2\n        >>> SmartNumber(3).find_nth_smart_number()\n        3\n        >>> SmartNumber(4).find_nth_smart_number()\n        4\n        >>> SmartNumber(5).find_nth_smart_number()\n        5\n        >>> SmartNumber(6).find_nth_smart_number()\n        6\n        >>> SmartNumber(7).find_nth_smart_number()\n        7\n        >>> SmartNumber(8).find_nth_smart_number()\n        8\n        >>> SmartNumber(9).find_nth_smart_number()\n        9\n        >>> SmartNumber(10).find_nth_smart_number()\n        10\n        >>> SmartNumber(11).find_nth_smart_number()\n        11\n        >>> SmartNumber(12).find_nth_smart_number()\n        12\n        >>> SmartNumber(13).find_nth_smart_number()\n        13\n        >>> SmartNumber(14).find_nth_smart_number()\n        14\n        >>> SmartNumber(15).find_nth_smart_number()\n        15\n        >>> SmartNumber(16).find_nth_smart_number()\n        16\n        >>> SmartNumber(17).find_nth_smart_number()\n        17\n        >>> SmartNumber(18).find_nth_smart_number()\n        18\n        >>> SmartNumber(19).find_nth_smart_number()\n        19\n        >>> SmartNumber(20).find_nth_smart_number()\n        20\n        >>> SmartNumber(21).find_nth_smart"
    },
    {
      "rank": 92,
      "score": 1.0,
      "candidate": "def get_smart_number(n):\n    \"\"\"\n    Get n'th smart number\n    >>> get_smart_number(1)\n    1\n    >>> get_smart_number(2)\n    2\n    >>> get_smart_number(3)\n    3\n    >>> get_smart_number(4)\n    4\n    >>> get_smart_number(5)\n    5\n    >>> get_smart_number(6)\n    6\n    >>> get_smart_number(7)\n    7\n    >>> get_smart_number(8)\n    8\n    >>> get_smart_number(9)\n    9\n    >>> get_smart_number(10)\n    10\n    >>> get_smart_number(11)\n    11\n    >>> get_smart_number(12)\n    12\n    >>> get_smart_number(13)\n    13\n    >>> get_smart_number(14)\n    14\n    >>> get_smart_number(15)\n    15\n    >>> get_smart_number(16)\n    16\n    >>> get_smart_number(17)\n    17\n    >>> get_smart_number(18)\n    18\n    >>> get_smart_number(19)\n    19\n    >>> get_smart_number(20)\n    20\n    >>> get_smart_number(21)\n    21\n    >>> get_smart_number(22)\n    22\n    >>> get_smart_number(23)\n    23\n    >>> get_smart_number(24)\n    24\n    >>> get_smart_number(25)\n    25\n    >>> get_smart_number(26)\n    26\n    >>> get_smart_number(27)\n    27\n    >>> get_smart_number(28)\n    28\n    >>> get_smart_number(29)\n    29\n    >>> get_smart_number(30)"
    },
    {
      "rank": 93,
      "score": 1.0,
      "candidate": "def nth_smart_number(n):\n    \"\"\"\n    :param: n - number of smart number to find\n    TODO: complete this method and return nth smart number\n    \"\"\"\n    pass"
    },
    {
      "rank": 94,
      "score": 1.0,
      "candidate": "from math import floor\nfrom math import log10\n\n\ndef get_smart_number(n):\n    \"\"\"\n    Get the n'th smart number\n    :param n: the position of the number\n    :return: the n'th smart number\n    >>> get_smart_number(5)\n    5\n    >>> get_smart_number(10)\n    12\n    >>> get_smart_number(20)\n    60\n    >>> get_smart_number(100)\n    972\n    >>> get_smart_number(1000)\n    998972\n    >>> get_smart_number(10000)\n    9998972\n    \"\"\"\n    # the max number of digits of a number is log10(n)\n    # we will use it to calculate the number of possible numbers with k digits\n    # e.g. 999999999 has 10 digits, so we can get 9 numbers with 10 digits\n    # 9999999999 has 11 digits, so we can get 99 numbers with 11 digits\n    # 99999999999 has 12 digits, so we can get 998 numbers with 12 digits\n    # so the formula is 10^(digits-1)\n    # we can use it to calculate the number of possible numbers with k digits\n    max_digits = int(floor(log10(n)))\n    # the first number that we can get is 1, so the number of possible numbers\n    # with k digits is 10^(digits-1)\n    # the first number that we can get is 1, so the number of possible numbers\n    # with k digits is 10^(digits-1)\n    number_of_possible_numbers = 10 ** (max_digits - 1)\n    while n > number_of_possible_numbers:\n        # if the n is bigger than the number of possible numbers,\n        # we need to increase the number of digits\n        max_digits += 1\n        number"
    },
    {
      "rank": 95,
      "score": 1.0,
      "candidate": "def is_smart_number(num):\n    \"\"\"\n    Return True if the number is a smart number, else False.\n    \"\"\"\n    num_str = str(num)\n    num_len = len(num_str)\n\n    for i in range(num_len):\n        if num % 10**(num_len-1-i) != int(num_str[i]):\n            return False\n\n    return True\n\n\ndef find_smart_number(num):\n    \"\"\"\n    Return nth smart number.\n    \"\"\"\n    if num == 0:\n        return 0\n\n    count = 0\n    curr_num = 1\n\n    while count < num:\n        if is_smart_number(curr_num):\n            count += 1\n\n        curr_num += 1\n\n    return curr_num - 1\n\n\nif __name__ == \"__main__\":\n    print(is_smart_number(123))\n    print(is_smart_number(124))\n    print(is_smart_number(121))\n\n    print(find_smart_number(100))\n    print(find_smart_number(1000))\n    print(find_smart_number(10000000))"
    },
    {
      "rank": 96,
      "score": 1.0,
      "candidate": "def nth_smart_number(n):\n    \"\"\"\n    >>> nth_smart_number(1)\n    1\n    >>> nth_smart_number(2)\n    2\n    >>> nth_smart_number(3)\n    4\n    >>> nth_smart_number(4)\n    8\n    >>> nth_smart_number(5)\n    16\n    >>> nth_smart_number(6)\n    32\n    >>> nth_smart_number(7)\n    64\n    >>> nth_smart_number(8)\n    128\n    >>> nth_smart_number(9)\n    256\n    >>> nth_smart_number(10)\n    512\n    >>> nth_smart_number(11)\n    1024\n    >>> nth_smart_number(12)\n    2048\n    >>> nth_smart_number(13)\n    4096\n    >>> nth_smart_number(14)\n    8192\n    >>> nth_smart_number(15)\n    16384\n    \"\"\"\n    n -= 1\n    i = 1\n    while n > 0:\n        i *= 2\n        n -= 1\n    return i\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 97,
      "score": 1.0,
      "candidate": "def get_nth_smart_number(n: int) -> int:\n    \"\"\"\n    >>> get_nth_smart_number(1)\n    1\n    >>> get_nth_smart_number(2)\n    2\n    >>> get_nth_smart_number(3)\n    3\n    >>> get_nth_smart_number(4)\n    4\n    >>> get_nth_smart_number(5)\n    5\n    >>> get_nth_smart_number(6)\n    6\n    >>> get_nth_smart_number(7)\n    7\n    >>> get_nth_smart_number(8)\n    8\n    >>> get_nth_smart_number(9)\n    9\n    >>> get_nth_smart_number(10)\n    10\n    >>> get_nth_smart_number(11)\n    11\n    >>> get_nth_smart_number(12)\n    12\n    >>> get_nth_smart_number(13)\n    13\n    >>> get_nth_smart_number(14)\n    14\n    >>> get_nth_smart_number(15)\n    15\n    >>> get_nth_smart_number(16)\n    16\n    >>> get_nth_smart_number(17)\n    17\n    >>> get_nth_smart_number(18)\n    18\n    >>> get_nth_smart_number(19)\n    19\n    >>> get_nth_smart_number(20)\n    20\n    >>> get_nth_smart_number(21)\n    21\n    >>> get_nth_smart_number(22)\n    22\n    >>> get_nth_smart_number(23)\n    23\n    >>> get_nth_smart_number(24)\n    24\n    >>> get_nth_smart_number(25)\n    25\n    >>> get_nth_smart_number(26)\n    26\n    >>> get_nth_smart_number(27)"
    },
    {
      "rank": 98,
      "score": 1.0,
      "candidate": "def nthSmartNumber(n):\n    \"\"\"\n    :param: n - number of smart number to find\n    TODO: complete this method and return nth smart number\n    \"\"\"\n    # Write your code here\n    smart_number = 0\n    i = 1\n    while n > 0:\n        i += 1\n        smart_number = i * i\n        if is_smart_number(smart_number):\n            n -= 1\n    return smart_number\n\n\ndef is_smart_number(n):\n    \"\"\"\n    :param: n - number to be checked\n    :return: True if n is smart number else False\n    \"\"\"\n    temp = n\n    sum = 0\n    while temp > 0:\n        sum += (temp % 10) ** 2\n        temp //= 10\n    return n == sum\n\n\ndef test_function(test_case):\n    n = test_case[0]\n    solution = test_case[1]\n    output = nthSmartNumber(n)\n    if output == solution:\n        print(\"Pass\")\n    else:\n        print(\"Fail\")\n\n\ntest_function([2, 1])\ntest_function([4, 5])\ntest_function([6, 36])\ntest_function([10, 2550])"
    },
    {
      "rank": 99,
      "score": 1.0,
      "candidate": "def nth_smart_number(n: int) -> int:\n    \"\"\"\n    >>> nth_smart_number(1)\n    1\n    >>> nth_smart_number(2)\n    2\n    >>> nth_smart_number(3)\n    3\n    >>> nth_smart_number(4)\n    4\n    >>> nth_smart_number(5)\n    5\n    >>> nth_smart_number(6)\n    6\n    >>> nth_smart_number(7)\n    7\n    >>> nth_smart_number(8)\n    8\n    >>> nth_smart_number(9)\n    9\n    >>> nth_smart_number(10)\n    10\n    >>> nth_smart_number(11)\n    11\n    >>> nth_smart_number(12)\n    12\n    >>> nth_smart_number(13)\n    13\n    >>> nth_smart_number(14)\n    14\n    >>> nth_smart_number(15)\n    15\n    >>> nth_smart_number(16)\n    16\n    >>> nth_smart_number(17)\n    17\n    >>> nth_smart_number(18)\n    18\n    >>> nth_smart_number(19)\n    19\n    >>> nth_smart_number(20)\n    20\n    >>> nth_smart_number(21)\n    21\n    >>> nth_smart_number(22)\n    22\n    >>> nth_smart_number(23)\n    23\n    >>> nth_smart_number(24)\n    24\n    >>> nth_smart_number(25)\n    25\n    >>> nth_smart_number(26)\n    26\n    >>> nth_smart_number(27)\n    27\n    >>> nth_smart_number(28)\n    28\n    >>> nth"
    },
    {
      "rank": 100,
      "score": 1.0,
      "candidate": "class Solution:\n    def findSmartNumber(self, nums: List[int], n: int) -> int:\n        def count(num: int) -> int:\n            return sum(min(num // i, i) for i in range(1, num + 1))\n\n        left, right = 1, max(nums)\n        while left < right:\n            mid = (left + right) // 2\n            if count(mid) < n:\n                left = mid + 1\n            else:\n                right = mid\n\n        return left"
    }
  ]
}