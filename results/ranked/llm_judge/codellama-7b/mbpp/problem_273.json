{
  "timestamp": "2025-09-15T00:21:50.750014",
  "method": "improved_llm_judge",
  "judge_model": "codellama/CodeLlama-7b-Python-hf",
  "target_model": "codellama-7b",
  "dataset": "mbpp",
  "problem_number": 273,
  "total_candidates": 100,
  "results": [
    {
      "rank": 1,
      "score": 10.0,
      "candidate": "from typing import List, Optional\n\n\ndef all_equal(lst: List[str], value: Optional[str] = None) -> bool:\n    \"\"\"Checks if all items in a list are equal to a given string.\n\n    Args:\n        lst (List[str]): list of strings\n        value (Optional[str], optional): string to check. Defaults to None.\n\n    Returns:\n        bool: True if all items are equal to the given string\n    \"\"\"\n    if value is None:\n        value = lst[0]\n    return all(map(lambda x: x == value, lst))\n\n\nif __name__ == \"__main__\":\n    print(all_equal([\"a\", \"a\", \"a\", \"a\"], \"a\"))\n    print(all_equal([\"a\", \"b\", \"c\"]))\n    print(all_equal([\"a\", \"a\", \"a\", \"a\", \"b\"]))"
    },
    {
      "rank": 2,
      "score": 10.0,
      "candidate": "def equal_to_given_string(lst, given_string):\n    \"\"\"\n    >>> equal_to_given_string(['a','a','a'],'a')\n    True\n    >>> equal_to_given_string(['a','a','a'],'b')\n    False\n    >>> equal_to_given_string([],'a')\n    True\n    \"\"\"\n    if not lst:\n        return True\n    else:\n        return lst[0] == given_string and equal_to_given_string(lst[1:], given_string)\n\n\ndef equal_to_given_string_iter(lst, given_string):\n    \"\"\"\n    >>> equal_to_given_string_iter(['a','a','a'],'a')\n    True\n    >>> equal_to_given_string_iter(['a','a','a'],'b')\n    False\n    >>> equal_to_given_string_iter([],'a')\n    True\n    \"\"\"\n    it = iter(lst)\n    first = next(it)\n    for item in it:\n        if item != first:\n            return False\n    return first == given_string\n\n\ndef equal_to_given_string_iter_two(lst, given_string):\n    \"\"\"\n    >>> equal_to_given_string_iter_two(['a','a','a'],'a')\n    True\n    >>> equal_to_given_string_iter_two(['a','a','a'],'b')\n    False\n    >>> equal_to_given_string_iter_two([],'a')\n    True\n    \"\"\"\n    it = iter(lst)\n    return next(it) == given_string and all(item == given_string for item in it)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 3,
      "score": 10.0,
      "candidate": "def all_equal(lst: list, string: str) -> bool:\n    \"\"\"Checks whether all items of a list are equal to a given string.\n\n    Args:\n        lst (list): list of strings.\n        string (str): string to compare.\n\n    Examples:\n        >>> assert all_equal([\"a\", \"a\", \"a\"], \"a\")\n        >>> assert all_equal([\"b\", \"a\", \"a\"], \"a\") == False\n        >>> assert all_equal([], \"a\")\n    \"\"\"\n    return all(string == item for item in lst)\n\n\ndef all_equal_2(lst: list, string: str) -> bool:\n    \"\"\"Checks whether all items of a list are equal to a given string.\n\n    Args:\n        lst (list): list of strings.\n        string (str): string to compare.\n\n    Examples:\n        >>> assert all_equal_2([\"a\", \"a\", \"a\"], \"a\")\n        >>> assert all_equal_2([\"b\", \"a\", \"a\"], \"a\") == False\n        >>> assert all_equal_2([], \"a\")\n    \"\"\"\n    return lst.count(string) == len(lst)\n\n\ndef all_equal_3(lst: list, string: str) -> bool:\n    \"\"\"Checks whether all items of a list are equal to a given string.\n\n    Args:\n        lst (list): list of strings.\n        string (str): string to compare.\n\n    Examples:\n        >>> assert all_equal_3([\"a\", \"a\", \"a\"], \"a\")\n        >>> assert all_equal_3([\"b\", \"a\", \"a\"], \"a\") == False\n        >>> assert all_equal_3([], \"a\")\n    \"\"\"\n    return lst[0] == string and lst.count(string) == len(lst)\n\n\nif __name__ == \"__main__\":\n    print(all_equal([\"a\", \"a\", \"a\"], \"a\"))\n    print(all_equal([\"b\", \"a\", \"a\"], \"a\") == False)\n    print(all_equal([], \"a\"))"
    },
    {
      "rank": 4,
      "score": 10.0,
      "candidate": "from typing import List\n\n\ndef check_all_equal(lst: List[str], string: str) -> bool:\n    \"\"\"Check whether all items of a list are equal to a given string.\n\n    Args:\n        lst (List[str]): List of strings.\n        string (str): The string to check against.\n\n    Returns:\n        bool: True if all items are equal to the string.\n    \"\"\"\n\n    return lst.count(string) == len(lst)\n\n\nif __name__ == \"__main__\":\n    print(check_all_equal([\"a\", \"a\", \"a\", \"a\"], \"a\"))\n    print(check_all_equal([\"a\", \"a\", \"b\", \"a\"], \"a\"))"
    },
    {
      "rank": 5,
      "score": 10.0,
      "candidate": "from typing import List\n\n\ndef check_list(lst: List[str], string: str) -> bool:\n    \"\"\"Check if all items in list are equal to a given string.\n\n    Args:\n        lst (List[str]): list of strings\n        string (str): string to check for\n\n    Returns:\n        bool: True if all items in list are equal to a given string\n    \"\"\"\n    return all(item == string for item in lst)\n\n\nif __name__ == \"__main__\":\n    lst = [\"hello\", \"hello\", \"hello\", \"hello\"]\n    print(check_list(lst, \"hello\"))"
    },
    {
      "rank": 6,
      "score": 10.0,
      "candidate": "from typing import List\n\n\ndef check_list_is_equal(given_list: List, given_str: str) -> bool:\n    \"\"\"Check if all items of a list are equal to a given string.\n\n    Args:\n        given_list (List): the list to check\n        given_str (str): the string to check against\n\n    Returns:\n        bool: True if all items are equal, else False\n    \"\"\"\n    return all(i == given_str for i in given_list)\n\n\nif __name__ == \"__main__\":\n    print(check_list_is_equal([\"a\", \"a\", \"a\"], \"a\"))\n    print(check_list_is_equal([\"a\", \"b\", \"a\"], \"a\"))"
    },
    {
      "rank": 7,
      "score": 10.0,
      "candidate": "def all_items_equal(lst, value):\n    return all(elem == value for elem in lst)\n\n\ndef test_all_items_equal():\n    \"\"\"\n    >>> test_all_items_equal()\n    \"\"\"\n    assert all_items_equal([1, 1, 1, 1], 1)\n    assert not all_items_equal([1, 2, 1, 1], 1)\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 8,
      "score": 10.0,
      "candidate": "from typing import List\n\n\ndef check_list(lst: List[str], item: str) -> bool:\n    \"\"\"Checks whether all items of a list are equal to a given string.\n\n    Args:\n        lst (List[str]): The list of strings.\n        item (str): The string to check.\n\n    Returns:\n        bool: True if all items of the list are equal to the given string.\n    \"\"\"\n\n    return all(elem == item for elem in lst)\n\n\nif __name__ == \"__main__\":\n    lst = [\"cat\", \"dog\", \"cat\", \"cat\"]\n    assert check_list(lst, \"cat\")\n    assert not check_list(lst, \"dog\")"
    },
    {
      "rank": 9,
      "score": 10.0,
      "candidate": "from typing import List, Any\n\n\ndef check_all_items_equal_to_str(lst: List[Any], string: str) -> bool:\n    \"\"\"Checks whether all items of a list are equal to a given string.\n\n    Args:\n        lst: a list of items\n        string: a string to compare with\n\n    Returns:\n        True if all items of a list are equal to a given string,\n        False otherwise\n\n    Examples:\n        >>> assert check_all_items_equal_to_str(['a', 'a', 'a'], 'a')\n        >>> assert not check_all_items_equal_to_str(['a', 'b', 'a'], 'a')\n    \"\"\"\n    return all(item == string for item in lst)\n\n\nif __name__ == \"__main__\":\n    print(check_all_items_equal_to_str([\"a\", \"a\", \"a\"], \"a\"))\n    print(check_all_items_equal_to_str([\"a\", \"b\", \"a\"], \"a\"))"
    },
    {
      "rank": 10,
      "score": 10.0,
      "candidate": "from typing import List\n\n\ndef all_items_equal(lst: List, string: str) -> bool:\n    \"\"\"Checks whether all items of a list are equal to a given string.\n\n    Args:\n        lst: list to check\n        string: string to check for\n\n    Examples:\n        >>> all_items_equal(['a', 'a', 'a'], 'a')\n        True\n        >>> all_items_equal(['a', 'b', 'a'], 'a')\n        False\n        >>> all_items_equal([], 'a')\n        True\n        >>> all_items_equal(['a'], 'a')\n        True\n        >>> all_items_equal(['a'], 'b')\n        False\n    \"\"\"\n    return lst.count(string) == len(lst)\n\n\nif __name__ == \"__main__\":\n    print(all_items_equal([\"a\", \"b\", \"a\"], \"a\"))"
    },
    {
      "rank": 11,
      "score": 9.315015191163646,
      "candidate": "from typing import List\n\n\ndef all_equal_to_str(lst: List[str], str_to_compare: str) -> bool:\n    \"\"\"\n    O(n) & O(1)\n    \"\"\"\n    return all(item == str_to_compare for item in lst)\n\n\nif __name__ == \"__main__\":\n    assert all_equal_to_str([\"a\", \"a\", \"a\"], \"a\") is True\n    assert all_equal_to_str([\"a\", \"b\", \"a\"], \"a\") is False"
    },
    {
      "rank": 12,
      "score": 9.186674467732919,
      "candidate": "def check_list(items: list, string: str) -> bool:\n    \"\"\"Check if all items in a list are equal to a string.\n\n    Args:\n        items (list): List of items to check.\n        string (str): String to check against.\n\n    Returns:\n        bool: True if all items are equal to the string.\n    \"\"\"\n    return all(item == string for item in items)\n\n\nif __name__ == \"__main__\":\n    print(check_list([\"one\", \"two\", \"three\", \"one\"], \"one\"))\n    print(check_list([\"one\", \"two\", \"three\", \"four\"], \"one\"))\n    print(check_list([\"one\", \"two\", \"three\", \"one\"], \"four\"))"
    },
    {
      "rank": 13,
      "score": 8.941291890767335,
      "candidate": "def check_equal(items, string):\n    if len(items) > 0:\n        for item in items:\n            if item != string:\n                return False\n    return True\n\ndef check_equal_2(items, string):\n    return len(items) > 0 and items.count(items[0]) == len(items)\n\ndef check_equal_3(items, string):\n    return len(set(items)) == 1\n\nif __name__ == '__main__':\n    print(check_equal(['a', 'a', 'a', 'a'], 'a'))\n    print(check_equal(['a', 'b', 'a', 'a'], 'a'))\n    print(check_equal(['a', 'a', 'a', 'a'], 'b'))\n    print(check_equal_2(['a', 'a', 'a', 'a'], 'a'))\n    print(check_equal_2(['a', 'b', 'a', 'a'], 'a'))\n    print(check_equal_2(['a', 'a', 'a', 'a'], 'b'))\n    print(check_equal_3(['a', 'a', 'a', 'a'], 'a'))\n    print(check_equal_3(['a', 'b', 'a', 'a'], 'a'))\n    print(check_equal_3(['a', 'a', 'a', 'a'], 'b'))"
    },
    {
      "rank": 14,
      "score": 8.929014220017542,
      "candidate": "def check_all_equal(lst, s):\n    return lst.count(s) == len(lst)\n\n\nif __name__ == '__main__':\n    print(check_all_equal(['abc', 'abc', 'abc'], 'abc'))\n    print(check_all_equal(['abc', 'abc', 'abc'], 'xyz'))"
    },
    {
      "rank": 15,
      "score": 8.916104906453697,
      "candidate": "from typing import List\n\n\ndef check_equal_strings(lst: List[str], s: str) -> bool:\n    \"\"\"Check whether all items of a list are equal to a given string.\n\n    Args:\n        lst (List[str]): list of strings\n        s (str): given string\n\n    Returns:\n        bool: True if all items are equal to the given string, False otherwise\n    \"\"\"\n    return lst == [s] * len(lst)\n\n\nif __name__ == \"__main__\":\n    print(check_equal_strings([\"a\", \"a\", \"a\", \"a\"], \"a\"))\n    print(check_equal_strings([\"a\", \"a\", \"b\", \"b\"], \"b\"))\n    print(check_equal_strings([\"a\", \"a\", \"a\", \"a\"], \"b\"))"
    },
    {
      "rank": 16,
      "score": 8.902950654191953,
      "candidate": "def is_list_equal(lst, value):\n    for item in lst:\n        if item != value:\n            return False\n    return True\n\n\ndef main():\n    print(is_list_equal([\"a\", \"b\", \"c\"], \"a\"))\n    print(is_list_equal([\"a\", \"a\", \"a\"], \"a\"))\n    print(is_list_equal([\"a\", \"b\", \"c\"], \"c\"))\n    print(is_list_equal([], \"a\"))\n    print(is_list_equal([\"a\"], \"a\"))\n    print(is_list_equal([\"a\", \"a\", \"a\"], \"b\"))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 17,
      "score": 8.87468343976442,
      "candidate": "def equal_items(lst, str):\n    return all(map(lambda x: x == str, lst))\n\nprint(equal_items([\"a\", \"a\", \"a\"], \"a\"))\nprint(equal_items([\"a\", \"b\", \"a\"], \"a\"))"
    },
    {
      "rank": 18,
      "score": 8.8307386215008,
      "candidate": "def check_list_equal(items, string):\n    for item in items:\n        if item != string:\n            return False\n    return True\n\n\nprint(check_list_equal([\"a\", \"a\", \"a\", \"a\"], \"a\"))\nprint(check_list_equal([\"a\", \"b\", \"a\", \"a\"], \"a\"))\nprint(check_list_equal([\"a\", \"a\", \"a\", \"a\"], \"b\"))"
    },
    {
      "rank": 19,
      "score": 8.826331580969718,
      "candidate": "def check_equal(lst, str):\n    for item in lst:\n        if item != str:\n            return False\n    return True\n\n\nprint(check_equal([\"a\", \"a\", \"a\", \"a\"], \"a\"))"
    },
    {
      "rank": 20,
      "score": 8.791523737042288,
      "candidate": "from typing import List\n\n\ndef check_all_items_equal_to_a_given_string(input_list: List, string: str) -> bool:\n    \"\"\"Checks whether all items in a list are equal to a given string.\n\n    Args:\n        input_list: the list to check\n        string: the string to check\n\n    Returns:\n        True if all items are equal to the string, False otherwise\n    \"\"\"\n    return all(item == string for item in input_list)\n\n\nif __name__ == \"__main__\":\n    print(check_all_items_equal_to_a_given_string([\"a\", \"a\", \"a\"], \"a\"))\n    print(check_all_items_equal_to_a_given_string([\"a\", \"a\", \"b\"], \"a\"))"
    },
    {
      "rank": 21,
      "score": 8.74885805735177,
      "candidate": "def all_equal(string, list):\n    if len(list) == 0:\n        return False\n    for item in list:\n        if item != string:\n            return False\n    return True\n\ndef test_all_equal():\n    assert all_equal('a', ['a', 'a'])\n    assert all_equal('b', ['b', 'b', 'b'])\n    assert not all_equal('a', ['a', 'b'])\n\nif __name__ == '__main__':\n    test_all_equal()"
    },
    {
      "rank": 22,
      "score": 8.731932300199652,
      "candidate": "def string_list(lst, s):\n    return all(item == s for item in lst)\n\n\nif __name__ == \"__main__\":\n    print(string_list([\"a\", \"a\", \"a\", \"a\"], \"a\"))"
    },
    {
      "rank": 23,
      "score": 8.62102251306691,
      "candidate": "def list_equals(list_items, given_string):\n    for item in list_items:\n        if item != given_string:\n            return False\n    return True\n\n\nif __name__ == '__main__':\n    print(list_equals([\"a\", \"a\", \"a\"], \"a\"))\n    print(list_equals([\"a\", \"a\", \"b\"], \"a\"))"
    },
    {
      "rank": 24,
      "score": 8.605945040541622,
      "candidate": "def check_equal(lst, value):\n    return all(x == value for x in lst)\n\n\nprint(check_equal([\"a\", \"a\", \"a\"], \"a\"))\nprint(check_equal([\"a\", \"b\", \"a\"], \"a\"))\nprint(check_equal([\"a\", \"a\", \"a\"], \"b\"))"
    },
    {
      "rank": 25,
      "score": 8.60013825720412,
      "candidate": "def equal_items(my_list, item):\n    \"\"\"\n    >>> equal_items([\"a\", \"a\", \"a\"], \"a\")\n    True\n    >>> equal_items([\"a\", \"a\", \"b\"], \"a\")\n    False\n    \"\"\"\n    return all(x == item for x in my_list)\n\ndef equal_items_comprehension(my_list, item):\n    \"\"\"\n    >>> equal_items_comprehension([\"a\", \"a\", \"a\"], \"a\")\n    True\n    >>> equal_items_comprehension([\"a\", \"a\", \"b\"], \"a\")\n    False\n    \"\"\"\n    return all([x == item for x in my_list])\n\ndef equal_items_set(my_list, item):\n    \"\"\"\n    >>> equal_items_set([\"a\", \"a\", \"a\"], \"a\")\n    True\n    >>> equal_items_set([\"a\", \"a\", \"b\"], \"a\")\n    False\n    \"\"\"\n    return len(set(my_list)) == 1\n\ndef equal_items_set_comprehension(my_list, item):\n    \"\"\"\n    >>> equal_items_set_comprehension([\"a\", \"a\", \"a\"], \"a\")\n    True\n    >>> equal_items_set_comprehension([\"a\", \"a\", \"b\"], \"a\")\n    False\n    \"\"\"\n    return len(set([x for x in my_list])) == 1\n\ndef equal_items_set_comprehension_2(my_list, item):\n    \"\"\"\n    >>> equal_items_set_comprehension_2([\"a\", \"a\", \"a\"], \"a\")\n    True\n    >>> equal_items_set_comprehension_2([\"a\", \"a\", \"b\"], \"a\")\n    False\n    \"\"\"\n    return len(set([item for item in my_list])) == 1\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 26,
      "score": 8.598957465984496,
      "candidate": "from typing import List\n\n\ndef check_equal_to_string(lst: List[str], s: str) -> bool:\n    return all(item == s for item in lst)\n\n\nif __name__ == \"__main__\":\n    assert check_equal_to_string([\"a\", \"a\", \"a\", \"a\"], \"a\")\n    assert not check_equal_to_string([\"a\", \"a\", \"a\", \"b\"], \"a\")"
    },
    {
      "rank": 27,
      "score": 8.48757200941613,
      "candidate": "def check_list(input_list, string_to_check):\n    \"\"\"\n    Check whether all items of a list are equal to a given string.\n\n    :param input_list: list of strings\n    :param string_to_check: string\n    :return: bool\n    \"\"\"\n    if len(input_list) == 0:\n        return False\n    for item in input_list:\n        if item != string_to_check:\n            return False\n    return True\n\n\ndef check_list_using_set(input_list, string_to_check):\n    \"\"\"\n    Check whether all items of a list are equal to a given string.\n\n    :param input_list: list of strings\n    :param string_to_check: string\n    :return: bool\n    \"\"\"\n    if len(input_list) == 0:\n        return False\n    return len(set(input_list)) == 1\n\n\ndef check_list_using_set_comprehension(input_list, string_to_check):\n    \"\"\"\n    Check whether all items of a list are equal to a given string.\n\n    :param input_list: list of strings\n    :param string_to_check: string\n    :return: bool\n    \"\"\"\n    if len(input_list) == 0:\n        return False\n    return len({item for item in input_list}) == 1\n\n\ndef check_list_using_map(input_list, string_to_check):\n    \"\"\"\n    Check whether all items of a list are equal to a given string.\n\n    :param input_list: list of strings\n    :param string_to_check: string\n    :return: bool\n    \"\"\"\n    if len(input_list) == 0:\n        return False\n    return len(set(map(lambda item: item == string_to_check, input_list))) == 1"
    },
    {
      "rank": 28,
      "score": 8.485356566516385,
      "candidate": "def equal_to_string(my_list, my_string):\n    for i in my_list:\n        if i != my_string:\n            return False\n    return True\n\n\nif __name__ == '__main__':\n    print(equal_to_string(['a', 'b', 'c'], 'a'))"
    },
    {
      "rank": 29,
      "score": 8.410599687301687,
      "candidate": "def check_equal(lst, item):\n    return all(i == item for i in lst)\n\n\nprint(check_equal([\"a\", \"a\", \"a\"], \"a\"))\nprint(check_equal([\"a\", \"b\", \"a\"], \"a\"))\nprint(check_equal([\"a\", \"b\", \"c\"], \"a\"))"
    },
    {
      "rank": 30,
      "score": 8.390089751721971,
      "candidate": "from typing import List\n\n\ndef check_all_equal_to(lst: List[str], string: str) -> bool:\n    return lst.count(string) == len(lst)\n\n\nif __name__ == \"__main__\":\n    assert check_all_equal_to([\"a\", \"a\", \"a\", \"a\"], \"a\")\n    assert not check_all_equal_to([\"a\", \"a\", \"b\", \"a\"], \"a\")\n    assert check_all_equal_to([\"a\", \"a\", \"a\"], \"a\")\n    assert not check_all_equal_to([\"a\", \"a\", \"b\"], \"a\")\n    assert not check_all_equal_to([\"a\", \"a\", \"a\"], \"b\")"
    },
    {
      "rank": 31,
      "score": 8.379460222893988,
      "candidate": "def check_list(lst, string):\n    for i in lst:\n        if i != string:\n            return False\n    return True\n\n\ndef main():\n    print(check_list([\"test\", \"test\", \"test\"], \"test\"))\n    print(check_list([\"test\", \"test\", \"test\"], \"test2\"))\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 32,
      "score": 8.341198657160813,
      "candidate": "from typing import List, Optional\n\n\ndef equal_to(lst: List[str], value: Optional[str] = None) -> bool:\n    \"\"\"Check whether all items of a list are equal to a given string.\n\n    Args:\n        lst (List[str]): list to check\n        value (Optional[str], optional): string to check for. Defaults to None.\n\n    Returns:\n        bool: True if all items are equal to value, False otherwise\n    \"\"\"\n    if not lst:\n        return True\n    if value is None:\n        value = lst[0]\n\n    return all(item == value for item in lst)\n\n\nif __name__ == \"__main__\":\n    print(equal_to([]))\n    print(equal_to([\"a\", \"a\"]))\n    print(equal_to([\"a\", \"b\"]))\n    print(equal_to([\"a\", \"a\", \"a\"]))\n    print(equal_to([\"a\", \"a\", \"a\", \"b\"]))\n    print(equal_to([\"a\", \"b\", \"a\", \"b\"]))\n    print(equal_to([\"a\", \"b\", \"c\", \"d\"]))\n    print(equal_to([\"a\", \"b\", \"c\", \"d\", \"e\"]))"
    },
    {
      "rank": 33,
      "score": 8.307348382041605,
      "candidate": "def check_equal(lst, string):\n    for item in lst:\n        if item != string:\n            return False\n    return True\n\n\nif __name__ == \"__main__\":\n    print(check_equal([\"A\", \"A\", \"A\", \"A\"], \"A\"))\n    print(check_equal([\"A\", \"B\", \"A\", \"A\"], \"A\"))"
    },
    {
      "rank": 34,
      "score": 8.303910989725487,
      "candidate": "def check_list(a_list, string):\n    return a_list == [string] * len(a_list)\n\n\ndef main():\n    print(check_list([\"a\", \"a\", \"a\"], \"a\"))\n    print(check_list([\"a\", \"a\", \"a\"], \"b\"))\n    print(check_list([1, 1, 1], 1))\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 35,
      "score": 8.30292570751748,
      "candidate": "def all_equal(lst, target):\n    return lst.count(target) == len(lst)\n\n\nprint(all_equal([\"a\", \"a\", \"a\", \"a\"], \"a\"))\nprint(all_equal([1, 1, 1, 1], 1))\nprint(all_equal([], \"a\"))\nprint(all_equal([1, 1, 1, 1], \"a\"))\nprint(all_equal([\"a\", \"b\", \"a\", \"c\"], \"a\"))"
    },
    {
      "rank": 36,
      "score": 8.299114627794374,
      "candidate": "def check_list(lst, string):\n    for item in lst:\n        if item != string:\n            return False\n    return True\n\n\nprint(check_list([\"a\", \"b\", \"c\"], \"a\"))\nprint(check_list([\"a\", \"a\", \"a\"], \"a\"))\nprint(check_list([\"a\"], \"a\"))\nprint(check_list([\"a\", \"b\", \"a\"], \"a\"))\nprint(check_list([\"a\", \"a\", \"b\"], \"a\"))\nprint(check_list([\"a\", \"b\", \"c\"], \"b\"))"
    },
    {
      "rank": 37,
      "score": 8.263455772648776,
      "candidate": "def all_equal(list, value):\n    return len(list) != 0 and all([el == value for el in list])\n\n\ndef main():\n    print(\"All the items of the list are equal to a given string:\")\n    print(all_equal([\"a\", \"a\", \"a\", \"a\"], \"a\"))\n    print(all_equal([\"a\", \"a\", \"b\", \"a\"], \"a\"))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 38,
      "score": 8.227944222093345,
      "candidate": "def all_equal(lst: list, string: str) -> bool:\n    return len(set(lst)) == 1 and lst[0] == string\n\n\nif __name__ == \"__main__\":\n    print(all_equal([\"a\", \"a\", \"a\", \"a\"], \"a\"))\n    print(all_equal([\"a\", \"a\", \"b\", \"a\"], \"a\"))\n    print(all_equal([\"a\", \"a\", \"b\", \"a\"], \"b\"))"
    },
    {
      "rank": 39,
      "score": 8.226638128822588,
      "candidate": "def check_list_items(my_list, my_string):\n    return all(item == my_string for item in my_list)\n\nprint(check_list_items(['a', 'b', 'c'], 'a'))\nprint(check_list_items(['a', 'a', 'a'], 'a'))\nprint(check_list_items(['a', 'b', 'c'], 'd'))\nprint(check_list_items([], 'a'))"
    },
    {
      "rank": 40,
      "score": 8.225551460266423,
      "candidate": "from typing import List\n\n\ndef check_list(lst: List[str], value: str) -> bool:\n    \"\"\"Check if all items in list are equal to a given string.\n\n    Args:\n        lst (List[str]): List to check\n        value (str): Value to check against\n\n    Returns:\n        bool: Whether all items are equal to the given string\n\n    \"\"\"\n    return lst.count(value) == len(lst)\n\n\nif __name__ == \"__main__\":\n    print(check_list([\"a\", \"a\", \"a\", \"a\"], \"a\"))"
    },
    {
      "rank": 41,
      "score": 8.223791483055017,
      "candidate": "from typing import List\n\n\ndef check_list(list_: List, item: str) -> bool:\n    \"\"\"Checks whether all items of a list are equal to a given string.\n\n    Args:\n        list_ (List): list of items\n        item (str): string to check\n\n    Returns:\n        bool: True if all items are equal to the given string, otherwise False\n    \"\"\"\n    return all(i == item for i in list_)\n\n\nif __name__ == \"__main__\":\n    print(check_list([\"a\", \"b\", \"a\", \"a\", \"a\"], \"a\"))\n    print(check_list([\"a\", \"b\", \"a\", \"a\", \"a\"], \"b\"))\n    print(check_list([\"a\", \"b\", \"c\", \"a\", \"a\"], \"a\"))"
    },
    {
      "rank": 42,
      "score": 8.219232552657159,
      "candidate": "def check_list_of_strings(input_list, check_value):\n    \"\"\"\n    :param input_list: list of strings\n    :param check_value: string\n    :return: True if all elements are equal to check_value\n    \"\"\"\n\n    return all([i == check_value for i in input_list])\n\n\ndef main():\n    print(check_list_of_strings(['a', 'a', 'a'], 'a'))\n    print(check_list_of_strings(['a', 'a', 'b'], 'a'))\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 43,
      "score": 8.208618633959713,
      "candidate": "def all_equal(items, target):\n    return all(item == target for item in items)\n\n# Tests\nprint(all_equal([], \"\"))\nprint(all_equal([\"\", \"\", \"\"], \"\"))\nprint(all_equal([\"a\", \"a\", \"a\"], \"a\"))\nprint(all_equal([\"b\", \"a\", \"a\"], \"a\"))\nprint(all_equal([\"a\", \"a\", \"b\"], \"a\"))\nprint(all_equal([\"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\"], \"a\"))\nprint(all_equal([\"a\", \"b\", \"c\"], \"a\"))\nprint(all_equal([\"a\", \"a\", \"a\", \"b\"], \"a\"))"
    },
    {
      "rank": 44,
      "score": 8.200857441855831,
      "candidate": "from collections import defaultdict\n\n\ndef check_list(lst, val):\n    d = defaultdict(int)\n\n    for item in lst:\n        d[item] += 1\n\n    if len(d) == 1 and d[val] == len(lst):\n        return True\n\n    return False\n\n\nif __name__ == \"__main__\":\n    lst = [\"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\"]\n    print(check_list(lst, \"a\"))"
    },
    {
      "rank": 45,
      "score": 8.162144260182606,
      "candidate": "from typing import List\n\n\ndef check_equal_list(items: List[str], value: str) -> bool:\n    return all(map(lambda item: item == value, items))\n\n\nif __name__ == \"__main__\":\n    print(check_equal_list([\"a\", \"b\", \"c\"], \"a\"))\n    print(check_equal_list([\"a\", \"b\", \"c\"], \"d\"))"
    },
    {
      "rank": 46,
      "score": 8.161642336696628,
      "candidate": "def all_equal(lst, s):\n    return lst.count(s) == len(lst)\n\n\ndef test_all_equal():\n    assert all_equal(['a', 'b', 'a'], 'a')\n    assert all_equal([], 'a')\n    assert not all_equal(['a', 'b', 'a'], 'c')"
    },
    {
      "rank": 47,
      "score": 8.141238159780036,
      "candidate": "def check_list(lst, string):\n    \"\"\"Check if all items of lst are equal to string.\"\"\"\n    for item in lst:\n        if item != string:\n            return False\n    return True"
    },
    {
      "rank": 48,
      "score": 8.126291104300645,
      "candidate": "def check_equal(lst: list, target: str) -> bool:\n    return lst.count(target) == len(lst)\n\n\nif __name__ == \"__main__\":\n    print(check_equal([\"a\", \"a\", \"a\", \"a\"], \"a\"))\n    print(check_equal([\"a\", \"b\", \"a\", \"a\"], \"a\"))\n    print(check_equal([\"a\", \"b\", \"c\", \"a\", \"a\"], \"a\"))\n    print(check_equal([\"a\", \"b\", \"c\", \"d\", \"a\"], \"a\"))"
    },
    {
      "rank": 49,
      "score": 8.064452451084646,
      "candidate": "def check_all_equal(lst: list, string: str) -> bool:\n    \"\"\"Checks whether all items of a list are equal to a given string.\n\n    Args:\n        lst (list): list of items to check\n        string (str): string to compare with\n\n    Returns:\n        bool: True if all items are equal, False otherwise\n    \"\"\"\n    return lst.count(string) == len(lst)\n\n\nif __name__ == \"__main__\":\n    print(check_all_equal([\"apple\", \"apple\", \"apple\"], \"apple\"))"
    },
    {
      "rank": 50,
      "score": 7.947320307835172,
      "candidate": "def all_items_equal(items: list, value: str) -> bool:\n    return all(item == value for item in items)\n\n\ndef test():\n    assert all_items_equal([], 'a') == True\n    assert all_items_equal(['a'], 'a') == True\n    assert all_items_equal(['a', 'a'], 'a') == True\n    assert all_items_equal(['a', 'a', 'a'], 'a') == True\n    assert all_items_equal(['a', 'b'], 'a') == False\n    assert all_items_equal(['a', 'a', 'b'], 'a') == False\n    assert all_items_equal(['b', 'b', 'b'], 'a') == False\n    assert all_items_equal(['a', 'a', 'a', 'a', 'a'], 'a') == True\n    assert all_items_equal(['a', 'a', 'a', 'a', 'b'], 'a') == False\n    assert all_items_equal(['b', 'b', 'b', 'b', 'b'], 'a') == False\n    print(\"Passed\")\n\n\nif __name__ == \"__main__\":\n    test()"
    },
    {
      "rank": 51,
      "score": 7.903477463055962,
      "candidate": "def check_equal(lst, string):\n    for item in lst:\n        if item != string:\n            return False\n    return True\n\n\ndef main():\n    print(check_equal([\"a\", \"a\", \"a\"], \"a\"))\n    print(check_equal([\"a\", \"a\", \"b\"], \"a\"))\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 52,
      "score": 7.870647928958064,
      "candidate": "def check_items_equal_to_string(list, string):\n    for i in list:\n        if i != string:\n            return False\n    return True\n\nprint(check_items_equal_to_string([\"a\", \"a\", \"a\", \"a\"], \"a\"))\nprint(check_items_equal_to_string([\"b\", \"a\", \"a\", \"a\"], \"a\"))"
    },
    {
      "rank": 53,
      "score": 7.77481279692412,
      "candidate": "def all_equal(string, list_of_strings):\n    return all([string == item for item in list_of_strings])\n\n\ndef main():\n    print(all_equal(\"apple\", [\"apple\", \"apple\"]))\n    print(all_equal(\"apple\", [\"apple\", \"orange\"]))\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 54,
      "score": 7.61581557142396,
      "candidate": "def all_equal(lst, value):\n    return lst.count(value) == len(lst)\n\n\ndef main():\n    print(all_equal([\"a\", \"a\", \"a\"], \"a\"))\n    print(all_equal([\"a\", \"a\", \"a\"], \"b\"))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 55,
      "score": 7.52339948622095,
      "candidate": "from typing import List, Optional\n\n\ndef all_equal_to_given_string(\n    string: str, list_of_strings: Optional[List[str]] = None\n) -> bool:\n    \"\"\"Check whether all items of a list are equal to a given string.\n\n    Args:\n        string: the string to check\n        list_of_strings: list of strings to check for\n\n    Returns:\n        True if all items in list are equal to the given string, False otherwise\n    \"\"\"\n    if list_of_strings is None:\n        return False\n    return all(item == string for item in list_of_strings)\n\n\nif __name__ == \"__main__\":\n    print(all_equal_to_given_string(\"a\", [\"a\", \"a\", \"a\"]))\n    print(all_equal_to_given_string(\"a\", [\"a\", \"a\", \"b\"]))\n    print(all_equal_to_given_string(\"a\", [\"b\", \"a\", \"a\"]))"
    },
    {
      "rank": 56,
      "score": 7.510287054582025,
      "candidate": "def check_all_items(items, item):\n    for i in items:\n        if i != item:\n            return False\n    return True\n\nif __name__ == '__main__':\n    items = ['a', 'a', 'a', 'a']\n    print(check_all_items(items, 'a'))"
    },
    {
      "rank": 57,
      "score": 7.213164245522265,
      "candidate": "def check_list_for_string(list, string):\n    for item in list:\n        if item != string:\n            return False\n    return True\n\n\ncheck_list_for_string([\"1\", \"2\", \"3\", \"4\", \"5\"], \"1\")"
    },
    {
      "rank": 58,
      "score": 3.6727967720000225,
      "candidate": "from typing import List, Optional\n\n\ndef all_equal(lst: List[str], target: Optional[str] = None) -> bool:\n    \"\"\"Check if all items in a list are equal to a given string.\n\n    Args:\n        lst (List[str]): List to check\n        target (Optional[str], optional): String to check. Defaults to None.\n\n    Examples:\n        >>> all_equal(['a', 'a', 'a'])\n        True\n        >>> all_equal(['a', 'b', 'a'])\n        False\n        >>> all_equal(['a', 'a', 'a'], 'a')\n        True\n        >>> all_equal(['a', 'a', 'a'], 'b')\n        False\n    \"\"\"\n    return all(x == target for x in lst)\n\n\ndef all_equal_v2(lst: List[str], target: Optional[str] = None) -> bool:\n    \"\"\"Check if all items in a list are equal to a given string.\n\n    Args:\n        lst (List[str]): List to check\n        target (Optional[str], optional): String to check. Defaults to None.\n\n    Examples:\n        >>> all_equal_v2(['a', 'a', 'a'])\n        True\n        >>> all_equal_v2(['a', 'b', 'a'])\n        False\n        >>> all_equal_v2(['a', 'a', 'a'], 'a')\n        True\n        >>> all_equal_v2(['a', 'a', 'a'], 'b')\n        False\n    \"\"\"\n    return len(set(lst)) <= 1\n\n\nif __name__ == \"__main__\":\n    print(all_equal([\"a\", \"a\", \"a\"]))\n    print(all_equal([\"a\", \"b\", \"a\"]))\n    print(all_equal([\"a\", \"a\", \"a\"], \"a\"))\n    print(all_equal([\"a\", \"a\", \"a\"], \"b\"))"
    },
    {
      "rank": 59,
      "score": 3.6613557235803667,
      "candidate": "def check_all_items_equal_to(items, value):\n    # Base case\n    if len(items) == 0:\n        return False\n    # Recursive case\n    else:\n        return items[0] == value and check_all_items_equal_to(items[1:], value)\n\nif __name__ == '__main__':\n    print(check_all_items_equal_to(['a', 'a', 'a', 'a', 'a'], 'a'))\n    print(check_all_items_equal_to(['a', 'b', 'a', 'a', 'a'], 'a'))\n    print(check_all_items_equal_to(['a', 'b', 'c', 'd', 'e'], 'a'))"
    },
    {
      "rank": 60,
      "score": 3.6549028382554507,
      "candidate": "def all_equal(lst, value):\n    return all(map(lambda x: x == value, lst))"
    },
    {
      "rank": 61,
      "score": 3.635494439238852,
      "candidate": "from typing import List\n\n\ndef check_list_for_str(my_list: List[str], str_to_check: str) -> bool:\n    \"\"\"Checks if all items in list are equal to str_to_check.\n\n    Args:\n        my_list (List[str]): List of strings to check.\n        str_to_check (str): String to check against.\n\n    Returns:\n        bool: True if all items are equal, False otherwise.\n    \"\"\"\n    if len(my_list) == 0:\n        return False\n\n    return all(item == str_to_check for item in my_list)\n\n\nif __name__ == \"__main__\":\n    print(check_list_for_str([\"hello\", \"hello\", \"hello\"], \"hello\"))\n    print(check_list_for_str([\"hello\", \"goodbye\", \"hello\"], \"hello\"))"
    },
    {
      "rank": 62,
      "score": 3.630228970636268,
      "candidate": "from typing import List\n\n\ndef all_equal(items: List[str], target: str) -> bool:\n    \"\"\"Return True if all elements in list are equal to target.\n\n    >>> all_equal([\"foo\", \"foo\"], \"foo\")\n    True\n\n    >>> all_equal([\"foo\", \"bar\"], \"foo\")\n    False\n\n    >>> all_equal([\"foo\", \"foo\"], \"bar\")\n    False\n    \"\"\"\n    return all(item == target for item in items)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 63,
      "score": 3.583183212285454,
      "candidate": "from typing import List\n\n\ndef check_list_equal(lst: List[str], s: str) -> bool:\n    \"\"\"Check if all items of a list are equal to a given string.\n\n    Args:\n        lst (List[str]): list of strings to check\n        s (str): string to check against\n\n    Returns:\n        bool: True if all items are equal to s, False otherwise\n    \"\"\"\n    return lst.count(s) == len(lst)\n\n\nif __name__ == \"__main__\":\n    lst = [\"a\", \"b\", \"c\", \"d\", \"e\", \"a\"]\n    print(check_list_equal(lst, \"a\"))"
    },
    {
      "rank": 64,
      "score": 3.4004504512199656,
      "candidate": "from typing import List\n\n\ndef check_equal(lst: List, string: str) -> bool:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(1)\n    \"\"\"\n    return all(item == string for item in lst)\n\n\nif __name__ == \"__main__\":\n    assert check_equal([\"a\", \"a\", \"a\"], \"a\")\n    assert not check_equal([\"a\", \"a\", \"b\"], \"a\")"
    },
    {
      "rank": 65,
      "score": 3.353694312204371,
      "candidate": "from typing import List, Optional\n\n\ndef check_list(lst: List[str], string: str) -> bool:\n    \"\"\"Check if all items in a list are equal to a given string.\n\n    Args:\n        lst (List[str]): input list.\n        string (str): input string.\n\n    Returns:\n        bool: True if all items are equal to a given string, False otherwise.\n    \"\"\"\n    return all(item == string for item in lst)\n\n\ndef check_list_opt(lst: List[str], string: str) -> Optional[bool]:\n    \"\"\"Check if all items in a list are equal to a given string.\n\n    Args:\n        lst (List[str]): input list.\n        string (str): input string.\n\n    Returns:\n        Optional[bool]: True if all items are equal to a given string, False otherwise.\n    \"\"\"\n    if lst:\n        return all(item == string for item in lst)\n\n    return None\n\n\nif __name__ == \"__main__\":\n    print(check_list([\"apple\", \"apple\", \"apple\"], \"apple\"))\n    print(check_list([\"apple\", \"apple\", \"banana\"], \"apple\"))\n    print(check_list([], \"apple\"))\n    print(check_list_opt([\"apple\", \"apple\", \"apple\"], \"apple\"))\n    print(check_list_opt([\"apple\", \"apple\", \"banana\"], \"apple\"))\n    print(check_list_opt([], \"apple\"))"
    },
    {
      "rank": 66,
      "score": 3.329996933535751,
      "candidate": "def all_equal(lst: list, value: str) -> bool:\n    \"\"\"Checks whether all items of a list are equal to a given string.\n\n    Args:\n        lst (list): list of items to check\n        value (str): string to check\n\n    Examples:\n        >>> all_equal([\"foo\", \"foo\", \"foo\"], \"foo\")\n        True\n        >>> all_equal([\"foo\", \"foo\", \"bar\"], \"foo\")\n        False\n        >>> all_equal([], \"foo\")\n        True\n    \"\"\"\n    return all(item == value for item in lst)\n\n\nif __name__ == \"__main__\":\n    print(all_equal([\"foo\", \"foo\", \"foo\"], \"foo\"))\n    print(all_equal([\"foo\", \"foo\", \"bar\"], \"foo\"))\n    print(all_equal([], \"foo\"))"
    },
    {
      "rank": 67,
      "score": 3.2333008187419647,
      "candidate": "from typing import List\n\n\ndef check_list_for_str(lst: List[str], string: str) -> bool:\n    \"\"\"Checks if all items in a list are equal to a given string.\n\n    Args:\n        lst: list of strings\n        string: a string to check\n\n    Returns:\n        bool: True if all items are equal to the string, False otherwise.\n\n    Examples:\n        >>> check_list_for_str(['a', 'b', 'c', 'd'], 'a')\n        True\n        >>> check_list_for_str(['a', 'b', 'c', 'd'], 'z')\n        False\n        >>> check_list_for_str(['a', 'a', 'a', 'a'], 'a')\n        True\n        >>> check_list_for_str(['a', 'b', 'c', 'd'], 'ab')\n        False\n    \"\"\"\n    return all(item == string for item in lst)\n\n\nif __name__ == \"__main__\":\n    print(check_list_for_str([\"a\", \"b\", \"c\", \"d\"], \"a\"))\n    print(check_list_for_str([\"a\", \"b\", \"c\", \"d\"], \"z\"))\n    print(check_list_for_str([\"a\", \"a\", \"a\", \"a\"], \"a\"))\n    print(check_list_for_str([\"a\", \"b\", \"c\", \"d\"], \"ab\"))"
    },
    {
      "rank": 68,
      "score": 3.220704996238743,
      "candidate": "from typing import List\n\n\ndef check_list_equals_str(str_given: str, list_given: List[str]) -> bool:\n    \"\"\"\n    >>> check_list_equals_str('a', ['a','a','a'])\n    True\n    >>> check_list_equals_str('b', ['a','a','a'])\n    False\n    >>> check_list_equals_str('b', [])\n    False\n    \"\"\"\n    return len(list_given) != 0 and len(list_given) != 0 and all(\n        [str_given == item for item in list_given]\n    )\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 69,
      "score": 3.21358708579483,
      "candidate": "def check_all_items_equal_to_given_string(items: list, string: str) -> bool:\n    \"\"\"Check all items are equal to a given string.\n\n    Args:\n        items (list): items to check\n        string (str): string to check\n\n    Examples:\n        >>> assert check_all_items_equal_to_given_string([\"a\", \"a\", \"a\"], \"a\")\n        >>> assert not check_all_items_equal_to_given_string([\"a\", \"b\", \"a\"], \"a\")\n    \"\"\"\n    return len(set(items)) == 1 and items[0] == string\n\n\ndef main():\n    print(check_all_items_equal_to_given_string([\"a\", \"a\", \"a\"], \"a\"))\n    print(check_all_items_equal_to_given_string([\"a\", \"b\", \"a\"], \"a\"))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 70,
      "score": 3.155503490770483,
      "candidate": "def all_items_equal(lst, value):\n    return all(x == value for x in lst)\n\n\ndef test_all_items_equal():\n    assert all_items_equal([\"a\", \"a\"], \"a\")\n    assert all_items_equal([\"b\", \"b\"], \"b\")\n    assert all_items_equal([\"c\", \"c\"], \"c\")\n    assert all_items_equal([\"a\", \"a\", \"a\", \"a\"], \"a\")\n    assert all_items_equal([\"b\", \"b\", \"b\", \"b\"], \"b\")\n    assert all_items_equal([\"c\", \"c\", \"c\", \"c\"], \"c\")\n\n\nif __name__ == \"__main__\":\n    test_all_items_equal()"
    },
    {
      "rank": 71,
      "score": 3.155400110368618,
      "candidate": "from typing import List, Optional\n\n\ndef all_equal_to(items: List[str], value: str) -> bool:\n    \"\"\"Return True if all items are equal to value.\n\n    Args:\n        items (List[str]): list of items to check\n        value (str): value to check\n\n    Returns:\n        bool: True if all items are equal to value\n    \"\"\"\n    return all(item == value for item in items)\n\n\ndef all_equal_to_with_default(items: Optional[List[str]], value: str) -> bool:\n    \"\"\"Return True if all items are equal to value.\n\n    Args:\n        items (Optional[List[str]]): list of items to check\n        value (str): value to check\n\n    Returns:\n        bool: True if all items are equal to value\n    \"\"\"\n    if items is None:\n        return True\n    return all_equal_to(items, value)\n\n\nif __name__ == \"__main__\":\n    assert all_equal_to([\"a\", \"a\", \"a\", \"a\"], \"a\") is True\n    assert all_equal_to([\"a\", \"b\", \"a\", \"a\"], \"a\") is False\n    assert all_equal_to([], \"a\") is True\n    assert all_equal_to_with_default(None, \"a\") is True"
    },
    {
      "rank": 72,
      "score": 3.1535584057500508,
      "candidate": "def check_all_items_equal(items, target):\n    return all(item == target for item in items)\n\n\ndef test_check_all_items_equal():\n    assert check_all_items_equal([\"foo\", \"foo\"], \"foo\")\n    assert not check_all_items_equal([\"foo\", \"bar\"], \"foo\")\n    assert check_all_items_equal([\"foo\", \"foo\"], \"bar\")\n\n\nif __name__ == '__main__':\n    test_check_all_items_equal()"
    },
    {
      "rank": 73,
      "score": 3.1393561068397617,
      "candidate": "def check_all_equal(arr, target):\n    # check that the length of the array is greater than 0\n    if len(arr) <= 0:\n        return False\n\n    # check that all items in the array are equal to the target\n    for item in arr:\n        if item != target:\n            return False\n\n    return True\n\nprint(check_all_equal([\"abc\", \"abc\"], \"abc\"))\nprint(check_all_equal([\"abc\", \"def\"], \"abc\"))\nprint(check_all_equal([], \"abc\"))\nprint(check_all_equal([\"abc\", \"abc\"], \"def\"))"
    },
    {
      "rank": 74,
      "score": 3.1351263530159676,
      "candidate": "from typing import List, Optional\n\n\ndef all_items_equal(lst: List[str], value: str) -> bool:\n    \"\"\"Checks whether all items of a list are equal to a given string.\n\n    Args:\n        lst (List[str]): list to check.\n        value (str): string to compare to list's items.\n\n    Returns:\n        bool: True if all items are equal to value, False otherwise.\n    \"\"\"\n    return all(item == value for item in lst)\n\n\ndef main():\n    print(all_items_equal([\"foo\", \"foo\", \"foo\"], \"foo\"))\n    print(all_items_equal([\"foo\", \"foo\", \"bar\"], \"foo\"))\n    print(all_items_equal([\"foo\", \"foo\", \"foo\"], \"bar\"))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 75,
      "score": 3.104043776773395,
      "candidate": "def check_list(items: list, string: str) -> bool:\n    \"\"\"Check if all items of a list are equal to a given string.\n\n    Args:\n        items (list): list of items.\n        string (str): string to be compared.\n\n    Returns:\n        bool: whether all items of the list are equal to the given string.\n    \"\"\"\n    if len(items) == 0:\n        return False\n    for item in items:\n        if item != string:\n            return False\n    return True\n\n\ndef main():\n    print(check_list([\"a\", \"b\", \"c\", \"d\", \"e\"], \"a\"))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 76,
      "score": 3.089811345852045,
      "candidate": "from typing import List, Optional\n\n\ndef check_list_equal(\n    lst: List[str],\n    check: Optional[str] = None,\n) -> bool:\n    \"\"\"Check if all items in a list are equal to a given string.\n\n    Args:\n        lst (List[str]): List to check.\n        check (Optional[str], optional): String to check for. Defaults to None.\n\n    Returns:\n        bool: True if all items in the list are equal to the given string.\n    \"\"\"\n    if check is None:\n        return len(lst) == 1 and lst[0] == \"\"\n    return len(lst) == 1 and lst[0] == check\n\n\nif __name__ == \"__main__\":\n    print(check_list_equal([\"a\", \"b\", \"c\", \"d\", \"e\"]))\n    print(check_list_equal([\"a\", \"a\", \"a\", \"a\", \"a\"]))\n    print(check_list_equal([\"a\", \"a\", \"a\", \"a\", \"a\"], \"a\"))\n    print(check_list_equal([\"a\", \"b\", \"c\", \"d\", \"e\"], \"a\"))"
    },
    {
      "rank": 77,
      "score": 3.084650331423723,
      "candidate": "from copy import deepcopy\n\ndef is_list_equal(lst, string):\n    if len(lst) == 0:\n        return False\n    lst = deepcopy(lst)\n    for _ in range(len(lst)):\n        if lst.pop() != string:\n            return False\n    return True\n\n\nif __name__ == '__main__':\n    print(is_list_equal(['a', 'a', 'a'], 'a'))\n    print(is_list_equal(['a', 'b', 'a'], 'a'))\n    print(is_list_equal(['a', 'a'], 'b'))"
    },
    {
      "rank": 78,
      "score": 3.0736883609116874,
      "candidate": "from typing import List\n\n\ndef check_equal(lst: List[str], target: str) -> bool:\n    \"\"\"Check if all items in a list are equal to a given string.\n\n    Args:\n        lst (List[str]): a list of strings\n        target (str): the string to check\n\n    Returns:\n        bool: whether the items in the list are equal to the target\n    \"\"\"\n    return all(item == target for item in lst)\n\n\nif __name__ == \"__main__\":\n    lst = [\"abc\", \"abc\", \"abc\", \"abc\", \"abc\"]\n    print(check_equal(lst, \"abc\"))\n    lst = [\"abc\", \"abc\", \"abc\", \"abc\", \"abc\"]\n    print(check_equal(lst, \"abcd\"))"
    },
    {
      "rank": 79,
      "score": 3.0476967135752426,
      "candidate": "from typing import List\n\n\ndef all_equal(lst: List[str], string: str) -> bool:\n    \"\"\"Check whether all items of a list are equal to a given string.\n\n    Args:\n        lst (List[str]): input list.\n        string (str): the string to check.\n\n    Returns:\n        bool: True if all items are equal, False otherwise.\n\n    Examples:\n        >>> assert all_equal([\"a\", \"a\", \"a\"], \"a\")\n        >>> assert not all_equal([\"a\", \"a\", \"b\"], \"a\")\n    \"\"\"\n    return all(item == string for item in lst)\n\n\nif __name__ == \"__main__\":\n    print(all_equal([\"a\", \"a\", \"a\"], \"a\"))\n    print(all_equal([\"a\", \"a\", \"b\"], \"a\"))"
    },
    {
      "rank": 80,
      "score": 3.029037128015807,
      "candidate": "from typing import List\n\n\ndef check_list_for_string(given_list: List[str], string: str) -> bool:\n    \"\"\"Check if all items in a list are equal to a given string.\n\n    Args:\n        given_list (List[str]): list of strings to check\n        string (str): string to check against\n\n    Returns:\n        bool: True if all items are equal to the given string, else False.\n    \"\"\"\n    for item in given_list:\n        if item != string:\n            return False\n    return True\n\n\nif __name__ == \"__main__\":\n    assert check_list_for_string([\"cat\", \"dog\", \"cat\"], \"cat\") is True\n    assert check_list_for_string([\"cat\", \"dog\", \"cat\"], \"dog\") is False\n    assert check_list_for_string([\"cat\", \"cat\", \"cat\"], \"cat\") is True\n    assert check_list_for_string([\"cat\", \"dog\", \"cat\"], \"dog\") is False\n    assert check_list_for_string([\"cat\", \"cat\", \"dog\"], \"cat\") is False\n    assert check_list_for_string([\"cat\", \"dog\", \"cat\"], \"horse\") is False\n    assert check_list_for_string([\"cat\", \"cat\", \"cat\"], \"horse\") is False"
    },
    {
      "rank": 81,
      "score": 2.9941961933626886,
      "candidate": "def check_list(l, str):\n    for item in l:\n        if item != str:\n            return False\n    return True\n\n\nprint(check_list([\"foo\", \"foo\"], \"foo\"))\nprint(check_list([\"foo\", \"bar\"], \"foo\"))"
    },
    {
      "rank": 82,
      "score": 2.9845948031827207,
      "candidate": "from typing import List, Optional\n\n\ndef check_equal(input_list: List[str], value: str) -> bool:\n    \"\"\"Return True if all items of a list are equal to a given string.\n\n    >>> check_equal(['a', 'a', 'a', 'a'], 'a')\n    True\n    >>> check_equal(['a', 'b', 'a', 'a'], 'a')\n    False\n    \"\"\"\n    return all(item == value for item in input_list)\n\n\ndef check_equal_optional(input_list: Optional[List[str]], value: str) -> bool:\n    \"\"\"Return True if all items of a list are equal to a given string.\n\n    >>> check_equal_optional(['a', 'a', 'a', 'a'], 'a')\n    True\n    >>> check_equal_optional(['a', 'b', 'a', 'a'], 'a')\n    False\n    \"\"\"\n    if input_list is None:\n        return False\n\n    return all(item == value for item in input_list)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod(verbose=True)"
    },
    {
      "rank": 83,
      "score": 2.9201666400345587,
      "candidate": "def check_list_equals(lst, val):\n    \"\"\"\n    >>> check_list_equals([], \"a\")\n    True\n    >>> check_list_equals([\"a\", \"a\", \"a\"], \"a\")\n    True\n    >>> check_list_equals([\"a\", \"b\", \"c\"], \"a\")\n    False\n    \"\"\"\n    return lst == [val] * len(lst)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 84,
      "score": 2.9029161907907897,
      "candidate": "from typing import List\n\n\ndef list_check(lst: List[str], string: str) -> bool:\n    return all(item == string for item in lst)\n\n\nif __name__ == \"__main__\":\n    print(list_check([\"a\", \"b\", \"c\"], \"a\"))"
    },
    {
      "rank": 85,
      "score": 2.8993211085118524,
      "candidate": "from typing import List\n\n\ndef check_list_for_string(lst: List[str], string: str) -> bool:\n    \"\"\"Checks list for a string.\n\n    Args:\n        lst (List[str]): list to check.\n        string (str): string to check for.\n\n    Returns:\n        bool: True if all items are equal to string, False otherwise.\n    \"\"\"\n    return all(item == string for item in lst)\n\n\nif __name__ == \"__main__\":\n    lst = [\"a\", \"a\", \"a\", \"a\"]\n    print(check_list_for_string(lst, \"a\"))\n    lst = [\"a\", \"b\", \"c\", \"d\"]\n    print(check_list_for_string(lst, \"a\"))"
    },
    {
      "rank": 86,
      "score": 2.8993140488689657,
      "candidate": "from typing import List, Optional\n\n\ndef check_list_string(items: List[str], item: str) -> bool:\n    \"\"\"Check if all items of a list are equal to a given string.\n\n    Args:\n        items (List[str]): list of strings.\n        item (str): string to check.\n\n    Returns:\n        bool: True if all items are equal to the given string, False otherwise.\n    \"\"\"\n    return all(item == i for i in items)\n\n\ndef main():\n    print(check_list_string([\"a\", \"a\", \"a\"], \"a\"))  # True\n    print(check_list_string([\"a\", \"b\", \"a\"], \"a\"))  # False\n    print(check_list_string([\"a\"], \"a\"))  # True\n    print(check_list_string([], \"a\"))  # True\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 87,
      "score": 2.7722031123801734,
      "candidate": "def all_items_equal(lst: list, item: str) -> bool:\n    \"\"\"Check whether all items of a list are equal to a given string.\n\n    Args:\n        lst (list): list to check\n        item (str): string to check\n\n    Returns:\n        bool: True if all items of the list are equal to the string, False otherwise\n    \"\"\"\n    return all(item == i for i in lst)\n\n\nif __name__ == \"__main__\":\n    print(all_items_equal([\"foo\", \"foo\", \"foo\"], \"foo\"))\n    print(all_items_equal([\"foo\", \"foo\", \"bar\"], \"foo\"))"
    },
    {
      "rank": 88,
      "score": 2.7659154284541714,
      "candidate": "def check_equal(items, value):\n    return all(i == value for i in items)\n\n\nif __name__ == '__main__':\n    print(check_equal([], 'x'))\n    print(check_equal(['x'], 'x'))\n    print(check_equal(['x', 'x'], 'x'))\n    print(check_equal(['x', 'y'], 'x'))"
    },
    {
      "rank": 89,
      "score": 2.758216362426382,
      "candidate": "def check_all_equal(lst, string):\n    \"\"\"\n    >>> check_all_equal(['a', 'a', 'a'], 'a')\n    True\n\n    >>> check_all_equal(['a', 'b', 'a'], 'a')\n    False\n\n    >>> check_all_equal(['a', 'a', 'a'], 'b')\n    False\n\n    >>> check_all_equal(['a', 'a', 'a'], 'ab')\n    False\n    \"\"\"\n    return all(item == string for item in lst)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 90,
      "score": 2.6904669903902754,
      "candidate": "def equal_to_string(lst, s):\n    # Your code goes here\n    return len(set(lst)) == 1 and lst[0] == s\n\nprint(equal_to_string([\"a\", \"a\", \"a\", \"a\"], \"a\"))\nprint(equal_to_string([\"a\", \"a\", \"a\", \"b\"], \"a\"))\nprint(equal_to_string([\"a\", \"a\", \"b\", \"b\"], \"b\"))\nprint(equal_to_string([\"a\", \"a\", \"a\", \"a\", \"a\"], \"a\"))\nprint(equal_to_string([\"a\", \"a\", \"a\", \"b\"], \"b\"))\nprint(equal_to_string([\"a\", \"a\", \"b\", \"b\"], \"b\"))\nprint(equal_to_string([\"a\", \"a\", \"b\", \"b\", \"b\"], \"b\"))\nprint(equal_to_string([\"a\", \"a\", \"a\", \"a\", \"a\", \"a\"], \"a\"))"
    },
    {
      "rank": 91,
      "score": 2.6391364650142655,
      "candidate": "from typing import List\n\n\ndef check_list_of_string(lst: List[str], string: str) -> bool:\n    \"\"\"Check if all items of a list are equal to a given string.\n\n    Args:\n        lst (List[str]): list of strings.\n        string (str): string to check.\n\n    Returns:\n        bool: True if all items are equal to the string, False otherwise.\n    \"\"\"\n    return lst.count(string) == len(lst)\n\n\nif __name__ == \"__main__\":\n    print(check_list_of_string([\"a\", \"b\"], \"a\"))\n    print(check_list_of_string([\"a\", \"b\"], \"b\"))\n    print(check_list_of_string([\"a\", \"a\"], \"a\"))"
    },
    {
      "rank": 92,
      "score": 2.6095496475258795,
      "candidate": "def equal_list(list, str):\n    for item in list:\n        if item != str:\n            return False\n    return True\n\n\ndef test_equal_list():\n    assert equal_list([\"a\", \"b\", \"c\"], \"a\") == False\n    assert equal_list([\"a\", \"a\", \"a\"], \"a\") == True\n    assert equal_list([\"a\", \"a\", \"a\"], \"b\") == False\n    assert equal_list([\"a\", \"b\", \"c\"], \"c\") == False\n    assert equal_list([\"a\", \"b\", \"c\"], \"d\") == False\n    assert equal_list([], \"a\") == True"
    },
    {
      "rank": 93,
      "score": 2.5644826182561977,
      "candidate": "from copy import deepcopy\n\n\ndef check_list(string, lst):\n    \"\"\"\n    >>> check_list(\"a\", [\"a\", \"a\", \"a\"])\n    True\n    >>> check_list(\"a\", [\"a\", \"a\", \"b\"])\n    False\n    >>> check_list(\"a\", [\"a\", \"a\"])\n    True\n    \"\"\"\n    new_lst = deepcopy(lst)\n    new_lst.append(string)\n    return len(set(new_lst)) == 1\n\n\ndef check_list_v2(string, lst):\n    \"\"\"\n    >>> check_list_v2(\"a\", [\"a\", \"a\", \"a\"])\n    True\n    >>> check_list_v2(\"a\", [\"a\", \"a\", \"b\"])\n    False\n    >>> check_list_v2(\"a\", [\"a\", \"a\"])\n    True\n    \"\"\"\n    new_lst = deepcopy(lst)\n    new_lst.append(string)\n    new_lst.sort()\n\n    for i in range(1, len(new_lst)):\n        if new_lst[i - 1] != new_lst[i]:\n            return False\n\n    return True\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 94,
      "score": 2.5242759611774077,
      "candidate": "from typing import List\n\n\ndef check_all_items_equal(my_list: List[str], target_string: str) -> bool:\n    \"\"\"\n    O(n) & O(1)\n    \"\"\"\n    return my_list.count(target_string) == len(my_list)\n\n\nif __name__ == \"__main__\":\n    assert check_all_items_equal([\"a\", \"b\", \"c\", \"a\"], \"a\") == True\n    assert check_all_items_equal([\"a\", \"b\", \"c\", \"d\"], \"a\") == False\n    assert check_all_items_equal([\"a\", \"a\", \"a\", \"a\"], \"a\") == True"
    },
    {
      "rank": 95,
      "score": 2.4856311516453116,
      "candidate": "def all_equal(s, items):\n    \"\"\"\n    :param s: str\n    :param items: list\n    :return: bool\n    \"\"\"\n    return all(map(lambda item: item == s, items))\n\n\ndef test_all_equal():\n    assert all_equal('a', ['a', 'a', 'a'])\n    assert not all_equal('a', ['a', 'b', 'a'])\n    assert all_equal('a', ['a', 'a', 'a', 'a'])\n    assert not all_equal('a', ['a', 'a', 'b', 'b'])\n\n\nif __name__ == '__main__':\n    test_all_equal()"
    },
    {
      "rank": 96,
      "score": 2.4288799989736747,
      "candidate": "from typing import List\n\n\ndef all_equal(input_list: List[str], val: str) -> bool:\n    \"\"\"Checks if all items in a list are equal to a given string.\n\n    Args:\n        input_list (List[str]): a list of strings\n        val (str): a string to compare\n\n    Returns:\n        bool: True if all items are equal to val, else False\n    \"\"\"\n    return all(item == val for item in input_list)\n\n\nif __name__ == \"__main__\":\n    assert all_equal([\"a\", \"a\", \"a\"], \"a\") is True\n    assert all_equal([\"a\", \"a\", \"b\"], \"a\") is False"
    },
    {
      "rank": 97,
      "score": 2.3927094084258247,
      "candidate": "def check_list_for_equal_str(lst: list, str: str) -> bool:\n    \"\"\"Checks if all items of a list are equal to a given string.\n\n    Args:\n        lst (list): list to check.\n        str (str): string to check against.\n\n    Returns:\n        bool: True if all items are equal to str, otherwise False.\n    \"\"\"\n    for i in lst:\n        if i != str:\n            return False\n    return True"
    },
    {
      "rank": 98,
      "score": 2.364235544142006,
      "candidate": "from typing import List\n\n\ndef is_list_of_string(input_list: List[str], string: str) -> bool:\n    \"\"\"Checks if all items of a list are equal to a given string.\n\n    Args:\n        input_list (List[str]): input list\n        string (str): string to compare\n\n    Examples:\n        >>> assert is_list_of_string(['test', 'test'], 'test')\n    \"\"\"\n    return all(item == string for item in input_list)\n\n\nif __name__ == \"__main__\":\n    print(is_list_of_string([\"test\", \"test\"], \"test\"))"
    },
    {
      "rank": 99,
      "score": 2.258285332019396,
      "candidate": "from typing import List, Optional\n\n\ndef list_equal(lst: List[str], string: str) -> bool:\n    \"\"\"Return True if all items of a list are equal to a given string.\n    >>> list_equal([\"a\", \"a\", \"a\"], \"a\")\n    True\n    >>> list_equal([\"b\", \"b\", \"b\"], \"a\")\n    False\n    >>> list_equal([\"a\", \"b\", \"c\"], \"a\")\n    False\n    >>> list_equal([], \"a\")\n    True\n    \"\"\"\n    return all(i == string for i in lst)\n\n\ndef list_equal_2(lst: List[str], string: str) -> bool:\n    \"\"\"Return True if all items of a list are equal to a given string.\n    >>> list_equal_2([\"a\", \"a\", \"a\"], \"a\")\n    True\n    >>> list_equal_2([\"b\", \"b\", \"b\"], \"a\")\n    False\n    >>> list_equal_2([\"a\", \"b\", \"c\"], \"a\")\n    False\n    >>> list_equal_2([], \"a\")\n    True\n    \"\"\"\n    return len(lst) > 0 and all(i == string for i in lst)\n\n\ndef list_equal_3(lst: List[str], string: str) -> bool:\n    \"\"\"Return True if all items of a list are equal to a given string.\n    >>> list_equal_3([\"a\", \"a\", \"a\"], \"a\")\n    True\n    >>> list_equal_3([\"b\", \"b\", \"b\"], \"a\")\n    False\n    >>> list_equal_3([\"a\", \"b\", \"c\"], \"a\")\n    False\n    >>> list_equal_3([], \"a\")\n    True\n    \"\"\"\n    return len(lst) == 0 or all(i == string for i in lst)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 100,
      "score": 2.177289494797147,
      "candidate": "from typing import List\n\n\ndef all_equal(lst: List, value: str) -> bool:\n    \"\"\"Check if all items of list are equal to a given string.\n\n    Args:\n        lst: list of strings\n        value: string to compare\n\n    Returns:\n        True if all items are equal to the value, False otherwise.\n\n    Examples:\n        >>> assert all_equal([\"a\", \"a\", \"a\", \"a\"], \"a\")\n        >>> assert not all_equal([\"a\", \"b\", \"a\", \"a\"], \"a\")\n    \"\"\"\n    return all(item == value for item in lst)\n\n\nif __name__ == \"__main__\":\n    print(all_equal([\"a\", \"a\", \"a\", \"a\"], \"a\"))\n    print(all_equal([\"a\", \"b\", \"a\", \"a\"], \"a\"))"
    }
  ]
}