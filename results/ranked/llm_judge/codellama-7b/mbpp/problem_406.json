{
  "timestamp": "2025-09-15T01:23:07.702945",
  "method": "improved_llm_judge",
  "judge_model": "codellama/CodeLlama-7b-Python-hf",
  "target_model": "codellama-7b",
  "dataset": "mbpp",
  "problem_number": 406,
  "total_candidates": 100,
  "results": [
    {
      "rank": 1,
      "score": 10.0,
      "candidate": "from typing import List\n\n\ndef common_element(data: List[tuple]) -> tuple:\n    \"\"\"\n    Finds the common first element in the list of tuple.\n    >>> common_element([(1, 2, 3), (1, 4, 5), (1, 6, 7), (1, 8, 9)])\n    (1,)\n    >>> common_element([(1, 2, 3), (2, 4, 5), (3, 6, 7), (4, 8, 9)])\n    ()\n    \"\"\"\n    for i in range(len(data[0])):\n        temp = []\n        for j in range(len(data)):\n            temp.append(data[j][i])\n        if len(set(temp)) == 1:\n            return (data[0][i],)\n    return ()\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 2,
      "score": 10.0,
      "candidate": "def common_first_element(list_of_tuples):\n    \"\"\"\n    >>> common_first_element([(1, 2), (2, 3), (3, 4)])\n    1\n    >>> common_first_element([(2, 2), (2, 3), (2, 4)])\n    2\n    \"\"\"\n    first_element = list_of_tuples[0][0]\n    for tup in list_of_tuples:\n        if tup[0] != first_element:\n            return False\n    return first_element\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 3,
      "score": 10.0,
      "candidate": "from typing import List\n\n\ndef common_first_element(data: List[tuple]) -> tuple:\n    \"\"\"Returns common first element in given list of tuple.\n\n    Args:\n        data (List[tuple]): given list of tuple\n\n    Examples:\n        >>> assert common_first_element([(1, 2), (1, 3), (1, 4)]) == (1,)\n    \"\"\"\n    return tuple(set(data[0]).intersection(*data))\n\n\nif __name__ == \"__main__\":\n    print(common_first_element([(1, 2), (1, 3), (1, 4)]))"
    },
    {
      "rank": 4,
      "score": 10.0,
      "candidate": "from typing import List, Tuple\n\n\ndef common_first_element(lst: List[Tuple[int, int]]) -> int:\n    \"\"\"Returns common first element in given list of tuple.\n\n    Args:\n        lst (List[Tuple[int, int]]): list of tuple\n\n    Examples:\n        >>> assert common_first_element([(1, 2), (1, 3), (1, 4)]) == 1\n    \"\"\"\n    return next(\n        key\n        for key, _ in (\n            (\n                lst[0][0],\n                lst[0][1],\n            )\n            for lst in zip(*lst)\n        )\n        if all(lst[0][0] == key for lst in zip(*lst))\n    )\n\n\nif __name__ == \"__main__\":\n    print(common_first_element([(1, 2), (1, 3), (1, 4)]))"
    },
    {
      "rank": 5,
      "score": 10.0,
      "candidate": "from functools import reduce\n\n\ndef find_common_first_element(tuples):\n    return reduce(lambda x, y: x[0] if x[0] == y[0] else None, tuples)\n\n\ndef test_find_common_first_element():\n    \"\"\"\n    >>> test_find_common_first_element()\n    \"\"\"\n    assert find_common_first_element([(\"a\", 1), (\"b\", 2), (\"a\", 3)]) == \"a\"\n    assert find_common_first_element([(\"a\", 1), (\"b\", 2), (\"c\", 3)]) is None\n    assert find_common_first_element([(\"a\", 1), (\"a\", 2), (\"a\", 3)]) == \"a\"\n\n\nif __name__ == '__main__':\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 6,
      "score": 10.0,
      "candidate": "from functools import reduce\n\n\ndef common_first_element(lst):\n    return reduce(lambda x, y: x & y, [set(tup) for tup in lst])\n\n\nif __name__ == \"__main__\":\n    print(common_first_element([(\"A\", \"B\", \"C\"), (\"B\", \"C\", \"D\"), (\"C\", \"D\", \"E\")]))"
    },
    {
      "rank": 7,
      "score": 10.0,
      "candidate": "from typing import List\n\n\ndef common_first(data: List[tuple]) -> tuple:\n    \"\"\"Return common first element from list of tuples.\n\n    Args:\n        data (List[tuple]): list of tuples\n\n    Examples:\n        >>> common_first([(\"a\", 1), (\"b\", 2), (\"a\", 3)])\n        ('a', 1)\n    \"\"\"\n    return tuple(set(data[0]).intersection(*data[1:]))\n\n\nif __name__ == \"__main__\":\n    print(common_first([(\"a\", 1), (\"b\", 2), (\"a\", 3)]))"
    },
    {
      "rank": 8,
      "score": 10.0,
      "candidate": "from timeit import default_timer as timer\n\n\ndef first_element(list_of_tuple):\n    \"\"\"\n    Return first element of each tuple in list.\n    \"\"\"\n    result = set()\n    for tup in list_of_tuple:\n        result.add(tup[0])\n    return result\n\n\nif __name__ == '__main__':\n    start = timer()\n    list_of_tuple = [(1, 2), (3, 4), (5, 6), (7, 8), (1, 9)]\n    print(first_element(list_of_tuple))\n    print(timer() - start)"
    },
    {
      "rank": 9,
      "score": 10.0,
      "candidate": "from typing import List\n\n\ndef common_first_element(data: List[tuple]) -> tuple:\n    \"\"\"\n    :param data: list of tuples\n    :return: tuple with common first element\n    >>> common_first_element([(1, 2, 3), (1, 2, 4), (1, 2, 5)])\n    (1, 2)\n    >>> common_first_element([(1, 2, 3), (2, 3, 4), (3, 4, 5)])\n    ()\n    >>> common_first_element([(1, 2, 3), (1, 3, 4), (1, 4, 5)])\n    (1,)\n    \"\"\"\n    return next(\n        (\n            (x,)\n            for x in data[0]\n            if all(x in item for item in data) and len(data) == len([item for item in data if x in item])\n        ),\n        (),\n    )\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 10,
      "score": 10.0,
      "candidate": "from timeit import default_timer as timer\n\n\ndef common_first_element(tuples):\n    \"\"\"\n    >>> common_first_element([(1, 2), (3, 4), (1, 5)])\n    1\n    \"\"\"\n    if not tuples:\n        return None\n    first = tuples[0]\n    for i in range(1, len(tuples)):\n        if tuples[i][0] != first[0]:\n            return None\n    return first[0]\n\n\nif __name__ == \"__main__\":\n    input_list = [(1, 2), (3, 4), (1, 5)]\n    start = timer()\n    print(common_first_element(input_list))\n    print(f\"Execution time: {timer() - start}\")"
    },
    {
      "rank": 11,
      "score": 10.0,
      "candidate": "from functools import reduce\nfrom typing import List, Tuple\n\n\ndef common_first_element(data: List[Tuple[int, int]]) -> int:\n    \"\"\"Returns common first element in given list of tuple.\n\n    Args:\n        data (List[Tuple[int, int]]): list of tuple\n\n    Examples:\n        >>> common_first_element([(1, 2), (1, 3), (1, 4)])\n        1\n    \"\"\"\n    return reduce(lambda acc, elem: acc if acc != elem[0] else elem[0], data)\n\n\nif __name__ == \"__main__\":\n    print(common_first_element([(1, 2), (1, 3), (1, 4)]))"
    },
    {
      "rank": 12,
      "score": 10.0,
      "candidate": "from typing import List\n\n\ndef common_first_element(data: List[tuple]) -> int:\n    \"\"\"\n    Return common first element in list of tuple\n    :param data: list of tuple\n    :return: common first element\n    >>> common_first_element([(1, 2), (2, 3), (3, 4), (4, 5)])\n    1\n    \"\"\"\n    return data[0][0]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 13,
      "score": 9.0,
      "candidate": "def common_first(list_of_tuples):\n    return list(set([tup[0] for tup in list_of_tuples]))\n\n\nif __name__ == \"__main__\":\n    print(common_first([(1, 2), (1, 3), (1, 4)]))"
    },
    {
      "rank": 14,
      "score": 9.0,
      "candidate": "from timeit import timeit\n\n\ndef first_common(tup: list):\n    \"\"\"Find the first common element in the list of tuples.\n\n    Args:\n        tup (list): list of tuples.\n\n    Returns:\n        str: first common element.\n    \"\"\"\n    result = ''\n    for i in range(len(tup[0])):\n        for j in range(len(tup)):\n            if tup[j][i] != tup[0][i]:\n                break\n        else:\n            result += tup[0][i]\n    return result\n\n\nif __name__ == \"__main__\":\n    print(timeit(\"first_common(tuples)\",\n                 \"from __main__ import tuples, first_common\",\n                 number=10000))"
    },
    {
      "rank": 15,
      "score": 9.0,
      "candidate": "from typing import List\n\n\ndef common_first_element(data: List[tuple]) -> list:\n    \"\"\"Returns a list of common first element in tuple.\n\n    Args:\n        data (List[tuple]): list of tuple\n\n    Examples:\n        >>> common_first_element([(1, 2), (1, 3), (2, 3)])\n        [1, 2]\n        >>> common_first_element([(1, 2), (2, 3), (3, 4)])\n        []\n    \"\"\"\n    return [item[0] for item in data if item[0] == data[0][0]]\n\n\nif __name__ == \"__main__\":\n    print(common_first_element([(1, 2), (1, 3), (2, 3)]))\n    print(common_first_element([(1, 2), (2, 3), (3, 4)]))"
    },
    {
      "rank": 16,
      "score": 8.0,
      "candidate": "from typing import List\n\n\ndef common_first_element(data: List[tuple]) -> tuple:\n    \"\"\"\n    Return the common first element in a list of tuple.\n    Time Complexity: O(n)\n    Space Complexity: O(1)\n    \"\"\"\n    if not data:\n        return ()\n\n    for i in range(len(data[0])):\n        if all(data[0][i] == x[i] for x in data):\n            return data[0][i]\n\n    return ()\n\n\nif __name__ == \"__main__\":\n    assert common_first_element([(1, 2), (1, 3), (1, 4), (1, 2, 3, 4)]) == (1,)\n    assert common_first_element([(1, 2), (2, 3), (3, 4), (4, 5)]) == ()"
    },
    {
      "rank": 17,
      "score": 8.0,
      "candidate": "def common_first(array):\n    return [x[0] for x in array if x[0] == array[0][0]][0]\n\n\nif __name__ == \"__main__\":\n    arr1 = [(\"A\", 1, 2), (\"B\", 2, 3)]\n    arr2 = [(\"A\", 3, 4), (\"B\", 2, 3)]\n    arr3 = [(\"A\", 1, 2), (\"B\", 2, 3), (\"C\", 2, 3)]\n    arr4 = [(\"A\", 1, 2), (\"B\", 2, 3), (\"C\", 2, 3), (\"D\", 2, 3)]\n    print(common_first(arr1))\n    print(common_first(arr2))\n    print(common_first(arr3))\n    print(common_first(arr4))"
    },
    {
      "rank": 18,
      "score": 8.0,
      "candidate": "from timeit import default_timer as timer\n\n\ndef common_first(tuples):\n    if not tuples:\n        return None\n    for i in range(len(tuples)):\n        if i == 0:\n            res = tuples[i][0]\n        else:\n            if tuples[i][0] != res:\n                return None\n    return res\n\n\nif __name__ == \"__main__\":\n    start = timer()\n    sample_list = [(\"A\", 1, 2, 3), (\"B\", 1, 2, 3), (\"C\", 1, 2, 3), (\"D\", 1, 2, 3), (\"E\", 1, 2, 3)]\n    print(\"Common first element is:\", common_first(sample_list))\n    print(f\"Time taken: {timer() - start}\")"
    },
    {
      "rank": 19,
      "score": 8.0,
      "candidate": "from functools import reduce\n\n\ndef common_first(lst):\n    return reduce(lambda x, y: x if x[0] == y[0] else None, lst)\n\n\nif __name__ == \"__main__\":\n    print(common_first([(\"a\", 1), (\"b\", 2), (\"a\", 3)]))\n    print(common_first([(\"a\", 1), (\"b\", 2), (\"a\", 1)]))\n    print(common_first([(\"a\", 1), (\"b\", 2), (\"c\", 3)]))"
    },
    {
      "rank": 20,
      "score": 8.0,
      "candidate": "from typing import List, Tuple\n\n\ndef common_first_element(data: List[Tuple[int, int]]) -> int:\n    \"\"\"\n    >>> common_first_element([(1, 2), (2, 3), (3, 4)])\n    1\n    \"\"\"\n    return data[0][0]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 21,
      "score": 8.0,
      "candidate": "def common_first_element(tup):\n    common_elem = tup[0][0]\n    for i in range(len(tup)):\n        if tup[i][0] != common_elem:\n            return None\n    return common_elem\n\n\nif __name__ == \"__main__\":\n    print(common_first_element([(\"a\", 1, 2), (\"a\", 3, 4)]))\n    print(common_first_element([(\"a\", 1, 2), (\"b\", 3, 4)]))\n    print(common_first_element([(\"a\", 1, 2), (\"a\", 3, 4), (\"b\", 3, 4)]))"
    },
    {
      "rank": 22,
      "score": 8.0,
      "candidate": "from functools import reduce\n\n\ndef common_first_element(lst_of_tuples):\n    return reduce(lambda x, y: x if x[0] == y[0] else None, lst_of_tuples)\n\n\nif __name__ == \"__main__\":\n    assert common_first_element([(\"a\", 1), (\"a\", 2), (\"b\", 1)]) == (\"a\", 1)\n    assert common_first_element([(\"a\", 1), (\"b\", 2), (\"c\", 1)]) is None"
    },
    {
      "rank": 23,
      "score": 8.0,
      "candidate": "from functools import reduce\nfrom operator import and_\n\n\ndef common_first_element(data):\n    return reduce(and_, [item[0] for item in data])\n\n\nif __name__ == \"__main__\":\n    print(common_first_element([(1, 2, 3), (1, 2, 4), (1, 2, 5)]))\n    print(common_first_element([(1, 2, 3), (1, 2, 4), (1, 3, 5)]))"
    },
    {
      "rank": 24,
      "score": 8.0,
      "candidate": "from timeit import default_timer as timer\n\n\ndef common_first_element(lists):\n    result = []\n    for i in range(len(lists)):\n        if i == 0:\n            result.append(lists[i][0])\n        else:\n            if result[0] == lists[i][0]:\n                result.append(lists[i][0])\n    return result\n\n\nif __name__ == \"__main__\":\n    start = timer()\n    print(common_first_element([(\"a\", 1), (\"a\", 2), (\"b\", 3), (\"a\", 4)]))\n    print(common_first_element([(\"a\", 1), (\"a\", 2), (\"a\", 3), (\"a\", 4)]))\n    end = timer()\n    print(end - start)  # 0.0"
    },
    {
      "rank": 25,
      "score": 8.0,
      "candidate": "from functools import reduce\nfrom itertools import groupby\nfrom operator import itemgetter\n\n\ndef common_first_element(t):\n    \"\"\"\n    Find common first element in given list of tuple.\n\n    :param t: list of tuple\n    :return: common first element\n    \"\"\"\n    return reduce(lambda x, y: x & y, [set(i[0]) for i in t])\n\n\ndef common_first_element_groupby(t):\n    \"\"\"\n    Find common first element in given list of tuple.\n\n    :param t: list of tuple\n    :return: common first element\n    \"\"\"\n    return set(k for k, _ in groupby(sorted(t, key=itemgetter(0)), itemgetter(0)))"
    },
    {
      "rank": 26,
      "score": 8.0,
      "candidate": "from timeit import default_timer as timer\n\n\ndef common_first_element(tuples):\n    \"\"\"Find common first element in given list of tuple.\n\n    Args:\n        tuples: list of tuple\n\n    Returns:\n        list of common first element\n    \"\"\"\n    common = []\n    for i in range(len(tuples)):\n        if i == 0:\n            common.append(tuples[i][0])\n        else:\n            if tuples[i][0] in common:\n                continue\n            else:\n                common.append(tuples[i][0])\n    return common\n\n\nif __name__ == \"__main__\":\n    start = timer()\n    data = [\n        (\"a\", 1),\n        (\"b\", 2),\n        (\"c\", 3),\n        (\"a\", 2),\n        (\"b\", 1),\n        (\"c\", 4),\n        (\"a\", 3),\n        (\"b\", 4),\n        (\"c\", 2),\n        (\"a\", 4),\n        (\"b\", 3),\n        (\"c\", 1),\n    ]\n    print(\"Common first element in data: {}\".format(common_first_element(data)))\n    print(\"Execution time: {} seconds\".format(timer() - start))"
    },
    {
      "rank": 27,
      "score": 8.0,
      "candidate": "from timeit import default_timer as timer\n\n\ndef common_first(arr: list) -> int:\n    \"\"\"\n    Finds common first element in list of tuple.\n    >>> common_first([(1, 2), (1, 3), (1, 4)])\n    1\n    \"\"\"\n    if not arr:\n        raise ValueError(\"Empty array\")\n\n    return arr[0][0]\n\n\ndef common_first_optimized(arr: list) -> int:\n    \"\"\"\n    Finds common first element in list of tuple.\n    >>> common_first_optimized([(1, 2), (1, 3), (1, 4)])\n    1\n    \"\"\"\n    if not arr:\n        raise ValueError(\"Empty array\")\n\n    return arr[0][0]\n\n\ndef common_first_optimized_2(arr: list) -> int:\n    \"\"\"\n    Finds common first element in list of tuple.\n    >>> common_first_optimized_2([(1, 2), (1, 3), (1, 4)])\n    1\n    \"\"\"\n    if not arr:\n        raise ValueError(\"Empty array\")\n\n    first_element = arr[0][0]\n    for i in range(1, len(arr)):\n        if arr[i][0] != first_element:\n            return -1\n    return first_element\n\n\nif __name__ == \"__main__\":\n    input_list = [(i, i + 1) for i in range(100000)]\n    for _ in range(1000):\n        common_first(input_list)\n        common_first_optimized(input_list)\n        common_first_optimized_2(input_list)\n\n    start = timer()\n    common_first(input_list)\n    end = timer()\n    print(f\"Common first time taken by common_first is {end - start}\")\n\n    start = timer()\n    common_first_optimized(input_list)\n    end = timer()\n    print(f\"Common first time taken by common_first_optimized is {end - start}\")\n\n    start"
    },
    {
      "rank": 28,
      "score": 8.0,
      "candidate": "from typing import List\n\n\ndef common_first_element(arr: List[tuple]) -> tuple:\n    \"\"\"\n    First find the common elements in list of tuples\n    and then return the common elements with least\n    frequency.\n    \"\"\"\n    common = set()\n\n    for elem in arr:\n        common.add(elem[0])\n\n    for elem in common:\n        count = 0\n\n        for tup in arr:\n            if tup[0] == elem:\n                count += 1\n\n        if count == len(arr):\n            return elem\n\n\nif __name__ == \"__main__\":\n    assert common_first_element([(\"a\", \"b\", \"c\"), (\"a\", \"b\", \"c\"), (\"a\", \"b\", \"c\"), (\"a\", \"b\", \"c\")]) == \"a\"\n    assert common_first_element([(\"a\", \"b\", \"c\"), (\"a\", \"b\", \"c\"), (\"a\", \"b\", \"c\"), (\"a\", \"b\", \"c\"), (\"a\", \"b\", \"c\")]) == \"a\"\n    assert common_first_element([(\"a\", \"b\", \"c\"), (\"a\", \"b\", \"c\"), (\"a\", \"b\", \"c\"), (\"a\", \"b\", \"c\"), (\"a\", \"b\", \"c\"), (\"a\", \"b\", \"c\")]) == \"a\""
    },
    {
      "rank": 29,
      "score": 8.0,
      "candidate": "from typing import List, Tuple\n\n\ndef common_first_element(lst: List[Tuple]) -> List[Tuple]:\n    \"\"\"Returns list of tuples with common first element.\n\n    Args:\n        lst (List[Tuple]): list of tuples\n\n    Examples:\n        >>> common_first_element([(1, 2), (1, 3), (1, 4)])\n        [(1, 2), (1, 3), (1, 4)]\n        >>> common_first_element([(1, 2), (1, 3), (2, 4)])\n        [(1, 2), (1, 3), (2, 4)]\n        >>> common_first_element([(1, 2), (2, 3), (3, 4)])\n        []\n    \"\"\"\n    return [item for item in lst if lst.count(item) > 1]\n\n\nif __name__ == \"__main__\":\n    print(common_first_element([(1, 2), (1, 3), (1, 4)]))\n    print(common_first_element([(1, 2), (1, 3), (2, 4)]))\n    print(common_first_element([(1, 2), (2, 3), (3, 4)]))"
    },
    {
      "rank": 30,
      "score": 8.0,
      "candidate": "from typing import List\n\n\ndef first_element_in_tuple(data: List[tuple]) -> tuple:\n    \"\"\"\n    Returns a common first element in a list of tuple.\n    >>> first_element_in_tuple([('a', 1), ('a', 2), ('b', 2)])\n    ('a', 1)\n    \"\"\"\n    return next(iter(data))\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 31,
      "score": 8.0,
      "candidate": "def common_first_element(tuples):\n    first_elements = set([tup[0] for tup in tuples])\n    return first_elements.pop()\n\n\nif __name__ == \"__main__\":\n    print(common_first_element([(1, 2), (1, 3), (1, 4)]))\n    print(common_first_element([(1, 2), (3, 4), (5, 6)]))"
    },
    {
      "rank": 32,
      "score": 8.0,
      "candidate": "from functools import reduce\n\n\ndef first_element_of_tuple(data):\n    \"\"\"\n    >>> first_element_of_tuple([(1, 2), (2, 3), (3, 4)])\n    1\n    \"\"\"\n    return reduce(lambda x, y: x if x == y else -1, [i[0] for i in data])\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 33,
      "score": 8.0,
      "candidate": "from timeit import timeit\n\n\ndef common_first_element(tuples):\n    return [x[0] for x in tuples if tuples.count(x) > 1]\n\n\nif __name__ == \"__main__\":\n    data = [\n        (2, 5),\n        (2, 1),\n        (1, 2),\n        (1, 2),\n        (1, 3),\n    ]\n    print(common_first_element(data))\n\n    setup_code = \"from __main__ import common_first_element\"\n    print(timeit(\"common_first_element(data)\", setup=setup_code))"
    },
    {
      "rank": 34,
      "score": 8.0,
      "candidate": "from functools import reduce\nfrom operator import itemgetter\n\n\ndef common_first_element(data):\n    \"\"\"Returns the common first element from the list of tuples.\"\"\"\n    return reduce(itemgetter(0), data)\n\n\nif __name__ == \"__main__\":\n    print(common_first_element([(\"a\", 1), (\"a\", 2), (\"a\", 3)]))\n    print(common_first_element([(\"a\", 1), (\"b\", 1), (\"c\", 1)]))"
    },
    {
      "rank": 35,
      "score": 8.0,
      "candidate": "def common_first(tup):\n    \"\"\"\n    >>> common_first([('red', 5), ('green', 3), ('blue', 4)])\n    ('red', 'green')\n    \"\"\"\n    return tuple(map(tup[0][0], (i[0] for i in tup)))\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 36,
      "score": 8.0,
      "candidate": "from typing import List\n\n\ndef first_element(data: List[tuple]) -> tuple:\n    \"\"\"\n    O(n) & O(1)\n    \"\"\"\n    first_element = data[0][0]\n    for i in range(len(data)):\n        if data[i][0] != first_element:\n            return ()\n    return data[0]\n\n\nif __name__ == \"__main__\":\n    assert first_element([(\"a\", 1), (\"a\", 2), (\"b\", 1)]) == (\"a\", 1)"
    },
    {
      "rank": 37,
      "score": 8.0,
      "candidate": "from typing import List\n\n\ndef find_common_first_element(data: List[tuple]) -> int:\n    \"\"\"\n    O(n) & O(1)\n    \"\"\"\n    if not data:\n        return 0\n\n    first_elements = set(data[0])\n\n    for i in range(1, len(data)):\n        first_elements &= set(data[i])\n\n    if first_elements:\n        return first_elements.pop()\n    return 0\n\n\nif __name__ == \"__main__\":\n    assert find_common_first_element([(1, 2, 3), (2, 3, 4), (4, 5, 6)]) == 2\n    assert find_common_first_element([(1, 2, 3), (2, 3, 4), (4, 5, 6), (6, 7, 8)]) == 0"
    },
    {
      "rank": 38,
      "score": 8.0,
      "candidate": "from itertools import groupby\n\n\ndef first_element(input_list):\n    for first_elem, _ in groupby([i[0] for i in input_list]):\n        yield first_elem\n\n\ndef main():\n    print([i[0] for i in [(\"red\", \"apple\"), (\"red\", \"berry\"), (\"red\", \"cherry\"), (\"blue\", \"blueberry\"), (\"yellow\", \"banana\"), (\"green\", \"green apple\")]]),\n    print(list(first_element([(\"red\", \"apple\"), (\"red\", \"berry\"), (\"red\", \"cherry\"), (\"blue\", \"blueberry\"), (\"yellow\", \"banana\"), (\"green\", \"green apple\")])),)\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 39,
      "score": 8.0,
      "candidate": "from timeit import default_timer as timer\n\n\ndef common_first(tuples):\n    if not tuples:\n        return None\n\n    first = tuples[0]\n    for t in tuples[1:]:\n        if t[0] != first[0]:\n            return None\n    return first\n\n\nif __name__ == \"__main__\":\n    start = timer()\n    print(\"Common first element in given list of tuple is: \", common_first([(1, 2), (1, 4), (1, 3)]))\n    print(\"Time taken in ms: \", (timer() - start) * 1000)"
    },
    {
      "rank": 40,
      "score": 8.0,
      "candidate": "from typing import List\n\n\ndef common_first_element(lst: List[tuple]) -> tuple:\n    \"\"\"\n    Find common first element in given list of tuple.\n    :param lst: list of tuple\n    :return: tuple\n    >>> common_first_element([(1, 2), (2, 3), (3, 4)])\n    (1, 2)\n    >>> common_first_element([(1, 2), (3, 4), (5, 6)])\n    \"\"\"\n    return next(iter(lst[0]))\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 41,
      "score": 8.0,
      "candidate": "from timeit import timeit\n\n\ndef first_common_element(list_of_tuples: list) -> int:\n    \"\"\"Find common first element in given list of tuples.\n\n    Args:\n        list_of_tuples (list): list of tuples\n\n    Returns:\n        int: common first element\n    \"\"\"\n    return list(set.intersection(*map(set, list_of_tuples)))[0]\n\n\nif __name__ == \"__main__\":\n    print(\n        timeit(\"first_common_element([(1, 2), (2, 3), (3, 4)])\", globals=globals())\n    )"
    },
    {
      "rank": 42,
      "score": 8.0,
      "candidate": "from typing import List\n\n\ndef common_first_element(tup: List[tuple]) -> tuple:\n    \"\"\"Returns common first element from given list of tuple.\n\n    Args:\n        tup (List[tuple]): list of tuple\n\n    Returns:\n        tuple: common first element from given list of tuple\n    \"\"\"\n    for i in range(len(tup[0])):\n        for j in range(1, len(tup)):\n            if tup[j][i] != tup[j - 1][i]:\n                return tup[j - 1][i]\n\n\nif __name__ == \"__main__\":\n    print(common_first_element([(\"1\", \"A\"), (\"1\", \"B\"), (\"1\", \"C\")]))"
    },
    {
      "rank": 43,
      "score": 8.0,
      "candidate": "def common_first_elem(tuples):\n    \"\"\"Return the first common element in the list of tuples.\"\"\"\n    common_elems = []\n    for tup in tuples:\n        if tup[0] not in common_elems:\n            common_elems.append(tup[0])\n    return common_elems[0]\n\n\nif __name__ == '__main__':\n    print(common_first_elem([(1, 2), (3, 4), (5, 6)]))"
    },
    {
      "rank": 44,
      "score": 8.0,
      "candidate": "from typing import List\n\n\ndef common_first_element(data: List[tuple]) -> tuple:\n    \"\"\"\n    Return first element in tuple.\n    >>> common_first_element([(1, 2), (1, 3), (1, 4)])\n    (1,)\n    \"\"\"\n    if not data:\n        return ()\n    first_element = data[0]\n    for i in range(1, len(data)):\n        if data[i][0] != first_element[0]:\n            return ()\n    return first_element\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 45,
      "score": 8.0,
      "candidate": "def first_element(data):\n    if not data:\n        return None\n\n    first_elements = set()\n    for tup in data:\n        first_elements.add(tup[0])\n\n    return first_elements\n\n\nif __name__ == \"__main__\":\n    data = [(\"a\", 1), (\"b\", 2), (\"a\", 3), (\"c\", 4)]\n    print(first_element(data))"
    },
    {
      "rank": 46,
      "score": 8.0,
      "candidate": "from typing import List\n\n\ndef common_first_element(data: List[tuple]) -> List[int]:\n    \"\"\"\n    Returns a list of first elements of given tuples.\n    :param data: List of tuples.\n    :return: List of first elements of given tuples.\n    >>> common_first_element([(1, 2), (2, 3), (3, 4), (1, 4)])\n    [1, 3]\n    >>> common_first_element([(1, 2), (2, 3), (3, 4), (1, 4), (1, 2)])\n    [1]\n    \"\"\"\n    return [item[0] for item in data if item[0] == data[0][0]]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 47,
      "score": 8.0,
      "candidate": "from typing import List\n\n\n# Time complexity: O(n)\n# Space complexity: O(1)\ndef common_first_element(elements: List[tuple]) -> tuple:\n    # Find the length of longest tuple.\n    length = max([len(e) for e in elements])\n\n    # Get the first element of each tuple.\n    first_elements = [e[0] for e in elements]\n\n    # Find the first element that appears in every tuple.\n    for i in range(length):\n        if all([e[i] == first_elements[0] for e in elements]):\n            return elements[0][i]\n\n    return None\n\n\nif __name__ == \"__main__\":\n    assert common_first_element([(\"A\", \"B\", \"C\"), (\"A\", \"B\", \"D\"), (\"A\", \"B\", \"E\")]) == \"A\"\n    assert common_first_element([(\"A\", \"B\", \"C\"), (\"A\", \"B\", \"D\"), (\"A\", \"B\", \"D\")]) == \"A\"\n    assert common_first_element([(\"A\", \"B\", \"C\"), (\"A\", \"B\", \"D\"), (\"A\", \"B\", \"C\")]) == \"A\"\n    assert common_first_element([(\"A\", \"B\", \"C\"), (\"A\", \"B\", \"D\"), (\"A\", \"B\", \"E\"), (\"A\", \"B\", \"F\")]) == \"A\"\n    assert common_first_element([(\"A\", \"B\", \"C\"), (\"A\", \"B\", \"D\"), (\"A\", \"B\", \"E\"), (\"A\", \"B\", \"E\")]) == \"A\""
    },
    {
      "rank": 48,
      "score": 8.0,
      "candidate": "from functools import reduce\n\n\ndef common_first(array):\n    return reduce(lambda x, y: x if x == y else None, [item[0] for item in array])\n\n\ndef common_first_optimized(array):\n    def _common_first(x, y):\n        if x == y:\n            return x\n        return None\n    return reduce(_common_first, [item[0] for item in array])\n\n\nif __name__ == \"__main__\":\n    print(common_first_optimized([('a', 1), ('a', 2), ('a', 3)]))\n    print(common_first_optimized([('a', 1), ('a', 2), ('b', 3)]))\n    print(common_first_optimized([('a', 1), ('a', 2), ('b', 3), ('a', 4)]))"
    },
    {
      "rank": 49,
      "score": 8.0,
      "candidate": "from timeit import timeit\n\n\ndef common_first_elem(tup: tuple) -> int:\n    \"\"\"Find the common first element in the given tuple.\"\"\"\n    return tup[0][0]\n\n\ndef common_first_elem_2(tup: tuple) -> int:\n    \"\"\"Find the common first element in the given tuple.\"\"\"\n    return tup[0][0]\n\n\nif __name__ == \"__main__\":\n    tup_1 = (\n        (\"apple\", \"orange\", \"mango\"),\n        (\"cat\", \"dog\", \"bird\"),\n        (\"frog\", \"duck\", \"lion\"),\n        (\"fox\", \"wolf\", \"tiger\"),\n    )\n    tup_2 = (\n        (\"apple\", \"orange\", \"mango\"),\n        (\"cat\", \"dog\", \"bird\"),\n        (\"frog\", \"duck\", \"lion\"),\n        (\"fox\", \"wolf\", \"tiger\"),\n        (\"dog\", \"cat\", \"bird\"),\n    )\n\n    print(common_first_elem(tup_1))\n    print(common_first_elem_2(tup_1))\n    print(common_first_elem(tup_2))\n    print(common_first_elem_2(tup_2))\n\n    print(timeit(lambda: common_first_elem(tup_1), number=10000))\n    print(timeit(lambda: common_first_elem_2(tup_1), number=10000))\n    print(timeit(lambda: common_first_elem(tup_2), number=10000))\n    print(timeit(lambda: common_first_elem_2(tup_2), number=10000))"
    },
    {
      "rank": 50,
      "score": 8.0,
      "candidate": "from timeit import default_timer as timer\n\n\ndef first_element(arr):\n    \"\"\"\n    :param: arr - list of tuples\n    return: list of first elements in tuples\n    \"\"\"\n    result = []\n\n    for tup in arr:\n        result.append(tup[0])\n\n    return result\n\n\nif __name__ == \"__main__\":\n    start = timer()\n    test = [(1, 2), (2, 3), (3, 4), (1, 2), (2, 3)]\n    print(first_element(test))\n    print(f\"{timer() - start:.8f}\")"
    },
    {
      "rank": 51,
      "score": 8.0,
      "candidate": "def first_element(tup):\n    common_first = None\n\n    for i in range(len(tup[0])):\n        for j in range(1, len(tup)):\n            if tup[0][i] != tup[j][i]:\n                break\n        else:\n            common_first = tup[0][i]\n            break\n    return common_first\n\n\nif __name__ == \"__main__\":\n    print(first_element([(1, 2, 3), (1, 2, 4), (1, 2, 3)]))"
    },
    {
      "rank": 52,
      "score": 8.0,
      "candidate": "def common_first_element(input_list):\n    \"\"\"\n    :param input_list: list of tuple\n    :return: str\n    \"\"\"\n    first_element = input_list[0][0]\n    for i in range(1, len(input_list)):\n        if input_list[i][0] != first_element:\n            return None\n    return first_element\n\n\nprint(common_first_element([('A', 1), ('A', 2), ('A', 3)]))\nprint(common_first_element([('A', 1), ('B', 2), ('C', 3)]))"
    },
    {
      "rank": 53,
      "score": 8.0,
      "candidate": "from functools import reduce\nfrom operator import itemgetter\nfrom typing import List\n\n\ndef find_common_first(data: List[tuple]) -> tuple:\n    \"\"\"Finds the first common element from a list of tuples.\n\n    Args:\n        data (List[tuple]): list of tuples\n\n    Returns:\n        tuple: first common tuple\n    \"\"\"\n    return reduce(lambda x, y: x if x[0] == y[0] else None, data)\n\n\ndef main():\n    data = [(\"foo\", 1), (\"bar\", 2), (\"foo\", 3)]\n    result = find_common_first(data)\n    print(result)\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 54,
      "score": 8.0,
      "candidate": "def common_first_element(lst):\n    \"\"\"\n    >>> common_first_element([(1, 2), (2, 3), (3, 4)])\n    1\n    \"\"\"\n    return lst[0][0]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 55,
      "score": 8.0,
      "candidate": "from typing import List\n\n\ndef first_element(data: List[tuple]) -> List[tuple]:\n    \"\"\"Returns common first element from given list of tuple.\n\n    Args:\n        data (List[tuple]): list of tuple to search common first element\n\n    Examples:\n        >>> assert first_element([(1, 'a'), (1, 'b'), (2, 'c'), (2, 'd'), (3, 'e')]) == [(1, 'a')]\n        >>> assert first_element([(1, 'a'), (1, 'b'), (2, 'c'), (2, 'd'), (2, 'e')]) == [(2, 'c')]\n    \"\"\"\n    result = []\n    for i in range(len(data)):\n        if i == 0:\n            result.append(data[i])\n            continue\n        if data[i][0] == data[i - 1][0]:\n            continue\n        result.append(data[i])\n    return result\n\n\nif __name__ == \"__main__\":\n    print(first_element([(1, 'a'), (1, 'b'), (2, 'c'), (2, 'd'), (3, 'e')]))\n    print(first_element([(1, 'a'), (1, 'b'), (2, 'c'), (2, 'd'), (2, 'e')]))"
    },
    {
      "rank": 56,
      "score": 8.0,
      "candidate": "def common_first_element(tuples):\n    \"\"\"Returns common first element in list of tuple.\"\"\"\n    common_first = None\n    for tup in tuples:\n        if common_first == None:\n            common_first = tup[0]\n        else:\n            if tup[0] != common_first:\n                return None\n    return common_first\n\n\ndef test_function(test_case):\n    test_input, test_expected = test_case\n    test_actual = common_first_element(test_input)\n    if test_actual == test_expected:\n        print(\"Pass\")\n    else:\n        print(\"Fail\")\n\ntest_function(([(1, 2), (1, 3), (1, 4)], 1))\ntest_function(([(1, 2), (2, 3), (3, 4)], None))\ntest_function(([(1, 2), (1, 3), (3, 4)], None))\ntest_function(([(1, 2), (1, 3), (1, 4), (1, 5)], 1))\ntest_function(([(1, 2), (1, 3), (1, 4), (2, 5)], None))\ntest_function(([(\"h\", \"e\"), (\"e\", \"l\"), (\"l\", \"l\")], \"e\"))\ntest_function(([(\"h\", \"e\"), (\"e\", \"l\"), (\"l\", \"o\")], None))\ntest_function(([(\"h\", \"e\"), (\"e\", \"l\"), (\"l\", \"l\"), (\"l\", \"o\")], None))\ntest_function(([(\"a\", \"b\"), (\"b\", \"c\"), (\"c\", \"d\"), (\"d\", \"a\")], \"a\"))\ntest_function(([(\"a\", \"b\"), (\"b\", \"c\"), (\"c\", \"d\"), (\"d\", \"a\"), (\"a\", \"e\")], None))\ntest_function(([(\"a\", \"b\"), (\"b\", \"c\"), (\"c\", \"d\"), (\"d\", \"a\"), (\"a\", \"e\"), (\"e\", \"f\")], None))"
    },
    {
      "rank": 57,
      "score": 8.0,
      "candidate": "from timeit import default_timer as timer\n\n\ndef common_first_element(data):\n    if not data:\n        return None\n    return [x[0] for x in data].pop()\n\n\nif __name__ == '__main__':\n    data = [\n        ('a', 1, 3),\n        ('b', 2, 4),\n        ('a', 3, 5),\n        ('b', 4, 6),\n        ('a', 5, 7),\n    ]\n    start = timer()\n    common_first_element(data)\n    end = timer()\n    print(f'Elapsed time: {end - start:.6f}s')"
    },
    {
      "rank": 58,
      "score": 8.0,
      "candidate": "from functools import reduce\n\n\ndef common_first_element(tup):\n    return reduce(lambda x, y: x if x == y[0] else None, tup)\n\n\nif __name__ == \"__main__\":\n    print(common_first_element([(1, 2), (1, 3), (2, 4)]))"
    },
    {
      "rank": 59,
      "score": 8.0,
      "candidate": "from typing import List\n\n\ndef common_first_element(data: List[tuple]) -> List[tuple]:\n    \"\"\"\n    >>> common_first_element([(1, 2), (1, 3), (2, 3)])\n    [(1, 2), (2, 3)]\n    >>> common_first_element([(1, 2), (3, 4)])\n    [(1, 2), (3, 4)]\n    >>> common_first_element([(1, 2), (3, 4), (5, 6)])\n    [(1, 2), (3, 4), (5, 6)]\n    \"\"\"\n    return [\n        item\n        for item in data\n        if all(item[0] == item2[0] for item2 in data)\n    ]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 60,
      "score": 8.0,
      "candidate": "from timeit import timeit\n\n\ndef first_element(data: list) -> str:\n    \"\"\"Returns first common element in list of tuple.\n\n    Args:\n        data (list): list of tuple\n\n    Returns:\n        str: first common element in list of tuple\n    \"\"\"\n    first_elements = set(map(lambda x: x[0], data))\n\n    for first_element in first_elements:\n        if all(map(lambda x: first_element == x[0], data)):\n            return first_element\n\n\nif __name__ == \"__main__\":\n    data = [(\"apple\", \"fruit\"), (\"banana\", \"fruit\"), (\"orange\", \"fruit\"), (\"lemon\", \"fruit\")]\n    print(first_element(data))\n    print(timeit(\"first_element(data)\", globals=globals()))"
    },
    {
      "rank": 61,
      "score": 8.0,
      "candidate": "from functools import reduce\nfrom operator import itemgetter\n\n\ndef common_first_element(lst: list) -> list:\n    \"\"\"Returns a list of common first element from the given list of tuples.\"\"\"\n    return reduce(lambda x, y: x if x == y else None, map(itemgetter(0), lst))\n\n\nif __name__ == \"__main__\":\n    print(common_first_element([(\"a\", 1), (\"a\", 2), (\"b\", 3)]))"
    },
    {
      "rank": 62,
      "score": 8.0,
      "candidate": "from typing import List\n\n\ndef first_common_element(data: List[tuple]) -> int:\n    \"\"\"\n    First common element of the tuple.\n    >>> first_common_element([(1, 2, 3), (2, 3, 4)])\n    2\n    >>> first_common_element([(1, 2, 3), (2, 3, 4), (3, 4, 5)])\n    3\n    >>> first_common_element([(1, 2, 3), (2, 3, 4), (4, 5, 6)])\n    -1\n    \"\"\"\n    first_element = -1\n\n    for i in range(len(data[0])):\n        for j in range(1, len(data)):\n            if data[0][i] != data[j][i]:\n                break\n        else:\n            first_element = data[0][i]\n            break\n\n    return first_element\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 63,
      "score": 8.0,
      "candidate": "from functools import reduce\n\n\ndef common_first_element(data):\n    \"\"\"Returns common first element of tuple in list.\n\n    >>> common_first_element([(1, 2), (1, 3), (1, 4), (2, 3), (2, 4), (3, 4)])\n    1\n\n    >>> common_first_element([(1, 2), (2, 3), (3, 4)])\n    ()\n\n    \"\"\"\n    return reduce(\n        lambda prev, current: prev if prev == () else (\n            prev[0] if prev[0] == current[0] else ()), data)\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 64,
      "score": 8.0,
      "candidate": "from typing import List\n\n\ndef common_first_element(data: List[tuple]) -> tuple:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(1)\n    \"\"\"\n    if not data:\n        return None\n\n    first_elements = {}\n    for i in range(len(data)):\n        first_elements[data[i][0]] = first_elements.get(data[i][0], 0) + 1\n\n    for key, value in first_elements.items():\n        if value == len(data):\n            return key,\n\n    return None\n\n\nif __name__ == \"__main__\":\n    assert common_first_element([(1, \"a\"), (1, \"b\"), (1, \"c\"), (2, \"a\")]) == (1,)\n    assert common_first_element([(1, \"a\"), (2, \"b\"), (3, \"c\"), (4, \"d\")]) is None"
    },
    {
      "rank": 65,
      "score": 8.0,
      "candidate": "from timeit import default_timer as timer\n\n\ndef common_first_element(tuples):\n    return list(set([t[0] for t in tuples]))\n\n\nif __name__ == \"__main__\":\n    start = timer()\n    print(common_first_element([(1, 2), (3, 4), (1, 2), (3, 4)]))\n    end = timer()\n    print(\"Elapsed time: {}\".format(end - start))"
    },
    {
      "rank": 66,
      "score": 8.0,
      "candidate": "from timeit import default_timer as timer\n\n\ndef find_common_first_element(input_list):\n    if not input_list:\n        return []\n    result = [input_list[0][0]]\n    for first_tuple in input_list:\n        for common_element in result:\n            if first_tuple[0] == common_element:\n                break\n        else:\n            result.append(first_tuple[0])\n    return result\n\n\nif __name__ == \"__main__\":\n    start = timer()\n    input_list = [(1, 1), (1, 1), (1, 2), (2, 1), (2, 2)]\n    print(find_common_first_element(input_list))\n    end = timer()\n    print(\"Execution Time is: \", end - start)"
    },
    {
      "rank": 67,
      "score": 8.0,
      "candidate": "from typing import List\n\n\ndef common_first_element(input: List[tuple]) -> List[tuple]:\n    \"\"\"\n    Return a list of tuples with common first element.\n    :param input: list of tuple\n    :return: list of tuple with common first element\n    >>> common_first_element([(1, 2), (1, 3), (2, 3)])\n    [(1, 2), (1, 3)]\n    \"\"\"\n    if not input:\n        return []\n\n    return [\n        tuple(list(tuple_)[0:2])\n        for tuple_ in input\n        if tuple_[0] in [tuple_[0] for tuple_ in input]\n    ]\n\n\ndef common_first_element_solution_1(input: List[tuple]) -> List[tuple]:\n    \"\"\"\n    Return a list of tuples with common first element.\n    :param input: list of tuple\n    :return: list of tuple with common first element\n    >>> common_first_element([(1, 2), (1, 3), (2, 3)])\n    [(1, 2), (1, 3)]\n    \"\"\"\n    if not input:\n        return []\n\n    return [\n        tuple(list(tuple_)[0:2])\n        for tuple_ in input\n        if input.count(tuple_[0:2]) >= 2\n    ]\n\n\nif __name__ == \"__main__\":\n    print(common_first_element([(1, 2), (1, 3), (2, 3)]))"
    },
    {
      "rank": 68,
      "score": 8.0,
      "candidate": "from functools import reduce\n\n\n# O(n) solution\ndef common_first_element(lst):\n    first_elements = [i[0] for i in lst]\n    if len(set(first_elements)) == 1:\n        return first_elements[0]\n    else:\n        return None\n\n\n# O(n) solution\ndef common_first_element_reduce(lst):\n    return reduce(lambda a, b: a if a == b[0] else None, lst)\n\n\n# O(nlogn) solution\ndef common_first_element_sort(lst):\n    if len(lst) == 0:\n        return None\n    lst.sort()\n    if lst[0][0] == lst[1][0]:\n        return lst[0][0]\n    else:\n        return None\n\n\nif __name__ == \"__main__\":\n    lst = [(1, 2, 3), (2, 3, 4), (3, 4, 5)]\n    print(common_first_element(lst))\n    print(common_first_element_reduce(lst))\n    print(common_first_element_sort(lst))"
    },
    {
      "rank": 69,
      "score": 8.0,
      "candidate": "from timeit import timeit\n\n\ndef common_first_element(tuples):\n    common = None\n\n    for t in tuples:\n        if not common:\n            common = t[0]\n        else:\n            if t[0] != common:\n                return None\n\n    return common\n\n\nif __name__ == \"__main__\":\n    print(common_first_element([(1, 2), (1, 3), (1, 4)]))\n    print(common_first_element([(1, 2), (3, 4)]))\n    print(common_first_element([(1, 2), (3, 4), (5, 6)]))\n    print(common_first_element([]))\n    print(common_first_element([(1, 2), (2, 3), (3, 4)]))\n\n    tuples = [(i, i + 1) for i in range(1000000)]\n\n    print(timeit('common_first_element(tuples)',\n                 'from __main__ import tuples, common_first_element', number=100))"
    },
    {
      "rank": 70,
      "score": 8.0,
      "candidate": "def common_first_elem(lst):\n    if len(lst) == 0:\n        return None\n    elif len(lst) == 1:\n        return lst[0][0]\n    else:\n        lst.sort()\n        return lst[0][0]\n\n\nif __name__ == \"__main__\":\n    lst = [(1, 2, 3), (2, 3, 4), (3, 4, 5), (4, 5, 6)]\n    print(common_first_elem(lst))"
    },
    {
      "rank": 71,
      "score": 1.0,
      "candidate": "from typing import List\n\n\ndef common_first_element(data: List[tuple]) -> List:\n    \"\"\"\n    >>> common_first_element([(1, 2, 3), (2, 3, 4)])\n    [1, 2]\n    >>> common_first_element([(1, 2, 3), (3, 4, 5)])\n    [1, 3]\n    >>> common_first_element([(1, 2, 3), (2, 3, 4), (2, 3, 4, 5)])\n    [1, 2, 3]\n    \"\"\"\n    first_elements = [x[0] for x in data]\n\n    return [\n        x\n        for x in first_elements\n        if first_elements.count(x) == len(first_elements)\n    ]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 72,
      "score": 1.0,
      "candidate": "from typing import List\n\n\ndef common_first_element(data: List[tuple]) -> int:\n    \"\"\"\n    O(n) & O(1)\n    \"\"\"\n    common_element = -1\n\n    for index, elem in enumerate(data):\n        if index == 0:\n            common_element = elem[0]\n        else:\n            if elem[0] != common_element:\n                return common_element\n    return common_element\n\n\nif __name__ == \"__main__\":\n    assert common_first_element([(1, 2), (3, 4), (5, 6)]) == 1\n    assert common_first_element([(1, 2), (1, 4), (5, 6)]) == 1\n    assert common_first_element([(1, 2), (1, 4), (1, 6)]) == 1\n    assert common_first_element([(1, 2), (1, 4), (1, 1)]) == 1\n    assert common_first_element([(1, 2), (1, 4), (1, 1), (1, 6)]) == 1"
    },
    {
      "rank": 73,
      "score": 1.0,
      "candidate": "from timeit import timeit\n\n\ndef common_first_element(tup):\n    return [x for x in tup[0] if all(x in y for y in tup)]\n\n\nif __name__ == \"__main__\":\n    print(timeit(lambda: common_first_element([(\"a\", \"b\"), (\"a\", \"c\"), (\"b\", \"c\")]), number=10000))"
    },
    {
      "rank": 74,
      "score": 1.0,
      "candidate": "from typing import List\n\n\ndef common_first_element(arr: List[tuple[int, int]]) -> int:\n    \"\"\"\n    Time Complexity: O(n)\n    \"\"\"\n    first_element = set(map(lambda x: x[0], arr))\n\n    return first_element.pop()\n\n\nif __name__ == \"__main__\":\n    assert common_first_element([(1, 2), (2, 3), (3, 4)]) == 1\n    assert common_first_element([(1, 2), (1, 3), (1, 4)]) == 1"
    },
    {
      "rank": 75,
      "score": 1.0,
      "candidate": "from timeit import default_timer as timer\n\n\ndef common_first_element(lst):\n    \"\"\"Finds common first element in given list of tuple.\n\n    Args:\n        lst: list of tuple\n\n    Returns:\n        list of common first element\n    \"\"\"\n    common_first_ele = []\n    for i in range(len(lst)):\n        if lst[i][0] not in common_first_ele:\n            common_first_ele.append(lst[i][0])\n    return common_first_ele\n\n\nif __name__ == \"__main__\":\n    start = timer()\n    lst = [(1, 2), (1, 4), (1, 5), (2, 3), (2, 4), (2, 5), (3, 4), (3, 5), (4, 5)]\n    print(\"Common first element in given list of tuple is {}\".format(common_first_element(lst)))\n    print(\"Time complexity: {}\".format(timer() - start))"
    },
    {
      "rank": 76,
      "score": 1.0,
      "candidate": "from typing import List\n\n\n# Time complexity: O(n)\n# Space complexity: O(n)\ndef find_common_element(lists: List[List[int]]) -> List[int]:\n    common_set = set(lists[0])\n\n    for i in range(1, len(lists)):\n        common_set = common_set & set(lists[i])\n\n    return list(common_set)\n\n\n# Time complexity: O(n)\n# Space complexity: O(1)\ndef find_common_element_2(lists: List[List[int]]) -> List[int]:\n    if len(lists) == 0:\n        return []\n\n    for i in range(1, len(lists)):\n        lists[0] = [x for x in lists[0] if x in lists[i]]\n\n    return lists[0]\n\n\nif __name__ == \"__main__\":\n    print(find_common_element([[1, 2, 3, 4], [2, 3, 4, 5], [3, 4, 5, 6]]))\n    print(find_common_element_2([[1, 2, 3, 4], [2, 3, 4, 5], [3, 4, 5, 6]]))"
    },
    {
      "rank": 77,
      "score": 1.0,
      "candidate": "from typing import List, Tuple\n\n\ndef common_first_element(data: List[Tuple[int, int]]) -> int:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(n)\n    \"\"\"\n    result = data[0]\n\n    for tup in data:\n        if tup[0] != result[0]:\n            return -1\n\n    return result[0]\n\n\nif __name__ == \"__main__\":\n    assert common_first_element([(1, 2), (1, 3), (1, 4)]) == 1\n    assert common_first_element([(1, 2), (3, 4), (5, 6)]) == -1"
    },
    {
      "rank": 78,
      "score": 1.0,
      "candidate": "from typing import List\n\n\ndef common_first_element(data: List[tuple]) -> int:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(n)\n    \"\"\"\n    lookup = {}\n\n    for item in data:\n        if item[0] in lookup:\n            lookup[item[0]] += 1\n        else:\n            lookup[item[0]] = 1\n\n    for key in lookup:\n        if lookup[key] == len(data):\n            return key\n\n    return -1\n\n\nif __name__ == \"__main__\":\n    assert common_first_element([(1, 2), (1, 4), (1, 3), (1, 5)]) == 1\n    assert common_first_element([(1, 2), (2, 4), (3, 3), (4, 5)]) == -1"
    },
    {
      "rank": 79,
      "score": 1.0,
      "candidate": "def common_first_element(tup):\n    first = tup[0]\n    for i in range(1, len(tup)):\n        if tup[i][0] != first:\n            return None\n    return first\n\n\ndef common_first_element_2(tup):\n    first = set(tup[0])\n    for i in range(1, len(tup)):\n        if not first.issuperset(tup[i]):\n            return None\n    return tup[0]\n\n\nprint(common_first_element([(1, 2), (1, 3), (1, 4), (1, 5)]))\nprint(common_first_element_2([(1, 2), (1, 3), (1, 4), (1, 5)]))"
    },
    {
      "rank": 80,
      "score": 1.0,
      "candidate": "from timeit import default_timer as timer\n\n\ndef common_first_element(lst_of_tuple):\n    # Time complexity O(n)\n    # Space complexity O(1)\n    first = lst_of_tuple[0][0]\n    for tup in lst_of_tuple:\n        if tup[0] != first:\n            return None\n    return first\n\n\nif __name__ == \"__main__\":\n    start = timer()\n    print(common_first_element([(1, 2), (1, 3), (1, 4)]))\n    print(common_first_element([(1, 2), (2, 3), (3, 4)]))\n    print(common_first_element([(1, 2), (3, 4), (5, 6)]))\n    print(common_first_element([(1, 2), (1, 3), (2, 4)]))\n    end = timer()\n    print(end - start)"
    },
    {
      "rank": 81,
      "score": 1.0,
      "candidate": "from timeit import timeit\n\n\ndef common_first_element(data):\n    return list(set(map(lambda x: x[0], data)))\n\n\nif __name__ == \"__main__\":\n    data = [(1, 2, 3), (2, 3, 4), (3, 4, 5)]\n    print(timeit(lambda: common_first_element(data), number=10000))"
    },
    {
      "rank": 82,
      "score": 1.0,
      "candidate": "from timeit import timeit\n\n\ndef common_first_element(arr):\n    res = arr[0][0]\n    for i in range(len(arr)):\n        if res != arr[i][0]:\n            return None\n    return res\n\n\ndef common_first_element_optimized(arr):\n    res = arr[0][0]\n    for i in range(len(arr)):\n        if res != arr[i][0]:\n            return None\n    return res\n\n\nif __name__ == \"__main__\":\n    arr = [(1, 2, 3, 4, 5), (1, 2, 3, 4, 5), (1, 2, 3, 4, 5), (1, 2, 3, 4, 5)]\n    print(timeit(lambda: common_first_element(arr), number=10000))  # 0.0004192729994818266\n    print(timeit(lambda: common_first_element_optimized(arr), number=10000))  # 0.000217736001077349"
    },
    {
      "rank": 83,
      "score": 1.0,
      "candidate": "from typing import List\n\n\ndef common_first_element(data: List[tuple]) -> int:\n    \"\"\"\n    Return common first element in the list of tuples.\n    >>> common_first_element([(0, 2), (0, 4), (0, 6), (0, 8)])\n    0\n    >>> common_first_element([(0, 1), (0, 4), (0, 6), (0, 8)])\n    0\n    >>> common_first_element([(1, 2), (2, 4), (3, 6), (4, 8)])\n    -1\n    \"\"\"\n    return data[0][0] if data else -1\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 84,
      "score": 1.0,
      "candidate": "from typing import List\n\n\ndef find_common_first(data: List[tuple]) -> tuple:\n    \"\"\"\n    Find common first element in list of tuple.\n    :param data: List of tuple.\n    :return: tuple\n    >>> find_common_first([(1, 2), (2, 3), (3, 4)])\n    (1, 2)\n    >>> find_common_first([(1, 2), (1, 3), (1, 4)])\n    (1, 2)\n    >>> find_common_first([(1, 2), (1, 3), (2, 4)])\n    (1, 2)\n    >>> find_common_first([(1, 2), (2, 3), (1, 4)])\n    (1, 2)\n    >>> find_common_first([(1, 2), (2, 3), (3, 4), (1, 4)])\n    (1, 2)\n    >>> find_common_first([(1, 2), (2, 3), (3, 4), (1, 5)])\n    \"\"\"\n    for i in range(len(data)):\n        for j in range(i + 1, len(data)):\n            if data[i][0] == data[j][0]:\n                return data[i]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 85,
      "score": 1.0,
      "candidate": "from typing import List\n\n\ndef common_element(arr: List[tuple]) -> tuple:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(1)\n    \"\"\"\n    if not arr:\n        return None\n\n    first = arr[0][0]\n\n    for i in range(len(arr)):\n        if arr[i][0] != first:\n            return None\n\n    return first\n\n\nif __name__ == \"__main__\":\n    assert common_element([(1, 2), (1, 3), (1, 4), (1, 5)]) == (1,)\n    assert common_element([(1, 2), (1, 3), (2, 4), (2, 5)]) is None"
    },
    {
      "rank": 86,
      "score": 1.0,
      "candidate": "from typing import List\n\n\ndef first_common_element(list_of_tuple: List[tuple]) -> str:\n    \"\"\"Returns first common element in list of tuples.\n\n    Args:\n        list_of_tuple (List[tuple]): list of tuples\n\n    Returns:\n        str: first common element\n    \"\"\"\n    return next(set.intersection(*(set(t) for t in list_of_tuple)), None)\n\n\nif __name__ == \"__main__\":\n    print(first_common_element([(\"A\", \"B\", \"C\"), (\"A\", \"B\", \"D\"), (\"A\", \"B\", \"C\", \"D\")]))"
    },
    {
      "rank": 87,
      "score": 1.0,
      "candidate": "from timeit import default_timer as timer\n\n\ndef common_first_element(tuples):\n    \"\"\"\n    Finds the common first element in a list of tuples.\n    :param tuples: list of tuples\n    :return: common first element\n    \"\"\"\n    return next(iter(set(tuple(t)[0] for t in tuples)))\n\n\nif __name__ == \"__main__\":\n    data = [(1, 2), (1, 3), (1, 4), (2, 3), (2, 4), (3, 4), (1, 2, 3), (1, 2, 4), (1, 3, 4), (2, 3, 4), (1, 2, 3, 4)]\n    start = timer()\n    print(\"Common first element:\", common_first_element(data))\n    print(\"Time: {:.15f}\".format(timer() - start))"
    },
    {
      "rank": 88,
      "score": 1.0,
      "candidate": "from typing import List\n\n\ndef common_first_element(lst: List[tuple]) -> tuple:\n    \"\"\"Returns first element common to all the tuples in the list.\n\n    Args:\n        lst (List[tuple]): list of tuples\n\n    Returns:\n        tuple: first element common to all the tuples in the list\n    \"\"\"\n    if not lst:\n        return None\n\n    first_element = lst[0]\n\n    for i in range(len(lst)):\n        if first_element != lst[i]:\n            return None\n\n    return first_element\n\n\nif __name__ == \"__main__\":\n    assert common_first_element([(1, 2), (1, 2), (1, 2)]) == (1, 2)\n    assert common_first_element([(1, 2), (1, 2), (2, 3)]) is None\n    assert common_first_element([]) is None"
    },
    {
      "rank": 89,
      "score": 1.0,
      "candidate": "from typing import List, Tuple\n\n\ndef common_first_element(data: List[Tuple]) -> List:\n    \"\"\"\n    Find common first element in list of tuple.\n    :param data: list of tuple\n    :return: list of common first element\n    >>> common_first_element([(1, 3), (2, 3), (3, 4)])\n    [1, 2, 3]\n    >>> common_first_element([(1, 2, 3), (1, 2, 4), (1, 2, 5)])\n    [1, 2]\n    \"\"\"\n    return [\n        val\n        for val in data[0]\n        if all(val in tuple_data for tuple_data in data)\n    ]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 90,
      "score": 1.0,
      "candidate": "from typing import List\n\n\ndef common_first_element(data: List[tuple]) -> int:\n    \"\"\"\n    Find the common first element in list of tuples.\n    :param data: list of tuples.\n    :return: common first element.\n    >>> common_first_element([(1, 2), (1, 3), (1, 4)])\n    1\n    \"\"\"\n    return data[0][0]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 91,
      "score": 1.0,
      "candidate": "from typing import List\n\n\ndef common_first_element(tuples: List[tuple]) -> int:\n    \"\"\"\n    Return the first element of the first tuple.\n    \"\"\"\n    return tuples[0][0]\n\n\nif __name__ == \"__main__\":\n    assert common_first_element([(1, 2, 3), (4, 5, 6), (7, 8, 9)]) == 1"
    },
    {
      "rank": 92,
      "score": 1.0,
      "candidate": "from typing import List\n\n\ndef first_common_element(tuples: List[tuple]) -> int:\n    \"\"\"Returns first common element from tuples.\n\n    Args:\n        tuples (List[tuple]): list of tuples\n\n    Returns:\n        int: first common element\n    \"\"\"\n    seen = set()\n    for tup in tuples:\n        for element in tup:\n            if element in seen:\n                return element\n            seen.add(element)\n    return -1\n\n\nif __name__ == \"__main__\":\n    print(first_common_element([(1, 2, 3, 4, 5), (2, 4, 6, 8), (2, 3, 5, 7)]))"
    },
    {
      "rank": 93,
      "score": 1.0,
      "candidate": "def common_first_element(input_list):\n    \"\"\"Returns the common first element in a list of tuples.\"\"\"\n    first_element = None\n    for i in range(len(input_list)):\n        if i == 0:\n            first_element = input_list[i][0]\n        else:\n            if first_element != input_list[i][0]:\n                return None\n    return first_element\n\n\nif __name__ == \"__main__\":\n    test_cases = [\n        (([(1, 2), (1, 3), (1, 4), (1, 5), (2, 3), (2, 4), (2, 5), (3, 4), (3, 5), (4, 5)],), 1),\n        (([(1, 2), (3, 4), (5, 6), (7, 8), (9, 10), (11, 12), (13, 14), (15, 16), (17, 18), (19, 20)],), None),\n        (([(1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 7), (7, 8), (8, 9), (9, 10), (10, 11)],), 1),\n        (([(1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 7), (7, 8), (8, 9), (9, 10), (10, 11), (11, 12)],), None),\n    ]\n\n    for test_case, exp in test_cases:\n        print(common_first_element(*test_case), exp)"
    },
    {
      "rank": 94,
      "score": 1.0,
      "candidate": "from timeit import timeit\n\n\ndef common_element(lst: list) -> int:\n    \"\"\"Return common first element in given list of tuple.\"\"\"\n    return [i[0] for i in lst].pop()\n\n\ndef common_element_alt(lst: list) -> int:\n    \"\"\"Return common first element in given list of tuple.\"\"\"\n    return lst[0][0]\n\n\nif __name__ == \"__main__\":\n    data = [(1, 2), (1, 3), (1, 4), (1, 5)]\n    print(timeit(lambda: common_element(data), number=10000))  # 0.00035151799999999996\n    print(timeit(lambda: common_element_alt(data), number=10000))  # 0.00022614600000000003"
    },
    {
      "rank": 95,
      "score": 1.0,
      "candidate": "from typing import List, Tuple\n\n\ndef common_first_element(data: List[Tuple]) -> List:\n    \"\"\"Returns list of common first element in given list of tuple.\n\n    Args:\n        data (List[Tuple]): list of tuple\n\n    Examples:\n        >>> common_first_element([('a', 1), ('a', 2), ('b', 3), ('a', 4)])\n        ['a']\n    \"\"\"\n    result = []\n\n    for i in range(len(data)):\n        if i == 0:\n            result.append(data[i][0])\n        else:\n            if data[i][0] == result[0]:\n                continue\n            else:\n                break\n    return result\n\n\nif __name__ == \"__main__\":\n    print(common_first_element([(\"a\", 1), (\"a\", 2), (\"b\", 3), (\"a\", 4)]))"
    },
    {
      "rank": 96,
      "score": 1.0,
      "candidate": "from typing import List, Tuple\n\n\ndef find_common_element(data: List[Tuple]) -> List[Tuple[int, int]]:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(n)\n    \"\"\"\n    result: List[Tuple[int, int]] = []\n\n    if not data:\n        return result\n\n    common_first_element: List[int] = []\n\n    for i in range(len(data)):\n        if i == 0:\n            common_first_element.append(data[i][0])\n        else:\n            if data[i][0] in common_first_element:\n                continue\n            else:\n                common_first_element.append(data[i][0])\n\n    for i in range(len(data)):\n        if data[i][0] in common_first_element:\n            result.append(data[i])\n\n    return result\n\n\nif __name__ == \"__main__\":\n    assert find_common_element([(1, 2), (2, 3), (3, 4), (1, 2), (2, 3)]) == [\n        (1, 2),\n        (2, 3),\n    ]"
    },
    {
      "rank": 97,
      "score": 1.0,
      "candidate": "from typing import List, Tuple\n\n\ndef common_first_element(lists: List[Tuple[int, int]]) -> int:\n    \"\"\"\n    >>> common_first_element([(1, 2), (2, 3), (3, 4), (4, 5)])\n    1\n    >>> common_first_element([(1, 2), (2, 3), (3, 4), (5, 6)])\n    -1\n    \"\"\"\n    first_elements: List[int] = []\n\n    for first, _ in lists:\n        if first in first_elements:\n            return first\n        first_elements.append(first)\n\n    return -1\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 98,
      "score": 1.0,
      "candidate": "from timeit import timeit\n\n\ndef common_first_element(lst):\n    return list(set(map(lambda x: x[0], lst)))\n\n\ndef common_first_element_optimized(lst):\n    return list({x[0] for x in lst})\n\n\nif __name__ == \"__main__\":\n    data = [(1, 2, 3), (1, 2, 4), (1, 2, 5), (1, 2, 6), (1, 2, 7), (1, 2, 8)]\n\n    print(common_first_element(data))\n    print(common_first_element_optimized(data))\n\n    print(timeit(lambda: common_first_element(data), number=10000))\n    print(timeit(lambda: common_first_element_optimized(data), number=10000))"
    },
    {
      "rank": 99,
      "score": 1.0,
      "candidate": "from typing import List, Tuple\n\n\ndef find_common_first_element(data: List[Tuple[int, ...]]) -> int:\n    \"\"\"\n    >>> find_common_first_element([(1, 2, 3), (1, 2, 5), (1, 2, 3, 4)])\n    1\n    >>> find_common_first_element([(1, 2, 3), (1, 2, 5), (2, 2, 3, 4)])\n    -1\n    \"\"\"\n    common = -1\n    for i in range(len(data[0])):\n        first_element = data[0][i]\n        for j in range(len(data)):\n            if data[j][i] != first_element:\n                return common\n        common = first_element\n    return common\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 100,
      "score": 1.0,
      "candidate": "from typing import List\n\n\ndef common_first_element(data: List[tuple]) -> List[tuple]:\n    \"\"\"Returns common first element in tuple list.\n\n    Args:\n        data (List[tuple]): list of tuple\n\n    Examples:\n        >>> common_first_element([(1, 2, 3), (1, 4, 5)])\n        [(1, 2, 3), (1, 4, 5)]\n\n    Returns:\n        List[tuple]: list of tuple\n    \"\"\"\n    return [\n        tpl\n        for tpl in data\n        if any(tpl[0] == tpl_item[0] for tpl_item in data)\n    ]\n\n\nif __name__ == \"__main__\":\n    print(common_first_element([(1, 2, 3), (1, 4, 5)]))"
    }
  ]
}