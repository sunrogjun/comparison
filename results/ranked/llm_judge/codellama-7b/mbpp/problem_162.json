{
  "timestamp": "2025-09-14T23:31:28.211028",
  "method": "improved_llm_judge",
  "judge_model": "codellama/CodeLlama-7b-Python-hf",
  "target_model": "codellama-7b",
  "dataset": "mbpp",
  "problem_number": 162,
  "total_candidates": 100,
  "results": [
    {
      "rank": 1,
      "score": 10.0,
      "candidate": "import re\n\n\ndef remove_non_alphanumeric(string):\n    return re.sub(r\"[^a-zA-Z0-9]\", \"\", string)\n\n\nprint(remove_non_alphanumeric(\"!@#$%^&*()_+{}\\|:\\\"<>?/.,;'[]-=\"))"
    },
    {
      "rank": 2,
      "score": 10.0,
      "candidate": "# Time: O(n)\n# Space: O(n)\n# Using a list comprehension to create a new string.\n\n\ndef remove_non_alphanumeric(string):\n    return \"\".join(c for c in string if c.isalnum())\n\n\nassert remove_non_alphanumeric(\"h@$#%567890\") == \"567890\"\nassert remove_non_alphanumeric(\"h@$#%567890abc\") == \"567890abc\""
    },
    {
      "rank": 3,
      "score": 10.0,
      "candidate": "def remove_non_alpha(text):\n    return \"\".join(c for c in text if c.isalnum())\n\nprint(remove_non_alpha(\"!@#$%^&*()_+}{:?><,./;'[]-=a1234567890\"))"
    },
    {
      "rank": 4,
      "score": 10.0,
      "candidate": "def remove_non_alphanumeric(string: str) -> str:\n    \"\"\"Returns a string with only alphanumeric characters.\"\"\"\n    return \"\".join(char for char in string if char.isalnum())\n\n\nif __name__ == \"__main__\":\n    assert remove_non_alphanumeric(\"\") == \"\"\n    assert remove_non_alphanumeric(\"abc123\") == \"abc123\"\n    assert remove_non_alphanumeric(\"abcd123$@\") == \"abcd123\"\n    assert remove_non_alphanumeric(\"123abc!@#\") == \"123abc\"\n    assert remove_non_alphanumeric(\"abc123abc\") == \"abc123abc\"\n    assert remove_non_alphanumeric(\"abc 123\") == \"abc123\"\n    assert remove_non_alphanumeric(\" 123abc \") == \"123abc\"\n    assert remove_non_alphanumeric(\"abc 123abc\") == \"abc123abc\""
    },
    {
      "rank": 5,
      "score": 10.0,
      "candidate": "def remove_non_alphanum(text: str) -> str:\n    \"\"\"Remove everything except alphanumeric characters from a string.\n\n    Args:\n        text (str): input text\n\n    Returns:\n        str: only alphanumeric characters\n    \"\"\"\n    return \"\".join(filter(str.isalnum, text))\n\n\nif __name__ == \"__main__\":\n    print(remove_non_alphanum(\"!@#$%^&*()_+=-{}[]|\\:;?/>.<,~`\"))"
    },
    {
      "rank": 6,
      "score": 10.0,
      "candidate": "def remove_non_alphanumeric(s):\n    return \"\".join(filter(str.isalnum, s))\n\n\nif __name__ == \"__main__\":\n    s = \"!@#$%^&*()_+{}\\|][<>?/.,;:\\'`~\"\n    print(remove_non_alphanumeric(s))"
    },
    {
      "rank": 7,
      "score": 10.0,
      "candidate": "from re import sub\n\n\ndef remove_non_alphanumeric(string: str) -> str:\n    \"\"\"Removes non-alphanumeric characters from a string.\n\n    Args:\n        string (str): string to remove non-alphanumeric characters from.\n\n    Returns:\n        str: string with non-alphanumeric characters removed.\n\n    Examples:\n        >>> assert remove_non_alphanumeric(\"This is a test\") == \"Thisisatest\"\n    \"\"\"\n    return sub(r\"[\\W_]\", \"\", string)\n\n\nif __name__ == \"__main__\":\n    print(remove_non_alphanumeric(\"This is a test\"))"
    },
    {
      "rank": 8,
      "score": 10.0,
      "candidate": "def remove_non_alpha(string: str) -> str:\n    \"\"\"Remove everything except alphanumeric characters from a string.\n\n    >>> remove_non_alpha(\"The quick brown fox jumps over the lazy dog.\")\n    'Thequickbrownfoxjumpsoverthe lazydog'\n    >>> remove_non_alpha(\"a1b2c3d4e\")\n    'a1b2c3d4e'\n    \"\"\"\n    return \"\".join(char for char in string if char.isalnum())\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 9,
      "score": 10.0,
      "candidate": "import re\n\n\ndef remove_non_alphanumeric(input_str):\n    return re.sub(r\"[^a-zA-Z0-9]+\", \"\", input_str)\n\n\nif __name__ == \"__main__\":\n    print(remove_non_alphanumeric(\"!@#$%^&*()_+\"))"
    },
    {
      "rank": 10,
      "score": 10.0,
      "candidate": "def remove_special_chars(input_str):\n    \"\"\"\n    Remove all special chars from the string.\n\n    >>> remove_special_chars('hello, world!')\n    'helloworld'\n    \"\"\"\n    return \"\".join(filter(str.isalnum, input_str))\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 11,
      "score": 10.0,
      "candidate": "def remove_special_characters(string: str) -> str:\n    \"\"\"Returns a string with only alphanumeric characters.\n\n    Args:\n        string (str): string to remove special characters from.\n\n    Returns:\n        str: string with special characters removed.\n    \"\"\"\n    return \"\".join(filter(str.isalnum, string))\n\n\nif __name__ == \"__main__\":\n    print(remove_special_characters(\"Hello, world!\"))"
    },
    {
      "rank": 12,
      "score": 10.0,
      "candidate": "def remove_non_alphanumeric(string):\n    # string = string.replace(\" \", \"\")\n    # string = string.replace(\"_\", \"\")\n    # return \"\".join(filter(lambda x: x.isalnum(), string))\n    # return \"\".join(filter(lambda x: x.isalnum() or x == \"_\" or x == \" \", string))\n    return \"\".join(filter(lambda x: x.isalnum() or x == \"_\" or x == \" \", string))\n\nif __name__ == \"__main__\":\n    print(remove_non_alphanumeric(\"My name is John\"))\n    print(remove_non_alphanumeric(\"My name is John123\"))\n    print(remove_non_alphanumeric(\"My name is John123.456\"))\n    print(remove_non_alphanumeric(\"My name is John123.456.789\"))\n    print(remove_non_alphanumeric(\"My name is John123.456.789!\"))\n    print(remove_non_alphanumeric(\"My name is John123.456.789!@#$%^&*()_+\"))"
    },
    {
      "rank": 13,
      "score": 10.0,
      "candidate": "def remove_non_alphanum(input_string):\n    result = \"\"\n    for c in input_string:\n        if c.isalnum():\n            result += c\n    return result\n\nprint(remove_non_alphanum(\"!@#$%^&*()_+=-`~[]{}|\\:;\\\"'<>?,./\"))\nprint(remove_non_alphanum(\"The quick brown fox jumped over the lazy dog.\"))"
    },
    {
      "rank": 14,
      "score": 9.0,
      "candidate": "def remove_non_alphanumeric(string):\n    \"\"\"Return a string with all non-alphanumeric characters removed.\n\n    >>> remove_non_alphanumeric(\"123!@#$%^&*()_+\")\n    '123'\n    >>> remove_non_alphanumeric(\"my name is Bond, James Bond!\")\n    'mynameisBondJamesBond'\n    \"\"\"\n    return \"\".join(filter(str.isalnum, string))"
    },
    {
      "rank": 15,
      "score": 9.0,
      "candidate": "def clean_string(s):\n    \"\"\"\n    :type s: str\n    :rtype: str\n    \"\"\"\n    s = s.lower()\n    return \"\".join(filter(lambda x: x.isalnum(), s))"
    },
    {
      "rank": 16,
      "score": 9.0,
      "candidate": "def remove_non_alphanumeric(string):\n    \"\"\"Removes all non alphanumeric characters from a string.\"\"\"\n    return \"\".join(c for c in string if c.isalnum())"
    },
    {
      "rank": 17,
      "score": 9.0,
      "candidate": "def remove_everything_except_alphanumeric(string):\n    return \"\".join(ch for ch in string if ch.isalnum())\n\n\nif __name__ == \"__main__\":\n    assert remove_everything_except_alphanumeric(\"a@b_c!d$e\") == \"abcde\""
    },
    {
      "rank": 18,
      "score": 9.0,
      "candidate": "def clean_string(s):\n    \"\"\"\n    :param s: str\n    :return: str\n    \"\"\"\n    return ''.join(c for c in s if c.isalnum())\n\n\ndef main():\n    print(clean_string(\"a$b*cd\"))\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 19,
      "score": 9.0,
      "candidate": "def remove_everything_except_alphanumeric(s):\n    \"\"\"\n    :param s: str - String to clean\n    :return: str - String without non-alphanumeric characters\n    \"\"\"\n    return ''.join(c for c in s if c.isalnum())"
    },
    {
      "rank": 20,
      "score": 9.0,
      "candidate": "def clean_string(string):\n    \"\"\"\n    :param string: str\n    :return: str\n\n    >>> clean_string(\"Hello, World!\")\n    'HelloWorld'\n    \"\"\"\n    return \"\".join([char for char in string if char.isalnum()])\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 21,
      "score": 9.0,
      "candidate": "def remove_non_alphanumeric(s):\n    \"\"\"\n    Removes everything except alphanumeric characters from a string.\n\n    Args:\n     s: String to remove characters from.\n\n    Returns:\n     String without non-alphanumeric characters.\n    \"\"\"\n    return ''.join([c for c in s if c.isalnum()])"
    },
    {
      "rank": 22,
      "score": 9.0,
      "candidate": "def remove_special_characters(string):\n    for character in string:\n        if not character.isalnum():\n            string = string.replace(character, \"\")\n    return string\n\n\ndef remove_special_characters_2(string):\n    return \"\".join(character for character in string if character.isalnum())"
    },
    {
      "rank": 23,
      "score": 8.0,
      "candidate": "def remove_non_alphanumeric(string):\n    return \"\".join(char for char in string if char.isalnum())\n\n\nif __name__ == \"__main__\":\n    print(remove_non_alphanumeric(\"!@#$%^&*()_+=-`~<>?/.,|{}[]:;'\"))"
    },
    {
      "rank": 24,
      "score": 8.0,
      "candidate": "def remove_non_alphanumeric(string: str) -> str:\n    \"\"\"Removes everything except alphanumeric characters from a string.\n\n    Args:\n        string (str): String to remove non-alphanumeric characters from.\n\n    Examples:\n        >>> remove_non_alphanumeric(\"Hello world! 123\")\n        'Hello world! 123'\n        >>> remove_non_alphanumeric(\"!@#$%^&*()_+=-`~:;\\\"'[]{},./?><\\\\|\")\n        ''\n    \"\"\"\n    return \"\".join(char for char in string if char.isalnum())\n\n\nif __name__ == \"__main__\":\n    print(remove_non_alphanumeric(input(\"Enter string: \")))"
    },
    {
      "rank": 25,
      "score": 8.0,
      "candidate": "def remove_non_alphanumeric(string):\n    \"\"\"Remove everything except alphanumeric characters from a string.\"\"\"\n    alphanumeric_string = ''\n    for char in string:\n        if char.isalnum():\n            alphanumeric_string += char\n    return alphanumeric_string\n\n\ndef main():\n    \"\"\"Print the result of remove_non_alphanumeric.\"\"\"\n    print(remove_non_alphanumeric('!@#$%^&*()_+=-`~[]{};:,./<>?\\|'))\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 26,
      "score": 8.0,
      "candidate": "def remove_non_alpha_num(str):\n    alpha_num = ''\n    for char in str:\n        if char.isalnum():\n            alpha_num += char\n    return alpha_num\n\n\ndef main():\n    print(remove_non_alpha_num('$#@GOD is great. @#$'))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 27,
      "score": 8.0,
      "candidate": "def remove_non_alphanum(string: str) -> str:\n    \"\"\"\n    >>> remove_non_alphanum(\"a1b2c3\")\n    'a1b2c3'\n    >>> remove_non_alphanum(\"a1.2c3\")\n    'a12c3'\n    \"\"\"\n    return \"\".join([char for char in string if char.isalnum()])\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 28,
      "score": 8.0,
      "candidate": "# Time Complexity: O(n)\n# Space Complexity: O(1)\ndef remove_non_alphanumeric(string):\n    alphanumeric = []\n    for char in string:\n        if char.isalnum():\n            alphanumeric.append(char)\n    return \"\".join(alphanumeric)\n\n\n# Time Complexity: O(n)\n# Space Complexity: O(n)\ndef remove_non_alphanumeric_v2(string):\n    return \"\".join(char for char in string if char.isalnum())"
    },
    {
      "rank": 29,
      "score": 8.0,
      "candidate": "def remove_non_alphanumeric(string):\n    new_string = \"\"\n    for char in string:\n        if char.isalnum():\n            new_string += char\n    return new_string\n\n\nprint(remove_non_alphanumeric(\"!@#$%^&*()_+=-{}|[]\\\\:;\\\"'<>?,./\"))"
    },
    {
      "rank": 30,
      "score": 8.0,
      "candidate": "import re\n\n\ndef remove_non_alphanumeric(s):\n    return re.sub(r'[^a-zA-Z0-9]', '', s)\n\n\ndef test_remove_non_alphanumeric():\n    assert remove_non_alphanumeric('367+43566=') == '36743566'\n    assert remove_non_alphanumeric('43566') == '43566'\n    assert remove_non_alphanumeric('') == ''\n    assert remove_non_alphanumeric('abc') == 'abc'\n    assert remove_non_alphanumeric('367+43566= ') == '36743566'\n    assert remove_non_alphanumeric('367+43566= ') == '36743566'\n    assert remove_non_alphanumeric('367+43566= ') == '36743566'\n\n\nif __name__ == '__main__':\n    test_remove_non_alphanumeric()"
    },
    {
      "rank": 31,
      "score": 8.0,
      "candidate": "def remove_non_alnum(string):\n    alnum = \"\"\n    for char in string:\n        if char.isalnum():\n            alnum += char\n    return alnum\n\n# Tests\nprint(remove_non_alnum(\"my name is ^^^^^^^^^^^^^^^\"))\nprint(remove_non_alnum(\"my name is John123\"))\nprint(remove_non_alnum(\"my name is John123 and I am 27\"))\nprint(remove_non_alnum(\"my name is John123 and I am 27 and I live in California\"))"
    },
    {
      "rank": 32,
      "score": 8.0,
      "candidate": "from re import sub\n\n\ndef remove_non_alphanumeric(s):\n    return sub(r\"[^a-zA-Z0-9]\", \"\", s)\n\n\nif __name__ == \"__main__\":\n    print(remove_non_alphanumeric(\"!@#$%^&*()_+{}:<>?/,.;'[]-=\"))\n    print(remove_non_alphanumeric(\"My name is John\"))\n    print(remove_non_alphanumeric(\"1234567890\"))\n    print(remove_non_alphanumeric(\"Testing123\"))"
    },
    {
      "rank": 33,
      "score": 8.0,
      "candidate": "def remove_non_alpha(string):\n    return ''.join([ch for ch in string if ch.isalnum()])\n\n\nif __name__ == '__main__':\n    print(remove_non_alpha('My name is 123'))"
    },
    {
      "rank": 34,
      "score": 8.0,
      "candidate": "import re\n\n\n# def remove_everything_except_alphanumeric(input_str):\n#     return ''.join(ch for ch in input_str if ch.isalnum())\n\n\ndef remove_everything_except_alphanumeric(input_str):\n    return re.sub(r'[^a-zA-Z0-9]', '', input_str)"
    },
    {
      "rank": 35,
      "score": 8.0,
      "candidate": "def remove_non_alphanumeric(s):\n    \"\"\"\n    Remove non-alphanumeric characters from a string.\n\n    Args:\n        s(str): String to remove non-alphanumeric characters from.\n\n    Returns:\n        str: String with non-alphanumeric characters removed.\n    \"\"\"\n    return \"\".join(filter(str.isalnum, s))"
    },
    {
      "rank": 36,
      "score": 8.0,
      "candidate": "def remove_non_alpha(string):\n    # check for empty string\n    if string == \"\":\n        return string\n\n    # create a list of characters\n    string_list = [x for x in string]\n\n    # create a new list\n    new_list = []\n\n    # loop through string_list\n    for char in string_list:\n        # check if alphanumeric\n        if char.isalnum():\n            new_list.append(char)\n\n    # return \"\".join(new_list)\n    return \"\".join(new_list)\n\n# test\nprint(remove_non_alpha(\"abc123xyz666\"))\nprint(remove_non_alpha(\"a\"))\nprint(remove_non_alpha(\"\"))\nprint(remove_non_alpha(\"1234567890\"))\nprint(remove_non_alpha(\"!@#$%^&*()\"))"
    },
    {
      "rank": 37,
      "score": 8.0,
      "candidate": "def remove_non_alnum(s):\n    return ''.join(c for c in s if c.isalnum())\n\ndef remove_non_alnum_regex(s):\n    import re\n    return re.sub(r'[^a-zA-Z0-9]', '', s)\n\n\nif __name__ == '__main__':\n    s = 'asdf@!@#$asd 321'\n    print(remove_non_alnum(s))\n    print(remove_non_alnum_regex(s))"
    },
    {
      "rank": 38,
      "score": 8.0,
      "candidate": "def remove_non_alphanumeric(s):\n    return ''.join(c for c in s if c.isalnum())\n\n\"\"\"\nWrite a function to determine if a string is a palindrome.\n\"\"\"\n\ndef is_palindrome(s):\n    return s == s[::-1]\n\n\"\"\"\nWrite a function to determine if a string is a permutation of a palindrome.\n\"\"\"\n\ndef is_palindrome_permutation(s):\n    d = {}\n    for c in s:\n        if c.isalnum():\n            d[c] = d.get(c, 0) + 1\n    return len(d) <= 1 or (all(v % 2 == 0 for v in d.values()) and not d.get(' '))\n\n\"\"\"\nWrite a function to remove spaces from a string.\n\"\"\"\n\ndef remove_spaces(s):\n    return s.replace(' ', '')\n\n\"\"\"\nWrite a function to find the longest palindrome in a string.\n\"\"\"\n\ndef longest_palindrome(s):\n    s = s.lower()\n    if len(s) == 1:\n        return s\n    if len(s) == 2:\n        return s if s[0] == s[1] else s[0]\n    for i in range(len(s) - 2):\n        for j in range(i + 1, len(s) - 1):\n            if s[i] == s[j] and s[i+1:j+1] == s[j+1:i:-1]:\n                return s[i:j+1]\n    return s[0]\n\n\"\"\"\nWrite a function to find the longest palindrome in a string.\n\"\"\"\n\ndef longest_palindrome_2(s):\n    s = s.lower()\n    if len(s) == 1:\n        return s\n    if len(s) == 2:\n        return s if s[0] == s[1] else s[0]\n    for i in range(len(s) - 2):\n        for j in range(i"
    },
    {
      "rank": 39,
      "score": 8.0,
      "candidate": "import re\n\n\ndef remove_everything_except_alphanumeric(string):\n    return re.sub(r\"\\W\", \"\", string)\n\n\nif __name__ == \"__main__\":\n    print(remove_everything_except_alphanumeric(\"Hello World!\"))\n    print(remove_everything_except_alphanumeric(\"Hello World 2!\"))\n    print(remove_everything_except_alphanumeric(\"Hello World 2!\"))\n    print(remove_everything_except_alphanumeric(\"Hello World$%^&*()!2!\"))\n    print(remove_everything_except_alphanumeric(\"\"))"
    },
    {
      "rank": 40,
      "score": 8.0,
      "candidate": "def remove_special_chars(s: str) -> str:\n    return ''.join(filter(str.isalnum, s))\n\n\nif __name__ == '__main__':\n    print(remove_special_chars(\"I love python!!!\"))"
    },
    {
      "rank": 41,
      "score": 8.0,
      "candidate": "def remove_non_alpha_num(string):\n    \"\"\"Removes non-alphanumeric characters from a string.\n    \n    Args:\n        string: The string to remove characters from.\n        \n    Returns:\n        The string with only alphanumeric characters.\n    \"\"\"\n    return ''.join(filter(str.isalnum, string))"
    },
    {
      "rank": 42,
      "score": 8.0,
      "candidate": "import re\n\n\ndef remove_special_characters(s):\n    \"\"\"\n    >>> remove_special_characters(\"$#@!324324324324234234\")\n    '324324324324234234'\n    >>> remove_special_characters(\"a@#!b\")\n    'ab'\n    >>> remove_special_characters(\"a@#!b$#@!c\")\n    'abc'\n    \"\"\"\n    return re.sub(r\"[^a-zA-Z0-9]\", \"\", s)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 43,
      "score": 8.0,
      "candidate": "def remove_non_alphanumeric(string):\n    new_str = \"\"\n    for char in string:\n        if char.isalnum():\n            new_str += char\n    return new_str\n\n\ndef main():\n    print(remove_non_alphanumeric(\"Hello world!\"))  # => \"Hello world!\"\n    print(remove_non_alphanumeric(\"$%@^&%^&*()$#@&\"))  # => \"\"\n    print(remove_non_alphanumeric(\"Python 3.6\"))  # => \"Python 36\"\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 44,
      "score": 8.0,
      "candidate": "# def remove_non_alphanumeric(string):\n#     alphanumeric = \"\"\n#     for char in string:\n#         if char.isalnum():\n#             alphanumeric += char\n#     return alphanumeric\n\ndef remove_non_alphanumeric(string):\n    return ''.join([char for char in string if char.isalnum()])\n\nif __name__ == '__main__':\n    print(remove_non_alphanumeric(\"!@#$%^&*()_+{}:<>?-[]|\"))"
    },
    {
      "rank": 45,
      "score": 8.0,
      "candidate": "from re import sub\n\n\ndef alpha(s):\n    return sub(r\"[^a-zA-Z0-9]\", \"\", s)\n\n\ndef test_alpha():\n    assert alpha(\"\") == \"\"\n    assert alpha(\"1\") == \"1\"\n    assert alpha(\"a\") == \"a\"\n    assert alpha(\"A\") == \"A\"\n    assert alpha(\"abc\") == \"abc\"\n    assert alpha(\"abc123\") == \"abc123\"\n    assert alpha(\"abc abc\") == \"abcabc\"\n    assert alpha(\"abc abc 123\") == \"abcabc123\"\n    assert alpha(\"abc abc 123 abc\") == \"abcabc123abc\"\n    assert alpha(\"123abc\") == \"123abc\"\n    assert alpha(\"123abc456\") == \"123abc456\"\n    assert alpha(\"123abc456abc\") == \"123abc456abc\"\n\n\nif __name__ == \"__main__\":\n    test_alpha()"
    },
    {
      "rank": 46,
      "score": 8.0,
      "candidate": "import re\n\n\ndef remove_non_alphanumeric(text):\n    return re.sub(r\"[^a-zA-Z0-9]\", \"\", text)\n\n\nif __name__ == \"__main__\":\n    assert remove_non_alphanumeric(\"\") == \"\"\n    assert remove_non_alphanumeric(\"123\") == \"123\"\n    assert remove_non_alphanumeric(\"abc\") == \"abc\"\n    assert remove_non_alphanumeric(\"abc123\") == \"abc123\"\n    assert remove_non_alphanumeric(\"abc 123\") == \"abc123\"\n    assert remove_non_alphanumeric(\"abc-123\") == \"abc123\"\n    assert remove_non_alphanumeric(\"abc@123\") == \"abc123\"\n    assert remove_non_alphanumeric(\"abc123!\") == \"abc123\"\n    assert remove_non_alphanumeric(\"abc123!@#\") == \"abc123\"\n    assert remove_non_alphanumeric(\"abc123!@#$\") == \"abc123\"\n    assert remove_non_alphanumeric(\"abc123!@#$%\") == \"abc123\"\n    assert remove_non_alphanumeric(\"abc123!@#$%^\") == \"abc123\"\n    assert remove_non_alphanumeric(\"abc123!@#$%^&\") == \"abc123\"\n    assert remove_non_alphanumeric(\"abc123!@#$%^&*\") == \"abc123\"\n    assert remove_non_alphanumeric(\"abc123!@#$%^&*()\") == \"abc123\"\n    assert remove_non_alphanumeric(\"abc123!@#$%^&*()_+\") == \"abc123\""
    },
    {
      "rank": 47,
      "score": 8.0,
      "candidate": "# Time Complexity: O(n)\n# Space Complexity: O(1)\n# Letters: O(1)\n# Numbers: O(1)\n# Space: O(1)\n# Arithmetic: O(1)\ndef clean_string(string):\n    new_string = \"\"\n    for char in string:\n        if char.isalpha() or char.isdigit():\n            new_string += char\n    return new_string\n\n\ndef main():\n    print(clean_string(\"The quick brown fox jumped over the lazy dog\"))\n    print(clean_string(\"Dear Alice, today is a good day to learn Python\"))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 48,
      "score": 8.0,
      "candidate": "def remove_everything_except_alphanumeric(string):\n    # Write your code here.\n    return re.sub(r'[^a-zA-Z0-9]', '', string)\n\nprint(remove_everything_except_alphanumeric(\"Hello, my name is ^^^^^Rick^^^^ and I'm a Developer.\"))"
    },
    {
      "rank": 49,
      "score": 8.0,
      "candidate": "def remove_everything_except_alphanumeric(string):\n    \"\"\"Returns the given string with everything except alphanumeric characters removed.\"\"\"\n    return \"\".join(character for character in string if character.isalnum())"
    },
    {
      "rank": 50,
      "score": 8.0,
      "candidate": "def clean_string(s):\n    return ''.join(c for c in s if c.isalnum())"
    },
    {
      "rank": 51,
      "score": 8.0,
      "candidate": "from re import sub\n\n\ndef remove_non_alphanumeric(string):\n    return sub('[^0-9a-zA-Z]+', '', string)\n\n\nif __name__ == '__main__':\n    test_string = 'I am a string with a few non-alphanumeric characters.'\n    print(remove_non_alphanumeric(test_string))"
    },
    {
      "rank": 52,
      "score": 8.0,
      "candidate": "def remove_special_characters(text):\n    result = \"\"\n    for char in text:\n        if char.isalnum():\n            result += char\n    return result\n\n\nif __name__ == '__main__':\n    print(remove_special_characters(\"I like 123 apples\"))"
    },
    {
      "rank": 53,
      "score": 8.0,
      "candidate": "def remove_everything_except_alphanumeric(s):\n    return \"\".join(c for c in s if c.isalnum())\n\n\ndef test_remove_everything_except_alphanumeric():\n    assert remove_everything_except_alphanumeric(\"a\") == \"a\"\n    assert remove_everything_except_alphanumeric(\"a1\") == \"a1\"\n    assert remove_everything_except_alphanumeric(\"a1b2\") == \"a1b2\"\n    assert remove_everything_except_alphanumeric(\"a-1b_2\") == \"a1b2\"\n    assert remove_everything_except_alphanumeric(\"a_1b-_2\") == \"a1b2\"\n    assert remove_everything_except_alphanumeric(\"a_1b-_2_\") == \"a1b2_\"\n    assert remove_everything_except_alphanumeric(\"a1b2c3\") == \"a1b2c3\"\n    assert remove_everything_except_alphanumeric(\"a1b2c3d4\") == \"a1b2c3d4\"\n    assert remove_everything_except_alphanumeric(\"a1b2c3d4e5\") == \"a1b2c3d4e5\"\n    assert remove_everything_except_alphanumeric(\"a1b2c3d4e5f6\") == \"a1b2c3d4e5f6\"\n    assert remove_everything_except_alphanumeric(\"a1b2c3d4e5f6g7\") == \"a1b2c3d4e5f6g7\""
    },
    {
      "rank": 54,
      "score": 8.0,
      "candidate": "import re\n\n\ndef remove_non_alphanumeric(string):\n    return re.sub(r\"[^a-zA-Z0-9]\", \"\", string)"
    },
    {
      "rank": 55,
      "score": 8.0,
      "candidate": "def remove_non_alpha(str):\n    new_string = ''\n    for i in str:\n        if i.isalnum():\n            new_string += i\n    return new_string"
    },
    {
      "rank": 56,
      "score": 8.0,
      "candidate": "from re import sub\n\n\ndef remove_non_alphanumeric(string):\n    return sub('[^a-zA-Z0-9]', '', string)\n\n\ndef main():\n    print(remove_non_alphanumeric(\"!@#$%^&*()_+\"))\n    print(remove_non_alphanumeric(\"My name is John\"))\n    print(remove_non_alphanumeric(\"This is very importent\"))\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 57,
      "score": 8.0,
      "candidate": "# Time Complexity: O(n)\n# Space Complexity: O(n)\ndef remove_non_alphanumeric(string):\n    new_string = \"\"\n    for char in string:\n        if char.isalnum():\n            new_string += char\n    return new_string\n\n\nif __name__ == \"__main__\":\n    string = \"!@#$%^&*()_+{}\"\n    print(remove_non_alphanumeric(string))"
    },
    {
      "rank": 58,
      "score": 8.0,
      "candidate": "def remove_non_alphanumeric(s):\n    \"\"\"\n    >>> remove_non_alphanumeric(\"this is a test123\")\n    'thisisatest123'\n    \"\"\"\n    return \"\".join(filter(str.isalnum, s))\n\n\ndef remove_non_alphanumeric_alt(s):\n    \"\"\"\n    >>> remove_non_alphanumeric_alt(\"this is a test123\")\n    'thisisatest123'\n    \"\"\"\n    return \"\".join(c for c in s if c.isalnum())\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 59,
      "score": 8.0,
      "candidate": "import re\n\n\ndef remove_non_alphanumeric(str1):\n    return re.sub(r\"[^a-zA-Z0-9]+\", \"\", str1)\n\n\ndef test_remove_non_alphanumeric():\n    \"\"\"Test for remove_non_alphanumeric function.\"\"\"\n    assert remove_non_alphanumeric(\"I like 1 2 bananas!\") == \"Ilike12bananas\"\n    assert remove_non_alphanumeric(\"!@#$%^&*()_+\") == \"\"\n    assert remove_non_alphanumeric(\"\") == \"\"\n    assert remove_non_alphanumeric(\"My name is John\") == \"My name is John\"\n    assert remove_non_alphanumeric(\"98412 9599\") == \"984129599\"\n    assert remove_non_alphanumeric(\"Mary had a little lamb\") == \"Maryhadalittlelamb\"\n    assert remove_non_alphanumeric(\"Never odd or even\") == \"Neveroddeven\"\n    assert remove_non_alphanumeric(\"The quick brown fox jumps\") == \"Thequickbrownfoxjumps\"\n    assert remove_non_alphanumeric(\"Jackdaws love my big sphinx of quartz\") == \"Jackdawslovemybigsphinoftquartz\""
    },
    {
      "rank": 60,
      "score": 8.0,
      "candidate": "def clean_string(s):\n    cleaned = ''\n    for char in s:\n        if char.isalnum():\n            cleaned += char\n    return cleaned\n\n\ndef test_function():\n    assert clean_string(u\"!@#$%^&*()_+{}:<>?-/''[]{}|\\`~\") == u''\n    assert clean_string(u'\"Fred\" \"Wilma\"') == u'Fred Wilma'\n    assert clean_string(u\"'now' 'is' 'the' 'time'\") == u'now is the time'\n    assert clean_string(u\"99 bottles of beer on the wall\") == u'99 bottles of beer on the wall'\n    assert clean_string(u\"I'm taking99 bottles of beer\") == u'Im taking99 bottles of beer'\n    assert clean_string(u'greek: \\u03b1\\u03b2\\u03ac') == u'greek: alpha beta ac'\n    assert clean_string(u'thx u: \\u2602') == u'thx u: smiley'"
    },
    {
      "rank": 61,
      "score": 8.0,
      "candidate": "def remove_non_alphanumeric(s):\n    return \"\".join(c for c in s if c.isalnum())\n\n\nprint(remove_non_alphanumeric(\"!@#$%^&*()_+=-`~[]{}|;':\\\",.<>?/\"))\nprint(remove_non_alphanumeric(\"My phone number is 415-555-4242.\"))\nprint(remove_non_alphanumeric(\"This is a string!\"))\nprint(remove_non_alphanumeric(\" \"))\nprint(remove_non_alphanumeric(\"\"))"
    },
    {
      "rank": 62,
      "score": 8.0,
      "candidate": "def alphanumeric(text):\n    \"\"\"\n    >>> alphanumeric(\"a/b*c+d@e=f_g!h#i$j%j&k'l*m-n/o+p:q;r<s.t>u(v)w{x}y~z\")\n    'abcdefghijklmnopqrstuvwxyz'\n    \"\"\"\n    result = \"\"\n    for char in text:\n        if char.isalnum():\n            result += char\n    return result\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 63,
      "score": 8.0,
      "candidate": "def remove_non_alphanumeric(string):\n    new_string = ''\n    for char in string:\n        if char.isalnum():\n            new_string += char\n    return new_string\n\n\nprint(remove_non_alphanumeric('!@#$%^&*()_+}{[]\\:\"|<>?,./'))"
    },
    {
      "rank": 64,
      "score": 8.0,
      "candidate": "def remove_non_alphanumeric(string):\n    return \"\".join(filter(lambda x: x.isalnum(), string))\n\n\nprint(remove_non_alphanumeric(\"!@#$%^&*()_+=-{}[]|\\/:;?><,.\"))"
    },
    {
      "rank": 65,
      "score": 8.0,
      "candidate": "def remove_non_alpha_chars(string):\n    \"\"\"\n    Return the string with all non-alphanumeric characters removed.\n    \"\"\"\n    new_string = \"\"\n    for char in string:\n        if char.isalnum():\n            new_string += char\n    return new_string\n\n\ndef test_remove_non_alpha_chars():\n    \"\"\"Test for remove_non_alpha_chars.\"\"\"\n    assert remove_non_alpha_chars(\"The best days are ahead.\") == \"Thebestdaysareahead\"\n    assert remove_non_alpha_chars(\"I love Python. It's the best.\") == \"IlovePython.Itsbest\"\n    assert remove_non_alpha_chars(\"I am a student.\") == \"Iamastudent\"\n    assert remove_non_alpha_chars(\"I am a student.\") == \"Iamastudent\"\n    assert remove_non_alpha_chars(\"I am a student.\") == \"Iamastudent\"\n    assert remove_non_alpha_chars(\"I am a student.\") == \"Iamastudent\""
    },
    {
      "rank": 66,
      "score": 8.0,
      "candidate": "import re\n\n\ndef remove_non_alphanumeric(string):\n    return re.sub(r\"\\W\", \"\", string)\n\n\ndef test_remove_non_alphanumeric():\n    assert remove_non_alphanumeric(\"This is a test!\") == \"Thisisatest\"\n    assert remove_non_alphanumeric(\"This is a test!\") != \"This is a test\""
    },
    {
      "rank": 67,
      "score": 8.0,
      "candidate": "def remove_non_alphanumeric(string: str) -> str:\n    \"\"\"Remove everything except alphanumeric characters from a string.\n\n    Args:\n        string (str): original string\n\n    Returns:\n        str: string with only alphanumeric characters\n    \"\"\"\n    return \"\".join(char for char in string if char.isalnum())"
    },
    {
      "rank": 68,
      "score": 8.0,
      "candidate": "def remove_non_alphanumeric(string):\n    \"\"\"\n    >>> remove_non_alphanumeric('123abc')\n    '123abc'\n    >>> remove_non_alphanumeric('$#abc1234')\n    'abc1234'\n    \"\"\"\n    return \"\".join(filter(lambda x: x.isalnum(), string))\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 69,
      "score": 8.0,
      "candidate": "def remove_non_alphanumeric(s):\n    return \"\".join(c for c in s if c.isalnum())\n\nprint(remove_non_alphanumeric(\"!@#$%^&*()_+=-`~[]{}|\\'\\\":;?/><,.\"))\nprint(remove_non_alphanumeric(\"My name is John\"))"
    },
    {
      "rank": 70,
      "score": 8.0,
      "candidate": "def remove_everything_but_alphanumeric(string):\n    return ''.join([ch for ch in string if ch.isalnum()])\n\n\nprint(remove_everything_but_alphanumeric('~asdf~fgh~jkl~'))\nprint(remove_everything_but_alphanumeric('\"asdf\"fgh\"jkl\"'))\nprint(remove_everything_but_alphanumeric('asdf fgh jkl'))"
    },
    {
      "rank": 71,
      "score": 8.0,
      "candidate": "def remove_non_alphanumeric(string):\n    \"\"\"\n    >>> remove_non_alphanumeric(\"\")\n    ''\n    >>> remove_non_alphanumeric(\"abc\")\n    'abc'\n    >>> remove_non_alphanumeric(\"abc123\")\n    'abc123'\n    >>> remove_non_alphanumeric(\"abc123#\")\n    'abc123'\n    \"\"\"\n    return \"\".join(filter(str.isalnum, string))\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 72,
      "score": 8.0,
      "candidate": "import re\n\n\ndef remove_non_alphanumeric(string):\n    return re.sub(r'[^a-zA-Z0-9]', '', string)\n\n\ndef test_remove_non_alphanumeric():\n    assert remove_non_alphanumeric(\"!@#$%^&*()_+=-`~[]{}|:;?/<>,.\") == \"\"\n    assert remove_non_alphanumeric(\"This is a test!\") == \"Thisisatest\"\n    assert remove_non_alphanumeric(\"This is a test!@#$%^&*()_+=-`~[]{}|:;?/<>,.\") == \"Thisisatest\"\n    assert remove_non_alphanumeric(\"This is a test!@#$%^&*()_+=-`~[]{}|:;?/<>,.\") == \"Thisisatest\"\n\n\nif __name__ == '__main__':\n    test_remove_non_alphanumeric()"
    },
    {
      "rank": 73,
      "score": 8.0,
      "candidate": "def remove_non_alphanum(s):\n    return ''.join([c for c in s if c.isalnum()])\n\nprint(remove_non_alphanum(\"!@#$%^&*()_+=-`~[]\\\\;',./{}|:\\\"<>?\"))"
    },
    {
      "rank": 74,
      "score": 8.0,
      "candidate": "def remove_non_alphanumeric(string):\n    \"\"\"Return a string with all non-alphanumeric characters removed.\"\"\"\n    return ''.join(c for c in string if c.isalnum())"
    },
    {
      "rank": 75,
      "score": 8.0,
      "candidate": "def remove_non_alphanumeric(s):\n    return ''.join(filter(lambda c: c.isalnum(), s))"
    },
    {
      "rank": 76,
      "score": 8.0,
      "candidate": "def alphanumeric(input_string):\n    \"\"\"\n    >>> alphanumeric(\"a2b3c4d5\")\n    'a2b3c4d5'\n    \"\"\"\n    return \"\".join(c for c in input_string if c.isalnum())\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 77,
      "score": 8.0,
      "candidate": "def remove_special_characters(string):\n    \"\"\"\n    >>> remove_special_characters(\"Hello, World! 123\")\n    'HelloWorld123'\n    \"\"\"\n    return \"\".join(filter(str.isalnum, string))\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 78,
      "score": 8.0,
      "candidate": "def remove_non_alphanumeric(string):\n    \"\"\"\n    >>> remove_non_alphanumeric(\"This is a string!\")\n    'This is a string'\n    \"\"\"\n    return \"\".join(filter(str.isalnum, string))\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 79,
      "score": 8.0,
      "candidate": "def remove_everything_except_alphanumeric(string):\n    return \"\".join(filter(str.isalnum, string))"
    },
    {
      "rank": 80,
      "score": 8.0,
      "candidate": "def remove_non_alphanumeric(string):\n    \"\"\"Remove non-alphanumeric characters from a string.\"\"\"\n    return \"\".join(c for c in string if c.isalnum())"
    },
    {
      "rank": 81,
      "score": 8.0,
      "candidate": "def remove_non_alphanumeric(s):\n    return \"\".join(filter(lambda c: c.isalnum(), s))\n\n\ndef test_remove_non_alphanumeric():\n    assert remove_non_alphanumeric(\"This is a test!\") == \"Thisisatest\"\n    assert remove_non_alphanumeric(\"This is a test!\") == \"Thisisatest\"\n    assert remove_non_alphanumeric(\"This is a test!\") == \"Thisisatest\"\n\n\nif __name__ == \"__main__\":\n    test_remove_non_alphanumeric()"
    },
    {
      "rank": 82,
      "score": 8.0,
      "candidate": "def remove_non_alphanumeric(s):\n    # return ''.join(ch for ch in s if ch.isalnum())\n    return ''.join(ch for ch in s if ch.isalpha() or ch.isdigit())\n\nprint(remove_non_alphanumeric('@#$%^&*()') == '')\nprint(remove_non_alphanumeric('a@#$%^&*()') == 'a')\nprint(remove_non_alphanumeric('A@#$%^&*()') == 'A')\nprint(remove_non_alphanumeric('Abc@#$%^&*()') == 'Abc')\nprint(remove_non_alphanumeric('a1b2c3') == 'a1b2c3')\nprint(remove_non_alphanumeric('a!b*c+d/e=f?g:h') == 'abcdefgh')\nprint(remove_non_alphanumeric('a!b*c+d/e=f?g:h&') == 'abcdefgh')\nprint(remove_non_alphanumeric('a!b*c+d/e=f?g:h&i') == 'abcdefghi')\nprint(remove_non_alphanumeric('a!b*c+d/e=f?g:h&i-') == 'abcdefghi')\nprint(remove_non_alphanumeric('a!b*c+d/e=f?g:h&i-j') == 'abcdefghij')\nprint(remove_non_alphanumeric('a!b*c+d/e=f?g:h&i-j-') == 'abcdefghij')\nprint(remove_non_alphanumeric('a!b*c+d/e=f?g:h&i-j-k') == 'abcdefghijk')\nprint(remove_non_alphanumeric('a!b*c+d/e=f?g:h&i-j-k&') == 'abcdefghijk')\nprint(remove_non_alphanumeric('a!b*c+d/e=f?g:h&i-j-"
    },
    {
      "rank": 83,
      "score": 8.0,
      "candidate": "def remove_non_alphanumeric(string):\n    return ''.join(filter(lambda c: c.isalnum(), string))\n\n\n# Tests\nprint(remove_non_alphanumeric(\"!@#$%^&*()_+=-`~[]{}|;':\\\",./<>?\"))\nprint(remove_non_alphanumeric(\"2+3=5 x 4\"))"
    },
    {
      "rank": 84,
      "score": 8.0,
      "candidate": "import re\n\n\ndef remove_non_alphanumeric(string):\n    return re.sub(r'[^a-zA-Z0-9]', '', string)\n\n\nif __name__ == '__main__':\n    print(remove_non_alphanumeric(\"HellO, wOrld! 123.\"))"
    },
    {
      "rank": 85,
      "score": 8.0,
      "candidate": "def remove_non_alphanumeric(s):\n    \"\"\"\n    :param s: str - String to clean\n    :return: str - String without non-alphanumeric characters\n    \"\"\"\n    return ''.join(filter(lambda c: c.isalnum(), s))\n\n\ndef main():\n    print(remove_non_alphanumeric(\"Lorem ipsum 123 sit/ama$\"))\n    print(remove_non_alphanumeric(\"\"))\n    print(remove_non_alphanumeric(\"Dolor sit amet..,,,;.\"))\n    print(remove_non_alphanumeric(\":.:\"))\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 86,
      "score": 8.0,
      "candidate": "def remove_non_alpha(s):\n    return \"\".join(c for c in s if c.isalnum())\n\n\ndef test_remove_non_alpha():\n    assert remove_non_alpha(\"\") == \"\"\n    assert remove_non_alpha(\"123\") == \"123\"\n    assert remove_non_alpha(\"abcd\") == \"abcd\"\n    assert remove_non_alpha(\"abcd123\") == \"abcd123\"\n    assert remove_non_alpha(\"abc.d123\") == \"abcd123\"\n    assert remove_non_alpha(\"abc.d123_\") == \"abcd123\"\n    assert remove_non_alpha(\"abc.d123_ \") == \"abcd123\"\n    assert remove_non_alpha(\"abc.d123_  \") == \"abcd123\"\n    assert remove_non_alpha(\"abc.d123_ 123\") == \"abcd123123\"\n    assert remove_non_alpha(\"abc.d123_ 123.\") == \"abcd123123\"\n    assert remove_non_alpha(\"abc.d123_ 123.abc\") == \"abcd123123abc\""
    },
    {
      "rank": 87,
      "score": 8.0,
      "candidate": "# alphanumeric characters are those between a-z (both cases), A-Z, 0-9\n\n# The function will be given a string as a parameter and will return a string.\n\n# Example:\n# Input:  \"123a456b789c\"\n# Output: \"123456789\"\n\ndef remove_non_alphanumeric(string):\n    # initialize a variable to store the result\n    result = \"\"\n    # loop over every character in the string\n    for char in string:\n        # if the character is an alphanumeric character\n        if char.isalnum():\n            # add the character to the result string\n            result += char\n    # return the result string\n    return result\n\n\n# test\nprint(remove_non_alphanumeric(\"123a456b789c\"))\nprint(remove_non_alphanumeric(\"123a456b789c#%\"))\nprint(remove_non_alphanumeric(\"123a456b789c#%654\"))\nprint(remove_non_alphanumeric(\"123a456b789c#%654564654646\"))\nprint(remove_non_alphanumeric(\"123a456b789c#%6545646546461234567890\"))\nprint(remove_non_alphanumeric(\"123a456b789c#%654564654646123456789012345678901234567890\"))\n\n# O(n) time and space, n is the length of the string"
    },
    {
      "rank": 88,
      "score": 8.0,
      "candidate": "def remove_non_alpha_numeric(string):\n    result = []\n    for character in string:\n        if character.isalpha() or character.isnumeric():\n            result.append(character)\n    return \"\".join(result)\n\n\nif __name__ == '__main__':\n    print(remove_non_alpha_numeric(\"!@#$%^&*()_+`~-={}|[]\\\\:\\\";'<>?,./a1b2c3d4e5f6g7h8i9j0k1l2m3n4o5p6q7r8s9t0u1v2w3x4y5z6\"))"
    },
    {
      "rank": 89,
      "score": 8.0,
      "candidate": "import re\n\n\ndef remove_non_alphanumeric(s):\n    return re.sub(r\"[^a-zA-Z0-9]\", \"\", s)\n\n\ndef test_remove_non_alphanumeric():\n    assert remove_non_alphanumeric(\"Hi!\") == \"Hi\"\n    assert remove_non_alphanumeric(\"Hello World!\") == \"HelloWorld\"\n    assert remove_non_alphanumeric(\"1234!\") == \"1234\"\n    assert remove_non_alphanumeric(\"!1234\") == \"1234\"\n    assert remove_non_alphanumeric(\"12!34\") == \"1234\"\n    assert remove_non_alphanumeric(\"12!34!\") == \"1234\"\n    assert remove_non_alphanumeric(\"!1234!\") == \"1234\"\n    assert remove_non_alphanumeric(\"!@#$%^&*()_+=-\") == \"\""
    },
    {
      "rank": 90,
      "score": 8.0,
      "candidate": "import re\n\n\ndef remove_non_alphanumeric(string):\n    return re.sub(r\"[^0-9a-zA-Z]+\", \"\", string)\n\n\nprint(remove_non_alphanumeric(\"!@#$%^&*()_+=-.?><:{}|\") == \"\")"
    },
    {
      "rank": 91,
      "score": 8.0,
      "candidate": "def remove_special_characters(text: str) -> str:\n    return \"\".join(ch for ch in text if ch.isalnum())"
    },
    {
      "rank": 92,
      "score": 8.0,
      "candidate": "import re\n\n\ndef remove_non_alphanumeric(string):\n    return re.sub(\"[^0-9a-zA-Z]+\", \"\", string)\n\n\nprint(remove_non_alphanumeric(\"!#$%^&*()_+=-0987654321\"))"
    },
    {
      "rank": 93,
      "score": 1.0,
      "candidate": "import re\n\n\ndef remove_special_characters(s: str) -> str:\n    \"\"\"\n    This solution uses regular expressions.\n\n    Time complexity: O(n).\n    Space complexity: O(1).\n    \"\"\"\n    return re.sub(r'[^a-zA-Z0-9]', '', s)\n\n\ndef remove_special_characters2(s: str) -> str:\n    \"\"\"\n    This solution is based on the fact that all alphanumeric characters are in\n    the range 48 <= x <= 57 or 65 <= x <= 90 or 97 <= x <= 122.\n\n    Time complexity: O(n).\n    Space complexity: O(n).\n    \"\"\"\n    return ''.join(\n        [ch for ch in s if 48 <= ord(ch) <= 57 or 65 <= ord(ch) <= 90 or 97 <= ord(ch) <= 122])\n\n\ndef main():\n    # print(remove_special_characters('123abcABC'))\n    # print(remove_special_characters('abcABC'))\n    # print(remove_special_characters('123abc ABC'))\n    # print(remove_special_characters('123abc  ABC'))\n    # print(remove_special_characters('123abc\\tABC'))\n    # print(remove_special_characters('123abc\\nABC'))\n    # print(remove_special_characters('123abc\\rABC'))\n    # print(remove_special_characters('123abc\\ABC'))\n    # print(remove_special_characters('123abc\\nABC'))\n    # print(remove_special_characters('123abc\\ABC'))\n    # print(remove_special_characters('123abc  ABC'))\n    # print(remove_special_characters('123abc\\tABC'))\n    # print(remove_special_characters('123abc\\nABC'))\n    # print(remove_special_characters('123abc\\rABC'))\n    # print(remove_special_char"
    },
    {
      "rank": 94,
      "score": 1.0,
      "candidate": "def remove_non_alphanumeric(string):\n    return ''.join([c for c in string if c.isalnum()])\n\n\ndef test_remove_non_alphanumeric():\n    assert remove_non_alphanumeric(\"my phone number is 123-456-7890\") == 'myphonenumberis1234567890'\n    assert remove_non_alphanumeric(\"my phone number is 123-456-7890\") == 'myphonenumberis1234567890'\n    assert remove_non_alphanumeric(\"   hello   world  \") == 'helloworld'\n    assert remove_non_alphanumeric(\"   hello   world  !!  \") == 'helloworld'\n    assert remove_non_alphanumeric(\"   hello   world  !!  \") == 'helloworld'\n\n\nif __name__ == '__main__':\n    test_remove_non_alphanumeric()"
    },
    {
      "rank": 95,
      "score": 1.0,
      "candidate": "from re import sub\n\n\ndef remove_special_characters(text):\n    \"\"\"Remove everything except alphanumeric characters from a string.\n\n    Args:\n        text (str): String with special characters\n\n    Returns:\n        str: String with only alphanumeric characters\n\n    Examples:\n        >>> remove_special_characters('Hello World! 123')\n        'HelloWorld123'\n    \"\"\"\n    return sub('[^a-zA-Z0-9]+', '', text)"
    },
    {
      "rank": 96,
      "score": 1.0,
      "candidate": "import re\n\n\ndef remove_non_alphanumeric(string):\n    return re.sub(r\"[^a-zA-Z0-9]+\", \"\", string)\n\n\ndef test_remove_non_alphanumeric():\n    assert remove_non_alphanumeric(\"Hello world\") == \"Helloworld\"\n    assert remove_non_alphanumeric(\"$#@%!^&\") == \"\"\n    assert remove_non_alphanumeric(\"!@#$%^&*()_+\") == \"\"\n    assert remove_non_alphanumeric(\"\") == \"\""
    },
    {
      "rank": 97,
      "score": 1.0,
      "candidate": "def remove_non_alphanumeric(string):\n    new_string = \"\"\n    for char in string:\n        if char.isalnum():\n            new_string += char\n    return new_string\n\n\ndef test_remove_non_alphanumeric():\n    assert remove_non_alphanumeric(\"123a456b789c0\") == \"1234567890\"\n    assert remove_non_alphanumeric(\"abcd!@#$%^&*()efghi\") == \"abcdefghi\"\n    assert remove_non_alphanumeric(\"123a456b789c0-=+_\") == \"1234567890\"\n    assert remove_non_alphanumeric(\"abcd!@#$%^&*()efghi-=+_\") == \"abcdefghi\"\n    assert remove_non_alphanumeric(\"\") == \"\"\n    assert remove_non_alphanumeric(\" \") == \"\"\n    assert remove_non_alphanumeric(\"abcd1234\") == \"abcd1234\"\n    assert remove_non_alphanumeric(\"1234abcd\") == \"1234abcd\"\n    assert remove_non_alphanumeric(\"1234567890\") == \"1234567890\""
    },
    {
      "rank": 98,
      "score": 1.0,
      "candidate": "def remove_non_alphanumeric(string):\n    \"\"\"\n    :param string: str - string to clean of non-alphanumeric characters\n    :return: str - string of alphanumeric characters, no punctuation of spaces\n    \"\"\"\n    return ''.join(char for char in string if char.isalnum())\n\n\n\"\"\"\nWrite a function to remove everything except numbers from a string.\n\"\"\"\n\ndef remove_non_numbers(string):\n    \"\"\"\n    :param string: str - string to clean of non-numeric characters\n    :return: str - string of numbers\n    \"\"\"\n    return ''.join(char for char in string if char.isnumeric())\n\n\n\"\"\"\nWrite a function to add 'ing' to the end of every word that ends with 'e'.\n\"\"\"\n\ndef el_change(string):\n    \"\"\"\n    :param string: str - string to add 'ing' to\n    :return: str - string with 'ing' added to every word ending with 'e'\n    \"\"\"\n    result = ''\n    for word in string.split():\n        if word.endswith('e'):\n            result += word + 'ing '\n        else:\n            result += word + ' '\n    return result[:-1]\n\n\n\"\"\"\nWrite a function that takes a string as input and reverse only the vowels of a word.\n\"\"\"\n\ndef reverse_vowels(string):\n    \"\"\"\n    :param string: str - string to reverse vowels\n    :return: str - string with vowels in reverse order\n    \"\"\"\n    vowels = 'aeiou'\n    vowels_reversed = ''.join(reversed(vowels))\n    result = ''\n    for char in string:\n        if char.lower() in vowels:\n            result += vowels_reversed[vowels.find(char.lower())]\n        else:\n            result += char\n    return result\n\n\n\"\"\"\nWrite a function that takes a string as input and return a new string with the first and last characters swapped.\n\"\"\"\n\ndef swap_ends(string):\n    \"\"\"\n    :param string: str - string to"
    },
    {
      "rank": 99,
      "score": 1.0,
      "candidate": "def remove_non_alphanumeric(string: str) -> str:\n    \"\"\"Removes all non-alphanumeric characters from a string.\n\n    Args:\n        string (str): String to remove non-alphanumeric characters from.\n\n    Examples:\n        >>> remove_non_alphanumeric(\"123abc!@#$%^&*()\")\n        '123abc'\n        >>> remove_non_alphanumeric(\"123!abc!@#$%^&*()\")\n        '123abc'\n        >>> remove_non_alphanumeric(\"!@#$%^&*()\")\n        ''\n\n    Returns:\n        str: String with all non-alphanumeric characters removed.\n    \"\"\"\n    return \"\".join(char for char in string if char.isalnum())\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 100,
      "score": 1.0,
      "candidate": "from re import sub\n\n\ndef remove_non_alphanumeric(text):\n    return sub(r'[^a-zA-Z0-9]', '', text)\n\n\ndef test_remove_non_alphanumeric():\n    assert remove_non_alphanumeric('aA1@$%4') == 'aA14'\n    assert remove_non_alphanumeric('@#4561') == '456'\n    assert remove_non_alphanumeric('@#$%$&$4561') == '456'\n    assert remove_non_alphanumeric('@#$%$&$4561aA1@$%4') == '4564aA14'"
    }
  ]
}