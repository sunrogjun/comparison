{
  "timestamp": "2025-09-15T01:48:52.669982",
  "method": "improved_llm_judge",
  "judge_model": "codellama/CodeLlama-7b-Python-hf",
  "target_model": "codellama-7b",
  "dataset": "mbpp",
  "problem_number": 463,
  "total_candidates": 100,
  "results": [
    {
      "rank": 1,
      "score": 10.0,
      "candidate": "def replace(string: str, replace_char: str, char: str) -> str:\n    \"\"\"Replace a character in a string.\n\n    Args:\n        string (str): The string to replace a character in.\n        replace_char (str): The character to replace.\n        char (str): The character to replace the replace_char with.\n\n    Returns:\n        str: The string with the replace_char replaced with char.\n    \"\"\"\n    return string.replace(replace_char, char)"
    },
    {
      "rank": 2,
      "score": 10.0,
      "candidate": "def replace_characters(string, char, replace):\n    \"\"\"Replace characters in a string.\n\n    Args:\n        string (str): Input string\n        char (str): Character to replace\n        replace (str): Character to replace with\n\n    Returns:\n        str: String with characters replaced\n    \"\"\"\n    return string.replace(char, replace)"
    },
    {
      "rank": 3,
      "score": 10.0,
      "candidate": "def replace(s, char, replacement):\n    if len(s) == 0:\n        return s\n    if s[0] == char:\n        return replacement + replace(s[1:], char, replacement)\n    return s[0] + replace(s[1:], char, replacement)\n\n\ndef test(s, char, replacement):\n    print('\"' + s + '\"')\n    print(replace(s, char, replacement))\n\n\ndef main():\n    test(\"abab\", \"a\", \"c\")\n    test(\"abab\", \"b\", \"c\")\n    test(\"abab\", \"c\", \"c\")\n    test(\"\", \"a\", \"c\")\n    test(\"a\", \"a\", \"c\")\n    test(\"b\", \"a\", \"c\")\n    test(\"ab\", \"a\", \"c\")\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 4,
      "score": 10.0,
      "candidate": "def replace_characters(string, replace_dict):\n    new_string = \"\"\n    for i in string:\n        if i in replace_dict:\n            new_string += replace_dict[i]\n        else:\n            new_string += i\n    return new_string\n\n\nif __name__ == '__main__':\n    string = input()\n    replace_dict = dict()\n    while True:\n        try:\n            key, value = input().split()\n            replace_dict[key] = value\n        except EOFError:\n            break\n    print(replace_characters(string, replace_dict))"
    },
    {
      "rank": 5,
      "score": 10.0,
      "candidate": "def replace(string: str, char: str, replacement: str) -> str:\n    \"\"\"Replace a character in a string.\n\n    Args:\n        string (str): The string to be replaced.\n        char (str): The character to be replaced.\n        replacement (str): The character to replace with.\n\n    Returns:\n        str: The string with the character replaced.\n    \"\"\"\n    return string.replace(char, replacement)"
    },
    {
      "rank": 6,
      "score": 10.0,
      "candidate": "def replace_characters(string, dictionary):\n    for key, value in dictionary.items():\n        string = string.replace(key, value)\n    return string\n\n\ndef main():\n    string = \"I like cats and dogs\"\n    dictionary = {\"cats\": \"dogs\", \"I\": \"you\", \"like\": \"hate\"}\n    print(replace_characters(string, dictionary))\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 7,
      "score": 10.0,
      "candidate": "def replace_characters(string, replace):\n    \"\"\"\n    >>> replace_characters('Hello World', 'e')\n    'Hllo World'\n    >>> replace_characters('Hello World', 'o')\n    'Hll Wrld'\n    >>> replace_characters('Hello World', ' ')\n    'Hello World'\n    \"\"\"\n    return \"\".join(\n        [\n            string[i] if string[i] != replace else \" \"\n            for i in range(len(string))\n        ]\n    )\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 8,
      "score": 10.0,
      "candidate": "def replace_characters(s: str, old: str, new: str):\n    \"\"\"\n    >>> replace_characters(\"hello\", \"e\", \"a\")\n    'hallo'\n\n    >>> replace_characters(\"hello\", \"x\", \"a\")\n    'hello'\n\n    >>> replace_characters(\"hello\", \"\", \"a\")\n    'hello'\n\n    >>> replace_characters(\"hello\", \"e\", \"\")\n    'hlo'\n\n    >>> replace_characters(\"hello\", \"x\", \"a\")\n    'hello'\n\n    >>> replace_characters(\"hello\", \"e\", \"a\")\n    'hallo'\n\n    >>> replace_characters(\"hello\", \"ll\", \"x\")\n    'heo'\n\n    >>> replace_characters(\"hello\", \"ll\", \"xx\")\n    'hexxo'\n\n    >>> replace_characters(\"hello\", \"llo\", \"x\")\n    'hex'\n\n    >>> replace_characters(\"hello\", \"hell\", \"x\")\n    'x'\n\n    >>> replace_characters(\"hello\", \"h\", \"a\")\n    'ello'\n    \"\"\"\n    # Find the index of the first occurrence of 'old' in 's'.\n    # If there isn't one, just return 's'.\n    old_index = s.find(old)\n    if old_index == -1:\n        return s\n\n    # Make a new string with the first occurrence of 'old' replaced with\n    # 'new'.\n    s = s[:old_index] + new + s[old_index + len(old) :]\n\n    # Recursively call the function on the substring starting after the\n    # first occurrence of 'old'.\n    return replace_characters(s, old, new)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 9,
      "score": 10.0,
      "candidate": "def replace_characters(text: str, characters: str, new_characters: str) -> str:\n    \"\"\"Replace characters in a string.\n\n    Args:\n        text (str): text to replace characters\n        characters (str): characters to replace\n        new_characters (str): new characters\n\n    Examples:\n        >>> replace_characters(\"hello world\", \"llo\", \"LLO\")\n        'heLLO weLLO'\n    \"\"\"\n    for character, new_character in zip(characters, new_characters):\n        text = text.replace(character, new_character)\n    return text\n\n\nif __name__ == \"__main__\":\n    print(replace_characters(\"hello world\", \"llo\", \"LLO\"))"
    },
    {
      "rank": 10,
      "score": 10.0,
      "candidate": "def replace_chars(string: str, chars_to_replace: dict) -> str:\n    \"\"\"\n    >>> replace_chars(\"abc\", {\"a\": \"A\"})\n    'Abc'\n    >>> replace_chars(\"abc\", {\"a\": \"A\", \"b\": \"B\", \"c\": \"C\"})\n    'ABC'\n    >>> replace_chars(\"abc\", {\"a\": \"A\", \"c\": \"C\", \"b\": \"B\"})\n    'ABC'\n    >>> replace_chars(\"abc\", {\"a\": \"A\", \"c\": \"C\", \"b\": \"B\", \"d\": \"D\"})\n    'ABC'\n    >>> replace_chars(\"abc\", {\"d\": \"D\", \"c\": \"C\", \"b\": \"B\", \"a\": \"A\"})\n    'ABC'\n    >>> replace_chars(\"abc\", {\"d\": \"D\", \"c\": \"C\", \"b\": \"B\", \"a\": \"A\", \"e\": \"E\"})\n    'ABC'\n    \"\"\"\n    return \"\".join(chars_to_replace.get(char, char) for char in string)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 11,
      "score": 10.0,
      "candidate": "from string import ascii_lowercase\n\n\ndef replace(string: str, char: str, new_char: str) -> str:\n    \"\"\"Replace characters in a string.\n\n    >>> replace('hello', 'l', 'r')\n    'herro'\n    >>> replace('hello', 'x', 'r')\n    'hello'\n    >>> replace('hello', 'x', '')\n    'hello'\n    >>> replace('hello', 'x', 'rr')\n    'hellerro'\n    >>> replace('hello', 'l', 'l')\n    'hello'\n    \"\"\"\n    if not string:\n        return string\n    if char not in string:\n        return string\n\n    for char_ in ascii_lowercase:\n        if char_ == char:\n            string = string.replace(char_, new_char)\n\n    return string\n\n\ndef replace_alt(string: str, char: str, new_char: str) -> str:\n    \"\"\"Replace characters in a string.\n\n    >>> replace_alt('hello', 'l', 'r')\n    'herro'\n    >>> replace_alt('hello', 'x', 'r')\n    'hello'\n    >>> replace_alt('hello', 'x', '')\n    'hello'\n    >>> replace_alt('hello', 'x', 'rr')\n    'hellerro'\n    >>> replace_alt('hello', 'l', 'l')\n    'hello'\n    \"\"\"\n    if not string:\n        return string\n    if char not in string:\n        return string\n\n    new_string = \"\"\n    for char_ in string:\n        if char_ == char:\n            new_string += new_char\n        else:\n            new_string += char_\n\n    return new_string\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 12,
      "score": 9.0,
      "candidate": "def replace(string, char, replacement):\n    \"\"\"\n    Replace all occurrences of char in string with replacement.\n\n    :param string: String to replace characters in.\n    :param char: Character to replace.\n    :param replacement: String to replace char with.\n    :return: String with all occurrences of char replaced with replacement.\n    \"\"\"\n    return string.replace(char, replacement)"
    },
    {
      "rank": 13,
      "score": 9.0,
      "candidate": "def replace_characters(string, characters, replacement):\n    for character in characters:\n        string = string.replace(character, replacement)\n    return string"
    },
    {
      "rank": 14,
      "score": 9.0,
      "candidate": "def replace_char(string, chars, new_char):\n    \"\"\"\n    >>> replace_char(\"Hello World\", \"l\", \"L\")\n    'HeLlo WorLd'\n    \"\"\"\n    for char in chars:\n        string = string.replace(char, new_char)\n    return string\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 15,
      "score": 9.0,
      "candidate": "def replace(string, character, new_character):\n    \"\"\"\n    >>> replace('apple', 'p', 'r')\n    'arpler'\n    >>> replace('apple', 'p', 'r')\n    'arpler'\n    >>> replace('apple', 'p', 'r')\n    'arpler'\n    \"\"\"\n    return string.replace(character, new_character)\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 16,
      "score": 8.0,
      "candidate": "def replace_chars(string, char_list, replacement):\n    for char in char_list:\n        string = string.replace(char, replacement)\n    return string\n\n\nprint(replace_chars(\"abcdefg\", [\"a\", \"e\"], \"z\"))"
    },
    {
      "rank": 17,
      "score": 8.0,
      "candidate": "def replace(string, char, char_to_replace):\n    return string.replace(char, char_to_replace)\n\ndef replace2(string, char, char_to_replace):\n    res = \"\"\n    for c in string:\n        if c == char:\n            res += char_to_replace\n        else:\n            res += c\n    return res\n\nprint(replace(\"abc\", \"a\", \"b\"))\nprint(replace2(\"abc\", \"a\", \"b\"))"
    },
    {
      "rank": 18,
      "score": 8.0,
      "candidate": "def replace_char(text, replace_dict):\n    for k in replace_dict:\n        text = text.replace(k, replace_dict[k])\n    return text\n\n\nif __name__ == '__main__':\n    assert replace_char('Aabbbcccc', {'a': 'b', 'b': 'c'}) == 'bbcccccc'"
    },
    {
      "rank": 19,
      "score": 8.0,
      "candidate": "def replace_characters(string, old_chars, new_chars):\n    \"\"\"\n    >>> replace_characters(\"hello\", \"l\", \"L\")\n    'heLLo'\n    >>> replace_characters(\"hello\", \"ll\", \"LL\")\n    'heLLo'\n    >>> replace_characters(\"hello\", \"ll\", \"LL\")\n    'heLLo'\n    >>> replace_characters(\"hello\", \"ll\", \"LL\")\n    'heLLo'\n    \"\"\"\n    for old_char, new_char in zip(old_chars, new_chars):\n        string = string.replace(old_char, new_char)\n    return string\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 20,
      "score": 8.0,
      "candidate": "def replace_char(string, char, new_char):\n    if len(string) == 0:\n        return string\n    if len(string) == 1:\n        return string\n    if len(string) == 2:\n        if string[0] == char:\n            return new_char + string[1]\n        elif string[1] == char:\n            return string[0] + new_char\n    else:\n        if string[0] == char:\n            return new_char + replace_char(string[1:], char, new_char)\n        elif string[len(string)-1] == char:\n            return replace_char(string[:len(string)-1], char, new_char) + new_char\n        else:\n            return replace_char(string[:len(string)-1], char, new_char) + string[len(string)-1]\n\nprint(replace_char(\"abc\", \"a\", \"x\"))\nprint(replace_char(\"abc\", \"b\", \"x\"))\nprint(replace_char(\"abc\", \"c\", \"x\"))\nprint(replace_char(\"abc\", \"d\", \"x\"))\nprint(replace_char(\"abc\", \"a\", \"\"))\nprint(replace_char(\"abc\", \"b\", \"\"))\nprint(replace_char(\"abc\", \"c\", \"\"))\nprint(replace_char(\"abc\", \"d\", \"\"))\nprint(replace_char(\"\", \"a\", \"x\"))\nprint(replace_char(\"\", \"b\", \"x\"))\nprint(replace_char(\"\", \"c\", \"x\"))\nprint(replace_char(\"\", \"d\", \"x\"))\nprint(replace_char(\"a\", \"a\", \"x\"))\nprint(replace_char(\"a\", \"b\", \"x\"))\nprint(replace_char(\"a\", \"c\", \"x\"))\nprint(replace_char(\"a\", \"d\", \"x\"))\nprint(replace_char(\"b\", \"a\", \"x\"))\nprint(replace_char(\"b\", \"b\", \"x\"))\nprint(replace_char(\"b\", \"c\", \"x\"))\nprint(replace_char(\"b\", \"d\", \"x\"))\nprint(replace_char(\"c\", \"a\", \""
    },
    {
      "rank": 21,
      "score": 8.0,
      "candidate": "def replace(string, chars, new):\n    for char in chars:\n        string = string.replace(char, new)\n    return string\n\n\nif __name__ == '__main__':\n    print(replace('Hello world!', 'lo', '0'))"
    },
    {
      "rank": 22,
      "score": 8.0,
      "candidate": "def replace_characters(str, char, replacement):\n    # Replace the characters in the string\n    for i in range(len(str)):\n        if str[i] == char:\n            str = str[:i] + replacement + str[i+1:]\n\n    return str\n\nif __name__ == '__main__':\n    str = \"hello\"\n    char = 'e'\n    replacement = 'E'\n    new_str = replace_characters(str, char, replacement)\n    print(new_str)"
    },
    {
      "rank": 23,
      "score": 8.0,
      "candidate": "def replace_chars(string, chars_dict):\n    for i in range(len(string)):\n        for key in chars_dict.keys():\n            if string[i] == key:\n                string = string[:i] + chars_dict[key] + string[i+1:]\n    return string\n\n\nif __name__ == '__main__':\n    print(replace_chars('abc', {'a': '1'}))"
    },
    {
      "rank": 24,
      "score": 8.0,
      "candidate": "def replace_characters(string, old_char, new_char):\n    return string.replace(old_char, new_char)\n\ndef main():\n    print(replace_characters(\"Python\", \"y\", \"Y\"))\n    print(replace_characters(\"Python\", \"Y\", \"y\"))\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 25,
      "score": 8.0,
      "candidate": "def replace(string, character, replacement):\n    \"\"\"\n    Replace a character in a string.\n\n    Time: O(n)\n    Space: O(1)\n    \"\"\"\n    i = 0\n    while i < len(string):\n        if string[i] == character:\n            string = string[:i] + replacement + string[i + 1:]\n            i += len(replacement)\n        i += 1\n    return string\n\n\nif __name__ == '__main__':\n    string = 'abcdef'\n    character = 'c'\n    replacement = 'C'\n    assert replace(string, character, replacement) == 'abCdef'"
    },
    {
      "rank": 26,
      "score": 8.0,
      "candidate": "def replace_char(string, char_to_replace, new_char):\n    \"\"\"\n    >>> replace_char(\"Hello\", \"l\", \"e\")\n    'Heeo'\n    \"\"\"\n    result = \"\"\n    for char in string:\n        if char == char_to_replace:\n            result += new_char\n        else:\n            result += char\n\n    return result\n\ndef replace_char_2(string, char_to_replace, new_char):\n    \"\"\"\n    >>> replace_char_2(\"Hello\", \"l\", \"e\")\n    'Heeo'\n    \"\"\"\n    result = \"\"\n    for char in string:\n        if char == char_to_replace:\n            result += new_char\n        else:\n            result += char\n\n    return result\n\ndef replace_char_3(string, char_to_replace, new_char):\n    \"\"\"\n    >>> replace_char_3(\"Hello\", \"l\", \"e\")\n    'Heeo'\n    \"\"\"\n    return string.replace(char_to_replace, new_char)\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 27,
      "score": 8.0,
      "candidate": "def replace(text, old, new):\n    return text.replace(old, new)\n\n\nif __name__ == '__main__':\n    print(replace('I love python', 'python', 'java'))"
    },
    {
      "rank": 28,
      "score": 8.0,
      "candidate": "def replace_characters(string, old_chars, new_char):\n    # Replace all characters in string\n    for old_char in old_chars:\n        string = string.replace(old_char, new_char)\n\n    return string\n\n\nif __name__ == '__main__':\n    # Test 1\n    print(replace_characters('hello', 'l', 'L'))\n\n    # Test 2\n    print(replace_characters('hello', ['e', 'o'], 'e'))"
    },
    {
      "rank": 29,
      "score": 8.0,
      "candidate": "def replace_characters(input_string, char_to_replace, replace_with):\n    # return input_string.replace(char_to_replace, replace_with)\n    return \"\".join(\n        replace_with if char == char_to_replace else char for char in input_string\n    )\n\n\nif __name__ == \"__main__\":\n    print(replace_characters(\"abacaba\", \"a\", \"x\"))"
    },
    {
      "rank": 30,
      "score": 8.0,
      "candidate": "def replace(string, old, new):\n    for i, char in enumerate(string):\n        if char == old:\n            string = string[:i] + new + string[i+1:]\n    return string\n\n\nif __name__ == '__main__':\n    print(replace(\"A man, a plan, a canal: Panama\", 'a', '*'))"
    },
    {
      "rank": 31,
      "score": 8.0,
      "candidate": "def replace_char(input_str, index, char):\n    return input_str[:index] + char + input_str[index + 1:]\n\n\nif __name__ == \"__main__\":\n    print(replace_char(\"hello\", 0, \"a\"))"
    },
    {
      "rank": 32,
      "score": 8.0,
      "candidate": "def replace_characters(string, to_replace, replacement):\n    \"\"\"\n    Takes a string, a list of characters to replace and a replacement character.\n    Replaces all characters in to_replace with replacement.\n    :param string: string to replace characters in\n    :param to_replace: list of characters to replace\n    :param replacement: replacement character\n    :return: new string with replaced characters\n    \"\"\"\n    if not isinstance(to_replace, list):\n        to_replace = [to_replace]\n    for character in to_replace:\n        string = string.replace(character, replacement)\n    return string\n\n\ndef main():\n    print(replace_characters(\"hello\", \"l\", \"x\"))\n    print(replace_characters(\"hello\", [\"l\", \"o\"], \"x\"))\n    print(replace_characters(\"hello\", [\"l\", \"o\"], \"x\"))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 33,
      "score": 8.0,
      "candidate": "def replace_characters(string, to_replace, replacement):\n    for i in range(len(string)):\n        if string[i] == to_replace:\n            string = string[:i] + replacement + string[i+1:]\n    return string\n\nstring = \"abcdefghijklmnopqrstuvwxyz\"\nto_replace = \"o\"\nreplacement = \"0\"\nprint(replace_characters(string, to_replace, replacement))"
    },
    {
      "rank": 34,
      "score": 8.0,
      "candidate": "def replace_chars(string, chars, replace):\n    # replace string characters with replace string\n    for c in chars:\n        string = string.replace(c, replace)\n    return string\n\n\ndef main():\n    print(replace_chars(\"Hello\", \"l\", \"L\"))\n    print(replace_chars(\"Hello\", \"l\", \"\"))\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 35,
      "score": 8.0,
      "candidate": "def replace(s, index, ch):\n    return s[:index] + ch + s[index+1:]\n\n\ndef test_replace():\n    assert replace('abc', 1, 'X') == 'aXc'"
    },
    {
      "rank": 36,
      "score": 8.0,
      "candidate": "def replace_chars(s, chars, new_chars):\n    \"\"\"\n    :param s: str - string to replace characters from\n    :param chars: str - characters to replace\n    :param new_chars: str - new characters to replace with\n    :return: str - string with characters replaced\n    \"\"\"\n    for char in chars:\n        s = s.replace(char, new_chars[chars.index(char)])\n    return s\n\n\ndef main():\n    print(replace_chars(\"Hello\", \"Ho\", \"21\"))\n    print(replace_chars(\"Yo Mama\", \"om\", \"**\"))\n    print(replace_chars(\"2 headed 3 headed 4 headed 1 headed\", \"3headed\", \"bop\"))\n    print(replace_chars(\"I love 3 headed monkeys!\", \"ove\", \"uv\"))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 37,
      "score": 8.0,
      "candidate": "def replace_chars(string, old_char, new_char):\n    return string.replace(old_char, new_char)\n\nprint(replace_chars(\"Hello world!\", \"l\", \"x\"))"
    },
    {
      "rank": 38,
      "score": 8.0,
      "candidate": "def replace_characters(s, replace):\n    \"\"\"\n    s: the string to be modified\n    replace: a list of tuples (original character, new character)\n    return: the modified string\n    \"\"\"\n    # Your code here\n    for i in replace:\n        s = s.replace(i[0], i[1])\n    return s\n\n\nprint(replace_characters(\"aabbbaaa\", [('a', 'c'), ('b', 'd')]))"
    },
    {
      "rank": 39,
      "score": 8.0,
      "candidate": "def replace_chars(s: str, replace: dict) -> str:\n    return \"\".join([replace.get(c, c) for c in s])\n\n\nif __name__ == \"__main__\":\n    assert replace_chars(\"hello world\", {\"e\": \"a\", \"l\": \"1\"}) == \"ha11o w1rld\""
    },
    {
      "rank": 40,
      "score": 8.0,
      "candidate": "def replace_characters(s, c, new_c):\n    for i in range(len(s)):\n        if s[i] == c:\n            s = s[:i] + new_c + s[i + 1 :]\n    return s\n\n\nif __name__ == \"__main__\":\n    print(replace_characters(\"apple\", \"p\", \"t\"))\n    print(replace_characters(\"apple\", \"q\", \"t\"))\n    print(replace_characters(\"apple\", \"a\", \"t\"))"
    },
    {
      "rank": 41,
      "score": 8.0,
      "candidate": "def replace_characters(string, replace_map):\n    for i in replace_map:\n        string = string.replace(i, replace_map[i])\n    return string\n\nprint(replace_characters(\"hello\", {\"e\":\"a\",\"l\":\"i\"}))"
    },
    {
      "rank": 42,
      "score": 8.0,
      "candidate": "def replace_chars(string, chars, new_chars):\n    for i in range(len(chars)):\n        string = string.replace(chars[i], new_chars[i])\n    return string\n\n\ndef test_replace_chars():\n    assert replace_chars(\"abc\", \"abc\", \"xyz\") == \"xyz\"\n    assert replace_chars(\"abbc\", \"abc\", \"xyz\") == \"xybbc\"\n    assert replace_chars(\"abbbc\", \"abc\", \"xyz\") == \"xyzbxbbc\""
    },
    {
      "rank": 43,
      "score": 8.0,
      "candidate": "def replace(str, char, replacement):\n    for i in range(0, len(str)):\n        if str[i] == char:\n            str[i] = replacement\n\n\ndef test(str, char, replacement, expected):\n    result = replace(str, char, replacement)\n    if result == expected:\n        print(\"Congratulations!\")\n    else:\n        print(\"Almost there...\")\n        print(f\"result = {result}\")\n        print(f\"expected = {expected}\")\n\n\nif __name__ == '__main__':\n    test(\"This is fun\", \"i\", \"o\", \"Thos is fun\")\n    test(\"This is fun\", \"o\", \"i\", \"This is fun\")\n    test(\"This is fun\", \"i\", \"o\", \"Thos is fun\")\n    test(\"This is fun\", \"o\", \"i\", \"This is fun\")\n    test(\"This is fun\", \"i\", \"o\", \"Thos is fun\")\n    test(\"This is fun\", \"o\", \"i\", \"This is fun\")"
    },
    {
      "rank": 44,
      "score": 8.0,
      "candidate": "def replace_characters(string, replace):\n    \"\"\"\n    Takes a string and a dictionary of characters to be replaced, returns a string with the characters replaced\n    \"\"\"\n    if len(replace) != len(string):\n        return \"Not possible\"\n    return ''.join([replace[char] if char in replace else char for char in string])\n\n\nif __name__ == '__main__':\n    print(replace_characters(\"abc\", {\"a\": \"1\", \"b\": \"2\", \"c\": \"3\"}))"
    },
    {
      "rank": 45,
      "score": 8.0,
      "candidate": "def replace_char(string, old_char, new_char):\n    \"\"\"Replace old_char with new_char.\n\n    :param string: String to replace characters in.\n    :type string: str\n    :param old_char: Character to replace.\n    :type old_char: str\n    :param new_char: Character to replace old_char with.\n    :type new_char: str\n    :return: String with all occurrences of old_char replaced with new_char.\n    :rtype: str\n    \"\"\"\n    if len(string) == 0:\n        raise ValueError(\"The string cannot be empty\")\n    if len(old_char) != 1:\n        raise ValueError(\"old_char must be a single character\")\n    if len(new_char) != 1:\n        raise ValueError(\"new_char must be a single character\")\n\n    return string.replace(old_char, new_char)"
    },
    {
      "rank": 46,
      "score": 8.0,
      "candidate": "def replace(string, character, replacement):\n    \"\"\"\n    >>> replace(\"abcdef\", \"c\", \"C\")\n    'abCdef'\n    \"\"\"\n    return string.replace(character, replacement)\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 47,
      "score": 8.0,
      "candidate": "def replace_char(string, char, replacement):\n    \"\"\"\n    >>> replace_char('apple', 'p', 'y')\n    'aypley'\n    \"\"\"\n    return string.replace(char, replacement)\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 48,
      "score": 8.0,
      "candidate": "def replace_chars(str, old, new):\n    \"\"\"\n    Replace all characters in the old string with the new character.\n    \"\"\"\n    return str.replace(old, new)"
    },
    {
      "rank": 49,
      "score": 8.0,
      "candidate": "def replace_char(str1, char, replacement):\n    for i in range(len(str1)):\n        if str1[i] == char:\n            str1 = str1[:i] + replacement + str1[i+1:]\n    return str1\n\n\nprint(replace_char(\"Hello World\", \"l\", \"L\"))\nprint(replace_char(\"Hello World\", \"l\", \"L\"))"
    },
    {
      "rank": 50,
      "score": 8.0,
      "candidate": "def replace(str, char, new_char):\n    \"\"\"\n    >>> replace(\"Hello\", \"l\", \"e\")\n    'Heeo'\n    \"\"\"\n    result = \"\"\n    for c in str:\n        if c == char:\n            result += new_char\n        else:\n            result += c\n    return result\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 51,
      "score": 8.0,
      "candidate": "def string_replace(s, char, replacement):\n    # Create a string of the character to replace\n    replace = char * len(s)\n\n    # Replace the character in the string with the replacement\n    return s.replace(replace, replacement)\n\nprint(string_replace(\"Hello World\", \"o\", \"0\"))"
    },
    {
      "rank": 52,
      "score": 8.0,
      "candidate": "def replace_characters(s, chars_map):\n    return \"\".join([chars_map.get(ch, ch) for ch in s])\n\n\nif __name__ == \"__main__\":\n    assert replace_characters(\"abcdef\", {\"a\": \"z\", \"c\": \"x\", \"e\": \"y\"}) == \"zxbyf\"\n    assert replace_characters(\"abcdef\", {\"a\": \"z\", \"c\": \"x\", \"e\": \"y\", \"b\": \"v\"}) == \"zxvyf\""
    },
    {
      "rank": 53,
      "score": 8.0,
      "candidate": "def replace_char(text: str, chars: dict) -> str:\n    \"\"\"\n    >>> replace_char(\"happy birthday\", {\"a\": \"e\", \"y\": \"i\", \"p\": \"o\"})\n    'heppe boistei'\n    \"\"\"\n    return \"\".join([chars.get(ch, ch) for ch in text])\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 54,
      "score": 8.0,
      "candidate": "def replace_char(string, chars_to_replace, replacement):\n    # return string.replace(chars_to_replace, replacement)\n    return \"\".join(replacement if char == chars_to_replace else char for char in string)\n\n\nif __name__ == \"__main__\":\n    print(replace_char(\"Hello\", \"l\", \"m\"))\n    print(replace_char(\"Hello\", \"o\", \"\"))\n    print(replace_char(\"Hello\", \"l\", \"\"))\n    print(replace_char(\"Hello\", \"z\", \"s\"))\n    print(replace_char(\"Hello\", \"H\", \"h\"))\n    print(replace_char(\"Hello\", \"H\", \"h\"))\n    print(replace_char(\"Hello\", \"\", \" \"))\n    print(replace_char(\"Hello\", \"ll\", \"l\"))\n    print(replace_char(\"Hello\", \"Hello\", \"Hi\"))\n    print(replace_char(\"Hello\", \"Hello\", \"\"))"
    },
    {
      "rank": 55,
      "score": 8.0,
      "candidate": "def replace_chars(string, replace_dict):\n    return \"\".join([replace_dict.get(c, c) for c in string])\n\n\nif __name__ == \"__main__\":\n    assert (\n        replace_chars(\"hello world\", {\"h\": \"H\", \"l\": \"L\", \"o\": \"O\"})\n        == \"HELLO WORLD\"\n    )\n    assert replace_chars(\"hello world\", {\"h\": \"H\", \"o\": \"O\"}) == \"HELL WORLD\"\n    assert replace_chars(\"hello world\", {\"H\": \"h\", \"L\": \"l\", \"O\": \"o\"}) == \"hello world\"\n    assert replace_chars(\"hello world\", {}) == \"hello world\"\n    assert replace_chars(\"\", {\"H\": \"h\", \"L\": \"l\", \"O\": \"o\"}) == \"\""
    },
    {
      "rank": 56,
      "score": 8.0,
      "candidate": "# Time Complexity: O(n)\n# Space Complexity: O(n)\n# n is the length of the string\ndef replace_characters(str1, char_to_replace, char_to_replace_with):\n    if str1 == None or len(str1) == 0:\n        return str1\n    \n    new_str = ''\n\n    for char in str1:\n        if char == char_to_replace:\n            new_str += char_to_replace_with\n        else:\n            new_str += char\n\n    return new_str\n\n\nprint(replace_characters('hello', 'l', 'L'))\nprint(replace_characters('hello', 'x', 'L'))\nprint(replace_characters('', 'x', 'L'))\nprint(replace_characters(None, 'x', 'L'))"
    },
    {
      "rank": 57,
      "score": 8.0,
      "candidate": "def replace_chars(s, replace_map):\n    result = []\n    for c in s:\n        if c in replace_map:\n            result.append(replace_map[c])\n        else:\n            result.append(c)\n    return ''.join(result)\n\n\nif __name__ == '__main__':\n    print(replace_chars('abcdefg', {'a': 'x', 'b': 'y', 'd': 'z'}))\n    print(replace_chars('abcdefg', {'a': 'x', 'b': 'y', 'c': 'z'}))"
    },
    {
      "rank": 58,
      "score": 8.0,
      "candidate": "def replace_char(string, char, new_char):\n    new_string = \"\"\n    for char in string:\n        if char == char:\n            new_string += new_char\n        else:\n            new_string += char\n    return new_string\n\n\nif __name__ == '__main__':\n    string = \"Hello\"\n    char = 'o'\n    new_char = 'a'\n    print(replace_char(string, char, new_char))"
    },
    {
      "rank": 59,
      "score": 8.0,
      "candidate": "import pytest\n\n\n@pytest.mark.parametrize(\"text,old,new,expected\", [\n    (\"a\", \"a\", \"b\", \"b\"),\n    (\"ab\", \"a\", \"b\", \"bb\"),\n    (\"aab\", \"a\", \"b\", \"bbb\"),\n    (\"aab\", \"a\", \"c\", \"cbb\"),\n    (\"aab\", \"b\", \"c\", \"aab\"),\n    (\"aab\", \"b\", \"a\", \"aaa\"),\n    (\"aab\", \"a\", \"\", \"ab\"),\n    (\"aab\", \"a\", \"aa\", \"aaab\"),\n    (\"aab\", \"a\", \"aaa\", \"aaab\"),\n    (\"aab\", \"a\", \"aaaa\", \"aaab\"),\n    (\"aab\", \"aa\", \"a\", \"ab\"),\n    (\"aab\", \"aa\", \"b\", \"bb\"),\n    (\"aab\", \"aa\", \"c\", \"cb\"),\n    (\"aab\", \"aa\", \"aa\", \"aaa\"),\n    (\"aab\", \"aa\", \"bb\", \"bbb\"),\n    (\"aab\", \"aa\", \"cc\", \"ccb\"),\n    (\"aab\", \"aa\", \"aaa\", \"aaab\"),\n    (\"aab\", \"aa\", \"aaaa\", \"aaab\"),\n    (\"aab\", \"aaa\", \"a\", \"ab\"),\n    (\"aab\", \"aaa\", \"b\", \"bb\"),\n    (\"aab\", \"aaa\", \"c\", \"cb\"),\n    (\"aab\", \"aaa\", \"aa\", \"ab\"),\n    (\"aab\", \"aaa\", \"bb\", \"bb\"),\n    (\"aab\", \"aaa\", \"cc\", \"cc\"),\n    (\"aab\", \"aaa\", \"aaa\", \"aaab\"),\n    (\"aab\", \"aaa\", \"aaaa\", \"aaab\"),\n    (\"aab\", \"aaa\", \"aaaaa\", \"aaab\"),\n    (\"aab\", \"aaaa\", \"a\", \"ab\"),\n    (\"aab\", \"aaaa\", \"b\", \"bb\"),\n    (\"aab\", \"aaaa\", \"c\", \"cb\"),\n    (\"aab\", \"aaaa\", \"aa"
    },
    {
      "rank": 60,
      "score": 8.0,
      "candidate": "def replace(string, chars_to_replace, char_to_replace_with):\n    \"\"\"Replace characters in a string.\n\n    Arguments:\n        string {str} -- string to replace\n        chars_to_replace {str} -- string of characters to replace\n        char_to_replace_with {str} -- string of characters to replace with\n\n    Returns:\n        str -- string with replaced characters\n    \"\"\"\n    return string.translate(str.maketrans(chars_to_replace, char_to_replace_with))"
    },
    {
      "rank": 61,
      "score": 8.0,
      "candidate": "def replace_characters(string: str, chars_to_replace: dict,\n                       replace_with: str = '_') -> str:\n    \"\"\"Replace characters in a string.\n\n    >>> replace_characters('aAaA', {'A': 'a', 'a': 'A'})\n    'A_A_A'\n\n    >>> replace_characters('aAaA', {'A': 'a', 'a': 'A'}, replace_with='.')\n    'A.A.A'\n\n    >>> replace_characters('aAaA', {'A': 'a', 'a': 'A'}, replace_with='')\n    'AAA'\n\n    >>> replace_characters('aAaA', {'A': 'a', 'a': 'A'}, replace_with='ab')\n    'abAabAab'\n\n    >>> replace_characters('aAaA', {'A': 'a', 'a': 'A'}, replace_with='')\n    'AAA'\n\n    >>> replace_characters('aAaA', {'A': 'a', 'a': 'A', 'b': 'c'})\n    'A_A_A'\n\n    >>> replace_characters('aAaA', {'A': 'a', 'a': 'A', 'b': 'c'}, replace_with='.')\n    'A.A.A'\n\n    >>> replace_characters('aAaA', {'A': 'a', 'a': 'A', 'b': 'c'}, replace_with='')\n    'AAA'\n\n    >>> replace_characters('aAaA', {'A': 'a', 'a': 'A', 'b': 'c'}, replace_with='ab')\n    'abAabAab'\n\n    >>> replace_characters('aAaA', {'A': 'a', 'a': 'A', 'b': 'c'}, replace_with='')\n    'AAA'\n\n    >>> replace_characters('aAaA', {'A': 'a', 'a': 'A', 'b': 'c'}, replace_with='ab')\n    'abAabAab'\n\n    >>> replace_characters"
    },
    {
      "rank": 62,
      "score": 8.0,
      "candidate": "def replace_char(input_string: str, replacement_map: dict) -> str:\n    \"\"\"\n    Replace characters in a string.\n    :param input_string: string to be replaced.\n    :param replacement_map: dictionary of characters to be replaced.\n    :return: string with replaced characters.\n    >>> replace_char(\"hello world\", {\"h\": \"e\", \"o\": \"a\"})\n    'ello warld'\n    \"\"\"\n    for key, value in replacement_map.items():\n        input_string = input_string.replace(key, value)\n    return input_string\n\n\nif __name__ == \"__main__\":\n    print(replace_char(\"hello world\", {\"h\": \"e\", \"o\": \"a\"}))"
    },
    {
      "rank": 63,
      "score": 8.0,
      "candidate": "def replace_characters(string, char_to_replace, char_to_use):\n    new_string = \"\"\n    for char in string:\n        if char == char_to_replace:\n            new_string += char_to_use\n        else:\n            new_string += char\n    return new_string\n\nprint(replace_characters(\"Hello, World!\", \"l\", \"L\"))"
    },
    {
      "rank": 64,
      "score": 8.0,
      "candidate": "def replace_chars(string, old_chars, new_chars):\n    new_string = ''\n    for char in string:\n        if char in old_chars:\n            new_string += new_chars[old_chars.find(char)]\n        else:\n            new_string += char\n    return new_string\n\nprint(replace_chars('This is a test', 'it', '11'))"
    },
    {
      "rank": 65,
      "score": 8.0,
      "candidate": "def replace_chars(string, replace_dict):\n    return \"\".join(replace_dict.get(char, char) for char in string)\n\n\nif __name__ == \"__main__\":\n    test_cases = [\n        (\"hello world\", {\"l\": \"r\", \"o\": \"g\"}),\n        (\"hello world\", {\"l\": \"r\"}),\n        (\"hello world\", {\"o\": \"g\"}),\n    ]\n    for test_string, replace_dict in test_cases:\n        print(replace_chars(test_string, replace_dict))"
    },
    {
      "rank": 66,
      "score": 8.0,
      "candidate": "from string import ascii_letters\n\ndef replace_chars(s, ch, r):\n    \"\"\"\n    s: str - string to be replaced\n    ch: str - character to be replaced\n    r: str - character to replace with\n    \"\"\"\n    return s.replace(ch, r)\n\ndef test_replace_chars():\n    \"\"\"\n    >>> test_replace_chars()\n    \"\"\"\n    assert replace_chars(\"Hello, World!\", \"l\", \"3\") == \"He33o, Wor33d!\"\n    assert replace_chars(\"Hello, World!\", \"o\", \"6\") == \"H3ll6, Wor6d!\"\n    assert replace_chars(\"Hello, World!\", \"o\", \"\") == \"Hell, World!\"\n    assert replace_chars(\"Hello, World!\", \"o\", \"6666\") == \"H6666, W6666rld!\"\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 67,
      "score": 8.0,
      "candidate": "def replace_chars(string, replacements):\n    for key, value in replacements.items():\n        string = string.replace(key, value)\n    return string\n\n\nif __name__ == '__main__':\n    string = 'I love Python'\n    replacements = {'love': 'hate', 'Python': 'Java'}\n    print(replace_chars(string, replacements))"
    },
    {
      "rank": 68,
      "score": 8.0,
      "candidate": "def replace_characters(text, replace_map):\n    \"\"\"\n    >>> replace_characters(\"hello world\", {\"h\": \"d\", \"o\": \"w\"})\n    'dwellow wdld'\n    >>> replace_characters(\"hello world\", {\"l\": \"r\"})\n    'herlo worrd'\n    \"\"\"\n    replace_map = {v: k for k, v in replace_map.items()}\n    return \"\".join([replace_map.get(c, c) for c in text])\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 69,
      "score": 8.0,
      "candidate": "def replace_chars(s, char_to_replace, char_replacement):\n    \"\"\"\n    >>> replace_chars(\"Hello World\", \"l\", \"L\")\n    'HeLlo WorLd'\n    \"\"\"\n    return s.replace(char_to_replace, char_replacement)\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 70,
      "score": 8.0,
      "candidate": "def replace(text: str, *, old: str, new: str) -> str:\n    \"\"\"Replace characters in a string.\n\n    Replace characters in a string.\n\n    Args:\n        text (str): input text\n        old (str): character to be replaced\n        new (str): character to be replaced with\n\n    Returns:\n        str: string with replaced characters\n    \"\"\"\n    return text.replace(old, new)"
    },
    {
      "rank": 71,
      "score": 8.0,
      "candidate": "# Time Complexity: O(n)\ndef replace_characters(str, chars):\n    for key, value in chars.items():\n        str = str.replace(key, value)\n    return str\n\n\nif __name__ == \"__main__\":\n    string = \"Python is a very powerful language.\"\n    chars = {\"i\": \"&\", \"a\": \"@\"}\n    print(replace_characters(string, chars))"
    },
    {
      "rank": 72,
      "score": 8.0,
      "candidate": "def replace_characters(str1, str2, str3):\n    # replace characters in str1 with characters in str2\n    str1 = str1.replace(str2, str3)\n    return str1\n\n\nif __name__ == '__main__':\n    print(replace_characters(\"hello\", \"ll\", \"yy\"))"
    },
    {
      "rank": 73,
      "score": 8.0,
      "candidate": "def replace_chars(string, replace_dict):\n    \"\"\"\n    >>> replace_chars(\"Hello, World\", {\"H\": \"J\"})\n    'Jello, World'\n    \"\"\"\n    return \"\".join([replace_dict.get(char, char) for char in string])\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 74,
      "score": 8.0,
      "candidate": "from string import ascii_lowercase\n\n\ndef replace_chars(s: str, replace: str, new: str) -> str:\n    \"\"\"Replace characters in a string.\n\n    Time Complexity: O(n)\n    Space Complexity: O(n)\n\n    :param s: string to be replaced\n    :param replace: characters to be replaced\n    :param new: new characters\n    :return: string with replaced characters\n    \"\"\"\n    if len(s) == 0:\n        return s\n\n    if len(replace) != len(new):\n        raise ValueError(\"replace and new should be the same length\")\n\n    replace_dict = {}\n    for i in range(len(replace)):\n        replace_dict[replace[i]] = new[i]\n\n    new_s = \"\"\n    for char in s:\n        if char in replace_dict:\n            new_s += replace_dict[char]\n        else:\n            new_s += char\n\n    return new_s\n\n\nif __name__ == \"__main__\":\n    assert replace_chars(\"hello\", \"lo\", \"00\") == \"he000\"\n    assert replace_chars(\"hello\", \"e\", \"\") == \"hll0\"\n    assert replace_chars(\"hello\", \"l\", \"l\") == \"hello\"\n    assert replace_chars(\"hello\", \"l\", \"0\") == \"he000\"\n    assert replace_chars(\"hello\", \"l\", \"ll\") == \"hell0\"\n    assert replace_chars(\"hello\", \"h\", \"0\") == \"0ello\"\n    assert replace_chars(\"hello\", \"o\", \"0\") == \"hell0\"\n    assert replace_chars(\"hello\", \"0\", \"0\") == \"hello\"\n    assert replace_chars(\"hello\", \"0\", \"\") == \"hello\"\n    assert replace_chars(\"hello\", \"0\", \"00\") == \"hello\"\n    assert replace_chars(\"hello\", \"0\", \"000\") == \"hello\"\n    assert replace_chars(\"\", \"0\", \"000\") == \"\"\n    assert replace_chars(\"\", \"\", \"\") == \"\""
    },
    {
      "rank": 75,
      "score": 8.0,
      "candidate": "def replace_char(string, position, character):\n    \"\"\"\n    >>> replace_char(\"abc\", 0, \"d\")\n    'dbc'\n    \"\"\"\n    return string[:position] + character + string[position + 1:]\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 76,
      "score": 8.0,
      "candidate": "def replace(string, old, new):\n    # return string.replace(old, new)\n    return \"\".join(new if c == old else c for c in string)\n\nif __name__ == \"__main__\":\n    print(replace(\"Hello, world\", \"o\", \"0\"))"
    },
    {
      "rank": 77,
      "score": 8.0,
      "candidate": "def replace_character(string, char, new_char):\n    \"\"\"\n    Replace a character in a string with another character.\n\n    :param string: str\n    :param char: str\n    :param new_char: str\n    :return: str\n    \"\"\"\n    return string.replace(char, new_char)"
    },
    {
      "rank": 78,
      "score": 8.0,
      "candidate": "def string_replace(s, a, b):\n    return s.replace(a, b)\n\nprint(string_replace(\"I love python\", \" \", \"_\"))"
    },
    {
      "rank": 79,
      "score": 1.0,
      "candidate": "def replace_characters(input_string, old_char, new_char):\n    for i in range(len(input_string)):\n        if input_string[i] == old_char:\n            input_string = input_string[:i] + new_char + input_string[i + 1:]\n    return input_string\n\nprint(replace_characters(\"hello\", \"o\", \"u\"))\nprint(replace_characters(\"hello\", \"e\", \"u\"))"
    },
    {
      "rank": 80,
      "score": 1.0,
      "candidate": "from string import ascii_lowercase, ascii_uppercase\n\n\ndef replace_characters(input_str: str, replace_dict: dict) -> str:\n    \"\"\"\n    >>> replace_characters('aBc', {'a': 'd', 'b': 'e', 'c': 'f'})\n    'def'\n    \"\"\"\n    output_str = \"\"\n\n    for char in input_str:\n        output_str += replace_dict.get(char, char)\n\n    return output_str\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 81,
      "score": 1.0,
      "candidate": "def replace_characters(s: str, replace: dict) -> str:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(n)\n    \"\"\"\n    if not s:\n        return s\n\n    s = list(s)\n\n    for i, char in enumerate(s):\n        if char in replace:\n            s[i] = replace[char]\n\n    return \"\".join(s)\n\n\nif __name__ == \"__main__\":\n    s = \"hello world\"\n    print(replace_characters(s, {\"l\": \"X\", \"o\": \"Y\"}))\n\n    s = \"aabbcceffg\"\n    print(replace_characters(s, {\"a\": \"X\", \"b\": \"Y\", \"c\": \"Z\"}))\n\n    s = \"aabbcc\"\n    print(replace_characters(s, {\"a\": \"X\", \"b\": \"Y\", \"c\": \"Z\"}))\n\n    s = \"aabbcc\"\n    print(replace_characters(s, {\"a\": \"X\", \"b\": \"Y\", \"c\": \"X\"}))"
    },
    {
      "rank": 82,
      "score": 1.0,
      "candidate": "# Time Complexity: O(n), Space Complexity: O(1)\ndef replace_chars(s, chars_to_replace, new_char):\n    for i in range(len(s)):\n        if s[i] in chars_to_replace:\n            s = s[:i] + new_char + s[i + 1:]\n    return s\n\n\n# Time Complexity: O(n), Space Complexity: O(n)\ndef replace_chars2(s, chars_to_replace, new_char):\n    for c in chars_to_replace:\n        s = s.replace(c, new_char)\n    return s\n\n\nif __name__ == '__main__':\n    s = \"aabbaa\"\n    print(replace_chars(s, \"ab\", \"1\"))\n    print(replace_chars2(s, \"ab\", \"1\"))"
    },
    {
      "rank": 83,
      "score": 1.0,
      "candidate": "def replace_characters(str, char, replace):\n    # TODO: Write your code here\n    return str.replace(char, replace)\n\nprint(replace_characters(\"hello\", \"l\", \"r\"))"
    },
    {
      "rank": 84,
      "score": 1.0,
      "candidate": "def replace_char(str_in, char_to_replace, new_char):\n    return str_in.replace(char_to_replace, new_char)\n\n\ndef test_function():\n    assert replace_char(\"Hello World!\", \"l\", \"X\") == \"HeXllX WXrld!\", \"Wrong output.\"\n    assert replace_char(\"Hello World!\", \"o\", \"X\") == \"HXllX WXrld!\", \"Wrong output.\"\n    assert replace_char(\"Hello World!\", \"o\", \"\") == \"HXllWXrld!\", \"Wrong output.\"\n    assert replace_char(\"Hello World!\", \"o\", \"0\") == \"H0llW0rld!\", \"Wrong output.\"\n\n\nif __name__ == '__main__':\n    test_function()"
    },
    {
      "rank": 85,
      "score": 1.0,
      "candidate": "def replace_characters(string, replace_map):\n    # Write your code here.\n    for key in replace_map:\n        string = string.replace(key, replace_map[key])\n    return string\n\nif __name__ == '__main__':\n    print(replace_characters('Hello World', {'H': 'J', 'W': 'A'}))"
    },
    {
      "rank": 86,
      "score": 1.0,
      "candidate": "def replace_characters(input_string, replace_dict):\n    for key, value in replace_dict.items():\n        input_string = input_string.replace(key, value)\n    return input_string\n\n\ndef test_replace_characters():\n    \"\"\"Test for replace_characters function.\"\"\"\n    assert replace_characters(\"Hello\", {\"H\": \"h\"}) == \"ello\"\n    assert replace_characters(\"Hello\", {\"o\": \"a\"}) == \"Hella\"\n    assert replace_characters(\"Hello\", {\"H\": \"h\", \"o\": \"a\"}) == \"Hella\"\n    assert replace_characters(\"Hello\", {\"H\": \"h\", \"o\": \"a\", \"l\": \"b\"}) == \"Hebba\"\n    assert replace_characters(\"Hello\", {\"H\": \"h\", \"o\": \"a\", \"l\": \"b\", \"e\": \"c\"}) == \"Habc\"\n    assert replace_characters(\"Hello\", {\"H\": \"h\", \"o\": \"a\", \"l\": \"b\", \"e\": \"c\", \"l\": \"d\"}) == \"Habbd\""
    },
    {
      "rank": 87,
      "score": 1.0,
      "candidate": "def replace_characters(text, replace_dict):\n    for k, v in replace_dict.items():\n        text = text.replace(k, v)\n    return text\n\n\ndef test_replace_characters():\n    assert replace_characters(\n        \"Hello World\", {\"H\": \"M\", \"e\": \"a\", \"l\": \"b\"}) == \"Mblllo World\"\n    assert replace_characters(\n        \"Hello World\", {\"H\": \"M\", \"e\": \"a\", \"l\": \"b\", \"o\": \"\"}) == \"Mblll Wrld\"\n    assert replace_characters(\n        \"Hello World\", {\"H\": \"M\", \"e\": \"a\", \"l\": \"b\", \"o\": \"\", \"r\": \"\"}) == \"Mblll Wld\"\n    assert replace_characters(\n        \"Hello World\", {\"H\": \"M\", \"e\": \"a\", \"l\": \"b\", \"o\": \"\", \"r\": \"\", \"W\": \"\"}) == \"Mblllld\"\n\n\nif __name__ == '__main__':\n    test_replace_characters()"
    },
    {
      "rank": 88,
      "score": 1.0,
      "candidate": "def replace_characters(text, old, new):\n    for char in text:\n        if char == old:\n            text = text.replace(old, new)\n    return text\n\n\ndef test_function(test_case):\n    text = test_case[0]\n    old = test_case[1]\n    new = test_case[2]\n    solution = test_case[3]\n    output = replace_characters(text, old, new)\n    if output == solution:\n        print(\"Pass\")\n    else:\n        print(\"Fail\")\n\ntext = \"This website is for losers LOL!\"\nold = \"L\"\nnew = \"M\"\nsolution = \"This website is for moosers MOM!\"\ntest_case = [text, old, new, solution]\ntest_function(test_case)\n\ntext = \"CodeWars\"\nold = \"W\"\nnew = \"X\"\nsolution = \"CodeXars\"\ntest_case = [text, old, new, solution]\ntest_function(test_case)\n\ntext = \"If you're a player, you're a player no matter what.\"\nold = \"player\"\nnew = \"baby\"\nsolution = \"If you're a baby, you're a baby no matter what.\"\ntest_case = [text, old, new, solution]\ntest_function(test_case)\n\ntext = \"The quick brown fox jumps over the lazy dog.\"\nold = \"o\"\nnew = \"0\"\nsolution = \"Th3 qu1ck br0wn f0x jumps 0ver th3 l4z1 d0g.\"\ntest_case = [text, old, new, solution]\ntest_function(test_case)\n\ntext = \"The quick brown fox jumps over the lazy dog.\"\nold = \"0\"\nnew = \"o\"\nsolution = \"The quick brown fox jumps over the lazy dog.\"\ntest_case = [text, old, new, solution]\ntest_function(test_case)"
    },
    {
      "rank": 89,
      "score": 1.0,
      "candidate": "def replace_char(string, char, new_char):\n    # Replace all characters in a string with another character.\n    # Return the new string.\n    for i in range(len(string)):\n        if string[i] == char:\n            string = string[:i] + new_char + string[i+1:]\n    return string\n\n\n# print(replace_char(\"hello\", \"l\", \"x\"))\n\n\"\"\"\nWrite a function to reverse a string.\n\"\"\"\n\ndef reverse_string(string):\n    # Reverse a string.\n    # Return the new string.\n    string = string[::-1]\n    return string\n\n\n# print(reverse_string(\"hello\"))\n\n\"\"\"\nWrite a function to remove duplicate characters from a string.\n\"\"\"\n\ndef remove_duplicate(string):\n    # Remove duplicate characters from a string.\n    # Return the new string.\n    new_string = \"\"\n    for i in range(len(string)):\n        if string[i] not in new_string:\n            new_string += string[i]\n    return new_string\n\n\n# print(remove_duplicate(\"hello\"))\n\n\"\"\"\nWrite a function to remove all spaces from a string.\n\"\"\"\n\ndef remove_spaces(string):\n    # Remove all spaces from a string.\n    # Return the new string.\n    new_string = \"\"\n    for i in range(len(string)):\n        if string[i] != \" \":\n            new_string += string[i]\n    return new_string\n\n\n# print(remove_spaces(\"hello world\"))\n\n\"\"\"\nWrite a function to check if a string contains only letters and spaces.\n\"\"\"\n\ndef letters_and_spaces(string):\n    # Check if a string contains only letters and spaces.\n    # Return True or False.\n    for i in range(len(string)):\n        if not string[i].isalpha() and string[i] != \" \":\n            return False\n    return True\n\n\n# print(letters_and_spaces(\"hello world\"))\n# print(letters_and_spaces(\"hello1 world\"))\n\n\"\"\"\nWrite a function to check if a string contains all"
    },
    {
      "rank": 90,
      "score": 1.0,
      "candidate": "from string import ascii_lowercase\n\n\ndef replace_characters(text: str, old: str, new: str) -> str:\n    \"\"\"\n    Replace characters in a string.\n\n    >>> replace_characters('hello', 'e', 'a')\n    'hallo'\n    \"\"\"\n    return text.replace(old, new)\n\n\ndef replace_characters_better(text: str, old: str, new: str) -> str:\n    \"\"\"\n    Replace characters in a string.\n\n    >>> replace_characters('hello', 'e', 'a')\n    'hallo'\n    \"\"\"\n    for char in old:\n        text = text.replace(char, new)\n    return text\n\n\ndef replace_characters_best(text: str, old: str, new: str) -> str:\n    \"\"\"\n    Replace characters in a string.\n\n    >>> replace_characters('hello', 'e', 'a')\n    'hallo'\n    \"\"\"\n    table = str.maketrans(old, new)\n    return text.translate(table)\n\n\ndef replace_characters_best_2(text: str, old: str, new: str) -> str:\n    \"\"\"\n    Replace characters in a string.\n\n    >>> replace_characters('hello', 'e', 'a')\n    'hallo'\n    \"\"\"\n    table = str.maketrans(ascii_lowercase, new * len(old))\n    return text.translate(table)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 91,
      "score": 1.0,
      "candidate": "from unittest import TestCase\n\n\ndef replace_characters(s, start, end, character):\n    return s[:start] + character * (end - start) + s[end:]\n\n\nclass TestReplacingCharacters(TestCase):\n    def test_replace_characters(self):\n        assert replace_characters(\"abc\", 1, 3, \"x\") == \"axx\""
    },
    {
      "rank": 92,
      "score": 1.0,
      "candidate": "def replace_characters(string, replace_dict):\n    for key, value in replace_dict.items():\n        string = string.replace(key, value)\n    return string\n\n\nif __name__ == '__main__':\n    assert replace_characters('Hello World', {'H': 'h', 'e': 'E', 'o': 'O'}) == 'hEllO WOrld'\n    assert replace_characters('Hello World', {'H': 'h', 'e': 'E', 'l': 'L', 'o': 'O'}) == 'hEllO WOrld'"
    },
    {
      "rank": 93,
      "score": 1.0,
      "candidate": "import unittest\n\n\ndef replace(string, char, replacement):\n    return string.replace(char, replacement)\n\n\nclass TestRound(unittest.TestCase):\n    def test_round(self):\n        self.assertEqual(replace(\"Hello World\", \"l\", \"L\"), \"HeLlo WorLd\")\n\n\nif __name__ == \"__main__\":\n    unittest.main()"
    },
    {
      "rank": 94,
      "score": 1.0,
      "candidate": "def replace_characters(string, char, replace_char):\n    # return string.replace(char, replace_char)\n    return \"\".join(replace_char if c == char else c for c in string)\n\n\nif __name__ == \"__main__\":\n    print(replace_characters(\"hello world\", \"l\", \"L\"))"
    },
    {
      "rank": 95,
      "score": 1.0,
      "candidate": "def replace(string, char, new_char):\n    return string.replace(char, new_char)\n\n\"\"\"\nWrite a function to remove duplicate characters from a string.\n\"\"\"\n\ndef remove_duplicates(string):\n    return \"\".join(set(string))\n\n\"\"\"\nWrite a function to remove duplicate words from a string.\n\"\"\"\n\ndef remove_duplicate_words(string):\n    return \" \".join(set(string.split()))\n\n\"\"\"\nWrite a function to count the number of times a character appears in a string.\n\"\"\"\n\ndef count_chars(string, char):\n    return string.count(char)\n\n\"\"\"\nWrite a function to reverse a string.\n\"\"\"\n\ndef reverse(string):\n    return string[::-1]\n\n\"\"\"\nWrite a function to remove whitespaces from a string.\n\"\"\"\n\ndef remove_whitespaces(string):\n    return string.replace(\" \", \"\")\n\n\"\"\"\nWrite a function to remove all characters after the first occurrence of a given character.\n\"\"\"\n\ndef remove_after(string, char):\n    return string.split(char)[0]\n\n\"\"\"\nWrite a function to check if a string is a palindrome.\n\"\"\"\n\ndef is_palindrome(string):\n    return string == reverse(string)\n\n\"\"\"\nWrite a function to check if a string contains all unique characters.\n\"\"\"\n\ndef is_unique(string):\n    return len(string) == len(set(string))\n\n\"\"\"\nWrite a function to check if a string contains only letters and spaces.\n\"\"\"\n\ndef contains_only_letters_and_spaces(string):\n    for char in string:\n        if not char.isalpha() and char != \" \":\n            return False\n    return True\n\n\"\"\"\nWrite a function to count the number of vowels in a string.\n\"\"\"\n\ndef count_vowels(string):\n    vowels = 0\n    for char in string:\n        if char in \"aeiou\":\n            vowels += 1\n    return vowels\n\n\"\"\"\nWrite a function to count the number of conson"
    },
    {
      "rank": 96,
      "score": 1.0,
      "candidate": "def replace_characters(str, char_to_replace, new_char):\n    return str.replace(char_to_replace, new_char)\n\n\ndef main():\n    str = \"Hello World\"\n    char_to_replace = \"l\"\n    new_char = \"x\"\n    print(\"Original string:\", str)\n    print(\"Characters to replace:\", char_to_replace)\n    print(\"New characters:\", new_char)\n    result = replace_characters(str, char_to_replace, new_char)\n    print(\"After replacement:\", result)\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 97,
      "score": 1.0,
      "candidate": "def replace_characters(text: str, characters: str, new_characters: str) -> str:\n    \"\"\"\n    This function replaces characters in a string with other characters.\n\n    >>> replace_characters(\"abcd\", \"ab\", \"12\")\n    '12cd'\n    >>> replace_characters(\"abcd\", \"xy\", \"12\")\n    'abcd'\n    >>> replace_characters(\"abcd\", \"a\", \"1\")\n    '1bcd'\n    >>> replace_characters(\"abcd\", \"a\", \"\")\n    'bcd'\n    >>> replace_characters(\"abcd\", \"\", \"123\")\n    'abcd'\n    >>> replace_characters(\"abcd\", \"abc\", \"123\")\n    '123d'\n    \"\"\"\n    return text.replace(characters, new_characters)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 98,
      "score": 1.0,
      "candidate": "def replace_characters(input_string: str, characters: dict) -> str:\n    \"\"\"\n    >>> replace_characters(\"hello\", {\"e\": \"a\"})\n    'hallo'\n\n    >>> replace_characters(\"hello\", {\"l\": \"i\"})\n    'hellio'\n\n    >>> replace_characters(\"hello\", {\"o\": \"oo\"})\n    'hellow'\n\n    >>> replace_characters(\"hello\", {\"h\": \"i\"})\n    'ello'\n    \"\"\"\n    return \"\".join([characters.get(char, char) for char in input_string])\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 99,
      "score": 1.0,
      "candidate": "def replace_characters(string, char_list, replacement_char):\n    \"\"\"\n    Replace characters in a string.\n\n    Args:\n       string(str): String to replace characters in.\n       char_list(str): List of characters to be replaced.\n       replacement_char(str): Replacement character.\n\n    Returns:\n       str: The replaced string.\n    \"\"\"\n    # replace_chars = ''\n    # for char in string:\n    #     if char in char_list:\n    #         replace_chars += replacement_char\n    #     else:\n    #         replace_chars += char\n    # return replace_chars\n    replace_chars = ''\n    for char in string:\n        if char in char_list:\n            replace_chars += replacement_char\n        else:\n            replace_chars += char\n    return replace_chars\n\n\ndef test_function(test_case):\n    string = test_case[0]\n    char_list = test_case[1]\n    replacement_char = test_case[2]\n    solution = test_case[3]\n    output = replace_characters(string, char_list, replacement_char)\n    if output == solution:\n        print(\"Pass\")\n    else:\n        print(\"Fail\")\n\nstring = 'This site uses cookies.'\nchar_list = ['T', 's', 'i']\nreplacement_char = '*'\nsolution = 'Th** s**e*e*s* *e* *ck*s*'\ntest_case = [string, char_list, replacement_char, solution]\ntest_function(test_case)\n\nstring = 'We are never too old to learn.'\nchar_list = ['s', 'a', 'i', 'e']\nreplacement_char = '*'\nsolution = 'W* *r* *vr* *t* ** * * * * * * * *n* * *l*rn*ng*.'\ntest_case = [string, char_list, replacement_char, solution]\ntest_function(test_case)\n\nstring = 'Let us try to write string replacement code in python.'\nchar_list ="
    },
    {
      "rank": 100,
      "score": 1.0,
      "candidate": "def replace(string, char, replacement):\n    return string.replace(char, replacement)\n\n\nif __name__ == \"__main__\":\n    print(replace(\"apple\", \"p\", \"b\"))"
    }
  ]
}