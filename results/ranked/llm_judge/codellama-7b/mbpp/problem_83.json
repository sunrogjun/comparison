{
  "timestamp": "2025-09-14T22:55:38.715666",
  "method": "improved_llm_judge",
  "judge_model": "codellama/CodeLlama-7b-Python-hf",
  "target_model": "codellama-7b",
  "dataset": "mbpp",
  "problem_number": 83,
  "total_candidates": 100,
  "results": [
    {
      "rank": 1,
      "score": 10.0,
      "candidate": "def get_min(record: tuple) -> tuple:\n    return min(record, key=lambda item: item[1])\n\n\nif __name__ == \"__main__\":\n    print(get_min((1, 2), (3, 4), (5, 6)))"
    },
    {
      "rank": 2,
      "score": 10.0,
      "candidate": "from typing import List\n\n\ndef index_min(tuples: List[tuple]) -> tuple:\n    \"\"\"Returns the index minimum value record from the given tuples.\n\n    Args:\n        tuples (List[tuple]): list of tuples\n\n    Examples:\n        >>> assert index_min([(1, 'a'), (2, 'b'), (3, 'c')]) == (1, 'a')\n    \"\"\"\n    return min(tuples, key=lambda x: x[0])\n\n\nif __name__ == \"__main__\":\n    print(index_min([(1, 'a'), (2, 'b'), (3, 'c')]))"
    },
    {
      "rank": 3,
      "score": 10.0,
      "candidate": "def index_min(tup):\n    return min(tup, key=lambda x: x[1])\n\n\nif __name__ == '__main__':\n    print(index_min((1, 2, 3)))\n    print(index_min((1, 2, 3, 1)))\n    print(index_min((1, 2, 1, 3)))\n    print(index_min((1, 2, 1, 3, 1)))"
    },
    {
      "rank": 4,
      "score": 10.0,
      "candidate": "def index_min(tup):\n    min_val = min(tup)\n    min_index = tup.index(min_val)\n    return min_index\n\n\nprint(index_min((1, 2, 3, 4, 5, 6, 7, 8, 9, 10)))"
    },
    {
      "rank": 5,
      "score": 10.0,
      "candidate": "from operator import itemgetter\n\ndef find_min(tuples):\n    \"\"\"Return the minimum value record from the given tuples.\"\"\"\n\n    return min(tuples, key=itemgetter(1))\n\nif __name__ == '__main__':\n    print(find_min([(1, 2, 3), (4, 5, 6), (7, 8, 9)]))"
    },
    {
      "rank": 6,
      "score": 10.0,
      "candidate": "from typing import List\n\n\ndef get_minimum_index(data: List[tuple]) -> tuple:\n    \"\"\"Get the minimum index value record from the given tuples.\n\n    Args:\n        data (List[tuple]): given tuples\n\n    Examples:\n        >>> assert get_minimum_index([(1, 2), (1, 3), (1, 1)]) == (1, 1)\n    \"\"\"\n    return min(data, key=lambda x: x[1])\n\n\nif __name__ == \"__main__\":\n    print(get_minimum_index([(1, 2), (1, 3), (1, 1)]))"
    },
    {
      "rank": 7,
      "score": 10.0,
      "candidate": "from typing import List\n\n\ndef index_min(array: List[tuple]) -> tuple:\n    \"\"\"Return the index minimum value record from the given tuples.\n\n    Args:\n        array (List[tuple]): list of tuples\n\n    Examples:\n        >>> assert index_min([(0, 5), (2, 3), (1, 4)]) == (0, 5)\n        >>> assert index_min([(2, 3), (0, 5), (1, 4)]) == (0, 5)\n        >>> assert index_min([(2, 3), (1, 4), (0, 5)]) == (0, 5)\n        >>> assert index_min([(1, 4), (0, 5), (2, 3)]) == (0, 5)\n    \"\"\"\n    return min(array, key=lambda x: x[1])\n\n\nif __name__ == \"__main__\":\n    print(index_min([(0, 5), (2, 3), (1, 4)]))"
    },
    {
      "rank": 8,
      "score": 10.0,
      "candidate": "def index_min(t):\n    m = t[0]\n    for i in range(len(t)):\n        if t[i] < m:\n            m = t[i]\n            index = i\n    return index, m\n\n\nif __name__ == '__main__':\n    print(index_min((4, 7, 5, 1, 2, 3)))"
    },
    {
      "rank": 9,
      "score": 10.0,
      "candidate": "from typing import List\n\n\ndef min_value_index(array: List[tuple]) -> int:\n    \"\"\"Returns the index of the minimum value in the given list of tuples.\n\n    Args:\n        array (List[tuple]): list of tuples\n\n    Examples:\n        >>> assert min_value_index([(2, 3), (5, 4), (0, 6)]) == 2\n    \"\"\"\n    return min(enumerate(array), key=lambda x: x[1])[0]\n\n\nif __name__ == \"__main__\":\n    print(min_value_index([(2, 3), (5, 4), (0, 6)]))"
    },
    {
      "rank": 10,
      "score": 9.9508277913081,
      "candidate": "def min_index(tup):\n    return min(enumerate(tup), key=lambda x: x[1])\n\n\nif __name__ == \"__main__\":\n    print(min_index((1, 2, 3, 4)))\n    print(min_index((1, 1, 3, 4)))"
    },
    {
      "rank": 11,
      "score": 9.935065401071245,
      "candidate": "def index_min(tuple_of_tuples):\n    return min(tuple_of_tuples, key=lambda x: x[0])\n\n\nif __name__ == '__main__':\n    print(index_min((1, 2, 3, 4, 5)))"
    },
    {
      "rank": 12,
      "score": 9.917657287842246,
      "candidate": "from typing import Tuple, List\n\n\ndef find_min(records: List[Tuple[str, int]]) -> Tuple[str, int]:\n    \"\"\"Returns the minimum value record from the given list of tuples.\"\"\"\n    return min(records, key=lambda record: record[1])"
    },
    {
      "rank": 13,
      "score": 9.857846379935749,
      "candidate": "from typing import List\n\n\ndef extract_min(records: List[tuple]) -> tuple:\n    \"\"\"Extract the index minimum value record.\n\n    Args:\n        records (List[tuple]): list of tuples\n\n    Returns:\n        tuple: index minimum value record\n    \"\"\"\n    return min(records, key=lambda x: x[1])\n\n\nif __name__ == \"__main__\":\n    assert extract_min([(1, 2), (3, 1), (2, 3)]) == (1, 1)"
    },
    {
      "rank": 14,
      "score": 9.852568850285756,
      "candidate": "from typing import List, Tuple, Any\n\n\ndef min_value_index(t: Tuple[Any, ...]) -> int:\n    \"\"\"\n    :param t: any tuple\n    :return: index of the minimum value\n    >>> min_value_index((1, 2, 3))\n    0\n    >>> min_value_index((3, 2, 1))\n    2\n    >>> min_value_index((\"a\", \"b\", \"c\"))\n    0\n    >>> min_value_index((1.1, 2.2, 3.3))\n    0\n    \"\"\"\n    return t.index(min(t))\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 15,
      "score": 9.830216343392431,
      "candidate": "from typing import List, Tuple\n\n\ndef index_min(records: List[Tuple[int, int]]) -> Tuple[int, int]:\n    \"\"\"Returns the minimum value record from the given tuples.\n\n    Args:\n        records (List[Tuple[int, int]]): list of tuples to extract minimum from\n\n    Examples:\n        >>> assert index_min([(1, 2), (2, 1)]) == (1, 2)\n    \"\"\"\n    return min(records, key=lambda x: x[1])\n\n\nif __name__ == \"__main__\":\n    print(index_min([(1, 2), (2, 1)]))"
    },
    {
      "rank": 16,
      "score": 9.823764320123246,
      "candidate": "def get_min(tup):\n    return tup[0]\n\n\ndef get_min_val(tup_list):\n    return min(tup_list, key=get_min)\n\n\ndef main():\n    print(get_min_val([(1, 2), (3, 4), (5, 6)]))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 17,
      "score": 9.787305464729771,
      "candidate": "from typing import List\n\n\ndef index_min_tuple(tuples: List[tuple]) -> tuple:\n    \"\"\"Returns the minimum tuple from a list of tuples.\n\n    Args:\n        tuples (List[tuple]): list of tuples\n\n    Returns:\n        tuple: minimum tuple\n    \"\"\"\n    return min(tuples, key=lambda x: x[0])\n\n\nif __name__ == \"__main__\":\n    assert index_min_tuple([(1, 2), (3, 4), (5, 6), (7, 8)]) == (1, 2)"
    },
    {
      "rank": 18,
      "score": 9.743622833506086,
      "candidate": "def index_min_record(records):\n    return min(records, key=lambda x: x[0])\n\n\ndef main():\n    print(index_min_record([(1, 2, 3), (4, 5, 6), (7, 8, 9)]))\n    print(index_min_record([(1, 2, 3), (3, 5, 6), (7, 8, 9)]))\n    print(index_min_record([(1, 2, 3), (3, 5, 6), (7, 8, 9), (2, 4, 5)]))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 19,
      "score": 9.721080929731329,
      "candidate": "from typing import List\n\n\ndef min_index(tup: List[tuple]) -> tuple:\n    \"\"\"Returns the minimum value from the given tuple.\n\n    Args:\n        tup (List[tuple]): list of tuples to search minimum value.\n\n    Examples:\n        >>> min_index([(1, 2), (3, 4), (5, 6), (7, 8)])\n        (1, 2)\n    \"\"\"\n    return min(tup, key=lambda x: x[0])\n\n\nif __name__ == \"__main__\":\n    print(min_index([(1, 2), (3, 4), (5, 6), (7, 8)]))"
    },
    {
      "rank": 20,
      "score": 9.582610527933813,
      "candidate": "def index_min(records: list[tuple[int, int]]) -> tuple[int, int]:\n    \"\"\"Given a list of tuples, return the index and the minimum value.\n\n    >>> index_min([(0, 1), (1, 0), (2, 3)])\n    (1, 0)\n    >>> index_min([(0, 1), (2, 0), (3, 3)])\n    (2, 0)\n    >>> index_min([(0, 1), (2, 3)])\n    (0, 1)\n    \"\"\"\n    return min(enumerate(records), key=lambda t: t[1][1])\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 21,
      "score": 9.449853528141153,
      "candidate": "def min_index(tup):\n    return min(tup, key=tup.index)\n\n\nif __name__ == \"__main__\":\n    print(min_index((1, 2, 3, 4, 5)))"
    },
    {
      "rank": 22,
      "score": 9.370583536698913,
      "candidate": "def min_index(t):\n    m = t[0]\n    i = 0\n    for j in range(1, len(t)):\n        if t[j] < m:\n            m = t[j]\n            i = j\n    return i\n\n\ndef test_min_index():\n    assert min_index((1, 2, 3, 4)) == 0"
    },
    {
      "rank": 23,
      "score": 9.234050852198141,
      "candidate": "def min_tuple(tuple1, tuple2):\n    if tuple1[0] <= tuple2[0]:\n        return tuple1\n    return tuple2\n\n\ndef min_tuple_list(tuples):\n    if len(tuples) == 0:\n        return None\n    min_tuple = tuples[0]\n    for i in range(1, len(tuples)):\n        min_tuple = min_tuple(min_tuple, tuples[i])\n    return min_tuple\n\n\ndef min_tuple_list_recursive(tuples):\n    if len(tuples) == 0:\n        return None\n    elif len(tuples) == 1:\n        return tuples[0]\n    else:\n        return min_tuple(tuples[0], min_tuple_list_recursive(tuples[1:]))\n\n\nprint(min_tuple_list_recursive(((1, 2), (3, 4), (5, 6))))"
    },
    {
      "rank": 24,
      "score": 9.205959372648458,
      "candidate": "def index_min(tuples):\n    \"\"\"Return index of the minimum value.\"\"\"\n    return tuples.index(min(tuples))"
    },
    {
      "rank": 25,
      "score": 9.177268828905222,
      "candidate": "from typing import Tuple\n\n\ndef min_index(tup: Tuple) -> Tuple:\n    return min(enumerate(tup), key=lambda x: x[1])\n\n\nif __name__ == \"__main__\":\n    print(min_index((1, 2, 3)))"
    },
    {
      "rank": 26,
      "score": 8.95994420569242,
      "candidate": "from typing import List\n\n\ndef index_min_value(data: List[tuple]) -> tuple:\n    \"\"\"Returns the index of the minimum value in a list of tuples.\n\n    Args:\n        data (List[tuple]): list of tuples\n\n    Examples:\n        >>> assert index_min_value([(1, 'a'), (2, 'b')]) == (0, 'a')\n    \"\"\"\n    return min(enumerate(data), key=lambda x: x[1])\n\n\nif __name__ == \"__main__\":\n    print(index_min_value([(1, 'a'), (2, 'b')]))"
    },
    {
      "rank": 27,
      "score": 8.932217008005624,
      "candidate": "def index_min(values):\n    index = 0\n    min_value = values[0][1]\n    for i in range(1, len(values)):\n        if values[i][1] < min_value:\n            min_value = values[i][1]\n            index = i\n    return index\n\n\ndef test_min():\n    assert index_min([(0, 4), (1, 5), (2, 7)]) == 1\n    assert index_min([(0, 4), (1, 5), (2, 7), (3, 2), (4, 1)]) == 3"
    },
    {
      "rank": 28,
      "score": 8.92876693971089,
      "candidate": "from typing import List, Tuple\n\n\ndef index_min(tup: Tuple[int, int]) -> int:\n    return tup[0]\n\n\ndef get_index_min_record(\n    records: List[Tuple[int, int]],\n) -> Tuple[int, int]:\n    return min(records, key=index_min)\n\n\nif __name__ == \"__main__\":\n    assert get_index_min_record([(1, 2), (4, 3), (0, 5)]) == (0, 5)"
    },
    {
      "rank": 29,
      "score": 8.85571690049604,
      "candidate": "from random import randint\n\n\ndef index_min(iterable):\n    if len(iterable) == 0:\n        return None\n\n    min_value = iterable[0][1]\n    min_index = 0\n\n    for i in range(1, len(iterable)):\n        if iterable[i][1] < min_value:\n            min_value = iterable[i][1]\n            min_index = i\n\n    return min_index\n\n\nif __name__ == '__main__':\n    t = []\n    for i in range(randint(10, 20)):\n        t.append((randint(-10, 10), randint(-10, 10)))\n\n    print(t)\n    print(index_min(t))"
    },
    {
      "rank": 30,
      "score": 8.850707355641543,
      "candidate": "def min_value(tuples):\n    return min(tuples, key=lambda x: x[1])\n\n\nif __name__ == \"__main__\":\n    print(min_value([(1, 2), (3, 1), (2, 3)]))"
    },
    {
      "rank": 31,
      "score": 8.81367773444215,
      "candidate": "from typing import List\n\n\ndef find_min(list_of_tuples: List[tuple]) -> tuple:\n    \"\"\"Finds the minimum value from a list of tuples.\n\n    Args:\n        list_of_tuples (List[tuple]): a list of tuples.\n\n    Returns:\n        tuple: the tuple with the minimum value.\n    \"\"\"\n    min_value = list_of_tuples[0]\n    for t in list_of_tuples:\n        if t[0] < min_value[0]:\n            min_value = t\n    return min_value\n\n\ndef main():\n    list_of_tuples = [(0, 1), (1, 0), (1, 2), (2, 1)]\n    print(find_min(list_of_tuples))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 32,
      "score": 8.750282588864879,
      "candidate": "def min_index(data):\n    minimum = data[0]\n    index = 0\n    for i in range(1, len(data)):\n        if minimum[1] > data[i][1]:\n            minimum = data[i]\n            index = i\n    return index\n\n\nif __name__ == '__main__':\n    data = [(2, 10), (4, 8), (5, 3), (6, 2)]\n    print(min_index(data))"
    },
    {
      "rank": 33,
      "score": 8.701078161001123,
      "candidate": "def extract_min(list_of_tuples):\n    return min(list_of_tuples, key=lambda x: x[1])\n\n\nif __name__ == \"__main__\":\n    print(extract_min([(1, 2), (3, 4), (5, 6)]))\n    print(extract_min([(\"a\", 2), (\"c\", 4), (\"e\", 6)]))"
    },
    {
      "rank": 34,
      "score": 8.692801520950061,
      "candidate": "from typing import List\n\n\ndef extract_min(tup: List[tuple]) -> tuple:\n    \"\"\"Returns minimum value record from a list of tuples.\n\n    Args:\n        tup (List[tuple]): List of tuples.\n\n    Examples:\n        >>> assert extract_min([(1, 2), (3, 4), (5, 6), (7, 8)]) == (1, 2)\n        >>> assert extract_min([(5, 6), (3, 4), (1, 2), (7, 8)]) == (1, 2)\n        >>> assert extract_min([(7, 8), (3, 4), (1, 2), (5, 6)]) == (1, 2)\n        >>> assert extract_min([(7, 8), (5, 6), (3, 4), (1, 2)]) == (1, 2)\n    \"\"\"\n    return min(tup, key=lambda x: x[0])\n\n\nif __name__ == \"__main__\":\n    print(extract_min([(1, 2), (3, 4), (5, 6), (7, 8)]))"
    },
    {
      "rank": 35,
      "score": 8.625142247198651,
      "candidate": "from typing import Tuple\n\n\ndef index_min(tuples: Tuple[Tuple[int, int], ...]) -> Tuple[int, int]:\n    \"\"\"Returns the index minimum value record from the given tuples.\n\n    Args:\n        tuples (Tuple[Tuple[int, int], ...]): the given tuples.\n\n    Examples:\n        >>> assert index_min(((1, 2), (3, 4), (5, 6))) == (0, 2)\n    \"\"\"\n    return min(enumerate(tuples), key=lambda x: x[1][1])\n\n\ndef main():\n    print(index_min(((1, 2), (3, 4), (5, 6))))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 36,
      "score": 8.616253589228675,
      "candidate": "def index_min(iterable):\n    return min(enumerate(iterable), key=lambda x: x[1])\n\n\ndef test_index_min():\n    assert index_min([1, 2, 3, 4, 5]) == (0, 1)"
    },
    {
      "rank": 37,
      "score": 8.610076160146226,
      "candidate": "from typing import List, NamedTuple\n\n\nclass Record(NamedTuple):\n    \"\"\"Record class.\"\"\"\n\n    id: int\n    name: str\n    salary: int\n\n\ndef index_min(records: List[Record]) -> Record:\n    \"\"\"Return the minimum value record from the given tuples.\n\n    Args:\n        records (List[Record]): list of records\n\n    Returns:\n        Record: a record with minimum value\n    \"\"\"\n    return min(records, key=lambda x: x.salary)\n\n\nif __name__ == \"__main__\":\n    records = [\n        Record(1, \"John\", 15000),\n        Record(2, \"Alice\", 24000),\n        Record(3, \"Bob\", 18000),\n    ]\n    print(index_min(records))"
    },
    {
      "rank": 38,
      "score": 8.608819999274287,
      "candidate": "from typing import Tuple\n\n\ndef min_index(tuple: Tuple[int, str]) -> Tuple[int, str]:\n    \"\"\"Extracts the minimum index value record from a tuple.\n\n    Args:\n        tuple (Tuple[int, str]): a tuple of int and str.\n\n    Returns:\n        Tuple[int, str]: the tuple with the minimum index value.\n    \"\"\"\n    if not tuple:\n        return None\n    return min(enumerate(tuple), key=lambda x: x[1])\n\n\nif __name__ == \"__main__\":\n    print(min_index((1, 2, 3, 4, 5)))\n    print(min_index((1, 2, 3, 4, 5, 1)))\n    print(min_index((1, 2, 3, 4, 5, 1, 2)))"
    },
    {
      "rank": 39,
      "score": 8.606486429141842,
      "candidate": "from typing import List\n\n\ndef extract_minimum_value_record(records: List[tuple]) -> tuple:\n    \"\"\"Returns the minimum value record from the given list of tuples.\n\n    Args:\n        records (List[tuple]): list of tuples\n\n    Examples:\n        >>> assert extract_minimum_value_record([(0, 'A'), (1, 'B'), (2, 'C')]) == (0, 'A')\n        >>> assert extract_minimum_value_record([(0, 'A'), (2, 'C'), (1, 'B')]) == (0, 'A')\n        >>> assert extract_minimum_value_record([(2, 'C'), (1, 'B'), (0, 'A')]) == (0, 'A')\n    \"\"\"\n    return min(records)\n\n\nif __name__ == \"__main__\":\n    print(extract_minimum_value_record([(0, 'A'), (1, 'B'), (2, 'C')]))"
    },
    {
      "rank": 40,
      "score": 8.60156811074208,
      "candidate": "from typing import List\n\n\ndef index_min_value(records: List[tuple]) -> int:\n    return min(enumerate(records), key=lambda x: x[1])[0]\n\n\nif __name__ == \"__main__\":\n    assert index_min_value([(1, 2, 3), (1, 2, 3), (2, 3, 4)]) == 0"
    },
    {
      "rank": 41,
      "score": 8.574972080534389,
      "candidate": "from typing import List, Tuple\n\n\ndef index_min_value(records: List[Tuple[int, int]]) -> Tuple[int, int]:\n    return min(records, key=lambda x: x[1])\n\n\nif __name__ == \"__main__\":\n    print(index_min_value([(0, 3), (1, 2), (2, 5), (3, 4)]))\n    print(index_min_value([(0, 3), (1, 2), (2, 5), (3, 4), (4, 6)]))"
    },
    {
      "rank": 42,
      "score": 8.565425580227462,
      "candidate": "def min_index(tup):\n    min_val = min(tup)\n    min_index = tup.index(min_val)\n    return min_index\n\n\nprint(min_index((1, 2, 3, 4, 5)))"
    },
    {
      "rank": 43,
      "score": 8.542875062379007,
      "candidate": "from typing import List, Tuple\n\n\ndef index_min(records: List[Tuple[str, int]]) -> int:\n    \"\"\"Returns the index of the minimum value from a list of tuples.\"\"\"\n    return min(enumerate(records), key=lambda x: x[1][1])[0]\n\n\nif __name__ == \"__main__\":\n    print(index_min([(\"a\", 1), (\"b\", 2), (\"c\", 3)]))"
    },
    {
      "rank": 44,
      "score": 8.53012858503943,
      "candidate": "from typing import Tuple\n\n\ndef min_value(tup: Tuple) -> Tuple:\n    return min(tup, key=lambda x: x[1])\n\n\nif __name__ == \"__main__\":\n    print(min_value((1, 2, 3)))\n    print(min_value((1, 2, 3, 4)))\n    print(min_value((1, 2, 3, 4, 5)))"
    },
    {
      "rank": 45,
      "score": 8.499905739299377,
      "candidate": "from random import randint\n\n\ndef index_min(tup):\n    min_val = tup[0]\n    min_index = 0\n    for i in range(1, len(tup)):\n        if tup[i] < min_val:\n            min_val = tup[i]\n            min_index = i\n    return min_index\n\n\ndef index_min_2(tup):\n    return min(enumerate(tup), key=lambda x: x[1])[0]\n\n\ndef index_min_3(tup):\n    return min(enumerate(tup), key=lambda x: x[1])[0]\n\n\nif __name__ == \"__main__\":\n    tup = tuple(randint(1, 100) for i in range(10))\n    print(tup)\n    print(index_min(tup))\n    print(index_min_2(tup))\n    print(index_min_3(tup))"
    },
    {
      "rank": 46,
      "score": 8.492983219118464,
      "candidate": "def min_value(lst):\n    \"\"\"\n    >>> min_value([(0, 10), (2, 3), (1, 5)])\n    (2, 3)\n    \"\"\"\n    return lst[0]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 47,
      "score": 8.490324832712195,
      "candidate": "from typing import Tuple\n\n\ndef extract_min(data: Tuple[Tuple[int, int], ...]) -> Tuple[int, int]:\n    \"\"\"Return the index minimum value record from the given tuples.\n\n    :param data: given tuples.\n    :return: the index minimum value record.\n    \"\"\"\n    return min(data, key=lambda x: x[1])\n\n\nif __name__ == '__main__':\n    print(extract_min(((1, 2), (3, 4), (2, 3))))"
    },
    {
      "rank": 48,
      "score": 8.48796797856353,
      "candidate": "def index_min_value(tup):\n    return tup[tup.index(min(tup))]\n\n\ndef test_index_min_value():\n    \"\"\"\n    >>> test_index_min_value()\n    \"\"\"\n    assert index_min_value((1, 2, 3)) == 1\n    assert index_min_value((1, 2, 1)) == 1\n    assert index_min_value((3, 2, 1)) == 1"
    },
    {
      "rank": 49,
      "score": 8.478208546788407,
      "candidate": "def index_min(tup):\n    \"\"\"\n    Return the index of the minimum value record from the given tuples.\n\n    Parameters:\n        tup : a tuple of integers\n\n    Returns:\n        index : an integer\n\n    \"\"\"\n    tup = list(tup)\n    min_value = tup[0]\n    index = 0\n    for i in range(1, len(tup)):\n        if tup[i] < min_value:\n            min_value = tup[i]\n            index = i\n    return index\n\nprint(index_min((1, 3, 5, 7, 9, 2, 4, 6, 8, 10)))"
    },
    {
      "rank": 50,
      "score": 8.437695832075478,
      "candidate": "def extract_min_value_from_tuples(lst):\n    min_value = lst[0][1]\n    min_value_index = 0\n    for i in range(len(lst)):\n        if lst[i][1] < min_value:\n            min_value = lst[i][1]\n            min_value_index = i\n    return min_value_index\n\n\ndef main():\n    lst = [(1, 2), (10, 3), (100, 4)]\n    print(extract_min_value_from_tuples(lst))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 51,
      "score": 8.386620303250325,
      "candidate": "def index_min(data):\n    min_value = data[0][1]\n    min_index = 0\n    for i in range(1, len(data)):\n        if data[i][1] < min_value:\n            min_value = data[i][1]\n            min_index = i\n    return data[min_index]\n\ndef index_min_v2(data):\n    min_value = data[0][1]\n    min_index = 0\n    for i in range(1, len(data)):\n        if data[i][1] < min_value:\n            min_value = data[i][1]\n            min_index = i\n    return min_index\n\ndef main():\n    data = ((\"a\", 20), (\"b\", 30), (\"c\", 10))\n    print(index_min(data))\n    print(index_min_v2(data))\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 52,
      "score": 8.351614956112536,
      "candidate": "from typing import List\n\n\ndef find_index_min(tuples: List[tuple]) -> tuple:\n    \"\"\"Find index minimum value record from given tuples.\n\n    Args:\n        tuples (List[tuple]): list of tuples\n\n    Examples:\n        >>> assert find_index_min([(1, 2, 3), (2, 3, 4), (3, 4, 5)]) == (1, 2, 3)\n    \"\"\"\n    return min(tuples, key=lambda x: x[0])\n\n\nif __name__ == \"__main__\":\n    print(find_index_min([(1, 2, 3), (2, 3, 4), (3, 4, 5)]))"
    },
    {
      "rank": 53,
      "score": 8.334608500525688,
      "candidate": "def index_min(data):\n    min_val = min(data)\n    for i in range(len(data)):\n        if data[i][1] == min_val:\n            return data[i]\n\n\ndef test_min_tuple_index():\n    \"\"\"\n    >>> index_min([(1, 2), (2, 1), (3, 3), (4, 4), (5, 5)])\n    (1, 2)\n    >>> index_min([(5, 5), (4, 4), (3, 3), (2, 1), (1, 2)])\n    (5, 5)\n    >>> index_min([(1, 2), (1, 2), (3, 3), (4, 4), (5, 5)])\n    (1, 2)\n    \"\"\"\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 54,
      "score": 8.331556294201176,
      "candidate": "def extract_minimum(records):\n    \"\"\"\n    >>> extract_minimum([(1, 2), (1, 4), (1, 3), (1, 5)])\n    (1, 2)\n    \"\"\"\n    if not records:\n        return None\n\n    min_value = records[0][1]\n    min_index = 0\n\n    for i, record in enumerate(records):\n        if record[1] < min_value:\n            min_value = record[1]\n            min_index = i\n\n    return records[min_index]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 55,
      "score": 8.327375965969855,
      "candidate": "def get_index_min(data):\n    return min(data, key=lambda x: x[0])\n\n\nif __name__ == '__main__':\n    data = ((1, 2, 3), (4, 5, 6), (7, 8, 9), (2, 2, 3))\n    print(get_index_min(data))"
    },
    {
      "rank": 56,
      "score": 8.327150877756871,
      "candidate": "from itertools import islice\nfrom typing import List, Tuple\n\n\ndef index_minimum(tuples: List[Tuple[int, int]]) -> List[Tuple[int, int]]:\n    \"\"\"Extract the index minimum value record.\n\n    Args:\n        tuples (List[Tuple[int, int]]): list of tuples\n\n    Returns:\n        List[Tuple[int, int]]: list of tuples\n    \"\"\"\n    return list(islice(sorted(tuples, key=lambda x: x[1]), 0, 1))\n\n\nif __name__ == \"__main__\":\n    print(index_minimum([(1, 1), (2, 2), (3, 3)]))\n    print(index_minimum([(1, 1), (2, 3), (3, 2)]))"
    },
    {
      "rank": 57,
      "score": 8.294940769211511,
      "candidate": "from typing import Tuple\n\n\ndef index_min_record(records: Tuple[Tuple[int, int], ...]) -> int:\n    \"\"\"Return index of minimum value record in a tuple of tuples.\n\n    :param records: tuple of tuples.\n    :return: index of minimum value record.\n    \"\"\"\n    return min(enumerate(records), key=lambda x: x[1])[0]\n\n\nif __name__ == \"__main__\":\n    print(index_min_record(((1, 2), (3, 4), (5, 6), (7, 8))))\n    print(index_min_record(((1, 2), (3, 4), (5, 6), (7, 1))))"
    },
    {
      "rank": 58,
      "score": 8.2938925966498,
      "candidate": "def get_min_index(tup):\n    return min(tup, key=tup.index)\n\n\nif __name__ == \"__main__\":\n    data = [(2, \"Joe\"), (3, \"John\"), (2, \"Jack\"), (1, \"Jeff\")]\n    print(get_min_index(data))"
    },
    {
      "rank": 59,
      "score": 8.280613371145561,
      "candidate": "from typing import List\n\n\ndef find_min(arr: List[tuple]) -> tuple:\n    \"\"\"Return the minimum value record from the given tuples.\n\n    >>> find_min([(1, 3), (5, 1), (2, 2)])\n    (1, 3)\n    \"\"\"\n    return min(arr, key=lambda x: x[1])\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 60,
      "score": 8.251903304236286,
      "candidate": "def index_min(data):\n    return min(enumerate(data), key=lambda x: x[1])\n\n\nif __name__ == \"__main__\":\n    print(index_min((1, 2, 3, 4)))"
    },
    {
      "rank": 61,
      "score": 8.2048573255218,
      "candidate": "def get_index_min_value(tuples):\n    \"\"\"Returns the index minimum value record from a list of tuples.\"\"\"\n    return min(tuples, key=lambda t: t[1])"
    },
    {
      "rank": 62,
      "score": 8.179564342560925,
      "candidate": "from typing import Tuple\n\n\ndef min_value(records: Tuple[Tuple[int, str], Tuple[int, str], Tuple[int, str]]) -> str:\n    \"\"\"Returns the minimum value record from the given tuple of tuples.\n\n    Args:\n        records (Tuple[Tuple[int, str], Tuple[int, str], Tuple[int, str]]): list of tuples\n\n    Returns:\n        str: the minimum value record\n    \"\"\"\n    return min(records, key=lambda x: x[0])[1]\n\n\nif __name__ == \"__main__\":\n    print(min_value(((1, \"a\"), (2, \"b\"), (3, \"c\"))))"
    },
    {
      "rank": 63,
      "score": 8.163300679823958,
      "candidate": "def min_val_record(records):\n    min_val = 0\n    min_val_index = 0\n    for i in range(len(records)):\n        if records[i][1] < min_val:\n            min_val = records[i][1]\n            min_val_index = i\n    return records[min_val_index]\n\n\nif __name__ == '__main__':\n    print(min_val_record([(1, 2), (3, 4), (5, 6), (7, 8)]))"
    },
    {
      "rank": 64,
      "score": 8.144125099485041,
      "candidate": "def get_min_index(tup):\n    return min(tup, key=tup.index)\n\n\nprint(get_min_index((1, 2, 3)))\nprint(get_min_index((1, 3, 2)))\nprint(get_min_index((2, 3, 1)))"
    },
    {
      "rank": 65,
      "score": 8.143591138329747,
      "candidate": "def min_index(tuples):\n    return min(enumerate(tuples), key=lambda x: x[1])[0]\n\n\nprint(min_index((3, 6, 2, 1, 9, 7)))\nprint(min_index((10, 10, 10, 10, 10, 10)))\nprint(min_index((0, 0, 0, 0, 0, 0)))"
    },
    {
      "rank": 66,
      "score": 8.121884567141883,
      "candidate": "from random import randint\n\n\ndef index_min(data):\n    min_value = data[0]\n    min_index = 0\n    for i, t in enumerate(data):\n        if t < min_value:\n            min_value = t\n            min_index = i\n    return min_index\n\n\ndef test_index_min():\n    for _ in range(10):\n        data = [randint(-10, 10) for _ in range(randint(0, 10))]\n        assert index_min(data) == min(enumerate(data), key=lambda x: x[1])[0]\n    print('passed all tests')\n\n\nif __name__ == '__main__':\n    test_index_min()"
    },
    {
      "rank": 67,
      "score": 8.08452234024709,
      "candidate": "def index_min(tup):\n    if not tup:\n        return None\n\n    min_value = tup[0]\n    min_index = 0\n    for i, t in enumerate(tup):\n        if t < min_value:\n            min_value = t\n            min_index = i\n    return min_index\n\n\ndef index_min_2(tup):\n    return min(enumerate(tup), key=lambda x: x[1])[0]\n\n\nif __name__ == '__main__':\n    print(index_min((1, 2, 3, 4, 5)))\n    print(index_min_2((1, 2, 3, 4, 5)))"
    },
    {
      "rank": 68,
      "score": 7.8912769574414305,
      "candidate": "def extract_min(tup):\n    return min(tup, key=lambda x: x[0])\n\n\nif __name__ == \"__main__\":\n    t = (1, 2, 3, 4, 5, 6)\n    print(extract_min(t))"
    },
    {
      "rank": 69,
      "score": 7.84634113240411,
      "candidate": "from typing import List, Tuple\n\n\ndef index_min(tuples: List[Tuple[int, int]]) -> Tuple[int, int]:\n    \"\"\"Return the minimum tuple from the list.\"\"\"\n    return min(tuples, key=lambda x: x[1])\n\n\nif __name__ == \"__main__\":\n    print(index_min([(1, 2), (3, 1), (2, 3)]))\n    print(index_min([(1, 2), (2, 1), (3, 3)]))\n    print(index_min([(1, 2), (2, 1), (3, 3), (2, 2)]))"
    },
    {
      "rank": 70,
      "score": 7.738292593776799,
      "candidate": "from typing import Tuple\n\n\ndef min_index(a: Tuple[int, int], b: Tuple[int, int]) -> Tuple[int, int]:\n    \"\"\"Returns the minimum value record from the given tuples.\n\n    Args:\n        a (Tuple[int, int]): first tuple\n        b (Tuple[int, int]): second tuple\n\n    Returns:\n        Tuple[int, int]: minimum value record\n    \"\"\"\n    if a[0] < b[0]:\n        return a\n    elif a[0] > b[0]:\n        return b\n    elif a[1] < b[1]:\n        return a\n    return b\n\n\nif __name__ == \"__main__\":\n    print(min_index((1, 2), (3, 4)))\n    print(min_index((2, 3), (1, 2)))\n    print(min_index((1, 4), (3, 2)))\n    print(min_index((2, 2), (2, 2)))"
    },
    {
      "rank": 71,
      "score": 7.7320703513377165,
      "candidate": "def get_min(tup):\n    return min(tup, key=lambda x: x[1])\n\ntup_list = [(1, 2), (2, 1), (3, 3)]\nprint(get_min(tup_list))"
    },
    {
      "rank": 72,
      "score": 7.712686970378385,
      "candidate": "from typing import List, Tuple\n\n\ndef index_min_value_record(records: List[Tuple[str, int]]) -> Tuple[str, int]:\n    \"\"\"Returns the index minimum value record from a list of tuples.\n\n    Args:\n        records (List[Tuple[str, int]]): list of tuples\n\n    Returns:\n        Tuple[str, int]: the index minimum value record\n    \"\"\"\n    # if records is empty, return None\n    if not records:\n        return None\n\n    # if records is a single tuple, return it\n    if len(records) == 1:\n        return records[0]\n\n    # if records has multiple tuples, return the index minimum value\n    # record\n    min_value = min(records, key=lambda x: x[1])[1]\n    for record in records:\n        if record[1] == min_value:\n            return record\n\n\nif __name__ == \"__main__\":\n    records = [(\"a\", 5), (\"b\", 3), (\"c\", 1), (\"d\", 1)]\n    print(index_min_value_record(records))\n    records = [(\"a\", 1), (\"b\", 2), (\"c\", 3)]\n    print(index_min_value_record(records))"
    },
    {
      "rank": 73,
      "score": 7.705183449260731,
      "candidate": "def index_min_tuple(tup):\n    return min(tup, key=lambda x: x[0])\n\n\nif __name__ == '__main__':\n    print(index_min_tuple((2, 'a', 3)))\n    print(index_min_tuple((1, 'a', 2)))\n    print(index_min_tuple((2, 'a', 0)))"
    },
    {
      "rank": 74,
      "score": 7.5819855281879285,
      "candidate": "from typing import List\n\n\ndef index_min(tup: List[tuple]) -> tuple:\n    \"\"\"Return the index minimum value from a list of tuples.\"\"\"\n    return min(tup, key=lambda t: t[1])\n\n\nif __name__ == \"__main__\":\n    tup_list = [(1, 2), (2, 1), (3, 3), (4, 4)]\n    assert index_min(tup_list) == (1, 2)"
    },
    {
      "rank": 75,
      "score": 7.562924366763077,
      "candidate": "def index_min(data):\n    \"\"\"\n    >>> index_min([(1, 1), (2, 2), (3, 3)])\n    (0, 1)\n    >>> index_min([(1, 3), (2, 2), (3, 1)])\n    (2, 1)\n    \"\"\"\n    return min(enumerate(data), key=lambda x: x[1])\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 76,
      "score": 7.464609382504557,
      "candidate": "def min_index(t):\n    \"\"\"Return the index of the minimum value in a tuple.\"\"\"\n    min_index = 0\n    for i in range(len(t)):\n        if t[i][1] < t[min_index][1]:\n            min_index = i\n    return min_index\n\n\ndef main():\n    \"\"\"Call the example function and print results.\"\"\"\n    print(min_index(((1, 2), (2, 3), (3, 1))))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 77,
      "score": 3.2537093342925396,
      "candidate": "from typing import List, Tuple\n\n\ndef get_min_index(t: Tuple[int, int]) -> int:\n    \"\"\"Get minimum index of a tuple.\n\n    Args:\n        t (Tuple[int, int]): Tuple with two integers.\n\n    Returns:\n        int: Minimum index of the tuple.\n    \"\"\"\n    return min(range(len(t)), key=t.__getitem__)\n\n\ndef get_min_index_v2(t: Tuple[int, int]) -> int:\n    \"\"\"Get minimum index of a tuple.\n\n    Args:\n        t (Tuple[int, int]): Tuple with two integers.\n\n    Returns:\n        int: Minimum index of the tuple.\n    \"\"\"\n    return t.index(min(t))\n\n\ndef get_min_index_v3(t: Tuple[int, int]) -> int:\n    \"\"\"Get minimum index of a tuple.\n\n    Args:\n        t (Tuple[int, int]): Tuple with two integers.\n\n    Returns:\n        int: Minimum index of the tuple.\n    \"\"\"\n    return t[::-1].index(min(t))\n\n\ndef get_min_index_v4(t: Tuple[int, int]) -> int:\n    \"\"\"Get minimum index of a tuple.\n\n    Args:\n        t (Tuple[int, int]): Tuple with two integers.\n\n    Returns:\n        int: Minimum index of the tuple.\n    \"\"\"\n    return t.index(min(t)) if t[0] < t[1] else t.index(min(t)) - 1\n\n\ndef get_min_index_v5(t: Tuple[int, int]) -> int:\n    \"\"\"Get minimum index of a tuple.\n\n    Args:\n        t (Tuple[int, int]): Tuple with two integers.\n\n    Returns:\n        int: Minimum index of the tuple.\n    \"\"\"\n    return t.index(min(t)) if t[0] < t[1] else t.index(min(t)) + 1\n\n\ndef get_min"
    },
    {
      "rank": 78,
      "score": 3.2408478954940856,
      "candidate": "from typing import List, Tuple\n\n\ndef extract_minimum_value_from_tuple(tuple_list: List[Tuple[int, int]]) -> int:\n    \"\"\"\n    :param tuple_list: List of tuples\n    :return: Minimum value from tuple list\n    >>> extract_minimum_value_from_tuple([(1, 2), (2, 3), (3, 4), (4, 5)])\n    2\n    >>> extract_minimum_value_from_tuple([(2, 3), (3, 4), (4, 5), (5, 6)])\n    3\n    >>> extract_minimum_value_from_tuple([(3, 4), (4, 5), (5, 6), (6, 7)])\n    4\n    >>> extract_minimum_value_from_tuple([(4, 5), (5, 6), (6, 7), (7, 8)])\n    5\n    >>> extract_minimum_value_from_tuple([(5, 6), (6, 7), (7, 8), (8, 9)])\n    6\n    \"\"\"\n    return min(tuple_list, key=lambda x: x[1])[1]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 79,
      "score": 3.219696508248498,
      "candidate": "from typing import List\n\n\ndef get_min_value(records: List[tuple]) -> tuple:\n    \"\"\"Returns the minimum value record from the given list of records.\n\n    Args:\n        records (List[tuple]): list of records in the form of tuples.\n\n    Returns:\n        tuple: minimum value record.\n    \"\"\"\n    return min(records, key=lambda x: x[1])\n\n\nif __name__ == \"__main__\":\n    print(get_min_value([(\"a\", 1), (\"b\", 2), (\"c\", 3)]))"
    },
    {
      "rank": 80,
      "score": 3.184184334996698,
      "candidate": "from typing import List, Tuple\n\n\ndef extract_min_value_index(data: List[Tuple[int, int]]) -> int:\n    \"\"\"Return index of minimum value.\n\n    Args:\n        data (List[Tuple[int, int]]): list of tuples\n\n    Returns:\n        int: index of minimum value\n    \"\"\"\n    return min(enumerate(data), key=lambda x: x[1])[0]\n\n\nif __name__ == \"__main__\":\n    print(extract_min_value_index([(1, 2), (3, 4), (2, 1)]))\n    print(extract_min_value_index([(2, 1), (3, 4), (2, 1)]))\n    print(extract_min_value_index([(1, 1), (3, 3), (2, 2)]))"
    },
    {
      "rank": 81,
      "score": 3.090167524402961,
      "candidate": "from typing import Tuple\n\n\ndef min_value_tuple_index(\n    data: Tuple[int, int, int, int, int, int, int, int, int, int]\n) -> int:\n    \"\"\"Returns the index of the minimum value record.\n\n    Args:\n        data (Tuple[int, int, int, int, int, int, int, int, int, int]):\n            Tuple of numbers.\n\n    Examples:\n        >>> assert min_value_tuple_index((1, 2, 3, 4, 5, 6, 7, 8, 9, 10)) == 0\n        >>> assert min_value_tuple_index((1, 2, 3, 4, 5, 6, 7, 8, 9, 100)) == 9\n    \"\"\"\n    return data.index(min(data))\n\n\nif __name__ == \"__main__\":\n    print(min_value_tuple_index((1, 2, 3, 4, 5, 6, 7, 8, 9, 10)))\n    print(min_value_tuple_index((1, 2, 3, 4, 5, 6, 7, 8, 9, 100)))"
    },
    {
      "rank": 82,
      "score": 3.0867926460114323,
      "candidate": "from itertools import islice\n\n\ndef min_index(tuples):\n    return min(enumerate(tuples), key=lambda x: x[1])[0]\n\n\ndef min_index_short(tuples):\n    return min(enumerate(tuples), key=lambda x: x[1])[0]\n\n\ndef min_index_shortest(tuples):\n    return min(enumerate(tuples), key=lambda x: x[1])[0]\n\n\ndef min_index_shortestest(tuples):\n    return min(enumerate(tuples), key=lambda x: x[1])[0]\n\n\ndef min_index_shortestestest(tuples):\n    return min(enumerate(tuples), key=lambda x: x[1])[0]\n\n\ndef min_index_shortestestest(tuples):\n    return min(enumerate(tuples), key=lambda x: x[1])[0]\n\n\nif __name__ == \"__main__\":\n    tuples = [(0, 1), (3, 1), (1, 2), (2, 3)]\n    print(min_index(tuples))\n    print(min_index_short(tuples))\n    print(min_index_shortest(tuples))\n    print(min_index_shortestest(tuples))\n    print(min_index_shortestestest(tuples))\n    print(min_index_shortestestest(tuples))"
    },
    {
      "rank": 83,
      "score": 3.085707017162819,
      "candidate": "def get_index_min(tuples):\n    # return min(tuples, key=lambda x: x[0])\n    return min(tuples, key=lambda x: x[1])\n\nif __name__ == '__main__':\n    print(get_index_min((1, 2, 3)))\n    print(get_index_min((1, 3, 2)))\n    print(get_index_min((2, 1, 3)))\n    print(get_index_min((3, 2, 1)))\n    print(get_index_min((3, 1, 2)))"
    },
    {
      "rank": 84,
      "score": 3.0710688664954984,
      "candidate": "from typing import Tuple\n\n\ndef extract_min_index(tup: Tuple[Tuple[int, int], ...]) -> Tuple[int, int]:\n    \"\"\"Extract the index minimum value record from the given tuples.\n\n    Args:\n        tup (Tuple[Tuple[int, int], ...]): the given tuples.\n\n    Examples:\n        >>> extract_min_index(((3, 2), (4, 1), (5, 0), (1, 2), (3, 3)))\n        (0, 2)\n    \"\"\"\n    return min(enumerate(tup), key=lambda x: x[1][0])\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 85,
      "score": 3.050127262801141,
      "candidate": "from typing import Tuple\n\n\ndef index_min(data: Tuple[Tuple[int, int]]) -> int:\n    \"\"\"Return the index minimum value record from the given tuples.\n\n    Args:\n        data (Tuple[Tuple[int, int]]): The data to process.\n\n    Examples:\n        >>> index_min(((1, 2), (2, 1)))\n        0\n        >>> index_min(((1, 2), (2, 2)))\n        1\n    \"\"\"\n    return min(enumerate(data), key=lambda x: x[1])[0]\n\n\nif __name__ == \"__main__\":\n    print(index_min(((1, 2), (2, 1))))\n    print(index_min(((1, 2), (2, 2))))"
    },
    {
      "rank": 86,
      "score": 2.9914017506136115,
      "candidate": "from typing import List\n\n\ndef min_index(tup: List[tuple]) -> tuple:\n    \"\"\"Returns the minimum index value from the given tuple.\n\n    Args:\n        tup (List[tuple]): list of tuples\n\n    Returns:\n        tuple: minimum index value\n    \"\"\"\n    return min(tup, key=lambda t: t[0])\n\n\nif __name__ == \"__main__\":\n    print(min_index([(1, 1), (2, 2), (3, 3)]))\n    print(min_index([(1, 3), (2, 2), (3, 1)]))\n    print(min_index([(3, 1), (2, 2), (3, 3)]))\n    print(min_index([(3, 1), (2, 2), (1, 3)]))"
    },
    {
      "rank": 87,
      "score": 2.98271757082072,
      "candidate": "from typing import List\n\n\ndef get_min_value_tuple(tuples: List[tuple]) -> tuple:\n    \"\"\"Returns the minimum value tuple from a list of tuples.\n\n    Args:\n        tuples (List[tuple]): list of tuples.\n\n    Examples:\n        >>> assert get_min_value_tuple([(1, 2), (3, 4), (5, 6)]) == (1, 2)\n    \"\"\"\n    return min(tuples, key=lambda x: x[1])\n\n\nif __name__ == \"__main__\":\n    print(get_min_value_tuple([(1, 2), (3, 4), (5, 6)]))"
    },
    {
      "rank": 88,
      "score": 2.9668165677189156,
      "candidate": "from typing import Tuple\n\n\ndef extract_min(tup: Tuple[int, int]) -> int:\n    \"\"\"Returns the index minimum value record from the given tuple.\n\n    Args:\n        tup (Tuple[int, int]): The tuple to extract the index minimum value.\n\n    Examples:\n        >>> extract_min((1, 2))\n        1\n        >>> extract_min((2, 1))\n        2\n    \"\"\"\n    return tup[0] if tup[0] < tup[1] else tup[1]\n\n\nif __name__ == \"__main__\":\n    print(extract_min((1, 2)))\n    print(extract_min((2, 1)))"
    },
    {
      "rank": 89,
      "score": 2.929993500049614,
      "candidate": "from typing import Tuple, List\n\n\ndef min_index(records: List[Tuple[int, int]]) -> Tuple[int, int]:\n    \"\"\"Return the minimum value record from the given list.\n\n    :param records: list of tuples.\n    :return: tuple.\n    \"\"\"\n    return min(records, key=lambda x: x[1])\n\n\nif __name__ == '__main__':\n    print(min_index([(1, 2), (4, 5), (5, 6)]))"
    },
    {
      "rank": 90,
      "score": 2.889446694969651,
      "candidate": "from typing import Tuple\n\n\ndef index_min(data: Tuple) -> Tuple:\n    \"\"\"Returns the index minimum value record.\n\n    Args:\n        data (Tuple): data to extract the index minimum value record.\n\n    Examples:\n        >>> assert index_min(((1, 2), (3, 4), (5, 6), (7, 8))) == (0, 1)\n    \"\"\"\n    return min(enumerate(data), key=lambda x: x[1])\n\n\nif __name__ == \"__main__\":\n    print(index_min(((1, 2), (3, 4), (5, 6), (7, 8))))"
    },
    {
      "rank": 91,
      "score": 2.888779753725009,
      "candidate": "from typing import Tuple, List\n\n\ndef index_min(tup: Tuple[int, str]) -> int:\n    \"\"\"Returns the index of minimum value.\n\n    Args:\n        tup (Tuple[int, str]): a tuple of integer and string.\n\n    Returns:\n        int: the index of minimum value.\n    \"\"\"\n    return min(range(len(tup)), key=lambda i: tup[i])\n\n\ndef test_index_min():\n    \"\"\"Test for index_min.\"\"\"\n    assert index_min((3, \"cat\")) == 0\n    assert index_min((1, \"cat\")) == 0\n    assert index_min((1, \"dog\", 2)) == 0\n    assert index_min((2, \"dog\", 1)) == 2\n\n\ndef index_min_tuple(tup: Tuple[int, ...]) -> int:\n    \"\"\"Returns the index of minimum value.\n\n    Args:\n        tup (Tuple[int, ...]): a tuple of integer and string.\n\n    Returns:\n        int: the index of minimum value.\n    \"\"\"\n    return min(range(len(tup)), key=lambda i: tup[i])\n\n\ndef test_index_min_tuple():\n    \"\"\"Test for index_min_tuple.\"\"\"\n    assert index_min_tuple((3, \"cat\")) == 0\n    assert index_min_tuple((1, \"cat\")) == 0\n    assert index_min_tuple((1, \"dog\", 2)) == 0\n    assert index_min_tuple((2, \"dog\", 1)) == 2\n\n\ndef index_min_list(tup: List[int]) -> int:\n    \"\"\"Returns the index of minimum value.\n\n    Args:\n        tup (List[int]): a list of integer and string.\n\n    Returns:\n        int: the index of minimum value.\n    \"\"\"\n    return min(range(len(tup)), key=lambda i: tup[i])\n\n\ndef test_index_min_list():\n    \"\"\"Test for index_min_list.\"\"\"\n    assert index_"
    },
    {
      "rank": 92,
      "score": 2.8882248591431385,
      "candidate": "from typing import List, Tuple\n\n\ndef index_min_value(input: List[Tuple[str, int]]) -> Tuple[str, int]:\n    \"\"\"Return index minimum value record from the given tuples.\n\n    Args:\n        input (List[Tuple[str, int]]): input list of tuples\n\n    Examples:\n        >>> assert index_min_value([('a', 1), ('b', 2), ('c', 3)]) == ('a', 1)\n    \"\"\"\n    return min(input, key=lambda x: x[1])\n\n\nif __name__ == \"__main__\":\n    print(index_min_value([(\"a\", 1), (\"b\", 2), (\"c\", 3)]))"
    },
    {
      "rank": 93,
      "score": 2.8873261473756116,
      "candidate": "from typing import List\n\n\ndef index_min_value(values: List) -> int:\n    \"\"\"Return index of minimum value from a list of tuples.\n\n    :param values: List of tuples to search\n    :return: Index of minimum value\n    \"\"\"\n    return min(enumerate(values), key=lambda x: x[1])[0]\n\n\nif __name__ == \"__main__\":\n    print(index_min_value([(3, 5), (1, 2), (2, 1), (3, 4)]))"
    },
    {
      "rank": 94,
      "score": 2.879578309539711,
      "candidate": "from typing import Tuple, List\n\n\ndef index_min_value(input_list: List[Tuple]) -> Tuple:\n    \"\"\"Returns the index of the minimum value from the list of tuples.\n\n    Args:\n        input_list (List[Tuple]): list of tuples\n\n    Examples:\n        >>> assert index_min_value([(2, 'a'), (1, 'b'), (3, 'c')]) == (0, 2)\n    \"\"\"\n    return min(enumerate(input_list), key=lambda x: x[1][0])\n\n\nif __name__ == \"__main__\":\n    print(index_min_value([(2, 'a'), (1, 'b'), (3, 'c')]))"
    },
    {
      "rank": 95,
      "score": 2.8756151476143246,
      "candidate": "from typing import List, Tuple\n\n\ndef get_min_value_record(data: List[Tuple[int, int]]) -> List[int]:\n    \"\"\"Return the index minimum value record from the given tuples.\n\n    Args:\n        data (List[Tuple[int, int]]): list of tuples\n\n    Examples:\n        >>> assert get_min_value_record([(1, 3), (2, 1), (3, 2)]) == [1, 2]\n    \"\"\"\n    return [index for index, _ in min(enumerate(data), key=lambda x: x[1])]\n\n\nif __name__ == \"__main__\":\n    print(get_min_value_record([(1, 3), (2, 1), (3, 2)]))"
    },
    {
      "rank": 96,
      "score": 2.869348146113956,
      "candidate": "from typing import List\n\n\ndef min_value_index(tuples: List[tuple]) -> tuple:\n    \"\"\"Get the index minimum value record from the given tuples.\n\n    Args:\n        tuples (List[tuple]): list of tuples\n\n    Examples:\n        >>> assert min_value_index([(1, 2, 3), (4, 5, 6), (7, 8, 9)]) == (0, 1, 2)\n    \"\"\"\n    return min(tuples, key=lambda x: x[0])\n\n\nif __name__ == \"__main__\":\n    print(min_value_index([(1, 2, 3), (4, 5, 6), (7, 8, 9)]))"
    },
    {
      "rank": 97,
      "score": 2.7820742218749093,
      "candidate": "from typing import List, Tuple\n\n\ndef index_min(tup: Tuple[int, str]) -> Tuple[int, str]:\n    \"\"\"Return the index minimum value record from the given tuples.\n\n    :param tup: given tuples\n    :return: the index minimum value record from the given tuples.\n    >>> index_min((1, 'one'), (2, 'two'), (3, 'three'))\n    (1, 'one')\n    >>> index_min((3, 'three'), (2, 'two'), (1, 'one'))\n    (1, 'one')\n    \"\"\"\n    return min(tup, key=lambda x: x[0])\n\n\ndef index_min_list(tup_list: List[Tuple[int, str]]) -> Tuple[int, str]:\n    \"\"\"Return the index minimum value record from the given tuples.\n\n    :param tup_list: given tuples\n    :return: the index minimum value record from the given tuples.\n    >>> index_min_list([(1, 'one'), (2, 'two'), (3, 'three')])\n    (1, 'one')\n    >>> index_min_list([(3, 'three'), (2, 'two'), (1, 'one')])\n    (1, 'one')\n    \"\"\"\n    return min(tup_list, key=lambda x: x[0])\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 98,
      "score": 2.746149377050584,
      "candidate": "from typing import List, Tuple\n\n\ndef index_min(data: List[Tuple[int, str]]) -> Tuple[int, str]:\n    \"\"\"Return the index minimum value record from the given tuples.\n\n    Args:\n        data (List[Tuple[int, str]]): list of tuples\n\n    Examples:\n        >>> assert index_min([(1, 'one'), (2, 'two'), (3, 'three'), (4, 'four')]) == (1, 'one')\n    \"\"\"\n    return min(data, key=lambda item: item[0])\n\n\nif __name__ == \"__main__\":\n    print(index_min([(1, 'one'), (2, 'two'), (3, 'three'), (4, 'four')]))"
    },
    {
      "rank": 99,
      "score": 2.7237615414186473,
      "candidate": "def extract_min(t):\n    return t[min(enumerate(t), key=lambda x: x[1])[0]]\n\n\ndef test_extract_min():\n    assert extract_min((1, 2, 3)) == 1\n    assert extract_min((3, 2, 1)) == 1"
    },
    {
      "rank": 100,
      "score": 2.5408127412821284,
      "candidate": "from typing import Tuple, List\n\n\ndef min_value_index(t: Tuple[int, ...]) -> int:\n    \"\"\"Extract the minimum value index from a tuple.\n\n    Args:\n        t (Tuple[int, ...]): a tuple of integers.\n\n    Examples:\n        >>> assert min_value_index((1, 2, 3)) == 0\n        >>> assert min_value_index((3, 2, 1)) == 2\n    \"\"\"\n    return min(range(len(t)), key=t.__getitem__)\n\n\ndef min_value_index_list(t: Tuple[int, ...]) -> int:\n    \"\"\"Extract the minimum value index from a tuple.\n\n    Args:\n        t (Tuple[int, ...]): a tuple of integers.\n\n    Examples:\n        >>> assert min_value_index((1, 2, 3)) == 0\n        >>> assert min_value_index((3, 2, 1)) == 2\n    \"\"\"\n    return min(enumerate(t), key=lambda x: x[1])[0]\n\n\ndef min_value_index_dict(t: Tuple[int, ...]) -> int:\n    \"\"\"Extract the minimum value index from a tuple.\n\n    Args:\n        t (Tuple[int, ...]): a tuple of integers.\n\n    Examples:\n        >>> assert min_value_index((1, 2, 3)) == 0\n        >>> assert min_value_index((3, 2, 1)) == 2\n    \"\"\"\n    return min(dict(enumerate(t)), key=lambda x: x[1])\n\n\ndef min_value_index_sorted(t: Tuple[int, ...]) -> int:\n    \"\"\"Extract the minimum value index from a tuple.\n\n    Args:\n        t (Tuple[int, ...]): a tuple of integers.\n\n    Examples:\n        >>> assert min_value_index((1, 2, 3)) == 0\n        >>> assert min_value_index((3, 2, 1)) == 2\n    \"\"\"\n    return"
    }
  ]
}