{
  "timestamp": "2025-09-15T01:05:30.481653",
  "method": "improved_llm_judge",
  "judge_model": "codellama/CodeLlama-7b-Python-hf",
  "target_model": "codellama-7b",
  "dataset": "mbpp",
  "problem_number": 368,
  "total_candidates": 100,
  "results": [
    {
      "rank": 1,
      "score": 10.0,
      "candidate": "def surface_area(length: int, width: int, height: int) -> int:\n    \"\"\"\n    >>> surface_area(1, 2, 3)\n    18\n    >>> surface_area(1, 2, 1)\n    6\n    >>> surface_area(3, 2, 1)\n    12\n    \"\"\"\n    return 2 * (length * width + width * height + height * length)\n\n\nif __name__ == \"__main__\":\n    from doctest import testmod\n\n    testmod()"
    },
    {
      "rank": 2,
      "score": 10.0,
      "candidate": "from typing import Tuple\n\n\ndef surface_area(length: int, width: int, height: int) -> int:\n    \"\"\"Calculates the surface area of a cuboid.\n\n    Args:\n        length (int): the length of the cuboid.\n        width (int): the width of the cuboid.\n        height (int): the height of the cuboid.\n\n    Returns:\n        int: the surface area of the cuboid.\n    \"\"\"\n    return 2 * (length * width + width * height + length * height)\n\n\ndef surface_area_tuple(cuboid: Tuple[int, int, int]) -> int:\n    \"\"\"Calculates the surface area of a cuboid.\n\n    Args:\n        cuboid (Tuple[int, int, int]): a tuple containing the length,\n        width, and height of the cuboid.\n\n    Returns:\n        int: the surface area of the cuboid.\n    \"\"\"\n    return surface_area(cuboid[0], cuboid[1], cuboid[2])\n\n\ndef surface_area_list(cuboid: list) -> int:\n    \"\"\"Calculates the surface area of a cuboid.\n\n    Args:\n        cuboid (list): a list containing the length, width, and height of\n        the cuboid.\n\n    Returns:\n        int: the surface area of the cuboid.\n    \"\"\"\n    return surface_area(cuboid[0], cuboid[1], cuboid[2])\n\n\ndef surface_area_dict(cuboid: dict) -> int:\n    \"\"\"Calculates the surface area of a cuboid.\n\n    Args:\n        cuboid (dict): a dictionary containing the length, width, and height of\n        the cuboid.\n\n    Returns:\n        int: the surface area of the cuboid.\n    \"\"\"\n    return surface_area(cuboid[\"length\"], cuboid[\"width\"], cuboid[\"height\"])"
    },
    {
      "rank": 3,
      "score": 10.0,
      "candidate": "def surface_area(length, width, height):\n    \"\"\"\n    >>> surface_area(1, 2, 4)\n    24\n    >>> surface_area(2, 3, 4)\n    48\n    \"\"\"\n    return 2 * (length * width + width * height + height * length)\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 4,
      "score": 10.0,
      "candidate": "def surface_area(l, w, h):\n    return 2 * (l * w + w * h + l * h)\n\n\nif __name__ == '__main__':\n    print(surface_area(2, 2, 3))"
    },
    {
      "rank": 5,
      "score": 10.0,
      "candidate": "def surface_area(l, w, h):\n    return 2 * (l * w + w * h + l * h)\n\n\ndef main():\n    print(surface_area(1, 2, 3))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 6,
      "score": 10.0,
      "candidate": "import unittest\n\ndef surface_area(length, width, height):\n    return 2 * (length * width + width * height + length * height)\n\nclass TestSurfaceArea(unittest.TestCase):\n    def test_surface_area(self):\n        self.assertEqual(surface_area(1, 1, 1), 6)\n        self.assertEqual(surface_area(1, 2, 3), 12)\n        self.assertEqual(surface_area(1, 2, 3.5), 14)\n        self.assertEqual(surface_area(3, 4, 5), 72)\n        self.assertEqual(surface_area(3, 4, 5.5), 78)\n\nif __name__ == \"__main__\":\n    unittest.main()"
    },
    {
      "rank": 7,
      "score": 10.0,
      "candidate": "def surface_area(width, length, height):\n    \"\"\"\n    >>> surface_area(1, 2, 3)\n    5\n    >>> surface_area(1, 2, 1)\n    6\n    >>> surface_area(3, 2, 1)\n    12\n    \"\"\"\n    return 2 * (width * length + width * height + length * height)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 8,
      "score": 10.0,
      "candidate": "from typing import List\n\n\ndef surface_area(length: int, width: int, height: int) -> int:\n    \"\"\"Return the surface area of the cuboid.\n\n    >>> surface_area(2, 2, 2)\n    24\n    >>> surface_area(5, 5, 5)\n    75\n    \"\"\"\n    return 2 * (length * width + width * height + height * length)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 9,
      "score": 10.0,
      "candidate": "def surface_area(width, height, depth):\n    return (2*(width*height + width*depth + height*depth))\n\nprint(surface_area(1, 2, 3))"
    },
    {
      "rank": 10,
      "score": 10.0,
      "candidate": "def surface_area(width, length, height):\n    return (2 * (width * length + length * height + width * height))\n\n\"\"\"\nWrite a function to find the volume of a cuboid.\n\"\"\"\n\ndef volume(width, length, height):\n    return width * length * height\n\n\"\"\"\nWrite a function to find the amount of water in a cuboid.\n\"\"\"\n\ndef water(width, length, height):\n    return height * (length * width) / 3\n\n\"\"\"\nWrite a function to find the total amount of cuboids that fit in a certain\nvolume.\n\"\"\"\n\ndef cuboids(width, length, height, volume):\n    return volume // (width * length * height)"
    },
    {
      "rank": 11,
      "score": 10.0,
      "candidate": "from typing import Tuple\n\n\ndef surface_area(l: int, w: int, h: int) -> int:\n    \"\"\"\n    :param l: length of the cuboid\n    :param w: width of the cuboid\n    :param h: height of the cuboid\n    :return: surface area of the cuboid\n    >>> surface_area(2, 2, 2)\n    12\n    >>> surface_area(1, 2, 3)\n    14\n    >>> surface_area(2, 2, 3)\n    22\n    >>> surface_area(3, 2, 4)\n    34\n    >>> surface_area(3, 4, 2)\n    26\n    \"\"\"\n    return 2 * (l * w + w * h + h * l)\n\n\ndef surface_area_naive(l: int, w: int, h: int) -> int:\n    \"\"\"\n    This is a naive solution\n    :param l: length of the cuboid\n    :param w: width of the cuboid\n    :param h: height of the cuboid\n    :return: surface area of the cuboid\n    >>> surface_area_naive(2, 2, 2)\n    12\n    >>> surface_area_naive(1, 2, 3)\n    14\n    >>> surface_area_naive(2, 2, 3)\n    22\n    >>> surface_area_naive(3, 2, 4)\n    34\n    >>> surface_area_naive(3, 4, 2)\n    26\n    \"\"\"\n    return 2 * l * w + 2 * w * h + 2 * h * l\n\n\ndef surface_area_tuple(dim: Tuple[int, int, int]) -> int:\n    \"\"\"\n    This is a function which accepts a tuple as an argument\n    :param dim: length, width and height of the cuboid\n    :return: surface area of the cuboid\n    >>> surface_area_tuple((2, 2, 2))\n    12\n    >>> surface_area_tuple((1, 2, 3"
    },
    {
      "rank": 12,
      "score": 10.0,
      "candidate": "def surface_area(length: int, width: int, height: int) -> float:\n    \"\"\"\n    >>> surface_area(2, 2, 2)\n    12.0\n    >>> surface_area(1, 1, 1)\n    6.0\n    >>> surface_area(1, 1, 2)\n    10.0\n    >>> surface_area(2, 1, 1)\n    10.0\n    >>> surface_area(2, 2, 1)\n    10.0\n    >>> surface_area(1, 2, 1)\n    10.0\n    >>> surface_area(1, 2, 2)\n    14.0\n    >>> surface_area(2, 2, 1)\n    10.0\n    \"\"\"\n    return 2 * (length * width + width * height + length * height)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 13,
      "score": 10.0,
      "candidate": "from math import pow\n\ndef surface_area(l, w, h):\n    \"\"\"\n    Calculates the surface area of a cuboid.\n    \"\"\"\n    return 2 * (l * w + l * h + w * h)"
    },
    {
      "rank": 14,
      "score": 10.0,
      "candidate": "def surface_area(width: int, height: int, depth: int) -> int:\n    \"\"\"\n    :param width: width of the cuboid\n    :param height: height of the cuboid\n    :param depth: depth of the cuboid\n    :return: surface area of the cuboid\n    >>> surface_area(2, 2, 2)\n    24\n    >>> surface_area(1, 2, 3)\n    18\n    >>> surface_area(1, 2, 3) == surface_area(2, 2, 1) == surface_area(2, 1, 2) == surface_area(1, 1, 2)\n    True\n    >>> surface_area(1, 2, 3) == surface_area(3, 2, 1) == surface_area(2, 1, 3) == surface_area(3, 1, 2)\n    True\n    >>> surface_area(1, 2, 3) == surface_area(3, 2, 1) == surface_area(2, 1, 3) == surface_area(3, 1, 2)\n    True\n    \"\"\"\n    return 2 * (width * height + width * depth + height * depth)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 15,
      "score": 10.0,
      "candidate": "def surface_area(width, length, height):\n    return 2 * (width * length + width * height + length * height)\n\nprint(surface_area(2, 2, 3))"
    },
    {
      "rank": 16,
      "score": 10.0,
      "candidate": "def surface_area(length: int, width: int, height: int) -> int:\n    \"\"\"\n    >>> surface_area(1, 1, 1)\n    6\n    >>> surface_area(1, 2, 2)\n    12\n    >>> surface_area(1, 2, 1)\n    6\n    >>> surface_area(2, 2, 2)\n    24\n    >>> surface_area(1, 2, 3)\n    18\n    >>> surface_area(2, 2, 4)\n    32\n    >>> surface_area(3, 3, 3)\n    54\n    >>> surface_area(3, 3, 2)\n    27\n    >>> surface_area(3, 4, 2)\n    24\n    >>> surface_area(2, 2, 3)\n    12\n    >>> surface_area(2, 3, 3)\n    18\n    \"\"\"\n    return 2 * (length * width + width * height + length * height)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 17,
      "score": 10.0,
      "candidate": "def surface_area(length: int, width: int, height: int) -> int:\n    \"\"\"Return surface area of a cuboid.\"\"\"\n    return 2 * (length * width + length * height + width * height)"
    },
    {
      "rank": 18,
      "score": 9.0,
      "candidate": "def surface_area(length, width, height):\n    return (2 * length * width) + (2 * width * height) + (2 * length * height)"
    },
    {
      "rank": 19,
      "score": 8.0,
      "candidate": "def surface_area(l, w, h):\n    return 2*(l*w+w*h+h*l)\n\nif __name__ == '__main__':\n    print(surface_area(2, 2, 3))"
    },
    {
      "rank": 20,
      "score": 8.0,
      "candidate": "import math\n\ndef surface_area(width, length, height):\n    return 2 * (width * length + width * height + length * height)\n\n\nif __name__ == '__main__':\n    print(surface_area(3, 2, 1))"
    },
    {
      "rank": 21,
      "score": 8.0,
      "candidate": "def surface_area(length, width, height):\n    return 2 * (length * width + width * height + length * height)\n\n\nif __name__ == '__main__':\n    print(surface_area(2, 2, 2))"
    },
    {
      "rank": 22,
      "score": 8.0,
      "candidate": "def surface_area(l, w, h):\n    return 2 * (l * w + w * h + h * l)"
    },
    {
      "rank": 23,
      "score": 8.0,
      "candidate": "def surface_area(width, height, depth):\n    return 2 * (width * height + height * depth + width * depth)\n\n\nif __name__ == '__main__':\n    print(surface_area(2, 2, 2))"
    },
    {
      "rank": 24,
      "score": 8.0,
      "candidate": "def surface_area(length, width, height):\n    return 2 * (length * width + width * height + length * height)"
    },
    {
      "rank": 25,
      "score": 8.0,
      "candidate": "def surface_area(width, height, depth):\n    return 2 * (width * height + height * depth + width * depth)"
    },
    {
      "rank": 26,
      "score": 8.0,
      "candidate": "def surface_area(length, width, height):\n    return 2 * (length * width + width * height + length * height)\n\ndef surface_area_alt(length, width, height):\n    return 6 * (length + width + height)"
    },
    {
      "rank": 27,
      "score": 8.0,
      "candidate": "def surface_area(length, width, height):\n    \"\"\"\n    >>> surface_area(4, 5, 6)\n    224\n    >>> surface_area(1, 1, 1)\n    6\n    >>> surface_area(-1, 2, 3)\n    Traceback (most recent call last):\n        ...\n    ValueError: length, width and height must be non-negative\n    \"\"\"\n    if length < 0 or width < 0 or height < 0:\n        raise ValueError(\"length, width and height must be non-negative\")\n    return 2 * (length * width + width * height + height * length)\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 28,
      "score": 8.0,
      "candidate": "def surface_area(width, height, depth):\n    return (2 * width * height) + (2 * height * depth) + (2 * width * depth)\n\ndef surface_area_2(width, height, depth):\n    return (width * height) + (width * depth) + (height * depth)"
    },
    {
      "rank": 29,
      "score": 8.0,
      "candidate": "def surface_area(width, height, length):\n    return 2 * (width * length + height * length + width * height)\n\nassert surface_area(1, 2, 3) == 24, \"First\"\nassert surface_area(1, 2, 1) == 6, \"Second\"\nassert surface_area(1, 1, 1) == 6, \"Third\"\nassert surface_area(2, 2, 2) == 52, \"Fourth\"\nassert surface_area(3, 2, 1) == 30, \"Fifth\""
    },
    {
      "rank": 30,
      "score": 8.0,
      "candidate": "def surfaceArea(a, b, c):\n    return 2 * (a * b + b * c + c * a)"
    },
    {
      "rank": 31,
      "score": 8.0,
      "candidate": "import math\n\ndef surface_area(a,b,c):\n    return 2*(a*b+a*c+b*c)\n\nif __name__ == '__main__':\n    a, b, c = [int(x) for x in input().split()]\n    print(surface_area(a, b, c))"
    },
    {
      "rank": 32,
      "score": 8.0,
      "candidate": "def surfaceArea(A, B, C):\n    return 2*A*B + 2*A*C + 2*B*C\n\n\nprint(surfaceArea(1, 2, 3))\nprint(surfaceArea(3, 2, 1))\nprint(surfaceArea(1, 1, 1))\nprint(surfaceArea(2, 2, 2))"
    },
    {
      "rank": 33,
      "score": 8.0,
      "candidate": "def surface_area(length, width, height):\n    return 2 * (length * width + width * height + length * height)\n\nprint(surface_area(4, 5, 6))\nprint(surface_area(10, 10, 10))"
    },
    {
      "rank": 34,
      "score": 8.0,
      "candidate": "def surface_area(length, width, height):\n    return 2 * (length * width + width * height + length * height)\n\n\nif __name__ == '__main__':\n    l = int(input('Enter length: '))\n    w = int(input('Enter width: '))\n    h = int(input('Enter height: '))\n    print(f'Surface Area: {surface_area(l, w, h)}')"
    },
    {
      "rank": 35,
      "score": 8.0,
      "candidate": "def surface_area(width, height, length):\n    return 2 * (width * length + height * length + width * height)\n\n\nif __name__ == '__main__':\n    print(surface_area(3, 2, 1))"
    },
    {
      "rank": 36,
      "score": 8.0,
      "candidate": "def surface_area(length, width, height):\n    \"\"\"Calculates the surface area of a cuboid.\"\"\"\n    return 2 * (length * width + width * height + height * length)\n\nprint(surface_area(4, 5, 6))"
    },
    {
      "rank": 37,
      "score": 8.0,
      "candidate": "def surface_area(length, width, height):\n    return 2 * (length * width + width * height + length * height)\n\n\ndef main():\n    length = int(input(\"Enter the length: \"))\n    width = int(input(\"Enter the width: \"))\n    height = int(input(\"Enter the height: \"))\n    print(f\"The surface area of the cuboid is {surface_area(length, width, height)}\")\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 38,
      "score": 8.0,
      "candidate": "def surface_area(length, width, height):\n    return 2 * (length * width + width * height + length * height)\n\nprint(surface_area(3, 2, 1))"
    },
    {
      "rank": 39,
      "score": 8.0,
      "candidate": "def surface_area(length, width, height):\n    return (length * width + length * height + width * height) * 2\n\n\nprint(surface_area(1, 2, 3))"
    },
    {
      "rank": 40,
      "score": 8.0,
      "candidate": "def surface_area(width, length, height):\n    return (2 * (width * length + width * height + length * height))\n\n\nassert surface_area(1, 2, 3) == 18, \"First\"\nassert surface_area(1, 2, 1) == 6, \"Second\"\nassert surface_area(2, 1, 1) == 6, \"Third\"\nassert surface_area(1, 1, 1) == 6, \"Fourth\""
    },
    {
      "rank": 41,
      "score": 8.0,
      "candidate": "def surface_area(length, width, height):\n    return 2 * (length * width + width * height + length * height)\n\n\nif __name__ == '__main__':\n    print(surface_area(1, 2, 3))"
    },
    {
      "rank": 42,
      "score": 8.0,
      "candidate": "def surface_area(length, width, height):\n    return 2 * (length * width + width * height + length * height)\n\nprint(surface_area(1, 2, 3))"
    },
    {
      "rank": 43,
      "score": 8.0,
      "candidate": "def surface_area(width, length, height):\n    return 2 * (width * length + width * height + length * height)\n\n\nif __name__ == '__main__':\n    print(surface_area(2, 2, 2))"
    },
    {
      "rank": 44,
      "score": 8.0,
      "candidate": "def surface_area(width, length, height):\n    return 2 * (width * length + width * height + length * height)\n\n\nif __name__ == '__main__':\n    print(surface_area(2, 2, 2))"
    },
    {
      "rank": 45,
      "score": 8.0,
      "candidate": "def surface_area(a, b, c):\n    \"\"\"\n    >>> surface_area(1, 1, 1)\n    6\n    >>> surface_area(1, 2, 3)\n    54\n    \"\"\"\n    return 2 * (a * b + a * c + b * c)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 46,
      "score": 8.0,
      "candidate": "def get_surface_area(length, width, height):\n    return 2 * (length * width + width * height + length * height)\n\nif __name__ == '__main__':\n    l = int(input('Enter length: '))\n    w = int(input('Enter width: '))\n    h = int(input('Enter height: '))\n\n    print(get_surface_area(l, w, h))"
    },
    {
      "rank": 47,
      "score": 8.0,
      "candidate": "def surface_area(length, width, height):\n    return 2 * (length * width + width * height + length * height)"
    },
    {
      "rank": 48,
      "score": 8.0,
      "candidate": "from math import sqrt\n\ndef surface_area(l, w, h):\n    \"\"\"\n    Finds the surface area of a cuboid.\n\n    Args:\n    1. Length of the cuboid.\n    2. Width of the cuboid.\n    3. Height of the cuboid.\n    \"\"\"\n\n    # Finds the surface area of the cuboid.\n    s_area = 2 * (l * w + w * h + h * l)\n\n    return s_area\n\nif __name__ == '__main__':\n    # The length, width and height of the cuboid.\n    l = 10\n    w = 10\n    h = 10\n\n    print(f\"The surface area of a cuboid with length {l}, width {w}, and height {h} is {surface_area(l, w, h)}.\")"
    },
    {
      "rank": 49,
      "score": 8.0,
      "candidate": "def get_surface_area(width, length, height):\n    return 2 * (width * length + width * height + length * height)\n\n\nif __name__ == '__main__':\n    print(get_surface_area(2, 2, 2))"
    },
    {
      "rank": 50,
      "score": 8.0,
      "candidate": "def surfaceArea(A, B, C):\n    return 2 * (A * B + A * C + B * C)\n\nA = 2\nB = 3\nC = 1\nprint(surfaceArea(A, B, C))"
    },
    {
      "rank": 51,
      "score": 8.0,
      "candidate": "def surface_area(l, w, h):\n    return (2 * (l * w + w * h + l * h))\n\n\nassert surface_area(2, 2, 2) == 12, \"Should be 12\"\nassert surface_area(5, 5, 5) == 150, \"Should be 150\"\nassert surface_area(10, 10, 10) == 300, \"Should be 300\""
    },
    {
      "rank": 52,
      "score": 8.0,
      "candidate": "def surface_area(length, width, height):\n    \"\"\"\n    Calculates the surface area of a cuboid.\n    \"\"\"\n    return (2 * (length * width + width * height + length * height))\n\n\ndef surface_area_alt(length, width, height):\n    \"\"\"\n    Calculates the surface area of a cuboid.\n    \"\"\"\n    return 6 * (length * width + width * height + length * height) / 2"
    },
    {
      "rank": 53,
      "score": 8.0,
      "candidate": "def surface_area(length, width, height):\n    return 2*(length*width+width*height+height*length)\n\n\nif __name__ == '__main__':\n    length = float(input('Enter length: '))\n    width = float(input('Enter width: '))\n    height = float(input('Enter height: '))\n    print(f'Surface Area: {surface_area(length, width, height)}')"
    },
    {
      "rank": 54,
      "score": 8.0,
      "candidate": "def surface_area(length, width, height):\n    return 2 * (length * width + width * height + length * height)\n\n\nassert surface_area(2, 2, 2) == 12, \"First\"\nassert surface_area(1, 2, 3) == 10, \"Second\"\nassert surface_area(4, 3, 2) == 36, \"Third\""
    },
    {
      "rank": 55,
      "score": 8.0,
      "candidate": "def surface_area(width, length, height):\n    return 2 * (width * length + width * height + length * height)\n\nassert surface_area(1, 1, 1) == 6\nassert surface_area(1, 2, 3) == 18\nassert surface_area(1, 2, 3) == 18\nassert surface_area(2, 3, 4) == 52\nassert surface_area(3, 4, 5) == 78"
    },
    {
      "rank": 56,
      "score": 8.0,
      "candidate": "def surface_area(a,b,c):\n    return 2*(a*b + b*c + c*a)\n\nif __name__ == '__main__':\n    print(surface_area(1, 2, 3))"
    },
    {
      "rank": 57,
      "score": 8.0,
      "candidate": "import math\n\ndef surface_area(width, depth, height):\n    # Calculate the surface area of the cuboid\n    return 2 * (width * depth + depth * height + width * height)\n\n\nif __name__ == '__main__':\n    w = float(input('Width: '))\n    d = float(input('Depth: '))\n    h = float(input('Height: '))\n    print(f'The surface area of the cuboid is {surface_area(w, d, h)}')"
    },
    {
      "rank": 58,
      "score": 8.0,
      "candidate": "def surface_area(width, depth, height):\n    return 2 * (width * depth + width * height + depth * height)\n\nassert surface_area(1, 2, 3) == 18, \"First\"\nassert surface_area(1, 2, 1) == 6, \"Second\"\nassert surface_area(3, 1, 4) == 36, \"Third\"\nassert surface_area(2, 3, 1) == 18, \"Fourth\""
    },
    {
      "rank": 59,
      "score": 8.0,
      "candidate": "from math import pow\n\ndef surfaceArea(length, width, height):\n\treturn 2 * (length * width + width * height + length * height)\n\nprint(surfaceArea(2, 2, 2))\nprint(surfaceArea(1, 2, 3))"
    },
    {
      "rank": 60,
      "score": 1.0,
      "candidate": "from typing import Tuple\n\n\ndef surface_area(length: int, width: int, height: int) -> int:\n    \"\"\"Compute the surface area of a cuboid.\n\n    >>> surface_area(1, 2, 3)\n    18\n    >>> surface_area(1, 2, 1)\n    6\n    >>> surface_area(3, 2, 1)\n    20\n    >>> surface_area(1, 2, 3)\n    18\n    >>> surface_area(2, 1, 3)\n    22\n    \"\"\"\n    return 2 * (length * width + width * height + height * length)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 61,
      "score": 1.0,
      "candidate": "def surface_area(width, length, height):\n    return (2 * (width * length + width * height + length * height))\n\nprint(surface_area(2, 2, 2)) # 12\nprint(surface_area(1, 2, 3)) # 10\nprint(surface_area(4, 3, 2)) # 32\n\n\n\"\"\"\nWrite a function to find the volume of a cuboid.\n\"\"\"\n\ndef volume(width, length, height):\n    return width * length * height\n\nprint(volume(2, 2, 2)) # 8\nprint(volume(1, 2, 3)) # 6\nprint(volume(4, 3, 2)) # 24\n\n\n\"\"\"\nWrite a function to find the total surface area of a sphere.\n\"\"\"\n\ndef sphere_surface_area(radius):\n    return (4 * 3.14 * radius * radius)\n\nprint(sphere_surface_area(1)) # 12.56\nprint(sphere_surface_area(2)) # 50.24\nprint(sphere_surface_area(3)) # 94.08\n\n\n\"\"\"\nWrite a function to find the total volume of a sphere.\n\"\"\"\n\ndef sphere_volume(radius):\n    return (4/3) * 3.14 * radius * radius * radius\n\nprint(sphere_volume(1)) # 4.188\nprint(sphere_volume(2)) # 33.51\nprint(sphere_volume(3)) # 81.13\n\n\n\"\"\"\nWrite a function to find the area of a trapezoid.\n\"\"\"\n\ndef trapezoid_area(base_short, base_long, height):\n    return ((base_short + base_long) / 2) * height\n\nprint(trapezoid_area(2, 3, 3)) # 9\nprint(trapezoid_area(4, 5, 4)) # 20\nprint(trapezoid_area(3,"
    },
    {
      "rank": 62,
      "score": 1.0,
      "candidate": "def surface_area(l, w, h):\n    return (2 * (l * w + w * h + h * l))\n\n\nassert surface_area(2, 2, 2) == 12, \"Your function is wrong\""
    },
    {
      "rank": 63,
      "score": 1.0,
      "candidate": "import math\n\n\ndef surface_area(length: int, width: int, height: int) -> float:\n    \"\"\"Finds the surface area of a cuboid.\n\n    Args:\n        length (int): The length of the cuboid.\n        width (int): The width of the cuboid.\n        height (int): The height of the cuboid.\n\n    Returns:\n        float: The surface area of the cuboid.\n    \"\"\"\n    return (\n        2 * (length * width + width * height + length * height)\n        + (length * width + width * height + length * height)\n    )\n\n\nif __name__ == \"__main__\":\n    print(surface_area(1, 2, 3))"
    },
    {
      "rank": 64,
      "score": 1.0,
      "candidate": "def surface_area(length, width, height):\n    \"\"\"Calculates the surface area of a cuboid.\n\n    Args:\n        length (int): The length of the cuboid.\n        width (int): The width of the cuboid.\n        height (int): The height of the cuboid.\n\n    Returns:\n        int: The surface area of the cuboid.\n    \"\"\"\n    return 2 * (length * width + width * height + length * height)\n\n\nif __name__ == '__main__':\n    length = 10\n    width = 12\n    height = 15\n\n    surface = surface_area(length, width, height)\n\n    print(surface)"
    },
    {
      "rank": 65,
      "score": 1.0,
      "candidate": "def surface_area(length, width, height):\n    return (2*(length*width + width*height + length*height))\n\n\nprint(surface_area(2, 2, 3))\nprint(surface_area(1, 2, 3))"
    },
    {
      "rank": 66,
      "score": 1.0,
      "candidate": "from unittest import TestCase\n\n\ndef surface_area(width, height, length):\n    return 2 * (width * height + width * length + height * length)\n\n\nclass TestSurfaceArea(TestCase):\n    def test_surface_area(self):\n        assert surface_area(1, 1, 1) == 6\n        assert surface_area(2, 2, 2) == 52"
    },
    {
      "rank": 67,
      "score": 1.0,
      "candidate": "from typing import List\n\n\ndef get_surface_area(length: int, width: int, height: int) -> int:\n    \"\"\"Return surface area of cuboid.\n\n    :param length: length of cuboid\n    :param width: width of cuboid\n    :param height: height of cuboid\n    :return: surface area of cuboid\n    \"\"\"\n    return (length * width) + (length * height) + (width * height)\n\n\ndef get_surface_area_naive(length: int, width: int, height: int) -> int:\n    \"\"\"Return surface area of cuboid.\n\n    :param length: length of cuboid\n    :param width: width of cuboid\n    :param height: height of cuboid\n    :return: surface area of cuboid\n    \"\"\"\n    return (2 * length * width) + (2 * length * height) + (2 * width * height)\n\n\ndef get_surface_area_by_lwh(length: int, width: int, height: int) -> int:\n    \"\"\"Return surface area of cuboid.\n\n    :param length: length of cuboid\n    :param width: width of cuboid\n    :param height: height of cuboid\n    :return: surface area of cuboid\n    \"\"\"\n    return (2 * length * width) + (2 * width * height) + (2 * length * height)\n\n\ndef get_surface_area_by_lwh_naive(length: int, width: int, height: int) -> int:\n    \"\"\"Return surface area of cuboid.\n\n    :param length: length of cuboid\n    :param width: width of cuboid\n    :param height: height of cuboid\n    :return: surface area of cuboid\n    \"\"\"\n    return 2 * (length * width + width * height + height * length)\n\n\ndef get_surface_area_by_lwh_naive_2(length: int, width: int, height: int) -> int:\n    \"\"\"Return surface area of cuboid.\n\n    :param length: length of cuboid\n    :param width: width of cuboid\n    :param height: height of cuboid\n    :return"
    },
    {
      "rank": 68,
      "score": 1.0,
      "candidate": "from typing import Union\n\n\ndef surface_area(length: Union[int, float], width: Union[int, float], height: Union[int, float]) -> Union[int, float]:\n    \"\"\"Calculates the surface area of a cuboid.\n\n    Args:\n        length: the length of the cuboid.\n        width: the width of the cuboid.\n        height: the height of the cuboid.\n\n    Examples:\n        >>> assert surface_area(2, 2, 2) == 12\n    \"\"\"\n    return 2 * (length * width + width * height + length * height)\n\n\ndef surface_area_with_string(length: str, width: str, height: str) -> Union[int, float]:\n    \"\"\"Calculates the surface area of a cuboid.\n\n    Args:\n        length: the length of the cuboid.\n        width: the width of the cuboid.\n        height: the height of the cuboid.\n\n    Examples:\n        >>> assert surface_area_with_string(\"2\", \"2\", \"2\") == 12\n    \"\"\"\n    return surface_area(float(length), float(width), float(height))"
    },
    {
      "rank": 69,
      "score": 1.0,
      "candidate": "def surface_area(l, w, h):\n    return (2 * (l * w + w * h + h * l))\n\nprint(surface_area(2, 2, 2)) # 12\nprint(surface_area(1, 2, 3)) # 10\nprint(surface_area(3, 2, 1)) # 10\nprint(surface_area(1, 2, 3)) # 10\nprint(surface_area(4, 3, 2)) # 36"
    },
    {
      "rank": 70,
      "score": 1.0,
      "candidate": "def surface_area(length, width, height):\n    return (2 * length * width) + (2 * width * height) + (2 * length * height)\n\nprint(surface_area(2, 2, 2))"
    },
    {
      "rank": 71,
      "score": 1.0,
      "candidate": "def surface_area(l, b, h):\n    return 2 * (l * b + b * h + l * h)\n\n\nif __name__ == '__main__':\n    print(surface_area(1, 2, 3))"
    },
    {
      "rank": 72,
      "score": 1.0,
      "candidate": "def surface_area(l, w, h):\n    return (2 * (l * w + w * h + h * l))\n\nprint(surface_area(2, 2, 3))\nprint(surface_area(4, 4, 4))"
    },
    {
      "rank": 73,
      "score": 1.0,
      "candidate": "def surface_area(length, width, height):\n    return 2 * (length * width + width * height + height * length)\n\n\n\"\"\"\nWrite a function to calculate the total surface area of a sphere.\n\"\"\"\ndef surface_area_sphere(radius):\n    return 4 * 3.1415 * radius**2\n\n\n\"\"\"\nWrite a function to calculate the total surface area of a hemisphere.\n\"\"\"\ndef surface_area_hemisphere(radius):\n    return 3 * 3.1415 * radius**2\n\n\n\"\"\"\nWrite a function to calculate the total surface area of a cone.\n\"\"\"\ndef surface_area_cone(radius, height):\n    return 3.1415 * radius * (radius + (height ** 2) ** 0.5)\n\n\n\"\"\"\nWrite a function to calculate the total surface area of a cylinder.\n\"\"\"\ndef surface_area_cylinder(radius, height):\n    return 2 * 3.1415 * radius * (radius + height)\n\n\n\"\"\"\nWrite a function to calculate the total surface area of a torus.\n\"\"\"\ndef surface_area_torus(small_radius, big_radius):\n    return 4 * 3.1415 * (small_radius + big_radius) * (small_radius + (big_radius**2) ** 0.5)\n\n\n\"\"\"\nWrite a function to calculate the total surface area of a dodecahedron.\n\"\"\"\ndef surface_area_dodecahedron(radius):\n    return (3 * 3.1415 * radius**2) / (sqrt(2) + sqrt(3))\n\n\n\"\"\"\nWrite a function to calculate the total surface area of a icosahedron.\n\"\"\"\ndef surface_area_icosahedron(radius):\n    return (5 * 3.1415 * radius**2) / (sqrt(5) + sqrt(3))"
    },
    {
      "rank": 74,
      "score": 1.0,
      "candidate": "def surface_area(a, b, c):\n    return 2 * (a * b + b * c + c * a)\n\n\nprint(surface_area(1, 2, 3))"
    },
    {
      "rank": 75,
      "score": 1.0,
      "candidate": "from typing import Union\n\n\ndef surface_area(width: int, height: int, depth: int) -> int:\n    \"\"\"\n    >>> surface_area(2, 2, 2)\n    24\n    \"\"\"\n    return 2 * (width * height + height * depth + depth * width)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 76,
      "score": 1.0,
      "candidate": "import unittest\n\n\ndef surface_area(length, width, height):\n    return 2 * (length * width + width * height + length * height)\n\n\nclass TestSurfaceArea(unittest.TestCase):\n    def test_surface_area(self):\n        self.assertEqual(surface_area(2, 2, 2), 12)\n        self.assertEqual(surface_area(1, 2, 3), 10)\n        self.assertEqual(surface_area(3, 2, 1), 10)\n        self.assertEqual(surface_area(1, 2, 3), 10)\n\n\nif __name__ == \"__main__\":\n    unittest.main()"
    },
    {
      "rank": 77,
      "score": 1.0,
      "candidate": "import unittest\n\n\ndef surface_area(width: int, height: int, depth: int) -> int:\n    \"\"\"Find the surface area of a cuboid.\n\n    Args:\n        width (int): width of the cuboid.\n        height (int): height of the cuboid.\n        depth (int): depth of the cuboid.\n\n    Returns:\n        int: surface area of the cuboid.\n    \"\"\"\n    return 2 * (width * height + width * depth + height * depth)\n\n\nclass TestSurfaceArea(unittest.TestCase):\n\n    def test_surface_area(self):\n        self.assertEqual(surface_area(1, 1, 1), 6)\n        self.assertEqual(surface_area(2, 2, 2), 58)\n        self.assertEqual(surface_area(1, 2, 3), 58)\n        self.assertEqual(surface_area(3, 2, 1), 58)\n\n\nif __name__ == \"__main__\":\n    unittest.main()"
    },
    {
      "rank": 78,
      "score": 1.0,
      "candidate": "def surface_area(length, width, height):\n    return 2 * (length * width + width * height + length * height)\n\n\nprint(surface_area(1, 2, 3))"
    },
    {
      "rank": 79,
      "score": 1.0,
      "candidate": "def surface_area(l, b, h):\n    return 2 * (l * b + b * h + l * h)\n\n\nif __name__ == '__main__':\n    print(surface_area(2, 2, 2))"
    },
    {
      "rank": 80,
      "score": 1.0,
      "candidate": "def surface_area(width, length, height):\n    return 2 * (width * length + width * height + length * height)\n\n\"\"\"\nWrite a function to find the volume of a cuboid.\n\"\"\"\n\ndef volume(width, length, height):\n    return width * length * height\n\n\"\"\"\nWrite a function to find the surface area of a sphere.\n\"\"\"\n\nfrom math import pi\n\ndef surface_area_sphere(radius):\n    return 4 * pi * radius ** 2\n\n\"\"\"\nWrite a function to find the surface area of a hemisphere.\n\"\"\"\n\ndef surface_area_hemisphere(radius):\n    return 2 * pi * radius ** 2\n\n\"\"\"\nWrite a function to find the volume of a sphere.\n\"\"\"\n\ndef volume_sphere(radius):\n    return (4 / 3) * pi * radius ** 3\n\n\"\"\"\nWrite a function to find the volume of a hemisphere.\n\"\"\"\n\ndef volume_hemisphere(radius):\n    return (2 / 3) * pi * radius ** 3\n\n\"\"\"\nWrite a function to find the surface area of a cylinder.\n\"\"\"\n\ndef surface_area_cylinder(radius, height):\n    return 2 * pi * radius * (radius + height)\n\n\"\"\"\nWrite a function to find the volume of a cylinder.\n\"\"\"\n\ndef volume_cylinder(radius, height):\n    return pi * radius ** 2 * height"
    },
    {
      "rank": 81,
      "score": 1.0,
      "candidate": "from math import sqrt\n\n\ndef surface_area(width, height, depth):\n    return 2 * (width * height + width * depth + height * depth)\n\n\ndef surface_area_alt(width, height, depth):\n    return 2 * (width * height + width * depth + height * depth)\n\n\ndef surface_area_alt_2(width, height, depth):\n    return 2 * (width * height + width * depth + height * depth)\n\n\ndef surface_area_alt_3(width, height, depth):\n    return 2 * (width * height + width * depth + height * depth)\n\n\ndef surface_area_alt_4(width, height, depth):\n    return 2 * (width * height + width * depth + height * depth)\n\n\ndef surface_area_alt_5(width, height, depth):\n    return 2 * (width * height + width * depth + height * depth)\n\n\ndef surface_area_alt_6(width, height, depth):\n    return 2 * (width * height + width * depth + height * depth)\n\n\ndef surface_area_alt_7(width, height, depth):\n    return 2 * (width * height + width * depth + height * depth)\n\n\ndef surface_area_alt_8(width, height, depth):\n    return 2 * (width * height + width * depth + height * depth)\n\n\ndef surface_area_alt_9(width, height, depth):\n    return 2 * (width * height + width * depth + height * depth)\n\n\ndef surface_area_alt_10(width, height, depth):\n    return 2 * (width * height + width * depth + height * depth)\n\n\ndef surface_area_alt_11(width, height, depth):\n    return 2 * (width * height + width * depth + height * depth)\n\n\ndef surface_area_alt_12(width, height, depth):\n    return 2 * (width * height + width * depth + height * depth)\n\n\ndef surface_area_alt_13(width, height, depth):\n    return 2 * (width *"
    },
    {
      "rank": 82,
      "score": 1.0,
      "candidate": "def surface_area(l, b, h):\n    return (2 * (l * b + b * h + l * h))\n\n\nassert surface_area(1, 1, 1) == 6\nassert surface_area(1, 2, 3) == 12\nassert surface_area(2, 2, 3) == 22"
    },
    {
      "rank": 83,
      "score": 1.0,
      "candidate": "def surface_area(length, width, height):\n    return 2 * (length * width + width * height + length * height)\n\n\ndef test_surface_area():\n    \"\"\"\n    >>> surface_area(3, 2, 4)\n    52\n    >>> surface_area(1, 1, 1)\n    6\n    \"\"\"\n    pass"
    },
    {
      "rank": 84,
      "score": 1.0,
      "candidate": "def surface_area(length, width, height):\n    \"\"\"Calculate the surface area of a cuboid.\n\n    Args:\n        length (float): Length of the cuboid.\n        width (float): Width of the cuboid.\n        height (float): Height of the cuboid.\n\n    Returns:\n        float: The surface area of the cuboid.\n    \"\"\"\n\n    return 2 * (length * width + width * height + height * length)"
    },
    {
      "rank": 85,
      "score": 1.0,
      "candidate": "import unittest\n\ndef surface_area(length, width, height):\n    return (2 * (length * width + width * height + height * length))\n\nclass TestSurfaceArea(unittest.TestCase):\n    def test_surface_area(self):\n        self.assertEqual(surface_area(1, 2, 3), 18)\n        self.assertEqual(surface_area(2, 2, 2), 24)\n\nif __name__ == \"__main__\":\n    unittest.main()"
    },
    {
      "rank": 86,
      "score": 1.0,
      "candidate": "def surface_area(length, width, height):\n    return (2*(length*width + width*height + length*height))\n\nprint(surface_area(2,2,2))\n\ndef surface_area2(length, width, height):\n    return (length*width*2 + width*height*2 + length*height*2)\n\nprint(surface_area2(2,2,2))"
    },
    {
      "rank": 87,
      "score": 1.0,
      "candidate": "from unittest import TestCase\n\n\ndef surface_area(width, length, height):\n    return 2 * (width * length + width * height + length * height)\n\n\nclass TestSurfaceArea(TestCase):\n    def test_surface_area(self):\n        assert surface_area(1, 2, 3) == 12\n        assert surface_area(1, 2, 4) == 16"
    },
    {
      "rank": 88,
      "score": 1.0,
      "candidate": "def surface_area(l, w, h):\n    return 2 * (l * w + w * h + h * l)\n\nassert surface_area(2, 2, 2) == 12, \"Your function should return 12\"\nassert surface_area(1, 2, 3) == 10, \"Your function should return 10\"\nassert surface_area(3, 2, 1) == 10, \"Your function should return 10\""
    },
    {
      "rank": 89,
      "score": 1.0,
      "candidate": "from math import pow\n\ndef surface_area(length, width, height):\n    return 2 * (length * width + width * height + length * height)\n\nif __name__ == '__main__':\n    print(\"Example:\")\n    print(surface_area(1, 2, 3))\n\n    #These \"asserts\" using only for self-checking and not necessary for auto-testing\n    assert surface_area(1, 2, 3) == 10\n    assert surface_area(1, 2, 2) == 6\n    assert surface_area(2, 2, 2) == 12\n    print(\"Coding complete? Click 'Check' to earn cool rewards!\")"
    },
    {
      "rank": 90,
      "score": 1.0,
      "candidate": "def surface_area(l, w, h):\n    return 2 * (l * w + w * h + h * l)\n\nassert surface_area(2, 2, 2) == 12, \"Should be 12\"\nassert surface_area(1, 2, 3) == 10, \"Should be 10\"\nassert surface_area(4, 5, 6) == 180, \"Should be 180\""
    },
    {
      "rank": 91,
      "score": 1.0,
      "candidate": "from typing import Tuple\n\n\ndef surface_area(length: int, width: int, height: int) -> int:\n    \"\"\"Returns the surface area of a cuboid.\n\n    >>> surface_area(1, 1, 1)\n    6\n    >>> surface_area(1, 2, 3)\n    12\n    \"\"\"\n    return 2 * (length * width + length * height + width * height)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 92,
      "score": 1.0,
      "candidate": "from typing import List\n\n\ndef surface_area(l: List[int]) -> int:\n    \"\"\"\n    Time Complexity: O(1)\n    Space Complexity: O(1)\n    \"\"\"\n    return (l[0] * l[1] + l[0] * l[2] + l[1] * l[2]) * 2\n\n\nif __name__ == \"__main__\":\n    assert surface_area([2, 2, 2]) == 12"
    },
    {
      "rank": 93,
      "score": 1.0,
      "candidate": "def surface_area(length, width, height):\n    return (2 * (length * width + width * height + length * height))\n\n\"\"\"\nWrite a function to find the volume of a cuboid.\n\"\"\"\ndef volume(length, width, height):\n    return (length * width * height)"
    },
    {
      "rank": 94,
      "score": 1.0,
      "candidate": "def surface_area(length, width, height):\n    \"\"\"\n    :param length: int\n    :param width: int\n    :param height: int\n    :return: int\n    \"\"\"\n    return 2 * (length * width + length * height + width * height)\n\n\ndef main():\n    print(surface_area(1, 2, 3))\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 95,
      "score": 1.0,
      "candidate": "def surface_area(length, width, height):\n    \"\"\"Calculate the surface area of a cuboid.\n\n    Args:\n        length:  The length of the cuboid.\n        width:  The width of the cuboid.\n        height:  The height of the cuboid.\n\n    Returns:\n        The surface area of the cuboid.\n    \"\"\"\n    return (2 * length * width) + (2 * length * height) + (2 * width * height)\n\n\ndef surface_area_with_args(length, width, height):\n    \"\"\"Calculate the surface area of a cuboid.\n\n    Args:\n        length:  The length of the cuboid.\n        width:  The width of the cuboid.\n        height:  The height of the cuboid.\n\n    Returns:\n        The surface area of the cuboid.\n    \"\"\"\n    return (2 * length * width) + (2 * length * height) + (2 * width * height)\n\n\ndef surface_area_with_args_and_kwargs(length, width, height, area=0):\n    \"\"\"Calculate the surface area of a cuboid.\n\n    Args:\n        length:  The length of the cuboid.\n        width:  The width of the cuboid.\n        height:  The height of the cuboid.\n        area:  The area of the cuboid.\n\n    Returns:\n        The surface area of the cuboid.\n    \"\"\"\n    return (2 * length * width) + (2 * length * height) + (2 * width * height)\n\n\ndef surface_area_with_kwargs(length, width, height, area=0):\n    \"\"\"Calculate the surface area of a cuboid.\n\n    Args:\n        length:  The length of the cuboid.\n        width:  The width of the cuboid.\n        height:  The height of the cuboid.\n        area:  The area of the cuboid.\n\n    Returns:\n        The surface area of the cuboid.\n    \"\"\"\n    return (2 * length * width) + (2 * length * height) + (2 * width * height)\n\n\ndef surface_area_with_kwargs_and"
    },
    {
      "rank": 96,
      "score": 1.0,
      "candidate": "def surface_area(length, width, height):\n    return (2 * (length * width + width * height + length * height))\n\nprint(surface_area(2, 2, 2)) # 12\nprint(surface_area(1, 2, 3)) # 10\nprint(surface_area(1, 2, 1)) # 6\nprint(surface_area(2, 2, 3)) # 20\nprint(surface_area(1, 3, 4)) # 30\nprint(surface_area(4, 3, 2)) # 36\nprint(surface_area(3, 4, 2)) # 36\nprint(surface_area(3, 2, 4)) # 36"
    },
    {
      "rank": 97,
      "score": 1.0,
      "candidate": "from typing import Union\n\n\ndef surface_area(length: int, width: int, height: int) -> int:\n    \"\"\"Return the surface area of a cuboid.\n\n    :param length: length of the cuboid\n    :type length: int\n    :param width: width of the cuboid\n    :type width: int\n    :param height: height of the cuboid\n    :type height: int\n    :return: surface area of the cuboid\n    :rtype: int\n    \"\"\"\n    return 2 * (length * width + width * height + length * height)\n\n\nif __name__ == \"__main__\":\n    length = int(input(\"Enter length: \"))\n    width = int(input(\"Enter width: \"))\n    height = int(input(\"Enter height: \"))\n    print(f\"Surface area of the cuboid is {surface_area(length, width, height)}\")"
    },
    {
      "rank": 98,
      "score": 1.0,
      "candidate": "def surface_area(l, w, h):\n    return (\n        2 * (l * w + w * h + h * l)\n        + (l * w + w * h + h * l) / 2\n    )\n\n\nprint(surface_area(1, 2, 3))\nprint(surface_area(3, 2, 1))\nprint(surface_area(2, 3, 1))"
    },
    {
      "rank": 99,
      "score": 1.0,
      "candidate": "def surface_area(length: float, width: float, height: float) -> float:\n    \"\"\"\n    >>> surface_area(1, 1, 1)\n    6.0\n    >>> surface_area(1, 2, 3)\n    30.0\n    >>> surface_area(3, 2, 1)\n    24.0\n    >>> surface_area(1, 2, 3) == surface_area(3, 2, 1)\n    True\n    >>> surface_area(1, 2, 3.0) == surface_area(3.0, 2, 1)\n    True\n    >>> surface_area(1, 2, 3.0) == surface_area(3.0, 2.0, 1.0)\n    True\n    >>> surface_area(1, 2, 3.0) == surface_area(3.0, 2.0, 1)\n    True\n    \"\"\"\n    return (\n        2 * (length * width + width * height + length * height)\n        + (length * width + width * height + length * height)\n    )\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 100,
      "score": 1.0,
      "candidate": "def surface_area(length: int, width: int, height: int) -> float:\n    \"\"\"Calculate surface area of cuboid.\n\n    :param length: Length of cuboid.\n    :param width: Width of cuboid.\n    :param height: Height of cuboid.\n    :return: Surface area of cuboid.\n    \"\"\"\n\n    return (\n        2 * (length * width + width * height + length * height)\n        + (length * width)\n    )\n\n\nif __name__ == \"__main__\":\n    print(surface_area(1, 1, 1))"
    }
  ]
}