{
  "timestamp": "2025-09-14T23:59:55.266845",
  "method": "improved_llm_judge",
  "judge_model": "codellama/CodeLlama-7b-Python-hf",
  "target_model": "codellama-7b",
  "dataset": "mbpp",
  "problem_number": 225,
  "total_candidates": 100,
  "results": [
    {
      "rank": 1,
      "score": 10.0,
      "candidate": "def equilateral_triangles(n):\n    \"\"\"\n    >>> equilateral_triangles(4)\n    1\n    >>> equilateral_triangles(5)\n    2\n    \"\"\"\n    return (n * (n + 1)) // 2\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 2,
      "score": 10.0,
      "candidate": "from math import sqrt\n\n\ndef count_equilateral_triangles(side):\n    \"\"\"\n    >>> count_equilateral_triangles(1)\n    0\n    >>> count_equilateral_triangles(2)\n    0\n    >>> count_equilateral_triangles(3)\n    1\n    >>> count_equilateral_triangles(4)\n    1\n    >>> count_equilateral_triangles(5)\n    2\n    \"\"\"\n    return side // 2 - 1\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 3,
      "score": 10.0,
      "candidate": "class Triangle:\n    def __init__(self, base, height):\n        self.base = base\n        self.height = height\n\n    def __eq__(self, other):\n        return self.base == other.base and self.height == other.height\n\n\ndef count_equilateral_triangles(triangle):\n    \"\"\"\n    >>> triangle = Triangle(6, 6)\n    >>> count_equilateral_triangles(triangle)\n    1\n    >>> triangle = Triangle(6, 5)\n    >>> count_equilateral_triangles(triangle)\n    0\n    >>> triangle = Triangle(5, 6)\n    >>> count_equilateral_triangles(triangle)\n    0\n    >>> triangle = Triangle(6, 6)\n    >>> count_equilateral_triangles(triangle)\n    1\n    >>> triangle = Triangle(6, 6)\n    >>> count_equilateral_triangles(triangle)\n    1\n    >>> triangle = Triangle(6, 6)\n    >>> count_equilateral_triangles(triangle)\n    1\n    >>> triangle = Triangle(6, 6)\n    >>> count_equilateral_triangles(triangle)\n    1\n    >>> triangle = Triangle(6, 6)\n    >>> count_equilateral_triangles(triangle)\n    1\n    >>> triangle = Triangle(6, 6)\n    >>> count_equilateral_triangles(triangle)\n    1\n    >>> triangle = Triangle(6, 6)\n    >>> count_equilateral_triangles(triangle)\n    1\n    \"\"\"\n    count = 0\n    for i in range(1, triangle.base // 3):\n        for j in range(1, triangle.base // 3):\n            for k in range(1, triangle.base // 3):\n                if i + j + k == triangle.base and triangle.base * triangle.base == triangle.height * triangle.height + triangle.height * i * 2:\n                    count += 1\n    return count\n\n\nif __name__ == \"__main__\":\n    import"
    },
    {
      "rank": 4,
      "score": 10.0,
      "candidate": "def equilateral_triangles(length, count=0):\n    \"\"\"\n    >>> equilateral_triangles(3)\n    0\n    >>> equilateral_triangles(4)\n    1\n    >>> equilateral_triangles(5)\n    1\n    >>> equilateral_triangles(6)\n    2\n    >>> equilateral_triangles(7)\n    2\n    >>> equilateral_triangles(8)\n    3\n    >>> equilateral_triangles(9)\n    4\n    >>> equilateral_triangles(10)\n    5\n    >>> equilateral_triangles(11)\n    6\n    >>> equilateral_triangles(12)\n    7\n    >>> equilateral_triangles(13)\n    8\n    >>> equilateral_triangles(14)\n    9\n    >>> equilateral_triangles(15)\n    10\n    >>> equilateral_triangles(16)\n    11\n    >>> equilateral_triangles(17)\n    12\n    >>> equilateral_triangles(18)\n    13\n    >>> equilateral_triangles(19)\n    14\n    >>> equilateral_triangles(20)\n    15\n    \"\"\"\n    if length < 3:\n        return count\n    count = count + 1\n    return equilateral_triangles(length - 1, count)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 5,
      "score": 10.0,
      "candidate": "import math\n\ndef count_equilateral_triangles(sides):\n    # Base condition\n    if sides < 3:\n        return 0\n    # If the length of any side is less than or equal to the half of the base, we cannot form an equilateral triangle\n    if sides < math.ceil(sides/2):\n        return 0\n    # If the length of any side is greater than the square root of the base, we cannot form an equilateral triangle\n    if sides > math.ceil(math.sqrt(sides)):\n        return 0\n\n    count = 0\n    for i in range(1, sides//2+1):\n        if sides-i > i:\n            count += count_equilateral_triangles(sides-i)\n    return count+1\n\ndef main():\n    print(count_equilateral_triangles(10))\n    print(count_equilateral_triangles(11))\n    print(count_equilateral_triangles(12))\n    print(count_equilateral_triangles(13))\n    print(count_equilateral_triangles(14))\n    print(count_equilateral_triangles(15))\n    print(count_equilateral_triangles(16))\n    print(count_equilateral_triangles(17))\n    print(count_equilateral_triangles(18))\n    print(count_equilateral_triangles(19))\n    print(count_equilateral_triangles(20))\n\n\nmain()"
    },
    {
      "rank": 6,
      "score": 10.0,
      "candidate": "def equiTriangle(a):\n    n = a//2\n    res = 0\n    for i in range(n+1):\n        res += ((3*i*i*i)//2)\n\n    return res\n\n\nprint(equiTriangle(10))"
    },
    {
      "rank": 7,
      "score": 10.0,
      "candidate": "def count_equilateral_triangles(n):\n    count = 0\n    for i in range(1, n):\n        for j in range(1, n):\n            if i ** 2 + j ** 2 == (n - i - j) ** 2:\n                count += 1\n    return count\n\n\nprint(count_equilateral_triangles(5))\nprint(count_equilateral_triangles(4))\nprint(count_equilateral_triangles(3))\nprint(count_equilateral_triangles(2))\nprint(count_equilateral_triangles(1))"
    },
    {
      "rank": 8,
      "score": 10.0,
      "candidate": "from math import sqrt\n\n\ndef equilateral_triangles(n):\n    \"\"\"\n    >>> equilateral_triangles(10)\n    4\n    >>> equilateral_triangles(12)\n    3\n    >>> equilateral_triangles(13)\n    2\n    >>> equilateral_triangles(14)\n    1\n    >>> equilateral_triangles(15)\n    0\n    >>> equilateral_triangles(16)\n    0\n    >>> equilateral_triangles(17)\n    0\n    >>> equilateral_triangles(18)\n    0\n    >>> equilateral_triangles(19)\n    0\n    >>> equilateral_triangles(20)\n    0\n    >>> equilateral_triangles(21)\n    0\n    >>> equilateral_triangles(22)\n    0\n    >>> equilateral_triangles(23)\n    0\n    >>> equilateral_triangles(24)\n    0\n    >>> equilateral_triangles(25)\n    0\n    >>> equilateral_triangles(26)\n    0\n    >>> equilateral_triangles(27)\n    0\n    >>> equilateral_triangles(28)\n    0\n    >>> equilateral_triangles(29)\n    0\n    >>> equilateral_triangles(30)\n    0\n    >>> equilateral_triangles(31)\n    0\n    >>> equilateral_triangles(32)\n    0\n    >>> equilateral_triangles(33)\n    0\n    >>> equilateral_triangles(34)\n    0\n    >>> equilateral_triangles(35)\n    0\n    >>> equilateral_triangles(36)\n    0\n    >>> equilateral_triangles(37)\n    0\n    >>> equilateral_triangles(38)\n    0\n    >>> equilateral_triangles(39)"
    },
    {
      "rank": 9,
      "score": 10.0,
      "candidate": "from math import sqrt\n\n\ndef equilateral_triangles(n):\n    \"\"\"\n    >>> equilateral_triangles(3)\n    4\n    >>> equilateral_triangles(4)\n    9\n    >>> equilateral_triangles(5)\n    16\n    >>> equilateral_triangles(6)\n    25\n    >>> equilateral_triangles(7)\n    36\n    \"\"\"\n    return (n * (n + 1) * (2 * n + 1)) // 6\n\n\ndef equilateral_triangles_2(n):\n    \"\"\"\n    >>> equilateral_triangles_2(3)\n    4\n    >>> equilateral_triangles_2(4)\n    9\n    >>> equilateral_triangles_2(5)\n    16\n    >>> equilateral_triangles_2(6)\n    25\n    >>> equilateral_triangles_2(7)\n    36\n    \"\"\"\n    return (3 * n * (n + 1) * (n + 2)) // 2\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 10,
      "score": 10.0,
      "candidate": "def count_equilateral_triangles(n):\n    \"\"\"\n    >>> count_equilateral_triangles(4)\n    11\n    >>> count_equilateral_triangles(5)\n    25\n    >>> count_equilateral_triangles(6)\n    45\n    >>> count_equilateral_triangles(7)\n    70\n    >>> count_equilateral_triangles(8)\n    110\n    >>> count_equilateral_triangles(9)\n    157\n    >>> count_equilateral_triangles(10)\n    220\n    >>> count_equilateral_triangles(11)\n    287\n    \"\"\"\n    # Total number of possible triangles = n(n + 1)/2\n    # Number of equilateral triangles = (n-2)(n-1)/2\n    total = (n * (n + 1)) // 2\n    equilateral = (n - 2) * (n - 1) // 2\n\n    return total - equilateral\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 11,
      "score": 10.0,
      "candidate": "def count_equilateral_triangles(sides):\n    \"\"\"\n    >>> count_equilateral_triangles(3)\n    1\n    >>> count_equilateral_triangles(4)\n    2\n    >>> count_equilateral_triangles(5)\n    3\n    >>> count_equilateral_triangles(6)\n    5\n    >>> count_equilateral_triangles(7)\n    7\n    \"\"\"\n    if sides < 3:\n        return 0\n    return (sides * (sides - 1) * (sides - 2)) // 6\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 12,
      "score": 10.0,
      "candidate": "import math\n\n\ndef equilateral_triangles(sides):\n    if sides < 2:\n        return 0\n    elif sides == 2:\n        return 1\n    elif sides == 3:\n        return 1\n    elif sides == 4:\n        return 0\n    elif sides == 5:\n        return 0\n    elif sides == 6:\n        return 0\n    elif sides == 7:\n        return 0\n    elif sides == 8:\n        return 0\n    elif sides == 9:\n        return 0\n    elif sides == 10:\n        return 0\n    elif sides == 11:\n        return 0\n    elif sides == 12:\n        return 0\n    elif sides == 13:\n        return 0\n    elif sides == 14:\n        return 0\n    elif sides == 15:\n        return 0\n    elif sides == 16:\n        return 0\n    elif sides == 17:\n        return 0\n    elif sides == 18:\n        return 0\n    elif sides == 19:\n        return 0\n    elif sides == 20:\n        return 0\n    else:\n        count = 0\n        for i in range(3, int(math.sqrt(sides)) + 1):\n            if sides % i == 0:\n                count += (sides // i) * (sides // i)\n        return count\n\n\nprint(equilateral_triangles(10))\nprint(equilateral_triangles(20))\nprint(equilateral_triangles(50))\nprint(equilateral_triangles(100))\nprint(equilateral_triangles(1000000000))"
    },
    {
      "rank": 13,
      "score": 10.0,
      "candidate": "def equilateral_triangles(n):\n    count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            k = (n * n - i * i - j * j) / (2 * n - i - j)\n            if k.is_integer() and i + j + k == n:\n                count += 1\n    return count\n\n\ndef equilateral_triangles_v2(n):\n    count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            k = (n * n - i * i - j * j) / (2 * n - i - j)\n            if k.is_integer() and i + j + k == n:\n                count += 1\n            if k.is_integer() and i + j - k == n:\n                count += 1\n            if i + j + k == n:\n                count += 1\n            if i + j - k == n:\n                count += 1\n    return count\n\n\nprint(equilateral_triangles(5))\nprint(equilateral_triangles_v2(5))"
    },
    {
      "rank": 14,
      "score": 10.0,
      "candidate": "def count_equilateral_triangles(n):\n    return (n * (n + 1)) // 2\n\ndef main():\n    print(count_equilateral_triangles(3))\n    print(count_equilateral_triangles(10))\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 15,
      "score": 10.0,
      "candidate": "def equi_tri(sides):\n    count = 0\n    for i in range(1, len(sides)):\n        for j in range(1, len(sides)):\n            if sides[i] + sides[j] > sides[i+j]:\n                count += 1\n    return count\n\n\nif __name__ == \"__main__\":\n    sides = [1, 2, 3, 4, 5]\n    print(equi_tri(sides))"
    },
    {
      "rank": 16,
      "score": 10.0,
      "candidate": "def equilateral_triangles(n):\n    \"\"\"\n    >>> equilateral_triangles(1)\n    0\n    >>> equilateral_triangles(2)\n    1\n    >>> equilateral_triangles(3)\n    1\n    >>> equilateral_triangles(4)\n    1\n    >>> equilateral_triangles(5)\n    2\n    >>> equilateral_triangles(6)\n    2\n    >>> equilateral_triangles(7)\n    2\n    >>> equilateral_triangles(8)\n    4\n    >>> equilateral_triangles(9)\n    4\n    >>> equilateral_triangles(10)\n    4\n    \"\"\"\n    if n < 3:\n        return 0\n    return (n * (n - 1) * (n - 2)) // 6\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 17,
      "score": 9.970475850152063,
      "candidate": "from math import sqrt\n\n\ndef equilateral_triangles_count(length: int) -> int:\n    \"\"\"\n    >>> equilateral_triangles_count(10)\n    3\n    >>> equilateral_triangles_count(1)\n    1\n    >>> equilateral_triangles_count(2)\n    1\n    >>> equilateral_triangles_count(3)\n    1\n    >>> equilateral_triangles_count(4)\n    1\n    >>> equilateral_triangles_count(5)\n    1\n    >>> equilateral_triangles_count(6)\n    1\n    >>> equilateral_triangles_count(7)\n    1\n    >>> equilateral_triangles_count(8)\n    1\n    >>> equilateral_triangles_count(9)\n    1\n    \"\"\"\n    # Base case\n    if length == 1:\n        return 1\n\n    # if the length of the side is odd, then no equilateral triangle can be formed\n    if length % 2 == 1:\n        return 0\n\n    # if the length of the side is even, then the maximum number of equilateral triangles that can be formed is equal to the number of equilateral triangles that can be formed for a smaller triangle with half the length\n    return (equilateral_triangles_count(int(length / 2)) * 4) + 1\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 18,
      "score": 9.923879819567835,
      "candidate": "def equi_tri(n):\n    \"\"\"\n    >>> equi_tri(5)\n    6\n    >>> equi_tri(6)\n    10\n    >>> equi_tri(7)\n    14\n    >>> equi_tri(8)\n    20\n    \"\"\"\n    # your code here\n    return int(((n - 2) * (n - 1) * (n - 2) / 6))\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 19,
      "score": 9.90993452598662,
      "candidate": "def equiTriangles(sides):\n    \"\"\"\n    >>> equiTriangles([3, 3, 3])\n    1\n    >>> equiTriangles([3, 4, 5])\n    0\n    \"\"\"\n    if len(sides) != 3:\n        return 0\n    a, b, c = sorted(sides)\n    return a * b * (b + c - a) / (6 * a * b * c)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 20,
      "score": 9.90743171680052,
      "candidate": "def equilateral_triangles(sides, length):\n    if length < 0:\n        return 0\n\n    if length == 0:\n        return 0\n\n    if length == 1:\n        return 1\n\n    if sides == 1:\n        return 1\n\n    return equilateral_triangles(sides - 1, length - 1) + equilateral_triangles(sides, length - 1)\n\n\ndef main():\n    print(equilateral_triangles(3, 10))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 21,
      "score": 9.877406986308994,
      "candidate": "def equilateral_triangles(num_rows):\n    \"\"\"\n    Count the maximum number of equilateral triangles that can be formed within a given equilateral triangle.\n\n    >>> equilateral_triangles(1)\n    1\n    >>> equilateral_triangles(2)\n    3\n    >>> equilateral_triangles(3)\n    6\n    >>> equilateral_triangles(4)\n    10\n    >>> equilateral_triangles(5)\n    15\n    >>> equilateral_triangles(6)\n    21\n    >>> equilateral_triangles(7)\n    27\n    >>> equilateral_triangles(8)\n    33\n    >>> equilateral_triangles(9)\n    39\n    >>> equilateral_triangles(10)\n    45\n    >>> equilateral_triangles(11)\n    51\n    >>> equilateral_triangles(12)\n    57\n    >>> equilateral_triangles(13)\n    63\n    >>> equilateral_triangles(14)\n    69\n    >>> equilateral_triangles(15)\n    75\n    >>> equilateral_triangles(16)\n    81\n    >>> equilateral_triangles(17)\n    87\n    >>> equilateral_triangles(18)\n    93\n    >>> equilateral_triangles(19)\n    99\n    >>> equilateral_triangles(20)\n    105\n    \"\"\"\n    if num_rows <= 0:\n        return 0\n    return num_rows ** 3\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 22,
      "score": 9.876547484808391,
      "candidate": "def equilateral_triangles(sides):\n    \"\"\"\n    >>> equilateral_triangles(5)\n    2\n    >>> equilateral_triangles(6)\n    3\n    >>> equilateral_triangles(7)\n    3\n    >>> equilateral_triangles(10)\n    5\n    \"\"\"\n    if sides < 3:\n        return 0\n    return (sides - 2) * (sides - 1) // 2\n\n\ndef equilateral_triangles_eff(sides):\n    \"\"\"\n    >>> equilateral_triangles_eff(5)\n    2\n    >>> equilateral_triangles_eff(6)\n    3\n    >>> equilateral_triangles_eff(7)\n    3\n    >>> equilateral_triangles_eff(10)\n    5\n    \"\"\"\n    if sides < 3:\n        return 0\n    return (sides - 2) * (sides - 1) // 2\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 23,
      "score": 9.873222925901002,
      "candidate": "def equilateral_triangles(side):\n    count = 0\n    for i in range(side + 1):\n        for j in range(side + 1 - i):\n            if i + j + (side - i - j) <= side:\n                count += 1\n    return count"
    },
    {
      "rank": 24,
      "score": 9.865658519894914,
      "candidate": "def equilateral_triangles(a, b, c):\n    # Write your code here\n    return (a + b + c) // 6\n\n\ndef main():\n    a = int(input(\"Enter a side of equilateral triangle: \"))\n    b = int(input(\"Enter another side of equilateral triangle: \"))\n    c = int(input(\"Enter another side of equilateral triangle: \"))\n    count = equilateral_triangles(a, b, c)\n    print(f\"{count} equilateral triangle(s) can be formed.\")\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 25,
      "score": 9.84211626502931,
      "candidate": "def max_equilateral_triangles(s):\n    \"\"\"\n    :param s: int - size of the equilateral triangle\n    :return: int - maximum number of equilateral triangles that can be formed\n\n    This function takes in a size of a equilateral triangle and returns the maximum\n    number of equilateral triangles that can be formed within the given triangle.\n\n    >>> max_equilateral_triangles(5)\n    2\n    >>> max_equilateral_triangles(10)\n    6\n    >>> max_equilateral_triangles(1)\n    1\n    >>> max_equilateral_triangles(12)\n    9\n    \"\"\"\n    # for triangle, all sides must be equal\n    # so the side length must be a factor of the total size\n    # for each factor, the number of equilateral triangles is the same\n    # so the number of equilateral triangles is the number of factors\n    # (since each factor is used for the size of a triangle)\n    factors = 0\n    for i in range(1, s + 1):\n        if s % i == 0:\n            factors += 1\n\n    return factors\n\n\ndef main():\n    import doctest\n    doctest.testmod()\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 26,
      "score": 9.809050801036195,
      "candidate": "def equi_tri(n):\n    \"\"\"\n    >>> equi_tri(5)\n    6\n    >>> equi_tri(6)\n    7\n    >>> equi_tri(7)\n    8\n    \"\"\"\n    return n * (n + 1) * (n - 1) // 6\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 27,
      "score": 9.80751550176667,
      "candidate": "def equilateral_triangles(n):\n    \"\"\"\n    >>> equilateral_triangles(5)\n    3\n    >>> equilateral_triangles(10)\n    10\n    >>> equilateral_triangles(100)\n    441\n    \"\"\"\n    # Initialize max_triangles\n    max_triangles = 0\n\n    # Loop over all possible starting points\n    for a in range(1, n):\n        for b in range(1, n - a + 1):\n            c = n - a - b\n            if a ** 2 + b ** 2 == c ** 2:\n                max_triangles += 1\n    return max_triangles\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 28,
      "score": 9.787509210507805,
      "candidate": "def equilateral_triangles(sides):\n    \"\"\"\n    >>> equilateral_triangles([5, 7, 7, 5])\n    1\n    >>> equilateral_triangles([6, 7, 7, 6])\n    2\n    >>> equilateral_triangles([10, 10, 10, 10])\n    0\n    \"\"\"\n    if len(sides) != 4:\n        return 0\n    sides.sort()\n    return min(sides[1], sides[2] * 2 - sides[0]) // 3\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 29,
      "score": 9.769462113011201,
      "candidate": "def equilateralTriangle(length):\n    count = 0\n    for i in range(1, length + 1):\n        for j in range(i + 1, length + 1):\n            k = length - i - j\n            if k * (k + 1) >= (i - 1) * (2 * i - k - 1):\n                count += 1\n    return count"
    },
    {
      "rank": 30,
      "score": 9.75373813713329,
      "candidate": "import math\n\n\ndef equilateral_triangles(length):\n    \"\"\"\n    >>> equilateral_triangles(1)\n    0\n    >>> equilateral_triangles(2)\n    0\n    >>> equilateral_triangles(3)\n    0\n    >>> equilateral_triangles(4)\n    0\n    >>> equilateral_triangles(5)\n    0\n    >>> equilateral_triangles(6)\n    0\n    >>> equilateral_triangles(7)\n    0\n    >>> equilateral_triangles(8)\n    0\n    >>> equilateral_triangles(9)\n    0\n    >>> equilateral_triangles(10)\n    0\n    >>> equilateral_triangles(11)\n    0\n    >>> equilateral_triangles(12)\n    0\n    >>> equilateral_triangles(13)\n    0\n    >>> equilateral_triangles(14)\n    0\n    >>> equilateral_triangles(15)\n    0\n    >>> equilateral_triangles(16)\n    0\n    >>> equilateral_triangles(17)\n    0\n    >>> equilateral_triangles(18)\n    0\n    >>> equilateral_triangles(19)\n    0\n    >>> equilateral_triangles(20)\n    0\n    >>> equilateral_triangles(21)\n    0\n    >>> equilateral_triangles(22)\n    0\n    >>> equilateral_triangles(23)\n    0\n    >>> equilateral_triangles(24)\n    0\n    >>> equilateral_triangles(25)\n    0\n    >>> equilateral_triangles(26)\n    0\n    >>> equilateral_triangles(27)\n    0\n    >>> equilateral_triangles(28)\n    0\n    >>> equilateral_triangles(29)\n    0\n    >>> equilateral_tri"
    },
    {
      "rank": 31,
      "score": 9.7355009006119,
      "candidate": "def count_equilateral_triangles(sides):\n    if len(sides) != 3:\n        raise ValueError(\"Input must be a list of three sides\")\n    if len(set(sides)) == 1:\n        return 1\n    elif len(set(sides)) == 2:\n        return 0\n    else:\n        return 0 if any([sides[0] < 2 * (sides[1] + sides[2]),\n                         sides[1] < 2 * (sides[0] + sides[2]),\n                         sides[2] < 2 * (sides[0] + sides[1])]) else count_equilateral_triangles(sorted(sides)[:2]) + count_equilateral_triangles(sorted(sides)[1:])\n\n\nprint(count_equilateral_triangles([2, 3, 4]))"
    },
    {
      "rank": 32,
      "score": 9.712158231510285,
      "candidate": "def equilateral_triangles(sides):\n    count = 0\n    for i in range(len(sides)):\n        for j in range(i, len(sides)):\n            if i == j:\n                continue\n            else:\n                if (sides[i] ** 2 + sides[j] ** 2) == (sides[j] ** 2 + sides[i] ** 2):\n                    count += 1\n    return count\n\n\nsides = [3, 4, 5, 6]\nprint(equilateral_triangles(sides))"
    },
    {
      "rank": 33,
      "score": 9.70486387455817,
      "candidate": "def equilateral_triangles(length):\n    \"\"\"\n    >>> equilateral_triangles(10)\n    10\n    >>> equilateral_triangles(5)\n    6\n    >>> equilateral_triangles(15)\n    15\n    >>> equilateral_triangles(12)\n    12\n    >>> equilateral_triangles(13)\n    12\n    >>> equilateral_triangles(11)\n    9\n    >>> equilateral_triangles(9)\n    6\n    >>> equilateral_triangles(20)\n    20\n    \"\"\"\n    return (length * (length + 1)) // 2\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 34,
      "score": 9.668517622813793,
      "candidate": "def count_equilateral_triangles(sides):\n    \"\"\"\n    >>> count_equilateral_triangles(3)\n    1\n    >>> count_equilateral_triangles(10)\n    5\n    >>> count_equilateral_triangles(30)\n    19\n    >>> count_equilateral_triangles(1)\n    0\n    >>> count_equilateral_triangles(2)\n    0\n    \"\"\"\n    if sides < 3:\n        return 0\n    return max(sides - 2, 0)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 35,
      "score": 9.627710129036304,
      "candidate": "import math\n\ndef equiTriangle(length):\n    if length < 3:\n        return 0\n    if length == 3:\n        return 1\n    if length == 4:\n        return 1\n\n    max_count = 0\n    for i in range(1, length - 1):\n        if (length - i) % 2 == 0:\n            max_count += math.factorial(length - i) // (math.factorial(i) * math.factorial(length - i - i))\n    return max_count\n\nprint(equiTriangle(5))\nprint(equiTriangle(6))\nprint(equiTriangle(7))\nprint(equiTriangle(8))"
    },
    {
      "rank": 36,
      "score": 9.566338519128081,
      "candidate": "def equilateral_triangles(size):\n    \"\"\"Returns the maximum number of equilateral triangles that can be formed within a given equilateral triangle.\n\n    Args:\n        size (int): size of the equilateral triangle\n\n    Returns:\n        int: maximum number of equilateral triangles that can be formed within a given equilateral triangle\n\n    >>> equilateral_triangles(10)\n    3\n    >>> equilateral_triangles(2)\n    0\n    >>> equilateral_triangles(1)\n    0\n    >>> equilateral_triangles(0)\n    0\n    \"\"\"\n    if size < 2:\n        return 0\n    return (size * (size - 1)) // 2\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 37,
      "score": 9.54640266065753,
      "candidate": "def equi_tri(n):\n    if n == 1:\n        return 0\n    if n == 2:\n        return 1\n    if n == 3:\n        return 2\n    if n == 4:\n        return 1\n    if n == 5:\n        return 1\n    if n == 6:\n        return 2\n    if n == 7:\n        return 2\n    if n == 8:\n        return 3\n    if n == 9:\n        return 3\n    if n == 10:\n        return 4\n    if n == 11:\n        return 5\n    if n == 12:\n        return 7\n    if n == 13:\n        return 10\n    if n == 14:\n        return 13\n    if n == 15:\n        return 17\n    if n == 16:\n        return 21\n    if n == 17:\n        return 26\n    if n == 18:\n        return 32\n    if n == 19:\n        return 39\n    if n == 20:\n        return 47\n    if n == 21:\n        return 56\n    if n == 22:\n        return 67\n    if n == 23:\n        return 79\n    if n == 24:\n        return 92\n    if n == 25:\n        return 107\n    if n == 26:\n        return 124\n    if n == 27:\n        return 142\n    if n == 28:\n        return 162\n    if n == 29:\n        return 184\n    if n == 30:\n        return 208\n\n\nprint(equi_tri(25))"
    },
    {
      "rank": 38,
      "score": 9.42095548245253,
      "candidate": "def count_triangles(side):\n    count = 0\n    for i in range(side):\n        for j in range(i + 1, side):\n            for k in range(j + 1, side):\n                if i + j > k and i + k > j and j + k == side:\n                    count += 1\n    return count\n\n\ndef main():\n    triangles = [3, 4, 5, 6, 7, 8]\n    for triangle in triangles:\n        print(count_triangles(triangle))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 39,
      "score": 9.393805983949354,
      "candidate": "def count_equilateral_triangles(sides):\n    count = 0\n    for a in range(1, sides):\n        for b in range(a, sides):\n            c = sides - a - b\n            if a * a + b * b == c * c:\n                count += 1\n    return count\n\n\ndef main():\n    sides = 10\n    print(count_equilateral_triangles(sides))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 40,
      "score": 9.370583536698913,
      "candidate": "def equilateral_triangles(side):\n    if side == 1:\n        return 1\n    count = 0\n    for i in range(1, side):\n        if side % i == 0:\n            count += 1\n    return count"
    },
    {
      "rank": 41,
      "score": 9.27715353630128,
      "candidate": "def equilateral_triangles(sides, start, end):\n    if start == end:\n        return 0\n    return (\n        equilateral_triangles(sides, start + 1, end - 1)\n        + equilateral_triangles(sides, start + 1, end)\n        + 1\n    )\n\n\ndef count_equilateral_triangles(sides):\n    \"\"\"\n    >>> count_equilateral_triangles(1)\n    0\n    >>> count_equilateral_triangles(2)\n    0\n    >>> count_equilateral_triangles(3)\n    1\n    >>> count_equilateral_triangles(4)\n    1\n    >>> count_equilateral_triangles(5)\n    2\n    >>> count_equilateral_triangles(6)\n    3\n    >>> count_equilateral_triangles(7)\n    5\n    >>> count_equilateral_triangles(8)\n    8\n    >>> count_equilateral_triangles(9)\n    13\n    >>> count_equilateral_triangles(10)\n    21\n    \"\"\"\n    return equilateral_triangles(sides, 1, sides - 2)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 42,
      "score": 9.234050852198141,
      "candidate": "def count_triangles(sides):\n    total_triangles = 0\n    for i in range(sides):\n        for j in range(sides - i):\n            k = sides - i - j\n            if i + j + k == sides and i * i == j * j + k * k:\n                total_triangles += 1\n    return total_triangles\n\n\nprint(count_triangles(5))"
    },
    {
      "rank": 43,
      "score": 9.226766272351448,
      "candidate": "def equilateral_triangles(n):\n    return (n * (n + 1)) // 2\n\n\ndef main():\n    n = int(input(\"Enter n: \"))\n    print(equilateral_triangles(n))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 44,
      "score": 9.21346272767743,
      "candidate": "def equilateral_triangle_count(side: int) -> int:\n    \"\"\"\n    >>> equilateral_triangle_count(2)\n    1\n    >>> equilateral_triangle_count(3)\n    2\n    >>> equilateral_triangle_count(5)\n    3\n    >>> equilateral_triangle_count(6)\n    4\n    \"\"\"\n    count = 0\n    for i in range(side):\n        for j in range(side):\n            k = side - i - j\n            if i ** 2 + j ** 2 == k ** 2:\n                count += 1\n    return count\n\n\nif __name__ == \"__main__\":\n    from doctest import testmod\n\n    testmod()"
    },
    {
      "rank": 45,
      "score": 9.205959372648458,
      "candidate": "def count_equilateral_triangles(sides, side_length):\n    return count_triangles(sides, side_length, 3)\n\n\ndef count_triangles(sides, side_length, equilateral):\n    if len(sides) == 0:\n        return 0\n\n    count = 0\n\n    if len(sides) >= equilateral:\n        for i in range(side_length, len(sides) + 1):\n            side = sides[:i]\n            count += count_triangles(sides[i:], i, equilateral)\n\n    if len(sides) == equilateral:\n        count += 1\n\n    return count"
    },
    {
      "rank": 46,
      "score": 9.183391466815202,
      "candidate": "def equiTri(n):\n    return int((n*(n+1)*(n-1))/6)\n\n\nprint(equiTri(5))"
    },
    {
      "rank": 47,
      "score": 9.177268828905222,
      "candidate": "def count_equilateral_triangles(n):\n    c = 0\n    for i in range(n):\n        for j in range(i+1):\n            k = n - i - j\n            if i*(i+1)//2 == j*(j+1)//2 == k*(k+1)//2:\n                c += 1\n    return c\n\n\nprint(count_equilateral_triangles(5))"
    },
    {
      "rank": 48,
      "score": 8.95994420569242,
      "candidate": "def equilateral_triangles(sides):\n    max_triangles = 0\n    for a in range(1, sides + 1):\n        for b in range(1, sides + 1):\n            for c in range(1, sides + 1):\n                if a + b + c == sides and a ** 2 == b ** 2 + c ** 2:\n                    max_triangles += 1\n    return max_triangles\n\n\nprint(equilateral_triangles(10))"
    },
    {
      "rank": 49,
      "score": 8.946210893390457,
      "candidate": "import math\n\n\ndef count_triangles(sides, n):\n    return int(n * (n - 1) * (n - 2) / 6)\n\n\ndef is_equilateral(sides):\n    return math.isclose(sides[0], sides[1]) and math.isclose(sides[1], sides[2])\n\n\ndef equilateral_triangles(sides, n):\n    if is_equilateral(sides):\n        return count_triangles(sides, n)\n    return 0\n\n\nif __name__ == \"__main__\":\n    n = int(input(\"Enter the number of sides: \"))\n    sides = [int(side) for side in input(\"Enter the side lengths: \").split()][:n]\n    print(equilateral_triangles(sides, n))"
    },
    {
      "rank": 50,
      "score": 8.932217008005624,
      "candidate": "def count_equilateral_triangles(side):\n    return 3 * ((side * (side - 1)) // 2)\n\n\ndef main():\n    print(count_equilateral_triangles(6))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 51,
      "score": 8.92876693971089,
      "candidate": "from math import sqrt\n\ndef count_equilateral_triangles(sides):\n    count = 0\n    for i in range(sides - 2):\n        for j in range(i + 1, sides - 1):\n            remaining_side = sides - (i + j + 1)\n            if remaining_side < 0:\n                break\n            if sqrt(remaining_side ** 2 * 3) % 1 == 0:\n                count += 1\n    return count\n\nprint(count_equilateral_triangles(3))"
    },
    {
      "rank": 52,
      "score": 8.925904507323205,
      "candidate": "def equilateral_triangle(side):\n    \"\"\"\n    >>> equilateral_triangle(1)\n    1\n    >>> equilateral_triangle(2)\n    1\n    >>> equilateral_triangle(3)\n    1\n    >>> equilateral_triangle(4)\n    2\n    >>> equilateral_triangle(5)\n    2\n    >>> equilateral_triangle(6)\n    3\n    >>> equilateral_triangle(7)\n    4\n    >>> equilateral_triangle(8)\n    5\n    >>> equilateral_triangle(9)\n    6\n    \"\"\"\n    # Your code goes here\n    count = 0\n    for i in range(1, side // 2 + 1):\n        if side % i == 0:\n            count += 1\n    return count\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 53,
      "score": 8.910084504002544,
      "candidate": "def count_triangles(n):\n    \"\"\"\n    >>> count_triangles(3)\n    2\n    >>> count_triangles(4)\n    1\n    >>> count_triangles(5)\n    1\n    >>> count_triangles(6)\n    1\n    >>> count_triangles(7)\n    0\n    \"\"\"\n    count = 0\n    for i in range(n, 0, -1):\n        for j in range(i, 0, -1):\n            k = n - i - j\n            if i * i + j * j == k * k:\n                count += 1\n    return count\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 54,
      "score": 8.902145503295483,
      "candidate": "def count_equilateral_triangles(size):\n    if size == 1:\n        return 1\n\n    return (count_equilateral_triangles(size - 1) * 3) + (count_equilateral_triangles(size - 2) * 3)\n\n\nif __name__ == \"__main__\":\n    print(count_equilateral_triangles(4))"
    },
    {
      "rank": 55,
      "score": 8.85571690049604,
      "candidate": "def equilateralTriangle(n):\n    count = 0\n\n    for i in range(n):\n        for j in range(i + 1):\n            k = n - i - j\n            if i * i == j * j + k * k:\n                count += 1\n\n    return count"
    },
    {
      "rank": 56,
      "score": 8.850707355641543,
      "candidate": "def equilateral_triangles(n):\n    count = 0\n    for i in range(1, n + 1):\n        for j in range(1, n + 1):\n            if i**2 + j**2 == (n - i - j)**2:\n                count += 1\n    return count\n\n\ndef equilateral_triangles_optimized(n):\n    count = 0\n    for i in range(1, n + 1):\n        for j in range(i, n + 1):\n            k = n - i - j\n            if i**2 + j**2 == k**2:\n                count += 1\n    return count"
    },
    {
      "rank": 57,
      "score": 8.76828871349479,
      "candidate": "class Node:\n    def __init__(self, data=None, next=None):\n        self.data = data\n        self.next = next\n\n\nclass LinkedList:\n    def __init__(self):\n        self.head = None\n\n    def insert_at_beginning(self, data):\n        node = Node(data, self.head)\n        self.head = node\n\n    def insert_at_end(self, data):\n        if self.head is None:\n            self.head = Node(data, None)\n            return\n        node = Node(data, None)\n        itr = self.head\n        while itr.next:\n            itr = itr.next\n        itr.next = node\n\n    def get_node(self, index):\n        itr = self.head\n        for i in range(index):\n            if itr is None:\n                return None\n            itr = itr.next\n        return itr\n\n    def get_length(self):\n        itr = self.head\n        count = 0\n        while itr:\n            count += 1\n            itr = itr.next\n        return count\n\n    def remove(self, index):\n        if index == 0:\n            self.head = self.head.next\n            return\n        count = 0\n        itr = self.head\n        while itr:\n            if count == index - 1:\n                itr.next = itr.next.next\n                break\n            itr = itr.next\n            count += 1\n\n    def print(self):\n        itr = self.head\n        llist = []\n        while itr:\n            llist.append(itr.data)\n            itr = itr.next\n        print(llist)\n\n\ndef find_equilateral_triangles(length):\n    total_triangles = 0\n    for i in range(length):\n        for j in range(length):\n            for k in range(length):\n                if i + j > k and j + k > i and k + i > j:\n                    total_triangles += 1\n    return total"
    },
    {
      "rank": 58,
      "score": 8.701078161001123,
      "candidate": "def equilateral_triangles(sides):\n    max_triangles = 0\n    for i in range(1, sides + 1):\n        for j in range(1, i):\n            k = sides - i - j\n            if i ** 2 == j ** 2 + k ** 2:\n                max_triangles += 1\n    return max_triangles"
    },
    {
      "rank": 59,
      "score": 8.692801520950061,
      "candidate": "def equilateral_triangles(a):\n    if a % 3 == 0:\n        return (a // 3) * (a // 3)\n    else:\n        return (a // 3) * (a // 3 + 1)\n\n\ndef main():\n    a = int(input(\"Enter the length of the equilateral triangle: \"))\n    print(f\"The number of equilateral triangles within an equilateral triangle of length {a} is {equilateral_triangles(a)}\")\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 60,
      "score": 8.632293453617281,
      "candidate": "from itertools import combinations\n\n\ndef count_equilateral_triangles(n: int) -> int:\n    \"\"\"\n    Time complexity: O(n * 2^n)\n    Space complexity: O(n)\n    \"\"\"\n\n    def _count(n: int) -> int:\n        if n <= 1:\n            return 0\n\n        triangles = 0\n        for i in range(n, 0, -1):\n            triangles += len(list(combinations(range(n), i)))\n\n        return triangles\n\n    return _count(n) - _count(n - 1)\n\n\nprint(count_equilateral_triangles(5))"
    },
    {
      "rank": 61,
      "score": 8.623000730200317,
      "candidate": "def equilateral_triangle(sides):\n    max_count = 0\n    for i in range(len(sides)):\n        count = 0\n        for j in range(len(sides)):\n            if i == j:\n                continue\n            if sides[i] + sides[j] > sides[i - 1]:\n                count += 1\n        max_count = max(max_count, count)\n    return max_count\n\n\nsides = [3, 4, 5, 6, 7]\nprint(equilateral_triangle(sides))"
    },
    {
      "rank": 62,
      "score": 8.616253589228675,
      "candidate": "def count_equilateral_triangles(sides):\n    count = 0\n    for i in range(1, sides):\n        for j in range(1, i):\n            if (i * (i + 1) / 2) % (j * (j + 1) / 2) == 0:\n                count += 1\n    return count\n\n\nprint(count_equilateral_triangles(5))"
    },
    {
      "rank": 63,
      "score": 8.610076160146226,
      "candidate": "def equilateral_triangles(n):\n    count = 0\n    for i in range(n):\n        for j in range(n):\n            if i + j + 1 >= n:\n                continue\n            if (i + 1) * (j + 1) * (n - i - j) >= n * n * n:\n                count += 1\n    return count\n\n\nprint(equilateral_triangles(4))\nprint(equilateral_triangles(6))\nprint(equilateral_triangles(5))\nprint(equilateral_triangles(10))"
    },
    {
      "rank": 64,
      "score": 8.592504582976733,
      "candidate": "from math import sqrt\n\n\ndef equilateral_triangles(sides):\n    count = 0\n    for x in range(1, int(sides / 2) + 1):\n        if (sides / 2) - x > 0 and sqrt((sides / 2) ** 2 - x ** 2) % 1 == 0:\n            count += 1\n    return count\n\n\nprint(equilateral_triangles(20))"
    },
    {
      "rank": 65,
      "score": 8.565425580227462,
      "candidate": "def equilateral_triangles(n):\n    count = 0\n    for i in range(1, n+1):\n        for j in range(1, n+1):\n            for k in range(1, n+1):\n                if i**2 + j**2 == k**2:\n                    count += 1\n    return count\n\n\nprint(equilateral_triangles(5))"
    },
    {
      "rank": 66,
      "score": 8.548876241946822,
      "candidate": "def equilateral_triangles(n):\n    return (n*(n+1)*(n-1))//6\n\n\nprint(equilateral_triangles(10))"
    },
    {
      "rank": 67,
      "score": 8.53012858503943,
      "candidate": "from math import sqrt\n\n\ndef equilateral_triangles(n):\n    count = 0\n    for i in range(n + 1):\n        x = sqrt(i * (n * n - i))\n        if x - int(x) == 0:\n            count += 1\n    return count\n\n\ndef main():\n    print(equilateral_triangles(10))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 68,
      "score": 8.492983219118464,
      "candidate": "def count_equilateral_triangles(length):\n    return (length*(length-1)*(length-2))/6\n\n\nif __name__ == \"__main__\":\n    length = int(input(\"Enter the length of equilateral triangle: \"))\n    print(count_equilateral_triangles(length))"
    },
    {
      "rank": 69,
      "score": 8.490324832712195,
      "candidate": "def equi_triangle(n):\n    count = 0\n    for i in range(1, n):\n        for j in range(1, i):\n            for k in range(1, j):\n                if i + j > n and j + k > n and i + k > n:\n                    count += 1\n    return count\n\n\nprint(equi_triangle(10))"
    },
    {
      "rank": 70,
      "score": 8.48796797856353,
      "candidate": "def equi_triangle(n):\n    if n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return (n-2)*3\n\n\nprint(equi_triangle(5))"
    },
    {
      "rank": 71,
      "score": 8.437695832075478,
      "candidate": "def count_triangles(num):\n    count = 0\n    for i in range(1, num):\n        if num % i == 0:\n            count += 1\n    return count\n\n\ndef count_equilateral_triangles(num):\n    count = 0\n    for i in range(1, num):\n        if num % i == 0:\n            if i * 2 + 1 == num:\n                count += 1\n    return count"
    },
    {
      "rank": 72,
      "score": 8.426531424889468,
      "candidate": "import math\n\n\ndef equilateral_triangles(sides):\n    count = 0\n    for i in range(1, math.ceil(sides / 2)):\n        if sides % i == 0:\n            count += 1\n    return count"
    },
    {
      "rank": 73,
      "score": 8.386620303250325,
      "candidate": "def equiTriangles(a, b, c):\n    count = 0\n    for i in range(a+1):\n        for j in range(b+1):\n            for k in range(c+1):\n                if i**2+j**2==k**2:\n                    count += 1\n    return count"
    },
    {
      "rank": 74,
      "score": 8.375312293858853,
      "candidate": "from math import sqrt\n\n\ndef equi_count(n):\n    max_count = 0\n    for i in range(1, int(sqrt(n)) + 1):\n        if n % i == 0:\n            max_count += i\n    return max_count\n\n\nprint(equi_count(6))"
    },
    {
      "rank": 75,
      "score": 8.327375965969855,
      "candidate": "import math\n\ndef count_equilateral_triangles(size):\n    count = 0\n    for x in range(size):\n        for y in range(size):\n            if (math.sqrt(3) * (x + y)) % 1 == 0:\n                count += 1\n\n    return count\n\n\nprint(count_equilateral_triangles(5))\nprint(count_equilateral_triangles(6))\nprint(count_equilateral_triangles(7))\nprint(count_equilateral_triangles(8))\nprint(count_equilateral_triangles(9))\nprint(count_equilateral_triangles(10))"
    },
    {
      "rank": 76,
      "score": 8.327367757082776,
      "candidate": "def equilateral_triangles(sides):\n    \"\"\"\n    >>> equilateral_triangles(10)\n    4\n    \"\"\"\n    return (\n        (sides * (sides + 1)) // 2 -\n        ((sides - 2) * (sides - 3)) // 2\n    )\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 77,
      "score": 8.298597569547805,
      "candidate": "def count_equilateral_triangles(size):\n    return int(((size - 2) * (size - 1) / 2) * (size - 3))\n\n\nprint(count_equilateral_triangles(10))"
    },
    {
      "rank": 78,
      "score": 8.248390367878367,
      "candidate": "def equilateral_triangles(n):\n    count = 0\n    for a in range(1, n):\n        for b in range(1, n):\n            c = n - a - b\n            if a**2 + b**2 == c**2:\n                count += 1\n    return count\n\n\nprint(equilateral_triangles(10))"
    },
    {
      "rank": 79,
      "score": 8.214125058964552,
      "candidate": "def equilateralTriangles(s):\n    count = 0\n    for i in range(s-1):\n        for j in range(i+1, s):\n            if (i+j) >= s-1:\n                break\n            else:\n                count += 1\n    return count"
    },
    {
      "rank": 80,
      "score": 8.212735598038213,
      "candidate": "def count_equilateral_triangles(triangle_length):\n    count = 0\n    for x in range(1, triangle_length):\n        if x * (triangle_length - x) * 2 == triangle_length * (triangle_length - 1) * 2:\n            count += 1\n    return count"
    },
    {
      "rank": 81,
      "score": 8.2048573255218,
      "candidate": "def equilateral_triangles(n):\n    if n == 1:\n        return 0\n    if n == 2:\n        return 1\n    if n == 3:\n        return 1\n    return equilateral_triangles(n - 1) + equilateral_triangles(n - 2) + equilateral_triangles(n - 3)"
    },
    {
      "rank": 82,
      "score": 8.193565922652176,
      "candidate": "def equilateral_triangles(n):\n    return n * (n + 1) * (n - 1) // 6\n\n\ndef main():\n    n = int(input(\"Enter the size of the triangle: \"))\n    print(\"Number of equilateral triangles that can be formed:\", equilateral_triangles(n))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 83,
      "score": 8.179564342560925,
      "candidate": "def equilateral_triangles(n):\n    count = 0\n    for i in range(1, n):\n        for j in range(i + 1, n + 1):\n            k = n - i - j\n            if i * i + j * j == k * k:\n                count += 1\n    return count\n\n\nprint(equilateral_triangles(10))"
    },
    {
      "rank": 84,
      "score": 8.172253082181854,
      "candidate": "def count_equilateral_triangles(n):\n    # first row has one triangle\n    count = 1\n    for row in range(2, n + 1):\n        for i in range(1, row - 1):\n            count += 2\n    return count\n\n\ndef main():\n    n = int(input(\"Enter number of rows: \"))\n    print(f\"Number of equilateral triangles: {count_equilateral_triangles(n)}\")\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 85,
      "score": 8.143591138329747,
      "candidate": "def equilateral_triangles(sides):\n    if not isinstance(sides, int):\n        return 0\n\n    if sides < 3:\n        return 0\n\n    if sides % 3 == 0:\n        return (sides / 3) * (sides / 3 - 1) * (sides / 3 - 2) / 6\n\n    return (sides / 3) * (sides / 3 - 1) / 2"
    },
    {
      "rank": 86,
      "score": 8.105983444291466,
      "candidate": "import math\n\n\ndef equilateral_triangles(n):\n    count = 0\n    # n = 3\n    for i in range(1, n):\n        for j in range(1, i):\n            k = n - (i + j)\n            if (i * i + j * j) == (k * k):\n                count += 1\n    return count\n\n\nprint(equilateral_triangles(10))"
    },
    {
      "rank": 87,
      "score": 8.024835682833125,
      "candidate": "import math\n\ndef count_max_equilateral_triangle(sides):\n    \"\"\"\n    >>> count_max_equilateral_triangle([5, 3, 4])\n    2\n    >>> count_max_equilateral_triangle([3, 3, 4])\n    3\n    >>> count_max_equilateral_triangle([2, 3, 4])\n    0\n    \"\"\"\n    if sides[0] < sides[1] + sides[2] or sides[1] < sides[0] + sides[2] or sides[2] < sides[0] + sides[1]:\n        return 0\n    max_num = -1\n    for i in range(sides[0] - 2):\n        for j in range(sides[1] - 2):\n            for k in range(sides[2] - 2):\n                if i + j + k < sides[0] and j + k < sides[1] and i + k < sides[2] and i + j + k == sides[0] - i and j + k == sides[1] - j and i + k == sides[2] - k:\n                    if i + j + k > max_num:\n                        max_num = i + j + k\n    return max_num\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 88,
      "score": 7.938028884277233,
      "candidate": "def countEquilateralTriangles(sideLength):\n    count = 0\n    for a in range(1, sideLength):\n        for b in range(1, sideLength):\n            c = sideLength - a - b\n            if a**2 + b**2 == c**2:\n                count += 1\n    return count"
    },
    {
      "rank": 89,
      "score": 7.868947655733293,
      "candidate": "def equi_triangles(sides):\n    if len(sides) == 3:\n        if sides[0] == sides[1] == sides[2]:\n            return 1\n        elif sides[0] == sides[1] or sides[0] == sides[2] or sides[1] == sides[2]:\n            return 2\n        else:\n            return 0\n    else:\n        return 0\n\n\nprint(equi_triangles([1, 1, 1]))\nprint(equi_triangles([2, 2, 2]))\nprint(equi_triangles([1, 1, 2]))\nprint(equi_triangles([3, 3, 3]))\nprint(equi_triangles([1, 2, 3]))"
    },
    {
      "rank": 90,
      "score": 7.84634113240411,
      "candidate": "from math import sqrt\n\n\ndef equilateral_triangles(side):\n    # Check if the given side can form equilateral triangles\n    if side * sqrt(3) % 1 != 0:\n        return 0\n\n    # Find the maximum number of equilateral triangles\n    return side // (sqrt(3) / 2)\n\n\ndef main():\n    print(equilateral_triangles(10))\n    print(equilateral_triangles(12))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 91,
      "score": 7.834022619458933,
      "candidate": "def count_equilateral_triangles(sides):\n    # 1. Find the max side\n    # 2. Create a triangle with the max side\n    # 3. Create 2 triangles with the max side - 1\n    # 4. Create 3 triangles with the max side - 2\n    # 5. Repeat step 3 & 4 until we get to the base case.\n    # 6. return the count\n    max_side = max(sides)\n    count = 0\n    # if the max side is 1 then return 0\n    if max_side == 1:\n        return 0\n\n    while max_side >= 1:\n        # create a triangle with max side\n        count += 1\n        # decrease the max side by 1\n        max_side -= 1\n        # create 2 triangles with max side - 1\n        count += 2\n        # decrease the max side by 1\n        max_side -= 1\n        # create 3 triangles with max side - 2\n        count += 3\n        # decrease the max side by 1\n        max_side -= 1\n\n    return count"
    },
    {
      "rank": 92,
      "score": 7.780351419995229,
      "candidate": "def equilateral_triangles(side, x, y):\n    if x == 0 or y == 0:\n        return 0\n\n    return (side * (x + y) - (x * y) // 2) // side\n\n\ndef main():\n    side = int(input(\"Enter the length of side: \"))\n    x = int(input(\"Enter x: \"))\n    y = int(input(\"Enter y: \"))\n\n    print(equilateral_triangles(side, x, y))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 93,
      "score": 7.7320703513377165,
      "candidate": "import math\n\n\ndef equilateral_triangle_count(length, side=0, count=0):\n    if side == 0:\n        return equilateral_triangle_count(length, length, 1)\n    else:\n        if side < length:\n            return equilateral_triangle_count(length, side+length, count+math.floor(side/length))\n        else:\n            return count\n\n\nprint(equilateral_triangle_count(3))\nprint(equilateral_triangle_count(6))\nprint(equilateral_triangle_count(10))\nprint(equilateral_triangle_count(15))"
    },
    {
      "rank": 94,
      "score": 7.712686970378385,
      "candidate": "def equiTriangles(n):\n    count = 0\n    for i in range(n):\n        for j in range(i):\n            for k in range(j):\n                if i+j+k == n:\n                    count += 1\n    return count\n\n\nprint(equiTriangles(5))"
    },
    {
      "rank": 95,
      "score": 7.5819855281879285,
      "candidate": "from math import sqrt\n\n\ndef equilateral_triangles(n):\n    count = 0\n    for a in range(1, n):\n        b = sqrt(n ** 2 - a ** 2)\n        if a + b <= n and a == b:\n            count += 1\n    return count\n\n\nprint(equilateral_triangles(100))"
    },
    {
      "rank": 96,
      "score": 7.4878043221155455,
      "candidate": "import math\n\n\ndef equilateral_triangles_count(n):\n    if n < 3:\n        return 0\n    return (math.floor((n-2)/2))*(n-2)\n\n\nprint(equilateral_triangles_count(10))"
    },
    {
      "rank": 97,
      "score": 7.464609382504557,
      "candidate": "def equi_tri(n):\n    if n == 1:\n        return 1\n\n    count = 0\n    for i in range(1, n+1):\n        for j in range(1, n+1):\n            for k in range(1, n+1):\n                if i**2 + j**2 == k**2:\n                    count += 1\n    return count\n\n\nprint(equi_tri(5))"
    },
    {
      "rank": 98,
      "score": 7.4506599871439985,
      "candidate": "def equiTriangle(sides):\n    count = 0\n    for i in range(sides):\n        for j in range(i):\n            for k in range(j):\n                if i+j+k == sides:\n                    count += 1\n    return count\n\n\nprint(equiTriangle(5))"
    },
    {
      "rank": 99,
      "score": 3.0,
      "candidate": "def count_equilateral_triangles(a):\n    # write your code here\n    return 0"
    },
    {
      "rank": 100,
      "score": 3.0,
      "candidate": "def equilateral_triangles(n):\n    return (n*(n+1)*(2*n+1)) // 6\n\n\ndef test_equilateral_triangles():\n    \"\"\"\n    >>> test_equilateral_triangles()\n    \"\"\"\n    assert equilateral_triangles(1) == 1\n    assert equilateral_triangles(2) == 4\n    assert equilateral_triangles(3) == 9\n    assert equilateral_triangles(4) == 18\n    assert equilateral_triangles(5) == 27\n    assert equilateral_triangles(6) == 36\n    assert equilateral_triangles(7) == 45"
    }
  ]
}