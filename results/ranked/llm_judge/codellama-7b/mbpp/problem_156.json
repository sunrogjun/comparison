{
  "timestamp": "2025-09-14T23:28:46.740257",
  "method": "improved_llm_judge",
  "judge_model": "codellama/CodeLlama-7b-Python-hf",
  "target_model": "codellama-7b",
  "dataset": "mbpp",
  "problem_number": 156,
  "total_candidates": 100,
  "results": [
    {
      "rank": 1,
      "score": 10.0,
      "candidate": "def power_of_two(n: int) -> int:\n    \"\"\"Return smallest power of 2 greater than or equal to n.\n\n    >>> power_of_two(0)\n    1\n    >>> power_of_two(1)\n    2\n    >>> power_of_two(2)\n    2\n    >>> power_of_two(3)\n    4\n    >>> power_of_two(4)\n    4\n    >>> power_of_two(5)\n    8\n    >>> power_of_two(10)\n    16\n    \"\"\"\n    return 2 ** (n - 1).bit_length()\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 2,
      "score": 10.0,
      "candidate": "def find_smallest_power(n: int) -> int:\n    \"\"\"\n    This function takes an integer as a parameter and returns\n    smallest power of 2 greater than or equal to n.\n    >>> find_smallest_power(10)\n    16\n    >>> find_smallest_power(15)\n    16\n    >>> find_smallest_power(31)\n    32\n    >>> find_smallest_power(63)\n    64\n    >>> find_smallest_power(1)\n    2\n    \"\"\"\n    return 2 ** (n - 1).bit_length()\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 3,
      "score": 10.0,
      "candidate": "def smallest_power_of_2(n):\n    \"\"\"\n    >>> smallest_power_of_2(16)\n    32\n    >>> smallest_power_of_2(15)\n    16\n    >>> smallest_power_of_2(1)\n    2\n    \"\"\"\n    if n <= 0:\n        return 1\n    return 1 << (n - 1).bit_length()\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 4,
      "score": 10.0,
      "candidate": "def find_smallest_power_of_2(n):\n    \"\"\"\n    Return smallest power of 2 greater than or equal to n\n    >>> find_smallest_power_of_2(15)\n    16\n    >>> find_smallest_power_of_2(2)\n    4\n    >>> find_smallest_power_of_2(10)\n    16\n    \"\"\"\n    return 2 ** ((n - 1).bit_length())\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 5,
      "score": 10.0,
      "candidate": "def smallest_power_of_2(n):\n    if n == 0:\n        return 1\n    return 2**((n-1).bit_length())\n\n\ndef test_smallest_power_of_2():\n    assert smallest_power_of_2(0) == 1\n    assert smallest_power_of_2(1) == 1\n    assert smallest_power_of_2(2) == 2\n    assert smallest_power_of_2(3) == 4\n    assert smallest_power_of_2(4) == 4\n    assert smallest_power_of_2(5) == 8\n    assert smallest_power_of_2(6) == 8\n    assert smallest_power_of_2(7) == 8\n    assert smallest_power_of_2(8) == 8\n    assert smallest_power_of_2(9) == 16\n    assert smallest_power_of_2(10) == 16"
    },
    {
      "rank": 6,
      "score": 10.0,
      "candidate": "def find_smallest_power(n: int) -> int:\n    \"\"\"\n    >>> find_smallest_power(12)\n    16\n    >>> find_smallest_power(13)\n    16\n    >>> find_smallest_power(0)\n    1\n    \"\"\"\n    if n == 0:\n        return 1\n    return 2 ** (n - 1).bit_length()\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 7,
      "score": 10.0,
      "candidate": "def find_smallest_power(n):\n    \"\"\"\n    Return smallest power of 2 greater than or equal to n.\n\n    >>> find_smallest_power(10)\n    16\n    >>> find_smallest_power(23)\n    32\n    >>> find_smallest_power(32)\n    32\n    >>> find_smallest_power(128)\n    128\n    >>> find_smallest_power(256)\n    256\n    \"\"\"\n    return 1 if n == 0 else 2 ** (n - 1).bit_length()\n\n\ndef find_smallest_power_v2(n):\n    \"\"\"\n    Return smallest power of 2 greater than or equal to n.\n\n    >>> find_smallest_power_v2(10)\n    16\n    >>> find_smallest_power_v2(23)\n    32\n    >>> find_smallest_power_v2(32)\n    32\n    >>> find_smallest_power_v2(128)\n    128\n    >>> find_smallest_power_v2(256)\n    256\n    \"\"\"\n    return 2 ** n.bit_length()\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 8,
      "score": 10.0,
      "candidate": "def next_power(n: int) -> int:\n    \"\"\"\n    returns smallest power of 2 greater than or equal to n\n    >>> next_power(10)\n    16\n    >>> next_power(16)\n    16\n    \"\"\"\n    return 1 if n == 0 else 2 ** (n - 1).bit_length()\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 9,
      "score": 10.0,
      "candidate": "def smallest_power_of_2(n: int) -> int:\n    \"\"\"\n    >>> smallest_power_of_2(11)\n    16\n    \"\"\"\n    if n <= 0:\n        return 1\n    return 2 ** (n - 1).bit_length()\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 10,
      "score": 10.0,
      "candidate": "def next_pow_2(n):\n    \"\"\"\n    >>> next_pow_2(16)\n    32\n    >>> next_pow_2(25)\n    32\n    >>> next_pow_2(42)\n    64\n    \"\"\"\n    if n == 0:\n        return 1\n    elif n < 0:\n        return 0\n    else:\n        return 1 << (n - 1).bit_length()\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 11,
      "score": 10.0,
      "candidate": "def find_smallest_power_of_2(n):\n    return 2**(n-1).bit_length()\n\n\nif __name__ == \"__main__\":\n    assert find_smallest_power_of_2(5) == 8\n    assert find_smallest_power_of_2(7) == 16"
    },
    {
      "rank": 12,
      "score": 10.0,
      "candidate": "def smallest_power_of_2(n):\n    \"\"\"\n    Find smallest power of 2 greater than or equal to n\n    :param n: int\n    :return: int\n    \"\"\"\n    if n == 0:\n        return 1\n\n    if n < 0:\n        return -1\n\n    if n & (n - 1) == 0:\n        return n\n\n    return 1 << (n.bit_length() - 1)\n\n\ndef main():\n    val1 = smallest_power_of_2(16)\n    val2 = smallest_power_of_2(15)\n    val3 = smallest_power_of_2(0)\n    val4 = smallest_power_of_2(-16)\n    val5 = smallest_power_of_2(-1)\n    val6 = smallest_power_of_2(2)\n    val7 = smallest_power_of_2(3)\n    val8 = smallest_power_of_2(5)\n    val9 = smallest_power_of_2(7)\n    val10 = smallest_power_of_2(8)\n\n    print(val1)\n    print(val2)\n    print(val3)\n    print(val4)\n    print(val5)\n    print(val6)\n    print(val7)\n    print(val8)\n    print(val9)\n    print(val10)\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 13,
      "score": 9.0,
      "candidate": "def smallest_power_of_2(n):\n    if n == 0:\n        return 1\n\n    return 2 ** (n - 1).bit_length()\n\n\nprint(smallest_power_of_2(16))\nprint(smallest_power_of_2(20))\nprint(smallest_power_of_2(1))\nprint(smallest_power_of_2(0))"
    },
    {
      "rank": 14,
      "score": 9.0,
      "candidate": "def find_next_power(n: int) -> int:\n    \"\"\"\n    Time Complexity: O(1)\n    \"\"\"\n    return 2 ** (n - 1).bit_length()\n\n\nif __name__ == \"__main__\":\n    print(find_next_power(7))"
    },
    {
      "rank": 15,
      "score": 8.0,
      "candidate": "def smallest_pow2(n):\n    return 1 if n == 0 else 2 ** (n - 1).bit_length()"
    },
    {
      "rank": 16,
      "score": 8.0,
      "candidate": "def power(n):\n    if n == 0:\n        return 0\n    elif n % 2 == 0:\n        return 2 * power(n//2)\n    else:\n        return 2 * power((n//2)+1)\n\n\ndef main():\n    n = int(input(\"Enter the number: \"))\n    print(f\"Smallest power of 2 greater than or equal to {n} is {power(n)}\")\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 17,
      "score": 8.0,
      "candidate": "def next_power(n):\n    if n == 0:\n        return 1\n    else:\n        return 1 << (n-1).bit_length()\n\n\nprint(next_power(10))"
    },
    {
      "rank": 18,
      "score": 8.0,
      "candidate": "def smallest_power_of_two(n):\n    if n == 0:\n        return 1\n    if n < 0:\n        raise ValueError(\"n should be greater than or equal to 0\")\n    return 2**len(bin(n - 1))\n\n\nif __name__ == \"__main__\":\n    print(smallest_power_of_two(10))"
    },
    {
      "rank": 19,
      "score": 8.0,
      "candidate": "def smallest_power_of_2(n):\n    if n == 0:\n        return 1\n    elif n < 0:\n        return 1\n    else:\n        return 1 << (n - 1).bit_length()\n\n\nprint(smallest_power_of_2(0))\nprint(smallest_power_of_2(1))\nprint(smallest_power_of_2(2))\nprint(smallest_power_of_2(3))\nprint(smallest_power_of_2(4))\nprint(smallest_power_of_2(10))\nprint(smallest_power_of_2(16))"
    },
    {
      "rank": 20,
      "score": 8.0,
      "candidate": "def find_smallest_power_of_2(n: int) -> int:\n    \"\"\"\n    Time complexity: O(logn)\n    Space complexity: O(1)\n    \"\"\"\n    if n <= 0:\n        return 0\n\n    power_of_2 = 1\n\n    while power_of_2 < n:\n        power_of_2 <<= 1\n\n    return power_of_2"
    },
    {
      "rank": 21,
      "score": 8.0,
      "candidate": "def next_power_of_2(n):\n    return 1 if n == 0 else 2 ** (n - 1).bit_length()\n\n\ndef main():\n    n = int(input(\"Enter a number: \"))\n    print(f\"The next power of 2 is: {next_power_of_2(n)}\")\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 22,
      "score": 8.0,
      "candidate": "def smallest_power_2(n):\n    if n == 1:\n        return 1\n\n    power = 1\n    while True:\n        if 2 ** power >= n:\n            return 2 ** power\n        power += 1\n\n\nif __name__ == \"__main__\":\n    print(smallest_power_2(11))"
    },
    {
      "rank": 23,
      "score": 8.0,
      "candidate": "def find_smallest_power(n):\n    power = 0\n    while (2**power) < n:\n        power += 1\n    return 2**power"
    },
    {
      "rank": 24,
      "score": 8.0,
      "candidate": "def smallest_power_of_2(n):\n    if n < 0:\n        return -1\n    elif n == 0:\n        return 0\n    else:\n        return 1 << (n - 1).bit_length()\n\n\nif __name__ == \"__main__\":\n    print(smallest_power_of_2(12))"
    },
    {
      "rank": 25,
      "score": 8.0,
      "candidate": "def smallest_power_of_two(n):\n    if n == 0:\n        return 0\n    if n and not (n & (n - 1)):\n        return n\n    return 1 << (n - 1).bit_length()\n\n\ndef main():\n    n = int(input(\"Enter a number: \"))\n    print(smallest_power_of_two(n))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 26,
      "score": 8.0,
      "candidate": "def smallest_power(n):\n    \"\"\"\n    This function takes an integer n and returns the smallest power of 2 greater than or equal to n.\n    \"\"\"\n    return 2**(n-1).bit_length()"
    },
    {
      "rank": 27,
      "score": 8.0,
      "candidate": "def smallest_power_of_2(n):\n    \"\"\"\n    :param n: integer\n    :return: smallest power of 2 greater than or equal to n\n    \"\"\"\n    if n <= 0:\n        return 1\n    if n & (n - 1) == 0:\n        return n\n\n    power = 1\n    while power < n:\n        power <<= 1\n    return power\n\n\nif __name__ == \"__main__\":\n    assert smallest_power_of_2(20) == 32\n    assert smallest_power_of_2(10) == 16\n    assert smallest_power_of_2(1) == 1\n    assert smallest_power_of_2(0) == 1\n    assert smallest_power_of_2(-1) == 1"
    },
    {
      "rank": 28,
      "score": 8.0,
      "candidate": "def find_smallest_power_of_2(n):\n    if n == 0:\n        return 1\n    return 2 ** (n - 1).bit_length()\n\n\ndef main():\n    n = int(input(\"Enter a number: \"))\n    result = find_smallest_power_of_2(n)\n    print(f\"Smallest power of 2 greater than or equal to {n} is {result}\")\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 29,
      "score": 8.0,
      "candidate": "def smallest_power(n: int) -> int:\n    \"\"\"\n    >>> smallest_power(30)\n    32\n    >>> smallest_power(10)\n    16\n    >>> smallest_power(15)\n    16\n    >>> smallest_power(20)\n    32\n    \"\"\"\n    return 1 << (n - 1).bit_length()\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 30,
      "score": 8.0,
      "candidate": "def smallestPowerOf2(n):\n    power = 1\n    while power < n:\n        power *= 2\n    return power\n\nprint(smallestPowerOf2(10))\nprint(smallestPowerOf2(17))\nprint(smallestPowerOf2(20))\nprint(smallestPowerOf2(21))"
    },
    {
      "rank": 31,
      "score": 8.0,
      "candidate": "def next_power_of_two(n):\n    return 2 ** (n - 1).bit_length()\n\n\ndef main():\n    n = int(input(\"Enter a number: \"))\n    print(f\"The next power of two is {next_power_of_two(n)}\")\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 32,
      "score": 8.0,
      "candidate": "def next_pow(n):\n    p = 1\n    while p < n:\n        p = p * 2\n    return p\n\n\ndef main():\n    n = int(input(\"Enter n: \"))\n    print(f\"Next power of 2 greater than or equal to {n} is {next_pow(n)}\")\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 33,
      "score": 8.0,
      "candidate": "def smallest_power_2(n):\n    \"\"\"Return smallest power of 2 greater than or equal to n.\"\"\"\n    p = 1\n    while p < n:\n        p *= 2\n    return p\n\nif __name__ == '__main__':\n    print(smallest_power_2(10))"
    },
    {
      "rank": 34,
      "score": 8.0,
      "candidate": "def smallest_power_of_2(n):\n    if n == 0:\n        return 0\n\n    power = 1\n    while True:\n        if 2 ** power >= n:\n            return 2 ** power\n        else:\n            power += 1\n\n\nprint(smallest_power_of_2(10))\nprint(smallest_power_of_2(1000))"
    },
    {
      "rank": 35,
      "score": 8.0,
      "candidate": "def find_smallest_power_of_two(number: int) -> int:\n    \"\"\"\n    Time Complexity: O(log n)\n    \"\"\"\n    if number < 0:\n        raise ValueError(\"The number must be positive\")\n    elif number == 0:\n        return 1\n    return 1 << (number - 1).bit_length()\n\n\nif __name__ == \"__main__\":\n    print(find_smallest_power_of_two(0))\n    print(find_smallest_power_of_two(1))\n    print(find_smallest_power_of_two(2))\n    print(find_smallest_power_of_two(3))\n    print(find_smallest_power_of_two(4))\n    print(find_smallest_power_of_two(5))\n    print(find_smallest_power_of_two(6))\n    print(find_smallest_power_of_two(7))\n    print(find_smallest_power_of_two(8))\n    print(find_smallest_power_of_two(9))\n    print(find_smallest_power_of_two(10))"
    },
    {
      "rank": 36,
      "score": 8.0,
      "candidate": "def next_power_of_two(n):\n    if n == 0:\n        return 1\n    return 2 ** (n - 1).bit_length()\n\n\ndef main():\n    n = int(input(\"Enter a number: \"))\n    ans = next_power_of_two(n)\n    print(ans)\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 37,
      "score": 8.0,
      "candidate": "def smallest_power_of_2(n):\n    if n<=0:\n        return 1\n    else:\n        return 1<<(n-1).bit_length()\n\nprint(smallest_power_of_2(6))\nprint(smallest_power_of_2(0))\nprint(smallest_power_of_2(12))\nprint(smallest_power_of_2(10))"
    },
    {
      "rank": 38,
      "score": 8.0,
      "candidate": "def smallest_power_of_2(n):\n    \"\"\"\n    :param n: int - number\n    :return: int - smallest power of 2 greater than or equal to n\n    \"\"\"\n    if n <= 0:\n        return 1\n    else:\n        return 2 ** (n - 1).bit_length()\n\n\nprint(smallest_power_of_2(32))"
    },
    {
      "rank": 39,
      "score": 8.0,
      "candidate": "def smallest_power_of_2(n):\n    p = 1\n    while p < n:\n        p *= 2\n    return p\n\n\nif __name__ == \"__main__\":\n    print(smallest_power_of_2(5))"
    },
    {
      "rank": 40,
      "score": 8.0,
      "candidate": "def next_pow_2(n):\n    i = 0\n    while 2**i < n:\n        i += 1\n    return 2**i\n\n\ndef main():\n    n = int(input(\"Enter a number: \"))\n    print(f\"Next power of 2 greater than or equal to {n} is {next_pow_2(n)}\")\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 41,
      "score": 8.0,
      "candidate": "def smallest_power_of_2(n):\n    # Base case\n    if n == 0:\n        return 0\n    # Binary search\n    start = 1\n    end = n\n    while start <= end:\n        mid = start + (end - start) // 2\n        if mid == n:\n            return mid\n        if mid < n:\n            start = mid + 1\n        else:\n            end = mid - 1\n    # Return the last value of mid\n    return end\n\n\nprint(smallest_power_of_2(2))\nprint(smallest_power_of_2(3))\nprint(smallest_power_of_2(10))\nprint(smallest_power_of_2(16))\nprint(smallest_power_of_2(218))\n\n\n\"\"\"\nTime complexity: O(logN). \nSpace complexity: O(1).\n\"\"\""
    },
    {
      "rank": 42,
      "score": 8.0,
      "candidate": "def smallest_power(n):\n    \"\"\"\n    :param n: int - number to find the smallest power of 2 greater than or equal to n.\n    return: int - smallest power of 2 greater than or equal to n.\n    \"\"\"\n    if n < 0:\n        return \"Invalid input\"\n    return 2**(len(bin(n-1))-2)\n\n\nprint(smallest_power(100))"
    },
    {
      "rank": 43,
      "score": 8.0,
      "candidate": "def find_smallest_power_of_2(n):\n    if n < 0:\n        raise ValueError(\"n should be greater than or equal to 0\")\n    return 2 ** (n - 1).bit_length()\n\n\nif __name__ == \"__main__\":\n    n = 10\n    print(find_smallest_power_of_2(n))"
    },
    {
      "rank": 44,
      "score": 8.0,
      "candidate": "def find_smallest_power_of_2(n):\n    return 2 ** (n - 1).bit_length()"
    },
    {
      "rank": 45,
      "score": 8.0,
      "candidate": "def smallest_power_of_2(n):\n    return 2 ** ((n - 1).bit_length())\n\n\"\"\"\n\nTime complexity: O(1)\nSpace complexity: O(1)\n\n\"\"\""
    },
    {
      "rank": 46,
      "score": 8.0,
      "candidate": "def smallest_power_of_2(n):\n    power = 1\n    while (power < n):\n        power *= 2\n    return power\n\n\nif __name__ == \"__main__\":\n    print(smallest_power_of_2(11))"
    },
    {
      "rank": 47,
      "score": 8.0,
      "candidate": "def next_power(n):\n    return 2**(len(bin(n-1))-2)\n\n\nif __name__ == \"__main__\":\n    print(next_power(9))"
    },
    {
      "rank": 48,
      "score": 8.0,
      "candidate": "def smallest_power(n):\n    p = 1\n    while True:\n        if p >= n:\n            break\n        p *= 2\n    return p\n\n\nprint(smallest_power(4))"
    },
    {
      "rank": 49,
      "score": 8.0,
      "candidate": "def next_power_of_two(n):\n    if n == 0:\n        return 1\n\n    # Find exponent\n    exp = 0\n    while (1 << exp) < n:\n        exp += 1\n\n    return 1 << exp\n\n\nif __name__ == \"__main__\":\n    n = 15\n    print(next_power_of_two(n))"
    },
    {
      "rank": 50,
      "score": 8.0,
      "candidate": "def smallest_power_of_2(n):\n    if n == 0:\n        return 0\n\n    power_of_2 = 1\n    while power_of_2 < n:\n        power_of_2 = power_of_2 << 1\n    return power_of_2\n\n\nprint(smallest_power_of_2(15))\nprint(smallest_power_of_2(16))"
    },
    {
      "rank": 51,
      "score": 8.0,
      "candidate": "def smallest_power(n):\n    power = 1\n    while power < n:\n        power *= 2\n    return power\n\n\nprint(smallest_power(10))"
    },
    {
      "rank": 52,
      "score": 8.0,
      "candidate": "def smallest_power(n):\n    power = 1\n    while power < n:\n        power *= 2\n    return power\n\n\nprint(smallest_power(10))"
    },
    {
      "rank": 53,
      "score": 8.0,
      "candidate": "def find_smallest_power(n):\n    return 1 << (n - 1).bit_length()\n\n\ndef find_smallest_power_recursive(n):\n    if n == 1:\n        return 1\n    return 1 << (n - 1).bit_length()\n\n\nif __name__ == \"__main__\":\n    print(find_smallest_power(25))\n    print(find_smallest_power_recursive(25))"
    },
    {
      "rank": 54,
      "score": 8.0,
      "candidate": "def smallest_power_of_2(n):\n    return 2 ** (n - 1).bit_length()\n\n\ndef main():\n    print(smallest_power_of_2(10))\n    print(smallest_power_of_2(30))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 55,
      "score": 8.0,
      "candidate": "def smallest_power(n):\n    power = 1\n    while power <= n:\n        power = power << 1\n    return power >> 1\n\n\nif __name__ == \"__main__\":\n    print(smallest_power(10))"
    },
    {
      "rank": 56,
      "score": 8.0,
      "candidate": "def smallest_power_of_two(n):\n    return 2 ** (n - 1).bit_length()\n\n\ndef main():\n    n = int(input(\"Enter a number: \"))\n    print(smallest_power_of_two(n))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 57,
      "score": 8.0,
      "candidate": "def smallestPowerOfTwo(n):\n    return 1 if n == 0 else 2 ** (n - 1).bit_length()\n\nprint(smallestPowerOfTwo(10))\nprint(smallestPowerOfTwo(0))\nprint(smallestPowerOfTwo(1))"
    },
    {
      "rank": 58,
      "score": 8.0,
      "candidate": "def next_power_of_two(n):\n    if n == 0:\n        return 1\n\n    power = 1\n    while power < n:\n        power *= 2\n    return power\n\n\nif __name__ == \"__main__\":\n    print(next_power_of_two(3))\n    print(next_power_of_two(10))"
    },
    {
      "rank": 59,
      "score": 8.0,
      "candidate": "def smallest_power_of_two(n):\n    \"\"\"\n    :param n: int - a positive integer\n    :return: int - the smallest power of 2 greater than or equal to n\n    \"\"\"\n    if n == 0:\n        return 1\n    if n < 0:\n        return \"Invalid input\"\n    if n == 1:\n        return 1\n\n    binary = bin(n)[2:]\n    return 2**len(binary)\n\n\nprint(smallest_power_of_two(1))\nprint(smallest_power_of_two(16))\nprint(smallest_power_of_two(21))"
    },
    {
      "rank": 60,
      "score": 8.0,
      "candidate": "def find_smallest_power(n):\n    \"\"\"\n    :param n: int - number to find the smallest power of 2 greater than or equal to\n    :return: int - smallest power of 2 greater than or equal to n\n    \"\"\"\n    # if n is already a power of 2, return n\n    if n & (n - 1) == 0:\n        return n\n    # find the nearest power of 2, which is smaller than n\n    nearest_power_of_2 = n & ~(n - 1)\n    # if nearest power of 2 is greater than n, return the nearest power of 2\n    if nearest_power_of_2 > n:\n        return nearest_power_of_2 >> 1\n    # if nearest power of 2 is less than n, return the nearest power of 2\n    return nearest_power_of_2\n\n\nprint(find_smallest_power(25))\nprint(find_smallest_power(3))\nprint(find_smallest_power(4))\nprint(find_smallest_power(6))\nprint(find_smallest_power(5))"
    },
    {
      "rank": 61,
      "score": 8.0,
      "candidate": "def smallest_power(n):\n    power = 0\n    while(n != 0):\n        n = n >> 1\n        power += 1\n    return power\n\nprint(smallest_power(31))"
    },
    {
      "rank": 62,
      "score": 8.0,
      "candidate": "def smallest_power_of_two(n):\n    return 2 ** int(n - 1).bit_length()\n\n\nprint(smallest_power_of_two(3))"
    },
    {
      "rank": 63,
      "score": 8.0,
      "candidate": "def next_power_of_two(n):\n    return 2 ** (n - 1).bit_length()\n\n\nif __name__ == \"__main__\":\n    print(next_power_of_two(5))"
    },
    {
      "rank": 64,
      "score": 8.0,
      "candidate": "def find_smallest_power_of_2(number):\n    if number <= 0:\n        return 0\n\n    power_of_2 = 1\n    while True:\n        if number <= power_of_2:\n            return power_of_2\n\n        power_of_2 *= 2\n\n\ndef main():\n    print(\"Smallest power of 2 greater than or equal to 10:\")\n    print(find_smallest_power_of_2(10))\n\n    print(\"Smallest power of 2 greater than or equal to 17:\")\n    print(find_smallest_power_of_2(17))\n\n    print(\"Smallest power of 2 greater than or equal to 20:\")\n    print(find_smallest_power_of_2(20))\n\n    print(\"Smallest power of 2 greater than or equal to 25:\")\n    print(find_smallest_power_of_2(25))\n\n\nmain()"
    },
    {
      "rank": 65,
      "score": 8.0,
      "candidate": "def smallest_power_of_two(n):\n    return 2**((n-1).bit_length())\n\n\nprint(smallest_power_of_two(5))\nprint(smallest_power_of_two(16))\nprint(smallest_power_of_two(20))"
    },
    {
      "rank": 66,
      "score": 8.0,
      "candidate": "def smallest_power(n):\n    return 1 << (n - 1).bit_length()\n\n\ndef main():\n    print(smallest_power(32))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 67,
      "score": 8.0,
      "candidate": "def smallest_power_of_2(n):\n    if n == 0:\n        return 1\n    if n & (n - 1) == 0:\n        return n\n    else:\n        return smallest_power_of_2(n | (n - 1))\n\n\ndef main():\n    n = int(input(\"Enter number: \"))\n    print(smallest_power_of_2(n))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 68,
      "score": 8.0,
      "candidate": "def smallest_power_of_2(n):\n    power = 1\n    while power <= n:\n        power = power << 1\n    return power >> 1\n\n\nprint(smallest_power_of_2(100))"
    },
    {
      "rank": 69,
      "score": 8.0,
      "candidate": "def find_smallest_power_of_2(n):\n    power = 1\n\n    while power < n:\n        power *= 2\n\n    return power\n\n\ndef main():\n    print(find_smallest_power_of_2(10))\n    print(find_smallest_power_of_2(5))\n    print(find_smallest_power_of_2(1))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 70,
      "score": 8.0,
      "candidate": "def smallest_power_of_two(n):\n    \"\"\"\n    Find smallest power of 2 greater than or equal to n\n    :param n: int\n    :return: int\n    \"\"\"\n    return 1 if n == 0 else 1 << (n - 1).bit_length()\n\n\nif __name__ == \"__main__\":\n    print(smallest_power_of_two(10))"
    },
    {
      "rank": 71,
      "score": 8.0,
      "candidate": "def smallest_power_of_two(n):\n    if n == 0:\n        return 0\n    elif n < 0:\n        raise ValueError(\"n must be >= 0\")\n    return 1 << (n - 1).bit_length()\n\n\nif __name__ == \"__main__\":\n    print(smallest_power_of_two(0))\n    print(smallest_power_of_two(1))\n    print(smallest_power_of_two(2))\n    print(smallest_power_of_two(3))\n    print(smallest_power_of_two(4))\n    print(smallest_power_of_two(5))\n    print(smallest_power_of_two(6))\n    print(smallest_power_of_two(7))\n    print(smallest_power_of_two(8))\n    print(smallest_power_of_two(9))\n    print(smallest_power_of_two(10))\n    print(smallest_power_of_two(100))\n    print(smallest_power_of_two(1000))"
    },
    {
      "rank": 72,
      "score": 8.0,
      "candidate": "def smallest_power(n):\n    power = 2\n    while True:\n        if n <= power:\n            return power\n        else:\n            power *= 2\n\n\nprint(smallest_power(13))"
    },
    {
      "rank": 73,
      "score": 8.0,
      "candidate": "def smallest_power_of_2(n):\n    if n == 0:\n        return 0\n    return 1 << (n - 1).bit_length()\n\n\ndef main():\n    n = int(input(\"Enter a number: \"))\n    print(smallest_power_of_2(n))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 74,
      "score": 8.0,
      "candidate": "def find_smallest_power(n):\n    \"\"\"\n    :param n: int - number to find the smallest power of 2.\n    return: int - smallest power of 2 greater than or equal to n.\n    \"\"\"\n    if n <= 0:\n        return 0\n\n    if n & (n - 1) == 0:\n        return n\n\n    power = 1\n\n    while n > power:\n        power <<= 1\n\n    return power\n\nif __name__ == '__main__':\n    print(find_smallest_power(16))\n    print(find_smallest_power(10))"
    },
    {
      "rank": 75,
      "score": 8.0,
      "candidate": "def smallest_power_of_2(n):\n    if n == 0:\n        return 0\n    else:\n        return 1 << (n-1).bit_length()\n\n\nif __name__ == \"__main__\":\n    print(smallest_power_of_2(0))\n    print(smallest_power_of_2(1))\n    print(smallest_power_of_2(2))\n    print(smallest_power_of_2(3))\n    print(smallest_power_of_2(4))\n    print(smallest_power_of_2(5))\n    print(smallest_power_of_2(6))\n    print(smallest_power_of_2(7))"
    },
    {
      "rank": 76,
      "score": 8.0,
      "candidate": "def smallest_power_of_2(n):\n    return 1 if n == 0 else 2**((n-1).bit_length())\n\n\nprint(smallest_power_of_2(5))\nprint(smallest_power_of_2(20))\nprint(smallest_power_of_2(0))"
    },
    {
      "rank": 77,
      "score": 1.0,
      "candidate": "def smallest_power_of_2(n):\n    if n == 0:\n        return 0\n\n    count = 0\n    while 1:\n        if n & 1 == 1:\n            break\n        n = n >> 1\n        count += 1\n\n    return 1 << count\n\n\ndef smallest_power_of_2_optimized(n):\n    if n == 0:\n        return 0\n\n    count = 0\n    while n & 1 == 0:\n        n = n >> 1\n        count += 1\n\n    return 1 << count\n\n\ndef main():\n    n = int(input(\"Enter a number: \"))\n    ans = smallest_power_of_2(n)\n    ans_optimized = smallest_power_of_2_optimized(n)\n    print(ans)\n    print(ans_optimized)\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 78,
      "score": 1.0,
      "candidate": "def smallest_power_of_2(n):\n    return 2**(n-1).bit_length()\n\n\ndef test_smallest_power_of_2():\n    assert smallest_power_of_2(1) == 2\n    assert smallest_power_of_2(2) == 2\n    assert smallest_power_of_2(3) == 4\n    assert smallest_power_of_2(4) == 4\n    assert smallest_power_of_2(5) == 8\n    assert smallest_power_of_2(6) == 8\n    assert smallest_power_of_2(7) == 8"
    },
    {
      "rank": 79,
      "score": 1.0,
      "candidate": "# Solution\ndef find_smallest_power_of_2(n):\n    if n == 0:\n        return 0\n    return 1 << (n - 1).bit_length()\n\n\n# Solution\ndef find_smallest_power_of_2(n):\n    return 1 << (n - 1).bit_length()"
    },
    {
      "rank": 80,
      "score": 1.0,
      "candidate": "def next_power_of_2(n):\n    return 1 if n == 0 else 2 ** (n - 1).bit_length()"
    },
    {
      "rank": 81,
      "score": 1.0,
      "candidate": "def find_power_2(n):\n    if n == 0:\n        return 0\n    return 1 << (n - 1).bit_length()\n\n\ndef main():\n    print(\"Power of 2 greater than or equal to 100 is : \" + str(find_power_2(100)))\n    print(\"Power of 2 greater than or equal to 10 is : \" + str(find_power_2(10)))\n    print(\"Power of 2 greater than or equal to 0 is : \" + str(find_power_2(0)))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 82,
      "score": 1.0,
      "candidate": "def smallest_power_of_two(n: int) -> int:\n    \"\"\"\n    >>> smallest_power_of_two(10)\n    16\n    >>> smallest_power_of_two(20)\n    32\n    >>> smallest_power_of_two(25)\n    32\n    >>> smallest_power_of_two(128)\n    128\n    >>> smallest_power_of_two(-1)\n    0\n    >>> smallest_power_of_two(0)\n    0\n    \"\"\"\n    return 1 if n == 0 else 1 << (n - 1).bit_length()\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 83,
      "score": 1.0,
      "candidate": "def next_pow2(n):\n    if n & (n - 1) == 0:\n        return n\n    return 1 << (n - 1).bit_length()\n\n\ndef next_pow2_bitwise(n):\n    n -= 1\n    n |= n >> 1\n    n |= n >> 2\n    n |= n >> 4\n    n |= n >> 8\n    n |= n >> 16\n    return n + 1\n\n\nprint(next_pow2(15))\nprint(next_pow2_bitwise(15))"
    },
    {
      "rank": 84,
      "score": 1.0,
      "candidate": "def smallest_power(n):\n    return 1 << (n-1).bit_length()\n\n\ndef test_smallest_power(n, expected_answer):\n    answer = smallest_power(n)\n    if answer != expected_answer:\n        raise Exception(\n            f\"Answer {answer} is wrong. Expected answer is {expected_answer}\")\n\n\nif __name__ == \"__main__\":\n    test_smallest_power(0, 1)\n    test_smallest_power(1, 1)\n    test_smallest_power(2, 2)\n    test_smallest_power(3, 4)\n    test_smallest_power(4, 4)\n    test_smallest_power(5, 8)\n    print(\"All tests passed!\")"
    },
    {
      "rank": 85,
      "score": 1.0,
      "candidate": "def smallest_power_of_2(n: int) -> int:\n    \"\"\"\n    >>> smallest_power_of_2(2)\n    2\n    >>> smallest_power_of_2(3)\n    4\n    >>> smallest_power_of_2(10)\n    16\n    >>> smallest_power_of_2(16)\n    16\n    \"\"\"\n    if n <= 0:\n        raise ValueError(\"n should be >= 0\")\n\n    return 2 ** (n - 1).bit_length()\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 86,
      "score": 1.0,
      "candidate": "def power_of_2(n: int) -> int:\n    \"\"\"\n    >>> power_of_2(2)\n    2\n    >>> power_of_2(5)\n    8\n    >>> power_of_2(6)\n    8\n    >>> power_of_2(7)\n    8\n    >>> power_of_2(8)\n    8\n    \"\"\"\n    return 2 ** ((n - 1) // 2 + 1)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 87,
      "score": 1.0,
      "candidate": "def smallest_power_of_two(n):\n    \"\"\"\n    :param: n - number to check\n    Return: smallest power of 2 greater than or equal to n\n    \"\"\"\n    return 1 if n == 0 else 1 << (n - 1).bit_length()\n\n\ndef test_function(test_case):\n    test_input, test_expected = test_case\n    test_actual = smallest_power_of_two(test_input)\n    if test_actual == test_expected:\n        print(\"Pass\")\n    else:\n        print(\"Fail\")\n\n\ntest_function((10, 16))\ntest_function((16, 16))\ntest_function((20, 32))\ntest_function((21, 32))"
    },
    {
      "rank": 88,
      "score": 1.0,
      "candidate": "def next_power_of_2(n):\n    # if n is 0 return 2\n    if n == 0:\n        return 2\n    # if n is 1 return 2\n    if n == 1:\n        return 2\n    # if n is power of 2 return n\n    if (n & (n - 1) == 0):\n        return n\n    # if n is not power of 2\n    # get the next power of 2\n    power_of_2 = 1\n    while power_of_2 < n:\n        power_of_2 = power_of_2 << 1\n    return power_of_2\n\n\nprint(next_power_of_2(1))\nprint(next_power_of_2(2))\nprint(next_power_of_2(3))\nprint(next_power_of_2(4))\nprint(next_power_of_2(5))\nprint(next_power_of_2(6))\nprint(next_power_of_2(7))\nprint(next_power_of_2(8))\nprint(next_power_of_2(9))\nprint(next_power_of_2(10))\nprint(next_power_of_2(11))\nprint(next_power_of_2(12))\nprint(next_power_of_2(13))\nprint(next_power_of_2(14))\nprint(next_power_of_2(15))\nprint(next_power_of_2(16))\nprint(next_power_of_2(17))\nprint(next_power_of_2(18))\nprint(next_power_of_2(19))\nprint(next_power_of_2(20))\nprint(next_power_of_2(21))\nprint(next_power_of_2(22))\nprint(next_power_of_2(23))\nprint(next_power_of_2(24))\nprint(next_power_of_2(25))\nprint(next_power_of_2"
    },
    {
      "rank": 89,
      "score": 1.0,
      "candidate": "def smallest_power_of_2(n):\n    if n == 0:\n        return 0\n    if n and not (n & (n - 1)):\n        return n\n\n    i = 1\n    while True:\n        if i >= n:\n            break\n        i = i << 1\n\n    return i\n\n\ndef test_smallest_power_of_2():\n    assert smallest_power_of_2(0) == 0\n    assert smallest_power_of_2(3) == 4\n    assert smallest_power_of_2(10) == 16\n    assert smallest_power_of_2(23) == 32"
    },
    {
      "rank": 90,
      "score": 1.0,
      "candidate": "def find_smallest_power_of_two(n: int) -> int:\n    \"\"\"\n    Time Complexity: O(logn)\n    Space Complexity: O(1)\n    \"\"\"\n    return 1 << (n - 1).bit_length()\n\n\nif __name__ == \"__main__\":\n    assert find_smallest_power_of_two(10) == 8"
    },
    {
      "rank": 91,
      "score": 1.0,
      "candidate": "def next_power_of_two(n: int) -> int:\n    \"\"\"\n    >>> next_power_of_two(10)\n    16\n    >>> next_power_of_two(20)\n    32\n    >>> next_power_of_two(21)\n    32\n    >>> next_power_of_two(0)\n    1\n    \"\"\"\n    if n == 0:\n        return 1\n    return 2 ** (n - 1).bit_length()\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 92,
      "score": 1.0,
      "candidate": "def power_of_2(n):\n    return 2 ** (n - 1).bit_length()\n\n\ndef power_of_2_2(n):\n    return 2 ** (n - 1).bit_length()\n\n\nprint(power_of_2(10))\nprint(power_of_2_2(10))"
    },
    {
      "rank": 93,
      "score": 1.0,
      "candidate": "def next_power_of_2(n: int) -> int:\n    \"\"\"\n    Returns the next power of 2 greater than or equal to n\n    >>> next_power_of_2(10)\n    16\n    >>> next_power_of_2(3)\n    4\n    >>> next_power_of_2(4)\n    4\n    >>> next_power_of_2(12)\n    16\n    >>> next_power_of_2(128)\n    128\n    >>> next_power_of_2(1024)\n    1024\n    >>> next_power_of_2(1234)\n    1024\n    >>> next_power_of_2(1048576)\n    1048576\n    >>> next_power_of_2(-1)\n    0\n    >>> next_power_of_2(-10)\n    0\n    \"\"\"\n    if n < 0:\n        return 0\n    if n == 0:\n        return 1\n    return 2 ** (n - 1).bit_length()\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 94,
      "score": 1.0,
      "candidate": "def smallest_power_of_2(n: int) -> int:\n    \"\"\"\n    Naive approach\n    >>> smallest_power_of_2(13)\n    16\n    >>> smallest_power_of_2(11)\n    16\n    >>> smallest_power_of_2(1024)\n    1024\n    >>> smallest_power_of_2(128)\n    128\n    >>> smallest_power_of_2(5)\n    8\n    >>> smallest_power_of_2(10)\n    16\n    >>> smallest_power_of_2(4)\n    8\n    >>> smallest_power_of_2(0)\n    1\n    >>> smallest_power_of_2(-1)\n    1\n    >>> smallest_power_of_2(-10)\n    1\n    \"\"\"\n    if n <= 0:\n        return 1\n    return 2 ** (n - 1).bit_length()\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 95,
      "score": 1.0,
      "candidate": "def smallest_power_of_2(n):\n    \"\"\"\n    >>> smallest_power_of_2(10)\n    16\n    >>> smallest_power_of_2(16)\n    16\n    >>> smallest_power_of_2(11)\n    16\n    \"\"\"\n    return 2 ** (n - 1).bit_length()\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 96,
      "score": 1.0,
      "candidate": "def smallest_power_of_2(n):\n    if n == 0:\n        return 1\n    elif n < 0:\n        return -1\n    else:\n        return 2 ** (n-1).bit_length()\n\n\ndef test_smallest_power_of_2():\n    assert smallest_power_of_2(0) == 1\n    assert smallest_power_of_2(1) == 2\n    assert smallest_power_of_2(2) == 2\n    assert smallest_power_of_2(3) == 4\n    assert smallest_power_of_2(4) == 4\n    assert smallest_power_of_2(5) == 8\n    assert smallest_power_of_2(6) == 8\n    assert smallest_power_of_2(7) == 8\n    assert smallest_power_of_2(8) == 8\n    assert smallest_power_of_2(9) == 16\n    assert smallest_power_of_2(10) == 16\n    assert smallest_power_of_2(11) == 16\n    assert smallest_power_of_2(12) == 16\n    assert smallest_power_of_2(13) == 16\n    assert smallest_power_of_2(14) == 16\n    assert smallest_power_of_2(15) == 16\n    assert smallest_power_of_2(16) == 16\n    assert smallest_power_of_2(-1) == -1"
    },
    {
      "rank": 97,
      "score": 1.0,
      "candidate": "def smallest_power_2(n: int) -> int:\n    \"\"\"\n    Returns smallest power of 2 greater than or equal to n\n    >>> smallest_power_2(10)\n    16\n    >>> smallest_power_2(20)\n    32\n    >>> smallest_power_2(30)\n    64\n    >>> smallest_power_2(40)\n    64\n    >>> smallest_power_2(50)\n    64\n    \"\"\"\n\n    return 2 ** (n - 1).bit_length()\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 98,
      "score": 1.0,
      "candidate": "def smallest_power_of_2(n: int) -> int:\n    \"\"\"\n    Naive solution:\n        Time Complexity: O(n)\n        Space Complexity: O(1)\n    \"\"\"\n\n    if n < 0:\n        raise ValueError(\"n must be greater than 0\")\n\n    if n <= 1:\n        return n\n\n    if n == 2:\n        return 2\n\n    while n % 2 == 0:\n        n /= 2\n\n    return 2 * (1 + int(n / 2))\n\n\ndef smallest_power_of_2_v2(n: int) -> int:\n    \"\"\"\n    Naive solution:\n        Time Complexity: O(n)\n        Space Complexity: O(1)\n    \"\"\"\n\n    if n < 0:\n        raise ValueError(\"n must be greater than 0\")\n\n    if n <= 1:\n        return n\n\n    if n == 2:\n        return 2\n\n    while n % 2 == 0:\n        n /= 2\n\n    return 2 ** (n.bit_length() - 1)\n\n\nif __name__ == \"__main__\":\n    print(smallest_power_of_2(2))\n    print(smallest_power_of_2(5))\n    print(smallest_power_of_2(6))\n    print(smallest_power_of_2(7))\n    print(smallest_power_of_2(8))\n    print(smallest_power_of_2(9))\n    print(smallest_power_of_2(10))\n    print(smallest_power_of_2(11))\n    print(smallest_power_of_2(12))\n    print(smallest_power_of_2(13))\n    print(smallest_power_of_2(14))\n    print(smallest_power_of_2(15))\n    print(smallest_power_of_2(16))"
    },
    {
      "rank": 99,
      "score": 1.0,
      "candidate": "def smallest_power_of_2(n):\n    if n == 0:\n        return 1\n\n    power = 1\n    while power < n:\n        power *= 2\n\n    return power\n\n\ndef test_smallest_power_of_2():\n    assert smallest_power_of_2(0) == 1\n    assert smallest_power_of_2(1) == 1\n    assert smallest_power_of_2(2) == 2\n    assert smallest_power_of_2(3) == 4\n    assert smallest_power_of_2(4) == 4\n    assert smallest_power_of_2(5) == 8\n    assert smallest_power_of_2(6) == 8\n    assert smallest_power_of_2(7) == 8\n    assert smallest_power_of_2(8) == 8\n    assert smallest_power_of_2(9) == 16\n    assert smallest_power_of_2(10) == 16"
    },
    {
      "rank": 100,
      "score": 1.0,
      "candidate": "def find_smallest_power_of_2(n):\n    return 1 << (n - 1).bit_length()\n\n\nif __name__ == \"__main__\":\n    print(find_smallest_power_of_2(1))\n    print(find_smallest_power_of_2(2))\n    print(find_smallest_power_of_2(3))\n    print(find_smallest_power_of_2(4))\n    print(find_smallest_power_of_2(5))\n    print(find_smallest_power_of_2(6))\n    print(find_smallest_power_of_2(7))\n    print(find_smallest_power_of_2(8))"
    }
  ]
}