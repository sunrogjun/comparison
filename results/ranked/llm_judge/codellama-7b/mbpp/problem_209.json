{
  "timestamp": "2025-09-14T23:52:49.671216",
  "method": "improved_llm_judge",
  "judge_model": "codellama/CodeLlama-7b-Python-hf",
  "target_model": "codellama-7b",
  "dataset": "mbpp",
  "problem_number": 209,
  "total_candidates": 100,
  "results": [
    {
      "rank": 1,
      "score": 10.0,
      "candidate": "def replace_max_occurences(input_string, max_occurences):\n    \"\"\"\n    >>> replace_max_occurences(\"The 24-hour news channel CNN has 24 hours of news.\", 2)\n    'The 24-hour news channel CNN has 24:hours of news.'\n    >>> replace_max_occurences(\"1. 2. 3. 4. 5. 6. 7. 8. 9. 10. 11. 12.\", 2)\n    '1. 2:. 3:. 4:. 5:. 6:. 7:. 8:. 9:. 10:. 11:. 12:.'\n    >>> replace_max_occurences(\"The 24-hour news channel CNN has 24 hours of news.\", 0)\n    'The 24-hour news channel CNN has 24 hours of news.'\n    \"\"\"\n    if input_string is None or max_occurences < 0:\n        return input_string\n\n    result_string = \"\"\n    prev_char = \"\"\n    current_char = \"\"\n    counter = 0\n    for char in input_string:\n        if char in \" .,\":\n            current_char = char\n            if current_char == prev_char:\n                counter += 1\n            else:\n                counter = 1\n        else:\n            current_char = \"\"\n\n        if counter <= max_occurences:\n            result_string += char\n        else:\n            if current_char == \" \":\n                result_string += \":\"\n            elif current_char == \".\":\n                result_string += \":\"\n            elif current_char == \",\":\n                result_string += \":\"\n\n        prev_char = char\n\n    return result_string\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 2,
      "score": 10.0,
      "candidate": "def replace_max_occurences(string, n, char):\n    \"\"\"\n    :param string: str\n    :param n: int\n    :param char: str\n    :return: str\n    \"\"\"\n    if char == \" \":\n        # replace spaces with colons\n        string = string.replace(\" \", \":\")\n    elif char == \",\":\n        # replace commas with colons\n        string = string.replace(\",\", \":\")\n    elif char == \".\":\n        # replace dots with colons\n        string = string.replace(\".\", \":\")\n    else:\n        # if the character is not a space, comma, or a dot, return the string as is\n        return string\n\n    # split the string by colons\n    string_list = string.split(\":\")\n\n    # keep track of the max occurrences of a colon in the list\n    max_colons = 0\n\n    # iterate through the list\n    for index, item in enumerate(string_list):\n        # count the number of colons in the item\n        count = item.count(\":\")\n        # if the number of colons is greater than the max occurrences, set max_colons to the count\n        if count > max_colons:\n            max_colons = count\n        # if the number of colons is the same as the max occurrences, add the item to a new list\n        elif count == max_colons:\n            new_string_list.append(item)\n\n    # join the list back into a string\n    string = \":\".join(new_string_list)\n\n    return string\n\n\n# test cases\nprint(replace_max_occurences(\"Hello, World\", 1, \" \"))\nprint(replace_max_occurences(\"Hello, World\", 2, \" \"))\nprint(replace_max_occurences(\"Hello, World\", 3, \" \"))\nprint(replace_max_occurences(\"Hello, World\", 2, \",\"))\nprint(replace_max_occurences(\"Hello, World\", 2, \".\"))\nprint(replace_max_occurences(\"Hello, World\", 2, \"z\"))\nprint(replace_max_occurences(\""
    },
    {
      "rank": 3,
      "score": 10.0,
      "candidate": "def replace_spaces(string, n):\n    \"\"\"\n    >>> replace_spaces(\"This is a string\", 2)\n    'This:is:a:string'\n    >>> replace_spaces(\"This is a string\", 3)\n    'This:is:a:string'\n    >>> replace_spaces(\"This is a string\", 4)\n    'This:is:a:string'\n    >>> replace_spaces(\"This is a string\", 5)\n    'This:is:a:string'\n    >>> replace_spaces(\"This is a string\", 6)\n    'This:is:a:string'\n    >>> replace_spaces(\"This is a string\", 0)\n    'This:is:a:string'\n    >>> replace_spaces(\"This is a string\", 1)\n    'This is a string'\n    >>> replace_spaces(\"This is a string\", 7)\n    'This is a string'\n    \"\"\"\n    # your code here\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 4,
      "score": 10.0,
      "candidate": "def replace_with_colon(s: str, n: int) -> str:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(n)\n    \"\"\"\n    replacements = 0\n\n    def replace(c: str) -> str:\n        nonlocal replacements\n        replacements += 1\n        if replacements == n:\n            return \":\"\n        return c\n\n    return \"\".join(replace(c) for c in s if c in \" .,\")\n\n\nif __name__ == \"__main__\":\n    assert replace_with_colon(\"ab b\", 1) == \"ab:b\"\n    assert replace_with_colon(\"ab b\", 2) == \"ab b\"\n    assert replace_with_colon(\"ab b\", 3) == \"ab b\"\n    assert replace_with_colon(\"ab b\", 0) == \"ab b\""
    },
    {
      "rank": 5,
      "score": 10.0,
      "candidate": "def replace_max_occurrences(string: str, char: str, max_occur: int) -> str:\n    \"\"\"Replaces maximum n occurrences of spaces, commas, or dots with a colon.\n\n    Args:\n        string (str): String to replace characters in.\n        char (str): Character to replace.\n        max_occur (int): Maximum number of occurrences to replace.\n\n    Examples:\n        >>> replace_max_occurrences(\"a,b,c d.e f g\", \",\", 2)\n        'a,b:c d.e f g'\n\n    Returns:\n        str: String with replaced characters.\n    \"\"\"\n    new_string = \"\"\n    for i, char_in_string in enumerate(string):\n        if char_in_string == char and i < max_occur:\n            new_string += \":\"\n        else:\n            new_string += char_in_string\n    return new_string\n\n\nif __name__ == \"__main__\":\n    string = \"a,b,c d.e f g\"\n    print(replace_max_occurrences(string, \",\", 2))"
    },
    {
      "rank": 6,
      "score": 10.0,
      "candidate": "def replace_spaces(text: str, n: int) -> str:\n    \"\"\"Replace n spaces, commas, or dots with a colon.\n\n    Args:\n        text (str): Text to be processed.\n        n (int): Number of occurrences to be replaced.\n\n    Returns:\n        str: Processed text.\n    \"\"\"\n    return text.replace(\" \", \":\").replace(\",\", \":\").replace(\".\", \":\").replace(\":\", \" \", n - 1)"
    },
    {
      "rank": 7,
      "score": 10.0,
      "candidate": "def replace_max_n_spaces(text, max_spaces=2):\n    \"\"\"\n    >>> replace_max_n_spaces(\"Hello, how are you?\")\n    'Hello: how are you?'\n    >>> replace_max_n_spaces(\"Hello, how are you?\", 3)\n    'Hello: how are you?'\n    >>> replace_max_n_spaces(\"Hello, how are you?\", 1)\n    'Hello, how are you?'\n    >>> replace_max_n_spaces(\"Hello, how are you?\", 0)\n    'Hello, how are you?'\n    >>> replace_max_n_spaces(\"Hello  how are you?\", 1)\n    'Hello how are you?'\n    >>> replace_max_n_spaces(\"Hello  how are you?\", 2)\n    'Hello: how are you?'\n    >>> replace_max_n_spaces(\"Hello  how are you?\", 3)\n    'Hello: how are you?'\n    >>> replace_max_n_spaces(\"Hello  how are you?\", 4)\n    'Hello: how are you?'\n    >>> replace_max_n_spaces(\"Hello  how are you?\", 5)\n    'Hello: how are you?'\n    \"\"\"\n    if max_spaces < 0:\n        raise ValueError(\"max_spaces must be non-negative\")\n\n    for char in \", .\":\n        text = text.replace(char, \":\" * max_spaces, max_spaces)\n    return text\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 8,
      "score": 10.0,
      "candidate": "def replace_n_characters(string: str, char: str, n: int) -> str:\n    \"\"\"\n    >>> replace_n_characters(\"This is my, first sentence.\", \",\", 2)\n    'This is my: first sentence.'\n    >>> replace_n_characters(\"This is my first sentence.\", \" \", 5)\n    'This: is: my: first: sentence.'\n    >>> replace_n_characters(\"This is my first sentence.\", \".\", 1)\n    'This: is my first sentence.'\n    \"\"\"\n    char_count = 0\n    for index, ch in enumerate(string):\n        if ch == char:\n            char_count += 1\n        if char_count >= n:\n            string = string[:index] + \":\" + string[index + 1 :]\n            char_count = 0\n    return string\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 9,
      "score": 10.0,
      "candidate": "import re\n\ndef replace_max_n(string, character, n):\n    # Create a regex pattern to search for n occurrences of a given character\n    pattern = character * n\n\n    # Use re.sub to replace n occurrences of character with colon\n    result = re.sub(pattern, ':', string)\n\n    return result\n\nprint(replace_max_n('Hi there, how are you?', ' ', 3))\nprint(replace_max_n('Hi there, how are you?', ' ', 2))\nprint(replace_max_n('Hi there, how are you?', ' ', 1))\nprint(replace_max_n('Hi there, how are you?', ',', 3))\nprint(replace_max_n('Hi there, how are you?', ',', 2))\nprint(replace_max_n('Hi there, how are you?', ',', 1))\nprint(replace_max_n('Hi there, how are you?', '.', 3))\nprint(replace_max_n('Hi there, how are you?', '.', 2))\nprint(replace_max_n('Hi there, how are you?', '.', 1))\nprint(replace_max_n('Hi there, how are you?', ':', 3))\nprint(replace_max_n('Hi there, how are you?', ':', 2))\nprint(replace_max_n('Hi there, how are you?', ':', 1))\n\n\n\"\"\"\nWrite a function to replace maximum n occurrences of spaces, commas, or dots with a colon.\n\"\"\"\n\nimport re\n\ndef replace_max_n(string, character, n):\n    # Create a regex pattern to search for n occurrences of a given character\n    pattern = character * n\n\n    # Use re.sub to replace n occurrences of character with colon\n    result = re.sub(pattern, ':', string)\n\n    return result\n\nprint(replace_max_n('Hi there, how are you?', ' ', 3))\nprint(replace_max_n('Hi there, how are you?', ' ', 2))\nprint(replace_max_n('"
    },
    {
      "rank": 10,
      "score": 9.0,
      "candidate": "def replace_spaces(s):\n    if not s:\n        return s\n\n    max_occurrences = 0\n    for c in ['.', ',', ' ']:\n        max_occurrences = max(max_occurrences, s.count(c))\n\n    for _ in range(max_occurrences):\n        s = s.replace(' ', ':')\n        s = s.replace('.', ':')\n        s = s.replace(',', ':')\n\n    return s"
    },
    {
      "rank": 11,
      "score": 9.0,
      "candidate": "def replace_characters(input_string, n):\n    \"\"\"\n    input_string: string\n    n: int\n    return: string\n    \"\"\"\n    for i in [\",\", \".\", \" \"]:\n        input_string = input_string.replace(i, \":\", n)\n    return input_string"
    },
    {
      "rank": 12,
      "score": 8.0,
      "candidate": "def replace_spaces(string, num):\n    count = 0\n    new_string = \"\"\n    for char in string:\n        if char == \" \" or char == \",\" or char == \".\":\n            count += 1\n            if count <= num:\n                new_string += \":\"\n            else:\n                new_string += char\n            count = 0\n        else:\n            new_string += char\n    return new_string"
    },
    {
      "rank": 13,
      "score": 8.0,
      "candidate": "def replace_symbols(string, n):\n    new_string = string\n    for symbol in [\",\", \".\"]:\n        for i in range(n):\n            new_string = new_string.replace(symbol, \":\")\n    return new_string\n\n\ndef replace_symbols_2(string, n):\n    new_string = \"\"\n    for symbol in string:\n        if symbol in [\",\", \".\", \" \"]:\n            new_string += \":\"\n        else:\n            new_string += symbol\n    return new_string\n\n\nif __name__ == '__main__':\n    print(replace_symbols(\"Hello, World!\", 2))\n    print(replace_symbols(\"How are you?\", 3))\n    print(replace_symbols_2(\"Hello, World!\", 2))\n    print(replace_symbols_2(\"How are you?\", 3))"
    },
    {
      "rank": 14,
      "score": 8.0,
      "candidate": "def replace_max_n(text, n):\n    \"\"\"\n    text - string\n    n - int\n    returns - string\n    \"\"\"\n    # Your code here\n    # Step 1 - replace spaces and commas with colon\n    # Step 2 - replace the last n colons with spaces\n\n    # Step 1\n    text = text.replace(' ', ':').replace(',', ':').replace('.', ':')\n\n    # Step 2\n    # find first colon\n    first_colon = text.find(':')\n\n    # find last colon\n    last_colon = text.rfind(':')\n\n    # if first colon is not same as last colon\n    if first_colon != last_colon:\n        # get the number of colons between first and last\n        number_of_colons = text[first_colon+1:last_colon].count(':')\n\n        # if number of colons is less than n\n        if number_of_colons < n:\n            # get the first colon index\n            first_colon_index = text.find(':')\n            # get the last colon index\n            last_colon_index = text.rfind(':')\n            # get the text between the first and last colon\n            text_between = text[first_colon_index:last_colon_index]\n            # get the text before the first colon\n            text_before = text[:first_colon_index]\n            # get the text after the last colon\n            text_after = text[last_colon_index+1:]\n            # return the text\n            return text_before + text_between.replace(':', '', n) + text_after\n\n    return text\n\n\nif __name__ == '__main__':\n    # Test Cases\n    # print(replace_max_n('abc', 0))\n    # print(replace_max_n('abc', 1))\n    # print(replace_max_n('abc', 2))\n    # print(replace_max_n('abc', 3))\n    # print(replace_max_n('abc', 4))\n    # print(replace_max_n('abc', 5))\n\n    # print("
    },
    {
      "rank": 15,
      "score": 8.0,
      "candidate": "def replace_spaces(string, n):\n    \"\"\"\n    :param string: string, to replace spaces\n    :param n: int, number of occurrences to replace\n    :return: string, with n occurrences of spaces replaced\n    \"\"\"\n    counter = 0\n    for character in string:\n        if character == \" \":\n            counter += 1\n        if counter == n:\n            return string.replace(\" \", \":\", n)\n\n\ndef replace_commas(string, n):\n    \"\"\"\n    :param string: string, to replace commas\n    :param n: int, number of occurrences to replace\n    :return: string, with n occurrences of commas replaced\n    \"\"\"\n    counter = 0\n    for character in string:\n        if character == \",\":\n            counter += 1\n        if counter == n:\n            return string.replace(\",\", \":\", n)\n\n\ndef replace_dots(string, n):\n    \"\"\"\n    :param string: string, to replace dots\n    :param n: int, number of occurrences to replace\n    :return: string, with n occurrences of dots replaced\n    \"\"\"\n    counter = 0\n    for character in string:\n        if character == \".\":\n            counter += 1\n        if counter == n:\n            return string.replace(\".\", \":\", n)"
    },
    {
      "rank": 16,
      "score": 8.0,
      "candidate": "def replace_spaces(text: str, n: int) -> str:\n    \"\"\"\n    >>> replace_spaces(\"a b c d\", 2)\n    'a:b:c d'\n    >>> replace_spaces(\"a b c d\", 3)\n    'a:b:c:d'\n    >>> replace_spaces(\"a b c d\", 1)\n    'a b c d'\n    \"\"\"\n    text = list(text)\n    counter = 0\n    for i in range(len(text)):\n        if text[i] == \" \" or text[i] == \",\" or text[i] == \".\":\n            counter += 1\n            text[i] = \":\"\n        if counter >= n:\n            break\n    return \"\".join(text)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 17,
      "score": 8.0,
      "candidate": "def replace_n_chars(text, char, n=1):\n    \"\"\"\n    Replace maximum n occurrences of char with a colon.\n\n    :param text: str\n    :param char: str\n    :param n: int\n    :return: str\n    \"\"\"\n    if not isinstance(text, str):\n        raise TypeError(f\"Expected type is str, got {type(text)}\")\n    if not isinstance(char, str):\n        raise TypeError(f\"Expected type is str, got {type(char)}\")\n    if not isinstance(n, int):\n        raise TypeError(f\"Expected type is int, got {type(n)}\")\n\n    count = 0\n    new_text = \"\"\n    for i in text:\n        if i == char:\n            count += 1\n            if count > n:\n                new_text += i\n        else:\n            new_text += i\n\n    return new_text\n\n\nif __name__ == \"__main__\":\n    print(replace_n_chars(\"a,b c d,e.\", \" \", 2))\n    print(replace_n_chars(\"a,b c d,e.\", \" \", 1))\n    print(replace_n_chars(\"a,b c d,e.\", \" \", 0))\n    print(replace_n_chars(\"a,b c d,e.\", \"a\", 2))\n    print(replace_n_chars(\"a,b c d,e.\", \"a\", 1))\n    print(replace_n_chars(\"a,b c d,e.\", \"a\", 0))"
    },
    {
      "rank": 18,
      "score": 8.0,
      "candidate": "def replace_max_n_spaces(string, n):\n    # 1. Find the index of the last space\n    last_space = string.rfind(\" \")\n    # 2. Find the index of the last comma\n    last_comma = string.rfind(\",\")\n    # 3. Find the index of the last dot\n    last_dot = string.rfind(\".\")\n    # 4. Find the last character to replace\n    last_char = max(last_space, last_comma, last_dot)\n    # 5. Replace the last n characters with a colon\n    string = string[:last_char+1] + \":\"*(n-1)\n    return string\n\nassert replace_max_n_spaces(\"hello world, my name is Bond, James Bond\", 2) == \"hello world, my name is Bond:, James Bond\"\nassert replace_max_n_spaces(\"hello world, my name is Bond, James Bond\", 1) == \"hello world, my name is Bond, James Bond\"\nassert replace_max_n_spaces(\"hello world, my name is Bond, James Bond\", 3) == \"hello world:, my name is Bond:, James Bond\""
    },
    {
      "rank": 19,
      "score": 8.0,
      "candidate": "import re\n\n\ndef replace_max_occurrences(string, char, max_occurrences=1):\n    \"\"\"Replace maximum occurrences of char in string with colon.\n\n    Args:\n        string (str): string to replace char occurrences in\n        char (str): char to replace\n        max_occurrences (int): max number of occurrences to replace\n\n    Returns:\n        str: string with char occurrences replaced with colon\n    \"\"\"\n    # Regular expression to match char\n    pattern = re.compile(f\"[{char}]+\")\n\n    # Replace char with colon\n    string = re.sub(pattern, \":\", string, max_occurrences)\n\n    return string\n\n\nif __name__ == \"__main__\":\n    print(replace_max_occurrences(\"a b c d e f g\", \" \"))\n    print(replace_max_occurrences(\"a b c d e f g\", \" \"))\n    print(replace_max_occurrences(\"a b c d e f g\", \" \"))\n    print(replace_max_occurrences(\"a b c d e f g\", \" \"))\n    print(replace_max_occurrences(\"a b c d e f g\", \" \"))"
    },
    {
      "rank": 20,
      "score": 8.0,
      "candidate": "def replace_max_n(string, replace_chars, replace_with, max_n):\n    \"\"\"Replace max n occurrences of replace_chars with replace_with\"\"\"\n    for char in replace_chars:\n        string = string.replace(char, replace_with, max_n)\n    return string\n\ndef test_replace_max_n():\n    \"\"\"Test replace_max_n\"\"\"\n    assert replace_max_n(\"aaa bbb bbb bbb bbb bbb\", \" \", \"!\", 2) == \"aaa!bbb bbb bbb bbb bbb\"\n    assert replace_max_n(\"aaa bbb bbb bbb bbb bbb\", \" \", \"!\", 1) == \"aaa!bbb bbb bbb bbb bbb\"\n    assert replace_max_n(\"aaa bbb bbb bbb bbb bbb\", \" \", \"!\", 3) == \"aaa!bbb!bbb!bbb bbb bbb\"\n    assert replace_max_n(\"aaa bbb bbb bbb bbb bbb\", \" \", \"!\", 4) == \"aaa!bbb!bbb!bbb!bbb\"\n\n    assert replace_max_n(\"aaa bbb bbb bbb bbb bbb\", \"bbb\", \"!\", 2) == \"aaa bbb bbb!bbb bbb\"\n    assert replace_max_n(\"aaa bbb bbb bbb bbb bbb\", \"bbb\", \"!\", 1) == \"aaa bbb!bbb bbb bbb\"\n    assert replace_max_n(\"aaa bbb bbb bbb bbb bbb\", \"bbb\", \"!\", 3) == \"aaa bbb!bbb!bbb!bbb\"\n    assert replace_max_n(\"aaa bbb bbb bbb bbb bbb\", \"bbb\", \"!\", 4) == \"aaa bbb!bbb!bbb!bbb\"\n\n    assert replace_max_n(\"aaa bbb bbb bbb bbb bbb\", \"bbb\", \"!\", 0) == \"aaa bbb b"
    },
    {
      "rank": 21,
      "score": 8.0,
      "candidate": "def replace_max_n(string, char, n):\n    \"\"\"\n    :param string: string\n    :param char: character to replace\n    :param n: number of occurrences\n    :return: string with replaced characters\n    \"\"\"\n    if string == \"\" or n == 0:\n        return string\n\n    return string[:string.find(char)] + char + replace_max_n(string[string.find(char) + 1:], char, n - 1)\n\nprint(replace_max_n(\"hello, world. how are you?\", \".\", 3))"
    },
    {
      "rank": 22,
      "score": 8.0,
      "candidate": "def replace_max_occurrences(string, replace_chars, max_occurrences):\n    \"\"\"\n    string: str - a string to replace characters\n    replace_chars: str - a string with characters to replace\n    max_occurrences: int - max number of occurrences of replace_chars to replace\n    \"\"\"\n    # Your code here\n    # create a dictionary with the replace_chars as keys and a list of indices where they occur in the string as values\n    char_indices = {}\n    for char in replace_chars:\n        char_indices[char] = []\n        for i in range(len(string)):\n            if string[i] == char:\n                char_indices[char].append(i)\n\n    # iterate through the dictionary in reverse order of key length\n    for char, indices in sorted(char_indices.items(), key=lambda x: -len(x[0])):\n        # if there are more than max_occurrences of this char, replace them with colons\n        if len(indices) > max_occurrences:\n            for index in indices[:max_occurrences]:\n                string = string[:index] + \":\" + string[index+1:]\n\n    return string\n\n\nprint(replace_max_occurrences(\"this is a test string, with lots of spaces, and dots.\", \" ,.\", 1))\nprint(replace_max_occurrences(\"this is a test string, with lots of spaces, and dots.\", \" ,.\", 2))\nprint(replace_max_occurrences(\"this is a test string, with lots of spaces, and dots.\", \" ,.\", 3))\nprint(replace_max_occurrences(\"this is a test string, with lots of spaces, and dots.\", \" ,.\", 4))\n\nprint(replace_max_occurrences(\"this is a test string, with lots of spaces, and dots.\", \".,\", 1))\nprint(replace_max_occurrences(\"this is a test string, with lots of spaces, and dots.\", \".,\", 2))\nprint(replace_max_occurrences(\"this is a test string, with lots of spaces, and dots.\", \".,"
    },
    {
      "rank": 23,
      "score": 8.0,
      "candidate": "def replace_max_occurences(str, n, character):\n    max_occurences = 0\n    for char in str:\n        if char == character:\n            max_occurences += 1\n    if max_occurences >= n:\n        str = str.replace(character, \":\", max_occurences - n)\n    return str\n\nstr = \"Hey! This is a sample text with spaces, dots, and commas.\"\nprint(replace_max_occurences(str, 3, \" \"))\nprint(replace_max_occurences(str, 3, \",\"))\nprint(replace_max_occurences(str, 3, \".\"))"
    },
    {
      "rank": 24,
      "score": 8.0,
      "candidate": "def replace_chars(string, n):\n    string = string.replace(\" \", \":\", n)\n    string = string.replace(\",\", \":\", n)\n    string = string.replace(\".\", \":\", n)\n    return string\n\n\ndef main():\n    string = \"I am a string with spaces, commas, and dots\"\n    print(replace_chars(string, 1))\n    print(replace_chars(string, 2))\n    print(replace_chars(string, 3))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 25,
      "score": 8.0,
      "candidate": "def max_replace(text, n):\n    # Your code here\n    if not text:\n        return \"\"\n    if n == 0:\n        return text\n    if n < 0:\n        return \"\"\n    if len(text) == 0:\n        return \"\"\n    if n == 1:\n        return text.replace(\" \",\":\").replace(\",\",\":\").replace(\".\",\":\")\n    else:\n        return max_replace(text.replace(\" \",\":\").replace(\",\",\":\").replace(\".\",\":\"), n-1)\n\nprint(max_replace(\"hello world, how are you?\", 1))\nprint(max_replace(\"hello world, how are you?\", 2))\nprint(max_replace(\"hello world, how are you?\", 3))\nprint(max_replace(\"hello world, how are you?\", 4))\nprint(max_replace(\"hello world, how are you?\", 5))\nprint(max_replace(\"hello world, how are you?\", 0))\nprint(max_replace(\"hello world, how are you?\", -1))\nprint(max_replace(\"\", 2))\nprint(max_replace(None, 2))\nprint(max_replace(\"\", 0))"
    },
    {
      "rank": 26,
      "score": 8.0,
      "candidate": "def replace_max_occurrences(string, n):\n    \"\"\"\n    :param string: string to replace occurrences of spaces, commas, or dots with a colon\n    :param n: maximum number of occurrences to replace\n    :return: string with replaced occurrences\n    \"\"\"\n    result = \"\"\n    for char in string:\n        if char in \" ,.\" and len(result.split(\":\")) < n:\n            result += \":\"\n        else:\n            result += char\n    return result\n\n\nprint(replace_max_occurrences(\"this is a test string\", 2))\nprint(replace_max_occurrences(\"this is another test string\", 1))\nprint(replace_max_occurrences(\"this is another test string\", 3))\nprint(replace_max_occurrences(\"this is another test string\", 10))\nprint(replace_max_occurrences(\"this is another test string\", 0))"
    },
    {
      "rank": 27,
      "score": 8.0,
      "candidate": "def replace_max_occurrence(s, c, n):\n    \"\"\"\n    s is a string\n    c is a character\n    n is an integer\n    \"\"\"\n    # your code here\n    # return s\n    if n <= 0:\n        return s\n    if n > len(s):\n        n = len(s)\n\n    new_string = \"\"\n    index = 0\n    while index < len(s):\n        if s[index] == c:\n            new_string += c\n            index += 1\n            while index < len(s) and s[index] == c:\n                index += 1\n                n -= 1\n            if n == 0:\n                return new_string\n            new_string += \":\"\n        else:\n            new_string += s[index]\n            index += 1\n    return new_string\n\n\ndef main():\n    print(\"Hello World!\")\n    print(replace_max_occurrence(\"This is a test, this is another test, and this is a test.\", \",\", 1))\n    print(replace_max_occurrence(\"This is a test, this is another test, and this is a test.\", \",\", 2))\n    print(replace_max_occurrence(\"This is a test, this is another test, and this is a test.\", \",\", 3))\n    print(replace_max_occurrence(\"This is a test, this is another test, and this is a test.\", \",\", 4))\n    print(replace_max_occurrence(\"This is a test, this is another test, and this is a test.\", \",\", 5))\n    print(replace_max_occurrence(\"This is a test, this is another test, and this is a test.\", \",\", 6))\n    print(replace_max_occurrence(\"This is a test, this is another test, and this is a test.\", \",\", 7))\n    print(replace_max_occurrence(\"This is a test, this is another test, and this is a test.\", \",\", 8))\n    print(replace_max_occurrence(\"This is a test, this is another test, and this is a test.\", \",\", 9))\n    print(replace_max_"
    },
    {
      "rank": 28,
      "score": 8.0,
      "candidate": "def replace_max_n_chars(text: str, char: str, n: int) -> str:\n    \"\"\"Replaces the maximum n occurrences of a character with a colon.\n\n    Args:\n        text (str): the text to be processed\n        char (str): the character to be replaced\n        n (int): the maximum number of occurrences to be replaced\n\n    Returns:\n        str: the text with the maximum n occurrences of a character replaced with a colon\n    \"\"\"\n    # TODO: implement\n    return text"
    },
    {
      "rank": 29,
      "score": 8.0,
      "candidate": "def replace_max_occurences(str, char):\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(1)\n    \"\"\"\n    max_occurences = 0\n    for i in range(len(str)):\n        if str[i] == char:\n            max_occurences += 1\n    max_occurences = max(max_occurences, 2)\n    str = list(str)\n    for i in range(len(str)):\n        if str[i] == char and max_occurences > 0:\n            str[i] = \":\"\n            max_occurences -= 1\n    return \"\".join(str)\n\n\nif __name__ == \"__main__\":\n    string = \"The sun, is, very bright.\"\n    print(replace_max_occurences(string, \",\"))"
    },
    {
      "rank": 30,
      "score": 8.0,
      "candidate": "def replace_chars(string, chars, count):\n    for char in chars:\n        string = string.replace(char, \":\", count)\n\n    return string\n\n\nprint(replace_chars(\"This is a string\", [\" \", \",\"], 2))\nprint(replace_chars(\"This is a string\", [\" \", \",\"], 3))"
    },
    {
      "rank": 31,
      "score": 8.0,
      "candidate": "def replace_spaces(string, occurrences):\n    \"\"\"\n    >>> replace_spaces('a b c d', 2)\n    'a:b c:d'\n\n    >>> replace_spaces('a b c d', 1)\n    'a:b c d'\n\n    >>> replace_spaces('a b c d', 0)\n    'a b c d'\n    \"\"\"\n    if string is None:\n        return None\n\n    if occurrences < 0:\n        return string\n\n    result = ''\n    for c in string:\n        if c == ' ' or c == '.' or c == ',':\n            if occurrences == 0:\n                result += c\n            else:\n                result += ':'\n                occurrences -= 1\n        else:\n            result += c\n\n    return result\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 32,
      "score": 8.0,
      "candidate": "def replace_spaces(text, n):\n    text = list(text)\n    if text.count(' ') >= n:\n        for i in range(n):\n            text[text.index(' ')] = ':'\n    return ''.join(text)\n\n\ndef replace_commas(text, n):\n    text = list(text)\n    if text.count(',') >= n:\n        for i in range(n):\n            text[text.index(',')] = ':'\n    return ''.join(text)\n\n\ndef replace_dots(text, n):\n    text = list(text)\n    if text.count('.') >= n:\n        for i in range(n):\n            text[text.index('.')] = ':'\n    return ''.join(text)\n\n\ndef replace_all(text, n):\n    text = list(text)\n    if text.count(' ') >= n:\n        for i in range(n):\n            text[text.index(' ')] = ':'\n    if text.count(',') >= n:\n        for i in range(n):\n            text[text.index(',')] = ':'\n    if text.count('.') >= n:\n        for i in range(n):\n            text[text.index('.')] = ':'\n    return ''.join(text)\n\n\nif __name__ == '__main__':\n    print(replace_spaces(\"Hi, how are you?\", 2))\n    print(replace_commas(\"Hi, how are you?\", 2))\n    print(replace_dots(\"Hi, how are you?\", 2))\n    print(replace_all(\"Hi, how are you?\", 2))"
    },
    {
      "rank": 33,
      "score": 8.0,
      "candidate": "def replace_max(sentence, c, n):\n    \"\"\"\n    sentence: string\n    c: character to be replaced\n    n: maximum number of occurrences to be replaced\n    Finds and replaces the maximum n occurrences of character c in a given string with a colon.\n    \"\"\"\n    # Your code here\n    pass\n\nprint(replace_max(\"hello, world\", \",\", 1))\n# Should print \"hello: world\"\nprint(replace_max(\"hello   world\", \" \", 2))\n# Should print \"hello: world\"\nprint(replace_max(\"hello   world\", \" \", 3))\n# Should print \"hello:world\"\nprint(replace_max(\"hello   world\", \" \", 4))\n# Should print \"hello:world\""
    },
    {
      "rank": 34,
      "score": 8.0,
      "candidate": "def replace_max_n(text: str, max_n: int) -> str:\n    \"\"\"\n    >>> replace_max_n(\"The 1000 year old man lives in the 1000 year old house.\", 2)\n    'The :1000 year old man lives in the :1000 year old house.'\n    \"\"\"\n    # your code here\n    return text.replace(' ', ':').replace(',', ':').replace('.', ':').replace('::', ':')[:-1]\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 35,
      "score": 8.0,
      "candidate": "def replace_max(str, char, n):\n    \"\"\"\n    This function will replace maximum n occurrences of a given character with a colon.\n    :param str: a string\n    :param char: a character\n    :param n: an integer\n    :return: a string\n    \"\"\"\n    # Check if the input is valid\n    if n <= 0 or n > len(str):\n        raise ValueError(\"n must be greater than 0 and less than or equal to the length of the string.\")\n\n    # Check if the string is valid\n    if len(str) == 0:\n        raise ValueError(\"The string must be greater than 0.\")\n\n    # Check if the character is valid\n    if len(char) != 1:\n        raise ValueError(\"The character must be a single character.\")\n\n    # Iterate through the string and find all occurrences of the character\n    char_count = 0\n    for i in range(len(str)):\n        if str[i] == char:\n            char_count += 1\n\n    # If there are no occurrences of the character, return the string\n    if char_count == 0:\n        return str\n\n    # If there are more occurrences of the character than n, replace the nth occurrence with a colon\n    elif char_count > n:\n        str = list(str)\n        for i in range(n):\n            str[str.index(char)] = ':'\n        return ''.join(str)\n\n    # If there are less occurrences of the character than n, replace all occurrences with a colon\n    else:\n        str = list(str)\n        for i in range(char_count):\n            str[str.index(char)] = ':'\n        return ''.join(str)\n\n\ndef test_function():\n    assert replace_max(\"1 2 3 4\", \" \", 2) == \"1:2:3:4\"\n    assert replace_max(\"1 2 3 4\", \" \", 0) == \"1 2 3 4\"\n    assert replace_max(\"1 2 3 4\", \" \", 10) == \"1:2:3:4\""
    },
    {
      "rank": 36,
      "score": 8.0,
      "candidate": "def replace_spaces(string, n):\n    if string is None:\n        return \"\"\n\n    new_string = \"\"\n\n    for i in range(len(string)):\n        if string[i] in [\",\", \".\", \" \"] and string.count(string[i]) <= n:\n            new_string += \":\"\n        else:\n            new_string += string[i]\n\n    return new_string\n\n\nassert replace_spaces(\"\", 0) == \"\"\nassert replace_spaces(\"\", 1) == \"\"\nassert replace_spaces(\" \", 0) == \"\"\nassert replace_spaces(\" \", 1) == \":\"\nassert replace_spaces(\"  \", 0) == \"\"\nassert replace_spaces(\"  \", 1) == \"::\"\nassert replace_spaces(\"   \", 0) == \"\"\nassert replace_spaces(\"   \", 1) == \":::\"\nassert replace_spaces(\"    \", 0) == \"\"\nassert replace_spaces(\"    \", 1) == \"::::\"\nassert replace_spaces(\"abc\", 0) == \"abc\"\nassert replace_spaces(\"abc\", 1) == \"a:bc\"\nassert replace_spaces(\"abc\", 2) == \"ab:c\"\nassert replace_spaces(\"abc\", 3) == \"abc\"\nassert replace_spaces(\"abc abc\", 0) == \"abc abc\"\nassert replace_spaces(\"abc abc\", 1) == \"a:b:c:a:b:c\"\nassert replace_spaces(\"abc abc\", 2) == \"ab:c ab:c\"\nassert replace_spaces(\"abc abc\", 3) == \"abc abc\"\nassert replace_spaces(\"abc abc abc\", 0) == \"abc abc abc\"\nassert replace_spaces(\"abc abc abc\", 1) == \"a:b:c:a:b:c:a:b:c\"\nassert replace_spaces(\"abc abc abc\", 2) == \"ab:c ab:c ab:c\"\nassert replace_spaces(\"abc abc abc\", 3) == \"abc abc abc\"\nassert replace_spaces(\"abc abc abc abc\", 0) == \"abc abc abc abc\"\nassert replace_spaces(\"abc abc abc abc\", 1) =="
    },
    {
      "rank": 37,
      "score": 8.0,
      "candidate": "import re\n\n\ndef replace_max_occurrences(text, n):\n    \"\"\"\n    Replace maximum n occurrences of spaces, commas, or dots with a colon.\n    \"\"\"\n\n    text = re.sub(r'(\\s|,|\\.){2,}', ':', text)\n    text = re.sub(r'(\\s|,|\\.){1,}', ':', text)\n    return text"
    },
    {
      "rank": 38,
      "score": 8.0,
      "candidate": "def replace_n_chars(s, n, c):\n    \"\"\"\n    s: string\n    n: integer\n    c: character\n    \"\"\"\n    # Your code here\n    cnt = 0\n    i = 0\n    while i < len(s):\n        if s[i] == c:\n            cnt += 1\n        if cnt == n:\n            s = s[:i] + ':' + s[i + 1:]\n            cnt = 0\n        i += 1\n\n    return s\n\n\nprint(replace_n_chars('test, test, test', 2, ','))"
    },
    {
      "rank": 39,
      "score": 8.0,
      "candidate": "def replace_max_occurrences(input_string, char, max_occurrences):\n    \"\"\"Replace max occurrences of a character with a colon.\n\n    :param input_string: string to replace occurrences in\n    :type input_string: str\n    :param char: character to replace\n    :type char: str\n    :param max_occurrences: max occurrences to replace\n    :type max_occurrences: int\n    :return: string with replaced occurrences\n    :rtype: str\n    \"\"\"\n    char_list = list(input_string)\n    char_count = 0\n    for i, char_elem in enumerate(char_list):\n        if char_elem == char:\n            char_count += 1\n        if char_count == max_occurrences:\n            char_list[i] = \":\"\n    return \"\".join(char_list)\n\n\ndef main():\n    \"\"\"Print result of replace_max_occurrences function.\"\"\"\n    print(replace_max_occurrences(\"Hello, World\", \",\", 2))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 40,
      "score": 8.0,
      "candidate": "def replace_characters(string):\n    string = string.replace(\" \", \":\", 2)\n    string = string.replace(\",\", \":\", 2)\n    string = string.replace(\".\", \":\", 2)\n    return string\n\n\ndef main():\n    string = \"Hello, World. Welcome to the Python world. Python is fun.\"\n    print(string)\n    print(replace_characters(string))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 41,
      "score": 8.0,
      "candidate": "def replace_max_occurrences(string, char, max_occurrences):\n    \"\"\"\n    Replace maximum n occurrences of a char with colon.\n    \"\"\"\n    string = string.replace(char, \":\")\n    return string.replace(char, \"\", max_occurrences)\n\n\nif __name__ == \"__main__\":\n    print(replace_max_occurrences(\"test, test, test\", \",\", 1))"
    },
    {
      "rank": 42,
      "score": 8.0,
      "candidate": "def replace_n_chars(string, n, char):\n    \"\"\"\n    :param string: string to replace\n    :param n: number of characters to replace\n    :param char: character to replace with\n    :return: string with n characters replaced\n    \"\"\"\n    new_string = \"\"\n    count = 0\n    for c in string:\n        if c == char:\n            count += 1\n            if count <= n:\n                new_string += c\n        else:\n            new_string += c\n            count = 0\n    return new_string\n\n\ndef replace_n_chars_better(string, n, char):\n    \"\"\"\n    :param string: string to replace\n    :param n: number of characters to replace\n    :param char: character to replace with\n    :return: string with n characters replaced\n    \"\"\"\n    new_string = \"\"\n    for c in string:\n        if c == char:\n            if n > 0:\n                new_string += c\n                n -= 1\n        else:\n            new_string += c\n    return new_string\n\n\ndef replace_n_chars_better2(string, n, char):\n    \"\"\"\n    :param string: string to replace\n    :param n: number of characters to replace\n    :param char: character to replace with\n    :return: string with n characters replaced\n    \"\"\"\n    new_string = \"\"\n    count = 0\n    for c in string:\n        if c == char:\n            count += 1\n            if count <= n:\n                new_string += c\n        else:\n            new_string += c\n            count = 0\n    return new_string\n\n\nif __name__ == '__main__':\n    print(replace_n_chars(\"This is a test\", 3, \" \"))\n    print(replace_n_chars(\"This is a test\", 3, \"o\"))\n    print(replace_n_chars(\"This is a test\", 3, \"i\"))\n\n    print(replace_n_chars_better(\"This is a test\", 3, \" \"))\n    print(replace_n_chars_better(\""
    },
    {
      "rank": 43,
      "score": 8.0,
      "candidate": "def replace_n_characters(string, character, n):\n    \"\"\"\n    :param string: string of characters\n    :param character: character to replace\n    :param n: number of characters to replace\n    :return: string with n characters replaced\n    \"\"\"\n    # First we create a list of all indices of the character in the string\n    indices = [i for i, x in enumerate(string) if x == character]\n    # Then we create a list of tuples with the start and end of each sequence\n    # of n occurrences of the character\n    sequences = []\n    start = 0\n    for index in indices:\n        if index - start == n:\n            sequences.append((start, index))\n            start = index + 1\n    # Finally we replace all the characters in the sequences with a colon\n    for start, end in sequences:\n        string = string[:start] + ':' + string[end + 1:]\n    return string\n\n\ndef test_replace_n_characters():\n    assert replace_n_characters(\"hello, world!\", \",\", 1) == \"hello: world!\"\n    assert replace_n_characters(\"hello, world!\", \"o\", 2) == \"hell: wld!\"\n    assert replace_n_characters(\"hello, world!\", \"l\", 3) == \"hel: wor!\"\n\n\nif __name__ == '__main__':\n    test_replace_n_characters()"
    },
    {
      "rank": 44,
      "score": 8.0,
      "candidate": "def replace_max_occurrences(s: str, n: int, c: str) -> str:\n    \"\"\"Replace maximum n occurrences of a character with another character.\n\n    Args:\n        s (str): string to be processed.\n        n (int): maximum number of occurrences.\n        c (str): character to be replaced.\n\n    Returns:\n        str: string with maximum n occurrences of a character replaced with another character.\n    \"\"\"\n    new_string = []\n    count = 0\n\n    for char in s:\n        if char == c:\n            count += 1\n        else:\n            count = 0\n\n        if count <= n:\n            new_string.append(char)\n\n        if count > n:\n            new_string.append(c)\n            count = 0\n\n    return \"\".join(new_string)\n\n\nif __name__ == \"__main__\":\n    assert (\n        replace_max_occurrences(\"I like Python. It is fun.\", 2, \" \")\n        == \"I like Python: It is fun.\"\n    )\n    assert (\n        replace_max_occurrences(\"I like Python. It is fun.\", 1, \" \")\n        == \"I like Python . It is fun.\"\n    )\n    assert replace_max_occurrences(\"I like Python. It is fun.\", 0, \" \") == \"I like Python. It is fun.\""
    },
    {
      "rank": 45,
      "score": 8.0,
      "candidate": "def replace_max_occurrences(string, char):\n    if char not in string:\n        return string\n    else:\n        count = 0\n        index = 0\n        for i in range(len(string)):\n            if string[i] == char:\n                count += 1\n            if count == 2:\n                index = i\n                break\n        return string[:index] + ':' + string[index + 1:]\n\n\nif __name__ == '__main__':\n    print(replace_max_occurrences(\"I like Python\", ' '))\n    print(replace_max_occurrences(\"I like Python, \", ','))\n    print(replace_max_occurrences(\"I like Python...\", '.'))"
    },
    {
      "rank": 46,
      "score": 8.0,
      "candidate": "def replace_n_characters(string, n):\n    for c in (',', '.'):\n        for i in range(n):\n            string = string.replace(c, ':')\n    return string\n\n\ndef main():\n    string = input(\"Enter a string: \")\n    n = int(input(\"Enter the number of occurrences to replace: \"))\n    print(replace_n_characters(string, n))\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 47,
      "score": 8.0,
      "candidate": "def replace_n_chars(text, char, n):\n    count = 0\n    output = ''\n    for ch in text:\n        if ch == char:\n            count += 1\n        if count < n:\n            output += ch\n        elif count == n:\n            output += ':'\n    return output\n\n\ndef test_replace_n_chars():\n    assert replace_n_chars('one two three four', ' ', 2) == 'one:two:three four'\n    assert replace_n_chars('one,two,three,four', ',', 2) == 'one,two:three,four'\n    assert replace_n_chars('one.two.three.four', '.', 2) == 'one.two:three.four'\n\n\nif __name__ == '__main__':\n    test_replace_n_chars()"
    },
    {
      "rank": 48,
      "score": 8.0,
      "candidate": "def replace_spaces(string, occurrences):\n    string = list(string)\n    index = 0\n    counter = 0\n    while counter < occurrences:\n        if string[index] in \" ,.\" and counter < occurrences:\n            string[index] = \":\"\n            counter += 1\n        index += 1\n    string = \"\".join(string)\n    return string\n\n\nreplace_spaces(\"a,b c\", 1)"
    },
    {
      "rank": 49,
      "score": 8.0,
      "candidate": "def replace_max_n(string, n, char):\n    char_count = 0\n    new_string = ''\n    for c in string:\n        if c == char:\n            char_count += 1\n        if char_count <= n:\n            new_string += c\n        if char_count == n:\n            new_string += ':'\n            char_count += 1\n\n    return new_string\n\nprint(replace_max_n('a b c d e f g h i j k l m n o p q r s t u v w x y z', 2, ' '))"
    },
    {
      "rank": 50,
      "score": 8.0,
      "candidate": "def replace_max_n_spaces(string, n):\n    \"\"\"\n    >>> replace_max_n_spaces(\"This is a test string\", 3)\n    'This:is:a:test:string'\n    \"\"\"\n    if n <= 0:\n        return string\n    return string.replace(max_n_spaces(string, n), \":\", n)\n\ndef max_n_spaces(string, n):\n    \"\"\"\n    >>> max_n_spaces(\"This is a test string\", 3)\n    ' '\n    \"\"\"\n    spaces = string.count(\" \")\n    dots = string.count(\".\")\n    commas = string.count(\",\")\n    max_n = max([spaces, dots, commas])\n    if n > max_n:\n        return max([spaces, dots, commas])\n    return max_n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 51,
      "score": 8.0,
      "candidate": "def max_occurrences(string, char):\n    \"\"\"\n    >>> max_occurrences(\"The.Batman,Knows,how,to,fly.\", \".\")\n    'The.Batman,Knows,how,to,fly:'\n    >>> max_occurrences(\"The.Batman,Knows,how,to,fly.\", \",\")\n    'The.Batman:Knows:how:to:fly:'\n    >>> max_occurrences(\"The.Batman,Knows,how,to,fly.\", \" \")\n    'The:Batman:Knows:how:to:fly:'\n    >>> max_occurrences(\"The.Batman,Knows,how,to,fly.\", \"a\")\n    'The.Batman,Knows,how,to,fly.'\n    >>> max_occurrences(\"The.Batman,Knows,how,to,fly.\", \" \")\n    'The:Batman:Knows:how:to:fly:'\n    \"\"\"\n    count = 0\n    new_string = \"\"\n\n    for i in string:\n        if i == char:\n            count += 1\n        else:\n            new_string += i\n\n    if count > 0:\n        new_string += \":\" * count\n\n    return new_string\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 52,
      "score": 8.0,
      "candidate": "def replace_chars(input_string, n):\n    \"\"\"\n    >>> replace_chars(\"a b c d\", 2)\n    'a b:c d'\n    >>> replace_chars(\"a b c d\", 1)\n    'a b:c d'\n    >>> replace_chars(\"a b c d\", 3)\n    'a b c:d'\n    >>> replace_chars(\"a b c d\", 4)\n    'a b c d'\n    >>> replace_chars(\"a b c d\", 0)\n    'a b c d'\n    >>> replace_chars(\"a b c d\", 5)\n    'a b c d'\n    \"\"\"\n    input_string = input_string.replace(\" \", \":\")\n    input_string = input_string.replace(\",\", \":\")\n    input_string = input_string.replace(\".\", \":\")\n    return input_string\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 53,
      "score": 8.0,
      "candidate": "def replace_max_occurrences(text, max_occurrences=2):\n    \"\"\"Replace max_occurrences spaces, commas, or dots with a colon.\"\"\"\n    # TODO: Implement the function here\n    return\n\n\ndef test_function():\n    assert replace_max_occurrences(\"one, two, three. four, five.\", 2) == \"one: two: three. four, five.\"\n    assert replace_max_occurrences(\"one, two, three. four, five.\", 3) == \"one, two, three: four, five.\"\n    assert replace_max_occurrences(\"one, two, three. four, five.\", 1) == \"one, two, three. four, five.\"\n    assert replace_max_occurrences(\"one, two, three. four, five.\", 4) == \"one, two, three: four: five.\"\n    assert replace_max_occurrences(\"one, two, three. four, five.\", 5) == \"one, two, three: four: five.\"\n    assert replace_max_occurrences(\"one, two, three. four, five.\", 0) == \"one, two, three. four, five.\"\n\nif __name__ == '__main__':\n    test_function()"
    },
    {
      "rank": 54,
      "score": 8.0,
      "candidate": "def replace_chars(str):\n    replacements = {\" \":\":\",\", \",\":\":\"\", \".\":\":\"}\n    for key in replacements.keys():\n        str = str.replace(key, replacements[key], 2)\n    return str\n\nprint(replace_chars(\"  a, b  .  c, d   e f\"))"
    },
    {
      "rank": 55,
      "score": 8.0,
      "candidate": "def replace_max_n(string: str, character: str, n: int):\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(1)\n    \"\"\"\n    char_count = 0\n    new_string = []\n\n    for char in string:\n        if char == character:\n            char_count += 1\n\n        if char != character or char_count == n:\n            new_string.append(char)\n            char_count = 0\n\n        if char == character and char_count < n:\n            new_string.append(char)\n\n    return \"\".join(new_string)\n\n\nif __name__ == \"__main__\":\n    assert replace_max_n(\"Hello, World\", \",\", 1) == \"Hello: World\"\n    assert replace_max_n(\"Hello, World\", \",\", 2) == \"Hello: World\"\n    assert replace_max_n(\"Hello, World\", \",\", 3) == \"Hello: World\"\n    assert replace_max_n(\"Hello, World\", \",\", 4) == \"Hello: World\"\n    assert replace_max_n(\"Hello, World\", \",\", 5) == \"Hello: World\"\n    assert replace_max_n(\"Hello, World\", \".\", 1) == \"Hello, World\"\n    assert replace_max_n(\"Hello, World\", \".\", 2) == \"Hello, World\"\n    assert replace_max_n(\"Hello, World\", \".\", 3) == \"Hello, World\"\n    assert replace_max_n(\"Hello, World\", \".\", 4) == \"Hello, World\"\n    assert replace_max_n(\"Hello, World\", \".\", 5) == \"Hello, World\"\n    assert replace_max_n(\"Hello, World\", \" \", 1) == \"Hello, World\"\n    assert replace_max_n(\"Hello, World\", \" \", 2) == \"Hello, World\"\n    assert replace_max_n(\"Hello, World\", \" \", 3) == \"Hello: World\"\n    assert replace_max_n(\"Hello, World\", \" \", 4) == \"Hello: World\"\n    assert replace_max_n(\"Hello"
    },
    {
      "rank": 56,
      "score": 8.0,
      "candidate": "def replace_max(sentence, n):\n    if n <= 0:\n        return sentence\n    if sentence == \"\":\n        return sentence\n    if n > len(sentence):\n        return sentence\n    if n > len(sentence)//2:\n        return replace_max(sentence, n//2)\n    for c in sentence:\n        if c in [\".\", \",\", \" \"]:\n            return replace_max(sentence, n - 1)\n    return sentence\n\n\nif __name__ == '__main__':\n    print(replace_max(\"I like cats\", 2))\n    print(replace_max(\"I like cats\", 1))\n    print(replace_max(\"I like cats\", 0))\n    print(replace_max(\"I like cats\", 10))\n    print(replace_max(\"I like cats\", 5))\n    print(replace_max(\"I like cats\", 100))\n    print(replace_max(\"I like cats\", 1000))\n    print(replace_max(\"I like cats\", 10000))\n    print(replace_max(\"I like cats\", 100000))\n    print(replace_max(\"I like cats\", 1000000))"
    },
    {
      "rank": 57,
      "score": 8.0,
      "candidate": "def replace_max_occurrences(string: str, character: str, occurrences: int) -> str:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(n)\n    \"\"\"\n    if not string or not character:\n        raise ValueError(\"string and character cannot be empty\")\n\n    if not isinstance(occurrences, int):\n        raise ValueError(\"occurrences must be an integer\")\n\n    if occurrences <= 0:\n        raise ValueError(\"occurrences must be a positive integer\")\n\n    # replace all occurrences of character with colon\n    replaced = string.replace(character, \":\")\n\n    # split string on colon\n    split_string = replaced.split(\":\")\n\n    # join the first n elements with colon\n    replaced = \"\".join(split_string[:occurrences])\n\n    # join the last n elements with colon\n    replaced = replaced + \"\".join(\":\".join(split_string[occurrences:]))\n\n    return replaced\n\nif __name__ == \"__main__\":\n    string = \"a.b c d\"\n    character = \".\"\n    occurrences = 1\n    print(replace_max_occurrences(string, character, occurrences))"
    },
    {
      "rank": 58,
      "score": 8.0,
      "candidate": "def replace_max_n_chars(string, n_chars):\n    \"\"\"\n    >>> replace_max_n_chars('hello, world. this is a test.', 2)\n    'hello, world: this is a test.'\n    >>> replace_max_n_chars('hello, world. this is a test.', 3)\n    'hello, world: this is a test:.'\n    >>> replace_max_n_chars('hello, world. this is a test.', 0)\n    'hello, world. this is a test.'\n    \"\"\"\n    char_dict = {}\n    for c in string:\n        if c in char_dict:\n            char_dict[c] += 1\n        else:\n            char_dict[c] = 1\n\n    for char in char_dict:\n        if char_dict[char] > n_chars:\n            string = string.replace(char, ':', n_chars)\n    return string\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 59,
      "score": 8.0,
      "candidate": "def replace_n_occurrences(string, chars, n, replacement):\n    \"\"\"\n    Replaces the maximum n occurrences of a given character with a colon.\n\n    :param string: the string to replace the occurrences in\n    :param chars: the character to replace\n    :param n: the number of occurrences to replace\n    :param replacement: the replacement character\n    :return: the string with the occurrences replaced\n    \"\"\"\n    # First, we need to find the maximum number of occurrences of the character in the string.\n    # We'll do this by counting the number of occurrences in the string, and then multiplying this number by n.\n    # This will give us the maximum number of occurrences.\n    max_occurrences = len(string) * n\n    # We can then use this maximum number of occurrences to create a list of indexes at which to replace the character.\n    # We can use the list comprehension syntax to create this list.\n    indexes_to_replace = [i for i in range(len(string) - 1, max_occurrences - 1, -1)]\n    # We can then use this list of indexes to replace the character at each of these indexes with a colon.\n    # We can use the list comprehension syntax to create a new string with the replaced character.\n    new_string = ''.join([replacement if i in indexes_to_replace else string[i] for i in range(len(string))])\n    # Finally, we can return this new string.\n    return new_string\n\n\ndef main():\n    string = \"Replace maximum 2 occurrences of spaces, commas, and dots with a colon\"\n    print(replace_n_occurrences(string, \" \", 2, \":\"))\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 60,
      "score": 8.0,
      "candidate": "def replace_max(string: str, max: int, character: str) -> str:\n    \"\"\"\n    >>> replace_max(\"hello, world. \", 2, \",\")\n    'hello: world. '\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"Expected type is str.\")\n\n    if not isinstance(max, int):\n        raise TypeError(\"Expected type is int.\")\n\n    if max <= 0:\n        raise ValueError(\"Expected value is max > 0.\")\n\n    if not isinstance(character, str):\n        raise TypeError(\"Expected type is str.\")\n\n    if len(character) != 1:\n        raise ValueError(\"Expected length is 1.\")\n\n    if len(string) == 0:\n        return string\n\n    counter = 0\n    new_string = \"\"\n    for i in string:\n        if i in {character, \" \", \",\"}:\n            counter += 1\n        else:\n            counter = 0\n\n        if counter == max:\n            new_string += \":\"\n        else:\n            new_string += i\n\n        if i in {character, \" \", \",\"}:\n            counter = 0\n\n    return new_string\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 61,
      "score": 8.0,
      "candidate": "def replace_max_occurrences(string, n, char):\n    \"\"\"\n    replace_max_occurrences replaces the maximum n occurrences of the character with a colon\n    :param string: the string to replace occurrences in\n    :param n: the number of occurrences to replace\n    :param char: the character to replace\n    :return: the string with the maximum n occurrences of the character replaced with a colon\n    \"\"\"\n    if string is None:\n        raise TypeError('string cannot be None')\n\n    if n is None:\n        raise TypeError('n cannot be None')\n\n    if not isinstance(n, int):\n        raise TypeError('n must be an int')\n\n    if char is None:\n        raise TypeError('char cannot be None')\n\n    if len(string) == 0 or len(char) == 0:\n        return string\n\n    if n < 0:\n        raise ValueError('n must be a positive integer')\n\n    if n == 0:\n        return string\n\n    if char not in string:\n        return string\n\n    # create a list of characters in the string\n    char_list = list(string)\n\n    # replace the max n occurrences of the character with a colon\n    i = 0\n    count = 0\n    while i < len(char_list) and count < n:\n        if char_list[i] == char:\n            char_list[i] = ':'\n            count += 1\n        i += 1\n\n    # create a new string from the list of characters\n    return ''.join(char_list)"
    },
    {
      "rank": 62,
      "score": 8.0,
      "candidate": "def replace_max(string, character, n):\n    \"\"\"\n    Replace maximum n occurrences of character with colon.\n\n    :param string: string to replace characters in\n    :type string: str\n    :param character: character to replace\n    :type character: str\n    :param n: maximum number of occurrences to replace\n    :type n: int\n    :return: string with replaced characters\n    :rtype: str\n    \"\"\"\n    # Create a copy of the string\n    string = string.copy()\n\n    # Create a list with the indices of the character\n    indices = [i for i, char in enumerate(string) if char == character]\n\n    # Replace n occurrences of the character with a colon\n    for i in indices[:n]:\n        string[i] = \":\"\n\n    return \"\".join(string)\n\n\ndef test_replace_max():\n    \"\"\"Test for replace_max function.\"\"\"\n    assert replace_max(\"hello, world\", \",\", 1) == \"hello: world\"\n    assert replace_max(\"hello, world\", \",\", 2) == \"hello: world\"\n    assert replace_max(\"hello, world\", \",\", 3) == \"hello: world\"\n    assert replace_max(\"hello, world\", \",\", 4) == \"hello: world\"\n    assert replace_max(\"hello, world\", \",\", 5) == \"hello: world\"\n    assert replace_max(\"hello, world\", \",\", 6) == \"hello: world\"\n    assert replace_max(\"hello, world\", \",\", 0) == \"hello, world\"\n    assert replace_max(\"hello, world\", \",\", 7) == \"hello: world\"\n\n    assert replace_max(\"hello, world\", \".\", 1) == \"hello, world\"\n    assert replace_max(\"hello, world\", \".\", 2) == \"hello, world\"\n    assert replace_max(\"hello, world\", \".\", 3) == \"hello, world\"\n    assert replace_max(\"hello, world\", \".\", 4) == \"hello, world\"\n    assert replace_max(\"hello, world\", \".\", 5) == \"hello, world\"\n    assert replace_max(\"hello, world"
    },
    {
      "rank": 63,
      "score": 8.0,
      "candidate": "import re\n\n\ndef replace_chars(string, n):\n    pattern = re.compile(r'(\\s|,|\\.){1,}')\n\n    def replace(match):\n        return ':' * min(n, len(match.group()))\n\n    return pattern.sub(replace, string)\n\n\ndef test_replace_chars():\n    assert replace_chars('one two three', 2) == 'one:two:three'\n    assert replace_chars('one two three', 1) == 'one:two three'\n    assert replace_chars('one two three', 3) == 'one:two:three'\n    assert replace_chars('one two three', 5) == 'one:two:three'\n    assert replace_chars('one two three', 0) == 'one two three'\n\n\nif __name__ == '__main__':\n    test_replace_chars()"
    },
    {
      "rank": 64,
      "score": 8.0,
      "candidate": "def replace_max_n_characters(input_string: str, character: str, n: int) -> str:\n    \"\"\"\n    :param input_string: string containing characters to be replaced\n    :param character: character to be replaced\n    :param n: maximum number of occurrences of character to be replaced\n    :return: string with max n occurrences of character replaced by colon\n\n    >>> replace_max_n_characters(\"one,two.three   four\", \" \", 1)\n    'one,two.three: four'\n    >>> replace_max_n_characters(\"one,two.three   four\", \" \", 2)\n    'one,two.three: four'\n    >>> replace_max_n_characters(\"one,two.three   four\", \" \", 3)\n    'one,two.three: four'\n    >>> replace_max_n_characters(\"one,two.three   four\", \" \", 4)\n    'one,two.three: four'\n    >>> replace_max_n_characters(\"one,two.three   four\", \" \", 5)\n    'one,two.three: four'\n    >>> replace_max_n_characters(\"one,two.three   four\", \" \", 6)\n    'one,two.three: four'\n    >>> replace_max_n_characters(\"one,two.three   four\", \" \", 7)\n    'one,two.three: four'\n    >>> replace_max_n_characters(\"one,two.three   four\", \" \", 8)\n    'one,two.three: four'\n    >>> replace_max_n_characters(\"one,two.three   four\", \" \", 9)\n    'one,two.three: four'\n    >>> replace_max_n_characters(\"one,two.three   four\", \".\", 1)\n    'one,two.three: four'\n    >>> replace_max_n_characters(\"one,two.three   four\", \".\", 2)\n    'one,two:three: four'\n    >>> replace_max_n_characters(\"one,two.three   four\", \".\", 3)"
    },
    {
      "rank": 65,
      "score": 8.0,
      "candidate": "def colon_replace(string, n):\n    #replace first n spaces\n    string = string.replace(\" \", \":\", n)\n    #replace first n commas\n    string = string.replace(\",\", \":\", n)\n    #replace first n dots\n    string = string.replace(\".\", \":\", n)\n    return string\n\nprint(colon_replace(\"This is a sentence with spaces, commas, and dots.\", 2))"
    },
    {
      "rank": 66,
      "score": 8.0,
      "candidate": "def replace_max_occurrences(string, n):\n    \"\"\"\n    >>> replace_max_occurrences('Hello World, this is a test', 2)\n    'Hello World: this is a test'\n    \"\"\"\n    string_list = list(string)\n    if string_list.count(\" \") >= n:\n        for i in range(n):\n            string_list[string_list.index(\" \")] = \":\"\n    if string_list.count(\",\") >= n:\n        for i in range(n):\n            string_list[string_list.index(\",\")] = \":\"\n    if string_list.count(\".\") >= n:\n        for i in range(n):\n            string_list[string_list.index(\".\")] = \":\"\n    return \"\".join(string_list)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 67,
      "score": 8.0,
      "candidate": "def replace_max_occurence(str, char, n):\n    count = 0\n    for i in range(len(str)):\n        if str[i] == char:\n            count += 1\n    str_list = list(str)\n    if count > n:\n        for i in range(n, count):\n            for j in range(len(str_list)):\n                if str_list[j] == char:\n                    str_list[j] = \":\"\n    return \"\".join(str_list)\n\n\nprint(replace_max_occurence(\"Hello, World\", \",\", 1))"
    },
    {
      "rank": 68,
      "score": 8.0,
      "candidate": "def replace_n_occurences(string, char, n):\n    \"\"\"\n    Return a new string with maximum n occurrences of char replaced with a colon.\n    \"\"\"\n    if char not in string:\n        return string\n\n    if string.count(char) <= n:\n        return string.replace(char, \":\")\n\n    # count number of colons to add\n    n_colons = string.count(char) - n\n\n    # add colons to string\n    colons = char * n_colons\n    return string.replace(char, colons, n)\n\n\ndef test_replace_n_occurences():\n    assert replace_n_occurences(\"\", \" \", 0) == \"\"\n    assert replace_n_occurences(\"\", \" \", 1) == \"\"\n    assert replace_n_occurences(\"\", \" \", 2) == \"\"\n    assert replace_n_occurences(\"a\", \" \", 0) == \"a\"\n    assert replace_n_occurences(\"a\", \" \", 1) == \"a\"\n    assert replace_n_occurences(\"a\", \" \", 2) == \"a\"\n    assert replace_n_occurences(\"a \", \" \", 0) == \"a \"\n    assert replace_n_occurences(\"a \", \" \", 1) == \"a :\"\n    assert replace_n_occurences(\"a \", \" \", 2) == \"a ::\"\n    assert replace_n_occurences(\"a b\", \" \", 0) == \"a b\"\n    assert replace_n_occurences(\"a b\", \" \", 1) == \"a :b\"\n    assert replace_n_occurences(\"a b\", \" \", 2) == \"a :b\"\n    assert replace_n_occurences(\"a b \", \" \", 0) == \"a b \"\n    assert replace_n_occurences(\"a b \", \" \", 1) == \"a :b \"\n    assert replace_n_occurences(\"a b \", \" \", 2) == \"a :b :\"\n    assert replace_n_occurences(\"a b c\", \" \", 0) =="
    },
    {
      "rank": 69,
      "score": 8.0,
      "candidate": "def replace_char(string):\n    for char in string:\n        if char in \" .,\":\n            string = string.replace(char, \":\", 1)\n    return string\n\n\nprint(replace_char(\"hello world.\"))\nprint(replace_char(\"hello world. hello world. hello world.\"))\nprint(replace_char(\"hello world. hello world. hello world. hello world.\"))"
    },
    {
      "rank": 70,
      "score": 8.0,
      "candidate": "def replace_max_n(string, symbol, n):\n    string_list = list(string)\n    symbol_indexes = [i for i, e in enumerate(string_list) if e == symbol]\n    for i in range(n):\n        if symbol_indexes:\n            string_list[symbol_indexes[i]] = ':'\n    return ''.join(string_list)\n\n\ndef test_replace_max_n():\n    assert replace_max_n('I like this code', ' ', 1) == 'I like this:code'\n    assert replace_max_n('I like this code', ' ', 2) == 'I like:this:code'\n    assert replace_max_n('I like this code', ' ', 3) == 'I like:this:code'\n    assert replace_max_n('I like this code', ':', 1) == 'I like this code'\n    assert replace_max_n('I like this code', ':', 2) == 'I like this code'\n    assert replace_max_n('I like this code', '.', 1) == 'I like this code'\n    assert replace_max_n('I like this code', '.', 2) == 'I like this:code'\n    assert replace_max_n('I like this code', '.', 3) == 'I like this:code'\n    assert replace_max_n('I like this code', '.', 4) == 'I like this:code'\n\n\nif __name__ == '__main__':\n    test_replace_max_n()"
    },
    {
      "rank": 71,
      "score": 8.0,
      "candidate": "def replace_spaces(s, n):\n    if s == None or s == \"\":\n        return \"\"\n\n    new_s = \"\"\n    count = 0\n    for ch in s:\n        if ch == \" \":\n            count += 1\n        if ch == \",\" or ch == \".\":\n            count += 1\n            if count == n:\n                new_s += \":\"\n                continue\n        new_s += ch\n        if ch == \" \":\n            count = 0\n\n    return new_s\n\n\nassert replace_spaces(\"hello world\", 0) == \"hello world\"\nassert replace_spaces(\"hello world\", 1) == \"hello:world\"\nassert replace_spaces(\"hello world\", 2) == \"hello:world\"\nassert replace_spaces(\"hello  world\", 2) == \"hello::world\"\nassert replace_spaces(\"hello  world\", 3) == \"hello::world\"\nassert replace_spaces(\"hello  world\", 4) == \"hello::world\"\nassert replace_spaces(\"hello  world\", 5) == \"hello::world\""
    },
    {
      "rank": 72,
      "score": 8.0,
      "candidate": "def replace_n_chars(string, char, n):\n    \"\"\"\n    >>> replace_n_chars(\"hello world, how are you?\", \" \", 3)\n    'hel:o: wor:l:d, how ar:e you?'\n    \"\"\"\n    if n <= 0:\n        return string\n\n    # Find the index of the first character to replace\n    i = 0\n    while i < len(string):\n        if string[i] == char:\n            break\n        i += 1\n\n    if i == len(string):\n        return string\n\n    # Find the index of the last character to replace\n    j = len(string) - 1\n    while j >= 0:\n        if string[j] == char:\n            break\n        j -= 1\n\n    # Replace the characters in the range\n    string = string[:i] + char * (n - 1) + string[j + 1:]\n\n    return string\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 73,
      "score": 7.0,
      "candidate": "def replace_spaces(string: str, n: int) -> str:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(1)\n\n    n: number of occurrences\n    \"\"\"\n    string_list = list(string)\n    spaces = [i for i, char in enumerate(string_list) if char == \" \"]\n    commas = [i for i, char in enumerate(string_list) if char == \",\"]\n    dots = [i for i, char in enumerate(string_list) if char == \".\"]\n    items = spaces + commas + dots\n    for i in range(len(items)):\n        if i < n:\n            string_list[items[i]] = \":\"\n    return \"\".join(string_list)\n\n\nif __name__ == \"__main__\":\n    print(replace_spaces(\"one two three\", 1))\n    print(replace_spaces(\"one, two three\", 1))\n    print(replace_spaces(\"one, two, three\", 1))"
    },
    {
      "rank": 74,
      "score": 1.0,
      "candidate": "def replace_spaces(string):\n    return string.replace(\" \", \":\").replace(\",\", \":\").replace(\".\", \":\")\n\n\nif __name__ == \"__main__\":\n    print(replace_spaces(\"Hello world\"))\n    print(replace_spaces(\"Hello world, hello world\"))\n    print(replace_spaces(\"Hello world, hello world, hello world\"))\n    print(replace_spaces(\"Hello world, hello world, hello world, hello world\"))"
    },
    {
      "rank": 75,
      "score": 1.0,
      "candidate": "def replace_max_occurrences(s, n):\n    # Write your code here.\n\tif not s or n <= 0:\n\t\treturn s\n\t\n\tmax_chars = [' ', ',', '.']\n\t\n\tfor c in max_chars:\n\t\ti = 0\n\t\twhile i < len(s):\n\t\t\tif s[i] == c:\n\t\t\t\ts = s[:i] + ':' + s[i+1:]\n\t\t\t\tn -= 1\n\t\t\t\tif n <= 0:\n\t\t\t\t\treturn s\n\t\t\t\tcontinue\n\t\t\ti += 1\n\treturn s"
    },
    {
      "rank": 76,
      "score": 1.0,
      "candidate": "def max_replace(string, n):\n    result = \"\"\n    max_occurrence = 0\n    for c in string:\n        if c in \",. \":\n            max_occurrence += 1\n            if max_occurrence <= n:\n                result += c\n            else:\n                result += \":\"\n        else:\n            result += c\n    return result\n\n\nprint(max_replace(\"the quick brown fox jumps over the lazy dog\", 1))\nprint(max_replace(\"the quick brown fox jumps over the lazy dog\", 2))\nprint(max_replace(\"the quick brown fox jumps over the lazy dog\", 3))\nprint(max_replace(\"the quick brown fox jumps over the lazy dog\", 4))\nprint(max_replace(\"the quick brown fox jumps over the lazy dog\", 5))"
    },
    {
      "rank": 77,
      "score": 1.0,
      "candidate": "def replace_max_occurrences(string: str, character: str, max_occurrences: int) -> str:\n    \"\"\"Replace maximum n occurrences of a character with a colon.\n\n    Args:\n        string (str): string to replace\n        character (str): character to replace\n        max_occurrences (int): maximum occurrences of the character to replace\n\n    Returns:\n        str: string with replaced characters\n    \"\"\"\n    return string.replace(character, \":\", max_occurrences)\n\n\nif __name__ == \"__main__\":\n    print(replace_max_occurrences(\"abc.abc.abc.abc\", \".\", 2))\n    print(replace_max_occurrences(\"abc,abc,abc,abc\", \",\", 2))\n    print(replace_max_occurrences(\"abc abc abc abc\", \" \", 2))"
    },
    {
      "rank": 78,
      "score": 1.0,
      "candidate": "def replace_n_chars(string, n, chars):\n    # check if string is a valid string\n    if not isinstance(string, str):\n        return \"string must be a string\"\n    # check if string is empty\n    if not string:\n        return \"string must be at least one character\"\n    # check if n is a valid integer\n    if not isinstance(n, int):\n        return \"n must be an integer\"\n    # check if n is positive\n    if n <= 0:\n        return \"n must be a positive integer\"\n    # check if chars is a valid string\n    if not isinstance(chars, str):\n        return \"chars must be a string\"\n    # check if chars is empty\n    if not chars:\n        return \"chars must be at least one character\"\n\n    # count the number of occurrences of the characters in the string\n    chars_count = {}\n    for char in chars:\n        chars_count[char] = string.count(char)\n    \n    # replace the characters with a colon\n    for char in chars_count:\n        if chars_count[char] >= n:\n            string = string.replace(char, ':', n)\n\n    return string\n\n\nprint(replace_n_chars(\"hello world, hello world.\", 1, \"d,s\"))\nprint(replace_n_chars(\"hello world, hello world.\", 2, \"d,s\"))\nprint(replace_n_chars(\"hello world, hello world.\", 3, \"d,s\"))\nprint(replace_n_chars(\"hello world, hello world.\", 4, \"d,s\"))\nprint(replace_n_chars(\"hello world, hello world.\", 5, \"d,s\"))\nprint(replace_n_chars(\"hello world, hello world.\", 6, \"d,s\"))\nprint(replace_n_chars(\"hello world, hello world.\", 1, \"d,s,\"))\nprint(replace_n_chars(\"hello world, hello world.\", 1, \"d,s..\"))\nprint(replace_n_chars(\"hello world, hello world.\", 1, \"d,s \"))\n\n# Test"
    },
    {
      "rank": 79,
      "score": 1.0,
      "candidate": "def replace_chars(string):\n    return string.replace(\" \", \":\").replace(\",\", \":\").replace(\".\", \":\")\n\n\ndef test_function(test_case):\n    test_input, test_expected = test_case\n\n    if test_expected == \"\":\n        if replace_chars(test_input) == test_expected:\n            print(\"Pass\")\n        else:\n            print(\"Fail\")\n    else:\n        if replace_chars(test_input)[:len(test_expected)] == test_expected:\n            print(\"Pass\")\n        else:\n            print(\"Fail\")\n\n\ntest_function([\"This is a test string\", \"This:is:a:test:string\"])\ntest_function([\"This is a test string\", \"\"])\ntest_function([\"This is a test string\", \"This:is:a:test:string\"])\ntest_function([\"This is a test string\", \"\"])\ntest_function([\"This is a test string\", \"This:is:a:test:string\"])\ntest_function([\"This is a test string\", \"\"])\ntest_function([\"This is a test string\", \"This:is:a:test:string\"])\ntest_function([\"This is a test string\", \"\"])\ntest_function([\"This is a test string\", \"This:is:a:test:string\"])\ntest_function([\"This is a test string\", \"\"])\ntest_function([\"This is a test string\", \"This:is:a:test:string\"])\ntest_function([\"This is a test string\", \"\"])\ntest_function([\"This is a test string\", \"This:is:a:test:string\"])\ntest_function([\"This is a test string\", \"\"])\ntest_function([\"This is a test string\", \"This:is:a:test:string\"])\ntest_function([\"This is a test string\", \"\"])\ntest_function([\"This is a test string\", \"This:is:a:test:string\"])\ntest_function([\"This is a test string\", \"\"])\ntest_function([\"This is a test string\", \"This:is:a:test:string\"])\ntest_function([\"This is a test string\", \"\""
    },
    {
      "rank": 80,
      "score": 1.0,
      "candidate": "def replace_max_n(text: str, char: str, n: int) -> str:\n    \"\"\"Replaces max n occurrences of a char with a colon.\n\n    Args:\n        text (str): text to replace\n        char (str): character to replace\n        n (int): max number of occurrences\n\n    Returns:\n        str: text with replaced chars\n    \"\"\"\n    return text.replace(char, \":\", n)\n\n\nif __name__ == \"__main__\":\n    print(replace_max_n(\"a b c d e f g h i\", \" \", 4))\n    print(replace_max_n(\"a b c d e f g h i\", \" \", 8))\n    print(replace_max_n(\"a b c d e f g h i\", \" \", 0))\n    print(replace_max_n(\"a b c d e f g h i\", \"a\", 3))\n    print(replace_max_n(\"a b c d e f g h i\", \"a\", 0))\n    print(replace_max_n(\"a b c d e f g h i\", \"a\", 10))\n    print(replace_max_n(\"a b c d e f g h i\", \" \", 4))"
    },
    {
      "rank": 81,
      "score": 1.0,
      "candidate": "def replace_spaces(string, n):\n    if not string or not n:\n        return string\n\n    # count the spaces\n    spaces = 0\n    for char in string:\n        if char == ' ':\n            spaces += 1\n\n    # replace spaces with colons\n    if spaces > n:\n        return replace_spaces(string.replace(\" \", \":\", spaces - n), n)\n    else:\n        return string\n\n\ndef test_function(test_case):\n    s = test_case[0]\n    n = test_case[1]\n    solution = test_case[2]\n    output = replace_spaces(s, n)\n    if output == solution:\n        print(\"Pass\")\n    else:\n        print(\"Fail\")\n\ntest_function([\"This is a test\", 2, \"This:is:a:test\"])\ntest_function([\"This is a test\", 1, \"This is a test\"])\ntest_function([\"This is a test\", 0, \"This is a test\"])\ntest_function([\"This is a test\", 3, \"This :is: a: test\"])\ntest_function([\"This is a test\", 4, \"This :is: a: test\"])\ntest_function([\"This is a test\", 5, \"This :is: a: test\"])\ntest_function([\"This is a test\", 6, \"This :is: a: test\"])\ntest_function([\"This is a test\", 7, \"This :is: a: test\"])\ntest_function([\"This is a test\", 8, \"This :is: a: test\"])\ntest_function([\"This is a test\", 9, \"This :is: a: test\"])\ntest_function([\"This is a test\", 10, \"This :is: a: test\"])\ntest_function([\"This is a test\", 11, \"This :is: a: test\"])"
    },
    {
      "rank": 82,
      "score": 1.0,
      "candidate": "def replace_max(string, symbol, n):\n    \"\"\"Replace max occurrences of a symbol with a colon.\n\n    Args:\n        string (str): string to replace\n        symbol (str): symbol to replace\n        n (int): max number of occurrences to replace\n\n    Returns:\n        str: string with replacements\n    \"\"\"\n    if n == 0:\n        return string\n    if symbol not in string:\n        return string\n    # get max occurrences\n    max_index = string.rfind(symbol)\n    # replace max occurrences with colon\n    string = string[:max_index] + \":\" + string[max_index + 1:]\n    # remove colon\n    string = string.replace(\"::\", \":\")\n    # replace max occurrences with colon\n    return replace_max(string, symbol, n - 1)\n\n\ndef main():\n    print(replace_max(\"The best and most reliable source of information is the Internet\", \" \", 2))\n    print(replace_max(\"My dog has been to 20 countries, and this is his passport\", \" \", 2))\n    print(replace_max(\"The best and most reliable source of information is the Internet\", \" \", 0))\n    print(replace_max(\"The best and most reliable source of information is the Internet\", \" \", 1))\n    print(replace_max(\"The best and most reliable source of information is the Internet\", \" \", 3))\n    print(replace_max(\"The best and most reliable source of information is the Internet\", \" \", 4))\n    print(replace_max(\"The best and most reliable source of information is the Internet\", \" \", 5))\n    print(replace_max(\"The best and most reliable source of information is the Internet\", \" \", 6))\n    print(replace_max(\"The best and most reliable source of information is the Internet\", \" \", 7))\n    print(replace_max(\"The best and most reliable source of information is the Internet\", \" \", 8))\n    print(replace_max(\"The best and most reliable source of information is the Internet\", \" \", 9))\n    print(replace_max(\"The best and most reliable source of information is the Internet\", \" \", 10))"
    },
    {
      "rank": 83,
      "score": 1.0,
      "candidate": "def replace_n_chars(string, n, char):\n    return string.replace(char, ':', n)\n\n\nif __name__ == '__main__':\n    string = \"This is a sample string. This is another sample string.\"\n    print(replace_n_chars(string, 2, '.'))\n\n\"\"\"\nWrite a function to replace all occurrences of a substring, word, with another substring, word2, in a string, string2.\n\"\"\"\n\ndef replace_word(string, word, word2):\n    return string.replace(word, word2)\n\n\nif __name__ == '__main__':\n    string = \"This is a sample string. This is another sample string.\"\n    print(replace_word(string, 'is', 'was'))\n\n\"\"\"\nWrite a function to replace all occurrences of a substring, word, with another substring, word2, in a string, string2.\nThe function should ignore case.\n\"\"\"\n\ndef replace_word_ignore_case(string, word, word2):\n    return string.replace(word, word2).replace(word.lower(), word2).replace(word.upper(), word2)\n\n\nif __name__ == '__main__':\n    string = \"This is a sample string. This is another sample string.\"\n    print(replace_word_ignore_case(string, 'is', 'was'))\n\n\"\"\"\nWrite a function to replace all occurrences of a substring, word, with another substring, word2, in a string, string2.\nThe function should ignore case.\n\"\"\"\n\ndef replace_word_ignore_case(string, word, word2):\n    return string.replace(word, word2).replace(word.lower(), word2).replace(word.upper(), word2)\n\n\nif __name__ == '__main__':\n    string = \"This is a sample string. This is another sample string.\"\n    print(replace_word_ignore_case(string, 'is', 'was'))"
    },
    {
      "rank": 84,
      "score": 1.0,
      "candidate": "def max_replace(string, max_count):\n    \"\"\"\n    Replace maximum n occurrences of spaces, commas, or dots with a colon.\n\n    :param string: string to replace\n    :type string: str\n    :param max_count: maximum number of occurrences to replace\n    :type max_count: int\n    :return: string with maximum n occurrences of spaces, commas, or dots with a colon\n    :rtype: str\n    \"\"\"\n    # replace spaces\n    string = string.replace(\" \", \":\")\n    # count spaces\n    space_count = string.count(\":\")\n    # replace commas\n    string = string.replace(\",\", \":\")\n    # count commas\n    comma_count = string.count(\":\") - space_count\n    # replace dots\n    string = string.replace(\".\", \":\")\n    # count dots\n    dot_count = string.count(\":\") - space_count - comma_count\n    # replace max number of occurrences\n    if max_count > space_count:\n        string = string.replace(\":\", \" \", max_count - space_count)\n    elif max_count > comma_count:\n        string = string.replace(\":\", \",\", max_count - comma_count)\n    elif max_count > dot_count:\n        string = string.replace(\":\", \".\", max_count - dot_count)\n    return string"
    },
    {
      "rank": 85,
      "score": 1.0,
      "candidate": "def replace_max_occurrences(string: str, char: str, n: int) -> str:\n    \"\"\"Replace maximum n occurrences of char in string with colon.\n\n    Args:\n        string (str): string to replace chars\n        char (str): char to replace\n        n (int): max number of occurrences\n\n    Returns:\n        str: string with char replaced\n    \"\"\"\n    new_string = \"\"\n    char_count = 0\n\n    for c in string:\n        if c == char:\n            char_count += 1\n        elif c != char:\n            char_count = 0\n\n        if char_count < n:\n            new_string += c\n        elif char_count == n:\n            new_string += \":\"\n\n    return new_string\n\n\ndef test_replace_max_occurrences():\n    \"\"\"Test replace_max_occurrences.\"\"\"\n    assert replace_max_occurrences(\"a b c d e f g h i j k l m n o p q r s t u v w x y z\", \" \", 4) == \"a b c d:e f g h i j k l m n o p q r s t u v w x y z\"\n    assert replace_max_occurrences(\"a b c d e f g h i j k l m n o p q r s t u v w x y z\", \",\", 4) == \"a b c d:e f g h i j k l m n o p q r s t u v w x y z\"\n    assert replace_max_occurrences(\"a b c d e f g h i j k l m n o p q r s t u v w x y z\", \".\", 4) == \"a b c d:e f g h i j k l m n o p q r s t u v w x y z\"\n    assert replace_max_occurrences(\"a b c d e f g h i j k l m n o p q r s t u v w x y z\", \":\", 4) == \"a b c d:e f g h i j k l m n o p q r s t u v w x y z\""
    },
    {
      "rank": 86,
      "score": 1.0,
      "candidate": "def replace_max_occurrences(string: str, target: str, max_occurrences: int) -> str:\n    \"\"\"Replaces maximum n occurrences of a character with a colon.\n\n    Args:\n        string: The string to be modified.\n        target: The character to be replaced.\n        max_occurrences: The maximum number of occurrences to be replaced.\n\n    Examples:\n        >>> replace_max_occurrences(\"Hello World\", \" \", 1)\n        'Hello:World'\n        >>> replace_max_occurrences(\"Hello World\", \" \", 2)\n        'Hello:World'\n        >>> replace_max_occurrences(\"Hello World\", \" \", 3)\n        'Hello:World'\n        >>> replace_max_occurrences(\"Hello World\", \" \", 4)\n        'Hello:World'\n        >>> replace_max_occurrences(\"Hello World\", \" \", 5)\n        'Hello World'\n        >>> replace_max_occurrences(\"Hello World\", \" \", 0)\n        'Hello World'\n        >>> replace_max_occurrences(\"Hello World\", \" \", -1)\n        'Hello World'\n        >>> replace_max_occurrences(\"Hello World\", \" \", -2)\n        'Hello World'\n    \"\"\"\n    # Check if string contains target\n    if target in string:\n        # Check if max_occurrences is valid\n        if max_occurrences > 0:\n            # Check if max_occurrences is greater than the occurrences of target in string\n            if string.count(target) > max_occurrences:\n                # Replace occurrences of target with colon\n                string = string.replace(\n                    target, \":\" * max_occurrences, string.count(target) - max_occurrences\n                )\n            # Check if max_occurrences is equal to the occurrences of target in string\n            elif string.count(target) == max_occurrences:\n                # Replace occurrences of target with colon\n                string = string.replace(target, \":\" * max_occurrences)\n        else:\n            # Check if max_occurrences is zero\n            if max_occ"
    },
    {
      "rank": 87,
      "score": 1.0,
      "candidate": "def max_occurences(input, n):\n    # Write your code here.\n    input_new = []\n    for i in range(len(input)):\n        if input[i] == \" \" or input[i] == \",\" or input[i] == \".\":\n            if input_new[-1] == input[i]:\n                if input.count(input[i]) <= n:\n                    input_new.append(\":\")\n                else:\n                    input_new.append(input[i])\n            else:\n                input_new.append(input[i])\n        else:\n            input_new.append(input[i])\n\n    return \"\".join(input_new)"
    },
    {
      "rank": 88,
      "score": 1.0,
      "candidate": "def replace_chars(text, n, char):\n    \"\"\"\n    text: a string\n    n: an integer\n    char: a string\n    Finds the maximum n occurrences of spaces, commas, or dots with a colon.\n    Returns the new string.\n    \"\"\"\n    # Your code here\n    text = text.split()\n    result = ''\n    for i in range(len(text)):\n        for j in range(len(text[i])):\n            if text[i][j] == char and j != len(text[i])-1:\n                if j == len(text[i])-2:\n                    result += text[i][:j+1] + ':'\n                else:\n                    result += text[i][:j+1]\n    return result\n\nprint(replace_chars('hello, world.', 1, '.'))\n#>>> hello: world.\nprint(replace_chars('hi, hi, hi', 2, 'i'))\n#>>> hi, hi: hi\nprint(replace_chars('hi, hi, hi', 3, 'i'))\n#>>> hi, hi, hi\nprint(replace_chars('hi, hi, hi', 4, 'i'))\n#>>> hi, hi, hi\n\n\n\"\"\"\nWrite a function to reverse a string.\n\"\"\"\n\ndef reverse_string(text):\n    \"\"\"\n    text: a string\n    Returns a string\n    Reverses a string.\n    \"\"\"\n    # Your code here\n    text = text.split()\n    result = ''\n    for i in range(len(text)):\n        for j in range(len(text[i])):\n            if text[i][j] != ' ':\n                result += text[i][len(text[i])-j-1]\n            else:\n                result += ' '\n    return result\n\nprint(reverse_string('hello, world.'))\n#>>> .dlrow ,olleh\nprint(reverse_string('hello, world'))\n#>>> drow olleh\nprint(reverse_string('hello, world'))\n#>>> drow olleh\nprint(reverse_string"
    },
    {
      "rank": 89,
      "score": 1.0,
      "candidate": "def replace_spaces(s, n):\n    \"\"\"\n    :param s: string to replace spaces in\n    :param n: max occurrences to replace\n    :return: string with spaces replaced\n    \"\"\"\n    # TODO: Implement me\n    pass\n\n\ndef test_function():\n    assert replace_spaces(\"This is a sample text\", 2) == \"This:is:a:sample:text\"\n    assert replace_spaces(\"This is a sample text\", 1) == \"This: is: a: sample: text\"\n\n\nif __name__ == '__main__':\n    test_function()"
    },
    {
      "rank": 90,
      "score": 1.0,
      "candidate": "def replace_n(string, char, n):\n    # your code goes here\n    if string == '' or n <= 0:\n        return string\n    if char == ' ':\n        char = ':'\n    elif char == ',':\n        char = ':'\n    elif char == '.':\n        char = ':'\n    else:\n        return string\n    return string.replace(char, ':', n)\n\n\nif __name__ == '__main__':\n    print(replace_n(\"test string\", ' ', 1))\n    print(replace_n(\"test string\", ' ', 2))\n    print(replace_n(\"test string\", ' ', 3))\n    print(replace_n(\"test string\", ' ', 4))\n    print(replace_n(\"test string\", ' ', 5))\n    print(replace_n(\"test string\", ',', 1))\n    print(replace_n(\"test string\", ',', 2))\n    print(replace_n(\"test string\", ',', 3))\n    print(replace_n(\"test string\", ',', 4))\n    print(replace_n(\"test string\", ',', 5))\n    print(replace_n(\"test string\", '.', 1))\n    print(replace_n(\"test string\", '.', 2))\n    print(replace_n(\"test string\", '.', 3))\n    print(replace_n(\"test string\", '.', 4))\n    print(replace_n(\"test string\", '.', 5))\n    print(replace_n(\"test string\", 'a', 1))\n    print(replace_n(\"test string\", 'a', 2))\n    print(replace_n(\"test string\", 'a', 3))\n    print(replace_n(\"test string\", 'a', 4))\n    print(replace_n(\"test string\", 'a', 5))"
    },
    {
      "rank": 91,
      "score": 1.0,
      "candidate": "def replace_max_chars(string, n):\n    \"\"\"Replace max n occurrences of spaces, commas, or dots with a colon.\n\n    Args:\n        string: a string to replace characters in\n        n: the max number of characters to replace\n\n    Returns:\n        a string with max n occurrences of spaces, commas, or dots replaced with a colon\n    \"\"\"\n    if not string or n < 0:\n        return None\n\n    # build a map of characters to their indices in the string\n    char_index_map = {}\n    for i, char in enumerate(string):\n        if char in char_index_map:\n            char_index_map[char].append(i)\n        else:\n            char_index_map[char] = [i]\n\n    # replace the first n characters\n    for char in [' ', ',', '.']:\n        if char in char_index_map and len(char_index_map[char]) > n:\n            for i in range(n):\n                string = string[:char_index_map[char][i]] + ':' + string[char_index_map[char][i] + 1:]\n\n    return string\n\n\ndef test_function(test_case):\n    test_case = test_case[0]\n    test_case_expected_output = test_case[1]\n    output = replace_max_chars(test_case, test_case_expected_output)\n    if output == test_case_expected_output:\n        print(\"Pass\")\n    else:\n        print(\"Fail\")\n\n\ntest_function([[\"This is a test string\", 2], \":..: :.:.\"])\ntest_function([[\"Replace spaces\", 0], \"Replace spaces\"])\ntest_function([[\"Replace spaces\", 1], \"Replace :spaces\"])\ntest_function([[\"Replace spaces\", 2], \"Replace ::spaces\"])\ntest_function([[\"Replace spaces\", 3], \"Replace :::spaces\"])\ntest_function([[\"Replace spaces\", 4], \"Replace ::::spaces\"])\ntest_function([[\"Replace spaces\", 5], \"Replace :::::spaces\"])\ntest_function([[\"Replace spaces\", 6],"
    },
    {
      "rank": 92,
      "score": 1.0,
      "candidate": "def replace_spaces(string: str, n: int) -> str:\n    \"\"\"Replace maximum n occurrences of spaces, commas, or dots with a colon.\n\n    Args:\n        string (str): the string to process.\n        n (int): maximum number of occurrences to replace.\n\n    Returns:\n        str: the processed string.\n    \"\"\"\n    # split the string into a list of characters\n    string_list = list(string)\n    # find the index of the last occurrence of a space, comma, or dot\n    max_space = max(\n        [\n            index\n            for index, char in enumerate(string_list)\n            if char in [\" \", \",\", \".\"]\n        ]\n    )\n    # replace the last n occurrences of space, comma, or dot with a colon\n    for _ in range(n):\n        string_list[max_space] = \":\"\n        # find the index of the last occurrence of a space, comma, or dot\n        max_space = max(\n            [\n                index\n                for index, char in enumerate(string_list)\n                if char in [\" \", \",\", \".\"] and index < max_space\n            ]\n        )\n    # join the list of characters into a string\n    return \"\".join(string_list)\n\n\nif __name__ == \"__main__\":\n    print(replace_spaces(\"The quick brown fox jumps over the lazy dog.\", 2))"
    },
    {
      "rank": 93,
      "score": 1.0,
      "candidate": "def replace_chars(text, n):\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(1)\n    \"\"\"\n    if not text or n <= 0:\n        return text\n\n    new_text = \"\"\n    count = 0\n    for char in text:\n        if char in \",.\" or char == \" \":\n            count += 1\n            if count == n:\n                new_text += \":\"\n                count = 0\n            else:\n                new_text += char\n        else:\n            new_text += char\n    return new_text\n\n\nif __name__ == \"__main__\":\n    assert replace_chars(\"a.b.c\", 1) == \"a:b.c\"\n    assert replace_chars(\"a,b.c\", 2) == \"a,b:c\"\n    assert replace_chars(\"a,b.c\", 0) == \"a,b.c\""
    },
    {
      "rank": 94,
      "score": 1.0,
      "candidate": "def replace_n_occurences(string: str, char: str, n: int) -> str:\n    \"\"\"Replace n occurrences of a char with a colon.\n\n    Args:\n        string (str): The string to replace the occurrences in.\n        char (str): The char to replace.\n        n (int): The number of occurrences to replace.\n\n    Returns:\n        str: The string with replaced occurrences.\n    \"\"\"\n    occurrences = 0\n    new_string = \"\"\n    for index, current_char in enumerate(string):\n        if current_char == char:\n            occurrences += 1\n        if occurrences < n:\n            new_string += current_char\n        elif occurrences == n:\n            new_string += \":\"\n        elif occurrences > n:\n            new_string += current_char\n            occurrences = 0\n    return new_string\n\n\nif __name__ == \"__main__\":\n    string = \"This is a string with spaces, commas, and dots.\"\n    print(replace_n_occurences(string, \" \", 1))\n    print(replace_n_occurences(string, \" \", 2))\n    print(replace_n_occurences(string, \" \", 3))\n    print(replace_n_occurences(string, \",\", 1))\n    print(replace_n_occurences(string, \",\", 2))\n    print(replace_n_occurences(string, \".\", 1))"
    },
    {
      "rank": 95,
      "score": 1.0,
      "candidate": "def replace_spaces(string: str, n: int) -> str:\n    \"\"\"\n    Time Complexity: O(1)\n    Space Complexity: O(1)\n    \"\"\"\n    chars = [\".\", \",\", \" \"]\n\n    for char in chars:\n        if string.count(char) > n:\n            string = string.replace(char, \":\")\n\n    return string\n\n\nif __name__ == \"__main__\":\n    assert replace_spaces(\"hello world\", 1) == \"hello:world\"\n    assert replace_spaces(\"hello world\", 2) == \"hello:world\"\n    assert replace_spaces(\"hello world\", 3) == \"hello:world\"\n    assert replace_spaces(\"hello,world\", 1) == \"hello:world\"\n    assert replace_spaces(\"hello,world\", 2) == \"hello:world\"\n    assert replace_spaces(\"hello,world\", 3) == \"hello:world\"\n    assert replace_spaces(\"hello.world\", 1) == \"hello:world\"\n    assert replace_spaces(\"hello.world\", 2) == \"hello:world\"\n    assert replace_spaces(\"hello.world\", 3) == \"hello:world\"\n    assert replace_spaces(\"hello   world\", 1) == \"hello:world\"\n    assert replace_spaces(\"hello   world\", 2) == \"hello:world\"\n    assert replace_spaces(\"hello   world\", 3) == \"hello:world\""
    },
    {
      "rank": 96,
      "score": 1.0,
      "candidate": "def replace_max_occurrences(text: str, chars: str, n: int) -> str:\n    \"\"\"Replace max n occurrences of chars with colon.\n\n    Args:\n        text (str): text to process\n        chars (str): chars to replace\n        n (int): max occurrences\n\n    Returns:\n        str: text with replaced occurrences\n    \"\"\"\n    for char in chars:\n        text = text.replace(char, \":\", n)\n    return text"
    },
    {
      "rank": 97,
      "score": 1.0,
      "candidate": "import re\n\n\ndef replace_max_n(string, char, n):\n    return re.sub(r\"{char}\\s*\".format(char=char), \":\", string, n)\n\n\ndef test_replace_max_n():\n    assert replace_max_n(\"a,b.c d e\", \",\", 1) == \"a,b:c d e\"\n    assert replace_max_n(\"a,b.c d e\", \",\", 2) == \"a,b:c: d e\"\n    assert replace_max_n(\"a,b.c d e\", \".\", 1) == \"a,b.c d e\"\n    assert replace_max_n(\"a,b.c d e\", \".\", 2) == \"a,b:c d e\"\n    assert replace_max_n(\"a,b.c d e\", \" \", 1) == \"a,b.c d e\"\n    assert replace_max_n(\"a,b.c d e\", \" \", 2) == \"a,b.c: d e\""
    },
    {
      "rank": 98,
      "score": 1.0,
      "candidate": "from itertools import groupby\n\n\ndef replace(s, n):\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(n)\n    \"\"\"\n    if s is None:\n        return s\n\n    def get_group_index(c):\n        if c == \" \":\n            return 0\n        if c == \",\":\n            return 1\n        if c == \".\":\n            return 2\n        return 3\n\n    result = []\n    for i in range(len(s)):\n        if s[i] in {\" \", \",\", \".\"}:\n            if len(result) == 0 or result[-1][0] != get_group_index(s[i]):\n                result.append([get_group_index(s[i]), 1])\n            else:\n                result[-1][1] += 1\n            if result[-1][1] == n:\n                result[-1][1] += 1\n        else:\n            result.append([3, 1])\n    return \"\".join(\n        [\n            \":\" if result[i][0] == 3 else s[i - result[i][1] + 1 : i + 1]\n            for i in range(len(s))\n        ]\n    )\n\n\ndef replace_2(s, n):\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(n)\n    \"\"\"\n    if s is None:\n        return s\n\n    def get_group_index(c):\n        if c == \" \":\n            return 0\n        if c == \",\":\n            return 1\n        if c == \".\":\n            return 2\n        return 3\n\n    result = []\n    for i in range(len(s)):\n        if s[i] in {\" \", \",\", \".\"}:\n            if len(result) == 0 or result[-1][0] != get_group_index(s[i]):\n                result.append([get_group_index(s[i]), 1])\n            else:\n                result[-1][1] += 1\n            if result[-1][1] == n:"
    },
    {
      "rank": 99,
      "score": 1.0,
      "candidate": "from string import punctuation\n\n\ndef replace_spaces(line: str, n: int) -> str:\n    \"\"\"Replace maximum n occurrences of spaces, commas, or dots with a colon.\"\"\"\n    return line.replace(\" \", \":\").replace(\",\", \":\").replace(\".\", \":\")[:-n]\n\n\nif __name__ == \"__main__\":\n    assert replace_spaces(\"a, b\", 1) == \"a: b\"\n    assert replace_spaces(\"a, b\", 2) == \"a: b\"\n    assert replace_spaces(\"a, b\", 3) == \"a: b\"\n    assert replace_spaces(\"a, b\", 4) == \"a: b\"\n    assert replace_spaces(\"a, b\", 5) == \"a: b\"\n    assert replace_spaces(\"a b c\", 1) == \"a b c\"\n    assert replace_spaces(\"a b c\", 2) == \"a b c\"\n    assert replace_spaces(\"a b c\", 3) == \"a b c\"\n    assert replace_spaces(\"a b c\", 4) == \"a b c\"\n    assert replace_spaces(\"a b c\", 5) == \"a b c\"\n    assert replace_spaces(\"a b c\", 6) == \"a b c\"\n    assert replace_spaces(\"a b c\", 7) == \"a b c\"\n    assert replace_spaces(\"a b c\", 8) == \"a b c\"\n    assert replace_spaces(\"a b c\", 9) == \"a b c\"\n    assert replace_spaces(\"a b c\", 10) == \"a b c\"\n    assert replace_spaces(\"a b c\", 11) == \"a b c\"\n    assert replace_spaces(\"a b c\", 12) == \"a b c\"\n    assert replace_spaces(\"a b c\", 13) == \"a b c\"\n    assert replace_spaces(\"a b c\", 14) == \"a b c\"\n    assert replace_spaces(\"a b c\", 15) == \"a b c\"\n    assert replace_spaces(\"a b c\", 16) == \"a b c\""
    },
    {
      "rank": 100,
      "score": 1.0,
      "candidate": "def colon_replace(string: str, n: int) -> str:\n    \"\"\"Replace maximum n occurrences of spaces, commas, or dots with a colon.\n\n    Args:\n        string (str): string to replace\n        n (int): maximum number of occurrences to replace\n\n    Examples:\n        >>> assert colon_replace(\"I am a string with spaces. and commas, and dots...\", 2) == \"I am a string with spaces: and commas, and dots:\"\n        >>> assert colon_replace(\"I am a string with spaces. and commas, and dots...\", 3) == \"I am a string with spaces: and commas, and dots:\"\n        >>> assert colon_replace(\"I am a string with spaces. and commas, and dots...\", 4) == \"I am a string with spaces: and commas, and dots:\"\n        >>> assert colon_replace(\"I am a string with spaces. and commas, and dots...\", 5) == \"I am a string with spaces: and commas, and dots:\"\n    \"\"\"\n    # pylint: disable=redefined-outer-name\n    chars_to_replace = [\" \", \",\", \".\"]\n    for char in chars_to_replace:\n        string = string.replace(char, char * n, n)\n    string = string.replace(\":\" * n, \":\", n)\n    return string\n\n\ndef colon_replace_2(string: str, n: int) -> str:\n    \"\"\"Replace maximum n occurrences of spaces, commas, or dots with a colon.\n\n    Args:\n        string (str): string to replace\n        n (int): maximum number of occurrences to replace\n\n    Examples:\n        >>> assert colon_replace_2(\"I am a string with spaces. and commas, and dots...\", 2) == \"I am a string with spaces: and commas, and dots:\"\n        >>> assert colon_replace_2(\"I am a string with spaces. and commas, and dots...\", 3) == \"I am a string with spaces: and commas, and dots:\"\n        >>> assert colon_replace_2(\"I am a string with"
    }
  ]
}