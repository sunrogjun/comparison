{
  "timestamp": "2025-09-15T00:38:47.808597",
  "method": "improved_llm_judge",
  "judge_model": "codellama/CodeLlama-7b-Python-hf",
  "target_model": "codellama-7b",
  "dataset": "mbpp",
  "problem_number": 310,
  "total_candidates": 100,
  "results": [
    {
      "rank": 1,
      "score": 10.0,
      "candidate": "def demo_number(number):\n    \"\"\"Return the demlo number for the given number.\n\n    >>> demo_number(3)\n    '3'\n    >>> demo_number(14)\n    '14'\n    >>> demo_number(123)\n    '123'\n    >>> demo_number(1234)\n    '4321'\n    >>> demo_number(12345)\n    '54321'\n    >>> demo_number(123456)\n    '654321'\n    >>> demo_number(1234567)\n    '7654321'\n    >>> demo_number(12345678)\n    '87654321'\n    >>> demo_number(123456789)\n    '987654321'\n    \"\"\"\n    result = \"\"\n    while number > 0:\n        result += str(number % 10)\n        number //= 10\n    return result or \"0\"\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 2,
      "score": 10.0,
      "candidate": "def count_demolitions(n):\n    if n == 0:\n        return 0\n    count = 0\n    while n > 0:\n        if n % 2 == 1:\n            count += 1\n        n //= 2\n    return count\n\n\nif __name__ == \"__main__\":\n    print(count_demolitions(100))"
    },
    {
      "rank": 3,
      "score": 10.0,
      "candidate": "def demo(num):\n    res = str(num)\n    for i in range(1,num):\n        if num % i == 0:\n            res += str(i)\n    return res\n\n\nif __name__ == \"__main__\":\n    print(demo(12))"
    },
    {
      "rank": 4,
      "score": 10.0,
      "candidate": "def demlo(n):\n    if n == 0:\n        return 0\n    else:\n        return n*demlo(n-1)\n\nn = int(input())\nprint(demlo(n))"
    },
    {
      "rank": 5,
      "score": 10.0,
      "candidate": "def find_demo_number(number):\n    return number * 6\n\n\nif __name__ == \"__main__\":\n    number = int(input(\"Enter a number: \"))\n    print(find_demo_number(number))"
    },
    {
      "rank": 6,
      "score": 10.0,
      "candidate": "def find_demlo_number(num: int) -> str:\n    \"\"\"\n    >>> find_demlo_number(1)\n    'I'\n    >>> find_demlo_number(12)\n    'LXII'\n    >>> find_demlo_number(19)\n    'XCIX'\n    >>> find_demlo_number(20)\n    'XX'\n    >>> find_demlo_number(21)\n    'XXI'\n    >>> find_demlo_number(35)\n    'XXXV'\n    >>> find_demlo_number(40)\n    'XL'\n    >>> find_demlo_number(42)\n    'XLI'\n    >>> find_demlo_number(50)\n    'L'\n    >>> find_demlo_number(53)\n    'LIV'\n    >>> find_demlo_number(58)\n    'LVIII'\n    >>> find_demlo_number(59)\n    'LIX'\n    >>> find_demlo_number(60)\n    'LX'\n    >>> find_demlo_number(67)\n    'LXXVII'\n    >>> find_demlo_number(70)\n    'LXX'\n    >>> find_demlo_number(80)\n    'LXXX'\n    >>> find_demlo_number(88)\n    'LXXXVIII'\n    >>> find_demlo_number(90)\n    'XC'\n    >>> find_demlo_number(98)\n    'XCVIII'\n    >>> find_demlo_number(100)\n    'C'\n    >>> find_demlo_number(101)\n    'CI'\n    >>> find_demlo_number(108)\n    'CVIII'\n    >>> find_demlo_number(110)\n    'CX'\n    >>> find_demlo_number(111)\n    'CXI'\n    >>> find_demlo_number(120)\n    'CVXX'\n    >>> find_demlo_"
    },
    {
      "rank": 7,
      "score": 10.0,
      "candidate": "def factorial(n):\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        return n * factorial(n-1)\n\ndef get_demo_number(n):\n    # Write your code here\n    # if n == 0:\n    #     return 0\n    # elif n == 1:\n    #     return 0\n    # else:\n    #     return n * get_demo_number(n-1)\n\n    # 0! = 1, 1! = 1, 2! = 2, 3! = 6\n    if n < 4:\n        return n\n    else:\n        return n * get_demo_number(n-1)\n\n\ndef get_demo_number_2(n):\n    # Write your code here\n    if n < 4:\n        return n\n    else:\n        return n * get_demo_number_2(n-1)\n\n\ndef get_demo_number_3(n):\n    # Write your code here\n    if n < 4:\n        return n\n    else:\n        return n * get_demo_number_2(n-1)\n\nif __name__ == '__main__':\n    print(get_demo_number_3(4))"
    },
    {
      "rank": 8,
      "score": 10.0,
      "candidate": "def get_demolition_number(num):\n    \"\"\"\n    Get the demolition number for the given number\n    >>> get_demolition_number(20)\n    '20'\n    >>> get_demolition_number(21)\n    '21'\n    >>> get_demolition_number(22)\n    '21'\n    >>> get_demolition_number(23)\n    '21'\n    >>> get_demolition_number(24)\n    '21'\n    >>> get_demolition_number(25)\n    '21'\n    >>> get_demolition_number(26)\n    '21'\n    >>> get_demolition_number(27)\n    '21'\n    >>> get_demolition_number(28)\n    '21'\n    >>> get_demolition_number(29)\n    '21'\n    >>> get_demolition_number(30)\n    '21'\n    >>> get_demolition_number(31)\n    '21'\n    >>> get_demolition_number(32)\n    '21'\n    >>> get_demolition_number(33)\n    '21'\n    >>> get_demolition_number(34)\n    '21'\n    >>> get_demolition_number(35)\n    '21'\n    >>> get_demolition_number(36)\n    '21'\n    >>> get_demolition_number(37)\n    '21'\n    >>> get_demolition_number(38)\n    '21'\n    >>> get_demolition_number(39)\n    '21'\n    >>> get_demolition_number(40)\n    '21'\n    >>> get_demolition_number(41)\n    '21'\n    >>> get_demolition_number(42)\n    '21'\n    >>> get_demolition_number(43)\n    '21'\n    >>> get_dem"
    },
    {
      "rank": 9,
      "score": 10.0,
      "candidate": "def demlo(num):\n    n = len(str(num))\n    for i in range(n):\n        num = int(num) % 10\n        if num == 0:\n            break\n        else:\n            print(num, end=\"\")\n\n\ndemlo(1234)"
    },
    {
      "rank": 10,
      "score": 10.0,
      "candidate": "def demo(n):\n    d = []\n    while n:\n        d.append(n % 10)\n        n //= 10\n    for i in range(len(d)):\n        if i % 2 == 0:\n            d[i] = d[i] * d[i]\n        else:\n            d[i] = d[i] * d[i] * d[i]\n    return sum(d)"
    },
    {
      "rank": 11,
      "score": 9.996355749320758,
      "candidate": "def find_demo_number(number):\n    return number * 6\n\n\nprint(find_demo_number(10))"
    },
    {
      "rank": 12,
      "score": 9.98055726717331,
      "candidate": "def demo(num):\n    if num == 0:\n        return 0\n    if num % 2 == 0:\n        return num/2\n    else:\n        return 3 * num + 1\n\n\n\nprint(demo(10))"
    },
    {
      "rank": 13,
      "score": 9.921242687555814,
      "candidate": "def demo_number(num: int) -> str:\n    \"\"\"\n    Returns the demo number for the given number.\n    >>> demo_number(123)\n    '321'\n    >>> demo_number(1234)\n    '4321'\n    >>> demo_number(12345)\n    '54321'\n    >>> demo_number(123456)\n    '654321'\n    >>> demo_number(1234567)\n    '7654321'\n    >>> demo_number(12345678)\n    '87654321'\n    >>> demo_number(123456789)\n    '987654321'\n    >>> demo_number(1234567890)\n    '0987654321'\n    \"\"\"\n    return \"\".join(reversed(str(num)))\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 14,
      "score": 9.919268015374216,
      "candidate": "def demo(number):\n    if number < 0:\n        return -demo(-number)\n    result = ''\n    while number != 0:\n        result += str(number % 10)\n        number //= 10\n    return int(result)"
    },
    {
      "rank": 15,
      "score": 9.918702002190892,
      "candidate": "def demo(n):\n    if n == 0:\n        return 0\n    elif n % 2 == 0:\n        return demo(n // 2)\n    else:\n        return demo(3 * n + 1)\n\n\nprint(demo(13))"
    },
    {
      "rank": 16,
      "score": 9.916512658520173,
      "candidate": "def get_demlo_number(num):\n    if num == 0:\n        return 0\n    if num == 1:\n        return 1\n    if num == 2:\n        return 2\n    if num == 3:\n        return 3\n    if num == 4:\n        return 4\n    if num == 5:\n        return 5\n    if num == 6:\n        return 6\n    if num == 7:\n        return 7\n    if num == 8:\n        return 8\n    if num == 9:\n        return 9\n\n    if num % 2 == 0:\n        return 2 * get_demlo_number(int(num / 2))\n    else:\n        return 2 * get_demlo_number(int(num / 2)) + 1\n\n\nif __name__ == \"__main__\":\n    print(get_demlo_number(int(input(\"Enter a number: \"))))"
    },
    {
      "rank": 17,
      "score": 9.870622955781771,
      "candidate": "def get_demlo(n):\n    \"\"\"\n    >>> get_demlo(1)\n    '1'\n    >>> get_demlo(12)\n    '11'\n    >>> get_demlo(123)\n    '111'\n    >>> get_demlo(1234)\n    '1111'\n    >>> get_demlo(12345)\n    '11111'\n    >>> get_demlo(123456)\n    '111111'\n    >>> get_demlo(1234567)\n    '1111111'\n    >>> get_demlo(12345678)\n    '11111111'\n    \"\"\"\n    n = str(n)\n    return n * len(n)\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 18,
      "score": 9.837539214698063,
      "candidate": "def demo(number):\n    \"\"\"\n    >>> demo(11)\n    '11'\n    >>> demo(12)\n    '11'\n    >>> demo(13)\n    '12'\n    \"\"\"\n    if number < 10:\n        return str(number)\n    else:\n        return str(demo(number - 9) + \"1\")\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 19,
      "score": 9.825817666256617,
      "candidate": "def find_demlo_number(n):\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n == 3:\n        return 3\n    if n == 4:\n        return 4\n    if n == 5:\n        return 5\n    if n == 6:\n        return 6\n    if n == 7:\n        return 7\n    if n == 8:\n        return 8\n    if n == 9:\n        return 9\n\n    prev_demlo = 10\n    prev_prev_demlo = 10\n\n    for i in range(10, n + 1):\n        curr_demlo = prev_demlo + prev_prev_demlo\n        prev_prev_demlo = prev_demlo\n        prev_demlo = curr_demlo\n\n    return curr_demlo\n\n\nif __name__ == \"__main__\":\n    print(find_demlo_number(12))\n    print(find_demlo_number(13))\n    print(find_demlo_number(14))\n    print(find_demlo_number(15))\n    print(find_demlo_number(16))\n    print(find_demlo_number(17))\n    print(find_demlo_number(18))\n    print(find_demlo_number(19))\n    print(find_demlo_number(20))\n    print(find_demlo_number(21))\n    print(find_demlo_number(22))\n    print(find_demlo_number(23))\n    print(find_demlo_number(24))\n    print(find_demlo_number(25))\n    print(find_demlo_number(26))\n    print(find_demlo_number(27))\n    print(find_demlo_number(28))\n    print(find_demlo_number(29))\n    print(find_demlo_number(30))\n    print"
    },
    {
      "rank": 20,
      "score": 9.773411268729888,
      "candidate": "def find_demlo_number(number: int) -> int:\n    \"\"\"\n    >>> find_demlo_number(1)\n    1\n    >>> find_demlo_number(2)\n    2\n    >>> find_demlo_number(3)\n    3\n    >>> find_demlo_number(4)\n    4\n    >>> find_demlo_number(5)\n    5\n    >>> find_demlo_number(6)\n    6\n    >>> find_demlo_number(7)\n    7\n    >>> find_demlo_number(8)\n    8\n    >>> find_demlo_number(9)\n    9\n    >>> find_demlo_number(10)\n    10\n    >>> find_demlo_number(11)\n    11\n    >>> find_demlo_number(12)\n    12\n    >>> find_demlo_number(13)\n    13\n    >>> find_demlo_number(14)\n    14\n    >>> find_demlo_number(15)\n    15\n    >>> find_demlo_number(16)\n    16\n    >>> find_demlo_number(17)\n    17\n    >>> find_demlo_number(18)\n    18\n    >>> find_demlo_number(19)\n    19\n    >>> find_demlo_number(20)\n    20\n    >>> find_demlo_number(21)\n    21\n    >>> find_demlo_number(22)\n    22\n    >>> find_demlo_number(23)\n    23\n    >>> find_demlo_number(24)\n    24\n    >>> find_demlo_number(25)\n    25\n    >>> find_demlo_number(26)\n    26\n    >>> find_demlo_number(27)\n    27\n    >>> find_demlo_number(28)\n    28\n    >>> find_demlo_number(29)\n    29\n    >>> find_demlo_number(30)\n    30"
    },
    {
      "rank": 21,
      "score": 9.754833499609273,
      "candidate": "def demo_num(number):\n    if number < 0:\n        raise Exception(\"Invalid input\")\n    return number\n\n\nif __name__ == '__main__':\n    print(demo_num(12))"
    },
    {
      "rank": 22,
      "score": 9.714418049181907,
      "candidate": "def check_demolition(number):\n    if number < 0:\n        return \"invalid input\"\n    elif number == 0:\n        return \"invalid input\"\n    elif number == 1:\n        return \"invalid input\"\n    else:\n        return 0\n\nprint(check_demolition(-1))\nprint(check_demolition(0))\nprint(check_demolition(1))\nprint(check_demolition(2))\nprint(check_demolition(10))\nprint(check_demolition(11))\nprint(check_demolition(12))\nprint(check_demolition(13))\nprint(check_demolition(14))\nprint(check_demolition(15))\nprint(check_demolition(16))\nprint(check_demolition(17))\nprint(check_demolition(18))\nprint(check_demolition(19))\nprint(check_demolition(20))\nprint(check_demolition(21))\nprint(check_demolition(22))\nprint(check_demolition(23))\nprint(check_demolition(24))\nprint(check_demolition(25))\nprint(check_demolition(26))\nprint(check_demolition(27))\nprint(check_demolition(28))\nprint(check_demolition(29))\nprint(check_demolition(30))\nprint(check_demolition(31))\nprint(check_demolition(32))\nprint(check_demolition(33))\nprint(check_demolition(34))\nprint(check_demolition(35))\nprint(check_demolition(36))\nprint(check_demolition(37))\nprint(check_demolition(38))\nprint(check_demolition(39))\nprint(check_demolition(40))\nprint(check_demolition(41))\nprint(check_demolition(42))\nprint(check_demol"
    },
    {
      "rank": 23,
      "score": 9.689231734095978,
      "candidate": "def find_demo(num):\n    result = ''\n    while num > 0:\n        if num % 2 == 0:\n            result = '1' + result\n        else:\n            result = '0' + result\n        num //= 2\n    return result\n\nprint(find_demo(15))\nprint(find_demo(10))\nprint(find_demo(8))\nprint(find_demo(6))\nprint(find_demo(1))\nprint(find_demo(0))"
    },
    {
      "rank": 24,
      "score": 9.67702421149822,
      "candidate": "def find_demo_number(n):\n    if n == 0:\n        return '0'\n    elif n == 1:\n        return '1'\n\n    result = ''\n    while n > 0:\n        if n % 2 == 0:\n            result = '0' + result\n        else:\n            result = '1' + result\n        n = n // 2\n    return result\n\n\nif __name__ == '__main__':\n    print(find_demo_number(11))"
    },
    {
      "rank": 25,
      "score": 9.618678000639472,
      "candidate": "def is_demlomatic(num: int) -> bool:\n    \"\"\"\n    >>> is_demlomatic(100)\n    True\n    >>> is_demlomatic(101)\n    False\n    \"\"\"\n    num_str = str(num)\n    num_len = len(num_str)\n    if num_len <= 1:\n        return True\n    if num_len % 2 == 0:\n        if num_str[0] != \"0\":\n            return False\n    else:\n        if num_str[0] == \"0\" and num_str[1] != \"0\":\n            return False\n    for i in range(1, num_len):\n        if num_str[i] != num_str[num_len - i - 1]:\n            return False\n    return True\n\n\ndef demlomatic(num: int) -> int:\n    \"\"\"\n    >>> demlomatic(100)\n    0\n    >>> demlomatic(101)\n    100\n    \"\"\"\n    num_str = str(num)\n    num_len = len(num_str)\n    if num_len <= 1:\n        return num\n    if num_len % 2 == 0:\n        if num_str[0] != \"0\":\n            return num\n    else:\n        if num_str[0] == \"0\" and num_str[1] != \"0\":\n            return num\n    return int(num_str[num_len // 2 :])\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 26,
      "score": 9.470889066552461,
      "candidate": "def find_demo_number(number):\n    \"\"\"\n    Finds the demo number for the given number.\n\n    >>> find_demo_number(123)\n    '321'\n    >>> find_demo_number(2233)\n    '3322'\n    >>> find_demo_number(1234)\n    '4321'\n    >>> find_demo_number(12345)\n    '54321'\n    >>> find_demo_number(123456)\n    '654321'\n    \"\"\"\n    number = str(number)\n    return number[::-1]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 27,
      "score": 9.463356393057758,
      "candidate": "\"\"\"Question:\nWrite a function to find the demlo number for the given number.\nExample:\nInput: 123\nOutput: 321\nSolution:\n1. reverse\n2. convert to string\n3. reverse the string\n4. join the string\n\"\"\"\n\n\ndef demlo(num):\n    return int(''.join(reversed(str(num))))\n\n\nassert demlo(123) == 321\nassert demlo(1230) == 321\nassert demlo(12300) == 321"
    },
    {
      "rank": 28,
      "score": 9.370583536698913,
      "candidate": "def find_demlo(number):\n    if number < 10:\n        return number\n    if number > 10000:\n        return -1\n    demlo_number = number\n    count = 0\n    while demlo_number > 9:\n        demlo_number = sum(int(x) for x in str(demlo_number))\n        count += 1\n    return count\n\n\ndef main():\n    print(find_demlo(123))\n    print(find_demlo(1234))\n    print(find_demlo(12345))\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 29,
      "score": 9.234050852198141,
      "candidate": "def demo_number(num):\n    # Your code goes here\n    result = ''\n\n    while num > 0:\n        remainder = num % 2\n        result += str(remainder)\n        num = num // 2\n    \n    return result[::-1]\n\n\nprint(demo_number(10))\nprint(demo_number(17))\nprint(demo_number(23))\nprint(demo_number(32))\nprint(demo_number(45))"
    },
    {
      "rank": 30,
      "score": 9.226766272351448,
      "candidate": "def get_demlo_number(num):\n    if num < 0:\n        return None\n    if num == 0:\n        return 0\n\n    demlo_number = 1\n\n    while num > 1:\n        if num % 2 == 0:\n            num //= 2\n        else:\n            num = (num * 3) + 1\n\n        demlo_number *= num\n\n    return demlo_number\n\n\nprint(get_demlo_number(2))\nprint(get_demlo_number(4))\nprint(get_demlo_number(6))\nprint(get_demlo_number(10))\nprint(get_demlo_number(13))\nprint(get_demlo_number(14))\nprint(get_demlo_number(15))\nprint(get_demlo_number(27))"
    },
    {
      "rank": 31,
      "score": 9.21346272767743,
      "candidate": "def get_demlo_number(number):\n    \"\"\"\n    Finds the demlo number for the given number.\n    :param number: number to find the demlo number for\n    :return: demlo number\n    \"\"\"\n    if number <= 0:\n        raise ValueError(\"number must be a positive integer\")\n    if number == 1:\n        return \"1\"\n    if number == 2:\n        return \"11\"\n    if number == 3:\n        return \"21\"\n\n    first_demlo_number = \"1\"\n    second_demlo_number = \"11\"\n    third_demlo_number = \"21\"\n\n    for i in range(3, number):\n        if i % 2 == 0:\n            third_demlo_number = third_demlo_number + first_demlo_number\n        else:\n            third_demlo_number = third_demlo_number + second_demlo_number\n        first_demlo_number = second_demlo_number\n        second_demlo_number = third_demlo_number\n\n    return third_demlo_number\n\n\ndef main():\n    print(get_demlo_number(1))  # 1\n    print(get_demlo_number(2))  # 11\n    print(get_demlo_number(3))  # 21\n    print(get_demlo_number(4))  # 1211\n    print(get_demlo_number(5))  # 111221\n    print(get_demlo_number(6))  # 312211\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 32,
      "score": 9.177268828905222,
      "candidate": "def demo_number(number):\n    return ''.join(str(int(x)) for x in str(number))\n\n\ndef main():\n    print(demo_number(123))\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 33,
      "score": 9.122564458729856,
      "candidate": "def demo_number(n):\n    temp = n\n    res = 0\n    while n > 0:\n        res += (n % 10) ** 2\n        n = n // 10\n    return temp if temp == res else -1\n\n\ndef demo_number_2(n):\n    return n if sum([i ** 2 for i in map(int, str(n))]) == n else -1\n\n\nif __name__ == \"__main__\":\n    print(demo_number(12345))\n    print(demo_number_2(12345))"
    },
    {
      "rank": 34,
      "score": 8.973005557553902,
      "candidate": "def demo(n):\n    if n == 0:\n        return 0\n    elif n % 2 == 0:\n        return demo(n // 2)\n    else:\n        return demo((3 * n + 1) // 2)\n\n\ndef main():\n    num = int(input(\"Enter a number: \"))\n    print(demo(num))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 35,
      "score": 8.932217008005624,
      "candidate": "def demo(number):\n    number = str(number)\n    return int(number[::-1])\n\n\ndef demo1(number):\n    return int(str(number)[::-1])\n\n\nif __name__ == \"__main__\":\n    print(demo(123))\n    print(demo1(123))"
    },
    {
      "rank": 36,
      "score": 8.855395696632057,
      "candidate": "def get_demolition_number(number):\n    \"\"\"\n    >>> get_demolition_number(2)\n    5\n    >>> get_demolition_number(3)\n    7\n    >>> get_demolition_number(4)\n    9\n    \"\"\"\n    if number < 2:\n        return number\n    return number + get_demolition_number(number - 1)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 37,
      "score": 8.850707355641543,
      "candidate": "def find_demlo(num):\n    # convert num to string\n    num = str(num)\n    # store the length of the number\n    length = len(num)\n    # store the result\n    result = \"\"\n    for i in range(length):\n        result += num[i] * length\n    return int(result)\n\n\ndef main():\n    print(find_demlo(1234))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 38,
      "score": 8.8281618090209,
      "candidate": "def find_demo_number(num):\n    if num == 0:\n        return \"0\"\n    elif num < 0:\n        return \"-\" + find_demo_number(-num)\n    else:\n        if num % 10 == 0:\n            return find_demo_number(num // 10)\n        else:\n            return find_demo_number(num // 10) + str(num % 10)\n\nprint(find_demo_number(123))"
    },
    {
      "rank": 39,
      "score": 8.76828871349479,
      "candidate": "def demo_number(number):\n    \"\"\"Returns the demo number for the given number\"\"\"\n    result = \"\"\n    while number > 0:\n        number, remainder = divmod(number, 2)\n        if remainder == 1:\n            result = \"1\" + result\n        else:\n            result = \"0\" + result\n\n    return result\n\n\ndef demo_number_recursive(number):\n    \"\"\"Returns the demo number for the given number using recursion\"\"\"\n    if number < 1:\n        return \"0\"\n    if number == 1:\n        return \"1\"\n\n    if number % 2 == 0:\n        return \"0\" + demo_number_recursive(number // 2)\n    else:\n        return \"1\" + demo_number_recursive((number - 1) // 2)\n\n\ndef demo_number_pythonic(number):\n    \"\"\"Returns the demo number for the given number\"\"\"\n    return \"\".join(\"1\" if d % 2 else \"0\" for d in reversed(bin(number)[2:]))\n\n\nif __name__ == \"__main__\":\n    print(demo_number(100))\n    print(demo_number_recursive(100))\n    print(demo_number_pythonic(100))"
    },
    {
      "rank": 40,
      "score": 8.750282588864879,
      "candidate": "def find_demlo_number(num):\n    demlo_num = num\n    if num < 10:\n        return num\n    else:\n        while num > 9:\n            sum = 0\n            while num > 0:\n                sum += num % 10\n                num //= 10\n            num = sum\n        return num\n\nnum = int(input(\"Enter a number: \"))\nprint(find_demlo_number(num))"
    },
    {
      "rank": 41,
      "score": 8.715724466237427,
      "candidate": "def factorial(n):\n    if n < 1:\n        return 1\n    return n * factorial(n - 1)\n\n\ndef demo(n):\n    return sum([int(i) for i in str(factorial(n))])\n\n\nif __name__ == \"__main__\":\n    print(demo(5))"
    },
    {
      "rank": 42,
      "score": 8.692801520950061,
      "candidate": "def find_demo_number(n):\n    num = n\n    result = ''\n    while num > 0:\n        rem = num % 2\n        num = num // 2\n        result += str(rem)\n    return result[::-1]\n\n\nif __name__ == '__main__':\n    print(find_demo_number(10))"
    },
    {
      "rank": 43,
      "score": 8.632293453617281,
      "candidate": "def demo(num):\n    if num < 0:\n        return -demo(-num)\n    result = \"\"\n    while num > 0:\n        result += str(num % 10)\n        num = int(num / 10)\n    return result[::-1]\n\n\nprint(demo(123))\nprint(demo(-123))\nprint(demo(0))\nprint(demo(1))"
    },
    {
      "rank": 44,
      "score": 8.625142247198651,
      "candidate": "def get_demlo(num):\n    if num == 0:\n        return \"0\"\n    if num == 1:\n        return \"1\"\n    num_str = str(num)\n    demlo = \"\"\n    for i in range(len(num_str)):\n        if num_str[i] == \"1\":\n            demlo += \"1\"\n        else:\n            demlo += \"0\"\n    return demlo\n\n\nprint(get_demlo(10))\nprint(get_demlo(0))\nprint(get_demlo(3))\nprint(get_demlo(123))\nprint(get_demlo(1))\nprint(get_demlo(101))\nprint(get_demlo(11))\nprint(get_demlo(1011))"
    },
    {
      "rank": 45,
      "score": 8.616253589228675,
      "candidate": "def get_demlo(n):\n    \"\"\"\n    :param n:\n    :return:\n    \"\"\"\n    if n < 0:\n        return -1\n    elif n == 0:\n        return 0\n    elif n == 1:\n        return 1\n\n    return 2 * get_demlo(n // 2) + get_demlo(n // 5)\n\n\nif __name__ == \"__main__\":\n    print(get_demlo(2))\n    print(get_demlo(5))\n    print(get_demlo(10))"
    },
    {
      "rank": 46,
      "score": 8.610076160146226,
      "candidate": "def is_palindrome(num):\n    return str(num) == str(num)[::-1]\n\n\ndef find_demon_number(num):\n    for i in range(num):\n        if is_palindrome(i) and is_palindrome(bin(i).replace(\"0b\", \"\")):\n            return i\n\n\nif __name__ == \"__main__\":\n    num = int(input())\n    print(find_demon_number(num))"
    },
    {
      "rank": 47,
      "score": 8.606486429141842,
      "candidate": "def get_demlo(n):\n    if n == 0:\n        return 0\n    else:\n        if n % 3 == 0:\n            return n // 3\n        elif n % 3 == 1:\n            return 1 + get_demlo(n // 3)\n        elif n % 3 == 2:\n            return 2 + get_demlo(n // 3)\n\n\ndef main():\n    print(get_demlo(12))\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 48,
      "score": 8.60156811074208,
      "candidate": "def find_demo(number: int) -> str:\n    \"\"\"\n    >>> find_demo(12345)\n    '54321'\n    \"\"\"\n    return str(number)[::-1]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 49,
      "score": 8.565425580227462,
      "candidate": "def find_diamond_number(num):\n    if num < 0:\n        return -1\n    else:\n        return int(num*(num+1)/2)\n\n\nprint(find_diamond_number(10))"
    },
    {
      "rank": 50,
      "score": 8.542875062379007,
      "candidate": "def demo_number(number):\n    string_number = str(number)\n    if len(string_number) == 1:\n        return 0\n    result = 0\n    for i in range(len(string_number)-1):\n        result += int(string_number[i+1])\n    return result\n\nprint(demo_number(123))\nprint(demo_number(12))\nprint(demo_number(1))"
    },
    {
      "rank": 51,
      "score": 8.53012858503943,
      "candidate": "def to_demlo_number(number):\n    demlo_number = \"\"\n    while number > 0:\n        demlo_number += str(number % 10)\n        number //= 10\n    return demlo_number[::-1]\n\n\nif __name__ == \"__main__\":\n    print(to_demlo_number(54321))"
    },
    {
      "rank": 52,
      "score": 8.490324832712195,
      "candidate": "def is_prime(n):\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\n\ndef get_demlos(n):\n    res = \"\"\n    while n != 1:\n        for i in range(2, n + 1):\n            if is_prime(i) and n % i == 0:\n                res += str(i)\n                n = int(n / i)\n                break\n    return res\n\n\nif __name__ == \"__main__\":\n    assert get_demlos(3) == \"3\"\n    assert get_demlos(23) == \"23\"\n    assert get_demlos(123) == \"113\"\n    assert get_demlos(125) == \"113\"\n    assert get_demlos(1234) == \"1133\"\n    assert get_demlos(12345) == \"113313\"\n    assert get_demlos(123456) == \"11331311\""
    },
    {
      "rank": 53,
      "score": 8.478208546788407,
      "candidate": "def factorial(num):\n    if num == 1:\n        return num\n    else:\n        return num*factorial(num-1)\n\n\ndef find_demo_num(num):\n    demo_num = 0\n    while num != 0:\n        digit = num % 10\n        demo_num += factorial(digit)\n        num = num//10\n    return demo_num\n\n\nif __name__ == \"__main__\":\n    num = int(input(\"Enter the number: \"))\n    print(\"Demlo number for the given number: \", find_demo_num(num))"
    },
    {
      "rank": 54,
      "score": 8.426531424889468,
      "candidate": "def main(number):\n    \"\"\"\n    Time complexity: O(n)\n    Space complexity: O(1)\n    \"\"\"\n    if number < 0:\n        raise ValueError(\"number must be positive integer\")\n    if number == 0:\n        return \"0\"\n\n    result = \"\"\n    while number:\n        result += str(number % 10)\n        number //= 10\n\n    return result[::-1]\n\n\nif __name__ == \"__main__\":\n    print(main(12345))\n    print(main(123456789))\n    print(main(-123456789))"
    },
    {
      "rank": 55,
      "score": 8.386620303250325,
      "candidate": "def get_demlo_num(n):\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        return get_demlo_num(n - 1) + get_demlo_num(n - 2)\n\ndef main():\n    n = int(input(\"Enter n: \"))\n    print(get_demlo_num(n))\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 56,
      "score": 8.375312293858853,
      "candidate": "def demlo(number):\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(1)\n    \"\"\"\n    result = \"\"\n    while number > 0:\n        result += str(number % 10)\n        number //= 10\n    return result[::-1]\n\n\nif __name__ == \"__main__\":\n    print(demlo(123))"
    },
    {
      "rank": 57,
      "score": 8.351614956112536,
      "candidate": "def find_demo_number(number: int) -> str:\n    \"\"\"\n    >>> find_demo_number(1234)\n    'IVDCCCXLIV'\n    \"\"\"\n    if number == 0:\n        return \"Zero\"\n\n    result = \"\"\n\n    if number >= 1000:\n        result += \"M\" * (number // 1000)\n        number %= 1000\n\n    if number >= 900:\n        result += \"CM\"\n        number -= 900\n\n    if number >= 500:\n        result += \"D\"\n        number -= 500\n\n    if number >= 400:\n        result += \"CD\"\n        number -= 400\n\n    if number >= 100:\n        result += \"C\" * (number // 100)\n        number %= 100\n\n    if number >= 90:\n        result += \"XC\"\n        number -= 90\n\n    if number >= 50:\n        result += \"L\"\n        number -= 50\n\n    if number >= 40:\n        result += \"XL\"\n        number -= 40\n\n    if number >= 10:\n        result += \"X\" * (number // 10)\n        number %= 10\n\n    if number >= 9:\n        result += \"IX\"\n        number -= 9\n\n    if number >= 5:\n        result += \"V\"\n        number -= 5\n\n    if number >= 4:\n        result += \"IV\"\n        number -= 4\n\n    if number >= 1:\n        result += \"I\" * (number)\n        number -= 1\n\n    return result\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 58,
      "score": 8.331556294201176,
      "candidate": "def demo_number(num):\n    num_str = str(num)\n    if num_str == num_str[::-1]:\n        return True\n    return False\n\n\nif __name__ == \"__main__\":\n    assert demo_number(121) is True\n    assert demo_number(123) is False"
    },
    {
      "rank": 59,
      "score": 8.327375965969855,
      "candidate": "def find_demlo_number(num):\n    if num < 0:\n        return -1\n\n    if num == 0:\n        return 0\n\n    if num == 1:\n        return 1\n\n    if num == 2:\n        return 2\n\n    if num == 3:\n        return 4\n\n    if num == 4:\n        return 4\n\n    if num == 5:\n        return 6\n\n    if num == 6:\n        return 9\n\n    if num == 7:\n        return 8\n\n    if num == 8:\n        return 8\n\n    if num == 9:\n        return 6\n\n    if num == 10:\n        return 10\n\n    if num > 10:\n        return 10 + 9 * find_demlo_number(num - 10)\n\n    return -1\n\n\nif __name__ == \"__main__\":\n    print(find_demlo_number(2))\n    print(find_demlo_number(3))\n    print(find_demlo_number(4))\n    print(find_demlo_number(5))\n    print(find_demlo_number(6))\n    print(find_demlo_number(7))\n    print(find_demlo_number(8))\n    print(find_demlo_number(9))\n    print(find_demlo_number(10))\n    print(find_demlo_number(11))\n    print(find_demlo_number(12))\n    print(find_demlo_number(13))\n    print(find_demlo_number(14))\n    print(find_demlo_number(15))\n    print(find_demlo_number(16))\n    print(find_demlo_number(17))\n    print(find_demlo_number(18))\n    print(find_demlo_number(19))\n    print(find_demlo_number(20))\n    print(find_demlo_number(21))\n    print(find_dem"
    },
    {
      "rank": 60,
      "score": 8.327367757082776,
      "candidate": "def find_demlo_number(number):\n    \"\"\"\n    Find the demlo number for the given number\n    :param number: number\n    :return: demlo number\n    \"\"\"\n    if number == 0:\n        return 1\n    if number == 1:\n        return 0\n    if number == 2:\n        return 2\n    if number % 2 == 0:\n        return 2 * find_demlo_number(number // 2)\n    return 2 * find_demlo_number(number - 1)"
    },
    {
      "rank": 61,
      "score": 8.251903304236286,
      "candidate": "def demlo(n):\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    if n % 2 == 0:\n        return 2 * demlo(n // 2)\n    if n % 4 == 1:\n        return 4 * demlo((n - 1) // 4) + 1\n    if n % 4 == 3:\n        return 4 * demlo((n + 1) // 4) - 1\n\n\nif __name__ == \"__main__\":\n    for i in range(10):\n        print(i, demlo(i))"
    },
    {
      "rank": 62,
      "score": 8.214125058964552,
      "candidate": "def demo_number(number):\n    if number < 10:\n        return number\n    else:\n        return demo_number(number - 10)\n\n\nif __name__ == \"__main__\":\n    print(demo_number(123))"
    },
    {
      "rank": 63,
      "score": 8.212735598038213,
      "candidate": "def find_diamond(number):\n    \"\"\"\n    >>> find_diamond(1)\n    1\n    >>> find_diamond(11)\n    2\n    >>> find_diamond(111)\n    3\n    >>> find_diamond(1111)\n    4\n    >>> find_diamond(11111)\n    5\n    \"\"\"\n    number = str(number)\n    for i in range(1, len(number) + 1):\n        if len(number) % i == 0:\n            temp = []\n            for j in range(len(number) // i):\n                temp.append(number[j * i : (j + 1) * i])\n            if len(set(temp)) == 1:\n                return i\n    return -1\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 64,
      "score": 8.211579567659316,
      "candidate": "def find_demlo_number(n):\n    while n > 0:\n        if n % 2 == 0:\n            n = n // 2\n        else:\n            n = 3 * n + 1\n        print(n, end=\" \")\n\n\nif __name__ == \"__main__\":\n    find_demlo_number(3)"
    },
    {
      "rank": 65,
      "score": 8.209707251476969,
      "candidate": "def get_demo_number(num: int) -> int:\n    \"\"\"\n    >>> get_demo_number(123)\n    321\n    >>> get_demo_number(124)\n    241\n    \"\"\"\n    return int(str(num)[::-1])\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 66,
      "score": 8.172253082181854,
      "candidate": "def get_demlo(number):\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(1)\n    \"\"\"\n    if not number:\n        return 0\n\n    count = 0\n    while number:\n        count += number % 10\n        number //= 10\n\n    return count\n\n\nif __name__ == \"__main__\":\n    print(get_demlo(123))"
    },
    {
      "rank": 67,
      "score": 8.163300679823958,
      "candidate": "def demo_number(n):\n    \"\"\"\n    >>> demo_number(345)\n    '345'\n    >>> demo_number(25)\n    '25'\n    >>> demo_number(55)\n    '55'\n    >>> demo_number(32)\n    '23'\n    \"\"\"\n    return str(n)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 68,
      "score": 8.144125099485041,
      "candidate": "def is_palindrome(input_num):\n    return input_num == int(str(input_num)[::-1])\n\n\ndef find_demon(input_num):\n    if is_palindrome(input_num):\n        return input_num\n    else:\n        return find_demon(input_num + int(str(input_num)[::-1]))\n\n\ndef find_demon_v2(input_num):\n    return find_demon(input_num + int(str(input_num)[::-1]))\n\n\ndef find_demon_v3(input_num):\n    return find_demon(input_num + find_demon(input_num))"
    },
    {
      "rank": 69,
      "score": 8.105983444291466,
      "candidate": "def is_palindrome(string):\n    return string[::-1] == string\n\n\ndef convert_to_number(string):\n    return int(string)\n\n\ndef is_demon_number(number):\n    number = str(number)\n    return is_palindrome(number) and number[::-1] != number\n\n\nif __name__ == \"__main__\":\n    print(is_demon_number(121))"
    },
    {
      "rank": 70,
      "score": 8.08452234024709,
      "candidate": "def demo_number(number):\n    result = \"\"\n    while number > 0:\n        remainder = number % 10\n        if remainder == 0:\n            result += \"D\"\n        elif remainder == 1:\n            result += \"M\"\n        elif remainder == 2:\n            result += \"C\"\n        elif remainder == 3:\n            result += \"CC\"\n        elif remainder == 4:\n            result += \"CD\"\n        elif remainder == 5:\n            result += \"D\"\n        elif remainder == 6:\n            result += \"DC\"\n        elif remainder == 7:\n            result += \"DCC\"\n        elif remainder == 8:\n            result += \"DCCC\"\n        elif remainder == 9:\n            result += \"CM\"\n        number = number // 10\n    return result[::-1]\n\n\nif __name__ == \"__main__\":\n    assert demo_number(1) == \"M\"\n    assert demo_number(9) == \"CM\"\n    assert demo_number(10) == \"X\"\n    assert demo_number(11) == \"XI\"\n    assert demo_number(13) == \"XIII\"\n    assert demo_number(20) == \"XX\"\n    assert demo_number(27) == \"XXVII\"\n    assert demo_number(40) == \"XL\"\n    assert demo_number(47) == \"XLVII\"\n    assert demo_number(90) == \"XC\"\n    assert demo_number(99) == \"XCIX\"\n    assert demo_number(100) == \"C\"\n    assert demo_number(101) == \"CI\"\n    assert demo_number(102) == \"CII\"\n    assert demo_number(105) == \"CV\"\n    assert demo_number(113) == \"CVIII\"\n    assert demo_number(140) == \"CXL\"\n    assert demo_number(160) == \"CL\"\n    assert demo_number(187) == \"CLXXXVII\"\n    assert demo_number("
    },
    {
      "rank": 71,
      "score": 7.938028884277233,
      "candidate": "def find_demlo_number(number):\n    \"\"\"\n    find demlo number for the given number\n    \"\"\"\n    return sum(int(char) ** 2 for char in str(number))\n\n\nif __name__ == \"__main__\":\n    print(find_demlo_number(45))"
    },
    {
      "rank": 72,
      "score": 7.8912769574414305,
      "candidate": "def demlo(num):\n    if num < 10:\n        return num\n    return demlo(num//10) + num % 10\n\n\nprint(demlo(1234))"
    },
    {
      "rank": 73,
      "score": 7.834022619458933,
      "candidate": "def demo(num):\n    if num <= 0:\n        return 0\n    res = 0\n    while num > 0:\n        res = res + num % 10\n        num = num // 10\n    return res\n\n\nprint(demo(123))"
    },
    {
      "rank": 74,
      "score": 7.780351419995229,
      "candidate": "def demlo(n):\n    demlo_number = ''\n    while n > 0:\n        if n % 3 == 0:\n            demlo_number += 'c'\n        elif n % 3 == 1:\n            demlo_number += 'm'\n        elif n % 3 == 2:\n            demlo_number += 'k'\n        n = n // 3\n    return demlo_number[::-1]\n\n\nif __name__ == \"__main__\":\n    print(demlo(14))"
    },
    {
      "rank": 75,
      "score": 7.7320703513377165,
      "candidate": "def find_demlo_number(number):\n    if number < 0:\n        return -1\n    elif number == 0:\n        return 0\n\n    number_str = str(number)\n    result = 0\n    for i, n in enumerate(number_str):\n        result += int(n) ** (len(number_str) - i)\n    return result\n\n\nif __name__ == '__main__':\n    print(find_demlo_number(100))"
    },
    {
      "rank": 76,
      "score": 7.705183449260731,
      "candidate": "def demo_number(num):\n    if num < 10:\n        return num\n    else:\n        return demo_number(num//10) + num % 10\n\n\ndef main():\n    print(\"demo_number:\")\n    print(demo_number(12345))\n    print(demo_number(45))\n    print(demo_number(10))\n    print(demo_number(1))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 77,
      "score": 7.5819855281879285,
      "candidate": "def find_demlo(number):\n    if number < 1:\n        return None\n\n    demlo_number = []\n\n    while number != 0:\n        demlo_number.append(number % 10)\n        number = number // 10\n\n    return demlo_number[::-1]\n\n\ndef main():\n    number = int(input(\"Enter a number: \"))\n    result = find_demlo(number)\n    print(result)\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 78,
      "score": 7.562924366763077,
      "candidate": "def find_demlo(n):\n    \"\"\"\n    We will find the factorial of the given number and then find the\n    number of zeroes in the factorial number.\n\n    Time complexity: O(n)\n    Space complexity: O(1)\n    \"\"\"\n    if n < 0:\n        raise ValueError('n must be greater than or equal to 0')\n\n    # Convert n to string\n    n_str = str(n)\n\n    # Get factorial\n    fact = factorial(n)\n\n    # Find number of zeroes in factorial\n    num_zeroes = 0\n    for num in str(fact):\n        if num == '0':\n            num_zeroes += 1\n\n    # Return number of zeroes in factorial\n    return num_zeroes\n\n\ndef factorial(n):\n    \"\"\"\n    Factorial of a number\n    \"\"\"\n    if n < 0:\n        raise ValueError('n must be greater than or equal to 0')\n\n    # Base case\n    if n == 0:\n        return 1\n\n    # Recursive case\n    return n * factorial(n - 1)\n\n\ndef main():\n    n = 100\n    print(f'Demlo number for {n} is {find_demlo(n)}')\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 79,
      "score": 7.4878043221155455,
      "candidate": "def find_demo_number(number):\n    \"\"\"\n    Find the demo number for the given number.\n\n    :param number: The number to find the demo number for.\n    :return: The demo number.\n    \"\"\"\n    if number == 0:\n        return 0\n\n    demo_number = 0\n    while number > 0:\n        demo_number += (number % 10)**2\n        number = number // 10\n\n    return demo_number\n\n\ndef main():\n    number = int(input(\"Enter a number: \"))\n    print(find_demo_number(number))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 80,
      "score": 7.134571892399572,
      "candidate": "def demo_number(number):\n    if number < 10:\n        return number\n    else:\n        last_digit = number % 10\n        return demo_number(int(number/10)) + last_digit\n\n\nprint(demo_number(25))\nprint(demo_number(34))"
    },
    {
      "rank": 81,
      "score": 3.0,
      "candidate": "def find_demlo_number(num: int) -> int:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(1)\n    \"\"\"\n\n    if num < 0:\n        return -1\n\n    if num == 0:\n        return 0\n\n    if num == 1:\n        return 1\n\n    if num > 1:\n        return num * find_demlo_number(num - 1)\n\n\nif __name__ == \"__main__\":\n    assert find_demlo_number(0) == 0\n    assert find_demlo_number(1) == 1\n    assert find_demlo_number(2) == 2\n    assert find_demlo_number(3) == 6\n    assert find_demlo_number(4) == 24\n    assert find_demlo_number(5) == 120\n    assert find_demlo_number(6) == 720\n    assert find_demlo_number(-1) == -1"
    },
    {
      "rank": 82,
      "score": 3.0,
      "candidate": "def demo_number(num):\n    num_str = str(num)\n    if num_str[0] == \"4\":\n        return \"No\"\n    elif num_str[-1] == \"4\":\n        return \"No\"\n    elif int(num_str[0]) + int(num_str[-1]) == 10:\n        return \"Yes\"\n    else:\n        return \"No\"\n\n\ndemo_number(14)"
    },
    {
      "rank": 83,
      "score": 3.0,
      "candidate": "def demlo_number(n):\n    \"\"\"\n    :param: n - input number\n    Return a demlo number for the given number n.\n    \"\"\"\n    if n < 0:\n        return None\n\n    if n == 0:\n        return 0\n\n    if n == 1:\n        return 1\n\n    if n == 2:\n        return 2\n\n    if n == 3:\n        return 3\n\n    if n == 4:\n        return 4\n\n    if n == 5:\n        return 5\n\n    if n == 6:\n        return 6\n\n    if n == 7:\n        return 7\n\n    if n == 8:\n        return 8\n\n    if n == 9:\n        return 9\n\n    if n == 10:\n        return 10\n\n    if n == 11:\n        return 11\n\n    if n == 12:\n        return 12\n\n    if n == 13:\n        return 13\n\n    if n == 14:\n        return 14\n\n    if n == 15:\n        return 15\n\n    if n == 16:\n        return 16\n\n    if n == 17:\n        return 17\n\n    if n == 18:\n        return 18\n\n    if n == 19:\n        return 19\n\n    if n == 20:\n        return 20\n\n    if n == 21:\n        return 21\n\n    if n == 22:\n        return 22\n\n    if n == 23:\n        return 23\n\n    if n == 24:\n        return 24\n\n    if n == 25:\n        return 25\n\n    if n == 26:\n        return 26\n\n    if n == 27:\n        return 27\n\n    if n == 28:\n        return 28\n\n    if n == 29:\n        return 29"
    },
    {
      "rank": 84,
      "score": 3.0,
      "candidate": "def get_demo_number(number: int) -> str:\n    \"\"\"Get demo number\n\n    Args:\n        number (int): number to get demo number\n\n    Returns:\n        str: demo number\n    \"\"\"\n    demo_number = \"\"\n    while number > 0:\n        demo_number += str(number % 10)\n        number //= 10\n    return demo_number[::-1]\n\n\nif __name__ == \"__main__\":\n    print(get_demo_number(1234))"
    },
    {
      "rank": 85,
      "score": 3.0,
      "candidate": "def get_demo(num):\n    if num == 0:\n        return 0\n    elif num == 1:\n        return 1\n    elif num == 2:\n        return 11\n    elif num == 3:\n        return 221\n\n    prev = get_demo(num-1)\n    prev_prev = get_demo(num-2)\n    return prev + prev_prev\n\nif __name__ == \"__main__\":\n    print(get_demo(4))\n    print(get_demo(5))\n    print(get_demo(6))\n    print(get_demo(7))\n    print(get_demo(8))\n    print(get_demo(9))\n    print(get_demo(10))"
    },
    {
      "rank": 86,
      "score": 3.0,
      "candidate": "def demo_number(number: int) -> str:\n    \"\"\"\n    >>> demo_number(1234)\n    '4321'\n    >>> demo_number(555)\n    '555'\n    >>> demo_number(9999)\n    '9999'\n    >>> demo_number(1000)\n    '1'\n    >>> demo_number(123)\n    '321'\n    >>> demo_number(500)\n    '5'\n    >>> demo_number(10000)\n    '10000'\n    >>> demo_number(100000)\n    '100000'\n    \"\"\"\n\n    return str(number)[::-1]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 87,
      "score": 3.0,
      "candidate": "def count_demolitions(num: int) -> int:\n    \"\"\"\n    Time Complexity: O(log(n))\n    Space Complexity: O(1)\n    \"\"\"\n    count = 0\n    while num:\n        num = num & (num - 1)\n        count += 1\n\n    return count\n\n\nif __name__ == \"__main__\":\n    assert count_demolitions(10) == 2"
    },
    {
      "rank": 88,
      "score": 3.0,
      "candidate": "def find_demo_number(num: int) -> int:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(1)\n    \"\"\"\n\n    if num < 0:\n        raise ValueError(\"number must be a positive integer\")\n\n    if num == 0:\n        return 0\n\n    res = 0\n    while num:\n        res += num % 10\n        num //= 10\n\n    return res\n\n\nif __name__ == \"__main__\":\n    print(find_demo_number(12345))\n    print(find_demo_number(-1))\n    print(find_demo_number(0))"
    },
    {
      "rank": 89,
      "score": 3.0,
      "candidate": "def convert_to_demlo(num: int) -> str:\n    \"\"\"\n    :param num: input integer\n    :return: string representation of the demlo number for the input integer\n    >>> convert_to_demlo(123)\n    '11221'\n    >>> convert_to_demlo(567)\n    '111222'\n    >>> convert_to_demlo(999)\n    '1112222'\n    >>> convert_to_demlo(0)\n    '0'\n    \"\"\"\n    if num == 0:\n        return \"0\"\n    result = \"\"\n    while num > 0:\n        remainder = num % 2\n        result += str(remainder)\n        num = num // 2\n    return result\n\n\nif __name__ == \"__main__\":\n    from doctest import testmod\n\n    testmod()"
    },
    {
      "rank": 90,
      "score": 3.0,
      "candidate": "\"\"\"Question:\nWrite a function to find the demlo number for the given number.\nExample:\nInput: 12258\nOutput: 52008\n\"\"\"\n\nclass Solution(object):\n    def demlo(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: int\n        \"\"\"\n        result = []\n        while num:\n            result.append(num%10)\n            num = num/10\n        return int(''.join(str(x) for x in result[::-1]))"
    },
    {
      "rank": 91,
      "score": 3.0,
      "candidate": "def get_demlo_number(number):\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(1)\n    \"\"\"\n    demlo_number = 0\n    while number > 0:\n        demlo_number += number % 10\n        number //= 10\n    return demlo_number\n\n\nif __name__ == \"__main__\":\n    print(get_demlo_number(213))"
    },
    {
      "rank": 92,
      "score": 3.0,
      "candidate": "def demo_number(num):\n    return num * 2\n\n\nprint(demo_number(10))"
    },
    {
      "rank": 93,
      "score": 3.0,
      "candidate": "def find_demlo(n):\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n == 3:\n        return 3\n    if n == 4:\n        return 4\n    if n == 5:\n        return 5\n    if n == 6:\n        return 6\n    if n == 7:\n        return 7\n    if n == 8:\n        return 8\n    if n == 9:\n        return 9\n    if n == 10:\n        return 10\n    if n == 11:\n        return 11\n    if n == 12:\n        return 12\n    if n == 13:\n        return 13\n    if n == 14:\n        return 14\n    if n == 15:\n        return 15\n    if n == 16:\n        return 16\n    if n == 17:\n        return 17\n    if n == 18:\n        return 18\n    if n == 19:\n        return 19\n    if n == 20:\n        return 20\n    if n == 21:\n        return 21\n    if n == 22:\n        return 22\n    if n == 23:\n        return 23\n    if n == 24:\n        return 24\n    if n == 25:\n        return 25\n    if n == 26:\n        return 26\n    if n == 27:\n        return 27\n    if n == 28:\n        return 28\n    if n == 29:\n        return 29\n    if n == 30:\n        return 30\n    if n == 31:\n        return 31\n    if n == 32:\n        return 32\n    if n == 33:\n        return 33\n    if n == 34:\n        return"
    },
    {
      "rank": 94,
      "score": 3.0,
      "candidate": "def factorial(num):\n    fact = 1\n    for i in range(1, num+1):\n        fact *= i\n    return fact\n\n\ndef demo_number(num):\n    fact = str(factorial(num))\n    return sum([int(i) for i in fact])\n\n\nif __name__ == \"__main__\":\n    print(demo_number(199))"
    },
    {
      "rank": 95,
      "score": 3.0,
      "candidate": "class Solution:\n    def is_demlomization(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: bool\n        \"\"\"\n        if num < 10:\n            return True\n        elif num >= 10 and num < 100:\n            if num % 10 == 0:\n                return False\n            elif num % 10 == 1:\n                return True\n            else:\n                return False\n        elif num >= 100 and num < 1000:\n            if num % 100 == 0:\n                return False\n            elif num % 100 == 10:\n                return True\n            elif num % 100 == 11:\n                return True\n            elif num % 100 == 100:\n                return True\n            elif num % 100 == 20:\n                return True\n            elif num % 100 == 30:\n                return True\n            elif num % 100 == 40:\n                return True\n            elif num % 100 == 50:\n                return True\n            elif num % 100 == 60:\n                return True\n            elif num % 100 == 70:\n                return True\n            elif num % 100 == 80:\n                return True\n            elif num % 100 == 90:\n                return True\n            else:\n                return False\n        else:\n            return False\n\n\nin_num = 1000\ns = Solution()\nprint(s.is_demlomization(in_num))"
    },
    {
      "rank": 96,
      "score": 3.0,
      "candidate": "def demo(number):\n    if number < 10:\n        return number\n\n    last_digit = number % 10\n    next_digit = (number // 10) % 10\n\n    if last_digit == next_digit:\n        return demo(number // 10)\n    else:\n        return last_digit\n\n\nif __name__ == '__main__':\n    print(demo(12121))"
    },
    {
      "rank": 97,
      "score": 3.0,
      "candidate": "def find_demo_number(number):\n    if number == 0:\n        return 0\n\n    result = \"\"\n    while number > 0:\n        result += str(number % 2)\n        number = int(number / 2)\n    return result[::-1]\n\n\nprint(find_demo_number(10))\nprint(find_demo_number(5))\nprint(find_demo_number(16))"
    },
    {
      "rank": 98,
      "score": 3.0,
      "candidate": "def find_demolition_number(number: int) -> int:\n    \"\"\"Returns the demolition number for the given number.\n\n    Args:\n        number (int): the number to find the demolition number for.\n\n    Returns:\n        int: the demolition number for the given number.\n    \"\"\"\n\n    def get_number_of_digits(number: int) -> int:\n        return int(len(str(number)))\n\n    def get_last_digit(number: int) -> int:\n        return int(str(number)[-1])\n\n    def get_sum_of_digits(number: int) -> int:\n        return sum(map(int, str(number)))\n\n    def is_even(number: int) -> bool:\n        return bool(number % 2 == 0)\n\n    def is_palindrome(number: int) -> bool:\n        return bool(str(number) == str(number)[::-1])\n\n    def is_perfect_square(number: int) -> bool:\n        return bool(int(number ** 0.5) ** 2 == number)\n\n    def is_perfect_cube(number: int) -> bool:\n        return bool(int(number ** (1 / 3)) ** 3 == number)\n\n    def is_power_of_two(number: int) -> bool:\n        return bool(int(number) & (int(number) - 1) == 0)\n\n    def is_prime(number: int) -> bool:\n        return bool(number > 1 and all(number % i for i in range(2, int(number ** 0.5) + 1)))\n\n    def is_armstrong_number(number: int) -> bool:\n        digits = list(map(int, str(number)))\n        return bool(number == sum(i ** len(digits) for i in digits))\n\n    def is_fibonacci_number(number: int) -> bool:\n        a, b = 0, 1\n        while a <= number:\n            if a == number:\n                return True\n            a, b = b, a"
    },
    {
      "rank": 99,
      "score": 3.0,
      "candidate": "def convert_to_demlo(number: int) -> str:\n    \"\"\"Convert number to demlo number.\n\n    Args:\n        number (int): input number\n\n    Returns:\n        str: demlo number\n    \"\"\"\n    if number == 0:\n        return \"0\"\n    demlo_number: str = \"\"\n    while number > 0:\n        if number % 2 == 1:\n            demlo_number += \"1\"\n        else:\n            demlo_number += \"0\"\n        number //= 2\n    return demlo_number[::-1]\n\n\nif __name__ == \"__main__\":\n    assert convert_to_demlo(0) == \"0\"\n    assert convert_to_demlo(5) == \"101\"\n    assert convert_to_demlo(10) == \"1100\"\n    assert convert_to_demlo(15) == \"1111\""
    },
    {
      "rank": 100,
      "score": 3.0,
      "candidate": "def demo(n):\n    if n == 0:\n        return 0\n    elif n % 2 == 0:\n        return 2 * demo(n / 2)\n    else:\n        return 2 * demo(n / 2) + 1\n\n\nprint(demo(10))"
    }
  ]
}