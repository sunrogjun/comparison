{
  "timestamp": "2025-09-15T00:20:56.663813",
  "method": "improved_llm_judge",
  "judge_model": "codellama/CodeLlama-7b-Python-hf",
  "target_model": "codellama-7b",
  "dataset": "mbpp",
  "problem_number": 271,
  "total_candidates": 100,
  "results": [
    {
      "rank": 1,
      "score": 10.0,
      "candidate": "def substract(l1, l2):\n    return list(map(lambda x, y: x - y, l1, l2))\n\n\nif __name__ == '__main__':\n    l1 = [1, 2, 3, 4, 5]\n    l2 = [2, 4, 6, 8, 10]\n    print(substract(l1, l2))"
    },
    {
      "rank": 2,
      "score": 10.0,
      "candidate": "def list_subtraction(list1, list2):\n    return list(map(lambda x: x[0] - x[1], zip(list1, list2)))\n\n\ndef main():\n    list1 = [1, 2, 3, 4]\n    list2 = [1, 2, 3, 4]\n    print(list_subtraction(list1, list2))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 3,
      "score": 10.0,
      "candidate": "def subtract(lst1, lst2):\n    return list(map(lambda x: x[0] - x[1], zip(lst1, lst2)))\n\n\ndef subtract_2(lst1, lst2):\n    return [a - b for a, b in zip(lst1, lst2)]\n\n\nprint(subtract([1, 2, 3, 4, 5], [5, 4, 3, 2, 1]))\nprint(subtract_2([1, 2, 3, 4, 5], [5, 4, 3, 2, 1]))"
    },
    {
      "rank": 4,
      "score": 10.0,
      "candidate": "def substract(l1, l2):\n    return list(map(lambda x: x[0] - x[1], zip(l1, l2)))\n\n\ndef main():\n    l1 = [1, 2, 3, 4, 5]\n    l2 = [5, 4, 3, 2, 1]\n    print(substract(l1, l2))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 5,
      "score": 10.0,
      "candidate": "def subtract(a, b):\n    return list(map(lambda x: x[0]-x[1], zip(a, b)))\n\n\nif __name__ == '__main__':\n    a = [1, 2, 3, 4]\n    b = [1, 2, 3, 4]\n    print(subtract(a, b))"
    },
    {
      "rank": 6,
      "score": 10.0,
      "candidate": "def sub_list(list_a, list_b):\n    return list(map(lambda x, y: x-y, list_a, list_b))\n\nlist_a = [1,2,3,4,5,6,7,8,9]\nlist_b = [1,2,3,4,5,6,7,8,9]\n\nprint(sub_list(list_a, list_b))"
    },
    {
      "rank": 7,
      "score": 10.0,
      "candidate": "def substract(a, b):\n    return list(map(lambda x: x[0] - x[1], zip(a, b)))\n\n\nprint(substract([1, 2, 3, 4, 5], [2, 4, 6, 8, 10]))"
    },
    {
      "rank": 8,
      "score": 10.0,
      "candidate": "def substract_list(list1, list2):\n    return list(map(lambda x: x[0] - x[1], zip(list1, list2)))\n\n\nprint(substract_list([1, 2, 3], [1, 2, 3]))\nprint(substract_list([1, 2, 3], [2, 4, 6]))\nprint(substract_list([1, 2, 3], [3, 6, 9]))"
    },
    {
      "rank": 9,
      "score": 10.0,
      "candidate": "def substract_lists(list_a, list_b):\n    return list(map(lambda x: x[0] - x[1], zip(list_a, list_b)))\n\nprint(substract_lists([1, 2, 3], [3, 2, 1]))\nprint(substract_lists([1, 2, 3], [3, 2]))\nprint(substract_lists([1, 2], [3, 2, 1]))"
    },
    {
      "rank": 10,
      "score": 10.0,
      "candidate": "def substract(list1, list2):\n    return list(map(lambda x,y: x-y, list1, list2))\n\nlist1 = [1,2,3,4,5]\nlist2 = [1,2,3,4,5]\n\nprint(substract(list1, list2))"
    },
    {
      "rank": 11,
      "score": 10.0,
      "candidate": "def list_subtract(list1, list2):\n    return list(map(lambda x: x[0] - x[1], zip(list1, list2)))\n\n\ndef main():\n    print(\"list1: \", list1)\n    print(\"list2: \", list2)\n    print(\"list_subtract: \", list_subtract(list1, list2))\n\n\nif __name__ == \"__main__\":\n    list1 = [1, 2, 3, 4, 5]\n    list2 = [4, 5, 6, 7, 8]\n    main()"
    },
    {
      "rank": 12,
      "score": 10.0,
      "candidate": "def sub(list1, list2):\n    return list(map(lambda x, y: x - y, list1, list2))\n\nlist1 = [1, 2, 3, 4, 5, 6, 7]\nlist2 = [2, 3, 4, 5, 6, 7, 8]\n\nprint(sub(list1, list2))"
    },
    {
      "rank": 13,
      "score": 10.0,
      "candidate": "def subtract(list_1, list_2):\n    return list(map(lambda x: x[0] - x[1], zip(list_1, list_2)))\n\n\ndef subtract_2(list_1, list_2):\n    return [x-y for x, y in zip(list_1, list_2)]\n\nlist_1 = [1, 2, 3, 4, 5]\nlist_2 = [1, 2, 3, 4, 5]\nprint(subtract(list_1, list_2))\nprint(subtract_2(list_1, list_2))"
    },
    {
      "rank": 14,
      "score": 10.0,
      "candidate": "def subtraction(a, b):\n    return list(map(lambda x, y: x - y, a, b))\n\n\ndef main():\n    a = [2, 4, 6, 8]\n    b = [1, 3, 5, 7]\n    print(subtraction(a, b))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 15,
      "score": 10.0,
      "candidate": "# Function to subtract two lists using map and lambda\ndef subtractLists(list1, list2):\n    # Using map() to iterate through the lists\n    result = list(map(lambda x, y: x - y, list1, list2))\n    return result\n\n# Taking inputs from user\nlist1 = list(map(int, input(\"Enter first list: \").split()))\nlist2 = list(map(int, input(\"Enter second list: \").split()))\n\n# Printing the result\nprint(subtractLists(list1, list2))"
    },
    {
      "rank": 16,
      "score": 9.0,
      "candidate": "def substract_list(a, b):\n    return list(map(lambda x: x[0] - x[1], zip(a, b)))\n\n\nif __name__ == '__main__':\n    a = [1, 2, 3, 4]\n    b = [1, 2, 3, 4]\n    print(substract_list(a, b))"
    },
    {
      "rank": 17,
      "score": 9.0,
      "candidate": "def subtract_list(list1, list2):\n    return list(map(lambda x,y: x-y, list1, list2))\n\nprint(subtract_list([1,2,3,4,5], [1,2,3,4,5]))"
    },
    {
      "rank": 18,
      "score": 9.0,
      "candidate": "def substract(list1, list2):\n    return list(map(lambda x, y: x - y, list1, list2))\n\n\nif __name__ == \"__main__\":\n    l1 = [2, 3, 4, 5]\n    l2 = [1, 2, 3, 4]\n    print(substract(l1, l2))"
    },
    {
      "rank": 19,
      "score": 9.0,
      "candidate": "def subtract(list1, list2):\n    return list(map(lambda x: x[0] - x[1], zip(list1, list2)))\n\n\nprint(subtract([1, 2, 3, 4], [2, 4, 6, 8]))"
    },
    {
      "rank": 20,
      "score": 9.0,
      "candidate": "def substract(list1, list2):\n    return list(map(lambda x, y: x-y, list1, list2))\n\nif __name__ == '__main__':\n    list1 = [2, 3, 5, 6, 8, 10]\n    list2 = [1, 2, 3, 4, 5, 6]\n    print(substract(list1, list2))"
    },
    {
      "rank": 21,
      "score": 9.0,
      "candidate": "def subtract_list(l1, l2):\n    return list(map(lambda x: x[0]-x[1], zip(l1, l2)))\n\nprint(subtract_list([1, 2, 3, 4, 5], [1, 2, 3, 4, 5]))"
    },
    {
      "rank": 22,
      "score": 9.0,
      "candidate": "def sub(a, b):\n    return list(map(lambda x,y: x-y, a, b))\n\nprint(sub([1, 2, 3], [2, 4, 5]))"
    },
    {
      "rank": 23,
      "score": 9.0,
      "candidate": "def subtract(list1, list2):\n    return list(map(lambda x: x[0] - x[1], zip(list1, list2)))\n\n\nassert(subtract([1, 2, 3, 4, 5], [2, 4, 6, 8, 10]) == [-1, -2, -3, -4, -5])"
    },
    {
      "rank": 24,
      "score": 9.0,
      "candidate": "def subtract(list1, list2):\n    return list(map(lambda x, y: x - y, list1, list2))\n\nprint(subtract([1, 2, 3, 4], [2, 4, 6, 8]))"
    },
    {
      "rank": 25,
      "score": 9.0,
      "candidate": "def subtract(l1, l2):\n    return list(map(lambda x: x[0] - x[1], zip(l1, l2)))\n\nl1 = [1, 2, 3, 4, 5]\nl2 = [1, 2, 3, 4, 5]\n\nprint(subtract(l1, l2))"
    },
    {
      "rank": 26,
      "score": 9.0,
      "candidate": "def subtraction(*args):\n    return list(map(lambda x: x[0] - x[1], zip(*args)))\n\n\nprint(subtraction([1, 2, 3, 4], [2, 4, 6, 8]))"
    },
    {
      "rank": 27,
      "score": 9.0,
      "candidate": "def substract_lists(list1, list2):\n    return list(map(lambda x: x[0]-x[1], zip(list1, list2)))\n\nlist1 = [1, 2, 3, 4, 5]\nlist2 = [1, 2, 3, 4, 5]\n\nprint(substract_lists(list1, list2))"
    },
    {
      "rank": 28,
      "score": 9.0,
      "candidate": "list1 = [1,2,3,4,5]\nlist2 = [6,7,8,9,10]\n\ndef substract_list(list1,list2):\n    result = list(map(lambda x,y: x-y, list1,list2))\n    return result\n\nprint(substract_list(list1,list2))"
    },
    {
      "rank": 29,
      "score": 9.0,
      "candidate": "def subtract(list_a, list_b):\n    return list(map(lambda x: x[0] - x[1], zip(list_a, list_b)))\n\n\nprint(subtract([1, 2, 3, 4], [2, 4, 6, 8]))"
    },
    {
      "rank": 30,
      "score": 8.0,
      "candidate": "def subtract_list(first, second):\n    return list(map(lambda x, y: x - y, first, second))\n\n\nif __name__ == '__main__':\n    first_list = [1, 2, 3, 4, 5]\n    second_list = [1, 1, 1, 1, 1]\n    print(subtract_list(first_list, second_list))"
    },
    {
      "rank": 31,
      "score": 8.0,
      "candidate": "def subtract(list1, list2):\n    return list(map(lambda x: x[0] - x[1], zip(list1, list2)))\n\n\nif __name__ == \"__main__\":\n    print(subtract([1, 2, 3, 4], [1, 2, 3, 4]))"
    },
    {
      "rank": 32,
      "score": 8.0,
      "candidate": "def sub_lists(list1, list2):\n    return list(map(lambda x, y: x - y, list1, list2))\n\nprint(sub_lists([1,2,3,4,5], [1,2,3,4,5]))"
    },
    {
      "rank": 33,
      "score": 8.0,
      "candidate": "def subtract(list1, list2):\n    return list(map(lambda x: x[0] - x[1], zip(list1, list2)))\n\n\nlist1 = [1, 2, 3]\nlist2 = [1, 1, 1]\nprint(subtract(list1, list2))"
    },
    {
      "rank": 34,
      "score": 8.0,
      "candidate": "def sub(list1, list2):\n    return list(map(lambda x, y: x - y, list1, list2))\n\n\nprint(sub([1, 2, 3], [1, 2, 3]))"
    },
    {
      "rank": 35,
      "score": 8.0,
      "candidate": "def subtract_lists(lst1, lst2):\n    return list(map(lambda x: x[0] - x[1], zip(lst1, lst2)))\n\n\ndef main():\n    list1 = [1, 2, 3]\n    list2 = [4, 5, 6]\n    print(subtract_lists(list1, list2))  # [\u22123, \u22123, \u22123]\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 36,
      "score": 8.0,
      "candidate": "def sub_list(list1, list2):\n    return list(map(lambda x: x[0] - x[1], zip(list1, list2)))\n\nlist1 = [2, 4, 6, 8]\nlist2 = [1, 3, 5, 7]\n\nprint(sub_list(list1, list2))"
    },
    {
      "rank": 37,
      "score": 8.0,
      "candidate": "def list_subtract(list1, list2):\n    return list(map(lambda x: x[0] - x[1], zip(list1, list2)))\n\n\nif __name__ == \"__main__\":\n    list1 = [1, 2, 3, 4, 5]\n    list2 = [3, 4, 5, 6, 7]\n    result = list_subtract(list1, list2)\n    print(result)"
    },
    {
      "rank": 38,
      "score": 8.0,
      "candidate": "def subtract_list(list_a, list_b):\n    return list(map(lambda x, y: x - y, list_a, list_b))\n\nprint(subtract_list([1, 2, 3, 4, 5], [1, 2, 3, 4]))"
    },
    {
      "rank": 39,
      "score": 8.0,
      "candidate": "# Solution\n\n\ndef list_subtraction(list_1, list_2):\n    return list(map(lambda x: x[0] - x[1], zip(list_1, list_2)))\n\n\n# Tests\nprint(list_subtraction([1, 2, 3], [1, 2, 3]))  # [0, 0, 0]\nprint(list_subtraction([1, 2, 3], [2, 4, 6]))  # [-1, -2, -3]\nprint(list_subtraction([1, 2, 3], [3, 2, 1]))  # [0, 0, 0]\nprint(list_subtraction([1, 2, 3], [1, 2, 3, 4]))  # [0, 0, 0, -1]\nprint(list_subtraction([1, 2, 3, 4], [1, 2, 3]))  # [0, 0, 0, 1]\nprint(list_subtraction([1, 2, 3, 4], [5, 6, 7]))  # [-4, -4, -4, -4]"
    },
    {
      "rank": 40,
      "score": 8.0,
      "candidate": "def substract(list1, list2):\n    return list(map(lambda x: x[0] - x[1], zip(list1, list2)))\n\n\nif __name__ == \"__main__\":\n    list1 = [1, 2, 3, 4, 5]\n    list2 = [1, 2, 3, 4, 5]\n    print(substract(list1, list2))"
    },
    {
      "rank": 41,
      "score": 8.0,
      "candidate": "def substract_list(list_a, list_b):\n    return list(map(lambda x: x[0] - x[1], zip(list_a, list_b)))\n\n\ndef test_substract_list():\n    assert substract_list([1, 2, 3], [1, 2, 3]) == [0, 0, 0]\n\n\nif __name__ == \"__main__\":\n    test_substract_list()"
    },
    {
      "rank": 42,
      "score": 8.0,
      "candidate": "def subtract(a, b):\n    return list(map(lambda x: x[0]-x[1], zip(a, b)))\n\n\nif __name__ == '__main__':\n    a = [1, 2, 3, 4, 5]\n    b = [5, 4, 3, 2, 1]\n    print(\"a = {}\\nb = {}\\n\".format(a, b))\n    print(\"a - b = {}\".format(subtract(a, b)))"
    },
    {
      "rank": 43,
      "score": 8.0,
      "candidate": "def subtract(list1, list2):\n    return list(map(lambda x: x[0] - x[1], zip(list1, list2)))\n\n\nprint(subtract([1, 2, 3, 4, 5], [2, 4, 6, 8, 10]))"
    },
    {
      "rank": 44,
      "score": 8.0,
      "candidate": "def substract_list(list_1, list_2):\n    return list(map(lambda x,y: x-y, list_1, list_2))\n\nlist_1 = [1,2,3,4,5]\nlist_2 = [3,5,7,9,11]\n\nprint(substract_list(list_1, list_2))"
    },
    {
      "rank": 45,
      "score": 8.0,
      "candidate": "def list_subtraction(list1, list2):\n    return list(map(lambda x: x[0] - x[1], zip(list1, list2)))\n\n\nif __name__ == '__main__':\n    list1 = [1, 2, 3, 4]\n    list2 = [2, 3, 4, 5]\n    print(list_subtraction(list1, list2))"
    },
    {
      "rank": 46,
      "score": 8.0,
      "candidate": "def substract_lists(list1, list2):\n    return list(map(lambda x: x[0] - x[1], zip(list1, list2)))\n\nif __name__ == '__main__':\n    list1 = [1, 2, 3]\n    list2 = [2, 4, 6]\n    print(substract_lists(list1, list2))"
    },
    {
      "rank": 47,
      "score": 8.0,
      "candidate": "def subtraction(list1, list2):\n    return list(map(lambda x, y: x - y, list1, list2))\n\n\nprint(subtraction([1, 2, 3, 4, 5], [1, 2, 3, 4, 1]))"
    },
    {
      "rank": 48,
      "score": 8.0,
      "candidate": "def list_subtract(list1, list2):\n    return list(map(lambda x: x[0] - x[1], zip(list1, list2)))\n\n\ndef main():\n    list1 = [2, 3, 1, 4, 5]\n    list2 = [1, 2, 3, 4, 5]\n    print(list_subtract(list1, list2))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 49,
      "score": 8.0,
      "candidate": "def subtract(a, b):\n    return list(map(lambda x, y: x - y, a, b))\n\n\nif __name__ == \"__main__\":\n    a = [1, 2, 3, 4, 5]\n    b = [5, 4, 3, 2, 1]\n    print(subtract(a, b))"
    },
    {
      "rank": 50,
      "score": 8.0,
      "candidate": "def subtract(a, b):\n    return list(map(lambda x: x[0] - x[1], zip(a, b)))\n\n\nprint(subtract([1, 2, 3, 4], [2, 2, 2, 2]))"
    },
    {
      "rank": 51,
      "score": 8.0,
      "candidate": "def substract(list1, list2):\n    return list(map(lambda x: x[0] - x[1], zip(list1, list2)))\n\nlist1 = [1, 2, 3, 4, 5]\nlist2 = [5, 4, 3, 2, 1]\n\nprint(substract(list1, list2))"
    },
    {
      "rank": 52,
      "score": 8.0,
      "candidate": "def substract_list(a, b):\n    return list(map(lambda x: x[0] - x[1], zip(a, b)))\n\nif __name__ == '__main__':\n    a = [1, 2, 3, 4, 5, 6]\n    b = [3, 5, 2, 1, 6, 7]\n    print(substract_list(a, b))"
    },
    {
      "rank": 53,
      "score": 8.0,
      "candidate": "def substract(list_a, list_b):\n    return list(map(lambda x: x[0] - x[1], zip(list_a, list_b)))\n\nif __name__ == '__main__':\n    list_a = [1, 2, 3, 4, 5, 6, 7]\n    list_b = [5, 6, 7, 8, 9, 10, 11]\n    print(substract(list_a, list_b))"
    },
    {
      "rank": 54,
      "score": 8.0,
      "candidate": "def subtract(x, y):\n    return list(map(lambda n: n[0] - n[1], zip(x, y)))\n\n\nx = [2, 5, 10]\ny = [1, 2, 3]\n\nprint(subtract(x, y))  # [1, 3, 7]"
    },
    {
      "rank": 55,
      "score": 8.0,
      "candidate": "def substract(list1, list2):\n    return list(map(lambda x, y: x - y, list1, list2))\n\n\nprint(substract([1, 2, 3, 4, 5, 6], [1, 2, 3, 4]))"
    },
    {
      "rank": 56,
      "score": 8.0,
      "candidate": "def subtract_list(a, b):\n    return list(map(lambda x: x[0] - x[1], zip(a, b)))\n\nprint(subtract_list([1, 2, 3, 4], [1, 2, 3, 4]))"
    },
    {
      "rank": 57,
      "score": 8.0,
      "candidate": "def sub(list_a, list_b):\n    return list(map(lambda x, y: x - y, list_a, list_b))\n\n\nprint(sub([1, 2, 3, 4], [1, 2, 3, 4]))"
    },
    {
      "rank": 58,
      "score": 8.0,
      "candidate": "def substract(a, b):\n    return list(map(lambda x: x[0] - x[1], zip(a, b)))\n\n\nif __name__ == '__main__':\n    a = [1, 2, 3, 4, 5, 6]\n    b = [3, 2, 6, 7, 4, 5]\n    print(substract(a, b))"
    },
    {
      "rank": 59,
      "score": 8.0,
      "candidate": "def substract(list1, list2):\n    return list(map(lambda x: x[0] - x[1], zip(list1, list2)))\n\n\nprint(substract([1, 2, 3, 4, 5], [1, 2, 3, 4]))"
    },
    {
      "rank": 60,
      "score": 8.0,
      "candidate": "def sub_lists(list1, list2):\n    return list(map(lambda x: x[0] - x[1], zip(list1, list2)))\n\n\nlist1 = [1, 2, 3]\nlist2 = [4, 2, 5]\nprint(sub_lists(list1, list2))"
    },
    {
      "rank": 61,
      "score": 8.0,
      "candidate": "def list_substraction(list1, list2):\n    return list(map(lambda x: x[0] - x[1], zip(list1, list2)))\n\n\nprint(list_substraction([1, 2, 3, 4], [1, 2, 3, 4]))"
    },
    {
      "rank": 62,
      "score": 8.0,
      "candidate": "def subtract(list1, list2):\n    return list(map(lambda x: x[0] - x[1], zip(list1, list2)))\n\n\nif __name__ == '__main__':\n    list1 = [1, 2, 3, 4]\n    list2 = [1, 2, 3]\n    print(subtract(list1, list2))"
    },
    {
      "rank": 63,
      "score": 8.0,
      "candidate": "def subtraction(list1, list2):\n    return list(map(lambda x, y: x - y, list1, list2))\n\n\nif __name__ == '__main__':\n    list1 = [1, 2, 3, 4, 5]\n    list2 = [1, 2, 3, 4]\n    print(subtraction(list1, list2))"
    },
    {
      "rank": 64,
      "score": 8.0,
      "candidate": "def substract_lists(list1, list2):\n    return list(map(lambda x, y: x-y, list1, list2))\n\n\nif __name__ == '__main__':\n    list1 = [1, 2, 3, 4]\n    list2 = [1, 2, 3, 4]\n    print(substract_lists(list1, list2))"
    },
    {
      "rank": 65,
      "score": 8.0,
      "candidate": "def sub_list(list1, list2):\n    return list(map(lambda x: x[0] - x[1], zip(list1, list2)))\n\n\nlist1 = [1, 2, 3, 4, 5]\nlist2 = [1, 2, 3, 4, 5]\nprint(sub_list(list1, list2))"
    },
    {
      "rank": 66,
      "score": 8.0,
      "candidate": "def subtract(list1, list2):\n    return list(map(lambda x: x[0] - x[1], zip(list1, list2)))\n\n\ndef test_subtract():\n    assert subtract([1, 2, 3, 4, 5], [2, 4, 6, 8, 10]) == [-1, -2, -3, -4, -5]"
    },
    {
      "rank": 67,
      "score": 8.0,
      "candidate": "def sub(list1, list2):\n    return list(map(lambda x, y: x - y, list1, list2))\n\n\nprint(sub([1, 2, 3, 4], [1, 2, 3, 4]))"
    },
    {
      "rank": 68,
      "score": 8.0,
      "candidate": "def subtract(list1, list2):\n    return list(map(lambda x: x[0] - x[1], zip(list1, list2)))\n\n\ndef subtract_2(list1, list2):\n    return [list1[i] - list2[i] for i in range(len(list1))]"
    },
    {
      "rank": 69,
      "score": 8.0,
      "candidate": "def subtract(a, b):\n    return list(map(lambda x: x[0] - x[1], zip(a, b)))\n\n\nif __name__ == '__main__':\n    a = [1, 2, 3, 4]\n    b = [1, 2, 3]\n    print(subtract(a, b))"
    },
    {
      "rank": 70,
      "score": 8.0,
      "candidate": "# Solution\n\ndef subtract(x, y):\n    return list(map(lambda i: i[0] - i[1], zip(x, y)))\n\n# Tests\nprint(\"Pass\" if (subtract([1, 2, 3], [1, 2, 3]) == [0, 0, 0]) else \"Fail\")\nprint(\"Pass\" if (subtract([1, 2, 3], [3, 2, 1]) == [-2, 0, 2]) else \"Fail\")\nprint(\"Pass\" if (subtract([1, 2, 3], [1, 1, 1]) == [0, 1, 2]) else \"Fail\")\nprint(\"Pass\" if (subtract([1, 1, 1], [1, 2, 3]) == [-1, -1, -1]) else \"Fail\")"
    },
    {
      "rank": 71,
      "score": 8.0,
      "candidate": "def subtract_list(list1, list2):\n    result = map(lambda x, y: x - y, list1, list2)\n    return list(result)\n\n\nprint(subtract_list([1, 2, 3, 4, 5], [1, 2, 3]))"
    },
    {
      "rank": 72,
      "score": 8.0,
      "candidate": "def sub(a, b):\n    return list(map(lambda x, y: x - y, a, b))\n\nprint(sub([1, 2, 3], [1, 2, 3]))"
    },
    {
      "rank": 73,
      "score": 8.0,
      "candidate": "def sub(a,b):\n    return list(map(lambda x:x[0]-x[1], zip(a,b)))\n\na = [1,2,3,4,5]\nb = [4,5,6,7,8]\nprint(sub(a,b))"
    },
    {
      "rank": 74,
      "score": 8.0,
      "candidate": "def subtract_list(list1, list2):\n    result = list(map(lambda x, y: x - y, list1, list2))\n    return result\n\nprint(subtract_list([1, 2, 3], [2, 2, 2]))\nprint(subtract_list([1, 2, 3], [2, 2]))\nprint(subtract_list([1, 2, 3], [2, 2, 2, 2]))"
    },
    {
      "rank": 75,
      "score": 8.0,
      "candidate": "def subtract_lists(list1, list2):\n    return list(map(lambda x, y: x - y, list1, list2))\n\nlist1 = [1, 2, 3, 4, 5]\nlist2 = [1, 2, 3, 4, 5]\n\nprint(subtract_lists(list1, list2))"
    },
    {
      "rank": 76,
      "score": 8.0,
      "candidate": "def subtract(list1, list2):\n    return list(map(lambda x,y: x-y, list1, list2))\n\nlist1 = [1, 2, 3, 4, 5]\nlist2 = [1, 2, 3, 4, 5]\n\nprint(subtract(list1, list2))\n\n# Time Complexity O(n)\n# Space Complexity O(n)"
    },
    {
      "rank": 77,
      "score": 8.0,
      "candidate": "def subtract_list(list_a, list_b):\n    return list(map(lambda x: x[0] - x[1], zip(list_a, list_b)))\n\n\nprint(subtract_list([1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5]))"
    },
    {
      "rank": 78,
      "score": 8.0,
      "candidate": "def substract(a, b):\n    return list(map(lambda x: x[0]-x[1], zip(a, b)))\n\n\nprint(substract([1, 2, 3], [1, 2, 3]))"
    },
    {
      "rank": 79,
      "score": 8.0,
      "candidate": "def substract(list_1, list_2):\n    return list(map(lambda x, y: x - y, list_1, list_2))\n\ndef substract_lambda(list_1, list_2):\n    return list(map(lambda x, y: x - y, list_1, list_2))\n\nprint(substract([1, 2, 3], [1, 1, 1]))\nprint(substract_lambda([1, 2, 3], [1, 1, 1]))"
    },
    {
      "rank": 80,
      "score": 8.0,
      "candidate": "def subtract(a, b):\n    return list(map(lambda x: x[0] - x[1], zip(a, b)))\n\n\na = [1, 2, 3, 4, 5]\nb = [4, 3, 2, 1, 0]\n\nprint(subtract(a, b))"
    },
    {
      "rank": 81,
      "score": 8.0,
      "candidate": "def list_subtraction(list1, list2):\n    return list(map(lambda x: x[0] - x[1], zip(list1, list2)))\n\nlist1 = [1, 2, 3, 4, 5]\nlist2 = [5, 6, 7, 8, 9]\n\nprint(list_subtraction(list1, list2))"
    },
    {
      "rank": 82,
      "score": 8.0,
      "candidate": "def subtract(list1, list2):\n    return list(map(lambda x: x[0] - x[1], zip(list1, list2)))\n\n\nprint(subtract([1, 2, 3, 4], [1, 2, 3, 4]))"
    },
    {
      "rank": 83,
      "score": 8.0,
      "candidate": "def subtract_lists(list_1, list_2):\n    return list(map(lambda x: x[0] - x[1], zip(list_1, list_2)))\n\n\ndef subtract_lists_zip(list_1, list_2):\n    return list(zip(list_1, list_2))\n\n\nlist_1 = [1, 2, 3, 4, 5]\nlist_2 = [1, 2, 3, 4, 5]\n\nprint(subtract_lists(list_1, list_2))\nprint(subtract_lists_zip(list_1, list_2))"
    },
    {
      "rank": 84,
      "score": 8.0,
      "candidate": "# The first argument is a list of numbers, and the second argument is a list of numbers.\n# The function should return a list of numbers, where each element in the returned list is the subtraction of the corresponding elements in the two lists.\n# The two lists should be of the same length.\n\n\n# def subtract(list1, list2):\n#     return list(map(lambda x, y: x - y, list1, list2))\n\ndef subtract(list1, list2):\n    return [list1[i] - list2[i] for i in range(len(list1))]\n\n\ndef main():\n    print(subtract([1, 1, 1], [1, 5, 2]))\n    print(subtract([1, 2, 3], [3, 2, 1]))\n    print(subtract([5, 5, 5], [2, 2, 2]))\n    print(subtract([1, 2, 3], [3, 2, 1, 4]))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 85,
      "score": 8.0,
      "candidate": "def substract(list1, list2):\n    return list(map(lambda x: x[0] - x[1], zip(list1, list2)))\n\n\nif __name__ == \"__main__\":\n    list1 = [1, 2, 3, 4, 5]\n    list2 = [5, 4, 3, 2, 1]\n    print(substract(list1, list2))"
    },
    {
      "rank": 86,
      "score": 8.0,
      "candidate": "# Using map\ndef subtract(list1, list2):\n    return list(map(lambda x: x[0]-x[1], zip(list1, list2)))\n\n# Using list comprehension\ndef subtract(list1, list2):\n    return [x[0]-x[1] for x in zip(list1, list2)]\n\n# Using for loop\ndef subtract(list1, list2):\n    res = []\n    for x, y in zip(list1, list2):\n        res.append(x-y)\n    return res\n\n# Using reduce\nfrom functools import reduce\ndef subtract(list1, list2):\n    return reduce(lambda x, y: x+y, [x-y for x, y in zip(list1, list2)])\n\n# Using numpy\nimport numpy as np\ndef subtract(list1, list2):\n    return np.subtract(list1, list2)\n\nprint(subtract([1, 2, 3, 4], [1, 2, 3, 4]))\nprint(subtract([1, 2, 3, 4], [2, 4, 6, 8]))"
    },
    {
      "rank": 87,
      "score": 8.0,
      "candidate": "def substract(a, b):\n    return list(map(lambda x: x[0] - x[1], zip(a, b)))\n\na = [1, 2, 3, 4]\nb = [3, 2, 1, 0]\nprint(substract(a, b))"
    },
    {
      "rank": 88,
      "score": 8.0,
      "candidate": "def subtract_lists(list1, list2):\n    return list(map(lambda x: x[0] - x[1], zip(list1, list2)))\n\n\nlist1 = [1, 2, 3, 4]\nlist2 = [1, 2, 3, 4]\nprint(subtract_lists(list1, list2))"
    },
    {
      "rank": 89,
      "score": 7.0,
      "candidate": "def subtract_lists(l1, l2):\n    return list(map(lambda x: x[0] - x[1], zip(l1, l2)))\n\n\nprint(subtract_lists([1, 2, 3], [1, 2, 3]))\nprint(subtract_lists([1, 2, 3], [3, 2, 1]))"
    },
    {
      "rank": 90,
      "score": 4.0,
      "candidate": "# def sub(a, b):\n#     return list(map(lambda x: x[0] - x[1], zip(a, b)))\n\n# def sub(a, b):\n#     return [x - y for x, y in zip(a, b)]\n\ndef sub(a, b):\n    return [x - y for x, y in zip(a, b)]\n\n\ndef sub_2(a, b):\n    return [a[i] - b[i] for i in range(len(a))]\n\n\nif __name__ == '__main__':\n    a = [1, 2, 3, 4, 5]\n    b = [1, 2, 3, 4, 5]\n    print(sub(a, b))\n    print(sub_2(a, b))"
    },
    {
      "rank": 91,
      "score": 1.0,
      "candidate": "def subtract(list_a, list_b):\n    return list(map(lambda x: x[0] - x[1], zip(list_a, list_b)))\n\n\nprint(subtract([1, 2, 3, 4], [1, 2, 3, 4]))\nprint(subtract([1, 2, 3, 4], [1, 2, 3]))\nprint(subtract([1, 2, 3], [1, 2, 3, 4]))\nprint(subtract([1, 2, 3], [1, 2, 3]))"
    },
    {
      "rank": 92,
      "score": 1.0,
      "candidate": "# Write a function to substaract two lists using map and lambda function.\n\n# def subtract(list1, list2):\n#     return list(map(lambda x: x[0] - x[1], zip(list1, list2)))\n#     # return list(map(lambda x, y: x - y, list1, list2))\n\n# list1 = [1, 2, 3, 4]\n# list2 = [1, 2, 3, 4]\n# print(subtract(list1, list2))\n\n# def subtract(list1, list2):\n#     return list(map(lambda x: x[0] - x[1], zip(list1, list2)))\n\n# list1 = [1, 2, 3, 4]\n# list2 = [1, 2, 3, 4]\n# print(subtract(list1, list2))\n\n# def subtract(list1, list2):\n#     return list(map(lambda x, y: x - y, list1, list2))\n\n# list1 = [1, 2, 3, 4]\n# list2 = [1, 2, 3, 4]\n# print(subtract(list1, list2))\n\n# def subtract(list1, list2):\n#     return list(map(lambda x: x[0] - x[1], zip(list1, list2)))\n\n# list1 = [1, 2, 3, 4]\n# list2 = [1, 2, 3, 4]\n# print(subtract(list1, list2))\n\n# def subtract(list1, list2):\n#     return list(map(lambda x, y: x - y, list1, list2))\n\n# list1 = [1, 2, 3, 4]\n# list2 = [1, 2, 3, 4]\n# print(subtract(list1, list2))\n\n\ndef subtract(list1, list2):\n    return list(map(lambda x: x[0] - x[1], zip(list1,"
    },
    {
      "rank": 93,
      "score": 1.0,
      "candidate": "def substract_list(list1, list2):\n    return list(map(lambda x, y: x - y, list1, list2))\n\n\nlist1 = [1, 2, 3, 4, 5]\nlist2 = [2, 2, 2, 2, 2]\nprint(substract_list(list1, list2))"
    },
    {
      "rank": 94,
      "score": 1.0,
      "candidate": "def subtract_two_lists(list1, list2):\n    # check if both lists are of same length\n    if len(list1) != len(list2):\n        return None\n    # apply map function\n    return list(map(lambda x: x[0] - x[1], zip(list1, list2)))\n\n\nif __name__ == '__main__':\n    list1 = [1, 2, 3, 4, 5]\n    list2 = [6, 5, 4, 3, 2]\n    print(subtract_two_lists(list1, list2))"
    },
    {
      "rank": 95,
      "score": 1.0,
      "candidate": "def substract(list1, list2):\n    return list(map(lambda x: x[0] - x[1], zip(list1, list2)))\n\n\ndef substract_2(list1, list2):\n    return [a - b for a, b in zip(list1, list2)]\n\n\nif __name__ == \"__main__\":\n    list1 = [1, 2, 3, 4, 5]\n    list2 = [1, 2, 3, 4, 5]\n    print(substract(list1, list2))\n    print(substract_2(list1, list2))"
    },
    {
      "rank": 96,
      "score": 1.0,
      "candidate": "def list_substract(lst1, lst2):\n    \"\"\"Substract lst2 from lst1.\"\"\"\n    return list(map(lambda x: x[0] - x[1], zip(lst1, lst2)))\n\nif __name__ == '__main__':\n    lst1 = [1, 2, 3, 4, 5]\n    lst2 = [1, 2, 3, 4, 5]\n    print(list_substract(lst1, lst2))"
    },
    {
      "rank": 97,
      "score": 1.0,
      "candidate": "def subtract(l1, l2):\n    return list(map(lambda x: x[0] - x[1], zip(l1, l2)))\n\n\nif __name__ == \"__main__\":\n    l1 = [1, 2, 3, 4, 5]\n    l2 = [5, 4, 3, 2, 1]\n    print(subtract(l1, l2))"
    },
    {
      "rank": 98,
      "score": 1.0,
      "candidate": "def sub(a, b):\n    return list(map(lambda x: x[0] - x[1], zip(a, b)))\n\n\na = [2, 4, 5, 6, 7, 9]\nb = [3, 4, 6, 6, 7, 8]\nprint(sub(a, b))"
    },
    {
      "rank": 99,
      "score": 1.0,
      "candidate": "def subtract_list(list1, list2):\n    return list(map(lambda x: x[0] - x[1], zip(list1, list2)))\n\n\ndef subtract_list_1(list1, list2):\n    return [i - j for i, j in zip(list1, list2)]\n\n\ndef subtract_list_2(list1, list2):\n    return [i - j for i, j in zip(list1, list2)]\n\n\ndef subtract_list_3(list1, list2):\n    return [i - j for i, j in zip(list1, list2)]\n\n\ndef subtract_list_4(list1, list2):\n    return [i - j for i, j in zip(list1, list2)]\n\n\ndef subtract_list_5(list1, list2):\n    return [i - j for i, j in zip(list1, list2)]\n\n\ndef subtract_list_6(list1, list2):\n    return [i - j for i, j in zip(list1, list2)]\n\n\ndef subtract_list_7(list1, list2):\n    return [i - j for i, j in zip(list1, list2)]\n\n\ndef subtract_list_8(list1, list2):\n    return [i - j for i, j in zip(list1, list2)]\n\n\ndef subtract_list_9(list1, list2):\n    return [i - j for i, j in zip(list1, list2)]\n\n\ndef subtract_list_10(list1, list2):\n    return [i - j for i, j in zip(list1, list2)]\n\n\ndef subtract_list_11(list1, list2):\n    return [i - j for i, j in zip(list1, list2)]\n\n\ndef subtract_list_12(list1, list2):\n    return [i - j for i, j in zip(list1, list2)]\n\n\ndef subtract_list_13(list1, list2):\n    return [i - j for i, j in zip(list1, list2)]"
    },
    {
      "rank": 100,
      "score": 1.0,
      "candidate": "def substract_list(list_1, list_2):\n    return list(map(lambda x, y: x - y, list_1, list_2))\n\n\nif __name__ == '__main__':\n    list_1 = [1, 2, 3, 4, 5]\n    list_2 = [5, 4, 3, 2, 1]\n    print(substract_list(list_1, list_2))"
    }
  ]
}