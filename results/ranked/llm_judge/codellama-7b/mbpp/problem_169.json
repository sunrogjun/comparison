{
  "timestamp": "2025-09-14T23:34:38.101278",
  "method": "improved_llm_judge",
  "judge_model": "codellama/CodeLlama-7b-Python-hf",
  "target_model": "codellama-7b",
  "dataset": "mbpp",
  "problem_number": 169,
  "total_candidates": 100,
  "results": [
    {
      "rank": 1,
      "score": 10.0,
      "candidate": "import math\n\n\ndef distance(lat1, lon1, lat2, lon2):\n    \"\"\"\n    Calculates distance between two points using latitude and longitude.\n\n    >>> distance(13.01, 77.59, 12.97, 77.45)\n    176.94\n\n    >>> distance(12.97, 77.45, 13.01, 77.59)\n    176.94\n    \"\"\"\n    lat1 = math.radians(lat1)\n    lon1 = math.radians(lon1)\n    lat2 = math.radians(lat2)\n    lon2 = math.radians(lon2)\n    r = 6371\n    x = (lon2 - lon1) * math.cos((lat1 + lat2) / 2)\n    y = lat2 - lat1\n    return round(r * math.sqrt(x * x + y * y), 2)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 2,
      "score": 10.0,
      "candidate": "import math\n\ndef distance(lat1, lon1, lat2, lon2):\n    R = 6371\n    lat1 = math.radians(lat1)\n    lon1 = math.radians(lon1)\n    lat2 = math.radians(lat2)\n    lon2 = math.radians(lon2)\n    dlon = lon2 - lon1\n    dlat = lat2 - lat1\n    a = math.sin(dlat / 2)**2 + math.cos(lat1) * math.cos(lat2) * math.sin(dlon / 2)**2\n    c = 2 * math.atan2(math.sqrt(a), math.sqrt(1 - a))\n    distance = R * c\n    return distance"
    },
    {
      "rank": 3,
      "score": 10.0,
      "candidate": "import math\n\n\ndef distance_between_points(p1, p2):\n    \"\"\"\n    Return the distance between two points.\n\n    :param p1: first point\n    :param p2: second point\n    :return: distance between two points\n    \"\"\"\n    lat1, lon1 = p1\n    lat2, lon2 = p2\n\n    p = math.pi / 180\n    a = 0.5 - math.cos((lat2 - lat1) * p) / 2 + math.cos(lat1 * p) * math.cos(lat2 * p) * (1 - math.cos((lon2 - lon1) * p)) / 2\n    return 12742 * math.asin(math.sqrt(a))\n\n\ndef test_distance_between_points():\n    \"\"\"\n    >>> test_distance_between_points()\n    \"\"\"\n    assert distance_between_points((47.6062, -122.3321), (47.6045, -122.3231)) == 3.4\n    assert distance_between_points((0, 0), (0, 0)) == 0\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 4,
      "score": 10.0,
      "candidate": "from math import sin, cos, sqrt, atan2, radians\n\n\ndef distance(lat1, lon1, lat2, lon2):\n    \"\"\"\n    Calculates distance between two points in kilometers.\n    >>> distance(52.5200, 13.4050, 52.4914, 13.3578)\n    24.36871926608894\n    \"\"\"\n    # approximate radius of earth in km\n    R = 6373.0\n\n    lat1 = radians(lat1)\n    lon1 = radians(lon1)\n    lat2 = radians(lat2)\n    lon2 = radians(lon2)\n\n    dlon = lon2 - lon1\n    dlat = lat2 - lat1\n\n    a = sin(dlat / 2) ** 2 + cos(lat1) * cos(lat2) * sin(dlon / 2) ** 2\n    c = 2 * atan2(sqrt(a), sqrt(1 - a))\n\n    return R * c\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 5,
      "score": 10.0,
      "candidate": "import math\n\n\ndef distance_between_points(lat1, lon1, lat2, lon2):\n    \"\"\"\n    Calculates distance between two points.\n\n    >>> distance_between_points(12.9716, 77.5946, 12.9758, 77.6009)\n    0.0012128586406373255\n    \"\"\"\n    R = 6371  # Radius of the earth in km\n    dLat = math.radians(lat2 - lat1)  # deg2rad below\n    dLon = math.radians(lon2 - lon1)\n    lat1 = math.radians(lat1)\n    lat2 = math.radians(lat2)\n    a = math.sin(dLat / 2) * math.sin(dLat / 2) + math.sin(dLon / 2) * math.sin(dLon / 2) * math.cos(lat1) * math.cos(\n        lat2)\n    c = 2 * math.atan2(math.sqrt(a), math.sqrt(1 - a))\n    return R * c\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 6,
      "score": 10.0,
      "candidate": "import math\n\ndef distance(lat1, lon1, lat2, lon2):\n    # approximate radius of earth in km\n    R = 6373.0\n\n    lat1 = math.radians(lat1)\n    lon1 = math.radians(lon1)\n    lat2 = math.radians(lat2)\n    lon2 = math.radians(lon2)\n\n    dlon = lon2 - lon1\n    dlat = lat2 - lat1\n\n    a = math.sin(dlat / 2)**2 + math.cos(lat1) * math.cos(lat2) * math.sin(dlon / 2)**2\n    c = 2 * math.atan2(math.sqrt(a), math.sqrt(1 - a))\n\n    return R * c\n\n# Tests\ndef distance_test():\n    assert distance(32.88, -117.23, 32.89, -117.23) == 0.0008905208686995176\n    assert distance(0, 0, 32.88, -117.23) == 1976.4010760018335\n    assert distance(32.88, -117.23, 0, 0) == 1976.4010760018335\n\nif __name__ == '__main__':\n    distance_test()"
    },
    {
      "rank": 7,
      "score": 10.0,
      "candidate": "def distance(lat1, long1, lat2, long2):\n    \"\"\"\n    Calculate distance using latitude and longitude.\n\n    Args:\n        lat1 (float): First latitude.\n        long1 (float): First longitude.\n        lat2 (float): Second latitude.\n        long2 (float): Second longitude.\n\n    Returns:\n        float: Distance between two points.\n    \"\"\"\n    from math import sin, cos, sqrt, atan2, radians\n\n    # approximate radius of earth in km\n    R = 6373.0\n\n    lat1 = radians(lat1)\n    lon1 = radians(long1)\n    lat2 = radians(lat2)\n    lon2 = radians(long2)\n\n    dlon = lon2 - lon1\n    dlat = lat2 - lat1\n\n    a = sin(dlat / 2) ** 2 + cos(lat1) * cos(lat2) * sin(dlon / 2) ** 2\n    c = 2 * atan2(sqrt(a), sqrt(1 - a))\n\n    return R * c\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 8,
      "score": 10.0,
      "candidate": "from math import sin, cos, sqrt, atan2, radians\n\n# def distance(lat1, lon1, lat2, lon2):\n#     # approximate radius of earth in km\n#     R = 6373.0\n#     lat1 = radians(lat1)\n#     lon1 = radians(lon1)\n#     lat2 = radians(lat2)\n#     lon2 = radians(lon2)\n\n#     dlon = lon2 - lon1\n#     dlat = lat2 - lat1\n\n#     a = sin(dlat / 2) ** 2 + cos(lat1) * cos(lat2) * sin(dlon / 2) ** 2\n#     c = 2 * atan2(sqrt(a), sqrt(1 - a))\n\n#     return R * c\n\n\ndef distance(lat1, lon1, lat2, lon2):\n    # approximate radius of earth in km\n    R = 6373.0\n\n    lat1 = radians(lat1)\n    lon1 = radians(lon1)\n    lat2 = radians(lat2)\n    lon2 = radians(lon2)\n\n    dlat = lat2 - lat1\n    dlon = lon2 - lon1\n\n    a = sin(dlat / 2) ** 2 + cos(lat1) * cos(lat2) * sin(dlon / 2) ** 2\n    c = 2 * atan2(sqrt(a), sqrt(1 - a))\n\n    return R * c\n\n\nif __name__ == \"__main__\":\n    print(distance(32.8794, 117.2354, 32.8803, 117.2298))"
    },
    {
      "rank": 9,
      "score": 10.0,
      "candidate": "import math\n\n\ndef distance(lat1, long1, lat2, long2):\n    \"\"\"\n    Calculate distance between two points on Earth using latitude and longitude.\n    \"\"\"\n    # Convert to radians\n    lat1, long1, lat2, long2 = map(math.radians, [lat1, long1, lat2, long2])\n\n    # Calculate distance\n    dist = math.acos(math.sin(lat1) * math.sin(lat2) + math.cos(lat1) * math.cos(lat2) * math.cos(long2 - long1)) * 6371\n\n    return dist"
    },
    {
      "rank": 10,
      "score": 10.0,
      "candidate": "from math import sin, cos, sqrt, atan2, radians\n\n\ndef distance(lat1, lon1, lat2, lon2):\n    # approximate radius of earth in km\n    R = 6373.0\n\n    lat1 = radians(lat1)\n    lon1 = radians(lon1)\n    lat2 = radians(lat2)\n    lon2 = radians(lon2)\n\n    dlon = lon2 - lon1\n    dlat = lat2 - lat1\n\n    a = sin(dlat / 2) ** 2 + cos(lat1) * cos(lat2) * sin(dlon / 2) ** 2\n    c = 2 * atan2(sqrt(a), sqrt(1 - a))\n\n    return R * c\n\n\nif __name__ == \"__main__\":\n    print(distance(43.6532, -79.3832, 43.6532, -79.3832))"
    },
    {
      "rank": 11,
      "score": 10.0,
      "candidate": "import math\n\n\ndef distance(p1, p2):\n    \"\"\"\n    Calculates distance between two points using latitude and longitude.\n\n    Args:\n        p1: Point 1 (latitude, longitude)\n        p2: Point 2 (latitude, longitude)\n\n    Returns:\n        The distance between the two points.\n    \"\"\"\n    lat1, long1 = p1\n    lat2, long2 = p2\n\n    earth_radius = 6371\n\n    d_lat = math.radians(lat2 - lat1)\n    d_long = math.radians(long2 - long1)\n\n    a = math.sin(d_lat / 2) * math.sin(d_lat / 2) + math.cos(\n        math.radians(lat1)\n    ) * math.cos(math.radians(lat2)) * math.sin(d_long / 2) * math.sin(d_long / 2)\n    c = 2 * math.atan2(math.sqrt(a), math.sqrt(1 - a))\n\n    return earth_radius * c"
    },
    {
      "rank": 12,
      "score": 10.0,
      "candidate": "import math\n\ndef calculate_distance(lat1, long1, lat2, long2):\n    R = 6373.0\n\n    lat1 = math.radians(lat1)\n    lon1 = math.radians(long1)\n    lat2 = math.radians(lat2)\n    lon2 = math.radians(long2)\n\n    dlon = lon2 - lon1\n    dlat = lat2 - lat1\n\n    a = math.sin(dlat / 2)**2 + math.cos(lat1) * math.cos(lat2) * math.sin(dlon / 2)**2\n    c = 2 * math.atan2(math.sqrt(a), math.sqrt(1 - a))\n\n    distance = R * c\n    return distance\n\n\nif __name__ == '__main__':\n    lat1 = float(input(\"Enter latitude of point 1: \"))\n    long1 = float(input(\"Enter longitude of point 1: \"))\n    lat2 = float(input(\"Enter latitude of point 2: \"))\n    long2 = float(input(\"Enter longitude of point 2: \"))\n    print(f\"Distance between two points is {calculate_distance(lat1, long1, lat2, long2)}\")"
    },
    {
      "rank": 13,
      "score": 10.0,
      "candidate": "def distance(lat1, long1, lat2, long2):\n    \"\"\"\n    Calculates distance between two points using latitude and longitude.\n\n    Parameters\n    ----------\n    lat1 : float\n        Latitude of first point\n    long1 : float\n        Longitude of first point\n    lat2 : float\n        Latitude of second point\n    long2 : float\n        Longitude of second point\n\n    Returns\n    -------\n    float\n        Distance between two points\n\n    Examples\n    --------\n    >>> distance(12.97, 77.59, 12.9, 77.6)\n    3.16\n    \"\"\"\n    from math import sin, cos, sqrt, atan2, radians\n\n    # approximate radius of earth in km\n    R = 6373.0\n\n    lat1 = radians(lat1)\n    lon1 = radians(long1)\n    lat2 = radians(lat2)\n    lon2 = radians(long2)\n\n    dlon = lon2 - lon1\n    dlat = lat2 - lat1\n\n    a = sin(dlat / 2) ** 2 + cos(lat1) * cos(lat2) * sin(dlon / 2) ** 2\n\n    c = 2 * atan2(sqrt(a), sqrt(1 - a))\n\n    return R * c\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 14,
      "score": 10.0,
      "candidate": "import math\n\ndef distance(lat1, lon1, lat2, lon2):\n    lat1 = math.radians(lat1)\n    lon1 = math.radians(lon1)\n    lat2 = math.radians(lat2)\n    lon2 = math.radians(lon2)\n\n    dlon = lon2 - lon1\n    dlat = lat2 - lat1\n    a = math.sin(dlat / 2)**2 + math.cos(lat1) * math.cos(lat2) * math.sin(dlon / 2)**2\n    c = 2 * math.atan2(math.sqrt(a), math.sqrt(1 - a))\n    return 6371 * c"
    },
    {
      "rank": 15,
      "score": 10.0,
      "candidate": "from math import sin, cos, sqrt, atan2, radians\n\n\ndef haversine(lat1, lon1, lat2, lon2):\n    \"\"\"\n    Calculate the great circle distance between two points\n    on the earth (specified in decimal degrees)\n    \"\"\"\n    # convert decimal degrees to radians\n    lon1, lat1, lon2, lat2 = map(radians, [lon1, lat1, lon2, lat2])\n\n    # haversine formula\n    dlon = lon2 - lon1\n    dlat = lat2 - lat1\n    a = sin(dlat / 2) ** 2 + cos(lat1) * cos(lat2) * sin(dlon / 2) ** 2\n    c = 2 * atan2(sqrt(a), sqrt(1 - a))\n    r = 6371  # Radius of earth in kilometers. Use 3956 for miles\n    return c * r\n\n\nif __name__ == '__main__':\n    print(haversine(12.97, 77.59, 12.9, 77.48))"
    },
    {
      "rank": 16,
      "score": 10.0,
      "candidate": "import math\n\ndef distance(lat1, long1, lat2, long2):\n    \"\"\"\n    Calculate distance between two points on earth.\n    \"\"\"\n    # Convert to radians.\n    lat1 = math.radians(lat1)\n    long1 = math.radians(long1)\n    lat2 = math.radians(lat2)\n    long2 = math.radians(long2)\n\n    # Calculate distance.\n    delta_lat = lat2 - lat1\n    delta_long = long2 - long1\n    return 6371.0 * math.sqrt(delta_lat**2 + math.cos(lat1) * math.cos(lat2) * delta_long**2)\n\ndef test_distance():\n    \"\"\"\n    Test distance function.\n    \"\"\"\n    print(\"Testing distance calculation.\")\n    assert distance(0, 0, 0, 1) == 111319.49079327358\n    print(\"Tests passed.\")\n\nif __name__ == \"__main__\":\n    test_distance()"
    },
    {
      "rank": 17,
      "score": 10.0,
      "candidate": "def distance(lat1, lon1, lat2, lon2):\n    \"\"\"\n    :param lat1: latitude of the first point\n    :param lon1: longitude of the first point\n    :param lat2: latitude of the second point\n    :param lon2: longitude of the second point\n    :return: distance between the two points\n\n    >>> distance(30, 40, 60, 80)\n    7075.165040466181\n    \"\"\"\n    from math import sin, cos, sqrt, atan2, radians\n    # approximate radius of earth in km\n    R = 6373.0\n\n    lat1 = radians(lat1)\n    lon1 = radians(lon1)\n    lat2 = radians(lat2)\n    lon2 = radians(lon2)\n\n    dlon = lon2 - lon1\n    dlat = lat2 - lat1\n\n    a = sin(dlat / 2) ** 2 + cos(lat1) * cos(lat2) * sin(dlon / 2) ** 2\n    c = 2 * atan2(sqrt(a), sqrt(1 - a))\n\n    distance_in_km = R * c\n    return distance_in_km\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 18,
      "score": 10.0,
      "candidate": "import math\n\ndef distance(lat1, lon1, lat2, lon2):\n    \"\"\"\n    Distance between two points.\n    \"\"\"\n    # Convert latitude and longitude to\n    # spherical coordinates in radians.\n    degrees_to_radians = math.pi / 180.0\n\n    # phi = 90 - latitude\n    phi1 = (90.0 - lat1) * degrees_to_radians\n    phi2 = (90.0 - lat2) * degrees_to_radians\n\n    # theta = longitude\n    theta1 = lon1 * degrees_to_radians\n    theta2 = lon2 * degrees_to_radians\n\n    # Compute spherical distance from spherical coordinates.\n\n    # For two locations in spherical coordinates\n    # (1, theta, phi) and (1, theta', phi')\n    # cosine( arc length ) =\n    #    sin phi sin phi' cos(theta-theta') + cos phi cos phi'\n    # distance = rho * arc length\n\n    cos = (math.sin(phi1) * math.sin(phi2) * math.cos(theta1 - theta2) +\n           math.cos(phi1) * math.cos(phi2))\n    arc = math.acos(cos)\n\n    # Remember to multiply arc by the radius of the earth\n    # in your favorite set of units to get length.\n    return arc * 3958.7613\n\nif __name__ == '__main__':\n    print distance(45, -73, 48, -118)"
    },
    {
      "rank": 19,
      "score": 10.0,
      "candidate": "from math import sin, cos, sqrt, atan2, radians\n\ndef calculate_distance(p1, p2):\n    \"\"\"\n    Takes two points (lat1, lon1) and (lat2, lon2) and returns distance in km between them.\n    \"\"\"\n    lat1, lon1 = p1\n    lat2, lon2 = p2\n    R = 6371 # Radius of the earth in km\n    dlat = radians(lat2 - lat1)\n    dlon = radians(lon2 - lon1)\n    a = sin(dlat / 2) ** 2 + cos(lat1) * cos(lat2) * sin(dlon / 2) ** 2\n    c = 2 * atan2(sqrt(a), sqrt(1 - a))\n    return R * c"
    },
    {
      "rank": 20,
      "score": 10.0,
      "candidate": "import math\n\ndef distance(lat1, lon1, lat2, lon2):\n    # convert to radians\n    lat1 = math.radians(lat1)\n    lon1 = math.radians(lon1)\n    lat2 = math.radians(lat2)\n    lon2 = math.radians(lon2)\n\n    # calculate haversine\n    R = 6371  # radius of earth in km\n    dlon = lon2 - lon1\n    dlat = lat2 - lat1\n    a = math.sin(dlat / 2)**2 + math.cos(lat1) * math.cos(lat2) * math.sin(dlon / 2)**2\n    c = 2 * math.atan2(math.sqrt(a), math.sqrt(1 - a))\n\n    # distance in km\n    return R * c\n\nprint(distance(41.49008, -71.312796, 41.499498, -81.695391))"
    },
    {
      "rank": 21,
      "score": 10.0,
      "candidate": "import math\n\n\ndef distance(lat1, lon1, lat2, lon2):\n    r = 6371e3\n    phi1 = math.radians(lat1)\n    phi2 = math.radians(lat2)\n    delta_phi = math.radians(lat2 - lat1)\n    delta_lambda = math.radians(lon2 - lon1)\n    a = math.sin(delta_phi / 2) ** 2 + math.cos(phi1) * math.cos(phi2) * math.sin(delta_lambda / 2) ** 2\n    return 2 * r * math.asin(math.sqrt(a))"
    },
    {
      "rank": 22,
      "score": 10.0,
      "candidate": "import math\n\n\n# Using haversine formula\ndef distance_calculation(lat1, lon1, lat2, lon2):\n    # Radius of earth in metres\n    R = 6371e3\n\n    # Converting from degrees to radians\n    lat1 = math.radians(lat1)\n    lon1 = math.radians(lon1)\n    lat2 = math.radians(lat2)\n    lon2 = math.radians(lon2)\n\n    dlon = lon2 - lon1\n    dlat = lat2 - lat1\n\n    a = math.sin(dlat / 2)**2 + math.cos(lat1) * math.cos(lat2) * math.sin(dlon / 2)**2\n    c = 2 * math.atan2(math.sqrt(a), math.sqrt(1 - a))\n\n    return R * c\n\n\n# Using distance formula\ndef distance_calculation_2(lat1, lon1, lat2, lon2):\n    return math.sqrt(((lat2 - lat1)**2) + ((lon2 - lon1)**2))\n\n\nif __name__ == '__main__':\n    lat1 = float(input(\"Enter latitude 1: \"))\n    lon1 = float(input(\"Enter longitude 1: \"))\n    lat2 = float(input(\"Enter latitude 2: \"))\n    lon2 = float(input(\"Enter longitude 2: \"))\n\n    print(f\"Distance using haversine formula: {distance_calculation(lat1, lon1, lat2, lon2)}\")\n    print(f\"Distance using distance formula: {distance_calculation_2(lat1, lon1, lat2, lon2)}\")"
    },
    {
      "rank": 23,
      "score": 10.0,
      "candidate": "import math\n\ndef distance_between_points(x1,y1,x2,y2):\n    # x1,y1,x2,y2 are in decimal degrees\n    # Convert them to radians\n    x1 = math.radians(x1)\n    y1 = math.radians(y1)\n    x2 = math.radians(x2)\n    y2 = math.radians(y2)\n\n    # Calculate distance\n    distance = 6371.01 * math.acos(math.sin(x1) * math.sin(x2) + math.cos(x1) * math.cos(x2) * math.cos(y1-y2))\n    return distance\n\n\n# distance = distance_between_points(50.4547, 30.524, 50.4547, 30.524)\n# print(distance)"
    },
    {
      "rank": 24,
      "score": 10.0,
      "candidate": "import math\n\ndef distance(p1, p2):\n    \"\"\"\n    Input:\n    p1: Point1\n    p2: Point2\n    \"\"\"\n    r = 6371e3\n    lat1, lon1 = p1\n    lat2, lon2 = p2\n    dlat = math.radians(lat2 - lat1)\n    dlon = math.radians(lon2 - lon1)\n    a = math.sin(dlat/2) ** 2 + math.cos(math.radians(lat1)) * math.cos(math.radians(lat2)) * math.sin(dlon/2) ** 2\n    c = 2 * math.atan2(math.sqrt(a), math.sqrt(1-a))\n    return r * c\n\nif __name__ == \"__main__\":\n    print(distance([35.67, 139.78], [35.68, 139.76]))"
    },
    {
      "rank": 25,
      "score": 10.0,
      "candidate": "def distance(lat1, lon1, lat2, lon2):\n    from math import sin, cos, sqrt, atan2, radians\n    # approximate radius of earth in km\n    R = 6373.0\n\n    lat1 = radians(lat1)\n    lon1 = radians(lon1)\n    lat2 = radians(lat2)\n    lon2 = radians(lon2)\n\n    dlon = lon2 - lon1\n    dlat = lat2 - lat1\n\n    a = sin(dlat / 2) ** 2 + cos(lat1) * cos(lat2) * sin(dlon / 2) ** 2\n    c = 2 * atan2(sqrt(a), sqrt(1 - a))\n\n    return R * c\n\n\ndef main():\n    print(\"The distance between (0, 0) and (0, 1) is:\", distance(0, 0, 0, 1))\n    print(\"The distance between (0, 0) and (1, 1) is:\", distance(0, 0, 1, 1))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 26,
      "score": 10.0,
      "candidate": "import math\n\n\ndef distance(lat1, long1, lat2, long2):\n    \"\"\"\n    Calculates distance between two points given their latitude and longitude\n    \"\"\"\n    lat_distance = abs(lat1 - lat2)\n    long_distance = abs(long1 - long2)\n    return round(math.sqrt(lat_distance ** 2 + long_distance ** 2), 2)\n\n\nif __name__ == '__main__':\n    print(distance(30, 40, 30, 40))\n    print(distance(0, 0, 30, 40))\n    print(distance(30, 40, 0, 0))\n    print(distance(0, 0, 0, 0))"
    },
    {
      "rank": 27,
      "score": 10.0,
      "candidate": "from math import sin, cos, sqrt, atan2, radians\n\n\ndef distance(lat1: float, lon1: float, lat2: float, lon2: float) -> float:\n    \"\"\"\n    Calculate distance between two points using latitude and longitude.\n    >>> distance(30.2052, 31.5322, 30.2128, 31.5246)\n    136.6678022230419\n    \"\"\"\n    # convert to radians\n    lat1 = radians(lat1)\n    lon1 = radians(lon1)\n    lat2 = radians(lat2)\n    lon2 = radians(lon2)\n\n    # calculate distance using haversine formula\n    dlon = lon2 - lon1\n    dlat = lat2 - lat1\n\n    a = sin(dlat / 2) ** 2 + cos(lat1) * cos(lat2) * sin(dlon / 2) ** 2\n    c = 2 * atan2(sqrt(a), sqrt(1 - a))\n    return 6371 * c\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 28,
      "score": 9.0,
      "candidate": "import math\n\ndef distance(lat1, lon1, lat2, lon2):\n    radius = 6371 # km\n\n    dlat = math.radians(lat2-lat1)\n    dlon = math.radians(lon2-lon1)\n    a = math.sin(dlat/2) * math.sin(dlat/2) + math.cos(math.radians(lat1)) \\\n        * math.cos(math.radians(lat2)) * math.sin(dlon/2) * math.sin(dlon/2)\n    c = 2 * math.atan2(math.sqrt(a), math.sqrt(1-a))\n\n    return radius * c\n\n\nif __name__ == '__main__':\n    print(distance(20, 77, 21, 78))"
    },
    {
      "rank": 29,
      "score": 8.0,
      "candidate": "from math import radians, cos, sin, asin, sqrt\n\n\ndef distance_between_two_points(lat1: float, long1: float, lat2: float, long2: float) -> float:\n    \"\"\"\n    Calculates the distance between two points using latitude and longitude\n    :param lat1: latitude of the first point\n    :param long1: longitude of the first point\n    :param lat2: latitude of the second point\n    :param long2: longitude of the second point\n    :return: distance between the two points\n    \"\"\"\n    if not isinstance(lat1, float):\n        raise TypeError(\"lat1 must be a float\")\n    if not isinstance(long1, float):\n        raise TypeError(\"long1 must be a float\")\n    if not isinstance(lat2, float):\n        raise TypeError(\"lat2 must be a float\")\n    if not isinstance(long2, float):\n        raise TypeError(\"long2 must be a float\")\n\n    lat1, long1, lat2, long2 = map(radians, [lat1, long1, lat2, long2])\n    return 6371 * (\n        asin(\n            sqrt(\n                (sin((lat1 - lat2) / 2) ** 2) + cos(lat1) * cos(lat2) * (sin((long1 - long2) / 2) ** 2)\n            )\n        )\n    )"
    },
    {
      "rank": 30,
      "score": 8.0,
      "candidate": "import math\n\ndef distance(lat1, lon1, lat2, lon2):\n    # Calculate the difference between the latitudes and longitudes\n    diff_lat = math.radians(lat2 - lat1)\n    diff_lon = math.radians(lon2 - lon1)\n\n    # Calculate the distance\n    a = math.sin(diff_lat / 2) ** 2 + math.cos(math.radians(lat1)) * math.cos(math.radians(lat2)) * math.sin(diff_lon / 2) ** 2\n    c = 2 * math.atan2(math.sqrt(a), math.sqrt(1 - a))\n    distance = 6371 * c\n\n    return distance\n\ndef main():\n    # Take values from user\n    lat1 = float(input(\"Enter latitude of first point: \"))\n    lon1 = float(input(\"Enter longitude of first point: \"))\n    lat2 = float(input(\"Enter latitude of second point: \"))\n    lon2 = float(input(\"Enter longitude of second point: \"))\n\n    # Calculate and print the distance\n    distance = distance(lat1, lon1, lat2, lon2)\n    print(\"Distance between the two points: %.2f km\" %distance)\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 31,
      "score": 8.0,
      "candidate": "def distance(x1, x2, y1, y2):\n    return (((x2-x1)**2 + (y2-y1)**2)**0.5)\n\n\nx1, y1 = map(float, input(\"Enter point 1 (x1, y1): \").split())\nx2, y2 = map(float, input(\"Enter point 2 (x2, y2): \").split())\n\nprint(distance(x1, x2, y1, y2))"
    },
    {
      "rank": 32,
      "score": 8.0,
      "candidate": "import math\n\n\ndef haversine(lat1: float, lon1: float, lat2: float, lon2: float) -> float:\n    \"\"\"Calculate distance between two points.\n\n    Args:\n        lat1 (float): first point latitude\n        lon1 (float): first point longitude\n        lat2 (float): second point latitude\n        lon2 (float): second point longitude\n\n    Returns:\n        float: distance between two points\n    \"\"\"\n    R = 6371  # Radius of the earth in km\n    dLat = math.radians(lat2 - lat1)  # deg2rad below\n    dLon = math.radians(lon2 - lon1)\n    a = (\n        math.sin(dLat / 2) ** 2\n        + math.cos(math.radians(lat1))\n        * math.cos(math.radians(lat2))\n        * math.sin(dLon / 2) ** 2\n    )\n    c = 2 * math.atan2(math.sqrt(a), math.sqrt(1 - a))\n    return R * c\n\n\nif __name__ == \"__main__\":\n    print(haversine(52.2296756, 21.0122287, 52.406374, 16.9251681))"
    },
    {
      "rank": 33,
      "score": 8.0,
      "candidate": "def distance(lat1, lon1, lat2, lon2):\n    \"\"\"\n    distance\n    \"\"\"\n    from math import sin, cos, sqrt, atan2, radians\n    # approximate radius of earth in km\n    R = 6373.0\n\n    lat1 = radians(lat1)\n    lon1 = radians(lon1)\n    lat2 = radians(lat2)\n    lon2 = radians(lon2)\n\n    dlon = lon2 - lon1\n    dlat = lat2 - lat1\n\n    a = sin(dlat / 2)**2 + cos(lat1) * cos(lat2) * sin(dlon / 2)**2\n    c = 2 * atan2(sqrt(a), sqrt(1 - a))\n\n    return R * c"
    },
    {
      "rank": 34,
      "score": 8.0,
      "candidate": "from math import sin, cos, sqrt, atan2, radians\n\n\ndef haversine(point1, point2):\n    \"\"\"\n    Calculate the great circle distance between two points\n    on the earth (specified in decimal degrees)\n    \"\"\"\n    # convert decimal degrees to radians\n    lon1, lat1, lon2, lat2 = map(radians, [point1[0], point1[1], point2[0], point2[1]])\n\n    # haversine formula\n    dlon = lon2 - lon1\n    dlat = lat2 - lat1\n    a = sin(dlat / 2) ** 2 + cos(lat1) * cos(lat2) * sin(dlon / 2) ** 2\n    c = 2 * atan2(sqrt(a), sqrt(1 - a))\n    return 6371 * c"
    },
    {
      "rank": 35,
      "score": 8.0,
      "candidate": "def distance(lat1, lon1, lat2, lon2):\n    from math import sin, cos, sqrt, atan2, radians\n\n    # The math module contains a function named radians() \n    # that converts from degrees to radians.\n\n    # To find the distance between two points on the Earth\u2019s \n    # surface, you need the radian measure of the points\u2019 \n    # latitude and longitude. The radian measure of the latitude \n    # of a place is equal to the sine of its arc-minutes \n    # divided by 60. The radian measure of the longitude of a \n    # place is equal to the sine of its arc-minutes divided by \n    # 60 times the cosine of the latitude of the place.\n\n    # To convert degrees to radians, use the following formula:\n    # radians = degrees * pi / 180\n\n    # To find the distance between two points, you need their \n    # latitude and longitude. You can calculate the distance \n    # between two points by using the distance formula in \n    # spherical trigonometry. \n\n    # The distance formula in spherical trigonometry is:\n    # distance = arc sin (h / r)\n\n    # where:\n\n    # h is the height above the surface of the earth\n    # r is the radius of the earth\n\n    # The height is the difference between the two points\u2019 \n    # latitudes multiplied by the radius of the earth. The \n    # radius of the earth is 3,963 miles or 6,378 kilometers.\n\n    # The distance is the arc sin of the height divided by the \n    # radius.\n\n    # The formula for the arc sin is as follows:\n    # arc sin x = \u221a(1 - x^2)\n\n    # The latitude and longitude of the two points must be in \n    # decimal degrees, not in degrees and minutes. \n\n    # The formula to convert degrees and minutes into decimal \n    # degrees is as follows:\n    # degrees + minutes / 60\n\n    # The formula to convert degrees into radians is as follows:\n    # radians"
    },
    {
      "rank": 36,
      "score": 8.0,
      "candidate": "import math\n\ndef distance(point1, point2):\n    \"\"\"\n    >>> distance((0, 0), (0, 0))\n    0.0\n    >>> distance((0, 0), (1, 1))\n    1.4142135623730951\n    >>> distance((0, 1), (1, 1))\n    1.0\n    >>> distance((0, 1), (1, 2))\n    1.0\n    \"\"\"\n    x1, y1 = point1\n    x2, y2 = point2\n    return math.sqrt((x2 - x1) ** 2 + (y2 - y1) ** 2)\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 37,
      "score": 8.0,
      "candidate": "import math\n\n\ndef distance(lat1, lon1, lat2, lon2):\n    r = 6371e3  # radius of the Earth in meters\n\n    lat1 = math.radians(lat1)\n    lon1 = math.radians(lon1)\n    lat2 = math.radians(lat2)\n    lon2 = math.radians(lon2)\n\n    dlon = lon2 - lon1\n    dlat = lat2 - lat1\n\n    a = (\n        math.sin(dlat / 2) ** 2\n        + math.cos(lat1) * math.cos(lat2) * math.sin(dlon / 2) ** 2\n    )\n    c = 2 * math.atan2(math.sqrt(a), math.sqrt(1 - a))\n    d = r * c\n\n    return d"
    },
    {
      "rank": 38,
      "score": 8.0,
      "candidate": "import math\n\n\n# Source: https://www.geeksforgeeks.org/program-distance-two-points-earth/\ndef distance_on_earth(lat1, lon1, lat2, lon2):\n    \"\"\"\n    Calculate distance between two points on earth in meters.\n    \"\"\"\n    R = 6371000\n    rlat1 = math.radians(lat1)\n    rlat2 = math.radians(lat2)\n    rlon1 = math.radians(lon1)\n    rlon2 = math.radians(lon2)\n    dlat = rlat2 - rlat1\n    dlon = rlon2 - rlon1\n    a = (math.sin(dlat / 2) ** 2) + (math.cos(rlat1) * math.cos(rlat2) * (math.sin(dlon / 2) ** 2))\n    c = 2 * math.atan2(math.sqrt(a), math.sqrt(1 - a))\n    return R * c"
    },
    {
      "rank": 39,
      "score": 8.0,
      "candidate": "from math import sin, cos, sqrt, atan2, radians\n\n\ndef haversine(lat1, lon1, lat2, lon2):\n    # convert decimal degrees to radians\n    lon1, lat1, lon2, lat2 = map(radians, [lon1, lat1, lon2, lat2])\n    # haversine formula\n    dlon = lon2 - lon1\n    dlat = lat2 - lat1\n    a = sin(dlat / 2) ** 2 + cos(lat1) * cos(lat2) * sin(dlon / 2) ** 2\n    c = 2 * atan2(sqrt(a), sqrt(1 - a))\n    # Radius of earth in kilometers is 6371\n    km = 6371 * c\n    return km"
    },
    {
      "rank": 40,
      "score": 8.0,
      "candidate": "def distance_between_points(point1, point2):\n    \"\"\"\n    :param point1: tuple (latitude, longitude)\n    :param point2: tuple (latitude, longitude)\n    :return: float\n    \"\"\"\n    # TODO: implement\n    pass"
    },
    {
      "rank": 41,
      "score": 8.0,
      "candidate": "import math\n\n\ndef distance_between_points(lat1, lon1, lat2, lon2):\n    \"\"\"\n    Calculate distance between two points using latitude and longitude.\n    \"\"\"\n\n    lat1 = math.radians(lat1)\n    lon1 = math.radians(lon1)\n    lat2 = math.radians(lat2)\n    lon2 = math.radians(lon2)\n\n    dlon = lon2 - lon1\n    dlat = lat2 - lat1\n\n    a = math.sin(dlat / 2) ** 2 + math.cos(lat1) * math.cos(lat2) * math.sin(dlon / 2) ** 2\n    c = 2 * math.atan2(math.sqrt(a), math.sqrt(1 - a))\n\n    return 6371 * c"
    },
    {
      "rank": 42,
      "score": 8.0,
      "candidate": "from math import sin, cos, sqrt, atan2, radians\n\n\ndef distance(latitude1, longitude1, latitude2, longitude2):\n    \"\"\"\n    Calculate distance using latitude and longitude.\n    \"\"\"\n    # approximate radius of earth in km\n    R = 6373.0\n\n    lat1 = radians(latitude1)\n    lon1 = radians(longitude1)\n    lat2 = radians(latitude2)\n    lon2 = radians(longitude2)\n\n    dlon = lon2 - lon1\n    dlat = lat2 - lat1\n\n    a = sin(dlat / 2) ** 2 + cos(lat1) * cos(lat2) * sin(dlon / 2) ** 2\n    c = 2 * atan2(sqrt(a), sqrt(1 - a))\n\n    return R * c"
    },
    {
      "rank": 43,
      "score": 8.0,
      "candidate": "from math import sin, cos, sqrt, atan2, radians\n\ndef distance(lat1, lon1, lat2, lon2):\n    # radius of earth in km\n    R = 6371\n\n    lat1 = radians(lat1)\n    lon1 = radians(lon1)\n    lat2 = radians(lat2)\n    lon2 = radians(lon2)\n\n    dlon = lon2 - lon1\n    dlat = lat2 - lat1\n\n    a = sin(dlat / 2)**2 + cos(lat1) * cos(lat2) * sin(dlon / 2)**2\n    c = 2 * atan2(sqrt(a), sqrt(1 - a))\n\n    return R * c"
    },
    {
      "rank": 44,
      "score": 8.0,
      "candidate": "import math\n\n\ndef distance(lat1, lon1, lat2, lon2):\n    r = 6371e3\n    theta1 = math.radians(lat1)\n    theta2 = math.radians(lat2)\n    delta_theta = math.radians(lat2 - lat1)\n    delta_lambda = math.radians(lon2 - lon1)\n    a = (math.sin(delta_theta / 2) ** 2) + \\\n        math.cos(theta1) * math.cos(theta2) * \\\n        (math.sin(delta_lambda / 2) ** 2)\n    c = 2 * math.atan2(math.sqrt(a), math.sqrt(1 - a))\n    return r * c\n\n\nif __name__ == '__main__':\n    print(distance(5, 0, 5, 10))"
    },
    {
      "rank": 45,
      "score": 8.0,
      "candidate": "from math import sin, cos, sqrt, atan2, radians\n\n\ndef distance(latitude1, longitude1, latitude2, longitude2):\n    # The math module contains a function named\n    # radians which converts from degrees to radians.\n    # To find the distance between two points you will\n    # need the radius of the earth\n\n    # Earth Radius in km\n    R = 6373.0\n\n    # convert decimal degrees to radians\n    lat1 = radians(latitude1)\n    lon1 = radians(longitude1)\n    lat2 = radians(latitude2)\n    lon2 = radians(longitude2)\n\n    dlon = lon2 - lon1\n    dlat = lat2 - lat1\n\n    a = sin(dlat / 2)**2 + cos(lat1) * cos(lat2) * sin(dlon / 2)**2\n    c = 2 * atan2(sqrt(a), sqrt(1 - a))\n\n    return R * c"
    },
    {
      "rank": 46,
      "score": 8.0,
      "candidate": "import math\nfrom math import sin, cos, sqrt, atan2, radians\n\ndef haversine(lon1, lat1, lon2, lat2):\n    \"\"\"\n    Calculate the great circle distance between two points \n    on the earth (specified in decimal degrees)\n    \"\"\"\n    # convert decimal degrees to radians \n    lon1, lat1, lon2, lat2 = map(radians, [lon1, lat1, lon2, lat2])\n\n    # haversine formula \n    dlon = lon2 - lon1 \n    dlat = lat2 - lat1 \n    a = sin(dlat/2)**2 + cos(lat1) * cos(lat2) * sin(dlon/2)**2\n    c = 2 * atan2(sqrt(a), sqrt(1 - a)) \n    r = 6371 # Radius of earth in kilometers. Use 3956 for miles\n    return c * r\n\ndef distance_between_points(lat1, lon1, lat2, lon2):\n    \"\"\"\n    Calculate the distance between two points on Earth\n    \"\"\"\n    earth_radius = 6371\n\n    lat1, lon1, lat2, lon2 = map(radians, [lat1, lon1, lat2, lon2])\n\n    a = (sin(lat2 - lat1) / 2) ** 2 + cos(lat1) * cos(lat2) * (sin(lon2 - lon1) / 2) ** 2\n    c = 2 * atan2(sqrt(a), sqrt(1 - a))\n\n    distance = earth_radius * c\n\n    return distance\n\ndef distance_between_points_2(lat1, lon1, lat2, lon2):\n    \"\"\"\n    Calculate the distance between two points on Earth\n    \"\"\"\n    earth_radius = 6371\n    lat1, lon1, lat2, lon2 = map(radians, [lat1, lon1, lat2, lon2])\n    dlon = lon2 - lon1\n    dlat = lat2 - lat1\n    a = sin(dlat"
    },
    {
      "rank": 47,
      "score": 8.0,
      "candidate": "import math\n\n\ndef distance(lat1, long1, lat2, long2):\n    R = 6371\n    dLat = math.radians(lat2 - lat1)\n    dLon = math.radians(long2 - long1)\n    lat1 = math.radians(lat1)\n    lat2 = math.radians(lat2)\n\n    a = (math.sin(dLat / 2) * math.sin(dLat / 2) + math.sin(dLon / 2) *\n         math.sin(dLon / 2) * math.cos(lat1) * math.cos(lat2))\n    c = 2 * math.atan2(math.sqrt(a), math.sqrt(1 - a))\n    return R * c\n\n\ndef main():\n    print(distance(30, 45, 50, 60))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 48,
      "score": 8.0,
      "candidate": "from math import sin, cos, sqrt, atan2, radians\n\n\ndef haversine(lat1, lon1, lat2, lon2):\n    \"\"\"\n    Calculate distance between two points\n    :param lat1: latitude of first point\n    :param lon1: longitude of first point\n    :param lat2: latitude of second point\n    :param lon2: longitude of second point\n    :return: distance between two points\n    \"\"\"\n    R = 6371\n    dLat = radians(lat2 - lat1)\n    dLon = radians(lon2 - lon1)\n    lat1 = radians(lat1)\n    lat2 = radians(lat2)\n\n    a = sin(dLat / 2) ** 2 + cos(lat1) * cos(lat2) * sin(dLon / 2) ** 2\n    c = 2 * atan2(sqrt(a), sqrt(1 - a))\n    return R * c"
    },
    {
      "rank": 49,
      "score": 8.0,
      "candidate": "from math import sin, cos, sqrt, atan2, radians\n\ndef distance_calculator(lat1, lon1, lat2, lon2):\n    \"\"\"\n    Distance between two points in km\n    :param lat1:\n    :param lon1:\n    :param lat2:\n    :param lon2:\n    :return:\n    \"\"\"\n    # Convert decimal degrees to radians\n    lon1, lat1, lon2, lat2 = map(radians, [lon1, lat1, lon2, lat2])\n\n    # Haversine formula\n    dlon = lon2 - lon1\n    dlat = lat2 - lat1\n    a = sin(dlat/2)**2 + cos(lat1) * cos(lat2) * sin(dlon/2)**2\n    c = 2 * atan2(sqrt(a), sqrt(1 - a))\n    return 6371 * c\n\nprint(distance_calculator(52.5, 13.4, 52.4, 13.3))"
    },
    {
      "rank": 50,
      "score": 8.0,
      "candidate": "import math\n\n\ndef distance(lat1, long1, lat2, long2):\n    \"\"\"\n    Calculates distance between two points in meters.\n    :param lat1: first latitude\n    :param long1: first longitude\n    :param lat2: second latitude\n    :param long2: second longitude\n    :return: distance in meters\n    \"\"\"\n    R = 6373000\n\n    lat1 = math.radians(lat1)\n    long1 = math.radians(long1)\n    lat2 = math.radians(lat2)\n    long2 = math.radians(long2)\n\n    dlat = lat2 - lat1\n    dlong = long2 - long1\n\n    a = math.sin(dlat / 2) ** 2 + math.cos(lat1) * math.cos(lat2) * math.sin(dlong / 2) ** 2\n    c = 2 * math.atan2(math.sqrt(a), math.sqrt(1 - a))\n\n    return R * c\n\n\nif __name__ == '__main__':\n    print(distance(39.982710, 32.871990, 39.936170, 32.848040))"
    },
    {
      "rank": 51,
      "score": 8.0,
      "candidate": "import math\n\ndef distance(lat1, long1, lat2, long2):\n    earth_radius = 6371\n    d_lat = math.radians(lat2 - lat1)\n    d_long = math.radians(long2 - long1)\n    a = math.sin(d_lat / 2) * math.sin(d_lat / 2) + math.cos(math.radians(lat1)) \\\n        * math.cos(math.radians(lat2)) * math.sin(d_long / 2) * math.sin(d_long / 2)\n    c = 2 * math.atan2(math.sqrt(a), math.sqrt(1 - a))\n    d = earth_radius * c\n    return d"
    },
    {
      "rank": 52,
      "score": 8.0,
      "candidate": "from math import sin, cos, sqrt, atan2, radians\n\ndef distance_between_points(point1, point2):\n    # Convert to radians\n    lat1, lon1 = map(radians, point1)\n    lat2, lon2 = map(radians, point2)\n\n    # Haversine formula\n    return 2 * asin(\n        sqrt(\n            sin((lat2 - lat1) / 2) ** 2 +\n            cos(lat1) * cos(lat2) * sin((lon2 - lon1) / 2) ** 2\n        )\n    ) * 6371"
    },
    {
      "rank": 53,
      "score": 8.0,
      "candidate": "def distance(lat1, lon1, lat2, lon2):\n    from math import sin, cos, sqrt, atan2, radians\n    # approximate radius of earth in km\n    R = 6373.0\n\n    lat1 = radians(lat1)\n    lon1 = radians(lon1)\n    lat2 = radians(lat2)\n    lon2 = radians(lon2)\n\n    dlon = lon2 - lon1\n    dlat = lat2 - lat1\n\n    a = sin(dlat / 2)**2 + cos(lat1) * cos(lat2) * sin(dlon / 2)**2\n    c = 2 * atan2(sqrt(a), sqrt(1 - a))\n\n    distance = R * c\n    return distance\n\n\n# Tests\ndef test(lat1, lon1, lat2, lon2):\n    distance_test = distance(lat1, lon1, lat2, lon2)\n    print(f\"Distance between {(lat1, lon1)} and {(lat2, lon2)} is {distance_test}km\")\n\n\ntest(32.932598, -96.805524, 29.413810, -98.492741)\ntest(51.5074, -0.1275, 51.5077, -0.1277)"
    },
    {
      "rank": 54,
      "score": 8.0,
      "candidate": "import math\n\n\ndef distance(lat1, lon1, lat2, lon2):\n    R = 6371  # radius of the earth in km\n    lat1 = math.radians(lat1)\n    lon1 = math.radians(lon1)\n    lat2 = math.radians(lat2)\n    lon2 = math.radians(lon2)\n\n    dlon = lon2 - lon1\n    dlat = lat2 - lat1\n\n    a = math.sin(dlat / 2)**2 + math.cos(lat1) * math.cos(lat2) * math.sin(dlon / 2)**2\n    c = 2 * math.atan2(math.sqrt(a), math.sqrt(1 - a))\n\n    return R * c\n\n\nif __name__ == '__main__':\n    lat1 = float(input('Enter latitude of first point: '))\n    lon1 = float(input('Enter longitude of first point: '))\n    lat2 = float(input('Enter latitude of second point: '))\n    lon2 = float(input('Enter longitude of second point: '))\n\n    print(f'Distance between two points is {distance(lat1, lon1, lat2, lon2)} km.')"
    },
    {
      "rank": 55,
      "score": 8.0,
      "candidate": "import math\nfrom math import sin, cos, sqrt, atan2, radians\n\n\nclass Point:\n    def __init__(self, lat, lon):\n        self.lat = lat\n        self.lon = lon\n\n    def distance_to(self, other):\n        R = 6371  # Radius of the earth in km\n        dlat = radians(other.lat - self.lat)\n        dlon = radians(other.lon - self.lon)\n        a = sin(dlat / 2) ** 2 + cos(radians(self.lat)) * cos(radians(other.lat)) * sin(dlon / 2) ** 2\n        c = 2 * atan2(sqrt(a), sqrt(1 - a))\n        return R * c\n\n\npoint1 = Point(10, 20)\npoint2 = Point(5, 10)\nprint(point1.distance_to(point2))"
    },
    {
      "rank": 56,
      "score": 8.0,
      "candidate": "import math\n\n\ndef distance(lat1, long1, lat2, long2):\n    \"\"\"\n    Calculate distance between two points using latitude and longitude.\n\n    :param lat1: latitude of first point\n    :param long1: longitude of first point\n    :param lat2: latitude of second point\n    :param long2: longitude of second point\n    :return: distance in kilometers\n    \"\"\"\n    lat1, long1, lat2, long2 = map(math.radians, [lat1, long1, lat2, long2])\n    return math.acos(\n        math.sin(lat1) * math.sin(lat2)\n        + math.cos(lat1) * math.cos(lat2) * math.cos(long1 - long2)\n    ) * 6371\n\n\nif __name__ == \"__main__\":\n    print(distance(35, 139, 35.5, 139.7))"
    },
    {
      "rank": 57,
      "score": 8.0,
      "candidate": "import math\n\ndef distance(lat1, lon1, lat2, lon2):\n    \"\"\"\n    Calculate the distance between two points on earth\n    \"\"\"\n    earth_radius = 6371\n    d_lat = deg2rad(lat2 - lat1)\n    d_lon = deg2rad(lon2 - lon1)\n    a = math.sin(d_lat / 2) ** 2 + math.cos(deg2rad(lat1)) * math.cos(deg2rad(lat2)) * math.sin(d_lon / 2) ** 2\n    c = 2 * math.atan2(math.sqrt(a), math.sqrt(1 - a))\n    return earth_radius * c\n\ndef deg2rad(deg):\n    \"\"\"\n    Convert degrees to radians\n    \"\"\"\n    return deg * (math.pi / 180)"
    },
    {
      "rank": 58,
      "score": 1.0,
      "candidate": "from math import sin, cos, sqrt, atan2, radians\n\n\ndef distance(lat1, lon1, lat2, lon2):\n    \"\"\"\n    Return the distance between two points on Earth.\n    :param lat1:\n    :param lon1:\n    :param lat2:\n    :param lon2:\n    :return:\n    \"\"\"\n    R = 6371  # Radius of the Earth in km\n    dLat = radians(lat2 - lat1)\n    dLon = radians(lon2 - lon1)\n    lat1 = radians(lat1)\n    lat2 = radians(lat2)\n\n    a = sin(dLat / 2) ** 2 + cos(lat1) * cos(lat2) * sin(dLon / 2) ** 2\n    c = 2 * atan2(sqrt(a), sqrt(1 - a))\n\n    return R * c"
    },
    {
      "rank": 59,
      "score": 1.0,
      "candidate": "def dist(p1, p2):\n    import math\n\n    lat1 = p1[0]\n    lat2 = p2[0]\n    lon1 = p1[1]\n    lon2 = p2[1]\n    R = 6371\n    lat1 = math.radians(lat1)\n    lat2 = math.radians(lat2)\n    lon1 = math.radians(lon1)\n    lon2 = math.radians(lon2)\n\n    delta_lat = lat2 - lat1\n    delta_lon = lon2 - lon1\n\n    a = math.sin(delta_lat/2) ** 2 + math.cos(lat1) * math.cos(lat2) * math.sin(delta_lon/2) ** 2\n    c = 2 * math.atan2(math.sqrt(a), math.sqrt(1 - a))\n\n    return R * c\n\n\nif __name__ == '__main__':\n    print(dist((37.32, 55.42), (38.58, 56.01)))"
    },
    {
      "rank": 60,
      "score": 1.0,
      "candidate": "def distance_between_points(x1, y1, x2, y2):\n    \"\"\"\n    Calculates the distance between two points on a 3D Earth.\n    :param x1: first point latitude\n    :param y1: first point longitude\n    :param x2: second point latitude\n    :param y2: second point longitude\n    :return: distance between the two points\n    \"\"\"\n    from math import sin, cos, sqrt, atan2, radians\n    # approximate radius of earth in km\n    R = 6373.0\n\n    lat1 = radians(x1)\n    lon1 = radians(y1)\n    lat2 = radians(x2)\n    lon2 = radians(y2)\n\n    dlon = lon2 - lon1\n    dlat = lat2 - lat1\n\n    a = sin(dlat / 2) ** 2 + cos(lat1) * cos(lat2) * sin(dlon / 2) ** 2\n    c = 2 * atan2(sqrt(a), sqrt(1 - a))\n\n    return R * c"
    },
    {
      "rank": 61,
      "score": 1.0,
      "candidate": "from math import sin, cos, sqrt, atan2, radians\n\n\ndef distance(lat1, lon1, lat2, lon2):\n    # approximate radius of earth in km\n    R = 6373.0\n\n    lat1 = radians(lat1)\n    lon1 = radians(lon1)\n    lat2 = radians(lat2)\n    lon2 = radians(lon2)\n\n    dlon = lon2 - lon1\n    dlat = lat2 - lat1\n\n    a = sin(dlat / 2)**2 + cos(lat1) * cos(lat2) * sin(dlon / 2)**2\n    c = 2 * atan2(sqrt(a), sqrt(1 - a))\n\n    return R * c"
    },
    {
      "rank": 62,
      "score": 1.0,
      "candidate": "def distance(lat1, lon1, lat2, lon2):\n    \"\"\"\n    Calculates the distance between two points on the Earth surface.\n    :param lat1: point 1 latitude\n    :param lon1: point 1 longitude\n    :param lat2: point 2 latitude\n    :param lon2: point 2 longitude\n    :return: distance in meters\n    \"\"\"\n    from math import sin, cos, sqrt, atan2, radians\n    # approximate radius of earth in km\n    R = 6373.0\n\n    lat1 = radians(lat1)\n    lon1 = radians(lon1)\n    lat2 = radians(lat2)\n    lon2 = radians(lon2)\n\n    dlon = lon2 - lon1\n    dlat = lat2 - lat1\n\n    a = sin(dlat / 2) ** 2 + cos(lat1) * cos(lat2) * sin(dlon / 2) ** 2\n    c = 2 * atan2(sqrt(a), sqrt(1 - a))\n\n    return R * c * 1000\n\n\ndef test_distance():\n    assert round(distance(lat1=32.917497, lon1=-96.895602, lat2=32.917497, lon2=-96.895602)) == 0\n    assert round(distance(lat1=32.917497, lon1=-96.895602, lat2=32.927497, lon2=-96.895602)) == 11119\n\n\nif __name__ == '__main__':\n    test_distance()"
    },
    {
      "rank": 63,
      "score": 1.0,
      "candidate": "import math\n\n\n# haversine formula\ndef haversine(lat1, lon1, lat2, lon2):\n    \"\"\"\n    :param lat1: latitude of the first point\n    :param lon1: longitude of the first point\n    :param lat2: latitude of the second point\n    :param lon2: longitude of the second point\n    :return: distance between two points\n    \"\"\"\n    # convert degrees to radians\n    lat1 = math.radians(lat1)\n    lon1 = math.radians(lon1)\n    lat2 = math.radians(lat2)\n    lon2 = math.radians(lon2)\n\n    # difference between latitudes and longitudes\n    delta_lat = lat2 - lat1\n    delta_lon = lon2 - lon1\n\n    # haversine formula\n    a = (math.sin(delta_lat / 2) ** 2) + (math.cos(lat1) * math.cos(lat2) * (math.sin(delta_lon / 2) ** 2))\n    c = 2 * math.asin(math.sqrt(a))\n\n    # convert kilometers to miles\n    miles = 3959 * c\n    return round(miles, 2)\n\n\n# print(haversine(45, -73, 48, -122))\n\n\n# euclidean distance\ndef euclidean_distance(x1, y1, x2, y2):\n    \"\"\"\n    :param x1: x coordinate of the first point\n    :param y1: y coordinate of the first point\n    :param x2: x coordinate of the second point\n    :param y2: y coordinate of the second point\n    :return: distance between two points\n    \"\"\"\n    return round(math.sqrt(((x2 - x1) ** 2) + ((y2 - y1) ** 2)), 2)\n\n\n# print(euclidean_distance(1, 2, 5, 6))\n\n\n# manhattan distance\ndef manhattan_distance(x1, y1, x2, y2):\n    \"\"\"\n    :param x1: x coordinate"
    },
    {
      "rank": 64,
      "score": 1.0,
      "candidate": "def distance_between_two_points(\n        point_1: (float, float),\n        point_2: (float, float)\n) -> float:\n    \"\"\"\n    Calculates the distance between two points using latitude and longitude.\n    :param point_1: first point coordinates as a tuple with latitude and longitude.\n    :param point_2: second point coordinates as a tuple with latitude and longitude.\n    :return: distance between the two points in kilometers.\n    >>> distance_between_two_points((42.1, 1.4), (42.1, 1.4))\n    0.0\n    >>> round(distance_between_two_points((0, 0), (0, 1)), 2)\n    111.3\n    >>> round(distance_between_two_points((0, 0), (1, 0)), 2)\n    110.5\n    >>> round(distance_between_two_points((0, 0), (0, 2)), 2)\n    222.3\n    \"\"\"\n\n    R = 6371\n\n    point_1_lat = point_1[0] * (2 * 3.14159265359 / 360)\n    point_1_long = point_1[1] * (2 * 3.14159265359 / 360)\n    point_2_lat = point_2[0] * (2 * 3.14159265359 / 360)\n    point_2_long = point_2[1] * (2 * 3.14159265359 / 360)\n\n    x = (point_2_lat - point_1_lat) * math.cos((point_1_lat + point_2_lat) / 2)\n    y = point_2_long - point_1_long\n\n    return R * math.sqrt(x * x + y * y)"
    },
    {
      "rank": 65,
      "score": 1.0,
      "candidate": "def distance(lat1, long1, lat2, long2):\n    \"\"\"Calculate distance between two points.\n\n    Args:\n        lat1 (float): latitude of first point\n        long1 (float): longitude of first point\n        lat2 (float): latitude of second point\n        long2 (float): longitude of second point\n\n    Returns:\n        float: distance between two points\n    \"\"\"\n\n    lat1 = float(lat1)\n    long1 = float(long1)\n    lat2 = float(lat2)\n    long2 = float(long2)\n\n    lat1 = lat1 * (math.pi / 180)\n    lat2 = lat2 * (math.pi / 180)\n    long1 = long1 * (math.pi / 180)\n    long2 = long2 * (math.pi / 180)\n\n    x = (long2 - long1) * math.cos((lat1 + lat2) / 2)\n    y = lat2 - lat1\n\n    return 6371 * math.sqrt(x * x + y * y)\n\n\nif __name__ == \"__main__\":\n    import math\n\n    print(distance(35, 105, 30, 110))"
    },
    {
      "rank": 66,
      "score": 1.0,
      "candidate": "def distance_between_points(lat1, lon1, lat2, lon2):\n    # earth radius in miles\n    R = 3956\n\n    # convert to radians\n    lat1 = lat1 * (2 * 3.1415 / 360)\n    lon1 = lon1 * (2 * 3.1415 / 360)\n    lat2 = lat2 * (2 * 3.1415 / 360)\n    lon2 = lon2 * (2 * 3.1415 / 360)\n\n    # calculate distance\n    delta_lat = abs(lat1 - lat2)\n    delta_lon = abs(lon1 - lon2)\n\n    a = pow(sin(delta_lat / 2), 2) + cos(lat1) * cos(lat2) * pow(sin(delta_lon / 2), 2)\n    c = 2 * atan2(sqrt(a), sqrt(1 - a))\n    d = R * c\n\n    return d\n\n\nprint(distance_between_points(40.7127753, -74.0059728, 40.722753, -73.9859728))"
    },
    {
      "rank": 67,
      "score": 1.0,
      "candidate": "import math\nfrom typing import Tuple\n\n\ndef distance_between_points(\n    point_one: Tuple[float, float], point_two: Tuple[float, float]\n) -> float:\n    \"\"\"\n    Calculates the distance between two points on Earth using latitude and longitude\n\n    Args:\n        point_one (Tuple[float, float]): Point one in (latitude, longitude) format\n        point_two (Tuple[float, float]): Point two in (latitude, longitude) format\n\n    Returns:\n        float: Distance between the two points\n    \"\"\"\n    # Convert latitude and longitude to spherical coordinates in radians.\n    x1 = point_one[0] * math.pi / 180\n    y1 = point_one[1] * math.pi / 180\n    x2 = point_two[0] * math.pi / 180\n    y2 = point_two[1] * math.pi / 180\n\n    # Calculate the distance between the two points.\n    return 6371.01 * (\n        math.acos(math.sin(x1) * math.sin(x2) + math.cos(x1) * math.cos(x2) * math.cos(y1 - y2))\n    )"
    },
    {
      "rank": 68,
      "score": 1.0,
      "candidate": "from math import sin, cos, sqrt, atan2, radians\n\n\ndef distance(lat1, lon1, lat2, lon2):\n    # Convert latitude and longitude to\n    # spherical coordinates in radians.\n    lon1, lat1, lon2, lat2 = map(radians, [lon1, lat1, lon2, lat2])\n\n    # Compute the difference in longitude and latitude.\n    dlon = lon2 - lon1\n    dlat = lat2 - lat1\n\n    # Compute the square of the great circle distance.\n    a = sin(dlat / 2) ** 2 + cos(lat1) * cos(lat2) * sin(dlon / 2) ** 2\n    c = 2 * atan2(sqrt(a), sqrt(1 - a))\n\n    # Multiply arc length by the radius of the earth\n    # and return the value in miles.\n    earth_radius_miles = 3956\n    return earth_radius_miles * c\n\n\n# Tests\nassert distance(32.88, -117.23, 32.89, -117.23) == 0\nassert distance(32.88, -117.23, 32.89, -117.00) == 15.64\nassert distance(32.88, -117.23, 32.89, -117.25) == 16.18"
    },
    {
      "rank": 69,
      "score": 1.0,
      "candidate": "def distance(lat1, lon1, lat2, lon2):\n    # approximate radius of earth in km\n    R = 6373.0\n\n    lat1 = math.radians(lat1)\n    lon1 = math.radians(lon1)\n    lat2 = math.radians(lat2)\n    lon2 = math.radians(lon2)\n\n    dlon = lon2 - lon1\n    dlat = lat2 - lat1\n\n    a = math.sin(dlat / 2) ** 2 + math.cos(lat1) * math.cos(lat2) * math.sin(dlon / 2) ** 2\n    c = 2 * math.atan2(math.sqrt(a), math.sqrt(1 - a))\n\n    return R * c"
    },
    {
      "rank": 70,
      "score": 1.0,
      "candidate": "def distance_between_points(lat1, lon1, lat2, lon2):\n    \"\"\"\n    Calculates the distance between two points\n    \"\"\"\n    from math import sin, cos, sqrt, atan2, radians\n\n    # approximate radius of earth in km\n    R = 6373.0\n\n    lat1 = radians(lat1)\n    lon1 = radians(lon1)\n    lat2 = radians(lat2)\n    lon2 = radians(lon2)\n\n    dlon = lon2 - lon1\n    dlat = lat2 - lat1\n\n    a = sin(dlat / 2)**2 + cos(lat1) * cos(lat2) * sin(dlon / 2)**2\n    c = 2 * atan2(sqrt(a), sqrt(1 - a))\n\n    return R * c\n\n\nif __name__ == \"__main__\":\n    print(distance_between_points(52.5, 13.4, 53.5, 13.7))"
    },
    {
      "rank": 71,
      "score": 1.0,
      "candidate": "import math\n\n\ndef distance_between_points(lat1, lon1, lat2, lon2):\n    \"\"\"\n    Calculate distance between two points using latitude and longitude.\n\n    :param lat1: latitude of first point\n    :param lon1: longitude of first point\n    :param lat2: latitude of second point\n    :param lon2: longitude of second point\n    :return: distance between points\n    \"\"\"\n    lat1, lon1, lat2, lon2 = map(math.radians, [lat1, lon1, lat2, lon2])\n    r = 6371\n    x = (lon2 - lon1) * math.cos((lat1 + lat2) / 2)\n    y = lat2 - lat1\n    return r * math.sqrt(x * x + y * y)"
    },
    {
      "rank": 72,
      "score": 1.0,
      "candidate": "import math\n\n\ndef calculate_distance(lat1, lon1, lat2, lon2):\n    earth_radius = 6371\n\n    d_lat = math.radians(lat2 - lat1)\n    d_lon = math.radians(lon2 - lon1)\n\n    a = math.sin(d_lat / 2) * math.sin(d_lat / 2) + \\\n        math.cos(math.radians(lat1)) * math.cos(math.radians(lat2)) * \\\n        math.sin(d_lon / 2) * math.sin(d_lon / 2)\n\n    c = 2 * math.atan2(math.sqrt(a), math.sqrt(1 - a))\n\n    d = earth_radius * c\n\n    return d"
    },
    {
      "rank": 73,
      "score": 1.0,
      "candidate": "def distance_between_points(lat1, long1, lat2, long2):\n    \"\"\"\n    This function calculates distance between two points\n    :param lat1: Latitude of first point\n    :param long1: Longitude of first point\n    :param lat2: Latitude of second point\n    :param long2: Longitude of second point\n    :return: Distance between two points\n    \"\"\"\n\n    from math import sin, cos, sqrt, atan2, radians\n\n    # The math module contains a function named radians() \n    # that converts from degrees to radians.\n\n    # To find the distance between two points in latitude and longitude, \n    # you need the distance in x and y. \n    # The Earth is approximately spherical, \n    # so the distance in x is the same as the distance in y.\n\n    # The distance between two points is calculated as the radius of the Earth \n    # multiplied by the arc length between the two points.\n\n    # The formula for finding the arc length is:\n\n    # arc length = radius * angle\n\n    # The formula for finding the angle is:\n\n    # angle = arctan(y/x)\n\n    # radius of earth in miles\n    earth_radius = 3959\n\n    # convert decimal degrees to radians\n    lat1, long1, lat2, long2 = map(radians, [lat1, long1, lat2, long2])\n\n    # difference between longitudes\n    delta_long = (long2 - long1)\n\n    # difference between latitudes\n    delta_lat = (lat2 - lat1)\n\n    # The Haversine formula\n    a = sin(delta_lat / 2) ** 2 + cos(lat1) * cos(lat2) * sin(delta_long / 2) ** 2\n    c = 2 * atan2(sqrt(a), sqrt(1 - a))\n\n    # Distance in miles\n    distance = earth_radius * c\n    return distance\n\n\nif __name__ == '__main__':\n    print(distance_between_points(40.7128, -74.0"
    },
    {
      "rank": 74,
      "score": 1.0,
      "candidate": "# This is the class of the input node.\nclass Point:\n    def __init__(self, x=0, y=0):\n        self.x = x\n        self.y = y\n\n\ndef distance(p1, p2):\n    return 0.0\n\n\n# Test cases:\np1 = Point(1, 2)\np2 = Point(2, 3)\nprint(distance(p1, p2))"
    },
    {
      "rank": 75,
      "score": 1.0,
      "candidate": "import math\n\n\ndef distance(lat1, lon1, lat2, lon2):\n    \"\"\"\n    Calculate the distance between two points on the earth (specified in decimal degrees)\n    \"\"\"\n    # convert decimal degrees to radians\n    lon1, lat1, lon2, lat2 = map(math.radians, [lon1, lat1, lon2, lat2])\n\n    # haversine formula\n    dlon = lon2 - lon1\n    dlat = lat2 - lat1\n    a = math.sin(dlat/2)**2 + math.cos(lat1) * math.cos(lat2) * math.sin(dlon/2)**2\n    c = 2 * math.asin(math.sqrt(a))\n    r = 6371  # Radius of earth in kilometers. Use 3956 for miles\n    return c * r"
    },
    {
      "rank": 76,
      "score": 1.0,
      "candidate": "import math\n\n\ndef distance_between_two_points(x1, y1, x2, y2):\n    x = (x2 - x1) * math.cos((x1 + x2) / 2)\n    y = y2 - y1\n    return math.sqrt(math.pow(x, 2) + math.pow(y, 2)) * 6371\n\n\n# Tests\nassert distance_between_two_points(0, 0, 0, 1) == 111.319491"
    },
    {
      "rank": 77,
      "score": 1.0,
      "candidate": "import math\nfrom typing import List\n\n\ndef calculate_distance(\n    latitude_1: float, longitude_1: float, latitude_2: float, longitude_2: float\n) -> float:\n    \"\"\"\n    Calculate distance between two points on the Earth surface using latitude and longitude.\n\n    Args:\n        latitude_1: first point latitude\n        longitude_1: first point longitude\n        latitude_2: second point latitude\n        longitude_2: second point longitude\n\n    Returns:\n        distance in km between two points.\n\n    Examples:\n        >>> calculate_distance(47.610686, -122.332455, 47.606498, -122.329265)\n        1.585989586184381\n    \"\"\"\n    R = 6371\n    lat1, lon1, lat2, lon2 = map(math.radians, [latitude_1, longitude_1, latitude_2, longitude_2])\n\n    dlon = lon2 - lon1\n    dlat = lat2 - lat1\n\n    a = math.sin(dlat / 2) ** 2 + math.cos(lat1) * math.cos(lat2) * math.sin(dlon / 2) ** 2\n    c = 2 * math.atan2(math.sqrt(a), math.sqrt(1 - a))\n\n    return R * c\n\n\ndef calculate_distance_list(points: List[List[float]]) -> List[float]:\n    \"\"\"\n    Calculate distance between all points using latitude and longitude.\n\n    Args:\n        points: list of points with latitude and longitude\n\n    Returns:\n        distance in km between all points.\n\n    Examples:\n        >>> calculate_distance_list([[47.610686, -122.332455], [47.606498, -122.329265]])\n        [1.585989586184381, 1.60328"
    },
    {
      "rank": 78,
      "score": 1.0,
      "candidate": "import math\n\n\ndef distance(lat1, long1, lat2, long2):\n    \"\"\"\n    Calculate the distance between two points using latitude and longitude.\n\n    :param lat1: latitude of the first point\n    :type lat1: float\n    :param long1: longitude of the first point\n    :type long1: float\n    :param lat2: latitude of the second point\n    :type lat2: float\n    :param long2: longitude of the second point\n    :type long2: float\n    :return: distance between the two points\n    :rtype: float\n    \"\"\"\n    radius = 6371\n    lat1 = math.radians(lat1)\n    lat2 = math.radians(lat2)\n    long1 = math.radians(long1)\n    long2 = math.radians(long2)\n\n    delta_lat = lat2 - lat1\n    delta_long = long2 - long1\n\n    a = math.sin(delta_lat / 2) ** 2 + math.cos(lat1) * math.cos(lat2) * math.sin(delta_long / 2) ** 2\n    c = 2 * math.atan2(math.sqrt(a), math.sqrt(1 - a))\n\n    distance = radius * c\n\n    return distance"
    },
    {
      "rank": 79,
      "score": 1.0,
      "candidate": "from math import cos, sin, asin, sqrt\n\n\ndef get_distance(lat1, lon1, lat2, lon2):\n    \"\"\"\n    Calculate distance between two points on Earth.\n    :param lat1: First point's latitude.\n    :param lon1: First point's longitude.\n    :param lat2: Second point's latitude.\n    :param lon2: Second point's longitude.\n    :return: Distance between two points in meters.\n    \"\"\"\n    if lat1 == lat2 and lon1 == lon2:\n        return 0.0\n\n    # Haversine formula\n    r = 6372800  # Earth radius in meters\n    phi_1 = lat1 * (2 * pi / 360)\n    phi_2 = lat2 * (2 * pi / 360)\n    delta_phi = (lat2 - lat1) * (2 * pi / 360)\n    delta_lambda = (lon2 - lon1) * (2 * pi / 360)\n\n    a = sin(delta_phi / 2) ** 2 + cos(phi_1) * cos(phi_2) * sin(delta_lambda / 2) ** 2\n    c = 2 * asin(sqrt(a))\n\n    return r * c"
    },
    {
      "rank": 80,
      "score": 1.0,
      "candidate": "import math\n\n\ndef distance(lat1, lon1, lat2, lon2):\n    \"\"\"\n    Return the distance in km between two points\n    specified by their latitude and longitude.\n    \"\"\"\n    R = 6371.0088\n\n    lat1 = math.radians(lat1)\n    lon1 = math.radians(lon1)\n    lat2 = math.radians(lat2)\n    lon2 = math.radians(lon2)\n\n    dlon = lon2 - lon1\n    dlat = lat2 - lat1\n\n    a = math.sin(dlat / 2) ** 2 + math.cos(lat1) * math.cos(lat2) * math.sin(dlon / 2) ** 2\n    c = 2 * math.atan2(math.sqrt(a), math.sqrt(1 - a))\n\n    return R * c\n\n\ndef test_distance():\n    \"\"\"Test for distance function.\"\"\"\n    assert distance(0, 0, 0, 1) == 111.319491\n    assert distance(0, 0, 90, 0) == 110.574389\n    assert distance(0, 0, 45, 45) == 70.710678"
    },
    {
      "rank": 81,
      "score": 1.0,
      "candidate": "import math\n\n\ndef distance_between_points(lat1, lon1, lat2, lon2):\n    R = 6371  # Earth's radius in km\n\n    dLat = math.radians(lat2 - lat1)\n    dLon = math.radians(lon2 - lon1)\n\n    lat1 = math.radians(lat1)\n    lat2 = math.radians(lat2)\n\n    a = math.sin(dLat / 2) ** 2 + math.cos(lat1) * math.cos(lat2) * math.sin(dLon / 2) ** 2\n    c = 2 * math.atan2(math.sqrt(a), math.sqrt(1 - a))\n\n    return R * c\n\n\nif __name__ == \"__main__\":\n    print(distance_between_points(32.907493, -96.895114, 29.416136, -98.493732))"
    },
    {
      "rank": 82,
      "score": 1.0,
      "candidate": "import math\nfrom math import sin, cos, sqrt, atan2, radians\n\n\ndef haversine(lat1, lon1, lat2, lon2):\n    # convert decimal degrees to radians\n    lon1, lat1, lon2, lat2 = map(radians, [lon1, lat1, lon2, lat2])\n\n    # haversine formula\n    dlon = lon2 - lon1\n    dlat = lat2 - lat1\n    a = sin(dlat / 2) ** 2 + cos(lat1) * cos(lat2) * sin(dlon / 2) ** 2\n    c = 2 * atan2(sqrt(a), sqrt(1 - a))\n    R = 6371  # Radius of earth in kilometers. Use 3956 for miles\n    return c * R\n\n\nif __name__ == \"__main__\":\n    lat1, lon1, lat2, lon2 = map(float, input().split())\n    print(haversine(lat1, lon1, lat2, lon2))"
    },
    {
      "rank": 83,
      "score": 1.0,
      "candidate": "import math\n\ndef distance(lat1, lon1, lat2, lon2):\n    # Convert latitude and longitude to\n    # spherical coordinates in radians.\n    if lat1 == lat2 and lon1 == lon2:\n        return 0\n\n    degrees_to_radians = math.pi/180.0\n\n    # phi = 90 - latitude\n    phi1 = (90.0 - lat1)*degrees_to_radians\n    phi2 = (90.0 - lat2)*degrees_to_radians\n\n    # theta = longitude\n    theta1 = lon1*degrees_to_radians\n    theta2 = lon2*degrees_to_radians\n\n    # Compute spherical distance from spherical coordinates.\n\n    # For two locations in spherical coordinates\n    # (1, theta, phi) and (1, theta', phi')\n    # cosine( arc length ) =\n    #    sin phi sin phi' cos(theta-theta') + cos phi cos phi'\n    # distance = rho * arc length\n\n    cos = (math.sin(phi1)*math.sin(phi2)*math.cos(theta1 - theta2) +\n           math.cos(phi1)*math.cos(phi2))\n    arc = math.acos( cos )\n\n    # Remember to multiply arc by the radius of the earth\n    # in your favorite set of units to get length.\n    return arc*6371\n\n# Tests\nassert distance(1, 2, 3, 4) == 2.2237663854781713\n\n# Time complexity O(1)\n# Space complexity O(1)"
    },
    {
      "rank": 84,
      "score": 1.0,
      "candidate": "import math\n\n\ndef distance(x1, y1, x2, y2):\n    R = 6371e3\n    x_diff = math.radians(x1 - x2)\n    y_diff = math.radians(y1 - y2)\n    x = (x1 + x2) / 2\n    y = (y1 + y2) / 2\n    h = (\n        math.sin(x_diff / 2) ** 2\n        + math.cos(math.radians(x))\n        * math.cos(math.radians(y))\n        * math.sin(y_diff / 2) ** 2\n    )\n    return R * 2 * math.atan2(math.sqrt(h), math.sqrt(1 - h))\n\n\nif __name__ == \"__main__\":\n    print(distance(50, 10, 40, 40))"
    },
    {
      "rank": 85,
      "score": 1.0,
      "candidate": "from math import sin, cos, sqrt, atan2, radians\n\n\ndef haversine(lon1, lat1, lon2, lat2):\n    # convert decimal degrees to radians\n    lon1, lat1, lon2, lat2 = map(radians, [lon1, lat1, lon2, lat2])\n\n    # haversine formula\n    dlon = lon2 - lon1\n    dlat = lat2 - lat1\n    a = sin(dlat / 2) ** 2 + cos(lat1) * cos(lat2) * sin(dlon / 2) ** 2\n    c = 2 * atan2(sqrt(a), sqrt(1 - a))\n    # Radius of earth in kilometers is 6371\n    km = 6371 * c\n    return km\n\n\ndef distance(p1, p2):\n    lon1, lat1, lon2, lat2 = map(float, [p1, p2])\n    return haversine(lon1, lat1, lon2, lat2)\n\n\nif __name__ == \"__main__\":\n    # p1 = input(\"Enter point 1: \")\n    # p2 = input(\"Enter point 2: \")\n    # print(distance(p1, p2))\n    print(distance(12.972442, 77.593695, 12.972442, 77.593695))"
    },
    {
      "rank": 86,
      "score": 1.0,
      "candidate": "import math\nfrom math import sin, cos, sqrt, atan2, radians\n\n\ndef distance_between_points(p1, p2):\n    \"\"\"\n    Calculates distance between two points on Earth\n    :param p1: (latitude, longitude)\n    :param p2: (latitude, longitude)\n    :return: distance in kilometers\n    \"\"\"\n    earth_radius = 6373.0\n    lat1, lon1 = p1\n    lat2, lon2 = p2\n\n    dlat = radians(lat2 - lat1)\n    dlon = radians(lon2 - lon1)\n    a = sin(dlat / 2) ** 2 + cos(radians(lat1)) * cos(radians(lat2)) * sin(dlon / 2) ** 2\n    c = 2 * atan2(sqrt(a), sqrt(1 - a))\n    return earth_radius * c\n\n\ndef test_distance_between_points():\n    \"\"\"\n    Test for distance_between_points function\n    \"\"\"\n\n    # Test 1\n    p1 = (48.858844, 2.294351)\n    p2 = (48.858844, 2.294351)\n    expected_result = 0.0\n    actual_result = distance_between_points(p1, p2)\n    assert expected_result == actual_result\n\n    # Test 2\n    p1 = (48.858844, 2.294351)\n    p2 = (48.858844, 2.294351)\n    expected_result = 0.0\n    actual_result = distance_between_points(p1, p2)\n    assert expected_result == actual_result\n\n    # Test 3\n    p1 = (48.858844, 2.294351)\n    p2 = (48.858844, 2.294351)\n    expected_result = 0"
    },
    {
      "rank": 87,
      "score": 1.0,
      "candidate": "import math\n\n\ndef distance_between_points(lat1, lon1, lat2, lon2):\n    \"\"\"\n    Calculate distance between two points using latitude and longitude.\n    :param lat1: latitude of first point\n    :param lon1: longitude of first point\n    :param lat2: latitude of second point\n    :param lon2: longitude of second point\n    :return: distance between two points\n    \"\"\"\n    lat1 = math.radians(lat1)\n    lon1 = math.radians(lon1)\n    lat2 = math.radians(lat2)\n    lon2 = math.radians(lon2)\n    delta_lat = lat2 - lat1\n    delta_lon = lon2 - lon1\n    return math.acos(math.sin(lat1) * math.sin(lat2) + math.cos(lat1) * math.cos(lat2) * math.cos(delta_lon)) * 6371\n\n\nif __name__ == \"__main__\":\n    print(distance_between_points(33.724417, -84.391140, 33.724417, -84.391140))"
    },
    {
      "rank": 88,
      "score": 1.0,
      "candidate": "import math\n\n\ndef distance(lat1, lon1, lat2, lon2):\n    \"\"\"\n    Calculate distance between two points.\n    \"\"\"\n    # pylint: disable=invalid-name\n\n    R = 6371e3  # radius of earth in meters\n\n    # convert to radians\n    lat1 = math.radians(lat1)\n    lon1 = math.radians(lon1)\n    lat2 = math.radians(lat2)\n    lon2 = math.radians(lon2)\n\n    dlon = lon2 - lon1\n    dlat = lat2 - lat1\n    a = (\n        math.sin(dlat / 2) ** 2\n        + math.cos(lat1) * math.cos(lat2) * math.sin(dlon / 2) ** 2\n    )\n    c = 2 * math.atan2(math.sqrt(a), math.sqrt(1 - a))\n    return R * c"
    },
    {
      "rank": 89,
      "score": 1.0,
      "candidate": "def distance_between_points(latitude_1, longitude_1, latitude_2, longitude_2):\n    # Calculate distance using haversine formula\n    # https://en.wikipedia.org/wiki/Haversine_formula\n    #\n    # 0\u00b0 0' 0\" to 90\u00b0 0' 0\" is a distance of 0\n    # 0\u00b0 0' 0\" to 180\u00b0 0' 0\" is a distance of 1,274,216 km\n    #\n    # The radius of the Earth at the equator is 6378.1 km\n    #\n    # R = 6378.1 km\n    # \u03c61, \u03c62 = latitudes\n    # \u0394\u03c6 = \u03c62 - \u03c61\n    # \u0394\u03bb = \u03bb2 - \u03bb1\n    # a = sin\u00b2(\u0394\u03c6/2) + cos(\u03c61) * cos(\u03c62) * sin\u00b2(\u0394\u03bb/2)\n    # c = 2 * atan2(\u221aa, \u221a(1-a))\n    # d = R * c\n\n    # Convert to radians\n    latitude_1 = latitude_1 * (math.pi / 180)\n    longitude_1 = longitude_1 * (math.pi / 180)\n    latitude_2 = latitude_2 * (math.pi / 180)\n    longitude_2 = longitude_2 * (math.pi / 180)\n\n    # Calculate distance\n    distance = 2 * math.asin(\n        math.sqrt(\n            math.sin((latitude_2 - latitude_1) / 2) ** 2 +\n            math.cos(latitude_1) * math.cos(latitude_2) * math.sin((longitude_2 - longitude_1) / 2) ** 2\n        )\n    ) * 6378.1\n\n    return distance\n\n\nif __name__ == \"__main__\":\n    import math\n    assert distance_between_points(0, 0, 0, 0) == 0\n    assert"
    },
    {
      "rank": 90,
      "score": 1.0,
      "candidate": "import math\n\n\ndef distance(lat1, lon1, lat2, lon2):\n    \"\"\"\n    Calculate the distance between two points in meters.\n\n    :param lat1: Latitude of the first point.\n    :type lat1: float\n    :param lon1: Longitude of the first point.\n    :type lon1: float\n    :param lat2: Latitude of the second point.\n    :type lat2: float\n    :param lon2: Longitude of the second point.\n    :type lon2: float\n    :return: Distance between two points in meters.\n    :rtype: float\n    \"\"\"\n    if lat1 == lat2 and lon1 == lon2:\n        return 0\n\n    # Radius of earth in meters.\n    radius = 6371000\n\n    # Convert degrees to radians.\n    lat1 = math.radians(lat1)\n    lon1 = math.radians(lon1)\n    lat2 = math.radians(lat2)\n    lon2 = math.radians(lon2)\n\n    # Calculate distance between two points.\n    distance = math.acos(math.sin(lat1) * math.sin(lat2) + math.cos(lat1) * math.cos(lat2) * math.cos(lon1 - lon2))\n\n    # Multiply distance by radius of earth.\n    distance = distance * radius\n\n    return distance"
    },
    {
      "rank": 91,
      "score": 1.0,
      "candidate": "import math\n\n\ndef calculate_distance(lat1, lon1, lat2, lon2):\n    \"\"\"\n    >>> calculate_distance(lat1=12.97, lon1=77.59, lat2=12.9, lon2=77.6127)\n    3.9502568099549555\n    >>> calculate_distance(lat1=12.97, lon1=77.59, lat2=12.9, lon2=77.6127)\n    3.9502568099549555\n    >>> calculate_distance(lat1=12.97, lon1=77.59, lat2=12.9, lon2=77.6127)\n    3.9502568099549555\n    \"\"\"\n    radius = 6371\n    lat1 = math.radians(lat1)\n    lon1 = math.radians(lon1)\n    lat2 = math.radians(lat2)\n    lon2 = math.radians(lon2)\n    dlon = lon2 - lon1\n    dlat = lat2 - lat1\n    a = math.sin(dlat / 2) ** 2 + math.cos(lat1) * math.cos(lat2) * math.sin(dlon / 2) ** 2\n    c = 2 * math.atan2(math.sqrt(a), math.sqrt(1 - a))\n    return radius * c\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 92,
      "score": 1.0,
      "candidate": "from math import sin, cos, sqrt, atan2, radians\n\n\ndef distance_between_points(lat1, lon1, lat2, lon2):\n    # 111.000 km per degree of latitude\n    # 111.321 km per degree of longitude at equator\n    # at an elevation of 0 meters\n    return 111.000 * (lat1 - lat2) + 111.321 * (lon1 - lon2)\n\n\ndef distance_between_points_2(lat1, lon1, lat2, lon2):\n    \"\"\"\n    This method uses the haversine formula to calculate the distance between two points\n    :param lat1: Latitude of first point\n    :param lon1: Longitude of first point\n    :param lat2: Latitude of second point\n    :param lon2: Longitude of second point\n    :return: Distance in km\n    \"\"\"\n    R = 6371  # Radius of the earth in km\n    dLat = radians(lat2 - lat1)\n    dLon = radians(lon2 - lon1)\n    lat1 = radians(lat1)\n    lat2 = radians(lat2)\n\n    a = sin(dLat / 2) ** 2 + cos(lat1) * cos(lat2) * sin(dLon / 2) ** 2\n    c = 2 * atan2(sqrt(a), sqrt(1 - a))\n\n    return R * c\n\n\nif __name__ == \"__main__\":\n    lat1 = 52.2296756\n    lon1 = 21.0122287\n    lat2 = 52.406374\n    lon2 = 16.9251681\n\n    distance = distance_between_points(lat1, lon1, lat2, lon2)\n    print(distance)\n\n    distance = distance_between_points_2(lat1, lon1, lat2, lon2)\n    print(distance)"
    },
    {
      "rank": 93,
      "score": 1.0,
      "candidate": "from math import sin, cos, sqrt, atan2, radians\n\n\ndef distance(lat1, lon1, lat2, lon2):\n    \"\"\"\n    Calculate distance between two points.\n\n    :param lat1: latitude of point 1\n    :param lon1: longitude of point 1\n    :param lat2: latitude of point 2\n    :param lon2: longitude of point 2\n    :return: distance in meters\n    \"\"\"\n    # approximate radius of earth in km\n    R = 6373.0\n\n    lat1 = radians(lat1)\n    lon1 = radians(lon1)\n    lat2 = radians(lat2)\n    lon2 = radians(lon2)\n\n    dlon = lon2 - lon1\n    dlat = lat2 - lat1\n\n    a = sin(dlat / 2) ** 2 + cos(lat1) * cos(lat2) * sin(dlon / 2) ** 2\n    c = 2 * atan2(sqrt(a), sqrt(1 - a))\n\n    return R * c * 1000"
    },
    {
      "rank": 94,
      "score": 1.0,
      "candidate": "def distance(x1, y1, x2, y2):\n    \"\"\"\n    :param x1: latitude of the first point\n    :param y1: longitude of the first point\n    :param x2: latitude of the second point\n    :param y2: longitude of the second point\n    :return: distance between two points\n    \"\"\"\n    from math import sin, cos, sqrt, atan2, radians\n\n    # The math module contains a function named\n    # radians which converts from degrees to radians.\n    # To convert from radians to degrees, use the\n    # degrees() function.\n    # radians = math.radians(degrees)\n    # degrees = math.degrees(radians)\n\n    # Haversine formula\n    dlon = y2 - y1\n    dlat = x2 - x1\n    a = sin(dlat / 2)**2 + cos(x1) * cos(x2) * sin(dlon / 2)**2\n    c = 2 * atan2(sqrt(a), sqrt(1 - a))\n    # Radius of earth in kilometers is 6371\n    distance = 6371 * c\n\n    return distance\n\n\ndef test_case(points, solution, test_func):\n\n    output = test_func(*points)\n    if output == solution:\n        print(\"Passed\")\n    else:\n        print(f\"Failed, expected {solution}, got {output}\")\n\n\nx1 = 45\ny1 = 179\nx2 = 40\ny2 = 170\ntest_case([x1, y1, x2, y2], 19158.958, distance)\n\nx1 = -23\ny1 = -32\nx2 = 12\ny2 = 15\ntest_case([x1, y1, x2, y2], 8692.194, distance)\n\nx1 = 90\ny1 = 90\nx2 = 180\ny2 = 180\ntest_case([x1, y"
    },
    {
      "rank": 95,
      "score": 1.0,
      "candidate": "from math import sin, cos, sqrt, atan2, radians\n\n\ndef haversine(lat1, lon1, lat2, lon2):\n    \"\"\"\n    Calculate the great circle distance between two points\n    on the earth (specified in decimal degrees).\n    \"\"\"\n    # convert decimal degrees to radians\n    lon1, lat1, lon2, lat2 = map(radians, [lon1, lat1, lon2, lat2])\n    # haversine formula\n    dlon = lon2 - lon1\n    dlat = lat2 - lat1\n    a = sin(dlat / 2) ** 2 + cos(lat1) * cos(lat2) * sin(dlon / 2) ** 2\n    c = 2 * atan2(sqrt(a), sqrt(1 - a))\n    # Radius of earth in kilometers is 6371\n    km = 6371 * c\n    return km\n\n\ndef distance_between_two_points_on_earth(lat1, lon1, lat2, lon2):\n    return haversine(lat1, lon1, lat2, lon2)"
    },
    {
      "rank": 96,
      "score": 1.0,
      "candidate": "from math import sin, cos, sqrt, atan2, radians\n\n\ndef distance(lat1, lon1, lat2, lon2):\n    R = 6371000\n\n    lat1 = radians(lat1)\n    lon1 = radians(lon1)\n    lat2 = radians(lat2)\n    lon2 = radians(lon2)\n\n    dlon = lon2 - lon1\n    dlat = lat2 - lat1\n\n    a = sin(dlat / 2) ** 2 + cos(lat1) * cos(lat2) * sin(dlon / 2) ** 2\n    c = 2 * atan2(sqrt(a), sqrt(1 - a))\n\n    distance = R * c\n\n    return distance\n\n\n# tests\nimport pytest\n\n@pytest.mark.parametrize('lat1, lon1, lat2, lon2, expected', [\n    (32.907493, -96.875303, 29.412844, -98.497002, 2467.7),\n    (0, 0, 0, 0, 0),\n    (0, 0, 0, 180, 179.9999999999999),\n    (0, 0, 180, 0, 179.9999999999999),\n    (90, 0, 0, 0, 179.9999999999999),\n])\ndef test_distance(lat1, lon1, lat2, lon2, expected):\n    assert distance(lat1, lon1, lat2, lon2) == pytest.approx(expected, abs=1)\n\n\npytest.main()"
    },
    {
      "rank": 97,
      "score": 1.0,
      "candidate": "def distance(x1, y1, x2, y2):\n    return ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5\n\n\nif __name__ == \"__main__\":\n    x1, y1, x2, y2 = map(int, input().split())\n    print(distance(x1, y1, x2, y2))"
    },
    {
      "rank": 98,
      "score": 1.0,
      "candidate": "def distance(lat1, lon1, lat2, lon2):\n    \"\"\"\n    Return distance between two points in km.\n    >>> distance(10, 20, 15, 25)\n    866.95\n    >>> distance(0, 0, 0, 1)\n    111.319\n    \"\"\"\n    from math import sin, cos, sqrt, atan2, radians\n\n    # approximate radius of earth in km\n    R = 6373.0\n\n    lat1 = radians(lat1)\n    lon1 = radians(lon1)\n    lat2 = radians(lat2)\n    lon2 = radians(lon2)\n\n    dlon = lon2 - lon1\n    dlat = lat2 - lat1\n\n    a = sin(dlat / 2) ** 2 + cos(lat1) * cos(lat2) * sin(dlon / 2) ** 2\n    c = 2 * atan2(sqrt(a), sqrt(1 - a))\n\n    return R * c\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 99,
      "score": 1.0,
      "candidate": "def distance(lat1, lat2, lon1, lon2):\n    earth_radius = 6371\n\n    d_lat = (lat2 - lat1) * (math.pi / 180)\n    d_lon = (lon2 - lon1) * (math.pi / 180)\n\n    a = math.sin(d_lat / 2) * math.sin(d_lat / 2) + \\\n        math.cos(lat1 * math.pi / 180) * math.cos(lat2 * math.pi / 180) * \\\n        math.sin(d_lon / 2) * math.sin(d_lon / 2)\n\n    c = 2 * math.atan2(math.sqrt(a), math.sqrt(1 - a))\n    d = earth_radius * c\n\n    return d"
    },
    {
      "rank": 100,
      "score": 1.0,
      "candidate": "def distance_between_points(lat1: float, lon1: float, lat2: float, lon2: float) -> float:\n    \"\"\"\n    Calculates distance between two points on Earth\n\n    >>> distance_between_points(lat1=48.8566, lon1=2.3522, lat2=48.8534, lon2=2.3488)\n    1405.189105596721\n\n    >>> distance_between_points(lat1=48.8566, lon1=2.3522, lat2=48.8534, lon2=2.3488)\n    1405.189105596721\n\n    >>> distance_between_points(lat1=48.8566, lon1=2.3522, lat2=48.8534, lon2=2.3488)\n    1405.189105596721\n\n    >>> distance_between_points(lat1=48.8566, lon1=2.3522, lat2=48.8534, lon2=2.3488)\n    1405.189105596721\n    \"\"\"\n    from math import sin, cos, sqrt, atan2, radians\n\n    # approximate radius of earth in km\n    R = 6373.0\n\n    lat1 = radians(lat1)\n    lon1 = radians(lon1)\n    lat2 = radians(lat2)\n    lon2 = radians(lon2)\n\n    dlon = lon2 - lon1\n    dlat = lat2 - lat1\n\n    a = sin(dlat / 2) ** 2 + cos(lat1) * cos(lat2) * sin(dlon / 2) ** 2\n    c = 2 * atan2(sqrt(a), sqrt(1 - a))\n\n    distance = R * c\n    return distance"
    }
  ]
}