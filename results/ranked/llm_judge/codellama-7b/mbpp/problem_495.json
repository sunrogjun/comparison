{
  "timestamp": "2025-09-15T02:03:30.683765",
  "method": "improved_llm_judge",
  "judge_model": "codellama/CodeLlama-7b-Python-hf",
  "target_model": "codellama-7b",
  "dataset": "mbpp",
  "problem_number": 495,
  "total_candidates": 100,
  "results": [
    {
      "rank": 1,
      "score": 10.0,
      "candidate": "def permutation_coefficient(n, k):\n    if n < k:\n        return 0\n    if n == k:\n        return 1\n    if k == 1:\n        return n\n    res = 1\n    for i in range(1, k):\n        res *= n - k + i\n    return res\n\n\nif __name__ == \"__main__\":\n    print(permutation_coefficient(10, 5))"
    },
    {
      "rank": 2,
      "score": 10.0,
      "candidate": "def permutation_coefficient(n, k):\n    if k < 0 or k > n:\n        return 0\n    elif k == 0:\n        return 1\n    else:\n        return permutation_coefficient(n - 1, k - 1) + permutation_coefficient(n - 1, k)\n\n\nif __name__ == '__main__':\n    print(permutation_coefficient(5, 2))"
    },
    {
      "rank": 3,
      "score": 10.0,
      "candidate": "from functools import lru_cache\n\n\n@lru_cache(maxsize=None)\ndef permutation(n, k):\n    if k == 1:\n        return 1\n    if n == k:\n        return 1\n    if n == 1:\n        return 1\n\n    return permutation(n - 1, k) + permutation(n - 1, k - 1)\n\n\nif __name__ == \"__main__\":\n    n, k = map(int, input().split())\n    print(permutation(n, k))"
    },
    {
      "rank": 4,
      "score": 10.0,
      "candidate": "import math\nfrom functools import lru_cache\n\n\n@lru_cache(maxsize=None)\ndef permutation(n: int, k: int) -> int:\n    if n == k:\n        return 1\n    return math.factorial(n) // math.factorial(n - k)\n\n\nif __name__ == \"__main__\":\n    assert permutation(4, 2) == 6, \"incorrect result\"\n    assert permutation(4, 3) == 4, \"incorrect result\""
    },
    {
      "rank": 5,
      "score": 10.0,
      "candidate": "def permutation_coefficient(n, k):\n    \"\"\"\n    >>> permutation_coefficient(5, 2)\n    20\n    >>> permutation_coefficient(4, 2)\n    10\n    >>> permutation_coefficient(3, 2)\n    3\n    >>> permutation_coefficient(4, 3)\n    6\n    >>> permutation_coefficient(10, 3)\n    720\n    >>> permutation_coefficient(10, 1)\n    10\n    \"\"\"\n    if k == 0 or k == n:\n        return 1\n    return (\n        permutation_coefficient(n - 1, k - 1)\n        + permutation_coefficient(n - 1, k)\n    )\n\n\nif __name__ == \"__main__\":\n    from doctest import testmod\n\n    testmod()"
    },
    {
      "rank": 6,
      "score": 10.0,
      "candidate": "import math\nfrom functools import reduce\nfrom gfg.dynamic_programming.subset_sum.subset_sum import is_subset_sum\n\n\ndef permutation_coefficient(n, k):\n    \"\"\"\n    Time Complexity: O(n^2)\n    Space Complexity: O(n)\n    \"\"\"\n    if k == 0 or k == n:\n        return 1\n\n    if k == 1 or k == n - 1:\n        return n\n\n    if not is_subset_sum(n, [i for i in range(1, n + 1)], k):\n        return 0\n\n    count = [0] * (n + 1)\n    count[0] = 1\n\n    for i in range(1, n + 1):\n        for j in range(i, n + 1):\n            if j - i < k:\n                count[j] += count[i - 1]\n\n    return count[n]\n\n\ndef permutation_coefficient_dp(n, k):\n    \"\"\"\n    Time Complexity: O(n^2)\n    Space Complexity: O(n)\n    \"\"\"\n    if k == 0 or k == n:\n        return 1\n\n    if k == 1 or k == n - 1:\n        return n\n\n    if not is_subset_sum(n, [i for i in range(1, n + 1)], k):\n        return 0\n\n    dp = [[0 for _ in range(n + 1)] for _ in range(n + 1)]\n\n    for i in range(1, n + 1):\n        dp[i][0] = 1\n\n    for i in range(1, n + 1):\n        for j in range(1, n + 1):\n            if i < j:\n                dp[i][j] = dp[i][j - 1]\n            elif i == j:\n                dp[i][j] = 1\n            else:\n                dp[i][j] = dp[i - 1][j - 1] + dp[i][j - 1"
    },
    {
      "rank": 7,
      "score": 10.0,
      "candidate": "def permutation_coefficient(n: int, k: int) -> int:\n    \"\"\"\n    This solution is based on the fact that p(n, k) = p(n, n - k)\n\n    Time Complexity: O(n)\n    Space Complexity: O(n)\n    \"\"\"\n\n    def _permutation_coefficient(n: int, k: int, memo: dict[tuple[int, int], int]):\n        if (n, k) in memo:\n            return memo[(n, k)]\n\n        if n == k:\n            return 1\n\n        if k == 1:\n            return n\n\n        if k == 0 or n == 0:\n            return 0\n\n        memo[(n, k)] = (\n            _permutation_coefficient(n - 1, k - 1, memo) + _permutation_coefficient(n - 1, k, memo)\n        )\n\n        return memo[(n, k)]\n\n    return _permutation_coefficient(n, k, {})\n\n\nif __name__ == \"__main__\":\n    print(permutation_coefficient(10, 3))"
    },
    {
      "rank": 8,
      "score": 10.0,
      "candidate": "def permutation(n, k):\n    \"\"\"\n    Calculates permutation coefficient p(n, k).\n    :param n:\n    :param k:\n    :return:\n    \"\"\"\n    if n < 0 or k < 0:\n        return -1\n\n    if n == 0 or n == k:\n        return 1\n\n    return permutation(n - 1, k - 1) + permutation(n - 1, k)\n\n\ndef main():\n    n = 5\n    k = 3\n    print(permutation(n, k))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 9,
      "score": 10.0,
      "candidate": "import math\n\n\ndef permutation(n, k):\n    if n < 0 or k < 0 or k > n:\n        return -1\n    if n == 0 and k == 0:\n        return 1\n    if k == 0:\n        return 1\n    return math.factorial(n) // math.factorial(n - k)\n\n\nprint(permutation(4, 2))\nprint(permutation(3, 3))\nprint(permutation(3, 2))"
    },
    {
      "rank": 10,
      "score": 10.0,
      "candidate": "import math\n\n\ndef permutation_coefficient(n, k):\n    return math.factorial(n) // math.factorial(n - k)\n\n\nif __name__ == \"__main__\":\n    print(permutation_coefficient(4, 2))"
    },
    {
      "rank": 11,
      "score": 10.0,
      "candidate": "class Solution(object):\n    def permutationCoefficient(self, n, k):\n        \"\"\"\n        :type n: int\n        :type k: int\n        :rtype: int\n        \"\"\"\n        def factorial(n):\n            if n == 0:\n                return 1\n            elif n == 1:\n                return 1\n            else:\n                return n * factorial(n - 1)\n\n        return factorial(n) // factorial(n - k)"
    },
    {
      "rank": 12,
      "score": 10.0,
      "candidate": "def permutation_coefficient(n, k):\n    \"\"\"\n    The number of permutations of n objects taken k at a time is (n! / (n - k)!)\n    The number of permutations of n objects taken k at a time is (n - k)!\n    \"\"\"\n    return factorial(n) // factorial(n - k)\n\ndef factorial(n):\n    result = 1\n    while n >= 1:\n        result *= n\n        n -= 1\n    return result\n\n\nif __name__ == \"__main__\":\n    print(permutation_coefficient(5, 2))\n    print(permutation_coefficient(5, 3))\n    print(permutation_coefficient(5, 4))\n    print(permutation_coefficient(5, 5))\n    print(permutation_coefficient(5, 6))\n    print(permutation_coefficient(5, 7))"
    },
    {
      "rank": 13,
      "score": 10.0,
      "candidate": "def permutation(n, k):\n    # 1. \u6392\u5217\u7ec4\u5408\u516c\u5f0f\uff1aC(n, k) = n! / (k! * (n - k)!)\n    # 2. \u9012\u5f52\u89e3\u6cd5\n    if k > n:\n        return 0\n    if k == n or k == 0:\n        return 1\n    return permutation(n - 1, k) + permutation(n - 1, k - 1)\n\n\ndef permutation_dp(n, k):\n    # 2. \u52a8\u6001\u89c4\u5212\u89e3\u6cd5\n    # \u521d\u59cb\u5316\n    dp = [0] * (n + 1)\n    dp[0] = 1\n    for i in range(1, n + 1):\n        dp[i] = i\n    # \u72b6\u6001\u8f6c\u79fb\n    for i in range(2, n + 1):\n        for j in range(2, n + 1):\n            if i >= j:\n                dp[i] = dp[i] * (i - 1) / j\n    return int(dp[n] / (factorial(n - k) * factorial(k)))\n\n\ndef factorial(n):\n    res = 1\n    for i in range(1, n + 1):\n        res *= i\n    return res\n\n\nprint(permutation(100, 10))\nprint(permutation_dp(100, 10))"
    },
    {
      "rank": 14,
      "score": 10.0,
      "candidate": "from itertools import permutations\nfrom math import factorial\n\n\ndef permutation_coefficient(n, k):\n    \"\"\"\n    Calculate the permutation coefficient of given p(n, k).\n    :param n: The number of elements.\n    :param k: The length of each permutation.\n    :return: The permutation coefficient of given p(n, k).\n    >>> permutation_coefficient(3, 2)\n    6\n    >>> permutation_coefficient(4, 2)\n    12\n    >>> permutation_coefficient(5, 2)\n    30\n    >>> permutation_coefficient(5, 3)\n    60\n    >>> permutation_coefficient(6, 2)\n    24\n    >>> permutation_coefficient(6, 3)\n    120\n    >>> permutation_coefficient(7, 3)\n    210\n    >>> permutation_coefficient(8, 3)\n    720\n    >>> permutation_coefficient(9, 4)\n    48620\n    \"\"\"\n    return factorial(n) // factorial(n - k)\n\n\ndef permutation_coefficient_iter(n, k):\n    \"\"\"\n    Calculate the permutation coefficient of given p(n, k).\n    :param n: The number of elements.\n    :param k: The length of each permutation.\n    :return: The permutation coefficient of given p(n, k).\n    >>> permutation_coefficient_iter(3, 2)\n    6\n    >>> permutation_coefficient_iter(4, 2)\n    12\n    >>> permutation_coefficient_iter(5, 2)\n    30\n    >>> permutation_coefficient_iter(5, 3)\n    60\n    >>> permutation_coefficient_iter(6, 2)\n    24\n    >>> permutation_coefficient_iter(6, 3)\n    120\n    >>> permutation_coefficient_iter(7, 3)\n    210\n    >>> permutation_coefficient_iter(8, 3)\n    720"
    },
    {
      "rank": 15,
      "score": 10.0,
      "candidate": "from math import factorial\n\n\ndef permutation_coefficient(n, k):\n    return factorial(n) // factorial(n - k)\n\n\nif __name__ == \"__main__\":\n    print(permutation_coefficient(5, 2))"
    },
    {
      "rank": 16,
      "score": 10.0,
      "candidate": "class Solution(object):\n    def permutationCoefficient(self, n, k):\n        \"\"\"\n        :type n: int\n        :type k: int\n        :rtype: int\n        \"\"\"\n        if n < 1 or k < 1:\n            return 0\n        if n == 1:\n            return 1\n        return self.permutationCoefficient(n - 1, k - 1) + self.permutationCoefficient(n - 1, k)"
    },
    {
      "rank": 17,
      "score": 10.0,
      "candidate": "import math\nfrom functools import lru_cache\n\n\n@lru_cache(maxsize=None)\ndef permutation_coefficient(n, k):\n    if n == 0 and k == 0:\n        return 1\n    if n < 0 or k < 0:\n        return 0\n    if k == 0:\n        return 1\n    if k > n:\n        return 0\n    if k == n:\n        return 1\n    if k == 1 or k == n - 1:\n        return n\n    return permutation_coefficient(n - 1, k - 1) + permutation_coefficient(n - 1, k)\n\n\n@lru_cache(maxsize=None)\ndef permutation_coefficient2(n, k):\n    if n == 0 and k == 0:\n        return 1\n    if n < 0 or k < 0:\n        return 0\n    if k == 0:\n        return 1\n    if k > n:\n        return 0\n    if k == n:\n        return 1\n    if k == 1 or k == n - 1:\n        return n\n    return permutation_coefficient2(n - 1, k - 1) + permutation_coefficient2(n - 1, k)\n\n\nif __name__ == \"__main__\":\n    print(permutation_coefficient(4, 2))\n    print(permutation_coefficient2(4, 2))\n    print(permutation_coefficient(10, 5))\n    print(permutation_coefficient2(10, 5))"
    },
    {
      "rank": 18,
      "score": 10.0,
      "candidate": "import math\nimport functools\n\n\n@functools.lru_cache(maxsize=None)\ndef permutation_coefficient(n, k):\n    if n < k:\n        return 0\n    elif n == k:\n        return 1\n    else:\n        return math.factorial(n) // math.factorial(n - k)\n\n\nif __name__ == \"__main__\":\n    print(permutation_coefficient(4, 2))"
    },
    {
      "rank": 19,
      "score": 10.0,
      "candidate": "from functools import lru_cache\n\n\n@lru_cache(maxsize=None)\ndef nck(n, k):\n    if k > n:\n        return 0\n    if k == 0 or k == n:\n        return 1\n    return nck(n-1, k-1) + nck(n-1, k)\n\n\ndef permutation_coefficient(n, k):\n    return nck(n, k) / (n**k)\n\n\nif __name__ == \"__main__\":\n    for n in range(10):\n        for k in range(10):\n            print(n, k, permutation_coefficient(n, k))"
    },
    {
      "rank": 20,
      "score": 10.0,
      "candidate": "def permutation_coefficient(n, k):\n    \"\"\"\n    Given p(n, k), write a function to calculate the permutation coefficient.\n    \"\"\"\n    if n < 0 or k < 0:\n        return None\n\n    if n == 0 or k == 0:\n        return 1\n\n    if k > n:\n        return 0\n\n    return permutation_coefficient(n - 1, k) + permutation_coefficient(n - 1, k - 1)\n\n\ndef test_permutation_coefficient():\n    \"\"\"\n    >>> test_permutation_coefficient()\n    \"\"\"\n    assert permutation_coefficient(3, 2) == 6\n    assert permutation_coefficient(4, 3) == 40\n    assert permutation_coefficient(6, 3) == 120\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 21,
      "score": 10.0,
      "candidate": "from itertools import permutations\n\n\ndef permutation_coefficient(n, k):\n    \"\"\"\n    Calculate the permutation coefficient.\n    :param n: int\n    :param k: int\n    :return: int\n    >>> permutation_coefficient(5, 2)\n    20\n    >>> permutation_coefficient(3, 1)\n    3\n    >>> permutation_coefficient(1, 1)\n    1\n    \"\"\"\n    if n < 1 or k < 1:\n        return 0\n    if k > n:\n        return 0\n    return len(list(permutations(range(1, n + 1), k)))\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 22,
      "score": 9.0,
      "candidate": "def permutation_coefficient(n, k):\n    \"\"\"\n    Calculate the permutation coefficient of given p(n, k).\n\n    Args:\n        n: The size of the set.\n        k: The number of elements selected.\n\n    Returns:\n        The permutation coefficient of given p(n, k).\n    \"\"\"\n    if n < 0 or k < 0 or k > n:\n        return 0\n    if k == 0:\n        return 1\n    if k == 1:\n        return n\n    if k == 2:\n        return n * (n - 1) / 2\n    if k == n:\n        return 1\n    return n * permutation_coefficient(n - 1, k - 1) + permutation_coefficient(n - 1, k)\n\n\ndef test_permutation_coefficient():\n    \"\"\"Test for permutation_coefficient.\"\"\"\n    assert permutation_coefficient(10, 5) == 30240\n\n    assert permutation_coefficient(5, 5) == 6\n    assert permutation_coefficient(5, 4) == 10\n    assert permutation_coefficient(5, 3) == 10\n    assert permutation_coefficient(5, 2) == 15\n    assert permutation_coefficient(5, 1) == 5\n    assert permutation_coefficient(5, 0) == 1\n\n    assert permutation_coefficient(4, 4) == 24\n    assert permutation_coefficient(4, 3) == 8\n    assert permutation_coefficient(4, 2) == 12\n    assert permutation_coefficient(4, 1) == 4\n    assert permutation_coefficient(4, 0) == 1\n\n    assert permutation_coefficient(3, 3) == 6\n    assert permutation_coefficient(3, 2) == 3\n    assert permutation_coefficient(3, 1) == 2\n    assert permutation_coefficient(3, 0) == 1\n\n    assert permutation"
    },
    {
      "rank": 23,
      "score": 9.0,
      "candidate": "import math\nfrom functools import lru_cache\n\n\n@lru_cache(maxsize=None)\ndef nCk(n, k):\n    if n == k or k == 0:\n        return 1\n    return nCk(n - 1, k - 1) + nCk(n - 1, k)\n\n\ndef permutation_coefficient(n, k):\n    if n < k or k < 0:\n        return 0\n    return nCk(n, k) * math.factorial(k)\n\n\nif __name__ == '__main__':\n    print(permutation_coefficient(5, 2))"
    },
    {
      "rank": 24,
      "score": 8.0,
      "candidate": "from math import factorial\n\ndef permutation_coefficient(n, k):\n    return factorial(n) // factorial(n - k)\n\nif __name__ == '__main__':\n    print(permutation_coefficient(4, 2))"
    },
    {
      "rank": 25,
      "score": 8.0,
      "candidate": "def permutation(n, k):\n    if k == 0 or k == n:\n        return 1\n    elif k == 1:\n        return n\n    else:\n        return permutation(n - 1, k - 1) + permutation(n - 1, k)\n\ndef permutation_c(n, k):\n    if k == 0 or k == n:\n        return 1\n    else:\n        return permutation_c(n - 1, k - 1) + permutation_c(n - 1, k)\n\nif __name__ == '__main__':\n    print(permutation(5, 3))\n    print(permutation_c(5, 3))"
    },
    {
      "rank": 26,
      "score": 8.0,
      "candidate": "from functools import reduce\n\n\ndef permutation_coefficient(n, k):\n    \"\"\"\n    Calculate the permutation coefficient of given p(n, k).\n    \"\"\"\n    if n < k:\n        return 0\n    elif n == k:\n        return 1\n    else:\n        result = reduce(lambda x, y: x * y, range(n - k + 1, n + 1))\n        return result // factorial(k)\n\n\ndef factorial(n):\n    \"\"\"\n    Calculate the factorial of given n.\n    \"\"\"\n    result = 1\n    for i in range(1, n + 1):\n        result *= i\n    return result"
    },
    {
      "rank": 27,
      "score": 8.0,
      "candidate": "import math\n\n\ndef factorial(n):\n    return math.factorial(n)\n\n\ndef permutation_coefficient(n, k):\n    if k > n:\n        return 0\n    if k == n or k == 0:\n        return 1\n    return factorial(n) / factorial(n - k)\n\n\nif __name__ == '__main__':\n    print(permutation_coefficient(4, 2))"
    },
    {
      "rank": 28,
      "score": 8.0,
      "candidate": "def permutation_coefficient(n, k):\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(1)\n    \"\"\"\n    if n < 0 or k < 0:\n        return None\n    if n == 0 or k == 0:\n        return 1\n    if n < k:\n        return 0\n\n    coef = 1\n    for i in range(1, k + 1):\n        coef *= (n - k + i) / i\n    return int(coef)"
    },
    {
      "rank": 29,
      "score": 8.0,
      "candidate": "def permutation_coefficient(n, k):\n    if n < 0 or k < 0:\n        return 0\n    if n < k:\n        return 0\n    if n == 0 or k == 0:\n        return 1\n    return permutation_coefficient(n - 1, k - 1) + permutation_coefficient(n - 1, k)\n\n\nif __name__ == '__main__':\n    print(permutation_coefficient(4, 2))"
    },
    {
      "rank": 30,
      "score": 8.0,
      "candidate": "from functools import reduce\n\n\ndef permutation_coefficient(n, k):\n    \"\"\"\n    Calculate the permutation coefficient of given p(n, k).\n    \"\"\"\n    if n < 0 or k < 0 or n < k:\n        return 0\n    if n == k:\n        return 1\n    if k == 1:\n        return n\n    return reduce(lambda x, y: x * y, range(n - k + 1, n + 1)) // reduce(lambda x, y: x * y, range(1, k + 1))"
    },
    {
      "rank": 31,
      "score": 8.0,
      "candidate": "from functools import reduce\n\n\ndef factorial(n):\n    return reduce(lambda x, y: x * y, range(1, n + 1))\n\n\ndef permutation_coefficient(n, k):\n    return factorial(n) / factorial(n - k)\n\n\nif __name__ == \"__main__\":\n    assert permutation_coefficient(4, 2) == 6"
    },
    {
      "rank": 32,
      "score": 8.0,
      "candidate": "from math import factorial\n\ndef permutation_coefficient(n, k):\n    return factorial(n) / factorial(n - k)\n\nif __name__ == '__main__':\n    for i in range(0, 10):\n        for j in range(0, 10):\n            print(i, j, permutation_coefficient(i, j))"
    },
    {
      "rank": 33,
      "score": 8.0,
      "candidate": "import math\n\n\ndef permutation_coefficient(n, k):\n    return math.factorial(n) // math.factorial(n - k)\n\n\nif __name__ == \"__main__\":\n    n = int(input(\"Enter n: \"))\n    k = int(input(\"Enter k: \"))\n    print(permutation_coefficient(n, k))"
    },
    {
      "rank": 34,
      "score": 8.0,
      "candidate": "from math import factorial\n\n\ndef permutation_coefficient(n, k):\n    if n < k:\n        return 0\n    if n == k:\n        return 1\n    return factorial(n) // factorial(n - k)\n\n\nif __name__ == \"__main__\":\n    print(permutation_coefficient(3, 2))"
    },
    {
      "rank": 35,
      "score": 8.0,
      "candidate": "def permutation(n, k):\n    if n < k:\n        return 0\n    if n == k:\n        return 1\n    if k == 1:\n        return n\n    else:\n        return permutation(n - 1, k - 1) + permutation(n - 1, k)\n\nif __name__ == '__main__':\n    for i in range(1, 5):\n        for j in range(1, 5):\n            print(permutation(i, j))"
    },
    {
      "rank": 36,
      "score": 8.0,
      "candidate": "import math\n\n\ndef permutation_coefficient(n, k):\n    return math.factorial(n) // math.factorial(n - k)\n\n\nif __name__ == '__main__':\n    print(permutation_coefficient(6, 4))"
    },
    {
      "rank": 37,
      "score": 8.0,
      "candidate": "from math import factorial\n\n\ndef permutation_coefficient(n, k):\n    return factorial(n) // factorial(n - k)\n\n\nif __name__ == \"__main__\":\n    assert permutation_coefficient(4, 2) == 6"
    },
    {
      "rank": 38,
      "score": 8.0,
      "candidate": "from math import factorial\n\n\ndef permutation_coefficient(n, k):\n    return factorial(n) // factorial(n - k)\n\n\nif __name__ == \"__main__\":\n    n = int(input(\"n = \"))\n    k = int(input(\"k = \"))\n    print(permutation_coefficient(n, k))"
    },
    {
      "rank": 39,
      "score": 8.0,
      "candidate": "def permutation_coefficient(n, k):\n    \"\"\"\n    n! / (n-k)! * k!\n    \"\"\"\n    if n < 0 or k < 0 or n < k:\n        return 0\n    if k == 0 or n == k:\n        return 1\n    return permutation_coefficient(n - 1, k - 1) * n / k\n\n\nif __name__ == '__main__':\n    print(permutation_coefficient(4, 2))"
    },
    {
      "rank": 40,
      "score": 8.0,
      "candidate": "from math import factorial\n\n\ndef permutation_coefficient(n, k):\n    \"\"\"\n    :param n: the number of elements\n    :param k: the length of the subsets\n    :return: the permutation coefficient\n    \"\"\"\n    return factorial(n) // (factorial(k) * factorial(n - k))\n\n\nif __name__ == '__main__':\n    n = 10\n    k = 5\n    permutation_coefficient = permutation_coefficient(n, k)\n    print(permutation_coefficient)"
    },
    {
      "rank": 41,
      "score": 8.0,
      "candidate": "from math import factorial\n\n\ndef permutation_coefficient(n, k):\n    if n < k or k < 0:\n        return 0\n    if n == k:\n        return 1\n    return factorial(n) // factorial(n - k)\n\n\nif __name__ == \"__main__\":\n    print(permutation_coefficient(5, 3))"
    },
    {
      "rank": 42,
      "score": 8.0,
      "candidate": "def permutation_coefficient(n, k):\n    if k == 0 or k == n:\n        return 1\n    if n < k or k < 0:\n        return 0\n\n    if n - k > k:\n        n, k = k, n - k\n\n    return permutation_coefficient(n - 1, k - 1) + permutation_coefficient(n - 1, k)\n\n\nif __name__ == '__main__':\n    n = 10\n    k = 4\n    print(permutation_coefficient(n, k))"
    },
    {
      "rank": 43,
      "score": 8.0,
      "candidate": "from functools import reduce\n\ndef permute(n, k):\n    if n < 0 or k < 0:\n        return 0\n    if k == 0 or n == k:\n        return 1\n    if k > n:\n        return 0\n    return reduce(lambda x, y: x * y, range(n - k + 1, n + 1))"
    },
    {
      "rank": 44,
      "score": 8.0,
      "candidate": "def permutation_coefficient(n, k):\n    if n < 0 or k < 0 or n < k:\n        return 0\n    if k == 0:\n        return 1\n    if k == 1:\n        return n\n\n    result = 1\n    for i in range(1, k + 1):\n        result *= (n - k + i) / i\n\n    return int(result)\n\n\nif __name__ == '__main__':\n    print(permutation_coefficient(6, 3))"
    },
    {
      "rank": 45,
      "score": 8.0,
      "candidate": "def factorial(n):\n    \"\"\"\n    Calculate the factorial of n.\n    \"\"\"\n    if n == 1 or n == 0:\n        return 1\n    else:\n        return n * factorial(n - 1)\n\ndef permutation_coefficient(n, k):\n    \"\"\"\n    Calculate the permutation coefficient of n(k).\n    \"\"\"\n    if n < k:\n        raise ValueError(\"n must be greater than or equal to k.\")\n    return factorial(n) // factorial(n - k)\n\nif __name__ == '__main__':\n    print(permutation_coefficient(10, 3))"
    },
    {
      "rank": 46,
      "score": 8.0,
      "candidate": "import math\n\n\ndef permutation_coefficient(n, k):\n    return math.factorial(n) // math.factorial(n - k)\n\n\nif __name__ == \"__main__\":\n    assert permutation_coefficient(4, 2) == 6"
    },
    {
      "rank": 47,
      "score": 8.0,
      "candidate": "from math import factorial\n\n\ndef permutation_coefficient(n, k):\n    return factorial(n) // factorial(n - k)\n\n\nif __name__ == \"__main__\":\n    for n in range(2, 10):\n        for k in range(1, n + 1):\n            print(permutation_coefficient(n, k), end=\" \")\n        print()"
    },
    {
      "rank": 48,
      "score": 8.0,
      "candidate": "def permutation_coefficient(n, k):\n    \"\"\"\n    Calculate the permutation coefficient of given p(n, k).\n    \"\"\"\n    if k > n or k <= 0:\n        return 0\n    if n == k:\n        return 1\n\n    # Initialize\n    coefficient = 1\n    for i in range(n - k + 1, n + 1):\n        coefficient *= i\n\n    return coefficient // math.factorial(n - k)"
    },
    {
      "rank": 49,
      "score": 8.0,
      "candidate": "def permutation_coefficient(n, k):\n    \"\"\"\n    Computes the coefficient of the permutation of n items taken k at a time.\n    \"\"\"\n    if k > n:\n        return 0\n    if k == n or k == 0:\n        return 1\n    if k == 1:\n        return n\n    if k > n / 2:\n        return permutation_coefficient(n, n - k)\n\n    temp_sum = 1\n    for i in range(k):\n        temp_sum *= (n - i)\n        temp_sum //= (i + 1)\n\n    return temp_sum\n\n\nif __name__ == \"__main__\":\n    for i in range(1, 10):\n        for j in range(1, i + 1):\n            print(f\"{i}P{j} = {permutation_coefficient(i, j)}\")"
    },
    {
      "rank": 50,
      "score": 8.0,
      "candidate": "def permutation_coefficient(n, k):\n    \"\"\"\n    Calculate the permutation coefficient of given p(n, k).\n    \"\"\"\n\n    if k > n:\n        return None\n\n    if k == n or k == 0:\n        return 1\n\n    return permutation_coefficient(n - 1, k) + permutation_coefficient(n - 1, k - 1)\n\nif __name__ == '__main__':\n    print(permutation_coefficient(3, 2))"
    },
    {
      "rank": 51,
      "score": 8.0,
      "candidate": "from math import factorial\n\n\ndef permutation_coefficient(n, k):\n    \"\"\"\n    Calculate the permutation coefficient of given p(n, k).\n    \"\"\"\n    if k > n:\n        return 0\n    return factorial(n) // factorial(n - k)"
    },
    {
      "rank": 52,
      "score": 8.0,
      "candidate": "def permutation_coefficient(n, k):\n    if k == 0 or n == k:\n        return 1\n    if k == 1 or k == n - 1:\n        return n\n    return permutation_coefficient(n - 1, k) + permutation_coefficient(n - 1, k - 1)\n\n\nprint(permutation_coefficient(4, 2))"
    },
    {
      "rank": 53,
      "score": 8.0,
      "candidate": "from math import factorial\n\ndef permutation_coefficient(n, k):\n    return factorial(n) // factorial(n - k)\n\nprint(permutation_coefficient(5, 3))"
    },
    {
      "rank": 54,
      "score": 8.0,
      "candidate": "def permutation_coefficient(n, k):\n    if k > n:\n        raise ValueError(\"k should be less than n\")\n\n    if n == k or k == 0:\n        return 1\n\n    if k == 1:\n        return n\n\n    return permutation_coefficient(n - 1, k - 1) + permutation_coefficient(n - 1, k)\n\n\nif __name__ == \"__main__\":\n    print(permutation_coefficient(4, 2))\n    print(permutation_coefficient(3, 2))"
    },
    {
      "rank": 55,
      "score": 8.0,
      "candidate": "def permutation_coefficient(n, k):\n    if k > n or k < 0:\n        return 0\n\n    if k == 0:\n        return 1\n\n    if k == n:\n        return 1\n\n    return permutation_coefficient(n - 1, k - 1) + permutation_coefficient(n - 1, k)"
    },
    {
      "rank": 56,
      "score": 8.0,
      "candidate": "def permutation_coefficient(n, k):\n    if n < 0 or k < 0 or n < k:\n        return 0\n    if k == 0 or k == n:\n        return 1\n    if n == 0 or k == 0:\n        return 0\n    if k == 1:\n        return n\n    if k == 2:\n        return n * (n - 1) / 2\n    if n == k:\n        return permutation_coefficient(n - 1, k - 1)\n    return (permutation_coefficient(n - 1, k) + permutation_coefficient(n - 1, k - 1))\n\nif __name__ == '__main__':\n    print(permutation_coefficient(4, 2))"
    },
    {
      "rank": 57,
      "score": 8.0,
      "candidate": "from math import factorial\n\n\ndef permutation_coefficient(n, k):\n    return factorial(n) / factorial(n - k)\n\n\nif __name__ == \"__main__\":\n    print(permutation_coefficient(4, 2))"
    },
    {
      "rank": 58,
      "score": 8.0,
      "candidate": "import math\n\n\ndef permutation_coefficient(n, k):\n    return math.factorial(n) // math.factorial(n - k)\n\n\nif __name__ == \"__main__\":\n    print(permutation_coefficient(4, 2))"
    },
    {
      "rank": 59,
      "score": 8.0,
      "candidate": "from functools import lru_cache\n\n@lru_cache\ndef permutation(n, k):\n    if k == 0:\n        return 1\n    if k == 1:\n        return n\n    if k == n:\n        return 1\n    return permutation(n - 1, k - 1) + permutation(n - 1, k)\n\n\nif __name__ == \"__main__\":\n    n, k = map(int, input().split())\n    print(permutation(n, k))"
    },
    {
      "rank": 60,
      "score": 8.0,
      "candidate": "from functools import lru_cache\n\n@lru_cache(maxsize=None)\ndef permutation_coefficient(n, k):\n    \"\"\"\n    Calculate the permutation coefficient of given p(n, k).\n    \"\"\"\n    if n < 0 or k < 0 or n < k:\n        raise ValueError\n\n    if n == k:\n        return 1\n\n    if k == 1:\n        return n\n\n    return (permutation_coefficient(n - 1, k - 1) +\n            permutation_coefficient(n - 1, k))\n\nif __name__ == \"__main__\":\n    n = int(input(\"Enter n: \"))\n    k = int(input(\"Enter k: \"))\n    print(permutation_coefficient(n, k))"
    },
    {
      "rank": 61,
      "score": 3.0,
      "candidate": "class Solution(object):\n    def numOfWays(self, n, k):\n        \"\"\"\n        :type n: int\n        :type k: int\n        :rtype: int\n        \"\"\"\n        # we can use the definition of permutation coefficient\n        # which is n!/k!(n-k)!\n        # to reduce the time complexity\n        # time complexity: O(n)\n        # space complexity: O(n)\n        if n < k:\n            return 0\n        if n == k:\n            return 1\n\n        res = 1\n        for i in range(k, n + 1):\n            res *= i\n        return res // (k * (n - k))"
    },
    {
      "rank": 62,
      "score": 1.0,
      "candidate": "from functools import lru_cache\n\n\n@lru_cache(maxsize=None)\ndef permutation_coefficient(n, k):\n    if n == 0 and k == 0:\n        return 1\n\n    if n < 0 or k < 0 or k > n:\n        return 0\n\n    if k == 0:\n        return 1\n\n    if k == 1:\n        return n\n\n    return (n - k + 1) * permutation_coefficient(n - 1, k - 1)\n\n\nif __name__ == \"__main__\":\n    test_cases = [\n        (3, 2, 3),\n        (5, 3, 10),\n        (10, 6, 360360),\n    ]\n\n    for n, k, expected_result in test_cases:\n        result = permutation_coefficient(n, k)\n        assert result == expected_result, result"
    },
    {
      "rank": 63,
      "score": 1.0,
      "candidate": "import math\n\n\nclass Solution:\n    def permutationCoefficient(self, n, k):\n        \"\"\"\n        :type n: int\n        :type k: int\n        :rtype: int\n        \"\"\"\n        if k > n:\n            return 0\n        if k == n or k == 0:\n            return 1\n        return math.factorial(n) // math.factorial(n - k)\n\n\nif __name__ == \"__main__\":\n    s = Solution()\n    print(s.permutationCoefficient(4, 2))\n    print(s.permutationCoefficient(4, 3))\n    print(s.permutationCoefficient(4, 4))"
    },
    {
      "rank": 64,
      "score": 1.0,
      "candidate": "from itertools import permutations\n\n\ndef permutation_coefficient(n, k):\n    if n == 0 and k == 0:\n        return 1\n\n    if n == 0 or k == 0:\n        return 0\n\n    if n < k:\n        return 0\n\n    return permutation_coefficient(n - 1, k) + permutation_coefficient(n - 1, k - 1)\n\n\ndef permutation_coefficient_2(n, k):\n    if n == 0 and k == 0:\n        return 1\n\n    if n == 0 or k == 0:\n        return 0\n\n    if n < k:\n        return 0\n\n    result = 1\n    for i in range(n, n - k, -1):\n        result = result * i\n    return result // factorial(n - k)\n\n\ndef factorial(n):\n    if n == 0:\n        return 1\n\n    result = 1\n    for i in range(1, n + 1):\n        result = result * i\n    return result\n\n\ndef permutation_coefficient_3(n, k):\n    if n == 0 and k == 0:\n        return 1\n\n    if n == 0 or k == 0:\n        return 0\n\n    if n < k:\n        return 0\n\n    result = 1\n    for i in range(n, n - k, -1):\n        result = result * i\n    return result // factorial_2(n) // factorial_2(n - k)\n\n\ndef factorial_2(n):\n    if n == 0:\n        return 1\n\n    result = 1\n    for i in range(1, n + 1):\n        result = result * i\n    return result\n\n\ndef permutation_coefficient_4(n, k):\n    if n == 0 and k == 0:\n        return 1\n\n    if n == 0 or k == 0:\n        return 0\n\n    if n < k:\n        return 0\n\n    result ="
    },
    {
      "rank": 65,
      "score": 1.0,
      "candidate": "def permutation_coefficient(n, k):\n    \"\"\"\n    The permutation coefficient of given p(n, k) is defined as\n\n    p(n, k) = k! * (n - k)! / n!\n    \"\"\"\n    if k > n:\n        return 0\n    if k == n:\n        return 1\n\n    factorials = [1] * (n + 1)\n    for i in range(2, n + 1):\n        factorials[i] = factorials[i - 1] * i\n\n    return factorials[k] * factorials[n - k] // factorials[n]\n\n\nif __name__ == \"__main__\":\n    assert permutation_coefficient(10, 2) == 30"
    },
    {
      "rank": 66,
      "score": 1.0,
      "candidate": "class Solution(object):\n    def permutationCoefficient(self, n, k):\n        \"\"\"\n        :type n: int\n        :type k: int\n        :rtype: int\n        \"\"\"\n        if n < 1 or k < 1:\n            return 0\n        dp = [[0 for _ in range(k + 1)] for _ in range(n + 1)]\n        for i in range(n + 1):\n            dp[i][0] = 1\n        for i in range(1, n + 1):\n            for j in range(1, k + 1):\n                if i - 1 >= 0:\n                    dp[i][j] += dp[i - 1][j]\n                dp[i][j] += dp[i - 1][j - 1]\n        return dp[n][k]\n\n\nif __name__ == \"__main__\":\n    assert Solution().permutationCoefficient(4, 9) == 622\n    assert Solution().permutationCoefficient(5, 2) == 25\n    assert Solution().permutationCoefficient(1, 1) == 1\n    assert Solution().permutationCoefficient(1, 2) == 0"
    },
    {
      "rank": 67,
      "score": 1.0,
      "candidate": "from itertools import permutations\n\n\ndef permutation_coefficient(n, k):\n    \"\"\"\n    Time Complexity: O(n!)\n    Space Complexity: O(n!)\n    \"\"\"\n    if n < k:\n        return 0\n\n    def dfs(n, k, memo):\n        if (n, k) in memo:\n            return memo[(n, k)]\n\n        if n == 0:\n            memo[(n, k)] = 1\n            return memo[(n, k)]\n\n        if k == 0:\n            memo[(n, k)] = 1\n            return memo[(n, k)]\n\n        if n == k:\n            memo[(n, k)] = 1\n            return memo[(n, k)]\n\n        memo[(n, k)] = dfs(n - 1, k, memo) + dfs(n - 1, k - 1, memo)\n\n        return memo[(n, k)]\n\n    return dfs(n, k, {})\n\n\ndef permutation_coefficient_recursive(n, k):\n    \"\"\"\n    Time Complexity: O(n!)\n    Space Complexity: O(n!)\n    \"\"\"\n    if n < k:\n        return 0\n\n    memo = {}\n\n    def dfs(n, k):\n        if (n, k) in memo:\n            return memo[(n, k)]\n\n        if n == 0:\n            memo[(n, k)] = 1\n            return memo[(n, k)]\n\n        if k == 0:\n            memo[(n, k)] = 1\n            return memo[(n, k)]\n\n        if n == k:\n            memo[(n, k)] = 1\n            return memo[(n, k)]\n\n        memo[(n, k)] = dfs(n - 1, k) + dfs(n - 1, k - 1)\n\n        return memo[(n, k)]\n\n    return dfs(n, k)\n\n\ndef permutation_coefficient_iterative(n, k):"
    },
    {
      "rank": 68,
      "score": 1.0,
      "candidate": "def permute(n, k):\n    if k == 0:\n        return 1\n    if n == k:\n        return 1\n    if n < k:\n        return 0\n\n    return permute(n - 1, k - 1) + permute(n - 1, k)\n\n\ndef test_permute():\n    assert permute(4, 2) == 6"
    },
    {
      "rank": 69,
      "score": 1.0,
      "candidate": "from math import factorial\nfrom typing import Tuple\n\n\ndef permutation_coefficient(n: int, k: int) -> int:\n    \"\"\"\n    Return the permutation coefficient of given p(n, k).\n    \"\"\"\n    return factorial(n) // factorial(n - k)\n\n\ndef main():\n    n, k = map(int, input().split())\n    print(permutation_coefficient(n, k))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 70,
      "score": 1.0,
      "candidate": "import math\nfrom typing import List\n\n\ndef permutation_coefficient(n: int, k: int) -> int:\n    \"\"\"\n    Time Complexity: O(k)\n    Space Complexity: O(1)\n    \"\"\"\n    if n < k or k < 0:\n        return 0\n\n    if k == 0 or k == n:\n        return 1\n\n    if k == 1:\n        return n\n\n    return math.factorial(n) // math.factorial(n - k)\n\n\nif __name__ == \"__main__\":\n    assert permutation_coefficient(4, 2) == 6\n    assert permutation_coefficient(3, 2) == 3"
    },
    {
      "rank": 71,
      "score": 1.0,
      "candidate": "def permutation_coefficient(n, k):\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(1)\n    \"\"\"\n    if n < 0 or k < 0 or k > n:\n        return 0\n\n    if k == 0 or k == n:\n        return 1\n\n    if k == 1:\n        return n\n\n    return permutation_coefficient(n - 1, k - 1) + permutation_coefficient(n - 1, k)\n\n\nif __name__ == \"__main__\":\n    assert permutation_coefficient(5, 2) == 10"
    },
    {
      "rank": 72,
      "score": 1.0,
      "candidate": "import math\nimport itertools\nimport operator\n\n\ndef permute(n, k):\n    \"\"\"\n    Calculate the permutation coefficient of given p(n, k).\n    \"\"\"\n    if k > n or k <= 0:\n        return 0\n\n    if k == n:\n        return 1\n\n    return math.factorial(n) // math.factorial(n - k)\n\n\ndef permute_iter(n, k):\n    \"\"\"\n    Calculate the permutation coefficient of given p(n, k).\n    \"\"\"\n    if k > n or k <= 0:\n        return 0\n\n    if k == n:\n        return 1\n\n    return math.factorial(n) // math.factorial(n - k)\n\n\ndef permute_iter_2(n, k):\n    \"\"\"\n    Calculate the permutation coefficient of given p(n, k).\n    \"\"\"\n    if k > n or k <= 0:\n        return 0\n\n    if k == n:\n        return 1\n\n    return math.factorial(n) // math.factorial(n - k)\n\n\ndef permute_iter_3(n, k):\n    \"\"\"\n    Calculate the permutation coefficient of given p(n, k).\n    \"\"\"\n    if k > n or k <= 0:\n        return 0\n\n    if k == n:\n        return 1\n\n    return math.factorial(n) // math.factorial(n - k)\n\n\ndef permute_iter_4(n, k):\n    \"\"\"\n    Calculate the permutation coefficient of given p(n, k).\n    \"\"\"\n    if k > n or k <= 0:\n        return 0\n\n    if k == n:\n        return 1\n\n    return math.factorial(n) // math.factorial(n - k)\n\n\ndef permute_iter_5(n, k):\n    \"\"\"\n    Calculate the permutation coefficient of given p(n, k).\n    \"\"\"\n    if k > n or k <= 0:\n        return 0\n\n    if k == n:\n        return 1"
    },
    {
      "rank": 73,
      "score": 1.0,
      "candidate": "def permutation(n, k):\n    \"\"\"\n    Calculate the permutation coefficient of given p(n, k).\n\n    Parameters\n    ----------\n    n : int\n        The number of elements.\n    k : int\n        The number of selected elements.\n\n    Returns\n    -------\n    int\n        The permutation coefficient of given p(n, k).\n\n    Raises\n    ------\n    ValueError\n        If n or k is not a positive integer.\n\n    Examples\n    --------\n    >>> permutation(4, 2)\n    12\n    >>> permutation(4, 3)\n    24\n    >>> permutation(5, 3)\n    60\n    \"\"\"\n    if n < 1 or k < 1:\n        raise ValueError(\"n and k must be positive integer\")\n    if n < k:\n        return 0\n    if k == 1:\n        return n\n    if k == n:\n        return 1\n\n    return permutation(n - 1, k - 1) * n // k"
    },
    {
      "rank": 74,
      "score": 1.0,
      "candidate": "def permutation_coefficient(n, k):\n    \"\"\"\n    n: int\n    k: int\n    return: int\n    \"\"\"\n    if not n >= k >= 0:\n        return 0\n    if k == 0:\n        return 1\n\n    a = 1\n    b = 1\n    for i in range(k):\n        a *= n - i\n        b *= k - i\n    return a // b\n\n\nprint(permutation_coefficient(3, 0))"
    },
    {
      "rank": 75,
      "score": 1.0,
      "candidate": "def permutation(n: int, k: int) -> int:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(1)\n    \"\"\"\n    if n < 0 or k < 0:\n        return 0\n\n    if n == 0 or k == 0 or n == k:\n        return 1\n\n    return permutation(n - 1, k - 1) + permutation(n - 1, k)\n\n\nif __name__ == \"__main__\":\n    print(permutation(4, 2))"
    },
    {
      "rank": 76,
      "score": 1.0,
      "candidate": "def permutation_coefficient(n, k):\n    if n < 0 or k < 0:\n        return 0\n    if k == 0:\n        return 1\n    if k == n:\n        return 1\n    return permutation_coefficient(n-1, k-1) + permutation_coefficient(n-1, k)\n\nif __name__ == '__main__':\n    print(permutation_coefficient(5, 2))\n    print(permutation_coefficient(4, 2))\n    print(permutation_coefficient(3, 2))\n    print(permutation_coefficient(2, 2))\n    print(permutation_coefficient(1, 2))\n    print(permutation_coefficient(0, 2))"
    },
    {
      "rank": 77,
      "score": 1.0,
      "candidate": "from math import factorial\n\n\ndef permutation_coefficient(n, k):\n    if n < 0 or k < 0:\n        return 0\n    return factorial(n) // factorial(n - k)\n\n\n# test\nassert permutation_coefficient(4, 2) == 6\nassert permutation_coefficient(5, 3) == 10\nassert permutation_coefficient(10, 2) == 45\nassert permutation_coefficient(10, 3) == 120\nassert permutation_coefficient(10, 4) == 210\nassert permutation_coefficient(10, 5) == 252"
    },
    {
      "rank": 78,
      "score": 1.0,
      "candidate": "from math import factorial\nfrom typing import Tuple\n\n\ndef permutation_coefficient(n: int, k: int) -> int:\n    \"\"\"\n    Time Complexity: O(1)\n    Space Complexity: O(1)\n\n    :param n: int\n    :param k: int\n    :return: int\n    \"\"\"\n    if k > n:\n        raise ValueError(\"k should not be greater than n\")\n\n    return factorial(n) // factorial(n - k)\n\n\ndef permutation_coefficient_naive(n: int, k: int) -> int:\n    \"\"\"\n    Time Complexity: O(k)\n    Space Complexity: O(k)\n\n    :param n: int\n    :param k: int\n    :return: int\n    \"\"\"\n    if k > n:\n        raise ValueError(\"k should not be greater than n\")\n\n    if k == 0 or k == n:\n        return 1\n\n    cache: list[Tuple[int, int]] = []\n    for i in range(n - k + 1, n + 1):\n        cache.append((i, 1))\n\n    for i in range(n - k, n):\n        cache[i][1] = cache[i][0] - 1\n\n    result: int = 1\n    for item in cache:\n        result *= item[1]\n\n    return result\n\n\nif __name__ == \"__main__\":\n    assert permutation_coefficient(4, 2) == 6\n    assert permutation_coefficient(4, 3) == 4\n    assert permutation_coefficient(5, 2) == 10\n    assert permutation_coefficient(5, 3) == 10\n    assert permutation_coefficient(6, 2) == 15\n    assert permutation_coefficient(6, 3) == 20\n    assert permutation_coefficient(6, 4) == 15\n    assert permutation_coefficient(6, 5) == 6\n    assert permutation_coefficient(6, 6) == 1\n    assert permutation_"
    },
    {
      "rank": 79,
      "score": 1.0,
      "candidate": "from math import factorial\n\n\ndef permutation_coefficient(n, k):\n    return factorial(n) // factorial(n - k)\n\n\nif __name__ == \"__main__\":\n    n, k = map(int, input().split())\n    print(permutation_coefficient(n, k))"
    },
    {
      "rank": 80,
      "score": 1.0,
      "candidate": "def permutation_coefficient(n: int, k: int) -> int:\n    \"\"\"\n    Calculates the permutation coefficient of given p(n, k).\n    \"\"\"\n    if k > n:\n        raise ValueError(\"k should be less than or equal to n.\")\n\n    if k == n:\n        return 1\n\n    return permutation_coefficient(n - 1, k) + permutation_coefficient(n - 1, k - 1)\n\n\nif __name__ == \"__main__\":\n    assert permutation_coefficient(3, 1) == 3\n    assert permutation_coefficient(3, 2) == 3\n    assert permutation_coefficient(3, 3) == 1"
    },
    {
      "rank": 81,
      "score": 1.0,
      "candidate": "def permutation_coefficient(n: int, k: int) -> int:\n    \"\"\"\n    Time Complexity: O(k)\n    Space Complexity: O(1)\n    \"\"\"\n    if n == 0 or k == 0:\n        return 1\n    if k == 1 or k == n:\n        return 1\n\n    if k > n - k:\n        k = n - k\n\n    first_num = 1\n    second_num = 1\n    for i in range(1, k + 1):\n        first_num *= n - i + 1\n        second_num *= i\n\n    return first_num // second_num\n\n\nif __name__ == \"__main__\":\n    assert permutation_coefficient(5, 2) == 10"
    },
    {
      "rank": 82,
      "score": 1.0,
      "candidate": "def permutation_coefficient(n, k):\n    if k > n:\n        return 0\n    if k == n or k == 0:\n        return 1\n    if k > n / 2:\n        k = n - k\n\n    def factorial(num):\n        res = 1\n        while num > 0:\n            res *= num\n            num -= 1\n        return res\n    return factorial(n) // (factorial(n - k) * factorial(k))\n\n\nif __name__ == '__main__':\n    test_cases = [(1, 0), (2, 1), (10, 1), (5, 2), (10, 3), (5, 0), (5, 5)]\n    for case in test_cases:\n        print(case, ':', permutation_coefficient(*case))"
    },
    {
      "rank": 83,
      "score": 1.0,
      "candidate": "def permutation_coefficient(n, k):\n    \"\"\"\n    Computes the coefficient of permutation.\n\n    Args:\n        n (int): The size of the list.\n        k (int): The number of elements to be selected.\n\n    Returns:\n        int: The coefficient of permutation.\n    \"\"\"\n    if n < k:\n        return 0\n    if n == k:\n        return 1\n    return permutation_coefficient(n - 1, k) + permutation_coefficient(n - 1, k - 1)\n\n\nif __name__ == \"__main__\":\n    print(permutation_coefficient(5, 5))"
    },
    {
      "rank": 84,
      "score": 1.0,
      "candidate": "import math\nfrom functools import reduce\n\n\ndef permutation_coefficient(n, k):\n    return math.factorial(n) // math.factorial(n - k)\n\n\n# test\nassert permutation_coefficient(4, 2) == 12\nassert permutation_coefficient(5, 3) == 60\nassert permutation_coefficient(10, 5) == 30240\n\n\ndef permutation_coefficient_v2(n, k):\n    def product(arr):\n        return reduce(lambda x, y: x * y, arr)\n\n    def factorial(n):\n        return product([i for i in range(1, n + 1)])\n\n    return factorial(n) // factorial(n - k)\n\n\n# test\nassert permutation_coefficient_v2(4, 2) == 12\nassert permutation_coefficient_v2(5, 3) == 60\nassert permutation_coefficient_v2(10, 5) == 30240"
    },
    {
      "rank": 85,
      "score": 1.0,
      "candidate": "import math\n\nclass Solution():\n    def getPermutation(self, n, k):\n        \"\"\"\n        :type n: int\n        :type k: int\n        :rtype: str\n        \"\"\"\n        nums = [i for i in range(1, n + 1)]\n        res = []\n        k -= 1\n        while n > 0:\n            n -= 1\n            div = math.factorial(n)\n            div = div // (n + 1)\n            res.append(nums[k // div])\n            nums.remove(nums[k // div])\n            k = k % div\n        return ''.join([str(i) for i in res])\n\n\nif __name__ == \"__main__\":\n    n = 4\n    k = 9\n    solution = Solution()\n    print solution.getPermutation(n, k)"
    },
    {
      "rank": 86,
      "score": 1.0,
      "candidate": "def permutation_coefficient(n: int, k: int) -> int:\n    \"\"\"\n    Time Complexity: O(k)\n    Space Complexity: O(k)\n\n    :param n: int\n    :param k: int\n    :return: int\n    \"\"\"\n    if k < 0 or k > n:\n        raise ValueError(\"Invalid k\")\n\n    if n < 0:\n        raise ValueError(\"Invalid n\")\n\n    if k == 0:\n        return 1\n\n    if k == n:\n        return 1\n\n    if k == 1 or n - k == 1:\n        return n\n\n    return permutation_coefficient(n - 1, k) + permutation_coefficient(n - 1, k - 1)\n\n\nif __name__ == \"__main__\":\n    assert permutation_coefficient(3, 2) == 3"
    },
    {
      "rank": 87,
      "score": 1.0,
      "candidate": "def permutation_coefficient(n, k):\n    if k > n or k < 0:\n        return 0\n    if k == 0 or k == n:\n        return 1\n    if n == k:\n        return 1\n    if k == 1:\n        return n\n    if n - k == 1:\n        return k\n    return permutation_coefficient(n - 1, k) + permutation_coefficient(n - 1, k - 1)\n\n\nif __name__ == '__main__':\n    print(permutation_coefficient(4, 2))"
    },
    {
      "rank": 88,
      "score": 1.0,
      "candidate": "def permutation_coefficient(n, k):\n    \"\"\"\n    Calculate the permutation coefficient of given p(n, k).\n    \"\"\"\n\n    if n < 0 or k < 0 or k > n:\n        return 0\n\n    if n == k or k == 0:\n        return 1\n\n    return permutation_coefficient(n - 1, k - 1) + permutation_coefficient(n - 1, k)\n\n\nif __name__ == \"__main__\":\n    print(permutation_coefficient(3, 2))"
    },
    {
      "rank": 89,
      "score": 1.0,
      "candidate": "from itertools import combinations\n\n\ndef permutation_coefficient(n, k):\n    return len(list(combinations(\"123456789\", n))) / math.factorial(n - k)\n\n\nif __name__ == \"__main__\":\n    assert permutation_coefficient(4, 2) == 35"
    },
    {
      "rank": 90,
      "score": 1.0,
      "candidate": "import math\nfrom functools import reduce\nfrom gfg.maths.factorial import factorial\n\n\ndef permutation_coefficient(n: int, k: int) -> int:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(1)\n    \"\"\"\n    if k > n:\n        return 0\n\n    return factorial(n) // (factorial(n - k) * factorial(k))\n\n\ndef permutation_coefficient_recursive(n: int, k: int) -> int:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(n)\n    \"\"\"\n\n    if k > n:\n        return 0\n\n    if k == n:\n        return 1\n\n    return reduce(lambda x, y: x * y, range(n, n - k, -1))\n\n\nif __name__ == \"__main__\":\n    print(permutation_coefficient(12, 12))\n    print(permutation_coefficient_recursive(12, 12))\n\n    assert permutation_coefficient(5, 2) == 10\n    assert permutation_coefficient(5, 5) == 1\n    assert permutation_coefficient(10, 2) == 45\n\n    assert permutation_coefficient_recursive(5, 2) == 10\n    assert permutation_coefficient_recursive(5, 5) == 1\n    assert permutation_coefficient_recursive(10, 2) == 45"
    },
    {
      "rank": 91,
      "score": 1.0,
      "candidate": "def factorial(num):\n    if num == 1:\n        return 1\n    return num * factorial(num - 1)\n\n\ndef permutation_coefficient(num, k):\n    if num < k:\n        return 0\n    return factorial(num) // factorial(num - k)\n\n\nif __name__ == \"__main__\":\n    n = int(input())\n    k = int(input())\n    print(permutation_coefficient(n, k))"
    },
    {
      "rank": 92,
      "score": 1.0,
      "candidate": "def permutation_coefficient(n: int, k: int) -> int:\n    \"\"\"\n    C(n, k) = n! / (k! * (n - k)!)\n    \"\"\"\n    return factorial(n) // (factorial(k) * factorial(n - k))\n\n\ndef factorial(n: int) -> int:\n    \"\"\"\n    n! = n * (n - 1) * (n - 2) * ... * 3 * 2 * 1\n    \"\"\"\n    if n == 1:\n        return 1\n\n    return n * factorial(n - 1)\n\n\nif __name__ == \"__main__\":\n    assert permutation_coefficient(4, 2) == 6\n    assert permutation_coefficient(5, 2) == 10\n    assert permutation_coefficient(10, 5) == 30240"
    },
    {
      "rank": 93,
      "score": 1.0,
      "candidate": "from math import factorial\n\n\ndef permutation_coefficient(n, k):\n    return factorial(n) // factorial(n - k)\n\n\nprint(permutation_coefficient(4, 2))\nprint(permutation_coefficient(5, 3))\nprint(permutation_coefficient(10, 7))\nprint(permutation_coefficient(20, 10))\nprint(permutation_coefficient(20, 1))\nprint(permutation_coefficient(10, 1))"
    },
    {
      "rank": 94,
      "score": 1.0,
      "candidate": "from math import factorial\n\n\ndef permutation(n, k):\n    \"\"\"\n    C(n, k) = n! / (k! * (n - k)!)\n    \"\"\"\n    return factorial(n) // (factorial(k) * factorial(n - k))\n\n\nif __name__ == \"__main__\":\n    print(permutation(5, 2))"
    },
    {
      "rank": 95,
      "score": 1.0,
      "candidate": "import math\nimport sys\n\nsys.setrecursionlimit(5000)\n\n\ndef permutation_coefficient(n, k):\n    if n == k:\n        return 1\n    if k == 0:\n        return 1\n    if n == 0:\n        return 0\n    return permutation_coefficient(n - 1, k - 1) + permutation_coefficient(n - 1, k)\n\n\ndef test_permutation_coefficient():\n    assert permutation_coefficient(4, 2) == 6\n\n\ndef main():\n    n = int(input())\n    k = int(input())\n    print(permutation_coefficient(n, k))\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 96,
      "score": 1.0,
      "candidate": "from functools import reduce\n\n\ndef permutation_coefficient(n, k):\n    \"\"\"\n    :param n: int\n    :param k: int\n    :return: int\n    \"\"\"\n    return reduce(lambda x, y: x * y, range(n - k + 1, n + 1), 1)\n\n\nif __name__ == \"__main__\":\n    print(permutation_coefficient(10, 5))"
    },
    {
      "rank": 97,
      "score": 1.0,
      "candidate": "class Solution(object):\n    def permutationCoefficient(self, n, k):\n        \"\"\"\n        :type n: int\n        :type k: int\n        :rtype: int\n        \"\"\"\n        if n == 0:\n            return 0\n        if k == 0:\n            return 1\n        if k > n:\n            return 0\n        if n == k:\n            return 1\n\n        # dp[i] means the coefficient of permutation of i\n        dp = [1] * (n + 1)\n        for i in range(1, n + 1):\n            for j in range(1, i):\n                dp[i] += dp[j] * dp[i - j]\n\n        return dp[n] - dp[k - 1]\n\n\nif __name__ == \"__main__\":\n    assert Solution().permutationCoefficient(n=1, k=1) == 0\n    assert Solution().permutationCoefficient(n=2, k=2) == 2\n    assert Solution().permutationCoefficient(n=3, k=1) == 0\n    assert Solution().permutationCoefficient(n=3, k=2) == 3\n    assert Solution().permutationCoefficient(n=3, k=3) == 1\n    assert Solution().permutationCoefficient(n=3, k=4) == 0\n    assert Solution().permutationCoefficient(n=4, k=5) == 0\n    assert Solution().permutationCoefficient(n=5, k=2) == 10"
    },
    {
      "rank": 98,
      "score": 1.0,
      "candidate": "def permutation_coefficient(n, k):\n    if k > n:\n        return 0\n    if k == n or k == 0:\n        return 1\n    return permutation_coefficient(n - 1, k - 1) + permutation_coefficient(n - 1, k)\n\n\nprint(permutation_coefficient(4, 2))"
    },
    {
      "rank": 99,
      "score": 1.0,
      "candidate": "def permutation_coefficient(n, k):\n    if k > n or k <= 0:\n        return 0\n    if k == 1 or k == n:\n        return 1\n    if k == n - 1:\n        return n\n\n    if k > n // 2:\n        k = n - k\n\n    left = 1\n    right = 1\n    for i in range(1, k + 1):\n        left *= n - k + i\n        right *= i\n    return left // right\n\n\nif __name__ == '__main__':\n    n = int(input())\n    k = int(input())\n    print(permutation_coefficient(n, k))"
    },
    {
      "rank": 100,
      "score": 1.0,
      "candidate": "def permutation_coefficient(n, k):\n    if k > n or k < 0:\n        return 0\n\n    if k == 0:\n        return 1\n\n    if k == n:\n        return 1\n\n    return permutation_coefficient(n - 1, k - 1) + permutation_coefficient(n - 1, k)\n\n\ndef test_permutation_coefficient():\n    assert permutation_coefficient(0, 0) == 1\n    assert permutation_coefficient(1, 0) == 1\n    assert permutation_coefficient(1, 1) == 1\n    assert permutation_coefficient(2, 0) == 1\n    assert permutation_coefficient(2, 1) == 2\n    assert permutation_coefficient(2, 2) == 1\n    assert permutation_coefficient(3, 0) == 1\n    assert permutation_coefficient(3, 1) == 3\n    assert permutation_coefficient(3, 2) == 3\n    assert permutation_coefficient(3, 3) == 1\n    assert permutation_coefficient(4, 0) == 1\n    assert permutation_coefficient(4, 1) == 4\n    assert permutation_coefficient(4, 2) == 6\n    assert permutation_coefficient(4, 3) == 4\n    assert permutation_coefficient(4, 4) == 1\n    assert permutation_coefficient(5, 0) == 1\n    assert permutation_coefficient(5, 1) == 5\n    assert permutation_coefficient(5, 2) == 10\n    assert permutation_coefficient(5, 3) == 10\n    assert permutation_coefficient(5, 4) == 5\n    assert permutation_coefficient(5, 5) == 1\n    assert permutation_coefficient(6, 0) == 1\n    assert permutation_coefficient(6, 1) == 6\n    assert permutation_coefficient(6, 2) =="
    }
  ]
}