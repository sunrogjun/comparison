{
  "timestamp": "2025-09-15T00:41:39.821352",
  "method": "improved_llm_judge",
  "judge_model": "codellama/CodeLlama-7b-Python-hf",
  "target_model": "codellama-7b",
  "dataset": "mbpp",
  "problem_number": 316,
  "total_candidates": 100,
  "results": [
    {
      "rank": 1,
      "score": 10.0,
      "candidate": "class Triangle:\n    \"\"\"\n    Checks if the triangle is isosceles or not.\n    >>> t = Triangle(6, 6, 7)\n    >>> t.is_isosceles()\n    True\n    >>> t.is_equilateral()\n    True\n    >>> t = Triangle(6, 6, 5)\n    >>> t.is_isosceles()\n    True\n    >>> t.is_equilateral()\n    False\n    >>> t = Triangle(6, 6, 6)\n    >>> t.is_isosceles()\n    True\n    >>> t.is_equilateral()\n    True\n    >>> t = Triangle(6, 7, 8)\n    >>> t.is_isosceles()\n    False\n    \"\"\"\n\n    def __init__(self, a, b, c):\n        self.a = a\n        self.b = b\n        self.c = c\n\n    def is_isosceles(self):\n        return self.a == self.b or self.b == self.c or self.a == self.c\n\n    def is_equilateral(self):\n        return self.a == self.b and self.b == self.c\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 2,
      "score": 10.0,
      "candidate": "def is_isosceles_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n    >>> is_isosceles_triangle(5, 5, 5)\n    True\n    >>> is_isosceles_triangle(5, 5, 6)\n    False\n    >>> is_isosceles_triangle(5, 6, 7)\n    False\n    \"\"\"\n    return a == b or b == c or c == a\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 3,
      "score": 10.0,
      "candidate": "def isosceles(x: int, y: int, z: int) -> bool:\n    \"\"\"\n    >>> isosceles(3, 4, 5)\n    False\n    >>> isosceles(3, 3, 5)\n    True\n    >>> isosceles(3, 4, 4)\n    True\n    >>> isosceles(3, 3, 3)\n    True\n    \"\"\"\n    return x == y or y == z or z == x\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 4,
      "score": 10.0,
      "candidate": "def isosceles_triangle(a, b, c):\n    \"\"\"\n    >>> isosceles_triangle(1, 1, 2)\n    False\n    >>> isosceles_triangle(1, 2, 2)\n    True\n    >>> isosceles_triangle(1, 2, 1)\n    True\n    >>> isosceles_triangle(1, 3, 1)\n    False\n    >>> isosceles_triangle(2, 2, 2)\n    True\n    >>> isosceles_triangle(3, 3, 3)\n    True\n    >>> isosceles_triangle(3, 3, 2)\n    False\n    >>> isosceles_triangle(2, 3, 2)\n    False\n    \"\"\"\n    if a == b and a == c:\n        return True\n    elif a == b or a == c or b == c:\n        return True\n    else:\n        return False\n\n\ndef isosceles_triangle_v2(a, b, c):\n    \"\"\"\n    >>> isosceles_triangle_v2(1, 1, 2)\n    False\n    >>> isosceles_triangle_v2(1, 2, 2)\n    True\n    >>> isosceles_triangle_v2(1, 2, 1)\n    True\n    >>> isosceles_triangle_v2(1, 3, 1)\n    False\n    >>> isosceles_triangle_v2(2, 2, 2)\n    True\n    >>> isosceles_triangle_v2(3, 3, 3)\n    True\n    >>> isosceles_triangle_v2(3, 3, 2)\n    False\n    >>> isosceles_triangle_v2(2, 3, 2)\n    False\n    \"\"\"\n    return (a == b and a != c) or (a == c and a != b) or (b == c and b != a)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 5,
      "score": 10.0,
      "candidate": "def isosceles(x,y,z):\n\tif x == y or x == z or y == z:\n\t\tprint \"Isosceles\"\n\telse:\n\t\tprint \"Not isosceles\"\n\nisosceles(3,4,5)"
    },
    {
      "rank": 6,
      "score": 10.0,
      "candidate": "def isosceles(a, b, c):\n    \"\"\"\n    >>> isosceles(1, 1, 1)\n    True\n    >>> isosceles(1, 2, 3)\n    False\n    >>> isosceles(1, 2, 2)\n    True\n    >>> isosceles(1, 2, 4)\n    False\n    \"\"\"\n    return a == b or b == c or a == c\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 7,
      "score": 10.0,
      "candidate": "def is_isocel(a, b, c):\n    return a == b or b == c or c == a\n\n\nprint(is_isocel(3, 3, 3))"
    },
    {
      "rank": 8,
      "score": 10.0,
      "candidate": "def isosceles_triangle(a, b, c):\n    if a == b or a == c or b == c:\n        print(\"Isosceles Triangle\")\n    else:\n        print(\"Not Isosceles Triangle\")\n\n\nisosceles_triangle(2, 3, 4)"
    },
    {
      "rank": 9,
      "score": 9.370583536698913,
      "candidate": "def is_isosceles(a, b, c):\n    \"\"\"\n    >>> is_isosceles(3, 4, 4)\n    True\n    >>> is_isosceles(3, 4, 3)\n    False\n    \"\"\"\n    return a == b or b == c or a == c\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 10,
      "score": 9.234050852198141,
      "candidate": "def is_isocelas_triangle(a, b, c):\n    if a == b or a == c or b == c:\n        return True\n    return False\n\n\nif __name__ == '__main__':\n    a = int(input())\n    b = int(input())\n    c = int(input())\n    print(is_isocelas_triangle(a, b, c))"
    },
    {
      "rank": 11,
      "score": 9.226766272351448,
      "candidate": "def check_triangle(a, b, c):\n    if a + b <= c or a + c <= b or b + c <= a:\n        print(\"It's not a triangle\")\n    else:\n        if a == b == c:\n            print(\"It's an equilateral triangle\")\n        elif a == b or a == c or b == c:\n            print(\"It's an isoceles triangle\")\n        else:\n            print(\"It's a scalene triangle\")\n\n\ncheck_triangle(2, 2, 2)\ncheck_triangle(1, 1, 3)\ncheck_triangle(2, 2, 1)"
    },
    {
      "rank": 12,
      "score": 9.21346272767743,
      "candidate": "def is_isosceles(side1: int, side2: int, side3: int) -> bool:\n    \"\"\"\n    >>> is_isosceles(1, 2, 3)\n    False\n    >>> is_isosceles(1, 2, 2)\n    True\n    \"\"\"\n    return (side1 == side2) or (side1 == side3) or (side2 == side3)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 13,
      "score": 9.205959372648458,
      "candidate": "def isosceles(side1, side2, side3):\n    if side1 == side2 and side2 == side3:\n        print(\"Isosceles\")\n    else:\n        print(\"Not Isosceles\")\n\n\nif __name__ == '__main__':\n    isosceles(3, 4, 4)\n    isosceles(3, 4, 5)"
    },
    {
      "rank": 14,
      "score": 9.177268828905222,
      "candidate": "def isosceles(a, b, c):\n    if a == b or b == c or a == c:\n        return \"Isosceles\"\n    return \"Not isosceles\"\n\n\nprint(isosceles(3, 4, 4))\nprint(isosceles(3, 4, 3))\nprint(isosceles(3, 3, 3))"
    },
    {
      "rank": 15,
      "score": 9.122564458729856,
      "candidate": "def is_isosceles(a, b, c):\n    if a == b == c:\n        return \"Isosceles\"\n    elif a != b and a != c and b != c:\n        return \"Not Isosceles\"\n    else:\n        return \"Isosceles\"\n\n\ndef main():\n    print(is_isosceles(1, 2, 2))\n    print(is_isosceles(3, 4, 4))\n    print(is_isosceles(1, 1, 2))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 16,
      "score": 8.973005557553902,
      "candidate": "def isosceles_triangle(side1, side2, side3):\n    if side1 == side2 or side2 == side3 or side1 == side3:\n        return \"Isosceles Triangle\"\n    else:\n        return \"Not Isosceles Triangle\"\n\n\nprint(isosceles_triangle(4, 4, 4))"
    },
    {
      "rank": 17,
      "score": 8.95994420569242,
      "candidate": "def isosceles(a, b, c):\n    if a == b or b == c or c == a:\n        return True\n    else:\n        return False"
    },
    {
      "rank": 18,
      "score": 8.946210893390457,
      "candidate": "def check_isosceles_triangle(a, b, c):\n    if a == b == c:\n        print(\"It is an isosceles triangle\")\n    else:\n        print(\"It is not an isosceles triangle\")\n\n\nif __name__ == '__main__':\n    check_isosceles_triangle(1, 1, 1)"
    },
    {
      "rank": 19,
      "score": 8.932217008005624,
      "candidate": "def is_isosceles(side_a, side_b, side_c):\n    if side_a == side_b or side_b == side_c or side_c == side_a:\n        return True\n    else:\n        return False\n\n\nif __name__ == '__main__':\n    print(is_isosceles(1, 1, 1))\n    print(is_isosceles(1, 2, 1))\n    print(is_isosceles(1, 2, 3))"
    },
    {
      "rank": 20,
      "score": 8.910084504002544,
      "candidate": "def is_isosceles(x, y, z):\n    if x == y or x == z or y == z:\n        print(\"The triangle is isosceles\")\n    else:\n        print(\"The triangle is not isosceles\")\n\nis_isosceles(4, 4, 4)\nis_isosceles(3, 4, 4)"
    },
    {
      "rank": 21,
      "score": 8.85571690049604,
      "candidate": "def is_isosceles(a, b, c):\n    if a == b or a == c or b == c:\n        print(\"The triangle is isosceles\")\n    else:\n        print(\"The triangle is not isosceles\")\n\n\nis_isosceles(3, 3, 5)"
    },
    {
      "rank": 22,
      "score": 8.855395696632057,
      "candidate": "def isosceles(a, b, c):\n    if a == b or b == c or a == c:\n        print('Yes')\n    else:\n        print('No')\n\n\nif __name__ == '__main__':\n    a = int(input())\n    b = int(input())\n    c = int(input())\n    isosceles(a, b, c)"
    },
    {
      "rank": 23,
      "score": 8.850707355641543,
      "candidate": "def is_isosceles(a, b, c):\n    if a == b or b == c or a == c:\n        return True\n    return False\n\na = int(input(\"Enter the length of first side: \"))\nb = int(input(\"Enter the length of second side: \"))\nc = int(input(\"Enter the length of third side: \"))\n\nif is_isosceles(a, b, c):\n    print(\"The triangle is isosceles\")\nelse:\n    print(\"The triangle is not isosceles\")"
    },
    {
      "rank": 24,
      "score": 8.8281618090209,
      "candidate": "def isosceles(a, b, c):\n    if a == b == c:\n        return \"Triangle is isosceles\"\n    return \"Triangle is not isosceles\"\n\n\nif __name__ == \"__main__\":\n    print(isosceles(3, 4, 4))"
    },
    {
      "rank": 25,
      "score": 8.81367773444215,
      "candidate": "def isosceles(a, b, c):\n    if a == b or b == c or a == c:\n        return \"Isosceles\"\n    return \"Not Isosceles\"\n\n\nif __name__ == \"__main__\":\n    print(isosceles(2, 2, 3))"
    },
    {
      "rank": 26,
      "score": 8.76828871349479,
      "candidate": "class Triangle:\n    def __init__(self, side1, side2, side3):\n        self.side1 = side1\n        self.side2 = side2\n        self.side3 = side3\n\n    def is_isosceles(self):\n        if self.side1 == self.side2 or self.side2 == self.side3 or self.side1 == self.side3:\n            return True\n        return False\n\n\nif __name__ == \"__main__\":\n    triangle1 = Triangle(10, 20, 30)\n    print(triangle1.is_isosceles())\n    triangle2 = Triangle(10, 20, 20)\n    print(triangle2.is_isosceles())"
    },
    {
      "rank": 27,
      "score": 8.750282588864879,
      "candidate": "def isosceles(a, b, c):\n    if a == b or b == c or a == c:\n        return \"Isosceles\"\n    else:\n        return \"Not Isosceles\"\n\n\ndef main():\n    print(isosceles(10, 10, 10))\n    print(isosceles(10, 10, 11))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 28,
      "score": 8.715724466237427,
      "candidate": "class Triangle:\n    def __init__(self, a, b, c):\n        self.a = a\n        self.b = b\n        self.c = c\n\n    def isosceles(self):\n        return (self.a == self.b or self.a == self.c or self.b == self.c) and (self.a + self.b > self.c and self.a + self.c > self.b and self.b + self.c > self.a)\n\n\nif __name__ == \"__main__\":\n    side1 = int(input(\"Enter first side: \"))\n    side2 = int(input(\"Enter second side: \"))\n    side3 = int(input(\"Enter third side: \"))\n\n    triangle = Triangle(side1, side2, side3)\n\n    if triangle.isosceles():\n        print(\"This is an isoceles triangle\")\n    else:\n        print(\"This is not an isoceles triangle\")"
    },
    {
      "rank": 29,
      "score": 8.692801520950061,
      "candidate": "def check_triangle(a, b, c):\n    return (a ** 2 + b ** 2 == c ** 2) or (a ** 2 + c ** 2 == b ** 2) or (b ** 2 + c ** 2 == a ** 2)\n\n\nassert check_triangle(3, 4, 5) is False\nassert check_triangle(3, 4, 3) is True"
    },
    {
      "rank": 30,
      "score": 8.632293453617281,
      "candidate": "def isosceles(sides):\n    if sides[0] == sides[1] or sides[1] == sides[2] or sides[2] == sides[0]:\n        return True\n    return False\n\n\ndef main():\n    sides = [int(x) for x in input(\"Enter the sides of triangle seperated by comma: \").split(\",\")]\n    if isosceles(sides):\n        print(\"Triangle is isosceles.\")\n    else:\n        print(\"Triangle is not isosceles.\")\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 31,
      "score": 8.625262456968262,
      "candidate": "def isosceles(a, b, c):\n    return a == b or b == c or a == c\n\n\nprint(isosceles(10, 20, 30))\nprint(isosceles(10, 20, 10))\nprint(isosceles(10, 20, 20))"
    },
    {
      "rank": 32,
      "score": 8.625142247198651,
      "candidate": "def isosceles(a, b, c):\n    if a == b or b == c or a == c:\n        return True\n    else:\n        return False\n\n\ndef main():\n    a = 4\n    b = 4\n    c = 3\n    print(isosceles(a, b, c))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 33,
      "score": 8.623000730200317,
      "candidate": "def isosceles(a, b, c):\n    if a == b or b == c or c == a:\n        print(\"Isosceles triangle\")\n    else:\n        print(\"Not an isosceles triangle\")\n\n\nisosceles(10, 10, 10)\nisosceles(10, 10, 11)\nisosceles(10, 11, 10)"
    },
    {
      "rank": 34,
      "score": 8.616253589228675,
      "candidate": "class Triangle:\n    def __init__(self, side1, side2, side3):\n        self.side1 = side1\n        self.side2 = side2\n        self.side3 = side3\n\n    def is_isosceles(self):\n        return self.side1 == self.side2 or self.side1 == self.side3 or self.side2 == self.side3"
    },
    {
      "rank": 35,
      "score": 8.610076160146226,
      "candidate": "def isosceles(a, b, c):\n    if a == b or b == c or a == c:\n        return True\n    return False"
    },
    {
      "rank": 36,
      "score": 8.606486429141842,
      "candidate": "def is_isosceles_triangle(a, b, c):\n    \"\"\"\n    Write a function to print check if the triangle is isosceles or not.\n    :param a: first side\n    :param b: second side\n    :param c: third side\n    :return: string\n    \"\"\"\n    if a == b == c:\n        return \"Triangle is isosceles\"\n    elif a == b or b == c or a == c:\n        return \"Triangle is isosceles\"\n    else:\n        return \"Triangle is not isosceles\"\n\n\nif __name__ == '__main__':\n    a = int(input())\n    b = int(input())\n    c = int(input())\n    print(is_isosceles_triangle(a, b, c))"
    },
    {
      "rank": 37,
      "score": 8.60156811074208,
      "candidate": "def is_isosceles_triangle(side1, side2, side3):\n    \"\"\"\n    :param side1: first side of triangle\n    :param side2: second side of triangle\n    :param side3: third side of triangle\n    :return: True if isosceles triangle\n    \"\"\"\n    if side1 == side2 or side2 == side3 or side1 == side3:\n        return True\n    else:\n        return False"
    },
    {
      "rank": 38,
      "score": 8.565425580227462,
      "candidate": "def isosceles(a, b, c):\n    return a == b or b == c or a == c\n\n\nif __name__ == \"__main__\":\n    a, b, c = map(int, input().split())\n    print(isosceles(a, b, c))"
    },
    {
      "rank": 39,
      "score": 8.548876241946822,
      "candidate": "def isosceles(side1, side2, side3):\n    return side1 == side2 or side1 == side3 or side2 == side3\n\n\ndef triangle(side1, side2, side3):\n    if side1 + side2 <= side3 or side1 + side3 <= side2 or side2 + side3 <= side1:\n        return \"Not a triangle\"\n    elif isosceles(side1, side2, side3):\n        return \"Isoceles\"\n    elif side1 == side2 == side3:\n        return \"Equilateral\"\n    elif side1 == side2 or side1 == side3 or side2 == side3:\n        return \"Isosceles\"\n    else:\n        return \"Scalene\"\n\n\nprint(triangle(4, 5, 6))\nprint(triangle(1, 2, 3))\nprint(triangle(1, 2, 3))\nprint(triangle(3, 4, 4))\nprint(triangle(3, 4, 5))"
    },
    {
      "rank": 40,
      "score": 8.542875062379007,
      "candidate": "def is_triangle(a, b, c):\n    return a + b > c and a + c > b and b + c > a\n\n\ndef isosceles(a, b, c):\n    return is_triangle(a, b, c) and a == b or is_triangle(a, b, c) and b == c or is_triangle(a, b, c) and a == c\n\n\na = int(input())\nb = int(input())\nc = int(input())\nprint(isosceles(a, b, c))"
    },
    {
      "rank": 41,
      "score": 8.53012858503943,
      "candidate": "def is_isosceles(x, y, z):\n    if x == y or x == z or y == z:\n        return True\n    else:\n        return False\n\n\nprint(is_isosceles(2, 2, 2))\nprint(is_isosceles(3, 2, 2))\nprint(is_isosceles(2, 3, 2))\nprint(is_isosceles(2, 2, 3))"
    },
    {
      "rank": 42,
      "score": 8.499905739299377,
      "candidate": "def is_isosceles(a, b, c):\n    return a == b or a == c or b == c\n\n\ndef is_triangle(a, b, c):\n    return a + b > c and b + c > a and a + c > b\n\n\ndef is_isosceles_triangle(a, b, c):\n    return is_triangle(a, b, c) and is_isosceles(a, b, c)\n\n\nif __name__ == \"__main__\":\n    assert is_isosceles_triangle(3, 4, 4) == True\n    assert is_isosceles_triangle(3, 3, 4) == True\n    assert is_isosceles_triangle(3, 4, 3) == True\n    assert is_isosceles_triangle(4, 3, 3) == True\n    assert is_isosceles_triangle(4, 3, 4) == True\n    assert is_isosceles_triangle(4, 4, 3) == True\n    assert is_isosceles_triangle(3, 3, 3) == False"
    },
    {
      "rank": 43,
      "score": 8.490324832712195,
      "candidate": "def is_isosceles(side1, side2, side3):\n    if side1 == side2 or side1 == side3 or side2 == side3:\n        return True\n    else:\n        return False\n\n\ndef main():\n    print(is_isosceles(3, 4, 4))  # True\n    print(is_isosceles(3, 4, 3))  # False\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 44,
      "score": 8.48796797856353,
      "candidate": "def is_isosceles(a: int, b: int, c: int) -> bool:\n    \"\"\"\n    >>> is_isosceles(3, 4, 5)\n    False\n    >>> is_isosceles(3, 3, 5)\n    True\n    \"\"\"\n    if a == b or b == c or a == c:\n        return True\n    return False\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 45,
      "score": 8.478208546788407,
      "candidate": "def is_isosceles(a: int, b: int, c: int) -> bool:\n    if a == b or b == c or a == c:\n        return True\n    return False\n\n\nif __name__ == \"__main__\":\n    print(is_isosceles(1, 2, 2))\n    print(is_isosceles(1, 2, 3))"
    },
    {
      "rank": 46,
      "score": 8.437695832075478,
      "candidate": "def check_triangle(sides):\n    if len(sides) != 3:\n        raise ValueError('You must pass exactly 3 side lengths')\n\n    sides = sorted(sides)\n\n    if sides[0] + sides[1] <= sides[2]:\n        raise ValueError('Invalid triangle')\n\n    if sides[0] == sides[1] == sides[2]:\n        return 'Equilateral'\n\n    if sides[0] == sides[1] or sides[1] == sides[2]:\n        return 'Isosceles'\n\n    return 'Scalene'"
    },
    {
      "rank": 47,
      "score": 8.426531424889468,
      "candidate": "def is_isosceles(a, b, c):\n    if a == b or b == c or a == c:\n        return True\n    return False\n\n\ndef main():\n    print(is_isosceles(3, 4, 5))\n    print(is_isosceles(3, 4, 4))\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 48,
      "score": 8.408439383654278,
      "candidate": "def check_triangle(x, y, z):\n    if x <= y or y <= z:\n        return False\n    if x == y or y == z:\n        return True\n    return False\n\n\nif __name__ == '__main__':\n    check_triangle(6, 6, 7)\n    check_triangle(1, 2, 3)\n    check_triangle(10, 10, 10)"
    },
    {
      "rank": 49,
      "score": 8.386620303250325,
      "candidate": "def isosceles(side1, side2, side3):\n    if side1 == side2 == side3:\n        return \"Triangle is isosceles\"\n    elif side1 == side2 or side1 == side3 or side2 == side3:\n        return \"Triangle is isosceles\"\n    else:\n        return \"Triangle is not isosceles\"\n\n\nprint(isosceles(3, 4, 4))"
    },
    {
      "rank": 50,
      "score": 8.375312293858853,
      "candidate": "from math import sqrt\n\n\ndef isosceles(a, b, c):\n    if a ** 2 == b ** 2 + c ** 2 or b ** 2 == a ** 2 + c ** 2 or c ** 2 == a ** 2 + b ** 2:\n        return True\n    return False\n\n\ndef isosceles2(a, b, c):\n    if a ** 2 == b ** 2 + c ** 2 or b ** 2 == a ** 2 + c ** 2 or c ** 2 == a ** 2 + b ** 2:\n        return True\n    return False\n\n\ndef isosceles3(a, b, c):\n    if a ** 2 == b ** 2 + c ** 2 or b ** 2 == a ** 2 + c ** 2 or c ** 2 == a ** 2 + b ** 2:\n        return True\n    return False\n\n\ndef isosceles4(a, b, c):\n    if a ** 2 == b ** 2 + c ** 2 or b ** 2 == a ** 2 + c ** 2 or c ** 2 == a ** 2 + b ** 2:\n        return True\n    return False\n\n\ndef isosceles5(a, b, c):\n    if a ** 2 == b ** 2 + c ** 2 or b ** 2 == a ** 2 + c ** 2 or c ** 2 == a ** 2 + b ** 2:\n        return True\n    return False\n\n\ndef isosceles6(a, b, c):\n    if a ** 2 == b ** 2 + c ** 2 or b ** 2 == a ** 2 + c ** 2 or c ** 2 == a ** 2 + b ** 2:\n        return True\n    return False\n\n\ndef isosceles7(a, b, c):\n    if a ** 2 == b ** 2 + c ** 2 or b ** 2 == a ** 2 + c ** 2 or c ** 2 == a ** 2 + b ** 2:\n        return True\n    return False\n\n\ndef"
    },
    {
      "rank": 51,
      "score": 8.351614956112536,
      "candidate": "def isosceles_triangle(a, b, c):\n    \"\"\"\n    Check if the triangle is isosceles or not.\n    :param a: length of first side\n    :param b: length of second side\n    :param c: length of third side\n    :return: True if isosceles else False\n    \"\"\"\n    if a == b or b == c or a == c:\n        return True\n    return False"
    },
    {
      "rank": 52,
      "score": 8.334608500525688,
      "candidate": "def check_triangle(a, b, c):\n    if a + b <= c or a + c <= b or b + c <= a:\n        print(\"Triangle is not possible\")\n    else:\n        if a == b == c:\n            print(\"Triangle is an Equilateral Triangle\")\n        elif a == b or b == c or c == a:\n            print(\"Triangle is an Isosceles Triangle\")\n        else:\n            print(\"Triangle is a Scalene Triangle\")\n\n\na = int(input(\"Enter first side: \"))\nb = int(input(\"Enter second side: \"))\nc = int(input(\"Enter third side: \"))\ncheck_triangle(a, b, c)"
    },
    {
      "rank": 53,
      "score": 8.331556294201176,
      "candidate": "def is_isosceles(x, y, z):\n    if x == y or x == z or y == z:\n        return \"Isosceles\"\n    return \"Not Isosceles\"\n\n\ndef test_isosceles():\n    assert is_isosceles(5, 5, 5) == \"Isosceles\"\n    assert is_isosceles(5, 4, 3) == \"Not Isosceles\"\n    assert is_isosceles(3, 4, 4) == \"Isosceles\"\n    assert is_isosceles(5, 4, 3) == \"Not Isosceles\"\n    assert is_isosceles(3, 4, 4) == \"Isosceles\"\n    assert is_isosceles(4, 4, 4) == \"Isosceles\"\n    assert is_isosceles(5, 4, 3) == \"Not Isosceles\"\n    assert is_isosceles(4, 4, 3) == \"Not Isosceles\"\n    assert is_isosceles(4, 3, 3) == \"Not Isosceles\"\n    assert is_isosceles(3, 3, 3) == \"Isosceles\"\n    assert is_isosceles(4, 3, 3) == \"Not Isosceles\"\n\n\nif __name__ == \"__main__\":\n    test_isosceles()"
    },
    {
      "rank": 54,
      "score": 8.327375965969855,
      "candidate": "def isosceles_triangle(a, b, c):\n    if a == b == c:\n        return \"Triangle is isoceles\"\n    elif a == b or b == c or a == c:\n        return \"Triangle is isoceles\"\n    else:\n        return \"Triangle is not isoceles\"\n\n\nif __name__ == \"__main__\":\n    print(isosceles_triangle(4, 4, 4))\n    print(isosceles_triangle(5, 4, 4))\n    print(isosceles_triangle(4, 4, 5))"
    },
    {
      "rank": 55,
      "score": 8.327367757082776,
      "candidate": "def check_triangle(a, b, c):\n    if a <= 0 or b <= 0 or c <= 0:\n        return False\n    if a**2 == b**2 + c**2 or b**2 == a**2 + c**2 or c**2 == a**2 + b**2:\n        return True\n    return False\n\ndef check_triangle_2(a, b, c):\n    if a <= 0 or b <= 0 or c <= 0:\n        return False\n    return a**2 == b**2 + c**2 or b**2 == a**2 + c**2 or c**2 == a**2 + b**2\n\ndef check_triangle_3(a, b, c):\n    if a <= 0 or b <= 0 or c <= 0:\n        return False\n    return a**2 > b**2 + c**2 or b**2 > a**2 + c**2 or c**2 > a**2 + b**2\n\nif __name__ == '__main__':\n    print(check_triangle(3, 4, 5))\n    print(check_triangle(3, 4, 3))\n    print(check_triangle(3, 4, 2))"
    },
    {
      "rank": 56,
      "score": 8.298597569547805,
      "candidate": "def is_isosceles(a, b, c):\n    \"\"\"\n    Return True if a triangle with the given lengths a, b, c is isosceles, False otherwise.\n    \"\"\"\n    return a == b or a == c or b == c"
    },
    {
      "rank": 57,
      "score": 8.294940769211511,
      "candidate": "def isosceles(a, b, c):\n    if a == b or b == c or a == c:\n        return True\n    return False\n\n\na = int(input())\nb = int(input())\nc = int(input())\n\nif isosceles(a, b, c):\n    print(\"Isosceles triangle\")\nelse:\n    print(\"Not isosceles triangle\")"
    },
    {
      "rank": 58,
      "score": 8.2938925966498,
      "candidate": "def isosceles_triangle(a, b, c):\n    if a == b or b == c or a == c:\n        return True\n    else:\n        return False\n\nif __name__ == \"__main__\":\n    a, b, c = 3, 4, 5\n    print(isosceles_triangle(a, b, c))"
    },
    {
      "rank": 59,
      "score": 8.289838256518838,
      "candidate": "def isosceles_triangle(a, b, c):\n    return (a == b and a != c) or (b == c and b != a) or (a == c and a != b)\n\n\nprint(isosceles_triangle(4, 4, 3))"
    },
    {
      "rank": 60,
      "score": 8.251903304236286,
      "candidate": "def is_isosceles_triangle(a, b, c):\n    \"\"\"Checks if the triangle is isosceles or not.\"\"\"\n    if a == b or b == c or a == c:\n        return True\n    return False\n\n\nif __name__ == '__main__':\n    assert is_isosceles_triangle(1, 1, 1) is True\n    assert is_isosceles_triangle(1, 2, 1) is False"
    },
    {
      "rank": 61,
      "score": 8.214125058964552,
      "candidate": "def check_triangle(a, b, c):\n    if a + b <= c or a + c <= b or b + c <= a:\n        return False\n\n    if a == b == c:\n        return True\n\n    if a == b or b == c or a == c:\n        return True\n\n    return False\n\n\nif __name__ == '__main__':\n    a, b, c = map(int, input().split())\n    print(check_triangle(a, b, c))"
    },
    {
      "rank": 62,
      "score": 8.212735598038213,
      "candidate": "def is_isosceles_triangle(a, b, c):\n    \"\"\"\n    >>> is_isosceles_triangle(3, 4, 5)\n    False\n    >>> is_isosceles_triangle(4, 4, 4)\n    True\n    \"\"\"\n    if a == b or b == c or c == a:\n        return True\n    else:\n        return False\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 63,
      "score": 8.211579567659316,
      "candidate": "def isosceles(a, b, c):\n    if a == b or b == c or a == c:\n        return True\n    else:\n        return False\n\n\nprint(isosceles(4, 5, 3))"
    },
    {
      "rank": 64,
      "score": 8.209707251476969,
      "candidate": "def isosceles(side1, side2, side3):\n    if side1 == side2 or side2 == side3:\n        print(\"It is an isosceles triangle\")\n    else:\n        print(\"It is not an isosceles triangle\")\n\ndef test_isosceles():\n    assert isosceles(1, 2, 3) == \"It is not an isosceles triangle\"\n    assert isosceles(1, 2, 2) == \"It is an isosceles triangle\"\n    assert isosceles(3, 3, 3) == \"It is an isosceles triangle\"\n\nif __name__ == '__main__':\n    test_isosceles()"
    },
    {
      "rank": 65,
      "score": 8.2048573255218,
      "candidate": "def isosceles(a,b,c):\n    if a == b or b == c or a == c:\n        print(\"Isosceles\")\n    else:\n        print(\"Not Isosceles\")\n\nisosceles(2,3,4)"
    },
    {
      "rank": 66,
      "score": 8.172253082181854,
      "candidate": "def is_isosceles(a, b, c):\n    if a == b or b == c or a == c:\n        return True\n    else:\n        return False\n\n\nprint(is_isosceles(3, 4, 5))\nprint(is_isosceles(4, 3, 4))\nprint(is_isosceles(5, 4, 3))"
    },
    {
      "rank": 67,
      "score": 8.163300679823958,
      "candidate": "def is_isosceles(a, b, c):\n    if a == b or b == c or a == c:\n        return True\n    return False\n\n\nif __name__ == \"__main__\":\n    assert is_isosceles(3, 4, 5) == False\n    assert is_isosceles(3, 4, 4) == True\n    assert is_isosceles(4, 3, 4) == True"
    },
    {
      "rank": 68,
      "score": 8.144125099485041,
      "candidate": "from typing import Tuple\n\n\ndef check_triangle(a: int, b: int, c: int) -> Tuple[bool, str]:\n    \"\"\"Check if the triangle is isosceles or not.\"\"\"\n    if a + b <= c or b + c <= a or a + c <= b:\n        return False, \"Not a triangle\"\n\n    if a == b and b == c:\n        return True, \"Isosceles\"\n\n    if a == b or b == c or a == c:\n        return True, \"Isosceles\"\n\n    return False, \"Not Isosceles\"\n\n\nif __name__ == \"__main__\":\n    print(check_triangle(5, 6, 7))\n    print(check_triangle(5, 5, 7))"
    },
    {
      "rank": 69,
      "score": 8.143591138329747,
      "candidate": "def isosceles(a, b, c):\n    if a == b or b == c or a == c:\n        return \"Isosceles\"\n    return \"Not Isosceles\"\n\n\nif __name__ == \"__main__\":\n    a, b, c = 3, 3, 4\n    print(isosceles(a, b, c))"
    },
    {
      "rank": 70,
      "score": 8.121884567141883,
      "candidate": "def is_isosceles(a, b, c):\n    if a == b or b == c or a == c:\n        return True\n    else:\n        return False"
    },
    {
      "rank": 71,
      "score": 8.105983444291466,
      "candidate": "def is_triangle(a, b, c):\n    \"\"\"\n    Check if the triangle is isosceles or not.\n\n    >>> is_triangle(3, 4, 5)\n    False\n    >>> is_triangle(3, 3, 5)\n    True\n    >>> is_triangle(3, 3, 3)\n    True\n    \"\"\"\n    return a**2 + b**2 == c**2 or b**2 + c**2 == a**2 or a**2 + c**2 == b**2\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 72,
      "score": 8.08452234024709,
      "candidate": "def is_isosceles(a, b, c):\n    return a == b or b == c or a == c\n\n\ndef is_isosceles_v2(a, b, c):\n    return a == b or b == c or c == a"
    },
    {
      "rank": 73,
      "score": 8.024835682833125,
      "candidate": "def is_isoceles(a, b, c):\n    if a == b or b == c or a == c:\n        return True\n    return False\n\ndef check_triangle(a, b, c):\n    if a + b > c and a + c > b and b + c > a:\n        return True\n    return False\n\ndef triangle(a, b, c):\n    if is_isoceles(a, b, c):\n        print(\"The triangle is isosceles\")\n    elif check_triangle(a, b, c):\n        print(\"The triangle is valid\")\n    else:\n        print(\"The triangle is not valid\")\n\ntriangle(5, 5, 10)\ntriangle(5, 5, 6)\ntriangle(10, 10, 10)"
    },
    {
      "rank": 74,
      "score": 7.990432406683839,
      "candidate": "def is_isocelas(a, b, c):\n    if a == b and b == c:\n        print(\"Isosceles\")\n    else:\n        print(\"Not isocelas\")\n\n\nis_isocelas(4, 4, 4)"
    },
    {
      "rank": 75,
      "score": 7.938028884277233,
      "candidate": "def is_isosceles(a, b, c):\n    return a == b or b == c or a == c\n\n\ndef main():\n    a = int(input(\"Enter first side: \"))\n    b = int(input(\"Enter second side: \"))\n    c = int(input(\"Enter third side: \"))\n\n    if is_isosceles(a, b, c):\n        print(\"The triangle is isosceles\")\n    else:\n        print(\"The triangle is not isosceles\")\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 76,
      "score": 7.915588979966494,
      "candidate": "def is_isosceles(a, b, c):\n    return a == b or b == c or a == c\n\n\ndef is_isosceles_with_set(a, b, c):\n    return len(set([a, b, c])) < 3\n\n\nassert is_isosceles(1, 2, 3) is False\nassert is_isosceles(1, 2, 2) is True\nassert is_isosceles(2, 2, 2) is True\n\nassert is_isosceles_with_set(1, 2, 3) is False\nassert is_isosceles_with_set(1, 2, 2) is True\nassert is_isosceles_with_set(2, 2, 2) is True"
    },
    {
      "rank": 77,
      "score": 7.8912769574414305,
      "candidate": "def is_isosceles(a, b, c):\n    if a == b or b == c or a == c:\n        return True\n    return False\n\ndef main():\n    a = int(input(\"Enter first side: \"))\n    b = int(input(\"Enter second side: \"))\n    c = int(input(\"Enter third side: \"))\n    if is_isosceles(a, b, c):\n        print(\"Is isosceles\")\n    else:\n        print(\"Not isosceles\")\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 78,
      "score": 7.868947655733293,
      "candidate": "def check_triangle(s1, s2, s3):\n    # Write your code here.\n    if s1>s2+s3 or s2>s1+s3 or s3>s1+s2:\n        print(\"Invalid triangle\")\n        return\n    if s1==s2==s3:\n        print(\"Equilateral triangle\")\n    elif s1==s2 or s1==s3 or s2==s3:\n        print(\"Isosceles triangle\")\n    else:\n        print(\"Scalene triangle\")\n\ncheck_triangle(2,3,3)\ncheck_triangle(3,3,2)\ncheck_triangle(2,2,2)\ncheck_triangle(1,2,3)\ncheck_triangle(1,1,1)"
    },
    {
      "rank": 79,
      "score": 7.84634113240411,
      "candidate": "def check_triangle(x, y, z):\n    return (x + y) > z and (x + z) > y and (y + z) > x\n\n\nif __name__ == '__main__':\n    print(check_triangle(3, 3, 3))\n    print(check_triangle(1, 2, 2))\n    print(check_triangle(1, 2, 1))"
    },
    {
      "rank": 80,
      "score": 7.834022619458933,
      "candidate": "def is_isosceles(a, b, c):\n    \"\"\"\n    :param a: side a\n    :param b: side b\n    :param c: side c\n    :return: bool\n    \"\"\"\n    if a == b or a == c or b == c:\n        print(\"Isosceles\")\n    else:\n        print(\"Not isosceles\")\n\n\ndef main():\n    is_isosceles(1, 2, 3)\n    is_isosceles(2, 2, 3)\n    is_isosceles(1, 2, 2)\n    is_isosceles(1, 1, 1)\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 81,
      "score": 7.780351419995229,
      "candidate": "def check_triangle_type(a, b, c):\n    \"\"\"\n    >>> check_triangle_type(1, 2, 2)\n    'isosceles'\n    >>> check_triangle_type(1, 1, 1)\n    'isosceles'\n    >>> check_triangle_type(1, 2, 3)\n    'not a triangle'\n    >>> check_triangle_type(0, 0, 0)\n    'not a triangle'\n    \"\"\"\n    if a <= 0 or b <= 0 or c <= 0:\n        return \"not a triangle\"\n    if a + b <= c:\n        return \"not a triangle\"\n    if a + c <= b:\n        return \"not a triangle\"\n    if b + c <= a:\n        return \"not a triangle\"\n    if a == b == c:\n        return \"equilateral\"\n    if a == b or a == c or b == c:\n        return \"isosceles\"\n    return \"scalene\"\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 82,
      "score": 7.738292593776799,
      "candidate": "def is_isosceles(side1, side2, side3):\n    return side1 == side2 or side2 == side3 or side1 == side3\n\n\ndef is_triangle(side1, side2, side3):\n    return side1 + side2 > side3 and side2 + side3 > side1 and side1 + side3 > side2\n\n\ndef is_isosceles_triangle(side1, side2, side3):\n    return is_triangle(side1, side2, side3) and is_isosceles(side1, side2, side3)\n\n\ndef main():\n    print(\"Is the triangle isosceles?\")\n    print(is_isosceles_triangle(5, 5, 5))  # True\n    print(is_isosceles_triangle(5, 5, 6))  # False\n    print(is_isosceles_triangle(5, 6, 6))  # False\n    print(is_isosceles_triangle(6, 6, 5))  # True\n    print(is_isosceles_triangle(5, 6, 7))  # False\n    print(is_isosceles_triangle(7, 6, 5))  # False\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 83,
      "score": 7.7320703513377165,
      "candidate": "def isosceles(x, y, z):\n    if x == y or x == z or y == z:\n        return True\n    return False\n\n\nprint(isosceles(5, 4, 4))"
    },
    {
      "rank": 84,
      "score": 7.705183449260731,
      "candidate": "def isosceles(a, b, c):\n    return a == b or a == c or b == c\n\n\ndef is_triangle(a, b, c):\n    return a + b > c and a + c > b and b + c > a\n\n\ndef isosceles_triangle(a, b, c):\n    return is_triangle(a, b, c) and isosceles(a, b, c)"
    },
    {
      "rank": 85,
      "score": 7.5819855281879285,
      "candidate": "def isosceles_triangle(a, b, c):\n    if a == b or b == c or a == c:\n        return True\n    else:\n        return False"
    },
    {
      "rank": 86,
      "score": 7.562924366763077,
      "candidate": "def isosceles_triangle(a, b, c):\n    if a >= b and a >= c:\n        if b >= a and b >= c:\n            return \"b and c\"\n        elif c >= b and c >= a:\n            return \"b and a\"\n        else:\n            return \"a and c\"\n    elif b >= a and b >= c:\n        if a >= b and a >= c:\n            return \"a and c\"\n        elif c >= a and c >= b:\n            return \"a and b\"\n        else:\n            return \"b and c\"\n    else:\n        if a >= b and a >= c:\n            return \"a and b\"\n        elif b >= a and b >= c:\n            return \"a and b\"\n        else:\n            return \"b and c\"\n\n\nprint(isosceles_triangle(3, 4, 5))"
    },
    {
      "rank": 87,
      "score": 7.4878043221155455,
      "candidate": "class Triangle:\n    def __init__(self, a, b, c):\n        self.a = a\n        self.b = b\n        self.c = c\n\n    def is_isosceles(self):\n        if self.a == self.b or self.b == self.c or self.c == self.a:\n            return True\n        return False\n\n\nif __name__ == \"__main__\":\n    assert Triangle(4, 5, 6).is_isosceles() == False\n    assert Triangle(5, 5, 5).is_isosceles() == True\n    assert Triangle(5, 4, 4).is_isosceles() == True\n    assert Triangle(4, 4, 5).is_isosceles() == True"
    },
    {
      "rank": 88,
      "score": 7.464609382504557,
      "candidate": "def isosceles(a, b, c):\n    \"\"\"\n    Check if the triangle is isosceles or not.\n    \"\"\"\n    if a == b or b == c or a == c:\n        return True\n    return False\n\n\ndef main():\n    a = int(input(\"Enter a: \"))\n    b = int(input(\"Enter b: \"))\n    c = int(input(\"Enter c: \"))\n    if isosceles(a, b, c):\n        print(\"Isosceles\")\n    else:\n        print(\"Not isosceles\")\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 89,
      "score": 7.4506599871439985,
      "candidate": "from math import sqrt\n\n\ndef is_triangle(a, b, c):\n    return a + b > c and a + c > b and b + c > a\n\n\ndef isosceles(a, b, c):\n    if is_triangle(a, b, c):\n        return (a == b == c or\n                a == b != c or\n                a != b == c or\n                a == b != c != a or\n                a != b == c != a)\n    return False\n\n\ndef pythagoras(a, b, c):\n    return a**2 + b**2 == c**2\n\n\ndef is_isosceles(a, b, c):\n    return pythagoras(a, b, c) and isosceles(a, b, c)\n\n\nif __name__ == '__main__':\n    a, b, c = map(int, input().split())\n    print(is_isosceles(a, b, c))"
    },
    {
      "rank": 90,
      "score": 7.134571892399572,
      "candidate": "def isosceles(side1, side2, side3):\n    if side1 == side2 or side2 == side3 or side1 == side3:\n        print(\"Isosceles\")\n    else:\n        print(\"Not isosceles\")\n\n\nisosceles(2, 2, 2)\nisosceles(3, 3, 3)\nisosceles(3, 2, 2)"
    },
    {
      "rank": 91,
      "score": 3.0,
      "candidate": "def isosceles_triangle(a, b, c):\n    return a == b or a == c or b == c\n\n\ndef test_isosceles_triangle():\n    assert isosceles_triangle(1, 1, 1)\n    assert isosceles_triangle(5, 5, 5)\n    assert isosceles_triangle(5, 6, 6)\n    assert not isosceles_triangle(1, 2, 3)\n    assert not isosceles_triangle(1, 2, 2)"
    },
    {
      "rank": 92,
      "score": 3.0,
      "candidate": "def is_isosceles(side1: int, side2: int, side3: int) -> bool:\n    \"\"\"\n    >>> is_isosceles(2, 3, 4)\n    False\n    >>> is_isosceles(2, 2, 4)\n    True\n    >>> is_isosceles(2, 2, 2)\n    True\n    \"\"\"\n    if side1 == side2 or side1 == side3 or side2 == side3:\n        return True\n    return False\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 93,
      "score": 3.0,
      "candidate": "def is_isosceles(a: int, b: int, c: int) -> bool:\n    \"\"\"Check if the triangle is isosceles or not.\n\n    Args:\n        a (int): length of the first side\n        b (int): length of the second side\n        c (int): length of the third side\n\n    Returns:\n        bool: is isosceles or not\n    \"\"\"\n    return a == b or b == c or a == c\n\n\ndef main():\n    a, b, c = 3, 4, 5\n    print(is_isosceles(a, b, c))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 94,
      "score": 3.0,
      "candidate": "def is_triangle(sides):\n    return len(set(sides)) == 1\n\n\ndef is_isoceles(sides):\n    return len(set(sides)) == 2 and max(sides) == 2\n\n\ndef is_isosceles(sides):\n    return len(set(sides)) == 2 and max(sides) == 2\n\n\ndef isosceles(sides):\n    return len(set(sides)) == 2 and max(sides) == 2\n\n\ndef is_scalene(sides):\n    return len(set(sides)) == 3\n\n\ndef main():\n    sides = [1, 2, 2]\n    print(is_isosceles(sides))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 95,
      "score": 3.0,
      "candidate": "def is_isosceles(a, b, c):\n    return a == b or b == c or a == c\n\n\ndef is_triangle(a, b, c):\n    return a + b > c and b + c > a and a + c > b\n\n\ndef is_valid_triangle(a, b, c):\n    return is_isosceles(a, b, c) and is_triangle(a, b, c)\n\n\ndef main():\n    a = int(input())\n    b = int(input())\n    c = int(input())\n    if is_valid_triangle(a, b, c):\n        print(\"YES\")\n    else:\n        print(\"NO\")\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 96,
      "score": 3.0,
      "candidate": "def isosceles(a, b, c):\n    if a == b or a == c or b == c:\n        return True\n    return False\n\ndef isosceles2(a, b, c):\n    return a == b or a == c or b == c\n\ndef isosceles3(a, b, c):\n    return (a == b) or (a == c) or (b == c)\n\ndef isosceles4(a, b, c):\n    return a == b or a == c or b == c\n\ndef isosceles5(a, b, c):\n    return (a == b) or (a == c) or (b == c)\n\ndef isosceles6(a, b, c):\n    return (a == b) or (a == c) or (b == c)\n\ndef isosceles7(a, b, c):\n    return (a == b) or (a == c) or (b == c)\n\ndef isosceles8(a, b, c):\n    return (a == b) or (a == c) or (b == c)\n\ndef isosceles9(a, b, c):\n    return (a == b) or (a == c) or (b == c)\n\ndef isosceles10(a, b, c):\n    return (a == b) or (a == c) or (b == c)\n\ndef isosceles11(a, b, c):\n    return (a == b) or (a == c) or (b == c)\n\ndef isosceles12(a, b, c):\n    return (a == b) or (a == c) or (b == c)\n\ndef isosceles13(a, b, c):\n    return (a == b) or (a == c) or (b == c)\n\ndef isosceles14(a, b, c):\n    return (a == b) or (a == c) or (b == c)\n\ndef isosceles15(a, b, c):\n    return (a == b) or (a =="
    },
    {
      "rank": 97,
      "score": 3.0,
      "candidate": "def is_isoceles_triangle(side_1: int, side_2: int, side_3: int) -> bool:\n    \"\"\"\n    >>> is_isoceles_triangle(3, 4, 5)\n    False\n    >>> is_isoceles_triangle(4, 4, 5)\n    True\n    \"\"\"\n    if side_1 == side_2 or side_2 == side_3 or side_1 == side_3:\n        return True\n    return False\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 98,
      "score": 3.0,
      "candidate": "def is_isosceles(a, b, c):\n    \"\"\"\n    >>> is_isosceles(1, 2, 3)\n    False\n    >>> is_isosceles(3, 2, 2)\n    True\n    >>> is_isosceles(2, 2, 3)\n    True\n    >>> is_isosceles(2, 3, 2)\n    True\n    >>> is_isosceles(3, 3, 3)\n    False\n    \"\"\"\n    if a == b or b == c or a == c:\n        return True\n    return False\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 99,
      "score": 3.0,
      "candidate": "def is_triangle(a, b, c):\n    return a + b > c and a + c > b and b + c > a\n\n\ndef isosceles(a, b, c):\n    return is_triangle(a, b, c) and a == b or is_triangle(a, b, c) and b == c or is_triangle(a, b, c) and a == c\n\n\ndef test_isosceles(a, b, c, expected):\n    answer = isosceles(a, b, c)\n    if answer == expected:\n        return True\n    else:\n        print(f\"{a}, {b}, {c} should be {expected}, but answer was {answer}\")\n        return False\n\n\ndef main():\n    test_pass = 0\n    test_count = 0\n\n    a, b, c = 10, 20, 20\n    test_count += 1\n    test_pass += test_isosceles(a, b, c, True)\n\n    a, b, c = 10, 20, 30\n    test_count += 1\n    test_pass += test_isosceles(a, b, c, False)\n\n    a, b, c = 10, 20, 25\n    test_count += 1\n    test_pass += test_isosceles(a, b, c, False)\n\n    a, b, c = 10, 20, 15\n    test_count += 1\n    test_pass += test_isosceles(a, b, c, False)\n\n    a, b, c = 10, 10, 20\n    test_count += 1\n    test_pass += test_isosceles(a, b, c, True)\n\n    a, b, c = 10, 20, 10\n    test_count += 1\n    test_pass += test_isosceles(a, b, c, False)\n\n    a, b, c = 10, 10, 10"
    },
    {
      "rank": 100,
      "score": 3.0,
      "candidate": "def isosceles(a, b, c):\n    \"\"\"\n    Checks if the triangle is isosceles\n\n    >>> isosceles(1, 1, 1)\n    isosceles\n    >>> isosceles(1, 2, 3)\n    not isosceles\n    >>> isosceles(1, 2, 4)\n    not isosceles\n    >>> isosceles(1, 3, 4)\n    not isosceles\n    >>> isosceles(1, 2, 3)\n    not isosceles\n    >>> isosceles(2, 2, 3)\n    isosceles\n    >>> isosceles(2, 3, 3)\n    isosceles\n    >>> isosceles(2, 3, 4)\n    not isosceles\n    >>> isosceles(2, 4, 4)\n    isosceles\n    >>> isosceles(3, 4, 4)\n    isosceles\n    >>> isosceles(2, 3, 4)\n    not isosceles\n    \"\"\"\n    if a == b == c:\n        print(\"isosceles\")\n    else:\n        print(\"not isosceles\")\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    }
  ]
}