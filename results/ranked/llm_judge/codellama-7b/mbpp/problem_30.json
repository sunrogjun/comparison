{
  "timestamp": "2025-09-14T22:31:40.659836",
  "method": "improved_llm_judge",
  "judge_model": "codellama/CodeLlama-7b-Python-hf",
  "target_model": "codellama-7b",
  "dataset": "mbpp",
  "problem_number": 30,
  "total_candidates": 100,
  "results": [
    {
      "rank": 1,
      "score": 10.0,
      "candidate": "def even_filter(lst):\n    return list(filter(lambda x: x%2==0, lst))\n\nif __name__ == \"__main__\":\n    print(even_filter([1, 2, 3, 4, 5, 6, 7, 8]))"
    },
    {
      "rank": 2,
      "score": 10.0,
      "candidate": "def filter_even(arr):\n    return list(filter(lambda x: x%2==0, arr))\n\n\nif __name__ == '__main__':\n    print(filter_even([1,2,3,4,5,6,7,8,9,10]))"
    },
    {
      "rank": 3,
      "score": 10.0,
      "candidate": "def even(nums):\n    \"\"\"\n    Filter even numbers from the list.\n    \"\"\"\n    return list(filter(lambda num: num % 2 == 0, nums))\n\ndef main():\n    \"\"\"\n    Print filtered list.\n    \"\"\"\n    nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    print(even(nums))\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 4,
      "score": 10.0,
      "candidate": "\"\"\"Question:\nWrite a function to filter even numbers using lambda function.\nHints:\nUse filter() to filter elements from a list.\nUse lambda to create anonymous functions.\n\n\"\"\"\ndef even(n):\n    return n%2 == 0\nL = [1,2,3,4,5,6,7,8,9,10]\nprint filter(lambda x: even(x), L)"
    },
    {
      "rank": 5,
      "score": 10.0,
      "candidate": "from functools import reduce\n\n\ndef lambda_filter(seq, func):\n    return reduce(lambda x, y: x + [y] if func(y) else x, seq, [])\n\n\ndef main():\n    result = lambda_filter([1, 2, 3, 4, 5, 6, 7, 8, 9], lambda x: x % 2 == 0)\n    print(result)\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 6,
      "score": 10.0,
      "candidate": "def filter_even(arr):\n    return list(filter(lambda x: x % 2 == 0, arr))\n\n\nif __name__ == \"__main__\":\n    arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    print(filter_even(arr))"
    },
    {
      "rank": 7,
      "score": 10.0,
      "candidate": "def filter_even(list):\n    return list(filter(lambda x: x % 2 == 0, list))\n\n\ndef main():\n    print(\"[1,2,3,4,5,6,7,8,9] -> \" + str(filter_even([1, 2, 3, 4, 5, 6, 7, 8, 9])))\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 8,
      "score": 10.0,
      "candidate": "def even_numbers(input_list):\n    return list(filter(lambda x: x % 2 == 0, input_list))\n\nprint(even_numbers([3, 4, 5, 6, 7, 8, 9]))"
    },
    {
      "rank": 9,
      "score": 10.0,
      "candidate": "\"\"\"Question:\nWrite a function to filter even numbers using lambda function.\nHints:\nUse filter() to filter elements from a list.\nUse lambda to define anonymous functions.\n\n\"\"\""
    },
    {
      "rank": 10,
      "score": 10.0,
      "candidate": "def filter_even(nums):\n    return list(filter(lambda x: x%2 == 0, nums))\n\nnums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nprint(filter_even(nums))"
    },
    {
      "rank": 11,
      "score": 10.0,
      "candidate": "def filter_even(list):\n    return list(filter(lambda x: x % 2 == 0, list))\n\n\ndef main():\n    list = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    print(\"List:\", list)\n    print(\"Even numbers:\")\n    print(filter_even(list))\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 12,
      "score": 10.0,
      "candidate": "def even_nums(nums):\n    return list(filter(lambda x: x % 2 == 0, nums))\n\nnums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nprint(\"Even numbers in the list:\", even_nums(nums))"
    },
    {
      "rank": 13,
      "score": 10.0,
      "candidate": "def even_num(nums):\n    even_list = []\n    for num in nums:\n        if num % 2 == 0:\n            even_list.append(num)\n    return even_list\n\n\ndef main():\n    nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    even_nums = even_num(nums)\n    print(even_nums)\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 14,
      "score": 10.0,
      "candidate": "\"\"\"Question:\nWrite a function to filter even numbers using lambda function.\nHints:\nUse filter() to filter elements from a list.\nUse lambda to create anonymous functions.\n\n\"\"\""
    },
    {
      "rank": 15,
      "score": 10.0,
      "candidate": "\"\"\"Question:\nWrite a function to filter even numbers using lambda function.\nHints:\nUse filter() to filter some elements of a list.\nUse lambda to create anonymous functions.\n\n\"\"\"\ndef even_num(a):\n    return a%2 == 0\n\nprint filter(lambda x: even_num(x), [1,2,3,4,5,6,7,8,9,10])"
    },
    {
      "rank": 16,
      "score": 10.0,
      "candidate": "def filter_even_nums(lst: list) -> list:\n    return list(filter(lambda x: x % 2 == 0, lst))\n\n\nif __name__ == \"__main__\":\n    print(filter_even_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))"
    },
    {
      "rank": 17,
      "score": 10.0,
      "candidate": "def main():\n    numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    new_list = list(filter(lambda x: x % 2 == 0, numbers))\n    print(new_list)\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 18,
      "score": 10.0,
      "candidate": "numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\n# filter(function, iterable)\n# filter(lambda function, iterable)\n\nresult = list(filter(lambda x: x % 2 == 0, numbers))\n\nprint(result)"
    },
    {
      "rank": 19,
      "score": 10.0,
      "candidate": "numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\n\ndef filter_even(nums):\n    return list(filter(lambda x: x % 2 == 0, nums))\n\n\nif __name__ == \"__main__\":\n    print(filter_even(numbers))"
    },
    {
      "rank": 20,
      "score": 10.0,
      "candidate": "def filter_even(number):\n    return lambda x: x % 2 == 0\n\n\ndef main():\n    result = filter(filter_even(2), [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n    print(list(result))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 21,
      "score": 10.0,
      "candidate": "def filter_even_nums(arr):\n    return filter(lambda x: x%2==0, arr)\n\narr = [1, 2, 3, 4, 5, 6, 7, 8]\nprint(list(filter_even_nums(arr)))"
    },
    {
      "rank": 22,
      "score": 10.0,
      "candidate": "def filter_even(list):\n    return list(filter(lambda x: x % 2 == 0, list))\n\n\nif __name__ == '__main__':\n    print(filter_even([1, 2, 3, 4, 5, 6, 7, 8, 9]))"
    },
    {
      "rank": 23,
      "score": 10.0,
      "candidate": "def even_num(a):\n    return lambda x: x % 2 == 0\n\ndef main():\n    list_a = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    print(list(filter(even_num(list_a), list_a)))\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 24,
      "score": 10.0,
      "candidate": "def even_num(numbers):\n    return list(filter(lambda x: x % 2 == 0, numbers))\n\ndef main():\n    print(even_num([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 25,
      "score": 10.0,
      "candidate": "def filter_even(arr):\n    return list(filter(lambda x: x%2==0, arr))\n\narr = [1,2,3,4,5,6,7,8]\nprint(filter_even(arr))"
    },
    {
      "rank": 26,
      "score": 10.0,
      "candidate": "def filter_even(lst):\n    return list(filter(lambda x: x % 2 == 0, lst))\n\ndef main():\n    list_1 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    print(filter_even(list_1))\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 27,
      "score": 10.0,
      "candidate": "from functools import reduce\n\n\ndef filter_even(nums):\n    return list(filter(lambda num: num % 2 == 0, nums))\n\n\ndef main():\n    nums = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    print(f\"Filtered list: {filter_even(nums)}\")\n    print(f\"Using reduce: {reduce(lambda nums, num: nums + [num] if num % 2 == 0 else nums, nums, [])}\")\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 28,
      "score": 10.0,
      "candidate": "def filter_even(numbers):\n    return list(filter(lambda x: x % 2 == 0, numbers))\n\n\ndef main():\n    print(\"[1, 2, 3, 4, 5] -> \", filter_even([1, 2, 3, 4, 5]))\n    print(\"[2, 3, 4, 5, 6] -> \", filter_even([2, 3, 4, 5, 6]))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 29,
      "score": 10.0,
      "candidate": "def even_numbers(nums):\n    return list(filter(lambda num: num%2==0, nums))\n\nprint(even_numbers([3, 4, 5, 6, 7, 8, 9]))"
    },
    {
      "rank": 30,
      "score": 10.0,
      "candidate": "def filter_even_numbers(arr):\n    return list(filter(lambda x: x % 2 == 0, arr))\n\n\ndef main():\n    print(\"Print even numbers from list:\")\n    print(filter_even_numbers([3, 4, 5, 6, 7, 8, 9]))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 31,
      "score": 10.0,
      "candidate": "def filter_even(nums):\n    return filter(lambda x: x % 2 == 0, nums)\n\ndef main():\n    nums = [1, 2, 3, 4, 5, 6]\n    filtered_nums = list(filter_even(nums))\n    print(filtered_nums)\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 32,
      "score": 10.0,
      "candidate": "def even_num(lst):\n    return list(filter(lambda x: (x%2==0), lst))\n\ndef main():\n    lst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    print(even_num(lst))\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 33,
      "score": 10.0,
      "candidate": "\"\"\"Question:\nWrite a function to filter even numbers using lambda function.\nHints:\nUse filter() to filter elements from a list.\nUse lambda to create anonymous functions.\n\n\"\"\""
    },
    {
      "rank": 34,
      "score": 10.0,
      "candidate": "def filter_even_numbers(arr):\n    \"\"\"Filter even numbers from the array.\"\"\"\n    return list(filter(lambda x: x % 2 == 0, arr))\n\ndef main():\n    \"\"\"Call the main function.\"\"\"\n    list_of_numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    print(filter_even_numbers(list_of_numbers))\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 35,
      "score": 10.0,
      "candidate": "def filter_even(nums):\n    return list(filter(lambda x: x % 2 == 0, nums))\n\nif __name__ == \"__main__\":\n    print(filter_even([3, 4, 5, 6, 7, 8, 9]))"
    },
    {
      "rank": 36,
      "score": 10.0,
      "candidate": "\"\"\"Question:\nWrite a function to filter even numbers using lambda function.\nHints:\nUse filter() to filter some elements from a list.\n\n\"\"\"\ndef lambda_filter(li):\n\treturn list(filter(lambda x: x%2==0, li))\nli = [1,2,3,4,5,6,7,8,9,10]\nprint lambda_filter(li)"
    },
    {
      "rank": 37,
      "score": 10.0,
      "candidate": "def filter_even(nums):\n    return list(filter(lambda x: x % 2 == 0, nums))\n\n\ndef main():\n    print(filter_even([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 38,
      "score": 10.0,
      "candidate": "from functools import reduce\n\n\ndef filter_even(nums):\n    return list(filter(lambda x: x % 2 == 0, nums))\n\n\ndef main():\n    list_ = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    result = filter_even(list_)\n    print(f\"Even numbers in the list: {result}\")\n\n    list_ = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    result = reduce(lambda x, y: x + y, filter_even(list_))\n    print(f\"Sum of even numbers in the list: {result}\")\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 39,
      "score": 10.0,
      "candidate": "\"\"\"Question:\nWrite a function to filter even numbers using lambda function.\nHints:\nUse filter() to filter elements from a list.\nUse lambda to create anonymous functions.\n\n\"\"\"\ndef even(n):\n    return n%2 == 0\nprint filter(lambda x: even(x), [1,2,3,4,5,6,7,8,9])"
    },
    {
      "rank": 40,
      "score": 10.0,
      "candidate": "\"\"\"Question:\nWrite a function to filter even numbers using lambda function.\nHints:\nUse filter() to filter elements from a list.\nUse lambda to define anonymous functions.\n\n\"\"\""
    },
    {
      "rank": 41,
      "score": 10.0,
      "candidate": "def filter_even(nums):\n    return list(filter(lambda num: num % 2 == 0, nums))\n\n\nif __name__ == '__main__':\n    print(filter_even([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))"
    },
    {
      "rank": 42,
      "score": 10.0,
      "candidate": "def filter_even_numbers(arr):\n    return list(filter(lambda x: x % 2 == 0, arr))\n\nprint(filter_even_numbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))"
    },
    {
      "rank": 43,
      "score": 10.0,
      "candidate": "from functools import reduce\n\n\ndef filter_even(numbers):\n    return list(filter(lambda x: x % 2 == 0, numbers))\n\n\ndef main():\n    result = filter_even([1, 2, 3, 4, 5, 6, 7, 8, 9])\n    assert result == [2, 4, 6, 8]\n    print(\"Test Success!\")\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 44,
      "score": 10.0,
      "candidate": "def filter_even(nums):\n    return [num for num in nums if num % 2 == 0]\n\ndef main():\n    nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    print(filter_even(nums))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 45,
      "score": 10.0,
      "candidate": "def filter_even(arr):\n    return list(filter(lambda x: x%2 == 0, arr))\n\nif __name__ == '__main__':\n    arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    print(filter_even(arr))"
    },
    {
      "rank": 46,
      "score": 9.0,
      "candidate": "def filter_even_lambda(input_list):\n    return list(filter(lambda x: x%2 == 0, input_list))\n\nprint(filter_even_lambda([1, 2, 3, 4, 5, 6, 7, 8]))"
    },
    {
      "rank": 47,
      "score": 8.0,
      "candidate": "def even_filter(list):\n    return list(filter(lambda x: x%2==0, list))\n\n\n\nif __name__ == '__main__':\n    print(even_filter([1,2,3,4,5,6,7,8,9]))"
    },
    {
      "rank": 48,
      "score": 8.0,
      "candidate": "def filter_even(nums):\n    return list(filter(lambda x: x % 2 == 0, nums))\n\nnums = [1, 2, 3, 4, 5, 6, 7, 8]\nprint(filter_even(nums))"
    },
    {
      "rank": 49,
      "score": 8.0,
      "candidate": "def filter_even(nums):\n    return list(filter(lambda num: num % 2 == 0, nums))\n\n\nif __name__ == \"__main__\":\n    print(filter_even([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))"
    },
    {
      "rank": 50,
      "score": 8.0,
      "candidate": "def filter_even(nums):\n    return list(filter(lambda num: num%2==0, nums))\n\nnums = [1,2,3,4,5,6,7,8,9,10]\n\nprint(filter_even(nums))"
    },
    {
      "rank": 51,
      "score": 8.0,
      "candidate": "def even_filter(numbers):\n    \"\"\"Returns a list of even numbers.\"\"\"\n    return list(filter(lambda x: x%2==0, numbers))\n\ndef main():\n    \"\"\"Main function\"\"\"\n    numbers = [10, 20, 33, 40, 55]\n    print(even_filter(numbers))\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 52,
      "score": 8.0,
      "candidate": "def even(lst):\n    return list(filter(lambda x: x%2==0, lst))\n\nif __name__ == '__main__':\n    print(even([1, 2, 3, 4, 5, 6, 7, 8, 9]))"
    },
    {
      "rank": 53,
      "score": 8.0,
      "candidate": "def filter_even(input_list):\n    return list(filter(lambda x: x % 2 == 0, input_list))\n\nprint(filter_even([3, 4, 5, 6, 7, 8]))"
    },
    {
      "rank": 54,
      "score": 8.0,
      "candidate": "numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\n# Using list comprehension\nevens = [x for x in numbers if x % 2 == 0]\nprint(evens)\n\n# Using lambda function\nevens = list(filter(lambda x: x % 2 == 0, numbers))\nprint(evens)"
    },
    {
      "rank": 55,
      "score": 8.0,
      "candidate": "numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\n\"\"\"\ndef filter_even(numbers):\n    new_list = []\n    for num in numbers:\n        if num % 2 == 0:\n            new_list.append(num)\n    return new_list\n\"\"\"\n\n# Using Lambda\n# filter_even = lambda numbers: [num for num in numbers if num % 2 == 0]\nfilter_even = lambda numbers: list(filter(lambda num: num % 2 == 0, numbers))\n\nprint(filter_even(numbers))"
    },
    {
      "rank": 56,
      "score": 8.0,
      "candidate": "# Solution\ndef filter_even(nums):\n    return list(filter(lambda x: x % 2 == 0, nums))\n\n\n# Tests\nprint(filter_even([3, 1, 4, 1, 5, 9, 2, 6, 5]))"
    },
    {
      "rank": 57,
      "score": 8.0,
      "candidate": "def filter_even_numbers(arr):\n    return list(filter(lambda x: x%2==0, arr))\n\nif __name__ == '__main__':\n    print(filter_even_numbers([1, 2, 3, 4, 5, 6, 7]))"
    },
    {
      "rank": 58,
      "score": 8.0,
      "candidate": "def filter_even(arr):\n    return list(filter(lambda x: x % 2 == 0, arr))\n\n\nprint(filter_even([1, 2, 3, 4, 5, 6, 7, 8, 9]))"
    },
    {
      "rank": 59,
      "score": 8.0,
      "candidate": "def filter_even(nums):\n    return list(filter(lambda x: x%2 == 0, nums))\n\n\nif __name__ == \"__main__\":\n    nums = [1, 2, 3, 4, 5, 6, 7, 8]\n    print(filter_even(nums))"
    },
    {
      "rank": 60,
      "score": 8.0,
      "candidate": "def even_numbers(numbers):\n    return list(filter(lambda x: x % 2 == 0, numbers))\n\n\nif __name__ == '__main__':\n    print(even_numbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))"
    },
    {
      "rank": 61,
      "score": 8.0,
      "candidate": "def even_num(num):\n    return num%2==0\n\ndef filter_even(num):\n    return list(filter(even_num, num))\n\nprint(filter_even([1,2,3,4,5,6,7,8,9]))"
    },
    {
      "rank": 62,
      "score": 8.0,
      "candidate": "from functools import reduce\n\n\ndef filter_even_numbers(lst):\n    return list(filter(lambda x: x % 2 == 0, lst))\n\n\ndef main():\n    print(filter_even_numbers([1, 2, 3, 4, 5, 6]))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 63,
      "score": 8.0,
      "candidate": "def filter_even(number):\n    return number % 2 == 0\n\n\ndef main():\n    list_of_numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    print(list(filter(lambda x: x % 2 == 0, list_of_numbers)))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 64,
      "score": 8.0,
      "candidate": "def filter_even(nums):\n    return list(filter(lambda x: x % 2 == 0, nums))\n\n\nprint(filter_even([3, 4, 5, 6, 7, 8, 9]))\nprint(filter_even([3, 4, 5, 6, 7, 8, 9, 10]))\nprint(filter_even([3, 4, 5, 6, 7, 8, 9, 10, 11, 12]))"
    },
    {
      "rank": 65,
      "score": 8.0,
      "candidate": "def even_filter(number):\n    if number % 2 == 0:\n        return True\n    return False\n\n\nif __name__ == '__main__':\n    print(list(filter(even_filter, [1, 2, 3, 4, 5, 6, 7, 8, 9])))"
    },
    {
      "rank": 66,
      "score": 8.0,
      "candidate": "def filter_even_numbers(list_of_numbers):\n    \"\"\"\n    Returns a list of even numbers from a list of numbers.\n\n    >>> filter_even_numbers([1, 2, 3, 4, 5])\n    [2, 4]\n    \"\"\"\n    return list(filter(lambda x: x % 2 == 0, list_of_numbers))\n\ndef filter_even_numbers_using_list_comprehension(list_of_numbers):\n    \"\"\"\n    Returns a list of even numbers from a list of numbers.\n\n    >>> filter_even_numbers_using_list_comprehension([1, 2, 3, 4, 5])\n    [2, 4]\n    \"\"\"\n    return [x for x in list_of_numbers if x % 2 == 0]\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 67,
      "score": 8.0,
      "candidate": "def filter_even(arr):\n    return list(filter(lambda x: x % 2 == 0, arr))\n\n\nif __name__ == \"__main__\":\n    print(filter_even([1, 2, 3, 4, 5, 6]))"
    },
    {
      "rank": 68,
      "score": 8.0,
      "candidate": "def filter_even_num(arr):\n    return list(filter(lambda x: x%2==0, arr))\n\n\nif __name__ == \"__main__\":\n    arr = list(map(int, input(\"Enter the array: \").split()))\n    print(\"Array after filtering even numbers:\", filter_even_num(arr))"
    },
    {
      "rank": 69,
      "score": 8.0,
      "candidate": "def even_num(num):\n    return num%2==0\n\nnums = [2, 6, 4, 10, 8, 12, 14]\n\nprint(list(filter(even_num, nums)))"
    },
    {
      "rank": 70,
      "score": 8.0,
      "candidate": "def filter_even(arr):\n    return list(filter(lambda x: x % 2 == 0, arr))\n\narr = [1, 2, 3, 4, 5, 6, 7, 8, 9]\nprint(filter_even(arr))"
    },
    {
      "rank": 71,
      "score": 8.0,
      "candidate": "def even_filter(numbers):\n    return list(filter(lambda x: x % 2 == 0, numbers))\n\n\nif __name__ == \"__main__\":\n    print(even_filter([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))"
    },
    {
      "rank": 72,
      "score": 8.0,
      "candidate": "def filter_even(arr):\n    even_numbers = list(filter(lambda x: x % 2 == 0, arr))\n    return even_numbers\n\nprint(filter_even([1, 2, 3, 4, 5]))"
    },
    {
      "rank": 73,
      "score": 8.0,
      "candidate": "def filter_even_lambda(nums):\n    return list(filter(lambda x: x % 2 == 0, nums))\n\ndef main():\n    print(filter_even_lambda([1, 2, 3, 4, 5]))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 74,
      "score": 8.0,
      "candidate": "def filter_even(nums):\n    return list(filter(lambda num: num % 2 == 0, nums))\n\n\nprint(filter_even([1, 2, 3, 4, 5]))"
    },
    {
      "rank": 75,
      "score": 8.0,
      "candidate": "# Solution\n\n\ndef filter_even(arr):\n    return list(filter(lambda num: num % 2 == 0, arr))\n\n\ndef main():\n    print(filter_even([1, 2, 3, 4, 5]))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 76,
      "score": 8.0,
      "candidate": "def filter_even(list):\n    return list(filter(lambda x: x%2 == 0, list))\n\nprint(filter_even([1,2,3,4,5]))"
    },
    {
      "rank": 77,
      "score": 8.0,
      "candidate": "def even_filter(nums):\n    return lambda num: num % 2 == 0\n\nnums = [1, 2, 3, 4, 5, 6, 7, 8]\nprint(list(filter(even_filter(nums), nums)))"
    },
    {
      "rank": 78,
      "score": 8.0,
      "candidate": "def filter_even_num(li):\n    \"\"\"\n    >>> filter_even_num([3, 4, 5, 6, 7])\n    [4, 6]\n    \"\"\"\n    return list(filter(lambda x: x%2==0, li))\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 79,
      "score": 8.0,
      "candidate": "\"\"\"Question:\nWrite a function to filter even numbers using lambda function.\nHints:\nUse filter() to filter elements from a list.\nUse lambda to create anonymous functions.\n\n\"\"\"\ndef even(n):\n\treturn lambda x: x%n == 0\n\nprint filter(even(2), range(1,10))"
    },
    {
      "rank": 80,
      "score": 8.0,
      "candidate": "def filter_even_numbers(arr):\n    return list(filter(lambda x: x % 2 == 0, arr))\n\n\nprint(filter_even_numbers([1, 2, 3, 4, 5, 6, 7]))"
    },
    {
      "rank": 81,
      "score": 8.0,
      "candidate": "def even_filter(n):\n    return n%2 == 0\n\ndef filter_even(n):\n    return list(filter(lambda x: x%2 == 0, n))\n\nif __name__ == '__main__':\n    n = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    print(filter_even(n))"
    },
    {
      "rank": 82,
      "score": 8.0,
      "candidate": "def filter_even(arr):\n    return list(filter(lambda x: x%2 == 0, arr))\n\nif __name__ == '__main__':\n    print(filter_even([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))"
    },
    {
      "rank": 83,
      "score": 8.0,
      "candidate": "def even(a):\n    return lambda x: x%a==0\n\nprint(even(2)(4))\nprint(even(3)(4))"
    },
    {
      "rank": 84,
      "score": 8.0,
      "candidate": "def even_num(nums):\n    return list(filter(lambda x: x%2==0, nums))\n\n\nif __name__ == '__main__':\n    print(\"Enter the numbers: \")\n    nums = [int(x) for x in input().split()]\n    print(\"Even numbers: \")\n    print(even_num(nums))"
    },
    {
      "rank": 85,
      "score": 8.0,
      "candidate": "def filter_even_numbers(arr):\n    return list(filter(lambda x: x%2==0, arr))\n\narr = [1, 2, 3, 4, 5, 6]\nprint(filter_even_numbers(arr))"
    },
    {
      "rank": 86,
      "score": 8.0,
      "candidate": "def filter_even(list_of_numbers):\n    even_numbers = []\n    for number in list_of_numbers:\n        if number % 2 == 0:\n            even_numbers.append(number)\n    return even_numbers\n\nlist_of_numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9]\nprint(filter_even(list_of_numbers))\n\n# using lambda\neven_numbers = list(filter(lambda x: x % 2 == 0, list_of_numbers))\nprint(even_numbers)"
    },
    {
      "rank": 87,
      "score": 8.0,
      "candidate": "def filter_even_numbers(lst):\n    \"\"\"\n    >>> filter_even_numbers([1, 2, 3, 4, 5])\n    [2, 4]\n    \"\"\"\n    return list(filter(lambda x: x%2 == 0, lst))\n\ndef main():\n    from doctest import testmod\n    testmod()\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 88,
      "score": 8.0,
      "candidate": "from functools import reduce\n\n\ndef filter_even(arr):\n    return list(filter(lambda x: x % 2 == 0, arr))\n\n\ndef main():\n    arr = [1, 2, 3, 4, 5]\n    result = reduce(lambda x, y: x + y, filter_even(arr))\n    print(result)\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 89,
      "score": 1.0,
      "candidate": "numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\n\ndef even(num):\n    return num % 2 == 0\n\n\nprint(list(filter(even, numbers)))\n\n# Or you can use lambda\n\nprint(list(filter(lambda x: x % 2 == 0, numbers)))\n\n# Or you can use map\n\nprint(list(map(lambda x: x * 3, numbers)))"
    },
    {
      "rank": 90,
      "score": 1.0,
      "candidate": "def filter_even(number):\n    return number % 2 == 0\n\nprint(list(filter(filter_even, [1,2,3,4,5,6,7,8,9])))\n\n\n\"\"\"\nWrite a function to filter even numbers and print using lambda function.\n\"\"\"\n\ndef filter_even(number):\n    return number % 2 == 0\n\nprint(list(filter(lambda number: number % 2 == 0, [1,2,3,4,5,6,7,8,9])))\n\n\"\"\"\nWrite a function to filter even numbers and print using lambda function.\n\"\"\"\n\ndef filter_even(number):\n    return number % 2 == 0\n\nprint(list(filter(lambda number: number % 2 == 0, [1,2,3,4,5,6,7,8,9])))\n\n\"\"\"\nWrite a function to filter even numbers and print using lambda function.\n\"\"\"\n\ndef filter_even(number):\n    return number % 2 == 0\n\nprint(list(filter(lambda number: number % 2 == 0, [1,2,3,4,5,6,7,8,9])))\n\n\n\"\"\"\nWrite a function to filter even numbers and print using lambda function.\n\"\"\"\n\ndef filter_even(number):\n    return number % 2 == 0\n\nprint(list(filter(lambda number: number % 2 == 0, [1,2,3,4,5,6,7,8,9])))\n\n\n\"\"\"\nWrite a function to filter even numbers and print using lambda function.\n\"\"\"\n\ndef filter_even(number):\n    return number % 2 == 0\n\nprint(list(filter(lambda number: number % 2 == 0, [1,2,3,4,5,6,7,8,9])))\n\n\n\"\"\"\nWrite a function to filter even numbers and print using lambda function.\n\"\"\"\n\ndef filter_even(number):\n    return number % 2 == 0\n\nprint(list(filter(lambda number: number % 2 == 0, [1,2"
    },
    {
      "rank": 91,
      "score": 1.0,
      "candidate": "numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\n# solution 1\n\n\ndef even_numbers(array):\n    return list(filter(lambda x: x % 2 == 0, array))\n\n\n# solution 2\n\neven_numbers = list(filter(lambda x: x % 2 == 0, numbers))\n\n# solution 3\n\neven_numbers = list(filter(lambda x: x % 2 == 0, numbers))\n\n# solution 4\n\neven_numbers = list(filter(lambda x: x % 2 == 0, numbers))\n\n# solution 5\n\neven_numbers = list(filter(lambda x: x % 2 == 0, numbers))"
    },
    {
      "rank": 92,
      "score": 1.0,
      "candidate": "def even_num_filter(num):\n    return num % 2 == 0\n\nnums = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]\n\n# Filter even numbers using lambda function\n\neven_nums = list(filter(lambda x: even_num_filter(x), nums))\nprint(even_nums)\n\n# Using map function\n\neven_nums = list(map(lambda x: x * 2, nums))\nprint(even_nums)\n\n# Using reduce function\n\nfrom functools import reduce\n\ndef add(x, y):\n    return x + y\n\nresult = reduce(add, nums)\nprint(result)\n\n# Using sorted function\n\nsorted_nums = sorted(nums)\nprint(sorted_nums)"
    },
    {
      "rank": 93,
      "score": 1.0,
      "candidate": "def filter_even(nums):\n    return filter(lambda x: x % 2 == 0, nums)\n\n\nif __name__ == \"__main__\":\n    print(list(filter_even(range(1, 21))))"
    },
    {
      "rank": 94,
      "score": 1.0,
      "candidate": "def even_num_filter(nums):\n    even_nums = []\n\n    for num in nums:\n        if num % 2 == 0:\n            even_nums.append(num)\n\n    return even_nums\n\n\nif __name__ == '__main__':\n    nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    print(even_num_filter(nums))\n\n    even_nums = list(filter(lambda x: x % 2 == 0, nums))\n    print(even_nums)"
    },
    {
      "rank": 95,
      "score": 1.0,
      "candidate": "# Solution\n\ndef even_num_filter(nums):\n    return list(filter(lambda x: x % 2 == 0, nums))\n\n# Tests\n\nprint(\"Pass\" if (5, 6, 7, 8) == even_num_filter((1, 2, 3, 4, 5, 6, 7, 8)) else \"Fail\")\nprint(\"Pass\" if (2, 4, 6) == even_num_filter((2, 3, 4, 5, 6)) else \"Fail\")\nprint(\"Pass\" if (2, 6, 8) == even_num_filter((2, 4, 6, 8)) else \"Fail\")"
    },
    {
      "rank": 96,
      "score": 1.0,
      "candidate": "def filter_even(array):\n    \"\"\"\n    :param array: list of numbers\n    :return: list of even numbers\n    \"\"\"\n    return list(filter(lambda num: num % 2 == 0, array))\n\n\nif __name__ == '__main__':\n    print(\"Example:\")\n    print(filter_even([1, 2, 3, 4, 5]))\n\n    # These \"asserts\" are used for self-checking and not for an auto-testing\n    assert filter_even([1, 2, 3, 4, 5]) == [2, 4]\n    assert filter_even([2, 4, 6]) == [2, 4, 6]\n    assert filter_even([1, 3, 5]) == []\n    print(\"Coding complete? Click 'Check' to earn cool rewards!\")"
    },
    {
      "rank": 97,
      "score": 1.0,
      "candidate": "# Solution\n\n\ndef even_filter(arr):\n    return list(filter(lambda x: x % 2 == 0, arr))\n\n\n# Tests\nprint(even_filter([3, 4, 5, 6, 7, 8]))  # [4, 6, 8]\nprint(even_filter([10, 20, 30]))  # [20]\nprint(even_filter([]))  # []"
    },
    {
      "rank": 98,
      "score": 1.0,
      "candidate": "numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\n# 1st solution\nfiltered_nums = list(filter(lambda num: num % 2 == 0, numbers))\nprint(filtered_nums)\n\n# 2nd solution\nfiltered_nums = list(map(lambda num: num * 2, numbers))\nprint(filtered_nums)"
    },
    {
      "rank": 99,
      "score": 1.0,
      "candidate": "# Solution\n\ndef filter_even_lambda(nums):\n    return list(filter(lambda num: num % 2 == 0, nums))\n\n# Tests\n\nprint(filter_even_lambda([3, 4, 5, 6]))  # [4, 6]\nprint(filter_even_lambda([1, 3, 5, 7]))  # []\nprint(filter_even_lambda([2, 4, 6, 8]))  # [2, 4, 6, 8]"
    },
    {
      "rank": 100,
      "score": 1.0,
      "candidate": "def filter_even(lst: list) -> list:\n    \"\"\"Returns a list with only even numbers from lst.\n\n    >>> filter_even([1, 2, 3, 4, 5, 6, 7, 8, 9])\n    [2, 4, 6, 8]\n    \"\"\"\n\n    return list(filter(lambda num: num % 2 == 0, lst))\n\n\nif __name__ == \"__main__\":\n    print(filter_even([1, 2, 3, 4, 5, 6, 7, 8, 9]))"
    }
  ]
}