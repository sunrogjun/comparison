{
  "timestamp": "2025-09-14T23:26:40.748420",
  "method": "improved_llm_judge",
  "judge_model": "codellama/CodeLlama-7b-Python-hf",
  "target_model": "codellama-7b",
  "dataset": "mbpp",
  "problem_number": 151,
  "total_candidates": 100,
  "results": [
    {
      "rank": 1,
      "score": 10.0,
      "candidate": "def sum_of_positive_integers(n):\n    if n < 0:\n        return 0\n    return n + sum_of_positive_integers(n-2)\n\nprint(sum_of_positive_integers(10))\nprint(sum_of_positive_integers(5))\nprint(sum_of_positive_integers(3))\n\n\n\"\"\"\nWrite a function that returns the number of 9's between 0 and n.\n\"\"\"\n\ndef num_nines(n):\n    count = 0\n    while n >= 0:\n        count += n // 9\n        n -= 9\n    return count\n\nprint(num_nines(10))\nprint(num_nines(20))\nprint(num_nines(30))\nprint(num_nines(40))\nprint(num_nines(50))\n\n\n\"\"\"\nWrite a function that returns the number of 9's between 0 and n.\n\"\"\"\n\ndef num_nines(n):\n    return n // 9\n\nprint(num_nines(10))\nprint(num_nines(20))\nprint(num_nines(30))\nprint(num_nines(40))\nprint(num_nines(50))\n\n\n\"\"\"\nWrite a function that returns the number of 9's between 0 and n.\n\"\"\"\n\ndef num_nines(n):\n    return n // 9\n\nprint(num_nines(10))\nprint(num_nines(20))\nprint(num_nines(30))\nprint(num_nines(40))\nprint(num_nines(50))\n\n\n\"\"\"\nWrite a function that takes in a list of numbers and returns the list of squares of those numbers.\n\"\"\"\n\ndef square_list(num_list):\n    return [num**2 for num in num_list]\n\nprint(square_list([1,2,3,4,5]))\nprint(square_list([-1,-2,-3,-4,-5]))\n\n\n\"\""
    },
    {
      "rank": 2,
      "score": 10.0,
      "candidate": "def sum_of_positive_integers(n):\n    # 1st-way\n    # s = 0\n    # for i in range(1, n+1):\n    #     if i % 2 == 1:\n    #         s += i\n    # return s\n\n    # 2nd-way\n    # s = 0\n    # for i in range(1, n+1):\n    #     if i % 2 == 1:\n    #         s += i\n    # return s\n\n    # 3rd-way\n    # s = 0\n    # for i in range(1, n+1, 2):\n    #     s += i\n    # return s\n\n    # 4th-way\n    # s = 0\n    # for i in range(1, n+1, 2):\n    #     s += i\n    # return s\n\n    # 5th-way\n    # s = 0\n    # for i in range(n, 0, -2):\n    #     s += i\n    # return s\n\n    # 6th-way\n    # s = 0\n    # for i in range(n, 0, -2):\n    #     s += i\n    # return s\n\n    # 7th-way\n    # s = 0\n    # for i in range(n, 0, -2):\n    #     s += i\n    # return s\n\n    # 8th-way\n    # s = 0\n    # for i in range(n, 0, -2):\n    #     s += i\n    # return s\n\n    # 9th-way\n    # s = 0\n    # for i in range(n, 0, -2):\n    #     s += i\n    # return s\n\n    # 10th-way\n    # s = 0\n    # for i in range(n, 0, -2):\n    #     s += i\n    # return s\n\n    # 11th-way\n    # s = 0\n    # for i in range(n, 0, -2):"
    },
    {
      "rank": 3,
      "score": 10.0,
      "candidate": "# O(N) time | O(1) space - where N is the number of elements in the input array\ndef sumOfPositiveNumbers(n):\n    if n <= 0:\n        return 0\n    return n + sumOfPositiveNumbers(n - 2)"
    },
    {
      "rank": 4,
      "score": 10.0,
      "candidate": "# O(n) time | O(1) space - where n is the number of input\ndef sumNaturalNumbers(n):\n    if n < 1:\n        return 0\n\n    return int(n * (n + 1) / 2)"
    },
    {
      "rank": 5,
      "score": 10.0,
      "candidate": "def sum_series(n):\n    \"\"\"\n    >>> sum_series(10)\n    25\n    >>> sum_series(5)\n    10\n    >>> sum_series(3)\n    6\n    >>> sum_series(1)\n    1\n    \"\"\"\n    if n <= 0:\n        return 0\n    if n == 1:\n        return 1\n    return n + sum_series(n - 2)\n\n\nif __name__ == \"__main__\":\n    from doctest import testmod\n\n    testmod()"
    },
    {
      "rank": 6,
      "score": 10.0,
      "candidate": "# O(1) time, O(1) space\ndef sum_of_positive_integers(n):\n    if n <= 0:\n        return 0\n\n    return n + (n - 2) + (n - 4) + (n - 6)"
    },
    {
      "rank": 7,
      "score": 10.0,
      "candidate": "def sum_series(n):\n    \"\"\"\n    >>> sum_series(10)\n    25\n    >>> sum_series(15)\n    45\n    >>> sum_series(20)\n    60\n    \"\"\"\n    return sum([i for i in range(1, n + 1) if i % 2 == 1])\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 8,
      "score": 10.0,
      "candidate": "def sum_of_positive_integers(n):\n    \"\"\"Returns the sum of the positive integers of n+(n-2)+(n-4)... (until n-x =< 0).\n\n    >>> sum_of_positive_integers(10)\n    25\n    >>> sum_of_positive_integers(5)\n    10\n    >>> sum_of_positive_integers(3)\n    6\n    >>> sum_of_positive_integers(2)\n    3\n    >>> sum_of_positive_integers(1)\n    1\n    >>> sum_of_positive_integers(0)\n    0\n    \"\"\"\n    if n <= 0:\n        return 0\n\n    return n + sum_of_positive_integers(n - 2)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 9,
      "score": 10.0,
      "candidate": "def sum_positive_integers(n):\n    # 1. 0(n)\n    # sum = 0\n    # for i in range(n):\n    #     if i % 2 == 0:\n    #         sum += i\n    # return sum\n\n    # 2. 0(n)\n    # sum = 0\n    # for i in range(0, n, 2):\n    #     sum += i\n    # return sum\n\n    # 3. 0(1)\n    # return int(n * (n + 1) / 2)\n\n    # 4. 0(n)\n    # sum = 0\n    # for i in range(n):\n    #     if i % 2 != 0:\n    #         sum += i\n    # return sum\n\n    # 5. 0(n)\n    # sum = 0\n    # for i in range(1, n + 1, 2):\n    #     sum += i\n    # return sum\n\n    # 6. 0(n)\n    # sum = 0\n    # for i in range(n):\n    #     if i % 2 != 0:\n    #         sum += i\n    # return sum\n\n    # 7. 0(n)\n    # sum = 0\n    # for i in range(0, n, 2):\n    #     sum += i\n    # return sum\n\n    # 8. 0(n)\n    # sum = 0\n    # for i in range(n):\n    #     if i % 2 == 0:\n    #         sum += i\n    # return sum\n\n    # 9. 0(n)\n    # sum = 0\n    # for i in range(n):\n    #     if i % 2 == 0:\n    #         sum += i\n    # return sum\n\n    # 10. 0(n)\n    # sum = 0\n    # for i in range(0, n, 2):\n    #     sum += i\n    # return sum\n\n    # 11. 0(1"
    },
    {
      "rank": 10,
      "score": 10.0,
      "candidate": "# O(n) time | O(1) space\ndef sumOfPositive(n):\n    if n <= 0:\n        return 0\n\n    step = 2\n    sum = 1\n    while n - step >= 0:\n        sum += n - step\n        step += 2\n\n    return sum"
    },
    {
      "rank": 11,
      "score": 10.0,
      "candidate": "def sum_of_positive_integers(n):\n    \"\"\"\n    >>> sum_of_positive_integers(10)\n    25\n    >>> sum_of_positive_integers(5)\n    10\n    \"\"\"\n    if n <= 0:\n        return 0\n    return n + sum_of_positive_integers(n - 2)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 12,
      "score": 10.0,
      "candidate": "# O(1) time | O(1) space\ndef sumOfPositiveIntegers(n):\n    if n < 0:\n        return 0\n\n    currentSum = 1\n    nextNumber = 2\n\n    while nextNumber <= n:\n        if nextNumber > 0:\n            currentSum += nextNumber\n        nextNumber += 2\n\n    return currentSum"
    },
    {
      "rank": 13,
      "score": 10.0,
      "candidate": "def sum_of_positive_integers(n: int) -> int:\n    \"\"\"\n    Return the sum of the positive integers of n+(n-2)+(n-4)... (until n-x =< 0).\n    >>> sum_of_positive_integers(10)\n    25\n    >>> sum_of_positive_integers(5)\n    10\n    >>> sum_of_positive_integers(3)\n    6\n    >>> sum_of_positive_integers(1)\n    1\n    >>> sum_of_positive_integers(0)\n    0\n    \"\"\"\n    if n < 1:\n        return 0\n    return n + sum_of_positive_integers(n - 2)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 14,
      "score": 10.0,
      "candidate": "def sum_of_positive_integers(n):\n    \"\"\"\n    >>> sum_of_positive_integers(10)\n    25\n    >>> sum_of_positive_integers(5)\n    5\n    >>> sum_of_positive_integers(3)\n    3\n    >>> sum_of_positive_integers(1)\n    1\n    \"\"\"\n    if n <= 0:\n        return 0\n\n    return n + sum_of_positive_integers(n - 2)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 15,
      "score": 10.0,
      "candidate": "def sum_of_positive_integers(n):\n    \"\"\"\n    >>> sum_of_positive_integers(10)\n    25\n    >>> sum_of_positive_integers(15)\n    45\n    >>> sum_of_positive_integers(20)\n    60\n    \"\"\"\n    if n <= 0:\n        return 0\n    return n + sum_of_positive_integers(n - 2)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 16,
      "score": 10.0,
      "candidate": "def sum_of_positive_integers(n):\n    return n + sum_of_positive_integers(n-2) if n > 0 else 0"
    },
    {
      "rank": 17,
      "score": 10.0,
      "candidate": "from functools import reduce\n\n\n# Time complexity: O(n)\n# Space complexity: O(1)\ndef sum_of_positive_integers(n):\n    return reduce(lambda x, y: x + y, range(n, 0, -2))"
    },
    {
      "rank": 18,
      "score": 9.0,
      "candidate": "from functools import reduce\n\n\n# Time complexity: O(n)\n# Space complexity: O(1)\ndef sum_series(n):\n    return reduce(lambda x, y: x + y, [n - i for i in range(n) if i % 2 == 1])"
    },
    {
      "rank": 19,
      "score": 8.0,
      "candidate": "def sum_of_positive_integers(n):\n    if n <= 0:\n        return 0\n    return n + sum_of_positive_integers(n - 2)\n\n\nprint(sum_of_positive_integers(5))"
    },
    {
      "rank": 20,
      "score": 8.0,
      "candidate": "def sum_positive_integers(n):\n    total = 0\n    for i in range(n, 0, -2):\n        total += i\n    return total"
    },
    {
      "rank": 21,
      "score": 8.0,
      "candidate": "from functools import reduce\n\n\n# Time complexity: O(n) where n is the number\n# Space complexity: O(1)\ndef sum_series(n):\n    return reduce(lambda x, y: x + y, [n - i for i in range(n) if i % 2 == 1])"
    },
    {
      "rank": 22,
      "score": 8.0,
      "candidate": "def sum_series(n):\n    series = []\n    x = 1\n    while x <= n:\n        series.append(x)\n        x += 2\n    return sum(series)\n\n\nprint(sum_series(10))"
    },
    {
      "rank": 23,
      "score": 8.0,
      "candidate": "def positive_sum(n):\n    if n < 0:\n        return 0\n    else:\n        return n + positive_sum(n - 2)\n\n\nif __name__ == '__main__':\n    print(positive_sum(5))"
    },
    {
      "rank": 24,
      "score": 8.0,
      "candidate": "def sum_of_positive_integers(n):\n    if n < 0:\n        return 0\n    if n == 1:\n        return 1\n    return n + sum_of_positive_integers(n-2)\n\n\ndef test_sum_of_positive_integers():\n    assert sum_of_positive_integers(1) == 1\n    assert sum_of_positive_integers(3) == 6\n    assert sum_of_positive_integers(6) == 16\n\n\nif __name__ == '__main__':\n    test_sum_of_positive_integers()"
    },
    {
      "rank": 25,
      "score": 8.0,
      "candidate": "def sum_series(n):\n    total = 0\n    for i in range(n):\n        if i % 2 == 0:\n            total += i\n    return total"
    },
    {
      "rank": 26,
      "score": 8.0,
      "candidate": "def sum_positive_integers(n):\n    return sum([i for i in range(1, n+1, 2)])\n\n\nprint(sum_positive_integers(5))"
    },
    {
      "rank": 27,
      "score": 8.0,
      "candidate": "def sum_positive_integers(n):\n    if n < 0:\n        return 0\n    else:\n        return (n * (n + 1)) // 2"
    },
    {
      "rank": 28,
      "score": 8.0,
      "candidate": "def sum_of_series(n):\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(1)\n    \"\"\"\n    if n <= 0:\n        return 0\n\n    current = n\n    total = 0\n\n    while current > 0:\n        total += current\n        current -= 2\n\n    return total"
    },
    {
      "rank": 29,
      "score": 8.0,
      "candidate": "def sum_series(n):\n    if n < 1:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return n + sum_series(n - 2)"
    },
    {
      "rank": 30,
      "score": 8.0,
      "candidate": "def sum_of_positive_integers(n):\n    \"\"\"\n    >>> sum_of_positive_integers(10)\n    25\n    >>> sum_of_positive_integers(5)\n    5\n    >>> sum_of_positive_integers(3)\n    2\n    \"\"\"\n    if n <= 0:\n        return 0\n    return n + sum_of_positive_integers(n - 2)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 31,
      "score": 8.0,
      "candidate": "def sum_of_positive_integers(n):\n    \"\"\"\n    >>> sum_of_positive_integers(10)\n    25\n    >>> sum_of_positive_integers(5)\n    5\n    >>> sum_of_positive_integers(3)\n    3\n    \"\"\"\n    if n <= 0:\n        return 0\n\n    if n == 1:\n        return 1\n\n    if n == 2:\n        return 1\n\n    return n + sum_of_positive_integers(n-2)\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 32,
      "score": 8.0,
      "candidate": "def sum_of_positive_integers(n):\n    \"\"\"\n    >>> sum_of_positive_integers(10)\n    25\n    >>> sum_of_positive_integers(5)\n    5\n    >>> sum_of_positive_integers(3)\n    3\n    \"\"\"\n    return (\n        n\n        if n <= 0\n        else n\n        + sum_of_positive_integers(n - 2)\n        if n - 2 > 0\n        else n\n    )\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 33,
      "score": 8.0,
      "candidate": "def sum_series(n):\n    if n < 1:\n        return 0\n    if n == 1:\n        return 1\n    else:\n        return n + sum_series(n - 2)\n\nprint(sum_series(5))\nprint(sum_series(10))\nprint(sum_series(15))\n\n\n\"\"\"\nComplexity:\n\n* O(N) time | where N is the number of elements in the input array\n* O(1) space\n\"\"\""
    },
    {
      "rank": 34,
      "score": 8.0,
      "candidate": "def sum_of_positive_integers(n: int) -> int:\n    \"\"\"\n    >>> sum_of_positive_integers(10)\n    25\n    >>> sum_of_positive_integers(5)\n    10\n    >>> sum_of_positive_integers(3)\n    6\n    \"\"\"\n    if n <= 0:\n        return 0\n\n    return (n * (n + 1)) // 2\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 35,
      "score": 8.0,
      "candidate": "def sum_series(n):\n    if n < 0:\n        return 0\n    if n <= 2:\n        return n\n\n    # sum_series(n) = n + sum_series(n - 2)\n    return n + sum_series(n - 2)\n\n\ndef test_sum_series():\n    assert sum_series(0) == 0\n    assert sum_series(1) == 1\n    assert sum_series(2) == 3\n    assert sum_series(3) == 6\n    assert sum_series(4) == 10\n    assert sum_series(5) == 15\n    assert sum_series(6) == 21\n\n\nif __name__ == '__main__':\n    test_sum_series()"
    },
    {
      "rank": 36,
      "score": 8.0,
      "candidate": "# O(n) time | O(1) space\ndef sumOfNthTerms(n):\n    if n <= 0:\n        return 0\n\n    i = 1\n    sum = 0\n    while i <= n:\n        sum += i\n        i += 2\n    return sum"
    },
    {
      "rank": 37,
      "score": 8.0,
      "candidate": "def sum_positive_integers(n):\n    \"\"\"Returns the sum of the positive integers of n+(n-2)+(n-4)... (until n-x =< 0).\"\"\"\n    total = 0\n    for i in range(n):\n        if i % 2 == 1:\n            total += i\n    return total"
    },
    {
      "rank": 38,
      "score": 8.0,
      "candidate": "def sum_of_positive_integers(n: int) -> int:\n    \"\"\"\n    Calculate the sum of the positive integers of n+(n-2)+(n-4)... (until n-x =< 0).\n    >>> sum_of_positive_integers(10)\n    25\n    >>> sum_of_positive_integers(5)\n    10\n    >>> sum_of_positive_integers(3)\n    6\n    \"\"\"\n    if n < 1:\n        return 0\n    return n + sum_of_positive_integers(n - 2)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 39,
      "score": 1.0,
      "candidate": "def sum_of_series(n):\n    if n <= 0:\n        return 0\n    if n == 1:\n        return 1\n\n    result = 0\n    while n > 0:\n        result += n\n        n -= 2\n    return result\n\n\nif __name__ == \"__main__\":\n    assert sum_of_series(1) == 1, \"Should be 1\"\n    assert sum_of_series(3) == 6, \"Should be 6\"\n    assert sum_of_series(5) == 14, \"Should be 14\"\n    assert sum_of_series(8) == 32, \"Should be 32\""
    },
    {
      "rank": 40,
      "score": 1.0,
      "candidate": "def sum_series(n):\n    if n < 1:\n        return 0\n    else:\n        return n + sum_series(n-2)\n\ndef sum_series_2(n):\n    if n < 1:\n        return 0\n    else:\n        return n + sum_series_2(n-2)\n\ndef sum_series_3(n):\n    if n < 1:\n        return 0\n    else:\n        return n + sum_series_3(n-2)\n\ndef sum_series_4(n):\n    if n < 1:\n        return 0\n    else:\n        return n + sum_series_4(n-2)\n\ndef sum_series_5(n):\n    if n < 1:\n        return 0\n    else:\n        return n + sum_series_5(n-2)\n\ndef sum_series_6(n):\n    if n < 1:\n        return 0\n    else:\n        return n + sum_series_6(n-2)\n\ndef sum_series_7(n):\n    if n < 1:\n        return 0\n    else:\n        return n + sum_series_7(n-2)\n\ndef sum_series_8(n):\n    if n < 1:\n        return 0\n    else:\n        return n + sum_series_8(n-2)\n\ndef sum_series_9(n):\n    if n < 1:\n        return 0\n    else:\n        return n + sum_series_9(n-2)\n\ndef sum_series_10(n):\n    if n < 1:\n        return 0\n    else:\n        return n + sum_series_10(n-2)\n\ndef sum_series_11(n):\n    if n < 1:\n        return 0\n    else:\n        return n + sum_series_11(n-2)\n\ndef sum_series_12(n):\n    if n < 1:\n        return 0\n    else:\n        return n + sum_series_12"
    },
    {
      "rank": 41,
      "score": 1.0,
      "candidate": "def sum_positive_numbers(n):\n    return sum(range(n, 0, -2))\n\n# print(sum_positive_numbers(10))\n\n\"\"\"\nWrite a function to calculate the sum of the positive integers of n+(n-2)+(n-4)... (until n-x =< 0).\n\"\"\"\n\ndef sum_positive_numbers(n):\n    return sum(list(range(n, 0, -2)))\n\n# print(sum_positive_numbers(10))\n\n\"\"\"\nWrite a function to calculate the sum of the positive integers of n+(n-2)+(n-4)... (until n-x =< 0).\n\"\"\"\n\ndef sum_positive_numbers(n):\n    total = 0\n    while n > 0:\n        total += n\n        n -= 2\n    return total\n\n# print(sum_positive_numbers(10))\n\n\"\"\"\nWrite a function to calculate the sum of the positive integers of n+(n-2)+(n-4)... (until n-x =< 0).\n\"\"\"\n\ndef sum_positive_numbers(n):\n    total = 0\n    for num in range(n, 0, -2):\n        total += num\n    return total\n\n# print(sum_positive_numbers(10))\n\n\"\"\"\nWrite a function to calculate the sum of the positive integers of n+(n-2)+(n-4)... (until n-x =< 0).\n\"\"\"\n\ndef sum_positive_numbers(n):\n    total = 0\n    while n > 0:\n        total += n\n        n -= 2\n    return total\n\n# print(sum_positive_numbers(10))\n\n\"\"\"\nWrite a function to calculate the sum of the positive integers of n+(n-2)+(n-4)... (until n-x =< 0).\n\"\"\"\n\ndef sum_positive_numbers(n):\n    total = 0\n    for num in range(n, 0, -2):\n        total += num\n    return total\n\n# print(sum"
    },
    {
      "rank": 42,
      "score": 1.0,
      "candidate": "from functools import reduce\nfrom math import floor\n\n\n# Time complexity: O(n)\n# Space complexity: O(1)\ndef sum_of_positive_integers(n):\n    return sum([i for i in range(1, n + 1) if i % 2 == 1])\n\n\n# Time complexity: O(1)\n# Space complexity: O(1)\ndef sum_of_positive_integers_v2(n):\n    return reduce(lambda x, y: x + y, [i for i in range(1, n + 1) if i % 2 == 1])\n\n\n# Time complexity: O(1)\n# Space complexity: O(1)\ndef sum_of_positive_integers_v3(n):\n    return floor(n * (n + 1) / 2)\n\n\n# Time complexity: O(1)\n# Space complexity: O(1)\ndef sum_of_positive_integers_v4(n):\n    return (n * (n + 1) - n) // 2\n\n\nprint(sum_of_positive_integers(10))\nprint(sum_of_positive_integers_v2(10))\nprint(sum_of_positive_integers_v3(10))\nprint(sum_of_positive_integers_v4(10))"
    },
    {
      "rank": 43,
      "score": 1.0,
      "candidate": "def sum_series(n):\n    if n <= 0:\n        return 0\n    return n + sum_series(n - 2)\n\n\nprint(sum_series(5))  # 15\nprint(sum_series(8))  # 35\nprint(sum_series(10))  # 55"
    },
    {
      "rank": 44,
      "score": 1.0,
      "candidate": "def sum_of_positive_integers(n):\n    if n < 1:\n        return 0\n\n    return sum([x for x in range(1, n+1, 2)])\n\n\nprint(sum_of_positive_integers(5))\nprint(sum_of_positive_integers(10))"
    },
    {
      "rank": 45,
      "score": 1.0,
      "candidate": "def sum_of_positive_integers(n):\n    \"\"\"\n    >>> sum_of_positive_integers(10)\n    25\n    >>> sum_of_positive_integers(5)\n    5\n    >>> sum_of_positive_integers(3)\n    3\n    \"\"\"\n    if n < 1:\n        return 0\n    return n + sum_of_positive_integers(n - 2)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 46,
      "score": 1.0,
      "candidate": "def sum_of_positive_numbers(n):\n    if n <= 0:\n        return 0\n    return n + sum_of_positive_numbers(n - 2)\n\n\nif __name__ == \"__main__\":\n    print(sum_of_positive_numbers(10))"
    },
    {
      "rank": 47,
      "score": 1.0,
      "candidate": "def sum_of_positive_integers(n):\n    \"\"\"\n    sum_of_positive_integers -> int\n    Args:\n        n: int - any integer\n    Returns:\n        int - sum of the positive integers of n+(n-2)+(n-4)... (until n-x =< 0)\n    \"\"\"\n    if n < 0:\n        return 0\n    else:\n        return n + sum_of_positive_integers(n-2)\n\nif __name__ == '__main__':\n    print(sum_of_positive_integers(10))"
    },
    {
      "rank": 48,
      "score": 1.0,
      "candidate": "def sum_series(n):\n    i = 1\n    result = 0\n    while i <= n:\n        result += i\n        i += 2\n    return result\n\nprint(sum_series(10))\nprint(sum_series(20))\nprint(sum_series(30))"
    },
    {
      "rank": 49,
      "score": 1.0,
      "candidate": "def sum_series(n):\n    if n <= 0:\n        return 0\n    return n + sum_series(n-2)\n\nprint(sum_series(9))\nprint(sum_series(10))"
    },
    {
      "rank": 50,
      "score": 1.0,
      "candidate": "def sum_series(n):\n    i = 1\n    sum = 0\n    while i <= n:\n        sum += i\n        i += 2\n    return sum\n\n\ndef test_sum_series():\n    assert sum_series(1) == 1\n    assert sum_series(2) == 3\n    assert sum_series(3) == 5\n    assert sum_series(4) == 7\n    assert sum_series(5) == 9\n    assert sum_series(6) == 11\n    assert sum_series(7) == 13\n    assert sum_series(8) == 15\n    assert sum_series(9) == 17\n    assert sum_series(10) == 19\n\n\nif __name__ == '__main__':\n    test_sum_series()"
    },
    {
      "rank": 51,
      "score": 1.0,
      "candidate": "def sum_of_series(n):\n    sum = 0\n    if n > 0:\n        while n > 0:\n            sum += n\n            n -= 2\n    return sum\n\n\nprint(sum_of_series(10))\nprint(sum_of_series(9))\nprint(sum_of_series(8))\nprint(sum_of_series(7))\nprint(sum_of_series(6))\nprint(sum_of_series(5))\nprint(sum_of_series(4))\nprint(sum_of_series(3))\nprint(sum_of_series(2))\nprint(sum_of_series(1))\nprint(sum_of_series(0))"
    },
    {
      "rank": 52,
      "score": 1.0,
      "candidate": "def sum_series(n):\n    return sum([x for x in range(n, 0, -2)])\n\n\ndef test_sum_series():\n    assert sum_series(6) == 12\n    assert sum_series(7) == 15\n    assert sum_series(8) == 18\n    assert sum_series(10) == 30\n    assert sum_series(100) == 4950\n\n\nif __name__ == '__main__':\n    test_sum_series()"
    },
    {
      "rank": 53,
      "score": 1.0,
      "candidate": "def sum_of_positive_integers(n):\n    # return sum([n - x for x in range(0, n, 2)])\n    return sum([n - 2 * x for x in range(n // 2)])\n\n\nif __name__ == \"__main__\":\n    print(sum_of_positive_integers(6))"
    },
    {
      "rank": 54,
      "score": 1.0,
      "candidate": "def sum_of_series(n):\n    return int(n * (n + 1) / 2)\n\n\ndef test_sum_of_series():\n    \"\"\"\n    >>> test_sum_of_series()\n    True\n    \"\"\"\n    return sum_of_series(10) == 55\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 55,
      "score": 1.0,
      "candidate": "def sum_positive_numbers(n):\n    # Your code here\n    if n < 0:\n        return 0\n    if n == 1:\n        return 1\n    else:\n        return n + sum_positive_numbers(n - 2)\n\n\nprint(sum_positive_numbers(5))\nprint(sum_positive_numbers(10))"
    },
    {
      "rank": 56,
      "score": 1.0,
      "candidate": "def sum_series(n):\n    if n <= 0:\n        return 0\n    return n + sum_series(n - 2)\n\n\ndef test_sum_series():\n    assert sum_series(3) == 6\n    assert sum_series(5) == 14"
    },
    {
      "rank": 57,
      "score": 1.0,
      "candidate": "def sum_of_positive_integers(n):\n    \"\"\"Returns the sum of positive integers.\"\"\"\n    return (n * (n + 1)) // 2\n\n\ndef test_sum_of_positive_integers():\n    \"\"\"Test for sum_of_positive_integers.\"\"\"\n    assert sum_of_positive_integers(1) == 1\n    assert sum_of_positive_integers(2) == 3\n    assert sum_of_positive_integers(3) == 6\n    assert sum_of_positive_integers(4) == 10\n    assert sum_of_positive_integers(5) == 15\n    assert sum_of_positive_integers(6) == 21\n    assert sum_of_positive_integers(7) == 28\n    assert sum_of_positive_integers(8) == 36\n    assert sum_of_positive_integers(9) == 45\n    assert sum_of_positive_integers(10) == 55"
    },
    {
      "rank": 58,
      "score": 1.0,
      "candidate": "def sum_series(n):\n    if n < 0:\n        return 0\n    if n == 1:\n        return 1\n    return n + sum_series(n - 2)\n\n\nprint(sum_series(9))\nprint(sum_series(10))\nprint(sum_series(11))\nprint(sum_series(12))"
    },
    {
      "rank": 59,
      "score": 1.0,
      "candidate": "def sum_series(n):\n    # Your code goes here\n    if n < 0:\n        return 0\n    else:\n        return n + sum_series(n-2)\n\n# Keep this function call here\nprint(sum_series(input()))"
    },
    {
      "rank": 60,
      "score": 1.0,
      "candidate": "def positive_sum(n):\n    if n <= 0:\n        return 0\n\n    if n == 1:\n        return 1\n\n    if n == 2:\n        return 3\n\n    return n + positive_sum(n - 2)\n\n\nif __name__ == \"__main__\":\n    print(positive_sum(10))"
    },
    {
      "rank": 61,
      "score": 1.0,
      "candidate": "# O(n) time | O(1) space\ndef sumOfPositiveIntegers(n):\n    if n < 1:\n        return 0\n    return sumOfPositiveIntegers(n-2) + n\n\n\n# O(n) time | O(1) space\ndef sumOfPositiveIntegers(n):\n    if n < 1:\n        return 0\n    return n + sumOfPositiveIntegers(n-2)"
    },
    {
      "rank": 62,
      "score": 1.0,
      "candidate": "def positive_sum(n):\n    return sum(i for i in range(n, 0, -2))\n\n\nprint(positive_sum(6))\nprint(positive_sum(10))\nprint(positive_sum(20))"
    },
    {
      "rank": 63,
      "score": 1.0,
      "candidate": "def sum_of_positive_integers(n):\n    return sum([i for i in range(n, 0, -2)])\n\n\nprint(sum_of_positive_integers(10))"
    },
    {
      "rank": 64,
      "score": 1.0,
      "candidate": "def sum_series(n):\n    if n <= 0:\n        return 0\n    else:\n        return n + sum_series(n-2)\n\n\nprint(sum_series(6))"
    },
    {
      "rank": 65,
      "score": 1.0,
      "candidate": "def positive_sum(n):\n    \"\"\"Return the sum of the positive integers of n+(n-2)+(n-4)... (until n-x =< 0).\"\"\"\n    if n < 1:\n        return 0\n    return n + positive_sum(n - 2)\n\n\ndef test_positive_sum():\n    \"\"\"Test positive_sum().\"\"\"\n    assert positive_sum(5) == 15\n    assert positive_sum(6) == 21"
    },
    {
      "rank": 66,
      "score": 1.0,
      "candidate": "# pylint: disable=wildcard-import, unused-wildcard-import, undefined-variable, no-name-in-module\nfrom expects import *\n\nfrom lib.sum_of_positive import sum_of_positive\n\nwith description('sum_of_positive'):\n    with it('handles example #1'):\n        expect(sum_of_positive(6)).to(equal(12))\n\n    with it('handles example #2'):\n        expect(sum_of_positive(10)).to(equal(30))"
    },
    {
      "rank": 67,
      "score": 1.0,
      "candidate": "def sum_series(n):\n    if n <= 0:\n        return 0\n    return n + sum_series(n-2)\n\nif __name__ == '__main__':\n    print(sum_series(5))\n    print(sum_series(10))"
    },
    {
      "rank": 68,
      "score": 1.0,
      "candidate": "def sum_series(n):\n    \"\"\"\n    >>> sum_series(10)\n    25\n    >>> sum_series(5)\n    10\n    >>> sum_series(3)\n    6\n    \"\"\"\n    if n < 1:\n        return 0\n\n    return n + sum_series(n-2)\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 69,
      "score": 1.0,
      "candidate": "def sum_positive_numbers(n):\n    if n < 1:\n        return 0\n    else:\n        return n + sum_positive_numbers(n - 2)\n\nprint(sum_positive_numbers(5))\nprint(sum_positive_numbers(10))\nprint(sum_positive_numbers(20))"
    },
    {
      "rank": 70,
      "score": 1.0,
      "candidate": "def sum_series(n):\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i\n    return sum\n\n\nprint(sum_series(6))"
    },
    {
      "rank": 71,
      "score": 1.0,
      "candidate": "def sum_positive_integers(n):\n    return n + (n - 2) + (n - 4) + (n - 6) + (n - 8)\n\n\ndef test_sum_positive_integers():\n    assert sum_positive_integers(6) == 16\n    assert sum_positive_integers(10) == 30\n\n\nif __name__ == '__main__':\n    test_sum_positive_integers()"
    },
    {
      "rank": 72,
      "score": 1.0,
      "candidate": "def sum_series(n):\n    if n < 0:\n        return 0\n    if n <= 2:\n        return n\n    return n + sum_series(n - 2)\n\n\ndef test_sum_series():\n    assert sum_series(1) == 1\n    assert sum_series(2) == 3\n    assert sum_series(3) == 6\n    assert sum_series(4) == 10\n    assert sum_series(5) == 15"
    },
    {
      "rank": 73,
      "score": 1.0,
      "candidate": "def sum_of_positive_integers(n):\n    return sum([i for i in range(n, 0, -2)])\n\n\nprint(sum_of_positive_integers(10))\nprint(sum_of_positive_integers(15))\nprint(sum_of_positive_integers(20))"
    },
    {
      "rank": 74,
      "score": 1.0,
      "candidate": "def sum_of_positive_integers(n):\n    if n < 1:\n        return 0\n    return n + sum_of_positive_integers(n - 2)\n\n\ndef test_sum_of_positive_integers():\n    \"\"\"\n    >>> test_sum_of_positive_integers()\n    \"\"\"\n    assert sum_of_positive_integers(1) == 1\n    assert sum_of_positive_integers(2) == 3\n    assert sum_of_positive_integers(3) == 6\n    assert sum_of_positive_integers(4) == 10\n    assert sum_of_positive_integers(5) == 15\n    assert sum_of_positive_integers(6) == 21\n    assert sum_of_positive_integers(7) == 28\n    assert sum_of_positive_integers(8) == 36\n    assert sum_of_positive_integers(9) == 45\n    assert sum_of_positive_integers(10) == 55"
    },
    {
      "rank": 75,
      "score": 1.0,
      "candidate": "def sum_of_positive_integers(n):\n    \"\"\"\n    >>> sum_of_positive_integers(10)\n    25\n    >>> sum_of_positive_integers(5)\n    5\n    >>> sum_of_positive_integers(3)\n    3\n    \"\"\"\n    return sum(\n        filter(\n            lambda x: x > 0,\n            [n - x for x in range(n)],\n        )\n    )\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 76,
      "score": 1.0,
      "candidate": "def sum_series(n):\n    return (n * (n + 1)) // 2\n\n\nif __name__ == \"__main__\":\n    print(sum_series(10))"
    },
    {
      "rank": 77,
      "score": 1.0,
      "candidate": "def sum_series(n):\n    if n < 0:\n        return 0\n\n    result = 0\n    while n >= 0:\n        result += n\n        n -= 2\n\n    return result\n\n\n# Tests\nassert sum_series(1) == 1\nassert sum_series(2) == 3\nassert sum_series(3) == 5\nassert sum_series(4) == 7\nassert sum_series(5) == 9"
    },
    {
      "rank": 78,
      "score": 1.0,
      "candidate": "def sum_series(n):\n    result = 0\n    x = 1\n    while n > 0:\n        result += n\n        n -= x\n        x += 2\n    return result\n\nprint(sum_series(10))"
    },
    {
      "rank": 79,
      "score": 1.0,
      "candidate": "from typing import List\n\n\ndef sum_of_positive_integers(n: int) -> int:\n    \"\"\"Returns sum of the positive integers of n+(n-2)+(n-4)... (until n-x =< 0).\n\n    >>> sum_of_positive_integers(10)\n    25\n    >>> sum_of_positive_integers(5)\n    10\n    >>> sum_of_positive_integers(3)\n    6\n    >>> sum_of_positive_integers(1)\n    1\n    >>> sum_of_positive_integers(0)\n    Traceback (most recent call last):\n        ...\n    ValueError: Invalid input, n must be >= 1\n    \"\"\"\n    if n <= 0:\n        raise ValueError(\"Invalid input, n must be >= 1\")\n\n    arr: List[int] = [n]\n    for i in range(1, n):\n        arr.append(arr[i - 1] - i)\n        if arr[i] <= 0:\n            break\n    return sum(arr)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()\n    print(sum_of_positive_integers(int(input().strip())))"
    },
    {
      "rank": 80,
      "score": 1.0,
      "candidate": "def sum_series(n):\n    result = 0\n    x = n\n    while x >= 0:\n        result += x\n        x -= 2\n    return result\n\n\ndef test_sum_series():\n    assert sum_series(6) == 12\n    assert sum_series(7) == 15\n    assert sum_series(10) == 30\n\n\nif __name__ == \"__main__\":\n    test_sum_series()"
    },
    {
      "rank": 81,
      "score": 1.0,
      "candidate": "def sum_of_positive_integers(n):\n    if n < 0:\n        return None\n    if n == 0:\n        return 0\n    return n + sum_of_positive_integers(n - 2)\n\n\nprint(sum_of_positive_integers(10))\nprint(sum_of_positive_integers(5))\nprint(sum_of_positive_integers(-1))"
    },
    {
      "rank": 82,
      "score": 1.0,
      "candidate": "# This is a recursive solution\n# It uses the formula n(n+1)/2\ndef sum_series(n):\n    if n < 0:\n        return 0\n    return n + sum_series(n-2)\n\n# This is an iterative solution\ndef sum_series_iter(n):\n    total = 0\n    while n >= 0:\n        total += n\n        n -= 2\n    return total\n\n# These are tests to check the correctness of your code.\ndef check(candidate):\n\n    # Check some simple cases\n    assert candidate(10) == 55\n    assert candidate(5) == 15\n    assert candidate(3) == 6\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(1) == 1\n    assert candidate(2) == 3\n\nif __name__ == \"__main__\":\n    check(sum_series)\n    check(sum_series_iter)"
    },
    {
      "rank": 83,
      "score": 1.0,
      "candidate": "def sum_of_positive_integers(n):\n    if n <= 0:\n        return 0\n    else:\n        return n + sum_of_positive_integers(n - 2)\n\n\nprint(sum_of_positive_integers(5))\nprint(sum_of_positive_integers(1))"
    },
    {
      "rank": 84,
      "score": 1.0,
      "candidate": "def sum_series(n):\n    \"\"\"\n    >>> sum_series(10)\n    25\n    >>> sum_series(5)\n    10\n    >>> sum_series(3)\n    6\n    \"\"\"\n    if n <= 0:\n        return 0\n    else:\n        return n + sum_series(n - 2)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 85,
      "score": 1.0,
      "candidate": "def sum_of_positive_integers(n):\n    if n < 0:\n        return 0\n    return n + sum_of_positive_integers(n - 2)\n\n\nif __name__ == '__main__':\n    print(sum_of_positive_integers(10))"
    },
    {
      "rank": 86,
      "score": 1.0,
      "candidate": "def sum_series(n):\n    if n <= 0:\n        return 0\n    else:\n        return n + sum_series(n-2)\n\n\nprint(sum_series(10))"
    },
    {
      "rank": 87,
      "score": 1.0,
      "candidate": "def sum_of_positive_integers(n):\n    return int(n * (n - 1) / 2)\n\n\ndef test_sum_of_positive_integers():\n    assert sum_of_positive_integers(1) == 1\n    assert sum_of_positive_integers(2) == 3\n    assert sum_of_positive_integers(3) == 6\n    assert sum_of_positive_integers(4) == 10\n    assert sum_of_positive_integers(5) == 15\n    assert sum_of_positive_integers(6) == 21\n\n\nif __name__ == '__main__':\n    test_sum_of_positive_integers()"
    },
    {
      "rank": 88,
      "score": 1.0,
      "candidate": "def sum_of_positive_integers(n):\n    if n < 0:\n        return 0\n    else:\n        return n + sum_of_positive_integers(n - 2)\n\n\nif __name__ == '__main__':\n    print(sum_of_positive_integers(5))\n    print(sum_of_positive_integers(10))"
    },
    {
      "rank": 89,
      "score": 1.0,
      "candidate": "def sum_series(n):\n    \"\"\"\n    Calculates the sum of the positive integers of n+(n-2)+(n-4)... (until n-x =< 0).\n    Args:\n        n: An integer\n    Returns:\n        An integer representing the sum of the series\n    \"\"\"\n    if n < 0:\n        return 0\n    if n == 0:\n        return 0\n    else:\n        return n + sum_series(n - 2)\n\nprint(sum_series(10))"
    },
    {
      "rank": 90,
      "score": 1.0,
      "candidate": "def sum_series(n):\n    sum = 0\n    while n >= 0:\n        sum += n\n        n -= 2\n    return sum\n\nif __name__ == '__main__':\n    print(sum_series(6))"
    },
    {
      "rank": 91,
      "score": 1.0,
      "candidate": "def sum_series(n):\n    if n < 1:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return n + sum_series(n - 2)\n\n\ndef test_sum_series():\n    assert sum_series(1) == 1\n    assert sum_series(3) == 6\n    assert sum_series(5) == 15\n    assert sum_series(10) == 55\n\n\nif __name__ == '__main__':\n    test_sum_series()"
    },
    {
      "rank": 92,
      "score": 1.0,
      "candidate": "def sum_series(n):\n    return n if n < 1 else n + sum_series(n - 2)\n\n\ndef test_sum_series():\n    assert sum_series(0) == 0\n    assert sum_series(1) == 1\n    assert sum_series(2) == 3\n    assert sum_series(3) == 6\n    assert sum_series(4) == 10\n    assert sum_series(5) == 15"
    },
    {
      "rank": 93,
      "score": 1.0,
      "candidate": "def sum_series(n):\n    sum = 0\n    while n >= 0:\n        sum += n\n        n -= 2\n    return sum\n\n\nif __name__ == \"__main__\":\n    n = 10\n    print(sum_series(n))"
    },
    {
      "rank": 94,
      "score": 1.0,
      "candidate": "def sum_positive_numbers(n):\n    if n <= 0:\n        return 0\n    return n + sum_positive_numbers(n - 2)\n\n\nprint(sum_positive_numbers(10))"
    },
    {
      "rank": 95,
      "score": 1.0,
      "candidate": "# O(n) time | O(1) space\ndef sumNatural(n):\n    if n < 1:\n        return 0\n\n    return sumRange(n, n)\n\n\ndef sumRange(start, end):\n    if start < 1:\n        return 0\n\n    return start + sumRange(start - 2, end - 2)"
    },
    {
      "rank": 96,
      "score": 1.0,
      "candidate": "def sum_series(n):\n    sum = 0\n    while n > 0:\n        sum += n\n        n -= 2\n    return sum\n\nprint(sum_series(10))"
    },
    {
      "rank": 97,
      "score": 1.0,
      "candidate": "# O(n) time | O(1) space\ndef sumNaturalNumbers(n):\n    return int((n * (n + 1)) / 2)\n\n\n# O(n) time | O(1) space\ndef sumNaturalNumbersOptimized(n):\n    return n * (n + 1) // 2"
    },
    {
      "rank": 98,
      "score": 1.0,
      "candidate": "def sum_series(n):\n    if n <= 0:\n        return 0\n    else:\n        return n + sum_series(n - 2)\n\n\nprint(sum_series(5))\nprint(sum_series(10))\nprint(sum_series(100))"
    },
    {
      "rank": 99,
      "score": 1.0,
      "candidate": "def sum_series(n):\n    if n < 0:\n        return 0\n    return n + sum_series(n-2)\n\n\nprint(sum_series(10))\nprint(sum_series(11))\nprint(sum_series(12))\nprint(sum_series(13))\nprint(sum_series(14))"
    },
    {
      "rank": 100,
      "score": 1.0,
      "candidate": "# O(n) time | O(1) space\ndef sumOfPositive(n):\n    sum = 0\n    while n > 0:\n        sum += n\n        n -= 2\n    return sum\n\n\nprint(sumOfPositive(3))\nprint(sumOfPositive(6))\nprint(sumOfPositive(10))\nprint(sumOfPositive(11))"
    }
  ]
}