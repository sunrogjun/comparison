{
  "timestamp": "2025-09-15T01:22:12.242921",
  "method": "improved_llm_judge",
  "judge_model": "codellama/CodeLlama-7b-Python-hf",
  "target_model": "codellama-7b",
  "dataset": "mbpp",
  "problem_number": 404,
  "total_candidates": 100,
  "results": [
    {
      "rank": 1,
      "score": 10.0,
      "candidate": "def max_product_pair(integers):\n    max_value = float('-inf')\n    for i in range(len(integers)):\n        for j in range(i + 1, len(integers)):\n            max_value = max(max_value, integers[i] * integers[j])\n    return max_value\n\n\ndef max_product_pair_efficient(integers):\n    max_value = float('-inf')\n    min_value = float('-inf')\n    for i in integers:\n        if i > max_value:\n            max_value = i\n        if i < min_value:\n            min_value = i\n    return max(max_value * min_value, max_value)\n\n\ndef main():\n    print(\"Pair with highest product: \" +\n          str(max_product_pair([-10, -3, 5, 6, 2, 3])))\n    print(\"Pair with highest product: \" +\n          str(max_product_pair_efficient([-10, -3, 5, 6, 2, 3])))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 2,
      "score": 10.0,
      "candidate": "def find_pair_with_highest_product(arr):\n    arr.sort()\n    return arr[-1] * arr[-2]\n\n\ndef main():\n    print(find_pair_with_highest_product([1, 2, 3, 4, 5]))\n    print(find_pair_with_highest_product([2, 4, 6, 8, 10]))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 3,
      "score": 10.0,
      "candidate": "def highest_product(arr):\n    # check for null array\n    if not arr:\n        return None\n    # check if all elements are negative\n    if all([x < 0 for x in arr]):\n        return max(arr)\n    # check if all elements are positive\n    if all([x > 0 for x in arr]):\n        return min(arr)\n    # check if first and last are negative\n    if arr[0] < 0 and arr[-1] < 0:\n        return max(arr)\n    # check if first and last are positive\n    if arr[0] > 0 and arr[-1] > 0:\n        return min(arr)\n\n    # check if first and second are negative\n    if arr[0] < 0 and arr[1] < 0:\n        return max(arr)\n    # check if first and second are positive\n    if arr[0] > 0 and arr[1] > 0:\n        return min(arr)\n\n    # check if last and second are negative\n    if arr[-1] < 0 and arr[1] < 0:\n        return max(arr)\n    # check if last and second are positive\n    if arr[-1] > 0 and arr[1] > 0:\n        return min(arr)\n\n    # find the highest product\n    prod1 = arr[0] * arr[1]\n    prod2 = arr[-1] * arr[-2]\n    return max(prod1, prod2)\n\n\ndef main():\n    arr1 = [2, 4, 6, 8]\n    arr2 = [10, 5, 2, 6, 1, 7]\n    arr3 = [-10, 1, 3, 2, -100, 99]\n    arr4 = [10, 3, 5, 6, -10]\n    arr5 = [2, 4, 6, 8]\n    arr6 = [10, 5, 2, 6, 1, 7]\n    arr7 = [-10, 1, 3, 2, -100"
    },
    {
      "rank": 4,
      "score": 10.0,
      "candidate": "def max_pair(arr):\n    max_p = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            max_p = max(max_p, arr[i] * arr[j])\n    return max_p\n\n\nprint(max_pair([2, 5, 4, 3, 1, 9]))"
    },
    {
      "rank": 5,
      "score": 10.0,
      "candidate": "def max_pair(arr):\n    n = len(arr)\n    arr.sort()\n    return arr[n - 1] * arr[n - 2]\n\n\ndef main():\n    arr = [1, 2, 3, 4, 5]\n    print(\"Max pair:\", max_pair(arr))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 6,
      "score": 10.0,
      "candidate": "def find_pair_with_highest_product(array):\n    # Write your code here.\n    # case 1: array is empty\n    if len(array) == 0:\n        return 0\n\n    # case 2: array has one element\n    if len(array) == 1:\n        return array[0]\n\n    # case 3: array has two elements\n    if len(array) == 2:\n        return max(array[0] * array[1], array[0], array[1])\n\n    # case 4: array has more than two elements\n    first_max = 0\n    second_max = 0\n    for num in array:\n        if num > first_max:\n            first_max = num\n\n    for num in array:\n        if num > first_max:\n            second_max = num\n        elif num > second_max and num != first_max:\n            second_max = num\n\n    return first_max * second_max\n\n\nfind_pair_with_highest_product([2, 4, 6, 8])"
    },
    {
      "rank": 7,
      "score": 10.0,
      "candidate": "def pair_with_highest_product(nums: list) -> tuple:\n    \"\"\"\n    >>> pair_with_highest_product([1,2,3,2])\n    (3, 4)\n    >>> pair_with_highest_product([-1,2,3,-2])\n    (2, 3)\n    >>> pair_with_highest_product([-1,-2])\n    (-1, -2)\n    >>> pair_with_highest_product([-1,0,-2,-3,4,5])\n    (4, 5)\n    >>> pair_with_highest_product([-1,0,-2,-3,4,5,6])\n    (4, 5)\n    >>> pair_with_highest_product([-1,0,-2,-3,-4,5,6])\n    (5, 6)\n    \"\"\"\n    # find the smallest and largest element in the array\n    largest = float(\"-inf\")\n    smallest = float(\"inf\")\n    for num in nums:\n        if num < smallest:\n            smallest = num\n        elif num > largest:\n            largest = num\n\n    # sort the array in descending order\n    nums.sort(reverse=True)\n    # check if the smallest number is equal to the largest number\n    if nums[0] == nums[-1]:\n        return (nums[0], nums[-1])\n    # check if the smallest number is greater than 0\n    elif nums[0] > 0:\n        return (nums[0], nums[1])\n    # check if the largest number is equal to 0\n    elif nums[-1] == 0:\n        return (nums[-1], nums[-2])\n    # check if the largest number is greater than 0\n    elif nums[-1] > 0:\n        return (nums[-2], nums[-1])\n    # check if the largest number is less than 0\n    elif nums[-1] < 0:\n        return (nums[-1], nums[-2])\n\n\nif __name__ == \"__main__\":\n    import doctest"
    },
    {
      "rank": 8,
      "score": 10.0,
      "candidate": "from __future__ import annotations\n\n\ndef pair_with_highest_product(integers: list[int]) -> tuple[int, int]:\n    \"\"\"\n    Return a pair with highest product from a given array of integers.\n    >>> pair_with_highest_product([1, 2, 3, 2])\n    (2, 3)\n    >>> pair_with_highest_product([-2, 2, 3, 4, 1])\n    (-2, 1)\n    >>> pair_with_highest_product([-2, -2, 3, 4, 1])\n    (-2, -2)\n    \"\"\"\n    if not integers:\n        return ()\n\n    first = integers[0]\n    max_product = first * first\n    first_pair = first, first\n\n    for i in range(len(integers)):\n        for j in range(i + 1, len(integers)):\n            product = integers[i] * integers[j]\n\n            if product > max_product:\n                max_product = product\n                first_pair = integers[i], integers[j]\n\n    return first_pair\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 9,
      "score": 10.0,
      "candidate": "def find_pair_with_highest_product(arr):\n    \"\"\"\n    >>> find_pair_with_highest_product([2, 4, 6, 8])\n    16\n    >>> find_pair_with_highest_product([-2, -4, -6, -8])\n    16\n    \"\"\"\n    max_prod = 0\n    n = len(arr)\n    arr.sort()\n    for i in range(n - 1):\n        if arr[i] > 0:\n            break\n        for j in range(i + 1, n):\n            prod = arr[i] * arr[j]\n            if prod > max_prod:\n                max_prod = prod\n    return max_prod\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 10,
      "score": 10.0,
      "candidate": "def pair_with_highest_product(arr):\n    n = len(arr)\n    arr.sort()\n    return (arr[-1] * arr[-2])\n\n\ndef main():\n    arr = [2, 4, 6, 8]\n    assert pair_with_highest_product(arr) == 16\n    arr = [2, 4, 6, 8, 1, 2]\n    assert pair_with_highest_product(arr) == 16\n    arr = [2, 4, 6, 8, 1, 1, 1, 1]\n    assert pair_with_highest_product(arr) == 8\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 11,
      "score": 10.0,
      "candidate": "def pair_with_highest_product(input_list):\n    \"\"\"\n    :param input_list: list of integers\n    :return: pair with highest product\n    \"\"\"\n    # TODO: Write pair_with_highest_product function\n    pass\n\n\ndef main():\n    print(\"Pair with highest product: \" +\n          str(pair_with_highest_product([-10, 5, 100, 20])))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 12,
      "score": 10.0,
      "candidate": "from functools import reduce\nfrom operator import mul\n\n\ndef pair_with_highest_product(numbers: list) -> list:\n    \"\"\"\n    >>> pair_with_highest_product([1,2,3,2,5])\n    [5, 2]\n    >>> pair_with_highest_product([2,4,6,8])\n    [None, None]\n    >>> pair_with_highest_product([-2,2,0,2,4])\n    [4, 2]\n    >>> pair_with_highest_product([-2,-2,-2,-2,-2])\n    [None, None]\n    \"\"\"\n    if len(numbers) < 2:\n        return [None, None]\n\n    max_product = -float(\"inf\")\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            product = reduce(mul, numbers[i : j + 1])\n            if product > max_product:\n                max_product = product\n                max_pair = numbers[i : j + 1]\n\n    return max_pair\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 13,
      "score": 9.0,
      "candidate": "def max_product(a):\n    a.sort()\n    return a[-1]*a[-2]"
    },
    {
      "rank": 14,
      "score": 9.0,
      "candidate": "from typing import List\n\n\ndef highest_product(lst: List[int]) -> int:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(1)\n    \"\"\"\n    first_max = second_max = first_min = second_min = float(\"-inf\")\n    for i in lst:\n        if i > first_max:\n            second_max = first_max\n            first_max = i\n        elif i > second_max:\n            second_max = i\n\n        if i < first_min:\n            second_min = first_min\n            first_min = i\n        elif i < second_min:\n            second_min = i\n\n    return max(\n        first_max * second_max,\n        first_min * second_min,\n    )\n\n\nif __name__ == \"__main__\":\n    print(highest_product([2, 4, 3, 6]))\n    print(highest_product([2, 4, 3, 6, 8]))\n    print(highest_product([2, 4, 3, 6, 8, 10]))\n    print(highest_product([2, 4, 3, 6, 8, 10, 12]))"
    },
    {
      "rank": 15,
      "score": 9.0,
      "candidate": "def find_pair_with_highest_product(array):\n    array.sort()\n    max_product = 0\n    for i in range(len(array) - 1):\n        if array[i] * array[len(array) - 1] > max_product:\n            max_product = array[i] * array[len(array) - 1]\n    return max_product\n\n\ndef main():\n    array = [4, 1, 4, 2, 8, 1, 6, 2, 5, 2, 1, 6]\n    print(find_pair_with_highest_product(array))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 16,
      "score": 8.0,
      "candidate": "from typing import List\n\n\ndef highest_product(nums: List[int]) -> int:\n    \"\"\"\n    Naive approach\n    \"\"\"\n    if len(nums) < 2:\n        return -1\n\n    highest_product = -1\n    for i in range(len(nums) - 1):\n        for j in range(i + 1, len(nums)):\n            highest_product = max(highest_product, nums[i] * nums[j])\n    return highest_product\n\n\ndef highest_product_optimized(nums: List[int]) -> int:\n    \"\"\"\n    Optimized approach\n    \"\"\"\n    if len(nums) < 2:\n        return -1\n\n    highest_product = -1\n    highest = -1\n    lowest = -1\n    for num in nums:\n        if num > highest:\n            highest = num\n        if num < lowest:\n            lowest = num\n\n    highest_product = max(highest_product, highest * lowest)\n    lowest = lowest * 2\n\n    for num in nums:\n        if num > lowest:\n            highest_product = max(highest_product, num * lowest)\n\n    return highest_product\n\n\nif __name__ == \"__main__\":\n    nums = [1, 2, 3, 4]\n    assert highest_product(nums) == 12\n    assert highest_product_optimized(nums) == 12\n\n    nums = [2, 0, 3, -2, 5, 0, 1]\n    assert highest_product(nums) == 10\n    assert highest_product_optimized(nums) == 10\n\n    nums = [-10, 0, 10]\n    assert highest_product(nums) == 100\n    assert highest_product_optimized(nums) == 100"
    },
    {
      "rank": 17,
      "score": 8.0,
      "candidate": "def pair_with_highest_product(arr):\n    \"\"\"\n    :param: array -> array containing numbers\n    return -> two numbers with highest product\n    To solve this problem, we will be using two pointer approach.\n    \"\"\"\n    arr.sort()\n    print(arr)\n    prod = 0\n    i = 0\n    j = len(arr)-1\n    while i < j:\n        prod = arr[i] * arr[j]\n        if prod > 0:\n            return [arr[i], arr[j]]\n        if prod <= 0:\n            i += 1\n            j -= 1\n\n    return [arr[i], arr[j]]\n\n\nprint(pair_with_highest_product([-10, -10, 5, 6, 100, 100]))"
    },
    {
      "rank": 18,
      "score": 8.0,
      "candidate": "def highest_product_pair(arr):\n    if len(arr) < 2:\n        return\n    if len(arr) == 2:\n        return arr[0] * arr[1]\n    max_negative = min(arr)\n    min_negative = max(arr)\n    max_positive = max(arr)\n    min_positive = min(arr)\n    highest_product = 0\n    for i in arr:\n        if i == max_negative:\n            for j in arr:\n                if j == max_positive:\n                    highest_product = max(highest_product, i * j)\n        elif i == min_negative:\n            for j in arr:\n                if j == min_positive:\n                    highest_product = max(highest_product, i * j)\n        elif i == max_positive:\n            for j in arr:\n                if j == max_negative:\n                    highest_product = max(highest_product, i * j)\n        elif i == min_positive:\n            for j in arr:\n                if j == min_negative:\n                    highest_product = max(highest_product, i * j)\n    return highest_product\n\n\ndef main():\n    arr = [1, 2, 3, 4, -10, -1]\n    print(highest_product_pair(arr))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 19,
      "score": 8.0,
      "candidate": "def pair_with_highest_product(arr):\n    \"\"\"\n    Time Complexity: O(nlogn)\n    Space Complexity: O(1)\n    \"\"\"\n    arr.sort()\n    max_pair = (arr[0], arr[1])\n    prod = max_pair[0] * max_pair[1]\n    for i in range(len(arr) - 1):\n        for j in range(i + 1, len(arr)):\n            curr_pair = (arr[i], arr[j])\n            curr_prod = curr_pair[0] * curr_pair[1]\n            if curr_prod > prod:\n                prod = curr_prod\n                max_pair = curr_pair\n    return max_pair"
    },
    {
      "rank": 20,
      "score": 8.0,
      "candidate": "def highest_product(input_list):\n    \"\"\"\n    >>> highest_product([1, 2, 3])\n    6\n    >>> highest_product([-1, 6, 3, 5])\n    18\n    >>> highest_product([-1, -2, -3])\n    -6\n    \"\"\"\n    if len(input_list) < 2:\n        raise ValueError(\"Input list must contain at least two elements\")\n\n    if len(input_list) == 2:\n        return input_list[0] * input_list[1]\n\n    input_list.sort()\n\n    if input_list[-1] > 0:\n        return input_list[-1] * input_list[-2]\n    elif input_list[-2] > 0:\n        return input_list[-2] * input_list[-3]\n    else:\n        return input_list[-1] * input_list[-2]\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 21,
      "score": 8.0,
      "candidate": "def pair_with_highest_product(input_list):\n    if len(input_list) <= 1:\n        return None\n    elif len(input_list) == 2:\n        return input_list\n    else:\n        result = max(input_list[0]*input_list[1], input_list[-1]*input_list[-2])\n        for i in range(len(input_list)-2):\n            if input_list[i]*input_list[i+1] > result:\n                result = input_list[i]*input_list[i+1]\n            elif input_list[i+1]*input_list[-1] > result:\n                result = input_list[i+1]*input_list[-1]\n            elif input_list[i]*input_list[-1] > result:\n                result = input_list[i]*input_list[-1]\n    return result\n\ndef pair_with_highest_product_solution(input_list):\n    if len(input_list) <= 1:\n        return None\n    elif len(input_list) == 2:\n        return input_list\n    else:\n        result = input_list[0]*input_list[1]\n        for i in range(len(input_list)-2):\n            for j in range(i+1,len(input_list)):\n                if input_list[i]*input_list[j] > result:\n                    result = input_list[i]*input_list[j]\n    return result\n\nprint(pair_with_highest_product_solution([-10, 3, -4, 2, -2, 4, 6, -6, 2, 2, 5, -1, 7, 6, -3, 5, -1, -2, 1, -5, 1, -1]))"
    },
    {
      "rank": 22,
      "score": 8.0,
      "candidate": "def pair_with_highest_product(array):\n    array.sort()\n    print(array)\n    print(len(array))\n    return find_pair(array, 0, len(array)-1)\n\n\ndef find_pair(array, start, end):\n    if start == end:\n        return array[start] * array[end]\n    elif start + 1 == end:\n        return max(array[start] * array[end], array[start] * array[start])\n    else:\n        return max(array[start] * array[end], array[start] * array[start+1], array[start+1] * array[end-1])\n\n\npair_with_highest_product([1, 2, 3, 4, 5, 6])"
    },
    {
      "rank": 23,
      "score": 8.0,
      "candidate": "def highest_pair_product(arr):\n    \"\"\"\n    Time complexity: O(nlogn)\n    Space complexity: O(n)\n    \"\"\"\n    arr.sort()\n    max_product = 0\n    for i in range(len(arr) - 1):\n        if arr[i] * arr[i + 1] > max_product:\n            max_product = arr[i] * arr[i + 1]\n\n    return max_product\n\n\ndef highest_pair_product2(arr):\n    \"\"\"\n    Time complexity: O(n^2)\n    Space complexity: O(1)\n    \"\"\"\n    max_product = 0\n    for i in range(len(arr) - 1):\n        for j in range(i + 1, len(arr)):\n            if arr[i] * arr[j] > max_product:\n                max_product = arr[i] * arr[j]\n\n    return max_product\n\n\ndef main():\n\n    arr = [1, 4, 3, 6, 2, 8]\n    print(highest_pair_product(arr))\n    print(highest_pair_product2(arr))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 24,
      "score": 8.0,
      "candidate": "def find_pair_with_highest_product(arr):\n    arr.sort()\n    return arr[-1] * arr[-2]\n\n\ndef main():\n    arr = [2, 6, 5, 8, 3]\n    print(find_pair_with_highest_product(arr))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 25,
      "score": 8.0,
      "candidate": "def highest_product(arr):\n    if len(arr) < 2:\n        return None\n    elif len(arr) == 2:\n        return arr[0] * arr[1]\n\n    arr.sort()\n    return max(arr[-1] * arr[-2], arr[0] * arr[-1])\n\n\nprint(highest_product([-10, -2, -4, 2, 4]))"
    },
    {
      "rank": 26,
      "score": 8.0,
      "candidate": "def find_max_pair(arr):\n    arr.sort()\n    i = len(arr) - 1\n    j = i - 1\n    max_pair = [arr[i], arr[j]]\n    max_pair_value = max_pair[0] * max_pair[1]\n\n    while i > 0 and j > 0:\n        curr_pair = [arr[i], arr[j]]\n        curr_pair_value = curr_pair[0] * curr_pair[1]\n        if curr_pair_value > max_pair_value:\n            max_pair = curr_pair\n            max_pair_value = curr_pair_value\n        if curr_pair[0] > curr_pair[1]:\n            i -= 1\n        else:\n            j -= 1\n\n    return max_pair\n\n\nprint(find_max_pair([1, 2, 3, 4, 5, 6, 7]))\nprint(find_max_pair([10, 20, 30, 40, 50, 60, 70]))\nprint(find_max_pair([10, 100, 50, 60, 70]))"
    },
    {
      "rank": 27,
      "score": 8.0,
      "candidate": "def pair_with_highest_product(numbers):\n    numbers.sort()\n    return max(numbers[-1] * numbers[-2], numbers[-1] * numbers[-3])\n\n\ndef test_pair_with_highest_product():\n    assert pair_with_highest_product([1, 2, 3, 4]) == 12\n    assert pair_with_highest_product([2, 3, 4, 5]) == 20\n    assert pair_with_highest_product([-1, 0, 1, 2, -2, 3, -3]) == 6"
    },
    {
      "rank": 28,
      "score": 8.0,
      "candidate": "from typing import List\n\n\ndef highest_product(arr: List[int]) -> List[int]:\n    \"\"\"\n    Returns pair with highest product.\n    >>> highest_product([1, 2, 3, 4])\n    [2, 4]\n    >>> highest_product([-1, -2, -3, -4])\n    [-1, -4]\n    >>> highest_product([-1, 2, 3, 4])\n    [2, 4]\n    >>> highest_product([-1, 2, -3, 4])\n    [2, 4]\n    \"\"\"\n    # Base case\n    if len(arr) == 1:\n        return arr\n\n    max_product = None\n    max_product_pair = None\n\n    # Calculating max_product\n    for i in range(0, len(arr) - 1):\n        for j in range(i + 1, len(arr)):\n            if max_product is None or arr[i] * arr[j] > max_product:\n                max_product = arr[i] * arr[j]\n                max_product_pair = [arr[i], arr[j]]\n\n    # Calculating min_product\n    min_product = None\n    min_product_pair = None\n\n    for i in range(0, len(arr) - 1):\n        for j in range(i + 1, len(arr)):\n            if min_product is None or arr[i] * arr[j] < min_product:\n                min_product = arr[i] * arr[j]\n                min_product_pair = [arr[i], arr[j]]\n\n    # print(max_product, min_product, max_product_pair, min_product_pair)\n\n    # If max_product and min_product are equal then return max_product_pair\n    if max_product == min_product:\n        return max_product_pair\n\n    # If max_product and min_product are not equal then check if\n    # max_product and 0, or min_product and 0 are present in array\n    # if both are present then return the pair with maximum product"
    },
    {
      "rank": 29,
      "score": 8.0,
      "candidate": "def maxPairProduct(array):\n    array.sort()\n    return array[-1] * array[-2]\n\nif __name__ == \"__main__\":\n    array = [1, 2, 3, 4, 5]\n    print(maxPairProduct(array))"
    },
    {
      "rank": 30,
      "score": 8.0,
      "candidate": "def highest_product_pair(list_of_nums):\n    \"\"\"\n    Return the pair with the highest product.\n    \"\"\"\n    if len(list_of_nums) < 2:\n        return None\n    highest_product = 0\n    highest_pair = []\n    for num1 in list_of_nums:\n        for num2 in list_of_nums:\n            if num1 == num2:\n                continue\n            product = num1 * num2\n            if product > highest_product:\n                highest_product = product\n                highest_pair = [num1, num2]\n    return highest_pair\n\n\ndef main():\n    print(highest_product_pair([-1, 2, 3, 1, -2, 0, 2]))\n    print(highest_product_pair([-1, -2, -3]))\n    print(highest_product_pair([-1, 2, 3, 1, -2, 0, 0]))\n    print(highest_product_pair([-1, 2, 3, 1, -2, 0]))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 31,
      "score": 8.0,
      "candidate": "def highest_product(input_list):\n    max_product = -1\n    first_index = -1\n    second_index = -1\n    for i in range(len(input_list)):\n        for j in range(i+1, len(input_list)):\n            if input_list[i] * input_list[j] > max_product:\n                max_product = input_list[i] * input_list[j]\n                first_index = i\n                second_index = j\n    return input_list[first_index], input_list[second_index], max_product\n\n\ndef main():\n    my_list = [1, 2, 3, 4, 5]\n    print(highest_product(my_list))\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 32,
      "score": 8.0,
      "candidate": "def find_pair_with_highest_product(arr):\n    arr.sort()\n    return arr[-1] * arr[-2]\n\n\nif __name__ == \"__main__\":\n    print(find_pair_with_highest_product([3, 5, 4, 6, 7, 8, 10, 12, 13, 14, 15]))"
    },
    {
      "rank": 33,
      "score": 8.0,
      "candidate": "def highest_product(array):\n    if len(array) < 2:\n        return None\n    if len(array) == 2:\n        return array[0] * array[1]\n\n    max_1 = max(array)\n    min_1 = min(array)\n\n    array.remove(max_1)\n    array.remove(min_1)\n\n    max_2 = max(array)\n    min_2 = min(array)\n\n    return max(max_1 * max_2, min_1 * min_2)\n\n\nprint(highest_product([-100, -100, -100, 100]))"
    },
    {
      "rank": 34,
      "score": 8.0,
      "candidate": "def pair_with_highest_product(arr):\n    arr.sort()\n    arr.reverse()\n    n = len(arr)\n    max_prod = -1\n    for i in range(n-1):\n        for j in range(i+1, n):\n            prod = arr[i] * arr[j]\n            if prod > max_prod:\n                max_prod = prod\n    return max_prod\n\n\nprint(pair_with_highest_product([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))"
    },
    {
      "rank": 35,
      "score": 8.0,
      "candidate": "def find_pair_with_highest_product(array):\n    # This function will return a pair with highest product\n    # from the given array of integers\n    if len(array) < 2:\n        return\n\n    # Sort the array in descending order\n    array.sort(reverse=True)\n\n    # Get the highest product\n    return array[0] * array[1]\n\n\ndef main():\n    # Driver code\n    array = [1, 2, 3, 4, 5]\n    print(find_pair_with_highest_product(array))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 36,
      "score": 8.0,
      "candidate": "def pair_with_highest_product(arr):\n    arr.sort()\n    max_product = 0\n    for i in range(len(arr) - 1):\n        if arr[i] > 0:\n            for j in range(i + 1, len(arr)):\n                if arr[i] * arr[j] > max_product:\n                    max_product = arr[i] * arr[j]\n    return max_product\n\n\ndef main():\n    print(pair_with_highest_product([1, -1, -1, 1]))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 37,
      "score": 8.0,
      "candidate": "def pair_with_highest_product(numbers):\n    if len(numbers) < 2:\n        return -1\n    if len(numbers) == 2:\n        return numbers[0] * numbers[1]\n    max_product = -1\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            product = numbers[i] * numbers[j]\n            if product > max_product:\n                max_product = product\n    return max_product\n\n\nprint(pair_with_highest_product([-100, 2, 3, 2, 50, 100]))"
    },
    {
      "rank": 38,
      "score": 8.0,
      "candidate": "from typing import List\n\n\ndef highest_product_pair(arr: List[int]) -> int:\n    \"\"\"\n    time complexity: O(n)\n    space complexity: O(1)\n    \"\"\"\n\n    if len(arr) < 2:\n        raise ValueError(\"Array should be of at least length 2.\")\n\n    arr = sorted(arr)\n\n    return max(\n        arr[-1] * arr[-2], arr[-1] * arr[-3], arr[0] * arr[1], arr[0] * arr[2]\n    )\n\n\ndef main():\n    print(highest_product_pair([2, 4, 3, 1]))\n    print(highest_product_pair([2, 4, 3, 1, 0]))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 39,
      "score": 8.0,
      "candidate": "def pair_with_highest_product(array):\n    array.sort()\n    print(array)\n    n = len(array)\n    first = 0\n    last = n-1\n    result = -1\n    while first < last:\n        product = array[first] * array[last]\n        if product > result:\n            result = product\n        if array[first] < 0:\n            first += 1\n        elif array[last] > 0:\n            last -= 1\n        else:\n            first += 1\n            last -= 1\n    return result\n\n\nprint(pair_with_highest_product([-2, -5, -1, -4, -3]))"
    },
    {
      "rank": 40,
      "score": 8.0,
      "candidate": "from typing import List\n\n\ndef max_product_pair(arr: List[int]) -> int:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(1)\n    \"\"\"\n\n    if len(arr) <= 1:\n        return None\n\n    max_product = 0\n\n    for i in range(len(arr) - 1):\n        for j in range(i + 1, len(arr)):\n            if arr[i] * arr[j] > max_product:\n                max_product = arr[i] * arr[j]\n\n    return max_product\n\n\nif __name__ == \"__main__\":\n    print(max_product_pair([1, 2, 3, 4, 5, 6]))\n    print(max_product_pair([-1, -2, -3, -4, -5, -6]))\n    print(max_product_pair([-1, -2, -3, -4, -5, -6, -7]))"
    },
    {
      "rank": 41,
      "score": 8.0,
      "candidate": "def find_pair_with_highest_product(nums):\n    max_pair = [None, None]\n    max_prod = float('-inf')\n\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if max_prod < nums[i] * nums[j]:\n                max_prod = nums[i] * nums[j]\n                max_pair = [nums[i], nums[j]]\n\n    return max_pair\n\n\nprint(find_pair_with_highest_product([2, 4, 3, 6]))\nprint(find_pair_with_highest_product([2, 4, 3, 6, 2]))\nprint(find_pair_with_highest_product([2, 4, 3, 6, 2, 5]))\nprint(find_pair_with_highest_product([2, 4, 3, 6, 2, 5, 4]))"
    },
    {
      "rank": 42,
      "score": 8.0,
      "candidate": "def pair_with_highest_product(input_list):\n    input_list = sorted(input_list)\n    product = input_list[-1] * input_list[-2]\n    return product\n\n\nprint(pair_with_highest_product([1, 2, 3, 4, 5]))\nprint(pair_with_highest_product([2, 4, 1, 3]))\nprint(pair_with_highest_product([2, 4, 3]))"
    },
    {
      "rank": 43,
      "score": 8.0,
      "candidate": "def pair_with_highest_product(arr):\n    if len(arr) == 0:\n        return None\n    if len(arr) == 1:\n        return arr[0], arr[0]\n    arr.sort()\n    return arr[-1]*arr[-2], arr[-1]"
    },
    {
      "rank": 44,
      "score": 8.0,
      "candidate": "def max_pair_product(input_list):\n    input_list.sort()\n    return input_list[-1] * input_list[-2]\n\ndef max_pair_product_alt(input_list):\n    max_product = -1\n    for i in range(len(input_list)):\n        for j in range(i+1, len(input_list)):\n            if input_list[i] * input_list[j] > max_product:\n                max_product = input_list[i] * input_list[j]\n    return max_product\n\n\nprint(max_pair_product([-10, 1, 2, 3, 4, 5, 6, 7, 8, 9]))\nprint(max_pair_product_alt([-10, 1, 2, 3, 4, 5, 6, 7, 8, 9]))"
    },
    {
      "rank": 45,
      "score": 8.0,
      "candidate": "from typing import List\n\n\ndef highest_product(array: List[int]) -> int:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(1)\n    \"\"\"\n    if len(array) < 2:\n        raise ValueError(\"Array length should be greater than 1\")\n\n    max_value = max(array)\n    min_value = min(array)\n\n    if max_value == min_value:\n        return max_value\n\n    if max_value > 0:\n        return max(max_value * max_value, max_value * min_value)\n\n    return max(max_value * max_value, min_value * min_value)\n\n\nif __name__ == \"__main__\":\n    assert highest_product([1, 2, 3, 4, 5]) == 120\n    assert highest_product([2, 4, 6, 8]) == 48\n    assert highest_product([-2, 2, 6, 8]) == 48\n    assert highest_product([-2, -2, -2, 2]) == 4\n    assert highest_product([-2, -2, 2, 2]) == 8\n    assert highest_product([-2, -2, -2, -2]) == -8\n    assert highest_product([-2, -2, -2, -2, 2]) == 4\n    assert highest_product([-2, -2, -2, -2, -2]) == -8\n    assert highest_product([1, 2, 3, 4, 5, 6]) == 120\n    assert highest_product([-1, -2, -3, -4, -5, -6]) == -720"
    },
    {
      "rank": 46,
      "score": 8.0,
      "candidate": "def highest_product(lst):\n    # First we find the maximum and minimum values.\n    maximum = max(lst)\n    minimum = min(lst)\n\n    # We remove the maximum and minimum values from the list.\n    lst.remove(maximum)\n    lst.remove(minimum)\n\n    # We find the highest product of two elements from the remaining list.\n    highest_product = max(lst[0] * lst[1], lst[1] * lst[2], lst[0] * lst[2])\n\n    return highest_product\n\nprint(highest_product([2, 4, 6, 8]))\nprint(highest_product([4, 6, 2, 8]))\nprint(highest_product([2, 8, 4, 6]))\nprint(highest_product([8, 4, 6, 2]))\nprint(highest_product([6, 4, 2, 8]))"
    },
    {
      "rank": 47,
      "score": 8.0,
      "candidate": "def find_pair(array):\n    pair = []\n    for i in range(len(array)):\n        for j in range(i+1, len(array)):\n            if array[i] * array[j] > array[i+1] * array[j+1]:\n                pair = [array[i], array[j]]\n                return pair\n\n\nprint(find_pair([-10, 3, 5, 6, 20]))\nprint(find_pair([10, 10, 10, 10]))\nprint(find_pair([1, 2, 3, 4, 5]))"
    },
    {
      "rank": 48,
      "score": 8.0,
      "candidate": "def highest_product(arr):\n    if len(arr) < 2:\n        return None\n\n    highest = -10000\n    second_highest = -10000\n\n    for i in range(len(arr)):\n        if arr[i] > highest:\n            second_highest = highest\n            highest = arr[i]\n        elif arr[i] > second_highest:\n            second_highest = arr[i]\n\n    return highest * second_highest\n\n\nprint(highest_product([10, 20, 30, 40, 50]))"
    },
    {
      "rank": 49,
      "score": 8.0,
      "candidate": "def highest_product(array):\n    \"\"\"\n    :param array: list - list of integers to find the pair with the highest product from\n    :return: list - first and second values comprising the pair with the highest product in\n    \"\"\"\n    if len(array) < 2:\n        return array\n    array = sorted(array)\n    return array[-1] * array[-2]"
    },
    {
      "rank": 50,
      "score": 8.0,
      "candidate": "def pair_with_highest_product(nums):\n    nums.sort()\n    return max(nums[-1] * nums[-2], nums[0] * nums[-1])\n\n\nprint(pair_with_highest_product([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))"
    },
    {
      "rank": 51,
      "score": 8.0,
      "candidate": "def pair_with_highest_product(lst):\n    lst.sort()\n    return lst[-1] * lst[-2]\n\n\nprint(pair_with_highest_product([-10, 1, 3, 2, 100, -100]))"
    },
    {
      "rank": 52,
      "score": 8.0,
      "candidate": "def find_pair(array):\n    pair = []\n    for i in range(len(array)):\n        for j in range(i+1, len(array)):\n            if array[i] * array[j] > array[pair[0]] * array[pair[1]]:\n                pair = [i, j]\n\n    return pair\n\n\ndef main():\n    array = [1, 2, 3, 4, 5, 6]\n    print(find_pair(array))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 53,
      "score": 8.0,
      "candidate": "def pair_with_highest_product(arr):\n    highest_product = arr[0] * arr[1]\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            product = arr[i] * arr[j]\n            if product > highest_product:\n                highest_product = product\n    return highest_product\n\n\nprint(pair_with_highest_product([1, 2, 3, 4, 5]))\nprint(pair_with_highest_product([-1, 2, 3, 4, 5]))\nprint(pair_with_highest_product([-1, -2, -3, -4, -5]))"
    },
    {
      "rank": 54,
      "score": 8.0,
      "candidate": "def pair_with_highest_product(nums):\n    \"\"\"\n    Time Complexity: O(nlogn)\n    Space Complexity: O(1)\n    \"\"\"\n    nums.sort()\n    return nums[-1] * nums[-2]\n\n\ndef pair_with_highest_product_two_pointers(nums):\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(1)\n    \"\"\"\n    nums.sort()\n    max_product = nums[-1] * nums[-2]\n    for i in range(len(nums) - 2, -1, -1):\n        for j in range(i + 1, len(nums)):\n            max_product = max(max_product, nums[i] * nums[j])\n    return max_product\n\n\nif __name__ == \"__main__\":\n    print(pair_with_highest_product([1, 2, 3, 4, 5]))\n    print(pair_with_highest_product_two_pointers([1, 2, 3, 4, 5]))"
    },
    {
      "rank": 55,
      "score": 8.0,
      "candidate": "def highest_product(nums):\n    if len(nums) < 2:\n        return\n    nums.sort()\n    return nums[-1] * nums[-2]"
    },
    {
      "rank": 56,
      "score": 8.0,
      "candidate": "def maxPairwiseProduct(a):\n    \"\"\"\n    :param a: list - list of integers\n    :return: integer - the maximum pairwise product between any two elements in the list\n    \"\"\"\n    if len(a) < 2:\n        return None\n    max_product = 0\n    for i in range(len(a)):\n        for j in range(len(a)):\n            if i != j:\n                if a[i] * a[j] > max_product:\n                    max_product = a[i] * a[j]\n    return max_product\n\n\nprint(maxPairwiseProduct([1, 2, 3]))\nprint(maxPairwiseProduct([9, 3, 5]))\nprint(maxPairwiseProduct([2, 4, 9, 6]))\nprint(maxPairwiseProduct([2, 4, 9, 6, 8]))"
    },
    {
      "rank": 57,
      "score": 8.0,
      "candidate": "def max_pair(arr):\n    # Base case\n    if len(arr) == 2:\n        return arr[0] * arr[1]\n\n    # Recursion\n    else:\n        max_pair = 0\n        for i in range(len(arr)):\n            # Find max pair with highest product\n            max_pair = max(max_pair, arr[i] * max_pair_with_remaining(arr[:i] + arr[i+1:]))\n\n        return max_pair\n\ndef max_pair_with_remaining(arr):\n    return max(arr)\n\ndef main():\n    print(max_pair([1, 2, 3, 4, 5]))\n    print(max_pair([2, 2, 4, 5]))\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 58,
      "score": 8.0,
      "candidate": "def find_max_product(lst):\n    if len(lst) < 2:\n        return None\n\n    first = lst[0]\n    second = max(lst[1:])\n    for i in range(len(lst)):\n        if lst[i] > first:\n            first = lst[i]\n\n    for i in range(len(lst)):\n        if lst[i] > second and lst[i] != first:\n            second = lst[i]\n\n    return first * second\n\n\nif __name__ == \"__main__\":\n    print(find_max_product([1, 2, 3, 4, 5]))\n    print(find_max_product([5, 4, 3, 2, 1]))\n    print(find_max_product([-1, 2, 3, 4, 5]))"
    },
    {
      "rank": 59,
      "score": 8.0,
      "candidate": "def pair_with_highest_product(nums):\n    max_product = -1\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            product = nums[i] * nums[j]\n            if product > max_product:\n                max_product = product\n                max_pair = [nums[i], nums[j]]\n    return max_pair, max_product\n\n\nprint(pair_with_highest_product([-10, 5, 5, 2, 2]))"
    },
    {
      "rank": 60,
      "score": 8.0,
      "candidate": "def pair_with_highest_product(arr):\n    max_product = float(\"-inf\")\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            max_product = max(arr[i] * arr[j], max_product)\n\n    return max_product\n\n\ndef main():\n    assert pair_with_highest_product([1, 2, 3, 4]) == 12\n    assert pair_with_highest_product([-1, 0, 1, 2, -2]) == 2\n    assert pair_with_highest_product([1, 2, -1, 2, 4, 5]) == 20\n    assert pair_with_highest_product([-1, -2, -3, -4]) == 4\n    assert pair_with_highest_product([-1, 1, -1, 1, -1]) == 1\n    assert pair_with_highest_product([-2, -3, -1, -1]) == -3\n    assert pair_with_highest_product([-1, -1, -1, -1]) == -1\n    assert pair_with_highest_product([-1, 1, 0, -1, 1, 0]) == 0\n    assert pair_with_highest_product([0, -1, 0, -1, 0, -1]) == 0\n    assert pair_with_highest_product([-1, 0, -1, 0, -1, 0]) == 0\n    assert pair_with_highest_product([0, -1, 0, -1, 0, 1]) == 0\n    assert pair_with_highest_product([0, 1, 0, -1, 0, 1]) == 0\n    assert pair_with_highest_product([0, 1, 0, -1, 0, -1]) == 0\n    assert pair_with_highest_product([-1, 0, 1, 0, -1, 0]) == 0"
    },
    {
      "rank": 61,
      "score": 8.0,
      "candidate": "def find_pair_with_highest_product(arr):\n    arr.sort()\n    arr.reverse()\n\n    highest_product = 0\n    for i in range(len(arr)-1):\n        if arr[i] * arr[i+1] > highest_product:\n            highest_product = arr[i] * arr[i+1]\n    return highest_product\n\n\nif __name__ == \"__main__\":\n    print(find_pair_with_highest_product([1, 2, 3, 4, 5]))"
    },
    {
      "rank": 62,
      "score": 8.0,
      "candidate": "def max_pairwise_product(numbers):\n    n = len(numbers)\n    max_i = 0\n    max_j = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if numbers[i] * numbers[j] > numbers[max_i] * numbers[max_j]:\n                max_i = i\n                max_j = j\n    return numbers[max_i] * numbers[max_j]\n\n\ndef main():\n    a = [1, 2, 3, 4, 5, 6]\n    print(max_pairwise_product(a))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 63,
      "score": 8.0,
      "candidate": "def find_pair_with_highest_product(arr):\n    \"\"\"\n    :param: array - array of integers\n    return: pair with highest product\n    \"\"\"\n    if len(arr) < 2:\n        return None\n\n    highest_product = arr[0] * arr[1]\n\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            current_product = arr[i] * arr[j]\n            if current_product > highest_product:\n                highest_product = current_product\n\n    return highest_product\n\n\ndef main():\n    print(find_pair_with_highest_product([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 64,
      "score": 8.0,
      "candidate": "def max_pair(arr):\n    n = len(arr)\n    if n < 2:\n        return None\n    max_pair = [0, 0]\n    for i in range(n - 1):\n        for j in range(i + 1, n):\n            if arr[i] * arr[j] > max_pair[0] * max_pair[1]:\n                max_pair[0], max_pair[1] = arr[i], arr[j]\n    return max_pair\n\n\ndef main():\n    print(max_pair([2, 4, 3, 5]))\n    print(max_pair([1, 2, 3, 5]))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 65,
      "score": 8.0,
      "candidate": "from typing import List\n\n\ndef pair_with_highest_product(input_list: List[int]) -> List[int]:\n    \"\"\"\n    O(nlogn) & O(n)\n    \"\"\"\n    if not input_list:\n        return []\n\n    sorted_list = sorted(input_list)\n\n    max_product = 0\n    for i in range(len(sorted_list) - 1):\n        left = sorted_list[i]\n        right = sorted_list[-1]\n        product = left * right\n\n        if product > max_product:\n            max_product = product\n\n    return [max_product]\n\n\nif __name__ == \"__main__\":\n    assert pair_with_highest_product([3, 6, -2, -5, 7, 3]) == [21]"
    },
    {
      "rank": 66,
      "score": 8.0,
      "candidate": "def pair_with_highest_product(array):\n    array.sort()\n    n = len(array)\n    i, j = n - 1, n - 1\n    product = 0\n    while i > 0:\n        product = array[i] * array[j]\n        if product > 0:\n            break\n        if product < 0:\n            i -= 1\n        if product > 0:\n            j -= 1\n    return product\n\n\nprint(pair_with_highest_product([-10, 3, 5, 6, 20]))"
    },
    {
      "rank": 67,
      "score": 8.0,
      "candidate": "def find_pair_with_highest_product(arr):\n    max_product = -float('inf')\n    for i in range(0, len(arr)):\n        for j in range(i+1, len(arr)):\n            product = arr[i] * arr[j]\n            if product > max_product:\n                max_product = product\n    return max_product\n\n\ndef find_pair_with_highest_product_eff(arr):\n    arr.sort()\n    max_product = arr[-1] * arr[-2]\n    return max_product\n\n\nif __name__ == \"__main__\":\n    array = [1, 2, 3, 4, 5]\n    print(find_pair_with_highest_product(array))\n    print(find_pair_with_highest_product_eff(array))"
    },
    {
      "rank": 68,
      "score": 8.0,
      "candidate": "def highest_product(arr):\n    if len(arr) == 3:\n        return max(arr[0]*arr[1], arr[0]*arr[2], arr[1]*arr[2])\n    else:\n        arr.sort()\n        return max(arr[-1]*arr[-2]*arr[-3], arr[-1]*arr[0]*arr[1])"
    },
    {
      "rank": 69,
      "score": 8.0,
      "candidate": "def highest_product(arr):\n    if len(arr) == 0:\n        return 0\n    if len(arr) == 1:\n        return arr[0]\n    if len(arr) == 2:\n        return arr[0] * arr[1]\n\n    n = len(arr)\n    max_so_far = arr[0] * arr[1]\n\n    # Initialize max1 and max2 values at minimum\n    max1 = min(arr[0], arr[1])\n    max2 = max(arr[0], arr[1])\n\n    # Traverse rest of the array\n    for i in range(2, n):\n        if arr[i] > max1:\n            max2 = max1\n            max1 = arr[i]\n        elif arr[i] > max2:\n            max2 = arr[i]\n\n        max_so_far = max(max1 * max2, max_so_far)\n\n    return max_so_far"
    },
    {
      "rank": 70,
      "score": 8.0,
      "candidate": "def pair_with_highest_product(arr):\n    if len(arr) < 2:\n        return\n    arr.sort()\n    return arr[-1] * arr[-2]"
    },
    {
      "rank": 71,
      "score": 8.0,
      "candidate": "def max_pair(input_list):\n    max_pair = [0, 0]\n\n    for i in range(len(input_list)):\n        for j in range(i + 1, len(input_list)):\n            if input_list[i] * input_list[j] > max_pair[0] * max_pair[1]:\n                max_pair = [input_list[i], input_list[j]]\n    return max_pair\n\n\nprint(max_pair([1, 2, 3, 4, 5, 6, 7, 8, 9]))"
    },
    {
      "rank": 72,
      "score": 8.0,
      "candidate": "def find_pair_with_highest_product(numbers):\n    max_pair = [0, 0]\n\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            if (numbers[i] * numbers[j]) > (max_pair[0] * max_pair[1]):\n                max_pair[0], max_pair[1] = numbers[i], numbers[j]\n\n    return max_pair\n\n\ndef main():\n    print(find_pair_with_highest_product([2, 4, 3, 6, 8]))\n    print(find_pair_with_highest_product([5, 6, 2, 7, 4]))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 73,
      "score": 8.0,
      "candidate": "def pair_with_highest_product(arr: list) -> list:\n    \"\"\"\n    Return the pair with highest product\n    :param arr: list of integers\n    :return: list of integers\n    >>> pair_with_highest_product([1,2,3,4,5,6])\n    [3, 6]\n    >>> pair_with_highest_product([-1,2,3,-4,5,6])\n    [3, 6]\n    >>> pair_with_highest_product([-1,2,0,-4,5,6])\n    [0, 6]\n    >>> pair_with_highest_product([-1,2,0,-4,-5,6])\n    [-1, -5]\n    >>> pair_with_highest_product([-1,2,0,-4,-5,6,10])\n    [-1, 10]\n    \"\"\"\n    max_product = -1\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            product = arr[i] * arr[j]\n            if product > max_product:\n                max_product = product\n                pair = [arr[i], arr[j]]\n    return pair\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 74,
      "score": 8.0,
      "candidate": "def highest_product(numbers):\n    if len(numbers) < 2:\n        return None\n    if len(numbers) == 2:\n        return numbers[0] * numbers[1]\n\n    max_1 = max(numbers[:len(numbers)//2])\n    min_1 = min(numbers[:len(numbers)//2])\n    max_2 = max(numbers[len(numbers)//2:])\n    min_2 = min(numbers[len(numbers)//2:])\n\n    return max(max_1 * max_2, min_1 * min_2)\n\nprint(highest_product([-10, -10, 1, 3, 2]))"
    },
    {
      "rank": 75,
      "score": 8.0,
      "candidate": "def max_pair(arr):\n    if len(arr) == 0:\n        return 0\n    elif len(arr) == 1:\n        return arr[0]\n    else:\n        max_prod = arr[0] * arr[1]\n        for i in range(len(arr)):\n            for j in range(i+1, len(arr)):\n                prod = arr[i] * arr[j]\n                if prod > max_prod:\n                    max_prod = prod\n\n        return max_prod\n\n\narr = [5, 4, 3, 2, 1]\nprint(max_pair(arr))\n\n\ndef max_pair_eff(arr):\n    if len(arr) == 0:\n        return 0\n    elif len(arr) == 1:\n        return arr[0]\n    else:\n        max_prod = arr[0] * arr[1]\n        max_prod_index = [0, 1]\n        for i in range(len(arr)):\n            for j in range(i+1, len(arr)):\n                prod = arr[i] * arr[j]\n                if prod > max_prod:\n                    max_prod = prod\n                    max_prod_index = [i, j]\n\n        return max_prod, max_prod_index\n\n\nprint(max_pair_eff(arr))"
    },
    {
      "rank": 76,
      "score": 8.0,
      "candidate": "from __future__ import annotations\n\n\ndef pair_with_highest_product(arr: list[int]) -> tuple[int, int]:\n    \"\"\"\n    Find a pair with highest product from a given array of integers.\n    >>> pair_with_highest_product([1, 2, 3, 4, 5])\n    (4, 3)\n    \"\"\"\n    arr_sorted = sorted(arr)\n    return (arr_sorted[-1] * arr_sorted[-2], arr_sorted[-1])\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 77,
      "score": 8.0,
      "candidate": "def find_pair_with_highest_product(numbers):\n    \"\"\"\n    :param numbers: list of integers\n    :return: pair with highest product\n    \"\"\"\n    if len(numbers) < 2:\n        return None\n\n    highest_product = 0\n    highest_pair = []\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            product = numbers[i] * numbers[j]\n            if product > highest_product:\n                highest_product = product\n                highest_pair = [numbers[i], numbers[j]]\n    return highest_pair\n\n\nif __name__ == '__main__':\n    print(\"pair with highest product is: {}\".format(find_pair_with_highest_product([-10, 1, 3, 2, -100, 4, 6, 100])))"
    },
    {
      "rank": 78,
      "score": 8.0,
      "candidate": "def find_pair(nums):\n    \"\"\"\n    We can solve this problem in O(n) time with two pointers.\n    \"\"\"\n    nums.sort()\n    largest = 0\n    for i in range(len(nums)-1):\n        if nums[i]*nums[i+1] > largest:\n            largest = nums[i]*nums[i+1]\n    return largest"
    },
    {
      "rank": 79,
      "score": 8.0,
      "candidate": "def find_pair(list_of_nums):\n    max_prod = None\n    for i in range(len(list_of_nums)):\n        for j in range(i+1, len(list_of_nums)):\n            prod = list_of_nums[i] * list_of_nums[j]\n            if max_prod is None or prod > max_prod:\n                max_prod = prod\n    return max_prod\n\n\ndef main():\n    list_of_nums = [2, 5, 7, 11, 15]\n    pair = find_pair(list_of_nums)\n    print(pair)\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 80,
      "score": 8.0,
      "candidate": "def highest_product(array):\n    if len(array) < 2:\n        raise Exception(\"Array must be of length 2 or greater.\")\n\n    highest_product = 0\n\n    if len(array) == 2:\n        return max(array[0] * array[1], array[1] * array[0])\n\n    array.sort()\n\n    highest_product = array[-1] * array[-2]\n    lowest = array[0]\n\n    for i in range(1, len(array)):\n        if array[i] > lowest:\n            highest_product = max(highest_product, array[i] * lowest)\n        else:\n            lowest = array[i]\n\n    return highest_product\n\n\nif __name__ == \"__main__\":\n    print(highest_product([1, 2, 3, 4]))\n    print(highest_product([-1, 2, 3, 4]))\n    print(highest_product([-1, -2, 3, 4]))\n    print(highest_product([-1, -2, -3, -4]))\n    print(highest_product([-1, -2, -3, 4]))\n    print(highest_product([-1, -2, 3, -4]))\n    print(highest_product([-1, 2, -3, 4]))\n    print(highest_product([1, 2, -3, 4]))"
    },
    {
      "rank": 81,
      "score": 7.0,
      "candidate": "def max_pairwise_product(numbers):\n    \"\"\"\n    TC: O(n)\n    SC: O(1)\n    \"\"\"\n    max_index = 0\n    second_max_index = 1\n    for i, num in enumerate(numbers):\n        if num > numbers[max_index]:\n            second_max_index = max_index\n            max_index = i\n        elif num > numbers[second_max_index]:\n            second_max_index = i\n\n    return numbers[max_index] * numbers[second_max_index]\n\n\nprint(max_pairwise_product([1, 2, 3, 4, 5, 6]))"
    },
    {
      "rank": 82,
      "score": 1.0,
      "candidate": "from typing import List, Tuple\n\n\ndef find_highest_product(arr: List[int]) -> Tuple[int, int]:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(1)\n    \"\"\"\n    min_1 = float(\"inf\")\n    min_2 = float(\"inf\")\n\n    max_1 = float(\"-inf\")\n    max_2 = float(\"-inf\")\n\n    for num in arr:\n        if num > max_1:\n            max_1 = num\n            max_2 = min_1\n            min_1 = min_2\n            min_2 = num\n        elif num > max_2:\n            max_2 = num\n        if num < min_1:\n            min_2 = min_1\n            min_1 = num\n        elif num < min_2:\n            min_2 = num\n\n    return (max_1 * max_2, max_1)\n\n\nif __name__ == \"__main__\":\n    print(find_highest_product([-10, -10, 5, 6, 10]))"
    },
    {
      "rank": 83,
      "score": 1.0,
      "candidate": "from __future__ import annotations\n\n\ndef highest_product_of_pair(arr: list[int]) -> int:\n    \"\"\"\n    Time complexity: O(n)\n    Space complexity: O(1)\n    \"\"\"\n\n    if len(arr) < 2:\n        raise ValueError(\"The array should have at least two numbers\")\n\n    max_product = -1\n    max_first = -1\n    max_second = -1\n\n    for num in arr:\n        if num > max_first:\n            max_first = num\n\n    for num in arr:\n        if num > max_second and num != max_first:\n            max_second = num\n\n    max_product = max_first * max_second\n    return max_product\n\n\nif __name__ == \"__main__\":\n    assert highest_product_of_pair([1, 2, 3, 4, 5]) == 20"
    },
    {
      "rank": 84,
      "score": 1.0,
      "candidate": "def max_pair_product(arr):\n    return max(max_pair(arr), max_pair(arr[::-1]))\n\n\ndef max_pair(arr):\n    largest, second_largest = float(\"-inf\"), float(\"-inf\")\n    for num in arr:\n        if num > largest:\n            largest, second_largest = num, largest\n        elif num > second_largest:\n            second_largest = num\n    return largest * second_largest\n\n\nprint(max_pair_product([2, 4, 3, 6, 8]))"
    },
    {
      "rank": 85,
      "score": 1.0,
      "candidate": "from __future__ import annotations\n\n\ndef pair_with_highest_product(integers: list[int]) -> tuple[int, int]:\n    \"\"\"\n    Returns a pair with the highest product.\n    >>> pair_with_highest_product([1, 2, 3, 4])\n    (2, 4)\n    >>> pair_with_highest_product([2, 4, 3, 1])\n    (3, 4)\n    >>> pair_with_highest_product([2, 4, 3, 1])\n    (3, 4)\n    >>> pair_with_highest_product([2, 4, 0, 1])\n    (0, 4)\n    >>> pair_with_highest_product([2, 4, 0, 1, -1])\n    (0, 4)\n    >>> pair_with_highest_product([2, 4, 0, 1, -1])\n    (0, 4)\n    >>> pair_with_highest_product([2, 4, 0, 1, -1, 3])\n    (0, 4)\n    >>> pair_with_highest_product([2, 4, 0, 1, -1, 3, 10])\n    (0, 4)\n    >>> pair_with_highest_product([2, 4, 0, 1, -1, 3, 10, 12])\n    (0, 12)\n    >>> pair_with_highest_product([2, 4, 0, 1, -1, 3, 10, 12, 14])\n    (0, 14)\n    \"\"\"\n    if not integers:\n        raise ValueError(\"Input list should not be empty\")\n\n    maximum_product = (\n        max(integers) * min(integers)\n        if len(integers) == 2\n        else max(\n            [\n                max(integers[i], integers[i + 1]) * min(integers[i], integers[i + 1])\n                for i in range"
    },
    {
      "rank": 86,
      "score": 1.0,
      "candidate": "def highest_product(array):\n    \"\"\"\n    :param: array - List of integers\n    Should return a single value\n    \"\"\"\n    if len(array) < 2:\n        return None\n\n    if len(array) == 2:\n        return array[0] * array[1]\n\n    # Sort the array\n    array.sort()\n\n    # Get the first two values\n    first = array[0]\n    second = array[1]\n\n    # Get the last two values\n    last = array[-1]\n    second_to_last = array[-2]\n\n    # Check if the product of the first and second is greater than\n    # the product of the last and second to last\n    if first * second > last * second_to_last:\n        return first * second\n    else:\n        return last * second_to_last\n\n\n\ndef test_function(test_case):\n    test_input, test_expected = test_case\n    test_actual = highest_product(test_input)\n    if test_actual == test_expected:\n        print(\"Pass\")\n    else:\n        print(\"Fail\")\n\ntest_function(([1,2,3], 6))\ntest_function(([2,0,-2], 4))\ntest_function(([-2,-3,-1], -6))\ntest_function(([-2,0,-2], 0))\ntest_function(([-2,-3,-1], -6))\ntest_function(([-2,-3,-1], -6))\ntest_function(([-2,-3,-1], -6))\ntest_function(([-2,-3,-1], -6))\ntest_function(([-2,-3,-1], -6))\ntest_function(([-2,-3,-1], -6))\ntest_function(([-2,-3,-1], -6))\ntest_function(([-2,-3,-1], -6))\ntest_function(([-2,-3,-1], -6))\ntest_function(([-2,-3,-1], -6))\ntest_function(([-2,-3,-1], -6))\ntest_function(([-2,-3,-1], -6))\ntest_function"
    },
    {
      "rank": 87,
      "score": 1.0,
      "candidate": "def highest_product(arr):\n    \"\"\"\n    >>> highest_product([1, 2, 3, 4, 5])\n    20\n    >>> highest_product([-1, -2, -3, -4, -5])\n    20\n    >>> highest_product([1, 2, -3, 4, 5])\n    20\n    >>> highest_product([-1, 2, -3, -4, 5])\n    20\n    >>> highest_product([1, -2, -3, 4, -5])\n    20\n    >>> highest_product([-1, -2, 3, -4, -5])\n    20\n    >>> highest_product([-1, 2, -3, -4, -5])\n    20\n    \"\"\"\n    if len(arr) < 2:\n        return None\n\n    min_product = float(\"inf\")\n    max_product = float(\"-inf\")\n\n    # find highest and lowest number\n    for i in arr:\n        if i > max_product:\n            max_product = i\n        if i < min_product:\n            min_product = i\n\n    # find max and min product\n    max_product = max_product * min_product\n    min_product = max_product\n\n    for i in arr:\n        if i > min_product:\n            min_product = i\n        if i < max_product:\n            max_product = i\n\n    return max_product\n\n\ndef highest_product_v2(arr):\n    \"\"\"\n    >>> highest_product_v2([1, 2, 3, 4, 5])\n    20\n    >>> highest_product_v2([-1, -2, -3, -4, -5])\n    20\n    >>> highest_product_v2([1, 2, -3, 4, 5])\n    20\n    >>> highest_product_v2([-1, 2, -3, -4, 5])\n    20\n    >>> highest_product_v2([1, -2, -3, 4, -5])"
    },
    {
      "rank": 88,
      "score": 1.0,
      "candidate": "from __future__ import annotations\n\n\ndef highest_product(arr: list[int]) -> tuple[int, int]:\n    \"\"\"\n    >>> highest_product([10, 3, 5, 6])\n    (30, 5)\n    >>> highest_product([-10, -3, -5, -6])\n    (-30, -5)\n    >>> highest_product([-10, -3, 5, -6])\n    (30, -5)\n    >>> highest_product([10, 3, -5, -6])\n    (-30, -5)\n    \"\"\"\n    if len(arr) < 2:\n        return -1\n\n    max_pos = max(arr)\n    min_neg = -min(arr)\n    max_neg = -max(arr)\n\n    if max_pos > 0:\n        return max_pos * max_pos, max_pos\n\n    if min_neg < 0:\n        return min_neg * min_neg, min_neg\n\n    if max_neg < 0:\n        return max_neg * max_neg, max_neg\n\n    return max_neg * max_pos, max_neg\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 89,
      "score": 1.0,
      "candidate": "def find_pair(input_list):\n    \"\"\"\n    :param input_list: list of integers\n    :return: pair with highest product\n    \"\"\"\n    max_product = -100000000000000\n    for i in range(len(input_list)):\n        for j in range(i+1, len(input_list)):\n            product = input_list[i] * input_list[j]\n            if product > max_product:\n                max_product = product\n    return max_product\n\n\n\nprint(find_pair([1, 2, 3, 4, 5]))\nprint(find_pair([2, 4, 6, 8, 10]))\nprint(find_pair([3, 6, 9, 12]))"
    },
    {
      "rank": 90,
      "score": 1.0,
      "candidate": "from typing import List\n\n\ndef max_pairwise_product(numbers: List[int]) -> int:\n    \"\"\"\n    Time Complexity: O(n*log(n))\n    Space Complexity: O(1)\n    \"\"\"\n    numbers.sort()\n    return numbers[-1] * numbers[-2]\n\n\nif __name__ == \"__main__\":\n    assert max_pairwise_product([1, 2, 3]) == 6\n    assert max_pairwise_product([9, 3, 2]) == 18"
    },
    {
      "rank": 91,
      "score": 1.0,
      "candidate": "from functools import reduce\n\n\ndef highest_product(arr):\n    if len(arr) < 2:\n        return None\n\n    max_product = -1\n    min_product = -1\n    for i in arr:\n        if i > max_product:\n            max_product = i\n        if i < min_product or min_product == -1:\n            min_product = i\n\n    for i in arr:\n        if i > min_product and i < max_product:\n            return i * max_product\n\n\ndef highest_product_using_reduce(arr):\n    return reduce(lambda x, y: x if x[0] > y[0] else y, [(x * y, x, y) for x in arr for y in arr if x != y])[0]\n\n\nprint(highest_product([2, 1, 0, 4]))\nprint(highest_product_using_reduce([2, 1, 0, 4]))"
    },
    {
      "rank": 92,
      "score": 1.0,
      "candidate": "def highest_pair_product(arr):\n    highest_product = 0\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            product = arr[i] * arr[j]\n            if product > highest_product:\n                highest_product = product\n    return highest_product\n\n\ndef test_function(test_case):\n    arr = test_case[0]\n    solution = test_case[1]\n    output = highest_pair_product(arr)\n    if output == solution:\n        print(\"Pass\")\n    else:\n        print(\"Fail\")\n\n\narr = [10, 1, 5, 4, 12]\nsolution = 50\ntest_case = [arr, solution]\ntest_function(test_case)"
    },
    {
      "rank": 93,
      "score": 1.0,
      "candidate": "from typing import List\n\n\ndef max_product_pair(nums: List[int]) -> List[int]:\n    \"\"\"\n    time complexity: O(n)\n    space complexity: O(1)\n    \"\"\"\n\n    # find the max and min from the list\n    max_num, min_num = -float('inf'), float('inf')\n\n    for num in nums:\n        if num > max_num:\n            max_num = num\n        elif num < min_num:\n            min_num = num\n\n    # find a pair with highest product\n    pair_max_product = -float('inf')\n    for i in range(len(nums)):\n        for j in range(i + 1, len(nums)):\n            pair_max_product = max(pair_max_product, nums[i] * nums[j])\n\n    # return the pair with highest product\n    if pair_max_product > max_num * min_num:\n        return [max_num, min_num]\n    return []\n\n\nif __name__ == \"__main__\":\n    nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    assert max_product_pair(nums) == [10, 9]\n\n    nums = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    assert max_product_pair(nums) == [9, 8]\n\n    nums = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]\n    assert max_product_pair(nums) == []\n\n    nums = [5, 4, 3, 2, 1]\n    assert max_product_pair(nums) == [5, 4]\n\n    nums = [5, 4, 3, 2, 1, 2, 4, 6, 8, 10]\n    assert max_product_pair(nums) == ["
    },
    {
      "rank": 94,
      "score": 1.0,
      "candidate": "def find_pair_with_highest_product(arr):\n    \"\"\"\n    :param: arr - list of integers\n    Return pair with the highest product.\n    \"\"\"\n    if len(arr) < 2:\n        return None\n    if len(arr) == 2:\n        return arr\n\n    if arr == sorted(arr):\n        return [arr[-1], arr[-2]]\n\n    product = 0\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            product = arr[i] * arr[j]\n            if product > product:\n                product = arr[i] * arr[j]\n                first = arr[i]\n                second = arr[j]\n    return [first, second]\n\ndef test_function(test_case):\n    test_input, test_expected = test_case\n    test_actual = find_pair_with_highest_product(test_input)\n    if test_actual == test_expected:\n        print(\"Pass\")\n    else:\n        print(\"Fail\")\n\ntest_function(([1, 2, 3, 4], [2, 4]))\ntest_function(([-1, -2, -3, -4], [-1, -4]))\ntest_function(([1, 2, 3], None))\ntest_function(([], None))\ntest_function(([-1, -2, -3], [-3, -2]))\ntest_function(([-1, -2, 0, 1], [0, 1]))\ntest_function(([1, 2, 3, 4, 5, 6, 7], [7, 4]) )\ntest_function(([1, 2, 3, 4, 5, 6, 7, 8], [8, 7]) )\ntest_function(([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [9, 8]) )\ntest_function(([1, 2, 3, 4, 5, 6, 7, 8,"
    },
    {
      "rank": 95,
      "score": 1.0,
      "candidate": "def find_pair_with_highest_product(arr):\n    if len(arr) < 2:\n        return 0\n\n    # initialize the variables to store the highest product\n    highest_product = 0\n\n    # loop through the array\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            # find the highest product between two numbers\n            highest_product = max(arr[i] * arr[j], highest_product)\n\n    return highest_product\n\n\nprint(find_pair_with_highest_product([-2, 3, -4]))\nprint(find_pair_with_highest_product([-2, 3, -4, 5]))"
    },
    {
      "rank": 96,
      "score": 1.0,
      "candidate": "def highest_pair(arr):\n    if len(arr) < 2:\n        return None\n    if len(arr) == 2:\n        return arr\n    arr.sort()\n    prod = arr[-1] * arr[-2]\n    return prod\n\n\ndef highest_pair_v2(arr):\n    if len(arr) < 2:\n        return None\n    if len(arr) == 2:\n        return arr\n    arr.sort()\n    return [arr[-1], arr[-2]]\n\n\ndef highest_pair_v3(arr):\n    if len(arr) < 2:\n        return None\n    if len(arr) == 2:\n        return arr\n    arr.sort()\n    return arr[-1] * arr[-2]\n\n\ndef highest_pair_v4(arr):\n    if len(arr) < 2:\n        return None\n    if len(arr) == 2:\n        return arr\n    arr.sort()\n    return arr[-1] * arr[-2]\n\n\ndef highest_pair_v5(arr):\n    if len(arr) < 2:\n        return None\n    if len(arr) == 2:\n        return arr\n    arr.sort()\n    return arr[-1] * arr[-2]\n\n\ndef highest_pair_v6(arr):\n    if len(arr) < 2:\n        return None\n    if len(arr) == 2:\n        return arr\n    arr.sort()\n    return arr[-1] * arr[-2]\n\n\ndef highest_pair_v7(arr):\n    if len(arr) < 2:\n        return None\n    if len(arr) == 2:\n        return arr\n    arr.sort()\n    return arr[-1] * arr[-2]\n\n\ndef highest_pair_v8(arr):\n    if len(arr) < 2:\n        return None\n    if len(arr) == 2:\n        return arr\n    arr.sort()\n    return arr[-1] * arr[-2]\n\n\ndef highest_pair_v9(arr):\n    if len(arr) < 2:"
    },
    {
      "rank": 97,
      "score": 1.0,
      "candidate": "from collections import namedtuple\n\n\ndef highest_product(int_list):\n    \"\"\"\n    This function takes a list of integers and returns a pair with the highest product\n    >>> highest_product([1,2,3])\n    Pair(2, 3)\n    >>> highest_product([-1,-2,-3])\n    Pair(-2, -3)\n    >>> highest_product([1,2,3,4])\n    Pair(2, 4)\n    >>> highest_product([-1,2,3,4])\n    Pair(2, 4)\n    \"\"\"\n\n    # check if the input is empty\n    if not int_list:\n        raise Exception(\"The list cannot be empty\")\n\n    # check if the list contains only integers\n    for element in int_list:\n        if not isinstance(element, int):\n            raise Exception(\"The list can only contain integers\")\n\n    # find the max and min integer\n    max_int, min_int = int_list[0], int_list[0]\n    for num in int_list[1:]:\n        if num > max_int:\n            max_int = num\n        elif num < min_int:\n            min_int = num\n\n    # check if the max and min are the same\n    if max_int == min_int:\n        return namedtuple(\"Pair\", [\"first\", \"second\"])(max_int, max_int)\n\n    # check if max and min are negative\n    if max_int < 0 and min_int < 0:\n        return namedtuple(\"Pair\", [\"first\", \"second\"])(max_int, min_int)\n\n    # check if the max is negative\n    if max_int < 0:\n        return namedtuple(\"Pair\", [\"first\", \"second\"])(max_int, max_int * -1)\n\n    # check if the min is negative\n    if min_int < 0:\n        return namedtuple(\"Pair\", [\"first\", \"second\"])(min_int * -1, min_int)\n\n    # return the pair\n    return namedtuple(\"Pair\", [\"first\", \"second\"])(min_int, max_int)\n\n\nif __"
    },
    {
      "rank": 98,
      "score": 1.0,
      "candidate": "def pair_with_highest_product(arr):\n    \"\"\"\n    :param: array - list of integers\n    return: pair of integers (as a list of two integers) with the highest product.\n    \"\"\"\n    arr.sort()\n    return arr[-1] * arr[-2]\n\n\ndef test_function(test_case):\n    test_input, test_expected = test_case\n    test_actual = pair_with_highest_product(test_input)\n    if test_actual == test_expected:\n        print(\"Pass\")\n    else:\n        print(\"Fail\")\n\n\ntest_function(([1, 2, 3, 4], 24))\ntest_function(([1, 2, 3, -4], -4))\ntest_function(([1, 2, 3], 6))\ntest_function(([1, 2, 3, 4], 24))\ntest_function(([1, 2, 3, -4], -4))\ntest_function(([1, 2, 3], 6))\ntest_function(([1, 2, 3, 4], 24))\ntest_function(([1, 2, 3, -4], -4))\ntest_function(([1, 2, 3], 6))\ntest_function(([1, 2, 3, 4], 24))\ntest_function(([1, 2, 3, -4], -4))\ntest_function(([1, 2, 3], 6))\ntest_function(([1, 2, 3, 4], 24))\ntest_function(([1, 2, 3, -4], -4))\ntest_function(([1, 2, 3], 6))\ntest_function(([1, 2, 3, 4], 24))\ntest_function(([1, 2, 3, -4], -4))\ntest_function(([1, 2, 3], 6))\ntest_function(([1, 2, 3, 4], 24))\ntest"
    },
    {
      "rank": 99,
      "score": 1.0,
      "candidate": "def pair_with_highest_product(arr):\n    \"\"\"\n    :param: arr - list of integers\n    return: pair with the highest product.\n    \"\"\"\n    if len(arr) < 2:\n        return None\n\n    max_prod = -1\n    max_pair = None\n    for i in range(len(arr) - 1):\n        for j in range(i + 1, len(arr)):\n            if (arr[i] * arr[j]) > max_prod:\n                max_prod = arr[i] * arr[j]\n                max_pair = (arr[i], arr[j])\n\n    return max_pair\n\n\ndef test_function(test_case):\n    output = pair_with_highest_product(test_case[0])\n    solution = test_case[1]\n    if output == solution:\n        print(\"Pass\")\n    else:\n        print(\"Fail\")\n\n\narr = [6, -1, 1, 3, -4]\nsolution = (3, -1)\ntest_case = [arr, solution]\ntest_function(test_case)\n\narr = [1, 2, 3, 2]\nsolution = (3, 2)\ntest_case = [arr, solution]\ntest_function(test_case)\n\narr = [1, 2, 3, 2, 4]\nsolution = (4, 2)\ntest_case = [arr, solution]\ntest_function(test_case)"
    },
    {
      "rank": 100,
      "score": 1.0,
      "candidate": "def find_pair_with_highest_product(arr):\n    if len(arr) <= 2:\n        return None\n\n    arr.sort()\n\n    return arr[-1] * arr[-2]\n\ndef find_pair_with_highest_product_eff(arr):\n    if len(arr) <= 2:\n        return None\n\n    arr.sort()\n    product = 0\n\n    for i in range(len(arr) - 1, -1, -1):\n        product = arr[i] * arr[i - 1]\n        if product > 0:\n            return product\n\n    return 0\n\nprint(find_pair_with_highest_product([1, 2, 3, 4, 5]))\nprint(find_pair_with_highest_product_eff([1, 2, 3, 4, 5]))"
    }
  ]
}