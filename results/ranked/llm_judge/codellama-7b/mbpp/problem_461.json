{
  "timestamp": "2025-09-15T01:47:51.495953",
  "method": "improved_llm_judge",
  "judge_model": "codellama/CodeLlama-7b-Python-hf",
  "target_model": "codellama-7b",
  "dataset": "mbpp",
  "problem_number": 461,
  "total_candidates": 100,
  "results": [
    {
      "rank": 1,
      "score": 10.0,
      "candidate": "def consecutive_numbers(nums: list) -> bool:\n    \"\"\"\n    Check whether the given list contains consecutive numbers or not\n    >>> consecutive_numbers([1, 2, 3])\n    True\n    >>> consecutive_numbers([1, 2, 4])\n    False\n    >>> consecutive_numbers([1, 5, 3])\n    False\n    >>> consecutive_numbers([2, 3, 4, 6, 7, 8])\n    True\n    >>> consecutive_numbers([2, 3, 5, 6, 8, 10])\n    False\n    >>> consecutive_numbers([1, 2, 4, 5, 6, 10])\n    False\n    \"\"\"\n    nums.sort()\n    i = 0\n    while i < len(nums) - 1:\n        if nums[i + 1] - nums[i] == 1:\n            i += 1\n        else:\n            return False\n    return True\n\n\ndef main():\n    \"\"\"\n    This is the main function used for the test\n    >>> consecutive_numbers([1, 2, 3])\n    True\n    >>> consecutive_numbers([1, 2, 4])\n    False\n    >>> consecutive_numbers([1, 5, 3])\n    False\n    >>> consecutive_numbers([2, 3, 4, 6, 7, 8])\n    True\n    >>> consecutive_numbers([2, 3, 5, 6, 8, 10])\n    False\n    >>> consecutive_numbers([1, 2, 4, 5, 6, 10])\n    False\n    \"\"\"\n    list_nums = [int(input(\"Enter a number: \")) for i in range(int(input(\"Enter the number of numbers: \")))]\n    if consecutive_numbers(list_nums):\n        print(\"Yes\")\n    else:\n        print(\"No\")\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()\n    main()"
    },
    {
      "rank": 2,
      "score": 10.0,
      "candidate": "from typing import List\n\n\ndef consecutive_numbers(input_list: List[int]) -> bool:\n    \"\"\"\n    Checks if the given list contains consecutive numbers\n    >>> consecutive_numbers([1, 2, 3, 4, 5, 6, 7, 8])\n    True\n    >>> consecutive_numbers([1, 2, 3, 5, 6, 7, 8])\n    False\n    >>> consecutive_numbers([1, 2, 3, 4, 5, 7, 8])\n    False\n    \"\"\"\n    # check if the list is empty\n    if len(input_list) == 0:\n        return False\n\n    # check if the first element is 1\n    if input_list[0] != 1:\n        return False\n\n    # check if the last element is the last element of the list\n    if input_list[-1] != len(input_list):\n        return False\n\n    # check if the list is sorted in ascending order\n    if input_list != sorted(input_list):\n        return False\n\n    # check if the list is consecutive\n    for i in range(len(input_list) - 1):\n        if input_list[i + 1] - input_list[i] != 1:\n            return False\n\n    return True\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 3,
      "score": 10.0,
      "candidate": "def consecutive_num(nums):\n    \"\"\"\n    Return True if the given list contains consecutive numbers\n    \"\"\"\n    if len(nums) < 2:\n        return False\n\n    for i in range(len(nums) - 1):\n        if nums[i] == nums[i+1] - 1:\n            continue\n        return False\n\n    return True\n\ndef main():\n    \"\"\"\n    Driver code\n    \"\"\"\n    assert(consecutive_num([1,2,3,4,5,6,7,8,9,10]) == True)\n    assert(consecutive_num([1,2,3,4,7,8,9,10]) == False)\n    assert(consecutive_num([1,2,3,5,7,8,9,10]) == False)\n    assert(consecutive_num([1,2,3,4,5,6,9,10]) == False)\n\n    print(\"OK\")\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 4,
      "score": 10.0,
      "candidate": "def consecutive_numbers(l):\n    for i in range(len(l) - 1):\n        if l[i] + 1 != l[i + 1]:\n            return False\n    return True\n\n\ndef main():\n    l = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    print(consecutive_numbers(l))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 5,
      "score": 10.0,
      "candidate": "def consecutive_number(list_one: list) -> bool:\n    \"\"\"\n    Checks whether the given list contains consecutive numbers or not.\n    >>> consecutive_number([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n    True\n    >>> consecutive_number([1, 2, 3, 4, 5, 6, 7, 8, 10])\n    False\n    >>> consecutive_number([1, 2, 3, 4, 5, 6, 7, 8, 9])\n    False\n    >>> consecutive_number([])\n    False\n    >>> consecutive_number([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])\n    True\n    >>> consecutive_number([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12])\n    True\n    \"\"\"\n    if len(list_one) < 2:\n        return False\n    if list_one == sorted(list_one):\n        for i in range(len(list_one) - 1):\n            if list_one[i + 1] - list_one[i] != 1:\n                return False\n        return True\n    else:\n        return False\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 6,
      "score": 10.0,
      "candidate": "def consecutive(arr):\n    for i in range(len(arr)-1):\n        if arr[i]==arr[i+1]-1:\n            continue\n        else:\n            return False\n    return True\n\nprint(consecutive([1,2,3,4,5,7,8,9,10]))\nprint(consecutive([1,2,3,4,6,7,8,9,10]))"
    },
    {
      "rank": 7,
      "score": 9.0,
      "candidate": "def check_consecutive_numbers(list):\n    for i in range(len(list)):\n        if list[i] == list[i+1]-1:\n            return True\n    return False\n\n\ndef main():\n    print(\"List of numbers: \")\n    list = [1, 2, 3, 4, 5, 7, 8]\n    print(list)\n    print(check_consecutive_numbers(list))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 8,
      "score": 9.0,
      "candidate": "def check_consecutive(nums):\n    if len(nums) <= 1:\n        return True\n\n    for i in range(1, len(nums)):\n        if nums[i] - nums[i - 1] != 1:\n            return False\n\n    return True\n\n\ndef main():\n    print(check_consecutive([1, 2, 3, 4, 5, 6, 7, 8]))\n    print(check_consecutive([1, 2, 3, 5, 6, 8, 10]))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 9,
      "score": 8.0,
      "candidate": "def consecutive_numbers(list):\n    consecutive = True\n    for i in range(len(list)-1):\n        if list[i+1] - list[i] != 1:\n            consecutive = False\n            break\n    return consecutive\n\n\nif __name__ == '__main__':\n    print(consecutive_numbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\n    print(consecutive_numbers([1, 2, 3, 4, 6, 7, 8, 9, 10]))"
    },
    {
      "rank": 10,
      "score": 8.0,
      "candidate": "def consecutive(list1):\n    list1.sort()\n    for i in range(len(list1)-1):\n        if list1[i+1] - list1[i] != 1:\n            return False\n    return True\n\n\nprint(consecutive([1, 2, 3, 4, 5, 6]))\nprint(consecutive([1, 2, 3, 5, 6]))\nprint(consecutive([1, 3, 5, 6]))"
    },
    {
      "rank": 11,
      "score": 8.0,
      "candidate": "def consecutive_num(nums):\n    for i in range(len(nums) - 1):\n        if nums[i + 1] - nums[i] != 1:\n            return False\n    return True\n\nprint(consecutive_num([1,2,3,4,5]))\nprint(consecutive_num([1,2,4,5]))"
    },
    {
      "rank": 12,
      "score": 8.0,
      "candidate": "def consecutive(l):\n    l = sorted(l)\n    for i in range(len(l)-1):\n        if l[i+1]-l[i] > 1:\n            return False\n    return True\n\n\nprint(consecutive([1, 2, 3, 4, 6, 7, 8, 9]))\nprint(consecutive([1, 2, 3, 5, 6, 7, 8, 9]))"
    },
    {
      "rank": 13,
      "score": 8.0,
      "candidate": "def consecutive_numbers(lst):\n    for i in range(len(lst) - 1):\n        if lst[i + 1] - lst[i] != 1:\n            return False\n    return True\n\n\ndef main():\n    lst = [1, 2, 3, 4, 5, 6, 7, 8]\n    print(consecutive_numbers(lst))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 14,
      "score": 8.0,
      "candidate": "def consecutive(mylist):\n    for i in range(len(mylist) - 1):\n        if mylist[i + 1] - mylist[i] == 1:\n            continue\n        else:\n            return False\n    return True\n\n\nmylist = [1, 2, 3, 4, 5]\nprint(consecutive(mylist))"
    },
    {
      "rank": 15,
      "score": 8.0,
      "candidate": "def consecutive_num(nums):\n    for i in range(len(nums)-1):\n        if nums[i+1] - nums[i] != 1:\n            return False\n    return True\n\nprint(consecutive_num([1,2,3,4,5]))\nprint(consecutive_num([1,2,3,4,6]))\nprint(consecutive_num([1,2,3,4,5,6]))\n\n\"\"\"\nFirst and foremost we need to find the difference between the numbers.\nIf the difference is greater than 1 then it is not a consecutive number.\n\nTime Complexity : O(n)\nSpace Complexity : O(1)\n\"\"\""
    },
    {
      "rank": 16,
      "score": 8.0,
      "candidate": "def consecutive_number(l: list) -> bool:\n    \"\"\"\n    >>> consecutive_number([1,2,3,4])\n    True\n    >>> consecutive_number([1,3,4,5])\n    False\n    \"\"\"\n    i = 0\n    while i < len(l) - 1:\n        if l[i] == l[i + 1] - 1:\n            i += 1\n        else:\n            return False\n    return True\n\n\ndef main():\n    from doctest import testmod\n\n    testmod()\n    list_of_num = [int(i) for i in input(\"Enter the list of number: \").split()]\n    check = consecutive_number(list_of_num)\n    print(\"The list contains consecutive numbers\") if check else print(\n        \"The list doesn't contain consecutive numbers\"\n    )\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 17,
      "score": 8.0,
      "candidate": "def consecutive_num(nums):\n    if len(nums)<2:\n        return False\n    if nums[0] == nums[-1]:\n        return False\n    for i in range(len(nums)-1):\n        if nums[i]+1 != nums[i+1]:\n            return False\n    return True\n\nprint(consecutive_num([1,2,3,4,5,6,7,8,9,10]))\nprint(consecutive_num([1,2,3,4,6,7,8,9,10]))\nprint(consecutive_num([1,2,3,4,5,6,7,8,9,10,11]))\nprint(consecutive_num([1,2,3,4,5,6,7,8,9,10,11,12]))"
    },
    {
      "rank": 18,
      "score": 8.0,
      "candidate": "def consecutive_num(nums):\n    for i in range(len(nums)-1):\n        if nums[i+1] - nums[i] != 1:\n            return False\n    return True\n\n\ndef main():\n    nums = [1, 2, 3, 4, 5, 6]\n    print(\"Does the given list contain consecutive numbers or not:\", consecutive_num(nums))\n    nums = [1, 2, 3, 4, 6, 7]\n    print(\"Does the given list contain consecutive numbers or not:\", consecutive_num(nums))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 19,
      "score": 8.0,
      "candidate": "def consecutive(list):\n    for i in range(len(list)-1):\n        if list[i+1] - list[i] != 1:\n            return False\n    return True\n\n\nprint(consecutive([1, 2, 3, 4, 5, 6]))"
    },
    {
      "rank": 20,
      "score": 8.0,
      "candidate": "def consecutive_number(nums):\n    \"\"\"\n    :param nums: list - list of integers to check for consecutive numbers\n    :return: bool - True if list contains consecutive numbers, False if not\n\n    This function checks if a list contains consecutive numbers.\n    \"\"\"\n    nums.sort()\n    for i in range(len(nums) - 1):\n        if nums[i + 1] - nums[i] == 1:\n            continue\n        else:\n            return False\n    return True"
    },
    {
      "rank": 21,
      "score": 8.0,
      "candidate": "def consecutive(lst):\n    for i in range(len(lst)-1):\n        if lst[i+1]-lst[i] == 1:\n            continue\n        else:\n            return False\n    return True\n\nprint(consecutive([1, 2, 3, 4, 5]))\nprint(consecutive([1, 2, 3, 4, 6]))"
    },
    {
      "rank": 22,
      "score": 8.0,
      "candidate": "def consecutive_numbers(list):\n    return all(list[i] + 1 == list[i + 1] for i in range(len(list) - 1))\n\n\ndef main():\n    print(consecutive_numbers([1, 2, 3, 4, 5]))\n    print(consecutive_numbers([1, 2, 4, 5]))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 23,
      "score": 8.0,
      "candidate": "def consecutive_nums(list1):\n    list1.sort()\n    for i in range(len(list1)-1):\n        if list1[i] + 1 == list1[i+1]:\n            continue\n        else:\n            return False\n    return True\n\nprint(consecutive_nums([1,2,3,4,5,6,7,8,9,10]))\nprint(consecutive_nums([1,2,3,5,6,7,8,9,10]))"
    },
    {
      "rank": 24,
      "score": 8.0,
      "candidate": "def consecutive_numbers(l):\n    return all(l[i] + 1 == l[i + 1] for i in range(len(l) - 1))\n\n\nprint(consecutive_numbers([1, 2, 3, 4, 5, 6, 7, 8, 9]))\nprint(consecutive_numbers([1, 2, 3, 4, 5, 6, 7, 10, 11]))"
    },
    {
      "rank": 25,
      "score": 8.0,
      "candidate": "def consecutive_nums(nums):\n    for i in range(len(nums)-1):\n        if nums[i+1] - nums[i] == 1:\n            continue\n        else:\n            return False\n    return True\n\nprint(consecutive_nums([1, 2, 3, 4, 5]))\nprint(consecutive_nums([1, 2, 3, 5, 6]))"
    },
    {
      "rank": 26,
      "score": 8.0,
      "candidate": "def consecutive_nums(lst):\n    i = 1\n    while i < len(lst):\n        if lst[i] - lst[i - 1] == 1:\n            i += 1\n        else:\n            return False\n    return True\n\nprint(consecutive_nums([1, 2, 3, 4]))\nprint(consecutive_nums([1, 2, 4, 5]))"
    },
    {
      "rank": 27,
      "score": 8.0,
      "candidate": "def consecutive_numbers(lst):\n    return any(lst[i + 1] - lst[i] == 1 for i in range(len(lst)-1))\n\n\nprint(consecutive_numbers([1, 2, 3, 4, 5]))\nprint(consecutive_numbers([1, 2, 4, 5]))"
    },
    {
      "rank": 28,
      "score": 8.0,
      "candidate": "def consecutive_numbers(num_list):\n    num_list.sort()\n    i = 0\n    while i < len(num_list)-1:\n        if num_list[i] == num_list[i+1]-1:\n            i += 1\n        else:\n            return False\n    return True\n\nprint(consecutive_numbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\nprint(consecutive_numbers([1, 2, 3, 5, 6, 7, 8, 9, 10]))\nprint(consecutive_numbers([1, 2, 3, 4, 6, 7, 8, 9, 10]))\nprint(consecutive_numbers([1, 2, 3, 4, 5, 6, 8, 9, 10]))\nprint(consecutive_numbers([1, 2, 3, 4, 5, 6, 7, 9, 10]))\nprint(consecutive_numbers([1, 2, 3, 4, 5, 6, 7, 8, 10]))\nprint(consecutive_numbers([1, 2, 3, 4, 5, 6, 7, 8, 9]))\n\nstop = True"
    },
    {
      "rank": 29,
      "score": 8.0,
      "candidate": "def consecutive_nums(list1):\n    \"\"\"\n    >>> consecutive_nums([1,2,3,4])\n    True\n    >>> consecutive_nums([1,2,3,4,5,6,7,8,9])\n    False\n    \"\"\"\n    # return all(list1[i] + 1 == list1[i+1] for i in range(len(list1)-1))\n    for i in range(len(list1) - 1):\n        if list1[i] + 1 == list1[i+1]:\n            continue\n        else:\n            return False\n    return True\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 30,
      "score": 8.0,
      "candidate": "def consecutive_num(nums):\n    for i in range(len(nums)-1):\n        if nums[i+1] - nums[i] != 1:\n            return False\n    return True\n\n\nprint(consecutive_num([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))"
    },
    {
      "rank": 31,
      "score": 8.0,
      "candidate": "def consecutive_num(lst):\n    lst.sort()\n    for i in range(len(lst)-1):\n        if lst[i+1] - lst[i] == 1:\n            continue\n        else:\n            return False\n    return True\n\ndef main():\n    lst = [2, 3, 4, 6, 7, 8, 9]\n    print(\"Does the list {} contain consecutive numbers? - {}\".format(lst, consecutive_num(lst)))\n\n    lst = [1, 2, 3, 4, 5, 6, 7]\n    print(\"Does the list {} contain consecutive numbers? - {}\".format(lst, consecutive_num(lst)))\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 32,
      "score": 8.0,
      "candidate": "def consecutive_num(nums):\n    nums.sort()\n    for i in range(1, len(nums)):\n        if nums[i] - nums[i - 1] != 1:\n            return False\n    return True\n\ndef main():\n    nums = list(map(int, input(\"Enter the list of numbers: \").split()))\n\n    if consecutive_num(nums):\n        print(\"Yes\")\n    else:\n        print(\"No\")\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 33,
      "score": 8.0,
      "candidate": "def consecutive_number(nums):\n    for i in range(len(nums)-1):\n        if nums[i] + 1 != nums[i+1]:\n            return False\n    return True\n\n\ndef main():\n    print(\"List of consecutive numbers: \")\n    print(consecutive_number([1, 2, 3, 4, 5]))\n\n    print(\"List of non-consecutive numbers: \")\n    print(consecutive_number([1, 2, 4, 5, 6]))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 34,
      "score": 8.0,
      "candidate": "def consecutive_number(arr):\n    arr = sorted(arr)\n    i = 0\n    while i < len(arr)-1:\n        if arr[i] + 1 == arr[i+1]:\n            i += 1\n        else:\n            return False\n    return True\n\nprint(consecutive_number([1,2,3,4,5,7]))\nprint(consecutive_number([1,2,3,4,5,6]))"
    },
    {
      "rank": 35,
      "score": 8.0,
      "candidate": "def consecutive_nums(lst):\n    for i in range(len(lst)-1):\n        if lst[i+1] - lst[i] != 1:\n            return False\n    return True\n\nprint(consecutive_nums([1,2,3,4,5,6,7]))\nprint(consecutive_nums([1,2,3,4,5,6,8]))"
    },
    {
      "rank": 36,
      "score": 8.0,
      "candidate": "def consecutive_nums(nums):\n    nums_set = list(set(nums))\n    nums_set.sort()\n    print(nums_set)\n    for i in range(len(nums_set)-1):\n        if nums_set[i+1]-nums_set[i] != 1:\n            return False\n    return True\n\nprint(consecutive_nums([1, 2, 3, 4, 5, 7, 8]))\nprint(consecutive_nums([1, 2, 3, 4, 6, 7, 8]))"
    },
    {
      "rank": 37,
      "score": 8.0,
      "candidate": "from typing import List\n\n\ndef consecutive_nums(nums: List[int]) -> bool:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(1)\n    \"\"\"\n    prev = nums[0]\n\n    for i in range(1, len(nums)):\n        if nums[i] == prev + 1:\n            prev = nums[i]\n        else:\n            return False\n\n    return True\n\n\nif __name__ == \"__main__\":\n    assert consecutive_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == True\n    assert consecutive_nums([1, 2, 3, 5, 6, 7, 8, 9, 10]) == False"
    },
    {
      "rank": 38,
      "score": 8.0,
      "candidate": "def consecutive(list_one):\n    if len(list_one)==1:\n        return True\n    else:\n        for i in range(len(list_one)-1):\n            if list_one[i]+1 != list_one[i+1]:\n                return False\n        return True\n\n\nprint(consecutive([1,2,3,4,5,6,7,8,9]))"
    },
    {
      "rank": 39,
      "score": 8.0,
      "candidate": "def consecutive_num(nums):\n    if len(nums) == 1:\n        return True\n    else:\n        for i in range(len(nums) - 1):\n            if nums[i+1] - nums[i] != 1:\n                return False\n        return True\n\n\nprint(consecutive_num([1, 2, 3, 4]))\nprint(consecutive_num([1, 2, 3, 4, 5, 6, 7]))\nprint(consecutive_num([1, 2, 3, 4, 6, 7]))\nprint(consecutive_num([1, 2, 3, 4, 5, 7]))"
    },
    {
      "rank": 40,
      "score": 8.0,
      "candidate": "def consecutive_numbers(nums: list) -> bool:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(1)\n    \"\"\"\n\n    for i in range(len(nums) - 1):\n        if nums[i] + 1 == nums[i + 1]:\n            continue\n        else:\n            return False\n    return True\n\n\nif __name__ == \"__main__\":\n    print(consecutive_numbers([1, 2, 3, 4, 5]))\n    print(consecutive_numbers([1, 2, 3, 5, 6]))"
    },
    {
      "rank": 41,
      "score": 8.0,
      "candidate": "def consecutive_num(nums):\n    if len(nums) == 0:\n        return False\n    i = 0\n    while i < len(nums):\n        if i == len(nums) - 1:\n            return True\n        if nums[i+1] - nums[i] != 1:\n            return False\n        i += 1\n\nprint(consecutive_num([1,2,3,4,5,6]))\nprint(consecutive_num([1,2,3,4,5,7]))"
    },
    {
      "rank": 42,
      "score": 8.0,
      "candidate": "def consecutive_numbers(lst):\n    for i in range(len(lst)-1):\n        if lst[i+1]-lst[i]>1:\n            return False\n    return True\n\nprint(consecutive_numbers([1,2,3,4,5,6,7,8]))\nprint(consecutive_numbers([1,2,3,5,6,8,9,10]))"
    },
    {
      "rank": 43,
      "score": 8.0,
      "candidate": "def consecutive_numbers(arr):\n    arr.sort()\n    for i in range(len(arr)-1):\n        if arr[i+1] - arr[i] == 1:\n            continue\n        else:\n            return False\n    return True\n\ndef main():\n    arr = [1, 2, 3, 4, 6, 7, 8, 9]\n    print(\"Does the list have consecutive numbers? \" + str(consecutive_numbers(arr)))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 44,
      "score": 8.0,
      "candidate": "def consecutive_numbers(arr):\n    for i in range(len(arr) - 1):\n        if arr[i] + 1 == arr[i + 1]:\n            continue\n        else:\n            return False\n    return True\n\n\ndef main():\n    lst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    print(consecutive_numbers(lst))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 45,
      "score": 8.0,
      "candidate": "def check_consecutive(l):\n    \"\"\"\n    Time complexity: O(n)\n    \"\"\"\n    if len(l) == 1:\n        return True\n\n    for i in range(len(l)-1):\n        if l[i+1] - l[i] != 1:\n            return False\n\n    return True\n\n\nif __name__ == \"__main__\":\n    l = [1, 2, 3, 4, 5, 6]\n    print(check_consecutive(l))\n    l = [1, 2, 3, 5, 6]\n    print(check_consecutive(l))"
    },
    {
      "rank": 46,
      "score": 8.0,
      "candidate": "def consecutive_numbers(num_list):\n    if len(num_list) < 3:\n        return False\n    else:\n        for i in range(len(num_list)-2):\n            if num_list[i+1] - num_list[i] == 1:\n                continue\n            else:\n                return False\n        return True\n\n\nprint(consecutive_numbers([1, 2, 3, 4, 5, 6, 7, 8, 9]))\nprint(consecutive_numbers([1, 2, 3, 4, 5, 6, 7, 8, 10]))"
    },
    {
      "rank": 47,
      "score": 8.0,
      "candidate": "def consecutive_num(arr):\n    return arr == sorted(arr) or sorted(list(set(arr[i+1]-arr[i] for i in range(len(arr)-1)))) == [1] * (len(arr)-1)\n\ndef main():\n    print(\"List contains consecutive numbers or not: \" + str(consecutive_num([1,2,3,4])))\n    print(\"List contains consecutive numbers or not: \" + str(consecutive_num([1,2,3,5])))\n    print(\"List contains consecutive numbers or not: \" + str(consecutive_num([1,2,3,5,6])))\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 48,
      "score": 8.0,
      "candidate": "def consecutive_numbers(lst):\n    if len(lst) == 0:\n        return \"No consecutive numbers found.\"\n\n    lst.sort()\n    for i in range(1, len(lst)):\n        if lst[i] - lst[i-1] > 1:\n            return lst[i-1] + 1, lst[i] - 1\n\n    return \"No consecutive numbers found.\"\n\ndef main():\n    lst = list(map(int, input(\"Enter the list: \").split()))\n    print(\"Consecutive numbers:\", consecutive_numbers(lst))\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 49,
      "score": 8.0,
      "candidate": "def consecutive(lst):\n    lst = sorted(lst)\n    for i in range(len(lst)-1):\n        if lst[i] + 1 == lst[i+1]:\n            continue\n        else:\n            return False\n    return True\n\n\nprint(consecutive([1, 2, 3, 4, 5, 6, 7]))\nprint(consecutive([1, 2, 3, 4, 5, 7]))"
    },
    {
      "rank": 50,
      "score": 8.0,
      "candidate": "def consecutive_num(nums):\n    \"\"\"\n    :param nums: list - list of integers\n    :return: bool - if the list is having consecutive numbers then return True else return False\n\n    This function takes a list of integers and returns True if the list has consecutive integers\n    \"\"\"\n    if len(nums) == 0:\n        return False\n\n    if len(nums) == 1:\n        return False\n\n    for i in range(len(nums) - 1):\n        if nums[i+1] - nums[i] == 1:\n            continue\n        else:\n            return False\n\n    return True\n\nprint(consecutive_num([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\nprint(consecutive_num([1, 2, 4, 5, 6, 7, 8, 9, 10]))\nprint(consecutive_num([1, 2, 3, 4, 6, 7, 8, 9, 10]))\nprint(consecutive_num([1, 2, 3, 4, 5, 6, 7, 8, 9]))\nprint(consecutive_num([]))\nprint(consecutive_num([1]))\nprint(consecutive_num([1, 2]))"
    },
    {
      "rank": 51,
      "score": 8.0,
      "candidate": "def check_consecutive_numbers(num_list):\n    num_list.sort()\n    for i in range(len(num_list)-1):\n        if num_list[i+1] - num_list[i] == 1:\n            continue\n        else:\n            return False\n    return True\n\nprint(check_consecutive_numbers([1, 2, 3, 4, 5, 6, 7, 8, 9]))\nprint(check_consecutive_numbers([1, 2, 3, 4, 5, 6, 7, 8, 10]))"
    },
    {
      "rank": 52,
      "score": 8.0,
      "candidate": "def consecutive_num(lst):\n    if len(lst) < 3:\n        return True\n    for i in range(len(lst)-2):\n        if lst[i+1] - lst[i] != 1:\n            return False\n    return True\n\nprint(consecutive_num([1,2,3,4,5,6]))\nprint(consecutive_num([1,2,3,4,6,7]))"
    },
    {
      "rank": 53,
      "score": 8.0,
      "candidate": "def check_consecutive(list_one):\n    \"\"\"\n    Checks if the given list contains consecutive numbers or not.\n\n    Parameters\n    ----------\n    list_one : list\n        The list to be checked\n\n    Returns\n    -------\n    bool\n        True if the list contains consecutive numbers, False otherwise\n    \"\"\"\n\n    list_one.sort()\n    for i in range(len(list_one)-1):\n        if list_one[i+1]-list_one[i] == 1:\n            continue\n        else:\n            return False\n    return True\n\nprint(check_consecutive([1,2,3,4,5,6,7,8,9]))\nprint(check_consecutive([1,2,3,4,6,7,8,9]))"
    },
    {
      "rank": 54,
      "score": 8.0,
      "candidate": "def consecutive(nums: list) -> bool:\n    \"\"\"\n    Time Complexity: O(n)\n    \"\"\"\n    for i in range(len(nums)-1):\n        if nums[i+1] - nums[i] > 1:\n            return False\n    return True\n\n\ndef main():\n    nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    print(consecutive(nums))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 55,
      "score": 8.0,
      "candidate": "def consecutive_num(num):\n    num_list = []\n    for i in range(num):\n        num_list.append(i)\n\n    for i in range(1, len(num_list)):\n        if num_list[i] == num_list[i-1] + 1:\n            return True\n    return False\n\n\nprint(consecutive_num(10))\nprint(consecutive_num(100))\nprint(consecutive_num(11))"
    },
    {
      "rank": 56,
      "score": 8.0,
      "candidate": "def consecutive_nums(arr):\n    for i in range(len(arr)-1):\n        if arr[i+1]-arr[i] != 1:\n            return False\n    return True\n\nprint(consecutive_nums([1,2,3,4,5,6,7,8,9,10]))\nprint(consecutive_nums([1,3,4,6,7,8,9,11]))"
    },
    {
      "rank": 57,
      "score": 8.0,
      "candidate": "def consecutive(list):\n    \"\"\"\n    We will use the fact that lists in python are sorted in ascending order.\n    We will start from the first element and compare the current element with the next element.\n    If the difference between them is 1, then we will increment the counter and move to the next element.\n    If the difference is more than 1, then we will return False.\n    If we reach the last element and the counter is more than 1, then we will return False.\n    If the counter is 1, then we will return True.\n    \"\"\"\n    counter = 1\n    for i in range(len(list)-1):\n        if list[i+1]-list[i] == 1:\n            counter += 1\n        else:\n            return False\n    if counter == 1:\n        return True\n    else:\n        return False\n\nif __name__ == \"__main__\":\n    list = [1, 2, 3, 4, 5]\n    print(consecutive(list))\n    list = [1, 2, 3, 5, 6]\n    print(consecutive(list))\n    list = [1, 2, 3, 5, 7]\n    print(consecutive(list))"
    },
    {
      "rank": 58,
      "score": 8.0,
      "candidate": "def consecutive_nums(nums):\n    i = 1\n    while i < len(nums):\n        if nums[i] - nums[i-1] != 1:\n            return False\n        i += 1\n\n    return True\n\nprint(consecutive_nums([1,2,3,4,5,6,7,8,9]))\nprint(consecutive_nums([1,2,3,4,6,7,8,9]))"
    },
    {
      "rank": 59,
      "score": 8.0,
      "candidate": "def consecutive(l):\n    l = sorted(l)\n    for i in range(len(l)-1):\n        if l[i+1]-l[i] == 1:\n            continue\n        else:\n            return False\n    return True\n\nprint(consecutive([1, 2, 3, 4, 5, 6]))\nprint(consecutive([1, 2, 3, 5, 6]))\nprint(consecutive([1, 3, 4, 6, 7, 8]))"
    },
    {
      "rank": 60,
      "score": 8.0,
      "candidate": "def consecutive_nums(nums):\n    if len(nums) == 0:\n        return False\n    for i in range(len(nums) - 1):\n        if nums[i] + 1 != nums[i+1]:\n            return False\n    return True\n\nprint(consecutive_nums([1,2,3,4,5,6,7,8,9,10]))\nprint(consecutive_nums([1,2,3,4,5,6,7,8,10]))\nprint(consecutive_nums([1,2,3,4,6,7,8,10]))\nprint(consecutive_nums([1,2,3,4,5,6,7,8,9,10,11]))"
    },
    {
      "rank": 61,
      "score": 1.0,
      "candidate": "from typing import List\n\n\ndef consecutive_numbers(nums: List) -> bool:\n    \"\"\"\n    This function checks whether the given list contains consecutive numbers or not.\n    >>> consecutive_numbers([1, 2, 3, 4])\n    True\n    >>> consecutive_numbers([1, 3, 4, 6])\n    False\n    >>> consecutive_numbers([1, 2, 5, 6])\n    True\n    >>> consecutive_numbers([1, 3, 5, 7])\n    False\n    >>> consecutive_numbers([1, 2, 3, 4, 5, 6, 7, 8])\n    True\n    >>> consecutive_numbers([1, 2, 3, 5, 6, 7, 8])\n    False\n    \"\"\"\n    if len(nums) <= 1:\n        return True\n    if nums[0] + 1 == nums[1]:\n        return consecutive_numbers(nums[1:])\n    return False\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 62,
      "score": 1.0,
      "candidate": "from typing import List\n\n\ndef consecutive_numbers(arr: List[int]) -> bool:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(1)\n    \"\"\"\n    if len(arr) <= 1:\n        return True\n\n    arr.sort()\n\n    curr = arr[0]\n\n    for num in arr:\n        if num - curr == 1:\n            curr = num\n        else:\n            return False\n\n    return True\n\n\nif __name__ == \"__main__\":\n    assert consecutive_numbers([1, 2, 3, 4, 5, 6, 7, 8, 9]) == True\n    assert consecutive_numbers([1, 2, 3, 4, 6, 7, 8, 9]) == False\n    assert consecutive_numbers([1, 2, 3, 4, 5, 6, 7, 8, 10]) == False"
    },
    {
      "rank": 63,
      "score": 1.0,
      "candidate": "def check_consecutive_numbers(nums):\n    prev = nums[0]\n    for n in nums[1:]:\n        if n == prev + 1:\n            prev = n\n        else:\n            return False\n    return True\n\n\ndef main():\n    print(check_consecutive_numbers([1, 2, 3, 4, 5]))\n    print(check_consecutive_numbers([1, 3, 5, 6, 7]))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 64,
      "score": 1.0,
      "candidate": "from typing import List\n\n\ndef consecutive_numbers(input_list: List) -> bool:\n    \"\"\"\n    Checks for consecutive numbers in the given list.\n\n    >>> consecutive_numbers([1, 2, 3, 4, 5, 6])\n    True\n    >>> consecutive_numbers([1, 2, 3, 5, 6])\n    False\n    >>> consecutive_numbers([1, 2, 3, 4, 6])\n    False\n    >>> consecutive_numbers([1, 2, 3, 4, 5])\n    False\n    >>> consecutive_numbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n    True\n    >>> consecutive_numbers([1, 2, 3, 4, 5, 6, 8, 9, 10])\n    False\n    \"\"\"\n    input_list.sort()\n    count = 1\n    for i in range(len(input_list) - 1):\n        if input_list[i] + 1 == input_list[i + 1]:\n            count += 1\n        else:\n            count = 1\n        if count > 1:\n            return True\n    return False\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 65,
      "score": 1.0,
      "candidate": "from typing import List\n\n\ndef consecutive_numbers(data: List[int]) -> bool:\n    \"\"\"\n    Checks if the given list contains consecutive numbers\n    >>> consecutive_numbers([1, 2, 3, 4])\n    True\n    >>> consecutive_numbers([1, 2, 3, 5])\n    False\n    \"\"\"\n    data.sort()\n    for i in range(len(data) - 1):\n        if data[i + 1] - data[i] > 1:\n            return False\n    return True\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 66,
      "score": 1.0,
      "candidate": "from typing import List\n\n\ndef consecutive_num(nums: List[int]) -> bool:\n    for i in range(len(nums) - 1):\n        if nums[i] + 1 != nums[i + 1]:\n            return False\n    return True\n\n\ndef main():\n    print(consecutive_num([1, 2, 3, 4, 5, 6, 7, 8, 9]))\n    print(consecutive_num([1, 2, 3, 4, 5, 7, 8, 9]))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 67,
      "score": 1.0,
      "candidate": "from typing import List\n\n\ndef check_consecutive(lst: List) -> bool:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(1)\n    \"\"\"\n    if len(lst) == 1:\n        return True\n\n    current_num = lst[0]\n    for num in lst[1:]:\n        if num - current_num != 1:\n            return False\n        current_num = num\n\n    return True\n\n\nif __name__ == \"__main__\":\n    assert check_consecutive([1, 2, 3]) == True\n    assert check_consecutive([1, 2, 5]) == False\n    assert check_consecutive([1, 2, 3, 4, 5]) == True"
    },
    {
      "rank": 68,
      "score": 1.0,
      "candidate": "from typing import List\n\n\ndef consecutive_numbers(arr: List[int]) -> bool:\n    \"\"\"\n    >>> consecutive_numbers([1, 2, 3, 4, 5])\n    True\n    >>> consecutive_numbers([1, 3, 4, 5])\n    False\n    \"\"\"\n    return len(arr) == len(set(arr))\n\n\ndef main():\n    assert consecutive_numbers([1, 2, 3, 4, 5]) == True\n    assert consecutive_numbers([1, 3, 4, 5]) == False\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 69,
      "score": 1.0,
      "candidate": "def consecutive_num(num_list: list) -> bool:\n    \"\"\"\n    >>> consecutive_num([1,2,3,4,5,6,7,8,9,10])\n    True\n    >>> consecutive_num([1,2,3,4,5,6,7,8,9,11])\n    False\n    >>> consecutive_num([1,2,3,4,5,6,7,8,10])\n    False\n    \"\"\"\n\n    num_list.sort()\n    for i in range(len(num_list) - 1):\n        if num_list[i + 1] - num_list[i] == 1:\n            continue\n        else:\n            return False\n    return True\n\n\ndef main():\n    assert consecutive_num([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == True\n    assert consecutive_num([1, 2, 3, 4, 5, 6, 7, 8, 9, 11]) == False\n    assert consecutive_num([1, 2, 3, 4, 5, 6, 7, 8, 10]) == False\n    assert consecutive_num([1, 2, 3, 4, 5, 6, 7, 8, 10, 11]) == False\n    assert consecutive_num([1, 2, 3, 4, 5, 6, 7, 8, 10, 12]) == True\n    assert consecutive_num([1, 2, 3, 4, 5, 6, 7, 8, 10, 12, 13]) == False\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 70,
      "score": 1.0,
      "candidate": "from typing import List\n\n\ndef consecutive_num(lst: List) -> bool:\n    \"\"\"\n    Checks if the given list contains consecutive numbers.\n    >>> consecutive_num([1,2,3,4,5,6])\n    True\n    >>> consecutive_num([1,3,5,7])\n    False\n    \"\"\"\n    for i in range(len(lst) - 1):\n        if lst[i] + 1 == lst[i + 1]:\n            continue\n        return False\n    return True\n\n\ndef main():\n    print(consecutive_num([1, 2, 3, 4, 5, 6]))\n    print(consecutive_num([1, 3, 5, 7]))\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()\n    main()"
    },
    {
      "rank": 71,
      "score": 1.0,
      "candidate": "def consecutive_num(mylist: list) -> bool:\n    \"\"\"\n    >>> consecutive_num([1, 2, 3, 4, 5, 6])\n    True\n    >>> consecutive_num([1, 2, 3, 5, 6, 7])\n    False\n    >>> consecutive_num([1, 2, 3, 5, 6])\n    False\n    >>> consecutive_num([1, 2, 3, 5, 6, 7, 8])\n    True\n    >>> consecutive_num([1, 2, 3, 5, 6, 7, 8, 9, 10])\n    True\n    >>> consecutive_num([1, 2, 3, 5, 6, 7, 8, 9, 10, 11])\n    False\n    >>> consecutive_num([1, 2, 3, 5, 6, 7, 8, 9, 10, 12])\n    False\n    \"\"\"\n    # if len(mylist) == 1:\n    #     return False\n    # else:\n    #     for i in range(len(mylist) - 1):\n    #         if mylist[i + 1] - mylist[i] != 1:\n    #             return False\n    #     return True\n\n    # another way\n    # return not set(mylist[i + 1] - mylist[i] for i in range(len(mylist) - 1))\n\n    # yet another way\n    # return not any(mylist[i + 1] - mylist[i] != 1 for i in range(len(mylist) - 1))\n\n    # even another way\n    # return all(mylist[i + 1] - mylist[i] == 1 for i in range(len(mylist) - 1))\n\n    # even another way\n    # return all(mylist[i + 1] - mylist[i] == 1 for i in range(len(mylist) - 1))\n\n    # even another way\n    # return all("
    },
    {
      "rank": 72,
      "score": 1.0,
      "candidate": "from typing import List\n\n\ndef is_consecutive(arr: List[int]) -> bool:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(1)\n    \"\"\"\n    if len(arr) <= 1:\n        return True\n\n    for i in range(len(arr) - 1):\n        if arr[i] + 1 != arr[i + 1]:\n            return False\n    return True\n\n\nif __name__ == \"__main__\":\n    assert is_consecutive([1, 2, 3, 4, 5, 6]) == True\n    assert is_consecutive([1, 2, 4, 5, 6]) == False"
    },
    {
      "rank": 73,
      "score": 1.0,
      "candidate": "from typing import List\n\n\ndef consecutive_numbers(nums: List[int]) -> bool:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(1)\n    \"\"\"\n\n    for i in range(len(nums) - 1):\n        if nums[i] + 1 != nums[i + 1]:\n            return False\n\n    return True\n\n\nif __name__ == \"__main__\":\n    assert consecutive_numbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) is True\n    assert consecutive_numbers([1, 2, 3, 4, 5, 6, 7, 9, 10]) is False\n    assert consecutive_numbers([1, 2, 3, 4, 5, 6, 8, 9, 10]) is False"
    },
    {
      "rank": 74,
      "score": 1.0,
      "candidate": "def consecutive_num(nums):\n    prev = nums[0]\n    for i in range(1, len(nums)):\n        if nums[i] == prev + 1:\n            prev = nums[i]\n        else:\n            return False\n    return True\n\nnums = [1,2,3,4,5,6,7,8]\nprint(consecutive_num(nums))\n\nnums = [1,2,3,4,5,6,8]\nprint(consecutive_num(nums))"
    },
    {
      "rank": 75,
      "score": 1.0,
      "candidate": "def consecutive_numbers(data: list) -> bool:\n    \"\"\"\n    Check whether the given list contains consecutive numbers or not\n    >>> consecutive_numbers([1, 2, 3, 4, 5])\n    True\n    >>> consecutive_numbers([1, 2, 3, 4, 6])\n    False\n    >>> consecutive_numbers([1, 2, 3, 5, 6])\n    False\n    >>> consecutive_numbers([1, 2, 3, 4, 5, 6])\n    True\n    \"\"\"\n    if len(data) < 2:\n        return True\n\n    # Check if the first and last numbers are consecutive\n    if data[0] == data[-1] - 1:\n        return True\n\n    # Check if any other two numbers in the list are consecutive\n    for index, item in enumerate(data):\n        if index + 1 < len(data):\n            if data[index + 1] == item + 1:\n                return True\n    return False\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 76,
      "score": 1.0,
      "candidate": "from typing import List\n\n\ndef consecutive_numbers(nums: List) -> bool:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(1)\n    \"\"\"\n    if len(nums) < 3:\n        return False\n\n    nums.sort()\n    for i in range(len(nums) - 1):\n        if nums[i + 1] - nums[i] != 1:\n            return False\n    return True\n\n\nif __name__ == \"__main__\":\n    assert consecutive_numbers([1, 2, 3, 4, 5]) == True\n    assert consecutive_numbers([1, 2, 3, 4, 6]) == False"
    },
    {
      "rank": 77,
      "score": 1.0,
      "candidate": "def consecutive_num(arr):\n    arr = sorted(arr)\n    for i in range(len(arr)-1):\n        if arr[i+1]-arr[i] != 1:\n            return False\n    return True\n\n\nprint(consecutive_num([1,2,3,4,5,6,7,8,9]))"
    },
    {
      "rank": 78,
      "score": 1.0,
      "candidate": "def consecutive_numbers(lst: list) -> bool:\n    \"\"\"\n    >>> consecutive_numbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n    True\n    >>> consecutive_numbers([1, 3, 5, 7, 9])\n    True\n    >>> consecutive_numbers([1, 3, 5, 7, 9, 11])\n    False\n    >>> consecutive_numbers([1, 2, 3, 4, 6, 7, 8, 9, 10])\n    False\n    >>> consecutive_numbers([1])\n    True\n    >>> consecutive_numbers([1, 2, 4, 5, 6])\n    False\n    >>> consecutive_numbers([])\n    True\n    \"\"\"\n    if len(lst) < 2:\n        return True\n\n    for i in range(len(lst) - 1):\n        if lst[i + 1] - lst[i] != 1:\n            return False\n\n    return True\n\n\ndef main():\n    from doctest import testmod\n\n    testmod()\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 79,
      "score": 1.0,
      "candidate": "def check_consecutive(mylist):\n    if len(mylist) == 0:\n        return False\n    if len(mylist) == 1:\n        return True\n    if len(mylist) == 2:\n        return mylist[0] == mylist[1] - 1\n    if mylist[0] != 1:\n        return False\n    return check_consecutive(mylist[1:])\n\n\nprint(check_consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9]))\nprint(check_consecutive([1, 2, 3, 4, 6, 7, 8, 9]))\nprint(check_consecutive([1, 2, 3, 4, 5, 6, 7, 10, 11]))\nprint(check_consecutive([1, 2, 3, 4, 5, 6, 7, 10]))"
    },
    {
      "rank": 80,
      "score": 1.0,
      "candidate": "def check_consecutive_numbers(arr):\n    for i in range(len(arr) - 1):\n        if arr[i] + 1 != arr[i + 1]:\n            return False\n    return True\n\n\ndef main():\n    arr = [1, 2, 3, 4, 5, 6, 7, 8]\n    print(\"Does the list contain consecutive numbers? - \", check_consecutive_numbers(arr))\n    arr = [1, 2, 3, 4, 5, 7, 8, 9]\n    print(\"Does the list contain consecutive numbers? - \", check_consecutive_numbers(arr))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 81,
      "score": 1.0,
      "candidate": "from typing import List, Optional\n\n\ndef consecutive_numbers(numbers: List[int]) -> Optional[bool]:\n    \"\"\"\n    Return whether the given list contains consecutive numbers or not.\n    >>> consecutive_numbers([1,2,3,4,5,6,7])\n    True\n    >>> consecutive_numbers([1,2,3,4,6,7])\n    False\n    >>> consecutive_numbers([1,2,3,5,6,7])\n    True\n    >>> consecutive_numbers([1,2,3,5,6,7,8])\n    False\n    \"\"\"\n    if len(numbers) == 1:\n        return True\n\n    previous_number = numbers[0]\n    for number in numbers[1:]:\n        if previous_number + 1 != number:\n            return False\n        previous_number = number\n    return True\n\n\ndef main():\n    assert consecutive_numbers([1, 2, 3, 4, 5, 6, 7]) is True\n    assert consecutive_numbers([1, 2, 3, 4, 6, 7]) is False\n    assert consecutive_numbers([1, 2, 3, 5, 6, 7]) is True\n    assert consecutive_numbers([1, 2, 3, 5, 6, 7, 8]) is False\n    print(\"Passed.\")\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 82,
      "score": 1.0,
      "candidate": "from typing import List\n\n\ndef consecutive_numbers(arr: List) -> bool:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(1)\n    \"\"\"\n    prev = -100\n    for i in arr:\n        if i - prev == 1:\n            prev = i\n        else:\n            prev = -100\n    return True\n\n\nif __name__ == \"__main__\":\n    assert consecutive_numbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == True\n    assert consecutive_numbers([1, 3, 5, 7, 9]) == True\n    assert consecutive_numbers([1, 2, 4, 5, 7, 8, 10]) == False\n    assert consecutive_numbers([1, 3, 6, 7, 8, 10]) == False"
    },
    {
      "rank": 83,
      "score": 1.0,
      "candidate": "from typing import List\n\n\ndef consecutive_numbers(arr: List[int]) -> bool:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(1)\n    \"\"\"\n    if len(arr) < 2:\n        return True\n\n    diff = arr[1] - arr[0]\n\n    for i in range(2, len(arr)):\n        if arr[i] - arr[i - 1] != diff:\n            return False\n\n    return True\n\n\nif __name__ == \"__main__\":\n    assert consecutive_numbers([1, 2, 3, 4]) == True\n    assert consecutive_numbers([1, 3, 4, 5]) == False"
    },
    {
      "rank": 84,
      "score": 1.0,
      "candidate": "from typing import List\n\n\ndef check_consecutive(input_list: List) -> bool:\n    \"\"\"Checks if the given list contains consecutive numbers or not\n\n    Args:\n        input_list (List): The input list\n\n    Returns:\n        bool: Whether the list contains consecutive numbers or not\n    \"\"\"\n    return all(\n        [\n            input_list[i + 1] - input_list[i] == 1\n            for i in range(len(input_list) - 1)\n        ]\n    )\n\n\ndef main():\n    print(check_consecutive([1, 2, 3, 4, 5]))\n    print(check_consecutive([1, 2, 3, 4, 7]))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 85,
      "score": 1.0,
      "candidate": "from typing import List, Optional\n\n\ndef consecutive_nums(lst: List[int]) -> Optional[bool]:\n    \"\"\"\n    This function checks if the given list contains consecutive numbers or not\n    >>> consecutive_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n    True\n    >>> consecutive_nums([1, 2, 3, 4, 6, 7, 8, 9, 10])\n    False\n    >>> consecutive_nums([1, 2, 3, 4, 6, 7, 8, 10])\n    False\n    \"\"\"\n    if len(lst) <= 1:\n        return True\n\n    return all(\n        x + 1 == y for x, y in zip(lst, lst[1:])\n    ) or all(\n        x - 1 == y for x, y in zip(lst, lst[1:])\n    )\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 86,
      "score": 1.0,
      "candidate": "def consecutive_num(nums: list) -> bool:\n    \"\"\"\n    This function takes a list and returns whether the list contains consecutive numbers or not.\n    >>> consecutive_num([1,2,3,4,5,6])\n    True\n    >>> consecutive_num([1,2,3,4,5,6,8])\n    False\n    >>> consecutive_num([1,2,3,4,5,6,7,8,9,10])\n    True\n    \"\"\"\n    if len(nums) < 2:\n        return False\n\n    i = 1\n    while i < len(nums):\n        if nums[i] - nums[i - 1] != 1:\n            return False\n        i += 1\n    return True\n\n\ndef main():\n    assert consecutive_num([1, 2, 3, 4, 5, 6]) == True\n    assert consecutive_num([1, 2, 3, 4, 5, 6, 8]) == False\n    assert consecutive_num([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == True\n    print(\"Passed\")\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 87,
      "score": 1.0,
      "candidate": "def consecutive_nums(lst: list) -> bool:\n    \"\"\"\n    >>> consecutive_nums([1,2,3,4,5,6,7,8,9])\n    True\n    >>> consecutive_nums([1,2,3,4,5,6,7,8,10])\n    False\n    >>> consecutive_nums([1,2,3,4,5,6,7,8,9,10])\n    False\n    >>> consecutive_nums([1,2,3,4,5,6,7,8,9,10,11])\n    True\n    >>> consecutive_nums([1,2,3,4,5,6,7,8,9,10,11,12])\n    True\n    \"\"\"\n    if len(lst) < 3:\n        return False\n\n    for i in range(len(lst) - 2):\n        if lst[i + 1] - lst[i] != 1:\n            return False\n\n    return True\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 88,
      "score": 1.0,
      "candidate": "def check_consecutive_nums(num_list):\n    prev = num_list[0]\n    for num in num_list[1:]:\n        if num - prev != 1:\n            return False\n        prev = num\n    return True\n\n\nnum_list = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]\nprint(check_consecutive_nums(num_list))"
    },
    {
      "rank": 89,
      "score": 1.0,
      "candidate": "from typing import List\n\n\ndef check_consecutive(arr: List[int]) -> bool:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(1)\n    \"\"\"\n    if len(arr) <= 1:\n        return True\n\n    count = 1\n    for i in range(1, len(arr)):\n        if arr[i] == arr[i - 1] + 1:\n            count += 1\n        else:\n            count = 1\n        if count == 3:\n            return True\n    return False\n\n\nif __name__ == \"__main__\":\n    assert check_consecutive([1, 2, 3, 4, 5, 6, 7]) is False\n    assert check_consecutive([1, 2, 3, 4, 5, 6, 7, 8]) is True\n    assert check_consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9]) is False\n    assert check_consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) is True"
    },
    {
      "rank": 90,
      "score": 1.0,
      "candidate": "def consecutive_numbers(lst):\n    \"\"\"\n    This function takes in a list of integers as an argument and returns true if the list contains consecutive numbers else returns false\n    >>> consecutive_numbers([1,2,3,4,5,6])\n    True\n    >>> consecutive_numbers([1,2,3,4,6,7])\n    False\n    >>> consecutive_numbers([1,2,3,4,6,8])\n    False\n    >>> consecutive_numbers([1,2,3,4,5,6,7])\n    False\n    >>> consecutive_numbers([1,2,3,4,6,7,8])\n    True\n    >>> consecutive_numbers([1,2,3,4,5,6,7,8])\n    True\n    >>> consecutive_numbers([1,2,3,4,6,7,8,9])\n    True\n    >>> consecutive_numbers([1,2,3,4,5,6,7,8,9])\n    True\n    >>> consecutive_numbers([1,2,3,4,6,7,8,10])\n    False\n    \"\"\"\n    if len(lst) <= 2:\n        return True\n    else:\n        for i in range(len(lst) - 1):\n            if lst[i + 1] - lst[i] == 1:\n                continue\n            else:\n                return False\n    return True\n\n\ndef main():\n    \"\"\"\n    This is the main function which we can use to take an input and check if the given list contains consecutive numbers or not.\n    \"\"\"\n    print(\"-----------------------------\")\n    print(\" LIST CONTAINS CONSECUTIVE NUMBERS\")\n    print(\"-----------------------------\")\n    a = list(map(int, input(\"Enter the list to check for consecutive numbers: \").split()))\n    if consecutive_numbers(a):\n        print(\"Yes, the list contains consecutive numbers\")\n    else:\n        print(\"No, the list does not contain consecutive numbers\")\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 91,
      "score": 1.0,
      "candidate": "def consecutive_number(nums):\n    for i in range(len(nums)-1):\n        if nums[i+1] - nums[i] != 1:\n            return False\n    return True\n\n\nprint(consecutive_number([1,2,3,4,5,6,7,8,9,10]))\nprint(consecutive_number([1,2,3,5,6,7,8,9,10]))\n\n\n\"\"\"\nWrite a python function to check whether the given list contains any duplicate elements or not.\n\"\"\"\n\ndef duplicate_element(nums):\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] == nums[j]:\n                return True\n    return False\n\nprint(duplicate_element([1,2,3,4,5,6,7,8,9,10]))\nprint(duplicate_element([1,2,3,4,5,6,7,8,9,10,10]))\n\n\n\"\"\"\nWrite a python function to check whether the given list contains any duplicate elements or not.\n\"\"\"\n\ndef duplicate_element(nums):\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] == nums[j]:\n                return True\n    return False\n\nprint(duplicate_element([1,2,3,4,5,6,7,8,9,10]))\nprint(duplicate_element([1,2,3,4,5,6,7,8,9,10,10]))"
    },
    {
      "rank": 92,
      "score": 1.0,
      "candidate": "from typing import List, Optional\n\n\ndef consecutive_numbers(array: List[int]) -> Optional[bool]:\n    \"\"\"\n    returns True if the given list contains consecutive numbers, else False\n    >>> consecutive_numbers([1, 2, 3, 4])\n    True\n    >>> consecutive_numbers([1, 3, 4, 5])\n    False\n    >>> consecutive_numbers([1, 2, 4, 5])\n    False\n    >>> consecutive_numbers([1, 2, 3, 5])\n    False\n    >>> consecutive_numbers([1, 2, 3, 4, 5])\n    True\n    >>> consecutive_numbers([1, 2, 3, 5, 6, 7, 8, 9, 10])\n    True\n    >>> consecutive_numbers([1, 3, 5, 7, 9])\n    False\n    >>> consecutive_numbers([1, 3, 5, 6, 7, 8, 9, 10])\n    False\n    \"\"\"\n    if len(array) <= 1:\n        return True\n\n    i = 1\n    while i < len(array):\n        if array[i] - array[i - 1] != 1:\n            return False\n        i += 1\n    return True\n\n\ndef main():\n    assert consecutive_numbers([1, 2, 3, 4]) == True\n    assert consecutive_numbers([1, 3, 4, 5]) == False\n    assert consecutive_numbers([1, 2, 4, 5]) == False\n    assert consecutive_numbers([1, 2, 3, 5]) == False\n    assert consecutive_numbers([1, 2, 3, 4, 5]) == True\n    assert consecutive_numbers([1, 2, 3, 5, 6, 7, 8, 9, 10]) == True\n    assert consecutive_numbers([1, 3, 5, 7, 9]) == False\n    assert consecutive_numbers([1, 3, 5, 6, 7, 8, 9, 10]) =="
    },
    {
      "rank": 93,
      "score": 1.0,
      "candidate": "def consecutive_num(nums):\n    \"\"\"\n    Time complexity: O(n)\n    Space complexity: O(1)\n    \"\"\"\n    i = 0\n    while i < len(nums)-1:\n        if nums[i+1] - nums[i] == 1:\n            i += 1\n        else:\n            return False\n    return True\n\ndef main():\n    print(consecutive_num([1,2,3,4]))\n    print(consecutive_num([1,2,3,4,5]))\n    print(consecutive_num([1,2,3,4,5,7]))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 94,
      "score": 1.0,
      "candidate": "def check_consecutive(num_list):\n    diff = []\n    for i in range(len(num_list)-1):\n        diff.append(num_list[i+1]-num_list[i])\n    if 1 in diff:\n        return True\n    return False\n\n\nnum_list = [1, 2, 3, 5, 7, 9]\nprint(check_consecutive(num_list))"
    },
    {
      "rank": 95,
      "score": 1.0,
      "candidate": "from typing import List\n\n\ndef consecutive_numbers(nums: List[int]) -> bool:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(1)\n    \"\"\"\n    prev = 0\n\n    for num in nums:\n        if num - prev == 1:\n            prev = num\n        else:\n            return False\n\n    return True\n\n\nif __name__ == \"__main__\":\n    assert consecutive_numbers([1, 2, 3, 4, 5]) == True\n    assert consecutive_numbers([1, 3, 4, 5, 6]) == False"
    },
    {
      "rank": 96,
      "score": 1.0,
      "candidate": "from typing import List\n\n\ndef check_consecutive_numbers(input_list: List[int]) -> bool:\n    \"\"\"\n    check_consecutive_numbers will check whether the given list contains consecutive numbers or not\n    :param input_list: list of numbers\n    :return: bool\n    \"\"\"\n    for i in range(len(input_list) - 1):\n        if input_list[i] + 1 != input_list[i + 1]:\n            return False\n    return True\n\n\ndef main():\n    print(check_consecutive_numbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\n    print(check_consecutive_numbers([1, 2, 4, 5, 6, 7, 8, 9, 10]))\n\n\n# Using the special variable\n# __name__\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 97,
      "score": 1.0,
      "candidate": "from typing import List\n\n\ndef check_consecutive_numbers(given_list: List[int]) -> bool:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(1)\n    \"\"\"\n\n    for i in range(1, len(given_list)):\n        if given_list[i] - given_list[i - 1] == 1:\n            continue\n        else:\n            return False\n\n    return True\n\n\nif __name__ == \"__main__\":\n    assert check_consecutive_numbers([1, 2, 3, 4]) is True\n    assert check_consecutive_numbers([1, 2, 4, 5]) is False"
    },
    {
      "rank": 98,
      "score": 1.0,
      "candidate": "def consecutive_num(nums):\n    return (max(nums) - min(nums)) == len(nums) - 1\n\n\nprint(consecutive_num([1,2,3,4,5]))"
    },
    {
      "rank": 99,
      "score": 1.0,
      "candidate": "from typing import List\n\n\ndef consecutive_numbers(list_: List) -> bool:\n    \"\"\"\n    This function returns True if the given list contains consecutive numbers else False.\n    >>> consecutive_numbers([1, 2, 3, 4, 5])\n    True\n    >>> consecutive_numbers([1, 2, 4, 5])\n    False\n    \"\"\"\n    return list_ == list(range(min(list_), max(list_) + 1))\n\n\ndef main():\n    assert consecutive_numbers([1, 2, 3, 4, 5]) == True\n    assert consecutive_numbers([1, 2, 4, 5]) == False\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()\n    main()"
    },
    {
      "rank": 100,
      "score": 1.0,
      "candidate": "from typing import List, Optional\n\n\ndef consecutive_numbers(numbers: List[int]) -> Optional[bool]:\n    \"\"\"\n    Checks whether the given list contains consecutive numbers or not.\n    >>> consecutive_numbers([1, 2, 3, 4, 5])\n    True\n    >>> consecutive_numbers([1, 2, 4, 5])\n    False\n    \"\"\"\n    if len(numbers) < 2:\n        return True\n\n    prev = numbers[0]\n    for num in numbers[1:]:\n        if num - prev != 1:\n            return False\n        prev = num\n\n    return True\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    }
  ]
}