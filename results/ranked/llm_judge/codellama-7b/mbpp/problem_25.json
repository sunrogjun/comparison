{
  "timestamp": "2025-09-14T22:29:23.840873",
  "method": "improved_llm_judge",
  "judge_model": "codellama/CodeLlama-7b-Python-hf",
  "target_model": "codellama-7b",
  "dataset": "mbpp",
  "problem_number": 25,
  "total_candidates": 100,
  "results": [
    {
      "rank": 1,
      "score": 10.0,
      "candidate": "def nth_digit(num_1, num_2, n):\n    \"\"\"\n    Finds the nth digit in the proper fraction of two given numbers.\n\n    >>> nth_digit(123, 456, 3)\n    3\n    >>> nth_digit(123, 456, 11)\n    5\n    >>> nth_digit(123, 456, 0)\n    2\n    >>> nth_digit(123, 456, 9)\n    4\n    >>> nth_digit(123, 456, 10)\n    5\n    >>> nth_digit(123, 456, 11)\n    5\n    >>> nth_digit(123, 456, 12)\n    6\n    >>> nth_digit(123, 456, 20)\n    9\n    >>> nth_digit(123, 456, 21)\n    1\n    >>> nth_digit(123, 456, 22)\n    2\n    >>> nth_digit(123, 456, 23)\n    3\n    >>> nth_digit(123, 456, 24)\n    4\n    >>> nth_digit(123, 456, 25)\n    5\n    >>> nth_digit(123, 456, 26)\n    6\n    >>> nth_digit(123, 456, 30)\n    9\n    \"\"\"\n    return (\n        str(num_1 + num_2)\n        .split(\".\")[1]\n        .zfill(len(str(num_1 + num_2)))[n - 1]\n    )\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 2,
      "score": 10.0,
      "candidate": "def nth_digit(number1, number2, n):\n    \"\"\"\n    >>> nth_digit(10, 12345, 2)\n    3\n    >>> nth_digit(10, 12345, 5)\n    0\n    >>> nth_digit(10, 12345, 6)\n    1\n    >>> nth_digit(10, 12345, 10)\n    5\n    >>> nth_digit(10, 12345, 11)\n    1\n    \"\"\"\n    n = n - 1\n    result = number1 * number2\n    s = str(result)\n    if n >= len(s):\n        return int(s[-1])\n    return int(s[n])\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 3,
      "score": 10.0,
      "candidate": "def nth_digit(number1, number2, n):\n    result = number1 / number2\n    result = str(result)\n    if n > len(result):\n        return -1\n    else:\n        return int(result[n - 1])\n\n\nprint(nth_digit(1024, 2, 1))"
    },
    {
      "rank": 4,
      "score": 10.0,
      "candidate": "def find_nth_digit(n, d1, d2):\n    if n <= 0:\n        return -1\n    if d1 < d2:\n        d1, d2 = d2, d1\n    if d1 < 0 or d2 < 0:\n        return -1\n    digits = str(d1 / d2)\n    n -= 1\n    count = 0\n    while n > 0:\n        n -= len(digits)\n        count += 1\n        digits = str(d1 / (d2 ** count))\n    return int(digits[n % len(digits)])"
    },
    {
      "rank": 5,
      "score": 10.0,
      "candidate": "from functools import reduce\n\n\ndef nth_digit_in_proper_fraction(n, m, d):\n    \"\"\"\n    Find the nth digit in the proper fraction of two given numbers.\n    :param n: int\n    :param m: int\n    :param d: int\n    :return: int\n    >>> nth_digit_in_proper_fraction(10, 2, 1)\n    8\n    >>> nth_digit_in_proper_fraction(10, 3, 1)\n    8\n    >>> nth_digit_in_proper_fraction(10, 5, 1)\n    8\n    >>> nth_digit_in_proper_fraction(10, 10, 1)\n    8\n    \"\"\"\n    return int(\n        reduce(lambda x, y: x + y, [x * 10 ** i for i, x in enumerate(str(m / d))])\n        [n - 1]\n    )\n\n\ndef nth_digit_in_proper_fraction_using_string(n, m, d):\n    \"\"\"\n    Find the nth digit in the proper fraction of two given numbers.\n    :param n: int\n    :param m: int\n    :param d: int\n    :return: int\n    >>> nth_digit_in_proper_fraction_using_string(10, 2, 1)\n    8\n    >>> nth_digit_in_proper_fraction_using_string(10, 3, 1)\n    8\n    >>> nth_digit_in_proper_fraction_using_string(10, 5, 1)\n    8\n    >>> nth_digit_in_proper_fraction_using_string(10, 10, 1)\n    8\n    \"\"\"\n    return int(str(m / d)[n - 1])\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 6,
      "score": 10.0,
      "candidate": "def nth_digit(num1, num2, n):\n    frac = num1/num2\n    if frac < 1:\n        return 0\n    else:\n        num1 /= 10\n        return 1 + nth_digit(num1, num2, n-1)\n\n\nnum1 = int(input(\"Enter the first number: \"))\nnum2 = int(input(\"Enter the second number: \"))\nn = int(input(\"Enter the nth digit: \"))\nprint(nth_digit(num1, num2, n))"
    },
    {
      "rank": 7,
      "score": 10.0,
      "candidate": "from functools import reduce\n\n\ndef nth_digit(num1, num2, n):\n    \"\"\"\n    :param num1: int\n    :param num2: int\n    :param n: int\n    :return: int\n    \"\"\"\n    if n < 1 or not isinstance(n, int):\n        raise ValueError(\"n must be a positive integer\")\n    if num1 < 1 or not isinstance(num1, int):\n        raise ValueError(\"num1 must be a positive integer\")\n    if num2 < 1 or not isinstance(num2, int):\n        raise ValueError(\"num2 must be a positive integer\")\n    if num1 < num2:\n        raise ValueError(\"num1 must be greater than num2\")\n    digit_length = len(str(num1)) + len(str(num2))\n    if digit_length < n:\n        raise ValueError(\"n must be less than or equal to the digit length of num1 + num2\")\n\n    def _digits(num):\n        return list(map(int, str(num)))\n\n    def _find_digit(num, n):\n        if n <= 0:\n            return 0\n        num_digits = _digits(num)\n        for i in range(0, len(num_digits)):\n            if n - 1 <= i:\n                return num_digits[i]\n            n -= len(num_digits)\n        return 0\n\n    return _find_digit(reduce(lambda x, y: x * 10 + y, _digits(num1)) / num2, n - 1)\n\n\nprint(nth_digit(123456789, 987654321, 10))"
    },
    {
      "rank": 8,
      "score": 10.0,
      "candidate": "def nth_digit(n, d1, d2):\n    \"\"\"\n    >>> nth_digit(1, 5, 2)\n    2\n    >>> nth_digit(4, 5, 2)\n    5\n    >>> nth_digit(10, 5, 2)\n    Traceback (most recent call last):\n        ...\n    ValueError: Invalid value for n\n    >>> nth_digit(5, 2, 5)\n    0\n    >>> nth_digit(10, 2, 5)\n    2\n    >>> nth_digit(15, 2, 5)\n    5\n    >>> nth_digit(20, 2, 5)\n    2\n    >>> nth_digit(100, 2, 5)\n    2\n    >>> nth_digit(1000, 2, 5)\n    5\n    >>> nth_digit(10000, 2, 5)\n    2\n    \"\"\"\n    if n <= 0:\n        raise ValueError(\"Invalid value for n\")\n\n    if n == 1:\n        return min(d1, d2)\n\n    if d1 < d2:\n        d1, d2 = d2, d1\n\n    n -= 1\n\n    d1_len = len(str(d1))\n    d2_len = len(str(d2))\n\n    if n <= d2_len:\n        return int(str(d1)[d2_len - n])\n    else:\n        return int(str(d2)[n - d2_len])\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 9,
      "score": 10.0,
      "candidate": "def find_nth_digit(num1, num2, n):\n    \"\"\"\n    >>> find_nth_digit(1234, 2345, 5)\n    4\n    >>> find_nth_digit(1234, 2345, 10)\n    3\n    >>> find_nth_digit(1234, 2345, 100)\n    2\n    >>> find_nth_digit(1234, 2345, 1000)\n    1\n    >>> find_nth_digit(1234, 2345, 2000)\n    2\n    >>> find_nth_digit(1234, 2345, 3000)\n    3\n    >>> find_nth_digit(1234, 2345, 3001)\n    4\n    >>> find_nth_digit(1234, 2345, 4001)\n    5\n    \"\"\"\n    n -= 1\n    # Find the number of digits in the smaller number\n    n_digits = int(math.log10(min(num1, num2))) + 1\n    # Find the proper fraction\n    proper_fraction = (num1 + num2) / (num1 + num2).__truediv__(10**n_digits)\n    # Find the nth digit\n    return int(str(proper_fraction)[n])"
    },
    {
      "rank": 10,
      "score": 10.0,
      "candidate": "def nth_digit(d, num_1, num_2):\n    \"\"\"\n    >>> nth_digit(1, 2, 3)\n    2\n    >>> nth_digit(2, 2, 3)\n    3\n    \"\"\"\n    result = num_1 / num_2\n    result = int(result * 10 ** d)\n    return result % 10\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 11,
      "score": 10.0,
      "candidate": "from functools import reduce\n\n\ndef nth_digit(x: int, y: int, n: int) -> int:\n    \"\"\"\n    >>> nth_digit(123, 456, 3)\n    3\n    >>> nth_digit(12345, 6789, 10)\n    5\n    >>> nth_digit(123, 456, 11)\n    0\n    >>> nth_digit(123, 456, -2)\n    Traceback (most recent call last):\n        ...\n    ValueError: n must be positive\n    >>> nth_digit(123, 456, 100)\n    Traceback (most recent call last):\n        ...\n    ValueError: n is too large\n    \"\"\"\n    if n < 0:\n        raise ValueError(\"n must be positive\")\n    if x < 0 or y < 0:\n        raise ValueError(\"x and y must be positive\")\n\n    if x > y:\n        x, y = y, x\n\n    return int(str(reduce(lambda x, y: x * 10 + y, xrange(y, 0, -1)))[n - 1])\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 12,
      "score": 10.0,
      "candidate": "from functools import reduce\n\n\ndef proper_fraction(n, m):\n    if n > m:\n        return n - m\n    return m - n\n\n\ndef nth_digit(n, m):\n    digit_pos = proper_fraction(n, m)\n    digit = m - digit_pos\n    if digit_pos == 0:\n        return digit\n    return reduce(lambda x, y: x * 10 + y, [int(d) for d in str(m)[digit_pos - 1]])\n\n\nif __name__ == \"__main__\":\n    print(nth_digit(3, 125))"
    },
    {
      "rank": 13,
      "score": 10.0,
      "candidate": "from math import log10\n\n\ndef nth_digit(number_1, number_2, n):\n    \"\"\"\n    >>> nth_digit(123, 456, 3)\n    5\n    >>> nth_digit(567, 891, 4)\n    8\n    >>> nth_digit(1234, 5678, 10)\n    8\n    >>> nth_digit(1234, 5678, -1)\n    Traceback (most recent call last):\n        ...\n    ValueError: Invalid input\n    \"\"\"\n    number_1, number_2 = int(number_1), int(number_2)\n    if number_1 < 1 or number_2 < 1:\n        raise ValueError(\"Invalid input\")\n    if n < 1:\n        raise ValueError(\"Invalid input\")\n    if n > min(len(str(number_1)), len(str(number_2))):\n        raise ValueError(\"Invalid input\")\n    quotient, remainder = divmod(log10(number_1) + log10(number_2), 1)\n    if quotient > 0:\n        n += 1\n    return int(str(number_1 * number_2)[n - 1])\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 14,
      "score": 10.0,
      "candidate": "from functools import reduce\n\n\ndef proper_fraction(number: int, denominator: int) -> int:\n    return number * denominator\n\n\ndef nth_digit(number: int, denominator: int, n: int) -> int:\n    \"\"\"\n    >>> nth_digit(6, 3, 1)\n    2\n    >>> nth_digit(6, 3, 2)\n    4\n    >>> nth_digit(12345, 2, 3)\n    3\n    >>> nth_digit(12345, 2, 4)\n    5\n    >>> nth_digit(12345, 2, 5)\n    1\n    \"\"\"\n    return int(\n        reduce(lambda x, y: x + str(y), [proper_fraction(number, denominator)], \"\")[n - 1]\n    )\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 15,
      "score": 9.965305515283529,
      "candidate": "from functools import reduce\n\n\ndef proper_fraction(a, b, n):\n    a_len = len(str(a))\n    b_len = len(str(b))\n\n    if n <= a_len:\n        return str(a)[n - 1]\n    elif n <= a_len + b_len:\n        return str(b)[n - 1 - a_len]\n    else:\n        return proper_fraction(a * 10, b * 10, n - a_len - b_len)\n\n\ndef proper_fraction_using_reduce(a, b, n):\n    a_len = len(str(a))\n    b_len = len(str(b))\n\n    if n <= a_len:\n        return str(a)[n - 1]\n    elif n <= a_len + b_len:\n        return str(b)[n - 1 - a_len]\n    else:\n        return reduce(lambda a, b: a * 10 + b, (b,) * (n - a_len - b_len))\n\n\nprint(proper_fraction(12345, 6789, 5))\nprint(proper_fraction(12345, 6789, 11))\nprint(proper_fraction(12345, 6789, 16))\nprint(proper_fraction(12345, 6789, 21))\nprint(proper_fraction(12345, 6789, 26))\nprint(proper_fraction(12345, 6789, 31))\nprint(proper_fraction(12345, 6789, 36))\nprint(proper_fraction(12345, 6789, 41))\nprint(proper_fraction(12345, 6789, 46))\nprint(proper_fraction(12345, 6789, 51"
    },
    {
      "rank": 16,
      "score": 9.944302307000855,
      "candidate": "def nth_digit(n, m, a, b):\n    count = 0\n    for i in range(1, a + 1):\n        count += i * 5 ** (i - 1)\n    count = count + (b - 1) * count\n    count += n\n    count -= 1\n    return int(str(count)[-1])\n\n\nprint(nth_digit(5, 10, 2, 3))"
    },
    {
      "rank": 17,
      "score": 9.934098433648746,
      "candidate": "from functools import reduce\n\n\ndef nth_digit(n, d1, d2):\n    \"\"\"\n    Find the nth digit in the proper fraction of two given numbers.\n    >>> nth_digit(3, 12, 43)\n    '0'\n    >>> nth_digit(1, 12, 43)\n    '3'\n    >>> nth_digit(4, 12, 43)\n    '2'\n    >>> nth_digit(12, 12, 43)\n    '3'\n    \"\"\"\n    if n == 1:\n        return str(min(d1, d2))\n    frac = d1 / d2\n    if frac > 1:\n        return nth_digit(n - int(frac), int(frac) * 10, d2)\n    return nth_digit(n - 1, d1 % d2, d2)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 18,
      "score": 9.912491875062017,
      "candidate": "from __future__ import annotations\n\n\ndef nth_digit(n: int, m: int, p: int) -> int:\n    \"\"\"\n    >>> nth_digit(1, 2, 1)\n    5\n    >>> nth_digit(3, 2, 1)\n    5\n    >>> nth_digit(4, 2, 1)\n    5\n    >>> nth_digit(5, 2, 1)\n    5\n    >>> nth_digit(6, 2, 1)\n    5\n    >>> nth_digit(7, 2, 1)\n    5\n    >>> nth_digit(8, 2, 1)\n    5\n    >>> nth_digit(9, 2, 1)\n    5\n    >>> nth_digit(10, 2, 1)\n    5\n    >>> nth_digit(11, 2, 1)\n    5\n    >>> nth_digit(12, 2, 1)\n    5\n    >>> nth_digit(13, 2, 1)\n    5\n    >>> nth_digit(14, 2, 1)\n    5\n    >>> nth_digit(15, 2, 1)\n    5\n    >>> nth_digit(16, 2, 1)\n    5\n    >>> nth_digit(17, 2, 1)\n    5\n    >>> nth_digit(18, 2, 1)\n    5\n    >>> nth_digit(19, 2, 1)\n    5\n    >>> nth_digit(20, 2, 1)\n    5\n    >>> nth_digit(21, 2, 1)\n    5\n    >>> nth_digit(22, 2, 1)\n    5\n    >>> nth_digit(23, 2, 1)\n    5\n    >>> nth_digit(24, 2, 1)\n    5\n    >>> nth_digit(25, 2, 1)\n    5\n    >>> nth_"
    },
    {
      "rank": 19,
      "score": 9.909668891323212,
      "candidate": "def find_nth_digit(number1, number2, n):\n    \"\"\"\n    >>> find_nth_digit(10, 1, 1)\n    1\n    >>> find_nth_digit(10, 1, 4)\n    0\n    >>> find_nth_digit(10, 1, 2)\n    1\n    >>> find_nth_digit(10, 1, 3)\n    0\n    \"\"\"\n    return int(str(number1 / number2)[n - 1])\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 20,
      "score": 9.884475315875106,
      "candidate": "def nth_digit(n, m, p):\n    total = str(m / p)\n    return int(total[n - 1])\n\n\nif __name__ == \"__main__\":\n    n = 5\n    m = 123\n    p = 2\n    print(nth_digit(n, m, p))"
    },
    {
      "rank": 21,
      "score": 9.860974692156262,
      "candidate": "def nth_digit(n, num1, num2):\n    \"\"\"\n    :param n: nth digit\n    :param num1: num1\n    :param num2: num2\n    :return: the nth digit\n    \"\"\"\n    if n < 0:\n        raise ValueError('n must be a positive integer')\n\n    if num1 < 0 or num2 < 0:\n        raise ValueError('num1 and num2 must be positive integers')\n\n    return int(str(num1 / num2)[n - 1])\n\n\ndef test_nth_digit():\n    assert nth_digit(1, 2, 3) == 0\n    assert nth_digit(2, 2, 3) == 3\n    assert nth_digit(3, 2, 3) == 6\n    assert nth_digit(4, 2, 3) == 9\n    assert nth_digit(5, 2, 3) == 0\n    assert nth_digit(6, 2, 3) == 3\n    assert nth_digit(7, 2, 3) == 6\n    assert nth_digit(8, 2, 3) == 9\n    assert nth_digit(9, 2, 3) == 0\n    assert nth_digit(10, 2, 3) == 0\n    assert nth_digit(11, 2, 3) == 3\n    assert nth_digit(12, 2, 3) == 6\n    assert nth_digit(13, 2, 3) == 9\n    assert nth_digit(14, 2, 3) == 0\n    assert nth_digit(15, 2, 3) == 3\n    assert nth_digit(16, 2, 3) == 6\n    assert nth_digit(17, 2, 3) == 9\n    assert nth_digit(18, 2, 3) == 0\n    assert nth_digit(19, 2, 3) == 0"
    },
    {
      "rank": 22,
      "score": 9.836685182642444,
      "candidate": "def find_nth_digit(num1, num2, n):\n    total = n\n    while num1 or num2:\n        if num1:\n            num1, digit = divmod(num1, 10)\n            if total == 1:\n                return digit\n            total -= 1\n        if num2:\n            num2, digit = divmod(num2, 10)\n            if total == 1:\n                return digit\n            total -= 1\n    return -1\n\n\ndef main():\n    num1 = int(input(\"Enter a number: \"))\n    num2 = int(input(\"Enter a number: \"))\n    n = int(input(\"Enter a number: \"))\n    print(find_nth_digit(num1, num2, n))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 23,
      "score": 9.819808393024358,
      "candidate": "def nth_digit(n, d1, d2):\n    d1 = str(d1)\n    d2 = str(d2)\n    l1 = len(d1)\n    l2 = len(d2)\n    if l1 < l2:\n        return int(d2[l2 - n])\n    else:\n        return int(d1[l1 - n])\n\n\nprint(nth_digit(2, 5, 12345))"
    },
    {
      "rank": 24,
      "score": 9.819488016331182,
      "candidate": "def nthDigit(n, m, p):\n    \"\"\"\n    :param: n - the position of the digit to find.\n    :param: m - the first number.\n    :param: p - the second number.\n    :return: the nth digit in the proper fraction of m and p.\n    \"\"\"\n    # Write your code here.\n\n    if n < 1 or m < 1 or p < 1:\n        return -1\n\n    m_len = len(str(m))\n    p_len = len(str(p))\n    m_dig = m // (10**(m_len - 1))\n    p_dig = p // (10**(p_len - 1))\n\n    if n <= m_len:\n        return int(str(m)[n - 1])\n    elif n <= m_len + p_len:\n        return int(str(m)[n - m_len - 1])\n    else:\n        return int(str(m)[n - m_len - p_len - 1])\n\nprint(nthDigit(2, 12345, 987654))\nprint(nthDigit(3, 12345, 987654))\nprint(nthDigit(4, 12345, 987654))\nprint(nthDigit(5, 12345, 987654))\nprint(nthDigit(6, 12345, 987654))\nprint(nthDigit(7, 12345, 987654))\nprint(nthDigit(8, 12345, 987654))\nprint(nthDigit(9, 12345, 987654))\nprint(nthDigit(10, 12345, 987654))\nprint(nthDigit(11, 12345, 987654))\nprint(nthDigit(12, 12345,"
    },
    {
      "rank": 25,
      "score": 9.796923399908213,
      "candidate": "from functools import reduce\nfrom operator import mul, xor\n\n\ndef nth_digit(n, d1, d2):\n    if n == 0:\n        return 0\n\n    def gcd(x, y):\n        while y != 0:\n            x, y = y, x % y\n        return x\n\n    def lcm(x, y):\n        return x * y / gcd(x, y)\n\n    def frac(d, n):\n        return reduce(lcm, range(1, n + 1), 1) / d\n\n    def frac_digit(d, n, i):\n        return int((frac(d, n) * 10 ** i) % 10)\n\n    return frac_digit(d1 * d2, n, n - 1)\n\n\nif __name__ == \"__main__\":\n    print(nth_digit(2, 10, 100))\n    print(nth_digit(3, 10, 100))\n    print(nth_digit(4, 10, 100))\n    print(nth_digit(10, 10, 100))\n    print(nth_digit(100, 10, 100))\n    print(nth_digit(1000, 10, 100))"
    },
    {
      "rank": 26,
      "score": 9.784046737481587,
      "candidate": "from functools import reduce\nfrom operator import mul\nfrom math import log10\n\n\ndef nth_digit(d, m, n):\n    \"\"\"\n    This function returns the nth digit in the proper fraction of two given numbers.\n    :param d: an integer\n    :param m: an integer\n    :param n: an integer\n    :return: an integer\n    \"\"\"\n    if m == 0:\n        return d\n\n    g = gcd(m, n)\n    m = m // g\n    n = n // g\n\n    if m < 0:\n        return nth_digit(-d, -m, -n)\n    elif m == 1:\n        return d\n    elif m > 1:\n        return nth_digit(d, m, n)\n\n\ndef gcd(m, n):\n    \"\"\"\n    This function returns the greatest common divisor of two given numbers.\n    :param m: an integer\n    :param n: an integer\n    :return: an integer\n    \"\"\"\n    return m if n == 0 else gcd(n, m % n)\n\n\ndef nth_digit_v2(d, m, n):\n    \"\"\"\n    This function returns the nth digit in the proper fraction of two given numbers.\n    :param d: an integer\n    :param m: an integer\n    :param n: an integer\n    :return: an integer\n    \"\"\"\n    if m == 0:\n        return d\n\n    g = gcd(m, n)\n    m = m // g\n    n = n // g\n\n    if m < 0:\n        return nth_digit_v2(-d, -m, -n)\n    elif m == 1:\n        return d\n    elif m > 1:\n        return nth_digit_v2(d, m, n)\n\n\ndef nth_digit_v3(d, m, n):\n    \"\"\"\n    This function returns the nth digit in the proper fraction of two given numbers.\n    :param d: an integer\n    :param m: an integer\n    :param n: an integer\n    :return: an integer\n    \"\"\"\n    if m"
    },
    {
      "rank": 27,
      "score": 9.748234743033208,
      "candidate": "from functools import reduce\nfrom math import log10\n\n\ndef nth_digit(n, m, a, b):\n    \"\"\"\n    Finds the nth digit in the proper fraction of two given numbers.\n    :param n: The nth digit to find.\n    :param m: The number of digits in the proper fraction of a and b.\n    :param a: The first number.\n    :param b: The second number.\n    :return: The nth digit of the proper fraction of a and b.\n    \"\"\"\n    if n < 1 or m < 1:\n        raise ValueError(\"n and m must be positive.\")\n\n    if a == b:\n        raise ValueError(\"a and b cannot be equal.\")\n\n    return reduce(lambda x, y: x * 10 + y, map(lambda x: int(x), str(a / b)[m - n - 1]))\n\n\ndef nth_digit_math(n, m, a, b):\n    \"\"\"\n    Finds the nth digit in the proper fraction of two given numbers.\n    :param n: The nth digit to find.\n    :param m: The number of digits in the proper fraction of a and b.\n    :param a: The first number.\n    :param b: The second number.\n    :return: The nth digit of the proper fraction of a and b.\n    \"\"\"\n    if n < 1 or m < 1:\n        raise ValueError(\"n and m must be positive.\")\n\n    if a == b:\n        raise ValueError(\"a and b cannot be equal.\")\n\n    return int(a / b * (10 ** (m - n)) % 10)\n\n\ndef nth_digit_log(n, m, a, b):\n    \"\"\"\n    Finds the nth digit in the proper fraction of two given numbers.\n    :param n: The nth digit to find.\n    :param m: The number of digits in the proper fraction of a and b.\n    :param a: The first number.\n    :param b: The second number.\n    :return: The nth digit of the proper fraction of a and b.\n    \"\"\"\n    if n <"
    },
    {
      "rank": 28,
      "score": 9.641138012775798,
      "candidate": "def nth_digit(n, num_1, num_2):\n    \"\"\"\n    >>> nth_digit(10, 123, 456)\n    6\n    >>> nth_digit(5, 123, 456)\n    5\n    >>> nth_digit(1, 123, 456)\n    3\n    \"\"\"\n    num_1, num_2 = str(num_1), str(num_2)\n    if len(num_1) > len(num_2):\n        num_1, num_2 = num_2, num_1\n\n    digit_num = len(num_1) + len(num_2) - 1\n    if n > digit_num:\n        n -= digit_num\n    return int(num_1[n - 1]) if n <= len(num_1) else int(num_2[n - len(num_1) - 1])\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 29,
      "score": 9.48252465024609,
      "candidate": "def nth_digit(n, d1, d2):\n    if n <= 0:\n        return -1\n    if n == 1:\n        return 0\n    if d1 == d2:\n        return d1\n    return nth_digit(n - 1, d1 // 10, d2 // 10)\n\n\nprint(nth_digit(10, 1234567890, 9876543210))"
    },
    {
      "rank": 30,
      "score": 9.47108795339118,
      "candidate": "def nth_digit(num1, num2, n):\n    return int(str(num1 / num2)[n-1])"
    },
    {
      "rank": 31,
      "score": 9.234050852198141,
      "candidate": "from functools import reduce\n\n\ndef nth_digit(dividend, divisor, n):\n    if n < 1:\n        return None\n\n    quotient, remainder = divmod(dividend, divisor)\n\n    if n == 1:\n        return remainder\n\n    return nth_digit(quotient, divisor, n - 1)\n\n\nif __name__ == \"__main__\":\n    print(nth_digit(12345, 2, 3))"
    },
    {
      "rank": 32,
      "score": 9.21346272767743,
      "candidate": "def nth_digit(n, m, p):\n    digits = str(m/p)\n    return int(digits[len(digits)-n])\n\nprint(nth_digit(10, 1234, 12))"
    },
    {
      "rank": 33,
      "score": 9.205959372648458,
      "candidate": "def nth_digit(num1, num2, nth):\n    \"\"\"\n    This function will find the nth digit in the proper fraction of two given numbers.\n    \"\"\"\n    if nth < 1:\n        return 0\n    digit_count = 1\n    total_num = num1 + num2\n    while total_num // 10**digit_count > 0:\n        digit_count += 1\n    nth_digit = (total_num * nth) // 10**(digit_count - 1)\n    if nth_digit < 10:\n        return nth_digit\n    return (nth_digit - (total_num * nth) // 10**digit_count) + 1\n\n\nif __name__ == \"__main__\":\n    assert nth_digit(3, 5, 3) == 1\n    assert nth_digit(123, 456, 5) == 5\n    assert nth_digit(123, 456, 10) == 3\n    assert nth_digit(123, 456, 11) == 4\n    assert nth_digit(123, 456, 12) == 5\n    assert nth_digit(123, 456, 13) == 6\n    assert nth_digit(123, 456, 14) == 7\n    assert nth_digit(123, 456, 15) == 8\n    assert nth_digit(123, 456, 16) == 9\n    assert nth_digit(123, 456, 17) == 1\n    assert nth_digit(123, 456, 18) == 2\n    assert nth_digit(123, 456, 19) == 3\n    assert nth_digit(123, 456, 20) == 4\n    assert nth_digit(123, 456,"
    },
    {
      "rank": 34,
      "score": 9.177268828905222,
      "candidate": "from functools import reduce\n\n\ndef nth_digit(d, n, m, a):\n    def prod(l):\n        return reduce(lambda a, b: a * b, l)\n\n    def digits(n):\n        while n:\n            yield n % 10\n            n //= 10\n\n    for i in range(1, d + 1):\n        n *= m\n        a *= 10\n    return prod(digits(n)) % a\n\n\nif __name__ == \"__main__\":\n    print(nth_digit(1, 5, 3, 1000))"
    },
    {
      "rank": 35,
      "score": 8.946210893390457,
      "candidate": "def find_nth_digit(n, num_1, num_2):\n    \"\"\"\n    Find the nth digit in the proper fraction of two given numbers.\n\n    >>> find_nth_digit(11, 123, 456)\n    6\n    >>> find_nth_digit(12, 123, 456)\n    5\n    >>> find_nth_digit(13, 123, 456)\n    4\n    >>> find_nth_digit(25, 123, 456)\n    5\n    >>> find_nth_digit(26, 123, 456)\n    6\n    >>> find_nth_digit(27, 123, 456)\n    7\n    >>> find_nth_digit(32, 123, 456)\n    3\n    >>> find_nth_digit(33, 123, 456)\n    4\n    >>> find_nth_digit(49, 123, 456)\n    6\n    >>> find_nth_digit(50, 123, 456)\n    5\n    >>> find_nth_digit(51, 123, 456)\n    6\n    >>> find_nth_digit(52, 123, 456)\n    7\n    >>> find_nth_digit(63, 123, 456)\n    5\n    >>> find_nth_digit(64, 123, 456)\n    6\n    >>> find_nth_digit(65, 123, 456)\n    7\n    >>> find_nth_digit(66, 123, 456)\n    8\n    >>> find_nth_digit(67, 123, 456)\n    9\n    >>> find_nth_digit(77, 123, 456)\n    9\n    >>> find_nth_digit(78, 123, 456)"
    },
    {
      "rank": 36,
      "score": 8.932217008005624,
      "candidate": "def nth_digit(number1, number2, n):\n    decimal1 = str(number1)\n    decimal2 = str(number2)\n    decimal1 = decimal1[::-1]\n    decimal2 = decimal2[::-1]\n    decimal1 = decimal1.replace(\".\", \"\")\n    decimal2 = decimal2.replace(\".\", \"\")\n    decimal1 = decimal1.ljust(len(decimal1) + len(decimal2), \"0\")\n    decimal2 = decimal2.ljust(len(decimal1) + len(decimal2), \"0\")\n    decimal = decimal1 + decimal2\n    return decimal[n - 1]\n\n\nprint(nth_digit(1000, 10000, 10))"
    },
    {
      "rank": 37,
      "score": 8.910084504002544,
      "candidate": "from functools import reduce\n\n\ndef nth_digit(n, m, a, b):\n    \"\"\"\n    >>> nth_digit(1, 2, 1234567890, 1234567890)\n    1\n    >>> nth_digit(1, 3, 1234567890, 1234567890)\n    0\n    >>> nth_digit(1, 2, 1234567890, 1234567891)\n    9\n    >>> nth_digit(2, 3, 1234567890, 1234567891)\n    1\n    >>> nth_digit(5, 2, 1234567890, 1234567891)\n    3\n    >>> nth_digit(6, 3, 1234567890, 1234567891)\n    9\n    >>> nth_digit(7, 3, 1234567890, 1234567891)\n    9\n    >>> nth_digit(8, 3, 1234567890, 1234567891)\n    1\n    >>> nth_digit(11, 3, 1234567890, 1234567891)\n    0\n    >>> nth_digit(12, 3, 1234567890, 1234567891)\n    0\n    >>> nth_digit(13, 3, 1234567890, 1234567891)\n    1\n    >>> nth_digit(14, 3, 1234567890, 1234567891)\n    2"
    },
    {
      "rank": 38,
      "score": 8.85571690049604,
      "candidate": "def nth_digit(n, d1, d2):\n    return int(str(d1/d2)[n-1])\n\n\nif __name__ == \"__main__\":\n    print(nth_digit(3, 1234, 12))"
    },
    {
      "rank": 39,
      "score": 8.850707355641543,
      "candidate": "def nth_digit(n, m, d):\n    \"\"\"\n    This function takes in three arguments:\n        n: the index of the digit we want to find\n        m: the first number\n        d: the second number\n    \"\"\"\n    if n <= 0:\n        print(\"Please enter a positive integer for n\")\n        return None\n    if m <= 0 or d <= 0:\n        print(\"Please enter positive integers for m and d\")\n        return None\n\n    # Get the length of the numbers\n    m_length = len(str(m))\n    d_length = len(str(d))\n\n    # Get the length of the product\n    length = m_length + d_length\n\n    # Get the index of the nth digit\n    index = n - 1\n\n    # If n is greater than length, return None\n    if index >= length:\n        print(\"n is too large\")\n        return None\n\n    # If n is in the range of 0 and m_length, return the nth digit of m\n    if index < m_length:\n        return int(str(m)[index])\n\n    # If n is in the range of m_length and length, return the nth digit of d\n    if index < length - m_length:\n        return int(str(d)[index - m_length])\n\n    # Otherwise, get the nth digit of the product\n    return int(str(m * d)[index])\n\n\nprint(nth_digit(1, 123, 456))"
    },
    {
      "rank": 40,
      "score": 8.8281618090209,
      "candidate": "def nth_digit(n, num1, num2):\n    \"\"\"\n    >>> nth_digit(1, 1234, 1234)\n    1\n    >>> nth_digit(2, 1234, 1234)\n    2\n    >>> nth_digit(3, 1234, 1234)\n    3\n    >>> nth_digit(4, 1234, 1234)\n    4\n    >>> nth_digit(5, 1234, 1234)\n    Traceback (most recent call last):\n        ...\n    ValueError: nth digit is not valid for the given numbers\n    >>> nth_digit(1, 1234, 12345)\n    2\n    >>> nth_digit(2, 1234, 12345)\n    3\n    >>> nth_digit(3, 1234, 12345)\n    4\n    >>> nth_digit(4, 1234, 12345)\n    5\n    >>> nth_digit(5, 1234, 12345)\n    5\n    >>> nth_digit(6, 1234, 12345)\n    Traceback (most recent call last):\n        ...\n    ValueError: nth digit is not valid for the given numbers\n    >>> nth_digit(1, 1234, 123456)\n    2\n    >>> nth_digit(2, 1234, 123456)\n    3\n    >>> nth_digit(3, 1234, 123456)\n    4\n    >>> nth_digit(4, 1234, 123456)\n    5\n    >>> nth_digit(5, 1234, 123456)\n    6\n    >>> nth_digit(6, 1234, 123456)\n    6"
    },
    {
      "rank": 41,
      "score": 8.81367773444215,
      "candidate": "from functools import reduce\n\n\ndef nth_digit(d, n, a, b):\n    \"\"\"\n    d: digit position\n    n: number of digits\n    a: first number\n    b: second number\n    \"\"\"\n    def get_fraction(a, b):\n        return reduce(lambda x, y: str(x) + str(y), range(a, b+1))\n\n    def get_digit(n, d, frac):\n        return int(frac[n - 1]) * (10 ** (d - 1))\n\n    def get_nth_digit(d, n, a, b):\n        frac = get_fraction(a, b)\n        return get_digit(n, d, frac)\n\n    return get_nth_digit(d, n, a, b)\n\n\nprint(nth_digit(1, 2, 1, 2))\nprint(nth_digit(2, 3, 1, 2))\nprint(nth_digit(3, 3, 1, 2))\nprint(nth_digit(1, 3, 1, 2))\nprint(nth_digit(2, 4, 1, 2))\nprint(nth_digit(4, 4, 1, 2))"
    },
    {
      "rank": 42,
      "score": 8.750282588864879,
      "candidate": "def nth_digit(n, m, d):\n    # 1st, find the nth digit in the integer part of m/d\n    n_int = n - 1\n    m_int = m // d\n    while n_int > 0:\n        n_int -= 1\n        m_int //= 10\n    n_int += 1\n\n    # 2nd, find the nth digit in the fractional part of m/d\n    n_frac = n - n_int\n    m_frac = m % d\n    while n_frac > 0:\n        n_frac -= 1\n        m_frac //= 10\n\n    # 3rd, combine the integer and fractional parts\n    return (m_int + m_frac * 1.0/d)\n\n\nprint(nth_digit(1, 20, 10))\nprint(nth_digit(100, 20, 10))\nprint(nth_digit(1000, 20, 10))\nprint(nth_digit(10000, 20, 10))"
    },
    {
      "rank": 43,
      "score": 8.715724466237427,
      "candidate": "def nth_digit(num1, num2, n):\n    s1 = str(num1)\n    s2 = str(num2)\n    s = s1 + s2\n    return s[n - 1]\n\n\nprint(nth_digit(23, 4, 4))\nprint(nth_digit(123, 456, 10))"
    },
    {
      "rank": 44,
      "score": 8.692801520950061,
      "candidate": "from functools import reduce\n\n\ndef nth_digit(n, m, d):\n    \"\"\"\n    :param n: int, The nth digit\n    :param m: int, The number of digits in the fraction\n    :param d: int, The denominator\n    :return: int, The nth digit of m/d\n    \"\"\"\n    if n < 0:\n        return -1\n    if n > m:\n        return -1\n    if n == 0:\n        return 0\n    return reduce(lambda x, y: x * 10 + y,\n                  list(map(lambda x: int(x), str(d * (m - n + 1) // n))))\n\n\nprint(nth_digit(1, 3, 9))\nprint(nth_digit(2, 3, 9))\nprint(nth_digit(3, 3, 9))\nprint(nth_digit(4, 3, 9))\nprint(nth_digit(5, 3, 9))\nprint(nth_digit(6, 3, 9))\nprint(nth_digit(7, 3, 9))\nprint(nth_digit(8, 3, 9))\nprint(nth_digit(9, 3, 9))"
    },
    {
      "rank": 45,
      "score": 8.632293453617281,
      "candidate": "def nth_digit(n, m, a, b):\n    \"\"\"\n    This function takes in four arguments: n, m, a, b.\n    The function returns the nth digit in the proper fraction of a over b.\n    \"\"\"\n    if a < b:\n        a, b = b, a\n    num = a // b\n    rem = a % b\n    if num < 10 ** (n - 1):\n        return rem * 10 ** (n - 1) // b + num\n    else:\n        return rem * 10 ** (n - 1) // b + num * 10 ** (n - 1) // b + (num // 10 ** (n - 1)) % 10\n\n\nprint(nth_digit(4, 1, 2, 3))\nprint(nth_digit(6, 1, 2, 3))\nprint(nth_digit(5, 2, 2, 3))"
    },
    {
      "rank": 46,
      "score": 8.623000730200317,
      "candidate": "from __future__ import annotations\n\n\ndef nth_digit_in_fraction(\n    numerator: int, denominator: int, n: int\n) -> int | float:\n    \"\"\"\n    Find the nth digit in the proper fraction of two given numbers.\n    >>> nth_digit_in_fraction(1, 2, 3)\n    4\n    >>> nth_digit_in_fraction(1, 2, 0)\n    0\n    >>> nth_digit_in_fraction(1, 2, 1)\n    0.5\n    >>> nth_digit_in_fraction(123, 456, 1)\n    1.0\n    >>> nth_digit_in_fraction(123, 456, 2)\n    1.0\n    >>> nth_digit_in_fraction(123, 456, 3)\n    2.0\n    >>> nth_digit_in_fraction(123, 456, 4)\n    3.0\n    >>> nth_digit_in_fraction(123, 456, 5)\n    4.0\n    >>> nth_digit_in_fraction(123, 456, 6)\n    5.0\n    >>> nth_digit_in_fraction(123, 456, 7)\n    5.0\n    >>> nth_digit_in_fraction(123, 456, 8)\n    6.0\n    >>> nth_digit_in_fraction(123, 456, 9)\n    6.0\n    >>> nth_digit_in_fraction(123, 456, 10)\n    6.0\n    >>> nth_digit_in_fraction(123, 456, 11)\n    6.0\n    >>> nth_digit_in_fraction(123, 456, 12)\n    6.0\n    >>> nth_digit_in_fraction("
    },
    {
      "rank": 47,
      "score": 8.616253589228675,
      "candidate": "from functools import reduce\n\n\ndef nth_digit(n, m1, m2):\n    \"\"\"\n    Time complexity: O(log(m1, m2)).\n    Space complexity: O(1).\n    \"\"\"\n    # Find the proper fraction.\n    gcd = reduce(lambda a, b: gcd(a, b), [m1, m2])\n    m1 = m1 / gcd\n    m2 = m2 / gcd\n\n    # Find the nth digit.\n    if m1 < m2:\n        return (m2 % 1) * n\n    else:\n        return ((m1 % 1) + (m2 % 1)) * n\n\n\ndef gcd(m1, m2):\n    if m1 == 0:\n        return m2\n    return gcd(m2 % m1, m1)"
    },
    {
      "rank": 48,
      "score": 8.610076160146226,
      "candidate": "from unittest import TestCase\n\n\ndef nth_digit(number1, number2, n):\n    \"\"\"\n    Find the nth digit in the proper fraction of two given numbers.\n\n    :param number1: int\n    :param number2: int\n    :param n: int\n    :return: int\n    \"\"\"\n    if n < 1:\n        raise ValueError('n should be greater than 0')\n\n    return int(str(number1 / number2)[n - 1])\n\n\nclass TestNthDigit(TestCase):\n\n    def test_nth_digit(self):\n        assert nth_digit(100, 10, 3) == 0\n        assert nth_digit(100, 10, 1) == 1\n        assert nth_digit(100, 10, 2) == 0\n        assert nth_digit(100, 10, 4) == 0\n        assert nth_digit(100, 10, 5) == 0\n        assert nth_digit(100, 10, 6) == 1\n        assert nth_digit(100, 10, 7) == 0\n        assert nth_digit(100, 10, 8) == 0\n        assert nth_digit(100, 10, 9) == 1\n        assert nth_digit(100, 10, 10) == 0\n        assert nth_digit(100, 10, 11) == 0\n        assert nth_digit(100, 10, 12) == 1\n        assert nth_digit(100, 10, 13) == 0\n        assert nth_digit(100, 10, 14) == 0\n        assert nth_digit(100, 10, 15) == 1\n        assert nth_digit(100, 10, 16) == 0\n        assert nth_digit(100"
    },
    {
      "rank": 49,
      "score": 8.606486429141842,
      "candidate": "def nth_digit(n: int, m: int, d: int) -> int:\n    \"\"\"\n    Time Complexity: O(log(n))\n    Space Complexity: O(1)\n    \"\"\"\n\n    while n > 0:\n        m *= 10\n        if n <= m:\n            return int(str(d)[n - 1])\n        n -= m\n\n\nif __name__ == \"__main__\":\n    print(nth_digit(12, 3, 15))"
    },
    {
      "rank": 50,
      "score": 8.60156811074208,
      "candidate": "from functools import reduce\nfrom operator import mul\nfrom math import floor, log10\n\n\ndef nth_digit(n, m, a, b):\n    \"\"\"\n    >>> nth_digit(3, 2, 1234, 5678)\n    '3'\n    >>> nth_digit(1, 4, 1234, 5678)\n    '5'\n    >>> nth_digit(2, 3, 1234, 5678)\n    '6'\n    >>> nth_digit(5, 2, 1234, 5678)\n    '0'\n    >>> nth_digit(5, 4, 1234, 5678)\n    '3'\n    >>> nth_digit(10, 2, 1234, 5678)\n    '4'\n    >>> nth_digit(20, 2, 1234, 5678)\n    '8'\n    >>> nth_digit(20, 4, 1234, 5678)\n    '2'\n    >>> nth_digit(20, 5, 1234, 5678)\n    '0'\n    >>> nth_digit(20, 6, 1234, 5678)\n    '7'\n    >>> nth_digit(20, 7, 1234, 5678)\n    '0'\n    >>> nth_digit(20, 8, 1234, 5678)\n    '8'\n    >>> nth_digit(20, 9, 1234, 5678)\n    '0'\n    >>> nth_digit(20, 10, 1234, 5678)\n    '0'\n    >>> nth_digit(20, 11, 1234, 5678)\n    '0'\n    >>> nth_digit(20"
    },
    {
      "rank": 51,
      "score": 8.53012858503943,
      "candidate": "def proper_fraction(num1, num2, n):\n    # get the quotient and remainder of num1 and num2\n    quotient, remainder = divmod(num1, num2)\n\n    # if the nth digit is in the quotient\n    if n <= len(str(quotient)):\n        return int(str(quotient)[n-1])\n\n    # else the nth digit is in the remainder\n    else:\n        return int(str(remainder)[n-1-len(str(quotient))])\n\nprint(proper_fraction(1234, 34, 3))\nprint(proper_fraction(3456, 56, 4))"
    },
    {
      "rank": 52,
      "score": 8.499905739299377,
      "candidate": "def nth_digit(n, num1, num2):\n    num1 = str(num1)\n    num2 = str(num2)\n    if len(num1) < len(num2):\n        num1, num2 = num2, num1\n    return num1[len(num1) - n]\n\nprint(nth_digit(5, 312, 45))"
    },
    {
      "rank": 53,
      "score": 8.490324832712195,
      "candidate": "def nth_digit(n, a, b):\n    \"\"\"\n    Finding the nth digit in the fraction of two given numbers.\n    \"\"\"\n\n    # find the length of the number\n    length = len(str(a))\n\n    # if nth digit is less than length of the number, it is the nth digit in the number\n    if n <= length:\n        return str(a)[n-1]\n\n    # find the length of the number\n    length = len(str(b))\n\n    # if nth digit is less than length of the number, it is the nth digit in the number\n    if n <= length:\n        return str(b)[n-1]\n\n    # find the length of the number\n    length = len(str(a+b))\n\n    # if nth digit is less than length of the number, it is the nth digit in the number\n    if n <= length:\n        return str(a+b)[n-1]\n\n    # if not, return 0\n    return 0\n\n\nif __name__ == \"__main__\":\n    print(nth_digit(1, 1, 2))\n    print(nth_digit(100, 1, 2))\n    print(nth_digit(100000, 1, 2))"
    },
    {
      "rank": 54,
      "score": 8.478208546788407,
      "candidate": "def nth_digit(n, m, p):\n    n = int(n)\n    m = int(m)\n    p = int(p)\n    s = 0\n    while s <= n:\n        s += m\n        m *= 10\n        p += 1\n    return int(str(m // s)[-1])\n\n\n# print(nth_digit(100, 2, 3))\n# print(nth_digit(2, 3, 100))\nprint(nth_digit(3, 2, 100))"
    },
    {
      "rank": 55,
      "score": 8.437695832075478,
      "candidate": "from functools import reduce\nfrom operator import mul\n\n\ndef nth_digit(n, d1, d2):\n    if n < 0:\n        return -1\n    num1, num2 = d1, d2\n    while num1 != num2:\n        num1, num2 = num1 % 1000000000, num2 % 1000000000\n        if num1 > num2:\n            num1 = int(reduce(mul, map(lambda x: x[0] ** x[1], enumerate((num1 // 10, num2 // 10))), 1))\n        else:\n            num2 = int(reduce(mul, map(lambda x: x[0] ** x[1], enumerate((num2 // 10, num1 // 10))), 1))\n    return (num1 % 10 ** 9) // 10 ** (9 - n % 9)\n\n\nif __name__ == \"__main__\":\n    print(nth_digit(3, 2345, 12345))"
    },
    {
      "rank": 56,
      "score": 8.426531424889468,
      "candidate": "def nth_digit(n, d1, d2):\n    \"\"\"\n    Find the nth digit in the proper fraction of two given numbers.\n\n    :param n: position of the digit to find.\n    :param d1: first number.\n    :param d2: second number.\n    :return: the nth digit in the proper fraction of two given numbers.\n    \"\"\"\n    if n <= 0:\n        raise ValueError('n must be positive.')\n    if d1 < 0 or d2 < 0:\n        raise ValueError('d1 and d2 must be positive.')\n    if d1 == d2:\n        raise ValueError('d1 and d2 must be different.')\n\n    nth_digit_sum = sum(\n        len(str(i)) for i in range(1, d1 + 1) if n > sum(len(str(j)) for j in range(1, i + 1))\n    )\n    if nth_digit_sum > n:\n        nth_digit_sum -= 1\n    return int(str(d1 + d2)[nth_digit_sum])\n\n\nif __name__ == '__main__':\n    print(nth_digit(1, 1, 1))"
    },
    {
      "rank": 57,
      "score": 8.408439383654278,
      "candidate": "from math import log10\n\n\ndef nth_digit(n, m, d):\n    if n > m:\n        return None\n    if d == 0:\n        return None\n    else:\n        return int(log10(n) - log10(m) + 1)\n\n\nprint(nth_digit(10, 100, 1))\nprint(nth_digit(10, 100, 2))\nprint(nth_digit(100, 1000, 2))"
    },
    {
      "rank": 58,
      "score": 8.375312293858853,
      "candidate": "def nth_digit(d, n, a, b):\n    if n == 1:\n        return min(a % 10, b % 10)\n    else:\n        return int(a / 10**(d-1) % 10)\n\n\na, b, n = 2017, 3018, 4\nprint(nth_digit(d=len(str(b)), n=n, a=a, b=b))"
    },
    {
      "rank": 59,
      "score": 8.331556294201176,
      "candidate": "from math import log10\n\n\ndef nth_digit_in_fraction(n, num1, num2):\n    if num1 > num2:\n        num1, num2 = num2, num1\n    n_th_digit_in_fraction = 0\n    count = 0\n    while num1 > 0:\n        count += 1\n        num1 /= 10\n    while num2 > 0:\n        count += 1\n        num2 /= 10\n    if n <= count:\n        n_th_digit_in_fraction = int(num1) * 10 ** (count - n) + int(num2) * 10 ** (count - n)\n        return n_th_digit_in_fraction\n    else:\n        n_th_digit_in_fraction = int(num1) * 10 ** (count - n) + int(num2) * 10 ** (count - n)\n        return n_th_digit_in_fraction\n\n\nprint(nth_digit_in_fraction(5, 234, 123))\nprint(nth_digit_in_fraction(5, 123, 234))\nprint(nth_digit_in_fraction(10, 123, 234))"
    },
    {
      "rank": 60,
      "score": 8.327375965969855,
      "candidate": "def nth_digit(d, n1, n2):\n    # This function takes in the digit d, the first number n1, and the second number n2.\n    # It returns the nth digit in the fraction of n1 and n2.\n    return"
    },
    {
      "rank": 61,
      "score": 8.327367757082776,
      "candidate": "from functools import reduce\n\n\ndef nth_digit(n, m, a, b):\n    # Find the number of digits of a and b\n    a_digits = len(str(a))\n    b_digits = len(str(b))\n\n    # Find the index of the nth digit\n    nth_digit_index = n - 1\n\n    # Find the number of digits before the nth digit\n    nth_digit_before = nth_digit_index - a_digits\n\n    # If nth digit is before a\n    if nth_digit_before < 0:\n        # Find the digit of a\n        return int(str(a)[nth_digit_index])\n\n    # Find the number of digits before the nth digit\n    nth_digit_before = nth_digit_index - b_digits\n\n    # If nth digit is before b\n    if nth_digit_before < 0:\n        # Find the digit of b\n        return int(str(b)[nth_digit_index])\n\n    # Find the number of digits before the nth digit\n    nth_digit_before = nth_digit_index - a_digits - b_digits\n\n    # If nth digit is between a and b\n    if nth_digit_before < 0:\n        # Find the digit of a\n        return int(str(a)[nth_digit_index])\n\n    # If the nth digit is after a and b\n    if nth_digit_before >= 0:\n        # Find the digit of b\n        return int(str(b)[nth_digit_index])\n\n\ndef nth_digit_eff(n, m, a, b):\n    # Find the number of digits of a and b\n    a_digits = len(str(a))\n    b_digits = len(str(b))\n\n    # Find the index of the nth digit\n    nth_digit_index = n - 1\n\n    # Find the number of digits before the nth digit\n    nth_digit_before = nth_digit_index - a_digits\n\n    # If nth digit is before"
    },
    {
      "rank": 62,
      "score": 8.294940769211511,
      "candidate": "def nth_digit(num1, num2, n):\n    if n <= 0:\n        return 0\n\n    digit_sum = 0\n    count = 1\n\n    while n > 0:\n        digit_sum += int(str(num1 / num2 ** count)[-1])\n        count += 1\n        n -= 1\n\n    return digit_sum % 10\n\n\nprint(nth_digit(100, 9, 5))\nprint(nth_digit(100, 9, 6))\nprint(nth_digit(100, 9, 7))\nprint(nth_digit(100, 9, 8))\nprint(nth_digit(100, 9, 9))\nprint(nth_digit(100, 9, 10))\nprint(nth_digit(100, 9, 11))\nprint(nth_digit(100, 9, 12))\nprint(nth_digit(100, 9, 13))\nprint(nth_digit(100, 9, 14))\nprint(nth_digit(100, 9, 15))\nprint(nth_digit(100, 9, 16))\nprint(nth_digit(100, 9, 17))\nprint(nth_digit(100, 9, 18))\nprint(nth_digit(100, 9, 19))\nprint(nth_digit(100, 9, 20))"
    },
    {
      "rank": 63,
      "score": 8.289838256518838,
      "candidate": "from functools import reduce\n\n\ndef get_nth_digit(number_1, number_2, n):\n    \"\"\"\n    This function will return the nth digit of the proper fraction of number_1 and number_2\n    >>> get_nth_digit(1, 2, 1)\n    2\n    >>> get_nth_digit(123, 456, 2)\n    3\n    >>> get_nth_digit(123, 456, 5)\n    5\n    >>> get_nth_digit(123, 456, 10)\n    3\n    >>> get_nth_digit(123, 456, 11)\n    5\n    >>> get_nth_digit(123, 456, 12)\n    6\n    >>> get_nth_digit(123, 456, 13)\n    6\n    >>> get_nth_digit(123, 456, 20)\n    6\n    >>> get_nth_digit(123, 456, 21)\n    6\n    >>> get_nth_digit(123, 456, 22)\n    6\n    >>> get_nth_digit(123, 456, 23)\n    6\n    >>> get_nth_digit(123, 456, 24)\n    6\n    >>> get_nth_digit(123, 456, 30)\n    6\n    >>> get_nth_digit(123, 456, 31)\n    6\n    >>> get_nth_digit(123, 456, 32)\n    6\n    >>> get_nth_digit(123, 456, 33)\n    6\n    >>> get_nth_digit(123, 456, 34)\n    6\n    >>> get_nth_digit(123, 456, 40)\n    6\n    >>> get_nth_digit(123, 456,"
    },
    {
      "rank": 64,
      "score": 8.214125058964552,
      "candidate": "def nth_digit(num1, num2, n):\n    if n < 1:\n        return None\n\n    if n == 1:\n        return (num1 % 10, num2 % 10)\n\n    # Find the number of digits in the sum of two numbers\n    sum_length = len(str(num1 + num2))\n\n    if n <= sum_length:\n        # Find the proper fraction\n        proper_fraction = str(num1 + num2)[-n:]\n\n        # Find the nth digit\n        nth_digit = proper_fraction[-1]\n\n        return int(nth_digit), int(nth_digit)\n\n    else:\n        # Find the proper fraction\n        proper_fraction = str(num1 + num2)[-sum_length:]\n\n        # Find the nth digit\n        nth_digit = proper_fraction[-1]\n\n        # Find the nth digit\n        nth_digit = proper_fraction[-1]\n\n        return int(nth_digit), int(nth_digit)\n\n\nprint(nth_digit(123, 456, 10))\nprint(nth_digit(56, 78, 10))\nprint(nth_digit(56, 78, 20))\nprint(nth_digit(56, 78, 21))\nprint(nth_digit(56, 78, 30))\nprint(nth_digit(56, 78, 31))\nprint(nth_digit(56, 78, 32))\nprint(nth_digit(56, 78, 40))\nprint(nth_digit(56, 78, 41))\nprint(nth_digit(56, 78, 42))\nprint(nth_digit(56, 78, 50))\nprint(nth_digit(56, 78, 51))\nprint(nth_digit(56, 78, 52))\nprint(nth_digit(56, 78, 60))\nprint"
    },
    {
      "rank": 65,
      "score": 8.211579567659316,
      "candidate": "def nth_digit(n, num1, num2):\n    \"\"\"\n    Find the nth digit in the proper fraction of two given numbers.\n    Args:\n        n (int): The position of the digit\n        num1 (int): The first number\n        num2 (int): The second number\n    Returns:\n        int: The nth digit\n    \"\"\"\n    if n < 0:\n        raise ValueError(\"n must be greater or equal to 0\")\n    if num1 < 0 or num2 < 0:\n        raise ValueError(\"numbers must be positive\")\n    return int(str(num1 / num2)[n - 1])"
    },
    {
      "rank": 66,
      "score": 8.209707251476969,
      "candidate": "def nth_digit(num1, num2, n):\n    num1, num2, n = int(num1), int(num2), int(n)\n    decimal = num1 / num2\n    if decimal < 1:\n        return 0\n    return str(decimal)[n-1]\n\nif __name__ == \"__main__\":\n    print(nth_digit(123, 456, 2))"
    },
    {
      "rank": 67,
      "score": 8.2048573255218,
      "candidate": "from __future__ import annotations\n\n\ndef nth_digit_in_fraction(dividend: int, divisor: int, n: int) -> int:\n    \"\"\"\n    >>> nth_digit_in_fraction(123, 456, 3)\n    2\n    >>> nth_digit_in_fraction(123, 456, 10)\n    1\n    >>> nth_digit_in_fraction(123, 456, 20)\n    3\n    >>> nth_digit_in_fraction(123, 456, 30)\n    0\n    >>> nth_digit_in_fraction(123, 456, 100)\n    2\n    >>> nth_digit_in_fraction(123, 456, 200)\n    3\n    >>> nth_digit_in_fraction(123, 456, 300)\n    1\n    >>> nth_digit_in_fraction(123, 456, 1000)\n    2\n    >>> nth_digit_in_fraction(123, 456, 2000)\n    3\n    >>> nth_digit_in_fraction(123, 456, 3000)\n    0\n    >>> nth_digit_in_fraction(123, 456, 4000)\n    1\n    >>> nth_digit_in_fraction(123, 456, 5000)\n    2\n    >>> nth_digit_in_fraction(123, 456, 6000)\n    3\n    >>> nth_digit_in_fraction(123, 456, 7000)\n    1\n    >>> nth_digit_in_fraction(123, 456, 8000)\n    2\n    >>> nth_digit_in_fraction(123,"
    },
    {
      "rank": 68,
      "score": 8.185309335307622,
      "candidate": "def nth_digit(a, b, n):\n    if a < b:\n        a, b = b, a\n    if n <= 0:\n        return None\n    if a == b:\n        return a % 10\n    else:\n        return int(a / (b * 10 ** (n - 1))) * 10 + nth_digit(a % b, b, n - 1)\n\n\nprint(nth_digit(123456789, 1000, 4))"
    },
    {
      "rank": 69,
      "score": 8.163300679823958,
      "candidate": "def nth_digit(d, n):\n    num1 = int(input(\"Enter the first number: \"))\n    num2 = int(input(\"Enter the second number: \"))\n\n    if d == 1:\n        if num1 < num2:\n            return 0\n        else:\n            return 1\n    else:\n        if num1 < num2:\n            return 1\n        else:\n            return 0\n\n\nprint(nth_digit(3, 5))"
    },
    {
      "rank": 70,
      "score": 8.121884567141883,
      "candidate": "from __future__ import annotations\n\n\ndef nth_digit_of_fraction(\n    first_number: int, second_number: int, nth_digit: int\n) -> int:\n    \"\"\"\n    >>> nth_digit_of_fraction(123, 456, 3)\n    0\n    >>> nth_digit_of_fraction(5, 10, 2)\n    1\n    >>> nth_digit_of_fraction(5, 10, 3)\n    2\n    >>> nth_digit_of_fraction(5, 10, 4)\n    5\n    >>> nth_digit_of_fraction(5, 10, 5)\n    6\n    >>> nth_digit_of_fraction(5, 10, 6)\n    7\n    >>> nth_digit_of_fraction(5, 10, 7)\n    8\n    >>> nth_digit_of_fraction(5, 10, 8)\n    9\n    >>> nth_digit_of_fraction(5, 10, 9)\n    0\n    >>> nth_digit_of_fraction(5, 10, 10)\n    1\n    >>> nth_digit_of_fraction(5, 10, 11)\n    2\n    >>> nth_digit_of_fraction(5, 10, 12)\n    3\n    >>> nth_digit_of_fraction(5, 10, 13)\n    4\n    >>> nth_digit_of_fraction(5, 10, 14)\n    5\n    >>> nth_digit_of_fraction(5, 10, 15)\n    6\n    >>> nth_digit_of_fraction(5, 10, 16)\n    7\n    >>> nth_digit_of_fraction(5, 10, 17)\n    8\n    >>> nth_digit_of_fraction(5, 10, 18)\n    9"
    },
    {
      "rank": 71,
      "score": 7.990432406683839,
      "candidate": "def nth_digit(n, d1, d2):\n    # Calculate the length of the digits of n1 and n2\n    len_d1 = len(str(d1))\n    len_d2 = len(str(d2))\n    # Calculate the position of nth digit\n    n -= 1\n    # Calculate the position of nth digit in the fraction\n    pos = len_d1 + len_d2 - 1 - n\n    # If nth digit is in the first number\n    if pos < len_d1:\n        return str(d1)[pos]\n    # If nth digit is in the second number\n    else:\n        # Calculate the position of nth digit in the fraction\n        pos -= len_d1\n        return str(d2)[pos]\n\n\nprint(nth_digit(1, 2, 3))\nprint(nth_digit(3, 2, 3))\nprint(nth_digit(11, 22, 33))"
    },
    {
      "rank": 72,
      "score": 7.938028884277233,
      "candidate": "from math import log10\n\n\ndef nth_digit(n, d1, d2):\n    return int(log10(d1)) + n - int(log10(d2))\n\n\nif __name__ == \"__main__\":\n    print(nth_digit(3, 5, 1))"
    },
    {
      "rank": 73,
      "score": 7.915588979966494,
      "candidate": "def nth_digit(n, d1, d2):\n    # Calculate the number of digits of the sum of the numbers\n    # and the length of the fraction\n    length = len(str(d1 + d2))\n\n    # Calculate the index of the nth digit\n    index = length - n\n\n    # Calculate the sum of the numbers\n    sum_of_numbers = d1 + d2\n\n    # Calculate the length of the fraction\n    fraction_length = len(str(sum_of_numbers))\n\n    # Calculate the index of the first digit of the fraction\n    first_digit_index = fraction_length - length\n\n    # Calculate the nth digit\n    nth_digit = int(str(sum_of_numbers)[first_digit_index + index - 1])\n\n    # Return the nth digit\n    return nth_digit"
    },
    {
      "rank": 74,
      "score": 7.8912769574414305,
      "candidate": "def nth_digit(num1, num2, n):\n    \"\"\"\n    num1: positive integer 1\n    num2: positive integer 2\n    n: positive integer, the nth digit\n    return: the nth digit in the decimal fraction of num1 and num2\n    \"\"\"\n    if num1 < 0 or num2 < 0 or n < 0:\n        return \"Invalid input, input must be positive\"\n\n    if num1 == 0 or num2 == 0:\n        return \"Invalid input, input must not be zero\"\n\n    # convert the number to string\n    str1 = str(num1)\n    str2 = str(num2)\n\n    # get the length of the two numbers\n    str1_len = len(str1)\n    str2_len = len(str2)\n\n    # get the value of the nth digit\n    if n <= str1_len:\n        return str1[n - 1]\n    elif n > str1_len and n <= str1_len + str2_len:\n        return str2[n - str1_len - 1]\n    else:\n        return \"Invalid input, n is larger than the total digits\"\n\nprint(nth_digit(123, 45, 5))\nprint(nth_digit(1234, 56, 2))\nprint(nth_digit(1234, 56, 20))\nprint(nth_digit(1234, 56, 1))\nprint(nth_digit(1234, 56, 0))\nprint(nth_digit(1234, 56, -1))\nprint(nth_digit(1234, 56, -10))\nprint(nth_digit(1234, 56, 10))\nprint(nth_digit(1234, 56, 100))\nprint(nth_digit(1234, 56, 1000))\nprint(nth_digit(1234, 56, 10000))\nprint(nth_digit(0"
    },
    {
      "rank": 75,
      "score": 7.868947655733293,
      "candidate": "def nth_digit(n, num1, num2):\n    total_digits = len(str(num1)) + len(str(num2))\n    digit_to_find = total_digits - n\n    num1_digits = len(str(num1))\n    num2_digits = len(str(num2))\n    if num1_digits > num2_digits:\n        num1, num2 = num2, num1\n        num1_digits, num2_digits = num2_digits, num1_digits\n    if digit_to_find <= num1_digits:\n        return int(str(num1)[digit_to_find - 1])\n    else:\n        return int(str(num1)[digit_to_find - num1_digits - 1] + str(num2)[digit_to_find - num1_digits - 1])\n\nprint(nth_digit(100, 2, 100))"
    },
    {
      "rank": 76,
      "score": 7.834022619458933,
      "candidate": "def nth_digit(num1, num2, n):\n    sum_of_num = num1 + num2\n    length = len(str(sum_of_num))\n\n    if length >= n:\n        return int(str(sum_of_num)[n - 1])\n    else:\n        return -1\n\n\nprint(nth_digit(2, 1, 3))"
    },
    {
      "rank": 77,
      "score": 7.780351419995229,
      "candidate": "def nth_digit(n, m, p):\n    \"\"\"\n    Time Complexity: O(log(n))\n    Space Complexity: O(1)\n    \"\"\"\n    i = 1\n    while i < n:\n        p += 1\n        i = (m + 1) * p\n    n = i - p\n    m = m + 1\n    if n > 0:\n        i = m\n        while n > 0:\n            i = i * 10\n            n = n - 1\n        i = i // 10\n        n = p\n        while i > 0:\n            n = n * 10\n            i = i - 1\n        i = n // 10\n        n = (m * n) + i\n    else:\n        n = (m * p) + n\n    return n % 10"
    },
    {
      "rank": 78,
      "score": 7.738292593776799,
      "candidate": "def nth_digit(number1, number2, n):\n    number = number1 / number2\n    number = str(number)\n    return int(number[n - 1])\n\n\nprint(nth_digit(1234, 1234, 4))"
    },
    {
      "rank": 79,
      "score": 7.7320703513377165,
      "candidate": "def nthDigit(n, m1, m2):\n    if n < 1:\n        return 0\n    else:\n        n -= 1\n    for i in range(1, m2 + 1):\n        if n < i * m1 / m2:\n            return (i - 1) % 10\n    return (m1 - 1) % 10\n\nprint(nthDigit(10, 2, 3))\nprint(nthDigit(22, 3, 4))\nprint(nthDigit(22, 4, 3))"
    },
    {
      "rank": 80,
      "score": 7.705183449260731,
      "candidate": "from functools import reduce\nfrom math import floor\n\n\ndef nth_digit(n, m, a, b):\n    if n < 0:\n        return -1\n    if a == b:\n        return a % 10\n    return int(reduce(lambda x, y: x + y, [floor(10 ** i) for i in range(m - 1, m - n - 1, -1)], 0) *\n               (a % 10 ** m - b % 10 ** m) // (10 ** m - 1))"
    },
    {
      "rank": 81,
      "score": 7.4878043221155455,
      "candidate": "def nth_digit(num1, num2, n):\n    # get the sum of both numbers\n    sum_of_nums = num1 + num2\n    # get the integer of the sum\n    int_of_sum = int(sum_of_nums)\n    # get the nth digit\n    nth_digit = int_of_sum // (10 ** (n - 1))\n    # get the remainder of the sum\n    rem = int_of_sum % (10 ** (n - 1))\n    # if the remainder is less than the nth digit, then the nth digit is the remainder\n    if rem < nth_digit:\n        return rem\n    # else, return the nth digit\n    else:\n        return nth_digit\n\nprint(nth_digit(123, 456, 2))\nprint(nth_digit(123, 456, 3))\nprint(nth_digit(123, 456, 4))\nprint(nth_digit(123, 456, 5))\nprint(nth_digit(123, 456, 6))\nprint(nth_digit(123, 456, 7))"
    },
    {
      "rank": 82,
      "score": 7.464609382504557,
      "candidate": "from functools import reduce\n\n\ndef proper_fraction(n: int, d: int) -> str:\n    \"\"\"\n    Return the nth digit in the proper fraction of two given numbers.\n    >>> proper_fraction(10, 3)\n    '1'\n    >>> proper_fraction(5, 3)\n    '2'\n    >>> proper_fraction(15, 12)\n    '0'\n    >>> proper_fraction(12, 12)\n    '6'\n    >>> proper_fraction(3, 4)\n    '1'\n    >>> proper_fraction(3, 7)\n    '0'\n    >>> proper_fraction(10, 2)\n    '4'\n    >>> proper_fraction(12, 3)\n    '0'\n    >>> proper_fraction(13, 5)\n    '1'\n    >>> proper_fraction(14, 12)\n    '1'\n    >>> proper_fraction(15, 13)\n    '0'\n    >>> proper_fraction(15, 14)\n    '1'\n    >>> proper_fraction(16, 15)\n    '0'\n    >>> proper_fraction(17, 15)\n    '1'\n    >>> proper_fraction(18, 15)\n    '1'\n    >>> proper_fraction(19, 15)\n    '1'\n    >>> proper_fraction(20, 15)\n    '1'\n    >>> proper_fraction(21, 15)\n    '2'\n    >>> proper_fraction(22, 15)\n    '1'\n    >>> proper_fraction(23, 15)\n    '1'\n    >>> proper_fraction(24, 15)\n    '1'\n    >>> proper_fraction(25, 15)\n    '1'\n    >>> proper_fraction(26, 15)\n    '1'\n    >>> proper_fraction(27, 15)"
    },
    {
      "rank": 83,
      "score": 7.4506599871439985,
      "candidate": "from functools import reduce\n\n\ndef nth_digit(n, m, a, b):\n    if n < 0:\n        return -1\n    if n == 0:\n        return 0\n    return reduce(lambda x, y: x * 10 + y,\n                  [int(x) for x in str(m / a ** n + b)][-1:])\n\n\nif __name__ == '__main__':\n    print(nth_digit(2, 1234, 2, 3))"
    },
    {
      "rank": 84,
      "score": 7.134571892399572,
      "candidate": "def nth_digit(n, num1, num2):\n    sum_of_nums = num1 + num2\n    nth_digit = int(str(sum_of_nums)[n-1])\n    return nth_digit\n\n\nif __name__ == \"__main__\":\n    print(nth_digit(1, 1, 2))\n    print(nth_digit(3, 1, 2))\n    print(nth_digit(10, 1, 2))\n    print(nth_digit(100, 1, 2))"
    },
    {
      "rank": 85,
      "score": 3.0,
      "candidate": "def nth_digit(n, m, d):\n    return (\n        int(str(d / m)[n - 1])\n        if m >= n\n        else (\n            str(d)[n - 1 - m]\n            if d >= 10 ** (n - 1)\n            else str(10 ** (n - 1) - 1)[-1] + str(d)\n        )\n    )\n\n\ndef main():\n    n, m, d = map(int, input().split())\n    print(nth_digit(n, m, d))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 86,
      "score": 3.0,
      "candidate": "from functools import reduce\n\n\ndef nth_digit(d, n):\n    def helper(n, x):\n        return n // x\n\n    def helper1(n, x):\n        return n % x\n\n    def helper2(x, y):\n        return x * 10 + y\n\n    return reduce(helper2,\n                  reduce(helper1,\n                         range(helper(n, d),\n                               d),\n                         range(0, d)),\n                  range(0, 10))[n - 1]\n\n\nif __name__ == '__main__':\n    print(nth_digit(100, 1))"
    },
    {
      "rank": 87,
      "score": 3.0,
      "candidate": "from functools import reduce\n\n\ndef nth_digit(num1, num2, n):\n    \"\"\"\n    >>> nth_digit(10, 3, 4)\n    1\n    >>> nth_digit(56, 12, 3)\n    1\n    >>> nth_digit(3, 12, 1)\n    3\n    >>> nth_digit(3, 12, 2)\n    7\n    \"\"\"\n    num1_len = len(str(num1))\n    num2_len = len(str(num2))\n    if num1_len >= num2_len:\n        return int(str(num1)[n - 1])\n    else:\n        return int(str(num2)[n - 1 - num1_len])\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 88,
      "score": 3.0,
      "candidate": "def nth_digit(n, m, a, b):\n    if n == 0:\n        return 0\n    if n > a + b:\n        return 0\n    if n <= a:\n        return a % 10\n    if n <= a + b:\n        return b % 10\n\n\ndef main():\n    n = int(input(\"Enter n: \"))\n    m = int(input(\"Enter m: \"))\n    a = int(input(\"Enter a: \"))\n    b = int(input(\"Enter b: \"))\n    print(nth_digit(n, m, a, b))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 89,
      "score": 3.0,
      "candidate": "def find_nth_digit(number1, number2, n):\n    \"\"\"\n    >>> find_nth_digit(123, 456, 2)\n    3\n    >>> find_nth_digit(567, 890, 3)\n    8\n    >>> find_nth_digit(123, 456, 10)\n    5\n    >>> find_nth_digit(123, 456, 11)\n    6\n    >>> find_nth_digit(123, 456, 12)\n    6\n    >>> find_nth_digit(123, 456, 13)\n    7\n    >>> find_nth_digit(123, 456, 20)\n    5\n    >>> find_nth_digit(123, 456, 21)\n    6\n    >>> find_nth_digit(123, 456, 22)\n    7\n    >>> find_nth_digit(123, 456, 23)\n    8\n    >>> find_nth_digit(123, 456, 30)\n    5\n    >>> find_nth_digit(123, 456, 31)\n    6\n    >>> find_nth_digit(123, 456, 32)\n    7\n    >>> find_nth_digit(123, 456, 33)\n    8\n    >>> find_nth_digit(123, 456, 40)\n    5\n    >>> find_nth_digit(123, 456, 41)\n    6\n    >>> find_nth_digit(123, 456, 42)\n    7\n    >>> find_nth_digit(123, 456, 43)\n    8\n    \"\"\"\n    n = n - 1\n    a, b = min(number1, number2), max(number1, number2)\n    d = int(a % (b +"
    },
    {
      "rank": 90,
      "score": 3.0,
      "candidate": "def nth_digit(d, n, a, b):\n    if d == 0:\n        return 0\n\n    if n == 1:\n        return a % 10\n\n    if d == 1:\n        return a // 10\n\n    if n == 2:\n        return b % 10\n\n    if d == 2:\n        return b // 10\n\n    if n > 2:\n        return nth_digit(d - 1, n - 2, a % 10, b % 10)\n\n\ndef main():\n    a = 12345\n    b = 56789\n    n = 4\n    d = 2\n    print(nth_digit(d, n, a, b))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 91,
      "score": 3.0,
      "candidate": "def nth_digit(n, m, p):\n    # nth digit in the proper fraction of two given numbers\n    # n - nth digit\n    # m - given number\n    # p - given number\n    # return - nth digit in the proper fraction of two given numbers\n\n    # check if nth digit is positive\n    if n > 0:\n        # find the nth digit in the proper fraction of two given numbers\n        # 1st digit of m/p\n        if m > p:\n            # find the nth digit in the proper fraction of two given numbers\n            # nth digit of m/p\n            return int((m / p) * n)\n        # 1st digit of m/p\n        else:\n            # find the nth digit in the proper fraction of two given numbers\n            # nth digit of p/m\n            return int((p / m) * n)\n    # return 0 if nth digit is negative\n    else:\n        return 0\n\n\ndef main():\n    # take the user input\n    n = int(input(\"Enter the nth digit: \"))\n    m = int(input(\"Enter the 1st number: \"))\n    p = int(input(\"Enter the 2nd number: \"))\n    # print the nth digit in the proper fraction of two given numbers\n    print(\n        f\"nth digit in the proper fraction of two given numbers is {nth_digit(n, m, p)}\"\n    )\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 92,
      "score": 3.0,
      "candidate": "def nth_digit(n, num1, num2):\n    num1_frac = num1 / 10 ** (n - 1)\n    num2_frac = num2 / 10 ** (n - 1)\n    if num1_frac > num2_frac:\n        return 1\n    elif num1_frac < num2_frac:\n        return 0\n    else:\n        return 1 if num1 % 10 > num2 % 10 else 0\n\n\nif __name__ == \"__main__\":\n    n, num1, num2 = [int(x) for x in input().split(\" \")]\n    print(nth_digit(n, num1, num2))"
    },
    {
      "rank": 93,
      "score": 3.0,
      "candidate": "from math import log10\n\n\ndef nth_digit(num1, num2, n):\n    \"\"\"\n    :param num1: int\n    :param num2: int\n    :param n: int\n    :return: int\n    \"\"\"\n    if num1 < num2:\n        raise ValueError(\"num1 should be greater than num2\")\n    if n < 0:\n        raise ValueError(\"n should be greater than 0\")\n    if n == 0:\n        return 0\n\n    # finding the proper fraction of two numbers\n    proper_fraction = num1 / num2\n    if proper_fraction > 1:\n        proper_fraction = 1 / proper_fraction\n\n    # finding the length of the proper fraction\n    proper_fraction_length = int(log10(proper_fraction))\n\n    # finding the number of digits of the numerator and denominator\n    num1_length = int(log10(num1)) + 1\n    num2_length = int(log10(num2)) + 1\n\n    # finding the length of the numerator\n    if num1_length < num2_length:\n        num1_length = num2_length\n\n    # finding the length of the denominator\n    if num2_length < num1_length:\n        num2_length = num1_length\n\n    # finding the nth digit\n    nth_digit_index = n - proper_fraction_length\n    if nth_digit_index < 0:\n        nth_digit_index = 0\n\n    if nth_digit_index >= num1_length:\n        return 0\n\n    return int(str(num1)[nth_digit_index])\n\n\nif __name__ == \"__main__\":\n    assert nth_digit(2, 3, 1) == 2\n    assert nth_digit(5, 2, 1) == 5\n    assert nth_digit(123, 45, 2) == 3\n    assert nth_digit(123, 45, 3) == 1\n    assert nth_digit("
    },
    {
      "rank": 94,
      "score": 3.0,
      "candidate": "from functools import reduce\n\n\ndef nth_digit(num1, num2, n):\n    \"\"\"\n    >>> nth_digit(1234, 4321, 5)\n    4\n    >>> nth_digit(1234, 4321, 1)\n    3\n    >>> nth_digit(1234, 4321, 2)\n    2\n    \"\"\"\n    total_length = len(str(num1)) + len(str(num2))\n    if n > total_length:\n        return None\n\n    def _helper(index, num):\n        if index < n:\n            return _helper(index + 1, num * 10)\n        return num // (10 ** (index - n)) % 10\n\n    return _helper(0, reduce(lambda x, y: x * y, num1, 1)) % 10 * reduce(\n        lambda x, y: x * y, num2, 1\n    ) % 10\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 95,
      "score": 3.0,
      "candidate": "def find_nth_digit(d, num1, num2):\n    # Base case\n    if d == 0:\n        return 0\n    # Find the proper fraction\n    fraction = num1 / num2\n    # Find the number of digits in the integer part\n    num_digits = len(str(int(fraction)))\n    # Find the number of digits in the fractional part\n    num_fraction_digits = len(str(fraction - int(fraction)))\n    # Find the number of digits to be searched\n    num_digits_to_search = num_digits + num_fraction_digits\n    # Find the nth digit\n    if num_digits_to_search >= d:\n        # If the number of digits to be searched is greater than d, the nth digit is in the integer part\n        if num_digits >= d:\n            # Find the index of the digit in the integer part\n            index = d - 1\n        else:\n            # Find the index of the digit in the fractional part\n            index = d - num_digits\n        # Find the nth digit\n        return int(str(fraction)[index])\n    else:\n        # If the number of digits to be searched is less than d, the nth digit is in the fractional part\n        # Find the index of the digit in the fractional part\n        index = d - num_digits_to_search\n        # Find the nth digit\n        return int(str(fraction - int(fraction))[index - 1])\n\n\nif __name__ == \"__main__\":\n    assert find_nth_digit(3, 1234, 5678) == 2\n    assert find_nth_digit(11, 123, 234) == 2"
    },
    {
      "rank": 96,
      "score": 3.0,
      "candidate": "from functools import reduce\nfrom math import factorial\nfrom typing import List\n\n\ndef nth_digit_in_fraction(first: int, second: int, nth: int) -> int:\n    \"\"\"\n    >>> nth_digit_in_fraction(13, 7, 4)\n    1\n    >>> nth_digit_in_fraction(5, 2, 100)\n    5\n    >>> nth_digit_in_fraction(1, 5, 2)\n    -1\n    \"\"\"\n    if nth < 1:\n        return -1\n    first_num, second_num = min(first, second), max(first, second)\n    count = len(str(second_num)) - 1\n    if nth > count:\n        return nth_digit_in_fraction(first, second, nth - count)\n    first_num_factorial = factorial(first_num)\n    second_num_factorial = factorial(second_num)\n    nth_factorial = factorial(nth)\n    first_num_factorial_divided_by_second_num = first_num_factorial // second_num_factorial\n    first_num_factorial_divided_by_second_num_mod_nth = first_num_factorial_divided_by_second_num % nth_factorial\n    first_num_factorial_divided_by_second_num_mod_nth_str = str(first_num_factorial_divided_by_second_num_mod_nth)\n    return int(first_num_factorial_divided_by_second_num_mod_nth_str[-1])\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 97,
      "score": 3.0,
      "candidate": "def nth_digit_in_fraction(number1, number2, n):\n    \"\"\"\n    >>> nth_digit_in_fraction(123, 456, 3)\n    2\n    >>> nth_digit_in_fraction(2, 10, 3)\n    2\n    >>> nth_digit_in_fraction(1, 10, 3)\n    1\n    >>> nth_digit_in_fraction(1, 10, 2)\n    9\n    >>> nth_digit_in_fraction(1, 10, 1)\n    9\n    >>> nth_digit_in_fraction(1, 10, 0)\n    0\n    \"\"\"\n    number1_length = len(str(number1))\n    number2_length = len(str(number2))\n    length = max(number1_length, number2_length)\n\n    if n < length:\n        return int(str(number1)[n - 1])\n\n    if n >= length:\n        n = n - length\n\n        if n < number2_length:\n            return int(str(number2)[n - 1])\n\n        if n >= number2_length:\n            n = n - number2_length\n            return int(str(number2)[number2_length - 1]) + n\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 98,
      "score": 3.0,
      "candidate": "from functools import reduce\nfrom math import log10\n\n\ndef nth_digit(number1, number2, n):\n    \"\"\"\n    This function takes in two numbers and a nth digit to find.\n    It will return the nth digit of the proper fraction of number1/number2.\n    >>> nth_digit(234, 456, 3)\n    '2'\n    >>> nth_digit(234, 456, 1)\n    '7'\n    >>> nth_digit(234, 456, 0)\n    '4'\n    \"\"\"\n    # 1. Find the length of the two numbers\n    length1 = len(str(number1))\n    length2 = len(str(number2))\n\n    # 2. Find the length of the proper fraction\n    length_fraction = length1 + length2\n\n    # 3. Find the nth digit\n    if n <= length_fraction:\n        # 3a. Find the position of the nth digit\n        position = length_fraction - n\n\n        # 3b. Find the length of the proper fraction before the nth digit\n        length_fraction_before = length_fraction - position\n\n        # 3c. Find the length of the proper fraction after the nth digit\n        length_fraction_after = n\n\n        # 3d. Find the position of the nth digit in the proper fraction\n        position_in_fraction = length_fraction_before - 1\n\n        # 3e. Find the position of the nth digit in the proper fraction\n        #     after the nth digit\n        position_in_fraction_after = length_fraction_before\n\n        # 3f. Find the first number before the nth digit\n        number_before = int(number1 / 10 ** (length_fraction_before - 1))\n\n        # 3g. Find the second number before the nth digit\n        number_after = int(number2 / 10 ** (length_fraction_after - 1))\n\n        # 3h. Find the proper fraction\n        proper_fraction = ("
    },
    {
      "rank": 99,
      "score": 3.0,
      "candidate": "def find_nth_digit(d, n):\n    if d == 0:\n        return 0\n\n    # To find the number of digits in a number\n    def number_of_digits(num):\n        return int(1 + log10(num))\n\n    # To find the nth digit in a number\n    def find_nth_digit_in_num(num, n):\n        return int(num / (10**(n-1)) % 10)\n\n    # To find the nth digit in a fraction\n    def find_nth_digit_in_fraction(d, n):\n        # Calculate the number of digits in the numerator and denominator\n        num_of_digits_in_numerator = number_of_digits(d[0])\n        num_of_digits_in_denominator = number_of_digits(d[1])\n\n        # If the number of digits in the numerator is less than the nth digit,\n        # then we have to find the nth digit in the denominator\n        if num_of_digits_in_numerator < n:\n            # Calculate the nth digit in the denominator\n            return find_nth_digit_in_num(d[1], n - num_of_digits_in_numerator)\n\n        # If the number of digits in the denominator is less than the nth digit,\n        # then we have to find the nth digit in the numerator\n        if num_of_digits_in_denominator < n:\n            # Calculate the nth digit in the numerator\n            return find_nth_digit_in_num(d[0], n - num_of_digits_in_denominator)\n\n        # If the number of digits in both numerator and denominator are greater than or equal to the nth digit,\n        # then we have to find the nth digit in the numerator\n        return find_nth_digit_in_num(d[0], n)\n\n    return find_nth_digit_in_fraction(d, n)"
    },
    {
      "rank": 100,
      "score": 3.0,
      "candidate": "from __future__ import print_function\n\n\ndef nth_digit(number1, number2, n):\n    \"\"\"\n    Return the nth digit of the proper fraction of two given numbers.\n    >>> nth_digit(1, 1, 1)\n    5\n    >>> nth_digit(123, 456, 1)\n    5\n    >>> nth_digit(123, 456, 2)\n    2\n    >>> nth_digit(123, 456, 3)\n    5\n    >>> nth_digit(123, 456, 4)\n    6\n    >>> nth_digit(123, 456, 5)\n    2\n    \"\"\"\n    number1 = str(number1)\n    number2 = str(number2)\n\n    # nth_digit = (number1[0] / number2[0]) * n\n    # return int(nth_digit)\n    return int((number1[0] / number2[0]) * n)\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    }
  ]
}