{
  "timestamp": "2025-09-14T23:58:09.708130",
  "method": "improved_llm_judge",
  "judge_model": "codellama/CodeLlama-7b-Python-hf",
  "target_model": "codellama-7b",
  "dataset": "mbpp",
  "problem_number": 221,
  "total_candidates": 100,
  "results": [
    {
      "rank": 1,
      "score": 10.0,
      "candidate": "from typing import List, Callable\n\n\ndef get_top_n(dataset: List[int], n: int, comp: Callable[[int, int], bool]) -> List[int]:\n    \"\"\"Returns the n largest items from a dataset.\n\n    Args:\n        dataset (List[int]): The dataset to be searched.\n        n (int): The number of items to be returned.\n        comp (Callable[[int, int], bool]): The comparator function.\n\n    Returns:\n        List[int]: The n largest items from the dataset.\n    \"\"\"\n    return sorted(dataset, key=lambda x: comp(x, dataset[0]))[:n]\n\n\ndef get_top_n_sorting(dataset: List[int], n: int) -> List[int]:\n    \"\"\"Returns the n largest items from a dataset using the sorting method.\n\n    Args:\n        dataset (List[int]): The dataset to be searched.\n        n (int): The number of items to be returned.\n\n    Returns:\n        List[int]: The n largest items from the dataset.\n    \"\"\"\n    return sorted(dataset, reverse=True)[:n]\n\n\ndef get_top_n_heapq(dataset: List[int], n: int) -> List[int]:\n    \"\"\"Returns the n largest items from a dataset using the heapq method.\n\n    Args:\n        dataset (List[int]): The dataset to be searched.\n        n (int): The number of items to be returned.\n\n    Returns:\n        List[int]: The n largest items from the dataset.\n    \"\"\"\n    import heapq\n\n    return heapq.nlargest(n, dataset)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 2,
      "score": 10.0,
      "candidate": "def get_n_largest(dataset, n):\n    \"\"\"\n    This function sorts the data set and returns the first n elements.\n    :param dataset: a list of numbers\n    :param n: an integer\n    :return: a list of n largest elements\n    \"\"\"\n    return sorted(dataset, reverse=True)[:n]\n\n\ndef get_n_largest_optimized(dataset, n):\n    \"\"\"\n    This function uses a max heap to get the first n elements.\n    :param dataset: a list of numbers\n    :param n: an integer\n    :return: a list of n largest elements\n    \"\"\"\n    return heapq.nlargest(n, dataset)\n\n\ndef get_n_largest_optimized_v2(dataset, n):\n    \"\"\"\n    This function uses a max heap to get the first n elements.\n    :param dataset: a list of numbers\n    :param n: an integer\n    :return: a list of n largest elements\n    \"\"\"\n    heap = []\n    for i in range(n):\n        heapq.heappush(heap, dataset[i])\n    for i in range(n, len(dataset)):\n        if dataset[i] > heap[0]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, dataset[i])\n    return heap\n\n\nif __name__ == \"__main__\":\n    dataset = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    print(get_n_largest(dataset, 4))\n    print(get_n_largest_optimized(dataset, 4))\n    print(get_n_largest_optimized_v2(dataset, 4))"
    },
    {
      "rank": 3,
      "score": 10.0,
      "candidate": "import heapq\n\n\ndef nlargest(dataset, n):\n    return heapq.nlargest(n, dataset)\n\n\nprint(nlargest([5, 2, 1, 7, 9, 5, 1, 2, 3, 5, 7, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11], 10))"
    },
    {
      "rank": 4,
      "score": 10.0,
      "candidate": "from heapq import nlargest\nfrom itertools import islice\n\n\ndef n_largest(data, n):\n    return list(islice(nlargest(n, data), n))\n\n\ndef test_n_largest():\n    \"\"\"\n    >>> n_largest([1, 2, 3, 4, 5, 6, 7, 8, 9], 3)\n    [8, 7, 6]\n\n    >>> n_largest([1, 2, 3, 4, 5, 6, 7, 8, 9], 1)\n    [9]\n\n    >>> n_largest([1, 2, 3, 4, 5, 6, 7, 8, 9], 0)\n    []\n    \"\"\"\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 5,
      "score": 10.0,
      "candidate": "from heapq import nlargest\n\n\ndef n_largest(data, n):\n    return nlargest(n, data)\n\n\nif __name__ == \"__main__\":\n    data = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    print(n_largest(data, 3))"
    },
    {
      "rank": 6,
      "score": 10.0,
      "candidate": "from heapq import nlargest\n\n\ndef n_largest(dataset, n):\n    return nlargest(n, dataset)\n\n\nif __name__ == '__main__':\n    print(n_largest([5, 2, 3, 4, 1, 7, 10], 3))"
    },
    {
      "rank": 7,
      "score": 10.0,
      "candidate": "from heapq import nlargest\n\n\ndef n_largest(nums, n):\n    \"\"\"\n    :param nums: list of numbers\n    :param n: n numbers to return\n    :return: list of n largest numbers\n    \"\"\"\n    return nlargest(n, nums)\n\n\ndef test_n_largest():\n    \"\"\"\n    >>> test_n_largest()\n    \"\"\"\n    assert n_largest([4, 1, 3, 2], 2) == [3, 4]\n    assert n_largest([4, 1, 3, 2], 1) == [4]\n    assert n_largest([4, 1, 3, 2], 3) == [4, 3, 2]"
    },
    {
      "rank": 8,
      "score": 10.0,
      "candidate": "def largest(dataset, n):\n    \"\"\"\n    Return the n largest items from a dataset.\n    \"\"\"\n    return sorted(dataset)[-n:]\n\n\ndef test_largest():\n    \"\"\"\n    >>> largest([1, 2, 3, 4, 5, 6, 7, 8], 4)\n    [7, 8, 6, 5]\n    >>> largest([1, 2, 3, 4, 5, 6, 7, 8], 8)\n    [8, 7, 6, 5, 4, 3, 2, 1]\n    >>> largest([1, 2, 3, 4, 5, 6, 7, 8], 1)\n    [8]\n    \"\"\"\n    pass\n\n\nif __name__ == \"__main__\":\n    test_largest()"
    },
    {
      "rank": 9,
      "score": 10.0,
      "candidate": "import heapq\n\n\ndef top_n(dataset, n):\n    return heapq.nlargest(n, dataset)\n\n\nif __name__ == '__main__':\n    print(top_n([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3))"
    },
    {
      "rank": 10,
      "score": 10.0,
      "candidate": "from random import randint\nfrom heapq import nlargest\n\n\ndef get_n_largest(n, data):\n    return nlargest(n, data)\n\n\nif __name__ == '__main__':\n    \"\"\"\n    >>> data = [randint(-10, 10) for i in range(20)]\n    >>> data\n    [-2, -7, 1, -4, -3, -6, 0, 5, 10, 3, -9, 10, -2, 7, -4, 8, -7, -9, -7, -8]\n    >>> get_n_largest(5, data)\n    [10, 8, 7, 7, 7]\n    \"\"\""
    },
    {
      "rank": 11,
      "score": 10.0,
      "candidate": "from heapq import nlargest\n\n\ndef n_largest(data, n):\n    return nlargest(n, data)\n\n\nif __name__ == \"__main__\":\n    dataset = [1, 8, 2, 23, 7, -4, 18, 23, 42, 37, 2]\n    result = n_largest(dataset, 3)\n    print(result)"
    },
    {
      "rank": 12,
      "score": 10.0,
      "candidate": "import heapq\nfrom typing import List\n\n\ndef n_largest(dataset: List[int], n: int) -> List[int]:\n    \"\"\"Return the n largest items from a dataset.\"\"\"\n    return heapq.nlargest(n, dataset)"
    },
    {
      "rank": 13,
      "score": 10.0,
      "candidate": "import random\n\n\ndef n_largest(n, items):\n    \"\"\"\n    :param n: The number of largest items to return\n    :param items: The items to sort and filter\n    :return: The n largest items\n    \"\"\"\n    largest = []\n    for _ in range(n):\n        largest.append(max(items))\n        items.remove(max(items))\n    return largest\n\n\ndef test_n_largest():\n    \"\"\"\n    >>> test_n_largest()\n    \"\"\"\n    data = [random.randint(0, 100) for _ in range(10)]\n    assert n_largest(3, data) == [96, 97, 98]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 14,
      "score": 10.0,
      "candidate": "def get_largest_items(dataset, n):\n    \"\"\"\n    Sort the dataset in descending order and return the n largest items.\n    \"\"\"\n    return sorted(dataset, reverse=True)[:n]"
    },
    {
      "rank": 15,
      "score": 10.0,
      "candidate": "import heapq\n\n\ndef top_n(data, n):\n    return heapq.nlargest(n, data)\n\n\ndef test_top_n():\n    assert top_n([4, 8, 1, 6, 7], 3) == [7, 6, 8]\n    assert top_n([4, 8, 1, 6, 7], 5) == [7, 6, 8, 4, 1]\n    assert top_n([4, 8, 1, 6, 7], 0) == []\n    assert top_n([4, 8, 1, 6, 7], 6) == [7, 6, 8, 4, 1]"
    },
    {
      "rank": 16,
      "score": 10.0,
      "candidate": "import heapq\n\ndef n_largest(data, n):\n    \"\"\"Returns the n largest items from a dataset.\n    \"\"\"\n    # Create a heapq with the first n elements of the dataset\n    heap = data[:n]\n    heapq.heapify(heap)\n\n    # Iterate through the rest of the dataset\n    for item in data[n:]:\n        # If the current item is larger than the smallest item in the heap,\n        # remove the smallest item and add the current item\n        if item > heap[0]:\n            heapq.heapreplace(heap, item)\n\n    # The heap will now contain the n largest items\n    return heap\n\ndef test_function(test_case):\n    output = n_largest(test_case[0], test_case[1])\n    if output == test_case[2]:\n        print(\"Pass\")\n    else:\n        print(\"Fail\")\n\ntest_case_1 = [[1, 2, 3, 4, 5], 3, [4, 3, 5]]\ntest_function(test_case_1)\n\ntest_case_2 = [[5, 3, 4, 2, 1], 3, [4, 3, 5]]\ntest_function(test_case_2)\n\ntest_case_3 = [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5, [7, 8, 9, 10, 10]]\ntest_function(test_case_3)\n\ntest_case_4 = [[10, 9, 8, 7, 6, 5, 4, 3, 2, 1], 5, [7, 6, 5, 4, 3]]\ntest_function(test_case_4)\n\ntest_case_5 = [[10, 9, 8, 7, 6, 5, 4, 3, 2, 1], 0, []]\ntest_function(test_case_5)\n\ntest_case_6 = [[\""
    },
    {
      "rank": 17,
      "score": 10.0,
      "candidate": "def get_n_largest(dataset, n):\n    \"\"\"\n    Return the n largest items from a dataset.\n\n    Args:\n        dataset: list of items\n        n: number of items to return\n\n    Returns:\n        list of n largest items\n    \"\"\"\n    n_largest = []\n    for _ in range(n):\n        n_largest.append(max(dataset))\n        dataset.remove(max(dataset))\n    return n_largest\n\n\ndef main():\n    \"\"\"Print n largest items in dataset.\"\"\"\n    dataset = [90, 70, 20, 80, 30, 60, 50, 10, 40]\n    print(get_n_largest(dataset, 3))  # [90, 80, 70]\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 18,
      "score": 10.0,
      "candidate": "import heapq\n\ndef get_largest_items(dataset, n):\n    largest = []\n    for item in dataset:\n        if len(largest) < n:\n            heapq.heappush(largest, item)\n        else:\n            heapq.heappushpop(largest, item)\n    return largest\n\ndef get_largest_items_with_sort(dataset, n):\n    return sorted(dataset, reverse=True)[:n]\n\ndef get_largest_items_with_max(dataset, n):\n    largest = []\n    for item in dataset:\n        if len(largest) < n:\n            largest.append(item)\n        else:\n            if item > largest[0]:\n                largest[0] = item\n                largest.sort()\n    return largest\n\ndef get_largest_items_with_partition(dataset, n):\n    return sorted(dataset, reverse=True)[n:]\n\ndef get_largest_items_with_partition_and_reverse(dataset, n):\n    return dataset[n:][::-1]\n\ndef get_largest_items_with_partition_and_heapq(dataset, n):\n    largest = []\n    for item in dataset[n:]:\n        heapq.heappush(largest, item)\n    return largest\n\ndef get_largest_items_with_partition_and_heapq_and_pop(dataset, n):\n    largest = []\n    for item in dataset[n:]:\n        heapq.heappush(largest, item)\n    while len(largest) > 0:\n        largest.pop()\n\ndef get_largest_items_with_partition_and_heapq_and_pop_reverse(dataset, n):\n    largest = []\n    for item in dataset[n:][::-1]:\n        heapq.heappush(largest, item)\n    while len(largest) > 0:\n        largest.pop()\n\ndef get_largest_items_with_partition_and_heapq_and_pop_reverse_sort(dataset, n):\n    largest = []\n    for item in dataset["
    },
    {
      "rank": 19,
      "score": 10.0,
      "candidate": "from heapq import nlargest\n\n\ndef n_largest(data, n):\n    return nlargest(n, data)\n\n\nif __name__ == '__main__':\n    data = [5, 4, 3, 2, 1]\n    print(n_largest(data, 3))"
    },
    {
      "rank": 20,
      "score": 10.0,
      "candidate": "# Time Complexity: O(n)\n# Space Complexity: O(n)\ndef get_n_largest(dataset, n):\n    largest = [float('-inf')] * n\n    for num in dataset:\n        for i in range(n):\n            if num > largest[i]:\n                largest[i], num = num, largest[i]\n                break\n    return largest\n\n\n# Time Complexity: O(n)\n# Space Complexity: O(1)\ndef get_n_largest_optimized(dataset, n):\n    largest = [float('-inf')] * n\n    for num in dataset:\n        for i in range(n - 1, -1, -1):\n            if num > largest[i]:\n                largest[i], num = num, largest[i]\n                break\n    return largest"
    },
    {
      "rank": 21,
      "score": 10.0,
      "candidate": "from heapq import nlargest\n\n\ndef get_n_largest(dataset, n):\n    return nlargest(n, dataset)\n\n\ndef test_get_n_largest():\n    \"\"\"\n    >>> test_get_n_largest([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3)\n    [9, 8, 7]\n    \"\"\"\n    assert get_n_largest([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3) == [9, 8, 7]\n\n\nif __name__ == \"__main__\":\n    from doctest import testmod\n\n    testmod()"
    },
    {
      "rank": 22,
      "score": 10.0,
      "candidate": "def n_largest(arr, n):\n    return sorted(arr, reverse=True)[:n]\n\n\ndef test_n_largest():\n    \"\"\"\n    >>> n_largest([1, 2, 3, 4, 5, 6, 7, 8], 4)\n    [8, 7, 6, 5]\n    >>> n_largest([1, 2, 3, 4, 5, 6, 7, 8], 1)\n    [8]\n    >>> n_largest([1, 2, 3, 4, 5, 6, 7, 8], 0)\n    []\n    >>> n_largest([1, 2, 3, 4, 5, 6, 7, 8], 9)\n    [8, 7, 6, 5, 4, 3, 2, 1]\n    \"\"\"\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 23,
      "score": 10.0,
      "candidate": "import heapq\n\ndef find_largest_n(dataset, n):\n    \"\"\"\n    Returns the n largest items from a dataset.\n\n    Args:\n     dataset: A list of numbers\n     n: An integer\n\n    Returns:\n     A list of the n largest numbers from the dataset.\n    \"\"\"\n    # Create a min heap of size n.\n    min_heap = []\n\n    # Add the first n elements to the heap.\n    for i in range(n):\n        heapq.heappush(min_heap, dataset[i])\n\n    # For the remaining elements,\n    # if they are larger than the smallest element in the heap,\n    # pop the smallest element and add the element.\n    for i in range(n, len(dataset)):\n        if dataset[i] > min_heap[0]:\n            heapq.heappop(min_heap)\n            heapq.heappush(min_heap, dataset[i])\n\n    return min_heap\n\ndef test_find_largest_n():\n    \"\"\"\n    >>> test_find_largest_n()\n    \"\"\"\n    assert find_largest_n([5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20], 4) == [19, 18, 17, 16]\n    assert find_largest_n([5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20], 3) == [19, 18, 17]\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 24,
      "score": 10.0,
      "candidate": "def top_n(data, n):\n    \"\"\"Returns the n largest items in a list.\n\n    >>> top_n([1, 3, 2], 2)\n    [3, 2]\n    >>> top_n([1, 3, 2], 1)\n    [3]\n    >>> top_n([1, 3, 2], 3)\n    [3, 2, 1]\n    >>> top_n([1, 3, 2], 0)\n    []\n    \"\"\"\n    return sorted(data, reverse=True)[:n]"
    },
    {
      "rank": 25,
      "score": 10.0,
      "candidate": "from heapq import nlargest\n\ndef n_largest(data, n):\n    return nlargest(n, data)\n\nif __name__ == '__main__':\n    data = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    n = 3\n    print(n_largest(data, n))"
    },
    {
      "rank": 26,
      "score": 10.0,
      "candidate": "from heapq import nlargest\n\n\ndef n_largest(n, iterable):\n    return nlargest(n, iterable)\n\n\nif __name__ == '__main__':  # pragma no cover\n    import random\n\n    random.seed(0)\n\n    data = [random.randint(0, 100) for _ in range(100)]\n    print(n_largest(10, data))"
    },
    {
      "rank": 27,
      "score": 10.0,
      "candidate": "from heapq import nlargest\n\n\ndef n_largest(data, n):\n    return nlargest(n, data)\n\n\nif __name__ == '__main__':\n    data = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    print(n_largest(data, 4))"
    },
    {
      "rank": 28,
      "score": 10.0,
      "candidate": "def n_largest(dataset, n):\n    return sorted(dataset, reverse=True)[:n]\n\n\ndef test_n_largest():\n    \"\"\"\n    >>> n_largest([1, 2, 3, 4, 5], 2)\n    [5, 4]\n    \"\"\"\n    pass\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 29,
      "score": 10.0,
      "candidate": "from heapq import nlargest\n\n\ndef n_largest(n, iterable):\n    return nlargest(n, iterable)\n\n\ndef test_n_largest():\n    \"\"\"\n    >>> n_largest(5, [1, 3, 5, 7, 9])\n    [9, 7, 5, 3, 1]\n    >>> n_largest(2, [1, 3, 5, 7, 9])\n    [9, 7]\n    >>> n_largest(2, [1, 3, 5, 7, 9, 2])\n    [9, 7]\n    \"\"\"\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 30,
      "score": 9.0,
      "candidate": "def n_largest(arr, n):\n    \"\"\"Return the n largest elements of an array.\"\"\"\n    return sorted(arr)[-n:]\n\n\nif __name__ == '__main__':\n    from random import randint\n\n    test_data = [randint(0, 100) for _ in range(10)]\n    print(test_data)\n    print(n_largest(test_data, 4))"
    },
    {
      "rank": 31,
      "score": 9.0,
      "candidate": "def n_largest(data, n):\n    \"\"\"\n    Get the n largest items from a dataset.\n    :param data: The dataset to get the n largest items from.\n    :param n: The number of items to get.\n    :return: The n largest items.\n    \"\"\"\n    if n < 0:\n        return None\n    if n > len(data):\n        return data\n    return sorted(data, reverse=True)[:n]"
    },
    {
      "rank": 32,
      "score": 9.0,
      "candidate": "def n_largest(data, n):\n    \"\"\"Return the n largest items from a dataset.\"\"\"\n    return sorted(data, reverse=True)[:n]"
    },
    {
      "rank": 33,
      "score": 9.0,
      "candidate": "def top_n(dataset, n):\n    \"\"\"\n    Return the n largest items from a dataset.\n    \"\"\"\n    if n == 0:\n        return []\n\n    if n > len(dataset):\n        return dataset\n\n    return sorted(dataset)[-n:]\n\n\nif __name__ == '__main__':  # pragma: no cover\n    from project.utils import check_extreme_value_func\n    check_extreme_value_func(top_n)"
    },
    {
      "rank": 34,
      "score": 8.0,
      "candidate": "import unittest\nfrom typing import List\n\n\ndef n_largest(data: List, n: int) -> List:\n    return sorted(data, reverse=True)[:n]\n\n\nclass TestNlargest(unittest.TestCase):\n\n    def test_n_largest(self):\n        self.assertEqual(n_largest([1, 2, 3, 4, 5], 3), [5, 4, 3])\n        self.assertEqual(n_largest([5, 4, 3, 2, 1], 3), [5, 4, 3])\n        self.assertEqual(n_largest([1, 2, 3, 4, 5], 5), [5, 4, 3, 2, 1])\n\n\nif __name__ == \"__main__\":\n    unittest.main()"
    },
    {
      "rank": 35,
      "score": 8.0,
      "candidate": "from random import randint\n\n\ndef get_largest_n(dataset: list, n: int) -> list:\n    \"\"\"\n    This function gets the largest n items from the dataset.\n    \"\"\"\n    largest_n = []\n    while len(dataset) > 0 and n > 0:\n        largest = max(dataset)\n        largest_n.append(largest)\n        dataset.remove(largest)\n        n -= 1\n    return largest_n\n\n\nif __name__ == \"__main__\":\n    dataset = [randint(1, 100) for i in range(20)]\n    n = 5\n    print(f\"dataset = {dataset}\")\n    print(f\"n = {n}\")\n    print(f\"largest_n = {get_largest_n(dataset, n)}\")"
    },
    {
      "rank": 36,
      "score": 8.0,
      "candidate": "def find_largest_n(dataset: list, n: int) -> list:\n    \"\"\"\n    Get the n largest items from a dataset.\n    \"\"\"\n\n    return sorted(dataset)[-n:]"
    },
    {
      "rank": 37,
      "score": 8.0,
      "candidate": "def get_top_n(data, n):\n    \"\"\"\n    O(n)\n    \"\"\"\n    if not n:\n        return []\n    return sorted(data)[-n:]\n\nif __name__ == \"__main__\":\n    data = [1, 3, 5, 7, 9, 2, 4, 6, 8, 0]\n    print(get_top_n(data, 3))"
    },
    {
      "rank": 38,
      "score": 8.0,
      "candidate": "def n_largest(data, n):\n    \"\"\"\n    >>> n_largest([4, 5, 2, 10, 1], 3)\n    [10, 5, 4]\n    >>> n_largest([4, 5, 2, 10, 1], 1)\n    [10]\n    >>> n_largest([4, 5, 2, 10, 1], 5)\n    [10, 5, 4, 2, 1]\n    \"\"\"\n    # We're going to use a max heap to get the n largest items\n    heap = []\n\n    for item in data:\n        # We'll use a negative sign to make sure that the largest items are on the top of the heap\n        heapq.heappush(heap, -item)\n\n        # If the heap has more than n items, we need to remove the smallest one\n        if len(heap) > n:\n            heapq.heappop(heap)\n\n    # Now we need to get the items back in the right order\n    result = []\n    while heap:\n        result.append(-heapq.heappop(heap))\n\n    return result[::-1]\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 39,
      "score": 8.0,
      "candidate": "def largest_items(data, n):\n    \"\"\"Return the n largest items from the data.\"\"\"\n    return sorted(data)[-n:]\n\n\ndef test_largest_items():\n    \"\"\"Test largest_items.\"\"\"\n    assert largest_items([4, 1, 5, 2, 6], 2) == [6, 5]\n    assert largest_items([4, 1, 5, 2, 6], 3) == [6, 5, 4]\n    assert largest_items([4, 1, 5, 2, 6], 1) == [6]\n    assert largest_items([4, 1, 5, 2, 6], 6) == [6, 5, 4, 2, 1]\n    assert largest_items([4, 1, 5, 2, 6], 5) == [6, 5, 4, 2, 1]\n    assert largest_items([4, 1, 5, 2, 6], 0) == []\n    assert largest_items([4, 1, 5, 2, 6], 7) == [6, 5, 4, 2, 1]\n    assert largest_items([], 2) == []\n    assert largest_items([1], 2) == [1]\n\n\nif __name__ == \"__main__\":\n    test_largest_items()"
    },
    {
      "rank": 40,
      "score": 8.0,
      "candidate": "def get_n_largest(data, n):\n    \"\"\"\n    Get the n largest items from data.\n\n    Args:\n     data: A list of numbers.\n     n: The number of items to return.\n    Returns:\n     The n largest items from data.\n    \"\"\"\n    return sorted(data)[-n:]\n\n\ndef test_get_n_largest():\n    \"\"\"\n    Test get_n_largest function.\n    \"\"\"\n    assert get_n_largest([1, 2, 3, 4, 5], 3) == [4, 5, 3]\n    assert get_n_largest([1, 2, 3, 4, 5], 2) == [4, 5]\n    assert get_n_largest([1, 2, 3, 4, 5], 1) == [5]\n\n\nif __name__ == '__main__':\n    test_get_n_largest()"
    },
    {
      "rank": 41,
      "score": 8.0,
      "candidate": "from heapq import nlargest\n\n\ndef top_n(iterable, n):\n    return nlargest(n, iterable)\n\n\nif __name__ == '__main__':\n    print(top_n([5, 3, 8, 6, 1, 1, 2, 3, 4, 6, 5, 8, 6, 5, 6, 2], 4))"
    },
    {
      "rank": 42,
      "score": 8.0,
      "candidate": "def n_largest(data, n):\n    return sorted(data, reverse=True)[:n]\n\n\nif __name__ == '__main__':\n    print(n_largest([1, 2, 3, 4, 5, 6, 7, 8], 3))"
    },
    {
      "rank": 43,
      "score": 8.0,
      "candidate": "def get_n_largest(dataset, n):\n    \"\"\"\n    >>> get_n_largest([1,2,3,4,5,6,7,8,9,10], 3)\n    [9, 8, 7]\n    >>> get_n_largest([1,2,3,4,5,6,7,8,9,10], 5)\n    [9, 8, 7, 6, 5]\n    \"\"\"\n    return sorted(dataset)[-n:]\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 44,
      "score": 8.0,
      "candidate": "from random import randint\nfrom time import perf_counter\n\n\ndef top_n(dataset, n):\n    if not isinstance(n, int) or n < 1:\n        return []\n\n    if len(dataset) < n:\n        return dataset\n\n    largest = []\n    while len(largest) < n:\n        next_largest = max(dataset)\n        largest.append(next_largest)\n        dataset.remove(next_largest)\n\n    return largest\n\n\ndef top_n_optimized(dataset, n):\n    if not isinstance(n, int) or n < 1:\n        return []\n\n    if len(dataset) < n:\n        return dataset\n\n    largest = []\n    for _ in range(n):\n        next_largest = max(dataset)\n        largest.append(next_largest)\n        dataset.remove(next_largest)\n\n    return largest\n\n\ndef generate_random_list(length):\n    data = []\n    for _ in range(length):\n        data.append(randint(0, 100))\n    return data\n\n\ndef time_function(f, *args):\n    t1 = perf_counter()\n    ret = f(*args)\n    t2 = perf_counter()\n    return t2 - t1, ret\n\n\ndef main():\n    dataset = generate_random_list(1000)\n    n = 10\n\n    time_elapsed, result = time_function(top_n, dataset, n)\n    print(f\"Non-optimized top_n took {time_elapsed:.6f} seconds\")\n    print(result)\n\n    time_elapsed, result = time_function(top_n_optimized, dataset, n)\n    print(f\"Optimized top_n took {time_elapsed:.6f} seconds\")\n    print(result)\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 45,
      "score": 8.0,
      "candidate": "def find_n_largest(data, n):\n    \"\"\"\n    Return the n largest items from a data set.\n\n    Args:\n     - data: an iterable containing the data set.\n     - n: the number of largest items to return.\n\n    Returns:\n     - A list containing the n largest items from the data set.\n    \"\"\"\n    if n == 0:\n        return []\n\n    largest = []\n    for item in data:\n        if len(largest) < n:\n            largest.append(item)\n        else:\n            for i in range(n):\n                if item > largest[i]:\n                    largest[i] = item\n                    break\n\n    return largest"
    },
    {
      "rank": 46,
      "score": 8.0,
      "candidate": "def get_n_largest(dataset, n):\n    \"\"\"\n    Get the n largest items from a dataset.\n\n    Args:\n        dataset: a list of items\n        n: number of items to get\n    Returns:\n        a list of the n largest items\n    \"\"\"\n    return sorted(dataset)[-n:]\n\n\ndef test_get_n_largest():\n    \"\"\"Test for get_n_largest function.\"\"\"\n    assert get_n_largest([5, 3, 1, 4, 2], 2) == [4, 5]\n    assert get_n_largest([5, 3, 1, 4, 2], 3) == [4, 5, 3]\n\n\nif __name__ == '__main__':\n    print(get_n_largest([5, 3, 1, 4, 2], 2))"
    },
    {
      "rank": 47,
      "score": 8.0,
      "candidate": "def top_n(data, n):\n    \"\"\"Returns the n largest items from a dataset.\n\n    >>> top_n([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3)\n    [9, 8, 7]\n    \"\"\"\n    return sorted(data)[-n:]\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 48,
      "score": 8.0,
      "candidate": "from heapq import nlargest\nfrom typing import List\n\n\ndef n_largest(nums: List[int], n: int) -> List[int]:\n    \"\"\"Returns the n largest items from a list.\n\n    >>> n_largest([1, 5, 2, 3, 10], 3)\n    [10, 5, 3]\n    \"\"\"\n    return nlargest(n, nums)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 49,
      "score": 8.0,
      "candidate": "import heapq\n\n\ndef nlargest(iterable, n):\n    \"\"\"Return the n largest items in the dataset.\n    \"\"\"\n    return heapq.nlargest(n, iterable)"
    },
    {
      "rank": 50,
      "score": 8.0,
      "candidate": "import heapq\n\n\ndef top_n(data, n):\n    \"\"\"\n    Get the n largest items from a dataset.\n    \"\"\"\n    return heapq.nlargest(n, data)"
    },
    {
      "rank": 51,
      "score": 8.0,
      "candidate": "def get_largest(dataset, n):\n    \"\"\"\n    Return the n largest items from a dataset.\n\n    >>> get_largest([1, 2, 3, 4, 5], 3)\n    [4, 3, 2]\n    \"\"\"\n    return sorted(dataset)[-n:]\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 52,
      "score": 8.0,
      "candidate": "import unittest\n\ndef top_n(data, n):\n    \"\"\"Return the n largest items from data.\"\"\"\n    return sorted(data)[-n:]\n\nclass TestTopN(unittest.TestCase):\n\n    def test_top_n(self):\n        self.assertEqual(top_n([1, 2, 3, 4, 5, 6, 7, 8, 9], 3), [8, 7, 6])\n\nif __name__ == \"__main__\":\n    unittest.main()"
    },
    {
      "rank": 53,
      "score": 8.0,
      "candidate": "from heapq import nlargest\n\n\ndef get_n_largest(dataset, n):\n    \"\"\"Returns the n largest elements from a dataset.\n\n    Args:\n        dataset (list): The dataset to search for the n largest items.\n        n (int): The number of largest items to return.\n\n    Returns:\n        list: The n largest items in the dataset.\n    \"\"\"\n    return nlargest(n, dataset)\n\n\ndef test_get_n_largest():\n    \"\"\"Test for get_n_largest function.\"\"\"\n    assert get_n_largest([4, 10, 18, 14, 20, 17, 23, 16], 3) == [20, 18, 23]\n    assert get_n_largest([4, 10, 18, 14, 20, 17, 23, 16], 4) == [20, 18, 23, 17]\n    assert get_n_largest([4, 10, 18, 14, 20, 17, 23, 16], 5) == [20, 18, 23, 17, 16]\n\n\nif __name__ == '__main__':\n    test_get_n_largest()"
    },
    {
      "rank": 54,
      "score": 8.0,
      "candidate": "from random import randint\n\n\ndef get_n_largest(data, n):\n    \"\"\"\n    :param data: A list of numbers\n    :param n: The number of largest elements to retrieve\n    :return: A list of n largest elements in the data\n    \"\"\"\n    largest = []\n\n    while len(largest) < n:\n        largest.append(max(data))\n        data.remove(max(data))\n\n    return largest\n\n\nif __name__ == \"__main__\":\n    data = [randint(0, 100) for i in range(20)]\n    print(\"Data:\", data)\n    print(\"5 largest:\", get_n_largest(data, 5))"
    },
    {
      "rank": 55,
      "score": 8.0,
      "candidate": "def n_largest(data, n):\n    # Your code here\n    return data\n\n\nif __name__ == '__main__':\n    # Use the main function here to test your implementation\n    arr = [1, 4, 2, 5, 3, 1, 6, 2, 3]\n    print(n_largest(arr, 3))\n\n    # Test your implementation here"
    },
    {
      "rank": 56,
      "score": 8.0,
      "candidate": "import heapq\n\n\ndef top_n(iterable, n):\n    \"\"\"Returns the n largest items from an iterable.\n\n    >>> top_n([3, 4, 5, 6, 7], 2)\n    [6, 7]\n    >>> top_n([3, 4, 5, 6, 7], 1)\n    [7]\n    >>> top_n([3, 4, 5, 6, 7], 0)\n    []\n    \"\"\"\n    return heapq.nlargest(n, iterable)"
    },
    {
      "rank": 57,
      "score": 8.0,
      "candidate": "def n_largest(dataset, n):\n    \"\"\"\n    Return the n largest items from a dataset.\n\n    >>> n_largest([5, 4, 3, 2, 1], 2)\n    [5, 4]\n    \"\"\"\n    return dataset[:n]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 58,
      "score": 8.0,
      "candidate": "def n_largest(data, n):\n    \"\"\"\n    Return the n largest items from data.\n    \"\"\"\n    if n > len(data):\n        raise Exception(\"n must be less than len(data)\")\n\n    result = data.copy()\n    for i in range(n):\n        max_item = max(result)\n        result.remove(max_item)\n\n    return result"
    },
    {
      "rank": 59,
      "score": 8.0,
      "candidate": "def n_largest(dataset, n):\n    return sorted(dataset, reverse=True)[:n]\n\n\nif __name__ == '__main__':\n    data = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    print(n_largest(data, 3))"
    },
    {
      "rank": 60,
      "score": 8.0,
      "candidate": "from heapq import nlargest\n\ndef n_largest(n, data):\n    return nlargest(n, data)\n\n\ndef n_largest_heapq(n, data):\n    return nlargest(n, data)\n\n\ndef n_largest_quickselect(n, data):\n    if n > len(data):\n        return []\n    if n == len(data):\n        return data\n    if n == 1:\n        return [max(data)]\n\n    pivot = data[0]\n    left = [x for x in data[1:] if x > pivot]\n    right = [x for x in data[1:] if x <= pivot]\n\n    if len(left) < n:\n        return [pivot] + n_largest_quickselect(n - len(left) - 1, right)\n    elif len(right) < n:\n        return n_largest_quickselect(n - len(right) - 1, left) + [pivot]\n    else:\n        return n_largest_quickselect(n, left) + [pivot]\n\n\ndef main():\n    import timeit\n\n    data = range(10000)\n\n    print \"Testing n_largest\"\n    print \"nlargest\", timeit.timeit('n_largest(10, data)',\n                                    'from __main__ import n_largest;'\n                                    'data = range(10000)',\n                                    number=100)\n    print \"nlargest heapq\", timeit.timeit('n_largest_heapq(10, data)',\n                                         'from __main__ import n_largest_heapq;'\n                                         'data = range(10000)',\n                                         number=100)\n    print \"nlargest quickselect\", timeit.timeit('n_largest_quickselect(10, data)',\n                                               'from __main__ import n_largest_quickselect;'\n                                               'data = range(10000)',"
    },
    {
      "rank": 61,
      "score": 8.0,
      "candidate": "def n_largest(data, n):\n    \"\"\"\n    Time: O(n log n)\n    Space: O(n)\n    \"\"\"\n    return sorted(data, reverse=True)[:n]\n\n\ndef heap_n_largest(data, n):\n    \"\"\"\n    Time: O(n log n)\n    Space: O(n)\n    \"\"\"\n    heap = []\n\n    for item in data:\n        heapq.heappush(heap, item)\n        if len(heap) > n:\n            heapq.heappop(heap)\n\n    return heap[::-1]\n\n\ndef quick_select_n_largest(data, n):\n    \"\"\"\n    Time: O(n^2)\n    Space: O(1)\n    \"\"\"\n    def partition(left, right, pivot_index):\n        pivot = data[pivot_index]\n        # 1. Move pivot to end\n        data[pivot_index], data[right] = data[right], data[pivot_index]\n\n        # 2. Move all smaller elements to the left\n        store_index = left\n        for i in range(left, right):\n            if data[i] < pivot:\n                data[store_index], data[i] = data[i], data[store_index]\n                store_index += 1\n\n        # 3. Move pivot to its final place\n        data[right], data[store_index] = data[store_index], data[right]\n\n        return store_index\n\n    def select(left, right, n_largest):\n        if left == right:\n            return data[left]\n\n        # Select a random pivot\n        pivot_index = random.randint(left, right)\n\n        # Find the pivot position in a sorted list\n        pivot_index = partition(left, right, pivot_index)\n\n        # The pivot is in its final sorted position\n        if n_largest == pivot_index:\n            return data[n_largest]\n        # Go left\n        elif n_largest < pivot_index:\n            return select(left, pivot_index - 1, n_"
    },
    {
      "rank": 62,
      "score": 8.0,
      "candidate": "import random\n\n\ndef get_n_largest(dataset, n):\n    \"\"\"\n    Returns the n largest items from a dataset.\n    \"\"\"\n    if n > len(dataset):\n        return dataset\n    return sorted(dataset)[-n:]\n\n\ndef test_get_n_largest():\n    \"\"\"Tests for get_n_largest.\"\"\"\n    assert get_n_largest([2, 4, 1, 3], 2) == [4, 3]\n    assert get_n_largest([2, 4, 1, 3], 3) == [4, 3, 2]\n    assert get_n_largest([2, 4, 1, 3], 4) == [4, 3, 2, 1]\n    assert get_n_largest([2, 4, 1, 3], 5) == [4, 3, 2, 1]\n\n    assert get_n_largest([1, 2, 3, 4, 5, 6], 2) == [6, 5]\n    assert get_n_largest([1, 2, 3, 4, 5, 6], 3) == [6, 5, 4]\n    assert get_n_largest([1, 2, 3, 4, 5, 6], 4) == [6, 5, 4, 3]\n    assert get_n_largest([1, 2, 3, 4, 5, 6], 5) == [6, 5, 4, 3, 2]\n    assert get_n_largest([1, 2, 3, 4, 5, 6], 6) == [6, 5, 4, 3, 2, 1]\n    assert get_n_largest([1, 2, 3, 4, 5, 6], 7) == [6, 5, 4, 3, 2, 1]\n\n    assert get_n_largest([1, 2, 3, 4, 5"
    },
    {
      "rank": 63,
      "score": 7.0,
      "candidate": "from typing import List\n\n\ndef top_n(items: List, n: int) -> List:\n    \"\"\"Return the n largest items from a list.\n    \"\"\"\n    return sorted(items, reverse=True)[:n]\n\n\nif __name__ == \"__main__\":\n    assert top_n([5, 4, 3, 2, 1], 3) == [5, 4, 3]\n    assert top_n([1, 2, 3, 4, 5], 5) == [5, 4, 3, 2, 1]\n    assert top_n([1, 2, 3, 4, 5], 6) == [5, 4, 3, 2, 1]\n    assert top_n([1, 2, 3, 4, 5], 1) == [5]"
    },
    {
      "rank": 64,
      "score": 1.0,
      "candidate": "import heapq\nfrom typing import List\n\n\ndef get_top_n(data: List[int], n: int) -> List[int]:\n    \"\"\"Return the n largest items in the list.\n    >>> get_top_n([4, 3, 5, 2, 1], 3)\n    [4, 3, 5]\n    >>> get_top_n([4, 3, 5, 2, 1], 1)\n    [4]\n    >>> get_top_n([4, 3, 5, 2, 1], 0)\n    []\n    \"\"\"\n    heap = []\n\n    for item in data:\n        if len(heap) < n:\n            heapq.heappush(heap, item)\n        elif item > heap[0]:\n            heapq.heapreplace(heap, item)\n\n    return heapq.nlargest(n, heap)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 65,
      "score": 1.0,
      "candidate": "from heapq import nlargest\nfrom typing import Any, List\n\n\ndef top_n(data: List[Any], n: int) -> List[Any]:\n    \"\"\"Return the top n items from the data.\"\"\"\n    return nlargest(n, data)\n\n\nif __name__ == \"__main__\":\n    data = [\n        (1, \"one\"),\n        (2, \"two\"),\n        (3, \"three\"),\n        (4, \"four\"),\n        (5, \"five\"),\n        (6, \"six\"),\n        (7, \"seven\"),\n        (8, \"eight\"),\n        (9, \"nine\"),\n        (10, \"ten\"),\n    ]\n\n    print(top_n(data, 5))"
    },
    {
      "rank": 66,
      "score": 1.0,
      "candidate": "import random\n\n\ndef get_n_largest(data, n):\n    if len(data) < n:\n        raise ValueError('data must be at least as long as n')\n\n    # sort the data in reverse order, and return the first n items\n    data.sort(reverse=True)\n    return data[:n]\n\n\nif __name__ == '__main__':\n    data = [random.randint(0, 100) for i in range(15)]\n    print(data)\n    print(get_n_largest(data, 3))"
    },
    {
      "rank": 67,
      "score": 1.0,
      "candidate": "import heapq\n\n\ndef get_n_largest(dataset, n):\n    largest = []\n    for num in dataset:\n        if len(largest) < n:\n            heapq.heappush(largest, num)\n        else:\n            heapq.heappush(largest, num)\n            heapq.heappop(largest)\n\n    return largest\n\n\ndef test_get_n_largest():\n    assert get_n_largest([1, 2, 3, 4, 5, 6, 7, 8, 9], 3) == [8, 7, 6]\n    assert get_n_largest([1, 2, 3, 4, 5, 6, 7, 8, 9], 4) == [8, 7, 6, 5]\n    assert get_n_largest([1, 2, 3, 4, 5, 6, 7, 8, 9], 5) == [8, 7, 6, 5, 4]"
    },
    {
      "rank": 68,
      "score": 1.0,
      "candidate": "def get_n_largest_items(dataset, n):\n    \"\"\"\n    Return a list of the n largest items from a dataset.\n    \"\"\"\n    largest_items = []\n    for _ in range(n):\n        largest_item = 0\n        for item in dataset:\n            if item > largest_item:\n                largest_item = item\n        largest_items.append(largest_item)\n        dataset.remove(largest_item)\n    return largest_items\n\n\nif __name__ == \"__main__\":\n    # print(get_n_largest_items([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5))\n    # print(get_n_largest_items([10, 9, 8, 7, 6, 5, 4, 3, 2, 1], 5))\n    print(get_n_largest_items([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5))\n    print(get_n_largest_items([10, 9, 8, 7, 6, 5, 4, 3, 2, 1], 5))"
    },
    {
      "rank": 69,
      "score": 1.0,
      "candidate": "import random\n\n\ndef largest_n_items(data, n):\n    \"\"\"Get the n largest items from a dataset.\n\n    Parameters\n    ----------\n    data : list\n        A list of items\n    n : int\n        The number of largest items to get\n\n    Returns\n    -------\n    list\n        The largest n items from the dataset\n    \"\"\"\n    # Get the largest n items in a list\n    largest_n = []\n    for _ in range(n):\n        largest_n.append(max(data))\n        data.remove(max(data))\n    return largest_n\n\n\nif __name__ == \"__main__\":\n    data = [random.randint(0, 100) for _ in range(10)]\n    print(data)\n    print(largest_n_items(data, 5))"
    },
    {
      "rank": 70,
      "score": 1.0,
      "candidate": "from random import randint\n\n\ndef get_n_largest(data, n):\n    \"\"\"Returns the n largest items from a dataset.\n\n    :param data: The dataset to search from.\n    :param n: The number of largest items to return.\n    :returns: The n largest items from the dataset.\n    \"\"\"\n    return sorted(data, reverse=True)[:n]\n\n\ndef test_get_n_largest():\n    \"\"\"Test for get_n_largest function.\"\"\"\n    data = [randint(-10, 10) for _ in range(20)]\n    assert get_n_largest(data, 5) == sorted(data, reverse=True)[:5]"
    },
    {
      "rank": 71,
      "score": 1.0,
      "candidate": "import heapq\n\n\ndef top_n(items, n):\n    return heapq.nlargest(n, items)\n\n\ndef test_top_n():\n    items = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    assert top_n(items, 2) == [9, 8]\n    assert top_n(items, 3) == [9, 8, 7]\n    assert top_n(items, 4) == [9, 8, 7, 6]\n    assert top_n(items, 5) == [9, 8, 7, 6, 5]\n    assert top_n(items, 6) == [9, 8, 7, 6, 5, 4]\n    assert top_n(items, 7) == [9, 8, 7, 6, 5, 4, 3]\n    assert top_n(items, 8) == [9, 8, 7, 6, 5, 4, 3, 2]\n    assert top_n(items, 9) == [9, 8, 7, 6, 5, 4, 3, 2, 1]\n    assert top_n(items, 10) == [9, 8, 7, 6, 5, 4, 3, 2, 1, 0]"
    },
    {
      "rank": 72,
      "score": 1.0,
      "candidate": "def n_largest(data, n):\n    \"\"\"\n    :param data: a list of numbers\n    :param n: the number of largest numbers to be returned\n    :return: the n largest numbers from data\n    \"\"\"\n    # TODO: implement\n    return sorted(data, reverse=True)[:n]\n\n\nif __name__ == '__main__':\n    print(n_largest([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3))"
    },
    {
      "rank": 73,
      "score": 1.0,
      "candidate": "import heapq\n\n\ndef get_n_largest(dataset, n):\n    largest = []\n    for item in dataset:\n        if len(largest) < n:\n            heapq.heappush(largest, item)\n        else:\n            heapq.heappushpop(largest, item)\n    return largest\n\n\nif __name__ == '__main__':\n    print(get_n_largest([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20], 5))"
    },
    {
      "rank": 74,
      "score": 1.0,
      "candidate": "import heapq\nfrom typing import List\n\n\ndef n_largest(items: List[int], n: int) -> List[int]:\n    \"\"\"Return the n largest items from a list.\"\"\"\n    return heapq.nlargest(n, items)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 75,
      "score": 1.0,
      "candidate": "import heapq\nfrom typing import List\n\n\ndef get_n_largest(data: List[int], n: int) -> List[int]:\n    \"\"\"Gets the n largest items from a dataset.\n\n    Args:\n        data (List[int]): list of ints\n        n (int): number of largest items to return\n\n    Returns:\n        List[int]: list of n largest items\n    \"\"\"\n    return heapq.nlargest(n, data)\n\n\nif __name__ == \"__main__\":\n    data = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    print(get_n_largest(data, 4))"
    },
    {
      "rank": 76,
      "score": 1.0,
      "candidate": "import heapq\n\n\ndef n_largest(data, n):\n    \"\"\"\n    :type data: list\n    :type n: int\n    :rtype: list\n    \"\"\"\n    # Heap is a min-heap. We use the negative number to make it a max heap.\n    heap = heapq.nlargest(-n, data)\n    return heapq.heapify(heap)\n\n\nprint(n_largest([3, 4, 5, 1, 2], 2))"
    },
    {
      "rank": 77,
      "score": 1.0,
      "candidate": "import heapq\n\n\ndef get_n_largest(dataset, n):\n    \"\"\"Returns the n largest items from a dataset.\"\"\"\n    return heapq.nlargest(n, dataset)\n\n\ndef main():\n    data = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    largest = get_n_largest(data, 5)\n    print(f'The 5 largest numbers are: {largest}')\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 78,
      "score": 1.0,
      "candidate": "def n_largest(dataset, n):\n    \"\"\"\n    Return n largest items from a dataset.\n\n    Args:\n        dataset: list\n        n: int\n\n    Returns:\n        list: n largest items from a dataset\n    \"\"\"\n    return sorted(dataset, reverse=True)[:n]"
    },
    {
      "rank": 79,
      "score": 1.0,
      "candidate": "from heapq import nlargest\n\n\ndef get_n_largest(data, n):\n    return nlargest(n, data)\n\n\nif __name__ == '__main__':\n    data = [1, 3, 5, 7, 9, 2, 4, 6, 8, 0]\n    print(get_n_largest(data, 3))"
    },
    {
      "rank": 80,
      "score": 1.0,
      "candidate": "import heapq\nfrom typing import List\n\n\ndef top_n(data: List[int], n: int) -> List[int]:\n    \"\"\"Returns the n largest items from a dataset.\n\n    Uses a heap to keep track of the largest items in the dataset, and\n    pops them off in order of size until the heap is empty.\n\n    Args:\n        data (List[int]): The dataset.\n        n (int): The number of items to return.\n\n    Returns:\n        List[int]: The n largest items from the dataset.\n    \"\"\"\n    return heapq.nlargest(n, data)\n\n\nif __name__ == \"__main__\":\n    print(top_n([1, 2, 3, 4, 5], 3))\n    print(top_n([1, 2, 3, 4, 5], 5))\n    print(top_n([1, 2, 3, 4, 5], 0))\n    print(top_n([1, 2, 3, 4, 5], 10))\n    print(top_n([1, 2, 3, 4, 5], -1))\n    print(top_n([1, 2, 3, 4, 5], 2))"
    },
    {
      "rank": 81,
      "score": 1.0,
      "candidate": "import heapq\n\n\nclass MaxHeap(object):\n    def __init__(self, capacity):\n        self.capacity = capacity\n        self.data = []\n\n    def push(self, item):\n        if len(self.data) < self.capacity:\n            heapq.heappush(self.data, item)\n        else:\n            heapq.heappushpop(self.data, item)\n\n    def get_max(self):\n        return self.data[0]\n\n    def get_max_list(self):\n        return self.data\n\n\ndef top_n(data, n):\n    max_heap = MaxHeap(n)\n\n    for item in data:\n        max_heap.push(item)\n\n    return max_heap.get_max_list()\n\n\ndef test_top_n():\n    data = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]\n    assert top_n(data, 1) == [13]\n    assert top_n(data, 2) == [13, 12]\n    assert top_n(data, 3) == [13, 12, 11]\n    assert top_n(data, 4) == [13, 12, 11, 10]\n    assert top_n(data, 5) == [13, 12, 11, 10, 9]\n    assert top_n(data, 6) == [13, 12, 11, 10, 9, 8]\n    assert top_n(data, 7) == [13, 12, 11, 10, 9, 8, 7]\n    assert top_n(data, 8) == [13, 12, 11, 10, 9, 8, 7, 6]\n    assert top_n(data, 9) == [13, 12,"
    },
    {
      "rank": 82,
      "score": 1.0,
      "candidate": "from heapq import nlargest\n\n\ndef n_largest(data, n):\n    return nlargest(n, data)\n\n\nif __name__ == '__main__':\n    print(n_largest([5, 2, 4, 6, 1], 3))"
    },
    {
      "rank": 83,
      "score": 1.0,
      "candidate": "import heapq\n\n\ndef n_largest(nums, n):\n    if n > len(nums):\n        return nums\n    return heapq.nlargest(n, nums)\n\n\nif __name__ == \"__main__\":\n    print(n_largest([4, 5, 1, 2, 6, 7, 3, 8], 3))"
    },
    {
      "rank": 84,
      "score": 1.0,
      "candidate": "import heapq\n\n\ndef top_n(dataset, n):\n    largest = heapq.nlargest(n, dataset)\n    return largest\n\n\nif __name__ == '__main__':\n    dataset = [1, 8, 2, 23, 7, -4, 18, 23, 42, 37, 2]\n    result = top_n(dataset, 3)\n    print(result)  # [42, 37, 23]"
    },
    {
      "rank": 85,
      "score": 1.0,
      "candidate": "from heapq import nlargest\n\n\ndef n_largest(data, n):\n    return nlargest(n, data)\n\n\nif __name__ == \"__main__\":\n    data = [1, 8, 2, 23, 7, -4, 18, 23, 42, 37, 2]\n    n = 3\n    print(n_largest(data, n))"
    },
    {
      "rank": 86,
      "score": 1.0,
      "candidate": "from heapq import nlargest\n\n\ndef get_n_largest(iterable, n):\n    \"\"\"Return the n largest elements of the dataset.\"\"\"\n    return nlargest(n, iterable)\n\n\nif __name__ == '__main__':\n    print(get_n_largest([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5))"
    },
    {
      "rank": 87,
      "score": 1.0,
      "candidate": "import heapq\nfrom typing import Iterable\n\n\ndef n_largest(iterable: Iterable[int], n: int) -> list[int]:\n    \"\"\"Get the n largest items from a dataset.\"\"\"\n    return heapq.nlargest(n, iterable)\n\n\nif __name__ == \"__main__\":\n    print(n_largest([5, 2, 3, 1, 6, 2], 3))"
    },
    {
      "rank": 88,
      "score": 1.0,
      "candidate": "from heapq import nlargest\n\n\ndef n_largest(data, n):\n    return nlargest(n, data)\n\n\nif __name__ == \"__main__\":\n    data = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    print(n_largest(data, 4))"
    },
    {
      "rank": 89,
      "score": 1.0,
      "candidate": "from heapq import nlargest\n\n\ndef n_largest(data, n):\n    \"\"\"Return n largest items from a dataset.\n\n    Parameters\n    ----------\n    data : list\n        The dataset to return n largest items from.\n\n    n : int\n        The number of largest items to return.\n\n    Returns\n    -------\n    list\n        The n largest items from the dataset.\n\n    Examples\n    --------\n    >>> n_largest([1, 3, 5, 7, 9], 3)\n    [7, 9, 5]\n    \"\"\"\n    return nlargest(n, data)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 90,
      "score": 1.0,
      "candidate": "def n_largest(data, n):\n    # TODO: Write your code here\n    pass"
    },
    {
      "rank": 91,
      "score": 1.0,
      "candidate": "def n_largest(nums, n):\n    \"\"\"\n    :type nums: List[int]\n    :type n: int\n    :rtype: List[int]\n    \"\"\"\n    nums = sorted(nums, reverse=True)\n    return nums[:n]\n\n\nprint(n_largest([4, 5, 8, 2], 3))"
    },
    {
      "rank": 92,
      "score": 1.0,
      "candidate": "import heapq\n\n\ndef get_largest_n(dataset, n):\n    \"\"\"Return the n largest items from a dataset.\"\"\"\n    largest = []\n    for item in dataset:\n        if len(largest) < n:\n            heapq.heappush(largest, item)\n        elif item > largest[0]:\n            heapq.heapreplace(largest, item)\n    return list(reversed(largest))\n\n\nif __name__ == '__main__':\n    print(get_largest_n([1, 2, 3, 4, 5, 6, 7, 8, 9], 3))"
    },
    {
      "rank": 93,
      "score": 1.0,
      "candidate": "def get_n_largest(data, n):\n    \"\"\"\n    :param data: list of data points\n    :param n: number of largest points to return\n    :return: list of n largest items from data\n    \"\"\"\n    # sort data and return the first n items\n    return sorted(data)[-n:]\n\n\ndef test_function(test_case):\n    test_input, n = test_case\n    test_output = get_n_largest(test_input, n)\n    print(test_output)\n\n\ntest_function(([4, 2, 3, 1, 5, 6], 3))\ntest_function(([5, 3, 1, 2, 4, 6], 4))\ntest_function(([5, 4, 6, 7, 2, 1], 4))\ntest_function(([5, 4, 6, 7, 2, 1, 3], 4))\ntest_function(([5, 4, 6, 7, 2, 1, 3, 0], 4))\ntest_function(([5, 4, 6, 7, 2, 1, 3, 0, 9, 10, 11], 4))\ntest_function(([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11], 4))\ntest_function(([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], 4))\ntest_function(([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13], 4))\ntest_function(([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14], 4))\ntest_function(([1,"
    },
    {
      "rank": 94,
      "score": 1.0,
      "candidate": "# This is the interface that allows for creating\n# external connections to messaging queues.\nclass MQ(object):\n    def __init__(self, name):\n        self.name = name\n\n    def connect(self):\n        print('connect to {}'.format(self.name))\n\n    def subscribe(self):\n        print('subscribe to {}'.format(self.name))\n\n    def unsubscribe(self):\n        print('unsubscribe to {}'.format(self.name))\n\n    def disconnect(self):\n        print('disconnect to {}'.format(self.name))\n\n\ndef get_n_largest(mq, n):\n    \"\"\"\n    :type mq: MQ\n    :type n: int\n    :rtype: list[int]\n    \"\"\"\n    mq.connect()\n    mq.subscribe()\n    mq.unsubscribe()\n    mq.disconnect()\n\n    return [1, 2, 3, 4]\n\n\ndef main():\n    mq = MQ('test')\n    res = get_n_largest(mq, 10)\n    print(res)\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 95,
      "score": 1.0,
      "candidate": "import heapq\nimport random\n\n\ndef top_n_largest(dataset, n):\n    # Create a min heap of size n\n    min_heap = []\n    heapq.heapify(min_heap)\n\n    for item in dataset:\n        heapq.heappush(min_heap, item)\n        if len(min_heap) > n:\n            heapq.heappop(min_heap)\n\n    return min_heap\n\n\nif __name__ == '__main__':\n    dataset = [random.randint(1, 1000) for _ in range(1000)]\n    print(top_n_largest(dataset, 10))"
    },
    {
      "rank": 96,
      "score": 1.0,
      "candidate": "from heapq import nlargest\n\n\ndef n_largest(data, n):\n    return nlargest(n, data)\n\n\nif __name__ == '__main__':\n    data = [5, 2, 4, 6, 1, 3]\n    print(n_largest(data, 3))"
    },
    {
      "rank": 97,
      "score": 1.0,
      "candidate": "def n_largest(data, n):\n    \"\"\"\n    :param data: list of items\n    :param n: number of largest items to return\n    :return: n largest items from data\n    \"\"\"\n    return sorted(data)[-n:]\n\n\ndef test_n_largest():\n    \"\"\"Test n_largest.\"\"\"\n    assert n_largest([4, 2, 1, 3, 6, 5, 7, 9, 8], 4) == [7, 6, 5, 9]"
    },
    {
      "rank": 98,
      "score": 1.0,
      "candidate": "def n_largest(data, n):\n    \"\"\"\n    Sort the data and return the n largest elements.\n\n    Parameters:\n        data: The data to sort.\n        n: The number of elements to return.\n\n    Returns:\n        The n largest elements.\n    \"\"\"\n    return sorted(data, reverse=True)[:n]"
    },
    {
      "rank": 99,
      "score": 1.0,
      "candidate": "def find_largest_n(dataset, n):\n    \"\"\"\n    Return the n largest items from a dataset\n\n    Args:\n     dataset: list of numbers\n     n: number of largest items to return\n\n    Returns:\n     list of n largest items\n    \"\"\"\n    if n > len(dataset):\n        return dataset\n\n    largest_n = []\n\n    for i in range(n):\n        max_index = 0\n        for j in range(1, len(dataset)):\n            if dataset[max_index] < dataset[j]:\n                max_index = j\n        largest_n.append(dataset[max_index])\n        del dataset[max_index]\n\n    return largest_n\n\n\nif __name__ == '__main__':\n    print(find_largest_n([5, 2, 4, 5, 2, 4, 1, 5, 2, 4, 1, 5, 2, 4], 4))"
    },
    {
      "rank": 100,
      "score": 1.0,
      "candidate": "from typing import List\n\n\ndef top_n(data: List[int], n: int) -> List[int]:\n    \"\"\"Returns the n largest items from the dataset.\n\n    >>> top_n([1, 2, 3, 4, 5], 2)\n    [4, 5]\n    >>> top_n([1, 2, 3, 4, 5], 5)\n    [1, 2, 3, 4, 5]\n    >>> top_n([1, 2, 3, 4, 5], 1)\n    [5]\n    >>> top_n([1, 2, 3, 4, 5], 6)\n    [1, 2, 3, 4, 5]\n    \"\"\"\n    return sorted(data, reverse=True)[:n]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    }
  ]
}