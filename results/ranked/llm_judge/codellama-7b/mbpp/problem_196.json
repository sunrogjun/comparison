{
  "timestamp": "2025-09-14T23:46:54.077149",
  "method": "improved_llm_judge",
  "judge_model": "codellama/CodeLlama-7b-Python-hf",
  "target_model": "codellama-7b",
  "dataset": "mbpp",
  "problem_number": 196,
  "total_candidates": 100,
  "results": [
    {
      "rank": 1,
      "score": 10.0,
      "candidate": "def lcs(str1, str2):\n    dp = [[0 for _ in range(len(str1)+1)]for _ in range(len(str2)+1)]\n\n    for i in range(1, len(str2)+1):\n        for j in range(1, len(str1)+1):\n            if str2[i-1] == str1[j-1]:\n                dp[i][j] = 1+dp[i-1][j-1]\n            else:\n                dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n\n    return dp[len(str2)][len(str1)]\n\n\ndef main():\n    str1 = \"AGGTAB\"\n    str2 = \"GXTXAYB\"\n    print(lcs(str1, str2))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 2,
      "score": 10.0,
      "candidate": "from collections import defaultdict\n\ndef count_longest_repeating_subsequence(string):\n    \"\"\"\n    Counts the longest repeating subsequence such that the two subsequences\n    don't have same string characters at same positions.\n\n    Args:\n        string (str): String to be processed\n\n    Returns:\n        int: The length of the longest repeating subsequence\n    \"\"\"\n    longest_repeating_subsequence = 0\n\n    dp_table = defaultdict(int)\n    dp_table[0] = 1\n\n    for i in range(1, len(string) + 1):\n        for j in range(0, i):\n            if string[i - 1] != string[j]:\n                dp_table[i] = max(dp_table[i], dp_table[j] + 1)\n\n        longest_repeating_subsequence = max(\n            longest_repeating_subsequence, dp_table[i])\n\n    return longest_repeating_subsequence\n\n\nif __name__ == '__main__':\n    print(\"Enter string: \")\n    string = input()\n    print(\"Length of longest repeating subsequence: \",\n          count_longest_repeating_subsequence(string))"
    },
    {
      "rank": 3,
      "score": 10.0,
      "candidate": "from collections import Counter\n\ndef count_max_repeating_subsequences(input_string):\n    \"\"\"\n    >>> count_max_repeating_subsequences('abc')\n    3\n    >>> count_max_repeating_subsequences('abbc')\n    4\n    >>> count_max_repeating_subsequences('abab')\n    3\n    >>> count_max_repeating_subsequences('')\n    0\n    \"\"\"\n    count = Counter()\n    max_len = 0\n\n    for i in range(len(input_string)):\n        for j in range(i+1, len(input_string)+1):\n            sub_str = input_string[i:j]\n            count[sub_str] += 1\n            max_len = max(max_len, count[sub_str])\n\n    return max_len\n\n\ndef main():\n    import doctest\n    doctest.testmod()\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 4,
      "score": 10.0,
      "candidate": "# O(n) Time | O(n) Space\ndef longestRepeatingSubsequence(string):\n    longestSubsequence = [[0 for _ in range(len(string))] for _ in range(len(string))]\n    for i in range(1, len(string)):\n        for j in range(i, len(string)):\n            if string[i-1] == string[j]:\n                longestSubsequence[i][j] = longestSubsequence[i-1][j-1] + 1\n            else:\n                longestSubsequence[i][j] = max(longestSubsequence[i-1][j], longestSubsequence[i][j-1])\n    return longestSubsequence[-1][-1]"
    },
    {
      "rank": 5,
      "score": 10.0,
      "candidate": "def longest_non_repeat_subsequence(str1, str2):\n    \"\"\"\n    Dynamic programming solution to find the longest non-repeat subsequence.\n    Time complexity: O(n*m)\n    Space complexity: O(n*m)\n    \"\"\"\n    n = len(str1)\n    m = len(str2)\n\n    if n == 0 or m == 0:\n        return 0\n\n    dp = [[0 for _ in range(m+1)] for _ in range(n+1)]\n    for i in range(n):\n        for j in range(m):\n            if str1[i] == str2[j]:\n                dp[i+1][j+1] = dp[i][j] + 1\n            else:\n                dp[i+1][j+1] = max(dp[i][j+1], dp[i+1][j])\n\n    return dp[n][m]\n\n\ndef test():\n    assert longest_non_repeat_subsequence(\"abcdef\", \"acef\") == 3\n    assert longest_non_repeat_subsequence(\"abcdef\", \"acdef\") == 2\n    assert longest_non_repeat_subsequence(\"abcdef\", \"acd\") == 1\n    assert longest_non_repeat_subsequence(\"abcdef\", \"acdefgh\") == 5\n\n\nif __name__ == '__main__':\n    test()"
    },
    {
      "rank": 6,
      "score": 10.0,
      "candidate": "class Solution():\n    # @param A : string\n    # @return an integer\n    def countSubstrings(self, A):\n        n = len(A)\n        dp = [[0 for i in range(n)] for j in range(n)]\n        for i in range(n):\n            dp[i][i] = 1\n\n        for i in range(n - 1, -1, -1):\n            for j in range(i + 1, n):\n                if A[i] == A[j]:\n                    dp[i][j] = dp[i + 1][j - 1] + 2\n                else:\n                    dp[i][j] = max(dp[i + 1][j], dp[i][j - 1])\n        return dp[0][n - 1]\n\n\nA = \"aabcc\"\nA = \"aabc\"\ns = Solution()\nprint(s.countSubstrings(A))"
    },
    {
      "rank": 7,
      "score": 10.0,
      "candidate": "from collections import defaultdict\n\ndef longest_repeating_subsequences(str1, str2):\n    \"\"\"\n    >>> longest_repeating_subsequences(\"abc\", \"acb\")\n    2\n    \"\"\"\n    dp = defaultdict(int)\n    for i in range(len(str1)):\n        for j in range(len(str2)):\n            if str1[i] == str2[j]:\n                dp[(i, j)] = dp[(i-1, j-1)] + 1\n            else:\n                dp[(i, j)] = 0\n    return max(dp.values())\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 8,
      "score": 10.0,
      "candidate": "def count_longest_repeating_subsequences(input_string):\n    # Create a dictionary to store the longest repeating subsequences\n    longest_repeating_subsequences = {}\n\n    # Get the length of the input string\n    length = len(input_string)\n\n    # Iterate over the input string\n    for i in range(length):\n        for j in range(i + 1, length + 1):\n            # Get the current substring\n            current_substring = input_string[i:j]\n\n            # If the current substring is a key in the dictionary\n            if current_substring in longest_repeating_subsequences:\n                # If the current substring is of longer length than the stored length\n                if len(current_substring) > longest_repeating_subsequences[current_substring]:\n                    # Update the stored length\n                    longest_repeating_subsequences[current_substring] = len(current_substring)\n            # Else, if the current substring is not a key in the dictionary\n            else:\n                # Add the current substring as a key in the dictionary with the length as value\n                longest_repeating_subsequences[current_substring] = len(current_substring)\n\n    # Return the length of the dictionary\n    return len(longest_repeating_subsequences)\n\n\ndef main():\n    # Prompt the user for the input string\n    input_string = input(\"Please enter a string: \")\n\n    # Get the longest repeating subsequences\n    longest_repeating_subsequences = count_longest_repeating_subsequences(input_string)\n\n    # Display the result\n    print(\n        f\"The longest repeating subsequences are {longest_repeating_subsequences} with the input string '{input_string}'.\"\n    )\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 9,
      "score": 10.0,
      "candidate": "def longest_repeat(s):\n    n = len(s)\n    if n < 2:\n        return n\n\n    # dp[i][j] stores the longest repeat sequence with\n    # first part ending at s[i] and second part starting at s[j]\n    dp = [[0 for x in range(n)] for y in range(n)]\n\n    # If the first and the last string are same, then\n    # there is only one option, i.e., the whole string\n    for i in range(n):\n        dp[i][i] = 1\n\n    # Consider all substrings starting from second character\n    for i in range(1, n):\n        for j in range(0, n - i - 1):\n            k = i + j + 1\n\n            # If the first and last characters are same,\n            # then the current substring and the\n            # substring with first part at s[j] and\n            # second part at s[i] will have an extra character\n            if s[j] == s[k]:\n                dp[j][k] = 1 + dp[j + 1][k - 1]\n\n            # Else get the maximum of both the above cases\n            else:\n                dp[j][k] = max(dp[j + 1][k], dp[j][k - 1])\n\n    return dp[0][n - 1]\n\n\ndef main():\n    s = \"ababab\"\n    ans = longest_repeat(s)\n    print(ans)\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 10,
      "score": 10.0,
      "candidate": "from collections import defaultdict\n\n\ndef longest_repeating_subsequence(str1, str2):\n    # Create a table to store results of subproblems\n    dp = defaultdict(lambda: defaultdict(int))\n\n    # Base case\n    for i in range(len(str1)):\n        dp[i][i] = 1\n\n    # Fill the table in bottom-up manner\n    for i in range(len(str1)-1, -1, -1):\n        for j in range(i+1, len(str1)):\n            if str1[i] == str2[j]:\n                dp[i][j] = 1 + dp[i+1][j-1]\n\n    # Find the maximum value in dp[0][len(str1)-1]\n    max_count = 0\n    for i in range(len(str1)):\n        max_count = max(max_count, dp[i][len(str1)-1])\n\n    return max_count\n\n\ndef main():\n    str1 = \"abcde\"\n    str2 = \"baccd\"\n    print(longest_repeating_subsequence(str1, str2))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 11,
      "score": 8.0,
      "candidate": "def longest_repeating_subsequences(string):\n    n = len(string)\n    dp = [[0] * (n + 1) for _ in range(n + 1)]\n    count = [[0] * (n + 1) for _ in range(n + 1)]\n    for i in range(1, n + 1):\n        for j in range(1, n + 1):\n            if string[i - 1] == string[j - 1]:\n                dp[i][j] = 1 + dp[i - 1][j - 1]\n                count[i][j] = count[i - 1][j - 1] + 1\n            else:\n                dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])\n                count[i][j] = max(count[i - 1][j], count[i][j - 1])\n    return count[n][n]\n\n\nif __name__ == \"__main__\":\n    print(longest_repeating_subsequences(\"abababab\"))"
    },
    {
      "rank": 12,
      "score": 8.0,
      "candidate": "from collections import Counter\n\ndef longest_repeating_subsequences(input_str):\n    n = len(input_str)\n    dp = [0] * (n+1)\n    ans = 0\n    for i in range(1, n+1):\n        dp[i] = 1\n        for j in range(i-1, -1, -1):\n            if input_str[i-1] != input_str[j-1]:\n                dp[i] = max(dp[i], dp[j])\n            else:\n                dp[i] = max(dp[i], dp[j] + 1)\n            ans = max(ans, dp[i])\n    return ans\n\nprint(longest_repeating_subsequences(\"bbaabbbbaaa\"))\nprint(longest_repeating_subsequences(\"abab\"))\nprint(longest_repeating_subsequences(\"abba\"))\n\n# Time Complexity: O(n*n), where n is the length of the string\n# Space Complexity: O(n)"
    },
    {
      "rank": 13,
      "score": 8.0,
      "candidate": "from collections import Counter\n\ndef longest_repeating_subsequences(s):\n    \"\"\"\n    Returns number of longest repeating subsequences\n    \"\"\"\n    if not s:\n        return 0\n\n    cnt = Counter(s)\n    result = 0\n    for char in cnt:\n        if cnt[char] >= 2:\n            result += 1\n\n    if len(s) - result >= 2:\n        result += 1\n\n    return result\n\n\nif __name__ == \"__main__\":\n    assert longest_repeating_subsequences(\"aabca\") == 2\n    assert longest_repeating_subsequences(\"aabc\") == 1\n    assert longest_repeating_subsequences(\"aabcc\") == 2"
    },
    {
      "rank": 14,
      "score": 8.0,
      "candidate": "from collections import defaultdict\n\n\ndef longest_repeating_subsequence(s):\n    # Create a dictionary to store the count of each character\n    count = defaultdict(int)\n    for char in s:\n        count[char] += 1\n\n    # Remove the characters which have frequency = 1\n    for char in count.keys():\n        if count[char] == 1:\n            del count[char]\n\n    # Now we have to find the longest subsequence\n    longest_seq = []\n    for char in s:\n        if char in count:\n            longest_seq.append(char)\n\n    return len(longest_seq)\n\n\nif __name__ == \"__main__\":\n    s = \"abcabcabcab\"\n    print(longest_repeating_subsequence(s))"
    },
    {
      "rank": 15,
      "score": 8.0,
      "candidate": "def longest_repeating_subsequences(str1, str2):\n    n = len(str1)\n    m = len(str2)\n    dp = [[0 for _ in range(m + 1)] for _ in range(n + 1)]\n    ans = 0\n    for i in range(1, n + 1):\n        for j in range(1, m + 1):\n            if str1[i - 1] == str2[j - 1]:\n                dp[i][j] = 1 + dp[i - 1][j - 1]\n            else:\n                dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])\n\n            ans = max(ans, dp[i][j])\n    return ans\n\n\nif __name__ == '__main__':\n    print(longest_repeating_subsequences(\"abc\", \"def\"))"
    },
    {
      "rank": 16,
      "score": 8.0,
      "candidate": "def count_longest_repeating_subsequences(string):\n    if len(string) < 2:\n        return 0\n\n    longest_repeating_subsequences = 0\n    for i in range(len(string)):\n        for j in range(i + 1, len(string)):\n            if string[i] != string[j] and string[i:j] in string[j:]:\n                longest_repeating_subsequences += 1\n    return longest_repeating_subsequences\n\n\nprint(count_longest_repeating_subsequences(\"abcabcabcabc\"))"
    },
    {
      "rank": 17,
      "score": 8.0,
      "candidate": "from collections import Counter\n\n\ndef longest_repeating_subsequence(str1, str2):\n    c1 = Counter(str1)\n    c2 = Counter(str2)\n\n    result = 0\n\n    for key in c1.keys():\n        if key in c2.keys() and c1[key] <= c2[key]:\n            result += c1[key]\n\n    return result\n\n\nif __name__ == \"__main__\":\n    str1 = \"abcabcabc\"\n    str2 = \"abcabce\"\n    result = longest_repeating_subsequence(str1, str2)\n    print(result)"
    },
    {
      "rank": 18,
      "score": 8.0,
      "candidate": "def count_repeating_subsequences(input_string: str) -> int:\n    \"\"\"\n    input: str\n    output: int\n    \"\"\"\n    if not input_string:\n        return 0\n\n    count_repeating_subsequences = 0\n    n = len(input_string)\n\n    # Create a table to store counts of\n    # longest common subsequences of length\n    # from 1 to n\n    LCS_table = [0] * (n + 1)\n\n    # Count of longest common subsequences\n    # of length 1. Similar to single character\n    # pattern count function. Initialize count\n    # array with all one\u2019s\n    for i in range(n):\n        LCS_table[i + 1] = 1\n\n    # Process all characters after first\n    # character\n    for window in range(2, n + 1):\n\n        # Process all characters before current\n        # character\n        for i in range(0, n - window + 1):\n\n            # Find the number of matches in\n            # current window of size window\n            # with first character as current\n            # character.\n            first_char = input_string[i]\n            first_char_count = 0\n            for j in range(i, n):\n                if first_char == input_string[j]:\n                    first_char_count += 1\n                else:\n                    break\n\n            # Find the number of matches in\n            # current window of size window\n            # with last character as current\n            # character.\n            last_char = input_string[n - window]\n            last_char_count = 0\n            for j in range(n - window, n):\n                if last_char == input_string[j]:\n                    last_char_count += 1\n                else:\n                    break\n\n            # If first and last character count\n            # match then current window is a\n            # longest common subsequence.\n            # Otherwise not.\n            if first_char_count == last_char_count:\n                LCS_table[window] += 1\n\n    # Traverse table to find the longest\n    # repeating"
    },
    {
      "rank": 19,
      "score": 8.0,
      "candidate": "def count_subsequences(str1, str2):\n    count = 0\n    for i in range(len(str1)):\n        if str1[i] != str2[i]:\n            count += 1\n    return count\n\n\ndef longest_subsequence_count(str1, str2):\n    return count_subsequences(str1, str2) + count_subsequences(str2, str1)\n\n\ndef main():\n    str1 = \"abc\"\n    str2 = \"bcd\"\n    print(longest_subsequence_count(str1, str2))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 20,
      "score": 8.0,
      "candidate": "from collections import defaultdict\n\ndef count_subsequences(input_string):\n    d = defaultdict(int)\n    for i in range(len(input_string)):\n        for j in range(i+1, len(input_string)+1):\n            d[input_string[i:j]] += 1\n    return len([v for v in d.values() if v > 1])\n\nprint(count_subsequences(\"abcabcbb\"))\nprint(count_subsequences(\"bbbbb\"))\nprint(count_subsequences(\"pwwkew\"))\nprint(count_subsequences(\"abcda\"))\nprint(count_subsequences(\"aabcaab\"))"
    },
    {
      "rank": 21,
      "score": 8.0,
      "candidate": "def count_non_overlapping_sub_seq(string):\n    n = len(string)\n    # Create a table to store results of subproblems\n    dp = [[0 for i in range(n)] for j in range(n)]\n\n    # Fill d[][] in bottom up manner\n    for i in range(n):\n        for j in range(i, n):\n            # If the string is of length 1, then no. of subsequences is 1\n            if (i == j):\n                dp[i][j] = 1\n            else:\n                if (string[i] == string[j] and i != j):\n                    dp[i][j] = dp[i + 1][j - 1] + 2\n                else:\n                    dp[i][j] = dp[i + 1][j] + dp[i][j - 1] - dp[i + 1][j - 1]\n    return dp[0][n - 1]\n\n\nif __name__ == \"__main__\":\n    string = \"aabc\"\n    print(count_non_overlapping_sub_seq(string))\n    string = \"abba\"\n    print(count_non_overlapping_sub_seq(string))\n    string = \"abcb\"\n    print(count_non_overlapping_sub_seq(string))\n    string = \"abc\"\n    print(count_non_overlapping_sub_seq(string))\n    string = \"abca\"\n    print(count_non_overlapping_sub_seq(string))\n    string = \"abcabba\"\n    print(count_non_overlapping_sub_seq(string))\n    string = \"abcabcabcabc\"\n    print(count_non_overlapping_sub_seq(string))\n    string = \"abcabcabcabca\"\n    print(count_non_overlapping_sub_seq(string))\n    string = \"abcdabcabcd\"\n    print(count_non_overlapping_sub_seq(string))\n    string = \"abcdabcabcdabcd\""
    },
    {
      "rank": 22,
      "score": 8.0,
      "candidate": "def longest_repeat(s):\n    n = len(s)\n    if n <= 1:\n        return n\n\n    dp = [[0] * n for _ in range(n)]\n\n    for i in range(n):\n        dp[i][i] = 1\n\n    max_len = 1\n    for l in range(2, n + 1):\n        for i in range(n - l + 1):\n            j = i + l - 1\n            if s[i] == s[j] and l == 2:\n                dp[i][j] = 2\n            elif s[i] == s[j]:\n                dp[i][j] = dp[i + 1][j - 1] + 2\n            else:\n                dp[i][j] = max(dp[i + 1][j], dp[i][j - 1])\n\n            max_len = max(max_len, dp[i][j])\n\n    return max_len\n\n\nprint(longest_repeat(\"ababab\"))\nprint(longest_repeat(\"abcabc\"))\nprint(longest_repeat(\"abc\"))\nprint(longest_repeat(\"abcabcabc\"))"
    },
    {
      "rank": 23,
      "score": 8.0,
      "candidate": "from collections import defaultdict\n\n\ndef longest_repeating_subsequences(string):\n    dp = defaultdict(int)\n    max_len = 0\n    for i in range(len(string)):\n        for j in range(i+1, len(string)+1):\n            if string[i] == string[j-1]:\n                dp[i, j-1] = dp[i, j-2] + 1\n            else:\n                dp[i, j-1] = 0\n            max_len = max(max_len, dp[i, j-1])\n    return max_len\n\n\ndef main():\n    string = \"abcabcbb\"\n    print(longest_repeating_subsequences(string))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 24,
      "score": 8.0,
      "candidate": "def count_repeating_subsequences(str1, str2):\n    # Write your code here.\n\tif len(str1) > len(str2):\n\t\tstr1, str2 = str2, str1\n\t\n\tdp = [[0 for _ in range(len(str1) + 1)] for _ in range(len(str2) + 1)]\n\t\n\tfor i in range(1, len(str2) + 1):\n\t\tfor j in range(1, len(str1) + 1):\n\t\t\tif str2[i - 1] == str1[j - 1]:\n\t\t\t\tdp[i][j] = dp[i - 1][j - 1] + 1\n\t\t\telse:\n\t\t\t\tdp[i][j] = max(dp[i - 1][j], dp[i][j - 1])\n\t\t\t\t\n\treturn dp[-1][-1]\n\n\n\ndef main():\n    print(\"Total length: \" +\n          str(count_repeating_subsequences(\"abcabcbb\", \"abcabcbb\")))\n    print(\"Total length: \" +\n          str(count_repeating_subsequences(\"abcabcbb\", \"bbbbbbbb\")))\n    print(\"Total length: \" +\n          str(count_repeating_subsequences(\"abcabc\", \"abcabc\")))\n    print(\"Total length: \" +\n          str(count_repeating_subsequences(\"abc\", \"abc\")))\n    print(\"Total length: \" +\n          str(count_repeating_subsequences(\"abc\", \"cba\")))\n    print(\"Total length: \" +\n          str(count_repeating_subsequences(\"abc\", \"cbd\")))\n    print(\"Total length: \" +\n          str(count_repeating_subsequences(\"abc\", \"acb\")))\n    print(\"Total length: \" +\n          str(count_repeating_subsequences(\"abc\", \"bbc\")))\n\n\nmain()"
    },
    {
      "rank": 25,
      "score": 8.0,
      "candidate": "def longest_repeating_subsequence(str1, str2):\n    \"\"\"\n    Time Complexity: O(n*m)\n    Space Complexity: O(n*m)\n    where n and m are length of string1 and string2 respectively.\n    \"\"\"\n    if str1 == \"\" or str2 == \"\":\n        return 0\n    elif len(str1) == 1 and len(str2) == 1:\n        if str1 == str2:\n            return 1\n        else:\n            return 0\n\n    dp = [[0 for _ in range(len(str2) + 1)] for _ in range(len(str1) + 1)]\n\n    for i in range(1, len(str1) + 1):\n        for j in range(1, len(str2) + 1):\n            if str1[i-1] == str2[j-1]:\n                dp[i][j] = dp[i-1][j-1] + 1\n            else:\n                dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n\n    return dp[-1][-1]\n\n\nif __name__ == \"__main__\":\n    str1 = \"abcd\"\n    str2 = \"cbad\"\n    print(longest_repeating_subsequence(str1, str2))\n\n    str1 = \"geeksforgeeks\"\n    str2 = \"forgeeksgeeks\"\n    print(longest_repeating_subsequence(str1, str2))\n\n    str1 = \"abc\"\n    str2 = \"abc\"\n    print(longest_repeating_subsequence(str1, str2))"
    },
    {
      "rank": 26,
      "score": 8.0,
      "candidate": "from collections import Counter\n\n\ndef max_non_repeat(string):\n    count = Counter()\n    max_len = 0\n\n    for i in range(len(string)):\n        if count[string[i]] > 0:\n            temp_len = count.most_common()[0][1]\n            max_len = max(max_len, temp_len)\n            count = Counter()\n        else:\n            count[string[i]] += 1\n\n    return max_len\n\n\nif __name__ == \"__main__\":\n    assert max_non_repeat(\"aabacbebebe\") == 5\n    assert max_non_repeat(\"aaaa\") == 1\n    assert max_non_repeat(\"abc\") == 1\n    assert max_non_repeat(\"aabacbebebebebebebebebebebebebebebebebebebebebebebebebebebebebebebebebebebebebebebebebebebebebebebebebebebebebebebebebebebebebebebebebebebebebebebebebebebebebebebebebebebebebebebebebebebebebebebebebebebebebebebebebebebebebebebebebebebebebebebebebebebebebebebebebebebebebebebebebebebebebebebebebebebebebebebebebebebebebebebebebebebebebebebebebebebebebebebebebebebebebebebebebebebebebebebebebebebebebebebebebebebebebebebebebebebebebebebebebebebebebebebebebebebebebebebebebebebebebebebebebebebebebebebebebebebebebebebebebebebebebebebebebebebebebebebebebebebebebebebebebebebebebebebebebebebebebebebebebebebebebebebebebebebebebebebebebebebebebebebeb"
    },
    {
      "rank": 27,
      "score": 8.0,
      "candidate": "def longest_rep_subseq(str1, str2):\n    \"\"\"\n    Time Complexity: O(n*m)\n    Space Complexity: O(n*m)\n    \"\"\"\n    len1 = len(str1)\n    len2 = len(str2)\n    dp = [[0 for _ in range(len2 + 1)] for _ in range(len1 + 1)]\n    for i in range(len1 + 1):\n        dp[i][0] = 0\n    for i in range(len2 + 1):\n        dp[0][i] = 0\n    max_len = 0\n    for i in range(1, len1 + 1):\n        for j in range(1, len2 + 1):\n            if str1[i - 1] == str2[j - 1]:\n                dp[i][j] = 1 + dp[i - 1][j - 1]\n            else:\n                dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])\n            max_len = max(max_len, dp[i][j])\n    return max_len\n\nif __name__ == \"__main__\":\n    str1 = \"abcba\"\n    str2 = \"abcbc\"\n    print(longest_rep_subseq(str1, str2))"
    },
    {
      "rank": 28,
      "score": 8.0,
      "candidate": "from collections import Counter\n\n\ndef longest_repeat(str1, str2):\n    res = 0\n    count = 0\n    c1 = Counter(str1)\n    c2 = Counter(str2)\n    for k in c1.keys():\n        if k in c2.keys():\n            if c1[k] < c2[k]:\n                count = c1[k]\n            else:\n                count = c2[k]\n            res = max(res, count)\n    return res\n\n\nif __name__ == \"__main__\":\n    print(longest_repeat(\"abcdef\", \"acbd\"))\n    print(longest_repeat(\"abcdef\", \"abdce\"))\n    print(longest_repeat(\"abcdef\", \"acbde\"))\n    print(longest_repeat(\"abcdef\", \"acbd\"))"
    },
    {
      "rank": 29,
      "score": 8.0,
      "candidate": "def count_subsequences(string):\n    if len(string) == 0:\n        return 0\n    longest_subsequences = 0\n    for i in range(len(string)):\n        for j in range(i + 1, len(string)):\n            if string[i] == string[j]:\n                continue\n            else:\n                longest_subsequences += 1\n    return longest_subsequences\n\n\nif __name__ == \"__main__\":\n    assert count_subsequences(\"\") == 0\n    assert count_subsequences(\"abc\") == 3\n    assert count_subsequences(\"abb\") == 2\n    assert count_subsequences(\"aba\") == 2\n    assert count_subsequences(\"abba\") == 4\n    assert count_subsequences(\"abab\") == 3\n    assert count_subsequences(\"abcabc\") == 6\n    assert count_subsequences(\"abcabcabc\") == 9\n    assert count_subsequences(\"abcabca\") == 6\n    assert count_subsequences(\"abcabcabca\") == 9\n    assert count_subsequences(\"abcabcaabc\") == 9\n    assert count_subsequences(\"abcabcabcaabc\") == 12"
    },
    {
      "rank": 30,
      "score": 8.0,
      "candidate": "from collections import Counter\n\ndef count_longest_non_repeating_subsequences(str1, str2):\n    str1_count = Counter(str1)\n    str2_count = Counter(str2)\n\n    return len(str1_count & str2_count)\n\n\nif __name__ == \"__main__\":\n    str1 = input()\n    str2 = input()\n    result = count_longest_non_repeating_subsequences(str1, str2)\n    print(result)"
    },
    {
      "rank": 31,
      "score": 8.0,
      "candidate": "from collections import defaultdict\n\ndef longest_repeating_subseq(str1, str2):\n    \"\"\"\n    Returns the longest repeating subsequence such that the two subsequences don\u2019t have same string characters at same positions.\n    \"\"\"\n    if str1 is None or str2 is None:\n        raise TypeError(\"str1 or str2 cannot be None\")\n\n    if len(str1) == 0 or len(str2) == 0:\n        return 0\n\n    memo = defaultdict(int)\n\n    for i in range(len(str1)):\n        for j in range(len(str2)):\n            if str1[i] == str2[j]:\n                memo[i, j] = 1 + memo[i-1, j-1]\n            else:\n                memo[i, j] = max(memo[i-1, j], memo[i, j-1])\n\n    return memo[len(str1)-1, len(str2)-1]\n\nprint(longest_repeating_subseq(\"abcabc\", \"abcabc\"))\nprint(longest_repeating_subseq(\"abcxabc\", \"abcabc\"))\nprint(longest_repeating_subseq(\"abcxabc\", \"abcabcx\"))\nprint(longest_repeating_subseq(\"abcxabcy\", \"abcabc\"))\nprint(longest_repeating_subseq(\"abcxabcy\", \"abcabcx\"))\nprint(longest_repeating_subseq(\"abcxabcy\", \"abcabcxy\"))\nprint(longest_repeating_subseq(\"abcxabcy\", \"abcabcxyz\"))"
    },
    {
      "rank": 32,
      "score": 8.0,
      "candidate": "def longest_repeat(str):\n    count = 0\n    for i in range(len(str)):\n        for j in range(i + 1, len(str)):\n            if str[i] == str[j]:\n                count += 1\n    return count\n\n\nstr = \"abcabcabc\"\nprint(longest_repeat(str))"
    },
    {
      "rank": 33,
      "score": 8.0,
      "candidate": "from collections import defaultdict\n\ndef count_max_sub_seq_len(input_string):\n    if not input_string:\n        return 0\n\n    max_len = 0\n    dp_table = defaultdict(int)\n\n    for i in range(len(input_string)):\n        for j in range(i + 1, len(input_string) + 1):\n            sub_str = input_string[i:j]\n            if sub_str in dp_table:\n                dp_table[sub_str] += 1\n            else:\n                dp_table[sub_str] = 1\n            max_len = max(max_len, dp_table[sub_str])\n\n    return max_len\n\n\nif __name__ == \"__main__\":\n    assert count_max_sub_seq_len(\"abcabcabc\") == 3\n    assert count_max_sub_seq_len(\"abc\") == 1\n    assert count_max_sub_seq_len(\"abcda\") == 2\n    assert count_max_sub_seq_len(\"abcbabc\") == 3\n    assert count_max_sub_seq_len(\"\") == 0"
    },
    {
      "rank": 34,
      "score": 8.0,
      "candidate": "from collections import Counter\n\n\ndef non_repeat_sub_seq(string):\n    c = Counter(string)\n    res = 0\n\n    for i in range(1, len(string)):\n        res += c[string[i]] < 2\n\n    return res\n\n\nif __name__ == \"__main__\":\n    assert non_repeat_sub_seq(\"abcabc\") == 3\n    assert non_repeat_sub_seq(\"abcabce\") == 4"
    },
    {
      "rank": 35,
      "score": 8.0,
      "candidate": "from collections import defaultdict\n\ndef count_longest_subsequence(string):\n    n = len(string)\n    dp = [[0 for _ in range(n+1)] for _ in range(n+1)]\n\n    for i in range(1, n+1):\n        for j in range(i+1, n+1):\n            if string[i-1] == string[j-1]:\n                dp[i][j] = 1 + dp[i-1][j-1]\n            else:\n                dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n\n    return dp[n][n]\n\n\nif __name__ == \"__main__\":\n    print(count_longest_subsequence(\"abcabcabc\"))\n    print(count_longest_subsequence(\"abcabcabcd\"))"
    },
    {
      "rank": 36,
      "score": 8.0,
      "candidate": "from collections import defaultdict\n\n\ndef longest_repeat(str_1, str_2):\n    str_1 = str_1[::-1]\n    str_2 = str_2[::-1]\n    dp = defaultdict(int)\n    dp[str_1[0]] = 1\n    dp[str_2[0]] = 1\n    count = 0\n    for i in range(1, len(str_1)):\n        if str_1[i] == str_1[i-1]:\n            dp[str_1[i]] = dp[str_1[i-1]]+1\n        else:\n            dp[str_1[i]] = 1\n        count = max(count, dp[str_1[i]])\n    for i in range(1, len(str_2)):\n        if str_2[i] == str_2[i-1]:\n            dp[str_2[i]] = dp[str_2[i-1]]+1\n        else:\n            dp[str_2[i]] = 1\n        count = max(count, dp[str_2[i]])\n    return count\n\n\nif __name__ == \"__main__\":\n    str_1 = input()\n    str_2 = input()\n    print(longest_repeat(str_1, str_2))"
    },
    {
      "rank": 37,
      "score": 8.0,
      "candidate": "from collections import defaultdict\n\n\ndef longest_repeating_subsequence(str1, str2):\n    dp = defaultdict(int)\n\n    for i in range(len(str1)):\n        for j in range(len(str2)):\n            if str1[i] == str2[j]:\n                dp[i, j] = dp[i - 1, j - 1] + 1\n            else:\n                dp[i, j] = max(dp[i - 1, j], dp[i, j - 1])\n\n    return dp[len(str1) - 1, len(str2) - 1]\n\n\nif __name__ == \"__main__\":\n    print(longest_repeating_subsequence(\"geeksforgeeks\", \"forgeeks\"))\n    print(longest_repeating_subsequence(\"aaaba\", \"aaba\"))"
    },
    {
      "rank": 38,
      "score": 8.0,
      "candidate": "def Longest_Repeating_Subsequence(str):\n    n = len(str)\n\n    # Create a table to store results of subproblems\n    dp = [[0 for x in range(n+1)] for y in range(n+1)]\n\n    # Fill d[][] in bottom up manner\n    for i in range(n+1):\n        for j in range(n+1):\n            # If first string is empty, only option is to\n            # insert all characters of second string\n            if (i == 0):\n                dp[i][j] = j\n            # If second string is empty, only option is to\n            # remove all characters of second string\n            elif (j == 0):\n                dp[i][j] = i\n            # If last characters are same, ignore last char\n            # and recur for remaining string\n            elif (str[i-1] == str[j-1] and i != j):\n                dp[i][j] = 1 + dp[i-1][j-1]\n            else:\n                dp[i][j] = max(dp[i][j-1], dp[i-1][j])\n    return dp[n][n]\n\n\nif __name__ == \"__main__\":\n    str = \"ABCABB\"\n    print(Longest_Repeating_Subsequence(str))"
    },
    {
      "rank": 39,
      "score": 8.0,
      "candidate": "from collections import Counter\ndef longest_repetitions(s):\n    c = Counter(s)\n    return len([i for i, j in c.items() if j > 1])\n\nif __name__ == \"__main__\":\n    assert longest_repetitions(\"ababab\") == 2\n    assert longest_repetitions(\"aabba\") == 1\n    assert longest_repetitions(\"aaaaaa\") == 3\n    assert longest_repetitions(\"abcabcabc\") == 2"
    },
    {
      "rank": 40,
      "score": 8.0,
      "candidate": "from collections import defaultdict\n\ndef longest_non_repeat_subsequence(string):\n    n = len(string)\n    longest_subsequence = 0\n\n    # Create an auxiliary array of size 26 * n to store solutions of subproblems.\n    # The value stored at i * n + j would represent the longest non-repeat subsequence of\n    # first i characters in the given string such that the last character inserted is j.\n    sol = [[-1 for _ in range(n)] for _ in range(n)]\n\n    # sol[i][j] would contain length of the longest non-repeat subsequence of first i characters\n    # in the given string such that the last character inserted is j.\n    for i in range(n):\n        for j in range(n):\n            if i == 0:\n                # If ith character is same as jth character, we will consider this character as last character\n                # and will add 1 to the length.\n                if string[i] == string[j]:\n                    sol[i][j] = 1\n                else:\n                    sol[i][j] = 0\n            else:\n                # If the characters at ith and jth position are same, we need to exclude this character.\n                if string[i] == string[j]:\n                    sol[i][j] = sol[i - 1][j - 1]\n                else:\n                    sol[i][j] = max(sol[i - 1][j], sol[i][j - 1])\n\n            longest_subsequence = max(longest_subsequence, sol[i][j])\n\n    return longest_subsequence\n\n\nif __name__ == \"__main__\":\n    print(\"Enter a string:\")\n    string = input().strip()\n    print(longest_non_repeat_subsequence(string))"
    },
    {
      "rank": 41,
      "score": 8.0,
      "candidate": "from collections import defaultdict\n\n\ndef count_longest_subsequence(str1, str2):\n    cache = defaultdict(int)\n    max_length = 0\n    for i in range(len(str1)):\n        for j in range(i + 1, len(str1) + 1):\n            sub_str = str1[i:j]\n            cache[sub_str] += 1\n            if j - i > max_length:\n                max_length = j - i\n    count = 0\n    for key, val in cache.items():\n        if val == max_length:\n            count += 1\n    return count\n\n\nprint(count_longest_subsequence(\"abc\", \"acb\"))\nprint(count_longest_subsequence(\"abc\", \"abc\"))\nprint(count_longest_subsequence(\"abc\", \"abcc\"))\nprint(count_longest_subsequence(\"abc\", \"bac\"))\nprint(count_longest_subsequence(\"abc\", \"bca\"))\nprint(count_longest_subsequence(\"abc\", \"cba\"))\nprint(count_longest_subsequence(\"abc\", \"bacb\"))\nprint(count_longest_subsequence(\"abc\", \"cab\"))"
    },
    {
      "rank": 42,
      "score": 8.0,
      "candidate": "from collections import defaultdict\n\ndef longest_repeat(str1):\n    \"\"\"\n    Time Complexity: O(n^2)\n    Space Complexity: O(n^2)\n    \"\"\"\n    cache = defaultdict(int)\n    longest = 0\n    for i in range(len(str1)):\n        for j in range(i+1, len(str1)+1):\n            sub_str = str1[i:j]\n            if sub_str in cache:\n                longest = max(longest, cache[sub_str] + 1)\n            else:\n                cache[sub_str] = 1\n    return longest\n\ndef longest_repeat_v2(str1):\n    \"\"\"\n    Time Complexity: O(n^2)\n    Space Complexity: O(n^2)\n    \"\"\"\n    cache = defaultdict(int)\n    longest = 0\n    for i in range(len(str1)):\n        for j in range(i+1, len(str1)+1):\n            sub_str = str1[i:j]\n            cache[sub_str] += 1\n            if cache[sub_str] == 2:\n                longest = max(longest, cache[sub_str])\n    return longest\n\nif __name__ == '__main__':\n    print(\"Enter a string:\")\n    str1 = input()\n    print(longest_repeat(str1))\n    print(longest_repeat_v2(str1))\n\n    \"\"\"\n    Time complexity: O(n^2)\n\n    Input: \"aabcdefa\"\n    Output: 2\n    Explanation: Substring \"abc\" and \"def\"\n\n    Input: \"aabcdefgabc\"\n    Output: 3\n    Explanation: Substring \"abc\", \"abc\", \"abc\"\n\n    Input: \"aabcdefgabcab\"\n    Output: 2\n    Explanation: Substring \"abc\", \"abc\"\n\n    Input: \"aaaaaaaaaa\"\n    Output: 2\n    Explanation: Substring \"aa\", \"aa\"\n\n    Input: \"aaa\"\n    Output: 2\n    Ex"
    },
    {
      "rank": 43,
      "score": 8.0,
      "candidate": "def longest_rep_subseq(input):\n    n = len(input)\n    table = [[0 for _ in range(n+1)] for _ in range(n+1)]\n\n    for i in range(1, n+1):\n        for j in range(i+1, n+1):\n            if input[i-1] == input[j-1] and i != j:\n                table[i][j] = 1 + table[i-1][j-1]\n            else:\n                table[i][j] = max(table[i-1][j], table[i][j-1])\n    return table[n][n]\n\n\nif __name__ == \"__main__\":\n    input_str = \"abcabc\"\n    print(\"Maximum length of longest repeating subsequences is\", longest_rep_subseq(input_str))"
    },
    {
      "rank": 44,
      "score": 8.0,
      "candidate": "def longest_repeating_subsequence(str1, str2):\n    m = len(str1)\n    n = len(str2)\n    # create a table to store results of subproblems\n    dp = [[0 for x in range(n+1)] for x in range(m+1)]\n\n    # strings cannot be equal\n    if str1 == str2:\n        return 0\n\n    # strings with length 0 have 0 longest repeating subsequences\n    if m == 0 or n == 0:\n        return 0\n\n    # if last character of both strings match, then longest repeating subsequence is 1 +\n    # the longest repeating subsequence for substring ending at previous position\n    if str1[m-1] == str2[n-1]:\n        dp[m-1][n-1] = 1 + dp[m-2][n-2]\n    # if last character of both strings don\u2019t match, then longest repeating subsequence is 0 +\n    # the longest repeating subsequence for substring ending at previous position\n    else:\n        dp[m-1][n-1] = max(dp[m-2][n], dp[m-1][n-2])\n\n    # if last character of both strings match, then longest repeating subsequence is 1 +\n    # the longest repeating subsequence for substring ending at previous position\n    if str1[m-1] == str2[n]:\n        dp[m-1][n] = 1 + dp[m-2][n-1]\n    # if last character of both strings don\u2019t match, then longest repeating subsequence is 0 +\n    # the longest repeating subsequence for substring ending at previous position\n    else:\n        dp[m-1][n] = max(dp[m-2][n], dp[m-1][n-1])\n\n    # for remaining positions, the longest repeating subsequence is the maximum of the longest\n    # repeating subsequences for substring ending at previous position\n    for i in range(m-2, -1, -1):\n        for j in range(n-2, -1, -1):\n            if str1[i] == str"
    },
    {
      "rank": 45,
      "score": 8.0,
      "candidate": "def longest_repeating_subsequence(str):\n    # Write your code here.\n    n = len(str)\n    dp = [[0 for _ in range(n+1)] for _ in range(n+1)]\n\n    for i in range(1, n+1):\n        for j in range(i+1, n+1):\n            if str[i-1] == str[j-1]:\n                dp[i][j] = dp[i-1][j-1] + 1\n            else:\n                dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n\n    return dp[-1][-1]"
    },
    {
      "rank": 46,
      "score": 8.0,
      "candidate": "from collections import defaultdict\n\ndef longest_repeating_subsequence(str):\n    \"\"\"\n    Time Complexity: O(n^2)\n    Space Complexity: O(n)\n    \"\"\"\n    n = len(str)\n    # dp[i][j] stores the longest repeating subsequence ending at str[i] and str[j]\n    dp = [[0 for _ in range(n)] for _ in range(n)]\n    # dp[i][j] stores the longest repeating subsequence ending at str[i] and str[j]\n    # with same characters at same positions.\n    dp_same_pos = [[0 for _ in range(n)] for _ in range(n)]\n\n    for i in range(n):\n        for j in range(i+1, n):\n            if str[i] == str[j]:\n                dp_same_pos[i][j] = dp_same_pos[i][j-1] + 1\n\n    for i in range(n):\n        for j in range(i+1, n):\n            if str[i] != str[j]:\n                dp[i][j] = max(dp[i][j-1], dp[i+1][j])\n            else:\n                dp[i][j] = max(dp[i][j-1], dp[i+1][j], dp_same_pos[i+1][j])\n\n    return dp[0][n-1]\n\n\nif __name__ == \"__main__\":\n    str = \"geeksforgeeks\"\n    print(longest_repeating_subsequence(str))\n\n    str = \"aaaaa\"\n    print(longest_repeating_subsequence(str))\n\n    str = \"abcabcabcabc\"\n    print(longest_repeating_subsequence(str))\n\n    str = \"abcabca\"\n    print(longest_repeating_subsequence(str))\n\n    str = \"abcabc\"\n    print(longest_repeating_subsequence(str))"
    },
    {
      "rank": 47,
      "score": 8.0,
      "candidate": "def longest_repeating_subsequence(str):\n    n = len(str)\n    count = [0] * n\n    for i in range(1, n):\n        for j in range(0, i):\n            if str[i] == str[j] and i - j < count[i]:\n                count[i] = i - j + 1\n\n    return max(count)\n\n\nprint(longest_repeating_subsequence(\"abcabcbb\"))\nprint(longest_repeating_subsequence(\"bbbbb\"))\nprint(longest_repeating_subsequence(\"pwwkew\"))\nprint(longest_repeating_subsequence(\"abcnjklabc\"))"
    },
    {
      "rank": 48,
      "score": 8.0,
      "candidate": "from collections import defaultdict\n\n\ndef count_repeating_subsequences(string):\n    result = []\n    subseq = defaultdict(int)\n\n    for i in range(len(string)):\n        for j in range(i + 1, len(string) + 1):\n            subseq[string[i:j]] += 1\n\n    for i in subseq.keys():\n        if subseq[i] > 1:\n            result.append(i)\n\n    return result\n\n\ndef main():\n    result = count_repeating_subsequences(\"abcabcabc\")\n    assert len(result) == 3\n    assert \"abc\" in result\n    assert \"bca\" in result\n    assert \"cab\" in result\n\n    result = count_repeating_subsequences(\"abcabcbc\")\n    assert len(result) == 3\n    assert \"abc\" in result\n    assert \"bca\" in result\n    assert \"cab\" in result\n\n    result = count_repeating_subsequences(\"abcabcab\")\n    assert len(result) == 2\n    assert \"abc\" in result\n    assert \"bca\" in result\n\n    result = count_repeating_subsequences(\"abcabc\")\n    assert len(result) == 1\n    assert \"abc\" in result\n\n    result = count_repeating_subsequences(\"abcab\")\n    assert len(result) == 1\n    assert \"abc\" in result\n\n    result = count_repeating_subsequences(\"abab\")\n    assert len(result) == 0\n\n    result = count_repeating_subsequences(\"ab\")\n    assert len(result) == 0\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 49,
      "score": 8.0,
      "candidate": "from collections import defaultdict\n\ndef longest_repeating_subsequence(str):\n    n = len(str)\n    if n == 0:\n        return 0\n    dp = [0] * n\n    prev = [0] * n\n    for i in range(n):\n        for j in range(i+1, n):\n            if str[i] == str[j]:\n                dp[j] = dp[i] + 1\n            else:\n                dp[j] = 1\n            prev[j] = max(prev[j-1], dp[j])\n\n    return prev[-1]\n\n\n\nif __name__ == \"__main__\":\n    str = \"abcabcabc\"\n    print(longest_repeating_subsequence(str))"
    },
    {
      "rank": 50,
      "score": 8.0,
      "candidate": "def count_longest_repeating_subsequences(string):\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(n)\n\n    Args:\n        string (str): input string\n\n    Returns:\n        int: length of longest repeating subsequences\n    \"\"\"\n    # initialize a lookup table to store the longest repeating subsequences\n    longest_repeating_subsequences = [0] * len(string)\n    # set the first longest repeating subsequences to 1\n    longest_repeating_subsequences[0] = 1\n\n    # iterate over the string\n    for i in range(1, len(string)):\n        # iterate over the previous longest repeating subsequences\n        for j in range(i):\n            # if the current string is a subsequence of the previous longest repeating subsequences\n            if string[i] == string[j]:\n                # add the previous longest repeating subsequences to the current longest repeating subsequences\n                longest_repeating_subsequences[i] = longest_repeating_subsequences[j] + 1\n\n    return max(longest_repeating_subsequences)\n\n\ndef main():\n\n    print(\"Maximum Length of Longest Repeating Subsequences: \" +\n          str(count_longest_repeating_subsequences(\"abcabcbb\")))\n    print(\"Maximum Length of Longest Repeating Subsequences: \" +\n          str(count_longest_repeating_subsequences(\"bbbbb\")))\n    print(\"Maximum Length of Longest Repeating Subsequences: \" +\n          str(count_longest_repeating_subsequences(\"pwwkew\")))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 51,
      "score": 8.0,
      "candidate": "from collections import defaultdict\n\ndef longest_repeating_subsequences(s):\n    n = len(s)\n    dp = [[0 for _ in range(n)] for _ in range(n)]\n    count = [[0 for _ in range(n)] for _ in range(n)]\n    for i in range(n):\n        dp[i][i] = 1\n        count[i][i] = 1\n    for l in range(2, n + 1):\n        for i in range(n - l + 1):\n            j = i + l - 1\n            if s[i] == s[j]:\n                dp[i][j] = 1 + dp[i + 1][j - 1]\n                count[i][j] = count[i + 1][j - 1] + 1\n            else:\n                dp[i][j] = max(dp[i + 1][j], dp[i][j - 1])\n                count[i][j] = max(count[i + 1][j], count[i][j - 1])\n    return count[0][n - 1]\n\n\nif __name__ == \"__main__\":\n    s = \"abcabcabc\"\n    print(longest_repeating_subsequences(s))"
    },
    {
      "rank": 52,
      "score": 8.0,
      "candidate": "def count_longest_repeating_subsequences(str1, str2):\n    if not str1 or not str2:\n        return 0\n\n    dp = [[0 for _ in range(len(str1) + 1)] for _ in range(len(str2) + 1)]\n    longest_repeating_subsequences = 0\n\n    for i in range(1, len(str2) + 1):\n        for j in range(1, len(str1) + 1):\n            if str2[i - 1] == str1[j - 1]:\n                dp[i][j] = dp[i - 1][j - 1] + 1\n            else:\n                dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])\n\n            longest_repeating_subsequences = max(longest_repeating_subsequences, dp[i][j])\n\n    return longest_repeating_subsequences\n\n\ndef main():\n    str1 = \"abcdef\"\n    str2 = \"acbdef\"\n    print(count_longest_repeating_subsequences(str1, str2))\n\n\nmain()"
    },
    {
      "rank": 53,
      "score": 8.0,
      "candidate": "def longest_repeating_subsequences(input_str):\n    longest_count = 1\n    curr_count = 1\n\n    for i in range(len(input_str)):\n        for j in range(i+1, len(input_str)):\n            if input_str[i] == input_str[j]:\n                curr_count += 1\n            else:\n                break\n        longest_count = max(longest_count, curr_count)\n        curr_count = 1\n\n    return longest_count\n\nprint(longest_repeating_subsequences(\"aabccbb\"))\nprint(longest_repeating_subsequences(\"abcabcabcabcd\"))\nprint(longest_repeating_subsequences(\"abcabcabcabc\"))"
    },
    {
      "rank": 54,
      "score": 8.0,
      "candidate": "def longest_non_repeat_subseq(str):\n    \"\"\"\n    str: input string\n    return: count of longest non-repeating subsequences\n    \"\"\"\n    return longest_non_repeat_subseq_helper(str, 0, {})\n\ndef longest_non_repeat_subseq_helper(str, i, cache):\n    if i == len(str):\n        return 0\n\n    if i in cache:\n        return cache[i]\n\n    res = 0\n    for j in range(i+1, len(str)+1):\n        if str[i] != str[j-1]:\n            res = max(res, longest_non_repeat_subseq_helper(str, j, cache) + 1)\n\n    cache[i] = res\n    return res\n\ndef longest_non_repeat_subseq_tab(str):\n    \"\"\"\n    str: input string\n    return: count of longest non-repeating subsequences\n    \"\"\"\n    if not str:\n        return 0\n\n    n = len(str)\n    dp = [[0 for _ in range(n)] for _ in range(n)]\n    for i in range(n):\n        dp[i][i] = 1\n\n    for l in range(2, n+1):\n        for i in range(n-l+1):\n            j = i+l-1\n            if str[i] != str[j]:\n                dp[i][j] = max(dp[i+1][j], dp[i][j-1])\n            else:\n                dp[i][j] = min(dp[i+1][j], dp[i][j-1]) + 1\n\n    return dp[0][n-1]\n\nprint(longest_non_repeat_subseq(\"abcabc\"))\nprint(longest_non_repeat_subseq(\"abcabcabce\"))\nprint(longest_non_repeat_subseq(\"abcabcabc\"))\nprint(longest_non_repeat_subseq(\"abcabcabcabce\"))\nprint(longest_non_repeat_subseq(\"abcabcabcabc\"))\n\nprint("
    },
    {
      "rank": 55,
      "score": 8.0,
      "candidate": "def count_repeating_subsequences(string):\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(n)\n    \"\"\"\n    dp = [0] * len(string)\n    for i in range(1, len(string)):\n        dp[i] = 1\n        for j in range(i - 1, -1, -1):\n            if string[i] != string[j]:\n                continue\n            dp[i] = max(dp[i], dp[j] + 1)\n    return max(dp)\n\n\ndef main():\n    string = \"abcabcabc\"\n    print(count_repeating_subsequences(string))\n\n\nmain()"
    },
    {
      "rank": 56,
      "score": 8.0,
      "candidate": "def longest_repeat(string):\n    longest_repeat = 1\n    for i in range(1, len(string)):\n        if string[i-1] == string[i]:\n            longest_repeat += 1\n        else:\n            longest_repeat = 1\n        if longest_repeat > len(string) - i:\n            return len(string) - i\n    return longest_repeat\n\ndef non_repeat_subsequences(string):\n    \"\"\"\n    Return the number of non-repeating subsequences.\n    \"\"\"\n    if not string:\n        return 0\n    if len(string) == 1:\n        return 1\n    if len(string) == 2:\n        if string[0] == string[1]:\n            return 1\n        return 2\n    return non_repeat_subsequences(string[0:-1]) + longest_repeat(string)\n\n\nprint(non_repeat_subsequences(\"abcabcabc\"))\nprint(non_repeat_subsequences(\"abc\"))\nprint(non_repeat_subsequences(\"abccba\"))\nprint(non_repeat_subsequences(\"abccbca\"))\nprint(non_repeat_subsequences(\"abccbcb\"))\nprint(non_repeat_subsequences(\"abccbcca\"))\nprint(non_repeat_subsequences(\"abccbc\"))\nprint(non_repeat_subsequences(\"abccbcc\"))\nprint(non_repeat_subsequences(\"abccbccc\"))\nprint(non_repeat_subsequences(\"abccbcac\"))\nprint(non_repeat_subsequences(\"abccbcacb\"))\nprint(non_repeat_subsequences(\"abccbcacbc\"))\nprint(non_repeat_subsequences(\"abccbcacbca\"))\nprint(non_repeat_subsequences(\"abccbcacbcb\"))\nprint(non_repeat_subsequences(\"abccbcacbcca\"))\nprint(non_repeat_subsequences(\"abcabcabc\"))\nprint(non_repeat_subsequences(\"abcbcbcbc\"))\nprint(non_repeat_subsequences(\"abcbcbcba\"))\nprint(non_repeat_subsequences"
    },
    {
      "rank": 57,
      "score": 8.0,
      "candidate": "def longest_repeating_subsequence(text):\n    \"\"\"\n    Time Complexity: O(n*n)\n    \"\"\"\n    n = len(text)\n    count = [[0 for _ in range(n)] for _ in range(n)]\n    max_len = 0\n\n    for i in range(n):\n        for j in range(i + 1, n):\n            if text[i] == text[j]:\n                count[i][j] = count[i - 1][j - 1] + 1\n                max_len = max(max_len, count[i][j])\n            else:\n                count[i][j] = 0\n\n    return max_len\n\n\nif __name__ == \"__main__\":\n    assert longest_repeating_subsequence(\"abcabcbb\") == 3\n    assert longest_repeating_subsequence(\"bbbbb\") == 1\n    assert longest_repeating_subsequence(\"pwwkew\") == 3\n    assert longest_repeating_subsequence(\"abcnpfzpwpe\") == 4\n    assert longest_repeating_subsequence(\"abababab\") == 4"
    },
    {
      "rank": 58,
      "score": 8.0,
      "candidate": "def count_subsequences(input_string):\n    \"\"\"\n    Find the longest repeating subsequences such that the two subsequences don\u2019t have same string characters at same positions.\n    \"\"\"\n    input_string = input_string.lower()\n    len_input_string = len(input_string)\n    if len_input_string < 2:\n        return len_input_string\n\n    table = [[0] * len_input_string for _ in range(len_input_string)]\n\n    for i in range(len_input_string):\n        table[i][i] = 1\n\n    max_subsequence = 1\n    for i in range(len_input_string - 1):\n        for j in range(i+1, len_input_string):\n            if input_string[i] == input_string[j]:\n                table[i][j] = table[i+1][j-1] + 2\n            else:\n                table[i][j] = max(table[i+1][j], table[i][j-1])\n\n            max_subsequence = max(max_subsequence, table[i][j])\n\n    return max_subsequence\n\n\nif __name__ == \"__main__\":\n    test_cases = [\n        (\"abcd\", 3),\n        (\"abcabc\", 6),\n        (\"abccdeabcc\", 7),\n        (\"abcabcabcabc\", 12),\n        (\"abababababababababab\", 15),\n        (\"ababababababababababa\", 15),\n        (\"abababababababababab\", 14),\n        (\"ababababababababababa\", 14),\n        (\"abcdefghijklmnopqrstuvwxyz\", 26),\n        (\"abcdefghijklmnopqrstuvwxyza\", 27),\n        (\"abcdefghijklmnopqrstuvwxyzab\", 27),\n        (\"abcdefghijklmnopqrstuvwxyzabc\", 28),\n        (\"abcdefghijklmnopq"
    },
    {
      "rank": 59,
      "score": 8.0,
      "candidate": "from collections import defaultdict\n\ndef count_subsequences(str):\n    dp = [[0 for i in range(len(str))] for i in range(len(str))]\n    for i in range(len(str)):\n        dp[i][i] = 1\n    res = 0\n    for i in range(len(str)):\n        for j in range(i+1, len(str)):\n            if str[i] == str[j]:\n                dp[i][j] = dp[i+1][j-1]+2\n            else:\n                dp[i][j] = max(dp[i+1][j], dp[i][j-1])\n            res = max(res, dp[i][j])\n    return res\n\n\ndef main():\n    str = \"abcabc\"\n    print(count_subsequences(str))\n    str = \"abcab\"\n    print(count_subsequences(str))\n\n\nmain()"
    },
    {
      "rank": 60,
      "score": 8.0,
      "candidate": "def count_subsequences(arr):\n    n = len(arr)\n    if n < 2:\n        return 0\n    dp = [[0 for _ in range(n)] for _ in range(n)]\n    max_count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] == arr[j]:\n                dp[i][j] = dp[i+1][j-1] + 2\n            else:\n                dp[i][j] = max(dp[i+1][j], dp[i][j-1])\n            max_count = max(max_count, dp[i][j])\n    return max_count\n\n\nif __name__ == '__main__':\n    print(count_subsequences(\"abcabc\"))\n    print(count_subsequences(\"abcda\"))"
    },
    {
      "rank": 61,
      "score": 3.0,
      "candidate": "# O(N) time | O(1) space - where N is the length of the input string\ndef longestRepeatingSubsequence(string):\n    return helper(string, len(string))\n\n\ndef helper(string, n):\n    if n == 1:\n        return 0\n\n    if n == 2:\n        if string[0] == string[1]:\n            return 0\n        else:\n            return 1\n\n    # we need to check all possible characters\n    # to be included in the longest repeating subsequence\n    longest = 0\n    for i in range(1, n):\n        # we need to check if the character at index i\n        # is present in the remaining part of the string\n        if string[i] in string[0:i]:\n            # if it is present, then we need to exclude it\n            # from the remaining part of the string\n            without = helper(string[0:i] + string[i + 1:n], n - 1)\n            # and add the length of the longest repeating subsequence\n            # obtained after excluding the character at index i\n            longest = max(longest, without)\n    return longest + 1"
    },
    {
      "rank": 62,
      "score": 2.0,
      "candidate": "class Solution:\n    def countSubsequences(self, s: str) -> int:\n        # recursive solution\n        def helper(i, j):\n            if i > j:\n                return 0\n            if i == j:\n                return 1\n            if dp[i][j] != -1:\n                return dp[i][j]\n            if s[i] == s[j]:\n                dp[i][j] = helper(i + 1, j - 1) + 1\n            else:\n                dp[i][j] = max(helper(i + 1, j), helper(i, j - 1))\n            return dp[i][j]\n\n        n = len(s)\n        dp = [[-1] * n for _ in range(n)]\n        return helper(0, n - 1)\n\n\nif __name__ == \"__main__\":\n    s = \"aabdbaabeeadcbbdedacbbeecbabebaeeab\"\n    out = 10\n    res = Solution().countSubsequences(s)\n    assert res == out, (res, out)"
    },
    {
      "rank": 63,
      "score": 1.0,
      "candidate": "from collections import defaultdict\n\n\ndef count_longest_repeat(input_string):\n    n = len(input_string)\n    dp = [0] * n\n    max_len = 0\n    for i in range(n):\n        for j in range(i + 1, n + 1):\n            if input_string[i] == input_string[j - 1]:\n                dp[j - 1] = dp[j - 2] + 1\n            else:\n                dp[j - 1] = 0\n            max_len = max(max_len, dp[j - 1])\n    return max_len\n\n\ndef count_longest_repeat_with_same_pos(input_string):\n    n = len(input_string)\n    dp = [0] * n\n    max_len = 0\n    for i in range(n):\n        for j in range(i + 1, n + 1):\n            if input_string[i] == input_string[j - 1]:\n                dp[j - 1] = dp[j - 2] + 1\n            else:\n                dp[j - 1] = 0\n            max_len = max(max_len, dp[j - 1])\n    return max_len\n\n\ndef count_longest_repeat_with_same_pos_2(input_string):\n    n = len(input_string)\n    dp = [0] * n\n    max_len = 0\n    for i in range(n):\n        for j in range(i + 1, n + 1):\n            if input_string[i] == input_string[j - 1]:\n                dp[j - 1] = dp[j - 2] + 1\n            else:\n                dp[j - 1] = 0\n            max_len = max(max_len, dp[j - 1])\n    return max_len\n\n\ndef count_longest_repeat_with_same_pos_3(input_string):\n    n = len(input_string)"
    },
    {
      "rank": 64,
      "score": 1.0,
      "candidate": "def count_sub_sequences(string):\n    n = len(string)\n    dp = [[0 for _ in range(n+1)] for _ in range(n+1)]\n\n    for i in range(1, n+1):\n        for j in range(1, n+1):\n            if string[i-1] == string[j-1]:\n                dp[i][j] = dp[i-1][j-1] + 1\n            else:\n                dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n    \n    return dp[n][n]\n\n\ndef main():\n    string = \"ababababab\"\n    ans = count_sub_sequences(string)\n    print(ans)\n\n\nmain()\n\n\n\"\"\"\nTime O(N^2)\nSpace O(N^2)\n\"\"\""
    },
    {
      "rank": 65,
      "score": 1.0,
      "candidate": "from collections import defaultdict\n\n\ndef longest_repeating_subsequence(text: str) -> int:\n    \"\"\"\n    Time Complexity: O(n*n)\n    Space Complexity: O(n*n)\n    \"\"\"\n    length = len(text)\n\n    if length <= 1:\n        return length\n\n    dp = [[0] * (length + 1) for _ in range(length + 1)]\n    for i in range(1, length + 1):\n        for j in range(1, length + 1):\n            if text[i - 1] == text[j - 1] and i != j:\n                dp[i][j] = dp[i - 1][j - 1] + 1\n            else:\n                dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])\n\n    return dp[length][length]\n\n\nif __name__ == \"__main__\":\n    assert longest_repeating_subsequence(\"abcd\") == 0\n    assert longest_repeating_subsequence(\"abbcd\") == 1\n    assert longest_repeating_subsequence(\"ababcd\") == 1\n    assert longest_repeating_subsequence(\"abccba\") == 2\n    assert longest_repeating_subsequence(\"abcbcbc\") == 3\n    assert longest_repeating_subsequence(\"abcbcbcbc\") == 3\n    assert longest_repeating_subsequence(\"abcbcbcbcbc\") == 4\n    assert longest_repeating_subsequence(\"abcbcbcbcbcbc\") == 4\n    assert longest_repeating_subsequence(\"abcbcbcbcbcbcbc\") == 5"
    },
    {
      "rank": 66,
      "score": 1.0,
      "candidate": "from collections import defaultdict\n\n\ndef longest_non_repeat_subsequence(input_string):\n    # Base Case\n    if not input_string:\n        return 0\n\n    # To store the length of the longest repeating subsequences\n    length = defaultdict(int)\n\n    # To store the longest repeating subsequences\n    longest = defaultdict(str)\n\n    # To store the length of the longest repeating subsequences\n    max_length = 0\n\n    for i in range(len(input_string)):\n        for j in range(i + 1, len(input_string) + 1):\n            # print(i, j)\n            # print(input_string[i:j])\n            if input_string[i:j] in longest:\n                # print(\"inside longest\")\n                if length[input_string[i:j]] < j - i:\n                    # print(\"inside length\")\n                    # print(input_string[i:j], i, j)\n                    length[input_string[i:j]] = j - i\n                    longest[input_string[i:j]] = input_string[i:j]\n\n    # print(length)\n    # print(longest)\n    for i in length:\n        if length[i] > max_length:\n            max_length = length[i]\n\n    return max_length\n\n\nif __name__ == \"__main__\":\n    assert longest_non_repeat_subsequence(\"abcabcd\") == 3\n    assert longest_non_repeat_subsequence(\"abcabcef\") == 4\n    assert longest_non_repeat_subsequence(\"abcabcefabcabcef\") == 8\n    assert longest_non_repeat_subsequence(\"abcdefghijklmnopqrstuvwxyz\") == 25\n    assert longest_non_repeat_subsequence(\"abcdefghijklmnopqrstuvwxyza\") == 26\n    assert longest_non_repeat_subsequence(\"abcdefghijklmnopqrstuvwxyzab\") == 27\n    assert longest_non_repeat_subsequence(\"abcdefghijklmnopqrstuv"
    },
    {
      "rank": 67,
      "score": 1.0,
      "candidate": "def longest_non_repeating_subsequence(string):\n    n = len(string)\n    # Create a table to store results of subproblems\n    dp = [[0 for x in range(n + 1)] for x in range(n + 1)]\n\n    for i in range(1, n + 1):\n        for j in range(1, n + 1):\n            # Base condition when one of the strings is empty\n            if i == 0 or j == 0:\n                dp[i][j] = 0\n\n            # If the last characters of two strings are same and\n            # the including the last character makes the current\n            # length more than already obtainable solutions\n            # then maximum would be the previous solution\n            elif string[i - 1] == string[j - 1] and i != j:\n                dp[i][j] = 1 + dp[i - 1][j - 1]\n\n            # If the last characters are not same, consider all\n            # characters from string1 till i-1 and find the maximum\n            else:\n                dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])\n\n    return dp[-1][-1]\n\n\nif __name__ == \"__main__\":\n    string = \"geeksforgeeks\"\n    result = longest_non_repeating_subsequence(string)\n    print(result)"
    },
    {
      "rank": 68,
      "score": 1.0,
      "candidate": "from collections import defaultdict\n\n\ndef longest_subsequence(string: str) -> int:\n    \"\"\"\n    Time Complexity: O(n*n)\n    Space Complexity: O(n*n)\n    \"\"\"\n\n    if not string:\n        return 0\n\n    max_length = 0\n    lengths = defaultdict(int)\n\n    for i in range(len(string)):\n        for j in range(i + 1, len(string) + 1):\n            sub_str = string[i:j]\n            if sub_str in lengths:\n                max_length = max(max_length, lengths[sub_str] + 1)\n            else:\n                lengths[sub_str] = 1\n\n    return max_length\n\n\nif __name__ == \"__main__\":\n    assert longest_subsequence(\"\") == 0\n    assert longest_subsequence(\"A\") == 1\n    assert longest_subsequence(\"AB\") == 1\n    assert longest_subsequence(\"ABA\") == 2\n    assert longest_subsequence(\"ABBA\") == 2\n    assert longest_subsequence(\"ABC\") == 1\n    assert longest_subsequence(\"ABCBC\") == 2\n    assert longest_subsequence(\"ABBCBA\") == 3\n    assert longest_subsequence(\"ABBBCBA\") == 4\n    assert longest_subsequence(\"ABBBBCBA\") == 5\n    assert longest_subsequence(\"ABBBBBCBA\") == 6\n    assert longest_subsequence(\"ABBBBBBCBA\") == 7\n    assert longest_subsequence(\"ABBBBBBBCBA\") == 8"
    },
    {
      "rank": 69,
      "score": 1.0,
      "candidate": "def count_longest_repeating_subsequences(s):\n    # Fill this in.\n    if len(s) <= 1:\n        return 0\n\n    max_length = 0\n    for i in range(len(s)):\n        for j in range(i+1, len(s)):\n            if len(s[i:j+1]) > max_length:\n                max_length = len(s[i:j+1])\n\n    return max_length\n\nif __name__ == \"__main__\":\n    print (count_longest_repeating_subsequences(\"abcabcabc\"))\n    # 3\n\n    print (count_longest_repeating_subsequences(\"abcdefgabc\"))\n    # 1\n\n    print (count_longest_repeating_subsequences(\"abcdefg\"))\n    # 1\n\n    print (count_longest_repeating_subsequences(\"aaaa\"))\n    # 2\n\n    print (count_longest_repeating_subsequences(\"aaa\"))\n    # 3"
    },
    {
      "rank": 70,
      "score": 1.0,
      "candidate": "from collections import Counter\n\n\ndef count_longest_repeating_subsequence(string: str) -> int:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(n)\n    \"\"\"\n\n    def longest_repeating_subsequence(string: str) -> int:\n        counts = Counter(string)\n\n        length = 0\n        for k, v in counts.items():\n            if v > length:\n                length = v\n\n        return length\n\n    return (\n        len(string)\n        - longest_repeating_subsequence(string)\n        - longest_repeating_subsequence(string[1:])\n        + 1\n    )\n\n\nif __name__ == \"__main__\":\n    assert count_longest_repeating_subsequence(\"aabacbebebe\") == 4"
    },
    {
      "rank": 71,
      "score": 1.0,
      "candidate": "from collections import Counter\n\n\ndef longest_repeating_subsequence(string):\n    \"\"\"\n    :param string: string\n    :return: longest repeating subsequences such that the two subsequences don\u2019t have same string characters at same positions\n    \"\"\"\n    count = Counter(string)\n    count_list = list(count.values())\n    max_count = max(count_list)\n    # print(max_count)\n    count_list.remove(max_count)\n    second_max_count = max(count_list)\n    # print(second_max_count)\n    if max_count == second_max_count:\n        return 1\n    else:\n        return 2\n\n\nif __name__ == '__main__':\n    print(\"Example:\")\n    print(longest_repeating_subsequence('aabca'))\n\n    # These \"asserts\" are used for self-checking and not for an auto-testing\n    assert longest_repeating_subsequence('aabca') == 2\n    assert longest_repeating_subsequence('abcdef') == 1\n    assert longest_repeating_subsequence('aabbccdd') == 1\n    assert longest_repeating_subsequence('aabbccddaa') == 2\n    assert longest_repeating_subsequence('aabbccddee') == 2\n    assert longest_repeating_subsequence('aabbc') == 1\n    assert longest_repeating_subsequence('abcde') == 1\n    print(\"Coding complete? Click 'Check' to earn cool rewards!\")"
    },
    {
      "rank": 72,
      "score": 1.0,
      "candidate": "from collections import defaultdict\n\n\ndef longest_repeating_subsequence(input1, input2):\n    dp = defaultdict(lambda: defaultdict(int))\n    res = 0\n\n    for i in range(len(input1)):\n        for j in range(len(input2)):\n            if input1[i] == input2[j]:\n                dp[i + 1][j + 1] = dp[i][j] + 1\n            else:\n                dp[i + 1][j + 1] = max(dp[i + 1][j], dp[i][j + 1])\n\n            res = max(res, dp[i + 1][j + 1])\n\n    return res\n\n\ndef main():\n    input1 = \"abcde\"\n    input2 = \"ace\"\n    print(\"Input: \" + str(input1) + \" \" + str(input2))\n    print(\"Output: \" + str(longest_repeating_subsequence(input1, input2)))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 73,
      "score": 1.0,
      "candidate": "from collections import defaultdict\n\ndef longest_repeating_subsequence(string):\n    n = len(string)\n    if n == 0:\n        return 0\n\n    # dp[i][j] will store the length of the longest repeating subsequence of string[0..i] and string[j..n-1]\n    dp = [[0 for _ in range(n)] for _ in range(n)]\n\n    # If there is only one character in the string, the longest repeating subsequence is 1.\n    for i in range(n):\n        dp[i][i] = 1\n\n    # Initialize the table\n    for i in range(n-1, -1, -1):\n        for j in range(i+1, n):\n            # If the characters at two indexes are same,\n            # we need to consider the sequence formed with characters at both indexes\n            if string[i] == string[j]:\n                # The maximum length of the repeating subsequence is length of the subsequence of characters starting from both indexes + 1\n                dp[i][j] = dp[i+1][j-1] + 2\n            else:\n                # The maximum length of the repeating subsequence is 1 plus the maximum of the lengths of the repeating subsequences with\n                # characters at both indexes removed\n                dp[i][j] = max(dp[i+1][j], dp[i][j-1])\n\n    return dp[0][n-1]\n\n\ndef main():\n    string = \"aba\"\n    ans = longest_repeating_subsequence(string)\n    print(ans)\n\n\nmain()"
    },
    {
      "rank": 74,
      "score": 1.0,
      "candidate": "from collections import defaultdict\n\n\ndef longest_repeating_subsequence(string):\n    n = len(string)\n    table = defaultdict(int)\n    table[0] = 0\n\n    for i in range(1, n):\n        table[i] = table[i - 1]\n        for j in range(i):\n            if string[i] != string[j] and table[j] + 1 > table[i]:\n                table[i] = table[j] + 1\n\n    return table[n - 1]\n\n\nif __name__ == \"__main__\":\n    assert longest_repeating_subsequence(\"aabdca\") == 3"
    },
    {
      "rank": 75,
      "score": 1.0,
      "candidate": "def count_repeating_subseq(s):\n    n = len(s)\n    dp = [[0 for _ in range(n+1)] for _ in range(n+1)]\n\n    for i in range(n):\n        dp[i][i] = 1\n\n    for i in range(n-1, -1, -1):\n        for j in range(i+1, n):\n            if s[i] == s[j]:\n                dp[i][j] = dp[i+1][j-1] + 2\n            else:\n                dp[i][j] = max(dp[i+1][j], dp[i][j-1])\n    return dp[0][n-1]\n\n\nif __name__ == \"__main__\":\n    s = \"abcabc\"\n    print(count_repeating_subseq(s))\n\n    s = \"abca\"\n    print(count_repeating_subseq(s))"
    },
    {
      "rank": 76,
      "score": 1.0,
      "candidate": "from collections import defaultdict\n\n\ndef find_longest_repeating_subsequence(string):\n    n = len(string)\n    dp = [[0 for _ in range(n + 1)] for _ in range(n + 1)]\n    count = [[0 for _ in range(n + 1)] for _ in range(n + 1)]\n\n    for i in range(1, n + 1):\n        for j in range(1, n + 1):\n            if string[i - 1] == string[j - 1]:\n                dp[i][j] = dp[i - 1][j - 1] + 1\n                count[i][j] = dp[i][j]\n            else:\n                dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])\n                count[i][j] = 0\n\n    # print(dp)\n    # print(count)\n    result = defaultdict(int)\n    for i in range(n + 1):\n        for j in range(n + 1):\n            if i and j and count[i][j]:\n                result[count[i][j]] += 1\n\n    # print(result)\n    return max(result.keys())\n\n\nif __name__ == \"__main__\":\n    assert find_longest_repeating_subsequence(\"aabdbaabeeadc\") == 5\n    assert find_longest_repeating_subsequence(\"bbbaaaba\") == 3\n    assert find_longest_repeating_subsequence(\"abab\") == 2\n    assert find_longest_repeating_subsequence(\"ababcd\") == 3"
    },
    {
      "rank": 77,
      "score": 1.0,
      "candidate": "from collections import defaultdict\n\n\ndef longest_repeating_subsequence(string):\n    dp = defaultdict(int)\n    dp[0] = 0\n    for i in range(len(string)):\n        for j in range(i + 1, len(string)):\n            if string[i] == string[j]:\n                dp[j + 1] = max(dp[j + 1], dp[j] + 1)\n    return max(dp.values())\n\n\nif __name__ == \"__main__\":\n    assert longest_repeating_subsequence(\"abcde\") == 0\n    assert longest_repeating_subsequence(\"aabcdeab\") == 3\n    assert longest_repeating_subsequence(\"abcabcd\") == 4\n    assert longest_repeating_subsequence(\"abcabcdab\") == 4\n    assert longest_repeating_subsequence(\"abcabcabcab\") == 4\n    assert longest_repeating_subsequence(\"abcabcdabcd\") == 6\n    assert longest_repeating_subsequence(\"abcabcdabcdab\") == 6\n    assert longest_repeating_subsequence(\"abcabcdabcdabcd\") == 8"
    },
    {
      "rank": 78,
      "score": 1.0,
      "candidate": "def longest_repeat(str1, str2):\n    n = len(str1)\n    m = len(str2)\n    dp = [[0 for _ in range(m+1)] for _ in range(n+1)]\n    ans = 0\n    for i in range(1, n+1):\n        for j in range(1, m+1):\n            if str1[i-1] == str2[j-1]:\n                dp[i][j] = dp[i-1][j-1] + 1\n            else:\n                dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n            ans = max(ans, dp[i][j])\n    return ans\n\n\ndef longest_repeat_2(str1, str2):\n    n = len(str1)\n    m = len(str2)\n    dp = [[0 for _ in range(m+1)] for _ in range(n+1)]\n    ans = 0\n    for i in range(1, n+1):\n        for j in range(1, m+1):\n            if str1[i-1] == str2[j-1]:\n                dp[i][j] = dp[i-1][j-1] + 1\n            else:\n                dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n            ans = max(ans, dp[i][j])\n    return ans\n\n\ndef longest_repeat_3(str1, str2):\n    n = len(str1)\n    m = len(str2)\n    dp = [[0 for _ in range(m+1)] for _ in range(n+1)]\n    ans = 0\n    for i in range(1, n+1):\n        for j in range(1, m+1):\n            if str1[i-1] == str2[j-1]:\n                dp[i][j] = dp[i-1][j-1] + 1\n            else:\n                dp[i][j"
    },
    {
      "rank": 79,
      "score": 1.0,
      "candidate": "def count_longest_repeating_subsequences(string):\n    \"\"\"\n    O(2^n) time | O(n) space\n    \"\"\"\n    longest_repeating_subsequences = 0\n    current_repeating_subsequences = 0\n    longest_repeating_subsequences_start_index = 0\n    current_repeating_subsequences_start_index = 0\n    for i in range(1, len(string)):\n        if string[i] == string[i - 1]:\n            current_repeating_subsequences += 1\n        else:\n            longest_repeating_subsequences = max(longest_repeating_subsequences, current_repeating_subsequences)\n            current_repeating_subsequences = 0\n            current_repeating_subsequences_start_index = i\n\n        if current_repeating_subsequences > longest_repeating_subsequences:\n            longest_repeating_subsequences = current_repeating_subsequences\n            longest_repeating_subsequences_start_index = current_repeating_subsequences_start_index\n\n    return longest_repeating_subsequences, longest_repeating_subsequences_start_index\n\n\ndef test_longest_repeating_subsequences_1():\n    assert count_longest_repeating_subsequences(\"aabbaab\") == (3, 1)\n\ndef test_longest_repeating_subsequences_2():\n    assert count_longest_repeating_subsequences(\"aabbab\") == (2, 3)\n\ndef test_longest_repeating_subsequences_3():\n    assert count_longest_repeating_subsequences(\"aabbabbb\") == (4, 3)"
    },
    {
      "rank": 80,
      "score": 1.0,
      "candidate": "from collections import defaultdict\n\n\nclass Solution:\n    def longest_repeat_subsequence(self, s):\n        count = defaultdict(int)\n        max_count = 0\n        for i in range(len(s)):\n            for j in range(i + 1, len(s)):\n                if s[i] == s[j] and count[(i, j)] == 0:\n                    count[(i, j)] = count[(i - 1, j)] + 1\n                    max_count = max(max_count, count[(i, j)])\n        return max_count\n\n\nif __name__ == \"__main__\":\n    s = \"abab\"\n    out = 3\n    res = Solution().longest_repeat_subsequence(s)\n    assert out == res, (out, res)\n\n    s = \"aba\"\n    out = 2\n    res = Solution().longest_repeat_subsequence(s)\n    assert out == res, (out, res)\n\n    s = \"abcabcabc\"\n    out = 3\n    res = Solution().longest_repeat_subsequence(s)\n    assert out == res, (out, res)\n\n    s = \"abc\"\n    out = 1\n    res = Solution().longest_repeat_subsequence(s)\n    assert out == res, (out, res)"
    },
    {
      "rank": 81,
      "score": 1.0,
      "candidate": "def longest_repeating_subsequence(s):\n    n = len(s)\n    dp = [[0 for _ in range(n)] for _ in range(n)]\n\n    for i in range(n):\n        dp[i][i] = 1\n\n    for i in range(n - 1, -1, -1):\n        for j in range(i + 1, n):\n            if s[i] == s[j]:\n                dp[i][j] = 1 + dp[i + 1][j - 1]\n\n    return max([max(x) for x in dp])\n\n\nif __name__ == \"__main__\":\n    s = \"aabccb\"\n    assert longest_repeating_subsequence(s) == 2\n\n    s = \"abcabcabc\"\n    assert longest_repeating_subsequence(s) == 3\n\n    s = \"abc\"\n    assert longest_repeating_subsequence(s) == 1"
    },
    {
      "rank": 82,
      "score": 1.0,
      "candidate": "from collections import defaultdict\n\n\ndef count_longest_repeating_subsequences(string):\n    # Create a dictionary to store the count of longest repeating subsequences\n    longest_repeating_subsequences = defaultdict(int)\n    for i in range(len(string)):\n        for j in range(i + 1, len(string) + 1):\n            # Get the substring\n            substring = string[i:j]\n            # Get the longest repeating subsequence by dividing the substring in half\n            longest_repeating_subsequence = get_longest_repeating_subsequence(substring)\n            longest_repeating_subsequences[longest_repeating_subsequence] += 1\n    return longest_repeating_subsequences\n\n\ndef get_longest_repeating_subsequence(string):\n    # Get the length of the string\n    length = len(string)\n    # Check if the string is of even length\n    if length % 2 != 0:\n        # Get the middle index\n        middle_index = length // 2\n        # Get the left and right substrings\n        left_substring = string[:middle_index]\n        right_substring = string[middle_index + 1:]\n    else:\n        # Get the left and right substrings\n        left_substring = string[: length // 2]\n        right_substring = string[length // 2 :]\n    # Get the longest repeating subsequence\n    longest_repeating_subsequence = get_longest_repeating_subsequence_rec(\n        left_substring, right_substring\n    )\n    return longest_repeating_subsequence\n\n\ndef get_longest_repeating_subsequence_rec(left_substring, right_substring):\n    # Check if the left substring is empty\n    if not left_substring:\n        # Return the right substring\n        return right_substring\n    # Check if the right substring is empty\n    if not right_substring:\n        # Return the left substring\n        return left_substring\n    # Check if the last characters of the left and right substrings are same\n    if left_substring[-1] == right_substring[-1]:"
    },
    {
      "rank": 83,
      "score": 1.0,
      "candidate": "from collections import defaultdict\n\n\ndef longest_repeating_subsequence(string):\n    n = len(string)\n    longest = 0\n    dp = defaultdict(int)\n\n    for i in range(n):\n        for j in range(i + 1, n + 1):\n            if string[i] == string[j - 1]:\n                dp[i, j] = dp[i, j - 1] + 1\n\n                if dp[i, j] > longest:\n                    longest = dp[i, j]\n\n    return longest\n\n\nif __name__ == \"__main__\":\n    assert longest_repeating_subsequence(\"aba\") == 2\n    assert longest_repeating_subsequence(\"aabdbaabeeadc\") == 8\n    assert longest_repeating_subsequence(\"abcabcabcab\") == 4"
    },
    {
      "rank": 84,
      "score": 1.0,
      "candidate": "def longest_repeating_subsequence(string):\n    n = len(string)\n    if n == 0:\n        return 0\n    dp = [1] * n\n    for i in range(1, n):\n        for j in range(0, i):\n            if string[i] != string[j]:\n                dp[i] = max(dp[i], dp[j] + 1)\n    return max(dp)\n\n\ndef main():\n    string = \"abcabc\"\n    ans = longest_repeating_subsequence(string)\n    print(ans)\n\n\nmain()"
    },
    {
      "rank": 85,
      "score": 1.0,
      "candidate": "from collections import defaultdict\n\n\ndef longest_non_repeating_subsequence(string):\n    \"\"\"\n    Returns length of longest non repeating subsequence\n\n    >>> longest_non_repeating_subsequence(\"abcabcbb\")\n    3\n    >>> longest_non_repeating_subsequence(\"bbbbb\")\n    1\n    >>> longest_non_repeating_subsequence(\"pwwkew\")\n    3\n    >>> longest_non_repeating_subsequence(\"\")\n    0\n    \"\"\"\n    dp = defaultdict(int)\n    dp[0] = 0\n    for i in range(len(string)):\n        for j in range(i + 1, len(string)):\n            if string[i] != string[j]:\n                dp[j + 1] = max(dp[j + 1], dp[j])\n            else:\n                dp[j + 1] = max(dp[j + 1], dp[j] + 1)\n    return max(dp.values())\n\n\nif __name__ == \"__main__\":\n    from doctest import testmod\n\n    testmod()\n    string = input(\"Enter a string: \").strip()\n    print(\"Length of longest non repeating subsequence:\", longest_non_repeating_subsequence(string))"
    },
    {
      "rank": 86,
      "score": 1.0,
      "candidate": "from collections import defaultdict\n\n\nclass Solution:\n    def countSubsequences(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        # Time: O(n)\n        # Space: O(n)\n        dp = defaultdict(int)\n        dp[0] = 1\n        for c in s:\n            new_dp = defaultdict(int)\n            for k, v in dp.items():\n                new_dp[k] += v\n                if k > 0 and s[k - 1] == c:\n                    new_dp[k + 1] += v\n            dp = new_dp\n        return len(dp)\n\n\nif __name__ == '__main__':\n    # Test Case 1\n    s = 'aab'\n    print(Solution().countSubsequences(s))\n    # Test Case 2\n    s = 'aabb'\n    print(Solution().countSubsequences(s))"
    },
    {
      "rank": 87,
      "score": 1.0,
      "candidate": "def count_longest_repeating_subsequence(str):\n    n = len(str)\n    # Find lengths of all repeating subsequence\n    dp = [0] * n\n    for i in range(1, n):\n        for j in range(0, i):\n            if str[i] == str[j]:\n                dp[i] = max(dp[i], dp[j] + 1)\n\n    return max(dp)\n\n\nprint(count_longest_repeating_subsequence(\"aba\"))\nprint(count_longest_repeating_subsequence(\"ababab\"))\nprint(count_longest_repeating_subsequence(\"abba\"))"
    },
    {
      "rank": 88,
      "score": 1.0,
      "candidate": "from collections import Counter\n\n\ndef longest_repeating_subsequence(str1: str, str2: str) -> int:\n    \"\"\"\n    Time Complexity: O(nm)\n    Space Complexity: O(nm)\n    \"\"\"\n\n    # dp[i][j] stores the length of the longest repeating subsequences such that the two subsequences don\u2019t have same string characters at same positions.\n    # dp[i][j] = max(dp[i][j], dp[i - 1][j - 1] + 1) where str1[i] == str2[j]\n    # dp[i][j] = max(dp[i][j], dp[i][j - 1], dp[i - 1][j]) where str1[i] != str2[j]\n\n    n, m = len(str1), len(str2)\n\n    dp = [[0] * (m + 1) for _ in range(n + 1)]\n\n    for i in range(1, n + 1):\n        for j in range(1, m + 1):\n            if str1[i - 1] == str2[j - 1]:\n                dp[i][j] = max(dp[i][j], dp[i - 1][j - 1] + 1)\n            else:\n                dp[i][j] = max(dp[i][j], dp[i][j - 1], dp[i - 1][j])\n\n    return dp[n][m]\n\n\nif __name__ == \"__main__\":\n    assert longest_repeating_subsequence(\"abcde\", \"beaad\") == 3\n    assert longest_repeating_subsequence(\"abcde\", \"ace\") == 3\n    assert longest_repeating_subsequence(\"abcde\", \"acde\") == 3\n    assert longest_repeating_subsequence(\"abcde\", \"abc\") == 3\n    assert longest_repeating_subsequence(\"abcde\", \"ac\") == 2\n    assert longest_repeating_subsequence(\"abcde\", \"acec"
    },
    {
      "rank": 89,
      "score": 1.0,
      "candidate": "def count_repeating_subsequence(str):\n    n = len(str)\n    dp = [[0 for _ in range(n)] for _ in range(n)]\n\n    for i in range(n):\n        dp[i][i] = 1\n\n    for i in range(n-1, -1, -1):\n        for j in range(i+1, n):\n            if str[i] == str[j]:\n                dp[i][j] = dp[i+1][j-1] + 2\n            else:\n                dp[i][j] = max(dp[i+1][j], dp[i][j-1])\n\n    return dp[0][n-1]\n\n\nstr = \"aabccb\"\nprint(count_repeating_subsequence(str))"
    },
    {
      "rank": 90,
      "score": 1.0,
      "candidate": "def count_longest_repeating_subsequence(text: str) -> int:\n    \"\"\"\n    Time Complexity: O(n*n)\n    Space Complexity: O(n)\n    \"\"\"\n    n = len(text)\n    count = [0] * n\n    for i in range(n):\n        for j in range(i + 1, n):\n            if text[i] == text[j] and i != j:\n                count[i] += 1\n                count[j] += 1\n    return sum(count)\n\n\nif __name__ == \"__main__\":\n    assert count_longest_repeating_subsequence(\"abcd\") == 0\n    assert count_longest_repeating_subsequence(\"abcabc\") == 1\n    assert count_longest_repeating_subsequence(\"abcabca\") == 2\n    assert count_longest_repeating_subsequence(\"abcabcabca\") == 3\n    assert count_longest_repeating_subsequence(\"abcabcabcabca\") == 4\n    assert count_longest_repeating_subsequence(\"abcabcabcabcabca\") == 5"
    },
    {
      "rank": 91,
      "score": 1.0,
      "candidate": "from collections import defaultdict\n\n\ndef count_max_repeating_subsequences(string):\n    # 1st pass - create a dictionary with string characters as keys and their positions in the string as values\n    char_pos = defaultdict(list)\n    for index, char in enumerate(string):\n        char_pos[char].append(index)\n\n    # 2nd pass - iterate over the string and keep track of the longest sequence\n    max_seq = 0\n    start = 0\n    for index, char in enumerate(string):\n        # check if the current character is a part of the previous longest sequence\n        if start in char_pos[char]:\n            max_seq = max(max_seq, index - start + 1)\n            continue\n\n        # if it is not a part of the previous longest sequence, start from this character's position\n        start = index\n\n    return max_seq\n\n\nprint(count_max_repeating_subsequences(\"banana\"))\nprint(count_max_repeating_subsequences(\"abcbad\"))"
    },
    {
      "rank": 92,
      "score": 1.0,
      "candidate": "from collections import defaultdict\n\n\ndef count_longest_repeating_subsequence(s: str) -> int:\n    \"\"\"\n    Time Complexity: O(n*n)\n    Space Complexity: O(n*n)\n    \"\"\"\n    n = len(s)\n    dp = [[0] * n for _ in range(n)]\n    longest_repeat = defaultdict(int)\n\n    for i in range(n):\n        dp[i][i] = 1\n        longest_repeat[(i, i)] = 1\n\n    for sub_len in range(2, n + 1):\n        for i in range(n - sub_len + 1):\n            j = i + sub_len - 1\n            if s[i] == s[j] and dp[i + 1][j - 1] != 0:\n                dp[i][j] = dp[i + 1][j - 1] + 2\n                longest_repeat[(i, j)] = dp[i][j]\n            else:\n                dp[i][j] = max(dp[i + 1][j], dp[i][j - 1])\n\n    return max(longest_repeat.values())\n\n\nif __name__ == \"__main__\":\n    assert count_longest_repeating_subsequence(\"aabdbaab\") == 5\n    assert count_longest_repeating_subsequence(\"aabdbaabcd\") == 4\n    assert count_longest_repeating_subsequence(\"aaaa\") == 2"
    },
    {
      "rank": 93,
      "score": 1.0,
      "candidate": "def longest_repeating_subsequences(string: str) -> int:\n    \"\"\"\n    Time Complexity: O(n^2)\n    Space Complexity: O(n)\n    \"\"\"\n    length = len(string)\n    dp = [0] * length\n    count = 0\n\n    for i in range(length):\n        dp[i] = 1\n\n    for i in range(1, length):\n        for j in range(i - 1, -1, -1):\n            if string[i] != string[j]:\n                dp[j] = max(dp[j], dp[j + 1])\n            else:\n                dp[j] = dp[j] + 1\n\n            if dp[j] > count:\n                count = dp[j]\n\n    return count\n\n\nif __name__ == \"__main__\":\n    assert longest_repeating_subsequences(\"abcabcbb\") == 3\n    assert longest_repeating_subsequences(\"bbbbb\") == 1\n    assert longest_repeating_subsequences(\"pqrst\") == 1\n    assert longest_repeating_subsequences(\"\") == 0"
    },
    {
      "rank": 94,
      "score": 1.0,
      "candidate": "def longest_repeat(str1, str2):\n    n1 = len(str1)\n    n2 = len(str2)\n    dp = [[0 for _ in range(n2 + 1)] for _ in range(n1 + 1)]\n    ans = 0\n    for i in range(1, n1 + 1):\n        for j in range(1, n2 + 1):\n            if str1[i - 1] == str2[j - 1]:\n                dp[i][j] = 1 + dp[i - 1][j - 1]\n            else:\n                dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])\n            ans = max(ans, dp[i][j])\n    return ans\n\n\nstr1 = \"aaaaa\"\nstr2 = \"bbbbb\"\nprint(longest_repeat(str1, str2))"
    },
    {
      "rank": 95,
      "score": 1.0,
      "candidate": "from collections import Counter\n\n\ndef longest_repeating_subsequence(string):\n    n = len(string)\n    dp = [[0 for _ in range(n + 1)] for _ in range(n + 1)]\n\n    for i in range(1, n + 1):\n        for j in range(1, n + 1):\n            if string[i - 1] == string[j - 1]:\n                dp[i][j] = 1 + dp[i - 1][j - 1]\n            else:\n                dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])\n\n    return dp[n][n]\n\n\ndef longest_repeating_subsequence_dp(string):\n    n = len(string)\n    dp = [[0 for _ in range(n + 1)] for _ in range(n + 1)]\n\n    for i in range(1, n + 1):\n        for j in range(1, n + 1):\n            if string[i - 1] == string[j - 1]:\n                dp[i][j] = 1 + dp[i - 1][j - 1]\n            else:\n                dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])\n\n    counter = Counter()\n\n    for i in range(n):\n        counter[dp[i][n]] += 1\n\n    return counter.most_common(1)[0][0]\n\n\nif __name__ == \"__main__\":\n    print(longest_repeating_subsequence_dp(\"abcabcbb\"))\n    print(longest_repeating_subsequence_dp(\"bbbbb\"))\n    print(longest_repeating_subsequence_dp(\"pwwkew\"))"
    },
    {
      "rank": 96,
      "score": 1.0,
      "candidate": "from collections import Counter\n\n\ndef count_subsequences(string):\n    if not string:\n        return 0\n\n    n = len(string)\n    count = Counter()\n    count[tuple(string)] = 1\n    ans = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            sub_string = string[i:j+1]\n            if count[tuple(sub_string)] == 1:\n                continue\n\n            count[tuple(sub_string)] += 1\n            ans += 1\n\n    return ans\n\n\nif __name__ == \"__main__\":\n    assert count_subsequences(\"a\") == 0\n    assert count_subsequences(\"aa\") == 1\n    assert count_subsequences(\"aba\") == 1\n    assert count_subsequences(\"abab\") == 2\n    assert count_subsequences(\"ababa\") == 3\n    assert count_subsequences(\"ababba\") == 4\n    assert count_subsequences(\"abababab\") == 5\n    assert count_subsequences(\"ababababab\") == 6\n    assert count_subsequences(\"abababababab\") == 7"
    },
    {
      "rank": 97,
      "score": 1.0,
      "candidate": "def count_subsequence(input_string):\n    # Fill this in.\n\nprint(count_subsequence(\"bbbbb\"))\n# 1\n\nprint(count_subsequence(\"bbbbbbb\"))\n# 2\n\nprint(count_subsequence(\"bbbbbbbb\"))\n# 3\n\nprint(count_subsequence(\"aba\"))\n# 2\n\nprint(count_subsequence(\"abc\"))\n# 1\n\nprint(count_subsequence(\"abac\"))\n# 2\n\nprint(count_subsequence(\"abacb\"))\n# 2\n\nprint(count_subsequence(\"abcabc\"))\n# 3\n\nprint(count_subsequence(\"abcbac\"))\n# 2"
    },
    {
      "rank": 98,
      "score": 1.0,
      "candidate": "from collections import defaultdict\n\n\ndef longest_repeating_subsequence(string):\n    dp = defaultdict(int)\n    n = len(string)\n    for i in range(n):\n        for j in range(i + 1, n + 1):\n            if i == j - 1:\n                dp[i, j] = 1\n            else:\n                if string[i] == string[j - 1]:\n                    dp[i, j] = dp[i + 1, j - 1] + 2\n                else:\n                    dp[i, j] = max(dp[i + 1, j], dp[i, j - 1])\n    return dp[0, n]\n\n\nif __name__ == \"__main__\":\n    test_cases = [\n        (\"abcde\", 3),\n        (\"abab\", 2),\n        (\"abcabcabcabc\", 4),\n        (\"abcabcabcabcd\", 3),\n        (\"abccab\", 2),\n    ]\n    for string, result in test_cases:\n        assert longest_repeating_subsequence(string) == result"
    },
    {
      "rank": 99,
      "score": 1.0,
      "candidate": "def count_sub_seq(string: str) -> int:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(n)\n    \"\"\"\n\n    if len(string) < 1:\n        return 0\n\n    hash_map = {string[0]: 1}\n    longest_repeating_subsequence = 0\n\n    for i in range(1, len(string)):\n        if string[i] in hash_map:\n            longest_repeating_subsequence = max(longest_repeating_subsequence, hash_map[string[i]])\n        hash_map[string[i]] = hash_map.get(string[i], 0) + 1\n\n    return longest_repeating_subsequence\n\n\nif __name__ == \"__main__\":\n    assert count_sub_seq(\"abcd\") == 3\n    assert count_sub_seq(\"abab\") == 2\n    assert count_sub_seq(\"abcabcabcabab\") == 4"
    },
    {
      "rank": 100,
      "score": 1.0,
      "candidate": "def count_longest_repeating_subseq(string):\n    \"\"\"\n    Time Complexity: O(n*n)\n    Space Complexity: O(n*n)\n    \"\"\"\n    n = len(string)\n    if n < 2:\n        return n\n\n    dp = [[0] * n for _ in range(n)]\n\n    for i in range(n):\n        dp[i][i] = 1\n\n    for i in range(n - 1, -1, -1):\n        for j in range(i + 1, n):\n            if string[i] == string[j]:\n                dp[i][j] = dp[i + 1][j - 1] + 2\n            else:\n                dp[i][j] = max(dp[i + 1][j], dp[i][j - 1])\n\n    return dp[0][-1]\n\n\nif __name__ == \"__main__\":\n    assert count_longest_repeating_subseq(\"ababab\") == 3\n    assert count_longest_repeating_subseq(\"aba\") == 2\n    assert count_longest_repeating_subseq(\"abcabcabcabc\") == 6"
    }
  ]
}