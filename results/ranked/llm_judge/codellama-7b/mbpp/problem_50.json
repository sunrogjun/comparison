{
  "timestamp": "2025-09-14T22:40:27.954725",
  "method": "improved_llm_judge",
  "judge_model": "codellama/CodeLlama-7b-Python-hf",
  "target_model": "codellama-7b",
  "dataset": "mbpp",
  "problem_number": 50,
  "total_candidates": 100,
  "results": [
    {
      "rank": 1,
      "score": 10.0,
      "candidate": "def count_sum_of_digits(n):\n    if n < 10:\n        return 1\n    count = 0\n    while n > 0:\n        n, rem = divmod(n, 10)\n        count += rem\n    return count\n\n\ndef sum_of_digits_equal_length(n):\n    count = 0\n    for i in range(n):\n        if count_sum_of_digits(i) == i:\n            count += 1\n    return count\n\n\ndef main():\n    print(sum_of_digits_equal_length(10))\n    print(sum_of_digits_equal_length(100))\n    print(sum_of_digits_equal_length(1000))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 2,
      "score": 10.0,
      "candidate": "def count_substrings(string):\n    \"\"\"\n    >>> count_substrings('123')\n    2\n    >>> count_substrings('123456')\n    3\n    >>> count_substrings('1234567')\n    4\n    >>> count_substrings('12345678')\n    5\n    >>> count_substrings('123456789')\n    6\n    >>> count_substrings('1234567890')\n    7\n    >>> count_substrings('111')\n    1\n    >>> count_substrings('1111')\n    3\n    >>> count_substrings('11111')\n    5\n    >>> count_substrings('111111')\n    9\n    >>> count_substrings('1111111')\n    13\n    \"\"\"\n    count = 0\n    for i in range(len(string)):\n        for j in range(i, len(string)):\n            if sum(int(x) for x in string[i:j+1]) == (j - i + 1):\n                count += 1\n    return count\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 3,
      "score": 10.0,
      "candidate": "def count_substrings(string):\n    count = 0\n    for i in range(len(string)):\n        for j in range(len(string) - i):\n            if sum(int(c) for c in string[j:j+i+1]) == i+1:\n                count += 1\n    return count\n\n\nif __name__ == '__main__':\n    print(count_substrings(\"1234567890\"))"
    },
    {
      "rank": 4,
      "score": 10.0,
      "candidate": "def count_substrings(str1):\n    str1 = str1.replace(' ', '')\n    count = 0\n    for i in range(len(str1)):\n        for j in range(i+1, len(str1)+1):\n            sub = str1[i:j]\n            if sum(map(int, sub)) == len(sub):\n                count += 1\n    return count\n\nprint(count_substrings(''))\nprint(count_substrings(' '))\nprint(count_substrings('123'))\nprint(count_substrings('12312'))\nprint(count_substrings('1231234'))\nprint(count_substrings('12312341234'))\nprint(count_substrings('123123412341234'))\nprint(count_substrings('1231234123412341234'))\nprint(count_substrings('12312341234123412341234'))"
    },
    {
      "rank": 5,
      "score": 10.0,
      "candidate": "def digit_sub_count(s):\n    \"\"\"\n    >>> digit_sub_count(\"123456\")\n    5\n    >>> digit_sub_count(\"1234\")\n    2\n    >>> digit_sub_count(\"123\")\n    3\n    >>> digit_sub_count(\"123456789\")\n    10\n    \"\"\"\n    s = str(s)\n    count = 0\n\n    for i in range(len(s)):\n        for j in range(i + 1, len(s) + 1):\n            sub_str = s[i:j]\n            if len(sub_str) == sum(map(int, sub_str)):\n                count += 1\n    return count\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 6,
      "score": 10.0,
      "candidate": "def count_substrings(s):\n    count = 0\n    for i in range(len(s)):\n        curr_sum = 0\n        for j in range(i, len(s)):\n            curr_sum += int(s[j])\n            if curr_sum == (j-i+1):\n                count += 1\n    return count\n\n\ndef main():\n    s = input(\"Enter a string: \")\n    count = count_substrings(s)\n    print(f\"Number of substrings with the sum of digits equal to their length: {count}\")\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 7,
      "score": 10.0,
      "candidate": "def count_substrings(string):\n    count = 0\n    for i in range(len(string)):\n        for j in range(i+1, len(string)+1):\n            if sum([int(x) for x in string[i:j]]) == j-i:\n                count += 1\n    return count\n\n\nprint(count_substrings(\"00001000000100000000010000000001000000000010000000000100000000010000000000100000000010000000001000000000100000000010000000001000000000100000000010000000001000000000100000000010000000001000000000100000000010000000001000000000100000000010000000001000000000100000000010000000001000000000100000000010000000001000000000100000000010000000001000000000100000000010000000001000000000100000000010000000001000000000100000000010000000001"
    },
    {
      "rank": 8,
      "score": 10.0,
      "candidate": "def sub_sum(s):\n    s_l = list(s)\n    count = 0\n    for i in range(len(s)):\n        for j in range(i, len(s)):\n            temp = int(s_l[j])\n            for k in range(j-1, i-1, -1):\n                temp += int(s_l[k])\n                if temp == j-i+1:\n                    count += 1\n                    break\n    return count\n\ndef main():\n    s = \"1991\"\n    ans = sub_sum(s)\n    print(ans)\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 9,
      "score": 10.0,
      "candidate": "def count_sub_str(n: int) -> int:\n    \"\"\"\n    >>> count_sub_str(123)\n    5\n    >>> count_sub_str(1234)\n    8\n    >>> count_sub_str(12345)\n    11\n    \"\"\"\n    str_n = str(n)\n    count = 0\n\n    for i in range(len(str_n)):\n        count += int(str_n[i])\n        for j in range(i + 1, len(str_n) + 1):\n            if int(str_n[i:j]) == j - i:\n                count += 1\n    return count\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 10,
      "score": 10.0,
      "candidate": "def sub_string(s):\n    count = 0\n    for i in range(len(s)):\n        temp = 0\n        for j in range(i, len(s)):\n            temp += int(s[j])\n            if temp == j - i + 1:\n                count += 1\n    return count\n\ns = input()\nprint(sub_string(s))"
    },
    {
      "rank": 11,
      "score": 10.0,
      "candidate": "def count_substrings(string):\n    \"\"\"\n    >>> count_substrings(\"2345\")\n    2\n    >>> count_substrings(\"12345\")\n    3\n    >>> count_substrings(\"245\")\n    1\n    >>> count_substrings(\"345\")\n    0\n    >>> count_substrings(\"1345\")\n    1\n    >>> count_substrings(\"23456\")\n    3\n    >>> count_substrings(\"234\")\n    1\n    >>> count_substrings(\"2456\")\n    2\n    >>> count_substrings(\"\")\n    0\n    \"\"\"\n    total_length = 0\n    for i in range(len(string)):\n        current_length = i + 1\n        current_sum = 0\n        for j in range(current_length):\n            current_sum += int(string[i - j])\n        if current_sum == current_length:\n            total_length += 1\n    return total_length\n\n\ndef main():\n    import doctest\n    doctest.testmod()\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 12,
      "score": 10.0,
      "candidate": "def count_substrings(str):\n    sub_str_count = 0\n    for i in range(len(str)):\n        curr_sum = 0\n        for j in range(i, len(str)):\n            curr_sum += int(str[j])\n            if curr_sum == j - i + 1:\n                sub_str_count += 1\n    return sub_str_count\n\n\ndef main():\n    str1 = \"1923\"\n    str2 = \"1234\"\n    str3 = \"4567\"\n    str4 = \"8989\"\n    print(count_substrings(str1))\n    print(count_substrings(str2))\n    print(count_substrings(str3))\n    print(count_substrings(str4))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 13,
      "score": 10.0,
      "candidate": "def count_substrings_with_sum_of_digits_equal_to_length(string: str) -> int:\n    \"\"\"\n    >>> count_substrings_with_sum_of_digits_equal_to_length(\"1234\")\n    4\n    >>> count_substrings_with_sum_of_digits_equal_to_length(\"123456\")\n    2\n    >>> count_substrings_with_sum_of_digits_equal_to_length(\"1234567\")\n    2\n    >>> count_substrings_with_sum_of_digits_equal_to_length(\"123456789\")\n    2\n    >>> count_substrings_with_sum_of_digits_equal_to_length(\"1234567891011\")\n    3\n    \"\"\"\n    count = 0\n    for i in range(len(string)):\n        for j in range(i + 1, len(string) + 1):\n            if sum(int(char) for char in string[i:j]) == j - i:\n                count += 1\n    return count\n\n\nif __name__ == \"__main__\":\n    from doctest import testmod\n\n    testmod()"
    },
    {
      "rank": 14,
      "score": 10.0,
      "candidate": "def count_sub_strings(string):\n    count = 0\n    for i in range(len(string)):\n        for j in range(i, len(string) + 1):\n            if sum(int(x) for x in string[i:j]) == j - i:\n                count += 1\n    return count\n\n\ndef main():\n    string = \"12345\"\n    ans = count_sub_strings(string)\n    print(ans)\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 15,
      "score": 10.0,
      "candidate": "def count_substrings(string: str) -> int:\n    \"\"\"\n    >>> count_substrings(\"abc\")\n    3\n    \"\"\"\n    length = len(string)\n    count = 0\n    for i in range(length):\n        sub_string = string[i]\n        for j in range(i + 1, length + 1):\n            sub_string += string[j - 1]\n            if sum(map(int, sub_string)) == len(sub_string):\n                count += 1\n    return count\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 16,
      "score": 10.0,
      "candidate": "def count_substrings(str):\n    count = 0\n    for i in range(len(str)):\n        for j in range(i+1,len(str)+1):\n            if sum([int(x) for x in str[i:j]]) == (j-i):\n                count += 1\n    return count\n\nprint(count_substrings(\"12345\"))\nprint(count_substrings(\"123456789\"))\nprint(count_substrings(\"123456789123456789\"))\nprint(count_substrings(\"123456789123456789123456789\"))\nprint(count_substrings(\"123456789123456789123456789123456789\"))"
    },
    {
      "rank": 17,
      "score": 10.0,
      "candidate": "from collections import Counter\n\n\ndef count_substrings(string):\n    counter = Counter()\n    for i in range(len(string)):\n        for j in range(i, len(string)):\n            counter[sum(int(c) for c in string[i:j + 1])] += 1\n    return sum(counter[i] for i in range(len(string)))\n\n\nprint(count_substrings(\"293345786\"))"
    },
    {
      "rank": 18,
      "score": 10.0,
      "candidate": "def count_substrings(string):\n    if len(string) == 0:\n        return 0\n    count = 0\n    for i in range(len(string)):\n        for j in range(i, len(string)):\n            if sum(int(x) for x in string[i:j+1]) == j-i+1:\n                count += 1\n    return count\n\n\ndef main():\n    print(count_substrings(\"\"))\n    print(count_substrings(\"12345\"))\n    print(count_substrings(\"123456789\"))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 19,
      "score": 10.0,
      "candidate": "def count_sub_str_with_sum_equal_to_length(string):\n    \"\"\"\n    Time complexity: O(n).\n    Space complexity: O(1).\n    \"\"\"\n    count = 0\n    for i in range(len(string)):\n        sum_digits = 0\n        for c in string[i:]:\n            sum_digits += int(c)\n            if sum_digits == len(string[i:]):\n                count += 1\n            else:\n                break\n    return count\n\n\ndef main():\n    string = \"12345\"\n    print(count_sub_str_with_sum_equal_to_length(string))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 20,
      "score": 10.0,
      "candidate": "def count_sub_strings(string):\n    # Write your code here.\n    count = 0\n    for i in range(len(string)):\n        for j in range(i, len(string)):\n            if sum(map(int, string[i:j+1])) == j-i+1:\n                count += 1\n    return count\n\n\ndef main():\n    string = \"123456789\"\n    print(count_sub_strings(string))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 21,
      "score": 9.101594779886327,
      "candidate": "def count_substrings(string):\n    count = 0\n    for i in range(len(string)):\n        for j in range(i, len(string)+1):\n            if sum(map(int, string[i:j])) == j-i:\n                count += 1\n    return count\n\n\nif __name__ == \"__main__\":\n    string = input()\n    print(count_substrings(string))"
    },
    {
      "rank": 22,
      "score": 9.090419802360152,
      "candidate": "def count_substrings(string):\n    count = 0\n    for i in range(len(string)):\n        for j in range(i + 1, len(string) + 1):\n            if sum(int(x) for x in string[i:j]) == j - i:\n                count += 1\n    return count\n\n\ndef main():\n    string = input(\"Enter a string: \")\n    print(f\"Number of substrings with the sum of digits equal to their length: {count_substrings(string)}\")\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 23,
      "score": 9.060016927391498,
      "candidate": "def count_substrings(n):\n    count = 0\n    for i in range(1, len(n)+1):\n        for j in range(len(n)-i+1):\n            if sum(map(int, n[j:j+i])) == i:\n                count += 1\n    return count\n\n\nprint(count_substrings(\"1234567890\"))\nprint(count_substrings(\"112\"))\nprint(count_substrings(\"11234567890112\"))"
    },
    {
      "rank": 24,
      "score": 8.888435779456389,
      "candidate": "def sub_string(str):\n    count = 0\n    for i in range(len(str)):\n        sub_str = str[i:]\n        total = 0\n        for j in range(len(sub_str)):\n            total += int(sub_str[j])\n            if total == j + 1:\n                count += 1\n    return count\n\n\ndef main():\n    str = input(\"Enter a string: \")\n    result = sub_string(str)\n    print(f\"The number of substrings with the sum of digits equal to their length: {result}\")\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 25,
      "score": 8.877464243892744,
      "candidate": "def substrings_with_equal_digits(input_str):\n    count = 0\n    for i in range(len(input_str)):\n        for j in range(i + 1, len(input_str) + 1):\n            substr = input_str[i:j]\n            if sum([int(i) for i in substr]) == len(substr):\n                count += 1\n\n    return count"
    },
    {
      "rank": 26,
      "score": 8.865928261559095,
      "candidate": "def count_substrings(string):\n    if not string:\n        return 0\n\n    total_substrings = 0\n\n    for i in range(len(string)):\n        for j in range(i, len(string)):\n            if sum(int(x) for x in string[i:j+1]) == j - i + 1:\n                total_substrings += 1\n\n    return total_substrings\n\n\nprint(count_substrings(\"12345\"))\nprint(count_substrings(\"12346\"))"
    },
    {
      "rank": 27,
      "score": 8.854173397835835,
      "candidate": "def count_substrings(string):\n    count = 0\n    for i in range(len(string)):\n        for j in range(i+1, len(string)+1):\n            if sum(map(int, string[i:j])) == j-i:\n                count += 1\n    return count\n\nprint(count_substrings(\"12345\"))"
    },
    {
      "rank": 28,
      "score": 8.835582094473247,
      "candidate": "def count_substrings(input_string):\n    counter = 0\n    for i in range(len(input_string)):\n        for j in range(i+1, len(input_string)+1):\n            if sum(int(x) for x in input_string[i:j]) == (j-i):\n                counter += 1\n    return counter\n\n\nif __name__ == \"__main__\":\n    print(count_substrings(\"12345\"))"
    },
    {
      "rank": 29,
      "score": 8.789913307527785,
      "candidate": "def count_sub_sum(num):\n    if num < 0:\n        return 0\n    elif num < 10:\n        return 1\n    else:\n        return count_sub_sum(num//10) + count_sub_sum(num//10 - num % 10)\n\n\nprint(count_sub_sum(12345))"
    },
    {
      "rank": 30,
      "score": 8.785705289850007,
      "candidate": "def count_sum_of_digits(str_input):\n    count = 0\n    for i in range(len(str_input)):\n        sub_str = str_input[i:]\n        sub_str_len = len(sub_str)\n        if sum(int(i) for i in sub_str) == sub_str_len:\n            count += 1\n    return count\n\n\nprint(count_sum_of_digits(\"2323232\"))"
    },
    {
      "rank": 31,
      "score": 8.754600408042517,
      "candidate": "def sub_string_sum(n):\n    count = 0\n    for i in range(1, len(str(n))+1):\n        for j in range(0, len(str(n))-i+1):\n            if sum(map(int, str(n)[j:j+i])) == i:\n                count += 1\n    return count\n\nif __name__ == '__main__':\n    n = 199\n    print(sub_string_sum(n))"
    },
    {
      "rank": 32,
      "score": 8.716473630446735,
      "candidate": "def count_substrings(string):\n    count = 0\n    for i in range(len(string)):\n        for j in range(i+1, len(string)+1):\n            substr = string[i:j]\n            if sum([int(x) for x in substr]) == len(substr):\n                count += 1\n    return count\n\n\ndef main():\n    string = input(\"Enter a string: \")\n    count = count_substrings(string)\n    print(f\"Number of substrings with sum of digits equal to their length is {count}\")\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 33,
      "score": 8.653064388709163,
      "candidate": "def count_sub_string(string):\n    result = 0\n    for i in range(len(string)):\n        for j in range(i+1, len(string)+1):\n            sub_string = string[i:j]\n            if sum([int(x) for x in list(sub_string)]) == len(sub_string):\n                result += 1\n    return result\n\n\nprint(count_sub_string(\"235\"))\nprint(count_sub_string(\"23567\"))\nprint(count_sub_string(\"12345\"))\nprint(count_sub_string(\"123456\"))\nprint(count_sub_string(\"1234567\"))"
    },
    {
      "rank": 34,
      "score": 8.602237612149628,
      "candidate": "def count_substrings(string):\n    \"\"\"\n    Time complexity: O(n^2)\n    Space complexity: O(n)\n    \"\"\"\n    count = 0\n    for i in range(len(string)):\n        for j in range(i + 1, len(string) + 1):\n            sub = string[i:j]\n            if sum([int(c) for c in sub]) == len(sub):\n                count += 1\n    return count\n\n\nprint(count_substrings(\"112321311\"))"
    },
    {
      "rank": 35,
      "score": 8.588764126063198,
      "candidate": "def count_sum_of_digits(s):\n    count = 0\n    for i in range(len(s)):\n        sum_of_digits = 0\n        for j in range(i, len(s)):\n            sum_of_digits += int(s[j])\n            if sum_of_digits == j - i + 1:\n                count += 1\n    return count"
    },
    {
      "rank": 36,
      "score": 8.583575085633942,
      "candidate": "def count_sub_strings(num):\n    digits = len(num)\n    count = 0\n    for i in range(0, digits):\n        for j in range(i, digits):\n            if sum(map(int, num[i:j+1])) == j-i+1:\n                count += 1\n    return count\n\n\ndef main():\n    num = input(\"Enter a number: \")\n    count = count_sub_strings(num)\n    print(f\"Number of substrings with the sum of digits equal to their length: {count}\")\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 37,
      "score": 8.516419122544232,
      "candidate": "def substrings(s):\n    count = 0\n    for i in range(len(s)):\n        for j in range(i+1, len(s)+1):\n            if sum(map(int, s[i:j])) == j-i:\n                count += 1\n    return count"
    },
    {
      "rank": 38,
      "score": 8.472806290413372,
      "candidate": "def count_sum_equal_len(number):\n    length = len(number)\n    count = 0\n    for i in range(length):\n        for j in range(i, length):\n            if sum(int(k) for k in number[i:j+1]) == j-i+1:\n                count += 1\n    return count\n\nprint(count_sum_equal_len(\"12345\"))\nprint(count_sum_equal_len(\"1233345\"))"
    },
    {
      "rank": 39,
      "score": 8.438775610054513,
      "candidate": "def count_sum_of_digits(num):\n    cnt = 0\n    for i in range(1, len(num) + 1):\n        if sum(map(int, list(num[0:i]))) == i:\n            cnt += 1\n    return cnt\n\n\nprint(count_sum_of_digits(\"12345\"))"
    },
    {
      "rank": 40,
      "score": 8.414200193380704,
      "candidate": "def sub_string(n):\n    count = 0\n    for i in range(1, len(n)+1):\n        for j in range(len(n)-i+1):\n            if sum([int(k) for k in n[j:j+i]]) == i:\n                count += 1\n    return count\n\ndef main():\n    n = input(\"Please enter a string of numbers: \")\n    print(sub_string(n))\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 41,
      "score": 8.36646767424564,
      "candidate": "def count_substrings(s):\n    count = 0\n    for i in range(len(s)):\n        count += 1\n        for j in range(i+1, len(s)+1):\n            if sum(map(int, s[i:j])) == j-i:\n                count += 1\n    return count\n\n\nprint(count_substrings(\"4321\"))"
    },
    {
      "rank": 42,
      "score": 8.31886135724878,
      "candidate": "def count_substrings(input_str: str) -> int:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(1)\n    \"\"\"\n\n    length = len(input_str)\n    count = 0\n\n    for i in range(length):\n        for j in range(i + 1, length + 1):\n            if sum(int(x) for x in input_str[i:j]) == j - i:\n                count += 1\n\n    return count\n\n\nif __name__ == \"__main__\":\n    print(count_substrings(\"123456789\"))"
    },
    {
      "rank": 43,
      "score": 8.314575246586935,
      "candidate": "def count_substrings(str):\n    count = 0\n    for i in range(len(str)):\n        for j in range(i, len(str)+1):\n            if sum(int(k) for k in str[i:j]) == j-i:\n                count += 1\n    return count\n\n\ndef main():\n    str_input = input(\"Enter a string: \")\n    print(\"Number of substrings with sum of digits equal to their length:\")\n    print(count_substrings(str_input))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 44,
      "score": 8.24980901346321,
      "candidate": "def count_substrings(string):\n    count = 0\n    for i in range(len(string)):\n        temp = 0\n        for j in range(i, len(string)):\n            temp += int(string[j])\n            if temp == j - i + 1:\n                count += 1\n    return count\n\n\nif __name__ == \"__main__\":\n    print(count_substrings(\"1234\"))"
    },
    {
      "rank": 45,
      "score": 8.248837947944937,
      "candidate": "def digit_count(number):\n    count = 0\n    for i in range(1, len(number) + 1):\n        if sum([int(j) for j in number[0:i]]) == i:\n            count += 1\n    return count\n\n\ndef main():\n    number = input(\"Enter a number: \")\n    print(digit_count(number))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 46,
      "score": 8.243191264549424,
      "candidate": "def count_substrings(num):\n    count = 0\n    for i in range(1, len(num)):\n        for j in range(len(num)-i+1):\n            sub_str = num[j:j+i]\n            if sum(int(x) for x in sub_str) == i:\n                count += 1\n    return count\n\n\nprint(count_substrings(\"12345\"))\nprint(count_substrings(\"124567\"))"
    },
    {
      "rank": 47,
      "score": 8.215803700143868,
      "candidate": "def count_substrings(s):\n    count = 0\n    for i in range(len(s)):\n        for j in range(i, len(s)):\n            if sum(int(d) for d in s[i:j + 1]) == (j - i + 1):\n                count += 1\n    return count\n\n\ndef main():\n    s = input(\"Enter a string: \")\n    count = count_substrings(s)\n    print(f\"Number of substrings with the sum of digits equal to their length: {count}\")\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 48,
      "score": 8.208283682163236,
      "candidate": "def sub_string_sum(string):\n    count = 0\n    for i in range(len(string)):\n        for j in range(i+1, len(string)+1):\n            if sum(map(int, string[i:j])) == j-i:\n                count += 1\n    return count\n\n\ndef main():\n    assert sub_string_sum(\"1234567\") == 5\n    assert sub_string_sum(\"123456\") == 2\n    assert sub_string_sum(\"12345\") == 4\n    assert sub_string_sum(\"1234\") == 3\n    assert sub_string_sum(\"123\") == 2\n    assert sub_string_sum(\"12\") == 1\n    assert sub_string_sum(\"11\") == 1\n    assert sub_string_sum(\"1\") == 0\n    assert sub_string_sum(\"\") == 0\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 49,
      "score": 8.192176194678547,
      "candidate": "def countSubstrings(str):\n    count = 0\n    for i in range(len(str)):\n        for j in range(i+1, len(str)+1):\n            substr = str[i:j]\n            if sum([int(x) for x in substr]) == len(substr):\n                count += 1\n    return count\n\nprint(countSubstrings(\"12345\"))\nprint(countSubstrings(\"1231234\"))\nprint(countSubstrings(\"12312345\"))"
    },
    {
      "rank": 50,
      "score": 8.191727667308099,
      "candidate": "def count_sub_str(num):\n    count = 0\n    for i in range(len(num)):\n        for j in range(i, len(num)):\n            sub_str = num[i:j+1]\n            if sum(int(c) for c in sub_str) == len(sub_str):\n                count += 1\n    return count\n\n\ndef main():\n    num = input(\"Enter a number: \")\n    count = count_sub_str(num)\n    print(f\"Number of substrings with the sum of digits equal to their length: {count}\")\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 51,
      "score": 8.173494147510292,
      "candidate": "def count_substrings(string):\n    result = 0\n    for i in range(len(string)):\n        for j in range(i + 1, len(string) + 1):\n            if sum([int(x) for x in string[i:j]]) == j - i:\n                result += 1\n    return result\n\n\ndef main():\n    string = input(\"Enter a string: \")\n    print(count_substrings(string))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 52,
      "score": 8.142109876918667,
      "candidate": "def count_substrings(string):\n    count = 0\n    for i in range(len(string)):\n        for j in range(i + 1, len(string) + 1):\n            if sum(map(int, string[i:j])) == j - i:\n                count += 1\n    return count\n\n\ndef main():\n    string = input(\"Enter a string: \")\n    count_substrings(string)\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 53,
      "score": 8.091973084690936,
      "candidate": "def count_sub_str(str1):\n    # Write your code here\n    sub_str_count = 0\n    for i in range(len(str1)):\n        for j in range(i+1, len(str1)+1):\n            if sum(map(int, str1[i:j])) == j-i:\n                sub_str_count += 1\n    return sub_str_count\n\n\ndef main():\n    str1 = input(\"Enter the string: \")\n    print(count_sub_str(str1))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 54,
      "score": 8.019055373903987,
      "candidate": "def count_sub_string_with_sum_equal_length(n):\n    count = 0\n    for i in range(10):\n        temp = n\n        while temp:\n            count += 1\n            temp -= 10 * (temp // 10) + i\n    return count\n\n\ndef main():\n    n = int(input(\"Enter the number: \"))\n    ans = count_sub_string_with_sum_equal_length(n)\n    print(\"Number of substrings with sum of digits equal to their length: \", ans)\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 55,
      "score": 8.000205854282967,
      "candidate": "def count_substrings(string: str) -> int:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(1)\n    \"\"\"\n    total = 0\n    for i in range(len(string)):\n        j = i\n        while j < len(string) and int(string[j]) + j - i < len(string):\n            if int(string[j]) + j - i == j - i + 1:\n                total += 1\n            j += 1\n    return total\n\n\nif __name__ == \"__main__\":\n    print(count_substrings(\"12345\"))"
    },
    {
      "rank": 56,
      "score": 7.979783755361913,
      "candidate": "def count_number(n):\n    count = 0\n    for i in range(10):\n        count += n.count(str(i))\n\n    return count\n\n\ndef get_number_of_substring(s):\n    n = str(s)\n    n = n + \"$\"\n    count = 0\n    for i in range(len(n)):\n        for j in range(i + 1, len(n) + 1):\n            if count_number(n[i:j]) == (j - i):\n                count += 1\n    return count\n\n\nif __name__ == \"__main__\":\n    print(get_number_of_substring(12))\n    print(get_number_of_substring(112))\n    print(get_number_of_substring(111))"
    },
    {
      "rank": 57,
      "score": 7.942037662330563,
      "candidate": "from functools import reduce\n\n\ndef sub_sum(number):\n    digits = [int(d) for d in str(number)]\n    return reduce(lambda acc, d: acc + 1 if d == len(digits) else acc, digits, 0)\n\n\ndef sub_sum_count(number):\n    digits = [int(d) for d in str(number)]\n    count = 0\n    for i in range(len(digits)):\n        for j in range(i, len(digits)):\n            if sum(digits[i : j + 1]) == j - i + 1:\n                count += 1\n    return count\n\n\ndef main():\n    number = 1101101\n    ans = sub_sum_count(number)\n    print(ans)\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 58,
      "score": 7.851276889883622,
      "candidate": "def countSubstrings(s):\n    length = len(s)\n    count = 0\n    for i in range(length):\n        for j in range(i+1, length+1):\n            if sum(int(c) for c in s[i:j]) == (j-i):\n                count+=1\n    return count\n\ns = \"15125\"\nprint(countSubstrings(s))"
    },
    {
      "rank": 59,
      "score": 7.719978954788971,
      "candidate": "def count_substrings(string):\n    count = 0\n    for i in range(len(string)):\n        current_sum = 0\n        for j in range(i, len(string)):\n            current_sum += int(string[j])\n            if current_sum == j - i + 1:\n                count += 1\n    return count\n\n\ndef main():\n    string = input(\"Enter a string: \")\n    print(count_substrings(string))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 60,
      "score": 7.7039675791920965,
      "candidate": "def count_substrings(string):\n    count = 0\n    for i in range(len(string)):\n        for j in range(i + 1, len(string) + 1):\n            sub_string = string[i:j]\n            if sum(map(int, sub_string)) == len(sub_string):\n                count += 1\n    return count\n\n\nif __name__ == \"__main__\":\n    print(count_substrings(\"1234\"))"
    },
    {
      "rank": 61,
      "score": 7.6408667416881695,
      "candidate": "def count_substrings(s):\n    res = 0\n    for i in range(len(s)):\n        temp_sum = 0\n        for j in range(i,len(s)):\n            temp_sum += int(s[j])\n            if temp_sum == j-i+1:\n                res += 1\n    return res\n\ndef count_substrings_optimized(s):\n    res = 0\n    for i in range(len(s)):\n        temp_sum = 0\n        for j in range(i,len(s)):\n            temp_sum += int(s[j])\n            if temp_sum == j-i+1:\n                res += 1\n    return res\n\nprint(count_substrings(\"1234567890\"))\nprint(count_substrings_optimized(\"1234567890\"))"
    },
    {
      "rank": 62,
      "score": 7.621382992414939,
      "candidate": "def count_substrings(str_):\n    count = 0\n    for i in range(len(str_)):\n        temp = 0\n        for j in range(i, len(str_)):\n            temp += int(str_[j])\n            if temp == j - i + 1:\n                count += 1\n    return count\n\n\nstr_ = input()\nprint(count_substrings(str_))"
    },
    {
      "rank": 63,
      "score": 3.7038657101133965,
      "candidate": "def count_substrings(input_string):\n    count = 0\n    for i in range(len(input_string)):\n        for j in range(i + 1, len(input_string) + 1):\n            sub_string = input_string[i:j]\n            if sum([int(x) for x in sub_string]) == len(sub_string):\n                count += 1\n    return count\n\n\nprint(count_substrings(\"abcd\"))\nprint(count_substrings(\"abcde\"))\nprint(count_substrings(\"ababab\"))"
    },
    {
      "rank": 64,
      "score": 3.6001008698928088,
      "candidate": "def count_substrings(string: str) -> int:\n    \"\"\"\n    >>> count_substrings('1234')\n    1\n    >>> count_substrings('12345')\n    1\n    >>> count_substrings('123456')\n    1\n    >>> count_substrings('1234567')\n    1\n    >>> count_substrings('12345678')\n    1\n    >>> count_substrings('123456789')\n    1\n    >>> count_substrings('1234567891')\n    2\n    >>> count_substrings('12345678912')\n    2\n    >>> count_substrings('123456789123')\n    2\n    >>> count_substrings('1234567891234')\n    2\n    >>> count_substrings('12345678912345')\n    2\n    \"\"\"\n    count = 0\n    for i in range(len(string)):\n        for j in range(i + 1, len(string) + 1):\n            if sum(int(c) for c in string[i:j]) == j - i:\n                count += 1\n    return count\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 65,
      "score": 3.57875134543505,
      "candidate": "def count_substrings(string: str) -> int:\n    \"\"\"\n    >>> count_substrings(\"13101\")\n    3\n    >>> count_substrings(\"12345\")\n    0\n    >>> count_substrings(\"11111\")\n    10\n    >>> count_substrings(\"00000\")\n    0\n    \"\"\"\n    count = 0\n\n    for i in range(len(string)):\n        for j in range(i + 1, len(string) + 1):\n            if sum([int(x) for x in string[i:j]]) == j - i:\n                count += 1\n\n    return count\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 66,
      "score": 3.515371210856913,
      "candidate": "def count_substrings(num: int) -> int:\n    \"\"\"\n    >>> count_substrings(12345)\n    7\n    >>> count_substrings(1234)\n    4\n    >>> count_substrings(123)\n    1\n    >>> count_substrings(12)\n    0\n    >>> count_substrings(1)\n    0\n    >>> count_substrings(0)\n    1\n    \"\"\"\n    digits = [int(x) for x in str(num)]\n    count = 0\n\n    for i in range(len(digits)):\n        for j in range(i, len(digits) + 1):\n            sub = digits[i:j]\n            if sum(sub) == len(sub):\n                count += 1\n\n    return count\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 67,
      "score": 3.312322951662585,
      "candidate": "def sum_of_digits(number):\n    \"\"\"\n    >>> sum_of_digits(100)\n    0\n    >>> sum_of_digits(12345)\n    12\n    >>> sum_of_digits(123456)\n    12\n    >>> sum_of_digits(1234567)\n    12\n    >>> sum_of_digits(12345678)\n    12\n    >>> sum_of_digits(123456789)\n    12\n    >>> sum_of_digits(1234567891)\n    12\n    >>> sum_of_digits(12345678912)\n    12\n    \"\"\"\n    if number == 0:\n        return 0\n    if number < 0:\n        raise ValueError(\"number must be positive\")\n    count = 0\n    while number:\n        count += 1\n        number = number // 10\n    return count\n\n\ndef count_substrings(number):\n    \"\"\"\n    >>> count_substrings(100)\n    0\n    >>> count_substrings(12345)\n    12\n    >>> count_substrings(123456)\n    12\n    >>> count_substrings(1234567)\n    12\n    >>> count_substrings(12345678)\n    12\n    >>> count_substrings(123456789)\n    12\n    >>> count_substrings(1234567891)\n    12\n    >>> count_substrings(12345678912)\n    12\n    \"\"\"\n    number_str = str(number)\n    count = 0\n    for i in range(len(number_str)):\n        if sum_of_digits(number_str[i:]) == i + 1:\n            count += 1\n    return count\n\n\nif __name__ == \"__main__\":"
    },
    {
      "rank": 68,
      "score": 3.291625197078105,
      "candidate": "def count_substrings(string: str) -> int:\n    \"\"\"\n    Time Complexity: O(n^2)\n    Space Complexity: O(n)\n    \"\"\"\n    count = 0\n    for i in range(len(string)):\n        for j in range(i + 1, len(string) + 1):\n            if sum(map(int, string[i:j])) == j - i:\n                count += 1\n    return count\n\n\nif __name__ == \"__main__\":\n    assert count_substrings(\"123\") == 3\n    assert count_substrings(\"456\") == 0\n    assert count_substrings(\"1234567\") == 2"
    },
    {
      "rank": 69,
      "score": 3.2324369897595298,
      "candidate": "def count_substrings(n: int) -> int:\n    \"\"\"\n    >>> count_substrings(131221)\n    3\n    \"\"\"\n    length = len(str(n))\n    count = 0\n    for i in range(length):\n        if sum(int(x) for x in str(n)) == length:\n            count += 1\n        n = n // 10\n    return count\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 70,
      "score": 3.2061728165626664,
      "candidate": "def count_substrings(s: str) -> int:\n    \"\"\"\n    >>> count_substrings(\"13101\")\n    3\n    >>> count_substrings(\"101\")\n    1\n    >>> count_substrings(\"0101\")\n    0\n    \"\"\"\n    count = 0\n\n    for i in range(len(s)):\n        for j in range(i + 1, len(s) + 1):\n            if sum(map(int, s[i:j])) == j - i:\n                count += 1\n\n    return count\n\n\ndef main():\n    import doctest\n\n    doctest.testmod()\n    s = input(\"Enter the string: \").strip()\n    print(count_substrings(s))\n\n\nif __name__ == \"__main__\":\n    import profile\n\n    profile.run(\"main()\")"
    },
    {
      "rank": 71,
      "score": 3.137421689518101,
      "candidate": "def count_sum_of_digits(string: str) -> int:\n    \"\"\"\n    >>> count_sum_of_digits(\"123\")\n    5\n    >>> count_sum_of_digits(\"1243\")\n    6\n    >>> count_sum_of_digits(\"12345\")\n    1\n    >>> count_sum_of_digits(\"123456\")\n    2\n    \"\"\"\n    length = len(string)\n    count = 0\n    for i in range(length):\n        for j in range(i, length):\n            if sum(map(int, string[i : j + 1])) == j - i + 1:\n                count += 1\n    return count\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 72,
      "score": 3.137330330093197,
      "candidate": "def sub_str_count(str):\n    str_len = len(str)\n    if str_len <= 0:\n        return 0\n    str_arr = [int(i) for i in str]\n    total_sum = sum(str_arr)\n    if total_sum != str_len:\n        return 0\n    count = 0\n    for i in range(str_len):\n        for j in range(i+1, str_len+1):\n            if sum(str_arr[i:j]) == j-i:\n                count += 1\n    return count\n\n\nprint(sub_str_count(\"1124\"))\nprint(sub_str_count(\"131101\"))\nprint(sub_str_count(\"1210\"))\nprint(sub_str_count(\"123456789\"))"
    },
    {
      "rank": 73,
      "score": 3.123151908370022,
      "candidate": "def count_substrings(string: str) -> int:\n    \"\"\"\n    >>> count_substrings(\"abcdefg\")\n    7\n    >>> count_substrings(\"123\")\n    3\n    >>> count_substrings(\"1234\")\n    4\n    \"\"\"\n    count: int = 0\n\n    for i in range(len(string)):\n        for j in range(i + 1, len(string) + 1):\n            sub_string = string[i:j]\n            if sum(int(char) for char in sub_string) == len(sub_string):\n                count += 1\n\n    return count\n\n\ndef count_substrings_optimized(string: str) -> int:\n    \"\"\"\n    >>> count_substrings(\"abcdefg\")\n    7\n    >>> count_substrings(\"123\")\n    3\n    >>> count_substrings(\"1234\")\n    4\n    \"\"\"\n    count: int = 0\n\n    for i in range(len(string)):\n        for j in range(i + 1, len(string) + 1):\n            sub_string = string[i:j]\n            if sum(int(char) for char in sub_string) == len(sub_string):\n                count += 1\n\n    return count\n\n\nif __name__ == \"__main__\":\n    from doctest import testmod\n\n    testmod()"
    },
    {
      "rank": 74,
      "score": 3.119413986386204,
      "candidate": "def count_substrings(string: str) -> int:\n    \"\"\"\n    >>> count_substrings(\"12345\")\n    7\n    \"\"\"\n    length = len(string)\n    count = 0\n    for i in range(length):\n        for j in range(i, length):\n            if sum(map(int, string[i : j + 1])) == j - i + 1:\n                count += 1\n    return count\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 75,
      "score": 3.091945663195093,
      "candidate": "def sub_string_sum(string):\n    if string is None:\n        return 0\n    count = 0\n    for i in range(len(string)):\n        for j in range(i+1, len(string)+1):\n            sub_string = string[i:j]\n            if sum([int(x) for x in sub_string]) == len(sub_string):\n                count += 1\n    return count\n\n\ndef main():\n    assert sub_string_sum(\"12345\") == 10\n    assert sub_string_sum(\"12346\") == 10\n    assert sub_string_sum(\"123456\") == 20\n    assert sub_string_sum(\"1234567\") == 20\n    assert sub_string_sum(\"12345678\") == 20\n    assert sub_string_sum(\"123456789\") == 30\n    assert sub_string_sum(\"1234567890\") == 30\n    assert sub_string_sum(\"12345678901\") == 40\n    assert sub_string_sum(\"123456789012\") == 40\n    assert sub_string_sum(\"1234567890123\") == 40\n    assert sub_string_sum(\"12345678901234\") == 40\n    assert sub_string_sum(\"123456789012345\") == 40\n    assert sub_string_sum(\"1234567890123456\") == 40\n    assert sub_string_sum(\"12345678901234567\") == 40\n    assert sub_string_sum(\"123456789012345678\") == 40\n    assert sub_string_sum(\"1234567890123456789"
    },
    {
      "rank": 76,
      "score": 3.079368166101807,
      "candidate": "def count_substrings(number: int) -> int:\n    \"\"\"\n    >>> count_substrings(12345)\n    7\n    >>> count_substrings(1234)\n    1\n    >>> count_substrings(12344)\n    2\n    >>> count_substrings(1234567)\n    10\n    >>> count_substrings(123456789)\n    22\n    >>> count_substrings(1234567890)\n    35\n    \"\"\"\n    count = 0\n    for i in range(len(str(number)), 0, -1):\n        num = int(str(number)[:i])\n        if sum(map(int, str(num))) == i:\n            count += 1\n    return count\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 77,
      "score": 3.074807269630267,
      "candidate": "def sub_str(number):\n    number_str = str(number)\n    n = len(number_str)\n    count = 0\n    for i in range(n):\n        for j in range(i, n):\n            if sum(map(int, number_str[i:j + 1])) == n:\n                count += 1\n    return count\n\n\ndef sub_str1(number):\n    number_str = str(number)\n    n = len(number_str)\n    count = 0\n    for i in range(n):\n        for j in range(i, n):\n            if sum(map(int, number_str[i:j + 1])) == n:\n                count += 1\n    return count\n\n\ndef sub_str2(number):\n    number_str = str(number)\n    n = len(number_str)\n    count = 0\n    for i in range(n):\n        for j in range(i, n):\n            if sum(map(int, number_str[i:j + 1])) == n:\n                count += 1\n    return count\n\n\nprint(sub_str(11))\nprint(sub_str1(11))\nprint(sub_str2(11))"
    },
    {
      "rank": 78,
      "score": 3.042150584089749,
      "candidate": "def sum_of_digits(number: int) -> int:\n    \"\"\"\n    >>> sum_of_digits(101)\n    1\n    >>> sum_of_digits(1345)\n    3\n    >>> sum_of_digits(1234)\n    3\n    >>> sum_of_digits(1345)\n    3\n    >>> sum_of_digits(0)\n    0\n    \"\"\"\n    total_substrings = 0\n    number_string = str(number)\n\n    for i in range(len(number_string)):\n        substring = number_string[i:]\n        if int(substring) == sum(map(int, substring)):\n            total_substrings += 1\n    return total_substrings\n\n\nif __name__ == \"__main__\":\n    from doctest import testmod\n\n    testmod()"
    },
    {
      "rank": 79,
      "score": 3.034869095083491,
      "candidate": "def count_substrings(n: int) -> int:\n    \"\"\"\n    >>> count_substrings(123)\n    5\n    >>> count_substrings(112223)\n    1\n    \"\"\"\n    str_n = str(n)\n    count = 0\n\n    for i in range(len(str_n)):\n        for j in range(i + 1, len(str_n) + 1):\n            if sum(map(int, str_n[i:j])) == j - i:\n                count += 1\n\n    return count\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 80,
      "score": 3.033077885930505,
      "candidate": "def count_substrings(string):\n    count = 0\n    for i in range(len(string)):\n        for j in range(i+1, len(string)+1):\n            if sum([int(i) for i in string[i:j]]) == j-i:\n                count += 1\n    return count\n\n\nif __name__ == \"__main__\":\n    assert count_substrings(\"999\") == 0\n    assert count_substrings(\"100\") == 1\n    assert count_substrings(\"1111\") == 4\n    assert count_substrings(\"12345\") == 12"
    },
    {
      "rank": 81,
      "score": 2.9863861051382186,
      "candidate": "def count_substrings(n):\n    \"\"\"\n    >>> count_substrings(123)\n    1\n    >>> count_substrings(244)\n    2\n    >>> count_substrings(456)\n    0\n    >>> count_substrings(123456)\n    2\n    \"\"\"\n    count = 0\n    for i in range(len(n)):\n        for j in range(i + 1, len(n) + 1):\n            s = n[i:j]\n            if sum(map(int, s)) == len(s):\n                count += 1\n    return count\n\n\ndef count_substrings_eff(n):\n    \"\"\"\n    >>> count_substrings_eff(123)\n    1\n    >>> count_substrings_eff(244)\n    2\n    >>> count_substrings_eff(456)\n    0\n    >>> count_substrings_eff(123456)\n    2\n    \"\"\"\n    count = 0\n    for i in range(len(n)):\n        for j in range(i + 1, len(n) + 1):\n            s = n[i:j]\n            if sum(map(int, s)) == len(s):\n                count += 1\n    return count\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 82,
      "score": 2.956053652692469,
      "candidate": "def count_substrings(input_str):\n    input_str = input_str.replace(' ', '')\n    substrings = []\n\n    for i in range(len(input_str)):\n        for j in range(i+1, len(input_str)+1):\n            substring = input_str[i:j]\n            if len(substring) == sum([int(x) for x in substring]):\n                substrings.append(substring)\n    return len(substrings)\n\n\nif __name__ == '__main__':\n    assert count_substrings('1234') == 4\n    assert count_substrings('12345') == 10\n    assert count_substrings('123456') == 19\n    assert count_substrings('1234567') == 32\n    assert count_substrings('12345678') == 49\n    assert count_substrings('123456789') == 70\n    assert count_substrings('1234567890') == 100"
    },
    {
      "rank": 83,
      "score": 2.94745956555495,
      "candidate": "def count_substrings(s):\n    count = 0\n    for i in range(len(s)):\n        for j in range(len(s) + 1):\n            if i >= j:\n                continue\n            if sum(map(int, s[i:j])) == j - i:\n                count += 1\n\n    return count\n\n\ndef main():\n\n    s = \"1234\"\n    ans = count_substrings(s)\n    print(ans)\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 84,
      "score": 2.9142050058151163,
      "candidate": "def count_substrings(s: str) -> int:\n    \"\"\"\n    >>> count_substrings(\"abcde\")\n    5\n    >>> count_substrings(\"abcdefgh\")\n    3\n    >>> count_substrings(\"123456\")\n    1\n    >>> count_substrings(\"123456789\")\n    1\n    >>> count_substrings(\"1234567891011121314151617181920\")\n    3\n    \"\"\"\n    n = len(s)\n    if n <= 0:\n        return 0\n\n    count = 0\n\n    for i in range(n):\n        total = int(s[i])\n        for j in range(i + 1, n + 1):\n            if j - i == total:\n                count += 1\n\n    return count\n\n\ndef count_substrings_efficient(s: str) -> int:\n    \"\"\"\n    >>> count_substrings_efficient(\"abcde\")\n    5\n    >>> count_substrings_efficient(\"abcdefgh\")\n    3\n    >>> count_substrings_efficient(\"123456\")\n    1\n    >>> count_substrings_efficient(\"123456789\")\n    1\n    >>> count_substrings_efficient(\"1234567891011121314151617181920\")\n    3\n    \"\"\"\n    n = len(s)\n    if n <= 0:\n        return 0\n\n    total = [0] * 10\n    total[int(s[0])] = 1\n    count = 1\n\n    for i in range(1, n):\n        total[int(s[i])] += 1\n\n        if total[int(s[i])] == 1:\n            count += 1\n\n    for i in range(1, n):\n        total[int(s[i])] -= 1\n\n        if total[int(s[i])] == 0:\n            count -="
    },
    {
      "rank": 85,
      "score": 2.9110279563593116,
      "candidate": "def sum_of_digits_equal_to_length(number):\n    length = len(number)\n    count = 0\n    for i in range(len(number)):\n        digit_sum = sum([int(d) for d in number[i:i + length]])\n        if digit_sum == length:\n            count += 1\n    return count\n\n\nprint(sum_of_digits_equal_to_length(\"1234567890\"))\nprint(sum_of_digits_equal_to_length(\"111\"))"
    },
    {
      "rank": 86,
      "score": 2.9110217176051325,
      "candidate": "def sub_count(num):\n    return sum([1 for i in range(len(num)) if sum([int(j) for j in num[i:]]) == len(num[i:])])\n\n\nprint(sub_count(\"123456789\"))"
    },
    {
      "rank": 87,
      "score": 2.8891563750785547,
      "candidate": "def count_number_of_substrings(s: str) -> int:\n    \"\"\"\n    >>> count_number_of_substrings('1234')\n    8\n    >>> count_number_of_substrings('12345')\n    13\n    >>> count_number_of_substrings('123456')\n    22\n    \"\"\"\n    len_s = len(s)\n    count = 0\n    for i in range(len_s):\n        for j in range(i, len_s + 1):\n            if sum(map(int, s[i:j])) == j - i:\n                count += 1\n    return count\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 88,
      "score": 2.8855805956760703,
      "candidate": "def count_substrings(s):\n    count = 0\n    for i in range(len(s)):\n        for j in range(i + 1, len(s) + 1):\n            if sum(int(x) for x in s[i:j]) == j - i:\n                count += 1\n    return count\n\n\nprint(count_substrings(\"1729\"))\nprint(count_substrings(\"0011\"))\nprint(count_substrings(\"12345\"))\nprint(count_substrings(\"1111\"))\nprint(count_substrings(\"1234567890\"))"
    },
    {
      "rank": 89,
      "score": 2.8536687334417996,
      "candidate": "def count_substrings(s: str) -> int:\n    \"\"\"\n    >>> count_substrings(\"23456\")\n    0\n    >>> count_substrings(\"1334\")\n    1\n    >>> count_substrings(\"123322\")\n    2\n    >>> count_substrings(\"12332232\")\n    3\n    \"\"\"\n\n    def get_sum(x: str) -> int:\n        return sum(map(int, x))\n\n    if s:\n        return sum(\n            map(\n                lambda x: x == len(x),\n                filter(lambda x: get_sum(x) == len(x), s.split(\"0\")),\n            )\n        )\n    return 0\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 90,
      "score": 2.824957267035281,
      "candidate": "def digit_count(n: int) -> int:\n    \"\"\"\n    >>> digit_count(12345)\n    2\n    \"\"\"\n    return n > 0 and (digit_count(n // 10) + n % 10) if n else 0\n\n\ndef count_sum_digits_equal_len(num: int) -> int:\n    \"\"\"\n    >>> count_sum_digits_equal_len(12345)\n    2\n    \"\"\"\n    count = 0\n    for i in range(1, num + 1):\n        if digit_count(i) == i:\n            count += 1\n    return count\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 91,
      "score": 2.8215997333447183,
      "candidate": "def count_substrings(string):\n    \"\"\"\n    Count the number of substrings in a given string with the sum of digits equal to their length.\n\n    Args:\n       string(string): String to be analysed\n    Returns:\n       int: Number of substrings\n    \"\"\"\n    if not string:\n        return 0\n\n    count = 0\n    for i in range(len(string)):\n        for j in range(i + 1, len(string) + 1):\n            if sum([int(x) for x in string[i:j]]) == (j - i):\n                count += 1\n\n    return count\n\n\ndef test_function(test_case):\n    string = test_case[0]\n    solution = test_case[1]\n    output = count_substrings(string)\n\n    if output == solution:\n        print(\"Pass\")\n    else:\n        print(\"Fail\")\n\n\nstring = '1234'\nsolution = 3\ntest_case = [string, solution]\ntest_function(test_case)\n\nstring = '12345'\nsolution = 5\ntest_case = [string, solution]\ntest_function(test_case)\n\nstring = '123456'\nsolution = 5\ntest_case = [string, solution]\ntest_function(test_case)\n\nstring = '1234567'\nsolution = 4\ntest_case = [string, solution]\ntest_function(test_case)\n\nstring = '12345678'\nsolution = 2\ntest_case = [string, solution]\ntest_function(test_case)\n\nstring = '123456789'\nsolution = 1\ntest_case = [string, solution]\ntest_function(test_case)\n\nstring = '1234567890'\nsolution = 1\ntest_case = [string, solution]\ntest_function(test_case)\n\nstring = '12345678901'\nsolution = 1\ntest_"
    },
    {
      "rank": 92,
      "score": 2.742769639883736,
      "candidate": "def count_substrings(string: str) -> int:\n    \"\"\"\n    Time Complexity: O(n*n)\n    Space Complexity: O(n)\n    \"\"\"\n    res = 0\n    for i in range(len(string)):\n        for j in range(i + 1, len(string) + 1):\n            sub_str = string[i:j]\n            if sum(map(int, sub_str)) == len(sub_str):\n                res += 1\n\n    return res\n\n\nif __name__ == \"__main__\":\n    assert count_substrings(\"987123\") == 9"
    },
    {
      "rank": 93,
      "score": 2.65495085130194,
      "candidate": "def sum_of_digits_equal_to_length(number):\n    number = str(number)\n    length = len(number)\n    count = 0\n    for i in range(length):\n        count += int(number[i])\n    return count\n\n\ndef count_substrings_with_equal_sum(number):\n    number = str(number)\n    length = len(number)\n    count = 0\n    for i in range(length):\n        for j in range(i + 1, length + 1):\n            if sum_of_digits_equal_to_length(number[i:j]) == j - i:\n                count += 1\n    return count\n\n\nif __name__ == \"__main__\":\n    print(count_substrings_with_equal_sum(112233))"
    },
    {
      "rank": 94,
      "score": 2.562622440579525,
      "candidate": "def count_substrings(string: str) -> int:\n    \"\"\"\n    >>> count_substrings(\"12345\")\n    3\n    >>> count_substrings(\"1000\")\n    1\n    >>> count_substrings(\"0000\")\n    1\n    >>> count_substrings(\"22222\")\n    5\n    \"\"\"\n    count = 0\n    for i in range(len(string)):\n        total = 0\n        for j in range(i, len(string)):\n            total += int(string[j])\n            if total == j - i + 1:\n                count += 1\n    return count\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 95,
      "score": 2.5360794130110116,
      "candidate": "def digit_sum_count(n: int) -> int:\n    \"\"\"\n    >>> digit_sum_count(100)\n    2\n    >>> digit_sum_count(1000)\n    4\n    >>> digit_sum_count(10000)\n    7\n    >>> digit_sum_count(100000)\n    12\n    \"\"\"\n    s = str(n)\n    sub_count = 0\n    for i in range(len(s)):\n        if sum(map(int, s[i:])) == i + 1:\n            sub_count += 1\n    return sub_count\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 96,
      "score": 2.4952893014185964,
      "candidate": "def count_substrings(n):\n    \"\"\"\n    Count number of substrings with sum of digits equal to their length\n\n    Args:\n       n(int): input number\n    Returns:\n       int: Number of substrings\n    \"\"\"\n    # TODO: Write your solution here\n    return 0\n\n# Test Cases\n\n# Example 1\n# Input: 123\n# Output: 1\n# Explanation: The only substring that have sum of digits equal to their length is 123\n\n# Example 2\n# Input: 1234\n# Output: 3\n# Explanation: The 3 substrings are 123, 234, 341\n\n# Example 3\n# Input: 12345\n# Output: 4\n# Explanation: The 4 substrings are 123, 234, 345, 451\n\n# Example 4\n# Input: 123456\n# Output: 7\n# Explanation: The 7 substrings are 123, 234, 345, 456, 561, 612, 123456"
    },
    {
      "rank": 97,
      "score": 2.4585956892388863,
      "candidate": "def count_sum_equal_length(n: int) -> int:\n    \"\"\"\n    >>> count_sum_equal_length(123)\n    1\n    >>> count_sum_equal_length(12)\n    1\n    >>> count_sum_equal_length(1000)\n    0\n    >>> count_sum_equal_length(1234)\n    0\n    >>> count_sum_equal_length(1324)\n    1\n    >>> count_sum_equal_length(1325)\n    1\n    >>> count_sum_equal_length(10123)\n    1\n    >>> count_sum_equal_length(1012)\n    1\n    >>> count_sum_equal_length(1210)\n    1\n    >>> count_sum_equal_length(1010)\n    1\n    >>> count_sum_equal_length(1211)\n    1\n    >>> count_sum_equal_length(1212)\n    2\n    >>> count_sum_equal_length(1213)\n    1\n    >>> count_sum_equal_length(1214)\n    0\n    >>> count_sum_equal_length(1215)\n    0\n    >>> count_sum_equal_length(1216)\n    0\n    >>> count_sum_equal_length(1217)\n    0\n    >>> count_sum_equal_length(1218)\n    0\n    >>> count_sum_equal_length(1219)\n    0\n    \"\"\"\n    count = 0\n    for i in range(10):\n        curr = i\n        curr_len = 1\n        while curr <= n:\n            curr_len += 1\n            curr += i\n            if curr_len == (curr % 10):\n                count += 1\n    return count\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 98,
      "score": 2.4381616436603775,
      "candidate": "from collections import Counter\n\n\ndef sub_strings(string):\n    count = 0\n    for i in range(len(string)):\n        for j in range(i+1, len(string)+1):\n            if sum(map(int, string[i:j])) == j-i:\n                count += 1\n    return count\n\n\ndef sub_strings_eff(string):\n    count = 0\n    for i in range(len(string)):\n        if sum(map(int, string[i:])) == len(string[i:]):\n            count += 1\n    return count\n\n\ndef sub_strings_eff_2(string):\n    count = 0\n    for i in range(len(string)):\n        if sum(map(int, string[i:])) == len(string[i:]):\n            count += 1\n    return count\n\n\ndef sub_strings_eff_3(string):\n    count = 0\n    for i in range(len(string)):\n        if sum(map(int, string[i:])) == len(string[i:]):\n            count += 1\n    return count\n\n\ndef sub_strings_eff_4(string):\n    count = 0\n    for i in range(len(string)):\n        if sum(map(int, string[i:])) == len(string[i:]):\n            count += 1\n    return count\n\n\ndef sub_strings_eff_5(string):\n    count = 0\n    for i in range(len(string)):\n        if sum(map(int, string[i:])) == len(string[i:]):\n            count += 1\n    return count\n\n\ndef sub_strings_eff_6(string):\n    count = 0\n    for i in range(len(string)):\n        if sum(map(int, string[i:])) == len(string[i:]):\n            count += 1\n    return count\n\n\ndef sub_strings_eff_7(string):\n    count = 0\n    for i in range(len(string)):\n        if sum(map(int, string[i:])) == len(string[i:]):\n            count +="
    },
    {
      "rank": 99,
      "score": 2.2447238124516606,
      "candidate": "def count_substrings(string):\n    count = 0\n    for i in range(len(string)):\n        for j in range(i, len(string)+1):\n            if sum(map(int, string[i:j])) == j-i:\n                count += 1\n    return count\n\n\nif __name__ == \"__main__\":\n    assert count_substrings(\"123\") == 3\n    assert count_substrings(\"4557\") == 4\n    assert count_substrings(\"12345\") == 8\n    assert count_substrings(\"4757\") == 4\n    assert count_substrings(\"45575\") == 10"
    },
    {
      "rank": 100,
      "score": 2.0044968604458973,
      "candidate": "def count_substrings(string: str) -> int:\n    \"\"\"\n    >>> count_substrings(\"23\")\n    0\n    >>> count_substrings(\"123456789\")\n    16\n    >>> count_substrings(\"11235813\")\n    4\n    >>> count_substrings(\"11111\")\n    10\n    \"\"\"\n    count = 0\n    for i in range(len(string)):\n        for j in range(i + 1, len(string) + 1):\n            if sum(map(int, string[i:j])) == j - i:\n                count += 1\n    return count\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    }
  ]
}