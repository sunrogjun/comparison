{
  "timestamp": "2025-09-15T01:23:58.631928",
  "method": "improved_llm_judge",
  "judge_model": "codellama/CodeLlama-7b-Python-hf",
  "target_model": "codellama-7b",
  "dataset": "mbpp",
  "problem_number": 408,
  "total_candidates": 100,
  "results": [
    {
      "rank": 1,
      "score": 10.0,
      "candidate": "def sum_round(lst):\n    total = 0\n    for i in lst:\n        total += round(i)\n    return total * len(lst)\n\n\nif __name__ == '__main__':\n    print(sum_round([1.2, 2.1, 3.4]))"
    },
    {
      "rank": 2,
      "score": 10.0,
      "candidate": "def round_numbers(numbers):\n    total = 0\n    for number in numbers:\n        total += round(number)\n    return total * len(numbers)\n\nif __name__ == '__main__':\n    numbers = [1.2, 3.4, 5.6, 7.8, 9.10]\n    print(round_numbers(numbers))"
    },
    {
      "rank": 3,
      "score": 10.0,
      "candidate": "def sum_rounded(numbers):\n    # Round every number in the given list and sum them\n    return round(sum(numbers), ndigits=None) * len(numbers)\n\n\nif __name__ == '__main__':\n    print(sum_rounded([1.3, 2.4, 3.5]))"
    },
    {
      "rank": 4,
      "score": 10.0,
      "candidate": "\"\"\"Question:\nWrite a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\nHints:\nUse math.ceil() to round a number upward.\n\n\"\"\""
    },
    {
      "rank": 5,
      "score": 10.0,
      "candidate": "def round_sum(nums):\n    total = 0\n    for i in range(len(nums)):\n        nums[i] = round(nums[i])\n        total += nums[i]\n    print(total * len(nums))\n    \nround_sum([1.4, 1.5, 1.6, 1.7, 1.8, 1.9])"
    },
    {
      "rank": 6,
      "score": 10.0,
      "candidate": "def round_list(list):\n    total = 0\n    for number in list:\n        total += round(number)\n    return total * len(list)\n\n\n# Tests\nprint(round_list([1.42, 3.56, 2.42, 1.89]))\nprint(round_list([1.42, 3.56, 2.42, 1.89, 4.23, 6.45, 2.41, 8.75]))"
    },
    {
      "rank": 7,
      "score": 10.0,
      "candidate": "def total_sum(numbers):\n    sum = 0\n    for i in numbers:\n        sum += round(i)\n    return sum * len(numbers)"
    },
    {
      "rank": 8,
      "score": 10.0,
      "candidate": "def round_list(lst):\n    total = 0\n    for num in lst:\n        total += round(num)\n    print(total)\n\n\ndef main():\n    round_list([1.2, 3.5, 4.8, 5.5])\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 9,
      "score": 10.0,
      "candidate": "def sum_of_rounded_nums(numbers):\n    \"\"\"\n    >>> sum_of_rounded_nums([2.7, 5.0, 2.2, 5.5, 2.0, 5.7])\n    25.5\n    \"\"\"\n    total = 0\n    for number in numbers:\n        total += round(number)\n    return total * len(numbers)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 10,
      "score": 10.0,
      "candidate": "def sum_of_rounded_nums(numbers):\n    rounded_numbers = [round(num) for num in numbers]\n    return (sum(rounded_numbers) * len(rounded_numbers))\n\n\nif __name__ == '__main__':\n    print(sum_of_rounded_nums([1.2, 3.4, 4.3, 5.2]))"
    },
    {
      "rank": 11,
      "score": 10.0,
      "candidate": "def round_sum(numbers):\n    return round(sum(numbers), ndigits=None) * len(numbers)\n\n\nif __name__ == '__main__':\n    print(round_sum([1.1, 2.3, 3.4, 4.5, 5.6, 6.7, 7.8, 8.9, 9.0, 10.5]))"
    },
    {
      "rank": 12,
      "score": 10.0,
      "candidate": "def total_sum_multiplied_by_length(numbers):\n    total = 0\n    for number in numbers:\n        total += round(number)\n\n    return total * len(numbers)\n\n\ndef main():\n    print(\"Total sum multiplied by length: \" + str(total_sum_multiplied_by_length([1.1, 2.2, 3.3, 4.4, 5.5, 6.6, 7.7, 8.8, 9.9])))\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 13,
      "score": 10.0,
      "candidate": "\"\"\"Question:\nWrite a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\nHints:\nUse the built-in round function to round a number.\nUse the built-in len function to get the length of a list.\n\n\"\"\""
    },
    {
      "rank": 14,
      "score": 10.0,
      "candidate": "def sum_of_rounded_numbers(numbers):\n    total = 0\n    for num in numbers:\n        total += round(num)\n    return total * len(numbers)\n\n\nif __name__ == '__main__':\n    numbers = [1.3, 2.3, 4.5, 6.7, 8.9, 10.8]\n    print(sum_of_rounded_numbers(numbers))"
    },
    {
      "rank": 15,
      "score": 10.0,
      "candidate": "def round_list(lst):\n    return sum([round(x) for x in lst]) * len(lst)\n\n\nprint(round_list([1.2, 2.3, 3.4, 4.5, 5.6, 6.7]))"
    },
    {
      "rank": 16,
      "score": 10.0,
      "candidate": "def sum_of_rounded_numbers(lst):\n    \"\"\"Returns the sum of rounded numbers of a given list.\n\n    >>> sum_of_rounded_numbers([1.3, 2.7, 3.1])\n    10\n    \"\"\"\n    # return sum(round(x) for x in lst)\n\n    total = 0\n    for x in lst:\n        total += round(x)\n    return total\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 17,
      "score": 8.981605117952036,
      "candidate": "def sum_of_rounded_list(list_of_nums):\n    sum = 0\n    for num in list_of_nums:\n        sum += round(num)\n    return sum * len(list_of_nums)\n\n\n# print(sum_of_rounded_list([2.3, 3.3, 4.3]))\n\n\"\"\"\nWrite a function to check if a given string is a palindrome.\n\"\"\"\n\ndef is_palindrome(string):\n    return string == string[::-1]\n\n# print(is_palindrome('abcba'))\n# print(is_palindrome('abc'))\n\n\"\"\"\nWrite a function that takes two lists and returns True if they have at least one common member, and False otherwise.\n\"\"\"\n\ndef has_common_member(list1, list2):\n    return len(set(list1).intersection(set(list2))) > 0\n\n# print(has_common_member([1, 2, 3], [4, 5, 6]))\n# print(has_common_member([1, 2, 3], [3, 4, 5]))\n\n\"\"\"\nWrite a function to check if a given number is a prime number.\n\"\"\"\n\ndef is_prime(number):\n    if number <= 1:\n        return False\n    for i in range(2, number):\n        if number % i == 0:\n            return False\n    return True\n\n# print(is_prime(11))\n\n\"\"\"\nWrite a function to check if a given number is a perfect number.\n\"\"\"\n\ndef is_perfect(number):\n    sum = 0\n    for i in range(1, number):\n        if number % i == 0:\n            sum += i\n    return sum == number\n\n# print(is_perfect(6))\n\n\"\"\"\nWrite a function to check if a given number is an Armstrong number.\n\"\"\"\n\ndef is_armstrong(number):\n    string = str(number)\n    length = len(string)\n    sum = 0\n    for i in range(length):"
    },
    {
      "rank": 18,
      "score": 8.902416160941588,
      "candidate": "def round_sum(nums):\n    total = 0\n    for num in nums:\n        total += round(num)\n    return total * len(nums)\n\ndef round_sum(nums):\n    return sum(round(num) for num in nums) * len(nums)\n\n#test\nprint(round_sum([2.3, 4.6, 1.2, 8.1]))"
    },
    {
      "rank": 19,
      "score": 8.890475048719576,
      "candidate": "def sum_of_rounded_numbers(numbers):\n    return sum(round(n) for n in numbers) * len(numbers)"
    },
    {
      "rank": 20,
      "score": 8.74343430596827,
      "candidate": "def sum_and_round(lst):\n    # Round every number of the list\n    for i in range(len(lst)):\n        lst[i] = round(lst[i])\n    # Multiply the total sum of the rounded numbers with the length of the list\n    return sum(lst) * len(lst)\n\n\ndef main():\n    print(sum_and_round([1.1, 2.4, 3.2, 4.4, 10.3, 13.3, 14.2, 15.2]))\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 21,
      "score": 8.72735253130993,
      "candidate": "def sum_of_rounded_list(numbers):\n    rounded_list = []\n    for i in numbers:\n        rounded_list.append(round(i))\n    return sum(rounded_list) * len(rounded_list)\n\n\n# The Result should be 47.\nnumbers = [1.2, 2.7, 3.1, 4.5, 5.8, 6.6, 7.1, 8.2]\nprint(sum_of_rounded_list(numbers))"
    },
    {
      "rank": 22,
      "score": 8.68298246895437,
      "candidate": "def round_sum(nums):\n    total = 0\n    for num in nums:\n        total += round(num)\n    return total * len(nums)\n\nif __name__ == '__main__':\n    print(round_sum([1.25, 2.25, 3.5, 4.5, 5.75]))"
    },
    {
      "rank": 23,
      "score": 8.601786857084374,
      "candidate": "def sum_round_list(list_of_num):\n    total = 0\n    for num in list_of_num:\n        total += round(num)\n    return total * len(list_of_num)"
    },
    {
      "rank": 24,
      "score": 8.55339686976469,
      "candidate": "def round_sum(nums):\n    total = 0\n    for num in nums:\n        total += round(num)\n    return total * len(nums)\n\nif __name__ == '__main__':\n    print(round_sum([1.2, 3.4, 5.6, 7.8]))"
    },
    {
      "rank": 25,
      "score": 8.548007090182852,
      "candidate": "from unittest import TestCase\n\n\ndef sum_rounded_numbers(numbers):\n    return sum(round(number) for number in numbers) * len(numbers)\n\n\nclass TestSumRoundedNumbers(TestCase):\n    def test_one_number_rounded(self):\n        assert sum_rounded_numbers([2.5]) == 5\n\n    def test_multiple_numbers_rounded(self):\n        assert sum_rounded_numbers([1.4, 2.6, 3.8, 4.9]) == 24\n\n    def test_multiple_numbers_rounded_zero(self):\n        assert sum_rounded_numbers([1.0, 2.0, 3.0, 4.0]) == 10\n\n    def test_multiple_numbers_rounded_negative(self):\n        assert sum_rounded_numbers([-1.4, -2.6, -3.8, -4.9]) == -24\n\n    def test_multiple_numbers_rounded_negative_zero(self):\n        assert sum_rounded_numbers([-1.0, -2.0, -3.0, -4.0]) == -10\n\n    def test_multiple_numbers_rounded_positive(self):\n        assert sum_rounded_numbers([1.4, 2.6, 3.8, 4.9]) == 24\n\n    def test_multiple_numbers_rounded_positive_zero(self):\n        assert sum_rounded_numbers([1.0, 2.0, 3.0, 4.0]) == 10"
    },
    {
      "rank": 26,
      "score": 8.514613503198595,
      "candidate": "def sum_of_rounded(lst):\n    sum = 0\n    for i in range(len(lst)):\n        lst[i] = round(lst[i])\n        sum += lst[i]\n    print(sum * len(lst))\n\n\nif __name__ == '__main__':\n    lst = [1.2, 2.3, 3.4, 4.5]\n    sum_of_rounded(lst)"
    },
    {
      "rank": 27,
      "score": 8.464027623803943,
      "candidate": "def round_sum(lst):\n    total = 0\n    for i in lst:\n        total += round(i)\n    return total * len(lst)\n\ndef main():\n    list1 = [1.3, 1.5, 2.7, 3.2, 5.9, 6.3]\n    print(\"Round sum of\", list1, \"is\", round_sum(list1)) # 104\n\n    list2 = [1.2, 1.7, 2.2, 3.2, 5.9, 6.3]\n    print(\"Round sum of\", list2, \"is\", round_sum(list2)) # 102\n\n    list3 = [1.2, 1.7, 2.2, 3.2, 5.9, 6.3, 6.7]\n    print(\"Round sum of\", list3, \"is\", round_sum(list3)) # 105\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 28,
      "score": 8.410906442551855,
      "candidate": "def round_numbers(numbers):\n    total = 0\n    for number in numbers:\n        total += round(number)\n    return total * len(numbers)\n\nprint(round_numbers([1.2, 2.4, 3.1, 4.5])) # 17.0\nprint(round_numbers([1.2, 2.3, 3.4, 4.5, 5.5])) # 22.0\nprint(round_numbers([1.2, 2.3, 3.4, 4.5, 5.5, 6.5])) # 27.0"
    },
    {
      "rank": 29,
      "score": 8.404347797104801,
      "candidate": "def sum_of_rounded(numbers):\n    sum = 0\n    for number in numbers:\n        rounded = round(number)\n        sum += rounded\n    return sum * len(numbers)\n\nnumbers = [1.3, 2.4, 3.5, 4.6, 5.7, 6.8, 7.9, 8.0, 9.1, 10.11]\nprint(sum_of_rounded(numbers)) # 296"
    },
    {
      "rank": 30,
      "score": 8.390603341211937,
      "candidate": "from typing import List\n\n\n# O(n) time | O(n) space\ndef round_and_sum_list(nums: List[float]) -> float:\n    total = 0\n    for i in range(len(nums)):\n        nums[i] = round(nums[i])\n        total += nums[i]\n    return total * len(nums)\n\n\n# O(n) time | O(n) space\ndef round_and_sum_list_optimized(nums: List[float]) -> float:\n    total = 0\n    for num in nums:\n        total += round(num)\n    return total * len(nums)\n\n\n\"\"\"\nPseudocode:\n1. Take in a list of numbers\n2. Create a total sum to return\n3. Iterate over the list of numbers\n4. Round every number\n5. Add the rounded number to the total sum\n6. Return the total sum\n\n\nPseudocode (Optimized):\n1. Take in a list of numbers\n2. Create a total sum to return\n3. Iterate over the list of numbers\n4. Round every number\n5. Add the rounded number to the total sum\n6. Return the total sum\n\"\"\""
    },
    {
      "rank": 31,
      "score": 8.376539965774677,
      "candidate": "def sum_and_multiply(numbers):\n    sum = 0\n    for n in numbers:\n        sum += round(n)\n    print(sum * len(numbers))\n\n\nsum_and_multiply([1.5, 2.5, 3.5, 4.5])"
    },
    {
      "rank": 32,
      "score": 8.35712437272355,
      "candidate": "def round_sum(numbers):\n    total = 0\n    for number in numbers:\n        total += round(number)\n\n    return total * len(numbers)\n\n\nprint(round_sum([1.2, 3.7, 4.5, 6.2, 9.1, 0.7, 0.0]))"
    },
    {
      "rank": 33,
      "score": 8.30938281590907,
      "candidate": "def round_sum(numbers: list):\n    \"\"\"Return the total sum of rounded numbers * length of the list\"\"\"\n    total = 0\n    for number in numbers:\n        total += round(number)\n    return total * len(numbers)\n\nif __name__ == '__main__':\n    numbers = [1.3, 4.6, 7.8]\n    print(round_sum(numbers))\n    numbers = [1.2, 2.4, 3.4, 4.5]\n    print(round_sum(numbers))"
    },
    {
      "rank": 34,
      "score": 8.30548391546931,
      "candidate": "# This is the answer I came up with, I am not sure if it is the most optimal, but it works.\n\ndef round_and_sum(numbers):\n    total = 0\n    for number in numbers:\n        total += round(number)\n    return total * len(numbers)\n\n# This is a more optimal way to do it.\n\n# def round_and_sum(numbers):\n#     return sum([round(number) for number in numbers]) * len(numbers)"
    },
    {
      "rank": 35,
      "score": 8.270259224367992,
      "candidate": "def round_and_sum(numbers):\n    rounded_numbers = [round(x) for x in numbers]\n    return sum(rounded_numbers) * len(rounded_numbers)\n\n\ndef main():\n    numbers = [1.2, 2.3, 3.4, 4.5, 5.6, 6.7]\n    result = round_and_sum(numbers)\n    print(result)\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 36,
      "score": 8.26994952689792,
      "candidate": "def round_sum(numbers):\n    total_sum = 0\n\n    for number in numbers:\n        rounded_number = round(number)\n        total_sum += rounded_number\n\n    return total_sum * len(numbers)\n\n\nprint(round_sum([1.2, 2.3, 3.4]))\nprint(round_sum([1.2, 2.3, 3.4, 4.5]))\nprint(round_sum([1.2, 2.3, 3.4, 4.5, 5.6]))"
    },
    {
      "rank": 37,
      "score": 8.235689624009979,
      "candidate": "def round_and_sum(numbers):\n    \"\"\"\n    >>> round_and_sum([1.3, 2.4, 3.6])\n    30\n    >>> round_and_sum([2.5, 3.6, 4.2])\n    30\n    \"\"\"\n    total = 0\n    for number in numbers:\n        total += round(number) * len(numbers)\n    return total"
    },
    {
      "rank": 38,
      "score": 8.201071362709879,
      "candidate": "def round_sum(nums):\n    return round(sum(nums), 2)\n\n\nif __name__ == '__main__':\n    print(round_sum([1.2, 2.4, 3.5, 4.6, 5.7]))"
    },
    {
      "rank": 39,
      "score": 8.123607301982696,
      "candidate": "def total_sum_and_length(numbers):\n    total_sum = 0\n    for i in numbers:\n        total_sum += round(i)\n    return total_sum * len(numbers)\n\n\nprint(total_sum_and_length([1.3, 2.4, 3.5, 4.6, 5.7]))\nprint(total_sum_and_length([1.3, 2.4, 3.5, 4.6, 5.7, 6.7, 7.8, 8.9]))"
    },
    {
      "rank": 40,
      "score": 8.03487637105721,
      "candidate": "def sum_of_rounded_numbers(numbers: list):\n    return round(sum(numbers), 2)\n\n\nif __name__ == '__main__':\n    numbers = [float(x) for x in input().split()]\n    print(sum_of_rounded_numbers(numbers))"
    },
    {
      "rank": 41,
      "score": 7.933162799389252,
      "candidate": "def sum_round(num_list):\n    rounded_list = []\n    total = 0\n\n    for num in num_list:\n        rounded_list.append(round(num))\n    \n    for i in rounded_list:\n        total += i\n    \n    print(total * len(rounded_list))\n\n\nif __name__ == '__main__':\n    numbers = [2.45, 3.35, 4.45, 5.45]\n    sum_round(numbers)"
    },
    {
      "rank": 42,
      "score": 7.889593173493683,
      "candidate": "def round_total(numbers):\n    rounded_total = 0\n    for num in numbers:\n        rounded_total += round(num)\n    return rounded_total\n\nnumbers = [1.23, 2.23, 3.23]\nprint(round_total(numbers))"
    },
    {
      "rank": 43,
      "score": 7.8761401085193095,
      "candidate": "def sum_list(numbers):\n    # Write your code here.\n\n    return 0\n\nif __name__ == '__main__':\n    numbers = [4.3, 1.2, 7.5, 5.1]\n    print(sum_list(numbers))"
    },
    {
      "rank": 44,
      "score": 7.8680494592101855,
      "candidate": "def total_sum(nums):\n    sum_list = 0\n    for i in nums:\n        rounded = round(i)\n        sum_list += rounded\n    return sum_list * len(nums)\n\n\nnums = [1.2, 1.3, 1.5]\nprint(total_sum(nums))"
    },
    {
      "rank": 45,
      "score": 7.684718364258419,
      "candidate": "def round_sum(numbers):\n    sum = 0\n    for i in range(0, len(numbers)):\n        sum += round(numbers[i])\n    return sum * len(numbers)\n\n\nif __name__ == '__main__':\n    print(round_sum([1.45, 3.6, 5.75, 9.0]))"
    },
    {
      "rank": 46,
      "score": 3.782321827907003,
      "candidate": "def round_sum(nums):\n    return sum([round(x) for x in nums]) * len(nums)\n\n\ndef test_round_sum():\n    assert round_sum([1.2, 3.4, 5.6]) == 56"
    },
    {
      "rank": 47,
      "score": 3.761514928204013,
      "candidate": "\"\"\"Question 15\nLevel 2\nQuestion:\nWrite a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\nSuppose the list is [1.9, 2.2, 1.2, 3.4, 3.9].\nThe output should be 16.5\nHints:\nUse the built-in round function.\n\n\"\"\"\nimport math\ndef round_sum(nums):\n    total = 0\n    for num in nums:\n        total += round(num)\n    return total * len(nums)\nprint round_sum([1.9, 2.2, 1.2, 3.4, 3.9])"
    },
    {
      "rank": 48,
      "score": 3.738947022370758,
      "candidate": "\"\"\"Question:\nWrite a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\nExample:\nIf the given numbers are [1.3, 2.3, 4.6, 6.5, 7.8] then the output should be 14.5.\nHints:\nUse math.ceil() to round up a number.\n\n\"\"\"\ndef sum_round(nums):\n\treturn sum([round(i) for i in nums])\n\n\nprint sum_round([1.3, 2.3, 4.6, 6.5, 7.8])"
    },
    {
      "rank": 49,
      "score": 3.732824384460777,
      "candidate": "def round_sum(nums):\n    total = 0\n    for num in nums:\n        total += round(num)\n    return total * len(nums)\n\n\ndef test_function(test_case):\n    answer = round_sum(test_case)\n    print(answer)\n    if answer != 90:\n        print(\"Your code failed\")\n        quit(1)\n\n\ntest_case = [1.3, 2.3, 3.4, 4.5, 5.6, 6.7, 7.8, 8.9, 9.0]\ntest_function(test_case)"
    },
    {
      "rank": 50,
      "score": 3.6781200142854114,
      "candidate": "\"\"\"Question 15\nLevel 2\nQuestion:\nWrite a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\nSuppose the function is passed an array of the following values: [2.4, 4.7, 6.5, 7.8, 8.4, 9.5]\nThe output should be: 25\nHints:\nIn order to round a number, use the round() function.\n\"\"\"\nimport math\ndef roundTotal(nums):\n    total = 0\n    for num in nums:\n        total += round(num)\n    return total * len(nums)\n\n#print roundTotal([2.4, 4.7, 6.5, 7.8, 8.4, 9.5])\ndef roundTotal2(nums):\n    return sum(round(num) for num in nums) * len(nums)\nprint roundTotal2([2.4, 4.7, 6.5, 7.8, 8.4, 9.5])"
    },
    {
      "rank": 51,
      "score": 3.5285611131094576,
      "candidate": "from typing import List\n\n\ndef round_and_sum(numbers: List[float]) -> int:\n    \"\"\"Return the sum of rounded numbers of a given list.\n\n    >>> round_and_sum([1.1, 2.7, 3.8])\n    16\n    >>> round_and_sum([1.4, 2.8, 3.5])\n    16\n    >>> round_and_sum([2.1, 2.5, 2.8])\n    14\n    \"\"\"\n    return round(sum(numbers), 0) * len(numbers)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 52,
      "score": 3.501766448946012,
      "candidate": "def sum_round(lst):\n    sum = 0\n    for i in lst:\n        sum += round(i)\n    return sum * len(lst)\n\n# print(sum_round([1.2, 2.3, 3.4, 4.5, 5.6, 6.7, 7.8, 8.9]))\n\n\"\"\"\nWrite a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n\"\"\"\n\ndef sum_round(lst):\n    sum = 0\n    for i in lst:\n        sum += round(i)\n    return sum * len(lst)\n\nprint(sum_round([1.2, 2.3, 3.4, 4.5, 5.6, 6.7, 7.8, 8.9]))\n\n\"\"\"\nWrite a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n\"\"\"\n\ndef sum_round(lst):\n    sum = 0\n    for i in lst:\n        sum += round(i)\n    return sum * len(lst)\n\nprint(sum_round([1.2, 2.3, 3.4, 4.5, 5.6, 6.7, 7.8, 8.9]))\n\n\"\"\"\nWrite a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n\"\"\"\n\ndef sum_round(lst):\n    sum = 0\n    for i in lst:\n        sum += round(i)\n    return sum * len(lst)\n\nprint(sum_round([1.2, 2.3, 3.4, 4.5, 5.6, 6.7, 7.8, 8.9]))\n\n\"\"\"\nWrite a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n\"\"\"\n\ndef sum_round(lst):\n    sum = 0\n    for i in lst:\n        sum += round("
    },
    {
      "rank": 53,
      "score": 3.4656400595580994,
      "candidate": "from unittest import TestCase\n\n\ndef round_sum(numbers):\n    total = 0\n    for number in numbers:\n        total += round(number)\n    return total\n\n\nclass TestRoundSum(TestCase):\n\n    def test_round_sum(self):\n        assert round_sum([2.4, 4.5, 2.0, 3.8]) == 14"
    },
    {
      "rank": 54,
      "score": 3.410951252187612,
      "candidate": "from unittest import TestCase\n\n\ndef round_sum(numbers: list) -> int:\n    return round_sum_helper(numbers, 0)\n\n\ndef round_sum_helper(numbers: list, idx: int) -> int:\n    if idx >= len(numbers):\n        return 0\n\n    return round(numbers[idx]) + round_sum_helper(numbers, idx + 1)\n\n\nclass TestRoundSum(TestCase):\n\n    def test_round_sum(self):\n        assert round_sum([1.2, 2.4, 3.6, 4.8]) == 12"
    },
    {
      "rank": 55,
      "score": 3.406262911197099,
      "candidate": "from typing import List\n\n\ndef round_sum(numbers: List[float]) -> float:\n    \"\"\"Returns the total sum of rounded numbers multiplied by the length of the list.\n\n    Examples:\n        >>> assert round_sum([1.5, 2.5, 3.5]) == 14.0\n    \"\"\"\n    return sum(round(number) for number in numbers) * len(numbers)\n\n\nif __name__ == \"__main__\":\n    print(round_sum([1.5, 2.5, 3.5]))"
    },
    {
      "rank": 56,
      "score": 3.3837173645764542,
      "candidate": "def round_and_sum(list_of_numbers):\n    total = 0\n    for num in list_of_numbers:\n        total += round(num)\n    return total\n\nprint(round_and_sum([2.1, 5.5, 1.2, 1.4, 1.7])) # 12\nprint(round_and_sum([1.2, 3.2, 4.2, 5.2])) # 20\nprint(round_and_sum([2.1, 5.5, 1.2, 1.4, 1.7, 2.1, 5.5, 1.2, 1.4, 1.7])) # 60"
    },
    {
      "rank": 57,
      "score": 3.3692332899977053,
      "candidate": "\"\"\"Question:\nWrite a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\nExample:\nIf the list is [1.999, 2.333, 4.666]\nThe output should be 14\nHints:\nUse math.ceil() to round up\n\n\"\"\"\nimport math\ndef total_sum(lst):\n\tsum=0\n\tfor i in lst:\n\t\tsum += math.ceil(i)\n\treturn sum * len(lst)\nprint total_sum([1.999, 2.333, 4.666])"
    },
    {
      "rank": 58,
      "score": 3.3238442690503462,
      "candidate": "from typing import List\n\n\ndef round_sum(numbers: List[float]) -> int:\n    \"\"\"Returns sum of rounded numbers multiplied by length of the list.\n\n    Args:\n        numbers (List[float]): list of numbers\n\n    Examples:\n        >>> assert round_sum([2.5, 2.5, 3.5]) == 15\n    \"\"\"\n    return sum(round(number) for number in numbers) * len(numbers)\n\n\nif __name__ == \"__main__\":\n    print(round_sum([2.5, 2.5, 3.5]))"
    },
    {
      "rank": 59,
      "score": 3.305838144420434,
      "candidate": "def sum_of_rounded_list(nums):\n    total = 0\n    for num in nums:\n        total += round(num)\n    return total\n\n\ndef test_function(test_case):\n    nums = test_case[0]\n    solution = test_case[1]\n    output = sum_of_rounded_list(nums)\n    if output == solution:\n        print(\"Pass\")\n    else:\n        print(\"Fail\")\n\n\ntest_function([[1.23, 4.21, 4.45, 5.00, 6.27, 8.25, 9.32, 10.99], 100])\ntest_function([[-1.23, 4.21, 4.45, 5.00, 6.27, 8.25, 9.32, 10.99], 100])\ntest_function([[2.0, 3.0, 4.0], 12])\ntest_function([[2.0, 3.0, 4.1], 12])"
    },
    {
      "rank": 60,
      "score": 3.2483570765056164,
      "candidate": "def round_sum(numbers: list) -> int:\n    \"\"\"\n    >>> round_sum([1.2, 2.3, 3.4])\n    22\n    >>> round_sum([1.2, 2.3, 3.4, 4.5])\n    32\n    >>> round_sum([1.2, 2.3, 3.4, 4.5, 5.6])\n    42\n    \"\"\"\n    total = 0\n    for number in numbers:\n        total += round(number)\n    return total * len(numbers)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 61,
      "score": 3.180818012523817,
      "candidate": "def sum_numbers(numbers):\n    sum = 0\n    for i in numbers:\n        sum += round(i)\n    return sum * len(numbers)\n\ndef test_function(test_case):\n    numbers = test_case[0]\n    solution = test_case[1]\n    output = sum_numbers(numbers)\n    if output == solution:\n        print(\"Pass\")\n    else:\n        print(\"Fail\")\n\nnumbers = [2.4, 3.4, 4.4]\nsolution = 10\ntest_case = [numbers, solution]\ntest_function(test_case)\n\nnumbers = [2.1, 3.1, 4.1]\nsolution = 10\ntest_case = [numbers, solution]\ntest_function(test_case)\n\nnumbers = [2.5, 3.5, 4.5]\nsolution = 15\ntest_case = [numbers, solution]\ntest_function(test_case)"
    },
    {
      "rank": 62,
      "score": 3.180697802754207,
      "candidate": "from unittest import TestCase\n\n\ndef total_sum_rounded(numbers):\n    return sum(round(number) for number in numbers) * len(numbers)\n\n\nclass TestTotalSumRounded(TestCase):\n    def test_one(self):\n        assert total_sum_rounded([1.3, 2.7, 4.5, 2.2, 9.7, 6.2]) == 165\n\n    def test_two(self):\n        assert total_sum_rounded([1.4, 2.3, 3.6, 4.2, 5.7, 6.1]) == 194"
    },
    {
      "rank": 63,
      "score": 3.1718091447842305,
      "candidate": "def sum_rounded_numbers(lst):\n    sum_of_rounded = 0\n    for i in lst:\n        sum_of_rounded += round(i)\n    return sum_of_rounded * len(lst)\n\n\nif __name__ == '__main__':\n    assert sum_rounded_numbers([1.3, 2.7, 3.1]) == 16, 'First'\n    assert sum_rounded_numbers([-1.1, -2.8, -3.9]) == -16, 'Second'\n    assert sum_rounded_numbers([1.1, 2.8, 3.9]) == 16, 'Third'\n    assert sum_rounded_numbers([1, 2, 3]) == 14, 'Fourth'\n    print('OK')"
    },
    {
      "rank": 64,
      "score": 3.165631715701782,
      "candidate": "from math import floor\n\n\n# Write your code here.\ndef round_sum(numbers):\n    return sum([floor(num) * len(numbers) for num in numbers])\n\n\ndef main():\n    print(round_sum([1.2, 4.5, 6.7, 7.1, 8.8, 9.9, 10.2]))\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 65,
      "score": 3.1620419846973977,
      "candidate": "def sum_list(nums: list) -> int:\n    \"\"\"Sums the numbers in a list, rounding each one to the nearest integer, and multiplies the total by the length of the list.\n\n    Args:\n        nums (list): list of numbers to sum\n\n    Returns:\n        int: sum of rounded numbers multiplied by list length\n    \"\"\"\n    return sum(round(num) for num in nums) * len(nums)\n\n\ndef test_sum_list():\n    assert sum_list([1.4, 1.5, 1.6]) == 9\n    assert sum_list([1.4, 1.5, 1.6, 1.7]) == 10\n    assert sum_list([1.4, 1.5, 1.6, 1.7, 1.8]) == 11\n    assert sum_list([1.4, 1.5, 1.6, 1.7, 1.8, 1.9]) == 12"
    },
    {
      "rank": 66,
      "score": 3.157123666297637,
      "candidate": "from typing import List\n\n\ndef round_sum(numbers: List[float]) -> float:\n    \"\"\"Rounds every number of a given list of numbers and returns the sum multiplied by the length of the list.\n\n    Args:\n        numbers (List[float]): list of numbers\n\n    Examples:\n        >>> round_sum([1.3, 2.3, 3.3])\n        16.0\n        >>> round_sum([1.5, 2.5, 3.5])\n        18.0\n        >>> round_sum([1.2, 2.7, 3.9])\n        17.0\n        >>> round_sum([1.6, 2.7, 3.9])\n        17.0\n    \"\"\"\n    return round(sum(numbers) * len(numbers), 1)\n\n\nif __name__ == \"__main__\":\n    print(round_sum([1.3, 2.3, 3.3]))\n    print(round_sum([1.5, 2.5, 3.5]))\n    print(round_sum([1.2, 2.7, 3.9]))\n    print(round_sum([1.6, 2.7, 3.9]))"
    },
    {
      "rank": 67,
      "score": 3.104431797502378,
      "candidate": "def round_sum(list_of_numbers):\n    total = 0\n    for num in list_of_numbers:\n        rounded = round(num)\n        total += rounded\n    return total * len(list_of_numbers)\n\n\ndef main():\n    print(round_sum([1.3, 4.7, 6.5])) # 67\n    print(round_sum([1.3, 4.7, 6.5, 7.8, 9.5])) # 102\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 68,
      "score": 3.0984306179345618,
      "candidate": "def round_numbers(numbers):\n    \"\"\"Rounds every number of a given list of numbers and print the total sum multiplied by the length of the list.\"\"\"\n    total = 0\n    for number in numbers:\n        total += round(number)\n    print(total * len(numbers))\n\nround_numbers([1.2, 2.3, 3.4, 4.5, 5.6, 6.7])\nround_numbers([1.2, 2.3, 3.4, 4.5, 5.6, 6.7, 7.8])"
    },
    {
      "rank": 69,
      "score": 3.085684140594985,
      "candidate": "def round_total(numbers):\n    total = 0\n    for num in numbers:\n        total += round(num)\n    return total * len(numbers)\n\n\nprint(round_total([1.3, 3.7, 4.2, 6.5]))\nprint(round_total([1.2, 3.5, 5.8, 8.7]))\nprint(round_total([1.5, 3.7, 4.2, 6.5]))"
    },
    {
      "rank": 70,
      "score": 3.055461294854933,
      "candidate": "from typing import List\n\n\ndef sum_of_rounded_nums(lst: List[int]) -> int:\n    \"\"\"Returns sum of rounded numbers in given list.\n\n    Args:\n        lst (List[int]): list of integers\n\n    Examples:\n        >>> assert sum_of_rounded_nums([1.2, 2.7, 4.5, 5.1, 6.7]) == 36\n    \"\"\"\n    return sum(round(num) for num in lst) * len(lst)\n\n\nif __name__ == \"__main__\":\n    print(sum_of_rounded_nums([1.2, 2.7, 4.5, 5.1, 6.7]))"
    },
    {
      "rank": 71,
      "score": 3.045880388267751,
      "candidate": "def sum_rounded(numbers):\n    total = 0\n    for num in numbers:\n        rounded_num = round(num)\n        total += rounded_num\n\n    return total * len(numbers)\n\n\n# tests\nassert sum_rounded([1.0, 2.0, 3.0]) == 14.0\nassert sum_rounded([2.0, 3.3, 4.4]) == 25.4"
    },
    {
      "rank": 72,
      "score": 3.043523534119086,
      "candidate": "def sum_of_rounded_numbers(numbers):\n    # 1. validate input\n    if numbers is None or len(numbers) == 0:\n        raise TypeError(\"Numbers must be a non empty array\")\n\n    # 2. initialize variables\n    total = 0\n\n    # 3. loop through the input\n    for number in numbers:\n        total += round(number)\n\n    # 4. compute the result and return it\n    return total * len(numbers)\n\n\n# tests\nimport pytest\n\n# pytest daily_coding_challenge/october_2020/sum_of_rounded_numbers.py --maxfail=4\n\n@pytest.mark.parametrize(\n    \"numbers, expected_result\",\n    [\n        (None, TypeError),\n        ([], TypeError),\n        ([0, 1, 2], 4),\n        ([1.1, 2.2, 3.3], 14),\n        ([1.2, 2.3, 3.4], 14),\n        ([1.3, 2.4, 3.5], 14),\n        ([1.4, 2.5, 3.6], 14),\n        ([1.5, 2.6, 3.7], 14),\n        ([1.6, 2.7, 3.8], 14),\n        ([1.7, 2.8, 3.9], 14),\n        ([1.8, 2.9, 4.0], 14),\n        ([1.9, 3.1, 4.2], 14),\n        ([2.0, 3.2, 4.3], 14),\n        ([2.1, 3.3, 4.4], 14),\n        ([2.2, 3.4, 4.5], 14),\n        ([2.3, 3.5, 4.6], 14),\n        ([2.4, 3.6, 4.7], 14),\n        ([2.5, 3"
    },
    {
      "rank": 73,
      "score": 2.993251387631033,
      "candidate": "def sum_of_rounded_num(numbers):\n    rounded_total = 0\n    for number in numbers:\n        rounded_total += round(number)\n    return rounded_total * len(numbers)\n\n\nprint(sum_of_rounded_num([1.23, 4.21, 5.68, 7.11]))"
    },
    {
      "rank": 74,
      "score": 2.982086980445024,
      "candidate": "def sum_of_rounded_numbers(numbers):\n    total = 0\n    for number in numbers:\n        rounded = round(number)\n        total += rounded\n    return total * len(numbers)\n\n\nprint(sum_of_rounded_numbers([1.0, 2.4, 3.5, 4.6, 5.7]))\nprint(sum_of_rounded_numbers([5.6, 6.7, 7.8, 8.9, 9.0]))\nprint(sum_of_rounded_numbers([1.1, 2.2, 3.3, 4.4, 5.5]))"
    },
    {
      "rank": 75,
      "score": 2.963994939209833,
      "candidate": "def sum_round(nums):\n    total = 0\n    for num in nums:\n        total += round(num)\n    print(total * len(nums))\n\n\nsum_round([1.23, 3.22, 5.54]) # 28.0\nsum_round([1.2, 3.22, 5.54]) # 28.0\nsum_round([1.23, 3.22, 5.55]) # 28.0\nsum_round([1.23, 3.22, 5.56]) # 28.0\nsum_round([1.23, 3.22, 5.56, 10.2]) # 28.0"
    },
    {
      "rank": 76,
      "score": 2.890164056081244,
      "candidate": "# This is the answer\ndef total_sum_rounded(numbers):\n    total = 0\n    for number in numbers:\n        total += round(number)\n    return total * len(numbers)\n\n\n# This is my solution\ndef total_sum_rounded_mine(numbers):\n    total = 0\n    for number in numbers:\n        total += round(number)\n    return total\n\n\ndef main():\n    print(total_sum_rounded([1.01, 2.35, 4.59, 6.85]))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 77,
      "score": 2.887111849756732,
      "candidate": "def sum_rounded_list(list_of_numbers):\n    total = 0\n    for i in range(len(list_of_numbers)):\n        total += round(list_of_numbers[i])\n    return total * len(list_of_numbers)\n\n\nprint(sum_rounded_list([1.45, 10.55, 15.66]))"
    },
    {
      "rank": 78,
      "score": 2.8829315215254097,
      "candidate": "\"\"\"Question 17\nLevel 2\nQuestion:\nWrite a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\nHints:\nIn order to round a number, use the round() function.\n\n\"\"\""
    },
    {
      "rank": 79,
      "score": 2.8541531251033616,
      "candidate": "def sum_of_rounded_nums(nums):\n    sum = 0\n    for num in nums:\n        sum += round(num)\n    return sum * len(nums)\n\n\n# Tests\nassert sum_of_rounded_nums([1.23, 4.12, 5.87, 6.87]) == 28\nassert sum_of_rounded_nums([-1.23, -4.12, -5.87, -6.87]) == 28\nassert sum_of_rounded_nums([0.23, 0.12, 0.87, 0.87]) == 2\nassert sum_of_rounded_nums([-0.23, -0.12, -0.87, -0.87]) == 2\nassert sum_of_rounded_nums([-1.23, 4.12, 5.87, -6.87]) == 28\nassert sum_of_rounded_nums([1.23, -4.12, 5.87, -6.87]) == 28\nassert sum_of_rounded_nums([1.23, 4.12, 5.87, 6.87]) == 28\nassert sum_of_rounded_nums([-1.23, 4.12, -5.87, 6.87]) == 28\nassert sum_of_rounded_nums([1.23, 4.12, 5.87, 6.87]) == 28\nassert sum_of_rounded_nums([-1.23, -4.12, -5.87, -6.87]) == 28\nassert sum_of_rounded_nums([1.23, 4.12, 5.87, 6.87, 7.87, 8.87, 9.87]) == 68\nassert sum_of_rounded_"
    },
    {
      "rank": 80,
      "score": 2.8504963247670663,
      "candidate": "from typing import List\n\n\ndef list_sum(numbers: List[float]) -> float:\n    \"\"\"Returns the sum of the rounded numbers in the list.\n\n    Args:\n        numbers (List[float]): A list of numbers.\n\n    Returns:\n        float: The rounded sum of the numbers.\n    \"\"\"\n    return round(sum(numbers), 2)\n\n\nif __name__ == \"__main__\":\n    print(list_sum([1.25, 2.56, 3.78]))"
    },
    {
      "rank": 81,
      "score": 2.8453938120743927,
      "candidate": "# This is the function from the original challenge.\ndef round_sum(numbers):\n    total = 0\n    for number in numbers:\n        total += round(number)\n    return total\n\n\n# First I tried to solve it with a for loop and the round function.\ndef round_sum_two(numbers):\n    total = 0\n    for number in numbers:\n        total += round(number)\n    return total * len(numbers)\n\n\n# Then I tried to solve it with the sum function and the math library.\n# import math\ndef round_sum_three(numbers):\n    total = 0\n    total = sum(round(number) for number in numbers)\n    return total * len(numbers)\n\n\n# The last try was with a list comprehension.\ndef round_sum_four(numbers):\n    return sum([round(number) for number in numbers]) * len(numbers)\n\n\n# I tried to solve it with a list comprehension and the math library.\ndef round_sum_five(numbers):\n    return sum([round(number) for number in numbers]) * len(numbers)\n\n\n# I tried to solve it with a list comprehension and the math library.\ndef round_sum_six(numbers):\n    return sum([round(number) for number in numbers]) * len(numbers)\n\n\n# I tried to solve it with a list comprehension and the math library.\ndef round_sum_seven(numbers):\n    return sum([round(number) for number in numbers]) * len(numbers)\n\n\ndef main():\n    numbers = [1.4567, 3.567, 4.456]\n    print(round_sum_two(numbers))\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 82,
      "score": 2.8074588597918417,
      "candidate": "def sum_round_numbers(lst):\n    return round(sum(lst), 0) * len(lst)\n\n\nprint(sum_round_numbers([1.23, 4.2, 5.72, 9.55, 12.85]))"
    },
    {
      "rank": 83,
      "score": 2.769680614520106,
      "candidate": "def sum_and_count_rounded_numbers(numbers: list):\n    \"\"\"\n    >>> sum_and_count_rounded_numbers([1.2, 4.4, 6.8])\n    16\n    \"\"\"\n    total = 0\n    for number in numbers:\n        total += round(number)\n    return total * len(numbers)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 84,
      "score": 2.768291153593769,
      "candidate": "def sum_of_rounded_numbers(numbers):\n    rounded_numbers = []\n    for num in numbers:\n        rounded_numbers.append(round(num))\n\n    total = 0\n    for num in rounded_numbers:\n        total += num\n    return total * len(numbers)\n\n\nprint(sum_of_rounded_numbers([1.2, 4.5, 6.7, 7.8, 8.9, 9.9, 10.1]))"
    },
    {
      "rank": 85,
      "score": 2.765262807032524,
      "candidate": "from unittest import TestCase\nfrom hamcrest import assert_that, equal_to\n\n\ndef round_sum(nums):\n    total = 0\n    for num in nums:\n        total += round(num)\n    return total * len(nums)\n\n\nclass TestRoundSum(TestCase):\n\n    def test_round_sum(self):\n        assert_that(round_sum([2.1, 2.5, 2.6, 2.9]), equal_to(21))\n        assert_that(round_sum([2.1, 2.4, 2.5, 2.9]), equal_to(22))\n        assert_that(round_sum([2.1, 2.2, 2.3, 2.4, 2.5, 2.6, 2.7, 2.8, 2.9, 3.0]), equal_to(30))\n        assert_that(round_sum([2.1, 2.2, 2.3, 2.4, 2.5, 2.6, 2.7, 2.8, 2.9, 3.0, 3.1]), equal_to(31))"
    },
    {
      "rank": 86,
      "score": 2.7408648908631763,
      "candidate": "from unittest import TestCase\n\n\ndef sum_of_rounded(numbers):\n    rounded_numbers = [round(num) for num in numbers]\n    return sum(rounded_numbers) * len(rounded_numbers)\n\n\ndef sum_of_rounded_2(numbers):\n    return sum([round(num) for num in numbers]) * len(numbers)\n\n\nclass TestSumOfRounded(TestCase):\n\n    def test_one(self):\n        assert sum_of_rounded([1.2, 2.3, 3.4, 4.5]) == 18.0\n\n    def test_two(self):\n        assert sum_of_rounded([1.5, 2.5, 3.5, 4.5]) == 22.0\n\n    def test_three(self):\n        assert sum_of_rounded([1.6, 2.6, 3.6, 4.6]) == 30.0\n\n    def test_four(self):\n        assert sum_of_rounded([1.8, 2.8, 3.8, 4.8]) == 36.0\n\n    def test_five(self):\n        assert sum_of_rounded([1.7, 2.7, 3.7, 4.7]) == 28.0"
    },
    {
      "rank": 87,
      "score": 2.7278086377374087,
      "candidate": "def sum_of_rounded_list(numbers):\n    rounded_list = [round(num) for num in numbers]\n    return sum(rounded_list) * len(rounded_list)\n\n\ndef test_function():\n    assert sum_of_rounded_list([2.5, 1.5, 1.7]) == 7, \"Example\"\n    assert sum_of_rounded_list([2.2, 1.2, 1.5]) == 6, \"Example\"\n    assert sum_of_rounded_list([-2.2, -1.2, -1.5]) == -6, \"Example\"\n    assert sum_of_rounded_list([2.5, 1.5, 1.7, -1.5, -1.2]) == 10, \"Example\"\n    assert sum_of_rounded_list([2.5, 1.5, 1.7, -1.5, -1.2, 1.25]) == 13, \"Example\"\n\n\nif __name__ == '__main__':\n    test_function()"
    },
    {
      "rank": 88,
      "score": 2.718856235379514,
      "candidate": "def round_total_sum(numbers: list) -> float:\n    \"\"\"Rounds every number of a given list of numbers and prints the total sum multiplied by the length of the list.\n\n    Args:\n        numbers (list): list of numbers to round\n\n    Examples:\n        >>> round_total_sum([1.3, 2.7, 3.1, 4.1])\n        32.3\n    \"\"\"\n    total = 0\n    for number in numbers:\n        total += round(number)\n    return total * len(numbers)\n\n\nif __name__ == \"__main__\":\n    round_total_sum([1.3, 2.7, 3.1, 4.1])"
    },
    {
      "rank": 89,
      "score": 2.677440122697438,
      "candidate": "def sum_of_rounded_list(lst):\n    # Round every number in the list\n    for i in range(len(lst)):\n        lst[i] = round(lst[i])\n\n    # Sum all the rounded numbers\n    total = sum(lst)\n\n    # Multiply by the length of the list\n    total *= len(lst)\n\n    return total\n\n\ndef main():\n    print(sum_of_rounded_list([2.4, 3.2, 4.5, 6.7, 8.0, 10.5]))\n    print(sum_of_rounded_list([2.4, 3.2, 4.5, 6.7, 8.0, 10.5, 11.3]))\n    print(sum_of_rounded_list([2.4, 3.2, 4.5, 6.7, 8.0, 10.5, 11.3, 11.9]))\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 90,
      "score": 2.6615389998470205,
      "candidate": "def total_sum(numbers):\n    sum_total = 0\n    for number in numbers:\n        number = round(number)\n        sum_total += number\n    print(sum_total * len(numbers))\n\n\ntotal_sum([1.23, 1.56, 1.78, 2.34, 2.56, 3.56])"
    },
    {
      "rank": 91,
      "score": 2.5459879622393946,
      "candidate": "def sum_round_numbers(numbers):\n    result = 0\n    for i in range(len(numbers)):\n        numbers[i] = round(numbers[i])\n        result += numbers[i]\n    print(result)\n\n\nsum_round_numbers([1.2, 2.6, 3.4, 4.8])"
    },
    {
      "rank": 92,
      "score": 2.493584439832788,
      "candidate": "def sum_and_len(numbers):\n    rounded_numbers = []\n    total = 0\n    length = 0\n    for i in numbers:\n        rounded_numbers.append(round(i))\n        total += rounded_numbers[-1]\n        length += 1\n    print(f\"{total} {length}\")\n    return total, length\n\n\ndef main():\n    nums = [float(i) for i in input().split()]\n    sum_and_len(nums)\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 93,
      "score": 2.4711445355220496,
      "candidate": "\"\"\"Question:\nWrite a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\nExample:\nEnter numbers: 1.9 2.1 3.2 4.3 5.4\nThe total sum is 30.0\nHints:\nUse for to iterate over the list.\n\n\"\"\"\ndef round_sum(lst):\n\ttotal = 0\n\tfor i in lst:\n\t\ttotal += round(i)\n\treturn total * len(lst)\nlst = []\nprint round_sum(lst)"
    },
    {
      "rank": 94,
      "score": 2.4245032112888487,
      "candidate": "def sum_of_rounded_nums(nums):\n    sum = 0\n    for num in nums:\n        sum += round(num)\n    print(sum*len(nums))\n\n\nif __name__ == '__main__':\n    nums = [1.23, 4.2, 5.6, 7.8]\n    sum_of_rounded_nums(nums)"
    },
    {
      "rank": 95,
      "score": 2.4018966879596646,
      "candidate": "def round_list(nums):\n    total = 0\n    for num in nums:\n        rounded = round(num)\n        total += rounded\n    return total\n\ndef test_function(test_case):\n    nums = test_case[0]\n    solution = test_case[1]\n    output = round_list(nums)\n    if output == solution:\n        print(\"Pass\")\n    else:\n        print(\"Fail\")\n\ntest_function([[1.2, 3.4, 5.6, 7.8], 15])\ntest_function([[1.2, 3.4, 5.6, 7.8, 9.0], 30])\ntest_function([[1.2, 3.4, 5.6, 7.8, 9.0, 10.0], 40])"
    },
    {
      "rank": 96,
      "score": 2.389578175014489,
      "candidate": "from typing import List\n\n\ndef list_sum(nums: List[float], precision: int) -> float:\n    \"\"\"Returns the sum of rounded numbers multiplied by the length of the list.\n\n    Args:\n        nums (List[float]): list of numbers\n        precision (int): number of digits after the decimal point\n\n    Examples:\n        >>> list_sum([2.5555555, 3.4444444, 2.2222222], 2)\n        20.0\n    \"\"\"\n    return sum(round(num, precision) for num in nums) * len(nums)\n\n\ndef main():\n    nums = [2.5555555, 3.4444444, 2.2222222]\n    print(list_sum(nums, 2))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 97,
      "score": 2.3359069755507846,
      "candidate": "def sum_of_rounded_numbers(numbers):\n    rounded_numbers = []\n    total_sum = 0\n    for number in numbers:\n        rounded_numbers.append(round(number))\n    for number in rounded_numbers:\n        total_sum += number\n    print(total_sum)\n    print(len(rounded_numbers))\n    print(total_sum * len(rounded_numbers))\n\n\nsum_of_rounded_numbers([2.5, 3.14, 9.99])"
    },
    {
      "rank": 98,
      "score": 2.287625906893272,
      "candidate": "def round_sum(numbers):\n    \"\"\"\n    >>> round_sum([3.14, 9.9, 17.3, 18.7, 9.2])\n    62.0\n    >>> round_sum([1.15, 3.55, 17.79, 12.45])\n    54.0\n    >>> round_sum([1.15, 3.55, 17.79, 12.45, 0.00, 44.00])\n    55.0\n    \"\"\"\n    result = 0\n    for i in numbers:\n        result += round(i)\n    return result * len(numbers)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 99,
      "score": 2.260739004816286,
      "candidate": "from typing import List\n\n\ndef sum_of_rounded_numbers(numbers: List[float]) -> float:\n    \"\"\"Returns the sum of rounded numbers of a given list.\n\n    Args:\n        numbers (List[float]): list of numbers\n\n    Examples:\n        >>> assert sum_of_rounded_numbers([1.3, 2.3, 3.3, 4.3]) == 12.0\n        >>> assert sum_of_rounded_numbers([1.2, 2.2, 3.2, 4.2]) == 12.0\n    \"\"\"\n    return round(sum(numbers), 1) * len(numbers)\n\n\nif __name__ == \"__main__\":\n    print(sum_of_rounded_numbers([1.3, 2.3, 3.3, 4.3]))"
    },
    {
      "rank": 100,
      "score": 2.137541083743484,
      "candidate": "def round_and_print_sum(numbers):\n    total = 0\n    for number in numbers:\n        total += round(number) * len(numbers)\n    print(total)\n\n\nround_and_print_sum([1.42, 1.52, 1.62, 1.72, 1.82, 1.92])"
    }
  ]
}