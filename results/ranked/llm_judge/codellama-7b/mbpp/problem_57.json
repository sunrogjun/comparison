{
  "timestamp": "2025-09-14T22:43:36.332926",
  "method": "improved_llm_judge",
  "judge_model": "codellama/CodeLlama-7b-Python-hf",
  "target_model": "codellama-7b",
  "dataset": "mbpp",
  "problem_number": 57,
  "total_candidates": 100,
  "results": [
    {
      "rank": 1,
      "score": 10.0,
      "candidate": "from typing import List\n\n\ndef is_monotonic(arr: List[int]) -> bool:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(1)\n    \"\"\"\n    if len(arr) <= 2:\n        return True\n\n    is_increasing = arr[0] <= arr[1]\n    for i in range(1, len(arr) - 1):\n        if is_increasing and arr[i + 1] <= arr[i]:\n            return False\n        if not is_increasing and arr[i + 1] >= arr[i]:\n            return False\n\n    return True\n\n\nif __name__ == \"__main__\":\n    assert is_monotonic([1, 2, 3, 4, 5]) is True\n    assert is_monotonic([1, 2, 3, 4, 4]) is True\n    assert is_monotonic([1, 2, 3, 4, 3]) is False"
    },
    {
      "rank": 2,
      "score": 10.0,
      "candidate": "from typing import List\n\n\ndef is_monotonic(arr: List[int]) -> bool:\n    \"\"\"\n    time complexity: O(n)\n    space complexity: O(1)\n    \"\"\"\n    if not arr:\n        return False\n    if len(arr) == 1:\n        return True\n\n    is_increasing = arr[0] < arr[1]\n    for i in range(1, len(arr) - 1):\n        if is_increasing:\n            if arr[i] < arr[i + 1]:\n                continue\n            else:\n                return False\n        else:\n            if arr[i] > arr[i + 1]:\n                continue\n            else:\n                return False\n    return True\n\n\nif __name__ == \"__main__\":\n    print(is_monotonic([1, 2, 2, 3, 5]))\n    print(is_monotonic([1, 2, 3, 4, 5]))"
    },
    {
      "rank": 3,
      "score": 10.0,
      "candidate": "def is_monotonic(arr):\n    arr_len = len(arr)\n    if arr_len < 2:\n        return True\n    increasing = arr[0] < arr[1]\n    for i in range(1, arr_len - 1):\n        if increasing:\n            if arr[i] < arr[i + 1]:\n                continue\n            else:\n                return False\n        else:\n            if arr[i] > arr[i + 1]:\n                continue\n            else:\n                return False\n    return True\n\n\ndef main():\n    print(\"Is the given array is monotonic? \" +\n          str(is_monotonic([1, 2, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 14, 15])))\n    print(\"Is the given array is monotonic? \" +\n          str(is_monotonic([1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 14, 15])))\n    print(\"Is the given array is monotonic? \" +\n          str(is_monotonic([1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 14, 15, 0])))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 4,
      "score": 10.0,
      "candidate": "def is_monotonic(arr: list) -> bool:\n    \"\"\"\n    time complexity: O(n)\n    space complexity: O(1)\n    \"\"\"\n    if len(arr) < 2:\n        return True\n\n    prev: int = arr[0]\n    for i in range(1, len(arr)):\n        if prev > arr[i]:\n            return False\n        prev = arr[i]\n\n    return True\n\n\nif __name__ == \"__main__\":\n    assert is_monotonic([1, 2, 2, 3, 4, 5, 6, 6, 7, 8, 9, 10, 12]) == True\n    assert is_monotonic([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]) == True\n    assert is_monotonic([1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12, 12]) == True\n    assert is_monotonic([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]) == True\n    assert is_monotonic([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0]) == False"
    },
    {
      "rank": 5,
      "score": 10.0,
      "candidate": "from typing import List\n\n\ndef is_monotonic(arr: List[int]) -> bool:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(1)\n    \"\"\"\n    return sorted(arr) == arr or sorted(arr, reverse=True) == arr\n\n\nif __name__ == \"__main__\":\n    print(is_monotonic([1, 2, 2, 3, 5, 8, 9, 10, 14, 16, 21, 23, 26]))\n    print(is_monotonic([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\n    print(is_monotonic([10, 9, 8, 7, 6, 5, 4, 3, 2, 1]))"
    },
    {
      "rank": 6,
      "score": 10.0,
      "candidate": "from typing import List\n\n\ndef is_monotonic(arr: List[int]) -> bool:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(1)\n    \"\"\"\n    if not arr:\n        return True\n\n    is_increasing = arr[0] <= arr[-1]\n\n    for i in range(1, len(arr)):\n        if is_increasing:\n            if arr[i] < arr[i - 1]:\n                return False\n        else:\n            if arr[i] > arr[i - 1]:\n                return False\n    return True\n\n\nif __name__ == \"__main__\":\n    assert is_monotonic([1, 2, 2, 3, 4, 5]) is True\n    assert is_monotonic([6, 5, 3, 2, 1]) is False"
    },
    {
      "rank": 7,
      "score": 10.0,
      "candidate": "def is_monotonic(arr):\n    if len(arr) == 1:\n        return True\n    if len(arr) == 2:\n        return True\n    is_monotonic = True\n    for i in range(len(arr) - 1):\n        if arr[i] > arr[i + 1]:\n            is_monotonic = False\n            break\n    return is_monotonic\n\n\ndef main():\n    arr = [1, 2, 3, 4, 5]\n    arr2 = [5, 4, 3, 2, 1]\n    arr3 = [1, 2, 3, 3, 4, 5]\n    print(is_monotonic(arr))\n    print(is_monotonic(arr2))\n    print(is_monotonic(arr3))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 8,
      "score": 10.0,
      "candidate": "def is_monotonic(arr):\n    if len(arr) <= 1:\n        return True\n    if arr[0] > arr[1]:\n        for i in range(1, len(arr)):\n            if arr[i-1] > arr[i]:\n                return False\n    if arr[0] < arr[1]:\n        for i in range(1, len(arr)):\n            if arr[i-1] < arr[i]:\n                return False\n    return True\n\nprint(is_monotonic([6, 5, 4, 4]))\nprint(is_monotonic([1, 1, 1, 1]))\nprint(is_monotonic([1, 2, 3, 4]))\nprint(is_monotonic([10, 9, 8, 7]))\nprint(is_monotonic([6, 5, 7, 8]))\nprint(is_monotonic([1, 2, 3, 3]))\nprint(is_monotonic([1, 2, 3, 2]))"
    },
    {
      "rank": 9,
      "score": 10.0,
      "candidate": "def is_monotonic(arr):\n    is_increasing = True\n    is_decreasing = True\n\n    if len(arr) <= 2:\n        return True\n\n    for i in range(1, len(arr)):\n        if arr[i] < arr[i-1]:\n            is_increasing = False\n        if arr[i] > arr[i-1]:\n            is_decreasing = False\n        if is_increasing == False and is_decreasing == False:\n            return False\n\n    return True\n\n\ndef main():\n    print(\"Is the given array monotonic: \" +\n          str(is_monotonic([6, 5, 4, 4])))\n    print(\"Is the given array monotonic: \" +\n          str(is_monotonic([6, 5, 3, 4])))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 10,
      "score": 10.0,
      "candidate": "def monotonic(a: list) -> bool:\n    \"\"\"\n    Time Complexity: O(n)\n    \"\"\"\n    if len(a) < 2:\n        return True\n\n    prev_item = a[0]\n    for item in a[1:]:\n        if item == prev_item:\n            continue\n        if item > prev_item:\n            prev_item = item\n        else:\n            return False\n    return True\n\n\nif __name__ == \"__main__\":\n    assert monotonic([1, 2, 3, 4, 5])\n    assert monotonic([1, 2, 3, 4, 5, 6])\n    assert monotonic([1, 2, 3, 4, 5, 6, 7])\n    assert monotonic([1, 2, 3, 4, 5, 6, 7, 8])\n    assert monotonic([1, 2, 3, 4, 5, 6, 7, 8, 9])\n    assert monotonic([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n    assert monotonic([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])\n    assert monotonic([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12])\n    assert monotonic([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13])\n    assert monotonic([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14])\n    assert monotonic([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12,"
    },
    {
      "rank": 11,
      "score": 10.0,
      "candidate": "def is_monotonic(input_list: list) -> bool:\n    \"\"\"\n    >>> is_monotonic([1, 2, 3, 4, 5])\n    True\n    >>> is_monotonic([1, 2, 3, 4, 5, 4, 3, 2, 1])\n    True\n    >>> is_monotonic([1, 2, 2, 3, 5, 4, 3, 2, 1])\n    False\n    \"\"\"\n    flag = 0\n    for i in range(1, len(input_list)):\n        if input_list[i] > input_list[i - 1]:\n            flag += 1\n        elif input_list[i] < input_list[i - 1]:\n            flag -= 1\n\n    return flag == 0 or flag == 1\n\n\ndef is_monotonic_by_sort(input_list: list) -> bool:\n    \"\"\"\n    >>> is_monotonic_by_sort([1, 2, 3, 4, 5])\n    True\n    >>> is_monotonic_by_sort([1, 2, 3, 4, 5, 4, 3, 2, 1])\n    True\n    >>> is_monotonic_by_sort([1, 2, 2, 3, 5, 4, 3, 2, 1])\n    False\n    \"\"\"\n    input_list = sorted(input_list)\n    for i in range(1, len(input_list)):\n        if input_list[i] > input_list[i - 1]:\n            return False\n\n    return True\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 12,
      "score": 9.0,
      "candidate": "def is_monotonic(arr):\n    return (sorted(arr) == arr or sorted(arr, reverse=True) == arr)\n\ndef main():\n    arr = [1, 2, 2, 3, 4, 5, 6, 6]\n    arr1 = [1, 2, 3, 4, 5, 6, 7, 8]\n    arr2 = [1, 2, 3, 4, 4, 5, 6, 7]\n    arr3 = [1, 2, 3, 4, 4, 5, 6, 6]\n\n    print(\"Is array monotonic?\", is_monotonic(arr))\n    print(\"Is array monotonic?\", is_monotonic(arr1))\n    print(\"Is array monotonic?\", is_monotonic(arr2))\n    print(\"Is array monotonic?\", is_monotonic(arr3))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 13,
      "score": 8.0,
      "candidate": "def is_monotonic(arr: list) -> bool:\n    \"\"\"\n    Time Complexity: O(n)\n    \"\"\"\n    return is_monotonic_asc(arr) or is_monotonic_desc(arr)\n\n\ndef is_monotonic_asc(arr: list) -> bool:\n    for i in range(len(arr) - 1):\n        if arr[i] > arr[i + 1]:\n            return False\n    return True\n\n\ndef is_monotonic_desc(arr: list) -> bool:\n    for i in range(len(arr) - 1):\n        if arr[i] < arr[i + 1]:\n            return False\n    return True\n\n\nif __name__ == \"__main__\":\n    print(is_monotonic([1, 2, 3, 4, 5]))\n    print(is_monotonic([1, 2, 3, 4, 5, 4, 3, 2, 1]))\n    print(is_monotonic([6, 5, 4, 4]))\n    print(is_monotonic([1, 2, 3, 4, 3, 4, 5]))"
    },
    {
      "rank": 14,
      "score": 8.0,
      "candidate": "def check_monotonic(arr):\n    if len(arr) < 2:\n        return True\n\n    flag = 0\n\n    for i in range(len(arr) - 1):\n        if arr[i] > arr[i+1]:\n            if flag == 1:\n                return False\n            flag = 1\n        elif arr[i] < arr[i+1]:\n            if flag == -1:\n                return False\n            flag = -1\n\n    return True"
    },
    {
      "rank": 15,
      "score": 8.0,
      "candidate": "def is_monotonic(arr):\n    if len(arr) < 2:\n        return True\n\n    if arr[0] < arr[1]:\n        for i in range(1, len(arr)):\n            if arr[i] < arr[i - 1]:\n                return False\n    else:\n        for i in range(1, len(arr)):\n            if arr[i] > arr[i - 1]:\n                return False\n    return True\n\n\ndef main():\n    print(is_monotonic([1, 2, 2, 3, 5]))\n    print(is_monotonic([1, 2, 3, 4, 5]))\n    print(is_monotonic([1, 1, 2, 3, 4]))\n    print(is_monotonic([1, 2, 3, 3, 4]))\n    print(is_monotonic([1, 2, 2, 2, 4]))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 16,
      "score": 8.0,
      "candidate": "def check_monotonic(arr):\n    if len(arr) <= 2:\n        return True\n    if len(arr) > 2:\n        for i in range(len(arr)-1):\n            if arr[i] > arr[i+1]:\n                return False\n    return True\n\n\ndef main():\n    arr = [1,2,3,4,5]\n    print(check_monotonic(arr))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 17,
      "score": 8.0,
      "candidate": "def monotonic(arr):\n    if len(arr) == 1:\n        return True\n\n    direction = arr[1] - arr[0]\n    for i in range(1, len(arr)):\n        if (arr[i] - arr[i-1]) * direction <= 0:\n            return False\n\n    return True\n\nprint(monotonic([1,2,3,4,5]))\nprint(monotonic([1,2,3,3,4,5]))\nprint(monotonic([1,2,3,4,4,5]))\nprint(monotonic([1,2,3,4,3,5]))"
    },
    {
      "rank": 18,
      "score": 8.0,
      "candidate": "from typing import List\n\n\ndef is_monotonic(arr: List[int]) -> bool:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(1)\n    \"\"\"\n    if len(arr) < 2:\n        return True\n\n    is_monotonic = arr[0] <= arr[1]\n    for i in range(1, len(arr) - 1):\n        if is_monotonic == (arr[i] <= arr[i + 1]):\n            continue\n        else:\n            return False\n    return True\n\n\nif __name__ == \"__main__\":\n    assert is_monotonic([1, 2, 3, 4, 5, 6, 7, 8, 9]) == True\n    assert is_monotonic([1, 2, 3, 4, 5, 6, 7, 7, 9]) == True\n    assert is_monotonic([1, 2, 3, 4, 5, 6, 7, 6, 9]) == False\n    assert is_monotonic([1, 2, 3, 4, 5, 6, 7, 6, 6]) == False"
    },
    {
      "rank": 19,
      "score": 8.0,
      "candidate": "def monotonic(arr):\n    if len(arr) == 1:\n        return True\n    if len(arr) == 2:\n        return arr[0] == arr[1]\n    if len(arr) >= 3:\n        if arr[0] < arr[1]:\n            for i in range(1, len(arr)):\n                if arr[i-1] <= arr[i]:\n                    continue\n                else:\n                    return False\n            return True\n        elif arr[0] > arr[1]:\n            for i in range(1, len(arr)):\n                if arr[i-1] >= arr[i]:\n                    continue\n                else:\n                    return False\n            return True\n\n\na = [1, 2, 3, 4, 5]\nb = [5, 4, 3, 2, 1]\nc = [1, 1, 1, 1, 1]\nd = [5, 4, 3, 2, 2]\ne = [5, 4, 3, 2, 1, 1]\nf = [1, 1, 2, 2, 3, 3]\ng = [1, 2, 3, 4, 5, 6]\n\nprint(monotonic(a))\nprint(monotonic(b))\nprint(monotonic(c))\nprint(monotonic(d))\nprint(monotonic(e))\nprint(monotonic(f))\nprint(monotonic(g))"
    },
    {
      "rank": 20,
      "score": 8.0,
      "candidate": "def is_monotonic(arr):\n    if len(arr) == 1:\n        return True\n    if len(arr) == 2:\n        return True\n    if len(arr) == 3:\n        if arr[0] < arr[1]:\n            return True\n        if arr[0] == arr[1]:\n            return True\n        if arr[0] > arr[1]:\n            return False\n    if arr[0] < arr[1] and arr[1] < arr[2]:\n        return True\n    if arr[0] > arr[1] and arr[1] > arr[2]:\n        return True\n    return False\n\nif __name__ == \"__main__\":\n    arr1 = [1, 2, 3, 4, 5, 6, 7, 8]\n    arr2 = [1, 2, 2, 3, 4, 5, 6, 7, 8]\n    arr3 = [1, 2, 3, 4, 3, 2, 1]\n    arr4 = [1, 2, 3, 4, 5, 6, 7, 7]\n    arr5 = [1, 2, 3, 4, 3, 2, 1, 2]\n\n    print(is_monotonic(arr1))\n    print(is_monotonic(arr2))\n    print(is_monotonic(arr3))\n    print(is_monotonic(arr4))\n    print(is_monotonic(arr5))"
    },
    {
      "rank": 21,
      "score": 8.0,
      "candidate": "from typing import List\n\n\ndef is_monotonic(arr: List[int]) -> bool:\n    \"\"\"\n    Time Complexity: O(n)\n    \"\"\"\n    if len(arr) <= 2:\n        return True\n\n    increasing: bool = True\n\n    for i in range(1, len(arr)):\n        if arr[i - 1] > arr[i]:\n            increasing = False\n\n    decreasing: bool = True\n\n    for i in range(1, len(arr)):\n        if arr[i - 1] < arr[i]:\n            decreasing = False\n\n    return increasing or decreasing\n\n\nif __name__ == \"__main__\":\n    assert is_monotonic([1, 2, 3, 4, 5]) == True\n    assert is_monotonic([5, 4, 3, 2, 1]) == True\n    assert is_monotonic([1, 1, 1, 1, 1]) == True\n    assert is_monotonic([1, 2, 3, 4, 5, 4, 3, 2, 1]) == False"
    },
    {
      "rank": 22,
      "score": 8.0,
      "candidate": "def check_monotonic(arr):\n    arr_len = len(arr)\n    if arr_len == 1:\n        return True\n\n    if arr_len == 2:\n        if arr[0] < arr[1]:\n            return True\n        else:\n            return False\n\n    if arr[0] < arr[1]:\n        for i in range(1, arr_len):\n            if arr[i] < arr[i - 1]:\n                return False\n    else:\n        for i in range(1, arr_len):\n            if arr[i] > arr[i - 1]:\n                return False\n    return True"
    },
    {
      "rank": 23,
      "score": 8.0,
      "candidate": "def is_monotonic(arr):\n    is_increasing = True\n    is_decreasing = True\n    for i in range(len(arr)-1):\n        if arr[i] > arr[i+1]:\n            is_increasing = False\n        if arr[i] < arr[i+1]:\n            is_decreasing = False\n    return is_increasing or is_decreasing\n\n\ndef main():\n    print(is_monotonic([1,2,3,4,5]))\n    print(is_monotonic([1,2,2,3,4,4]))\n    print(is_monotonic([1,2,3,4,4,3]))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 24,
      "score": 8.0,
      "candidate": "from typing import List\n\n\ndef is_monotonic(arr: List) -> bool:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(1)\n    \"\"\"\n    if not arr:\n        return False\n\n    inc = arr[1] > arr[0]\n    for i in range(2, len(arr)):\n        if (inc and arr[i] < arr[i - 1]) or (not inc and arr[i] > arr[i - 1]):\n            return False\n    return True\n\n\nif __name__ == \"__main__\":\n    assert is_monotonic([1, 2, 2, 3, 4, 5]) == True\n    assert is_monotonic([1, 2, 3, 4, 5]) == True\n    assert is_monotonic([5, 4, 3, 2, 1]) == True\n    assert is_monotonic([1, 1, 1, 1, 1]) == True\n    assert is_monotonic([5, 4, 3, 2, 5]) == False\n    assert is_monotonic([1, 2, 3, 3, 4, 5]) == False\n    assert is_monotonic([1, 2, 2, 3, 1, 5]) == False"
    },
    {
      "rank": 25,
      "score": 8.0,
      "candidate": "from typing import List\n\n\ndef is_monotonic(arr: List) -> bool:\n    \"\"\"\n    Time Complexity: O(n)\n    \"\"\"\n    return arr == sorted(arr) or arr == sorted(arr, reverse=True)\n\n\nif __name__ == \"__main__\":\n    assert is_monotonic([1, 2, 3, 4, 5]) is True\n    assert is_monotonic([1, 1, 2, 2, 2]) is True\n    assert is_monotonic([1, 2, 1, 2, 3]) is False\n    assert is_monotonic([1, 2, 1, 1, 2]) is False\n    assert is_monotonic([1, 2, 3, 4, 5, 6]) is True\n    assert is_monotonic([1, 2, 3, 4, 5, 6, 7]) is True\n    assert is_monotonic([1, 2, 3, 4, 5, 6, 6]) is False\n    assert is_monotonic([1, 2, 3, 4, 5, 6, 6, 7]) is False\n    assert is_monotonic([1, 2, 3, 4, 5, 6, 6, 7, 8]) is True\n    assert is_monotonic([1, 2, 3, 4, 5, 6, 7, 8, 7]) is False\n    assert is_monotonic([1, 2, 3, 4, 5, 6, 7, 8, 8]) is False"
    },
    {
      "rank": 26,
      "score": 8.0,
      "candidate": "def is_monotonic(arr):\n    if len(arr) == 1:\n        return True\n    if len(arr) == 2:\n        return arr[0] == arr[1]\n    if arr[0] < arr[1]:\n        for i in range(1, len(arr) - 1):\n            if arr[i] < arr[i+1]:\n                continue\n            else:\n                return False\n        return True\n    else:\n        for i in range(1, len(arr) - 1):\n            if arr[i] > arr[i+1]:\n                continue\n            else:\n                return False\n        return True\n\nprint(is_monotonic([1, 2, 3, 4, 5]))\nprint(is_monotonic([1, 2, 2, 3, 4, 5]))\nprint(is_monotonic([1, 2, 3, 4, 4, 5]))\nprint(is_monotonic([1, 2, 3, 4, 3, 5]))\nprint(is_monotonic([1, 2, 3, 4, 2, 5]))"
    },
    {
      "rank": 27,
      "score": 8.0,
      "candidate": "def is_monotonic(arr):\n    if len(arr) == 1:\n        return True\n    if len(arr) == 2:\n        return arr[0] == arr[1]\n\n    if arr[0] < arr[1]:\n        for i in range(1, len(arr) - 1):\n            if arr[i] < arr[i + 1]:\n                continue\n            else:\n                return False\n    else:\n        for i in range(1, len(arr) - 1):\n            if arr[i] > arr[i + 1]:\n                continue\n            else:\n                return False\n    return True\n\n\ndef main():\n    print(is_monotonic([1, 2, 3, 4, 5]))\n    print(is_monotonic([1, 2, 3, 4, 5, 4, 3, 2, 1]))\n    print(is_monotonic([1, 2, 3, 4, 5, 6]))\n    print(is_monotonic([1, 2, 3, 4, 5, 6, 5, 4, 3, 2, 1]))\n    print(is_monotonic([6, 5, 4, 3, 2, 1]))\n    print(is_monotonic([1, 2, 3, 4, 4, 5]))\n    print(is_monotonic([1, 2, 2, 4, 5, 6]))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 28,
      "score": 8.0,
      "candidate": "from typing import List\n\n\ndef is_monotonic(arr: List[int]) -> bool:\n    \"\"\"\n    Time Complexity: O(n)\n    \"\"\"\n    if arr[0] >= arr[1]:\n        for i in range(1, len(arr)):\n            if arr[i] < arr[i - 1]:\n                return False\n    else:\n        for i in range(1, len(arr)):\n            if arr[i] > arr[i - 1]:\n                return False\n\n    return True\n\n\nif __name__ == \"__main__\":\n    assert is_monotonic([6, 5, 4, 4]) == True\n    assert is_monotonic([1, 5, 3, 6, 7, 8]) == True\n    assert is_monotonic([1, 5, 3, 4, 7, 8]) == False\n    assert is_monotonic([1, 2, 2, 3, 4, 5, 6, 7, 8]) == False\n    assert is_monotonic([1, 2, 3, 3, 4, 5, 6, 7, 8]) == False\n    assert is_monotonic([1, 2, 3, 4, 5, 6, 7, 8, 8]) == True"
    },
    {
      "rank": 29,
      "score": 8.0,
      "candidate": "def is_monotonic(array):\n    if array[0] > array[1]:\n        for i in range(len(array) - 1):\n            if array[i] < array[i + 1]:\n                return False\n    else:\n        for i in range(len(array) - 1):\n            if array[i] > array[i + 1]:\n                return False\n    return True\n\n\ndef main():\n    array = [1, 2, 3, 4, 5, 6, 7, 8]\n    print(\"Array is monotonic or not : \", is_monotonic(array))\n\n    array = [1, 2, 3, 4, 5, 6, 7, 8, 3, 4, 5, 6, 7, 8]\n    print(\"Array is monotonic or not : \", is_monotonic(array))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 30,
      "score": 8.0,
      "candidate": "from typing import List\n\n\ndef is_monotonic(arr: List[int]) -> bool:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(1)\n    \"\"\"\n    if not arr:\n        return True\n\n    increase: bool = True\n\n    for i in range(len(arr) - 1):\n        if arr[i] > arr[i + 1]:\n            increase = False\n\n    return increase\n\n\nif __name__ == \"__main__\":\n    assert is_monotonic([1, 2, 2, 3, 4]) == True\n    assert is_monotonic([6, 5, 4, 4]) == False\n    assert is_monotonic([1, 1, 1, 1, 1]) == True"
    },
    {
      "rank": 31,
      "score": 8.0,
      "candidate": "def check_monotonic(arr):\n    is_monotonic = True\n    for i in range(1, len(arr)):\n        if arr[i] != arr[i-1]:\n            if arr[i] > arr[i-1]:\n                if not arr[i] > arr[i+1]:\n                    is_monotonic = False\n                    break\n            else:\n                if not arr[i] < arr[i+1]:\n                    is_monotonic = False\n                    break\n    return is_monotonic\n\nprint(check_monotonic([1, 2, 2, 3, 4, 5, 6, 6, 7]))\nprint(check_monotonic([1, 2, 3, 3, 4, 5, 6, 6, 7]))\nprint(check_monotonic([1, 2, 3, 4, 5, 6, 7, 8, 9]))"
    },
    {
      "rank": 32,
      "score": 8.0,
      "candidate": "def is_monotonic(arr):\n    return (arr == sorted(arr)) or (arr == sorted(arr, reverse=True))\n\ndef main():\n    print(\"Is the array is monotonic: \" + str(is_monotonic([1,2,2,3,4,5])))\n    print(\"Is the array is monotonic: \" + str(is_monotonic([6,5,3,4,5,6])))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 33,
      "score": 8.0,
      "candidate": "from typing import List\n\n\ndef is_monotonic(arr: List) -> bool:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(1)\n    \"\"\"\n\n    return all(arr[i] <= arr[i + 1] for i in range(len(arr) - 1)) or all(\n        arr[i] >= arr[i + 1] for i in range(len(arr) - 1)\n    )\n\n\nif __name__ == \"__main__\":\n    print(is_monotonic([1, 2, 3, 4, 5, 6, 7]))\n    print(is_monotonic([1, 1, 1, 1, 1, 1, 1]))\n    print(is_monotonic([1, 2, 3, 4, 5, 4, 3, 2, 1]))"
    },
    {
      "rank": 34,
      "score": 8.0,
      "candidate": "def is_monotonic(array):\n    if array[0] > array[1]:\n        array.reverse()\n    for i in range(len(array)-1):\n        if array[i] > array[i+1]:\n            return False\n    return True\n\n\ndef is_monotonic_2(array):\n    if array[0] > array[1]:\n        array.reverse()\n    return all(array[i] >= array[i+1] for i in range(len(array)-1))"
    },
    {
      "rank": 35,
      "score": 8.0,
      "candidate": "def monotonic_array(arr):\n    return (arr == sorted(arr)) or (arr == sorted(arr, reverse=True))\n\n\nprint(monotonic_array([1, 2, 3, 4, 5]))\nprint(monotonic_array([1, 1, 2, 2, 3, 3, 4, 4, 5, 5]))\nprint(monotonic_array([1, 2, 2, 3, 3, 4, 4, 5, 5]))"
    },
    {
      "rank": 36,
      "score": 8.0,
      "candidate": "def check_monotonic(arr):\n    if arr == sorted(arr):\n        return True\n    return False\n\n\ndef main():\n    arr = [1, 2, 3, 4, 5]\n    print(\"Is the array monotonic?\")\n    ans = check_monotonic(arr)\n    print(ans)\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 37,
      "score": 8.0,
      "candidate": "def check_monotonic(array):\n    if len(array) < 2:\n        return True\n\n    if array[0] < array[1]:\n        for i in range(1, len(array)):\n            if array[i] < array[i - 1]:\n                return False\n    else:\n        for i in range(1, len(array)):\n            if array[i] > array[i - 1]:\n                return False\n    return True\n\n\ndef main():\n    print(check_monotonic([1, 2, 2, 3, 3, 3, 3, 4, 5, 5]))\n    print(check_monotonic([1, 2, 3, 3, 3, 3, 4, 5, 5]))\n    print(check_monotonic([1, 2, 2, 3, 3, 4, 5, 5]))\n    print(check_monotonic([1, 2, 3, 4, 5, 6]))\n    print(check_monotonic([1, 2, 2, 3, 3, 3, 4, 5, 5]))\n    print(check_monotonic([1, 2, 3, 4, 5, 6]))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 38,
      "score": 8.0,
      "candidate": "def is_monotonic(arr):\n    if len(arr) < 2:\n        return True\n\n    is_increasing = arr[0] <= arr[1]\n    for i in range(len(arr)-1):\n        if (is_increasing and arr[i] > arr[i+1]) or (not is_increasing and arr[i] < arr[i+1]):\n            return False\n    return True\n\n\nprint(is_monotonic([1, 1, 2]))\nprint(is_monotonic([1, 2, 4, 5, 6, 7]))\nprint(is_monotonic([1, 2, 3, 4, 5]))\nprint(is_monotonic([2, 1, 2, 3, 4, 5]))"
    },
    {
      "rank": 39,
      "score": 8.0,
      "candidate": "def is_monotonic(array):\n    if len(array) < 2:\n        return True\n\n    # check for the monotonicity\n    if array[1] > array[0]:\n        for i in range(2, len(array)):\n            if array[i] < array[i - 1]:\n                return False\n    else:\n        for i in range(2, len(array)):\n            if array[i] > array[i - 1]:\n                return False\n\n    return True\n\n\nif __name__ == \"__main__\":\n    print(is_monotonic([1, 2, 3, 4, 5]))\n    print(is_monotonic([1, 2, 2, 3, 5]))\n    print(is_monotonic([1, 2, 3, 4, 5, 5]))\n    print(is_monotonic([1, 2, 2, 3, 5, 5]))"
    },
    {
      "rank": 40,
      "score": 8.0,
      "candidate": "def monotonic(arr):\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(1)\n    \"\"\"\n    if arr[1] == arr[0]:\n        return True\n    is_monotonic = False\n    for i in range(1, len(arr)):\n        if arr[i] == arr[i-1]:\n            continue\n        if arr[i] < arr[i-1]:\n            if is_monotonic is False:\n                is_monotonic = True\n            else:\n                return False\n        else:\n            return False\n    return is_monotonic\n\n\nif __name__ == \"__main__\":\n    print(monotonic([1, 2, 2, 3, 4, 5]))\n    print(monotonic([1, 2, 3, 4, 5, 6]))\n    print(monotonic([1, 2, 2, 3, 4, 4]))\n    print(monotonic([1, 2, 3, 4, 5, 6, 7]))\n    print(monotonic([1, 2, 2, 3, 4, 4, 5]))\n    print(monotonic([1, 2, 3, 4, 5, 6, 7, 7]))"
    },
    {
      "rank": 41,
      "score": 8.0,
      "candidate": "def isMonotonic(arr):\n    if len(arr) == 1:\n        return True\n\n    incr = True\n    decr = True\n\n    for i in range(1, len(arr)):\n        if arr[i] > arr[i-1]:\n            incr = False\n        if arr[i] < arr[i-1]:\n            decr = False\n\n    return incr or decr\n\n\ndef main():\n    arr = [6, 5, 4, 4]\n    arr1 = [1, 1, 2, 3, 5]\n    arr2 = [1, 1, 2, 3, 4]\n    arr3 = [1, 2, 3, 4, 5]\n    arr4 = [1, 2, 3, 4, 5, 6]\n    arr5 = [1, 2, 3, 4, 5, 5]\n\n    print(isMonotonic(arr))\n    print(isMonotonic(arr1))\n    print(isMonotonic(arr2))\n    print(isMonotonic(arr3))\n    print(isMonotonic(arr4))\n    print(isMonotonic(arr5))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 42,
      "score": 8.0,
      "candidate": "from typing import List\n\n\ndef is_monotonic(arr: List[int]) -> bool:\n    \"\"\"\n    Time Complexity: O(n)\n    \"\"\"\n    if len(arr) <= 2:\n        return True\n\n    prev_elem = arr[0]\n    same_flag = False\n\n    for elem in arr[1:]:\n        if same_flag:\n            if elem != prev_elem:\n                return False\n        else:\n            if elem < prev_elem:\n                if elem == prev_elem:\n                    same_flag = True\n                else:\n                    return False\n            elif elem > prev_elem:\n                prev_elem = elem\n    return True\n\n\nif __name__ == \"__main__\":\n    assert is_monotonic([1, 2, 3, 4, 5, 6]) == True\n    assert is_monotonic([6, 5, 4, 3, 2, 1]) == True\n    assert is_monotonic([1, 2, 2, 3, 3, 4, 5, 6]) == True\n    assert is_monotonic([6, 5, 4, 3, 2, 1, 0]) == True\n    assert is_monotonic([1, 1, 1, 2, 2, 3, 3, 4, 5, 5, 6]) == True\n    assert is_monotonic([1, 2, 3, 3, 4, 5, 6]) == False\n    assert is_monotonic([1, 2, 3, 4, 5, 6, 6]) == False\n    assert is_monotonic([6, 5, 4, 3, 2, 1, 0, 1]) == False\n    assert is_monotonic([6, 5, 4, 3, 2, 1, 0, 1, 2]) == False"
    },
    {
      "rank": 43,
      "score": 8.0,
      "candidate": "def check_monotonic(lst):\n    # Check if the array is empty\n    if len(lst) == 0:\n        return False\n    # Check if the array is monotonic\n    if lst[0] < lst[-1]:\n        for i in range(1, len(lst)):\n            if lst[i] < lst[i - 1]:\n                return False\n    else:\n        for i in range(1, len(lst)):\n            if lst[i] > lst[i - 1]:\n                return False\n    return True"
    },
    {
      "rank": 44,
      "score": 8.0,
      "candidate": "from typing import List\n\n\ndef is_monotonic(arr: List) -> bool:\n    if len(arr) <= 1:\n        return True\n\n    increasing = True\n    decreasing = True\n\n    for i in range(1, len(arr)):\n        if arr[i - 1] > arr[i]:\n            increasing = False\n        if arr[i - 1] < arr[i]:\n            decreasing = False\n        if not increasing and not decreasing:\n            return False\n    return True\n\n\ndef main():\n    print(is_monotonic([1, 2, 2, 3, 4, 5]))\n    print(is_monotonic([1, 2, 3, 4, 5]))\n    print(is_monotonic([1, 2, 3, 4, 4, 5]))\n    print(is_monotonic([1, 2, 3, 4, 4, 5, 5]))\n    print(is_monotonic([2, 1, 2, 3, 4, 5]))\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 45,
      "score": 8.0,
      "candidate": "def check_monotonic(arr):\n    if not arr:\n        return True\n    monotonic = True\n    for i in range(len(arr)-1):\n        if arr[i] > arr[i+1]:\n            monotonic = False\n            break\n    return monotonic\n\n\narr = [6, 5, 4, 4]\nprint(check_monotonic(arr))"
    },
    {
      "rank": 46,
      "score": 8.0,
      "candidate": "def is_monotonic(arr):\n    if len(arr) < 2:\n        return True\n    else:\n        for i in range(1, len(arr)):\n            if arr[i] > arr[i-1]:\n                return False\n    return True\n\ndef is_monotonic_2(arr):\n    return (all(arr[i] <= arr[i+1] for i in range(len(arr)-1)) or\n            all(arr[i] >= arr[i+1] for i in range(len(arr)-1)))\n\ndef is_monotonic_3(arr):\n    return arr == sorted(arr) or arr == sorted(arr, reverse=True)\n\ndef main():\n    arr1 = [1, 2, 3, 4, 5]\n    arr2 = [1, 2, 3, 4, 5, 5]\n    arr3 = [1, 1, 2, 4, 5]\n    arr4 = [1, 2, 3, 4, 4, 5]\n    arr5 = [1, 2, 3, 4, 5, 6]\n    arr6 = [1, 2, 3, 4, 5, 5, 5]\n    arr7 = [1, 2, 3, 4, 5, 6, 7]\n    arr8 = [1, 2, 3, 4, 5, 4, 3]\n    arr9 = [1, 2, 3, 4, 3, 2, 1]\n\n    print(\"Is array 1 monotonic: \" + str(is_monotonic(arr1)))\n    print(\"Is array 2 monotonic: \" + str(is_monotonic(arr2)))\n    print(\"Is array 3 monotonic: \" + str(is_monotonic(arr3)))\n    print(\"Is array 4 monotonic: \" + str(is_monotonic(arr4)))\n    print(\"Is array 5 monotonic: \" + str(is_monotonic(arr5)))\n    print(\"Is array 6"
    },
    {
      "rank": 47,
      "score": 8.0,
      "candidate": "def is_monotonic(arr):\n    is_monotonic = True\n    for i in range(len(arr) - 1):\n        if arr[i] > arr[i + 1]:\n            is_monotonic = False\n    return is_monotonic\n\n\nprint(is_monotonic([1, 2, 3, 4, 5]))\nprint(is_monotonic([6, 5, 4, 3, 2, 1]))\nprint(is_monotonic([1, 1, 1, 1, 1]))\nprint(is_monotonic([1, 2, 3, 4, 5, 4, 3, 2, 1]))"
    },
    {
      "rank": 48,
      "score": 8.0,
      "candidate": "from typing import List\n\n\ndef is_monotonic(arr: List[int]) -> bool:\n    if len(arr) <= 1:\n        return True\n\n    is_increasing = arr[0] <= arr[1]\n    for i in range(1, len(arr) - 1):\n        if (arr[i] > arr[i + 1] and is_increasing) or (arr[i] < arr[i + 1] and not is_increasing):\n            return False\n    return True\n\n\nif __name__ == \"__main__\":\n    print(is_monotonic([1, 2, 3, 4, 5]))\n    print(is_monotonic([1, 2, 2, 3, 4, 5]))\n    print(is_monotonic([1, 2, 3, 3, 4, 5]))\n    print(is_monotonic([1, 2, 3, 4, 5, 5]))\n    print(is_monotonic([1, 2, 3, 4, 4, 5]))"
    },
    {
      "rank": 49,
      "score": 8.0,
      "candidate": "def is_monotonic(arr):\n    return arr == sorted(arr) or arr == sorted(arr, reverse=True)\n\n\ndef main():\n    print(\"Is the array monotonic? \" + str(is_monotonic([1, 2, 2, 3, 4, 5, 5, 6])))\n    print(\"Is the array monotonic? \" + str(is_monotonic([1, 2, 3, 4, 3])))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 50,
      "score": 8.0,
      "candidate": "from typing import List\n\n\ndef check_monotonic(arr: List[int]) -> bool:\n    \"\"\"\n    Time Complexity: O(n)\n    \"\"\"\n    if len(arr) == 1:\n        return True\n\n    if len(arr) == 2:\n        return arr[0] == arr[1]\n\n    is_monotonic = True\n    if arr[0] < arr[1]:\n        for i in range(1, len(arr)):\n            if arr[i] < arr[i - 1]:\n                is_monotonic = False\n                break\n    else:\n        for i in range(1, len(arr)):\n            if arr[i] > arr[i - 1]:\n                is_monotonic = False\n                break\n\n    return is_monotonic\n\n\nif __name__ == \"__main__\":\n    assert check_monotonic([1, 2, 2, 3, 5]) is True\n    assert check_monotonic([1, 2, 3, 4, 5]) is True\n    assert check_monotonic([5, 4, 3, 2, 1]) is True\n    assert check_monotonic([1, 2, 3, 4, 5, 4, 3, 2, 1]) is True\n    assert check_monotonic([5, 4, 3, 2, 1, 2, 3, 4, 5]) is True\n    assert check_monotonic([1, 2, 3, 4, 5, 6]) is False\n    assert check_monotonic([5, 4, 3, 2, 1, 2, 1, 2, 3, 4, 5]) is False"
    },
    {
      "rank": 51,
      "score": 8.0,
      "candidate": "def is_monotonic(arr):\n    # Initialize the variables\n    is_monotonic = True\n    is_increasing = None\n\n    # Check for the first element\n    if arr[1] > arr[0]:\n        is_increasing = True\n    else:\n        is_increasing = False\n\n    # Loop through the array\n    for i in range(2, len(arr)):\n        # If the current element is equal to the previous element\n        if arr[i] == arr[i - 1]:\n            continue\n        # If the current element is greater than the previous element\n        elif arr[i] > arr[i - 1]:\n            # If the last element was increasing, then the current element must also be increasing\n            if is_increasing:\n                is_monotonic = True\n            # If the last element was decreasing, then the current element must also be decreasing\n            else:\n                is_monotonic = False\n                break\n        # If the current element is smaller than the previous element\n        else:\n            # If the last element was increasing, then the current element must also be decreasing\n            if is_increasing:\n                is_monotonic = False\n                break\n            # If the last element was decreasing, then the current element must also be increasing\n            else:\n                is_monotonic = True\n\n    return is_monotonic\n\n\ndef main():\n    print(is_monotonic([1, 2, 2, 3, 3, 3, 3, 3]))\n    print(is_monotonic([1, 2, 3, 4, 5]))\n    print(is_monotonic([1, 2, 3, 4, 3, 2, 1]))\n    print(is_monotonic([1, 2, 3, 4, 5, 4, 3, 2, 1]))\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 52,
      "score": 8.0,
      "candidate": "def is_monotonic(array):\n    if len(array) < 2:\n        return True\n    is_increasing = array[0] <= array[1]\n    for i in range(1, len(array) - 1):\n        if is_increasing and array[i] > array[i + 1] or not is_increasing and array[i] < array[i + 1]:\n            return False\n    return True\n\n\ndef main():\n    print(is_monotonic([1, 2, 2, 3, 4, 4, 5]))\n    print(is_monotonic([-1, -2, -2, -3, -4, -4, -5]))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 53,
      "score": 8.0,
      "candidate": "def check_monotonic(arr):\n    arr_length = len(arr)\n    if arr_length <= 2:\n        return True\n\n    if arr[0] < arr[1]:\n        for i in range(1, arr_length):\n            if arr[i - 1] > arr[i]:\n                return False\n    else:\n        for i in range(1, arr_length):\n            if arr[i - 1] < arr[i]:\n                return False\n    return True\n\n\ndef main():\n    print(\"Is array is monotonic? - \" +\n          str(check_monotonic([1, 2, 3, 4, 5])))\n    print(\"Is array is monotonic? - \" +\n          str(check_monotonic([1, 2, 2, 3, 5])))\n    print(\"Is array is monotonic? - \" +\n          str(check_monotonic([1, 2, 3, 3, 5])))\n    print(\"Is array is monotonic? - \" +\n          str(check_monotonic([1, 2, 3, 2, 5])))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 54,
      "score": 8.0,
      "candidate": "from typing import List\n\n\ndef is_monotonic(arr: List[int]) -> bool:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(1)\n    \"\"\"\n\n    if len(arr) <= 2:\n        return True\n\n    inc = arr[0] < arr[1]\n    for i in range(1, len(arr) - 1):\n        if arr[i] < arr[i - 1] and inc:\n            return False\n        if arr[i] > arr[i - 1] and not inc:\n            return False\n    return True\n\n\nif __name__ == \"__main__\":\n    assert is_monotonic([1, 2, 2, 3, 4, 5, 6]) is True\n    assert is_monotonic([6, 5, 4, 3, 2, 1]) is True\n    assert is_monotonic([1, 2, 3, 4, 3, 2, 1]) is False\n    assert is_monotonic([1, 2, 3, 4, 5]) is True\n    assert is_monotonic([1, 2, 2, 3, 1]) is False"
    },
    {
      "rank": 55,
      "score": 8.0,
      "candidate": "def isMonotonic(arr):\n    return (all(arr[i] <= arr[i+1] for i in range(len(arr)-1)) or all(arr[i] >= arr[i+1] for i in range(len(arr)-1)))\n\nprint(isMonotonic([1,2,3,4,5,6,7]))\nprint(isMonotonic([1,2,3,4,5,6,6]))\nprint(isMonotonic([1,2,3,4,5,6,5]))"
    },
    {
      "rank": 56,
      "score": 8.0,
      "candidate": "def is_monotonic(arr):\n    return (\n        all(arr[i] <= arr[i + 1] for i in range(len(arr) - 1))\n        or all(arr[i] >= arr[i + 1] for i in range(len(arr) - 1))\n    )\n\n\nprint(is_monotonic([1, 2, 2, 3, 4, 5, 6, 7, 8, 10]))\nprint(is_monotonic([1, 2, 3, 4, 5, 6, 7, 8, 10]))\nprint(is_monotonic([1, 2, 3, 4, 5, 4, 3, 2, 1]))"
    },
    {
      "rank": 57,
      "score": 8.0,
      "candidate": "def is_monotonic(arr):\n    \"\"\"\n    :param arr: list - list of integers\n    :return: bool\n    \"\"\"\n    if len(arr) < 2:\n        return True\n\n    is_increasing = arr[0] <= arr[1]\n    for i in range(1, len(arr) - 1):\n        if (arr[i] <= arr[i + 1] and is_increasing) or (arr[i] >= arr[i + 1] and not is_increasing):\n            is_increasing = not is_increasing\n        else:\n            return False\n    return True\n\n\ndef main():\n    print(is_monotonic([1, 2, 3, 4, 5]))\n    print(is_monotonic([1, 2, 3, 4, 5, 4, 3, 2, 1]))\n    print(is_monotonic([1, 1, 1, 1]))\n    print(is_monotonic([1, 2, 4, 5, 6, 7, 8, 9, 10]))\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 58,
      "score": 8.0,
      "candidate": "def is_monotonic(arr):\n    for i in range(len(arr)-1):\n        if arr[i] > arr[i+1]:\n            return False\n    return True\n\nprint(is_monotonic([1,2,3,4]))\nprint(is_monotonic([1,2,3,3]))\nprint(is_monotonic([1,2,3,4,5]))\nprint(is_monotonic([1,2,2,4,5]))"
    },
    {
      "rank": 59,
      "score": 8.0,
      "candidate": "def is_monotonic(arr):\n    if len(arr) == 1:\n        return True\n    if len(arr) == 2:\n        return True\n\n    inc = 0\n    dec = 0\n    for i in range(len(arr) - 1):\n        if arr[i] < arr[i + 1]:\n            inc += 1\n        if arr[i] > arr[i + 1]:\n            dec += 1\n\n    if inc == len(arr) - 1 or dec == len(arr) - 1:\n        return True\n    else:\n        return False\n\n\nprint(is_monotonic([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\nprint(is_monotonic([1, 2, 3, 4, 5, 6, 7, 8, 10, 9]))\nprint(is_monotonic([1, 2, 3, 4, 5, 6, 7, 8, 9, 9]))\nprint(is_monotonic([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))"
    },
    {
      "rank": 60,
      "score": 8.0,
      "candidate": "def is_monotonic(arr):\n    if arr[0] > arr[-1]:\n        return False\n    for i in range(1, len(arr)):\n        if arr[i] < arr[i - 1]:\n            return False\n    return True\n\nprint(is_monotonic([6, 5, 4, 4]))\nprint(is_monotonic([1, 1, 1, 2]))"
    },
    {
      "rank": 61,
      "score": 8.0,
      "candidate": "from typing import List\n\n\ndef is_monotonic(numbers: List[int]) -> bool:\n    \"\"\"\n    Time Complexity: O(n)\n    \"\"\"\n    if len(numbers) < 2:\n        return True\n\n    if numbers[0] < numbers[-1]:\n        for i in range(len(numbers) - 1):\n            if numbers[i] > numbers[i + 1]:\n                return False\n    else:\n        for i in range(len(numbers) - 1):\n            if numbers[i] < numbers[i + 1]:\n                return False\n\n    return True\n\n\nif __name__ == \"__main__\":\n    assert is_monotonic([1, 2, 2, 3, 4, 5, 5, 6]) is True\n    assert is_monotonic([6, 5, 5, 4, 3, 2, 2, 1]) is True\n    assert is_monotonic([1, 2, 3, 4, 5, 6]) is True\n    assert is_monotonic([1, 2, 3, 4, 5, 6, 7]) is True\n    assert is_monotonic([6, 5, 4, 3, 2, 1]) is True\n    assert is_monotonic([1, 2, 4, 3]) is False\n    assert is_monotonic([1, 1, 2, 3, 3, 4, 5, 5, 6, 6]) is True\n    assert is_monotonic([1, 2, 3, 4, 3, 2, 1]) is False"
    },
    {
      "rank": 62,
      "score": 7.0,
      "candidate": "from typing import List\n\n\ndef check_monotonic(arr: List[int]) -> bool:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(1)\n    \"\"\"\n\n    if len(arr) < 3:\n        return True\n\n    is_monotonic: bool = True\n\n    direction: int = arr[1] - arr[0]\n\n    for i in range(1, len(arr) - 1):\n        if arr[i + 1] - arr[i] > 0 and direction < 0:\n            is_monotonic = False\n            break\n        if arr[i + 1] - arr[i] < 0 and direction > 0:\n            is_monotonic = False\n            break\n        direction = arr[i + 1] - arr[i]\n\n    return is_monotonic\n\n\nif __name__ == \"__main__\":\n    print(check_monotonic([1, 2, 3, 4]))\n    print(check_monotonic([4, 3, 2, 1]))\n    print(check_monotonic([1, 2, 2, 4]))\n    print(check_monotonic([1, 2, 3, 4, 5]))\n    print(check_monotonic([1, 2, 2, 3, 4, 5]))"
    },
    {
      "rank": 63,
      "score": 7.0,
      "candidate": "def is_monotonic(arr):\n    if len(arr) < 2:\n        return True\n\n    is_asc = arr[0] <= arr[1]\n    for i in range(1, len(arr) - 1):\n        if (is_asc and arr[i] <= arr[i + 1]) or (not is_asc and arr[i] >= arr[i + 1]):\n            continue\n        return False\n\n    return True\n\n\ndef main():\n    print(is_monotonic([1, 2, 2, 3, 3, 4, 5]))\n    print(is_monotonic([1, 2, 3, 4, 5, 5]))\n    print(is_monotonic([5, 4, 3, 3, 2, 1]))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 64,
      "score": 1.0,
      "candidate": "def is_monotonic(array):\n    if array[0] > array[1]:\n        return False\n\n    for i in range(len(array)-1):\n        if array[i] > array[i+1]:\n            return False\n    return True\n\n\nprint(is_monotonic([1, 2, 3, 4, 5, 6, 7, 8]))\nprint(is_monotonic([1, 2, 3, 4, 5, 4, 3, 2, 1]))"
    },
    {
      "rank": 65,
      "score": 1.0,
      "candidate": "def is_monotonic(arr):\n    \"\"\"\n    :param: arr - input array\n    TODO: complete this function\n    \"\"\"\n    if len(arr) <= 2:\n        return True\n\n    increasing = arr[1] > arr[0]\n    for i in range(2, len(arr)):\n        if (increasing and arr[i] < arr[i-1]) or (not increasing and arr[i] > arr[i-1]):\n            return False\n\n    return True\n\ndef main():\n    assert is_monotonic([1, 2, 2, 3]) == True\n    assert is_monotonic([6, 5, 4, 4]) == False\n    assert is_monotonic([1, 1, 1, 1]) == True\n    assert is_monotonic([1, 2, 3, 4, 5]) == True\n    assert is_monotonic([10, 9, 8, 7, 6]) == False\n    assert is_monotonic([1, 1, 1, 2, 2]) == False\n    assert is_monotonic([5, 4, 3, 2, 1]) == False\n    assert is_monotonic([1, 2, 3, 4, 5, 4]) == False\n    assert is_monotonic([1, 2, 3, 4, 3, 2, 1]) == False\n    print(\"All test cases passed. YAY!\")\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 66,
      "score": 1.0,
      "candidate": "from typing import List\n\n\ndef is_monotonic(arr: List[int]) -> bool:\n    \"\"\"\n    time complexity: O(n)\n    space complexity: O(1)\n    \"\"\"\n    if len(arr) < 2:\n        return True\n\n    # check monotonic increasing\n    for i in range(1, len(arr)):\n        if arr[i] < arr[i - 1]:\n            return False\n\n    # check monotonic decreasing\n    for i in range(1, len(arr)):\n        if arr[i] > arr[i - 1]:\n            return False\n\n    return True\n\n\ndef test():\n    arr = [1, 2, 2, 3, 4, 5]\n    assert is_monotonic(arr) == True\n    arr = [6, 5, 4, 3, 2, 1]\n    assert is_monotonic(arr) == True\n    arr = [1, 2, 3, 4, 5, 6]\n    assert is_monotonic(arr) == True\n    arr = [1, 2, 4, 5, 6]\n    assert is_monotonic(arr) == False\n    arr = [1, 3, 4, 5, 6]\n    assert is_monotonic(arr) == False\n\n\nif __name__ == '__main__':\n    test()"
    },
    {
      "rank": 67,
      "score": 1.0,
      "candidate": "def is_monotonic(arr):\n    # check if the array is sorted\n    if arr == sorted(arr):\n        return True\n    # check if the array is descending\n    elif arr == sorted(arr, reverse=True):\n        return True\n    return False\n\n\ndef main():\n    print(is_monotonic([1, 2, 2, 3, 4, 5, 6]))\n    print(is_monotonic([6, 5, 4, 3, 2, 1]))\n    print(is_monotonic([1, 2, 3, 4, 5]))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 68,
      "score": 1.0,
      "candidate": "def is_monotonic(arr):\n    return (arr == sorted(arr)) or (arr == sorted(arr, reverse=True))\n\ndef main():\n    arr = [1, 2, 2, 3, 4, 5]\n    print(\"Is the given array is monotonic or not: \", is_monotonic(arr))\n\n    arr = [6, 5, 3, 2, 1]\n    print(\"Is the given array is monotonic or not: \", is_monotonic(arr))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 69,
      "score": 1.0,
      "candidate": "from typing import List\n\n\ndef is_monotonic(arr: List) -> bool:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(1)\n    \"\"\"\n    if len(arr) <= 2:\n        return True\n\n    flag = True\n\n    for i in range(1, len(arr)):\n        if arr[i - 1] < arr[i]:\n            flag = True\n        elif arr[i - 1] > arr[i]:\n            flag = False\n\n    return flag\n\n\nif __name__ == \"__main__\":\n    assert is_monotonic([1, 2, 2, 3, 3, 4, 7, 8]) == True\n    assert is_monotonic([1, 2, 3, 3, 4, 5, 7, 8]) == True\n    assert is_monotonic([1, 2, 3, 3, 4, 5, 6, 8]) == False\n    assert is_monotonic([1, 2, 3, 4, 5, 6, 7, 7]) == True\n    assert is_monotonic([1, 2, 3, 4, 5, 6, 7, 6]) == False"
    },
    {
      "rank": 70,
      "score": 1.0,
      "candidate": "from typing import List\n\n\ndef is_monotonic(arr: List[int]) -> bool:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(1)\n    \"\"\"\n    if len(arr) <= 2:\n        return True\n\n    is_increasing = arr[1] >= arr[0]\n    for i in range(2, len(arr)):\n        if is_increasing:\n            if arr[i] < arr[i - 1]:\n                return False\n        else:\n            if arr[i] > arr[i - 1]:\n                return False\n    return True\n\n\nif __name__ == \"__main__\":\n    print(is_monotonic([1, 2, 3, 4, 5]))  # True\n    print(is_monotonic([1, 2, 3, 4, 4]))  # False\n    print(is_monotonic([1, 2, 3, 4, 5, 5]))  # True\n    print(is_monotonic([1, 2, 3, 4, 5, 4]))  # False"
    },
    {
      "rank": 71,
      "score": 1.0,
      "candidate": "def is_monotonic(arr):\n    return arr == sorted(arr) or arr == sorted(arr, reverse=True)\n\ndef main():\n    print(\"Is the given array monotonic? \" + str(is_monotonic([1, 2, 2, 3, 3, 4, 7, 8, 8])))\n    print(\"Is the given array monotonic? \" + str(is_monotonic([1, 1, 2, 3, 5, 8, 8, 15])))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 72,
      "score": 1.0,
      "candidate": "from typing import List\n\n\ndef is_monotonic(arr: List[int]) -> bool:\n    \"\"\"\n    Time Complexity: O(n)\n    \"\"\"\n    is_monotonic_list = [arr[0]]\n\n    for i in range(1, len(arr)):\n        if arr[i] == is_monotonic_list[-1]:\n            is_monotonic_list.append(arr[i])\n        elif arr[i] > is_monotonic_list[-1]:\n            is_monotonic_list.append(arr[i])\n        else:\n            return False\n    return True\n\n\nif __name__ == \"__main__\":\n    assert is_monotonic([1, 2, 2, 3, 4, 5]) == True\n    assert is_monotonic([6, 5, 3, 2, 1]) == False"
    },
    {
      "rank": 73,
      "score": 1.0,
      "candidate": "def is_monotonic(arr: list) -> bool:\n    return all(arr[i] <= arr[i + 1] for i in range(len(arr) - 1)) or all(\n        arr[i] >= arr[i + 1] for i in range(len(arr) - 1)\n    )\n\n\ndef main():\n    print(is_monotonic([1, 2, 2, 3]))\n    print(is_monotonic([6, 5, 3, 2, 1]))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 74,
      "score": 1.0,
      "candidate": "def is_monotonic(arr):\n    return all(arr[i] <= arr[i+1] for i in range(len(arr) - 1)) or all(arr[i] >= arr[i+1] for i in range(len(arr) - 1))\n\n\ndef main():\n    print(\"Is the array monotonic? \" + str(is_monotonic([1, 2, 3, 4, 5])))\n    print(\"Is the array monotonic? \" + str(is_monotonic([1, 1, 2, 3, 5])))\n    print(\"Is the array monotonic? \" + str(is_monotonic([1, 2, 3, 3, 5])))\n    print(\"Is the array monotonic? \" + str(is_monotonic([1, 2, 3, 4, 5, 6])))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 75,
      "score": 1.0,
      "candidate": "def is_monotonic(arr: list) -> bool:\n    \"\"\"\n    :param arr: list of integers\n    :return: bool\n    \"\"\"\n    if len(arr) <= 2:\n        return True\n    if arr[0] <= arr[-1]:\n        for i in range(len(arr) - 1):\n            if arr[i] > arr[i + 1]:\n                return False\n        return True\n    else:\n        for i in range(len(arr) - 1):\n            if arr[i] < arr[i + 1]:\n                return False\n        return True\n\n\nif __name__ == \"__main__\":\n    assert is_monotonic([1, 2, 2, 3, 5]) is True\n    assert is_monotonic([1, 1, 2, 3, 5]) is True\n    assert is_monotonic([1, 1, 2, 2, 5]) is True\n    assert is_monotonic([1, 2, 3, 4, 5]) is True\n    assert is_monotonic([1, 2, 3, 4, 4]) is True\n    assert is_monotonic([1, 2, 3, 4, 3]) is False\n    assert is_monotonic([1, 2, 3, 4, 5, 5]) is True\n    assert is_monotonic([1, 2, 3, 4, 6, 5]) is False"
    },
    {
      "rank": 76,
      "score": 1.0,
      "candidate": "def is_monotonic(arr):\n    return all(arr[i] <= arr[i+1] for i in range(len(arr)-1)) or all(arr[i] >= arr[i+1] for i in range(len(arr)-1))\n\n\ndef main():\n    print(\"Is the array is monotonic? - \", is_monotonic([1, 2, 2, 3, 4, 5]))\n    print(\"Is the array is monotonic? - \", is_monotonic([1, 1, 2, 3, 4, 5]))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 77,
      "score": 1.0,
      "candidate": "def check_monotonic(arr: list) -> bool:\n    \"\"\"\n    check monotonicity of the array\n    \"\"\"\n    if len(arr) == 1:\n        return True\n\n    if arr[0] < arr[1]:\n        for i in range(1, len(arr)):\n            if arr[i] < arr[i-1]:\n                return False\n    else:\n        for i in range(1, len(arr)):\n            if arr[i] > arr[i-1]:\n                return False\n    return True\n\n\nif __name__ == \"__main__\":\n    assert check_monotonic([1, 2, 3, 4, 5])\n    assert not check_monotonic([1, 2, 4, 3, 5])\n    assert check_monotonic([1, 1, 1, 1, 1])\n    assert not check_monotonic([1, 1, 2, 3, 4])\n    assert check_monotonic([5, 4, 3, 2, 1])"
    },
    {
      "rank": 78,
      "score": 1.0,
      "candidate": "from typing import List\n\n\ndef is_monotonic(arr: List[int]) -> bool:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(1)\n    \"\"\"\n    if len(arr) == 1:\n        return True\n\n    increasing = arr[0] <= arr[1]\n    for i in range(1, len(arr) - 1):\n        if increasing and arr[i] > arr[i + 1]:\n            return False\n        elif not increasing and arr[i] < arr[i + 1]:\n            return False\n\n    return True\n\n\nif __name__ == \"__main__\":\n    assert is_monotonic([1, 2, 2, 3]) == True\n    assert is_monotonic([6, 5, 4, 4]) == False\n    assert is_monotonic([1, 1, 1]) == True"
    },
    {
      "rank": 79,
      "score": 1.0,
      "candidate": "def is_monotonic(array):\n    return array == sorted(array) or array == sorted(array, reverse=True)\n\n\ndef test_is_monotonic():\n    assert is_monotonic([1, 2, 3]) == True\n    assert is_monotonic([6, 5, 4, 4]) == False\n    assert is_monotonic([1, 1, 1]) == True\n    assert is_monotonic([1, 2, 4, 5, 6, 7]) == True\n    assert is_monotonic([14, 10, 9, 12, 11, 15]) == False\n    assert is_monotonic([1, 1, 1, 0]) == False\n    assert is_monotonic([0, 1, 2, 3, 4, 5]) == True\n    assert is_monotonic([5, 4, 3, 2, 1, 0]) == False\n    assert is_monotonic([0, 1, 2, 3, 2, 1]) == False\n    assert is_monotonic([1, 2, 3, 4, 5, 4]) == False\n    assert is_monotonic([1, 2, 3, 4, 5, 4, 3, 2, 1]) == False\n    assert is_monotonic([1, 2, 3, 4, 5, 4, 3, 2, 1, 2, 3, 4, 5, 4, 3, 2, 1]) == False\n    assert is_monotonic([1, 1, 2, 3, 4, 5]) == True\n    assert is_monotonic([1, 1, 2, 3, 4, 5, 4, 3, 2, 1]) == True\n    assert is_monotonic([1, 2, 3, 4, 5, 6]) == True\n    assert is_monotonic([1, 2, 3, 4,"
    },
    {
      "rank": 80,
      "score": 1.0,
      "candidate": "def is_monotonic(arr):\n    if len(arr) <= 1:\n        return True\n    increasing = arr[0] < arr[1]\n    for i in range(len(arr) - 1):\n        if increasing and arr[i] > arr[i + 1]:\n            return False\n        elif not increasing and arr[i] < arr[i + 1]:\n            return False\n    return True\n\n\ndef main():\n    print(\"Is the given array is monotonic or not: \" +\n          str(is_monotonic([1, 2, 3, 4, 5])))\n    print(\"Is the given array is monotonic or not: \" +\n          str(is_monotonic([1, 2, 3, 4, 5, 4, 3, 2, 1])))\n    print(\"Is the given array is monotonic or not: \" +\n          str(is_monotonic([10, 2, 3, 4, 5, 4, 3, 2, 10])))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 81,
      "score": 1.0,
      "candidate": "def check_monotonic(arr):\n    if len(arr) <= 1:\n        return True\n    if arr[0] < arr[-1]:\n        for i in range(len(arr) - 1):\n            if arr[i] > arr[i + 1]:\n                return False\n    elif arr[0] > arr[-1]:\n        for i in range(len(arr) - 1):\n            if arr[i] < arr[i + 1]:\n                return False\n    return True\n\n\ndef main():\n    print(check_monotonic([1, 2, 2, 3, 4, 5, 6, 7, 8, 9]))\n    print(check_monotonic([1, 2, 3, 4, 5, 6, 7, 8, 9, 9]))\n    print(check_monotonic([1, 2, 3, 4, 5, 3, 2, 1]))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 82,
      "score": 1.0,
      "candidate": "def is_monotonic(arr):\n    flag = False\n    if len(arr) == 1:\n        flag = True\n    else:\n        for i in range(len(arr) - 1):\n            if arr[i] < arr[i + 1]:\n                flag = True\n            elif arr[i] > arr[i + 1]:\n                flag = False\n                break\n    return flag\n\n\ndef is_monotonic_two(arr):\n    flag = True\n    if len(arr) == 1:\n        flag = True\n    else:\n        for i in range(len(arr) - 1):\n            if arr[i] < arr[i + 1]:\n                flag = True\n            elif arr[i] > arr[i + 1]:\n                flag = False\n                break\n    return flag\n\n\ndef main():\n    arr1 = [1, 2, 3, 4, 5]\n    arr2 = [1, 2, 3, 4, 4]\n    arr3 = [1, 2, 2, 4, 5]\n    arr4 = [5, 4, 3, 2, 1]\n    arr5 = [1, 1, 1, 1, 1]\n    arr6 = [1, 2, 3, 2, 3]\n    arr7 = [1, 2, 3, 4, 5, 6]\n    arr8 = [1, 2, 2, 4, 4]\n    arr9 = [1, 2, 2, 4, 5, 6]\n    arr10 = [1, 2, 3, 4, 5, 6, 7]\n    print(is_monotonic(arr1))\n    print(is_monotonic(arr2))\n    print(is_monotonic(arr3))\n    print(is_monotonic(arr4))\n    print(is_monotonic(arr5))\n    print(is_monotonic(arr6))\n    print(is_monotonic(arr7))\n    print"
    },
    {
      "rank": 83,
      "score": 1.0,
      "candidate": "def is_monotonic(arr: list) -> bool:\n    \"\"\"\n    Time Complexity: O(n)\n    \"\"\"\n\n    if len(arr) <= 1:\n        return True\n\n    prev = arr[0]\n\n    for num in arr[1:]:\n        if prev > num:\n            return False\n        prev = num\n\n    return True\n\n\nif __name__ == \"__main__\":\n    assert is_monotonic([1, 2, 3, 4, 5]) == True\n    assert is_monotonic([1, 2, 2, 3, 5]) == True\n    assert is_monotonic([1, 2, 3, 3, 5]) == True\n    assert is_monotonic([1, 2, 3, 4, 4]) == True\n    assert is_monotonic([1, 2, 3, 4, 3]) == False\n    assert is_monotonic([1, 2, 3, 2, 5]) == False"
    },
    {
      "rank": 84,
      "score": 1.0,
      "candidate": "def is_monotonic(arr):\n    \"\"\"\n    :param arr: list - a list of integers\n    :return: bool - if the array is monotonic, return true, else return false\n    \"\"\"\n    # If the array has more than 1 element\n    if len(arr) > 1:\n        # Check if the array is monotonic increasing\n        if arr == sorted(arr):\n            return True\n        # Check if the array is monotonic decreasing\n        elif arr == sorted(arr)[::-1]:\n            return True\n    # If the array has less than 2 elements, it's monotonic\n    elif len(arr) == 1:\n        return True\n    # If the array is monotonic and has 2 elements\n    elif len(arr) == 2:\n        return True\n    else:\n        return False\n\n\nprint(is_monotonic([1, 2, 3, 4, 5]))\nprint(is_monotonic([6, 5, 4, 3, 2, 1]))\nprint(is_monotonic([1, 1, 1, 1, 1]))\nprint(is_monotonic([1, 2, 3, 4, 5, 4, 3, 2, 1]))\nprint(is_monotonic([1, 2, 3, 4, 5, 4]))\nprint(is_monotonic([1, 1, 1, 2, 3, 4, 5, 5, 5, 5]))\nprint(is_monotonic([-1, -2, -3, -4, -5, -4]))"
    },
    {
      "rank": 85,
      "score": 1.0,
      "candidate": "def monotonic(arr: list) -> bool:\n    \"\"\"\n    time complexity: O(n)\n    space complexity: O(1)\n    \"\"\"\n\n    # if array length is 1, it is monotonic\n    if len(arr) == 1:\n        return True\n\n    # check whether array is monotonic\n    is_monotonic: bool = True\n\n    # compare array with its reverse\n    for i in range(len(arr)):\n        if i == len(arr) - 1:\n            break\n\n        if arr[i] > arr[i + 1]:\n            is_monotonic = False\n            break\n\n    return is_monotonic\n\n\nif __name__ == \"__main__\":\n    assert monotonic([1, 2, 2, 3, 4, 5]) == True\n    assert monotonic([1, 2, 3, 4, 5]) == True\n    assert monotonic([5, 4, 3, 2, 1]) == False\n    assert monotonic([5, 4, 4, 3, 2, 1]) == False\n    assert monotonic([1, 2, 3, 4, 5, 4]) == False"
    },
    {
      "rank": 86,
      "score": 1.0,
      "candidate": "from typing import List\n\n\ndef is_monotonic(arr: List[int]) -> bool:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(1)\n    \"\"\"\n\n    if len(arr) == 1:\n        return True\n\n    if len(arr) == 2:\n        return arr[0] == arr[1]\n\n    is_increasing: bool = arr[0] <= arr[1]\n\n    for i in range(1, len(arr) - 1):\n        if (is_increasing and arr[i] > arr[i + 1]) or (not is_increasing and arr[i] < arr[i + 1]):\n            return False\n\n    return True\n\n\nif __name__ == \"__main__\":\n    assert is_monotonic([1, 2, 2, 3, 5, 10, 11, 12, 13, 15, 17, 18, 19, 21, 22, 23, 24, 25]) == True\n    assert is_monotonic([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25]) == True\n    assert is_monotonic([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26]) == False\n    assert is_monotonic([1, 2, 3, 4, 5, 6, 7, 8, 9,"
    },
    {
      "rank": 87,
      "score": 1.0,
      "candidate": "def is_monotonic(arr: list) -> bool:\n    \"\"\"\n    Time Complexity: O(n)\n    \"\"\"\n    is_increasing = arr[0] <= arr[-1]\n    for i in range(len(arr) - 1):\n        if is_increasing:\n            if arr[i + 1] < arr[i]:\n                return False\n        else:\n            if arr[i + 1] > arr[i]:\n                return False\n    return True\n\n\ndef is_monotonic_two_pointer(arr: list) -> bool:\n    \"\"\"\n    Time Complexity: O(n)\n    \"\"\"\n    is_increasing = arr[0] <= arr[-1]\n    slow, fast = 0, 1\n    while fast < len(arr):\n        if is_increasing:\n            if arr[fast] < arr[slow]:\n                return False\n        else:\n            if arr[fast] > arr[slow]:\n                return False\n        slow += 1\n        fast += 1\n    return True\n\n\ndef is_monotonic_in_place(arr: list) -> bool:\n    \"\"\"\n    Time Complexity: O(n)\n    \"\"\"\n    is_increasing = arr[0] <= arr[-1]\n    while arr and len(arr) > 1:\n        if is_increasing:\n            if arr.pop(0) > arr[0]:\n                return False\n        else:\n            if arr.pop(0) < arr[0]:\n                return False\n    return True\n\n\nif __name__ == \"__main__\":\n    assert is_monotonic([1, 2, 3, 4, 5]) == True\n    assert is_monotonic([1, 2, 3, 4, 5, 4, 3, 2, 1]) == True\n    assert is_monotonic([1, 2, 3, 4, 5, 4, 3, 2, 1, 2]) == False\n    assert is_monotonic([1, 2, 3, 4, 5,"
    },
    {
      "rank": 88,
      "score": 1.0,
      "candidate": "def is_monotonic(arr):\n    arr.sort()\n    return arr == list(arr)\n\n\nprint(is_monotonic([1,2,3]))\nprint(is_monotonic([6,5,4,4]))\nprint(is_monotonic([1,3,2]))\nprint(is_monotonic([1,2,4,5]))\nprint(is_monotonic([2,3,2]))\nprint(is_monotonic([1,1,1]))"
    },
    {
      "rank": 89,
      "score": 1.0,
      "candidate": "def is_monotonic(array):\n    if len(array) == 1:\n        return True\n    elif len(array) == 2:\n        return array[0] == array[1]\n    else:\n        diff = array[1] - array[0]\n        for i in range(1, len(array) - 1):\n            if array[i + 1] - array[i] != diff:\n                return False\n        return True\n\n\nprint(is_monotonic([1, 2, 3, 4, 5, 6, 7, 8]))\nprint(is_monotonic([1, 2, 3, 4, 5, 6, 7, 5]))"
    },
    {
      "rank": 90,
      "score": 1.0,
      "candidate": "from typing import List\n\n\ndef is_monotonic(arr: List) -> bool:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(1)\n    \"\"\"\n\n    if len(arr) == 1:\n        return True\n\n    incr = 0\n    decr = 0\n    for i in range(len(arr) - 1):\n        if arr[i] < arr[i + 1]:\n            incr += 1\n        if arr[i] > arr[i + 1]:\n            decr += 1\n\n    return incr == len(arr) - 1 or decr == len(arr) - 1\n\n\nif __name__ == \"__main__\":\n    assert is_monotonic([1, 2, 3, 4]) == True\n    assert is_monotonic([1, 2, 3, 2]) == False\n    assert is_monotonic([1, 2, 2, 3]) == False\n    assert is_monotonic([1, 2, 3, 3, 4, 5]) == True\n    assert is_monotonic([5, 4, 3, 2, 1]) == True\n    assert is_monotonic([5, 4, 3, 2, 1, 2]) == False"
    },
    {
      "rank": 91,
      "score": 1.0,
      "candidate": "def is_monotonic(array):\n    if array == sorted(array):\n        return True\n    elif array == sorted(array, reverse=True):\n        return True\n    return False\n\n\ndef main():\n    array1 = [1, 2, 2, 3, 5, 6]\n    array2 = [1, 1, 2, 2, 3, 5, 6]\n    array3 = [1, 2, 3, 4, 5, 6, 7]\n    array4 = [1, 2, 3, 4, 5, 4, 3, 2, 1]\n    array5 = [1, 2, 3, 4, 5, 6, 7, 8]\n    array6 = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    print(\"Array 1 is monotonic: \", is_monotonic(array1))\n    print(\"Array 2 is monotonic: \", is_monotonic(array2))\n    print(\"Array 3 is monotonic: \", is_monotonic(array3))\n    print(\"Array 4 is monotonic: \", is_monotonic(array4))\n    print(\"Array 5 is monotonic: \", is_monotonic(array5))\n    print(\"Array 6 is monotonic: \", is_monotonic(array6))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 92,
      "score": 1.0,
      "candidate": "def is_monotonic(arr):\n    if len(arr) == 1:\n        return True\n    else:\n        # Check if all elements are same\n        if len(set(arr)) == 1:\n            return True\n\n        # Check if array is already monotonic\n        if arr[0] <= arr[1]:\n            for i in range(1, len(arr)):\n                if arr[i-1] > arr[i]:\n                    return False\n            return True\n        else:\n            for i in range(1, len(arr)):\n                if arr[i-1] < arr[i]:\n                    return False\n            return True\n\n\nif __name__ == \"__main__\":\n    data = [\n            [[1, 2, 2, 3], True],\n            [[6, 5, 3, 4, 1], True],\n            [[1, 1, 1, 1], True],\n            [[1, 2, 3, 4], True],\n            [[1, 3, 2, 4], False],\n            [[1, 2, 4, 5], False],\n            [[1, 1], True],\n            [[1], True],\n            [[2, 2], True],\n            [None, False]\n    ]\n    for d in data:\n        print('is_monotonic({}) == {}'.format(d[0], d[1]))\n        result = is_monotonic(d[0])\n        if result == d[1]:\n            print('is_monotonic({}) returned {}'.format(d[0], result))\n            print('Test PASSED')\n        else:\n            print('Test FAILED')"
    },
    {
      "rank": 93,
      "score": 1.0,
      "candidate": "from typing import List\n\n\ndef is_monotonic(arr: List) -> bool:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(1)\n    \"\"\"\n    if len(arr) <= 1:\n        return True\n\n    direction: int = arr[1] - arr[0]\n\n    for i in range(1, len(arr)):\n        if direction == 0:\n            direction = arr[i] - arr[i - 1]\n        elif direction > 0 and arr[i] < arr[i - 1]:\n            return False\n        elif direction < 0 and arr[i] > arr[i - 1]:\n            return False\n\n    return True\n\n\nif __name__ == \"__main__\":\n    print(is_monotonic([1, 2, 2, 3, 5]))\n    print(is_monotonic([1, 2, 3, 4, 5]))\n    print(is_monotonic([5, 4, 3, 2, 1]))\n    print(is_monotonic([1, 2, 3, 4, 5, 6]))"
    },
    {
      "rank": 94,
      "score": 1.0,
      "candidate": "def is_monotonic(arr):\n    \"\"\"\n    :param: arr - input list\n    return a tuple (boolean, string) where boolean is true if array is monotonic\n    and string is either 'increasing' or 'decreasing' depending on the array.\n    \"\"\"\n    if len(arr) == 1:\n        return (True, 'increasing')\n\n    is_increasing = True\n    for i in range(1, len(arr)):\n        if arr[i] < arr[i - 1]:\n            is_increasing = False\n\n    return (is_increasing, 'increasing' if is_increasing else 'decreasing')\n\nprint(is_monotonic([1, 2, 2, 3]))\nprint(is_monotonic([6, 5, 4, 4]))\nprint(is_monotonic([1, 1, 1, 1]))\nprint(is_monotonic([1, 2, 3, 4]))\nprint(is_monotonic([23, 34, 12, 10, 19, 9, 8, 10, 12]))"
    },
    {
      "rank": 95,
      "score": 1.0,
      "candidate": "def is_monotonic(arr):\n    if len(arr) <= 2:\n        return True\n\n    if arr[1] < arr[0]:\n        is_increasing = False\n    else:\n        is_increasing = True\n\n    for i in range(2, len(arr)):\n        if is_increasing:\n            if arr[i] < arr[i-1]:\n                return False\n        else:\n            if arr[i] > arr[i-1]:\n                return False\n\n    return True\n\n\ndef main():\n    print(is_monotonic([1, 2, 3, 4, 5]))  # T\n    print(is_monotonic([1, 2, 2, 3, 5]))  # T\n    print(is_monotonic([1, 1, 2, 3, 5]))  # F\n    print(is_monotonic([1, 2, 3, 4, 5, 4]))  # F\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 96,
      "score": 1.0,
      "candidate": "def is_monotonic(arr):\n    if arr == sorted(arr):\n        return True\n    else:\n        return False\n\n\ndef is_monotonic2(arr):\n    if arr == sorted(arr):\n        return True\n    else:\n        return False\n\n\ndef is_monotonic3(arr):\n    return all(arr[i] <= arr[i+1] for i in range(len(arr)-1)) or all(arr[i] >= arr[i+1] for i in range(len(arr)-1))\n\n\nprint(is_monotonic([1, 2, 3, 4, 5]))\nprint(is_monotonic([1, 2, 3, 4, 5, 4, 3, 2, 1]))\nprint(is_monotonic([1, 1, 1, 1, 1]))\nprint(is_monotonic([1, 2, 3, 4, 5, 4, 3, 2, 1, 2]))"
    },
    {
      "rank": 97,
      "score": 1.0,
      "candidate": "def is_monotonic(arr):\n    # Check if array is empty\n    if len(arr) == 0:\n        return False\n\n    # If array has only one element, return True\n    if len(arr) == 1:\n        return True\n\n    # Check if array is monotonic or not\n    if (arr[1] - arr[0]) == 0:\n        return True\n\n    monotonic = True\n    for i in range(len(arr) - 1):\n        if arr[i + 1] - arr[i] > 0:\n            monotonic = True\n        else:\n            monotonic = False\n            break\n\n    return monotonic\n\n\ndef main():\n    print(is_monotonic([1, 2, 3, 4, 5]))\n    print(is_monotonic([1, 2, 2, 3, 4, 5]))\n    print(is_monotonic([1, 2, 3, 4, 5, 5]))\n    print(is_monotonic([1, 2, 3, 4, 4, 5]))\n    print(is_monotonic([1, 2, 3, 4, 3, 5]))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 98,
      "score": 1.0,
      "candidate": "from typing import List\n\n\ndef is_monotonic(arr: List[int]) -> bool:\n    \"\"\"\n    time complexity: O(n)\n    space complexity: O(1)\n    \"\"\"\n    if not arr:\n        return False\n    \n    flag: bool = arr[0] > arr[1]\n\n    for i in range(1, len(arr)):\n        if flag:\n            if arr[i] < arr[i - 1]:\n                return False\n        else:\n            if arr[i] > arr[i - 1]:\n                return False\n    \n    return True\n\n\ndef main():\n    print(is_monotonic([1, 2, 3, 4, 5]))  # expected True\n    print(is_monotonic([2, 1, 2, 3, 4, 5]))  # expected False\n    print(is_monotonic([5, 4, 3, 2, 1]))  # expected True\n    print(is_monotonic([5, 4, 3, 2, 1, 1]))  # expected False\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 99,
      "score": 1.0,
      "candidate": "def is_monotonic(arr: list) -> bool:\n    \"\"\"\n    Time Complexity: O(n)\n    \"\"\"\n    if arr == sorted(arr):\n        return True\n    if arr == sorted(arr, reverse=True):\n        return True\n    return False\n\n\nif __name__ == \"__main__\":\n    assert is_monotonic([6, 5, 4, 4]) == True\n    assert is_monotonic([6, 5, 3, 2]) == False"
    },
    {
      "rank": 100,
      "score": 1.0,
      "candidate": "from typing import List\n\n\ndef is_monotonic(arr: List[int]) -> bool:\n    \"\"\"\n    Time Complexity: O(n)\n    \"\"\"\n    if len(arr) <= 2:\n        return True\n\n    if arr[0] <= arr[-1]:\n        for i in range(len(arr) - 1):\n            if arr[i] > arr[i + 1]:\n                return False\n    else:\n        for i in range(len(arr) - 1):\n            if arr[i] < arr[i + 1]:\n                return False\n\n    return True\n\n\nif __name__ == \"__main__\":\n    assert is_monotonic([1, 2, 2, 3, 4, 5]) == True\n    assert is_monotonic([6, 5, 4, 4]) == False"
    }
  ]
}