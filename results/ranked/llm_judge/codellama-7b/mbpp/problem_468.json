{
  "timestamp": "2025-09-15T01:51:05.223878",
  "method": "improved_llm_judge",
  "judge_model": "codellama/CodeLlama-7b-Python-hf",
  "target_model": "codellama-7b",
  "dataset": "mbpp",
  "problem_number": 468,
  "total_candidates": 100,
  "results": [
    {
      "rank": 1,
      "score": 10.0,
      "candidate": "def first_digit(number):\n    return int(str(number)[0])\n\n\ndef main():\n    number = int(input(\"Enter a number: \"))\n    print(first_digit(number))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 2,
      "score": 10.0,
      "candidate": "def first_digit(number):\n    return int(str(number)[0])\n\n\ndef main():\n    number = int(input(\"Enter a number: \"))\n    print(first_digit(number))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 3,
      "score": 10.0,
      "candidate": "def first_digit(number):\n    return int(str(number)[0])\n\n# print(first_digit(123))\n# print(first_digit(12345))\n# print(first_digit(1234567890))\n# print(first_digit(123456789012345678901234567890))"
    },
    {
      "rank": 4,
      "score": 10.0,
      "candidate": "def first_digit(number):\n    return int(str(number)[0])\n\nprint(first_digit(123))"
    },
    {
      "rank": 5,
      "score": 10.0,
      "candidate": "def first_digit(num):\n    return int(str(num)[0])\n\n\nprint(first_digit(456))\nprint(first_digit(123))\nprint(first_digit(1000))"
    },
    {
      "rank": 6,
      "score": 10.0,
      "candidate": "def first_digit(number):\n    for i in str(number):\n        if i.isdigit():\n            return int(i)\n\n\nprint(first_digit(12345))\nprint(first_digit(12345.6789))\nprint(first_digit(\"abc\"))"
    },
    {
      "rank": 7,
      "score": 10.0,
      "candidate": "def first_digit(number: int) -> int:\n    \"\"\"\n    >>> first_digit(123)\n    1\n    >>> first_digit(456)\n    4\n    >>> first_digit(789)\n    7\n    >>> first_digit(-123)\n    1\n    >>> first_digit(-456)\n    4\n    >>> first_digit(-789)\n    7\n    \"\"\"\n    return int(str(abs(number))[0])\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 8,
      "score": 10.0,
      "candidate": "def first_digit(n):\n    # Return the first digit of a number\n    return int(str(n)[0])\n\ndef main():\n    n = input(\"Enter a number: \")\n    print(\"The first digit of the number is: \", first_digit(n))\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 9,
      "score": 10.0,
      "candidate": "def first_digit(num):\n    while num > 0:\n        if num % 10 != 0:\n            return num % 10\n        else:\n            num = num // 10\n    return 0\n\nprint(first_digit(234))\nprint(first_digit(245))\nprint(first_digit(345))"
    },
    {
      "rank": 10,
      "score": 10.0,
      "candidate": "def first_digit(num):\n    return int(str(num)[0])\n\n\nif __name__ == \"__main__\":\n    num = int(input(\"Enter a number: \"))\n    print(first_digit(num))"
    },
    {
      "rank": 11,
      "score": 10.0,
      "candidate": "def first_digit(number):\n    return int(str(number)[0])\n\n\nprint(first_digit(2534))"
    },
    {
      "rank": 12,
      "score": 10.0,
      "candidate": "def first_digit(number):\n    for i in str(number):\n        if i.isdigit():\n            return i\n\nif __name__ == '__main__':\n    print(first_digit(123))\n    print(first_digit(12.3))"
    },
    {
      "rank": 13,
      "score": 10.0,
      "candidate": "def first_digit(num):\n    return int(str(num)[0])\n\nprint(first_digit(12345))\nprint(first_digit(123))\nprint(first_digit(2))\nprint(first_digit(0))\nprint(first_digit(-12345))"
    },
    {
      "rank": 14,
      "score": 10.0,
      "candidate": "def first_digit(number):\n    return int(str(number)[0])\n\n\nif __name__ == \"__main__\":\n    print(first_digit(12345))\n    print(first_digit(12345.6789))\n    print(first_digit(\"12345\"))"
    },
    {
      "rank": 15,
      "score": 10.0,
      "candidate": "def first_digit(num):\n    return int(str(num)[0])\n\nprint(first_digit(123))\nprint(first_digit(234))\nprint(first_digit(345))\nprint(first_digit(456))\nprint(first_digit(567))\nprint(first_digit(678))\nprint(first_digit(789))\nprint(first_digit(890))\nprint(first_digit(901))\nprint(first_digit(012))\nprint(first_digit(1234567890))\n\n\"\"\"\nFirst digit of 123 is 1\nFirst digit of 234 is 2\nFirst digit of 345 is 3\nFirst digit of 456 is 4\nFirst digit of 567 is 5\nFirst digit of 678 is 6\nFirst digit of 789 is 7\nFirst digit of 890 is 8\nFirst digit of 901 is 9\nFirst digit of 012 is 0\nFirst digit of 1234567890 is 1\n\"\"\""
    },
    {
      "rank": 16,
      "score": 9.987819146702616,
      "candidate": "def first_digit(number):\n    for i in str(number):\n        if i.isdigit():\n            return int(i)\n\n\ndef main():\n    number = int(input(\"Enter a number: \"))\n    result = first_digit(number)\n    print(result)\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 17,
      "score": 9.960679583987998,
      "candidate": "def first_digit(num: int) -> int:\n    \"\"\"\n    Return the first digit of a given number\n    >>> first_digit(123)\n    1\n    >>> first_digit(0)\n    0\n    \"\"\"\n    return num % 10\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 18,
      "score": 9.936875947934302,
      "candidate": "def first_digit(number: int) -> int:\n    \"\"\"\n    >>> first_digit(5)\n    5\n    >>> first_digit(100)\n    1\n    >>> first_digit(-100)\n    -1\n    >>> first_digit(0)\n    0\n    >>> first_digit(10)\n    1\n    >>> first_digit(120)\n    1\n    \"\"\"\n    return int(str(number)[0])\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 19,
      "score": 9.92024037465245,
      "candidate": "def first_digit(number: int) -> int:\n    \"\"\"\n    >>> first_digit(123)\n    1\n    >>> first_digit(-123)\n    -1\n    >>> first_digit(0)\n    Traceback (most recent call last):\n        ...\n    ValueError: Number should not be 0\n    \"\"\"\n    if number == 0:\n        raise ValueError(\"Number should not be 0\")\n    return int(str(abs(number))[0])\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 20,
      "score": 9.898337500841604,
      "candidate": "def first_digit(n):\n    while n > 0:\n        if n % 10 != 0:\n            return n % 10\n        else:\n            n //= 10\n\n\ndef main():\n    print(first_digit(12345))\n    print(first_digit(123))\n    print(first_digit(1234))\n    print(first_digit(123456))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 21,
      "score": 9.897624743499641,
      "candidate": "def first_digit(number):\n    \"\"\"Returns the first digit of a number\"\"\"\n    return int(str(number)[0])\n\nprint(first_digit(123))\nprint(first_digit(12345))\nprint(first_digit(1234567))\nprint(first_digit(1234567890))"
    },
    {
      "rank": 22,
      "score": 9.842437984443762,
      "candidate": "def find_first_digit(num):\n    for i in num:\n        if i.isdigit():\n            return i\n\n\nif __name__ == \"__main__\":\n    print(find_first_digit(\"abcd123\"))\n    print(find_first_digit(\"0000\"))\n    print(find_first_digit(\"999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999"
    },
    {
      "rank": 23,
      "score": 9.840378708782117,
      "candidate": "def first_digit(number: int) -> int:\n    \"\"\"\n    >>> first_digit(123)\n    1\n    >>> first_digit(2345)\n    2\n    >>> first_digit(-1234)\n    -1\n    \"\"\"\n    return abs(number) % 10\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 24,
      "score": 9.8370807591326,
      "candidate": "def first_digit(num: int) -> int:\n    \"\"\"\n    >>> first_digit(123)\n    1\n    >>> first_digit(12345)\n    1\n    >>> first_digit(-123)\n    1\n    >>> first_digit(-12345)\n    1\n    >>> first_digit(-1234)\n    -1\n    \"\"\"\n    return int(str(abs(num))[0])\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 25,
      "score": 9.82378812578696,
      "candidate": "def first_digit(number):\n    \"\"\"\n    >>> first_digit(234)\n    2\n    >>> first_digit(222)\n    2\n    >>> first_digit(-123)\n    1\n    >>> first_digit(-0)\n    0\n    >>> first_digit(0)\n    0\n    \"\"\"\n    return int(str(number)[0])\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 26,
      "score": 9.819881530719206,
      "candidate": "def first_digit(number):\n    return int(str(number)[0])\n\n\ndef main():\n    print(first_digit(12345))\n    print(first_digit(12345.67))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 27,
      "score": 9.795419751842005,
      "candidate": "def first_digit(num):\n    return int(str(num)[0])\n\nprint(first_digit(12345))"
    },
    {
      "rank": 28,
      "score": 9.780659283434257,
      "candidate": "def first_digit(number: int) -> int:\n    \"\"\"\n    >>> first_digit(123)\n    1\n    >>> first_digit(32322)\n    3\n    >>> first_digit(123456789)\n    1\n    \"\"\"\n    return int(str(number)[0])\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 29,
      "score": 9.769846519895975,
      "candidate": "def find_first_digit(number):\n    \"\"\"\n    Find the first digit of a number.\n\n    Args:\n       number(int): Number to find the first digit of\n    Returns:\n       int: The firs digit of the number\n    \"\"\"\n\n    return int(str(number)[0])\n\n\n# Test cases\nprint(find_first_digit(12345))\nprint(find_first_digit(123))\nprint(find_first_digit(12))\nprint(find_first_digit(1))\nprint(find_first_digit(0))"
    },
    {
      "rank": 30,
      "score": 9.7613019480817,
      "candidate": "def first_digit(number: int) -> int:\n    return int(str(number)[0])\n\n\ndef main():\n    print(first_digit(123))\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 31,
      "score": 9.608662183676417,
      "candidate": "def first_digit(num):\n    if num < 0:\n        num = -num\n    while num:\n        if num % 10:\n            return num % 10\n        num = num // 10\n    return 0\n\nif __name__ == \"__main__\":\n    print(first_digit(123))\n    print(first_digit(2345))\n    print(first_digit(1230))\n    print(first_digit(10230))"
    },
    {
      "rank": 32,
      "score": 9.515585616687424,
      "candidate": "def first_digit(number: int) -> int:\n    \"\"\"\n    >>> first_digit(123)\n    1\n    >>> first_digit(234)\n    2\n    >>> first_digit(345)\n    3\n    \"\"\"\n    return int(str(number)[0])\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 33,
      "score": 9.349484716816349,
      "candidate": "def first_digit(num):\n    for i in str(num):\n        if i.isdigit():\n            return int(i)\n\nprint(first_digit(1234))\nprint(first_digit(1000000))\nprint(first_digit(10000000000))"
    },
    {
      "rank": 34,
      "score": 9.333712157880877,
      "candidate": "def first_digit(number: int) -> int:\n    \"\"\"\n    >>> first_digit(1234)\n    1\n    >>> first_digit(234)\n    2\n    >>> first_digit(34)\n    3\n    >>> first_digit(4)\n    4\n    \"\"\"\n    return number % 10\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 35,
      "score": 9.139298083267697,
      "candidate": "def first_digit(number: int) -> int:\n    \"\"\"Returns the first digit of a given number.\n\n    Args:\n        number (int): Given number.\n\n    Returns:\n        int: The first digit of a given number.\n    \"\"\"\n    return int(str(number)[0])\n\n\nif __name__ == \"__main__\":\n    assert first_digit(123) == 1\n    assert first_digit(22345) == 2\n    assert first_digit(1234567) == 1"
    },
    {
      "rank": 36,
      "score": 9.132887653002607,
      "candidate": "def first_digit(number):\n    for i in number:\n        if i.isdigit():\n            return i\n\nprint(first_digit(123))\nprint(first_digit(\"123\"))\nprint(first_digit(\"abc\"))"
    },
    {
      "rank": 37,
      "score": 9.114577581263976,
      "candidate": "def first_digit(number):\n    while number > 0:\n        if number % 10 != 0:\n            return number % 10\n        else:\n            number = number // 10\n\n\ndef first_digit_pythonic(number):\n    return int(str(number)[0])\n\n\nprint(first_digit(1234))\nprint(first_digit_pythonic(1234))"
    },
    {
      "rank": 38,
      "score": 9.08932990276993,
      "candidate": "def find_first_digit(number):\n    return int(str(number)[0])\n\ndef main():\n    number = int(input(\"Enter a number: \"))\n    print(\"The first digit of {} is {}\".format(number, find_first_digit(number)))\n    print(\"The first digit of {} is {}\".format(number, find_first_digit(number)))\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 39,
      "score": 9.041190057015607,
      "candidate": "def first_digit(number: int) -> int:\n    \"\"\"\n    >>> first_digit(1234)\n    1\n    \"\"\"\n    if number < 0:\n        return -first_digit(-number)\n    while number > 0:\n        last_digit = number % 10\n        if last_digit != 0:\n            return last_digit\n        number //= 10\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 40,
      "score": 8.854207696855571,
      "candidate": "def first_digit(number: int) -> int:\n    \"\"\"\n    >>> first_digit(123)\n    1\n    >>> first_digit(245)\n    2\n    >>> first_digit(-123)\n    1\n    >>> first_digit(-245)\n    2\n    \"\"\"\n    return int(str(abs(number))[0])\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 41,
      "score": 8.847221376233357,
      "candidate": "def first_digit(num):\n    while num > 0:\n        if num % 10 != 0:\n            return num % 10\n        num = num // 10\n\nnum = 1234\nprint(first_digit(num))"
    },
    {
      "rank": 42,
      "score": 8.806364205769848,
      "candidate": "def first_digit(number):\n    return int(str(number)[0])"
    },
    {
      "rank": 43,
      "score": 8.806081546369542,
      "candidate": "def first_digit(num):\n    for i in num:\n        if i.isdigit():\n            return int(i)\n\n\ndef first_digit_alt(num):\n    return int(str(num)[0])"
    },
    {
      "rank": 44,
      "score": 8.713582011534427,
      "candidate": "def first_digit(number):\n    return int(str(number)[0])\n\nprint(first_digit(245))\nprint(first_digit(5))\nprint(first_digit(100))"
    },
    {
      "rank": 45,
      "score": 8.68317086362227,
      "candidate": "def first_digit(number):\n    for i in str(number):\n        if i.isdigit():\n            return int(i)\n    return 0\n\n\nprint(first_digit(123))\nprint(first_digit(123.456))\nprint(first_digit(\"abc\"))"
    },
    {
      "rank": 46,
      "score": 8.582713270786366,
      "candidate": "def find_first_digit(num):\n    return int(str(num)[0])\n\nif __name__ == \"__main__\":\n    num = int(input(\"Enter a number: \"))\n    print(find_first_digit(num))"
    },
    {
      "rank": 47,
      "score": 8.5509078439335,
      "candidate": "def first_digit(number: int) -> int:\n    \"\"\"Returns the first digit of the number.\"\"\"\n    if number < 0:\n        number = -number\n    if number == 0:\n        return 0\n    while number >= 10:\n        number /= 10\n    return int(number)\n\ndef main():\n    number = int(input(\"Enter a number: \"))\n    print(f\"First digit of {number} is {first_digit(number)}\")\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 48,
      "score": 8.536344426246536,
      "candidate": "def first_digit(number):\n    return int(str(number)[0])\n\nprint(first_digit(123))\nprint(first_digit(1234))\nprint(first_digit(12345))"
    },
    {
      "rank": 49,
      "score": 8.531063388226858,
      "candidate": "def first_digit(num):\n    return int(str(num)[0])\n\n\nprint(first_digit(12345))\nprint(first_digit(123456))"
    },
    {
      "rank": 50,
      "score": 8.493250383916786,
      "candidate": "def first_digit(number):\n    if number < 0:\n        number = -number\n    if number < 10:\n        return number\n    while number >= 10:\n        number = number // 10\n    return number\n\n\nif __name__ == \"__main__\":\n    print(first_digit(100))\n    print(first_digit(-100))\n    print(first_digit(-1000))\n    print(first_digit(-123456))"
    },
    {
      "rank": 51,
      "score": 8.487158566157582,
      "candidate": "def find_first_digit(number):\n    return int(str(number)[0])"
    },
    {
      "rank": 52,
      "score": 8.48274515446924,
      "candidate": "def first_digit(num):\n    return int(str(num)[0])"
    },
    {
      "rank": 53,
      "score": 8.438505665559754,
      "candidate": "def first_digit(number):\n    return int(str(number)[0])\n\n\nif __name__ == \"__main__\":\n    number = int(input(\"Enter a number: \"))\n    print(first_digit(number))"
    },
    {
      "rank": 54,
      "score": 8.412759990949098,
      "candidate": "def first_digit(number):\n    \"\"\"\n    >>> first_digit(12345)\n    1\n    >>> first_digit(-12345)\n    -1\n    >>> first_digit(0)\n    0\n    >>> first_digit(-1)\n    -1\n    \"\"\"\n    return abs(number)%10\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 55,
      "score": 8.347788813795939,
      "candidate": "def first_digit(number):\n    return int(str(number)[0])"
    },
    {
      "rank": 56,
      "score": 8.345102872230369,
      "candidate": "def first_digit(number):\n    return int(str(number)[0])"
    },
    {
      "rank": 57,
      "score": 8.316099194535402,
      "candidate": "def first_digit(number):\n    while number >= 10:\n        number = number // 10\n    return number\n\n\ndef first_digit_2(number):\n    return number % 10\n\n\nprint(first_digit(123))\nprint(first_digit_2(123))"
    },
    {
      "rank": 58,
      "score": 8.30839099906991,
      "candidate": "def find_first_digit(number):\n    for i in number:\n        if i.isdigit():\n            return i\n\n\nnumber = input(\"Enter a number: \")\nprint(find_first_digit(number))"
    },
    {
      "rank": 59,
      "score": 8.300273099941426,
      "candidate": "def first_digit(number: int) -> int:\n    \"\"\"\n    >>> first_digit(123)\n    1\n    >>> first_digit(234)\n    2\n    \"\"\"\n    number = str(number)\n    for i in number:\n        if i.isdigit():\n            return int(i)\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 60,
      "score": 8.275008241061265,
      "candidate": "def find_first_digit(n):\n    return int(str(n)[0])"
    },
    {
      "rank": 61,
      "score": 8.241763385222137,
      "candidate": "def first_digit(number):\n    return int(str(number)[0])\n\nprint(first_digit(123))\nprint(first_digit(10000))\nprint(first_digit(123456))\nprint(first_digit(12345678910))"
    },
    {
      "rank": 62,
      "score": 8.239523352873531,
      "candidate": "def first_digit(number):\n    if number < 0:\n        number *= -1\n    while number > 9:\n        number = number // 10\n    return number\n\ndef first_digit2(number):\n    return number // (10 ** (len(str(number)) - 1))\n\ndef first_digit3(number):\n    for i in str(number):\n        if i.isdigit():\n            return int(i)\n\nprint(first_digit3(123))\nprint(first_digit3(-123))\nprint(first_digit3(1000))\nprint(first_digit3(-1000))"
    },
    {
      "rank": 63,
      "score": 8.223671345267249,
      "candidate": "def first_digit(n):\n    return n % 10\n\nprint(first_digit(123))"
    },
    {
      "rank": 64,
      "score": 8.204916045653365,
      "candidate": "def first_digit(number: int) -> int:\n    \"\"\"\n    >>> first_digit(123)\n    1\n    >>> first_digit(234)\n    2\n    >>> first_digit(345)\n    3\n    \"\"\"\n    return int(str(number)[0])\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 65,
      "score": 8.197037931578416,
      "candidate": "def first_digit(num: int) -> int:\n    return int(str(num)[0])\n\n\ndef main():\n    print(first_digit(12345))\n    print(first_digit(0))\n    print(first_digit(123))\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 66,
      "score": 8.18016342088017,
      "candidate": "def first_digit(num):\n    return int(str(num)[0])\n\nif __name__ == '__main__':\n    print(first_digit(123))\n    print(first_digit(12345))\n    print(first_digit(1234567))"
    },
    {
      "rank": 67,
      "score": 8.088707259171443,
      "candidate": "def first_digit(n):\n    return int(str(n)[0])\n\ndef first_digit_two(n):\n    while n > 0:\n        if n % 10 != 0:\n            return n % 10\n        else:\n            n = n // 10\n\ndef first_digit_three(n):\n    while n > 0:\n        if n % 10 != 0:\n            return n - (n % 10)\n        else:\n            n = n // 10\n\ndef main():\n    num = int(input(\"Enter a number: \"))\n    print(\"First digit of the number is: {}\".format(first_digit(num)))\n    print(\"First digit of the number is: {}\".format(first_digit_two(num)))\n    print(\"First digit of the number is: {}\".format(first_digit_three(num)))\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 68,
      "score": 8.044913851215112,
      "candidate": "def first_digit(num):\n    if num < 10:\n        return num\n    else:\n        return first_digit(num // 10)\n\n\ndef main():\n    num = int(input(\"Enter a number: \"))\n    print(f\"The first digit of {num} is {first_digit(num)}\")\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 69,
      "score": 7.979051635703849,
      "candidate": "def first_digit(number):\n    return int(str(number)[0])\n\n\ndef main():\n    print(first_digit(123))\n    print(first_digit(1234))\n    print(first_digit(12345))\n    print(first_digit(123456))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 70,
      "score": 7.957657055881792,
      "candidate": "def first_digit(number):\n    return int(str(number)[0])\n\nif __name__ == \"__main__\":\n    print(first_digit(23))\n    print(first_digit(123))\n    print(first_digit(234))\n    print(first_digit(1234))"
    },
    {
      "rank": 71,
      "score": 7.91811352984895,
      "candidate": "def find_first_digit(number):\n    for char in str(number):\n        if char.isdigit():\n            return int(char)\n\n\ndef main():\n    number = int(input(\"Enter a number: \"))\n    print(\"The first digit of the number is: {}\".format(find_first_digit(number)))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 72,
      "score": 7.907273238457195,
      "candidate": "def first_digit(number):\n    return int(str(number)[0])\n\nprint(first_digit(12345))\nprint(first_digit(12345.56))"
    },
    {
      "rank": 73,
      "score": 7.860042582929135,
      "candidate": "def first_digit(number):\n    while number >= 10:\n        number = number // 10\n    return number\n\n\nif __name__ == \"__main__\":\n    print(first_digit(123))"
    },
    {
      "rank": 74,
      "score": 7.800497867266312,
      "candidate": "def first_digit(n):\n    if not n:\n        return 0\n    return int(str(n)[0])\n\n\nif __name__ == \"__main__\":\n    print(first_digit(1234))\n    print(first_digit(0))"
    },
    {
      "rank": 75,
      "score": 7.793894768682777,
      "candidate": "def first_digit(number):\n    return number % 10\n\n\nif __name__ == \"__main__\":\n    print(first_digit(12345))"
    },
    {
      "rank": 76,
      "score": 7.668706776084842,
      "candidate": "def first_digit(number):\n    return int(str(number)[0])\n\n# first_digit(32) # 3\n# first_digit(123) # 1\n# first_digit(0) # 0"
    },
    {
      "rank": 77,
      "score": 7.569914122020052,
      "candidate": "def first_digit(number: int) -> int:\n    \"\"\"Returns the first digit of a number.\"\"\"\n    return int(str(number)[0])\n\n\nif __name__ == \"__main__\":\n    print(first_digit(123))\n    print(first_digit(456))\n    print(first_digit(789))"
    },
    {
      "rank": 78,
      "score": 7.291756598644957,
      "candidate": "def first_digit(num):\n    for i in num:\n        if i.isdigit():\n            return i\n\nif __name__ == '__main__':\n    num = input(\"Enter a number: \")\n    print(first_digit(num))\n\n\"\"\"\nOutput:\nEnter a number: 234567\n2\n\"\"\""
    },
    {
      "rank": 79,
      "score": 3.4075012005919665,
      "candidate": "def first_digit(num):\n    return int(str(num)[0])\n\n\nif __name__ == '__main__':\n    first_digit(1234)"
    },
    {
      "rank": 80,
      "score": 3.2325668897681616,
      "candidate": "def find_first_digit(number: int) -> int:\n    \"\"\"\n    This function takes a number and returns the first digit.\n\n    >>> find_first_digit(123)\n    1\n    >>> find_first_digit(1234)\n    1\n    >>> find_first_digit(12345)\n    1\n    >>> find_first_digit(-12345)\n    1\n    >>> find_first_digit(0)\n    0\n    >>> find_first_digit(1234567)\n    1\n    >>> find_first_digit(-1234567)\n    1\n    >>> find_first_digit(123456789)\n    1\n    >>> find_first_digit(-123456789)\n    1\n    >>> find_first_digit(1234567890)\n    1\n    >>> find_first_digit(-1234567890)\n    1\n    \"\"\"\n    return int(str(number)[0])\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 81,
      "score": 3.2207772375362453,
      "candidate": "def first_digit(num):\n    return int(str(num)[0])\n\nprint(first_digit(123))\nprint(first_digit(123456789))\nprint(first_digit(9))\n\ndef first_digit_with_index(num):\n    return int(str(num)[0]), 0\n\nprint(first_digit_with_index(123))\nprint(first_digit_with_index(123456789))\nprint(first_digit_with_index(9))\n\ndef first_digit_with_index_2(num):\n    for i, d in enumerate(str(num)):\n        if d.isdigit():\n            return int(d), i\n\nprint(first_digit_with_index_2(123))\nprint(first_digit_with_index_2(123456789))\nprint(first_digit_with_index_2(9))"
    },
    {
      "rank": 82,
      "score": 3.214619927966919,
      "candidate": "def find_first_digit(num):\n    # convert num to string\n    num = str(num)\n\n    # loop over the digits in the num string\n    for i in num:\n        # check if the character is a digit\n        if i.isdigit():\n            # return the first digit\n            return i\n\n\nprint(find_first_digit(123))\nprint(find_first_digit(123456789))\nprint(find_first_digit(123.45))\nprint(find_first_digit(123.456789))\nprint(find_first_digit(1.23456789))\nprint(find_first_digit(1.234))"
    },
    {
      "rank": 83,
      "score": 3.2131018979172357,
      "candidate": "def first_digit(num):\n    return int(str(num)[0])\n\n\ndef first_digit_2(num):\n    while num >= 10:\n        num = num // 10\n    return num"
    },
    {
      "rank": 84,
      "score": 3.1787556809267237,
      "candidate": "def first_digit(number):\n    for i in number:\n        if i.isdigit():\n            return i\n\n\ndef first_digit_1(number):\n    return str(number)[0]\n\n\nif __name__ == \"__main__\":\n    print(first_digit(123))\n    print(first_digit_1(123))"
    },
    {
      "rank": 85,
      "score": 3.1424914783821523,
      "candidate": "def first_digit(number):\n    return int(str(number)[0])\n\n\nprint(first_digit(123))"
    },
    {
      "rank": 86,
      "score": 3.109277113662471,
      "candidate": "def find_first_digit(num):\n    for i in num:\n        if i.isdigit():\n            return i\n\n\ndef find_first_digit_v2(num):\n    return num[0] if num.isdigit() else None\n\n\nif __name__ == \"__main__\":\n    num = \"12345\"\n    print(find_first_digit(num))\n    print(find_first_digit_v2(num))"
    },
    {
      "rank": 87,
      "score": 3.0795599255104795,
      "candidate": "def first_digit(num):\n    return int(str(num)[0])\n\n\"\"\"\nWrite a python program to find the largest number of the following triangle numbers.\n\"\"\"\ndef largest_triangle_number(num):\n    if num == 0:\n        return 0\n    elif num == 1:\n        return 1\n    else:\n        return int((num*(num+1))/2)\n\n\"\"\"\nWrite a python function to find the value of n for which F(n)=F(n+1)+F(n+2)=100\n\"\"\"\ndef fn_equals_100(num):\n    if num == 0:\n        return 1\n    elif num == 1:\n        return 2\n    else:\n        return int(num*(num+1)/2)\n\n\"\"\"\nWrite a python function to find the value of n for which F(n)=F(n+1)+F(n+2)=1000\n\"\"\"\ndef fn_equals_1000(num):\n    if num == 0:\n        return 1\n    elif num == 1:\n        return 2\n    else:\n        return int(num*(num+1)*(num+2)/6)\n\n\"\"\"\nWrite a python function to find the sum of the following series upto nth term.\n\"\"\"\ndef sum_series(num):\n    if num == 0:\n        return 0\n    elif num == 1:\n        return 1\n    else:\n        return int(num*(num+1)/2)\n\n\"\"\"\nWrite a python function to find the sum of the following series upto nth term.\n\"\"\"\ndef sum_series_2(num):\n    if num == 0:\n        return 0\n    elif num == 1:\n        return 1\n    else:\n        return int(num*(num+1)*(num+2)/6)\n\n\"\"\"\nWrite a python function to find the sum of the following series upto nth term.\n\"\"\"\ndef sum_series_3(num):\n    if num == 0:\n        return 0\n    elif num == 1:\n        return"
    },
    {
      "rank": 88,
      "score": 3.0755960237050615,
      "candidate": "def find_first_digit(number):\n    string_num = str(number)\n    for char in string_num:\n        if char.isdigit():\n            return char\n\n    return None\n\n\nif __name__ == '__main__':\n    print(find_first_digit(123))\n    print(find_first_digit(123.45))\n    print(find_first_digit(\"123\"))\n    print(find_first_digit(\"123.45\"))\n    print(find_first_digit(\"abc\"))\n    print(find_first_digit(\"\"))\n    print(find_first_digit(\" \"))"
    },
    {
      "rank": 89,
      "score": 3.0651464609542067,
      "candidate": "def first_digit(num):\n    return int(str(num)[0])\n\n# test\nprint(first_digit(123))\nprint(first_digit(12))\nprint(first_digit(123456789))\nprint(first_digit(123.456))\nprint(first_digit(12.345))\nprint(first_digit(1.234))\nprint(first_digit(0))\nprint(first_digit(-1))\nprint(first_digit(-12345))\nprint(first_digit(-123.456))\nprint(first_digit(-12.345))\nprint(first_digit(-1.234))\n\n# using regular expression\nimport re\ndef first_digit(num):\n    return int(re.findall(r\"\\d\", str(num))[0])\n\n# test\nprint(first_digit(123))\nprint(first_digit(12))\nprint(first_digit(123456789))\nprint(first_digit(123.456))\nprint(first_digit(12.345))\nprint(first_digit(1.234))\nprint(first_digit(0))\nprint(first_digit(-1))\nprint(first_digit(-12345))\nprint(first_digit(-123.456))\nprint(first_digit(-12.345))\nprint(first_digit(-1.234))\n\n# using str.isdigit()\ndef first_digit(num):\n    for i in str(num):\n        if i.isdigit():\n            return int(i)\n\n# test\nprint(first_digit(123))\nprint(first_digit(12))\nprint(first_digit(123456789))\nprint(first_digit(123.456))\nprint(first_digit(12.345))\nprint(first_digit(1.234))\nprint(first_digit(0))\nprint(first_digit(-"
    },
    {
      "rank": 90,
      "score": 3.0574321598795757,
      "candidate": "def first_digit(number: int) -> int:\n    \"\"\"Return the first digit of a number.\n\n    Examples:\n        >>> assert first_digit(123) == 1\n        >>> assert first_digit(1234) == 1\n        >>> assert first_digit(0) == 0\n        >>> assert first_digit(-123) == -1\n        >>> assert first_digit(-1234) == -1\n        >>> assert first_digit(100) == 1\n        >>> assert first_digit(1000) == 1\n        >>> assert first_digit(0000) == 0\n        >>> assert first_digit(-0000) == 0\n        >>> assert first_digit(0010) == 0\n        >>> assert first_digit(-0010) == 0\n    \"\"\"\n    return int(str(number).strip(\"-\").split(\"-\")[0][0])\n\n\nif __name__ == \"__main__\":\n    print(first_digit(123))"
    },
    {
      "rank": 91,
      "score": 3.0377010218617935,
      "candidate": "def first_digit(number):\n    if number < 0:\n        return int(str(number)[0])\n    else:\n        return int(str(number)[0])\n\nfirst_digit(-12345)\n\n\"\"\"\nWrite a python function to find the largest number of a given list.\n\"\"\"\ndef largest_number(number_list):\n    return max(number_list)\n\nlargest_number([1, 2, 3, 4, 5])\n\n\"\"\"\nWrite a python function to find the smallest number of a given list.\n\"\"\"\ndef smallest_number(number_list):\n    return min(number_list)\n\nsmallest_number([1, 2, 3, 4, 5])\n\n\"\"\"\nWrite a python function to find the index of a given number of a given list.\n\"\"\"\ndef index_number(number_list, number):\n    return number_list.index(number)\n\nindex_number([1, 2, 3, 4, 5], 3)\n\n\"\"\"\nWrite a python function to find the length of a given list.\n\"\"\"\ndef length_list(number_list):\n    return len(number_list)\n\nlength_list([1, 2, 3, 4, 5])\n\n\"\"\"\nWrite a python function to find the sum of all numbers of a given list.\n\"\"\"\ndef sum_list(number_list):\n    return sum(number_list)\n\nsum_list([1, 2, 3, 4, 5])\n\n\"\"\"\nWrite a python function to find the product of all numbers of a given list.\n\"\"\"\ndef product_list(number_list):\n    product = 1\n    for number in number_list:\n        product = product * number\n    return product\n\nproduct_list([1, 2, 3, 4, 5])\n\n\"\"\"\nWrite a python function to find the square root of a given number.\n\"\"\"\nimport math\n\ndef square_root(number):\n    return math.sqrt(number)\n\nsquare_root(9)\n\n\"\"\"\nWrite a python function to"
    },
    {
      "rank": 92,
      "score": 2.9695818537423393,
      "candidate": "def find_first_digit(num: int) -> int:\n    \"\"\"Return the first digit of a given number.\n\n    >>> find_first_digit(123)\n    1\n    >>> find_first_digit(12)\n    1\n    >>> find_first_digit(12345)\n    1\n    >>> find_first_digit(123.45)\n    1\n    >>> find_first_digit(-123)\n    -1\n    >>> find_first_digit(-12)\n    -1\n    >>> find_first_digit(-12345)\n    -1\n    >>> find_first_digit(-123.45)\n    -1\n    \"\"\"\n    return int(str(num)[0])\n\n\ndef find_first_digit_alt(num: int) -> int:\n    \"\"\"Return the first digit of a given number.\n\n    >>> find_first_digit_alt(123)\n    1\n    >>> find_first_digit_alt(12)\n    1\n    >>> find_first_digit_alt(12345)\n    1\n    >>> find_first_digit_alt(123.45)\n    1\n    >>> find_first_digit_alt(-123)\n    -1\n    >>> find_first_digit_alt(-12)\n    -1\n    >>> find_first_digit_alt(-12345)\n    -1\n    >>> find_first_digit_alt(-123.45)\n    -1\n    \"\"\"\n    if num < 0:\n        return int(str(-num).split(\"-\")[1][0])\n    return int(str(num).split(\".\")[0][0])\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 93,
      "score": 2.9484898694711803,
      "candidate": "def first_digit(number):\n    return int(str(number)[0])\n\n\"\"\"\nWrite a python program to find the last digit of a given number.\n\"\"\"\n\ndef last_digit(number):\n    return int(str(number)[-1])\n\n\"\"\"\nWrite a python program to find the nth digit of a given number.\n\"\"\"\n\ndef nth_digit(number, n):\n    return int(str(number)[n-1])\n\n\"\"\"\nWrite a python function to find the sum of two given numbers.\n\"\"\"\n\ndef sum_of_two(a, b):\n    return a + b\n\n\"\"\"\nWrite a python function to find the sum of all numbers between 1 and n (inclusive).\n\"\"\"\n\ndef sum_of_all(n):\n    return (n * (n + 1)) // 2\n\n\"\"\"\nWrite a python program to find the factorial of a given number.\n\"\"\"\n\ndef factorial(n):\n    if n == 1:\n        return 1\n    return n * factorial(n - 1)\n\n\"\"\"\nWrite a python function to find the sum of the digits of a given number.\n\"\"\"\n\ndef sum_of_digits(number):\n    return sum(int(digit) for digit in str(number))\n\n\"\"\"\nWrite a python program to find the largest prime factor of a given number.\n\"\"\"\n\ndef largest_prime_factor(number):\n    i = 2\n    while i * i <= number:\n        if number % i:\n            i += 1\n        else:\n            number //= i\n    return number\n\n\"\"\"\nWrite a python program to find the largest palindrome of a given number.\n\"\"\"\n\ndef largest_palindrome(number):\n    largest = 0\n    for i in range(1, number + 1):\n        for j in range(1, i):\n            prod = i * j\n            if prod > largest and str(prod) == str(prod)[::-1]:\n                largest = prod\n    return largest\n\n\"\"\"\nWrite a python program to find the smallest palindrome of a given number."
    },
    {
      "rank": 94,
      "score": 2.948486257560866,
      "candidate": "def first_digit(number: int) -> int:\n    \"\"\"Returns the first digit of a number.\n\n    Args:\n        number (int): The number to find the first digit of\n\n    Returns:\n        int: The first digit of the number\n    \"\"\"\n    while number > 0:\n        return number % 10\n        number //= 10"
    },
    {
      "rank": 95,
      "score": 2.9137362063109253,
      "candidate": "def first_digit(number):\n    return int(str(number)[0])\n\n\"\"\"\nWrite a python program to check if a number is palindrome or not.\n\"\"\"\n\ndef palindrome(number):\n    return int(str(number)[::-1]) == number\n\n\"\"\"\nWrite a python program to find the largest number among three numbers.\n\"\"\"\n\ndef largest_number(num1, num2, num3):\n    return max(num1, num2, num3)\n\n\"\"\"\nWrite a python program to find the largest of three given numbers.\n\"\"\"\n\ndef largest_of_three(num1, num2, num3):\n    return max(num1, num2, num3)\n\n\"\"\"\nWrite a python program to find the HCF of two numbers.\n\"\"\"\n\ndef hcf(num1, num2):\n    if num1 > num2:\n        smaller = num2\n    else:\n        smaller = num1\n\n    for i in range(1, smaller+1):\n        if (num1 % i == 0) and (num2 % i == 0):\n            hcf = i\n\n    return hcf\n\n\"\"\"\nWrite a python program to find the LCM of two numbers.\n\"\"\"\n\ndef lcm(num1, num2):\n    if num1 > num2:\n        greater = num1\n    else:\n        greater = num2\n\n    while(True):\n        if (greater % num1 == 0) and (greater % num2 == 0):\n            lcm = greater\n            break\n        greater += 1\n    return lcm\n\n\"\"\"\nWrite a python program to find the sum of the following series: 6, 10, 15, 21, 27, ...\n\"\"\"\n\ndef series_sum(number):\n    series = 0\n    for i in range(1, number+1):\n        series += 6*i\n    return series\n\n\"\"\"\nWrite a python program to find the sum of the following series: 6, 10, 15, 21, 27, ...\n\"\"\"\n\ndef series"
    },
    {
      "rank": 96,
      "score": 2.841634274153164,
      "candidate": "def find_first_digit(number):\n    for i in number:\n        if i.isdigit():\n            return i\n    return None\n\nif __name__ == \"__main__\":\n    print(find_first_digit(12345))"
    },
    {
      "rank": 97,
      "score": 2.8153721448910196,
      "candidate": "def first_digit(number: int) -> int:\n    \"\"\"\n    >>> first_digit(1234)\n    1\n    >>> first_digit(123)\n    1\n    >>> first_digit(100)\n    1\n    >>> first_digit(-123)\n    -1\n    >>> first_digit(-1234)\n    -1\n    >>> first_digit(0)\n    0\n    >>> first_digit(10000)\n    1\n    >>> first_digit(00000)\n    0\n    >>> first_digit(00001)\n    0\n    >>> first_digit(-1000)\n    -1\n    >>> first_digit(-00010)\n    -0\n    >>> first_digit(-100000000)\n    -1\n    >>> first_digit(-1234567890)\n    -1\n    >>> first_digit(1234567890)\n    1\n    \"\"\"\n    return int(str(abs(number))[0])\n\n\ndef main():\n    number = int(input(\"Enter the number: \"))\n    print(f\"The first digit of {number} is {first_digit(number)}\")\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()\n    main()"
    },
    {
      "rank": 98,
      "score": 2.7771771535264267,
      "candidate": "def first_digit(n):\n    return int(str(n)[0])\n\n\"\"\"\nWrite a python function to find the last digit of a given number.\n\"\"\"\n\ndef last_digit(n):\n    return n%10\n\n\"\"\"\nWrite a python function to find the sum of two given numbers.\n\"\"\"\n\ndef sum(n1, n2):\n    return n1+n2\n\n\"\"\"\nWrite a python function to find the difference of two given numbers.\n\"\"\"\n\ndef difference(n1, n2):\n    return n1-n2\n\n\"\"\"\nWrite a python function to find the product of two given numbers.\n\"\"\"\n\ndef product(n1, n2):\n    return n1*n2\n\n\"\"\"\nWrite a python function to find the quotient of two given numbers.\n\"\"\"\n\ndef quotient(n1, n2):\n    return n1/n2\n\n\"\"\"\nWrite a python function to find the remainder of two given numbers.\n\"\"\"\n\ndef remainder(n1, n2):\n    return n1%n2\n\n\"\"\"\nWrite a python function to find the power of two given numbers.\n\"\"\"\n\ndef power(n1, n2):\n    return n1**n2\n\n\"\"\"\nWrite a python function to find the absolute difference of two given numbers.\n\"\"\"\n\ndef absolute_difference(n1, n2):\n    return abs(n1-n2)\n\n\"\"\"\nWrite a python function to find the factorial of a given number.\n\"\"\"\n\ndef factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n*factorial(n-1)\n\n\"\"\"\nWrite a python function to find the maximum of two given numbers.\n\"\"\"\n\ndef maximum(n1, n2):\n    if n1>n2:\n        return n1\n    else:\n        return n2\n\n\"\"\"\nWrite a python function to find the minimum of two given numbers.\n\"\"\"\n\ndef minimum(n1, n2):\n    if n1<n2:\n        return n1\n    else:"
    },
    {
      "rank": 99,
      "score": 2.689293185706236,
      "candidate": "def first_digit(num):\n    return int(str(num)[0])\n\n\nprint(first_digit(123))"
    },
    {
      "rank": 100,
      "score": 2.620518076847133,
      "candidate": "def first_digit(number):\n    return int(str(number)[0])\n\n\nprint(first_digit(123))"
    }
  ]
}