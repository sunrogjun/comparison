{
  "timestamp": "2025-09-15T00:35:33.815343",
  "method": "improved_llm_judge",
  "judge_model": "codellama/CodeLlama-7b-Python-hf",
  "target_model": "codellama-7b",
  "dataset": "mbpp",
  "problem_number": 303,
  "total_candidates": 100,
  "results": [
    {
      "rank": 1,
      "score": 10.0,
      "candidate": "from typing import List\n\n\ndef max_sum_adj(arr: List[int]) -> int:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(1)\n    \"\"\"\n    max_sum = 0\n\n    for i in range(len(arr)):\n        if arr[i] > max_sum:\n            max_sum = arr[i]\n        elif arr[i] + arr[i + 1] > max_sum:\n            max_sum = arr[i] + arr[i + 1]\n\n    return max_sum\n\n\nif __name__ == \"__main__\":\n    assert max_sum_adj([1, 2, 3, 1, 4, 5, 2, 3, 6]) == 12"
    },
    {
      "rank": 2,
      "score": 10.0,
      "candidate": "from typing import List\n\n\ndef max_sum_rec(arr: List[List[int]], i: int, j: int) -> int:\n    \"\"\"\n    Time Complexity: O(2^n)\n    Space Complexity: O(n)\n    \"\"\"\n    if i == len(arr) or j == len(arr[i]):\n        return 0\n\n    if i == len(arr) - 1:\n        return max(arr[i][j], max_sum_rec(arr, i, j + 1))\n\n    return max(arr[i][j] + max_sum_rec(arr, i + 1, j), max_sum_rec(arr, i, j + 1))\n\n\ndef max_sum(arr: List[List[int]]) -> int:\n    return max_sum_rec(arr, 0, 0)\n\n\nif __name__ == \"__main__\":\n    print(max_sum([[1, 2, 7, 10, 12], [4, 5, 1, 3, 8]]))"
    },
    {
      "rank": 3,
      "score": 10.0,
      "candidate": "from typing import List\n\n\ndef find_max_sum(grid: List[List[int]]) -> int:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(1)\n    \"\"\"\n    length = len(grid[0])\n\n    for row in grid:\n        for i in range(1, length):\n            row[i] += max(row[i - 1], row[i - 2])\n\n    return max(grid[0][length - 1], grid[0][length - 2])\n\n\nif __name__ == \"__main__\":\n    assert find_max_sum([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 24"
    },
    {
      "rank": 4,
      "score": 10.0,
      "candidate": "def max_sum_of_grid(grid):\n    n = len(grid[0])\n    dp = [[0 for _ in range(n)] for _ in range(2)]\n    dp[0][0] = grid[0][0]\n    dp[1][0] = grid[1][0]\n    for i in range(1, n):\n        dp[0][i] = max(dp[0][i-1], grid[0][i] + dp[1][i-1])\n        dp[1][i] = max(dp[1][i-1], grid[1][i] + dp[0][i-1])\n    return max(dp[0][n-1], dp[1][n-1])\n\n\nprint(max_sum_of_grid([[1, 1, 1, 1], [2, 2, 2, 2]]))\nprint(max_sum_of_grid([[1, 2, 3, 4, 5], [6, 7, 8, 9, 10], [11, 12, 13, 14, 15], [16, 17, 18, 19, 20]]))"
    },
    {
      "rank": 5,
      "score": 10.0,
      "candidate": "def find_max_sum_adjacent(grid):\n    n = len(grid[0])\n    dp = [[0 for _ in range(n)] for _ in range(2)]\n    dp[0][0] = grid[0][0]\n    dp[1][0] = grid[1][0]\n    for i in range(1, n):\n        dp[0][i] = max(dp[0][i - 1], dp[1][i - 1]) + grid[0][i]\n        dp[1][i] = max(dp[1][i - 1], dp[0][i - 1]) + grid[1][i]\n    return max(dp[0][n - 1], dp[1][n - 1])\n\n\ndef main():\n    grid = [[1, 2, 3], [4, 5, 6]]\n    print(\"Maximum sum without adjacent numbers: \" +\n          str(find_max_sum_adjacent(grid)))\n\n\nmain()"
    },
    {
      "rank": 6,
      "score": 10.0,
      "candidate": "def max_sum_grid(grid):\n    \"\"\"\n    >>> grid = [[1, 2, 7, 10], [4, 3, 8, 1]]\n    >>> max_sum_grid(grid)\n    17\n    >>> grid = [[1, 2, 7, 10], [4, 3, 8, 1], [6, 5, 9, 11], [8, 7, 6, 5]]\n    >>> max_sum_grid(grid)\n    28\n    \"\"\"\n    n = len(grid[0])\n    dp = [[0] * n for _ in range(2)]\n    for i in range(2):\n        for j in range(n):\n            if i == 0:\n                dp[i][j] = grid[i][j]\n            else:\n                dp[i][j] = max(dp[i - 1][j], dp[i - 1][j - 1] + grid[i][j])\n    return dp[-1][-1]\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 7,
      "score": 10.0,
      "candidate": "def max_sum_rec(arr, i, j):\n    if i == 0:\n        return arr[0][j] + max(max_sum_rec(arr, i, j - 1), max_sum_rec(arr, i, j - 2))\n    elif j == 0:\n        return arr[i][0] + max(max_sum_rec(arr, i - 1, j), max_sum_rec(arr, i - 2, j))\n    else:\n        return arr[i][j] + max(max_sum_rec(arr, i, j - 1), max_sum_rec(arr, i, j - 2), max_sum_rec(arr, i - 1, j), max_sum_rec(arr, i - 2, j))\n\n\ndef max_sum(arr):\n    return max(max_sum_rec(arr, 0, len(arr[0]) - 1), max_sum_rec(arr, 1, len(arr[0]) - 2))\n\n\ndef main():\n    arr = [[1, 2, 3, 4], [5, 6, 7, 8]]\n    print(max_sum(arr))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 8,
      "score": 10.0,
      "candidate": "def max_sum(arr, n):\n    prev = arr[0]\n    cur = 0\n    for i in range(1, n):\n        cur = max(arr[i], arr[i] + prev)\n        prev = cur\n    return cur\n\n\ndef main():\n    arr = [1, 2, 3, 4, 5, 6, 7, 8]\n    n = len(arr)\n    print(max_sum(arr, n))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 9,
      "score": 10.0,
      "candidate": "def max_sum_grid(arr):\n    max_sum = arr[0]\n    for i in range(1, len(arr)):\n        max_sum = max(max_sum, arr[i] + arr[i - 1])\n    return max_sum\n\n\ndef main():\n    print(\"Maximum sum in grid: \" +\n          str(max_sum_grid([1, 2, 3, 4, 5, 6, 7, 8])))\n    print(\"Maximum sum in grid: \" +\n          str(max_sum_grid([10, 10, 10, 10, 10, 10, 10, 10])))\n    print(\"Maximum sum in grid: \" + str(max_sum_grid([1, 2, 3, 4, 5, 6, 7, 8, 9])))\n\n\nmain()"
    },
    {
      "rank": 10,
      "score": 10.0,
      "candidate": "def max_sum_grid(grid):\n    # for each row, we can only choose one number\n    # so we can do a DP where we do DP from left to right\n    # for each row and we save the max sum for each row\n    # and we return the maximum among all max sum\n\n    # we need to save the max sum for each row\n    # so we need to keep track of the max sum\n    # for each row as we iterate through the grid\n    # this is a DP problem\n    # so we need to keep track of the previous row's max sum\n    # we can keep track of the previous row's max sum using the previous_row_max_sum variable\n    previous_row_max_sum = 0\n    max_sum = 0\n\n    # we can iterate through the grid and for each row we can\n    # keep track of the max sum\n    # we can also keep track of the max sum for each row\n    # as we iterate through the grid\n    for row in grid:\n        # we can iterate through each number in the current row\n        # we can keep track of the max sum for each number\n        # as we iterate through the row\n        for number in row:\n            # we can only choose one number from each row\n            # so we can get the max sum for the current number\n            # by adding it to the previous row's max sum\n            # this is the recurrence relation for the DP\n            # we can get the max sum for each number\n            # by adding it to the previous row's max sum\n            max_sum = max(max_sum, previous_row_max_sum + number)\n\n        # we can update the previous row's max sum\n        # to be the current row's max sum\n        previous_row_max_sum = max_sum\n\n    # we return the maximum among all max sum\n    return max_sum\n\n\nif __name__ == \"__main__\":\n    # grid_1 = [[2, 4, 6, 2], [5, 1, 1, 5], [1, 8, 1, 1]]\n    # grid_2 = [[2, 4, 6, 2],"
    },
    {
      "rank": 11,
      "score": 10.0,
      "candidate": "def max_sum_grid(arr):\n    n = len(arr[0])\n    max_sum = arr[0][0]\n    for i in range(1, n):\n        if arr[0][i] > arr[0][i - 1]:\n            max_sum = max(max_sum, arr[0][i])\n        else:\n            max_sum = max(max_sum, arr[0][i - 1] + arr[0][i])\n\n    for i in range(1, len(arr)):\n        if arr[i][0] > arr[i - 1][0]:\n            max_sum = max(max_sum, arr[i][0])\n        else:\n            max_sum = max(max_sum, arr[i - 1][0] + arr[i][0])\n\n    for i in range(1, len(arr)):\n        for j in range(1, n):\n            if arr[i][j] > arr[i][j - 1]:\n                max_sum = max(max_sum, arr[i][j])\n            else:\n                max_sum = max(max_sum, arr[i][j - 1] + arr[i][j])\n\n    return max_sum\n\n\ndef main():\n    arr = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    print(\"Array:\")\n    for i in range(len(arr)):\n        print(arr[i])\n    print(\"Maximum sum:\", max_sum_grid(arr))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 12,
      "score": 10.0,
      "candidate": "from typing import List\n\n\ndef max_sum_grid(arr: List[List[int]]) -> int:\n    \"\"\"\n    Time Complexity: O(n*2)\n    Space Complexity: O(1)\n    \"\"\"\n    n = len(arr[0])\n\n    # If the array contains only zeros\n    if not any(arr[0]):\n        return 0\n\n    # We store the maximum sum of non-adjacent numbers\n    max_sum = 0\n\n    # The sum of the first two rows\n    row_1 = max(arr[0][0], arr[0][1])\n    row_2 = max(arr[1][0], arr[1][1])\n\n    # The maximum sum of the first row\n    max_row_1 = row_1\n\n    # The maximum sum of the second row\n    max_row_2 = row_2\n\n    # The maximum sum of the second row\n    max_sum = max_row_1\n\n    for i in range(2, n):\n        # The maximum sum of the current row\n        max_row = 0\n\n        # We check the maximum sum for the current row\n        for j in range(i, n):\n            max_row = max(max_row, arr[1][j] + max_row_1)\n\n        # We update the maximum sum for the current row\n        max_row_2 = max(max_row_2, max_row)\n\n        # We update the maximum sum for the previous row\n        max_row_1 = max(max_row_1, max_row + row_2)\n\n        # We update the maximum sum\n        max_sum = max(max_sum, max_row_1, max_row_2)\n\n        # We update the maximum sum of the current row\n        max_row_1 = max_row\n\n    return max_sum\n\n\nif __name__ == \"__main__\":\n    assert (\n        max_sum_grid(\n            [[0, 6, 5, 2, 2, 4, 2], [2, 3, 3, 4, 2, 4, 2], ["
    },
    {
      "rank": 13,
      "score": 10.0,
      "candidate": "def find_max_sum(n):\n    for i in range(n):\n        print(i)\n\n\nif __name__ == \"__main__\":\n    find_max_sum(5)"
    },
    {
      "rank": 14,
      "score": 9.97108792940294,
      "candidate": "def max_sum_grid(arr):\n    max_sum = 0\n    dp = [[0 for i in range(len(arr))] for j in range(len(arr))]\n\n    for i in range(len(arr)):\n        for j in range(len(arr[i])):\n            if i == 0 and j == 0:\n                dp[i][j] = arr[i][j]\n            elif i == 0:\n                dp[i][j] = arr[i][j] + dp[i][j - 1]\n            elif j == 0:\n                dp[i][j] = arr[i][j] + dp[i - 1][j]\n            else:\n                dp[i][j] = arr[i][j] + max(dp[i - 1][j], dp[i][j - 1])\n            max_sum = max(dp[i][j], max_sum)\n    return max_sum\n\n\ndef main():\n    arr = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    print(max_sum_grid(arr))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 15,
      "score": 9.924724076102677,
      "candidate": "def max_sum_grid(arr):\n    n = len(arr)\n    max_sum = arr[0] + arr[1]\n    for i in range(2, n):\n        max_sum = max(max_sum, arr[i] + arr[i-2])\n    return max_sum\n\n\ndef main():\n    arr = [1, 2, 3, 4, 5]\n    print(max_sum_grid(arr))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 16,
      "score": 9.901972961716961,
      "candidate": "from typing import List\n\n\ndef get_max_sum(grid: List[List[int]]) -> int:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(1)\n    \"\"\"\n    max_sum = 0\n\n    for i in range(len(grid)):\n        for j in range(len(grid[i])):\n            if i == 0 or j == 0:\n                max_sum = max(max_sum, grid[i][j])\n            else:\n                max_sum = max(\n                    max_sum,\n                    grid[i][j] + max(grid[i - 1][j - 1], grid[i - 1][j]),\n                )\n\n    return max_sum\n\n\nif __name__ == \"__main__\":\n    assert get_max_sum([[5, 1, 1, 5], [1, 5, 5, 5], [2, 1, 1, 2]]) == 13"
    },
    {
      "rank": 17,
      "score": 9.884145576796884,
      "candidate": "from typing import List\n\n\ndef get_max_sum(arr: List[List[int]]) -> int:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(1)\n    \"\"\"\n\n    n = len(arr[0])\n\n    for i in range(1, n):\n        arr[0][i] += arr[0][i - 1]\n\n    for i in range(1, len(arr)):\n        arr[i][0] += arr[i - 1][0]\n\n        for j in range(1, n):\n            arr[i][j] += max(arr[i - 1][j], arr[i][j - 1])\n\n    return arr[-1][-1]\n\n\nif __name__ == \"__main__\":\n    assert get_max_sum([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]]) == 100"
    },
    {
      "rank": 18,
      "score": 9.882631403516262,
      "candidate": "from typing import List\n\n\ndef max_sum_rec(arr: List[int], n: int) -> int:\n    \"\"\"\n    Time Complexity: O(2^(n-1))\n    Space Complexity: O(n)\n    \"\"\"\n    if n == 1:\n        return arr[0]\n\n    return max(\n        arr[0] + max_sum_rec(arr[2:], n - 1),\n        arr[1] + max_sum_rec(arr[1:], n - 1),\n    )\n\n\ndef max_sum_memo(arr: List[int], n: int, memo: List[int] = None) -> int:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(n)\n    \"\"\"\n    if n == 1:\n        return arr[0]\n\n    if not memo:\n        memo = [0 for _ in range(n)]\n\n    if memo[n - 1] != 0:\n        return memo[n - 1]\n\n    memo[n - 1] = max(arr[0] + max_sum_memo(arr[2:], n - 1, memo), arr[1] + max_sum_memo(arr[1:], n - 1, memo))\n    return memo[n - 1]\n\n\ndef max_sum_dp(arr: List[int], n: int) -> int:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(n)\n    \"\"\"\n    if n == 1:\n        return arr[0]\n\n    dp = [0 for _ in range(n)]\n\n    dp[0] = arr[0]\n    dp[1] = max(arr[0], arr[1])\n\n    for i in range(2, n):\n        dp[i] = max(arr[i] + dp[i - 2], dp[i - 1])\n\n    return dp[n - 1]\n\n\nif __name__ == \"__main__\":\n    assert max_sum_rec"
    },
    {
      "rank": 19,
      "score": 9.863904318868704,
      "candidate": "def max_sum_grid(grid):\n    \"\"\"\n    O(n) & O(1)\n    \"\"\"\n    if not grid or not grid[0]:\n        return 0\n\n    m = 0\n\n    for i in range(len(grid)):\n        for j in range(len(grid[0])):\n            # check for horizontal edge cases\n            if i == 0:\n                if j == 0:\n                    m = max(m, grid[i][j] + grid[i][j + 1])\n                elif j == len(grid[0]) - 1:\n                    m = max(m, grid[i][j] + grid[i][j - 1])\n                else:\n                    m = max(m, grid[i][j] + grid[i][j - 1] + grid[i][j + 1])\n            # check for vertical edge cases\n            elif j == 0:\n                m = max(m, grid[i][j] + grid[i - 1][j])\n            elif j == len(grid[0]) - 1:\n                m = max(m, grid[i][j] + grid[i - 1][j])\n            else:\n                # check for non-edge cases\n                m = max(m, grid[i][j] + grid[i - 1][j] + grid[i][j - 1] + grid[i][j + 1])\n\n    return m\n\n\nif __name__ == \"__main__\":\n    grid = [\n        [1, 2, 3, 4],\n        [1, 2, 4, 5],\n        [3, 4, 5, 6]\n    ]\n    print(max_sum_grid(grid))"
    },
    {
      "rank": 20,
      "score": 9.820038947901322,
      "candidate": "def max_sum(arr):\n    n = len(arr)\n    max_sum = arr[0] + arr[1]\n    for i in range(2, n):\n        max_sum = max(arr[i], arr[i] + max_sum)\n    return max_sum\n\n\narr = [1, 2, 3, 4, 1]\nprint(max_sum(arr))"
    },
    {
      "rank": 21,
      "score": 9.723416256498492,
      "candidate": "def max_sum_2xn(arr):\n\tn = len(arr)\n\tdp = [0] * n\n\tdp[0] = arr[0]\n\tdp[1] = max(arr[0], arr[1])\n\n\tfor i in range(2, n):\n\t\tdp[i] = max(dp[i-2] + arr[i], dp[i-1])\n\n\treturn dp[n-1]\n\n\nif __name__ == '__main__':\n\tarr = [1, 2, 3, 4]\n\tprint(max_sum_2xn(arr))"
    },
    {
      "rank": 22,
      "score": 9.646924074666178,
      "candidate": "def max_sum_subarray(arr):\n    max_sum = 0\n    for i in range(len(arr)):\n        for j in range(len(arr[i])):\n            max_sum = max(max_sum, arr[i][j] + arr[i][j + 1] + arr[i + 1][j] + arr[i + 1][j + 1])\n    return max_sum\n\n\ndef main():\n    arr = [[1, 2, 7, 10], [4, 1, 3, 11], [2, 4, 6, 9], [5, 8, 9, 10]]\n    print(max_sum_subarray(arr))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 23,
      "score": 9.630369502408143,
      "candidate": "def max_sum(mat):\n    n = len(mat[0])\n    dp = [[0 for _ in range(n)] for _ in range(2)]\n    dp[0][0] = mat[0][0]\n    dp[0][1] = max(dp[0][0], mat[0][1])\n    for i in range(1, n):\n        dp[i % 2][i] = mat[1][i]\n        dp[i % 2][i - 1] = max(dp[i % 2][i - 1], dp[i % 2][i])\n    return max(dp[n % 2][n - 1], dp[(n - 1) % 2][n - 2])\n\n\ndef main():\n    mat = [[1, 2, 3, 4], [5, 6, 7, 8]]\n    ans = max_sum(mat)\n    print(ans)\n\n\nmain()"
    },
    {
      "rank": 24,
      "score": 9.510082469030056,
      "candidate": "def maximumSum(matrix):\n    n = len(matrix[0])\n    dp = [[0 for _ in range(n)] for _ in range(2)]\n    for i in range(n):\n        dp[0][i] = matrix[0][i] + (dp[1][i-1] if i > 0 else 0)\n        dp[1][i] = matrix[1][i] + (dp[0][i-1] if i > 0 else 0)\n    return max(dp[0][-1], dp[1][-1])"
    },
    {
      "rank": 25,
      "score": 9.345063723977564,
      "candidate": "def max_sum_grid(grid):\n    if len(grid) == 1:\n        return grid[0][0]\n\n    max_sum = 0\n    for i in range(len(grid[0])):\n        max_sum = max(max_sum, grid[0][i] + grid[1][i + 1])\n\n    return max(max_sum, max_sum_grid(grid[1:]))\n\n\nif __name__ == \"__main__\":\n    grid = [[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]\n    print(max_sum_grid(grid))"
    },
    {
      "rank": 26,
      "score": 8.444444444444445,
      "candidate": "def max_sum(arr, n):\n    if n == 1:\n        return arr[0]\n    if n == 2:\n        return arr[0] + arr[1]\n\n    max1 = arr[0] + arr[2]\n    max2 = arr[1] + arr[2]\n    max3 = max(arr[0], arr[1])\n\n    for i in range(2, n-1):\n        max1 = max(max1, arr[i] + arr[i+1])\n        max2 = max(max2, arr[i-1] + arr[i+1])\n        max3 = max(max3, max1, max2)\n\n    return max(max3, max1)\n\nif __name__ == \"__main__\":\n    arr = [2, 7, 9, 13, 15, 16]\n    n = len(arr)\n    print(max_sum(arr, n))"
    },
    {
      "rank": 27,
      "score": 8.444444444444445,
      "candidate": "def max_sum(grid):\n    \"\"\"\n    grid: rectangular grid of dimension 2 x n\n    return: the maximum sum such that no two chosen numbers are adjacent\n    \"\"\"\n    # Your code here\n    # create a new array of length n\n    # for each i in the array,\n    #   sum the max of the two adjacent cells\n    #   add the max to the new array\n    # return the max of the new array\n    new_arr = []\n    for i in range(len(grid[0])):\n        if i == 0:\n            new_arr.append(grid[0][i] + grid[1][i])\n        elif i == len(grid[0]) - 1:\n            new_arr.append(grid[0][i] + grid[1][i])\n        else:\n            new_arr.append(max(grid[0][i] + grid[1][i], grid[0][i] + grid[1][i+1]))\n    return max(new_arr)\n\n\ngrid = [[1, 2, 3], [4, 5, 6]]\nprint(max_sum(grid))\n\ngrid = [[1, 3, 5, 7], [10, 11, 12, 13], [17, 18, 19, 20]]\nprint(max_sum(grid))"
    },
    {
      "rank": 28,
      "score": 8.444444444444445,
      "candidate": "def maxSum(arr, n):\n\tarr.sort()\n\tmax_sum = 0\n\tfor i in range(n-1):\n\t\tif arr[i] + arr[i+1] > max_sum:\n\t\t\tmax_sum = arr[i] + arr[i+1]\n\treturn max_sum\n\narr = [1, 2, 3, 4, 5]\nn = len(arr)\nprint(maxSum(arr, n))"
    },
    {
      "rank": 29,
      "score": 8.444444444444445,
      "candidate": "def max_sum_no_adjacent(grid):\n    # Assumption: The grid is always 2 x n\n    # 1. Create a new grid, where each element is the sum of the two elements to its right\n    # 2. Traverse the new grid and find the maximum sum\n\n    # 1. Create a new grid, where each element is the sum of the two elements to its right\n    new_grid = []\n    for i in range(len(grid)):\n        new_grid.append([])\n        for j in range(len(grid[i])):\n            if j == 0:\n                new_grid[i].append(grid[i][j])\n            else:\n                new_grid[i].append(grid[i][j] + new_grid[i][j - 1])\n\n    # 2. Traverse the new grid and find the maximum sum\n    max_sum = 0\n    for i in range(len(new_grid)):\n        for j in range(len(new_grid[i])):\n            if j + 2 < len(new_grid[i]):\n                max_sum = max(max_sum, new_grid[i][j + 1] + new_grid[i][j + 2])\n\n    return max_sum\n\ndef max_sum_no_adjacent_2(grid):\n    # Assumption: The grid is always 2 x n\n    # 1. Create a new grid, where each element is the sum of the two elements to its right\n    # 2. Traverse the new grid and find the maximum sum\n\n    # 1. Create a new grid, where each element is the sum of the two elements to its right\n    new_grid = []\n    for i in range(len(grid)):\n        new_grid.append([])\n        for j in range(len(grid[i])):\n            if j == 0:\n                new_grid[i].append(grid[i][j])\n            else:\n                new_grid[i].append(grid[i][j] + new_grid[i][j - 1])\n\n    # 2. Traverse the new grid and find the maximum sum"
    },
    {
      "rank": 30,
      "score": 8.444444444444445,
      "candidate": "def max_sum(grid):\n    n = len(grid)\n    max_sum = grid[0][0]\n    for i in range(1, n):\n        grid[0][i] += grid[0][i-1]\n    for i in range(1, n):\n        for j in range(1, n):\n            grid[i][j] += max(grid[i-1][j], grid[i][j-1])\n            max_sum = max(max_sum, grid[i][j])\n    return max_sum\n\nprint(max_sum([[1, 1], [1, 1]]))\nprint(max_sum([[2, 2], [1, 2]]))\nprint(max_sum([[1, 0], [0, 1]]))\nprint(max_sum([[0, 2, 2], [2, 1, 0], [0, 0, 2]]))"
    },
    {
      "rank": 31,
      "score": 3.926139092254469,
      "candidate": "from typing import List\n\n\ndef max_sum_grid(grid: List[List[int]]) -> int:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(n)\n    \"\"\"\n    if len(grid) == 0:\n        return 0\n\n    n = len(grid[0])\n\n    dp = [[0] * n for _ in range(2)]\n\n    for i in range(2):\n        dp[i][0] = grid[i][0]\n\n    for i in range(1, n):\n        dp[0][i] = max(dp[0][i - 1], dp[1][i - 1])\n\n    for i in range(1, 2):\n        dp[i][0] = dp[i - 1][0]\n\n    for i in range(1, 2):\n        for j in range(1, n):\n            dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])\n            dp[i][j] += grid[i][j]\n\n    return max(dp[0][-1], dp[1][-1])\n\n\nif __name__ == \"__main__\":\n    assert max_sum_grid([[1, 2], [3, 4]]) == 6\n    assert max_sum_grid([[1, 2], [1, 3]]) == 4\n    assert max_sum_grid([[1, 2], [1, 3], [1, 4]]) == 6"
    },
    {
      "rank": 32,
      "score": 3.7896064077536957,
      "candidate": "def max_sum_adjacent(arr):\n    if not arr:\n        return 0\n    n = len(arr)\n    dp = [0]*n\n    dp[0] = arr[0]\n    dp[1] = arr[1]\n    for i in range(2, n):\n        dp[i] = max(arr[i], arr[i]+dp[i-2])\n    return max(dp)\n\narr = [1, 2, 3, 4, 5, 5, 3, 1]\nprint(max_sum_adjacent(arr))"
    },
    {
      "rank": 33,
      "score": 3.782321827907003,
      "candidate": "from typing import List\n\n\ndef get_maximum_sum(grid: List[List[int]]) -> int:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(1)\n    \"\"\"\n    length = len(grid[0])\n\n    grid[1][0] += grid[0][0]\n\n    for i in range(2, length):\n        grid[i][0] = grid[i - 1][0] + grid[i - 2][0]\n\n    for i in range(1, length):\n        for j in range(1, length):\n            grid[i][j] += max(grid[i - 1][j - 1], grid[i - 2][j - 1], grid[i - 1][j - 2])\n\n    return max(grid[-1])\n\n\nif __name__ == \"__main__\":\n    assert get_maximum_sum([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]]) == 54"
    },
    {
      "rank": 34,
      "score": 3.761514928204013,
      "candidate": "def max_sum_grid(grid):\n    # The maximum value of the grid\n    MAX = 1000000007\n\n    # Initializing the dp array to -1\n    dp = [[-1 for _ in range(len(grid[0]))] for _ in range(len(grid))]\n\n    # Recursively find the maximum sum\n    return max_sum_grid_util(grid, 0, 0, dp)\n\ndef max_sum_grid_util(grid, i, j, dp):\n    # Base case\n    if i == len(grid) - 1:\n        return grid[i][j]\n\n    # If the value is already calculated\n    if dp[i][j] != -1:\n        return dp[i][j]\n\n    # Maximum sum if we don't include the current element\n    excluding = max_sum_grid_util(grid, i + 1, j, dp)\n\n    # If we can include the current element\n    if j + 1 < len(grid[0]):\n        including = max_sum_grid_util(grid, i + 1, j + 1, dp) + grid[i][j]\n    else:\n        including = -1\n\n    # Choosing the maximum of both the cases\n    dp[i][j] = max(excluding, including)\n\n    # Return the maximum value of the dp array\n    return dp[i][j]\n\n\"\"\"\nTesting:\n1. If we don't include any element, the maximum sum is 0.\n2. If we include the current element, then we have to consider the adjacent element.\n\"\"\"\ngrid = [[1, 2, 3],\n        [4, 5, 6]]\n\nprint(max_sum_grid(grid))"
    },
    {
      "rank": 35,
      "score": 3.738947022370758,
      "candidate": "def max_sum_grid(grid):\n    # Find the max sum for each column\n    for col in range(1, len(grid[0])):\n        grid[0][col] += grid[0][col - 1]\n\n    for row in range(1, len(grid)):\n        grid[row][0] += grid[row - 1][0]\n\n        for col in range(1, len(grid[0])):\n            grid[row][col] += max(grid[row - 1][col], grid[row][col - 1])\n\n    return grid[-1][-1]\n\n\nif __name__ == \"__main__\":\n    grid = [[1, 1, 1, 1],\n            [1, 2, 2, 1],\n            [1, 2, 3, 1],\n            [1, 2, 2, 1]]\n\n    assert max_sum_grid(grid) == 6"
    },
    {
      "rank": 36,
      "score": 3.5154997612479755,
      "candidate": "from typing import List\n\n\ndef max_sum_grid(nums: List[int]) -> int:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(1)\n    \"\"\"\n    nums.insert(0, 0)\n    length = len(nums)\n\n    for i in range(1, length):\n        nums[i] += nums[i - 1]\n\n    return nums[-1]\n\n\nif __name__ == \"__main__\":\n    assert max_sum_grid([1, 2, 3, 4, 1]) == 9\n    assert max_sum_grid([2, 2, 2, 2]) == 8\n    assert max_sum_grid([5, 1, 1, 5]) == 10"
    },
    {
      "rank": 37,
      "score": 3.501766448946012,
      "candidate": "from typing import List\n\n\ndef max_sum_grid(matrix: List[List[int]]) -> int:\n    \"\"\"\n    Time Complexity: O(n*n)\n    Space Complexity: O(n)\n    \"\"\"\n    n = len(matrix[0])\n\n    # dp[i][j] = max sum ending at i, j\n    dp = [[0] * n for _ in range(n)]\n\n    # first row\n    for j in range(n):\n        dp[0][j] = matrix[0][j]\n\n    # first column\n    for i in range(1, n):\n        dp[i][0] = dp[i - 1][0] + matrix[i][0]\n\n    # fill dp table\n    for i in range(1, n):\n        for j in range(1, n):\n            dp[i][j] = max(\n                dp[i - 1][j], dp[i][j - 1], dp[i - 1][j - 1] + matrix[i][j]\n            )\n\n    return max(dp[-1])\n\n\nif __name__ == \"__main__\":\n    assert max_sum_grid([[1, 1], [1, 2]]) == 4\n    assert max_sum_grid([[1, 2], [1, 2]]) == 4\n    assert max_sum_grid([[1, 2, 3, 4], [2, 3, 4, 5], [3, 4, 5, 6], [4, 5, 6, 7]]) == 15"
    },
    {
      "rank": 38,
      "score": 3.4843224952664444,
      "candidate": "from typing import List\n\n\ndef max_sum_grid(arr: List[List[int]]) -> int:\n    \"\"\"\n    Time Complexity: O(n)\n    \"\"\"\n\n    def max_sum_grid_helper(arr: List[List[int]], row: int, col: int) -> int:\n        if row == len(arr) - 1:\n            return arr[row][col]\n\n        include_current = max_sum_grid_helper(arr, row + 1, col + 1)\n        exclude_current = 0\n\n        if col + 1 < len(arr[0]):\n            exclude_current += max_sum_grid_helper(arr, row + 1, col)\n\n        if row + 1 < len(arr):\n            exclude_current += max_sum_grid_helper(arr, row, col + 1)\n\n        return max(include_current, exclude_current)\n\n    return max_sum_grid_helper(arr, 0, 0)\n\n\nif __name__ == \"__main__\":\n    assert max_sum_grid([[2, 1, 5, 6], [5, 4, 3, 4], [4, 3, 2, 7], [3, 2, 1, 0]]) == 13\n    assert max_sum_grid([[2, 1], [5, 4], [4, 3], [3, 2]]) == 10"
    },
    {
      "rank": 39,
      "score": 3.4656400595580994,
      "candidate": "def max_sum(arr):\n    n = len(arr)\n    dp = [[0 for _ in range(n)] for _ in range(2)]\n    dp[0][0] = arr[0][0]\n    dp[1][0] = max(arr[0][0], arr[1][0])\n\n    for i in range(1, n):\n        dp[0][i] = max(dp[0][i - 1], dp[1][i - 1])\n        dp[1][i] = max(dp[1][i - 1], dp[0][i - 1]) + arr[1][i]\n\n    return max(dp[0][n - 1], dp[1][n - 1])\n\n\nif __name__ == \"__main__\":\n    arr = [[2, 1, 5, 6], [1, 8, 4, 1]]\n    assert max_sum(arr) == 14"
    },
    {
      "rank": 40,
      "score": 3.457701058851037,
      "candidate": "class Solution:\n    def maxSum(self, arr):\n        \"\"\"\n        :param arr:\n        :return:\n        \"\"\"\n        if not arr:\n            return 0\n        if len(arr) < 2:\n            return arr[0]\n        if len(arr) == 2:\n            return max(arr[0], arr[1])\n\n        # O(n)\n        max_sum = max(arr[0], arr[1])\n        for i in range(2, len(arr)):\n            max_sum = max(arr[i], arr[i] + max_sum)\n        return max_sum\n\n\nif __name__ == \"__main__\":\n    arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17]\n    print(Solution().maxSum(arr))"
    },
    {
      "rank": 41,
      "score": 3.4112724560515946,
      "candidate": "from functools import lru_cache\n\n\n@lru_cache(maxsize=None)\ndef find_max_sum_helper(grid, i, j):\n    if i == 0:\n        return grid[i][j]\n\n    return max(find_max_sum_helper(grid, i - 1, j - 1), find_max_sum_helper(grid, i - 1, j), grid[i][j])\n\n\ndef find_max_sum(grid):\n    max_sum = find_max_sum_helper(grid, len(grid) - 1, len(grid[0]) - 1)\n\n    return max_sum\n\n\nif __name__ == \"__main__\":\n    grid = [[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]]\n    assert find_max_sum(grid) == 42"
    },
    {
      "rank": 42,
      "score": 3.410951252187612,
      "candidate": "from typing import List\n\n\ndef max_sum_adjacent(grid: List[List[int]]) -> int:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(1)\n\n    :param grid: 2D grid\n    :return: Maximum sum\n    \"\"\"\n    if not grid:\n        return 0\n\n    n = len(grid[0])\n\n    if n == 1:\n        return grid[0][0]\n\n    dp = [[0] * (n + 1) for _ in range(2)]\n\n    for i in range(2):\n        for j in range(n):\n            dp[i][j] = max(dp[i][j - 1], dp[i][j])\n            dp[i][j] += grid[i][j]\n\n    return max(dp[0][n - 1], dp[1][n - 1])\n\n\nif __name__ == \"__main__\":\n    assert max_sum_adjacent([[2, 1, 2], [1, 2, 2], [1, 2, 2]]) == 7"
    },
    {
      "rank": 43,
      "score": 3.406262911197099,
      "candidate": "def max_sum_grid(arr):\n    n = len(arr)\n    if n == 0:\n        return 0\n    if n == 1:\n        return arr[0][0]\n    if n == 2:\n        return max(arr[0][0] + arr[1][1], arr[1][0] + arr[0][1])\n\n    max_sum = 0\n    for i in range(n):\n        max_sum = max(arr[i][i], arr[i][i + 1], max_sum)\n\n    for i in range(n - 1):\n        max_sum = max(arr[i][i], arr[i][i + 1], max_sum)\n\n    return max_sum\n\n\nprint(max_sum_grid([[1, 2, 3], [4, 5, 6], [7, 8, 9]]))"
    },
    {
      "rank": 44,
      "score": 3.3837173645764542,
      "candidate": "def maximum_sum(grid):\n    \"\"\"\n    The idea is to find the maximum sum of the subarray of the form [a, b] where a != b\n    \"\"\"\n    n = len(grid[0])\n    max_sum = -1\n    for i in range(n - 1):\n        max_sum = max(max_sum, grid[0][i] + grid[0][i + 1])\n    for i in range(1, n - 1):\n        max_sum = max(max_sum, grid[1][i] + grid[1][i + 1])\n    return max_sum\n\n\ndef test(grid, expected_answer):\n    answer = maximum_sum(grid)\n\n    if answer != expected_answer:\n        raise Exception(\n            f\"Answer {answer} is wrong. Expected answer is {expected_answer}\"\n        )\n\n\nif __name__ == \"__main__\":\n    test([[1, 2, 3], [4, 5, 6]], 9)\n    test([[1, 3, 5, 7], [10, 11, 12, 13], [14, 15, 16, 17], [20, 21, 22, 23]], 48)\n    test([[1, 2], [10, 10]], 20)\n    test([[1, 1, 1], [2, 2, 2], [3, 3, 3]], 18)\n    print(\"All tests passed!\")"
    },
    {
      "rank": 45,
      "score": 3.3692332899977053,
      "candidate": "def max_sum_grid(grid):\n    n = len(grid)\n    dp = [[0 for _ in range(n + 1)] for _ in range(n + 1)]\n    for i in range(1, n + 1):\n        for j in range(1, n + 1):\n            dp[i][j] = grid[i - 1][j - 1] + max(dp[i - 1][j - 1], dp[i - 1][j], dp[i][j - 1])\n    return dp[n][n]\n\n\nif __name__ == \"__main__\":\n    grid = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    assert max_sum_grid(grid) == 25"
    },
    {
      "rank": 46,
      "score": 3.3238442690503462,
      "candidate": "from typing import List\n\n\ndef max_sum_subarray(grid: List[List[int]]) -> int:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(1)\n    \"\"\"\n\n    def max_sum(i: int, j: int) -> int:\n        if i == 0:\n            return grid[i][j]\n\n        return max(\n            grid[i][j],\n            grid[i - 1][j] + grid[i][j],\n            grid[i][j - 1] + grid[i][j],\n            grid[i - 1][j - 1] + grid[i][j],\n            grid[i - 1][j] + grid[i][j - 1],\n        )\n\n    return max(max_sum(i, j) for i in range(len(grid)) for j in range(len(grid[i])))\n\n\nif __name__ == \"__main__\":\n    assert max_sum_subarray([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]]) == 100"
    },
    {
      "rank": 47,
      "score": 3.305838144420434,
      "candidate": "from typing import List\n\n\ndef find_max_sum(nums: List[int]) -> int:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(1)\n    \"\"\"\n\n    # base case\n    if len(nums) <= 2:\n        return max(nums)\n\n    # initialize variables\n    max_sum = nums[0]\n    prev_max = nums[0]\n    prev_prev_max = nums[1]\n\n    # iterate through the list\n    for index in range(2, len(nums)):\n        # get the current maximum sum\n        curr_max = max(prev_prev_max + nums[index], prev_max, nums[index])\n\n        # update the maximum sum\n        max_sum = max(max_sum, curr_max)\n\n        # update the previous maximum sum\n        prev_prev_max = prev_max\n        prev_max = curr_max\n\n    return max_sum\n\n\nif __name__ == \"__main__\":\n    assert find_max_sum([1, 2, 3, 1]) == 4"
    },
    {
      "rank": 48,
      "score": 3.2712800217929825,
      "candidate": "from typing import List\n\n\ndef max_sum_grid(grid: List[List[int]]) -> int:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(1)\n    \"\"\"\n    n = len(grid[0])\n\n    for i in range(1, n):\n        grid[0][i] += max(grid[0][i - 1], grid[1][i - 1])\n\n    for i in range(1, len(grid)):\n        for j in range(1, n):\n            grid[i][j] += max(grid[i][j - 1], grid[i - 1][j - 1])\n\n    return max(grid[-1])\n\n\nif __name__ == \"__main__\":\n    assert max_sum_grid([[1, 2, 3], [4, 5, 6]]) == 12\n    assert max_sum_grid([[1, 2], [4, 5], [7, 8]]) == 15"
    },
    {
      "rank": 49,
      "score": 3.256633716556678,
      "candidate": "def max_sum_grid(matrix):\n    if len(matrix) == 0:\n        return 0\n    for row in matrix:\n        if len(row) == 0:\n            return 0\n    m = len(matrix)\n    n = len(matrix[0])\n    dp = [[0] * n for _ in range(m)]\n    for i in range(m):\n        for j in range(n):\n            dp[i][j] = matrix[i][j]\n            if i > 0:\n                dp[i][j] += dp[i-1][j]\n            if j > 0:\n                dp[i][j] += dp[i][j-1]\n            if i > 0 and j > 0:\n                dp[i][j] -= dp[i-1][j-1]\n    return max(dp[m-1][n-1], dp[m-1][n-2])\n\nmatrix = [\n[1, 2, 3],\n[4, 5, 6],\n[7, 8, 9]\n]\n\nprint(max_sum_grid(matrix))"
    },
    {
      "rank": 50,
      "score": 3.2483570765056164,
      "candidate": "def max_sum_adjacent(arr):\n    n = len(arr)\n    dp = [[0 for _ in range(n)] for _ in range(n)]\n    dp[0][0] = arr[0][0]\n    for i in range(1, n):\n        dp[0][i] = max(dp[0][i-1], arr[0][i])\n        dp[i][0] = max(dp[i-1][0], arr[i][0])\n    for i in range(1, n):\n        for j in range(1, n):\n            dp[i][j] = max(dp[i-1][j], dp[i][j-1], dp[i-1][j-1]) + arr[i][j]\n    return dp[-1][-1]\n\n\nif __name__ == \"__main__\":\n    assert max_sum_adjacent([[1, 2], [3, 4]]) == 7"
    },
    {
      "rank": 51,
      "score": 3.1878490091728358,
      "candidate": "from typing import List\n\n\ndef get_max_sum(A: List[int]) -> int:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(n)\n    \"\"\"\n\n    n = len(A)\n\n    dp = [0] * n\n    dp[0] = A[0]\n\n    for i in range(1, n):\n        dp[i] = max(A[i], A[i] + dp[i - 1])\n\n    return max(dp)\n\n\nif __name__ == \"__main__\":\n    A = [1, 2, 3, 4]\n    assert get_max_sum(A) == 7\n\n    A = [1, 2, 3, 4, 5, 6, 7]\n    assert get_max_sum(A) == 16"
    },
    {
      "rank": 52,
      "score": 3.180697802754207,
      "candidate": "def max_sum_grid(grid):\n    for i in range(1, len(grid)):\n        grid[i][0] += grid[i - 1][0]\n    for i in range(1, len(grid[0])):\n        grid[0][i] += grid[0][i - 1]\n    for i in range(1, len(grid)):\n        for j in range(1, len(grid[0])):\n            grid[i][j] += max(grid[i - 1][j], grid[i][j - 1])\n    return grid[-1][-1]\n\n\ndef test(grid, expected_answer):\n    answer = max_sum_grid(grid)\n\n    if answer != expected_answer:\n        raise Exception(\n            f\"Answer {answer} is wrong. Expected answer is {expected_answer}\"\n        )\n\n\nif __name__ == \"__main__\":\n    test([[2, -1, 3], [0, 3, -2], [-1, -2, 2]], 7)\n    test([[1, -2, 3], [0, 3, -2], [-1, -2, 2]], 5)\n    test([[1, -2, 3], [0, 3, -2], [-1, -2, 2]], 5)\n    test([[1, -2, 3], [0, 3, -2], [-1, -2, 2]], 5)\n    test([[1, -2, 3], [0, 3, -2], [-1, -2, 2]], 5)\n    print(\"All tests passed!\")"
    },
    {
      "rank": 53,
      "score": 3.178556285755873,
      "candidate": "def max_sum_grid(grid, n):\n    dp = [[0 for _ in range(n + 1)] for _ in range(2)]\n\n    for i in range(2):\n        dp[i][0] = grid[i][0]\n        dp[i][1] = max(dp[i][0], grid[i][1])\n\n    for i in range(2, n + 1):\n        dp[0][i] = max(dp[0][i - 1], dp[1][i - 1])\n        dp[1][i] = dp[0][i - 1] + grid[1][i]\n\n    return max(dp[0][n], dp[1][n])\n\n\ndef main():\n    grid = [[1, 2], [3, 4]]\n    n = 2\n    print(max_sum_grid(grid, n))\n\n\nmain()"
    },
    {
      "rank": 54,
      "score": 3.1718091447842305,
      "candidate": "from typing import List\n\n\ndef max_sum_grid(arr: List[List[int]]) -> int:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(1)\n    \"\"\"\n\n    n = len(arr[0])\n\n    dp_arr = [[0] * n for _ in range(2)]\n\n    dp_arr[0][0] = arr[0][0]\n    dp_arr[1][0] = arr[1][0]\n\n    for i in range(1, n):\n        dp_arr[0][i] = max(dp_arr[0][i - 1], arr[0][i] + dp_arr[1][i - 1])\n        dp_arr[1][i] = max(dp_arr[1][i - 1], arr[1][i] + dp_arr[0][i - 1])\n\n    return max(dp_arr[0][-1], dp_arr[1][-1])\n\n\nif __name__ == \"__main__\":\n    assert max_sum_grid([[1, 2, 3], [4, 5, 6]]) == 12"
    },
    {
      "rank": 55,
      "score": 3.1620419846973977,
      "candidate": "from typing import List\n\n\ndef maximum_sum(grid: List[List[int]]) -> int:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(1)\n    \"\"\"\n    prev = 0\n    curr = 0\n\n    for i in range(len(grid[0])):\n        prev, curr = curr, max(prev + grid[0][i], grid[1][i])\n\n    prev = 0\n    curr = 0\n\n    for i in range(1, len(grid)):\n        prev, curr = curr, max(prev + grid[i][0], grid[i][1])\n\n    return max(prev, curr)\n\n\nif __name__ == \"__main__\":\n    assert maximum_sum([[1, 2], [3, 4]]) == 7"
    },
    {
      "rank": 56,
      "score": 3.1209811357830173,
      "candidate": "from typing import List\n\n\ndef max_sum_grid(grid: List[List[int]]) -> int:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(1)\n    \"\"\"\n    n = len(grid[0])\n\n    prev_max = grid[0][0]\n    cur_max = grid[0][0]\n\n    for i in range(1, n):\n        prev_max = max(prev_max + grid[0][i], grid[0][i])\n        cur_max = max(cur_max, prev_max)\n\n    prev_max = grid[1][0]\n    cur_max = grid[1][0]\n\n    for i in range(1, n):\n        prev_max = max(prev_max + grid[1][i], grid[1][i])\n        cur_max = max(cur_max, prev_max)\n\n    return cur_max\n\n\nif __name__ == \"__main__\":\n    assert max_sum_grid([[2, 4, 6, 2], [5, 1, 1, 1]]) == 12"
    },
    {
      "rank": 57,
      "score": 3.104431797502378,
      "candidate": "def max_sum_grid(grid):\n    n = len(grid)\n    prev = 0\n    curr = 0\n    for i in range(n):\n        prev = curr\n        curr = 0\n        for j in range(n):\n            curr += grid[i][j]\n            if i == 0:\n                grid[i][j] += grid[i][j+1]\n            elif i == n-1:\n                grid[i][j] += grid[i-1][j]\n            else:\n                grid[i][j] += max(grid[i-1][j], grid[i][j+1])\n    return curr\n\n\ngrid = [[1, 2, 3], [4, 5, 6]]\nassert max_sum_grid(grid) == 12\ngrid = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nassert max_sum_grid(grid) == 24\ngrid = [[1, 2, 3, 4], [5, 6, 7, 8]]\nassert max_sum_grid(grid) == 16\ngrid = [[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]\nassert max_sum_grid(grid) == 30\ngrid = [[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]]\nassert max_sum_grid(grid) == 42\n\n\n\"\"\"\nTime complexity is O(n^2).\nSpace complexity is O(n^2).\n\"\"\""
    },
    {
      "rank": 58,
      "score": 3.0984306179345618,
      "candidate": "def max_sum_rec(arr, n, i, j):\n    if i == 0 and j == n-1:\n        return arr[i][j]\n    if j == n-1:\n        return max(arr[i][j], arr[i-1][j] + max_sum_rec(arr, n, i-1, j))\n    return max(arr[i][j], arr[i-1][j] + max_sum_rec(arr, n, i-1, j), max_sum_rec(arr, n, i, j-1))\n\n\ndef max_sum(arr, n):\n    return max_sum_rec(arr, n, 1, n-1)\n\n\nif __name__ == '__main__':\n    arr = [[1, 2, 7, 10], [4, 3, 8, 9], [2, 1, 9, 10], [6, 5, 1, 8]]\n    print(max_sum(arr, 4))"
    },
    {
      "rank": 59,
      "score": 3.085684140594985,
      "candidate": "from typing import List\n\n\ndef max_sum_of_non_adjacent_elements(arr: List[int], n: int) -> int:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(n)\n    \"\"\"\n\n    # Initialize the dp array\n    dp = [0] * n\n\n    # Initialize the dp array\n    dp[0] = arr[0]\n    dp[1] = max(arr[0], arr[1])\n\n    # Initialize the max_sum\n    max_sum = dp[1]\n\n    # Loop over the array and fill the dp array\n    for i in range(2, n):\n        dp[i] = max(dp[i - 2] + arr[i], dp[i - 1])\n\n        # Update the maximum sum\n        max_sum = max(max_sum, dp[i])\n\n    return max_sum\n\n\nif __name__ == \"__main__\":\n    assert max_sum_of_non_adjacent_elements([2, 1, 3, 1, 5], 5) == 7"
    },
    {
      "rank": 60,
      "score": 3.045880388267751,
      "candidate": "from typing import List\n\n\ndef maximum_sum(arr: List[int]) -> int:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(1)\n    \"\"\"\n    max_sum = 0\n\n    for i in range(1, len(arr)):\n        arr[i] += arr[i - 1]\n        max_sum = max(max_sum, arr[i])\n\n    return max_sum\n\n\nif __name__ == \"__main__\":\n    assert maximum_sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 30"
    },
    {
      "rank": 61,
      "score": 2.993251387631033,
      "candidate": "def get_max_sum(grid, n):\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(1)\n    \"\"\"\n    # sum of top row\n    top_sum = 0\n    for i in range(n):\n        top_sum += grid[0][i]\n\n    # sum of left column\n    left_sum = 0\n    for i in range(n):\n        left_sum += grid[i][0]\n\n    # sum of left and top row\n    left_top_sum = grid[0][0]\n\n    # initialize the current row and column sum\n    cur_row_sum = top_sum\n    cur_col_sum = left_sum\n\n    # sum of top row and left column\n    top_left_sum = top_sum + left_sum - left_top_sum\n\n    for i in range(1, n):\n        cur_row_sum += grid[i][i]\n        cur_col_sum += grid[i][i]\n\n        # sum of top row and left column\n        top_left_sum += grid[i][i]\n\n        # find the maximum sum\n        max_sum = max(top_left_sum, cur_row_sum, cur_col_sum)\n\n        # update top_left_sum\n        top_left_sum = top_left_sum - grid[i - 1][i - 1] + grid[i][i]\n\n        # update top_row_sum\n        top_sum = top_sum - grid[0][i - 1] + grid[0][i]\n\n        # update left_column_sum\n        left_sum = left_sum - grid[i - 1][0] + grid[i][0]\n\n    return max_sum\n\n\nif __name__ == \"__main__\":\n    grid = [[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]]\n    n = 4\n    assert get_max_sum(grid, n"
    },
    {
      "rank": 62,
      "score": 2.982086980445024,
      "candidate": "from typing import List\n\n\ndef get_maximum_sum(arr: List[int]) -> int:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(1)\n    \"\"\"\n    max_sum = arr[0]\n\n    for i in range(1, len(arr)):\n        if arr[i] > arr[i - 1]:\n            max_sum = max(max_sum, arr[i] + arr[i - 1])\n        else:\n            max_sum = max(max_sum, arr[i])\n\n    return max_sum\n\n\nif __name__ == \"__main__\":\n    assert get_maximum_sum([1, 2, 3, 4, 5]) == 13\n    assert get_maximum_sum([1, 2, 3, 4, 5, 5]) == 13\n    assert get_maximum_sum([1, 2, 3, 4, 5, 5, 10]) == 18"
    },
    {
      "rank": 63,
      "score": 2.963994939209833,
      "candidate": "def max_sum_grid(a):\n    # Initialize result\n    result = 0\n\n    # Initialize max sum for each row\n    max_row = [0] * len(a)\n\n    # Initialize max sum for each column\n    max_col = [0] * len(a[0])\n\n    # Calculate max sum for each row\n    for i in range(len(a)):\n        for j in range(len(a[i])):\n            # Calculate max sum for each row\n            max_row[i] = max(max_row[i], a[i][j])\n\n    # Calculate max sum for each column\n    for j in range(len(a[0])):\n        for i in range(len(a)):\n            # Calculate max sum for each column\n            max_col[j] = max(max_col[j], a[i][j])\n\n    # Calculate max sum for grid\n    for i in range(len(a)):\n        for j in range(len(a[i])):\n            # Find max sum in row i and column j\n            result = max(result, max_row[i] + max_col[j] - a[i][j])\n\n    return result\n\n\ndef main():\n    a = [\n        [1, 2, 3, 4, 5],\n        [6, 7, 8, 9, 10],\n        [11, 12, 13, 14, 15],\n        [16, 17, 18, 19, 20],\n        [21, 22, 23, 24, 25]\n    ]\n    print(\"Result: \" + str(max_sum_grid(a)))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 64,
      "score": 2.930867849414408,
      "candidate": "def max_sum_grid(arr):\n    n = len(arr)\n    dp = [[0 for _ in range(n)] for _ in range(n)]\n    dp[0][0] = arr[0][0]\n    for i in range(1, n):\n        dp[0][i] = dp[0][i-1] + arr[0][i]\n    for i in range(1, n):\n        dp[i][0] = dp[i-1][0] + arr[i][0]\n    for i in range(1, n):\n        for j in range(1, n):\n            dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + arr[i][j]\n    return dp[n-1][n-1]\n\narr = [[1, 2, 3],\n       [4, 5, 6]]\n\nprint(max_sum_grid(arr))"
    },
    {
      "rank": 65,
      "score": 2.9071705116680913,
      "candidate": "from typing import List\n\n\ndef max_sum_grid(grid: List[List[int]]) -> int:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(1)\n\n    :param grid: list of lists\n    :return: maximum sum\n    \"\"\"\n\n    if not grid:\n        return 0\n\n    rows, cols = len(grid), len(grid[0])\n\n    if cols == 0:\n        return 0\n\n    prev_sum = grid[0][0]\n    curr_sum = grid[0][0]\n\n    for i in range(1, cols):\n        prev_sum = grid[0][i] + max(prev_sum, 0)\n        curr_sum = grid[0][i] + curr_sum\n\n    for j in range(1, rows):\n        prev_sum = grid[j][0] + max(prev_sum - cols + 1, 0)\n        curr_sum = grid[j][0] + curr_sum\n\n        for i in range(1, cols):\n            prev_sum, curr_sum = (\n                curr_sum,\n                grid[j][i] + max(prev_sum - 1, curr_sum - cols, 0),\n            )\n\n    return curr_sum\n\n\nif __name__ == \"__main__\":\n    assert max_sum_grid([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 25\n    assert max_sum_grid([[1, 2], [4, 5]]) == 11\n    assert max_sum_grid([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]]) == 100"
    },
    {
      "rank": 66,
      "score": 2.890164056081244,
      "candidate": "def max_sum_adjacent_2xn(arr):\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(n)\n    \"\"\"\n    if not arr or len(arr) == 0:\n        return 0\n\n    size = len(arr)\n    dp = [0] * size\n    dp[0] = arr[0]\n    dp[1] = max(arr[0], arr[1])\n\n    for i in range(2, size):\n        dp[i] = max(arr[i], arr[i] + dp[i - 2])\n\n    return dp[size - 1]\n\n\ndef max_sum_adjacent_2xn2(arr):\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(1)\n    \"\"\"\n    if not arr or len(arr) == 0:\n        return 0\n\n    size = len(arr)\n    prev_prev = arr[0]\n    prev = max(arr[0], arr[1])\n    max_sum = prev\n\n    for i in range(2, size):\n        max_sum = max(max_sum, arr[i] + prev_prev)\n        prev_prev = prev\n        prev = max(max_sum, arr[i])\n\n    return max_sum"
    },
    {
      "rank": 67,
      "score": 2.887111849756732,
      "candidate": "from typing import List\n\n\ndef get_max_sum_grid(grid: List[List[int]]) -> int:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(1)\n    \"\"\"\n\n    def get_max_sum_helper(grid: List[List[int]], row: int, col: int, visited: List[List[bool]]) -> int:\n        if row == 0:\n            return grid[row][col]\n        if visited[row][col]:\n            return 0\n        visited[row][col] = True\n\n        left_sum = get_max_sum_helper(grid, row, col - 1, visited)\n        right_sum = get_max_sum_helper(grid, row, col + 1, visited)\n        up_sum = get_max_sum_helper(grid, row - 1, col, visited)\n        down_sum = get_max_sum_helper(grid, row + 1, col, visited)\n\n        return max(grid[row][col] + left_sum + right_sum, up_sum + down_sum)\n\n    return get_max_sum_helper(grid, 0, 1, [[False for _ in range(len(grid[0]))] for _ in range(len(grid))])\n\n\nif __name__ == \"__main__\":\n    assert get_max_sum_grid([[1, 2, 3], [4, 5, 6]]) == 12"
    },
    {
      "rank": 68,
      "score": 2.8829315215254097,
      "candidate": "def max_sum_grid(grid):\n    n = len(grid[0])\n    dp = [[0]*n for i in range(2)]\n    dp[0][0] = grid[0][0]\n    dp[1][0] = grid[1][0]\n    for i in range(1, n):\n        dp[0][i] = max(dp[0][i-1], dp[1][i-1]) + grid[0][i]\n        dp[1][i] = max(dp[0][i-1], dp[1][i-1]) + grid[1][i]\n    return max(dp[0][n-1], dp[1][n-1])\n\ngrid = [[2, 3, 7, 10, 12], [1, 6, 8, 10, 15], [4, 1, 3, 12, 16], [7, 8, 11, 14, 20]]\nprint(max_sum_grid(grid))"
    },
    {
      "rank": 69,
      "score": 2.882923312638332,
      "candidate": "def maximum_sum(arr):\n    \"\"\"\n    arr: list of list of int\n    return: int\n    \"\"\"\n    # Your code here\n    if len(arr) == 1:\n        return arr[0][0]\n    if len(arr) == 2:\n        return max(arr[0][0], arr[1][0], arr[0][1] + arr[1][1])\n\n    max_sum = float('-inf')\n    max_sum_l = float('-inf')\n    max_sum_r = float('-inf')\n    for i in range(len(arr[0])):\n        max_sum_l = max(max_sum_l, arr[0][i])\n        if i == 0:\n            max_sum = max(max_sum, max_sum_l)\n        else:\n            max_sum = max(max_sum, max_sum_l + arr[1][i - 1])\n\n    for i in range(len(arr[1])):\n        max_sum_r = max(max_sum_r, arr[1][i])\n        if i == 0:\n            max_sum = max(max_sum, max_sum_r)\n        else:\n            max_sum = max(max_sum, max_sum_r + arr[0][i - 1])\n\n    return max_sum"
    },
    {
      "rank": 70,
      "score": 2.8541531251033616,
      "candidate": "from typing import List\n\n\ndef max_sum_grid(arr: List[List[int]]) -> int:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(1)\n    \"\"\"\n\n    n = len(arr[0])\n\n    if n < 2:\n        return sum(arr[0])\n\n    arr[1][0] += arr[0][0]\n    arr[1][1] += arr[0][1]\n\n    for j in range(2, n):\n        arr[1][j] = max(arr[1][j - 2], arr[1][j - 3]) + arr[0][j]\n\n    for i in range(2, len(arr)):\n        arr[i][0] += arr[i - 2][0]\n        arr[i][1] += max(arr[i - 2][1], arr[i - 2][0])\n\n        for j in range(2, n):\n            arr[i][j] = max(arr[i - 2][j], arr[i - 2][j - 2]) + arr[i][j]\n\n    return max(arr[-1])\n\n\nif __name__ == \"__main__\":\n    assert max_sum_grid([[1, 2, 7, 10], [4, 3, 8, 9], [2, 1, 3, 4], [\n                        6, 5, 1, 7], [10, 8, 1, 3]]) == 33"
    },
    {
      "rank": 71,
      "score": 2.8504963247670663,
      "candidate": "from typing import List\n\n\ndef max_sum_no_adjacent(arr: List[int]) -> int:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(1)\n    \"\"\"\n    total = 0\n    max_sum = 0\n\n    for i in range(len(arr)):\n        total += arr[i]\n        max_sum = max(max_sum, total)\n\n        if i > 0:\n            total = max(total - arr[i - 1], 0)\n\n    return max_sum\n\n\nif __name__ == \"__main__\":\n    assert max_sum_no_adjacent([1, 2, 3, 4, 5, 6]) == 12"
    },
    {
      "rank": 72,
      "score": 2.8453938120743927,
      "candidate": "from collections import deque\n\n\ndef max_sum_grid(grid):\n    # We'll start from the bottom right corner\n    # and return the maximum sum\n\n    # The maximum sum will be the sum of the\n    # bottom row, which is the rightmost column\n    # since it's the first row\n    max_sum = 0\n\n    # This will be the list of sums in each row\n    sums = []\n\n    # We'll have to traverse the grid in reverse\n    # order so that we can check if the previous\n    # number in a row is greater than the current\n    # number\n    for row in reversed(grid):\n        # We'll use a deque to store the sums\n        # in this row, but we'll also store the\n        # index of the number for reference\n        # We'll also keep a variable to keep track of\n        # the maximum sum in this row\n        row_sums = deque()\n        row_max = 0\n\n        # We'll iterate through this row\n        for i, num in enumerate(row):\n            # We'll check if the previous number\n            # is greater than the current number\n            # If it is, we'll add the current number\n            # to the sum of the previous number\n            # If it isn't, we'll add the current number\n            # to the max_sum\n            if i != 0 and row[i - 1] > num:\n                row_sums.append((row_sums[-1][0] + num, row_sums[-1][1]))\n                row_max = row_sums[-1][0]\n            else:\n                row_sums.append((num, i))\n                row_max = max(row_max, num)\n\n        # We'll check if the maximum sum in this row\n        # is greater than the current maximum sum\n        if row_max > max_sum:\n            max_sum = row_max\n\n        # We'll store the sums of this row\n        sums.append(row_sums)\n\n    return max_sum\n\n\nif __name__ == \"__main__\":\n    grid = [[1, 2"
    },
    {
      "rank": 73,
      "score": 2.836168926701116,
      "candidate": "def max_sum_grid(n, grid):\n    if not grid:\n        return 0\n    if n == 1:\n        return grid[0][0]\n\n    max_sum = 0\n    for i in range(n):\n        if i < n - 1:\n            max_sum = max(max_sum, grid[0][i] + grid[0][i+1])\n        if i < n - 2:\n            max_sum = max(max_sum, grid[1][i] + grid[1][i+1])\n\n    return max_sum\n\nif __name__ == \"__main__\":\n    grid1 = [[1, 1, 1, 1], [1, 2, 2, 1]]\n    grid2 = [[1, 1, 1, 1, 1], [1, 2, 2, 1, 1], [1, 2, 2, 1, 1]]\n    grid3 = [[1, 1, 1, 1, 1], [1, 2, 2, 1, 1], [1, 2, 2, 1, 1], [1, 2, 2, 1, 1]]\n\n    print(max_sum_grid(1, grid1))\n    print(max_sum_grid(2, grid2))\n    print(max_sum_grid(3, grid3))"
    },
    {
      "rank": 74,
      "score": 2.8074588597918417,
      "candidate": "from typing import List\n\n\ndef max_sum_adjacent(arr: List[int]) -> int:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(1)\n    \"\"\"\n    if not arr:\n        return 0\n\n    if len(arr) == 1:\n        return arr[0]\n\n    if len(arr) == 2:\n        return max(arr[0], arr[1])\n\n    max_sum = 0\n\n    for i in range(len(arr) - 2):\n        max_sum = max(max_sum, arr[i] + arr[i + 2])\n\n    return max(max_sum, arr[0] + arr[-1], arr[1] + arr[-2])\n\n\nif __name__ == \"__main__\":\n    assert max_sum_adjacent([1, 2, 3]) == 4\n    assert max_sum_adjacent([1, 2, 3, 4]) == 7\n    assert max_sum_adjacent([1, 2, 3, 4, 5]) == 9\n    assert max_sum_adjacent([1, 2, 3, 4, 5, 6]) == 12\n    assert max_sum_adjacent([1, 2, 3, 4, 5, 6, 7]) == 14\n    assert max_sum_adjacent([1, 2, 3, 4, 5, 6, 7, 8]) == 15"
    },
    {
      "rank": 75,
      "score": 2.769680614520106,
      "candidate": "from typing import List\n\n\ndef max_sum_rec(arr: List[int]) -> int:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(1)\n    \"\"\"\n    max_sum = 0\n    curr_sum = 0\n\n    for idx, val in enumerate(arr):\n        if idx == 0:\n            max_sum = max(0, val)\n            curr_sum = val\n        elif idx == 1:\n            max_sum = max(0, val, val + curr_sum)\n            curr_sum = val\n        else:\n            curr_sum = max(val, val + curr_sum)\n            max_sum = max(max_sum, curr_sum)\n\n    return max_sum\n\n\nif __name__ == \"__main__\":\n    assert max_sum_rec([1, -1, -1, 2, -1, 3]) == 5"
    },
    {
      "rank": 76,
      "score": 2.7671351232148718,
      "candidate": "def max_sum_2xn(matrix: list) -> int:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(1)\n    \"\"\"\n\n    for row in range(1, len(matrix)):\n        matrix[row][0] += matrix[row - 1][0]\n\n    for col in range(1, len(matrix[0])):\n        for row in range(len(matrix)):\n            matrix[row][col] += max(matrix[row][col - 1], matrix[row - 1][col])\n\n    return matrix[-1][-1]\n\n\nif __name__ == \"__main__\":\n    assert max_sum_2xn([[1, 3, 1, 1], [1, 5, 1, 1], [6, 1, 1, 1]]) == 12\n    assert max_sum_2xn([[1, 3, 1], [2, 2, 7], [2, 4, 6], [6, 2, 4]]) == 22"
    },
    {
      "rank": 77,
      "score": 2.760412881077355,
      "candidate": "from typing import List\n\n\ndef max_sum_grid(grid: List[List[int]]) -> int:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(1)\n    \"\"\"\n    rows, cols = len(grid), len(grid[0])\n\n    for row in range(1, rows):\n        grid[row][0] += grid[row - 1][0]\n\n    for col in range(1, cols):\n        grid[0][col] += grid[0][col - 1]\n\n    for row in range(1, rows):\n        for col in range(1, cols):\n            grid[row][col] += max(grid[row - 1][col], grid[row][col - 1])\n\n    return grid[-1][-1]\n\n\nif __name__ == \"__main__\":\n    assert max_sum_grid([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 25"
    },
    {
      "rank": 78,
      "score": 2.749121478207732,
      "candidate": "from typing import List\n\n\ndef max_sum_no_adjacent_numbers(grid: List[int]) -> int:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(1)\n    \"\"\"\n\n    max_sum = 0\n\n    for i in range(1, len(grid)):\n        max_sum = max(grid[i] + max_sum, grid[i - 1])\n\n    return max_sum\n\n\nif __name__ == \"__main__\":\n    assert max_sum_no_adjacent_numbers([1, 2, 3, 1]) == 4"
    },
    {
      "rank": 79,
      "score": 2.7408648908631763,
      "candidate": "def max_sum_grid(grid):\n    if not grid:\n        return 0\n\n    # Create dp array\n    dp = [0] * len(grid[0])\n\n    # Initialize the first row\n    for i in range(len(grid[0])):\n        dp[i] = grid[0][i]\n\n    # Fill the rest of the array\n    for i in range(1, len(grid)):\n        for j in range(len(grid[i])):\n            if j == 0:\n                dp[j] = dp[j] + grid[i][j]\n            else:\n                dp[j] = max(dp[j-1], dp[j]) + grid[i][j]\n\n    return max(dp)\n\n\nif __name__ == \"__main__\":\n    grid = [\n        [1, 1, 1, 1],\n        [2, 2, 2, 2],\n        [1, 1, 1, 1],\n        [2, 2, 2, 2]\n    ]\n    assert max_sum_grid(grid) == 8"
    },
    {
      "rank": 80,
      "score": 2.735119898116481,
      "candidate": "def max_sum_grid(grid):\n    \"\"\"\n    Find the maximum sum such that no two chosen numbers are adjacent.\n\n    Time complexity: O(n).\n    Space complexity: O(1).\n    \"\"\"\n    if not grid:\n        return 0\n\n    # Max sum.\n    max_sum = 0\n    # Previous max sum.\n    prev_max_sum = 0\n    # Max sum without the last element.\n    max_sum_wo_last = 0\n\n    n = len(grid[0])\n\n    for i in range(n):\n        max_sum += grid[0][i]\n\n        if max_sum > prev_max_sum:\n            prev_max_sum = max_sum\n\n        max_sum_wo_last += grid[0][i]\n\n        if max_sum_wo_last < 0:\n            max_sum_wo_last = 0\n\n        if max_sum_wo_last > max_sum:\n            max_sum = max_sum_wo_last\n\n    max_sum = 0\n    prev_max_sum = 0\n    max_sum_wo_last = 0\n\n    for i in range(1, len(grid)):\n        max_sum += grid[i][0]\n\n        if max_sum > prev_max_sum:\n            prev_max_sum = max_sum\n\n        max_sum_wo_last += grid[i][0]\n\n        if max_sum_wo_last < 0:\n            max_sum_wo_last = 0\n\n        if max_sum_wo_last > max_sum:\n            max_sum = max_sum_wo_last\n\n    return prev_max_sum\n\n\ndef main():\n    # Output: 2\n    grid = [[1, 1, 1, 1], [2, 2, 2, 2]]\n    print(max_sum_grid(grid))\n\n    # Output: 4\n    grid = [[1, 1, 1, 1], [2, 2, 2, 2], [3, 3, 3, 3"
    },
    {
      "rank": 81,
      "score": 2.718856235379514,
      "candidate": "def max_sum_grid(grid):\n    n = len(grid)\n    dp = [[0]*n for _ in range(n)]\n    for i in range(n):\n        dp[i][i] = grid[i][i]\n    for i in range(n-1):\n        dp[i][i+1] = grid[i][i] + grid[i+1][i+1]\n    for row in range(n-2, -1, -1):\n        for col in range(row+2, n):\n            dp[row][col] = grid[row][col] + max(dp[row+1][col], dp[row+1][col-1])\n    return max(dp[0][-1], dp[-1][-1])\n\n\nif __name__ == \"__main__\":\n    grid = [[1, 1, 1, 1],\n            [1, 5, 1, 1],\n            [1, 1, 1, 1],\n            [1, 1, 1, 1]]\n    assert max_sum_grid(grid) == 6"
    },
    {
      "rank": 82,
      "score": 2.6996806550405976,
      "candidate": "def max_sum_subarray(arr):\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(1)\n\n    Args:\n       arr(list): Input List\n    Returns:\n       (int): Maximum sum\n    \"\"\"\n    if not arr or len(arr) == 1:\n        return arr[0] if arr else 0\n    if len(arr) == 2:\n        return arr[0] + arr[1]\n    max_sum = -100000\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            if (j - i) > 2:\n                max_sum = max(max_sum, sum(arr[i:j]))\n    return max_sum\n\n\ndef max_sum_subarray_dp(arr):\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(n)\n\n    Args:\n       arr(list): Input List\n    Returns:\n       (int): Maximum sum\n    \"\"\"\n    if not arr or len(arr) == 1:\n        return arr[0] if arr else 0\n    if len(arr) == 2:\n        return arr[0] + arr[1]\n    max_sum = -100000\n    dp = [0] * len(arr)\n    dp[0] = arr[0]\n    dp[1] = arr[0] + arr[1]\n    for i in range(2, len(arr)):\n        dp[i] = max(dp[i - 1], dp[i - 2] + arr[i])\n    return max(dp)\n\n\n# Tests\ndef test_function(test_case):\n    arr = test_case[0]\n    solution = test_case[1]\n    output = max_sum_subarray(arr)\n    if output == solution:\n        print(\"Pass\")\n    else:\n        print(\"Fail\")\n\n\narr = [1, 2, 3, 1]\nsolution = 4\ntest_case ="
    },
    {
      "rank": 83,
      "score": 2.6991466938853015,
      "candidate": "from typing import List\n\n\ndef max_sum_2(matrix: List[List[int]]) -> int:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(1)\n    \"\"\"\n\n    if len(matrix) == 0:\n        return 0\n\n    rows, columns = len(matrix), len(matrix[0])\n\n    max_sum = matrix[0][0]\n\n    for i in range(1, columns):\n        max_sum = max(max_sum, max_sum + matrix[0][i])\n\n    for i in range(1, rows):\n        max_sum = max(max_sum, max_sum + matrix[i][0])\n\n    for i in range(1, rows):\n        for j in range(1, columns):\n            max_sum = max(\n                max_sum,\n                max_sum + matrix[i][j],\n                max_sum + matrix[i - 1][j],\n                max_sum + matrix[i][j - 1],\n            )\n\n    return max_sum\n\n\nif __name__ == \"__main__\":\n    assert max_sum_2([[1, 1], [1, 1]]) == 2\n    assert max_sum_2([[1, 2, 1], [1, 2, 1], [1, 2, 1]]) == 4\n    assert max_sum_2([[1, 2, 3, 1], [1, 2, 3, 1], [1, 2, 3, 1], [1, 2, 3, 1]]) == 10"
    },
    {
      "rank": 84,
      "score": 2.677440122697438,
      "candidate": "from typing import List\n\n\ndef max_sum_adjacent(arr: List[int]) -> int:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(1)\n    \"\"\"\n\n    # max sum to be returned\n    max_sum = 0\n\n    # sum of all elements in arr\n    sum_ = 0\n\n    # sum of elements in current window\n    window_sum = 0\n\n    for i in range(len(arr)):\n        # add the element of current index to the window sum\n        window_sum += arr[i]\n\n        # if the current index is at the end of the window\n        # then remove the first element of the previous window\n        # because the window has moved forward by one.\n        # This is done to prevent choosing same elements adjacent to each other.\n        if i >= 1:\n            window_sum -= arr[i - 1]\n\n        # compare the sum of current window with max sum so far\n        max_sum = max(max_sum, window_sum)\n\n    return max_sum\n\n\nif __name__ == \"__main__\":\n    assert max_sum_adjacent([1, 2, 3, 1]) == 6\n    assert max_sum_adjacent([1, 2, 3, 1, 4, 5, 2]) == 13"
    },
    {
      "rank": 85,
      "score": 2.6615389998470205,
      "candidate": "class Solution:\n    def get_max_sum(self, grid):\n        if len(grid) == 0 or len(grid[0]) == 0:\n            return 0\n        # Initializing the dp matrix\n        dp = [[0 for i in range(len(grid[0]))] for j in range(len(grid))]\n\n        # Finding the maximum sum for the first column\n        for i in range(len(grid)):\n            for j in range(len(grid[0])):\n                if j == 0:\n                    dp[i][j] = grid[i][j]\n                elif j == 1:\n                    dp[i][j] = grid[i][j] + max(dp[i - 1][j - 1], dp[i - 1][j])\n                else:\n                    dp[i][j] = grid[i][j] + max(dp[i - 1][j - 1], dp[i - 1][j])\n\n        # Finding the maximum sum for the first row\n        for i in range(len(grid)):\n            for j in range(len(grid[0])):\n                if i == 0:\n                    dp[i][j] = grid[i][j]\n                elif i == 1:\n                    dp[i][j] = grid[i][j] + max(dp[i - 1][j - 1], dp[i - 1][j])\n                else:\n                    dp[i][j] = grid[i][j] + max(dp[i - 1][j - 1], dp[i - 1][j])\n\n        # Finding the maximum sum for the remaining cells\n        for i in range(1, len(grid)):\n            for j in range(1, len(grid[0])):\n                dp[i][j] = grid[i][j] + max(dp[i - 1][j - 1], dp[i - 1][j])\n\n        return max(dp[len(grid) - 1][len(grid[0]) - 1], dp[len"
    },
    {
      "rank": 86,
      "score": 2.648973453061324,
      "candidate": "def max_sum_rec(arr, n):\n    if n == 1:\n        return arr[0]\n\n    if n == 2:\n        return max(arr[0], arr[1])\n\n    return max(max_sum_rec(arr, n - 1), max_sum_rec(arr, n - 2) + arr[n - 1])\n\n\ndef max_sum_dp(arr, n):\n    if n == 1:\n        return arr[0]\n\n    if n == 2:\n        return max(arr[0], arr[1])\n\n    dp = [0] * n\n    dp[0] = arr[0]\n    dp[1] = max(arr[0], arr[1])\n\n    for i in range(2, n):\n        dp[i] = max(dp[i - 1], dp[i - 2] + arr[i])\n\n    return dp[n - 1]\n\n\ndef main():\n\n    arr = [1, 2, 3, 4]\n    n = len(arr)\n    print(\"Max sum is \" + str(max_sum_rec(arr, n)))\n    print(\"Max sum is \" + str(max_sum_dp(arr, n)))\n\n\nmain()"
    },
    {
      "rank": 87,
      "score": 2.5957531985534064,
      "candidate": "from icecream import ic\n\n\ndef maxSum(A, n):\n    ic(A)\n    ic(n)\n    max_sum = 0\n    max_sum_list = []\n    for i in range(n):\n        max_sum_list.append(max_sum)\n        max_sum += A[i]\n    ic(max_sum_list)\n    max_sum = 0\n    for i in range(n-1):\n        max_sum += A[i+n]\n        max_sum_list.append(max_sum)\n    ic(max_sum_list)\n    return max(max_sum_list)\n\n\nA = [1, 2, 3, 4, 5, 6, 7, 8]\nn = 3\nic(maxSum(A, n))"
    },
    {
      "rank": 88,
      "score": 2.580391238388681,
      "candidate": "from typing import List\n\n\ndef find_max_sum(nums: List[int]) -> int:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(1)\n    \"\"\"\n    max_sum = 0\n\n    for i in range(1, len(nums) - 1):\n        max_sum = max(max_sum, nums[i - 1] + nums[i + 1])\n\n    return max_sum\n\n\nif __name__ == \"__main__\":\n    assert find_max_sum([5, 4, 5, 1, 3]) == 13"
    },
    {
      "rank": 89,
      "score": 2.5459879622393946,
      "candidate": "def max_sum_no_adjacent(grid):\n    grid = [[0] + row + [0] for row in grid]\n    grid = [\n        [0] * (len(grid[0]) + 1)\n    ] + grid + [\n        [0] * (len(grid[0]) + 1)\n    ]\n    max_sum = 0\n\n    for i in range(1, len(grid) - 1):\n        for j in range(1, len(grid[0]) - 1):\n            max_sum = max(\n                max_sum,\n                grid[i][j] + grid[i - 1][j] + grid[i][j + 1] + grid[i + 1][j]\n            )\n\n    return max_sum\n\n\ndef test_max_sum_no_adjacent():\n    assert max_sum_no_adjacent([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]) == 40\n\n\nif __name__ == '__main__':\n    test_max_sum_no_adjacent()"
    },
    {
      "rank": 90,
      "score": 2.493584439832788,
      "candidate": "from typing import List\n\n\ndef max_sum_grid(arr: List[int]) -> int:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(n)\n    \"\"\"\n\n    n = len(arr[0])\n\n    dp = [[0 for _ in range(n)] for _ in range(n)]\n\n    for i in range(n):\n        dp[i][i] = arr[0][i]\n\n    for i in range(n):\n        for j in range(i + 1, n):\n            dp[i][j] = max(arr[0][i] + arr[1][j], arr[1][i] + arr[0][j])\n\n    for i in range(1, n):\n        for j in range(n):\n            if j - i >= 0:\n                dp[i][j] = max(dp[i][j], dp[i][j - 1])\n\n    return dp[n - 1][n - 1]\n\n\nif __name__ == \"__main__\":\n    assert max_sum_grid([[1, 2, 3], [4, 5, 6]]) == 9\n    assert max_sum_grid([[1, 1, 1], [1, 2, 3], [1, 2, 3]]) == 4"
    },
    {
      "rank": 91,
      "score": 2.4711445355220496,
      "candidate": "def max_sum_grid(grid):\n    if not grid:\n        return 0\n\n    rows = len(grid)\n    cols = len(grid[0])\n\n    for i in range(1, rows):\n        grid[i][0] += grid[i - 1][0]\n\n    for i in range(1, cols):\n        grid[0][i] += grid[0][i - 1]\n\n    for i in range(1, rows):\n        for j in range(1, cols):\n            grid[i][j] += max(grid[i - 1][j], grid[i][j - 1])\n\n    return grid[-1][-1]\n\n\nif __name__ == \"__main__\":\n    grid = [[1, 2, 3], [4, 5, 6]]\n    assert max_sum_grid(grid) == 12\n    grid = [[1, 2], [4, 5]]\n    assert max_sum_grid(grid) == 7\n    grid = [[1], [2]]\n    assert max_sum_grid(grid) == 3"
    },
    {
      "rank": 92,
      "score": 2.4245032112888487,
      "candidate": "def max_sum_no_adjacent_numbers(arr):\n    # The idea is to calculate the maximum sum possible for each row\n    # and store it in a list\n    max_sum_arr = []\n    max_sum_arr.append(arr[0][0])\n    max_sum_arr.append(arr[0][1] + arr[0][0])\n\n    for i in range(2, len(arr[0])):\n        max_sum_arr.append(max(max_sum_arr[i - 1], arr[0][i] + max_sum_arr[i - 2]))\n\n    # The maximum sum in the first row is already calculated.\n    # Now we need to calculate the maximum sum for each column\n    for i in range(1, len(arr)):\n        max_sum_arr[0] = max(max_sum_arr[0], arr[i][0] + max_sum_arr[0])\n        max_sum_arr[1] = max(max_sum_arr[1], arr[i][1] + max_sum_arr[0])\n\n        for j in range(2, len(arr[i])):\n            max_sum_arr[j] = max(\n                max_sum_arr[j],\n                arr[i][j] + max_sum_arr[j - 2],\n                arr[i][j] + max_sum_arr[j - 1],\n            )\n\n    return max(max_sum_arr)\n\n\ndef main():\n    arr = [\n        [1, 2, 7, 10, 12, 1],\n        [1, 2, 9, 9, 5, 9],\n        [1, 3, 9, 12, 12, 12],\n        [1, 3, 12, 12, 12, 12],\n    ]\n    result = max_sum_no_adjacent_numbers(arr)\n    print(result)\n\n\nmain()"
    },
    {
      "rank": 93,
      "score": 2.4018966879596646,
      "candidate": "def max_sum_rect(arr):\n    \"\"\"\n    >>> max_sum_rect([[5, 1, 1, 5], [1, 5, 5, 1], [1, 1, 5, 5]])\n    22\n    >>> max_sum_rect([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    24\n    >>> max_sum_rect([[1, 2], [4, 5], [7, 8]])\n    16\n    \"\"\"\n    n = len(arr[0])\n    dp = [[0] * n for i in range(len(arr))]\n    for i in range(len(arr)):\n        for j in range(n):\n            if i == 0 or j == 0:\n                dp[i][j] = arr[i][j]\n            elif j == 1:\n                dp[i][j] = max(dp[i - 1][j - 1], dp[i][j - 1]) + arr[i][j]\n            else:\n                dp[i][j] = max(dp[i - 1][j - 1], dp[i - 1][j]) + arr[i][j]\n    return dp[-1][-1]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 94,
      "score": 2.389578175014489,
      "candidate": "def max_sum_grid(arr):\n    n = len(arr)\n    max_sum = arr[0] + arr[1]\n    for i in range(1, n):\n        max_sum = max(arr[i], max_sum + arr[i])\n    return max_sum\n\n\nprint(max_sum_grid([1, 2, 3, 4, 5, 6]))\nprint(max_sum_grid([1, 2, 3, 4]))\nprint(max_sum_grid([1, 2, 3, 4, 5, 6, 7]))\nprint(max_sum_grid([1, 2, 3, 4, 5, 6, 7, 8]))\nprint(max_sum_grid([1, 2, 3, 4, 5, 6, 7, 8, 9]))\nprint(max_sum_grid([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))"
    },
    {
      "rank": 95,
      "score": 2.3359069755507846,
      "candidate": "def max_sum_grid(arr):\n    n = len(arr)\n    for i in range(1, n):\n        arr[i][0] += max(arr[i-1][0], arr[i-1][1])\n        for j in range(1, n):\n            arr[i][j] += max(arr[i][j-1], arr[i-1][j])\n    return max(arr[n-1])\n\n\narr = [[1, 2, 7, 10],\n       [4, 3, 8, 9],\n       [2, 1, 3, 4],\n       [1, 2, 1, 2]]\n\nprint(max_sum_grid(arr))"
    },
    {
      "rank": 96,
      "score": 2.287625906893272,
      "candidate": "def max_sum_grid(arr):\n    # Write your code here\n    n = len(arr)\n    dp = [[0 for i in range(n)] for j in range(2)]\n\n    for i in range(n):\n        dp[0][i] = arr[i][0]\n        dp[1][i] = arr[i][1]\n\n    for i in range(2, n):\n        dp[0][i] = max(dp[0][i-1], dp[1][i-2])\n        dp[1][i] = dp[0][i-1] + arr[i][1]\n\n    return max(dp[0][n-1], dp[1][n-1])"
    },
    {
      "rank": 97,
      "score": 2.137541083743484,
      "candidate": "from typing import List\n\n\ndef max_sum_rec(arr: List[List[int]], i: int, j: int) -> int:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(1)\n    \"\"\"\n    if i == len(arr) or j == len(arr[0]):\n        return 0\n\n    max_sum_left = max_sum_rec(arr, i, j + 1)\n    max_sum_right = max_sum_rec(arr, i, j + 2)\n\n    return max(arr[i][j] + max(max_sum_left, max_sum_right), max(max_sum_left, max_sum_right))\n\n\ndef max_sum(arr: List[List[int]]) -> int:\n    return max_sum_rec(arr, 0, 0)\n\n\nif __name__ == \"__main__\":\n    assert max_sum([[1, 2], [3, 4]]) == 7\n    assert max_sum([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]]) == 59"
    },
    {
      "rank": 98,
      "score": 2.118479922318633,
      "candidate": "def max_sum_2xn(A):\n    n = len(A)\n    dp = [[0 for _ in range(n)] for _ in range(2)]\n    for i in range(n):\n        for j in range(n):\n            if i == 0:\n                dp[i ^ 1][j] = max(A[i][j], dp[i ^ 1][j - 1])\n            elif j == 0:\n                dp[i ^ 1][j] = max(A[i][j], dp[i ^ 1][j])\n            else:\n                dp[i ^ 1][j] = max(A[i][j] + dp[i ^ 1][j - 1], dp[i ^ 1][j])\n    return dp[0][n - 1]\n\n\nA = [\n    [1, 2, 3],\n    [4, 5, 6],\n    [7, 8, 9]\n]\nprint(max_sum_2xn(A))"
    },
    {
      "rank": 99,
      "score": 2.043359877671101,
      "candidate": "from typing import List\n\n\ndef max_sum_in_grid(grid: List[List[int]]) -> int:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(1)\n    \"\"\"\n    n = len(grid[0])\n\n    if n == 0:\n        return 0\n\n    prev_max = max_sum = grid[0][0]\n\n    for i in range(1, n):\n        prev_max = max(prev_max - grid[0][i - 1], 0)\n        max_sum = max(max_sum, prev_max + grid[0][i])\n\n    for i in range(1, len(grid)):\n        prev_max = max(prev_max - grid[i - 1][0], 0)\n        max_sum = max(max_sum, prev_max + grid[i][0])\n\n    for i in range(1, len(grid)):\n        for j in range(1, n):\n            prev_max = max(prev_max - grid[i - 1][j - 1], 0)\n            max_sum = max(max_sum, prev_max + grid[i][j])\n\n    return max_sum\n\n\nif __name__ == \"__main__\":\n    assert max_sum_in_grid([[1, 1], [1, 1]]) == 3\n    assert max_sum_in_grid([[1, 2], [1, 2]]) == 3\n    assert max_sum_in_grid([[1, 2, 3], [1, 2, 3]]) == 7\n    assert max_sum_in_grid([[1, 2, 3, 4], [1, 2, 3, 4]]) == 10"
    },
    {
      "rank": 100,
      "score": 2.006215542699554,
      "candidate": "def max_sum_grid(arr):\n    # Initialize the sum of the whole grid to 0\n    sum_grid = 0\n\n    # Initialize the sum of the first row to 0\n    sum_row_1 = 0\n\n    # Initialize the sum of the second row to 0\n    sum_row_2 = 0\n\n    # Loop through the array\n    for i in range(len(arr)):\n        # If the first number in the array is less than the second number, then the first row will be the sum of the first and second numbers\n        if arr[0] < arr[1]:\n            sum_row_1 += arr[0]\n            sum_row_1 += arr[1]\n        # Otherwise, the first row will be the sum of the second number\n        else:\n            sum_row_1 += arr[1]\n\n        # If the third number in the array is less than the fourth number, then the second row will be the sum of the third and fourth numbers\n        if arr[2] < arr[3]:\n            sum_row_2 += arr[2]\n            sum_row_2 += arr[3]\n        # Otherwise, the second row will be the sum of the fourth number\n        else:\n            sum_row_2 += arr[3]\n\n        # Add the sum of the first row to the sum of the whole grid\n        sum_grid += sum_row_1\n\n        # Swap the sums of the first and second rows\n        sum_row_1, sum_row_2 = sum_row_2, sum_row_1\n\n        # If the fifth number in the array is less than the sixth number, then the first row will be the sum of the fifth and sixth numbers\n        if arr[4] < arr[5]:\n            sum_row_1 += arr[4]\n            sum_row_1 += arr[5]\n        # Otherwise, the first row will be the sum of the sixth number\n        else:\n            sum_row_1 += arr[5]\n\n        # If the seventh number in the array is less than the eighth number, then the second row will be the sum of the seventh and eighth numbers\n        if arr[6] < arr[7"
    }
  ]
}