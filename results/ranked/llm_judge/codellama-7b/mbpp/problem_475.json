{
  "timestamp": "2025-09-15T01:54:23.852580",
  "method": "improved_llm_judge",
  "judge_model": "codellama/CodeLlama-7b-Python-hf",
  "target_model": "codellama-7b",
  "dataset": "mbpp",
  "problem_number": 475,
  "total_candidates": 100,
  "results": [
    {
      "rank": 1,
      "score": 10.0,
      "candidate": "def binomial_probability(n, k, p):\n    return (factorial(n) / (factorial(k) * factorial(n - k))) * (p ** k) * (1 - p) ** (n - k)\n\n\ndef factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n - 1)\n\n\nif __name__ == \"__main__\":\n    print(binomial_probability(5, 2, 0.5))"
    },
    {
      "rank": 2,
      "score": 10.0,
      "candidate": "import math\n\ndef binomial_probability(n, k, p):\n    \"\"\"\n    Binomial probability formula\n    \"\"\"\n    return math.factorial(n) / (math.factorial(k) * math.factorial(n - k)) * (p ** k) * ((1 - p) ** (n - k))\n\ndef test_binomial_probability():\n    \"\"\"\n    Tests for binomial_probability\n    \"\"\"\n    assert binomial_probability(5, 2, 0.3) == 0.19200000000000002\n    assert binomial_probability(10, 7, 0.2) == 0.000025120000000000002\n    assert binomial_probability(10, 7, 0.2) == 0.000025120000000000002\n\nif __name__ == '__main__':\n    test_binomial_probability()"
    },
    {
      "rank": 3,
      "score": 10.0,
      "candidate": "def binomial_probability(n, k, p):\n    \"\"\"\n    >>> binomial_probability(10, 2, 0.25)\n    0.1875\n    >>> binomial_probability(10, 4, 0.25)\n    0.25\n    >>> binomial_probability(10, 4, 0.5)\n    0.0625\n    >>> binomial_probability(10, 6, 0.25)\n    0.03125\n    >>> binomial_probability(10, 7, 0.25)\n    0.015625\n    >>> binomial_probability(10, 10, 0.25)\n    0.00390625\n    \"\"\"\n    if k == 0:\n        return 1\n    if k == n:\n        return 1\n    if k > n:\n        return 0\n\n    return (\n        binomial_probability(n - 1, k - 1, p) * p\n        + binomial_probability(n - 1, k, p) * (1 - p)\n    )\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 4,
      "score": 10.0,
      "candidate": "import math\n\n\ndef binomial_probability(n, k, p):\n    \"\"\"\n    Computes the binomial probability for the given number.\n\n    :param n: Number of trials.\n    :param k: Number of success.\n    :param p: Probability of success.\n    :return: Binomial probability for the given number.\n    \"\"\"\n    return math.factorial(n) / (math.factorial(k) * math.factorial(n - k)) * p ** k * (1 - p) ** (n - k)\n\n\nif __name__ == \"__main__\":\n    print(binomial_probability(50, 20, 0.5))"
    },
    {
      "rank": 5,
      "score": 10.0,
      "candidate": "def binomial_probability(n, k, p):\n    \"\"\"\n    Calculates binomial probability using combination and probability formula.\n\n    >>> binomial_probability(5, 3, 0.3)\n    0.442\n    >>> binomial_probability(10, 5, 0.5)\n    0.752\n    >>> binomial_probability(10, 4, 0.5)\n    0.437\n    >>> binomial_probability(10, 6, 0.5)\n    0.252\n    \"\"\"\n    combination = factorial(n) / (factorial(k) * factorial(n - k))\n    probability = combination * (p ** k) * (1 - p) ** (n - k)\n    return round(probability, 3)\n\n\ndef factorial(n):\n    \"\"\"\n    Calculates factorial for the given number.\n\n    >>> factorial(4)\n    24\n    >>> factorial(5)\n    120\n    \"\"\"\n    result = 1\n    for i in range(1, n + 1):\n        result *= i\n    return result\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 6,
      "score": 10.0,
      "candidate": "def binomial_probability(n, k, p):\n    \"\"\"\n    Compute the binomial probability for a given number.\n    \"\"\"\n    return (factorial(n) / (factorial(k) * factorial(n - k))) * (p ** k) * (1 - p) ** (n - k)\n\n\ndef factorial(num):\n    \"\"\"\n    Compute the factorial of a number.\n    \"\"\"\n    if num <= 1:\n        return 1\n    return num * factorial(num - 1)"
    },
    {
      "rank": 7,
      "score": 10.0,
      "candidate": "import math\n\n\ndef binomial_probability(n: int, k: int, p: float) -> float:\n    \"\"\"\n    Binomial probability formula.\n    \"\"\"\n    return math.pow(p, k) * math.pow((1 - p), n - k) * math.factorial(n) / math.factorial(k)\n\n\nif __name__ == \"__main__\":\n    print(binomial_probability(30, 10, 0.5))"
    },
    {
      "rank": 8,
      "score": 10.0,
      "candidate": "def binomial_probability(n: int, k: int, p: float) -> float:\n    \"\"\"\n    Use the formula:\n    nCr * (p ** k) * (1 - p) ** (n - k)\n    \"\"\"\n    return (\n        (1.0 * n) / (1.0 * k) * (1.0 * n - 1.0 * k)\n        * (1.0 * k) ** (n - k)\n        * (1.0 * k) ** (n - k)\n    )\n\n\nif __name__ == \"__main__\":\n    print(binomial_probability(30, 10, 0.5))"
    },
    {
      "rank": 9,
      "score": 10.0,
      "candidate": "class Solution:\n    def binomial_prob(self, n: int, k: int, p: float) -> float:\n        \"\"\"\n        n! / (k! * (n - k)!) * p^k * (1 - p)^(n - k)\n        \"\"\"\n        return self.factorial(n) / (self.factorial(k) * self.factorial(n - k)) * p ** k * (1 - p) ** (n - k)\n\n    def factorial(self, n: int) -> int:\n        return 1 if n == 0 else n * self.factorial(n - 1)\n\n\nif __name__ == \"__main__\":\n    s = Solution()\n    assert s.binomial_prob(2, 1, 0.5) == 0.5\n    assert s.binomial_prob(10, 6, 0.5) == 0.35185185185185184"
    },
    {
      "rank": 10,
      "score": 10.0,
      "candidate": "def binomial_prob(n, k, p):\n    \"\"\"\n    :param n: int - number of trials\n    :param k: int - number of success\n    :param p: float - probability of success\n    :return: float - probability of success\n    \"\"\"\n    return (float(p**k * (1 - p)**(n - k)) * n) / math.factorial(n)\n\n\nif __name__ == '__main__':\n    print(binomial_prob(10, 6, 0.3))"
    },
    {
      "rank": 11,
      "score": 10.0,
      "candidate": "class Solution(object):\n    def binomial(self, n, k):\n        \"\"\"\n        :type n: int\n        :type k: int\n        :rtype: float\n        \"\"\"\n        if n == k or k == 0:\n            return 1\n\n        # C(n, k) = C(n - 1, k - 1) + C(n - 1, k)\n        return self.binomial(n - 1, k - 1) + self.binomial(n - 1, k)\n\n\nsolution = Solution()\nprint(solution.binomial(4, 2))"
    },
    {
      "rank": 12,
      "score": 10.0,
      "candidate": "from functools import lru_cache\n\n\n@lru_cache(maxsize=None)\ndef binomial(n, k):\n    \"\"\"\n    Computes binomial probability for the given number.\n\n    Args:\n        n: int\n        k: int\n\n    Returns: float\n\n    Raises:\n        ValueError: If n or k is not positive.\n    \"\"\"\n    if n < 0 or k < 0:\n        raise ValueError(\"n and k must be positive\")\n    if n == k:\n        return 1\n    if k == 0:\n        return 1\n    return binomial(n - 1, k) + binomial(n - 1, k - 1)"
    },
    {
      "rank": 13,
      "score": 10.0,
      "candidate": "def binomial_probability(n, k, p):\n    \"\"\"\n    Calculates the probability of k successes in n trials,\n    with probability p of success for each trial.\n    \"\"\"\n    return (factorial(n) / (factorial(k) * factorial(n - k))) * (p ** k) * ((1 - p) ** (n - k))\n\n\ndef factorial(n):\n    \"\"\"\n    Calculates n factorial.\n    \"\"\"\n    return 1 if n == 0 else n * factorial(n - 1)\n\n\ndef test_binomial_probability():\n    \"\"\"\n    >>> binomial_probability(10, 5, 0.5)\n    0.3515625\n    \"\"\"\n    pass\n\n\nif __name__ == \"__main__\":\n    test_binomial_probability()"
    },
    {
      "rank": 14,
      "score": 10.0,
      "candidate": "import math\nfrom typing import Tuple\n\n\ndef binomial_probability(n: int, k: int) -> float:\n    \"\"\"\n    Binomial probability\n    n: number of trials\n    k: number of successes\n    \"\"\"\n    if n < 1:\n        raise ValueError(\"Number of trials must be greater than 0\")\n    if k < 0 or k > n:\n        raise ValueError(\"Number of successes must be between 0 and n\")\n    return math.factorial(n) / (math.factorial(k) * math.factorial(n - k))\n\n\ndef binomial_probability_simplified(n: int, k: int) -> float:\n    \"\"\"\n    Binomial probability\n    n: number of trials\n    k: number of successes\n    \"\"\"\n    if n < 1:\n        raise ValueError(\"Number of trials must be greater than 0\")\n    if k < 0 or k > n:\n        raise ValueError(\"Number of successes must be between 0 and n\")\n    return math.comb(n, k)\n\n\nif __name__ == \"__main__\":\n    n, k = 10, 2\n    print(f\"Probability of {k} successes in {n} trials is:\")\n    print(binomial_probability(n, k))\n    print(binomial_probability_simplified(n, k))"
    },
    {
      "rank": 15,
      "score": 10.0,
      "candidate": "from math import factorial\n\n\ndef binomial_probability(n, k, p):\n    \"\"\"\n    >>> binomial_probability(10, 5, 0.5)\n    0.0009765625\n    \"\"\"\n    return factorial(n) / (factorial(k) * factorial(n - k)) * p ** k * (1 - p) ** (n - k)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 16,
      "score": 10.0,
      "candidate": "import math\nfrom functools import lru_cache\n\n\n@lru_cache\ndef binomial_probability(n: int, k: int, p: float) -> float:\n    \"\"\"\n    >>> binomial_probability(10, 5, 0.5)\n    0.0009765625\n    \"\"\"\n    if k > n:\n        raise ValueError(\n            f\"k ({k}) must be less than or equal to n ({n})\")\n    if p > 1 or p <= 0:\n        raise ValueError(f\"p ({p}) must be in the range (0, 1]\")\n\n    if k == 0:\n        return 1\n\n    return binomial_probability(n - 1, k - 1, p) * p * (1 - p)\n\n\ndef binomial_probability_math(n: int, k: int, p: float) -> float:\n    \"\"\"\n    >>> binomial_probability_math(10, 5, 0.5)\n    0.0009765625\n    \"\"\"\n    if k > n:\n        raise ValueError(\n            f\"k ({k}) must be less than or equal to n ({n})\")\n    if p > 1 or p <= 0:\n        raise ValueError(f\"p ({p}) must be in the range (0, 1]\")\n\n    return math.factorial(n) / (math.factorial(k) * math.factorial(n - k)) * math.pow(p, k) * math.pow(1 - p, n - k)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 17,
      "score": 10.0,
      "candidate": "from math import factorial\n\n\ndef binomial_probability(x: int, n: int, p: float) -> float:\n    \"\"\"\n    Binomial probability.\n    :param x: number of successes.\n    :param n: number of trials.\n    :param p: probability of success.\n    :return: probability of x successes in n trials with probability of success p.\n    >>> binomial_probability(1, 10, 0.5)\n    0.0196078431372549\n    >>> binomial_probability(5, 10, 0.5)\n    0.048015873015873\n    >>> binomial_probability(3, 10, 0.5)\n    0.067579365079365\n    >>> binomial_probability(2, 10, 0.5)\n    0.091576058823529\n    >>> binomial_probability(4, 10, 0.5)\n    0.140625\n    >>> binomial_probability(10, 10, 0.5)\n    0.5\n    \"\"\"\n    return factorial(n) / (factorial(x) * factorial(n - x)) * p ** x * (1 - p) ** (n - x)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 18,
      "score": 10.0,
      "candidate": "import math\n\n\ndef binomial_probability(n: int, k: int, p: float) -> float:\n    \"\"\"\n    Binomial Probability\n    >>> binomial_probability(4, 2, 0.3)\n    0.4604\n    >>> binomial_probability(4, 2, 0.5)\n    0.25\n    >>> binomial_probability(10, 5, 0.6)\n    0.016762167621676216\n    >>> binomial_probability(5, 3, 0.4)\n    0.012\n    >>> binomial_probability(5, 3, 0.5)\n    0.003\n    \"\"\"\n    return (\n        math.factorial(n)\n        // math.factorial(k)\n        // math.factorial(n - k)\n        * (p ** k)\n        * ((1 - p) ** (n - k))\n    )\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 19,
      "score": 10.0,
      "candidate": "def binomial_probability(n, k, p):\n    return ((pow(p, k) * pow(1-p, n-k)) / factorial(n))\n\ndef factorial(n):\n    return reduce(lambda x, y: x*y, range(1, n+1))\n\nassert binomial_probability(10, 6, 0.2) == 0.355625256451\nassert binomial_probability(100, 50, 0.5) == 0.00215061718529"
    },
    {
      "rank": 20,
      "score": 10.0,
      "candidate": "def binomial_probability(n, k, p):\n    \"\"\"\n    >>> binomial_probability(10, 2, 0.5)\n    0.25\n    >>> binomial_probability(10, 3, 0.5)\n    0.125\n    >>> binomial_probability(10, 4, 0.5)\n    0.0625\n    >>> binomial_probability(10, 5, 0.5)\n    0.03125\n    \"\"\"\n    return (p ** k) * ((1 - p) ** (n - k))\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 21,
      "score": 10.0,
      "candidate": "import math\n\n\ndef binomial_probability(n, k, p):\n    \"\"\"\n    :param: n - number of trials\n    :param: k - number of successful trials\n    :param: p - probability of a single trial\n    :return: probability of k successful trials in n trials\n\n    n! / (k! * (n - k)!) * (p)^k * (1 - p)^(n - k)\n    \"\"\"\n    return math.factorial(n) / (math.factorial(k) * math.factorial(n - k)) * (p ** k) * ((1 - p) ** (n - k))\n\n\nif __name__ == \"__main__\":\n    n = int(input(\"Enter number of trials: \"))\n    k = int(input(\"Enter number of successful trials: \"))\n    p = float(input(\"Enter probability of a single trial: \"))\n    print(f\"Probability of {k} successful trials in {n} trials is {binomial_probability(n, k, p)}\")"
    },
    {
      "rank": 22,
      "score": 10.0,
      "candidate": "import math\n\n\ndef binomial_probability(n, k, p):\n    \"\"\"\n    Computes binomial probability for the given number.\n    :param n: Number of trials\n    :param k: Number of success\n    :param p: Probability of success\n    :return: Binomial probability\n    \"\"\"\n    return math.factorial(n) / (math.factorial(k) * math.factorial(n - k)) * (p ** k) * ((1 - p) ** (n - k))\n\n\nif __name__ == \"__main__\":\n    print(binomial_probability(3, 2, 0.5))"
    },
    {
      "rank": 23,
      "score": 10.0,
      "candidate": "from __future__ import annotations\n\nfrom math import factorial\n\n\ndef binomial_probability(n: int, k: int) -> float:\n    \"\"\"\n    Binomial probability.\n    >>> binomial_probability(10, 5)\n    0.0009765625\n    >>> binomial_probability(10, 10)\n    0.0009765625\n    >>> binomial_probability(10, 1)\n    0.1\n    >>> binomial_probability(10, 11)\n    0.0\n    >>> binomial_probability(10, 3)\n    0.045\n    \"\"\"\n    return factorial(n) / (factorial(k) * factorial(n - k))\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 24,
      "score": 10.0,
      "candidate": "def binomial_probability(n, k, p):\n    \"\"\"\n    Binomial probability formula.\n    :param n: number of trials.\n    :param k: number of successes.\n    :param p: probability of success.\n    :return: binomial probability.\n    >>> binomial_probability(10, 5, 0.5)\n    0.3023590525578777\n    >>> binomial_probability(10, 6, 0.5)\n    0.1601051535659398\n    >>> binomial_probability(10, 7, 0.5)\n    0.03421476140275167\n    >>> binomial_probability(10, 8, 0.5)\n    0.002904256486518972\n    >>> binomial_probability(10, 9, 0.5)\n    0.0007587369965195478\n    >>> binomial_probability(10, 10, 0.5)\n    0.00001397972649782873\n    >>> binomial_probability(10, 11, 0.5)\n    0.0\n    \"\"\"\n    return (\n        (factorial(n) / (factorial(k) * factorial(n - k))) * (p ** k) * ((1 - p) ** (n - k))\n    )\n\n\ndef factorial(n):\n    \"\"\"\n    Factorial of n.\n    :param n: number\n    :return: factorial of n.\n    >>> factorial(5)\n    120\n    >>> factorial(10)\n    3628800\n    >>> factorial(1)\n    1\n    >>> factorial(0)\n    1\n    >>> factorial(-1)\n    Traceback (most recent call last):\n        ...\n    ValueError: n must be"
    },
    {
      "rank": 25,
      "score": 10.0,
      "candidate": "def binomial_probability(n: int, k: int, p: float) -> float:\n    \"\"\"\n    >>> binomial_probability(10, 5, 0.5)\n    0.0009765625\n    \"\"\"\n    prob = 1.0\n    for i in range(k + 1, n + 1):\n        prob *= (1 - p) / (1 - p**i)\n    return prob\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 26,
      "score": 10.0,
      "candidate": "from math import factorial\n\n\ndef binomial_probability(n: int, k: int, p: float) -> float:\n    \"\"\"\n    Binomial probability\n    >>> binomial_probability(5, 2, 0.5)\n    0.00019661119202939166\n    >>> binomial_probability(10, 7, 0.5)\n    0.000971441140073422\n    >>> binomial_probability(15, 10, 0.5)\n    0.0002465753424657534\n    >>> binomial_probability(20, 15, 0.5)\n    0.00019661119202939166\n    \"\"\"\n    return (\n        (factorial(n) // (factorial(k) * factorial(n - k))) * (p ** k) * ((1 - p) ** (n - k))\n    )\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 27,
      "score": 10.0,
      "candidate": "def binomial_probability(n: int, k: int, p: float) -> float:\n    \"\"\"\n    >>> binomial_probability(4, 2, 0.3)\n    0.4004255319148932\n    >>> binomial_probability(3, 1, 0.6)\n    0.3746475114206054\n    \"\"\"\n    return (\n        factorial(n)\n        / (factorial(k) * factorial(n - k))\n        * p ** k\n        * (1 - p) ** (n - k)\n    )\n\n\ndef factorial(n: int) -> int:\n    if n == 0:\n        return 1\n    return n * factorial(n - 1)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 28,
      "score": 10.0,
      "candidate": "import math\nfrom typing import Tuple\n\n\ndef binomial_probability(n: int, k: int) -> float:\n    \"\"\"\n    >>> binomial_probability(10, 2)\n    0.36787944117144233\n    >>> binomial_probability(5, 2)\n    0.1\n    >>> binomial_probability(2, 2)\n    0.5\n    >>> binomial_probability(2, 5)\n    0.0\n    >>> binomial_probability(1, 1)\n    1.0\n    \"\"\"\n    if k > n:\n        return 0.0\n    return math.factorial(n) // (math.factorial(k) * math.factorial(n - k))\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 29,
      "score": 10.0,
      "candidate": "from math import factorial\n\n\ndef binomial_probability(n, k, p):\n    \"\"\"\n    Compute binomial probability\n    \"\"\"\n    return factorial(n) / (factorial(k) * factorial(n - k)) * p**k * (1 - p)**(n - k)\n\n\ndef test_binomial_probability():\n    \"\"\"\n    >>> binomial_probability(1, 1, 0.6)\n    0.6\n    >>> binomial_probability(2, 1, 0.6)\n    0.6\n    >>> binomial_probability(3, 2, 0.6)\n    0.96\n    >>> binomial_probability(4, 3, 0.6)\n    0.96\n    >>> binomial_probability(5, 4, 0.6)\n    0.96\n    >>> binomial_probability(10, 6, 0.6)\n    0.96\n    >>> binomial_probability(10, 9, 0.6)\n    0.96\n    \"\"\"\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 30,
      "score": 10.0,
      "candidate": "import math\n\n\ndef binomial_probability(n, k, p):\n    return math.factorial(n) / (math.factorial(k) * math.factorial(n - k)) * p ** k * (1 - p) ** (n - k)\n\n\nif __name__ == \"__main__\":\n    print(binomial_probability(30, 10, 0.5))"
    },
    {
      "rank": 31,
      "score": 10.0,
      "candidate": "def binomial_probability(n, k, p, q):\n    \"\"\"\n    Calculate the probability of the number of k successes in n trials,\n    if the probability of success is p and the probability of failure is q.\n\n    :param n: number of trials\n    :type n: int\n    :param k: number of successes\n    :type k: int\n    :param p: probability of success\n    :type p: float\n    :param q: probability of failure\n    :type q: float\n    :return: probability of the number of k successes in n trials\n    :rtype: float\n    \"\"\"\n    return (q ** (n - k)) * (p ** k)\n\n\nif __name__ == \"__main__\":\n    print(binomial_probability(10, 6, 0.8, 0.2))"
    },
    {
      "rank": 32,
      "score": 10.0,
      "candidate": "def binomial_probability(n: int, k: int, p: float) -> float:\n    \"\"\"\n    Binomial Probability.\n    >>> binomial_probability(10, 5, 0.5)\n    0.0009765625\n    >>> binomial_probability(20, 10, 0.5)\n    0.0009765625\n    >>> binomial_probability(20, 10, 0.9)\n    0.0009765625\n    >>> binomial_probability(20, 10, 0.1)\n    0.0009765625\n    >>> binomial_probability(20, 10, 0.0)\n    0.0\n    >>> binomial_probability(20, 10, 1.0)\n    1.0\n    >>> binomial_probability(20, 20, 0.5)\n    0.0009765625\n    >>> binomial_probability(20, 20, 0.9)\n    0.0009765625\n    >>> binomial_probability(20, 20, 0.1)\n    0.0009765625\n    >>> binomial_probability(20, 20, 0.0)\n    0.0\n    >>> binomial_probability(20, 20, 1.0)\n    1.0\n    \"\"\"\n    return (\n        (p ** k)\n        * ((1 - p) ** (n - k))\n        * (1 / (n ** n))\n        * (1 / (k ** k))\n        * (1 / ((n - k) ** (n - k)))\n    )\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 33,
      "score": 10.0,
      "candidate": "import math\nfrom functools import lru_cache\n\n\n@lru_cache(maxsize=None)\ndef binomial_probability(n, k, p):\n    if n == k:\n        return 1\n    if k == 0:\n        return 1\n    return math.floor(\n        (binomial_probability(n - 1, k - 1, p) * (1 - p))\n        + (binomial_probability(n - 1, k, p) * p)\n    )\n\n\nif __name__ == \"__main__\":\n    print(binomial_probability(5, 1, 0.5))"
    },
    {
      "rank": 34,
      "score": 10.0,
      "candidate": "import math\n\n\ndef binomial_probability(number: int, n: int, p: float) -> float:\n    \"\"\"\n    Calculates the binomial probability for the given number.\n    :param number: number to calculate the probability for.\n    :param n: size of the set.\n    :param p: probability of success.\n    :return: binomial probability.\n    >>> binomial_probability(0, 10, 0.5)\n    0.7262474521971155\n    \"\"\"\n    return math.pow(p, number) * math.pow(1 - p, n - number) * math.factorial(n) / math.factorial(number)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 35,
      "score": 10.0,
      "candidate": "import numpy as np\n\n\ndef binomial_prob(n, k, p):\n    return np.math.factorial(n) / (np.math.factorial(k) * np.math.factorial(n-k)) * (p ** k) * (1 - p) ** (n - k)\n\n\nif __name__ == \"__main__\":\n    print(binomial_prob(10, 6, 0.5))"
    },
    {
      "rank": 36,
      "score": 10.0,
      "candidate": "def binomial_probability(n: int, k: int, p: float) -> float:\n    \"\"\"\n    >>> binomial_probability(10, 5, 0.5)\n    0.0009765625\n    >>> binomial_probability(10, 5, 0.1)\n    0.0009765625\n    >>> binomial_probability(10, 5, 0.9)\n    0.0009765625\n    \"\"\"\n    return pow(p, k) * pow(1 - p, n - k) * factorial(n) / factorial(k)\n\n\ndef factorial(n: int) -> int:\n    \"\"\"\n    >>> factorial(5)\n    120\n    >>> factorial(10)\n    3628800\n    \"\"\"\n    if n <= 1:\n        return 1\n    return n * factorial(n - 1)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 37,
      "score": 9.0,
      "candidate": "from math import factorial\n\n\ndef binomial_probability(n, k, p):\n    \"\"\"\n    Calculate the binomial probability of n events happening k times with\n    probability p for each individual event.\n    \"\"\"\n    return factorial(n) / (factorial(k) * factorial(n - k)) * (p ** k) * ((1 - p) ** (n - k))"
    },
    {
      "rank": 38,
      "score": 8.0,
      "candidate": "def binomial(n, k):\n    \"\"\"\n    :param n: int\n    :param k: int\n    :return: float\n    \"\"\"\n    return 1.0 * binomial_coefficient(n, k) / binomial_coefficient(n, n - k)\n\n\ndef binomial_coefficient(n, k):\n    \"\"\"\n    :param n: int\n    :param k: int\n    :return: int\n    \"\"\"\n    if k == 0:\n        return 1\n    if k > n - k:\n        k = n - k\n    result = 1\n    for i in range(k):\n        result *= (n - i)\n        result //= (i + 1)\n    return result\n\n\nif __name__ == \"__main__\":\n    print(binomial(20, 10))"
    },
    {
      "rank": 39,
      "score": 8.0,
      "candidate": "def binomial_probability(n: int, k: int, p: float) -> float:\n    \"\"\"\n    Binomial Probability\n    :param n: number of trials\n    :param k: number of successes\n    :param p: probability of success\n    :return: the probability of k successes in n trials\n    \"\"\"\n    return (\n        (factorial(n) / (factorial(k) * factorial(n - k))) * (p ** k) * ((1 - p) ** (n - k))\n    )\n\n\ndef factorial(n: int) -> int:\n    \"\"\"\n    Factorial\n    :param n: number to be factorial\n    :return: n!\n    \"\"\"\n    if n <= 1:\n        return 1\n    return n * factorial(n - 1)\n\n\nif __name__ == \"__main__\":\n    assert binomial_probability(20, 10, 0.5) == 0.7647058823529412"
    },
    {
      "rank": 40,
      "score": 8.0,
      "candidate": "def binomial(n, k):\n    if n == 0:\n        return 1\n    else:\n        return binomial(n - 1, k) + binomial(n - 1, k - 1)\n\nprint(binomial(4, 2))"
    },
    {
      "rank": 41,
      "score": 8.0,
      "candidate": "def binomial_probability(n, k, p, q):\n    \"\"\"\n    Calculate the binomial probability\n    :param n: number of trials\n    :param k: number of successes\n    :param p: probability of success\n    :param q: probability of failure\n    :return: probability\n    \"\"\"\n    if k == 0:\n        return 1\n    if k == n:\n        return 1\n    if k > n:\n        return 0\n    if k < 0:\n        return 0\n    if p == 0:\n        return 0\n    if q == 1:\n        return 1\n\n    return binomial_probability(n - 1, k - 1, p, q) * p * (1 - q) + binomial_probability(n - 1, k, p, q) * q\n\n\nif __name__ == \"__main__\":\n    print(binomial_probability(3, 2, 0.5, 0.5))"
    },
    {
      "rank": 42,
      "score": 8.0,
      "candidate": "import math\n\n\ndef binomial(n, k):\n    return math.factorial(n) / (math.factorial(k) * math.factorial(n - k))\n\n\nif __name__ == \"__main__\":\n    n, k = map(int, input().split())\n    print(binomial(n, k))"
    },
    {
      "rank": 43,
      "score": 8.0,
      "candidate": "def binomial_probability(n, k, p):\n    if k == 0:\n        return 1\n    if k == n:\n        return 1\n    return binomial_probability(n - 1, k - 1, p) * p / n\n\nif __name__ == \"__main__\":\n    print(binomial_probability(3, 1, 0.5))"
    },
    {
      "rank": 44,
      "score": 8.0,
      "candidate": "import math\n\n\ndef binomial_probability(n, k, p):\n    \"\"\"\n    Calculate the probability of k successes in n trials with probability p\n    of success for each trial.\n    \"\"\"\n    if not n >= k:\n        raise ValueError(\"Number of trials must be greater than or equal to number of successes\")\n    if not 0 <= p <= 1:\n        raise ValueError(\"Probability must be between 0 and 1\")\n\n    return math.factorial(n) / (math.factorial(k) * math.factorial(n - k)) * p ** k * (1 - p) ** (n - k)\n\n\nif __name__ == \"__main__\":\n    print(binomial_probability(10, 2, 0.4))"
    },
    {
      "rank": 45,
      "score": 8.0,
      "candidate": "def binomial_probability(n, k):\n    \"\"\"\n    n: int\n    k: int\n    return: float\n    \"\"\"\n    if k > n:\n        return 0\n    if k == 0 or k == n:\n        return 1\n    return (binomial_probability(n - 1, k - 1) * n) / (k + 1)\n\n\nprint(binomial_probability(3, 1))\nprint(binomial_probability(4, 2))\nprint(binomial_probability(10, 7))"
    },
    {
      "rank": 46,
      "score": 8.0,
      "candidate": "def binomial_probability(n, k, p):\n    \"\"\"\n    Calculate binomial probability\n    \"\"\"\n    prob = 1\n    for i in range(k):\n        prob *= (n - i) / (1 - p)\n\n    return prob"
    },
    {
      "rank": 47,
      "score": 8.0,
      "candidate": "from math import factorial\n\n\ndef binomial_prob(n: int, p: float, k: int) -> float:\n    \"\"\"Binomial probability.\n\n    Parameters:\n        n: number of trials.\n        p: probability of success.\n        k: number of success.\n\n    Returns:\n        Probability of success.\n    \"\"\"\n    return factorial(n) / (factorial(k) * factorial(n - k)) * (p ** k) * (1 - p) ** (n - k)"
    },
    {
      "rank": 48,
      "score": 8.0,
      "candidate": "def binomial_probability(prob, n, r):\n    return (prob ** r) * ((1 - prob) ** (n - r))\n\n\nif __name__ == \"__main__\":\n    prob = float(input(\"Enter probability of success: \"))\n    n = int(input(\"Enter number of trials: \"))\n    r = int(input(\"Enter number of success: \"))\n    print(binomial_probability(prob, n, r))"
    },
    {
      "rank": 49,
      "score": 8.0,
      "candidate": "def binomial_prob(n, k, p):\n    \"\"\"\n    :param n: number of trials\n    :param k: number of successes\n    :param p: probability of success\n    :return: probability of k successes in n trials\n    \"\"\"\n    return (\n        (\n            (factorial(n) // (factorial(k) * factorial(n - k)))\n            * (p ** k)\n            * (1 - p) ** (n - k)\n        )\n        if k <= n\n        else 0\n    )\n\n\ndef factorial(n):\n    return 1 if n <= 1 else n * factorial(n - 1)\n\n\nif __name__ == \"__main__\":\n    print(binomial_prob(3, 2, 0.2))\n    print(binomial_prob(10, 5, 0.2))"
    },
    {
      "rank": 50,
      "score": 8.0,
      "candidate": "def binomial_probability(n: int, k: int, p: float) -> float:\n    \"\"\"\n    Calculate the binomial probability.\n\n    :param n: total number of trials\n    :param k: number of successes\n    :param p: probability of success in a trial\n    :return: probability of k successes in n trials\n    \"\"\"\n    return (\n        factorial(n) / (factorial(k) * factorial(n - k)) * p ** k * (1 - p) ** (n - k)\n    )\n\n\ndef factorial(n: int) -> int:\n    \"\"\"\n    Calculate the factorial of a number.\n\n    :param n: number\n    :return: factorial of the number\n    \"\"\"\n    if n <= 1:\n        return 1\n    return n * factorial(n - 1)"
    },
    {
      "rank": 51,
      "score": 8.0,
      "candidate": "from collections import Counter\n\n\ndef binomial_probability(n, k, p):\n    \"\"\"\n    :param n: Total number of trials.\n    :param k: Number of success.\n    :param p: Probability of success.\n    :return: Probability of k successes in n trials.\n    \"\"\"\n    if k > n:\n        return 0\n\n    # If probability is 0, the probability is always 0.\n    if p == 0:\n        return 0\n\n    # If probability is 1, the probability is always 1.\n    if p == 1:\n        return 1\n\n    # If n = k, the probability is always 1.\n    if n == k:\n        return 1\n\n    # If n is 0, the probability is always 0.\n    if n == 0:\n        return 1\n\n    # If k is 0, the probability is always 1.\n    if k == 0:\n        return 1\n\n    # If n is 1, the probability is always 1.\n    if n == 1:\n        return 1\n\n    # If k is 1, the probability is always p.\n    if k == 1:\n        return p\n\n    # If k is n, the probability is always 1 - p.\n    if k == n:\n        return 1 - p\n\n    # If k is 0, the probability is always 1 - p.\n    if k == 0:\n        return 1 - p\n\n    # If p is 0, the probability is always 0.\n    if p == 0:\n        return 1\n\n    # If p is 1, the probability is always 1.\n    if p == 1:\n        return 1\n\n    # If p is 0.5, the probability is always 0.5.\n    if p == 0.5:\n        return 0.5\n\n    # If n is 2, the probability is always p * (1 - p).\n    if n == 2:\n        return p * (1 - p)\n\n    # If n is 3, the probability"
    },
    {
      "rank": 52,
      "score": 8.0,
      "candidate": "import math\n\n\ndef binomial_probability(n, k, p):\n    \"\"\"\n    Returns the probability of k successes in n trials, if the probability of success in a trial is p\n    :param n: number of trials\n    :param k: number of successes\n    :param p: probability of success in a trial\n    :return: probability of k successes in n trials, if the probability of success in a trial is p\n    \"\"\"\n    if k > n:\n        return 0\n    if k < 0:\n        return 0\n    if n == k:\n        return 1\n    return math.factorial(n) / (math.factorial(k) * math.factorial(n - k)) * p ** k * (1 - p) ** (n - k)\n\n\nif __name__ == \"__main__\":\n    print(binomial_probability(10, 2, 0.4))"
    },
    {
      "rank": 53,
      "score": 8.0,
      "candidate": "import math\n\n\ndef binomial_probability(n, k, p):\n    \"\"\"\n    The probability of getting exactly k heads, in n trials, with each trial\n    having probability of getting head as p.\n    \"\"\"\n    return math.factorial(n) / (math.factorial(k) * math.factorial(n - k)) * p ** k * (1 - p) ** (n - k)"
    },
    {
      "rank": 54,
      "score": 8.0,
      "candidate": "from math import factorial\n\n\ndef binomial_probability(n, k, p):\n    \"\"\"\n    :param n: int, number of trials\n    :param k: int, number of successes\n    :param p: float, probability of success\n    :return: float, the binomial probability\n    \"\"\"\n    if not 0 <= k <= n:\n        raise ValueError(\"k is out of range\")\n    return factorial(n) / (factorial(k) * factorial(n - k)) * p ** k * (1 - p) ** (n - k)\n\n\nif __name__ == \"__main__\":\n    print(binomial_probability(20, 10, 0.5))"
    },
    {
      "rank": 55,
      "score": 8.0,
      "candidate": "def binomial_probability(n, k, p):\n    return (factorial(n) / (factorial(k) * factorial(n - k))) * (p ** k) * (1 - p) ** (n - k)\n\n\ndef factorial(n):\n    if n == 0:\n        return 1\n    return n * factorial(n - 1)"
    },
    {
      "rank": 56,
      "score": 8.0,
      "candidate": "from math import factorial\n\n\ndef binomial_probability(n, k):\n    \"\"\"\n    n is number of trials\n    k is number of successes\n    \"\"\"\n    return factorial(n) / (factorial(k) * factorial(n - k))\n\n\nif __name__ == \"__main__\":\n    print(binomial_probability(1000, 200))"
    },
    {
      "rank": 57,
      "score": 8.0,
      "candidate": "def binomial_probability(n: int, k: int, p: float) -> float:\n    \"\"\"\n    The binomial probability is defined as:\n        P(k) = n!/(k!*(n-k)!) * p**k * (1-p)**(n-k)\n\n    :param n: The number of trials\n    :param k: The number of successes\n    :param p: The probability of success in any one trial\n    :return: The binomial probability\n    \"\"\"\n    return 1.0 * binomial_coefficient(n, k) * (p ** k) * ((1 - p) ** (n - k))\n\n\ndef binomial_coefficient(n: int, k: int) -> int:\n    \"\"\"\n    The binomial coefficient is defined as:\n        n! / (k! * (n-k)!)\n\n    :param n: The number of trials\n    :param k: The number of successes\n    :return: The binomial coefficient\n    \"\"\"\n    if k < 0 or k > n:\n        return 0\n\n    result = 1\n    for i in range(1, k + 1):\n        result *= (n - k + i)\n        result //= i\n    return result"
    },
    {
      "rank": 58,
      "score": 8.0,
      "candidate": "import math\n\n\ndef binomial_prob(n: int, k: int, p: float) -> float:\n    \"\"\"Returns the binomial probability of n successes in k trials,\n    with probability p for a success.\n    \"\"\"\n    return math.factorial(n) / (math.factorial(k) * math.factorial(n - k)) * (p ** k) * ((1 - p) ** (n - k))"
    },
    {
      "rank": 59,
      "score": 8.0,
      "candidate": "def binomial_probability(n, k, p):\n    \"\"\"\n    n: number of trials\n    k: number of successes\n    p: probability of a single success\n    \"\"\"\n    if k == 0:\n        return 1\n    if n == k:\n        return 1\n    return binomial_probability(n - 1, k - 1, p) * p / n"
    },
    {
      "rank": 60,
      "score": 8.0,
      "candidate": "from math import factorial\n\n\ndef binomial_probability(n, k, p):\n    \"\"\"\n    The binomial probability is the probability of obtaining k successes\n    in n trials, if the probability of success on each trial is p.\n    \"\"\"\n    # n! / (k! * (n - k)!) * p^k * (1 - p)^(n - k)\n    return factorial(n) / (factorial(k) * factorial(n - k)) * (p ** k) * ((1 - p) ** (n - k))"
    },
    {
      "rank": 61,
      "score": 8.0,
      "candidate": "def binomial_probability(n, k, p):\n    return (\n        factorial(n) / (factorial(k) * factorial(n - k)) * p ** k * (1 - p) ** (n - k)\n    )\n\n\ndef factorial(n):\n    if n == 0:\n        return 1\n    return n * factorial(n - 1)"
    },
    {
      "rank": 62,
      "score": 8.0,
      "candidate": "def binomial_probability(n, k, p):\n    \"\"\"\n    Probability of k successes in n trials with probability of success p.\n    \"\"\"\n    return (factorial(n) / (factorial(k) * factorial(n - k))) * p ** k * (1 - p) ** (n - k)\n\n\ndef factorial(num):\n    \"\"\"\n    Factorial of a number.\n    \"\"\"\n    if num < 2:\n        return 1\n    return num * factorial(num - 1)"
    },
    {
      "rank": 63,
      "score": 8.0,
      "candidate": "import math\n\n\ndef binomial_probability(n, k, p):\n    \"\"\"\n    Binomial probability formula\n    \"\"\"\n    return math.factorial(n) / (math.factorial(k) * math.factorial(n - k)) * p ** k * (1 - p) ** (n - k)\n\n\nif __name__ == \"__main__\":\n    print(binomial_probability(10, 5, 0.2))"
    },
    {
      "rank": 64,
      "score": 8.0,
      "candidate": "from math import factorial\n\n\ndef binomial_probability(n, k, p):\n    \"\"\"\n    Binomial probability.\n\n    :param n: number of trials\n    :type n: int\n    :param k: number of successes\n    :type k: int\n    :param p: probability of success\n    :type p: float\n    :return: probability\n    :rtype: float\n    \"\"\"\n    return factorial(n) / (factorial(k) * factorial(n - k)) * p ** k * (1 - p) ** (n - k)\n\n\nif __name__ == \"__main__\":\n    print(binomial_probability(10, 6, 0.3))"
    },
    {
      "rank": 65,
      "score": 8.0,
      "candidate": "import math\nfrom typing import List\n\n\ndef binomial_probability(n: int, k: int, p: float) -> float:\n    \"\"\"\n    Calculate Binomial Probability\n    :param n: total number of trials\n    :param k: total number of success\n    :param p: probability of a single success\n    :return: probability of k successes in n trials\n    \"\"\"\n    return math.factorial(n) / (math.factorial(k) * math.factorial(n - k)) * p ** k * (1 - p) ** (n - k)\n\n\ndef binomial_probability_recursive(n: int, k: int, p: float) -> float:\n    \"\"\"\n    Calculate Binomial Probability using Recursion\n    :param n: total number of trials\n    :param k: total number of success\n    :param p: probability of a single success\n    :return: probability of k successes in n trials\n    \"\"\"\n    if k == 0 or k == n:\n        return 1\n    return binomial_probability(n, k - 1, p) * p\n\n\ndef binomial_probability_dynamic(n: int, k: int, p: float) -> float:\n    \"\"\"\n    Calculate Binomial Probability using Recursion\n    :param n: total number of trials\n    :param k: total number of success\n    :param p: probability of a single success\n    :return: probability of k successes in n trials\n    \"\"\"\n    result: List[float] = [1] * (n + 1)\n    for i in range(1, n + 1):\n        result[i] = result[i - 1] * p\n    return result[k] * math.factorial(n) / (math.factorial(k) * math.factorial(n - k))\n\n\nif __name__ == \"__main__\":\n    print(binomial_probability(10, 6, 0.3))\n    print(binomial_probability_recursive(10, 6, 0.3))\n    print(binomial_probability_dynamic"
    },
    {
      "rank": 66,
      "score": 8.0,
      "candidate": "def binomial_probability(n, k, p):\n    \"\"\"\n    Calculates the probability of k successes in n trials, if the probability of success is p.\n    :param n: number of trials\n    :param k: number of successes\n    :param p: probability of success\n    :return: probability\n    \"\"\"\n\n    if k < 0 or k > n:\n        return 0\n\n    if k == 0:\n        return 1\n\n    if p == 0:\n        return 0\n\n    if p == 1:\n        return 1\n\n    return binomial_probability(n - 1, k - 1, p) * p / (1 - p) + binomial_probability(n - 1, k, p) * (1 - p) / (\n                1 - p)"
    },
    {
      "rank": 67,
      "score": 1.0,
      "candidate": "def binomial_probability(n, k, p):\n    \"\"\"\n    n: number of trials\n    k: number of successes\n    p: probability of success for one trial\n    \"\"\"\n    return (factorial(n) / (factorial(k) * factorial(n - k))) * (p ** k) * ((1 - p) ** (n - k))\n\ndef factorial(num):\n    if num <= 1:\n        return 1\n    else:\n        return num * factorial(num - 1)\n\ndef test_binomial_probability():\n    \"\"\"\n    >>> test_binomial_probability()\n    \"\"\"\n    assert abs(binomial_probability(4, 2, 0.5) - 0.4) < 1e-6\n    assert abs(binomial_probability(4, 2, 0.3) - 0.18333333) < 1e-6\n    assert abs(binomial_probability(4, 4, 0.5) - 0.0625) < 1e-6\n    assert abs(binomial_probability(4, 0, 0.5) - 1) < 1e-6\n    assert abs(binomial_probability(4, 1, 0.5) - 0.5) < 1e-6\n    assert abs(binomial_probability(4, 3, 0.5) - 0.125) < 1e-6"
    },
    {
      "rank": 68,
      "score": 1.0,
      "candidate": "from math import factorial\n\n\ndef binomial(n, k):\n    \"\"\"\n    Calculates the binomial coefficient.\n    :param n: int\n    :param k: int\n    :return: int\n    \"\"\"\n    return factorial(n) // (factorial(n - k) * factorial(k))\n\n\ndef binomial_probability(n, k, p, q):\n    \"\"\"\n    Calculates the probability of the binomial distribution.\n    :param n: int\n    :param k: int\n    :param p: float\n    :param q: float\n    :return: float\n    \"\"\"\n    return binomial(n, k) * (p ** k) * (q ** (n - k))\n\n\nif __name__ == '__main__':\n    n = 3\n    k = 2\n    p = 0.4\n    q = 1 - p\n    print(f'binomial(n={n}, k={k}) = {binomial(n, k)}')\n    print(f'binomial_probability(n={n}, k={k}, p={p}, q={q}) = {binomial_probability(n, k, p, q):.2f}')"
    },
    {
      "rank": 69,
      "score": 1.0,
      "candidate": "from math import factorial\n\n\ndef binomial_probability(n: int, k: int, p: float) -> float:\n    \"\"\"\n    Binomial probability formula.\n    n! / (k! * (n - k)!) * p ** k * (1 - p) ** (n - k)\n    \"\"\"\n    return factorial(n) / (factorial(k) * factorial(n - k)) * (p ** k) * ((1 - p) ** (n - k))\n\n\nif __name__ == \"__main__\":\n    assert binomial_probability(5, 2, 0.4) == 0.144"
    },
    {
      "rank": 70,
      "score": 1.0,
      "candidate": "def binomial_probability(probability, number_of_trials, number_of_successes):\n    return probability ** number_of_successes * (1 - probability) ** (number_of_trials - number_of_successes)\n\n\nassert binomial_probability(0.5, 10, 5) == 0.0009765625\nassert binomial_probability(0.2, 10, 5) == 0.0048828125\nassert binomial_probability(0.7, 10, 5) == 0.00029296875\nassert binomial_probability(0.3, 10, 5) == 0.001953125\nassert binomial_probability(0.5, 10, 6) == 0.0000046875\nassert binomial_probability(0.2, 10, 6) == 0.00078125\nassert binomial_probability(0.7, 10, 6) == 0.0000015625\nassert binomial_probability(0.3, 10, 6) == 0.0001953125"
    },
    {
      "rank": 71,
      "score": 1.0,
      "candidate": "import math\n\n\ndef binomial_probability(n, k, p):\n    return math.factorial(n) / (math.factorial(k) * math.factorial(n - k)) * (p ** k) * (1 - p) ** (n - k)\n\n\nif __name__ == \"__main__\":\n    assert binomial_probability(100, 10, 0.4) == 0.6451489226183028"
    },
    {
      "rank": 72,
      "score": 1.0,
      "candidate": "from math import factorial\n\n\ndef binomial_probability(n, k):\n    if k > n:\n        raise ValueError(\"k must be less than or equal to n\")\n\n    return factorial(n) / (factorial(k) * factorial(n - k))\n\n\nif __name__ == \"__main__\":\n    assert binomial_probability(4, 2) == 10"
    },
    {
      "rank": 73,
      "score": 1.0,
      "candidate": "import unittest\n\n\ndef binomial_probability(n, k, p):\n    \"\"\"\n    Calculate binomial probability.\n    :param n: Number of trials.\n    :param k: Number of success.\n    :param p: Probability of success in each trial.\n    :return: Binomial probability.\n    \"\"\"\n    if k > n:\n        return 0\n    if k == n:\n        return 1\n    if k == 0:\n        return 1\n    if k == 1:\n        return p\n    if n - k == 1:\n        return p * (1 - p)\n    return (binomial_probability(n - 1, k - 1, p) * p + binomial_probability(n - 1, k, p) * (1 - p)) / (n - k + 1)\n\n\nclass TestBinomialProbability(unittest.TestCase):\n    def test_binomial_probability(self):\n        self.assertEqual(0.12, round(binomial_probability(10, 6, 0.5), 2))\n\n\nif __name__ == \"__main__\":\n    unittest.main()"
    },
    {
      "rank": 74,
      "score": 1.0,
      "candidate": "def binomial_probability(n, k, p):\n    # Calculate the binomial coefficient\n    binomial_coefficient = binomial_coefficient_calculator(n, k)\n    return binomial_coefficient * (p ** k) * ((1 - p) ** (n - k))\n\n\ndef binomial_coefficient_calculator(n, k):\n    if k > n:\n        return 0\n    binomial_coefficient = 1\n    for i in range(k):\n        binomial_coefficient = binomial_coefficient * (n - i) / (i + 1)\n    return binomial_coefficient\n\n\nif __name__ == \"__main__\":\n    print(binomial_probability(5, 2, 0.4))"
    },
    {
      "rank": 75,
      "score": 1.0,
      "candidate": "from math import factorial\n\n\ndef binomial_probability(n: int, k: int, p: float) -> float:\n    \"\"\"\n    Binomial probability.\n    \"\"\"\n    return factorial(n) / (factorial(k) * factorial(n - k)) * p ** k * (1 - p) ** (n - k)\n\n\nif __name__ == \"__main__\":\n    assert binomial_probability(4, 2, 0.2) == 0.3168"
    },
    {
      "rank": 76,
      "score": 1.0,
      "candidate": "import math\nfrom functools import lru_cache\n\n\ndef binomial_probability(n, k, p):\n    \"\"\"\n    Calculate binomial probability.\n    :param n: total number of outcomes\n    :param k: number of desired outcomes\n    :param p: probability of a single outcome\n    :return: binomial probability\n    \"\"\"\n    return (math.factorial(n) / (math.factorial(k) * math.factorial(n - k))) * (p ** k) * (1 - p) ** (n - k)\n\n\n@lru_cache(maxsize=None)\ndef binomial_probability_dp(n, k, p):\n    \"\"\"\n    Calculate binomial probability using dynamic programming.\n    :param n: total number of outcomes\n    :param k: number of desired outcomes\n    :param p: probability of a single outcome\n    :return: binomial probability\n    \"\"\"\n    if n == k:\n        return 1\n\n    if k == 0:\n        return 1\n\n    return binomial_probability_dp(n - 1, k - 1, p) * p\n\n\nif __name__ == \"__main__\":\n    n = 10\n    k = 6\n    p = 0.25\n    assert binomial_probability(n, k, p) == binomial_probability_dp(n, k, p)"
    },
    {
      "rank": 77,
      "score": 1.0,
      "candidate": "def binomial_prob(n: int, k: int, p: float) -> float:\n    \"\"\"Compute binomial probability.\n\n    Args:\n        n (int): Number of trials.\n        k (int): Number of success.\n        p (float): Probability of success.\n\n    Returns:\n        float: Probability of k successes in n trials.\n    \"\"\"\n\n    if n < k:\n        return 0\n\n    return (\n        binomial_prob(n - 1, k - 1, p)\n        * p\n        * (n - k + 1)\n        / n\n    )\n\n\nif __name__ == \"__main__\":\n    assert binomial_prob(4, 2, 0.5) == 0.12\n    assert binomial_prob(5, 3, 0.5) == 0.24\n    assert binomial_prob(5, 3, 0.7) == 0.42857142857142855"
    },
    {
      "rank": 78,
      "score": 1.0,
      "candidate": "def binomial_probability(n: int, k: int, p: float) -> float:\n    \"\"\"\n    Binomial probability\n    \"\"\"\n    return (\n        (\n            (p ** k)\n            * ((1 - p) ** (n - k))\n        )\n        * (\n            (1 / binomial_coefficient(n, k))\n        )\n    )\n\n\ndef binomial_coefficient(n: int, k: int) -> int:\n    \"\"\"\n    Binomial coefficient\n    \"\"\"\n    return (\n        (\n            (n - k + 1)\n            * (n - k + 2)\n        )\n        // 2\n    )"
    },
    {
      "rank": 79,
      "score": 1.0,
      "candidate": "def binomial_probability(n, k, p):\n    \"\"\"\n    Computes the probability of drawing k heads from n trials, where each\n    trial has a probability of success of p.\n    \"\"\"\n    if not n or not k:\n        return 1\n    if k == n:\n        return p ** n\n    if k == 0:\n        return 1 - p ** n\n    return binomial_probability(n - 1, k - 1, p) * p * (1 - p)\n\n\nif __name__ == \"__main__\":\n    print(binomial_probability(10, 5, 0.6))"
    },
    {
      "rank": 80,
      "score": 1.0,
      "candidate": "def binomial_probability(n, k, p):\n    \"\"\"\n    >>> binomial_probability(5, 3, 0.5)\n    0.0625\n    >>> binomial_probability(5, 3, 0.1)\n    0.125\n    \"\"\"\n    return (\n        (factorial(n) / (factorial(k) * factorial(n - k))) * (p ** k) * ((1 - p) ** (n - k))\n    )\n\n\ndef factorial(n):\n    \"\"\"\n    >>> factorial(5)\n    120\n    >>> factorial(10)\n    3628800\n    \"\"\"\n    if n == 0:\n        return 1\n    return n * factorial(n - 1)"
    },
    {
      "rank": 81,
      "score": 1.0,
      "candidate": "def binomial_probability(n: int, k: int, p: float) -> float:\n    \"\"\"\n    n: total number of trials\n    k: number of success\n    p: probability of success\n    \"\"\"\n    return (p ** k) * ((1 - p) ** (n - k))\n\n\nif __name__ == \"__main__\":\n    assert binomial_probability(5, 3, 0.3) == 0.359375"
    },
    {
      "rank": 82,
      "score": 1.0,
      "candidate": "import math\n\n\ndef binomial_probability(n, k, p, q):\n    \"\"\"\n    Calculate the probability of binomial distribution.\n    :param n: number of trials\n    :param k: number of success\n    :param p: probability of success\n    :param q: probability of failure\n    :return:\n    \"\"\"\n    return math.factorial(n) / (math.factorial(k) * math.factorial(n - k)) * (p ** k) * (q ** (n - k))\n\n\nif __name__ == \"__main__\":\n    print(binomial_probability(10, 7, 0.3, 0.7))"
    },
    {
      "rank": 83,
      "score": 1.0,
      "candidate": "import math\nfrom typing import List\n\n\ndef binomial_probability(n: int, k: int, p: float) -> float:\n    \"\"\"\n    Binomial probability.\n    \"\"\"\n    if k == 0:\n        return 1\n    if k == n:\n        return 1\n\n    return math.factorial(n) // math.factorial(k) // math.factorial(n - k) * (p ** k) * (1 - p) ** (n - k)\n\n\ndef binomial_probability_dp(n: int, k: int, p: float) -> float:\n    \"\"\"\n    Binomial probability using DP.\n    \"\"\"\n    dp: List[List[float]] = [[0.0 for _ in range(n + 1)] for _ in range(n + 1)]\n\n    for i in range(n + 1):\n        dp[i][0] = 1\n        dp[i][i] = 1\n\n    for i in range(1, n + 1):\n        for j in range(1, n):\n            dp[i][j] = dp[i - 1][j - 1] * p + dp[i - 1][j] * (1 - p)\n\n    return dp[n][k]\n\n\nif __name__ == \"__main__\":\n    assert binomial_probability(3, 2, 0.5) == 0.5\n    assert binomial_probability(3, 0, 0.5) == 1\n    assert binomial_probability(3, 3, 0.5) == 1\n    assert binomial_probability(3, 1, 0.5) == 0.5\n    assert binomial_probability(4, 2, 0.5) == 0.75\n    assert binomial_probability_dp(3, 2, 0.5) == 0.5\n    assert binomial_probability_dp(3, 0, 0.5) == 1\n    assert binomial_probability_dp(3, 3, 0.5)"
    },
    {
      "rank": 84,
      "score": 1.0,
      "candidate": "def binomial_probability(n, k, p):\n    if n == k:\n        return 1\n\n    return binomial_probability(n - 1, k - 1, p) * p / (n - k + 1)\n\n\nif __name__ == \"__main__\":\n    print(binomial_probability(10, 5, 0.5))"
    },
    {
      "rank": 85,
      "score": 1.0,
      "candidate": "def binomial_probability(n, k, p):\n    \"\"\"\n    Computes the probability of choosing k items from n items where each item has a probability p of being chosen.\n    :param n: number of items.\n    :param k: number of items to be chosen.\n    :param p: probability of choosing an item.\n    :return: probability of choosing k items from n items where each item has a probability p of being chosen.\n    \"\"\"\n    return factorial(n) / (factorial(k) * factorial(n - k)) * (p ** k) * (1 - p) ** (n - k)\n\n\ndef factorial(n):\n    \"\"\"\n    Computes the factorial of n.\n    :param n: number.\n    :return: factorial of n.\n    \"\"\"\n    return 1 if n <= 1 else n * factorial(n - 1)\n\n\ndef test_binomial_probability():\n    \"\"\"\n    Tests binomial_probability function.\n    \"\"\"\n    assert round(binomial_probability(10, 4, 0.5), 2) == 0.064\n    print(binomial_probability(10, 4, 0.5))\n\n\nif __name__ == \"__main__\":\n    test_binomial_probability()"
    },
    {
      "rank": 86,
      "score": 1.0,
      "candidate": "import math\nfrom typing import Tuple\n\n\ndef binomial_probability(k: int, n: int, p: float) -> float:\n    \"\"\"Compute binomial probability.\n\n    P(K) = (n!)/(k!(n-k)!) * p**k * (1-p)**(n-k)\n\n    Args:\n        k: Number of successes.\n        n: Number of trials.\n        p: Probability of success for each trial.\n\n    Returns:\n        Probability of K successes in N trials with P(success).\n\n    Examples:\n        >>> binomial_probability(3, 5, 0.4)\n        0.016\n    \"\"\"\n    return math.factorial(n) / (math.factorial(k) * math.factorial(n - k)) * (p ** k) * ((1 - p) ** (n - k))\n\n\ndef binomial_probability_simplified(k: int, n: int, p: float) -> float:\n    \"\"\"Compute binomial probability.\n\n    P(K) = (n!)/(k!(n-k)!) * p**k * (1-p)**(n-k)\n\n    Args:\n        k: Number of successes.\n        n: Number of trials.\n        p: Probability of success for each trial.\n\n    Returns:\n        Probability of K successes in N trials with P(success).\n\n    Examples:\n        >>> binomial_probability_simplified(3, 5, 0.4)\n        0.016\n    \"\"\"\n    return math.factorial(n) / math.factorial(k) * (p ** k) * ((1 - p) ** (n - k))\n\n\ndef binomial_probability_with_combinations(k: int, n: int, p: float) -> float:\n    \"\"\"Compute binomial probability.\n\n    P(K) = (n!)/(k!(n-k)!) * p**k * (1-p)**(n-k)\n\n    Args:"
    },
    {
      "rank": 87,
      "score": 1.0,
      "candidate": "def binomial_probability(n, k, p):\n    \"\"\"\n    A function to compute binomial probability for the given number.\n    :param n: int\n    :param k: int\n    :param p: float\n    :return: float\n    \"\"\"\n    return (\n        float(factorial(n))\n        / (factorial(k) * factorial(n - k))\n        * (p ** k)\n        * (1 - p) ** (n - k)\n    )\n\n\ndef factorial(n):\n    \"\"\"\n    A function to compute factorial for the given number.\n    :param n: int\n    :return: float\n    \"\"\"\n    return 1 if n == 0 else n * factorial(n - 1)\n\n\nif __name__ == \"__main__\":\n    n = int(input())\n    k = int(input())\n    p = float(input())\n    print(binomial_probability(n, k, p))"
    },
    {
      "rank": 88,
      "score": 1.0,
      "candidate": "import numpy as np\n\n\ndef binomial_probability(n, k, p):\n    \"\"\"\n    This function computes the binomial probability\n    :param n: number of trials\n    :param k: number of successes\n    :param p: probability of success\n    :return: the probability\n    \"\"\"\n    return np.math.factorial(n) / (np.math.factorial(k) * np.math.factorial(n - k)) * (p ** k) * ((1 - p) ** (n - k))\n\n\nif __name__ == '__main__':\n    n = 10\n    k = 5\n    p = 0.2\n    print(binomial_probability(n, k, p))"
    },
    {
      "rank": 89,
      "score": 1.0,
      "candidate": "import math\n\n\ndef binomial_probability(n, k, p):\n    \"\"\"\n    A Binomial random variable is defined as the probability of successes\n    in k trials of an experiment that has a probability of success of p.\n    For example, if you flip a coin 3 times, a binomial distribution of\n    the number of heads is a distribution of the number of successes.\n    \"\"\"\n    return (\n        math.factorial(n)\n        // math.factorial(k)\n        // math.factorial(n - k)\n        * (p ** k)\n        * ((1 - p) ** (n - k))\n    )\n\n\nif __name__ == \"__main__\":\n    assert binomial_probability(3, 2, 0.5) == 0.125"
    },
    {
      "rank": 90,
      "score": 1.0,
      "candidate": "from math import factorial\n\n\ndef binomial_probability(n, k, p):\n    \"\"\"\n    Calculate the binomial probability for a given number.\n    :param n: number of trials.\n    :param k: number of successes.\n    :param p: probability of success.\n    :return: binomial probability.\n    \"\"\"\n    return (factorial(n) / (factorial(k) * factorial(n - k))) * (p ** k) * ((1 - p) ** (n - k))\n\n\nif __name__ == \"__main__\":\n    n, k, p = map(int, input().split())\n    print(binomial_probability(n, k, p))"
    },
    {
      "rank": 91,
      "score": 1.0,
      "candidate": "def binomial_probability(n: int, k: int, p: float) -> float:\n    \"\"\"\n    Calculate the probability of k successes in n trials, if the probability of success on each trial is p\n    :param n: number of trials\n    :param k: number of successes\n    :param p: probability of success on each trial\n    :return: probability of k successes in n trials, if the probability of success on each trial is p\n    \"\"\"\n    if n == 0 or k < 0 or k > n:\n        return 0\n\n    return 1.0 * binomial_probability(n - 1, k - 1, p) * p / n + 1.0 * binomial_probability(n - 1, k, p) * (1 - p) / n\n\n\nif __name__ == \"__main__\":\n    assert binomial_probability(4, 2, 0.5) == 0.5\n    assert binomial_probability(4, 3, 0.5) == 0.125"
    },
    {
      "rank": 92,
      "score": 1.0,
      "candidate": "def binomial_probability(n: int, k: int, p: float) -> float:\n    \"\"\"\n    Calculate the probability of k successes in n trials with probability p of success\n    \"\"\"\n    return (\n        (p ** k) * (1 - p) ** (n - k)\n    )  # Use the binomial formula to calculate the probability\n\n\nif __name__ == \"__main__\":\n    print(binomial_probability(4, 2, 0.4))"
    },
    {
      "rank": 93,
      "score": 1.0,
      "candidate": "def binomial_probability(n, k, p):\n    \"\"\"\n    Calculates the binomial probability for the given number.\n\n    :param n: number of trials.\n    :param k: number of success.\n    :param p: probability of success.\n    :return: binomial probability.\n    \"\"\"\n    result = 1\n    for i in range(1, k + 1):\n        result = result * (n - k + i) / i\n    return result * p ** k * (1 - p) ** (n - k)\n\n\nif __name__ == \"__main__\":\n    print(binomial_probability(n=10, k=6, p=0.2))"
    },
    {
      "rank": 94,
      "score": 1.0,
      "candidate": "from math import factorial\n\n\ndef binomial_probability(n: int, k: int, p: float) -> float:\n    \"\"\"Returns the binomial probability for the given number.\n\n    Args:\n        n: The number of trials.\n        k: The number of successes.\n        p: The probability of success.\n\n    Returns:\n        The binomial probability.\n    \"\"\"\n    return factorial(n) / (factorial(k) * factorial(n - k)) * p ** k * (1 - p) ** (n - k)"
    },
    {
      "rank": 95,
      "score": 1.0,
      "candidate": "def binomial_probability(n: int, k: int, p: float) -> float:\n    \"\"\"\n    Binomial Probability.\n    Time Complexity: O(1).\n    Space Complexity: O(1).\n    \"\"\"\n    return 1.0 * (p ** k) * (1 - p) ** (n - k) / (1 - p) ** n\n\n\nif __name__ == \"__main__\":\n    print(binomial_probability(10, 3, 0.5))"
    },
    {
      "rank": 96,
      "score": 1.0,
      "candidate": "def binomial_probability(n, k, p):\n    # TODO: Write your code here\n    pass"
    },
    {
      "rank": 97,
      "score": 1.0,
      "candidate": "import math\nfrom typing import Tuple\n\n\ndef binomial_probability(n: int, k: int, p: float) -> float:\n    \"\"\"Return binomial probability of n elements where k successes\n    with probability of success p.\n    \"\"\"\n    return math.factorial(n) / (math.factorial(k) * math.factorial(n - k)) * p ** k * (1 - p) ** (n - k)\n\n\nif __name__ == \"__main__\":\n    binomial_probability_test_cases: Tuple[Tuple[int, int, float, float], ...] = (\n        (0, 0, 0.5, 1.0),\n        (1, 0, 0.5, 0.5),\n        (1, 1, 0.5, 0.5),\n        (2, 0, 0.5, 0.25),\n        (2, 1, 0.5, 0.75),\n        (2, 2, 0.5, 0.25),\n    )\n    for n, k, p, expected in binomial_probability_test_cases:\n        result: float = binomial_probability(n, k, p)\n        print(result == expected)"
    },
    {
      "rank": 98,
      "score": 1.0,
      "candidate": "import math\nfrom typing import Tuple\n\n\ndef binomial_probability(x: int, n: int, p: float) -> float:\n    \"\"\"Computes binomial probability.\n\n    Args:\n        x (int): Number of successes in n trials.\n        n (int): Total number of trials.\n        p (float): Probability of success in a single trial.\n\n    Returns:\n        float: Binomial probability.\n    \"\"\"\n    return math.factorial(n) / (math.factorial(x) * math.factorial(n - x)) * (p ** x) * ((1 - p) ** (n - x))\n\n\nif __name__ == \"__main__\":\n    assert binomial_probability(5, 10, 0.5) == 0.00039604029038141954\n    assert binomial_probability(10, 10, 0.5) == 0.00019604029038141954\n    assert binomial_probability(1, 10, 0.5) == 0.00039604029038141954"
    },
    {
      "rank": 99,
      "score": 1.0,
      "candidate": "# Time Complexity: O(n)\n# Space Complexity: O(1)\ndef binomial_probability(n, k):\n    if k > n:\n        return 0\n\n    if k == 0 or k == n:\n        return 1\n\n    result = 1\n    for i in range(1, k + 1):\n        result = result * (n - i + 1) / i\n\n    return result\n\n\nprint(binomial_probability(5, 3))"
    },
    {
      "rank": 100,
      "score": 1.0,
      "candidate": "def binomial_probability(n, k, p):\n    return (\n        (factorial(n) / (factorial(k) * factorial(n - k))) * (p ** k) * (1 - p) ** (n - k)\n    )\n\n\ndef factorial(n):\n    if n == 0:\n        return 1\n    return n * factorial(n - 1)\n\n\nif __name__ == \"__main__\":\n    assert binomial_probability(5, 3, 0.2) == 0.0096"
    }
  ]
}