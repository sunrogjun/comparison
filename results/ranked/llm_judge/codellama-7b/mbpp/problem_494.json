{
  "timestamp": "2025-09-15T02:03:01.704344",
  "method": "improved_llm_judge",
  "judge_model": "codellama/CodeLlama-7b-Python-hf",
  "target_model": "codellama-7b",
  "dataset": "mbpp",
  "problem_number": 494,
  "total_candidates": 100,
  "results": [
    {
      "rank": 1,
      "score": 10.0,
      "candidate": "from typing import List\n\n\n# O(n) time | O(1) space - where n is the length of the input array\ndef moveZeroes(array: List[int]) -> None:\n    \"\"\"\n    Do not return anything, modify arr in-place instead.\n    \"\"\"\n\n    zeroes_counter = 0\n    for i in range(len(array)):\n        if array[i] == 0:\n            zeroes_counter += 1\n        else:\n            array[i - zeroes_counter] = array[i]\n    for i in range(len(array) - zeroes_counter, len(array)):\n        array[i] = 0\n\n    return array\n\n\nif __name__ == \"__main__\":\n    print(moveZeroes([0, 1, 0, 3, 12]))\n    print(moveZeroes([2, 1, 0, 5, 0]))\n    print(moveZeroes([2, 1, 0, 0, 5, 0]))"
    },
    {
      "rank": 2,
      "score": 10.0,
      "candidate": "def move_zeroes(nums: list[int]) -> list[int]:\n    \"\"\"\n    Move all zeroes to the end of the given array.\n    \"\"\"\n    return nums.sort(key=lambda x: x == 0)\n\n\nif __name__ == \"__main__\":\n    test_cases = [\n        ([[0, 1, 0, 3, 12], [1, 0, 0, 3, 12]], [[1, 3, 12, 0, 0], [1, 3, 12, 0, 0]]),\n        ([[0, 0, 0, 0], [0, 0, 0, 0]], [[0, 0, 0, 0], [0, 0, 0, 0]]),\n        ([[0, 0, 1, 2, 0], [1, 2, 0, 0, 0]], [[1, 2, 0, 0, 0], [1, 2, 0, 0, 0]]),\n        ([[1, 2, 0, 0, 0], [0, 0, 0, 0, 0]], [[1, 2, 0, 0, 0], [1, 2, 0, 0, 0]]),\n        ([[0, 0, 0, 0, 0], [0, 0, 0, 0, 0]], [[0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]),\n        ([[1, 0, 2, 0, 0], [0, 0, 0, 0, 0]], [[1, 0, 2, 0, 0], [0, 0, 0, 0, 0]]),\n        ([[1, 2, 0, 0, 0], [0, 0, 0, 0, 0]], [[1, 2, 0, 0, 0], [0, 0, 0,"
    },
    {
      "rank": 3,
      "score": 10.0,
      "candidate": "def move_zeroes(arr):\n    \"\"\"\n    Use two pointers.\n    \"\"\"\n    j = 0\n    for i in range(len(arr)):\n        if arr[i] != 0:\n            arr[j] = arr[i]\n            j += 1\n    while j < len(arr):\n        arr[j] = 0\n        j += 1\n    return arr\n\n\ndef move_zeroes_inplace(arr):\n    \"\"\"\n    Use two pointers.\n    \"\"\"\n    j = 0\n    for i in range(len(arr)):\n        if arr[i] != 0:\n            arr[j] = arr[i]\n            j += 1\n    while j < len(arr):\n        arr[j] = 0\n        j += 1\n    return arr\n\n\ndef main():\n    arr = [0, 1, 2, 3, 0, 5, 0]\n    print(move_zeroes(arr))\n    print(move_zeroes_inplace(arr))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 4,
      "score": 10.0,
      "candidate": "def move_zeroes(arr):\n    \"\"\"\n    Given an array of n elements, write a function to move all zeros to the end of the array.\n    The function should return the updated array.\n    >>> move_zeroes([0, 1, 0, 3, 12])\n    [1, 3, 12, 0, 0]\n    >>> move_zeroes([0, 1, 2, 0, 3, 4, 0, 5])\n    [1, 2, 3, 4, 5, 0, 0, 0]\n    >>> move_zeroes([1, 2, 3, 4, 0, 0, 0, 0])\n    [1, 2, 3, 4, 0, 0, 0, 0]\n    \"\"\"\n    # First, we'll find the first index of zero.\n    # Then, we'll swap that with the first non-zero element.\n    # Repeat this process until we've found all zeroes.\n    zero_index = 0\n    while zero_index < len(arr):\n        if arr[zero_index] == 0:\n            # If we find a zero, we'll swap it with the first non-zero element.\n            for i in range(zero_index, len(arr)):\n                if arr[i] != 0:\n                    arr[zero_index], arr[i] = arr[i], arr[zero_index]\n                    break\n        else:\n            zero_index += 1\n    return arr\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 5,
      "score": 10.0,
      "candidate": "def move_zero_to_end(arr):\n    \"\"\"\n    Move all zeroes to the end of the array.\n    \"\"\"\n    # Initialize the number of zeroes in the array\n    count = 0\n\n    # Iterate over the array\n    for i in range(len(arr)):\n\n        # If the element is zero, increment the count\n        if arr[i] == 0:\n            count += 1\n\n        # If the element is non-zero and there are zeroes to be moved\n        elif count > 0:\n\n            # Replace the element with the last non-zero element\n            arr[i], arr[i - count] = arr[i - count], arr[i]\n\n    return arr\n\n\ndef test_move_zero_to_end():\n    \"\"\"\n    >>> test_move_zero_to_end()\n    \"\"\"\n    assert move_zero_to_end([0, 1, 0, 3, 12]) == [1, 3, 12, 0, 0]\n    assert move_zero_to_end([0, 0, 1, 0, 0]) == [1, 0, 0, 0, 0]\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 6,
      "score": 10.0,
      "candidate": "def move_zeroes(arr):\n    \"\"\"\n    O(n) & O(1)\n    \"\"\"\n    j = 0\n    for i in range(len(arr)):\n        if arr[i] != 0:\n            arr[j] = arr[i]\n            j += 1\n    for i in range(j, len(arr)):\n        arr[i] = 0\n    return arr\n\nif __name__ == \"__main__\":\n    print(move_zeroes([1, 0, 2, 3, 0, 5]))\n    print(move_zeroes([1, 2, 0, 3, 0, 5]))\n    print(move_zeroes([1, 2, 3, 0, 5]))\n    print(move_zeroes([0, 1, 2, 3, 4]))\n    print(move_zeroes([1, 2, 3, 4, 0]))"
    },
    {
      "rank": 7,
      "score": 10.0,
      "candidate": "def move_zeros(array):\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(1)\n    \"\"\"\n    return sorted(array, key=lambda x: x == 0)\n\n\nif __name__ == \"__main__\":\n    print(move_zeros([1, 0, 2, 3, 0, 4, 5, 0, 6, 0, 0, 0, 0]))"
    },
    {
      "rank": 8,
      "score": 10.0,
      "candidate": "def moveZerosToEnd(arr):\n    j = 0\n    for i in range(len(arr)):\n        if arr[i] != 0:\n            arr[j] = arr[i]\n            j += 1\n    while j < len(arr):\n        arr[j] = 0\n        j += 1\n\n    return arr\n\n\n\narr = [0, 0, 0, 1, 2, 0, 3, 4, 0, 5, 0]\nprint(moveZerosToEnd(arr))"
    },
    {
      "rank": 9,
      "score": 10.0,
      "candidate": "def move_zeroes(arr):\n    \"\"\"\n    O(n) & O(1)\n    \"\"\"\n    zero_count = 0\n    for i, num in enumerate(arr):\n        if num == 0:\n            zero_count += 1\n        else:\n            arr[i - zero_count] = num\n    arr[-zero_count:] = [0] * zero_count\n    return arr\n\nif __name__ == \"__main__\":\n    print(move_zeroes([0, 1, 0, 3, 12]))"
    },
    {
      "rank": 10,
      "score": 10.0,
      "candidate": "def move_zeroes(arr):\n    \"\"\"\n    :param arr: list - a list of integers\n    :return: list - after rearranging the elements\n    \"\"\"\n    if not arr:\n        return arr\n\n    zero_index = 0\n    for i in range(len(arr)):\n        if arr[i] != 0:\n            arr[zero_index] = arr[i]\n            zero_index += 1\n\n    for i in range(zero_index, len(arr)):\n        arr[i] = 0\n\n    return arr"
    },
    {
      "rank": 11,
      "score": 10.0,
      "candidate": "from typing import List\n\n\n# Time Complexity: O(n)\n# Space Complexity: O(1)\nclass SolutionOne:\n    def move_zeroes(self, nums: List[int]) -> None:\n        \"\"\"\n        Do not return anything, modify nums in-place instead.\n        \"\"\"\n        count = 0\n        for i in range(len(nums)):\n            if nums[i] != 0:\n                nums[count] = nums[i]\n                count += 1\n        for i in range(count, len(nums)):\n            nums[i] = 0\n\n\n# Time Complexity: O(n)\n# Space Complexity: O(1)\nclass SolutionTwo:\n    def move_zeroes(self, nums: List[int]) -> None:\n        \"\"\"\n        Do not return anything, modify nums in-place instead.\n        \"\"\"\n        i, j = 0, 0\n        while i < len(nums) and j < len(nums):\n            if nums[i] == 0:\n                i += 1\n            else:\n                nums[j] = nums[i]\n                j += 1\n                i += 1\n        while j < len(nums):\n            nums[j] = 0\n            j += 1"
    },
    {
      "rank": 12,
      "score": 10.0,
      "candidate": "def move_zeroes(arr):\n    \"\"\"\n    Time complexity: O(n).\n    Space complexity: O(1).\n    \"\"\"\n    # Count zeroes.\n    zeroes = 0\n    for num in arr:\n        if num == 0:\n            zeroes += 1\n\n    # Move zeroes to the end.\n    for i in range(len(arr)):\n        if arr[i] == 0:\n            arr.pop(i)\n            arr.append(0)\n\n    # Remove extra zeroes.\n    if zeroes > 0:\n        arr = arr[:-zeroes]\n\n    return arr\n\n\ndef main():\n    # Output: [1,2,3,4,5,0,0]\n    arr = [1, 2, 0, 3, 0, 4, 5, 0]\n    print(move_zeroes(arr))\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 13,
      "score": 10.0,
      "candidate": "def move_zeros(arr):\n    \"\"\"\n    O(n) & O(1)\n    \"\"\"\n    if not arr:\n        return []\n\n    count = 0\n    for i in range(len(arr)):\n        if arr[i] != 0:\n            arr[count] = arr[i]\n            count += 1\n\n    for i in range(count, len(arr)):\n        arr[i] = 0\n\n    return arr\n\n\ndef move_zeros_pointers(arr):\n    \"\"\"\n    O(n) & O(1)\n    \"\"\"\n    if not arr:\n        return []\n\n    count = 0\n    for i in range(len(arr)):\n        if arr[i] != 0:\n            arr[count] = arr[i]\n            count += 1\n\n    for i in range(count, len(arr)):\n        arr[i] = 0\n\n    return arr\n\n\nif __name__ == \"__main__\":\n    arr = [0, 1, 0, 3, 12]\n    print(move_zeros(arr))\n    print(move_zeros_pointers(arr))"
    },
    {
      "rank": 14,
      "score": 10.0,
      "candidate": "def move_zeroes(arr):\n    \"\"\"\n    Given an array of n elements, write a function to move all\n    the zeroes to the end of the array. The array elements may be\n    either large or small.\n    \"\"\"\n    if not arr:\n        return arr\n\n    zero_count = 0\n    for i in range(len(arr)):\n        if arr[i] == 0:\n            zero_count += 1\n        else:\n            arr[i - zero_count] = arr[i]\n\n    for i in range(len(arr) - zero_count, len(arr)):\n        arr[i] = 0\n\n    return arr\n\n\ndef test_move_zeroes():\n    \"\"\"\n    >>> test_move_zeroes()\n    \"\"\"\n    assert move_zeroes([0, 1, 0, 3, 12]) == [1, 3, 12, 0, 0]\n    assert move_zeroes([0, 0, 1]) == [1, 0, 0]\n    assert move_zeroes([2, 1]) == [2, 1]\n    assert move_zeroes([]) == []\n    assert move_zeroes([2, 0]) == [2, 0]\n    assert move_zeroes([0, 0, 2]) == [2, 0, 0]\n    assert move_zeroes([0, 0, 2, 0]) == [2, 0, 0, 0]\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 15,
      "score": 8.0,
      "candidate": "from random import randint\n\n\ndef move_zeroes(arr):\n    j = 0\n    for i in range(len(arr)):\n        if arr[i] != 0:\n            arr[j] = arr[i]\n            j += 1\n    while j < len(arr):\n        arr[j] = 0\n        j += 1\n\n\nif __name__ == \"__main__\":\n    arr = [randint(0, 10) for _ in range(10)]\n    print(\"Before:\", arr)\n    move_zeroes(arr)\n    print(\"After: \", arr)"
    },
    {
      "rank": 16,
      "score": 8.0,
      "candidate": "def move_zeros(arr):\n    \"\"\"\n    Move all zeroes to the end of the given array.\n\n    Time complexity: O(n).\n    Space complexity: O(1).\n    \"\"\"\n    if not arr:\n        return []\n\n    # Count zeroes.\n    count = 0\n    for i in range(len(arr)):\n        if arr[i] == 0:\n            count += 1\n\n    # Move zeroes.\n    i = 0\n    j = 0\n    while j < len(arr):\n        if arr[j] != 0:\n            arr[i] = arr[j]\n            i += 1\n        j += 1\n\n    # Fill zeroes.\n    while i < len(arr):\n        arr[i] = 0\n        i += 1\n\n    return arr\n\n\ndef main():\n    # Output: [1, 2, 3, 4, 5, 6, 0, 0, 0, 0]\n    arr = [0, 1, 2, 3, 4, 5, 6, 0, 0, 0]\n    print(move_zeros(arr))\n\n    # Output: [1, 2, 3, 4, 5, 6, 7, 0, 0, 0]\n    arr = [0, 1, 2, 3, 4, 5, 6, 7, 0, 0]\n    print(move_zeros(arr))\n\n    # Output: [1, 2, 3, 4, 5, 6, 7, 8, 0, 0]\n    arr = [0, 1, 2, 3, 4, 5, 6, 7, 8, 0]\n    print(move_zeros(arr))\n\n    # Output: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\n    arr = [0, 0, 0, 0, 0, 0, 0, 0"
    },
    {
      "rank": 17,
      "score": 8.0,
      "candidate": "def move_zero(arr):\n    \"\"\"\n    O(n) & O(1)\n    \"\"\"\n    if not arr:\n        return []\n\n    zero_count = 0\n    for i, num in enumerate(arr):\n        if num == 0:\n            zero_count += 1\n        else:\n            arr[i - zero_count] = num\n\n    return arr[len(arr) - zero_count : ] + [0] * zero_count\n\n\nif __name__ == \"__main__\":\n    print(move_zero([0, 0, 1, 2, 0, 6, 5, 0, 3, 0]))\n    print(move_zero([1, 2, 3, 0, 0, 0, 4, 5, 6]))\n    print(move_zero([0, 0, 0, 0, 0, 0]))\n    print(move_zero([]))"
    },
    {
      "rank": 18,
      "score": 8.0,
      "candidate": "def moveZeroes(arr):\n    # init pointers\n    left, right = 0, len(arr) - 1\n    # find first non-zero element\n    while left < right and arr[left] != 0:\n        left += 1\n    # check if all elements are zero\n    if left == right:\n        return\n    # move all zeroes to the end\n    while left < right:\n        # find next non-zero element\n        while left < right and arr[right] == 0:\n            right -= 1\n        # swap elements\n        arr[left], arr[right] = arr[right], arr[left]\n        left += 1\n        right -= 1\n\n# test\narr = [0, 1, 0, 3, 12]\nmoveZeroes(arr)\nprint(arr)"
    },
    {
      "rank": 19,
      "score": 8.0,
      "candidate": "def moveZeroes(arr):\n    # Write your code here.\n    zeroes = []\n    for i in range(len(arr)):\n        if arr[i] == 0:\n            zeroes.append(arr[i])\n    for i in range(len(zeroes)):\n        arr.remove(0)\n    arr.extend(zeroes)\n    return arr\n\n# test\narr = [1, 0, 0, 0, 0, 0, 1, 0, 1, 1]\nprint(\"Original array:\", arr)\nprint(\"Move Zeroes:\", moveZeroes(arr))"
    },
    {
      "rank": 20,
      "score": 8.0,
      "candidate": "def move_zeros(arr):\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(1)\n    \"\"\"\n    n = len(arr)\n\n    # if there are no zeroes, return the original array\n    if n == 0:\n        return arr\n\n    # number of zeroes\n    num_zeroes = 0\n\n    for i in range(n):\n        if arr[i] == 0:\n            num_zeroes += 1\n        elif num_zeroes != 0:\n            # move the non zero elements to the left and insert the zeros\n            arr[i - num_zeroes] = arr[i]\n            arr[i] = 0\n\n    return arr\n\n\nif __name__ == \"__main__\":\n    print(move_zeros([0, 1, 0, 3, 12]))"
    },
    {
      "rank": 21,
      "score": 8.0,
      "candidate": "def moveZeroes(arr):\n    \"\"\"\n    Do not return anything, modify arr in-place instead.\n    \"\"\"\n    # return arr.sort(key=lambda x: x == 0)\n    i = 0\n    for j in range(len(arr)):\n        if arr[j] != 0:\n            arr[i], arr[j] = arr[j], arr[i]\n            i += 1\n\n    return arr\n\n\nif __name__ == '__main__':\n    arr = [1, 2, 0, 3, 4, 0, 5, 0]\n    print(moveZeroes(arr))"
    },
    {
      "rank": 22,
      "score": 8.0,
      "candidate": "def move_zero(arr):\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(1)\n    \"\"\"\n    i = 0\n    while i < len(arr):\n        if arr[i] == 0:\n            arr.pop(i)\n            arr.append(0)\n        else:\n            i += 1\n\n    return arr\n\nif __name__ == \"__main__\":\n    print(move_zero([1,2,0,3,0,4,5]))"
    },
    {
      "rank": 23,
      "score": 8.0,
      "candidate": "def move_zeroes(arr):\n    # One-liner\n    # arr.sort(key=lambda x: x == 0)\n\n    # Two-liner\n    # zero_idx = 0\n    # for i in range(len(arr)):\n    #     if arr[i] != 0:\n    #         arr[zero_idx] = arr[i]\n    #         zero_idx += 1\n    # while zero_idx < len(arr):\n    #     arr[zero_idx] = 0\n    #     zero_idx += 1\n\n    # Three-liner\n    # for i in range(len(arr)):\n    #     if arr[i] == 0:\n    #         arr.append(0)\n    #         arr.pop(i)\n    #         i -= 1\n\n    # Four-liner\n    # zero_idx = 0\n    # for i in range(len(arr)):\n    #     if arr[i] != 0:\n    #         arr[zero_idx] = arr[i]\n    #         zero_idx += 1\n    # while zero_idx < len(arr):\n    #     arr[zero_idx] = 0\n    #     zero_idx += 1\n\n    # Five-liner\n    # zero_idx = 0\n    # for i in range(len(arr)):\n    #     if arr[i] != 0:\n    #         arr[zero_idx] = arr[i]\n    #         zero_idx += 1\n    # while zero_idx < len(arr):\n    #     arr[zero_idx] = 0\n    #     zero_idx += 1\n\n    # Six-liner\n    # zero_idx = 0\n    # for i in range(len(arr)):\n    #     if arr[i] != 0:\n    #         arr[zero_idx] = arr[i]\n    #         zero_idx += 1\n    # while zero_idx < len(arr):\n    #     arr[zero_idx] = 0\n    #     zero_idx += 1\n\n    # Seven-liner"
    },
    {
      "rank": 24,
      "score": 8.0,
      "candidate": "def move_zeroes(arr):\n    count = 0\n    for i in range(len(arr)):\n        if arr[i] != 0:\n            arr[count] = arr[i]\n            count += 1\n    for i in range(count, len(arr)):\n        arr[i] = 0\n    return arr\n\n\ndef main():\n    print(\"Array:\")\n    print(move_zeroes([0, 1, 0, 3, 12]))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 25,
      "score": 8.0,
      "candidate": "def move_zero(arr):\n    count = 0\n    for i in range(len(arr)):\n        if arr[i] == 0:\n            arr.append(0)\n            del arr[i]\n            count += 1\n    return arr\n\nprint(move_zero([1,2,0,4,3,0,1]))"
    },
    {
      "rank": 26,
      "score": 8.0,
      "candidate": "def move_zeroes(arr):\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(1)\n    \"\"\"\n    zero_count = 0\n    for i in range(len(arr)):\n        if arr[i] == 0:\n            zero_count += 1\n        else:\n            arr[i - zero_count] = arr[i]\n    for i in range(len(arr) - zero_count, len(arr)):\n        arr[i] = 0\n\n\nif __name__ == \"__main__\":\n    arr = [0, 1, 0, 3, 12]\n    move_zeroes(arr)\n    print(arr)"
    },
    {
      "rank": 27,
      "score": 8.0,
      "candidate": "def moveZeroes(arr):\n    zero_count = 0\n    for i in range(len(arr)):\n        if arr[i] == 0:\n            zero_count += 1\n        else:\n            arr[zero_count] = arr[i]\n            zero_count += 1\n\n    for i in range(zero_count, len(arr)):\n        arr[i] = 0\n    return arr\n\ndef main():\n    arr = [0, 2, 0, 1, 3, 12]\n    print(moveZeroes(arr))\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 28,
      "score": 8.0,
      "candidate": "def move_zeroes(arr):\n    \"\"\"\n    :param arr: list of integers\n    return: list of integers\n    \"\"\"\n    if not arr:\n        return []\n    count = 0\n    for i in range(len(arr)):\n        if arr[i] != 0:\n            arr[count] = arr[i]\n            count += 1\n    while count < len(arr):\n        arr[count] = 0\n        count += 1\n    return arr\n\n\ndef test_move_zeroes():\n    assert move_zeroes([0, 1, 0, 3, 12]) == [1, 3, 12, 0, 0]\n    assert move_zeroes([1, 0, 0, 3, 12, 0, 15, 0, 1, 0]) == [1, 3, 12, 15, 1, 0, 0, 0, 0, 0]\n\n\nif __name__ == '__main__':\n    test_move_zeroes()"
    },
    {
      "rank": 29,
      "score": 8.0,
      "candidate": "def moveZerosToEnd(arr):\n    nonZeroIndex = 0\n    for i in range(len(arr)):\n        if arr[i] != 0:\n            arr[nonZeroIndex] = arr[i]\n            nonZeroIndex += 1\n    while nonZeroIndex < len(arr):\n        arr[nonZeroIndex] = 0\n        nonZeroIndex += 1\n\n    return arr\n\nif __name__ == \"__main__\":\n    arr = [0, 1, 0, 3, 12]\n    print(moveZerosToEnd(arr))"
    },
    {
      "rank": 30,
      "score": 8.0,
      "candidate": "def move_zero(arr):\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(1)\n    \"\"\"\n    zero_count = 0\n    for i in range(len(arr)):\n        if arr[i] == 0:\n            zero_count += 1\n\n    j = len(arr) - 1\n\n    while zero_count > 0:\n        if arr[j] == 0:\n            j -= 1\n            zero_count -= 1\n\n        if arr[j] != 0:\n            arr[i] = arr[j]\n            arr[j] = 0\n            i += 1\n            j -= 1\n\n    return arr\n\nif __name__ == \"__main__\":\n    print(move_zero([0, 2, 4, 1, 4, 1, 0, 3, 2, 3]))"
    },
    {
      "rank": 31,
      "score": 8.0,
      "candidate": "def move_zeroes(arr):\n    \"\"\"\n    :param arr: list of integers\n    :return: list of integers\n    \"\"\"\n\n    zeroes = []\n    for i in range(len(arr)):\n        if arr[i] == 0:\n            zeroes.append(i)\n\n    for i in range(len(zeroes)):\n        arr.pop(zeroes[i] - i)\n\n    return arr\n\n\ndef main():\n    print(move_zeroes([0, 1, 2, 0, 0, 3, 4, 0, 0]))\n    print(move_zeroes([1, 2, 0, 3, 4, 0, 5, 0, 0]))\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 32,
      "score": 8.0,
      "candidate": "def move_zeroes(arr):\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(1)\n    \"\"\"\n    if len(arr) < 2:\n        return arr\n\n    count_zeroes = 0\n    for i in range(len(arr)):\n        if arr[i] == 0:\n            count_zeroes += 1\n        else:\n            arr[i-count_zeroes] = arr[i]\n\n    while count_zeroes > 0:\n        arr[len(arr)-count_zeroes] = 0\n        count_zeroes -= 1\n\n    return arr\n\nif __name__ == \"__main__\":\n    print(move_zeroes([0,1,0,3,12]))"
    },
    {
      "rank": 33,
      "score": 8.0,
      "candidate": "def move_zeroes(arr):\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(1)\n    \"\"\"\n    length = len(arr)\n    num_zeroes = 0\n    for i in range(length):\n        if arr[i] == 0:\n            num_zeroes += 1\n            continue\n\n        # if we find a non-zero, swap it with the first zero\n        if num_zeroes > 0:\n            arr[i], arr[i - num_zeroes] = arr[i - num_zeroes], arr[i]\n\n    return arr\n\n\nif __name__ == \"__main__\":\n    print(move_zeroes([0, 1, 2, 3, 0, 5, 0]))"
    },
    {
      "rank": 34,
      "score": 8.0,
      "candidate": "def move_zeros(arr):\n    zero_count = 0\n    for i in range(len(arr)):\n        if arr[i] == 0:\n            zero_count += 1\n\n    j = len(arr) - 1\n    for i in range(len(arr) - zero_count):\n        if arr[i] == 0:\n            arr[i] = arr[j]\n            arr[j] = 0\n            j -= 1\n\nif __name__ == \"__main__\":\n    arr = [0, 1, 0, 3, 12]\n    move_zeros(arr)\n    print(arr)"
    },
    {
      "rank": 35,
      "score": 8.0,
      "candidate": "def move_zeroes(arr):\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(1)\n    \"\"\"\n    non_zero_count = 0\n    for i in range(len(arr)):\n        if arr[i] != 0:\n            arr[non_zero_count] = arr[i]\n            non_zero_count += 1\n\n    for i in range(non_zero_count, len(arr)):\n        arr[i] = 0\n\n    return arr\n\n\nif __name__ == \"__main__\":\n    print(move_zeroes([0, 1, 0, 3, 12]))"
    },
    {
      "rank": 36,
      "score": 8.0,
      "candidate": "from timeit import default_timer as timer\n\n\ndef move_zeros(arr: list) -> list:\n    \"\"\"Move all zeros to the end of the given array.\n\n    Args:\n        arr (list): given array\n\n    Returns:\n        list: given array with zeroes moved to the end\n    \"\"\"\n    i, j = 0, 0\n\n    while i < len(arr) and j < len(arr):\n        if arr[i] == 0:\n            arr.pop(i)\n            arr.insert(len(arr), 0)\n        else:\n            i += 1\n    return arr\n\n\nif __name__ == \"__main__\":\n    start = timer()\n    print(move_zeros([0, 0, 1, 2, 0, 1, 3, 0, 0]))\n    print(f\"{(timer() - start) * 1000:.1f} ms\")"
    },
    {
      "rank": 37,
      "score": 8.0,
      "candidate": "def move_zeroes(arr):\n    \"\"\"\n    :type arr: List[int]\n    :rtype: void Do not return anything, modify arr in-place instead.\n    \"\"\"\n    non_zero_count = 0\n    for i in range(len(arr)):\n        if arr[i] != 0:\n            non_zero_count += 1\n    for i in range(non_zero_count, len(arr)):\n        arr[i] = 0\n\n    zero_count = 0\n    for i in range(len(arr)):\n        if arr[i] == 0:\n            zero_count += 1\n        else:\n            arr[i - zero_count] = arr[i]\n    for i in range(len(arr) - zero_count, len(arr)):\n        arr[i] = 0\n\n\n# Test cases:\nprint(move_zeroes([0, 1, 0, 3, 12]))\nprint(move_zeroes([1, 0, 2, 3, 0, 4, 5, 0]))\nprint(move_zeroes([1, 0, 2, 0, 0, 0, 3, 0, 0, 0, 0]))"
    },
    {
      "rank": 38,
      "score": 8.0,
      "candidate": "def move_zeros(arr):\n    if len(arr) <= 1:\n        return arr\n    zeroes = [0] * (arr.count(0))\n    not_zeroes = [n for n in arr if n != 0]\n    return zeroes + not_zeroes\n\n\nif __name__ == '__main__':\n    print(move_zeros([0, 0, 1, 2, 0, 1, 3, 0, 0, 0, 1]))"
    },
    {
      "rank": 39,
      "score": 8.0,
      "candidate": "def move_zeroes(arr):\n    \"\"\"\n    O(n) & O(1)\n    \"\"\"\n    zero_index = 0\n\n    for i in range(len(arr)):\n        if arr[i] != 0:\n            arr[i], arr[zero_index] = arr[zero_index], arr[i]\n            zero_index += 1\n\n\nif __name__ == \"__main__\":\n    arr = [1, 2, 0, 3, 0, 4, 0, 5]\n    move_zeroes(arr)\n    print(arr)"
    },
    {
      "rank": 40,
      "score": 8.0,
      "candidate": "from typing import List\n\n\n# Time complexity: O(n)\n# Space complexity: O(1)\ndef move_zeroes(nums: List[int]) -> None:\n    \"\"\"\n    Do not return anything, modify nums in-place instead.\n    \"\"\"\n    last_non_zero_index = 0\n    for i in range(len(nums)):\n        if nums[i] != 0:\n            nums[last_non_zero_index] = nums[i]\n            last_non_zero_index += 1\n    nums[last_non_zero_index:] = [0] * (len(nums) - last_non_zero_index)\n\n\n# Time complexity: O(n)\n# Space complexity: O(1)\ndef move_zeroes_two_pointer(nums: List[int]) -> None:\n    \"\"\"\n    Do not return anything, modify nums in-place instead.\n    \"\"\"\n    non_zero_pointer = 0\n    for i in range(len(nums)):\n        if nums[i] != 0:\n            nums[non_zero_pointer] = nums[i]\n            non_zero_pointer += 1\n    nums[non_zero_pointer:] = [0] * (len(nums) - non_zero_pointer)\n\n\n# Time complexity: O(n)\n# Space complexity: O(n)\ndef move_zeroes_auxiliary_array(nums: List[int]) -> None:\n    \"\"\"\n    Do not return anything, modify nums in-place instead.\n    \"\"\"\n    aux_array = [num for num in nums if num != 0]\n    nums[:len(aux_array)] = aux_array\n    nums[len(aux_array):] = [0] * (len(nums) - len(aux_array))"
    },
    {
      "rank": 41,
      "score": 8.0,
      "candidate": "def move_zeroes(arr: list[int]) -> list[int]:\n    zero_count = 0\n    for i in range(len(arr)):\n        if arr[i] == 0:\n            zero_count += 1\n        else:\n            arr[i - zero_count] = arr[i]\n    for i in range(len(arr) - zero_count, len(arr)):\n        arr[i] = 0\n    return arr\n\n\nif __name__ == \"__main__\":\n    assert move_zeroes([0, 0, 0, 0, 0, 1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5, 0, 0, 0, 0, 0]"
    },
    {
      "rank": 42,
      "score": 8.0,
      "candidate": "def move_zeroes(arr):\n    \"\"\"\n    Time complexity: O(n)\n    Space complexity: O(1)\n    \"\"\"\n    last_non_zero = 0\n    for i in range(len(arr)):\n        if arr[i] != 0:\n            arr[last_non_zero], arr[i] = arr[i], arr[last_non_zero]\n            last_non_zero += 1\n\n    return arr\n\n\nif __name__ == \"__main__\":\n    test_cases = [\n        ([0, 1, 0, 3, 12], [1, 3, 12, 0, 0]),\n        ([0, 0, 0, 0], [0, 0, 0, 0]),\n        ([1, 2, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0"
    },
    {
      "rank": 43,
      "score": 8.0,
      "candidate": "def move_zeroes(arr):\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(1)\n    \"\"\"\n    if not arr:\n        return []\n\n    i = 0\n    j = 0\n\n    while j < len(arr):\n        if arr[j] != 0:\n            arr[i] = arr[j]\n            i += 1\n\n        j += 1\n\n    while i < len(arr):\n        arr[i] = 0\n        i += 1\n\n    return arr\n\n\nif __name__ == \"__main__\":\n    print(move_zeroes([1, 2, 0, 1, 0, 1, 3, 5, 0, 0, 0]))"
    },
    {
      "rank": 44,
      "score": 8.0,
      "candidate": "def move_zeros(arr):\n    count = 0\n    for i in range(len(arr)):\n        if arr[i] != 0:\n            arr[count] = arr[i]\n            count += 1\n    for i in range(count, len(arr)):\n        arr[i] = 0\n\n\ndef test_move_zeros():\n    assert move_zeros([0, 1, 0, 3, 12]) == [1, 3, 12, 0, 0]\n    assert move_zeros([]) == []\n    assert move_zeros([1, 0]) == [1, 0]\n    assert move_zeros([0, 0, 1]) == [1, 0, 0]"
    },
    {
      "rank": 45,
      "score": 8.0,
      "candidate": "def move_zeroes(array):\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(1)\n    \"\"\"\n    count = 0\n\n    for i in range(len(array)):\n        if array[i] != 0:\n            array[count] = array[i]\n            count += 1\n\n    while count < len(array):\n        array[count] = 0\n        count += 1\n\n    return array\n\n\nif __name__ == \"__main__\":\n    print(move_zeroes([0, 2, 0, 4, 3, 0, 5, 0]))"
    },
    {
      "rank": 46,
      "score": 8.0,
      "candidate": "def move_zeros(arr):\n    \"\"\"\n    :param arr: list of integers\n    :return: list of integers with zeroes moved to the end\n    \"\"\"\n\n    i = 0\n    j = 0\n    while i < len(arr) and j < len(arr):\n        if arr[i] == 0:\n            arr.append(arr[i])\n            arr.pop(i)\n            j += 1\n        else:\n            i += 1\n\n    return arr\n\n\ndef move_zeros_optimized(arr):\n    \"\"\"\n    :param arr: list of integers\n    :return: list of integers with zeroes moved to the end\n    \"\"\"\n\n    num_zeros = 0\n    for i in range(len(arr)):\n        if arr[i] == 0:\n            num_zeros += 1\n        elif num_zeros > 0:\n            arr[i - num_zeros] = arr[i]\n            arr[i] = 0\n\n    return arr"
    },
    {
      "rank": 47,
      "score": 8.0,
      "candidate": "from typing import List\n\n\ndef move_zeroes(arr: List[int]) -> List[int]:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(1)\n    \"\"\"\n    zero_count = 0\n\n    for i in range(len(arr)):\n        if arr[i] == 0:\n            zero_count += 1\n        else:\n            arr[i - zero_count] = arr[i]\n\n    for i in range(len(arr) - zero_count, len(arr)):\n        arr[i] = 0\n\n    return arr\n\n\nif __name__ == \"__main__\":\n    assert move_zeroes([1, 2, 0, 3, 4, 0]) == [1, 2, 3, 4, 0, 0]"
    },
    {
      "rank": 48,
      "score": 8.0,
      "candidate": "def move_zeroes(arr):\n    i = 0\n    while i < len(arr):\n        if arr[i] == 0:\n            arr.pop(i)\n            arr.append(0)\n        else:\n            i += 1\n\n    return arr\n\narr = [1, 0, 2, 3, 0, 4, 5]\nprint(move_zeroes(arr))"
    },
    {
      "rank": 49,
      "score": 8.0,
      "candidate": "def move_zeros(arr):\n    \"\"\"\n    O(n) time and O(1) space\n    \"\"\"\n    non_zeros = 0\n    for i in range(len(arr)):\n        if arr[i] != 0:\n            arr[non_zeros] = arr[i]\n            non_zeros += 1\n    for i in range(non_zeros, len(arr)):\n        arr[i] = 0\n    return arr\n\ndef move_zeros2(arr):\n    \"\"\"\n    O(n) time and O(1) space\n    \"\"\"\n    last_zero = 0\n    for i in range(len(arr)):\n        if arr[i] != 0:\n            arr[last_zero] = arr[i]\n            last_zero += 1\n    for i in range(last_zero, len(arr)):\n        arr[i] = 0\n    return arr\n\nif __name__ == '__main__':\n    arr = [0, 0, 2, 0, 0, 0, 1, 0, 0]\n    print(move_zeros(arr))\n    print(move_zeros2(arr))"
    },
    {
      "rank": 50,
      "score": 8.0,
      "candidate": "def move_zeroes(arr):\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(1)\n    \"\"\"\n    i = 0\n    zeroes = 0\n\n    while i < len(arr):\n        if arr[i] == 0:\n            zeroes += 1\n        else:\n            arr[i - zeroes] = arr[i]\n        i += 1\n\n    while zeroes > 0:\n        arr[-zeroes] = 0\n        zeroes -= 1\n\n    return arr\n\nif __name__ == '__main__':\n    print(move_zeroes([0, 1, 0, 3, 12]))"
    },
    {
      "rank": 51,
      "score": 8.0,
      "candidate": "def move_zeroes(arr):\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(1)\n    \"\"\"\n    last_non_zero_index = 0\n\n    for i in range(len(arr)):\n        if arr[i] != 0:\n            arr[last_non_zero_index], arr[i] = arr[i], arr[last_non_zero_index]\n            last_non_zero_index += 1\n\n    return arr\n\n\ndef main():\n    print(move_zeroes([0, 2, 0, 4, 3, 5, 0]))\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 52,
      "score": 8.0,
      "candidate": "def move_zeroes(arr: list) -> list:\n    \"\"\"\n    O(n) & O(1)\n    \"\"\"\n    count = 0\n    for i in range(len(arr)):\n        if arr[i] != 0:\n            arr[count] = arr[i]\n            count += 1\n    while count < len(arr):\n        arr[count] = 0\n        count += 1\n    return arr\n\n\nif __name__ == \"__main__\":\n    print(move_zeroes([0, 1, 2, 0, 1, 3, 6, 0, 0, 0]))"
    },
    {
      "rank": 53,
      "score": 8.0,
      "candidate": "def move_zeros(arr):\n    # O(n)\n    count = 0\n    for i in range(len(arr)):\n        if arr[i] == 0:\n            count += 1\n        else:\n            arr[count] = arr[i]\n            count += 1\n    for i in range(count, len(arr)):\n        arr[i] = 0\n\n    return arr\n\n\ndef main():\n    print(move_zeros([0, 1, 0, 3, 12]))\n    print(move_zeros([0, 0, 0, 0, 0]))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 54,
      "score": 8.0,
      "candidate": "def move_zeros(arr):\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(1)\n    \"\"\"\n    if not arr:\n        return arr\n\n    # Get the index of the first non-zero element\n    non_zero_index = 0\n    for i in range(len(arr)):\n        if arr[i] != 0:\n            arr[non_zero_index] = arr[i]\n            non_zero_index += 1\n\n    # Set the remaining elements to 0\n    for i in range(non_zero_index, len(arr)):\n        arr[i] = 0\n\n    return arr\n\n\nif __name__ == \"__main__\":\n    arr = [0, 0, 0, 0, 1, 2, 3, 4, 5]\n    assert move_zeros(arr) == [1, 2, 3, 4, 5, 0, 0, 0, 0]"
    },
    {
      "rank": 55,
      "score": 8.0,
      "candidate": "def move_zeros(arr: list) -> list:\n    \"\"\"\n    O(n) & O(1)\n    \"\"\"\n    last_non_zero_index = 0\n\n    for i in range(len(arr)):\n        if arr[i] != 0:\n            arr[last_non_zero_index] = arr[i]\n            last_non_zero_index += 1\n\n    while last_non_zero_index < len(arr):\n        arr[last_non_zero_index] = 0\n        last_non_zero_index += 1\n\n    return arr\n\n\nif __name__ == \"__main__\":\n    print(move_zeros([0, 0, 0, 0, 1, 2, 0, 0, 0, 0, 3, 4, 0, 0, 0, 0, 5]))"
    },
    {
      "rank": 56,
      "score": 8.0,
      "candidate": "def move_zeroes(arr):\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(1)\n    \"\"\"\n    # initialize count of zeroes\n    zero_count = 0\n\n    # loop through array\n    for i in range(len(arr)):\n        # if element is 0\n        if arr[i] == 0:\n            # increment zero count\n            zero_count += 1\n        else:\n            # if element is not 0\n            # and zero count is greater than zero\n            if zero_count > 0:\n                # swap element with last non-zero element\n                arr[i], arr[i - zero_count] = arr[i - zero_count], arr[i]\n\n    # loop through array\n    for i in range(len(arr)):\n        # if element is 0\n        if arr[i] == 0:\n            # swap element with last non-zero element\n            arr[i], arr[-1] = arr[-1], arr[i]\n            # decrement last index\n            arr.pop()\n\n    return arr\n\n\ndef move_zeroes2(arr):\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(n)\n    \"\"\"\n    # initialize count of zeroes\n    zero_count = 0\n\n    # loop through array\n    for i in range(len(arr)):\n        # if element is 0\n        if arr[i] == 0:\n            # increment zero count\n            zero_count += 1\n        else:\n            # if element is not 0\n            # and zero count is greater than zero\n            if zero_count > 0:\n                # swap element with last non-zero element\n                arr[i], arr[i - zero_count] = arr[i - zero_count], arr[i]\n\n    # loop through array\n    for i in range(len(arr)):\n        # if element is 0\n        if arr[i] == 0:\n            # swap element with last non-zero element\n            arr[i], arr[0] = arr[0], arr[i]\n            # decrement last index\n            arr"
    },
    {
      "rank": 57,
      "score": 8.0,
      "candidate": "def move_zeroes(arr):\n    count = 0\n    for i in range(len(arr)):\n        if arr[i] != 0:\n            arr[count] = arr[i]\n            count += 1\n    for i in range(count, len(arr)):\n        arr[i] = 0\n\n\nif __name__ == \"__main__\":\n    arr = [0, 0, 0, 2, 0, 1, 3, 4, 0, 0]\n    move_zeroes(arr)\n    print(arr)"
    },
    {
      "rank": 58,
      "score": 8.0,
      "candidate": "def move_zeros(arr):\n    # O(n) time, O(1) space\n    if not arr:\n        return\n    # count the number of zeroes\n    num_zeroes = 0\n    for i in range(len(arr)):\n        if arr[i] == 0:\n            num_zeroes += 1\n    # move the zeroes to the end of the array\n    for i in range(len(arr) - 1, -1, -1):\n        if arr[i] == 0:\n            arr.pop(i)\n    for i in range(num_zeroes):\n        arr.append(0)\n\n\ndef main():\n    arr = [0, 0, 2, 4, 9, 0, 1, 3, 0, 5, 0, 0, 7, 0, 0, 9]\n    move_zeros(arr)\n    print(arr)\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 59,
      "score": 8.0,
      "candidate": "def move_zeroes(arr):\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(1)\n    \"\"\"\n    zero_count = 0\n    for index, value in enumerate(arr):\n        if value == 0:\n            zero_count += 1\n        else:\n            arr[index - zero_count] = value\n\n    for index in range(len(arr) - zero_count, len(arr)):\n        arr[index] = 0\n\n    return arr\n\nif __name__ == '__main__':\n    print(move_zeroes([0, 2, 0, 4, 3, 0, 5, 0]))"
    },
    {
      "rank": 60,
      "score": 8.0,
      "candidate": "from typing import List\n\n\ndef move_zeroes(arr: List[int]) -> None:\n    \"\"\"Moves all zeroes to the end of the array.\n\n    Args:\n        arr (List[int]): array to manipulate\n    \"\"\"\n\n    # count non-zero elements\n    non_zero_count = 0\n    for num in arr:\n        if num != 0:\n            non_zero_count += 1\n\n    # swap zeroes to the end of the array\n    for i in range(len(arr) - 1, -1, -1):\n        if arr[i] != 0:\n            arr[non_zero_count] = arr[i]\n            non_zero_count += 1\n        if non_zero_count == len(arr):\n            break\n\n\nif __name__ == \"__main__\":\n    arr = [0, 1, 0, 3, 12]\n    move_zeroes(arr)\n    print(arr)"
    },
    {
      "rank": 61,
      "score": 8.0,
      "candidate": "def move_zero_to_end(arr: list) -> list:\n    \"\"\"\n    This is an in-place operation.\n    \"\"\"\n    # 1. Initialize a count of zeroes\n    zeroes_count = 0\n\n    # 2. Iterate over the array\n    for i in range(len(arr)):\n        # 3. If we find a non-zero, we swap it with the first zero we encounter\n        if arr[i] != 0:\n            arr[zeroes_count], arr[i] = arr[i], arr[zeroes_count]\n            zeroes_count += 1\n\n    return arr\n\n\nif __name__ == \"__main__\":\n    print(move_zero_to_end([0, 0, 0, 0, 0, 0, 1, 2, 3, 0, 4, 0, 5, 6, 0]))\n    print(move_zero_to_end([0, 1, 2, 3, 0, 4, 0, 5, 6, 0]))\n    print(move_zero_to_end([0, 0, 0, 0, 0, 0, 1, 2, 3, 0, 4, 0, 5, 6, 0]))"
    },
    {
      "rank": 62,
      "score": 8.0,
      "candidate": "def move_zeroes(nums: list) -> None:\n    \"\"\"\n    Do not return anything, modify nums in-place instead.\n    \"\"\"\n    j = 0\n\n    for i in range(len(nums)):\n        if nums[i]:\n            nums[j] = nums[i]\n            j += 1\n\n    while j < len(nums):\n        nums[j] = 0\n        j += 1\n\n\nif __name__ == \"__main__\":\n    nums = [0, 1, 0, 3, 12]\n    print(nums)\n    move_zeroes(nums)\n    print(nums)"
    },
    {
      "rank": 63,
      "score": 8.0,
      "candidate": "def move_zeros(arr):\n    zero_index = 0\n    for i in range(len(arr)):\n        if arr[i] == 0:\n            arr[i], arr[zero_index] = arr[zero_index], arr[i]\n            zero_index += 1\n\n    return arr\n\n\nif __name__ == \"__main__\":\n    arr = [0, 1, 0, 3, 12]\n    print(move_zeros(arr))"
    },
    {
      "rank": 64,
      "score": 8.0,
      "candidate": "def move_zeroes(arr):\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(1)\n    \"\"\"\n    count = 0\n\n    for i in range(len(arr)):\n        if arr[i] != 0:\n            arr[count] = arr[i]\n            count += 1\n\n    while count < len(arr):\n        arr[count] = 0\n        count += 1\n\n\nif __name__ == \"__main__\":\n    arr = [0, 1, 0, 3, 12]\n    move_zeroes(arr)\n    print(arr)"
    },
    {
      "rank": 65,
      "score": 8.0,
      "candidate": "from timeit import default_timer as timer\n\n\ndef move_zeroes(nums):\n    \"\"\"\n    Brute force solution.\n    :param nums: list of integers\n    :return: list of integers\n    \"\"\"\n    zero_indices = []\n    for i in range(len(nums)):\n        if nums[i] == 0:\n            zero_indices.append(i)\n    for i in zero_indices:\n        nums.pop(i)\n    for i in range(len(zero_indices)):\n        nums.append(0)\n    return nums\n\n\ndef move_zeroes_better(nums):\n    \"\"\"\n    Better solution.\n    :param nums: list of integers\n    :return: list of integers\n    \"\"\"\n    zero_count = 0\n    for i in range(len(nums)):\n        if nums[i] == 0:\n            zero_count += 1\n    for i in range(len(nums) - zero_count):\n        nums[i] = nums[i + zero_count]\n    for i in range(len(nums) - zero_count, len(nums)):\n        nums[i] = 0\n    return nums\n\n\nif __name__ == \"__main__\":\n    start = timer()\n    nums = [0, 0, 0, 2, 1, 3, 5, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0"
    },
    {
      "rank": 66,
      "score": 8.0,
      "candidate": "def moveZeroes(arr):\n    # Your code here\n    n = len(arr)\n    count = 0\n    for i in range(n):\n        if arr[i] != 0:\n            arr[count] = arr[i]\n            count += 1\n    while count < n:\n        arr[count] = 0\n        count += 1\n\nif __name__ == '__main__':\n    arr = [0, 2, 0, 4, 3, 0, 5, 0]\n    moveZeroes(arr)\n    print(arr)"
    },
    {
      "rank": 67,
      "score": 8.0,
      "candidate": "def move_zeros(array):\n    \"\"\"\n    Move all zeroes to the end of the given array.\n\n    Time Complexity: O(N)\n    Space Complexity: O(1)\n    \"\"\"\n    zero_counter = 0\n\n    for index, num in enumerate(array):\n        if num == 0:\n            zero_counter += 1\n        else:\n            array[index - zero_counter] = num\n\n    for i in range(len(array) - zero_counter, len(array)):\n        array[i] = 0\n\n    return array\n\n\nif __name__ == \"__main__\":\n    print(move_zeros([0, 0, 1, 2, 0, 1, 3, 0, 4, 0, 5, 0]))"
    },
    {
      "rank": 68,
      "score": 8.0,
      "candidate": "def moveZeros(array):\n    \"\"\"\n    >>> moveZeros([1,2,0,3,4,0])\n    [1,2,3,4,0,0]\n    \"\"\"\n    zero_counter = 0\n    for i in range(len(array)):\n        if array[i] == 0:\n            zero_counter += 1\n        else:\n            array[i-zero_counter] = array[i]\n    for i in range(len(array)-zero_counter, len(array)):\n        array[i] = 0\n    return array\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 69,
      "score": 8.0,
      "candidate": "def move_zeroes(arr: list) -> list:\n    \"\"\"\n    Time Complexity: O(n)\n    \"\"\"\n\n    # We'll use two pointers - a slow pointer and a fast pointer\n    # The slow pointer will always point to the next zero\n    # The fast pointer will point to the next element after the slow pointer\n\n    slow = 0\n    fast = 0\n\n    while fast < len(arr):\n        if arr[fast] != 0:\n            arr[slow] = arr[fast]\n            slow += 1\n        fast += 1\n\n    # Now we've reached the end of the array, we can set all the remaining elements to zero\n    while slow < len(arr):\n        arr[slow] = 0\n        slow += 1\n\n    return arr\n\n\nif __name__ == \"__main__\":\n    print(move_zeroes([1, 0, 0, 2, 0, 1, 3, 0, 0]))"
    },
    {
      "rank": 70,
      "score": 8.0,
      "candidate": "def move_zeroes(array):\n    \"\"\"\n    Move all zeroes to the end of the given array.\n    :param array: list\n    :return: list\n    \"\"\"\n    i = 0\n    j = len(array) - 1\n\n    while i < j:\n        if array[i] == 0:\n            array[i], array[j] = array[j], array[i]\n            j -= 1\n        else:\n            i += 1\n    return array\n\n\nprint(move_zeroes([0, 1, 0, 3, 12]))"
    },
    {
      "rank": 71,
      "score": 8.0,
      "candidate": "def move_zeroes(arr):\n    \"\"\"\n    Given an array of n elements, write a function to move all 0's to the end of the array.\n    \"\"\"\n    if len(arr) == 0:\n        return []\n    zero_index = 0\n    for i in range(len(arr)):\n        if arr[i] == 0:\n            arr[zero_index], arr[i] = arr[i], arr[zero_index]\n            zero_index += 1\n    return arr\n\n\nif __name__ == \"__main__\":\n    print(move_zeroes([0, 2, 3, 0, 5, 0, 2]))"
    },
    {
      "rank": 72,
      "score": 8.0,
      "candidate": "def move_zeros(array):\n    \"\"\"\n    Move all zeroes to the end of the given array.\n    \"\"\"\n    if len(array) == 0:\n        return array\n\n    j = 0\n    for i in range(len(array)):\n        if array[i] != 0:\n            array[j] = array[i]\n            j += 1\n    for i in range(j, len(array)):\n        array[i] = 0\n    return array\n\n\ndef main():\n    array = [0, 1, 0, 3, 12]\n    result = move_zeros(array)\n    print(\"Array\", array)\n    print(\"Result\", result)\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 73,
      "score": 2.0,
      "candidate": "from typing import List\n\n\ndef move_zeroes(nums: List[int]) -> None:\n    \"\"\"\n    Do not return anything, modify nums in-place instead.\n    \"\"\"\n    # O(n)\n    # zeroes_count = nums.count(0)\n    # for _ in range(zeroes_count):\n    #     nums.remove(0)\n    # nums.extend([0] * zeroes_count)\n\n    # O(n)\n    # zeroes_index = 0\n    # for i in range(len(nums)):\n    #     if nums[i] != 0:\n    #         nums[zeroes_index] = nums[i]\n    #         zeroes_index += 1\n    # for i in range(zeroes_index, len(nums)):\n    #     nums[i] = 0\n\n    # O(n)\n    # zeroes_index = 0\n    # for i in range(len(nums)):\n    #     if nums[i] == 0:\n    #         nums[i], nums[zeroes_index] = nums[zeroes_index], nums[i]\n    #         zeroes_index += 1\n\n    # O(n)\n    # zeroes_index = 0\n    # for i in range(len(nums)):\n    #     if nums[i] != 0:\n    #         nums[i], nums[zeroes_index] = nums[zeroes_index], nums[i]\n    #         zeroes_index += 1\n\n    # O(n)\n    # zeroes_index = 0\n    # for i in range(len(nums)):\n    #     if nums[i] != 0:\n    #         nums[i], nums[zeroes_index] = nums[zeroes_index], nums[i]\n    #         zeroes_index += 1\n\n    # O(n)\n    # zeroes_index = 0\n    # for i in range(len(nums)):\n    #     if nums[i"
    },
    {
      "rank": 74,
      "score": 1.0,
      "candidate": "def move_zeros(arr):\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(1)\n    \"\"\"\n    zeroes = 0\n    for i in range(len(arr)):\n        if arr[i] == 0:\n            zeroes += 1\n        else:\n            arr[i - zeroes] = arr[i]\n    for i in range(len(arr) - zeroes, len(arr)):\n        arr[i] = 0\n    return arr\n\nif __name__ == \"__main__\":\n    print(move_zeros([0, 1, 0, 3, 12]))\n    print(move_zeros([1, 0, 2, 3, 0, 4, 0, 5]))\n    print(move_zeros([2, 1, 0, 0, 0, 0, 0, 0, 0]))"
    },
    {
      "rank": 75,
      "score": 1.0,
      "candidate": "def move_zeroes(arr):\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(1)\n    \"\"\"\n    zeroes = 0\n    for i in range(len(arr)):\n        if arr[i] == 0:\n            zeroes += 1\n        else:\n            arr[i - zeroes] = arr[i]\n    for i in range(len(arr) - zeroes, len(arr)):\n        arr[i] = 0\n    return arr\n\n\nif __name__ == \"__main__\":\n    print(move_zeroes([0, 2, 0, 1, 3, 12]))"
    },
    {
      "rank": 76,
      "score": 1.0,
      "candidate": "def move_zeroes(arr):\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(1)\n    \"\"\"\n    i = 0\n    j = len(arr) - 1\n\n    while i < j:\n        if arr[i] == 0:\n            arr[i], arr[j] = arr[j], arr[i]\n            j -= 1\n        else:\n            i += 1\n\n    return arr\n\n\nif __name__ == \"__main__\":\n    print(move_zeroes([0, 1, 0, 3, 12]))"
    },
    {
      "rank": 77,
      "score": 1.0,
      "candidate": "from timeit import timeit\n\n\ndef move_zeroes(arr):\n    length = len(arr)\n\n    if length < 2:\n        return arr\n\n    zero_counter = 0\n\n    for i in range(length):\n        if arr[i] == 0:\n            zero_counter += 1\n        else:\n            if zero_counter > 0:\n                arr[i], arr[i - zero_counter] = arr[i - zero_counter], arr[i]\n\n    return arr\n\n\nif __name__ == \"__main__\":\n    arr = [1, 2, 0, 3, 4, 5, 0, 7, 8, 9, 0, 0, 0, 0, 0, 12]\n    print(move_zeroes(arr))\n    print(timeit(lambda: move_zeroes(arr), number=10000))  # 0.000200274001357"
    },
    {
      "rank": 78,
      "score": 1.0,
      "candidate": "def move_zero_to_end(arr):\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(1)\n    \"\"\"\n    last_zero_index = 0\n    for i in range(len(arr)):\n        if arr[i] == 0:\n            arr[last_zero_index], arr[i] = arr[i], arr[last_zero_index]\n            last_zero_index += 1\n    return arr\n\n\nif __name__ == \"__main__\":\n    print(move_zero_to_end([0, 2, 3, 4, 5, 6, 0]))"
    },
    {
      "rank": 79,
      "score": 1.0,
      "candidate": "def move_zeroes(arr: list) -> list:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(1)\n    \"\"\"\n    i = 0\n    j = 0\n    while j < len(arr):\n        if arr[j] == 0:\n            arr.pop(j)\n            arr.append(0)\n        else:\n            j += 1\n\n    return arr\n\n\nif __name__ == \"__main__\":\n    assert move_zeroes([0, 1, 0, 3, 12]) == [1, 3, 12, 0, 0]"
    },
    {
      "rank": 80,
      "score": 1.0,
      "candidate": "def move_zeroes(arr):\n    \"\"\"\n    This is the best way to do it.\n    \"\"\"\n    count = 0\n    for i in range(len(arr)):\n        if arr[i] != 0:\n            arr[count] = arr[i]\n            count += 1\n    while count < len(arr):\n        arr[count] = 0\n        count += 1\n\n    return arr\n\nif __name__ == '__main__':\n    test_cases = [\n        [0, 0, 0, 1, 2, 0, 1, 3, 4, 0, 0],\n        [1, 0, 2, 0, 3, 4, 0, 0, 0, 0, 1],\n        [1, 2, 3, 4, 0, 0, 0, 0, 0, 0, 0],\n    ]\n    for case in test_cases:\n        print(move_zeroes(case))"
    },
    {
      "rank": 81,
      "score": 1.0,
      "candidate": "from typing import List\n\n\n# O(n)\ndef move_zeroes(arr: List[int]) -> None:\n    \"\"\"Moves all zeroes to the end of the array.\n\n    Args:\n        arr (List[int]): input array\n    \"\"\"\n    if not arr:\n        return\n\n    j = 0\n    for i in range(len(arr)):\n        if arr[i] != 0:\n            arr[j] = arr[i]\n            j += 1\n\n    while j < len(arr):\n        arr[j] = 0\n        j += 1\n\n\nif __name__ == \"__main__\":\n    arr = [0, 1, 0, 3, 12, 0]\n    move_zeroes(arr)\n    print(arr)"
    },
    {
      "rank": 82,
      "score": 1.0,
      "candidate": "def move_zeroes(arr):\n    \"\"\"\n    Time complexity: O(n)\n    Space complexity: O(1)\n    \"\"\"\n    # count non-zero elements\n    count = 0\n    for num in arr:\n        if num != 0:\n            count += 1\n\n    # move non-zero elements\n    for i in range(count):\n        arr[i] = arr[i + count]\n\n    # move zero elements\n    for i in range(count, len(arr)):\n        arr[i] = 0\n\n    return arr\n\n\n### Testing ###\n\ndef test_move_zeroes():\n    assert move_zeroes([0, 0, 0, 1, 2, 0, 0, 3, 0, 4, 0, 0]) == [1, 2, 3, 4, 0, 0, 0, 0, 0, 0, 0, 0]\n\nif __name__ == \"__main__\":\n    test_move_zeroes()"
    },
    {
      "rank": 83,
      "score": 1.0,
      "candidate": "def move_zeroes(arr):\n    \"\"\"\n    :param: arr - list of integers\n    return type: void / nothing\n    This function should NOT return anything, but must print the input array\n    with all zeroes moved to the end.\n    \"\"\"\n    # Write your code here.\n    # O(n)\n    if len(arr) == 0:\n        return\n    first_zero = None\n    for i in range(len(arr)):\n        if arr[i] == 0:\n            if first_zero is None:\n                first_zero = i\n        else:\n            if first_zero is not None:\n                arr[i], arr[first_zero] = arr[first_zero], arr[i]\n                first_zero += 1\n\n\ndef main():\n    move_zeroes([0, 1, 0, 3, 12])\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 84,
      "score": 1.0,
      "candidate": "def move_zeroes(array):\n    \"\"\"\n    We can use two pointers, one for the current item and another for the next item.\n    If the current item is not a zero, we can move the non-zero item to the left of the current item.\n    \"\"\"\n    non_zero_index = 0\n\n    for i in range(len(array)):\n        if array[i] != 0:\n            array[non_zero_index] = array[i]\n            non_zero_index += 1\n\n    for i in range(non_zero_index, len(array)):\n        array[i] = 0\n\n    return array\n\n\ndef test_move_zeroes():\n    assert move_zeroes([0, 1, 0, 3, 12]) == [1, 3, 12, 0, 0]\n\n\nif __name__ == '__main__':\n    test_move_zeroes()"
    },
    {
      "rank": 85,
      "score": 1.0,
      "candidate": "from copy import deepcopy\n\n\ndef move_zeroes(arr):\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(1)\n    \"\"\"\n    zero_count = 0\n    non_zero_count = 0\n\n    for i in range(len(arr)):\n        if arr[i] == 0:\n            zero_count += 1\n        else:\n            non_zero_count += 1\n\n    new_arr = deepcopy(arr)\n\n    for i in range(len(arr) - zero_count, len(arr)):\n        new_arr[i] = 0\n\n    for i in range(len(arr) - zero_count):\n        new_arr[i] = arr[non_zero_count]\n        non_zero_count += 1\n\n    return new_arr\n\n\nif __name__ == \"__main__\":\n    arr = [0, 1, 2, 3, 0, 5, 0]\n    print(move_zeroes(arr))"
    },
    {
      "rank": 86,
      "score": 1.0,
      "candidate": "def move_zeros(nums):\n    \"\"\"\n    Do not return anything, modify nums in-place instead.\n    \"\"\"\n    non_zeroes = [num for num in nums if num != 0]\n    return non_zeroes + [0] * (len(nums) - len(non_zeroes))\n\n\ndef test_move_zeros():\n    assert move_zeros([0, 1, 0, 3, 12]) == [1, 3, 12, 0, 0]\n    assert move_zeros([0, 0, 1, 2, 0]) == [1, 2, 0, 0, 0]\n\n\nif __name__ == '__main__':\n    test_move_zeros()"
    },
    {
      "rank": 87,
      "score": 1.0,
      "candidate": "def move_zeroes(arr):\n    if len(arr) <= 1:\n        return arr\n\n    for i in range(len(arr)):\n        if arr[i] == 0:\n            arr.pop(i)\n            arr.append(0)\n\n    return arr\n\n\nif __name__ == \"__main__\":\n    test_cases = [\n        ([0, 1, 0, 3, 12], [1, 3, 12, 0, 0]),\n        ([0, 1, 2, 3, 0], [1, 2, 3, 0, 0]),\n        ([0, 0, 0], [0, 0, 0]),\n        ([0, 1, 2, 3, 4, 5, 6, 0, 0, 0], [1, 2, 3, 4, 5, 6, 0, 0, 0, 0]),\n        ([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]),\n        ([-1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [-1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]),\n        ([1, 0, 0, 0, 0,"
    },
    {
      "rank": 88,
      "score": 1.0,
      "candidate": "def move_zeroes(arr):\n    # O(n) time | O(1) space\n    curr_zero = 0\n    for i in range(len(arr)):\n        if arr[i] != 0:\n            arr[i], arr[curr_zero] = arr[curr_zero], arr[i]\n            curr_zero += 1\n    return arr\n\n\n\"\"\"\nWrite a function to find the largest element in a given array of integers.\n\"\"\"\n\ndef largest_element(arr):\n    # O(n) time | O(1) space\n    largest_num = arr[0]\n    for i in range(1, len(arr)):\n        if arr[i] > largest_num:\n            largest_num = arr[i]\n    return largest_num\n\n\"\"\"\nWrite a function to find the smallest element in a given array of integers.\n\"\"\"\n\ndef smallest_element(arr):\n    # O(n) time | O(1) space\n    smallest_num = arr[0]\n    for i in range(1, len(arr)):\n        if arr[i] < smallest_num:\n            smallest_num = arr[i]\n    return smallest_num\n\n\"\"\"\nWrite a function to find the sum of all elements in a given array of integers.\n\"\"\"\n\ndef sum_of_elements(arr):\n    # O(n) time | O(1) space\n    total = 0\n    for i in range(len(arr)):\n        total += arr[i]\n    return total\n\n\"\"\"\nWrite a function to find the product of all elements in a given array of integers.\n\"\"\"\n\ndef product_of_elements(arr):\n    # O(n) time | O(1) space\n    total = 1\n    for i in range(len(arr)):\n        total *= arr[i]\n    return total\n\n\"\"\"\nWrite a function to find the smallest positive number missing from a given array of integers.\n\"\"\"\n\ndef smallest_positive_missing(arr):\n    # O(n) time | O(1) space\n    i = 0\n    while i < len(arr):\n        if arr"
    },
    {
      "rank": 89,
      "score": 1.0,
      "candidate": "def moveZeroes(arr):\n    \"\"\"\n    :type nums: List[int]\n    :rtype: None Do not return anything, modify nums in-place instead.\n    \"\"\"\n    # O(n) time | O(1) space\n    count = 0\n    for num in arr:\n        if num != 0:\n            arr[count] = num\n            count += 1\n    while count < len(arr):\n        arr[count] = 0\n        count += 1\n\n    return arr\n\ndef moveZeroes2(arr):\n    # O(n) time | O(1) space\n    count = 0\n    for num in arr:\n        if num != 0:\n            arr[count] = num\n            count += 1\n    while count < len(arr):\n        arr[count] = 0\n        count += 1\n\n    return arr\n\n\n# test\narr = [0,1,0,3,12]\nprint(moveZeroes(arr))"
    },
    {
      "rank": 90,
      "score": 1.0,
      "candidate": "def move_zeros(arr):\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(n)\n    \"\"\"\n    non_zero_arr = [i for i in arr if i != 0]\n\n    return non_zero_arr + [0] * (len(arr) - len(non_zero_arr))\n\n\nif __name__ == \"__main__\":\n    print(move_zeros([0, 2, 0, 1, 3, 12]))\n    print(move_zeros([2, 1, 0, 7, 0, 14, 2, 1, 0, 15]))"
    },
    {
      "rank": 91,
      "score": 1.0,
      "candidate": "from timeit import default_timer as timer\n\n\ndef move_zeroes(arr: list[int]) -> None:\n    \"\"\"\n    Move all zeroes to the end of the given array.\n    >>> arr = [0, 1, 0, 3, 12]\n    >>> move_zeroes(arr)\n    >>> arr == [1, 3, 12, 0, 0]\n    True\n    >>> arr = [9, 0, 0, 2, 0, 0, 1]\n    >>> move_zeroes(arr)\n    >>> arr == [9, 2, 1, 0, 0, 0, 0]\n    True\n    >>> arr = [0, 0, 0]\n    >>> move_zeroes(arr)\n    >>> arr == [0, 0, 0]\n    True\n    >>> arr = []\n    >>> move_zeroes(arr)\n    >>> arr == []\n    True\n    \"\"\"\n    # O(n)\n    zero_count = 0\n    for i in range(len(arr)):\n        if arr[i] == 0:\n            zero_count += 1\n        else:\n            arr[i - zero_count] = arr[i]\n    for i in range(len(arr) - zero_count, len(arr)):\n        arr[i] = 0\n\n\nif __name__ == \"__main__\":\n    user_input = input(\"Enter numbers separated by comma:\\n\").strip()\n    arr = [int(item.strip()) for item in user_input.split(\",\")]\n    start = timer()\n    move_zeroes(arr)\n    end = timer()\n    print(f\"Output: {arr}\")\n    print(f\"Time taken: {end - start:.8f}\")"
    },
    {
      "rank": 92,
      "score": 1.0,
      "candidate": "def move_zeroes(arr):\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(1)\n    \"\"\"\n    zero_count = 0\n    for i in range(len(arr)):\n        if arr[i] == 0:\n            zero_count += 1\n        else:\n            arr[i - zero_count] = arr[i]\n    for i in range(len(arr) - zero_count, len(arr)):\n        arr[i] = 0\n    return arr\n\n\nif __name__ == \"__main__\":\n    test_cases = [\n        ([0, 1, 0, 3, 12], [1, 3, 12, 0, 0]),\n        ([0, 0, 0, 1], [1, 0, 0, 0]),\n        ([1, 0], [1, 0]),\n        ([0, 1], [1, 0]),\n        ([1, 2, 3, 4, 5, 0], [1, 2, 3, 4, 5, 0]),\n    ]\n    for test_case, exp in test_cases:\n        print(move_zeroes(test_case), exp)"
    },
    {
      "rank": 93,
      "score": 1.0,
      "candidate": "def move_zeros(arr: list) -> list:\n    \"\"\"\n    Time Complexity: O(n)\n    \"\"\"\n    non_zero_index = 0\n\n    for i in range(len(arr)):\n        if arr[i] != 0:\n            arr[non_zero_index] = arr[i]\n            non_zero_index += 1\n\n    for i in range(non_zero_index, len(arr)):\n        arr[i] = 0\n\n    return arr\n\n\nif __name__ == \"__main__\":\n    print(move_zeros([0, 0, 1, 2, 0, 1, 3, 4, 0, 0, 5, 0, 6, 0, 7, 0, 0, 8, 0, 0, 9, 0]))"
    },
    {
      "rank": 94,
      "score": 1.0,
      "candidate": "def move_zeros(arr):\n    # The idea is to use two pointers. One pointer is to iterate the array and the other is to copy the non-zero elements to the front of the array.\n\n    # To iterate the array, we will use slow pointer which will be incremented every time we find a non-zero element.\n    slow = 0\n    # To copy the non-zero elements to the front, we will use a fast pointer which will be incremented only when we find a zero element.\n    fast = 0\n\n    # We will iterate the array until the slow pointer reaches the end of the array or the fast pointer reaches the end of the array.\n    while slow < len(arr) and fast < len(arr):\n        # If the element at the fast pointer is non-zero, we will copy it to the element at the slow pointer.\n        if arr[fast] != 0:\n            arr[slow] = arr[fast]\n            slow += 1\n\n        # If the element at the fast pointer is zero, we will simply increment the fast pointer.\n        fast += 1\n\n    # After the iteration, we will have all the non-zero elements at the front of the array.\n    # We will now fill the rest of the array with zeros.\n    for i in range(slow, len(arr)):\n        arr[i] = 0\n\n    return arr\n\n\ndef main():\n    print(\"Array after moving zeroes to the end: \" +\n          str(move_zeros([0, 1, 0, 3, 12])))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 95,
      "score": 1.0,
      "candidate": "def move_zeroes(arr):\n    \"\"\"\n    :param: arr - given array whose elements need to be rearranged\n    return - new array with rearranged elements\n    \"\"\"\n    # Write your code here\n    if arr is None:\n        return []\n\n    count = 0\n    for i in range(len(arr)):\n        if arr[i] != 0:\n            arr[count] = arr[i]\n            count += 1\n    while count < len(arr):\n        arr[count] = 0\n        count += 1\n    return arr\n\n\ndef test_function(test_case):\n    arr = test_case[0]\n    solution = test_case[1]\n    output = move_zeroes(arr)\n    if output == solution:\n        print(\"Pass\")\n    else:\n        print(\"Fail\")\n\n\narr = [0, 2, 0, 6, 0, 5, 11]\nsolution = [2, 6, 5, 11, 0, 0, 0]\ntest_case = [arr, solution]\ntest_function(test_case)"
    },
    {
      "rank": 96,
      "score": 1.0,
      "candidate": "def move_zeroes(arr):\n    \"\"\"\n    Do not return anything, modify arr in-place instead.\n    \"\"\"\n    if len(arr) == 0:\n        return arr\n    j = 0\n    for i in range(len(arr)):\n        if arr[i] != 0:\n            arr[j] = arr[i]\n            j += 1\n    for i in range(j, len(arr)):\n        arr[i] = 0\n    return arr\n\nif __name__ == '__main__':\n    # Test 1\n    arr = [0, 1, 0, 3, 12]\n    print(move_zeroes(arr))\n\n    # Test 2\n    arr = [0, 0, 0, 1]\n    print(move_zeroes(arr))"
    },
    {
      "rank": 97,
      "score": 1.0,
      "candidate": "from typing import List\n\n\n# Time complexity: O(n)\n# Space complexity: O(1)\ndef move_zeroes(nums: List[int]) -> None:\n    \"\"\"\n    Do not return anything, modify nums in-place instead.\n    \"\"\"\n    n = len(nums)\n\n    if n <= 1:\n        return\n\n    index = 0\n\n    for i in range(n):\n        if nums[i] != 0:\n            nums[index] = nums[i]\n            index += 1\n\n    while index < n:\n        nums[index] = 0\n        index += 1\n\n\nif __name__ == \"__main__\":\n    arr = [0, 0, 0, 2, 0, 1, 3, 4, 0, 0]\n    move_zeroes(arr)\n    assert arr == [2, 1, 3, 4, 0, 0, 0, 0, 0, 0]"
    },
    {
      "rank": 98,
      "score": 1.0,
      "candidate": "from timeit import default_timer as timer\n\n\ndef move_zeroes(arr: list) -> None:\n    \"\"\"\n    Move all zeroes to the end of the given array.\n    >>> arr = [0, 1, 0, 3, 12]\n    >>> move_zeroes(arr)\n    >>> arr\n    [1, 3, 12, 0, 0]\n    \"\"\"\n    last_zero_index = 0\n\n    for index, value in enumerate(arr):\n        if value != 0:\n            if last_zero_index != index:\n                arr[index], arr[last_zero_index] = arr[last_zero_index], arr[index]\n            last_zero_index += 1\n\n\nif __name__ == \"__main__\":\n    user_input = input(\"Enter numbers separated by comma:\\n\").strip()\n    arr = [int(item.strip()) for item in user_input.split(\",\")]\n    start = timer()\n    move_zeroes(arr)\n    end = timer()\n\n    print(arr)\n    print(f\"Elapsed time: {end - start:.6f}\")"
    },
    {
      "rank": 99,
      "score": 1.0,
      "candidate": "from copy import deepcopy\n\n\ndef move_zeroes(arr):\n    \"\"\"\n    :param arr: list of integers\n    :return: None, modify arr by moving all zeroes to the end\n    \"\"\"\n    if not arr:\n        return\n    if len(arr) == 1 and arr[0] == 0:\n        return\n\n    # find the first zero in the array\n    zero_pos = 0\n    while zero_pos < len(arr) and arr[zero_pos] != 0:\n        zero_pos += 1\n\n    # find the first non-zero element in the array\n    non_zero_pos = zero_pos\n    while non_zero_pos < len(arr) and arr[non_zero_pos] == 0:\n        non_zero_pos += 1\n\n    # if there is no non-zero element, we are done\n    if non_zero_pos == len(arr):\n        return\n\n    # swap the zero and the non-zero element\n    while zero_pos < non_zero_pos:\n        arr[zero_pos] = arr[non_zero_pos]\n        arr[non_zero_pos] = 0\n        zero_pos += 1\n        non_zero_pos += 1\n\n    # continue to move the zeroes\n    move_zeroes(arr)\n\n\ndef test_move_zeroes():\n    arr = [0, 1, 0, 3, 12]\n    expected = [1, 3, 12, 0, 0]\n    move_zeroes(arr)\n    assert arr == expected\n\n    arr = [0, 0, 0, 0, 0]\n    expected = [0, 0, 0, 0, 0]\n    move_zeroes(arr)\n    assert arr == expected\n\n    arr = [1, 0]\n    expected = [1, 0]\n    move_zeroes(arr)\n    assert arr == expected\n\n    arr = [1, 0, 0]\n    expected = [1, 0, 0]\n    move_zeroes(arr)\n    assert arr == expected"
    },
    {
      "rank": 100,
      "score": 1.0,
      "candidate": "def move_zeroes(arr):\n    \"\"\"\n    O(n) & O(1)\n    \"\"\"\n    last_non_zero = 0\n\n    for i in range(len(arr)):\n        if arr[i] != 0:\n            arr[last_non_zero], arr[i] = arr[i], arr[last_non_zero]\n            last_non_zero += 1\n\n    return arr\n\n\ndef move_zeroes_two_pointers(arr):\n    \"\"\"\n    O(n) & O(1)\n    \"\"\"\n    last_non_zero = 0\n\n    for i in range(len(arr)):\n        if arr[i] != 0:\n            arr[last_non_zero] = arr[i]\n            last_non_zero += 1\n\n    for i in range(last_non_zero, len(arr)):\n        arr[i] = 0\n\n    return arr\n\n\nif __name__ == \"__main__\":\n    arr = [0, 0, 1, 0, 3, 12]\n    print(move_zeroes(arr))\n    print(move_zeroes_two_pointers(arr))"
    }
  ]
}