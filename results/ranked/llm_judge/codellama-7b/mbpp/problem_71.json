{
  "timestamp": "2025-09-14T22:50:11.946577",
  "method": "improved_llm_judge",
  "judge_model": "codellama/CodeLlama-7b-Python-hf",
  "target_model": "codellama-7b",
  "dataset": "mbpp",
  "problem_number": 71,
  "total_candidates": 100,
  "results": [
    {
      "rank": 1,
      "score": 10.0,
      "candidate": "def find_volume(radius):\n    return (4/3) * 3.14 * (radius**3)\n\ndef test_find_volume():\n    assert find_volume(10) == 412.55336\n\nif __name__ == '__main__':\n    print(\"Volume of a sphere is: \" + str(find_volume(10)))"
    },
    {
      "rank": 2,
      "score": 10.0,
      "candidate": "import math\n\n\ndef find_volume(radius):\n    return 4/3 * math.pi * math.pow(radius, 3)\n\n\ndef main():\n    print(find_volume(5))\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 3,
      "score": 10.0,
      "candidate": "from math import pi\n\n\ndef find_sphere_volume(radius):\n    return (4 / 3) * pi * (radius ** 3)\n\n\ndef main():\n    print(find_sphere_volume(3))\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 4,
      "score": 10.0,
      "candidate": "def volume_sphere(radius: float) -> float:\n    \"\"\"\n    >>> volume_sphere(2)\n    33.510321638\n    >>> volume_sphere(1)\n    12.566370614\n    >>> volume_sphere(-1)\n    Traceback (most recent call last):\n        ...\n    ValueError: Radius must be greater than 0\n    \"\"\"\n    if radius < 0:\n        raise ValueError(\"Radius must be greater than 0\")\n    return 4 / 3 * 3.141592654 * radius ** 3\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 5,
      "score": 10.0,
      "candidate": "import math\n\ndef get_radius():\n    return float(input('Radius: '))\n\ndef get_volume(r):\n    return 4/3 * math.pi * r**3\n\ndef main():\n    radius = get_radius()\n    print(f'Volume: {get_volume(radius)}')\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 6,
      "score": 10.0,
      "candidate": "def volume_sphere(r):\n    \"\"\"\n    r: radius of the sphere\n    \"\"\"\n    return 4/3 * 3.14 * r**3"
    },
    {
      "rank": 7,
      "score": 10.0,
      "candidate": "import math\n\n\ndef volume_sphere(radius):\n    return 4/3 * math.pi * (radius ** 3)"
    },
    {
      "rank": 8,
      "score": 10.0,
      "candidate": "from math import pi\n\n\ndef volume_of_sphere(radius):\n    return 4/3 * pi * radius**3"
    },
    {
      "rank": 9,
      "score": 10.0,
      "candidate": "def find_volume(radius):\n    return 4/3*3.14*radius**3"
    },
    {
      "rank": 10,
      "score": 10.0,
      "candidate": "from math import pi\n\n\ndef find_volume_sphere(radius):\n    return 4/3*pi*(radius**3)\n\n\nif __name__ == '__main__':\n    print(find_volume_sphere(5))"
    },
    {
      "rank": 11,
      "score": 10.0,
      "candidate": "def find_volume_of_sphere(radius):\n    \"\"\"\n    >>> find_volume_of_sphere(2)\n    28.274333882308138\n    \"\"\"\n    import math\n\n    return 4 / 3 * math.pi * radius ** 3\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 12,
      "score": 10.0,
      "candidate": "def volume(radius):\n    import math\n    return (4/3) * math.pi * (radius**3)\n\nassert volume(10) == 412.371995726\nassert volume(5) == 523.598775598\nassert volume(2) == 125.565546131"
    },
    {
      "rank": 13,
      "score": 10.0,
      "candidate": "def find_sphere_volume(radius):\n    return 4/3 * 3.14 * (radius ** 3)\n\n\ndef main():\n    print(find_sphere_volume(4))\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 14,
      "score": 10.0,
      "candidate": "import math\n\n\ndef find_volume(r):\n    return 4/3*math.pi*r**3\n\n\nif __name__ == '__main__':\n    print(find_volume(5))"
    },
    {
      "rank": 15,
      "score": 10.0,
      "candidate": "def sphere_volume(r):\n    \"\"\"\n    Find the volume of a sphere.\n\n    :param r: The radius of the sphere.\n    :return: The volume of the sphere.\n    \"\"\"\n    return 4/3 * 3.14 * r**3"
    },
    {
      "rank": 16,
      "score": 10.0,
      "candidate": "from math import pi\n\n\ndef find_sphere_volume(radius: int):\n    return 4/3 * pi * radius**3"
    },
    {
      "rank": 17,
      "score": 10.0,
      "candidate": "def get_volume_of_sphere(radius):\n    \"\"\"\n    >>> get_volume_of_sphere(1)\n    4.188798284228515\n    >>> get_volume_of_sphere(2)\n    33.510321639715576\n    >>> get_volume_of_sphere(1) == get_volume_of_sphere(2)\n    True\n    \"\"\"\n    import math\n\n    return (4.0 / 3.0) * math.pi * radius ** 3\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 18,
      "score": 10.0,
      "candidate": "from math import pi\n\n\ndef find_volume(radius: float) -> float:\n    \"\"\"Calculates the volume of a sphere.\n\n    >>> find_volume(5)\n    523.5987755982989\n\n    >>> find_volume(3.14)\n    3.818261100516427\n\n    >>> find_volume(10)\n    1533.188623715599\n\n    >>> find_volume(0)\n    0.0\n    \"\"\"\n\n    return 4 / 3 * pi * radius ** 3\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 19,
      "score": 10.0,
      "candidate": "def sphere_volume(radius: int) -> float:\n    \"\"\"\n    >>> sphere_volume(1)\n    4.188798288150086\n    >>> sphere_volume(-1)\n    Traceback (most recent call last):\n        ...\n    ValueError: radius must be positive\n    \"\"\"\n    if radius < 0:\n        raise ValueError(\"radius must be positive\")\n    from math import pi\n\n    return 4 / 3 * pi * radius ** 3\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 20,
      "score": 10.0,
      "candidate": "def find_volume(radius):\n    \"\"\"\n    >>> find_volume(10)\n    314.1592653589793\n    >>> find_volume(2)\n    12.566370614359172\n    >>> find_volume(0)\n    Traceback (most recent call last):\n        ...\n    ValueError: radius must be greater than 0\n    \"\"\"\n    import math\n    if radius <= 0:\n        raise ValueError(\"radius must be greater than 0\")\n    return 4.0/3.0 * math.pi * radius**3\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 21,
      "score": 10.0,
      "candidate": "# This is the Volume of a sphere formula.\n# volume = 4/3 * pi * r**3\n# This function takes in the radius as an argument\n# and returns the volume.\ndef volume_sphere(radius):\n    from math import pi\n    return 4/3 * pi * radius**3\n\n# This is the Volume of a sphere formula.\n# volume = 4/3 * pi * r**3\n# This function takes in the radius as an argument\n# and returns the volume.\ndef volume_sphere_two(radius):\n    from math import pi\n    return 4/3 * pi * radius**3\n\n# This function takes in a list of floats and returns the average.\ndef average(lst):\n    return sum(lst) / len(lst)\n\n# This function takes in a list of floats and returns the average.\ndef average_two(lst):\n    return sum(lst) / len(lst)\n\n# This function takes in a list of floats and returns the average.\ndef average_three(lst):\n    return sum(lst) / len(lst)\n\n# This function takes in a list of floats and returns the average.\ndef average_four(lst):\n    return sum(lst) / len(lst)\n\n# This function takes in a list of floats and returns the average.\ndef average_five(lst):\n    return sum(lst) / len(lst)\n\n# This function takes in a list of floats and returns the average.\ndef average_six(lst):\n    return sum(lst) / len(lst)\n\n# This function takes in a list of floats and returns the average.\ndef average_seven(lst):\n    return sum(lst) / len(lst)\n\n# This function takes in a list of floats and returns the average.\ndef average_eight(lst):\n    return sum(lst) / len(lst)\n\n# This function takes in a list of floats and returns the average.\ndef average_nine(lst):\n    return sum(lst) / len(lst)\n\n# This function takes in a list of floats and returns the average.\ndef average_ten(lst):\n    return sum(lst) /"
    },
    {
      "rank": 22,
      "score": 10.0,
      "candidate": "from math import pi\n\n\ndef volume_sphere(radius):\n    \"\"\"\n    >>> volume_sphere(2)\n    33.464\n    >>> volume_sphere(5)\n    523.598\n    >>> volume_sphere(-1)\n    Traceback (most recent call last):\n        ...\n    ValueError: Volume of a sphere cannot be negative\n    \"\"\"\n    if radius < 0:\n        raise ValueError(\"Volume of a sphere cannot be negative\")\n    return 4 * pi * radius ** 3 / 3\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 23,
      "score": 10.0,
      "candidate": "def find_sphere_volume(radius):\n    return 4/3 * 3.14 * (radius ** 3)"
    },
    {
      "rank": 24,
      "score": 10.0,
      "candidate": "import math\n\ndef volume_of_sphere(radius: float) -> float:\n    \"\"\"Find the volume of a sphere.\n\n    >>> volume_of_sphere(10)\n    1000.0\n    >>> volume_of_sphere(2.5)\n    196.34954084936208\n    >>> volume_of_sphere(0)\n    0.0\n    \"\"\"\n    return 4 / 3 * math.pi * radius ** 3\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 25,
      "score": 10.0,
      "candidate": "# [SOLUTION]\ndef volume_sphere(radius):\n    import math\n    return 4/3 * math.pi * (radius ** 3)"
    },
    {
      "rank": 26,
      "score": 10.0,
      "candidate": "import math\n\n\ndef sphere_volume(radius):\n    return 4 / 3 * math.pi * (radius ** 3)\n\n\ndef main():\n    print(sphere_volume(5))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 27,
      "score": 10.0,
      "candidate": "def find_volume(radius):\n    \"\"\"\n    >>> find_volume(1)\n    3.141592653589793\n    >>> find_volume(2)\n    12.566370614359172\n    \"\"\"\n    import math\n    return 4 * math.pi * radius ** 3 / 3\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 28,
      "score": 10.0,
      "candidate": "def find_volume(radius: float) -> float:\n    \"\"\"\n    >>> find_volume(1)\n    3.141592653589793\n    \"\"\"\n    return 4 * 3.14 * radius * radius * radius / 3\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 29,
      "score": 10.0,
      "candidate": "def volume_of_sphere(radius):\n    \"\"\"\n    >>> volume_of_sphere(1)\n    3.141592653589793\n    >>> volume_of_sphere(5)\n    157.078947368\n    \"\"\"\n    import math\n    return 4/3 * math.pi * radius**3\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 30,
      "score": 10.0,
      "candidate": "def find_volume(radius: int) -> float:\n    \"\"\"Find the volume of a sphere.\n\n    >>> find_volume(1)\n    4.188798\n    >>> find_volume(2)\n    33.51032\n    \"\"\"\n    from math import pi\n\n    return 4 * pi * radius ** 3 / 3\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 31,
      "score": 10.0,
      "candidate": "def volume_of_sphere(radius: int) -> int:\n    return 4 / 3 * 3.14 * (radius ** 3)\n\n\ndef main():\n    print(volume_of_sphere(5))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 32,
      "score": 10.0,
      "candidate": "# This is the volume formula:\n# V = 4/3 * pi * r ** 3\n#\n# We can write this in Python as:\n#\n# V = 4/3 * math.pi * r ** 3\n#\n# We are going to test this function with a range of radii and make sure it\n# returns the correct volume.\n#\n# We know that the radius will be a number from 1 to 100.\n#\n# We also know that the volume will be a positive number.\n#\n# To test this we are going to create a list of random radii.\n\nimport math\nimport random\n\ndef find_volume(r):\n    V = 4/3 * math.pi * r ** 3\n    return V\n\n# We can test this function with a loop.\n\n# Create a list of random radii.\nradii = []\nfor i in range(100):\n    radii.append(random.randint(1, 100))\n\n# Test the function with each radius.\nfor r in radii:\n    print(\"Radius:\", r)\n    print(\"Volume:\", find_volume(r))\n    print()"
    },
    {
      "rank": 33,
      "score": 10.0,
      "candidate": "def find_volume_sphere(radius):\n    \"\"\"\n    >>> find_volume_sphere(1)\n    4.1887902047863905\n    \"\"\"\n    return 4 * 3.14 * radius * radius * radius / 3\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 34,
      "score": 10.0,
      "candidate": "def find_volume_of_sphere(radius: float) -> float:\n    \"\"\"\n    >>> find_volume_of_sphere(1)\n    3.141592653589793\n    >>> find_volume_of_sphere(-1)\n    Traceback (most recent call last):\n        ...\n    ValueError: Volume of sphere cannot be negative\n    >>> find_volume_of_sphere(0)\n    Traceback (most recent call last):\n        ...\n    ValueError: Radius of sphere cannot be zero\n    >>> find_volume_of_sphere(\"string\")\n    Traceback (most recent call last):\n        ...\n    TypeError: Invalid input\n    >>> find_volume_of_sphere(10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"
    },
    {
      "rank": 35,
      "score": 10.0,
      "candidate": "def find_volume(radius):\n    \"\"\"\n    >>> find_volume(1)\n    3.141592653589793\n    >>> find_volume(2)\n    12.566370614359172\n    \"\"\"\n    from math import pi\n    return pi * radius ** 2\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 36,
      "score": 10.0,
      "candidate": "# This is the volume formula\n# V = 4/3 * pi * r^3\n\ndef volume_of_sphere(radius):\n    from math import pi\n    return 4/3 * pi * radius**3\n\ndef test_volume_of_sphere():\n    assert volume_of_sphere(5) == 523.5987755982989\n\nif __name__ == '__main__':\n    print(volume_of_sphere(5))"
    },
    {
      "rank": 37,
      "score": 10.0,
      "candidate": "def find_volume_sphere(radius):\n    \"\"\"\n    >>> find_volume_sphere(3)\n    523.5987755982989\n    \"\"\"\n    import math\n    return 4/3 * math.pi * radius ** 3\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 38,
      "score": 10.0,
      "candidate": "def find_volume(r: float) -> float:\n    \"\"\"\n    >>> find_volume(1)\n    3.141592653589793\n    >>> find_volume(2)\n    12.566370614359172\n    \"\"\"\n\n    return 4 * 3.14 * r ** 3 / 3\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 39,
      "score": 9.0,
      "candidate": "import math\n\ndef sphereVolume(radius):\n    return (4/3) * math.pi * (radius ** 3)"
    },
    {
      "rank": 40,
      "score": 9.0,
      "candidate": "def find_volume(radius):\n    \"\"\"\n    Return the volume of a sphere given a radius.\n    \"\"\"\n    return (4 / 3) * 3.14 * (radius ** 3)"
    },
    {
      "rank": 41,
      "score": 9.0,
      "candidate": "def find_sphere_volume(radius):\n    \"\"\"\n    >>> find_sphere_volume(2)\n    28.274333882308138\n    \"\"\"\n    pi = 3.14\n    return (4 / 3) * pi * (radius ** 3)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 42,
      "score": 9.0,
      "candidate": "def volume_sphere(radius):\n    return 4/3 * 3.14 * radius**3\n\ndef main():\n    print(\"Volume of sphere with radius 10 is \" + str(volume_sphere(10)))\n    print(\"Volume of sphere with radius 5 is \" + str(volume_sphere(5)))\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 43,
      "score": 9.0,
      "candidate": "def main(radius: int) -> float:\n    \"\"\"\n    >>> main(2)\n    28.274333882308138\n    \"\"\"\n    import math\n\n    return 4 / 3 * math.pi * radius ** 3\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 44,
      "score": 9.0,
      "candidate": "import math\n\ndef volume(radius):\n    \"\"\"Find the volume of a sphere.\"\"\"\n    return 4 * math.pi * radius ** 3 / 3"
    },
    {
      "rank": 45,
      "score": 8.0,
      "candidate": "import math\n\ndef find_volume(radius):\n    return 4/3 * math.pi * (radius ** 3)\n\n\nprint(find_volume(5))"
    },
    {
      "rank": 46,
      "score": 8.0,
      "candidate": "def volume_of_sphere(radius):\n    return (4 * 3.14 * radius ** 3) / 3"
    },
    {
      "rank": 47,
      "score": 8.0,
      "candidate": "def volume_sphere(r):\n    \"\"\"\n    r is the radius of the sphere.\n    \"\"\"\n    return 4/3 * 3.14 * (r**3)"
    },
    {
      "rank": 48,
      "score": 8.0,
      "candidate": "import math\n\n\ndef sphere_vol(radius):\n    return 4 / 3 * math.pi * radius ** 3\n\n\ndef main():\n    r = float(input(\"Radius: \"))\n    v = sphere_vol(r)\n    print(f\"Volume: {v}\")\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 49,
      "score": 8.0,
      "candidate": "# This is the answer which passes the tests.\n\ndef find_volume(r):\n    return 4/3 * 3.14159 * r ** 3"
    },
    {
      "rank": 50,
      "score": 8.0,
      "candidate": "from math import pi\n\n\ndef get_sphere_volume(radius):\n    return 4/3 * pi * radius**3\n\n\nif __name__ == '__main__':\n    print(get_sphere_volume(2))"
    },
    {
      "rank": 51,
      "score": 8.0,
      "candidate": "from math import pi\n\ndef volume_of_sphere(r):\n    return (4/3) * pi * r ** 3"
    },
    {
      "rank": 52,
      "score": 8.0,
      "candidate": "import math\n\ndef vol_sphere(r):\n    return 4/3 * math.pi * r ** 3"
    },
    {
      "rank": 53,
      "score": 8.0,
      "candidate": "from math import pi\n\ndef find_volume(radius):\n    return 4 * pi * (radius ** 3) / 3"
    },
    {
      "rank": 54,
      "score": 8.0,
      "candidate": "import math\n\ndef volume_of_sphere(r):\n    return 4/3 * math.pi * r ** 3"
    },
    {
      "rank": 55,
      "score": 8.0,
      "candidate": "def find_volume(r):\n    \"\"\"\n    :param r: int\n    :return: float\n    \"\"\"\n    return (4/3) * 3.14 * r ** 3\n\n\nif __name__ == '__main__':\n    r = int(input('Please enter the radius of a sphere: '))\n    print(find_volume(r))"
    },
    {
      "rank": 56,
      "score": 8.0,
      "candidate": "import math\n\ndef volume_sphere(r):\n    return 4/3 * math.pi * r ** 3\n\n\nif __name__ == '__main__':\n    r = float(input('Please enter the radius: '))\n    print('The volume of sphere is: ', volume_sphere(r))"
    },
    {
      "rank": 57,
      "score": 8.0,
      "candidate": "def volume(radius):\n    return 4 / 3 * 3.14 * (radius ** 3)\n\n\nprint(volume(5))"
    },
    {
      "rank": 58,
      "score": 8.0,
      "candidate": "import math\n\ndef vol_sphere(r):\n    return (4/3) * math.pi * r**3\n\n\nprint(vol_sphere(1))"
    },
    {
      "rank": 59,
      "score": 8.0,
      "candidate": "def volume(r):\n    return 4/3 * 3.14 * r ** 3\n\n\nprint(volume(10))"
    },
    {
      "rank": 60,
      "score": 8.0,
      "candidate": "from math import pi\n\ndef volume_of_sphere(radius):\n    return (4 / 3) * pi * (radius ** 3)"
    },
    {
      "rank": 61,
      "score": 8.0,
      "candidate": "from math import pi\n\ndef volume_of_sphere(radius):\n    return (4.0/3.0) * pi * radius**3"
    },
    {
      "rank": 62,
      "score": 8.0,
      "candidate": "import math\n\ndef find_volume_sphere(r):\n    return 4/3 * math.pi * r**3"
    },
    {
      "rank": 63,
      "score": 8.0,
      "candidate": "def volume_sphere(r):\n    \"\"\"\n    r: radius of the sphere\n\n    return: volume of the sphere\n    \"\"\"\n    return 4/3 * 3.14 * r**3\n\nprint(volume_sphere(2))"
    },
    {
      "rank": 64,
      "score": 8.0,
      "candidate": "from math import pi\n\ndef vol_sphere(radius):\n    return (4/3) * pi * radius**3\n\nprint(vol_sphere(1))\nprint(vol_sphere(2))\nprint(vol_sphere(3))"
    },
    {
      "rank": 65,
      "score": 8.0,
      "candidate": "def find_sphere_volume(radius):\n    \"\"\"\n    Find the volume of a sphere given its radius.\n    \"\"\"\n    return 4 / 3 * 3.14 * radius ** 3\n\n\ndef main():\n    \"\"\"\n    Call the function to find the volume of a sphere.\n    \"\"\"\n    radius = float(input(\"Enter the radius of the sphere: \"))\n    print(f\"The volume of the sphere is {find_sphere_volume(radius)}\")\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 66,
      "score": 8.0,
      "candidate": "from math import pi\n\ndef sphere_volume(radius: float) -> float:\n    \"\"\"Calculates the volume of a sphere.\n\n    Args:\n        radius: The radius of the sphere.\n\n    Returns:\n        The volume of the sphere.\n    \"\"\"\n    return (4/3) * pi * (radius**3)"
    },
    {
      "rank": 67,
      "score": 8.0,
      "candidate": "# This is the answer I came up with.\n\nfrom math import pi\n\ndef find_volume(radius):\n    return (4/3) * pi * (radius ** 3)\n\n# This is the solution according to the book.\n\n# def find_volume(radius):\n#     return (4 * pi * radius ** 3) / 3"
    },
    {
      "rank": 68,
      "score": 8.0,
      "candidate": "import math\n\ndef volume_of_sphere(r):\n    return 4 * math.pi * r ** 3 / 3\n\nassert volume_of_sphere(4) == 4.0 * math.pi"
    },
    {
      "rank": 69,
      "score": 8.0,
      "candidate": "import math\n\ndef find_volume(r):\n    return (4 * math.pi * r ** 3) / 3\n\nprint(find_volume(1))\nprint(find_volume(5))"
    },
    {
      "rank": 70,
      "score": 8.0,
      "candidate": "from math import pi\n\ndef sphere_volume(radius):\n    return 4/3 * pi * radius**3\n\ndef test_sphere_volume():\n    assert sphere_volume(0) == 0\n    assert sphere_volume(1) == 4/3 * pi\n    assert sphere_volume(2) == 2 * 4/3 * pi\n\nif __name__ == '__main__':\n    print sphere_volume(2)"
    },
    {
      "rank": 71,
      "score": 8.0,
      "candidate": "import math\n\n\ndef find_volume(radius):\n    return 4/3 * math.pi * radius ** 3"
    },
    {
      "rank": 72,
      "score": 8.0,
      "candidate": "def find_volume(radius: int) -> float:\n    \"\"\"\n    >>> find_volume(5)\n    314.1592653589793\n    \"\"\"\n    return 4 / 3 * 3.14 * radius ** 3\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 73,
      "score": 8.0,
      "candidate": "def volume_sphere(radius):\n    \"\"\"\n    >>> volume_sphere(10)\n    1000.0\n    \"\"\"\n    import math\n    return 4 / 3 * math.pi * math.pow(radius, 3)\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 74,
      "score": 8.0,
      "candidate": "def find_volume_sphere(radius):\n    return 4 / 3 * 3.14 * radius ** 3\n\n\ndef main():\n    radius = 2\n    volume = find_volume_sphere(radius)\n    print(volume)\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 75,
      "score": 8.0,
      "candidate": "def volume_of_sphere(radius):\n    return 4/3 * 3.14 * radius ** 3\n\n\nprint(volume_of_sphere(5))"
    },
    {
      "rank": 76,
      "score": 8.0,
      "candidate": "def sphere_vol(radius):\n    return 4/3 * 3.14 * radius**3\n\n\nprint(sphere_vol(10))"
    },
    {
      "rank": 77,
      "score": 8.0,
      "candidate": "def volume_of_sphere(radius):\n    return 4/3 * 3.14 * radius**3\n\n\nif __name__ == '__main__':\n    radius = float(input('Enter the radius: '))\n    print(volume_of_sphere(radius))"
    },
    {
      "rank": 78,
      "score": 8.0,
      "candidate": "import math\n\ndef find_volume(radius):\n    \"\"\"\n    Return the volume of a sphere given the radius of the sphere.\n    \"\"\"\n    return 4/3 * math.pi * radius ** 3"
    },
    {
      "rank": 79,
      "score": 8.0,
      "candidate": "import math\n\n\ndef sphere_vol(radius):\n    return 4/3 * math.pi * (radius**3)\n\n\nprint(sphere_vol(5))"
    },
    {
      "rank": 80,
      "score": 8.0,
      "candidate": "def volume_sphere(r):\n    return 4/3 * 3.14 * r ** 3"
    },
    {
      "rank": 81,
      "score": 8.0,
      "candidate": "def sphere_volume(radius):\n    \"\"\"\n    >>> sphere_volume(1)\n    4.188798284270015\n    \"\"\"\n    from math import pi\n    return 4/3 * pi * radius**3\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 82,
      "score": 1.0,
      "candidate": "import math\n\n\ndef find_sphere_volume(r):\n    return 4/3*math.pi*r**3\n\n\ndef test_find_sphere_volume():\n    \"\"\"\"Run a test to check if the volume of a sphere is calculated correctly.\"\"\"\n    assert find_sphere_volume(1) == 4.124157652984898"
    },
    {
      "rank": 83,
      "score": 1.0,
      "candidate": "import math\n\ndef get_volume(radius):\n    return 4/3 * math.pi * radius ** 3\n\nassert get_volume(5) == 523.5987755982989\n\n\"\"\"\nWrite a function to find the area of a circle.\n\"\"\"\nimport math\n\ndef get_area(radius):\n    return math.pi * radius ** 2\n\nassert get_area(5) == 78.53981633974483\n\n\"\"\"\nWrite a function to find the area of a rectangle.\n\"\"\"\ndef get_area(width, height):\n    return width * height\n\nassert get_area(5, 5) == 25\n\n\"\"\"\nWrite a function to find the volume of a cylinder.\n\"\"\"\ndef get_volume(radius, height):\n    return math.pi * radius ** 2 * height\n\nassert get_volume(5, 5) == 78.53981633974483\n\n\"\"\"\nWrite a function to find the area of a trapezoid.\n\"\"\"\ndef get_area(base_short, base_long, height):\n    return ((base_short + base_long) / 2) * height\n\nassert get_area(3, 5, 7) == 21\n\n\"\"\"\nWrite a function to find the area of a triangle.\n\"\"\"\ndef get_area(base, height):\n    return (base * height) / 2\n\nassert get_area(3, 7) == 14\n\n\"\"\"\nWrite a function to find the perimeter of a rectangle.\n\"\"\"\ndef get_perimeter(width, height):\n    return width * 2 + height * 2\n\nassert get_perimeter(5, 5) == 24\n\n\"\"\"\nWrite a function to find the perimeter of a circle.\n\"\"\"\ndef get_perimeter(radius):\n    return math.pi * 2 * radius\n\nassert get_perimeter(5) == 31.41592653589793"
    },
    {
      "rank": 84,
      "score": 1.0,
      "candidate": "def sphere_volume(radius):\n    return 4.0/3.0 * 3.14159 * radius ** 3\n\n\"\"\"\nWrite a function to find the area of a sphere.\n\"\"\"\n\ndef sphere_area(radius):\n    return 4.0 * 3.14159 * radius ** 2\n\n\"\"\"\nWrite a function to find the circumference of a circle.\n\"\"\"\n\ndef circle_circumference(radius):\n    return 2 * 3.14159 * radius\n\n\"\"\"\nWrite a function to find the area of a circle.\n\"\"\"\n\ndef circle_area(radius):\n    return 3.14159 * radius ** 2"
    },
    {
      "rank": 85,
      "score": 1.0,
      "candidate": "# Psuedocode:\n# 1. Define function \"sphere_vol\" with parameter \"radius\"\n# 2. Declare a variable \"volume\" and set it equal to 4/3 * 3.14 * (radius^3)\n# 3. Return \"volume\"\n\n# def sphere_vol(radius):\n#     volume = 4/3 * 3.14 * (radius**3)\n#     return volume\n\n# print(sphere_vol(1))\n\n\"\"\"\nWrite a function to find the area of a circle.\n\"\"\"\n\n# Psuedocode:\n# 1. Define function \"circle_area\" with parameter \"radius\"\n# 2. Declare a variable \"area\" and set it equal to 3.14 * (radius**2)\n# 3. Return \"area\"\n\n# def circle_area(radius):\n#     area = 3.14 * (radius**2)\n#     return area\n\n# print(circle_area(1))"
    },
    {
      "rank": 86,
      "score": 1.0,
      "candidate": "def find_sphere_volume(radius: float) -> float:\n    \"\"\"\n    >>> find_sphere_volume(5)\n    314.1592653589793\n    \"\"\"\n    return 4 / 3 * 3.14 * radius ** 3\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 87,
      "score": 1.0,
      "candidate": "def sphere_volume(radius):\n    return 4/3 * 3.141592653589793 * radius ** 3\n\n\nif __name__ == '__main__':\n    assert sphere_volume(2) == 33.510321638291125"
    },
    {
      "rank": 88,
      "score": 1.0,
      "candidate": "import math\n\n\ndef get_volume(radius):\n    return 4/3 * math.pi * radius ** 3\n\n\ndef test_get_volume():\n    assert get_volume(0) == 0\n    assert get_volume(1) == 4/3 * math.pi\n\n\nif __name__ == '__main__':\n    print(get_volume(int(input().strip())))"
    },
    {
      "rank": 89,
      "score": 1.0,
      "candidate": "def find_volume(radius):\n    \"\"\"\n    Find the volume of a sphere.\n\n    :param radius: The radius of the sphere.\n    :return: The volume of the sphere.\n    \"\"\"\n    return 4/3 * 3.14 * radius ** 3"
    },
    {
      "rank": 90,
      "score": 1.0,
      "candidate": "def sphere_volume(radius: float) -> float:\n    \"\"\"Calculate the volume of a sphere.\n\n    Args:\n        radius (float): The radius of the sphere.\n\n    Returns:\n        float: The volume of the sphere.\n    \"\"\"\n    return (4 / 3) * 3.14 * radius ** 3\n\n\ndef main():\n    print(sphere_volume(10))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 91,
      "score": 1.0,
      "candidate": "import math\n\n\n# recursive\ndef find_volume(radius):\n    if radius == 0:\n        return 0\n    return 4 / 3 * math.pi * radius ** 3\n\n\n# iterative\ndef find_volume(radius):\n    return 4 / 3 * math.pi * radius ** 3\n\n\n# iterative\ndef find_volume(radius):\n    return 4 / 3 * math.pi * (radius ** 3)\n\n\n# recursive\ndef find_volume(radius):\n    return (4 / 3) * math.pi * (radius ** 3)\n\n\n# iterative\ndef find_volume(radius):\n    return (4 / 3) * math.pi * (radius ** 3)\n\n\n# iterative\ndef find_volume(radius):\n    return (4 / 3) * math.pi * (radius ** 3)\n\n\n# recursive\ndef find_volume(radius):\n    return (4 / 3) * math.pi * (radius ** 3)\n\n\n# iterative\ndef find_volume(radius):\n    return (4 / 3) * math.pi * (radius ** 3)\n\n\n# iterative\ndef find_volume(radius):\n    return (4 / 3) * math.pi * (radius ** 3)\n\n\n# iterative\ndef find_volume(radius):\n    return (4 / 3) * math.pi * (radius ** 3)\n\n\n# iterative\ndef find_volume(radius):\n    return (4 / 3) * math.pi * (radius ** 3)"
    },
    {
      "rank": 92,
      "score": 1.0,
      "candidate": "# This is the volume formula.\n# pi * r^2\n\n# Write a function to calculate the volume of a sphere.\n\ndef volume_of_sphere(radius):\n    # Calculate the volume.\n    volume = 4/3 * 3.14 * (radius * radius * radius)\n    return volume\n\n# Check if the volume is correct.\n\nprint(volume_of_sphere(5))\n\n# 523.5987755982989\n\n# Write a function to calculate the volume of a sphere.\n\ndef volume_of_sphere(radius):\n    # Calculate the volume.\n    volume = 4/3 * 3.14 * (radius * radius * radius)\n    return volume\n\n# Check if the volume is correct.\n\nprint(volume_of_sphere(5))\n\n# 523.5987755982989\n\n# Write a function to calculate the volume of a sphere.\n\ndef volume_of_sphere(radius):\n    # Calculate the volume.\n    volume = 4/3 * 3.14 * (radius * radius * radius)\n    return volume\n\n# Check if the volume is correct.\n\nprint(volume_of_sphere(5))\n\n# 523.5987755982989\n\n# Write a function to calculate the volume of a sphere.\n\ndef volume_of_sphere(radius):\n    # Calculate the volume.\n    volume = 4/3 * 3.14 * (radius * radius * radius)\n    return volume\n\n# Check if the volume is correct.\n\nprint(volume_of_sphere(5))\n\n# 523.5987755982989\n\n# Write a function to calculate the volume of a sphere.\n\ndef volume_of_sphere(radius):\n    # Calculate the volume.\n    volume = 4/3 * 3.14 * (radius * radius * radius)\n    return volume\n\n# Check if the volume is correct.\n\nprint(volume_of_sphere("
    },
    {
      "rank": 93,
      "score": 1.0,
      "candidate": "def get_volume(radius: int) -> float:\n    \"\"\"\n    >>> get_volume(10)\n    314.1592653589793\n    >>> get_volume(5)\n    1256.6370614359173\n    >>> get_volume(-1)\n    Traceback (most recent call last):\n        ...\n    ValueError: Radius must be a positive integer.\n    \"\"\"\n    if radius < 0:\n        raise ValueError(\"Radius must be a positive integer.\")\n\n    from math import pi\n\n    return 4 / 3 * pi * radius ** 3\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 94,
      "score": 1.0,
      "candidate": "def volume_sphere(r):\n    return 4/3 * 3.14 * r**3\n\n\n# Pybites solution\n\n\ndef volume_sphere1(r):\n    import math\n    return 4/3 * math.pi * r**3"
    },
    {
      "rank": 95,
      "score": 1.0,
      "candidate": "def volume_of_sphere(radius):\n    \"\"\"\n    >>> volume_of_sphere(4)\n    523.5987755982989\n    \"\"\"\n    from math import pi\n    return (4 / 3) * pi * radius ** 3"
    },
    {
      "rank": 96,
      "score": 1.0,
      "candidate": "def volume_sphere(r):\n    from math import pi\n    return (4/3)*pi*r**3\n\n\nif __name__ == '__main__':\n    assert volume_sphere(1) == 4.124153164256952"
    },
    {
      "rank": 97,
      "score": 1.0,
      "candidate": "def find_volume(r):\n    \"\"\"\n    >>> find_volume(5)\n    314.1592653589793\n    \"\"\"\n    import math\n\n    return 4 * math.pi * r ** 3 / 3\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 98,
      "score": 1.0,
      "candidate": "def find_sphere_volume(radius):\n    return 4 / 3 * 3.14 * radius ** 3\n\n\ndef test_find_sphere_volume():\n    \"\"\"\n    >>> find_sphere_volume(1)\n    4.1887902047863905\n    >>> find_sphere_volume(2)\n    33.51032163621202\n    \"\"\"\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 99,
      "score": 1.0,
      "candidate": "def find_volume(radius: float) -> float:\n    \"\"\"\n    >>> find_volume(1)\n    3.141592653589793\n    \"\"\"\n    from math import pi\n\n    return pi * radius ** 3"
    },
    {
      "rank": 100,
      "score": 1.0,
      "candidate": "def volume_sphere(radius: int) -> float:\n    \"\"\"\n    >>> volume_sphere(1)\n    3.141592653589793\n    >>> volume_sphere(2)\n    12.566370614359172\n    \"\"\"\n    import math\n\n    return (4 / 3) * math.pi * (radius ** 3)\n\n\n\"\"\"\nWrite a function to find the area of a circle.\n\"\"\"\n\n\ndef area_circle(radius: int) -> float:\n    \"\"\"\n    >>> area_circle(1)\n    3.141592653589793\n    >>> area_circle(2)\n    12.566370614359172\n    \"\"\"\n    import math\n\n    return math.pi * (radius ** 2)\n\n\n\"\"\"\nWrite a function to find the volume of a cylinder.\n\"\"\"\n\n\ndef volume_cylinder(radius: int, height: int) -> float:\n    \"\"\"\n    >>> volume_cylinder(1,1)\n    3.141592653589793\n    >>> volume_cylinder(2,2)\n    28.274333882308138\n    \"\"\"\n    import math\n\n    return math.pi * (radius ** 2) * height\n\n\n\"\"\"\nWrite a function to find the area of a cylinder.\n\"\"\"\n\n\ndef area_cylinder(radius: int, height: int) -> float:\n    \"\"\"\n    >>> area_cylinder(1,1)\n    6.283185307179586\n    >>> area_cylinder(2,2)\n    50.26548245743669\n    \"\"\"\n    import math\n\n    return (2 * math.pi * (radius ** 2)) + (2 * math.pi * radius * height)\n\n\n\"\"\"\nWrite a function to find the volume"
    }
  ]
}