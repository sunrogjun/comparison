{
  "timestamp": "2025-09-15T00:08:23.226135",
  "method": "improved_llm_judge",
  "judge_model": "codellama/CodeLlama-7b-Python-hf",
  "target_model": "codellama-7b",
  "dataset": "mbpp",
  "problem_number": 243,
  "total_candidates": 100,
  "results": [
    {
      "rank": 1,
      "score": 10.0,
      "candidate": "# O(n) time | O(n) space\ndef startingAandE(string):\n    result = []\n    stringIndex = 0\n    while stringIndex < len(string):\n        if string[stringIndex] == 'a' or string[stringIndex] == 'e':\n            word = string[stringIndex]\n            stringIndex += 1\n            while stringIndex < len(string) and string[stringIndex] != ' ':\n                word += string[stringIndex]\n                stringIndex += 1\n            result.append(word)\n        stringIndex += 1\n    return result\n\n\n# O(n) time | O(n) space\ndef startingAandE(string):\n    words = string.split(\" \")\n    result = []\n    for word in words:\n        if word[0] == 'a' or word[0] == 'e':\n            result.append(word)\n    return result\n\n\n# O(n) time | O(n) space\ndef startingAandE(string):\n    words = string.split(\" \")\n    result = []\n    for word in words:\n        if word[0] == 'a' or word[0] == 'e':\n            result.append(word)\n    return result"
    },
    {
      "rank": 2,
      "score": 10.0,
      "candidate": "def find_words(s):\n    \"\"\"\n    :type s: str\n    :rtype: List[str]\n    \"\"\"\n    return [w for w in s.split(' ') if w.startswith('a') or w.startswith('e')]\n\n\ndef test_find_words():\n    assert find_words(\"The quick brown fox jumps over the lazy dog\") == ['The', 'quick', 'brown', 'fox', 'jumps',\n                                                                         'over', 'the', 'lazy', 'dog']\n    assert find_words(\"be\") == ['be']\n    assert find_words(\"a\") == ['a']\n    assert find_words(\"e\") == ['e']\n    assert find_words(\"ae\") == ['ae']\n    assert find_words(\"aa\") == ['aa']\n    assert find_words(\"aaa\") == ['aaa']\n    assert find_words(\"aae\") == ['aae']\n    assert find_words(\"aea\") == ['aea']\n    assert find_words(\"aaae\") == ['aaae']\n    assert find_words(\"aaaea\") == ['aaaea']\n    assert find_words(\"\") == []\n\n\nif __name__ == '__main__':\n    test_find_words()"
    },
    {
      "rank": 3,
      "score": 10.0,
      "candidate": "from timeit import default_timer as timer\n\n\ndef find_words(string):\n    words = string.split(\" \")\n    result = []\n    for word in words:\n        if word[0] in (\"a\", \"e\"):\n            result.append(word)\n    return result\n\n\nif __name__ == \"__main__\":\n    string = \"this is a test string\"\n    start = timer()\n    result = find_words(string)\n    end = timer()\n\n    print(result)\n    print(f\"Execution time: {end - start:.8f} seconds.\")"
    },
    {
      "rank": 4,
      "score": 10.0,
      "candidate": "def find_words(string: str) -> list:\n    \"\"\"\n    >>> find_words(\"this is a test string\")\n    ['a', 'is', 'test']\n    \"\"\"\n    return [word for word in string.split() if word.startswith((\"a\", \"e\"))]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 5,
      "score": 10.0,
      "candidate": "def find_words(s: str) -> set:\n    return {w for w in s.split() if w[0] in (\"a\", \"e\")}\n\n\nif __name__ == \"__main__\":\n    print(find_words(\"hello, world, aardvark, earth, apple\"))"
    },
    {
      "rank": 6,
      "score": 10.0,
      "candidate": "def find_words(s):\n    \"\"\"\n    :type s: str\n    :rtype: List[str]\n    \"\"\"\n    return [w for w in s.split(' ') if w.startswith('a') or w.startswith('e')]\n\n\ndef test_find_words():\n    assert find_words(\"The quick brown fox jumped over the lazy dog\") == [\n        \"The\", \"quick\", \"brown\", \"fox\", \"jumped\", \"over\", \"the\", \"lazy\", \"dog\"\n    ]\n    assert find_words(\"The quick brown fox jumped over the lazy dog\") == [\n        \"The\", \"quick\", \"brown\", \"fox\", \"jumped\", \"over\", \"the\", \"lazy\", \"dog\"\n    ]"
    },
    {
      "rank": 7,
      "score": 10.0,
      "candidate": "def find_ae_words(string: str) -> list[str]:\n    \"\"\"Find all words starting with 'a' or 'e' in a given string.\n\n    Args:\n        string (str): a given string.\n\n    Examples:\n        >>> assert find_ae_words('apple banana carrot') == ['apple', 'banana']\n    \"\"\"\n    return [\n        word for word in string.split() if word[0] in (\"a\", \"e\")\n    ]\n\n\nif __name__ == \"__main__\":\n    print(find_ae_words(\"apple banana carrot\"))"
    },
    {
      "rank": 8,
      "score": 10.0,
      "candidate": "def find_words(s: str) -> list:\n    \"\"\"\n    >>> find_words('hello world')\n    ['hello', 'world']\n    \"\"\"\n    return [word for word in s.split(\" \") if word.startswith((\"a\", \"e\"))]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 9,
      "score": 10.0,
      "candidate": "def find_words(sentence):\n    # Time Complexity: O(n)\n    # Space Complexity: O(n)\n    return [word for word in sentence.split() if word.startswith('a') or word.startswith('e')]\n\nif __name__ == '__main__':\n    print(find_words(\"The quick brown fox jumps over the lazy dog\"))"
    },
    {
      "rank": 10,
      "score": 10.0,
      "candidate": "def find_words(string: str) -> list[str]:\n    return [word for word in string.split() if word[0] in \"ae\"]\n\n\nif __name__ == \"__main__\":\n    assert find_words(\"This is an apple\") == [\"apple\"]\n    assert find_words(\"This is an orange\") == []\n    assert find_words(\"This is an apple and orange\") == [\"apple\", \"orange\"]"
    },
    {
      "rank": 11,
      "score": 10.0,
      "candidate": "def find_a_and_e(sentence):\n    # Write your code here.\n\n\nif __name__ == \"__main__\":\n    print(find_a_and_e(\"Aba eba\"))\n    print(find_a_and_e(\"Aba eb\"))\n    print(find_a_and_e(\"Eb\"))\n    print(find_a_and_e(\"Ba\"))"
    },
    {
      "rank": 12,
      "score": 10.0,
      "candidate": "def find_ae_words(string):\n    \"\"\"\n    >>> find_ae_words(\"abc\")\n    []\n    >>> find_ae_words(\"abcd\")\n    ['abcd']\n    >>> find_ae_words(\"abcde\")\n    ['abcde']\n    >>> find_ae_words(\"abcdef\")\n    ['abcdef']\n    >>> find_ae_words(\"abcdefg\")\n    ['abcdefg']\n    >>> find_ae_words(\"abcefg\")\n    ['abcefg']\n    >>> find_ae_words(\"abcfeg\")\n    ['abcfeg']\n    >>> find_ae_words(\"abcdeg\")\n    ['abcdeg']\n    >>> find_ae_words(\"abcdefg\")\n    ['abcdefg']\n    >>> find_ae_words(\"abcdefgh\")\n    ['abcdefgh']\n    >>> find_ae_words(\"abcdefghi\")\n    ['abcdefghi']\n    >>> find_ae_words(\"abcdefghij\")\n    ['abcdefghij']\n    >>> find_ae_words(\"abcdefghijk\")\n    ['abcdefghijk']\n    >>> find_ae_words(\"abcdefghijkl\")\n    ['abcdefghijkl']\n    \"\"\"\n    return [s for s in string.split() if s[0] in ('a', 'e')]\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 13,
      "score": 10.0,
      "candidate": "def find_words(sentence):\n    \"\"\"\n    :param sentence: str of words separated by space\n    :return: list of words that start with 'a' or 'e'\n    \"\"\"\n    words = sentence.split(\" \")\n    return [word for word in words if word.startswith(\"a\") or word.startswith(\"e\")]\n\n\nprint(find_words(\"This is a good day\"))"
    },
    {
      "rank": 14,
      "score": 10.0,
      "candidate": "from typing import List\n\n\ndef find_words(string: str) -> List[str]:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(n)\n    \"\"\"\n    return [word for word in string.split() if word[0] in \"ae\"]\n\n\nif __name__ == \"__main__\":\n    assert find_words(\"The quick brown fox jumped over the lazy dog.\") == [\n        \"The\",\n        \"The\",\n        \"over\",\n        \"the\",\n    ]"
    },
    {
      "rank": 15,
      "score": 9.0,
      "candidate": "def find_words(str):\n    words = []\n\n    for i in range(len(str)):\n        if str[i] == 'a' or str[i] == 'e':\n            words.append(str[i])\n\n    return words\n\nif __name__ == '__main__':\n    print(find_words('Hello, my name is Alex.'))"
    },
    {
      "rank": 16,
      "score": 9.0,
      "candidate": "def words_starting_with(string, letters):\n    \"\"\"\n    >>> words_starting_with(\"This is a test\", \"ae\")\n    ['a', 'e', 'a', 'a', 'e']\n    \"\"\"\n    return [word for word in string.split() if word[0] in letters]\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 17,
      "score": 8.0,
      "candidate": "def find_words(string):\n    words = string.split()\n    return [word for word in words if word[0] in ('a','e')]\n\n\nif __name__ == '__main__':\n    string = 'I am a pythonista and a geek'\n    print(find_words(string))"
    },
    {
      "rank": 18,
      "score": 8.0,
      "candidate": "def find_ae_words(sentence):\n    # return [word for word in sentence.split() if word.startswith('a') or word.startswith('e')]\n    return list(filter(lambda word: word.startswith('a') or word.startswith('e'), sentence.split()))\n\n\nif __name__ == '__main__':\n    print(find_ae_words('The quick brown fox jumped over the lazy dog.'))"
    },
    {
      "rank": 19,
      "score": 8.0,
      "candidate": "# O(n) time | O(n) space\ndef findWords(words):\n    return [word for word in words if word[0] in [\"a\", \"e\"]]"
    },
    {
      "rank": 20,
      "score": 8.0,
      "candidate": "def starts_with_a_or_e(string: str) -> list[str]:\n    return list(filter(lambda s: s.startswith(\"a\") or s.startswith(\"e\"), string.split()))\n\n\nif __name__ == \"__main__\":\n    assert starts_with_a_or_e(\"abc aeef\") == [\"abc\", \"aeef\"]\n    assert starts_with_a_or_e(\"abcef\") == [\"abcef\"]\n    assert starts_with_a_or_e(\"a abcef\") == [\"a\", \"abcef\"]\n    assert starts_with_a_or_e(\"aeef\") == [\"aeef\"]"
    },
    {
      "rank": 21,
      "score": 8.0,
      "candidate": "def find_a_e(string):\n    result = []\n    for word in string.split():\n        if word[0] in (\"a\", \"e\"):\n            result.append(word)\n    return result\n\n\nif __name__ == '__main__':\n    print(find_a_e(\"this is a test\"))"
    },
    {
      "rank": 22,
      "score": 8.0,
      "candidate": "def ae_words(string):\n    return [word for word in string.split() if word[0] in ('a', 'e')]\n\ndef test_ae_words():\n    \"\"\"\n    >>> test_ae_words()\n    \"\"\"\n    assert ae_words(\"A test is an experiment done on a sample\") == ['A', 'test', 'is', 'an', 'experiment', 'done', 'on', 'a', 'sample']\n    assert ae_words(\"A test is an experiment done on a sample\") == ['A', 'test', 'is', 'an', 'experiment', 'done', 'on', 'a', 'sample']\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 23,
      "score": 8.0,
      "candidate": "def find_words(str):\n    result = []\n    str = str.lower()\n    for i in range(len(str)):\n        if str[i] == 'a' or str[i] == 'e':\n            result.append(str[i:])\n    return result\n\nprint(find_words('A'))\nprint(find_words('Afgh'))\nprint(find_words('e'))\nprint(find_words('e123'))\nprint(find_words('e123fgh'))\nprint(find_words('Abc'))\nprint(find_words('AbcAbc'))\nprint(find_words(''))\nprint(find_words('123'))\nprint(find_words('123abc'))\n\n# Time complexity: O(n)\n# Space complexity: O(n)\n\n\"\"\"\nTime complexity: O(n)\nSpace complexity: O(n)\n\"\"\""
    },
    {
      "rank": 24,
      "score": 8.0,
      "candidate": "from collections import Counter\n\n\ndef get_words(input_str):\n    return [\n        word for word in input_str.split()\n        if word[0] in ('a', 'e')\n    ]\n\n\ndef get_words_counter(input_str):\n    return [\n        word for word, count in Counter(input_str.split()).items()\n        if word[0] in ('a', 'e')\n    ]\n\n\nif __name__ == \"__main__\":\n    input_str = \"The quick brown fox jumps over the lazy dog\"\n    assert get_words(input_str) == [\"The\", \"The\", \"the\", \"The\", \"the\", \"lazy\"]\n    assert get_words_counter(input_str) == [\"The\", \"the\", \"lazy\"]"
    },
    {
      "rank": 25,
      "score": 8.0,
      "candidate": "def find_a_or_e(string):\n    \"\"\"\n    >>> find_a_or_e('abc')\n    ['abc']\n    >>> find_a_or_e('abcde')\n    ['abcd', 'abcde']\n    >>> find_a_or_e('')\n    []\n    >>> find_a_or_e('ae')\n    ['ae']\n    >>> find_a_or_e('aed')\n    ['aed']\n    >>> find_a_or_e('aedf')\n    ['aed', 'aedf']\n    >>> find_a_or_e('ae')\n    ['ae']\n    >>> find_a_or_e('a')\n    ['a']\n    >>> find_a_or_e('aedf')\n    ['aed', 'aedf']\n    \"\"\"\n    a_or_e = lambda x: x.startswith('a') or x.startswith('e')\n    return [s for s in string.split() if a_or_e(s)]\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 26,
      "score": 8.0,
      "candidate": "def find_words(s):\n    return [word for word in s.split() if word[0] in ('a', 'e')]\n\nprint(find_words('The quick brown fox jumped over the lazy dog.'))"
    },
    {
      "rank": 27,
      "score": 8.0,
      "candidate": "def find_ae(string: str) -> list[str]:\n    \"\"\"Returns list of all words starting with 'a' or 'e' in a given string.\n\n    Args:\n        string (str): the given string.\n\n    Examples:\n        >>> assert find_ae('aeroplane') == ['aeroplane']\n        >>> assert find_ae('ae') == ['ae']\n        >>> assert find_ae('aeroplane, ae, aeroplane') == ['aeroplane', 'ae']\n        >>> assert find_ae('aeeeee') == ['aeeeee']\n    \"\"\"\n    return list(filter(lambda word: word[0] in (\"a\", \"e\"), string.split()))\n\n\nif __name__ == \"__main__\":\n    print(find_ae(\"aeroplane, ae, aeroplane\"))"
    },
    {
      "rank": 28,
      "score": 8.0,
      "candidate": "def find_words(s):\n    \"\"\"\n    :type s: str\n    :rtype: List[str]\n    \"\"\"\n    words = s.split()\n    return [word for word in words if word[0] in ('a', 'e')]\n\n\ndef test_find_words():\n    s = \"the quick brown fox jumped over the lazy dog\"\n    assert find_words(s) == ['the', 'the', 'the', 'over', 'the']\n\nif __name__ == '__main__':\n    test_find_words()"
    },
    {
      "rank": 29,
      "score": 8.0,
      "candidate": "def find_ae_words(string):\n    words = string.split()\n    result = []\n    for word in words:\n        if word[0] == 'a' or word[0] == 'e':\n            result.append(word)\n    return result\n\nprint(find_ae_words(\"This is a sentence.\"))\nprint(find_ae_words(\"This is not an apple.\"))"
    },
    {
      "rank": 30,
      "score": 8.0,
      "candidate": "def find_a_or_e(string):\n    words = string.split()\n    result = []\n    for word in words:\n        if word[0] in ['a', 'e']:\n            result.append(word)\n    return result\n\nif __name__ == '__main__':\n    print(find_a_or_e(\"The quick brown fox jumps over the lazy dog.\"))"
    },
    {
      "rank": 31,
      "score": 8.0,
      "candidate": "def find_words(s):\n    \"\"\"\n    :type s: str\n    :rtype: List[str]\n    \"\"\"\n    result = []\n    for word in s.split():\n        if word[0] == 'a' or word[0] == 'e':\n            result.append(word)\n    return result\n\n\ndef test_find_words():\n    assert find_words('apple banana carrot') == ['apple', 'banana']\n    assert find_words('a b c') == ['a', 'b']\n    assert find_words('a b c e f') == ['a', 'b', 'c', 'e']\n    assert find_words('b c e f') == []\n    assert find_words('a b c d e f') == ['a', 'b', 'c', 'd', 'e']\n\n\nif __name__ == '__main__':\n    test_find_words()"
    },
    {
      "rank": 32,
      "score": 8.0,
      "candidate": "def ae_words(sentence):\n    return [word for word in sentence.split() if word.startswith('a') or word.startswith('e')]\n\n# test\nsentence = \"aerial eel aardvark abeam\"\nprint(ae_words(sentence))"
    },
    {
      "rank": 33,
      "score": 8.0,
      "candidate": "def find_words(text):\n    return [word for word in text.split() if word[0] in 'aeiou']\n\n\"\"\"\nWrite a function to find all words starting with 'a' or 'e' in a given string.\n\"\"\"\n\ndef find_words(text):\n    return [word for word in text.split() if word[0] in 'aeiou']"
    },
    {
      "rank": 34,
      "score": 8.0,
      "candidate": "from collections import defaultdict\n\n\ndef starting_a_or_e(input_string):\n    \"\"\"Return a list of words that start with a or e.\"\"\"\n    words = input_string.split()\n    result = defaultdict(list)\n    for word in words:\n        if word.startswith('a') or word.startswith('e'):\n            result[word].append(word)\n    return result\n\n\nif __name__ == \"__main__\":\n    print(starting_a_or_e(\"Apple and banana are fruits\"))\n    print(starting_a_or_e(\"Apple and banana are fruits and vegetables\"))\n    print(starting_a_or_e(\"Apple and banana are vegetables\"))\n    print(starting_a_or_e(\"Apple and banana are vegetables and fruits\"))"
    },
    {
      "rank": 35,
      "score": 8.0,
      "candidate": "def find_words(input_string):\n    words = input_string.split(\" \")\n    result = []\n    for word in words:\n        if word[0] in ('a', 'e'):\n            result.append(word)\n    return result\n\n\ninput_string = \"this is a string\"\nresult = find_words(input_string)\nprint(result)"
    },
    {
      "rank": 36,
      "score": 8.0,
      "candidate": "def find_ae(str):\n    result = []\n    for word in str.split():\n        if word[0] in ['a', 'e']:\n            result.append(word)\n    return result\n\n\nif __name__ == '__main__':\n    result = find_ae(\"I have a dog and an apple\")\n    print(result)"
    },
    {
      "rank": 37,
      "score": 8.0,
      "candidate": "from collections import defaultdict\n\n\ndef find_words(string):\n    \"\"\"Find words starting with a or e.\"\"\"\n    # O(n) time | O(1) space\n    # if not string:\n    #     return []\n\n    # # O(n) time | O(1) space\n    # first_letters = defaultdict(list)\n    # for index, letter in enumerate(string):\n    #     first_letters[letter].append(index)\n\n    # # O(n) time | O(n) space\n    # result = []\n    # for first_letter in first_letters:\n    #     if first_letter in ['a', 'e']:\n    #         for index in first_letters[first_letter]:\n    #             result.append(string[index:])\n    #             break\n    # return result\n\n    # O(n) time | O(1) space\n    first_letters = defaultdict(list)\n    for index, letter in enumerate(string):\n        first_letters[letter].append(index)\n\n    result = []\n    for first_letter in first_letters:\n        if first_letter in ['a', 'e']:\n            for index in first_letters[first_letter]:\n                result.append(string[index:])\n                break\n    return result"
    },
    {
      "rank": 38,
      "score": 8.0,
      "candidate": "from collections import Counter\n\n\ndef find_all_words(input_str):\n    return [word for word in input_str.split() if word[0] in [\"a\", \"e\"]]\n\n\ndef find_all_words_better(input_str):\n    words = input_str.split()\n    return [word for word in words if word[0] in [\"a\", \"e\"]]\n\n\ndef find_all_words_optimized(input_str):\n    return [word for word in input_str.split() if word[0] in Counter(\"aeiou\")]\n\n\nif __name__ == \"__main__\":\n    assert find_all_words(\"a good a bad\") == [\"a\", \"good\", \"a\"]\n    assert find_all_words_better(\"a good a bad\") == [\"a\", \"good\", \"a\"]\n    assert find_all_words_optimized(\"a good a bad\") == [\"a\", \"good\", \"a\"]"
    },
    {
      "rank": 39,
      "score": 8.0,
      "candidate": "def find_words(s):\n    return [word for word in s.split() if word[0] in 'aeiou']\n\n\ndef test_find_words():\n    assert find_words(\"The quick brown fox jumps over the lazy dog\") == [\n        'The', 'the', 'the', 'dog'\n    ]\n    assert find_words(\"The quick brown fox jumps over the lazy fox\") == [\n        'The', 'the', 'the', 'fox', 'fox'\n    ]\n\n\nif __name__ == '__main__':\n    test_find_words()"
    },
    {
      "rank": 40,
      "score": 8.0,
      "candidate": "def find_words(s):\n    \"\"\"\n    :type s: str\n    :rtype: List[str]\n    \"\"\"\n    s = s.split(' ')\n    ret = []\n    for i in s:\n        if i[0] == 'a' or i[0] == 'e':\n            ret.append(i)\n    return ret\n\nprint(find_words(\"the quick brown fox jumps over the lazy dog\"))"
    },
    {
      "rank": 41,
      "score": 8.0,
      "candidate": "from typing import List\n\n\ndef find_words(letters: str) -> List[str]:\n    \"\"\"\n    Return a list of words which are starting with 'a' or 'e' in a given string.\n\n    Time complexity: O(n)\n    Space complexity: O(n)\n    \"\"\"\n    words = []\n    for word in letters.split():\n        if word[0] in ('a', 'e'):\n            words.append(word)\n    return words\n\n\nif __name__ == '__main__':\n    print(find_words('I am an NLPer'))\n    print(find_words('Python is a great programming language'))"
    },
    {
      "rank": 42,
      "score": 8.0,
      "candidate": "def find_all_words(text):\n    \"\"\"\n    O(n)\n    \"\"\"\n    words = text.split()\n    return [word for word in words if word[0] in \"ae\"]\n\n\nif __name__ == \"__main__\":\n    text = \"This is a good day to learn Python. Enjoy the day.\"\n    print(find_all_words(text))"
    },
    {
      "rank": 43,
      "score": 8.0,
      "candidate": "def find_words(s):\n    \"\"\"\n    :type s: str\n    :rtype: List[str]\n    \"\"\"\n    return list(filter(lambda x: x[0] in {'a', 'e'}, s.split()))\n\n\ndef test_find_words():\n    assert find_words(\"The quick brown fox jumps over the lazy dog\") == \\\n        [\"The\", \"The\", \"over\", \"the\"]\n\n\nif __name__ == '__main__':\n    test_find_words()"
    },
    {
      "rank": 44,
      "score": 8.0,
      "candidate": "def find_words(string):\n    \"\"\"\n    return a list of words starting with 'a' or 'e'\n    in a given string\n    \"\"\"\n    words = string.split()\n    result = []\n    for word in words:\n        if word[0] == 'a' or word[0] == 'e':\n            result.append(word)\n    return result"
    },
    {
      "rank": 45,
      "score": 8.0,
      "candidate": "from collections import Counter\n\n\ndef words_starting_with(word: str, letter: str) -> bool:\n    return word.startswith(letter)\n\n\ndef words_starting_with_e_or_a(word: str) -> bool:\n    return words_starting_with(word, \"a\") or words_starting_with(word, \"e\")\n\n\ndef words_starting_with_e_or_a_counter(word: str) -> bool:\n    counter = Counter(word)\n    return counter[\"a\"] or counter[\"e\"]\n\n\nif __name__ == \"__main__\":\n    print(words_starting_with_e_or_a(\"aardvark\"))\n    print(words_starting_with_e_or_a(\"apple\"))\n    print(words_starting_with_e_or_a(\"banana\"))"
    },
    {
      "rank": 46,
      "score": 8.0,
      "candidate": "from collections import defaultdict\n\n\ndef words_with_ae(string):\n    result = []\n    char_dict = defaultdict(list)\n\n    for index, char in enumerate(string):\n        char_dict[char].append(index)\n\n    for char in ['a', 'e']:\n        result.extend(string[start:end + 1] for start, end in zip(char_dict[char], char_dict[char][1:]))\n\n    return result\n\n\nassert words_with_ae('abcdaedbc') == ['aed', 'bc']"
    },
    {
      "rank": 47,
      "score": 8.0,
      "candidate": "def ae_words(string: str) -> list[str]:\n    \"\"\"\n    >>> ae_words('abcdefghijklmnopqrstuvwxyz')\n    ['a', 'e']\n    >>> ae_words('abacaba')\n    ['a', 'e']\n    >>> ae_words('abc')\n    []\n    \"\"\"\n    return [word for word in string.split() if word[0] in \"ae\"]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 48,
      "score": 8.0,
      "candidate": "def start_a_or_e(string):\n    \"\"\"\n    >>> start_a_or_e(\"abcde\")\n    ['abcde']\n    >>> start_a_or_e(\"abcdee\")\n    ['abcdee']\n    >>> start_a_or_e(\"abcedf\")\n    []\n    >>> start_a_or_e(\"ae\")\n    ['ae']\n    >>> start_a_or_e(\"aeiou\")\n    ['aeiou']\n    \"\"\"\n    return [i for i in string.split() if i.startswith('a') or i.startswith('e')]\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 49,
      "score": 8.0,
      "candidate": "def a_or_e(string):\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(1)\n    \"\"\"\n    result = []\n    for i, v in enumerate(string):\n        if v == 'a' or v == 'e':\n            result.append(string[i:])\n            break\n    for i in range(i + 1, len(string)):\n        if string[i] == 'a' or string[i] == 'e':\n            result.append(string[i:])\n    return result\n\n\nif __name__ == \"__main__\":\n    print(a_or_e(\"aeroplane\"))\n    print(a_or_e(\"apple\"))\n    print(a_or_e(\"aeroplaneapple\"))"
    },
    {
      "rank": 50,
      "score": 8.0,
      "candidate": "def find_a_or_e(input_str):\n    start_with_a = []\n    start_with_e = []\n    for word in input_str.split():\n        if word.startswith('a'):\n            start_with_a.append(word)\n        elif word.startswith('e'):\n            start_with_e.append(word)\n    return start_with_a, start_with_e\n\n\ndef test_find_a_or_e():\n    assert find_a_or_e(\"a python\") == (['a'], [])\n    assert find_a_or_e(\"e python\") == ([], ['e'])\n    assert find_a_or_e(\"a python e python\") == (['a', 'e'], ['e'])\n\n\nif __name__ == '__main__':\n    test_find_a_or_e()"
    },
    {
      "rank": 51,
      "score": 8.0,
      "candidate": "def find_words(str):\n    return [word for word in str.split() if word[0] in ('a', 'e')]\n\n\nprint(find_words(\"The quick brown fox jumps over the lazy dog\"))"
    },
    {
      "rank": 52,
      "score": 8.0,
      "candidate": "def find_words(input_str):\n    \"\"\"\n    :param input_str: string\n    :return: list of words that start with 'a' or 'e'\n    \"\"\"\n    result = []\n    for word in input_str.split():\n        if word[0] == 'a' or word[0] == 'e':\n            result.append(word)\n    return result\n\n\ndef main():\n    \"\"\"\n    :return: void\n    \"\"\"\n    input_str = 'The quick brown fox jumps over the lazy dog.'\n    print(find_words(input_str))\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 53,
      "score": 8.0,
      "candidate": "def find_words(words):\n    return [word for word in words if word[0] in ('a', 'e')]\n\n\nif __name__ == \"__main__\":\n    assert find_words([\"apple\", \"orange\", \"banana\", \"cherry\"]) == [\"apple\", \"banana\"]"
    },
    {
      "rank": 54,
      "score": 8.0,
      "candidate": "def start_with_a_or_e(string):\n    \"\"\"\n    :param string: str - string to check.\n    :return: list - all words starting with 'a' and/or 'e'.\n    \"\"\"\n    return [word for word in string.split() if word[0] in ('a', 'e')]\n\n\ndef start_with_a_or_e_v2(string):\n    \"\"\"\n    :param string: str - string to check.\n    :return: list - all words starting with 'a' and/or 'e'.\n    \"\"\"\n    return [word for word in string.split() if word[:1] in ('a', 'e')]"
    },
    {
      "rank": 55,
      "score": 8.0,
      "candidate": "from collections import Counter\n\n\ndef words_starting_with_a_or_e(string):\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(n)\n    \"\"\"\n    words = string.split()\n    words_starting_with_a_or_e = []\n\n    for word in words:\n        if word[0] == \"a\" or word[0] == \"e\":\n            words_starting_with_a_or_e.append(word)\n\n    return words_starting_with_a_or_e\n\n\ndef words_starting_with_a_or_e_counter(string):\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(n)\n    \"\"\"\n    words = string.split()\n    words_starting_with_a_or_e = []\n\n    counter = Counter(words)\n\n    for word, count in counter.items():\n        if word[0] == \"a\" or word[0] == \"e\":\n            words_starting_with_a_or_e.append(word)\n\n    return words_starting_with_a_or_e\n\n\nif __name__ == \"__main__\":\n    assert words_starting_with_a_or_e(\"Hello world\") == []\n    assert words_starting_with_a_or_e(\"a e i o u\") == [\"a\", \"e\"]\n    assert words_starting_with_a_or_e(\"a e i o u a e i o u\") == [\"a\", \"e\", \"a\", \"e\"]\n\n    assert words_starting_with_a_or_e_counter(\"Hello world\") == []\n    assert words_starting_with_a_or_e_counter(\"a e i o u\") == [\"a\", \"e\"]\n    assert words_starting_with_a_or_e_counter(\"a e i o u a e i o u\") == [\"a\", \"e\", \"a\", \"e\"]"
    },
    {
      "rank": 56,
      "score": 8.0,
      "candidate": "def find_words(input_str):\n    return [word for word in input_str.split() if word.startswith('a') or word.startswith('e')]\n\n# test\ninput_str = \"This is a test sentence for finding words starting with a or e.\"\nprint(find_words(input_str))"
    },
    {
      "rank": 57,
      "score": 8.0,
      "candidate": "def find_a_or_e_words(s):\n    \"\"\"\n    :type s: str\n    :rtype: List[str]\n    \"\"\"\n    words = s.split()\n    a_or_e_words = []\n    for word in words:\n        if word[0] in ('a', 'e'):\n            a_or_e_words.append(word)\n    return a_or_e_words\n\nif __name__ == '__main__':\n    print(find_a_or_e_words('apple orange plum strawberry banana'))"
    },
    {
      "rank": 58,
      "score": 8.0,
      "candidate": "def find_words(words):\n    return [word for word in words.split() if word[0] in \"ae\"]"
    },
    {
      "rank": 59,
      "score": 8.0,
      "candidate": "def a_e_words(sentence):\n    words = sentence.split(' ')\n    result = []\n    for word in words:\n        if word[0] == 'a' or word[0] == 'e':\n            result.append(word)\n    return result\n\n\nprint(a_e_words('a e i o u'))"
    },
    {
      "rank": 60,
      "score": 8.0,
      "candidate": "def find_words(input_str):\n    return [word for word in input_str.split() if word[0] in ('a', 'e')]\n\n\ndef test_find_words():\n    assert find_words(\"The quick brown fox jumps over the lazy dog\") == \\\n           ['The', 'quick', 'brown', 'fox', 'jumps', 'the', 'lazy']"
    },
    {
      "rank": 61,
      "score": 8.0,
      "candidate": "def words(s):\n    \"\"\"\n    :param s: str - string to explore\n    :return: list - all words starting with 'a' or 'e'\n    \"\"\"\n    result = []\n    for word in s.split():\n        if word[0] == 'a' or word[0] == 'e':\n            result.append(word)\n    return result\n\n\ndef main():\n    print(words('It is not a good idea to use curly brackets'))\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 62,
      "score": 8.0,
      "candidate": "def words_starts_with_ae(string):\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(1)\n    \"\"\"\n    result = []\n    for word in string.split():\n        if word[0] == 'a' or word[0] == 'e':\n            result.append(word)\n    return result\n\n\nif __name__ == \"__main__\":\n    string = \"The quick brown fox jumps over the lazy dog\"\n    print(words_starts_with_ae(string))"
    },
    {
      "rank": 63,
      "score": 8.0,
      "candidate": "def find_words(str):\n    return [word for word in str.split() if word[0] == 'a' or word[0] == 'e']\n\n\ndef test_find_words():\n    assert find_words(\"The quick brown fox jumps over the lazy dog\") == [\n        \"The\", \"the\", \"the\", \"The\", \"the\", \"the\"]\n    assert find_words(\"Python Exercises\") == [\"Python\", \"Exercises\"]\n\n\nif __name__ == '__main__':\n    test_find_words()"
    },
    {
      "rank": 64,
      "score": 8.0,
      "candidate": "def find_words(string):\n    # Initialize the result array.\n    result = []\n\n    # Iterate over each word in the string.\n    for word in string.split():\n        # If the first letter of the word is 'a' or 'e', append it to the result array.\n        if word[0] == 'a' or word[0] == 'e':\n            result.append(word)\n\n    return result\n\n\ndef main():\n    # Find all words starting with 'a' or 'e' in the string.\n    result = find_words(\"This is an apple\")\n\n    # Print the result.\n    print(result)\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 65,
      "score": 8.0,
      "candidate": "def starting_with_a_e(string):\n    \"\"\"\n    Return list of words starting with 'a' or 'e' in a given string.\n\n    Time Complexity: O(n)\n    Space Complexity: O(n)\n    \"\"\"\n    words = string.split()\n    return [word for word in words if word.startswith((\"a\", \"e\"))]\n\n\nif __name__ == \"__main__\":\n    string = \"The quick brown fox jumps over the lazy dog\"\n    print(starting_with_a_e(string))"
    },
    {
      "rank": 66,
      "score": 8.0,
      "candidate": "from string import ascii_lowercase\n\n\ndef starts_a_e(input_str):\n    \"\"\"\n    >>> starts_a_e(\"aerial\")\n    ['aerial']\n    >>> starts_a_e(\"aerials\")\n    ['aerial', 's']\n    >>> starts_a_e(\"aeiou\")\n    ['a', 'e', 'i', 'o', 'u']\n    >>> starts_a_e(\"aerialsaeiou\")\n    ['aerial', 's', 'a', 'e', 'i', 'o', 'u']\n    \"\"\"\n    words = []\n    for word in input_str.split():\n        if word[0] in ascii_lowercase:\n            words.append(word)\n    return words\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 67,
      "score": 8.0,
      "candidate": "def starting_with_a_or_e(string):\n    return [word for word in string.split() if word[0] == 'a' or word[0] == 'e']\n\n\nif __name__ == \"__main__\":\n    assert starting_with_a_or_e(\"The quick brown fox jumps over the lazy dog.\") == ['a', 'e', 'the', 'the', 'the', 'the', 'the', 'the']"
    },
    {
      "rank": 68,
      "score": 8.0,
      "candidate": "def starts_a_or_e(string):\n    \"\"\"\n    Time complexity: O(n).\n    Space complexity: O(n).\n    \"\"\"\n    words = string.split()\n    return [word for word in words if word[0] in ('a', 'e')]\n\n\ndef starts_a_or_e2(string):\n    \"\"\"\n    Time complexity: O(n).\n    Space complexity: O(n).\n    \"\"\"\n    words = string.split()\n    words_starting_a_or_e = []\n    for word in words:\n        if word[0] in ('a', 'e'):\n            words_starting_a_or_e.append(word)\n    return words_starting_a_or_e\n\n\ndef starts_a_or_e3(string):\n    \"\"\"\n    Time complexity: O(n).\n    Space complexity: O(n).\n    \"\"\"\n    words = string.split()\n    return [word for word in words if word[0] in ('a', 'e')]\n\n\ndef main():\n    string = 'A short sentence with a lot of words'\n    print starts_a_or_e(string)\n    print starts_a_or_e2(string)\n    print starts_a_or_e3(string)\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 69,
      "score": 8.0,
      "candidate": "def find_words(string):\n    \"\"\"\n    >>> find_words('abc')\n    ['abc']\n    >>> find_words('abc efgh')\n    ['abc', 'efgh']\n    >>> find_words('abcd efgh')\n    ['abcd', 'efgh']\n    >>> find_words('abcd efgh ijkl')\n    ['abcd', 'efgh', 'ijkl']\n    >>> find_words('abcd efgh ijkl mnop')\n    ['abcd', 'efgh', 'ijkl', 'mnop']\n    >>> find_words('abcde fghij')\n    ['abcde', 'fghij']\n    >>> find_words('abcde fghij klmno')\n    ['abcde', 'fghij', 'klmno']\n    \"\"\"\n    words = []\n    for word in string.split():\n        if word.startswith('a') or word.startswith('e'):\n            words.append(word)\n    return words\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 70,
      "score": 8.0,
      "candidate": "def find_words(string):\n    words = []\n    for word in string.split():\n        if word[0] in ['a', 'e']:\n            words.append(word)\n    return words\n\n\nif __name__ == \"__main__\":\n    test_string = \"I have a good dog and a bad cat\"\n    result = find_words(test_string)\n    print(result)"
    },
    {
      "rank": 71,
      "score": 8.0,
      "candidate": "def find_words(input_string):\n    \"\"\"\n    Return all words that start with 'a' or 'e'.\n    \"\"\"\n    return [word for word in input_string.split() if word[0] in ('a', 'e')]\n\n\ndef test_find_words():\n    \"\"\"\n    >>> test_find_words()\n    \"\"\"\n    assert find_words(\"a book, a pot, a pen\") == [\"a\", \"a\", \"a\"]\n    assert find_words(\"a book, e pot, a pen\") == [\"a\", \"e\", \"a\"]\n    assert find_words(\"e book, e pot, e pen\") == [\"e\", \"e\", \"e\"]\n    assert find_words(\"a book, e pot, e pen\") == [\"a\", \"e\"]\n    assert find_words(\"book, pot, pen\") == []\n    assert find_words(\"\") == []\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 72,
      "score": 8.0,
      "candidate": "def find_words(string):\n    \"\"\"\n    :param string: str - string to examine\n    :return: list - all words with letters a/e\n    \"\"\"\n    words = []\n    for word in string.split():\n        if word[0] in ('a', 'e'):\n            words.append(word)\n\n    return words\n\nprint(find_words(\"The quick brown fox jumps over the lazy dog.\"))\nprint(find_words(\"The quick brown fox jumps over the lazy dog.\"))"
    },
    {
      "rank": 73,
      "score": 8.0,
      "candidate": "def find_words(s):\n    return [word for word in s.split() if word.startswith('a') or word.startswith('e')]\n\n\nif __name__ == '__main__':\n    print(find_words(\"The quick brown fox jumps over the lazy dog\"))"
    },
    {
      "rank": 74,
      "score": 8.0,
      "candidate": "def find_words(string):\n    words = []\n    for word in string.split():\n        if word[0] in ['a', 'e']:\n            words.append(word)\n    return words\n\n\nif __name__ == '__main__':\n    test_string = 'The quick brown fox jumps over the lazy dog.'\n    print(find_words(test_string))"
    },
    {
      "rank": 75,
      "score": 8.0,
      "candidate": "def a_or_e(string):\n    \"\"\"\n    :param string: str - string to examine\n    :return: list - all words starting with 'a' or 'e'\n    \"\"\"\n    return [word for word in string.split() if word.startswith(('a', 'e'))]\n\n\nprint(a_or_e(\"A short, a shake of th' iceberg, Ere the water freezes\"))"
    },
    {
      "rank": 76,
      "score": 8.0,
      "candidate": "def words_starting_with(string, letters):\n    \"\"\"\n    Return all words starting with 'a' or 'e' in a given string.\n    \"\"\"\n    return ' '.join(word for word in string.split() if word[0] in letters)"
    },
    {
      "rank": 77,
      "score": 1.0,
      "candidate": "def find_words(string):\n    \"\"\"\n    O(n) time | O(1) space\n    \"\"\"\n    words = []\n    for word in string.split(\" \"):\n        if word[0] in (\"a\", \"e\"):\n            words.append(word)\n    return words\n\n\ndef find_words_two(string):\n    \"\"\"\n    O(n) time | O(1) space\n    \"\"\"\n    return [word for word in string.split(\" \") if word[0] in (\"a\", \"e\")]\n\n\ndef main():\n\n    string = \"a apple and a banana\"\n    print(find_words(string))\n    print(find_words_two(string))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 78,
      "score": 1.0,
      "candidate": "from typing import List\n\n\ndef find_words(text: str) -> List[str]:\n    \"\"\"Find all words starting with 'a' or 'e'.\n\n    Args:\n        text (str): given string.\n\n    Examples:\n        >>> assert find_words('abc efg') == ['abc', 'efg']\n    \"\"\"\n    return [word for word in text.split() if word.startswith((\"a\", \"e\"))]\n\n\nif __name__ == \"__main__\":\n    print(find_words(\"abc efg\"))"
    },
    {
      "rank": 79,
      "score": 1.0,
      "candidate": "def find_words(input):\n    \"\"\"\n    Return all words in input that start with 'a' or 'e'.\n    \"\"\"\n    words = []\n    for word in input.split():\n        if word.startswith('a') or word.startswith('e'):\n            words.append(word)\n    return words\n\ndef test_function(test_case):\n    output = find_words(test_case)\n    if len(output) == 0:\n        print(\"Pass\")\n    else:\n        print(\"Fail\")\n\ntest_case = \"The quick brown fox jumps over the lazy dog.\"\ntest_function(test_case)\n\ntest_case = \"Python Exercises\"\ntest_function(test_case)\n\ntest_case = \"Google do a job\"\ntest_function(test_case)\n\ntest_case = \"a nice day\"\ntest_function(test_case)\n\ntest_case = \"a a a a\"\ntest_function(test_case)\n\ntest_case = \"e e e e\"\ntest_function(test_case)"
    },
    {
      "rank": 80,
      "score": 1.0,
      "candidate": "def find_words(s):\n    \"\"\"\n    :param s: string\n    :return: list of words starting with 'a' or 'e'\n    \"\"\"\n    return [w for w in s.split() if w[0] in ('a', 'e')]\n\n\ndef test_find_words():\n    assert find_words(\"This is a very good day\") == ['a', 'day', 'very']\n    assert find_words(\"This is a very good day\") == find_words(\"This is a very good day\".split())\n\n\nif __name__ == '__main__':\n    test_find_words()"
    },
    {
      "rank": 81,
      "score": 1.0,
      "candidate": "def find_words(string):\n    return [word for word in string.split() if word[0] in \"ae\"]\n\n\nif __name__ == \"__main__\":\n    assert find_words(\"The quick brown fox jumps over the lazy dog\") == [\n        \"The\",\n        \"the\",\n        \"the\",\n        \"dog\",\n    ]"
    },
    {
      "rank": 82,
      "score": 1.0,
      "candidate": "def find_words(str):\n    \"\"\"\n    :param: str - input string\n    return: list of all words starting with 'a' or 'e'\n    \"\"\"\n    return [word for word in str.split() if word[0] in ['a', 'e']]\n\ndef test_function(test_case):\n    test_input, test_expected = test_case\n    test_actual = find_words(test_input)\n    if sorted(test_expected) == sorted(test_actual):\n        print(\"Pass\")\n    else:\n        print(\"Fail\")\n\ntest_function(('fine how are you', ['fine', 'how']))\ntest_function(('apple banana abacus artichoke', ['apple', 'banana']))\ntest_function(('apple banana abacus artichoke', ['apple', 'banana', 'abacus', 'artichoke']))\ntest_function(('apple banana abacus artichoke', ['apple', 'abacus', 'artichoke']))\ntest_function(('', []))\ntest_function(('aaa bbb ccc ddd', []))"
    },
    {
      "rank": 83,
      "score": 1.0,
      "candidate": "from typing import List\n\n\ndef starting_a_or_e(string: str) -> List[str]:\n    \"\"\"Finds all words starting with 'a' or 'e' in a given string.\n\n    Args:\n        string (str): given string\n\n    Examples:\n        >>> assert starting_a_or_e('a word') == ['a']\n        >>> assert starting_a_or_e('a word') == ['a']\n        >>> assert starting_a_or_e('a word') == ['a']\n    \"\"\"\n    return [word for word in string.split() if word.startswith((\"a\", \"e\"))]\n\n\nif __name__ == \"__main__\":\n    print(starting_a_or_e(\"a word\"))"
    },
    {
      "rank": 84,
      "score": 1.0,
      "candidate": "from typing import List\n\n\ndef a_or_e_words(input_str: str) -> List[str]:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(1)\n    \"\"\"\n    result = []\n\n    for word in input_str.split():\n        if word[0] in (\"a\", \"e\"):\n            result.append(word)\n\n    return result\n\n\nif __name__ == \"__main__\":\n    assert a_or_e_words(\"a test string\") == [\"a\", \"test\"]"
    },
    {
      "rank": 85,
      "score": 1.0,
      "candidate": "def find_words(string):\n    return [word for word in string.split() if word[0] in 'ae']\n\n\nif __name__ == \"__main__\":\n    assert find_words(\"This is a very good test case.\") == ['a', 'test']\n    assert find_words(\"This is another test case.\") == ['another', 'test']"
    },
    {
      "rank": 86,
      "score": 1.0,
      "candidate": "def find_words(s):\n    \"\"\"\n    :type s: str\n    :rtype: List[str]\n    \"\"\"\n    words = []\n    for word in s.split():\n        if word[0] == 'a' or word[0] == 'e':\n            words.append(word)\n    return words\n\n# test case\nprint(find_words('a a a a a a e a e e e e e'))"
    },
    {
      "rank": 87,
      "score": 1.0,
      "candidate": "def get_words(text):\n    words = []\n    for word in text.split():\n        if word[0] in ['a', 'e']:\n            words.append(word)\n    return words\n\n\nif __name__ == '__main__':\n    text = \"the quick brown fox jumps over the lazy dog\"\n    print(get_words(text))"
    },
    {
      "rank": 88,
      "score": 1.0,
      "candidate": "def find_words(words):\n    \"\"\"\n    :param words: str - a string of words separated by spaces\n    :return: List[str] - a list of words starting with 'a' or 'e'\n    Find all words starting with 'a' or 'e' in a given string.\n    \"\"\"\n    result = []\n    for word in words.split():\n        if word[0] == 'a' or word[0] == 'e':\n            result.append(word)\n    return result\n\n\ndef test_function(test_case):\n    test_input, test_expected = test_case\n    test_actual = find_words(test_input)\n    if sorted(test_expected) == sorted(test_actual):\n        print(\"Pass\")\n    else:\n        print(\"Fail\")\n\ntest_function(('hello world a aha eh a', ['a', 'a']))\ntest_function(('hello world eh', ['eh']))\ntest_function(('a eh', ['a', 'eh']))\ntest_function(('eh', ['eh']))\ntest_function(('a', ['a']))\ntest_function(('', []))\ntest_function(('a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a"
    },
    {
      "rank": 89,
      "score": 1.0,
      "candidate": "def find_a_or_e(string: str) -> list:\n    \"\"\"Return a list of words that start with 'a' or 'e'.\"\"\"\n    return [word for word in string.split() if word.startswith(('a', 'e'))]\n\n\nif __name__ == \"__main__\":\n    assert find_a_or_e(\"A frog has a frog\") == [\"A\", \"frog\"]"
    },
    {
      "rank": 90,
      "score": 1.0,
      "candidate": "def find_words(s):\n    \"\"\"\n    :param s: str - string to explore\n    :return: List[str] - all words starting with 'a' or 'e'\n    \"\"\"\n    # Your code here\n    result = []\n    s = s.split()\n    for i in range(len(s)):\n        if s[i][0] == 'a' or s[i][0] == 'e':\n            result.append(s[i])\n    return result\n\n\ndef test_function(test_case):\n    s = test_case[0]\n    solution = test_case[1]\n    output = find_words(s)\n    if output == solution:\n        print(\"Pass\")\n    else:\n        print(\"Fail\")\n\n\ntest_function([\"the quick brown fox jumped over the lazy dog\", [\"the\", \"fox\", \"the\"]])\ntest_function([\"Google do a job\", []])\ntest_function([\"Github is the second best thing after a beer\", [\"Github\"]])\ntest_function([\"i like coffee and i have 2 beer\", [\"coffee\"]])\ntest_function([\"i like coffee and i have 2 beer\", [\"i\", \"like\", \"coffee\", \"have\"]])\ntest_function([\"beer and coffee\", []])\ntest_function([\"\", []])\ntest_function([\"aaa\", [\"aaa\"]])\ntest_function([\"starting with a or e\", [\"starting\", \"e\"]])\ntest_function([\"starting with a or e\", [\"starting\", \"a\"]])\ntest_function([\"starting with a or e\", [\"starting\"]])\ntest_function([\"starting with a or e\", []])\ntest_function([\"starting with a or e\", [\"starting\", \"e\", \"a\"]])\ntest_function([\"a\", [\"a\"]])\ntest_function([\"e\", [\"e\"]])\ntest_function([\"ee\", [\"ee\"]])\ntest_function([\"eee\", [\"eee\"]])\ntest_function([\"eeee\", [\"eeee\"]])\ntest_function([\"aab\", [\"aab\"]"
    },
    {
      "rank": 91,
      "score": 1.0,
      "candidate": "def find_a_e(input_string):\n    a_e_words = []\n    input_string = input_string.split()\n    for word in input_string:\n        if word.startswith('a') or word.startswith('e'):\n            a_e_words.append(word)\n    return a_e_words\n\n\nif __name__ == '__main__':\n    input_string = 'a aaa e eee'\n    print(find_a_e(input_string))"
    },
    {
      "rank": 92,
      "score": 1.0,
      "candidate": "def find_a_or_e(string):\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(n)\n    \"\"\"\n    return [word for word in string.split() if word[0] in ('a', 'e')]\n\n\nif __name__ == \"__main__\":\n    string = \"The quick brown fox jumps over the lazy dog\"\n    print(find_a_or_e(string))"
    },
    {
      "rank": 93,
      "score": 1.0,
      "candidate": "def find_a_or_e(str):\n    words = str.split()\n    return [word for word in words if word.startswith('a') or word.startswith('e')]\n\n\nif __name__ == '__main__':\n    print(find_a_or_e(\"This is a string\"))\n    print(find_a_or_e(\"This is not a string\"))\n    print(find_a_or_e(\"This is a not string\"))\n    print(find_a_or_e(\"This is a not not string\"))\n    print(find_a_or_e(\"This is a not not not string\"))\n    print(find_a_or_e(\"This is a not not not not string\"))"
    },
    {
      "rank": 94,
      "score": 1.0,
      "candidate": "from collections import defaultdict\n\n\ndef a_e_words(str):\n    words = str.split()\n    result = []\n    for word in words:\n        if word[0] in ('a', 'e'):\n            result.append(word)\n    return result\n\n\ndef a_e_words_2(str):\n    words = str.split()\n    result = []\n    for word in words:\n        if word[0] in ('a', 'e'):\n            result.append(word)\n    return result\n\n\ndef a_e_words_3(str):\n    words = str.split()\n    result = []\n    for word in words:\n        if word[0] in ('a', 'e'):\n            result.append(word)\n    return result\n\n\ndef a_e_words_4(str):\n    words = str.split()\n    result = []\n    for word in words:\n        if word[0] in ('a', 'e'):\n            result.append(word)\n    return result\n\n\ndef a_e_words_5(str):\n    words = str.split()\n    result = []\n    for word in words:\n        if word[0] in ('a', 'e'):\n            result.append(word)\n    return result\n\n\ndef a_e_words_6(str):\n    words = str.split()\n    result = []\n    for word in words:\n        if word[0] in ('a', 'e'):\n            result.append(word)\n    return result\n\n\ndef a_e_words_7(str):\n    words = str.split()\n    result = []\n    for word in words:\n        if word[0] in ('a', 'e'):\n            result.append(word)\n    return result\n\n\ndef a_e_words_8(str):\n    words = str.split()\n    result = []\n    for word in words:\n        if word[0] in ('a', 'e'):\n            result.append(word)\n    return result\n\n\ndef a_e_words_9(str):\n    words = str.split()\n    result = []"
    },
    {
      "rank": 95,
      "score": 1.0,
      "candidate": "def find_words(s):\n    result = []\n    for word in s.split():\n        if word[0] in ['a', 'e']:\n            result.append(word)\n    return result\n\n\nif __name__ == \"__main__\":\n    s = \"this is a test sentence.\"\n    print(find_words(s))"
    },
    {
      "rank": 96,
      "score": 1.0,
      "candidate": "def find_words(string):\n    return [word for word in string.split() if word[0] in ['a', 'e']]\n\n\nif __name__ == \"__main__\":\n    test_cases = [\n        (\"a few words\", [\"a\", \"e\"]),\n        (\"a few words\", [\"few\"]),\n        (\"a few words\", [\"words\"]),\n        (\"a few words\", [\"a\", \"few\", \"words\"]),\n        (\"\", []),\n    ]\n    for test_string, expected_result in test_cases:\n        result = find_words(test_string)\n        assert result == expected_result, f\"{result} != {expected_result}\""
    },
    {
      "rank": 97,
      "score": 1.0,
      "candidate": "from typing import List\n\n\ndef find_words_a_e(sentence: str) -> List[str]:\n    \"\"\"Return all words starting with 'a' or 'e' in a given string.\n\n    >>> find_words_a_e(\"The quick brown fox jumps over the lazy dog\")\n    ['The', 'quick', 'brown', 'fox', 'jumps', 'over', 'the', 'lazy', 'dog']\n    >>> find_words_a_e(\"Python Exercises\")\n    ['Python']\n    >>> find_words_a_e(\"a a a a\")\n    ['a', 'a', 'a', 'a']\n    \"\"\"\n    return [word for word in sentence.split(\" \") if word.startswith((\"a\", \"e\"))]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 98,
      "score": 1.0,
      "candidate": "def find_words(sentence):\n    \"\"\"\n    :type sentence: str\n    :rtype: List[str]\n    \"\"\"\n    words = sentence.split()\n    result = []\n    for word in words:\n        if word[0] in ('a', 'e'):\n            result.append(word)\n    return result\n\n\ndef test_bench():\n\n    test_data = [\n        'The quick brown fox jumps over the lazy dog',\n        'pythonist'\n    ]\n\n    # expected output:\n    '''\n    ['a', 'e', 'e', 'e', 'e', 'a', 'a', 'a']\n    ['p', 'y', 't', 'h', 'o', 'n']\n    '''\n\n    for test_string in test_data:\n        print( find_words(test_string) )\n\n\nif __name__ == \"__main__\":\n\n    test_bench()"
    },
    {
      "rank": 99,
      "score": 1.0,
      "candidate": "def find_words(text):\n    return [word for word in text.split() if word[0] in ('a', 'e')]\n\n\ndef test_find_words():\n    assert find_words(\"The quick brown fox jumps over the lazy dog\") == \\\n        ['The', 'The', 'the', 'The', 'over', 'the']\n    assert find_words(\"Python Exercises\") == []\n    assert find_words(\"PostgreSQL\") == ['PostgreSQL']\n    assert find_words(\"a fast runner\") == ['a', 'a', 'runner']\n    assert find_words(\"a\") == ['a']\n    assert find_words(\"e\") == ['e']\n    assert find_words(\"aeiou\") == []\n    assert find_words(\"qwerty\") == []\n    assert find_words(\"\") == []\n    assert find_words(\" \") == []\n    assert find_words(\"12345\") == []\n    assert find_words(\"aab cde eee\") == ['aab', 'aab', 'aab', 'eee', 'eee', 'eee']\n    assert find_words(\"AAA BBB CCC\") == ['AAA', 'BBB', 'CCC']\n    assert find_words(\"AA BBB CCC\") == ['AA', 'BBB', 'CCC']\n    assert find_words(\"AAA BBB CCC DDD\") == ['AAA', 'BBB', 'CCC', 'DDD']\n    assert find_words(\"A B C D E F G H I J K L M N O P Q R S T U V W X Y Z\") == \\\n        ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z']\n\n\nif __name__ == '__main__':\n    test_find_words()"
    },
    {
      "rank": 100,
      "score": 1.0,
      "candidate": "def find_words(text):\n    return [word for word in text.split() if word[0] in ('a', 'e')]\n\n\nif __name__ == \"__main__\":\n    assert find_words(\"this is an apple\") == ['apple']\n    assert find_words(\"this is an apple and an orange\") == ['apple', 'an', 'orange']\n    assert find_words(\"this is an apple and an orange and an apple\") == ['apple', 'an', 'orange', 'apple']\n    assert find_words(\"this is an apple and an orange and an apple and an orange\") == ['apple', 'an', 'orange', 'apple', 'orange']"
    }
  ]
}