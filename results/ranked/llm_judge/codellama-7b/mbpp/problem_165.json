{
  "timestamp": "2025-09-14T23:32:48.566866",
  "method": "improved_llm_judge",
  "judge_model": "codellama/CodeLlama-7b-Python-hf",
  "target_model": "codellama-7b",
  "dataset": "mbpp",
  "problem_number": 165,
  "total_candidates": 100,
  "results": [
    {
      "rank": 1,
      "score": 10.0,
      "candidate": "def triangle_perimeter(a, b, c):\n    return a + b + c"
    },
    {
      "rank": 2,
      "score": 10.0,
      "candidate": "def perimeter(a, b, c):\n    return a + b + c\n\n\nif __name__ == '__main__':\n    a, b, c = map(int, input().split())\n    print(perimeter(a, b, c))"
    },
    {
      "rank": 3,
      "score": 10.0,
      "candidate": "def perimeter(sides):\n    \"\"\"\n    Calculates the perimeter of a triangle.\n    \"\"\"\n    return sum(sides)"
    },
    {
      "rank": 4,
      "score": 10.0,
      "candidate": "def perimeter(a, b, c):\n    return a + b + c\n\n\nif __name__ == '__main__':\n    print(perimeter(1, 2, 3))"
    },
    {
      "rank": 5,
      "score": 10.0,
      "candidate": "def perimeter(s1, s2, s3):\n    if s1 > s2 + s3 or s2 > s1 + s3 or s3 > s1 + s2:\n        return 0\n    else:\n        return s1 + s2 + s3"
    },
    {
      "rank": 6,
      "score": 10.0,
      "candidate": "def perimeter_triangle(side1, side2, side3):\n    \"\"\"\n    >>> perimeter_triangle(1, 2, 2)\n    5\n    >>> perimeter_triangle(3, 4, 5)\n    12\n    >>> perimeter_triangle(1, 2, 1)\n    Traceback (most recent call last):\n        ...\n    ValueError: Sides must be of different lengths.\n    >>> perimeter_triangle(1, 2, 3)\n    Traceback (most recent call last):\n        ...\n    ValueError: Sides must be of different lengths.\n    >>> perimeter_triangle(1, 2, 1.5)\n    Traceback (most recent call last):\n        ...\n    ValueError: Sides must be of different lengths.\n    \"\"\"\n    if side1 == side2 or side2 == side3 or side1 == side3:\n        raise ValueError(\"Sides must be of different lengths.\")\n    return side1 + side2 + side3\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 7,
      "score": 10.0,
      "candidate": "def find_perimeter(a, b, c):\n    \"\"\"\n    >>> find_perimeter(1, 2, 2)\n    5.0\n    >>> find_perimeter(1, 2, 3)\n    5.0\n    >>> find_perimeter(3, 4, 5)\n    10.0\n    \"\"\"\n    return a + b + c\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 8,
      "score": 10.0,
      "candidate": "def perimeter(a, b, c):\n    return a + b + c\n\n\nprint(perimeter(1, 2, 3))"
    },
    {
      "rank": 9,
      "score": 10.0,
      "candidate": "def perimeter(side_a, side_b, side_c):\n    return side_a + side_b + side_c\n\n\nif __name__ == '__main__':\n    print(perimeter(2, 3, 4))"
    },
    {
      "rank": 10,
      "score": 10.0,
      "candidate": "def perimeter(a, b, c):\n    return a + b + c"
    },
    {
      "rank": 11,
      "score": 10.0,
      "candidate": "def perimeter(a, b, c):\n    return a + b + c\n\n\nprint(perimeter(3, 4, 5))"
    },
    {
      "rank": 12,
      "score": 10.0,
      "candidate": "def perimeter(length1, length2, length3):\n    return length1 + length2 + length3\n\n\nif __name__ == '__main__':\n    print(perimeter(5, 4, 3))"
    },
    {
      "rank": 13,
      "score": 10.0,
      "candidate": "def perimeter(a, b, c):\n    return a + b + c\n\n\nprint(perimeter(1, 2, 3))"
    },
    {
      "rank": 14,
      "score": 10.0,
      "candidate": "def perimeter(a, b, c):\n    return a + b + c\n\n\nprint(perimeter(5, 10, 15))"
    },
    {
      "rank": 15,
      "score": 10.0,
      "candidate": "def perimeter(side1, side2, side3):\n    return side1 + side2 + side3\n\n\nif __name__ == '__main__':\n    side1 = float(input('Enter first side: '))\n    side2 = float(input('Enter second side: '))\n    side3 = float(input('Enter third side: '))\n    print(perimeter(side1, side2, side3))"
    },
    {
      "rank": 16,
      "score": 10.0,
      "candidate": "def perimeter(a, b, c):\n    return a + b + c\n\na = int(input())\nb = int(input())\nc = int(input())\n\nprint(perimeter(a, b, c))"
    },
    {
      "rank": 17,
      "score": 10.0,
      "candidate": "def perimeter(side1, side2, side3):\n    \"\"\"\n    :param side1: int\n    :param side2: int\n    :param side3: int\n    :return: int\n    \"\"\"\n    return side1 + side2 + side3"
    },
    {
      "rank": 18,
      "score": 10.0,
      "candidate": "def perimeter(a, b, c):\n    return a + b + c"
    },
    {
      "rank": 19,
      "score": 10.0,
      "candidate": "def perimeter(side1, side2, side3):\n    return side1 + side2 + side3\n\n\nprint(perimeter(1, 2, 2))"
    },
    {
      "rank": 20,
      "score": 10.0,
      "candidate": "def perimeter(a, b, c):\n    return a + b + c\n\n\nif __name__ == '__main__':\n    print(perimeter(1, 2, 3))"
    },
    {
      "rank": 21,
      "score": 10.0,
      "candidate": "def perimeter(a, b, c):\n    return a + b + c"
    },
    {
      "rank": 22,
      "score": 10.0,
      "candidate": "from unittest import TestCase\n\n\ndef perimeter(a, b, c):\n    return a + b + c\n\n\nclass TestPerimeter(TestCase):\n    def test_perimeter(self):\n        assert perimeter(1, 2, 2) == 5"
    },
    {
      "rank": 23,
      "score": 10.0,
      "candidate": "def find_perimeter(a, b, c):\n    return a + b + c"
    },
    {
      "rank": 24,
      "score": 10.0,
      "candidate": "def perimeter(a, b, c):\n    \"\"\"\n    >>> perimeter(1, 2, 3)\n    6\n    \"\"\"\n    return a + b + c\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 25,
      "score": 10.0,
      "candidate": "def triangle_perimeter(a, b, c):\n    return a + b + c\n\ndef main():\n    print(triangle_perimeter(3, 3, 3))\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 26,
      "score": 10.0,
      "candidate": "def perimeter(a, b, c):\n    return a + b + c"
    },
    {
      "rank": 27,
      "score": 9.0,
      "candidate": "def perimeter(sides):\n    if len(sides) != 3:\n        raise ValueError('sides must be a list with length of 3')\n    if any(s <= 0 for s in sides):\n        raise ValueError('sides must be greater than 0')\n    return sum(sides)"
    },
    {
      "rank": 28,
      "score": 9.0,
      "candidate": "def perimeter(a, b, c):\n    \"\"\"\n    >>> perimeter(3, 4, 5)\n    12\n    >>> perimeter(1, 1, 1)\n    3\n    \"\"\"\n    return a + b + c"
    },
    {
      "rank": 29,
      "score": 8.0,
      "candidate": "def triangle_perimeter(a, b, c):\n    return a + b + c\n\n\nassert triangle_perimeter(3, 4, 5) == 12\nassert triangle_perimeter(4, 5, 6) == 15"
    },
    {
      "rank": 30,
      "score": 8.0,
      "candidate": "def perimeter(a, b, c):\n    return a + b + c\n\ndef test_perimeter():\n    assert perimeter(3, 4, 5) == 12\n    assert perimeter(1, 1, 1) == 3\n    assert perimeter(1, 2, 3) == 6\n\nif __name__ == '__main__':\n    test_perimeter()"
    },
    {
      "rank": 31,
      "score": 8.0,
      "candidate": "def triangle_perimeter(a, b, c):\n    return a + b + c\n\n\nif __name__ == '__main__':\n    print(triangle_perimeter(2, 3, 4))"
    },
    {
      "rank": 32,
      "score": 8.0,
      "candidate": "def perimeter(a, b, c):\n    return a + b + c\n\n\nif __name__ == '__main__':\n    print(perimeter(3, 4, 5))"
    },
    {
      "rank": 33,
      "score": 8.0,
      "candidate": "def perimeter(a, b, c):\n    return a + b + c"
    },
    {
      "rank": 34,
      "score": 8.0,
      "candidate": "def triangle_perimeter(length1, length2, length3):\n    return length1 + length2 + length3\n\n\nprint(triangle_perimeter(3, 4, 5))"
    },
    {
      "rank": 35,
      "score": 8.0,
      "candidate": "def perimeter(a, b, c):\n    return a + b + c\n\nassert perimeter(3, 4, 5) == 12, \"Should be 12\"\nassert perimeter(3, 4, 4) == 12, \"Should be 12\"\nassert perimeter(3, 4, 5) == 12, \"Should be 12\""
    },
    {
      "rank": 36,
      "score": 8.0,
      "candidate": "def perimeter(a, b, c):\n    return a + b + c\n\nif __name__ == '__main__':\n    print(perimeter(3, 5, 6))"
    },
    {
      "rank": 37,
      "score": 8.0,
      "candidate": "def perimeter(s1, s2, s3):\n    return s1 + s2 + s3\n\n\nif __name__ == '__main__':\n    print(perimeter(3, 4, 5))"
    },
    {
      "rank": 38,
      "score": 8.0,
      "candidate": "def perimeter(side1: int, side2: int, side3: int) -> int:\n    \"\"\"\n    >>> perimeter(3, 4, 5)\n    12\n    \"\"\"\n    return side1 + side2 + side3\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 39,
      "score": 8.0,
      "candidate": "from math import sqrt\n\n\ndef is_valid_triangle(a, b, c):\n    return a + b > c and b + c > a and c + a > b\n\n\ndef perimeter(a, b, c):\n    if is_valid_triangle(a, b, c):\n        return a + b + c\n    else:\n        raise ValueError('The triangle is invalid.')\n\n\ndef perimeter_sqrt(a, b, c):\n    \"\"\"\n    This function does not work when the triangle is not valid.\n    \"\"\"\n    if is_valid_triangle(a, b, c):\n        s = (a + b + c) / 2\n        return int(2 * sqrt(s * (s - a) * (s - b) * (s - c)))\n    else:\n        raise ValueError('The triangle is invalid.')\n\n\nif __name__ == '__main__':\n    print(perimeter(3, 4, 5))\n    print(perimeter_sqrt(3, 4, 5))"
    },
    {
      "rank": 40,
      "score": 8.0,
      "candidate": "def find_perimeter(base, height):\n    return base + base + height\n\n\ndef test_perimeter():\n    assert find_perimeter(10, 20) == 40\n    assert find_perimeter(1, 2) == 4\n    assert find_perimeter(2, 1) == 4\n\n\nif __name__ == \"__main__\":\n    test_perimeter()"
    },
    {
      "rank": 41,
      "score": 8.0,
      "candidate": "def triangle_perimeter(sides):\n    return sum(sides)\n\n\nprint(triangle_perimeter([5, 4, 3]))"
    },
    {
      "rank": 42,
      "score": 8.0,
      "candidate": "def perimeter(a, b, c):\n    return a + b + c\n\n\nif __name__ == '__main__':\n    assert perimeter(3, 4, 5) == 12"
    },
    {
      "rank": 43,
      "score": 8.0,
      "candidate": "def perimeter(a, b, c):\n    \"\"\"\n    a: int\n    b: int\n    c: int\n    returns: int\n    \"\"\"\n    return a + b + c\n\n\n# Test cases\nprint perimeter(3, 4, 5)\nprint perimeter(10, 10, 10)\nprint perimeter(1, 1, 1)"
    },
    {
      "rank": 44,
      "score": 8.0,
      "candidate": "def triangle_perimeter(a, b, c):\n    return a + b + c\n\n\nassert triangle_perimeter(3, 4, 5) == 12\nassert triangle_perimeter(1, 2, 3) == 6"
    },
    {
      "rank": 45,
      "score": 8.0,
      "candidate": "def triangle_perimeter(a: int, b: int, c: int) -> int:\n    \"\"\"\n    >>> triangle_perimeter(1, 2, 2)\n    5\n    >>> triangle_perimeter(7, 2, 5)\n    18\n    >>> triangle_perimeter(1, 2, 1)\n    Traceback (most recent call last):\n        ...\n    ValueError: Sides must be greater than 0\n    >>> triangle_perimeter(1, 2, -4)\n    Traceback (most recent call last):\n        ...\n    ValueError: Sides must be greater than 0\n    >>> triangle_perimeter(-1, 2, -4)\n    Traceback (most recent call last):\n        ...\n    ValueError: Sides must be greater than 0\n    >>> triangle_perimeter(-1, 2, -4)\n    Traceback (most recent call last):\n        ...\n    ValueError: Sides must be greater than 0\n    \"\"\"\n    if a <= 0 or b <= 0 or c <= 0:\n        raise ValueError(\"Sides must be greater than 0\")\n    return (a + b + c)\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 46,
      "score": 8.0,
      "candidate": "def perimeter(side_a, side_b, side_c):\n    return side_a + side_b + side_c\n\n\nprint(perimeter(1, 2, 3))"
    },
    {
      "rank": 47,
      "score": 8.0,
      "candidate": "def perimeter(side1, side2, side3):\n    return side1 + side2 + side3"
    },
    {
      "rank": 48,
      "score": 8.0,
      "candidate": "def perimeter(a, b, c):\n    return a + b + c\n\n\nprint(perimeter(3, 4, 5))"
    },
    {
      "rank": 49,
      "score": 8.0,
      "candidate": "def find_perimeter(a, b, c):\n    \"\"\"\n    :param a: int - side a of the triangle (integer)\n    :param b: int - side b of the triangle (integer)\n    :param c: int - side c of the triangle (integer)\n    :return:  int - perimeter of the triangle (integer)\n    \"\"\"\n    return a + b + c\n\n\nprint(find_perimeter(3, 4, 5))"
    },
    {
      "rank": 50,
      "score": 8.0,
      "candidate": "def perimeter(a, b, c):\n    \"\"\"\n    >>> perimeter(1, 2, 3)\n    7\n    >>> perimeter(3, 4, 5)\n    12\n    >>> perimeter(1, 1, 1)\n    3\n    \"\"\"\n    return a + b + c\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 51,
      "score": 8.0,
      "candidate": "def perimeter(a,b,c):\n    return a + b + c\n\na = float(input(\"Enter a: \"))\nb = float(input(\"Enter b: \"))\nc = float(input(\"Enter c: \"))\n\nprint(\"The perimeter of the triangle is \" + str(perimeter(a,b,c)))"
    },
    {
      "rank": 52,
      "score": 8.0,
      "candidate": "def perimeter(a, b, c):\n    return (a + b + c)"
    },
    {
      "rank": 53,
      "score": 8.0,
      "candidate": "def triangle_perimeter(length1, length2, length3):\n    \"\"\"\n    >>> triangle_perimeter(1, 1, 1)\n    3\n    \"\"\"\n    return length1 + length2 + length3\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 54,
      "score": 8.0,
      "candidate": "def find_perimeter(base, height):\n    return base + height\n\n\nif __name__ == '__main__':\n    assert find_perimeter(5, 6) == 11"
    },
    {
      "rank": 55,
      "score": 8.0,
      "candidate": "def perimeter(a, b, c):\n    return a + b + c\n\n\nif __name__ == '__main__':\n    print(perimeter(3, 4, 5))"
    },
    {
      "rank": 56,
      "score": 8.0,
      "candidate": "def find_perimeter(a, b, c):\n    return a + b + c\n\n\nprint(find_perimeter(3, 4, 5))"
    },
    {
      "rank": 57,
      "score": 8.0,
      "candidate": "def find_perimeter(a, b, c):\n    \"\"\"\n    :param a: first side of triangle\n    :param b: second side of triangle\n    :param c: third side of triangle\n    :return: perimeter of triangle\n    \"\"\"\n\n    return a + b + c\n\nprint(find_perimeter(3, 4, 5))"
    },
    {
      "rank": 58,
      "score": 8.0,
      "candidate": "def perimeter_triangle(a, b, c):\n    return a + b + c\n\n\nprint(perimeter_triangle(5, 6, 7))"
    },
    {
      "rank": 59,
      "score": 8.0,
      "candidate": "def perimeter(a, b, c):\n    return a + b + c\n\n\ndef test_perimeter():\n    assert perimeter(3, 4, 5) == 12\n    assert perimeter(5, 6, 6) == 18\n    assert perimeter(7, 2, 3) == 12\n    assert perimeter(10, 2, 3) == 15\n    assert perimeter(1, 1, 1) == 3"
    },
    {
      "rank": 60,
      "score": 8.0,
      "candidate": "def perimeter(a, b, c):\n    return a + b + c\n\n\nif __name__ == '__main__':\n    print(perimeter(3, 4, 5))"
    },
    {
      "rank": 61,
      "score": 8.0,
      "candidate": "def triangle_perimeter(a, b, c):\n    return a + b + c\n\n\ndef test_perimeter():\n    assert triangle_perimeter(3, 4, 5) == 12"
    },
    {
      "rank": 62,
      "score": 8.0,
      "candidate": "def find_perimeter(a: int, b: int, c: int) -> int:\n    return a + b + c\n\n\nif __name__ == \"__main__\":\n    assert find_perimeter(1, 2, 3) == 6"
    },
    {
      "rank": 63,
      "score": 8.0,
      "candidate": "def triangle_perimeter(a, b, c):\n    return a + b + c\n\n\nif __name__ == '__main__':\n    print(triangle_perimeter(5, 6, 7))"
    },
    {
      "rank": 64,
      "score": 8.0,
      "candidate": "def perimeter(a,b,c):\n    return a+b+c\n\nassert perimeter(2,3,4) == 9, \"Should be 9\"\nassert perimeter(3,4,5) == 12, \"Should be 12\"\nassert perimeter(1,1,1) == 3, \"Should be 3\""
    },
    {
      "rank": 65,
      "score": 8.0,
      "candidate": "def perimeter(side_a, side_b, side_c):\n    return side_a + side_b + side_c\n\n\nprint(perimeter(3, 4, 5))"
    },
    {
      "rank": 66,
      "score": 8.0,
      "candidate": "from typing import Union\n\n\ndef find_perimeter(a: Union[int, float], b: Union[int, float], c: Union[int, float]) -> Union[int, float]:\n    return a + b + c"
    },
    {
      "rank": 67,
      "score": 8.0,
      "candidate": "def perimeter(a, b, c):\n    return a + b + c\n\n\nassert perimeter(3, 4, 5) == 12, \"Should be 12\"\nassert perimeter(3, 5, 7) == 15, \"Should be 15\""
    },
    {
      "rank": 68,
      "score": 8.0,
      "candidate": "def perimeter(a, b, c):\n    return a + b + c\n\nassert perimeter(3, 4, 5) == 12"
    },
    {
      "rank": 69,
      "score": 8.0,
      "candidate": "def perimeter(a, b, c):\n    \"\"\"\n    >>> perimeter(3, 4, 5)\n    12\n    \"\"\"\n    return a + b + c\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 70,
      "score": 8.0,
      "candidate": "from unittest import TestCase\n\n\ndef perimeter(a, b, c):\n    return a + b + c\n\n\nclass TestPerimeter(TestCase):\n    def test_perimeter(self):\n        assert perimeter(1, 1, 1) == 3"
    },
    {
      "rank": 71,
      "score": 8.0,
      "candidate": "def perimeter(a, b, c):\n    return a + b + c\n\nif __name__ == '__main__':\n    a = float(input('a = '))\n    b = float(input('b = '))\n    c = float(input('c = '))\n    print(f'The perimeter of a triangle with sides of length {a}, {b}, {c} is {perimeter(a, b, c)}')"
    },
    {
      "rank": 72,
      "score": 8.0,
      "candidate": "def triangle_perimeter(a, b, c):\n    return a + b + c\n\n\nprint(triangle_perimeter(3, 5, 7))"
    },
    {
      "rank": 73,
      "score": 8.0,
      "candidate": "def triangle_perimeter(a, b, c):\n    return a + b + c\n\n\nif __name__ == '__main__':\n    print(triangle_perimeter(3, 4, 5))"
    },
    {
      "rank": 74,
      "score": 8.0,
      "candidate": "def perimeter_triangle(a, b, c):\n    return a + b + c\n\ndef test_perimeter_triangle():\n    assert perimeter_triangle(3, 4, 5) == 12\n    assert perimeter_triangle(1, 1, 1) == 3\n    assert perimeter_triangle(5, 6, 6) == 18\n\nif __name__ == '__main__':\n    test_perimeter_triangle()"
    },
    {
      "rank": 75,
      "score": 8.0,
      "candidate": "def triangle_perimeter(a, b, c):\n    return a + b + c\n\n\nassert triangle_perimeter(1, 2, 2) == 5\nassert triangle_perimeter(3, 4, 4) == 13"
    },
    {
      "rank": 76,
      "score": 8.0,
      "candidate": "def perimeter(a, b, c):\n    return (a + b + c)\n\nassert perimeter(3, 4, 5) == 12, \"Should be 12\"\nassert perimeter(5, 4, 3) == 12, \"Should be 12\"\nassert perimeter(10, 10, 10) == 30, \"Should be 30\"\nassert perimeter(2, 2, 2) == 6, \"Should be 6\""
    },
    {
      "rank": 77,
      "score": 1.0,
      "candidate": "def perimeter(a: int, b: int, c: int) -> int:\n    return a + b + c\n\n\nif __name__ == \"__main__\":\n    print(perimeter(3, 4, 5))"
    },
    {
      "rank": 78,
      "score": 1.0,
      "candidate": "def find_perimeter(a: int, b: int, c: int) -> int:\n    \"\"\"\n    >>> find_perimeter(1, 2, 2)\n    5\n    >>> find_perimeter(7, 2, 5)\n    18\n    >>> find_perimeter(1, 2, 1)\n    Traceback (most recent call last):\n        ...\n    ValueError: Sides must be positive integers.\n    >>> find_perimeter(1, 1, 1)\n    Traceback (most recent call last):\n        ...\n    ValueError: Sides must be positive integers.\n    >>> find_perimeter(-2, 2, 2)\n    Traceback (most recent call last):\n        ...\n    ValueError: Sides must be positive integers.\n    \"\"\"\n    if a <= 0 or b <= 0 or c <= 0:\n        raise ValueError(\"Sides must be positive integers.\")\n    return (a + b + c) - min(a, b, c) * 2\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 79,
      "score": 1.0,
      "candidate": "def perimeter_triangle(side_a: int, side_b: int, side_c: int) -> int:\n    \"\"\"\n    >>> perimeter_triangle(3, 4, 5)\n    12\n    \"\"\"\n    return side_a + side_b + side_c\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 80,
      "score": 1.0,
      "candidate": "def triangle_perimeter(a: int, b: int, c: int) -> int:\n    \"\"\"\n    >>> triangle_perimeter(3, 4, 5)\n    12\n    \"\"\"\n    return (a + b + c) * 2\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 81,
      "score": 1.0,
      "candidate": "def triangle_perimeter(a: int, b: int, c: int) -> int:\n    \"\"\"\n    >>> triangle_perimeter(10, 15, 20)\n    50\n    \"\"\"\n    return a + b + c\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 82,
      "score": 1.0,
      "candidate": "def find_perimeter(a, b, c):\n    \"\"\"\n    :param a: first length\n    :param b: second length\n    :param c: third length\n    :return: perimeter\n    \"\"\"\n    return a + b + c\n\n\nprint(find_perimeter(3, 4, 5))"
    },
    {
      "rank": 83,
      "score": 1.0,
      "candidate": "def find_perimeter(side1, side2, side3):\n    return side1 + side2 + side3\n\n\ndef test_perimeter():\n    \"\"\"\n    >>> find_perimeter(1, 2, 2)\n    5\n    >>> find_perimeter(7, 2, 5)\n    16\n    \"\"\"\n    pass\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 84,
      "score": 1.0,
      "candidate": "def find_perimeter(length_a, length_b, length_c):\n    return length_a + length_b + length_c\n\n# Tests\nprint(find_perimeter(3, 4, 5))\nprint(find_perimeter(1, 2, 3))\n\n\"\"\"\nWrite a function to find the area of a triangle.\n\"\"\"\n\ndef find_area(length_a, length_b, length_c):\n    s = (length_a + length_b + length_c) / 2\n    return (s*(s-length_a)*(s-length_b)*(s-length_c))**0.5\n\n# Tests\nprint(find_area(3, 4, 5))\nprint(find_area(1, 2, 3))"
    },
    {
      "rank": 85,
      "score": 1.0,
      "candidate": "def find_perimeter(a: int, b: int, c: int) -> int:\n    \"\"\"\n    >>> find_perimeter(1, 2, 3)\n    6\n    \"\"\"\n    return a + b + c\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 86,
      "score": 1.0,
      "candidate": "def perimeter(a, b, c):\n    return a + b + c\n\n\ndef test_perimeter():\n    assert perimeter(3, 4, 5) == 12\n    assert perimeter(6, 7, 8) == 20\n    assert perimeter(10, 2, 3) == 15"
    },
    {
      "rank": 87,
      "score": 1.0,
      "candidate": "def perimeter(a: int, b: int, c: int) -> int:\n    \"\"\"\n    >>> perimeter(1, 2, 3)\n    6\n    >>> perimeter(10, 20, 30)\n    60\n    \"\"\"\n    return a + b + c\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 88,
      "score": 1.0,
      "candidate": "def triangle_perimeter(a, b, c):\n    return a + b + c\n\n\"\"\"\nWrite a function to find the area of a triangle.\n\"\"\"\n\ndef triangle_area(a, b, c):\n    p = triangle_perimeter(a, b, c) / 2\n    return (p * (p - a) * (p - b) * (p - c)) ** 0.5\n\n\"\"\"\nWrite a function to find the circumference of a circle.\n\"\"\"\n\ndef circle_circumference(r):\n    return 2 * 3.14 * r\n\n\"\"\"\nWrite a function to find the area of a circle.\n\"\"\"\n\ndef circle_area(r):\n    return 3.14 * r ** 2\n\n\"\"\"\nWrite a function to find the average of an array of numbers.\n\"\"\"\n\ndef average(array):\n    return sum(array) / len(array)\n\n\"\"\"\nWrite a function to find the factorial of a number.\n\"\"\"\n\ndef factorial(n):\n    if n == 1 or n == 0:\n        return 1\n    else:\n        return n * factorial(n - 1)\n\n\"\"\"\nWrite a function to find the greatest common divisor of two numbers.\n\"\"\"\n\ndef gcd(a, b):\n    if a == 0:\n        return b\n    return gcd(b % a, a)\n\n\"\"\"\nWrite a function to find the least common multiple of two numbers.\n\"\"\"\n\ndef lcm(a, b):\n    if a == 0 or b == 0:\n        return 0\n    return (a // gcd(a, b)) * b\n\n\"\"\"\nWrite a function to find the sum of an array of numbers.\n\"\"\"\n\ndef sum(array):\n    total = 0\n    for i in array:\n        total += i\n    return total\n\n\"\"\"\nWrite a function to find the difference between the greatest and least number of an array.\n\"\"\"\n\ndef difference(array):\n    return max(array) - min(array)\n\n\"\"\"\nWrite a function to find the"
    },
    {
      "rank": 89,
      "score": 1.0,
      "candidate": "def find_perimeter(side1: int, side2: int, side3: int) -> int:\n    \"\"\"\n    >>> find_perimeter(3, 4, 5)\n    12\n    \"\"\"\n    return 2 * (side1 + side2 + side3) - side1 - side2 - side3\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 90,
      "score": 1.0,
      "candidate": "def perimeter(a, b, c):\n    return a + b + c\n\n\nassert perimeter(1, 1, 1) == 3, \"Should be 3\"\nassert perimeter(1, 2, 3) == 6, \"Should be 6\"\nassert perimeter(1, 2, 1) == 5, \"Should be 5\"\nassert perimeter(1, 3, 2) == 6, \"Should be 6\"\nassert perimeter(2, 1, 3) == 6, \"Should be 6\"\nassert perimeter(2, 3, 1) == 5, \"Should be 5\"\nassert perimeter(3, 2, 1) == 5, \"Should be 5\"\nassert perimeter(3, 1, 2) == 6, \"Should be 6\"\nassert perimeter(3, 1, 1) == 4, \"Should be 4\"\nassert perimeter(2, 2, 2) == 6, \"Should be 6\""
    },
    {
      "rank": 91,
      "score": 1.0,
      "candidate": "def perimeter(a, b, c):\n    return a + b + c\n\n\ndef test_perimeter():\n    assert perimeter(1, 2, 2) == 5\n    assert perimeter(7, 2, 5) == 16"
    },
    {
      "rank": 92,
      "score": 1.0,
      "candidate": "def perimeter(a, b, c):\n    return a + b + c\n\ndef test_perimeter():\n    assert perimeter(3, 4, 5) == 12\n    assert perimeter(1, 2, 2) == 5"
    },
    {
      "rank": 93,
      "score": 1.0,
      "candidate": "def perimeter_of_triangle(a, b, c):\n    return a + b + c\n\n\"\"\"\nWrite a function to find the area of a triangle.\n\"\"\"\n\ndef area_of_triangle(a, b, c):\n    p = perimeter_of_triangle(a, b, c)\n    s = (p/2)\n    return (s*(s-a)*(s-b)*(s-c))**0.5\n\n\"\"\"\nWrite a function to find the perimeter of a rectangle.\n\"\"\"\n\ndef perimeter_of_rectangle(a, b):\n    return 2*(a+b)\n\n\"\"\"\nWrite a function to find the area of a rectangle.\n\"\"\"\n\ndef area_of_rectangle(a, b):\n    return a*b\n\n\"\"\"\nWrite a function to find the perimeter of a square.\n\"\"\"\n\ndef perimeter_of_square(a):\n    return 4*a\n\n\"\"\"\nWrite a function to find the area of a square.\n\"\"\"\n\ndef area_of_square(a):\n    return a*a\n\n\"\"\"\nWrite a function to find the perimeter of a parallelogram.\n\"\"\"\n\ndef perimeter_of_parallelogram(a, b):\n    return 2*(a+b)\n\n\"\"\"\nWrite a function to find the area of a parallelogram.\n\"\"\"\n\ndef area_of_parallelogram(a, b):\n    return a*b\n\n\"\"\"\nWrite a function to find the perimeter of a rhombus.\n\"\"\"\n\ndef perimeter_of_rhombus(a, b):\n    return 4*a\n\n\"\"\"\nWrite a function to find the area of a rhombus.\n\"\"\"\n\ndef area_of_rhombus(a, b):\n    return (a*b)/2\n\n\"\"\"\nWrite a function to find the perimeter of a trapezium.\n\"\"\"\n\ndef perimeter_of_trapezium(a, b, c):\n    return a+b+c\n\n\"\"\"\nWrite a function to find the area of a"
    },
    {
      "rank": 94,
      "score": 1.0,
      "candidate": "def triangle_perimeter(side1, side2, side3):\n    return side1 + side2 + side3\n\n\n# Pybites solution\n\n\ndef triangle_perimeter2(a, b, c):\n    return sum((a, b, c))"
    },
    {
      "rank": 95,
      "score": 1.0,
      "candidate": "def perimeter(a, b, c):\n    return (a + b + c)\n\ndef test_cases():\n    \"\"\"\n    Some useful test cases for the perimeter function are listed below\n    \"\"\"\n    assert perimeter(3, 4, 5) == 12\n    assert perimeter(2, 3, 4) == 10\n    print(\"Test Success!\")\n\ntest_cases()"
    },
    {
      "rank": 96,
      "score": 1.0,
      "candidate": "def find_perimeter(side1: int, side2: int, side3: int) -> int:\n    \"\"\"\n    >>> find_perimeter(3, 4, 5)\n    12\n    >>> find_perimeter(1, 2, 3)\n    5\n    >>> find_perimeter(5, 4, 3)\n    12\n    \"\"\"\n    return 2 * (side1 + side2 + side3) - (side1 + side2 + side3)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 97,
      "score": 1.0,
      "candidate": "def find_perimeter(a, b, c):\n    return a + b + c\n\n\ndef test_perimeter():\n    assert find_perimeter(3, 4, 5) == 12\n    assert find_perimeter(2, 2, 2) == 6\n    assert find_perimeter(10, 10, 10) == 30\n    assert find_perimeter(1, 1, 1) == 3"
    },
    {
      "rank": 98,
      "score": 1.0,
      "candidate": "def triangle_perimeter(a, b, c):\n    return a + b + c\n\nassert(triangle_perimeter(3, 4, 5) == 12)\nassert(triangle_perimeter(4, 5, 6) == 15)\nassert(triangle_perimeter(5, 6, 7) == 18)\n\n\"\"\"\nWrite a function to find the area of a triangle.\n\"\"\"\n\ndef triangle_area(a, b, c):\n    s = (a + b + c) / 2\n    return (s * (s - a) * (s - b) * (s - c)) ** 0.5\n\nassert(triangle_area(3, 4, 5) == 6)\nassert(triangle_area(4, 5, 6) == 9)\nassert(triangle_area(5, 6, 7) == 12)\n\n\"\"\"\nWrite a function to find the perimeter and area of a triangle.\n\"\"\"\n\ndef triangle_stats(a, b, c):\n    return [triangle_perimeter(a, b, c), triangle_area(a, b, c)]\n\nassert(triangle_stats(3, 4, 5) == [12, 6])\nassert(triangle_stats(4, 5, 6) == [15, 9])\nassert(triangle_stats(5, 6, 7) == [18, 12])\n\n\"\"\"\nWrite a function to find the perimeter and area of a triangle.\n\"\"\"\n\ndef triangle_stats(a, b, c):\n    return [triangle_perimeter(a, b, c), triangle_area(a, b, c)]\n\nassert(triangle_stats(3, 4, 5) == [12, 6])\nassert(triangle_stats(4, 5, 6) == [15, 9])\nassert(triangle_stats(5, 6, 7) == [18, 12])\n\n\"\"\"\nWrite a function to find the perimeter and area of a triangle.\n\"\"\"\n\ndef triangle_stats(a, b"
    },
    {
      "rank": 99,
      "score": 1.0,
      "candidate": "def find_perimeter(side_a, side_b, side_c):\n    return side_a + side_b + side_c\n\n\nif __name__ == '__main__':\n    assert find_perimeter(3, 4, 5) == 12, \"Triangle perimeter incorrect\"\n    assert find_perimeter(1, 2, 3) == 6, \"Triangle perimeter incorrect\"\n    assert find_perimeter(7, 8, 9) == 24, \"Triangle perimeter incorrect\""
    },
    {
      "rank": 100,
      "score": 1.0,
      "candidate": "def find_perimeter(a, b, c):\n    return a + b + c\n\n\ndef test_perimeter():\n    assert find_perimeter(3, 4, 5) == 12\n    assert find_perimeter(5, 4, 3) == 12\n    assert find_perimeter(3, 5, 4) == 12\n    assert find_perimeter(4, 3, 5) == 12\n    assert find_perimeter(4, 5, 3) == 12\n    assert find_perimeter(5, 3, 4) == 12"
    }
  ]
}