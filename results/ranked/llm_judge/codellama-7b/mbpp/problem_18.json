{
  "timestamp": "2025-09-14T22:26:20.024955",
  "method": "improved_llm_judge",
  "judge_model": "codellama/CodeLlama-7b-Python-hf",
  "target_model": "codellama-7b",
  "dataset": "mbpp",
  "problem_number": 18,
  "total_candidates": 100,
  "results": [
    {
      "rank": 1,
      "score": 10.0,
      "candidate": "from collections import defaultdict\n\n\ndef odd_occurrence(arr):\n    count = defaultdict(int)\n    for i in arr:\n        count[i] += 1\n    for i in count:\n        if count[i] % 2 != 0:\n            return i\n    return -1\n\n\ndef main():\n    arr = [3, 3, 7, 7, 7, 8, 8, 1, 1]\n    print(odd_occurrence(arr))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 2,
      "score": 10.0,
      "candidate": "from collections import Counter\n\n\ndef odd_one_out(arr):\n    c = Counter(arr)\n    return list(c.keys())[list(c.values()).index(1)]\n\n\ndef main():\n    arr = [3, 3, 7, 2, 3, 2, 7, 4, 7, 4, 2]\n    print(odd_one_out(arr))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 3,
      "score": 10.0,
      "candidate": "def odd_element(arr):\n    odd_element = 0\n    for i in arr:\n        odd_element = odd_element ^ i\n    return odd_element\n\n\ndef main():\n    arr = [1, 1, 2, 2, 3, 4, 5, 6, 6, 6]\n    print(odd_element(arr))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 4,
      "score": 10.0,
      "candidate": "def odd_occurring_element(input_list):\n    \"\"\"\n    This function takes a list as a input and returns the element which occurs odd number of times\n    >>> odd_occurring_element([1, 2, 3, 4, 5, 6, 5])\n    6\n    >>> odd_occurring_element([1, 2, 3, 4, 4, 3, 2, 1])\n    4\n    >>> odd_occurring_element([1, 2, 3, 4, 5, 6, 7, 8, 9])\n    1\n    >>> odd_occurring_element([2, 3, 4, 5, 6, 7, 8, 9])\n    Traceback (most recent call last):\n        ...\n    ValueError: The list doesn't have an element occurring odd number of times\n    \"\"\"\n    if len(input_list) == 1:\n        return input_list[0]\n    elif len(input_list) == 0:\n        raise ValueError(\"The list doesn't have an element occurring odd number of times\")\n    else:\n        x = input_list[0]\n        for i in input_list:\n            if input_list.count(i) % 2 != 0:\n                x = i\n        return x\n\n\ndef main():\n    \"\"\"\n    This is the main function used to call the other functions and calculate the time taken to execute them.\n    Do not modify this code.\n    \"\"\"\n    import time\n    import sys\n\n    input_list = [int(item) for item in sys.argv[1].split(\",\")]\n\n    start_time = time.time()\n    print(odd_occurring_element(input_list))\n    end_time = time.time()\n\n    print(f\"Total time taken: {end_time - start_time} seconds\")\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()\n    main()"
    },
    {
      "rank": 5,
      "score": 10.0,
      "candidate": "def odd_one_out(list1):\n    odd = 0\n    for i in list1:\n        odd = odd ^ i\n    return odd\n\ndef main():\n    list1 = [1,2,3,4,5,6,5,6,7,8,9,8,7,7,7,7]\n    print(odd_one_out(list1))\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 6,
      "score": 10.0,
      "candidate": "def find_odd_occurring_element(arr):\n    res = 0\n    for i in range(len(arr)):\n        res = res ^ arr[i]\n    return res\n\n\ndef main():\n    arr = [1, 2, 3, 2, 1, 4, 4, 4, 1]\n    res = find_odd_occurring_element(arr)\n    print(f\"The element occuring odd number of times is {res}\")\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 7,
      "score": 10.0,
      "candidate": "def odd_occurence_element(arr):\n    n = len(arr)\n    for i in range(n):\n        count = 0\n        for j in range(n):\n            if arr[i] == arr[j]:\n                count += 1\n        if count % 2 == 1:\n            return arr[i]\n    return -1\n\n\nprint(odd_occurence_element([2, 3, 5, 4, 5, 2, 4, 3, 5, 2, 4, 4]))"
    },
    {
      "rank": 8,
      "score": 10.0,
      "candidate": "def odd_occurence(array):\n    array_set = set(array)\n    print(array_set)\n    for i in array_set:\n        count = 0\n        for j in array:\n            if i == j:\n                count += 1\n        if count % 2 != 0:\n            return i\n\n\ndef main():\n    array = [1, 2, 2, 3, 3, 4, 4, 4, 5, 5, 5, 5, 6, 6, 6, 6, 6]\n    print(odd_occurence(array))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 9,
      "score": 10.0,
      "candidate": "def find_odd(l):\n    res = 0\n    for i in l:\n        res = res ^ i\n    return res\n\n\ndef main():\n    l = [1, 2, 1, 2, 1, 3]\n    print(find_odd(l))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 10,
      "score": 10.0,
      "candidate": "def odd_occurrence(arr):\n    res = 0\n    for i in arr:\n        res = res ^ i\n    return res\n\n\ndef main():\n    arr = [1, 2, 3, 4, 5, 3, 4, 5, 3, 4, 5]\n    arr2 = [1, 1, 1, 2, 2, 2, 2]\n    arr3 = [1, 1, 1, 1, 2, 2, 2, 2, 3]\n    print(odd_occurrence(arr))\n    print(odd_occurrence(arr2))\n    print(odd_occurrence(arr3))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 11,
      "score": 10.0,
      "candidate": "def odd_element(arr):\n    res = 0\n    for i in arr:\n        res = res ^ i\n    return res\n\n\nprint(odd_element([1, 2, 2, 2, 2, 2, 3, 4, 5, 6, 6, 6, 7, 8, 9, 10]))"
    },
    {
      "rank": 12,
      "score": 10.0,
      "candidate": "def odd_occurrence(arr):\n    \"\"\"\n    >>> odd_occurrence([1, 1, 2, 2, 2, 2, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4])\n    1\n    >>> odd_occurrence([1, 1, 2, 2, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4])\n    2\n    \"\"\"\n    res = 0\n    for i in arr:\n        res = res ^ i\n    return res\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 13,
      "score": 10.0,
      "candidate": "def odd_element(nums):\n    \"\"\"\n    >>> odd_element([1, 2, 3, 4, 2, 3, 4, 3, 4])\n    1\n    >>> odd_element([1, 2, 3, 4, 2, 3, 4, 3, 4, 3, 4, 3, 4])\n    1\n    >>> odd_element([2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,"
    },
    {
      "rank": 14,
      "score": 10.0,
      "candidate": "def odd_occurrence(arr):\n    n = len(arr)\n    ans = 0\n    for i in range(n):\n        ans ^= arr[i]\n    return ans\n\n\ndef main():\n    arr = [1, 2, 2, 3, 3, 3, 4, 4, 4, 4]\n    a = odd_occurrence(arr)\n    print(a)\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 15,
      "score": 10.0,
      "candidate": "def odd_occurrence(arr):\n    res = 0\n    for i in arr:\n        res ^= i\n    return res\n\n\ndef main():\n    arr = [1, 2, 3, 2, 1, 3, 1, 2]\n    print(odd_occurrence(arr))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 16,
      "score": 9.996625693815517,
      "candidate": "def odd_occurring(arr):\n    n = len(arr)\n    res = 0\n    for i in range(n):\n        res = res ^ arr[i]\n    return res\n\n\ndef main():\n    arr = [1, 1, 2, 2, 3]\n    print(odd_occurring(arr))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 17,
      "score": 9.965433924707204,
      "candidate": "def odd_occurrence(arr):\n    x = 0\n    for i in arr:\n        x ^= i\n    return x\n\n\ndef main():\n    arr = [1, 2, 3, 1, 2, 1, 2, 3, 2, 3, 3]\n    arr1 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    print(arr, \"has\", odd_occurrence(arr), \"occurring odd number of times.\")\n    print(arr1, \"has\", odd_occurrence(arr1), \"occurring odd number of times.\")\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 18,
      "score": 9.943555924878366,
      "candidate": "def odd_occurrence(arr):\n    res = 0\n    for i in arr:\n        res ^= i\n    return res\n\n\ndef odd_occurrence_efficient(arr):\n    arr.sort()\n    count = 0\n    res = arr[0]\n    for i in range(1, len(arr)):\n        if arr[i] != arr[i - 1]:\n            if count % 2 == 0:\n                res = arr[i]\n            count += 1\n    return res\n\n\ndef main():\n    arr_input = [1, 2, 3, 4, 4, 4, 4, 5, 6, 6, 6, 6, 6, 7, 8, 9]\n    a = odd_occurrence_efficient(arr_input)\n    print(a)\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 19,
      "score": 9.927076562551681,
      "candidate": "def odd_occurrence(arr):\n    \"\"\"\n    >>> odd_occurrence([1, 2, 3, 4, 5, 3, 4, 5, 6, 7, 3])\n    1\n    >>> odd_occurrence([2, 3, 4, 5, 6, 7, 3])\n    2\n    >>> odd_occurrence([1, 2, 3, 4, 5, 6, 7, 3])\n    1\n    >>> odd_occurrence([1, 2, 3, 4, 5, 6, 7, 3, 4, 5, 6, 7])\n    1\n    >>> odd_occurrence([1, 2, 3, 4, 5, 6, 7, 3, 4, 5, 6, 7, 3])\n    1\n    \"\"\"\n\n    res = 0\n    for i in arr:\n        res = res ^ i\n    return res\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 20,
      "score": 9.903729429895922,
      "candidate": "def odd_occurring(l):\n    for i in l:\n        if l.count(i) % 2 != 0:\n            return i\n\n\nprint(odd_occurring([1, 2, 3, 3, 4, 5, 6, 6, 6, 7, 8, 9, 9]))"
    },
    {
      "rank": 21,
      "score": 9.880206440538677,
      "candidate": "def odd_occurence(arr):\n    \"\"\"\n    >>> arr = [1, 1, 2, 1, 2, 2, 3]\n    >>> odd_occurence(arr)\n    3\n    \"\"\"\n    count = 0\n    for i in arr:\n        count ^= i\n    return count\n\n\ndef odd_occurence2(arr):\n    \"\"\"\n    >>> arr = [1, 1, 2, 1, 2, 2, 3]\n    >>> odd_occurence2(arr)\n    3\n    \"\"\"\n    count = 0\n    for i in arr:\n        count = count ^ i\n    return count\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 22,
      "score": 9.746792219916394,
      "candidate": "def odd_occurrence(arr):\n    \"\"\"\n    This function takes a list as an input\n    and return the element that occurs odd number of times.\n    \"\"\"\n    if len(arr) == 0:\n        return -1\n    elif len(arr) == 1:\n        return arr[0]\n\n    res = 0\n    for i in arr:\n        res = res ^ i\n    return res\n\n\ndef main():\n    \"\"\"\n    Driver function\n    \"\"\"\n    print(\"The element that occurs odd number of times is \", odd_occurrence([1, 2, 2, 3, 4, 4, 4, 5, 5, 5, 5, 5, 5]))\n    print(\"The element that occurs odd number of times is \", odd_occurrence([1, 2, 3, 4, 4, 4, 4, 5, 5, 5, 5, 5, 5]))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 23,
      "score": 9.712251605644424,
      "candidate": "def odd_occurence(array):\n    count_map = dict()\n\n    for i in array:\n        if i in count_map:\n            count_map[i] += 1\n        else:\n            count_map[i] = 1\n\n    for key, value in count_map.items():\n        if value % 2 == 1:\n            return key\n\n\ndef main():\n    array = [1, 2, 3, 2, 1, 4, 5, 3, 2, 6, 7, 4, 2, 4, 5, 6, 8, 6, 5, 5, 5]\n    print(odd_occurence(array))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 24,
      "score": 9.643812953446636,
      "candidate": "def odd_occurence(array):\n    count = 0\n    for i in range(0, len(array)):\n        count = count ^ array[i]\n    return count\n\n\nif __name__ == \"__main__\":\n    array = [1,2,3,4,4,4,5,6,7,7,7,7,7,8,9,9]\n    print(odd_occurence(array))"
    },
    {
      "rank": 25,
      "score": 9.370583536698913,
      "candidate": "def odd_occurring_element(arr):\n    \"\"\"\n    O(n) & O(1)\n    \"\"\"\n    # O(1)\n    res = 0\n    # O(1)\n    for i in range(len(arr)):\n        res ^= arr[i]\n    return res\n\n\nif __name__ == \"__main__\":\n    arr = [1, 2, 2, 2, 3, 4, 5, 2, 2, 2, 6]\n    print(odd_occurring_element(arr))"
    },
    {
      "rank": 26,
      "score": 9.345063723977564,
      "candidate": "def odd_occurrence_element(arr):\n    \"\"\"\n    time complexity: O(n)\n    space complexity: O(1)\n    \"\"\"\n    res = 0\n    for i in arr:\n        res = res ^ i\n    return res\n\n\ndef main():\n    arr = [1, 2, 2, 3, 4, 4, 4, 5, 6, 6, 6]\n    print(odd_occurrence_element(arr))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 27,
      "score": 9.205959372648458,
      "candidate": "def odd_occurrence(array):\n    result = 0\n    for i in array:\n        result ^= i\n    return result\n\n\ndef odd_occurrence_hash(array):\n    hash_table = {}\n    for i in array:\n        if i in hash_table:\n            hash_table[i] += 1\n        else:\n            hash_table[i] = 1\n    for key in hash_table.keys():\n        if hash_table[key] % 2 != 0:\n            return key\n    return -1\n\n\ndef odd_occurrence_sort(array):\n    array.sort()\n    for i in range(0, len(array), 2):\n        if i == len(array) - 1:\n            return array[i]\n        if array[i] != array[i + 1]:\n            return array[i]\n    return -1\n\n\nprint(odd_occurrence([1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4]))\nprint(odd_occurrence_hash([1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4]))\nprint(odd_occurrence_sort([1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4]))"
    },
    {
      "rank": 28,
      "score": 9.177268828905222,
      "candidate": "def odd_occurrence_element(arr):\n    arr = sorted(arr)\n    index = 0\n    while index < len(arr):\n        if arr[index] != arr[index + 1]:\n            return arr[index]\n        index += 2\n    return None\n\n\ndef odd_occurrence_element_2(arr):\n    \"\"\"\n    :param arr: list of integers\n    :return: integer\n    \"\"\"\n    # Dictionary to store the frequency of the element\n    dict = {}\n    for i in arr:\n        if i in dict:\n            dict[i] += 1\n        else:\n            dict[i] = 1\n    # Finding the element with odd frequency\n    for i in dict:\n        if dict[i] % 2 != 0:\n            return i\n    return None\n\n\ndef main():\n    arr_input = [1, 1, 2, 3, 3, 3, 4, 4, 4, 4]\n    a2 = odd_occurrence_element_2(arr_input)\n    print(a2)\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 29,
      "score": 8.95994420569242,
      "candidate": "def odd_occurring_element(arr):\n    result = 0\n    for i in arr:\n        result = result ^ i\n    return result\n\nprint(odd_occurring_element([1, 2, 3, 4, 2, 1, 3, 3]))\nprint(odd_occurring_element([1, 1, 2, 2, 3, 3, 3]))\nprint(odd_occurring_element([1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,"
    },
    {
      "rank": 30,
      "score": 8.946210893390457,
      "candidate": "def odd_occurring_element(arr):\n    n = len(arr)\n    result = 0\n\n    for i in range(n):\n        result ^= arr[i]\n    return result\n\n\narr = [1, 2, 3, 4, 1, 2, 3, 4, 1]\nprint(odd_occurring_element(arr))\n\narr = [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4]\nprint(odd_occurring_element(arr))\n\narr = [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4,"
    },
    {
      "rank": 31,
      "score": 8.932217008005624,
      "candidate": "def odd_occurring_element(arr):\n    n = len(arr)\n    res = 0\n\n    for i in range(n):\n        res ^= arr[i]\n    return res\n\n\ndef main():\n    arr = [1, 2, 3, 2, 1, 1, 3, 4, 2]\n    print(odd_occurring_element(arr))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 32,
      "score": 8.910084504002544,
      "candidate": "def odd_element(arr):\n    result = 0\n    for i in arr:\n        result = result ^ i\n    return result\n\n\nprint(odd_element([1, 2, 3, 2, 1, 3, 4, 5]))"
    },
    {
      "rank": 33,
      "score": 8.902145503295483,
      "candidate": "def odd_occurring(arr):\n    ans = 0\n    for i in range(len(arr)):\n        ans = ans ^ arr[i]\n    return ans\n\n\narr = [3, 3, 2, 4, 2, 4, 5, 6, 5, 6, 6, 6]\nprint(odd_occurring(arr))"
    },
    {
      "rank": 34,
      "score": 8.855395696632057,
      "candidate": "def odd_occurrence(arr):\n    result = 0\n\n    for num in arr:\n        result = result ^ num\n\n    return result\n\n\ndef main():\n    arr = [1, 2, 3, 2, 1, 1, 3, 3]\n    print(odd_occurrence(arr))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 35,
      "score": 8.81367773444215,
      "candidate": "def odd_occurence(arr):\n    result = 0\n    for i in arr:\n        result ^= i\n    return result\n\n\ndef main():\n    arr = [1, 2, 3, 4, 5, 6, 7, 8, 1, 1, 2, 3, 4, 5, 6, 7, 8, 1, 1, 2, 3, 4, 5, 6, 7, 8]\n    print(odd_occurence(arr))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 36,
      "score": 8.76828871349479,
      "candidate": "def odd_occurrence(a):\n    c = 0\n    for i in range(0, len(a)):\n        c = c ^ a[i]\n    return c\n\n\ndef main():\n    a = [1, 2, 2, 3, 3, 3, 4, 5, 5, 5, 5, 6, 6, 6]\n    print(odd_occurrence(a))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 37,
      "score": 8.625262456968262,
      "candidate": "def odd_occurrence(arr):\n    res = 0\n    for i in arr:\n        res ^= i\n    return res\n\ndef odd_occurrence_2(arr):\n    res = 0\n    for i in arr:\n        res = res ^ i\n    return res\n\nprint(odd_occurrence([1,2,3,4,3,3,3,4,2,1]))"
    },
    {
      "rank": 38,
      "score": 8.625142247198651,
      "candidate": "def odd_occurence(arr):\n    for i in range(0, len(arr)):\n        count = 0\n        for j in range(0, len(arr)):\n            if arr[i] == arr[j]:\n                count += 1\n        if count % 2 != 0:\n            return arr[i]\n\n\narr = [1, 2, 3, 4, 3, 5, 6, 4, 5, 6, 5, 6]\nprint(odd_occurence(arr))"
    },
    {
      "rank": 39,
      "score": 8.623000730200317,
      "candidate": "def odd_occurence(arr):\n    for i in arr:\n        if arr.count(i) % 2 == 1:\n            return i\n\n\narr = [2, 3, 4, 5, 2, 3, 4, 5, 2, 3, 4, 5, 2]\nprint(odd_occurence(arr))"
    },
    {
      "rank": 40,
      "score": 8.616253589228675,
      "candidate": "def odd_occurring_element(arr):\n    arr.sort()\n    i = 0\n    while i < len(arr):\n        if i == 0:\n            count = 1\n        else:\n            count = count + 1\n        if i == len(arr) - 1:\n            count = count - 1\n        if count == 1:\n            return arr[i]\n        i = i + 2\n    return -1\n\n\narr = [1, 2, 3, 4, 5, 5, 3, 3, 3, 2, 3, 2, 1, 2, 3, 4, 5, 6, 6, 5, 4, 3, 2, 1]\nprint(odd_occurring_element(arr))"
    },
    {
      "rank": 41,
      "score": 8.610076160146226,
      "candidate": "def odd_element(a):\n    count = 0\n    for i in a:\n        count ^= i\n    return count\n\nprint(odd_element([1, 1, 2, 3, 4, 2]))\nprint(odd_element([1, 2, 3, 4, 4, 3]))\nprint(odd_element([1, 1, 1, 2, 2, 2]))"
    },
    {
      "rank": 42,
      "score": 8.606486429141842,
      "candidate": "def odd_one(l):\n    d = {}\n    for i in l:\n        if i not in d:\n            d[i] = 1\n        else:\n            d[i] += 1\n    for i in l:\n        if d[i] % 2 != 0:\n            return i\n    return -1\n\n\ndef main():\n    l = [1, 2, 3, 2, 1, 3, 2, 3, 3, 3, 2, 3]\n    print(odd_one(l))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 43,
      "score": 8.60156811074208,
      "candidate": "def odd_occurence(arr):\n    \"\"\"\n    Time complexity: O(n)\n    Space complexity: O(n)\n    \"\"\"\n    if len(arr) == 0:\n        return None\n\n    hash_map = {}\n    for num in arr:\n        if num not in hash_map:\n            hash_map[num] = 1\n        else:\n            hash_map[num] += 1\n    for key, val in hash_map.items():\n        if val % 2 != 0:\n            return key\n    return None\n\n\ndef test_odd_occurence():\n    assert odd_occurence([1, 3, 5, 2, 4, 3, 2, 1, 5, 1, 6]) == 6\n    assert odd_occurence([1, 3, 5, 2, 4, 3, 2, 1, 5, 1, 6, 7, 3]) == 7\n    assert odd_occurence([1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7]) is None\n\n\nif __name__ == \"__main__\":\n    test_odd_occurence()"
    },
    {
      "rank": 44,
      "score": 8.565425580227462,
      "candidate": "def find_odd(arr):\n    count = 0\n    for i in arr:\n        count ^= i\n    return count\n\n\ndef main():\n    arr = [1, 2, 3, 4, 5, 6, 6, 6, 6, 6, 6, 6, 6, 7, 8, 9]\n    print(find_odd(arr))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 45,
      "score": 8.542875062379007,
      "candidate": "def odd_one_out(arr):\n    temp = 0\n    for i in arr:\n        temp = temp ^ i\n    return temp\n\n\nif __name__ == \"__main__\":\n    arr = [1, 2, 3, 2, 1, 1, 3, 2]\n    print(odd_one_out(arr))"
    },
    {
      "rank": 46,
      "score": 8.53012858503943,
      "candidate": "def odd_one(l):\n    ans = 0\n    for i in l:\n        ans ^= i\n    return ans\n\n\nprint(odd_one([1, 2, 3, 4, 3, 2, 1, 2]))"
    },
    {
      "rank": 47,
      "score": 8.499905739299377,
      "candidate": "from collections import Counter\n\n\ndef odd_one_out(a):\n    c = Counter(a)\n    for k, v in c.items():\n        if v % 2 != 0:\n            return k\n\n\ndef main():\n    a = [1, 1, 2, 2, 3, 3, 4, 4, 5, 5]\n    print(odd_one_out(a))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 48,
      "score": 8.490324832712195,
      "candidate": "def odd_occurrence(arr):\n    arr.sort()\n    start = 0\n    end = len(arr) - 1\n\n    while start < end:\n        mid = (start + end) // 2\n        if arr[mid] == arr[mid + 1]:\n            start = mid + 1\n        else:\n            end = mid\n    return arr[start]\n\n\ndef main():\n    arr = [1, 1, 2, 3, 3, 4, 4, 4, 5, 5]\n    print(odd_occurrence(arr))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 49,
      "score": 8.48796797856353,
      "candidate": "def find_odd_occurring_element(l):\n    \"\"\"\n    >>> find_odd_occurring_element([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1])\n    10\n    >>> find_odd_occurring_element([1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6])\n    6\n    \"\"\"\n    d = {}\n    for i in l:\n        d[i] = d.get(i, 0) + 1\n    for key, value in d.items():\n        if value % 2 == 1:\n            return key\n\n    return None\n\n\ndef find_odd_occurring_element_hash(l):\n    \"\"\"\n    >>> find_odd_occurring_element_hash([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1])\n    10\n    >>> find_odd_occurring_element_hash([1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6])\n    6\n    \"\"\""
    },
    {
      "rank": 50,
      "score": 8.426531424889468,
      "candidate": "def odd_occurrence(arr):\n    if len(arr) <= 1:\n        return arr[0]\n\n    # O(n)\n    count = {}\n    for i in arr:\n        if i in count:\n            count[i] += 1\n        else:\n            count[i] = 1\n\n    for k, v in count.items():\n        if v % 2 != 0:\n            return k\n\n\ndef odd_occurrence_optimized(arr):\n    if len(arr) <= 1:\n        return arr[0]\n\n    # O(n)\n    count = {}\n    for i in arr:\n        count[i] = count.get(i, 0) + 1\n\n    for k, v in count.items():\n        if v % 2 != 0:\n            return k\n\n\ndef main():\n    arr = [1, 1, 2, 2, 3, 3, 3, 4, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6]\n    print(odd_occurrence(arr))\n    print(odd_occurrence_optimized(arr))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 51,
      "score": 8.408439383654278,
      "candidate": "def odd_one(arr):\n    count = 0\n    for i in range(0, len(arr)):\n        count ^= arr[i]\n    return count\n\n\ndef main():\n    arr = [1, 2, 3, 4, 2, 3, 1, 5, 6, 7, 1]\n    print(odd_one(arr))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 52,
      "score": 8.386620303250325,
      "candidate": "from collections import Counter\n\n\ndef odd_one(arr):\n    count = Counter(arr)\n    for i in count.keys():\n        if count[i] % 2 != 0:\n            return i\n    return -1\n\n\ndef main():\n    arr = [1, 2, 3, 4, 2, 1, 3, 1, 3]\n    print(odd_one(arr))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 53,
      "score": 8.351614956112536,
      "candidate": "def odd_occurrence(arr):\n    return (2*sum(set(arr)) - sum(arr))\n\nprint(odd_occurrence([2, 3, 4, 2, 3, 4, 2, 3, 4, 2]))"
    },
    {
      "rank": 54,
      "score": 8.334608500525688,
      "candidate": "def odd_occurring_element(arr):\n    # We can use the property of XOR operator, if two elements are same, then\n    # xoring them will give 0, which means xoring all the elements will give 0\n    # if only one element occurs odd number of times, then the element will\n    # be left as it is.\n    odd_element = 0\n    for i in range(0, len(arr)):\n        odd_element ^= arr[i]\n    return odd_element\n\ndef main():\n    arr = [1, 2, 3, 4, 5, 1, 6, 1]\n    print(odd_occurring_element(arr))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 55,
      "score": 8.327375965969855,
      "candidate": "from collections import Counter\n\n\ndef odd_occurrence(arr: list) -> int:\n    \"\"\"\n    Returns the element occuring odd number of times.\n    \"\"\"\n    ctr = Counter(arr)\n    for key, val in ctr.items():\n        if val % 2 != 0:\n            return key\n\n\nif __name__ == \"__main__\":\n    assert odd_occurrence([1, 2, 3, 4, 5, 6, 5, 4, 3, 2, 1]) == 6"
    },
    {
      "rank": 56,
      "score": 8.327367757082776,
      "candidate": "def odd_element(a):\n    a_set = set(a)\n    for i in a_set:\n        if a.count(i) % 2 != 0:\n            return i\n    return None\n\n\ndef odd_element_2(a):\n    res = 0\n    for i in a:\n        res = res ^ i\n    return res\n\n\ndef main():\n    a = [1, 2, 3, 4, 5, 4, 3, 2, 1]\n    print(odd_element(a))\n    print(odd_element_2(a))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 57,
      "score": 8.294940769211511,
      "candidate": "def odd_occurrence(arr):\n    \"\"\"\n    :param: arr - input list\n    return: element in arr which occurs odd number of times\n    \"\"\"\n    # If arr is empty\n    if not arr:\n        return None\n\n    # Traverse through all array elements\n    # and keep track of those elements which occur odd number of times\n    odd_elem = 0\n    for i in range(len(arr)):\n        # After every iteration, odd_elem will contain the XOR of\n        # previous elements\n        odd_elem = odd_elem ^ arr[i]\n\n    return odd_elem\n\ndef odd_occurrence_2(arr):\n    \"\"\"\n    :param: arr - input list\n    return: element in arr which occurs odd number of times\n    \"\"\"\n    # If arr is empty\n    if not arr:\n        return None\n\n    # Traverse through all array elements\n    # and keep track of those elements which occur odd number of times\n    odd_elem = 0\n    for i in range(len(arr)):\n        # After every iteration, odd_elem will contain the XOR of\n        # previous elements\n        odd_elem = odd_elem ^ (i + 1)\n\n    return odd_elem\n\ndef odd_occurrence_3(arr):\n    \"\"\"\n    :param: arr - input list\n    return: element in arr which occurs odd number of times\n    \"\"\"\n    # If arr is empty\n    if not arr:\n        return None\n\n    # Traverse through all array elements\n    # and keep track of those elements which occur odd number of times\n    odd_elem = 0\n    for i in range(len(arr)):\n        # After every iteration, odd_elem will contain the XOR of\n        # previous elements\n        odd_elem = odd_elem ^ (arr[i] + 1)\n\n    return odd_elem\n\ndef odd_occurrence_4(arr):\n    \"\"\"\n    :param: arr - input list\n    return: element in arr which occurs odd number of times\n    \"\"\"\n    # If arr is empty\n    if not arr:\n        return None\n\n    # Traverse through all array elements\n    # and keep track of those elements which occur odd"
    },
    {
      "rank": 58,
      "score": 8.2938925966498,
      "candidate": "def odd_occurring_element(arr):\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(1)\n    \"\"\"\n    res = 0\n    for i in range(0, len(arr)):\n        res ^= arr[i]\n    return res\n\n\ndef main():\n    arr = [1, 2, 3, 4, 2, 1, 2, 3, 4, 5, 6, 2, 1, 2, 3, 4, 5, 6, 2, 1, 2, 3, 4, 5, 6, 2, 1, 2, 3, 4, 5, 6, 2, 1, 2, 3, 4, 5, 6]\n    print(odd_occurring_element(arr))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 59,
      "score": 8.289838256518838,
      "candidate": "def odd_occurrence(arr):\n    occ = {}\n    for i in arr:\n        if i in occ:\n            occ[i] += 1\n        else:\n            occ[i] = 1\n\n    for i in occ:\n        if occ[i] % 2 == 1:\n            return i\n\n\ndef main():\n    arr = [1, 2, 2, 3, 4, 5, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,\n           2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,\n           2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,\n           2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2"
    },
    {
      "rank": 60,
      "score": 8.214125058964552,
      "candidate": "def odd_element(arr):\n    res = 0\n    for i in arr:\n        res = res ^ i\n    return res\n\n\nprint(odd_element([1, 1, 2, 3, 3, 4, 4, 4, 5, 5]))"
    },
    {
      "rank": 61,
      "score": 8.212735598038213,
      "candidate": "def odd_occurrence(arr):\n    count = 0\n    res = 0\n    for i in range(len(arr)):\n        if arr[i] == res:\n            count -= 1\n        elif count == 0:\n            res = arr[i]\n            count += 1\n        else:\n            count -= 1\n    return res\n\n\nif __name__ == \"__main__\":\n    arr = [1,2,3,3,2,1,2,3,3,3,2,3,1,2,2]\n    print(odd_occurrence(arr))"
    },
    {
      "rank": 62,
      "score": 8.211579567659316,
      "candidate": "def odd_element(arr):\n    \"\"\"\n    Time complexity: O(n)\n    Space Complexity: O(1)\n    \"\"\"\n    if not arr:\n        return None\n\n    count = 0\n    value = None\n\n    for i in arr:\n        if count == 0:\n            value = i\n\n        if i == value:\n            count += 1\n        else:\n            count -= 1\n\n    return value"
    },
    {
      "rank": 63,
      "score": 8.209707251476969,
      "candidate": "def odd_occurring_element(arr):\n    for i in arr:\n        if arr.count(i)%2!=0:\n            return i\n\n\n\n\narr = [1,2,3,4,5,6,7,8,9,10,1,2,3,4,5,6,7,8,9,10,1,2,3,4,5,6,7,8,9,10]\nprint(odd_occurring_element(arr))"
    },
    {
      "rank": 64,
      "score": 8.193565922652176,
      "candidate": "def odd_one(arr):\n    res = 0\n    for i in arr:\n        res = res ^ i\n    return res\n\n\narr = [1, 2, 3, 2, 2, 3, 4, 5, 4, 6, 7, 6]\nprint(odd_one(arr))"
    },
    {
      "rank": 65,
      "score": 8.185309335307622,
      "candidate": "def odd_occurence(arr):\n    res = 0\n    for i in range(len(arr)):\n        res = res ^ arr[i]\n    return res\n\n\ndef main():\n    arr = [1, 2, 2, 3, 4, 4, 4, 5, 5]\n    res = odd_occurence(arr)\n    print(f\"The element occuring odd number of times is {res}\")\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 66,
      "score": 8.172253082181854,
      "candidate": "from collections import defaultdict\n\n\ndef odd_occurrence(arr):\n    freq = defaultdict(lambda: 0)\n    for i in arr:\n        freq[i] += 1\n    for k, v in freq.items():\n        if v % 2 == 1:\n            return k\n\n\nif __name__ == \"__main__\":\n    print(odd_occurrence([1, 2, 3, 2, 4, 5, 2, 4, 6, 4]))\n    print(odd_occurrence([1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 5, 5]))"
    },
    {
      "rank": 67,
      "score": 8.163300679823958,
      "candidate": "def odd_occurence(arr):\n    res = 0\n\n    for i in range(len(arr)):\n        res = res ^ arr[i]\n\n    return res\n\n\ndef odd_occurence_eff(arr):\n    arr.sort()\n    res = arr[0]\n    count = 1\n\n    for i in range(1, len(arr)):\n        if arr[i] != arr[i - 1]:\n            if count % 2 == 1:\n                res = arr[i - 1]\n            count = 1\n        else:\n            count += 1\n\n    if count % 2 == 1:\n        res = arr[len(arr) - 1]\n\n    return res\n\n\ndef main():\n    arr_input = [3, 3, 7, 3, 3, 7, 7, 7]\n    print(odd_occurence(arr_input))\n    print(odd_occurence_eff(arr_input))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 68,
      "score": 8.144125099485041,
      "candidate": "def odd_occurrence(arr: list) -> int:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(1)\n    \"\"\"\n    res = 0\n    for i in arr:\n        res = res ^ i\n    return res\n\n\ndef main():\n    arr = [2, 4, 5, 6, 7, 7, 4, 2, 4, 4, 2, 7, 5, 6, 7, 7, 2, 2, 2]\n    print(odd_occurrence(arr))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 69,
      "score": 8.143591138329747,
      "candidate": "from collections import Counter\n\n\ndef odd_one(arr):\n    count = Counter(arr)\n    for key in count:\n        if count[key] % 2 != 0:\n            return key\n\n\narr = [3, 3, 7, 7, 9, 9, 9, 11]\nprint(odd_one(arr))"
    },
    {
      "rank": 70,
      "score": 8.121884567141883,
      "candidate": "def odd_occurrence(arr):\n    \"\"\"\n    >>> odd_occurrence([1, 2, 2, 1, 3, 4, 5, 6, 4])\n    3\n    \"\"\"\n    for i in range(len(arr)):\n        arr[i] = arr[i] ^ arr[i + 1]\n    return arr[0]\n\ndef odd_occurrence_2(arr):\n    \"\"\"\n    >>> odd_occurrence_2([1, 2, 2, 1, 3, 4, 5, 6, 4])\n    3\n    \"\"\"\n    res = 0\n    for i in range(len(arr)):\n        res = res ^ arr[i]\n    return res\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 71,
      "score": 8.105983444291466,
      "candidate": "def odd_one(arr):\n    d = {}\n    for i in arr:\n        if i not in d:\n            d[i] = 1\n        else:\n            d[i] += 1\n    for key, value in d.items():\n        if value % 2 == 1:\n            return key\n\n\ndef main():\n    arr = [1, 2, 3, 4, 2, 3, 1, 3, 4, 1, 2, 4, 2, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4]\n    print(odd_one(arr))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 72,
      "score": 8.08452234024709,
      "candidate": "def odd_occurrence(arr):\n    x = 0\n    for i in arr:\n        x = x ^ i\n    return x\n\n\nprint(odd_occurrence([1, 1, 2, 2, 2, 3, 4, 5, 6, 6]))"
    },
    {
      "rank": 73,
      "score": 8.040197642997851,
      "candidate": "from collections import Counter\n\n\ndef odd_element(arr):\n    c = Counter(arr)\n    for k, v in c.items():\n        if v % 2 != 0:\n            return k\n\n\ndef main():\n    print(odd_element([1, 2, 3, 2, 1, 3, 4, 3]))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 74,
      "score": 8.024835682833125,
      "candidate": "def odd_occurrence(array):\n    d = {}\n    for i in array:\n        if i in d:\n            d[i] += 1\n        else:\n            d[i] = 1\n    for k, v in d.items():\n        if v % 2 != 0:\n            return k\n\n\narray = [1, 2, 3, 4, 5, 6, 5, 6, 6, 6, 6, 7, 8, 9, 10, 10, 11, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12]\nprint(odd_occurrence(array))"
    },
    {
      "rank": 75,
      "score": 7.990432406683839,
      "candidate": "def odd_occurrences(arr):\n    odd_ele = 0\n    for i in range(0, len(arr)):\n        odd_ele = odd_ele ^ arr[i]\n    return odd_ele\n\n\ndef main():\n    arr = [1, 2, 3, 2, 1, 1, 1, 4, 5, 6, 4, 3, 6, 2, 5]\n    print(odd_occurrences(arr))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 76,
      "score": 7.915588979966494,
      "candidate": "def odd_one(array):\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(1)\n    \"\"\"\n    result = 0\n    for i in array:\n        result ^= i\n    return result\n\n\ndef main():\n    arr_input = [1, 2, 3, 4, 2, 2, 4, 3, 3, 1]\n    a = odd_one(arr_input)\n    print(a)\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 77,
      "score": 7.8912769574414305,
      "candidate": "def odd_occur(arr):\n    res = 0\n    for i in range(0, len(arr)):\n        res = res ^ arr[i]\n    return res\n\n\ndef main():\n    arr = [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5]\n    arr2 = [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6]\n    print(odd_occur(arr))\n    print(odd_occur(arr2))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 78,
      "score": 7.84634113240411,
      "candidate": "def odd_occurence(arr):\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            if arr[i] != arr[j]:\n                continue\n            arr[i] = None\n            arr[j] = None\n            break\n    for i in range(len(arr)):\n        if arr[i] != None:\n            return arr[i]\n\n\nprint(odd_occurence([1, 2, 2, 1, 4, 3, 3, 5, 5, 5]))"
    },
    {
      "rank": 79,
      "score": 7.834022619458933,
      "candidate": "def odd_occurrence(a):\n    res = 0\n    for i in a:\n        res ^= i\n    return res\n\n\narr = [1, 2, 3, 2, 3, 1, 1, 2]\nprint(odd_occurrence(arr))"
    },
    {
      "rank": 80,
      "score": 7.780351419995229,
      "candidate": "def find_odd_element(list_of_integers):\n    \"\"\"\n    >>> find_odd_element([1, 2, 2, 1, 2, 2, 1])\n    1\n    \"\"\"\n    count = 0\n    for i in list_of_integers:\n        count = count ^ i\n    return count\n\n\ndef find_odd_element_2(list_of_integers):\n    \"\"\"\n    >>> find_odd_element_2([1, 2, 2, 1, 2, 2, 1])\n    1\n    \"\"\"\n    count = 0\n    for i in list_of_integers:\n        count = count & i\n    return count\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 81,
      "score": 7.738292593776799,
      "candidate": "def find_odd(arr):\n    ans = 0\n    for i in arr:\n        ans = ans ^ i\n    return ans\n\n\nif __name__ == \"__main__\":\n    arr = [1, 2, 3, 2, 1, 4, 4, 3, 4, 5, 6, 5, 6]\n    print(find_odd(arr))"
    },
    {
      "rank": 82,
      "score": 7.705183449260731,
      "candidate": "def odd_occurrence(arr):\n    count = 0\n    for i in range(len(arr)):\n        count = count ^ arr[i]\n    return count\n\n\ndef main():\n    arr = [2, 4, 6, 7, 8, 8, 7, 6, 4, 2]\n    print(odd_occurrence(arr))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 83,
      "score": 7.5819855281879285,
      "candidate": "def odd_one(arr):\n    ans = 0\n    for i in arr:\n        ans = ans ^ i\n    return ans\n\n\narr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nprint(odd_one(arr))"
    },
    {
      "rank": 84,
      "score": 7.562924366763077,
      "candidate": "def odd_one(arr):\n    n = len(arr)\n    res = 0\n    for i in range(0, n):\n        res = res ^ arr[i]\n    return res\n\n\na = [1, 1, 2, 2, 2, 2, 3, 3]\nprint(odd_one(a))"
    },
    {
      "rank": 85,
      "score": 7.4878043221155455,
      "candidate": "def odd_occurrence(arr):\n    res = 0\n    for i in arr:\n        res = res ^ i\n    return res\n\n\nprint(odd_occurrence([3, 4, 5, 6, 6, 3, 5, 3, 7, 3, 4]))"
    },
    {
      "rank": 86,
      "score": 7.464609382504557,
      "candidate": "def odd_occurring(arr):\n    n = len(arr)\n    temp = 0\n    for i in range(n):\n        temp = temp ^ arr[i]\n    return temp\n\narr = [1, 3, 2, 2, 4, 5, 1]\nprint(odd_occurring(arr))"
    },
    {
      "rank": 87,
      "score": 7.4506599871439985,
      "candidate": "def odd_element(arr: list) -> int:\n    \"\"\"\n    O(n) & O(1)\n    \"\"\"\n    arr.sort()\n    for i in range(1, len(arr), 2):\n        if arr[i] != arr[i - 1]:\n            return arr[i]\n    return arr[-1]\n\n\ndef odd_element2(arr: list) -> int:\n    \"\"\"\n    O(n) & O(1)\n    \"\"\"\n    res = 0\n    for i in arr:\n        res ^= i\n    return res\n\n\ndef odd_element3(arr: list) -> int:\n    \"\"\"\n    O(n) & O(1)\n    \"\"\"\n    # Using the property of XOR\n    # (a ^ 0) == a\n    # (a ^ a) == 0\n    # (a ^ a) ^ a == 0 ^ a == 0\n    # So we can use a XOR of all elements of the array to get the result.\n    # a ^ a ^ a ^ a ^ ... ^ a = a ^ a ^ a ^ ... ^ a\n    # a ^ a ^ a ^ ... ^ a = (a ^ a) ^ (a ^ a) ^ ... ^ (a ^ a)\n    # a ^ a ^ a ^ ... ^ a = 0\n    res = 0\n    for i in arr:\n        res ^= i\n    return res\n\n\nif __name__ == \"__main__\":\n    print(odd_element([1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9]))\n    print(odd_element2([1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9]))\n    print(odd_element3([1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6,"
    },
    {
      "rank": 88,
      "score": 3.0,
      "candidate": "def odd_occurring_element(arr):\n    n = len(arr)\n\n    # Initially consider all elements as present. So the value of count\n    # for all the elements is 1\n    count = 1\n\n    # Consider all elements one by one as the pivot\n    for i in range(n):\n\n        # If the count is found to be even, then the element is not the\n        # required one. So remove the count of the pivot element from the\n        # count of all other elements\n        if count % 2 == 0:\n            for j in range(n):\n                if arr[i] == arr[j]:\n                    count -= 1\n\n        # If the count is found to be odd, then the element is the required\n        # one. So add the count of the pivot element to the count of all\n        # other elements\n        else:\n            for j in range(n):\n                if arr[i] == arr[j]:\n                    count += 1\n    return arr[0]\n\n\ndef main():\n    arr_input = [2, 2, 2, 3, 4, 5, 2, 5, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6]\n    a2 = odd_occurring_element(arr_input)\n    print(a2)\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 89,
      "score": 3.0,
      "candidate": "from collections import Counter\n\n\ndef odd_occurrence_element(l):\n    \"\"\"\n    >>> odd_occurrence_element([1, 2, 3, 1, 2, 4, 5, 3, 2])\n    4\n    >>> odd_occurrence_element([1, 2, 3, 1, 2, 4, 5, 3, 2, 1])\n    1\n    \"\"\"\n    c = Counter(l)\n    return [k for k, v in c.items() if v % 2 == 1][0]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 90,
      "score": 3.0,
      "candidate": "def odd_element(arr):\n    res = 0\n    for i in arr:\n        res = res ^ i\n    return res\n\n\ndef odd_element_efficient(arr):\n    res = 0\n    for i in arr:\n        res = res & (i ^ res)\n    return res\n\n\ndef main():\n    arr = [1, 2, 3, 2, 3, 3, 4, 2, 2, 3, 4, 5, 6, 6, 5, 5, 6, 7, 7, 6, 6]\n    print(odd_element(arr))\n    print(odd_element_efficient(arr))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 91,
      "score": 3.0,
      "candidate": "def find_odd_element(arr):\n    for i in range(len(arr)):\n        if arr[i] == 0:\n            continue\n        arr[i] = -arr[i]\n\n    for i in range(len(arr)):\n        if arr[i] == 0:\n            continue\n        arr[i] = -arr[i]\n\n    for i in range(len(arr)):\n        if arr[i] != 0:\n            return arr[i]\n\n\ndef main():\n    arr = [1, 2, 3, 4, 2, 2, 5, 4, 6, 7, 8, 6, 7, 1, 1, 1]\n    print(find_odd_element(arr))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 92,
      "score": 3.0,
      "candidate": "def odd_occurence(arr):\n    \"\"\"\n    >>> odd_occurence([1, 2, 3, 4, 3, 4, 4, 2, 1])\n    2\n    \"\"\"\n    n = len(arr)\n    res = 0\n    for i in range(n):\n        res ^= arr[i]\n    return res\n\n\ndef odd_occurence_using_hash(arr):\n    \"\"\"\n    >>> odd_occurence_using_hash([1, 2, 3, 4, 3, 4, 4, 2, 1])\n    2\n    \"\"\"\n    dic = {}\n    for i in arr:\n        if i in dic:\n            dic[i] += 1\n        else:\n            dic[i] = 1\n    for k, v in dic.items():\n        if v % 2 != 0:\n            return k\n\n\ndef main():\n    from doctest import testmod\n\n    testmod()\n\n    input_list = [1, 2, 3, 4, 3, 4, 4, 2, 1]\n    print(odd_occurence(input_list))\n    print(odd_occurence_using_hash(input_list))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 93,
      "score": 3.0,
      "candidate": "def odd_occurring(arr):\n    \"\"\"\n    Time complexity: O(n)\n    \"\"\"\n    res = 0\n    for i in arr:\n        res = res ^ i\n    return res\n\n\ndef odd_occurring_2(arr):\n    \"\"\"\n    Time complexity: O(n)\n    \"\"\"\n    res = 0\n    for i in arr:\n        res = res & (res ^ i)\n    return res\n\n\ndef odd_occurring_3(arr):\n    \"\"\"\n    Time complexity: O(n)\n    \"\"\"\n    res = 0\n    for i in arr:\n        res = res | i\n    res = ~res & (res ^ (~res))\n    return res\n\n\ndef main():\n    arr = [1, 2, 3, 2, 3, 3, 2, 1]\n    print(odd_occurring(arr))\n    print(odd_occurring_2(arr))\n    print(odd_occurring_3(arr))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 94,
      "score": 3.0,
      "candidate": "def odd_occurring_element(arr):\n    \"\"\"\n    Time complexity: O(n)\n    Space complexity: O(1)\n    \"\"\"\n    res = 0\n    for i in range(len(arr)):\n        res = res ^ arr[i]\n    return res\n\n\ndef test_odd_occurring_element():\n    assert odd_occurring_element([1, 2, 3, 4, 3, 2, 2, 1]) == 4\n\n\nif __name__ == \"__main__\":\n    test_odd_occurring_element()"
    },
    {
      "rank": 95,
      "score": 3.0,
      "candidate": "def odd_occurrence_element(arr):\n    \"\"\"\n    Time complexity: O(n)\n    Space complexity: O(1)\n    \"\"\"\n    res = 0\n    for i in range(len(arr)):\n        res ^= arr[i]\n    return res\n\n\ndef test_odd_occurrence_element():\n    assert odd_occurrence_element([1, 2, 3, 4, 3, 2, 1]) == 4\n\n\nif __name__ == \"__main__\":\n    test_odd_occurrence_element()"
    },
    {
      "rank": 96,
      "score": 3.0,
      "candidate": "def odd_occurrence(arr):\n    \"\"\"\n    Finds the element that occurs odd number of times in a given array.\n\n    Args:\n       arr(array): Input array\n    Returns:\n       int: The element that occurs odd number of times\n    \"\"\"\n    # we can use a dict to store the occurrences of the elements\n    occurrences = {}\n    for elem in arr:\n        if elem in occurrences:\n            occurrences[elem] += 1\n        else:\n            occurrences[elem] = 1\n\n    # we can find the element that occurs odd number of times\n    for key, value in occurrences.items():\n        if value % 2 != 0:\n            return key\n    return None\n\n\ndef test_function(test_case):\n    test_input, test_expected = test_case\n    test_actual = odd_occurrence(test_input)\n    if test_actual == test_expected:\n        print(\"Pass\")\n    else:\n        print(\"Fail\")\n\n\ntest_function(([2, 3, 5, 4, 5, 2, 4, 3, 5, 2, 4, 4], 5))\ntest_function(([1, 2, 3, 4, 4, 3, 2, 1], 2))\ntest_function(([1, 1, 2, 2], 1))\ntest_function(([8, 3, 6, 6, 6, 6, 6, 7], 8))\ntest_function(([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1"
    },
    {
      "rank": 97,
      "score": 3.0,
      "candidate": "from collections import defaultdict\n\n\ndef odd_occurrence(arr):\n    d = defaultdict(int)\n    for i in arr:\n        d[i] += 1\n\n    for i in arr:\n        if d[i] % 2 != 0:\n            return i\n\n\ndef main():\n    arr_input = [1, 2, 3, 4, 1, 2, 3, 3]\n    a2 = odd_occurrence(arr_input)\n    print(a2)\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 98,
      "score": 3.0,
      "candidate": "def find_odd_occurring_elem(arr):\n    \"\"\"\n    >>> find_odd_occurring_elem([1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5])\n    1\n    >>> find_odd_occurring_elem([1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4, 5, 5, 5, 6, 6, 6, 7, 7, 7, 8, 8, 8, 9, 9, 9])\n    6\n    >>> find_odd_occurring_elem([1, 1, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6])\n    1\n    \"\"\"\n    odd_occurring_elem = arr[0]\n    for i in range(1, len(arr)):\n        odd_occurring_elem ^= arr[i]\n    return odd_occurring_elem\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 99,
      "score": 3.0,
      "candidate": "def odd_occurrence(arr):\n    \"\"\"\n    Time complexity: O(n)\n    Space complexity: O(n)\n    \"\"\"\n    count = {}\n    for i in arr:\n        if i not in count:\n            count[i] = 1\n        else:\n            count[i] += 1\n\n    for key, val in count.items():\n        if val % 2 != 0:\n            return key\n\n\nif __name__ == \"__main__\":\n    assert odd_occurrence([1,2,3,4,2,1,2,1,3,4,5,2,1,3,4,5,6,7,2,1,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9]) == 1"
    },
    {
      "rank": 100,
      "score": 3.0,
      "candidate": "def odd_one(arr):\n    odd_ele = 0\n    for i in arr:\n        odd_ele = odd_ele ^ i\n    return odd_ele\n\n\ndef main():\n    arr = [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4]\n    print(odd_one(arr))\n\n\nif __name__ == \"__main__\":\n    main()"
    }
  ]
}