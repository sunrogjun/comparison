{
  "timestamp": "2025-09-14T23:08:00.140234",
  "method": "improved_llm_judge",
  "judge_model": "codellama/CodeLlama-7b-Python-hf",
  "target_model": "codellama-7b",
  "dataset": "mbpp",
  "problem_number": 110,
  "total_candidates": 100,
  "results": [
    {
      "rank": 1,
      "score": 10.0,
      "candidate": "def find_triplet(arr):\n    arr.sort()\n    for i in range(len(arr)-2):\n        j, k = i+1, len(arr)-1\n        while j < k:\n            if arr[i] + arr[j] + arr[k] < 0:\n                j += 1\n            elif arr[i] + arr[j] + arr[k] > 0:\n                k -= 1\n            else:\n                return [arr[i], arr[j], arr[k]]\n    return []\n\n\nif __name__ == '__main__':\n    arr = [-1, 0, 1, 2, -1, -4]\n    print(find_triplet(arr))"
    },
    {
      "rank": 2,
      "score": 10.0,
      "candidate": "def find_triplet_sum(arr, target):\n    arr.sort()\n    for i in range(len(arr)-2):\n        left = i+1\n        right = len(arr)-1\n        while left < right:\n            sum_arr = arr[i] + arr[left] + arr[right]\n            if sum_arr == target:\n                print(arr[i], arr[left], arr[right])\n                return True\n            elif sum_arr < target:\n                left += 1\n            elif sum_arr > target:\n                right -= 1\n    return False\n\n\nfind_triplet_sum([1, 4, 4, 4, 8, 9, 10], 13)"
    },
    {
      "rank": 3,
      "score": 10.0,
      "candidate": "def find_triplet_with_sum(arr, sum):\n    arr.sort()\n    for i in range(len(arr)-2):\n        left = i+1\n        right = len(arr)-1\n        while left < right:\n            if arr[i] + arr[left] + arr[right] == sum:\n                return [arr[i], arr[left], arr[right]]\n            elif arr[i] + arr[left] + arr[right] < sum:\n                left += 1\n            else:\n                right -= 1\n    return []\n\n\nif __name__ == \"__main__\":\n    arr = [1, 4, 45, 6, 10, 8]\n    sum = 22\n    print(find_triplet_with_sum(arr, sum))"
    },
    {
      "rank": 4,
      "score": 10.0,
      "candidate": "def triplet_with_sum(arr, sum):\n    \"\"\"\n    Given an array and a sum, find a triplet with given sum\n    Time complexity : O(n^2)\n    Space complexity: O(n)\n    :param arr: input array\n    :param sum: sum of the triplet\n    :return: a triplet with given sum\n    \"\"\"\n    triplet = []\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            for k in range(j + 1, len(arr)):\n                if arr[i] + arr[j] + arr[k] == sum:\n                    triplet = [arr[i], arr[j], arr[k]]\n                    return triplet\n\n\ndef triplet_with_sum_optimized(arr, sum):\n    \"\"\"\n    Given an array and a sum, find a triplet with given sum\n    Time complexity : O(n^2)\n    Space complexity: O(n)\n    :param arr: input array\n    :param sum: sum of the triplet\n    :return: a triplet with given sum\n    \"\"\"\n    triplet = []\n    for i in range(len(arr)):\n        target = sum - arr[i]\n        j = i + 1\n        while j < len(arr):\n            k = j + 1\n            while k < len(arr):\n                if arr[j] + arr[k] == target:\n                    return [arr[i], arr[j], arr[k]]\n                k += 1\n            j += 1\n    return triplet\n\n\ndef triplet_with_sum_optimized_2(arr, sum):\n    \"\"\"\n    Given an array and a sum, find a triplet with given sum\n    Time complexity : O(n)\n    Space complexity: O(n)\n    :param arr: input array\n    :param sum: sum of the triplet\n    :return: a triplet with given sum\n    \"\"\"\n    triplet = []\n    target = sum\n    lookup = {}\n    for i in range(len(arr)):\n        if target - arr[i] in lookup:\n            return"
    },
    {
      "rank": 5,
      "score": 10.0,
      "candidate": "from typing import List\n\n\n# Using sorting\n# Time complexity O(n^2)\ndef find_triplet_sum_sort(arr: List[int], k: int) -> List[int]:\n    if len(arr) < 3:\n        return []\n\n    arr.sort()\n\n    for i in range(len(arr) - 2):\n        left, right = i + 1, len(arr) - 1\n        while left < right:\n            total = arr[i] + arr[left] + arr[right]\n            if total == k:\n                return [arr[i], arr[left], arr[right]]\n            elif total < k:\n                left += 1\n            else:\n                right -= 1\n    return []\n\n\n# Using hash table\n# Time complexity O(n)\ndef find_triplet_sum_hash(arr: List[int], k: int) -> List[int]:\n    if len(arr) < 3:\n        return []\n\n    arr_hash = {}\n\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            if k - (arr[i] + arr[j]) in arr_hash:\n                return [arr[i], arr[j], k - arr[i] - arr[j]]\n            else:\n                arr_hash[arr[j]] = j\n    return []\n\n\n# Using hash table\n# Time complexity O(n^2)\ndef find_triplet_sum_hash_optimized(arr: List[int], k: int) -> List[int]:\n    if len(arr) < 3:\n        return []\n\n    arr_hash = {}\n\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            if k - (arr[i] + arr[j]) in arr_hash:\n                return [arr[i], arr[j], k - arr[i] - arr[j]]\n            else:\n                arr_hash[arr[j]] = j\n    return []\n\n\nif __name__ == \"__main__\":\n    arr ="
    },
    {
      "rank": 6,
      "score": 10.0,
      "candidate": "def find_triplet(arr, target):\n    arr.sort()\n    for i in range(len(arr) - 2):\n        l, r = i + 1, len(arr) - 1\n        while l < r:\n            if arr[l] + arr[r] + arr[i] == target:\n                return [arr[i], arr[l], arr[r]]\n            elif arr[l] + arr[r] + arr[i] < target:\n                l += 1\n            else:\n                r -= 1\n    return []\n\n\nprint(find_triplet([1, 4, 4, 4, 8, 9, 10, 17, 23, 25], 10))\nprint(find_triplet([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 14))\nprint(find_triplet([1, 2, 4, 4, 4, 8, 9, 10, 11, 12], 8))"
    },
    {
      "rank": 7,
      "score": 10.0,
      "candidate": "def find_triplet(arr, n):\n    arr.sort()\n    for i in range(n - 2):\n        j = i + 1\n        k = n - 1\n        while j < k:\n            sum = arr[i] + arr[j] + arr[k]\n            if sum == 0:\n                return [arr[i], arr[j], arr[k]]\n            elif sum < 0:\n                j += 1\n            else:\n                k -= 1\n\n\nif __name__ == \"__main__\":\n    print(find_triplet([-2, 0, 1, 2], 4))\n    print(find_triplet([-1, 0, 2, 3], 4))"
    },
    {
      "rank": 8,
      "score": 10.0,
      "candidate": "def find_triplet_sum(array, n, target):\n    array.sort()\n    for i in range(n - 2):\n        for j in range(i + 1, n - 1):\n            k = n - 1\n            while j < k:\n                if array[i] + array[j] + array[k] == target:\n                    return array[i], array[j], array[k]\n                elif array[i] + array[j] + array[k] < target:\n                    j += 1\n                else:\n                    k -= 1\n    return None\n\n\nif __name__ == \"__main__\":\n    arr = [1, 4, 45, 6, 10, 8]\n    target = 22\n    print(find_triplet_sum(arr, len(arr), target))"
    },
    {
      "rank": 9,
      "score": 10.0,
      "candidate": "def find_triplet_sum(arr, sum_):\n    arr.sort()\n    triplet = []\n    for i in range(len(arr) - 2):\n        left = i + 1\n        right = len(arr) - 1\n        while left < right:\n            curr_sum = arr[i] + arr[left] + arr[right]\n            if curr_sum == sum_:\n                triplet = [arr[i], arr[left], arr[right]]\n                break\n            elif curr_sum < sum_:\n                left += 1\n            else:\n                right -= 1\n    return triplet\n\n\nif __name__ == \"__main__\":\n    arr = [1, 4, 45, 6, 10, 8]\n    sum_ = 22\n    print(find_triplet_sum(arr, sum_))"
    },
    {
      "rank": 10,
      "score": 10.0,
      "candidate": "def triplet_sum(arr, n, target):\n    arr.sort()\n    for i in range(n-2):\n        j = i+1\n        k = n-1\n        while j < k:\n            if arr[i] + arr[j] + arr[k] == target:\n                return True\n            elif arr[i] + arr[j] + arr[k] < target:\n                j += 1\n            else:\n                k -= 1\n    return False\n\n\nprint(triplet_sum([1, 2, 3, 4, 5], 5, 9))"
    },
    {
      "rank": 11,
      "score": 10.0,
      "candidate": "def find_triplet(arr, sum):\n    arr.sort()\n    for i in range(len(arr) - 2):\n        j = i + 1\n        k = len(arr) - 1\n        while j < k:\n            if arr[i] + arr[j] + arr[k] == sum:\n                return True\n            elif arr[i] + arr[j] + arr[k] < sum:\n                j += 1\n            else:\n                k -= 1\n    return False\n\n\nprint(find_triplet([2, 4, 7, 6, 1], 10))"
    },
    {
      "rank": 12,
      "score": 10.0,
      "candidate": "def find_triplet(arr, n):\n    arr.sort()\n    for i in range(n - 2):\n        if i > 0 and arr[i] == arr[i - 1]:\n            continue\n        k = i + 1\n        j = n - 1\n        while k < j:\n            if arr[i] + arr[k] + arr[j] == 0:\n                return [arr[i], arr[k], arr[j]]\n            elif arr[i] + arr[k] + arr[j] < 0:\n                k += 1\n            else:\n                j -= 1\n    return []\n\n\ndef main():\n    print(find_triplet([-1, 0, 1, 2, -1, -4], 6))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 13,
      "score": 10.0,
      "candidate": "def find_triplet(arr, target):\n    # Write your code here\n    arr.sort()\n    for i in range(len(arr) - 2):\n        left, right = i + 1, len(arr) - 1\n        while left < right:\n            if arr[left] + arr[right] == target - arr[i]:\n                return [arr[i], arr[left], arr[right]]\n            elif arr[left] + arr[right] < target - arr[i]:\n                left += 1\n            else:\n                right -= 1\n    return []\n\n\ndef main():\n    arr = [1, 2, 4, 5, 6, 8, 10, 11, 12]\n    target = 15\n    print(f\"Target {target} is found in {find_triplet(arr, target)}\")\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 14,
      "score": 10.0,
      "candidate": "def find_triplet_sum(arr, sum):\n    result = []\n    for i in range(0, len(arr)):\n        for j in range(i + 1, len(arr)):\n            for k in range(j + 1, len(arr)):\n                if arr[i] + arr[j] + arr[k] == sum:\n                    result.append(\n                        [arr[i], arr[j], arr[k]])\n    return result\n\n\ndef main():\n    arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]\n    print(find_triplet_sum(arr, 10))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 15,
      "score": 9.0,
      "candidate": "def triplet_sum(array, sum):\n    array.sort()\n    for i in range(len(array) - 2):\n        start = i + 1\n        end = len(array) - 1\n        while start < end:\n            if array[i] + array[start] + array[end] == sum:\n                return True\n            elif array[i] + array[start] + array[end] < sum:\n                start += 1\n            else:\n                end -= 1\n    return False\n\n\nif __name__ == '__main__':\n    assert triplet_sum([-1, 0, 1, 2, -1, 4], 0) is True\n    assert triplet_sum([-1, 0, 1, 2, -1, 4], 1) is True\n    assert triplet_sum([-1, 0, 1, 2, -1, 4], 3) is True\n    assert triplet_sum([-1, 0, 1, 2, -1, 4], 4) is True\n    assert triplet_sum([-1, 0, 1, 2, -1, 4], 5) is False\n    assert triplet_sum([-1, 0, 1, 2, -1, 4], 6) is False\n    assert triplet_sum([-1, 0, 1, 2, -1, 4], 7) is False\n    assert triplet_sum([-1, 0, 1, 2, -1, 4], 8) is False"
    },
    {
      "rank": 16,
      "score": 8.0,
      "candidate": "from typing import List\n\n\ndef find_triplet_sum(array: List[int], target: int) -> List[List[int]]:\n    \"\"\"\n    Time Complexity: O(n^2)\n    Space Complexity: O(n)\n    \"\"\"\n    triplets: List[List[int]] = []\n\n    for i in range(len(array)):\n        for j in range(i + 1, len(array)):\n            for k in range(j + 1, len(array)):\n                if array[i] + array[j] + array[k] == target:\n                    triplets.append([array[i], array[j], array[k]])\n\n    return triplets\n\n\nif __name__ == \"__main__\":\n    assert find_triplet_sum([1, 2, 3, 4, 5, 6, 7, 8, 9], 10) == [[1, 2, 7], [1, 3, 6], [2, 3, 5]]"
    },
    {
      "rank": 17,
      "score": 8.0,
      "candidate": "from collections import defaultdict\n\n\ndef triplet_with_sum(array, sum):\n    \"\"\"\n    Time Complexity: O(n^2)\n    Space Complexity: O(n)\n    \"\"\"\n    hash_map = defaultdict(int)\n\n    for i in array:\n        hash_map[i] += 1\n\n    for i in range(len(array)):\n        for j in range(i + 1, len(array)):\n            diff = sum - (array[i] + array[j])\n            if diff in hash_map:\n                if diff != array[i] and diff != array[j]:\n                    return True\n\n    return False\n\n\nif __name__ == \"__main__\":\n    assert triplet_with_sum([3, 0, -2, -1, 1, 2], 1)\n    assert triplet_with_sum([1, 0, -1, 0, -2, 2], 0)\n    assert triplet_with_sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 18) is False\n    assert triplet_with_sum([-1, 0, 1, 2, -1, -4], -1)"
    },
    {
      "rank": 18,
      "score": 8.0,
      "candidate": "def triplet_sum(arr, sum):\n    arr.sort()\n    for i in range(len(arr)-2):\n        left = i+1\n        right = len(arr)-1\n        while left < right:\n            if arr[i]+arr[left]+arr[right] == sum:\n                return [arr[i], arr[left], arr[right]]\n            elif arr[i]+arr[left]+arr[right] < sum:\n                left += 1\n            else:\n                right -= 1\n    return []\n\n\nprint(triplet_sum([1, 2, 3, 4, 5, 6, 7, 8], 18))"
    },
    {
      "rank": 19,
      "score": 8.0,
      "candidate": "def triplet_sum(arr, n):\n    \"\"\"\n    Time Complexity: O(n^2)\n    Space Complexity: O(n)\n    \"\"\"\n    # arr.sort()\n    result = []\n    for i in range(n - 2):\n        j = i + 1\n        k = n - 1\n        while j < k:\n            if arr[i] + arr[j] + arr[k] == 0:\n                result.append([arr[i], arr[j], arr[k]])\n                j += 1\n            elif arr[i] + arr[j] + arr[k] < 0:\n                j += 1\n            else:\n                k -= 1\n\n    return result\n\n\ndef triplet_sum_eff(arr, n):\n    \"\"\"\n    Time Complexity: O(n^2)\n    Space Complexity: O(n)\n    \"\"\"\n    result = []\n    for i in range(n - 2):\n        j = i + 1\n        k = n - 1\n        while j < k:\n            if arr[i] + arr[j] + arr[k] == 0:\n                result.append([arr[i], arr[j], arr[k]])\n                while j < k and arr[j] == arr[j + 1]:\n                    j += 1\n                while j < k and arr[k] == arr[k - 1]:\n                    k -= 1\n                j += 1\n                k -= 1\n            elif arr[i] + arr[j] + arr[k] < 0:\n                j += 1\n            else:\n                k -= 1\n\n    return result\n\n\ndef triplet_sum_eff2(arr, n):\n    \"\"\"\n    Time Complexity: O(n^2)\n    Space Complexity: O(n)\n    \"\"\"\n    result = []\n    for i in range(n - 2):\n        j = i + 1\n        k = n - 1\n        while j < k:\n            if arr[i] + arr[j] + arr[k] == 0:\n                result.append"
    },
    {
      "rank": 20,
      "score": 8.0,
      "candidate": "def find_triplet_with_sum(arr, n, sum):\n    \"\"\"\n    :param arr: array to search for triplet\n    :param n: length of array\n    :param sum: sum of triplet\n    :return: triplet\n    \"\"\"\n    arr.sort()\n    for i in range(n - 2):\n        j = i + 1\n        k = n - 1\n        while j < k:\n            curr_sum = arr[i] + arr[j] + arr[k]\n            if curr_sum == sum:\n                return arr[i], arr[j], arr[k]\n            elif curr_sum < sum:\n                j += 1\n            else:\n                k -= 1\n\n\ndef main():\n    arr = [1, 0, -1, 0, -2, 2]\n    sum = 0\n    print(find_triplet_with_sum(arr, len(arr), sum))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 21,
      "score": 8.0,
      "candidate": "def triplet_sum(arr, n, target):\n    arr.sort()\n    for i in range(n-2):\n        j = i+1\n        k = n-1\n        while j < k:\n            if arr[i]+arr[j]+arr[k] == target:\n                return True\n            elif arr[i]+arr[j]+arr[k] < target:\n                j += 1\n            else:\n                k -= 1\n    return False\n\n\nif __name__ == '__main__':\n    print(triplet_sum([1, 2, 3, 4, 5], 5, 7))"
    },
    {
      "rank": 22,
      "score": 8.0,
      "candidate": "def find_triplet(arr, n):\n    arr.sort()\n    for i in range(n-2):\n        l = i+1\n        r = n-1\n        while l < r:\n            if arr[i] + arr[l] + arr[r] == 0:\n                return True\n            elif arr[i] + arr[l] + arr[r] < 0:\n                l += 1\n            else:\n                r -= 1\n    return False\n\n\nif __name__ == \"__main__\":\n    arr = [-1, 0, 1, 2, -1, -4]\n    n = len(arr)\n    if find_triplet(arr, n):\n        print(\"Triplet with 0 sum exists\")\n    else:\n        print(\"No triplet with 0 sum\")"
    },
    {
      "rank": 23,
      "score": 8.0,
      "candidate": "def find_triplet(arr, n, sum_):\n    arr.sort()\n    for i in range(n-2):\n        j = i + 1\n        k = n - 1\n        while j < k:\n            if arr[i] + arr[j] + arr[k] == sum_:\n                return arr[i], arr[j], arr[k]\n            elif arr[i] + arr[j] + arr[k] < sum_:\n                j += 1\n            else:\n                k -= 1\n\n    return -1\n\n\n\narr = list(map(int, input(\"Enter array elements: \").split()))\nn = len(arr)\nsum_ = int(input(\"Enter sum: \"))\nprint(find_triplet(arr, n, sum_))"
    },
    {
      "rank": 24,
      "score": 8.0,
      "candidate": "def triplet_sum(array, target):\n    array.sort()\n    for i in range(len(array) - 2):\n        left = i + 1\n        right = len(array) - 1\n        while left < right:\n            curr_sum = array[i] + array[left] + array[right]\n            if curr_sum == target:\n                return [array[i], array[left], array[right]]\n            elif curr_sum < target:\n                left += 1\n            elif curr_sum > target:\n                right -= 1\n    return []\n\n\nif __name__ == \"__main__\":\n    print(triplet_sum([1, 2, 3, 4, 5], 10))\n    print(triplet_sum([1, 2, 3, 4, 5], 100))"
    },
    {
      "rank": 25,
      "score": 8.0,
      "candidate": "from typing import List\n\n\ndef triplet_with_sum(numbers: List[int], target: int) -> List[int]:\n    \"\"\"\n    This is the naive solution to the above problem.\n    It will work but will take a lot of time for larger inputs\n    Time complexity: O(N^3)\n    Space Complexity: O(1)\n    \"\"\"\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            for k in range(j + 1, len(numbers)):\n                if numbers[i] + numbers[j] + numbers[k] == target:\n                    return [numbers[i], numbers[j], numbers[k]]\n\n    return []\n\n\ndef triplet_with_sum_fast(numbers: List[int], target: int) -> List[int]:\n    \"\"\"\n    This solution is faster than the above one.\n    Time complexity: O(N^2)\n    Space complexity: O(N)\n    \"\"\"\n    triplets: List[int] = []\n\n    for i in range(len(numbers)):\n        current_sum = target - numbers[i]\n        remaining_numbers = numbers[i + 1 :]\n        triplets_found = triplet_with_sum_rec(remaining_numbers, current_sum)\n\n        if triplets_found:\n            triplets_found.append(numbers[i])\n            triplets.append(triplets_found)\n\n    return triplets\n\n\ndef triplet_with_sum_rec(\n    numbers: List[int], target: int\n) -> List[int]:\n    \"\"\"\n    This is the recursive function to find the triplets\n    \"\"\"\n    if len(numbers) < 3:\n        return []\n\n    for i in range(len(numbers)):\n        current_sum = target - numbers[i]\n        remaining_numbers = numbers[i + 1 :]\n        triplets_found = triplet_with_sum_rec(remaining_numbers, current_sum)\n\n        if triplets_found:\n            triplets_found.append(numbers[i])\n            return triplets_found\n\n    return []"
    },
    {
      "rank": 26,
      "score": 8.0,
      "candidate": "def triplet_sum(arr, sum):\n    arr.sort()\n    for i in range(len(arr) - 2):\n        left = i + 1\n        right = len(arr) - 1\n        while left < right:\n            curr_sum = arr[i] + arr[left] + arr[right]\n            if curr_sum == sum:\n                return True\n            elif curr_sum < sum:\n                left += 1\n            else:\n                right -= 1\n    return False\n\n\nprint(triplet_sum([1, 2, 3, 4, 5], 7))\nprint(triplet_sum([1, 2, 3, 4, 5], 9))"
    },
    {
      "rank": 27,
      "score": 8.0,
      "candidate": "from typing import List\n\n\ndef triplet_sum(arr: List[int], target: int) -> bool:\n    \"\"\"\n    Time Complexity: O(n^2)\n    Space Complexity: O(n)\n    \"\"\"\n\n    if not arr:\n        return False\n\n    arr.sort()\n\n    for i in range(len(arr) - 2):\n        left, right = i + 1, len(arr) - 1\n\n        while left < right:\n            current_sum = arr[i] + arr[left] + arr[right]\n\n            if current_sum == target:\n                return True\n            elif current_sum < target:\n                left += 1\n            else:\n                right -= 1\n\n    return False\n\n\nif __name__ == \"__main__\":\n    assert triplet_sum([-1, 0, 1, 2, -1, -4], 0)"
    },
    {
      "rank": 28,
      "score": 8.0,
      "candidate": "def find_triplet(arr):\n    arr.sort()\n    for i in range(len(arr)-2):\n        j = i+1\n        k = len(arr)-1\n        while j < k:\n            if arr[i] + arr[j] + arr[k] == 0:\n                return [arr[i], arr[j], arr[k]]\n            elif arr[i] + arr[j] + arr[k] < 0:\n                j += 1\n            else:\n                k -= 1\n    return None\n\n\nif __name__ == \"__main__\":\n    print(find_triplet([-1, 0, 2, -2, 3, 0, 1, 1, -3]))"
    },
    {
      "rank": 29,
      "score": 8.0,
      "candidate": "def triplet_sum(array, target):\n    array.sort()\n    for i in range(len(array)-2):\n        low = i+1\n        high = len(array)-1\n        while low < high:\n            current_sum = array[i] + array[low] + array[high]\n            if current_sum == target:\n                return [array[i], array[low], array[high]]\n            elif current_sum < target:\n                low += 1\n            else:\n                high -= 1\n    return []\n\n\nif __name__ == \"__main__\":\n    print(triplet_sum([-2, 0, 1, 2], 2))"
    },
    {
      "rank": 30,
      "score": 8.0,
      "candidate": "def triplet_sum(array, sum):\n    array.sort()\n    result = []\n    for i in range(len(array) - 2):\n        left, right = i + 1, len(array) - 1\n        while left < right:\n            current_sum = array[i] + array[left] + array[right]\n            if current_sum == sum:\n                result.append([array[i], array[left], array[right]])\n                left += 1\n                right -= 1\n            elif current_sum < sum:\n                left += 1\n            else:\n                right -= 1\n    return result\n\n\nprint(triplet_sum([1, 0, -1, 0, -2, 2], 0))\nprint(triplet_sum([0, 0, 0, 0], 0))\nprint(triplet_sum([-1, 0, 1, 2, -1, -4], -1))"
    },
    {
      "rank": 31,
      "score": 8.0,
      "candidate": "def triplet_with_sum(arr: list, target: int) -> bool:\n    arr.sort()\n    n = len(arr)\n    for i in range(n):\n        # We can only take three elements\n        # So we can only take two elements from the right\n        j = i + 1\n        k = n - 1\n\n        while j < k:\n            curr_sum = arr[i] + arr[j] + arr[k]\n\n            if curr_sum == target:\n                return True\n            elif curr_sum < target:\n                j += 1\n            else:\n                k -= 1\n\n    return False\n\n\nif __name__ == \"__main__\":\n    arr = [1, 0, -1, 0, -2, 2]\n    target = 0\n    print(triplet_with_sum(arr, target))"
    },
    {
      "rank": 32,
      "score": 8.0,
      "candidate": "def triplet_sum(arr, sum):\n    # TODO: Write your code here\n    arr.sort()\n    for i in range(len(arr) - 2):\n        left = i + 1\n        right = len(arr) - 1\n        while left < right:\n            if arr[i] + arr[left] + arr[right] == sum:\n                return [arr[i], arr[left], arr[right]]\n            elif arr[i] + arr[left] + arr[right] < sum:\n                left += 1\n            else:\n                right -= 1\n    return []\n\n\ndef main():\n    arr = [12, 3, 4, 1, 6, 9]\n    sum = 24\n    print(triplet_sum(arr, sum))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 33,
      "score": 8.0,
      "candidate": "from collections import defaultdict\n\n\ndef triplets_with_sum(arr, target):\n    arr.sort()\n    triplets = []\n    for i in range(len(arr)):\n        j = i + 1\n        k = len(arr) - 1\n        while j < k:\n            if arr[i] + arr[j] + arr[k] == target:\n                triplets.append((arr[i], arr[j], arr[k]))\n                j += 1\n                k -= 1\n            elif arr[i] + arr[j] + arr[k] < target:\n                j += 1\n            else:\n                k -= 1\n    return triplets\n\n\ndef triplets_with_sum_eff(arr, target):\n    arr.sort()\n    triplets = []\n    triplets_dict = defaultdict(list)\n    for i, num in enumerate(arr):\n        if num in triplets_dict:\n            for triplet in triplets_dict[num]:\n                if num + triplet[0] + triplet[1] == target:\n                    triplets.append(tuple(sorted([num, triplet[0], triplet[1]])))\n        triplets_dict[target - num].append(num)\n    return triplets\n\n\nif __name__ == \"__main__\":\n    print(triplets_with_sum([3, 0, 1, 1, -6, 1, -6, 11], 0))\n    print(triplets_with_sum_eff([3, 0, 1, 1, -6, 1, -6, 11], 0))"
    },
    {
      "rank": 34,
      "score": 8.0,
      "candidate": "def triplet_sum(arr, target):\n    arr.sort()\n    result = []\n    for i in range(len(arr) - 2):\n        left = i + 1\n        right = len(arr) - 1\n        while left < right:\n            curr_sum = arr[i] + arr[left] + arr[right]\n            if curr_sum == target:\n                result.append([arr[i], arr[left], arr[right]])\n                left += 1\n                right -= 1\n            elif curr_sum < target:\n                left += 1\n            else:\n                right -= 1\n    return result\n\n\ndef main():\n    arr = [1, 5, 5, 10, 25, 35, 35, 45, 55, 60]\n    target = 35\n    result = triplet_sum(arr, target)\n    print(result)\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 35,
      "score": 8.0,
      "candidate": "def triplet_sum(arr, sum):\n    arr.sort()\n    for i in range(len(arr)-2):\n        j = i+1\n        k = len(arr)-1\n        while j < k:\n            if arr[i]+arr[j]+arr[k] == sum:\n                return True\n            elif arr[i]+arr[j]+arr[k] < sum:\n                j += 1\n            else:\n                k -= 1\n    return False\n\n\ndef main():\n    print(triplet_sum([1, 4, 4, 4, 8, 9, 10], 11))\n    print(triplet_sum([1, 5, 5, 5, 5, 10], 11))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 36,
      "score": 8.0,
      "candidate": "from typing import List\n\n\ndef find_triplet(arr: List[int], target: int) -> List[int]:\n    \"\"\"\n    Time Complexity: O(n^2)\n    Space Complexity: O(n)\n    \"\"\"\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            for k in range(j + 1, len(arr)):\n                if arr[i] + arr[j] + arr[k] == target:\n                    return [arr[i], arr[j], arr[k]]\n\n    return []\n\n\nif __name__ == \"__main__\":\n    assert find_triplet([1, 1, 2, 3, 5, 7, 4], 3) == [1, 1, 2]\n    assert find_triplet([1, 1, 2, 3, 5, 7, 4], 6) == [1, 2, 3]\n    assert find_triplet([1, 1, 2, 3, 5, 7, 4], 9) == [1, 2, 4]"
    },
    {
      "rank": 37,
      "score": 8.0,
      "candidate": "def triplet_with_sum(arr, target):\n    arr.sort()\n    for i in range(len(arr) - 2):\n        left = i + 1\n        right = len(arr) - 1\n        while left < right:\n            if arr[i] + arr[left] + arr[right] == target:\n                return [arr[i], arr[left], arr[right]]\n            elif arr[i] + arr[left] + arr[right] < target:\n                left += 1\n            else:\n                right -= 1\n    return []\n\n\nprint(triplet_with_sum([-1, 0, 1, 2, -1, -4], -1))"
    },
    {
      "rank": 38,
      "score": 8.0,
      "candidate": "def find_triplet(array, target):\n    array.sort()\n    triplets = []\n\n    for i in range(len(array) - 2):\n        left = i + 1\n        right = len(array) - 1\n\n        while left < right:\n            current_sum = array[i] + array[left] + array[right]\n\n            if current_sum == target:\n                triplets.append([array[i], array[left], array[right]])\n                left += 1\n                right -= 1\n            elif current_sum < target:\n                left += 1\n            else:\n                right -= 1\n\n    return triplets\n\n\nif __name__ == \"__main__\":\n    assert find_triplet([12, 3, 4, -12, 5, -6, 7, 8, -9], 0) == [[-12, 7, 8], [-6, 7, 8]]\n    assert find_triplet([1, 2, 4, 5, 6, 7, 8, 9, 10, 11], 18) == [[1, 2, 11], [2, 4, 11]]\n    assert find_triplet([1, 2, 4, 0, 5, -1, 7, 8, -9], 0) == [[-1, 7, 8], [0, 4, 8]]"
    },
    {
      "rank": 39,
      "score": 8.0,
      "candidate": "def triplet_sum(arr, s):\n    arr.sort()\n    result = []\n    for i in range(len(arr) - 2):\n        left = i + 1\n        right = len(arr) - 1\n        while left < right:\n            curr_sum = arr[i] + arr[left] + arr[right]\n            if curr_sum == s:\n                result.append([arr[i], arr[left], arr[right]])\n                left += 1\n                right -= 1\n            elif curr_sum < s:\n                left += 1\n            else:\n                right -= 1\n    return result\n\n\nif __name__ == \"__main__\":\n    arr = [1, 5, 5, 1, 5, 2, 1, 2, 5]\n    print(triplet_sum(arr, 10))"
    },
    {
      "rank": 40,
      "score": 8.0,
      "candidate": "def find_triplet(array):\n    array.sort()\n    for i in range(len(array) - 2):\n        if i > 0 and array[i] == array[i - 1]:\n            continue\n        l = i + 1\n        r = len(array) - 1\n        while l < r:\n            if array[l] + array[r] == -array[i]:\n                return [array[i], array[l], array[r]]\n            elif array[l] + array[r] < -array[i]:\n                l += 1\n            else:\n                r -= 1\n\n\nif __name__ == \"__main__\":\n    assert find_triplet([-1, 0, 1, 2, -1, -4]) == [-1, 0, 1]"
    },
    {
      "rank": 41,
      "score": 8.0,
      "candidate": "def find_triplet(arr, sum_of_triplet):\n    arr.sort()\n    for i in range(len(arr)-2):\n        start = i+1\n        end = len(arr)-1\n        while start < end:\n            if arr[i]+arr[start]+arr[end] > sum_of_triplet:\n                end-=1\n            elif arr[i]+arr[start]+arr[end] < sum_of_triplet:\n                start+=1\n            else:\n                return True\n    return False\n\n\nif __name__ == '__main__':\n    arr = [1, 4, 45, 6, 10, 8]\n    sum_of_triplet = 22\n    print(find_triplet(arr, sum_of_triplet))"
    },
    {
      "rank": 42,
      "score": 8.0,
      "candidate": "from collections import defaultdict\n\ndef triplet_sum(arr, s):\n    arr.sort()\n    n = len(arr)\n\n    # Hash map to store the pairs\n    hash_map = defaultdict(list)\n    for i in range(n-1, -1, -1):\n        for j in range(i-1, -1, -1):\n            hash_map[arr[i] + arr[j]].append([arr[i], arr[j]])\n\n    for i in range(n):\n        target = s - arr[i]\n        if target in hash_map:\n            for pair in hash_map[target]:\n                if pair[0] < arr[i] and pair[1] > arr[i]:\n                    print(arr[i], pair[0], pair[1])\n                    return True\n    return False\n\nif __name__ == \"__main__\":\n    assert(triplet_sum([1, 2, 3, 4, 5], 7))\n    assert(triplet_sum([1, 5, 7, -1, 5, 9], 10))\n    assert(not triplet_sum([1, 2, 4, 4, 5], 7))"
    },
    {
      "rank": 43,
      "score": 8.0,
      "candidate": "def find_triplet(arr):\n    arr.sort()\n    for i in range(len(arr) - 2):\n        j = i + 1\n        k = len(arr) - 1\n        while j < k:\n            if arr[i] + arr[j] + arr[k] == 0:\n                return arr[i], arr[j], arr[k]\n            elif arr[i] + arr[j] + arr[k] > 0:\n                k -= 1\n            else:\n                j += 1\n\n\nif __name__ == \"__main__\":\n    print(find_triplet([-1, 0, 1, 2, -1, -4]))"
    },
    {
      "rank": 44,
      "score": 8.0,
      "candidate": "def find_triplet_with_sum(arr, k):\n    arr.sort()\n    triplet = []\n    for i in range(len(arr)):\n        if i > 0 and arr[i] == arr[i-1]:\n            continue\n        j = i+1\n        k = len(arr) - 1\n        while j < k:\n            if arr[i] + arr[j] + arr[k] == k:\n                triplet = [arr[i], arr[j], arr[k]]\n                break\n            elif arr[i] + arr[j] + arr[k] > k:\n                k -= 1\n            else:\n                j += 1\n    return triplet\n\n\nprint(find_triplet_with_sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 10))"
    },
    {
      "rank": 45,
      "score": 8.0,
      "candidate": "def triplet_sum(arr, sum):\n    arr.sort()\n    n = len(arr)\n\n    for i in range(n - 2):\n        low = i + 1\n        high = n - 1\n\n        while low < high:\n            if arr[i] + arr[low] + arr[high] == sum:\n                return True\n            elif arr[i] + arr[low] + arr[high] < sum:\n                low += 1\n            else:\n                high -= 1\n\n    return False\n\n\nprint(triplet_sum([1, 2, 3, 4, 5, 6], 9))\nprint(triplet_sum([1, 2, 3, 4, 5, 6], 12))"
    },
    {
      "rank": 46,
      "score": 8.0,
      "candidate": "from typing import List\n\n\ndef find_triplets(arr: List[int], k: int) -> List[List[int]]:\n    \"\"\"\n    Time Complexity: O(n*n*n)\n    Space Complexity: O(n)\n    \"\"\"\n\n    result: List[List[int]] = []\n\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            for z in range(j + 1, len(arr)):\n                if arr[i] + arr[j] + arr[z] == k:\n                    result.append([arr[i], arr[j], arr[z]])\n\n    return result\n\n\nif __name__ == \"__main__\":\n    assert find_triplets([1, 2, 3, 4, 5], 10) == [[2, 3, 5]]\n    assert find_triplets([1, 2, 3, 4, 5], 2) == []\n    assert find_triplets([1, 2, 3, 4, 5], 3) == []\n    assert find_triplets([1, 2, 3, 4, 5], 4) == [[1, 2, 3]]\n    assert find_triplets([1, 2, 3, 4, 5], 6) == [[1, 3, 5]]\n    assert find_triplets([1, 2, 3, 4, 5], 7) == [[1, 3, 5]]"
    },
    {
      "rank": 47,
      "score": 8.0,
      "candidate": "def triplet_sum(arr, sum):\n    \"\"\"\n    Time complexity: O(n^2)\n    Space complexity: O(n)\n    \"\"\"\n    arr.sort()\n\n    triplet_list = []\n\n    for i in range(len(arr) - 2):\n        left = i + 1\n        right = len(arr) - 1\n\n        while left < right:\n            curr_sum = arr[i] + arr[left] + arr[right]\n            if curr_sum == sum:\n                triplet_list.append([arr[i], arr[left], arr[right]])\n                left += 1\n                right -= 1\n            elif curr_sum < sum:\n                left += 1\n            elif curr_sum > sum:\n                right -= 1\n\n    return triplet_list\n\n\ndef triplet_sum_optimized(arr, sum):\n    \"\"\"\n    Time complexity: O(n^2)\n    Space complexity: O(n)\n    \"\"\"\n    arr.sort()\n\n    triplet_list = []\n\n    for i in range(len(arr) - 2):\n        left = i + 1\n        right = len(arr) - 1\n\n        while left < right:\n            curr_sum = arr[i] + arr[left] + arr[right]\n            if curr_sum == sum:\n                triplet_list.append([arr[i], arr[left], arr[right]])\n                left += 1\n                right -= 1\n            elif curr_sum < sum:\n                left += 1\n            elif curr_sum > sum:\n                right -= 1\n\n    return triplet_list\n\n\nif __name__ == \"__main__\":\n    assert triplet_sum([1, 2, 3, 4, 5], 6) == [[1, 2, 5]]\n    assert triplet_sum([1, 2, 3, 4, 5], 7) == [[1, 2, 6]]\n    assert triplet_sum([1, 2, 3, 4, 5], 10) == [[1, 3,"
    },
    {
      "rank": 48,
      "score": 8.0,
      "candidate": "def find_triplet(arr, target):\n    arr.sort()\n    length = len(arr)\n    for i in range(length - 2):\n        left = i + 1\n        right = length - 1\n        while left < right:\n            current_sum = arr[i] + arr[left] + arr[right]\n            if current_sum == target:\n                return [arr[i], arr[left], arr[right]]\n            elif current_sum < target:\n                left += 1\n            else:\n                right -= 1\n\n\nif __name__ == '__main__':\n    arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    target = 10\n    print(find_triplet(arr, target))"
    },
    {
      "rank": 49,
      "score": 8.0,
      "candidate": "def find_triplet(array, sum):\n    array.sort()\n    result = []\n    for i in range(len(array) - 2):\n        if i > 0 and array[i] == array[i - 1]:\n            continue\n        l = i + 1\n        r = len(array) - 1\n        while l < r:\n            current_sum = array[i] + array[l] + array[r]\n            if current_sum == sum:\n                result.append([array[i], array[l], array[r]])\n                l += 1\n                r -= 1\n                while l < r and array[l] == array[l - 1]:\n                    l += 1\n                while l < r and array[r] == array[r + 1]:\n                    r -= 1\n            elif current_sum < sum:\n                l += 1\n            else:\n                r -= 1\n    return result\n\n\ndef main():\n    array = [10, 5, 3, 3, 5, 10, 10, 5]\n    sum = 20\n    print(find_triplet(array, sum))\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 50,
      "score": 8.0,
      "candidate": "from typing import List\n\n\ndef find_triplet_sum(arr: List[int], target: int) -> List[int]:\n    \"\"\"\n    Time Complexity: O(n^2)\n    Space Complexity: O(n)\n    \"\"\"\n    for i in range(len(arr) - 2):\n        for j in range(i + 1, len(arr) - 1):\n            for k in range(j + 1, len(arr)):\n                if arr[i] + arr[j] + arr[k] == target:\n                    return arr[i], arr[j], arr[k]\n\n    return []\n\n\nif __name__ == \"__main__\":\n    print(find_triplet_sum([1, 3, 5, 7, 9], 12))"
    },
    {
      "rank": 51,
      "score": 8.0,
      "candidate": "from typing import List\n\n\ndef find_triplet(array: List[int]) -> List[int]:\n    \"\"\"\n    Time Complexity: O(n^2)\n    Space Complexity: O(n)\n    \"\"\"\n    array.sort()\n\n    for i in range(len(array) - 2):\n        j = i + 1\n        k = len(array) - 1\n\n        while j < k:\n            if array[i] + array[j] + array[k] == 0:\n                return [array[i], array[j], array[k]]\n            elif array[i] + array[j] + array[k] < 0:\n                j += 1\n            else:\n                k -= 1\n\n    return []\n\n\nif __name__ == \"__main__\":\n    assert find_triplet([-1, 0, 1, 2, -1, -4]) == [-1, 0, 1]"
    },
    {
      "rank": 52,
      "score": 8.0,
      "candidate": "from typing import List\n\n\ndef find_triplet(array: List[int], target: int) -> List[int]:\n    \"\"\"\n    Time Complexity: O(n^2)\n    Space Complexity: O(1)\n    \"\"\"\n    array.sort()\n\n    for i in range(len(array) - 2):\n        start = i + 1\n        end = len(array) - 1\n\n        while start < end:\n            if array[i] + array[start] + array[end] == target:\n                return [array[i], array[start], array[end]]\n            elif array[i] + array[start] + array[end] > target:\n                end -= 1\n            else:\n                start += 1\n\n    return []\n\n\nif __name__ == \"__main__\":\n    assert find_triplet([-1, 0, 1, 2, -1, -4], -1) == [-1, -1, 2]"
    },
    {
      "rank": 53,
      "score": 8.0,
      "candidate": "def find_triplet(arr: list, sum: int):\n    arr.sort()\n    n = len(arr)\n    for i in range(n-2):\n        l, r = i+1, n-1\n        while l < r:\n            if arr[i] + arr[l] + arr[r] == sum:\n                return arr[i], arr[l], arr[r]\n            elif arr[i] + arr[l] + arr[r] < sum:\n                l += 1\n            else:\n                r -= 1\n    return -1\n\n\nif __name__ == \"__main__\":\n    assert find_triplet([1, 3, 5, 7, 9], 10) == (1, 3, 5)\n    assert find_triplet([1, 3, 5, 7, 9], 11) == -1\n    assert find_triplet([1, 3, 5, 7, 9], 12) == -1"
    },
    {
      "rank": 54,
      "score": 8.0,
      "candidate": "def find_triplet(array, sum):\n    array.sort()\n    triplet = []\n    for i in range(len(array)-2):\n        low = i + 1\n        high = len(array) - 1\n        while low < high:\n            if array[i] + array[low] + array[high] == sum:\n                triplet.append(array[i])\n                triplet.append(array[low])\n                triplet.append(array[high])\n                return triplet\n            elif array[i] + array[low] + array[high] < sum:\n                low += 1\n            else:\n                high -= 1\n    return triplet\n\n\nprint(find_triplet([3, 4, -4, 5, 6, -6, 10, -10, 15, 20, -20], 10))"
    },
    {
      "rank": 55,
      "score": 8.0,
      "candidate": "def find_triplet(arr, n):\n    arr.sort()\n    for i in range(n-2):\n        j = i + 1\n        k = n - 1\n        while j < k:\n            if arr[i] + arr[j] + arr[k] == 0:\n                return True\n            elif arr[i] + arr[j] + arr[k] < 0:\n                j += 1\n            else:\n                k -= 1\n    return False\n\n\nprint(find_triplet([-3, 0, 1, 2, -1, 1, -2], 7))"
    },
    {
      "rank": 56,
      "score": 8.0,
      "candidate": "def find_triplet_with_sum(arr, target):\n    \"\"\"\n    Time Complexity: O(n^2)\n    Space Complexity: O(n)\n    \"\"\"\n    arr.sort()\n    for i in range(len(arr) - 2):\n        left = i + 1\n        right = len(arr) - 1\n        while left < right:\n            if arr[i] + arr[left] + arr[right] == target:\n                return [arr[i], arr[left], arr[right]]\n            elif arr[i] + arr[left] + arr[right] < target:\n                left += 1\n            else:\n                right -= 1\n    return []\n\n\ndef find_triplet_with_sum_eff(arr, target):\n    \"\"\"\n    Time Complexity: O(n^2)\n    Space Complexity: O(n)\n    \"\"\"\n    arr.sort()\n    for i in range(len(arr) - 2):\n        left = i + 1\n        right = len(arr) - 1\n        while left < right:\n            if arr[i] + arr[left] + arr[right] == target:\n                return [arr[i], arr[left], arr[right]]\n            elif arr[i] + arr[left] + arr[right] < target:\n                left += 1\n            else:\n                right -= 1\n    return []\n\n\ndef find_triplet_with_sum_eff_2(arr, target):\n    \"\"\"\n    Time Complexity: O(n^2)\n    Space Complexity: O(n)\n    \"\"\"\n    arr.sort()\n    for i in range(len(arr) - 2):\n        left = i + 1\n        right = len(arr) - 1\n        while left < right:\n            if arr[i] + arr[left] + arr[right] == target:\n                return [arr[i], arr[left], arr[right]]\n            elif arr[i] + arr[left] + arr[right] < target:\n                left += 1\n            else:\n                right -= 1\n    return []"
    },
    {
      "rank": 57,
      "score": 8.0,
      "candidate": "def find_triplet(arr):\n    arr.sort()\n    n = len(arr)\n    for i in range(n-2):\n        j = i + 1\n        k = n - 1\n        while j < k:\n            if arr[i] + arr[j] + arr[k] == 0:\n                return True\n            elif arr[i] + arr[j] + arr[k] < 0:\n                j += 1\n            else:\n                k -= 1\n    return False\n\n\nif __name__ == \"__main__\":\n    arr = [-1,0,1,2,-1,-4]\n    print(find_triplet(arr))\n    arr = [-1,0,1,2,-1,-4,3]\n    print(find_triplet(arr))"
    },
    {
      "rank": 58,
      "score": 8.0,
      "candidate": "def triplet_sum(arr, target):\n    arr.sort()\n    for i in range(len(arr) - 2):\n        left = i + 1\n        right = len(arr) - 1\n        while left < right:\n            if arr[left] + arr[right] == target - arr[i]:\n                return [arr[i], arr[left], arr[right]]\n            elif arr[left] + arr[right] < target - arr[i]:\n                left += 1\n            else:\n                right -= 1\n    return []\n\n\nprint(triplet_sum([12, 3, 4, 1, 6, 9], 24))"
    },
    {
      "rank": 59,
      "score": 8.0,
      "candidate": "def find_triplet(array, sum):\n    array.sort()\n    triplet = []\n    n = len(array)\n    for i in range(n - 2):\n        if i > 0 and array[i] == array[i - 1]:\n            continue\n        k = n - 1\n        j = i + 1\n        while j < k:\n            if array[i] + array[j] + array[k] == sum:\n                triplet = [array[i], array[j], array[k]]\n                return triplet\n            elif array[i] + array[j] + array[k] > sum:\n                k -= 1\n            else:\n                j += 1\n    return triplet\n\n\nif __name__ == \"__main__\":\n    print(find_triplet([1, 4, 45, 6, 10, 8], 22))\n    print(find_triplet([1, 5, 5, 5], 10))"
    },
    {
      "rank": 60,
      "score": 8.0,
      "candidate": "def find_triplet(arr):\n    arr.sort()\n    for i in range(len(arr)-2):\n        start = i+1\n        end = len(arr)-1\n        sum = arr[i]\n        while start<end:\n            if arr[start]+arr[end]<sum:\n                start+=1\n            elif arr[start]+arr[end]>sum:\n                end-=1\n            else:\n                return [arr[i],arr[start],arr[end]]\n\n\nif __name__==\"__main__\":\n    print(find_triplet([-1,0,1,2,-1,-4]))"
    },
    {
      "rank": 61,
      "score": 8.0,
      "candidate": "def find_triplet(arr, sum):\n    arr.sort()\n    for i in range(len(arr)):\n        left, right = i + 1, len(arr) - 1\n        while left < right:\n            if arr[left] + arr[right] == sum - arr[i]:\n                return [arr[i], arr[left], arr[right]]\n            elif arr[left] + arr[right] < sum - arr[i]:\n                left += 1\n            else:\n                right -= 1\n    return []\n\n\nprint(find_triplet([1, 4, 4, 4, 8, 9, 10, 17, 23, 25], 23))"
    },
    {
      "rank": 62,
      "score": 8.0,
      "candidate": "def triplet_sum(arr, target):\n    arr.sort()\n    for i in range(len(arr) - 2):\n        left = i + 1\n        right = len(arr) - 1\n        while left < right:\n            if arr[left] + arr[right] == target - arr[i]:\n                return [arr[i], arr[left], arr[right]]\n            elif arr[left] + arr[right] < target - arr[i]:\n                left += 1\n            else:\n                right -= 1\n    return False\n\n\nif __name__ == \"__main__\":\n    print(triplet_sum([-1, 0, 1, 2, -1, -4], 0))\n    print(triplet_sum([-1, 0, 1, 2, -1, -4], 1))\n    print(triplet_sum([-1, 0, 1, 2, -1, -4], 3))\n    print(triplet_sum([-1, 0, 1, 2, -1, -4], 4))\n    print(triplet_sum([-1, 0, 1, 2, -1, -4], 5))"
    },
    {
      "rank": 63,
      "score": 8.0,
      "candidate": "from typing import List\n\n\ndef find_triplet_sum(arr: List[int], sum: int) -> bool:\n    \"\"\"\n    Time Complexity: O(n^2)\n    Space Complexity: O(n)\n    \"\"\"\n    # sort the array\n    arr.sort()\n\n    # traverse through the array\n    for i in range(len(arr) - 2):\n        # check if the sum of the current element with the two other elements\n        # is equal to the given sum\n        if arr[i] + arr[i + 1] + arr[i + 2] == sum:\n            return True\n\n    return False\n\n\nif __name__ == \"__main__\":\n    assert find_triplet_sum([1, 5, 3, 7, 2, 9], 13)"
    },
    {
      "rank": 64,
      "score": 8.0,
      "candidate": "def find_triplet(array, total):\n    array.sort()\n    result = []\n    for i in range(len(array)):\n        left = i + 1\n        right = len(array) - 1\n        while left < right:\n            current_sum = array[i] + array[left] + array[right]\n            if current_sum == total:\n                result.append([array[i], array[left], array[right]])\n                left += 1\n                right -= 1\n            elif current_sum < total:\n                left += 1\n            else:\n                right -= 1\n    return result\n\n\ndef main():\n    array = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    total = 6\n    result = find_triplet(array, total)\n    print(result)\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 65,
      "score": 8.0,
      "candidate": "def triplet_sum(arr, target):\n    arr.sort()\n    result = []\n    for i in range(len(arr)-2):\n        j = i+1\n        k = len(arr)-1\n        while j < k:\n            if arr[i] + arr[j] + arr[k] == target:\n                result.append([arr[i], arr[j], arr[k]])\n                j += 1\n                k -= 1\n            elif arr[i] + arr[j] + arr[k] < target:\n                j += 1\n            else:\n                k -= 1\n    return result\n\n\ndef main():\n    print(triplet_sum([1, 2, 3, 4, 5], 6))\n    print(triplet_sum([2, 3, 4, 5, 6], 6))\n    print(triplet_sum([-1, 0, 1, 2, 3, 4, 5], 10))\n    print(triplet_sum([-1, 0, 1, 2, 3, 4, 5], 100))\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 66,
      "score": 8.0,
      "candidate": "def triplet_with_sum(arr, target):\n    arr.sort()\n    for i in range(len(arr) - 2):\n        j = i + 1\n        k = len(arr) - 1\n        while j < k:\n            if arr[i] + arr[j] + arr[k] == target:\n                return arr[i], arr[j], arr[k]\n            elif arr[i] + arr[j] + arr[k] < target:\n                j += 1\n            else:\n                k -= 1\n    return False\n\n\nif __name__ == \"__main__\":\n    print(triplet_with_sum([-1, 0, 1, 2, -1, -4], 0))"
    },
    {
      "rank": 67,
      "score": 8.0,
      "candidate": "def find_triplet(arr, sum):\n    arr.sort()\n    n = len(arr)\n    for i in range(n - 2):\n        low = i + 1\n        high = n - 1\n        while low < high:\n            if arr[i] + arr[low] + arr[high] < sum:\n                low += 1\n            elif arr[i] + arr[low] + arr[high] > sum:\n                high -= 1\n            else:\n                return (arr[i], arr[low], arr[high])\n    return False\n\n\nprint(find_triplet([1, 5, 5, 10, 11, 11, 11], 22))"
    },
    {
      "rank": 68,
      "score": 8.0,
      "candidate": "def triplet_sum(arr, sum_):\n    \"\"\"\n    Given an array and a sum, find if there are any triplet\n    that sums to the given sum\n    \"\"\"\n    arr.sort()\n    n = len(arr)\n    for i in range(n - 2):\n        left = i + 1\n        right = n - 1\n        while left < right:\n            if arr[i] + arr[left] + arr[right] == sum_:\n                return True\n            elif arr[i] + arr[left] + arr[right] < sum_:\n                left += 1\n            else:\n                right -= 1\n    return False"
    },
    {
      "rank": 69,
      "score": 8.0,
      "candidate": "def find_triplet(arr, sum_):\n    # Create an empty dictionary\n    dict_ = {}\n\n    # Iterate through the array\n    for i in range(len(arr)):\n        # Check if sum_ - arr[i] is present in the dictionary\n        if sum_ - arr[i] in dict_:\n            return [arr[i], dict_[sum_ - arr[i]], sum_]\n\n        # If arr[i] is not present in the dictionary\n        dict_[arr[i]] = i\n\n    return []\n\n\nif __name__ == '__main__':\n    print(find_triplet([1, 5, 5, 4, 4, 3, 3, 2, 2, 1], 10))"
    },
    {
      "rank": 70,
      "score": 8.0,
      "candidate": "from typing import List\n\n\ndef find_triplet_sum(arr: List[int], target: int) -> List[int]:\n    \"\"\"\n    O(n^2)\n    \"\"\"\n    arr.sort()\n\n    triplet = []\n\n    for i in range(len(arr) - 2):\n        left, right = i + 1, len(arr) - 1\n\n        while left < right:\n            current_sum = arr[i] + arr[left] + arr[right]\n            if current_sum == target:\n                triplet = [arr[i], arr[left], arr[right]]\n                break\n            elif current_sum < target:\n                left += 1\n            else:\n                right -= 1\n\n    return triplet\n\n\nif __name__ == \"__main__\":\n    assert find_triplet_sum([1, 5, 5, 10, -5, 3, 3], 10) == [-5, 5, 10]"
    },
    {
      "rank": 71,
      "score": 8.0,
      "candidate": "from typing import List\n\n\ndef triplet_sum(arr: List[int], target: int) -> List[List[int]]:\n    \"\"\"\n    Time Complexity: O(n^2)\n    Space Complexity: O(n)\n    \"\"\"\n    n = len(arr)\n    result = []\n\n    for i in range(n - 1):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if arr[i] + arr[j] + arr[k] == target:\n                    result.append([arr[i], arr[j], arr[k]])\n\n    return result\n\n\nif __name__ == \"__main__\":\n    assert triplet_sum([1, 3, 5, 2, 8, -4, 11], 10) == [[3, 1, 2]]"
    },
    {
      "rank": 72,
      "score": 8.0,
      "candidate": "def find_triplet_sum(arr, sum):\n    arr.sort()\n    triplet = []\n    for i in range(len(arr) - 2):\n        if i > 0 and arr[i] == arr[i - 1]:\n            continue\n        l = i + 1\n        r = len(arr) - 1\n        while l < r:\n            if arr[l] + arr[r] == sum - arr[i]:\n                triplet = [arr[i], arr[l], arr[r]]\n                break\n            elif arr[l] + arr[r] < sum - arr[i]:\n                l += 1\n            else:\n                r -= 1\n\n    if len(triplet) == 0:\n        return []\n    else:\n        return triplet\n\n\nif __name__ == \"__main__\":\n    assert find_triplet_sum([1, 4, 4, 4, 8, 9, 10, 17, 23, 25], 22) == [4, 8, 17]"
    },
    {
      "rank": 73,
      "score": 7.0,
      "candidate": "from collections import defaultdict\n\n\ndef find_triplet(arr, n):\n    if n < 3:\n        return\n    arr.sort()\n    dict1 = defaultdict(list)\n    for i in range(n):\n        dict1[arr[i]].append(i)\n\n    for i in range(n-1):\n        for j in range(i+1, n-1):\n            required = -(arr[i]+arr[j])\n            if required in dict1:\n                for k in dict1[required]:\n                    if k > j:\n                        print(arr[i], arr[j], arr[k])\n\n\nif __name__ == '__main__':\n    arr = [1, 4, 45, 6, 10, 8]\n    n = len(arr)\n    find_triplet(arr, n)"
    },
    {
      "rank": 74,
      "score": 1.0,
      "candidate": "from collections import defaultdict\nfrom typing import List\n\n\ndef triplet_with_sum(arr: List[int], target: int) -> List[List[int]]:\n    \"\"\"\n    Time Complexity: O(n^2)\n    Space Complexity: O(n)\n    \"\"\"\n    triplet_map = defaultdict(list)\n\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            triplet_map[target - (arr[i] + arr[j])].append((i, j))\n\n    triplets = []\n\n    for key in triplet_map:\n        if key in triplet_map:\n            for index_tuple in triplet_map[key]:\n                for i, j in triplet_map[key]:\n                    if i != index_tuple[0] and j != index_tuple[1]:\n                        triplets.append([arr[i], arr[j], arr[index_tuple[0]]])\n\n    return triplets\n\n\nif __name__ == \"__main__\":\n    assert triplet_with_sum([1, 1, 2, 3, 5], 4) == [[1, 1, 2]]"
    },
    {
      "rank": 75,
      "score": 1.0,
      "candidate": "from __future__ import annotations\n\n\ndef find_triplet_sum(arr: list[int], sum: int) -> bool:\n    \"\"\"\n    Time Complexity: O(n^2)\n    Space Complexity: O(n)\n    \"\"\"\n    for i in range(len(arr) - 2):\n        for j in range(i + 1, len(arr) - 1):\n            for k in range(j + 1, len(arr)):\n                if arr[i] + arr[j] + arr[k] == sum:\n                    return True\n    return False\n\n\nif __name__ == \"__main__\":\n    assert find_triplet_sum([1, 2, 3, 4, 5, 6], 9)\n    assert not find_triplet_sum([1, 2, 3, 4, 5, 6], 20)"
    },
    {
      "rank": 76,
      "score": 1.0,
      "candidate": "from typing import List\n\n\ndef find_triplet(arr: List[int]) -> List[int]:\n    \"\"\"\n    O(n^2) time complexity\n    O(n) space complexity\n    \"\"\"\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            for k in range(j + 1, len(arr)):\n                if arr[i] + arr[j] + arr[k] == 0:\n                    return [arr[i], arr[j], arr[k]]\n\n    return []\n\n\nif __name__ == \"__main__\":\n    assert find_triplet([-1, 0, 1, 2, -1, -4]) == [-1, -1, 2]"
    },
    {
      "rank": 77,
      "score": 1.0,
      "candidate": "from typing import List\n\n\ndef find_triplet(arr: List[int]) -> bool:\n    \"\"\"\n    Time Complexity: O(n^2)\n    Space Complexity: O(n)\n    \"\"\"\n\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            for k in range(j + 1, len(arr)):\n                if arr[i] + arr[j] + arr[k] == 0:\n                    return True\n\n    return False\n\n\nif __name__ == \"__main__\":\n    assert find_triplet([-1, 0, 1, 2, -1, -4])"
    },
    {
      "rank": 78,
      "score": 1.0,
      "candidate": "def triplet_with_sum(arr, target):\n    \"\"\"\n    :param: arr - input array\n    :param: target - target value\n    return bool - if there exist HSP\n    TODO: complete this function and return True if there exist HSP, else False\n    \"\"\"\n    arr.sort()\n    for i in range(len(arr)):\n        left = i + 1\n        right = len(arr) - 1\n        while left < right:\n            current_sum = arr[i] + arr[left] + arr[right]\n            if current_sum == target:\n                return True\n            elif current_sum < target:\n                left += 1\n            else:\n                right -= 1\n    return False\n\n\ndef main():\n    # Start with the empty array and a target of 50\n    arr = []\n    target = 50\n    # Fill the array with values that you choose, from 1 to 100\n    arr = [15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70, 75, 80, 85, 90, 95, 100]\n    # Output should be: True\n    print(triplet_with_sum(arr, target))\n\n    # Start with the empty array and a target of 200\n    arr = []\n    target = 200\n    # Fill the array with values that you choose, from 1 to 100\n    arr = [15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70, 75, 80, 85, 90, 95, 100]\n    # Output should be: False\n    print(triplet_with_sum(arr, target))\n\n    # Start with the empty array and a target of 200\n    arr = []\n    target = 200\n    # Fill"
    },
    {
      "rank": 79,
      "score": 1.0,
      "candidate": "def find_triplet_with_sum(input_array, sum_of_triplet):\n    \"\"\"\n    Return triplet with sum of the given array\n    >>> find_triplet_with_sum([1, 2, 3, 4, 5], 10)\n    [1, 2, 3]\n    >>> find_triplet_with_sum([1, 2, 3, 4, 5], 6)\n    [-1, -1, -1]\n    >>> find_triplet_with_sum([-10, 10, 10], 10)\n    [10, -10, 10]\n    >>> find_triplet_with_sum([-10, 10, 10], 0)\n    [-10, 10, 10]\n    >>> find_triplet_with_sum([1, 2, 3, 4, 5], 100)\n    [-1, -1, -1]\n    >>> find_triplet_with_sum([1, 2, 3, 4, 5], -100)\n    [-1, -1, -1]\n    >>> find_triplet_with_sum([1, 1, 1, 1, 1], 100)\n    [-1, -1, -1]\n    >>> find_triplet_with_sum([1, 1, 1, 1, 1], 0)\n    [-1, -1, -1]\n    \"\"\"\n    input_array.sort()\n    for i in range(len(input_array) - 2):\n        left = i + 1\n        right = len(input_array) - 1\n        sum_of_triplet = sum_of_triplet - input_array[i]\n        while left < right:\n            if input_array[left] + input_array[right] == sum_of_triplet:\n                return [input_array[i], input_array[left], input_array[right]]\n            elif input_array[left"
    },
    {
      "rank": 80,
      "score": 1.0,
      "candidate": "from typing import List\n\n\ndef triplet_with_sum(arr: List[int], sum: int) -> List[int]:\n    \"\"\"\n    Time Complexity: O(n^2)\n    Space Complexity: O(1)\n    \"\"\"\n    if len(arr) < 3:\n        return []\n\n    arr.sort()\n    for i in range(len(arr) - 2):\n        left, right = i + 1, len(arr) - 1\n        while left < right:\n            curr_sum = arr[i] + arr[left] + arr[right]\n            if curr_sum == sum:\n                return [arr[i], arr[left], arr[right]]\n            elif curr_sum < sum:\n                left += 1\n            else:\n                right -= 1\n    return []\n\n\nif __name__ == \"__main__\":\n    assert triplet_with_sum([1, 5, 5, 2, 2, 2, 4, 3, 3], 10) == [5, 5, 4]"
    },
    {
      "rank": 81,
      "score": 1.0,
      "candidate": "from typing import List\n\n\ndef triplet_with_sum(arr: List[int], sum_: int) -> bool:\n    \"\"\"\n    Time Complexity: O(n^2)\n    Space Complexity: O(1)\n    \"\"\"\n    arr.sort()\n\n    for i in range(len(arr) - 2):\n        l, r = i + 1, len(arr) - 1\n        while l < r:\n            if arr[i] + arr[l] + arr[r] == sum_:\n                return True\n            elif arr[i] + arr[l] + arr[r] < sum_:\n                l += 1\n            else:\n                r -= 1\n\n    return False\n\n\nif __name__ == \"__main__\":\n    assert triplet_with_sum([-1, 0, 1, 2, -1, -4], -1)"
    },
    {
      "rank": 82,
      "score": 1.0,
      "candidate": "from typing import List\n\n\ndef find_triplet_sum(array: List[int], sum_: int) -> List[int]:\n    \"\"\"\n    Time Complexity: O(n^2)\n    Space Complexity: O(1)\n    \"\"\"\n    for i in range(len(array) - 2):\n        for j in range(i + 1, len(array) - 1):\n            for k in range(j + 1, len(array)):\n                if array[i] + array[j] + array[k] == sum_:\n                    return [array[i], array[j], array[k]]\n\n    return []\n\n\nif __name__ == \"__main__\":\n    assert find_triplet_sum([1, 2, 3, 4, 5], 6) == [1, 2, 3]\n    assert find_triplet_sum([1, 2, 4, 5, 6], 6) == [1, 2, 5]\n    assert find_triplet_sum([1, 2, 4, 5, 6], 7) == []\n    assert find_triplet_sum([1, 2, 4, 5, 6], 8) == []"
    },
    {
      "rank": 83,
      "score": 1.0,
      "candidate": "from collections import defaultdict\n\n\ndef find_triplet(arr, total):\n    \"\"\"\n    Return the triplet that sum to total\n    :param arr: list of integer\n    :param total: integer\n    :return: list of triplet\n    \"\"\"\n    if len(arr) < 3:\n        return []\n    if max(arr) > total:\n        return []\n    arr.sort()\n    triplet = []\n    for i in range(len(arr) - 2):\n        if i > 0 and arr[i] == arr[i - 1]:\n            continue\n        j = i + 1\n        k = len(arr) - 1\n        while j < k:\n            if arr[i] + arr[j] + arr[k] == total:\n                triplet.append([arr[i], arr[j], arr[k]])\n                while j < k and arr[j] == arr[j + 1]:\n                    j += 1\n                while j < k and arr[k] == arr[k - 1]:\n                    k -= 1\n                j += 1\n                k -= 1\n            elif arr[i] + arr[j] + arr[k] < total:\n                j += 1\n            else:\n                k -= 1\n    return triplet\n\n\ndef find_triplet_optimized(arr, total):\n    \"\"\"\n    Return the triplet that sum to total\n    :param arr: list of integer\n    :param total: integer\n    :return: list of triplet\n    \"\"\"\n    if len(arr) < 3:\n        return []\n    if max(arr) > total:\n        return []\n    arr.sort()\n    triplet = []\n    freq = defaultdict(int)\n    for i in arr:\n        freq[i] += 1\n    for i in range(len(arr) - 2):\n        if i > 0 and arr[i] == arr[i - 1]:\n            continue\n        j = i + 1\n        k = len(arr) - 1\n        while j < k:\n            if arr[i] + arr[j] +"
    },
    {
      "rank": 84,
      "score": 1.0,
      "candidate": "from collections import defaultdict\nfrom typing import List\n\n\ndef find_triplet_sum(arr: List[int], target: int) -> List[List[int]]:\n    \"\"\"\n    Time Complexity: O(n^2)\n    Space Complexity: O(n)\n    \"\"\"\n\n    triplets: List[List[int]] = []\n\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            for k in range(j + 1, len(arr)):\n                if arr[i] + arr[j] + arr[k] == target:\n                    triplets.append([arr[i], arr[j], arr[k]])\n\n    return triplets\n\n\ndef find_triplet_sum_optimized(arr: List[int], target: int) -> List[List[int]]:\n    \"\"\"\n    Time Complexity: O(n^2)\n    Space Complexity: O(n)\n    \"\"\"\n\n    triplets: List[List[int]] = []\n    dict_: defaultdict = defaultdict(list)\n\n    for i in range(len(arr)):\n        dict_[arr[i]].append(i)\n\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            k = target - arr[i] - arr[j]\n            if k in dict_ and i not in dict_[k]:\n                triplets.append([arr[i], arr[j], k])\n\n    return triplets\n\n\nif __name__ == \"__main__\":\n    assert find_triplet_sum([1, 3, 5, 7, 9], 16) == [[1, 5, 9], [1, 7, 9], [3, 5, 7]]\n    assert find_triplet_sum([1, 3, 5, 7, 9], 14) == []\n    assert find_triplet_sum([1, 3, 5, 7, 9], 13) == [[1, 3, 7]]\n\n    assert"
    },
    {
      "rank": 85,
      "score": 1.0,
      "candidate": "def triplet_sum(arr, sum):\n    \"\"\"\n    :param: arr - input array\n    :param: sum - sum of the triplet\n    TODO: complete this method and return a boolean\n    return True if there is a triplet with sum equal to 'sum'\n    else return False\n    \"\"\"\n    arr.sort()\n    for i in range(len(arr) - 2):\n        left = i + 1\n        right = len(arr) - 1\n        while left < right:\n            if arr[left] + arr[right] == sum - arr[i]:\n                return True\n            elif arr[left] + arr[right] < sum - arr[i]:\n                left += 1\n            else:\n                right -= 1\n    return False\n\n\ndef test_function(test_case):\n    arr = test_case[0]\n    sum = test_case[1]\n    solution = test_case[2]\n    output = triplet_sum(arr, sum)\n    if output == solution:\n        print(\"Pass\")\n    else:\n        print(\"Fail\")\n\n\narr = [12, 3, 1, 2, -6, 5, -8, 6]\nsum = 0\nsolution = True\ntest_case = [arr, sum, solution]\ntest_function(test_case)\n\narr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nsum = 16\nsolution = True\ntest_case = [arr, sum, solution]\ntest_function(test_case)\n\narr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nsum = 17\nsolution = False\ntest_case = [arr, sum, solution]\ntest_function(test_case)"
    },
    {
      "rank": 86,
      "score": 1.0,
      "candidate": "def find_triplet(arr, sum):\n    # TODO: Write your code here\n    arr.sort()\n    for i in range(len(arr)-2):\n        low = i+1\n        high = len(arr)-1\n        while low<high:\n            if arr[i]+arr[low]+arr[high]==sum:\n                return arr[i], arr[low], arr[high]\n            elif arr[i]+arr[low]+arr[high]<sum:\n                low+=1\n            else:\n                high-=1\n    return -1\n\nprint(find_triplet([3, 0, -2, -1, 1, 2], 1))\nprint(find_triplet([-1, 0, 1, 2, -1, -4], -1))\nprint(find_triplet([-1, 0, 1, 2, -1, -4], 0))\nprint(find_triplet([-1, 0, 1, 2, -1, -4], 2))\nprint(find_triplet([-1, 0, 1, 2, -1, -4], 3))\nprint(find_triplet([-1, 0, 1, 2, -1, -4], 4))\nprint(find_triplet([-1, 0, 1, 2, -1, -4], 5))\nprint(find_triplet([-1, 0, 1, 2, -1, -4], 6))\nprint(find_triplet([-1, 0, 1, 2, -1, -4], 7))\nprint(find_triplet([-1, 0, 1, 2, -1, -4], 8))\nprint(find_triplet([-1, 0, 1, 2, -1, -4], 9))\nprint(find_triplet([-1, 0, 1, 2, -1, -4], 10))\nprint(find_triplet([-1, 0, 1"
    },
    {
      "rank": 87,
      "score": 1.0,
      "candidate": "from typing import List\n\n\ndef find_triplet(array: List[int]) -> List[int]:\n    \"\"\"\n    Time Complexity: O(n^2)\n    Space Complexity: O(1)\n    \"\"\"\n    array.sort()\n    triplet = []\n    for i in range(len(array) - 2):\n        left, right = i + 1, len(array) - 1\n        while left < right:\n            if array[i] + array[left] + array[right] == 0:\n                triplet = [array[i], array[left], array[right]]\n                break\n            elif array[i] + array[left] + array[right] < 0:\n                left += 1\n            else:\n                right -= 1\n    return triplet\n\n\nif __name__ == \"__main__\":\n    assert find_triplet([-1, 0, 1, 2, -1, -4]) == [-1, 0, 1]"
    },
    {
      "rank": 88,
      "score": 1.0,
      "candidate": "from collections import defaultdict\n\n\ndef find_triplet_sum(arr, target):\n    \"\"\"\n    >>> find_triplet_sum([1, 2, 3, 4, 5, 6], 6)\n    [[1, 2, 3], [1, 3, 5], [1, 4, 5], [2, 3, 4], [2, 3, 5], [2, 4, 5], [3, 4, 5]]\n    \"\"\"\n    arr.sort()\n    triplets = []\n    for i in range(len(arr) - 2):\n        left, right = i + 1, len(arr) - 1\n        while left < right:\n            curr_sum = arr[i] + arr[left] + arr[right]\n            if curr_sum == target:\n                triplets.append([arr[i], arr[left], arr[right]])\n                left += 1\n                right -= 1\n            elif curr_sum < target:\n                left += 1\n            else:\n                right -= 1\n    return triplets\n\n\ndef find_triplet_sum_opt(arr, target):\n    \"\"\"\n    >>> find_triplet_sum_opt([1, 2, 3, 4, 5, 6], 6)\n    [[1, 2, 3], [1, 3, 5], [1, 4, 5], [2, 3, 4], [2, 3, 5], [2, 4, 5], [3, 4, 5]]\n    \"\"\"\n    arr.sort()\n    triplets = []\n    for i in range(len(arr) - 2):\n        left, right = i + 1, len(arr) - 1\n        while left < right:\n            curr_sum = arr[i] + arr[left] + arr[right]\n            if curr_sum == target:\n                triplets.append([arr[i], arr[left], arr[right]])\n                left += 1\n                right -= 1\n            elif curr_sum < target:\n                left +="
    },
    {
      "rank": 89,
      "score": 1.0,
      "candidate": "def triplet_sum(arr, n):\n    \"\"\"\n    :param: arr - input integer array\n    :param: n - size of array\n    TODO: complete this function\n    \"\"\"\n    arr.sort()\n    for i in range(n-2):\n        j = i + 1\n        k = n - 1\n        while j < k:\n            if arr[i] + arr[j] + arr[k] == 0:\n                return True\n            elif arr[i] + arr[j] + arr[k] > 0:\n                k -= 1\n            else:\n                j += 1\n    return False\n\nprint(triplet_sum([-1,0,1,2,-1,-4], 6))"
    },
    {
      "rank": 90,
      "score": 1.0,
      "candidate": "from typing import List\n\n\ndef find_triplet(array: List[int]) -> List[int]:\n    \"\"\"\n    Time Complexity: O(n*n*n)\n    Space Complexity: O(1)\n    \"\"\"\n\n    array.sort()\n\n    for i in range(len(array) - 2):\n        left = i + 1\n        right = len(array) - 1\n\n        while left < right:\n            current_sum = array[i] + array[left] + array[right]\n\n            if current_sum == 0:\n                return [array[i], array[left], array[right]]\n            elif current_sum < 0:\n                left += 1\n            else:\n                right -= 1\n\n\nif __name__ == \"__main__\":\n    assert find_triplet([-1, 0, 1, 2, -1, -4]) == [-1, -1, 2]"
    },
    {
      "rank": 91,
      "score": 1.0,
      "candidate": "from typing import List\n\n\ndef triplet_with_sum(nums: List[int], sum_: int) -> List[int]:\n    \"\"\"\n    Time Complexity: O(n^2)\n    Space Complexity: O(1)\n    \"\"\"\n    nums.sort()\n    length = len(nums)\n    for i in range(length - 2):\n        for j in range(i + 1, length - 1):\n            for k in range(j + 1, length):\n                if nums[i] + nums[j] + nums[k] == sum_:\n                    return [nums[i], nums[j], nums[k]]\n\n\nif __name__ == \"__main__\":\n    assert triplet_with_sum([1, 0, -1, 0, -2, 2], 0) == [-2, -1, 1]"
    },
    {
      "rank": 92,
      "score": 1.0,
      "candidate": "from typing import List\n\n\ndef find_triplet_with_sum(array: List[int], target: int) -> List[int]:\n    \"\"\"\n    Time Complexity: O(n^2)\n    Space Complexity: O(1)\n    \"\"\"\n    for i in range(len(array) - 2):\n        for j in range(i + 1, len(array) - 1):\n            for k in range(j + 1, len(array)):\n                if array[i] + array[j] + array[k] == target:\n                    return [array[i], array[j], array[k]]\n    return []\n\n\nif __name__ == \"__main__\":\n    assert find_triplet_with_sum([3, 5, -4, 8, 11, 1, -1, 6], 10) == [-1, 11, 10]"
    },
    {
      "rank": 93,
      "score": 1.0,
      "candidate": "from collections import defaultdict\n\n\ndef triplet_sum_to_zero(arr, n):\n    d = defaultdict(list)\n    for i in range(n):\n        d[-arr[i]].append(i)\n\n    for i in range(n):\n        for j in d[arr[i]]:\n            if i != j:\n                for k in d[-arr[i] + arr[j]]:\n                    if k != i and k != j:\n                        return [arr[i], arr[j], arr[k]]\n\n\nif __name__ == \"__main__\":\n    arr = [0, -1, 2, -3, 1]\n    print(triplet_sum_to_zero(arr, len(arr)))"
    },
    {
      "rank": 94,
      "score": 1.0,
      "candidate": "from typing import List\n\n\ndef find_triplet_sum(numbers: List[int], sum: int) -> List[int]:\n    \"\"\"\n    Time Complexity: O(n^2)\n    Space Complexity: O(1)\n    \"\"\"\n\n    numbers.sort()\n    for i in range(len(numbers) - 2):\n        left = i + 1\n        right = len(numbers) - 1\n\n        while left < right:\n            current_sum = numbers[i] + numbers[left] + numbers[right]\n            if current_sum == sum:\n                return [numbers[i], numbers[left], numbers[right]]\n            if current_sum < sum:\n                left += 1\n            else:\n                right -= 1\n    return []\n\n\nif __name__ == \"__main__\":\n    assert find_triplet_sum([3, 5, -1, -5, 4], -5) == [-1, -5, 4]"
    },
    {
      "rank": 95,
      "score": 1.0,
      "candidate": "from typing import List\n\n\ndef find_triplet(array: List[int], target: int) -> List[int]:\n    \"\"\"\n    This is a O(n^2) solution.\n    \"\"\"\n    for i in range(len(array)):\n        for j in range(i + 1, len(array)):\n            for k in range(j + 1, len(array)):\n                if array[i] + array[j] + array[k] == target:\n                    return [array[i], array[j], array[k]]\n\n    return []\n\n\nif __name__ == \"__main__\":\n    assert find_triplet([1, 5, 5, 1, 25], 10) == [5, 5, 1]"
    },
    {
      "rank": 96,
      "score": 1.0,
      "candidate": "from typing import List\n\n\ndef triplet_with_sum(array: List[int], sum: int) -> List[int]:\n    \"\"\"\n    Time Complexity: O(n^2)\n    Space Complexity: O(n)\n    \"\"\"\n    array.sort()\n\n    triplet = []\n\n    for i in range(len(array) - 2):\n        left = i + 1\n        right = len(array) - 1\n\n        while left < right:\n            if array[i] + array[left] + array[right] == sum:\n                triplet = [array[i], array[left], array[right]]\n                break\n            elif array[i] + array[left] + array[right] < sum:\n                left += 1\n            else:\n                right -= 1\n\n    return triplet\n\n\nif __name__ == \"__main__\":\n    assert triplet_with_sum([1, 2, 3, 4, 5, 6, 7, 8], 12) == [4, 5, 6]"
    },
    {
      "rank": 97,
      "score": 1.0,
      "candidate": "from collections import defaultdict\n\n\ndef find_triplet_sum(arr, n):\n    \"\"\"\n    Time Complexity: O(n^2)\n    Space Complexity: O(n)\n    \"\"\"\n    if n < 3:\n        return\n\n    d = defaultdict(int)\n\n    for i in range(n - 2):\n        for j in range(i + 1, n - 1):\n            d[arr[i] + arr[j]] += 1\n\n    for i in range(n - 1, 2, -1):\n        if arr[i] in d and d[arr[i]] > 0:\n            return True\n\n    return False\n\n\ndef main():\n\n    arr = [1, 2, 4, 5, 7]\n    n = len(arr)\n    print(find_triplet_sum(arr, n))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 98,
      "score": 1.0,
      "candidate": "from collections import defaultdict\n\n\ndef find_triplet(arr, sum):\n    \"\"\"\n    :param arr: array of numbers\n    :param sum: sum of triplet\n    :return: triplet with sum of sum\n    \"\"\"\n    hash_map = defaultdict(int)\n    for el in arr:\n        hash_map[el] += 1\n\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            expected = sum - (arr[i] + arr[j])\n            if expected in hash_map and hash_map[expected] > 0:\n                return [arr[i], arr[j], expected]\n    return False\n\n\nif __name__ == \"__main__\":\n    assert find_triplet([1, 5, 3, 2, 7, 9, 12], 12) == [1, 3, 10]\n    assert find_triplet([1, 5, 3, 2, 7, 9, 12], 13) is False"
    },
    {
      "rank": 99,
      "score": 1.0,
      "candidate": "def triplet_sum(arr, sum):\n    \"\"\"\n    >>> triplet_sum([-1, 0, 1, 2, -1, 4], 2)\n    [[-1, 0, 1], [0, 1, 2]]\n    >>> triplet_sum([1, 0, -1, 0, -2, 2], 0)\n    [[-2, -1, 1], [-2, 0, 2], [-1, 0, 1]]\n    \"\"\"\n    arr.sort()\n    output = []\n    for i in range(len(arr)):\n        left, right = i + 1, len(arr) - 1\n        while left < right:\n            curr_sum = arr[i] + arr[left] + arr[right]\n            if curr_sum == sum:\n                output.append([arr[i], arr[left], arr[right]])\n                left += 1\n                right -= 1\n            elif curr_sum < sum:\n                left += 1\n            else:\n                right -= 1\n    return output\n\n\ndef triplet_sum_efficient(arr, sum):\n    \"\"\"\n    >>> triplet_sum_efficient([-1, 0, 1, 2, -1, 4], 2)\n    [[-1, 0, 1], [0, 1, 2]]\n    >>> triplet_sum_efficient([1, 0, -1, 0, -2, 2], 0)\n    [[-2, -1, 1], [-2, 0, 2], [-1, 0, 1]]\n    \"\"\"\n    arr.sort()\n    output = []\n    for i in range(len(arr) - 2):\n        left, right = i + 1, len(arr) - 1\n        while left < right:\n            curr_sum = arr[i] + arr[left] + arr[right]\n            if curr_sum == sum:\n                output.append([arr[i], arr[left], arr[right]])\n                left += 1\n                right -= 1\n            elif curr_sum < sum"
    },
    {
      "rank": 100,
      "score": 1.0,
      "candidate": "def find_triplet(arr: list, sum: int) -> list:\n    \"\"\"\n    Time Complexity: O(n^2)\n    \"\"\"\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            for k in range(j + 1, len(arr)):\n                if arr[i] + arr[j] + arr[k] == sum:\n                    return [arr[i], arr[j], arr[k]]\n\n\ndef find_triplet_using_sort(arr: list, sum: int) -> list:\n    \"\"\"\n    Time Complexity: O(nlogn)\n    \"\"\"\n    arr.sort()\n    for i in range(len(arr) - 2):\n        left, right = i + 1, len(arr) - 1\n        while left < right:\n            current_sum = arr[i] + arr[left] + arr[right]\n            if current_sum == sum:\n                return [arr[i], arr[left], arr[right]]\n            elif current_sum < sum:\n                left += 1\n            else:\n                right -= 1\n\n\ndef main():\n    arr = [1, 4, 45, 6, 10, 8]\n    sum = 22\n    print(find_triplet(arr, sum))\n    print(find_triplet_using_sort(arr, sum))\n\n\nif __name__ == '__main__':\n    main()"
    }
  ]
}