{
  "timestamp": "2025-09-15T00:36:36.376843",
  "method": "improved_llm_judge",
  "judge_model": "codellama/CodeLlama-7b-Python-hf",
  "target_model": "codellama-7b",
  "dataset": "mbpp",
  "problem_number": 305,
  "total_candidates": 100,
  "results": [
    {
      "rank": 1,
      "score": 10.0,
      "candidate": "from typing import List\n\n\ndef find_index_last_occurrence_of_number_in_sorted_array(arr: List[int], number: int) -> int:\n    \"\"\"Find the index of the last occurrence of a given number in a sorted array.\n\n    Args:\n        arr (List[int]): sorted array\n        number (int): number to search for\n\n    Returns:\n        int: index of the last occurrence of number\n    \"\"\"\n    low = 0\n    high = len(arr) - 1\n\n    while low <= high:\n        mid = (low + high) // 2\n        if number > arr[mid]:\n            low = mid + 1\n        elif number < arr[mid]:\n            high = mid - 1\n        else:\n            if arr[mid] == number:\n                if arr[mid - 1] != number:\n                    return mid\n                else:\n                    high = mid - 1\n\n    return -1\n\n\nif __name__ == \"__main__\":\n    print(find_index_last_occurrence_of_number_in_sorted_array([1, 2, 2, 3, 4, 4, 5], 2))"
    },
    {
      "rank": 2,
      "score": 10.0,
      "candidate": "def last_index_of(arr, num):\n    \"\"\"\n    :param arr: List[int]\n    :param num: int\n    :return: int\n    \"\"\"\n    if len(arr) == 0:\n        return -1\n\n    left = 0\n    right = len(arr) - 1\n    while left <= right:\n        mid = left + (right - left) // 2\n        if arr[mid] == num:\n            right = mid - 1\n        elif arr[mid] < num:\n            left = mid + 1\n        else:\n            right = mid - 1\n\n    if left <= right:\n        return -1\n    return right\n\n\nif __name__ == \"__main__\":\n    print(last_index_of([1, 2, 2, 2, 3, 4, 7, 7, 8, 8, 8, 8], 8))\n    print(last_index_of([1, 2, 2, 2, 3, 4, 7, 7, 8, 8, 8, 8], 9))\n    print(last_index_of([1, 2, 2, 2, 3, 4, 7, 7, 8, 8, 8, 8], 2))\n    print(last_index_of([1, 2, 2, 2, 3, 4, 7, 7, 8, 8, 8, 8], 3))\n    print(last_index_of([1, 2, 2, 2, 3, 4, 7, 7, 8, 8, 8, 8], 4))\n    print(last_index_of([1, 2, 2, 2, 3, 4, 7, 7, 8, 8, 8, 8], 7))\n    print(last_index_of([1, 2, 2, 2, 3, 4, 7, 7, 8, 8, 8, 8], 1))\n    print"
    },
    {
      "rank": 3,
      "score": 10.0,
      "candidate": "from typing import List\n\n\n# Time Complexity: O(log(n))\n# Space Complexity: O(1)\ndef last_occurrence(arr: List[int], num: int) -> int:\n    left, right = 0, len(arr) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == num:\n            right = mid - 1\n        elif arr[mid] < num:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return left if arr[left] == num else -1\n\n\nif __name__ == \"__main__\":\n    print(last_occurrence([1, 2, 2, 2, 3, 4, 7, 8, 8], 8))"
    },
    {
      "rank": 4,
      "score": 10.0,
      "candidate": "def search(arr, num):\n    # Your code here\n    start = 0\n    end = len(arr) - 1\n\n    while start <= end:\n        mid = (start + end) // 2\n\n        if arr[mid] == num:\n            if arr[mid] == arr[end]:\n                return end\n            else:\n                return mid\n        elif arr[mid] > num:\n            end = mid - 1\n        else:\n            start = mid + 1\n\n    return -1\n\n\nif __name__ == '__main__':\n    print(search([1, 2, 2, 4, 5, 5, 5, 5, 6, 8, 8, 8, 8, 8, 8, 9], 8))"
    },
    {
      "rank": 5,
      "score": 10.0,
      "candidate": "def find_last_occurence(arr, number):\n    if arr is None or len(arr) == 0:\n        return -1\n\n    left, right = 0, len(arr) - 1\n    while left <= right:\n        mid = left + (right - left) // 2\n        if arr[mid] == number:\n            right = mid - 1\n        elif arr[mid] > number:\n            right = mid - 1\n        else:\n            left = mid + 1\n\n    if left < len(arr) and arr[left] == number:\n        return left\n    return -1\n\n\nif __name__ == \"__main__\":\n    print(find_last_occurence([1, 2, 2, 4, 5, 5, 5, 6, 7, 8], 5))"
    },
    {
      "rank": 6,
      "score": 10.0,
      "candidate": "def last_occurrence(arr, num):\n    l, r = 0, len(arr) - 1\n\n    while l <= r:\n        mid = (l + r) // 2\n\n        if arr[mid] == num:\n            r = mid - 1\n        elif arr[mid] < num:\n            l = mid + 1\n        else:\n            r = mid - 1\n\n    if l > len(arr) - 1:\n        return -1\n    else:\n        return l\n\n\nprint(last_occurrence([1, 3, 3, 5, 7, 9, 9, 10], 9))\nprint(last_occurrence([1, 3, 3, 5, 7, 9, 9, 10], 10))\nprint(last_occurrence([1, 3, 3, 5, 7, 9, 9, 10], 11))\nprint(last_occurrence([1, 3, 3, 5, 7, 9, 9, 10], 3))"
    },
    {
      "rank": 7,
      "score": 10.0,
      "candidate": "from typing import List\n\n\ndef last_occurrence(arr: List[int], num: int) -> int:\n    \"\"\"\n    :param arr: sorted array\n    :param num: number to find the last occurrence of\n    :return: index of last occurrence of num in arr\n    \"\"\"\n    l = 0\n    r = len(arr) - 1\n    result = -1\n\n    while l <= r:\n        mid = (l + r) // 2\n        if arr[mid] == num:\n            result = mid\n            r = mid - 1\n        elif arr[mid] < num:\n            l = mid + 1\n        else:\n            r = mid - 1\n\n    return result\n\n\nif __name__ == \"__main__\":\n    assert last_occurrence([1, 2, 2, 2, 2, 3, 4, 7, 8, 8], 2) == 4\n    assert last_occurrence([1, 2, 2, 2, 2, 3, 4, 7, 8, 8], 8) == 8"
    },
    {
      "rank": 8,
      "score": 10.0,
      "candidate": "def last_occurrence(arr, num):\n    left, right = 0, len(arr) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] < num:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return right\n\n\ndef last_occurrence_v2(arr, num):\n    left, right = 0, len(arr) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] >= num:\n            right = mid - 1\n        else:\n            left = mid + 1\n    return left\n\n\nif __name__ == \"__main__\":\n    arr = [1, 2, 2, 2, 2, 3, 4, 7, 8, 8]\n    print(last_occurrence_v2(arr, 2))"
    },
    {
      "rank": 9,
      "score": 10.0,
      "candidate": "from typing import List\n\n\ndef last_occurrence_index(arr: List[int], number: int) -> int:\n    \"\"\"\n    Time Complexity: O(log(n))\n    Space Complexity: O(1)\n    \"\"\"\n    if not arr:\n        return -1\n\n    left = 0\n    right = len(arr) - 1\n\n    while left <= right:\n        middle = (left + right) // 2\n        if number < arr[middle]:\n            right = middle - 1\n        elif number > arr[middle]:\n            left = middle + 1\n        else:\n            if middle == len(arr) - 1 or number < arr[middle + 1]:\n                return middle\n            right = middle\n\n    return -1\n\n\nif __name__ == \"__main__\":\n    print(last_occurrence_index([1, 2, 2, 2, 3, 4, 7, 8, 8], 2))"
    },
    {
      "rank": 10,
      "score": 10.0,
      "candidate": "def last_occurrence(arr, n):\n    \"\"\"\n    :param arr: list\n    :param n: int\n    :return: int\n    \"\"\"\n    left = 0\n    right = len(arr) - 1\n    result = -1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == n:\n            result = mid\n            right = mid - 1\n        elif arr[mid] < n:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return result\n\n\ndef last_occurrence_eff(arr, n):\n    \"\"\"\n    :param arr: list\n    :param n: int\n    :return: int\n    \"\"\"\n    left = 0\n    right = len(arr) - 1\n    result = -1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == n:\n            left = mid + 1\n        elif arr[mid] < n:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return right\n\n\nif __name__ == \"__main__\":\n    print(last_occurrence([1, 2, 2, 2, 3, 3, 3, 4, 4, 5, 5, 5, 6, 6, 6], 3))\n    print(last_occurrence_eff([1, 2, 2, 2, 3, 3, 3, 4, 4, 5, 5, 5, 6, 6, 6], 3))"
    },
    {
      "rank": 11,
      "score": 10.0,
      "candidate": "from typing import List\n\n\n# Time complexity: O(log n)\n# Space complexity: O(1)\ndef find_last_index(arr: List[int], num: int) -> int:\n    low, high = 0, len(arr) - 1\n\n    while low <= high:\n        mid = (low + high) // 2\n        if arr[mid] == num:\n            high = mid - 1\n        elif arr[mid] < num:\n            low = mid + 1\n        else:\n            high = mid - 1\n\n    if low > high:\n        return -1\n    return low\n\n\n# Time complexity: O(log n)\n# Space complexity: O(1)\ndef find_last_index_2(arr: List[int], num: int) -> int:\n    low, high = 0, len(arr) - 1\n\n    while low <= high:\n        mid = (low + high) // 2\n        if arr[mid] == num:\n            if mid == high or arr[mid + 1] != num:\n                return mid\n            else:\n                low = mid + 1\n        elif arr[mid] < num:\n            low = mid + 1\n        else:\n            high = mid - 1\n\n    return -1\n\n\n# Time complexity: O(log n)\n# Space complexity: O(1)\ndef find_last_index_3(arr: List[int], num: int) -> int:\n    low, high = 0, len(arr) - 1\n\n    while low <= high:\n        mid = (low + high) // 2\n        if arr[mid] == num:\n            if mid == high:\n                return mid\n            if arr[mid + 1] != num:\n                return mid\n            else:\n                low = mid + 1\n        elif arr[mid] < num:\n            low = mid + 1\n        else:\n            high = mid - 1\n\n    return -1\n\n\nprint(find_last_index([1, 2, 3, 3, 3, 3, 4, 5], 3))\nprint("
    },
    {
      "rank": 12,
      "score": 10.0,
      "candidate": "from typing import List\n\n\ndef last_occurrence(arr: List[int], number: int) -> int:\n    \"\"\"\n    If the array is sorted, then we can use binary search.\n    O(logn) time complexity.\n    O(1) space complexity.\n    \"\"\"\n    left, right = 0, len(arr) - 1\n\n    while left <= right:\n        mid = left + (right - left) // 2\n\n        if arr[mid] == number:\n            right = mid - 1\n        elif arr[mid] > number:\n            right = mid - 1\n        else:\n            left = mid + 1\n\n    return left if arr[left] == number else -1\n\n\nif __name__ == \"__main__\":\n    assert last_occurrence([1, 2, 2, 3, 3, 3, 4, 7, 8, 8], 3) == 4\n    assert last_occurrence([1, 2, 2, 3, 3, 3, 4, 7, 8, 8], 8) == 8\n    assert last_occurrence([1, 2, 2, 3, 3, 3, 4, 7, 8, 8], 1) == 0\n    assert last_occurrence([1, 2, 2, 3, 3, 3, 4, 7, 8, 8], 7) == 6\n    assert last_occurrence([1, 2, 2, 3, 3, 3, 4, 7, 8, 8], 5) == -1"
    },
    {
      "rank": 13,
      "score": 10.0,
      "candidate": "from typing import List\n\n\n# Time Complexity: O(log(n))\n# Space Complexity: O(1)\ndef last_index_of(arr: List[int], num: int) -> int:\n    left, right = 0, len(arr) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == num:\n            right = mid - 1\n        elif arr[mid] < num:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return -1 if arr[left] != num else left\n\n\n# Time Complexity: O(log(n))\n# Space Complexity: O(1)\ndef last_index_of_binary_search(arr: List[int], num: int) -> int:\n    left, right = 0, len(arr) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == num:\n            right = mid - 1\n        elif arr[mid] < num:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return -1 if left < 0 or arr[left] != num else left\n\n\nif __name__ == \"__main__\":\n    print(last_index_of([1, 2, 2, 2, 2, 3, 4, 7, 8, 8], 2))\n    print(last_index_of([1, 2, 2, 2, 2, 3, 4, 7, 8, 8], 8))\n    print(last_index_of([1, 2, 2, 2, 2, 3, 4, 7, 8, 8], 1))\n    print(last_index_of([1, 2, 2, 2, 2, 3, 4, 7, 8, 8], 10))\n    print(last_index_of([1, 2, 2, 2, 2, 3, 4, 7,"
    },
    {
      "rank": 14,
      "score": 10.0,
      "candidate": "def search_last(arr, n):\n    low, high = 0, len(arr) - 1\n    while low <= high:\n        mid = (low + high) // 2\n        if arr[mid] == n:\n            if mid + 1 < len(arr) and arr[mid + 1] == n:\n                low = mid + 1\n            else:\n                return mid\n        elif arr[mid] < n:\n            low = mid + 1\n        else:\n            high = mid - 1\n    return -1\n\nprint(search_last([1, 2, 2, 2, 2, 3, 4, 7, 8, 8], 2))\nprint(search_last([1, 2, 2, 2, 2, 3, 4, 7, 8, 8], 8))\nprint(search_last([1, 2, 2, 2, 2, 3, 4, 7, 8, 8], 1))\nprint(search_last([1, 2, 2, 2, 2, 3, 4, 7, 8, 8], 4))"
    },
    {
      "rank": 15,
      "score": 10.0,
      "candidate": "def last_index(arr, num):\n    first = 0\n    last = len(arr)-1\n\n    while first < last:\n        mid = (first + last) // 2\n        if arr[mid] == num:\n            first = mid\n        else:\n            last = mid\n    return first\n\n\nprint(last_index([1, 3, 3, 5, 7, 9], 3))\nprint(last_index([1, 3, 3, 5, 7, 9], 2))\nprint(last_index([1, 3, 3, 5, 7, 9], 0))"
    },
    {
      "rank": 16,
      "score": 10.0,
      "candidate": "def last_occurrence(arr, number):\n\tlow = 0\n\thigh = len(arr) - 1\n\twhile low <= high:\n\t\tmid = (low + high) // 2\n\t\tif arr[mid] == number:\n\t\t\tlow = mid + 1\n\t\telif arr[mid] < number:\n\t\t\tlow = mid + 1\n\t\telse:\n\t\t\thigh = mid - 1\n\treturn low - 1\n\n\nif __name__ == \"__main__\":\n\tprint(last_occurrence([1, 2, 3, 3, 3, 3, 4, 5], 3))\n\tprint(last_occurrence([1, 2, 3, 3, 3, 3, 4, 5], 4))\n\tprint(last_occurrence([1, 2, 3, 3, 3, 3, 4, 5], 5))\n\tprint(last_occurrence([1, 2, 3, 3, 3, 3, 4, 5], 6))\n\tprint(last_occurrence([1, 2, 3, 3, 3, 3, 4, 5], 0))\n\tprint(last_occurrence([1, 2, 3, 3, 3, 3, 4, 5], -1))\n\tprint(last_occurrence([1, 2, 3, 3, 3, 3, 4, 5], 2))\n\tprint(last_occurrence([1, 2, 3, 3, 3, 3, 4, 5], 1))"
    },
    {
      "rank": 17,
      "score": 10.0,
      "candidate": "from typing import List\n\n\n# Time complexity: O(log n)\n# Space complexity: O(1)\ndef find_last_index(arr: List[int], number: int) -> int:\n    left, right = 0, len(arr) - 1\n\n    while left <= right:\n        mid = (left + right) // 2\n\n        if arr[mid] == number:\n            right = mid - 1\n        elif arr[mid] < number:\n            left = mid + 1\n        else:\n            right = mid - 1\n\n    if left > right:\n        return -1\n\n    return right\n\n\n# Time complexity: O(log n)\n# Space complexity: O(1)\ndef find_last_index_2(arr: List[int], number: int) -> int:\n    left, right = 0, len(arr) - 1\n\n    while left <= right:\n        mid = (left + right) // 2\n\n        if arr[mid] == number:\n            if mid == len(arr) - 1 or arr[mid + 1] != number:\n                return mid\n            else:\n                left = mid + 1\n        elif arr[mid] < number:\n            left = mid + 1\n        else:\n            right = mid - 1\n\n    return -1\n\n\nif __name__ == \"__main__\":\n    assert find_last_index([1, 2, 3, 4, 5, 5, 5, 5, 5, 5, 6, 7], 5) == 9\n    assert find_last_index([1, 2, 3, 4, 5, 5, 5, 5, 5, 5, 6, 7], 4) == 4\n    assert find_last_index([1, 2, 3, 4, 5, 5, 5, 5, 5, 5, 6, 7], 6) == 10\n    assert find_last_index([1, 2, 3, 4, 5, 5, 5, 5,"
    },
    {
      "rank": 18,
      "score": 10.0,
      "candidate": "def last_occurrence(arr, n):\n    \"\"\"\n    Time Complexity: O(logn)\n    Space Complexity: O(1)\n    \"\"\"\n    low = 0\n    high = len(arr) - 1\n\n    while low <= high:\n        mid = (low + high) // 2\n\n        if arr[mid] == n:\n            high = mid - 1\n        elif arr[mid] < n:\n            low = mid + 1\n        else:\n            high = mid - 1\n\n    return low\n\n\ndef last_occurrence_binary_search(arr, n):\n    \"\"\"\n    Time Complexity: O(logn)\n    Space Complexity: O(1)\n    \"\"\"\n    low = 0\n    high = len(arr) - 1\n\n    while low <= high:\n        mid = (low + high) // 2\n\n        if arr[mid] == n:\n            if mid == len(arr) - 1 or arr[mid + 1] != n:\n                return mid\n\n            low = mid + 1\n        elif arr[mid] < n:\n            low = mid + 1\n        else:\n            high = mid - 1\n\n    return -1\n\n\ndef last_occurrence_recursive(arr, n, low, high):\n    \"\"\"\n    Time Complexity: O(logn)\n    Space Complexity: O(1)\n    \"\"\"\n    if low > high:\n        return -1\n\n    mid = (low + high) // 2\n\n    if arr[mid] == n:\n        if mid == len(arr) - 1 or arr[mid + 1] != n:\n            return mid\n\n        return last_occurrence_recursive(arr, n, mid + 1, high)\n    elif arr[mid] < n:\n        return last_occurrence_recursive(arr, n, mid + 1, high)\n    else:\n        return last_occurrence_recursive(arr, n, low, mid - 1)\n\n\nif __name__ == \"__main__\":\n    arr = [1, 2, 2,"
    },
    {
      "rank": 19,
      "score": 10.0,
      "candidate": "def last_occurrence(arr, target):\n    low = 0\n    high = len(arr) - 1\n    while low < high:\n        mid = low + (high - low) // 2\n        if arr[mid] == target:\n            high = mid\n        elif arr[mid] < target:\n            low = mid + 1\n        else:\n            high = mid - 1\n    if arr[low] == target:\n        return low\n    else:\n        return -1\n\n\nif __name__ == \"__main__\":\n    arr = [1, 1, 2, 2, 2, 3, 4, 7, 8, 8]\n    target = 8\n    print(last_occurrence(arr, target))"
    },
    {
      "rank": 20,
      "score": 10.0,
      "candidate": "from typing import List\n\n\ndef last_index_of(arr: List[int], target: int) -> int:\n    \"\"\"Return the index of the last occurrence of a given number in a sorted array.\n\n    Args:\n        arr (List[int]): list of integers\n        target (int): target number\n\n    Returns:\n        int: index of the last occurrence of a given number in a sorted array\n    \"\"\"\n\n    left = 0\n    right = len(arr) - 1\n\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == target:\n            right = mid - 1\n        elif arr[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return -1 if left > right else right\n\n\nif __name__ == \"__main__\":\n    arr = [1, 2, 2, 2, 2, 3, 4, 7, 8, 8]\n    target = 2\n    print(last_index_of(arr, target))"
    },
    {
      "rank": 21,
      "score": 10.0,
      "candidate": "def last_occurrence(arr, n):\n    \"\"\"\n    O(logn)\n    \"\"\"\n    start = 0\n    end = len(arr) - 1\n    while start <= end:\n        mid = (start + end) // 2\n        if arr[mid] == n:\n            if mid + 1 < len(arr) and arr[mid + 1] == n:\n                start = mid + 1\n            else:\n                return mid\n        elif arr[mid] < n:\n            start = mid + 1\n        else:\n            end = mid - 1\n    return -1\n\n\nif __name__ == \"__main__\":\n    arr = [1, 2, 2, 3, 3, 3, 4, 4, 4, 4, 5, 5, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 9, 9, 9, 10, 10, 10, 11,\n           11, 11, 11, 11, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 13, 13, 13, 13, 13, 13, 13,\n           13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13,\n           13, 13, 13, 13, 13"
    },
    {
      "rank": 22,
      "score": 10.0,
      "candidate": "def last_occurrence(arr, num):\n    left, right = 0, len(arr) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == num:\n            right = mid - 1\n        elif arr[mid] < num:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return left if arr[left] == num else -1"
    },
    {
      "rank": 23,
      "score": 10.0,
      "candidate": "class Solution:\n    def last_occurrence(self, arr, number):\n        low = 0\n        high = len(arr) - 1\n\n        while low <= high:\n            mid = (low + high) // 2\n            if arr[mid] == number:\n                high = mid - 1\n            elif arr[mid] > number:\n                high = mid - 1\n            else:\n                low = mid + 1\n\n        if arr[mid] != number:\n            return -1\n        return mid\n\n\nif __name__ == \"__main__\":\n    arr = [1, 2, 3, 3, 3, 3, 4, 5]\n    print(Solution().last_occurrence(arr, 3))"
    },
    {
      "rank": 24,
      "score": 10.0,
      "candidate": "from typing import List\n\n\n# O(logn)\ndef last_index_of_occurrence_naive(arr: List[int], number: int) -> int:\n    \"\"\"Finds the index of the last occurrence of a given number in a sorted array.\n\n    Args:\n        arr (List[int]): a sorted array\n        number (int): a number to find the index of\n\n    Returns:\n        int: the index of the last occurrence of the number in the array\n    \"\"\"\n\n    def binary_search(arr: List[int], left: int, right: int, number: int) -> int:\n        while left <= right:\n            mid = (left + right) // 2\n            if arr[mid] == number:\n                left = mid + 1\n            elif arr[mid] < number:\n                left = mid + 1\n            else:\n                right = mid - 1\n        return left - 1\n\n    return binary_search(arr, 0, len(arr) - 1, number)\n\n\n# O(logn)\ndef last_index_of_occurrence(arr: List[int], number: int) -> int:\n    \"\"\"Finds the index of the last occurrence of a given number in a sorted array.\n\n    Args:\n        arr (List[int]): a sorted array\n        number (int): a number to find the index of\n\n    Returns:\n        int: the index of the last occurrence of the number in the array\n    \"\"\"\n\n    def binary_search(arr: List[int], left: int, right: int, number: int) -> int:\n        while left <= right:\n            mid = (left + right) // 2\n            if arr[mid] == number:\n                if mid == right or arr[mid + 1] != number:\n                    return mid\n                left = mid + 1\n            elif arr[mid] < number:\n                left = mid + 1\n            else:\n                right = mid - 1\n        return -1\n\n    return binary_search(arr, 0, len(arr) - 1, number)\n\n\nif __name__ == \"__main__\":\n    assert"
    },
    {
      "rank": 25,
      "score": 9.0,
      "candidate": "def last_index_of_sorted_array(arr: list, value: int) -> int:\n    \"\"\"\n    Time Complexity: O(log(n))\n    Space Complexity: O(1)\n    \"\"\"\n    low, high = 0, len(arr) - 1\n\n    while low <= high:\n        mid = (low + high) // 2\n        if arr[mid] == value:\n            high = mid - 1\n        elif arr[mid] > value:\n            high = mid - 1\n        else:\n            low = mid + 1\n\n    return low if arr[low] == value else -1\n\n\nif __name__ == \"__main__\":\n    arr = [1, 2, 2, 2, 2, 3, 4, 7, 8, 8]\n    print(last_index_of_sorted_array(arr, 2))\n    print(last_index_of_sorted_array(arr, 3))\n    print(last_index_of_sorted_array(arr, 8))\n    print(last_index_of_sorted_array(arr, 1))\n    print(last_index_of_sorted_array(arr, 5))"
    },
    {
      "rank": 26,
      "score": 8.0,
      "candidate": "def find_last_occurrence(arr, num):\n    \"\"\"\n    :param: arr - input array\n    :param: num - integer number to find the last occurrence of in the array\n    TODO: complete this function to find the last occurrence of a number in a sorted array\n    return - the last occurrence of num in the array, or -1 if num is not in the array\n    \"\"\"\n    # base case\n    if not arr:\n        return -1\n\n    # base case\n    if len(arr) == 1:\n        if num == arr[0]:\n            return 0\n        else:\n            return -1\n\n    # find the midpoint\n    midpoint = len(arr) // 2\n\n    # check if num is in the left half\n    if num < arr[midpoint]:\n        return find_last_occurrence(arr[:midpoint], num)\n    # check if num is in the right half\n    elif num > arr[midpoint]:\n        return find_last_occurrence(arr[midpoint:], num)\n    # num is in the middle\n    else:\n        # check if it is the first occurrence\n        if arr[midpoint] == num:\n            return find_last_occurrence(arr[:midpoint], num)\n        # check if it is the last occurrence\n        elif arr[midpoint + 1] == num:\n            return find_last_occurrence(arr[midpoint + 1:], num) + midpoint + 1\n        # num is not in the array\n        else:\n            return -1\n\n\n\"\"\"\nSolution:\n\ndef find_last_occurrence(arr, num):\n    # base case\n    if not arr:\n        return -1\n    # base case\n    if len(arr) == 1:\n        if num == arr[0]:\n            return 0\n        else:\n            return -1\n    # find the midpoint\n    midpoint = len(arr) // 2\n    # check if num is in the left half\n    if num < arr[midpoint]:\n        return find_last_occurrence(arr[:midpoint], num)\n    # check if num is in the right half\n    elif num > arr"
    },
    {
      "rank": 27,
      "score": 8.0,
      "candidate": "def last_occurrence(array, number):\n    # find the index of the first occurrence\n    first_occurrence = first_occurrence(array, number)\n\n    if first_occurrence == len(array):\n        return -1\n\n    # find the index of the last occurrence\n    return len(array) - first_occurrence - 1\n\ndef first_occurrence(array, number):\n    if len(array) == 0:\n        return -1\n\n    return first_occurrence_helper(array, number, 0, len(array) - 1)\n\ndef first_occurrence_helper(array, number, start, end):\n    if start > end:\n        return -1\n\n    mid = (start + end) // 2\n\n    if array[mid] == number:\n        index = first_occurrence_helper(array, number, start, mid - 1)\n        if index != -1:\n            return index\n        return mid\n    elif array[mid] > number:\n        return first_occurrence_helper(array, number, start, mid - 1)\n    else:\n        return first_occurrence_helper(array, number, mid + 1, end)\n\narray = [1, 2, 2, 2, 2, 3, 4, 7, 8, 8]\nprint(last_occurrence(array, 2)) # 4\nprint(last_occurrence(array, 8)) # 9\nprint(last_occurrence(array, 1)) # 0\nprint(last_occurrence(array, 5)) # -1\nprint(last_occurrence(array, 9)) # -1"
    },
    {
      "rank": 28,
      "score": 8.0,
      "candidate": "def last_occurrence(arr, number):\n    low = 0\n    high = len(arr) - 1\n\n    while low <= high:\n        mid = (low + high) // 2\n\n        if arr[mid] == number:\n            low = mid\n        elif arr[mid] > number:\n            high = mid - 1\n        else:\n            low = mid + 1\n\n    return low\n\n\ndef test_last_occurrence():\n    assert last_occurrence([1, 3, 3, 5, 7, 9, 10], 9) == 5\n    assert last_occurrence([1, 3, 3, 5, 7, 9, 10], 5) == 3\n    assert last_occurrence([1, 3, 3, 5, 7, 9, 10], 1) == 0\n    assert last_occurrence([1, 3, 3, 5, 7, 9, 10], 11) == 6\n\n\nif __name__ == '__main__':\n    test_last_occurrence()"
    },
    {
      "rank": 29,
      "score": 8.0,
      "candidate": "def last_occurrence(arr, num):\n    start = 0\n    end = len(arr) - 1\n    while start <= end:\n        mid = (start + end) // 2\n        if arr[mid] == num:\n            end = mid - 1\n        elif arr[mid] < num:\n            start = mid + 1\n        else:\n            end = mid - 1\n    return start\n\n\nif __name__ == \"__main__\":\n    arr = [1, 2, 3, 3, 3, 3, 4, 5, 10]\n    print(last_occurrence(arr, 3))\n    print(last_occurrence(arr, 5))"
    },
    {
      "rank": 30,
      "score": 8.0,
      "candidate": "def last_occurrence(array, target):\n    if len(array) == 0:\n        return -1\n\n    if len(array) == 1:\n        return 0 if array[0] == target else -1\n\n    low = 0\n    high = len(array) - 1\n\n    while low < high:\n        mid = (low + high) // 2\n\n        if array[mid] == target:\n            high = mid\n        elif array[mid] > target:\n            high = mid - 1\n        else:\n            low = mid + 1\n\n    return high if array[high] == target else -1\n\nprint(last_occurrence([1, 2, 2, 3, 4, 5], 2))\nprint(last_occurrence([1, 2, 2, 3, 4, 5], 5))\nprint(last_occurrence([1, 2, 2, 3, 4, 5], 6))\nprint(last_occurrence([1, 2, 2, 3, 4, 5], 1))\nprint(last_occurrence([1, 2, 2, 3, 4, 5], 0))"
    },
    {
      "rank": 31,
      "score": 8.0,
      "candidate": "def last_index_of(arr, num):\n    l = len(arr)\n    if l == 0:\n        return -1\n    if l == 1:\n        return 0 if num == arr[0] else -1\n    mid = l//2\n    if arr[mid] == num:\n        return find_last_index_in_sorted(arr[:mid+1], num)\n    elif arr[mid] > num:\n        return find_last_index_in_sorted(arr[:mid], num)\n    else:\n        return find_last_index_in_sorted(arr[mid:], num)\n\ndef find_last_index_in_sorted(arr, num):\n    l = len(arr)\n    if l == 0:\n        return -1\n    if l == 1:\n        return 0 if num == arr[0] else -1\n    mid = l//2\n    if arr[mid] == num:\n        return find_last_index_in_sorted(arr[:mid+1], num)\n    elif arr[mid] > num:\n        return find_last_index_in_sorted(arr[:mid], num)\n    else:\n        return mid + find_last_index_in_sorted(arr[mid:], num)\n\nif __name__ == \"__main__\":\n    # Test Cases\n    arr = [1,2,3,3,3,3,4,5,6]\n    num = 3\n    print(last_index_of(arr, num))\n\n    arr = [1,2,3,3,3,3,4,5,6]\n    num = 5\n    print(last_index_of(arr, num))\n\n    arr = [1,2,3,3,3,3,4,5,6]\n    num = 7\n    print(last_index_of(arr, num))\n\n    arr = [1,2,3,3,3,3,4,5,6]\n    num = 0\n    print(last_index_of(arr, num))"
    },
    {
      "rank": 32,
      "score": 8.0,
      "candidate": "def last_index(arr, num):\n    start = 0\n    end = len(arr) - 1\n\n    while start <= end:\n        mid = start + (end - start) // 2\n\n        if arr[mid] == num:\n            index = mid\n            end = mid - 1\n        elif arr[mid] < num:\n            start = mid + 1\n        else:\n            end = mid - 1\n\n    return index\n\nprint(last_index([1,2,2,4,4,4,4,5], 4))"
    },
    {
      "rank": 33,
      "score": 8.0,
      "candidate": "def find_last_index(arr, num):\n    left = 0\n    right = len(arr) - 1\n\n    while left <= right:\n        mid = (left + right) // 2\n        if num == arr[mid]:\n            right = mid - 1\n        elif num > arr[mid]:\n            left = mid + 1\n        else:\n            right = mid - 1\n\n    if left >= len(arr) or arr[left] != num:\n        return -1\n\n    return left\n\n\nprint(find_last_index([1, 2, 2, 2, 2, 3, 4, 7, 8, 8], 2))\nprint(find_last_index([1, 2, 2, 2, 2, 3, 4, 7, 8, 8], 8))\nprint(find_last_index([1, 2, 2, 2, 2, 3, 4, 7, 8, 8], 1))\nprint(find_last_index([1, 2, 2, 2, 2, 3, 4, 7, 8, 8], 9))"
    },
    {
      "rank": 34,
      "score": 8.0,
      "candidate": "def last_occurrence(array, number):\n    \"\"\"\n    >>> last_occurrence([1, 2, 3, 3, 3, 3, 4, 5], 3)\n    4\n    >>> last_occurrence([1, 2, 3, 3, 3, 3, 4, 5], 6)\n    -1\n    \"\"\"\n    low, high = 0, len(array) - 1\n    while low <= high:\n        mid = (low + high) // 2\n        if array[mid] == number:\n            high = mid - 1\n        elif array[mid] < number:\n            low = mid + 1\n        else:\n            high = mid - 1\n    if low > high:\n        return -1\n    return high\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 35,
      "score": 8.0,
      "candidate": "def last_index(arr, num):\n    start, end = 0, len(arr)-1\n    while start <= end:\n        mid = start + (end-start)//2\n        if arr[mid] == num:\n            start = mid+1\n        elif arr[mid] < num:\n            start = mid+1\n        elif arr[mid] > num:\n            end = mid-1\n    return end\n\n\nif __name__ == \"__main__\":\n    print(last_index([1, 3, 3, 5, 7, 9, 9, 9, 10], 9))"
    },
    {
      "rank": 36,
      "score": 8.0,
      "candidate": "def last_occurrence_index(arr, target):\n    start = 0\n    end = len(arr) - 1\n    result = -1\n\n    while start <= end:\n        mid = (start + end) // 2\n        if arr[mid] == target:\n            result = mid\n            start = mid + 1\n        elif arr[mid] < target:\n            start = mid + 1\n        else:\n            end = mid - 1\n    return result\n\n# Test cases\nprint(last_occurrence_index([1, 2, 2, 3, 4, 5, 5, 5, 5, 6, 7, 8], 5))\nprint(last_occurrence_index([1, 2, 3, 3, 4, 5, 5, 5, 5, 6, 7, 8], 5))\nprint(last_occurrence_index([1, 2, 3, 3, 4, 5, 5, 5, 5, 6, 7, 8], 3))\nprint(last_occurrence_index([1, 2, 3, 3, 4, 5, 5, 5, 5, 6, 7, 8], 1))\nprint(last_occurrence_index([1, 2, 3, 3, 4, 5, 5, 5, 5, 6, 7, 8], 8))\nprint(last_occurrence_index([1, 2, 3, 3, 4, 5, 5, 5, 5, 6, 7, 8], 4))\nprint(last_occurrence_index([1, 2, 3, 3, 4, 5, 5, 5, 5, 6, 7, 8], 6))\nprint(last_occurrence_index([1, 2, 3, 3, 4, 5, 5, 5, 5, 6, 7, 8], 7))\nprint(last_occurrence_index(["
    },
    {
      "rank": 37,
      "score": 8.0,
      "candidate": "def find_last_index(arr, number):\n    low = 0\n    high = len(arr) - 1\n\n    while low <= high:\n        mid = (low + high) // 2\n        if arr[mid] == number:\n            low = mid + 1\n        elif arr[mid] > number:\n            high = mid - 1\n        else:\n            low = mid + 1\n\n    return low - 1\n\n\nprint(find_last_index([1, 2, 2, 2, 2, 3, 4, 7, 8, 8], 2))\n\nprint(find_last_index([1, 2, 2, 2, 2, 3, 4, 7, 8, 8], 8))\n\nprint(find_last_index([1, 2, 2, 2, 2, 3, 4, 7, 8, 8], 1))"
    },
    {
      "rank": 38,
      "score": 8.0,
      "candidate": "def last_occurrence(arr, num):\n    start = 0\n    end = len(arr) - 1\n\n    while start <= end:\n        mid = start + (end - start) // 2\n\n        if arr[mid] == num:\n            if arr[mid] == arr[mid - 1]:\n                return mid - 1\n            else:\n                return mid\n        elif arr[mid] < num:\n            start = mid + 1\n        else:\n            end = mid - 1\n\n    return -1\n\n\nprint(last_occurrence([1, 1, 2, 3, 3, 3, 4, 5, 7, 9], 9))"
    },
    {
      "rank": 39,
      "score": 8.0,
      "candidate": "def find_last_occurrence(arr, number):\n    if arr is None or number is None:\n        return -1\n\n    left, right = 0, len(arr) - 1\n    while left <= right:\n        mid = left + (right - left) // 2\n        if arr[mid] == number:\n            right = mid - 1\n        elif arr[mid] < number:\n            left = mid + 1\n        else:\n            right = mid - 1\n\n    return right\n\n\ndef main():\n    print(find_last_occurrence([1, 2, 2, 3, 4, 5, 5, 5, 5, 5, 6], 5))\n    print(find_last_occurrence([1, 2, 2, 3, 4, 5, 5, 5, 5, 5, 6], 4))\n    print(find_last_occurrence([1, 2, 2, 3, 4, 5, 5, 5, 5, 5, 6], 1))\n    print(find_last_occurrence([1, 2, 2, 3, 4, 5, 5, 5, 5, 5, 6], 6))\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 40,
      "score": 8.0,
      "candidate": "def find_last_index(arr, num):\n    low = 0\n    high = len(arr) - 1\n\n    while low <= high:\n        mid = (low + high) // 2\n        if arr[mid] > num:\n            high = mid - 1\n        elif arr[mid] < num:\n            low = mid + 1\n        else:\n            if mid == 0 or arr[mid - 1] != num:\n                return mid\n            else:\n                high = mid - 1\n\n\ndef main():\n    print(find_last_index([1, 2, 3, 3, 4, 5], 3))\n    print(find_last_index([1, 2, 3, 3, 4, 5], 2))\n    print(find_last_index([1, 2, 3, 3, 4, 5], 4))\n    print(find_last_index([1, 2, 3, 3, 4, 5], 1))\n    print(find_last_index([1, 2, 3, 3, 4, 5], 5))\n    print(find_last_index([1, 2, 3, 3, 4, 5], 6))\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 41,
      "score": 8.0,
      "candidate": "def find_last_occurrence_of_number(arr, num):\n    \"\"\"\n    Finds the last occurrence of num in arr.\n    Assumes arr is sorted in ascending order.\n    \"\"\"\n    if not arr:\n        return -1\n    elif len(arr) == 1:\n        return 0 if arr[0] == num else -1\n    else:\n        return _find_last_occurrence_of_number(arr, num, 0, len(arr) - 1)\n\ndef _find_last_occurrence_of_number(arr, num, start, end):\n    if start == end:\n        return start if arr[start] == num else -1\n    elif start + 1 == end:\n        return start if arr[start] == num else end if arr[end] == num else -1\n    else:\n        mid = (start + end) // 2\n        if num == arr[mid]:\n            return _find_last_occurrence_of_number(arr, num, mid, end)\n        elif num > arr[mid]:\n            return _find_last_occurrence_of_number(arr, num, mid, end)\n        else:\n            return _find_last_occurrence_of_number(arr, num, start, mid)\n\ndef main():\n    print(find_last_occurrence_of_number([1, 2, 3, 3, 3, 3, 4, 5], 3))\n    print(find_last_occurrence_of_number([], 1))\n    print(find_last_occurrence_of_number([1], 1))\n    print(find_last_occurrence_of_number([1, 1, 1, 1, 1], 1))\n    print(find_last_occurrence_of_number([1, 2, 3, 3, 3, 3, 4, 5], 6))\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 42,
      "score": 8.0,
      "candidate": "def find_last_occurrence(arr, num):\n    start = 0\n    end = len(arr) - 1\n\n    while start <= end:\n        mid = start + (end - start) // 2\n        if arr[mid] == num:\n            if mid + 1 < len(arr) and arr[mid + 1] == num:\n                start = mid + 1\n            else:\n                return mid\n        elif arr[mid] < num:\n            start = mid + 1\n        else:\n            end = mid - 1\n\n    return -1\n\n\nprint(find_last_occurrence([1, 2, 2, 2, 2, 3, 4, 7, 8, 8], 2))\nprint(find_last_occurrence([1, 2, 2, 2, 2, 3, 4, 7, 8, 8], 8))\nprint(find_last_occurrence([1, 2, 2, 2, 2, 3, 4, 7, 8, 8], 1))"
    },
    {
      "rank": 43,
      "score": 8.0,
      "candidate": "def find_last_index(arr, val):\n    \"\"\"\n    :type arr: List[int]\n    :type val: int\n    :rtype: int\n    \"\"\"\n    left, right = 0, len(arr) - 1\n\n    while left <= right:\n        mid = left + (right - left) // 2\n\n        if arr[mid] > val:\n            right = mid - 1\n        elif arr[mid] < val:\n            left = mid + 1\n        else:\n            if mid == 0 or arr[mid - 1] != val:\n                return mid\n            else:\n                right = mid - 1\n\n    return -1\n\n\ndef test_find_last_index():\n    assert find_last_index([1, 2, 2, 2, 2, 3, 4, 7, 7, 8, 8, 8, 8], 2) == 5\n    assert find_last_index([1, 2, 2, 2, 2, 3, 4, 7, 7, 8, 8, 8, 8], 1) == 0\n    assert find_last_index([1, 2, 2, 2, 2, 3, 4, 7, 7, 8, 8, 8, 8], 4) == 6\n    assert find_last_index([1, 2, 2, 2, 2, 3, 4, 7, 7, 8, 8, 8, 8], 8) == 12\n    assert find_last_index([1, 2, 2, 2, 2, 3, 4, 7, 7, 8, 8, 8, 8], 7) == 8\n    assert find_last_index([1, 2, 2, 2, 2, 3, 4, 7, 7, 8, 8, 8, 8], 9) == -1"
    },
    {
      "rank": 44,
      "score": 8.0,
      "candidate": "def last_occurrence(arr, num):\n    start = 0\n    end = len(arr) - 1\n    while start <= end:\n        mid = start + (end - start) // 2\n        if arr[mid] == num:\n            end = mid - 1\n        elif arr[mid] > num:\n            end = mid - 1\n        else:\n            start = mid + 1\n    return start\n\n\nprint(last_occurrence([1, 2, 2, 3, 4, 5, 5, 5, 5, 6], 5))"
    },
    {
      "rank": 45,
      "score": 8.0,
      "candidate": "def last_occurrence(arr, n):\n    low = 0\n    high = len(arr) - 1\n\n    while low <= high:\n        mid = (low + high) // 2\n\n        if arr[mid] == n:\n            high = mid - 1\n        elif arr[mid] < n:\n            low = mid + 1\n        else:\n            high = mid - 1\n\n    return low\n\n\nprint(last_occurrence([1,2,3,4,5,5,5,5,5,6], 5))\n\n\n\"\"\"\nTime Complexity = O(logn)\nSpace Complexity = O(1)\n\"\"\""
    },
    {
      "rank": 46,
      "score": 8.0,
      "candidate": "def last_occurrence(arr, target):\n    return last_occurrence_helper(arr, target, 0, len(arr) - 1)\n\n\ndef last_occurrence_helper(arr, target, left, right):\n    if left > right:\n        return -1\n\n    mid = (left + right) // 2\n    if arr[mid] == target:\n        return last_occurrence_helper(arr, target, mid + 1, right)\n    elif arr[mid] > target:\n        return last_occurrence_helper(arr, target, left, mid - 1)\n    else:\n        return last_occurrence_helper(arr, target, mid + 1, right)\n\n\ndef last_occurrence_binary_search(arr, target):\n    left = 0\n    right = len(arr) - 1\n\n    while left <= right:\n        mid = (left + right) // 2\n\n        if arr[mid] == target:\n            right = mid - 1\n        elif arr[mid] > target:\n            right = mid - 1\n        else:\n            left = mid + 1\n\n    if left > right:\n        return -1\n\n    return last_occurrence_helper(arr, target, left, right)\n\n\nif __name__ == \"__main__\":\n    print(last_occurrence([1, 2, 2, 2, 3, 3, 3, 4, 4, 4, 4], 4))\n    print(last_occurrence_binary_search([1, 2, 2, 2, 3, 3, 3, 4, 4, 4, 4], 4))"
    },
    {
      "rank": 47,
      "score": 8.0,
      "candidate": "def last_occurrence(arr, num):\n    if len(arr) == 0:\n        return -1\n\n    start = 0\n    end = len(arr) - 1\n\n    while start <= end:\n        mid = (start + end) // 2\n\n        if arr[mid] == num:\n            index = mid\n            end = mid - 1\n        elif arr[mid] > num:\n            end = mid - 1\n        else:\n            start = mid + 1\n\n    return index\n\nif __name__ == \"__main__\":\n    print(last_occurrence([1, 2, 2, 4, 5, 5, 6], 2))\n    print(last_occurrence([1, 2, 2, 4, 5, 5, 6], 3))\n    print(last_occurrence([1, 2, 2, 4, 5, 5, 6], 0))"
    },
    {
      "rank": 48,
      "score": 8.0,
      "candidate": "def find_index(arr, num):\n    if len(arr) == 0:\n        return -1\n\n    start, end = 0, len(arr) - 1\n\n    while start <= end:\n        mid = start + (end - start) // 2\n\n        if arr[mid] == num:\n            if mid + 1 < len(arr) and arr[mid + 1] == num:\n                start = mid + 1\n                continue\n            else:\n                return mid\n        elif arr[mid] < num:\n            start = mid + 1\n        else:\n            end = mid - 1\n\n    return -1\n\n\nif __name__ == \"__main__\":\n    arr = [1, 3, 3, 5, 7, 9, 10]\n    print(find_index(arr, 3))\n    print(find_index(arr, 5))\n    print(find_index(arr, 9))\n    print(find_index(arr, 12))"
    },
    {
      "rank": 49,
      "score": 8.0,
      "candidate": "def last_index(arr, number):\n    \"\"\"\n    :param: arr - input array\n    :param: number - number to search for in the array\n    TODO: complete this method and return the last index of the number in the array,\n    or -1 if the number does not exist in the array\n    \"\"\"\n    if arr == [] or number < arr[0]:\n        return -1\n    else:\n        for i in range(len(arr) - 1, -1, -1):\n            if arr[i] == number:\n                return i\n    return -1\n\n\n# test case\nprint(last_index([1, 2, 3, 3, 3, 3, 4, 5, 10], 3))  # 4\nprint(last_index([1, 2, 3, 4, 5, 6], 7))  # -1\nprint(last_index([1, 2, 3, 4, 5, 6], 4))  # 3\nprint(last_index([1, 2, 3, 4, 5, 6], 1))  # 0\nprint(last_index([1, 2, 3, 4, 5, 6], 6))  # 5\nprint(last_index([1, 2, 3, 4, 5, 6], 5))  # 4"
    },
    {
      "rank": 50,
      "score": 8.0,
      "candidate": "def last_occurrence(array, number):\n    start = 0\n    end = len(array) - 1\n\n    while start <= end:\n        mid = (start + end) // 2\n        if number > array[mid]:\n            start = mid + 1\n        elif number < array[mid]:\n            end = mid - 1\n        else:\n            if mid == len(array) - 1 or number < array[mid + 1]:\n                return mid\n            else:\n                end = mid - 1\n\n\nprint(last_occurrence([1, 1, 2, 3, 3, 3, 3, 4, 5, 5], 3))"
    },
    {
      "rank": 51,
      "score": 8.0,
      "candidate": "def last_occurrence(arr, num):\n    low = 0\n    high = len(arr) - 1\n\n    while low <= high:\n        mid = (low + high) // 2\n\n        if arr[mid] == num:\n            high = mid - 1\n        elif arr[mid] < num:\n            low = mid + 1\n        else:\n            high = mid - 1\n\n    return low\n\n\nprint(last_occurrence([1, 1, 2, 3, 3, 3, 3, 4, 5, 10], 3))"
    },
    {
      "rank": 52,
      "score": 8.0,
      "candidate": "def search_last_occurrence(arr, num):\n    if len(arr) == 0:\n        return -1\n\n    left, right = 0, len(arr) - 1\n\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == num:\n            right = mid - 1\n        elif arr[mid] < num:\n            left = mid + 1\n        else:\n            right = mid - 1\n\n    return left if arr[left] == num else -1\n\n\ndef main():\n    print(search_last_occurrence([1, 3, 3, 5, 7, 9, 9, 10], 9))\n    print(search_last_occurrence([1, 3, 3, 5, 7, 9, 9, 10], 11))\n    print(search_last_occurrence([1, 3, 3, 5, 7, 9, 9, 10], 3))\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 53,
      "score": 8.0,
      "candidate": "def last_occurrence(arr, num):\n    \"\"\"\n    :param: arr - input array\n    :param: num - number to search for\n    TODO: complete this method to find the last occurrence of a number in a sorted array\n    return -1 if the number doesn't exist in the array otherwise return the last index\n    \"\"\"\n    if num in arr:\n        return arr.index(num) + arr[::-1].index(num)\n    else:\n        return -1"
    },
    {
      "rank": 54,
      "score": 8.0,
      "candidate": "def last_occurrence(arr, num):\n    if len(arr) == 0:\n        return -1\n    return last_occurrence_helper(arr, num, 0, len(arr) - 1)\n\ndef last_occurrence_helper(arr, num, start, end):\n    if start > end:\n        return -1\n    mid = (start + end) // 2\n    if arr[mid] == num:\n        right = last_occurrence_helper(arr, num, mid + 1, end)\n        if right != -1:\n            return right\n        left = last_occurrence_helper(arr, num, start, mid - 1)\n        if left != -1:\n            return left\n        return mid\n    elif arr[mid] < num:\n        return last_occurrence_helper(arr, num, mid + 1, end)\n    else:\n        return last_occurrence_helper(arr, num, start, mid - 1)\n\nassert last_occurrence([1,2,2,4,5,6,7,7,8,9,9], 9) == 8\nassert last_occurrence([1,2,2,4,5,6,7,7,8,9,9], 7) == 6\nassert last_occurrence([1,2,2,4,5,6,7,7,8,9,9], 5) == 4\nassert last_occurrence([1,2,2,4,5,6,7,7,8,9,9], 2) == 2\nassert last_occurrence([1,2,2,4,5,6,7,7,8,9,9], 1) == 0\nassert last_occurrence([1,2,2,4,5,6,7,7,8,9,9], 0) == -1\nassert last_occurrence([1,2,2,4,5,6,7,7,8,9,9], 10) == -1\nassert last_occurrence([1,2,2,4,5,6,7,7,8,9,9], 3) == -"
    },
    {
      "rank": 55,
      "score": 8.0,
      "candidate": "def find_last_index(arr, num):\n    \"\"\"\n    :param arr: sorted list of integers\n    :param num: integer\n    :return: index of the last occurrence of num in arr\n    \"\"\"\n    # initialize low and high\n    low = 0\n    high = len(arr) - 1\n\n    # if num is not present in the array\n    if arr[low] > num or arr[high] < num:\n        return -1\n\n    # if num is present in the array\n    while low <= high:\n        mid = low + (high - low) // 2\n        if arr[mid] == num:\n            low = mid + 1\n        else:\n            high = mid - 1\n\n    return high\n\n\nif __name__ == \"__main__\":\n    print(find_last_index([1, 2, 2, 2, 3, 4, 7, 8, 8], 2))"
    },
    {
      "rank": 56,
      "score": 8.0,
      "candidate": "def last_occurrence(array, number):\n    \"\"\"\n    Return the index of the last occurrence of number in array.\n    If number is not in array, return -1.\n    \"\"\"\n    left, right = 0, len(array) - 1\n    while left <= right:\n        middle = (left + right) // 2\n        if array[middle] == number:\n            if middle == len(array) - 1 or array[middle + 1] != number:\n                return middle\n            right = middle - 1\n        elif array[middle] > number:\n            right = middle - 1\n        else:\n            left = middle + 1\n    return -1"
    },
    {
      "rank": 57,
      "score": 8.0,
      "candidate": "def last_occurrence(arr, num):\n    return last_occurrence_helper(arr, num, 0, len(arr)-1)\n\ndef last_occurrence_helper(arr, num, start, end):\n    if start > end:\n        return -1\n    mid = (start + end) // 2\n    if arr[mid] == num:\n        if mid + 1 <= len(arr) and arr[mid+1] == num:\n            return last_occurrence_helper(arr, num, mid+1, end)\n        else:\n            return mid\n    elif arr[mid] > num:\n        return last_occurrence_helper(arr, num, start, mid-1)\n    else:\n        return last_occurrence_helper(arr, num, mid+1, end)\n\n\nif __name__ == '__main__':\n    arr = [1, 2, 2, 3, 4, 5, 5, 5, 5, 5, 5, 5, 6]\n    print(last_occurrence(arr, 5))"
    },
    {
      "rank": 58,
      "score": 8.0,
      "candidate": "def search(arr, n, x):\n    left = 0\n    right = n - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == x:\n            index = mid\n            right = mid - 1\n        elif arr[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return index\n\n\nif __name__ == \"__main__\":\n    arr = [1, 2, 3, 4, 5, 6, 7]\n    n = len(arr)\n    x = 4\n    index = search(arr, n, x)\n    print(index)"
    },
    {
      "rank": 59,
      "score": 8.0,
      "candidate": "def search_last_index(array, n):\n    start, end = 0, len(array) - 1\n    while start <= end:\n        mid = start + (end - start) // 2\n        if array[mid] == n:\n            if mid + 1 < len(array) and array[mid + 1] == n:\n                start = mid + 1\n            else:\n                return mid\n        elif array[mid] < n:\n            start = mid + 1\n        else:\n            end = mid - 1\n\n    return -1\n\nif __name__ == '__main__':\n    arr = [1, 2, 2, 2, 3, 4, 7, 8, 8]\n    print(search_last_index(arr, 2))"
    },
    {
      "rank": 60,
      "score": 8.0,
      "candidate": "def findLast(arr, n):\n    l = 0\n    r = len(arr) - 1\n    while l <= r:\n        mid = (l + r) // 2\n        if arr[mid] == n:\n            l = mid + 1\n        else:\n            r = mid - 1\n    return r\n\n\narr = [1, 2, 2, 2, 2, 3, 4, 7, 8, 8]\nn = 2\nprint(findLast(arr, n))\n\n\n\n\"\"\"\nTime complexity: O(logN)\nSpace complexity: O(1)\n\"\"\""
    },
    {
      "rank": 61,
      "score": 8.0,
      "candidate": "def last_occurrence(arr, num):\n    left, right = 0, len(arr) - 1\n\n    while left < right:\n        mid = (left + right) // 2\n        if num > arr[mid]:\n            left = mid + 1\n        else:\n            right = mid\n\n    return left\n\nprint(last_occurrence([1,2,2,2,3,3,3,3,4,4,5,5,5,5,6,6,6,7,7,7,7,8,8,8,8,9,9,9,9,9,9,10,10,10,11], 10))"
    },
    {
      "rank": 62,
      "score": 8.0,
      "candidate": "def last_occurrence(arr, num):\n    # Find the first occurence of the num in the array\n    first_occurrence = find_first_occurrence(arr, num)\n\n    # If the num is not in the array\n    if first_occurrence == -1:\n        return -1\n\n    # Use binary search to find the last occurence\n    start = first_occurrence\n    end = len(arr) - 1\n    while start + 1 < end:\n        mid = (start + end) // 2\n        if arr[mid] == num:\n            start = mid\n        else:\n            end = mid\n    if arr[start] == num:\n        return start\n    if arr[end] == num:\n        return end\n    return -1\n\ndef find_first_occurrence(arr, num):\n    start = 0\n    end = len(arr) - 1\n    while start + 1 < end:\n        mid = (start + end) // 2\n        if arr[mid] == num:\n            end = mid\n        else:\n            start = mid\n    if arr[start] == num:\n        return start\n    if arr[end] == num:\n        return end\n    return -1\n\narr = [1, 2, 2, 2, 2, 3, 4, 7, 8, 8]\nprint(last_occurrence(arr, 2))\nprint(last_occurrence(arr, 3))\nprint(last_occurrence(arr, 5))\nprint(last_occurrence(arr, 8))\nprint(last_occurrence(arr, 1))"
    },
    {
      "rank": 63,
      "score": 8.0,
      "candidate": "def last_occurrence_of_number(num, arr):\n    left = 0\n    right = len(arr) - 1\n\n    while left < right:\n        mid = (left + right) // 2\n\n        if arr[mid] == num:\n            right = mid\n        elif arr[mid] < num:\n            left = mid + 1\n        else:\n            right = mid - 1\n\n    return left\n\nprint(last_occurrence_of_number(3, [1, 2, 3, 3, 3, 3, 4, 5]))\nprint(last_occurrence_of_number(3, [1, 2, 3, 3, 4, 5]))\nprint(last_occurrence_of_number(3, [1, 3, 3, 3, 3]))"
    },
    {
      "rank": 64,
      "score": 8.0,
      "candidate": "from typing import List\n\n\n# Time complexity: O(logN)\n# Space complexity: O(1)\ndef last_index_of(array: List[int], target: int) -> int:\n    if not array:\n        return -1\n\n    left, right = 0, len(array) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if array[mid] == target:\n            right = mid - 1\n        elif array[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n\n    if left > right:\n        return -1\n    return right\n\n\n# Time complexity: O(logN)\n# Space complexity: O(1)\ndef last_index_of2(array: List[int], target: int) -> int:\n    if not array:\n        return -1\n\n    left, right = 0, len(array) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if array[mid] == target:\n            if mid == len(array) - 1 or array[mid + 1] != target:\n                return mid\n            else:\n                right = mid - 1\n        elif array[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n\n    return -1\n\n\nif __name__ == \"__main__\":\n    array1 = [1, 2, 3, 3, 3, 3, 4, 5]\n    array2 = [1, 2, 3, 3, 3, 3, 4, 5, 5]\n    array3 = [1, 2, 3, 3, 3, 3, 4, 5, 5, 6]\n    array4 = [1, 2, 3, 3, 3, 3, 4, 5, 5, 6, 7]\n    array5 = [1, 2, 3, 3, 3, 3, 4, 5, 5,"
    },
    {
      "rank": 65,
      "score": 8.0,
      "candidate": "def search_last(arr, num):\n    \"\"\"\n    :type arr: List[int]\n    :type num: int\n    :rtype: int\n    \"\"\"\n    if len(arr) == 0:\n        return -1\n\n    start = 0\n    end = len(arr) - 1\n    while start < end:\n        mid = (start + end) // 2\n        if arr[mid] == num:\n            start = mid\n        elif arr[mid] < num:\n            start = mid + 1\n        else:\n            end = mid\n\n    if arr[start] == num:\n        return start\n    return -1\n\n\ndef search_last_eff(arr, num):\n    \"\"\"\n    :type arr: List[int]\n    :type num: int\n    :rtype: int\n    \"\"\"\n    if len(arr) == 0:\n        return -1\n\n    start = 0\n    end = len(arr) - 1\n    while start <= end:\n        mid = (start + end) // 2\n        if arr[mid] == num:\n            end = mid - 1\n        elif arr[mid] < num:\n            start = mid + 1\n        else:\n            end = mid - 1\n\n    if start < len(arr) and arr[start] == num:\n        return start\n    return -1\n\n\narr = [1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,"
    },
    {
      "rank": 66,
      "score": 8.0,
      "candidate": "def last_occurrence(array, number):\n    \"\"\"\n    Time Complexity: O(log(n))\n    Space Complexity: O(1)\n    \"\"\"\n    left = 0\n    right = len(array) - 1\n\n    while left <= right:\n        mid = (left + right) // 2\n\n        if array[mid] > number:\n            right = mid - 1\n        elif array[mid] < number:\n            left = mid + 1\n        else:\n            if mid == 0 or array[mid - 1] != number:\n                return mid\n            right = mid - 1\n\n    return -1"
    },
    {
      "rank": 67,
      "score": 8.0,
      "candidate": "def find_index(arr, num):\n    left = 0\n    right = len(arr) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == num:\n            return mid\n        elif arr[mid] > num:\n            right = mid - 1\n        elif arr[mid] < num:\n            left = mid + 1\n    return -1\n\narr = [1, 2, 2, 3, 4, 5, 5, 5, 6, 7, 8, 8, 8, 8, 8, 9]\nnum = 8\nprint(find_index(arr, num))"
    },
    {
      "rank": 68,
      "score": 8.0,
      "candidate": "def last_index(arr, n):\n    \"\"\"\n    :param arr: list of integers\n    :param n: int, number to be found\n    :return: index of n, -1 if not found\n    \"\"\"\n    low = 0\n    high = len(arr) - 1\n    while low <= high:\n        mid = (low + high) // 2\n        if arr[mid] == n:\n            high = mid - 1\n        elif arr[mid] < n:\n            low = mid + 1\n        else:\n            high = mid - 1\n    if low < len(arr) and arr[low] == n:\n        return low\n    return -1\n\n\ndef test_last_index():\n    arr = [1, 2, 2, 2, 3, 4, 5, 6, 7, 8]\n    assert last_index(arr, 2) == 3\n    assert last_index(arr, 1) == 0\n    assert last_index(arr, 3) == 4\n    assert last_index(arr, 5) == 6\n    assert last_index(arr, 6) == 7\n    assert last_index(arr, 8) == 8\n    assert last_index(arr, 9) == -1\n\n\nif __name__ == '__main__':\n    test_last_index()"
    },
    {
      "rank": 69,
      "score": 8.0,
      "candidate": "def last_index_of(arr, n):\n    if len(arr) == 0:\n        return -1\n\n    if arr[-1] != n:\n        return -1\n\n    low = 0\n    high = len(arr) - 1\n\n    while low <= high:\n        mid = low + (high - low) // 2\n\n        if arr[mid] == n:\n            if arr[mid - 1] != n:\n                return mid\n            high = mid - 1\n        else:\n            low = mid + 1\n\n    return -1\n\nprint(last_index_of([1, 3, 3, 5, 7, 9, 9, 9, 9, 10], 9))\nprint(last_index_of([1, 3, 3, 5, 7, 9, 9, 9, 9, 10], 7))\nprint(last_index_of([1, 3, 3, 5, 7, 9, 9, 9, 9, 10], 10))\nprint(last_index_of([1, 3, 3, 5, 7, 9, 9, 9, 9, 10], 11))\nprint(last_index_of([1, 3, 3, 5, 7, 9, 9, 9, 9, 10], 1))\nprint(last_index_of([1, 3, 3, 5, 7, 9, 9, 9, 9, 10], 3))\nprint(last_index_of([1, 3, 3, 5, 7, 9, 9, 9, 9, 10], 5))\nprint(last_index_of([1, 3, 3, 5, 7, 9, 9, 9, 9, 10], 7))\nprint(last_index_of([1, 3, 3, 5, 7, 9, 9, 9, 9,"
    },
    {
      "rank": 70,
      "score": 8.0,
      "candidate": "from typing import List\n\n\n# Time complexity: O(log n)\n# Space complexity: O(1)\ndef last_occurrence(array: List[int], target: int) -> int:\n    left, right = 0, len(array) - 1\n\n    while left <= right:\n        mid = (left + right) // 2\n        if array[mid] == target:\n            right = mid - 1\n        elif array[mid] > target:\n            right = mid - 1\n        else:\n            left = mid + 1\n\n    return left if array[left] == target else -1\n\n\n# Time complexity: O(log n)\n# Space complexity: O(1)\ndef last_occurrence_2(array: List[int], target: int) -> int:\n    left, right = 0, len(array) - 1\n\n    while left <= right:\n        mid = (left + right) // 2\n        if array[mid] == target:\n            left = mid + 1\n        elif array[mid] > target:\n            right = mid - 1\n        else:\n            left = mid + 1\n\n    return left - 1 if array[left - 1] == target else -1\n\n\nif __name__ == \"__main__\":\n    assert last_occurrence([1, 2, 5, 5, 5, 5, 10], 5) == 4\n    assert last_occurrence([1, 2, 5, 5, 5, 5, 10], 4) == -1\n    assert last_occurrence([1, 2, 5, 5, 5, 5, 10], 11) == -1\n    assert last_occurrence([1, 2, 5, 5, 5, 5, 10], 10) == 6"
    },
    {
      "rank": 71,
      "score": 8.0,
      "candidate": "def find_index(array, number):\n    return find_index_recursively(array, number, 0, len(array) - 1)\n\ndef find_index_recursively(array, number, start, end):\n    if start > end:\n        return -1\n    mid = start + (end - start) // 2\n    if number > array[mid]:\n        return find_index_recursively(array, number, mid + 1, end)\n    elif number < array[mid]:\n        return find_index_recursively(array, number, start, mid - 1)\n    elif number == array[mid]:\n        index = find_index_recursively(array, number, start, mid - 1)\n        if index == -1:\n            return mid\n        else:\n            return index\n\narray = [1, 2, 2, 2, 2, 3, 4, 5, 6, 7, 8, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 7"
    },
    {
      "rank": 72,
      "score": 8.0,
      "candidate": "def last_index(arr, number):\n    low = 0\n    high = len(arr) - 1\n\n    while low <= high:\n        mid = (low + high) // 2\n        if arr[mid] == number:\n            low = mid + 1\n        else:\n            if arr[mid] < number:\n                low = mid + 1\n            else:\n                high = mid - 1\n\n    if low > len(arr) - 1:\n        return -1\n    else:\n        return low - 1\n\n\nprint(last_index([1, 2, 3, 4, 5, 5, 5, 6, 7, 8, 9], 5))"
    },
    {
      "rank": 73,
      "score": 8.0,
      "candidate": "def last_occurrence(arr, num):\n    left = 0\n    right = len(arr) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == num:\n            right = mid - 1\n        elif arr[mid] < num:\n            left = mid + 1\n        else:\n            right = mid - 1\n    if left < len(arr) and arr[left] == num:\n        return left\n    return -1\n\nprint(last_occurrence([1,2,3,3,3,3,4,5], 3))"
    },
    {
      "rank": 74,
      "score": 8.0,
      "candidate": "def last_occurrence_index(arr, n):\n    left, right = 0, len(arr) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == n:\n            if arr[mid] > arr[mid + 1]:\n                return mid\n            else:\n                right = mid - 1\n        elif arr[mid] > n:\n            right = mid - 1\n        else:\n            left = mid + 1\n    return -1\n\n\nif __name__ == \"__main__\":\n    print(last_occurrence_index([1, 2, 2, 2, 3, 4, 7, 8, 8], 8))\n    print(last_occurrence_index([1, 2, 2, 2, 3, 4, 7, 8, 8], 7))\n    print(last_occurrence_index([1, 2, 2, 2, 3, 4, 7, 8, 8], 5))\n    print(last_occurrence_index([1, 2, 2, 2, 3, 4, 7, 8, 8], 1))"
    },
    {
      "rank": 75,
      "score": 8.0,
      "candidate": "def last_occurrence(arr, num):\n    if not arr:\n        return -1\n\n    left = 0\n    right = len(arr) - 1\n\n    while left <= right:\n        middle = (left + right) // 2\n\n        if arr[middle] == num:\n            if arr[middle + 1] != num:\n                return middle\n            else:\n                right = middle - 1\n        elif arr[middle] > num:\n            right = middle - 1\n        else:\n            left = middle + 1\n\n    return -1\n\n\nprint(last_occurrence([1, 2, 2, 2, 2, 3, 4, 7, 8, 8], 8))"
    },
    {
      "rank": 76,
      "score": 8.0,
      "candidate": "def last_occurrence(arr, num):\n    \"\"\"\n    :param arr: given sorted array\n    :param num: given number\n    :return: index of the last occurrence of a given number in a sorted array\n    \"\"\"\n    if len(arr) == 0:\n        return -1\n\n    left, right = 0, len(arr) - 1\n\n    while left <= right:\n        middle = (left + right) // 2\n\n        if arr[middle] == num:\n            right = middle - 1\n        elif arr[middle] < num:\n            left = middle + 1\n        else:\n            return -1\n\n    return left\n\n\nif __name__ == \"__main__\":\n    arr = [1, 2, 2, 2, 2, 3, 4, 7, 8, 8]\n    print(last_occurrence(arr, 2))"
    },
    {
      "rank": 77,
      "score": 1.0,
      "candidate": "def last_occurrence(arr, num):\n    start, end = 0, len(arr) - 1\n    while start <= end:\n        mid = (start + end) // 2\n        if arr[mid] == num:\n            if arr[mid] < arr[mid + 1]:\n                return mid\n            else:\n                end = mid - 1\n        elif arr[mid] > num:\n            end = mid - 1\n        else:\n            start = mid + 1\n    return -1\n\n\nif __name__ == \"__main__\":\n    arr = [1, 2, 2, 2, 2, 3, 4, 7, 8, 8]\n    num = 2\n    print(last_occurrence(arr, num))"
    },
    {
      "rank": 78,
      "score": 1.0,
      "candidate": "class Solution:\n    def last_occurrence(self, arr, x):\n        \"\"\"\n        :type arr: List[int]\n        :type x: int\n        :rtype: int\n        \"\"\"\n        # Base case\n        if len(arr) == 0:\n            return -1\n\n        # Using binary search\n        left, right = 0, len(arr) - 1\n        while left <= right:\n            mid = (left + right) // 2\n            if arr[mid] == x:\n                # If element is found at the last index, return it\n                if mid == len(arr) - 1 or arr[mid + 1] != x:\n                    return mid\n                else:\n                    right = mid - 1\n            # If element is greater, ignore right half\n            elif arr[mid] < x:\n                left = mid + 1\n            # If element is smaller, ignore left half\n            else:\n                right = mid - 1\n        return -1\n\n\nif __name__ == \"__main__\":\n    s = Solution()\n    arr = [1, 2, 3, 3, 4, 5, 6, 6, 6, 7, 8, 9, 10]\n    print(s.last_occurrence(arr, 6))\n    print(s.last_occurrence(arr, 4))\n    print(s.last_occurrence(arr, 0))\n    print(s.last_occurrence(arr, 11))"
    },
    {
      "rank": 79,
      "score": 1.0,
      "candidate": "def search(array, target):\n    \"\"\"\n    :type array: List[int]\n    :type target: int\n    :rtype: int\n    \"\"\"\n    l = len(array)\n    if l == 0:\n        return -1\n    if l == 1:\n        return 0 if array[0] == target else -1\n\n    low = 0\n    high = l - 1\n    while low <= high:\n        mid = (low + high) // 2\n        if array[mid] == target:\n            return search_up(array, mid, target)\n        elif array[mid] < target:\n            low = mid + 1\n        else:\n            high = mid - 1\n    return -1\n\ndef search_up(array, start, target):\n    l = len(array)\n    if start == l - 1:\n        return start if array[start] == target else -1\n    if start == 0:\n        return 0 if array[0] == target else -1\n\n    low = start\n    high = l - 1\n    while low <= high:\n        mid = (low + high) // 2\n        if array[mid] == target:\n            return mid\n        elif array[mid] < target:\n            low = mid + 1\n        else:\n            high = mid - 1\n    return -1\n\n\ndef search2(array, target):\n    l = len(array)\n    if l == 0:\n        return -1\n    if l == 1:\n        return 0 if array[0] == target else -1\n\n    low = 0\n    high = l - 1\n    while low <= high:\n        mid = (low + high) // 2\n        if array[mid] == target:\n            return search_down(array, mid, target)\n        elif array[mid] < target:\n            low = mid + 1\n        else:\n            high = mid - 1\n    return -1\n\ndef search_down(array, start, target):\n    l = len(array)\n    if start == l - 1:\n        return start if array[start] =="
    },
    {
      "rank": 80,
      "score": 1.0,
      "candidate": "class Solution:\n    def last_occurrence(self, arr, num):\n        left, right = 0, len(arr) - 1\n        while left < right:\n            mid = (left + right) // 2\n            if arr[mid] == num:\n                left = mid\n            elif arr[mid] > num:\n                right = mid\n            else:\n                left = mid + 1\n        if arr[left] == num:\n            return left\n        else:\n            return -1\n\n\nif __name__ == \"__main__\":\n    s = Solution()\n    arr = [0, 1, 2, 3, 3, 3, 4, 5]\n    num = 3\n    assert s.last_occurrence(arr, num) == 6\n\n    arr = [2, 4, 6, 8, 10]\n    num = 4\n    assert s.last_occurrence(arr, num) == 1"
    },
    {
      "rank": 81,
      "score": 1.0,
      "candidate": "def search_last(arr, x):\n    \"\"\"\n    find the index of the last occurrence of a given number in a sorted array.\n    Args:\n        arr(list): list of sorted numbers\n        x(int): number to search in arr\n    Returns:\n        index(int): index of last occurrence of x in arr\n    \"\"\"\n    l, r = 0, len(arr) - 1\n    while l <= r:\n        mid = (l + r) // 2\n        if arr[mid] == x:\n            l = mid + 1\n        elif arr[mid] < x:\n            l = mid + 1\n        else:\n            r = mid - 1\n    return r\n\ndef main():\n    arr = [1, 1, 2, 3, 3, 3, 4, 5, 10]\n    x = 3\n    print(search_last(arr, x))\n\nmain()"
    },
    {
      "rank": 82,
      "score": 1.0,
      "candidate": "def last_index_of(arr, num):\n    start = 0\n    end = len(arr) - 1\n\n    while start <= end:\n        mid = (start + end) // 2\n        if arr[mid] == num:\n            start = mid + 1\n        elif arr[mid] < num:\n            start = mid + 1\n        else:\n            end = mid - 1\n\n    return end\n\nprint(last_index_of([1, 2, 2, 2, 2, 3, 4, 7, 8, 8], 8))\nprint(last_index_of([1, 2, 2, 2, 2, 3, 4, 7, 8, 8], 1))\nprint(last_index_of([1, 2, 2, 2, 2, 3, 4, 7, 8, 8], 2))\nprint(last_index_of([1, 2, 2, 2, 2, 3, 4, 7, 8, 8], 3))\nprint(last_index_of([1, 2, 2, 2, 2, 3, 4, 7, 8, 8], 4))\nprint(last_index_of([1, 2, 2, 2, 2, 3, 4, 7, 8, 8], 7))\nprint(last_index_of([1, 2, 2, 2, 2, 3, 4, 7, 8, 8], 8))\nprint(last_index_of([1, 2, 2, 2, 2, 3, 4, 7, 8, 8], 9))"
    },
    {
      "rank": 83,
      "score": 1.0,
      "candidate": "def find_last_index(array, target):\n    \"\"\"\n    :type array: List[int]\n    :type target: int\n    :rtype: int\n    \"\"\"\n    # if array is empty\n    if len(array) == 0:\n        return -1\n\n    # if array is not empty\n    # initialize left and right pointer\n    left, right = 0, len(array) - 1\n\n    # while left pointer is less than right pointer\n    while left < right:\n        # find the middle index\n        mid = (left + right) // 2\n\n        # if target is equal to middle element\n        if array[mid] == target:\n            # set right pointer to middle\n            right = mid\n        # if target is greater than middle element\n        elif array[mid] < target:\n            # set left pointer to middle + 1\n            left = mid + 1\n        # if target is less than middle element\n        else:\n            # set right pointer to middle - 1\n            right = mid - 1\n\n    # if target is equal to left element\n    if array[left] == target:\n        # return left\n        return left\n    # if target is not equal to left element\n    else:\n        # return -1\n        return -1\n\n\n# test case\narray = [1, 2, 2, 2, 3, 4, 5, 6, 7, 8, 8, 8, 8, 9, 10]\nprint(find_last_index(array, 8)) # 12\nprint(find_last_index(array, 5)) # 5\nprint(find_last_index(array, 10)) # 15\nprint(find_last_index(array, 11)) # -1"
    },
    {
      "rank": 84,
      "score": 1.0,
      "candidate": "from typing import List\n\n\nclass Solution:\n    def last_occurrence(self, arr: List[int], number: int) -> int:\n        \"\"\"Binary search\"\"\"\n        left, right = 0, len(arr) - 1\n        while left <= right:\n            mid = (left + right) // 2\n            if arr[mid] == number:\n                right = mid - 1\n            elif arr[mid] > number:\n                right = mid - 1\n            else:\n                left = mid + 1\n\n        return right\n\n\nif __name__ == \"__main__\":\n    arr = [1, 3, 5, 5, 6, 7, 8, 9, 10]\n    number = 5\n    sol = Solution()\n    index = sol.last_occurrence(arr, number)\n    print(index)"
    },
    {
      "rank": 85,
      "score": 1.0,
      "candidate": "from typing import List\n\n\ndef last_index(arr: List[int], num: int) -> int:\n    \"\"\"\n    This problem is similar to finding the first occurrence of a number in a sorted array.\n    The only difference is that we need to return the last occurrence instead of the first occurrence.\n\n    If the number is not found, we need to return -1.\n\n    If the number is found in the last element, we need to return the index of the last element.\n\n    If the number is found in the first element, we need to return 0.\n\n    If the number is found in the middle, we need to return the index of the middle element.\n\n    We can use binary search to solve this problem in O(logn) time.\n    \"\"\"\n    left = 0\n    right = len(arr) - 1\n\n    while left <= right:\n        mid = left + (right - left) // 2\n\n        if arr[mid] == num:\n            # if mid is the last index, we can return it\n            if mid == len(arr) - 1:\n                return mid\n\n            # otherwise, we need to check the next element\n            # if the next element is not equal to num, we can return mid\n            if arr[mid + 1] != num:\n                return mid\n\n            # otherwise, we need to move left pointer to mid + 1\n            left = mid + 1\n\n        elif arr[mid] < num:\n            left = mid + 1\n        else:\n            right = mid - 1\n\n    # if the number is not found, we need to return -1\n    return -1\n\n\nif __name__ == \"__main__\":\n    assert last_index([1, 2, 3, 3, 4, 5], 3) == 4\n    assert last_index([1, 2, 3, 3, 4, 5], 6) == -1\n    assert last_index([1, 2, 3, 3, 4, 5], 1) == 0"
    },
    {
      "rank": 86,
      "score": 1.0,
      "candidate": "class Solution:\n    def last_occurrence(self, arr, n):\n        left = 0\n        right = len(arr) - 1\n\n        while left <= right:\n            mid = (left + right) // 2\n\n            if arr[mid] == n:\n                index = mid\n                right = mid - 1\n            elif arr[mid] > n:\n                right = mid - 1\n            else:\n                left = mid + 1\n\n        return index\n\n\nif __name__ == \"__main__\":\n    s = Solution()\n    arr = [1, 2, 3, 3, 3, 3, 4, 5]\n    n = 3\n    print(s.last_occurrence(arr, n))"
    },
    {
      "rank": 87,
      "score": 1.0,
      "candidate": "def find_last_index(arr, num):\n    left = 0\n    right = len(arr) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == num:\n            if mid == len(arr) - 1:\n                return mid\n            elif arr[mid + 1] != num:\n                return mid\n            else:\n                left = mid + 1\n        elif arr[mid] < num:\n            left = mid + 1\n        else:\n            right = mid - 1\n\n\ndef find_last_index_iterative(arr, num):\n    left = 0\n    right = len(arr) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == num:\n            if mid == len(arr) - 1:\n                return mid\n            elif arr[mid + 1] != num:\n                return mid\n            else:\n                left = mid + 1\n        elif arr[mid] < num:\n            left = mid + 1\n        else:\n            right = mid - 1\n\n\ndef test_find_last_index():\n    arr = [1, 3, 3, 5, 7, 8, 9, 9, 9, 10]\n    assert find_last_index(arr, 3) == 2\n    assert find_last_index(arr, 5) == 3\n    assert find_last_index(arr, 9) == 8\n    assert find_last_index(arr, 10) == 9\n    assert find_last_index(arr, 1) == 0\n    assert find_last_index(arr, 8) == 6\n\n\ndef test_find_last_index_iterative():\n    arr = [1, 3, 3, 5, 7, 8, 9, 9, 9, 10]\n    assert find_last_index_iterative(arr, 3) == 2\n    assert find_last_index_iterative(arr, 5) =="
    },
    {
      "rank": 88,
      "score": 1.0,
      "candidate": "def last_occurrence(arr, number):\n    left, right = 0, len(arr) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == number:\n            index = mid\n            right = mid - 1\n        elif arr[mid] > number:\n            right = mid - 1\n        else:\n            left = mid + 1\n    return index\n\n\nprint(last_occurrence([1, 2, 2, 2, 2, 3, 4, 7, 8, 8], 8))"
    },
    {
      "rank": 89,
      "score": 1.0,
      "candidate": "def last_index(arr, number):\n    first_index = binary_search(arr, number, 0, len(arr) - 1)\n\n    if first_index < 0:\n        return -1\n\n    while first_index < len(arr) and arr[first_index] == number:\n        first_index += 1\n\n    return first_index - 1\n\n\ndef binary_search(arr, number, start, end):\n    if start > end:\n        return -1\n\n    mid = (start + end) // 2\n\n    if arr[mid] == number:\n        return mid\n    elif arr[mid] > number:\n        return binary_search(arr, number, start, mid - 1)\n    else:\n        return binary_search(arr, number, mid + 1, end)\n\n\nprint(last_index([1, 1, 2, 2, 2, 3, 4, 7, 8, 8], 8))"
    },
    {
      "rank": 90,
      "score": 1.0,
      "candidate": "from typing import List\n\n\nclass Solution:\n    def last_index_of(self, arr: List[int], num: int) -> int:\n        left, right = 0, len(arr) - 1\n        while left < right:\n            mid = (left + right) // 2\n            if arr[mid] < num:\n                left = mid + 1\n            else:\n                right = mid\n\n        if arr[left] != num:\n            return -1\n        return left\n\n\nif __name__ == \"__main__\":\n    arr = [1, 2, 2, 2, 2, 3, 4, 7, 8, 8]\n    num = 2\n    out = 3\n    res = Solution().last_index_of(arr, num)\n    assert res == out, (res, out)\n\n    arr = [1, 2, 2, 2, 2, 3, 4, 7, 8, 8]\n    num = 8\n    out = 8\n    res = Solution().last_index_of(arr, num)\n    assert res == out, (res, out)\n\n    arr = [1, 2, 2, 2, 2, 3, 4, 7, 8, 8]\n    num = 1\n    out = 0\n    res = Solution().last_index_of(arr, num)\n    assert res == out, (res, out)\n\n    arr = [1, 2, 2, 2, 2, 3, 4, 7, 8, 8]\n    num = 0\n    out = -1\n    res = Solution().last_index_of(arr, num)\n    assert res == out, (res, out)\n\n    arr = [1, 2, 2, 2, 2, 3, 4, 7, 8, 8]\n    num = 10\n    out = -1\n    res = Solution().last_index_of(arr, num)\n    assert res == out, (res, out)"
    },
    {
      "rank": 91,
      "score": 1.0,
      "candidate": "from typing import List\n\n\ndef last_occurrence_binary_search(arr: List[int], target: int) -> int:\n    \"\"\"\n    O(logn)\n    \"\"\"\n    start, end = 0, len(arr) - 1\n\n    while start <= end:\n        mid = (start + end) // 2\n\n        if arr[mid] == target:\n            # check for the right side\n            if mid + 1 < len(arr) and arr[mid + 1] == target:\n                start = mid + 1\n            else:\n                return mid\n        elif arr[mid] < target:\n            start = mid + 1\n        else:\n            end = mid - 1\n\n    return -1\n\n\nif __name__ == \"__main__\":\n    assert last_occurrence_binary_search([1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4, 4, 5, 6], 3) == 6\n    assert last_occurrence_binary_search([1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4, 4, 5, 6], 4) == 10\n    assert last_occurrence_binary_search([1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4, 4, 5, 6], 1) == 1\n    assert last_occurrence_binary_search([1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4, 4, 5, 6], 6) == 12\n    assert last_occurrence_binary_search([1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4, 4, 5, 6], 2) == 3\n    assert last_occurrence_binary_search([1, 1, 2, 2, 2, 3,"
    },
    {
      "rank": 92,
      "score": 1.0,
      "candidate": "def last_index_of(arr, n):\n    left = 0\n    right = len(arr) - 1\n\n    while left < right:\n        mid = (left + right) // 2\n        if arr[mid] < n:\n            left = mid + 1\n        else:\n            right = mid\n\n    return left if arr[left] == n else -1\n\n\nif __name__ == \"__main__\":\n    print(last_index_of([1, 2, 3, 3, 3, 3, 4, 5], 3))"
    },
    {
      "rank": 93,
      "score": 1.0,
      "candidate": "from typing import List\n\n\ndef last_occurrence(arr: List[int], number: int) -> int:\n    \"\"\"\n    Time Complexity: O(log(n))\n    \"\"\"\n    left, right = 0, len(arr) - 1\n\n    while left <= right:\n        mid = (left + right) // 2\n\n        if arr[mid] < number:\n            left = mid + 1\n        elif arr[mid] > number:\n            right = mid - 1\n        else:\n            right = mid\n\n    return left\n\n\nif __name__ == \"__main__\":\n    assert last_occurrence([1, 2, 2, 2, 2, 3, 4, 7, 8, 8], 2) == 5\n    assert last_occurrence([1, 1, 2, 2, 2, 2, 3, 4, 7, 8, 8], 2) == 5\n    assert last_occurrence([1, 2, 2, 2, 2, 3, 4, 7, 8, 8], 8) == 9\n    assert last_occurrence([1, 2, 2, 2, 2, 3, 4, 7, 8, 8], 0) == -1"
    },
    {
      "rank": 94,
      "score": 1.0,
      "candidate": "def last_occurrence(arr, number):\n    low = 0\n    high = len(arr) - 1\n\n    while low <= high:\n        mid = (low + high) // 2\n\n        if arr[mid] == number:\n            if mid + 1 < len(arr) and arr[mid + 1] == number:\n                low = mid + 1\n            else:\n                return mid\n        elif arr[mid] > number:\n            high = mid - 1\n        else:\n            low = mid + 1\n\n    return -1\n\n\n# Test cases\nprint(last_occurrence([1, 2, 2, 2, 3, 4, 7, 7, 8, 8], 2))\nprint(last_occurrence([1, 2, 2, 2, 3, 4, 7, 7, 8, 8], 7))\nprint(last_occurrence([1, 2, 2, 2, 3, 4, 7, 7, 8, 8], 9))\nprint(last_occurrence([1, 2, 2, 2, 3, 4, 7, 7, 8, 8], 0))\nprint(last_occurrence([1, 2, 2, 2, 3, 4, 7, 7, 8, 8], 8))"
    },
    {
      "rank": 95,
      "score": 1.0,
      "candidate": "class Solution:\n    def last_occurrence(self, arr, num):\n        \"\"\"\n        :type arr: List[int]\n        :type num: int\n        :rtype: int\n        \"\"\"\n        l, r = 0, len(arr) - 1\n        while l <= r:\n            mid = (l + r) // 2\n            if arr[mid] == num:\n                if mid + 1 < len(arr) and arr[mid + 1] == num:\n                    l = mid + 1\n                else:\n                    return mid\n            elif arr[mid] < num:\n                l = mid + 1\n            else:\n                r = mid - 1\n        return -1\n\n\nif __name__ == \"__main__\":\n    arr = [1, 2, 2, 2, 2, 3, 4, 7, 8, 8]\n    num = 2\n    solution = Solution()\n    print(solution.last_occurrence(arr, num))"
    },
    {
      "rank": 96,
      "score": 1.0,
      "candidate": "from typing import List\n\n\ndef last_occurrence(arr: List[int], num: int) -> int:\n    \"\"\"\n    The array must be sorted.\n    Time Complexity: O(log(n))\n    Space Complexity: O(1)\n    \"\"\"\n    start = 0\n    end = len(arr) - 1\n\n    while start <= end:\n        mid = (start + end) // 2\n\n        if arr[mid] == num:\n            end = mid - 1\n        elif arr[mid] < num:\n            start = mid + 1\n        else:\n            end = mid - 1\n\n    return start if arr[start] == num else -1\n\n\nif __name__ == \"__main__\":\n    assert last_occurrence([1, 2, 2, 2, 2, 3, 4, 7, 8, 8], 8) == 8\n    assert last_occurrence([1, 2, 2, 2, 2, 3, 4, 7, 8, 8], 1) == 0\n    assert last_occurrence([1, 2, 2, 2, 2, 3, 4, 7, 8, 8], 2) == 7\n    assert last_occurrence([1, 2, 2, 2, 2, 3, 4, 7, 8, 8], 3) == 5\n    assert last_occurrence([1, 2, 2, 2, 2, 3, 4, 7, 8, 8], 4) == 6\n    assert last_occurrence([1, 2, 2, 2, 2, 3, 4, 7, 8, 8], 5) == -1\n    assert last_occurrence([1, 2, 2, 2, 2, 3, 4, 7, 8, 8], 6) == -1\n    assert last_occurrence([1, 2, 2, 2, 2, 3, 4, 7, 8,"
    },
    {
      "rank": 97,
      "score": 1.0,
      "candidate": "from typing import List\n\n\ndef last_occurrence(array: List[int], number: int) -> int:\n    \"\"\"\n    Binary search\n    Time Complexity: O(log(n))\n    \"\"\"\n    low, high = 0, len(array) - 1\n\n    while low <= high:\n        mid = (low + high) // 2\n\n        if array[mid] == number:\n            high = mid - 1\n        elif array[mid] < number:\n            low = mid + 1\n        else:\n            high = mid - 1\n\n    return low\n\n\nif __name__ == \"__main__\":\n    assert last_occurrence([1, 2, 2, 2, 3, 4, 7, 7, 8, 8], 2) == 4\n    assert last_occurrence([1, 3, 3, 5, 7], 3) == 3\n    assert last_occurrence([1, 1, 2, 2, 2, 3, 4, 7, 7, 8, 8], 2) == 5\n    assert last_occurrence([1, 1, 2, 2, 2, 3, 4, 7, 7, 8, 8], 7) == 8\n    assert last_occurrence([1, 1, 2, 2, 2, 3, 4, 7, 7, 8, 8], 9) == -1\n    assert last_occurrence([1, 1, 2, 2, 2, 3, 4, 7, 7, 8, 8], 0) == -1\n    assert last_occurrence([1, 1, 2, 2, 2, 3, 4, 7, 7, 8, 8], 1) == 0"
    },
    {
      "rank": 98,
      "score": 1.0,
      "candidate": "from typing import List\n\n\n# Time Complexity: O(log(n))\n# Space Complexity: O(1)\ndef last_occurrence(array: List[int], number: int) -> int:\n    if not array:\n        return -1\n\n    start = 0\n    end = len(array) - 1\n\n    while start < end:\n        mid = start + (end - start) // 2\n\n        if number > array[mid]:\n            start = mid + 1\n        else:\n            end = mid\n\n    if start == end and array[start] == number:\n        return start\n\n    if start > 0 and array[start - 1] == number:\n        return start - 1\n\n    return -1\n\n\nif __name__ == \"__main__\":\n    assert last_occurrence([1, 2, 2, 3, 4, 5], 2) == 3\n    assert last_occurrence([1, 2, 2, 3, 4, 5], 3) == 3\n    assert last_occurrence([1, 2, 2, 3, 4, 5], 5) == 5\n    assert last_occurrence([1, 2, 2, 3, 4, 5], 6) == -1\n    assert last_occurrence([1, 1, 2], 1) == 1\n    assert last_occurrence([1, 1, 2], 2) == 2"
    },
    {
      "rank": 99,
      "score": 1.0,
      "candidate": "def find_last_occurrence(arr, num):\n    start = 0\n    end = len(arr) - 1\n\n    while start < end:\n        mid = (start + end) // 2\n\n        if arr[mid] == num:\n            end = mid\n        elif arr[mid] > num:\n            end = mid - 1\n        else:\n            start = mid + 1\n\n    return start if arr[start] == num else -1\n\n\ndef main():\n    print(find_last_occurrence([1, 2, 2, 2, 2, 3, 4, 7, 8, 8], 8))\n    print(find_last_occurrence([1, 2, 2, 2, 2, 3, 4, 7, 8, 8], 1))\n    print(find_last_occurrence([1, 2, 2, 2, 2, 3, 4, 7, 8, 8], 10))\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 100,
      "score": 1.0,
      "candidate": "def last_occurrence(arr, n):\n    start = 0\n    end = len(arr) - 1\n    while start <= end:\n        mid = (start + end) // 2\n        if arr[mid] == n:\n            if arr[mid - 1] != n:\n                return mid\n            else:\n                end = mid - 1\n        elif arr[mid] < n:\n            start = mid + 1\n        else:\n            end = mid - 1\n\n    return -1\n\n\nif __name__ == \"__main__\":\n    test_cases = [\n        ([1, 2, 2, 2, 2, 3, 4, 7, 8, 8], 2, 4),\n        ([1, 2, 2, 2, 2, 3, 4, 7, 8, 8], 7, 7),\n        ([1, 2, 2, 2, 2, 3, 4, 7, 8, 8], 8, 8),\n        ([1, 2, 2, 2, 2, 3, 4, 7, 8, 8], 4, 6),\n        ([1, 2, 2, 2, 2, 3, 4, 7, 8, 8], 1, 0),\n        ([1, 2, 2, 2, 2, 3, 4, 7, 8, 8], 3, 5),\n        ([1, 2, 2, 2, 2, 3, 4, 7, 8, 8], 9, -1),\n    ]\n\n    for test_case in test_cases:\n        arr, n, result = test_case\n        print(last_occurrence(arr, n) == result)"
    }
  ]
}