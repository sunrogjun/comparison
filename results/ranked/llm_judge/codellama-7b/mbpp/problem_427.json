{
  "timestamp": "2025-09-15T01:32:38.029807",
  "method": "improved_llm_judge",
  "judge_model": "codellama/CodeLlama-7b-Python-hf",
  "target_model": "codellama-7b",
  "dataset": "mbpp",
  "problem_number": 427,
  "total_candidates": 100,
  "results": [
    {
      "rank": 1,
      "score": 10.0,
      "candidate": "from collections import defaultdict\n\ndef count_bidirectional_tuple_pairs(tuples):\n    \"\"\"\n    Count bidirectional tuple pairs.\n\n    Time complexity: O(n).\n    Space complexity: O(n).\n    \"\"\"\n    # Edge case.\n    if not tuples:\n        return 0\n\n    # Use defaultdict to count frequency.\n    count = defaultdict(int)\n    for t in tuples:\n        count[t] += 1\n\n    # Count bidirectional tuple pairs.\n    total = 0\n    for t in tuples:\n        if count[t] >= 2:\n            total += count[t] - 1\n\n    return total"
    },
    {
      "rank": 2,
      "score": 10.0,
      "candidate": "def bidirectional_pairs(tuples):\n    \"\"\"\n    >>> bidirectional_pairs([(1, 2), (2, 3), (3, 4), (1, 4), (2, 4), (5, 6)])\n    3\n    \"\"\"\n    pairs = set()\n    for t in tuples:\n        if t not in pairs:\n            pairs.add(t)\n            pairs.add((t[1], t[0]))\n    return len(pairs)\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 3,
      "score": 10.0,
      "candidate": "def count_bidirectional_tuple_pairs(tuples):\n    \"\"\"\n    >>> tuples = [\n    ...     (0, 1), (1, 2), (2, 3), (3, 4),\n    ...     (4, 5), (5, 6), (6, 7), (7, 8),\n    ...     (8, 9), (9, 10), (10, 11), (11, 12),\n    ...     (12, 13), (13, 14), (14, 15), (15, 16),\n    ...     (16, 17), (17, 18), (18, 19), (19, 20),\n    ...     (20, 21), (21, 22), (22, 23), (23, 24),\n    ...     (24, 25), (25, 26), (26, 27), (27, 28),\n    ...     (28, 29), (29, 30), (30, 31), (31, 32),\n    ...     (32, 33), (33, 34), (34, 35), (35, 36),\n    ...     (36, 37), (37, 38), (38, 39), (39, 40),\n    ...     (40, 41), (41, 42), (42, 43), (43, 44),\n    ...     (44, 45), (45, 46), (46, 47), (47, 48),\n    ...     (48, 49), (49, 50), (50, 51), (51, 52),\n    ...     (52, 53), (53, 54), (54, 55), (55, 56),"
    },
    {
      "rank": 4,
      "score": 10.0,
      "candidate": "from collections import defaultdict\n\n\ndef bidirectional_tuple_pairs(lst):\n    \"\"\"\n    >>> bidirectional_tuple_pairs([(1, 2), (2, 3), (3, 4), (4, 1)])\n    {(1, 2): 1, (2, 3): 1, (3, 4): 1, (4, 1): 1}\n    >>> bidirectional_tuple_pairs([(1, 2), (2, 3), (3, 4), (4, 1), (1, 2)])\n    {(1, 2): 2, (2, 3): 1, (3, 4): 1, (4, 1): 1}\n    >>> bidirectional_tuple_pairs([(1, 2), (2, 3), (3, 4), (4, 1), (1, 2), (2, 3)])\n    {(1, 2): 3, (2, 3): 2, (3, 4): 1, (4, 1): 1}\n    >>> bidirectional_tuple_pairs([(1, 2), (2, 3), (3, 4), (4, 1), (1, 2), (2, 3), (2, 3)])\n    {(1, 2): 4, (2, 3): 3, (3, 4): 1, (4, 1): 1}\n    \"\"\"\n    d = defaultdict(int)\n    for t in lst:\n        d[t] += 1\n        d[(t[1], t[0])] += 1\n    return d\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 5,
      "score": 10.0,
      "candidate": "def count_bidirectional_tuple_pairs(tuples):\n    \"\"\"\n    >>> count_bidirectional_tuple_pairs([(1, 2), (2, 1), (2, 3), (2, 3)])\n    3\n    >>> count_bidirectional_tuple_pairs([(1, 2), (2, 1)])\n    1\n    >>> count_bidirectional_tuple_pairs([(1, 2), (1, 2)])\n    2\n    >>> count_bidirectional_tuple_pairs([(1, 2), (1, 2), (1, 2)])\n    3\n    >>> count_bidirectional_tuple_pairs([])\n    0\n    \"\"\"\n    count = 0\n    seen = set()\n    for tup in tuples:\n        if tup[::-1] in seen:\n            count += 1\n        seen.add(tup)\n    return count\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 6,
      "score": 10.0,
      "candidate": "def bidirectional_pairs(tuples):\n    # O(n) time | O(n) space\n    if not tuples:\n        return 0\n\n    count = 0\n    pairs_dict = {}\n    for tuple_ in tuples:\n        # add tuple to dict\n        pairs_dict[tuple_] = pairs_dict.get(tuple_, 0) + 1\n\n        # add reverse tuple to dict\n        pairs_dict[tuple_[::-1]] = pairs_dict.get(tuple_[::-1], 0) + 1\n\n        # count pairs\n        count += pairs_dict[tuple_] - 1\n\n    return count\n\n\ndef test():\n    assert bidirectional_pairs([(1, 2), (2, 3), (3, 4), (1, 2), (2, 3)]) == 2\n    assert bidirectional_pairs([(1, 2), (2, 1)]) == 1\n    assert bidirectional_pairs([(1, 2), (1, 2), (2, 1), (2, 1)]) == 2\n    assert bidirectional_pairs([(1, 2), (2, 3), (3, 4), (1, 2), (2, 1), (3, 4)]) == 4\n    assert bidirectional_pairs([(1, 2), (2, 3), (3, 4), (1, 2), (2, 1), (3, 4), (1, 2)]) == 5\n    assert bidirectional_pairs([(1, 2), (2, 3), (3, 4), (1, 2), (2, 1), (3, 4), (1, 2), (2, 3), (3, 4)]) == 7\n\n\nif __name__ == '__main__':\n    test()"
    },
    {
      "rank": 7,
      "score": 10.0,
      "candidate": "def count_bidirectional_tuple_pairs(tuples, direction=None):\n    \"\"\"\n    Count bidirectional tuple pairs.\n\n    :param tuples: a list of tuples\n    :param direction: count only a certain direction of tuples\n    :return: a list of tuples of counts\n    \"\"\"\n\n    # Initialize a dictionary to hold the counts\n    counts = {}\n\n    # Iterate over the tuples\n    for t in tuples:\n        # Extract the first and last element\n        first = t[0]\n        last = t[-1]\n        # Create a tuple of the first and last element\n        pair = tuple(sorted((first, last)))\n        # If the pair has been seen before, increment the count\n        # Otherwise, set the count to one\n        counts[pair] = counts.get(pair, 0) + 1\n\n    # If a direction was not specified, return all pairs\n    if direction is None:\n        return counts.items()\n    # If the direction was specified, return the count of that direction\n    else:\n        return counts[direction]\n\n\n# Example: Counting Pairs\n# Write a function to count bidirectional tuple pairs.\n# Given the list of tuples, return a list of tuples of counts.\n# Example:\n#   tuples = [(\"a\", \"b\"), (\"a\", \"c\"), (\"a\", \"b\"), (\"b\", \"c\")]\n#   count_bidirectional_tuple_pairs(tuples)\n#   # Returns [(\"a\", \"b\", 2), (\"a\", \"c\", 1), (\"b\", \"c\", 1)]\ntuples = [(\"a\", \"b\"), (\"a\", \"c\"), (\"a\", \"b\"), (\"b\", \"c\")]\nprint(count_bidirectional_tuple_pairs(tuples))\n# Should return [(\"a\", \"b\", 2), (\"a\", \"c\", 1), (\"b\", \"c\", 1)]\n\n# Example: Counting Directions\n# Write a function to count bidirectional tuple pairs.\n# Given the list of tuples, return a list of tuples of counts.\n# Example:\n#   tuples = [(\""
    },
    {
      "rank": 8,
      "score": 10.0,
      "candidate": "from collections import defaultdict\n\ndef count_pairs(lst):\n    \"\"\"\n    >>> count_pairs([1,2,3,2,1])\n    defaultdict(<type 'int'>, {(1, 2): 2, (2, 1): 2})\n    >>> count_pairs([1,2,3,2,1,4,5,4,6,7,8,9,8,7,6,5,4,3,2,1,2,3])\n    defaultdict(<type 'int'>, {(1, 2): 2, (2, 1): 2, (2, 3): 1, (3, 2): 1, (4, 5): 1, (5, 4): 1, (6, 7): 1, (7, 6): 1, (8, 9): 1, (9, 8): 1})\n    >>> count_pairs([1,2,3,4,5])\n    defaultdict(<type 'int'>, {(1, 2): 1, (2, 1): 1, (2, 3): 1, (3, 2): 1, (3, 4): 1, (4, 3): 1, (4, 5): 1, (5, 4): 1})\n    \"\"\"\n    pairs = defaultdict(int)\n    for i in range(len(lst) - 1):\n        pairs[(lst[i], lst[i + 1])] += 1\n        pairs[(lst[i + 1], lst[i])] += 1\n    return pairs\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 9,
      "score": 10.0,
      "candidate": "def count_bidirectional_tuple_pairs(tuples):\n    \"\"\"\n    >>> count_bidirectional_tuple_pairs([(1, 2), (3, 4), (1, 2)])\n    2\n    >>> count_bidirectional_tuple_pairs([(1, 2), (3, 4), (2, 1)])\n    2\n    >>> count_bidirectional_tuple_pairs([(1, 2), (3, 4), (2, 1), (2, 1)])\n    4\n    >>> count_bidirectional_tuple_pairs([(1, 2), (3, 4), (2, 1), (2, 1), (2, 1)])\n    5\n    \"\"\"\n    count = 0\n    for i in range(len(tuples)):\n        for j in range(i + 1, len(tuples)):\n            if tuples[i][0] == tuples[j][1] and tuples[i][1] == tuples[j][0]:\n                count += 1\n    return count\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 10,
      "score": 10.0,
      "candidate": "from typing import Tuple, List\nfrom itertools import tee\n\n\ndef count_bidirectional_pairs(nums: List[int]) -> int:\n    \"\"\"Returns count of bidirectional pairs.\n\n    >>> count_bidirectional_pairs([1, 2, 3, 4])\n    6\n    >>> count_bidirectional_pairs([1, 1, 1, 1])\n    6\n    >>> count_bidirectional_pairs([1, 2, 3, 3, 4, 5, 5, 5, 6])\n    14\n    >>> count_bidirectional_pairs([1])\n    0\n    \"\"\"\n    if len(nums) < 2:\n        return 0\n\n    count = 0\n    nums_1, nums_2 = tee(nums)\n    nums_1 = reversed(nums_1)\n    nums_2 = zip(nums_2, nums_1)\n\n    for num_1, num_2 in nums_2:\n        if num_1 == num_2:\n            count += 1\n\n    return count\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 11,
      "score": 10.0,
      "candidate": "def count_bidirectional_pairs(lst):\n    \"\"\"\n    >>> count_bidirectional_pairs([1, 2, 3, 4, 5])\n    10\n    >>> count_bidirectional_pairs([1, 2, 3, 4, 5, 6])\n    12\n    >>> count_bidirectional_pairs([1, 2, 3, 4, 5, 6, 7])\n    14\n    \"\"\"\n    return len(lst) * (len(lst) + 1) // 2\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 12,
      "score": 10.0,
      "candidate": "from itertools import combinations\n\n\ndef bidirectional_pairs_count(bidirectional_tuples):\n    count = 0\n    for pair in combinations(bidirectional_tuples, 2):\n        if pair[0][0] == pair[1][1] and pair[0][1] == pair[1][0]:\n            count += 1\n    return count\n\n\ndef test_bidirectional_pairs_count():\n    assert bidirectional_pairs_count([]) == 0\n    assert bidirectional_pairs_count([(0, 1), (1, 2)]) == 0\n    assert bidirectional_pairs_count([(0, 1), (1, 2), (2, 0)]) == 1\n    assert bidirectional_pairs_count([(0, 1), (1, 2), (2, 0), (3, 4), (4, 3)]) == 2\n\n\nif __name__ == \"__main__\":\n    test_bidirectional_pairs_count()"
    },
    {
      "rank": 13,
      "score": 10.0,
      "candidate": "def count_bidirectional_pairs(nums):\n    \"\"\"\n    >>> count_bidirectional_pairs([1, 2, 3, 4, 5, 6, 7, 8])\n    0\n    >>> count_bidirectional_pairs([1, 2, 2, 4, 5, 6, 6, 7, 8])\n    1\n    >>> count_bidirectional_pairs([1, 2, 2, 4, 5, 6, 7, 7, 8])\n    2\n    >>> count_bidirectional_pairs([1, 2, 2, 4, 5, 6, 6, 7, 8, 8])\n    3\n    >>> count_bidirectional_pairs([1, 2, 2, 2, 4, 5, 6, 7, 8, 8])\n    4\n    >>> count_bidirectional_pairs([1, 2, 2, 2, 4, 5, 6, 7, 8, 8, 8])\n    5\n    \"\"\"\n    n = len(nums)\n    count = 0\n    for i in range(n // 2):\n        if nums[i] == nums[n - 1 - i]:\n            count += 1\n    return count\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 14,
      "score": 9.370583536698913,
      "candidate": "def count_bidirectional_tuple_pairs(tuples):\n    \"\"\"\n    >>> count_bidirectional_tuple_pairs([(1, 2), (3, 4), (1, 4)])\n    1\n    >>> count_bidirectional_tuple_pairs([(1, 2), (3, 4), (1, 4), (2, 1)])\n    2\n    \"\"\"\n    count = 0\n    for i in range(len(tuples) - 1):\n        for j in range(i + 1, len(tuples)):\n            if (tuples[i][1], tuples[i][0]) == tuples[j]:\n                count += 1\n    return count\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 15,
      "score": 9.234050852198141,
      "candidate": "from itertools import product\n\n\ndef count_bidirectional_tuple_pairs(tuples):\n    \"\"\"Return count of bidirectional tuple pairs.\"\"\"\n    return len(set(product(tuples, repeat=2)))"
    },
    {
      "rank": 16,
      "score": 9.205959372648458,
      "candidate": "def count_bidirectional_tuple_pairs(tuples):\n    # Time complexity: O(n)\n    # Space complexity: O(n)\n    result = 0\n    for i in range(len(tuples)):\n        for j in range(i + 1, len(tuples)):\n            if tuples[i][0] == tuples[j][1] and tuples[i][1] == tuples[j][0]:\n                result += 1\n    return result\n\n\nprint(count_bidirectional_tuple_pairs([(1, 2), (2, 3), (3, 1), (1, 3)]))\nprint(count_bidirectional_tuple_pairs([(1, 2), (1, 3), (1, 4)]))"
    },
    {
      "rank": 17,
      "score": 9.177268828905222,
      "candidate": "def count_bidirectional(tuples, bidirectional=True):\n    \"\"\"\n    Count bidirectional tuple pairs.\n\n    :param tuples: list of tuples to count bidirectional pairs\n    :param bidirectional: True for bidirectional pairs, False for just first tuple\n    :return: count of pairs\n    \"\"\"\n    count = 0\n\n    for i in range(len(tuples)):\n        for j in range(i + 1, len(tuples)):\n            if tuples[i][0] == tuples[j][1] and tuples[i][1] == tuples[j][0]:\n                count += 1\n                if not bidirectional:\n                    break\n\n    return count\n\n\nif __name__ == \"__main__\":\n    test = [(1, 2), (2, 3), (3, 4), (4, 1)]\n    print(count_bidirectional(test))"
    },
    {
      "rank": 18,
      "score": 9.122564458729856,
      "candidate": "def count_bidirectional_tuple_pairs(tuples):\n    \"\"\"\n    >>> count_bidirectional_tuple_pairs([(1, 2), (2, 1), (1, 1), (2, 2)])\n    2\n    \"\"\"\n    return sum((1 for t in tuples if (t[1], t[0]) in tuples))\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 19,
      "score": 8.973005557553902,
      "candidate": "def count_bidirectional_tuple_pairs(lst):\n    \"\"\"\n    >>> count_bidirectional_tuple_pairs([(1, 2), (2, 3), (3, 4), (4, 1), (2, 1), (3, 2)])\n    3\n    >>> count_bidirectional_tuple_pairs([(1, 2), (2, 3), (3, 4), (4, 1), (2, 1)])\n    2\n    >>> count_bidirectional_tuple_pairs([(1, 2), (2, 3), (3, 4), (4, 1)])\n    0\n    \"\"\"\n    # 1. Iterate through the list\n    # 2. If the current element is not in the dictionary, add it to the dictionary\n    # 3. If it is in the dictionary, increment the value in the dictionary\n    # 4. Return the value in the dictionary\n    pairs_dict = {}\n    for tup in lst:\n        if tup[1] not in pairs_dict:\n            pairs_dict[tup[1]] = 1\n        else:\n            pairs_dict[tup[1]] += 1\n        if tup[0] not in pairs_dict:\n            pairs_dict[tup[0]] = 1\n        else:\n            pairs_dict[tup[0]] += 1\n    return sum(pairs_dict.values())\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 20,
      "score": 8.95994420569242,
      "candidate": "def bidirectional_tuple_pairs(lst):\n    \"\"\"\n    >>> bidirectional_tuple_pairs([(1, 2), (2, 1), (3, 4), (4, 3), (1, 4), (4, 1)])\n    3\n    \"\"\"\n    count = 0\n    seen = set()\n    for pair in lst:\n        if pair in seen:\n            count += 1\n        else:\n            seen.add(pair)\n    return count\n\ndef bidirectional_tuple_pairs_v2(lst):\n    \"\"\"\n    >>> bidirectional_tuple_pairs_v2([(1, 2), (2, 1), (3, 4), (4, 3), (1, 4), (4, 1)])\n    3\n    \"\"\"\n    count = 0\n    seen = set()\n    for pair in lst:\n        if pair[::-1] in seen:\n            count += 1\n        else:\n            seen.add(pair)\n    return count\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 21,
      "score": 8.946210893390457,
      "candidate": "def count_pairs(lst):\n    pairs = 0\n    for i in range(len(lst) - 1):\n        for j in range(i + 1, len(lst)):\n            if lst[i][::-1] == lst[j]:\n                pairs += 1\n    return pairs\n\n\nprint(count_pairs([\"abc\", \"abc\", \"cba\"]))\nprint(count_pairs([\"abc\", \"cba\", \"abc\"]))\nprint(count_pairs([\"abc\", \"cba\"]))"
    },
    {
      "rank": 22,
      "score": 8.932217008005624,
      "candidate": "from itertools import zip_longest\n\n\ndef count_pairs(first, second):\n    return len(\n        [\n            x\n            for x in zip_longest(first, second)\n            if x[0] == x[1] and x[0] is not None\n        ]\n    )\n\n\nif __name__ == \"__main__\":\n    first = [1, 2, 3, 4, 5]\n    second = [5, 4, 3, 2, 1]\n    assert count_pairs(first, second) == 5\n    assert count_pairs([1, 2, 3], [1, 2]) == 2\n    assert count_pairs([1, 2], [1, 2, 3]) == 2\n    assert count_pairs([1, 2, 3], [1, 2, 3]) == 3\n    assert count_pairs([1, 2, 3], [1, 2, 3, 4]) == 3"
    },
    {
      "rank": 23,
      "score": 8.910084504002544,
      "candidate": "def count_pairs(tuples):\n    \"\"\"\n    >>> count_pairs([(1, 2), (2, 1), (3, 4), (1, 2), (2, 3)])\n    3\n    \"\"\"\n    count = 0\n    seen = set()\n    for tup in tuples:\n        if tup in seen:\n            count += 1\n        else:\n            seen.add(tup)\n    return count\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 24,
      "score": 8.85571690049604,
      "candidate": "def count_bidirectional_tuple_pairs(lst):\n    count = 0\n    for i in range(len(lst) - 1):\n        for j in range(i + 1, len(lst)):\n            if lst[i] == lst[j]:\n                count += 1\n    return count\n\n\ndef test_bidirectional_tuple_pairs():\n    \"\"\"\n    >>> count_bidirectional_tuple_pairs([(1, 2), (2, 1), (3, 4), (1, 2), (2, 3), (3, 4), (3, 4)])\n    6\n    \"\"\"\n    pass\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 25,
      "score": 8.850707355641543,
      "candidate": "def count_bidirectional_tuple_pairs(lst):\n    \"\"\"\n    >>> count_bidirectional_tuple_pairs([(1, 2), (2, 1), (3, 4)])\n    1\n    >>> count_bidirectional_tuple_pairs([(1, 2), (2, 1), (3, 4), (1, 2)])\n    2\n    \"\"\"\n    seen = set()\n    count = 0\n\n    for a, b in lst:\n        if (a, b) in seen or (b, a) in seen:\n            count += 1\n        else:\n            seen.add((a, b))\n\n    return count\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 26,
      "score": 8.8281618090209,
      "candidate": "def count_bidirectional_pairs(tuples):\n    \"\"\"\n    >>> count_bidirectional_pairs([(1, 2), (2, 1), (2, 3), (3, 2), (3, 4), (4, 3)])\n    3\n    \"\"\"\n    counts = {}\n    for t in tuples:\n        counts[t] = counts.get(t, 0) + 1\n    return sum(counts.values())\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 27,
      "score": 8.81367773444215,
      "candidate": "def count_bidirectional_tuple_pairs(lst):\n    \"\"\"\n    >>> count_bidirectional_tuple_pairs([(1,2), (2,1), (1,3), (3,1)])\n    2\n    \"\"\"\n    pairs = 0\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            if lst[i] == (lst[j][1], lst[j][0]):\n                pairs += 1\n    return pairs\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 28,
      "score": 8.76828871349479,
      "candidate": "def count_bidirectional_pairs(lst):\n    pairs = []\n    for i in range(len(lst) - 1):\n        for j in range(i + 1, len(lst)):\n            if lst[i] == lst[j]:\n                pairs.append((lst[i], lst[j]))\n    return pairs\n\n\nif __name__ == \"__main__\":\n    lst = [1, 1, 2, 2, 2, 3, 3, 4, 5, 5]\n    print(count_bidirectional_pairs(lst))"
    },
    {
      "rank": 29,
      "score": 8.750282588864879,
      "candidate": "def count_pairs(lst1, lst2):\n    \"\"\"\n    >>> count_pairs([1,2,3,4,5], [5,4,3,2,1])\n    10\n    \"\"\"\n    return sum(1 for i in range(len(lst1))\n               if lst1[i] == lst2[i])\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 30,
      "score": 8.715724466237427,
      "candidate": "def count_pairs(arr):\n    arr_dict = {}\n    for i in arr:\n        if i[0] in arr_dict:\n            arr_dict[i[0]].append(i[1])\n        else:\n            arr_dict[i[0]] = [i[1]]\n        if i[1] in arr_dict:\n            arr_dict[i[1]].append(i[0])\n        else:\n            arr_dict[i[1]] = [i[0]]\n    return arr_dict\n\n\nif __name__ == \"__main__\":\n    print(count_pairs([(1, 2), (2, 1), (3, 4), (4, 3)]))"
    },
    {
      "rank": 31,
      "score": 8.692801520950061,
      "candidate": "def count_pairs(tuples):\n    return len(set(tuples))\n\n\ndef test_count_pairs():\n    assert count_pairs([(1, 2), (2, 1)]) == 1\n    assert count_pairs([(1, 2), (2, 3), (3, 1), (1, 2)]) == 2"
    },
    {
      "rank": 32,
      "score": 8.632293453617281,
      "candidate": "def bidirectional_tuple_count(lst):\n    pairs = set()\n    for i in range(len(lst)):\n        for j in range(i + 1, len(lst)):\n            pair = tuple(sorted([lst[i], lst[j]]))\n            pairs.add(pair)\n    return pairs\n\n\nprint(bidirectional_tuple_count([1, 2, 3, 4]))"
    },
    {
      "rank": 33,
      "score": 8.625262456968262,
      "candidate": "def count_pairs(lst):\n    \"\"\"\n    >>> count_pairs([(1, 2), (1, 3), (2, 3), (3, 4)])\n    3\n    \"\"\"\n    return sum([lst.count((i, j)) + lst.count((j, i)) for i in lst for j in lst if i != j]) // 2\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 34,
      "score": 8.616253589228675,
      "candidate": "def count_bidirectional_tuple_pairs(tuples):\n    count = 0\n    for i in range(len(tuples)):\n        for j in range(i + 1, len(tuples)):\n            if tuples[i][0] == tuples[j][1] and tuples[i][1] == tuples[j][0]:\n                count += 1\n    return count\n\n\nif __name__ == \"__main__\":\n    print(count_bidirectional_tuple_pairs([(1, 2), (2, 3), (3, 4), (4, 1)]))\n    print(count_bidirectional_tuple_pairs([(1, 2), (1, 3), (2, 3)]))\n    print(count_bidirectional_tuple_pairs([(1, 2), (2, 3), (3, 4), (4, 5), (5, 6)]))"
    },
    {
      "rank": 35,
      "score": 8.610076160146226,
      "candidate": "def count_bidirectional_pairs(a, b):\n    \"\"\"\n    Count bidirectional pairs of a and b.\n    \"\"\"\n    return len(set(a) & set(b))"
    },
    {
      "rank": 36,
      "score": 8.606486429141842,
      "candidate": "def count_bidirectional_pairs(tuples):\n    \"\"\"\n    Return the number of bidirectional pairs in the tuples.\n    \"\"\"\n    pairs = 0\n    for i in range(len(tuples)):\n        for j in range(i, len(tuples)):\n            if tuples[i] == tuples[j]:\n                pairs += 1\n    return pairs"
    },
    {
      "rank": 37,
      "score": 8.60156811074208,
      "candidate": "from itertools import product\n\n\ndef count_pairs(first, second):\n    \"\"\"\n    >>> count_pairs([1,2,3], [4,5,6])\n    9\n    >>> count_pairs([1,2], [4,5,6])\n    6\n    >>> count_pairs([1,2,3,4], [4,5,6])\n    9\n    \"\"\"\n    return len(list(product(first, second)))\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 38,
      "score": 8.565425580227462,
      "candidate": "from itertools import product\n\n\ndef bidirectional_pairs(iterable):\n    return sum(i == j for i, j in product(iterable, repeat=2))\n\n\nif __name__ == \"__main__\":\n    print(bidirectional_pairs([1, 2, 3, 4, 5, 6]))"
    },
    {
      "rank": 39,
      "score": 8.548876241946822,
      "candidate": "from typing import List\n\n\ndef bidirectional_pairs(lst: List) -> int:\n    \"\"\"\n    :param lst: list of tuples\n    :return: count bidirectional tuples\n\n    >>> bidirectional_pairs([(1, 2), (2, 1), (1, 3), (3, 1), (2, 3)])\n    4\n    >>> bidirectional_pairs([(1, 2), (2, 1), (1, 3), (3, 1)])\n    2\n    >>> bidirectional_pairs([(1, 2), (2, 1), (1, 3), (3, 1), (3, 2), (2, 3)])\n    5\n    \"\"\"\n    count = 0\n    for i in range(len(lst) - 1):\n        for j in range(i + 1, len(lst)):\n            if lst[i][0] == lst[j][1] and lst[i][1] == lst[j][0]:\n                count += 1\n    return count\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 40,
      "score": 8.542875062379007,
      "candidate": "def count_bidirectional_tuple_pairs(lst):\n    if len(lst) <= 1:\n        return 0\n    count = 0\n    for i in range(len(lst) - 1):\n        for j in range(i + 1, len(lst)):\n            if lst[i][0] == lst[j][1] and lst[i][1] == lst[j][0]:\n                count += 1\n    return count\n\n\nif __name__ == '__main__':\n    lst = [(0, 1), (1, 2), (2, 3), (3, 4), (4, 0), (0, 3), (3, 0)]\n    print(count_bidirectional_tuple_pairs(lst))"
    },
    {
      "rank": 41,
      "score": 8.53012858503943,
      "candidate": "from itertools import permutations\n\n\ndef count_bidirectional_pairs(tuples):\n    \"\"\"\n    Count bidirectional tuple pairs.\n    :param tuples: list of tuples\n    :return: count of bidirectional tuples\n    >>> count_bidirectional_pairs([(1, 2), (2, 3), (3, 4)])\n    3\n    >>> count_bidirectional_pairs([(1, 2), (2, 3), (3, 1)])\n    3\n    >>> count_bidirectional_pairs([(1, 2), (2, 3), (3, 1), (3, 4)])\n    4\n    \"\"\"\n    return len(\n        [\n            pair\n            for pair in permutations(tuples, 2)\n            if pair[0][0] == pair[1][1] and pair[0][1] == pair[1][0]\n        ]\n    )\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 42,
      "score": 8.499905739299377,
      "candidate": "def count_bidirectional_tuple_pairs(tuples):\n    \"\"\"\n    >>> count_bidirectional_tuple_pairs([])\n    0\n    >>> count_bidirectional_tuple_pairs([(1, 2), (1, 2)])\n    1\n    >>> count_bidirectional_tuple_pairs([(1, 2), (2, 1)])\n    2\n    >>> count_bidirectional_tuple_pairs([(1, 2), (2, 1), (2, 3)])\n    3\n    \"\"\"\n    count = 0\n    seen = set()\n    for t in tuples:\n        if t in seen:\n            count += 1\n        else:\n            seen.add(t)\n            seen.add(t[::-1])\n    return count\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 43,
      "score": 8.478208546788407,
      "candidate": "def count_pairs(tuple_list):\n    \"\"\"\n    :param tuple_list: List of tuples\n    :return: List of tuples that appear in both directions\n    \"\"\"\n    # Create a dictionary that maps an item in the tuple to a list of tuples that contain that item\n    # For example, if tuple_list = [('a', 'b'), ('b', 'a'), ('c', 'd'), ('d', 'c')]\n    # Then, item_dict would be {'a': [('a', 'b')], 'b': [('b', 'a')], 'c': [('c', 'd')], 'd': [('d', 'c')]}\n    item_dict = {}\n    for tuple_ in tuple_list:\n        for item in tuple_:\n            if item not in item_dict:\n                item_dict[item] = []\n            item_dict[item].append(tuple_)\n\n    # Create a set of all items that appear in at least one tuple\n    item_set = set()\n    for item in item_dict:\n        item_set.add(item)\n\n    # Create a set of items that appear in at least two tuples\n    double_item_set = set()\n    for item in item_set:\n        if len(item_dict[item]) >= 2:\n            double_item_set.add(item)\n\n    # Create a set of items that appear in at least three tuples\n    triple_item_set = set()\n    for item in double_item_set:\n        if len(item_dict[item]) >= 3:\n            triple_item_set.add(item)\n\n    # Create a set of items that appear in at least four tuples\n    quad_item_set = set()\n    for item in triple_item_set:\n        if len(item_dict[item]) >= 4:\n            quad_item_set.add(item)\n\n    # Create a set of items that appear in at least five tuples\n    five_item_set = set()\n    for item in quad_item_set:\n        if len(item_dict[item]) >= 5:\n            five_item_set."
    },
    {
      "rank": 44,
      "score": 8.437695832075478,
      "candidate": "def count_bidirectional_tuple_pairs(tuples):\n    \"\"\"\n    Count bidirectional tuple pairs.\n    \"\"\"\n\n    bidirectional_tuples = []\n\n    for index, tuple in enumerate(tuples):\n        for index2, tuple2 in enumerate(tuples):\n            if tuple[0] == tuple2[1] and tuple[1] == tuple2[0]:\n                bidirectional_tuples.append(tuple)\n\n    return bidirectional_tuples"
    },
    {
      "rank": 45,
      "score": 8.408439383654278,
      "candidate": "from collections import defaultdict\n\n\ndef bidirectional_tuple_pairs(data):\n    # O(n) time and space\n    pairs = defaultdict(int)\n    for a, b in data:\n        pairs[a, b] += 1\n        pairs[b, a] += 1\n    return pairs\n\n\nprint(bidirectional_tuple_pairs([(1, 2), (2, 1), (1, 2), (2, 3), (3, 2)]))"
    },
    {
      "rank": 46,
      "score": 8.386620303250325,
      "candidate": "def count_bidirectional(lst):\n    \"\"\"\n    Count bidirectional tuple pairs.\n    :param lst: list of tuples\n    :return: list of tuples\n    \"\"\"\n    counter = {}\n    for i in lst:\n        if i[0] in counter:\n            counter[i[0]][1] += 1\n        else:\n            counter[i[0]] = [i[1], 1]\n        if i[1] in counter:\n            counter[i[1]][0] += 1\n        else:\n            counter[i[1]] = [i[0], 1]\n    return [(k, counter[k][0], counter[k][1]) for k in counter]\n\n\ndef main():\n    \"\"\"\n    Main.\n    :return: str\n    \"\"\"\n    lst = [(1, 2), (2, 3), (1, 3), (3, 4), (1, 4)]\n    print(count_bidirectional(lst))\n    return \"OK\"\n\n\nif __name__ == '__main__':\n    print(main())"
    },
    {
      "rank": 47,
      "score": 8.375312293858853,
      "candidate": "def count_bidirectional_tuple_pairs(tuples):\n    \"\"\"\n    >>> count_bidirectional_tuple_pairs([(1, 2), (3, 4), (2, 1), (4, 3)])\n    2\n    >>> count_bidirectional_tuple_pairs([(1, 2), (3, 4), (2, 1), (4, 3), (5, 6), (6, 5)])\n    3\n    \"\"\"\n    count = 0\n    for i in range(len(tuples)):\n        for j in range(i + 1, len(tuples)):\n            first, second = tuples[i], tuples[j]\n            if first == tuple(reversed(second)):\n                count += 1\n    return count\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 48,
      "score": 8.351614956112536,
      "candidate": "from typing import Tuple\n\n\ndef count_bidirectional(pairs: Tuple[Tuple[int, int]]) -> int:\n    \"\"\"Return the number of bidirectional tuple pairs.\"\"\"\n    # Set of all possible pairs\n    all_pairs = set()\n\n    # Set of all unique pairs\n    unique_pairs = set()\n\n    # Loop through all pairs\n    for first_tuple, second_tuple in pairs:\n        # Add the first tuple to the set of all possible pairs\n        all_pairs.add(first_tuple)\n\n        # Add the second tuple to the set of all possible pairs\n        all_pairs.add(second_tuple)\n\n        # If the first tuple is not in the set of unique pairs, add it\n        if first_tuple not in unique_pairs:\n            unique_pairs.add(first_tuple)\n\n        # If the second tuple is not in the set of unique pairs, add it\n        if second_tuple not in unique_pairs:\n            unique_pairs.add(second_tuple)\n\n        # Add the first tuple to the set of all possible pairs\n        all_pairs.add((second_tuple[1], second_tuple[0]))\n\n        # Add the second tuple to the set of all possible pairs\n        all_pairs.add((second_tuple[0], second_tuple[1]))\n\n        # If the first tuple is not in the set of unique pairs, add it\n        if (second_tuple[1], second_tuple[0]) not in unique_pairs:\n            unique_pairs.add((second_tuple[1], second_tuple[0]))\n\n        # If the second tuple is not in the set of unique pairs, add it\n        if (second_tuple[0], second_tuple[1]) not in unique_pairs:\n            unique_pairs.add((second_tuple[0], second_tuple[1]))\n\n    # Return the number of unique pairs\n    return len(unique_pairs)\n\n\nif __name__ == \"__main__\":\n    pairs = ((1, 2), (2, 3), (3, 4), (4, 5), (1, 3), ("
    },
    {
      "rank": 49,
      "score": 8.331556294201176,
      "candidate": "from collections import Counter\n\n\ndef count_bidirectional_tuple_pairs(pairs):\n    count = Counter()\n    for pair in pairs:\n        count[pair] += 1\n        count[pair[::-1]] += 1\n    return count\n\n\ndef test_bidirectional_tuple_pairs():\n    \"\"\"\n    >>> count_bidirectional_tuple_pairs([(1, 2), (2, 3), (1, 2), (3, 4), (4, 5)])\n    Counter({(1, 2): 2, (2, 3): 1, (3, 4): 1, (4, 5): 1})\n    \"\"\"\n    pass\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 50,
      "score": 8.327375965969855,
      "candidate": "def count_pairs(lst):\n    lst.sort()\n    count = 0\n    for i in range(len(lst) - 1):\n        if lst[i][1] == lst[i + 1][0]:\n            count += 1\n    return count\n\n\nprint(count_pairs([(1, 4), (2, 3), (3, 2), (4, 1), (5, 4)]))\nprint(count_pairs([(1, 2), (1, 3), (2, 1)]))\nprint(count_pairs([(1, 2), (2, 3), (1, 3)]))\nprint(count_pairs([(1, 2), (1, 2), (1, 3)]))\nprint(count_pairs([(1, 2), (1, 2), (1, 2)]))"
    },
    {
      "rank": 51,
      "score": 8.327367757082776,
      "candidate": "def count_bidirectional_tuple_pairs(array):\n    \"\"\"\n    Count bidirectional tuple pairs.\n\n    Args:\n        array (list): list of integers\n\n    Returns:\n        int: count of bidirectional tuple pairs\n    \"\"\"\n\n    if len(array) <= 1:\n        return 0\n\n    # Create a dict of tuple pairs\n    pairs = {}\n    for i in range(len(array) - 1):\n        for j in range(i + 1, len(array)):\n            pair = (array[i], array[j]) if array[i] < array[j] else (array[j], array[i])\n            if pair in pairs:\n                pairs[pair] += 1\n            else:\n                pairs[pair] = 1\n\n    return sum(pairs.values())\n\n\ndef test_bidirectional_tuple_pairs():\n    \"\"\"Test bidirectional_tuple_pairs.\"\"\"\n    assert count_bidirectional_tuple_pairs([1, 2, 3]) == 0\n    assert count_bidirectional_tuple_pairs([1, 2, 2, 3]) == 1\n    assert count_bidirectional_tuple_pairs([1, 2, 2, 2, 3]) == 2\n    assert count_bidirectional_tuple_pairs([1, 2, 3, 3, 3, 3]) == 0\n    assert count_bidirectional_tuple_pairs([1, 2, 3, 4, 5]) == 0\n    assert count_bidirectional_tuple_pairs([1, 1, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4]) == 6\n\n\nif __name__ == \"__main__\":\n    test_bidirectional_tuple_pairs()"
    },
    {
      "rank": 52,
      "score": 8.298597569547805,
      "candidate": "def count_bidirectional_tuple_pairs(l):\n    # O(n)\n    if not l:\n        return 0\n    cnt = 0\n    for i in range(len(l)):\n        if l[i][1] == i:\n            cnt += 1\n    return cnt\n\n\nif __name__ == '__main__':\n    print(count_bidirectional_tuple_pairs([(1, 2), (2, 1), (3, 4), (4, 3)]))\n    print(count_bidirectional_tuple_pairs([]))\n    print(count_bidirectional_tuple_pairs([(1, 2), (2, 3)]))"
    },
    {
      "rank": 53,
      "score": 8.2938925966498,
      "candidate": "def bidirectional_tuple_count(tuples):\n    \"\"\"\n    tuples: list of tuples\n    \"\"\"\n    count = 0\n    tuples_set = set(tuples)\n    for t in tuples:\n        if (t[1], t[0]) in tuples_set:\n            count += 1\n    return count\n\nprint bidirectional_tuple_count([(1, 2), (3, 4), (5, 6)])"
    },
    {
      "rank": 54,
      "score": 8.289838256518838,
      "candidate": "from collections import Counter\n\n\ndef count_bidirectional_pairs(lst):\n    \"\"\"\n    Counts bidirectional tuple pairs.\n\n    Args:\n        lst: list of tuples\n\n    Returns:\n        Counter: key: tuple, value: count\n    \"\"\"\n    return Counter(lst + list(zip(*lst)))\n\n\ndef main():\n    lst = [(1, 2), (2, 1), (3, 4), (4, 3)]\n    print(count_bidirectional_pairs(lst))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 55,
      "score": 8.251903304236286,
      "candidate": "def count_bidirectional_tuple_pairs(list_of_tuples):\n    \"\"\"\n    :param list_of_tuples: list of tuples\n    :return: the number of bidirectional tuple pairs\n\n    This function counts the number of bidirectional tuple pairs.\n    \"\"\"\n    count = 0\n    for i in range(len(list_of_tuples) - 1):\n        if list_of_tuples[i][0] == list_of_tuples[i + 1][1] and list_of_tuples[i][1] == list_of_tuples[i + 1][0]:\n            count += 1\n    return count\n\ndef main():\n    \"\"\"\n    :return: None\n\n    This is the main function to test the count_bidirectional_tuple_pairs function.\n    \"\"\"\n    print(count_bidirectional_tuple_pairs([(1, 2), (2, 3), (3, 4), (4, 1)]))\n    print(count_bidirectional_tuple_pairs([(1, 2), (2, 3), (3, 4), (4, 1), (1, 2)]))\n    print(count_bidirectional_tuple_pairs([(1, 2), (2, 3), (3, 4), (4, 1), (2, 3)]))\n\nmain()"
    },
    {
      "rank": 56,
      "score": 8.214125058964552,
      "candidate": "from collections import deque\nfrom itertools import permutations\n\n\ndef count_bidirectional_tuple_pairs(tuples, bidirectional=True):\n    \"\"\"\n    Count bidirectional tuple pairs.\n\n    :param tuples: list of tuples\n    :param bidirectional: count bidirectional pairs\n    :return: list of tuples with counts\n    \"\"\"\n    counts = []\n    tuples = deque(tuples)\n\n    while tuples:\n        pair = tuples.popleft()\n        count = 0\n\n        for perm in permutations(pair):\n            if perm in tuples and (bidirectional or perm[::-1] in tuples):\n                count += 1\n                tuples.remove(perm)\n\n        counts.append((pair, count))\n\n    return counts"
    },
    {
      "rank": 57,
      "score": 8.212735598038213,
      "candidate": "def bidirectional_tuple_pairs(tuples):\n    result = []\n    for t in tuples:\n        if (t[1], t[0]) not in result:\n            result.append(t)\n    return result\n\n\nif __name__ == '__main__':\n    print(bidirectional_tuple_pairs([(1, 2), (2, 3), (3, 4), (5, 6)]))"
    },
    {
      "rank": 58,
      "score": 8.211579567659316,
      "candidate": "from typing import List\n\n\ndef count_pairs(nums: List[int]) -> int:\n    \"\"\"\n    >>> count_pairs([1, 2, 3, 1, 2, 3, 4, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5])\n    3\n    \"\"\"\n    seen = set()\n    count = 0\n    for num in nums:\n        if num in seen:\n            count += 1\n        seen.add(num)\n    return count\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 59,
      "score": 8.209707251476969,
      "candidate": "from collections import defaultdict\n\ndef count_bidirectional_pairs(tuples):\n    \"\"\"\n    >>> tuples = [(1, 2), (2, 3), (3, 1), (4, 5), (5, 6), (6, 4)]\n    >>> count_bidirectional_pairs(tuples)\n    3\n    >>> tuples = [(1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 7), (7, 8)]\n    >>> count_bidirectional_pairs(tuples)\n    0\n    \"\"\"\n    count = 0\n    table = defaultdict(int)\n    for i, j in tuples:\n        table[i] += 1\n        table[j] += 1\n    for _, v in table.items():\n        if v > 1:\n            count += (v - 1)\n    return count\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 60,
      "score": 8.2048573255218,
      "candidate": "def count_bidirectional_tuple_pairs(lst_of_tuples):\n    \"\"\"\n    Return a count of bidirectional tuple pairs.\n    \"\"\"\n    pairs = []\n    for i, tup in enumerate(lst_of_tuples):\n        if tup in lst_of_tuples[i + 1:]:\n            pairs.append(tup)\n    return len(pairs)"
    },
    {
      "rank": 61,
      "score": 8.172253082181854,
      "candidate": "def count_bidirectional_pairs(lst):\n    result = []\n    for i in range(len(lst) - 1):\n        for j in range(i + 1, len(lst)):\n            if (lst[i], lst[j]) in result:\n                continue\n            if (lst[j], lst[i]) in result:\n                continue\n            result.append((lst[i], lst[j]))\n\n    return len(result)\n\n\nif __name__ == \"__main__\":\n    print(count_bidirectional_pairs([1, 2, 3, 4, 5, 6, 7, 8]))\n    print(count_bidirectional_pairs([1, 2, 3, 4, 5, 6, 7, 8, 9]))\n    print(count_bidirectional_pairs([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))"
    },
    {
      "rank": 62,
      "score": 8.163300679823958,
      "candidate": "def count_bidirectional_pairs(tuples):\n    \"\"\"\n    >>> count_bidirectional_pairs([(1, 2), (3, 4), (2, 1), (1, 3), (3, 4), (4, 5)])\n    4\n    \"\"\"\n    pairs = set()\n    for tup in tuples:\n        if tup[::-1] not in pairs:\n            pairs.add(tup)\n    return len(pairs)\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 63,
      "score": 8.144125099485041,
      "candidate": "from itertools import permutations\n\n\ndef bidirectional_tuple_count(tuples):\n    return sum([1 for t in permutations(tuples, 2) if t[0] == t[1]])\n\n\ndef test_bidirectional_tuple_count():\n    \"\"\"Test bidirectional_tuple_count.\"\"\"\n    assert bidirectional_tuple_count([(1, 2), (3, 4)]) == 0\n    assert bidirectional_tuple_count([(1, 2), (2, 1)]) == 1\n    assert bidirectional_tuple_count([(1, 2), (1, 2), (2, 1), (2, 1)]) == 2"
    },
    {
      "rank": 64,
      "score": 8.143591138329747,
      "candidate": "def count_bidirectional_pairs(l):\n    \"\"\"\n    Return the number of bidirectional tuple pairs in a list.\n    \"\"\"\n    count = 0\n    for i in range(len(l) - 1):\n        for j in range(i + 1, len(l)):\n            if l[i][1] == l[j][0] and l[i][0] == l[j][1]:\n                count += 1\n    return count\n\n\ndef test_bidirectional_tuple_pairs_count():\n    \"\"\"Test for bidirectional tuple pairs count function.\"\"\"\n    assert count_bidirectional_pairs([(1, 2), (2, 3), (3, 4), (4, 1)]) == 2\n    assert count_bidirectional_pairs([(1, 2), (2, 3), (3, 4), (4, 5)]) == 0\n    assert count_bidirectional_pairs([(1, 2), (2, 3), (3, 4), (5, 6)]) == 0"
    },
    {
      "rank": 65,
      "score": 8.121884567141883,
      "candidate": "def bidirectional_pairs(tuples):\n    \"\"\"\n    :param tuples: list of tuples\n    :return: number of bidirectional pairs\n    \"\"\"\n    pairs = []\n    for i in range(len(tuples)):\n        for j in range(i + 1, len(tuples)):\n            pair = sorted([tuples[i], tuples[j]])\n            if pair not in pairs:\n                pairs.append(pair)\n    return len(pairs)\n\n\nprint(bidirectional_pairs([(1, 2), (3, 4), (5, 6), (7, 8), (5, 8), (9, 10)]))\nprint(bidirectional_pairs([(1, 2), (3, 4), (5, 6), (7, 8), (5, 8)]))\nprint(bidirectional_pairs([(1, 2), (3, 4), (5, 6), (7, 8)]))\nprint(bidirectional_pairs([(1, 2), (3, 4), (5, 6)]))\nprint(bidirectional_pairs([(1, 2), (3, 4)]))\nprint(bidirectional_pairs([(1, 2)]))"
    },
    {
      "rank": 66,
      "score": 8.105983444291466,
      "candidate": "def count_bidirectional_tuple_pairs(l):\n    # Your code here\n    pass\n\nprint(count_bidirectional_tuple_pairs([(1, 2), (2, 1), (3, 4), (1, 2)]))"
    },
    {
      "rank": 67,
      "score": 8.08452234024709,
      "candidate": "def count_bidirectional_tuple_pairs(lst):\n    \"\"\"\n    >>> count_bidirectional_tuple_pairs([(1, 2), (2, 1), (2, 1), (3, 4)])\n    3\n    \"\"\"\n    # O(n) time and O(n) space\n    return len(set([(item[0], item[1]) for item in lst] + [(item[1], item[0]) for item in lst]))\n\n    # O(n) time and O(1) space\n    # return len(set(lst + [(item[1], item[0]) for item in lst]))\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 68,
      "score": 8.024835682833125,
      "candidate": "from typing import List\n\n\ndef count_bidirectional_tuple_pairs(lst: List[tuple]) -> int:\n    \"\"\"\n    O(n) & O(1)\n    \"\"\"\n    count = 0\n    for idx, item in enumerate(lst):\n        for other_idx, other_item in enumerate(lst):\n            if other_idx >= idx:\n                break\n\n            if item == other_item:\n                count += 1\n\n    return count\n\n\nif __name__ == \"__main__\":\n    assert count_bidirectional_tuple_pairs([(1, 2), (2, 1), (3, 4)]) == 2"
    },
    {
      "rank": 69,
      "score": 7.990432406683839,
      "candidate": "from collections import Counter\n\n\ndef count_bidirectional_pairs(list_of_pairs):\n    \"\"\"\n    Count bidirectional tuple pairs.\n\n    :param list_of_pairs: list of tuples\n    :return: dictionary of pairs with counts\n    \"\"\"\n    counter = Counter(list_of_pairs)\n    return {pair: counter[pair] + counter[pair[::-1]] for pair in counter.keys()}"
    },
    {
      "rank": 70,
      "score": 7.938028884277233,
      "candidate": "def count_pairs(a_list, b_list):\n    count = 0\n    for a in a_list:\n        for b in b_list:\n            if a == b:\n                count += 1\n    return count\n\n\nif __name__ == \"__main__\":\n    a = [1, 2, 3, 4]\n    b = [1, 2, 3, 4]\n    print(count_pairs(a, b))"
    },
    {
      "rank": 71,
      "score": 7.915588979966494,
      "candidate": "from collections import defaultdict\n\n\ndef count_bidirectional_tuple_pairs(tuples):\n    \"\"\"\n    :param tuples: list of tuples\n    :return: dictionary with count of bidirectional tuple pairs\n\n    >>> count_bidirectional_tuple_pairs([('a', 'b'), ('b', 'a'), ('b', 'c'), ('c', 'b'), ('a', 'b')])\n    {'a': {'b': 2}, 'b': {'a': 1, 'c': 1}, 'c': {'b': 1}}\n    >>> count_bidirectional_tuple_pairs([('a', 'b'), ('b', 'a'), ('b', 'c'), ('c', 'b'), ('a', 'd')])\n    {'a': {'b': 1, 'd': 1}, 'b': {'a': 1, 'c': 1}, 'c': {'b': 1}, 'd': {'a': 1}}\n    \"\"\"\n    pairs_count = defaultdict(lambda: defaultdict(int))\n\n    for tuple_pair in tuples:\n        pairs_count[tuple_pair[0]][tuple_pair[1]] += 1\n        pairs_count[tuple_pair[1]][tuple_pair[0]] += 1\n\n    return pairs_count\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 72,
      "score": 7.8912769574414305,
      "candidate": "from collections import defaultdict\n\n\ndef count_bidirectional_pairs(tuples):\n    \"\"\"\n    >>> count_bidirectional_pairs([(1, 2), (2, 1), (1, 2), (3, 4)])\n    defaultdict(<class 'int'>, {(1, 2): 2, (3, 4): 1})\n    >>> count_bidirectional_pairs([(1, 2), (2, 1), (1, 2), (2, 1)])\n    defaultdict(<class 'int'>, {(1, 2): 2, (2, 1): 2})\n    >>> count_bidirectional_pairs([(1, 2), (2, 1), (1, 2), (1, 3)])\n    defaultdict(<class 'int'>, {(1, 2): 2, (1, 3): 1})\n    \"\"\"\n    count = defaultdict(int)\n\n    for t1, t2 in tuples:\n        count[(t1, t2)] += 1\n        count[(t2, t1)] += 1\n\n    return count\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 73,
      "score": 7.868947655733293,
      "candidate": "from collections import Counter\n\n\ndef count_bidirectional_tuple_pairs(lst):\n    \"\"\"\n    Count bidirectional tuple pairs.\n\n    :param lst: List of tuples\n    :type lst: list\n    :return: Number of bidirectional tuple pairs\n    :rtype: int\n    \"\"\"\n    pairs = []\n    for i in lst:\n        for j in lst:\n            if i[0] == j[1] and i[1] == j[0]:\n                pairs.append(i)\n    return len(Counter(pairs))\n\n\n# Tests\ndef test_count_bidirectional_tuple_pairs():\n    \"\"\"\n    Test count_bidirectional_tuple_pairs\n    \"\"\"\n    assert count_bidirectional_tuple_pairs([(1, 2), (2, 3), (3, 1), (3, 4), (4, 3)]) == 3\n    assert count_bidirectional_tuple_pairs([(1, 2), (2, 3), (3, 4), (4, 5), (5, 6)]) == 1\n\n\nif __name__ == \"__main__\":\n    test_count_bidirectional_tuple_pairs()"
    },
    {
      "rank": 74,
      "score": 7.84634113240411,
      "candidate": "def count_bidirectional(tuples):\n    \"\"\"\n    >>> count_bidirectional([(1, 2), (2, 1), (3, 4)])\n    2\n    \"\"\"\n    count = 0\n    seen = set()\n    for tup in tuples:\n        if tup in seen:\n            count += 1\n        else:\n            seen.add(tup)\n    return count\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 75,
      "score": 7.834022619458933,
      "candidate": "def count_pairs(lst, num):\n    \"\"\"\n    >>> count_pairs([(1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 7)], 3)\n    2\n    \"\"\"\n    count = 0\n    for i in range(len(lst)):\n        for j in range(i + 1, len(lst)):\n            if lst[i][0] == lst[j][1] and lst[j][0] == lst[i][1]:\n                count += 1\n                if count == num:\n                    return count\n    return count\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 76,
      "score": 7.780351419995229,
      "candidate": "def count_pairs(pairs):\n    # your code here\n    pairs_dict = {}\n    for i in pairs:\n        if i[0] not in pairs_dict:\n            pairs_dict[i[0]] = [i[1]]\n        else:\n            pairs_dict[i[0]].append(i[1])\n\n    total = 0\n    for key in pairs_dict:\n        if key in pairs_dict[key]:\n            pairs_dict[key].remove(key)\n        total += len(pairs_dict[key])\n    return total\n\n\nprint(count_pairs([(1, 2), (2, 3), (3, 4), (4, 1), (5, 6), (6, 5)]))"
    },
    {
      "rank": 77,
      "score": 7.738292593776799,
      "candidate": "def count_bidirectional_tuple_pairs(tuples):\n    \"\"\"\n    >>> count_bidirectional_tuple_pairs([(1, 2), (3, 4), (4, 3), (1, 2)])\n    2\n    >>> count_bidirectional_tuple_pairs([(1, 2), (3, 4), (4, 3)])\n    0\n    \"\"\"\n    count = 0\n\n    for i in range(len(tuples)):\n        for j in range(i + 1, len(tuples)):\n            if (tuples[i][0] == tuples[j][1]) and (tuples[i][1] == tuples[j][0]):\n                count += 1\n\n    return count\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 78,
      "score": 7.7320703513377165,
      "candidate": "def count_bidirectional_tuple_pairs(pairs):\n    \"\"\"\n    >>> count_bidirectional_tuple_pairs([(1, 2), (2, 1), (3, 4), (4, 3)])\n    2\n    \"\"\"\n    return len(\n        {\n            frozenset(pair)\n            for pair in pairs\n        }\n    )\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 79,
      "score": 7.705183449260731,
      "candidate": "from itertools import product\n\n\ndef bidirectional_tuple_count(lst):\n    \"\"\"\n    :param lst: List[Tuple[int]]\n    :return: int\n    \"\"\"\n\n    lst = sorted(lst, key=lambda x: x[0])\n    return len([x for x in product(lst, lst) if x[0][0] < x[1][0]])\n\n\ndef test_bidirectional_tuple_count():\n    \"\"\"Test bidirectional_tuple_count.\"\"\"\n    assert bidirectional_tuple_count([(1, 2), (2, 3), (1, 4), (1, 1)]) == 3\n    assert bidirectional_tuple_count([(1, 2), (2, 3), (1, 4), (1, 1), (2, 2)]) == 4\n    assert bidirectional_tuple_count([(1, 2), (2, 3), (1, 4), (1, 1), (2, 2), (2, 1)]) == 5\n    assert bidirectional_tuple_count([(1, 2), (2, 3), (1, 4), (1, 1), (2, 2), (2, 1), (2, 4), (2, 5)]) == 6"
    },
    {
      "rank": 80,
      "score": 7.5819855281879285,
      "candidate": "from collections import defaultdict\n\n\ndef count_bidirectional_tuple_pairs(list_of_tuples):\n    pairs_count = defaultdict(int)\n    for pair in list_of_tuples:\n        pairs_count[pair] += 1\n    return pairs_count\n\n\ndef test_bidirectional_tuple_pairs():\n    \"\"\"\n    >>> test_bidirectional_tuple_pairs()\n    \"\"\"\n    pairs = count_bidirectional_tuple_pairs([(1, 2), (2, 1), (3, 4), (1, 2), (2, 3), (1, 1), (5, 5)])\n    assert pairs == {(1, 1): 2, (1, 2): 2, (2, 1): 2, (2, 3): 1, (3, 4): 1, (5, 5): 1}\n\n\nif __name__ == '__main__':\n    test_bidirectional_tuple_pairs()"
    },
    {
      "rank": 81,
      "score": 7.562924366763077,
      "candidate": "def count_bidirectional_tuple_pairs(tuples, pairs=set()):\n    for i in range(len(tuples)):\n        for j in range(i+1, len(tuples)):\n            pairs.add(tuples[i]+tuples[j])\n            pairs.add(tuples[j]+tuples[i])\n    return len(pairs)\n\ndef test_count_bidirectional_tuple_pairs():\n    \"\"\"\n    >>> count_bidirectional_tuple_pairs([(1, 2), (2, 3), (4, 5)])\n    4\n    \"\"\"\n    pass\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 82,
      "score": 7.4878043221155455,
      "candidate": "def count_bidirectional_tuple_pairs(tuples):\n    \"\"\"Returns the number of bidirectional tuple pairs in a list of tuples.\n\n    >>> count_bidirectional_tuple_pairs([(1, 2), (2, 1), (3, 4), (1, 2)])\n    2\n    \"\"\"\n    return len(set(tuples) & set([(a, b) for b, a in tuples]))\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 83,
      "score": 7.464609382504557,
      "candidate": "def count_bidirectional_pairs(tup):\n    \"\"\"\n    Return a count of bidirectional tuples.\n    \"\"\"\n    count = 0\n    for i in range(len(tup)):\n        for j in range(i):\n            if tup[i] == tup[j] and tup[j] == tup[i]:\n                count += 1\n    return count"
    },
    {
      "rank": 84,
      "score": 3.0,
      "candidate": "def bidirectional_tuple_pairs(tuples):\n    return len(set([(t[0], t[1]) for t in tuples] + [(t[1], t[0]) for t in tuples]))\n\n\ndef test_bidirectional_tuple_pairs():\n    assert bidirectional_tuple_pairs([(1, 2), (2, 1), (3, 4), (5, 6)]) == 3\n\n\nif __name__ == '__main__':\n    test_bidirectional_tuple_pairs()"
    },
    {
      "rank": 85,
      "score": 3.0,
      "candidate": "from typing import List\n\n\ndef count_bidirectional_tuple_pairs(lst: List[List[int]]) -> int:\n    \"\"\"\n    >>> count_bidirectional_tuple_pairs([[1, 2], [3, 4], [2, 1], [4, 3]])\n    2\n    \"\"\"\n    return sum(\n        lst[i][0] == lst[j][1] and lst[i][1] == lst[j][0]\n        for i in range(len(lst))\n        for j in range(len(lst))\n        if i < j\n    )\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 86,
      "score": 3.0,
      "candidate": "def count_pairs(lst):\n    count = 0\n    for i in range(len(lst)):\n        for j in range(i, len(lst)):\n            if lst[i] == lst[j]:\n                count += 1\n    return count\n\n\ndef test_count_pairs():\n    assert count_pairs([1, 2, 3, 4, 5]) == 10"
    },
    {
      "rank": 87,
      "score": 3.0,
      "candidate": "from collections import defaultdict\n\n\ndef bidirectional_tuple_count(tuples):\n    d = defaultdict(int)\n    for t in tuples:\n        d[t] += 1\n        d[t[::-1]] += 1\n    return d\n\n\ndef test_bidirectional_tuple_count():\n    assert bidirectional_tuple_count([(1, 2), (2, 1), (3, 4)]) == {\n        (1, 2): 2,\n        (2, 1): 2,\n        (3, 4): 1\n    }"
    },
    {
      "rank": 88,
      "score": 3.0,
      "candidate": "def count_pairs(tuples):\n    \"\"\"\n    :param tuples: list of tuples\n    :return: int\n    \"\"\"\n    # your code here\n    return len(set(tuples))\n\n\nif __name__ == '__main__':\n    # These \"asserts\" using only for self-checking and not necessary for auto-testing\n    assert count_pairs([(1, 2), (2, 1), (3, 4), (4, 3)]) == 2, \"First\"\n    assert count_pairs([(1, 2), (1, 2), (2, 1)]) == 1, \"Second\"\n    assert count_pairs([(1, 2), (2, 1), (2, 3), (3, 4), (4, 2), (1, 2)]) == 4, \"Third\"\n    assert count_pairs([(1, 1)]) == 1, \"Four\"\n    assert count_pairs([]) == 0, \"Empty\"\n    print(\"Coding complete? Click 'Check' to review your tests and earn cool rewards!\")"
    },
    {
      "rank": 89,
      "score": 3.0,
      "candidate": "def count_bidirectional_tuple_pairs(tuples):\n    # create a dict to store the count\n    pair_count = {}\n    # for each tuple in tuples\n    for tup in tuples:\n        # if the tuple is reversed\n        if tup[::-1] in pair_count:\n            # increment the count\n            pair_count[tup[::-1]] += 1\n        # else\n        else:\n            # add the tuple to the dict and set the count to 1\n            pair_count[tup] = 1\n    # return the pair count\n    return pair_count\n\n\nprint(count_bidirectional_tuple_pairs([(1, 2), (2, 1), (3, 4), (4, 3)]))"
    },
    {
      "rank": 90,
      "score": 3.0,
      "candidate": "def count_bidirectional_tuple_pairs(tuples):\n    # Your code here\n    return len(set(tuples))\n\n\nif __name__ == '__main__':\n    # These \"asserts\" using only for self-checking and not necessary for auto-testing\n    assert count_bidirectional_tuple_pairs([(1, 2), (1, 2), (3, 4), (3, 4)]) == 2, \"Example\"\n    assert count_bidirectional_tuple_pairs(\n        [(1, 1), (1, 1), (1, 2), (1, 2), (2, 1), (2, 1), (2, 2), (2, 2)]) == 2, \"All equal\"\n    assert count_bidirectional_tuple_pairs(\n        [(1, 2), (2, 1), (1, 2), (2, 1), (1, 2), (2, 1), (1, 2), (2, 1)]) == 4, \"All bidirectional\"\n    assert count_bidirectional_tuple_pairs([(1, 2), (2, 1), (2, 1), (1, 2)]) == 2, \"Only bidirectional\""
    },
    {
      "rank": 91,
      "score": 3.0,
      "candidate": "def bidirectional_tuple_pairs(tuples):\n    \"\"\"\n    :param tuples: list of tuples\n    :return: count of bidirectional tuple pairs\n    \"\"\"\n    if len(tuples) < 2:\n        return 0\n\n    # Create a set of all the second elements in the tuples\n    second_set = set()\n    for tuple in tuples:\n        second_set.add(tuple[1])\n\n    # Create a set of all the first elements in the tuples\n    first_set = set()\n    for tuple in tuples:\n        first_set.add(tuple[0])\n\n    # If the number of tuples is 2, then it is bidirectional\n    if len(tuples) == 2:\n        return 1\n\n    # If the number of tuples is 3, then the first and last tuple are bidirectional\n    if len(tuples) == 3:\n        if tuples[0][0] == tuples[2][1] and tuples[2][0] == tuples[0][1]:\n            return 1\n        elif tuples[0][0] == tuples[1][1] and tuples[1][0] == tuples[0][1]:\n            return 1\n        else:\n            return 0\n\n    # If the number of tuples is 4, then the first and last tuple are bidirectional\n    if len(tuples) == 4:\n        if tuples[0][0] == tuples[3][1] and tuples[3][0] == tuples[0][1]:\n            return 1\n        elif tuples[0][0] == tuples[2][1] and tuples[2][0] == tuples[0][1]:\n            return 1\n        elif tuples[0][0] == tuples[1][1] and tuples[1][0] == tuples[0][1]:\n            return 1\n        else:\n            return 0\n\n    # If the number of tuples is 5 or greater, then we need to check if the first and last tuple are bidirectional\n    count = 0\n    if tuples"
    },
    {
      "rank": 92,
      "score": 3.0,
      "candidate": "from typing import List\n\n\ndef count_bidirectional_tuple_pairs(input_list: List[int],\n                                    left: int,\n                                    right: int) -> int:\n    \"\"\"Returns the number of bidirectional tuple pairs.\n\n    Args:\n        input_list: list to be searched\n        left: left tuple\n        right: right tuple\n    \"\"\"\n    count = 0\n    for index, value in enumerate(input_list):\n        if value == left:\n            try:\n                if input_list[index+1] == right:\n                    count += 1\n            except IndexError:\n                continue\n    return count\n\n\nif __name__ == \"__main__\":\n    assert count_bidirectional_tuple_pairs([1, 2, 2, 1], 1, 2) == 2"
    },
    {
      "rank": 93,
      "score": 3.0,
      "candidate": "def count_pairs(a, b):\n    \"\"\"\n    >>> count_pairs([1,2,3,4], [1,2,3,4])\n    2\n    >>> count_pairs([1,2,3,4], [1,2,3,4,5])\n    2\n    \"\"\"\n    # TODO: Write your code here\n    return 2\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 94,
      "score": 3.0,
      "candidate": "def count_bidirectional_tuple_pairs(tuples):\n    \"\"\"\n    :param tuples: list of tuples\n    :return: count of bidirectional tuple pairs\n    \"\"\"\n    # your code here\n    pass\n\n\nif __name__ == '__main__':\n    # Run Tests\n    test_1 = [('A', 'B'), ('B', 'A'), ('A', 'C'), ('C', 'B')]\n    test_2 = [('A', 'B'), ('B', 'A'), ('A', 'C'), ('C', 'B'), ('C', 'A'), ('A', 'B')]\n\n    print(count_bidirectional_tuple_pairs(test_1))\n    print(count_bidirectional_tuple_pairs(test_2))"
    },
    {
      "rank": 95,
      "score": 3.0,
      "candidate": "def count_pairs(pairs):\n    # Your code here\n    # count = 0\n    # for pair in pairs:\n    #     if (pair[1], pair[0]) in pairs:\n    #         count += 1\n    # return count\n    count = 0\n    seen = set()\n    for pair in pairs:\n        if (pair[1], pair[0]) in seen:\n            count += 1\n        else:\n            seen.add(pair)\n    return count\n\n\nif __name__ == '__main__':\n    print(count_pairs([(1, 2), (2, 1), (3, 4), (4, 3)]))\n    # 2\n\n    print(count_pairs([(1, 2), (2, 1), (3, 4), (4, 3), (3, 4)]))\n    # 2\n\n    print(count_pairs([(1, 2), (2, 1), (3, 4), (4, 3), (3, 4), (4, 3)]))\n    # 2"
    },
    {
      "rank": 96,
      "score": 3.0,
      "candidate": "from typing import List\n\n\ndef count_bidirectional_tuple_pairs(list_of_tuples: List[tuple]) -> int:\n    \"\"\"Count bidirectional tuple pairs.\n\n    Args:\n        list_of_tuples (List[tuple]): list of tuples\n\n    Examples:\n        >>> assert count_bidirectional_tuple_pairs([(1, 2), (2, 1)]) == 1\n        >>> assert count_bidirectional_tuple_pairs([(1, 2), (2, 3)]) == 0\n        >>> assert count_bidirectional_tuple_pairs([(1, 2), (2, 1), (1, 2)]) == 1\n    \"\"\"\n    return len([\n        tuple_pair\n        for i in range(len(list_of_tuples))\n        for tuple_pair in (list_of_tuples[i], list_of_tuples[i][::-1])\n        if tuple_pair in list_of_tuples[:i]\n    ])\n\n\nif __name__ == '__main__':\n    print(count_bidirectional_tuple_pairs([(1, 2), (2, 1)]))\n    print(count_bidirectional_tuple_pairs([(1, 2), (2, 3)]))\n    print(count_bidirectional_tuple_pairs([(1, 2), (2, 1), (1, 2)]))"
    },
    {
      "rank": 97,
      "score": 3.0,
      "candidate": "def count_bidirectional_pairs(lst):\n    count = 0\n    for i in range(len(lst)):\n        for j in range(i + 1, len(lst)):\n            if lst[i][0] == lst[j][1] and lst[j][0] == lst[i][1]:\n                count += 1\n    return count\n\n\nif __name__ == '__main__':\n    lst = [\n        ('a', 'b'),\n        ('b', 'c'),\n        ('c', 'd'),\n        ('d', 'a'),\n    ]\n    print(count_bidirectional_pairs(lst))"
    },
    {
      "rank": 98,
      "score": 3.0,
      "candidate": "def bidirectional_tuple_pairs(tuples):\n    # Initialize the count\n    count = 0\n\n    # Iterate through the tuples\n    for i in range(len(tuples) - 1):\n        # Check if the current tuple is equal to the next tuple\n        if tuples[i] == tuples[i + 1]:\n            # Increment the count\n            count += 1\n\n    # Return the count\n    return count"
    },
    {
      "rank": 99,
      "score": 3.0,
      "candidate": "from typing import List\n\n\ndef count_bidirectional_tuple_pairs(arr: List[int]) -> int:\n    \"\"\"Returns the number of bidirectional tuple pairs.\n\n    Args:\n        arr (List[int]): list of numbers\n\n    Examples:\n        >>> assert count_bidirectional_tuple_pairs([1, 2, 3, 2]) == 2\n        >>> assert count_bidirectional_tuple_pairs([1, 1, 1, 1]) == 4\n        >>> assert count_bidirectional_tuple_pairs([1, 2, 3, 4]) == 0\n        >>> assert count_bidirectional_tuple_pairs([2, 2, 2, 2]) == 4\n    \"\"\"\n    count = 0\n    for i in range(1, len(arr)):\n        if arr[i - 1] == arr[i]:\n            count += 1\n    for i in range(len(arr) - 2, 0, -1):\n        if arr[i - 1] == arr[i]:\n            count += 1\n    return count\n\n\nif __name__ == \"__main__\":\n    print(count_bidirectional_tuple_pairs([1, 2, 3, 2]))\n    print(count_bidirectional_tuple_pairs([1, 1, 1, 1]))\n    print(count_bidirectional_tuple_pairs([1, 2, 3, 4]))\n    print(count_bidirectional_tuple_pairs([2, 2, 2, 2]))"
    },
    {
      "rank": 100,
      "score": 3.0,
      "candidate": "def count_bidirectional_pairs(tuples, num_of_pairs):\n    count = 0\n    for i in range(0, len(tuples)):\n        for j in range(i + 1, len(tuples)):\n            if tuples[i] == tuples[j][::-1]:\n                count += 1\n                if count == num_of_pairs:\n                    return True\n    return False\n\n\ndef test_bidirectional_pairs():\n    \"\"\"\n    >>> count_bidirectional_pairs([(1, 2), (2, 1), (3, 4)], 1)\n    True\n    \"\"\"\n    pass\n\n\nif __name__ == \"__main__\":\n    test_bidirectional_pairs()"
    }
  ]
}