{
  "timestamp": "2025-09-14T22:38:39.548010",
  "method": "improved_llm_judge",
  "judge_model": "codellama/CodeLlama-7b-Python-hf",
  "target_model": "codellama-7b",
  "dataset": "mbpp",
  "problem_number": 46,
  "total_candidates": 100,
  "results": [
    {
      "rank": 1,
      "score": 10.0,
      "candidate": "from functools import cmp_to_key\nfrom itertools import permutations\nfrom typing import List\n\n\ndef compare_num(x: int, y: int) -> int:\n    return int(x > y) - int(x < y)\n\n\ndef compare_str(x: str, y: str) -> int:\n    return int(x > y) - int(x < y)\n\n\ndef max_num_with_digits(digits: List[int]) -> str:\n    digit_list: List[str] = [str(x) for x in digits]\n    max_num: str = \"\"\n\n    for perm in permutations(digit_list, len(digit_list)):\n        num = int(\"\".join(perm))\n\n        if num > int(max_num):\n            max_num = num\n\n    return max_num\n\n\nif __name__ == \"__main__\":\n    print(max_num_with_digits([2, 4, 9, 5, 10, 3, 2, 6, 8]))\n    print(max_num_with_digits([9, 8, 7]))\n    print(max_num_with_digits([1, 2, 3, 4, 5, 6, 7, 8, 9]))\n    print(max_num_with_digits([9, 9, 9, 9, 9, 9, 9, 9, 9]))"
    },
    {
      "rank": 2,
      "score": 10.0,
      "candidate": "def largest_number(arr):\n    \"\"\"\n    >>> largest_number([4, 4, 4, 4, 4])\n    '44444'\n\n    >>> largest_number([9, 1, 4, 5, 6])\n    '91456'\n\n    >>> largest_number([6, 6, 6, 6, 6])\n    '66666'\n\n    >>> largest_number([2, 2, 3, 3, 5, 5])\n    '553532'\n\n    \"\"\"\n    if len(arr) == 1:\n        return str(arr[0])\n    elif len(arr) == 2:\n        return str(max(arr[0], arr[1]) * 10 + min(arr[0], arr[1]))\n    else:\n        max_num = \"\".join(str(max(arr)))\n        arr.remove(max(arr))\n        min_num = \"\".join(str(min(arr)))\n        arr.remove(min(arr))\n        mid_num = largest_number(arr)\n        return max_num + mid_num + min_num\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 3,
      "score": 10.0,
      "candidate": "from itertools import permutations\n\n\ndef max_num_possible(digits):\n    permutations_list = list(permutations(digits, len(digits)))\n    max_num = 0\n\n    for num in permutations_list:\n        num = int(''.join(map(str, num)))\n        if num > max_num:\n            max_num = num\n\n    return max_num\n\n\ndef main():\n    assert max_num_possible([0, 2, 3, 9]) == 9320\n    assert max_num_possible([0, 2, 8, 5]) == 8520\n    assert max_num_possible([0, 2, 8, 5, 9]) == 98520\n    assert max_num_possible([0, 2, 8, 5, 9, 6]) == 986520\n    assert max_num_possible([0, 2, 8, 5, 9, 6, 7]) == 9876520\n    assert max_num_possible([0, 2, 8, 5, 9, 6, 7, 3]) == 98765320\n    assert max_num_possible([0, 2, 8, 5, 9, 6, 7, 3, 1]) == 987653210\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 4,
      "score": 10.0,
      "candidate": "def largest_number(digits):\n    \"\"\"\n    >>> largest_number([9, 9, 9])\n    '999'\n    >>> largest_number([9, 9, 0, 9])\n    '9909'\n    >>> largest_number([9, 9, 0, 9, 9, 9, 9, 9, 9, 9])\n    '9999999999'\n    >>> largest_number([0, 0])\n    '00'\n    >>> largest_number([1, 2, 3, 4])\n    '4321'\n    \"\"\"\n    if not digits:\n        return \"\"\n\n    def merge_largest_number(digits):\n        if len(digits) <= 1:\n            return digits[0]\n\n        max_index = 0\n        for i in range(len(digits)):\n            if digits[i] > digits[max_index]:\n                max_index = i\n\n        return digits[max_index] + merge_largest_number(digits[:max_index] + digits[max_index + 1 :])\n\n    sorted_digits = sorted(digits, reverse=True)\n    return merge_largest_number(sorted_digits)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 5,
      "score": 10.0,
      "candidate": "def largest_number(digits):\n    digits = list(digits)\n\n    def rec(i):\n        if i == len(digits):\n            return ''\n        return max(rec(i + 1), digits[i]) + rec(i + 1)\n\n    return rec(0)\n\n\ndef largest_number_with_sort(digits):\n    digits = list(digits)\n\n    def rec(i):\n        if i == len(digits):\n            return ''\n        return max(rec(i + 1) + d for d in digits)\n\n    return rec(0)\n\n\ndef largest_number_with_stack(digits):\n    digits = list(digits)\n\n    def rec(i):\n        if i == len(digits):\n            return ''\n        return max(rec(i + 1) + d for d in digits)\n\n    return rec(0)\n\n\ndef largest_number_with_stack_2(digits):\n    from collections import deque\n\n    digits = list(digits)\n\n    def rec(i):\n        if i == len(digits):\n            return ''\n        return max(rec(i + 1) + d for d in digits)\n\n    return rec(0)\n\n\ndef largest_number_with_sort_2(digits):\n    from itertools import permutations\n\n    digits = list(digits)\n\n    def rec(i):\n        if i == len(digits):\n            return ''\n        return max(rec(i + 1) + d for d in digits)\n\n    return rec(0)\n\n\ndef largest_number_with_sort_3(digits):\n    digits = list(digits)\n\n    def rec(i):\n        if i == len(digits):\n            return ''\n        return max(rec(i + 1) + d for d in digits)\n\n    return rec(0)\n\n\nif __name__ == '__main__':\n    print(largest_number('2332544'))"
    },
    {
      "rank": 6,
      "score": 10.0,
      "candidate": "def largest_number(digits):\n    if len(digits) == 1:\n        return digits[0]\n    elif len(digits) == 2:\n        return \"\".join(sorted(digits, reverse=True))\n\n    nums = []\n    for i in range(len(digits)):\n        nums.append(largest_number(digits[i + 1:]))\n\n    for i in range(len(digits) - 1):\n        if digits[i] > nums[i]:\n            nums[i] = digits[i]\n\n    return \"\".join(nums)\n\n\ndef test_largest_number():\n    \"\"\"Test for largest_number function.\"\"\"\n    assert largest_number([\"2\", \"2\", \"3\"]) == \"322\"\n    assert largest_number([\"2\", \"3\", \"2\"]) == \"322\"\n    assert largest_number([\"2\", \"3\", \"4\", \"5\", \"6\"]) == \"65432\"\n    assert largest_number([\"1\", \"0\", \"0\", \"0\"]) == \"1000\"\n    assert largest_number([\"2\", \"2\", \"2\", \"3\", \"3\"]) == \"33222\"\n    assert largest_number([\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\"]) == \"7654321\"\n\n\nif __name__ == \"__main__\":\n    test_largest_number()"
    },
    {
      "rank": 7,
      "score": 10.0,
      "candidate": "def largest_number(arr):\n    string = []\n    for i in arr:\n        string.append(str(i))\n\n    string.sort(reverse = True)\n    result = int(\"\".join(string))\n    return result\n\n\n\nif __name__ == \"__main__\":\n    arr = [3, 30, 34, 5, 9]\n    result = largest_number(arr)\n    print(result)"
    },
    {
      "rank": 8,
      "score": 9.0,
      "candidate": "def max_num(digits):\n    digits.sort()\n    max_num = ''\n    for i in range(len(digits)):\n        max_num += digits[len(digits)-1-i]\n    return max_num\n\n\nif __name__ == '__main__':\n    print(max_num(list('45678')))"
    },
    {
      "rank": 9,
      "score": 8.0,
      "candidate": "def largest_number(a):\n    a.sort(reverse=True)\n    result = []\n    while len(a) != 0:\n        result.append(a.pop())\n        if len(a) != 0:\n            result.append(\"\")\n    return \"\".join(result)\n\ndef main():\n    a = [3,30,34,5,9]\n    print largest_number(a)\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 10,
      "score": 8.0,
      "candidate": "def find_largest_number(digits):\n    digits.sort(reverse=True)\n    result = \"\"\n    for d in digits:\n        result += d\n    return result\n\n\ndef main():\n    print(find_largest_number([\"1\", \"2\", \"3\", \"4\", \"5\", \"6\"]))\n    print(find_largest_number([\"4\", \"6\", \"2\", \"9\", \"8\", \"7\"]))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 11,
      "score": 8.0,
      "candidate": "def largest_number(digits):\n    if len(digits) == 1:\n        return digits[0]\n    elif len(digits) == 2:\n        if digits[0] == \"0\":\n            return digits[1]\n        if digits[1] == \"0\":\n            return digits[0]\n        if int(digits[0]) > int(digits[1]):\n            return digits[0]\n        else:\n            return digits[1]\n    else:\n        max_num = \"\"\n        for i in range(len(digits)):\n            if i == 0:\n                max_num = largest_number(digits[i : len(digits)])\n            else:\n                temp = largest_number(digits[i : len(digits)])\n                if int(max_num) < int(temp):\n                    max_num = temp\n        return max_num\n\n\ndef largest_number_2(digits):\n    if len(digits) == 1:\n        return digits[0]\n    elif len(digits) == 2:\n        if digits[0] == \"0\":\n            return digits[1]\n        if digits[1] == \"0\":\n            return digits[0]\n        if int(digits[0]) > int(digits[1]):\n            return digits[0] + digits[1]\n        else:\n            return digits[1] + digits[0]\n    else:\n        max_num = \"\"\n        for i in range(len(digits)):\n            if i == 0:\n                max_num = largest_number_2(digits[i : len(digits)])\n            else:\n                temp = largest_number_2(digits[i : len(digits)])\n                if int(max_num) < int(temp):\n                    max_num = temp\n        return max_num\n\n\ndef largest_number_3(digits):\n    # convert the list of digits into a string\n    # create a new list to hold the numbers\n    num_list = []\n    for i in digits:\n        num_list.append(int(i))"
    },
    {
      "rank": 12,
      "score": 8.0,
      "candidate": "def largest_number(digits):\n    if len(digits) == 0:\n        return 0\n\n    # Sort the digits in descending order\n    digits.sort(reverse=True)\n\n    result = \"\"\n\n    while len(digits) > 0:\n        result += digits[0]\n        if len(result) > 1:\n            for i in range(1, len(digits)):\n                if result[i] < result[i - 1]:\n                    result = result[:i] + digits[0] + result[i:]\n                    break\n        digits = digits[1:]\n\n    return int(result)\n\n\ndef main():\n    print(\"Maximum number formed from digits: \" + str(largest_number([3, 30, 34, 5, 9])))\n    print(\"Maximum number formed from digits: \" + str(largest_number([3, 30, 34, 5, 9, 90])))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 13,
      "score": 8.0,
      "candidate": "def largest_number(input_list):\n    if not input_list:\n        return None\n    input_list.sort(reverse=True)\n    return int(''.join(str(i) for i in input_list))\n\n\ndef main():\n    print(largest_number([2, 4, 6, 7, 5, 9, 8]))\n    print(largest_number([5, 5, 2, 4, 5, 2]))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 14,
      "score": 8.0,
      "candidate": "from functools import lru_cache\n\n\n@lru_cache(maxsize=None)\ndef largest_number(digits):\n    if not digits:\n        return \"\"\n    else:\n        max_num = \"\"\n        for i in range(len(digits)):\n            max_num = max(\n                max_num,\n                digits[i] + largest_number(digits[:i] + digits[i + 1 :]),\n                digits[i],\n            )\n        return max_num\n\n\ndef main():\n    print(largest_number([\"3\", \"30\", \"34\", \"5\", \"9\"]))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 15,
      "score": 8.0,
      "candidate": "def largest_number(list_of_digits):\n    list_of_digits.sort()\n    result = \"\"\n    for i in list_of_digits:\n        result += str(i)\n    return result\n\n\ndef main():\n    list_of_digits = [5, 6, 9, 1, 3, 4]\n    print(largest_number(list_of_digits))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 16,
      "score": 8.0,
      "candidate": "from functools import cmp_to_key\n\n\ndef find_largest(nums):\n    nums.sort(key=cmp_to_key(lambda a, b: len(b) - len(a)))\n\n    max_num = \"\"\n    for num in nums:\n        if len(num) > len(max_num):\n            max_num = num\n    return max_num\n\n\ndef main():\n    print(find_largest([\"8\", \"3\", \"1\", \"9\"]))\n    print(find_largest([\"8\", \"3\", \"1\"]))\n    print(find_largest([\"8\", \"3\"]))\n    print(find_largest([\"8\", \"3\", \"1\", \"9\", \"9\", \"9\", \"9\"]))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 17,
      "score": 8.0,
      "candidate": "from itertools import permutations\n\ndef largest_number(digits):\n    nums = [int(\"\".join(map(str, p))) for p in permutations(digits)]\n    return str(max(nums))\n\ndigits = [3, 5, 6, 7]\nprint(largest_number(digits))"
    },
    {
      "rank": 18,
      "score": 8.0,
      "candidate": "def find_largest(digits):\n    \"\"\"\n    Find the largest number that can be formed with the given digits.\n\n    Args:\n       digits(list): List of digits\n    Returns:\n       (int): Largest number that can be formed with the given digits\n    \"\"\"\n    if not digits:\n        return 0\n\n    digits.sort(reverse=True)\n\n    return int(\"\".join(map(str, digits)))\n\n\ndef main():\n    print(\"Maximum number from given digits: \" +\n          str(find_largest([1, 2, 3, 4, 5])))\n    print(\"Maximum number from given digits: \" +\n          str(find_largest([1, 2, 3])))\n    print(\"Maximum number from given digits: \" +\n          str(find_largest([1, 2, 3, 4, 5, 6])))\n    print(\"Maximum number from given digits: \" +\n          str(find_largest([5, 5, 5])))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 19,
      "score": 8.0,
      "candidate": "from functools import cmp_to_key\n\n\ndef compare_digit(x, y):\n    if x + y > y + x:\n        return 1\n    elif x + y == y + x:\n        return 0\n    else:\n        return -1\n\n\ndef largest_number(digits):\n    digits.sort(key=cmp_to_key(compare_digit), reverse=True)\n    return int(''.join(map(str, digits)))\n\n\ndef main():\n    print(largest_number([3, 30, 34, 5, 9]))\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 20,
      "score": 8.0,
      "candidate": "def largest_num(l):\n    l.sort(reverse=True)\n    num = \"\"\n    for i in l:\n        num += i\n    return num\n\nprint(largest_num([\"3\",\"3\",\"5\",\"5\"]))"
    },
    {
      "rank": 21,
      "score": 8.0,
      "candidate": "def largest_number(digits):\n    if digits is None:\n        return\n\n    if len(digits) == 0:\n        return\n\n    if len(digits) == 1:\n        return digits[0]\n\n    result = []\n\n    for i in range(len(digits)):\n        if digits[i] == 0:\n            continue\n\n        for j in range(i + 1, len(digits)):\n            if digits[j] == 0:\n                continue\n\n            if digits[i] == 0:\n                continue\n\n            if digits[i] > digits[j]:\n                temp = digits[i]\n                digits[i] = digits[j]\n                digits[j] = temp\n\n        result.append(digits[i])\n\n    result_str = \"\".join(str(i) for i in result)\n\n    return int(result_str)\n\n\ndef main():\n    print(largest_number([1, 2, 3, 4]))\n    print(largest_number([1, 2, 3, 0]))\n    print(largest_number([0, 2, 3, 4]))\n    print(largest_number([0, 0, 0, 0]))\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 22,
      "score": 8.0,
      "candidate": "def max_num(digits):\n    digits.sort()\n    digits.reverse()\n    max_num = ''\n    while len(digits) > 0:\n        max_num += str(digits.pop())\n        if is_valid_num(max_num):\n            break\n        else:\n            max_num = ''\n    return int(max_num)\n\n\ndef is_valid_num(num):\n    num = str(num)\n    for i in range(len(num) - 1):\n        if num[i] == num[i + 1]:\n            return False\n    return True\n\n\nif __name__ == '__main__':\n    print(max_num([4, 6, 9, 9, 4]))\n    print(max_num([2, 2, 4, 4, 4]))\n    print(max_num([5, 5, 4, 4, 4]))"
    },
    {
      "rank": 23,
      "score": 8.0,
      "candidate": "def find_largest_number(digits):\n    digits.sort()\n    digits.reverse()\n    largest_number = \"\"\n\n    for digit in digits:\n        largest_number += digit\n\n    return largest_number\n\n\ndef main():\n    digits = [int(i) for i in input(\"Enter numbers: \").split()]\n    print(find_largest_number(digits))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 24,
      "score": 8.0,
      "candidate": "def largest_number(digits):\n    if len(digits) == 0:\n        return 0\n    numbers = []\n    for i in range(len(digits)):\n        numbers.append(digits[i] * (10 ** (len(digits) - i - 1)))\n    numbers.sort(reverse=True)\n    return numbers[0]\n\n\ndef main():\n    digits = [int(x) for x in input(\"Enter numbers: \").split()]\n    print(largest_number(digits))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 25,
      "score": 8.0,
      "candidate": "def largest_number(nums):\n    if not nums:\n        return \"0\"\n    nums = sorted(nums, key=lambda x: x*10**(len(nums)-1-nums.index(x)), reverse=True)\n    return int(''.join(map(str, nums)))\n\n\nprint(largest_number([3, 30, 34, 5, 9]))\nprint(largest_number([3, 30, 34, 5, 9, 9]))"
    },
    {
      "rank": 26,
      "score": 8.0,
      "candidate": "from functools import lru_cache\n\n\n@lru_cache(maxsize=None)\ndef largest_num(digits, index=0):\n    if index == len(digits):\n        return 0\n\n    max_num = float(\"-inf\")\n    for i in range(index, len(digits)):\n        max_num = max(max_num, int(digits[index: i + 1]) * largest_num(digits, i + 1))\n    return max_num\n\n\ndef main():\n    print(largest_num(\"1032\"))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 27,
      "score": 8.0,
      "candidate": "def largest_number(numbers):\n    numbers = [str(n) for n in numbers]\n\n    def inner_func(s):\n        return int(s[1:] or 0)\n\n    while len(numbers) > 1:\n        numbers = sorted(numbers, key=inner_func, reverse=True)\n        result = []\n        for i in range(0, len(numbers) - 1, 2):\n            result.append(numbers[i] + numbers[i + 1])\n        numbers = result\n    return int(numbers[0])\n\n\nprint(largest_number([3, 30, 34, 5, 9]))"
    },
    {
      "rank": 28,
      "score": 8.0,
      "candidate": "def find_largest_number(digits):\n    if len(digits) == 1:\n        return digits[0]\n\n    digits.sort(reverse=True)\n    result = \"\"\n    while len(digits) > 0:\n        result += str(digits.pop())\n\n    return result\n\n\ndef find_largest_number_eff(digits):\n    if len(digits) == 1:\n        return digits[0]\n\n    digits.sort(reverse=True)\n    result = \"\"\n    while len(digits) > 0:\n        result += str(digits.pop())\n\n    return result\n\n\ndef main():\n    nums = [int(i) for i in input(\"Enter a list of numbers seperated by space: \").split()]\n    print(find_largest_number(nums))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 29,
      "score": 8.0,
      "candidate": "def max_num(l):\n    l.sort()\n    n = len(l)\n    if n < 1:\n        return 0\n    res = \"\"\n    for i in range(n):\n        res += str(l[n - i - 1])\n    return int(res)\n\nif __name__ == \"__main__\":\n    print(max_num([3, 4, 6, 5, 3]))\n    print(max_num([1, 2, 3]))\n    print(max_num([]))"
    },
    {
      "rank": 30,
      "score": 8.0,
      "candidate": "def find_largest_number(digits):\n    if len(digits) == 0:\n        return 0\n\n    max_number = -1\n    for i in range(len(digits)):\n        for j in range(i + 1, len(digits) + 1):\n            max_number = max(max_number, int(\"\".join(digits[i:j])))\n\n    return max_number\n\n\ndef main():\n    print(find_largest_number([3, 4, 6, 5]))\n    print(find_largest_number([]))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 31,
      "score": 8.0,
      "candidate": "def largest_number(digits):\n    \"\"\"\n    :param digits: list of digits\n    :return: largest number that can be formed with the given digits\n    \"\"\"\n    if not digits:\n        return 0\n\n    digits.sort(key=str, reverse=True)\n    largest = \"\"\n    for digit in digits:\n        largest += digit\n    return largest\n\n\nif __name__ == \"__main__\":\n    print(largest_number([3, 30, 34, 5, 9]))\n    print(largest_number([34, 50, 5]))"
    },
    {
      "rank": 32,
      "score": 8.0,
      "candidate": "from functools import cmp_to_key\nfrom typing import List\n\n\ndef largest_number(digits: List[int]) -> str:\n    \"\"\"\n    Time Complexity: O(nlogn)\n    Space Complexity: O(n)\n    \"\"\"\n    digits = [str(digit) for digit in digits]\n    digits.sort(key=cmp_to_key(lambda a, b: 1 if a + b > b + a else -1))\n    return \"\".join(digits) if digits[0] != \"0\" else \"0\"\n\n\nif __name__ == \"__main__\":\n    print(largest_number([3, 30, 34, 5, 9]))\n    print(largest_number([3, 30, 34, 5, 9, 9, 9, 9]))\n    print(largest_number([0, 0, 0, 0, 0]))\n    print(largest_number([1, 2, 3, 4, 5]))"
    },
    {
      "rank": 33,
      "score": 8.0,
      "candidate": "def largest_number(digits):\n    # If there is only one digit then return the digit as it is.\n    if len(digits) == 1:\n        return digits[0]\n\n    # Find the largest number that can be formed with the given digits.\n    for i in range(len(digits) - 1):\n        if digits[i] > digits[i + 1]:\n            digits[i], digits[i + 1] = digits[i + 1], digits[i]\n            return largest_number(digits)\n\n    return \"\".join(digits)\n\n\nprint(largest_number([\"3\", \"35\", \"9\", \"7\", \"4\", \"0\", \"2\", \"4\"]))\nprint(largest_number([\"3\", \"35\", \"9\", \"7\", \"4\", \"0\", \"2\"]))\nprint(largest_number([\"9\", \"9\", \"9\"]))"
    },
    {
      "rank": 34,
      "score": 8.0,
      "candidate": "from itertools import permutations\n\n\ndef largest_number(nums):\n    if not nums:\n        return 0\n\n    nums = [str(i) for i in nums]\n    permutation = permutations(nums, len(nums))\n    nums = list(permutation)\n    nums = [\"\".join(i) for i in nums]\n\n    nums.sort(key=lambda x: x[::-1], reverse=True)\n    return int(nums[0])\n\n\ndef main():\n    nums = [1, 3, 5, 7, 9]\n    print(largest_number(nums))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 35,
      "score": 8.0,
      "candidate": "def max_num(digits):\n    res = \"\"\n    digits = sorted(digits, reverse=True)\n    for i in digits:\n        if i == \"0\":\n            break\n        res += i\n    return res\n\n\ndef main():\n    digits = [int(i) for i in input(\"Enter the list of digits: \").split()]\n    res = max_num(digits)\n    print(f\"The largest number formed from given digits is: {res}\")\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 36,
      "score": 8.0,
      "candidate": "def largest_number(digits):\n    \"\"\"\n    >>> largest_number([4, 1, 2, 3])\n    '4321'\n\n    \"\"\"\n    if len(digits) == 1:\n        return str(digits[0])\n    elif len(digits) == 2:\n        if digits[0] == 0:\n            return str(digits[1])\n        elif digits[1] == 0:\n            return str(digits[0])\n        elif digits[0] > digits[1]:\n            return str(digits[0]) + str(digits[1])\n        else:\n            return str(digits[1]) + str(digits[0])\n    else:\n        largest_digits = []\n        for i in range(len(digits)):\n            if digits[i] == 0:\n                continue\n            else:\n                largest_digits.append(digits[i])\n        if len(largest_digits) == 1:\n            return str(largest_digits[0])\n        elif len(largest_digits) == 2:\n            if largest_digits[0] > largest_digits[1]:\n                return str(largest_digits[0]) + str(largest_digits[1])\n            else:\n                return str(largest_digits[1]) + str(largest_digits[0])\n        else:\n            for i in range(len(largest_digits)):\n                for j in range(i + 1, len(largest_digits)):\n                    if largest_digits[i] > largest_digits[j]:\n                        largest_digits[i], largest_digits[j] = largest_digits[j], largest_digits[i]\n            largest_number = \"\"\n            for i in largest_digits:\n                largest_number += str(i)\n            return largest_number\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 37,
      "score": 8.0,
      "candidate": "def largest_number(digits):\n    from functools import reduce\n\n    def helper(x, y):\n        return x + y\n\n    str_digits = [str(digit) for digit in digits]\n    largest_number = reduce(helper, str_digits)\n    return largest_number\n\n\ndef main():\n    print(largest_number([9, 9, 9]))\n    print(largest_number([3, 30, 34, 5, 6]))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 38,
      "score": 8.0,
      "candidate": "def largest_number(digits):\n    return str(max(digits))"
    },
    {
      "rank": 39,
      "score": 8.0,
      "candidate": "def find_largest_number(digits):\n    result = \"\"\n    digits = sorted(digits, reverse=True)\n    for i in digits:\n        result += str(i)\n    return result\n\n\ndef main():\n    print(find_largest_number([1, 3, 2, 4, 6, 5]))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 40,
      "score": 8.0,
      "candidate": "def largest_num(digits):\n    res = \"\"\n    for i in range(len(digits)):\n        res += digits[i]\n        res = max(res, digits[i] + largest_num(digits[i+1:]))\n    return res\n\n\ndef main():\n    print(largest_num([\"1\", \"2\", \"3\", \"4\", \"9\", \"5\", \"6\"]))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 41,
      "score": 8.0,
      "candidate": "from functools import lru_cache\n\n\n@lru_cache(maxsize=None)\ndef largest_number(digits):\n    if not digits:\n        return 0\n\n    # Find the largest number that can be formed with the first digit\n    largest = str(digits[0])\n    if len(digits) == 1:\n        return largest\n\n    # Recursively find the largest number that can be formed with the rest digits\n    for i in range(1, len(digits)):\n        nxt = largest_number(digits[i:])\n        if digits[i] + nxt > nxt:\n            largest = digits[i] + largest\n        else:\n            largest = nxt\n    return largest\n\n\ndef main():\n    print(\"Largest number: \" + str(largest_number([3, 30, 34, 5, 9])))\n    print(\"Largest number: \" + str(largest_number([9, 954, 98, 90, 900])))\n    print(\"Largest number: \" + str(largest_number([0, 0, 0])))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 42,
      "score": 8.0,
      "candidate": "from itertools import permutations\n\n\ndef largest_number(digits):\n    \"\"\"\n    >>> largest_number([9, 9, 8, 8, 7, 6, 6, 5, 4, 3, 3, 2, 2, 1])\n    '99887665433221'\n    >>> largest_number([5, 5, 5, 5, 5])\n    '55555'\n    >>> largest_number([5, 5, 5, 5])\n    '5555'\n    >>> largest_number([])\n    ''\n    \"\"\"\n    if not digits:\n        return \"\"\n\n    max_num = \"\"\n    for perm in permutations(digits, len(digits)):\n        num = \"\".join(perm)\n        if num > max_num:\n            max_num = num\n    return max_num\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 43,
      "score": 8.0,
      "candidate": "def largest_number(digits):\n    if len(digits) == 0:\n        return 0\n    elif len(digits) == 1:\n        return digits[0]\n    else:\n        max_number = \"\"\n        for i in range(len(digits)):\n            current_number = largest_number(digits[:i] + digits[i + 1 :])\n            current_number += str(digits[i])\n            if max_number == \"\" or current_number > max_number:\n                max_number = current_number\n        return max_number\n\n\ndef main():\n    number = int(input(\"Enter a number: \"))\n    digits = [int(i) for i in str(number)]\n    print(f\"The largest number that can be formed is {largest_number(digits)}\")\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 44,
      "score": 8.0,
      "candidate": "from functools import lru_cache\n\n\n@lru_cache(maxsize=None)\ndef largest_number(digits):\n    if not digits:\n        return 0\n    elif len(digits) == 1:\n        return int(\"\".join(digits))\n    elif len(digits) == 2:\n        return int(max(digits))\n\n    max_num = 0\n    for i in range(len(digits) - 1):\n        for j in range(i + 1, len(digits)):\n            max_num = max(max_num, int(\"\".join(sorted(digits[i:j + 1], reverse=True))))\n    return max_num\n\n\nif __name__ == \"__main__\":\n    print(largest_number([\"2\", \"3\", \"2\", \"1\"]))\n    print(largest_number([\"3\", \"3\", \"2\", \"1\"]))"
    },
    {
      "rank": 45,
      "score": 8.0,
      "candidate": "from functools import cmp_to_key\n\n\ndef compare(a, b):\n    return a + b > b + a\n\n\ndef compare_reversed(a, b):\n    return a + b < b + a\n\n\ndef largest_num(digits):\n    digits.sort(key=cmp_to_key(compare))\n    return int(\"\".join(digits))\n\n\ndef largest_num_reversed(digits):\n    digits.sort(key=cmp_to_key(compare_reversed))\n    return int(\"\".join(digits))\n\n\nif __name__ == \"__main__\":\n    digits = [int(x) for x in input(\"Enter the numbers: \").split()]\n    print(largest_num(digits))\n    print(largest_num_reversed(digits))"
    },
    {
      "rank": 46,
      "score": 8.0,
      "candidate": "def find_largest_number(digits):\n    max_num = \"\"\n    for i in range(len(digits)):\n        temp_num = \"\"\n        for j in range(i, len(digits)):\n            temp_num += digits[j]\n            if temp_num > max_num:\n                max_num = temp_num\n    return max_num\n\n\ndef main():\n    digits = input(\"Enter the digits: \")\n    print(find_largest_number(digits))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 47,
      "score": 8.0,
      "candidate": "from functools import cmp_to_key\n\n\ndef cmp(a, b):\n    return b - a\n\n\ndef largest_number(nums):\n    nums = sorted(nums, key=cmp_to_key(cmp))\n    largest = \"\"\n    for num in nums:\n        largest += num\n    return largest\n\n\ndef largest_number_using_recursion(nums):\n    def merge(a, b):\n        if b == \"\":\n            return a\n        elif a == \"\":\n            return b\n        elif a + b > b + a:\n            return a + b\n        else:\n            return b + a\n\n    def largest_number_helper(nums):\n        if len(nums) == 0:\n            return \"\"\n        elif len(nums) == 1:\n            return nums[0]\n        largest = nums[0]\n        for i in range(1, len(nums)):\n            largest = merge(largest, nums[i])\n        return largest\n\n    return largest_number_helper(largest_number_helper(nums))\n\n\ndef main():\n    print(\"Maximum number: \" + largest_number([3, 30, 34, 5, 9]))\n    print(\"Maximum number: \" + largest_number([3, 30, 34, 5, 9]))\n    print(\"Maximum number: \" + largest_number([3, 30, 34, 5, 9]))\n    print(\"Maximum number: \" + largest_number([3, 30, 34, 5, 9]))\n    print(\"Maximum number: \" + largest_number([3, 30, 34, 5, 9]))\n    print(\"Maximum number: \" + largest_number([3, 30, 34, 5, 9]))\n    print(\"Maximum number: \" + largest_number([3, 30, 34, 5, 9]))\n    print(\"Maximum number: \" + largest_number([3, 30, 34, 5, 9]))"
    },
    {
      "rank": 48,
      "score": 8.0,
      "candidate": "from functools import reduce\n\ndef find_largest_number(digits):\n    \"\"\"\n    >>> find_largest_number([9, 9, 9])\n    '999'\n    >>> find_largest_number([1, 2, 3])\n    '321'\n    >>> find_largest_number([1, 2, 3, 9])\n    '9321'\n    \"\"\"\n    return str(int(reduce(lambda x, y: str(x) + str(y), digits)))\n\n\ndef find_largest_number_2(digits):\n    \"\"\"\n    >>> find_largest_number([9, 9, 9])\n    '999'\n    >>> find_largest_number([1, 2, 3])\n    '321'\n    >>> find_largest_number([1, 2, 3, 9])\n    '9321'\n    \"\"\"\n    digits.sort()\n    return str(int(\"\".join(map(str, digits[::-1]))))\n\n\ndef find_largest_number_3(digits):\n    \"\"\"\n    >>> find_largest_number([9, 9, 9])\n    '999'\n    >>> find_largest_number([1, 2, 3])\n    '321'\n    >>> find_largest_number([1, 2, 3, 9])\n    '9321'\n    \"\"\"\n    return str(int(\"\".join(map(str, sorted(digits, reverse=True)))))\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod(verbose=True)"
    },
    {
      "rank": 49,
      "score": 8.0,
      "candidate": "def largest_number(digits):\n    \"\"\"\n    Time complexity: O(nlogn)\n    Space complexity: O(n)\n    \"\"\"\n    def merge(num1, num2):\n        if num1 + num2 > num2 + num1:\n            return num1 + num2\n        else:\n            return num2 + num1\n\n    if not digits:\n        return 0\n    digits.sort(key=lambda x: -len(str(x)))\n    return int(\"\".join(str(digit) for digit in digits))"
    },
    {
      "rank": 50,
      "score": 8.0,
      "candidate": "def largest_number(digits):\n    if len(digits) == 0:\n        return 0\n    elif len(digits) == 1:\n        return digits[0]\n\n    result = []\n    for i in range(len(digits)):\n        temp = str(digits[i])\n        for j in range(i+1, len(digits)):\n            temp += str(digits[j])\n        result.append(temp)\n\n    return max(result)\n\n\nprint(largest_number([5, 5, 5, 5]))\nprint(largest_number([9, 9, 9, 9]))\nprint(largest_number([5, 5, 5, 5, 5]))\nprint(largest_number([5, 5, 5, 5, 5, 5]))\nprint(largest_number([5, 5, 5, 5, 5, 5, 5]))\nprint(largest_number([1, 2, 3, 4, 5]))\nprint(largest_number([1, 2, 3, 4, 5, 6]))\nprint(largest_number([1, 2, 3, 4, 5, 6, 7]))\nprint(largest_number([1, 2, 3, 4, 5, 6, 7, 8]))\nprint(largest_number([1, 2, 3, 4, 5, 6, 7, 8, 9]))\nprint(largest_number([1, 2, 3, 4, 5, 6, 7, 8, 9, 0]))\nprint(largest_number([0, 1, 2, 3, 4, 5, 6, 7, 8, 9]))\nprint(largest_number([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 9]))\nprint(largest_number([0, 0, 0, 0, 0, 0,"
    },
    {
      "rank": 51,
      "score": 8.0,
      "candidate": "def largestNumber(list):\n    #code here\n    list.sort(key=str)\n    return int(\"\".join(list))\n\n\n\nif __name__ == '__main__':\n    x = [3, 30, 34, 5, 9]\n    print(largestNumber(x))\n\n    x = [3, 30, 34, 5, 9, 9]\n    print(largestNumber(x))"
    },
    {
      "rank": 52,
      "score": 8.0,
      "candidate": "def largest_number(digits):\n    if len(digits) == 0:\n        return 0\n    digits.sort(key=lambda x: str(x) * len(digits), reverse=True)\n    return int(\"\".join(map(str, digits)))\n\n\ndef main():\n    print(largest_number([3, 30, 34, 5, 9]))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 53,
      "score": 8.0,
      "candidate": "def largest_number(digits):\n    if len(digits) == 0:\n        return 0\n    if len(digits) == 1:\n        return int(\"\".join(digits))\n    if len(digits) == 2:\n        if int(\"\".join(digits)) >= int(\"\".join(reversed(digits))):\n            return int(\"\".join(digits))\n        else:\n            return int(\"\".join(reversed(digits)))\n    if len(digits) > 2:\n        for i in range(len(digits)-1):\n            if int(digits[i]) > int(digits[i+1]):\n                return int(\"\".join(digits[:i+1]))\n            elif int(digits[i]) < int(digits[i+1]):\n                return int(\"\".join(digits[i+1:]))\n    return int(\"\".join(digits))\n\nif __name__ == \"__main__\":\n    print largest_number([\"3\", \"3\", \"5\", \"5\", \"5\", \"5\", \"5\", \"5\", \"5\", \"5\"])"
    },
    {
      "rank": 54,
      "score": 8.0,
      "candidate": "def largest_num(list_nums):\n    \"\"\"\n    >>> largest_num([1, 2, 3, 4, 5])\n    '54321'\n\n    >>> largest_num([1, 2, 3, 0, 5])\n    '53210'\n\n    \"\"\"\n    list_nums.sort()\n    list_nums.reverse()\n    return \"\".join(list(map(str, list_nums)))\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 55,
      "score": 8.0,
      "candidate": "def largest_number(list_of_digits):\n    for i in range(len(list_of_digits)):\n        for j in range(len(list_of_digits) - i - 1):\n            if list_of_digits[j] < list_of_digits[j + 1]:\n                list_of_digits[j], list_of_digits[j + 1] = list_of_digits[j + 1], list_of_digits[j]\n\n    return \"\".join(list_of_digits)\n\n\nprint(largest_number([3, 30, 34, 5, 9]))\nprint(largest_number([0, 0, 0, 0, 0, 0]))\nprint(largest_number([3, 30, 34, 5, 9, 90]))"
    },
    {
      "rank": 56,
      "score": 8.0,
      "candidate": "from functools import lru_cache\n\ndef largest_number(digits):\n    digits.sort(reverse=True)\n    return int(''.join(digits))\n\n@lru_cache(maxsize=None)\ndef largest_number_helper(digits, i):\n    if i == len(digits):\n        return 0\n    return max(\n        int(digits[i] + largest_number_helper(digits, i + 1)),\n        largest_number_helper(digits, i + 1)\n    )\n\nif __name__ == \"__main__\":\n    print(largest_number([1, 3, 5, 7]))\n    print(largest_number([1, 3, 5, 7, 9, 0]))\n    print(largest_number([1, 3, 5, 7, 9, 0, 5, 3, 5]))\n    print(largest_number([5, 5, 5, 5, 5]))\n    print(largest_number([9, 9, 9, 9, 9]))\n\n    print(largest_number_helper([1, 3, 5, 7], 0))\n    print(largest_number_helper([1, 3, 5, 7, 9, 0], 0))\n    print(largest_number_helper([1, 3, 5, 7, 9, 0, 5, 3, 5], 0))\n    print(largest_number_helper([5, 5, 5, 5, 5], 0))\n    print(largest_number_helper([9, 9, 9, 9, 9], 0))"
    },
    {
      "rank": 57,
      "score": 8.0,
      "candidate": "def max_number_finder(nums):\n    if nums:\n        max_num = ''\n        for i in range(len(nums)):\n            max_num = max_num + nums[i]\n            max_num = max_num + find_max_number(nums[i+1:])\n            max_num = max_num + nums[i]\n        return max_num\n    else:\n        return ''\n\n\ndef find_max_number(nums):\n    if nums:\n        max_num = nums[0]\n        for i in range(len(nums)):\n            if nums[i] > max_num:\n                max_num = nums[i]\n        return max_num + find_max_number(nums)\n    else:\n        return ''\n\n\nif __name__ == '__main__':\n    print(max_number_finder(['9', '9', '9']))"
    },
    {
      "rank": 58,
      "score": 8.0,
      "candidate": "def largest_number(digits):\n    \"\"\"\n    Time Complexity: O(n^2)\n    Space Complexity: O(n)\n\n    :param digits: List - A list of numbers.\n    :return: Integer\n    \"\"\"\n    if len(digits) == 0:\n        return 0\n\n    sorted_digits = sorted(digits, reverse=True)\n    result = \"\"\n\n    for i in range(len(sorted_digits)):\n        result += str(sorted_digits[i])\n\n    return int(result)\n\n\ndef main():\n    print(largest_number([5, 4, 3, 2, 1]))\n    print(largest_number([5, 4, 3, 2, 1, 0]))\n    print(largest_number([0, 0, 0, 0, 0]))\n    print(largest_number([5, 5, 5, 5, 5]))\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 59,
      "score": 8.0,
      "candidate": "def max_number(numbers):\n    numbers.sort(reverse=True)\n    ans = \"\"\n    while numbers:\n        ans += str(numbers.pop())\n        if len(ans) > 1 and int(ans) > int(ans[:-1]) + int(ans[-1]):\n            ans = ans[:-1]\n        elif len(ans) > 1 and int(ans) < int(ans[:-1]) + int(ans[-1]):\n            ans = ans[:-1]\n    return ans\n\n\nif __name__ == \"__main__\":\n    print(max_number([1, 2, 3]))\n    print(max_number([1, 2, 3, 4, 5, 6]))\n    print(max_number([1, 2, 3, 4, 5, 6, 7, 8, 9, 0]))"
    },
    {
      "rank": 60,
      "score": 8.0,
      "candidate": "def largest_num(l):\n    l.sort(reverse=True)\n    res = []\n    for i in l:\n        res.append(i)\n        print(res)\n        if len(res)>1:\n            if res[0]<res[1]:\n                res.pop(0)\n                continue\n            else:\n                break\n    return int(\"\".join([str(i) for i in res]))\n\n\nif __name__ == '__main__':\n    l = [1, 3, 2, 3, 4, 5, 6]\n    print(largest_num(l))"
    },
    {
      "rank": 61,
      "score": 8.0,
      "candidate": "def largest_number(digits):\n    if not digits:\n        return 0\n\n    def dfs(digits, current):\n        if not digits:\n            return current\n\n        result = []\n        for i in range(len(digits)):\n            result.append(dfs(digits[:i] + digits[i+1:], current + digits[i] * (len(current) + 1)))\n\n        return max(result)\n\n    return dfs(digits, \"\")"
    },
    {
      "rank": 62,
      "score": 8.0,
      "candidate": "def largest_number(digits):\n    \"\"\"\n    Return largest number that can be formed with the given digits\n    :param digits: list of digits\n    :return: largest number\n    \"\"\"\n    if not digits:\n        return 0\n\n    digits_len = len(digits)\n    max_num = \"\"\n\n    for i in range(0, digits_len):\n        for j in range(i + 1, digits_len):\n            if int(digits[i]) > int(digits[j]):\n                temp = digits[i]\n                digits[i] = digits[j]\n                digits[j] = temp\n\n    for i in range(0, digits_len):\n        max_num = max_num + digits[i]\n\n    return max_num\n\n\ndef main():\n    print(\"Largest number formed with the given digits is: \" +\n          str(largest_number([3, 30, 34, 5, 9])))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 63,
      "score": 8.0,
      "candidate": "def largest_num(digits):\n    return str(max(int(\"\".join(sorted(digits, reverse=True))) * int(\"\".join(sorted(digits)))))\n\n\ndef main():\n    print(largest_num(input(\"Enter the digits: \")))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 64,
      "score": 8.0,
      "candidate": "def largest_number(digits):\n    digits.sort(reverse=True)\n    return int(\"\".join(str(x) for x in digits))\n\n\ndef main():\n    print(largest_number([3, 30, 34, 5, 9]))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 65,
      "score": 8.0,
      "candidate": "def find_largest_number(digits):\n    \"\"\"\n    >>> find_largest_number([8, 8, 8, 8])\n    '8888'\n    >>> find_largest_number([8, 8, 8, 7])\n    '8887'\n    >>> find_largest_number([8, 8, 8, 1])\n    '8881'\n    >>> find_largest_number([8, 8, 8, 9])\n    '9888'\n    >>> find_largest_number([8, 8, 8, 8, 9])\n    '98888'\n    >>> find_largest_number([8, 8, 8, 8, 8])\n    '88888'\n    >>> find_largest_number([8, 8, 8, 8, 8, 9])\n    '988888'\n    >>> find_largest_number([8, 8, 8, 8, 8, 8])\n    '888888'\n    >>> find_largest_number([8, 8, 8, 8, 8, 8, 9])\n    '9888888'\n    >>> find_largest_number([8, 8, 8, 8, 8, 8, 8])\n    '8888888'\n    >>> find_largest_number([8, 8, 8, 8, 8, 8, 8, 9])\n    '98888888'\n    >>> find_largest_number([8, 8, 8, 8, 8, 8, 8, 8])\n    '88888888'\n    >>> find_largest_number([8, 8, 8, 8, 8, 8, 8, 8, 9])\n    '988888888'\n    >>> find_largest_number([8, 8, 8,"
    },
    {
      "rank": 66,
      "score": 8.0,
      "candidate": "def findLargest(arr):\n    arr.sort(reverse=True)\n    result = []\n    for i in range(len(arr)):\n        result.append(arr[i])\n        if i < len(arr)-1:\n            result.append(\"\")\n    result = \"\".join(result)\n    return result\n\nif __name__ == \"__main__\":\n    arr = [int(x) for x in input().split()]\n    print(findLargest(arr))"
    },
    {
      "rank": 67,
      "score": 8.0,
      "candidate": "def find_largest(digits):\n    largest = \"\"\n    for digit in digits:\n        for i in range(len(largest), 0, -1):\n            if int(largest[i - 1]) < int(digit):\n                largest = largest[:i] + digit\n                break\n        if not largest:\n            largest += digit\n    return largest\n\n\ndef main():\n    print(find_largest([1, 4, 3, 6, 5, 2]))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 68,
      "score": 8.0,
      "candidate": "from functools import lru_cache\n\n\ndef largest_number(digits):\n    if len(digits) == 1:\n        return digits[0]\n\n    @lru_cache(maxsize=None)\n    def helper(digits, index=0):\n        if index == len(digits):\n            return \"\"\n\n        result = \"\"\n        for i in range(index, len(digits)):\n            result = max(result, helper(digits, i + 1) + digits[i], digits[i], key=len)\n        return result\n\n    return helper(digits)\n\n\nif __name__ == \"__main__\":\n    print(largest_number([1, 2, 3, 4, 5, 6, 7, 8, 9]))"
    },
    {
      "rank": 69,
      "score": 8.0,
      "candidate": "def largest_number(digits):\n    from itertools import permutations\n\n    if not digits:\n        return 0\n\n    nums = [int(\"\".join(map(str, perm))) for perm in permutations(digits)]\n    return max(nums)\n\n\ndef main():\n    print(largest_number([2, 4, 6, 8]))\n    print(largest_number([0, 2, 2, 4, 5, 7, 8]))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 70,
      "score": 8.0,
      "candidate": "def find_largest_number(digits):\n    if digits is None or len(digits) == 0:\n        return None\n    if len(digits) == 1:\n        return digits[0]\n    digits.sort(reverse=True)\n    result = \"\"\n    while len(digits) > 1:\n        first = digits.pop()\n        second = digits.pop()\n        result += first + second\n        if len(result) > 1 and int(result) > int(result[:2]):\n            result = result[:2]\n    result += digits[0]\n    return int(result)\n\n\ndef main():\n    print(find_largest_number([5, 7, 2, 4, 8]))\n    print(find_largest_number([1, 2, 3, 4]))\n    print(find_largest_number([2, 4, 7]))\n    print(find_largest_number([4, 7, 2, 6]))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 71,
      "score": 8.0,
      "candidate": "from functools import reduce\n\n\ndef largest_number(nums):\n    \"\"\"\n    Finds the largest number that can be formed with the given digits\n    :param nums: list of digits\n    :return: largest number that can be formed with the given digits\n    \"\"\"\n    nums = [str(num) for num in nums]\n    largest_num = reduce(\n        lambda x, y: x + y,\n        sorted(nums, reverse=True)\n    )\n\n    return largest_num\n\n\ndef main():\n    print(largest_number([3, 30, 34, 5, 9]))\n    print(largest_number([0, 0, 0, 0, 0, 0, 0, 0, 0, 0]))\n    print(largest_number([1, 2, 3, 4, 5, 6, 7, 8, 9]))\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 72,
      "score": 8.0,
      "candidate": "from itertools import permutations\n\ndef largest_number(nums):\n    \"\"\"Return the largest number that can be formed with the given digits.\"\"\"\n    if not nums:\n        return None\n    if len(nums) == 1:\n        return str(nums[0])\n    perms = [''.join(p) for p in permutations(nums)]\n    largest = str(max(int(p) for p in perms))\n    return largest"
    },
    {
      "rank": 73,
      "score": 8.0,
      "candidate": "def find_largest_number(digits):\n    numbers = []\n    for i in range(len(digits)):\n        for j in range(i+1, len(digits)):\n            numbers.append(int(str(digits[i]) + str(digits[j])))\n\n    numbers.sort(reverse=True)\n    return numbers[0]\n\n\nprint(find_largest_number([4, 2, 1, 3]))\nprint(find_largest_number([1, 1, 1, 3, 3, 3, 9]))\nprint(find_largest_number([2, 2, 2, 2, 2]))"
    },
    {
      "rank": 74,
      "score": 8.0,
      "candidate": "def largest_number(nums):\n    res = []\n    while nums:\n        max_num = 0\n        for i in nums:\n            if i > max_num:\n                max_num = i\n        nums.remove(max_num)\n        res.append(str(max_num))\n    return int(\"\".join(res))\n\n\nprint(largest_number([3, 30, 34, 5, 9]))"
    },
    {
      "rank": 75,
      "score": 8.0,
      "candidate": "def largest_num(arr):\n    arr.sort(reverse=True)\n    res = []\n    i = 0\n    while i < len(arr):\n        if len(res) == 0 or res[-1] > arr[i]:\n            res.append(arr[i])\n            i += 1\n        else:\n            res.pop()\n    return int(\"\".join(str(i) for i in res))\n\n\nprint(largest_num([3, 3, 3, 2, 2, 2, 1]))\nprint(largest_num([3, 2, 1, 3, 3, 1, 1]))\nprint(largest_num([9, 9, 9, 9, 9, 9, 9, 9, 9, 9]))\nprint(largest_num([1, 2, 3]))\nprint(largest_num([1, 2, 3, 4]))\nprint(largest_num([1, 2, 3, 4, 5]))\nprint(largest_num([1, 2, 3, 4, 5, 6]))\nprint(largest_num([1, 2, 3, 4, 5, 6, 7]))"
    },
    {
      "rank": 76,
      "score": 8.0,
      "candidate": "def largest_number(digits):\n    if len(digits) == 0:\n        return 0\n    elif len(digits) == 1:\n        return int(\"\".join(digits))\n\n    max_num = \"\"\n    for i in range(len(digits)):\n        cur_num = digits[i]\n        cur_num += largest_number(digits[:i] + digits[i + 1 :])\n        if cur_num > max_num:\n            max_num = cur_num\n    return int(max_num)"
    },
    {
      "rank": 77,
      "score": 8.0,
      "candidate": "def largest_num(lst):\n    num_lst = []\n    for i in range(0,len(lst)):\n        for j in range(0,len(lst)):\n            if i != j:\n                num_lst.append(int(str(lst[i]) + str(lst[j])))\n    return max(num_lst)\n\nif __name__ == \"__main__\":\n    lst = [1, 2, 3, 4, 5, 6]\n    print(largest_num(lst))"
    },
    {
      "rank": 78,
      "score": 8.0,
      "candidate": "def largest_number(digits):\n    \"\"\"\n    Return the largest number that can be formed with the given digits.\n    \"\"\"\n    if not digits:\n        return \"\"\n    digits.sort(key=lambda x: -len(str(x)))\n    result = \"\"\n    while digits:\n        for num in digits:\n            if str(num) == \"0\":\n                continue\n            result += str(num)\n            new_list = []\n            for digit in digits:\n                if str(digit) > str(num):\n                    new_list.append(digit)\n            digits = new_list\n            break\n    return result\n\n\nif __name__ == \"__main__\":\n    print(largest_number([3, 30, 34, 5, 9]))\n    print(largest_number([3, 5, 6, 7]))"
    },
    {
      "rank": 79,
      "score": 8.0,
      "candidate": "def largest_num(digits):\n    digits.sort()\n    res = \"\"\n    while digits:\n        res += digits.pop()\n        if helper(res):\n            break\n        else:\n            res = res[:-1]\n    return int(res)\n\n\ndef helper(s):\n    if not s:\n        return True\n    l = len(s)\n    for i in range(l):\n        tmp = s[:i] + s[i + 1:]\n        if tmp and tmp[0] < s[i]:\n            return False\n    return True\n\n\ndef main():\n    print(largest_num([3, 3, 5, 5, 6, 6]))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 80,
      "score": 8.0,
      "candidate": "def largest_number(digits):\n    if not digits:\n        return 0\n\n    # Max number formed by digits\n    max_num = []\n\n    # Keep track of largest number formed till now\n    max_len = 0\n\n    # Sort in descending order\n    digits.sort(reverse=True)\n\n    # Recursively find largest number\n    def helper(digits, index, max_num, max_len):\n        if index >= len(digits):\n            return\n\n        # Get all possible numbers formed by adding digits[index] to max_num\n        for i in range(len(max_num) + 1):\n            num = max_num[:]\n            num.insert(i, digits[index])\n\n            # Formed number is greater than any number formed before\n            if len(num) > max_len:\n                max_len = len(num)\n                max_num = num\n\n        # Recurse for next digit\n        helper(digits, index + 1, max_num, max_len)\n\n    helper(digits, 0, max_num, max_len)\n    return int(\"\".join([str(x) for x in max_num]))\n\n\ndef main():\n    digits = [3, 30, 34, 5, 9]\n    print(largest_number(digits))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 81,
      "score": 8.0,
      "candidate": "def largest_number(digits):\n    if len(digits) == 1:\n        return digits[0]\n\n    def find_largest_number(digits, i=0):\n        if i == len(digits):\n            return \"\"\n        result = []\n        for digit in digits[i:]:\n            result.append(find_largest_number(digits, i + 1) + digit)\n        return str(max(int(digit) for digit in result))\n\n    return find_largest_number(digits)\n\n\ndef largest_number_optimized(digits):\n    return int(\"\".join(sorted(str(digit) for digit in digits, key=lambda x: str(x) * len(digits), reverse=True)))"
    },
    {
      "rank": 82,
      "score": 8.0,
      "candidate": "def largest_number(digits):\n    if len(digits) == 0:\n        return \"\"\n    elif len(digits) == 1:\n        return digits[0]\n\n    max_num = \"\"\n    while len(digits) > 0:\n        max_num += max(digits)\n        digits.remove(max(digits))\n\n    return max_num\n\n\nif __name__ == '__main__':\n    print(largest_number([3, 3, 5, 5, 5, 6]))"
    },
    {
      "rank": 83,
      "score": 8.0,
      "candidate": "def largest_number(digits):\n    digits = [str(digit) for digit in digits]\n    digits.sort(key=lambda x: x * (10 ** (len(digits) - 1)), reverse=True)\n    return int(''.join(digits))\n\n\ndef main():\n    print(largest_number([3, 34, 345, 1]))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 84,
      "score": 8.0,
      "candidate": "def largest_number(digits):\n    if len(digits) == 1:\n        return digits[0]\n    elif len(digits) == 2:\n        if digits[0] == \"0\":\n            return digits[1]\n        elif digits[1] == \"0\":\n            return digits[0]\n        elif digits[0] > digits[1]:\n            return digits[0]\n        else:\n            return digits[1]\n    else:\n        max_num = \"\"\n        for i in range(len(digits)):\n            for j in range(i + 1, len(digits)):\n                if digits[i] + digits[j] > digits[j] + digits[i]:\n                    max_num = max(max_num, digits[i] + digits[j])\n                else:\n                    max_num = max(max_num, digits[j] + digits[i])\n        return max_num\n\n\nprint(largest_number([\"0\", \"0\", \"1\", \"1\", \"9\", \"9\"]))"
    },
    {
      "rank": 85,
      "score": 8.0,
      "candidate": "def largest_number(digits):\n    if not digits:\n        return None\n\n    digits = sorted(digits, reverse=True)\n    largest = \"\"\n    while digits:\n        largest += digits.pop()\n        if not digits:\n            break\n        largest += str(find_max(largest, digits))\n        largest = largest.lstrip(\"0\")\n\n    return largest\n\n\ndef find_max(largest, digits):\n    max_num = 0\n    for num in digits:\n        if num == \"0\":\n            continue\n        if num > max_num:\n            max_num = num\n    return max_num\n\n\ndef main():\n    print(largest_number([3, 30, 34, 5, 9]))\n    print(largest_number([3, 30, 34, 5, 9, 9]))\n    print(largest_number([3, 30, 34, 5, 9, 9, 9]))\n    print(largest_number([]))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 86,
      "score": 8.0,
      "candidate": "def largest_number(digits):\n    \"\"\"\n    >>> largest_number([5, 5, 5])\n    '555'\n    >>> largest_number([1, 2, 3, 4])\n    '4321'\n    >>> largest_number([5, 2, 3, 4])\n    '5432'\n    >>> largest_number([3, 30, 34, 5, 9])\n    '954330'\n    \"\"\"\n    if len(digits) == 0:\n        return \"\"\n    digits = sorted(digits, reverse=True)\n    return \"\".join(str(digit) for digit in digits)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 87,
      "score": 8.0,
      "candidate": "def largest_number(digits):\n    if len(digits) == 0:\n        return 0\n    elif len(digits) == 1:\n        return digits[0]\n    elif len(digits) == 2:\n        if digits[0] == 0:\n            return digits[1]\n        elif digits[1] == 0:\n            return digits[0]\n        elif digits[0] > digits[1]:\n            return digits[0]\n        else:\n            return digits[1]\n    else:\n        max_list = []\n        for i in range(len(digits)):\n            max_list.append(largest_number(digits[:i]+digits[i+1:]))\n        return max(max_list)\n\nprint(largest_number([3,34,3,34,3]))"
    },
    {
      "rank": 88,
      "score": 8.0,
      "candidate": "from functools import lru_cache\n\n\ndef max_num_from_digits(digits: list) -> int:\n    \"\"\"\n    O(2^n) time complexity\n    O(n) space complexity\n    \"\"\"\n    if len(digits) == 0:\n        return 0\n    if len(digits) == 1:\n        return digits[0]\n\n    # sort the list in descending order\n    digits.sort(reverse=True)\n\n    @lru_cache(maxsize=None)\n    def _max_num_from_digits(i: int, j: int, digits: list) -> int:\n        if i == j:\n            return digits[i]\n\n        result = 0\n        for k in range(i, j):\n            result = max(result, digits[i] * 10 ** (k - i + 1) + _max_num_from_digits(k + 1, j, digits))\n\n        return result\n\n    return _max_num_from_digits(0, len(digits) - 1, digits)\n\n\nif __name__ == \"__main__\":\n    assert max_num_from_digits([9, 9, 9, 9]) == 9999\n    assert max_num_from_digits([9, 9, 9, 9, 9, 9, 9, 9, 9]) == 999999999\n    assert max_num_from_digits([5, 5, 5, 5]) == 5555\n    assert max_num_from_digits([1, 2, 3]) == 3"
    },
    {
      "rank": 89,
      "score": 8.0,
      "candidate": "def largest_num(digits):\n    if len(digits) == 1:\n        return digits[0]\n    elif len(digits) == 2:\n        if digits[0] > digits[1]:\n            return digits[0]\n        else:\n            return digits[1]\n    else:\n        max_num = []\n        for i in range(len(digits)):\n            max_num.append(largest_num(digits[i:]))\n        return str(max(int(max_num[0]), int(max_num[1]))) + str(max_num[2])\n\nprint(largest_num([1, 3, 5, 7]))\nprint(largest_num([2, 7, 4, 3, 8, 6, 1]))\nprint(largest_num([5, 2, 4, 9, 3, 7]))"
    },
    {
      "rank": 90,
      "score": 8.0,
      "candidate": "def largest_number(digits):\n    digits.sort(reverse=True)\n    result = []\n    while digits:\n        for i in range(len(digits)):\n            for j in range(i + 1, len(digits)):\n                if int(digits[i] + digits[j]) > int(digits[j] + digits[i]):\n                    digits[i], digits[j] = digits[j], digits[i]\n        result.append(digits[0])\n        digits.pop(0)\n    return \"\".join(result)\n\n\ndef main():\n    digits = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n    print(largest_number(digits))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 91,
      "score": 8.0,
      "candidate": "def largest_number(digits):\n    digits = sorted(digits, reverse=True)\n    num = []\n\n    for i in range(len(digits)):\n        num.append(digits[i])\n        if i < len(digits) - 1:\n            num.append(\"\")\n\n    num = \"\".join(num)\n\n    return num\n\n\nprint(largest_number([3, 30, 34, 5, 9]))"
    },
    {
      "rank": 92,
      "score": 7.0,
      "candidate": "def findLargest(arr):\n    arr.sort(reverse=True)\n    return int(''.join(map(str,arr)))\n\nif __name__ == \"__main__\":\n    arr = [2, 4, 6, 8, 3]\n    print(findLargest(arr))"
    },
    {
      "rank": 93,
      "score": 1.0,
      "candidate": "def largest_number(digits):\n    digits.sort(reverse=True)\n    return str(int(\"\".join(digits)))\n\n\ndef largest_number_with_k_digits(digits, k):\n    digits.sort(reverse=True)\n    return max(x for x in permutations(digits, k) if x[0] != 0)\n\n\ndef largest_number_recursive(digits):\n    if not digits:\n        return \"\"\n    largest_digit = \"\"\n    for i in range(len(digits)):\n        digit = digits[i]\n        remaining_digits = digits[:i] + digits[i + 1:]\n        if largest_number_recursive(remaining_digits) + digit > largest_number_recursive(\n            remaining_digits\n        ) + largest_digit:\n            largest_digit = digit\n    return largest_digit + largest_number_recursive(digits[:])\n\n\ndef main():\n    assert largest_number([3, 30, 34, 5, 9]) == \"9534330\"\n    assert largest_number_with_k_digits([3, 30, 34, 5, 9], 3) == (9, 5, 3)\n    assert largest_number_recursive([3, 30, 34, 5, 9]) == \"9534330\"\n    print(\"All test cases passed!\")\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 94,
      "score": 1.0,
      "candidate": "def largestNumber(nums):\n    \"\"\"\n    :param nums: list - list of digits that are to be used\n    :return: int - the maximum number that can be created using the digits in the list\n\n    This function returns the largest number that can be formed from the given digits.\n    \"\"\"\n    # TODO: Write your solution here\n    nums = [int(i) for i in nums]\n    nums.sort(reverse=True)\n    return int(''.join(str(i) for i in nums))\n\nif __name__ == '__main__':\n    #These \"asserts\" using only for self-checking and not necessary for auto-testing\n    assert largestNumber([5, 5, 10, 2, 2, 4]) == 55224, \"First\"\n    assert largestNumber([4, 7, 2, 9]) == 9742, \"Second\"\n    assert largestNumber([1, 2, 3, 4]) == 4321, \"Third\"\n    assert largestNumber([1]) == 1, \"Fourth\"\n    assert largestNumber([]) == 0, \"Fifth\"\n    print('Done')"
    },
    {
      "rank": 95,
      "score": 1.0,
      "candidate": "def largest_number(digits):\n    if len(digits) == 0:\n        return 0\n    if len(digits) == 1:\n        return int(\"\".join(digits))\n    largest_number = \"\"\n    for i in range(len(digits)):\n        number_with_i_removed = digits[:i] + digits[i + 1 :]\n        for j in range(len(number_with_i_removed)):\n            number_with_i_removed_and_j_removed = number_with_i_removed[:j] + number_with_i_removed[j + 1 :]\n            for k in range(len(number_with_i_removed_and_j_removed)):\n                number_with_i_removed_and_j_removed_and_k_removed = (\n                    number_with_i_removed_and_j_removed[:k]\n                    + number_with_i_removed_and_j_removed[k + 1 :]\n                )\n                for l in range(len(number_with_i_removed_and_j_removed_and_k_removed)):\n                    number_with_i_removed_and_j_removed_and_k_removed_and_l_removed = (\n                        number_with_i_removed_and_j_removed_and_k_removed[:l]\n                        + number_with_i_removed_and_j_removed_and_k_removed[l + 1 :]\n                    )\n                    for m in range(len(number_with_i_removed_and_j_removed_and_k_removed_and_l_removed)):\n                        number_with_i_removed_and_j_removed_and_k_removed_and_l_removed_and_m_removed = (\n                            number_with_i_removed_and_j_removed_and_k_removed_and_l_removed[:m]\n                            + number_with_"
    },
    {
      "rank": 96,
      "score": 1.0,
      "candidate": "def largest_number(digits):\n    \"\"\"Return the largest number that can be formed with the given digits.\n\n    Args:\n        digits (list): List of digits.\n\n    Returns:\n        string: The largest number that can be formed with the given digits.\n\n    Examples:\n        >>> largest_number([5, 5, 5])\n        '555'\n        >>> largest_number([9, 9, 9, 9, 9, 9, 9])\n        '99999999'\n        >>> largest_number([0])\n        '0'\n    \"\"\"\n    if len(digits) == 0:\n        return \"\"\n\n    digits_dict = {}\n    for digit in digits:\n        if digit in digits_dict:\n            digits_dict[digit] += 1\n        else:\n            digits_dict[digit] = 1\n\n    max_number = \"\"\n    for key in sorted(digits_dict, reverse=True):\n        max_number += key * digits_dict[key]\n\n    return max_number\n\n\ndef largest_number_alt(digits):\n    \"\"\"Return the largest number that can be formed with the given digits.\n\n    Args:\n        digits (list): List of digits.\n\n    Returns:\n        string: The largest number that can be formed with the given digits.\n\n    Examples:\n        >>> largest_number_alt([5, 5, 5])\n        '555'\n        >>> largest_number_alt([9, 9, 9, 9, 9, 9, 9])\n        '99999999'\n        >>> largest_number_alt([0])\n        '0'\n    \"\"\"\n    from functools import cmp_to_key\n\n    if len(digits) == 0:\n        return \"\"\n\n    def cmp(x, y):\n        if x + y > y + x:\n            return 1\n        elif x + y < y + x:\n            return -1\n        else:\n            return 0\n\n    digits.sort(key=cmp_to_key(cmp"
    },
    {
      "rank": 97,
      "score": 1.0,
      "candidate": "def largest_number(digits):\n    \"\"\"Returns the largest number that can be formed with the given digits\"\"\"\n    if digits:\n        digits.sort(reverse=True)\n        return \"\".join(map(str, digits))\n    else:\n        return 0\n\n\ndef test_function(test_case):\n    test_input, test_expected = test_case\n    test_actual = largest_number(test_input)\n    if test_actual == test_expected:\n        print(\"Pass\")\n    else:\n        print(\"Fail\")\n\n\ntest_function(([], 0))\ntest_function(([4, 3, 2, 5, 6, 7], 756243))\ntest_function(([5, 4, 3, 2, 1], 54321))\ntest_function(([5, 4, 3, 2, 1, 0], \"543210\"))"
    },
    {
      "rank": 98,
      "score": 1.0,
      "candidate": "def largest_number(arr):\n    \"\"\"\n    :param: arr - list of digits\n    return: int - largest number\n    \"\"\"\n    # base case\n    if len(arr) == 0:\n        return 0\n\n    # if there is only one digit, return it\n    if len(arr) == 1:\n        return arr[0]\n\n    # sort the array in descending order\n    arr.sort(reverse=True)\n\n    # declare a variable to store the result\n    result = \"\"\n\n    # traverse the sorted array\n    for i in range(len(arr)):\n        # append the current digit to the result\n        result += str(arr[i])\n        # traverse the remaining digits to form the next largest number\n        result += find_largest(arr[i + 1:])\n        # return the result\n        return result\n\n\ndef find_largest(arr):\n    # base case\n    if len(arr) == 0:\n        return \"\"\n\n    # if there is only one digit, return it\n    if len(arr) == 1:\n        return arr[0]\n\n    # sort the array in descending order\n    arr.sort(reverse=True)\n\n    # declare a variable to store the result\n    result = \"\"\n\n    # traverse the sorted array\n    for i in range(len(arr)):\n        # append the current digit to the result\n        result += str(arr[i])\n        # traverse the remaining digits to form the next largest number\n        result += find_largest(arr[i + 1:])\n        # return the result\n        return result\n\n\ndef main():\n    # test case 1\n    print(\"Test case 1:\")\n    print(largest_number([9, 9, 9, 9]))\n\n    # test case 2\n    print(\"Test case 2:\")\n    print(largest_number([1, 2, 3, 4, 5, 6, 7, 8, 9]))\n\n    # test case 3\n    print(\"Test case 3:\")\n    print(largest_number([5, 5, 5, 5"
    },
    {
      "rank": 99,
      "score": 1.0,
      "candidate": "from functools import cmp_to_key\n\n\ndef max_num(nums: list) -> int:\n    \"\"\"\n    >>> max_num([3, 2, 1])\n    321\n    >>> max_num([1, 2, 3])\n    321\n    >>> max_num([2, 3, 1])\n    321\n    >>> max_num([2, 1, 3])\n    321\n    \"\"\"\n    nums = sorted(nums, reverse=True)\n    return int(\"\".join(str(num) for num in nums))\n\n\ndef max_num_cmp(nums: list) -> int:\n    \"\"\"\n    >>> max_num_cmp([3, 2, 1])\n    321\n    >>> max_num_cmp([1, 2, 3])\n    321\n    >>> max_num_cmp([2, 3, 1])\n    321\n    >>> max_num_cmp([2, 1, 3])\n    321\n    \"\"\"\n    nums.sort(reverse=True)\n    return int(\"\".join(map(str, nums)))\n\n\ndef max_num_key(nums: list) -> int:\n    \"\"\"\n    >>> max_num_key([3, 2, 1])\n    321\n    >>> max_num_key([1, 2, 3])\n    321\n    >>> max_num_key([2, 3, 1])\n    321\n    >>> max_num_key([2, 1, 3])\n    321\n    \"\"\"\n    return int(\"\".join(map(str, sorted(nums, reverse=True))))\n\n\ndef max_num_cmp_key(nums: list) -> int:\n    \"\"\"\n    >>> max_num_cmp_key([3, 2, 1])\n    321\n    >>> max_num_cmp_key([1, 2, 3])\n    321\n    >>> max_num_cmp_key([2, 3, 1])\n    321"
    },
    {
      "rank": 100,
      "score": 1.0,
      "candidate": "def find_largest_number(digits):\n    \"\"\"\n    Find the largest number that can be formed with the given digits.\n\n    Args:\n       digits(list): List of digits\n    Returns:\n       int: The largest number that can be formed with the given digits.\n    \"\"\"\n    if digits == []:\n        return []\n    if len(digits) == 1:\n        return digits[0]\n    digits.sort(reverse=True)\n    num = \"\"\n    while digits:\n        if not num:\n            num = str(digits.pop())\n            continue\n        if num[-1] > digits[-1]:\n            num += str(digits.pop())\n        else:\n            break\n    return int(num)\n\ndef test_function(test_case):\n    digits = test_case[0]\n    solution = test_case[1]\n    output = find_largest_number(digits)\n    if output == solution:\n        print(\"Pass\")\n    else:\n        print(\"Fail\")\n\ndigits = [1, 2, 3, 4, 5]\nsolution = 53421\ntest_case = [digits, solution]\ntest_function(test_case)\n\ndigits = [5, 5, 5, 5, 5]\nsolution = 55555\ntest_case = [digits, solution]\ntest_function(test_case)\n\ndigits = [9, 9, 9, 9, 9, 9, 9, 9, 9, 9]\nsolution = 9999999999\ntest_case = [digits, solution]\ntest_function(test_case)"
    }
  ]
}