{
  "timestamp": "2025-09-15T00:52:20.480778",
  "method": "improved_llm_judge",
  "judge_model": "codellama/CodeLlama-7b-Python-hf",
  "target_model": "codellama-7b",
  "dataset": "mbpp",
  "problem_number": 340,
  "total_candidates": 100,
  "results": [
    {
      "rank": 1,
      "score": 10.0,
      "candidate": "from collections import Counter\n\n\ndef first_occurrence_k_times(nums, k):\n    \"\"\"\n    Find the first element occurring k times in a given array.\n    :param nums: list of integers\n    :param k: integer\n    :return: first element occurring k times in a given array\n    \"\"\"\n    # Check if nums is empty\n    if not nums:\n        return None\n\n    # Check if k is valid\n    if k <= 0:\n        return None\n\n    # Create a dictionary with the counts of each element\n    counter = Counter(nums)\n\n    # Find the first element occurring k times\n    for element in counter:\n        if counter[element] == k:\n            return element\n\n    # No element occurring k times\n    return None\n\n\ndef main():\n    print(first_occurrence_k_times([1, 2, 3, 4, 5, 5, 5, 5, 6, 7, 8, 9, 10], 3))\n    print(first_occurrence_k_times([1, 2, 3, 4, 5, 5, 5, 5, 6, 7, 8, 9, 10], 5))\n    print(first_occurrence_k_times([1, 2, 3, 4, 5, 5, 5, 5, 6, 7, 8, 9, 10], 0))\n    print(first_occurrence_k_times([1, 2, 3, 4, 5, 5, 5, 5, 6, 7, 8, 9, 10], 10))\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 2,
      "score": 10.0,
      "candidate": "def first_occuring_k_times(arr, k):\n    d = {}\n    for i in arr:\n        if i not in d:\n            d[i] = 1\n        else:\n            d[i] += 1\n    for i in d:\n        if d[i] == k:\n            return i\n\n\ndef first_occuring_k_times_2(arr, k):\n    return sorted(arr)[k-1]\n\n\ndef main():\n    arr = [1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5]\n    print(first_occuring_k_times(arr, 3))\n    print(first_occuring_k_times_2(arr, 3))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 3,
      "score": 10.0,
      "candidate": "def first_occurence(arr, k):\n    \"\"\"\n    >>> first_occurence([1, 2, 3, 4, 2, 3, 1, 3, 2, 1, 2, 2], 2)\n    2\n    >>> first_occurence([1, 2, 3, 4, 2, 3, 1, 3, 2, 1, 2, 2], 3)\n    3\n    >>> first_occurence([1, 2, 3, 4, 2, 3, 1, 3, 2, 1, 2, 2], 4)\n    4\n    \"\"\"\n    count = {}\n    for item in arr:\n        if item in count:\n            count[item] += 1\n        else:\n            count[item] = 1\n    for key, value in count.items():\n        if value == k:\n            return key\n\n\ndef first_occurence_optimized(arr, k):\n    \"\"\"\n    >>> first_occurence_optimized([1, 2, 3, 4, 2, 3, 1, 3, 2, 1, 2, 2], 2)\n    2\n    >>> first_occurence_optimized([1, 2, 3, 4, 2, 3, 1, 3, 2, 1, 2, 2], 3)\n    3\n    >>> first_occurence_optimized([1, 2, 3, 4, 2, 3, 1, 3, 2, 1, 2, 2], 4)\n    4\n    \"\"\"\n    count = {}\n    for item in arr:\n        if item in count:\n            count[item] += 1\n        else:\n            count[item] = 1\n    for key, value in count.items():\n        if value == k:\n            return key\n\n\ndef first_occurence_optimized_2(arr, k):\n    \"\"\"\n    >>> first_occurence_optimized_2"
    },
    {
      "rank": 4,
      "score": 10.0,
      "candidate": "from collections import Counter\nfrom typing import List\n\n\ndef first_k_occuring_element(arr: List, k: int) -> int:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(1)\n    \"\"\"\n\n    if not arr or len(arr) < k:\n        return -1\n\n    count = Counter(arr)\n\n    for num in count:\n        if count[num] == k:\n            return num\n\n    return -1\n\n\nif __name__ == \"__main__\":\n    assert first_k_occuring_element([1, 1, 1, 2, 2, 2, 3, 3, 3, 3], 2) == 1"
    },
    {
      "rank": 5,
      "score": 10.0,
      "candidate": "from collections import Counter\nfrom typing import List\n\n\ndef first_k_times_occurrence(arr: List[int], k: int) -> int:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(n)\n    \"\"\"\n    return Counter(arr).most_common(k)[k - 1][0]\n\n\nif __name__ == \"__main__\":\n    assert first_k_times_occurrence([1, 2, 3, 4, 5, 1, 1, 1], 3) == 1\n    assert first_k_times_occurrence([1, 2, 3, 4, 5, 1, 1, 1], 2) == 5\n    assert first_k_times_occurrence([1, 1, 2, 2, 3], 2) == 1"
    },
    {
      "rank": 6,
      "score": 10.0,
      "candidate": "from collections import Counter\n\n\ndef find_first_occuring_k_times(array, k):\n    \"\"\"\n    This function will find the first element occurring k times in a given array.\n\n    :param array: List of integers.\n    :param k: Integer.\n    :return: Integer.\n    >>> find_first_occuring_k_times([1, 1, 2, 2, 2, 2, 3, 3, 3], 2)\n    2\n    >>> find_first_occuring_k_times([1, 1, 2, 2, 2, 2, 3, 3, 3], 3)\n    3\n    >>> find_first_occuring_k_times([1, 1, 2, 2, 2, 2, 3, 3, 3], 4)\n    -1\n    >>> find_first_occuring_k_times([1, 1, 2, 2, 2, 2, 3, 3, 3], 1)\n    1\n    >>> find_first_occuring_k_times([1, 1, 2, 2, 2, 2, 3, 3, 3], 0)\n    -1\n    \"\"\"\n    if k < 0:\n        return -1\n\n    counter = Counter(array)\n\n    for key in counter.keys():\n        if counter[key] == k:\n            return key\n    return -1\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 7,
      "score": 10.0,
      "candidate": "from collections import Counter\nfrom typing import List\n\n\ndef first_occurence_k_times(array: List[int], k: int) -> int:\n    \"\"\"Returns the first element occurring k times in a given array.\n\n    Args:\n        array (List[int]): Array of integers\n        k (int): Number of times the element should occur\n\n    Examples:\n        >>> first_occurence_k_times([1, 2, 2, 3, 3, 3, 4, 4, 4, 4], 3)\n        2\n        >>> first_occurence_k_times([1, 2, 2, 3, 3, 3, 4, 4, 4, 4], 4)\n        4\n        >>> first_occurence_k_times([1, 2, 2, 3, 3, 3, 4, 4, 4, 4], 5)\n        -1\n\n    \"\"\"\n    if not array:\n        return -1\n\n    counter = Counter(array)\n\n    for item, count in counter.items():\n        if count == k:\n            return item\n\n    return -1\n\n\nif __name__ == \"__main__\":\n    print(first_occurence_k_times([1, 2, 2, 3, 3, 3, 4, 4, 4, 4], 3))\n    print(first_occurence_k_times([1, 2, 2, 3, 3, 3, 4, 4, 4, 4], 4))\n    print(first_occurence_k_times([1, 2, 2, 3, 3, 3, 4, 4, 4, 4], 5))"
    },
    {
      "rank": 8,
      "score": 10.0,
      "candidate": "from collections import Counter\n\n\ndef first_k_times(arr, k):\n    counter = Counter(arr)\n    return list(counter.keys())[0]\n\n\ndef main():\n    arr = [1, 2, 2, 3, 4, 4, 4, 5, 5, 5, 5]\n    k = 4\n    print(\"First element occurring k times in the array is:\")\n    print(first_k_times(arr, k))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 9,
      "score": 10.0,
      "candidate": "from collections import Counter\n\n\ndef first_occurence_k_times(arr, k):\n    count = Counter(arr)\n    for i in count:\n        if count[i] == k:\n            return i\n    return None\n\n\ndef main():\n    arr = [1, 1, 2, 2, 3, 3, 4, 4, 4, 4]\n    k = 2\n    print(first_occurence_k_times(arr, k))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 10,
      "score": 10.0,
      "candidate": "def first_occurence_of_k_times(arr, k):\n    \"\"\"\n    Time complexity: O(n)\n    Space complexity: O(n)\n    \"\"\"\n    count_map = {}\n\n    for el in arr:\n        if el in count_map:\n            count_map[el] += 1\n        else:\n            count_map[el] = 1\n\n    for el in arr:\n        if count_map[el] == k:\n            return el\n\n    return -1\n\n\nprint(first_occurence_of_k_times([1, 2, 2, 3, 3, 3, 4, 4, 4, 4], 3))"
    },
    {
      "rank": 11,
      "score": 10.0,
      "candidate": "def first_occurence(arr, k):\n    freq = {}\n    for i in range(len(arr)):\n        if arr[i] in freq:\n            freq[arr[i]] += 1\n        else:\n            freq[arr[i]] = 1\n    for key, value in freq.items():\n        if value == k:\n            return key\n\n\nprint(first_occurence([1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8"
    },
    {
      "rank": 12,
      "score": 9.0,
      "candidate": "def first_k_element(array, k):\n    count = {}\n    for i in array:\n        count[i] = count.get(i, 0) + 1\n\n    for key, value in count.items():\n        if value == k:\n            return key\n\n    return None\n\n\nif __name__ == \"__main__\":\n    print(first_k_element([1, 1, 1, 1, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 5, 5, 5, 5, 6, 6, 6, 6, 7, 8, 8, 8, 8, 8, 8, 8], 3))"
    },
    {
      "rank": 13,
      "score": 9.0,
      "candidate": "from collections import Counter\n\n\ndef first_occurence(arr, k):\n    \"\"\"\n    Return the first element that occurs k times in the array\n    \"\"\"\n    if not arr or k < 1:\n        return None\n\n    count_map = Counter(arr)\n    for element in arr:\n        if count_map[element] == k:\n            return element\n    return None\n\n\nif __name__ == \"__main__\":\n    print(first_occurence([1, 2, 2, 3, 3, 3, 4, 5, 5, 5], 2))\n    print(first_occurence([1, 1, 2, 2, 3, 3, 3, 4, 5, 5, 5], 2))\n    print(first_occurence([1, 1, 2, 2, 3, 3, 3, 4, 5, 5, 5], 3))\n    print(first_occurence([1, 1, 2, 2, 3, 3, 3, 4, 5, 5, 5], 4))\n    print(first_occurence([1, 1, 2, 2, 3, 3, 3, 4, 5, 5, 5], 5))\n    print(first_occurence([1, 1, 2, 2, 3, 3, 3, 4, 5, 5, 5], 6))\n    print(first_occurence([1, 1, 2, 2, 3, 3, 3, 4, 5, 5, 5], 1))\n    print(first_occurence([1, 1, 2, 2, 3, 3, 3, 4, 5, 5, 5], 0))"
    },
    {
      "rank": 14,
      "score": 8.0,
      "candidate": "def first_element_k_times(arr, k):\n    \"\"\"\n    O(n) & O(n)\n    \"\"\"\n    hash_map = dict()\n    for num in arr:\n        if num not in hash_map:\n            hash_map[num] = 1\n        else:\n            hash_map[num] += 1\n    for num in hash_map.keys():\n        if hash_map[num] == k:\n            return num\n    return -1\n\n\ndef test_first_element_k_times():\n    arr = [1, 2, 2, 3, 3, 3, 4, 5, 5, 5, 5, 6, 6, 6, 6]\n    k = 2\n    assert first_element_k_times(arr, k) == 2"
    },
    {
      "rank": 15,
      "score": 8.0,
      "candidate": "from collections import Counter\n\n\ndef first_element(arr, k):\n    c = Counter(arr)\n    for i in c:\n        if c[i] == k:\n            return i\n\n\nif __name__ == \"__main__\":\n    print(first_element([1, 2, 2, 3, 3, 3, 4, 5, 5, 5], 3))"
    },
    {
      "rank": 16,
      "score": 8.0,
      "candidate": "def find_first_occurrence(arr, k):\n    \"\"\"\n    >>> find_first_occurrence([1,2,3,4,5,6,7,8,1,2,3,4,5,6,7,8,1,2,3,4,5,6,7,8], 3)\n    3\n    >>> find_first_occurrence([1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8], 3)\n    1\n    \"\"\"\n    count = {}\n    for i in range(len(arr)):\n        if arr[i] not in count:\n            count[arr[i]] = 1\n        else:\n            count[arr[i]] += 1\n\n    for i in range(len(arr)):\n        if count[arr[i]] == k:\n            return arr[i]\n\n    return -1\n\n\ndef main():\n    assert find_first_occurrence([1,2,3,4,5,6,7,8,1,2,3,4,5,6,7,8,1,2,3,4,5,6,7,8], 3) == 3\n    assert find_first_occurrence([1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8], 3) == 1\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 17,
      "score": 8.0,
      "candidate": "from collections import Counter\n\n\ndef first_element_k_times(array, k):\n    if k > len(array):\n        return None\n    if k == 1:\n        return min(array)\n\n    counts = Counter(array)\n    for i in array:\n        if counts[i] == k:\n            return i\n    return None\n\n\nprint(first_element_k_times([1, 2, 3, 2, 3, 2, 3, 2, 3, 4, 2], 3))\nprint(first_element_k_times([1, 2, 3, 2, 3, 2, 3, 2, 3, 4, 2], 4))\nprint(first_element_k_times([1, 2, 3, 2, 3, 2, 3, 2, 3, 4, 2], 5))\nprint(first_element_k_times([1, 2, 3, 2, 3, 2, 3, 2, 3, 4, 2], 6))\nprint(first_element_k_times([1, 2, 3, 2, 3, 2, 3, 2, 3, 4, 2], 7))"
    },
    {
      "rank": 18,
      "score": 8.0,
      "candidate": "from collections import defaultdict\n\n\ndef first_element_k_times(arr, k):\n    dict_k = defaultdict(int)\n    for i in arr:\n        dict_k[i] += 1\n\n    for key, value in dict_k.items():\n        if value == k:\n            return key\n\n\nprint(first_element_k_times([1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8], 3))"
    },
    {
      "rank": 19,
      "score": 8.0,
      "candidate": "from collections import Counter\n\n\ndef first_occurence(arr, k):\n    count_dict = Counter(arr)\n    for item in count_dict:\n        if count_dict[item] == k:\n            return item\n\n\ndef first_occurence_2(arr, k):\n    count_dict = {}\n    for item in arr:\n        if item not in count_dict:\n            count_dict[item] = 1\n        else:\n            count_dict[item] += 1\n        if count_dict[item] == k:\n            return item\n\n\nif __name__ == \"__main__\":\n    print(first_occurence([1, 2, 2, 3, 4, 5], 2))\n    print(first_occurence_2([1, 2, 2, 3, 4, 5], 2))"
    },
    {
      "rank": 20,
      "score": 8.0,
      "candidate": "from collections import Counter\n\n\ndef find_first_occurring_k_times(array, k):\n    # Get the frequency of each element\n    counter = Counter(array)\n    # Get the first element that occurs k times\n    return counter.most_common(1)[0][0]\n\n\ndef main():\n    print(\"First element occurring 2 times in the array: \" +\n          str(find_first_occurring_k_times([1, 1, 2, 2, 2, 3], 2)))\n    print(\"First element occurring 3 times in the array: \" +\n          str(find_first_occurring_k_times([1, 1, 2, 2, 2, 3], 3)))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 21,
      "score": 8.0,
      "candidate": "def first_occurence(arr, k):\n    if len(arr)==0:\n        return -1\n    for i in range(len(arr)):\n        if arr[i]==k:\n            return i\n    return -1\n\nif __name__==\"__main__\":\n    arr = [1, 2, 3, 4, 4, 4, 5, 5, 5]\n    k = 4\n    print(first_occurence(arr, k))"
    },
    {
      "rank": 22,
      "score": 8.0,
      "candidate": "def first_k_times(arr, k):\n    arr_freq = {}\n    for i in arr:\n        if i in arr_freq:\n            arr_freq[i] += 1\n        else:\n            arr_freq[i] = 1\n    for i in arr_freq:\n        if arr_freq[i] == k:\n            return i\n\n\ndef main():\n    arr_input = [1, 2, 2, 3, 3, 3, 4, 5, 6, 6, 6, 6, 7, 7]\n    k = 2\n    print(first_k_times(arr_input, k))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 23,
      "score": 8.0,
      "candidate": "def first_occurence_of_k_times(arr, k):\n    \"\"\"\n    Time complexity: O(n)\n    Space complexity: O(n)\n    \"\"\"\n    if not arr:\n        return None\n\n    hash_table = {}\n\n    for num in arr:\n        if num not in hash_table:\n            hash_table[num] = 1\n        else:\n            hash_table[num] += 1\n\n    for num in hash_table:\n        if hash_table[num] == k:\n            return num\n\n    return None\n\ndef first_occurence_of_k_times_optimized(arr, k):\n    \"\"\"\n    Time complexity: O(n)\n    Space complexity: O(1)\n    \"\"\"\n    if not arr:\n        return None\n\n    num_dict = {num: 0 for num in arr}\n\n    for num in arr:\n        num_dict[num] += 1\n\n    for num in num_dict:\n        if num_dict[num] == k:\n            return num\n\n    return None\n\nprint(first_occurence_of_k_times([1, 2, 2, 2, 2, 3, 3, 5, 8, 8], 2))\nprint(first_occurence_of_k_times_optimized([1, 2, 2, 2, 2, 3, 3, 5, 8, 8], 2))"
    },
    {
      "rank": 24,
      "score": 8.0,
      "candidate": "from collections import Counter\n\n\ndef first_k_times(arr, k):\n    count = Counter(arr)\n    for i in count:\n        if count[i] == k:\n            return i\n\n\nif __name__ == \"__main__\":\n    print(first_k_times([1, 2, 3, 2, 4, 2, 5, 2, 6], 2))"
    },
    {
      "rank": 25,
      "score": 8.0,
      "candidate": "def find_k_element(arr, k):\n    count_dict = dict()\n\n    for item in arr:\n        count_dict[item] = count_dict.get(item, 0) + 1\n\n    for key, value in count_dict.items():\n        if value == k:\n            return key\n\n\nif __name__ == \"__main__\":\n    arr = [1, 2, 3, 2, 3, 1, 3, 2, 1, 2, 3, 3]\n    k = 2\n    print(find_k_element(arr, k))"
    },
    {
      "rank": 26,
      "score": 8.0,
      "candidate": "from collections import Counter\n\n\ndef first_occurance(arr, k):\n    c = Counter(arr)\n    for key, value in c.items():\n        if value == k:\n            return key\n\n\ndef main():\n    arr = [1, 2, 2, 3, 3, 3, 4, 4, 4, 4]\n    k = 3\n    print(first_occurance(arr, k))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 27,
      "score": 8.0,
      "candidate": "from collections import Counter\n\n\ndef first_k_occurrences(arr, k):\n    \"\"\"\n    :param arr: input array\n    :param k: number of occurrences\n    :return: first k occurrences\n    \"\"\"\n    c = Counter(arr)\n    for i in c:\n        if c[i] == k:\n            return i\n    return None\n\n\nif __name__ == \"__main__\":\n    print(first_k_occurrences([1, 2, 3, 4, 2], 2))"
    },
    {
      "rank": 28,
      "score": 8.0,
      "candidate": "def first_k_times(arr, k):\n    return next((x for x in arr if arr.count(x) == k), None)\n\n\nprint(first_k_times([1, 2, 3, 4, 5, 5, 5, 5, 5, 6], 5))"
    },
    {
      "rank": 29,
      "score": 8.0,
      "candidate": "def find_first_occurence(arr, k):\n    # Create a dictionary that holds the count of each element.\n    count = {}\n    for el in arr:\n        if el not in count:\n            count[el] = 1\n        else:\n            count[el] += 1\n\n    # Iterate over the dictionary and check if the value is equal to k.\n    for el in count:\n        if count[el] == k:\n            return el\n\n\ndef main():\n    arr = [1, 3, 1, 1, 2, 1, 1]\n    k = 1\n    print(find_first_occurence(arr, k))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 30,
      "score": 8.0,
      "candidate": "from collections import Counter\n\n\ndef find_first_occurring_k_times(arr, k):\n    counter = Counter(arr)\n    for key, value in counter.items():\n        if value == k:\n            return key\n    return None\n\n\ndef main():\n    print(\"First Element Occurring K Times: \" +\n          str(find_first_occurring_k_times([1, 1, 2, 2, 3, 3, 3, 4, 4], 3)))\n    print(\"First Element Occurring K Times: \" +\n          str(find_first_occurring_k_times([1, 1, 2, 2, 3, 3, 3, 4, 4], 4)))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 31,
      "score": 8.0,
      "candidate": "def first_occurence_k_times(array, k):\n    # A dict to keep track of the number of occurrences of an element\n    occurences = {}\n\n    for i in array:\n        if i not in occurences:\n            occurences[i] = 1\n        else:\n            occurences[i] += 1\n\n    for key in occurences:\n        if occurences[key] == k:\n            return key\n\n\nprint(first_occurence_k_times([1, 1, 1, 2, 2, 3], 2))"
    },
    {
      "rank": 32,
      "score": 8.0,
      "candidate": "def first_element_k_times(arr, k):\n    if len(arr) < 1:\n        return -1\n    arr.sort()\n    i = 0\n    while i < len(arr) - 1:\n        if arr[i] == arr[i+1]:\n            j = i + 1\n            count = 1\n            while j < len(arr) - 1 and arr[j] == arr[j+1]:\n                count += 1\n                j += 1\n            if count == k:\n                return arr[i]\n            i = j + 1\n        else:\n            i += 1\n    return -1\n\n\ndef first_element_k_times_optimized(arr, k):\n    if len(arr) < 1:\n        return -1\n    arr.sort()\n    i = 0\n    while i < len(arr) - 1:\n        if arr[i] == arr[i+1]:\n            j = i + 1\n            count = 1\n            while j < len(arr) - 1 and arr[j] == arr[j+1]:\n                count += 1\n                j += 1\n            if count == k:\n                return arr[i]\n            i = j + 1\n        else:\n            i += 1\n    return -1\n\n\ndef main():\n    arr = [1, 1, 2, 2, 2, 2, 3, 3, 3, 3]\n    k = 2\n    print(first_element_k_times(arr, k))\n    print(first_element_k_times_optimized(arr, k))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 33,
      "score": 8.0,
      "candidate": "from collections import Counter\n\n\ndef first_occurence_of_k_times(arr, k):\n    count = Counter(arr)\n    return list(count.keys())[list(count.values()).index(k)]\n\n\nprint(first_occurence_of_k_times([3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 5, 5, 5], 4))"
    },
    {
      "rank": 34,
      "score": 8.0,
      "candidate": "from collections import Counter\n\n\ndef find_first_occuring_k_times(arr, k):\n    count = Counter(arr)\n\n    for key, val in count.items():\n        if val == k:\n            return key\n\n    return None\n\n\ndef main():\n    assert find_first_occuring_k_times([2, 3, 4, 5, 4, 2, 2, 2, 2], 2) == 2\n    assert find_first_occuring_k_times([2, 3, 4, 5, 4, 2, 2, 2, 2], 3) == 4\n    assert find_first_occuring_k_times([2, 3, 4, 5, 4, 2, 2, 2, 2], 4) == 2\n    assert find_first_occuring_k_times([2, 3, 4, 5, 4, 2, 2, 2, 2], 5) is None\n    assert find_first_occuring_k_times([2, 3, 4, 5, 4, 2, 2, 2, 2], 6) is None\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 35,
      "score": 8.0,
      "candidate": "from collections import Counter\n\n\ndef first_element_k_times(arr, k):\n    count = Counter(arr)\n    return count.most_common(1)[0][0]\n\n\nprint(first_element_k_times([1, 1, 2, 3, 1, 1], 2))"
    },
    {
      "rank": 36,
      "score": 8.0,
      "candidate": "from collections import Counter\n\ndef first_occurence_k_times(arr, k):\n    \"\"\"\n    O(n) & O(n)\n    \"\"\"\n    counter = Counter(arr)\n\n    for key, value in counter.items():\n        if value == k:\n            return key\n\n\ndef first_occurence_k_times_2(arr, k):\n    \"\"\"\n    O(nlogn) & O(1)\n    \"\"\"\n    arr.sort()\n    low, high = 0, len(arr)-1\n\n    while low <= high:\n        mid = (low+high) // 2\n        count = 0\n        for i in range(len(arr)):\n            if arr[i] == arr[mid]:\n                count += 1\n        if count == k:\n            return arr[mid]\n        elif count > k:\n            high = mid - 1\n        else:\n            low = mid + 1\n    return None\n\n\nif __name__ == \"__main__\":\n    assert first_occurence_k_times([1,2,3,4,5,5,5,5,6], 5) == 5\n    assert first_occurence_k_times_2([1,2,3,4,5,5,5,5,6], 5) == 5"
    },
    {
      "rank": 37,
      "score": 8.0,
      "candidate": "def first_occurrence_k_times(arr, k):\n    \"\"\"\n    This function takes in two arguments arr and k.\n    It finds the first element in arr that occurs k times.\n    If no such element is found, it returns None.\n    \"\"\"\n    # dictionary to store elements and their counts\n    ele_dict = dict()\n\n    # traverse through the array\n    for elem in arr:\n        # check if the element is present in the dictionary\n        if elem in ele_dict:\n            # if it is present, increment its count\n            ele_dict[elem] += 1\n        # if it is not present, add it to the dictionary with count 1\n        else:\n            ele_dict[elem] = 1\n\n    # traverse through the dictionary and check if any element's count is k\n    for elem in ele_dict:\n        if ele_dict[elem] == k:\n            return elem\n\n    # if no element is found, return None\n    return None\n\n\nprint(first_occurrence_k_times([1, 2, 2, 3, 3, 3, 4, 4, 4, 4], 2))"
    },
    {
      "rank": 38,
      "score": 8.0,
      "candidate": "from collections import Counter\n\n\ndef first_occurence_k_times(arr, k):\n    counter = Counter(arr)\n    for i in counter:\n        if counter[i] == k:\n            return i\n\n\ndef main():\n    arr = [2, 1, 2, 5, 2, 3, 2, 1, 2, 2, 1]\n    print(\"First occurrence of 2 with k times is: \" + str(first_occurence_k_times(arr, 2)))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 39,
      "score": 8.0,
      "candidate": "def first_occuring_k_times(arr: list, k: int) -> int:\n    \"\"\"\n    Time Complexity: O(n)\n    \"\"\"\n    if k > len(arr) / 2:\n        return first_occuring_k_times(arr[::-1], k)\n\n    hash_map = {}\n    for element in arr:\n        hash_map[element] = hash_map.get(element, 0) + 1\n\n    for key in hash_map:\n        if hash_map[key] == k:\n            return key\n\n\nif __name__ == \"__main__\":\n    assert first_occuring_k_times([1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4], 3) == 1\n    assert first_occuring_k_times([1, 1, 1, 3, 3, 2, 2, 2], 2) == 2"
    },
    {
      "rank": 40,
      "score": 8.0,
      "candidate": "def find_first_occurring_k_times(arr, k):\n    \"\"\"\n    :param arr: list - a list of integers\n    :param k: int - an integer\n    :return: int - an integer\n    \"\"\"\n    # return None if arr is None or len(arr) == 0\n    if arr is None or len(arr) == 0:\n        return None\n\n    # return None if k <= 0\n    if k <= 0:\n        return None\n\n    # Create a dict to store the count of the element in the array\n    # Traverse through the array and increase the count of the element in the dict\n    dict_count = {}\n    for element in arr:\n        if element not in dict_count:\n            dict_count[element] = 1\n        else:\n            dict_count[element] += 1\n\n    # Traverse through the dict and return the element which has the count equal to k\n    for key, value in dict_count.items():\n        if value == k:\n            return key\n\n    # Return None if no element found in the dict\n    return None\n\n\ndef main():\n    print(\"First element occurring k times in a given array: \" +\n          str(find_first_occurring_k_times([1, 2, 3, 4, 2], 3)))\n    print(\"First element occurring k times in a given array: \" +\n          str(find_first_occurring_k_times([1, 1, 2, 2, 3, 3, 4, 5, 5], 2)))\n    print(\"First element occurring k times in a given array: \" +\n          str(find_first_occurring_k_times([1, 1, 2, 2, 3, 3, 4, 5, 5], 3)))\n    print(\"First element occurring k times in a given array: \" +\n          str(find_first_occurring_k_times([1, 1, 2, 2, 3, 3, 4, 5, 5], 4)))\n    print(\"First element occurring k times"
    },
    {
      "rank": 41,
      "score": 8.0,
      "candidate": "from collections import Counter\n\n\ndef first_occurence_k_times(arr, k):\n    return Counter(arr).most_common(1)[0][0]\n\n\ndef first_occurence_k_times_2(arr, k):\n    return sorted(arr)[k - 1]\n\n\nprint(first_occurence_k_times([1, 1, 2, 3, 4, 5, 6, 6, 6, 6, 6, 7, 8, 9, 9, 9], 4))\nprint(first_occurence_k_times_2([1, 1, 2, 3, 4, 5, 6, 6, 6, 6, 6, 7, 8, 9, 9, 9], 4))"
    },
    {
      "rank": 42,
      "score": 8.0,
      "candidate": "def first_occurrence(arr, k):\n    d = {}\n    for i in arr:\n        if i in d:\n            d[i] += 1\n        else:\n            d[i] = 1\n    for i in d:\n        if d[i] == k:\n            return i\n    return -1\n\n\nif __name__ == \"__main__\":\n    print(first_occurrence([1, 1, 2, 3, 2], 2))\n    print(first_occurrence([1, 1, 2, 3, 2], 3))\n    print(first_occurrence([1, 1, 2, 3, 2], 4))\n    print(first_occurrence([1, 1, 2, 3, 2], 1))"
    },
    {
      "rank": 43,
      "score": 8.0,
      "candidate": "from collections import Counter\n\n\ndef first_occuring_k_times(input_list, k):\n    if not input_list or k < 1:\n        return None\n\n    count = Counter(input_list)\n\n    for key, value in count.items():\n        if value == k:\n            return key\n\n    return None\n\n\ndef main():\n    assert first_occuring_k_times([1, 2, 3, 2, 1], 2) == 2\n    assert first_occuring_k_times([1, 2, 3, 2, 1], 1) == 1\n    assert first_occuring_k_times([1, 2, 3, 2, 1], 3) is None\n    assert first_occuring_k_times([1, 2, 3, 2, 1], 0) is None\n    assert first_occuring_k_times([1, 2, 3, 2, 1], 10) is None\n    assert first_occuring_k_times([1, 2, 3, 2, 1], 0) is None\n    assert first_occuring_k_times([1, 2, 3, 2, 1], -1) is None\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 44,
      "score": 8.0,
      "candidate": "def first_occurrence(array, k):\n    \"\"\"\n    This function takes in a list and a number k.\n    It returns the first element in the list that occurs k times.\n    \"\"\"\n    # check if the input is valid\n    if len(array) == 0 or k <= 0 or k > len(array):\n        return None\n\n    # initialize a dict to count the number of times each element occurs in the list\n    count = {}\n\n    # iterate through the list\n    for i in array:\n        # check if the element is in the dict\n        if i in count:\n            # increment the count\n            count[i] += 1\n        # if not add it to the dict\n        else:\n            count[i] = 1\n\n    # iterate through the dict\n    for i in count:\n        # check if the element occurs k times\n        if count[i] == k:\n            # return the element\n            return i\n\n    # if no element occurs k times\n    return None\n\n\nif __name__ == \"__main__\":\n    print(first_occurrence([1, 1, 2, 2, 2, 3], 2))\n    print(first_occurrence([1, 1, 2, 2, 2, 3], 3))\n    print(first_occurrence([1, 1, 2, 2, 2, 3], 4))\n    print(first_occurrence([1, 1, 2, 2, 2, 3], 5))\n    print(first_occurrence([1, 1, 2, 2, 2, 3], 6))"
    },
    {
      "rank": 45,
      "score": 8.0,
      "candidate": "def first_occurence(array: list, k: int) -> int:\n    \"\"\"\n    >>> first_occurence([1, 1, 2, 2, 3, 3, 3, 3], 3)\n    3\n    >>> first_occurence([1, 1, 2, 2, 3, 3, 3, 3], 4)\n    -1\n    >>> first_occurence([1, 1, 2, 2, 3, 3, 3, 3], 5)\n    -1\n    \"\"\"\n    count: dict = {}\n    for i in array:\n        if i in count:\n            count[i] += 1\n        else:\n            count[i] = 1\n\n    for key in count.keys():\n        if count[key] == k:\n            return key\n    return -1\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 46,
      "score": 8.0,
      "candidate": "from collections import Counter\n\n\ndef first_occuring_k_times(input_list, k):\n    count = Counter(input_list)\n    for key, value in count.items():\n        if value == k:\n            return key\n    return None\n\n\nprint(first_occuring_k_times([1, 2, 3, 4, 5, 1, 1, 1], 1))"
    },
    {
      "rank": 47,
      "score": 8.0,
      "candidate": "from collections import defaultdict\n\ndef first_occurence(arr, k):\n    \"\"\"\n    :param arr: list - a list of integers\n    :param k: int - an integer\n    :return: int, int or None, None - the first integer that occurs k times in arr, if there are multiple answers, return any of them\n    \"\"\"\n    # if k < 1 or arr is None or len(arr) == 0:\n    #     return None\n\n    # count = defaultdict(int)\n    # for i in arr:\n    #     count[i] += 1\n\n    # for i in arr:\n    #     if count[i] == k:\n    #         return i\n\n    # return None\n\n    if arr is None or len(arr) == 0:\n        return None\n\n    count = defaultdict(int)\n    for i in arr:\n        count[i] += 1\n\n    for i in arr:\n        if count[i] == k:\n            return i\n\n    return None\n\n\nprint(first_occurence([1, 1, 2, 2, 2, 2, 3, 3, 3], 2))\nprint(first_occurence([1, 1, 2, 2, 2, 2, 3, 3, 3], 3))\nprint(first_occurence([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 1))\nprint(first_occurence([1, 1, 2, 2, 2, 2, 3, 3, 3], 4))\nprint(first_occurence([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 6))"
    },
    {
      "rank": 48,
      "score": 8.0,
      "candidate": "from collections import defaultdict\n\n\ndef first_occurence_k_times(array, k):\n    \"\"\"\n    This function takes in an array and a number k as inputs and\n    returns the first element occurring k times in the array.\n    \"\"\"\n    count_dict = defaultdict(int)\n    for num in array:\n        count_dict[num] += 1\n\n    for key in count_dict:\n        if count_dict[key] == k:\n            return key\n\n\ndef main():\n    array = [1, 2, 2, 3, 3, 3, 4, 4, 4, 4]\n    k = 3\n    print(\"The first element occurring {} times in the array is {}\".format(k, first_occurence_k_times(array, k)))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 49,
      "score": 8.0,
      "candidate": "from collections import Counter\n\n\ndef find_first_occurring_k_times(arr, k):\n    \"\"\"\n    :param arr: input array\n    :param k: number of occurrences\n    :return: first element occurring k times\n    \"\"\"\n    if not arr:\n        return None\n    count = Counter(arr)\n    for num in count:\n        if count[num] == k:\n            return num\n    return None\n\n\ndef main():\n    arr = [1, 2, 3, 4, 5, 3, 6, 6, 6, 2, 4, 1, 5]\n    print(\"First element occurring 2 times: \" + str(find_first_occurring_k_times(arr, 2)))\n    print(\"First element occurring 3 times: \" + str(find_first_occurring_k_times(arr, 3)))\n    print(\"First element occurring 4 times: \" + str(find_first_occurring_k_times(arr, 4)))\n    print(\"First element occurring 5 times: \" + str(find_first_occurring_k_times(arr, 5)))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 50,
      "score": 8.0,
      "candidate": "from collections import Counter\n\n\ndef first_element_k_times(array, k):\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(n)\n    \"\"\"\n    return Counter(array).most_common(1)[0][0]\n\n\nprint(first_element_k_times([1, 2, 3, 4, 5, 4, 4, 2, 2, 2], 2))"
    },
    {
      "rank": 51,
      "score": 8.0,
      "candidate": "def first_k_times(arr, k):\n    # hashmap\n    freq_map = {}\n    for element in arr:\n        if element in freq_map:\n            freq_map[element] += 1\n        else:\n            freq_map[element] = 1\n\n    for key, value in freq_map.items():\n        if value == k:\n            return key\n\n    return -1\n\n\nprint(first_k_times([1, 1, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,"
    },
    {
      "rank": 52,
      "score": 8.0,
      "candidate": "from collections import Counter\n\n\ndef first_occurence_k_times(arr, k):\n    # The Counter object is a subclass of the dict object, which means that it inherits all the methods and functionality of a dictionary.\n    # The Counter object is a dictionary that stores the counts of the elements in a sequence.\n\n    # count = Counter(arr)\n    # for key, value in count.items():\n    #     if value == k:\n    #         return key\n\n    # count = dict(Counter(arr))\n    # for key, value in count.items():\n    #     if value == k:\n    #         return key\n\n    # count = Counter(arr)\n    # for key in count:\n    #     if count[key] == k:\n    #         return key\n\n    # count = dict(Counter(arr))\n    # for key in count:\n    #     if count[key] == k:\n    #         return key\n\n    count = Counter(arr)\n    for i in count:\n        if count[i] == k:\n            return i\n\n\nif __name__ == \"__main__\":\n    print(first_occurence_k_times([1, 2, 3, 4, 2, 3, 2, 5], 2))"
    },
    {
      "rank": 53,
      "score": 8.0,
      "candidate": "def first_occurrence(array, k):\n    \"\"\"\n    Return the first element that occurs k times in a given array.\n    \"\"\"\n    occurence_count = {}\n    for value in array:\n        if value in occurence_count:\n            occurence_count[value] += 1\n        else:\n            occurence_count[value] = 1\n\n    for key, value in occurence_count.items():\n        if value == k:\n            return key\n\n    return None\n\n\ndef test_first_occurrence():\n    \"\"\"\n    Tests for first_occurrence\n    \"\"\"\n    assert first_occurrence([1, 2, 2, 2, 3, 3, 3, 4, 5, 5], 2) == 2\n    assert first_occurrence([1, 1, 2, 2, 3, 3, 4, 5, 5], 2) == 1\n    assert first_occurrence([1, 1, 2, 4, 4, 4, 5, 5], 2) == None\n    assert first_occurrence([1, 1, 2, 2, 2, 2, 3, 3], 2) == 2\n\nif __name__ == \"__main__\":\n    test_first_occurrence()"
    },
    {
      "rank": 54,
      "score": 8.0,
      "candidate": "def first_k_occurence(arr, k):\n    dict_count = {}\n    for i in arr:\n        if i in dict_count:\n            dict_count[i] += 1\n        else:\n            dict_count[i] = 1\n    for key, value in dict_count.items():\n        if value == k:\n            return key\n    return -1\n\nif __name__ == \"__main__\":\n    print(first_k_occurence([1,2,3,4,2,5,2,2,2,2,1,2,3,4,5,6,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,"
    },
    {
      "rank": 55,
      "score": 8.0,
      "candidate": "from collections import Counter\n\n\ndef first_occurence_k_times(lst, k):\n    counter = Counter(lst)\n    return counter.most_common()[0][0]\n\n\nif __name__ == \"__main__\":\n    lst = [1, 2, 2, 3, 3, 3, 4, 5, 6, 7, 7, 7, 7, 8, 9, 9, 9, 9, 10]\n    print(first_occurence_k_times(lst, 3))"
    },
    {
      "rank": 56,
      "score": 8.0,
      "candidate": "def first_element_occurrence(arr: list, k: int) -> int:\n    \"\"\"\n    >>> first_element_occurrence([1,2,3,2,4,3,1,5,3,2,6], 3)\n    3\n    \"\"\"\n    # first step is to create a frequency table for all elements in the array\n    frequency_table = {}\n    for item in arr:\n        if item not in frequency_table:\n            frequency_table[item] = 1\n        else:\n            frequency_table[item] += 1\n\n    # next step is to find the first element occurring k times in the frequency table\n    for key in frequency_table:\n        if frequency_table[key] == k:\n            return key\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 57,
      "score": 8.0,
      "candidate": "def first_occurence_k_times(array, k):\n    \"\"\"\n    We can solve this problem in two steps\n    1. Find the frequency of each element in the array\n    2. Find the element which is repeated k times\n    \"\"\"\n    freq = {}\n    for item in array:\n        if item in freq:\n            freq[item] += 1\n        else:\n            freq[item] = 1\n\n    for key, value in freq.items():\n        if value == k:\n            return key\n\n    return None\n\nif __name__ == \"__main__\":\n    arr = [1, 2, 3, 4, 4, 4, 4, 2, 2, 2]\n    k = 3\n    print(first_occurence_k_times(arr, k))"
    },
    {
      "rank": 58,
      "score": 8.0,
      "candidate": "from collections import defaultdict\n\n\ndef first_occuring_k_times(arr, k):\n    \"\"\"\n    :param arr: list of integers\n    :param k: int\n    :return: first element occurring k times\n    :rtype: int\n    \"\"\"\n    if len(arr) == 0:\n        return None\n    counter = defaultdict(int)\n    for i in arr:\n        counter[i] += 1\n        if counter[i] == k:\n            return i\n\n\nif __name__ == \"__main__\":\n    print(first_occuring_k_times([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3))"
    },
    {
      "rank": 59,
      "score": 8.0,
      "candidate": "def first_occurence(a, k):\n    d = {}\n    for i in a:\n        if i not in d:\n            d[i] = 1\n        else:\n            d[i] += 1\n\n    for i in d:\n        if d[i] == k:\n            return i\n    return -1\n\n\na = [2, 4, 6, 1, 2, 6, 5, 2]\nk = 2\nprint(first_occurence(a, k))"
    },
    {
      "rank": 60,
      "score": 8.0,
      "candidate": "from collections import Counter\n\n\ndef find_first_occurence(arr, k):\n    count_dict = Counter(arr)\n    for key, value in count_dict.items():\n        if value == k:\n            return key\n\n    return -1\n\n\ndef main():\n    arr = [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5]\n    k = 2\n    print(find_first_occurence(arr, k))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 61,
      "score": 8.0,
      "candidate": "def first_occurence(arr, k):\n    d = dict()\n    for i in arr:\n        if i not in d:\n            d[i] = 1\n        else:\n            d[i] += 1\n\n    for key in d:\n        if d[key] == k:\n            return key\n\nprint(first_occurence([1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5], 2))"
    },
    {
      "rank": 62,
      "score": 8.0,
      "candidate": "def first_occuring_k_times(arr, k):\n    \"\"\"\n    :param arr: list\n    :param k: int\n    :return: first element occurring k times in a given array\n    \"\"\"\n    if k > len(arr) or k < 0:\n        return None\n    d = dict()\n    for num in arr:\n        if num in d:\n            d[num] += 1\n        else:\n            d[num] = 1\n    for key, value in d.items():\n        if value == k:\n            return key\n    return None"
    },
    {
      "rank": 63,
      "score": 8.0,
      "candidate": "def first_occurence(arr, k):\n    \"\"\"\n    Find the first element occurring k times in a given array\n    :param arr: List[int]\n    :param k: int\n    :return: int\n    \"\"\"\n    return sorted(arr)[k-1]\n\n\nprint(first_occurence([1, 2, 3, 4, 5, 6, 6, 6, 6, 6, 7, 8, 9, 10], 6))"
    },
    {
      "rank": 64,
      "score": 8.0,
      "candidate": "def first_k_times(k, arr):\n    count = {}\n    for item in arr:\n        if item in count:\n            count[item] += 1\n        else:\n            count[item] = 1\n\n    for key, value in count.items():\n        if value == k:\n            return key\n\n\nprint(first_k_times(3, [1, 1, 2, 2, 2, 3, 3, 3]))"
    },
    {
      "rank": 65,
      "score": 8.0,
      "candidate": "from collections import Counter\n\n\ndef find_first_occurence(array, k):\n    if len(array) < k:\n        return None\n    counter = Counter(array)\n    for key, value in counter.items():\n        if value == k:\n            return key\n    return None"
    },
    {
      "rank": 66,
      "score": 8.0,
      "candidate": "def find_k_element(arr, k):\n    mp = {}\n    for i in arr:\n        if i in mp:\n            mp[i] += 1\n        else:\n            mp[i] = 1\n\n    for key, value in mp.items():\n        if value == k:\n            return key\n\n\ndef find_k_element_2(arr, k):\n    mp = {}\n    for i in arr:\n        if i not in mp:\n            mp[i] = 1\n        else:\n            mp[i] += 1\n\n    for key, value in mp.items():\n        if value == k:\n            return key\n\n\nprint(find_k_element([1, 1, 2, 3, 3, 3, 4, 4, 4, 4], 3))\nprint(find_k_element_2([1, 1, 2, 3, 3, 3, 4, 4, 4, 4], 3))"
    },
    {
      "rank": 67,
      "score": 8.0,
      "candidate": "from collections import Counter\n\n\ndef first_occurence_k_times(array, k):\n    \"\"\"\n    First occurence k times.\n\n    Args:\n        array (list): List of integers\n        k (int): Occurance count of the number\n\n    Returns:\n        int: First number which occurs k times\n    \"\"\"\n    c = Counter(array)\n    for i in c:\n        if c[i] == k:\n            return i\n\n\nif __name__ == \"__main__\":\n    print(first_occurence_k_times([1, 2, 3, 1, 4, 5, 1, 6, 5, 6, 5, 6, 7], 5))"
    },
    {
      "rank": 68,
      "score": 1.0,
      "candidate": "def find_first_occurring_k_times(array, k):\n    \"\"\"\n    :param array: list - a list of integers\n    :param k: int - an integer representing the first number that should occur k times\n    :return: int - an integer representing the first number that occurs k times\n    \"\"\"\n    # Time complexity: O(n)\n    # Space complexity: O(n)\n\n    # create a dictionary to store the frequency of elements in the array\n    # initialize it with 0, so that we can increment it later\n    freq = {elem: 0 for elem in array}\n\n    # iterate over the array\n    for elem in array:\n        # increment the frequency of the element\n        freq[elem] += 1\n\n    # iterate over the dictionary\n    for elem, count in freq.items():\n        # check if the frequency is k\n        if count == k:\n            # return the element\n            return elem\n\n    # if we get here, the number does not occur k times\n    return -1\n\n\ndef test_function(test_case):\n    array = test_case[0]\n    k = test_case[1]\n    solution = test_case[2]\n    output = find_first_occurring_k_times(array, k)\n    if output == solution:\n        print(\"Pass\")\n    else:\n        print(\"Fail\")\n\n\n# test 1\narray = [1, 2, 3, 4, 5, 4, 4, 4, 2, 2, 2, 4, 2, 4, 4, 2, 2, 2]\nk = 4\nsolution = 4\ntest_case = [array, k, solution]\ntest_function(test_case)\n\n# test 2\narray = [1, 2, 3, 4, 5, 4, 4, 4, 2, 2, 2, 4, 2, 4, 4, 2, 2, 2]\nk = 2\nsolution = 2\ntest_case = [array, k, solution]\ntest_function"
    },
    {
      "rank": 69,
      "score": 1.0,
      "candidate": "from collections import Counter\n\ndef find_first_occurrence(arr, k):\n    \"\"\"\n    :param: arr - input array\n    :param: k - find first element occurring k times\n    return: first element\n    \"\"\"\n    count = Counter(arr)\n    return list(count.keys())[list(count.values()).index(k)]\n\n\ndef test_function(test_case):\n    arr = test_case[0]\n    k = test_case[1]\n    solution = test_case[2]\n    output = find_first_occurrence(arr, k)\n    \n    if output == solution:\n        print(\"Pass\")\n    else:\n        print(\"Fail\")\n\narr = [1, 2, 3, 4, 2, 3, 2, 3, 2, 3, 4, 5]\nk = 2\nsolution = 3\ntest_case = [arr, k, solution]\ntest_function(test_case)\n\narr = [1, 1, 1, 2, 2, 3]\nk = 3\nsolution = 1\ntest_case = [arr, k, solution]\ntest_function(test_case)\n\narr = [1, 2, 3, 3, 3, 4, 4, 4]\nk = 3\nsolution = 3\ntest_case = [arr, k, solution]\ntest_function(test_case)\n\narr = [1, 1, 2, 2, 2, 2]\nk = 2\nsolution = 2\ntest_case = [arr, k, solution]\ntest_function(test_case)"
    },
    {
      "rank": 70,
      "score": 1.0,
      "candidate": "def first_element_occurrence(arr, k):\n    # TODO: Write your solution here\n    # arr.sort()\n    # for i in range(len(arr)):\n    #     if arr[i] == arr[i + 1]:\n    #         return arr[i]\n    #     else:\n    #         return -1\n\n    # arr.sort()\n    # for i in range(len(arr)):\n    #     if arr[i] == arr[i + 1]:\n    #         return arr[i]\n    #     else:\n    #         return -1\n    #\n    # return -1\n\n    # arr.sort()\n    # for i in range(len(arr)):\n    #     if arr[i] == arr[i + 1]:\n    #         return arr[i]\n    #     else:\n    #         return -1\n\n    # arr.sort()\n    # for i in range(len(arr)):\n    #     if arr[i] == arr[i + 1]:\n    #         return arr[i]\n    #     else:\n    #         return -1\n\n    # arr.sort()\n    # for i in range(len(arr)):\n    #     if arr[i] == arr[i + 1]:\n    #         return arr[i]\n    #     else:\n    #         return -1\n    #\n    # return -1\n\n    # arr.sort()\n    # for i in range(len(arr)):\n    #     if arr[i] == arr[i + 1]:\n    #         return arr[i]\n    #     else:\n    #         return -1\n    #\n    # return -1\n\n    # arr.sort()\n    # for i in range(len(arr)):\n    #     if arr[i] == arr[i + 1]:\n    #         return arr[i]\n    #     else:\n    #         return -1\n    #\n    # return -1\n\n    # arr.sort()\n    # for i in range(len(arr)):\n    #     if arr[i] == arr[i + 1]:\n    #"
    },
    {
      "rank": 71,
      "score": 1.0,
      "candidate": "from collections import Counter\n\n\ndef first_occurence(arr, k):\n    freq_map = Counter(arr)\n    for key, value in freq_map.items():\n        if value == k:\n            return key\n\n\ndef main():\n    arr = [1, 2, 3, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]\n    k = 2\n    print(first_occurence(arr, k))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 72,
      "score": 1.0,
      "candidate": "from collections import defaultdict\n\n\ndef first_occurence_k_times(input_list, k):\n    \"\"\"\n    :param input_list: list of integers\n    :param k: number of occurrences\n    :return: first element occurring k times\n    \"\"\"\n    if not input_list or len(input_list) == 0:\n        return None\n    if k <= 0:\n        return None\n\n    hash_map = defaultdict(int)\n\n    for i in input_list:\n        hash_map[i] += 1\n\n    for i in hash_map.keys():\n        if hash_map[i] == k:\n            return i\n\n    return None\n\n\ndef test_function(test_case):\n    input_list = test_case[0]\n    k = test_case[1]\n    solution = test_case[2]\n    output = first_occurence_k_times(input_list, k)\n\n    if output == solution:\n        print(\"Pass\")\n    else:\n        print(\"Fail\")\n\n\ntest_function([[2, 1, 2, 3, 2, 5, 4, 2, 3, 3], 3, 2])\ntest_function([[2, 2, 3, 2], 2, 2])\ntest_function([[1, 2, 2, 3, 2, 5, 4, 2, 3, 3], 3, 1])\ntest_function([[2, 2, 3, 2], 4, None])\ntest_function([[2, 2, 3, 2], 0, None])\ntest_function([[2, 2, 3, 2], -1, None])"
    },
    {
      "rank": 73,
      "score": 1.0,
      "candidate": "from collections import Counter\n\n\ndef find_first_occurring_k_times(arr, k):\n    if not arr:\n        return None\n\n    counter = Counter(arr)\n    return [k for k, v in counter.items() if v == k][0]\n\n\ndef test_find_first_occurring_k_times():\n    assert find_first_occurring_k_times([1, 2, 3, 4, 2, 3, 4, 5, 2], 2) == 2\n    assert find_first_occurring_k_times([1, 2, 3, 4, 2, 3, 4, 5, 2], 3) == 4\n\n\nif __name__ == \"__main__\":\n    test_find_first_occurring_k_times()"
    },
    {
      "rank": 74,
      "score": 1.0,
      "candidate": "from collections import Counter\n\n\ndef first_occuring_k_times(arr, k):\n    \"\"\"\n    This function finds the first element occurring k times in a given array.\n\n    >>> first_occuring_k_times([1, 2, 2, 2, 3, 4, 5, 5], 2)\n    2\n\n    >>> first_occuring_k_times([1, 2, 2, 2, 3, 4, 5, 5], 3)\n    5\n\n    >>> first_occuring_k_times([1, 2, 2, 2, 3, 4, 5, 5], 4)\n    -1\n\n    >>> first_occuring_k_times([1, 1, 1, 1, 1, 1, 1, 1, 1, 1], 1)\n    1\n\n    >>> first_occuring_k_times([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2)\n    -1\n\n    >>> first_occuring_k_times([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3)\n    -1\n\n    >>> first_occuring_k_times([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 4)\n    -1\n\n    \"\"\"\n    if not arr or k <= 0:\n        return -1\n    if k > len(arr):\n        return -1\n\n    # To store the count of each element\n    count = {}\n    # To store the first element occurring k times\n    first_element = -1\n\n    # Traverse the array\n    for element in arr:\n        if element not in count:\n            count[element] = 1\n        else:\n            count[element] += 1\n\n        if count[element] == k:\n            first_element = element\n            break"
    },
    {
      "rank": 75,
      "score": 1.0,
      "candidate": "def first_occurrence(arr, k):\n    \"\"\"\n    :param: arr - input array\n    :param: k - integer\n    return: first integer occurring k times\n    \"\"\"\n    # if arr is None or len(arr) == 0 or k <= 0:\n    #     return None\n\n    # dict_freq = {}\n    # for i in arr:\n    #     if i not in dict_freq:\n    #         dict_freq[i] = 1\n    #     else:\n    #         dict_freq[i] += 1\n\n    # for i in dict_freq:\n    #     if dict_freq[i] == k:\n    #         return i\n\n    # return None\n\n    if arr is None or len(arr) == 0 or k <= 0:\n        return None\n\n    dict_freq = {}\n    for i in arr:\n        if i not in dict_freq:\n            dict_freq[i] = 1\n        else:\n            dict_freq[i] += 1\n\n    return next((i for i in dict_freq if dict_freq[i] == k), None)\n\n\ndef test_function(test_case):\n    arr = test_case[0]\n    k = test_case[1]\n    solution = test_case[2]\n    output = first_occurrence(arr, k)\n    \n    if output == solution:\n        print(\"Pass\")\n    else:\n        print(\"Fail\")\n\narr = [1, 2, 3, 1, 4, 5, 2]\nk = 3\nsolution = 1\ntest_case = [arr, k, solution]\ntest_function(test_case)\n\narr = [1, 2, 3, 4, 5, 6, 7]\nk = 10\nsolution = None\ntest_case = [arr, k, solution]\ntest_function(test_case)"
    },
    {
      "rank": 76,
      "score": 1.0,
      "candidate": "from collections import Counter\n\n\ndef first_occuring_k_times(arr, k):\n    return Counter(arr).most_common(1)[0][0]\n\n\ndef test_first_occuring_k_times():\n    \"\"\"Test for first_occuring_k_times function.\"\"\"\n    assert first_occuring_k_times([1, 2, 3, 4, 2, 3, 1, 3, 2, 1], 3) == 3\n    assert first_occuring_k_times([1, 1, 1, 2, 2, 3, 3, 3, 3], 2) == 1\n    assert first_occuring_k_times([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2) == -1\n\n\nif __name__ == \"__main__\":\n    test_first_occuring_k_times()"
    },
    {
      "rank": 77,
      "score": 1.0,
      "candidate": "from collections import defaultdict\n\ndef first_occ(nums, k):\n    \"\"\"\n    :param: nums - input array\n    :param: k - find first element occurring k times\n    return - first element occurring k times, if k is not found return None\n    \"\"\"\n    if k > len(nums):\n        return None\n\n    count = defaultdict(int)\n\n    for num in nums:\n        count[num] += 1\n\n    for num in count:\n        if count[num] == k:\n            return num\n\n    return None\n\n\ndef test_function(test_case):\n    nums = test_case[0]\n    k = test_case[1]\n    solution = test_case[2]\n    output = first_occ(nums, k)\n    \n    if output == solution:\n        print(\"Pass\")\n    else:\n        print(\"Fail\")\n\nnums = [1, 2, 3, 4, 5]\nk = 1\nsolution = 1\n\ntest_case = [nums, k, solution]\ntest_function(test_case)\n\nnums = [1, 2, 3, 1, 1, 1, 1, 1]\nk = 2\nsolution = 1\n\ntest_case = [nums, k, solution]\ntest_function(test_case)\n\nnums = [1, 2, 3, 4, 5, 6, 7]\nk = 3\nsolution = None\n\ntest_case = [nums, k, solution]\ntest_function(test_case)\n\nnums = [1, 1, 1, 3, 3, 2, 2, 2]\nk = 3\nsolution = 1\n\ntest_case = [nums, k, solution]\ntest_function(test_case)\n\nnums = [1, 1, 2, 2, 3]\nk = 1\nsolution = 1\n\ntest_case = [nums, k, solution]\ntest_function(test_case)"
    },
    {
      "rank": 78,
      "score": 1.0,
      "candidate": "from collections import defaultdict\n\n\ndef first_occurence_k_times(arr, k):\n    \"\"\"\n    :param: arr - input array\n    :param: k - first element occurring k times\n    return: element\n    \"\"\"\n    if k > len(arr) or k <= 0:\n        return -1\n\n    count = defaultdict(int)\n\n    for element in arr:\n        count[element] += 1\n\n    for element in arr:\n        if count[element] == k:\n            return element\n\n    return -1\n\n\ndef test_function(test_case):\n    arr = test_case[0]\n    k = test_case[1]\n    solution = test_case[2]\n    output = first_occurence_k_times(arr, k)\n\n    if output == solution:\n        print(\"Pass\")\n    else:\n        print(\"Fail\")\n\n\narr = [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4]\nk = 3\nsolution = 1\ntest_case = [arr, k, solution]\ntest_function(test_case)\n\narr = [1, 1, 1, 3, 3, 3, 2, 2, 2]\nk = 2\nsolution = 1\ntest_case = [arr, k, solution]\ntest_function(test_case)\n\narr = [1, 2, 3, 1, 1, 1, 1, 1, 2, 2, 2]\nk = 2\nsolution = 2\ntest_case = [arr, k, solution]\ntest_function(test_case)"
    },
    {
      "rank": 79,
      "score": 1.0,
      "candidate": "def find_first_occuring_k_times(array, k):\n    if not array or k < 1:\n        return -1\n\n    hash_map = {}\n\n    for element in array:\n        hash_map[element] = hash_map.get(element, 0) + 1\n\n    for key in hash_map:\n        if hash_map[key] == k:\n            return key\n\n    return -1\n\n\nprint(find_first_occuring_k_times([1, 2, 3, 2, 4, 2, 5, 2, 3, 2, 6, 2], 2))"
    },
    {
      "rank": 80,
      "score": 1.0,
      "candidate": "from collections import Counter\n\ndef find_first_element_occurence_k_times(arr, k):\n    \"\"\"\n    :param: arr - input array\n    :param: k - number of times an element should occur\n    return: the first element in arr which occurs k times\n    \"\"\"\n    counter = Counter(arr)\n\n    for key in counter:\n        if counter[key] == k:\n            return key\n\n    return -1\n\ndef test_function(test_case):\n    arr = test_case[0]\n    k = test_case[1]\n    solution = test_case[2]\n    output = find_first_element_occurence_k_times(arr, k)\n    \n    if output == solution:\n        print(\"Pass\")\n    else:\n        print(\"Fail\")\n\narr = [1, 2, 3, 4, 5, 4, 3, 2, 1, 5, 6, 2]\nk = 3\nsolution = 4\n\ntest_case = [arr, k, solution]\ntest_function(test_case)\n\narr = [1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4, 5, 5, 5]\nk = 4\nsolution = 1\n\ntest_case = [arr, k, solution]\ntest_function(test_case)\n\narr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nk = 1\nsolution = -1\n\ntest_case = [arr, k, solution]\ntest_function(test_case)"
    },
    {
      "rank": 81,
      "score": 1.0,
      "candidate": "from collections import Counter\nfrom typing import List\n\n\ndef first_occurence(array: List[int], k: int) -> int:\n    \"\"\"\n    First occurence of a number in the array\n    >>> first_occurence([1, 2, 3, 2, 3, 5, 2], 3)\n    3\n    \"\"\"\n    return Counter(array).most_common(k)[-1][0]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 82,
      "score": 1.0,
      "candidate": "def first_occurrence(arr, k):\n    \"\"\"\n    Find the first element occurring k times in a given array\n\n    Args:\n       arr(array): Input array\n       k(int): Input number\n\n    Returns:\n       int: First element occurring k times in a given array\n    \"\"\"\n    if k > len(arr):\n        return -1\n    count = 0\n    for i in range(0, len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] == arr[j]:\n                count += 1\n                if count == k:\n                    return arr[i]\n    return -1\n\n\ndef test_function(test_case):\n    arr = test_case[0]\n    k = test_case[1]\n    solution = test_case[2]\n    output = first_occurrence(arr, k)\n    \n    if output == solution:\n        print(\"Pass\")\n    else:\n        print(\"Fail\")\n\narr = [2, 3, 4, 2, 4, 4, 2, 2, 4]\nk = 4\nsolution = 2\ntest_case = [arr, k, solution]\ntest_function(test_case)"
    },
    {
      "rank": 83,
      "score": 1.0,
      "candidate": "from collections import Counter\n\n\ndef first_occurence_k_times(array, k):\n    c = Counter(array)\n\n    for key, value in c.items():\n        if value == k:\n            return key\n\n\narray = [1, 2, 2, 3, 3, 3, 4, 4, 4, 4]\nk = 2\nprint(first_occurence_k_times(array, k))"
    },
    {
      "rank": 84,
      "score": 1.0,
      "candidate": "from collections import Counter\n\n\ndef find_element_occurrence(input_list, k):\n    \"\"\"\n    Find the first element occurring k times in a given array.\n    Args:\n       input_list(array): Input array to find the element\n       k(int): the number of times element occurs in the array\n    Returns:\n       int: First element occurring k times\n    \"\"\"\n    input_list_count = Counter(input_list)\n    for key, value in input_list_count.items():\n        if value == k:\n            return key\n    return None\n\n\ndef test_function(test_case):\n    input_list = test_case[0]\n    k = test_case[1]\n    solution = test_case[2]\n    output = find_element_occurrence(input_list, k)\n    if output == solution:\n        print(\"Pass\")\n    else:\n        print(\"Fail\")\n\n\ntest_function([[2, 2, 3, 3, 2], 2, 2])\ntest_function([[2, 4, 6, 8, 10, 12, 14, 2, 4, 6, 8, 10, 12, 14], 2, 2])\ntest_function([[2, 4, 6, 8, 10, 12, 14, 2, 4, 6, 8, 10, 12, 14], 6, 2])\ntest_function([[2, 2, 2, 2, 2, 2, 2, 2, 2, 2], 10, None])\ntest_function([[2, 2, 2, 2, 2, 2, 2, 2, 2, 2], 2, 2])\ntest_function([[2, 2, 2, 2, 2, 2, 2, 2, 2, 2], 3, 2])\ntest_function([[2, 2, 2, 2, 2, 2,"
    },
    {
      "rank": 85,
      "score": 1.0,
      "candidate": "def first_occurence_k_times(arr, k):\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(1)\n    \"\"\"\n    # if k is 1, return the first element\n    if k == 1:\n        return arr[0]\n\n    # initialize the first element to be the first element in the array\n    first_element = arr[0]\n    # initialize a count variable\n    count = 1\n    # iterate through the array\n    for i in range(1, len(arr)):\n        # if the current element is the same as the first element\n        if arr[i] == first_element:\n            # increment the count\n            count += 1\n        else:\n            # set the first element to be the current element\n            first_element = arr[i]\n            # reset the count to 1\n            count = 1\n        # if the count is equal to k, return the first element\n        if count == k:\n            return first_element\n    return None\n\nif __name__ == \"__main__\":\n\n    # Test Case 1\n    print(first_occurence_k_times([1, 2, 2, 2, 2, 3, 4, 5, 6, 6, 6, 6, 7, 8, 8, 8], 2))\n\n    # Test Case 2\n    print(first_occurence_k_times([1, 2, 2, 2, 2, 3, 4, 5, 6, 6, 6, 6, 7, 8, 8, 8], 1))\n\n    # Test Case 3\n    print(first_occurence_k_times([1, 2, 2, 2, 2, 3, 4, 5, 6, 6, 6, 6, 7, 8, 8, 8], 4))\n\n    # Test Case 4\n    print(first_occurence_k_times([1, 2, 2, 2, 2, 3, 4, 5"
    },
    {
      "rank": 86,
      "score": 1.0,
      "candidate": "from collections import defaultdict\n\n\ndef first_occuring_k_times(arr, k):\n    \"\"\"\n    :param: arr - input array\n    :param: k - integer representing number of times an element should occur\n    TODO: complete this function and return the first element that occurs k times\n    \"\"\"\n    # defaultdict(list) returns an empty list if key is not found\n    # defaultdict(int) returns 0 if key is not found\n    freq_dict = defaultdict(int)\n    for elem in arr:\n        freq_dict[elem] += 1\n    for key, val in freq_dict.items():\n        if val == k:\n            return key\n\n\ndef test_function(test_case):\n    arr = test_case[0]\n    k = test_case[1]\n    solution = test_case[2]\n    output = first_occuring_k_times(arr, k)\n    if output == solution:\n        print(\"Pass\")\n    else:\n        print(\"Fail\")\n\n\ntest_function([[20, 1, -1], 2, 1])\ntest_function([[20, 1, 1, 1, 1], 2, 1])\ntest_function([[20, 1, 1, 2, 1, 2], 2, 2])\ntest_function([[20, 1, 1, 2, 1, 2], 3, None])\ntest_function([[], 3, None])\ntest_function([[1], 1, 1])\ntest_function([[1, 1, 2, 2, 3, 3, 4, 4, 4], 2, 4])\ntest_function([[1, 1, 2, 2, 3, 3, 4, 4, 4], 3, 3])\ntest_function([[1, 1, 2, 2, 3, 3, 4, 4, 4], 4, 4])\ntest_function([[1, 1, 2, 2, 3,"
    },
    {
      "rank": 87,
      "score": 1.0,
      "candidate": "from collections import Counter\n\n\ndef first_occurrence_k_times(arr, k):\n    return Counter(arr).most_common(1)[0][0]\n\n\ndef test_first_occurrence_k_times():\n    \"\"\"Test for first_occurrence_k_times function.\"\"\"\n    assert first_occurrence_k_times([1, 2, 3, 4, 5, 5, 2, 4, 2, 2], 2) == 2\n    assert first_occurrence_k_times([1, 2, 3, 4, 5, 5, 2, 4, 2, 2], 3) == 5\n    assert first_occurrence_k_times([1, 2, 3, 4, 5, 5, 2, 4, 2, 2], 4) == 4\n    assert first_occurrence_k_times([1, 2, 3, 4, 5, 5, 2, 4, 2, 2], 5) == 1\n\n\nif __name__ == \"__main__\":\n    test_first_occurrence_k_times()"
    },
    {
      "rank": 88,
      "score": 1.0,
      "candidate": "from collections import Counter\nfrom typing import List\n\n\ndef find_first_occuring_k_times(arr: List[int], k: int) -> int:\n    \"\"\"\n    time complexicity: O(n)\n    space complexicity: O(n)\n    \"\"\"\n    counter = Counter(arr)\n\n    for key, value in counter.items():\n        if value == k:\n            return key\n\n    return None\n\n\nif __name__ == \"__main__\":\n    assert find_first_occuring_k_times([1, 2, 3, 4, 2, 3, 1, 3, 1, 3], 2) == 3"
    },
    {
      "rank": 89,
      "score": 1.0,
      "candidate": "from collections import defaultdict\n\n\ndef find_first_occurence(arr, k):\n    freq = defaultdict(int)\n    for item in arr:\n        freq[item] += 1\n        if freq[item] == k:\n            return item\n    return None\n\n\ndef main():\n    arr = [1, 2, 3, 1, 3, 4, 5, 2, 1, 3, 4, 5, 6, 7, 8, 9, 9, 9, 9]\n    assert find_first_occurence(arr, 3) == 3\n    assert find_first_occurence(arr, 4) is None\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 90,
      "score": 1.0,
      "candidate": "from collections import Counter\n\n\ndef find_first_occurance(arr, k):\n    if len(arr) < k:\n        return -1\n    c = Counter(arr)\n    for i in arr:\n        if c[i] == k:\n            return i\n    return -1\n\n\ndef main():\n    arr = [1, 2, 2, 3, 3, 3, 4, 4, 4, 4]\n    k = 3\n    print(find_first_occurance(arr, k))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 91,
      "score": 1.0,
      "candidate": "from collections import Counter\n\n\ndef first_occurence(arr, k):\n    c = Counter(arr)\n    for i in c:\n        if c[i] == k:\n            return i\n\n\ndef main():\n    arr = [1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2, 3, 4, 1]\n    k = 2\n    print(first_occurence(arr, k))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 92,
      "score": 1.0,
      "candidate": "from collections import defaultdict\n\ndef find_element_occurrence(arr, k):\n    \"\"\"\n    :param arr: list - A list of integers\n    :param k: int - An integer\n    :return: int\n    \"\"\"\n    # return find_element_occurrence_dict(arr, k)\n    return find_element_occurrence_counter(arr, k)\n\n\ndef find_element_occurrence_dict(arr, k):\n    # 1) find a way to count the number of occurrences of each element in the array\n    # 2) create a dict with the keys being each element and the values being the number of occurrences\n    # 3) find the first element in the dict with a value of k\n    # 4) return the key\n    # 5) if no key is found return -1\n\n    # create a dict\n    my_dict = defaultdict(int)\n\n    # loop through the list\n    for item in arr:\n        my_dict[item] += 1\n\n    for key, value in my_dict.items():\n        if value == k:\n            return key\n\n    return -1\n\n\ndef find_element_occurrence_counter(arr, k):\n    # 1) find a way to count the number of occurrences of each element in the array\n    # 2) create a counter\n    # 3) loop through the list\n    # 4) if the counter value is k return the item\n    # 5) if no item is found return -1\n\n    from collections import Counter\n\n    counter = Counter(arr)\n\n    for item, count in counter.items():\n        if count == k:\n            return item\n\n    return -1\n\n\n\nprint(find_element_occurrence([1, 2, 3, 4, 5, 6, 6, 6, 7, 8, 9], 3))\nprint(find_element_occurrence([1, 2, 10, 10, 5, 6, 6, 6, 7, 8, 9], 1))\nprint(find_element_occurrence([1, 1, 2"
    },
    {
      "rank": 93,
      "score": 1.0,
      "candidate": "def first_occurence_k_times(arr, k):\n    # create a dictionary to store the frequency of the elements\n    freq = {}\n    # iterate over the array\n    for i in arr:\n        # if the element is already present in the dictionary, increment the count\n        if i in freq:\n            freq[i] += 1\n        # otherwise add the element to the dictionary and set the count to 1\n        else:\n            freq[i] = 1\n    # iterate over the dictionary\n    for i in freq:\n        # check if the element's frequency is equal to the given frequency\n        if freq[i] == k:\n            # return the element\n            return i\n\n\narr = [1, 2, 1, 1, 3, 2, 1, 1]\nk = 2\nprint(first_occurence_k_times(arr, k))"
    },
    {
      "rank": 94,
      "score": 1.0,
      "candidate": "def first_k_element(nums: list, k: int) -> int:\n    \"\"\"\n    >>> first_k_element([1, 1, 2, 2, 2, 3, 3, 3, 3], 2)\n    1\n    \"\"\"\n    count = {}\n\n    for n in nums:\n        if n not in count:\n            count[n] = 1\n        else:\n            count[n] += 1\n\n    for key, value in count.items():\n        if value == k:\n            return key\n\n\ndef first_k_element_1(nums: list, k: int) -> int:\n    \"\"\"\n    >>> first_k_element_1([1, 1, 2, 2, 2, 3, 3, 3, 3], 2)\n    1\n    \"\"\"\n    count = {}\n\n    for n in nums:\n        if n not in count:\n            count[n] = 1\n        else:\n            count[n] += 1\n\n    for key, value in count.items():\n        if value == k:\n            return key\n\n\ndef first_k_element_2(nums: list, k: int) -> int:\n    \"\"\"\n    >>> first_k_element_2([1, 1, 2, 2, 2, 3, 3, 3, 3], 2)\n    1\n    \"\"\"\n    count = {}\n\n    for n in nums:\n        if n not in count:\n            count[n] = 1\n        else:\n            count[n] += 1\n\n    for key, value in count.items():\n        if value == k:\n            return key\n\n\ndef first_k_element_3(nums: list, k: int) -> int:\n    \"\"\"\n    >>> first_k_element_3([1, 1, 2, 2, 2, 3, 3, 3, 3], 2)\n    1\n    \"\"\"\n    count = {}\n\n    for n in nums:\n        if n not in count:"
    },
    {
      "rank": 95,
      "score": 1.0,
      "candidate": "from collections import Counter\nfrom typing import List\n\n\ndef first_element_occuring_k_times(array: List, k: int) -> int:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(n)\n    \"\"\"\n\n    def count_freq(array: List) -> int:\n        counter = Counter(array)\n\n        for key in counter:\n            if counter[key] == k:\n                return key\n\n        return -1\n\n    return count_freq(array)\n\n\nif __name__ == \"__main__\":\n    assert first_element_occuring_k_times([1, 2, 3, 1, 1], 2) == 1\n    assert first_element_occuring_k_times([1, 1, 2, 2], 2) == 1\n    assert first_element_occuring_k_times([1, 2, 1, 2, 3, 1, 3, 1, 3], 2) == 1"
    },
    {
      "rank": 96,
      "score": 1.0,
      "candidate": "from collections import defaultdict\n\n\ndef find_first_occurrence(array, k):\n    \"\"\"\n    Finds the first occurrence of k in array.\n\n    :param array: The array to search in.\n    :type array: list\n    :param k: The number of times the element must occur.\n    :type k: int\n    :return: The first element that occurs k times.\n    :rtype: int\n    \"\"\"\n    if not array:\n        return None\n    freq = defaultdict(int)\n    for elem in array:\n        freq[elem] += 1\n    for key in freq:\n        if freq[key] == k:\n            return key\n    return None\n\n\ndef test_find_first_occurrence():\n    \"\"\"\n    >>> test_find_first_occurrence()\n    \"\"\"\n    assert find_first_occurrence([1, 1, 1, 1, 1, 2, 2, 2, 2, 3], 2) == 1\n    assert find_first_occurrence([1, 1, 2, 2, 3, 3, 4, 4, 5, 5], 4) == 4\n    assert find_first_occurrence([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 1) == 1\n    assert find_first_occurrence([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3) == 3\n    assert find_first_occurrence([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2) == 2\n    assert find_first_occurrence([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 4) == 4\n    assert find_first_occurrence([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 10"
    },
    {
      "rank": 97,
      "score": 1.0,
      "candidate": "def first_element(arr: list, k: int) -> int:\n    \"\"\"\n    >>> first_element([1, 2, 3, 1, 2, 3], 3)\n    3\n    >>> first_element([1, 1, 1, 2, 2, 3], 1)\n    1\n    >>> first_element([1, 2, 3, 4, 5], 1)\n    -1\n    >>> first_element([1, 1, 1, 2, 2, 3], 2)\n    2\n    >>> first_element([1, 1, 1, 2, 2, 3], 3)\n    -1\n    >>> first_element([1, 1, 1, 2, 2, 3], 0)\n    -1\n    \"\"\"\n\n    # 1. find the first element that occurs k times in the list\n    # 2. if there is no such element in the list, return -1\n    # 3. if there is, return the element\n\n    # 1. initialize a dict that will store the counts of the elements in the list\n    element_counts: dict = {}\n\n    for element in arr:\n        if element in element_counts:\n            element_counts[element] += 1\n        else:\n            element_counts[element] = 1\n\n    # 2. iterate through the dict to find the first element that occurs k times\n    for element in element_counts:\n        if element_counts[element] == k:\n            return element\n\n    # 3. if there is no such element, return -1\n    return -1\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 98,
      "score": 1.0,
      "candidate": "from collections import Counter\n\n\ndef find_first_occurrence(input_array, k):\n    \"\"\"\n    Find the first element occurring k times in a given array.\n    :param input_array: list of integers\n    :param k: integer\n    :return: first element occurring k times in a given array\n    >>> find_first_occurrence([1, 2, 3, 4, 1], 2)\n    1\n    >>> find_first_occurrence([1, 2, 3, 4, 1], 4)\n    -1\n    >>> find_first_occurrence([1, 2, 3, 4, 1], 0)\n    -1\n    \"\"\"\n    if not input_array:\n        return -1\n    count = Counter(input_array)\n    for i in input_array:\n        if count[i] == k:\n            return i\n    return -1\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 99,
      "score": 1.0,
      "candidate": "def first_k_times(arr, k):\n    \"\"\"\n    :param: arr - input array\n    :param: k - integer\n    return: first integer that occurs k times in arr\n    \"\"\"\n    count = {}\n    for i in arr:\n        if i in count:\n            count[i] += 1\n        else:\n            count[i] = 1\n\n    for key, value in count.items():\n        if value == k:\n            return key\n\n\ndef test_function(test_case):\n    arr = test_case[0]\n    k = test_case[1]\n    solution = test_case[2]\n    output = first_k_times(arr, k)\n    if output == solution:\n        print(\"Pass\")\n    else:\n        print(\"Fail\")\n\n\narr = [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5]\nk = 4\nsolution = 1\ntest_case = [arr, k, solution]\ntest_function(test_case)\n\narr = [1, 1, 2, 2, 3]\nk = 1\nsolution = 1\ntest_case = [arr, k, solution]\ntest_function(test_case)"
    },
    {
      "rank": 100,
      "score": 1.0,
      "candidate": "def find_k_times_element(arr, k):\n    \"\"\"\n    :param: arr - input array\n    :param: k - integer representing count of element to be found\n    return: int\n    \"\"\"\n    if arr is None or len(arr) == 0:\n        return None\n\n    count_dict = dict()\n\n    for num in arr:\n        if num in count_dict:\n            count_dict[num] += 1\n        else:\n            count_dict[num] = 1\n\n    for num in count_dict.keys():\n        if count_dict[num] == k:\n            return num\n\n    return None\n\n\ndef test_function(test_case):\n    arr = test_case[0]\n    k = test_case[1]\n    solution = test_case[2]\n    output = find_k_times_element(arr, k)\n    \n    if output == solution:\n        print(\"Pass\")\n    else:\n        print(\"Fail\")\n\narr = [1, 2, 3, 4, 5, 6, 6, 6, 6, 6, 7, 8, 9]\nk = 6\nsolution = 6\ntest_case = [arr, k, solution]\ntest_function(test_case)\n\narr = [1, 1, 2, 2, 2, 2, 2, 2, 2]\nk = 2\nsolution = 2\ntest_case = [arr, k, solution]\ntest_function(test_case)\n\narr = [1, 1, 2, 2, 2, 2, 2, 2, 2]\nk = 3\nsolution = None\ntest_case = [arr, k, solution]\ntest_function(test_case)\n\narr = [1, 1, 2, 2, 2, 2, 2, 2, 2]\nk = 0\nsolution = None\ntest_case = [arr, k, solution]\ntest_function(test_case)\n\narr = [1, 1, 2,"
    }
  ]
}