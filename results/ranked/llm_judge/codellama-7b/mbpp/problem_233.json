{
  "timestamp": "2025-09-15T00:03:49.627288",
  "method": "improved_llm_judge",
  "judge_model": "codellama/CodeLlama-7b-Python-hf",
  "target_model": "codellama-7b",
  "dataset": "mbpp",
  "problem_number": 233,
  "total_candidates": 100,
  "results": [
    {
      "rank": 1,
      "score": 10.0,
      "candidate": "def next_perfect_square(num):\n    root = int(num ** 0.5)\n    return root ** 2\n\n\nif __name__ == \"__main__\":\n    print(next_perfect_square(11))"
    },
    {
      "rank": 2,
      "score": 10.0,
      "candidate": "def next_perfect_square(num):\n    sq_root = num ** 0.5\n    return int((sq_root + 1) ** 2)\n\n\nif __name__ == \"__main__\":\n    num = int(input(\"Enter a number: \"))\n    next_sq = next_perfect_square(num)\n    print(f\"Next perfect square of {num} is {next_sq}\")"
    },
    {
      "rank": 3,
      "score": 10.0,
      "candidate": "def next_perfect_square(n):\n    return int(n ** 0.5) ** 2\n\n\ndef main():\n    n = int(input(\"Enter a number: \"))\n    print(\"Next perfect square greater than\", n, \"is\", next_perfect_square(n))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 4,
      "score": 10.0,
      "candidate": "def next_perfect_square(n: int) -> int:\n    \"\"\"\n    Find the next perfect square greater than a given number.\n    >>> next_perfect_square(10)\n    11\n    >>> next_perfect_square(33)\n    40\n    >>> next_perfect_square(100)\n    144\n    >>> next_perfect_square(0)\n    1\n    >>> next_perfect_square(1)\n    4\n    >>> next_perfect_square(-1)\n    0\n    >>> next_perfect_square(-3)\n    0\n    >>> next_perfect_square(2)\n    4\n    >>> next_perfect_square(3)\n    4\n    >>> next_perfect_square(4)\n    9\n    >>> next_perfect_square(5)\n    9\n    >>> next_perfect_square(6)\n    9\n    >>> next_perfect_square(7)\n    16\n    >>> next_perfect_square(8)\n    9\n    >>> next_perfect_square(9)\n    16\n    \"\"\"\n    if n < 0:\n        return 0\n    if n == 0:\n        return 1\n    while (n * n) < n:\n        n += 1\n    return n * n\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()\n    print(next_perfect_square(10))"
    },
    {
      "rank": 5,
      "score": 10.0,
      "candidate": "def next_perfect_square(num):\n    if num == 0 or num == 1:\n        return 1\n\n    while True:\n        num += 1\n        if int(num ** 0.5) ** 2 == num:\n            return num\n\n\nprint(next_perfect_square(625))"
    },
    {
      "rank": 6,
      "score": 10.0,
      "candidate": "\"\"\"Question:\nWrite a python function to find the next perfect square greater than a given number.\nHints:\nUse ** operator to get power of a number\n\n\"\"\"\ndef nextPerfectSquare(n):\n\treturn int(n**0.5)**2\n\t\t\nprint nextPerfectSquare(100)"
    },
    {
      "rank": 7,
      "score": 10.0,
      "candidate": "def next_perfect_square(num):\n    return int((num + 1)**(1/2))**2\n\nprint(next_perfect_square(121))"
    },
    {
      "rank": 8,
      "score": 10.0,
      "candidate": "def find_next_perfect_square(number):\n    sqrt = number ** 0.5\n\n    if sqrt.is_integer():\n        return number\n\n    return (sqrt + 1) ** 2"
    },
    {
      "rank": 9,
      "score": 10.0,
      "candidate": "def perfect_square(number: int) -> int:\n    \"\"\"\n    Return the next perfect square greater than a given number.\n    >>> perfect_square(9)\n    16\n    >>> perfect_square(10)\n    25\n    >>> perfect_square(15)\n    25\n    >>> perfect_square(20)\n    25\n    >>> perfect_square(21)\n    49\n    >>> perfect_square(34)\n    49\n    >>> perfect_square(35)\n    64\n    >>> perfect_square(36)\n    64\n    >>> perfect_square(37)\n    81\n    >>> perfect_square(38)\n    81\n    >>> perfect_square(39)\n    100\n    >>> perfect_square(40)\n    100\n    >>> perfect_square(41)\n    121\n    >>> perfect_square(42)\n    121\n    >>> perfect_square(43)\n    144\n    >>> perfect_square(44)\n    144\n    >>> perfect_square(45)\n    169\n    >>> perfect_square(46)\n    169\n    >>> perfect_square(47)\n    196\n    >>> perfect_square(48)\n    196\n    >>> perfect_square(49)\n    225\n    >>> perfect_square(50)\n    225\n    \"\"\"\n    # find the square root of the number\n    square_root = number ** 0.5\n    # if the square root is an integer, return the square root squared\n    if square_root.is_integer():\n        return square_root ** 2\n    # if not, find the next integer greater than the square root\n    next_int = int(square_root + 1)\n    # return the next perfect square\n    return next_int ** 2\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 10,
      "score": 10.0,
      "candidate": "def next_square(num):\n    if num > 0:\n        square = num ** 2\n        if square <= num:\n            square = (num + 1) ** 2\n        return square\n\n\nif __name__ == \"__main__\":\n    print(next_square(121))\n    print(next_square(622))\n    print(next_square(375))"
    },
    {
      "rank": 11,
      "score": 10.0,
      "candidate": "def next_perfect_square(n: int) -> int:\n    \"\"\"\n    >>> next_perfect_square(12)\n    13\n    >>> next_perfect_square(15)\n    16\n    >>> next_perfect_square(16)\n    16\n    >>> next_perfect_square(17)\n    18\n    >>> next_perfect_square(100)\n    105\n    >>> next_perfect_square(101)\n    105\n    >>> next_perfect_square(102)\n    105\n    >>> next_perfect_square(103)\n    105\n    >>> next_perfect_square(104)\n    105\n    >>> next_perfect_square(105)\n    105\n    >>> next_perfect_square(106)\n    105\n    >>> next_perfect_square(107)\n    105\n    >>> next_perfect_square(108)\n    105\n    >>> next_perfect_square(109)\n    105\n    >>> next_perfect_square(110)\n    105\n    >>> next_perfect_square(111)\n    105\n    >>> next_perfect_square(112)\n    105\n    >>> next_perfect_square(113)\n    105\n    >>> next_perfect_square(114)\n    105\n    >>> next_perfect_square(115)\n    105\n    >>> next_perfect_square(116)\n    105\n    >>> next_perfect_square(117)\n    105\n    >>> next_perfect_square(118)\n    105\n    >>> next_perfect_square(119)\n    105\n    >>> next_perfect_square(120)\n    105\n    >>> next_perfect_square(121)\n    105\n    >>> next_per"
    },
    {
      "rank": 12,
      "score": 10.0,
      "candidate": "def next_square(num):\n    if num > 0:\n        return (num + 1)**2\n    else:\n        return None\n\n\nprint(next_square(5))\nprint(next_square(-5))"
    },
    {
      "rank": 13,
      "score": 10.0,
      "candidate": "def next_perfect_square(n):\n    \"\"\"\n    Return the next perfect square greater than n.\n\n    >>> next_perfect_square(5)\n    6\n    >>> next_perfect_square(8)\n    9\n    >>> next_perfect_square(27)\n    28\n    >>> next_perfect_square(625)\n    676\n    \"\"\"\n    if n < 0:\n        raise ValueError(\"n must be a positive number\")\n\n    if n == 0 or n == 1:\n        return n + 1\n\n    return n + 1 if int(n ** 0.5) ** 2 == n else (int(n ** 0.5) + 1) ** 2\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 14,
      "score": 10.0,
      "candidate": "def next_perfect_square(num: int) -> int:\n    \"\"\"\n    This function takes a number and returns the next perfect square\n    >>> next_perfect_square(12)\n    13\n    >>> next_perfect_square(13)\n    14\n    >>> next_perfect_square(14)\n    15\n    >>> next_perfect_square(24)\n    25\n    >>> next_perfect_square(25)\n    26\n    >>> next_perfect_square(26)\n    27\n    >>> next_perfect_square(27)\n    28\n    >>> next_perfect_square(28)\n    29\n    >>> next_perfect_square(29)\n    30\n    >>> next_perfect_square(30)\n    31\n    >>> next_perfect_square(31)\n    32\n    >>> next_perfect_square(32)\n    33\n    >>> next_perfect_square(33)\n    34\n    >>> next_perfect_square(34)\n    35\n    >>> next_perfect_square(35)\n    36\n    >>> next_perfect_square(36)\n    37\n    >>> next_perfect_square(37)\n    38\n    >>> next_perfect_square(38)\n    39\n    >>> next_perfect_square(39)\n    40\n    >>> next_perfect_square(40)\n    41\n    \"\"\"\n    return int(pow(num, 2))\n\n\ndef main():\n    \"\"\"\n    This is the main function which we use to read takes input and calls other functions.\n    \"\"\"\n    num = int(input(\"Enter a number: \").strip())\n    result = next_perfect_square(num)\n    print(result)\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 15,
      "score": 10.0,
      "candidate": "def next_perfect_square(n: int) -> int:\n    \"\"\"\n    >>> next_perfect_square(11)\n    12\n    >>> next_perfect_square(12)\n    12\n    >>> next_perfect_square(49)\n    64\n    >>> next_perfect_square(14)\n    16\n    >>> next_perfect_square(35)\n    64\n    >>> next_perfect_square(98)\n    100\n    >>> next_perfect_square(100)\n    100\n    \"\"\"\n    n = n + 1\n    while (math.sqrt(n) - int(math.sqrt(n))):\n        n += 1\n    return n\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 16,
      "score": 10.0,
      "candidate": "def find_next_perfect_square(number):\n    \"\"\"\n    Finds the next perfect square greater than a given number.\n\n    >>> find_next_perfect_square(28)\n    36\n    >>> find_next_perfect_square(121)\n    144\n    >>> find_next_perfect_square(270)\n    289\n    >>> find_next_perfect_square(290)\n    304\n    >>> find_next_perfect_square(100)\n    144\n    >>> find_next_perfect_square(25)\n    36\n    >>> find_next_perfect_square(10)\n    16\n    >>> find_next_perfect_square(3)\n    4\n    >>> find_next_perfect_square(0)\n    1\n    >>> find_next_perfect_square(-1)\n    1\n    >>> find_next_perfect_square(-3)\n    1\n    >>> find_next_perfect_square(-25)\n    1\n    >>> find_next_perfect_square(-36)\n    4\n    >>> find_next_perfect_square(-100)\n    1\n    \"\"\"\n    if number < 0:\n        return 1\n    if number < 4:\n        return number + 1\n    if number % 4 == 0:\n        return number + 2\n    if number % 4 == 1:\n        return number + 1\n    if number % 4 == 2:\n        return number + 3\n    if number % 4 == 3:\n        return number + 1\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 17,
      "score": 10.0,
      "candidate": "def next_perfect_square(num: int) -> int:\n    \"\"\"\n    Find the next perfect square greater than a given number.\n    >>> next_perfect_square(23)\n    25\n    >>> next_perfect_square(100)\n    144\n    >>> next_perfect_square(1)\n    4\n    >>> next_perfect_square(-1)\n    Traceback (most recent call last):\n        ...\n    ValueError: Invalid input\n    \"\"\"\n    if num < 0:\n        raise ValueError(\"Invalid input\")\n    return (num + 1) ** 2\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 18,
      "score": 10.0,
      "candidate": "def find_next_perfect_square(number):\n    next_square = 0\n    while next_square <= number:\n        next_square += 1\n        square_root = int(next_square ** 0.5)\n        if square_root ** 2 == next_square:\n            return next_square\n\n\ndef main():\n    number = int(input(\"Enter a number: \"))\n    print(find_next_perfect_square(number))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 19,
      "score": 10.0,
      "candidate": "def next_perfect_square(n: int) -> int:\n    \"\"\"\n    returns the next perfect square greater than n.\n    >>> next_perfect_square(121)\n    144\n    >>> next_perfect_square(13)\n    16\n    >>> next_perfect_square(246)\n    289\n    \"\"\"\n    return int(n ** 2 / 2) + 1\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 20,
      "score": 10.0,
      "candidate": "def find_next_square(n):\n    next_square = (n+1)**2\n    return next_square\n\n\ndef main():\n    n = int(input(\"Enter a number: \"))\n    next_square = find_next_square(n)\n    print(f\"Next square is {next_square}\")\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 21,
      "score": 10.0,
      "candidate": "def next_square(number):\n    if number > 0:\n        return int(number ** 0.5) ** 2\n    else:\n        return None"
    },
    {
      "rank": 22,
      "score": 10.0,
      "candidate": "\"\"\"Question:\nWrite a python function to find the next perfect square greater than a given number.\nHints:\nUse math.sqrt to find the square root of a number\n\n\"\"\""
    },
    {
      "rank": 23,
      "score": 10.0,
      "candidate": "def next_perfect_square(n):\n    next_perfect_square = (n + 1)**2\n    return next_perfect_square\n\n\ndef main():\n    print(next_perfect_square(3))\n    print(next_perfect_square(4))\n    print(next_perfect_square(15))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 24,
      "score": 10.0,
      "candidate": "def next_perfect_square(number):\n    \"\"\"Return the next perfect square greater than a given number.\n\n    >>> next_perfect_square(67)\n    81\n    >>> next_perfect_square(121)\n    144\n    >>> next_perfect_square(0)\n    1\n    >>> next_perfect_square(-1)\n    1\n    >>> next_perfect_square(-67)\n    1\n    >>> next_perfect_square(24)\n    36\n    >>> next_perfect_square(1024)\n    1540\n    \"\"\"\n    # your code here\n    return int(math.sqrt(number)**2 + 1)\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 25,
      "score": 10.0,
      "candidate": "def find_next_perfect_square(n):\n    \"\"\"\n    >>> find_next_perfect_square(121)\n    144\n    >>> find_next_perfect_square(625)\n    676\n    >>> find_next_perfect_square(123)\n    144\n    >>> find_next_perfect_square(114)\n    129\n    >>> find_next_perfect_square(144)\n    169\n    \"\"\"\n    if n > 0:\n        return 4 * ((n + 1) ** 0.5) + 1\n    else:\n        return -1\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 26,
      "score": 10.0,
      "candidate": "def next_perfect_square(n):\n    return int(n ** 0.5) ** 2"
    },
    {
      "rank": 27,
      "score": 10.0,
      "candidate": "def next_perfect_square(number):\n    root = number ** 0.5\n    if root.is_integer():\n        return int(root) ** 2\n    else:\n        return (root + 1) ** 2\n\n\ndef next_perfect_square_2(number):\n    return (number + 1) ** 2"
    },
    {
      "rank": 28,
      "score": 10.0,
      "candidate": "def find_next_perfect_square(number: int) -> int:\n    \"\"\"\n    This function takes in an integer as an argument\n    and returns the next perfect square\n    >>> find_next_perfect_square(121)\n    144\n    >>> find_next_perfect_square(122)\n    144\n    >>> find_next_perfect_square(120)\n    144\n    >>> find_next_perfect_square(24)\n    36\n    >>> find_next_perfect_square(25)\n    36\n    >>> find_next_perfect_square(-1)\n    0\n    >>> find_next_perfect_square(0)\n    1\n    >>> find_next_perfect_square(1)\n    4\n    >>> find_next_perfect_square(2)\n    4\n    >>> find_next_perfect_square(3)\n    4\n    >>> find_next_perfect_square(4)\n    9\n    >>> find_next_perfect_square(5)\n    9\n    >>> find_next_perfect_square(15)\n    16\n    >>> find_next_perfect_square(16)\n    25\n    >>> find_next_perfect_square(17)\n    25\n    \"\"\"\n    if number < 0:\n        return 0\n    if number == 0:\n        return 1\n\n    while True:\n        number += 1\n        root = number ** 0.5\n        if int(root + 0.5) ** 2 == number:\n            break\n    return number\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 29,
      "score": 10.0,
      "candidate": "def next_perfect_square(num):\n    \"\"\"\n    Return the next perfect square greater than a given number.\n\n    >>> next_perfect_square(121)\n    144\n    >>> next_perfect_square(122)\n    144\n    >>> next_perfect_square(123)\n    144\n    >>> next_perfect_square(124)\n    144\n    >>> next_perfect_square(125)\n    144\n    >>> next_perfect_square(126)\n    144\n    >>> next_perfect_square(127)\n    144\n    >>> next_perfect_square(128)\n    144\n    >>> next_perfect_square(129)\n    144\n    >>> next_perfect_square(130)\n    144\n    >>> next_perfect_square(131)\n    144\n    >>> next_perfect_square(132)\n    144\n    >>> next_perfect_square(133)\n    144\n    >>> next_perfect_square(134)\n    144\n    >>> next_perfect_square(135)\n    144\n    >>> next_perfect_square(136)\n    144\n    >>> next_perfect_square(137)\n    144\n    >>> next_perfect_square(138)\n    144\n    >>> next_perfect_square(139)\n    144\n    >>> next_perfect_square(140)\n    144\n    >>> next_perfect_square(141)\n    144\n    >>> next_perfect_square(142)\n    144\n    >>> next_perfect_square(143)\n    144\n    >>> next_perfect_square(144)\n    144\n    >>> next_perfect_square(145)\n    169\n    >>> next_perfect_"
    },
    {
      "rank": 30,
      "score": 9.0,
      "candidate": "def next_perfect_square(n):\n    sqrt_n = int(n**0.5)\n    if sqrt_n**2 == n:\n        return sqrt_n**2\n    return (sqrt_n+1)**2\n\ndef main():\n    n = int(input(\"Enter a number: \"))\n    print(next_perfect_square(n))\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 31,
      "score": 9.0,
      "candidate": "def perfect_square(number):\n    x = number\n    while True:\n        if x * x > number:\n            return x * x\n        x += 1\n\n\nprint(perfect_square(123456))"
    },
    {
      "rank": 32,
      "score": 9.0,
      "candidate": "def next_square(n):\n    \"\"\"\n    Returns the next square if the given number is not a square\n    Returns the given number if it is a square\n    \"\"\"\n    if n % 4 == 0:\n        return n\n    else:\n        while n*n < n + 1:\n            n += 1\n        return n*n"
    },
    {
      "rank": 33,
      "score": 8.0,
      "candidate": "def next_square(number):\n    \"\"\"\n    Finds the next perfect square greater than the given number.\n\n    >>> next_square(5)\n    6\n    >>> next_square(13)\n    16\n    >>> next_square(15)\n    16\n    >>> next_square(25)\n    26\n    >>> next_square(35)\n    40\n    >>> next_square(45)\n    46\n    >>> next_square(55)\n    64\n    >>> next_square(75)\n    81\n    >>> next_square(105)\n    121\n    >>> next_square(100)\n    144\n    >>> next_square(115)\n    144\n    >>> next_square(125)\n    144\n    >>> next_square(135)\n    144\n    >>> next_square(145)\n    144\n    >>> next_square(155)\n    169\n    >>> next_square(175)\n    196\n    >>> next_square(185)\n    196\n    >>> next_square(195)\n    196\n    >>> next_square(205)\n    225\n    >>> next_square(215)\n    225\n    >>> next_square(225)\n    225\n    >>> next_square(235)\n    225\n    >>> next_square(245)\n    264\n    >>> next_square(255)\n    264\n    >>> next_square(265)\n    264\n    >>> next_square(275)\n    289\n    >>> next_square(285)\n    289\n    >>> next_square(295)\n    289\n    >>> next_square(305)\n    324\n    >>> next_square(315)\n    324\n    >>> next_square(325)\n    324\n    >>> next_square(3"
    },
    {
      "rank": 34,
      "score": 8.0,
      "candidate": "from math import sqrt\n\n\ndef is_perfect_square(n):\n    return int(sqrt(n)) ** 2 == n\n\n\ndef next_perfect_square(n):\n    if is_perfect_square(n):\n        return n\n\n    next_n = n + 1\n    while not is_perfect_square(next_n):\n        next_n += 1\n    return next_n\n\n\ndef main():\n    print(next_perfect_square(121))\n    print(next_perfect_square(625))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 35,
      "score": 8.0,
      "candidate": "def next_perfect_square(number):\n    if number == 0:\n        return 0\n\n    if number % 4 == 0:\n        return number\n\n    if number % 2 == 0:\n        return number + 1\n\n    return number + 2\n\n\nprint(next_perfect_square(16))"
    },
    {
      "rank": 36,
      "score": 8.0,
      "candidate": "def next_square(number):\n    if number == 1:\n        return 2\n    else:\n        for i in range(2, 2*number):\n            if i*i > number:\n                return i*i\n\nprint(next_square(4))\nprint(next_square(12))"
    },
    {
      "rank": 37,
      "score": 8.0,
      "candidate": "def next_square(number):\n    if number > 0:\n        square = number + 1\n        while True:\n            root = square ** 0.5\n            if root % 1 == 0:\n                return square\n            else:\n                square += 1\n    else:\n        return 0\n\n\nprint(next_square(121))\nprint(next_square(622))\nprint(next_square(375))"
    },
    {
      "rank": 38,
      "score": 8.0,
      "candidate": "def find_next_perfect_square(n):\n    \"\"\"\n    This function finds the next perfect square greater than a given number.\n    \"\"\"\n    return (n+1)**2\n\n\ndef main():\n    \"\"\"\n    This is the main function used to call the other functions and contains\n    the program logic.\n    \"\"\"\n    n = int(input(\"Enter a number: \"))\n    print(\"The next perfect square greater than %d is %d\" % (n, find_next_perfect_square(n)))\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 39,
      "score": 8.0,
      "candidate": "def find_next_perfect_square(n):\n    sq = n + 1\n    while not is_square(sq):\n        sq += 1\n    return sq\n\n\ndef is_square(n):\n    return int(n**.5 + 0.5)**2 == n"
    },
    {
      "rank": 40,
      "score": 8.0,
      "candidate": "def next_perfect_square(n):\n    \"\"\"Returns the next perfect square greater than n\"\"\"\n    return (n ** 2 // n) ** 2\n\nif __name__ == \"__main__\":\n    print(next_perfect_square(25))\n    print(next_perfect_square(12))"
    },
    {
      "rank": 41,
      "score": 8.0,
      "candidate": "def perfect_square(num):\n    return int(num**0.5)**2\n\n\ndef find_next_perfect_square(num):\n    return perfect_square(num) if num == perfect_square(num) else perfect_square(num+1)\n\n\ndef main():\n    num = int(input(\"Enter a number: \"))\n    print(\"Next perfect square is:\", find_next_perfect_square(num))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 42,
      "score": 8.0,
      "candidate": "from math import sqrt\n\n\ndef next_perfect_square(num):\n    if num % 4 == 1:\n        return (num + 3) // 2\n    if num % 4 == 3:\n        return (num + 1) // 2\n    return (num + 2) // 2\n\n\ndef is_perfect_square(num):\n    return int(sqrt(num)) ** 2 == num\n\n\nif __name__ == \"__main__\":\n    num = int(input(\"Enter a number: \"))\n    if is_perfect_square(num):\n        print(f\"{num} is already a perfect square\")\n    else:\n        print(f\"The next perfect square greater than {num} is {next_perfect_square(num)}\")"
    },
    {
      "rank": 43,
      "score": 8.0,
      "candidate": "def next_square(num):\n    next_sq = (num+1)**2\n    return next_sq\n\nprint(next_square(121))\nprint(next_square(625))\nprint(next_square(314))"
    },
    {
      "rank": 44,
      "score": 8.0,
      "candidate": "def next_square(n):\n    square = n + 1\n    while True:\n        root = square ** 0.5\n        if int(root + 0.5) ** 2 == square:\n            return square\n        else:\n            square += 1\n\n\nif __name__ == '__main__':\n    print(next_square(121))"
    },
    {
      "rank": 45,
      "score": 8.0,
      "candidate": "def next_perfect_square(number):\n    while not is_square(number):\n        number += 1\n    return number\n\n\ndef is_square(number):\n    return int(number**0.5 + 0.5)**2 == number\n\n\ndef main():\n    number = int(input(\"Enter a number: \"))\n    print(next_perfect_square(number))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 46,
      "score": 8.0,
      "candidate": "def next_perfect_square(number):\n    return int(number ** 0.5) ** 2"
    },
    {
      "rank": 47,
      "score": 8.0,
      "candidate": "def next_perfect_square(n):\n    if n == 0:\n        return 1\n    elif n % 4 == 0:\n        return n + 2\n    elif n % 4 == 1:\n        return n + 1\n    elif n % 4 == 3:\n        return n + 3\n\n\ndef main():\n    n = int(input(\"Enter a number: \"))\n    print(next_perfect_square(n))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 48,
      "score": 8.0,
      "candidate": "def find_next_perfect_square(num):\n    sqrt = int(num ** 0.5)\n    if sqrt * sqrt == num:\n        return sqrt * sqrt\n    else:\n        return (sqrt + 1) * (sqrt + 1)"
    },
    {
      "rank": 49,
      "score": 8.0,
      "candidate": "def find_next_perfect_square(number):\n    perfect_square = int(number ** 0.5)\n    if perfect_square ** 2 == number:\n        return number\n    return (perfect_square + 1) ** 2\n\n\ndef main():\n    print(find_next_perfect_square(121))\n    print(find_next_perfect_square(122))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 50,
      "score": 8.0,
      "candidate": "def next_perfect_square(num):\n    import math\n    return math.ceil(math.sqrt(num)) ** 2\n\n\"\"\"\nWrite a Python program to find the n (user defined)th ugly number.\nUgly numbers are numbers whose only prime factors are 2, 3 or 5. \nThe sequence 1, 2, 3, 4, 5, 6, 8, 9, 10, 12, 15, 16, 18, 20, 24, 25, 27, 30, 32, 36, 40, 45, 48, 50, 54, 60, 64, 72, 75, 80, 81, 90, 96, 100, 108, 120, 125, 128, 135, 144, 150, 160, 180, 192, 200, 216, 225, 240, 243, 250, 270, 288, 300, 320, 325, 360, 375, 396, 400, 432, 450, 480, 486, 500, 540, 576, 600, 625, 640, 648, 675, 720, 729, 750, 768, 784, 800, 810, 840, 864, 880, 900, 925, 960, 972, 1000, 1020, 1080, 1120, 1150, 1200, 1215, 1250, 1280"
    },
    {
      "rank": 51,
      "score": 8.0,
      "candidate": "def next_square(num):\n    root = num ** 0.5\n    if root % 1 == 0:\n        return int(root) ** 2\n    else:\n        return (int(root) + 1) ** 2\n\n\ndef next_square_v2(num):\n    return (num + 1) ** 2\n\n\nprint(next_square(67))\nprint(next_square_v2(67))"
    },
    {
      "rank": 52,
      "score": 8.0,
      "candidate": "def next_perfect_square(number):\n    if number == 1:\n        return 2\n\n    if number % 4 == 0:\n        return number + 1\n\n    while True:\n        number += 1\n        root = int(number ** 0.5)\n        if root ** 2 == number:\n            break\n    return number\n\n\ndef main():\n    assert next_perfect_square(1) == 2\n    assert next_perfect_square(16) == 25\n    assert next_perfect_square(10) == 11\n    assert next_perfect_square(5) == 6\n    assert next_perfect_square(100) == 101\n    assert next_perfect_square(101) == 104\n    assert next_perfect_square(900) == 921\n    assert next_perfect_square(1000) == 1021\n    assert next_perfect_square(999) == 1001\n    assert next_perfect_square(10000) == 10025\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 53,
      "score": 8.0,
      "candidate": "def next_square(n):\n    i = n\n    while True:\n        i = i + 1\n        root = int(i ** 0.5)\n        if root * root == i:\n            break\n    return i\n\n\ndef main():\n    print(next_square(121))\n    print(next_square(622))\n    print(next_square(37))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 54,
      "score": 8.0,
      "candidate": "def next_perfect_square(n):\n    if n==1:\n        return 2\n    elif n%4==1:\n        return n+2\n    elif n%4==3:\n        return n+1\n    else:\n        return n"
    },
    {
      "rank": 55,
      "score": 8.0,
      "candidate": "def perfect_square(num: int) -> int:\n    \"\"\"\n    This function takes a number and returns the next perfect square.\n\n    >>> perfect_square(12)\n    13\n    >>> perfect_square(13)\n    14\n    >>> perfect_square(100)\n    105\n    >>> perfect_square(101)\n    105\n    >>> perfect_square(102)\n    105\n    >>> perfect_square(104)\n    105\n    >>> perfect_square(105)\n    105\n    >>> perfect_square(106)\n    105\n    >>> perfect_square(107)\n    105\n    >>> perfect_square(108)\n    105\n    >>> perfect_square(109)\n    105\n    >>> perfect_square(110)\n    105\n    >>> perfect_square(111)\n    105\n    >>> perfect_square(112)\n    105\n    >>> perfect_square(113)\n    105\n    >>> perfect_square(114)\n    105\n    >>> perfect_square(115)\n    105\n    >>> perfect_square(116)\n    105\n    >>> perfect_square(117)\n    105\n    >>> perfect_square(118)\n    105\n    >>> perfect_square(119)\n    105\n    >>> perfect_square(120)\n    121\n    >>> perfect_square(121)\n    121\n    >>> perfect_square(122)\n    121\n    >>> perfect_square(123)\n    121\n    >>> perfect_square(124)\n    121\n    >>> perfect_square(125)\n    121\n    >>> perfect_square(126)\n    121\n    >>> perfect_square(127)\n    121\n    >>> perfect_square(128)\n    129\n    >>> perfect"
    },
    {
      "rank": 56,
      "score": 8.0,
      "candidate": "def next_perfect_square(n):\n    # get the square root of the number\n    sq_root = n ** 0.5\n    # if the number is perfect square return itself\n    if int(sq_root + 1) ** 2 == n:\n        return n\n    # else find the next perfect square\n    else:\n        # find the square root of the next perfect square\n        sq_root = (int(sq_root) + 1) ** 0.5\n        # return the next perfect square\n        return int(sq_root) ** 2\n\n\nif __name__ == \"__main__\":\n    print(next_perfect_square(121))"
    },
    {
      "rank": 57,
      "score": 8.0,
      "candidate": "def next_perfect_square(n):\n    i = 1\n    while i * i < n:\n        i += 1\n    return i * i\n\n\nif __name__ == \"__main__\":\n    num = int(input(\"Enter a number: \"))\n    print(next_perfect_square(num))"
    },
    {
      "rank": 58,
      "score": 8.0,
      "candidate": "def next_perfect_square(n: int) -> int:\n    \"\"\"\n    Time Complexity: O(log(n))\n    Space Complexity: O(1)\n    \"\"\"\n    if n < 0:\n        return -1\n\n    sqrt = n ** 0.5\n    if sqrt.is_integer():\n        return n\n\n    return (sqrt + 1) ** 2\n\n\nif __name__ == \"__main__\":\n    print(next_perfect_square(14))\n    print(next_perfect_square(15))"
    },
    {
      "rank": 59,
      "score": 8.0,
      "candidate": "def next_square(number):\n    \"\"\"\n    >>> next_square(121)\n    144\n    >>> next_square(625)\n    676\n    >>> next_square(0)\n    1\n    \"\"\"\n    sqrt = number ** 0.5\n    if sqrt.is_integer():\n        return int(sqrt) ** 2\n    return (int(sqrt) + 1) ** 2\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 60,
      "score": 8.0,
      "candidate": "def find_next_square(number):\n    \"\"\"\n    Find the next perfect square greater than a given number\n    :param number: int - an integer\n    :return: int - an integer\n    \"\"\"\n    i = number\n    while i*i <= number:\n        i += 1\n    return i*i\n\ndef main():\n    res = find_next_square(121)\n    print(res)\n    res = find_next_square(625)\n    print(res)\n    res = find_next_square(123)\n    print(res)\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 61,
      "score": 8.0,
      "candidate": "def next_perfect_square(number):\n    root = number ** 0.5\n    if root % 1 == 0:\n        return int(root) ** 2\n    else:\n        return (int(root) + 1) ** 2\n\n\ndef main():\n    number = int(input(\"Enter a number: \"))\n    print(next_perfect_square(number))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 62,
      "score": 8.0,
      "candidate": "def next_square(number):\n    next_sq = 0\n    if number > 0:\n        next_sq = int(number ** 0.5) ** 2\n    return next_sq\n\n\nif __name__ == \"__main__\":\n    print(next_square(5))\n    print(next_square(121))"
    },
    {
      "rank": 63,
      "score": 8.0,
      "candidate": "def next_square(num):\n    import math\n\n    if num < 0:\n        raise Exception(\"Invalid input\")\n\n    square = int(math.sqrt(num))\n\n    if square*square == num:\n        return square*square\n\n    return (square+1)**2\n\n\n# Test\nnum = int(input(\"Enter a number: \"))\nprint(\"Next perfect square is:\", next_square(num))"
    },
    {
      "rank": 64,
      "score": 8.0,
      "candidate": "def next_perfect_square(number):\n    if number > 0:\n        root = int(number ** 0.5)\n        if number == root ** 2:\n            return number\n        elif number < root ** 2:\n            return (root + 1) ** 2\n        else:\n            return (root + 2) ** 2\n\n\nprint(next_perfect_square(14))\nprint(next_perfect_square(24))"
    },
    {
      "rank": 65,
      "score": 8.0,
      "candidate": "def next_perfect_square(n):\n    if n < 0:\n        return \"Not a valid number\"\n    elif n ** 0.5 % 1 == 0:\n        return n\n    else:\n        return (n ** 0.5 + 1) ** 2\n\n\nprint(next_perfect_square(13))\nprint(next_perfect_square(24))\nprint(next_perfect_square(-1))"
    },
    {
      "rank": 66,
      "score": 8.0,
      "candidate": "def next_perfect_square(n):\n    return (int(n**0.5) + 1)**2"
    },
    {
      "rank": 67,
      "score": 8.0,
      "candidate": "from math import sqrt\n\n\ndef next_perfect_square(number):\n    square_root = int(sqrt(number))\n    if square_root ** 2 == number:\n        return square_root\n\n    return square_root + 1\n\n\ndef main():\n    number = int(input(\"Enter a number: \"))\n    print(next_perfect_square(number))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 68,
      "score": 8.0,
      "candidate": "def find_next_perfect_square(n):\n    if n == 0 or n == 1:\n        return 1\n    if n % 2 == 0:\n        n += 1\n    while (not is_square(n)):\n        n += 2\n    return n\n\n\ndef is_square(n):\n    return (n ** 0.5) % 1 == 0\n\n\ndef main():\n    print(find_next_perfect_square(4))\n    print(find_next_perfect_square(16))\n    print(find_next_perfect_square(24))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 69,
      "score": 8.0,
      "candidate": "def next_square(number):\n    next_square = (number+1)**2\n    return next_square\n\nnext_square(121)"
    },
    {
      "rank": 70,
      "score": 8.0,
      "candidate": "def next_square(number):\n    return int(number**2)\n\n\ndef next_square2(number):\n    return int((number + 1) ** 0.5) ** 2\n\n\nif __name__ == \"__main__\":\n    number = int(input(\"Enter a number: \"))\n    print(next_square(number))\n    print(next_square2(number))"
    },
    {
      "rank": 71,
      "score": 8.0,
      "candidate": "def next_perfect_square(num):\n    next_square = int(num**0.5)\n    if next_square**2 == num:\n        return next_square**2\n    else:\n        return (next_square + 1)**2\n\n\nprint(next_perfect_square(11))\nprint(next_perfect_square(121))\nprint(next_perfect_square(112))"
    },
    {
      "rank": 72,
      "score": 8.0,
      "candidate": "def next_perfect_square(n):\n    if n == 0:\n        return 1\n    i = 1\n    while i*i <= n:\n        i += 1\n    return i*i\n\n\ndef main():\n    print(\"Next perfect square greater than 10 is: \" +\n          str(next_perfect_square(10)))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 73,
      "score": 8.0,
      "candidate": "def next_perfect_square(n: int) -> int:\n    \"\"\"\n    Return next perfect square greater than a given number.\n    >>> next_perfect_square(15)\n    16\n    >>> next_perfect_square(17)\n    25\n    >>> next_perfect_square(24)\n    25\n    \"\"\"\n    return (n + 1) ** 2\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 74,
      "score": 8.0,
      "candidate": "def next_perfect_square(num):\n    \"\"\"\n    Return next perfect square greater than a given number\n\n    >>> next_perfect_square(15)\n    16\n    >>> next_perfect_square(12)\n    13\n    >>> next_perfect_square(16)\n    17\n    >>> next_perfect_square(100)\n    105\n    >>> next_perfect_square(200)\n    225\n    \"\"\"\n    return (num + 1) ** 2 if (num + 1) ** 2 - num > 0 else next_perfect_square(num + 1)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 75,
      "score": 8.0,
      "candidate": "def next_square(num):\n    square = num\n    while square < num:\n        square += 1\n        root = int(square ** 0.5)\n        if root ** 2 == square:\n            return square\n\n\nprint(next_square(121))\nprint(next_square(625))\nprint(next_square(314))"
    },
    {
      "rank": 76,
      "score": 8.0,
      "candidate": "def next_perfect_square(n):\n    # Check if the number is a perfect square\n    sq = n ** 0.5\n    if sq == int(sq):\n        return n\n    # If it is not a perfect square, find the next perfect square\n    return (n + 1) * (n + 1)\n\n\nif __name__ == \"__main__\":\n    # Tests\n    assert next_perfect_square(2) == 3\n    assert next_perfect_square(3) == 4\n    assert next_perfect_square(12) == 13\n    assert next_perfect_square(13) == 16"
    },
    {
      "rank": 77,
      "score": 8.0,
      "candidate": "def next_perfect_square(num):\n    if num == 1:\n        return 2\n\n    if num % 2 == 0:\n        num += 1\n\n    while True:\n        num += 2\n        if int(num ** 0.5) ** 2 == num:\n            return num\n\n\ndef main():\n    num = int(input(\"Enter a number: \"))\n    print(next_perfect_square(num))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 78,
      "score": 8.0,
      "candidate": "def next_perfect_square(num):\n    \"\"\"\n    Find the next perfect square greater than a given number.\n\n    Args:\n       num(int): Number to find the next perfect square of\n    Returns:\n       int: Next perfect square of given number\n    \"\"\"\n    if num == 0:\n        return 0\n    if num == 1:\n        return 1\n\n    while num * num < num:\n        num += 1\n\n    return num * num\n\n\nprint(next_perfect_square(10))\nprint(next_perfect_square(15))\nprint(next_perfect_square(1))\nprint(next_perfect_square(0))"
    },
    {
      "rank": 79,
      "score": 8.0,
      "candidate": "def next_perfect_square(n):\n    sqrt = n ** 0.5\n    if sqrt % 1 == 0:\n        return n\n    else:\n        return (sqrt + 1) ** 2\n\n\nprint(next_perfect_square(14))"
    },
    {
      "rank": 80,
      "score": 8.0,
      "candidate": "def next_perfect_square(n: int) -> int:\n    \"\"\"\n    Return the next perfect square greater than n.\n    >>> next_perfect_square(1)\n    4\n    >>> next_perfect_square(2)\n    9\n    >>> next_perfect_square(3)\n    4\n    >>> next_perfect_square(13)\n    16\n    >>> next_perfect_square(25)\n    26\n    >>> next_perfect_square(1024)\n    1029\n    >>> next_perfect_square(12345)\n    12349\n    >>> next_perfect_square(-2)\n    Traceback (most recent call last):\n        ...\n    ValueError: n must be greater than or equal to zero\n    >>> next_perfect_square(1.23)\n    Traceback (most recent call last):\n        ...\n    ValueError: n must be an integer\n    \"\"\"\n    if n < 0:\n        raise ValueError(\"n must be greater than or equal to zero\")\n    if not isinstance(n, int):\n        raise ValueError(\"n must be an integer\")\n    return (n + 1) ** 2\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 81,
      "score": 8.0,
      "candidate": "def next_square(n):\n    n += 1\n    root = n ** 0.5\n    return int(root) ** 2"
    },
    {
      "rank": 82,
      "score": 8.0,
      "candidate": "def next_perfect_square(n):\n    # code here\n    if (n%4==0):\n        return n\n    if (n%4==1):\n        return n+2\n    if (n%4==2):\n        return n+1\n    if (n%4==3):\n        return n+2\n\nnext_perfect_square(13)"
    },
    {
      "rank": 83,
      "score": 8.0,
      "candidate": "def next_perfect_square(number):\n    if number % 2 == 0:\n        return number + 1\n    else:\n        return number + 2\n\nprint(next_perfect_square(4))"
    },
    {
      "rank": 84,
      "score": 8.0,
      "candidate": "def next_perfect_square(num):\n    if num == 1:\n        return 1\n    if num % 4 == 0:\n        return num\n    sq = num + 1\n    while sq ** 2 < num:\n        sq += 2\n    return sq ** 2\n\n\nprint(next_perfect_square(16))"
    },
    {
      "rank": 85,
      "score": 8.0,
      "candidate": "def next_perfect_square(number):\n    \"\"\"\n    :param number: int - number to check if it's the next perfect square\n    :return: int - next perfect square\n    \"\"\"\n    return number + (1 - number % 1) ** 0.5"
    },
    {
      "rank": 86,
      "score": 8.0,
      "candidate": "def next_perfect_square(num):\n    if num > 0:\n        sqrt = num ** 0.5\n        if sqrt.is_integer():\n            return num\n        else:\n            return (sqrt + 1) ** 2\n\nif __name__ == '__main__':\n    print(next_perfect_square(4))\n    print(next_perfect_square(6))\n    print(next_perfect_square(11))\n    print(next_perfect_square(20))\n    print(next_perfect_square(40))\n    print(next_perfect_square(45))\n    print(next_perfect_square(99))\n    print(next_perfect_square(-1))\n    print(next_perfect_square(0))\n    print(next_perfect_square(1))\n    print(next_perfect_square(100))"
    },
    {
      "rank": 87,
      "score": 8.0,
      "candidate": "def next_perfect_square(n):\n    x = n + 1\n    while True:\n        root = int(x ** 0.5)\n        if root ** 2 == x:\n            break\n        x += 1\n    return x\n\n\nif __name__ == \"__main__\":\n    print(next_perfect_square(26))"
    },
    {
      "rank": 88,
      "score": 8.0,
      "candidate": "def find_next_square(n):\n    if n == 0:\n        return 1\n    while True:\n        n += 1\n        root = int(n ** 0.5)\n        if root * root == n:\n            break\n    return n\n\n\nif __name__ == '__main__':\n    print(find_next_square(0))\n    print(find_next_square(1))\n    print(find_next_square(121))"
    },
    {
      "rank": 89,
      "score": 8.0,
      "candidate": "def next_perfect_square(num):\n    if num == 0:\n        return 0\n\n    root = int(num ** 0.5)\n    if root * root == num:\n        return num\n    return (root + 1) ** 2\n\n\ndef main():\n    num = int(input(\"Enter a number: \"))\n    print(next_perfect_square(num))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 90,
      "score": 8.0,
      "candidate": "def next_perfect_square(n):\n    next_perfect_square = n\n\n    while True:\n        next_perfect_square += 1\n        if next_perfect_square * next_perfect_square > n:\n            return next_perfect_square * next_perfect_square\n\n\ndef main():\n    n = int(input(\"Enter a number: \"))\n    print(next_perfect_square(n))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 91,
      "score": 8.0,
      "candidate": "def next_square(number):\n    square = number ** 2\n    while square <= number:\n        square += 1\n    return square"
    },
    {
      "rank": 92,
      "score": 1.0,
      "candidate": "def next_perfect_square(num: int) -> int:\n    \"\"\"\n    :param num: The number to find the next perfect square greater than it.\n    :return: The next perfect square greater than the given number.\n    >>> next_perfect_square(12)\n    13\n    >>> next_perfect_square(21)\n    25\n    >>> next_perfect_square(11)\n    12\n    >>> next_perfect_square(13)\n    16\n    \"\"\"\n    # 1. Check if the number is a perfect square.\n    sqrt_num = num ** 0.5\n    if sqrt_num.is_integer():\n        return int(sqrt_num) ** 2\n\n    # 2. If the number is not a perfect square, find the next perfect square.\n    return (num + 1) ** 2\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()\n    print(next_perfect_square(12))"
    },
    {
      "rank": 93,
      "score": 1.0,
      "candidate": "def next_perfect_square(num: int) -> int:\n    \"\"\"\n    >>> next_perfect_square(11)\n    12\n    >>> next_perfect_square(12)\n    13\n    >>> next_perfect_square(21)\n    25\n    >>> next_perfect_square(22)\n    25\n    >>> next_perfect_square(23)\n    25\n    >>> next_perfect_square(32)\n    36\n    >>> next_perfect_square(33)\n    36\n    >>> next_perfect_square(34)\n    36\n    >>> next_perfect_square(35)\n    36\n    >>> next_perfect_square(36)\n    36\n    >>> next_perfect_square(37)\n    36\n    >>> next_perfect_square(38)\n    36\n    >>> next_perfect_square(39)\n    36\n    >>> next_perfect_square(40)\n    41\n    >>> next_perfect_square(41)\n    41\n    >>> next_perfect_square(42)\n    41\n    >>> next_perfect_square(43)\n    41\n    >>> next_perfect_square(44)\n    41\n    >>> next_perfect_square(45)\n    41\n    >>> next_perfect_square(46)\n    41\n    >>> next_perfect_square(47)\n    41\n    >>> next_perfect_square(48)\n    41\n    >>> next_perfect_square(49)\n    41\n    \"\"\"\n    next_square = num ** 2\n    while int(next_square ** 0.5) ** 2 != next_square:\n        next_square += 1\n    return next_square\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 94,
      "score": 1.0,
      "candidate": "def next_perfect_square(number):\n    \"\"\"\n    Returns next perfect square greater than number.\n    \"\"\"\n    next_square = int(number**(1/2))\n    if next_square**2 == number:\n        return next_square**2\n    return (next_square + 1)**2\n\ndef test_function(test_case):\n    test_input, test_expected = test_case\n    test_actual = next_perfect_square(test_input)\n    if test_actual == test_expected:\n        print(\"Pass\")\n    else:\n        print(\"Fail\")\n\ntest_function((25, 26))\ntest_function((121, 144))\ntest_function((9, 16))\ntest_function((150, 176))"
    },
    {
      "rank": 95,
      "score": 1.0,
      "candidate": "def next_square(number):\n    import math\n    if number > 0:\n        sq = int(math.sqrt(number))\n        if sq*sq == number:\n            return sq*sq\n        else:\n            return (sq+1)**2\n    else:\n        return number\n\n\n\"\"\"\nWrite a Python function to check whether a number is perfect or not.\n\"\"\"\ndef is_perfect(number):\n    if number > 0:\n        sum = 0\n        for i in range(1, number):\n            if number % i == 0:\n                sum += i\n        if sum == number:\n            return True\n        else:\n            return False\n    else:\n        return number\n\n\n\"\"\"\nWrite a Python program to compute the summation of the absolute difference of all distinct pairs in an given array (non-decreasing order). \n\"\"\"\ndef summation_absolute_difference(number):\n    import math\n    if number > 0:\n        sorted_list = sorted(number)\n        summation = 0\n        for i in range(len(sorted_list) - 1):\n            summation += abs(sorted_list[i] - sorted_list[i + 1])\n        return summation\n    else:\n        return number\n\n\n\"\"\"\nWrite a Python program to find the difference between the sum of the squares and the square of the sums of an array of given integers.\n\"\"\"\ndef sum_square_difference(number):\n    import math\n    if number > 0:\n        sum_squares = 0\n        sum_numbers = 0\n        for i in number:\n            sum_numbers += i\n            sum_squares += i**2\n        return sum_numbers**2 - sum_squares\n    else:\n        return number\n\n\n\"\"\"\nWrite a Python program to find the number of combinations that satisfy p + q + r + s = n where n is a given number <= 4000 and p, q, r, s in the range of 0 to 1000. \n\"\"\"\ndef combinations(number):\n    import math\n    if number > 0:\n        count = 0\n        for"
    },
    {
      "rank": 96,
      "score": 1.0,
      "candidate": "def next_perfect_square(num: int) -> int:\n    \"\"\"\n    This function takes in a number and returns the next perfect square.\n\n    >>> next_perfect_square(121)\n    144\n    >>> next_perfect_square(122)\n    149\n    >>> next_perfect_square(270)\n    289\n    >>> next_perfect_square(271)\n    289\n    \"\"\"\n    return (num + 1) ** 2\n\n\ndef next_perfect_square_alt(num: int) -> int:\n    \"\"\"\n    This function takes in a number and returns the next perfect square.\n\n    >>> next_perfect_square(121)\n    144\n    >>> next_perfect_square(122)\n    149\n    >>> next_perfect_square(270)\n    289\n    >>> next_perfect_square(271)\n    289\n    \"\"\"\n    # for i in range(num + 1):\n    #     if i * i > num:\n    #         return i * i\n\n    return int(num + (num ** 0.5) ** 2)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 97,
      "score": 1.0,
      "candidate": "def next_square(n):\n    \"\"\"\n    Return the next square number greater than n.\n\n    >>> next_square(121)\n    144\n    >>> next_square(125)\n    144\n    >>> next_square(136)\n    150\n    >>> next_square(21)\n    28\n    >>> next_square(37)\n    48\n    >>> next_square(123)\n    144\n    >>> next_square(0)\n    1\n    \"\"\"\n    return int((n + 1) ** 2)\n\n\ndef next_square_eff(n):\n    \"\"\"\n    Return the next square number greater than n.\n\n    >>> next_square_eff(121)\n    144\n    >>> next_square_eff(125)\n    144\n    >>> next_square_eff(136)\n    150\n    >>> next_square_eff(21)\n    28\n    >>> next_square_eff(37)\n    48\n    >>> next_square_eff(123)\n    144\n    >>> next_square_eff(0)\n    1\n    \"\"\"\n    return int((n + 1) ** 2 if n ** 0.5 % 1 else n + 1)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 98,
      "score": 1.0,
      "candidate": "def next_square(n):\n    # TODO: Write your solution here\n    sqrt = n ** 0.5\n    if sqrt.is_integer():\n        return int(sqrt) ** 2\n    else:\n        return (int(sqrt) + 1) ** 2\n\n\n# Use the following main function to test your implementation\n\ndef main():\n    n = 5\n    print(next_square(n))\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 99,
      "score": 1.0,
      "candidate": "def next_perfect_square(number: int) -> int:\n    \"\"\"\n    Return the next perfect square from a given number.\n    >>> next_perfect_square(121)\n    144\n    >>> next_perfect_square(114)\n    121\n    >>> next_perfect_square(150)\n    169\n    >>> next_perfect_square(245)\n    264\n    >>> next_perfect_square(-1)\n    Traceback (most recent call last):\n        ...\n    ValueError: Input number should be positive\n    >>> next_perfect_square(0)\n    1\n    >>> next_perfect_square(2)\n    4\n    >>> next_perfect_square(1)\n    4\n    >>> next_perfect_square(-2)\n    Traceback (most recent call last):\n        ...\n    ValueError: Input number should be positive\n    \"\"\"\n    if number < 0:\n        raise ValueError(\"Input number should be positive\")\n\n    if number == 0:\n        return 1\n\n    number += 1\n\n    while (number * number) <= number:\n        number += 1\n\n    return number * number\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 100,
      "score": 1.0,
      "candidate": "def next_square(num):\n    square = num * num\n    return square + (1 - num)\n\n\ndef next_square_opt(num):\n    square = num * num\n    return square + (num - (square - num))\n\n\ndef test_function(test_case):\n    num = test_case[0]\n    solution = test_case[1]\n    output = next_square(num)\n    if output == solution:\n        print(\"Pass\")\n    else:\n        print(\"Fail\")\n\n\ntest_case_1 = [4, 9]\ntest_function(test_case_1)\n\ntest_case_2 = [8, 9]\ntest_function(test_case_2)\n\ntest_case_3 = [14, 25]\ntest_function(test_case_3)\n\ntest_case_4 = [18, 25]\ntest_function(test_case_4)\n\ntest_case_5 = [25, 25]\ntest_function(test_case_5)"
    }
  ]
}