{
  "timestamp": "2025-09-15T01:12:49.709599",
  "method": "improved_llm_judge",
  "judge_model": "codellama/CodeLlama-7b-Python-hf",
  "target_model": "codellama-7b",
  "dataset": "mbpp",
  "problem_number": 384,
  "total_candidates": 100,
  "results": [
    {
      "rank": 1,
      "score": 10.0,
      "candidate": "def first_non_repeated_char(string: str) -> str:\n    \"\"\"\n    >>> first_non_repeated_char('abcdcaf')\n    'b'\n    >>> first_non_repeated_char('abcdc')\n    'a'\n    >>> first_non_repeated_char('abcda')\n    'a'\n    >>> first_non_repeated_char('abcd')\n    'a'\n    >>> first_non_repeated_char('abcdc')\n    'a'\n    >>> first_non_repeated_char('')\n    ''\n    \"\"\"\n    char_freq: dict[str, int] = {}\n\n    for char in string:\n        if char in char_freq:\n            char_freq[char] += 1\n        else:\n            char_freq[char] = 1\n\n    for char in string:\n        if char_freq[char] == 1:\n            return char\n\n    return \"\"\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 2,
      "score": 10.0,
      "candidate": "def first_non_repeated_character(input_str: str) -> str:\n    \"\"\"\n    Returns the first non-repeated character from a given string.\n    >>> first_non_repeated_character('abcdcaf')\n    'b'\n    >>> first_non_repeated_character('z')\n    'z'\n    >>> first_non_repeated_character('')\n    ''\n    >>> first_non_repeated_character(None)\n\n    \"\"\"\n\n    if not input_str:\n        return \"\"\n\n    char_frequency = {}\n\n    for char in input_str:\n        if char in char_frequency:\n            char_frequency[char] += 1\n        else:\n            char_frequency[char] = 1\n\n    for char in input_str:\n        if char_frequency[char] == 1:\n            return char\n\n    return \"\"\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod(verbose=True)"
    },
    {
      "rank": 3,
      "score": 10.0,
      "candidate": "from collections import Counter\n\n\ndef first_non_repeated_character(input_str):\n    \"\"\"\n    >>> first_non_repeated_character('Python')\n    'y'\n    >>> first_non_repeated_character('Java')\n    'a'\n    \"\"\"\n    counter = Counter(input_str)\n    for char in input_str:\n        if counter[char] == 1:\n            return char\n    return None\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 4,
      "score": 10.0,
      "candidate": "def first_non_repeated_char(input_string):\n    \"\"\"\n    >>> first_non_repeated_char('Python')\n    'y'\n    >>> first_non_repeated_char('Java')\n    'a'\n    >>> first_non_repeated_char('C++')\n    'C'\n    \"\"\"\n    char_count = {}\n\n    for char in input_string:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n\n    for char in input_string:\n        if char_count[char] == 1:\n            return char\n\n    return None\n\n\ndef first_non_repeated_char_opt(input_string):\n    \"\"\"\n    >>> first_non_repeated_char_opt('Python')\n    'y'\n    >>> first_non_repeated_char_opt('Java')\n    'a'\n    >>> first_non_repeated_char_opt('C++')\n    'C'\n    \"\"\"\n    char_count = {}\n\n    for char in input_string:\n        if char not in char_count:\n            char_count[char] = 1\n        else:\n            char_count[char] += 1\n\n    for char in input_string:\n        if char_count[char] == 1:\n            return char\n\n    return None\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 5,
      "score": 10.0,
      "candidate": "def first_non_repeated(string: str) -> str:\n    \"\"\"\n    >>> first_non_repeated('aabccbdc')\n    'b'\n    >>> first_non_repeated('aaabc')\n    'c'\n    >>> first_non_repeated('abc')\n    'a'\n    >>> first_non_repeated('')\n    ''\n    \"\"\"\n    char_count: dict[str, int] = {}\n    for char in string:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    for char in string:\n        if char_count[char] == 1:\n            return char\n    return \"\"\n\n\nif __name__ == \"__main__\":\n    from doctest import testmod\n\n    testmod()"
    },
    {
      "rank": 6,
      "score": 10.0,
      "candidate": "def first_non_repeated_character(text: str) -> str:\n    \"\"\"Return the first non-repeated character in a given string.\n\n    >>> first_non_repeated_character('stress')\n    't'\n    >>> first_non_repeated_character('moonmen')\n    'e'\n    >>> first_non_repeated_character('aabbc')\n    'd'\n    >>> first_non_repeated_character('')\n    ''\n    \"\"\"\n    if not text:\n        return ''\n\n    counter = {}\n\n    for character in text:\n        if character in counter:\n            counter[character] += 1\n        else:\n            counter[character] = 1\n\n    for character in text:\n        if counter[character] == 1:\n            return character\n\n    return ''\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 7,
      "score": 10.0,
      "candidate": "def first_non_repeated_character(input_string: str) -> str:\n    \"\"\"\n    Return the first non-repeated character in a given string.\n\n    >>> first_non_repeated_character('')\n    ''\n    >>> first_non_repeated_character('a')\n    'a'\n    >>> first_non_repeated_character('aa')\n    ''\n    >>> first_non_repeated_character('abcd')\n    'b'\n    >>> first_non_repeated_character('aaaabbc')\n    'c'\n    >>> first_non_repeated_character('aaaaaaa')\n    ''\n    >>> first_non_repeated_character('aabbccdde')\n    'd'\n    >>> first_non_repeated_character('aabbccddee')\n    ''\n    \"\"\"\n    if not input_string:\n        return \"\"\n\n    char_counter: dict[str, int] = {}\n\n    for char in input_string:\n        if char in char_counter:\n            char_counter[char] += 1\n        else:\n            char_counter[char] = 1\n\n    for char in input_string:\n        if char_counter[char] == 1:\n            return char\n\n    return \"\"\n\n\nif __name__ == \"__main__\":\n    from doctest import testmod\n\n    testmod()"
    },
    {
      "rank": 8,
      "score": 10.0,
      "candidate": "def first_non_repeated_character(str_in: str) -> str:\n    \"\"\"\n    >>> first_non_repeated_character('abccdb')\n    'b'\n    >>> first_non_repeated_character('abcabc')\n    'c'\n    \"\"\"\n    char_dict = {}\n\n    for char in str_in:\n        if char in char_dict:\n            char_dict[char] += 1\n        else:\n            char_dict[char] = 1\n\n    for char in str_in:\n        if char_dict[char] == 1:\n            return char\n\n    return None\n\n\ndef first_non_repeated_character_with_set(str_in: str) -> str:\n    \"\"\"\n    >>> first_non_repeated_character_with_set('abccdb')\n    'b'\n    >>> first_non_repeated_character_with_set('abcabc')\n    'c'\n    \"\"\"\n    unique_char = set()\n    for char in str_in:\n        if char not in unique_char:\n            unique_char.add(char)\n        else:\n            unique_char.remove(char)\n\n    return next(iter(unique_char), None)\n\n\ndef first_non_repeated_character_with_counter(str_in: str) -> str:\n    \"\"\"\n    >>> first_non_repeated_character_with_counter('abccdb')\n    'b'\n    >>> first_non_repeated_character_with_counter('abcabc')\n    'c'\n    \"\"\"\n    from collections import Counter\n\n    char_count = Counter(str_in)\n    for char in str_in:\n        if char_count[char] == 1:\n            return char\n\n    return None\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 9,
      "score": 10.0,
      "candidate": "def non_repeated_char(input_string):\n    \"\"\"\n    >>> non_repeated_char(\"Python\")\n    'n'\n    >>> non_repeated_char(\"Java\")\n    'a'\n    >>> non_repeated_char(\"C\")\n    'C'\n    \"\"\"\n\n    # first we are going to convert the string to a list and then we are going to iterate through the list\n    # we are going to use a set for the repeated characters and we are going to check if the character is in the set\n    # if it is not in the set we are going to return it\n    repeated_char = set()\n    for char in input_string:\n        if char not in repeated_char:\n            repeated_char.add(char)\n        else:\n            continue\n    return char\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 10,
      "score": 10.0,
      "candidate": "def first_non_repeated_char(string: str) -> str:\n    \"\"\"\n    Return first non-repeated character in string.\n    >>> first_non_repeated_char(\"aabbcceff\")\n    'c'\n    >>> first_non_repeated_char(\"aabbcce\")\n    'e'\n    >>> first_non_repeated_char(\"aabbcc\")\n    'a'\n    >>> first_non_repeated_char(\"abcdef\")\n    'a'\n    \"\"\"\n    if not string:\n        return \"\"\n\n    # create a hashmap to store the frequency of characters\n    char_freq: dict = dict()\n    for char in string:\n        if char in char_freq:\n            char_freq[char] += 1\n        else:\n            char_freq[char] = 1\n\n    # return the character with frequency 1\n    for char in string:\n        if char_freq[char] == 1:\n            return char\n\n    return \"\"\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 11,
      "score": 10.0,
      "candidate": "def first_non_repeated_char(string):\n    \"\"\"\n    >>> first_non_repeated_char('abcabc')\n    'b'\n    >>> first_non_repeated_char('ababac')\n    'c'\n    >>> first_non_repeated_char('abc')\n    'a'\n    >>> first_non_repeated_char('aaaaa') is None\n    True\n    \"\"\"\n    char_frequencies = {}\n    for char in string:\n        if char in char_frequencies:\n            char_frequencies[char] += 1\n        else:\n            char_frequencies[char] = 1\n    for char in string:\n        if char_frequencies[char] == 1:\n            return char\n\n\ndef first_non_repeated_char_optimized(string):\n    \"\"\"\n    >>> first_non_repeated_char_optimized('abcabc')\n    'b'\n    >>> first_non_repeated_char_optimized('ababac')\n    'c'\n    >>> first_non_repeated_char_optimized('abc')\n    'a'\n    >>> first_non_repeated_char_optimized('aaaaa') is None\n    True\n    \"\"\"\n    char_frequencies = {}\n    for char in string:\n        char_frequencies[char] = char_frequencies.get(char, 0) + 1\n    for char in string:\n        if char_frequencies[char] == 1:\n            return char\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 12,
      "score": 10.0,
      "candidate": "def first_non_repeated_char(input_str: str) -> str:\n    \"\"\"\n    >>> first_non_repeated_char('Python')\n    'y'\n    >>> first_non_repeated_char('JavaScript')\n    'J'\n    >>> first_non_repeated_char('C')\n    'C'\n    >>> first_non_repeated_char('C++')\n    'C'\n    >>> first_non_repeated_char('Java')\n    'a'\n    >>> first_non_repeated_char('PHP')\n    'P'\n    >>> first_non_repeated_char('Ruby')\n    'r'\n    >>> first_non_repeated_char('Swift')\n    'w'\n    >>> first_non_repeated_char('C#')\n    'C'\n    >>> first_non_repeated_char('Visual Basic')\n    ' '\n    >>> first_non_repeated_char('C++14')\n    'C'\n    >>> first_non_repeated_char('Go')\n    'G'\n    >>> first_non_repeated_char('C#14')\n    'C'\n    >>> first_non_repeated_char('C++14 15 16')\n    'C'\n    \"\"\"\n    char_count = {}\n    for char in input_str:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    for char in input_str:\n        if char_count[char] == 1:\n            return char\n    return \" \"\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 13,
      "score": 10.0,
      "candidate": "def first_non_repeated(string: str) -> str:\n    \"\"\"Returns the first non-repeated character in a given string.\n\n    >>> first_non_repeated('stress')\n    't'\n    >>> first_non_repeated('')\n    ''\n    >>> first_non_repeated('leetcode')\n    'c'\n    >>> first_non_repeated('aabbcc')\n    'd'\n    >>> first_non_repeated('yessss')\n    'e'\n    >>> first_non_repeated('hooraaaay')\n    'b'\n    \"\"\"\n    character_count = {}\n    for character in string:\n        if character not in character_count:\n            character_count[character] = 1\n        else:\n            character_count[character] += 1\n\n    for character in string:\n        if character_count[character] == 1:\n            return character\n    return \"\"\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 14,
      "score": 9.370583536698913,
      "candidate": "def first_non_repeated(string):\n    dict = {}\n    for letter in string:\n        if letter in dict:\n            dict[letter] += 1\n        else:\n            dict[letter] = 1\n\n    for letter in string:\n        if dict[letter] == 1:\n            return letter\n\n\nstring = \"abcdabcd\"\nprint(first_non_repeated(string))"
    },
    {
      "rank": 15,
      "score": 9.234050852198141,
      "candidate": "def first_non_repeated_character(text):\n    \"\"\"\n    This function will return the first non-repeated character in a given string.\n\n    >>> first_non_repeated_character(\"string theory\")\n    's'\n    >>> first_non_repeated_character(\"hello\")\n    'h'\n    >>> first_non_repeated_character(\"pythonexercises\")\n    'p'\n    >>> first_non_repeated_character(\"aabbccddeeffgg\")\n    'a'\n    \"\"\"\n    # Initializing a dictionary\n    dict = {}\n\n    # Iterating through the string\n    for i in text:\n        if i in dict:\n            dict[i] += 1\n        else:\n            dict[i] = 1\n\n    # Iterating through the string again\n    for i in text:\n        if dict[i] == 1:\n            return i\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 16,
      "score": 9.226766272351448,
      "candidate": "from collections import Counter\n\n\ndef first_non_repeated_char(input_str):\n    char_count = Counter(input_str)\n    for char in input_str:\n        if char_count[char] == 1:\n            return char\n\n\ndef main():\n    print(first_non_repeated_char(\"aaabbc\"))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 17,
      "score": 9.21346272767743,
      "candidate": "def find_first_non_repeated_char(string):\n    if len(string) == 0:\n        return None\n\n    char_frequency = {}\n\n    for char in string:\n        if char in char_frequency:\n            char_frequency[char] += 1\n        else:\n            char_frequency[char] = 1\n\n    for char in string:\n        if char_frequency[char] == 1:\n            return char\n\n    return None"
    },
    {
      "rank": 18,
      "score": 9.205959372648458,
      "candidate": "def first_non_repeated_char(string: str) -> str:\n    \"\"\"\n    :param string: str\n    :return: str\n    >>> first_non_repeated_char('abcbad')\n    'c'\n    >>> first_non_repeated_char('google')\n    'e'\n    >>> first_non_repeated_char('facebook')\n    'a'\n    \"\"\"\n    char_dict: dict[str, int] = {}\n    for char in string:\n        if char in char_dict:\n            char_dict[char] += 1\n        else:\n            char_dict[char] = 1\n    for char in string:\n        if char_dict[char] == 1:\n            return char\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod(verbose=True)"
    },
    {
      "rank": 19,
      "score": 9.177268828905222,
      "candidate": "def first_non_repeated_char(str1):\n    char_freq = {}\n    for char in str1:\n        if char in char_freq:\n            char_freq[char] += 1\n        else:\n            char_freq[char] = 1\n\n    for char in str1:\n        if char_freq[char] == 1:\n            return char\n    return None\n\n\nprint(first_non_repeated_char(\"google\"))\nprint(first_non_repeated_char(\"geeksforgeeks\"))\nprint(first_non_repeated_char(\"aaabb\"))"
    },
    {
      "rank": 20,
      "score": 9.122564458729856,
      "candidate": "def first_non_repeated_character(string: str) -> str:\n    \"\"\"Returns the first non-repeated character in a given string.\n\n    Args:\n        string (str): Given string.\n\n    Returns:\n        str: The first non-repeated character in the given string.\n    \"\"\"\n    char_map: dict = {}\n    for char in string:\n        if char in char_map:\n            char_map[char] += 1\n        else:\n            char_map[char] = 1\n    for char in string:\n        if char_map[char] == 1:\n            return char\n\n\nif __name__ == \"__main__\":\n    print(first_non_repeated_character(\"abcabc\"))"
    },
    {
      "rank": 21,
      "score": 8.973005557553902,
      "candidate": "def first_non_repeated_character(text):\n    \"\"\"\n    >>> first_non_repeated_character('abacabad')\n    'c'\n    >>> first_non_repeated_character('abacaba')\n    'a'\n    >>> first_non_repeated_character('abacaba')\n    'a'\n    \"\"\"\n    if not text:\n        return\n\n    counter = {}\n    for c in text:\n        if c not in counter:\n            counter[c] = 1\n        else:\n            counter[c] += 1\n\n    for c in text:\n        if counter[c] == 1:\n            return c\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 22,
      "score": 8.95994420569242,
      "candidate": "from collections import Counter\n\n\ndef first_non_repeated_char(input_str):\n    \"\"\"\n    First non-repeated character in a given string\n    :param input_str:\n    :return:\n    \"\"\"\n    char_counter = Counter(input_str)\n    for ch in input_str:\n        if char_counter[ch] == 1:\n            return ch\n\n\ndef first_non_repeated_char_optimized(input_str):\n    \"\"\"\n    First non-repeated character in a given string\n    :param input_str:\n    :return:\n    \"\"\"\n    char_set = set()\n    for ch in input_str:\n        if ch not in char_set:\n            char_set.add(ch)\n        else:\n            char_set.remove(ch)\n    return char_set.pop()\n\n\nif __name__ == \"__main__\":\n    str_input = \"abacabad\"\n    print(first_non_repeated_char(str_input))\n    print(first_non_repeated_char_optimized(str_input))"
    },
    {
      "rank": 23,
      "score": 8.946210893390457,
      "candidate": "from collections import Counter\n\n\ndef find_first_non_repeated_char(input_str):\n    char_count = Counter(input_str)\n    for char in input_str:\n        if char_count[char] == 1:\n            return char\n    return None\n\n\ndef test_function(test_case):\n    test_input, test_expected = test_case\n    test_actual = find_first_non_repeated_char(test_input)\n    if test_actual == test_expected:\n        print(\"Pass\")\n    else:\n        print(\"Fail\")\n\n\ntest_function((\"Python\", \"y\"))\ntest_function((\"Java\", \"j\"))\ntest_function((\"PHP\", None))\ntest_function((\"Perl\", \"p\"))\ntest_function((\"Ruby\", \"r\"))\ntest_function((\"C\", \"c\"))\ntest_function((\"C++\", \"c\"))\ntest_function((\"C#\", \"c\"))\ntest_function((\"Java\", \"j\"))\ntest_function((\"JavaScript\", \"j\"))\ntest_function((\"Ruby\", \"r\"))\ntest_function((\"C++\", \"c\"))\ntest_function((\"PHP\", \"p\"))\ntest_function((\"Go\", \"g\"))\ntest_function((\"C\", \"c\"))\ntest_function((\"C++\", \"c\"))\ntest_function((\"Java\", \"j\"))\ntest_function((\"C#\", \"c\"))\ntest_function((\"Python\", \"y\"))\ntest_function((\"Java\", \"j\"))\ntest_function((\"PHP\", None))\ntest_function((\"Perl\", \"p\"))\ntest_function((\"Ruby\", \"r\"))\ntest_function((\"C\", \"c\"))\ntest_function((\"C++\", \"c\"))\ntest_function((\"C#\", \"c\"))\ntest_function((\"Java\", \"j\"))\ntest_function((\"JavaScript\", \"j\"))\ntest_function((\"Ruby\", \"r\"))\ntest_function((\"C++\", \"c\"))\ntest_function((\"PHP\", \"p\"))\ntest_function((\"Go\", \"g\"))\ntest_function"
    },
    {
      "rank": 24,
      "score": 8.932217008005624,
      "candidate": "from collections import Counter\n\n\ndef first_non_repeated_char(string: str) -> str:\n    \"\"\"Returns the first non-repeated character in a string.\n\n    Args:\n        string (str): string to be processed.\n\n    Returns:\n        str: first non-repeated character in the string.\n    \"\"\"\n    counter: Counter = Counter(string)\n    for character in string:\n        if counter[character] == 1:\n            return character"
    },
    {
      "rank": 25,
      "score": 8.910084504002544,
      "candidate": "def first_non_repeated_character(input_str):\n    input_str = input_str.lower()\n    count = {}\n    for char in input_str:\n        if char in count:\n            count[char] += 1\n        else:\n            count[char] = 1\n\n    for char in input_str:\n        if count[char] == 1:\n            return char\n\n    return None"
    },
    {
      "rank": 26,
      "score": 8.85571690049604,
      "candidate": "def first_non_repeated_char(string):\n    char_dict = {}\n    for char in string:\n        if char not in char_dict:\n            char_dict[char] = 1\n        else:\n            char_dict[char] += 1\n    for char in string:\n        if char_dict[char] == 1:\n            return char\n    return None\n\n\nprint(first_non_repeated_char(\"google\"))\nprint(first_non_repeated_char(\"gooogle\"))"
    },
    {
      "rank": 27,
      "score": 8.855395696632057,
      "candidate": "def find_first_non_repeated_character(string):\n    \"\"\"\n    Time complexity: O(n)\n    Space complexity: O(n)\n    \"\"\"\n    counter = {}\n    for char in string:\n        if char in counter:\n            counter[char] += 1\n        else:\n            counter[char] = 1\n    for char in string:\n        if counter[char] == 1:\n            return char\n    return None\n\ndef find_first_non_repeated_character_with_set(string):\n    \"\"\"\n    Time complexity: O(n)\n    Space complexity: O(n)\n    \"\"\"\n    char_set = set()\n    for char in string:\n        if char not in char_set:\n            char_set.add(char)\n        else:\n            char_set.remove(char)\n    if char_set:\n        return char_set.pop()\n    return None\n\ndef find_first_non_repeated_character_with_dict(string):\n    \"\"\"\n    Time complexity: O(n)\n    Space complexity: O(n)\n    \"\"\"\n    char_dict = {}\n    for char in string:\n        if char not in char_dict:\n            char_dict[char] = 1\n        else:\n            char_dict[char] += 1\n    for char in string:\n        if char_dict[char] == 1:\n            return char\n    return None"
    },
    {
      "rank": 28,
      "score": 8.850707355641543,
      "candidate": "def first_non_repeated(string):\n    char_freq = {}\n    for char in string:\n        if char not in char_freq:\n            char_freq[char] = 1\n        else:\n            char_freq[char] += 1\n\n    for char in string:\n        if char_freq[char] == 1:\n            return char\n\n\nprint(first_non_repeated(\"google\"))\nprint(first_non_repeated(\"geeksforgeeks\"))"
    },
    {
      "rank": 29,
      "score": 8.8281618090209,
      "candidate": "def first_non_repeated_character(string):\n    \"\"\"\n    First non-repeated character in a string\n    :param string:\n    :return:\n    \"\"\"\n    unique_chars = set()\n    for char in string:\n        if char not in unique_chars:\n            unique_chars.add(char)\n        else:\n            unique_chars.remove(char)\n            unique_chars.add(char)\n\n    if len(unique_chars) > 0:\n        return list(unique_chars)[0]\n    return None\n\n\nif __name__ == '__main__':\n    test_string = \"abacabad\"\n    print(first_non_repeated_character(test_string))"
    },
    {
      "rank": 30,
      "score": 8.81367773444215,
      "candidate": "def first_non_repeated_character(input_string):\n    \"\"\"\n    Finds the first non-repeated character in a given string.\n\n    Args:\n       input_string(string): Input string\n    Returns:\n       char: First non-repeated character\n    \"\"\"\n    char_dict = {}\n    for i in input_string:\n        if i in char_dict:\n            char_dict[i] += 1\n        else:\n            char_dict[i] = 1\n    for i in input_string:\n        if char_dict[i] == 1:\n            return i\n    return None\n\n\n# Test cases\nprint(first_non_repeated_character('aabccbd'))\nprint(first_non_repeated_character('aabbccbd'))\nprint(first_non_repeated_character('aabbccbbd'))\nprint(first_non_repeated_character('aabbbccbd'))\nprint(first_non_repeated_character('aabbbccbbd'))\nprint(first_non_repeated_character('aabbbccbbbdd'))\nprint(first_non_repeated_character(''))\nprint(first_non_repeated_character('a'))\nprint(first_non_repeated_character('aa'))"
    },
    {
      "rank": 31,
      "score": 8.76828871349479,
      "candidate": "def non_repeated_character(string):\n    char_dict = {}\n    for char in string:\n        if char not in char_dict:\n            char_dict[char] = 1\n        else:\n            char_dict[char] += 1\n    for char in string:\n        if char_dict[char] == 1:\n            return char\n    return None\nprint(non_repeated_character(\"google\"))\nprint(non_repeated_character(\"geeksforgeeks\"))"
    },
    {
      "rank": 32,
      "score": 8.750282588864879,
      "candidate": "def first_non_repeated(input_str):\n    \"\"\"\n    >>> first_non_repeated(\"python\")\n    'y'\n    >>> first_non_repeated(\"hubba bubba\")\n    'b'\n    >>> first_non_repeated(\"aabbccdde\")\n    'e'\n    \"\"\"\n    repeated = {}\n    for char in input_str:\n        if char in repeated:\n            repeated[char] += 1\n        else:\n            repeated[char] = 1\n    for char in input_str:\n        if repeated[char] == 1:\n            return char\n    return None\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 33,
      "score": 8.715724466237427,
      "candidate": "def first_non_repeated_character(string):\n    \"\"\"\n    This function takes in a string and returns the first non-repeated character.\n    >>> first_non_repeated_character(\"banana\")\n    'b'\n    >>> first_non_repeated_character(\"aabbc\")\n    'c'\n    >>> first_non_repeated_character(\"aabbca\")\n    'a'\n    >>> first_non_repeated_character(\"banana\")\n    'b'\n    >>> first_non_repeated_character(\"\")\n    Traceback (most recent call last):\n        ...\n    ValueError: The string must contain at least one character.\n    \"\"\"\n    if len(string) == 0:\n        raise ValueError(\"The string must contain at least one character.\")\n    for character in string:\n        if string.count(character) == 1:\n            return character\n    return None\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 34,
      "score": 8.692801520950061,
      "candidate": "def first_non_repeated_char(str):\n    # your code goes here\n    hash = {}\n    for char in str:\n        if char in hash:\n            hash[char] += 1\n        else:\n            hash[char] = 1\n\n    for char in str:\n        if hash[char] == 1:\n            return char\n\n    return None\n\n\nprint(first_non_repeated_char('abcdcaf'))\nprint(first_non_repeated_char('google'))\nprint(first_non_repeated_char('facebook'))\nprint(first_non_repeated_char('googlefacebook'))\nprint(first_non_repeated_char('ddddd'))"
    },
    {
      "rank": 35,
      "score": 8.632293453617281,
      "candidate": "def first_non_repeated(s):\n    char_count = {}\n    for c in s:\n        if c in char_count:\n            char_count[c] += 1\n        else:\n            char_count[c] = 1\n\n    for c in s:\n        if char_count[c] == 1:\n            return c\n\n\ndef test_first_non_repeated():\n    assert first_non_repeated('aabbc') == 'c'\n\n\nif __name__ == '__main__':\n    print(\"First non-repeated char: \" + first_non_repeated('aabbc'))"
    },
    {
      "rank": 36,
      "score": 8.625262456968262,
      "candidate": "def first_non_repeated_char(input_str):\n    \"\"\"\n    Finds the first non-repeated character in a given string.\n\n    >>> first_non_repeated_char('google')\n    'l'\n    >>> first_non_repeated_char('apple')\n    'p'\n    >>> first_non_repeated_char('aabbbc')\n    'c'\n    >>> first_non_repeated_char('aabbcc')\n    None\n    \"\"\"\n    char_freq = {}\n\n    for char in input_str:\n        if char in char_freq:\n            char_freq[char] += 1\n        else:\n            char_freq[char] = 1\n\n    for char in input_str:\n        if char_freq[char] == 1:\n            return char\n\n    return None\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 37,
      "score": 8.625142247198651,
      "candidate": "from collections import Counter\n\n\ndef find_first_non_repeated_char(string):\n    \"\"\"\n    find the first non-repeated character in a given string.\n    :param string: string\n    :return: first non-repeated character\n    \"\"\"\n    counter = Counter(string)\n    for char in string:\n        if counter[char] == 1:\n            return char\n\n\nif __name__ == \"__main__\":\n    string = \"aabcc\"\n    result = find_first_non_repeated_char(string)\n    print(result)"
    },
    {
      "rank": 38,
      "score": 8.616253589228675,
      "candidate": "def find_first_non_repeated_char(string: str) -> str:\n    \"\"\"\n    >>> find_first_non_repeated_char(\"abcdef\")\n    'f'\n    >>> find_first_non_repeated_char(\"abcabcd\")\n    'b'\n    >>> find_first_non_repeated_char(\"abcabc\")\n    ''\n    \"\"\"\n    chars = {}\n    for char in string:\n        if char in chars:\n            chars[char] += 1\n        else:\n            chars[char] = 1\n\n    for char in string:\n        if chars[char] == 1:\n            return char\n\n    return \"\"\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 39,
      "score": 8.610076160146226,
      "candidate": "def first_non_repeated(input_str):\n    if len(input_str) <= 0:\n        return None\n    char_dict = {}\n    for char in input_str:\n        if char in char_dict:\n            char_dict[char] += 1\n        else:\n            char_dict[char] = 1\n    for char in input_str:\n        if char_dict[char] == 1:\n            return char\n    return None"
    },
    {
      "rank": 40,
      "score": 8.606486429141842,
      "candidate": "from collections import Counter\n\n\ndef first_non_repeated_char(input_string):\n    # 1. get the count of all characters\n    count_dict = Counter(input_string)\n    # 2. iterate over the string and find the first character with count 1\n    for char in input_string:\n        if count_dict[char] == 1:\n            return char\n    # 3. if no character is found return empty string\n    return \"\"\n\n\nif __name__ == \"__main__\":\n    test_string = \"abcdcaf\"\n    print(first_non_repeated_char(test_string))"
    },
    {
      "rank": 41,
      "score": 8.60156811074208,
      "candidate": "def first_non_repeated_char(str1):\n    char_freq = {}\n    for char in str1:\n        if char not in char_freq:\n            char_freq[char] = 1\n        else:\n            char_freq[char] += 1\n\n    for char in str1:\n        if char_freq[char] == 1:\n            return char\n\n    return None\n\n\nif __name__ == \"__main__\":\n    print(first_non_repeated_char(\"abcabc\"))\n    print(first_non_repeated_char(\"abca\"))\n    print(first_non_repeated_char(\"abcabcd\"))"
    },
    {
      "rank": 42,
      "score": 8.565425580227462,
      "candidate": "def find_first_non_repeated_character(input_string):\n    \"\"\"\n    Find the first non-repeated character in a given string.\n\n    :param input_string: Input string.\n    :return: First non-repeated character.\n    \"\"\"\n    char_frequency = {}\n\n    for char in input_string:\n        if char in char_frequency:\n            char_frequency[char] += 1\n        else:\n            char_frequency[char] = 1\n\n    for char in input_string:\n        if char_frequency[char] == 1:\n            return char\n\n    return None"
    },
    {
      "rank": 43,
      "score": 8.548876241946822,
      "candidate": "from collections import Counter\n\n\ndef first_non_repeated_character(input_str):\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(n)\n    \"\"\"\n    counter = Counter(input_str)\n\n    for char in input_str:\n        if counter[char] == 1:\n            return char\n    return None"
    },
    {
      "rank": 44,
      "score": 8.542875062379007,
      "candidate": "def firstNonRepeatingCharacter(string):\n    # Your code here\n    d = {}\n    for char in string:\n        if char not in d:\n            d[char] = 1\n        else:\n            d[char] += 1\n    for char in string:\n        if d[char] == 1:\n            return char\n    return None"
    },
    {
      "rank": 45,
      "score": 8.53012858503943,
      "candidate": "def first_non_repeated(str_):\n    \"\"\"\n    We can solve this problem in linear time by using a hash table. We go through each character in the string and\n    add the characters to a dictionary. We check to see if the character is already in the dictionary, if it is\n    not then we add it to the dictionary. If it is, we do nothing. Then we iterate over the dictionary, if a value\n    is 1, we return the key.\n    \"\"\"\n    char_dict = {}\n    for char in str_:\n        if char in char_dict:\n            continue\n        char_dict[char] = 1\n\n    for key, value in char_dict.items():\n        if value == 1:\n            return key\n    return None"
    },
    {
      "rank": 46,
      "score": 8.499905739299377,
      "candidate": "def first_non_repeated(str1):\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    for char in str1:\n        if char_count[char] == 1:\n            return char\n    return None\n\nprint(first_non_repeated(\"google\"))"
    },
    {
      "rank": 47,
      "score": 8.48796797856353,
      "candidate": "from collections import Counter\n\n\ndef first_non_repeated(input_str):\n    counter = Counter(input_str)\n\n    for char in input_str:\n        if counter[char] == 1:\n            return char\n\n\ndef first_non_repeated_alt(input_str):\n    count_dict = {}\n\n    for char in input_str:\n        if char not in count_dict:\n            count_dict[char] = 1\n        else:\n            count_dict[char] += 1\n\n    for char in input_str:\n        if count_dict[char] == 1:\n            return char\n\n\ndef first_non_repeated_alt_2(input_str):\n    count_dict = {}\n\n    for char in input_str:\n        if char in count_dict:\n            count_dict[char] += 1\n        else:\n            count_dict[char] = 1\n\n    for char in input_str:\n        if count_dict[char] == 1:\n            return char\n\n\nprint(first_non_repeated(\"google\"))\nprint(first_non_repeated_alt(\"google\"))\nprint(first_non_repeated_alt_2(\"google\"))"
    },
    {
      "rank": 48,
      "score": 8.478208546788407,
      "candidate": "def firstNonRepeatedCharacter(string):\n    char_count = {}\n    for char in string:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    for char in string:\n        if char_count[char] == 1:\n            return char\n    return None\n\nprint(firstNonRepeatedCharacter(\"google\"))\nprint(firstNonRepeatedCharacter(\"gooogle\"))"
    },
    {
      "rank": 49,
      "score": 8.437695832075478,
      "candidate": "from collections import defaultdict\n\n\ndef first_non_repeated_character(string):\n    count = defaultdict(int)\n\n    for char in string:\n        count[char] += 1\n\n    for char in string:\n        if count[char] == 1:\n            return char\n\n    return None\n\n\ndef main():\n    string = \"abcdefgabcdefg\"\n    result = first_non_repeated_character(string)\n    print(result)\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 50,
      "score": 8.426531424889468,
      "candidate": "from collections import Counter\n\n\ndef first_non_repeated(string):\n    # This function is a modified version of the function from the book\n    if not string:\n        return None\n    count = Counter(string)\n    for char in string:\n        if count[char] == 1:\n            return char\n    return None\n\n\ndef first_non_repeated_v2(string):\n    if not string:\n        return None\n    for char in string:\n        if string.count(char) == 1:\n            return char\n    return None\n\n\nif __name__ == \"__main__\":\n    print(first_non_repeated(\"abca\"))\n    print(first_non_repeated_v2(\"abca\"))"
    },
    {
      "rank": 51,
      "score": 8.408439383654278,
      "candidate": "def first_non_repeated_char(input_string):\n    \"\"\"\n    >>> first_non_repeated_char('Python')\n    'y'\n    \"\"\"\n    # convert the string to a list\n    input_string = list(input_string)\n\n    # traverse the list\n    for i in range(len(input_string)):\n        # if the current character is present in the sublist of characters\n        # that follow the current character\n        if input_string[i] in input_string[i + 1 :]:\n            # remove the current character from the list\n            input_string.remove(input_string[i])\n\n    # if the list is not empty, return the first character\n    if input_string:\n        return input_string[0]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 52,
      "score": 8.386620303250325,
      "candidate": "def first_non_repeated_character(input_string):\n    \"\"\"\n    This function takes in a string and returns the first non-repeated character.\n    \"\"\"\n    # initialize a dictionary\n    char_dict = {}\n    # loop over the input string\n    for char in input_string:\n        # check if the character is already in the dictionary\n        if char in char_dict:\n            # if it is, increment the count\n            char_dict[char] += 1\n        # otherwise, add it to the dictionary\n        else:\n            char_dict[char] = 1\n    # loop over the input string again\n    for char in input_string:\n        # check if the character is only listed once\n        if char_dict[char] == 1:\n            # return the character\n            return char\n    # if nothing is returned\n    return None\n\nprint(first_non_repeated_character(\"ababacd\"))"
    },
    {
      "rank": 53,
      "score": 8.375312293858853,
      "candidate": "def first_non_repeated_char(str):\n    count_dict = {}\n    for char in str:\n        if char in count_dict:\n            count_dict[char] += 1\n        else:\n            count_dict[char] = 1\n\n    for char in str:\n        if count_dict[char] == 1:\n            return char\n\nprint(first_non_repeated_char('google'))"
    },
    {
      "rank": 54,
      "score": 8.351614956112536,
      "candidate": "from collections import Counter\n\n\ndef first_non_repeated_char(input_str):\n    \"\"\"\n    Finds the first non-repeated character in a given string\n    :param input_str: string to find the non-repeated character\n    :return: first non-repeated character\n    \"\"\"\n    counter = Counter(input_str)\n    for char in input_str:\n        if counter[char] == 1:\n            return char\n    return None\n\n\ndef main():\n    print(\"First non-repeated character: \" + first_non_repeated_char(\"aabccbd\"))\n    print(\"First non-repeated character: \" + first_non_repeated_char(\"aabbccdde\"))\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 55,
      "score": 8.331556294201176,
      "candidate": "def first_non_repeated_character(str1):\n    \"\"\"\n    >>> first_non_repeated_character('Python')\n    'y'\n    >>> first_non_repeated_character('JavaScript')\n    'a'\n    >>> first_non_repeated_character('Java')\n    'a'\n    >>> first_non_repeated_character('JavaSc')\n    'c'\n    >>> first_non_repeated_character('')\n    ''\n    \"\"\"\n    # Check for empty string\n    if str1 == \"\":\n        return \"\"\n\n    # Use a set to store the characters in the string\n    str_set = set(str1)\n\n    # Iterate through the characters in the string\n    for char in str1:\n        if char in str_set:\n            str_set.remove(char)\n\n    # Return the first character\n    return str_set.pop()\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 56,
      "score": 8.327375965969855,
      "candidate": "from collections import Counter\n\n\ndef first_non_repeated_character(string):\n    if not string:\n        return None\n    counter = Counter(string)\n    for char in string:\n        if counter[char] == 1:\n            return char\n    return None\n\n\nif __name__ == \"__main__\":\n    assert first_non_repeated_character(\"google\") == \"e\", \"Should be e\"\n    assert first_non_repeated_character(\"gogogogo\") is None, \"Should be None\""
    },
    {
      "rank": 57,
      "score": 8.327367757082776,
      "candidate": "def find_first_non_repeated_char(string):\n    char_map = dict()\n    for char in string:\n        if char in char_map:\n            char_map[char] += 1\n        else:\n            char_map[char] = 1\n\n    for char in string:\n        if char_map[char] == 1:\n            return char\n\n    return None\n\n\nprint(find_first_non_repeated_char(\"Python\"))\nprint(find_first_non_repeated_char(\"Java\"))\nprint(find_first_non_repeated_char(\"PHP\"))"
    },
    {
      "rank": 58,
      "score": 8.298597569547805,
      "candidate": "def firstNonRepeatedCharacter(input_string):\n    char_dict = {}\n    for char in input_string:\n        if char in char_dict:\n            char_dict[char] += 1\n        else:\n            char_dict[char] = 1\n    for char in input_string:\n        if char_dict[char] == 1:\n            return char\n    return None\n\nif __name__ == '__main__':\n    test_string = \"aaabbcde\"\n    print(\"First non-repeated character in {0} is: {1}\".format(test_string, firstNonRepeatedCharacter(test_string)))"
    },
    {
      "rank": 59,
      "score": 8.294940769211511,
      "candidate": "from collections import Counter\n\n\ndef first_non_repeated_character(string):\n    char_frequencies = Counter(string)\n\n    for char in string:\n        if char_frequencies[char] == 1:\n            return char\n\n    return None\n\n\nprint(first_non_repeated_character(\"google\"))\nprint(first_non_repeated_character(\"geeksforgeeks\"))\nprint(first_non_repeated_character(\"gogogogo\"))"
    },
    {
      "rank": 60,
      "score": 8.2938925966498,
      "candidate": "from collections import Counter\n\n\ndef first_non_repeated(text):\n    char_count = Counter(text)\n    for char in text:\n        if char_count[char] == 1:\n            return char\n    return None\n\n\nif __name__ == \"__main__\":\n    print(first_non_repeated(\"google\"))\n    print(first_non_repeated(\"geeksforgeeks\"))\n    print(first_non_repeated(\"geeks\"))"
    },
    {
      "rank": 61,
      "score": 8.289838256518838,
      "candidate": "def first_non_repeated(string):\n    char_count = {}\n    for c in string:\n        if c in char_count:\n            char_count[c] += 1\n        else:\n            char_count[c] = 1\n\n    for c in string:\n        if char_count[c] == 1:\n            return c\n\n\nprint(first_non_repeated(\"aaabbb\"))\nprint(first_non_repeated(\"aabbbb\"))\nprint(first_non_repeated(\"abcdefg\"))"
    },
    {
      "rank": 62,
      "score": 8.251903304236286,
      "candidate": "def first_non_repeated_character(string: str) -> str:\n    \"\"\"Return the first non-repeated character in a string.\"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"Argument should be a string\")\n\n    if not string:\n        raise ValueError(\"Argument cannot be empty\")\n\n    # create a set of characters\n    characters = set()\n    for char in string:\n        if char in characters:\n            characters.remove(char)\n        else:\n            characters.add(char)\n\n    return characters.pop() if characters else None"
    },
    {
      "rank": 63,
      "score": 8.214125058964552,
      "candidate": "def first_non_repeated_character(input_str):\n    \"\"\"\n    This function takes in a string and returns the first character that is not repeated.\n\n    >>> first_non_repeated_character(\"aabbcceffg\")\n    'e'\n    >>> first_non_repeated_character(\"aabbccdde\")\n    'd'\n    >>> first_non_repeated_character(\"aabbccddee\")\n    'Not Present'\n    >>> first_non_repeated_character(\"\")\n    'Not Present'\n    \"\"\"\n    if input_str == \"\":\n        return \"Not Present\"\n\n    # The following dictionary will store the count of each character in the given string.\n    char_count_dict = {}\n\n    for char in input_str:\n        if char in char_count_dict:\n            char_count_dict[char] += 1\n        else:\n            char_count_dict[char] = 1\n\n    for char in input_str:\n        if char_count_dict[char] == 1:\n            return char\n\n    return \"Not Present\"\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 64,
      "score": 8.212735598038213,
      "candidate": "def first_non_repeated_character(str):\n    char_count = {}\n    for char in str:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    for char in str:\n        if char_count[char] == 1:\n            return char\n    return None\n\n\nprint(first_non_repeated_character('google'))\nprint(first_non_repeated_character('googlegoogle'))\nprint(first_non_repeated_character('googlegooglebook'))"
    },
    {
      "rank": 65,
      "score": 8.211579567659316,
      "candidate": "def first_non_repeated_char(input_str):\n    \"\"\"\n    >>> first_non_repeated_char('abaccdeff')\n    'b'\n    >>> first_non_repeated_char('google')\n    'l'\n    >>> first_non_repeated_char('aabbcc')\n    ''\n    \"\"\"\n    char_count = {}\n    for char in input_str:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n\n    for char in input_str:\n        if char_count[char] == 1:\n            return char\n\n    return \"\"\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 66,
      "score": 8.209707251476969,
      "candidate": "def first_non_repeated_character(input_str):\n    # create a dictionary for count of characters\n    char_count = {}\n    # iterate over each character in string\n    for char in input_str:\n        # if character is present in dictionary increment count by 1\n        if char in char_count:\n            char_count[char] += 1\n        # if character is not present in dictionary add it to dictionary with count 1\n        else:\n            char_count[char] = 1\n\n    # iterate over each character in string\n    for char in input_str:\n        # if count of character is 1 return character\n        if char_count[char] == 1:\n            return char\n\n    # if no character has count 1 return None\n    return None\n\n\nprint(first_non_repeated_character('google'))\nprint(first_non_repeated_character('geeksforgeeks'))"
    },
    {
      "rank": 67,
      "score": 8.2048573255218,
      "candidate": "def first_non_repeated_character(input_str: str) -> str:\n    \"\"\"\n    :param input_str: str\n    :return: str\n    \"\"\"\n    result = ''\n    input_str = input_str.lower()\n    for char in input_str:\n        if input_str.count(char) == 1:\n            result = char\n            break\n    return result\n\n\nif __name__ == '__main__':\n    print(first_non_repeated_character('Hello world'))\n    print(first_non_repeated_character('aabbcc'))\n    print(first_non_repeated_character('Hello world!'))\n    print(first_non_repeated_character('aabbcc'))\n    print(first_non_repeated_character(''))"
    },
    {
      "rank": 68,
      "score": 8.172253082181854,
      "candidate": "def firstNonRepeatedCharacter(str):\n    dict = {}\n    for i in str:\n        if i in dict:\n            dict[i] += 1\n        else:\n            dict[i] = 1\n    for i in str:\n        if dict[i] == 1:\n            return i\n    return \"None\"\n\nprint(firstNonRepeatedCharacter('abcabc'))\nprint(firstNonRepeatedCharacter('abccba'))"
    },
    {
      "rank": 69,
      "score": 8.163300679823958,
      "candidate": "def find_first_non_repeated_character(input_str):\n    char_map = {}\n\n    for char in input_str:\n        if char not in char_map:\n            char_map[char] = 1\n        else:\n            char_map[char] += 1\n\n    for char in input_str:\n        if char_map[char] == 1:\n            return char\n\n    return None"
    },
    {
      "rank": 70,
      "score": 8.144125099485041,
      "candidate": "def first_non_repeated(string: str) -> str:\n    \"\"\"Returns the first non-repeated character in a given string.\"\"\"\n    if not string:\n        return \"\"\n\n    char_count = {}\n\n    for char in string:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n\n    for char in string:\n        if char_count[char] == 1:\n            return char\n\n    return \"\""
    },
    {
      "rank": 71,
      "score": 8.143591138329747,
      "candidate": "def first_non_repeated(input_str: str) -> str:\n    \"\"\"\n    :param input_str: string to find first non-repeated character in\n    :type input_str: str\n    :return: first non-repeated character in input_str\n    :rtype: str\n    \"\"\"\n    counts = {}\n    for char in input_str:\n        if char in counts:\n            counts[char] += 1\n        else:\n            counts[char] = 1\n\n    for char in input_str:\n        if counts[char] == 1:\n            return char\n\n    return None\n\n\ndef first_non_repeated_2(input_str: str) -> str:\n    \"\"\"\n    :param input_str: string to find first non-repeated character in\n    :type input_str: str\n    :return: first non-repeated character in input_str\n    :rtype: str\n    \"\"\"\n    char_counts = {}\n    for char in input_str:\n        if char in char_counts:\n            char_counts[char] += 1\n        else:\n            char_counts[char] = 1\n\n    for char in input_str:\n        if char_counts[char] == 1:\n            return char\n\n    return None\n\n\nif __name__ == \"__main__\":\n    input_str = \"abacabad\"\n    print(first_non_repeated(input_str))\n    print(first_non_repeated_2(input_str))"
    },
    {
      "rank": 72,
      "score": 8.121884567141883,
      "candidate": "def first_non_repeated_character(input_string):\n    \"\"\"\n    :param input_string: input string\n    :return: the first non-repeated character in the given string\n    \"\"\"\n    char_dict = dict()\n\n    for char in input_string:\n        if char in char_dict:\n            char_dict[char] += 1\n        else:\n            char_dict[char] = 1\n\n    for char in input_string:\n        if char_dict[char] == 1:\n            return char\n\n    return None"
    },
    {
      "rank": 73,
      "score": 8.105983444291466,
      "candidate": "def first_non_repeated(input_string):\n    \"\"\"\n    Find the first non-repeated character in a given string.\n\n    :param input_string: str\n    :return: str\n    \"\"\"\n    char_count = {}\n    for char in input_string:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n\n    for char in input_string:\n        if char_count[char] == 1:\n            return char\n\n\nprint(first_non_repeated(\"abcabc\"))\nprint(first_non_repeated(\"aabbcceff\"))"
    },
    {
      "rank": 74,
      "score": 8.08452234024709,
      "candidate": "def first_non_repeated_char(string):\n    \"\"\"\n    >>> first_non_repeated_char('aabbc')\n    'c'\n    >>> first_non_repeated_char('abcdef')\n    'f'\n    \"\"\"\n    count = dict()\n    for char in string:\n        if char in count:\n            count[char] += 1\n        else:\n            count[char] = 1\n    for char in string:\n        if count[char] == 1:\n            return char\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 75,
      "score": 8.024835682833125,
      "candidate": "def first_non_repeated(string):\n    dict = {}\n    for i in string:\n        if i in dict:\n            dict[i] += 1\n        else:\n            dict[i] = 1\n    for i in string:\n        if dict[i] == 1:\n            return i\n    return None\n\nprint(first_non_repeated(\"google\"))"
    },
    {
      "rank": 76,
      "score": 7.990432406683839,
      "candidate": "def first_non_repeated(str1):\n    char_freq = {}\n    for char in str1:\n        if char in char_freq:\n            char_freq[char] += 1\n        else:\n            char_freq[char] = 1\n\n    for char in str1:\n        if char_freq[char] == 1:\n            return char\n    return None\n\n\nif __name__ == \"__main__\":\n    str1 = \"google\"\n    str2 = \"googgo\"\n    str3 = \"goog\"\n\n    print(first_non_repeated(str1))\n    print(first_non_repeated(str2))\n    print(first_non_repeated(str3))"
    },
    {
      "rank": 77,
      "score": 7.938028884277233,
      "candidate": "def first_non_repeated(string: str) -> str:\n    \"\"\"Return the first non-repeated character in a given string.\n\n    Args:\n        string (str): the input string\n\n    Returns:\n        str: the first non-repeated character\n    \"\"\"\n    char_counts = {}\n\n    for char in string:\n        if char in char_counts:\n            char_counts[char] += 1\n        else:\n            char_counts[char] = 1\n\n    for char in string:\n        if char_counts[char] == 1:\n            return char\n\n    return \"\""
    },
    {
      "rank": 78,
      "score": 7.915588979966494,
      "candidate": "def first_non_repeated_character(string):\n    \"\"\"\n    :param string: str - input string\n    :return: char - first non repeated character\n    \"\"\"\n    if string is None:\n        raise TypeError(\"string can not be None\")\n\n    if len(string) == 0:\n        return None\n\n    char_count = {}\n    for char in string:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n\n    for char in string:\n        if char_count[char] == 1:\n            return char\n\n    return None"
    },
    {
      "rank": 79,
      "score": 7.8912769574414305,
      "candidate": "def non_repeated_char(string):\n    seen_dict = {}\n    for char in string:\n        if char not in seen_dict:\n            seen_dict[char] = 1\n        else:\n            seen_dict[char] += 1\n\n    for char in string:\n        if seen_dict[char] == 1:\n            return char\n    return None\n\n\nif __name__ == \"__main__\":\n    print(non_repeated_char(\"the quick brown fox jumps over the lazy dog\"))\n    print(non_repeated_char(\"google\"))\n    print(non_repeated_char(\"aabbcc\"))"
    },
    {
      "rank": 80,
      "score": 7.868947655733293,
      "candidate": "def first_non_repeated_char(string):\n    char_dict = {}\n    for char in string:\n        if char in char_dict:\n            char_dict[char] += 1\n        else:\n            char_dict[char] = 1\n\n    for char in string:\n        if char_dict[char] == 1:\n            return char\n\n    return None\n\n\nprint(first_non_repeated_char(\"google\"))"
    },
    {
      "rank": 81,
      "score": 7.84634113240411,
      "candidate": "def first_non_repeated_char(string):\n    \"\"\"\n    Finds the first non-repeated character in a string.\n    \"\"\"\n    counts = dict()\n    for char in string:\n        if char not in counts:\n            counts[char] = 1\n        else:\n            counts[char] += 1\n\n    for char in string:\n        if counts[char] == 1:\n            return char\n\n    return None\n\nif __name__ == '__main__':\n    print(first_non_repeated_char(\"abcabc\"))"
    },
    {
      "rank": 82,
      "score": 7.834022619458933,
      "candidate": "def first_non_repeated_char(input_str):\n    char_dict = {}\n    for char in input_str:\n        if char in char_dict:\n            char_dict[char] += 1\n        else:\n            char_dict[char] = 1\n\n    for char in input_str:\n        if char_dict[char] == 1:\n            return char\n\n    return None"
    },
    {
      "rank": 83,
      "score": 7.780351419995229,
      "candidate": "def first_non_repeated_character(input_string):\n    \"\"\"\n    >>> first_non_repeated_character('banana')\n    'b'\n    >>> first_non_repeated_character('edabit')\n    'e'\n    >>> first_non_repeated_character('edabitf')\n    'd'\n    >>> first_non_repeated_character('a')\n    'a'\n    >>> first_non_repeated_character('')\n    ''\n    \"\"\"\n    # your code here\n    # Create a dictionary\n    char_dict = {}\n    for char in input_string:\n        if char in char_dict:\n            char_dict[char] += 1\n        else:\n            char_dict[char] = 1\n    # Go through the string again\n    for char in input_string:\n        if char_dict[char] == 1:\n            return char\n    return \"\"\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 84,
      "score": 7.738292593776799,
      "candidate": "def first_non_repeated_char(input_str):\n    \"\"\"\n    Find the first non-repeated character in a given string.\n\n    >>> first_non_repeated_char('Python')\n    'y'\n    >>> first_non_repeated_char('Java')\n    'a'\n    \"\"\"\n    char_dict = {}\n    for char in input_str:\n        if char not in char_dict:\n            char_dict[char] = 1\n        else:\n            char_dict[char] += 1\n    for char in input_str:\n        if char_dict[char] == 1:\n            return char\n    return None\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 85,
      "score": 7.7320703513377165,
      "candidate": "from collections import Counter\n\n\ndef find_first_non_repeated_character(input_string):\n    \"\"\"\n    :param input_string: string input\n    :return: first non-repeated character\n    \"\"\"\n    char_freq = Counter(input_string)\n    for char in input_string:\n        if char_freq[char] == 1:\n            return char\n\n\ndef main():\n    \"\"\"\n    main function\n    \"\"\"\n    print(find_first_non_repeated_character(\"google\"))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 86,
      "score": 7.705183449260731,
      "candidate": "def first_non_repeated(str):\n    if str == None or len(str) == 0:\n        return None\n\n    char_count = {}\n    for char in str:\n        if char not in char_count:\n            char_count[char] = 1\n        else:\n            char_count[char] += 1\n\n    for char in str:\n        if char_count[char] == 1:\n            return char\n\n    return None\n\n\nif __name__ == \"__main__\":\n    print(first_non_repeated(\"abcabc\"))"
    },
    {
      "rank": 87,
      "score": 7.5819855281879285,
      "candidate": "def first_non_repeated_character(input_str: str) -> str:\n    \"\"\"\n    This function takes in a string and returns the first non-repeated character\n    >>> first_non_repeated_character('abcc')\n    'b'\n    >>> first_non_repeated_character('abab')\n    'c'\n    >>> first_non_repeated_character('aabbcce')\n    'd'\n    >>> first_non_repeated_character('aabbccee')\n    'd'\n    \"\"\"\n    # Using a dictionary to keep track of the count of the characters\n    char_count = {}\n    for char in input_str:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    # Iterating over the string to find the first non-repeated character\n    for char in input_str:\n        if char_count[char] == 1:\n            return char\n    # If no non-repeated character found, return -1\n    return -1\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 88,
      "score": 7.562924366763077,
      "candidate": "def first_non_repeated(string):\n    char_count = dict()\n    for char in string:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n\n    for char in string:\n        if char_count[char] == 1:\n            return char\n\n    return None\n\n\nif __name__ == \"__main__\":\n    test_cases = [\"abcdef\", \"aabbcd\", \"abcabd\", \"abcda\"]\n    for test in test_cases:\n        print(first_non_repeated(test))"
    },
    {
      "rank": 89,
      "score": 7.4878043221155455,
      "candidate": "def first_non_repeated_character(input_str):\n    \"\"\"\n    Finds the first non-repeated character in a given string\n    :param input_str: string\n    :return: first non-repeated character\n    \"\"\"\n    # initialize a dictionary to store the count of each character\n    char_count_dict = dict()\n    # traverse the input string\n    for char in input_str:\n        if char in char_count_dict:\n            char_count_dict[char] += 1\n        else:\n            char_count_dict[char] = 1\n    # traverse the input string again to find the first non-repeated character\n    for char in input_str:\n        if char_count_dict[char] == 1:\n            return char\n    return None\n\n\ndef main():\n    print(first_non_repeated_character('aaabbc'))\n    print(first_non_repeated_character('aabbcc'))\n    print(first_non_repeated_character('aabbc'))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 90,
      "score": 7.464609382504557,
      "candidate": "def first_non_repeated_character(input_string):\n    \"\"\"\n    Time complexity: O(n)\n    Space complexity: O(1)\n    \"\"\"\n    if not input_string:\n        return None\n\n    # Create a character map\n    char_map = {}\n    for char in input_string:\n        if char in char_map:\n            char_map[char] += 1\n        else:\n            char_map[char] = 1\n\n    # Find the first non-repeated character\n    for char in input_string:\n        if char_map[char] == 1:\n            return char\n\n    return None\n\n\nprint(first_non_repeated_character(\"abcdef\"))\nprint(first_non_repeated_character(\"aabccddeef\"))\nprint(first_non_repeated_character(\"abcdefe\"))\nprint(first_non_repeated_character(\"abcdefg\"))\nprint(first_non_repeated_character(\"aabbcdeefg\"))\nprint(first_non_repeated_character(\"abcdefgg\"))"
    },
    {
      "rank": 91,
      "score": 7.134571892399572,
      "candidate": "def non_repeated_char(str1):\n    char_dict = {}\n    for char in str1:\n        if char in char_dict:\n            char_dict[char] += 1\n        else:\n            char_dict[char] = 1\n\n    for char in str1:\n        if char_dict[char] == 1:\n            return char\n\n\nprint(non_repeated_char(\"abacabad\"))"
    },
    {
      "rank": 92,
      "score": 3.0,
      "candidate": "def first_non_repeated(input_string):\n    \"\"\"\n    Find the first non-repeated character in a given string.\n\n    Args:\n       input_string(string): Input string\n    Returns:\n       char: The first non-repeated character in the string\n    \"\"\"\n    if not input_string:\n        return None\n\n    char_count = {}\n\n    for char in input_string:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n\n    for char in input_string:\n        if char_count[char] == 1:\n            return char\n\n    return None\n\n\n# test case 1\ninput_string = \"aabbccdaada\"\nprint(first_non_repeated(input_string))\n\n# test case 2\ninput_string = \"aabbccd\"\nprint(first_non_repeated(input_string))\n\n# test case 3\ninput_string = \"aabbccd\"\nprint(first_non_repeated(input_string))\n\n# test case 4\ninput_string = \"\"\nprint(first_non_repeated(input_string))"
    },
    {
      "rank": 93,
      "score": 3.0,
      "candidate": "def first_non_repeated_char(string):\n    \"\"\"\n    Time complexity: O(n).\n    Space complexity: O(n).\n    \"\"\"\n    if not string:\n        return None\n\n    char_count = {}\n    for char in string:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n\n    for char in string:\n        if char_count[char] == 1:\n            return char\n\n    return None\n\n\ndef test_first_non_repeated_char():\n    \"\"\"\n    >>> test_first_non_repeated_char()\n    \"\"\"\n    assert first_non_repeated_char('google') == 'l'\n    assert first_non_repeated_char('abc') is None\n    assert first_non_repeated_char('aaabc') == 'c'\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 94,
      "score": 3.0,
      "candidate": "def firstNonRepeatedCharacter(s):\n    # Fill this in.\n\nprint (firstNonRepeatedCharacter('google'))\n# a\n\nprint (firstNonRepeatedCharacter('gogogogo'))\n# g\n\nprint (firstNonRepeatedCharacter('a'))\n# a\n\nprint (firstNonRepeatedCharacter('aaaaa'))\n# None\n\nprint (firstNonRepeatedCharacter('google'))\n# a\n\nprint (firstNonRepeatedCharacter('googleg'))\n# e\n\nprint (firstNonRepeatedCharacter(''))\n# None"
    },
    {
      "rank": 95,
      "score": 3.0,
      "candidate": "def first_non_repeated(string: str) -> str:\n    \"\"\"\n    Return the first non-repeated character in the string.\n    >>> first_non_repeated('hello')\n    'l'\n    >>> first_non_repeated('stress')\n    's'\n    >>> first_non_repeated('gooooogle')\n    'g'\n    >>> first_non_repeated('')\n    ''\n    >>> first_non_repeated('aabbb')\n    ''\n    >>> first_non_repeated('aabbcc')\n    ''\n    \"\"\"\n    # get the count of each character\n    char_count = {}\n    for char in string:\n        if char not in char_count:\n            char_count[char] = 1\n        else:\n            char_count[char] += 1\n    # iterate through the string and return the first non-repeated character\n    for char in string:\n        if char_count[char] == 1:\n            return char\n    return \"\"\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 96,
      "score": 3.0,
      "candidate": "def first_non_repeated_char(string):\n    \"\"\"\n    This function takes in a string and returns the first non-repeated character.\n\n    >>> first_non_repeated_char(\"string\")\n    's'\n    >>> first_non_repeated_char(\"hello\")\n    'e'\n    >>> first_non_repeated_char(\"geeksforgeeks\")\n    'f'\n    >>> first_non_repeated_char(\"\")\n    Traceback (most recent call last):\n        ...\n    ValueError: Invalid input string\n    \"\"\"\n    if string == \"\":\n        raise ValueError(\"Invalid input string\")\n    char_dict = dict()\n    for char in string:\n        if char in char_dict:\n            char_dict[char] += 1\n        else:\n            char_dict[char] = 1\n    for char in string:\n        if char_dict[char] == 1:\n            return char\n    return -1\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 97,
      "score": 3.0,
      "candidate": "def first_non_repeated_char(input_string: str) -> str:\n    \"\"\"Returns the first non-repeated character in a given string.\n\n    Args:\n        input_string (str): string to find the first non-repeated character\n\n    Returns:\n        str: first non-repeated character in the string\n    \"\"\"\n    if not input_string:\n        return \"\"\n\n    hash_map = {}\n    for character in input_string:\n        if character in hash_map:\n            hash_map[character] += 1\n        else:\n            hash_map[character] = 1\n\n    for character in input_string:\n        if hash_map[character] == 1:\n            return character\n\n    return \"\"\n\n\ndef test_first_non_repeated_char():\n    \"\"\"Test for first_non_repeated_char function.\"\"\"\n    assert first_non_repeated_char(\"google\") == \"l\"\n    assert first_non_repeated_char(\"gooogle\") == \"e\"\n    assert first_non_repeated_char(\"\") == \"\""
    },
    {
      "rank": 98,
      "score": 3.0,
      "candidate": "def first_non_repeated_character(input_str: str) -> str:\n    \"\"\"Returns the first non-repeated character in the given string.\n    >>> first_non_repeated_character('aabccbbcaa')\n    'b'\n    >>> first_non_repeated_character('abcdefghijklmnopqrstuvwxyz')\n    'a'\n    \"\"\"\n    if not input_str:\n        return \"\"\n\n    char_map = dict()\n\n    for char in input_str:\n        if char in char_map:\n            char_map[char] += 1\n        else:\n            char_map[char] = 1\n\n    for char in input_str:\n        if char_map[char] == 1:\n            return char\n\n\ndef first_non_repeated_character_using_collections_counter(input_str: str) -> str:\n    \"\"\"Returns the first non-repeated character in the given string.\n    >>> first_non_repeated_character_using_collections_counter('aabccbbcaa')\n    'b'\n    >>> first_non_repeated_character_using_collections_counter('abcdefghijklmnopqrstuvwxyz')\n    'a'\n    \"\"\"\n    from collections import Counter\n\n    char_counts = Counter(input_str)\n\n    for char in input_str:\n        if char_counts[char] == 1:\n            return char\n\n\ndef first_non_repeated_character_using_list(input_str: str) -> str:\n    \"\"\"Returns the first non-repeated character in the given string.\n    >>> first_non_repeated_character_using_list('aabccbbcaa')\n    'b'\n    >>> first_non_repeated_character_using_list('abcdefghijklmnopqrstuvwxyz')\n    'a'\n    \"\"\"\n    char_list = list(input_str)\n\n    for char in char_list:\n        if char_list.count(char) == 1:"
    },
    {
      "rank": 99,
      "score": 3.0,
      "candidate": "def first_non_repeated_character(input_str):\n    \"\"\"\n    >>> first_non_repeated_character('aabbcde')\n    'c'\n    >>> first_non_repeated_character('aaaabbbbbcddde')\n    'e'\n    >>> first_non_repeated_character('abcde')\n    'a'\n    >>> first_non_repeated_character('aabbcde')\n    'c'\n    >>> first_non_repeated_character('aabbcde')\n    'c'\n    >>> first_non_repeated_character('aabbcde')\n    'c'\n    >>> first_non_repeated_character('aabbcde')\n    'c'\n    >>> first_non_repeated_character('aabbcde')\n    'c'\n    >>> first_non_repeated_character('aabbcde')\n    'c'\n    \"\"\"\n    if not input_str:\n        return None\n\n    char_count_dict = {}\n\n    for char in input_str:\n        if char in char_count_dict:\n            char_count_dict[char] += 1\n        else:\n            char_count_dict[char] = 1\n\n    for char in input_str:\n        if char_count_dict[char] == 1:\n            return char\n\n    return None\n\n\ndef first_non_repeated_character_v2(input_str):\n    \"\"\"\n    >>> first_non_repeated_character_v2('aabbcde')\n    'c'\n    >>> first_non_repeated_character_v2('aaaabbbbbcddde')\n    'e'\n    >>> first_non_repeated_character_v2('abcde')\n    'a'\n    >>> first_non_repeated_character_v2('aabbcde')\n    'c'\n    >>> first_non_repeated_character_v2('aabbcde')\n    'c'\n    >>> first_non_repeated_character_v2('a"
    },
    {
      "rank": 100,
      "score": 3.0,
      "candidate": "def find_first_non_repeated_char(input_str):\n    \"\"\"\n    >>> find_first_non_repeated_char('abcdef')\n    'f'\n    >>> find_first_non_repeated_char('aabbcc')\n    'd'\n    >>> find_first_non_repeated_char('aabbccd')\n    'e'\n    >>> find_first_non_repeated_char('aaa')\n    'b'\n    >>> find_first_non_repeated_char('bbb')\n    'c'\n    >>> find_first_non_repeated_char('')\n    ''\n    \"\"\"\n    char_set = set()\n    for char in input_str:\n        if char not in char_set:\n            char_set.add(char)\n        else:\n            char_set.remove(char)\n            char_set.add(char)\n\n    if len(char_set) == 0:\n        return \"\"\n\n    return min(char_set)\n\n\ndef find_first_non_repeated_char_2(input_str):\n    \"\"\"\n    >>> find_first_non_repeated_char_2('abcdef')\n    'f'\n    >>> find_first_non_repeated_char_2('aabbcc')\n    'd'\n    >>> find_first_non_repeated_char_2('aabbccd')\n    'e'\n    >>> find_first_non_repeated_char_2('aaa')\n    'b'\n    >>> find_first_non_repeated_char_2('bbb')\n    'c'\n    >>> find_first_non_repeated_char_2('')\n    ''\n    \"\"\"\n    char_count_map = {}\n    for char in input_str:\n        if char in char_count_map:\n            char_count_map[char] += 1\n        else:\n            char_count_map[char] = 1\n\n    for char in input_str:\n        if char_count_map[char] == 1:"
    }
  ]
}