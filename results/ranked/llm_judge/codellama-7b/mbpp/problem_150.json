{
  "timestamp": "2025-09-14T23:26:12.354936",
  "method": "improved_llm_judge",
  "judge_model": "codellama/CodeLlama-7b-Python-hf",
  "target_model": "codellama-7b",
  "dataset": "mbpp",
  "problem_number": 150,
  "total_candidates": 100,
  "results": [
    {
      "rank": 1,
      "score": 10.0,
      "candidate": "from timeit import timeit\n\n\ndef remove_list_elements(l1: list, l2: list) -> list:\n    return [i for i in l1 if i not in l2]\n\n\ndef remove_list_elements_optimized(l1: list, l2: list) -> list:\n    l1_set = set(l1)\n    return [i for i in l1 if i not in l1_set.intersection(l2)]\n\n\nif __name__ == \"__main__\":\n    l1 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    l2 = [1, 2, 3]\n    print(remove_list_elements(l1, l2))\n    print(remove_list_elements_optimized(l1, l2))\n\n    print(timeit(lambda: remove_list_elements(l1, l2), number=10000))\n    print(timeit(lambda: remove_list_elements_optimized(l1, l2), number=10000))"
    },
    {
      "rank": 2,
      "score": 10.0,
      "candidate": "from timeit import timeit\n\n\ndef remove_elements(list1, list2):\n    return [elem for elem in list1 if elem not in list2]\n\n\ndef remove_elements_inplace(list1, list2):\n    for elem in list2:\n        while elem in list1:\n            list1.remove(elem)\n\n\nif __name__ == \"__main__\":\n    list1 = list(range(100000))\n    list2 = list(range(10000))\n    print(timeit(lambda: remove_elements(list1, list2), number=10000))\n    print(timeit(lambda: remove_elements_inplace(list1, list2), number=10000))"
    },
    {
      "rank": 3,
      "score": 10.0,
      "candidate": "from timeit import timeit\n\n\ndef remove_elements(list_a: list, list_b: list) -> list:\n    return [x for x in list_a if x not in list_b]\n\n\ndef remove_elements_optimized(list_a: list, list_b: list) -> list:\n    return list(set(list_a) - set(list_b))\n\n\nif __name__ == \"__main__\":\n    list_a = [1, 2, 3, 4, 5, 6, 7, 8]\n    list_b = [5, 6, 7, 8]\n\n    print(timeit(\"remove_elements(list_a, list_b)\", globals=locals(), number=10000))\n    print(timeit(\"remove_elements_optimized(list_a, list_b)\", globals=locals(), number=10000))"
    },
    {
      "rank": 4,
      "score": 10.0,
      "candidate": "from typing import List\n\n\ndef remove_duplicates(main_list: List[int], duplicate_list: List[int]) -> List[int]:\n    \"\"\"Remove all elements from a given list present in another list.\n\n    Args:\n        main_list (List[int]): list from which to remove elements\n        duplicate_list (List[int]): list of elements to remove\n\n    Returns:\n        List[int]: list of elements that are not present in the duplicate list\n    \"\"\"\n    return [item for item in main_list if item not in duplicate_list]\n\n\nif __name__ == \"__main__\":\n    print(remove_duplicates([1, 2, 3, 4, 5, 6], [2, 4, 6, 8]))"
    },
    {
      "rank": 5,
      "score": 10.0,
      "candidate": "from copy import deepcopy\n\n\ndef remove_elements_from_list(list_1, list_2):\n    \"\"\"Removes all elements in list_1 that are in list_2\"\"\"\n    list_1 = deepcopy(list_1)\n    for i in list_1:\n        if i in list_2:\n            list_1.remove(i)\n    return list_1\n\n\ndef main():\n    list_1 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]\n    list_2 = [4, 6, 7, 10]\n    result = remove_elements_from_list(list_1, list_2)\n    print(result)\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 6,
      "score": 10.0,
      "candidate": "from copy import deepcopy\n\ndef remove_duplicates(list1, list2):\n    list2_copy = deepcopy(list2)\n    for i in list2_copy:\n        if i in list1:\n            list1.remove(i)\n    return list1\n\ndef main():\n    list1 = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    list2 = [1, 2, 3, 5, 7, 8, 9]\n    print(remove_duplicates(list1, list2))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 7,
      "score": 10.0,
      "candidate": "from copy import deepcopy\n\n\ndef remove_duplicates(list_a, list_b):\n    \"\"\"Removes duplicates from list a.\n\n    Args:\n        list_a: list of elements\n        list_b: list of elements\n\n    Returns:\n        list_a: list of elements\n    \"\"\"\n    for i in list_a:\n        if i in list_b:\n            list_a.remove(i)\n    return list_a\n\n\ndef main():\n    list_a = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    list_b = [1, 2, 3, 4, 5]\n    print(remove_duplicates(deepcopy(list_a), deepcopy(list_b)))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 8,
      "score": 10.0,
      "candidate": "from timeit import timeit\n\n\ndef remove_from_list(list_1, list_2):\n    return [element for element in list_1 if element not in list_2]\n\n\ndef remove_from_list_2(list_1, list_2):\n    for element in list_2:\n        list_1.remove(element)\n\n    return list_1\n\n\ndef remove_from_list_3(list_1, list_2):\n    return [element for element in list_1 if element not in set(list_2)]\n\n\nif __name__ == \"__main__\":\n    list_1 = [1, 2, 3, 4, 5, 6]\n    list_2 = [4, 5, 7]\n\n    print(timeit(\"remove_from_list(list_1, list_2)\", setup=\"from __main__ import remove_from_list, list_1, list_2\"))\n    print(timeit(\"remove_from_list_2(list_1, list_2)\", setup=\"from __main__ import remove_from_list_2, list_1, list_2\"))\n    print(timeit(\"remove_from_list_3(list_1, list_2)\", setup=\"from __main__ import remove_from_list_3, list_1, list_2\"))"
    },
    {
      "rank": 9,
      "score": 10.0,
      "candidate": "from timeit import timeit\n\n\ndef remove_elements(lst1, lst2):\n    lst1_new = []\n\n    for i in lst1:\n        if i not in lst2:\n            lst1_new.append(i)\n\n    return lst1_new\n\n\ndef remove_elements_alt(lst1, lst2):\n    lst1_new = []\n    lst2_set = set(lst2)\n\n    for i in lst1:\n        if i not in lst2_set:\n            lst1_new.append(i)\n\n    return lst1_new\n\n\nif __name__ == \"__main__\":\n    lst1 = [1, 2, 3, 4, 5, 6]\n    lst2 = [3, 4, 5]\n    print(f\"Original list: {lst1}\")\n    print(f\"Original list: {lst2}\")\n    print(f\"Removed elements: {remove_elements(lst1, lst2)}\")\n    print(f\"Removed elements: {remove_elements_alt(lst1, lst2)}\")\n    print(f\"Time taken: {timeit(lambda: remove_elements(lst1, lst2), number=10000)}\")\n    print(\n        f\"Time taken: {timeit(lambda: remove_elements_alt(lst1, lst2), number=10000)}\"\n    )"
    },
    {
      "rank": 10,
      "score": 10.0,
      "candidate": "def remove_list_element(list1, list2):\n    for i in list2:\n        if i in list1:\n            list1.remove(i)\n    return list1\n\n\ndef main():\n    list1 = [1, 2, 3, 4, 5, 6, 7]\n    list2 = [3, 4, 5, 8]\n    print(remove_list_element(list1, list2))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 11,
      "score": 10.0,
      "candidate": "from typing import List\n\n\ndef remove_elements(arr: List[int], to_remove: List[int]) -> List[int]:\n    \"\"\"\n    Using two pointers.\n    Time Complexity: O(n+m)\n    \"\"\"\n    start = 0\n    for end in range(len(arr)):\n        if arr[end] not in to_remove:\n            arr[start] = arr[end]\n            start += 1\n\n    return arr[:start]\n\n\nif __name__ == \"__main__\":\n    assert remove_elements([1, 2, 3, 4, 5, 6], [1, 3, 5]) == [2, 4, 6]"
    },
    {
      "rank": 12,
      "score": 10.0,
      "candidate": "from typing import List\n\n\ndef remove_all_elements(main_list: List, to_remove: List) -> List:\n    \"\"\"Remove elements from list.\n\n    Args:\n        main_list: main list to remove elements from\n        to_remove: list of elements to remove\n\n    Returns:\n        main_list with elements removed\n    \"\"\"\n    for item in to_remove:\n        if item in main_list:\n            main_list.remove(item)\n\n    return main_list\n\n\nif __name__ == \"__main__\":\n    assert remove_all_elements([1, 2, 3, 4, 5], [2, 4]) == [1, 3, 5]\n    assert remove_all_elements([1, 2, 3, 4, 5], [2, 4, 6]) == [1, 3, 5]\n    assert remove_all_elements([1, 2, 3, 4, 5], [6, 7]) == [1, 2, 3, 4, 5]"
    },
    {
      "rank": 13,
      "score": 10.0,
      "candidate": "from typing import List\n\n\ndef remove_elements(list_a: List[int], list_b: List[int]) -> List[int]:\n    \"\"\"\n    Time Complexity: O(n*m)\n    \"\"\"\n    return [x for x in list_a if x not in list_b]\n\n\nif __name__ == \"__main__\":\n    assert remove_elements([1, 2, 3, 4, 5, 6], [2, 4]) == [1, 3, 5, 6]"
    },
    {
      "rank": 14,
      "score": 10.0,
      "candidate": "from timeit import timeit\n\n\ndef remove_list_elements(list1, list2):\n    return [element for element in list1 if element not in list2]\n\n\ndef remove_list_elements_opt(list1, list2):\n    list2_set = set(list2)\n    return [element for element in list1 if element not in list2_set]\n\n\nif __name__ == \"__main__\":\n    list1 = [1, 2, 3, 4, 5]\n    list2 = [3, 4, 5, 6, 7]\n    print(timeit(\"remove_list_elements(list1, list2)\", globals=globals()))\n    print(timeit(\"remove_list_elements_opt(list1, list2)\", globals=globals()))"
    },
    {
      "rank": 15,
      "score": 10.0,
      "candidate": "from copy import deepcopy\n\n\ndef remove_list_elements(list_a, list_b):\n    # O(n * m)\n    \"\"\"\n    >>> remove_list_elements([1, 2, 3, 4, 5], [2, 4])\n    [1, 3, 5]\n    \"\"\"\n    list_a = deepcopy(list_a)\n    for i in list_a:\n        if i in list_b:\n            list_a.remove(i)\n    return list_a\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 16,
      "score": 10.0,
      "candidate": "def remove_list_elements(list1, list2):\n    for i in list2:\n        if i in list1:\n            list1.remove(i)\n\n\nlist1 = [1, 2, 3, 4, 5, 6, 7, 8, 9]\nlist2 = [2, 3, 5, 7]\nremove_list_elements(list1, list2)\nprint(list1)"
    },
    {
      "rank": 17,
      "score": 10.0,
      "candidate": "def remove_elements(lst1, lst2):\n    for i in lst1:\n        if i in lst2:\n            lst1.remove(i)\n\n\nlst1 = [1, 2, 3, 4, 5, 6, 7, 8]\nlst2 = [1, 3, 6]\nremove_elements(lst1, lst2)\nprint(lst1)"
    },
    {
      "rank": 18,
      "score": 10.0,
      "candidate": "from copy import deepcopy\nfrom timeit import timeit\n\n\ndef remove_duplicates(list1, list2):\n    list_copy = deepcopy(list1)\n    for item in list_copy:\n        if item in list2:\n            list1.remove(item)\n\n\ndef main():\n    list1 = [1, 2, 3, 4, 5, 6, 7]\n    list2 = [6, 5, 4, 3]\n    print(f\"list1: {list1}\")\n    print(f\"list2: {list2}\")\n    remove_duplicates(list1, list2)\n    print(f\"list1: {list1}\")\n\n\nif __name__ == \"__main__\":\n    print(timeit(lambda: main(), number=10000))"
    },
    {
      "rank": 19,
      "score": 10.0,
      "candidate": "def remove_elements(l1, l2):\n    for i in l2:\n        while i in l1:\n            l1.remove(i)\n\n    return l1\n\nl1 = [1,2,3,4,5,6,7,8,9]\nl2 = [1,2,3]\nprint(remove_elements(l1, l2))"
    },
    {
      "rank": 20,
      "score": 10.0,
      "candidate": "from typing import List\n\n\ndef remove_list_elements(first_list: List[int], second_list: List[int]) -> List[int]:\n    \"\"\"Remove all elements from a given list present in another list.\n\n    Args:\n        first_list (List[int]): given list\n        second_list (List[int]): another list\n\n    Returns:\n        List[int]: new list with elements from first list not present in second list\n    \"\"\"\n    return [num for num in first_list if num not in second_list]\n\n\nif __name__ == \"__main__\":\n    print(remove_list_elements([1, 2, 3, 4, 5, 6], [3, 4]))"
    },
    {
      "rank": 21,
      "score": 10.0,
      "candidate": "def remove_all(lst_1, lst_2):\n    for i in lst_2:\n        lst_1.remove(i)\n    return lst_1\n\n\ndef main():\n    lst_1 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    lst_2 = [1, 2, 3, 5, 7, 9]\n    result = remove_all(lst_1, lst_2)\n    print(result)\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 22,
      "score": 10.0,
      "candidate": "from typing import List\n\n\ndef remove_duplicates(main_list: List[int], duplicate_list: List[int]) -> List[int]:\n    \"\"\"Removes all elements from a given list present in another list.\n\n    Args:\n        main_list (List[int]): list from where you need to remove elements.\n        duplicate_list (List[int]): list with elements you need to remove.\n\n    Returns:\n        List[int]: list with elements removed.\n\n    Examples:\n        >>> remove_duplicates([1, 2, 3, 4, 5, 6], [3, 4])\n        [1, 2, 5, 6]\n        >>> remove_duplicates([1, 2, 3, 4, 5, 6], [0, 1, 2, 3, 4, 5, 6])\n        []\n        >>> remove_duplicates([1, 2, 3, 4, 5, 6], [3, 4, 7, 8, 9])\n        [1, 2, 5, 6]\n    \"\"\"\n    return [element for element in main_list if element not in duplicate_list]\n\n\nif __name__ == \"__main__\":\n    print(remove_duplicates([1, 2, 3, 4, 5, 6], [3, 4]))\n    print(remove_duplicates([1, 2, 3, 4, 5, 6], [0, 1, 2, 3, 4, 5, 6]))\n    print(remove_duplicates([1, 2, 3, 4, 5, 6], [3, 4, 7, 8, 9]))"
    },
    {
      "rank": 23,
      "score": 10.0,
      "candidate": "def remove_duplicates(list_1: list, list_2: list) -> list:\n    \"\"\"\n    >>> remove_duplicates([1,2,3,4,5,6], [2, 3, 4, 5])\n    [1, 6]\n    \"\"\"\n    list_1 = list(set(list_1) - set(list_2))\n    return list_1\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 24,
      "score": 10.0,
      "candidate": "from timeit import default_timer as timer\n\n\ndef remove_list_elements(list_1, list_2):\n    return list(set(list_1) - set(list_2))\n\n\ndef remove_list_elements_optimized(list_1, list_2):\n    list_1 = set(list_1)\n    list_2 = set(list_2)\n    return list(list_1 - list_2)\n\n\nif __name__ == \"__main__\":\n    list_1 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    list_2 = [1, 2, 3]\n    start = timer()\n    print(remove_list_elements(list_1, list_2))\n    print(timer() - start)\n    start = timer()\n    print(remove_list_elements_optimized(list_1, list_2))\n    print(timer() - start)"
    },
    {
      "rank": 25,
      "score": 10.0,
      "candidate": "from timeit import timeit\n\n\ndef remove_list(list_a, list_b):\n    return [x for x in list_a if x not in list_b]\n\n\ndef remove_list_optimized(list_a, list_b):\n    return list(set(list_a) - set(list_b))\n\n\ndef remove_list_optimized_2(list_a, list_b):\n    for x in list_b:\n        if x in list_a:\n            list_a.remove(x)\n\n\nif __name__ == \"__main__\":\n    list_a = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    list_b = [2, 3, 4, 5, 9]\n    print(remove_list(list_a, list_b))\n    print(remove_list_optimized(list_a, list_b))\n    print(remove_list_optimized_2(list_a, list_b))\n\n    print(timeit(lambda: remove_list(list_a, list_b), number=10000))\n    print(timeit(lambda: remove_list_optimized(list_a, list_b), number=10000))\n    print(timeit(lambda: remove_list_optimized_2(list_a, list_b), number=10000))"
    },
    {
      "rank": 26,
      "score": 10.0,
      "candidate": "from typing import List\n\n\ndef remove_duplicates(lst1: List[int], lst2: List[int]) -> List[int]:\n    \"\"\"\n    Time Complexity: O(n)\n    \"\"\"\n    return [x for x in lst1 if x not in lst2]\n\n\nif __name__ == \"__main__\":\n    lst1 = [1, 2, 3, 4, 5]\n    lst2 = [1, 2, 5]\n    print(remove_duplicates(lst1, lst2))"
    },
    {
      "rank": 27,
      "score": 10.0,
      "candidate": "from timeit import timeit\n\n\ndef remove_from_list(list1, list2):\n    return list(set(list1) - set(list2))\n\n\ndef remove_from_list2(list1, list2):\n    for i in list2:\n        while i in list1:\n            list1.remove(i)\n    return list1\n\n\nif __name__ == \"__main__\":\n    list1 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    list2 = [2, 3, 5, 6, 7, 8]\n    print(timeit(lambda: remove_from_list(list1, list2), number=10000))  # 0.005362052000080268\n    print(timeit(lambda: remove_from_list2(list1, list2), number=10000))  # 0.003141913999738673"
    },
    {
      "rank": 28,
      "score": 9.0,
      "candidate": "from copy import deepcopy\n\n\ndef remove_all_elements(l1, l2):\n    \"\"\"Removes all elements from a given list present in another list.\n\n    Args:\n        l1 (list): List of elements to be checked for.\n        l2 (list): List of elements to be removed.\n\n    Returns:\n        list: List after removing all elements from l2.\n    \"\"\"\n    # return [i for i in l1 if i not in l2]\n    # return [i for i in l1 if i not in set(l2)]\n    # return [i for i in l1 if i not in l1]\n    # return [i for i in l1 if i not in deepcopy(l2)]\n    # return [i for i in l1 if i not in l2[:]]\n    # return [i for i in l1 if i not in l2.copy()]\n    # return [i for i in l1 if i not in list(l2)]\n    # return [i for i in l1 if i not in list(set(l2))]\n    # return [i for i in l1 if i not in list(set(l2[:]))]\n    # return [i for i in l1 if i not in list(set(l2.copy()))]\n    # return [i for i in l1 if i not in list(set(l2[:]))]\n    # return [i for i in l1 if i not in list(set(l2.copy()))]\n    # return [i for i in l1 if i not in list(set(list(l2)))]\n    # return [i for i in l1 if i not in list(set(list(l2[:])))]\n    # return [i for i in l1 if i not in list(set(list(l2.copy())))]\n    # return [i for i in l1 if i not in list(set(list(list(l2))))]\n    # return [i for i in l1 if i not in list(set(list(list(l2[:]))))]\n    # return [i for i in l1 if i not in list(set(list(list(l2.copy()"
    },
    {
      "rank": 29,
      "score": 9.0,
      "candidate": "from typing import List\n\n\ndef remove_elements(list_1: List, list_2: List) -> List:\n    \"\"\"Removes elements in list_1 that are in list_2.\n\n    Args:\n        list_1 (List): List from which elements will be removed.\n        list_2 (List): List of elements to be removed.\n\n    Returns:\n        List: List with elements removed.\n    \"\"\"\n\n    for element in list_2:\n        while element in list_1:\n            list_1.remove(element)\n    return list_1\n\n\nif __name__ == \"__main__\":\n    print(remove_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [2, 4, 6, 8, 10]))"
    },
    {
      "rank": 30,
      "score": 9.0,
      "candidate": "from copy import deepcopy\n\n\ndef remove_elements(list1, list2):\n    list3 = deepcopy(list1)\n    for elem in list1:\n        if elem in list2:\n            list3.remove(elem)\n    return list3\n\n\nif __name__ == \"__main__\":\n    print(remove_elements([1, 2, 3, 4, 5, 6, 7], [1, 3, 6]))"
    },
    {
      "rank": 31,
      "score": 9.0,
      "candidate": "def remove_common(list1, list2):\n    return [i for i in list1 if i not in list2]\n\n\nif __name__ == \"__main__\":\n    print(remove_common([1, 2, 3, 4, 5, 6], [2, 4]))"
    },
    {
      "rank": 32,
      "score": 8.0,
      "candidate": "def remove_duplicate(list1, list2):\n    for i in list2:\n        while i in list1:\n            list1.remove(i)\n\n    return list1\n\n\ndef main():\n    list1 = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    list2 = [3, 7, 9]\n\n    print(remove_duplicate(list1, list2))\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 33,
      "score": 8.0,
      "candidate": "from copy import deepcopy\n\n\ndef remove_duplicates(l1, l2):\n    l1_copy = deepcopy(l1)\n\n    for i in l1_copy:\n        if i in l2:\n            l1.remove(i)\n\n    return l1\n\n\nif __name__ == \"__main__\":\n    l1 = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    l2 = [1, 2, 3]\n\n    print(remove_duplicates(l1, l2))"
    },
    {
      "rank": 34,
      "score": 8.0,
      "candidate": "from typing import List\n\n\n# Time complexity: O(n*m). Where n is the length of the list, and m the length of the list of elements to remove.\n# Space complexity: O(1).\ndef remove_elements_from_list(list_: List[int], elements_to_remove: List[int]) -> List[int]:\n    if len(elements_to_remove) == 0:\n        return list_\n\n    for element_to_remove in elements_to_remove:\n        list_.remove(element_to_remove)\n\n    return list_\n\n\nif __name__ == '__main__':\n    list_ = [1, 2, 3, 4, 5, 6, 7]\n    elements_to_remove = [3, 5]\n    print(remove_elements_from_list(list_, elements_to_remove))"
    },
    {
      "rank": 35,
      "score": 8.0,
      "candidate": "from collections import Counter\n\n\ndef remove_duplicates(list1, list2):\n    count = Counter(list2)\n    return [elem for elem in list1 if count[elem] == 0]\n\n\ndef main():\n    list1 = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    list2 = [1, 2, 4, 5]\n    print(remove_duplicates(list1, list2))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 36,
      "score": 8.0,
      "candidate": "def remove_from_list(list_a, list_b):\n    for item in list_b:\n        if item in list_a:\n            list_a.remove(item)\n    return list_a\n\nlist_a = [1, 2, 3, 4, 5]\nlist_b = [2, 3]\nprint(remove_from_list(list_a, list_b))\n\ndef remove_from_list_2(list_a, list_b):\n    return [x for x in list_a if x not in list_b]\n\nprint(remove_from_list_2(list_a, list_b))\n\ndef remove_from_list_3(list_a, list_b):\n    return list(set(list_a) - set(list_b))\n\nprint(remove_from_list_3(list_a, list_b))"
    },
    {
      "rank": 37,
      "score": 8.0,
      "candidate": "from copy import deepcopy\nfrom timeit import timeit\n\n\ndef remove_duplicates_from_list(list_a, list_b):\n    result = deepcopy(list_a)\n\n    for i in list_a:\n        if i in list_b:\n            result.remove(i)\n\n    return result\n\n\ndef remove_duplicates_from_list_with_filter(list_a, list_b):\n    return list(filter(lambda i: i not in list_b, list_a))\n\n\nif __name__ == \"__main__\":\n    list_a = [1, 2, 3, 4, 5]\n    list_b = [2, 3, 4, 5, 6]\n\n    print(remove_duplicates_from_list(list_a, list_b))\n    print(remove_duplicates_from_list_with_filter(list_a, list_b))\n\n    print(timeit(lambda: remove_duplicates_from_list(list_a, list_b), number=10000))\n    print(\n        timeit(\n            lambda: remove_duplicates_from_list_with_filter(list_a, list_b), number=10000\n        )\n    )"
    },
    {
      "rank": 38,
      "score": 8.0,
      "candidate": "from timeit import default_timer as timer\n\n\ndef remove_list(list_1, list_2):\n    if not list_1 or not list_2:\n        return list_1\n\n    result = list_1.copy()\n\n    for num in list_1:\n        if num in list_2:\n            result.remove(num)\n\n    return result\n\n\nif __name__ == \"__main__\":\n    start = timer()\n    print(remove_list([1, 2, 3, 4, 5, 6], [3, 4]))\n    print(timer() - start)"
    },
    {
      "rank": 39,
      "score": 8.0,
      "candidate": "from copy import deepcopy\nfrom collections import defaultdict\n\n\ndef remove_list_elements(l1, l2):\n    \"\"\"\n    :param l1: list\n    :param l2: list\n    :return: list\n    \"\"\"\n    # l1 = deepcopy(l1)\n    # l2 = deepcopy(l2)\n    l1_dict = defaultdict(int)\n    for i in l1:\n        l1_dict[i] += 1\n    for i in l2:\n        if l1_dict[i] > 0:\n            l1_dict[i] -= 1\n        else:\n            l1.remove(i)\n    return l1\n\n\nif __name__ == \"__main__\":\n    print(remove_list_elements([1, 2, 3, 4, 5, 6], [2, 3]))"
    },
    {
      "rank": 40,
      "score": 8.0,
      "candidate": "from copy import deepcopy\n\n\ndef remove_elements(list_a, list_b):\n    \"\"\"Remove elements of list_b from list_a.\"\"\"\n    list_a = deepcopy(list_a)\n\n    for i in range(len(list_a) - 1, -1, -1):\n        if list_a[i] in list_b:\n            list_a.pop(i)\n\n    return list_a\n\n\nif __name__ == \"__main__\":\n    print(remove_elements([1, 2, 3, 4, 5, 2, 3], [3, 2]))"
    },
    {
      "rank": 41,
      "score": 8.0,
      "candidate": "from copy import deepcopy\n\n\ndef remove_all(list1, list2):\n    # TODO: Write your solution here\n    list3 = deepcopy(list1)\n    for i in list2:\n        if i in list1:\n            list3.remove(i)\n    return list3\n\n\n# Test Cases:\nprint (\"Pass\" if (remove_all([1, 2, 3, 4, 5, 6], [2, 4]) == [1, 3, 5, 6]) else \"Fail\")\nprint (\"Pass\" if (remove_all([1, 2, 3, 4, 5, 6], [4, 2]) == [1, 3, 5, 6]) else \"Fail\")\nprint (\"Pass\" if (remove_all([1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6]) == []) else \"Fail\")\nprint (\"Pass\" if (remove_all([1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6, 7]) == []) else \"Fail\")"
    },
    {
      "rank": 42,
      "score": 8.0,
      "candidate": "from copy import deepcopy\n\n\ndef remove_list_elements(list_1, list_2):\n    \"\"\"Remove list elements from another list.\n\n    Time Complexity: O(N), where N is the length of list_1.\n    Space Complexity: O(N), where N is the length of list_1.\n    \"\"\"\n    list_1_copy = deepcopy(list_1)\n\n    for element in list_1_copy:\n        if element in list_2:\n            list_1.remove(element)\n\n    return list_1\n\n\ndef main():\n    list_1 = [1, 2, 3, 4, 5, 6, 7]\n    list_2 = [2, 3, 4, 5, 6]\n    print(remove_list_elements(list_1, list_2))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 43,
      "score": 8.0,
      "candidate": "def remove_duplicate(list_a, list_b):\n    return [i for i in list_a if i not in list_b]\n\n\ndef main():\n    a = [1, 2, 3, 4, 5]\n    b = [3, 4]\n    print(remove_duplicate(a, b))\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 44,
      "score": 8.0,
      "candidate": "def remove_elements(list_1, list_2):\n    result = list()\n    for i in list_1:\n        if i not in list_2:\n            result.append(i)\n    return result\n\n\ndef main():\n    list_1 = [1, 2, 3, 4, 5, 6]\n    list_2 = [3, 4, 5, 7]\n    print(remove_elements(list_1, list_2))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 45,
      "score": 8.0,
      "candidate": "def remove_elements(list1, list2):\n    \"\"\"Removes all elements from list1 that are in list2.\"\"\"\n    for element in list2:\n        if element in list1:\n            list1.remove(element)\n\nlist1 = [1, 2, 3, 4, 5, 6, 7, 8, 9]\nlist2 = [2, 4, 6, 8]\n\nremove_elements(list1, list2)\n\nprint(list1)"
    },
    {
      "rank": 46,
      "score": 8.0,
      "candidate": "from timeit import timeit\n\n\ndef remove_elements(list_a, list_b):\n    for i in list_a:\n        if i in list_b:\n            list_b.remove(i)\n\n    return list_b\n\n\ndef remove_elements_2(list_a, list_b):\n    return list(set(list_b) - set(list_a))\n\n\ndef main():\n    list_a = [1, 2, 3, 4, 5]\n    list_b = [4, 5, 6, 7, 8]\n\n    print(timeit('remove_elements(list_a, list_b)', 'from __main__ import remove_elements, list_a, list_b'))\n    print(timeit('remove_elements_2(list_a, list_b)', 'from __main__ import remove_elements_2, list_a, list_b'))\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 47,
      "score": 8.0,
      "candidate": "from copy import deepcopy\n\n\ndef remove_all_elements_from_list(list1, list2):\n    temp = deepcopy(list1)\n    for item in list2:\n        temp = [i for i in temp if i != item]\n\n    return temp\n\n\nif __name__ == \"__main__\":\n    list1 = [1, 2, 3, 4, 5, 6, 7]\n    list2 = [3, 5, 7]\n    print(remove_all_elements_from_list(list1, list2))"
    },
    {
      "rank": 48,
      "score": 8.0,
      "candidate": "from collections import Counter\n\n\ndef remove_duplicates(arr, brr):\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(n)\n    \"\"\"\n    counter = Counter(brr)\n    for item in arr:\n        if counter[item]:\n            arr.remove(item)\n\n    return arr\n\n\nif __name__ == \"__main__\":\n    print(remove_duplicates([1, 1, 1, 1, 1, 1, 2, 2, 2, 3], [1, 2]))"
    },
    {
      "rank": 49,
      "score": 8.0,
      "candidate": "from copy import deepcopy\n\n\ndef remove_list_elements(list_a, list_b):\n    list_a_copy = deepcopy(list_a)\n    for element in list_a_copy:\n        if element in list_b:\n            list_a.remove(element)\n\n\nlist_a = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nlist_b = [1, 3, 5, 7, 9]\nremove_list_elements(list_a, list_b)\nprint(list_a)"
    },
    {
      "rank": 50,
      "score": 8.0,
      "candidate": "from copy import deepcopy\n\n\ndef remove_list(list_1, list_2):\n    list_1 = deepcopy(list_1)\n    for item in list_1:\n        if item in list_2:\n            list_1.remove(item)\n    return list_1\n\n\ndef main():\n    list_1 = [1, 2, 3, 4, 5]\n    list_2 = [3, 4]\n    print(f\"List 1: {list_1}\")\n    print(f\"List 2: {list_2}\")\n    print(f\"List 1 after removing elements in List 2: {remove_list(list_1, list_2)}\")\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 51,
      "score": 8.0,
      "candidate": "def remove_elements(list_a, list_b):\n    for i in range(len(list_b)-1, -1, -1):\n        if list_b[i] in list_a:\n            del list_b[i]\n\nlist_a = [1, 2, 3, 4, 5]\nlist_b = [2, 4]\n\nremove_elements(list_a, list_b)\nprint(list_a)"
    },
    {
      "rank": 52,
      "score": 8.0,
      "candidate": "def remove_list_elements(list1, list2):\n    for i in range(len(list1)):\n        for j in range(len(list2)):\n            if list1[i] == list2[j]:\n                list1.pop(i)\n                break\n\n    return list1\n\n\nprint(remove_list_elements([1, 2, 3, 4, 5, 6, 7, 8, 9], [2, 3, 5, 9]))"
    },
    {
      "rank": 53,
      "score": 8.0,
      "candidate": "from collections import Counter\n\n\ndef remove_from_list(list1, list2):\n    counter = Counter(list2)\n    return [num for num in list1 if num not in counter]\n\n\ndef main():\n    print(remove_from_list([1, 2, 3, 4, 5, 6, 7, 8], [1, 2, 3, 4]))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 54,
      "score": 8.0,
      "candidate": "from typing import List\n\n\ndef remove_list_elements(list1: List[int], list2: List[int]) -> List[int]:\n    \"\"\"\n    Time Complexity: O(n*m)\n    \"\"\"\n    for i in list2:\n        if i in list1:\n            list1.remove(i)\n\n    return list1\n\n\nif __name__ == \"__main__\":\n    print(remove_list_elements([1, 2, 3, 4, 5, 6, 7, 8, 9], [3, 5, 8]))"
    },
    {
      "rank": 55,
      "score": 8.0,
      "candidate": "from copy import deepcopy\n\n\ndef remove_duplicates(lst1, lst2):\n    lst3 = deepcopy(lst1)\n    for element in lst3:\n        if element in lst2:\n            lst1.remove(element)\n    return lst1\n\n\nif __name__ == \"__main__\":\n    lst1 = [1, 2, 3, 4, 5, 6]\n    lst2 = [1, 3, 5]\n    print(remove_duplicates(lst1, lst2))"
    },
    {
      "rank": 56,
      "score": 8.0,
      "candidate": "from copy import deepcopy\n\n\ndef remove_all_occurrences(main_list, sub_list):\n    main_list = deepcopy(main_list)\n    for item in sub_list:\n        if item in main_list:\n            main_list.remove(item)\n    return main_list\n\n\nprint(remove_all_occurrences([1, 2, 3, 4, 5, 6], [1, 2]))"
    },
    {
      "rank": 57,
      "score": 8.0,
      "candidate": "from copy import deepcopy\n\n\ndef remove_all_elements(list1, list2):\n    list1_copy = deepcopy(list1)\n\n    for el in list1_copy:\n        if el in list2:\n            list1.remove(el)\n\n\nlist1 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nlist2 = [1, 2, 5, 6, 7, 8]\n\nremove_all_elements(list1, list2)\n\nprint(list1)  # [3, 4, 9, 10]"
    },
    {
      "rank": 58,
      "score": 8.0,
      "candidate": "from typing import List\n\n\ndef remove_element(l1: List, l2: List) -> List:\n    \"\"\"\n    Time Complexity: O(n*m)\n    Space Complexity: O(1)\n    \"\"\"\n\n    for i in range(len(l1)):\n        for j in range(len(l2)):\n            if l1[i] == l2[j]:\n                l1.pop(i)\n                break\n\n    return l1\n\n\nif __name__ == \"__main__\":\n    l1 = [1, 2, 3, 4, 5, 6]\n    l2 = [2, 4]\n\n    print(remove_element(l1, l2))"
    },
    {
      "rank": 59,
      "score": 8.0,
      "candidate": "def remove_list_elements(list1, list2):\n    for item in list2:\n        if item in list1:\n            list1.remove(item)\n\n    return list1\n\nif __name__ == '__main__': \n    list1 = [1, 2, 3, 4, 5]\n    list2 = [3, 5]\n    print(remove_list_elements(list1, list2))"
    },
    {
      "rank": 60,
      "score": 8.0,
      "candidate": "def remove_elements(list1, list2):\n    for i in range(len(list1) - 1, -1, -1):\n        if list1[i] in list2:\n            list1.pop(i)\n\n\nprint(remove_elements([1, 2, 3, 4, 5], [1, 2, 5]))"
    },
    {
      "rank": 61,
      "score": 8.0,
      "candidate": "from copy import deepcopy\n\n\ndef remove_elements(list_1, list_2):\n    \"\"\"\n    Time Complexity: O(n)\n    \"\"\"\n    list_1 = deepcopy(list_1)\n\n    for element in list_1:\n        if element in list_2:\n            list_1.remove(element)\n\n    return list_1\n\n\ndef main():\n    list_1 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    list_2 = [1, 2, 3, 4, 6, 7, 8, 9, 10]\n\n    print(remove_elements(list_1, list_2))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 62,
      "score": 8.0,
      "candidate": "from typing import List\n\n\n# O(n^2) time | O(1) space\ndef remove_elements(list_one: List[int], list_two: List[int]) -> List[int]:\n    for element in list_two:\n        while element in list_one:\n            list_one.remove(element)\n    return list_one\n\n\n# O(n) time | O(1) space\ndef remove_elements_optimized(list_one: List[int], list_two: List[int]) -> List[int]:\n    for element in list_two:\n        list_one = [e for e in list_one if e != element]\n    return list_one\n\n\nif __name__ == \"__main__\":\n    print(remove_elements([3, 2, 3, 5, 4, 3, 6, 7, 3, 8, 4, 9, 8, 7], [2, 3, 4]))\n    print(remove_elements_optimized([3, 2, 3, 5, 4, 3, 6, 7, 3, 8, 4, 9, 8, 7], [2, 3, 4]))"
    },
    {
      "rank": 63,
      "score": 8.0,
      "candidate": "def remove_duplicates(list1, list2):\n    for i in list2:\n        while i in list1:\n            list1.remove(i)\n    return list1\n\n\nprint(remove_duplicates([1, 2, 3, 4, 5, 6], [1, 3, 6]))"
    },
    {
      "rank": 64,
      "score": 8.0,
      "candidate": "from copy import deepcopy\n\n\ndef remove_elements(list1, list2):\n    \"\"\"Remove all elements from list1 that are present in list2\"\"\"\n    list1_copy = deepcopy(list1)\n\n    for element in list1_copy:\n        if element in list2:\n            list1.remove(element)\n\n\ndef main():\n    list1 = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    list2 = [1, 3, 5, 7, 9]\n\n    print(list1)\n    print(list2)\n    remove_elements(list1, list2)\n    print(list1)\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 65,
      "score": 8.0,
      "candidate": "def remove_list_from_list(main_list, sub_list):\n    for i in sub_list:\n        if i in main_list:\n            main_list.remove(i)\n\n    return main_list\n\n\nif __name__ == \"__main__\":\n    main_list = [1, 2, 3, 4, 5]\n    sub_list = [2, 4, 6]\n    print(remove_list_from_list(main_list, sub_list))"
    },
    {
      "rank": 66,
      "score": 8.0,
      "candidate": "from copy import deepcopy\n\n\ndef remove_from_list(list1, list2):\n    \"\"\"\n    Remove all elements from a given list present in another list.\n    :param list1: given list.\n    :param list2: list to be removed.\n    :return: list1 with elements from list2 removed.\n    \"\"\"\n    list3 = deepcopy(list1)\n    for element in list2:\n        if element in list1:\n            list3.remove(element)\n    return list3\n\n\nif __name__ == \"__main__\":\n    assert remove_from_list([1, 2, 3, 4, 5], [2, 4]) == [1, 3, 5]\n    assert remove_from_list([1, 2, 3, 4, 5], [2, 4, 5]) == [1, 3]"
    },
    {
      "rank": 67,
      "score": 8.0,
      "candidate": "from typing import List\n\n\ndef remove_list_elements(list1: List, list2: List) -> List:\n    \"\"\"\n    Removes all elements from list1 present in list2.\n    >>> remove_list_elements([1, 2, 3, 4], [3, 4])\n    [1, 2]\n    >>> remove_list_elements([1, 2, 3, 4], [3])\n    [1, 2, 4]\n    >>> remove_list_elements([1, 2, 3, 4], [3, 4, 5, 6])\n    [1, 2]\n    >>> remove_list_elements([1, 2, 3, 4], [1, 2, 3, 4, 5])\n    []\n    \"\"\"\n    return [item for item in list1 if item not in list2]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 68,
      "score": 8.0,
      "candidate": "from copy import deepcopy\n\n\ndef remove_elements(list_a, list_b):\n    # O(m*n)\n    \"\"\"\n    :param list_a: list\n    :param list_b: list\n    :return: list\n    \"\"\"\n    new_list = deepcopy(list_a)\n    for elem in list_a:\n        if elem in list_b:\n            new_list.remove(elem)\n    return new_list\n\n\ndef remove_elements_constant_space(list_a, list_b):\n    # O(n)\n    \"\"\"\n    :param list_a: list\n    :param list_b: list\n    :return: list\n    \"\"\"\n    new_list = deepcopy(list_a)\n    for elem in list_a:\n        if elem in list_b:\n            new_list.remove(elem)\n    return new_list\n\n\nif __name__ == '__main__':\n    list_a = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    list_b = [2, 4, 6, 8, 10]\n    print(remove_elements(list_a, list_b))\n    print(remove_elements_constant_space(list_a, list_b))"
    },
    {
      "rank": 69,
      "score": 8.0,
      "candidate": "def remove_duplicates(list1, list2):\n    for i in list2:\n        if i in list1:\n            list1.remove(i)\n    return list1\n\n\ndef main():\n    list1 = [1, 2, 3, 4, 5]\n    list2 = [3, 4, 5, 6, 7]\n    print(remove_duplicates(list1, list2))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 70,
      "score": 8.0,
      "candidate": "from collections import Counter\n\n\ndef remove_duplicate(lst1, lst2):\n    c1, c2 = Counter(lst1), Counter(lst2)\n    return [x for x in lst1 if c1[x] > c2[x]]\n\n\nremove_duplicate([1, 2, 3, 4, 5, 6, 7, 8], [1, 2, 3])"
    },
    {
      "rank": 71,
      "score": 8.0,
      "candidate": "from collections import Counter\n\n\ndef remove_list(list1, list2):\n    for i in list2:\n        if i in list1:\n            list1.remove(i)\n\n\nif __name__ == \"__main__\":\n    list1 = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    list2 = [1, 4, 5, 8]\n    remove_list(list1, list2)\n    print(list1)"
    },
    {
      "rank": 72,
      "score": 8.0,
      "candidate": "from copy import deepcopy\n\n\ndef remove_elements_from_list(list1, list2):\n    \"\"\"Remove all elements from list1 that are present in list2.\"\"\"\n    list1_copy = deepcopy(list1)\n    for elem in list1_copy:\n        if elem in list2:\n            list1.remove(elem)\n\n    return list1\n\n\nif __name__ == \"__main__\":\n    list1 = [1, 2, 3, 4, 5, 6]\n    list2 = [3, 4, 5, 6]\n    print(remove_elements_from_list(list1, list2))"
    },
    {
      "rank": 73,
      "score": 8.0,
      "candidate": "from copy import deepcopy\n\n\ndef remove_all(list1, list2):\n    temp = deepcopy(list1)\n\n    for i in temp:\n        if i in list2:\n            list1.remove(i)\n\n    return list1\n\n\nif __name__ == \"__main__\":\n    print(remove_all([1, 2, 3, 4, 5], [2, 4]))"
    },
    {
      "rank": 74,
      "score": 8.0,
      "candidate": "from copy import deepcopy\n\n\n# O(m*n) where m and n are length of lists\ndef remove_elements(list1, list2):\n    # create a copy of list1 so we can modify it\n    list1_copy = deepcopy(list1)\n    # loop through list1 and check if it contains elements from list2\n    for item in list1_copy:\n        if item in list2:\n            list1.remove(item)\n\n\nif __name__ == \"__main__\":\n    list1 = [1, 2, 3, 4, 5, 6]\n    list2 = [3, 4]\n    remove_elements(list1, list2)\n    print(list1)"
    },
    {
      "rank": 75,
      "score": 8.0,
      "candidate": "from copy import deepcopy\n\n\ndef remove_list_elements(list1, list2):\n    \"\"\"\n    Removes all the elements in list2 from list1.\n    :param list1: List to remove the elements from.\n    :param list2: List with the elements to remove.\n    :return: List with the elements removed.\n    \"\"\"\n    list1 = deepcopy(list1)\n\n    for i in list2:\n        if i in list1:\n            list1.remove(i)\n\n    return list1\n\n\nif __name__ == \"__main__\":\n    list1 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    list2 = [1, 2, 5, 9, 10]\n\n    print(remove_list_elements(list1, list2))"
    },
    {
      "rank": 76,
      "score": 8.0,
      "candidate": "def remove_elements(a, b):\n    \"\"\"\n    >>> remove_elements([1, 2, 3, 4, 5], [1, 4])\n    [2, 3, 5]\n    >>> remove_elements([1, 2, 3, 4, 5], [2, 4])\n    [1, 3, 5]\n    >>> remove_elements([1, 2, 3, 4, 5], [1, 2, 3, 4, 5])\n    []\n    >>> remove_elements([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6])\n    [1, 2, 3, 4, 5]\n    \"\"\"\n    for i in b:\n        a.remove(i)\n    return a\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 77,
      "score": 8.0,
      "candidate": "def remove_list_elements(list1, list2):\n    return [x for x in list1 if x not in list2]\n\n\nprint(remove_list_elements([1, 2, 3, 4, 5, 6], [3, 4]))\nprint(remove_list_elements([1, 2, 3, 4, 5, 6], [3, 4, 1]))"
    },
    {
      "rank": 78,
      "score": 7.0,
      "candidate": "from typing import List\n\n\ndef remove_list_elements(list1: List[int], list2: List[int]) -> List[int]:\n    \"\"\"Remove all elements from a given list present in another list.\n\n    Args:\n        list1 (List[int]): given list\n        list2 (List[int]): another list\n\n    Returns:\n        List[int]: list with elements that are not present in list2\n\n    Examples:\n        >>> assert remove_list_elements([1, 2, 3, 4, 5, 6, 7], [2, 4, 5, 9]) == [1, 3, 6, 7]\n    \"\"\"\n    return [x for x in list1 if x not in list2]\n\n\nif __name__ == \"__main__\":\n    print(remove_list_elements([1, 2, 3, 4, 5, 6, 7], [2, 4, 5, 9]))"
    },
    {
      "rank": 79,
      "score": 1.0,
      "candidate": "from copy import deepcopy\nfrom typing import List\n\n\ndef remove_list_elements(a: List[int], b: List[int]) -> List[int]:\n    \"\"\"\n    Using deepcopy\n    Time Complexity: O(n*m)\n    \"\"\"\n    result = deepcopy(a)\n    for i in range(len(a)):\n        if a[i] in b:\n            result.remove(a[i])\n    return result\n\n\ndef remove_list_elements_v2(a: List[int], b: List[int]) -> List[int]:\n    \"\"\"\n    Using list comprehension\n    Time Complexity: O(n*m)\n    \"\"\"\n    return [i for i in a if i not in b]\n\n\ndef main():\n    list_a = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    list_b = [1, 2, 4, 5]\n    print(remove_list_elements(list_a, list_b))\n    print(remove_list_elements_v2(list_a, list_b))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 80,
      "score": 1.0,
      "candidate": "from timeit import timeit\n\n\ndef remove_from_list(l1, l2):\n    for element in l2:\n        while element in l1:\n            l1.remove(element)\n\n\nif __name__ == \"__main__\":\n    l1 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    l2 = [4, 5, 6, 7]\n    print(timeit(lambda: remove_from_list(l1, l2), number=10000))"
    },
    {
      "rank": 81,
      "score": 1.0,
      "candidate": "def remove_duplicate(l1, l2):\n    for i in l2:\n        if i in l1:\n            l1.remove(i)\n\n    return l1\n\n\nprint(remove_duplicate([1, 2, 3, 4, 5], [3, 4]))"
    },
    {
      "rank": 82,
      "score": 1.0,
      "candidate": "from typing import List\n\n\ndef remove_list_elements(list_a: List, list_b: List) -> List:\n    \"\"\"\n    Time Complexity: O(n*m)\n    \"\"\"\n    for i in list_b:\n        if i in list_a:\n            list_a.remove(i)\n\n    return list_a\n\n\nif __name__ == \"__main__\":\n    assert remove_list_elements([1, 2, 3, 4, 5, 6], [3, 5]) == [1, 2, 4, 6]\n    assert remove_list_elements([1, 2, 3, 4, 5, 6], [3, 5, 1]) == [2, 4, 6]"
    },
    {
      "rank": 83,
      "score": 1.0,
      "candidate": "from copy import deepcopy\n\n\ndef remove_all_elements(list_a, list_b):\n    \"\"\"Remove elements in list_b from list_a.\"\"\"\n    new_list = deepcopy(list_a)\n\n    for element in list_a:\n        if element in list_b:\n            new_list.remove(element)\n\n    return new_list\n\n\nif __name__ == \"__main__\":\n    print(remove_all_elements([1, 2, 3, 4, 5, 6], [2, 4]))"
    },
    {
      "rank": 84,
      "score": 1.0,
      "candidate": "from typing import List\n\n\ndef remove_list_elements(list_one: List, list_two: List) -> List:\n    \"\"\"\n    Time Complexity: O(n*m)\n    \"\"\"\n    for i in list_two:\n        if i in list_one:\n            list_one.remove(i)\n\n    return list_one\n\n\nif __name__ == \"__main__\":\n    assert remove_list_elements([1, 2, 3, 4, 5], [1, 3, 5]) == [2, 4]"
    },
    {
      "rank": 85,
      "score": 1.0,
      "candidate": "from typing import List\n\n\ndef remove_list_elements(list_1: List, list_2: List) -> List:\n    \"\"\"\n    Time Complexity: O(n*m)\n    Space Complexity: O(n)\n    \"\"\"\n\n    for i in list_2:\n        if i in list_1:\n            list_1.remove(i)\n\n    return list_1\n\n\nif __name__ == \"__main__\":\n    print(remove_list_elements([1, 2, 3, 4, 5], [3, 4]))"
    },
    {
      "rank": 86,
      "score": 1.0,
      "candidate": "from typing import List\n\n\ndef remove_elements(l1: List, l2: List) -> List:\n    \"\"\"\n    Time Complexity: O(n*m)\n    \"\"\"\n    for num in l2:\n        while num in l1:\n            l1.remove(num)\n\n    return l1\n\n\nif __name__ == \"__main__\":\n    l1 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    l2 = [2, 4, 6, 8]\n\n    print(remove_elements(l1, l2))"
    },
    {
      "rank": 87,
      "score": 1.0,
      "candidate": "from typing import List\n\n\ndef remove_duplicates(list_a: List[int], list_b: List[int]) -> List[int]:\n    \"\"\"\n    Time Complexity: O(n*m)\n    \"\"\"\n    for i in list_a:\n        if i in list_b:\n            list_a.remove(i)\n\n    return list_a\n\n\nif __name__ == \"__main__\":\n    assert remove_duplicates([1, 2, 3, 4, 5, 6, 7], [4, 5, 6, 7]) == [1, 2, 3]"
    },
    {
      "rank": 88,
      "score": 1.0,
      "candidate": "from typing import List\n\n\ndef remove_list_elements(list1: List, list2: List) -> List:\n    \"\"\"Removes all elements from list1 that are present in list2.\n\n    Args:\n        list1 (List): List containing elements to remove.\n        list2 (List): List containing elements to remove from list1.\n\n    Returns:\n        List: list1 with all elements that are present in list2 removed.\n    \"\"\"\n\n    for element in list2:\n        list1.remove(element)\n\n    return list1\n\n\nif __name__ == \"__main__\":\n    print(remove_list_elements([1, 2, 3, 4, 5], [1, 2]))\n    print(remove_list_elements([1, 2, 3, 4, 5], [4, 5]))\n    print(remove_list_elements([1, 2, 3, 4, 5], [6, 7]))"
    },
    {
      "rank": 89,
      "score": 1.0,
      "candidate": "def remove_all(list1, list2):\n    for x in list1:\n        if x in list2:\n            list1.remove(x)\n    return list1\n\n\ndef remove_all_1(list1, list2):\n    return [x for x in list1 if x not in list2]\n\n\ndef main():\n    list1 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    list2 = [2, 4, 6, 8]\n    print(remove_all(list1, list2))\n    print(remove_all_1(list1, list2))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 90,
      "score": 1.0,
      "candidate": "from typing import List\n\n\ndef remove_list_elements(list_1: List[int], list_2: List[int]) -> List[int]:\n    \"\"\"\n    Time Complexity: O(n*m)\n    \"\"\"\n    for i in range(len(list_1) - 1, -1, -1):\n        if list_1[i] in list_2:\n            list_1.pop(i)\n\n    return list_1\n\n\nif __name__ == \"__main__\":\n    assert remove_list_elements([1, 2, 3, 4, 5], [1, 2, 6]) == [3, 4, 5]"
    },
    {
      "rank": 91,
      "score": 1.0,
      "candidate": "def remove_elements(list1, list2):\n    return list(set(list1) - set(list2))\n\n\ndef main():\n    list1 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]\n    list2 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    print(remove_elements(list1, list2))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 92,
      "score": 1.0,
      "candidate": "from typing import List\n\n\ndef remove_elements_from_list(lst1: List[int], lst2: List[int]) -> List[int]:\n    \"\"\"\n    Time Complexity: O(n*m)\n    \"\"\"\n    return [i for i in lst1 if i not in lst2]\n\n\nif __name__ == \"__main__\":\n    assert remove_elements_from_list([1, 2, 3, 4], [1, 2]) == [3, 4]"
    },
    {
      "rank": 93,
      "score": 1.0,
      "candidate": "from typing import List\n\n\n# O(m*n) time | O(n) space\ndef remove_elements(l1: List[int], l2: List[int]) -> List[int]:\n    for num in l2:\n        while num in l1:\n            l1.remove(num)\n    return l1\n\n\n# O(n) time | O(n) space\ndef remove_elements_optimized(l1: List[int], l2: List[int]) -> List[int]:\n    return [num for num in l1 if num not in l2]\n\n\nif __name__ == \"__main__\":\n    l1 = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    l2 = [2, 4, 6, 8]\n    print(remove_elements(l1, l2))\n    print(remove_elements_optimized(l1, l2))"
    },
    {
      "rank": 94,
      "score": 1.0,
      "candidate": "from typing import List\n\n\ndef remove_duplicates(main_list: List[int], duplicates: List[int]) -> List[int]:\n    \"\"\"Returns a list with duplicates removed.\n\n    Args:\n        main_list (List[int]): Main list\n        duplicates (List[int]): List of duplicates\n\n    Examples:\n        >>> remove_duplicates([1, 2, 3, 4, 5, 6, 7, 8], [1, 4, 6])\n        [2, 3, 5, 7, 8]\n\n    Returns:\n        List[int]: List with duplicates removed\n    \"\"\"\n    return [x for x in main_list if x not in duplicates]\n\n\nif __name__ == \"__main__\":\n    print(remove_duplicates([1, 2, 3, 4, 5, 6, 7, 8], [1, 4, 6]))"
    },
    {
      "rank": 95,
      "score": 1.0,
      "candidate": "def remove_elements(first, second):\n    \"\"\"\n    >>> remove_elements([1,2,3,4,5], [2,3,5,6,7])\n    [1, 4]\n    >>> remove_elements([1,2,3,4,5], [2,3,5,6,7,5])\n    [1, 4]\n    >>> remove_elements([1,2,3,4,5], [1,2,3])\n    [4, 5]\n    >>> remove_elements([1,2,3,4,5], [1,2,3,4,5,6,7])\n    []\n    >>> remove_elements([1,2,3,4,5], [1,2,3,4,5])\n    []\n    >>> remove_elements([1,2,3,4,5], [1,2,3,4,5,1,2,3,4,5])\n    []\n    >>> remove_elements([1,2,3,4,5], [1,2,3,4,5,1,2,3,4])\n    []\n    >>> remove_elements([1,2,3,4,5], [1,2,3,4,5,1,2,3,4,5,6,7])\n    []\n    \"\"\"\n    result = []\n\n    for i in first:\n        if i not in second:\n            result.append(i)\n\n    return result\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 96,
      "score": 1.0,
      "candidate": "from typing import List\n\n\ndef remove_list_elements(list1: List[int], list2: List[int]) -> List[int]:\n    \"\"\"\n    Time Complexity: O(n*m)\n    \"\"\"\n    for elem in list2:\n        if elem in list1:\n            list1.remove(elem)\n\n    return list1\n\n\nif __name__ == \"__main__\":\n    assert remove_list_elements([1, 2, 3, 4, 5], [2, 4]) == [1, 3, 5]"
    },
    {
      "rank": 97,
      "score": 1.0,
      "candidate": "from timeit import default_timer as timer\n\n\ndef remove_elements(a_list, to_remove):\n    for item in to_remove:\n        while item in a_list:\n            a_list.remove(item)\n\n\ndef remove_elements_alt(a_list, to_remove):\n    for item in to_remove:\n        if item in a_list:\n            a_list.remove(item)\n\n\nif __name__ == \"__main__\":\n    a = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    b = [1, 2, 3]\n    start = timer()\n    remove_elements(a, b)\n    end = timer()\n    print(f\"First: {end - start}\")\n    start = timer()\n    remove_elements_alt(a, b)\n    end = timer()\n    print(f\"Second: {end - start}\")"
    },
    {
      "rank": 98,
      "score": 1.0,
      "candidate": "from copy import deepcopy\n\n\ndef remove_all_elements_from_list(main, to_remove):\n    \"\"\"\n    Removes all elements from a given list present in another list\n    :param main: main list\n    :param to_remove: list to be removed\n    :return: list\n    \"\"\"\n    for element in to_remove:\n        while element in main:\n            main.remove(element)\n    return main\n\n\ndef main():\n    \"\"\"\n    Driver program to test above function\n    \"\"\"\n    list_1 = [1, 2, 3, 4, 5, 6, 7]\n    list_2 = [2, 3, 4, 5]\n    print(remove_all_elements_from_list(deepcopy(list_1), deepcopy(list_2)))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 99,
      "score": 1.0,
      "candidate": "from typing import List\n\n\n# O(n^2) time | O(n) space\ndef remove_elements(list_a: List[int], list_b: List[int]) -> List[int]:\n    for el in list_b:\n        if el in list_a:\n            list_a.remove(el)\n    return list_a\n\n\n# O(n) time | O(n) space\ndef remove_elements_2(list_a: List[int], list_b: List[int]) -> List[int]:\n    return [el for el in list_a if el not in list_b]\n\n\nif __name__ == \"__main__\":\n    print(remove_elements([1, 2, 3, 4, 5, 6], [1, 3, 5]))\n    print(remove_elements_2([1, 2, 3, 4, 5, 6], [1, 3, 5]))"
    },
    {
      "rank": 100,
      "score": 1.0,
      "candidate": "def remove_elements_in_b_list(a_list, b_list):\n    for e in b_list:\n        while e in a_list:\n            a_list.remove(e)\n    return a_list\n\nprint(remove_elements_in_b_list([1, 2, 3, 4, 5, 2, 3, 4, 5, 5, 5], [5, 3]))\nprint(remove_elements_in_b_list([1, 2, 3, 4, 5, 2, 3, 4, 5, 5, 5], [5, 3, 2]))\nprint(remove_elements_in_b_list([1, 2, 3, 4, 5, 2, 3, 4, 5, 5, 5], [1, 3, 2]))\nprint(remove_elements_in_b_list([1, 2, 3, 4, 5, 2, 3, 4, 5, 5, 5], [1, 3, 2, 5, 3, 2]))"
    }
  ]
}