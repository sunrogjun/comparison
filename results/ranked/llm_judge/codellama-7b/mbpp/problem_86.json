{
  "timestamp": "2025-09-14T22:56:56.114041",
  "method": "improved_llm_judge",
  "judge_model": "codellama/CodeLlama-7b-Python-hf",
  "target_model": "codellama-7b",
  "dataset": "mbpp",
  "problem_number": 86,
  "total_candidates": 100,
  "results": [
    {
      "rank": 1,
      "score": 10.0,
      "candidate": "def frequency_count(lists):\n    \"\"\"\n    >>> frequency_count([[1, 2, 2, 3, 3, 3], [4, 5, 6], [4, 5, 6, 7, 8]])\n    {1: 0, 2: 2, 3: 3, 4: 2, 5: 2, 6: 2, 7: 1, 8: 1}\n    \"\"\"\n    result = {}\n    for list_ in lists:\n        for i in list_:\n            if i not in result:\n                result[i] = 1\n            else:\n                result[i] += 1\n    return result\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 2,
      "score": 10.0,
      "candidate": "from collections import Counter\n\n\ndef frequency_count(lists):\n    \"\"\"\n    >>> frequency_count([[1, 2, 3], [1, 2, 4], [2, 3, 4], [2, 3, 4], [2, 3, 4]])\n    Counter({(1, 2, 3): 1, (1, 2, 4): 1, (2, 3, 4): 3})\n    \"\"\"\n    return Counter(lists)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 3,
      "score": 10.0,
      "candidate": "from collections import Counter\n\n\ndef frequency_count(lists):\n    \"\"\"\n    >>> frequency_count([[1, 2], [3, 2], [1, 2], [3, 2], [3, 2]])\n    Counter({2: 4, 3: 3, 1: 2})\n    >>> frequency_count([[1, 2], [3, 2], [1, 2], [3, 2], [3, 2], [3, 2]])\n    Counter({2: 5, 3: 4, 1: 2})\n    \"\"\"\n    c = Counter()\n    for i in lists:\n        c.update(i)\n    return c\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 4,
      "score": 10.0,
      "candidate": "def find_freq_count(lst):\n    freq_count = {}\n    for elem in lst:\n        if elem in freq_count:\n            freq_count[elem] += 1\n        else:\n            freq_count[elem] = 1\n\n    return freq_count\n\n\ndef main():\n    lst = [\n        [1, 2, 3, 4, 5, 6, 7, 8, 9, 10],\n        [1, 2, 3, 4, 5, 6, 7, 8, 9, 10],\n        [1, 2, 3, 4, 5, 6, 7, 8, 9, 10],\n        [1, 2, 3, 4, 5, 6, 7, 8, 9, 10],\n        [1, 2, 3, 4, 5, 6, 7, 8, 9, 10],\n        [1, 2, 3, 4, 5, 6, 7, 8, 9, 10],\n        [1, 2, 3, 4, 5, 6, 7, 8, 9, 10],\n        [1, 2, 3, 4, 5, 6, 7, 8, 9, 10],\n        [1, 2, 3, 4, 5, 6, 7, 8, 9, 10],\n        [1, 2, 3, 4, 5, 6, 7, 8, 9, 10],\n        [1, 2, 3, 4, 5, 6, 7, 8, 9, 10],\n        [1, 2, 3, 4, 5, 6, 7, 8, 9, 10],\n        [1, 2, 3, 4, 5, 6, 7, 8, 9, 10],"
    },
    {
      "rank": 5,
      "score": 10.0,
      "candidate": "from collections import defaultdict\nfrom typing import List, Dict\n\n\ndef count_frequency(lists: List[List[int]]) -> Dict[int, int]:\n    \"\"\"\n    >>> count_frequency([[1, 2, 3], [2, 1], [1, 2, 3], [1, 2, 3]])\n    {1: 4, 2: 4, 3: 3}\n    \"\"\"\n    frequency: Dict[int, int] = defaultdict(int)\n    for list_ in lists:\n        for element in list_:\n            frequency[element] += 1\n    return frequency\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 6,
      "score": 10.0,
      "candidate": "from typing import List\n\n\ndef freq_count(arr: List[List[int]]) -> List[int]:\n    \"\"\"\n    >>> freq_count([[2, 1, 2, 2, 2, 3], [2, 3, 3, 3, 3, 2], [1, 2, 3, 2, 1, 2]])\n    [1, 2, 2, 3, 3, 3]\n    \"\"\"\n    if not arr:\n        return []\n\n    hash_map: dict = {}\n\n    for i in range(len(arr[0])):\n        for j in range(len(arr)):\n            if arr[j][i] not in hash_map:\n                hash_map[arr[j][i]] = 1\n            else:\n                hash_map[arr[j][i]] += 1\n\n    return [v for k, v in hash_map.items()]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 7,
      "score": 10.0,
      "candidate": "from collections import defaultdict\n\n\ndef frequency_count(lists: list) -> dict:\n    \"\"\"\n    >>> frequency_count([[1, 2], [1, 3], [1, 4], [1, 5], [3, 2], [4, 2]])\n    defaultdict(<class 'int'>, {1: 4, 2: 3, 3: 1, 4: 1})\n    \"\"\"\n    count: defaultdict = defaultdict(int)\n    for list_ in lists:\n        count[list_[0]] += 1\n        count[list_[1]] += 1\n    return count\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 8,
      "score": 10.0,
      "candidate": "def freq_count(lst):\n    freq = {}\n    for i in lst:\n        if i not in freq:\n            freq[i] = 1\n        else:\n            freq[i] += 1\n    return freq\n\n\ndef main():\n    lst = [[1, 2, 3], [4, 5, 6], [7, 8], [9, 10]]\n    print(freq_count(lst))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 9,
      "score": 10.0,
      "candidate": "from collections import defaultdict\n\n\ndef frequency_count(lists):\n    \"\"\"\n    Finds the frequency count of a list of lists.\n    :param lists: list of lists\n    :return: frequency count\n    \"\"\"\n    dict_ = defaultdict(int)\n    for list_ in lists:\n        for item in list_:\n            dict_[item] += 1\n    return dict_\n\n\ndef main():\n    \"\"\"\n    Driver function\n    \"\"\"\n    lists = [[1, 2, 3, 4], [5, 6, 7], [8, 9, 10]]\n    print(frequency_count(lists))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 10,
      "score": 10.0,
      "candidate": "from collections import defaultdict\n\n\ndef freq_count(lists: list) -> dict:\n    \"\"\"\n    >>> freq_count([[1, 2], [1, 3], [1, 2], [1, 3]])\n    {1: 4, 2: 2, 3: 2}\n    \"\"\"\n    freq: defaultdict = defaultdict(int)\n\n    for i in lists:\n        for j in i:\n            freq[j] += 1\n\n    return freq\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 11,
      "score": 10.0,
      "candidate": "def frequency_count(lists):\n    \"\"\"\n    >>> frequency_count([[1, 2, 3], [4, 5, 6], [1, 2, 3], [7, 8, 9]])\n    {1: 2, 2: 2, 3: 2, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1}\n    \"\"\"\n    result = {}\n    for list in lists:\n        for item in list:\n            if item in result:\n                result[item] += 1\n            else:\n                result[item] = 1\n    return result\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 12,
      "score": 9.972244412226821,
      "candidate": "from collections import defaultdict\n\n\ndef frequency_count(arr: list) -> dict:\n    \"\"\"\n    :param arr: list of lists\n    :return: dict with count of frequency\n    >>> frequency_count([[1, 1, 2], [1, 2], [1, 2], [1, 2, 2]])\n    {1: 4, 2: 4, (1, 2): 3}\n    \"\"\"\n    # return Counter(tuple(x) for x in arr)\n    dict_ = defaultdict(int)\n    for i in arr:\n        dict_[tuple(i)] += 1\n    return dict_\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 13,
      "score": 9.955441845600683,
      "candidate": "from collections import Counter\n\n\ndef frequency_count(lists):\n    \"\"\"\n    >>> frequency_count([[1, 2, 3, 1], [2, 3, 4, 2], [3, 4, 5, 3]])\n    Counter({1: 2, 2: 2, 3: 2, 4: 2, 5: 1})\n    \"\"\"\n    counter = Counter()\n    for list_ in lists:\n        counter.update(list_)\n    return counter\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 14,
      "score": 9.947278746918997,
      "candidate": "from collections import defaultdict\n\n\ndef frequency_count(lst):\n    \"\"\"Returns the frequency count of list of lists.\n\n    >>> frequency_count([[1, 2, 3], [1, 2, 3, 4], [1, 2], [1, 2], [1, 2, 3]])\n    defaultdict(<class 'int'>, {1: 3, 2: 3, 3: 2, 4: 1})\n    \"\"\"\n    result = defaultdict(int)\n\n    for sub_list in lst:\n        for item in sub_list:\n            result[item] += 1\n\n    return result\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 15,
      "score": 9.943807130332196,
      "candidate": "def frequency_count(lists):\n    \"\"\"\n    >>> frequency_count([[1,2,3,4,5,6,7], [5,6,7,8,9], [6,7,8,10,11,12], [1,2,3,4,5,6,7]])\n    {1: 2, 2: 2, 3: 2, 4: 2, 5: 2, 6: 2, 7: 2, 8: 1, 9: 1, 10: 1, 11: 1, 12: 1}\n    \"\"\"\n    count_dict = {}\n    for l in lists:\n        for v in l:\n            if v in count_dict:\n                count_dict[v] += 1\n            else:\n                count_dict[v] = 1\n    return count_dict\n\n\ndef test_frequency_count():\n    assert frequency_count([[1, 2, 3, 4, 5, 6, 7], [5, 6, 7, 8, 9], [6, 7, 8, 10, 11, 12], [1, 2, 3, 4, 5, 6, 7]]) == {\n        1: 2,\n        2: 2,\n        3: 2,\n        4: 2,\n        5: 2,\n        6: 2,\n        7: 2,\n        8: 1,\n        9: 1,\n        10: 1,\n        11: 1,\n        12: 1,\n    }\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 16,
      "score": 9.92773511305857,
      "candidate": "from collections import defaultdict\n\n\ndef count_list(l):\n    \"\"\"\n    Time complexity: O(n*m).\n    Space complexity: O(n*m).\n    \"\"\"\n    # Edge case.\n    if not l:\n        return {}\n\n    # Count frequency.\n    count = defaultdict(int)\n    for i in l:\n        for j in i:\n            count[j] += 1\n\n    return count\n\n\ndef main():\n    # list of lists\n    l = [[1, 2, 2], [1, 2, 3], [1, 2, 4], [1, 2, 5], [1, 2, 6]]\n    print count_list(l)\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 17,
      "score": 9.907580252700084,
      "candidate": "from collections import defaultdict\n\n\ndef frequency_count(lists):\n    \"\"\"\n    :param lists: list of lists\n    :return: frequency count of lists\n    \"\"\"\n    if not lists:\n        return\n    count = defaultdict(int)\n    for sublist in lists:\n        for element in sublist:\n            count[element] += 1\n    return count\n\n\ndef main():\n    \"\"\"\n    >>> frequency_count([[1, 1, 2], [3], [2]])\n    {1: 2, 2: 2, 3: 1}\n    >>> frequency_count([])\n    >>> frequency_count([[1, 1], [1, 2], [1, 2], [1, 2], [1, 2]])\n    {1: 4, 2: 3}\n    \"\"\"\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 18,
      "score": 9.887326147375612,
      "candidate": "from collections import defaultdict\n\n\ndef frequency_count(lists):\n    \"\"\"\n    >>> frequency_count([[1, 2, 3, 4], [4, 5], [3, 4, 5, 6, 7], [3, 5]])\n    {1: 1, 2: 1, 3: 2, 4: 2, 5: 2, 6: 1, 7: 1}\n    \"\"\"\n    freq = defaultdict(int)\n\n    for list_ in lists:\n        for item in list_:\n            freq[item] += 1\n\n    return freq\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 19,
      "score": 9.84517125889477,
      "candidate": "from collections import defaultdict\n\n\ndef frequency_count(lists):\n    \"\"\"\n    >>> frequency_count([[1, 2, 3, 4], [2, 4], [2, 4, 6, 8]])\n    {1: 1, 2: 3, 3: 1, 4: 2, 6: 1, 8: 1}\n    \"\"\"\n    dict_ = defaultdict(int)\n    for list_ in lists:\n        for item in list_:\n            dict_[item] += 1\n    return dict_\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 20,
      "score": 9.82723738998527,
      "candidate": "def find_freq_count(list_of_lists):\n    \"\"\"\n    >>> find_freq_count([[1, 2, 3, 4], [1, 2, 3, 4], [1, 2], [1, 2, 3, 4, 5], [1, 2, 3]])\n    {1: 3, 2: 3, 3: 2, 4: 2, 5: 1}\n    \"\"\"\n    # return a dictionary of frequencies\n    # frequency count of each list\n    # iterate over each list and increment the frequency of each element\n    # return the dictionary\n    pass\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 21,
      "score": 9.798587794426567,
      "candidate": "from collections import Counter\n\n\ndef frequency_count(lists):\n    \"\"\"\n    >>> frequency_count([[1, 2, 2, 3], [1, 2, 3, 4], [1, 2, 3, 4], [1, 2, 3, 4]])\n    Counter({1: 4, 2: 4, 3: 4, 4: 4})\n    >>> frequency_count([[1, 2, 2, 3], [1, 2, 3, 4], [1, 2, 3, 4], [1, 2, 3, 4], [1, 2, 3]])\n    Counter({1: 5, 2: 5, 3: 4, 4: 4})\n    \"\"\"\n    return Counter(sum(lists, []))\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 22,
      "score": 9.756920531119738,
      "candidate": "from collections import Counter\n\n\ndef frequency_count(lists):\n    \"\"\"\n    >>> frequency_count([[1, 2, 3, 4, 5], [2, 4, 6, 8], [1, 3, 5, 7, 9], [1, 2, 3, 4, 5]])\n    Counter({2: 3, 4: 3, 1: 3, 3: 3, 5: 3, 6: 2, 8: 2, 7: 2, 9: 2})\n    \"\"\"\n    result = Counter()\n    for l in lists:\n        result.update(l)\n\n    return result\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 23,
      "score": 9.712910410220639,
      "candidate": "def count_frequency(lists):\n    \"\"\"\n    >>> count_frequency([[1, 2, 3], [1, 2, 3], [2, 3, 4]])\n    [[1, 2], [1, 2], [2, 3], [3, 1], [2, 3], [3, 1]]\n    \"\"\"\n    count = []\n    for i in lists:\n        count.append(i.sort())\n    return count\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 24,
      "score": 9.706997524006955,
      "candidate": "from collections import defaultdict\n\n\ndef find_freq(lists: list) -> dict:\n    \"\"\"\n    >>> find_freq([[1, 2, 3, 4], [1, 2, 3], [2, 3, 4, 5]])\n    defaultdict(<class 'int'>, {1: 2, 2: 3, 3: 3, 4: 2, 5: 1})\n    \"\"\"\n    freq: defaultdict = defaultdict(int)\n    for i in lists:\n        for j in i:\n            freq[j] += 1\n    return freq\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 25,
      "score": 9.370583536698913,
      "candidate": "def frequency_count(arr):\n    \"\"\"\n    >>> frequency_count([[1, 2, 3], [1, 2, 3], [1, 2, 4], [1, 2, 4]])\n    {1: 2, 2: 3, 3: 2, 4: 2}\n    >>> frequency_count([[1, 2], [1, 2], [1, 2, 3], [1, 2, 3, 4], [1, 2, 4]])\n    {1: 3, 2: 5, 3: 2, 4: 1}\n    \"\"\"\n    result = {}\n    for sublist in arr:\n        for i in sublist:\n            if i in result:\n                result[i] += 1\n            else:\n                result[i] = 1\n    return result\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 26,
      "score": 9.21346272767743,
      "candidate": "from collections import defaultdict\nfrom typing import List\n\n\ndef frequency_count(lst: List[List[int]]) -> dict:\n    \"\"\"\n    :param lst: list of lists\n    :return: dictionary containing frequency count of elements\n    >>> frequency_count([[1, 2, 3, 4, 5], [1, 2, 3, 4], [1, 2, 3]])\n    defaultdict(<class 'int'>, {1: 3, 2: 3, 3: 3, 4: 2, 5: 1})\n    \"\"\"\n    result = defaultdict(int)\n    for sub_lst in lst:\n        for num in sub_lst:\n            result[num] += 1\n    return result\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 27,
      "score": 9.205959372648458,
      "candidate": "from collections import Counter\n\n\ndef frequency_count(lists):\n    \"\"\"\n    >>> frequency_count([[1, 1, 2, 2], [3, 3, 4], [5, 6]])\n    {1: 4, 2: 4, 3: 4, 4: 3, 5: 2, 6: 2}\n    \"\"\"\n    flat = [item for sublist in lists for item in sublist]\n    return Counter(flat)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 28,
      "score": 8.973005557553902,
      "candidate": "def frequency_count(arr):\n    \"\"\"\n    >>> frequency_count([[1, 2, 2, 2, 3, 4], [1, 1, 2, 3, 4], [1, 2, 2, 2, 3]])\n    {1: 3, 2: 4, 3: 2, 4: 2}\n    \"\"\"\n    frequency = {}\n    for i in range(len(arr)):\n        for j in range(len(arr[i])):\n            if arr[i][j] not in frequency:\n                frequency[arr[i][j]] = 1\n            else:\n                frequency[arr[i][j]] += 1\n    return frequency\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 29,
      "score": 8.95994420569242,
      "candidate": "from collections import defaultdict\n\n\ndef frequency_count(lists):\n    \"\"\"\n    >>> frequency_count([[1, 2, 3], [1, 2, 4], [1, 2, 3], [1, 2, 3], [1, 2, 3]])\n    defaultdict(<class 'int'>, {3: 3, 2: 3, 1: 3, 4: 1})\n    \"\"\"\n    frequency = defaultdict(int)\n\n    for list_ in lists:\n        for element in list_:\n            frequency[element] += 1\n\n    return frequency\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 30,
      "score": 8.910084504002544,
      "candidate": "def freq_count(ls):\n    \"\"\"\n    >>> freq_count([[1, 2, 3, 4, 5], [2, 4, 5, 6], [2, 3, 4, 7]])\n    [[5, 1], [2, 3], [4, 3], [6, 1], [7, 1]]\n    \"\"\"\n    count = {}\n    for list_ in ls:\n        for num in list_:\n            count[num] = count.get(num, 0) + 1\n    return [[num, freq] for num, freq in count.items()]\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 31,
      "score": 8.85571690049604,
      "candidate": "from collections import Counter\nfrom typing import List\n\n\ndef frequency_count(list_of_lists: List[List[int]]) -> List[List[int]]:\n    \"\"\"\n    Write a function to find frequency count of list of lists.\n    \"\"\"\n    freq_count: List[List[int]] = []\n\n    for list_ in list_of_lists:\n        freq = Counter(list_)\n        freq_count.append([*freq.values()])\n\n    return freq_count\n\n\nif __name__ == \"__main__\":\n    assert (\n        frequency_count(\n            [[2, 3, 4], [2, 3, 4], [2, 3, 4], [2, 3, 4], [2, 3, 4]]\n        )\n        == [[5], [5], [5], [5], [5]]\n    )\n    assert (\n        frequency_count(\n            [[2, 3, 4], [2, 3, 4], [2, 3, 4], [2, 3, 4], [2, 3, 4], [1, 2, 3]]\n        )\n        == [[5], [5], [5], [5], [5], [1]]\n    )"
    },
    {
      "rank": 32,
      "score": 8.855395696632057,
      "candidate": "from collections import defaultdict\n\n\ndef frequency_count(lists):\n    \"\"\"\n    :param lists: list of lists\n    :return: dict of key, value pairs\n    \"\"\"\n\n    freq_dict = defaultdict(int)\n    for item in lists:\n        freq_dict[item] += 1\n    return freq_dict\n\n\nif __name__ == \"__main__\":\n    lists = [\n        [1, 2, 3, 4],\n        [1, 2, 3, 4],\n        [1, 2, 3, 4],\n        [1, 2, 3, 4],\n        [1, 2, 3, 5],\n        [1, 2, 3, 6],\n        [1, 2, 3, 7],\n    ]\n    print(frequency_count(lists))"
    },
    {
      "rank": 33,
      "score": 8.850707355641543,
      "candidate": "def frequency_count(lists):\n    \"\"\"\n    >>> frequency_count([[1, 2, 3, 2], [2, 3, 4, 5, 6], [5, 6, 7, 8]])\n    {1: 1, 2: 2, 3: 2, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1}\n    \"\"\"\n    result = {}\n    for list_ in lists:\n        for item in list_:\n            if item not in result:\n                result[item] = 0\n            result[item] += 1\n    return result\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 34,
      "score": 8.8281618090209,
      "candidate": "from collections import Counter\n\n\ndef frequency_counter(lists: list) -> dict:\n    \"\"\"\n    >>> frequency_counter([[1, 2, 3, 4], [1, 2, 3, 4, 5], [1, 2, 3]])\n    {1: 3, 2: 3, 3: 2, 4: 2, 5: 1}\n    \"\"\"\n    counter = Counter()\n    for sublist in lists:\n        counter.update(sublist)\n    return dict(counter)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 35,
      "score": 8.76828871349479,
      "candidate": "from collections import Counter\n\ndef frequency_count(lists):\n    \"\"\"\n    >>> frequency_count([[1,2,3,4], [2,3,4,5], [4,5,6,7]])\n    {1: 1, 2: 2, 3: 2, 4: 2, 5: 2, 6: 1, 7: 1}\n    \"\"\"\n    return Counter(item for list_ in lists for item in list_)\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 36,
      "score": 8.715724466237427,
      "candidate": "from collections import defaultdict\n\n\ndef count_freq(lists):\n    count = defaultdict(int)\n    for l in lists:\n        for i in l:\n            count[i] += 1\n\n    return count\n\n\nif __name__ == \"__main__\":\n    lists = [[1, 2, 3, 3, 4], [1, 2, 3, 3, 4], [2, 3, 4, 5, 6], [1, 2, 3, 3, 4]]\n    print(count_freq(lists))"
    },
    {
      "rank": 37,
      "score": 8.632293453617281,
      "candidate": "from collections import Counter\n\n\ndef frequency_count(lists):\n    c = Counter()\n    for l in lists:\n        c += Counter(l)\n    return c\n\n\nif __name__ == '__main__':\n    lists = [[1, 2, 3, 4], [2, 3, 3], [3, 3], [1, 2, 2]]\n    print(frequency_count(lists))"
    },
    {
      "rank": 38,
      "score": 8.625262456968262,
      "candidate": "from collections import Counter\n\ndef frequency_count(lists):\n    \"\"\"\n    Frequency count of list of lists.\n    \"\"\"\n\n    counter = Counter()\n    for lst in lists:\n        counter.update(lst)\n    return counter\n\n\ndef test_frequency_count():\n    \"\"\"\n    Tests for frequency_count\n    \"\"\"\n    assert frequency_count([[1, 1, 2], [2, 3], [2, 3, 4], [2, 3]]) == {1: 3, 2: 4, 3: 3, 4: 1}\n    assert frequency_count([[1, 2, 3], [3, 4]]) == {1: 1, 2: 1, 3: 2, 4: 1}\n\n\nif __name__ == '__main__':\n    test_frequency_count()"
    },
    {
      "rank": 39,
      "score": 8.625142247198651,
      "candidate": "def freq(list_of_lists):\n    \"\"\"\n    >>> freq([[1, 2, 3, 2, 1], [2, 3, 4, 2, 1], [3, 4, 5, 4, 1]])\n    {1: 3, 2: 4, 3: 4, 4: 4, 5: 1}\n    \"\"\"\n    freq_count = {}\n    for l in list_of_lists:\n        for i in l:\n            if i not in freq_count:\n                freq_count[i] = 1\n            else:\n                freq_count[i] += 1\n    return freq_count\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 40,
      "score": 8.623000730200317,
      "candidate": "def freq_count(lists):\n    count = {}\n    for list_ in lists:\n        for item in list_:\n            if item not in count:\n                count[item] = 1\n            else:\n                count[item] += 1\n    return count\n\n\nif __name__ == \"__main__\":\n    print freq_count([[1, 2, 3], [2, 3, 4], [3, 4, 5], [3, 4, 5]])"
    },
    {
      "rank": 41,
      "score": 8.616253589228675,
      "candidate": "def freq_count(lists):\n    \"\"\"\n    >>> freq_count([[1, 2, 3, 4], [2, 3, 1, 4], [3, 4, 2, 1]])\n    {1: 3, 2: 3, 3: 3, 4: 3}\n    \"\"\"\n    result = {}\n    for lst in lists:\n        for i in lst:\n            if i in result:\n                result[i] += 1\n            else:\n                result[i] = 1\n    return result\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 42,
      "score": 8.610076160146226,
      "candidate": "from collections import Counter\n\n\ndef frequency_count(lists):\n    \"\"\"\n    This function counts the frequency of each element in the list.\n    >>> frequency_count([[1, 2, 3, 4], [4, 5, 6, 4, 1]])\n    Counter({1: 2, 4: 3, 2: 1, 3: 1, 5: 1, 6: 1})\n    >>> frequency_count([[1, 2, 3, 4], [1, 3, 4, 5]])\n    Counter({1: 2, 2: 1, 3: 2, 4: 2, 5: 1})\n    \"\"\"\n    total_list = []\n\n    for i in lists:\n        total_list += i\n\n    return Counter(total_list)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 43,
      "score": 8.606486429141842,
      "candidate": "from collections import Counter\n\n\ndef frequency_count(lists):\n    \"\"\"\n    >>> frequency_count([[1, 2, 3], [4, 5, 6], [1, 2, 3]])\n    Counter({1: 2, 2: 2, 3: 2, 4: 1, 5: 1, 6: 1})\n    \"\"\"\n    counter = Counter()\n    for list_ in lists:\n        counter.update(list_)\n    return counter\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 44,
      "score": 8.60156811074208,
      "candidate": "from collections import defaultdict\n\n\ndef find_freq(lst):\n    \"\"\"\n    >>> find_freq([[1, 2, 3], [2, 4], [3, 5], [1, 2, 4], [6, 7]])\n    {1: 2, 2: 3, 3: 2, 4: 2, 5: 1, 6: 1, 7: 1}\n    \"\"\"\n    d = defaultdict(int)\n    for i in lst:\n        for j in i:\n            d[j] += 1\n    return d\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 45,
      "score": 8.565425580227462,
      "candidate": "def frequency_count(lists):\n    \"\"\"\n    >>> frequency_count([[1,2,3,4],[2,3,1,4],[4,5,6,7]])\n    {1: 3, 2: 3, 3: 3, 4: 3, 5: 1, 6: 1, 7: 1}\n    \"\"\"\n    freq_count = {}\n    for list_ in lists:\n        for item in list_:\n            if item in freq_count:\n                freq_count[item] += 1\n            else:\n                freq_count[item] = 1\n    return freq_count\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 46,
      "score": 8.542875062379007,
      "candidate": "from collections import Counter\nfrom functools import reduce\n\n\ndef frequency_count(lst):\n    return Counter(reduce(lambda x, y: x + y, lst))\n\n\ndef main():\n    result = frequency_count([[1, 2, 3, 2, 1], [2, 3, 1, 1]])\n    print(result)\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 47,
      "score": 8.499905739299377,
      "candidate": "from collections import Counter\n\n\ndef frequency_count(lists):\n    \"\"\"\n    Find the frequency count of the given list of lists.\n    :param lists: list of lists\n    :return: dict of frequency count\n    \"\"\"\n    # Counter is a subclass of dict, so it can be used as dict.\n    return Counter(map(tuple, lists))\n\n\nif __name__ == \"__main__\":\n    print(frequency_count([[1, 2, 3], [2, 3, 4], [3, 4, 5]]))"
    },
    {
      "rank": 48,
      "score": 8.490324832712195,
      "candidate": "from collections import Counter\n\n\ndef frequency_count(lists):\n    \"\"\"\n    >>> frequency_count([[1, 2, 3], [2, 3, 4], [2, 3, 4]])\n    Counter({2: 3, 3: 3, 4: 2, 1: 1})\n    \"\"\"\n    return Counter(lists)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 49,
      "score": 8.48796797856353,
      "candidate": "def freq_list_of_list(lists):\n    freq = {}\n    for lst in lists:\n        for item in lst:\n            if item in freq:\n                freq[item] += 1\n            else:\n                freq[item] = 1\n    return freq\n\n\nlists = [\n    ['a', 'b', 'a', 'c', 'd', 'a'],\n    ['b', 'a', 'a', 'c', 'd', 'a'],\n    ['a', 'b', 'a', 'c', 'd', 'a'],\n]\nprint(freq_list_of_list(lists))"
    },
    {
      "rank": 50,
      "score": 8.478208546788407,
      "candidate": "from collections import defaultdict\n\n\ndef freq_count(lists):\n    freq = defaultdict(int)\n\n    for item in lists:\n        freq[item] += 1\n\n    return freq\n\n\nif __name__ == \"__main__\":\n    lists = [\"a\", \"b\", \"a\", \"c\", \"d\", \"b\", \"a\"]\n    print(freq_count(lists))"
    },
    {
      "rank": 51,
      "score": 8.437695832075478,
      "candidate": "from collections import Counter\n\n\ndef freq_count(lists):\n    \"\"\"\n    >>> freq_count([[1, 2, 2], [1, 2, 3], [1, 3, 4], [1, 3, 5]])\n    Counter({1: 4, 2: 3, 3: 3, 5: 1})\n    \"\"\"\n    ctr = Counter()\n    for list_ in lists:\n        for item in list_:\n            ctr[item] += 1\n    return ctr\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 52,
      "score": 8.426531424889468,
      "candidate": "def count_frequency(arr):\n    dict = {}\n    for i in arr:\n        for j in i:\n            if j in dict:\n                dict[j] += 1\n            else:\n                dict[j] = 1\n    return dict\n\n\ndef main():\n    arr = [\n        [1, 2, 3, 4, 5, 6, 7],\n        [1, 2, 3, 4, 5, 6, 7],\n        [1, 2, 3, 4, 5, 6, 7],\n        [1, 2, 3, 4, 5, 6, 7],\n        [1, 2, 3, 4, 5, 6, 7],\n        [1, 2, 3, 4, 5, 6, 7],\n        [1, 2, 3, 4, 5, 6, 7],\n        [1, 2, 3, 4, 5, 6, 7],\n        [1, 2, 3, 4, 5, 6, 7],\n        [1, 2, 3, 4, 5, 6, 7],\n        [1, 2, 3, 4, 5, 6, 7],\n    ]\n\n    print(count_frequency(arr))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 53,
      "score": 8.408439383654278,
      "candidate": "from collections import Counter\n\n\ndef frequency_list(lst):\n    \"\"\"Get frequency count of list of lists.\"\"\"\n    return Counter(map(tuple, lst))\n\n\nif __name__ == \"__main__\":\n    assert frequency_list([[1, 2], [1, 2], [1, 2], [1, 3], [1, 3]]) == {\n        (1, 2): 3,\n        (1, 3): 2,\n    }"
    },
    {
      "rank": 54,
      "score": 8.375312293858853,
      "candidate": "from collections import defaultdict\n\n\ndef find_frequency(lists, key):\n    frequency_map = defaultdict(int)\n    for list_ in lists:\n        frequency_map[list_[key]] += 1\n\n    return frequency_map\n\n\ndef main():\n    lists = [\n        ['apple', 'mango', 'orange', 'guava'],\n        ['mango', 'apple', 'orange', 'guava'],\n        ['orange', 'mango', 'guava', 'apple'],\n        ['guava', 'orange', 'apple', 'mango'],\n        ['guava', 'apple', 'mango', 'orange'],\n    ]\n\n    print(find_frequency(lists, key=0))\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 55,
      "score": 8.331556294201176,
      "candidate": "from collections import defaultdict\n\ndef frequency_count(lists):\n    \"\"\"\n    >>> frequency_count([[1, 2, 3, 4], [2, 3, 4, 5], [3, 4, 5, 6]])\n    [[1, 2], [2, 1], [3, 2], [4, 3], [5, 2], [6, 1]]\n    \"\"\"\n    # O(n*m)\n    # n = number of lists\n    # m = number of elements in each list\n\n    count = defaultdict(int)\n\n    for list_ in lists:\n        for element in list_:\n            count[element] += 1\n\n    return [[key, value] for key, value in count.items()]\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 56,
      "score": 8.327367757082776,
      "candidate": "def count_frequency(lst):\n    freq = {}\n    for item in lst:\n        if item in freq:\n            freq[item] += 1\n        else:\n            freq[item] = 1\n\n    return freq\n\n\ndef main():\n    lst = [1, 2, 3, 1, 2, 3, 1, 2, 3, 1]\n    print(count_frequency(lst))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 57,
      "score": 8.298597569547805,
      "candidate": "from collections import Counter\n\n\ndef frequency_count(lists):\n    \"\"\"Return frequency count of lists.\"\"\"\n    return Counter(lists)\n\n\nif __name__ == '__main__':\n    list_ = [\n        [1, 2, 3],\n        [1, 2, 3],\n        [4, 5, 6],\n        [4, 5, 6],\n        [4, 5, 6],\n    ]\n    print(frequency_count(list_))"
    },
    {
      "rank": 58,
      "score": 8.294940769211511,
      "candidate": "from collections import Counter\n\n\ndef count_frequency(lists):\n    \"\"\"\n    O(n) & O(n)\n    \"\"\"\n    cnt = Counter()\n    for item in lists:\n        cnt[item] += 1\n    return cnt\n\n\nif __name__ == \"__main__\":\n    assert count_frequency([1, 2, 3, 4, 5]) == {1: 1, 2: 1, 3: 1, 4: 1, 5: 1}\n    assert count_frequency([1, 2, 3, 4, 5, 1, 2, 3, 4, 5]) == {\n        1: 2,\n        2: 2,\n        3: 2,\n        4: 2,\n        5: 2,\n    }\n    assert count_frequency([\"a\", \"b\", \"c\", \"d\", \"e\"]) == {\n        \"a\": 1,\n        \"b\": 1,\n        \"c\": 1,\n        \"d\": 1,\n        \"e\": 1,\n    }\n    assert count_frequency([\"a\", \"b\", \"c\", \"d\", \"e\", \"a\", \"b\", \"c\", \"d\", \"e\"]) == {\n        \"a\": 2,\n        \"b\": 2,\n        \"c\": 2,\n        \"d\": 2,\n        \"e\": 2,\n    }\n    assert count_frequency([\"a\", \"a\", \"a\", \"b\", \"b\", \"c\", \"c\", \"c\"]) == {\n        \"a\": 3,\n        \"b\": 2,\n        \"c\": 3,\n    }"
    },
    {
      "rank": 59,
      "score": 8.289838256518838,
      "candidate": "def frequency_count(lists):\n    result = {}\n    for l in lists:\n        for i in l:\n            if i not in result:\n                result[i] = 1\n            else:\n                result[i] += 1\n    return result\n\n\nlists = [[1, 2, 3, 4, 5], [1, 2, 3], [1, 2, 3, 4, 5, 6, 7], [1, 2, 3, 4, 5]]\nprint(frequency_count(lists))"
    },
    {
      "rank": 60,
      "score": 8.214125058964552,
      "candidate": "from collections import Counter\n\n\ndef frequency_count(lists):\n    \"\"\"Find frequency count of list of lists.\"\"\"\n    return Counter([y for x in lists for y in x])\n\n\nif __name__ == '__main__':\n    print(frequency_count([[1, 2, 3], [1, 2, 3], [1, 2, 3], [4, 5]]))"
    },
    {
      "rank": 61,
      "score": 8.212735598038213,
      "candidate": "def frequency_count(arr):\n    result = {}\n    for i in arr:\n        if i in result:\n            result[i] += 1\n        else:\n            result[i] = 1\n    return result\n\n\ndef main():\n    arr = [[1, 2, 3], [2, 3], [3, 1]]\n    print(frequency_count(arr))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 62,
      "score": 8.211579567659316,
      "candidate": "def frequency_count(lists):\n    \"\"\"\n    >>> frequency_count([[1, 2, 3], [2, 3, 4], [3, 4, 5]])\n    {1: 1, 2: 2, 3: 3, 4: 3, 5: 1}\n    \"\"\"\n    result = {}\n    for list_ in lists:\n        for item in list_:\n            if item in result:\n                result[item] += 1\n            else:\n                result[item] = 1\n    return result\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 63,
      "score": 8.2048573255218,
      "candidate": "def frequency_count(lists):\n    \"\"\"\n    >>> frequency_count([[1, 2, 3, 4, 1], [5, 2, 6, 1, 2], [2, 2, 5, 1, 5]])\n    {1: 4, 2: 7, 5: 4, 3: 1, 4: 1, 6: 1}\n    \"\"\"\n    dict_ = {}\n    for list_ in lists:\n        for item in list_:\n            dict_[item] = dict_.get(item, 0) + 1\n    return dict_\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 64,
      "score": 8.172253082181854,
      "candidate": "from collections import defaultdict\n\n\ndef freq_count(lists):\n    \"\"\"\n    >>> freq_count([[1, 2], [3, 4], [5, 6]])\n    defaultdict(<class 'int'>, {1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1})\n    \"\"\"\n    counts = defaultdict(int)\n    for list_ in lists:\n        for element in list_:\n            counts[element] += 1\n    return counts\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 65,
      "score": 8.163300679823958,
      "candidate": "from collections import defaultdict\n\n\ndef frequency_list(lists):\n    frequency = defaultdict(int)\n    for list in lists:\n        for item in list:\n            frequency[item] += 1\n    return frequency\n\n\nlists = [[1, 2, 3, 4, 5], [1, 2, 3, 4, 5], [2, 3, 4, 5, 6]]\nprint(frequency_list(lists))"
    },
    {
      "rank": 66,
      "score": 8.144125099485041,
      "candidate": "def frequency_count(lists):\n    \"\"\"\n    >>> frequency_count([[1, 2, 3], [1, 2, 3], [3, 2, 1], [4, 5, 6]])\n    {1: 2, 2: 3, 3: 2, 4: 1, 5: 1, 6: 1}\n    \"\"\"\n    counter = {}\n    for list in lists:\n        for item in list:\n            counter[item] = counter.get(item, 0) + 1\n    return counter\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 67,
      "score": 8.143591138329747,
      "candidate": "from collections import defaultdict\n\n\ndef find_freq_count(lists):\n    \"\"\"\n    O(n) & O(n)\n    \"\"\"\n    freq = defaultdict(int)\n\n    for lst in lists:\n        for item in lst:\n            freq[item] += 1\n\n    return freq\n\n\nif __name__ == \"__main__\":\n    lists = [[1, 2, 2, 3, 4], [2, 3, 4, 5, 5], [3, 4, 5, 6, 6]]\n    print(find_freq_count(lists))"
    },
    {
      "rank": 68,
      "score": 8.105983444291466,
      "candidate": "def frequency_count(lists):\n    \"\"\"\n    >>> frequency_count([[1, 2, 3, 4, 5], [1, 2, 3], [1, 2], [1, 2, 3, 4]])\n    {1: 4, 2: 4, 3: 3, 4: 2, 5: 1}\n    >>> frequency_count([[1, 2, 3, 4, 5], [1, 2, 3], [1, 2], [1, 2, 3, 4], [1, 2, 3, 4]])\n    {1: 5, 2: 5, 3: 4, 4: 3, 5: 2}\n    \"\"\"\n    counts = {}\n    for l in lists:\n        for item in l:\n            if item in counts:\n                counts[item] += 1\n            else:\n                counts[item] = 1\n    return counts\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 69,
      "score": 7.990432406683839,
      "candidate": "def frequency_count(lists):\n    freq_dict = {}\n    for list in lists:\n        for num in list:\n            if num in freq_dict:\n                freq_dict[num] += 1\n            else:\n                freq_dict[num] = 1\n    return freq_dict\n\n\ndef main():\n    print(frequency_count([[1, 2, 3, 4, 1, 2], [2, 3, 3, 3, 2, 4], [1, 2, 4, 3, 5, 6]]))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 70,
      "score": 7.915588979966494,
      "candidate": "def frequency_count(lists: list) -> dict:\n    \"\"\"\n    >>> frequency_count([[1, 2, 3], [2, 3, 4], [2, 3, 4], [2, 3, 4]])\n    {1: 1, 2: 3, 3: 3, 4: 1}\n    \"\"\"\n    result: dict = {}\n    for list_ in lists:\n        for item in list_:\n            if item in result:\n                result[item] += 1\n            else:\n                result[item] = 1\n    return result\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 71,
      "score": 7.8912769574414305,
      "candidate": "from collections import defaultdict\n\n\ndef count_freq(lists):\n    \"\"\"\n    >>> count_freq([[1, 1, 2], [2, 3], [1, 3], [1, 3], [3, 4, 5, 1]])\n    defaultdict(<class 'int'>, {1: 4, 2: 2, 3: 3, 5: 1})\n    \"\"\"\n    if not lists:\n        return defaultdict(int)\n    count = defaultdict(int)\n    for item in lists:\n        for i in item:\n            count[i] += 1\n    return count\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 72,
      "score": 7.868947655733293,
      "candidate": "from collections import defaultdict\nfrom typing import List, DefaultDict\n\n\ndef freq_count(lists: List[List[int]]) -> DefaultDict[int, int]:\n    \"\"\"Finds frequency count of a list of lists.\n\n    Args:\n        lists (List[List[int]]): list of lists\n\n    Returns:\n        DefaultDict[int, int]: frequency count of elements\n    \"\"\"\n    freq: DefaultDict[int, int] = defaultdict(int)\n\n    for lst in lists:\n        for i in lst:\n            freq[i] += 1\n\n    return freq\n\n\nif __name__ == \"__main__\":\n    assert freq_count([[1, 1, 2], [2, 3], [3, 1, 1, 1, 2, 2, 2]]) == {1: 6, 2: 5, 3: 2}"
    },
    {
      "rank": 73,
      "score": 7.780351419995229,
      "candidate": "from collections import Counter\n\ndef freq(lists):\n    counter = Counter()\n\n    for l in lists:\n        for e in l:\n            counter[e] += 1\n\n    return counter\n\nlists = [[1, 2, 3, 4], [1, 2, 3, 4], [1, 2, 3, 5], [1, 2, 3, 6]]\nprint(freq(lists))"
    },
    {
      "rank": 74,
      "score": 7.738292593776799,
      "candidate": "from collections import defaultdict\n\n\ndef frequency_count(lists: list) -> dict:\n    \"\"\"\n    >>> frequency_count([[1,2,3], [1,2,3], [1,2], [1,2,3,4], [1,2,3]])\n    defaultdict(<class 'int'>, {1: 4, 2: 4, 3: 3, 4: 1})\n    \"\"\"\n    frequency = defaultdict(int)\n\n    for list_ in lists:\n        for item in list_:\n            frequency[item] += 1\n\n    return frequency\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 75,
      "score": 7.7320703513377165,
      "candidate": "def frequency_count(lists):\n    \"\"\"\n    :param: lists - list of lists\n    return: list of tuples - [(item, count)]\n    \"\"\"\n    result = []\n    for item in lists:\n        result.append((item, lists.count(item)))\n    return result\n\nlists = [1, 2, 2, 3, 3, 3, 4, 5, 5]\n\nprint(frequency_count(lists))"
    },
    {
      "rank": 76,
      "score": 7.705183449260731,
      "candidate": "from collections import Counter\n\n\ndef frequency_count(lists):\n    \"\"\"\n    >>> frequency_count([[1, 2, 2], [1, 2, 3], [1, 3, 4], [2, 3, 4]])\n    [[1, 3], [2, 2], [3, 2], [4, 1]]\n    \"\"\"\n    counter = Counter()\n    for list_ in lists:\n        counter.update(list_)\n    return [[k, v] for k, v in counter.items()]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 77,
      "score": 7.5819855281879285,
      "candidate": "def frequency_count(lists):\n    # TODO: Write your code here\n    count_dict = {}\n    for list in lists:\n        for item in list:\n            if item in count_dict:\n                count_dict[item] += 1\n            else:\n                count_dict[item] = 1\n    return count_dict\n\n\nlists = [\n    ['a', 'b', 'c', 'a', 'b', 'c', 'a', 'b'],\n    ['a', 'b', 'c', 'a', 'b', 'c', 'a', 'b'],\n    ['a', 'b', 'c', 'a', 'b', 'c', 'a', 'b'],\n    ['a', 'b', 'c', 'a', 'b', 'c', 'a', 'b'],\n    ['a', 'b', 'c', 'a', 'b', 'c', 'a', 'b'],\n]\nprint(frequency_count(lists))"
    },
    {
      "rank": 78,
      "score": 7.562924366763077,
      "candidate": "from collections import Counter\n\n\ndef frequency_count(lists):\n    \"\"\"\n    >>> frequency_count([[1,2],[1,3],[2,1,4],[3,2],[4,1]])\n    Counter({1: 3, 2: 2, 3: 2, 4: 2})\n    \"\"\"\n    c = Counter()\n    for list_ in lists:\n        for item in list_:\n            c[item] += 1\n    return c\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 79,
      "score": 7.4878043221155455,
      "candidate": "def frequency_count(lists):\n    \"\"\"\n    >>> frequency_count([[1, 2, 3, 4], [1, 2, 3, 4], [2, 3], [2, 3], [2, 3, 4, 5]])\n    {1: 2, 2: 3, 3: 3, 4: 2, 5: 1}\n    \"\"\"\n    count = {}\n    for list_ in lists:\n        for item in list_:\n            count[item] = count.get(item, 0) + 1\n    return count\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 80,
      "score": 7.464609382504557,
      "candidate": "from collections import Counter\n\ndef frequency_count(arr):\n    \"\"\"\n    >>> frequency_count([[1,2,3],[4,5,6],[1,2,3]])\n    Counter({1: 3, 2: 3, 3: 2, 4: 1, 5: 1, 6: 1})\n    \"\"\"\n    res = Counter()\n    for x in arr:\n        res.update(x)\n    return res\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 81,
      "score": 7.4506599871439985,
      "candidate": "from collections import Counter\n\n\ndef frequency_count(lists):\n    \"\"\"\n    Find frequency count of list of lists.\n    \"\"\"\n    counter = Counter()\n    for i in lists:\n        counter.update(i)\n    return counter\n\n\ndef main():\n    \"\"\"\n    Print frequency count of list of lists.\n    \"\"\"\n    lists = [[1, 2, 3], [2, 3, 4], [3, 4, 5], [4, 5, 6]]\n    print(frequency_count(lists))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 82,
      "score": 7.134571892399572,
      "candidate": "from collections import Counter\n\n\ndef count_frequency(lists):\n    # get a flatten list\n    flat_list = [item for sublist in lists for item in sublist]\n    return Counter(flat_list)\n\n\nif __name__ == \"__main__\":\n    print(count_frequency([[1, 2, 3], [1, 2, 3], [1, 2, 3], [4, 5, 6]]))"
    },
    {
      "rank": 83,
      "score": 3.0,
      "candidate": "def count_frequency(lists):\n    \"\"\"\n    :param: lists - list of list of integers\n    Return frequency count of each integer.\n    \"\"\"\n    if not lists:\n        return None\n\n    count_dict = {}\n\n    for list in lists:\n        for item in list:\n            if item not in count_dict:\n                count_dict[item] = 1\n            else:\n                count_dict[item] += 1\n\n    return count_dict\n\n\ndef test_function(test_case):\n    lists = test_case[0]\n    solution = test_case[1]\n    output = count_frequency(lists)\n\n    if output == solution:\n        print(\"Pass\")\n    else:\n        print(\"Fail\")\n\n\ntest_case_1 = [[1, 1, 2, 3, 4, 2, 3, 5], [2, 4], [2, 3, 4]]\ntest_function(test_case_1)\n\ntest_case_2 = [[1, 2, 3, 4, 5], [2, 4], [2, 3, 4]]\ntest_function(test_case_2)\n\ntest_case_3 = [[1, 2, 3, 4, 5], [2, 4], [2, 3, 4, 5]]\ntest_function(test_case_3)\n\ntest_case_4 = [[1, 2, 3, 4, 5], [1, 1], [2, 3, 4]]\ntest_function(test_case_4)\n\ntest_case_5 = [[1, 2, 3, 4, 5], [1, 2, 3, 4], [1, 2, 3, 4, 5]]\ntest_function(test_case_5)\n\ntest_case_6 = [[1, 2, 3, 4, 5], [1, 2, 3, 4], [1, 2, 3, 4, 5, 6]]\ntest_function(test_case_6"
    },
    {
      "rank": 84,
      "score": 3.0,
      "candidate": "def frequency_count(lists):\n    result = {}\n    for list_ in lists:\n        for value in list_:\n            if value in result:\n                result[value] += 1\n            else:\n                result[value] = 1\n    return result\n\n\ndef test_function(test_case):\n    lists = test_case[0]\n    solution = test_case[1]\n    output = frequency_count(lists)\n    if output == solution:\n        print(\"Pass\")\n    else:\n        print(\"Fail\")\n\n\nlists = [[1, 2, 2, 3, 4], [4, 4, 4, 5, 5], [5, 6, 6, 6, 6]]\nsolution = {1: 1, 2: 2, 3: 1, 4: 3, 5: 2, 6: 5}\ntest_case = [lists, solution]\ntest_function(test_case)\n\nlists = [[1, 2, 3, 4, 5], [5, 6, 7, 8, 9], [9, 9, 9, 9, 9]]\nsolution = {1: 1, 2: 1, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 4}\ntest_case = [lists, solution]\ntest_function(test_case)"
    },
    {
      "rank": 85,
      "score": 3.0,
      "candidate": "from collections import Counter\n\n\ndef frequency_count(lists):\n    # TODO: Write your solution here\n    # return Counter(lists)\n    count = {}\n    for l in lists:\n        if l not in count:\n            count[l] = 1\n        else:\n            count[l] += 1\n    return count\n\n\ndef test(test_case, expected):\n    actual = frequency_count(test_case)\n    if expected == actual:\n        print(\"Passed\")\n    else:\n        print(\"Failed\")\n\n\ntest([1, 2, 2, 3, 4, 5, 5, 5, 6, 7], {1: 1, 2: 2, 3: 1, 4: 1, 5: 3, 6: 1, 7: 1})\ntest([1, 2, 3, 4, 5, 6, 6, 6, 6, 7, 8, 8, 8, 8, 9, 10],\n    {1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 4, 7: 1, 8: 4, 9: 1, 10: 1})\ntest([1, 2, 3, 4, 5, 6, 6, 6, 6, 7, 8, 8, 8, 8, 9, 10, 10, 11],\n    {1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 4, 7: 1, 8: 4, 9: 1, 10: 2, 11: 1})\ntest([1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 6, 6, 7, 7, 8, 8, 9, 9, 10,"
    },
    {
      "rank": 86,
      "score": 3.0,
      "candidate": "from collections import defaultdict\nfrom typing import List, Dict\n\n\ndef count_freq(lst: List[List[int]]) -> Dict[int, int]:\n    \"\"\"\n    O(n*m) & O(n)\n    \"\"\"\n    count = defaultdict(int)\n\n    for sub_lst in lst:\n        for elem in sub_lst:\n            count[elem] += 1\n\n    return count\n\n\nif __name__ == \"__main__\":\n    assert count_freq([[1, 2], [2, 3], [3, 1]]) == {1: 2, 2: 3, 3: 2}"
    },
    {
      "rank": 87,
      "score": 3.0,
      "candidate": "from collections import defaultdict\n\n\ndef count_freq(lists):\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(n)\n    \"\"\"\n    freq = defaultdict(int)\n\n    for lst in lists:\n        for num in lst:\n            freq[num] += 1\n\n    return freq\n\n\nif __name__ == \"__main__\":\n    assert count_freq([[1, 2, 3], [2, 3, 4], [3, 4, 5]]) == {1: 1, 2: 2, 3: 3, 4: 2, 5: 1}"
    },
    {
      "rank": 88,
      "score": 3.0,
      "candidate": "from collections import defaultdict\n\n\ndef frequency_count(data):\n    frequency_dict = defaultdict(int)\n    for lists in data:\n        for item in lists:\n            frequency_dict[item] += 1\n    return frequency_dict\n\n\nif __name__ == \"__main__\":\n    data = [\n        [\"A\", \"B\", \"C\", \"D\", \"E\"],\n        [\"A\", \"A\", \"B\", \"D\", \"E\"],\n        [\"A\", \"A\", \"A\", \"D\", \"E\"],\n        [\"A\", \"A\", \"A\", \"A\", \"E\"],\n        [\"A\", \"A\", \"A\", \"A\", \"A\"],\n    ]\n    print(frequency_count(data))"
    },
    {
      "rank": 89,
      "score": 3.0,
      "candidate": "def find_freq(lst):\n    freq_dict = {}\n    for sublist in lst:\n        for item in sublist:\n            if item in freq_dict:\n                freq_dict[item] += 1\n            else:\n                freq_dict[item] = 1\n\n    return freq_dict\n\n\nif __name__ == '__main__':\n    print(find_freq([[1, 2, 2, 2, 3], [2, 4, 4, 4], [1, 2, 3, 4, 5]]))"
    },
    {
      "rank": 90,
      "score": 3.0,
      "candidate": "from collections import Counter\n\n\ndef count_items(lists: list) -> dict:\n    \"\"\"\n    Time Complexity: O(n*m)\n    Space Complexity: O(n*m)\n    \"\"\"\n\n    def counter(sub_lists: list):\n        cnt = Counter()\n        for item in sub_lists:\n            cnt[item] += 1\n        return cnt\n\n    cnt = Counter()\n    for lst in lists:\n        cnt += counter(lst)\n    return cnt\n\n\nif __name__ == \"__main__\":\n    assert count_items([[1, 2], [3, 4], [1, 2, 3]]) == {1: 2, 2: 2, 3: 2, 4: 1}"
    },
    {
      "rank": 91,
      "score": 3.0,
      "candidate": "def count_frequency(arr, n):\n    frequency = dict()\n    for i in range(n):\n        for j in range(len(arr[i])):\n            if arr[i][j] in frequency:\n                frequency[arr[i][j]] += 1\n            else:\n                frequency[arr[i][j]] = 1\n    return frequency\n\n\narr = [[1, 2, 3, 4, 5], [1, 2, 3, 4], [5, 6, 7, 8], [5, 6, 7, 8]]\nn = len(arr)\nprint(count_frequency(arr, n))"
    },
    {
      "rank": 92,
      "score": 3.0,
      "candidate": "def count_list(lists):\n    count = {}\n    for l in lists:\n        for i in l:\n            if i in count:\n                count[i] += 1\n            else:\n                count[i] = 1\n    return count\n\n\ndef test_function(test_case):\n    lists = test_case[0]\n    solution = test_case[1]\n    output = count_list(lists)\n    if output == solution:\n        print(\"Pass\")\n    else:\n        print(\"Fail\")\n\n\ntest_function([[[1, 2], [3], [4, 2]], {2: 3, 4: 1, 3: 1, 1: 2}])\ntest_function([[[1, 2, 3, 4], [4], [4, 3]], {4: 3, 3: 2, 1: 1, 2: 1}])"
    },
    {
      "rank": 93,
      "score": 3.0,
      "candidate": "from collections import Counter\n\ndef frequency_count(lists):\n    \"\"\"\n    :param lists: list of list of integers\n    :return: list of list of frequency count\n    \"\"\"\n    return [list(Counter(i).values()) for i in lists]\n\n\ndef test_function(test_case):\n    lists = test_case[0]\n    solution = test_case[1]\n    output = frequency_count(lists)\n    if solution == output:\n        print(\"Pass\")\n    else:\n        print(\"Fail\")\n\nlists = [[1, 2, 2, 3], [2, 3, 5, 4, 2, 1, 1, 4, 3, 2]]\nsolution = [[2, 1, 2, 1], [5, 3, 2, 6, 2]]\ntest_case = [lists, solution]\ntest_function(test_case)\n\nlists = [[1, 1, 2, 3, 4, 3, 2, 1, 2, 3, 4, 5, 6, 7], [1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7]]\nsolution = [[7, 3, 2, 2, 2, 1, 1], [7, 4, 3, 2, 2, 1, 1]]\ntest_case = [lists, solution]\ntest_function(test_case)"
    },
    {
      "rank": 94,
      "score": 3.0,
      "candidate": "from collections import Counter\nfrom typing import List\n\n\ndef find_frequency_of_list_of_lists(list_of_lists: List[List[int]]) -> List[int]:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(n)\n    \"\"\"\n    flat_list = [item for sublist in list_of_lists for item in sublist]\n    return [value[1] for value in Counter(flat_list).most_common()]\n\n\nif __name__ == \"__main__\":\n    assert find_frequency_of_list_of_lists(\n        [[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5]]\n    ) == [6, 5, 4, 3]"
    },
    {
      "rank": 95,
      "score": 3.0,
      "candidate": "def frequency_count(lst):\n    \"\"\"\n    >>> frequency_count([[1, 2, 3], [4, 5], [1, 2, 3, 4, 5]])\n    [1, 1, 1, 2, 2]\n    >>> frequency_count([[1, 2, 3], [1, 2, 3, 4, 5], [1, 2, 3, 4, 5], [4, 5]])\n    [3, 2, 2, 1, 1]\n    >>> frequency_count([[1, 2, 3], [1, 2, 3, 4, 5], [1, 2, 3, 4, 5], [4, 5], [1, 2, 3]])\n    [4, 3, 3, 2, 2]\n    >>> frequency_count([[1, 2, 3], [1, 2, 3, 4, 5], [1, 2, 3, 4, 5], [4, 5], [1, 2, 3], [1, 2, 3], [4, 5]])\n    [5, 4, 4, 3, 3]\n    >>> frequency_count([[1, 2, 3], [1, 2, 3, 4, 5], [1, 2, 3, 4, 5], [4, 5], [1, 2, 3], [1, 2, 3], [4, 5], [1, 2, 3]])\n    [6, 5, 5, 4, 4]\n    \"\"\"\n    if len(lst) == 0:\n        return lst\n    if len(lst) == 1:\n        return [1] * len(lst[0])\n    freq = [1] * len(lst[0])\n    for i in range(1, len(lst)):\n        for j in range(len(lst[0])):\n            if lst[i][j] in lst[i - 1]:\n                fre"
    },
    {
      "rank": 96,
      "score": 3.0,
      "candidate": "def count_lists(lists):\n    \"\"\"\n    Returns frequency count of list of lists\n\n    Args:\n       lists(list): list of lists\n    Returns:\n       dict: frequency count of list of lists\n    \"\"\"\n    freq = {}\n    for elem in lists:\n        if elem in freq:\n            freq[elem] += 1\n        else:\n            freq[elem] = 1\n    return freq\n\n\ndef test_function(test_case):\n    lists = test_case[0]\n    solution = test_case[1]\n    output = count_lists(lists)\n    if output == solution:\n        print(\"Pass\")\n    else:\n        print(\"Fail\")\n\n\ntest_function([[[1, 2], [3], [3]], {1: 1, 2: 1, 3: 2}])\ntest_function([[[1, 2], [3], [3], [1, 2]], {1: 2, 2: 2, 3: 1}])\ntest_function([[[1, 2], [3], [3], [1, 2], [1, 2]], {1: 3, 2: 1, 3: 1}])"
    },
    {
      "rank": 97,
      "score": 3.0,
      "candidate": "from collections import Counter\nfrom typing import List\n\n\ndef freq_list(lists: List[List[int]]) -> Counter:\n    \"\"\"Returns frequency count of list of lists.\n\n    Args:\n        lists: list of lists\n\n    Examples:\n        >>> assert freq_list([[1, 2, 3], [1, 2, 3], [4, 5, 6]]) == Counter({(1, 2, 3): 2, (4, 5, 6): 1})\n    \"\"\"\n    return Counter([tuple(lst) for lst in lists])\n\n\nif __name__ == \"__main__\":\n    print(freq_list([[1, 2, 3], [1, 2, 3], [4, 5, 6]]))"
    },
    {
      "rank": 98,
      "score": 3.0,
      "candidate": "from collections import defaultdict\n\ndef freq_count(lists):\n    \"\"\"\n    :param lists: list of lists\n    :return: dict with keys as elements and values as frequency\n    \"\"\"\n    d = defaultdict(int)\n    for lst in lists:\n        for el in lst:\n            d[el] += 1\n    return d\n\nif __name__ == \"__main__\":\n    print freq_count([[1, 2, 3], [2, 3, 4], [3, 4, 5], [4, 5, 6]])"
    },
    {
      "rank": 99,
      "score": 3.0,
      "candidate": "from collections import Counter\n\n\ndef find_frequency(lists):\n    \"\"\"\n    Find frequency count of list of lists.\n    :param lists: list of lists.\n    :return: dict.\n    \"\"\"\n    return Counter(tuple(x) for x in lists)"
    },
    {
      "rank": 100,
      "score": 3.0,
      "candidate": "from collections import defaultdict\n\n\ndef frequency_count(lists: list) -> dict:\n    \"\"\"\n    Returns a dictionary with frequency count of lists.\n    \"\"\"\n    counts = defaultdict(int)\n\n    for list_item in lists:\n        counts[list_item] += 1\n\n    return counts\n\n\nif __name__ == \"__main__\":\n    assert frequency_count([1, 2, 3, 4, 5, 1, 2, 3, 4, 5]) == {\n        1: 2,\n        2: 2,\n        3: 2,\n        4: 2,\n        5: 2,\n    }"
    }
  ]
}