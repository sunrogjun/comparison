{
  "timestamp": "2025-09-15T00:47:19.499510",
  "method": "improved_llm_judge",
  "judge_model": "codellama/CodeLlama-7b-Python-hf",
  "target_model": "codellama-7b",
  "dataset": "mbpp",
  "problem_number": 329,
  "total_candidates": 100,
  "results": [
    {
      "rank": 1,
      "score": 10.0,
      "candidate": "def sum_of_three_smallest_nums(numbers):\n    \"\"\"\n    >>> sum_of_three_smallest_nums([6, 8, 3, 1, 9, 5, 2])\n    16\n    >>> sum_of_three_smallest_nums([-6, -8, -3, -1, -9, -5, -2])\n    0\n    >>> sum_of_three_smallest_nums([-6, -8, -3, -1, -9, -5, -2, 100, 120, 900])\n    100\n    >>> sum_of_three_smallest_nums([-6, -8, -3, -1, -9, -5, -2, 100, 120, 900, 0])\n    100\n    \"\"\"\n    return sum(sorted(numbers)[0:3])\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 2,
      "score": 10.0,
      "candidate": "def sum_three_smallest_numbers(numbers):\n    # Check if numbers is an empty list\n    if len(numbers) == 0:\n        return 0\n\n    # Sort the list in ascending order\n    numbers.sort()\n\n    # Get the first three numbers\n    return sum(numbers[:3])\n\n\ndef main():\n    numbers = [1, 8, -1, 7, 2, 4, 3, 9, 5, 6]\n    result = sum_three_smallest_numbers(numbers)\n    print(result)\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 3,
      "score": 10.0,
      "candidate": "def findSum(numbers):\n    numbers.sort()\n    return sum(numbers[:3])\n\n\nprint(findSum([4, 8, 12, 16, 20, 24, 28, 32, 36, 40, 44, 48, 52, 56, 60, 64, 68, 72, 76, 80, 84, 88, 92, 96, 100]))"
    },
    {
      "rank": 4,
      "score": 10.0,
      "candidate": "def sum_lowest_three(l: list) -> int:\n    \"\"\"\n    >>> sum_lowest_three([1, 2, 3, 4, 5])\n    6\n    >>> sum_lowest_three([-1, -2, -3, -4, -5])\n    0\n    \"\"\"\n    l.sort()\n    return sum(l[:3])\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 5,
      "score": 10.0,
      "candidate": "def sum_of_lowest_three(numbers):\n    \"\"\"\n    >>> sum_of_lowest_three([1, 2, 3, 4, 5])\n    6\n    >>> sum_of_lowest_three([1, 2, 3, 0, 4, 5])\n    6\n    >>> sum_of_lowest_three([1, 2, 0, 0, 4, 5])\n    3\n    >>> sum_of_lowest_three([1, 2, 3, 4, 5, 6])\n    6\n    >>> sum_of_lowest_three([1, 2, 3, 4, 5, 0])\n    6\n    \"\"\"\n    num_list = sorted(numbers)\n    return sum(num_list[:3])\n\n\ndef sum_of_lowest_three_v2(numbers):\n    \"\"\"\n    >>> sum_of_lowest_three_v2([1, 2, 3, 4, 5])\n    6\n    >>> sum_of_lowest_three_v2([1, 2, 3, 0, 4, 5])\n    6\n    >>> sum_of_lowest_three_v2([1, 2, 0, 0, 4, 5])\n    3\n    >>> sum_of_lowest_three_v2([1, 2, 3, 4, 5, 6])\n    6\n    >>> sum_of_lowest_three_v2([1, 2, 3, 4, 5, 0])\n    6\n    \"\"\"\n    return sum(sorted(numbers)[:3])\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 6,
      "score": 10.0,
      "candidate": "def sum_three_lowest_numbers(numbers):\n    \"\"\"\n    >>> sum_three_lowest_numbers([5, 2, 3, 1, 6, 8])\n    12\n    \"\"\"\n    return sum(sorted(filter(lambda x: x > 0, numbers))[:3])\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 7,
      "score": 10.0,
      "candidate": "def sum_three_smallest_numbers(lst):\n    lst = sorted(lst)\n    return sum(lst[:3])\n\n\nprint(sum_three_smallest_numbers([5, 8, -6, 7, 12, -1, -4, 2, 4]))"
    },
    {
      "rank": 8,
      "score": 10.0,
      "candidate": "def sum_of_three_lowest_positive_numbers(numbers):\n    numbers.sort()\n    return sum(numbers[:3])\n\n\nprint(sum_of_three_lowest_positive_numbers([2, 7, 5, -1, 8]))"
    },
    {
      "rank": 9,
      "score": 10.0,
      "candidate": "def find_sum(nums):\n    nums.sort()\n    if len(nums) == 1:\n        return nums[0]\n    elif len(nums) == 2:\n        return nums[0] + nums[1]\n    elif len(nums) == 3:\n        return nums[0] + nums[1] + nums[2]\n    else:\n        return nums[0] + nums[1] + nums[2]\n\n\nprint(find_sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))"
    },
    {
      "rank": 10,
      "score": 10.0,
      "candidate": "def sum_of_three_smallest_numbers(lst):\n    return sum(sorted(lst)[:3])\n\n\nprint(sum_of_three_smallest_numbers([-3, -2, -1, 0, 1, 2, 3]))"
    },
    {
      "rank": 11,
      "score": 10.0,
      "candidate": "def sum_of_three_smallest_numbers(numbers):\n    \"\"\"Returns the sum of the three smallest numbers from a given list of numbers.\n\n    >>> sum_of_three_smallest_numbers([1,2,3,4,5])\n    6\n    >>> sum_of_three_smallest_numbers([5,3,5,2,3])\n    8\n    \"\"\"\n    return sum(sorted(filter(lambda x: x > 0, numbers))[:3])\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 12,
      "score": 10.0,
      "candidate": "def sum_of_three_smallest_numbers(lst):\n    \"\"\"\n    >>> sum_of_three_smallest_numbers([1, 2, 3, 4, 5])\n    6\n    >>> sum_of_three_smallest_numbers([-1, -2, -3, -4, -5])\n    0\n    \"\"\"\n    lst = [i for i in lst if i > 0]\n    lst.sort()\n    return sum(lst[:3])\n\n\ndef sum_of_three_smallest_numbers_efficient(lst):\n    \"\"\"\n    >>> sum_of_three_smallest_numbers_efficient([1, 2, 3, 4, 5])\n    6\n    >>> sum_of_three_smallest_numbers_efficient([-1, -2, -3, -4, -5])\n    0\n    \"\"\"\n    lst = [i for i in lst if i > 0]\n    return sum(lst[:3])\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 13,
      "score": 10.0,
      "candidate": "def sum_of_three_smallest_numbers(numbers):\n    \"\"\"\n    >>> sum_of_three_smallest_numbers([4, 8, 0, 16, -2, 14, 28])\n    18\n    \"\"\"\n    return sum(sorted(numbers)[:3])\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 14,
      "score": 10.0,
      "candidate": "def sum_lowest_three(numbers):\n    if len(numbers) < 3:\n        return None\n    numbers.sort()\n    return sum(numbers[:3])\n\n\nprint(sum_lowest_three([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))"
    },
    {
      "rank": 15,
      "score": 10.0,
      "candidate": "def sum_three_smallest_numbers(numbers):\n    \"\"\"\n    Return the sum of the three lowest positive numbers from a given list of numbers.\n\n    >>> sum_three_smallest_numbers([4, 1, 5, -2, 7])\n    8\n    >>> sum_three_smallest_numbers([100, 1, 1, 1, 1])\n    2\n    >>> sum_three_smallest_numbers([100, 1, 1, 1, 1, -1, -89])\n    2\n    >>> sum_three_smallest_numbers([4, 1, 5, -2, 7, -12, 15])\n    10\n    >>> sum_three_smallest_numbers([4, 1, 5, -2, 7, -12, 15, -23, -2])\n    10\n    \"\"\"\n    nums = sorted(numbers)\n    return sum(nums[1:4])\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 16,
      "score": 10.0,
      "candidate": "def sum_of_three_lowest_numbers(nums):\n    \"\"\"\n    >>> sum_of_three_lowest_numbers([1, 2, 3, 4, 5])\n    6\n    \"\"\"\n    nums.sort()\n    return sum(nums[:3])\n\n\ndef sum_of_three_lowest_numbers_v2(nums):\n    \"\"\"\n    >>> sum_of_three_lowest_numbers_v2([1, 2, 3, 4, 5])\n    6\n    \"\"\"\n    nums.sort()\n    return sum(nums[:3])\n\n\ndef sum_of_three_lowest_numbers_v3(nums):\n    \"\"\"\n    >>> sum_of_three_lowest_numbers_v3([1, 2, 3, 4, 5])\n    6\n    \"\"\"\n    return sum(sorted(nums)[:3])\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 17,
      "score": 10.0,
      "candidate": "def sum_of_three_smallest_nums(lst):\n    \"\"\"\n    >>> sum_of_three_smallest_nums([-3, 5, 6, -1, 7, -8, 10])\n    10\n    \"\"\"\n    lst = sorted(lst)\n    return sum(lst[:3])\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 18,
      "score": 10.0,
      "candidate": "def find_sum_lowest_positive_numbers(numbers):\n    \"\"\"\n    Takes a list of numbers as an argument and returns the sum of the three smallest positive numbers from the list.\n\n    Args:\n       numbers(list): numbers to process\n    Returns:\n       int: the sum of the three smallest positive numbers from the list\n    \"\"\"\n    # TODO: Write your solution here\n    if len(numbers) == 0:\n        return 0\n    elif len(numbers) == 1:\n        return numbers[0]\n    elif len(numbers) == 2:\n        return numbers[0] + numbers[1]\n    elif len(numbers) == 3:\n        return numbers[0] + numbers[1] + numbers[2]\n    else:\n        num_1 = float('inf')\n        num_2 = float('inf')\n        num_3 = float('inf')\n        for i in numbers:\n            if i > 0 and i < num_1:\n                num_3 = num_2\n                num_2 = num_1\n                num_1 = i\n            elif i > 0 and i < num_2:\n                num_3 = num_2\n                num_2 = i\n            elif i > 0 and i < num_3:\n                num_3 = i\n        return num_1 + num_2 + num_3\n\n\ndef main():\n    print(find_sum_lowest_positive_numbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, -1]))\n    print(find_sum_lowest_positive_numbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\n    print(find_sum_lowest_positive_numbers([1, 2, 3, 4, 5, 6, 7, 8, 9]))\n    print(find_sum_lowest_positive_numbers([1, 2, 3, 4, 5, 6, 7, 8]))\n    print(find_sum_lowest"
    },
    {
      "rank": 19,
      "score": 10.0,
      "candidate": "def sum_lowest_numbers(lst):\n    return sum(sorted(lst, reverse=True)[:3])\n\n\nprint(sum_lowest_numbers([4, 1, 7, 8, 3, 5]))\nprint(sum_lowest_numbers([-1, -2, -3, -4, -5]))\nprint(sum_lowest_numbers([]))"
    },
    {
      "rank": 20,
      "score": 10.0,
      "candidate": "def sum_of_three_smallest_numbers(numbers):\n    numbers.sort()\n    return sum(numbers[:3])\n\n\nprint(sum_of_three_smallest_numbers([-1, 2, 0, 9, 8, 4]))"
    },
    {
      "rank": 21,
      "score": 9.370583536698913,
      "candidate": "def sum_three_lowest_numbers(numbers):\n    # write code here\n    numbers.sort()\n    return sum(numbers[:3])\n\nprint(sum_three_lowest_numbers([1, 2, 3, 4, 5]))"
    },
    {
      "rank": 22,
      "score": 9.234050852198141,
      "candidate": "def sum_lowest_three_nums(numbers):\n    \"\"\"\n    :param numbers: list - list of numbers\n    :return: int - sum of the three lowest positive numbers\n    \"\"\"\n    # Sort the list in ascending order\n    sorted_numbers = sorted(numbers)\n\n    # Find the index of the first positive number\n    i = 0\n    while sorted_numbers[i] <= 0:\n        i += 1\n\n    # Return the sum of the first three numbers\n    return sorted_numbers[i] + sorted_numbers[i + 1] + sorted_numbers[i + 2]\n\n\nprint(sum_lowest_three_nums([2, 8, 4, 6, 10, 4, 5]))\nprint(sum_lowest_three_nums([2, 8, 4, 6, 10, 4, -5]))\nprint(sum_lowest_three_nums([-2, 8, 4, 6, 10, 4, -5]))\nprint(sum_lowest_three_nums([-2, 8, -4, 6, 10, 4, -5]))\nprint(sum_lowest_three_nums([-2, -8, -4, 6, 10, 4, -5]))\nprint(sum_lowest_three_nums([-2, -8, -4, -6, 10, 4, -5]))\nprint(sum_lowest_three_nums([-2, -8, -4, -6, -10, 4, -5]))\nprint(sum_lowest_three_nums([-2, -8, -4, -6, -10, -4, -5]))\nprint(sum_lowest_three_nums([-2, -8, -4, -6, -10, -4, -5]))\nprint(sum_lowest_three_nums([0, 0, 0, 0]))"
    },
    {
      "rank": 23,
      "score": 9.205959372648458,
      "candidate": "def sum_of_three_lowest_numbers(numbers):\n    numbers.sort()\n    return sum(numbers[:3])\n\n\nprint(sum_of_three_lowest_numbers([1, 2, 3, 4, 5]))\nprint(sum_of_three_lowest_numbers([1, -2, 3, 4, 5]))\nprint(sum_of_three_lowest_numbers([-1, -2, -3, -4, -5]))\nprint(sum_of_three_lowest_numbers([1, 2, 3, 4, 5, 6, 7, 8]))\nprint(sum_of_three_lowest_numbers([]))"
    },
    {
      "rank": 24,
      "score": 9.177268828905222,
      "candidate": "def sum_of_three(numbers):\n    numbers.sort()\n    return sum(numbers[:3])\n\n\nprint(sum_of_three([1,2,3,4,5]))"
    },
    {
      "rank": 25,
      "score": 8.973005557553902,
      "candidate": "def sum_three_lowest_nums(nums):\n    nums.sort()\n    return sum(nums[:3])\n\n\nprint(sum_three_lowest_nums([1, 2, 3, 4, 5]))\nprint(sum_three_lowest_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, -1, -2, -3, -4, -5]))"
    },
    {
      "rank": 26,
      "score": 8.95994420569242,
      "candidate": "def sum_of_three_lowest_nums(input_list):\n    input_list.sort()\n    return sum(input_list[:3])\n\n\nif __name__ == '__main__':\n    print(sum_of_three_lowest_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))"
    },
    {
      "rank": 27,
      "score": 8.932217008005624,
      "candidate": "def sum_of_three_smallest_numbers(lst):\n    # Sort the list in ascending order\n    lst.sort()\n    # Take the first three elements\n    return sum(lst[:3])"
    },
    {
      "rank": 28,
      "score": 8.910084504002544,
      "candidate": "def sum_three_smallest_num(nums):\n    \"\"\"\n    >>> sum_three_smallest_num([1, 2, 3, 4, 5])\n    6\n    >>> sum_three_smallest_num([1, 2, 3, 0, 4, 5])\n    6\n    >>> sum_three_smallest_num([-1, -2, -3, -4, -5])\n    0\n    \"\"\"\n    return sum(sorted(nums)[0:3])\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 29,
      "score": 8.85571690049604,
      "candidate": "def sum_three_smallest_numbers(numbers):\n    return sum(sorted(numbers, reverse=True)[:3])\n\n\nprint(sum_three_smallest_numbers([5, 2, 7, 1, 8, 3, 6, 4]))"
    },
    {
      "rank": 30,
      "score": 8.8281618090209,
      "candidate": "def sum_three_smallest_numbers(lst):\n    lst.sort()\n    return sum(lst[:3])\n\n\nprint(sum_three_smallest_numbers([7, 2, 4, 1, 0, -2]))"
    },
    {
      "rank": 31,
      "score": 8.81367773444215,
      "candidate": "def sum_of_three_smallest_numbers(numbers):\n    return sum(sorted(numbers, reverse=True)[:3])\n\n\nprint(sum_of_three_smallest_numbers([7, 2, 4, 1, 8, 5]))\nprint(sum_of_three_smallest_numbers([7, -1, 2, 4, 1, 8, 5]))\nprint(sum_of_three_smallest_numbers([7, -1, 2, 4, 1, 8, -5]))\nprint(sum_of_three_smallest_numbers([7, -1, 2, 4, 1, 8, -5, -9]))"
    },
    {
      "rank": 32,
      "score": 8.76828871349479,
      "candidate": "def sum_three_lowest(lst):\n    lst.sort()\n    return sum(lst[:3])"
    },
    {
      "rank": 33,
      "score": 8.750282588864879,
      "candidate": "def sum_of_three_lowest_numbers(lst):\n    return sum(sorted(lst)[0:3])\n\n\nprint(sum_of_three_lowest_numbers([7, 5, 9, 4, 6, 2]))"
    },
    {
      "rank": 34,
      "score": 8.715724466237427,
      "candidate": "def sum_of_three_smallest_numbers(numbers):\n    return sum(sorted(numbers)[:3])\n\n\nprint(sum_of_three_smallest_numbers([5, 2, 7, 1, 4]))\nprint(sum_of_three_smallest_numbers([2, 2, 2, 2, 2]))\nprint(sum_of_three_smallest_numbers([-5, -2, -7, -1, -4]))\nprint(sum_of_three_smallest_numbers([]))\nprint(sum_of_three_smallest_numbers([0, 1, 2, 3]))\nprint(sum_of_three_smallest_numbers([-2, -2, -2, -2, -2]))"
    },
    {
      "rank": 35,
      "score": 8.692801520950061,
      "candidate": "def sum_lowest_three(lst):\n    return sum([x for x in sorted(lst)[:3] if x > 0])"
    },
    {
      "rank": 36,
      "score": 8.632293453617281,
      "candidate": "def sum_of_three(numbers):\n    numbers.sort()\n    return sum(numbers[:3])\n\nprint(sum_of_three([4, 8, 9, 5, 7]))\nprint(sum_of_three([-4, 8, 9, 5, 7]))\nprint(sum_of_three([-4, -8, -9, 5, 7]))\nprint(sum_of_three([-4, -8, -9, -5, 7]))"
    },
    {
      "rank": 37,
      "score": 8.616253589228675,
      "candidate": "def sum_of_three_lowest_numbers(list_of_numbers):\n    if len(list_of_numbers) < 3:\n        return None\n    sorted_list = sorted(list_of_numbers)\n    return sorted_list[0] + sorted_list[1] + sorted_list[2]"
    },
    {
      "rank": 38,
      "score": 8.610076160146226,
      "candidate": "def sum_lowest_three(lst):\n    return sum(sorted(lst)[:3])\n\n\nprint(sum_lowest_three([10, 12, 14, 13, 16, 19, 11, 15, 18, 17]))"
    },
    {
      "rank": 39,
      "score": 8.606486429141842,
      "candidate": "def three_lowest_sum(lst):\n    lst.sort()\n    return sum(lst[:3])"
    },
    {
      "rank": 40,
      "score": 8.60156811074208,
      "candidate": "def find_sum_of_lowest_three(list_of_numbers):\n    \"\"\"\n    This function takes a list of numbers as an input and returns the sum of the three lowest positive numbers\n    :param list_of_numbers: list\n    :return: int\n    \"\"\"\n    sorted_list = sorted(list_of_numbers)\n    return sum(sorted_list[:3])\n\n\nprint(find_sum_of_lowest_three([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, -11, 12]))"
    },
    {
      "rank": 41,
      "score": 8.565425580227462,
      "candidate": "def sum_of_three_smallest_numbers(lst):\n    return sum(sorted(lst, reverse=True)[0:3])"
    },
    {
      "rank": 42,
      "score": 8.548876241946822,
      "candidate": "def sum_of_three_lowest_numbers(numbers):\n    \"\"\"\n    >>> sum_of_three_lowest_numbers([1, 2, 3, 4, 5])\n    6\n    >>> sum_of_three_lowest_numbers([-1, -2, -3, -4, -5])\n    0\n    >>> sum_of_three_lowest_numbers([])\n    Traceback (most recent call last):\n        ...\n    ValueError: list is empty\n    \"\"\"\n    if len(numbers) == 0:\n        raise ValueError(\"list is empty\")\n\n    numbers.sort()\n    return sum(numbers[:3])\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 43,
      "score": 8.542875062379007,
      "candidate": "def sum_lowest_three_numbers(numbers):\n    numbers.sort()\n    return sum(numbers[:3])"
    },
    {
      "rank": 44,
      "score": 8.53012858503943,
      "candidate": "def sum_lowest_three(numbers):\n    numbers = sorted(numbers)\n    return sum(numbers[:3])"
    },
    {
      "rank": 45,
      "score": 8.499905739299377,
      "candidate": "def sum_three_smallest_numbers(numbers):\n    return sum(sorted(numbers)[:3])\n\nprint(sum_three_smallest_numbers([7, 2, 4, 9, 1]))\nprint(sum_three_smallest_numbers([7, 5, 2, 12, 9, 10, 1]))\nprint(sum_three_smallest_numbers([7, 2, 4, 9, 1, 0, -1]))"
    },
    {
      "rank": 46,
      "score": 8.478208546788407,
      "candidate": "def sum_of_three_smallest_numbers(lst):\n    \"\"\"\n    Return sum of three smallest numbers from a given list of numbers.\n\n    >>> sum_of_three_smallest_numbers([3, 4, 1, 5, 8])\n    12\n    \"\"\"\n    return sum(sorted(lst)[:3])\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 47,
      "score": 8.437695832075478,
      "candidate": "def sum_of_three_smallest_nums(num_list):\n    \"\"\"\n    >>> sum_of_three_smallest_nums([78, 56, 12, 19, 31, 40])\n    88\n    \"\"\"\n    if len(num_list) < 3:\n        return sum(num_list)\n    return sum(sorted(num_list)[:3])\n\ndef sum_of_three_smallest_nums2(num_list):\n    \"\"\"\n    >>> sum_of_three_smallest_nums2([78, 56, 12, 19, 31, 40])\n    88\n    \"\"\"\n    if len(num_list) < 3:\n        return sum(num_list)\n    num_list.sort()\n    return sum(num_list[:3])\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 48,
      "score": 8.386620303250325,
      "candidate": "def sum_three_smallest_numbers(numbers):\n    numbers.sort()\n    return sum(numbers[:3])\n\n\nprint(sum_three_smallest_numbers([5, 10, 15, 20, 25]))\nprint(sum_three_smallest_numbers([7, 14, 21, 15]))\nprint(sum_three_smallest_numbers([2, 24, 23, 22, 21, 1]))\nprint(sum_three_smallest_numbers([42, 24, 23, 22, 21, 1]))\nprint(sum_three_smallest_numbers([0, -1, 22, 23, 21, 1]))"
    },
    {
      "rank": 49,
      "score": 8.375312293858853,
      "candidate": "# solution 1\ndef sum_of_three_smallest_numbers(input_list):\n    sorted_list = sorted(input_list)\n    return sorted_list[0] + sorted_list[1] + sorted_list[2]\n\n\n# solution 2\ndef sum_of_three_smallest_numbers_v2(input_list):\n    return sum(sorted(input_list)[:3])\n\n\n# solution 3\ndef sum_of_three_smallest_numbers_v3(input_list):\n    three_smallest_numbers = sorted(input_list)[:3]\n    return sum(three_smallest_numbers)\n\n\nprint(sum_of_three_smallest_numbers([10, 4, 5, 6, 3]))\nprint(sum_of_three_smallest_numbers_v2([10, 4, 5, 6, 3]))\nprint(sum_of_three_smallest_numbers_v3([10, 4, 5, 6, 3]))"
    },
    {
      "rank": 50,
      "score": 8.351614956112536,
      "candidate": "def find_sum(l):\n    if l == []:\n        return 0\n    else:\n        return l[0] + find_sum(l[1:])\n\n\ndef three_lowest_sum(numbers):\n    numbers.sort()\n    return find_sum(numbers[0:3])\n\n\nprint(three_lowest_sum([-3, -2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))"
    },
    {
      "rank": 51,
      "score": 8.331556294201176,
      "candidate": "def sum_of_three_smallest_numbers(numbers):\n    return sum(sorted(filter(lambda x: x > 0, numbers))[:3])"
    },
    {
      "rank": 52,
      "score": 8.327375965969855,
      "candidate": "def sum_lowest_three(lst):\n    lst.sort()\n    return sum(lst[:3])\n\n\nprint(sum_lowest_three([1, 2, 3, 4, 5]))"
    },
    {
      "rank": 53,
      "score": 8.327367757082776,
      "candidate": "def sum_of_three_lowest_positive_numbers(numbers):\n    numbers.sort()\n    if numbers[0] <= 0:\n        return sum(numbers[1:4])\n    return sum(numbers[:4])"
    },
    {
      "rank": 54,
      "score": 8.298597569547805,
      "candidate": "def sum_of_lowest(l):\n    l.sort()\n    l = l[3:]\n    return sum(l)"
    },
    {
      "rank": 55,
      "score": 8.2938925966498,
      "candidate": "def find_sum(input):\n    list_sorted = sorted(input)\n    sum = 0\n    for i in range(3):\n        if list_sorted[i] > 0:\n            sum += list_sorted[i]\n    return sum\n\n\nprint(find_sum([10, 20, 30, 40, 50, 60, 70, 80, 90, 100]))"
    },
    {
      "rank": 56,
      "score": 8.289838256518838,
      "candidate": "def three_lowest_sum(numbers):\n    numbers.sort()\n    return sum(numbers[:3])"
    },
    {
      "rank": 57,
      "score": 8.251903304236286,
      "candidate": "def lowest_three(numbers):\n    numbers.sort()\n    return sum(numbers[:3])"
    },
    {
      "rank": 58,
      "score": 8.214125058964552,
      "candidate": "def sum_lowest_three_numbers(numbers):\n    \"\"\"\n    >>> sum_lowest_three_numbers([-1, -2, 3, 4, 5, 6])\n    9\n    \"\"\"\n    numbers = sorted(numbers)\n    return sum(numbers[:3])\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 59,
      "score": 8.212735598038213,
      "candidate": "def sum_lowest_three_numbers(lst):\n    lst = sorted(lst)\n    lst = lst[:3]\n    return sum(lst)\n\nlst = [10, 11, 12, 13, 1, 2, 3, 4, 5, 6, 7, 8, 9]\nprint(sum_lowest_three_numbers(lst))"
    },
    {
      "rank": 60,
      "score": 8.211579567659316,
      "candidate": "def sum_of_three_lowest_numbers(number_list):\n    number_list.sort()\n    sum_of_three = 0\n    for i in range(3):\n        sum_of_three += number_list[i]\n    return sum_of_three\n\nprint(sum_of_three_lowest_numbers([1,2,3,4,5,6,7,8,9]))\nprint(sum_of_three_lowest_numbers([1,2,3,4,5,6,7,8,9,10]))\nprint(sum_of_three_lowest_numbers([1,2,3,4,5,6,7,8,9,10,11]))"
    },
    {
      "rank": 61,
      "score": 8.209707251476969,
      "candidate": "def sum_three_lowest_numbers(numbers):\n    numbers.sort()\n    return sum(numbers[0:3])\n\nprint(sum_three_lowest_numbers([2, 8, 4, 1, 7, 6, 5, 3]))\nprint(sum_three_lowest_numbers([-2, -8, -4, -1, -7, -6, -5, -3]))"
    },
    {
      "rank": 62,
      "score": 8.2048573255218,
      "candidate": "def find_sum_of_three_smallest_numbers(numbers):\n    numbers.sort()\n    return sum(numbers[:3])\n\nprint(find_sum_of_three_smallest_numbers([5,-1,2,3,6,-4]))\nprint(find_sum_of_three_smallest_numbers([-5,-1,-2,-3,-6,-4]))\nprint(find_sum_of_three_smallest_numbers([-5,5,2,-3,6,-4]))\nprint(find_sum_of_three_smallest_numbers([0,5,2,3,6,4]))\nprint(find_sum_of_three_smallest_numbers([1,2,3,4,5]))\nprint(find_sum_of_three_smallest_numbers([-1,-2,-3,-4,-5]))\nprint(find_sum_of_three_smallest_numbers([-1,2,-3,-4,-5]))\nprint(find_sum_of_three_smallest_numbers([-1,2,-3,4,-5]))\nprint(find_sum_of_three_smallest_numbers([-1,2,-3,4,5]))"
    },
    {
      "rank": 63,
      "score": 8.172253082181854,
      "candidate": "def sum_lowest_three(list_of_num):\n    \"\"\"\n    >>> sum_lowest_three([1, 2, 3, 4, 5])\n    6\n    \"\"\"\n    sorted_list = sorted(list_of_num)\n    if len(sorted_list) >= 3:\n        return sum(sorted_list[:3])\n    else:\n        return sum(sorted_list)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 64,
      "score": 8.163300679823958,
      "candidate": "def sum_of_three_smallest_num(nums):\n    \"\"\"\n    Finds the sum of the three lowest positive numbers from a given list of numbers.\n\n    Args:\n       nums(list): List of numbers to find the sum.\n    Returns:\n       int: Sum of the three lowest positive numbers or -1 if the list is empty.\n    \"\"\"\n    if not nums:\n        return -1\n\n    smallest = []\n    for num in nums:\n        if num > 0:\n            smallest.append(num)\n\n    smallest.sort()\n\n    return sum(smallest[:3])\n\n\nprint(sum_of_three_smallest_num([-5, -4, -3, -2, 0, 1, 2, 3, 4]))\nprint(sum_of_three_smallest_num([5, 4, 3, 2, 1]))\nprint(sum_of_three_smallest_num([]))"
    },
    {
      "rank": 65,
      "score": 8.144125099485041,
      "candidate": "def sum_of_three_smallest_numbers(numbers):\n    \"\"\"\n    This function takes in a list of numbers and returns the sum of the three lowest positive numbers\n    :param numbers: list of numbers\n    :return: sum of three lowest positive numbers\n    \"\"\"\n\n    if len(numbers) < 3:\n        raise ValueError(\"The list must have at least 3 numbers\")\n\n    for number in numbers:\n        if number <= 0:\n            raise ValueError(\"The numbers must be positive\")\n\n    numbers.sort()\n    return sum(numbers[:3])\n\n\nif __name__ == '__main__':\n    print(sum_of_three_smallest_numbers([5, 6, 2, 1, -1, 8, 10]))"
    },
    {
      "rank": 66,
      "score": 8.143591138329747,
      "candidate": "# Solution\n\ndef sum_three_lowest_numbers(numbers):\n    return sum(sorted(filter(lambda x: x > 0, numbers))[:3])\n\n\n# Tests\nprint(sum_three_lowest_numbers([7, 2, 4, 1]))\nprint(sum_three_lowest_numbers([7, 2, 1, 3, 5, 4]))\nprint(sum_three_lowest_numbers([7, -2, 4, 1]))"
    },
    {
      "rank": 67,
      "score": 8.105983444291466,
      "candidate": "def sum_three_smallest_nums(nums):\n    nums.sort()\n    return sum(nums[:3])\n\n\nprint(sum_three_smallest_nums([7, 2, 4, 9, 1]))\nprint(sum_three_smallest_nums([7, 2, 4, 9, 1, 0, 5]))"
    },
    {
      "rank": 68,
      "score": 8.08452234024709,
      "candidate": "# Solution\ndef sum_three_lowest_numbers(nums):\n    nums.sort()\n    return sum(nums[:3])\n\n\n# Tests\nprint(sum_three_lowest_numbers([4, 8, 12, 16, 25, 30, 34, 38, 42, 46, 50]))  # 42\nprint(sum_three_lowest_numbers([25, 30, 34, 38, 42, 46, 50]))  # 81\nprint(sum_three_lowest_numbers([1, 2, 3, 4, 5, 6, 7, 8, 9]))  # 12\nprint(sum_three_lowest_numbers([0, 0, 0, 0, 0, 0, 0, 0, 0, 0]))  # 0\nprint(sum_three_lowest_numbers([-4, -8, -12, -16, -25, -30, -34, -38, -42, -46, -50]))  # 0"
    },
    {
      "rank": 69,
      "score": 8.024835682833125,
      "candidate": "def sum_of_three(arr):\n    arr.sort()\n    return sum(arr[:3])\n\n\ndef main():\n    arr = [1, 2, 3, -1, 5, 6]\n    print(sum_of_three(arr))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 70,
      "score": 7.990432406683839,
      "candidate": "def sum_lowest_three(lst):\n    lst = [i for i in lst if i > 0]\n    lst.sort()\n    return sum(lst[:3])\n\nprint(sum_lowest_three([1, 2, 3, 4, 5]))\nprint(sum_lowest_three([-1, -2, -3, -4, -5]))\nprint(sum_lowest_three([1, 2, 3, 4, 5, 6]))\nprint(sum_lowest_three([1, 2, 3, 4, 5, 6, 7]))"
    },
    {
      "rank": 71,
      "score": 7.938028884277233,
      "candidate": "def sum_three_lowest_numbers(lst: list) -> int:\n    \"\"\"Return the sum of the three lowest positive numbers from a given list of numbers.\n\n    Args:\n        lst (list): list of numbers\n\n    Returns:\n        int: sum of the three lowest positive numbers\n    \"\"\"\n    return sum(sorted(filter(lambda x: x > 0, lst))[:3])\n\n\nif __name__ == \"__main__\":\n    print(sum_three_lowest_numbers([5, 3, 1, 2, 7]))"
    },
    {
      "rank": 72,
      "score": 7.915588979966494,
      "candidate": "def sum_of_three(lst):\n    return sum(sorted(lst, reverse=True)[:3])"
    },
    {
      "rank": 73,
      "score": 7.8912769574414305,
      "candidate": "def sum_of_three_smallest_nums(nums):\n    \"\"\"\n    Return the sum of the three smallest positive numbers from a given list of numbers.\n    \"\"\"\n    # If the list is empty, return 0\n    if not nums:\n        return 0\n    # Sort the list in ascending order\n    nums.sort()\n    # Return the sum of the three smallest numbers\n    return nums[0] + nums[1] + nums[2]"
    },
    {
      "rank": 74,
      "score": 7.868947655733293,
      "candidate": "def sum_of_three_lowest_nums(list_of_nums):\n    # find lowest num\n    lowest_num = min(list_of_nums)\n    # remove lowest num from list\n    list_of_nums.remove(lowest_num)\n    # find second lowest num\n    lowest_num2 = min(list_of_nums)\n    # remove lowest num from list\n    list_of_nums.remove(lowest_num2)\n    # find third lowest num\n    lowest_num3 = min(list_of_nums)\n    # find sum of three lowest nums\n    sum_lowest = lowest_num + lowest_num2 + lowest_num3\n    return sum_lowest\n\nprint(sum_of_three_lowest_nums([9, 1, 5, 2, 7, 4]))"
    },
    {
      "rank": 75,
      "score": 7.84634113240411,
      "candidate": "def sum_of_three_smallest_nums(lst):\n    return sum(sorted(lst)[:3])\n\nprint(sum_of_three_smallest_nums([1, 3, 5, 7, 9]))\nprint(sum_of_three_smallest_nums([3, 5, 7, 9, 11]))\nprint(sum_of_three_smallest_nums([11, 13, 15, 17, 19]))"
    },
    {
      "rank": 76,
      "score": 7.834022619458933,
      "candidate": "def sum_of_three_lowest_positive_numbers(input_list):\n    if len(input_list) < 3:\n        return None\n\n    lowest_nums = []\n\n    for i in input_list:\n        if i > 0:\n            lowest_nums.append(i)\n\n    lowest_nums.sort()\n\n    return lowest_nums[0] + lowest_nums[1] + lowest_nums[2]\n\nprint(sum_of_three_lowest_positive_numbers([5,2,3,7,0,1]))\nprint(sum_of_three_lowest_positive_numbers([1, 2, 3]))\nprint(sum_of_three_lowest_positive_numbers([-1, -2, -3, -4]))\nprint(sum_of_three_lowest_positive_numbers([]))"
    },
    {
      "rank": 77,
      "score": 7.780351419995229,
      "candidate": "def sum_of_three_smallest_numbers(numbers):\n    return sum(sorted(numbers, reverse=True)[:3])"
    },
    {
      "rank": 78,
      "score": 7.738292593776799,
      "candidate": "def findSum(lst):\n    if lst:\n        return sum(sorted(lst)[0:3])\n    return 0\n\nlst = [-3, -2, -1, 1, 2, 3]\nprint(findSum(lst))"
    },
    {
      "rank": 79,
      "score": 7.7320703513377165,
      "candidate": "def sum_of_three_smallest_numbers(numbers):\n    return sum(sorted(numbers, reverse=True)[:3])"
    },
    {
      "rank": 80,
      "score": 7.705183449260731,
      "candidate": "def sum_three_smallest_nums(lst):\n    \"\"\"\n    >>> sum_three_smallest_nums([-3, 5, 2, -1, 7, 6])\n    12\n    \"\"\"\n    return sum(sorted(lst)[0:3])\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 81,
      "score": 7.5819855281879285,
      "candidate": "def sum_three_lowest_numbers(numbers):\n    if len(numbers) == 0:\n        return 0\n    numbers.sort()\n    return sum(numbers[:3])\n\n\ndef main():\n    print(sum_three_lowest_numbers([10, 20, 30, 40, 50]))\n    print(sum_three_lowest_numbers([1, 2, 3, 4, 5]))\n    print(sum_three_lowest_numbers([5, 4, 3, 2, 1]))\n    print(sum_three_lowest_numbers([]))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 82,
      "score": 7.562924366763077,
      "candidate": "def sum_of_lowest_three(nums):\n    nums = [x for x in nums if x > 0]\n    nums.sort()\n    return sum(nums[:3])"
    },
    {
      "rank": 83,
      "score": 7.4878043221155455,
      "candidate": "def three_lowest_sum(numbers):\n    numbers.sort()\n    return sum(numbers[:3])\n\n\nprint(three_lowest_sum([1, 2, 3, 4, 5]))"
    },
    {
      "rank": 84,
      "score": 7.464609382504557,
      "candidate": "def sum_lowest_three(lst):\n    return sum([x for x in sorted(lst)[:3] if x > 0])\n\n\nprint(sum_lowest_three([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))"
    },
    {
      "rank": 85,
      "score": 3.0,
      "candidate": "def three_lowest_sum(numbers: list) -> int:\n    \"\"\"Return the sum of the three lowest positive numbers from a given list of numbers.\n\n    Examples:\n        >>> assert three_lowest_sum([1, 2, 3, 4, 5]) == 6\n        >>> assert three_lowest_sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 6\n        >>> assert three_lowest_sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]) == 6\n        >>> assert three_lowest_sum([-1, -2, -3, -4, -5]) == 0\n        >>> assert three_lowest_sum([0, 0, 0]) == 0\n        >>> assert three_lowest_sum([-1, 0, 1]) == 1\n\n    \"\"\"\n    if not numbers:\n        return 0\n\n    numbers_copy = numbers.copy()\n    numbers_copy.sort()\n    return sum(numbers_copy[:3])\n\n\nif __name__ == \"__main__\":\n    print(three_lowest_sum([1, 2, 3, 4, 5]))"
    },
    {
      "rank": 86,
      "score": 3.0,
      "candidate": "def sum_three_lowest_nums(input_list):\n    \"\"\"\n    >>> sum_three_lowest_nums([])\n    0\n    >>> sum_three_lowest_nums([4, 2, 3, 8, 9])\n    13\n    >>> sum_three_lowest_nums([-1, -2, -3, -4, -5])\n    0\n    >>> sum_three_lowest_nums([-4, -2, -3, -8, -9])\n    0\n    \"\"\"\n    return sum(sorted(input_list)[:3])\n\n\ndef sum_three_lowest_nums_alt(input_list):\n    \"\"\"\n    >>> sum_three_lowest_nums_alt([])\n    0\n    >>> sum_three_lowest_nums_alt([4, 2, 3, 8, 9])\n    13\n    >>> sum_three_lowest_nums_alt([-1, -2, -3, -4, -5])\n    0\n    >>> sum_three_lowest_nums_alt([-4, -2, -3, -8, -9])\n    0\n    \"\"\"\n    return sum(filter(lambda x: x > 0, sorted(input_list)[:3]))\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 87,
      "score": 3.0,
      "candidate": "# Solution\n\ndef sum_three_smallest_numbers(numbers):\n    \"\"\"\n    >>> sum_three_smallest_numbers([78, 56, 12, 19, 31, 44, 55, 6, 88, 101])\n    152\n    \"\"\"\n    return sum(sorted(numbers)[0:3])\n\n\n# Demo\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 88,
      "score": 3.0,
      "candidate": "def sum_of_three_smallest_numbers(input_list):\n    \"\"\"\n    Return the sum of the three smallest numbers from a given list of numbers.\n    \"\"\"\n    input_list = sorted(input_list)\n    return sum(input_list[:3])\n\n\ndef test_function(test_case):\n    test_input, test_expected = test_case\n    test_actual = sum_of_three_smallest_numbers(test_input)\n    if test_actual == test_expected:\n        print(\"Pass\")\n    else:\n        print(\"Fail\")\n\n\ntest_function(([20, 50, 10, 70, 30], 60))\ntest_function(([10, 30, 20, 60, 50], 80))\ntest_function(([20, 50, 10, 70, 30], 60))\ntest_function(([20, 50, 10, 70, 30], 60))\ntest_function(([20, 50, 10, 70, 30], 60))\ntest_function(([20, 50, 10, 70, 30], 60))\ntest_function(([20, 50, 10, 70, 30], 60))\ntest_function(([20, 50, 10, 70, 30], 60))\ntest_function(([20, 50, 10, 70, 30], 60))\ntest_function(([20, 50, 10, 70, 30], 60))\ntest_function(([20, 50, 10, 70, 30], 60))\ntest_function(([20, 50, 10, 70, 30], 60))\ntest_function(([20, 50, 10, 70, 30],"
    },
    {
      "rank": 89,
      "score": 3.0,
      "candidate": "def sum_three_lowest_numbers(lst):\n    # First, we need to find the three lowest numbers\n    # Then, we need to sum the three lowest numbers\n    # Finally, we need to return the sum of the three lowest numbers\n    #\n    # 1. We need to find the three lowest numbers\n    #\n    # 2. We need to sum the three lowest numbers\n    #\n    # 3. We need to return the sum of the three lowest numbers\n    pass\n\n\ndef test(obtained, expected):\n    print(\"Expected: \", expected)\n    print(\"Obtained: \", obtained)\n    if obtained == expected:\n        print(\"Works!\")\n    else:\n        print(\"Does not work!\")\n\n\nprint(\"sum_three_lowest_numbers([6, 2, 1, 8, 10])\")\ntest(sum_three_lowest_numbers([6, 2, 1, 8, 10]), 13)\n\nprint(\"sum_three_lowest_numbers([6, 8, 1, 4])\")\ntest(sum_three_lowest_numbers([6, 8, 1, 4]), 7)\n\nprint(\"sum_three_lowest_numbers([1, 1, 1])\")\ntest(sum_three_lowest_numbers([1, 1, 1]), 1)\n\nprint(\"sum_three_lowest_numbers([0, -1, -2])\")\ntest(sum_three_lowest_numbers([0, -1, -2]), 0)\n\nprint(\"sum_three_lowest_numbers([5])\")\ntest(sum_three_lowest_numbers([5]), 5)\n\nprint(\"sum_three_lowest_numbers([-5])\")\ntest(sum_three_lowest_numbers([-5]), 0)"
    },
    {
      "rank": 90,
      "score": 3.0,
      "candidate": "def sum_three_smallest_nums(nums):\n    \"\"\"\n    >>> sum_three_smallest_nums([1,2,-8,0,6])\n    5\n    >>> sum_three_smallest_nums([1,-2,3,0,6])\n    6\n    >>> sum_three_smallest_nums([1,-2,-3,0,6])\n    1\n    >>> sum_three_smallest_nums([-1,-2,-3,-0,-6])\n    0\n    \"\"\"\n    return sum(sorted(nums)[0:3])\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 91,
      "score": 3.0,
      "candidate": "# solution 1\ndef sum_lowest_three(nums):\n    nums = sorted(nums)\n    return sum(nums[:3])\n\n\n# solution 2\ndef sum_lowest_three(nums):\n    nums = sorted(nums)\n    return sum(nums[:3])\n\n\n# solution 3\ndef sum_lowest_three(nums):\n    nums = sorted(nums)\n    return sum(nums[:3])\n\n\n# solution 4\ndef sum_lowest_three(nums):\n    nums = sorted(nums)\n    return sum(nums[:3])\n\n\n# solution 5\ndef sum_lowest_three(nums):\n    nums = sorted(nums)\n    return sum(nums[:3])"
    },
    {
      "rank": 92,
      "score": 3.0,
      "candidate": "from typing import List\n\n\ndef sum_three_smallest_numbers(numbers: List[int]) -> int:\n    \"\"\"Returns the sum of the three lowest positive numbers from a given list of numbers.\n\n    Args:\n        numbers (List[int]): a list of numbers\n\n    Examples:\n        >>> assert sum_three_smallest_numbers([1, 2, 3, 4, 5]) == 6\n    \"\"\"\n    numbers.sort()\n    return sum(numbers[:3])\n\n\nif __name__ == \"__main__\":\n    print(sum_three_smallest_numbers([1, 2, 3, 4, 5]))"
    },
    {
      "rank": 93,
      "score": 3.0,
      "candidate": "def sum_of_three_smallest_numbers(numbers):\n    numbers.sort()\n    return sum(numbers[:3])\n\n\ndef test_function(test_case):\n    arr = test_case[0]\n    solution = test_case[1]\n    output = sum_of_three_smallest_numbers(arr)\n    \n    if output == solution:\n        print(\"Pass\")\n    else:\n        print(\"Fail\")\n\narr = [23, 45, 67, 34, 21, 45]\nsolution = 138\ntest_case = [arr, solution]\ntest_function(test_case)\n\narr = [1, 2, 3, 4]\nsolution = 8\ntest_case = [arr, solution]\ntest_function(test_case)\n\narr = [55, 4, 45, 4, 21, 6, 2, 5, 34, 34, 67, 45, 21, 67, 12, 12, 14, 27, 45, 21]\nsolution = 75\ntest_case = [arr, solution]\ntest_function(test_case)"
    },
    {
      "rank": 94,
      "score": 3.0,
      "candidate": "from typing import List\n\n\ndef sum_three_lowest_numbers(numbers: List[int]) -> int:\n    \"\"\"Returns the sum of the three lowest positive numbers from a given list of numbers.\n\n    Args:\n        numbers (List[int]): a list of numbers\n\n    Examples:\n        >>> assert sum_three_lowest_numbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 6\n    \"\"\"\n    return sum(sorted(filter(lambda x: x > 0, numbers))[:3])\n\n\nif __name__ == \"__main__\":\n    print(sum_three_lowest_numbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))"
    },
    {
      "rank": 95,
      "score": 3.0,
      "candidate": "from typing import List\n\n\ndef sum_of_three_lowest_numbers(numbers: List[int]) -> int:\n    \"\"\"\n    Finds the sum of three lowest positive numbers from a given list of numbers.\n    >>> sum_of_three_lowest_numbers([1,2,-8,0,6,-4])\n    -2\n    >>> sum_of_three_lowest_numbers([-8,-2,-1,-7,-3,-10,-10])\n    -21\n    >>> sum_of_three_lowest_numbers([0,-2,-1,0,-3,-10,-10])\n    -2\n    \"\"\"\n    sorted_list = sorted(numbers)\n    if len(sorted_list) < 3:\n        return -1\n    return sum(sorted_list[:3])\n\n\ndef sum_of_three_lowest_numbers_optimized(numbers: List[int]) -> int:\n    \"\"\"\n    Finds the sum of three lowest positive numbers from a given list of numbers.\n    >>> sum_of_three_lowest_numbers_optimized([1,2,-8,0,6,-4])\n    -2\n    >>> sum_of_three_lowest_numbers_optimized([-8,-2,-1,-7,-3,-10,-10])\n    -21\n    >>> sum_of_three_lowest_numbers_optimized([0,-2,-1,0,-3,-10,-10])\n    -2\n    \"\"\"\n    sorted_list = sorted(numbers)\n    return sum(sorted_list[:3])\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 96,
      "score": 3.0,
      "candidate": "from typing import List\n\n\ndef sum_of_three_lowest_numbers(numbers: List[int]) -> int:\n    \"\"\"Returns the sum of the three lowest positive numbers from a given list of numbers.\n\n    Args:\n        numbers (List[int]): list of numbers\n\n    Examples:\n        >>> assert sum_of_three_lowest_numbers([1, 2, 3, 4, 5]) == 6\n    \"\"\"\n    return sum(sorted(numbers, reverse=True)[:3])\n\n\nif __name__ == \"__main__\":\n    print(sum_of_three_lowest_numbers([1, 2, 3, 4, 5]))"
    },
    {
      "rank": 97,
      "score": 3.0,
      "candidate": "# Solution\ndef sum_three_lowest_numbers(numbers):\n    # check for edge cases\n    if len(numbers) == 0:\n        return 0\n    if len(numbers) == 1:\n        return numbers[0]\n    if len(numbers) == 2:\n        return numbers[0] + numbers[1]\n    if len(numbers) == 3:\n        return numbers[0] + numbers[1] + numbers[2]\n\n    # sort the list\n    numbers.sort()\n\n    # return the sum of the first three numbers\n    return numbers[0] + numbers[1] + numbers[2]\n\n\n# Test cases\nprint(sum_three_lowest_numbers([5]))\nprint(sum_three_lowest_numbers([5, 4, 3, 2, 1]))\nprint(sum_three_lowest_numbers([-5, -4, -3, -2, -1]))\nprint(sum_three_lowest_numbers([1, 2, 3, 4, 5]))\nprint(sum_three_lowest_numbers([1, 2, 3, 4, 5, 6, 7, 8, 9]))"
    },
    {
      "rank": 98,
      "score": 3.0,
      "candidate": "def three_lowest_numbers(numbers):\n    \"\"\"\n    >>> three_lowest_numbers([])\n    0\n    >>> three_lowest_numbers([1,2,3,4,5,6,7,8,9,10])\n    6\n    >>> three_lowest_numbers([-1,-2,-3,-4,-5,-6,-7,-8,-9,-10])\n    0\n    >>> three_lowest_numbers([-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12])\n    0\n    \"\"\"\n    if not numbers:\n        return 0\n    elif len(numbers) == 1:\n        return numbers[0]\n    elif len(numbers) == 2:\n        return sum(sorted(numbers)[:2])\n    elif len(numbers) == 3:\n        return sum(sorted(numbers)[:3])\n    else:\n        return sum(sorted(numbers)[:3])\n\n\ndef three_lowest_numbers_2(numbers):\n    \"\"\"\n    >>> three_lowest_numbers([])\n    0\n    >>> three_lowest_numbers([1,2,3,4,5,6,7,8,9,10])\n    6\n    >>> three_lowest_numbers([-1,-2,-3,-4,-5,-6,-7,-8,-9,-10])\n    0\n    >>> three_lowest_numbers([-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12])\n    0\n    \"\"\"\n    if not numbers:\n        return 0\n    elif len(numbers) == 1:\n        return numbers[0]\n    elif len(numbers) == 2:\n        return sum(sorted(numbers)[:2])\n    elif len(numbers) == 3:\n        return sum(sorted(numbers)[:3])\n    else:\n        return sum(sorted(numbers)[:3])\n\n\ndef three_lowest_numbers_3(numbers):\n    \"\"\"\n    >>> three_lowest_numbers([])\n    0\n    >>> three_lowest_numbers([1"
    },
    {
      "rank": 99,
      "score": 3.0,
      "candidate": "# Solution\ndef sum_of_three_smallest_numbers(numbers):\n    return sum(sorted(numbers)[0:3])\n\n\n# Tests\ndef test_function(test_case):\n    output = sum_of_three_smallest_numbers(test_case[0])\n    if output == test_case[1]:\n        print(\"Pass\")\n    else:\n        print(\"Fail\")\n\n\ntest_function([[10, 2, 3, 1, 9, 4, 5, 8, 7], 18])\ntest_function([[3, 1, 2, 10, 4, 5, 7], 12])\ntest_function([[3, 2, 1, 10, 4, 5, 7], 12])\ntest_function([[3, 2, 1, 10, 4, 5, 7], 11])\ntest_function([[3, 2, 1, 10, 4, 5, 7], 10])\ntest_function([[3, 2, 1, 10, 4, 5, 7], 9])\ntest_function([[3, 2, 1, 10, 4, 5, 7], 8])\ntest_function([[3, 2, 1, 10, 4, 5, 7], 7])\ntest_function([[3, 2, 1, 10, 4, 5, 7], 6])\ntest_function([[3, 2, 1, 10, 4, 5, 7], 5])\ntest_function([[3, 2, 1, 10, 4, 5, 7], 4])\ntest_function([[3, 2, 1, 10, 4, 5, 7], 3])\ntest_function([[3, 2, 1, 10, 4, 5, 7], 2])\ntest_function([[3, 2, 1"
    },
    {
      "rank": 100,
      "score": 3.0,
      "candidate": "def sum_of_three_lowest_positive_numbers(numbers):\n    \"\"\"Return sum of three lowest positive numbers from a given list of numbers.\n\n    Args:\n        numbers (list): list of numbers\n\n    Returns:\n        int: sum of three lowest positive numbers\n    \"\"\"\n    if not numbers:\n        return 0\n    numbers_sorted = sorted(numbers)\n    if numbers_sorted[0] > 0:\n        return numbers_sorted[0] + numbers_sorted[1] + numbers_sorted[2]\n    return 0\n\n\ndef main():\n    \"\"\"Print the sum of three lowest positive numbers from a given list of numbers.\"\"\"\n    numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, -11, -12, -13, -14, -15]\n    result = sum_of_three_lowest_positive_numbers(numbers)\n    print(result)\n\n\nif __name__ == \"__main__\":\n    main()"
    }
  ]
}