{
  "timestamp": "2025-09-14T22:49:12.144152",
  "method": "improved_llm_judge",
  "judge_model": "codellama/CodeLlama-7b-Python-hf",
  "target_model": "codellama-7b",
  "dataset": "mbpp",
  "problem_number": 69,
  "total_candidates": 100,
  "results": [
    {
      "rank": 1,
      "score": 10.0,
      "candidate": "from math import factorial\nfrom doctest import testmod\n\n\ndef tetrahedral_number(n):\n    \"\"\"\n    The n-th tetrahedral number is given by\n    :math:`t_n = (n^3 + 3n^2 + 3n + 1) / 6`\n\n    >>> [tetrahedral_number(i) for i in range(1, 11)]\n    [1, 4, 10, 20, 35, 56, 78, 101, 130, 155]\n    >>> tetrahedral_number(100)\n    3845064672\n    \"\"\"\n    return (n ** 3 + 3 * n ** 2 + 3 * n + 1) // 6\n\n\ndef tetrahedral_number_recursive(n):\n    \"\"\"\n    The n-th tetrahedral number is given by\n    :math:`t_n = (n^3 + 3n^2 + 3n + 1) / 6`\n\n    >>> [tetrahedral_number_recursive(i) for i in range(1, 11)]\n    [1, 4, 10, 20, 35, 56, 78, 101, 130, 155]\n    >>> tetrahedral_number_recursive(100)\n    3845064672\n    \"\"\"\n    if n <= 1:\n        return n\n    return (\n        tetrahedral_number_recursive(n - 1)\n        + n ** 3\n        + 3 * n ** 2\n        + 3 * n\n        + 1\n    ) // 6\n\n\ndef tetrahedral_number_factorial(n):\n    \"\"\"\n    The n-th tetrahedral number is given by\n    :math:`t_n = (n^3 + 3n^2 + 3n + 1) / 6`\n\n    >>> [tetrahedral_number_factorial"
    },
    {
      "rank": 2,
      "score": 10.0,
      "candidate": "def tetrahedral(n: int) -> int:\n    \"\"\"Returns the nth tetrahedral number.\n\n    >>> tetrahedral(1)\n    1\n    >>> tetrahedral(3)\n    4\n    >>> tetrahedral(4)\n    10\n    >>> tetrahedral(5)\n    20\n    >>> tetrahedral(10)\n    104\n    >>> tetrahedral(20)\n    504\n    >>> tetrahedral(30)\n    2208\n    \"\"\"\n    return n * (n + 1) * (n + 2) // 6\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 3,
      "score": 10.0,
      "candidate": "from math import factorial\n\n\ndef tetrahedral_number(n: int) -> int:\n    \"\"\"\n    This function uses the formula for tetrahedral numbers to find the nth tetrahedral number.\n    >>> tetrahedral_number(1)\n    1\n    >>> tetrahedral_number(5)\n    30\n    >>> tetrahedral_number(10)\n    90\n    >>> tetrahedral_number(-1)\n    Traceback (most recent call last):\n        ...\n    ValueError: n must be a positive integer\n    >>> tetrahedral_number(0.1)\n    Traceback (most recent call last):\n        ...\n    ValueError: n must be a positive integer\n    >>> tetrahedral_number(10.0)\n    Traceback (most recent call last):\n        ...\n    ValueError: n must be a positive integer\n    >>> tetrahedral_number('abc')\n    Traceback (most recent call last):\n        ...\n    TypeError: 'str' object cannot be interpreted as an integer\n    \"\"\"\n    if not isinstance(n, int):\n        raise TypeError(\"n must be a positive integer\")\n    if n < 1:\n        raise ValueError(\"n must be a positive integer\")\n\n    return (n * (n + 1) * (n + 2)) // 6\n\n\ndef tetrahedral_number_recursive(n: int) -> int:\n    \"\"\"\n    This function uses the formula for tetrahedral numbers to find the nth tetrahedral number.\n    >>> tetrahedral_number_recursive(1)\n    1\n    >>> tetrahedral_number_recursive(5)\n    30\n    >>> tetrahedral_number_recursive(10)\n    90\n    >>> tetrahedral_number_recursive(-1)\n    Traceback (most recent call last):\n        ...\n    ValueError: n must be a positive integer\n    >>> tetrahedral_number_recursive(0.1)\n    Traceback (most recent call last):\n        ...\n    ValueError: n must be a positive integer\n    >>> tetrahedral_number_recursive("
    },
    {
      "rank": 4,
      "score": 10.0,
      "candidate": "def nth_tetrahedral(n: int) -> int:\n    \"\"\"\n    Returns the nth tetrahedral number.\n    >>> nth_tetrahedral(1)\n    1\n    >>> nth_tetrahedral(2)\n    4\n    >>> nth_tetrahedral(3)\n    10\n    >>> nth_tetrahedral(4)\n    20\n    >>> nth_tetrahedral(-1)\n    Traceback (most recent call last):\n        ...\n    ValueError: n must be >= 1\n    >>> nth_tetrahedral(0)\n    Traceback (most recent call last):\n        ...\n    ValueError: n must be >= 1\n    >>> nth_tetrahedral(2.2)\n    Traceback (most recent call last):\n        ...\n    ValueError: n must be exact integer\n    \"\"\"\n    if n < 1:\n        raise ValueError(\"n must be >= 1\")\n    if int(n) != n:\n        raise ValueError(\"n must be exact integer\")\n\n    return (n * (n + 1) // 2) ** 2 // (6 * (n - 1))\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 5,
      "score": 10.0,
      "candidate": "def nth_tetrahedral_number(n: int) -> int:\n    \"\"\"Returns the nth tetrahedral number.\n\n    >>> nth_tetrahedral_number(1)\n    1\n    >>> nth_tetrahedral_number(2)\n    4\n    >>> nth_tetrahedral_number(3)\n    10\n    >>> nth_tetrahedral_number(4)\n    20\n    >>> nth_tetrahedral_number(5)\n    35\n    >>> nth_tetrahedral_number(6)\n    56\n    \"\"\"\n    # T(n) = 1/6 * (n * (n + 1)) * (n + 2)\n    return n * (n + 1) * (n + 2) // 6\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 6,
      "score": 10.0,
      "candidate": "from math import sqrt\n\n\ndef nth_tetrahedral_number(n: int) -> int:\n    \"\"\"\n    The nth tetrahedral number is the sum of the first n cubes.\n    \"\"\"\n    return int((n + 1) * n * (n + 1) * (n + 2) / 6)\n\n\ndef is_tetrahedral_number(n: int) -> bool:\n    \"\"\"\n    Check if the number is a tetrahedral number.\n    \"\"\"\n    return n == nth_tetrahedral_number(n)\n\n\ndef tetrahedral_number_root(n: int) -> float:\n    \"\"\"\n    The root of nth tetrahedral number is the nth tetrahedral number.\n    \"\"\"\n    return (\n        sqrt(1 + 2 * n + 2 * sqrt(1 + 4 * n + 2 * sqrt(1 + 4 * n)))\n        - sqrt(1 + 4 * n)\n        - 1\n    ) / 2\n\n\nif __name__ == \"__main__\":\n    print(nth_tetrahedral_number(10))"
    },
    {
      "rank": 7,
      "score": 10.0,
      "candidate": "# nth tetrahedral number\ndef tetrahedral(n: int) -> int:\n    \"\"\"\n    nth tetrahedral number\n    >>> tetrahedral(1)\n    1\n    >>> tetrahedral(2)\n    4\n    >>> tetrahedral(3)\n    10\n    >>> tetrahedral(4)\n    20\n    >>> tetrahedral(5)\n    35\n    >>> tetrahedral(6)\n    56\n    >>> tetrahedral(7)\n    78\n    >>> tetrahedral(8)\n    107\n    >>> tetrahedral(9)\n    135\n    >>> tetrahedral(10)\n    165\n    >>> tetrahedral(11)\n    196\n    >>> tetrahedral(12)\n    230\n    >>> tetrahedral(13)\n    267\n    >>> tetrahedral(14)\n    307\n    >>> tetrahedral(15)\n    349\n    >>> tetrahedral(16)\n    394\n    >>> tetrahedral(17)\n    442\n    >>> tetrahedral(18)\n    494\n    >>> tetrahedral(19)\n    549\n    >>> tetrahedral(20)\n    606\n    \"\"\"\n    return int((n * (n + 1) * (n + 2)) / 6)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 8,
      "score": 10.0,
      "candidate": "def nth_tetrahedral_number(n):\n    \"\"\"\n    Tetrahedral numbers are defined as the sum of the three integers,\n    i, j, and k, for which i + j + k = n.\n    \"\"\"\n\n    if n < 0:\n        raise ValueError(\"n must be greater than or equal to zero\")\n\n    if n == 0:\n        return 0\n\n    if n == 1:\n        return 1\n\n    tetrahedral_numbers = [1, 4]\n    i = 2\n\n    while True:\n        next_tetrahedral_number = (tetrahedral_numbers[i - 1] + tetrahedral_numbers[i - 2] +\n                                   tetrahedral_numbers[i - 3])\n\n        if next_tetrahedral_number == n:\n            return next_tetrahedral_number\n\n        tetrahedral_numbers.append(next_tetrahedral_number)\n\n        if next_tetrahedral_number > n:\n            return tetrahedral_numbers[i - 1]\n\n        i += 1\n\n    return None\n\n\nif __name__ == '__main__':\n    import sys\n\n    if len(sys.argv) > 1:\n        num_to_find = int(sys.argv[1])\n    else:\n        num_to_find = 21\n\n    print(nth_tetrahedral_number(num_to_find))"
    },
    {
      "rank": 9,
      "score": 10.0,
      "candidate": "import math\n\n\ndef tetrahedral_number(n: int) -> int:\n    \"\"\"Returns the nth tetrahedral number.\n\n    Args:\n        n: The position of the tetrahedral number to return.\n\n    Examples:\n        >>> tetrahedral_number(1)\n        1\n        >>> tetrahedral_number(2)\n        4\n        >>> tetrahedral_number(3)\n        10\n        >>> tetrahedral_number(4)\n        20\n    \"\"\"\n    return int((math.sqrt(8 * n + 1) - 1) / 2)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 10,
      "score": 10.0,
      "candidate": "from math import comb\n\n\ndef nth_tetrahedral_number(n: int) -> int:\n    \"\"\"Returns the nth tetrahedral number.\n\n    >>> nth_tetrahedral_number(1)\n    1\n    >>> nth_tetrahedral_number(2)\n    4\n    >>> nth_tetrahedral_number(3)\n    10\n    >>> nth_tetrahedral_number(4)\n    20\n    >>> nth_tetrahedral_number(5)\n    36\n    >>> nth_tetrahedral_number(6)\n    56\n    >>> nth_tetrahedral_number(7)\n    72\n    >>> nth_tetrahedral_number(8)\n    92\n    >>> nth_tetrahedral_number(9)\n    112\n    >>> nth_tetrahedral_number(10)\n    144\n    >>> nth_tetrahedral_number(11)\n    176\n    >>> nth_tetrahedral_number(12)\n    204\n    >>> nth_tetrahedral_number(13)\n    236\n    >>> nth_tetrahedral_number(14)\n    272\n    >>> nth_tetrahedral_number(15)\n    308\n    >>> nth_tetrahedral_number(16)\n    352\n    >>> nth_tetrahedral_number(17)\n    396\n    >>> nth_tetrahedral_number(18)\n    450\n    >>> nth_tetrahedral_number(19)\n    498\n    >>> nth_tetrahedral_number(20)\n    556\n    \"\"\"\n    return int((n + 1) * comb(n + 2, 3) / 6)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 11,
      "score": 10.0,
      "candidate": "def tetrahedral_number(n):\n    \"\"\"Returns the nth tetrahedral number.\n\n    >>> tetrahedral_number(0)\n    0\n    >>> tetrahedral_number(1)\n    1\n    >>> tetrahedral_number(2)\n    4\n    >>> tetrahedral_number(3)\n    10\n    >>> tetrahedral_number(4)\n    20\n    >>> tetrahedral_number(5)\n    35\n    \"\"\"\n    return (n * (n + 1) // 2) ** 2\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 12,
      "score": 10.0,
      "candidate": "import math\n\n\ndef nth_tetrahedral(n):\n    return int(((math.sqrt(8 * n + 1) - 1) / 2) ** 3)"
    },
    {
      "rank": 13,
      "score": 10.0,
      "candidate": "def tetrahedral_number(n: int) -> int:\n    \"\"\"Returns the nth tetrahedral number\n    >>> tetrahedral_number(1)\n    1\n    >>> tetrahedral_number(3)\n    4\n    >>> tetrahedral_number(5)\n    10\n    >>> tetrahedral_number(20)\n    9870\n    >>> tetrahedral_number(100)\n    95946144\n    \"\"\"\n    return n * (n + 1) * (n + 2) // 6\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 14,
      "score": 10.0,
      "candidate": "from math import sqrt\n\n\ndef tetrahedral(n: int) -> int:\n    \"\"\"Returns the nth tetrahedral number.\n    >>> tetrahedral(1)\n    1\n    >>> tetrahedral(2)\n    4\n    >>> tetrahedral(3)\n    10\n    >>> tetrahedral(4)\n    20\n    >>> tetrahedral(5)\n    35\n    \"\"\"\n    return int((1 + sqrt(1 + 24 * n)) / 6)\n\n\nif __name__ == \"__main__\":\n    from doctest import testmod\n\n    testmod()"
    },
    {
      "rank": 15,
      "score": 10.0,
      "candidate": "def tetrahedral_number(n):\n    \"\"\"\n    >>> tetrahedral_number(1)\n    1\n    >>> tetrahedral_number(2)\n    4\n    >>> tetrahedral_number(3)\n    10\n    >>> tetrahedral_number(4)\n    20\n    \"\"\"\n    return n * (n + 1) * (n + 2) // 6\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 16,
      "score": 10.0,
      "candidate": "from math import comb\n\n\ndef tetrahedral_number(n: int) -> int:\n    \"\"\"\n    Returns the nth tetrahedral number.\n    >>> tetrahedral_number(0)\n    0\n    >>> tetrahedral_number(1)\n    1\n    >>> tetrahedral_number(2)\n    4\n    >>> tetrahedral_number(3)\n    10\n    >>> tetrahedral_number(4)\n    20\n    >>> tetrahedral_number(5)\n    35\n    >>> tetrahedral_number(6)\n    56\n    \"\"\"\n    return int(comb(n + 3, 3))\n\n\nif __name__ == \"__main__\":\n    from doctest import testmod\n\n    testmod()"
    },
    {
      "rank": 17,
      "score": 10.0,
      "candidate": "import math\n\n\ndef nth_tetrahedral_number(n):\n    \"\"\"\n    >>> nth_tetrahedral_number(1)\n    1\n    >>> nth_tetrahedral_number(5)\n    10\n    >>> nth_tetrahedral_number(10)\n    30\n    >>> nth_tetrahedral_number(20)\n    80\n    \"\"\"\n    return (math.factorial(n + 2) // math.factorial(n) // math.factorial(n + 1))\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 18,
      "score": 10.0,
      "candidate": "def tetrahedral_number(n):\n    \"\"\"\n    Calculates the nth tetrahedral number.\n\n    >>> tetrahedral_number(1)\n    1\n    >>> tetrahedral_number(2)\n    4\n    >>> tetrahedral_number(3)\n    10\n    >>> tetrahedral_number(4)\n    20\n    >>> tetrahedral_number(5)\n    35\n    >>> tetrahedral_number(6)\n    56\n    >>> tetrahedral_number(7)\n    78\n    >>> tetrahedral_number(8)\n    107\n    >>> tetrahedral_number(9)\n    135\n    >>> tetrahedral_number(10)\n    165\n    >>> tetrahedral_number(11)\n    196\n    >>> tetrahedral_number(12)\n    228\n    >>> tetrahedral_number(13)\n    261\n    >>> tetrahedral_number(14)\n    295\n    >>> tetrahedral_number(15)\n    330\n    >>> tetrahedral_number(16)\n    366\n    >>> tetrahedral_number(17)\n    398\n    >>> tetrahedral_number(18)\n    433\n    >>> tetrahedral_number(19)\n    468\n    >>> tetrahedral_number(20)\n    504\n    >>> tetrahedral_number(21)\n    539\n    >>> tetrahedral_number(22)\n    574\n    >>> tetrahedral_number(23)\n    609\n    >>> tetrahedral_number(24)\n    645\n    >>> tetrahedral_number(25)\n    680\n    >>> tetrahedral_number(26)\n    716\n    >>> tetrahedral_number(27)\n    751\n    >>> tetrahedral_number(28)"
    },
    {
      "rank": 19,
      "score": 10.0,
      "candidate": "def tetrahedral_number(n: int) -> int:\n    \"\"\"\n    Calculate the nth tetrahedral number.\n    >>> tetrahedral_number(1)\n    1\n    >>> tetrahedral_number(2)\n    4\n    >>> tetrahedral_number(3)\n    10\n    >>> tetrahedral_number(4)\n    20\n    >>> tetrahedral_number(5)\n    35\n    >>> tetrahedral_number(6)\n    56\n    \"\"\"\n    return (n * (n + 1) * (n + 2)) // 6\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 20,
      "score": 10.0,
      "candidate": "import math\n\n\ndef nth_tetrahedral_number(n: int) -> int:\n    \"\"\"\n    >>> nth_tetrahedral_number(1)\n    1\n    >>> nth_tetrahedral_number(2)\n    4\n    >>> nth_tetrahedral_number(3)\n    10\n    >>> nth_tetrahedral_number(4)\n    20\n    >>> nth_tetrahedral_number(5)\n    35\n    >>> nth_tetrahedral_number(6)\n    56\n    >>> nth_tetrahedral_number(7)\n    78\n    >>> nth_tetrahedral_number(8)\n    107\n    \"\"\"\n    return (\n        n\n        * ((3 * n) - 2)\n        * ((3 * n) - 1)\n        // (n * (n - 1) * (n - 2))\n    )\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()\n    print(nth_tetrahedral_number(int(input().strip())))"
    },
    {
      "rank": 21,
      "score": 10.0,
      "candidate": "def nth_tetrahedral_number(n):\n    \"\"\"\n    Returns the nth tetrahedral number.\n    \"\"\"\n    return int(n * (n * (n + 1) / 3))\n\ndef main():\n    assert nth_tetrahedral_number(1) == 1\n    assert nth_tetrahedral_number(2) == 4\n    assert nth_tetrahedral_number(3) == 10\n    assert nth_tetrahedral_number(4) == 20\n    assert nth_tetrahedral_number(5) == 35\n    assert nth_tetrahedral_number(6) == 56\n    assert nth_tetrahedral_number(7) == 78\n    assert nth_tetrahedral_number(8) == 101\n    assert nth_tetrahedral_number(9) == 125\n    assert nth_tetrahedral_number(10) == 150\n    assert nth_tetrahedral_number(11) == 176\n    assert nth_tetrahedral_number(12) == 203\n    assert nth_tetrahedral_number(13) == 232\n    assert nth_tetrahedral_number(14) == 263\n    assert nth_tetrahedral_number(15) == 296\n    assert nth_tetrahedral_number(16) == 329\n    assert nth_tetrahedral_number(17) == 364\n    assert nth_tetrahedral_number(18) == 401\n    assert nth_tetrahedral_number(19) == 438\n    assert nth_tetrahedral_number(20) == 476\n    assert nth_tetrahedral_number(21) == 515\n    assert nth_tetrahedral_number(22) == 556\n    assert nth_tetrahedral_"
    },
    {
      "rank": 22,
      "score": 10.0,
      "candidate": "import math\n\n\ndef nth_tetrahedral(n):\n    return int(((1 + math.sqrt(2))**n - (1 - math.sqrt(2))**n)/(math.sqrt(6)))\n\n\ndef test_nth_tetrahedral():\n    \"\"\"\n    >>> nth_tetrahedral(1)\n    1\n    >>> nth_tetrahedral(5)\n    20\n    >>> nth_tetrahedral(10)\n    60\n    \"\"\"\n    pass\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 23,
      "score": 10.0,
      "candidate": "import math\n\n\ndef nth_tetrahedral_number(n):\n    \"\"\"\n    The nth tetrahedral number is the sum of the first n cubes.\n\n    >>> nth_tetrahedral_number(1)\n    1\n    >>> nth_tetrahedral_number(2)\n    3\n    >>> nth_tetrahedral_number(3)\n    6\n    >>> nth_tetrahedral_number(4)\n    10\n    >>> nth_tetrahedral_number(5)\n    15\n    >>> nth_tetrahedral_number(6)\n    20\n    >>> nth_tetrahedral_number(7)\n    25\n    >>> nth_tetrahedral_number(8)\n    30\n    >>> nth_tetrahedral_number(9)\n    35\n    >>> nth_tetrahedral_number(10)\n    40\n    >>> nth_tetrahedral_number(20)\n    44100\n    >>> nth_tetrahedral_number(30)\n    524000\n    >>> nth_tetrahedral_number(40)\n    6300000\n    >>> nth_tetrahedral_number(50)\n    76500000\n    >>> nth_tetrahedral_number(60)\n    918000000\n    >>> nth_tetrahedral_number(70)\n    11020000000\n    >>> nth_tetrahedral_number(80)\n    130500000000\n    >>> nth_tetrahedral_number(90)\n    1540000000000\n    \"\"\"\n    return int(math.pow(n, 3))\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 24,
      "score": 10.0,
      "candidate": "from math import factorial\n\n\ndef nth_tetrahedral(n: int) -> int:\n    \"\"\"Finds the nth tetrahedral number.\n\n    Args:\n        n (int): The nth tetrahedral number to find.\n\n    Examples:\n        >>> nth_tetrahedral(2)\n        3\n        >>> nth_tetrahedral(5)\n        9\n        >>> nth_tetrahedral(10)\n        30\n    \"\"\"\n    return (n * (n + 1) * (n + 2)) // 6\n\n\ndef nth_tetrahedral_factorial(n: int) -> int:\n    \"\"\"Finds the nth tetrahedral number using factorial.\n\n    Args:\n        n (int): The nth tetrahedral number to find.\n\n    Examples:\n        >>> nth_tetrahedral_factorial(2)\n        3\n        >>> nth_tetrahedral_factorial(5)\n        9\n        >>> nth_tetrahedral_factorial(10)\n        30\n    \"\"\"\n    return factorial(n + 2)\n\n\nif __name__ == \"__main__\":\n    from doctest import testmod\n\n    testmod()"
    },
    {
      "rank": 25,
      "score": 10.0,
      "candidate": "def nth_tetrahedral_number(n: int) -> int:\n    \"\"\"\n    Return the nth tetrahedral number.\n    >>> nth_tetrahedral_number(1)\n    1\n    >>> nth_tetrahedral_number(2)\n    4\n    >>> nth_tetrahedral_number(3)\n    10\n    >>> nth_tetrahedral_number(4)\n    20\n    >>> nth_tetrahedral_number(5)\n    36\n    >>> nth_tetrahedral_number(6)\n    56\n    >>> nth_tetrahedral_number(7)\n    72\n    >>> nth_tetrahedral_number(8)\n    90\n    \"\"\"\n    return (n ** 3 + 3 * n ** 2 + 3 * n) // 6\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 26,
      "score": 10.0,
      "candidate": "from math import factorial\n\n\ndef tetrahedral_number(n: int) -> int:\n    \"\"\"\n    Returns the nth tetrahedral number.\n    >>> tetrahedral_number(1)\n    1\n    >>> tetrahedral_number(2)\n    4\n    >>> tetrahedral_number(3)\n    10\n    >>> tetrahedral_number(5)\n    32\n    >>> tetrahedral_number(10)\n    126\n    \"\"\"\n    return (n * (n + 1) * (n + 2)) // 6\n\n\nif __name__ == \"__main__\":\n    from doctest import testmod\n\n    testmod()"
    },
    {
      "rank": 27,
      "score": 10.0,
      "candidate": "import math\n\n\ndef tetrahedral_number(n):\n    \"\"\"\n    Finds the nth tetrahedral number.\n    :param n: int\n    :return: int\n    >>> tetrahedral_number(1)\n    1\n    >>> tetrahedral_number(2)\n    4\n    >>> tetrahedral_number(3)\n    10\n    >>> tetrahedral_number(4)\n    20\n    >>> tetrahedral_number(5)\n    35\n    \"\"\"\n    return int((((3 * n ** 2) + n) / 2))\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 28,
      "score": 10.0,
      "candidate": "def tetrahedral_number(n):\n    return n * (n + 1) * (n + 2) // 6\n\n\nif __name__ == '__main__':\n    for i in range(1, 11):\n        print(tetrahedral_number(i))"
    },
    {
      "rank": 29,
      "score": 10.0,
      "candidate": "import math\n\n\ndef tetrahedral_number(n):\n    return int((math.pow(n, 3) + 3 * n) / 6)\n\n\ndef test_tetrahedral_number():\n    \"\"\"\n    >>> tetrahedral_number(1)\n    1\n    >>> tetrahedral_number(2)\n    4\n    >>> tetrahedral_number(3)\n    10\n    >>> tetrahedral_number(4)\n    20\n    >>> tetrahedral_number(5)\n    35\n    >>> tetrahedral_number(10)\n    2225\n    \"\"\"\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 30,
      "score": 10.0,
      "candidate": "import math\n\n\ndef tetrahedral_number(n: int) -> int:\n    \"\"\"Returns the nth tetrahedral number.\n\n    >>> tetrahedral_number(1)\n    1\n    >>> tetrahedral_number(2)\n    4\n    >>> tetrahedral_number(3)\n    10\n    >>> tetrahedral_number(4)\n    20\n    >>> tetrahedral_number(5)\n    35\n    \"\"\"\n    return int((math.factorial(n + 2)) / (math.factorial(n + 1) * math.factorial(n)))\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 31,
      "score": 10.0,
      "candidate": "def tetrahedral_number(n: int) -> int:\n    \"\"\"Returns the nth tetrahedral number.\n\n    >>> tetrahedral_number(1)\n    1\n    >>> tetrahedral_number(3)\n    4\n    >>> tetrahedral_number(4)\n    10\n    >>> tetrahedral_number(5)\n    20\n    >>> tetrahedral_number(6)\n    35\n    >>> tetrahedral_number(10)\n    105\n    >>> tetrahedral_number(20)\n    987\n    \"\"\"\n    return sum(range(n + 1)) ** 2\n\n\nif __name__ == \"__main__\":\n    from doctest import testmod\n\n    testmod()"
    },
    {
      "rank": 32,
      "score": 10.0,
      "candidate": "from math import factorial\n\n\ndef tetrahedral_number(n: int) -> int:\n    \"\"\"\n    Returns the nth tetrahedral number.\n    >>> tetrahedral_number(1)\n    1\n    >>> tetrahedral_number(2)\n    4\n    >>> tetrahedral_number(3)\n    10\n    >>> tetrahedral_number(4)\n    20\n    \"\"\"\n    return (n * (n + 1) // 2) ** 2\n\n\nif __name__ == \"__main__\":\n    from doctest import testmod\n\n    testmod()"
    },
    {
      "rank": 33,
      "score": 10.0,
      "candidate": "import math\n\n\ndef nth_tetrahedral_number(n: int) -> int:\n    \"\"\"\n    >>> nth_tetrahedral_number(1)\n    1\n    >>> nth_tetrahedral_number(6)\n    29\n    \"\"\"\n    return int((math.factorial(n + 2)) / (math.factorial(n) * 2))\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 34,
      "score": 10.0,
      "candidate": "import unittest\n\n\ndef nth_tetrahedral(n: int) -> int:\n    \"\"\"Finds the nth tetrahedral number.\"\"\"\n    if n < 1:\n        raise ValueError(\"n must be >= 1\")\n    return sum(range(1, n + 1)) ** 2\n\n\nclass TestNthTetrahedral(unittest.TestCase):\n\n    def test_nth_tetrahedral(self):\n        self.assertEqual(nth_tetrahedral(1), 1)\n        self.assertEqual(nth_tetrahedral(2), 4)\n        self.assertEqual(nth_tetrahedral(3), 10)\n        self.assertEqual(nth_tetrahedral(4), 20)\n        self.assertEqual(nth_tetrahedral(5), 35)\n        self.assertEqual(nth_tetrahedral(6), 56)\n        self.assertEqual(nth_tetrahedral(7), 78)\n\n\nif __name__ == \"__main__\":\n    unittest.main()"
    },
    {
      "rank": 35,
      "score": 10.0,
      "candidate": "def tetrahedral_number(n: int) -> int:\n    \"\"\"Returns the nth tetrahedral number.\n\n    >>> tetrahedral_number(1)\n    1\n    >>> tetrahedral_number(2)\n    4\n    >>> tetrahedral_number(3)\n    10\n    >>> tetrahedral_number(4)\n    20\n    >>> tetrahedral_number(5)\n    35\n    >>> tetrahedral_number(6)\n    56\n    >>> tetrahedral_number(7)\n    78\n    \"\"\"\n    return int((n * (n + 1) * (n + 2)) / 6)\n\n\nif __name__ == \"__main__\":\n    from doctest import testmod\n\n    testmod()"
    },
    {
      "rank": 36,
      "score": 10.0,
      "candidate": "import math\n\n\ndef tetrahedral_number(n: int) -> int:\n    \"\"\"\n    Tetrahedral number is given by n * (n * (n + 1) / 2)\n    >>> tetrahedral_number(1)\n    1\n    >>> tetrahedral_number(2)\n    4\n    >>> tetrahedral_number(3)\n    10\n    >>> tetrahedral_number(4)\n    20\n    >>> tetrahedral_number(5)\n    35\n    >>> tetrahedral_number(6)\n    56\n    >>> tetrahedral_number(10)\n    123\n    >>> tetrahedral_number(-1)\n    Traceback (most recent call last):\n        ...\n    ValueError: n must be >= 1\n    \"\"\"\n    if n < 1:\n        raise ValueError(\"n must be >= 1\")\n    return n * (n * (n + 1) // 2)\n\n\ndef tetrahedral_number_math(n: int) -> int:\n    \"\"\"\n    Tetrahedral number is given by n * (n * (n + 1) / 2)\n    >>> tetrahedral_number_math(1)\n    1\n    >>> tetrahedral_number_math(2)\n    4\n    >>> tetrahedral_number_math(3)\n    10\n    >>> tetrahedral_number_math(4)\n    20\n    >>> tetrahedral_number_math(5)\n    35\n    >>> tetrahedral_number_math(6)\n    56\n    >>> tetrahedral_number_math(10)\n    123\n    >>> tetrahedral_number_math(-1)\n    Traceback (most recent call last):\n        ...\n    ValueError: n must be >= 1\n    \"\"\"\n    if n < 1:\n        raise ValueError(\"n must be >= 1\")\n    return n * ((math.sqrt(8 * n + 1) - 1) // 2) ** 2\n\n\nif __name__ == \"__main"
    },
    {
      "rank": 37,
      "score": 10.0,
      "candidate": "def nth_tetrahedral_number(n):\n    \"\"\"\n    Return the nth tetrahedral number.\n\n    >>> nth_tetrahedral_number(1)\n    1\n    >>> nth_tetrahedral_number(2)\n    4\n    >>> nth_tetrahedral_number(3)\n    10\n    >>> nth_tetrahedral_number(4)\n    20\n    >>> nth_tetrahedral_number(5)\n    35\n    >>> nth_tetrahedral_number(10)\n    125\n    \"\"\"\n    return (n * (n + 1) // 2) ** 2\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 38,
      "score": 10.0,
      "candidate": "from math import factorial\n\n\ndef tetrahedral_number(n: int) -> int:\n    \"\"\"Return the nth tetrahedral number.\n\n    >>> tetrahedral_number(1)\n    1\n    >>> tetrahedral_number(2)\n    4\n    >>> tetrahedral_number(3)\n    10\n    >>> tetrahedral_number(5)\n    65\n    >>> tetrahedral_number(10)\n    410\n    \"\"\"\n    return (n ** 3 + n) // 3\n\n\ndef tetrahedral_number_alt(n: int) -> int:\n    \"\"\"Return the nth tetrahedral number.\n\n    >>> tetrahedral_number_alt(1)\n    1\n    >>> tetrahedral_number_alt(2)\n    4\n    >>> tetrahedral_number_alt(3)\n    10\n    >>> tetrahedral_number_alt(5)\n    65\n    >>> tetrahedral_number_alt(10)\n    410\n    \"\"\"\n    return n * (n + 1) * (n + 2) // 6\n\n\ndef tetrahedral_number_fast(n: int) -> int:\n    \"\"\"Return the nth tetrahedral number.\n\n    >>> tetrahedral_number_fast(1)\n    1\n    >>> tetrahedral_number_fast(2)\n    4\n    >>> tetrahedral_number_fast(3)\n    10\n    >>> tetrahedral_number_fast(5)\n    65\n    >>> tetrahedral_number_fast(10)\n    410\n    \"\"\"\n    return n * (n + 1) * (n + 2) // 6\n\n\ndef tetrahedral_number_fastest(n: int) -> int:\n    \"\"\"Return the nth tetrahedral number.\n\n    >>> tetrahedral_number_fastest(1)\n    1\n    >>> tetrahedral_number_fastest(2)\n    4\n    >>> tetrahedral_number_fast"
    },
    {
      "rank": 39,
      "score": 8.0,
      "candidate": "def tetrahedral(n):\n    \"\"\"\n    Returns the nth tetrahedral number\n    \"\"\"\n    return int(((n * (n + 1)) / 2) ** 2)"
    },
    {
      "rank": 40,
      "score": 8.0,
      "candidate": "def nth_tetrahedral(n):\n    \"\"\"\n    Tetrahedral numbers are given by T(n) = n * (n + 1) * (n + 2) / 6\n    \"\"\"\n    return n * (n + 1) * (n + 2) // 6\n\n\nif __name__ == \"__main__\":\n    for i in range(1, 100):\n        print(f\"T({i}) = {nth_tetrahedral(i)}\")"
    },
    {
      "rank": 41,
      "score": 8.0,
      "candidate": "def tetrahedral_number(n):\n    return (n * (n + 1) * (n + 2)) // 6\n\ntetrahedral_number(10)"
    },
    {
      "rank": 42,
      "score": 8.0,
      "candidate": "from math import sqrt\n\n\ndef nth_tetrahedral_number(n):\n    \"\"\"\n    Tetrahedral number is defined as the sum of the first n cubes.\n    The nth tetrahedral number is the sum of the first n cubes.\n    We can use the formula for the sum of n cubes to solve this.\n    The formula is: n^3 + n^2(n-1)/2 + n(n-1)(n-2)/6.\n    \"\"\"\n    return n * (n * n + n) // 2\n\n\ndef tetrahedral_number(n):\n    \"\"\"\n    Tetrahedral number is defined as the sum of the first n cubes.\n    The nth tetrahedral number is the sum of the first n cubes.\n    We can use the formula for the sum of n cubes to solve this.\n    The formula is: n^3 + n^2(n-1)/2 + n(n-1)(n-2)/6.\n    \"\"\"\n    num = (n * n * n + n * n * (n - 1) / 2 + n * (n - 1) * (n - 2) / 6)\n    return int(num)\n\n\ndef tetrahedral_number_recursive(n):\n    \"\"\"\n    Tetrahedral number is defined as the sum of the first n cubes.\n    The nth tetrahedral number is the sum of the first n cubes.\n    We can use the formula for the sum of n cubes to solve this.\n    The formula is: n^3 + n^2(n-1)/2 + n(n-1)(n-2)/6.\n    \"\"\"\n    if n == 0:\n        return 0\n    else:\n        return n * n * n + tetrahedral_number_recursive(n - 1)\n\n\ndef tetrahedral_number_iterative(n):\n    \"\"\"\n    Tetrahedral number is defined as the sum of the first n cubes.\n    The nth tetrahedral number is the sum of the first n cubes.\n    We can use the formula for the sum of n"
    },
    {
      "rank": 43,
      "score": 8.0,
      "candidate": "import math\n\n\ndef nth_tetrahedral(n):\n    \"\"\"\n    Tetrahedral number is the sum of the first n cubes\n    :param n:\n    :return:\n    \"\"\"\n    return n * (n * (n + 1) // 2)\n\n\ndef nth_tetrahedral_math(n):\n    \"\"\"\n    Tetrahedral number is the sum of the first n cubes\n    :param n:\n    :return:\n    \"\"\"\n    return (n * (n + 1) * (n + 2)) // 6\n\n\ndef nth_tetrahedral_func(n):\n    \"\"\"\n    Tetrahedral number is the sum of the first n cubes\n    :param n:\n    :return:\n    \"\"\"\n    return n * n * n + n * n * (n - 1) // 2\n\n\ndef nth_tetrahedral_func_math(n):\n    \"\"\"\n    Tetrahedral number is the sum of the first n cubes\n    :param n:\n    :return:\n    \"\"\"\n    return n * n * n + n * n * (n - 1) // 2\n\n\nif __name__ == '__main__':\n    for i in range(1, 10):\n        print(i, nth_tetrahedral(i))\n\n    for i in range(1, 10):\n        print(i, nth_tetrahedral_math(i))\n\n    for i in range(1, 10):\n        print(i, nth_tetrahedral_func(i))\n\n    for i in range(1, 10):\n        print(i, nth_tetrahedral_func_math(i))\n\n    for i in range(1, 10):\n        print(i, nth_tetrahedral_func(i), nth_tetrahedral_func_math(i))\n\n    for i in range(1, 10):\n        print(i, nth_tetrahedral(i), nth_tetrahedral_math(i))"
    },
    {
      "rank": 44,
      "score": 8.0,
      "candidate": "from math import factorial\n\n\n# Time complexity: O(n)\ndef tetrahedral_number(n):\n    return int(((1 + 2 * n) * n * (n + 1)) / 6)\n\n\n# Time complexity: O(n)\ndef tetrahedral_number_efficient(n):\n    return n * (n + 1) * (n + 2) // 6\n\n\n# Time complexity: O(n)\ndef tetrahedral_number_factorial(n):\n    return factorial(n + 2) // (factorial(n + 1) * factorial(n))\n\n\n# Time complexity: O(n)\ndef tetrahedral_number_math(n):\n    return n * (n + 1) * (n + 2) // 6\n\n\n# Time complexity: O(n)\ndef tetrahedral_number_math_2(n):\n    return (n * (n + 1) // 2) ** 2"
    },
    {
      "rank": 45,
      "score": 8.0,
      "candidate": "def nth_tetrahedral_number(n: int) -> int:\n    \"\"\"\n    This solution uses the fact that the nth tetrahedral number is given by the sum\n    of the first n cubes.\n    \"\"\"\n    return sum(i**3 for i in range(1, n + 1))\n\n\nif __name__ == \"__main__\":\n    for i in range(1, 11):\n        print(nth_tetrahedral_number(i))"
    },
    {
      "rank": 46,
      "score": 8.0,
      "candidate": "def tetrahedral_number(n):\n    return int((n * (n + 1) * (n + 2)) / 6)\n\n\nif __name__ == \"__main__\":\n    for i in range(1, 11):\n        print(tetrahedral_number(i))"
    },
    {
      "rank": 47,
      "score": 8.0,
      "candidate": "def tetrahedral(n):\n    \"\"\"\n    Return the nth tetrahedral number.\n    \"\"\"\n    return (n * (n + 1) * (n + 2)) // 6\n\n\nif __name__ == '__main__':\n    print(tetrahedral(1))\n    print(tetrahedral(2))\n    print(tetrahedral(5))\n    print(tetrahedral(10))"
    },
    {
      "rank": 48,
      "score": 8.0,
      "candidate": "import math\n\n\ndef nth_tetrahedral_number(n):\n    \"\"\"\n    Return the nth tetrahedral number.\n    The nth tetrahedral number is the sum of the first n cubes.\n    \"\"\"\n    if n < 0:\n        raise ValueError('Negative numbers are not accepted.')\n\n    return sum(i ** 3 for i in range(1, n + 1))\n\n\ndef tetrahedral_number_sequence(n):\n    \"\"\"\n    Return a list of the first n tetrahedral numbers.\n    The nth tetrahedral number is the sum of the first n cubes.\n    \"\"\"\n    return [i ** 3 for i in range(1, n + 1)]\n\n\ndef nth_tetrahedral_number_formula(n):\n    \"\"\"\n    Return the nth tetrahedral number using the formula.\n    The nth tetrahedral number is the sum of the first n cubes.\n    \"\"\"\n    return n * (n + 1) * (n + 2) // 6\n\n\ndef nth_tetrahedral_number_formula_math(n):\n    \"\"\"\n    Return the nth tetrahedral number using the formula.\n    The nth tetrahedral number is the sum of the first n cubes.\n    \"\"\"\n    return math.comb(n + 2, 3)\n\n\ndef nth_tetrahedral_number_formula_scipy(n):\n    \"\"\"\n    Return the nth tetrahedral number using the formula.\n    The nth tetrahedral number is the sum of the first n cubes.\n    \"\"\"\n    from scipy.special import comb\n    return comb(n + 2, 3, exact=True)"
    },
    {
      "rank": 49,
      "score": 8.0,
      "candidate": "from math import sqrt\n\n\ndef tetrahedral_number(n):\n    \"\"\"\n    Tetrahedral number is the sum of n cubes.\n    \"\"\"\n    return int(((1 + 2 * sqrt(2)) ** n - (1 - 2 * sqrt(2)) ** n) / (4 * sqrt(2)))\n\n\nif __name__ == \"__main__\":\n    print(tetrahedral_number(1))"
    },
    {
      "rank": 50,
      "score": 8.0,
      "candidate": "from math import factorial\n\ndef nth_tetrahedral(n):\n    return int(((1 + 2 * n) * n * (n + 1)) / 6)\n\n\ndef factorial_tetrahedral(n):\n    return factorial(n + 1) / (2 * factorial(n))"
    },
    {
      "rank": 51,
      "score": 8.0,
      "candidate": "import math\n\ndef nth_tetrahedral(n):\n    # Find the number of triangular numbers less than or equal to n\n    tri = math.floor((math.sqrt(8*n + 1) - 1) / 2)\n\n    # Return the nth tetrahedral number\n    return 1 + 4*tri*(tri+1)"
    },
    {
      "rank": 52,
      "score": 8.0,
      "candidate": "def nth_tetrahedral_number(n: int) -> int:\n    \"\"\"\n    Tetrahedral numbers are numbers that can be represented as the sum of\n    three consecutive cubes.\n    \"\"\"\n\n    if n <= 0:\n        raise ValueError(\"n must be a positive integer\")\n\n    # The first tetrahedral number is 1\n    tetrahedral_number = 1\n    # The sum of three consecutive cubes is the same as the sum of three\n    # consecutive cubes of the cube root of n\n    cubed_root = n ** (1 / 3)\n\n    while tetrahedral_number < n:\n        tetrahedral_number += (\n            cubed_root ** 3\n            + (cubed_root - 1) ** 3\n            + (cubed_root - 2) ** 3\n        )\n\n    return tetrahedral_number\n\n\nif __name__ == \"__main__\":\n    for n in range(1, 11):\n        print(nth_tetrahedral_number(n))"
    },
    {
      "rank": 53,
      "score": 8.0,
      "candidate": "from math import factorial\n\n\ndef nth_tetrahedral_number(n):\n    return int(factorial(n+2) / (factorial(2) * factorial(n)))\n\n\nif __name__ == \"__main__\":\n    print(nth_tetrahedral_number(1))\n    print(nth_tetrahedral_number(2))\n    print(nth_tetrahedral_number(3))\n    print(nth_tetrahedral_number(4))\n    print(nth_tetrahedral_number(5))\n    print(nth_tetrahedral_number(6))\n    print(nth_tetrahedral_number(7))\n    print(nth_tetrahedral_number(8))\n    print(nth_tetrahedral_number(9))\n    print(nth_tetrahedral_number(10))\n    print(nth_tetrahedral_number(11))\n    print(nth_tetrahedral_number(12))\n    print(nth_tetrahedral_number(13))\n    print(nth_tetrahedral_number(14))"
    },
    {
      "rank": 54,
      "score": 8.0,
      "candidate": "import math\n\n\ndef tetrahedral_number(n: int) -> int:\n    \"\"\"Returns the nth tetrahedral number.\n    >>> tetrahedral_number(1)\n    1\n    >>> tetrahedral_number(4)\n    4\n    >>> tetrahedral_number(5)\n    10\n    >>> tetrahedral_number(10)\n    20\n    >>> tetrahedral_number(20)\n    55\n    >>> tetrahedral_number(30)\n    90\n    >>> tetrahedral_number(40)\n    143\n    >>> tetrahedral_number(50)\n    204\n    >>> tetrahedral_number(60)\n    275\n    >>> tetrahedral_number(70)\n    354\n    >>> tetrahedral_number(80)\n    443\n    >>> tetrahedral_number(90)\n    542\n    >>> tetrahedral_number(100)\n    651\n    >>> tetrahedral_number(110)\n    770\n    >>> tetrahedral_number(120)\n    899\n    >>> tetrahedral_number(130)\n    1034\n    >>> tetrahedral_number(140)\n    1183\n    >>> tetrahedral_number(150)\n    1342\n    >>> tetrahedral_number(160)\n    1511\n    >>> tetrahedral_number(170)\n    1684\n    >>> tetrahedral_number(180)\n    1877\n    >>> tetrahedral_number(190)\n    2066\n    >>> tetrahedral_number(200)\n    2255\n    >>> tetrahedral_number(210)\n    2454\n    >>> tetrahedral_number(220)\n    2667\n    >>> tetrahedral_number(230)"
    },
    {
      "rank": 55,
      "score": 8.0,
      "candidate": "import math\n\n\ndef tetrahedral_number(n):\n    return int((math.factorial(n + 2)) / math.factorial(n + 1))\n\n\n# --- END OF CODE SAMPLE ---\n\n\ndef test_tetrahedral_number():\n    assert tetrahedral_number(0) == 1\n    assert tetrahedral_number(1) == 4\n    assert tetrahedral_number(2) == 10\n    assert tetrahedral_number(3) == 20\n    assert tetrahedral_number(4) == 35\n    assert tetrahedral_number(5) == 56\n    assert tetrahedral_number(6) == 78\n    assert tetrahedral_number(7) == 101"
    },
    {
      "rank": 56,
      "score": 8.0,
      "candidate": "def tetrahedral_number(n):\n    \"\"\"\n    Find the nth tetrahedral number.\n\n    :param n: The nth number\n    :type n: int\n    :return: The nth tetrahedral number\n    :rtype: int\n    \"\"\"\n    return (n * (n + 1) * (n + 2)) // 6\n\n\nif __name__ == \"__main__\":\n    for i in range(1, 10):\n        print(tetrahedral_number(i))"
    },
    {
      "rank": 57,
      "score": 8.0,
      "candidate": "def tetrahedral_number(n):\n    \"\"\"\n    Calculate the nth tetrahedral number.\n    \"\"\"\n    return n * (n + 1) * (n + 2) // 6\n\n\nif __name__ == '__main__':\n    for n in range(1, 11):\n        print(tetrahedral_number(n))"
    },
    {
      "rank": 58,
      "score": 8.0,
      "candidate": "from math import factorial\nfrom math import floor\n\n\ndef tetrahedral(n):\n    return sum(floor(factorial(i) / ((i + 1) * (i + 2) * (i + 3))) for i in range(1, n + 1))\n\n\ndef tetrahedral_recursive(n):\n    if n == 0:\n        return 0\n    return n * (n + 1) * (n + 2) // 6 + tetrahedral_recursive(n - 1)\n\n\ndef tetrahedral_formula(n):\n    return (n * (n + 1) * (n + 2) * (n + 3)) // 24"
    },
    {
      "rank": 59,
      "score": 8.0,
      "candidate": "import math\n\n\n# Time complexity: O(n)\ndef tetrahedral_number(n: int) -> int:\n    \"\"\"Returns the nth tetrahedral number.\"\"\"\n    return int((math.sqrt(1 + 24 * n) + 1) / 6)\n\n\nif __name__ == \"__main__\":\n    for i in range(1, 10):\n        print(tetrahedral_number(i))"
    },
    {
      "rank": 60,
      "score": 8.0,
      "candidate": "import math\n\n\ndef nth_tetrahedral_number(n):\n    return int(n * (n + 1) * (n + 2) / 6)\n\n\ndef tetrahedral_number_sequence(n):\n    \"\"\"\n    Returns a list of the first n tetrahedral numbers.\n    \"\"\"\n    return [nth_tetrahedral_number(i) for i in range(1, n + 1)]\n\n\ndef nth_tetrahedral_number_math(n):\n    \"\"\"\n    Returns the nth tetrahedral number using math.\n    \"\"\"\n    return int(n * (n + 1) * (n + 2) / 6)\n\n\ndef tetrahedral_number_sequence_math(n):\n    \"\"\"\n    Returns a list of the first n tetrahedral numbers.\n    \"\"\"\n    return [nth_tetrahedral_number_math(i) for i in range(1, n + 1)]"
    },
    {
      "rank": 61,
      "score": 8.0,
      "candidate": "from math import sqrt\n\ndef nth_tetrahedral_number(n):\n    \"\"\"\n    Tetrahedral numbers are given by the formula:\n    T_n = (n * (n + 1) / 2) ** 2\n    \"\"\"\n    return (n * (n + 1) / 2) ** 2\n\ndef nth_tetrahedral_number_recursive(n):\n    \"\"\"\n    Tetrahedral numbers are given by the formula:\n    T_n = (n * (n + 1) / 2) ** 2\n    \"\"\"\n    if n == 0:\n        return 0\n    return nth_tetrahedral_number_recursive(n - 1) + nth_tetrahedral_number_recursive(n - 2) + nth_tetrahedral_number_recursive(n - 3)\n\ndef nth_tetrahedral_number_root(n):\n    \"\"\"\n    Tetrahedral numbers are given by the formula:\n    T_n = (n * (n + 1) / 2) ** 2\n    \"\"\"\n    return (sqrt(2 * n * (n + 1) + 0.25) - 0.5) ** 2\n\ndef nth_tetrahedral_number_root_recursive(n):\n    \"\"\"\n    Tetrahedral numbers are given by the formula:\n    T_n = (n * (n + 1) / 2) ** 2\n    \"\"\"\n    if n == 0:\n        return 0\n    return nth_tetrahedral_number_root_recursive(n - 1) + nth_tetrahedral_number_root_recursive(n - 2) + nth_tetrahedral_number_root_recursive(n - 3)"
    },
    {
      "rank": 62,
      "score": 8.0,
      "candidate": "from math import sqrt\n\n\ndef tetrahedral_number(n):\n    \"\"\"\n    This is a function that returns the nth tetrahedral number.\n    \"\"\"\n    return int(n * (n + 1) * (n + 2) / 6)\n\n\ndef tetrahedral_number_fast(n):\n    \"\"\"\n    This is a function that returns the nth tetrahedral number.\n    \"\"\"\n    return int(n * (2 * n + 1) * (n + 1) / 6)\n\n\ndef tetrahedral_number_sqrt(n):\n    \"\"\"\n    This is a function that returns the nth tetrahedral number.\n    \"\"\"\n    return int((2 * n + 1) * (n + 1) * (n + 2) * (n + 3) ** 0.5 / 6)\n\n\ndef tetrahedral_number_sqrt_fast(n):\n    \"\"\"\n    This is a function that returns the nth tetrahedral number.\n    \"\"\"\n    return int((2 * n + 1) * (n + 1) * (n + 2) * (n + 3) ** 0.5 / 6)\n\n\nif __name__ == \"__main__\":\n    print(tetrahedral_number(5))\n    print(tetrahedral_number_fast(5))\n    print(tetrahedral_number_sqrt(5))\n    print(tetrahedral_number_sqrt_fast(5))"
    },
    {
      "rank": 63,
      "score": 8.0,
      "candidate": "import math\n\n\ndef nth_tetrahedral_number(n):\n    \"\"\"\n    Calculates the nth tetrahedral number.\n\n    Args:\n        n: An integer representing the nth tetrahedral number.\n\n    Returns:\n        An integer representing the nth tetrahedral number.\n    \"\"\"\n    return int(((math.sqrt(8 * n + 1) - 1) / 2) ** 3)\n\n\ndef nth_tetrahedral_number_alt(n):\n    \"\"\"\n    Calculates the nth tetrahedral number.\n\n    Args:\n        n: An integer representing the nth tetrahedral number.\n\n    Returns:\n        An integer representing the nth tetrahedral number.\n    \"\"\"\n    return int((n * (n + 1) * (n + 2)) / 6)\n\n\ndef nth_tetrahedral_number_recursive(n):\n    \"\"\"\n    Calculates the nth tetrahedral number.\n\n    Args:\n        n: An integer representing the nth tetrahedral number.\n\n    Returns:\n        An integer representing the nth tetrahedral number.\n    \"\"\"\n    if n == 1:\n        return 1\n    return (n * (n + 1) * (n + 2)) / 6 + nth_tetrahedral_number_recursive(n - 1)"
    },
    {
      "rank": 64,
      "score": 8.0,
      "candidate": "from math import factorial\n\n\ndef nth_tetrahedral_number(n):\n    \"\"\"\n    Return the nth tetrahedral number.\n    \"\"\"\n    return (n * (n + 1) * (n + 2)) // 6\n\n\ndef nth_tetrahedral_number_naive(n):\n    \"\"\"\n    Return the nth tetrahedral number.\n    \"\"\"\n    return sum(map(factorial, range(1, n + 1)))"
    },
    {
      "rank": 65,
      "score": 8.0,
      "candidate": "def nth_tetrahedral(n):\n    \"\"\"\n    This is a simple formula to find the nth tetrahedral number\n    \"\"\"\n    return n * (n + 1) * (n + 2) // 6\n\n\nif __name__ == \"__main__\":\n    n = int(input(\"Enter the number: \"))\n    print(nth_tetrahedral(n))"
    },
    {
      "rank": 66,
      "score": 8.0,
      "candidate": "def tetrahedral_number(n):\n    return (n * (n + 1) // 2) * (n + 1) // 2\n\n\nif __name__ == \"__main__\":\n    for i in range(1, 10):\n        print(tetrahedral_number(i))"
    },
    {
      "rank": 67,
      "score": 8.0,
      "candidate": "import math\n\ndef tetrahedral_number(n):\n    return int(((math.sqrt(1 + 24 * n) + 1) / 6) + 0.5)\n\nprint(tetrahedral_number(1000))"
    },
    {
      "rank": 68,
      "score": 8.0,
      "candidate": "from math import factorial\n\n\ndef tetrahedral(n: int):\n    \"\"\"\n    Uses the formula for tetrahedral numbers.\n    >>> tetrahedral(5)\n    10\n    >>> tetrahedral(10)\n    42\n    >>> tetrahedral(-1)\n    Traceback (most recent call last):\n        ...\n    ValueError: n must be a positive integer\n    >>> tetrahedral(4.2)\n    Traceback (most recent call last):\n        ...\n    ValueError: n must be a positive integer\n    >>> tetrahedral(0)\n    Traceback (most recent call last):\n        ...\n    ValueError: n must be a positive integer\n    \"\"\"\n    if type(n) is not int or n <= 0:\n        raise ValueError(\"n must be a positive integer\")\n    return sum(range(n + 1)) * factorial(n)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 69,
      "score": 8.0,
      "candidate": "def tetrahedral_number(n):\n    \"\"\"\n    Return the nth tetrahedral number.\n    \"\"\"\n    return n * (n + 1) * (n + 2) // 6"
    },
    {
      "rank": 70,
      "score": 8.0,
      "candidate": "import math\n\n\ndef nth_tetrahedral_number(n: int) -> int:\n    \"\"\"Returns the nth tetrahedral number.\n\n    >>> nth_tetrahedral_number(1)\n    1\n    >>> nth_tetrahedral_number(2)\n    4\n    >>> nth_tetrahedral_number(3)\n    10\n    >>> nth_tetrahedral_number(4)\n    20\n    >>> nth_tetrahedral_number(5)\n    35\n    >>> nth_tetrahedral_number(10)\n    122\n    >>> nth_tetrahedral_number(20)\n    912\n    >>> nth_tetrahedral_number(30)\n    4112\n    >>> nth_tetrahedral_number(40)\n    14224\n    >>> nth_tetrahedral_number(50)\n    25429\n    >>> nth_tetrahedral_number(60)\n    41544\n    >>> nth_tetrahedral_number(70)\n    65540\n    >>> nth_tetrahedral_number(80)\n    99524\n    >>> nth_tetrahedral_number(90)\n    136445\n    >>> nth_tetrahedral_number(100)\n    194435\n    >>> nth_tetrahedral_number(110)\n    289075\n    >>> nth_tetrahedral_number(120)\n    428640\n    >>> nth_tetrahedral_number(130)\n    626145\n    >>> nth_tetrahedral_number(140)\n    886795\n    >>> nth_tetrahedral_number(150)\n    1227935\n    >>> nth_tetrahedral_number(160)\n    1695945"
    },
    {
      "rank": 71,
      "score": 8.0,
      "candidate": "import math\n\n\ndef nth_tetrahedral_number(n):\n    \"\"\"\n    Find the nth tetrahedral number.\n    \"\"\"\n\n    return int((math.sqrt(1 + 24 * n) - 1) / 6)"
    },
    {
      "rank": 72,
      "score": 8.0,
      "candidate": "def nth_tetrahedral_number(n):\n    \"\"\"\n    Returns the nth tetrahedral number.\n    \"\"\"\n    return int((1 + 2 * n) * n * (n + 1) / 6)"
    },
    {
      "rank": 73,
      "score": 8.0,
      "candidate": "def tetrahedral_number(n):\n    \"\"\"\n    Return the nth tetrahedral number.\n    \"\"\"\n    return int(((1 + 2 * n) * n * (n + 1)) / 6)"
    },
    {
      "rank": 74,
      "score": 8.0,
      "candidate": "from math import sqrt\n\n\ndef nth_tetrahedral_number(n: int) -> int:\n    \"\"\"Returns the nth tetrahedral number.\n\n    >>> nth_tetrahedral_number(1)\n    1\n    >>> nth_tetrahedral_number(4)\n    20\n    >>> nth_tetrahedral_number(10)\n    184\n    >>> nth_tetrahedral_number(20)\n    9720\n    >>> nth_tetrahedral_number(0)\n    Traceback (most recent call last):\n        ...\n    ValueError: n must be greater than 0\n    >>> nth_tetrahedral_number(-1)\n    Traceback (most recent call last):\n        ...\n    ValueError: n must be greater than 0\n    >>> nth_tetrahedral_number(-10)\n    Traceback (most recent call last):\n        ...\n    ValueError: n must be greater than 0\n    >>> nth_tetrahedral_number(2.0)\n    Traceback (most recent call last):\n        ...\n    ValueError: n must be an integer\n    \"\"\"\n    if not isinstance(n, int):\n        raise ValueError(\"n must be an integer\")\n\n    if n <= 0:\n        raise ValueError(\"n must be greater than 0\")\n\n    i = 1\n    while tetrahedral_number(i) < n:\n        i += 1\n\n    return tetrahedral_number(i)\n\n\ndef tetrahedral_number(n: int) -> int:\n    \"\"\"Returns the nth tetrahedral number.\n\n    >>> tetrahedral_number(1)\n    1\n    >>> tetrahedral_number(4)\n    20\n    >>> tetrahedral_number(10)\n    184\n    >>> tetrahedral_number(20)\n    9720\n    >>> tetrahedral_number(0)\n    Traceback (most recent call last):\n        ...\n    ValueError: n must be greater than 0\n    >>> tetrahedral"
    },
    {
      "rank": 75,
      "score": 8.0,
      "candidate": "import math\n\n\ndef tetrahedral_number(n):\n    return int((math.sqrt(1 + 24 * n) + 1) / 6)\n\n\ndef tetrahedral_number_2(n):\n    return sum(range(1, n + 1))"
    },
    {
      "rank": 76,
      "score": 8.0,
      "candidate": "import math\n\n\ndef nth_tetrahedral_number(n):\n    return (math.factorial(n + 2) + math.factorial(n)) // (math.factorial(n + 1) * 2)\n\n\nif __name__ == \"__main__\":\n    print(nth_tetrahedral_number(2))"
    },
    {
      "rank": 77,
      "score": 8.0,
      "candidate": "import math\n\n\ndef nth_tetrahedral_number(n: int) -> int:\n    \"\"\"\n    The tetrahedral numbers are the numbers that can be represented as the sum of\n    the squares of the sides of a tetrahedron.\n    \"\"\"\n    return n * (n + 1) * (n + 2) // 6\n\n\nif __name__ == \"__main__\":\n    print(nth_tetrahedral_number(10))"
    },
    {
      "rank": 78,
      "score": 8.0,
      "candidate": "def tetrahedral_number(n):\n    \"\"\"\n    T(n) = n * (n + 1) * (n + 2) / 6\n    \"\"\"\n    return n * (n + 1) * (n + 2) // 6\n\nif __name__ == '__main__':\n    for n in range(1, 11):\n        print(n, tetrahedral_number(n))"
    },
    {
      "rank": 79,
      "score": 8.0,
      "candidate": "def nth_tetrahedral_number(n: int) -> int:\n    \"\"\"\n    This solution is based on the formula for tetrahedral numbers:\n    T(n) = n * (n + 1) * (n + 2) / 6\n\n    :param n:\n    :return:\n    \"\"\"\n    return n * (n + 1) * (n + 2) // 6\n\n\nif __name__ == \"__main__\":\n    print(nth_tetrahedral_number(4))"
    },
    {
      "rank": 80,
      "score": 8.0,
      "candidate": "from math import factorial\n\n\ndef tetrahedral_number(n):\n    \"\"\"\n    >>> tetrahedral_number(1)\n    1\n    >>> tetrahedral_number(2)\n    4\n    >>> tetrahedral_number(3)\n    10\n    \"\"\"\n    return int(factorial(n + 2) / (factorial(2) * factorial(n)))\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 81,
      "score": 8.0,
      "candidate": "import math\n\ndef tetra(n):\n    \"\"\"\n    Tetrahedral number is sum of n natural numbers\n    \"\"\"\n    return sum(range(1, n+1))\n\ndef nth_tetra(n):\n    \"\"\"\n    Tetrahedral number is sum of n natural numbers\n    \"\"\"\n    return n * (n + 1) * (n + 2) // 6\n\ndef tetra_math(n):\n    \"\"\"\n    Tetrahedral number is the nth triangular number\n    \"\"\"\n    return math.factorial(n+2) / math.factorial(n+1) / math.factorial(n)\n\nif __name__ == '__main__':\n    for i in range(1, 11):\n        print(i, tetra(i), nth_tetra(i), tetra_math(i))"
    },
    {
      "rank": 82,
      "score": 8.0,
      "candidate": "def nth_tetrahedral_number(n: int) -> int:\n    \"\"\"\n    Time Complexity: O(1)\n    \"\"\"\n    return n * (n + 1) * (n + 2) // 6\n\n\nif __name__ == \"__main__\":\n    for i in range(1, 11):\n        print(nth_tetrahedral_number(i))"
    },
    {
      "rank": 83,
      "score": 8.0,
      "candidate": "def tetrahedral_number(n):\n    \"\"\"\n    Return the nth tetrahedral number.\n    \"\"\"\n    return int((n * (n + 1) * (n + 2)) / 6)\n\n# Run Tests\nprint tetrahedral_number(1) == 1\nprint tetrahedral_number(2) == 4\nprint tetrahedral_number(5) == 22\nprint tetrahedral_number(10) == 72\nprint tetrahedral_number(20) == 330"
    },
    {
      "rank": 84,
      "score": 8.0,
      "candidate": "import math\n\n\ndef nth_tetrahedral(n):\n    \"\"\"\n    Return the nth tetrahedral number.\n    \"\"\"\n    return int((math.sqrt(1 + 24 * n) + 1) / 6)\n\n\nif __name__ == \"__main__\":\n    for i in range(10):\n        print(i, nth_tetrahedral(i))"
    },
    {
      "rank": 85,
      "score": 8.0,
      "candidate": "def nth_tetrahedral_number(n):\n    \"\"\"\n    n is 1-indexed.\n    \"\"\"\n    return (n * (n + 1) * (n + 2)) // 6\n\n\nif __name__ == '__main__':\n    for n in range(1, 11):\n        print(nth_tetrahedral_number(n))"
    },
    {
      "rank": 86,
      "score": 7.0,
      "candidate": "def nth_tetrahedral(n):\n    \"\"\"\n    O(n) time | O(1) space\n    \"\"\"\n    tetrahedral = 1\n    counter = 1\n    while counter < n:\n        tetrahedral += 4 * (counter ** 2)\n        counter += 1\n    return tetrahedral"
    },
    {
      "rank": 87,
      "score": 2.0,
      "candidate": "def nth_tetrahedral_number(n):\n    \"\"\"\n    Time complexity: O(n).\n    Space complexity: O(1).\n    \"\"\"\n\n    # Handle base case.\n    if n == 1:\n        return 1\n\n    # Create a recursive function to find nth tetrahedral number.\n    def _nth_tetrahedral_number(n, tetrahedral_number=1, count=1):\n        if count == n:\n            return tetrahedral_number\n\n        tetrahedral_number += count\n        count += 1\n        return _nth_tetrahedral_number(n, tetrahedral_number, count)\n\n    return _nth_tetrahedral_number(n)\n\n\ndef nth_tetrahedral_number_2(n):\n    \"\"\"\n    Time complexity: O(n).\n    Space complexity: O(1).\n    \"\"\"\n    if n == 1:\n        return 1\n\n    tetrahedral_number = 1\n    for i in range(2, n+1):\n        tetrahedral_number += i\n    return tetrahedral_number"
    },
    {
      "rank": 88,
      "score": 1.0,
      "candidate": "def tetrahedral_number(n):\n    \"\"\"\n    :param n: int - an integer\n    :return: int - nth tetrahedral number\n    \"\"\"\n    # Your code here\n    return int((n * (n + 1) * (n + 2)) / 6)\n\n\nif __name__ == '__main__':\n    print(tetrahedral_number(1))"
    },
    {
      "rank": 89,
      "score": 1.0,
      "candidate": "import math\n\n\ndef tetrahedral_numbers(n):\n    return int(n * (n + 1) * (n + 2) / 6)\n\n\ndef tetrahedral_numbers_recursive(n):\n    if n == 1:\n        return 1\n    else:\n        return tetrahedral_numbers_recursive(n - 1) + n\n\n\ndef tetrahedral_numbers_math(n):\n    return int(n * (n + 1) * (n + 2) / 6)\n\n\ndef tetrahedral_numbers_formula(n):\n    return int(((1 + math.sqrt(1 + 24 * n)) / 6) ** (1 / 3))"
    },
    {
      "rank": 90,
      "score": 1.0,
      "candidate": "def tetrahedral_number(n):\n    \"\"\"Returns the nth tetrahedral number.\"\"\"\n    return n * (n + 1) * (n + 2) // 6\n\n# 2\nprint(tetrahedral_number(2))\n\n# 13\nprint(tetrahedral_number(5))\n\n# 34\nprint(tetrahedral_number(7))\n\n# 54\nprint(tetrahedral_number(10))"
    },
    {
      "rank": 91,
      "score": 1.0,
      "candidate": "def nth_tetrahedral_number(n: int) -> int:\n    \"\"\"\n    O(n) time | O(1) space\n    \"\"\"\n    if n == 1:\n        return 1\n    if n == 2:\n        return 4\n\n    return nth_tetrahedral_number(n - 1) + 4 * nth_tetrahedral_number(n - 2)\n\n\nif __name__ == \"__main__\":\n    print(nth_tetrahedral_number(5))"
    },
    {
      "rank": 92,
      "score": 1.0,
      "candidate": "import unittest\n\n\ndef nth_tetrahedral_number(n):\n    \"\"\"\n    Returns the nth tetrahedral number.\n    Tetrahedral numbers are triangular numbers.\n    T(n) = n * (n + 1) * (n + 2) / 6\n    \"\"\"\n    return n * (n + 1) * (n + 2) // 6\n\n\nclass TetrahedralNumberTest(unittest.TestCase):\n    def test_nth_tetrahedral_number(self):\n        self.assertEqual(nth_tetrahedral_number(1), 1)\n        self.assertEqual(nth_tetrahedral_number(2), 4)\n        self.assertEqual(nth_tetrahedral_number(3), 10)\n        self.assertEqual(nth_tetrahedral_number(4), 20)\n        self.assertEqual(nth_tetrahedral_number(5), 35)\n        self.assertEqual(nth_tetrahedral_number(6), 56)\n        self.assertEqual(nth_tetrahedral_number(7), 78)\n        self.assertEqual(nth_tetrahedral_number(8), 107)\n        self.assertEqual(nth_tetrahedral_number(9), 139)\n        self.assertEqual(nth_tetrahedral_number(10), 177)\n\n\nif __name__ == \"__main__\":\n    unittest.main()"
    },
    {
      "rank": 93,
      "score": 1.0,
      "candidate": "import math\n\n\ndef nth_tetrahedral_number(n):\n    \"\"\"Returns the nth tetrahedral number.\"\"\"\n    return n * (n + 1) * (n + 2) // 6\n\n\ndef test():\n    \"\"\"run test cases\"\"\"\n    test_cases = (\n        (1, 1),\n        (2, 4),\n        (3, 10),\n        (4, 20),\n        (5, 35),\n    )\n\n    for arg, expected in test_cases:\n        assert nth_tetrahedral_number(arg) == expected\n\n    print(\"Test OK\")\n\n\nif __name__ == \"__main__\":\n    test()"
    },
    {
      "rank": 94,
      "score": 1.0,
      "candidate": "def tetrahedral_number(n: int) -> int:\n    \"\"\"\n    O(n) time and O(1) space.\n    \"\"\"\n    tetrahedral_number = 0\n    for i in range(1, n + 1):\n        tetrahedral_number += i\n    return tetrahedral_number\n\n\nif __name__ == \"__main__\":\n    assert tetrahedral_number(1) == 1\n    assert tetrahedral_number(2) == 4\n    assert tetrahedral_number(3) == 10\n    assert tetrahedral_number(4) == 20"
    },
    {
      "rank": 95,
      "score": 1.0,
      "candidate": "import unittest\n\n\ndef nth_tetrahedral(n):\n    \"\"\"\n    Time complexity: O(n).\n    Space complexity: O(1).\n    \"\"\"\n    tetrahedral = 0\n    while n > 0:\n        n -= 1\n        tetrahedral += n\n    return tetrahedral\n\n\nclass TestSuite(unittest.TestCase):\n\n    def test_nth_tetrahedral(self):\n        self.assertEqual(nth_tetrahedral(2), 3)\n        self.assertEqual(nth_tetrahedral(3), 4)\n        self.assertEqual(nth_tetrahedral(4), 5)\n        self.assertEqual(nth_tetrahedral(5), 6)\n        self.assertEqual(nth_tetrahedral(6), 7)\n        self.assertEqual(nth_tetrahedral(7), 8)\n        self.assertEqual(nth_tetrahedral(8), 9)\n        self.assertEqual(nth_tetrahedral(9), 10)\n        self.assertEqual(nth_tetrahedral(10), 11)\n        self.assertEqual(nth_tetrahedral(11), 12)\n        self.assertEqual(nth_tetrahedral(12), 13)\n        self.assertEqual(nth_tetrahedral(13), 14)\n        self.assertEqual(nth_tetrahedral(14), 15)\n        self.assertEqual(nth_tetrahedral(15), 16)\n        self.assertEqual(nth_tetrahedral(16), 17)\n        self.assertEqual(nth_tetrahedral(17), 18)\n        self.assertEqual(nth_tetrahedral(18), 19)\n        self.assertEqual(nth_tetrahedral(19), 20)\n        self.assertEqual(nth_tetrahedral(20), 21)\n\n\nif __name__ == '__main__':\n    unittest.main()"
    },
    {
      "rank": 96,
      "score": 1.0,
      "candidate": "def tetrahedral_number(n):\n    return int(((1 + 2 * n) ** 0.5 - 1) / 0.5)"
    },
    {
      "rank": 97,
      "score": 1.0,
      "candidate": "import math\nfrom typing import List\n\n\ndef find_nth_tetrahedral_number(n: int) -> int:\n    \"\"\"Finds the nth tetrahedral number.\n\n    Args:\n        n (int): The nth tetrahedral number.\n\n    Examples:\n        >>> find_nth_tetrahedral_number(1)\n        1\n        >>> find_nth_tetrahedral_number(2)\n        4\n        >>> find_nth_tetrahedral_number(3)\n        10\n    \"\"\"\n    return (n * (n + 1) // 2) ** 2\n\n\ndef tetrahedral_numbers(limit: int) -> List[int]:\n    \"\"\"Finds all the tetrahedral numbers below the given limit.\n\n    Args:\n        limit (int): The maximum tetrahedral number to find.\n\n    Examples:\n        >>> tetrahedral_numbers(1)\n        [1]\n        >>> tetrahedral_numbers(2)\n        [1, 4]\n        >>> tetrahedral_numbers(3)\n        [1, 4, 10]\n    \"\"\"\n    tetrahedral_numbers = []\n    for n in range(1, limit):\n        tetrahedral_numbers.append(find_nth_tetrahedral_number(n))\n    return tetrahedral_numbers\n\n\ndef tetrahedral_root(n: int) -> int:\n    \"\"\"Finds the nth tetrahedral number.\n\n    Args:\n        n (int): The nth tetrahedral number.\n\n    Examples:\n        >>> tetrahedral_root(1)\n        1\n        >>> tetrahedral_root(2)\n        2\n        >>> tetrahedral_root(3)\n        3\n    \"\"\"\n    return int(math.ceil(math.sqrt(n) * math.sqrt(n + 1) / 2))"
    },
    {
      "rank": 98,
      "score": 1.0,
      "candidate": "from math import factorial\n\n\ndef nth_tetrahedral_number(n):\n    return int((n * (n + 1) * (n + 2)) / 6)\n\n\ndef nth_tetrahedral_number_recursive(n):\n    if n == 1:\n        return 1\n    return nth_tetrahedral_number_recursive(n - 1) + nth_tetrahedral_number_recursive(n - 2) + nth_tetrahedral_number_recursive(n - 3)\n\n\ndef nth_tetrahedral_number_formula(n):\n    return n * (n + 1) * (n + 2) / 6\n\n\ndef nth_tetrahedral_number_formula_2(n):\n    return n * (n + 1) * (n + 2) // 6\n\n\ndef nth_tetrahedral_number_formula_3(n):\n    return n * (n + 1) * (n + 2) / 2\n\n\ndef nth_tetrahedral_number_formula_4(n):\n    return n * (n + 1) * (n + 2) * 2\n\n\ndef nth_tetrahedral_number_formula_5(n):\n    return n * (n + 1) * (n + 2) * 3\n\n\ndef nth_tetrahedral_number_formula_6(n):\n    return n * (n + 1) * (n + 2) * 4\n\n\ndef nth_tetrahedral_number_formula_7(n):\n    return n * (n + 1) * (n + 2) * 5\n\n\ndef nth_tetrahedral_number_formula_8(n):\n    return n * (n + 1) * (n + 2) * 6\n\n\ndef nth_tetrahedral_number_formula_9(n):\n    return n * (n + 1) * (n + 2) *"
    },
    {
      "rank": 99,
      "score": 1.0,
      "candidate": "def nth_tetrahedral_number(n):\n    return int(((2 * n - 1) * n * (n - 1) * (n - 2)) ** 0.5)\n\n\ndef test_nth_tetrahedral_number():\n    \"\"\"Test for nth_tetrahedral_number function.\"\"\"\n    assert nth_tetrahedral_number(1) == 1\n    assert nth_tetrahedral_number(2) == 4\n    assert nth_tetrahedral_number(3) == 10\n    assert nth_tetrahedral_number(4) == 20\n    assert nth_tetrahedral_number(5) == 35\n    assert nth_tetrahedral_number(6) == 56"
    },
    {
      "rank": 100,
      "score": 1.0,
      "candidate": "def tetrahedral_number(n):\n    \"\"\"\n    Tetrahedral numbers are the numbers that are formed by adding up the cubes of the first n natural numbers.\n    They are also known as triangular numbers.\n    \"\"\"\n\n    if n < 1:\n        return 0\n\n    return sum(i ** 3 for i in range(1, n + 1))\n\n\ndef tetrahedral_number_naive(n):\n    \"\"\"\n    Tetrahedral numbers are the numbers that are formed by adding up the cubes of the first n natural numbers.\n    They are also known as triangular numbers.\n    \"\"\"\n\n    if n < 1:\n        return 0\n\n    return n * (n + 1) * (n + 2) // 6\n\n\nif __name__ == \"__main__\":\n    for n in range(10):\n        print(tetrahedral_number(n), tetrahedral_number_naive(n))"
    }
  ]
}