{
  "timestamp": "2025-09-15T00:13:52.492811",
  "method": "improved_llm_judge",
  "judge_model": "codellama/CodeLlama-7b-Python-hf",
  "target_model": "codellama-7b",
  "dataset": "mbpp",
  "problem_number": 255,
  "total_candidates": 100,
  "results": [
    {
      "rank": 1,
      "score": 10.0,
      "candidate": "def surface_area(side):\n    return 6*(side**2)\n\n\nprint(surface_area(10))"
    },
    {
      "rank": 2,
      "score": 10.0,
      "candidate": "def cube_surface_area(length):\n    return 6 * length ** 2\n\n\ndef main():\n    print(cube_surface_area(1))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 3,
      "score": 10.0,
      "candidate": "def lateral_surface_area(length):\n    return 6 * (length ** 2)"
    },
    {
      "rank": 4,
      "score": 10.0,
      "candidate": "from math import sqrt\n\ndef surface_area(length):\n    return 6*(length**2)\n\ndef surface_area_opt(length):\n    return 6*(length*length)\n\ndef lateral_area(length):\n    return (length*length)*sqrt(3)\n\ndef lateral_area_opt(length):\n    return ((length*length)*sqrt(3))\n\ndef main():\n    length = 2\n    print(\"Surface Area: \", surface_area(length))\n    print(\"Lateral Area: \", lateral_area(length))\n    print(\"Surface Area: \", surface_area_opt(length))\n    print(\"Lateral Area: \", lateral_area_opt(length))\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 5,
      "score": 10.0,
      "candidate": "from math import pow\n\n\ndef get_lateral_surface_area(length: int):\n    return 6 * pow(length, 2)\n\n\nif __name__ == \"__main__\":\n    print(get_lateral_surface_area(10))"
    },
    {
      "rank": 6,
      "score": 10.0,
      "candidate": "def surface_area(length):\n    \"\"\"\n    >>> surface_area(5)\n    125\n    \"\"\"\n    return 6 * length ** 2\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 7,
      "score": 10.0,
      "candidate": "def surface_area(length):\n    return 6 * length * length\n\nprint(surface_area(5))"
    },
    {
      "rank": 8,
      "score": 10.0,
      "candidate": "def surface_area(edge_length):\n    return (6 * edge_length**2)\n\nprint(surface_area(4))\n\n\"\"\"\nWrite a function to find the volume of a cube.\n\"\"\"\n\ndef volume(edge_length):\n    return (edge_length**3)\n\nprint(volume(4))\n\n\"\"\"\nWrite a function to find the diagonal length of a cube.\n\"\"\"\n\ndef diagonal(edge_length):\n    return (edge_length * 2 ** 0.5)\n\nprint(diagonal(4))\n\n\"\"\"\nWrite a function to find the surface are of a sphere given its radius.\n\"\"\"\n\ndef sphere_surface_area(radius):\n    return (4 * 3.14 * radius ** 2)\n\nprint(sphere_surface_area(3))\n\n\"\"\"\nWrite a function to find the volume of a sphere given its radius.\n\"\"\"\n\ndef sphere_volume(radius):\n    return (4 * 3.14 * radius ** 3)\n\nprint(sphere_volume(3))\n\n\"\"\"\nWrite a function to find the average volume of a sphere given its radius and its number of layers.\n\"\"\"\n\ndef average_volume(radius, layers):\n    return (4 * 3.14 * radius ** 3) * layers\n\nprint(average_volume(3, 3))\n\n\"\"\"\nWrite a function to find the lateral surface area of a sphere given its radius.\n\"\"\"\n\ndef sphere_lateral_surface_area(radius):\n    return (4 * 3.14 * radius * (radius ** 2 + radius))\n\nprint(sphere_lateral_surface_area(3))\n\n\"\"\"\nWrite a function to find the surface are of a hemisphere given its radius.\n\"\"\"\n\ndef hemisphere_surface_area(radius):\n    return (3.14 * radius ** 2 * (3 + 3 ** 0.5)) / 2\n\nprint(hemisphere_surface_area(3))\n\n\"\"\"\nWrite a function to find the volume of a hemisphere given"
    },
    {
      "rank": 9,
      "score": 10.0,
      "candidate": "def surface_area(side_length: int) -> int:\n    \"\"\"Return the lateral surface area of a cube.\n\n    >>> surface_area(2)\n    52\n    >>> surface_area(1)\n    12\n    \"\"\"\n    return 6 * side_length ** 2\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 10,
      "score": 10.0,
      "candidate": "from typing import Union\n\n\ndef find_lateral_surface_area(length: Union[int, float]) -> Union[int, float]:\n    \"\"\"Finds the lateral surface area of a cube.\n\n    Args:\n        length (Union[int, float]): the length of the cube.\n\n    Returns:\n        Union[int, float]: the lateral surface area of a cube.\n    \"\"\"\n    return 6 * length ** 2"
    },
    {
      "rank": 11,
      "score": 10.0,
      "candidate": "def surface_area(size):\n    return 6 * size ** 2\n\n\ndef lateral_surface_area(size):\n    return surface_area(size)\n\n\ndef main():\n    print(lateral_surface_area(10))\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 12,
      "score": 10.0,
      "candidate": "def lateralSurfaceArea(length):\n    return 6*(length**2)"
    },
    {
      "rank": 13,
      "score": 10.0,
      "candidate": "def lateral_surface_area(n):\n    return 6 * (n ** 2)\n\n\nif __name__ == '__main__':\n    print(lateral_surface_area(4))"
    },
    {
      "rank": 14,
      "score": 9.995545915836482,
      "candidate": "def lateral_surface_area(n: int) -> int:\n    \"\"\"\n    >>> lateral_surface_area(1)\n    6\n    >>> lateral_surface_area(2)\n    24\n    >>> lateral_surface_area(3)\n    54\n    \"\"\"\n    return n * n * 2\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 15,
      "score": 9.97623665987849,
      "candidate": "from math import sqrt\n\n\ndef surface_area(length):\n    return 6 * length * sqrt(length)\n\n\nif __name__ == '__main__':\n    length = int(input())\n    result = surface_area(length)\n    print(result)"
    },
    {
      "rank": 16,
      "score": 9.93873253770094,
      "candidate": "def lateral_surface_area(length):\n    return 6 * length ** 2\n\n\nif __name__ == '__main__':\n    print(lateral_surface_area(10))"
    },
    {
      "rank": 17,
      "score": 9.925493820839444,
      "candidate": "__author__ = 'Daniel'\n\n\nclass Solution(object):\n    def surfaceArea(self, A):\n        \"\"\"\n        :type A: int\n        :rtype: int\n        \"\"\"\n        return 6 * A * A + 12 * A * sum(map(lambda x: min(x, A-x), [A, A, A, A]))\n\n    def surfaceArea_error(self, A):\n        \"\"\"\n        :type A: int\n        :rtype: int\n        \"\"\"\n        return 6 * A * A + 12 * A * (max(A, A, A, A) - min(A, A, A, A))\n\n\nif __name__ == \"__main__\":\n    assert Solution().surfaceArea(2) == 68"
    },
    {
      "rank": 18,
      "score": 9.922586245986201,
      "candidate": "def find_lateral_surface_area(length: float) -> float:\n    return 6 * length ** 2\n\n\"\"\"\nWrite a function to find the volume of a sphere.\n\"\"\"\n\ndef find_volume(radius: float) -> float:\n    return 4/3 * 3.14 * radius ** 3\n\n\"\"\"\nWrite a function to find the surface area of a sphere.\n\"\"\"\n\ndef find_surface_area(radius: float) -> float:\n    return 4 * 3.14 * radius ** 2\n\n\"\"\"\nWrite a function to find the surface area of a hemisphere.\n\"\"\"\n\ndef find_hemisphere_surface_area(radius: float) -> float:\n    return 3 * 3.14 * radius ** 2\n\n\"\"\"\nWrite a function to find the volume of a hemisphere.\n\"\"\"\n\ndef find_hemisphere_volume(radius: float) -> float:\n    return 2/3 * 3.14 * radius ** 3"
    },
    {
      "rank": 19,
      "score": 9.90374106256822,
      "candidate": "def lateral_area(side_length):\n    return 6 * side_length ** 2\n\n\nif __name__ == '__main__':\n    print(lateral_area(2))"
    },
    {
      "rank": 20,
      "score": 9.901327574346263,
      "candidate": "def surface_area(length):\n    return 6 * length ** 2"
    },
    {
      "rank": 21,
      "score": 9.8979599159691,
      "candidate": "def surface_area(length: int) -> int:\n    \"\"\"Calculates the surface area of a cube.\n\n    Args:\n        length: The length of the cube.\n\n    Examples:\n        >>> assert surface_area(4) == 54\n    \"\"\"\n    return 6 * length ** 2\n\n\nif __name__ == \"__main__\":\n    print(surface_area(4))"
    },
    {
      "rank": 22,
      "score": 9.845073452641465,
      "candidate": "from math import sqrt\n\ndef lateral_surface_area(edges):\n    return 6 * sqrt(edges ** 2)\n\n\ndef test_lateral_surface_area():\n    \"\"\"\n    >>> lateral_surface_area(1)\n    6.0\n    >>> lateral_surface_area(2)\n    36.0\n    >>> lateral_surface_area(3)\n    84.0\n    \"\"\"\n    pass\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 23,
      "score": 9.841872501511054,
      "candidate": "__author__ = 'Danyang'\n\n\nclass Solution(object):\n    def surfaceArea(self, A):\n        \"\"\"\n        :type A: int\n        :rtype: int\n        \"\"\"\n        area = 6*A*A\n        return area\n\n    def surfaceArea_error(self, A):\n        \"\"\"\n        :type A: int\n        :rtype: int\n        \"\"\"\n        area = 6*A*A\n        for i in xrange(6):\n            area += 2*A\n        return area\n\n\nif __name__ == \"__main__\":\n    assert Solution().surfaceArea(2) == 52"
    },
    {
      "rank": 24,
      "score": 9.834420175617103,
      "candidate": "def surface_area(length):\n    return 6*(length**2)\n\n\"\"\"\nWrite a function to find the volume of a cube.\n\"\"\"\n\ndef volume(length):\n    return length**3\n\n\"\"\"\nWrite a function to find the surface are of a sphere.\n\"\"\"\n\ndef sphere_surface_area(radius):\n    return 4*(radius**2)*(3.14)\n\n\"\"\"\nWrite a function to find the volume of a sphere.\n\"\"\"\n\ndef sphere_volume(radius):\n    return (4/3)*(3.14)*(radius**3)\n\n\"\"\"\nWrite a function to find the average of an array of numbers.\n\"\"\"\n\ndef average(list):\n    return sum(list)/len(list)\n\n\"\"\"\nWrite a function to find the sum of an array of numbers.\n\"\"\"\n\ndef sum_array(list):\n    return sum(list)\n\n\"\"\"\nWrite a function to find the difference between two numbers.\n\"\"\"\n\ndef difference(num1, num2):\n    return num1 - num2\n\n\"\"\"\nWrite a function to find the product of two numbers.\n\"\"\"\n\ndef product(num1, num2):\n    return num1*num2\n\n\"\"\"\nWrite a function to find the quotient of two numbers.\n\"\"\"\n\ndef quotient(num1, num2):\n    return num1/num2\n\n\"\"\"\nWrite a function to find the maximum of two numbers.\n\"\"\"\n\ndef maximum(num1, num2):\n    if num1 > num2:\n        return num1\n    else:\n        return num2\n\n\"\"\"\nWrite a function to find the minimum of two numbers.\n\"\"\"\n\ndef minimum(num1, num2):\n    if num1 < num2:\n        return num1\n    else:\n        return num2\n\n\"\"\"\nWrite a function to find the absolute value of a number.\n\"\"\"\n\ndef absolute_value(num):\n    if num > 0:\n        return num\n    elif num == 0:\n        return 0\n    else:\n        return -num\n\n\"\"\"\nWrite"
    },
    {
      "rank": 25,
      "score": 9.828970827969696,
      "candidate": "def find_lateral_surface_area(length):\n    return 6 * length * length\n\n\ndef test_find_lateral_surface_area():\n    \"\"\"\n    >>> find_lateral_surface_area(1)\n    6\n    >>> find_lateral_surface_area(2)\n    36\n    >>> find_lateral_surface_area(3)\n    108\n    >>> find_lateral_surface_area(4)\n    216\n    \"\"\"\n    pass\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 26,
      "score": 9.814445115350479,
      "candidate": "from math import sqrt\n\ndef lateral_surface_area(length):\n    return 6 * (length ** 2)\n\nif __name__ == '__main__':\n    # Use the example input, save it as a variable for convenience\n    example_input = 2\n\n    # Call the function with the example input\n    example_output = lateral_surface_area(example_input)\n\n    # Print the result\n    print(example_output)"
    },
    {
      "rank": 27,
      "score": 9.787110480980308,
      "candidate": "def lateral_surface_area(volume):\n    return volume ** 2\n\n\nif __name__ == '__main__':\n    print(lateral_surface_area(2))"
    },
    {
      "rank": 28,
      "score": 9.762451411229746,
      "candidate": "def surface_area(length):\n    return 6*(length**2)\n\ndef surface_area2(length):\n    return 4*length**2\n\ndef surface_area3(length):\n    return (4*length)**2\n\ndef surface_area4(length):\n    return (4*length)**2\n\ndef surface_area5(length):\n    return 4*length*length\n\ndef surface_area6(length):\n    return (length*length)*4\n\ndef surface_area7(length):\n    return (4*length)**2\n\ndef surface_area8(length):\n    return (4*length)**2\n\ndef surface_area9(length):\n    return 4*length*length\n\ndef surface_area10(length):\n    return (length*length)*4\n\nassert surface_area(3) == 54\nassert surface_area2(3) == 54\nassert surface_area3(3) == 54\nassert surface_area4(3) == 54\nassert surface_area5(3) == 54\nassert surface_area6(3) == 54\nassert surface_area7(3) == 54\nassert surface_area8(3) == 54\nassert surface_area9(3) == 54\nassert surface_area10(3) == 54"
    },
    {
      "rank": 29,
      "score": 9.66576573028964,
      "candidate": "def get_lateral_surface_area(length):\n    return 6 * (length ** 2)\n\n\"\"\"\nWrite a function to find the volume of a cube.\n\"\"\"\n\ndef get_volume(length):\n    return (length ** 3)\n\n\"\"\"\nWrite a function to find the surface area of a sphere.\n\"\"\"\n\ndef get_surface_area(radius):\n    return (4 * (radius ** 2)) * (4 * (radius ** 2)) * (4 * (radius ** 2))\n\n\"\"\"\nWrite a function to find the volume of a sphere.\n\"\"\"\n\ndef get_sphere_volume(radius):\n    return (4 / 3) * (radius ** 3)\n\n\"\"\"\nWrite a function to find the surface area of a hemisphere.\n\"\"\"\n\ndef get_hemisphere_surface_area(radius):\n    return get_surface_area(radius) * (0.5)\n\n\"\"\"\nWrite a function to find the volume of a hemisphere.\n\"\"\"\n\ndef get_hemisphere_volume(radius):\n    return get_sphere_volume(radius) * (0.5)\n\n\"\"\"\nWrite a function to find the volume of a cone.\n\"\"\"\n\ndef get_cone_volume(radius, height):\n    return (1 / 3) * (height * (radius ** 2)) * (radius)\n\n\"\"\"\nWrite a function to find the lateral surface area of a cone.\n\"\"\"\n\ndef get_cone_lateral_surface_area(radius, height):\n    return get_surface_area(radius) * (2)\n\n\"\"\"\nWrite a function to find the volume of a cylinder.\n\"\"\"\n\ndef get_cylinder_volume(radius, height):\n    return get_sphere_volume(radius) * (2)\n\n\"\"\"\nWrite a function to find the lateral surface area of a cylinder.\n\"\"\"\n\ndef get_cylinder_lateral_surface_area(radius, height):\n    return get_sphere_volume(radius) * (2)"
    },
    {
      "rank": 30,
      "score": 9.605251814053378,
      "candidate": "from math import sqrt\n\ndef lateral_surface_area(x):\n    return 6*(x**2)\n\n\"\"\"\nWrite a function to find the volume of a cube.\n\"\"\"\n\ndef cube_volume(x):\n    return (x**3)\n\n\"\"\"\nWrite a function to find the surface area of a cube.\n\"\"\"\n\ndef cube_surface_area(x):\n    return (6*x**2)\n\n\"\"\"\nWrite a function to find the volume of a sphere.\n\"\"\"\n\ndef sphere_volume(r):\n    return (4/3)*3.14159*(r**3)\n\n\"\"\"\nWrite a function to find the surface area of a sphere.\n\"\"\"\n\ndef sphere_surface_area(r):\n    return 4*3.14159*(r**2)\n\n\"\"\"\nWrite a function to find the volume of a cone.\n\"\"\"\n\ndef cone_volume(r,h):\n    return 1/3*3.14159*(r**2)*h\n\n\"\"\"\nWrite a function to find the surface area of a cone.\n\"\"\"\n\ndef cone_surface_area(r,h):\n    return 3.14159*r*(r+sqrt((h**2)+(r**2)))\n\n\"\"\"\nWrite a function to find the volume of a cylinder.\n\"\"\"\n\ndef cylinder_volume(r,h):\n    return 3.14159*(r**2)*h\n\n\"\"\"\nWrite a function to find the surface area of a cylinder.\n\"\"\"\n\ndef cylinder_surface_area(r,h):\n    return 2*3.14159*r*(r+h)"
    },
    {
      "rank": 31,
      "score": 9.533939778559354,
      "candidate": "def lateral_surface_area(length):\n    return 6 * length ** 2\n\n\ndef main():\n    length = int(input(\"Enter the length of the cube: \"))\n    print(f\"Lateral surface area: {lateral_surface_area(length)}\")\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 32,
      "score": 9.430777115270699,
      "candidate": "def surface_area(size):\n    return 6*(size**2)"
    },
    {
      "rank": 33,
      "score": 9.353308859119673,
      "candidate": "from math import sqrt\n\ndef area_cube(length):\n    return 6 * (length ** 2)\n\ndef lateral_surface_area_cube(length):\n    return 5 * (length ** 2)\n\ndef surface_area_cube(length):\n    return 6 * (length ** 2) + 10 * (length)\n\ndef diagonal_cube(length):\n    return sqrt(3 * length ** 2)\n\ndef main():\n    length = 1\n    print(area_cube(length))\n    print(lateral_surface_area_cube(length))\n    print(surface_area_cube(length))\n    print(diagonal_cube(length))\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 34,
      "score": 9.18535571824802,
      "candidate": "def lateral_surface_area(length):\n    return (length ** 2) * 6\n\n\"\"\"\nWrite a function to find the volume of a cube.\n\"\"\"\n\ndef volume(length):\n    return (length ** 3)\n\n\"\"\"\nWrite a function to find the surface area of a cube.\n\"\"\"\n\ndef surface_area(length):\n    return 6 * length ** 2\n\n\"\"\"\nWrite a function to find the diagonal length of a cube.\n\"\"\"\n\ndef diagonal_length(length):\n    return (length ** (1/2)) * 2\n\n\"\"\"\nWrite a function to find the surface area of a rectangular prism.\n\"\"\"\n\ndef rectangular_prism_surface_area(length, width, height):\n    return 2 * (length * width + width * height + length * height)\n\n\"\"\"\nWrite a function to find the volume of a rectangular prism.\n\"\"\"\n\ndef rectangular_prism_volume(length, width, height):\n    return length * width * height\n\n\"\"\"\nWrite a function to find the surface area of a sphere.\n\"\"\"\n\ndef sphere_surface_area(radius):\n    return 4 * (radius ** 2) * 3.14159\n\n\"\"\"\nWrite a function to find the volume of a sphere.\n\"\"\"\n\ndef sphere_volume(radius):\n    return (4/3) * 3.14159 * (radius ** 3)\n\n\"\"\"\nWrite a function to find the circumference of a circle.\n\"\"\"\n\ndef circumference(radius):\n    return 2 * (radius * 3.14159)\n\n\"\"\"\nWrite a function to find the area of a circle.\n\"\"\"\n\ndef area(radius):\n    return 3.14159 * (radius ** 2)\n\n\"\"\"\nWrite a function to find the surface area of a cylinder.\n\"\"\"\n\ndef cylinder_surface_area(radius, height):\n    return (2 * 3.14159 * (radius ** 2)) + (2 * radius * height)"
    },
    {
      "rank": 35,
      "score": 9.070301906770048,
      "candidate": "def lateral_surface_area(side_length):\n    return 6 * side_length ** 2\n\nprint(lateral_surface_area(2))\nprint(lateral_surface_area(3))\nprint(lateral_surface_area(4))"
    },
    {
      "rank": 36,
      "score": 9.053656387007655,
      "candidate": "def cube_surface_area(length: int) -> float:\n    \"\"\"Finds the lateral surface area of a cube.\n\n    Args:\n        length: the length of the cube.\n\n    Examples:\n        >>> assert cube_surface_area(2) == 54\n    \"\"\"\n    return 6 * length ** 2\n\n\nif __name__ == \"__main__\":\n    print(cube_surface_area(2))"
    },
    {
      "rank": 37,
      "score": 8.867293334932011,
      "candidate": "def surface_area(length):\n    return 6 * length ** 2\n\n\nif __name__ == '__main__':\n    print(surface_area(10))"
    },
    {
      "rank": 38,
      "score": 8.856844253442825,
      "candidate": "from math import sqrt\n\n\ndef cube_surface_area(size):\n    return 6 * (size ** 2)\n\n\ndef cube_lateral_surface_area(size):\n    return 5 * (size ** 2)\n\n\ndef main():\n    size = int(input(\"Enter the size of the cube: \"))\n    print(\"The lateral surface area of the cube is: \" + str(cube_lateral_surface_area(size)))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 39,
      "score": 8.816956492090924,
      "candidate": "def lateral_surface_area(length):\n    return 6 * length * length"
    },
    {
      "rank": 40,
      "score": 8.77346240928572,
      "candidate": "def get_lateral_surface_area(side):\n    return 6 * side * side"
    },
    {
      "rank": 41,
      "score": 8.769454773402124,
      "candidate": "def surface_area(length):\n    return 6*(length**2)\n\n\ndef surface_area_efficient(length):\n    return length * length * 6"
    },
    {
      "rank": 42,
      "score": 8.594723651782713,
      "candidate": "def surface_area(length: int) -> int:\n    return 6 * length ** 2\n\n\nif __name__ == \"__main__\":\n    print(surface_area(2))"
    },
    {
      "rank": 43,
      "score": 8.589098854463499,
      "candidate": "import math\n\ndef lateral_area(length):\n    return 6 * length * math.sqrt(length ** 2)\n\nprint(lateral_area(3))"
    },
    {
      "rank": 44,
      "score": 8.58900268664781,
      "candidate": "def surface_area(length):\n    return 6*length*length\n\ndef lateral_surface_area(length):\n    return surface_area(length)\n\ndef volume(length):\n    return length*length*length\n\ndef test_cube():\n\n    assert lateral_surface_area(2) == 12\n    assert lateral_surface_area(1) == 6\n\nif __name__ == '__main__':\n    test_cube()"
    },
    {
      "rank": 45,
      "score": 8.58189176027183,
      "candidate": "def surface_area(length):\n    return 6 * (length ** 2)"
    },
    {
      "rank": 46,
      "score": 8.57694981700587,
      "candidate": "def surface_area(length):\n    return 6 * length ** 2\n\n\nif __name__ == '__main__':\n    print(surface_area(3))"
    },
    {
      "rank": 47,
      "score": 8.570143377482554,
      "candidate": "def lateral_surface_area(side_length: int) -> int:\n    \"\"\"\n    >>> lateral_surface_area(4)\n    52\n    \"\"\"\n    return 6 * side_length ** 2\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 48,
      "score": 8.548866553316401,
      "candidate": "def surface_area(length):\n    return 6 * length * length\n\n\nif __name__ == '__main__':\n    length = float(input(\"Enter the length of the cube: \"))\n    print(\"The lateral surface area of the cube is: \", surface_area(length))"
    },
    {
      "rank": 49,
      "score": 8.48881348032839,
      "candidate": "def cube_surface_area(length):\n    return 6 * length**2"
    },
    {
      "rank": 50,
      "score": 8.481148755058646,
      "candidate": "from math import sqrt\n\ndef get_lateral_area(size):\n    \"\"\"Get the lateral area of a cube.\"\"\"\n    return 6 * size ** 2\n\ndef get_surface_area(size):\n    \"\"\"Get the surface area of a cube.\"\"\"\n    return 4 * size ** 2\n\ndef get_volume(size):\n    \"\"\"Get the volume of a cube.\"\"\"\n    return size ** 3\n\ndef main():\n    \"\"\"Print the lateral area and volume of a cube of size 1.\"\"\"\n    print(\"The lateral area of a cube of size 1 is \" + str(get_lateral_area(1)))\n    print(\"The surface area of a cube of size 1 is \" + str(get_surface_area(1)))\n    print(\"The volume of a cube of size 1 is \" + str(get_volume(1)))\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 51,
      "score": 8.479263271739713,
      "candidate": "def lateral_surface_area(length):\n    return 6 * length * length\n\n\ndef main():\n    length = int(input(\"Enter length of the cube: \"))\n    print(\"Lateral surface area of the cube is: {}\".format(lateral_surface_area(length)))\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 52,
      "score": 8.430114028800464,
      "candidate": "def lateral_surface_area(length: float) -> float:\n    return 6 * length ** 2\n\n\nif __name__ == \"__main__\":\n    print(lateral_surface_area(2))"
    },
    {
      "rank": 53,
      "score": 8.398185131489148,
      "candidate": "def find_area(length):\n    \"\"\"\n    Find the lateral surface area of a cube.\n    \"\"\"\n    return 6 * length * length"
    },
    {
      "rank": 54,
      "score": 8.32400296620873,
      "candidate": "from math import pow\n\ndef lateral_area(side_length):\n    return 6 * pow(side_length, 2)\n\ndef main():\n    print(\"The lateral area of a cube is: \" + str(lateral_area(2)))\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 55,
      "score": 8.26018893606053,
      "candidate": "def lateral_surface_area(side_length: int):\n    \"\"\"\n    >>> lateral_surface_area(4)\n    64\n    \"\"\"\n    return 6 * side_length ** 2\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 56,
      "score": 8.258152543016342,
      "candidate": "import math\n\ndef surface_area(length):\n    return 6 * length * math.sqrt(length**2)\n\nif __name__ == '__main__':\n    length = float(input('Enter the length of the cube: '))\n    print('Lateral surface area: ', surface_area(length))"
    },
    {
      "rank": 57,
      "score": 8.232540362937629,
      "candidate": "def lateral_surface_area(n):\n    return 6*(n**2)\n\n\nif __name__ == '__main__':\n    print(lateral_surface_area(3))"
    },
    {
      "rank": 58,
      "score": 8.226691354634372,
      "candidate": "from math import sqrt\n\n\ndef lateral_surface_area(edges):\n    \"\"\"\n    Return the lateral surface area of a cube.\n    \"\"\"\n    return 6 * sqrt(edges ** 2)"
    },
    {
      "rank": 59,
      "score": 8.204188968476922,
      "candidate": "def lateral_surface_area(length: float) -> float:\n    \"\"\"Calculates the lateral surface area of a cube.\"\"\"\n    return 6 * length ** 2\n\ndef main():\n    \"\"\"Main function call to exercise solution.\"\"\"\n    print(lateral_surface_area(10))\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 60,
      "score": 8.203761799552685,
      "candidate": "def get_lateral_surface_area(size):\n    return 6 * size * size\n\n\nif __name__ == '__main__':\n    size = int(input())\n    s = get_lateral_surface_area(size)\n    print(s)"
    },
    {
      "rank": 61,
      "score": 8.173675644322062,
      "candidate": "def surface_area(n):\n    return 6*(n**2)\n\n\ndef surface_area2(n):\n    return (n*n*6)\n\n\nif __name__ == '__main__':\n    print(surface_area(2))\n    print(surface_area2(2))"
    },
    {
      "rank": 62,
      "score": 8.163623206893504,
      "candidate": "def surface_area(length):\n    return 6*(length**2)\n\nassert surface_area(2) == 56, \"Function should return 56\"\nassert surface_area(1) == 14, \"Function should return 14\"\nassert surface_area(3) == 108, \"Function should return 108\""
    },
    {
      "rank": 63,
      "score": 8.10875743515539,
      "candidate": "def surface_area(n):\n    return 6 * n ** 2\n\n\nif __name__ == '__main__':\n    print(surface_area(10))"
    },
    {
      "rank": 64,
      "score": 8.08123481423596,
      "candidate": "def surface_area(length):\n    return 6 * length ** 2\n\n\ndef main():\n    length = float(input(\"Enter length: \"))\n    print(\"Lateral surface area:\", surface_area(length))\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 65,
      "score": 8.021360072862084,
      "candidate": "def surface_area(length):\n    \"\"\"\n    >>> surface_area(1)\n    6\n    >>> surface_area(5)\n    225\n    \"\"\"\n    return 6 * (length ** 2)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 66,
      "score": 7.984047013475523,
      "candidate": "import math\n\ndef lateralSurfaceArea(side):\n    return 6 * side * math.sqrt(side)\n\nprint(lateralSurfaceArea(4))"
    },
    {
      "rank": 67,
      "score": 7.956106984456036,
      "candidate": "__author__ = 'Nicola Moretto'\n\ndef cubeSurface(n):\n    '''\n    Computes the lateral surface area of a cube\n    :param n: Integer, length of the cube's side\n    :return: Lateral surface area of the cube\n    '''\n    return 6*n*n"
    },
    {
      "rank": 68,
      "score": 7.874545169959062,
      "candidate": "from math import sqrt\n\n\ndef surface_area(side_length):\n    return 6 * side_length * sqrt(side_length)"
    },
    {
      "rank": 69,
      "score": 7.859038465191597,
      "candidate": "def area(length):\n    return 6*(length**2)\n\nprint(area(1))\nprint(area(2))\nprint(area(3))"
    },
    {
      "rank": 70,
      "score": 7.853035648297474,
      "candidate": "import math\n\ndef surface_area(length):\n    return 6 * length ** 2\n\nif __name__ == '__main__':\n    # Use the example input\n    l = 1\n    print(surface_area(l))"
    },
    {
      "rank": 71,
      "score": 7.739228382299351,
      "candidate": "__author__ = 'Nikola Tavella'\n\nimport math\n\n\ndef area_of_cube(length):\n    \"\"\"\n    Returns the lateral surface area of a cube.\n\n    :param length: The length of a side of the cube.\n    :return: The lateral surface area of a cube.\n    \"\"\"\n    return 6 * length * length\n\n\ndef area_of_sphere(radius):\n    \"\"\"\n    Returns the lateral surface area of a sphere.\n\n    :param radius: The radius of a sphere.\n    :return: The lateral surface area of a sphere.\n    \"\"\"\n    return 4 * math.pi * radius * radius\n\n\ndef area_of_cylinder(radius, height):\n    \"\"\"\n    Returns the lateral surface area of a cylinder.\n\n    :param radius: The radius of a cylinder.\n    :param height: The height of a cylinder.\n    :return: The lateral surface area of a cylinder.\n    \"\"\"\n    return 2 * math.pi * radius * (radius + height)\n\n\ndef main():\n    print(area_of_cube(10))\n    print(area_of_sphere(10))\n    print(area_of_cylinder(10, 20))\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 72,
      "score": 7.6791323465813255,
      "candidate": "def cube_lateral_surface_area(side_length):\n    return 6 * side_length ** 2\n\ndef surface_area(side_length):\n    return (6 * side_length ** 2) + (12 * side_length)\n\nprint(cube_lateral_surface_area(2))"
    },
    {
      "rank": 73,
      "score": 7.396546402808546,
      "candidate": "from math import sqrt\n\n\ndef lateral_surface_area(length):\n    return 6 * length * sqrt(length ** 2)\n\n\nif __name__ == '__main__':\n    print(lateral_surface_area(5))"
    },
    {
      "rank": 74,
      "score": 3.4152698729458115,
      "candidate": "def lateral_surface_area(side_length):\n    return 6 * side_length ** 2\n\n\"\"\"\nWrite a function to find the volume of a cube.\n\"\"\"\n\ndef volume(side_length):\n    return side_length ** 3\n\n\"\"\"\nWrite a function to find the diagonal of a cube.\n\"\"\"\n\ndef cube_diagonal(side_length):\n    return side_length * (side_length ** 0.5) * 2\n\n\"\"\"\nWrite a function to find the surface area of a sphere.\n\"\"\"\n\ndef surface_area(radius):\n    return 4 * radius ** 2 * (2 * 3.141592653589793)\n\n\"\"\"\nWrite a function to find the volume of a sphere.\n\"\"\"\n\ndef volume_sphere(radius):\n    return 4/3 * 3.141592653589793 * radius ** 3\n\n\"\"\"\nWrite a function to find the circumference of a circle.\n\"\"\"\n\ndef circumference(radius):\n    return 2 * 3.141592653589793 * radius\n\n\"\"\"\nWrite a function to find the area of a circle.\n\"\"\"\n\ndef area_circle(radius):\n    return 3.141592653589793 * radius ** 2\n\n\"\"\"\nWrite a function to find the volume of a cylinder.\n\"\"\"\n\ndef volume_cylinder(radius, height):\n    return 3.141592653589793 * radius ** 2 * height\n\n\"\"\"\nWrite a function to find the lateral surface area of a cylinder.\n\"\"\"\n\ndef lateral_surface_area_cylinder(radius, height):\n    return 2 * 3.141592653589793 * radius * height\n\n\"\"\"\nWrite a function to find the volume of a cone.\n\"\"\"\n\ndef volume_cone(radius, height):\n    return 1"
    },
    {
      "rank": 75,
      "score": 3.39572516760882,
      "candidate": "def get_lateral_area(length):\n    return 6 * length * length\n\n\ndef get_volume(length):\n    return length ** 3\n\n\ndef get_cube_area(length):\n    return get_lateral_area(length) * 3 + get_volume(length)\n\n\ndef test_function():\n    assert get_lateral_area(2) == 12\n    assert get_lateral_area(1) == 6\n    assert get_volume(2) == 8\n    assert get_volume(1) == 1\n    assert get_cube_area(2) == 52\n    assert get_cube_area(1) == 20\n    assert get_cube_area(3) == 78\n    assert get_cube_area(4) == 208\n    assert get_cube_area(5) == 348\n    assert get_cube_area(6) == 540\n    assert get_cube_area(7) == 772\n    assert get_cube_area(8) == 1144\n    assert get_cube_area(9) == 1548\n    assert get_cube_area(10) == 2000\n    assert get_cube_area(11) == 2504\n    assert get_cube_area(12) == 3048\n    assert get_cube_area(13) == 3628\n    assert get_cube_area(14) == 4252\n    assert get_cube_area(15) == 4924\n    assert get_cube_area(16) == 5632\n    assert get_cube_area(17) == 6380\n    assert get_cube_area(18) == 7180\n    assert get_cube_area(19) == 7952\n    assert get_cube_area(20) == 8808\n    assert get_cube_area(2"
    },
    {
      "rank": 76,
      "score": 3.3661848077141223,
      "candidate": "def lateralSurfaceArea(length: int) -> float:\n    return 6 * length ** 2\n\n\"\"\"\nWrite a function to find the volume of a cube.\n\"\"\"\n\ndef volume(length: int) -> float:\n    return length ** 3\n\n\"\"\"\nWrite a function to find the diagonal of a cube.\n\"\"\"\n\ndef cubeDiagonal(length: int) -> float:\n    return length * (3 ** 0.5)\n\n\"\"\"\nWrite a function to find the total surface area of a cube.\n\"\"\"\n\ndef totalSurfaceArea(length: int) -> float:\n    return 6 * (length ** 2) * (3 ** 0.5)\n\n\"\"\"\nWrite a function to find the volume of a sphere.\n\"\"\"\n\ndef sphereVolume(radius: int) -> float:\n    return (4 / 3) * (radius ** 3) * (3 ** 0.5)\n\n\"\"\"\nWrite a function to find the lateral surface area of a sphere.\n\"\"\"\n\ndef sphereLateralSurfaceArea(radius: int) -> float:\n    return 4 * (radius ** 2) * (3 ** 0.5)\n\n\"\"\"\nWrite a function to find the surface area of a hemisphere.\n\"\"\"\n\ndef hemisphereSurfaceArea(radius: int) -> float:\n    return 2 * (radius ** 2) * (3 ** 0.5)\n\n\"\"\"\nWrite a function to find the total surface area of a hemisphere.\n\"\"\"\n\ndef hemisphereTotalSurfaceArea(radius: int) -> float:\n    return 3 * (radius ** 2) * (3 ** 0.5)\n\n\"\"\"\nWrite a function to find the volume of a hemisphere.\n\"\"\"\n\ndef hemisphereVolume(radius: int) -> float:\n    return (2 / 3) * (radius ** 3) * (3 ** 0.5)\n\n\"\"\"\nWrite a function to find the volume of a cone.\n\"\"\"\n\ndef coneVolume(radius: int, height: int) -> float:\n    return (1 / 3"
    },
    {
      "rank": 77,
      "score": 3.263397184323037,
      "candidate": "def lateral_surface_area(length: int) -> int:\n    return 6 * length ** 2\n\ndef main():\n    # These \"asserts\" using only for self-checking and not necessary for auto-testing\n    assert lateral_surface_area(1) == 6, \"1\"\n    assert lateral_surface_area(2) == 36, \"2\"\n    assert lateral_surface_area(3) == 72, \"3\"\n    print(\"Coding complete? Click 'Check' to review your tests and earn cool rewards!\")\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 78,
      "score": 3.2219136761813103,
      "candidate": "def lateral_surface_area(side: int) -> int:\n    \"\"\"Calculates the lateral surface area of a cube.\n\n    Args:\n        side (int): the length of a side of the cube\n\n    Examples:\n        >>> assert lateral_surface_area(1) == 6\n        >>> assert lateral_surface_area(2) == 24\n    \"\"\"\n    return 6 * side ** 2\n\n\nif __name__ == \"__main__\":\n    print(lateral_surface_area(1))"
    },
    {
      "rank": 79,
      "score": 3.207207376871285,
      "candidate": "def surface_area(length):\n    \"\"\"\n    >>> surface_area(1)\n    6\n    >>> surface_area(2)\n    24\n    \"\"\"\n    return 6 * length ** 2\n\ndef surface_area_alt(length):\n    return 6 * length ** 2\n\ndef surface_area_alt2(length):\n    return 6 * length ** 2\n\n\"\"\"\nWrite a function to find the lateral surface area of a cube.\n\"\"\"\n\ndef surface_area(length):\n    \"\"\"\n    >>> surface_area(1)\n    6\n    >>> surface_area(2)\n    24\n    \"\"\"\n    return 6 * length ** 2\n\ndef surface_area_alt(length):\n    return 6 * length ** 2\n\ndef surface_area_alt2(length):\n    return 6 * length ** 2\n\n\"\"\"\nWrite a function to find the lateral surface area of a cube.\n\"\"\"\n\ndef surface_area(length):\n    \"\"\"\n    >>> surface_area(1)\n    6\n    >>> surface_area(2)\n    24\n    \"\"\"\n    return 6 * length ** 2\n\ndef surface_area_alt(length):\n    return 6 * length ** 2\n\ndef surface_area_alt2(length):\n    return 6 * length ** 2"
    },
    {
      "rank": 80,
      "score": 3.174875905287187,
      "candidate": "def lateral_area(side):\n    return side * side * 2\n\n\ndef surface_area(side):\n    return side * side * 6\n\n\nif __name__ == '__main__':\n    print(lateral_area(2))\n    print(lateral_area(4))\n    print(surface_area(2))\n    print(surface_area(4))"
    },
    {
      "rank": 81,
      "score": 3.1651525979870345,
      "candidate": "def surface_area(x):\n    return 6*x*x\n\nassert surface_area(1) == 6\nassert surface_area(2) == 36"
    },
    {
      "rank": 82,
      "score": 3.1464912117682107,
      "candidate": "def surface_area(length: int) -> int:\n    \"\"\"Return lateral surface area of cube.\"\"\"\n    return 6 * length ** 2\n\n\nif __name__ == \"__main__\":\n    print(surface_area(1))\n    print(surface_area(2))\n    print(surface_area(3))\n    print(surface_area(10))"
    },
    {
      "rank": 83,
      "score": 3.1341128213130327,
      "candidate": "def lateral_surface_area(cube):\n    return 6 * cube ** 2\n\n\nif __name__ == '__main__':\n    print(lateral_surface_area(10))"
    },
    {
      "rank": 84,
      "score": 3.0875026717365945,
      "candidate": "def lateral_surface_area(length):\n    return 6 * length ** 2\n\n\"\"\"\nWrite a function to find the volume of a cube.\n\"\"\"\n\ndef volume(length):\n    return length ** 3\n\n\"\"\"\nWrite a function to find the surface area of a sphere.\n\"\"\"\n\ndef surface_area(radius):\n    return 4 * 3.14 * radius ** 2\n\n\"\"\"\nWrite a function to find the volume of a sphere.\n\"\"\"\n\ndef volume_sphere(radius):\n    return 4 / 3 * 3.14 * radius ** 3\n\n\"\"\"\nWrite a function to find the surface area of a hemisphere.\n\"\"\"\n\ndef surface_area_hemisphere(radius):\n    return 2 * 3.14 * radius ** 2\n\n\"\"\"\nWrite a function to find the volume of a hemisphere.\n\"\"\"\n\ndef volume_hemisphere(radius):\n    return 2 / 3 * 3.14 * radius ** 3\n\n\"\"\"\nWrite a function to find the surface area of a cylinder.\n\"\"\"\n\ndef surface_area_cylinder(radius, height):\n    return 2 * 3.14 * radius * (radius + height)\n\n\"\"\"\nWrite a function to find the volume of a cylinder.\n\"\"\"\n\ndef volume_cylinder(radius, height):\n    return 3.14 * radius ** 2 * height\n\n\"\"\"\nWrite a function to find the surface area of a cone.\n\"\"\"\n\ndef surface_area_cone(radius, height):\n    return 3.14 * radius * (radius + (height ** 2) ** 0.5)\n\n\"\"\"\nWrite a function to find the volume of a cone.\n\"\"\"\n\ndef volume_cone(radius, height):\n    return 3.14 * radius ** 2 * (height / 3)\n\n\"\"\"\nWrite a function to find the surface area of a torus.\n\"\"\"\n\ndef surface_area_torus(small_radius, big_radius):\n    return 4 * 3."
    },
    {
      "rank": 85,
      "score": 3.0799524748074356,
      "candidate": "import math\n\n\ndef get_lateral_surface_area(side_length):\n    return 6 * side_length ** 2\n\n\n# Pybites solution\n\n\ndef get_lateral_surface_area1(side_length):\n    return 2 * (side_length ** 2)"
    },
    {
      "rank": 86,
      "score": 3.056393170651284,
      "candidate": "from typing import Union\n\n\ndef surface_area(length: Union[int, float]) -> float:\n    \"\"\"Return the lateral surface area of a cube.\n\n    :param length: Length of a side of the cube.\n    :return: The lateral surface area of a cube.\n    \"\"\"\n    return 6 * length ** 2"
    },
    {
      "rank": 87,
      "score": 3.046269435921292,
      "candidate": "def surface_area(x):\n    return 6 * x * x\n\n\ndef surface_area2(x):\n    return 4 * x * x\n\n\nprint(surface_area(1))\nprint(surface_area2(1))"
    },
    {
      "rank": 88,
      "score": 3.0182326152657395,
      "candidate": "def lateral_surface_area(length: int) -> int:\n    \"\"\"Lateral surface area of a cube.\n\n    Args:\n        length: Length of a side of the cube.\n\n    Examples:\n        >>> assert lateral_surface_area(3) == 54\n    \"\"\"\n    return length ** 2 * 3"
    },
    {
      "rank": 89,
      "score": 2.96266863868378,
      "candidate": "def cube_surface_area(length):\n    return (6 * length ** 2)\n\n\nprint(cube_surface_area(10))\n\n\ndef cube_volume(length):\n    return length ** 3\n\n\nprint(cube_volume(10))"
    },
    {
      "rank": 90,
      "score": 2.9406885902838718,
      "candidate": "def lateral_surface_area(size: int) -> float:\n    \"\"\"Returns lateral surface area of a cube.\n\n    Args:\n        size (int): Size of the cube.\n\n    Examples:\n        >>> assert lateral_surface_area(1) == 6\n    \"\"\"\n    return size * size * 6\n\n\nif __name__ == \"__main__\":\n    print(lateral_surface_area(1))"
    },
    {
      "rank": 91,
      "score": 2.936783021623721,
      "candidate": "from typing import Tuple\n\n\ndef get_cube_lateral_surface_area(length: float) -> float:\n    \"\"\"Get the lateral surface area of a cube.\n\n    Args:\n        length (float): The length of the cube.\n\n    Returns:\n        float: The lateral surface area of a cube.\n    \"\"\"\n    return 6 * length ** 2\n\n\ndef main():\n    \"\"\"Print the lateral surface area of a cube.\"\"\"\n    length = float(input('Enter the length of the cube: '))\n    print(f'The lateral surface area of a cube is {get_cube_lateral_surface_area(length):.2f}')\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 92,
      "score": 2.936778588824699,
      "candidate": "def area(length):\n    return 6*length*length\n\n\"\"\"\nWrite a function to find the lateral surface area of a cube.\n\"\"\""
    },
    {
      "rank": 93,
      "score": 2.9115312204186026,
      "candidate": "def lateral_surface_area(volume):\n    return 6 * volume ** 0.5\n\nprint(lateral_surface_area(100)) # 36\nprint(lateral_surface_area(1000)) # 108\nprint(lateral_surface_area(2000)) # 156\nprint(lateral_surface_area(5000)) # 272"
    },
    {
      "rank": 94,
      "score": 2.8960277842875946,
      "candidate": "def get_lateral_surface_area(volume):\n    return volume ** (1 / 3)\n\n\n# \t   \u250c\u2500\u2500\u2500\u2510\n#\t   \u2502   \u2502\n#\t   \u251c\u2500\u2500\u2500\u2524\n#\t   \u2502   \u2502\n#\t   \u2514\u2500\u2500\u2500\u2518\ndef test_get_lateral_surface_area():\n    assert get_lateral_surface_area(1) == 6\n    assert get_lateral_surface_area(2) == 12\n    assert get_lateral_surface_area(3) == 18\n    assert get_lateral_surface_area(4) == 24\n    assert get_lateral_surface_area(5) == 30\n    assert get_lateral_surface_area(6) == 36\n    assert get_lateral_surface_area(7) == 42\n    assert get_lateral_surface_area(8) == 48\n    assert get_lateral_surface_area(9) == 54"
    },
    {
      "rank": 95,
      "score": 2.8941307986543174,
      "candidate": "from typing import Union\n\n\ndef lateral_surface_area(length: Union[int, float]) -> float:\n    \"\"\"Returns lateral surface area of a cube.\n\n    Args:\n        length (Union[int, float]): length of the cube.\n\n    Returns:\n        float: lateral surface area of a cube.\n    \"\"\"\n    return 6 * length ** 2\n\n\nif __name__ == \"__main__\":\n    print(lateral_surface_area(10))"
    },
    {
      "rank": 96,
      "score": 2.8748772229406354,
      "candidate": "from math import sqrt\n\n\ndef lateral_surface_area(side_length):\n    return 6 * side_length ** 2\n\n\ndef lateral_surface_area_optimized(side_length):\n    return 6 * side_length ** 2\n\n\ndef lateral_surface_area_optimized_2(side_length):\n    return 6 * side_length ** 2\n\n\ndef test_lateral_surface_area():\n    assert lateral_surface_area(1) == 6\n    assert lateral_surface_area(2) == 36\n    assert lateral_surface_area(3) == 84\n    assert lateral_surface_area(5) == 225\n    assert lateral_surface_area(10) == 500\n\n\ndef test_lateral_surface_area_optimized():\n    assert lateral_surface_area_optimized(1) == 6\n    assert lateral_surface_area_optimized(2) == 36\n    assert lateral_surface_area_optimized(3) == 84\n    assert lateral_surface_area_optimized(5) == 225\n    assert lateral_surface_area_optimized(10) == 500\n\n\ndef test_lateral_surface_area_optimized_2():\n    assert lateral_surface_area_optimized_2(1) == 6\n    assert lateral_surface_area_optimized_2(2) == 36\n    assert lateral_surface_area_optimized_2(3) == 84\n    assert lateral_surface_area_optimized_2(5) == 225\n    assert lateral_surface_area_optimized_2(10) == 500"
    },
    {
      "rank": 97,
      "score": 2.781706727218839,
      "candidate": "from math import sqrt\n\ndef lateral_surface_area(x):\n    return 6 * (x ** 2)\n\n\ndef surface_area(x):\n    return 2 * sqrt(3) * x ** 2\n\n\ndef volume(x):\n    return x ** 3\n\n\ndef cube(x):\n    return x * 6\n\n\ndef main():\n    print(lateral_surface_area(1))\n    print(lateral_surface_area(2))\n    print(lateral_surface_area(3))\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 98,
      "score": 2.7012895570183724,
      "candidate": "def surface_area(length):\n    return 6*(length**2)\n\n\"\"\"\nWrite a function to find the lateral surface area of a sphere.\n\"\"\"\n\nfrom math import pi\n\ndef surface_area_sphere(radius):\n    return 4 * pi * (radius**2)\n\n\"\"\"\nWrite a function to find the lateral surface area of a cone.\n\"\"\"\n\nfrom math import pi\n\ndef surface_area_cone(radius, height):\n    return pi * radius * (radius + height)\n\n\"\"\"\nWrite a function to find the lateral surface area of a cylinder.\n\"\"\"\n\nfrom math import pi\n\ndef surface_area_cylinder(radius, height):\n    return 2 * pi * radius * height"
    },
    {
      "rank": 99,
      "score": 2.641389766797424,
      "candidate": "def lateral_surface_area(side_length: float) -> float:\n    \"\"\"Return the lateral surface area of a cube.\n\n    Args:\n        side_length (float): The side length of the cube.\n\n    Returns:\n        float: The lateral surface area of the cube.\n    \"\"\"\n    return 6 * side_length ** 2\n\n\nif __name__ == '__main__':\n    print(lateral_surface_area(2))"
    },
    {
      "rank": 100,
      "score": 2.463356393057759,
      "candidate": "from typing import Union\n\n\ndef surface_area(width: Union[int, float]) -> Union[int, float]:\n    \"\"\"Return the lateral surface area of a cube.\n\n    :param width: width of cube.\n    :return: the lateral surface area of the cube.\n    \"\"\"\n    return 6 * width ** 2"
    }
  ]
}