{
  "timestamp": "2025-09-15T01:29:25.363030",
  "method": "improved_llm_judge",
  "judge_model": "codellama/CodeLlama-7b-Python-hf",
  "target_model": "codellama-7b",
  "dataset": "mbpp",
  "problem_number": 420,
  "total_candidates": 100,
  "results": [
    {
      "rank": 1,
      "score": 10.0,
      "candidate": "def lists_intersection(lst1, lst2):\n    return not set(lst1).isdisjoint(lst2)"
    },
    {
      "rank": 2,
      "score": 10.0,
      "candidate": "def common_element(list1, list2):\n    \"\"\"\n    >>> common_element([1, 2, 3, 4], [5, 6, 7, 8])\n    False\n    >>> common_element([1, 2, 3, 4], [2, 3, 4, 5])\n    True\n    \"\"\"\n    for i in list1:\n        if i in list2:\n            return True\n    return False\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 3,
      "score": 10.0,
      "candidate": "def common_element(list_1, list_2):\n    \"\"\"\n    >>> common_element([1, 2, 3, 4], [2, 3, 4, 5])\n    True\n    >>> common_element([1, 2, 3, 4], [5, 6, 7, 8])\n    False\n    \"\"\"\n    for i in list_1:\n        for j in list_2:\n            if i == j:\n                return True\n    return False\n\n\ndef common_element_2(list_1, list_2):\n    \"\"\"\n    >>> common_element_2([1, 2, 3, 4], [2, 3, 4, 5])\n    True\n    >>> common_element_2([1, 2, 3, 4], [5, 6, 7, 8])\n    False\n    \"\"\"\n    return any(i in list_2 for i in list_1)\n\n\ndef common_element_3(list_1, list_2):\n    \"\"\"\n    >>> common_element_3([1, 2, 3, 4], [2, 3, 4, 5])\n    True\n    >>> common_element_3([1, 2, 3, 4], [5, 6, 7, 8])\n    False\n    \"\"\"\n    return set(list_1) & set(list_2)\n\n\ndef common_element_4(list_1, list_2):\n    \"\"\"\n    >>> common_element_4([1, 2, 3, 4], [2, 3, 4, 5])\n    True\n    >>> common_element_4([1, 2, 3, 4], [5, 6, 7, 8])\n    False\n    \"\"\"\n    return len(set(list_1) & set(list_2)) > 0\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 4,
      "score": 10.0,
      "candidate": "from typing import List\n\n\ndef common_element(first: List, second: List) -> bool:\n    \"\"\"Returns true if the two lists have at least one common element.\n\n    >>> common_element([1, 2, 3], [4, 5, 6])\n    False\n    >>> common_element([1, 2, 3], [2, 4, 6])\n    True\n    \"\"\"\n    for item in first:\n        if item in second:\n            return True\n    return False\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 5,
      "score": 10.0,
      "candidate": "def has_common_element(list1, list2):\n    return len(set(list1).intersection(set(list2))) > 0"
    },
    {
      "rank": 6,
      "score": 10.0,
      "candidate": "from typing import List\n\n\ndef common_element(list1: List[int], list2: List[int]) -> bool:\n    \"\"\"Returns true if list1 and list2 have at least one common element.\n\n    Args:\n        list1 (List[int]): first list\n        list2 (List[int]): second list\n\n    Examples:\n        >>> assert common_element([1, 2, 3], [3, 4, 5])\n        >>> assert not common_element([1, 2, 3], [4, 5, 6])\n    \"\"\"\n    return any(element in list2 for element in list1)\n\n\nif __name__ == \"__main__\":\n    print(common_element([1, 2, 3], [3, 4, 5]))"
    },
    {
      "rank": 7,
      "score": 10.0,
      "candidate": "from typing import List\n\n\ndef lists_intersection(list_one: List, list_two: List) -> bool:\n    \"\"\"\n    :param list_one: list of integers\n    :param list_two: list of integers\n    :return: True if they have at least one common element, False otherwise\n    >>> lists_intersection([1, 2, 3, 4], [5, 6, 7, 8])\n    False\n    >>> lists_intersection([1, 2, 3, 4], [5, 2, 7, 8])\n    True\n    >>> lists_intersection([1, 2, 3, 4], [3, 2, 7, 8])\n    True\n    >>> lists_intersection([1, 2, 3, 4], [3, 2, 7, 8, 1])\n    True\n    \"\"\"\n    for i in list_one:\n        for j in list_two:\n            if i == j:\n                return True\n    return False\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 8,
      "score": 10.0,
      "candidate": "def common_element(list1, list2):\n    for x in list1:\n        for y in list2:\n            if x == y:\n                return True\n    return False\n\n\nif __name__ == '__main__':\n    list1 = [1, 2, 3, 4, 5]\n    list2 = [5, 6, 7, 8, 9]\n    print(common_element(list1, list2))"
    },
    {
      "rank": 9,
      "score": 10.0,
      "candidate": "def has_common_element(list_a, list_b):\n    \"\"\"\n    >>> has_common_element([1, 2, 3, 4, 5], [5, 6, 7, 8, 9])\n    True\n    >>> has_common_element([1, 2, 3, 4, 5], [6, 7, 8, 9])\n    False\n    \"\"\"\n    return any(i in list_a for i in list_b)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 10,
      "score": 10.0,
      "candidate": "def common_element(list1, list2):\n    for i in list1:\n        for j in list2:\n            if i == j:\n                return True\n\n    return False\n\n\nprint(common_element([1, 2, 3], [4, 5, 6]))\nprint(common_element([1, 2, 3], [3, 4, 5]))"
    },
    {
      "rank": 11,
      "score": 10.0,
      "candidate": "from typing import List\n\n\ndef has_common_element(list1: List[int], list2: List[int]) -> bool:\n    \"\"\"Checks if the two lists have at least one common element.\n\n    Args:\n        list1 (List[int]): first list to check.\n        list2 (List[int]): second list to check.\n\n    Examples:\n        >>> has_common_element([1, 2, 3, 4], [1, 2, 3, 5])\n        True\n        >>> has_common_element([1, 2, 3, 4], [5, 6, 7, 8])\n        False\n    \"\"\"\n    return not set(list1).isdisjoint(list2)\n\n\nif __name__ == \"__main__\":\n    print(has_common_element([1, 2, 3, 4], [1, 2, 3, 5]))\n    print(has_common_element([1, 2, 3, 4], [5, 6, 7, 8]))"
    },
    {
      "rank": 12,
      "score": 10.0,
      "candidate": "def has_common_element(list1, list2):\n    return len(list(set(list1).intersection(list2))) > 0"
    },
    {
      "rank": 13,
      "score": 10.0,
      "candidate": "def common_element(lst1, lst2):\n    for i in lst1:\n        for j in lst2:\n            if i == j:\n                return True\n    return False\n\n\nprint(common_element([1, 2, 3, 4, 5], [4, 5, 6, 7, 8]))"
    },
    {
      "rank": 14,
      "score": 10.0,
      "candidate": "def lists_intersection(list1, list2):\n    \"\"\"\n    >>> list1 = [1, 2, 3, 4, 5, 6]\n    >>> list2 = [6, 7, 8, 9, 10, 11, 12]\n    >>> lists_intersection(list1, list2)\n    True\n    >>> list1 = [1, 2, 3, 4, 5, 6]\n    >>> list2 = [7, 8, 9, 10, 11, 12]\n    >>> lists_intersection(list1, list2)\n    False\n    >>> list1 = [1, 2, 3, 4, 5, 6]\n    >>> list2 = [7, 8, 9, 10, 11, 12]\n    >>> lists_intersection(list1, list2)\n    False\n    \"\"\"\n    for item in list1:\n        if item in list2:\n            return True\n    return False\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 15,
      "score": 10.0,
      "candidate": "def first_list(lst1):\n    lst1.sort()\n    return lst1\n\n\ndef second_list(lst2):\n    lst2.sort()\n    return lst2\n\n\ndef common_elements(lst1, lst2):\n    for i in lst1:\n        for j in lst2:\n            if i == j:\n                return True\n            else:\n                return False\n\n\nif __name__ == '__main__':\n    list1 = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    list2 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    print(common_elements(first_list(list1), second_list(list2)))"
    },
    {
      "rank": 16,
      "score": 10.0,
      "candidate": "from typing import List\n\n\ndef has_common_elements(list_one: List[int], list_two: List[int]) -> bool:\n    \"\"\"Returns true if list_one and list_two have at least one common element.\n\n    Args:\n        list_one (List[int]): first list\n        list_two (List[int]): second list\n\n    Examples:\n        >>> has_common_elements([1, 2, 3, 4], [5, 6, 7, 8])\n        False\n        >>> has_common_elements([1, 2, 3, 4], [3, 4, 5, 6])\n        True\n        >>> has_common_elements([1, 2, 3, 4], [1, 2, 3, 4])\n        True\n    \"\"\"\n    return any(elem in list_one for elem in list_two)\n\n\nif __name__ == \"__main__\":\n    print(has_common_elements([1, 2, 3, 4], [5, 6, 7, 8]))\n    print(has_common_elements([1, 2, 3, 4], [3, 4, 5, 6]))\n    print(has_common_elements([1, 2, 3, 4], [1, 2, 3, 4]))"
    },
    {
      "rank": 17,
      "score": 10.0,
      "candidate": "def common_elements(list1, list2):\n    \"\"\"\n    Return True if the lists have a common element.\n\n    >>> common_elements([1, 2, 3], [4, 5, 6])\n    False\n    >>> common_elements([1, 2, 3], [4, 5, 6, 1])\n    True\n    >>> common_elements([1, 2, 3], [4, 5, 6, 1, 2])\n    True\n    >>> common_elements([1, 2, 3], [4, 5, 6, 1, 2, 3])\n    True\n    >>> common_elements([1, 2, 3], [4, 5, 6, 1, 2, 3, 4])\n    True\n    >>> common_elements([1, 2, 3], [4, 5, 6, 1, 2, 3, 4, 5])\n    True\n    >>> common_elements([1, 2, 3], [4, 5, 6, 1, 2, 3, 4, 5, 6])\n    True\n    >>> common_elements([1, 2, 3], [4, 5, 6, 1, 2, 3, 4, 5, 6, 7])\n    True\n    >>> common_elements([1, 2, 3], [4, 5, 6, 1, 2, 3, 4, 5, 6, 7, 8])\n    True\n    \"\"\"\n    for element in list1:\n        if element in list2:\n            return True\n    return False\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 18,
      "score": 9.0,
      "candidate": "def common_element(list1, list2):\n    for i in list1:\n        for j in list2:\n            if i == j:\n                return True\n    return False"
    },
    {
      "rank": 19,
      "score": 9.0,
      "candidate": "from itertools import product\n\ndef common_elements(list1, list2):\n    \"\"\"Return True if list1 and list2 have at least one common element.\"\"\"\n    if list1 == list2:\n        return True\n    for item in product(list1, list2):\n        if item[0] == item[1]:\n            return True\n    return False"
    },
    {
      "rank": 20,
      "score": 9.0,
      "candidate": "def common_element(list1, list2):\n    for i in list1:\n        for j in list2:\n            if i == j:\n                return True\n    return False"
    },
    {
      "rank": 21,
      "score": 9.0,
      "candidate": "def list_common_element(l1, l2):\n    \"\"\"\n    >>> list_common_element([1, 2, 3, 4], [2, 4, 6, 8])\n    True\n    >>> list_common_element([1, 2, 3, 4], [5, 6, 7, 8])\n    False\n    \"\"\"\n    for i in l1:\n        for j in l2:\n            if i == j:\n                return True\n    return False\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 22,
      "score": 9.0,
      "candidate": "def has_common_elements(list1, list2):\n    \"\"\"\n    >>> has_common_elements([1, 2, 3, 4], [5, 6, 7, 8])\n    False\n    >>> has_common_elements([1, 2, 3, 4], [5, 4, 7, 8])\n    True\n    \"\"\"\n    for item in list1:\n        if item in list2:\n            return True\n    return False\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 23,
      "score": 8.0,
      "candidate": "def has_common_element(list1, list2):\n    \"\"\"\n    >>> has_common_element([1, 2, 3], [3, 4, 5])\n    True\n    >>> has_common_element([1, 2, 3], [4, 5, 6])\n    False\n    \"\"\"\n    common = set(list1) & set(list2)\n    if len(common) > 0:\n        return True\n    return False\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 24,
      "score": 8.0,
      "candidate": "def common_element(list_a: list, list_b: list) -> bool:\n    \"\"\"\n    >>> common_element([1, 2, 3], [4, 5, 6])\n    False\n    >>> common_element([1, 2, 3], [4, 5, 6, 1])\n    True\n    \"\"\"\n    return any(elem in list_b for elem in list_a)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 25,
      "score": 8.0,
      "candidate": "def common_element(list1, list2):\n    for i in list1:\n        if i in list2:\n            return True\n    return False\n\n\nprint(common_element([1, 2, 3, 4, 5], [4, 5, 6, 7, 8]))\nprint(common_element([1, 2, 3, 4, 5], [1, 6, 7, 8]))\nprint(common_element([1, 2, 3, 4, 5], [6, 7, 8]))"
    },
    {
      "rank": 26,
      "score": 8.0,
      "candidate": "def has_common_element(list1, list2):\n    for i in list1:\n        for j in list2:\n            if i == j:\n                return True\n\n\nlist1 = [1, 2, 3]\nlist2 = [4, 5, 6]\n\nprint(has_common_element(list1, list2))"
    },
    {
      "rank": 27,
      "score": 8.0,
      "candidate": "def common_element(list1, list2):\n    for i in list1:\n        if i in list2:\n            return True\n    return False\n\n\nprint(common_element([1, 2, 3, 4], [4, 5, 6, 7]))\nprint(common_element([1, 2, 3, 4], [5, 6, 7]))"
    },
    {
      "rank": 28,
      "score": 8.0,
      "candidate": "def common_element(list1, list2):\n    for i in list1:\n        for j in list2:\n            if i == j:\n                return True\n    return False\n\n\nprint(common_element([1, 2, 3], [3, 4, 5]))\nprint(common_element([1, 2, 3], [4, 5, 6]))"
    },
    {
      "rank": 29,
      "score": 8.0,
      "candidate": "def common_element(list_a: list, list_b: list) -> bool:\n    \"\"\"Return true if the two lists have at least one common element.\n\n    >>> common_element([1, 2, 3], [4, 5, 6])\n    False\n    >>> common_element([1, 2, 3], [3, 4, 5])\n    True\n    >>> common_element([1, 2, 3], [2, 4, 5])\n    True\n    >>> common_element([1, 2, 3], [3, 2, 5])\n    True\n    \"\"\"\n    return any(element in list_a for element in list_b)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 30,
      "score": 8.0,
      "candidate": "def common_element(list_1, list_2):\n    for item in list_1:\n        if item in list_2:\n            return True\n    return False"
    },
    {
      "rank": 31,
      "score": 8.0,
      "candidate": "def has_common_element(list1: list, list2: list) -> bool:\n    \"\"\"Returns true if lists have at least one common element.\"\"\"\n    for i in list1:\n        for j in list2:\n            if i == j:\n                return True\n    return False"
    },
    {
      "rank": 32,
      "score": 8.0,
      "candidate": "def common_element(list1, list2):\n    \"\"\"\n    >>> common_element([1, 2, 3, 4], [1, 2, 3, 5])\n    True\n    >>> common_element([1, 2, 3, 4], [1, 2, 5, 6])\n    False\n    \"\"\"\n    for i in list1:\n        for j in list2:\n            if i == j:\n                return True\n    return False\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 33,
      "score": 8.0,
      "candidate": "def common_element(list1, list2):\n    # Write your code here.\n\n    set1 = set(list1)\n    set2 = set(list2)\n\n    if set1.intersection(set2):\n        return True\n\n    return False\n\nprint(common_element([1, 2, 3], [4, 5, 6]))\nprint(common_element([1, 2, 3], [3, 4, 5]))"
    },
    {
      "rank": 34,
      "score": 8.0,
      "candidate": "from typing import List\n\n\ndef common_element(list_a: List[int], list_b: List[int]) -> bool:\n    \"\"\"Return True if list_a and list_b have at least one common element.\n\n    Examples:\n        >>> assert common_element([1, 2, 3], [2, 3, 4])\n        >>> assert common_element([1, 2, 3], [3, 4, 5])\n        >>> assert common_element([1, 2, 3], [4, 5, 6]) is False\n    \"\"\"\n    return any(element in list_a for element in list_b)\n\n\nif __name__ == \"__main__\":\n    print(common_element([1, 2, 3], [2, 3, 4]))"
    },
    {
      "rank": 35,
      "score": 8.0,
      "candidate": "def common_elements(list1, list2):\n    # Check if the lists are empty\n    if not list1 or not list2:\n        return False\n    # Check if the lists have the same length\n    if len(list1) != len(list2):\n        return False\n    # Check if each element of the first list is in the second list\n    for i in range(len(list1)):\n        if list1[i] in list2:\n            return True\n    return False"
    },
    {
      "rank": 36,
      "score": 8.0,
      "candidate": "def has_common_element(list1, list2):\n    \"\"\"\n    >>> has_common_element([1, 2, 3], [4, 5, 6])\n    False\n    >>> has_common_element([1, 2, 3], [3, 4, 5])\n    True\n    >>> has_common_element([1, 2, 3], [3, 4, 5, 1])\n    True\n    \"\"\"\n    return any(item in list1 for item in list2)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 37,
      "score": 8.0,
      "candidate": "def has_common_element(lst1, lst2):\n    for i in lst1:\n        if i in lst2:\n            return True\n    return False\n\n\n# lst1 = [1, 2, 3, 4]\n# lst2 = [5, 6, 7, 8]\n# lst1 = [1, 2, 3, 4]\n# lst2 = [2, 3, 4, 5]\nlst1 = [1, 2, 3, 4]\nlst2 = [5, 6, 7, 8]\nprint(has_common_element(lst1, lst2))"
    },
    {
      "rank": 38,
      "score": 8.0,
      "candidate": "def common_element(list_one, list_two):\n    for i in list_one:\n        for j in list_two:\n            if i == j:\n                return True\n    return False\n\n\nprint(common_element([1, 2, 3], [4, 5, 6]))\nprint(common_element([1, 2, 3], [3, 4, 5]))\nprint(common_element([1, 2, 3], [3, 4, 5, 6]))"
    },
    {
      "rank": 39,
      "score": 8.0,
      "candidate": "def has_common_element(list1, list2):\n    for item in list1:\n        if item in list2:\n            return True\n    return False\n\n\nif __name__ == '__main__':\n    print(has_common_element([1,2,3], [3,4,5]))\n    print(has_common_element([1,2,3], [4,5,6]))"
    },
    {
      "rank": 40,
      "score": 8.0,
      "candidate": "def common_element(list1, list2):\n    \"\"\"\n    Takes in two lists and returns true if they have at least one common element.\n\n    >>> common_element([1, 2, 3], [4, 5, 6])\n    False\n    >>> common_element([1, 2, 3], [3, 4, 5])\n    True\n    >>> common_element([1, 2, 3], [3, 4, 5, 6])\n    True\n    \"\"\"\n\n    for num in list1:\n        if num in list2:\n            return True\n    return False"
    },
    {
      "rank": 41,
      "score": 8.0,
      "candidate": "def common_element(list1, list2):\n    for i in list1:\n        for j in list2:\n            if i == j:\n                return True\n    return False\n\n\nif __name__ == '__main__':\n    print(common_element([1,2,3], [3,4,5]))\n    print(common_element([1,2,3], [4,5]))\n    print(common_element([1,2], [4,5]))\n    print(common_element([1,2], [2,4,5]))\n    print(common_element([1,2], [3,4,5]))"
    },
    {
      "rank": 42,
      "score": 8.0,
      "candidate": "def common_element(list1, list2):\n    for i in list1:\n        for j in list2:\n            if i == j:\n                return True\n    return False\n\n\nprint(common_element([1, 2, 3], [3, 4, 5]))"
    },
    {
      "rank": 43,
      "score": 8.0,
      "candidate": "from typing import List\n\n\n# Time complexity: O(n) where n is the length of the list\n# Space complexity: O(1)\ndef one_common_element(list1: List[int], list2: List[int]) -> bool:\n    for element in list1:\n        if element in list2:\n            return True\n    return False\n\n\n# Time complexity: O(n) where n is the length of the list\n# Space complexity: O(1)\ndef one_common_element_set(list1: List[int], list2: List[int]) -> bool:\n    return bool(set(list1) & set(list2))\n\n\nif __name__ == \"__main__\":\n    print(one_common_element([1, 2, 3, 4], [1, 2, 3]))\n    print(one_common_element([1, 2, 3, 4], [2, 3, 4]))\n    print(one_common_element([1, 2, 3, 4], [4, 5, 6]))\n    print(one_common_element([1, 2, 3, 4], [5, 6, 7]))\n\n    print(one_common_element_set([1, 2, 3, 4], [1, 2, 3]))\n    print(one_common_element_set([1, 2, 3, 4], [2, 3, 4]))\n    print(one_common_element_set([1, 2, 3, 4], [4, 5, 6]))\n    print(one_common_element_set([1, 2, 3, 4], [5, 6, 7]))"
    },
    {
      "rank": 44,
      "score": 8.0,
      "candidate": "# Time complexity: O(n)\ndef lists_intersection(list1, list2):\n    return len(set(list1) & set(list2)) != 0\n\n\n# Time complexity: O(n)\ndef lists_intersection_v2(list1, list2):\n    for item in list1:\n        if item in list2:\n            return True\n    return False\n\n\n# Time complexity: O(n)\ndef lists_intersection_v3(list1, list2):\n    common_items = []\n    for item in list1:\n        if item in list2:\n            common_items.append(item)\n    return common_items\n\n\nprint(lists_intersection([1, 2, 3], [4, 5, 6]))\nprint(lists_intersection([1, 2, 3], [2, 4, 5]))\nprint(lists_intersection_v2([1, 2, 3], [2, 4, 5]))\nprint(lists_intersection_v3([1, 2, 3], [2, 4, 5]))"
    },
    {
      "rank": 45,
      "score": 8.0,
      "candidate": "def has_common_element(list1, list2):\n    \"\"\"\n    >>> has_common_element([1, 2, 3, 4], [1, 2, 3, 4])\n    True\n    >>> has_common_element([1, 2, 3, 4], [5, 6, 7, 8])\n    False\n    \"\"\"\n    if len(list1) == 0 or len(list2) == 0:\n        return False\n    for item in list1:\n        if item in list2:\n            return True\n    return False\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 46,
      "score": 8.0,
      "candidate": "from typing import List\n\n\ndef common_element(list_one: List[int], list_two: List[int]) -> bool:\n    \"\"\"Returns true if the two lists have at least one common element.\n\n    Args:\n        list_one (List[int]): First list\n        list_two (List[int]): Second list\n\n    Examples:\n        >>> assert common_element([1, 2, 3], [4, 5, 6]) == False\n        >>> assert common_element([1, 2, 3], [3, 4, 5]) == True\n        >>> assert common_element([1, 2, 3, 4], [3, 4, 5]) == True\n    \"\"\"\n    return any(elem in list_one for elem in list_two)\n\n\nif __name__ == \"__main__\":\n    print(common_element([1, 2, 3], [4, 5, 6]))\n    print(common_element([1, 2, 3], [3, 4, 5]))\n    print(common_element([1, 2, 3, 4], [3, 4, 5]))"
    },
    {
      "rank": 47,
      "score": 8.0,
      "candidate": "def lists_common_element(first_list: list, second_list: list) -> bool:\n    \"\"\"\n    >>> lists_common_element([1, 2, 3], [4, 5, 6])\n    False\n    >>> lists_common_element([1, 2, 3], [3, 4, 5])\n    True\n    \"\"\"\n    return bool(set(first_list).intersection(second_list))\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 48,
      "score": 8.0,
      "candidate": "def common_element(list1, list2):\n    for i in list1:\n        for j in list2:\n            if i == j:\n                return True\n    return False"
    },
    {
      "rank": 49,
      "score": 8.0,
      "candidate": "from typing import List\n\n\ndef common_element(list_one: List, list_two: List) -> bool:\n    \"\"\"Check if two lists have at least one common element.\n\n    Args:\n        list_one (List): first list\n        list_two (List): second list\n\n    Returns:\n        bool: True if lists have at least one common element, False otherwise\n    \"\"\"\n    return any(item in list_one for item in list_two)\n\n\nif __name__ == \"__main__\":\n    print(common_element([1, 2, 3], [2, 3, 4]))\n    print(common_element([1, 2, 3], [2, 3, 4, 5]))\n    print(common_element([1, 2, 3], [2, 4, 5]))"
    },
    {
      "rank": 50,
      "score": 8.0,
      "candidate": "def common_element(list1, list2):\n    \"\"\"\n    >>> common_element([1, 2, 3], [4, 5, 6])\n    False\n    >>> common_element([1, 2, 3], [4, 5, 3])\n    True\n    >>> common_element([1, 2, 3], [4, 5, 6])\n    False\n    >>> common_element([1, 2, 3], [4, 5, 3])\n    True\n    \"\"\"\n    return any(element in list1 for element in list2)\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 51,
      "score": 8.0,
      "candidate": "def has_common_element(list_one, list_two):\n    for item in list_one:\n        if item in list_two:\n            return True\n    return False\n\nlist_one = [1,2,3]\nlist_two = [4,5,6]\nprint(has_common_element(list_one, list_two))\nprint(has_common_element(list_one, list_one))\nprint(has_common_element(list_two, list_one))"
    },
    {
      "rank": 52,
      "score": 8.0,
      "candidate": "def lists_intersect(list_one, list_two):\n    for i in list_one:\n        for j in list_two:\n            if i == j:\n                return True\n    return False\n\ndef main():\n    list_one = [1, 2, 3, 4]\n    list_two = [5, 6, 7, 8]\n    print(lists_intersect(list_one, list_two)) # False\n\n    list_two = [5, 6, 7, 1]\n    print(lists_intersect(list_one, list_two)) # True\n\n    list_one = [1, 2, 3, 4, 5, 6, 7, 8]\n    list_two = [5, 6, 7, 1]\n    print(lists_intersect(list_one, list_two)) # True\n\n    list_one = [1, 2, 3, 4, 5, 6, 7, 8]\n    list_two = [5, 6, 7, 1]\n    print(lists_intersect(list_two, list_one)) # True\n\n    list_one = [1, 2, 3, 4, 5, 6, 7, 8]\n    list_two = [5, 6, 7]\n    print(lists_intersect(list_one, list_two)) # True\n\n    list_one = [1, 2, 3, 4, 5, 6, 7, 8]\n    list_two = [5, 6, 7]\n    print(lists_intersect(list_two, list_one)) # True\n\n    list_one = [1, 2, 3, 4, 5, 6, 7, 8]\n    list_two = [5, 6, 7]\n    print(lists_intersect(list_two, list_one)) # True\n\n    list_one = [1, 2, 3, 4, 5, 6, 7, 8]\n    list_"
    },
    {
      "rank": 53,
      "score": 8.0,
      "candidate": "def common_element(list1, list2):\n    return len(set(list1).intersection(list2)) > 0\n\nprint(common_element([1, 2, 3], [4, 5, 6]))\nprint(common_element([1, 2, 3], [3, 4, 5]))\nprint(common_element([1, 2, 3], [3, 4, 5, 6]))\nprint(common_element([1, 2, 3], [1, 2, 3, 4]))\nprint(common_element([1, 2, 3], [1, 2, 3, 4, 5]))"
    },
    {
      "rank": 54,
      "score": 8.0,
      "candidate": "def common_element(list_one, list_two):\n    \"\"\"\n\n    :param list_one: list of strings\n    :param list_two: list of strings\n    :return: bool\n    \"\"\"\n\n    for item in list_one:\n        if item in list_two:\n            return True\n\n    return False\n\n\nif __name__ == '__main__':\n    print(common_element([\"hello\", \"goodbye\"], [\"hello\", \"world\"]))\n    print(common_element([\"hello\", \"goodbye\", \"world\"], [\"goodbye\", \"world\"]))\n    print(common_element([\"hello\", \"goodbye\", \"world\"], [\"goodbye\", \"world\", \"food\"]))"
    },
    {
      "rank": 55,
      "score": 8.0,
      "candidate": "def common_element(list1, list2):\n    # Your code here\n    return any(elem in list1 for elem in list2)\n\nprint(common_element([1,2,3,4], [2,3,4,5]))\nprint(common_element([1,2,3,4], [5,6,7,8]))\nprint(common_element([1,2,3,4], [2,3,5,6]))"
    },
    {
      "rank": 56,
      "score": 8.0,
      "candidate": "def common_element(list1, list2):\n    return any(item in list1 for item in list2)\n\ndef main():\n    list1 = [1, 2, 3]\n    list2 = [4, 5, 6]\n    list3 = [1, 2, 3, 4, 5]\n    list4 = [1, 2, 3, 4, 5, 6]\n    list5 = [4, 5, 6]\n    list6 = [1, 2, 3]\n    print(common_element(list1, list2)) # False\n    print(common_element(list3, list4)) # True\n    print(common_element(list5, list6)) # True\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 57,
      "score": 8.0,
      "candidate": "def common_element(list1, list2):\n    for element in list1:\n        if element in list2:\n            return True\n    return False"
    },
    {
      "rank": 58,
      "score": 8.0,
      "candidate": "def common_element(list1, list2):\n    for x in list1:\n        for y in list2:\n            if x == y:\n                return True\n    return False\n\n\nif __name__ == '__main__':\n    print(common_element([1, 2, 3], [3, 4, 5]))\n    print(common_element([1, 2, 3], [4, 5, 6]))\n    print(common_element([1, 2, 3], [3, 1, 2]))\n    print(common_element([1, 2, 3], [3, 1, 4]))"
    },
    {
      "rank": 59,
      "score": 8.0,
      "candidate": "def common_element(list1, list2):\n    for i in range(len(list1)):\n        for j in range(len(list2)):\n            if list1[i] == list2[j]:\n                return True\n    return False\n\n\nlist1 = [1, 2, 3, 4]\nlist2 = [4, 5, 6, 7]\nprint(common_element(list1, list2))"
    },
    {
      "rank": 60,
      "score": 8.0,
      "candidate": "def lists_intersection(list1, list2):\n    \"\"\"Returns true if the two lists have at least one common element.\"\"\"\n    return len(set(list1).intersection(set(list2))) > 0"
    },
    {
      "rank": 61,
      "score": 8.0,
      "candidate": "def common_element(list1, list2):\n    return list(set(list1).intersection(set(list2))) != []\n\nprint(common_element([1,2,3],[4,5,6]))"
    },
    {
      "rank": 62,
      "score": 8.0,
      "candidate": "def common_element(list1, list2):\n    # Your code here\n    set_list1 = set(list1)\n    set_list2 = set(list2)\n\n    return (set_list1 & set_list2) != set()\n\n\nif __name__ == '__main__':\n    print(common_element([1,2,3,4], [4,5,6,7]))\n    print(common_element([1,2,3,4], [5,6,7]))"
    },
    {
      "rank": 63,
      "score": 8.0,
      "candidate": "def common_element(list1, list2):\n    for item in list1:\n        if item in list2:\n            return True\n    return False\n\n\nprint(common_element([1, 2, 3], [4, 5, 6]))\nprint(common_element([1, 2, 3], [3, 4, 5]))"
    },
    {
      "rank": 64,
      "score": 8.0,
      "candidate": "def has_common_element(list1, list2):\n    \"\"\"Returns true if two lists share an element\"\"\"\n    for i in list1:\n        if i in list2:\n            return True\n    return False"
    },
    {
      "rank": 65,
      "score": 8.0,
      "candidate": "def common_element(list1, list2):\n    for i in list1:\n        for j in list2:\n            if i == j:\n                return True\n    return False\n\nif __name__ == '__main__':\n    print(common_element([1,2,3,4], [4,5,6,7]))\n    print(common_element([1,2,3,4], [7,8,9,10]))"
    },
    {
      "rank": 66,
      "score": 8.0,
      "candidate": "def one_common_element(list_one: list, list_two: list) -> bool:\n    \"\"\"Return true if lists have at least one common element.\n\n    >>> one_common_element([1, 2, 3], [4, 5, 6])\n    False\n    >>> one_common_element([1, 2, 3], [4, 5, 6, 1])\n    True\n    >>> one_common_element([1, 2, 3], [4, 5, 6, 7, 8])\n    False\n    >>> one_common_element([1, 2, 3], [4, 5, 6, 3])\n    True\n    \"\"\"\n    for element_one in list_one:\n        for element_two in list_two:\n            if element_one == element_two:\n                return True\n    return False\n\n\ndef one_common_element_2(list_one: list, list_two: list) -> bool:\n    \"\"\"Return true if lists have at least one common element.\n\n    >>> one_common_element_2([1, 2, 3], [4, 5, 6])\n    False\n    >>> one_common_element_2([1, 2, 3], [4, 5, 6, 1])\n    True\n    >>> one_common_element_2([1, 2, 3], [4, 5, 6, 7, 8])\n    False\n    >>> one_common_element_2([1, 2, 3], [4, 5, 6, 3])\n    True\n    \"\"\"\n    return any(element in list_one for element in list_two)\n\n\ndef one_common_element_3(list_one: list, list_two: list) -> bool:\n    \"\"\"Return true if lists have at least one common element.\n\n    >>> one_common_element_3([1, 2, 3], [4, 5, 6])\n    False\n    >>> one_common_element_3([1, 2, 3], [4, 5, 6, 1"
    },
    {
      "rank": 67,
      "score": 8.0,
      "candidate": "def lists_common(list1, list2):\n    return not set(list1).isdisjoint(set(list2))\n\n\nprint(lists_common([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7]))\nprint(lists_common([\"a\", \"b\", \"c\", \"d\"], [\"a\", \"b\", \"e\", \"f\", \"g\", \"h\"]))"
    },
    {
      "rank": 68,
      "score": 8.0,
      "candidate": "def check_lists(list1, list2):\n    return len(set(list1).intersection(list2)) > 0"
    },
    {
      "rank": 69,
      "score": 8.0,
      "candidate": "def lists_common(list1, list2):\n    common = 0\n    for x in list1:\n        for y in list2:\n            if x == y:\n                common += 1\n                break\n    return common > 0\n\nprint(lists_common([1, 2, 3], [4, 5, 6]))\nprint(lists_common([1, 2, 3], [3, 4, 5]))\nprint(lists_common([1, 2, 3], [2, 3, 4]))"
    },
    {
      "rank": 70,
      "score": 8.0,
      "candidate": "def common_element(list1, list2):\n    \"\"\"Returns true if list1 and list2 have at least one common element.\"\"\"\n    for x in list1:\n        if x in list2:\n            return True\n    return False"
    },
    {
      "rank": 71,
      "score": 8.0,
      "candidate": "def lists_have_common_element(list1, list2):\n    \"\"\"\n    :param list1: list\n    :param list2: list\n    :return: bool\n    \"\"\"\n    return len(list(set(list1).intersection(list2))) > 0"
    },
    {
      "rank": 72,
      "score": 8.0,
      "candidate": "def common_element(list1, list2):\n    for i in list1:\n        for j in list2:\n            if i == j:\n                return True\n    return False\n\nprint(common_element([1, 2, 3], [2, 3, 4]))"
    },
    {
      "rank": 73,
      "score": 8.0,
      "candidate": "\"\"\"\nBase case:\nIf the first list is empty, then the second list contains at least one element, and so there is at least one common element.\nIf the second list is empty, then the first list contains at least one element, and so there is at least one common element.\n\nRecursive case:\nIf the first list is empty, then there is no common element.\nIf the second list is empty, then there is no common element.\nIf the first element of the first list is equal to the first element of the second list, then there is at least one common element.\nIf the first element of the first list is not equal to the first element of the second list, then recurse on the first list and the second list minus the first element.\n\"\"\"\n\ndef has_common_element(list1, list2):\n    if len(list1) == 0:\n        return len(list2) > 0\n    elif len(list2) == 0:\n        return len(list1) > 0\n    elif list1[0] == list2[0]:\n        return True\n    else:\n        return has_common_element(list1, list2[1:]) or has_common_element(list1[1:], list2)\n\n\n\"\"\"\nTime complexity: O(n). We traverse the lists at most once.\nSpace complexity: O(n). The depth of our recursion is at most n.\n\"\"\""
    },
    {
      "rank": 74,
      "score": 8.0,
      "candidate": "def has_common_element(first_list, second_list):\n    return bool(set(first_list).intersection(second_list))"
    },
    {
      "rank": 75,
      "score": 8.0,
      "candidate": "def common_element(list1, list2):\n    for i in list1:\n        for j in list2:\n            if i == j:\n                return True\n    return False\n\n\nprint(common_element([1, 2, 3], [4, 5, 6]))\nprint(common_element([1, 2, 3], [3, 4, 5]))\nprint(common_element([1, 2, 3], [3, 1, 4]))"
    },
    {
      "rank": 76,
      "score": 8.0,
      "candidate": "def lists_common_element(list1, list2):\n    for i in range(len(list1)):\n        for j in range(len(list2)):\n            if list1[i] == list2[j]:\n                return True\n    return False\n\nif __name__ == '__main__':\n    print(\"Example:\")\n    print(lists_common_element([1, 2, 3], [4, 5, 6]))\n    print(lists_common_element([1, 2, 3], [4, 5, 6, 3]))\n    print(lists_common_element([1, 2, 3], [4, 5, 6, 7]))"
    },
    {
      "rank": 77,
      "score": 8.0,
      "candidate": "def first_function(list1, list2):\n    for i in list1:\n        if i in list2:\n            return True\n    return False\n\n\ndef second_function(list1, list2):\n    return any(i in list2 for i in list1)\n\n\ndef third_function(list1, list2):\n    return len(set(list1).intersection(list2)) > 0\n\n\ndef fourth_function(list1, list2):\n    return len(set(list1) & set(list2)) > 0\n\n\ndef fifth_function(list1, list2):\n    return len(set(list1).intersection(list2))\n\n\ndef sixth_function(list1, list2):\n    return len(set(list1) & set(list2))"
    },
    {
      "rank": 78,
      "score": 8.0,
      "candidate": "def common_element(list_one, list_two):\n    for i in list_one:\n        for j in list_two:\n            if i == j:\n                return True\n    return False\n\n\nprint(common_element([1, 2, 3], [4, 5, 6]))\nprint(common_element([1, 2, 3], [3, 4, 5]))\nprint(common_element([1, 2, 3], [3, 1, 5]))"
    },
    {
      "rank": 79,
      "score": 4.0,
      "candidate": "from itertools import chain\n\n\n# Time: O(n)\n# Space: O(n)\n# Using set\ndef common_element(list1, list2):\n    return len(set(list1) & set(list2)) > 0\n\n\n# Time: O(n)\n# Space: O(n)\n# Using sorted list\ndef common_element_2(list1, list2):\n    sorted_list1 = sorted(list1)\n    sorted_list2 = sorted(list2)\n\n    if sorted_list1 and sorted_list2:\n        for i in range(len(sorted_list1)):\n            if sorted_list1[i] in sorted_list2:\n                return True\n    return False\n\n\n# Time: O(n^2)\n# Space: O(1)\n# Using list comprehension\ndef common_element_3(list1, list2):\n    return len([i for i in list1 if i in list2]) > 0\n\n\n# Time: O(n^2)\n# Space: O(1)\n# Using nested loops\ndef common_element_4(list1, list2):\n    for i in list1:\n        for j in list2:\n            if i == j:\n                return True\n    return False\n\n\n# Time: O(n)\n# Space: O(n)\n# Using itertools chain\ndef common_element_5(list1, list2):\n    return len(set(chain(list1, list2))) > 0\n\n\nprint(common_element([1, 2, 3, 4, 5, 6], [3, 4, 5, 6, 7, 8]))\nprint(common_element([1, 2, 3, 4, 5, 6], [7, 8, 9, 10, 11, 12]))\nprint(common_element_2([1, 2, 3, 4, 5, 6], [3, 4, 5, 6, 7, 8]))\nprint(common_element_2([1, 2, 3, 4,"
    },
    {
      "rank": 80,
      "score": 1.0,
      "candidate": "from typing import List\n\n\ndef lists_intersection(list_a: List[int], list_b: List[int]) -> bool:\n    \"\"\"Returns true if two lists have at least one common element.\n\n    Args:\n        list_a (List[int]): First list.\n        list_b (List[int]): Second list.\n\n    Examples:\n        >>> assert lists_intersection([1, 2, 3], [2, 3, 4])\n        >>> assert not lists_intersection([1, 2, 3], [4, 5, 6])\n    \"\"\"\n    return any(element in list_b for element in list_a)\n\n\nif __name__ == \"__main__\":\n    print(lists_intersection([1, 2, 3], [2, 3, 4]))"
    },
    {
      "rank": 81,
      "score": 1.0,
      "candidate": "from typing import List\n\n\ndef has_common_element(list1: List, list2: List) -> bool:\n    \"\"\"\n    >>> has_common_element([1, 2, 3], [4, 5, 6])\n    False\n    >>> has_common_element([1, 2, 3], [3, 4, 5])\n    True\n    \"\"\"\n    return len(set(list1).intersection(set(list2))) > 0\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 82,
      "score": 1.0,
      "candidate": "\"\"\"Question 17\nLevel 2\nQuestion:\nWrite a function that takes two lists and returns true if they have at least one common element.\n\"\"\"\ndef common_element(list1, list2):\n    if list1 and list2:\n        for i in list1:\n            for j in list2:\n                if i == j:\n                    return True\n    return False\n\n# OR\n\ndef common_element(list1, list2):\n    return len(list(set(list1) & set(list2))) > 0\n\n\"\"\"\ndef common_element(list1, list2):\n    return set(list1) & set(list2)\n\"\"\""
    },
    {
      "rank": 83,
      "score": 1.0,
      "candidate": "from typing import List\n\n\ndef has_common_element(list1: List[int], list2: List[int]) -> bool:\n    \"\"\"Checks if two lists have common element.\n\n    Args:\n        list1 (List[int]): list of integers\n        list2 (List[int]): list of integers\n\n    Returns:\n        bool: True if lists have common element, False otherwise.\n\n    Examples:\n        >>> assert has_common_element([1, 2], [2, 3])\n        >>> assert not has_common_element([1, 2], [3, 4])\n    \"\"\"\n    return not set(list1).isdisjoint(list2)\n\n\nif __name__ == \"__main__\":\n    print(has_common_element([1, 2], [2, 3]))"
    },
    {
      "rank": 84,
      "score": 1.0,
      "candidate": "def check_common_element(list1, list2):\n    for item in list1:\n        if item in list2:\n            return True\n\n\nprint(check_common_element([1, 2, 3], [3, 4, 5]))\nprint(check_common_element([1, 2, 3], [4, 5, 6]))"
    },
    {
      "rank": 85,
      "score": 1.0,
      "candidate": "from itertools import product\n\n\n# Time complexity O(m*n)\n# Space complexity O(m*n)\ndef common_element(list_a, list_b):\n    return any(elem in list_a for elem in list_b)\n\n\n# Time complexity O(m*n)\n# Space complexity O(1)\ndef common_element2(list_a, list_b):\n    for elem_a, elem_b in product(list_a, list_b):\n        if elem_a == elem_b:\n            return True\n    return False\n\n\nprint(common_element2([1, 2, 3, 4], [5, 6, 7, 8]))\nprint(common_element2([1, 2, 3, 4], [3, 4, 5, 6]))\nprint(common_element2([1, 2, 3, 4], [3, 5, 7, 8]))"
    },
    {
      "rank": 86,
      "score": 1.0,
      "candidate": "from typing import List\n\n\ndef lists_intersection(list_a: List, list_b: List) -> bool:\n    \"\"\"Return true if the two lists have at least one common element.\n\n    Args:\n        list_a (List): first list\n        list_b (List): second list\n\n    Examples:\n        >>> assert lists_intersection([1, 2, 3, 4, 5], [4, 5, 6, 7, 8])\n        >>> assert not lists_intersection([1, 2, 3, 4, 5], [6, 7, 8])\n    \"\"\"\n    return any(\n        element in list_a for element in list_b\n    )\n\n\nif __name__ == \"__main__\":\n    print(lists_intersection([1, 2, 3, 4, 5], [4, 5, 6, 7, 8]))\n    print(lists_intersection([1, 2, 3, 4, 5], [6, 7, 8]))"
    },
    {
      "rank": 87,
      "score": 1.0,
      "candidate": "def check_common_element(list_a: list, list_b: list) -> bool:\n    \"\"\"\n    Checks if two lists have at least one common element\n    >>> check_common_element([1, 2, 3, 4, 5], [2, 4, 6, 8, 10])\n    True\n    >>> check_common_element([1, 2, 3, 4, 5], [6, 7, 8, 9, 10])\n    False\n    >>> check_common_element([1, 2, 3, 4, 5], [1, 2, 3, 4, 5])\n    True\n    >>> check_common_element([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6])\n    True\n    >>> check_common_element([1, 2, 3, 4, 5], [6, 7, 8, 9, 10, 11])\n    False\n    >>> check_common_element([], [])\n    False\n    \"\"\"\n    for element_a in list_a:\n        for element_b in list_b:\n            if element_a == element_b:\n                return True\n    return False\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod(verbose=True)"
    },
    {
      "rank": 88,
      "score": 1.0,
      "candidate": "from typing import List\n\n\ndef lists_common_element(a: List, b: List) -> bool:\n    \"\"\"Returns True if two lists have at least one common element.\n\n    Args:\n        a (List): the first list.\n        b (List): the second list.\n\n    Examples:\n        >>> assert lists_common_element([1, 2], [2, 3])\n        >>> assert not lists_common_element([1, 2], [3, 4])\n    \"\"\"\n    return any(elem in a for elem in b)\n\n\nif __name__ == \"__main__\":\n    print(lists_common_element([1, 2], [2, 3]))"
    },
    {
      "rank": 89,
      "score": 1.0,
      "candidate": "def list_common_element(list1: list, list2: list) -> bool:\n    for i in list1:\n        for j in list2:\n            if i == j:\n                return True\n    return False\n\n\nlist1 = [1, 2, 3, 4]\nlist2 = [5, 6, 7]\nprint(list_common_element(list1, list2))"
    },
    {
      "rank": 90,
      "score": 1.0,
      "candidate": "from typing import List\n\n\ndef common_element(list1: List[int], list2: List[int]) -> bool:\n    \"\"\"Return True if there is at least one common element between two lists.\n\n    Examples:\n        >>> common_element([1, 2, 3], [2, 3, 4])\n        True\n        >>> common_element([1, 2, 3], [4, 5, 6])\n        False\n    \"\"\"\n    for element in list1:\n        if element in list2:\n            return True\n    return False\n\n\nif __name__ == \"__main__\":\n    print(common_element([1, 2, 3], [2, 3, 4]))\n    print(common_element([1, 2, 3], [4, 5, 6]))"
    },
    {
      "rank": 91,
      "score": 1.0,
      "candidate": "from typing import List\n\n\ndef has_common_element(list_one: List[int], list_two: List[int]) -> bool:\n    \"\"\"Returns true if two lists share at least one element.\n\n    Args:\n        list_one (List[int]): first list of integers.\n        list_two (List[int]): second list of integers.\n\n    Examples:\n        >>> assert has_common_element([1, 2, 3, 4, 5], [4, 5, 6, 7, 8])\n        >>> assert not has_common_element([1, 2, 3, 4, 5], [6, 7, 8, 9, 10])\n    \"\"\"\n    return bool(set(list_one) & set(list_two))\n\n\nif __name__ == \"__main__\":\n    print(has_common_element([1, 2, 3, 4, 5], [4, 5, 6, 7, 8]))"
    },
    {
      "rank": 92,
      "score": 1.0,
      "candidate": "from typing import List\n\n\ndef has_common_element(list1: List, list2: List) -> bool:\n    \"\"\"Returns true if the two lists have at least one common element.\n\n    Args:\n        list1 (List): First list.\n        list2 (List): Second list.\n\n    Examples:\n        >>> assert has_common_element([1, 2, 3], [4, 5, 6]) == False\n        >>> assert has_common_element([1, 2, 3], [2, 5, 6]) == True\n\n    Returns:\n        bool: True if the two lists have at least one common element.\n    \"\"\"\n    return len(list(set(list1) & set(list2))) > 0\n\n\nif __name__ == \"__main__\":\n    print(has_common_element([1, 2, 3], [4, 5, 6]))\n    print(has_common_element([1, 2, 3], [2, 5, 6]))"
    },
    {
      "rank": 93,
      "score": 1.0,
      "candidate": "def common_element(lst1, lst2):\n    for i in lst1:\n        for j in lst2:\n            if i == j:\n                return True\n    return False\n\n#print(common_element([1,2,3,4], [2,4,5,6]))\n\n\"\"\"\nWrite a function that takes two lists and returns true if they have at least one common element.\n\"\"\"\n\ndef common_element(lst1, lst2):\n    return len(list(set(lst1) & set(lst2))) > 0\n\n#print(common_element([1,2,3,4], [2,4,5,6]))\n\n\"\"\"\nWrite a function that takes two lists and returns true if they have at least one common element.\n\"\"\"\n\ndef common_element(lst1, lst2):\n    return len(set(lst1) & set(lst2)) > 0\n\n#print(common_element([1,2,3,4], [2,4,5,6]))"
    },
    {
      "rank": 94,
      "score": 1.0,
      "candidate": "# Time complexity: O(n).\n# Space complexity: O(1).\ndef check_lists(list_1: list, list_2: list) -> bool:\n    for item in list_1:\n        if item in list_2:\n            return True\n    return False\n\n\n# Time complexity: O(n).\n# Space complexity: O(1).\ndef check_lists_better(list_1: list, list_2: list) -> bool:\n    for item in list_1:\n        if list_2.count(item) > 0:\n            return True\n    return False\n\n\nprint(check_lists([1, 2, 3, 4], [5, 6, 7, 8]))\nprint(check_lists_better([1, 2, 3, 4], [5, 6, 7, 8]))"
    },
    {
      "rank": 95,
      "score": 1.0,
      "candidate": "from typing import List\n\n\ndef common_element(list_one: List, list_two: List) -> bool:\n    \"\"\"Return true if two lists have common elements.\n\n    Args:\n        list_one (List): the first list\n        list_two (List): the second list\n\n    Returns:\n        bool: True if two lists have common elements, False otherwise\n    \"\"\"\n    for element in list_one:\n        if element in list_two:\n            return True\n    return False\n\n\nif __name__ == \"__main__\":\n    print(common_element([1, 2, 3, 4], [5, 6, 7, 8]))\n    print(common_element([1, 2, 3, 4], [3, 4, 5, 6]))\n    print(common_element([1, 2, 3, 4], [4, 5, 6, 7]))"
    },
    {
      "rank": 96,
      "score": 1.0,
      "candidate": "from itertools import product\n\n\ndef has_common_element(a, b):\n    \"\"\"Returns True if lists have at least one common element.\"\"\"\n    return bool(set(a) & set(b))\n\n\ndef has_common_element_v2(a, b):\n    \"\"\"Returns True if lists have at least one common element.\"\"\"\n    return any(i in a for i in b)\n\n\ndef has_common_element_v3(a, b):\n    \"\"\"Returns True if lists have at least one common element.\"\"\"\n    return any(i in b for i in a)\n\n\ndef has_common_element_v4(a, b):\n    \"\"\"Returns True if lists have at least one common element.\"\"\"\n    return any(i in product(a, b) for i in product(a, b))\n\n\ndef has_common_element_v5(a, b):\n    \"\"\"Returns True if lists have at least one common element.\"\"\"\n    return any(i in set(product(a, b)) for i in set(product(a, b)))"
    },
    {
      "rank": 97,
      "score": 1.0,
      "candidate": "from typing import List\n\n\ndef check_lists(list1: List, list2: List) -> bool:\n    \"\"\"Check if two lists have at least one common element.\n\n    Args:\n        list1 (List): first list\n        list2 (List): second list\n\n    Examples:\n        >>> assert check_lists([1, 2, 3], [4, 5, 6])\n        >>> assert not check_lists([1, 2, 3], [4, 5, 6, 7, 8])\n    \"\"\"\n    return any(item in list1 for item in list2)\n\n\nif __name__ == \"__main__\":\n    print(check_lists([1, 2, 3], [4, 5, 6]))"
    },
    {
      "rank": 98,
      "score": 1.0,
      "candidate": "def common_element(list1, list2):\n    for i in list1:\n        for j in list2:\n            if i == j:\n                return True\n    return False\n\nlist1 = [1, 2, 3, 4]\nlist2 = [4, 5, 6]\nprint(common_element(list1, list2))\n\nlist1 = [1, 2, 3, 4]\nlist2 = [5, 6]\nprint(common_element(list1, list2))"
    },
    {
      "rank": 99,
      "score": 1.0,
      "candidate": "\"\"\"\nTest.it(\"Basic tests\")\nTest.assert_equals(have_common_element([1,2,3], [4,5,6]), False)\nTest.assert_equals(have_common_element([1,2,3], [3,4,5]), True)\nTest.assert_equals(have_common_element([1,2,3], [3,4,5,1]), True)\nTest.assert_equals(have_common_element([1,2,3,4,5], [3,4,5,6]), True)\nTest.assert_equals(have_common_element([1,2,3,4,5], [1,3,5,6]), True)\nTest.assert_equals(have_common_element([1,2,3,4,5], [1,2,3,4,5]), True)\nTest.assert_equals(have_common_element([1,2,3,4,5], [6,7,8,9,10]), False)\n\"\"\"\n\ndef have_common_element(list1, list2):\n    for item in list1:\n        if item in list2:\n            return True\n    return False"
    },
    {
      "rank": 100,
      "score": 1.0,
      "candidate": "from typing import List\n\n\ndef check_common_element(list1: List, list2: List) -> bool:\n    \"\"\"Check if two lists have at least one common element.\n\n    Args:\n        list1 (List): first list\n        list2 (List): second list\n\n    Examples:\n        >>> assert check_common_element([1, 2, 3, 4], [5, 6, 7, 8]) == False\n        >>> assert check_common_element([1, 2, 3, 4], [5, 6, 7, 4]) == True\n        >>> assert check_common_element([1, 2, 3, 4], [3, 4, 5, 6]) == True\n    \"\"\"\n    return bool(set(list1).intersection(set(list2)))\n\n\nif __name__ == \"__main__\":\n    print(check_common_element([1, 2, 3, 4], [5, 6, 7, 8]))\n    print(check_common_element([1, 2, 3, 4], [5, 6, 7, 4]))\n    print(check_common_element([1, 2, 3, 4], [3, 4, 5, 6]))"
    }
  ]
}