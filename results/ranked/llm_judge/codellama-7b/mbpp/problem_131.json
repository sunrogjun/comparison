{
  "timestamp": "2025-09-14T23:17:20.092753",
  "method": "improved_llm_judge",
  "judge_model": "codellama/CodeLlama-7b-Python-hf",
  "target_model": "codellama-7b",
  "dataset": "mbpp",
  "problem_number": 131,
  "total_candidates": 100,
  "results": [
    {
      "rank": 1,
      "score": 10.0,
      "candidate": "def count_same_pair(list1, list2, list3):\n    \"\"\"\n    :type list1: List[int]\n    :type list2: List[int]\n    :type list3: List[int]\n    :rtype: int\n    \"\"\"\n    result = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            result += 1\n    return result"
    },
    {
      "rank": 2,
      "score": 10.0,
      "candidate": "from typing import List\n\n\nclass Solution:\n    def count_same(self, list1: List[int], list2: List[int], list3: List[int]) -> int:\n        count = 0\n        for i in range(len(list1)):\n            if list1[i] == list2[i] == list3[i]:\n                count += 1\n\n        return count\n\n\nif __name__ == \"__main__\":\n    solution = Solution()\n    list1 = [1, 1, 1]\n    list2 = [1, 2, 3]\n    list3 = [1, 2, 3]\n    print(solution.count_same(list1, list2, list3))"
    },
    {
      "rank": 3,
      "score": 10.0,
      "candidate": "def samePairCount(a, b, c):\n    \"\"\"\n    :type a: List[int]\n    :type b: List[int]\n    :type c: List[int]\n    :rtype: int\n    \"\"\"\n    count = 0\n    for i in range(len(a)):\n        for j in range(len(b)):\n            for k in range(len(c)):\n                if a[i] == b[j] and b[j] == c[k]:\n                    count += 1\n    return count\n\n\ndef main():\n    a = [1, 2, 3, 4, 5]\n    b = [2, 3, 4, 5, 6]\n    c = [3, 4, 5, 6, 7]\n    print(samePairCount(a, b, c))\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 4,
      "score": 10.0,
      "candidate": "from collections import defaultdict\n\ndef count_same_pair(l1, l2, l3):\n    \"\"\"\n    :type l1: List[int]\n    :type l2: List[int]\n    :type l3: List[int]\n    :rtype: int\n    \"\"\"\n    cnt = 0\n    d = defaultdict(int)\n    for i in range(len(l1)):\n        d[(l1[i], l2[i], l3[i])] += 1\n    for k, v in d.items():\n        if v > 1:\n            cnt += v * (v - 1) / 2\n    return cnt\n\ndef test_count_same_pair():\n    assert count_same_pair([1, 2, 3, 3, 2, 1], [3, 2, 1, 3, 3, 2], [1, 3, 2, 2, 3, 1]) == 4\n    assert count_same_pair([1, 1, 1, 1, 2, 2, 2], [1, 2, 2, 1, 1, 1, 2], [1, 2, 1, 2, 2, 1, 1]) == 1\n    assert count_same_pair([1, 1, 2, 2, 3, 3], [1, 2, 3, 1, 2, 3], [1, 2, 3, 2, 3, 1]) == 1\n    assert count_same_pair([1, 1, 1, 1, 2, 2, 2, 2], [1, 2, 2, 1, 1, 1, 2, 2], [1, 2, 1, 2, 2, 1, 1, 1]) == 2\n\nif __name__ == '__main__':\n    test_count_same_pair()"
    },
    {
      "rank": 5,
      "score": 10.0,
      "candidate": "from itertools import combinations\nfrom collections import Counter\n\n\ndef count_same_pair(list1, list2, list3):\n    \"\"\"\n    :type list1: List[int]\n    :type list2: List[int]\n    :type list3: List[int]\n    :rtype: int\n    \"\"\"\n    list_ = list(combinations(list1 + list2 + list3, 2))\n    return len([x for x in Counter(list_).values() if x == 2])\n\n\ndef test_count_same_pair():\n    assert count_same_pair([1, 1, 3, 5], [1, 2, 3, 4], [1, 2, 3, 5]) == 4\n    assert count_same_pair([1, 2], [2, 3], [3, 4]) == 2\n\n\nif __name__ == '__main__':\n    test_count_same_pair()"
    },
    {
      "rank": 6,
      "score": 10.0,
      "candidate": "from collections import Counter\n\ndef count_pairs(list_a, list_b, list_c):\n    return len([item for item in Counter(list_a + list_b + list_c).items() if item[1] == 2])\n\n# test\nlist_a = [1, 2, 3, 4, 5]\nlist_b = [2, 4, 6, 8, 10]\nlist_c = [3, 6, 9, 12, 15]\nprint(count_pairs(list_a, list_b, list_c))"
    },
    {
      "rank": 7,
      "score": 10.0,
      "candidate": "def same_pair_count(list1, list2, list3):\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list1[i] == list3[i]:\n            count += 1\n    return count\n\n\ndef main():\n    list1 = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    list2 = [1, 1, 2, 3, 5, 6, 7, 8, 9]\n    list3 = [1, 2, 2, 3, 5, 6, 7, 8, 9]\n    print(same_pair_count(list1, list2, list3))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 8,
      "score": 10.0,
      "candidate": "from collections import Counter\n\ndef count_same_pair(a, b, c):\n    \"\"\"\n    :type a: List[int]\n    :type b: List[int]\n    :type c: List[int]\n    :rtype: int\n    \"\"\"\n    return sum(v for v in Counter(a + b + c).values() if v >= 2)\n\n\ndef test_count_same_pair():\n    assert count_same_pair([1,2,3], [1,2,3], [1,2,3]) == 6\n    assert count_same_pair([1,2,3], [2,3,4], [2,3,4]) == 4\n    assert count_same_pair([1,1,2,2], [1,2,3,3], [1,2,3,3]) == 6\n    assert count_same_pair([1,2,3], [1,2,3,4], [1,2,3,4]) == 8\n    assert count_same_pair([1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4], [1,1,1,2,2,2,2,3,3,3,4,4,4,4], [1,1,1,2,2,2,2,3,3,3,4,4,4,4]) == 16\n\n\nif __name__ == '__main__':\n    test_count_same_pair()"
    },
    {
      "rank": 9,
      "score": 8.837754052729982,
      "candidate": "def count_same_pair(list1, list2, list3):\n    # Fill this in.\n    count = 0\n    for i in range(len(list1)):\n        for j in range(len(list2)):\n            for k in range(len(list3)):\n                if list1[i] == list2[j] and list2[j] == list3[k]:\n                    count += 1\n    return count\n\nif __name__ == \"__main__\":\n    print (count_same_pair([1, 2, 3], [2, 3, 4], [2, 3, 5]))\n    # 2\n\n    print (count_same_pair([1, 2, 3], [2, 3, 4], [2, 3, 5, 6]))\n    # 2"
    },
    {
      "rank": 10,
      "score": 8.75100989004793,
      "candidate": "from collections import Counter\n\n\ndef count_same_pair(a, b, c):\n    return len(\n        [k for k, v in Counter(a + b + c).items() if v >= 2]\n    )"
    },
    {
      "rank": 11,
      "score": 8.74343430596827,
      "candidate": "def count_same_pair(a, b, c):\n    \"\"\"\n    :type a: List[int]\n    :type b: List[int]\n    :type c: List[int]\n    :rtype: int\n    \"\"\"\n    # 1. Create a dict to record the number of a[i]\n    # 2. Iterate a, and record the number of a[i]\n    # 3. Iterate b, if b[i] in a[i], add the number of a[i]\n    # 4. Iterate c, if c[i] in a[i], add the number of a[i]\n    # 5. Return the sum\n\n    dict_a = dict()\n    for i in a:\n        if i in dict_a:\n            dict_a[i] += 1\n        else:\n            dict_a[i] = 1\n    res = 0\n    for i in b:\n        if i in dict_a:\n            res += dict_a[i]\n    for i in c:\n        if i in dict_a:\n            res += dict_a[i]\n    return res\n\n\nif __name__ == '__main__':\n    print(count_same_pair([1, 2, 3, 4, 5], [2, 4], [4, 5]))"
    },
    {
      "rank": 12,
      "score": 8.72735253130993,
      "candidate": "def count_same_pair(list1, list2, list3):\n    count = 0\n    for i in list1:\n        for j in list2:\n            for k in list3:\n                if i == j and j == k:\n                    count += 1\n    return count\n\n\nif __name__ == '__main__':\n    list1 = [1, 2, 3, 4, 5]\n    list2 = [1, 2, 3, 4, 5]\n    list3 = [1, 2, 3, 4, 5]\n    print(count_same_pair(list1, list2, list3))"
    },
    {
      "rank": 13,
      "score": 8.714515678988143,
      "candidate": "def count_pairs(list1, list2, list3):\n    dict = {}\n    count = 0\n    for i in range(len(list1)):\n        dict[list1[i]] = 0\n    for i in range(len(list1)):\n        dict[list1[i]] += 1\n    for i in range(len(list2)):\n        if list2[i] in dict:\n            count += dict[list2[i]]\n    for i in range(len(list3)):\n        if list3[i] in dict:\n            count += dict[list3[i]]\n    return count\n\n\nlist1 = [1, 2, 3, 4]\nlist2 = [1, 1, 1, 1]\nlist3 = [3, 1, 3, 3]\nprint(count_pairs(list1, list2, list3))"
    },
    {
      "rank": 14,
      "score": 8.709911058578045,
      "candidate": "def three_list_count(list_a, list_b, list_c):\n    # result = {}\n    # for a in list_a:\n    #     for b in list_b:\n    #         for c in list_c:\n    #             if a == b == c:\n    #                 result[a] = result.get(a, 0) + 1\n    # return result\n    result = {}\n    for a in list_a:\n        for b in list_b:\n            for c in list_c:\n                if a == b == c:\n                    result[a] = result.get(a, 0) + 1\n    return result\n\n\nprint(three_list_count([1, 2, 3, 3], [1, 1, 1, 2], [1, 2, 2, 2]))"
    },
    {
      "rank": 15,
      "score": 8.68298246895437,
      "candidate": "def count_same_pair(list1, list2, list3):\n    \"\"\"\n    :type list1: List[int]\n    :type list2: List[int]\n    :type list3: List[int]\n    :rtype: int\n    \"\"\"\n    if len(list1) != len(list2) or len(list2) != len(list3):\n        return 0\n\n    dict1 = {}\n    for i in range(len(list1)):\n        if list1[i] not in dict1:\n            dict1[list1[i]] = 1\n        else:\n            dict1[list1[i]] += 1\n\n    dict2 = {}\n    for i in range(len(list2)):\n        if list2[i] not in dict2:\n            dict2[list2[i]] = 1\n        else:\n            dict2[list2[i]] += 1\n\n    dict3 = {}\n    for i in range(len(list3)):\n        if list3[i] not in dict3:\n            dict3[list3[i]] = 1\n        else:\n            dict3[list3[i]] += 1\n\n    count = 0\n    for key in dict1:\n        if key in dict2 and key in dict3 and dict1[key] == dict2[key] and dict2[key] == dict3[key]:\n            count += 1\n\n    return count\n\n\nprint(count_same_pair([1,2,3,4], [1,2,3,4], [1,2,3,4]))\nprint(count_same_pair([1,2,3,4], [1,2,3,4], [1,2,3,4,5]))\nprint(count_same_pair([1,2,3,4], [1,2,3,4,5], [1,2,3,4,5]))\nprint(count_same_pair([1,2,3,4,5], [1,2,3,4], [1,2,3,4,5]))"
    },
    {
      "rank": 16,
      "score": 8.667000515898788,
      "candidate": "from collections import defaultdict\n\ndef count_same_pair(list1, list2, list3):\n    \"\"\"\n    :type list1: List[int]\n    :type list2: List[int]\n    :type list3: List[int]\n    :rtype: int\n    \"\"\"\n    count = 0\n    d = defaultdict(int)\n    for i in range(len(list1)):\n        d[str(list1[i])+str(list2[i])+str(list3[i])] += 1\n        if d[str(list1[i])+str(list2[i])+str(list3[i])] == 2:\n            count += 1\n    return count\n\nlist1 = [1,2,3,4,5,6,7,8,9]\nlist2 = [1,2,3,4,5,6,7,8,9]\nlist3 = [1,2,3,4,5,6,7,8,9]\n\nprint(count_same_pair(list1, list2, list3))"
    },
    {
      "rank": 17,
      "score": 8.658599752643113,
      "candidate": "def same_pair(list1, list2, list3):\n    # Fill this in.\n    # count = 0\n    # for item1 in list1:\n    #     for item2 in list2:\n    #         for item3 in list3:\n    #             if item1 == item2 == item3:\n    #                 count += 1\n    # return count\n    count = 0\n    for item1 in list1:\n        for item2 in list2:\n            if item1 == item2:\n                for item3 in list3:\n                    if item1 == item3:\n                        count += 1\n    return count\n\nif __name__ == \"__main__\":\n    print (same_pair([1, 2, 3, 4], [2, 3, 4], [2, 3, 4]))\n    print (same_pair([1, 2, 3, 4], [2, 3, 4], [4, 3, 2]))\n    print (same_pair([1, 2, 3, 4], [2, 3, 4], [2, 2, 2]))"
    },
    {
      "rank": 18,
      "score": 8.621830568208296,
      "candidate": "def same_pair(lst1, lst2, lst3):\n    count = 0\n    for i in lst1:\n        for j in lst2:\n            for k in lst3:\n                if i == j and j == k:\n                    count += 1\n    return count\n\n\nif __name__ == '__main__':\n    lst1 = [1, 2, 3, 4, 5, 6]\n    lst2 = [1, 2, 3, 4, 5, 6]\n    lst3 = [1, 2, 3, 4, 5, 6]\n    print(same_pair(lst1, lst2, lst3))"
    },
    {
      "rank": 19,
      "score": 8.549318891708259,
      "candidate": "def count_same_pair(list1, list2, list3):\n    count = 0\n    for i in range(len(list1)):\n        for j in range(len(list2)):\n            for k in range(len(list3)):\n                if list1[i] == list2[j] and list2[j] == list3[k]:\n                    count += 1\n    return count\n\n\ndef main():\n    print(count_same_pair([1, 2, 3], [2, 3, 4], [2, 3, 5]))\n    print(count_same_pair([1, 2, 3], [2, 3, 4], [2, 3, 3]))\n    print(count_same_pair([1, 2, 3], [2, 3, 4], [2, 3, 1]))\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 20,
      "score": 8.549249170041884,
      "candidate": "def count_same_pair(list1, list2, list3):\n    count = 0\n    for i in list1:\n        for j in list2:\n            for k in list3:\n                if i == j == k:\n                    count += 1\n    return count\n\n\nprint(count_same_pair([1, 2, 3, 4, 5], [1, 2, 3, 4], [1, 2, 3, 4]))\nprint(count_same_pair([1, 2, 3, 4, 5], [1, 2, 3, 4], [5, 6, 7, 8]))\nprint(count_same_pair([1, 2, 3, 4, 5], [1, 2, 3], [1, 2, 3, 4, 5]))"
    },
    {
      "rank": 21,
      "score": 8.535576170897073,
      "candidate": "def count_same_pair(list1, list2, list3):\n    count = 0\n    for i in range(len(list1)):\n        for j in range(len(list2)):\n            for k in range(len(list3)):\n                if list1[i] == list2[j] == list3[k]:\n                    count += 1\n    return count\n\n\nif __name__ == '__main__':\n    print(count_same_pair([1, 2, 3], [1, 2, 3], [1, 2, 3]))"
    },
    {
      "rank": 22,
      "score": 8.514613503198595,
      "candidate": "def count_same_pair(list1, list2, list3):\n    \"\"\"\n    :param list1: list of int\n    :param list2: list of int\n    :param list3: list of int\n    :return: int\n    \"\"\"\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list2[i] == list3[i]:\n            count += 1\n    return count\n\n\nprint(count_same_pair([1, 2, 3, 4, 5], [2, 3, 4, 5, 6], [3, 4, 5, 6, 7]))"
    },
    {
      "rank": 23,
      "score": 8.501534202846491,
      "candidate": "def count_same_pair(list1, list2, list3):\n    count = 0\n    for i in range(len(list1)):\n        for j in range(len(list2)):\n            for k in range(len(list3)):\n                if list1[i] == list2[j] == list3[k]:\n                    count += 1\n    return count\n\nif __name__ == '__main__':\n    list1 = [1, 2, 3, 4, 5]\n    list2 = [6, 2, 3, 6, 7]\n    list3 = [7, 1, 2, 3, 8]\n    print(count_same_pair(list1, list2, list3))"
    },
    {
      "rank": 24,
      "score": 8.494141245989535,
      "candidate": "def count_same_pair(list1, list2, list3):\n    count = 0\n    for i in range(len(list1)):\n        for j in range(len(list2)):\n            for k in range(len(list3)):\n                if list1[i] == list2[j] and list2[j] == list3[k]:\n                    count += 1\n    return count\n\nif __name__ == '__main__':\n    print(count_same_pair([1, 1, 1, 1, 2], [1, 1, 2, 2, 2], [2, 2, 2, 2, 2]))"
    },
    {
      "rank": 25,
      "score": 8.440530249270443,
      "candidate": "def count_same_pair(lst1, lst2, lst3):\n    counter = {}\n    for i in lst1:\n        for j in lst2:\n            if i == j:\n                if i not in counter:\n                    counter[i] = 0\n                counter[i] += 1\n    result = []\n    for k in lst3:\n        if k in counter:\n            result.append(counter[k])\n        else:\n            result.append(0)\n    return result\n\n\nprint count_same_pair([1, 1, 2, 3], [1, 2, 3], [1, 1, 1])\nprint count_same_pair([1, 2, 3, 4, 5], [2, 3, 4, 5, 6], [1, 2, 3, 4, 5])\nprint count_same_pair([1, 2, 3], [4, 5, 6], [7, 8, 9])"
    },
    {
      "rank": 26,
      "score": 8.376544726929183,
      "candidate": "from typing import List\n\n\ndef count_same_pair(list_1: List[int], list_2: List[int], list_3: List[int]) -> int:\n    \"\"\"Returns the count of same pair in three given lists.\"\"\"\n    if not list_1 or not list_2 or not list_3:\n        raise ValueError(\"Lists can not be empty.\")\n\n    count = 0\n    for i in list_1:\n        if i in list_2 and i in list_3:\n            count += 1\n\n    return count\n\n\nif __name__ == \"__main__\":\n    assert count_same_pair([1, 2, 3], [2, 3, 4], [3, 4, 5]) == 2\n    assert count_same_pair([1, 2, 3], [2, 3, 4], [3, 4, 5, 6]) == 1\n    assert count_same_pair([1, 2, 3], [2, 3, 4], [3, 4]) == 1"
    },
    {
      "rank": 27,
      "score": 8.359853257004394,
      "candidate": "def count_same_pair(list1, list2, list3):\n    # write your code here\n    result = 0\n    for i in list1:\n        for j in list2:\n            for k in list3:\n                if i == j and j == k:\n                    result += 1\n    return result\n\n\nprint(count_same_pair([1, 2, 3, 4], [3, 4, 5, 6], [3, 4, 5, 7]))"
    },
    {
      "rank": 28,
      "score": 8.298934901804929,
      "candidate": "def count_same_pairs(list1, list2, list3):\n    result = 0\n    for i in list1:\n        for j in list2:\n            for k in list3:\n                if i == j == k:\n                    result += 1\n    return result\n\n\nif __name__ == '__main__':\n    print(count_same_pairs([1, 2, 3, 4], [1, 2, 3, 4], [1, 2, 3, 4]))"
    },
    {
      "rank": 29,
      "score": 8.281381060964563,
      "candidate": "def count_same_pair(list1, list2, list3):\n    count = 0\n    for i in range(len(list1)):\n        for j in range(len(list2)):\n            for k in range(len(list3)):\n                if list1[i] == list2[j] == list3[k]:\n                    count += 1\n    return count\n\nlist1 = [1,2,3,4,5]\nlist2 = [2,3,4,5,6]\nlist3 = [3,4,5,6,7]\nprint count_same_pair(list1, list2, list3)"
    },
    {
      "rank": 30,
      "score": 8.248137064355717,
      "candidate": "def count_same_pair(l1, l2, l3):\n    \"\"\"\n    :type l1: List[int]\n    :type l2: List[int]\n    :type l3: List[int]\n    :rtype: int\n    \"\"\"\n    dict1 = dict()\n    dict2 = dict()\n    for i in l1:\n        dict1[i] = dict1.get(i, 0) + 1\n    for i in l2:\n        dict2[i] = dict2.get(i, 0) + 1\n    count = 0\n    for key, value in dict1.items():\n        if key in dict2:\n            count += min(dict2[key], value)\n    return count\n\nprint(count_same_pair([1,2,3], [2,3,4], [2,4,5]))"
    },
    {
      "rank": 31,
      "score": 8.235689624009979,
      "candidate": "def count_same_pair(list_1, list_2, list_3):\n    \"\"\"\n    :type list_1: List[int]\n    :type list_2: List[int]\n    :type list_3: List[int]\n    :rtype: int\n    \"\"\"\n    list_1.sort()\n    list_2.sort()\n    list_3.sort()\n    count = 0\n    for i in range(len(list_1)):\n        if list_1[i] == list_2[i] == list_3[i]:\n            count += 1\n    return count\n\n\ndef main():\n    print(count_same_pair([1, 2, 3], [1, 2, 3], [1, 2, 3]))\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 32,
      "score": 8.20998129960542,
      "candidate": "def count_same_pair(lst1, lst2, lst3):\n    cnt = 0\n    for i in lst1:\n        if i in lst2 and i in lst3:\n            cnt += 1\n    return cnt\n\n\nif __name__ == \"__main__\":\n    lst1 = [1, 2, 3, 4]\n    lst2 = [1, 2, 3, 4]\n    lst3 = [1, 2, 3, 4]\n    print(count_same_pair(lst1, lst2, lst3))"
    },
    {
      "rank": 33,
      "score": 8.110656306991977,
      "candidate": "def count_same_pair(list1, list2, list3):\n    # count the same pair in the three lists\n    count = 0\n    for i in list1:\n        if i in list2 and i in list3:\n            count += 1\n    return count\n\n\ndef test_count_same_pair():\n    assert count_same_pair([1, 2, 3], [3, 1, 2], [3, 2, 1]) == 2\n\n\nif __name__ == '__main__':\n    test_count_same_pair()"
    },
    {
      "rank": 34,
      "score": 8.09754452346105,
      "candidate": "def count_same_pair(list1, list2, list3):\n    # init\n    count = 0\n\n    # iterate list1\n    for item in list1:\n        # iterate list2\n        for item2 in list2:\n            # iterate list3\n            for item3 in list3:\n                # check same pair\n                if item == item2 == item3:\n                    count += 1\n\n    return count\n\n\nif __name__ == \"__main__\":\n    print(count_same_pair([1, 1, 2], [2, 3, 3], [3, 1, 2]))"
    },
    {
      "rank": 35,
      "score": 8.090399785952847,
      "candidate": "def count_same_pair(lst_a, lst_b, lst_c):\n    \"\"\"\n    :param lst_a: list a\n    :param lst_b: list b\n    :param lst_c: list c\n    :return: count of same pair\n    \"\"\"\n    count = 0\n    for i in range(len(lst_a)):\n        if lst_a[i] == lst_b[i] == lst_c[i]:\n            count += 1\n    return count\n\n\nif __name__ == \"__main__\":\n    lst_a = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]\n    lst_b = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]\n    lst_c = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]\n    print(count_same_pair(lst_a, lst_b, lst_c))"
    },
    {
      "rank": 36,
      "score": 8.03487637105721,
      "candidate": "def count_same_pair(list1, list2, list3):\n    count = 0\n    for item in list1:\n        if item in list2 and item in list3:\n            count += 1\n    return count\n\n#test\nlist1 = [1,2,3,4,5,6,7,8]\nlist2 = [2,3,4,5,6,7,8,9]\nlist3 = [3,4,5,6,7,8,9,10]\nprint(count_same_pair(list1, list2, list3))"
    },
    {
      "rank": 37,
      "score": 7.8680494592101855,
      "candidate": "def same_pair(list1, list2, list3):\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count\n\n\nif __name__ == '__main__':\n    print(same_pair([1, 1, 3], [1, 2, 3], [1, 4, 3]))"
    },
    {
      "rank": 38,
      "score": 3.926139092254469,
      "candidate": "def count_same_pair(list1, list2, list3):\n    \"\"\"\n    :param list1: list of str\n    :param list2: list of str\n    :param list3: list of str\n    :return: int\n    \"\"\"\n    # TODO: Write your own test case\n    list1_set = set(list1)\n    list2_set = set(list2)\n    list3_set = set(list3)\n    return len(list1_set & list2_set & list3_set)\n\nif __name__ == '__main__':\n    print(count_same_pair(['A', 'B', 'C'], ['A', 'B'], ['C', 'D']))\n    print(count_same_pair(['A', 'B', 'C'], ['A', 'B', 'C'], ['C', 'D']))\n    print(count_same_pair(['A', 'B', 'C'], ['A', 'B'], ['A', 'B', 'C']))"
    },
    {
      "rank": 39,
      "score": 3.7896064077536957,
      "candidate": "def count_same_pair(list1, list2, list3):\n    # Fill this in.\n\nprint count_same_pair([1, 2, 3], [2, 3, 4], [3, 4, 5])\n# 2\n\nprint count_same_pair([1, 2, 3], [2, 3, 4], [3, 4, 5])\n# 2"
    },
    {
      "rank": 40,
      "score": 3.782321827907003,
      "candidate": "def count_same_pair(list1, list2, list3):\n    # Fill this in.\n\nprint count_same_pair([1, 2, 3, 4, 5], [1, 2, 3, 4, 5], [1, 2, 3, 4, 5])\n# 15\n\nprint count_same_pair([1, 2, 3, 4], [1, 2, 3, 4], [1, 2, 3, 4])\n# 16\n\nprint count_same_pair([1, 2, 3], [4, 5, 6], [7, 8, 9])\n# 0"
    },
    {
      "rank": 41,
      "score": 3.7690182832329846,
      "candidate": "from collections import defaultdict\n\n\n# Time complexity is O(n), where n is the number of elements in all lists.\n# Space complexity is O(n).\ndef count_pairs(list1, list2, list3):\n    # Create a dictionary to record the elements and their counts.\n    element_dict = defaultdict(int)\n    for element in list1:\n        element_dict[element] += 1\n    for element in list2:\n        element_dict[element] += 1\n    for element in list3:\n        element_dict[element] += 1\n\n    # Count the number of same pairs.\n    count = 0\n    for element in element_dict:\n        if element_dict[element] >= 3:\n            count += element_dict[element] - 2\n\n    return count\n\n\n# Time complexity is O(n), where n is the number of elements in all lists.\n# Space complexity is O(1).\ndef count_pairs_2(list1, list2, list3):\n    count = 0\n    for element in list1:\n        if element in list2 and element in list3:\n            count += 1\n    return count\n\n\n# Time complexity is O(n), where n is the number of elements in all lists.\n# Space complexity is O(1).\ndef count_pairs_3(list1, list2, list3):\n    count = 0\n    for element in list1:\n        if element in list2 and element in list3:\n            count += 1\n    return count\n\n\nif __name__ == '__main__':\n    print(count_pairs([1, 2, 3, 3, 3, 4, 5, 5], [1, 2, 2, 3, 4, 5, 5, 5], [1, 2, 2, 3, 4, 4, 5, 5]))\n    print(count_pairs_2([1, 2, 3, 3, 3, 4, 5, 5], [1, 2, 2, 3, 4, 5, 5,"
    },
    {
      "rank": 42,
      "score": 3.761514928204013,
      "candidate": "def count_same_pair(l1, l2, l3):\n    # TODO: Write your code here\n    count = 0\n    for num1 in l1:\n        for num2 in l2:\n            for num3 in l3:\n                if num1 == num2 == num3:\n                    count += 1\n    return count\n\n\ndef main():\n    print(count_same_pair([1, 2, 3], [2, 3, 4], [3, 4, 5]))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 43,
      "score": 3.738947022370758,
      "candidate": "def count_same_pair(list_1, list_2, list_3):\n    # Count number of same pairs.\n    count = 0\n    for i in range(len(list_1)):\n        if list_1[i] == list_2[i] and list_1[i] == list_3[i]:\n            count += 1\n    return count\n\n\ndef main():\n    print(count_same_pair([1, 2, 3], [1, 2, 3], [1, 2, 3]))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 44,
      "score": 3.732824384460777,
      "candidate": "def count_same_pair(l1, l2, l3):\n    # Fill this in.\n\nprint count_same_pair([1, 2, 3], [2, 3, 4], [2, 3, 4])\n# 2\n\nprint count_same_pair([1, 2, 3], [2, 3, 4], [1, 2, 3])\n# 1\n\nprint count_same_pair([1, 2, 3], [2, 3, 4], [3, 4, 5])\n# 0"
    },
    {
      "rank": 45,
      "score": 3.501766448946012,
      "candidate": "from collections import defaultdict\n\n\ndef count_same_pair(l1, l2, l3):\n    count = 0\n    d = defaultdict(int)\n    for n1, n2, n3 in zip(l1, l2, l3):\n        d[(n1, n2)] += n3\n    for key in d:\n        if d[key] > 0:\n            count += 1\n    return count\n\n\nif __name__ == \"__main__\":\n    l1 = [1, 2, 3, 4, 5]\n    l2 = [1, 2, 3, 4, 5]\n    l3 = [1, 2, 3, 4, 5]\n    assert count_same_pair(l1, l2, l3) == 5\n    l1 = [1, 2, 3, 4, 5]\n    l2 = [1, 2, 3, 4, 5]\n    l3 = [1, 2, 3, 4, 5]\n    assert count_same_pair(l1, l2, l3) == 5\n    l1 = [1, 2, 3, 4, 5]\n    l2 = [1, 2, 3, 4, 5]\n    l3 = [1, 2, 3, 4, 5]\n    assert count_same_pair(l1, l2, l3) == 5\n    l1 = [1, 2, 3, 4, 5]\n    l2 = [1, 2, 3, 4, 5]\n    l3 = [1, 2, 3, 4, 5]\n    assert count_same_pair(l1, l2, l3) == 5\n    l1 = [1, 2, 3, 4, 5]\n    l2 = [1, 2, 3, 4, 5]\n    l3 = [1, 2, 3, 4, 5]\n    assert count_same_pair(l1"
    },
    {
      "rank": 46,
      "score": 3.4843224952664444,
      "candidate": "def same_pair_count(list1, list2, list3):\n    \"\"\"\n    :type list1: List[int]\n    :type list2: List[int]\n    :type list3: List[int]\n    :rtype: int\n    \"\"\"\n    # init a dict to store the count of same pair\n    count = {}\n\n    for i in range(len(list1)):\n        for j in range(len(list2)):\n            for k in range(len(list3)):\n                if list1[i] == list2[j] == list3[k]:\n                    if list1[i] in count:\n                        count[list1[i]] += 1\n                    else:\n                        count[list1[i]] = 1\n\n    return sum(count.values())\n\n\ndef test_same_pair_count():\n    assert same_pair_count([1,2,3], [2,1,3], [1,3,2]) == 2\n\nif __name__ == '__main__':\n    test_same_pair_count()"
    },
    {
      "rank": 47,
      "score": 3.410951252187612,
      "candidate": "def three_pair_count(l1, l2, l3):\n    \"\"\"\n    :param l1: list of integers\n    :param l2: list of integers\n    :param l3: list of integers\n    :return: number of same pairs in three lists\n    \"\"\"\n    # TODO: Write your solution here\n    l1_l2 = l1 + l2\n    l1_l2_l3 = l1_l2 + l3\n    return len(set(l1_l2_l3)) - len(set(l1_l2))\n\n\ndef three_pair_count_v2(l1, l2, l3):\n    \"\"\"\n    :param l1: list of integers\n    :param l2: list of integers\n    :param l3: list of integers\n    :return: number of same pairs in three lists\n    \"\"\"\n    l1_l2 = set(l1 + l2)\n    l1_l2_l3 = set(l1_l2 + l3)\n    return len(l1_l2_l3) - len(l1_l2)\n\n\nprint(three_pair_count([1, 2, 3], [4, 5, 6], [7, 8, 9]))\nprint(three_pair_count_v2([1, 2, 3], [4, 5, 6], [7, 8, 9]))"
    },
    {
      "rank": 48,
      "score": 3.406262911197099,
      "candidate": "def count_same_pair(list1, list2, list3):\n    # Fill this in.\n\nprint count_same_pair([1,2,3], [1,2,3], [1,2,3])\n# 9\n\nprint count_same_pair([1,2,3], [2,3,4], [2,3,4])\n# 6\n\nprint count_same_pair([1,2,3], [2,3,4], [1,3,4])\n# 4\n\nprint count_same_pair([1,2,3], [2,3,4], [1,2,4])\n# 3\n\nprint count_same_pair([1,2,3], [2,3,4], [1,2,5])\n# 1"
    },
    {
      "rank": 49,
      "score": 3.3238442690503462,
      "candidate": "def count_same_pair(list1, list2, list3):\n    # Fill this in.\n\nprint count_same_pair([1, 2, 3], [2, 3, 4], [3, 4, 5])\n# 1\n\nprint count_same_pair([1, 2, 3], [1, 2, 3], [1, 2, 3])\n# 3\n\nprint count_same_pair([1, 2, 3], [2, 3, 4], [3, 4, 5])\n# 1"
    },
    {
      "rank": 50,
      "score": 3.2712800217929825,
      "candidate": "from typing import List\n\n\nclass Solution:\n    def count_pairs(self, list1: List[int], list2: List[int], list3: List[int]) -> int:\n        \"\"\"\n        Two pointers\n        \"\"\"\n        list1.sort()\n        list2.sort()\n        list3.sort()\n        i, j, k = 0, 0, 0\n        count = 0\n        while i < len(list1) and j < len(list2) and k < len(list3):\n            if list1[i] + list2[j] == list3[k]:\n                count += 1\n                k += 1\n                while k < len(list3) and list1[i] + list2[j] == list3[k]:\n                    k += 1\n            elif list1[i] + list2[j] < list3[k]:\n                i += 1\n                while i < len(list1) and list1[i] == list1[i - 1]:\n                    i += 1\n            else:\n                j += 1\n                while j < len(list2) and list2[j] == list2[j - 1]:\n                    j += 1\n        return count\n\n\nif __name__ == \"__main__\":\n    assert Solution().count_pairs([1, 2, 3, 4], [1, 2, 3, 4], [1, 1, 3, 4, 5]) == 2"
    },
    {
      "rank": 51,
      "score": 3.256633716556678,
      "candidate": "from collections import defaultdict\n\n\n# Time complexity O(n*m*l)\ndef count_same_pair(list_a, list_b, list_c):\n    counter = defaultdict(int)\n    for a, b, c in zip(list_a, list_b, list_c):\n        counter[(a, b, c)] += 1\n\n    return counter\n\n\n# Time complexity O(n+m+l)\ndef count_same_pair_2(list_a, list_b, list_c):\n    counter = defaultdict(int)\n    for i in range(len(list_a)):\n        counter[(list_a[i], list_b[i], list_c[i])] += 1\n\n    return counter\n\n\n# Time complexity O(n+m+l)\ndef count_same_pair_3(list_a, list_b, list_c):\n    counter = defaultdict(int)\n    for i in range(len(list_a)):\n        counter[(list_a[i], list_b[i], list_c[i])] += 1\n\n    return counter\n\n\nif __name__ == \"__main__\":\n    list_a = [1, 2, 3, 4, 5, 6, 7]\n    list_b = [7, 6, 5, 4, 3, 2, 1]\n    list_c = [1, 2, 3, 4, 5, 6, 7]\n    print(count_same_pair(list_a, list_b, list_c))\n    print(count_same_pair_2(list_a, list_b, list_c))\n    print(count_same_pair_3(list_a, list_b, list_c))"
    },
    {
      "rank": 52,
      "score": 3.2483570765056164,
      "candidate": "def count_same_pair(list_a, list_b, list_c):\n    count = 0\n\n    for item in list_a:\n        for item2 in list_b:\n            for item3 in list_c:\n                if item == item2 == item3:\n                    count += 1\n\n    return count\n\n\nassert count_same_pair([1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]) == 0\nassert count_same_pair([1, 2, 3, 4], [5, 6, 7, 8], [8, 10, 11, 12]) == 1\nassert count_same_pair([1, 2, 3, 4], [5, 6, 7, 8], [5, 10, 11, 12]) == 2"
    },
    {
      "rank": 53,
      "score": 3.1878490091728358,
      "candidate": "class Solution:\n    def countPairs(self, nums1: List[int], nums2: List[int], nums3: List[int]) -> int:\n        \"\"\"\n        @param nums1: a list of integers\n        @param nums2: a list of integers\n        @param nums3: a list of integers\n        @return: the number of valid triplets\n        \"\"\"\n        # Write your code here\n        from collections import defaultdict\n        d = defaultdict(int)\n        for num in nums1:\n            d[num] += 1\n\n        cnt = 0\n        for num in nums2:\n            if d[num] > 0:\n                cnt += d[num]\n\n        for num in nums3:\n            if d[num] > 0:\n                cnt += d[num] - 1\n        return cnt"
    },
    {
      "rank": 54,
      "score": 3.178556285755873,
      "candidate": "def count_same_pair(list1, list2, list3):\n    dict = {}\n    for i in range(len(list1)):\n        for j in range(len(list2)):\n            for k in range(len(list3)):\n                if list1[i] == list2[j] and list1[i] == list3[k]:\n                    if list1[i] not in dict:\n                        dict[list1[i]] = 1\n                    else:\n                        dict[list1[i]] += 1\n    return dict\n\n\nprint(count_same_pair([1,2,3,4,5], [1,6,3,7,5], [1,6,3,7,5]))\nprint(count_same_pair([1,2,3,4,5], [1,6,3,7,5], [1,6,3]))\nprint(count_same_pair([1,2,3,4,5], [1,6,3,7,5], [1,6,3,7,5,6]))\nprint(count_same_pair([1,2,3,4,5], [1,6,3,7,5], [1,6,3,7,5,6,7]))\nprint(count_same_pair([1,2,3,4,5], [1,6,3,7,5], [1,6,3,7,5,6,7,8]))"
    },
    {
      "rank": 55,
      "score": 3.1718091447842305,
      "candidate": "def same_pair(list1, list2, list3):\n    # TODO: Write your solution here\n    return\n\n\ndef main():\n    list1 = [1, 2, 3, 4, 5, 6, 7]\n    list2 = [7, 6, 5, 4, 3, 2, 1]\n    list3 = [1, 2, 3, 4, 5, 6, 7]\n\n    print(same_pair(list1, list2, list3))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 56,
      "score": 3.165631715701782,
      "candidate": "def count_same_pair(list1, list2, list3):\n    # Fill this in.\n\nprint count_same_pair([1,2,3], [1,2,3], [1,2,3])\n# 9\n\nprint count_same_pair([1,2,3], [2,3,4], [3,4,5])\n# 6\n\nprint count_same_pair([1,2,3], [2,3,4], [5,6,7])\n# 0"
    },
    {
      "rank": 57,
      "score": 3.1643755548298422,
      "candidate": "def count_same_pair(a, b, c):\n    \"\"\"\n    :type a: List[int]\n    :type b: List[int]\n    :type c: List[int]\n    :rtype: int\n    \"\"\"\n    # 1. \u628aa b c\u6392\u5e8f\uff0c\u65f6\u95f4\u590d\u6742\u5ea6O(nlogn)\n    # 2. \u4ece\u7b2c\u4e00\u4e2a\u5143\u7d20\u5f00\u59cb\u904d\u5386\uff0c\u65f6\u95f4\u590d\u6742\u5ea6O(n)\n    # 3. \u628aa b c\u4e2d\u7684\u5f53\u524d\u5143\u7d20\u4e0e\u7b2c\u4e00\u4e2a\u5143\u7d20\u8fdb\u884c\u6bd4\u8f83\uff0c\u65f6\u95f4\u590d\u6742\u5ea6O(n)\n    # 4. \u5f53a b c\u4e2d\u7684\u5f53\u524d\u5143\u7d20\u4e0e\u7b2c\u4e00\u4e2a\u5143\u7d20\u76f8\u7b49\u65f6\uff0c\u628a\u4e24\u4e2a\u5217\u8868\u4e2d\u7684\u5f53\u524d\u5143\u7d20\u5220\u9664\n    # 5. \u65f6\u95f4\u590d\u6742\u5ea6O(nlogn)\n\n    a.sort()\n    b.sort()\n    c.sort()\n    count = 0\n    for i in range(len(a)):\n        if a[i] == b[0] and a[i] == c[0]:\n            a.remove(a[i])\n            b.remove(b[0])\n            c.remove(c[0])\n            count += 1\n    return count\n\n\nif __name__ == '__main__':\n    print(count_same_pair([1, 2, 3], [1, 3, 5], [1, 4, 6]))"
    },
    {
      "rank": 58,
      "score": 3.1620419846973977,
      "candidate": "def count_same_pair(list_a, list_b, list_c):\n    count = 0\n    for i in range(len(list_a)):\n        if list_a[i] == list_b[i] and list_b[i] == list_c[i]:\n            count += 1\n    return count\n\n\n# test case\nlist_a = [1, 1, 1, 1]\nlist_b = [1, 2, 3, 4]\nlist_c = [1, 2, 3, 4]\nprint(count_same_pair(list_a, list_b, list_c)) # 4"
    },
    {
      "rank": 59,
      "score": 3.104431797502378,
      "candidate": "def count_same_pair(list1, list2, list3):\n    # Fill this in.\n\nprint count_same_pair([1, 2, 3, 4], [1, 2, 3, 4], [1, 2, 3, 4])\n# 16\n\nprint count_same_pair([1, 2, 3], [4, 5, 6], [7, 8, 9])\n# 0"
    },
    {
      "rank": 60,
      "score": 3.055461294854933,
      "candidate": "def count_same_pairs(list1, list2, list3):\n    result = 0\n    for i in range(len(list1)):\n        for j in range(len(list2)):\n            for k in range(len(list3)):\n                if list1[i] == list2[j] == list3[k]:\n                    result += 1\n    return result\n\n\nif __name__ == \"__main__\":\n    list1 = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    list2 = [2, 3, 4, 5, 6, 7, 8, 9, 10]\n    list3 = [3, 4, 5, 6, 7, 8, 9, 10, 11]\n    print(count_same_pairs(list1, list2, list3))"
    },
    {
      "rank": 61,
      "score": 3.0485387746740202,
      "candidate": "class Solution(object):\n    def count(self, A, B, C):\n        \"\"\"\n        :type A: List[int]\n        :type B: List[int]\n        :type C: List[int]\n        :rtype: int\n        \"\"\"\n        # \u96c6\u5408\u5e76\u4e14\u53d6\u4ea4\u96c6\n        return len(set(A) & set(B) & set(C))"
    },
    {
      "rank": 62,
      "score": 3.045880388267751,
      "candidate": "from collections import defaultdict\n\ndef same_pair(list1, list2, list3):\n    count = defaultdict(int)\n    for i in range(len(list1)):\n        count[(list1[i], list2[i], list3[i])] += 1\n    return count\n\nprint(same_pair([1,2,3,4,5],[1,2,3,4,5],[1,2,3,4,5]))\n\n\"\"\"\nWrite a function to count the same triplets in three given lists.\n\"\"\"\ndef same_triplets(list1, list2, list3):\n    count = defaultdict(int)\n    for i in range(len(list1)):\n        count[(list1[i], list2[i], list3[i])] += 1\n    return count\n\nprint(same_triplets([1,2,3,4,5],[1,2,3,4,5],[1,2,3,4,5]))\n\n\"\"\"\nWrite a function to count the same quadruplets in four given lists.\n\"\"\"\ndef same_quadruplets(list1, list2, list3, list4):\n    count = defaultdict(int)\n    for i in range(len(list1)):\n        count[(list1[i], list2[i], list3[i], list4[i])] += 1\n    return count\n\nprint(same_quadruplets([1,2,3,4,5],[1,2,3,4,5],[1,2,3,4,5],[1,2,3,4,5]))\n\n\"\"\"\nWrite a function to count the same quintuplets in five given lists.\n\"\"\"\ndef same_quintuplets(list1, list2, list3, list4, list5):\n    count = defaultdict(int)\n    for i in range(len(list1)):\n        count[(list1[i], list2[i], list3[i], list4[i], list5[i])] += 1\n    return count\n\nprint(same_quintuplets([1,2,3,4,5"
    },
    {
      "rank": 63,
      "score": 3.043523534119086,
      "candidate": "def count_same_pair(list1, list2, list3):\n    # Fill this in.\n\nprint count_same_pair([1, 1, 1, 2], [1, 2, 2, 2], [1, 2, 2, 2])\n# 4\n\nprint count_same_pair([1, 2, 3, 4], [1, 2, 3, 4], [1, 2, 3, 4])\n# 4\n\nprint count_same_pair([1, 2, 3, 4], [1, 2, 3, 4], [1, 2, 3, 4])\n# 4\n\nprint count_same_pair([1, 2, 3, 4], [1, 2, 3, 4], [1, 2, 3, 4])\n# 4\n\nprint count_same_pair([1, 2, 3, 4], [1, 2, 3, 4], [1, 2, 3, 4])\n# 4"
    },
    {
      "rank": 64,
      "score": 3.033764102343962,
      "candidate": "def count_same_pair(list1, list2, list3):\n    # Fill this in.\n\nprint count_same_pair([1, 2, 3], [1, 2, 3], [1, 2, 3])\n# 9\n\nprint count_same_pair([1, 2, 3], [3, 4, 5], [3, 4, 5])\n# 9\n\nprint count_same_pair([1, 2, 3], [1, 2, 3], [3, 4, 5])\n# 0\n\nprint count_same_pair([1, 2, 3], [1, 2], [3, 4, 5])\n# 0\n\nprint count_same_pair([1, 2], [2, 3], [1, 2, 3])\n# 2"
    },
    {
      "rank": 65,
      "score": 2.982086980445024,
      "candidate": "from typing import List\n\n\nclass Solution:\n    def countPairs(self, nums1: List[int], nums2: List[int], nums3: List[int]) -> int:\n        \"\"\"\n        nums1 = [1,2,3,4,5,6,7,8,9]\n        nums2 = [1,2,3,4,5,6,7,8,9]\n        nums3 = [1,2,3,4,5,6,7,8,9]\n        \"\"\"\n        count = 0\n        for i in range(len(nums1)):\n            for j in range(len(nums2)):\n                for k in range(len(nums3)):\n                    if nums1[i] == nums2[j] == nums3[k]:\n                        count += 1\n        return count\n\n    def countPairs(self, nums1: List[int], nums2: List[int], nums3: List[int]) -> int:\n        \"\"\"\n        nums1 = [1,2,3,4,5,6,7,8,9]\n        nums2 = [1,2,3,4,5,6,7,8,9]\n        nums3 = [1,2,3,4,5,6,7,8,9]\n        \"\"\"\n        count = 0\n        d = {}\n        for i in range(len(nums1)):\n            for j in range(len(nums2)):\n                if nums1[i] + nums2[j] in d:\n                    count += d[nums1[i] + nums2[j]]\n                if nums2[j] + nums1[i] in d:\n                    count += d[nums2[j] + nums1[i]]\n                d[nums1[i] + nums2[j]] = d.get(nums1[i] + nums2[j], 0) + 1\n        for i in range(len(nums2)):\n            for j in range(len(nums3)):\n                if nums"
    },
    {
      "rank": 66,
      "score": 2.963994939209833,
      "candidate": "from collections import Counter\n\ndef count_same_pair(lst1, lst2, lst3):\n    \"\"\"\n    :type lst1: List[int]\n    :type lst2: List[int]\n    :type lst3: List[int]\n    :rtype: int\n    \"\"\"\n    cnt = Counter()\n    for i in lst1:\n        for j in lst2:\n            for k in lst3:\n                if i == j and j == k:\n                    cnt[i] += 1\n    return sum(cnt.values())\n\n\ndef test_count_same_pair():\n    assert count_same_pair([1, 2, 3], [1, 2, 3], [1, 2, 3]) == 9\n    assert count_same_pair([1, 2, 3], [1, 2, 3], [1, 2, 4]) == 3\n    assert count_same_pair([1, 2, 3], [1, 2, 3], [1, 2, 3, 4]) == 9\n    assert count_same_pair([1, 2, 3], [1, 2, 3, 4], [1, 2, 3]) == 9\n    assert count_same_pair([1, 2, 3], [1, 2, 3, 4], [1, 2, 3, 4]) == 12\n    assert count_same_pair([1, 2, 3, 4], [1, 2, 3], [1, 2, 3]) == 9\n    assert count_same_pair([1, 2, 3, 4], [1, 2, 3], [1, 2, 3, 4]) == 12\n    assert count_same_pair([1, 2, 3, 4], [1, 2, 3, 4], [1, 2, 3]) == 12\n    assert count_same_pair([1, 2, 3, 4], [1, 2, 3, 4], ["
    },
    {
      "rank": 67,
      "score": 2.94217585880588,
      "candidate": "def three_pair_count(a, b, c):\n    # Fill this in.\n\na = [1, 2, 3, 4]\nb = [1, 2, 3, 4]\nc = [1, 2, 3, 4]\nprint(three_pair_count(a, b, c))\n# 16\n\na = [1, 2, 3, 4]\nb = [1, 2, 3, 4]\nc = [2, 3, 4, 5]\nprint(three_pair_count(a, b, c))\n# 12\n\na = [1, 2, 3, 4]\nb = [1, 2, 3, 4]\nc = [3, 4, 5, 6]\nprint(three_pair_count(a, b, c))\n# 4\n\na = [1, 2, 3, 4]\nb = [1, 2, 3, 4]\nc = [5, 6, 7, 8]\nprint(three_pair_count(a, b, c))\n# 0\n\n\ndef three_pair_count(a, b, c):\n    # Fill this in.\n    result = 0\n    a_set = set(a)\n    b_set = set(b)\n    c_set = set(c)\n    for elem in a_set.intersection(b_set).intersection(c_set):\n        if a.count(elem) == b.count(elem) == c.count(elem):\n            result += a.count(elem)\n    return result\n\n\na = [1, 2, 3, 4]\nb = [1, 2, 3, 4]\nc = [1, 2, 3, 4]\nprint(three_pair_count(a, b, c))\n# 16\n\na = [1, 2, 3, 4]\nb = [1, 2, 3, 4]\nc = [2, 3,"
    },
    {
      "rank": 68,
      "score": 2.930867849414408,
      "candidate": "def three_pair_count(list1, list2, list3):\n    # Fill this in.\n    count = 0\n    for i in list1:\n        for j in list2:\n            for k in list3:\n                if i == j and j == k:\n                    count += 1\n    return count\n\nprint three_pair_count([1,2,3], [2,3,4], [3,4,5])\n# 2\n\nprint three_pair_count([1,2,3], [2,3,4], [3,1,5])\n# 1\n\nprint three_pair_count([1,2,3], [2,3,4], [5,4,3])\n# 0"
    },
    {
      "rank": 69,
      "score": 2.9071705116680913,
      "candidate": "def count_same_pair(a, b, c):\n    \"\"\"\n    :type a: List[int]\n    :type b: List[int]\n    :type c: List[int]\n    :rtype: int\n    \"\"\"\n    # 28 ms\n    count = 0\n    for i in a:\n        for j in b:\n            for k in c:\n                if i == j == k:\n                    count += 1\n    return count\n\n    # 28 ms\n    # return sum([1 for i in a for j in b for k in c if i == j == k])\n\n    # 24 ms\n    # return sum(map(lambda x: x[0] == x[1] == x[2], zip(a, b, c)))\n\n    # 28 ms\n    # return sum([1 for i in map(lambda x: x[0] == x[1] == x[2], zip(a, b, c)) if i])\n\n    # 24 ms\n    # return sum(map(lambda x: 1 if x[0] == x[1] == x[2] else 0, zip(a, b, c)))\n\n    # 24 ms\n    # return sum(map(lambda x: 1 if x[0] == x[1] == x[2] else 0, zip(a, b, c)))\n\n    # 24 ms\n    # return sum([1 for i in zip(a, b, c) if i[0] == i[1] == i[2]])\n\n    # 20 ms\n    # return sum([1 for i in zip(a, b, c) if i[0] == i[1] == i[2]])\n\n    # 20 ms\n    # return sum([1 for i in zip(a, b, c) if i[0] == i[1] == i[2]])"
    },
    {
      "rank": 70,
      "score": 2.890164056081244,
      "candidate": "def same_pair(list_a, list_b, list_c):\n    # TODO: Write your solution here\n    count = 0\n    for i in list_a:\n        for j in list_b:\n            for k in list_c:\n                if i == j == k:\n                    count += 1\n    return count\n\n\n# Tests\nprint(same_pair([1, 1, 2, 3], [1, 2, 2, 3], [1, 2, 3, 3]))\nprint(same_pair([1, 2, 3], [4, 5, 6], [7, 8, 9]))"
    },
    {
      "rank": 71,
      "score": 2.887111849756732,
      "candidate": "class Solution:\n    def countPairs(self, nums1, nums2, nums3):\n        \"\"\"\n        :type nums1: List[int]\n        :type nums2: List[int]\n        :type nums3: List[int]\n        :rtype: int\n        \"\"\"\n        def count(nums):\n            counter = dict()\n            for num in nums:\n                counter[num] = counter.get(num, 0) + 1\n            return counter\n\n        counter1 = count(nums1)\n        counter2 = count(nums2)\n        counter3 = count(nums3)\n        ans = 0\n        for k1, v1 in counter1.items():\n            for k2, v2 in counter2.items():\n                for k3, v3 in counter3.items():\n                    if k1 + k2 == k3:\n                        ans += v1 * v2 * v3\n        return ans\n\n\nif __name__ == '__main__':\n    print(Solution().countPairs([1, 2], [2, 3], [3, 4]))"
    },
    {
      "rank": 72,
      "score": 2.882923312638332,
      "candidate": "class Solution(object):\n    def countPairs(self, nums1, nums2, nums3):\n        \"\"\"\n        :type nums1: List[int]\n        :type nums2: List[int]\n        :type nums3: List[int]\n        :rtype: int\n        \"\"\"\n        def count(nums, n):\n            count = [0] * n\n            for num in nums:\n                count[num] += 1\n            return count\n        count1 = count(nums1, 1001)\n        count2 = count(nums2, 1001)\n        count3 = count(nums3, 1001)\n        total = 0\n        for i in range(1, 1001):\n            for j in range(1, 1001):\n                if i + j > 1000:\n                    break\n                if count1[i] and count2[j] and count3[i + j]:\n                    total += count1[i] * count2[j] * count3[i + j]\n        return total"
    },
    {
      "rank": 73,
      "score": 2.8504963247670663,
      "candidate": "from collections import Counter\n\n\ndef count_same_pair(list1, list2, list3):\n    \"\"\"\n    :type list1: List[int]\n    :type list2: List[int]\n    :type list3: List[int]\n    :rtype: int\n    \"\"\"\n    count = 0\n    dict1 = Counter(list1)\n    dict2 = Counter(list2)\n    dict3 = Counter(list3)\n    for k in dict1:\n        if dict1[k] == dict2[k] == dict3[k]:\n            count += dict1[k]\n    return count\n\n\ndef test_count_same_pair():\n    assert count_same_pair([1, 2, 3], [1, 2, 3], [1, 2, 3]) == 6\n    assert count_same_pair([1, 1, 3, 3, 2, 2], [1, 3, 2, 3, 1, 3], [2, 3, 1, 3, 2, 1]) == 4\n    assert count_same_pair([1, 2], [1], [2]) == 1\n    assert count_same_pair([1, 2], [2], [1]) == 1\n    assert count_same_pair([1], [2], [1]) == 0\n    assert count_same_pair([1], [2], [2]) == 0\n    assert count_same_pair([1, 2, 3], [4, 5, 6], [7, 8, 9]) == 0\n\n\nif __name__ == '__main__':\n    test_count_same_pair()"
    },
    {
      "rank": 74,
      "score": 2.8494481522053556,
      "candidate": "def count_same_pair(list_a, list_b, list_c):\n    # Fill this in.\n    count = 0\n    for i in list_a:\n        if i in list_b and i in list_c:\n            count += 1\n    return count\n\n\nif __name__ == \"__main__\":\n    input_a = input().strip().split()\n    input_b = input().strip().split()\n    input_c = input().strip().split()\n    count = count_same_pair(input_a, input_b, input_c)\n    print(count)"
    },
    {
      "rank": 75,
      "score": 2.8453938120743927,
      "candidate": "def three_pair_count(list1, list2, list3):\n    count = 0\n    for i in list1:\n        for j in list2:\n            for k in list3:\n                if i == j == k:\n                    count += 1\n    return count\n\n\n# test\nlist1 = [1, 2, 3, 4]\nlist2 = [1, 2, 3, 4]\nlist3 = [1, 2, 3, 4]\nprint three_pair_count(list1, list2, list3)"
    },
    {
      "rank": 76,
      "score": 2.8074588597918417,
      "candidate": "def count_pairs(list1, list2, list3):\n    # Fill this in.\n\nprint count_pairs([1, 2, 3, 4], [1, 2, 3, 4], [1, 2, 3, 4])\n# 12\n\nprint count_pairs([1, 2, 3], [1, 2, 3], [1, 2, 3])\n# 6\n\nprint count_pairs([1, 2, 3, 4], [1, 2, 3], [1, 2, 3, 4])\n# 10\n\nprint count_pairs([1, 2, 3], [1, 2, 3, 4], [1, 2, 3])\n# 6\n\nprint count_pairs([1, 2, 3], [1, 2, 3], [1, 2, 3])\n# 9\n\nprint count_pairs([1, 2, 3], [1, 2, 3], [1, 2, 3, 4])\n# 12\n\nprint count_pairs([1, 2, 3, 4], [1, 2, 3, 4], [1, 2, 3])\n# 12\n\nprint count_pairs([1, 2, 3], [1, 2, 3], [1, 2, 3, 4, 5])\n# 9\n\nprint count_pairs([1, 2, 3, 4, 5], [1, 2, 3, 4, 5], [1, 2, 3])\n# 15\n\nprint count_pairs([1, 2, 3, 4], [1, 2, 3], [1, 2, 3, 4, 5])\n# 12\n\nprint count_pairs([1, 2, 3, 4], [1, 2, 3, 4, 5], [1, 2, 3, 4, 5])"
    },
    {
      "rank": 77,
      "score": 2.769680614520106,
      "candidate": "from collections import Counter\n\ndef count_same_pair(list1, list2, list3):\n    \"\"\"\n    :type list1: List[int]\n    :type list2: List[int]\n    :type list3: List[int]\n    :rtype: int\n    \"\"\"\n    if not list1 or not list2 or not list3:\n        return 0\n\n    counter = Counter(list1)\n    count = 0\n\n    for num in list2:\n        if num in counter and num in list3:\n            count += 1\n            counter[num] -= 1\n\n    return count\n\n\ndef test_count_same_pair():\n    assert count_same_pair([1, 2, 3], [1, 2, 3], [1, 1, 3]) == 2\n\nif __name__ == '__main__':\n    test_count_same_pair()"
    },
    {
      "rank": 78,
      "score": 2.768291153593769,
      "candidate": "def count_same_pair(list1, list2, list3):\n    # Fill this in.\n\nprint count_same_pair([1, 2, 3, 4, 5], [1, 2, 3, 4], [1, 2, 3, 4, 5])\n# 4\n\nprint count_same_pair([1, 2, 3, 4], [1, 2, 3, 4, 5], [1, 2, 3, 4])\n# 3\n\nprint count_same_pair([1, 2, 3, 4], [1, 2, 3, 4], [1, 2, 3, 4])\n# 3\n\nprint count_same_pair([1, 2, 3], [4, 5, 6], [7, 8, 9])\n# 0"
    },
    {
      "rank": 79,
      "score": 2.7671351232148718,
      "candidate": "def count_pairs(list1, list2, list3):\n    return len([i for i in list1 if i in list2 and i in list3])\n\n\nprint(count_pairs([1, 1, 2, 3, 5], [1, 2, 3, 4, 5], [1, 3, 4, 5, 6]))\n\n\ndef count_pairs_v2(list1, list2, list3):\n    return len([i for i in list1 if i in list2 and i in list3])\n\n\nprint(count_pairs_v2([1, 1, 2, 3, 5], [1, 2, 3, 4, 5], [1, 3, 4, 5, 6]))"
    },
    {
      "rank": 80,
      "score": 2.765262807032524,
      "candidate": "def three_pair_count(l1, l2, l3):\n    # type: (list, list, list) -> int\n    # Time: O(n)\n    # Space: O(n)\n    count = 0\n    s = set()\n    for i in l1:\n        for j in l2:\n            for k in l3:\n                if i == j == k:\n                    if (i, j) not in s:\n                        s.add((i, j))\n                        count += 1\n    return count\n\n\ndef three_pair_count2(l1, l2, l3):\n    # type: (list, list, list) -> int\n    # Time: O(n)\n    # Space: O(n)\n    count = 0\n    s = set()\n    for i in l1:\n        for j in l2:\n            for k in l3:\n                if i == j == k:\n                    s.add((i, j, k))\n                    count += 1\n    return count\n\n\ndef three_pair_count3(l1, l2, l3):\n    # type: (list, list, list) -> int\n    # Time: O(n)\n    # Space: O(n)\n    s = set()\n    for i in l1:\n        for j in l2:\n            for k in l3:\n                if i == j == k:\n                    s.add((i, j))\n    return len(s) * 2"
    },
    {
      "rank": 81,
      "score": 2.760412881077355,
      "candidate": "def count_same_pair(list1, list2, list3):\n    count = 0\n    for i in list1:\n        for j in list2:\n            for k in list3:\n                if i == j == k:\n                    count += 1\n    return count\n\nlist1 = [1, 2, 3, 4, 5, 6]\nlist2 = [1, 2, 3, 4, 5, 6]\nlist3 = [1, 2, 3, 4, 5, 6]\nprint(count_same_pair(list1, list2, list3))"
    },
    {
      "rank": 82,
      "score": 2.7408648908631763,
      "candidate": "def count_same_pair(list1, list2, list3):\n    return len(list(filter(lambda x: x[0] == x[1] == x[2], zip(list1, list2, list3))))\n\n#test\nlist1 = [1, 2, 3, 4, 5, 6, 7]\nlist2 = [1, 2, 3, 4, 5, 6, 8]\nlist3 = [1, 2, 3, 4, 5, 6, 9]\n\nprint(count_same_pair(list1, list2, list3))"
    },
    {
      "rank": 83,
      "score": 2.735119898116481,
      "candidate": "def same_pair(list1, list2, list3):\n    # Fill this in.\n\nprint same_pair([1, 2, 3, 4], [3, 1, 2, 4], [1, 2, 4, 3])\n# 2\n\nprint same_pair([1, 2, 3], [3, 1, 2], [1, 2, 3])\n# 3"
    },
    {
      "rank": 84,
      "score": 2.7278086377374087,
      "candidate": "def samePairCount(a, b, c):\n  # Fill this in.\n  \nprint samePairCount([1, 2, 3], [2, 3, 4], [3, 4, 5])\n# 1\n\nprint samePairCount([1, 2, 3], [2, 3, 4], [3, 1, 2])\n# 3\n\nprint samePairCount([1, 2, 3], [2, 3, 4], [3, 4, 5, 6])\n# 0\n\nprint samePairCount([1, 2, 3, 4], [2, 3, 4, 5], [3, 4, 5, 6])\n# 4\n\nprint samePairCount([1, 2, 3], [2, 3, 4], [3, 1, 5])\n# 2"
    },
    {
      "rank": 85,
      "score": 2.6996806550405976,
      "candidate": "def three_pair_count(list1, list2, list3):\n    # Fill this in.\n\nprint three_pair_count([1,2,3], [1,2,3], [1,2,3])\n# 9\n\nprint three_pair_count([1,2,3], [1,2,3], [4,5,6])\n# 3\n\nprint three_pair_count([1,2,3], [4,5,6], [4,5,6])\n# 9\n\nprint three_pair_count([1,2,3], [4,5,6], [7,8,9])\n# 0"
    },
    {
      "rank": 86,
      "score": 2.6991466938853015,
      "candidate": "def count_same_pair(list_1, list_2, list_3):\n    # Fill this in.\n\nlist_1 = [1, 2, 3, 4, 5]\nlist_2 = [5, 6, 7, 8, 9]\nlist_3 = [1, 2, 3, 4, 5]\n\nprint(count_same_pair(list_1, list_2, list_3))"
    },
    {
      "rank": 87,
      "score": 2.677440122697438,
      "candidate": "class Solution(object):\n    def countPairs(self, nums1, nums2, nums3):\n        \"\"\"\n        :type nums1: List[int]\n        :type nums2: List[int]\n        :type nums3: List[int]\n        :rtype: int\n        \"\"\"\n        if not nums1 or not nums2 or not nums3:\n            return 0\n\n        count = 0\n        # d = {}\n        # for num in nums1:\n        #     d[num] = d.get(num, 0) + 1\n\n        # for num in nums2:\n        #     d[num] = d.get(num, 0) + 1\n\n        # for num in nums3:\n        #     d[num] = d.get(num, 0) + 1\n\n        # for key, value in d.iteritems():\n        #     if value >= 3:\n        #         count += (value - 1) * (value - 2) / 2\n        # return count\n\n        d = {}\n        for num in nums1:\n            d[num] = d.get(num, 0) + 1\n\n        for num in nums2:\n            d[num] = d.get(num, 0) + 1\n\n        for num in nums3:\n            d[num] = d.get(num, 0) + 1\n\n        for key, value in d.iteritems():\n            if value >= 3:\n                count += (value - 1) * (value - 2) / 2\n        return count"
    },
    {
      "rank": 88,
      "score": 2.580391238388681,
      "candidate": "from typing import List\n\n\nclass Solution:\n    def count_same_pair(self, nums1: List[int], nums2: List[int], nums3: List[int]) -> int:\n        count = 0\n        for i in range(len(nums1)):\n            for j in range(len(nums2)):\n                if nums1[i] == nums2[j]:\n                    for k in range(len(nums3)):\n                        if nums1[i] == nums3[k]:\n                            count += 1\n        return count\n\n\nif __name__ == \"__main__\":\n    nums1 = [1, 2, 3, 4]\n    nums2 = [1, 2, 3, 4]\n    nums3 = [1, 2, 3, 4]\n    solution = Solution()\n    print(solution.count_same_pair(nums1, nums2, nums3))"
    },
    {
      "rank": 89,
      "score": 2.5459879622393946,
      "candidate": "def count_same_pair(list1, list2, list3):\n    count = 0\n    for i in list1:\n        for j in list2:\n            for k in list3:\n                if i == j == k:\n                    count += 1\n    return count\n\n\nprint(count_same_pair([1, 2, 3, 4, 5], [1, 2, 3], [1, 2, 3]))"
    },
    {
      "rank": 90,
      "score": 2.493584439832788,
      "candidate": "def count_same_pair(list1, list2, list3):\n    result = 0\n    for i in list1:\n        for j in list2:\n            for k in list3:\n                if i == j == k:\n                    result += 1\n    return result\n\nprint(count_same_pair([1, 2, 3], [1, 2, 3], [1, 2, 3]))\nprint(count_same_pair([1, 2, 3], [1, 2, 3], [1, 2]))\nprint(count_same_pair([1, 2, 3], [1, 2], [1, 2, 3]))"
    },
    {
      "rank": 91,
      "score": 2.4711445355220496,
      "candidate": "from typing import List\n\n\nclass Solution:\n    def count_same_pair(self, list1: List[int], list2: List[int], list3: List[int]) -> int:\n        if not list1 or not list2 or not list3:\n            return 0\n        counter = 0\n        list1_dict = {}\n        for i in list1:\n            if i not in list1_dict:\n                list1_dict[i] = 1\n            else:\n                list1_dict[i] += 1\n        for i in list2:\n            if i in list1_dict and list1_dict[i] > 0:\n                list1_dict[i] -= 1\n                counter += 1\n        for i in list3:\n            if i in list1_dict and list1_dict[i] > 0:\n                list1_dict[i] -= 1\n                counter += 1\n        return counter\n\n\nif __name__ == \"__main__\":\n    assert Solution().count_same_pair([1, 2, 3, 4, 5], [1, 2, 3, 4, 5], [1, 2, 3, 4, 5]) == 5"
    },
    {
      "rank": 92,
      "score": 2.446832512996986,
      "candidate": "def count_same_pair(list1, list2, list3):\n    # Fill this in.\n\nprint count_same_pair([1, 2, 3, 4, 5], [1, 2, 3], [1, 2, 4])\n# 2\n\nprint count_same_pair([1, 2, 3, 4, 5], [1, 2, 3], [1, 2, 5])\n# 1"
    },
    {
      "rank": 93,
      "score": 2.3359069755507846,
      "candidate": "def count_same_pair(list1, list2, list3):\n    \"\"\"\n    :type list1: List[int]\n    :type list2: List[int]\n    :type list3: List[int]\n    :rtype: int\n    \"\"\"\n    dict_count = {}\n    for num in list1:\n        if num not in dict_count:\n            dict_count[num] = 1\n        else:\n            dict_count[num] += 1\n\n    count = 0\n    for num in list2:\n        if num in dict_count and dict_count[num] > 0:\n            count += 1\n            dict_count[num] -= 1\n\n    for num in list3:\n        if num in dict_count and dict_count[num] > 0:\n            count += 1\n            dict_count[num] -= 1\n\n    return count\n\n\ndef test_count_same_pair():\n    assert count_same_pair([1, 2], [1, 2], [1, 2]) == 6\n    assert count_same_pair([1, 2], [1, 2, 3], [1, 2, 3]) == 6\n    assert count_same_pair([1, 2, 2], [1, 2, 3], [1, 2, 3]) == 8\n    assert count_same_pair([1, 2, 3, 3], [1, 2, 3], [1, 2, 3]) == 12\n    assert count_same_pair([1, 2, 3, 4, 5], [2, 3, 4, 5, 6], [3, 4, 5, 6, 7]) == 4\n    assert count_same_pair([1, 2, 3, 4, 5], [2, 3, 4, 5, 6], [3, 4, 5, 6, 7, 8]) == 4\n\n\nif __name__ == '__main__':\n    test_count_same_pair()"
    },
    {
      "rank": 94,
      "score": 2.287625906893272,
      "candidate": "def count_same_pair(list_a, list_b, list_c):\n    # Fill this in.\n\nprint count_same_pair([1, 2, 3], [2, 3, 4], [3, 4, 5])\n# 2\n\nprint count_same_pair([1, 2, 3], [2, 3, 4], [3, 2, 5])\n# 3\n\nprint count_same_pair([1, 2, 3], [2, 3, 4], [3, 4, 5])\n# 2\n\nprint count_same_pair([1, 2, 3], [2, 3, 4], [3, 2, 5])\n# 3"
    },
    {
      "rank": 95,
      "score": 2.260739004816286,
      "candidate": "def count_same_pair(list_a, list_b, list_c):\n    # Fill this in.\n\nprint count_same_pair([1, 2, 3, 4], [2, 3, 4, 5], [3, 4, 5, 6])\n# 2\n\nprint count_same_pair([1, 2, 3, 4], [2, 3, 4, 5], [3, 4, 5, 6])\n# 2"
    },
    {
      "rank": 96,
      "score": 2.137541083743484,
      "candidate": "def count_same_pair(l1, l2, l3):\n    # return count_same_pair_dcl(l1, l2, l3)\n    return count_same_pair_iter(l1, l2, l3)\n\n\ndef count_same_pair_dcl(l1, l2, l3):\n    count = 0\n    for x in l1:\n        for y in l2:\n            for z in l3:\n                if x == y == z:\n                    count += 1\n    return count\n\n\ndef count_same_pair_iter(l1, l2, l3):\n    count = 0\n    for i in range(len(l1)):\n        for j in range(len(l2)):\n            for k in range(len(l3)):\n                if l1[i] == l2[j] == l3[k]:\n                    count += 1\n    return count\n\n\ndef test_count_same_pair():\n    l1 = [1, 2, 3, 4]\n    l2 = [4, 5, 6, 7]\n    l3 = [8, 9, 10, 11]\n    assert count_same_pair(l1, l2, l3) == 0\n\n\ndef test_count_same_pair_1():\n    l1 = [1, 2, 3, 4]\n    l2 = [1, 2, 3, 4]\n    l3 = [1, 2, 3, 4]\n    assert count_same_pair(l1, l2, l3) == 4\n\n\ndef test_count_same_pair_2():\n    l1 = [1, 2, 3, 4]\n    l2 = [1, 2, 3, 5]\n    l3 = [1, 2, 3, 6]\n    assert count_same_pair(l1, l2, l3) == 3\n\n\ndef test_count_same_pair_3():\n    l1 = [1, 2, 3,"
    },
    {
      "rank": 97,
      "score": 2.118479922318633,
      "candidate": "def count_same_pair(list1, list2, list3):\n    # Fill this in.\n\nprint count_same_pair([1, 2, 3], [4, 5, 6], [7, 8, 9])\n# 0\n\nprint count_same_pair([1, 2, 3], [4, 5, 6], [7, 8, 1])\n# 1"
    },
    {
      "rank": 98,
      "score": 2.043359877671101,
      "candidate": "from typing import List\n\n\nclass Solution:\n    def count_same_pair(self, list_a: List[int], list_b: List[int], list_c: List[int]) -> int:\n        counter = 0\n        for i in list_a:\n            for j in list_b:\n                for k in list_c:\n                    if i == j == k:\n                        counter += 1\n        return counter\n\n\nif __name__ == \"__main__\":\n    assert Solution().count_same_pair([1,2,3,4,5], [1,1,2,2,3], [1,2,2,3,3]) == 8"
    },
    {
      "rank": 99,
      "score": 2.020164938060112,
      "candidate": "def count_same_pair(list1, list2, list3):\n    # Fill this in.\n    result = []\n    for i in range(len(list1)):\n        for j in range(len(list2)):\n            for k in range(len(list3)):\n                if list1[i] == list2[j] and list2[j] == list3[k]:\n                    result.append(list1[i])\n    return len(result)\n\nprint(count_same_pair([1, 2, 3], [1, 3, 5], [1, 4, 5]))\n# 2\nprint(count_same_pair([2, 3, 4], [2, 3, 4], [2, 3, 4]))\n# 1\nprint(count_same_pair([1, 2, 3], [2, 3, 4], [3, 4, 5]))\n# 1\nprint(count_same_pair([1, 2, 3], [2, 3, 4], [1, 4, 5]))\n# 2\nprint(count_same_pair([1, 2, 3], [2, 3, 4], [2, 4, 5]))\n# 2"
    },
    {
      "rank": 100,
      "score": 1.6901274479551278,
      "candidate": "def count_same_pair(list1, list2, list3):\n    # Fill this in.\n\nprint count_same_pair([1, 2, 3], [1, 2, 3], [1, 2, 3])\n# 12\n\nprint count_same_pair([1, 2, 3], [1, 2, 3], [3, 2, 1])\n# 0\n\nprint count_same_pair([1, 2, 3], [1, 2, 3], [2, 3, 4])\n# 2\n\nprint count_same_pair([1, 2, 3], [2, 3, 4], [1, 2, 3])\n# 2\n\nprint count_same_pair([1, 2, 3], [1, 2, 3], [1, 2, 2])\n# 1\n\nprint count_same_pair([1, 2, 3], [1, 2, 2], [1, 2, 3])\n# 1\n\nprint count_same_pair([1, 2, 3], [1, 2, 2], [2, 2, 2])\n# 1\n\nprint count_same_pair([1, 2, 3], [2, 2, 2], [1, 2, 3])\n# 1\n\nprint count_same_pair([1, 2, 3], [1, 2, 3], [1, 2, 3, 4])\n# 1\n\nprint count_same_pair([1, 2, 3], [1, 2, 3, 4], [1, 2, 3])\n# 1\n\nprint count_same_pair([1, 2, 3, 4], [1, 2, 3], [1, 2, 3])\n# 1\n\nprint count_same_pair([1, 2, 3], [1, 2, 3], [1, 2, 3, 4, 5])\n# 1\n\nprint"
    }
  ]
}