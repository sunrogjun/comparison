{
  "timestamp": "2025-09-15T01:34:25.350268",
  "method": "improved_llm_judge",
  "judge_model": "codellama/CodeLlama-7b-Python-hf",
  "target_model": "codellama-7b",
  "dataset": "mbpp",
  "problem_number": 431,
  "total_candidates": 100,
  "results": [
    {
      "rank": 1,
      "score": 10.0,
      "candidate": "def find_ratio(arr):\n    \"\"\"\n    :param arr: list of integers\n    :return: ratio of positive numbers in the array\n    \"\"\"\n    pos_num = 0\n    neg_num = 0\n    for i in range(len(arr)):\n        if arr[i] > 0:\n            pos_num += 1\n        else:\n            neg_num += 1\n    return pos_num/neg_num\n\n\nif __name__ == \"__main__\":\n    print(find_ratio([1, 2, 3, 4, 5, 6, 7, 8, 9, -10, -11, -12, -13, -14, -15]))"
    },
    {
      "rank": 2,
      "score": 10.0,
      "candidate": "def find_ratio(arr):\n    positive_count = 0\n    negative_count = 0\n\n    for num in arr:\n        if num > 0:\n            positive_count += 1\n        elif num < 0:\n            negative_count += 1\n\n    return positive_count / negative_count\n\n\nif __name__ == '__main__':\n    print(find_ratio([1, 2, 3, 4, 5, 6, -1, -2, -3, -4, -5, -6]))"
    },
    {
      "rank": 3,
      "score": 10.0,
      "candidate": "from collections import Counter\n\n\ndef positive_ratio(arr):\n    \"\"\"\n    >>> positive_ratio([1, 2, 3, -4, 5])\n    0.6\n    \"\"\"\n    if not arr:\n        return 0\n\n    counter = Counter(arr)\n    return counter[1] / (counter[0] + counter[1])\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 4,
      "score": 10.0,
      "candidate": "def find_ratio(numbers):\n    \"\"\"\n    >>> find_ratio([1, 2, 3, 4, 5, 6])\n    0.2\n    >>> find_ratio([1, 2, 3, 4, -5, 6])\n    0.2\n    \"\"\"\n    positive_num = 0\n    for number in numbers:\n        if number > 0:\n            positive_num += 1\n    return positive_num / len(numbers)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 5,
      "score": 10.0,
      "candidate": "from typing import List\n\n\ndef find_positive_ratio(lst: List[int]) -> float:\n    \"\"\"Find the ratio of positive numbers in a list of integers.\n\n    Args:\n        lst (List[int]): list of integers\n\n    Returns:\n        float: ratio of positive numbers in the list\n    \"\"\"\n    if not lst:\n        return 0\n\n    positive_count = 0\n    total_count = 0\n\n    for item in lst:\n        total_count += 1\n\n        if item > 0:\n            positive_count += 1\n\n    return positive_count / total_count\n\n\nif __name__ == \"__main__\":\n    print(find_positive_ratio([1, 2, 3, 4, 5]))  # 0.8\n    print(find_positive_ratio([1, -1, 0, -1, -1, -1]))  # 0.2\n    print(find_positive_ratio([1, 2, 3, 4, -1, -1]))  # 0.6\n    print(find_positive_ratio([-1, -1, -1, -1, -1]))  # 0\n    print(find_positive_ratio([]))  # 0"
    },
    {
      "rank": 6,
      "score": 10.0,
      "candidate": "def positive_ratio(arr):\n    \"\"\"\n    >>> positive_ratio([1, 2, 3, 4, 5])\n    0.8\n    >>> positive_ratio([1, -1, 3, 4, 5])\n    0.6\n    >>> positive_ratio([-1, -2, -3, -4, -5])\n    0.0\n    >>> positive_ratio([0, 0, 0, 0, 0])\n    0.0\n    >>> positive_ratio([-1, -2, -3, -4, -5, -6, -7])\n    0.2\n    \"\"\"\n    positive = 0\n    for num in arr:\n        if num > 0:\n            positive += 1\n    return positive / len(arr)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 7,
      "score": 10.0,
      "candidate": "def positive_ratio(arr):\n    count_positive = 0\n    count_total = 0\n    for i in range(len(arr)):\n        if arr[i] > 0:\n            count_positive += 1\n        count_total += 1\n    return count_positive / count_total\n\n\nif __name__ == '__main__':\n    print(positive_ratio([1, 2, 3, 4, 5, -9, -8, -7, -6, -5, -4, -3, -2, -1, 0]))"
    },
    {
      "rank": 8,
      "score": 10.0,
      "candidate": "def ratio_positive_numbers(arr):\n    \"\"\"\n    >>> ratio_positive_numbers([1, 2, 3, 4, 5])\n    80.0\n    >>> ratio_positive_numbers([-1, -2, -3, -4, -5])\n    20.0\n    >>> ratio_positive_numbers([])\n    100.0\n    >>> ratio_positive_numbers([-1])\n    0.0\n    >>> ratio_positive_numbers([1])\n    100.0\n    \"\"\"\n    if not arr:\n        return 100.0\n    if arr[0] < 0:\n        return 0.0\n    positive = 0\n    negative = 0\n    for i in arr:\n        if i > 0:\n            positive += 1\n        else:\n            negative += 1\n    return (positive * 100) / (positive + negative)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 9,
      "score": 10.0,
      "candidate": "from functools import reduce\n\n\n# O(n) time | O(1) space\ndef find_ratio_of_positive_integers(array):\n    num_positive_ints = 0\n    for num in array:\n        if num > 0:\n            num_positive_ints += 1\n\n    return len(array) / num_positive_ints\n\n\n# O(n) time | O(1) space\ndef find_ratio_of_positive_integers(array):\n    num_positive_ints = reduce(lambda acc, num: acc + (1 if num > 0 else 0), array, 0)\n\n    return len(array) / num_positive_ints\n\n\n# O(n) time | O(1) space\ndef find_ratio_of_positive_integers(array):\n    num_positive_ints = sum(1 for num in array if num > 0)\n\n    return len(array) / num_positive_ints"
    },
    {
      "rank": 10,
      "score": 10.0,
      "candidate": "def find_positive_ratio(arr):\n    \"\"\"\n    >>> find_positive_ratio([1, 2, 3, 4, 5, 6, 7, 8])\n    0.14285714285714285\n    >>> find_positive_ratio([-1, -2, -3, -4, -5, -6, -7, -8])\n    0.0\n    >>> find_positive_ratio([])\n    Traceback (most recent call last):\n        ...\n    ValueError: Invalid input\n    \"\"\"\n    if not arr:\n        raise ValueError(\"Invalid input\")\n\n    positive_count = sum(1 for i in arr if i > 0)\n    ratio = positive_count / len(arr)\n    return ratio\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 11,
      "score": 10.0,
      "candidate": "def positive_ratio(arr):\n    \"\"\"\n    >>> positive_ratio([1, 2, -1, -2, -1, 2, 1])\n    0.4\n    >>> positive_ratio([-1, -2])\n    0.0\n    >>> positive_ratio([1, -1, -1, -1, -1])\n    0.2\n    >>> positive_ratio([1, 2, -1, -2, -1, 2, 1, 2, -1, -2, -1, 2, 1])\n    0.4\n    \"\"\"\n    positive_count = 0\n    for number in arr:\n        if number > 0:\n            positive_count += 1\n    return positive_count / len(arr)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 12,
      "score": 10.0,
      "candidate": "def find_ratio(arr):\n    \"\"\"\n    >>> find_ratio([1, 2, 3, 4, 5])\n    '50.0%'\n    >>> find_ratio([1, 2, 3, 0, 0, 0])\n    '0.0%'\n    \"\"\"\n    arr = list(filter(lambda x: x > 0, arr))\n    return \"{:.1f}%\".format(len(arr) / len(arr + arr) * 100)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 13,
      "score": 10.0,
      "candidate": "def find_ratio(arr: list) -> float:\n    \"\"\"\n    >>> find_ratio([1, 2, 3, 4, 5])\n    0.2\n    >>> find_ratio([-1, -2, -3, -4, -5])\n    0.0\n    >>> find_ratio([-1, -2, -3, -4, -5, 1, 2, 3, 4, 5])\n    0.2\n    >>> find_ratio([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n    0.1\n    \"\"\"\n    if not arr:\n        return 0.0\n    if len(arr) == 1:\n        return 0.0 if arr[0] < 0 else 1.0\n\n    pos_count = neg_count = 0\n    for num in arr:\n        if num > 0:\n            pos_count += 1\n        elif num < 0:\n            neg_count += 1\n\n    return pos_count / (pos_count + neg_count)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 14,
      "score": 8.0,
      "candidate": "def positive_ratio(arr):\n    if not arr:\n        return 0\n\n    positive_count = 0\n    for num in arr:\n        if num > 0:\n            positive_count += 1\n    return positive_count / len(arr)"
    },
    {
      "rank": 15,
      "score": 8.0,
      "candidate": "from functools import reduce\n\n\ndef positive_ratio(arr):\n    \"\"\"\n    O(n) & O(1)\n    \"\"\"\n    count = 0\n    for num in arr:\n        if num > 0:\n            count += 1\n    return count / len(arr)\n\n\ndef positive_ratio_reduce(arr):\n    \"\"\"\n    O(n) & O(1)\n    \"\"\"\n    return reduce(lambda x, y: x + (1 if y > 0 else 0), arr, 0) / len(arr)\n\n\nif __name__ == \"__main__\":\n    print(positive_ratio([-1, -2, -3, -4, -5, -6, -7]))\n    print(positive_ratio_reduce([-1, -2, -3, -4, -5, -6, -7]))"
    },
    {
      "rank": 16,
      "score": 8.0,
      "candidate": "from collections import Counter\n\n\ndef find_ratio(integers):\n    \"\"\"\n    Return the ratio of positive numbers in an array of integers.\n\n    >>> find_ratio([1, 2, 3, 4, 5])\n    0.4\n    \"\"\"\n    counter = Counter(integers)\n    return counter[1] / counter[-1]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 17,
      "score": 8.0,
      "candidate": "def positive_ratio(nums):\n    return sum([1 for x in nums if x > 0]) / len(nums)\n\n\nif __name__ == \"__main__\":\n    print(positive_ratio([1, 2, 3, 4, 5, 6, 7]))"
    },
    {
      "rank": 18,
      "score": 8.0,
      "candidate": "from typing import List\n\n\ndef ratio_of_positive_numbers(arr: List[int]) -> float:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(1)\n    \"\"\"\n    if len(arr) == 0:\n        return 0\n\n    positive_count = 0\n    for num in arr:\n        if num > 0:\n            positive_count += 1\n\n    return positive_count / len(arr)\n\n\nif __name__ == \"__main__\":\n    print(ratio_of_positive_numbers([3, 5, 6, -5, 2]))"
    },
    {
      "rank": 19,
      "score": 8.0,
      "candidate": "def find_ratio(nums):\n    # O(n)\n    positive_count = 0\n    negative_count = 0\n\n    for num in nums:\n        if num < 0:\n            negative_count += 1\n        else:\n            positive_count += 1\n\n    if negative_count == 0:\n        return 1\n\n    return round(positive_count / negative_count, 2)\n\n\nprint(find_ratio([-1, -2, -3, -4, -5]))\nprint(find_ratio([1, 2, 3, 4, 5]))\nprint(find_ratio([-1, 2, -3, 4, -5]))\nprint(find_ratio([1, -2, -3, 4, -5]))\nprint(find_ratio([1, 2, -3, -4, -5]))"
    },
    {
      "rank": 20,
      "score": 8.0,
      "candidate": "def positive_ratio(arr):\n    positives = 0\n    negatives = 0\n\n    for i in arr:\n        if i > 0:\n            positives += 1\n        else:\n            negatives += 1\n\n    return positives / (positives + negatives)\n\n\nprint(positive_ratio([1, 2, 3, 4, 5]))"
    },
    {
      "rank": 21,
      "score": 8.0,
      "candidate": "def positive_ratio(arr):\n    positive_num = [i for i in arr if i > 0]\n    return len(positive_num) / len(arr)\n\n\nif __name__ == \"__main__\":\n    print(positive_ratio([1, 2, 3, -4, 5]))"
    },
    {
      "rank": 22,
      "score": 8.0,
      "candidate": "def find_ratio(arr):\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(1)\n    \"\"\"\n    if not arr:\n        return\n\n    pos_count = 0\n    neg_count = 0\n\n    for num in arr:\n        if num > 0:\n            pos_count += 1\n        elif num < 0:\n            neg_count += 1\n\n    return pos_count / neg_count\n\n\nif __name__ == \"__main__\":\n    print(find_ratio([-2, 1, 0, -1, 1, 2]))"
    },
    {
      "rank": 23,
      "score": 8.0,
      "candidate": "from typing import List\n\n\n# O(n)\ndef find_ratio(nums: List[int]) -> float:\n    if not nums:\n        return 0.0\n\n    positive_nums = 0\n    negative_nums = 0\n\n    for num in nums:\n        if num > 0:\n            positive_nums += 1\n        elif num < 0:\n            negative_nums += 1\n\n    return positive_nums / negative_nums\n\n\nif __name__ == \"__main__\":\n    assert find_ratio([1, 2, 3, 0, -1]) == 2\n    assert find_ratio([1, 1, 0, 0, -1, -1]) == 1"
    },
    {
      "rank": 24,
      "score": 8.0,
      "candidate": "def positive_ratio(arr):\n    if len(arr) == 0:\n        return 0\n    if len(arr) == 1:\n        if arr[0] > 0:\n            return 1\n        else:\n            return 0\n    if len(arr) == 2:\n        if arr[0] > 0 and arr[1] > 0:\n            return 1\n        elif arr[0] > 0 and arr[1] < 0:\n            return 0\n        elif arr[0] < 0 and arr[1] > 0:\n            return 0.5\n        else:\n            return 0\n\n    ratio = 0\n    pos = 0\n    neg = 0\n    for i in arr:\n        if i > 0:\n            pos += 1\n        else:\n            neg += 1\n    ratio = pos / (pos + neg)\n    return ratio\n\n\nprint(positive_ratio([1, 2, 3, -4, 5]))\nprint(positive_ratio([1, 1, 0, 0, -1, -1]))\nprint(positive_ratio([]))\nprint(positive_ratio([-1, -1]))\nprint(positive_ratio([1, 1]))\nprint(positive_ratio([1, -1]))\nprint(positive_ratio([-1, 1]))"
    },
    {
      "rank": 25,
      "score": 8.0,
      "candidate": "def find_ratio(arr):\n    pos_count = 0\n    neg_count = 0\n    for num in arr:\n        if num > 0:\n            pos_count += 1\n        elif num < 0:\n            neg_count += 1\n    return float(pos_count) / neg_count\n\n\nif __name__ == \"__main__\":\n    print(find_ratio([1, 2, 3, -4, 5]))\n    print(find_ratio([1, 1, 0, 0, -1, -1]))\n    print(find_ratio([0, 0, 0, 0, 0]))"
    },
    {
      "rank": 26,
      "score": 8.0,
      "candidate": "def find_ratio(arr):\n    \"\"\"\n    Time Complexity: O(N)\n    Space Complexity: O(1)\n    \"\"\"\n    positive = 0\n    negative = 0\n\n    for num in arr:\n        if num > 0:\n            positive += 1\n        elif num < 0:\n            negative += 1\n\n    return positive / (negative + positive)\n\n\nif __name__ == \"__main__\":\n    print(find_ratio([1, 2, 3, 4, 5, 6, 7]))"
    },
    {
      "rank": 27,
      "score": 8.0,
      "candidate": "def positive_ratio(arr):\n    # if array is empty\n    if not arr:\n        return None\n\n    positive_count = 0\n    negative_count = 0\n\n    for num in arr:\n        if num > 0:\n            positive_count += 1\n        elif num < 0:\n            negative_count += 1\n\n    return positive_count / (positive_count + negative_count)\n\nif __name__ == '__main__':\n    print(positive_ratio([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))"
    },
    {
      "rank": 28,
      "score": 8.0,
      "candidate": "def positive_ratio(a):\n    pos = 0\n    neg = 0\n    for i in a:\n        if i > 0:\n            pos += 1\n        else:\n            neg += 1\n    if pos == 0:\n        return 0\n    return pos / (pos + neg)\n\n\nif __name__ == \"__main__\":\n    print(positive_ratio([1, 2, 3, -4, 5]))"
    },
    {
      "rank": 29,
      "score": 8.0,
      "candidate": "from typing import List\n\n\n# O(n)\ndef find_positive_ratio(arr: List[int]) -> float:\n    count_of_positives: int = 0\n\n    for num in arr:\n        if num > 0:\n            count_of_positives += 1\n\n    return count_of_positives / len(arr)\n\n\nif __name__ == \"__main__\":\n    print(find_positive_ratio([1, 2, -3, 4, 5, -6, 7, 8, -9, 10]))"
    },
    {
      "rank": 30,
      "score": 8.0,
      "candidate": "def find_ratio(arr):\n    count = 0\n    for i in range(len(arr)):\n        if arr[i] > 0:\n            count += 1\n    return count / len(arr)\n\n\nif __name__ == '__main__':\n    arr = [1, 2, 3, 4, 5, -6, -7, 8, 9]\n    print(find_ratio(arr))"
    },
    {
      "rank": 31,
      "score": 8.0,
      "candidate": "def find_ratio(arr):\n    \"\"\"\n    >>> find_ratio([1, 2, 3, -4, 5])\n    0.4\n    \"\"\"\n    return len([x for x in arr if x > 0]) / len(arr)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 32,
      "score": 8.0,
      "candidate": "from collections import Counter\n\n\ndef positive_ratio(arr):\n    counter = Counter(arr)\n    return counter[1] / (counter[-1] + counter[1])\n\n\nif __name__ == \"__main__\":\n    print(positive_ratio([-1, -2, -3, -4, -5, -6, -7]))"
    },
    {
      "rank": 33,
      "score": 8.0,
      "candidate": "def find_ratio_of_positive_numbers(numbers):\n    if not numbers:\n        return 0\n\n    positive_count = 0\n    negative_count = 0\n\n    for number in numbers:\n        if number > 0:\n            positive_count += 1\n        elif number < 0:\n            negative_count += 1\n\n    if positive_count == 0 or negative_count == 0:\n        return 0\n\n    return positive_count / negative_count"
    },
    {
      "rank": 34,
      "score": 8.0,
      "candidate": "def find_ratio(arr):\n    pos_count = 0\n    for i in arr:\n        if i > 0:\n            pos_count += 1\n    return float(pos_count) / len(arr)\n\n\nif __name__ == '__main__':\n    print(find_ratio([1, 2, 3, 4, 5]))"
    },
    {
      "rank": 35,
      "score": 8.0,
      "candidate": "from collections import defaultdict\n\ndef find_ration(arr):\n    \"\"\"\n    O(n) & O(n)\n    \"\"\"\n    if not arr:\n        return\n\n    positive_count = defaultdict(int)\n    for num in arr:\n        positive_count[num] += 1\n\n    return positive_count[max(positive_count, key=abs)] / positive_count[min(positive_count, key=abs)]\n\n\nif __name__ == \"__main__\":\n    print(find_ration([-2, -2, -2, -2, 1, 1, 1, 1]))\n    print(find_ration([-2, -2, -2, -2, -2, -2, -2, -2]))\n    print(find_ration([0, 0, 0, 0, 0, 0, 0, 0]))\n    print(find_ration([1, 1, 1, 1, 1, 1, 1, 1]))\n    print(find_ration([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]))\n    print(find_ration([-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]))"
    },
    {
      "rank": 36,
      "score": 8.0,
      "candidate": "def find_ratio(nums):\n    pos_count = 0\n    neg_count = 0\n\n    for num in nums:\n        if num > 0:\n            pos_count += 1\n        elif num < 0:\n            neg_count += 1\n\n    if pos_count == 0:\n        return 0\n\n    return neg_count / pos_count\n\n\nprint(find_ratio([-1, -2, -3, -4, -5, -6]))\nprint(find_ratio([1, 2, 3, 4, 5, 6]))\nprint(find_ratio([1, 2, 3, 4, -5, -6]))"
    },
    {
      "rank": 37,
      "score": 8.0,
      "candidate": "def find_ratio(arr):\n    # TODO: Write your solution here\n    positive = 0\n    negative = 0\n    for num in arr:\n        if num > 0:\n            positive += 1\n        elif num < 0:\n            negative += 1\n        else:\n            continue\n    return positive / (positive + negative)\n\nif __name__ == '__main__':\n    print(find_ratio([1, 2, 3, 4, 5, 6, 7, 8, 9]))\n    print(find_ratio([1, -2, -3, -4, -5, -6, -7, -8, -9]))"
    },
    {
      "rank": 38,
      "score": 8.0,
      "candidate": "def positive_ratio(lst):\n    if len(lst) == 0:\n        return 0\n    count_positive = 0\n    for item in lst:\n        if item > 0:\n            count_positive += 1\n    return count_positive / len(lst)"
    },
    {
      "rank": 39,
      "score": 8.0,
      "candidate": "def find_positive_ratio(arr):\n    pos_count = 0\n    for i in arr:\n        if i > 0:\n            pos_count += 1\n    return pos_count / len(arr)\n\n\ndef main():\n    print(find_positive_ratio([1, 2, 3, -4, 5]))\n    print(find_positive_ratio([1, 1, 1, 1, 1]))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 40,
      "score": 4.0,
      "candidate": "from typing import List\n\n\n# Time complexity: O(n)\n# Space complexity: O(1)\ndef find_ratio(arr: List[int]) -> float:\n    num_pos = 0\n    num_neg = 0\n\n    for n in arr:\n        if n > 0:\n            num_pos += 1\n        elif n < 0:\n            num_neg += 1\n\n    return num_pos / num_neg if num_neg else 0\n\n\n# Time complexity: O(n)\n# Space complexity: O(1)\ndef find_ratio_2(arr: List[int]) -> float:\n    num_pos = 0\n    num_neg = 0\n    total_neg = 0\n\n    for n in arr:\n        if n > 0:\n            num_pos += 1\n        elif n < 0:\n            num_neg += 1\n            total_neg += 1\n\n    return num_pos / num_neg if num_neg else 0\n\n\n# Time complexity: O(n)\n# Space complexity: O(n)\ndef find_ratio_3(arr: List[int]) -> float:\n    num_pos = 0\n    num_neg = 0\n    neg_arr = []\n\n    for n in arr:\n        if n > 0:\n            num_pos += 1\n        elif n < 0:\n            num_neg += 1\n            neg_arr.append(n)\n\n    return num_pos / sum(1 / abs(n) for n in neg_arr) if num_neg else 0\n\n\nif __name__ == \"__main__\":\n    print(find_ratio([1, 2, 3, 0, -1, -2, -3]))\n    print(find_ratio_2([1, 2, 3, 0, -1, -2, -3]))\n    print(find_ratio_3([1, 2, 3, 0, -1, -2, -3]))"
    },
    {
      "rank": 41,
      "score": 2.0,
      "candidate": "from collections import Counter\n\ndef find_positive_ratio(arr):\n    \"\"\"\n    Find the ratio of positive numbers in an array of integers.\n\n    Time Complexity: O(n)\n    Space Complexity: O(n)\n\n    Args:\n        arr: An array of integers\n\n    Returns:\n        The ratio of positive numbers in the array.\n    \"\"\"\n    # Edge case\n    if not arr:\n        return 0\n\n    # Count the number of positive numbers in the array\n    positive_count = 0\n    for num in arr:\n        if num > 0:\n            positive_count += 1\n\n    # Return the ratio\n    return positive_count / len(arr)\n\n\ndef find_positive_ratio_counter(arr):\n    \"\"\"\n    Find the ratio of positive numbers in an array of integers.\n\n    Time Complexity: O(n)\n    Space Complexity: O(n)\n\n    Args:\n        arr: An array of integers\n\n    Returns:\n        The ratio of positive numbers in the array.\n    \"\"\"\n    # Edge case\n    if not arr:\n        return 0\n\n    # Count the number of positive numbers in the array\n    positive_count = 0\n    count = Counter(arr)\n    for num in count:\n        if num > 0:\n            positive_count += count[num]\n\n    # Return the ratio\n    return positive_count / len(arr)"
    },
    {
      "rank": 42,
      "score": 1.0,
      "candidate": "from collections import defaultdict\n\ndef find_ratio(arr):\n    \"\"\"\n    Return the ratio of positive numbers in an array of integers.\n    \"\"\"\n    if not arr:\n        return None\n\n    if len(arr) == 1:\n        return 0 if arr[0] < 0 else 1\n\n    pos = defaultdict(int)\n    neg = defaultdict(int)\n    for num in arr:\n        if num > 0:\n            pos[num] += 1\n        elif num < 0:\n            neg[num] += 1\n\n    ratio = 0\n    for key in pos:\n        ratio += (pos[key] / (pos[key] + neg[key]))\n\n    return ratio"
    },
    {
      "rank": 43,
      "score": 1.0,
      "candidate": "from typing import List\n\n\n# O(n)\ndef find_positive_ratio(arr: List[int]) -> float:\n    if not arr:\n        return 0\n\n    positive_count, negative_count = 0, 0\n\n    for i in arr:\n        if i > 0:\n            positive_count += 1\n        elif i < 0:\n            negative_count += 1\n\n    if positive_count == 0:\n        return 0\n    return positive_count / (positive_count + negative_count)\n\n\nif __name__ == \"__main__\":\n    assert find_positive_ratio([1, 2, 3, -4, 5]) == 0.6\n    assert find_positive_ratio([1, 1, 1, 1, 1, 1]) == 0.6\n    assert find_positive_ratio([-1, -1, -1, -1, -1, -1]) == 0\n    assert find_positive_ratio([]) == 0\n    assert find_positive_ratio([1, -1, 3, 0, -12]) == 0.2"
    },
    {
      "rank": 44,
      "score": 1.0,
      "candidate": "def find_positive_ratio(nums: list) -> float:\n    \"\"\"\n    >>> find_positive_ratio([1, 2, 3, 0, -1])\n    0.2\n    >>> find_positive_ratio([1, 2, 3, 0, 1])\n    0.5\n    >>> find_positive_ratio([1, 2, 3, 0, -1, -2])\n    0.0\n    \"\"\"\n    total = 0\n    positive = 0\n    for num in nums:\n        if num >= 0:\n            positive += 1\n        total += 1\n    return positive / total\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 45,
      "score": 1.0,
      "candidate": "from typing import List\n\n\ndef find_ratio(lst: List[int]) -> int:\n    \"\"\"\n    Time Complexity: O(n)\n    \"\"\"\n    if not lst:\n        return 0\n\n    count = 0\n    ratio = 0\n\n    for i in lst:\n        if i > 0:\n            count += 1\n        ratio += i\n\n    return count / ratio\n\n\nif __name__ == \"__main__\":\n    assert find_ratio([1, 2, 3, 4, 5]) == 0.2\n    assert find_ratio([-1, -2, -3, -4, -5]) == 0\n    assert find_ratio([1, 1, 2, 2]) == 0.5"
    },
    {
      "rank": 46,
      "score": 1.0,
      "candidate": "from collections import Counter\n\n\ndef find_ratio(arr):\n    \"\"\"\n    :param: arr - list of integers\n    return: list of integers\n    \"\"\"\n    # Checking for edge case\n    if len(arr) < 2:\n        return None\n\n    # Calculate the frequency of positive numbers\n    positive_numbers_frequency = Counter(arr)\n\n    # Calculate the ratio of positive numbers\n    ratio = positive_numbers_frequency[1] / len(arr)\n\n    return ratio\n\n\n# Test cases\nprint(find_ratio([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\nprint(find_ratio([1, 1, 0, 1, 1]))\nprint(find_ratio([-1, -2]))"
    },
    {
      "rank": 47,
      "score": 1.0,
      "candidate": "from math import inf\n\ndef positive_ratio(arr):\n    if len(arr) == 0:\n        return inf\n    positive_count = 0\n    negative_count = 0\n    for num in arr:\n        if num > 0:\n            positive_count += 1\n        elif num < 0:\n            negative_count += 1\n    return positive_count / (positive_count + negative_count)\n\n\ndef test_positive_ratio():\n    \"\"\"\n    >>> test_positive_ratio()\n    \"\"\"\n    assert positive_ratio([1, 2, 3, -4, 5]) == 0.6\n    assert positive_ratio([1, -2, -3, 4, 5]) == 0.2\n    assert positive_ratio([-1, -2, -3, -4, -5]) == 0\n    assert positive_ratio([]) == inf\n\n\nif __name__ == '__main__':\n    test_positive_ratio()"
    },
    {
      "rank": 48,
      "score": 1.0,
      "candidate": "def find_ratio_of_positive_numbers(arr):\n    # TODO: Write your code here\n    pass\n\n\nprint(find_ratio_of_positive_numbers([1, 2, 3, 4, 5, 6]))"
    },
    {
      "rank": 49,
      "score": 1.0,
      "candidate": "from typing import List\n\n\ndef find_ratio(arr: List[int]) -> float:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(1)\n    \"\"\"\n    if not arr:\n        raise ValueError(\"Array is empty\")\n\n    total = 0\n    positive = 0\n\n    for num in arr:\n        total += 1\n\n        if num > 0:\n            positive += 1\n\n    return positive / total\n\n\nif __name__ == \"__main__\":\n    assert find_ratio([1, 2, 3, 0, -1, -2, -3]) == 0.5"
    },
    {
      "rank": 50,
      "score": 1.0,
      "candidate": "def positive_ratio(lst):\n    positive = 0\n    negative = 0\n    for i in lst:\n        if i > 0:\n            positive += 1\n        else:\n            negative += 1\n\n    if positive == 0 or negative == 0:\n        return 1\n\n    return positive / negative\n\nprint(positive_ratio([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\nprint(positive_ratio([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10]))\nprint(positive_ratio([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10, 1]))\nprint(positive_ratio([1, -2, -3, -4, -5, -6, -7, -8, -9, -10, 1]))\nprint(positive_ratio([1, -2, -3, -4, -5, -6, -7, -8, -9, -10, -1]))\nprint(positive_ratio([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, -1]))\nprint(positive_ratio([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, -1, -1]))\nprint(positive_ratio([]))\n\n\"\"\"\ndef positive_ratio(lst):\n    positive = 0\n    negative = 0\n    for i in lst:\n        if i > 0:\n            positive += 1\n        else:\n            negative += 1\n\n    if positive == 0 or negative == 0:\n        return 1\n\n    return positive / negative\n\nprint(positive_ratio([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\nprint(positive_rat"
    },
    {
      "rank": 51,
      "score": 1.0,
      "candidate": "def find_ratio(arr):\n    \"\"\"\n    :param: arr - list of integers\n    return: float representing the ratio of positive numbers in the array.\n    return 0 if the array is empty\n    \"\"\"\n    if len(arr) == 0:\n        return 0\n\n    total_pos = 0\n    total_neg = 0\n\n    for i in arr:\n        if i < 0:\n            total_neg += 1\n        else:\n            total_pos += 1\n\n    return total_pos / total_neg\n\n\nprint(find_ratio([3, -4, 5, -2]))"
    },
    {
      "rank": 52,
      "score": 1.0,
      "candidate": "def find_ratio_of_positive_numbers(arr):\n    positive_numbers = 0\n    negative_numbers = 0\n\n    for number in arr:\n        if number > 0:\n            positive_numbers += 1\n        elif number < 0:\n            negative_numbers += 1\n\n    if positive_numbers == 0:\n        return 0\n\n    return round(positive_numbers / (negative_numbers + positive_numbers), 3)\n\n\nif __name__ == \"__main__\":\n    print(find_ratio_of_positive_numbers([1, -2, 3, -4, 5]))\n    print(find_ratio_of_positive_numbers([-1, 2, -3, 4, -5]))\n    print(find_ratio_of_positive_numbers([1, 1, 1, 1]))"
    },
    {
      "rank": 53,
      "score": 1.0,
      "candidate": "def positive_ratio(arr):\n    pos = 0\n    neg = 0\n    for num in arr:\n        if num >= 0:\n            pos += 1\n        else:\n            neg += 1\n    return pos / (pos + neg)\n\n\nif __name__ == \"__main__\":\n    assert positive_ratio([1, -2, 3, -2, 1]) == 0.6\n    assert positive_ratio([1, -1, 1, -1, 1]) == 0.5"
    },
    {
      "rank": 54,
      "score": 1.0,
      "candidate": "from collections import Counter\n\n\ndef find_ratio(arr):\n    c = Counter(arr)\n    return c[1] / c[-1]\n\n\ndef test_find_ratio():\n    assert find_ratio([1, 1, 2, 3, 4, 4, 4, 5, 6, 6, 6, 6]) == 0.25\n\n\nif __name__ == \"__main__\":\n    test_find_ratio()"
    },
    {
      "rank": 55,
      "score": 1.0,
      "candidate": "def find_ratio(arr):\n    positive_count = 0\n    for i in arr:\n        if i > 0:\n            positive_count += 1\n\n    return len(arr) / positive_count\n\n\nif __name__ == \"__main__\":\n    assert find_ratio([1, 2, 3, 4, 5, 6, 7, 8, 9]) == 1.0"
    },
    {
      "rank": 56,
      "score": 1.0,
      "candidate": "from typing import List\n\n\ndef positive_ratio(arr: List[int]) -> float:\n    \"\"\"Returns the ratio of positive numbers in the array.\n\n    >>> positive_ratio([1, 2, 3, -4, 5])\n    0.6\n    \"\"\"\n    # Find the number of positive numbers in the array.\n    pos = 0\n    for i in arr:\n        if i > 0:\n            pos += 1\n\n    # Calculate the ratio.\n    return pos / len(arr)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 57,
      "score": 1.0,
      "candidate": "from collections import Counter\n\n\ndef find_ratio(arr):\n    \"\"\"\n    O(n) & O(n)\n    \"\"\"\n    # 1. create a counter for the positive numbers\n    counter = Counter(arr)\n    # 2. find the ratio\n    return counter[1] / counter[-1]\n\n\ndef main():\n    arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, -1]\n    result = find_ratio(arr)\n    print(result)\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 58,
      "score": 1.0,
      "candidate": "def find_ratio(arr):\n    \"\"\"\n    >>> find_ratio([1, 2, 3, 4, 5])\n    0.2\n    >>> find_ratio([1, 1, 1, 1, 1])\n    0.2\n    >>> find_ratio([-1, -2, -3, -4, -5])\n    0\n    \"\"\"\n    ratio = 0\n    if len(arr) > 0:\n        ratio = len([x for x in arr if x > 0]) / len(arr)\n    return ratio\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 59,
      "score": 1.0,
      "candidate": "from typing import List\n\n\ndef positive_ratio(arr: List[int]) -> float:\n    \"\"\"Find the ratio of positive numbers in an array of integers.\n\n    Args:\n        arr (List[int]): list of integers\n\n    Returns:\n        float: ratio of positive numbers\n    \"\"\"\n    if not arr:\n        return 0.0\n\n    positives = 0\n    for i in arr:\n        if i > 0:\n            positives += 1\n\n    return positives / len(arr)\n\n\nif __name__ == \"__main__\":\n    arr = [1, -2, -3, 4, 5]\n    print(positive_ratio(arr))"
    },
    {
      "rank": 60,
      "score": 1.0,
      "candidate": "from typing import List\n\n\n# Time complexity: O(n)\n# Space complexity: O(1)\ndef find_positive_ratio(arr: List[int]) -> float:\n    # 1. find the sum of positive numbers\n    positive_sum = 0\n    for num in arr:\n        if num > 0:\n            positive_sum += num\n\n    # 2. find the sum of the entire array\n    total_sum = sum(arr)\n\n    # 3. return the ratio\n    return positive_sum / total_sum\n\n\nif __name__ == \"__main__\":\n    assert find_positive_ratio([1, 2, 3, 0, 4]) == 0.6\n    assert find_positive_ratio([-1, -2, -3, -4]) == 0.0\n    assert find_positive_ratio([]) == 0.0\n    assert find_positive_ratio([1]) == 1.0"
    },
    {
      "rank": 61,
      "score": 1.0,
      "candidate": "def positive_ratio(arr):\n    pos_count = 0\n    neg_count = 0\n\n    for i in arr:\n        if i > 0:\n            pos_count += 1\n        else:\n            neg_count += 1\n\n    if neg_count == 0:\n        return \"No negative numbers.\"\n    return round(pos_count / neg_count, 2)\n\n\nif __name__ == \"__main__\":\n    print(positive_ratio([3, -2, -2, 2, 0, 0]))\n    print(positive_ratio([3, -2, -2, 2, 0, 0, -3]))"
    },
    {
      "rank": 62,
      "score": 1.0,
      "candidate": "from collections import Counter\n\n\ndef get_ratio(arr):\n    counter = Counter(arr)\n    return counter[1]/len(arr)\n\n\nassert get_ratio([1, 1, 0, 0, -1, -1]) == 0.5"
    },
    {
      "rank": 63,
      "score": 1.0,
      "candidate": "def find_ratio(arr):\n    pos_count = 0\n    neg_count = 0\n    for i in arr:\n        if i > 0:\n            pos_count += 1\n        elif i < 0:\n            neg_count += 1\n    if neg_count == 0:\n        return 0\n    else:\n        return pos_count/neg_count\n\n\nprint(find_ratio([1, 2, 3, 4, 5, 6, -6, -5, -4, -3, -2, -1]))"
    },
    {
      "rank": 64,
      "score": 1.0,
      "candidate": "from typing import List\n\n\n# Time complexity: O(n)\n# Space complexity: O(1)\ndef positive_ratio(arr: List[int]) -> float:\n    if len(arr) == 0:\n        return 0.0\n\n    # initialize variables\n    pos_sum = 0\n    neg_sum = 0\n    pos_count = 0\n\n    for num in arr:\n        if num > 0:\n            pos_sum += num\n            pos_count += 1\n        else:\n            neg_sum += num\n\n    if pos_count == 0:\n        return 0.0\n\n    return pos_sum / neg_sum\n\n\n# Time complexity: O(n)\n# Space complexity: O(1)\ndef positive_ratio_no_div(arr: List[int]) -> float:\n    if len(arr) == 0:\n        return 0.0\n\n    # initialize variables\n    pos_sum = 0\n    neg_sum = 0\n\n    for num in arr:\n        if num > 0:\n            pos_sum += 1\n        else:\n            neg_sum += 1\n\n    if neg_sum == 0:\n        return 0.0\n\n    return pos_sum / neg_sum\n\n\nif __name__ == \"__main__\":\n    assert positive_ratio([1, -2, 3, -4, 5, -6]) == 5/6\n    assert positive_ratio([1, 2, 3, 4, 5, 6]) == 1.0\n    assert positive_ratio([-1, -2, -3, -4, -5, -6]) == 0.0\n    assert positive_ratio([]) == 0.0\n    assert positive_ratio_no_div([1, -2, 3, -4, 5, -6]) == 5/6\n    assert positive_ratio_no_div([1, 2, 3, 4, 5, 6]) == 1.0\n    assert positive_ratio_no_div([-1, -2, -3, -"
    },
    {
      "rank": 65,
      "score": 1.0,
      "candidate": "def find_ratio(arr):\n    \"\"\"\n    :param: arr - list of integers\n    return: count of positive integers\n    \"\"\"\n    positive = 0\n    negative = 0\n    for num in arr:\n        if num > 0:\n            positive += 1\n        elif num < 0:\n            negative += 1\n\n    return positive/negative\n\n\ndef test_function(test_case):\n    arr = test_case[0]\n    solution = test_case[1]\n    output = find_ratio(arr)\n    \n    if output == solution:\n        print(\"Pass\")\n    else:\n        print(\"Fail\")\n\narr = [1, 2, 3, 4, 5, -9, -10, 100]\nsolution = 0.4\ntest_case = [arr, solution]\ntest_function(test_case)\n\narr = [1, 1, -2]\nsolution = 0.5\ntest_case = [arr, solution]\ntest_function(test_case)\n\narr = [1, 1, 1, 1, -1, -1, -1, -1]\nsolution = 0.5\ntest_case = [arr, solution]\ntest_function(test_case)"
    },
    {
      "rank": 66,
      "score": 1.0,
      "candidate": "from typing import List\n\n\ndef find_ratio(arr: List[int]) -> float:\n    \"\"\"\n    Time Complexity: O(n)\n    \"\"\"\n    num_pos = 0\n    num_neg = 0\n\n    for num in arr:\n        if num > 0:\n            num_pos += 1\n        elif num < 0:\n            num_neg += 1\n\n    if num_neg == 0:\n        return -1\n    return num_pos / num_neg\n\n\nif __name__ == \"__main__\":\n    assert find_ratio([1, 2, -3, -4, 5]) == 0.2\n    assert find_ratio([1, 1, 1, 1, 1, -1, -1, -1, -1, -1]) == 9 / 5"
    },
    {
      "rank": 67,
      "score": 1.0,
      "candidate": "from collections import Counter\n\n\ndef get_positive_ratio(arr):\n    \"\"\"\n    :param: arr - list of integers\n    return: float - ratio of positive numbers\n    TODO: complete this function\n    \"\"\"\n    if not arr:\n        return 0\n\n    count = Counter(arr)\n    return count[0] / len(arr)\n\n\n# Pybites solution\n\n\ndef get_positive_ratio1(arr):\n    \"\"\"\n    :param: arr - list of integers\n    return: float - ratio of positive numbers\n    \"\"\"\n    if not arr:\n        return 0\n\n    positive = sum(num > 0 for num in arr)\n    return positive / len(arr)\n\n\ndef get_positive_ratio2(arr):\n    \"\"\"\n    :param: arr - list of integers\n    return: float - ratio of positive numbers\n    \"\"\"\n    return sum(num > 0 for num in arr) / len(arr)\n\n\ndef get_positive_ratio3(arr):\n    \"\"\"\n    :param: arr - list of integers\n    return: float - ratio of positive numbers\n    \"\"\"\n    return sum([num > 0 for num in arr]) / len(arr)\n\n\ndef get_positive_ratio4(arr):\n    \"\"\"\n    :param: arr - list of integers\n    return: float - ratio of positive numbers\n    \"\"\"\n    return sum(bool(num) for num in arr) / len(arr)"
    },
    {
      "rank": 68,
      "score": 1.0,
      "candidate": "from typing import List\n\n\ndef positive_ratio(integers: List[int]) -> float:\n    \"\"\"Return the ratio of positive numbers in a list of integers.\n\n    >>> positive_ratio([1, 2, 3, 4, 5, 6])\n    0.5\n    >>> positive_ratio([1, 2, 3, 4, 5, -6])\n    0.5\n    >>> positive_ratio([1, -2, 3, -4, 5, -6])\n    0.5\n    \"\"\"\n    return len([i for i in integers if i > 0]) / len(integers)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 69,
      "score": 1.0,
      "candidate": "from typing import List\n\n\ndef find_positive_ratio(arr: List[int]) -> float:\n    \"\"\"\n    Time Complexity: O(n)\n    \"\"\"\n    if not arr:\n        return 0\n\n    positive_count = 0\n    for num in arr:\n        if num > 0:\n            positive_count += 1\n\n    return positive_count / len(arr)\n\n\nif __name__ == \"__main__\":\n    assert find_positive_ratio([1, 2, 3, -4, 5]) == 0.6\n    assert find_positive_ratio([1, 1, 0, 1, 1]) == 0.6\n    assert find_positive_ratio([1, 1, 0]) == 0.6\n    assert find_positive_ratio([0, 0, 0, 0, 0]) == 0\n    assert find_positive_ratio([-1, -1, -1, -1, -1]) == 0"
    },
    {
      "rank": 70,
      "score": 1.0,
      "candidate": "from functools import reduce\nfrom typing import List\n\n\n# Time complexity: O(n)\n# Space complexity: O(1)\ndef find_ratio(arr: List[int]) -> float:\n    \"\"\"\n    >>> find_ratio([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n    1.0\n    >>> find_ratio([1, 2, 3, 4, 5, 6, 7, 8, 9, -10])\n    1.0\n    >>> find_ratio([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10])\n    1.0\n    >>> find_ratio([1, -2, 3, 4, -5, 6, 7, -8, 9, 10])\n    1.0\n    >>> find_ratio([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10])\n    1.0\n    >>> find_ratio([])\n    1.0\n    \"\"\"\n    # Check edge cases\n    if len(arr) == 0:\n        return 1.0\n\n    # Reduce array to a single value\n    positive_values = reduce(lambda x, y: x + 1 if y > 0 else x, arr, 0)\n\n    return float(positive_values) / len(arr)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 71,
      "score": 1.0,
      "candidate": "from collections import defaultdict\n\n\ndef find_positive_ratio(arr):\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(1)\n    \"\"\"\n    if not arr:\n        return 0\n\n    positive_count = 0\n    negative_count = 0\n\n    for num in arr:\n        if num > 0:\n            positive_count += 1\n        elif num < 0:\n            negative_count += 1\n\n    return positive_count / (positive_count + negative_count)\n\n\ndef find_positive_ratio_dict(arr):\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(n)\n    \"\"\"\n    if not arr:\n        return 0\n\n    positive_count = defaultdict(int)\n    negative_count = 0\n\n    for num in arr:\n        if num > 0:\n            positive_count[num] += 1\n        elif num < 0:\n            negative_count += 1\n\n    return sum(positive_count.values()) / (sum(positive_count.values()) + negative_count)\n\n\nif __name__ == \"__main__\":\n    print(find_positive_ratio([1, 2, 3, 0, -1]))\n    print(find_positive_ratio([-1, -2, -3, -4]))\n    print(find_positive_ratio([0, 0, 0, 0, 0]))"
    },
    {
      "rank": 72,
      "score": 1.0,
      "candidate": "def find_positive_ratio(arr):\n    \"\"\"\n    >>> find_positive_ratio([1, 2, 3, -4, 5])\n    0.4\n    >>> find_positive_ratio([1, -2, -3, -4, -5])\n    0\n    >>> find_positive_ratio([-1, -2, -3, -4, -5])\n    0\n    >>> find_positive_ratio([1, 2, -3, 4, 5])\n    0.6\n    \"\"\"\n    if not arr:\n        return 0\n    pos = 0\n    for num in arr:\n        if num > 0:\n            pos += 1\n    return pos / len(arr)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 73,
      "score": 1.0,
      "candidate": "from typing import List\n\n\n# O(n) time | O(1) space - where n is the length of the array\ndef find_ratio_of_positive_numbers(array: List[int]) -> float:\n    count_of_positives = 0\n    for num in array:\n        if num > 0:\n            count_of_positives += 1\n\n    return count_of_positives / len(array)\n\n\n# O(n) time | O(1) space - where n is the length of the array\ndef find_ratio_of_positive_numbers_two(array: List[int]) -> float:\n    count_of_positives = 0\n    for num in array:\n        if num > 0:\n            count_of_positives += 1\n\n    return count_of_positives / (len(array) * 1.0)\n\n\nprint(find_ratio_of_positive_numbers([-1, -2, -3, -4, 1, 2, 3, 4]))\nprint(find_ratio_of_positive_numbers_two([-1, -2, -3, -4, 1, 2, 3, 4]))"
    },
    {
      "rank": 74,
      "score": 1.0,
      "candidate": "def positive_ratio(arr):\n    \"\"\"\n    Time Complexity: O(N)\n    Space Complexity: O(1)\n    \"\"\"\n    count = 0\n    for num in arr:\n        if num > 0:\n            count += 1\n    return count / len(arr)\n\n\nif __name__ == \"__main__\":\n    arr1 = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    arr2 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    arr3 = [1, 2, 3, 4, 5, 6, 7, 8, -9]\n    print(positive_ratio(arr1))\n    print(positive_ratio(arr2))\n    print(positive_ratio(arr3))"
    },
    {
      "rank": 75,
      "score": 1.0,
      "candidate": "def find_ratio(array):\n    pos_count = 0\n    neg_count = 0\n    for num in array:\n        if num > 0:\n            pos_count += 1\n        else:\n            neg_count += 1\n    return pos_count/neg_count\n\n\nprint(find_ratio([1, -2, -3, 4, 5, -6, 7, -8, -9]))"
    },
    {
      "rank": 76,
      "score": 1.0,
      "candidate": "def positive_ration(arr):\n    positive = 0\n    negative = 0\n\n    for i in arr:\n        if i > 0:\n            positive += 1\n        else:\n            negative += 1\n\n    return positive/negative\n\n\nprint(positive_ration([-1, -2, -3, -4, -5, -6]))"
    },
    {
      "rank": 77,
      "score": 1.0,
      "candidate": "from typing import List\n\n\ndef find_ratio_of_positive_numbers(numbers: List[int]) -> float:\n    \"\"\"Find the ratio of positive numbers in a list of integers.\n\n    Args:\n        numbers (List[int]): list of integers\n\n    Returns:\n        float: ratio of positive numbers\n    \"\"\"\n    if len(numbers) == 0:\n        return 0.0\n\n    positive_numbers = 0\n    negative_numbers = 0\n\n    for number in numbers:\n        if number > 0:\n            positive_numbers += 1\n        elif number < 0:\n            negative_numbers += 1\n\n    return positive_numbers / (positive_numbers + negative_numbers)\n\n\nif __name__ == \"__main__\":\n    print(find_ratio_of_positive_numbers([1, 2, 3, -4, 5]))\n    print(find_ratio_of_positive_numbers([1, -2, 3, -4, 5]))\n    print(find_ratio_of_positive_numbers([1, 2, 3, -4, -5]))\n    print(find_ratio_of_positive_numbers([-1, -2, -3, -4, -5]))\n    print(find_ratio_of_positive_numbers([0, 0, 0, 0, 0]))"
    },
    {
      "rank": 78,
      "score": 1.0,
      "candidate": "from typing import List\n\n\n# Time complexity: O(n)\n# Space complexity: O(1)\ndef find_positive_ratio(integers: List[int]) -> float:\n    \"\"\"\n    >>> find_positive_ratio([1, 2, 3, 0, -1, -2])\n    0.6\n    >>> find_positive_ratio([1, 1, 0, 0, -1, -1])\n    0.5\n    >>> find_positive_ratio([0, 0, 0, 0, 0])\n    0.0\n    \"\"\"\n    count_positive = 0\n    for integer in integers:\n        if integer > 0:\n            count_positive += 1\n\n    return count_positive / len(integers)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 79,
      "score": 1.0,
      "candidate": "def positive_ratio(arr):\n    positive = 0\n    negative = 0\n\n    for num in arr:\n        if num >= 0:\n            positive += 1\n        else:\n            negative += 1\n\n    if positive == 0:\n        return None\n\n    return positive / (positive + negative)\n\n\ndef test_positive_ratio():\n    assert positive_ratio([1, 1, 0, -1, -1]) == 0.4\n    assert positive_ratio([1, 1, 1, -1, -1]) == 0.6\n    assert positive_ratio([1, 1, 1, -1]) == 0.75\n    assert positive_ratio([1, 1, 1]) == 1\n    assert positive_ratio([-1, -1, -1]) == None\n    assert positive_ratio([]) == None\n\n\nif __name__ == '__main__':\n    test_positive_ratio()"
    },
    {
      "rank": 80,
      "score": 1.0,
      "candidate": "from typing import List\n\n\ndef find_ratio(arr: List[int]) -> float:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(1)\n    \"\"\"\n    pos_count = 0\n    neg_count = 0\n\n    for num in arr:\n        if num > 0:\n            pos_count += 1\n        elif num < 0:\n            neg_count += 1\n\n    if pos_count == 0:\n        return 0\n\n    return pos_count / neg_count\n\n\nif __name__ == \"__main__\":\n    assert find_ratio([1, 2, 3, -4, 5]) == 2"
    },
    {
      "rank": 81,
      "score": 1.0,
      "candidate": "def positive_ratio(arr):\n    pos_count = 0\n    neg_count = 0\n    for i in range(len(arr)):\n        if arr[i] >= 0:\n            pos_count += 1\n        else:\n            neg_count += 1\n    return (pos_count / (pos_count + neg_count)) * 100\n\n\nprint(positive_ratio([1, 2, 3, -4, 5]))\nprint(positive_ratio([1, -2, 3, -4, 5]))\nprint(positive_ratio([-1, -2, -3, -4, -5]))\nprint(positive_ratio([1, 2, -3, 4, 5]))"
    },
    {
      "rank": 82,
      "score": 1.0,
      "candidate": "def positive_ratio(arr):\n    \"\"\"\n    Time Complexity: O(N)\n    Space Complexity: O(1)\n    \"\"\"\n    positive_numbers = 0\n    for i in arr:\n        if i > 0:\n            positive_numbers += 1\n    return positive_numbers / len(arr)\n\n\nif __name__ == \"__main__\":\n    print(positive_ratio([1, 2, 3, 4, 5]))"
    },
    {
      "rank": 83,
      "score": 1.0,
      "candidate": "def find_ratio(arr):\n    positive_num = 0\n    negative_num = 0\n\n    for num in arr:\n        if num > 0:\n            positive_num += 1\n        elif num < 0:\n            negative_num += 1\n\n    if positive_num == 0:\n        return 0\n    else:\n        return negative_num / positive_num\n\n\nif __name__ == '__main__':\n    arr = [1, 2, 3, 4, 5, 6, 7, 8]\n    print(find_ratio(arr))"
    },
    {
      "rank": 84,
      "score": 1.0,
      "candidate": "from typing import List\n\n\n# O(N)\ndef find_ratio_of_positive_numbers(arr: List[int]) -> int:\n    \"\"\"\n    >>> find_ratio_of_positive_numbers([1, 2, 3, 4])\n    0.25\n    >>> find_ratio_of_positive_numbers([-1, -2, -3, -4])\n    -0.25\n    >>> find_ratio_of_positive_numbers([1, -1, 3, 4])\n    0.5\n    >>> find_ratio_of_positive_numbers([1, -1, -3, 4])\n    0.25\n    \"\"\"\n\n    if len(arr) == 0:\n        return 0\n\n    positive_count = 0\n\n    for num in arr:\n        if num > 0:\n            positive_count += 1\n\n    return positive_count / len(arr)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 85,
      "score": 1.0,
      "candidate": "from typing import List\n\n\ndef find_ratio_of_positive_numbers(arr: List[int]) -> float:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(1)\n    \"\"\"\n    if not arr:\n        return 0\n\n    positive_count = 0\n\n    for num in arr:\n        if num > 0:\n            positive_count += 1\n\n    return positive_count / len(arr)\n\n\nif __name__ == \"__main__\":\n    assert find_ratio_of_positive_numbers([1, 2, 3, 4, 5]) == 0.8"
    },
    {
      "rank": 86,
      "score": 1.0,
      "candidate": "from typing import List\n\n\ndef ratio_positive_numbers(nums: List[int]) -> float:\n    \"\"\"Ratio of positive numbers in an array of integers.\n\n    Time Complexity: O(n)\n    Space Complexity: O(1)\n    \"\"\"\n    if not nums:\n        return 0\n\n    positive_count = 0\n    negative_count = 0\n\n    for num in nums:\n        if num > 0:\n            positive_count += 1\n        elif num < 0:\n            negative_count += 1\n\n    if positive_count == 0:\n        return 0\n\n    return positive_count / (positive_count + negative_count)\n\n\nif __name__ == \"__main__\":\n    arr1 = [1, 2, -3, -4, 0, 0]\n    assert ratio_positive_numbers(arr1) == 0.4\n\n    arr2 = [1, 2, -3, -4, 0, 0, 5, 6]\n    assert ratio_positive_numbers(arr2) == 0.6"
    },
    {
      "rank": 87,
      "score": 1.0,
      "candidate": "def positive_ratio(arr):\n    \"\"\"\n    :param: arr - list of integers\n    return: int - the ratio of positive numbers in arr\n    \"\"\"\n    if len(arr) == 0:\n        return 0\n\n    positive_num = 0\n    negative_num = 0\n    for num in arr:\n        if num >= 0:\n            positive_num += 1\n        else:\n            negative_num += 1\n\n    return positive_num / (positive_num + negative_num)"
    },
    {
      "rank": 88,
      "score": 1.0,
      "candidate": "def find_ratio(nums):\n    \"\"\"\n    :param: array of integers\n    return: ratio of positive numbers\n    \"\"\"\n    # Write your code here.\n    if len(nums) == 0:\n        return -1\n\n    count_positive = 0\n    for i in nums:\n        if i > 0:\n            count_positive += 1\n\n    return count_positive / len(nums)\n\nprint(find_ratio([1, 2, 3, -4, 5]))"
    },
    {
      "rank": 89,
      "score": 1.0,
      "candidate": "def find_ratio(arr):\n    \"\"\"\n    >>> find_ratio([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n    0.1\n    >>> find_ratio([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10])\n    0.0\n    >>> find_ratio([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n    0.1\n    >>> find_ratio([1, -2, 3, -4, 5, -6, 7, -8, 9, -10])\n    0.1\n    >>> find_ratio([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10])\n    0.0\n    >>> find_ratio([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n    0.1\n    >>> find_ratio([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, -1, -2, -3, -4, -5, -6, -7, -8, -9, -10])\n    0.1\n    >>> find_ratio([])\n    'Wrong Input'\n    \"\"\"\n    pos_count = 0\n    neg_count = 0\n    for i in arr:\n        if i >= 0:\n            pos_count += 1\n        else:\n            neg_count += 1\n    if pos_count == 0 and neg_count == 0:\n        return \"Wrong Input\"\n    else:\n        return pos_count / (pos_count + neg_count)\n\n\nif __name__ == \"__main__\":"
    },
    {
      "rank": 90,
      "score": 1.0,
      "candidate": "def positive_ratio(arr):\n    pos_count, neg_count = 0, 0\n    for num in arr:\n        if num > 0:\n            pos_count += 1\n        elif num < 0:\n            neg_count += 1\n    return pos_count / (pos_count + neg_count)\n\n\n# Tests\nprint(positive_ratio([1, 2, -2, -1]))     # 0.5\nprint(positive_ratio([-1, -2, 2, 1]))     # 0.5\nprint(positive_ratio([-1, -2, -3, -4]))   # 0\nprint(positive_ratio([1, -1, 2, 3]))      # 0.5\nprint(positive_ratio([1, -1, 2, 3, -3]))  # 0.5\nprint(positive_ratio([1, -1, 2, 3, -3, 5]))  # 0.7\nprint(positive_ratio([-1, -2, -3, -4]))  # 0"
    },
    {
      "rank": 91,
      "score": 1.0,
      "candidate": "from collections import Counter\n\n\ndef find_ratio(arr):\n    c = Counter(arr)\n    if c[0] == 0:\n        return 0\n    else:\n        return c[1] / c[0]\n\n\n# Tests\nassert find_ratio([1, 1, 0, 0, 1]) == 2\nassert find_ratio([1, 1, 0, 1, 1]) == 0\nassert find_ratio([1, 1, 1, 1, 1]) == 1"
    },
    {
      "rank": 92,
      "score": 1.0,
      "candidate": "def positive_ratio(arr):\n    \"\"\"\n    :param: arr - list of integers\n    return: float - ratio of positive numbers in the list\n    TODO: complete this function to find the ratio of positive numbers in the list\n    \"\"\"\n    count = 0\n    length = len(arr)\n    for i in range(length):\n        if arr[i] > 0:\n            count += 1\n    return count/length\n\n\n# ## Unit Test\n# \n# \n# \n# **The following code is to run the unit test which will call the function.**\n\n# In[ ]:\n\n\n# def test_positive_ratio(test_case):\n#     expected = test_case[1]\n#     actual = positive_ratio(test_case[0])\n#     if actual == expected:\n#         return True\n#     else:\n#         print(\"Failed for input:\")\n#         print(test_case[0])\n#         return False\n\n\n# arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, -11, -12, -13, -14, -15]\n# test_case = [arr, 0.375]\n# test_positive_ratio(test_case)\n\n\n# In[ ]:\n\n\n# This code is just for your understanding, you can omit this part\nimport unittest\n\nclass TestRatio(unittest.TestCase):\n\n    def test(self, test_case):\n        expected = test_case[1]\n        actual = positive_ratio(test_case[0])\n        self.assertEqual(actual, expected)\n\n\n    def test_case1(self):\n        arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, -11, -12, -13, -14, -15]\n        test_case = [arr, 0.375]\n        self.test(test_case)\n\n\n    def test_case2("
    },
    {
      "rank": 93,
      "score": 1.0,
      "candidate": "def positive_ratio(arr):\n    positive = 0\n    negative = 0\n    for num in arr:\n        if num > 0:\n            positive += 1\n        else:\n            negative += 1\n\n    return positive / (positive + negative)\n\n\ndef test_positive_ratio():\n    assert positive_ratio([1, 2, 3, 4, 5]) == 0.8\n    assert positive_ratio([1, -1, 3, 4, 5]) == 0.6\n    assert positive_ratio([-1, -2, -3, -4, -5]) == 0\n    assert positive_ratio([0, 0, 0, 0, 0]) == 0.2"
    },
    {
      "rank": 94,
      "score": 1.0,
      "candidate": "from typing import List\n\n\ndef find_ratio(lst: List[int]) -> float:\n    \"\"\"Find ratio of positive numbers in an array of integers.\n\n    Args:\n        lst (List[int]): list of integers\n\n    Examples:\n        >>> assert find_ratio([1, 2, 3, 4]) == 0.5\n        >>> assert find_ratio([1, 1, 1, 1]) == 0.25\n        >>> assert find_ratio([-1, -2, -3, -4]) == 0.0\n        >>> assert find_ratio([]) == 0.0\n        >>> assert find_ratio([-1, 0, 1, 2, 3, 4]) == 0.75\n    \"\"\"\n    return sum(1 for i in lst if i > 0) / len(lst)\n\n\nif __name__ == \"__main__\":\n    print(find_ratio([1, 2, 3, 4]))\n    print(find_ratio([1, 1, 1, 1]))\n    print(find_ratio([-1, -2, -3, -4]))\n    print(find_ratio([]))\n    print(find_ratio([-1, 0, 1, 2, 3, 4]))"
    },
    {
      "rank": 95,
      "score": 1.0,
      "candidate": "def find_ratio(nums):\n    positive = 0\n    negative = 0\n    for num in nums:\n        if num > 0:\n            positive += 1\n        elif num < 0:\n            negative += 1\n    if positive == 0:\n        return 0\n    else:\n        return negative / positive\n\n\nif __name__ == '__main__':\n    test_list = [1, 2, 3, 4, 5]\n    assert find_ratio(test_list) == 0.2\n    test_list = [-1, -2, -3, -4, -5]\n    assert find_ratio(test_list) == 1\n    test_list = [1, -2, 3, -4, 5]\n    assert find_ratio(test_list) == 2\n    test_list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    assert find_ratio(test_list) == 0.5"
    },
    {
      "rank": 96,
      "score": 1.0,
      "candidate": "from typing import List\n\n\ndef find_ratio(arr: List[int]) -> float:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(1)\n    \"\"\"\n    positive_count = 0\n    negative_count = 0\n\n    for num in arr:\n        if num > 0:\n            positive_count += 1\n        else:\n            negative_count += 1\n\n    if positive_count == 0:\n        return 0.0\n\n    return negative_count / positive_count\n\n\nif __name__ == \"__main__\":\n    assert find_ratio([1, 2, 3, 4, 5]) == 0.2\n    assert find_ratio([1, -1, 0, 0, 0, -1]) == 0.3333333333333333"
    },
    {
      "rank": 97,
      "score": 1.0,
      "candidate": "def find_ratio_of_positive_numbers(arr):\n    positive_counter = 0\n    for num in arr:\n        if num > 0:\n            positive_counter += 1\n    return positive_counter / len(arr)\n\n\nprint(find_ratio_of_positive_numbers([1, 2, 3, 4, 5, 6, 7, 8, 9]))\nprint(find_ratio_of_positive_numbers([-1, -2, -3, -4, -5, -6, -7, -8, -9]))\nprint(find_ratio_of_positive_numbers([1, -2, 3, -4, 5, -6, 7, -8, 9]))"
    },
    {
      "rank": 98,
      "score": 1.0,
      "candidate": "def positive_ratio(arr):\n    # Your code here\n    pass\n\n\nif __name__ == '__main__':\n    # Use the main function here to test your implementation\n    arr = [1, 2, 3, -4, -1]\n    print(positive_ratio(arr))"
    },
    {
      "rank": 99,
      "score": 1.0,
      "candidate": "def find_ratio(arr):\n    \"\"\"\n    Time complexity: O(n)\n    Space complexity: O(1)\n    \"\"\"\n    count = 0\n    for i in arr:\n        if i > 0:\n            count += 1\n    return count/len(arr)\n\nassert find_ratio([1, 2, 3, -4, 5]) == 0.6\nassert find_ratio([1, 1, -1, 1, 1]) == 0.6\nassert find_ratio([-1, -1, -1, -1, -1]) == 0"
    },
    {
      "rank": 100,
      "score": 1.0,
      "candidate": "def find_ratio(input_list):\n    positive_count = 0\n    for number in input_list:\n        if number > 0:\n            positive_count += 1\n\n    return positive_count / len(input_list)\n\n\n# TESTS\nassert find_ratio([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 0.5\nassert find_ratio([1, 1, 1, 1, 1, 1, 1, 1, 1, 0]) == 0.1\nassert find_ratio([1, 1, 0, 1, 1, 0, 1, 1, 0, 1]) == 0.3"
    }
  ]
}