{
  "timestamp": "2025-09-14T22:38:12.921110",
  "method": "improved_llm_judge",
  "judge_model": "codellama/CodeLlama-7b-Python-hf",
  "target_model": "codellama-7b",
  "dataset": "mbpp",
  "problem_number": 45,
  "total_candidates": 100,
  "results": [
    {
      "rank": 1,
      "score": 10.0,
      "candidate": "def check_palindrome(number: int) -> bool:\n    \"\"\"\n    >>> check_palindrome(121)\n    True\n    >>> check_palindrome(142)\n    False\n    \"\"\"\n    reverse = 0\n    number = int(number)\n    while number > 0:\n        reverse = reverse * 10 + number % 10\n        number = number // 10\n    return number == reverse // 10\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 2,
      "score": 10.0,
      "candidate": "def is_palindrome(number):\n    return number == int(str(number)[::-1])\n\n\ndef is_one_less_than_twice_reverse(number):\n    reverse = int(str(number)[::-1])\n    return number + 1 == 2 * reverse\n\n\ndef check_palindrome(number):\n    if is_palindrome(number) and is_one_less_than_twice_reverse(number):\n        return True\n    else:\n        return False\n\n\ndef main():\n    number = 121\n    print(check_palindrome(number))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 3,
      "score": 10.0,
      "candidate": "def isDoublePalindrome(n):\n    reverse = 0\n    temp = n\n    while temp > 0:\n        reverse = reverse*10 + temp % 10\n        temp = int(temp/10)\n    if n+1 == reverse:\n        return True\n    return False\n\n\nn = int(input(\"Enter a number: \"))\nprint(isDoublePalindrome(n))"
    },
    {
      "rank": 4,
      "score": 8.0,
      "candidate": "def check_one_less_than_twice(n):\n    if n < 1:\n        return \"Invalid number\"\n    rev = 0\n    while n > 0:\n        rev = rev * 10 + n % 10\n        n //= 10\n    return rev + 1 == 2 * n\n\n\ndef main():\n    n = int(input(\"Enter number: \"))\n    print(check_one_less_than_twice(n))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 5,
      "score": 8.0,
      "candidate": "def is_one_less_than_twice(num):\n    rev = 0\n    while num > 0:\n        rev = rev * 10 + num % 10\n        num //= 10\n    return rev * 2 == num - 1\n\n\ndef main():\n    num = int(input(\"Enter a number: \"))\n    if is_one_less_than_twice(num):\n        print(num, \"is one less than twice its reverse\")\n    else:\n        print(num, \"is not one less than twice its reverse\")\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 6,
      "score": 8.0,
      "candidate": "def check_num(num):\n    reverse = 0\n    for i in range(len(str(num))):\n        reverse = reverse * 10 + int(str(num)[-i - 1])\n    if reverse == num - 1:\n        return True\n    else:\n        return False\n\nnum = int(input())\nprint(check_num(num))\n\n\"\"\"\nINPUT  : 12345\nOUTPUT : True\n\"\"\""
    },
    {
      "rank": 7,
      "score": 8.0,
      "candidate": "def check_reverse_twice(num):\n    rev = 0\n    while num > 0:\n        rev = rev * 10 + num % 10\n        num = num // 10\n    return rev == num * 2 - 1\n\n\ndef main():\n    num = int(input(\"Enter a number: \"))\n    print(check_reverse_twice(num))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 8,
      "score": 8.0,
      "candidate": "def is_palindrome(num):\n    return num == int(str(num)[::-1])\n\ndef one_less_than_twice(num):\n    rev = int(str(num)[::-1])\n    return rev + 1 == 2 * num\n\ndef check(num):\n    return is_palindrome(num) and one_less_than_twice(num)\n\nprint(check(121))\nprint(check(132))\nprint(check(123))"
    },
    {
      "rank": 9,
      "score": 8.0,
      "candidate": "def is_palindrome(num):\n    rev = 0\n    tmp = num\n    while tmp != 0:\n        rev = rev*10 + tmp%10\n        tmp = int(tmp/10)\n    if rev == num * 2 - 1:\n        return True\n    return False\n\n\nprint(is_palindrome(121))\nprint(is_palindrome(212))\nprint(is_palindrome(111))"
    },
    {
      "rank": 10,
      "score": 8.0,
      "candidate": "def is_palindrome(n):\n    return str(n) == str(n)[::-1]\n\n\ndef is_one_away(n, n_reverse):\n    return abs(n - n_reverse) == 1\n\n\ndef is_one_away_reverse(n, n_reverse):\n    return is_one_away(n, n_reverse) or is_one_away(n_reverse, n)\n\n\ndef is_one_away_palindrome(n):\n    return is_one_away_reverse(n, int(str(n)[::-1]))\n\n\ndef is_one_away_reverse_palindrome(n):\n    return is_one_away_reverse(n, int(str(n)[::-1])) or is_one_away_reverse(\n        int(str(n)[::-1]), n\n    )\n\n\ndef one_away(n):\n    n_reverse = int(str(n)[::-1])\n    return (\n        is_one_away_reverse(n, n_reverse)\n        or is_one_away_palindrome(n)\n        or is_one_away_reverse_palindrome(n)\n    )"
    },
    {
      "rank": 11,
      "score": 8.0,
      "candidate": "def is_palindrome(n):\n    \"\"\"\n    Check if a given number is one less than twice its reverse.\n\n    >>> is_palindrome(121)\n    True\n    >>> is_palindrome(1331)\n    True\n    >>> is_palindrome(1221)\n    False\n    >>> is_palindrome(1321)\n    False\n    >>> is_palindrome(12321)\n    False\n    >>> is_palindrome(1001)\n    False\n    \"\"\"\n    reverse = 0\n    while n:\n        reverse = reverse * 10 + n % 10\n        n = n // 10\n    return reverse == 2 * n - 1\n\n\ndef main():\n    \"\"\"\n    Print the result of is_palindrome function\n    \"\"\"\n    print(is_palindrome(121))\n    print(is_palindrome(1331))\n    print(is_palindrome(1221))\n    print(is_palindrome(1321))\n    print(is_palindrome(12321))\n    print(is_palindrome(1001))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 12,
      "score": 8.0,
      "candidate": "def check_reverse(number):\n    rev = 0\n    while number > 0:\n        rev = rev * 10 + number % 10\n        number = number // 10\n\n    return rev + 1 == 2 * number\n\n\ndef main():\n    number = int(input(\"Enter a number: \"))\n    if check_reverse(number):\n        print(\"The number is one less than twice its reverse\")\n    else:\n        print(\"The number is not one less than twice its reverse\")\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 13,
      "score": 8.0,
      "candidate": "def is_palindrome(num):\n    rev = 0\n    while num > 0:\n        rev = rev * 10 + num % 10\n        num = num // 10\n    return rev\n\n\ndef check_palindrome(num):\n    return num == is_palindrome(num) - 1\n\n\nif __name__ == \"__main__\":\n    num = int(input(\"Enter number: \"))\n    print(check_palindrome(num))"
    },
    {
      "rank": 14,
      "score": 8.0,
      "candidate": "def check(num):\n    rev=0\n    n=num\n    while(num):\n        rev=rev*10+num%10\n        num=num//10\n    if(rev+1==2*n):\n        return True\n    else:\n        return False\n    \nnum=int(input(\"Enter a number : \"))\nif(check(num)):\n    print(num,\"is a special number\")\nelse:\n    print(num,\"is not a special number\")"
    },
    {
      "rank": 15,
      "score": 8.0,
      "candidate": "def isPalindrome(num):\n    return num == int(str(num)[::-1])\n\ndef isPalindrome2(num):\n    rev = 0\n    while num > rev:\n        rev = rev * 10 + num % 10\n        num = num // 10\n    return num == rev or num == rev // 10\n\ndef isLessThanTwiceReverse(num):\n    return num < 10 and num == int(str(num)[::-1]) * 2\n\ndef isLessThanTwiceReverse2(num):\n    rev = 0\n    while num > rev:\n        rev = rev * 10 + num % 10\n        num = num // 10\n    return num == rev * 2\n\nif __name__ == \"__main__\":\n    num = int(input(\"Enter a number: \"))\n    if isLessThanTwiceReverse2(num):\n        print(\"True\")\n    else:\n        print(\"False\")"
    },
    {
      "rank": 16,
      "score": 8.0,
      "candidate": "def check_num(num):\n    rev_num = int(str(num)[::-1])\n    if rev_num == 2*num-1:\n        return True\n    return False"
    },
    {
      "rank": 17,
      "score": 8.0,
      "candidate": "def check_palindrome(number):\n    rev = 0\n    temp = number\n    while temp > 0:\n        rev = rev*10 + temp % 10\n        temp = temp//10\n    if rev == number-2:\n        return True\n    else:\n        return False\n\n\ndef main():\n    number = int(input(\"Enter a number: \"))\n    if check_palindrome(number):\n        print(\"The number is a palindrome\")\n    else:\n        print(\"The number is not a palindrome\")\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 18,
      "score": 8.0,
      "candidate": "def reverse(num):\n    rev = 0\n    while num > 0:\n        rem = num % 10\n        rev = rev * 10 + rem\n        num = num // 10\n    return rev\n\n\ndef check_num(num):\n    rev = reverse(num)\n    return num == rev - 1\n\n\ndef check_num_two(num):\n    rev = str(num)[::-1]\n    return num == int(rev) - 1\n\n\nprint(check_num_two(123))"
    },
    {
      "rank": 19,
      "score": 8.0,
      "candidate": "def is_palindrome(num):\n    return num == int(str(num)[::-1])\n\n\ndef is_one_away(num1, num2):\n    if abs(num1 - num2) == 1:\n        return True\n    else:\n        return False\n\n\ndef is_twice_palindrome(num):\n    return is_one_away(num, int(str(num)[::-1]) * 2)\n\n\nprint(is_twice_palindrome(12321))\nprint(is_twice_palindrome(12345))"
    },
    {
      "rank": 20,
      "score": 8.0,
      "candidate": "def reverse(num):\n    rev = 0\n    while num > 0:\n        rev = rev*10 + num%10\n        num = num//10\n    return rev\n\ndef check(num):\n    if num == reverse(num)+1:\n        return True\n    else:\n        return False\n\nprint(check(11))\nprint(check(22))\nprint(check(12))"
    },
    {
      "rank": 21,
      "score": 8.0,
      "candidate": "def check_number(num):\n    rev = 0\n    while num > 0:\n        rev = rev * 10 + num % 10\n        num = num // 10\n    return rev + 1 == 2 * num\n\n\nprint(check_number(12))\nprint(check_number(13))\nprint(check_number(143))\nprint(check_number(123))"
    },
    {
      "rank": 22,
      "score": 8.0,
      "candidate": "def is_palindrome(n: int) -> bool:\n    return str(n) == str(n)[::-1]\n\n\ndef is_palindrome_less_than_twice(n: int) -> bool:\n    return is_palindrome(n) and n * 2 < 10 ** len(str(n))\n\n\ndef check_palindrome(n: int) -> bool:\n    reverse = 0\n    while n > 0:\n        reverse = 10 * reverse + n % 10\n        n //= 10\n    return reverse < 10 ** (len(str(n)) + 1)\n\n\nif __name__ == \"__main__\":\n    print(is_palindrome_less_than_twice(1221))\n    print(is_palindrome_less_than_twice(123321))\n    print(is_palindrome_less_than_twice(112121))\n    print(is_palindrome_less_than_twice(12332123))"
    },
    {
      "rank": 23,
      "score": 8.0,
      "candidate": "def check(num):\n    num2=int(str(num)[::-1])\n    if num2==num-2:\n        print(f\"{num} is one less than twice its reverse\")\n    else:\n        print(f\"{num} is not one less than twice its reverse\")\n\ncheck(121)\ncheck(120)\ncheck(102)\ncheck(101)\ncheck(123)\ncheck(12)\ncheck(124)\ncheck(125)"
    },
    {
      "rank": 24,
      "score": 8.0,
      "candidate": "def check_num(num):\n    rev = 0\n    while num > 0:\n        rev = rev * 10 + num % 10\n        num = int(num / 10)\n    return num == rev / 10\n\n\nprint(check_num(121))\nprint(check_num(212))\nprint(check_num(55))"
    },
    {
      "rank": 25,
      "score": 8.0,
      "candidate": "def is_palindrome(number):\n    reverse = 0\n    while number > reverse:\n        reverse = reverse*10 + number%10\n        number = number//10\n    return number == reverse or number == reverse//10\n\ndef is_one_away(number):\n    if number < 10:\n        return False\n    if number%10 == 0:\n        return False\n    if is_palindrome(number):\n        return True\n    return False\n\n\nprint(is_one_away(121))\nprint(is_one_away(122))\nprint(is_one_away(123))\nprint(is_one_away(124))"
    },
    {
      "rank": 26,
      "score": 8.0,
      "candidate": "def check_palindrome(n):\n    reverse = 0\n    temp = n\n    while temp != 0:\n        reverse = reverse * 10 + (temp % 10)\n        temp = temp // 10\n    return reverse == n - 1\n\nprint(check_palindrome(121))\nprint(check_palindrome(551))"
    },
    {
      "rank": 27,
      "score": 8.0,
      "candidate": "def check_number(number):\n    reverse_number = int(str(number)[::-1])\n    return (number - 1) * 2 == reverse_number\n\n\nif __name__ == \"__main__\":\n    print(check_number(12))\n    print(check_number(121))"
    },
    {
      "rank": 28,
      "score": 8.0,
      "candidate": "def is_palindrome(num):\n    num = str(num)\n    reverse = num[::-1]\n    if int(reverse) + 1 == 2 * int(reverse):\n        return True\n    return False\n\n\ndef main():\n    num = int(input(\"Enter number: \"))\n    if is_palindrome(num):\n        print(f\"{num} is palindrome\")\n    else:\n        print(f\"{num} is not palindrome\")\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 29,
      "score": 8.0,
      "candidate": "def check_palindrome(number):\n    number_str = str(number)\n    number_str_reverse = number_str[::-1]\n    num_reverse = int(number_str_reverse)\n    return number == num_reverse * 2 - 1\n\n\nprint(check_palindrome(121))\nprint(check_palindrome(999))\nprint(check_palindrome(555))\nprint(check_palindrome(10000001))\nprint(check_palindrome(1000001))"
    },
    {
      "rank": 30,
      "score": 8.0,
      "candidate": "def is_one_away(num):\n    num_str = str(num)\n    num_reverse = num_str[::-1]\n    num_int = int(num_reverse)\n    if num + 1 == num_int:\n        return True\n    else:\n        return False\n\n\nprint(is_one_away(12))"
    },
    {
      "rank": 31,
      "score": 8.0,
      "candidate": "def check(num):\n    rev = 0\n    while num > 0:\n        rev = rev*10 + num%10\n        num = num//10\n    return num == rev*2 + 1\n\ndef main():\n    num = int(input(\"Enter a number: \"))\n    print(check(num))\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 32,
      "score": 8.0,
      "candidate": "def is_palindrome(num):\n    rev = 0\n    while num > 0:\n        rev = rev * 10 + num % 10\n        num = num // 10\n    return rev\n\ndef check_palindrome(num):\n    if num == is_palindrome(num) + 1 or num == is_palindrome(num) - 1:\n        return True\n    else:\n        return False\n\nprint(check_palindrome(121))\nprint(check_palindrome(122))\nprint(check_palindrome(123))"
    },
    {
      "rank": 33,
      "score": 8.0,
      "candidate": "def is_palindrome(num):\n    rev = 0\n    while num > 0:\n        rem = num % 10\n        rev = rev * 10 + rem\n        num = num // 10\n    return rev\n\n\ndef is_one_less_than_twice(num):\n    rev = is_palindrome(num)\n    if num + 1 == rev * 2:\n        return True\n    return False\n\n\nif __name__ == \"__main__\":\n    num = int(input(\"Enter a number: \"))\n    if is_one_less_than_twice(num):\n        print(\"Yes\")\n    else:\n        print(\"No\")"
    },
    {
      "rank": 34,
      "score": 8.0,
      "candidate": "def reverse(n):\n    rev = 0\n    while n > 0:\n        a = n % 10\n        n = n // 10\n        rev = rev * 10 + a\n    return rev\n\n\ndef is_palindrome(n):\n    rev = reverse(n)\n    if rev == n - 2:\n        return True\n    return False\n\n\ndef main():\n    n = int(input(\"Enter a number: \"))\n    if is_palindrome(n):\n        print(f\"{n} is a palindrome\")\n    else:\n        print(f\"{n} is not a palindrome\")\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 35,
      "score": 8.0,
      "candidate": "def is_palindrome(num):\n    return str(num) == str(num)[::-1]\n\ndef is_palindrome_less(num):\n    return num == int(str(num)[::-1])+1\n\ndef is_reverse_twice(num):\n    return is_palindrome(num) and is_palindrome_less(num)\n\ndef main():\n    num = int(input(\"Enter a number: \"))\n    if is_reverse_twice(num):\n        print(\"The number is palindrome less than twice its reverse\")\n    else:\n        print(\"The number is not palindrome less than twice its reverse\")\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 36,
      "score": 8.0,
      "candidate": "def is_palindrome(num):\n    return str(num) == str(num)[::-1]\n\n\ndef is_one_less_than_twice_reverse(num):\n    reverse = int(str(num)[::-1])\n    return num + 1 == 2 * reverse\n\n\ndef main():\n    print(is_one_less_than_twice_reverse(121))\n    print(is_one_less_than_twice_reverse(123))\n    print(is_one_less_than_twice_reverse(124))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 37,
      "score": 8.0,
      "candidate": "def is_palindrome(n):\n    rev = 0\n    while n > 0:\n        rev = rev * 10 + n % 10\n        n = n // 10\n    return rev\n\n\ndef check_reverse(n):\n    rev = is_palindrome(n)\n    if rev - 2 == n:\n        return True\n    else:\n        return False\n\n\ndef main():\n    n = int(input(\"Enter a number: \"))\n    if check_reverse(n):\n        print(f\"{n} is one less than twice its reverse\")\n    else:\n        print(f\"{n} is not one less than twice its reverse\")\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 38,
      "score": 8.0,
      "candidate": "def check_palindrome(n):\n    return n == int(str(n)[::-1]) + 1\n\nprint(check_palindrome(121))\nprint(check_palindrome(55))"
    },
    {
      "rank": 39,
      "score": 8.0,
      "candidate": "def is_palindrome(num):\n    return str(num) == str(num)[::-1]\n\ndef is_one_away(num):\n    return num == num + 1 or num == num - 1\n\ndef is_one_away_reverse(num):\n    return is_palindrome(num + 1) or is_palindrome(num - 1)\n\ndef one_away(num):\n    return is_one_away(num) or is_one_away_reverse(num)\n\nprint(one_away(123))\nprint(one_away(122))\nprint(one_away(121))\nprint(one_away(111))\nprint(one_away(112))"
    },
    {
      "rank": 40,
      "score": 8.0,
      "candidate": "def check_palindrome(num):\n    reverse_num = 0\n    while num > 0:\n        reminder = num % 10\n        reverse_num = reverse_num * 10 + reminder\n        num = num // 10\n\n    return reverse_num + 1 == num\n\ndef main():\n    num = int(input(\"Enter a number: \"))\n    print(check_palindrome(num))\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 41,
      "score": 8.0,
      "candidate": "def is_palindrome(n: int):\n    return str(n) == str(n)[::-1]\n\n\ndef is_double_palindrome(n: int):\n    return is_palindrome(n) and is_palindrome(int(str(n)[::-1])/2)\n\n\ndef main(n: int):\n    if is_double_palindrome(n):\n        print(f\"{n} is a double palindrome\")\n    else:\n        print(f\"{n} is not a double palindrome\")\n\n\nif __name__ == \"__main__\":\n    main(12121)"
    },
    {
      "rank": 42,
      "score": 8.0,
      "candidate": "def check_if_one_less_than_twice_reverse(num):\n    reverse_num = int(str(num)[::-1])\n    if num + 1 == reverse_num * 2:\n        return True\n    else:\n        return False\n\n\nprint(check_if_one_less_than_twice_reverse(12))\nprint(check_if_one_less_than_twice_reverse(321))\nprint(check_if_one_less_than_twice_reverse(20))\nprint(check_if_one_less_than_twice_reverse(21))"
    },
    {
      "rank": 43,
      "score": 8.0,
      "candidate": "def isReverse(num):\n    rev = 0\n    while num > 0:\n        rev = rev * 10 + num % 10\n        num = num // 10\n    return rev * 2 == num\n\n\nprint(isReverse(12))\nprint(isReverse(102))\nprint(isReverse(1001))"
    },
    {
      "rank": 44,
      "score": 8.0,
      "candidate": "def is_palindrome(num):\n    rev = 0\n    temp = num\n    while temp != 0:\n        rev = rev * 10 + temp % 10\n        temp = int(temp / 10)\n\n    if rev == num:\n        return True\n    return False\n\ndef is_double_palindrome(num):\n    rev = 0\n    temp = num\n    while temp != 0:\n        rev = rev * 10 + temp % 10\n        temp = int(temp / 10)\n\n    if rev * 2 == num:\n        return True\n    return False\n\ndef is_one_less_double_palindrome(num):\n    rev = 0\n    temp = num\n    while temp != 0:\n        rev = rev * 10 + temp % 10\n        temp = int(temp / 10)\n\n    if rev * 2 == num - 1:\n        return True\n    return False\n\ndef main():\n    num = int(input(\"Enter a number: \"))\n\n    if is_palindrome(num) and is_double_palindrome(num) and is_one_less_double_palindrome(num):\n        print(\"Given number is one less than twice its reverse\")\n    else:\n        print(\"Given number is not one less than twice its reverse\")\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 45,
      "score": 8.0,
      "candidate": "def check_num(num):\n    if str(num) == str(num)[::-1][1:]:\n        return True\n    else:\n        return False\n\nprint(check_num(99))\nprint(check_num(121))\nprint(check_num(55))\nprint(check_num(66))\nprint(check_num(88))\nprint(check_num(110))\nprint(check_num(22))\nprint(check_num(23))"
    },
    {
      "rank": 46,
      "score": 8.0,
      "candidate": "def check_if_palindrome(num):\n    num_str = str(num)\n    rev = num_str[::-1]\n    num_rev = int(rev)\n    return num_rev == 2 * num - 1\n\n\ndef check_palindrome(num):\n    num_rev = int(str(num)[::-1])\n    return num_rev == 2 * num - 1\n\n\ndef main():\n    num = int(input(\"Enter a number: \"))\n    result = check_palindrome(num)\n    print(result)\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 47,
      "score": 8.0,
      "candidate": "def is_palindrome(num):\n    reverse = 0\n    temp = num\n    while temp > 0:\n        reverse = reverse * 10 + temp % 10\n        temp = int(temp / 10)\n\n    if reverse == num - 2:\n        return True\n    return False\n\n\nprint(is_palindrome(121))\nprint(is_palindrome(120))"
    },
    {
      "rank": 48,
      "score": 8.0,
      "candidate": "def check(n):\n    return n == int(str(n)[::-1]) * 2 - 1\n\n\nn = int(input(\"Enter number: \"))\nif check(n):\n    print(\"YES\")\nelse:\n    print(\"NO\")"
    },
    {
      "rank": 49,
      "score": 8.0,
      "candidate": "def is_palindrome(num):\n    return num == int(str(num)[::-1])\n\n\ndef is_one_away(num1, num2):\n    return abs(num1 - num2) <= 1\n\n\ndef is_one_away_palindrome(num):\n    return is_one_away(num, int(str(num)[::-1]))\n\n\ndef one_away_palindrome(num):\n    return is_one_away(num, int(str(num)[::-1])) or is_palindrome(num)\n\n\ndef main():\n    print(one_away_palindrome(101))\n    print(one_away_palindrome(122))\n    print(one_away_palindrome(123))\n    print(one_away_palindrome(123321))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 50,
      "score": 8.0,
      "candidate": "def is_palindrome(num):\n    rev = 0\n    while num > 0:\n        rev = rev * 10 + num % 10\n        num = num // 10\n    return rev\n\ndef check_one_less_twice_reverse(num):\n    rev = is_palindrome(num)\n    if num + 1 == rev * 2:\n        return True\n    return False\n\nif __name__ == \"__main__\":\n    num = int(input(\"Enter a number: \"))\n    print(check_one_less_twice_reverse(num))"
    },
    {
      "rank": 51,
      "score": 8.0,
      "candidate": "def isDoubleBasePalindrome(n):\n    if n < 10:\n        return False\n    num = str(n)\n    rev = num[::-1]\n    if int(rev) == int(num) / 10 + int(num) % 10:\n        return True\n    return False"
    },
    {
      "rank": 52,
      "score": 8.0,
      "candidate": "def check_palindrome(number):\n    reverse_number = int(str(number)[::-1])\n    return number + 1 == 2 * reverse_number\n\n\nprint(check_palindrome(121))\nprint(check_palindrome(55))\nprint(check_palindrome(66))\nprint(check_palindrome(123))"
    },
    {
      "rank": 53,
      "score": 8.0,
      "candidate": "def is_palindrome(num):\n    reverse_num = int(str(num)[::-1])\n    return num - 1 == 2 * reverse_num\n\n\ndef main():\n    num = int(input(\"Enter a number: \"))\n    if is_palindrome(num):\n        print(f\"{num} is a palindrome.\")\n    else:\n        print(f\"{num} is not a palindrome.\")\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 54,
      "score": 8.0,
      "candidate": "def check_palindrome(num):\n    rev = int(str(num)[::-1])\n    return rev == 2 * num - 1\n\ndef check_palindrome_2(num):\n    rev = 0\n    while num > 0:\n        rev = rev * 10 + num % 10\n        num = num // 10\n    return rev == 2 * num - 1\n\nprint(check_palindrome(121))\nprint(check_palindrome(14321))\nprint(check_palindrome_2(121))\nprint(check_palindrome_2(14321))"
    },
    {
      "rank": 55,
      "score": 8.0,
      "candidate": "def is_one_less_than_twice_reverse(num: int) -> bool:\n    \"\"\"\n    >>> is_one_less_than_twice_reverse(12)\n    True\n    >>> is_one_less_than_twice_reverse(123)\n    False\n    \"\"\"\n    return (num + int(str(num)[::-1])) / 2 == num - 1\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 56,
      "score": 8.0,
      "candidate": "def is_palindrome(num):\n    rev = 0\n    tmp = num\n    while tmp > 0:\n        rev = rev * 10 + tmp % 10\n        tmp = tmp // 10\n    if rev == num * 2 - 1:\n        return True\n    return False\n\n\nif __name__ == \"__main__\":\n    num = int(input(\"Enter a number: \"))\n    if is_palindrome(num):\n        print(f\"{num} is a palindrome\")\n    else:\n        print(f\"{num} is not a palindrome\")"
    },
    {
      "rank": 57,
      "score": 8.0,
      "candidate": "def reverse_and_add(num):\n    rev = 0\n    while num > 0:\n        rev = rev * 10 + (num % 10)\n        num = num // 10\n    return rev + 1\n\ndef check_palindrome(num):\n    return num == reverse_and_add(num)\n\n\nnum = int(input(\"Enter a number: \"))\nif check_palindrome(num):\n    print(num, \"is a palindrome\")\nelse:\n    print(num, \"is not a palindrome\")"
    },
    {
      "rank": 58,
      "score": 8.0,
      "candidate": "def is_palindrome(n):\n    return n == int(str(n)[::-1])\n\n\ndef is_less_than_twice_reverse(n):\n    return n < 2 * int(str(n)[::-1])\n\n\ndef one_less_than_twice_reverse(n):\n    return is_palindrome(n) and is_less_than_twice_reverse(n)\n\n\nif __name__ == \"__main__\":\n    assert one_less_than_twice_reverse(145) == True\n    assert one_less_than_twice_reverse(105) == False"
    },
    {
      "rank": 59,
      "score": 8.0,
      "candidate": "def reverse(n):\n    r = 0\n    while n > 0:\n        r = r * 10 + (n % 10)\n        n = int(n / 10)\n    return r\n\n\ndef isDoubleBase(n):\n    return n + 1 == 2 * reverse(n)\n\n\ndef main():\n    n = int(input(\"Enter a number: \"))\n    if isDoubleBase(n):\n        print(n, \"is one less than twice its reverse\")\n    else:\n        print(n, \"is not one less than twice its reverse\")\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 60,
      "score": 8.0,
      "candidate": "def check_palindrome(num):\n    if num < 0:\n        return False\n    num_str = str(num)\n    num_str_rev = num_str[::-1]\n    num_rev = int(num_str_rev)\n    return num_rev + 1 == 2 * num"
    },
    {
      "rank": 61,
      "score": 8.0,
      "candidate": "def check_num(num):\n    rev = int(str(num)[::-1])\n    if num+1 == 2*rev:\n        return True\n    else:\n        return False\n\nprint(check_num(12))\nprint(check_num(11))\nprint(check_num(22))\nprint(check_num(32))\nprint(check_num(100))\nprint(check_num(101))\nprint(check_num(202))"
    },
    {
      "rank": 62,
      "score": 8.0,
      "candidate": "def check_palindrome(num):\n    num_string = str(num)\n    num_list = [num_string[i] for i in range(len(num_string))]\n    num_string_reverse = \"\".join(num_list[::-1])\n    return num + 1 == 2 * int(num_string_reverse)\n\n\nnum = int(input(\"Enter number: \"))\nprint(check_palindrome(num))"
    },
    {
      "rank": 63,
      "score": 8.0,
      "candidate": "def is_palindrome(num):\n    num = str(num)\n    return num == num[::-1]\n\ndef double_palindrome(num):\n    num = str(num)\n    return is_palindrome(num) and is_palindrome(num[::-1])\n\nprint(double_palindrome(121))"
    },
    {
      "rank": 64,
      "score": 8.0,
      "candidate": "def is_palindrome(num):\n    return str(num) == str(num)[::-1]\n\n\ndef is_one_less_than_twice(num):\n    return num + 1 == 2 * int(str(num)[::-1])\n\n\ndef is_one_less_than_twice_alt(num):\n    return num + 1 == 2 * int(str(num)[::-1])\n\n\ndef main():\n    num = int(input(\"Enter a number: \"))\n    if is_one_less_than_twice(num):\n        print(num, \"is one less than twice its reverse\")\n    else:\n        print(num, \"is not one less than twice its reverse\")\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 65,
      "score": 8.0,
      "candidate": "def is_palindrome(number):\n    return number == int(str(number)[::-1])\n\n\ndef is_one_away(number):\n    return is_palindrome(number) or is_palindrome(number - 1)\n\n\ndef is_one_away_optimized(number):\n    rev = int(str(number)[::-1])\n    return number + 1 == rev or number == rev\n\n\nprint(is_one_away(123))\nprint(is_one_away(1234))\nprint(is_one_away(12345))\nprint(is_one_away(123456))\nprint(is_one_away(1234567))\nprint(is_one_away(12345678))\n\nprint(is_one_away_optimized(123))\nprint(is_one_away_optimized(1234))\nprint(is_one_away_optimized(12345))\nprint(is_one_away_optimized(123456))\nprint(is_one_away_optimized(1234567))\nprint(is_one_away_optimized(12345678))"
    },
    {
      "rank": 66,
      "score": 8.0,
      "candidate": "def check_palindrome(number):\n    number = str(number)\n    return number == number[::-1]\n\n\ndef check_one_less(number):\n    number = str(number)\n    return number == number[:-1] + str(int(number[-1]) + 1)\n\n\ndef is_palindrome_one_less_twice(number):\n    if check_one_less(number) and check_palindrome(number):\n        return True\n    return False\n\n\nprint(is_palindrome_one_less_twice(1221))\nprint(is_palindrome_one_less_twice(121))\nprint(is_palindrome_one_less_twice(123))"
    },
    {
      "rank": 67,
      "score": 8.0,
      "candidate": "def check_palindrome(num):\n    rev = 0\n    temp = num\n    while num > 0:\n        rev = rev * 10 + num % 10\n        num = int(num/10)\n    return rev == temp-2\n\n\ndef main():\n    num = int(input(\"Enter a number: \"))\n    if check_palindrome(num):\n        print(\"Given number is one less than twice its reverse\")\n    else:\n        print(\"Given number is not one less than twice its reverse\")\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 68,
      "score": 8.0,
      "candidate": "def is_palindrome(num):\n    rev = 0\n    while num > 0:\n        rem = num % 10\n        rev = rev * 10 + rem\n        num = num // 10\n    return rev\n\n\ndef check_palindrome(num):\n    rev = is_palindrome(num)\n    if rev == num - 2:\n        return True\n    else:\n        return False\n\n\ndef main():\n    num = int(input(\"Enter a number: \"))\n    if check_palindrome(num):\n        print(\"Yes, it is one less than twice its reverse\")\n    else:\n        print(\"No, it is not one less than twice its reverse\")\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 69,
      "score": 8.0,
      "candidate": "def check_reverse(num):\n    num = str(num)\n    if num == num[::-1][1:]:\n        return True\n    return False\n\n\nprint(check_reverse(221))\nprint(check_reverse(123))\nprint(check_reverse(900))\nprint(check_reverse(1221))"
    },
    {
      "rank": 70,
      "score": 8.0,
      "candidate": "def check_if_palindrome_is_one_less_than_twice(num):\n    \"\"\"\n    Check if a given number is one less than twice its reverse.\n    \"\"\"\n    # reverse the number\n    reverse = int(str(num)[::-1])\n    return num + 1 == reverse * 2\n\n\ndef main():\n    \"\"\"\n    Call check_if_palindrome_is_one_less_than_twice\n    \"\"\"\n    print(\"Is 321 one less than twice its reverse?\")\n    print(check_if_palindrome_is_one_less_than_twice(321))\n\n    print(\"Is 432 one less than twice its reverse?\")\n    print(check_if_palindrome_is_one_less_than_twice(432))\n\n    print(\"Is 55 one less than twice its reverse?\")\n    print(check_if_palindrome_is_one_less_than_twice(55))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 71,
      "score": 8.0,
      "candidate": "def isDoublePalindrome(num):\n    n = num\n    rev = 0\n    while n > 0:\n        rev = rev * 10 + n % 10\n        n = int(n/10)\n    return rev == num * 2 - 1\n\ndef main():\n    num = int(input(\"Enter a number: \"))\n    result = isDoublePalindrome(num)\n    if result:\n        print(f\"{num} is a double palindrome\")\n    else:\n        print(f\"{num} is not a double palindrome\")\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 72,
      "score": 8.0,
      "candidate": "def is_reverse_double(num):\n    if num == int(str(num)[::-1]) * 2 - 1:\n        return True\n    return False\n\n\ndef main():\n    val = int(input(\"Enter a number: \"))\n    print(\"Given number is one less than twice its reverse:\", is_reverse_double(val))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 73,
      "score": 8.0,
      "candidate": "def one_less_than_twice_reverse(number):\n    number = str(number)\n    reverse = number[::-1]\n    reverse = int(reverse)\n    if reverse == 2 * number - 1:\n        return True\n    else:\n        return False\n\n\nprint(one_less_than_twice_reverse(12))\nprint(one_less_than_twice_reverse(11))\nprint(one_less_than_twice_reverse(121))"
    },
    {
      "rank": 74,
      "score": 8.0,
      "candidate": "def check_number(num):\n    # get the number of digits in the number\n    num_digits = len(str(num))\n    # reverse the number\n    rev_num = int(str(num)[::-1])\n    # check if the reverse is one less than twice the number\n    if rev_num == (2 * num) - 1:\n        print(\"The number is a palindrome\")\n    else:\n        print(\"The number is not a palindrome\")\n\n\ncheck_number(121)\ncheck_number(123)"
    },
    {
      "rank": 75,
      "score": 8.0,
      "candidate": "def is_palindrome(num):\n    rev = 0\n    while num > 0:\n        rev = rev * 10 + num % 10\n        num = num // 10\n    return rev\n\n\ndef check_palindrome(num):\n    if is_palindrome(num) - num == 1:\n        return True\n    else:\n        return False\n\n\ndef main():\n    num = int(input(\"Enter a number: \"))\n    if check_palindrome(num):\n        print(num, \"is a special number\")\n    else:\n        print(num, \"is not a special number\")\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 76,
      "score": 8.0,
      "candidate": "def is_palindrome(num: int) -> bool:\n    return num == int(str(num)[::-1])\n\n\ndef is_twice_palindrome(num: int) -> bool:\n    return is_palindrome(num) and is_palindrome(num // 2)\n\n\ndef main():\n    num = int(input(\"Enter a number: \"))\n    if is_twice_palindrome(num):\n        print(\"The number is a palindrome.\")\n    else:\n        print(\"The number is not a palindrome.\")\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 77,
      "score": 8.0,
      "candidate": "def is_palindrome(num):\n    return str(num) == str(num)[::-1]\n\n\ndef is_one_away(num):\n    if len(str(num)) != len(str(num)[::-1]):\n        return False\n\n    return is_palindrome(num + 1) or is_palindrome(num - 1)\n\n\nprint(is_one_away(2345))"
    },
    {
      "rank": 78,
      "score": 8.0,
      "candidate": "def is_palindrome(num):\n    reverse = 0\n    while num > 0:\n        reverse = reverse * 10 + num % 10\n        num = num // 10\n\n    return reverse == num\n\ndef one_less_than_twice(num):\n    return num + 1 == 2 * num and is_palindrome(num)\n\nprint(one_less_than_twice(121))\nprint(one_less_than_twice(1452))\nprint(one_less_than_twice(677))\nprint(one_less_than_twice(767))\nprint(one_less_than_twice(776))"
    },
    {
      "rank": 79,
      "score": 8.0,
      "candidate": "def is_palindrome(n):\n    return n == int(str(n)[::-1])\n\n\ndef is_one_away(n):\n    n = str(n)\n    if len(n) == 1:\n        return True\n\n    if len(n) == 2:\n        if n[0] != n[1]:\n            return True\n        else:\n            return False\n\n    if n[0] != n[-1]:\n        return True\n\n    return is_palindrome(int(n[1:-1]))\n\n\nprint(is_one_away(321))\nprint(is_one_away(322))\nprint(is_one_away(22))"
    },
    {
      "rank": 80,
      "score": 8.0,
      "candidate": "def is_palindrome(string):\n    rev_string = string[::-1]\n    if string == rev_string:\n        return True\n    else:\n        return False\n\n\ndef one_away(s1, s2):\n    if len(s1) == len(s2):\n        return is_palindrome(s1 + s2)\n    elif len(s1) + 1 == len(s2):\n        return is_palindrome(s2 + s1)\n    elif len(s2) + 1 == len(s1):\n        return is_palindrome(s1 + s2)\n    else:\n        return False\n\n\nprint(one_away(\"ab\", \"ba\"))\nprint(one_away(\"ab\", \"abc\"))\nprint(one_away(\"ab\", \"abcd\"))\nprint(one_away(\"abcd\", \"abc\"))"
    },
    {
      "rank": 81,
      "score": 8.0,
      "candidate": "def check_palindrome(num):\n    num = str(num)\n    if num == num[::-1]:\n        return True\n    else:\n        return False\n\ndef check_one_less_than_twice_reverse(num):\n    num = int(num)\n    num_reverse = int(str(num)[::-1])\n    if num + 1 == 2 * num_reverse:\n        return True\n    else:\n        return False\n\ndef main():\n    num = input(\"Enter a number: \")\n    if check_palindrome(num) and check_one_less_than_twice_reverse(num):\n        print(\"The number {} is a lucky number\".format(num))\n    else:\n        print(\"The number {} is not a lucky number\".format(num))\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 82,
      "score": 8.0,
      "candidate": "def check_num(num):\n    num_rev = int(str(num)[::-1])\n    return num - 1 == 2 * num_rev\n\nprint(check_num(12))\nprint(check_num(11))\nprint(check_num(111))\nprint(check_num(1111))"
    },
    {
      "rank": 83,
      "score": 7.0,
      "candidate": "def isOneLessThanTwiceReverse(num):\n    reverse = 0\n    while num > 0:\n        reverse = reverse * 10 + num % 10\n        num = num // 10\n    return num + 1 == reverse * 2\n\nprint(isOneLessThaneTwiceReverse(12))\nprint(isOneLessThaneTwiceReverse(81))\nprint(isOneLessThaneTwiceReverse(102))"
    },
    {
      "rank": 84,
      "score": 1.0,
      "candidate": "def is_one_less_than_twice_reverse(num):\n    \"\"\"\n    >>> is_one_less_than_twice_reverse(12)\n    True\n    >>> is_one_less_than_twice_reverse(102)\n    True\n    >>> is_one_less_than_twice_reverse(1002)\n    False\n    \"\"\"\n    return num == int(str(num)[::-1]) * 2 - 1\n\n\ndef is_one_less_than_twice_reverse_v2(num):\n    \"\"\"\n    >>> is_one_less_than_twice_reverse_v2(12)\n    True\n    >>> is_one_less_than_twice_reverse_v2(102)\n    True\n    >>> is_one_less_than_twice_reverse_v2(1002)\n    False\n    \"\"\"\n    reverse = 0\n    while num > 0:\n        reverse = reverse * 10 + num % 10\n        num //= 10\n    return num == reverse * 2 - 1\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 85,
      "score": 1.0,
      "candidate": "def is_one_away(number):\n    if number == \"\":\n        return True\n    if len(number) == 0:\n        return True\n    if len(number) == 1:\n        return True\n    if len(number) == 2:\n        if int(number[0]) != int(number[1]):\n            return False\n        if abs(int(number[0]) - int(number[1])) == 1:\n            return True\n        return False\n    if int(number[0]) != int(number[-1]):\n        return False\n    if abs(int(number[0]) - int(number[-1])) == 1:\n        return is_one_away(number[1:-1])\n    return False\n\n\nprint(is_one_away(\"122\"))\nprint(is_one_away(\"123\"))\nprint(is_one_away(\"124\"))\nprint(is_one_away(\"12\"))\nprint(is_one_away(\"11\"))\nprint(is_one_away(\"1\"))\nprint(is_one_away(\"\"))\nprint(is_one_away(\"11111\"))"
    },
    {
      "rank": 86,
      "score": 1.0,
      "candidate": "def check_if_palindrome(num):\n    rev = int(str(num)[::-1])\n    if num == rev - 1:\n        return True\n    return False\n\n\ndef check_if_palindrome_reverse(num):\n    rev = 0\n    while num > 0:\n        rev = rev * 10 + num % 10\n        num //= 10\n    return rev\n\n\ndef check_if_palindrome_reverse2(num):\n    rev = 0\n    while num > 0:\n        rev = rev * 10 + num % 10\n        num //= 10\n    return rev\n\n\ndef check_if_palindrome_reverse3(num):\n    rev = 0\n    while num > 0:\n        rev = rev * 10 + num % 10\n        num //= 10\n    return rev\n\n\ndef check_if_palindrome_reverse4(num):\n    rev = 0\n    while num > 0:\n        rev = rev * 10 + num % 10\n        num //= 10\n    return rev\n\n\ndef check_if_palindrome_reverse5(num):\n    rev = 0\n    while num > 0:\n        rev = rev * 10 + num % 10\n        num //= 10\n    return rev\n\n\ndef check_if_palindrome_reverse6(num):\n    rev = 0\n    while num > 0:\n        rev = rev * 10 + num % 10\n        num //= 10\n    return rev\n\n\ndef check_if_palindrome_reverse7(num):\n    rev = 0\n    while num > 0:\n        rev = rev * 10 + num % 10\n        num //= 10\n    return rev\n\n\ndef check_if_palindrome_reverse8(num):\n    rev = 0\n    while num > 0:\n        rev = rev * 10 + num % 10\n        num //= 10\n    return rev\n\n\ndef"
    },
    {
      "rank": 87,
      "score": 1.0,
      "candidate": "def check_if_palindrome(num: int) -> bool:\n    \"\"\"\n    >>> check_if_palindrome(1221)\n    True\n    >>> check_if_palindrome(1234)\n    False\n    >>> check_if_palindrome(121)\n    True\n    \"\"\"\n    # your code goes here\n    str_num = str(num)\n    reverse = str_num[::-1]\n    return num - 1 == int(reverse + reverse[0])\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 88,
      "score": 1.0,
      "candidate": "def is_palindrome(num):\n    return num == int(str(num)[::-1])\n\n\ndef is_one_less_than_twice(num):\n    num_reverse = int(str(num)[::-1])\n    return num + 1 == 2 * num_reverse\n\n\ndef one_less_than_twice(num):\n    if is_palindrome(num) and is_one_less_than_twice(num):\n        return True\n    return False\n\n\nprint(one_less_than_twice(121))\nprint(one_less_than_twice(122))\nprint(one_less_than_twice(123))"
    },
    {
      "rank": 89,
      "score": 1.0,
      "candidate": "def one_less_than_twice_reverse(number):\n    return number == int(str(number)[::-1]) * 2 - 1\n\n\ndef test_one_less_than_twice_reverse():\n    assert one_less_than_twice_reverse(12)\n    assert one_less_than_twice_reverse(35)\n    assert one_less_than_twice_reverse(40)\n    assert not one_less_than_twice_reverse(33)\n    assert not one_less_than_twice_reverse(44)"
    },
    {
      "rank": 90,
      "score": 1.0,
      "candidate": "def is_double_palindrome(num: int) -> bool:\n    \"\"\"\n    >>> is_double_palindrome(121)\n    True\n    >>> is_double_palindrome(123)\n    False\n    >>> is_double_palindrome(122)\n    False\n    >>> is_double_palindrome(1234)\n    False\n    \"\"\"\n    num_str = str(num)\n    rev_num = int(num_str[::-1])\n    return num * 2 == rev_num + num\n\n\ndef is_double_palindrome_with_aux(num: int) -> bool:\n    \"\"\"\n    >>> is_double_palindrome_with_aux(121)\n    True\n    >>> is_double_palindrome_with_aux(123)\n    False\n    >>> is_double_palindrome_with_aux(122)\n    False\n    >>> is_double_palindrome_with_aux(1234)\n    False\n    \"\"\"\n    num_str = str(num)\n    rev_num = \"\"\n\n    for char in num_str[::-1]:\n        rev_num += char\n\n    return num * 2 == int(rev_num) + num\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 91,
      "score": 1.0,
      "candidate": "def is_palindrome(number):\n    return number == int(str(number)[::-1])\n\n\ndef less_than_twice(number):\n    return number < 2 * int(str(number)[::-1])\n\n\ndef check_number(number):\n    return is_palindrome(number) and less_than_twice(number)\n\n\nprint(check_number(1234554321))"
    },
    {
      "rank": 92,
      "score": 1.0,
      "candidate": "def check_one_less_than_twice_reverse(number: int) -> bool:\n    \"\"\"\n    >>> check_one_less_than_twice_reverse(12)\n    True\n    >>> check_one_less_than_twice_reverse(102)\n    True\n    >>> check_one_less_than_twice_reverse(11)\n    False\n    >>> check_one_less_than_twice_reverse(111)\n    False\n    \"\"\"\n    number = str(number)\n    if number == str(int(number[::-1]) * 2 - 1):\n        return True\n    return False\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 93,
      "score": 1.0,
      "candidate": "def is_reverse_pair(num):\n    \"\"\"\n    >>> is_reverse_pair(99)\n    True\n    >>> is_reverse_pair(11)\n    False\n    >>> is_reverse_pair(121)\n    True\n    >>> is_reverse_pair(123)\n    False\n    >>> is_reverse_pair(123000)\n    False\n    \"\"\"\n    num_reverse = int(str(num)[::-1])\n    return num + 1 == num_reverse * 2\n\n\ndef is_reverse_pair_alt(num):\n    \"\"\"\n    >>> is_reverse_pair_alt(99)\n    True\n    >>> is_reverse_pair_alt(11)\n    False\n    >>> is_reverse_pair_alt(121)\n    True\n    >>> is_reverse_pair_alt(123)\n    False\n    >>> is_reverse_pair_alt(123000)\n    False\n    \"\"\"\n    num_str = str(num)\n    num_reverse_str = num_str[::-1]\n    num_reverse = int(num_reverse_str)\n    return num + 1 == num_reverse * 2\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 94,
      "score": 1.0,
      "candidate": "def is_palindrome(num: int) -> bool:\n    \"\"\"\n    >>> is_palindrome(121)\n    True\n    >>> is_palindrome(123)\n    False\n    >>> is_palindrome(55555)\n    False\n    \"\"\"\n    reverse = 0\n    while num > reverse:\n        reverse = reverse * 10 + num % 10\n        num //= 10\n    return num == reverse or num == reverse // 10\n\n\ndef is_one_away(num: int) -> bool:\n    \"\"\"\n    >>> is_one_away(123)\n    True\n    >>> is_one_away(1234)\n    False\n    \"\"\"\n    reverse = 0\n    while num > reverse:\n        reverse = reverse * 10 + num % 10\n        num //= 10\n    return num == reverse or num == reverse // 10\n\n\ndef is_one_away_v2(num: int) -> bool:\n    \"\"\"\n    >>> is_one_away_v2(123)\n    True\n    >>> is_one_away_v2(1234)\n    False\n    \"\"\"\n    if num < 0:\n        num = -num\n    return num < 10 or is_one_away(num // 10 + num % 10)\n\n\ndef is_one_away_v3(num: int) -> bool:\n    \"\"\"\n    >>> is_one_away_v3(123)\n    True\n    >>> is_one_away_v3(1234)\n    False\n    \"\"\"\n    return num < 10 or is_one_away(num // 10 + num % 10)\n\n\ndef is_one_away_v4(num: int) -> bool:\n    \"\"\"\n    >>> is_one_away_v4(123)\n    True\n    >>> is_one_away_v4(1234)\n    False\n    \"\"\"\n    return num < 10 or is_one_away(num // 10 +"
    },
    {
      "rank": 95,
      "score": 1.0,
      "candidate": "def is_palindrome(n):\n    return n == int(str(n)[::-1])\n\n\ndef one_less_than_twice(n):\n    return n + 1 == 2 * int(str(n)[::-1])\n\n\ndef check_palindrome(n):\n    return is_palindrome(n) and one_less_than_twice(n)\n\n\ndef main():\n    print(check_palindrome(121))  # True\n    print(check_palindrome(11))  # False\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 96,
      "score": 1.0,
      "candidate": "def is_palindrome(number: int) -> bool:\n    \"\"\"\n    >>> is_palindrome(121)\n    True\n    >>> is_palindrome(123)\n    False\n    \"\"\"\n    reverse = 0\n    number = str(number)\n    length = len(number)\n    for i in range(length):\n        reverse = reverse * 10 + int(number[i])\n    return number == str(reverse + 1)\n\n\ndef is_palindrome_reverse(number: int) -> bool:\n    \"\"\"\n    >>> is_palindrome_reverse(121)\n    True\n    >>> is_palindrome_reverse(123)\n    False\n    \"\"\"\n    reverse = 0\n    number = str(number)\n    length = len(number)\n    for i in range(length - 1, -1, -1):\n        reverse = reverse * 10 + int(number[i])\n    return number == str(reverse + 1)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 97,
      "score": 1.0,
      "candidate": "def check_palindrome(num):\n    rev = 0\n    while num > 0:\n        rev = rev * 10 + (num % 10)\n        num = num // 10\n    return rev == num\n\n\ndef is_reverse_double(num):\n    rev = 0\n    while num > 0:\n        rev = rev * 10 + (num % 10)\n        num = num // 10\n    return rev == 2 * num\n\n\ndef palindrome_double(num):\n    rev = 0\n    while num > 0:\n        rev = rev * 10 + (num % 10)\n        num = num // 10\n    return rev\n\n\ndef check_palindrome_double(num):\n    return palindrome_double(num) == 2 * num\n\n\ndef check_palindrome_double_2(num):\n    return num == int(str(num)[::-1]) * 2\n\n\ndef check_palindrome_double_3(num):\n    rev = 0\n    while num > 0:\n        rev = rev * 10 + (num % 10)\n        num = num // 10\n    return rev == num * 2\n\n\ndef check_palindrome_double_4(num):\n    rev = 0\n    while num > 0:\n        rev = rev * 10 + (num % 10)\n        num = num // 10\n    return rev == int(str(num)[::-1])\n\n\ndef check_palindrome_double_5(num):\n    rev = 0\n    while num > 0:\n        rev = rev * 10 + (num % 10)\n        num = num // 10\n    return rev == int(str(num)[::-1]) * 2\n\n\ndef check_palindrome_double_6(num):\n    rev = 0\n    while num > 0:\n        rev = rev * 10 + (num % 10)\n        num = num // 10\n    return rev == num * 2"
    },
    {
      "rank": 98,
      "score": 1.0,
      "candidate": "def is_palindrome(n):\n    return str(n) == str(n)[::-1]\n\n\ndef is_one_away(n):\n    return is_palindrome(n) or (is_palindrome(n // 10) and n % 10 == 0)\n\n\ndef check_one_away(n):\n    if is_one_away(n):\n        print(\"Yes\")\n    else:\n        print(\"No\")\n\n\ncheck_one_away(12)"
    },
    {
      "rank": 99,
      "score": 1.0,
      "candidate": "def one_less_than_twice_reverse(num):\n    return num - 1 == 2 * int(str(num)[::-1])\n\n\"\"\"\nWrite a python program to find the number of digits in a given number.\n\"\"\"\ndef num_digits(num):\n    return len(str(num))\n\n\"\"\"\nWrite a python program to find the largest number of a given list.\n\"\"\"\ndef largest_num(num):\n    return max(num)\n\n\"\"\"\nWrite a python function to find the largest palindrome made from the product of two 3-digit numbers.\n\"\"\"\ndef largest_palindrome(num):\n    for i in range(999, 99, -1):\n        for j in range(999, 99, -1):\n            if i * j <= num:\n                break\n            if str(i * j) == str(i * j)[::-1]:\n                return i * j\n\n\"\"\"\nWrite a python program to find the sum of the odd numbers within a given array of numbers.\n\"\"\"\ndef sum_of_odd_nums(num):\n    return sum([num for num in num if num % 2 != 0])\n\n\"\"\"\nWrite a python function to find the number of elements within a list that are equal to their index.\n\"\"\"\ndef count_equal_index(num):\n    return num.count(num.index(num[num.index(num)]))\n\n\"\"\"\nWrite a python function to find the number of prime numbers that exist between 1 and a given number.\n\"\"\"\ndef count_prime_nums(num):\n    count = 0\n    for i in range(2, num + 1):\n        for j in range(2, i):\n            if i % j == 0:\n                break\n        else:\n            count += 1\n    return count\n\n\"\"\"\nWrite a python function to find the number of substrings of a given string that only contain 'a' and 'b'\n\"\"\"\ndef count_substrings(num):\n    count = 0\n    for i in range(len(num)):\n        for j in range(len(num"
    },
    {
      "rank": 100,
      "score": 1.0,
      "candidate": "def one_less_than_twice_reverse(num: int) -> bool:\n    \"\"\"\n    >>> one_less_than_twice_reverse(121)\n    True\n    >>> one_less_than_twice_reverse(123)\n    False\n    \"\"\"\n    reverse = 0\n    while num > 0:\n        reverse = reverse * 10 + num % 10\n        num //= 10\n    return num + 1 == reverse * 2\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    }
  ]
}