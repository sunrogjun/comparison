{
  "timestamp": "2025-09-15T01:58:05.356242",
  "method": "improved_llm_judge",
  "judge_model": "codellama/CodeLlama-7b-Python-hf",
  "target_model": "codellama-7b",
  "dataset": "mbpp",
  "problem_number": 483,
  "total_candidates": 100,
  "results": [
    {
      "rank": 1,
      "score": 10.0,
      "candidate": "from typing import List\n\n\ndef binary_to_integer(binary_tuple: List[int]) -> int:\n    \"\"\"\n    :param binary_tuple: List[int]\n    :return: int\n    >>> binary_to_integer([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1"
    },
    {
      "rank": 2,
      "score": 10.0,
      "candidate": "from typing import Tuple\n\n\ndef binary_to_int(binary: Tuple[int, ...]) -> int:\n    \"\"\"Convert binary tuple to integer.\n\n    Args:\n        binary (Tuple[int, ...]): binary tuple.\n\n    Examples:\n        >>> assert binary_to_int((1, 0, 1)) == 5\n    \"\"\"\n    return sum(\n        number * 2 ** idx\n        for idx, number in enumerate(reversed(binary))\n    )\n\n\ndef main():\n    \"\"\"Main function for this script.\"\"\"\n    binary_tuple = (1, 0, 1)\n    print(binary_to_int(binary_tuple))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 3,
      "score": 10.0,
      "candidate": "def convert_binary_to_int(binary_tuple):\n    result = 0\n\n    for i in range(len(binary_tuple)):\n        result = result + binary_tuple[i] * 2**i\n\n    return result\n\n\ndef main():\n    binary_tuple = (1, 0, 0, 1)\n    result = convert_binary_to_int(binary_tuple)\n    print(result)\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 4,
      "score": 10.0,
      "candidate": "def binary_tuple_to_int(bin_tuple: tuple) -> int:\n    \"\"\"\n    :param bin_tuple: tuple of binary numbers\n    :return: int\n    >>> binary_tuple_to_int((1, 0, 1))\n    5\n    >>> binary_tuple_to_int((1, 0, 0, 1))\n    9\n    >>> binary_tuple_to_int((1, 0, 1, 0, 1))\n    13\n    >>> binary_tuple_to_int((1, 1, 1, 1, 1))\n    31\n    >>> binary_tuple_to_int((1, 0, 1, 1))\n    11\n    >>> binary_tuple_to_int((1, 1, 1, 0))\n    12\n    >>> binary_tuple_to_int((0, 0, 0, 0))\n    0\n    >>> binary_tuple_to_int((0, 1, 1, 1))\n    15\n    \"\"\"\n    return int(\"\".join(map(str, bin_tuple)), 2)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 5,
      "score": 10.0,
      "candidate": "from functools import reduce\nfrom typing import Tuple\n\n\ndef binary_tuple_to_int(binary_tuple: Tuple[int, ...]) -> int:\n    \"\"\"Convert binary tuple to integer.\n\n    Args:\n        binary_tuple (Tuple[int, ...]): tuple of binary digits\n\n    Examples:\n        >>> binary_tuple_to_int((1, 1, 1, 1))\n        15\n        >>> binary_tuple_to_int((0, 0, 1))\n        4\n    \"\"\"\n    return reduce(\n        lambda carry, digit: carry * 2 + digit,\n        binary_tuple,\n        0,\n    )\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 6,
      "score": 10.0,
      "candidate": "def binary_to_int(binary_tuple):\n    \"\"\"\n    :param binary_tuple: binary tuple\n    :return: integer\n\n    >>> binary_to_int((0,0,0,1))\n    1\n    >>> binary_to_int((1,0,0,0))\n    8\n    >>> binary_to_int((0,1,1,0))\n    6\n    >>> binary_to_int((1,1,1,1))\n    15\n    \"\"\"\n    integer = 0\n    for i in range(len(binary_tuple)):\n        integer += binary_tuple[i] * (2 ** (len(binary_tuple) - i - 1))\n    return integer\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 7,
      "score": 10.0,
      "candidate": "def binary_to_integer(binary_tuple):\n    integer = 0\n    for i, bit in enumerate(reversed(binary_tuple)):\n        integer += bit * (2 ** i)\n    return integer\n\n\ndef test_binary_to_integer():\n    \"\"\"\n    >>> test_binary_to_integer()\n    \"\"\"\n    assert binary_to_integer((1, 0, 0, 1, 1, 0, 0, 1)) == 101\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 8,
      "score": 10.0,
      "candidate": "from typing import List\n\n\ndef tuple_to_integer(tuples: List[int]) -> int:\n    \"\"\"\n    :param tuples: list of binary tuples\n    :return: integer\n    >>> tuple_to_integer([0, 0, 1, 1])\n    10\n    >>> tuple_to_integer([1, 0, 0, 1])\n    9\n    >>> tuple_to_integer([1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1])\n    4095\n    \"\"\"\n    return int(\"\".join(str(i) for i in tuples), 2)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 9,
      "score": 10.0,
      "candidate": "def binary_tuple_to_int(binary_tuple):\n    return int(''.join(map(str, binary_tuple)), 2)\n\n\nprint(binary_tuple_to_int((0, 1, 1, 1, 0, 1, 0, 1)))"
    },
    {
      "rank": 10,
      "score": 10.0,
      "candidate": "def binary_to_int(binary: tuple[int, ...]) -> int:\n    \"\"\"Convert binary tuple to integer.\n\n    Args:\n        binary (tuple[int, ...]): Binary tuple.\n\n    Examples:\n        >>> binary_to_int((0, 1, 1, 0, 1, 0, 1, 1))\n        131\n        >>> binary_to_int((1, 1, 1, 1, 1, 1, 1, 1))\n        255\n\n    Returns:\n        int: Integer representation of binary tuple.\n    \"\"\"\n    return sum(val * (2 ** idx) for idx, val in enumerate(reversed(binary)))\n\n\ndef main():\n    \"\"\"Print binary_to_int.\"\"\"\n    print(binary_to_int((0, 1, 1, 0, 1, 0, 1, 1)))\n    print(binary_to_int((1, 1, 1, 1, 1, 1, 1, 1)))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 11,
      "score": 10.0,
      "candidate": "def binary_to_decimal(binary_tuple: tuple) -> int:\n    \"\"\"\n    >>> binary_to_decimal((0, 1, 1, 1, 0))\n    22\n    >>> binary_to_decimal((0, 0, 1, 1, 1, 1, 1, 1))\n    135\n    \"\"\"\n    decimal = 0\n    for i, bit in enumerate(binary_tuple):\n        decimal += 2 ** i * bit\n    return decimal\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 12,
      "score": 10.0,
      "candidate": "from typing import Tuple\n\n\ndef binary_tuple_to_int(binary_tuple: Tuple[int, ...]) -> int:\n    \"\"\"Converts a given binary tuple to an integer.\n\n    Args:\n        binary_tuple (Tuple[int, ...]): a tuple of binary digits\n\n    Examples:\n        >>> assert binary_tuple_to_int((1, 0, 0, 1)) == 11\n    \"\"\"\n    return int(\"\".join(map(str, binary_tuple)), 2)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 13,
      "score": 9.054655470211907,
      "candidate": "# O(n) time | O(n) space\ndef binaryTupleToNumber(binaryTuple):\n    return int(\"\".join(map(str, binaryTuple)), 2)"
    },
    {
      "rank": 14,
      "score": 9.038426088443575,
      "candidate": "from collections import deque\nfrom typing import Tuple\n\n\ndef convert_to_int(tup: Tuple[int, ...]) -> int:\n    \"\"\"Convert tuple of binary digits to integer.\n\n    Args:\n        tup (Tuple[int, ...]): tuple of binary digits\n\n    Returns:\n        int: integer\n    \"\"\"\n    queue = deque(tup)\n    integer = 0\n\n    for _ in range(len(tup)):\n        integer = integer << 1\n        integer += queue.popleft()\n\n    return integer\n\n\nif __name__ == \"__main__\":\n    assert convert_to_int((1, 0, 1, 0, 1, 1)) == 31"
    },
    {
      "rank": 15,
      "score": 9.020823121893637,
      "candidate": "def binary_tuple_to_int(binary_tuple):\n    \"\"\"Convert the given binary tuple to integer.\"\"\"\n    return sum(val * (2 ** idx) for idx, val in enumerate(binary_tuple[::-1]))"
    },
    {
      "rank": 16,
      "score": 8.824907044022165,
      "candidate": "from typing import Tuple\n\n\ndef binary_to_integer(bin_tuple: Tuple[int]) -> int:\n    \"\"\"Convert binary tuple to integer.\n\n    Args:\n        bin_tuple (Tuple[int]): binary tuple\n\n    Returns:\n        int: integer\n    \"\"\"\n    return int(\"\".join(map(str, bin_tuple)), 2)\n\n\nif __name__ == \"__main__\":\n    print(binary_to_integer((0, 1, 0, 1, 1, 0, 1, 1)))"
    },
    {
      "rank": 17,
      "score": 8.807643690899763,
      "candidate": "def binary_to_integer(t):\n    \"\"\"\n    :param t: binary tuple\n    :return: integer\n    >>> binary_to_integer((1, 0, 0, 1))\n    5\n    >>> binary_to_integer((1, 1, 1, 1))\n    15\n    \"\"\"\n    return int(''.join([str(i) for i in t]), 2)\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 18,
      "score": 8.732446410642655,
      "candidate": "from functools import reduce\n\n\n# Time complexity: O(n)\n# Space complexity: O(1)\ndef binary_tuple_to_integer(binary_tuple):\n    return reduce(lambda x, y: x * 2 + y, binary_tuple)\n\n\nprint(binary_tuple_to_integer((1, 0, 0, 1)))"
    },
    {
      "rank": 19,
      "score": 8.656042861442971,
      "candidate": "def binary_tuple_to_int(tuple):\n    # First, let's validate the tuple\n    for val in tuple:\n        if not (val == 1 or val == 0):\n            raise ValueError(\"Only binary values are allowed\")\n\n    # We can convert it to a string and then use int()\n    return int(\"\".join([str(i) for i in tuple]))\n\n\nif __name__ == '__main__':\n    print(binary_tuple_to_int((1, 0, 1, 0, 0)))"
    },
    {
      "rank": 20,
      "score": 8.638162964118825,
      "candidate": "from functools import reduce\n\n\n# O(n) time | O(n) space - where n is the length of the binary tuple\ndef binaryTupleToNumber(binaryTuple):\n    return reduce(lambda result, num: result * 2 + num, binaryTuple)"
    },
    {
      "rank": 21,
      "score": 8.585482494213021,
      "candidate": "from typing import List\n\n\ndef binary_tuple_to_integer(binary_tuple: List[int]) -> int:\n    \"\"\"\n    :param binary_tuple: list of binary numbers\n    :return: integer representation of binary tuple\n    >>> binary_tuple_to_integer([1, 0, 1, 0, 1])\n    10\n    >>> binary_tuple_to_integer([1, 1, 1, 1, 1])\n    31\n    >>> binary_tuple_to_integer([0, 0, 0, 0, 0])\n    0\n    >>> binary_tuple_to_integer([1, 1, 1, 1, 0])\n    30\n    >>> binary_tuple_to_integer([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1"
    },
    {
      "rank": 22,
      "score": 8.578455577376145,
      "candidate": "def binary_tuple_to_integer(b):\n    integer = 0\n    for i in range(len(b)):\n        integer += b[i] * 2 ** i\n    return integer\n\n\ndef main():\n    print(binary_tuple_to_integer((1, 1, 1, 1)))\n    print(binary_tuple_to_integer((1, 1, 1, 0)))\n    print(binary_tuple_to_integer((1, 1, 0, 1)))\n    print(binary_tuple_to_integer((1, 0, 1, 1)))\n    print(binary_tuple_to_integer((0, 1, 1, 1)))\n    print(binary_tuple_to_integer((0, 0, 0, 0)))\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 23,
      "score": 8.572657377211721,
      "candidate": "from typing import List\n\n\ndef binary_to_int(binary: List[int]) -> int:\n    \"\"\"Binary to int.\n\n    :param binary: binary number\n    :return: integer\n    \"\"\"\n    return int(\"\".join(str(digit) for digit in binary), 2)\n\n\nif __name__ == \"__main__\":\n    print(binary_to_int([1, 1, 0, 1]))"
    },
    {
      "rank": 24,
      "score": 8.538809730355197,
      "candidate": "from functools import reduce\nfrom typing import List\n\n\ndef binary_tuple_to_int(binary: List[int]) -> int:\n    return reduce(\n        lambda acc, x: acc * 2 + x,\n        binary,\n        0,\n    )\n\n\nif __name__ == \"__main__\":\n    assert binary_tuple_to_int([1, 0, 1]) == 5\n    assert binary_tuple_to_int([1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1]) == 285"
    },
    {
      "rank": 25,
      "score": 8.5259012464963,
      "candidate": "def tuple_to_int(tup):\n    # type (tuple) -> int\n    \"\"\"\n    Converts a binary tuple to an integer.\n    >>> tuple_to_int((1, 0, 1))\n    5\n    >>> tuple_to_int((1, 0, 1, 1))\n    11\n    >>> tuple_to_int((0, 1, 0, 1))\n    9\n    >>> tuple_to_int((0, 0, 0, 0))\n    0\n    >>> tuple_to_int((1, 1, 1, 1))\n    15\n    \"\"\"\n    return sum(2 ** i * tup[i] for i in range(len(tup)))\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 26,
      "score": 8.521220326433403,
      "candidate": "def binary_to_int(bin_tuple):\n    return int(\"\".join(map(str, bin_tuple)), 2)\n\n\nif __name__ == \"__main__\":\n    assert binary_to_int((1, 0, 1, 1, 1, 0)) == 31"
    },
    {
      "rank": 27,
      "score": 8.487704254431293,
      "candidate": "from functools import reduce\nfrom operator import xor\n\n\n# Time complexity: O(n)\n# Space complexity: O(1)\ndef binary_tuple_to_int(binary_tuple):\n    return reduce(xor, binary_tuple, 0)"
    },
    {
      "rank": 28,
      "score": 8.478392801057332,
      "candidate": "from functools import reduce\n\n\ndef bin_tuple_to_int(tup):\n    \"\"\"Convert a binary tuple to integer.\"\"\"\n    return reduce(lambda a, b: a << 1 | b, tup)"
    },
    {
      "rank": 29,
      "score": 8.439180526796651,
      "candidate": "from functools import reduce\nfrom operator import mul, or_\nfrom typing import Tuple, List\n\n\ndef bin_to_int(bin_tuple: Tuple[bool]) -> int:\n    return reduce(\n        lambda carry, bit: carry << 1 | bit,\n        bin_tuple,\n        0\n    )\n\n\nif __name__ == '__main__':\n    test_cases = [\n        (),\n        (False,),\n        (False, False),\n        (False, True),\n        (True,),\n        (True, False),\n        (True, True),\n        (False, False, False),\n        (False, False, True),\n        (False, True, False),\n        (False, True, True),\n        (True, False, False),\n        (True, False, True),\n        (True, True, False),\n        (True, True, True),\n        (False, False, False, False),\n        (False, False, False, True),\n        (False, False, True, False),\n        (False, False, True, True),\n        (False, True, False, False),\n        (False, True, False, True),\n        (False, True, True, False),\n        (False, True, True, True),\n        (True, False, False, False),\n        (True, False, False, True),\n        (True, False, True, False),\n        (True, False, True, True),\n        (True, True, False, False),\n        (True, True, False, True),\n        (True, True, True, False),\n        (True, True, True, True),\n    ]\n\n    for bits in test_cases:\n        print(f\"{bits} -> {bin_to_int(bits)}\")"
    },
    {
      "rank": 30,
      "score": 8.430472289191563,
      "candidate": "def convert_to_integer(binary_tuple):\n    integer = 0\n    for i in range(len(binary_tuple)):\n        integer += binary_tuple[i] * 2 ** i\n\n    return integer\n\n\nif __name__ == \"__main__\":\n    print(convert_to_integer((0, 1, 0)))"
    },
    {
      "rank": 31,
      "score": 8.416360497028114,
      "candidate": "from functools import reduce\nfrom typing import Iterable\n\n\ndef binary_to_decimal(binary_tuple: Iterable[int]) -> int:\n    \"\"\"\n    :param binary_tuple:\n    :return: decimal number\n\n    >>> binary_to_decimal((0, 1, 0, 1))\n    5\n    >>> binary_to_decimal((1, 0, 0, 1, 1, 0))\n    42\n    >>> binary_to_decimal((0, 0))\n    0\n    >>> binary_to_decimal((1, 1))\n    3\n    >>> binary_to_decimal((1, 0, 1))\n    5\n    >>> binary_to_decimal((1, 1, 0))\n    6\n    >>> binary_to_decimal((1, 0, 0, 0))\n    4\n    >>> binary_to_decimal((1, 0, 1, 0))\n    6\n    >>> binary_to_decimal((0, 1, 1, 0))\n    6\n    >>> binary_to_decimal((1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1))\n    3402823669209384634633746074317681671580L\n    >>> binary_to_decimal((0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0))\n    0\n    >>> binary_to_decimal((1, 0, 1, 1, 1, 0, 1, 0,"
    },
    {
      "rank": 32,
      "score": 8.353131031234264,
      "candidate": "from typing import List\n\n\ndef tuple_to_int(tup: List[int]) -> int:\n    \"\"\"Returns the integer value of a binary tuple.\n\n    Args:\n        tup (List[int]): the binary tuple\n\n    Examples:\n        >>> tuple_to_int([0, 1, 1])\n        5\n        >>> tuple_to_int([1, 0, 1])\n        6\n    \"\"\"\n    return sum(v * 2 ** i for i, v in enumerate(reversed(tup)))\n\n\ndef main():\n    tup = [0, 1, 1]\n    print(f'{tup} to int: {tuple_to_int(tup)}')\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 33,
      "score": 8.327014003164622,
      "candidate": "def binary_to_integer(binary):\n    return int(\"\".join(binary), 2)\n\n\nif __name__ == \"__main__\":\n    assert binary_to_integer((1, 0, 1)) == 5"
    },
    {
      "rank": 34,
      "score": 8.29426235508208,
      "candidate": "def convert_to_integer(binary):\n    integer = 0\n    for i in range(len(binary)):\n        integer += binary[i] * (2 ** (len(binary) - i - 1))\n    return integer\n\n\ndef main():\n    print(convert_to_integer((1, 0, 1, 0, 0, 1, 0)))\n    print(convert_to_integer((1, 0, 1, 0)))\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 35,
      "score": 8.264795323770128,
      "candidate": "def binary_tuple_to_int(binary_tuple):\n    return sum([2**i * val for i, val in enumerate(reversed(binary_tuple))])\n\n\nif __name__ == \"__main__\":\n    assert binary_tuple_to_int((1, 1, 1, 0)) == 14"
    },
    {
      "rank": 36,
      "score": 8.257566491684782,
      "candidate": "def tuple_to_int(tup):\n    return int(\"\".join(map(str, tup)), 2)\n\n\nif __name__ == \"__main__\":\n    tup = (1, 0, 1, 0, 1, 0)\n    print(tuple_to_int(tup))"
    },
    {
      "rank": 37,
      "score": 8.232135181879624,
      "candidate": "from typing import Tuple\n\n\ndef binary_to_integer(binary_tuple: Tuple[int, ...]) -> int:\n    \"\"\"Convert binary tuple to integer.\n\n    Args:\n        binary_tuple (Tuple[int, ...]): binary tuple\n\n    Examples:\n        >>> assert binary_to_integer((1, 0, 1)) == 5\n    \"\"\"\n    return sum(\n        number * 2 ** index\n        for index, number in enumerate(reversed(binary_tuple))\n    )\n\n\nif __name__ == \"__main__\":\n    print(binary_to_integer((1, 0, 1)))"
    },
    {
      "rank": 38,
      "score": 8.225152308040466,
      "candidate": "from functools import reduce\n\n\ndef binary_to_int(binary_tuple):\n    return reduce(lambda x, y: x * 2 + y, binary_tuple)\n\n\nif __name__ == \"__main__\":\n    assert binary_to_int((0, 0, 1, 1)) == 11\n    assert binary_to_int((1, 1, 1, 1)) == 15"
    },
    {
      "rank": 39,
      "score": 8.20977886567498,
      "candidate": "from functools import reduce\n\n\ndef binary_tuple_to_int(binary_tuple):\n    \"\"\"\n    :param binary_tuple: Tuple containing binary digits\n    :return: Integer equivalent of binary tuple\n    \"\"\"\n    return reduce(lambda x, y: x * 2 + y, binary_tuple)\n\n\nif __name__ == \"__main__\":\n    assert binary_tuple_to_int((1, 0, 1, 1)) == 13"
    },
    {
      "rank": 40,
      "score": 8.192847740148446,
      "candidate": "from typing import Tuple\n\n\ndef binary_to_integer(binary_tuple: Tuple[int, ...]) -> int:\n    \"\"\"Convert the given binary tuple to integer.\n\n    Args:\n        binary_tuple (Tuple[int, ...]): binary tuple to convert\n\n    Returns:\n        int: converted integer\n    \"\"\"\n    return sum(binary_tuple[i] * 2 ** (len(binary_tuple) - 1 - i) for i in range(len(binary_tuple)))\n\n\nif __name__ == \"__main__\":\n    print(binary_to_integer((1, 0, 1, 0)))"
    },
    {
      "rank": 41,
      "score": 8.180444864325121,
      "candidate": "# O(n) time | O(1) space - where n is the length of the tuples\ndef binaryTupleToNumber(tuple):\n    number = 0\n    for i in range(len(tuple)):\n        number = number * 2 + tuple[i]\n    return number"
    },
    {
      "rank": 42,
      "score": 8.163705203170508,
      "candidate": "from functools import reduce\n\n\n# Time complexity: O(n)\n# Space complexity: O(1)\ndef binary_tuple_to_integer(binary_tuple):\n    \"\"\"Convert the given binary tuple to integer.\n\n    Args:\n        binary_tuple (tuple): Binary tuple.\n\n    Returns:\n        int: Integer.\n    \"\"\"\n    return reduce(\n        lambda x, y: 2 * x + y,\n        map(lambda x: int(x), reversed(binary_tuple)),\n        0\n    )"
    },
    {
      "rank": 43,
      "score": 8.129131939316101,
      "candidate": "def binary_to_int(binary_tuple):\n    result = 0\n    for idx, num in enumerate(reversed(binary_tuple)):\n        result += 2 ** idx * num\n    return result\n\n\nif __name__ == \"__main__\":\n    assert binary_to_int((1, 0, 0, 1)) == 10"
    },
    {
      "rank": 44,
      "score": 8.090315054991173,
      "candidate": "def binary_to_int(binary_tuple):\n    integer = 0\n    for i in range(len(binary_tuple)):\n        integer += binary_tuple[i] * (2 ** i)\n    return integer\n\n\nif __name__ == \"__main__\":\n    binary_tuple = (1, 0, 1, 1, 1)\n    print(binary_to_int(binary_tuple))"
    },
    {
      "rank": 45,
      "score": 8.031937182151644,
      "candidate": "from typing import Tuple\n\n\ndef binary_to_integer(binary: Tuple[int, ...]) -> int:\n    \"\"\"Convert a binary tuple to integer.\n\n    Args:\n        binary (Tuple[int, ...]): binary tuple to convert\n\n    Returns:\n        int: integer representation of binary tuple\n    \"\"\"\n    return int(\"\".join(map(str, binary)), 2)\n\n\nif __name__ == \"__main__\":\n    assert binary_to_integer((1, 0, 1, 1)) == 13\n    assert binary_to_integer((1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1)) == 1023\n    assert binary_to_integer((0, 0, 0, 0)) == 0"
    },
    {
      "rank": 46,
      "score": 7.995556949249747,
      "candidate": "# O(n) time | O(n) space\ndef binaryTupleToNumber(tuple):\n    return int(\"\".join(map(str, tuple)), 2)"
    },
    {
      "rank": 47,
      "score": 7.888792651821197,
      "candidate": "def binary_tuple_to_int(binary_tuple):\n    return sum(2 ** i * binary_tuple[i] for i in range(len(binary_tuple)))\n\n\nif __name__ == \"__main__\":\n    print(binary_tuple_to_int((0, 1, 0)))"
    },
    {
      "rank": 48,
      "score": 7.867820868201148,
      "candidate": "from typing import Tuple\n\n\ndef binary_to_integer(binary: Tuple[int, ...]) -> int:\n    \"\"\"Convert a binary tuple to integer.\n\n    Args:\n        binary (Tuple[int, ...]): binary tuple\n\n    Examples:\n        >>> assert binary_to_integer((1, 0, 1)) == 5\n    \"\"\"\n    return sum(d * (2 ** i) for i, d in enumerate(reversed(binary)))\n\n\ndef main():\n    \"\"\"Print example.\"\"\"\n    print(binary_to_integer((1, 0, 1)))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 49,
      "score": 7.771726489764362,
      "candidate": "def binary_tuple_to_integer(binary_tuple):\n    if not binary_tuple:\n        return None\n\n    return sum([value * (2 ** i) for i, value in enumerate(binary_tuple)])\n\n\nif __name__ == \"__main__\":\n    assert binary_tuple_to_integer((1, 1, 0, 1)) == 13"
    },
    {
      "rank": 50,
      "score": 7.698265149027904,
      "candidate": "from functools import reduce\n\n\n# [1, 0, 1, 0, 1] -> 10101\ndef binary_tuple_to_int(tup):\n    return reduce(lambda x, y: x * 2 + y, tup)\n\n\nif __name__ == \"__main__\":\n    assert binary_tuple_to_int((1, 0, 1, 0, 1)) == 10101"
    },
    {
      "rank": 51,
      "score": 7.422743853849444,
      "candidate": "def binary_tuple_to_int(b):\n    return int(''.join(map(str, b)), 2)\n\n\nprint(binary_tuple_to_int((1, 1, 0, 1)))"
    },
    {
      "rank": 52,
      "score": 3.9076163104093795,
      "candidate": "from typing import Tuple\n\n\ndef binary_to_integer(binary_tuple: Tuple[int]) -> int:\n    \"\"\"Convert binary tuple to integer.\n\n    Args:\n        binary_tuple (Tuple[int]): binary tuple\n\n    Examples:\n        >>> assert binary_to_integer((1, 0, 1, 1)) == 13\n\n    Returns:\n        int: integer value of binary tuple\n    \"\"\"\n    return sum(\n        value * (2 ** index) for index, value in enumerate(binary_tuple[::-1])\n    )\n\n\nif __name__ == \"__main__\":\n    print(binary_to_integer((1, 0, 1, 1)))"
    },
    {
      "rank": 53,
      "score": 3.773814279598622,
      "candidate": "from functools import reduce\n\n\n# Time complexity: O(n)\n# Space complexity: O(1)\ndef binary_tuple_to_int(binary_tuple):\n    \"\"\"Convert binary tuple to integer.\n\n    Parameters\n    ----------\n    binary_tuple: tuple of int\n\n    Returns\n    -------\n    int\n    \"\"\"\n    return reduce(lambda x, y: x * 2 + y, binary_tuple)"
    },
    {
      "rank": 54,
      "score": 3.7536379175683248,
      "candidate": "from typing import Tuple\n\n\ndef convert_to_integer(binary_tuple: Tuple[int]) -> int:\n    \"\"\"Convert binary tuple to integer.\n\n    Args:\n        binary_tuple (Tuple[int]): binary tuple to convert\n\n    Examples:\n        >>> assert convert_to_integer((1, 0, 1, 0, 1, 0)) == 42\n    \"\"\"\n    return sum(\n        binary_tuple[index] * (2 ** index) for index in range(len(binary_tuple))\n    )\n\n\nif __name__ == \"__main__\":\n    print(convert_to_integer((1, 0, 1, 0, 1, 0)))"
    },
    {
      "rank": 55,
      "score": 3.7181678967715612,
      "candidate": "from typing import List\n\n\ndef binary_tuple_to_int(binary_tuple: List[int]) -> int:\n    \"\"\"Binary tuple to integer.\n\n    Args:\n        binary_tuple (List[int]): list of binary digits\n\n    Returns:\n        int: integer\n    \"\"\"\n    return int(\"\".join(map(str, binary_tuple)), 2)\n\n\nif __name__ == \"__main__\":\n    print(binary_tuple_to_int([1, 0, 1, 1]))"
    },
    {
      "rank": 56,
      "score": 3.6645576139997034,
      "candidate": "from typing import Tuple\n\n\ndef binary_tuple_to_integer(binary_tuple: Tuple[int, ...]) -> int:\n    \"\"\"Convert binary tuple to integer.\n\n    Args:\n        binary_tuple (Tuple[int, ...]): binary tuple\n\n    Returns:\n        int: integer\n    \"\"\"\n    return int(\"\".join(map(str, binary_tuple)), 2)\n\n\nif __name__ == \"__main__\":\n    assert binary_tuple_to_integer((1, 0, 0, 1)) == 5\n    assert binary_tuple_to_integer((0, 0, 1)) == 4\n    assert binary_tuple_to_integer((1, 1, 1, 1)) == 15\n    assert binary_tuple_to_integer((1, 0, 1, 1)) == 11\n    assert binary_tuple_to_integer((1, 1, 1, 0)) == 14"
    },
    {
      "rank": 57,
      "score": 3.517989890847269,
      "candidate": "from typing import List\n\n\ndef binary_to_integer(binary: List[int]) -> int:\n    \"\"\"Binary to integer.\n\n    Args:\n        binary (List[int]): binary number\n\n    Returns:\n        int: integer\n    \"\"\"\n    return int(\"\".join(str(b) for b in binary), 2)\n\n\nif __name__ == \"__main__\":\n    assert binary_to_integer([1, 1, 1, 1, 1, 1]) == 127"
    },
    {
      "rank": 58,
      "score": 3.505189766023016,
      "candidate": "from typing import Tuple\n\n\ndef binary_to_decimal(binary_tuple: Tuple[int, ...]) -> int:\n    \"\"\"Convert binary tuple to decimal.\n\n    Args:\n        binary_tuple (Tuple[int, ...]): binary tuple to convert\n\n    Returns:\n        int: decimal value\n    \"\"\"\n    return int(\"\".join(map(str, binary_tuple)), 2)\n\n\nif __name__ == \"__main__\":\n    assert binary_to_decimal((1, 0, 0, 1)) == 9\n    assert binary_to_decimal((1, 1, 1, 1, 0)) == 31"
    },
    {
      "rank": 59,
      "score": 3.491731119967092,
      "candidate": "from typing import Tuple\n\n\ndef binary_to_int(binary_tuple: Tuple[int, ...]) -> int:\n    \"\"\"Convert binary tuple to integer.\n\n    Args:\n        binary_tuple (Tuple[int, ...]): binary tuple to convert\n\n    Returns:\n        int: integer representation of binary tuple\n    \"\"\"\n    return int(\"\".join(map(str, binary_tuple)), 2)\n\n\nif __name__ == \"__main__\":\n    assert binary_to_int((1, 0, 1, 0, 1, 0)) == 42"
    },
    {
      "rank": 60,
      "score": 3.4485470376740164,
      "candidate": "from typing import Tuple\n\n\ndef convert_to_integer(binary_tuple: Tuple[int, ...]) -> int:\n    \"\"\"\n    :param binary_tuple: Tuple of integers, all are 0 or 1\n    :return: Integer value of the tuple\n    \"\"\"\n    return int(\"\".join(map(str, binary_tuple)), 2)\n\n\nif __name__ == \"__main__\":\n    assert convert_to_integer((0, 1, 1)) == 5"
    },
    {
      "rank": 61,
      "score": 3.4030470069305627,
      "candidate": "from typing import Tuple\n\n\ndef binary_tuple_to_int(binary_tuple: Tuple[int, ...]) -> int:\n    \"\"\"Convert binary tuple to integer.\n\n    Args:\n        binary_tuple (Tuple[int, ...]): binary tuple\n\n    Examples:\n        >>> assert binary_tuple_to_int((0, 1, 0)) == 4\n    \"\"\"\n    return int(\"\".join(map(str, binary_tuple)), 2)\n\n\nif __name__ == \"__main__\":\n    print(binary_tuple_to_int((0, 1, 0)))"
    },
    {
      "rank": 62,
      "score": 3.4027322271438596,
      "candidate": "from typing import Tuple\n\n\ndef binary_to_int(binary_tuple: Tuple[int, ...]) -> int:\n    \"\"\"Convert the given binary tuple to integer.\n\n    Args:\n        binary_tuple (Tuple[int, ...]): binary tuple\n\n    Examples:\n        >>> assert binary_to_int((1, 0, 1, 0, 1)) == 14\n    \"\"\"\n    return sum(2 ** i * val for i, val in enumerate(binary_tuple))\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 63,
      "score": 3.398137652973157,
      "candidate": "from typing import List\n\n\ndef binary_tuple_to_integer(tup: List[int]) -> int:\n    \"\"\"Convert binary tuple to integer.\n\n    Args:\n        tup (List[int]): Binary tuple\n\n    Examples:\n        >>> assert binary_tuple_to_integer([1, 1, 1]) == 7\n        >>> assert binary_tuple_to_integer([1, 1, 0, 1]) == 10\n        >>> assert binary_tuple_to_integer([1, 1, 0, 0, 1]) == 14\n        >>> assert binary_tuple_to_integer([1, 0, 1, 0, 1]) == 12\n    \"\"\"\n    return sum(val * 2 ** idx for idx, val in enumerate(tup[::-1]))\n\n\nif __name__ == \"__main__\":\n    print(binary_tuple_to_integer([1, 1, 1]))  # 7\n    print(binary_tuple_to_integer([1, 1, 0, 1]))  # 10\n    print(binary_tuple_to_integer([1, 1, 0, 0, 1]))  # 14\n    print(binary_tuple_to_integer([1, 0, 1, 0, 1]))  # 12"
    },
    {
      "rank": 64,
      "score": 3.376043017284925,
      "candidate": "from functools import reduce\nfrom typing import Tuple\n\n\ndef binary_to_decimal(binary: Tuple[int, ...]) -> int:\n    \"\"\"Convert binary tuple to decimal.\n\n    Args:\n        binary (Tuple[int, ...]): tuple of binary numbers\n\n    Returns:\n        int: decimal value\n    \"\"\"\n    return reduce(lambda x, y: x * 2 + y, binary)\n\n\nif __name__ == \"__main__\":\n    assert binary_to_decimal((1, 0, 1)) == 5"
    },
    {
      "rank": 65,
      "score": 3.3173673836693394,
      "candidate": "# def binary_to_int(binary):\n#     return int(\"\".join(binary), 2)\n\n\ndef binary_to_int(binary):\n    return int(binary, 2)\n\n\nif __name__ == \"__main__\":\n    binary = \"11001\"\n    print(binary_to_int(binary))"
    },
    {
      "rank": 66,
      "score": 3.2997213815320254,
      "candidate": "from functools import reduce\nfrom operator import xor\nfrom typing import Tuple\n\n\ndef convert_to_int(binary_tuple: Tuple[int, ...]) -> int:\n    \"\"\"Convert the given binary tuple to integer.\n\n    Args:\n        binary_tuple (Tuple[int, ...]): binary tuple to convert\n\n    Examples:\n        >>> assert convert_to_int((0, 0, 1)) == 4\n    \"\"\"\n    return reduce(xor, binary_tuple, 0)\n\n\ndef main() -> None:\n    \"\"\"Main function.\"\"\"\n    binary_tuple = (0, 0, 1)\n    print(f'The binary tuple: {binary_tuple}')\n    print(f'The integer: {convert_to_int(binary_tuple)}')\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 67,
      "score": 3.1840920289893795,
      "candidate": "from typing import Tuple\n\n\ndef binary_to_int(binary_tuple: Tuple[int]) -> int:\n    \"\"\"Converts binary tuple to integer.\n\n    Args:\n        binary_tuple (Tuple[int]): tuple of binary numbers\n\n    Examples:\n        >>> assert binary_to_int((1, 0, 1, 0)) == 10\n    \"\"\"\n    return int(\"\".join(map(str, binary_tuple)), 2)\n\n\nif __name__ == \"__main__\":\n    print(binary_to_int((1, 0, 1, 0)))"
    },
    {
      "rank": 68,
      "score": 3.177083846699123,
      "candidate": "from typing import List\n\n\ndef binary_to_int(bin_list: List[int]) -> int:\n    \"\"\"Binary to integer.\n\n    Args:\n        bin_list (List[int]): list of binary digits\n\n    Returns:\n        int: integer value\n    \"\"\"\n    return int(\"\".join(map(str, bin_list)), 2)\n\n\nif __name__ == \"__main__\":\n    assert binary_to_int([1, 0, 1, 1]) == 13"
    },
    {
      "rank": 69,
      "score": 3.1749851600407557,
      "candidate": "def binary_to_decimal(binary_tuple):\n    \"\"\"Convert the given binary tuple to integer.\n\n    :param binary_tuple: a tuple of binary numbers\n    :type binary_tuple: tuple\n    :return: an integer\n    :rtype: int\n    \"\"\"\n    return int(\"\".join([str(i) for i in binary_tuple]), 2)\n\n\nif __name__ == \"__main__\":\n    assert binary_to_decimal((1, 1, 0, 1)) == 13\n    assert binary_to_decimal((1, 0, 1, 0, 1, 0, 1)) == 103"
    },
    {
      "rank": 70,
      "score": 3.1623190813877464,
      "candidate": "from functools import reduce\n\n\ndef convert_binary_to_int(binary):\n    \"\"\"\n    :param binary: tuple of binary digits\n    :return: int\n    >>> convert_binary_to_int((0, 1, 0, 1))\n    5\n    >>> convert_binary_to_int((1, 0, 0, 1))\n    9\n    >>> convert_binary_to_int((0, 0, 1))\n    1\n    \"\"\"\n    return reduce(lambda x, y: x * 2 + y, binary)\n\n\ndef main():\n    print(\n        \"The integer equivalent of the given binary tuple is: \"\n        f\"{convert_binary_to_int((0, 1, 0, 1))}\"\n    )\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 71,
      "score": 3.1588011450034497,
      "candidate": "from typing import Tuple\n\n\ndef binary_tuple_to_int(binary_tuple: Tuple[int, ...]) -> int:\n    \"\"\"Convert a tuple of binary digits to integer.\n\n    :param binary_tuple: tuple of binary digits\n    :return: integer\n    \"\"\"\n    return int(\"\".join(map(str, binary_tuple)), 2)\n\n\nif __name__ == \"__main__\":\n    assert binary_tuple_to_int((1, 0, 1)) == 5\n    assert binary_tuple_to_int((1, 1, 0, 1)) == 10"
    },
    {
      "rank": 72,
      "score": 3.1539811929716843,
      "candidate": "from typing import Tuple\n\n\ndef binary_to_integer(binary_tuple: Tuple[int, ...]) -> int:\n    \"\"\"\n    Write a function to convert the given binary tuple to integer.\n    :param binary_tuple: tuple with binary values\n    :return: integer value\n    >>> binary_to_integer((1, 0, 0, 1))\n    5\n    >>> binary_to_integer((1, 1, 0, 1))\n    10\n    >>> binary_to_integer((1, 1, 1, 1))\n    15\n    \"\"\"\n    result = 0\n    for i in range(len(binary_tuple)):\n        result += binary_tuple[i] * (2 ** i)\n\n    return result\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 73,
      "score": 3.0839704577830855,
      "candidate": "# O(n) time | O(1) space\ndef binaryTupleToNumber(binaryTuple):\n\tresult = 0\n\tfor i in range(len(binaryTuple)):\n\t\tresult += 2**i * binaryTuple[i]\n\treturn result\n\n\nprint(binaryTupleToNumber((1, 1, 1, 1, 0)))"
    },
    {
      "rank": 74,
      "score": 3.044962780502396,
      "candidate": "from collections import deque\n\n\ndef convert_binary_tuple_to_integer(binary_tuple):\n    \"\"\"Convert the given binary tuple to integer.\n\n    Args:\n        binary_tuple(tuple): binary tuple to convert.\n\n    Returns:\n        int: integer value of the given binary tuple.\n    \"\"\"\n    integer = 0\n    for index, value in enumerate(binary_tuple):\n        if value == \"1\":\n            integer += (2 ** index)\n    return integer\n\n\ndef convert_binary_tuple_to_integer_2(binary_tuple):\n    \"\"\"Convert the given binary tuple to integer.\n\n    Args:\n        binary_tuple(tuple): binary tuple to convert.\n\n    Returns:\n        int: integer value of the given binary tuple.\n    \"\"\"\n    integer = 0\n    for value in reversed(binary_tuple):\n        if value == \"1\":\n            integer += (2 ** binary_tuple.index(value))\n    return integer\n\n\ndef convert_binary_tuple_to_integer_3(binary_tuple):\n    \"\"\"Convert the given binary tuple to integer.\n\n    Args:\n        binary_tuple(tuple): binary tuple to convert.\n\n    Returns:\n        int: integer value of the given binary tuple.\n    \"\"\"\n    integer = 0\n    for index, value in enumerate(binary_tuple):\n        if value == \"1\":\n            integer += (2 ** (len(binary_tuple) - index - 1))\n    return integer\n\n\ndef convert_binary_tuple_to_integer_4(binary_tuple):\n    \"\"\"Convert the given binary tuple to integer.\n\n    Args:\n        binary_tuple(tuple): binary tuple to convert.\n\n    Returns:\n        int: integer value of the given binary tuple.\n    \"\"\"\n    integer = 0\n    for value in reversed(binary_tuple):\n        if value == \"1\":\n            integer += (2 ** binary_tuple.index(value))\n    return integer\n\n\ndef convert_binary_tuple_to_integer_5(binary_tuple):\n    \"\"\"Convert the given binary tuple to integer.\n\n    Args:\n        binary_tuple(tuple): binary tuple to"
    },
    {
      "rank": 75,
      "score": 3.0330888202970825,
      "candidate": "from typing import Tuple\n\n\ndef binary_tuple_to_int(binary_tuple: Tuple[int, ...]) -> int:\n    \"\"\"Convert binary tuple to integer.\n\n    Args:\n        binary_tuple (Tuple[int, ...]): binary tuple to convert\n\n    Returns:\n        int: integer representation of binary tuple\n    \"\"\"\n    return sum(\n        int(digit) * (2 ** idx) for idx, digit in enumerate(binary_tuple[::-1])\n    )\n\n\nif __name__ == \"__main__\":\n    assert binary_tuple_to_int((1, 0, 1)) == 5\n    assert binary_tuple_to_int((1, 0, 0, 1)) == 10\n    assert binary_tuple_to_int((1, 1, 1, 1, 0)) == 30\n    assert binary_tuple_to_int((1, 0, 1, 1)) == 11"
    },
    {
      "rank": 76,
      "score": 2.943332341629762,
      "candidate": "from typing import Tuple\n\n\ndef binary_tuple_to_int(binary_tuple: Tuple[int, ...]) -> int:\n    \"\"\"Converts a given binary tuple to integer.\n\n    Args:\n        binary_tuple (Tuple[int, ...]): a tuple of binary numbers\n\n    Examples:\n        >>> assert binary_tuple_to_int((0, 1, 0, 1)) == 10\n    \"\"\"\n    return sum(2 ** i * digit for i, digit in enumerate(binary_tuple[::-1]))\n\n\nif __name__ == \"__main__\":\n    print(binary_tuple_to_int((0, 1, 0, 1)))"
    },
    {
      "rank": 77,
      "score": 2.9322504924261197,
      "candidate": "from typing import Tuple\n\n\ndef binary_tuple_to_int(binary_tuple: Tuple[bool, ...]) -> int:\n    \"\"\"Convert binary tuple to integer.\n\n    Args:\n        binary_tuple (Tuple[bool, ...]): binary tuple to convert\n\n    Returns:\n        int: integer representation\n    \"\"\"\n    return int(\"\".join(map(str, map(int, binary_tuple))), 2)\n\n\nif __name__ == \"__main__\":\n    assert binary_tuple_to_int((True, True, False, False)) == 12"
    },
    {
      "rank": 78,
      "score": 2.9090271014347295,
      "candidate": "from typing import List\n\n\ndef binary_tuple_to_int(binary_tuple: List[int]) -> int:\n    \"\"\"Convert binary tuple to int.\n\n    Args:\n        binary_tuple (List[int]): binary tuple\n\n    Examples:\n        >>> assert binary_tuple_to_int([0, 1, 0, 1, 1, 1, 1]) == 53\n    \"\"\"\n    return int(\"\".join(map(str, binary_tuple)), 2)\n\n\nif __name__ == \"__main__\":\n    print(binary_tuple_to_int([0, 1, 0, 1, 1, 1, 1]))"
    },
    {
      "rank": 79,
      "score": 2.892360774959619,
      "candidate": "from typing import Tuple\n\n\ndef binary_to_int(binary_tuple: Tuple[int]) -> int:\n    \"\"\"Convert binary tuple to integer.\n\n    Args:\n        binary_tuple (Tuple[int]): binary tuple to convert\n\n    Returns:\n        int: integer representation of binary tuple\n    \"\"\"\n    return int(\"\".join(map(str, binary_tuple)), 2)\n\n\nif __name__ == \"__main__\":\n    assert binary_to_int((1, 0, 1)) == 5\n    assert binary_to_int((1, 1, 0, 1, 0, 0, 1, 1, 1, 1)) == 1023\n    assert binary_to_int((1, 0, 0, 1, 0, 0, 1, 0, 1, 0)) == 458"
    },
    {
      "rank": 80,
      "score": 2.8893696127615973,
      "candidate": "from typing import Tuple\n\n\ndef binary_tuple_to_int(b_tuple: Tuple[int, ...]) -> int:\n    \"\"\"Convert given binary tuple to integer.\n\n    Args:\n        b_tuple (Tuple[int, ...]): Binary tuple to convert.\n\n    Examples:\n        >>> assert binary_tuple_to_int((1, 0, 1, 1)) == 13\n        >>> assert binary_tuple_to_int((1, 0, 0, 1, 0, 0, 1, 1, 1)) == 463\n    \"\"\"\n    return int(\"\".join(map(str, b_tuple)), base=2)\n\n\nif __name__ == \"__main__\":\n    print(binary_tuple_to_int((1, 0, 1, 1)))\n    print(binary_tuple_to_int((1, 0, 0, 1, 0, 0, 1, 1, 1)))"
    },
    {
      "rank": 81,
      "score": 2.8852648463855655,
      "candidate": "def binary_to_integer(binary_tuple):\n    \"\"\"\n    Convert the given binary tuple to integer.\n\n    :param binary_tuple: Binary tuple.\n    :type binary_tuple: tuple\n    :return: Integer.\n    :rtype: int\n    \"\"\"\n    return int(\"\".join(map(str, binary_tuple)), 2)\n\n\nif __name__ == \"__main__\":\n    print(binary_to_integer((0, 1, 1, 0, 1)))"
    },
    {
      "rank": 82,
      "score": 2.857070062601294,
      "candidate": "from typing import Tuple\n\n\ndef binary_tuple_to_int(bin_tuple: Tuple[int, ...]) -> int:\n    \"\"\"Convert binary tuple to integer.\n\n    Args:\n        bin_tuple (Tuple[int, ...]): Binary tuple to convert\n\n    Returns:\n        int: Converted integer\n\n    Examples:\n        >>> assert binary_tuple_to_int((1, 1, 0, 1, 1, 1)) == 53\n    \"\"\"\n    return int(\"\".join(map(str, bin_tuple)), 2)\n\n\nif __name__ == \"__main__\":\n    print(binary_tuple_to_int((1, 1, 0, 1, 1, 1)))"
    },
    {
      "rank": 83,
      "score": 2.853486398271725,
      "candidate": "from typing import Tuple\n\n\ndef binary_to_integer(binary_tuple: Tuple[int]) -> int:\n    \"\"\"Convert binary tuple to integer.\n\n    Args:\n        binary_tuple (Tuple[int]): binary tuple to convert\n\n    Returns:\n        int: integer representation of binary tuple\n    \"\"\"\n    return int(\"\".join(map(str, binary_tuple)), 2)\n\n\nif __name__ == \"__main__\":\n    assert binary_to_integer((1, 0, 1)) == 5\n    assert binary_to_integer((1, 0, 0, 1)) == 9\n    assert binary_to_integer((0, 0, 1)) == 4\n    assert binary_to_integer((1, 1, 1, 1, 1)) == 31\n    assert binary_to_integer((0, 0, 0, 0, 0, 0, 1)) == 128"
    },
    {
      "rank": 84,
      "score": 2.8484859358329047,
      "candidate": "from typing import Tuple\n\n\ndef binary_tuple_to_integer(binary_tuple: Tuple[int, ...]) -> int:\n    \"\"\"Convert binary tuple to integer.\n\n    Args:\n        binary_tuple (Tuple[int, ...]): binary tuple to convert\n\n    Examples:\n        >>> assert binary_tuple_to_integer((1, 1)) == 3\n        >>> assert binary_tuple_to_integer((1, 0, 1)) == 5\n        >>> assert binary_tuple_to_integer((1, 0, 1, 0)) == 5\n        >>> assert binary_tuple_to_integer((1, 0, 1, 0, 1)) == 11\n    \"\"\"\n    return int(\"\".join(map(str, binary_tuple)), 2)\n\n\nif __name__ == \"__main__\":\n    print(binary_tuple_to_integer((1, 1)))"
    },
    {
      "rank": 85,
      "score": 2.7729253305218933,
      "candidate": "def binary_to_decimal(t):\n    \"\"\"\n    :param t: list\n    :return: int\n    \"\"\"\n    return int(\"\".join(map(str, t)), 2)\n\n\nif __name__ == \"__main__\":\n    print(binary_to_decimal([0, 1, 1]))"
    },
    {
      "rank": 86,
      "score": 2.771792420750574,
      "candidate": "from typing import Tuple\n\n\ndef binary_to_decimal(binary_tuple: Tuple[int, ...]) -> int:\n    \"\"\"Converts the given binary tuple to integer.\n\n    Args:\n        binary_tuple (Tuple[int, ...]): binary tuple to convert\n\n    Examples:\n        >>> assert binary_to_decimal((1, 0, 1)) == 5\n    \"\"\"\n    return sum(digit * 2 ** (len(binary_tuple) - i - 1) for i, digit in enumerate(binary_tuple))\n\n\nif __name__ == \"__main__\":\n    print(binary_to_decimal((1, 0, 1)))"
    },
    {
      "rank": 87,
      "score": 2.7699575508918737,
      "candidate": "def binary_to_integer(binary_tuple):\n    integer = 0\n    for i in range(len(binary_tuple)):\n        integer += binary_tuple[i] * (2 ** (len(binary_tuple) - i - 1))\n\n    return integer\n\n\ndef test_binary_to_integer():\n    \"\"\"Test for binary_to_integer function.\"\"\"\n    assert binary_to_integer((1, 0, 1, 1)) == 13\n    assert binary_to_integer((1, 0, 0, 1, 0, 1, 1)) == 101\n    assert binary_to_integer((0, 1, 1, 0, 1, 0, 1, 1)) == 159\n\n\nif __name__ == \"__main__\":\n    test_binary_to_integer()"
    },
    {
      "rank": 88,
      "score": 2.754139048643577,
      "candidate": "from typing import Tuple\n\n\ndef binary_to_int(binary_tuple: Tuple[int]) -> int:\n    \"\"\"Convert binary tuple to int.\n\n    Args:\n        binary_tuple (Tuple[int]): binary tuple\n\n    Examples:\n        >>> assert binary_to_int((1, 0, 1, 1)) == 13\n    \"\"\"\n    return int(\"\".join(map(str, binary_tuple)), 2)\n\n\nif __name__ == \"__main__\":\n    assert binary_to_int((1, 0, 1, 1)) == 13"
    },
    {
      "rank": 89,
      "score": 2.7460475930459127,
      "candidate": "# Time: O(n)\n# Space: O(1)\ndef binary_tuple_to_int(binary_tuple):\n    result = 0\n\n    for i, val in enumerate(reversed(binary_tuple)):\n        result += val * (2 ** i)\n\n    return result\n\n\nif __name__ == '__main__':\n    print(binary_tuple_to_int((1, 1, 0, 1)))"
    },
    {
      "rank": 90,
      "score": 2.7056870419397856,
      "candidate": "from typing import List\n\n\ndef binary_tuple_to_int(bin_tuple: List[int]) -> int:\n    \"\"\"Binary tuple to integer.\n\n    :param bin_tuple: binary tuple\n    :return: integer\n    \"\"\"\n    return int(\"\".join(map(str, bin_tuple)), 2)\n\n\nif __name__ == \"__main__\":\n    assert binary_tuple_to_int([1, 0, 1, 1]) == 13"
    },
    {
      "rank": 91,
      "score": 2.588783413620907,
      "candidate": "from typing import Tuple\n\n\ndef binary_tuple_to_int(b_tuple: Tuple[int, ...]) -> int:\n    \"\"\"Convert a given tuple of binary digits to a single integer.\n\n    Args:\n        b_tuple (Tuple[int, ...]): binary tuple to convert\n\n    Returns:\n        int: integer representation of the binary tuple\n    \"\"\"\n    return sum(b * (2 ** i) for i, b in enumerate(b_tuple[::-1]))\n\n\nif __name__ == \"__main__\":\n    assert binary_tuple_to_int((1, 1, 0, 1)) == 13\n    assert binary_tuple_to_int((1, 0, 1)) == 5\n    assert binary_tuple_to_int((1, 1, 1, 1, 1, 1)) == 63"
    },
    {
      "rank": 92,
      "score": 2.503712751036132,
      "candidate": "from functools import reduce\nfrom operator import add\n\n\ndef binary_tuple_to_integer(binary_tuple: tuple) -> int:\n    \"\"\"Convert binary tuple to integer.\n\n    Args:\n        binary_tuple (tuple): Binary tuple to convert.\n\n    Examples:\n        >>> assert binary_tuple_to_integer((1, 1, 0, 1)) == 11\n    \"\"\"\n    return reduce(add, [2**i for i, b in enumerate(binary_tuple) if b])\n\n\nif __name__ == \"__main__\":\n    print(binary_tuple_to_integer((1, 1, 0, 1)))"
    },
    {
      "rank": 93,
      "score": 2.457895862737046,
      "candidate": "from functools import reduce\n\n\ndef binary_to_decimal(binary):\n    \"\"\"Returns the decimal value of the given binary tuple.\"\"\"\n    return reduce(lambda x, y: x * 2 + y, binary)\n\n\ndef test_binary_to_decimal():\n    \"\"\"Test for binary_to_decimal function.\"\"\"\n    assert binary_to_decimal((1, 0, 1, 0, 1, 0, 1)) == 42\n    assert binary_to_decimal((1, 0, 0, 1)) == 9\n    assert binary_to_decimal((0, 0, 0, 0)) == 0\n    assert binary_to_decimal((1, 1, 1, 1)) == 15\n\n\nif __name__ == \"__main__\":\n    test_binary_to_decimal()"
    },
    {
      "rank": 94,
      "score": 2.4138587542004712,
      "candidate": "from typing import Tuple\n\n\ndef tuple_to_int(tuple_: Tuple[int]) -> int:\n    \"\"\"Convert given tuple of integers to integer.\n\n    Args:\n        tuple_ (Tuple[int]): Tuple of integers to convert.\n\n    Examples:\n        >>> assert tuple_to_int((0, 1, 0, 1)) == 11\n        >>> assert tuple_to_int((1, 1, 0, 1)) == 13\n        >>> assert tuple_to_int((1, 1, 0, 0)) == 12\n        >>> assert tuple_to_int((1, 0, 1, 0)) == 10\n    \"\"\"\n    return sum(tuple_[i] * (2 ** i) for i in range(len(tuple_)))\n\n\nif __name__ == \"__main__\":\n    print(tuple_to_int((0, 1, 0, 1)))"
    },
    {
      "rank": 95,
      "score": 2.4017866115141993,
      "candidate": "from typing import Tuple\n\n\ndef binary_tuple_to_integer(binary_tuple: Tuple[int]) -> int:\n    \"\"\"Convert the given binary tuple to integer.\n\n    Args:\n        binary_tuple (Tuple[int]): given binary tuple.\n\n    Examples:\n        >>> assert binary_tuple_to_integer((1, 0, 1)) == 5\n    \"\"\"\n    return int(\"\".join(map(str, binary_tuple)), 2)\n\n\nif __name__ == \"__main__\":\n    print(binary_tuple_to_integer((1, 0, 1)))"
    },
    {
      "rank": 96,
      "score": 2.349188836039769,
      "candidate": "from typing import Tuple\n\n\ndef binary_to_decimal(binary: Tuple[int]) -> int:\n    \"\"\"Binary to decimal.\n\n    :param binary: binary tuple\n    :return: decimal integer\n    \"\"\"\n    return int(\"\".join(map(str, binary)), 2)\n\n\nif __name__ == \"__main__\":\n    assert binary_to_decimal((1, 0, 1)) == 5"
    },
    {
      "rank": 97,
      "score": 2.307971186345707,
      "candidate": "from typing import Tuple\n\n\ndef binary_tuple_to_int(binary_tuple: Tuple[int, ...]) -> int:\n    \"\"\"Convert binary tuple to integer.\n\n    Args:\n        binary_tuple (Tuple[int, ...]): binary tuple\n\n    Examples:\n        >>> assert binary_tuple_to_int((1, 0, 1)) == 5\n    \"\"\"\n    return sum(2 ** (len(binary_tuple) - index - 1) * value for index, value in enumerate(binary_tuple))\n\n\nif __name__ == '__main__':\n    print(binary_tuple_to_int((1, 0, 1)))"
    },
    {
      "rank": 98,
      "score": 2.1361103238722605,
      "candidate": "from typing import Tuple\n\n\ndef binary_to_decimal(binary_tuple: Tuple[int]) -> int:\n    \"\"\"Binary to decimal.\"\"\"\n    return int(\"\".join(map(str, binary_tuple)), 2)\n\n\nif __name__ == \"__main__\":\n    assert binary_to_decimal((0, 1, 1)) == 5\n    assert binary_to_decimal((0, 1, 0, 1, 1)) == 11\n    assert binary_to_decimal((1, 1, 1, 1, 1)) == 31"
    },
    {
      "rank": 99,
      "score": 2.03976163929891,
      "candidate": "# Time Complexity: O(n)\n# Space Complexity: O(1)\ndef convert_binary_tuple_to_integer(binary_tuple):\n    if not binary_tuple:\n        return 0\n    elif len(binary_tuple) == 1:\n        return int(binary_tuple[0])\n\n    return int(binary_tuple[0]) * 2 ** (len(binary_tuple) - 1) + convert_binary_tuple_to_integer(binary_tuple[1:])\n\n\nif __name__ == \"__main__\":\n    print(convert_binary_tuple_to_integer((\"1\", \"1\", \"0\")))"
    },
    {
      "rank": 100,
      "score": 2.0260912318455624,
      "candidate": "from typing import List\n\n\ndef binary_tuple_to_int(binary_tuple: List[int]) -> int:\n    \"\"\"Convert binary tuple to int.\n\n    Args:\n        binary_tuple (List[int]): binary tuple to convert\n\n    Returns:\n        int: converted int\n    \"\"\"\n    return int(\"\".join(map(str, binary_tuple)), 2)\n\n\nif __name__ == \"__main__\":\n    assert binary_tuple_to_int([1, 1, 1, 1]) == 15"
    }
  ]
}