{
  "timestamp": "2025-09-15T01:16:35.960980",
  "method": "improved_llm_judge",
  "judge_model": "codellama/CodeLlama-7b-Python-hf",
  "target_model": "codellama-7b",
  "dataset": "mbpp",
  "problem_number": 392,
  "total_candidates": 100,
  "results": [
    {
      "rank": 1,
      "score": 10.0,
      "candidate": "import re\n\n\ndef is_url_valid(url):\n    \"\"\"\n    >>> is_url_valid('http://google.com')\n    True\n    >>> is_url_valid('google.com')\n    False\n    \"\"\"\n    if re.match(r'http[s]?://(?:[a-zA-Z]|[0-9]|[$-_@.&+]|[!*\\(\\),]|(?:%[0-9a-fA-F][0-9a-fA-F]))+', url):\n        return True\n    return False\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 2,
      "score": 10.0,
      "candidate": "import re\n\n\ndef is_valid_url(url):\n    regex = re.compile(\n        r'^(?:http|ftp)s?://'\n        r'(?:(?:[A-Z0-9](?:[A-Z0-9-]{0,61}[A-Z0-9])?\\.)+(?:[A-Z]{2,6}\\.?|[A-Z0-9-]{2,}\\.?)|'\n        r'localhost|'\n        r'\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3})'\n        r'(?::\\d+)?'\n        r'(?:/?|[/?]\\S+)$', re.IGNORECASE)\n    return re.match(regex, url) is not None\n\n\nif __name__ == '__main__':\n    print(is_valid_url('http://google.com'))\n    print(is_valid_url('http://google.com/'))\n    print(is_valid_url('http://google.com/search?q=testing'))\n    print(is_valid_url('https://www.google.com'))\n    print(is_valid_url('https://www.google.com/'))\n    print(is_valid_url('https://www.google.com/search?q=testing'))"
    },
    {
      "rank": 3,
      "score": 10.0,
      "candidate": "import re\n\n\ndef is_url_valid(url):\n    \"\"\"\n    Function to check if a url is valid or not\n    >>> is_url_valid(\"www.google.com\")\n    False\n    >>> is_url_valid(\"http://www.google.com\")\n    True\n    >>> is_url_valid(\"https://www.google.com\")\n    True\n    \"\"\"\n    pattern = re.compile(r\"(http|https)://(www\\.)?\\w+\\.\\w+\")\n    return pattern.search(url) is not None\n\n\nif __name__ == \"__main__\":\n    from doctest import testmod\n\n    testmod()"
    },
    {
      "rank": 4,
      "score": 10.0,
      "candidate": "import re\n\n\ndef is_url_valid(url: str) -> bool:\n    \"\"\"\n    >>> is_url_valid(\"https://www.google.com\")\n    True\n    >>> is_url_valid(\"www.google.com\")\n    False\n    >>> is_url_valid(\"google.com\")\n    False\n    \"\"\"\n    regex = re.compile(\n        r\"^(?:http(s)?:\\/\\/)?[\\w.-]+(?:\\.[\\w\\.-]+)+[\\w\\-\\._~:/?#[\\]@!\\$&'\\(\\)\\*\\+,;=.]+$\",\n    )\n    return bool(regex.match(url))\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 5,
      "score": 10.0,
      "candidate": "import re\n\n\ndef is_valid_url(url):\n    \"\"\"Checks if a url is valid or not using regex.\n\n    Args:\n        url (str): The url to check.\n\n    Returns:\n        bool: True if url is valid, False otherwise.\n    \"\"\"\n    regex = r\"(?i)\\b((?:https?://|www\\d{0,3}[.]|[a-z0-9.\\-]+[.][a-z]{2,4}/)(?:[^\\s()<>]+|\\(([^\\s()<>]+|(\\([^\\s()<>]+\\)))*\\))+(?:\\(([^\\s()<>]+|(\\([^\\s()<>]+\\)))*\\)|[^\\s`!()\\[\\]{};:'\\\".,<>?\u00ab\u00bb\u201c\u201d\u2018\u2019]))\"\n    return re.match(regex, url)"
    },
    {
      "rank": 6,
      "score": 10.0,
      "candidate": "import re\n\n\ndef url_validator(url):\n    \"\"\"\n    This function checks if a url is valid or not\n    >>> url_validator(\"https://www.google.com\")\n    True\n    >>> url_validator(\"https://www.google\")\n    False\n    \"\"\"\n    regex = \"^(https?:\\/\\/)?([\\da-z\\.-]+)\\.([a-z\\.]{2,6})([\\/\\w \\.-]*)*\\/?$\"\n    url_regex = re.compile(regex)\n    return url_regex.match(url)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 7,
      "score": 10.0,
      "candidate": "import re\n\n\ndef url_validation(url: str) -> bool:\n    \"\"\"\n    >>> url_validation(\"https://www.google.com\")\n    True\n    >>> url_validation(\"www.google.com\")\n    False\n    >>> url_validation(\"https://www.google\")\n    False\n    \"\"\"\n    regex = re.compile(\n        r\"^(?:http|ftp)s?://\"  # http:// or https://\n        r\"(?:(?:[A-Z0-9](?:[A-Z0-9-]{0,61}[A-Z0-9])?\\.)+(?:[A-Z]{2,6}\\.?|[A-Z0-9-]{2,}\\.?)|\"  # domain...\n        r\"localhost|\"  # localhost...\n        r\"\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3})\"  # ...or ip\n        r\"(?::\\d+)?\"  # optional port\n        r\"(?:/?|[/?]\\S+)$\",\n        re.IGNORECASE,\n    )\n    if re.match(regex, url):\n        return True\n    return False\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 8,
      "score": 9.370583536698913,
      "candidate": "def url_validation(url):\n    return bool(\n        re.match(\n            r'^(?:http(s)?:\\/\\/)?[\\w.-]+(?:\\.[\\w\\.-]+)+[\\w\\-\\._~:/?#[\\]@!\\$&'\\\n            r'\\(\\)\\*\\+,;=.]+$',\n            url\n        )\n    )\n\n\nif __name__ == '__main__':\n    print(url_validation('http://www.google.com'))\n    print(url_validation('http://www.google.com/'))\n    print(url_validation('http://www.google.com/name'))\n    print(url_validation('http://www.google.com/name/'))\n    print(url_validation('http://www.google.com/name/name'))\n    print(url_validation('http://www.google.com/name/name/'))\n    print(url_validation('http://www.google.com/name/name/name'))\n    print(url_validation('http://www.google.com/name/name/name/'))\n    print(url_validation('http://www.google.com/name/name/name/name'))\n    print(url_validation('http://www.google.com/name/name/name/name/'))\n    print(url_validation('http://www.google.com/name/name/name/name/name'))\n    print(url_validation('http://www.google.com/name/name/name/name/name/'))\n    print(url_validation('http://www.google.com/name/name/name/name/name/name'))\n    print(url_validation('http://www.google.com/name/name/name/name/name/name/'))\n    print(url_validation('http://www.google.com/name/name/name/name/name/name/name'))\n    print(url_validation('http://www.google.com/name/name/name/name/name/name/name/'))\n    print(url_validation('http://www.google.com/name/name/name/name/name/name/name/name'))\n    print("
    },
    {
      "rank": 9,
      "score": 9.234050852198141,
      "candidate": "import re\n\n\ndef url_validation(url):\n    regex = r\"^(?:http(s)?:\\/\\/)?[\\w.-]+(?:\\.[\\w\\.-]+)+[\\w\\-\\._~:/?#[\\]@!\\$&'\\(\\)\\*\\+,;=.]+$\"\n    return True if re.search(regex, url) else False\n\n\nif __name__ == \"__main__\":\n    assert url_validation(\"https://www.google.com\") == True\n    assert url_validation(\"https://www.google\") == False\n    assert url_validation(\"https://www.google.\") == False\n    assert url_validation(\"http://www.google.com\") == True\n    assert url_validation(\"http://www.google\") == True\n    assert url_validation(\"http://www.google.\") == True\n    assert url_validation(\"www.google.com\") == False\n    assert url_validation(\"www.google\") == False\n    assert url_validation(\"www.google.\") == False\n    assert url_validation(\"google.com\") == False\n    assert url_validation(\"google\") == False\n    assert url_validation(\"google.\") == False\n    assert url_validation(\"https://www.google..com\") == False\n    assert url_validation(\"https://www.google..com\") == False\n    assert url_validation(\"https://www.google..com\") == False"
    },
    {
      "rank": 10,
      "score": 9.226766272351448,
      "candidate": "import re\n\n\ndef is_valid_url(url):\n    regex = re.compile(\n        r'^(?:http|ftp)s?://'\n        r'(?:(?:[A-Z0-9](?:[A-Z0-9-]{0,61}[A-Z0-9])?\\.)+(?:[A-Z]{2,6}\\.?|[A-Z0-9-]{2,}\\.?)|'\n        r'localhost|'\n        r'\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3})'\n        r'(?::\\d+)?'\n        r'(?:/?|[/?]\\S+)$', re.IGNORECASE)\n\n    return re.match(regex, url) is not None\n\n\nif __name__ == '__main__':\n    print(is_valid_url(\"https://www.google.com\"))\n    print(is_valid_url(\"http://www.google.com\"))\n    print(is_valid_url(\"https://www.google.com/abcd\"))\n    print(is_valid_url(\"https://www.google.com/abcd/\"))\n    print(is_valid_url(\"https://www.google.com/abcd/xyz\"))\n    print(is_valid_url(\"https://www.google.com/abcd/xyz/\"))\n    print(is_valid_url(\"https://www.google.com/abcd/xyz/1234\"))\n    print(is_valid_url(\"https://www.google.com/abcd/xyz/1234/\"))\n    print(is_valid_url(\"https://www.google.com/abcd/xyz/1234/efgh\"))\n    print(is_valid_url(\"https://www.google.com/abcd/xyz/1234/efgh/\"))\n    print(is_valid_url(\"https://www.google.com/abcd/xyz/1234/efgh/ijkl\"))\n    print(is_valid_url(\"https://www.google.com/abcd/xyz/1"
    },
    {
      "rank": 11,
      "score": 9.21346272767743,
      "candidate": "import re\n\ndef is_valid_url(url):\n    return bool(re.search(r'^https?://.+/.+$', url))\n\nprint(is_valid_url('http://www.google.com'))\nprint(is_valid_url('http://google.com'))\nprint(is_valid_url('google.com'))\n\n\n\"\"\"\nregex = r'^https?://.+/.+$'\n\n1. ^ : Start of the string\n2. https? : http or https\n3. : // : two slashes\n4. .+ : one or more of any character\n5. / : a slash\n6. .+ : one or more of any character\n7. $ : End of the string\n\"\"\""
    },
    {
      "rank": 12,
      "score": 9.205959372648458,
      "candidate": "import re\n\n\ndef valid_url(url):\n    regex = r\"(http:\\/\\/www\\.|https:\\/\\/www\\.|http:\\/\\/|https:\\/\\/)?[a-z0-9]+([\\-\\.]{1}[a-z0-9]+)*\\.[a-z]{2,5}(:[0-9]{1,5})?(\\/.*)?\"\n    return re.search(regex, url)\n\n\nif __name__ == \"__main__\":\n    print(valid_url(\"http://www.google.com\"))\n    print(valid_url(\"http://google.com\"))\n    print(valid_url(\"google.com\"))\n    print(valid_url(\"http://google\"))\n    print(valid_url(\"http://google:1234\"))\n    print(valid_url(\"http://google.com/foo\"))\n    print(valid_url(\"http://google.com/foo/bar\"))\n    print(valid_url(\"http://google.com/foo/bar/\"))\n    print(valid_url(\"http://google.com/foo/bar/foobar\"))\n    print(valid_url(\"http://google.com/foo/bar/foobar/\"))\n    print(valid_url(\"https://google.com\"))\n    print(valid_url(\"https://google.com/foo\"))\n    print(valid_url(\"https://google.com/foo/bar\"))\n    print(valid_url(\"https://google.com/foo/bar/\"))\n    print(valid_url(\"https://google.com/foo/bar/foobar\"))\n    print(valid_url(\"https://google.com/foo/bar/foobar/\"))\n    print(valid_url(\"http://google.com/foo/bar/foobar/foobar\"))"
    },
    {
      "rank": 13,
      "score": 9.177268828905222,
      "candidate": "import re\n\ndef is_valid_url(url):\n    pattern = r'^https?:\\/\\/(www\\.)?[-a-zA-Z0-9@:%._\\+~#=]{1,256}\\.[a-zA-Z0-9()]{1,6}\\b([-a-zA-Z0-9()@:%_\\+.~#?&//=]*)$'\n    return True if re.match(pattern, url) else False\n\nprint(is_valid_url(\"https://www.google.com\"))\nprint(is_valid_url(\"https://www.google.com/about\"))\nprint(is_valid_url(\"https://www.google.com/about/\"))\nprint(is_valid_url(\"https://www.google.com/about/?page=2\"))\nprint(is_valid_url(\"https://www.google.com/about/test/?page=2\"))\nprint(is_valid_url(\"https://www.google.com/about/test/?page=2&user=2\"))\nprint(is_valid_url(\"https://www.google.com/about/test/?page=2&user=2&\"))\nprint(is_valid_url(\"https://www.google.com/about/test/?page=2&user=2&test=2\"))\nprint(is_valid_url(\"https://www.google.com/about/test/?page=2&user=2&test=2&\"))\nprint(is_valid_url(\"https://www.google.com/about/test/?page=2&user=2&test=2&test2=2\"))\nprint(is_valid_url(\"https://www.google.com/about/test/?page=2&user=2&test=2&test2=2&\"))\nprint(is_valid_url(\"https://www.google.com/about/test/?page=2&user=2&test=2&test2=2&test3=2\"))\nprint(is_valid_url(\"https://www.google.com/about/test/?page=2&user=2&test=2&test2=2&test3=2&\"))\nprint(is_valid_url"
    },
    {
      "rank": 14,
      "score": 9.122564458729856,
      "candidate": "import re\n\n\ndef is_valid_url(url):\n    pattern = r\"https?:\\/\\/(www\\.)?[-a-zA-Z0-9@:%._\\+~#=]{1,256}\\.[a-zA-Z0-9()]{1,6}\\b([-a-zA-Z0-9()@:%_\\+.~#?&//=]*)\"\n    return True if re.match(pattern, url) else False\n\n\nif __name__ == \"__main__\":\n    assert is_valid_url(\"http://www.example.com\") is True\n    assert is_valid_url(\"https://www.example.com\") is True\n    assert is_valid_url(\"https://www.example.com/hello/world\") is True\n    assert is_valid_url(\"www.example.com\") is False\n    assert is_valid_url(\"http://www.example.com/hello/world?id=1\") is True\n    assert is_valid_url(\"http://www.example.com/hello/world?id=1&name=john\") is True\n    assert is_valid_url(\"https://www.example.com/hello/world?id=1&name=john\") is True\n    assert is_valid_url(\"https://www.example.com/hello/world?id=1&name=john&age=20\") is True\n    assert is_valid_url(\"https://www.example.com/hello/world?id=1&name=john&age=20&dob=1990-01-01\") is True"
    },
    {
      "rank": 15,
      "score": 8.973005557553902,
      "candidate": "import re\n\ndef is_url_valid(url):\n    url_regex = r\"(http(s)?:\\/\\/.)?(www\\.)?[-a-zA-Z0-9@:%._\\+~#=]{2,256}\\.[a-z]{2,6}\\b([-a-zA-Z0-9@:%_\\+.~#?&//=]*)\"\n    if re.match(url_regex, url):\n        return True\n    else:\n        return False\n\nprint(is_url_valid('https://www.google.com'))\nprint(is_url_valid('https://www.google.com/'))\nprint(is_url_valid('https://www.google.com'))\nprint(is_url_valid('https://www.google.com/'))\nprint(is_url_valid('http://www.google.com'))\nprint(is_url_valid('http://www.google.com/'))\nprint(is_url_valid('https://www.google.com'))\nprint(is_url_valid('https://www.google.com/'))\nprint(is_url_valid('https://www.google.com'))\nprint(is_url_valid('https://www.google.com/'))\nprint(is_url_valid('https://www.google.com'))\nprint(is_url_valid('https://www.google.com/'))\nprint(is_url_valid('https://www.google.com'))\nprint(is_url_valid('https://www.google.com/'))\nprint(is_url_valid('https://www.google.com'))\nprint(is_url_valid('https://www.google.com/'))\nprint(is_url_valid('https://www.google.com'))\nprint(is_url_valid('https://www.google.com/'))\nprint(is_url_valid('https://www.google.com'))\nprint(is_url_valid('https://www.google.com/'))\nprint(is_url_valid('https://www.google.com'))\nprint(is_url_valid('https://www.google.com/'))\nprint(is_url_valid('https"
    },
    {
      "rank": 16,
      "score": 8.95994420569242,
      "candidate": "import re\n\ndef valid_url(url):\n\t\"\"\"\n\tThis function takes a url as input and returns True or False\n\t\"\"\"\n\tregex = r\"((http|https)://)(www.)?\" + \"[a-zA-Z0-9@:%._\\+~#?&//=]\" + \"[^\\s,]+\"\n\tmatch = re.match(regex, url)\n\tif match:\n\t\treturn True\n\telse:\n\t\treturn False\n\n\nif __name__ == '__main__':\n\turl = input(\"Enter the url to check: \")\n\tif valid_url(url):\n\t\tprint(\"Valid url\")\n\telse:\n\t\tprint(\"Invalid url\")"
    },
    {
      "rank": 17,
      "score": 8.946210893390457,
      "candidate": "import re\n\n\ndef is_url_valid(url):\n    \"\"\"\n    Return True if url is valid, else return False.\n    \"\"\"\n    # Regex from https://mathiasbynens.be/demo/url-regex\n    regex = r\"^(?:http(s)?:\\/\\/)?[\\w.-]+(?:\\.[\\w\\.-]+)+[\\w\\-\\._~:/?#[\\]@!\\$&'\\(\\)\\*\\+,;=.]+$\"\n    pattern = re.compile(regex)\n    if pattern.match(url):\n        return True\n    return False\n\n\nif __name__ == \"__main__\":\n    assert is_url_valid(\"http://mathiasbynens.be/demo\") is True\n    assert is_url_valid(\"http://mathiasbynens.be/\") is True\n    assert is_url_valid(\"http://www.xkcd.com/353/\") is True\n    assert is_url_valid(\"http://\" + (\"w\" * 208) + \".com\") is True\n    assert is_url_valid(\"http://\" + (\"w\" * 209) + \".com\") is False\n    assert is_url_valid(\"\") is False\n    assert is_url_valid(\"http://foo.bar.not-valid\") is False"
    },
    {
      "rank": 18,
      "score": 8.932217008005624,
      "candidate": "import re\n\n\ndef is_valid_url(url):\n    regex = r\"http[s]?://(?:[a-zA-Z]|[0-9]|[$-_@.&+]|[!*\\(\\),]|(?:%[0-9a-fA-F][0-9a-fA-F]))+\"\n    # Check if url matches with the regex\n    return bool(re.search(regex, url))\n\n\nif __name__ == \"__main__\":\n    print(is_valid_url(\"https://www.google.com\"))\n    print(is_valid_url(\"https://www.google\"))\n    print(is_valid_url(\"http://www.google.com\"))\n    print(is_valid_url(\"www.google.com\"))\n    print(is_valid_url(\"http://www.google\"))\n    print(is_valid_url(\"https://www.google.co.in/search?q=is+valid+url+or+not+in+python&oq=is+valid+url+or+not+in+python&aqs=chrome..69i57.3627j0j7&sourceid=chrome&ie=UTF-8\"))"
    },
    {
      "rank": 19,
      "score": 8.910084504002544,
      "candidate": "import re\n\n\ndef url_validator(url):\n    regex = r'^(?:http(s)?:\\/\\/)?[\\w.-]+(?:\\.[\\w\\.-]+)+[\\w\\-\\._~:/?#[\\]@!\\$&'\\\n            r'\\(\\)\\*\\+,;=.]+$'\n    return True if re.search(regex, url) else False\n\n\nif __name__ == '__main__':\n    urls = [\n        'http://www.google.com',\n        'http://google.com',\n        'http://google.com/',\n        'http://www.google.com/',\n        'http://google',\n        'http://www.google',\n        'http://www.google.',\n        'http://www.google.co',\n        'http://www.google.com/q=search+string',\n        'http://www.google.com/?q=search+string',\n        'http://www.google.com/search?q=query+string+with+number+123+in+it',\n        'http://www.google.com/search?q=query+string+with+special+character#',\n        'http://www.google.com/search?q=query+string+with+special+character&',\n        'http://www.google.com/search?q=query+string+with+special+character*',\n        'http://www.google.com/search?q=query+string+with+special+character^',\n        'http://www.google.com/search?q=query+string+with+special+character%',\n        'http://www.google.com/search?q=query+string+with+special+character$',\n        'http://www.google.com/search?q=query+string+with+special+character+|',\n        'http://www.google.com/search?q=query+string+with+special+character[',\n        'http://www.google.com/search?q=query+string+with+special+character]',\n        'http://www.google.com/search?q=query+string+with+special+character{',"
    },
    {
      "rank": 20,
      "score": 8.85571690049604,
      "candidate": "import re\n\n\ndef is_valid_url(url):\n    return bool(re.search(r'http[s]?://(?:[a-zA-Z]|[0-9]|[$-_@.&+]|[!*\\(\\),]|(?:%[0-9a-fA-F][0-9a-fA-F]))+', url))\n\n\nif __name__ == '__main__':\n    print(is_valid_url(\"http://google.com\"))\n    print(is_valid_url(\"http://google.com/\"))\n    print(is_valid_url(\"http://google.com/a\"))\n    print(is_valid_url(\"http://google.com/a/\"))\n    print(is_valid_url(\"http://google.com/a/b\"))\n    print(is_valid_url(\"http://google.com/a/b/\"))\n    print(is_valid_url(\"http://google.com/a/b/c\"))\n    print(is_valid_url(\"http://google.com/a/b/c/\"))\n    print(is_valid_url(\"http://google.com/a/b/c/d\"))\n    print(is_valid_url(\"http://google.com/a/b/c/d/\"))\n    print(is_valid_url(\"http://google.com/a/b/c/d/e\"))\n    print(is_valid_url(\"http://google.com/a/b/c/d/e/\"))\n    print(is_valid_url(\"http://google.com/a/b/c/d/e/f\"))\n    print(is_valid_url(\"http://google.com/a/b/c/d/e/f/\"))\n    print(is_valid_url(\"http://google.com/a/b/c/d/e/f/g\"))\n    print(is_valid_url(\"http://google.com/a/b/c/d/e/f/g/\"))\n    print(is_valid_url(\"http://google.com/a/b/c/d/e/f/g/h\"))"
    },
    {
      "rank": 21,
      "score": 8.850707355641543,
      "candidate": "import re\n\ndef is_valid_url(url):\n    \"\"\"\n    Checks if a url is valid or not using regex.\n    \"\"\"\n    regex = re.compile(\n        r'^(?:http|ftp)s?://' # http:// or https://\n        r'(?:(?:[A-Z0-9](?:[A-Z0-9-]{0,61}[A-Z0-9])?\\.)+(?:[A-Z]{2,6}\\.?|[A-Z0-9-]{2,}\\.?)|' #domain...\n        r'localhost|' #localhost...\n        r'\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3})' # ...or ip\n        r'(?::\\d+)?' # optional port\n        r'(?:/?|[/?]\\S+)$', re.IGNORECASE)\n\n    return regex.match(url)"
    },
    {
      "rank": 22,
      "score": 8.8281618090209,
      "candidate": "import re\n\n\ndef is_valid_url(url):\n    regex = re.compile(\n        r'^(?:http|ftp)s?://'\n        r'(?:(?:[A-Z0-9](?:[A-Z0-9-]{0,61}[A-Z0-9])?\\.)+(?:[A-Z]{2,6}\\.?|[A-Z0-9-]{2,}\\.?)|'\n        r'\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3})'\n        r'(?::\\d+)?'\n        r'(?:/?|[/?]\\S+)$', re.IGNORECASE)\n    return re.match(regex, url) is not None\n\n\nif __name__ == '__main__':\n    print(is_valid_url(\"http://www.google.com\"))\n    print(is_valid_url(\"https://github.com/\"))\n    print(is_valid_url(\"https://github.com/a\"))"
    },
    {
      "rank": 23,
      "score": 8.81367773444215,
      "candidate": "import re\n\n\ndef is_url_valid(url):\n    url_regex = re.compile(\n        r'^(?:http)s?://'\n        r'(?:(?:[A-Z0-9](?:[A-Z0-9-]{0,61}[A-Z0-9])?\\.)+(?:[A-Z]{2,6}\\.?|[A-Z0-9-]{2,}\\.?)|'\n        r'\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3})'\n        r'(?::\\d+)?'\n        r'(?:/?|[/?]\\S+)$', re.IGNORECASE)\n    return bool(url_regex.match(url))\n\n\nif __name__ == '__main__':\n    print(is_url_valid(\"https://www.google.com/\"))\n    print(is_url_valid(\"https://www.google.com\"))\n    print(is_url_valid(\"https://www.google\"))\n    print(is_url_valid(\"https://www.google.com/abcd\"))\n    print(is_url_valid(\"https://www.google.com/abcd/\"))\n    print(is_url_valid(\"https://www.google.com/abcd/efgh\"))\n    print(is_url_valid(\"https://www.google.com/abcd/efgh/\"))\n    print(is_url_valid(\"https://www.google.com/abcd/efgh/ijkl\"))\n    print(is_url_valid(\"https://www.google.com/abcd/efgh/ijkl/\"))"
    },
    {
      "rank": 24,
      "score": 8.76828871349479,
      "candidate": "def is_valid_url(url):\n    regex = r'^(?:http(s)?:\\/\\/)?[\\w.-]+(?:\\.[\\w\\.-]+)+[\\w\\-\\._~:/?#[\\]@!\\$&\\'\\(\\)\\*\\+,;=.]+$'\n    if re.match(regex, url):\n        return True\n    else:\n        return False\n\n\nprint(is_valid_url(\"http://www.google.com\"))\nprint(is_valid_url(\"http://www.google\"))\nprint(is_valid_url(\"www.google.com\"))\nprint(is_valid_url(\"http://www.google.co\"))\nprint(is_valid_url(\"http://www.google.com/foo/bar\"))\nprint(is_valid_url(\"http://www.google.com/foo/bar/baz\"))\nprint(is_valid_url(\"http://www.google.com/foo/bar/baz/\"))\nprint(is_valid_url(\"http://www.google.com/foo/bar/baz/123\"))\nprint(is_valid_url(\"http://www.google.com/foo/bar/baz/123/\"))\nprint(is_valid_url(\"http://www.google.com/foo/bar/baz/123/abc\"))\nprint(is_valid_url(\"http://www.google.com/foo/bar/baz/123/abc/\"))\nprint(is_valid_url(\"http://www.google.com/foo/bar/baz/123/abc/def\"))\nprint(is_valid_url(\"http://www.google.com/foo/bar/baz/123/abc/def/\"))\nprint(is_valid_url(\"http://www.google.com/foo/bar/baz/123/abc/def/ghi\"))\nprint(is_valid_url(\"http://www.google.com/foo/bar/baz/123/abc/def/ghi/\"))\nprint(is_valid_url(\"http://www.google.com/foo/bar/baz/123/abc/def/ghi/jkl\"))\nprint(is_"
    },
    {
      "rank": 25,
      "score": 8.750282588864879,
      "candidate": "import re\n\n\ndef is_valid_url(url):\n    regex = re.compile(\n        r'^(?:http|ftp)s?://'\n        r'(?:(?:[A-Z0-9](?:[A-Z0-9-]{0,61}[A-Z0-9])?\\.)+(?:[A-Z]{2,6}\\.?|[A-Z0-9-]{2,}\\.?)|'\n        r'localhost|'\n        r'\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3})'\n        r'(?::\\d+)?'\n        r'(?:/?|[/?]\\S+)$', re.IGNORECASE)\n\n    if regex.search(url):\n        return True\n    return False\n\n\nif __name__ == '__main__':\n    print(is_valid_url('http://www.google.com'))\n    print(is_valid_url('http://www.google'))\n    print(is_valid_url('www.google'))\n    print(is_valid_url('http://www.google.com/about'))"
    },
    {
      "rank": 26,
      "score": 8.715724466237427,
      "candidate": "import re\n\n\ndef valid_url(url):\n    pattern = re.compile(\n        r'^(?:http|ftp)s?://'  # http:// or https://\n        r'(?:(?:[A-Z0-9](?:[A-Z0-9-]{0,61}[A-Z0-9])?\\.)+(?:[A-Z]{2,6}\\.?|[A-Z0-9-]{2,}\\.?)|'  # domain...\n        r'localhost|'  # localhost...\n        r'\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3})'  # ...or ip\n        r'(?::\\d+)?'  # optional port\n        r'(?:/?|[/?]\\S+)$', re.IGNORECASE)\n    return pattern.match(url)\n\n\nif __name__ == '__main__':\n    assert valid_url(\"http://google.com\")\n    assert valid_url(\"http://google.com/\")\n    assert valid_url(\"http://google.com/abcd\")\n    assert valid_url(\"http://google.com/abcd/\")\n    assert valid_url(\"http://google.com/abcd/1234\")\n    assert valid_url(\"http://google.com/abcd/1234/\")\n    assert valid_url(\"http://localhost:8080/abcd/1234/\")\n    assert valid_url(\"https://www.google.com/\")\n    assert not valid_url(\"google.com\")\n    assert not valid_url(\"http://google.com/abcd#\")\n    assert not valid_url(\"http://google.com/abcd#1234\")\n    assert not valid_url(\"http://google.com/abcd#1234/\")\n    assert not valid_url(\"http://google.com/abcd#1234/1234\")\n    assert not valid_url(\"http://google.com/abcd#1234/1234/\")\n    assert not valid_url(\"http://google.com/"
    },
    {
      "rank": 27,
      "score": 8.692801520950061,
      "candidate": "import re\n\ndef is_valid_url(url):\n    regex = re.compile(\n        r'^(?:http|ftp)s?://' # http:// or https://\n        r'(?:(?:[A-Z0-9](?:[A-Z0-9-]{0,61}[A-Z0-9])?\\.)+(?:[A-Z]{2,6}\\.?|[A-Z0-9-]{2,}\\.?)|' #domain...\n        r'localhost|' #localhost...\n        r'\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3})' # ...or ip\n        r'(?::\\d+)?' # optional port\n        r'(?:/?|[/?]\\S+)$', re.IGNORECASE)\n    return re.match(regex, url) is not None\n\n\nif __name__ == '__main__':\n    print(is_valid_url(\"http://www.google.com\")) # True\n    print(is_valid_url(\"http://google.com\")) # True\n    print(is_valid_url(\"http://google.com/\")) # True\n    print(is_valid_url(\"http://google.com/a\")) # True\n    print(is_valid_url(\"http://google.com/a/\")) # True\n    print(is_valid_url(\"http://google.com/a/b\")) # True\n    print(is_valid_url(\"http://google.com/a/b/\")) # True\n    print(is_valid_url(\"http://google.com/a/b/c\")) # True\n    print(is_valid_url(\"http://google.com/a/b/c/\")) # True\n    print(is_valid_url(\"http://google.com/a/b/c/d\")) # True\n    print(is_valid_url(\"http://google.com/a/b/c/d/\")) # True\n    print(is_valid_url(\"http://google.com/a/b/c/d/e\")) # True\n    print(is_valid_url(\"http://google."
    },
    {
      "rank": 28,
      "score": 8.632293453617281,
      "candidate": "import re\n\n\ndef is_valid_url(url):\n    pattern = re.compile(\n        r'^(?:http|ftp)s?://'  # http:// or https://\n        r'(?:(?:[A-Z0-9](?:[A-Z0-9-]{0,61}[A-Z0-9])?\\.)+(?:[A-Z]{2,6}\\.?|[A-Z0-9-]{2,}\\.?)|'  # domain...\n        r'localhost|'  # localhost...\n        r'\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3})'  # ...or ip\n        r'(?::\\d+)?'  # optional port\n        r'(?:/?|[/?]\\S+)$', re.IGNORECASE)\n    return pattern.match(url)\n\n\nif __name__ == '__main__':\n    print(is_valid_url(\"http://google.com\"))\n    print(is_valid_url(\"http://google.com/\"))\n    print(is_valid_url(\"http://google.com/a\"))\n    print(is_valid_url(\"http://google.com/a/\"))\n    print(is_valid_url(\"http://google.com/a/b/c\"))\n    print(is_valid_url(\"http://google.com/a/b/c/\"))\n    print(is_valid_url(\"http://google.com/a/b/c/d\"))\n    print(is_valid_url(\"http://google.com/a/b/c/d/\"))\n    print(is_valid_url(\"https://google.com\"))\n    print(is_valid_url(\"https://google.com/\"))\n    print(is_valid_url(\"https://google.com/a\"))\n    print(is_valid_url(\"https://google.com/a/\"))\n    print(is_valid_url(\"https://google.com/a/b/c\"))\n    print(is_valid_url(\"https://google.com/a/b/c/\"))\n    print(is_valid"
    },
    {
      "rank": 29,
      "score": 8.625262456968262,
      "candidate": "import re\n\n\ndef is_valid_url(url):\n    regex = r\"(http(s)?:\\/\\/.)?(www\\.)?[-a-zA-Z0-9@:%._\\+~#=]{2,256}\\.[a-z]{2,6}\\b([-a-zA-Z0-9@:%_\\+.~#?&//=]*)\"\n    regex_match = re.match(regex, url)\n    if regex_match:\n        return True\n    return False\n\n\nif __name__ == \"__main__\":\n    print(is_valid_url(\"https://github.com/\"))\n    print(is_valid_url(\"https://www.github.com/\"))\n    print(is_valid_url(\"https://www.github.com/s\"))"
    },
    {
      "rank": 30,
      "score": 8.625142247198651,
      "candidate": "import re\n\n\ndef url_validation(url):\n    \"\"\"\n    Function to check if a url is valid or not using regex.\n    \"\"\"\n    regex = '^(http:\\/\\/www\\.|https:\\/\\/www\\.|http:\\/\\/|https:\\/\\/)?[a-z0-9]+([\\-\\.]{1}[a-z0-9]+)*\\.[a-z]{2,5}(:[0-9]{1,5})?(\\/.*)?$'\n    if re.match(regex, url):\n        return True\n    return False\n\n\nif __name__ == '__main__':\n    print(url_validation('https://github.com/The-Javavians'))\n    print(url_validation('https://github.com/The-Javavians/'))\n    print(url_validation('http://github.com/The-Javavians'))\n    print(url_validation('https://github.com/The-Javavians/The-Javavians'))\n    print(url_validation('https://github.com/The-Javavians/The-Javavians/'))\n    print(url_validation('https://github.com/The-Javavians/The-Javavians/The-Javavians'))"
    },
    {
      "rank": 31,
      "score": 8.616253589228675,
      "candidate": "import re\n\n\ndef is_valid(url: str) -> bool:\n    pattern = re.compile(\n        r\"^(?:http(s)?:\\/\\/)?[\\w.-]+(?:\\.[\\w\\.-]+)+[\\w\\-\\._~:/?#[\\]@!\\$&'\\(\\)\\*\\+,;=.]+$\"\n    )\n    return bool(pattern.match(url))\n\n\nif __name__ == \"__main__\":\n    assert is_valid(\"http://test.com\") is True\n    assert is_valid(\"http://test\") is False\n    assert is_valid(\"http://test.com/\") is True\n    assert is_valid(\"http://test.com/test\") is True\n    assert is_valid(\"http://test.com/test/\") is True\n    assert is_valid(\"http://test.com/test/test\") is True\n    assert is_valid(\"https://test.com/\") is True\n    assert is_valid(\"https://test.com\") is True\n    assert is_valid(\"https://test.com/test\") is True\n    assert is_valid(\"https://test.com/test/\") is True\n    assert is_valid(\"https://test.com/test/test\") is True"
    },
    {
      "rank": 32,
      "score": 8.610076160146226,
      "candidate": "import re\n\ndef check_url(url):\n    if re.match(r'^http[s]?://(?:[a-zA-Z]|[0-9]|[$-_@.&+]|[!*\\(\\),]|(?:%[0-9a-fA-F][0-9a-fA-F]))+$', url):\n        return True\n    else:\n        return False\n\nprint(check_url(\"http://www.google.com\"))\nprint(check_url(\"http://www.google.com/\"))\nprint(check_url(\"http://www.google.com/search\"))\nprint(check_url(\"http://www.google.com/search/\"))\nprint(check_url(\"http://www.google.com/search/?q=testing\"))\nprint(check_url(\"http://www.google.com/search/?q=testing/\"))\nprint(check_url(\"http://www.google.com/search/?q=testing#fragment\"))\nprint(check_url(\"http://www.google.com/search/?q=testing#fragment/\"))\nprint(check_url(\"http://www.google.com/search/?q=testing#fragment/extra\"))\nprint(check_url(\"http://www.google.com/search/?q=testing#fragment/extra/\"))\nprint(check_url(\"http://www.google.com/search/?q=testing#fragment/extra/extra\"))\nprint(check_url(\"http://www.google.com/search/?q=testing#fragment/extra/extra/\"))\nprint(check_url(\"http://www.google.com/search/?q=testing#fragment/extra/extra/extra\"))\nprint(check_url(\"http://www.google.com/search/?q=testing#fragment/extra/extra/extra/\"))\nprint(check_url(\"http://www.google.com/search/?q=testing#fragment/extra/extra/extra/extra\"))\nprint(check_url(\"http://www.google.com/search/?q=testing#fragment/extra/extra/extra/extra/\"))\nprint(check_url(\"http://www.google.com/search/?q=testing#fragment/extra/extra/extra/extra"
    },
    {
      "rank": 33,
      "score": 8.606486429141842,
      "candidate": "import re\n\ndef is_valid_url(url):\n    regex = re.compile(\n        r'^(?:http|ftp)s?://'  # http:// or https://\n        r'(?:(?:[A-Z0-9](?:[A-Z0-9-]{0,61}[A-Z0-9])?\\.)+(?:[A-Z]{2,6}\\.?|[A-Z0-9-]{2,}\\.?)|'  # domain...\n        r'localhost|'  # localhost...\n        r'\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3})'  # ...or ip\n        r'(?::\\d+)?'  # optional port\n        r'(?:/?|[/?]\\S+)$', re.IGNORECASE)\n    return re.match(regex, url) is not None\n\nprint(is_valid_url(\"https://www.youtube.com/watch?v=35tA-S86E6Y&t=24s\"))\nprint(is_valid_url(\"https://www.youtube.com/watch?v=35tA-S86E6Y&t=24s&foo=bar\"))\nprint(is_valid_url(\"https://www.youtube.com/watch?v=35tA-S86E6Y&t=24s&foo=bar\"))\nprint(is_valid_url(\"https://www.youtube.com/watch?v=35tA-S86E6Y&t=24s&foo=bar&foo=bar\"))\nprint(is_valid_url(\"https://www.youtube.com/watch?v=35tA-S86E6Y&t=24s&foo=bar&foo=bar\"))\nprint(is_valid_url(\"https://www.youtube.com/watch?v=35tA-S86E6Y&t=24s&foo=bar&foo=bar&foo=bar\"))\nprint(is_valid_url(\"https://www.youtube.com/watch?v=35tA"
    },
    {
      "rank": 34,
      "score": 8.60156811074208,
      "candidate": "import re\n\n# My solution:\n\"\"\"\ndef valid_url(url):\n    regex = r\"^(http:\\/\\/www\\.|https:\\/\\/www\\.|http:\\/\\/|https:\\/\\/)?[a-z0-9]+([\\-\\.]{1}[a-z0-9]+)*\\.[a-z]{2,5}(:[0-9]{1,5})?(\\/.*)?$\"\n    return bool(re.search(regex, url))\n\"\"\"\n\n# Using regex:\ndef valid_url(url):\n    regex = r\"^(http:\\/\\/www\\.|https:\\/\\/www\\.|http:\\/\\/|https:\\/\\/)?[a-z0-9]+([\\-\\.]{1}[a-z0-9]+)*\\.[a-z]{2,5}(:[0-9]{1,5})?(\\/.*)?$\"\n    return bool(re.search(regex, url))"
    },
    {
      "rank": 35,
      "score": 8.565425580227462,
      "candidate": "import re\n\ndef is_valid_url(url):\n    if re.match(r'^http[s]?://(?:[a-zA-Z]|[0-9]|[$-_@.&+]|[!*\\(\\),]|(?:%[0-9a-fA-F][0-9a-fA-F]))+$', url):\n        return True\n    return False\n\nassert is_valid_url('http://www.google.com') == True\nassert is_valid_url('https://www.google.com') == True\nassert is_valid_url('https://www.google.com/') == True\nassert is_valid_url('https://www.google.com/test') == True\nassert is_valid_url('http://www.google.com/test?q=test') == True\nassert is_valid_url('http://www.google.com/test/?q=test') == True\nassert is_valid_url('http://www.google.com/test?q=test#frag') == True\nassert is_valid_url('http://www.google.com/test/?q=test#frag') == True\nassert is_valid_url('http://www.google.com/test/?q=test#frag&more') == True\nassert is_valid_url('http://www.google.com/test/?q=test#frag&more=true') == True\nassert is_valid_url('http://www.google.com/test/?q=test#frag&more=true&even=more') == True\nassert is_valid_url('http://www.google.com/test/?q=test#frag&more=true&even=more&still=keep') == True\nassert is_valid_url('http://www.google.com/test/?q=test#frag&more=true&even=more&still=keep&even=more') == True\nassert is_valid_url('http://www.google.com/test/?q=test#frag&more=true&even=more&still=keep&even=more&still=keep') == True\nassert is_valid_url('http://www"
    },
    {
      "rank": 36,
      "score": 8.548876241946822,
      "candidate": "import re\n\ndef is_valid_url(url):\n    regex = r\"(http(s)?://)?(www.)?(([a-zA-Z0-9]+-[a-zA-Z0-9]+-[a-zA-Z0-9]+-[a-zA-Z0-9]+-[a-zA-Z0-9]+|[a-zA-Z]+-[a-zA-Z]+-[a-zA-Z]+-[a-zA-Z]+-[a-zA-Z]+|[a-zA-Z]+-[a-zA-Z]+-[a-zA-Z]+-[a-zA-Z]+|[a-zA-Z]+-[a-zA-Z]+-[a-zA-Z]+|[a-zA-Z]+\\.[a-zA-Z]+-[a-zA-Z]+|[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+-[a-zA-Z]+|[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+-[a-zA-Z]+|[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+\\.[a-zA-Z]+).([a-zA-Z]+))/?([a-zA-Z]+=[a-zA-Z]+(&[a-zA-Z]+=[a-zA-Z]+)*)?(.[a-zA-Z]+)?)\"\n    return re.match(regex, url) is not None\n\nif __name__ == '__main__':\n    urls = ['http://www.google.com', 'http://www.google.co.in/search?q=regex', 'http://www.google', 'www.google', 'http://google.com', 'http://google.co.in/search?q=regex', 'http://google', 'http://www.google.com/search?q=regex', 'http://www.google.com/', 'www.google.com', 'www.google.co.in/search?q=regex', 'www"
    },
    {
      "rank": 37,
      "score": 8.542875062379007,
      "candidate": "import re\n\ndef is_url_valid(url):\n    pattern = r'^(http:\\/\\/www\\.|https:\\/\\/www\\.|http:\\/\\/|https:\\/\\/)?[a-z0-9]+([\\-\\.]{1}[a-z0-9]+)*\\.[a-z]{2,5}(:[0-9]{1,5})?(\\/.*)?$'\n    return bool(re.match(pattern, url))\n\nprint(is_url_valid('https://www.google.com'))\nprint(is_url_valid('https://google.com'))\nprint(is_url_valid('https://google.com/'))\nprint(is_url_valid('https://google.com/about/'))\nprint(is_url_valid('https://google.com/about/me'))\nprint(is_url_valid('https://google.com/about/me/'))\nprint(is_url_valid('https://google.com/about/me/about'))\nprint(is_url_valid('https://google.com/about/me/about/'))\nprint(is_url_valid('https://google.com/about/me/about/me'))\nprint(is_url_valid('https://google.com/about/me/about/me/'))\nprint(is_url_valid('https://google.com/about/me/about/me/about'))\nprint(is_url_valid('https://google.com/about/me/about/me/about/'))\nprint(is_url_valid('https://google.com/about/me/about/me/about/me'))\nprint(is_url_valid('https://google.com/about/me/about/me/about/me/'))\nprint(is_url_valid('https://google.com/about/me/about/me/about/me/about'))\nprint(is_url_valid('https://google.com/about/me/about/me/about/me/about/'))\nprint(is_url_valid('https://google.com/about/me/about/me/about/me/about/me'))\nprint(is_url_valid('https://google."
    },
    {
      "rank": 38,
      "score": 8.53012858503943,
      "candidate": "import re\n\ndef is_valid_url(url):\n    regex = re.compile(\n        r'^(?:http|ftp)s?://' # http:// or https://\n        r'(?:(?:[A-Z0-9](?:[A-Z0-9-]{0,61}[A-Z0-9])?\\.)+(?:[A-Z]{2,6}\\.?|[A-Z0-9-]{2,}\\.?)|' #domain...\n        r'localhost|' #localhost...\n        r'\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3})' # ...or ip\n        r'(?::\\d+)?' # optional port\n        r'(?:/?|[/?]\\S+)$', re.IGNORECASE)\n    return re.match(regex, url) is not None\n\nprint(is_valid_url(\"http://google.com\"))\nprint(is_valid_url(\"http://google.com/\"))\nprint(is_valid_url(\"http://google.com/search\"))\nprint(is_valid_url(\"http://google.com/search/\"))\nprint(is_valid_url(\"http://google.com/search/?q=data%20science\"))\nprint(is_valid_url(\"https://google.com/search/?q=data%20science\"))\nprint(is_valid_url(\"https://google.com/search/?q=data science\"))\nprint(is_valid_url(\"https://google.com/search/?q=data science/\"))\nprint(is_valid_url(\"https://google.com/search/?q=data science/\"))\nprint(is_valid_url(\"https://google.com/search/?q=data science/?\"))\nprint(is_valid_url(\"https://google.com/search/?q=data science/?a=1\"))\nprint(is_valid_url(\"https://google.com/search/?q=data science/?a=1&b=2\"))\nprint(is_valid_url(\"https://google.com/search/?q=data science/?a=1&b=2&c=3\"))"
    },
    {
      "rank": 39,
      "score": 8.499905739299377,
      "candidate": "import re\n\ndef is_url_valid(url):\n    regex = re.compile(\n        r'^(?:http|ftp)s?://'\n        r'(?:(?:[A-Z0-9](?:[A-Z0-9-]{0,61}[A-Z0-9])?\\.)+(?:[A-Z]{2,6}\\.?|[A-Z0-9-]{2,}\\.?)|'\n        r'localhost|'\n        r'\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3})'\n        r'(?::\\d+)?'\n        r'(?:/?|[/?]\\S+)$', re.IGNORECASE)\n    return re.match(regex, url) is not None\n\nprint(is_url_valid(\"http://google.com\"))\nprint(is_url_valid(\"http://google.com/\"))\nprint(is_url_valid(\"http://google.com/8\"))\nprint(is_url_valid(\"http://google.com/asdfasdf\"))\nprint(is_url_valid(\"http://google.com/asdfasdf/\"))\nprint(is_url_valid(\"http://google.com/asdfasdf/asdfasdf\"))\nprint(is_url_valid(\"http://google.com/asdfasdf/asdfasdf/\"))\nprint(is_url_valid(\"http://google.com/asdfasdf/asdfasdf/asdfasdf\"))\nprint(is_url_valid(\"http://google.com/asdfasdf/asdfasdf/asdfasdf/\"))\nprint(is_url_valid(\"http://google.com/asdfasdf/asdfasdf/asdfasdf/asdfasdf\"))\nprint(is_url_valid(\"http://google.com/asdfasdf/asdfasdf/asdfasdf/asdfasdf/\"))\nprint(is_url_valid(\"http://google.com/asdfasdf/asdfasdf/asdfasdf/asdfasdf/asdfasdf\"))\nprint(is_url"
    },
    {
      "rank": 40,
      "score": 8.478208546788407,
      "candidate": "import re\n\ndef is_valid(url):\n    \"\"\"Return True if url is valid, else return False.\"\"\"\n    if re.match(r'^https?://', url):\n        return True\n    return False"
    },
    {
      "rank": 41,
      "score": 8.437695832075478,
      "candidate": "import re\n\n\ndef is_valid_url(url):\n    url_pattern = re.compile(\n        r'^(?:http|ftp)s?://'  # http:// or https://\n        r'(?:(?:[A-Z0-9](?:[A-Z0-9-]{0,61}[A-Z0-9])?\\.)+(?:[A-Z]{2,6}\\.?|[A-Z0-9-]{2,}\\.?)|'  # domain...\n        r'localhost|'  # localhost...\n        r'\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3})'  # ...or ip\n        r'(?::\\d+)?'  # optional port\n        r'(?:/?|[/?]\\S+)$', re.IGNORECASE)\n    return re.match(url_pattern, url) is not None\n\n\ndef test_is_valid_url():\n    assert is_valid_url('https://www.google.com')\n    assert is_valid_url('http://www.google.com')\n    assert is_valid_url('https://www.google.com/')\n    assert is_valid_url('https://www.google.com/search?q=a')\n    assert is_valid_url('http://www.google.com/search?q=a')\n    assert not is_valid_url('google.com')\n    assert not is_valid_url('google.com/')\n    assert not is_valid_url('google.com/search?q=a')\n    assert not is_valid_url('https://www.google.com/search?q=a')\n    assert not is_valid_url('http://www.google.com/search?q=a')\n\n\nif __name__ == '__main__':\n    test_is_valid_url()"
    },
    {
      "rank": 42,
      "score": 8.426531424889468,
      "candidate": "import re\n\ndef valid_url(url):\n    return re.match(\"http(s)?://(www.)?(([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9\\-]*[a-zA-Z0-9])\\.)*([A-Za-z0-9]|[A-Za-z0-9][A-Za-z0-9\\-]*[A-Za-z0-9])\", url)\n\ndef test_valid_url():\n    assert valid_url(\"http://www.google.com\")\n    assert valid_url(\"http://google.com\")\n    assert valid_url(\"http://www.google.co.in\")\n    assert valid_url(\"https://www.google.co.in\")\n    assert valid_url(\"https://www.google.co.in/abcd\")\n    assert valid_url(\"https://www.google.co.in/abcd/\")\n    assert valid_url(\"https://www.google.co.in/abcd?q=abc\")\n    assert valid_url(\"https://www.google.co.in/abcd?q=abc&p=123\")\n    assert valid_url(\"http://www.google.co.in/abcd?q=abc&p=123\")\n    assert valid_url(\"http://www.google.co.in/abcd?q=abc&p=123&x=3\")\n    assert valid_url(\"http://www.google.co.in/abcd?q=abc&p=123&x=3&y=4\")\n\n    assert valid_url(\"http://www.google.co.in/abcd?q=abc&p=123&x=3&y=4&\")\n    assert valid_url(\"http://www.google.co.in/abcd?q=abc&p=123&x=3&y=4&z=5\")\n    assert valid_url(\"http://www.google.co.in/abcd?q=abc&p=123&x=3&y=4&z"
    },
    {
      "rank": 43,
      "score": 8.408439383654278,
      "candidate": "import re\n\ndef is_valid_url(url):\n    regex = re.compile(\n        r'^(?:http|ftp)s?://' # http:// or https://\n        r'(?:(?:[A-Z0-9](?:[A-Z0-9-]{0,61}[A-Z0-9])?\\.)+(?:[A-Z]{2,6}\\.?|[A-Z0-9-]{2,}\\.?)|' #domain...\n        r'localhost|' #localhost...\n        r'\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3})' # ...or ip\n        r'(?::\\d+)?' # optional port\n        r'(?:/?|[/?]\\S+)$', re.IGNORECASE)\n    return re.match(regex, url) is not None\n\nprint(is_valid_url(\"http://google.com\"))\nprint(is_valid_url(\"http://google.com/\"))\nprint(is_valid_url(\"http://google.com/a\"))\nprint(is_valid_url(\"http://google.com/a/\"))\nprint(is_valid_url(\"http://google.com/a/b\"))\nprint(is_valid_url(\"http://google.com/a/b/\"))\nprint(is_valid_url(\"http://google.com/a/b/c\"))\nprint(is_valid_url(\"http://google.com/a/b/c/\"))\nprint(is_valid_url(\"http://google.com/a/b/c/d\"))\nprint(is_valid_url(\"http://google.com/a/b/c/d/\"))\nprint(is_valid_url(\"http://google.com/a/b/c/d/e\"))\nprint(is_valid_url(\"http://google.com/a/b/c/d/e/\"))\nprint(is_valid_url(\"http://google.com/a/b/c/d/e/f\"))\nprint(is_valid_url(\"http://google.com/a/b/c/d/e/f"
    },
    {
      "rank": 44,
      "score": 8.386620303250325,
      "candidate": "import re\n\n\ndef valid_url(url):\n    regex = r\"^https?://(www.)?[-a-zA-Z0-9@:%._+~#=]{1,256}\\.[a-zA-Z0-9()]{1,6}\\b([-a-zA-Z0-9()@:%_+.~#?&/=]*)$\"\n    return True if re.match(regex, url) else False\n\n\nif __name__ == \"__main__\":\n    print(valid_url(\"https://www.google.com\"))\n    print(valid_url(\"https://www.google\"))"
    },
    {
      "rank": 45,
      "score": 8.375312293858853,
      "candidate": "import re\n\n\ndef is_url_valid(url):\n    regex = re.compile(r'^(?:http(s)?:\\/\\/)?[\\w.-]+(?:\\.[\\w\\.-]+)+[\\w\\-\\._~:/?#[\\]@!\\$&\\'\\(\\)\\*\\+,;=.]+$')\n    return regex.search(url)\n\n\nif __name__ == '__main__':\n    print(is_url_valid(\"http://www.google.com\"))\n    print(is_url_valid(\"http://www.google.com/\"))\n    print(is_url_valid(\"http://www.google.com/search?q=something\"))\n    print(is_url_valid(\"http://www.google.com/search?q=something/\"))\n    print(is_url_valid(\"http://www.google.com/search?q=something/?\"))\n    print(is_url_valid(\"http://www.google.com/search?q=something/?a=b\"))\n    print(is_url_valid(\"http://www.google.com/search?q=something/?a=b&b=c\"))\n    print(is_url_valid(\"http://www.google.com/search?q=something/?a=b&b=c&\"))\n    print(is_url_valid(\"http://www.google.com/search?q=something/?a=b&b=c&d\"))\n    print(is_url_valid(\"http://www.google.com/search?q=something/?a=b&b=c&d/\"))"
    },
    {
      "rank": 46,
      "score": 8.351614956112536,
      "candidate": "import re\n\n\ndef check_url(url):\n    regex = re.compile(\n        r'^(?:http|ftp)s?://'  # http:// or https://\n        r'(?:(?:[A-Z0-9](?:[A-Z0-9-]{0,61}[A-Z0-9])?\\.)+(?:[A-Z]{2,6}\\.?|[A-Z0-9-]{2,}\\.?)|'  # domain...\n        r'localhost|'  # localhost...\n        r'\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3})'  # ...or ip\n        r'(?::\\d+)?'  # optional port\n        r'(?:/?|[/?]\\S+)$', re.IGNORECASE)\n    return re.match(regex, url) is not None\n\n\nif __name__ == '__main__':\n    assert check_url('https://google.com') is True\n    assert check_url('http://google.com') is True\n    assert check_url('http://google.com/abcd') is True\n    assert check_url('https://google.com/abcd') is True\n    assert check_url('http://google.com/abcd/') is True\n    assert check_url('http://google.com/abcd/123') is True\n    assert check_url('http://google.com/abcd/123/') is True\n    assert check_url('http://google.com/abcd/123/456') is True\n    assert check_url('http://google.com/abcd/123/456/') is True\n    assert check_url('http://localhost:3000/') is True\n    assert check_url('http://127.0.0.1:3000/') is True\n    assert check_url('http://127.0.0.1:3000/abcd') is True\n    assert check_url('http://127.0.0.1:3000/abcd"
    },
    {
      "rank": 47,
      "score": 8.331556294201176,
      "candidate": "import re\n\n\ndef is_url_valid(url):\n    return bool(re.match(r'http[s]?://(?:[a-zA-Z]|[0-9]|[$-_@.&+]|[!*\\(\\),]|(?:%[0-9a-fA-F][0-9a-fA-F]))+', url))\n\n\nif __name__ == '__main__':\n    print(is_url_valid(\"https://github.com\"))\n    print(is_url_valid(\"http://github.com\"))\n    print(is_url_valid(\"https://github.com/\"))\n    print(is_url_valid(\"http://github.com/\"))\n    print(is_url_valid(\"https://github.com/johndoe\"))\n    print(is_url_valid(\"https://github.com/johndoe/\"))\n    print(is_url_valid(\"https://github.com/johndoe/project1\"))\n    print(is_url_valid(\"https://github.com/johndoe/project1/\"))\n    print(is_url_valid(\"https://github.com/johndoe/project1/blob/master/main.py\"))\n    print(is_url_valid(\"https://github.com/johndoe/project1/blob/master/main.py/\"))\n    print(is_url_valid(\"https://github.com/johndoe/project1/blob/master/main.py/README.md\"))\n    print(is_url_valid(\"https://github.com/johndoe/project1/blob/master/main.py/README.md/\"))\n    print(is_url_valid(\"https://github.com/johndoe/project1/blob/master/main.py/README.md/README.md\"))\n    print(is_url_valid(\"https://github.com/johndoe/project1/blob/master/main.py/README.md/README.md/\"))\n    print(is_url_valid(\"https://github.com/johndoe/project1/blob/master"
    },
    {
      "rank": 48,
      "score": 8.327375965969855,
      "candidate": "import re\n\n\ndef is_url_valid(url):\n    return bool(re.search(r'^http[s]?://(?:[a-zA-Z]|[0-9]|[$-_@.&+]|[!*\\(\\),]|(?:%[0-9a-fA-F][0-9a-fA-F]))+$', url))\n\n\nif __name__ == '__main__':\n    assert is_url_valid('http://www.google.com') is True\n    assert is_url_valid('https://www.google.com') is True\n    assert is_url_valid('http://google.com') is True\n    assert is_url_valid('http://google.com/') is True\n    assert is_url_valid('http://google.com/search?q=testing') is True\n    assert is_url_valid('http://www.google.com/search?q=testing') is True\n    assert is_url_valid('http://www.google.com/search?q=testing/') is True\n    assert is_url_valid('http://www.google.com/search/?q=testing/') is True\n    assert is_url_valid('http://www.google.com/search/?q=testing') is True\n    assert is_url_valid('https://www.google.com/search/?q=testing') is True\n    assert is_url_valid('http://www.google.com/search?q=testing/') is True\n    assert is_url_valid('http://www.google.com/search?q=testing#fragment') is True\n    assert is_url_valid('http://www.google.com/search?q=testing/#fragment') is True\n    assert is_url_valid('http://www.google.com/search?q=testing/#fragment/') is True\n    assert is_url_valid('http://www.google.com/search?q=testing/#fragment/123') is True\n    assert is_url_valid('http://www.google.com/search?q=testing/#fragment/123/') is True\n    assert is_url_valid('http://www.google"
    },
    {
      "rank": 49,
      "score": 8.327367757082776,
      "candidate": "import re\n\n\ndef is_valid(url):\n    pattern = re.compile(\n        r'^(?:http|ftp)s?://'\n        r'(?:(?:[A-Z0-9](?:[A-Z0-9-]{0,61}[A-Z0-9])?\\.)+(?:[A-Z]{2,6}\\.?|[A-Z0-9-]{2,}\\.?)|'\n        r'localhost|'\n        r'\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3})'\n        r'(?::\\d+)?'\n        r'(?:/?|[/?]\\S+)$', re.IGNORECASE)\n    return pattern.match(url)\n\n\nif __name__ == '__main__':\n    urls = [\n        'http://www.google.com',\n        'http://www.google.co.in',\n        'http://localhost',\n        'http://localhost:8080',\n        'http://google.com',\n        'http://google.co.in',\n        'http://google.co',\n        'http://goog',\n        'http://-goog',\n        'http://127.0.0.1',\n        'http://127.0.0.1:8080',\n        'http://127.0.0.1:8080/',\n        'http://127.0.0.1:8080/goog',\n        'http://127.0.0.1:8080/goog/',\n        'http://127.0.0.1:8080/goog/abc',\n        'http://127.0.0.1:8080/goog/abc/',\n        'http://127.0.0.1:8080/goog/abc/def',\n        'http://127.0.0.1:8080/goog/abc/def/',\n        'http://127."
    },
    {
      "rank": 50,
      "score": 8.298597569547805,
      "candidate": "import re\n\n\ndef valid_url(url):\n    regex = re.compile(\n        r'^(?:http|ftp)s?://'\n        r'(?:(?:[A-Z0-9](?:[A-Z0-9-]{0,61}[A-Z0-9])?\\.)+(?:[A-Z]{2,6}\\.?|[A-Z0-9-]{2,}\\.?)|'\n        r'localhost|'\n        r'\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3})'\n        r'(?::\\d+)?'\n        r'(?:/?|[/?]\\S+)$', re.IGNORECASE\n    )\n    return re.match(regex, url) is not None\n\n\nprint(valid_url(\"http://google.com\"))\nprint(valid_url(\"http://google\"))\nprint(valid_url(\"google.com\"))"
    },
    {
      "rank": 51,
      "score": 8.2938925966498,
      "candidate": "import re\n\n\ndef valid_url(url):\n    pattern = re.compile(r'^(http:\\/\\/www\\.|https:\\/\\/www\\.|http:\\/\\/|https:\\/\\/)?[a-z0-9]+([\\-\\.]{1}[a-z0-9]+)*\\.[a-z]{2,5}(:[0-9]{1,5})?(\\/.*)?$')\n    return pattern.match(url)\n\n\nif __name__ == '__main__':\n    urls = [\n        'http://www.google.com',\n        'http://www.google.co.in',\n        'www.google.co.in',\n        'http://google.co.in',\n        'https://www.google.co.in',\n        'https://google.co.in',\n        'http://google.co.in/search/label/ptv',\n        'http://google.co.in/search?as_q=python+programming+language&amp;as_epq=&amp;as_oq=&amp;as_eq=&amp;lr=&amp;cr=&amp;as_ft=i&amp;as_filetype=&amp;as_qdr=all&amp;as_occt=any&amp;as_dt=i&amp;as_sitesearch=&amp;as_rights=&amp;safe=images',\n        'https://google.co.in/search?as_q=python+programming+language&as_epq=&as_oq=&as_eq=&lr=&cr=&as_ft=i&as_filetype=&as_qdr=all&as_occt=any&as_dt=i&as_sitesearch=&as_rights=&safe=images',\n        'http://google.co.in/search?as_q=python+programming+language&as_epq=&as_oq=&as_eq=&lr=&cr=&as_ft=i&as_filetype=&as_qdr=all&as_occt=any&as_dt=i&as_sitesearch=&as_rights=&safe=images',\n        'https://google.co.in/search?as_q="
    },
    {
      "rank": 52,
      "score": 8.289838256518838,
      "candidate": "import re\n\ndef is_valid_url(url):\n    regex = re.compile(r'^(?:http(s)?:\\/\\/)?[\\w.-]+(?:\\.[\\w\\.-]+)+[\\w\\-\\._~:/?#[\\]@!\\$&'\\\n                       r'()*+,;=.]+$')\n    return re.match(regex, url) is not None\n\nif __name__ == '__main__':\n    print(is_valid_url('https://www.google.com'))\n    print(is_valid_url('www.google.com'))\n    print(is_valid_url('http://www.google.com'))\n    print(is_valid_url('https://www.google.com/hello'))\n    print(is_valid_url('https://www.google.com/hello/'))\n    print(is_valid_url('https://www.google.com/hello/how/are/you'))\n    print(is_valid_url('https://www.google.com/hello/how/are/you/'))\n    print(is_valid_url('https://www.google.com/hello/how/are/you/?id=123'))\n    print(is_valid_url('https://www.google.com/hello/how/are/you/?id=123#'))\n    print(is_valid_url('https://www.google.com/hello/how/are/you/?id=123#hello'))\n    print(is_valid_url('https://www.google.com/hello/how/are/you/?id=123#hello/'))\n    print(is_valid_url('https://www.google.com/hello/how/are/you/?id=123#hello/?hi=123'))\n    print(is_valid_url('https://www.google.com/hello/how/are/you/?id=123#hello/?hi=123/'))\n    print(is_valid_url('https://www.google.com/hello/how/are/you/?id=123#hello/?hi=123/?hihi=123'))"
    },
    {
      "rank": 53,
      "score": 8.251903304236286,
      "candidate": "import re\n\ndef is_url_valid(url):\n    regex = r\"^(?:([A-Za-z0-9]+):)?(?:\\/\\/([A-Za-z0-9_:.]+)(?::(\\d+))?)?(?:((?:\\/[A-Za-z0-9_:.]*)?\\??(?:([A-Za-z0-9_:.]+=[A-Za-z0-9_:.]+&?)*)?(?:\\#([A-Za-z0-9_:.]+)?)?)?$\"\n    return True if re.match(regex, url) else False\n\nif __name__ == \"__main__\":\n    urls = [\n        \"https://www.google.com\",\n        \"http://www.google.com\",\n        \"https://www.google.com/\",\n        \"https://www.google.com/search?q=python+regex\",\n        \"http://www.google.com/search?q=python+regex\",\n        \"http://www.google.com/search?q=python+regex&page=2\",\n        \"http://www.google.com/search?q=python+regex&page=2&hello=world\",\n        \"http://www.google.com/search?q=python+regex&page=2&hello=world&bye=world\",\n        \"http://www.google.com/search?q=python+regex&page=2&hello=world&bye=world&\",\n        \"http://www.google.com/search?q=python+regex&page=2&hello=world&bye=world&bye=world\",\n        \"www.google.com\",\n        \"www.google.com/\",\n        \"http://www.google.com/search?q=python+regex&page=2&hello=world&bye=world&bye=world&\",\n        \"http://www.google.com/search?q=python+regex&page=2&hello=world&bye=world&bye=world&bye=world\",\n        \"http://www.google.com/search?q=python+regex&page=2&hello"
    },
    {
      "rank": 54,
      "score": 8.214125058964552,
      "candidate": "import re\n\ndef is_valid_url(url):\n    \"\"\"\n    Check if the url is valid or not using regex\n    \"\"\"\n\n    regex = re.compile(\n        r'^(?:http|ftp)s?://' # http:// or https://\n        r'(?:(?:[A-Z0-9](?:[A-Z0-9-]{0,61}[A-Z0-9])?\\.)+(?:[A-Z]{2,6}\\.?|[A-Z0-9-]{2,}\\.?)|' #domain...\n        r'localhost|' #localhost...\n        r'\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3})' # ...or ip\n        r'(?::\\d+)?' # optional port\n        r'(?:/?|[/?]\\S+)$', re.IGNORECASE)\n\n    if regex.search(url) != None:\n        return True\n    else:\n        return False\n\nprint(is_valid_url(\"http://google.com\"))\nprint(is_valid_url(\"http://google.co\"))\nprint(is_valid_url(\"http://google.co.\"))\nprint(is_valid_url(\"http://google.co/\"))\nprint(is_valid_url(\"http://google.co/search\"))\nprint(is_valid_url(\"http://google.com/search\"))\nprint(is_valid_url(\"https://google.com/search\"))\nprint(is_valid_url(\"https://google.com/search?q=test\"))\nprint(is_valid_url(\"http://google.com/search?q=test\"))\nprint(is_valid_url(\"https://google.com/search?q=test&hl=en\"))\nprint(is_valid_url(\"http://google.com/search?q=test&hl=en\"))\nprint(is_valid_url(\"https://google.com/search?q=test&hl=en&a=b&c=d\"))\nprint(is_valid_url(\"http://google.com/search?q=test&hl=en&a=b&c="
    },
    {
      "rank": 55,
      "score": 8.212735598038213,
      "candidate": "import re\n\ndef is_valid_url(url):\n\t# Regular expression to check valid URL\n\tregex = (\"(http|https)://\"\n\t\t\t\"[a-zA-Z0-9@:%._\\\\+~#?&//=]\"\n\t\t\t\"{2,256}\\\\.[a-z]\"\n\t\t\t\"{2,6}\\\\b([-a-zA-Z0-9@:%\"\n\t\t\t\"._\\\\+~#?&//=]*)\")\n\n\t# pass the regular expression and the string in search() method\n\tif re.search(regex, url):\n\t\treturn True\n\n\treturn False\n\nif __name__ == '__main__':\n\tprint(\"Example: http://www.google.com\")\n\turl = input(\"Enter url: \")\n\tif is_valid_url(url):\n\t\tprint(\"Valid URL\")\n\telse:\n\t\tprint(\"Invalid URL\")"
    },
    {
      "rank": 56,
      "score": 8.211579567659316,
      "candidate": "import re\n\n\ndef is_valid_url(url):\n    pattern = r\"(?:(?:(?:https?|ftp):)?//)?(?:(?:[1-9]\\d?|1\\d\\d|2[01]\\d|22[0-3])(?:\\.(?:1?\\d{1,2}|2[0-4]\\d|25[0-5])){2}(?:\\.(?:[1-9]\\d?|1\\d\\d|2[0-4]\\d|25[0-4]))|(?:(?:[a-z\\u00a1-\\uffff0-9]+-?)*[a-z\\u00a1-\\uffff0-9]+)(?:\\.(?:[a-z\\u00a1-\\uffff0-9]+-?)*[a-z\\u00a1-\\uffff0-9]+)*(?:\\.(?:[a-z\\u00a1-\\uffff]{2,})))(?::\\d{2,5})?(?:/[^\\s]*)?\"\n    return bool(re.match(pattern, url))\n\n\nif __name__ == \"__main__\":\n    urls = [\n        \"http://www.google.com\",\n        \"http://www.google.co.in\",\n        \"www.google.co.in\",\n        \"www.google.com\",\n        \"www.google\",\n        \"http://www.google\",\n        \"http://www.google.\",\n        \"http://www.google:9999\",\n        \"http://www.google:09999\",\n        \"https://www.google\",\n        \"http://www.google?name=Dha\",\n        \"http://www.google&name=Dha\",\n        \"http://www.google/\",\n        \"http://www.google/#\",\n        \"http://www.google/#&\",\n        \"http://www.google/#name=Dha\",\n        \"http://www.google/#name=Dha&\",\n        \"https://www.google/#name=Dha\",\n        \"https://www.google/#name=Dha&\",\n        \""
    },
    {
      "rank": 57,
      "score": 8.209707251476969,
      "candidate": "import re\n\n\ndef is_valid_url(url):\n    regex = re.compile(\n        r'^(?:http|ftp)s?://'  # http:// or https://\n        r'(?:(?:[A-Z0-9](?:[A-Z0-9-]{0,61}[A-Z0-9])?\\.)+(?:[A-Z]{2,6}\\.?|[A-Z0-9-]{2,}\\.?)|'  # domain...\n        r'localhost|'  # localhost...\n        r'\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3})'  # ...or ip\n        r'(?::\\d+)?'  # optional port\n        r'(?:/?|[/?]\\S+)$', re.IGNORECASE)\n\n    return re.match(regex, url) is not None\n\n\nif __name__ == '__main__':\n    print(is_valid_url('https://www.google.com'))\n    print(is_valid_url('https://www.google.com/'))\n    print(is_valid_url('https://www.google.com/search?q=is+a+valid+url'))\n    print(is_valid_url('https://www.google.com/search/?q=is+a+valid+url'))\n    print(is_valid_url('https://www.google.com/search?q=is+a+valid+url/'))\n    print(is_valid_url('https://www.google.com/search/?q=is+a+valid+url/'))\n    print(is_valid_url('https://www.google.com/search/?q=is+a+valid+url/?'))\n    print(is_valid_url('https://www.google.com/search/?q=is+a+valid+url/?&'))\n    print(is_valid_url('https://www.google.com/search/?q=is+a+valid+url/?&abcd'))\n    print(is_valid_url('https://www.google.com/search/?q=is+"
    },
    {
      "rank": 58,
      "score": 8.2048573255218,
      "candidate": "import re\n\ndef is_url_valid(url):\n    \"\"\"\n    Checks if a url is valid or not using regex\n    >>> is_url_valid('http://google.com')\n    True\n    >>> is_url_valid('https://google.com')\n    True\n    >>> is_url_valid('ftp://google.com')\n    True\n    >>> is_url_valid('http://google')\n    False\n    >>> is_url_valid('http://google.com/')\n    False\n    >>> is_url_valid('http://google.com/name')\n    True\n    >>> is_url_valid('http://google.com/name.html')\n    True\n    >>> is_url_valid('http://google.com/name.html?')\n    False\n    >>> is_url_valid('http://google.com/name.html?q=s')\n    True\n    \"\"\"\n    regex = r\"(http[s]?://(www\\.)?\\w+\\.\\w+)+(/\\w+)*(/\\w+\\.\\w+)*(\\.\\w+)*(\\.\\w+)*(\\?\\w+=\\w+)*\"\n    return True if re.match(regex, url) else False\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 59,
      "score": 8.172253082181854,
      "candidate": "import re\n\ndef is_valid_url(url):\n    \"\"\"\n    >>> is_valid_url('www.google.com')\n    False\n    >>> is_valid_url('https://www.google.com')\n    True\n    >>> is_valid_url('http://www.google.com')\n    True\n    >>> is_valid_url('www.google.com/')\n    True\n    >>> is_valid_url('www.google.com/index.html')\n    True\n    >>> is_valid_url('www.google.com/index.html/')\n    False\n    \"\"\"\n    return bool(re.match(r'^https?://[a-zA-Z0-9_.-]+$', url))\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 60,
      "score": 8.163300679823958,
      "candidate": "import re\n\n\ndef is_url_valid(url):\n    # write your code here\n    pattern = re.compile(\n        r'^(?:http(s)?:\\/\\/)?[\\w.-]+(?:\\.[\\w\\.-]+)+[\\w\\-\\._~:/?#[\\]@!\\$&'\\\n        r'\\(\\)\\*\\+,;=.]+$'\n    )\n    return pattern.match(url)\n\n\nif __name__ == '__main__':\n    print(is_url_valid(\"https://www.google.com\"))\n    print(is_url_valid(\"www.google.com\"))\n    print(is_url_valid(\"https://www.google\"))"
    },
    {
      "rank": 61,
      "score": 8.144125099485041,
      "candidate": "import re\n\ndef is_url_valid(url):\n    \"\"\"\n    Check if a url is valid or not using regex.\n    \"\"\"\n\n    regex = re.compile(\n        r'^(?:http|ftp)s?://'\n        r'(?:(?:[A-Z0-9](?:[A-Z0-9-]{0,61}[A-Z0-9])?\\.)+(?:[A-Z]{2,6}\\.?|[A-Z0-9-]{2,}\\.?)|'\n        r'localhost|'\n        r'\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3})'\n        r'(?::\\d+)?'\n        r'(?:/?|[/?]\\S+)$', re.IGNORECASE)\n\n    if re.match(regex, url):\n        return True\n\n    return False\n\nif __name__ == '__main__':\n    assert is_url_valid('https://github.com/') == True\n    assert is_url_valid('https://github') == False\n    assert is_url_valid('https://github.') == False\n    assert is_url_valid('http://github.com/') == True\n    assert is_url_valid('http://github.') == False\n    assert is_url_valid('http://github') == False\n    assert is_url_valid('http://github.com') == False\n    assert is_url_valid('https://github.com/') == True\n    assert is_url_valid('http://github.com/') == True\n    assert is_url_valid('http://github.com/123') == True\n    assert is_url_valid('http://github.com/abc') == True\n    assert is_url_valid('http://github.com/abc/') == True\n    assert is_url_valid('http://github.com/abc/123') == True\n    assert is_url_valid('http://github.com/abc/xyz') == True\n    assert is_url_valid('http://github.com/abc/xyz/') == True\n    assert"
    },
    {
      "rank": 62,
      "score": 8.143591138329747,
      "candidate": "import re\n\n\ndef is_valid_url(url):\n    pattern = r\"(http(s)?:\\/\\/.)?(www\\.)?[-a-zA-Z0-9@:%._\\+~#=]{2,256}\\.[a-z]{2,6}\\b([-a-zA-Z0-9@:%_\\+.~#?&//=]*)\"\n    regex = re.compile(pattern)\n    if re.search(regex, url):\n        return True\n    return False\n\n\nif __name__ == \"__main__\":\n    print(is_valid_url(\"https://www.google.com\"))\n    print(is_valid_url(\"https://www.google\"))\n    print(is_valid_url(\"https://www.google.com/\"))\n    print(is_valid_url(\"https://www.google.com/about/\"))\n    print(is_valid_url(\"https://www.google.com/about\"))\n    print(is_valid_url(\"www.google.com\"))"
    },
    {
      "rank": 63,
      "score": 8.121884567141883,
      "candidate": "import re\n\ndef check_url(url):\n    regex = re.compile(\n        r'^(?:http|ftp)s?://' # http:// or https://\n        r'(?:(?:[A-Z0-9](?:[A-Z0-9-]{0,61}[A-Z0-9])?\\.)+(?:[A-Z]{2,6}\\.?|[A-Z0-9-]{2,}\\.?)|' #domain...\n        r'localhost|' #localhost...\n        r'\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3})' # ...or ip\n        r'(?::\\d+)?' # optional port\n        r'(?:/?|[/?]\\S+)$', re.IGNORECASE)\n    return re.match(regex, url) is not None\n\nif __name__ == '__main__':\n    print(check_url('https://www.google.com')) # True\n    print(check_url('https://www.google')) # False\n    print(check_url('https://www.goog')) # False\n    print(check_url('https://www.goog.com/helloworld')) # True\n    print(check_url('https://www.goog.com/hello world')) # False\n    print(check_url('https://www.goog.com/hello_world')) # True"
    },
    {
      "rank": 64,
      "score": 8.105983444291466,
      "candidate": "import re\n\ndef is_url_valid(url):\n    \"\"\"\n    Check if a url is valid or not using regex.\n\n    Args:\n       url(string): url to be checked\n    Returns:\n       (boolean): True if valid, else False\n    \"\"\"\n    regex = \"^(http:\\/\\/www\\.|https:\\/\\/www\\.|http:\\/\\/|https:\\/\\/)?[a-z0-9]+([\\-\\.]{1}[a-z0-9]+)*\\.[a-z]{2,5}(:[0-9]{1,5})?(\\/.*)?$\"\n    return re.match(regex, url) is not None\n\n\nprint(is_url_valid(\"https://www.google.com\"))\nprint(is_url_valid(\"https://www.google\"))\nprint(is_url_valid(\"http://www.google\"))\nprint(is_url_valid(\"http://www.google.com\"))\nprint(is_url_valid(\"http://www.google.com/\"))\nprint(is_url_valid(\"http://www.google.com/q=something\"))\nprint(is_url_valid(\"http://www.google.com/q=something/\"))\nprint(is_url_valid(\"http://www.google.com/q=something/qwe\"))\nprint(is_url_valid(\"http://www.google.com/q=something/qwe/\"))\nprint(is_url_valid(\"https://www.google.com/q=something/qwe/\"))\nprint(is_url_valid(\"https://www.google.com/q=something/qwe\"))\nprint(is_url_valid(\"https://www.google.com/q=something/qwe\"))\nprint(is_url_valid(\"http://www.google.com/q=something/qwe\"))"
    },
    {
      "rank": 65,
      "score": 8.08452234024709,
      "candidate": "import re\n\n\ndef is_valid_url(url):\n    url_regex = re.compile(\n        r'^(?:http|ftp)s?://'  # http:// or https://\n        r'(?:(?:[A-Z0-9](?:[A-Z0-9-]{0,61}[A-Z0-9])?\\.)+(?:[A-Z]{2,6}\\.?|[A-Z0-9-]{2,}\\.?)|'  # domain...\n        r'localhost|'  # localhost...\n        r'\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3})'  # ...or ip\n        r'(?::\\d+)?'  # optional port\n        r'(?:/?|[/?]\\S+)$', re.IGNORECASE)\n\n    return url_regex.match(url)\n\n\nif __name__ == '__main__':\n    urls = [\n        'http://www.google.com',\n        'http://www.google.com/',\n        'http://www.google.com/abcd',\n        'http://www.google.com/abcd/',\n        'http://www.google.com/abcd.html',\n        'http://www.google.com/abcd/xyz.html',\n        'http://www.google.com/abcd/xyz/',\n        'http://www.google.com/abcd.html/xyz/',\n        'http://www.google.com/abcd.html/xyz',\n        'http://www.google.com/abcd.html/xyz/123',\n        'http://www.google.com/abcd.html/xyz/123/',\n        'http://www.google.com/abcd.html/xyz/123/abcd',\n        'http://www.google.com/abcd.html/xyz/123/abcd/',\n        'http://www.google.com/abcd.html/xyz/123/abcd/abcd',\n        'http://www.google.com/"
    },
    {
      "rank": 66,
      "score": 8.024835682833125,
      "candidate": "import re\n\n\ndef is_valid_url(url):\n    # regex = re.compile(\n    #     r'^(?:http|ftp)s?://'\n    #     r'(?:(?:[A-Z0-9](?:[A-Z0-9-]{0,61}[A-Z0-9])?\\.)+(?:[A-Z]{2,6}\\.?|[A-Z0-9-]{2,}\\.?)|'\n    #     r'localhost|'\n    #     r'\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3})'\n    #     r'(?::\\d+)?'\n    #     r'(?:/?|[/?]\\S+)$', re.IGNORECASE)\n    regex = re.compile(\n        r'^(?:http|ftp)s?://'\n        r'(?:(?:[A-Z0-9](?:[A-Z0-9-]{0,61}[A-Z0-9])?\\.)+(?:[A-Z]{2,6}\\.?|[A-Z0-9-]{2,}\\.?)|'\n        r'localhost|'\n        r'\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3})'\n        r'(?::\\d+)?'\n        r'(?:/?|[/?]\\S+)$', re.IGNORECASE)\n\n    if regex.search(url):\n        return True\n    return False\n\n\nif __name__ == '__main__':\n    url = input('Enter a url: ')\n    if is_valid_url(url):\n        print('Valid URL')\n    else:\n        print('Invalid URL')"
    },
    {
      "rank": 67,
      "score": 7.990432406683839,
      "candidate": "import re\n\n\ndef valid_url(url):\n    pattern = re.compile(r\"(http(s)?://)?(www\\.)?[-a-zA-Z0-9@:%._\\+~#=]{2,256}\\.[a-z]{2,6}\\b([-a-zA-Z0-9@:%_\\+.~#?&//=]*)\")\n    return pattern.match(url)\n\n\nif __name__ == '__main__':\n    print(valid_url(\"https://www.google.com\"))\n    print(valid_url(\"https://www.google\"))\n    print(valid_url(\"www.google.com\"))\n    print(valid_url(\"http://www.google.com\"))\n    print(valid_url(\"http://www.google\"))"
    },
    {
      "rank": 68,
      "score": 7.938028884277233,
      "candidate": "import re\n\ndef is_valid_url(url):\n    \"\"\"\n    Check if a url is valid or not using regex.\n    \"\"\"\n\n    regex = re.compile(\n        r'^(?:http|ftp)s?://' # http:// or https://\n        r'(?:(?:[A-Z0-9](?:[A-Z0-9-]{0,61}[A-Z0-9])?\\.)+(?:[A-Z]{2,6}\\.?|[A-Z0-9-]{2,}\\.?)|' #domain...\n        r'localhost|' #localhost...\n        r'\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3})' # ...or ip\n        r'(?::\\d+)?' # optional port\n        r'(?:/?|[/?]\\S+)$', re.IGNORECASE)\n    return re.match(regex, url) is not None\n\n\nif __name__ == '__main__':\n    print(is_valid_url('http://www.google.com'))\n    print(is_valid_url('http://www.google.com/'))\n    print(is_valid_url('http://www.google.com/search?q=testing'))\n    print(is_valid_url('http://localhost:3000/search?q=testing'))\n    print(is_valid_url('http://localhost:3000/search?q=testing'))\n    print(is_valid_url('http://255.255.255.255:3000/search?q=testing'))\n    print(is_valid_url('http://255.255.255.255:3000/search?q=testing'))\n    print(is_valid_url('http://255.255.255.255/search?q=testing'))\n    print(is_valid_url('http://255.255.255/search?q=testing'))\n    print(is_valid_url('http://25"
    },
    {
      "rank": 69,
      "score": 7.915588979966494,
      "candidate": "import re\n\ndef is_url(url):\n    regex = re.compile(\n        r'^(?:http|ftp)s?://' # http:// or https://\n        r'(?:(?:[A-Z0-9](?:[A-Z0-9-]{0,61}[A-Z0-9])?\\.)+(?:[A-Z]{2,6}\\.?|[A-Z0-9-]{2,}\\.?)|' #domain...\n        r'localhost|' #localhost...\n        r'\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3})' # ...or ip\n        r'(?::\\d+)?' # optional port\n        r'(?:/?|[/?]\\S+)$', re.IGNORECASE)\n    return re.match(regex, url) is not None\n\nprint(is_url(\"http://www.google.com\"))\nprint(is_url(\"http://www.google.com/\"))\nprint(is_url(\"http://www.google.com/search?q=testing\"))\nprint(is_url(\"http://www.google.com/search/?q=testing\"))\nprint(is_url(\"http://www.google.com/search/?q=testing&hl=en\"))\nprint(is_url(\"http://google.com/search/?q=testing&hl=en\"))\nprint(is_url(\"http://google.com/search/?q=testing&hl=en&foo=bar\"))\nprint(is_url(\"https://www.google.com\"))\nprint(is_url(\"https://www.google.com/\"))\nprint(is_url(\"https://www.google.com/search?q=testing\"))\nprint(is_url(\"https://www.google.com/search/?q=testing\"))\nprint(is_url(\"https://www.google.com/search/?q=testing&hl=en\"))\nprint(is_url(\"https://google.com/search/?q=testing&hl=en\"))\nprint(is_url(\"https://google.com/search/?q=testing&hl=en&foo=bar\"))\nprint(is_url"
    },
    {
      "rank": 70,
      "score": 7.8912769574414305,
      "candidate": "import re\n\n\ndef valid_url(url):\n    regex = r'((http|https):\\/\\/){0,1}[a-z0-9]+([\\-\\.]{1}[a-z0-9]+)*\\.[a-z]{2,5}(:[0-9]{1,5})?(\\/.*)?'\n    if re.match(regex, url):\n        return True\n    return False\n\n\nif __name__ == '__main__':\n    print(valid_url('https://www.google.com/'))\n    print(valid_url('https://www.google'))"
    },
    {
      "rank": 71,
      "score": 7.868947655733293,
      "candidate": "import re\n\ndef is_url_valid(url):\n    regex = re.compile(\n        r'^(?:http|ftp)s?://'  # http:// or https://\n        r'(?:(?:[A-Z0-9](?:[A-Z0-9-]{0,61}[A-Z0-9])?\\.)+(?:[A-Z]{2,6}\\.?|[A-Z0-9-]{2,}\\.?)|'  # domain...\n        r'localhost|'  # localhost...\n        r'\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3})'  # ...or ip\n        r'(?::\\d+)?'  # optional port\n        r'(?:/?|[/?]\\S+)$', re.IGNORECASE)\n    return regex.match(url)\n\nprint(is_url_valid(\"https://google.com\"))"
    },
    {
      "rank": 72,
      "score": 7.84634113240411,
      "candidate": "import re\n\n\ndef is_valid_url(url: str) -> bool:\n    regex = r\"(?i)\\b((?:https?://|www\\d{0,3}[.]|[a-z0-9.\\-]+[.][a-z]{2,4}/)(?:[^\\s()<>]+|\\(([^\\s()<>]+|(\\([^\\s()<>]+\\)))*\\))+(?:\\(([^\\s()<>]+|(\\([^\\s()<>]+\\)))*\\)|[^\\s`!()\\[\\]{};:'\\\".,<>?\u00ab\u00bb\u201c\u201d\u2018\u2019]))\"\n    url_regex = re.compile(regex)\n    if re.match(url_regex, url):\n        return True\n    return False\n\n\nif __name__ == \"__main__\":\n    print(is_valid_url(\"https://www.google.com\"))\n    print(is_valid_url(\"https://www.google\"))\n    print(is_valid_url(\"www.google.com\"))\n    print(is_valid_url(\"www.google\"))"
    },
    {
      "rank": 73,
      "score": 7.834022619458933,
      "candidate": "import re\n\n\ndef is_valid_url(url):\n    pattern = re.compile(r'^https?:\\/\\/[\\w\\-\\.]+[\\w\\-\\.,@?^=%&:\\~\\+#]*[\\w\\-\\@?^=%&\\~\\+#]')\n    return pattern.match(url)\n\n\nif __name__ == \"__main__\":\n    assert is_valid_url(\"http://www.google.com\") == True\n    assert is_valid_url(\"http://www.google\") == False\n    assert is_valid_url(\"http://www.google.\") == False\n    assert is_valid_url(\"http://www.google..\") == False\n    assert is_valid_url(\"http://www.google.c\") == False\n    assert is_valid_url(\"http://www.google.com/about/\") == True\n    assert is_valid_url(\"http://www.google.com/about/us/\") == True\n    assert is_valid_url(\"http://www.google.com/about/us/123\") == True\n    assert is_valid_url(\"http://www.google.com/about/us/123/\") == True\n    assert is_valid_url(\"http://www.google.com/about/us/123/456\") == True\n    assert is_valid_url(\"http://www.google.com/about/us/123/456/\") == True\n    assert is_valid_url(\"http://www.google.com/about/us/123/456/789\") == True\n    assert is_valid_url(\"http://www.google.com/about/us/123/456/789/\") == True\n    assert is_valid_url(\"http://www.google.com/about/us/123/456/789/123\") == True\n    assert is_valid_url(\"http://www.google.com/about/us/123/456/789/123/\") == True\n    assert is_valid_url(\"http://www.google.com/about/us/"
    },
    {
      "rank": 74,
      "score": 7.780351419995229,
      "candidate": "import re\n\n\ndef is_valid_url(url):\n    url_pattern = re.compile(\n        r\"^(?:http|ftp)s?://\"  # http:// or https://\n        r\"(?:(?:[A-Z0-9](?:[A-Z0-9-]{0,61}[A-Z0-9])?\\.)+(?:[A-Z]{2,6}\\.?|[A-Z0-9-]{2,}\\.?)|\"  # domain...\n        r\"localhost|\"  # localhost...\n        r\"\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3})\"  # ...or ip\n        r\"(?::\\d+)?\"  # optional port\n        r\"(?:/?|[/?]\\S+)$\",\n        re.IGNORECASE,\n    )\n\n    return url_pattern.match(url) is not None\n\n\nif __name__ == \"__main__\":\n    print(is_valid_url(\"https://www.google.com\"))\n    print(is_valid_url(\"https://www.google\"))\n    print(is_valid_url(\"https://www.google.\"))\n    print(is_valid_url(\"http://www.google.com\"))\n    print(is_valid_url(\"http://www.google.com/\"))\n    print(is_valid_url(\"http://www.google.com/search\"))\n    print(is_valid_url(\"http://www.google.com/search/\"))\n    print(is_valid_url(\"http://www.google.com/search/?q=python\"))\n    print(is_valid_url(\"http://www.google.com/search/?q=python/\"))\n    print(is_valid_url(\"http://www.google.com/search/?q=python/&\"))\n    print(is_valid_url(\"http://www.google.com/search/?q=python&\"))\n    print(is_valid_url(\"http://www.google.com/search/?q=python&q=python\"))\n    print(is_valid_url(\"http://www.google.com"
    },
    {
      "rank": 75,
      "score": 7.738292593776799,
      "candidate": "import re\n\ndef valid_url(url):\n    regex = re.compile(\n        r'^(?:http|ftp)s?://' # http:// or https://\n        r'(?:(?:[A-Z0-9](?:[A-Z0-9-]{0,61}[A-Z0-9])?\\.)+(?:[A-Z]{2,6}\\.?|[A-Z0-9-]{2,}\\.?)|' #domain...\n        r'localhost|' #localhost...\n        r'\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3})' # ...or ip\n        r'(?::\\d+)?' # optional port\n        r'(?:/?|[/?]\\S+)$', re.IGNORECASE)\n    return re.match(regex, url) is not None\n\n# test\nassert valid_url('http://google.com')\nassert valid_url('http://google.com/')\nassert valid_url('http://google.com/mail')\nassert not valid_url('google.com')\nassert not valid_url('google.com/')\nassert not valid_url('google.com/mail')\nassert not valid_url('htp://google.com')\nassert not valid_url('http://google.com/mail')"
    },
    {
      "rank": 76,
      "score": 7.7320703513377165,
      "candidate": "import re\n\n\ndef is_url_valid(url):\n    pattern = r\"(http:\\/\\/www\\.|https:\\/\\/www\\.|http:\\/\\/|https:\\/\\/)?[a-z0-9]+([\\-\\.]{1}[a-z0-9]+)*\\.[a-z]{2,5}(:[0-9]{1,5})?(\\/.*)?\"\n    return bool(re.match(pattern, url))\n\n\nif __name__ == \"__main__\":\n    assert is_url_valid(\"https://github.com/TheAlgorithms/Python\") == True\n    assert is_url_valid(\"invalid.com\") == False\n    assert is_url_valid(\"invalid.com/\") == False\n    assert is_url_valid(\"https://www.google.com/\") == True\n    assert is_url_valid(\"https://google.com\") == True\n    assert is_url_valid(\"google.com\") == False\n    assert is_url_valid(\"http://google.com\") == True\n    assert is_url_valid(\"http://google.com/\") == True\n    assert is_url_valid(\"http://google.com/search/\") == True\n    assert is_url_valid(\"http://google.com/search\") == True\n    assert is_url_valid(\"http://google.com/search/test\") == True"
    },
    {
      "rank": 77,
      "score": 7.705183449260731,
      "candidate": "import re\n\n\ndef url_validation(url):\n    regex = \"^(http|https)://\" \\\n            + \"[a-zA-Z0-9\\./]*\" \\\n            + \"[a-zA-Z0-9]$\"\n    # print(regex)\n    if re.search(regex, url):\n        print(\"Valid URL\")\n    else:\n        print(\"Invalid URL\")\n\n\nurl_validation(\"http://google.com\")\nurl_validation(\"https://www.google.com\")\nurl_validation(\"https://www.google.com/\")\nurl_validation(\"https://www.google.com/abcd\")\nurl_validation(\"https://www.google.com/abcd/\")\nurl_validation(\"https://www.google.com/abcd.html\")\nurl_validation(\"https://www.google.com/abcd.html/\")\nurl_validation(\"https://www.google.com/abcd.html/xyz\")\nurl_validation(\"https://www.google.com/abcd.html/xyz/\")\nurl_validation(\"https://www.google.com/abcd.html/xyz/123\")\nurl_validation(\"https://www.google.com/abcd.html/xyz/123/\")\nurl_validation(\"https://www.google.com/abcd.html/xyz/123/abc\")\nurl_validation(\"https://www.google.com/abcd.html/xyz/123/abc/\")\nurl_validation(\"https://www.google.com/abcd.html/xyz/123/abc/def\")\nurl_validation(\"https://www.google.com/abcd.html/xyz/123/abc/def/\")"
    },
    {
      "rank": 78,
      "score": 7.5819855281879285,
      "candidate": "import re\n\ndef is_valid_url(url):\n    regex = r\"(http(s)?:\\/\\/.)?(www\\.)?[-a-zA-Z0-9@:%._\\+~#=]{2,256}\\.[a-z]{2,6}\\b([-a-zA-Z0-9@:%_\\+.~#?&//=]*)\"\n    url = re.search(regex, url)\n\n    if url:\n        return True\n    else:\n        return False\n\nprint(is_valid_url('http://www.google.com'))\nprint(is_valid_url('https://github.com/'))\nprint(is_valid_url('https://github.com/asdf'))\nprint(is_valid_url('https://www.google.com/asdf'))\nprint(is_valid_url('https://www.google.com/asdf'))\nprint(is_valid_url('https://www.google.com/asdf'))\nprint(is_valid_url('https://www.google.com/asdf'))\nprint(is_valid_url('https://www.google.com/asdf'))\nprint(is_valid_url('https://www.google.com/asdf'))\nprint(is_valid_url('https://www.google.com/asdf'))\nprint(is_valid_url('https://www.google.com/asdf'))\nprint(is_valid_url('https://www.google.com/asdf'))\nprint(is_valid_url('https://www.google.com/asdf'))\nprint(is_valid_url('https://www.google.com/asdf'))\nprint(is_valid_url('https://www.google.com/asdf'))\nprint(is_valid_url('https://www.google.com/asdf'))\nprint(is_valid_url('https://www.google.com/asdf'))\nprint(is_valid_url('https://www.google.com/asdf'))\nprint(is_valid_url('https://www.google.com/asdf'))\nprint(is_valid_url('https://www.google.com/asdf'))"
    },
    {
      "rank": 79,
      "score": 7.562924366763077,
      "candidate": "import re\n\ndef is_valid_url(url):\n    regex = r'^https:\\/\\/www\\.|https:\\/\\/|www\\.|https:\\/\\/'\n    if re.search(regex, url):\n        return True\n    return False\n\n\nif __name__ == \"__main__\":\n    print(is_valid_url(\"https://google.com\"))\n    print(is_valid_url(\"https://google\"))\n    print(is_valid_url(\"https://google.com/\"))\n    print(is_valid_url(\"https://google.com/google\"))\n    print(is_valid_url(\"https://google.com/google/\"))\n    print(is_valid_url(\"https://google.com/google/google\"))\n    print(is_valid_url(\"https://google.com/google/google/\"))\n    print(is_valid_url(\"https://www.google.com\"))\n    print(is_valid_url(\"https://www.google.com/\"))\n    print(is_valid_url(\"https://www.google.com/google\"))\n    print(is_valid_url(\"https://www.google.com/google/\"))\n    print(is_valid_url(\"https://www.google.com/google/google\"))\n    print(is_valid_url(\"https://www.google.com/google/google/\"))\n    print(is_valid_url(\"www.google.com\"))\n    print(is_valid_url(\"www.google.com/\"))\n    print(is_valid_url(\"www.google.com/google\"))\n    print(is_valid_url(\"www.google.com/google/\"))\n    print(is_valid_url(\"www.google.com/google/google\"))\n    print(is_valid_url(\"www.google.com/google/google/\"))"
    },
    {
      "rank": 80,
      "score": 7.4878043221155455,
      "candidate": "import re\n\ndef valid_url(url):\n    regex = re.compile(\n        r'^(?:http|ftp)s?://'\n        r'(?:(?:[A-Z0-9](?:[A-Z0-9-]{0,61}[A-Z0-9])?\\.)+(?:[A-Z]{2,6}\\.?|[A-Z0-9-]{2,}\\.?)|'\n        r'localhost|'\n        r'\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3})'\n        r'(?::\\d+)?'\n        r'(?:/?|[/?]\\S+)$', re.IGNORECASE)\n    return re.match(regex, url) is not None\n\nif __name__ == '__main__':\n    urls = [\n        'http://www.google.com',\n        'http://www.google.com/',\n        'http://www.google.com/a/',\n        'http://www.google.com/a/b',\n        'http://www.google.com/a/b/c',\n        'http://www.google.com/a/b/c/',\n        'http://www.google.com/a/b/c/?',\n        'http://www.google.com/a/b/c?',\n        'http://www.google.com/a/b/c/d',\n        'http://www.google.com/a/b/c/d/',\n        'http://www.google.com/a/b/c/d/?',\n        'http://www.google.com/a/b/c/d?',\n        'http://www.google.com/a/b/c/d/e',\n        'http://www.google.com/a/b/c/d/e/',\n        'http://www.google.com/a/b/c/d/e/?',\n        'http://www.google.com/a/b/c/d/e?',\n        'http://www.google.com/a/b/c"
    },
    {
      "rank": 81,
      "score": 7.464609382504557,
      "candidate": "import re\n\ndef url_validator(url):\n    if re.match(r\"(http(s)?://)?(www.)?[-a-zA-Z0-9@:%._+~#=]{2,256}\\.[a-z]{2,6}\\b([-a-zA-Z0-9@:%_+.~#?&/=]*)\", url):\n        return True\n    else:\n        return False\n\nif __name__ == '__main__':\n    assert url_validator(\"http://www.google.com\") == True\n    assert url_validator(\"http://www.google.google\") == False\n    assert url_validator(\"http://www.google\") == True\n    assert url_validator(\"http://google.google\") == False\n    assert url_validator(\"www.google.com\") == False\n    assert url_validator(\"google.com\") == False\n    assert url_validator(\"http://google\") == True\n    assert url_validator(\"http://google.\") == False\n    assert url_validator(\"http://google.google\") == False\n    assert url_validator(\"http://google.google.\") == False\n    assert url_validator(\"http://google.google.com\") == True\n    assert url_validator(\"http://google.google.com\") == True\n    assert url_validator(\"http://google.google.com/\") == True\n    assert url_validator(\"http://google.google.com/abcd\") == True\n    assert url_validator(\"http://google.google.com/abcd.html\") == True\n    assert url_validator(\"http://google.google.com/abcd.html?abcd=1234\") == True\n    assert url_validator(\"http://google.google.com/abcd.html?abcd=1234&abcd2=1234\") == True\n    assert url_validator(\"http://google.google.com/abcd.html?abcd=1234&abcd2=1234&abcd3=1234\") == True\n    assert url_validator(\"http://google.google.com/abcd.html?ab"
    },
    {
      "rank": 82,
      "score": 3.0,
      "candidate": "import re\n\n\ndef is_url_valid(url):\n    \"\"\"Returns True if url is valid, False otherwise.\"\"\"\n    if re.match(r'^http(s)?:\\/\\/((www)|(www2)|(www3))?\\.[a-z]+\\.[a-z]+[0-9]+', url):\n        return True\n    return False\n\n\nif __name__ == '__main__':\n    assert is_url_valid('http://www.google.com') is True\n    assert is_url_valid('https://www.google.com') is True\n    assert is_url_valid('https://www2.google.com') is True\n    assert is_url_valid('https://www3.google.com') is True\n    assert is_url_valid('https://www.google.com/') is True\n    assert is_url_valid('https://www.google.com/search?q=python') is True\n    assert is_url_valid('https://www.google.com/search?q=python/') is True\n    assert is_url_valid('https://www.google.com/search?q=python/') is True\n    assert is_url_valid('https://www.google.com/search?q=python/') is True\n    assert is_url_valid('https://www.google.com/search?q=python/') is True\n    assert is_url_valid('https://www.google.com/search?q=python/') is True\n    assert is_url_valid('https://www.google.com/search?q=python/') is True\n    assert is_url_valid('https://www.google.com/search?q=python/') is True\n    assert is_url_valid('https://www.google.com/search?q=python/') is True\n    assert is_url_valid('https://www.google.com/search?q=python/') is True\n    assert is_url_valid('https://www.google.com/search?q=python/') is True\n    assert is_url_valid('https://www.google.com/search?q=python/') is True\n    assert is"
    },
    {
      "rank": 83,
      "score": 3.0,
      "candidate": "import re\n\n\ndef valid_url(url):\n    \"\"\"\n    Check if a url is valid or not using regex.\n\n    >>> valid_url('https://www.google.com')\n    True\n\n    >>> valid_url('https://www.google.com')\n    True\n\n    >>> valid_url('https://www.google.com')\n    True\n\n    >>> valid_url('https://www.google.com')\n    True\n\n    >>> valid_url('https://www.google.com')\n    True\n\n    >>> valid_url('https://www.google.com')\n    True\n\n    >>> valid_url('https://www.google.com')\n    True\n\n    >>> valid_url('https://www.google.com')\n    True\n\n    >>> valid_url('https://www.google.com')\n    True\n\n    >>> valid_url('https://www.google.com')\n    True\n\n    >>> valid_url('https://www.google.com')\n    True\n\n    >>> valid_url('https://www.google.com')\n    True\n\n    >>> valid_url('https://www.google.com')\n    True\n\n    >>> valid_url('https://www.google.com')\n    True\n\n    >>> valid_url('https://www.google.com')\n    True\n\n    >>> valid_url('https://www.google.com')\n    True\n\n    >>> valid_url('https://www.google.com')\n    True\n\n    >>> valid_url('https://www.google.com')\n    True\n\n    >>> valid_url('https://www.google.com')\n    True\n\n    >>> valid_url('https://www.google.com')\n    True\n\n    >>> valid_url('https://www.google.com')\n    True\n\n    >>> valid_url('https://www.google.com')\n    True\n\n    >>> valid_url('https://www.google.com')\n    True\n\n    >>> valid_url('https://www.google.com')\n    True\n\n    >>> valid_url('https://www.google.com')\n    True\n\n    >>> valid_url('"
    },
    {
      "rank": 84,
      "score": 3.0,
      "candidate": "import re\n\n\ndef is_valid_url(url):\n    regex = re.compile(\n        r'^(?:http|ftp)s?://'  # http:// or https://\n        r'(?:(?:[A-Z0-9](?:[A-Z0-9-]{0,61}[A-Z0-9])?\\.)+(?:[A-Z]{2,6}\\.?|[A-Z0-9-]{2,}\\.?)|'  # domain...\n        r'localhost|'  # localhost...\n        r'\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3})'  # ...or ip\n        r'(?::\\d+)?'  # optional port\n        r'(?:/?|[/?]\\S+)$', re.IGNORECASE)\n\n    return re.match(regex, url) is not None\n\n\nif __name__ == '__main__':\n    assert is_valid_url('http://google.com') is True\n    assert is_valid_url('http://google.com.') is False\n    assert is_valid_url('http://google') is False\n    assert is_valid_url('http://google..') is False\n    assert is_valid_url('http://.com') is False\n    assert is_valid_url('http://127.0.0.1') is True\n    assert is_valid_url('http://127.0.0.1:8080') is True\n    assert is_valid_url('http://localhost') is True\n    assert is_valid_url('http://localhost:8080') is True\n    assert is_valid_url('https://google.com') is True\n    assert is_valid_url('https://google.com:8080') is True\n    assert is_valid_url('https://google.com:8080/home') is True\n    assert is_valid_url('http://google.com/home/') is True"
    },
    {
      "rank": 85,
      "score": 3.0,
      "candidate": "import re\n\n\ndef is_valid_url(url):\n    regex = re.compile(\n        r'^(?:http|ftp)s?://'  # http:// or https://\n        r'(?:(?:[A-Z0-9](?:[A-Z0-9-]{0,61}[A-Z0-9])?\\.)+(?:[A-Z]{2,6}\\.?|[A-Z0-9-]{2,}\\.?)|'  # domain...\n        r'localhost|'  # localhost...\n        r'\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3})'  # ...or ip\n        r'(?::\\d+)?'  # optional port\n        r'(?:/?|[/?]\\S+)$', re.IGNORECASE)\n\n    return re.match(regex, url) is not None\n\n\nif __name__ == '__main__':\n    assert is_valid_url('http://www.google.com')\n    assert is_valid_url('http://www.google.com.')\n    assert is_valid_url('http://www.google.com/abcd/')\n    assert is_valid_url('http://www.google.com/abcd')\n    assert is_valid_url('http://www.google.com/abcd.')\n    assert is_valid_url('http://www.google.com/abcd/../')\n    assert is_valid_url('http://www.google.com/abcd/..')\n    assert is_valid_url('http://www.google.com/abcd/./')\n    assert is_valid_url('http://www.google.com/abcd/.')\n    assert is_valid_url('http://www.google.com/abcd/.../')\n    assert is_valid_url('http://www.google.com/abcd/...')\n    assert is_valid_url('http://www.google.com/abcd/.../..')\n    assert is_valid_url('http://www.google.com/abcd/.../..')\n    assert"
    },
    {
      "rank": 86,
      "score": 3.0,
      "candidate": "import re\n\ndef is_valid_url(url):\n    regex = r\"http[s]?://(?:[a-zA-Z]|[0-9]|[$-_@.&+]|[!*\\(\\),]|(?:%[0-9a-fA-F][0-9a-fA-F]))+\"\n    return re.match(regex, url) is not None\n\nif __name__ == '__main__':\n    print(is_valid_url(\"https://www.google.com\"))\n    print(is_valid_url(\"https://www.google\"))\n    print(is_valid_url(\"www.google.com\"))\n    print(is_valid_url(\"www.google\"))\n    print(is_valid_url(\"https://www.google.com/\"))\n    print(is_valid_url(\"https://www.google.com/q=test\"))\n    print(is_valid_url(\"https://www.google.com/?q=test\"))\n    print(is_valid_url(\"https://www.google.com/q=test/\"))"
    },
    {
      "rank": 87,
      "score": 3.0,
      "candidate": "import re\n\n\ndef is_url_valid(url):\n    \"\"\"\n    Check if a url is valid or not.\n\n    Args:\n       url(string): url to be checked\n    Returns:\n       (boolean): True if valid, else False\n    \"\"\"\n    regex = '^(?:http(s)?:\\/\\/)?[\\w.-]+(?:\\.[\\w\\.-]+)+[\\w\\-\\._~:/?#[\\]@!\\$&'\\\n            \"'\\(\\)\\*\\+,;=.]+$\"\n    return re.search(regex, url)\n\n\nif __name__ == '__main__':\n    print(\"Example:\")\n    print(is_url_valid('http://foo.bar/mails/'))\n\n    # These \"asserts\" are used for self-checking and not for an auto-testing\n    assert is_url_valid('http://foo.bar/mails/') == True\n    assert is_url_valid('https://www.python.org/') == True\n    assert is_url_valid('https://python.org') == False\n    assert is_url_valid(\n        'https://www.python.org/path?to=document#fragm') == True\n    assert is_url_valid('http://foo.bar/mails') == False\n    assert is_url_valid('http://foo.bar/mails/path/?q=s') == True\n    assert is_url_valid('http://foo.bar/mails/path/?q=s#anchor') == True\n    print(\"Coding complete? Click 'Check' to earn cool rewards!\")"
    },
    {
      "rank": 88,
      "score": 3.0,
      "candidate": "import re\n\n\ndef check_url(url):\n    \"\"\"\n    Check if a url is valid or not using regex.\n    :param url: url to check.\n    :return: True if valid, False otherwise.\n    \"\"\"\n    regex = re.compile(\n        r'^(?:http|ftp)s?://'\n        r'(?:(?:[A-Z0-9](?:[A-Z0-9-]{0,61}[A-Z0-9])?\\.)+(?:[A-Z]{2,6}\\.?|[A-Z0-9-]{2,}\\.?)|'\n        r'localhost|'\n        r'\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3})'\n        r'(?::\\d+)?'\n        r'(?:/?|[/?]\\S+)$', re.IGNORECASE)\n    return bool(regex.match(url))\n\n\nif __name__ == '__main__':\n    print(check_url('http://www.google.com'))\n    print(check_url('http://www.google'))\n    print(check_url('http://www.goog'))"
    },
    {
      "rank": 89,
      "score": 3.0,
      "candidate": "import re\n\ndef check_url(url):\n    # TODO: Write your code here\n    regex = r\"(http|https)://[a-zA-Z0-9\\.:?=%&\\/]+$\"\n    if re.match(regex, url):\n        return True\n    else:\n        return False\n\nif __name__ == '__main__':\n    print(\"Example:\")\n    print(check_url('http://www.example.com/'))\n\n    # These \"asserts\" are used for self-checking and not for an auto-testing\n    assert check_url('http://www.example.com/') == True\n    assert check_url('http://example.com') == True\n    assert check_url('http://example.com/') == True\n    assert check_url('https://example.com') == True\n    assert check_url('https://example.com/') == True\n    assert check_url('https://www.example.com/') == True\n    assert check_url('http://www.commtoggle.com/') == True\n    assert check_url('http://www.commtoggle.com') == True\n    assert check_url('http://commtoggle.com') == False\n    assert check_url('http://commtoggle.com/') == False\n    assert check_url('http://www.commtoggle.com/test-path') == True\n    assert check_url('http://www.commtoggle.com/test-path/') == True\n    assert check_url('http://www.commtoggle.com/test-path/?param=1') == True\n    assert check_url('http://www.commtoggle.com/test-path/?param=1&other=2') == True\n    assert check_url('http://www.commtoggle.com/test-path/?param=1&other=2&') == True\n    assert check_url('http://www.commtoggle.com/test-path/?param=1&other=2#fragment') == True\n    assert check_url('http://www.commtoggle.com/test-path/?param=1&other=2#fragment&') == True\n    assert check_url('http://www.commtoggle."
    },
    {
      "rank": 90,
      "score": 3.0,
      "candidate": "import re\n\ndef is_valid_url(url):\n    regex = r\"(http(s)?://)?(www\\.)?[-a-zA-Z0-9@:%._\\+~#=]{2,256}\\.[a-z]{2,6}\\b([-a-zA-Z0-9@:%_\\+.~#?&//=]*)\"\n    pattern = re.compile(regex)\n    if re.match(pattern, url):\n        return True\n    return False\n\n\nif __name__ == '__main__':\n    print(is_valid_url(\"https://www.google.com\"))\n    print(is_valid_url(\"https://www.google\"))\n    print(is_valid_url(\"https://www.google.com/search?q=is+a+valid+url+or+not\"))\n    print(is_valid_url(\"https://www.google.com/search?q=is+a+valid+url+or+not/\"))\n    print(is_valid_url(\"https://www.google.com/search?q=is+a+valid+url+or+not/ \"))\n    print(is_valid_url(\"https://www.google.com/search?q=is+a+valid+url+or+not/ \"))"
    },
    {
      "rank": 91,
      "score": 3.0,
      "candidate": "import re\n\n\ndef is_valid_url(url):\n    regex = r\"(http(s)?://)?(www.)?(([a-zA-Z0-9\\._-]+\\.[a-zA-Z]{2,6})|([0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}))(:[0-9]{1,4})*(/[a-zA-Z0-9\\&%_\\./-~-]*)?(\\?[a-zA-Z0-9=&_]*)?(#[a-zA-Z0-9]*)?$\"\n    return bool(re.search(regex, url))\n\n\nif __name__ == \"__main__\":\n    assert is_valid_url(\"http://google.com\") == True\n    assert is_valid_url(\"http://google.com/\") == True\n    assert is_valid_url(\"http://google.com/abcd\") == True\n    assert is_valid_url(\"http://google.com/abcd?q=abc\") == True\n    assert is_valid_url(\"http://google.com/abcd?q=abc&r=xyz\") == True\n    assert is_valid_url(\"http://google.com/abcd?q=abc&r=xyz#abcd\") == True\n    assert is_valid_url(\"http://google.com/abcd?q=abc&r=xyz#abcd\") == True\n    assert is_valid_url(\"http://google.com/abcd?q=abc&r=xyz#abcd\") == True\n    assert is_valid_url(\"http://www.google.com\") == True\n    assert is_valid_url(\"http://www.google.com/\") == True\n    assert is_valid_url(\"http://www.google.com/abcd\") == True\n    assert is_valid_url(\"http://www.google.com/abcd?q=abc\") == True\n    assert is_valid_url(\"http://www.google.com/abcd?q=abc&r=xyz\") == True\n    assert is_valid_url(\"http://www."
    },
    {
      "rank": 92,
      "score": 3.0,
      "candidate": "import re\n\n\ndef is_valid_url(url):\n    regex = r\"^(http:\\/\\/www\\.|https:\\/\\/www\\.|http:\\/\\/|https:\\/\\/)?[a-z0-9]+([\\-\\.]{1}[a-z0-9]+)*\\.[a-z]{2,5}(:[0-9]{1,5})?(\\/.*)?$\"\n    return bool(re.search(regex, url))\n\n\nif __name__ == \"__main__\":\n    assert is_valid_url(\"https://github.com/Abdul-Majid1998/\") == True\n    assert is_valid_url(\"http://www.google.com\") == True\n    assert is_valid_url(\"http://google.com\") == True\n    assert is_valid_url(\"https://www.google.com\") == True\n    assert is_valid_url(\"http://google.com/\") == True\n    assert is_valid_url(\"http://google.com/abcd\") == True\n    assert is_valid_url(\"http://google.com/abcd/\") == True\n    assert is_valid_url(\"https://www.google.com/abcd\") == True\n    assert is_valid_url(\"https://www.google.com/abcd/\") == True\n    assert is_valid_url(\"https://www.google.com/abcd/abcd\") == True\n    assert is_valid_url(\"https://www.google.com/abcd/abcd/\") == True\n    assert is_valid_url(\"http://www.google.com/abcd/abcd/abcd\") == True\n    assert is_valid_url(\"http://www.google.com/abcd/abcd/abcd/\") == True\n    assert is_valid_url(\"https://www.google.com/abcd/abcd/abcd/abcd\") == True\n    assert is_valid_url(\"https://www.google.com/abcd/abcd/abcd/abcd/\") == True\n    assert is_valid_url(\"http://www.google.com/abcd/abcd/abcd/abcd/\") =="
    },
    {
      "rank": 93,
      "score": 3.0,
      "candidate": "def is_valid_url(url):\n    import re\n\n    regex = \"^(?:http(s)?:\\/\\/)?[\\w.-]+(?:\\.[\\w\\.-]+)+[\\w\\-\\._~:/?#[\\]@!\\$&'\\(\\)\\*\\+,;=.]+$\"\n    url_pattern = re.compile(regex)\n    return url_pattern.match(url)\n\n\nif __name__ == \"__main__\":\n    assert is_valid_url(\"https://www.google.com\")\n    assert not is_valid_url(\"https://www.google\")"
    },
    {
      "rank": 94,
      "score": 3.0,
      "candidate": "import re\n\n\ndef valid_url(url):\n    regex = r\"(http(s)?:\\/\\/.)?(www\\.)?[-a-zA-Z0-9@:%._\\+~#=]{2,256}\\.[a-z]{2,6}\\b([-a-zA-Z0-9@:%_\\+.~#?&//=]*)\"\n    pattern = re.compile(regex)\n    return pattern.match(url)\n\n\nif __name__ == \"__main__\":\n    assert valid_url(\"https://www.google.com\")\n    assert valid_url(\"http://www.google.com\")\n    assert valid_url(\"https://youtube.com\")\n    assert valid_url(\"http://youtube.com\")\n    assert not valid_url(\"https://www.goog\")\n    assert not valid_url(\"htp://www.google.com\")\n    assert not valid_url(\"https://www.google.com/abc\")\n    print(\"All test cases passed!\")"
    },
    {
      "rank": 95,
      "score": 3.0,
      "candidate": "import re\n\n\ndef is_valid_url(url):\n    regex = re.compile(\n        r'^(?:http|ftp)s?://'  # http:// or https://\n        r'(?:(?:[A-Z0-9](?:[A-Z0-9-]{0,61}[A-Z0-9])?\\.)+(?:[A-Z]{2,6}\\.?|[A-Z0-9-]{2,}\\.?)|'  # domain...\n        r'localhost|'  # localhost...\n        r'\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3})'  # ...or ip\n        r'(?::\\d+)?'  # optional port\n        r'(?:/?|[/?]\\S+)$', re.IGNORECASE)\n\n    return re.match(regex, url) is not None\n\n\nif __name__ == '__main__':\n    assert is_valid_url(\"http://www.google.com\")\n    assert is_valid_url(\"http://www.google.com/\")\n    assert is_valid_url(\"http://www.google.com/abcd\")\n    assert is_valid_url(\"http://www.google.com/abcd?fgh=xyz\")\n    assert is_valid_url(\"http://www.google.com/abcd?fgh=xyz&abc=123\")\n    assert is_valid_url(\"https://www.google.com\")\n    assert is_valid_url(\"https://www.google.com/\")\n    assert is_valid_url(\"https://www.google.com/abcd\")\n    assert is_valid_url(\"https://www.google.com/abcd?fgh=xyz\")\n    assert is_valid_url(\"https://www.google.com/abcd?fgh=xyz&abc=123\")\n    assert is_valid_url(\"http://localhost\")\n    assert is_valid_url(\"http://localhost:8080\")\n    assert is_valid_url(\"http://192.168.1.1\")\n    assert is"
    },
    {
      "rank": 96,
      "score": 3.0,
      "candidate": "import re\n\n\ndef check_url(url):\n    regex = re.compile(\n        r'^(?:http|ftp)s?://'  # http:// or https://\n        r'(?:(?:[A-Z0-9](?:[A-Z0-9-]{0,61}[A-Z0-9])?\\.)+(?:[A-Z]{2,6}\\.?|[A-Z0-9-]{2,}\\.?)|'  # domain...\n        r'localhost|'  # localhost...\n        r'\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3})'  # ...or ip\n        r'(?::\\d+)?'  # optional port\n        r'(?:/?|[/?]\\S+)$', re.IGNORECASE)\n\n    return regex.match(url) is not None\n\n\nif __name__ == '__main__':\n    assert check_url('http://www.google.com') is True, 'First'\n    assert check_url('http://google.com') is True, 'Second'\n    assert check_url('google.com') is False, 'Third'\n    assert check_url('http://255.255.255.255') is True, 'Forth'\n    assert check_url('http://255.255.256.255') is False, 'Fifth'\n    assert check_url('http://-error-.invalid/') is False, 'Sixth'\n    assert check_url('http://.www.google.com') is False, 'Seventh'\n    assert check_url('http://www.google.com:80') is True, 'Eighth'\n    assert check_url('http://www.google.com:8080') is True, 'Ninth'\n    assert check_url('http://www.google.com:1a') is False, 'Tenth'\n    assert check_url('http://www.google.com:0') is False, 'Eleventh'\n    assert check_url('http://www.google"
    },
    {
      "rank": 97,
      "score": 3.0,
      "candidate": "import re\n\n\ndef url_validation(url):\n    regex = r\"^(?:([A-Za-z0-9-]+):)?(?:\\/\\/([^/?#]*))?([^?#]*)(\\?[^#]*)?(#.*)?$\"\n    return re.match(regex, url)\n\n\nif __name__ == \"__main__\":\n    assert url_validation(\"http://www.google.com\")\n    assert url_validation(\"https://github.com\")\n    assert url_validation(\"https://github.com/\")\n    assert url_validation(\"https://github.com/about\")\n    assert url_validation(\"https://github.com/about?\")\n    assert url_validation(\"https://github.com/about#\")\n    assert url_validation(\"https://github.com/about?q=test\")\n    assert url_validation(\"https://github.com/about#test\")\n    assert url_validation(\"https://github.com/about?q=test#test\")\n    assert url_validation(\"https://github.com/about?q=test#test\")\n    assert url_validation(\"http://www.github.com/about?q=test#test\")\n    assert url_validation(\"http://www.github.com/about?q=test#test\")\n    assert url_validation(\"https://www.github.com/about?q=test#test\")\n    assert url_validation(\"https://www.github.com/about?q=test#test\")\n    assert url_validation(\"https://github.com/about?q=test#test\")\n    assert url_validation(\"https://github.com/about?q=test#test\")\n    assert url_validation(\"https://github.com/about?q=test#test\")\n    assert url_validation(\"https://github.com/about?q=test#test\")\n    assert not url_validation(\"https://github.com/about?q=test#test#\")\n    assert not url_validation(\"https://github.com/about?q=test#test#\")\n    assert not url_validation(\"https://github.com/about?q=test#test#\")\n    assert not url_validation(\"https://github"
    },
    {
      "rank": 98,
      "score": 3.0,
      "candidate": "import re\n\n\ndef is_valid_url(url):\n    regex = r'https?:\\/\\/(www\\.)?[-a-zA-Z0-9@:%._\\+~#=]{2,256}\\.[a-z]{2,6}\\b([-a-zA-Z0-9@:%_\\+.~#?&//=]*)$'\n    pattern = re.compile(regex)\n    if pattern.match(url):\n        return True\n    return False\n\n\nif __name__ == '__main__':\n    urls = ['https://www.google.com', 'https://github.com', 'https://google.com', 'https://www.google.co.in', 'https://github.com', 'https://www.google.com/about/', 'https://github.com/about', 'https://www.google.com/about', 'https://github.com/about/', 'https://www.google.co.in/about/', 'https://github.com/about/', 'https://www.google.co.in/about', 'https://github.com/about/', 'https://www.google.co.in/about/', 'https://github.com/about/', 'https://www.google.co.in/about/', 'https://github.com/about/', 'https://www.google.co.in/about/', 'https://github.com/about/', 'https://www.google.co.in/about/', 'https://github.com/about/', 'https://www.google.co.in/about/', 'https://github.com/about/', 'https://www.google.co.in/about/', 'https://github.com/about/', 'https://www.google.co.in/about/', 'https://github.com/about/', 'https://www.google.co.in/about/', 'https://github.com/about/', 'https://www.google.co.in/about/', 'https://github.com/about/', 'https://www.google.co.in/about/', 'https://github.com/about/', 'https://www.google.co.in/"
    },
    {
      "rank": 99,
      "score": 3.0,
      "candidate": "import re\n\ndef is_url_valid(url):\n    \"\"\"\n    Checks if the url is valid using regex\n    \"\"\"\n    regex = \"^(https?:\\/\\/)?([a-z0-9]+([\\-\\.]{1}[a-z0-9]+)*\\.[a-z]{2,5}(:[0-9]{1,5})?(\\/.*)?)$\"\n    return True if re.match(regex, url) else False\n\nif __name__ == \"__main__\":\n    print(is_url_valid(\"www.google.com\"))"
    },
    {
      "rank": 100,
      "score": 3.0,
      "candidate": "import re\n\n\ndef is_valid_url(url):\n    regex = r\"(?i)\\b((?:[a-z][\\w-]+:(?:/{1,3}|[a-z0-9%])|www\\d{0,3}[.]|[a-z0-9.\\-]+[.][a-z]{2,4}/)(?:[^\\s()<>]+|\\(([^\\s()<>]+|(\\([^\\s()<>]+\\)))*\\))+(?:\\(([^\\s()<>]+|(\\([^\\s()<>]+\\)))*\\)|[^\\s`!()\\[\\]{};:'\\\".,<>?\u00ab\u00bb\u201c\u201d\u2018\u2019]))\"\n    return re.match(regex, url) is not None\n\n\nif __name__ == \"__main__\":\n    assert is_valid_url(\"https://www.google.com\") == True\n    assert is_valid_url(\"http://www.google.com\") == True\n    assert is_valid_url(\"http://www.google.com/foo\") == True\n    assert is_valid_url(\"http://www.google.com/foo/bar\") == True\n    assert is_valid_url(\"http://www.google.com/foo/bar/\") == True\n    assert is_valid_url(\"http://www.google.com/foo/bar?q=bar\") == True\n    assert is_valid_url(\"http://www.google.com/foo/bar?q=bar/\") == True\n    assert is_valid_url(\"http://www.google.com/foo/bar#bar\") == True\n    assert is_valid_url(\"http://www.google.com/foo/bar#bar/\") == True\n    assert is_valid_url(\"http://www.google.com/foo/bar/ba\") == True\n    assert is_valid_url(\"http://www.google.com/foo/bar/ba/\") == True\n    assert is_valid_url(\"http://www.google.com/foo/bar/ba/boo\") == True\n    assert is_valid_url(\"http://www.google.com/foo/bar/ba/boo/\") == True\n    assert is_valid"
    }
  ]
}