{
  "timestamp": "2025-09-15T01:26:42.314467",
  "method": "improved_llm_judge",
  "judge_model": "codellama/CodeLlama-7b-Python-hf",
  "target_model": "codellama-7b",
  "dataset": "mbpp",
  "problem_number": 414,
  "total_candidates": 100,
  "results": [
    {
      "rank": 1,
      "score": 10.0,
      "candidate": "from collections import defaultdict\n\ndef count_sublists(arr, target):\n    count = 0\n    counter = defaultdict(int)\n    counter[0] = 1\n    for num in arr:\n        count += counter[num]\n        counter[num] += 1\n\n    return count\n\n\nif __name__ == '__main__':\n    print(count_sublists([1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4], 2))"
    },
    {
      "rank": 2,
      "score": 10.0,
      "candidate": "def count_elements(arr, element):\n    count = 0\n    for i in range(len(arr)):\n        if arr[i] == element:\n            count += 1\n    return count\n\n\ndef main():\n    arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    print(count_elements(arr, 5))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 3,
      "score": 10.0,
      "candidate": "def count_elements(nums, target):\n    count = 0\n    for i in range(len(nums)):\n        j = i\n        while j < len(nums):\n            if nums[j] == target:\n                count += 1\n            j += 1\n    return count\n\n\nif __name__ == \"__main__\":\n    nums = [1, 2, 3, 2, 4, 5, 2]\n    target = 2\n    print(count_elements(nums, target))"
    },
    {
      "rank": 4,
      "score": 10.0,
      "candidate": "from typing import List\n\n\ndef count_sublists(nums: List[int], target: int) -> int:\n    \"\"\"\n    Time Complexity: O(n)\n    \"\"\"\n    count = 0\n    count_with_target = 0\n\n    for num in nums:\n        if num == target:\n            count_with_target += 1\n        count += count_with_target\n\n    return count\n\n\nif __name__ == \"__main__\":\n    assert count_sublists([1, 1, 2, 2, 3], 2) == 4\n    assert count_sublists([1, 1, 2, 4, 4, 4], 4) == 4"
    },
    {
      "rank": 5,
      "score": 10.0,
      "candidate": "from collections import defaultdict\n\n\ndef count_sublists(nums: list[int], target: int) -> int:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(n)\n    \"\"\"\n    # Map each num to a list of indices where it occurs\n    num_to_indices = defaultdict(list)\n    for index, num in enumerate(nums):\n        num_to_indices[num].append(index)\n\n    # Map each index to the number of sublists containing that index\n    index_to_sublists = defaultdict(int)\n    for index, num in enumerate(nums):\n        for sublist_index in num_to_indices[num]:\n            # The sublist containing this index starts at the index\n            sublist_index = max(sublist_index, index)\n            # The sublist containing this index ends at the last occurrence of num\n            sublist_end = num_to_indices[num][-1]\n            index_to_sublists[sublist_index] += 1\n            index_to_sublists[sublist_end] -= 1\n\n    # Count the number of sublists containing target\n    count = 0\n    for sublist_count in index_to_sublists.values():\n        count += sublist_count\n    return count\n\n\nif __name__ == \"__main__\":\n    assert count_sublists([], 0) == 0\n    assert count_sublists([0], 0) == 1\n    assert count_sublists([0], 1) == 0\n    assert count_sublists([0, 0], 0) == 2\n    assert count_sublists([0, 0], 1) == 0\n    assert count_sublists([1, 2, 1], 1) == 2\n    assert count_sublists([1, 2, 1], 2) == 2\n    assert count_sublists([1, 2, 1], 3) == 0\n    assert count_sublists([1, 2, 1, 3, 4], 1) == 3\n    assert count_sub"
    },
    {
      "rank": 6,
      "score": 10.0,
      "candidate": "from collections import Counter\n\n\ndef count_sublists(nums, target):\n    \"\"\"\n    :type nums: List[int]\n    :type target: int\n    :rtype: int\n    \"\"\"\n    # Time: O(n)\n    # Space: O(n)\n    counter = Counter(nums)\n    count = 0\n\n    for num in nums:\n        if num == target:\n            count += 1\n\n        if num < target:\n            count += counter[target]\n\n    return count\n\n\ndef test_count_sublists():\n    assert count_sublists([1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2], 2) == 13\n    assert count_sublists([1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2], 2) == 12\n    assert count_sublists([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], 1) == 12\n    assert count_sublists([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], 1) == 12\n    assert count_"
    },
    {
      "rank": 7,
      "score": 10.0,
      "candidate": "def count_sublists(lst, elem):\n    \"\"\"\n    :param lst: list\n    :param elem: element to be counted\n    :return: int\n    \"\"\"\n    count = 0\n    for i in range(len(lst)):\n        sublst = lst[i:]\n        if elem in sublst:\n            count += 1\n    return count\n\n\nif __name__ == \"__main__\":\n    print(count_sublists([1, 2, 2, 2, 3, 2], 2))"
    },
    {
      "rank": 8,
      "score": 10.0,
      "candidate": "def count_sublists(elements, target):\n    count = 0\n    for i in range(len(elements)):\n        if elements[i] == target:\n            count += 1\n        elif i < len(elements) - 1:\n            if elements[i] < target and elements[i + 1] > target:\n                count += 1\n    return count\n\n\nprint(count_sublists([1, 2, 3, 4, 5, 3, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3))"
    },
    {
      "rank": 9,
      "score": 10.0,
      "candidate": "from collections import defaultdict\n\ndef count_sublists_with(lst, elem):\n    # O(n)\n    # O(n) space\n\n    count = 0\n    sublists = defaultdict(int)\n    for i, e in enumerate(lst):\n        if e == elem:\n            count += sublists[i]\n        sublists[i+1] = sublists[i] + 1\n    return count\n\n\n\nif __name__ == '__main__':\n    lst = [1, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 8, 8, 8, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10"
    },
    {
      "rank": 10,
      "score": 10.0,
      "candidate": "from collections import defaultdict\n\n\n# Time complexity: O(n)\n# Space complexity: O(n)\ndef count_sublists(nums, elem):\n    # Create a dictionary to store the frequency of elements in a list\n    freq_dict = defaultdict(int)\n\n    for num in nums:\n        freq_dict[num] += 1\n\n    # Create a dictionary to store the frequency of each element in sublists\n    freq_list = defaultdict(int)\n\n    for num in nums:\n        freq_list[num] += 1\n\n    # Create a dictionary to store the number of sublists that contain the particular element\n    count_dict = defaultdict(int)\n\n    for num in freq_dict:\n        count_dict[num] = freq_list[num] * freq_dict[num]\n\n    return sum(count_dict[elem])\n\n\n# Time complexity: O(n)\n# Space complexity: O(n)\ndef count_sublists_2(nums, elem):\n    count = 0\n    count_dict = defaultdict(int)\n\n    for num in nums:\n        if num == elem:\n            count += count_dict[elem] + 1\n        count_dict[num] += 1\n\n    return count\n\n\n# Time complexity: O(n)\n# Space complexity: O(n)\ndef count_sublists_3(nums, elem):\n    count = 0\n    count_dict = defaultdict(int)\n\n    for num in nums:\n        if num == elem:\n            count += count_dict[elem] + 1\n        count_dict[num] += 1\n\n    return count\n\n\n# Time complexity: O(n)\n# Space complexity: O(n)\ndef count_sublists_4(nums, elem):\n    count = 0\n    count_dict = defaultdict(int)\n\n    for num in nums:\n        if num == elem:\n            count += count_dict[elem] + 1\n        count_dict[num] += 1\n\n    return count\n\n\n# Time complexity: O(n)"
    },
    {
      "rank": 11,
      "score": 8.0,
      "candidate": "def count_element(lst, element):\n    count = 0\n    for sublist in lst:\n        if element in sublist:\n            count += 1\n    return count\n\n\nif __name__ == '__main__':\n    lst = [[1, 2, 3], [2, 3], [2, 3], [3, 4, 5]]\n    element = 2\n    print(count_element(lst, element))"
    },
    {
      "rank": 12,
      "score": 8.0,
      "candidate": "def count_sublists(arr, x):\n    count = 0\n\n    for i in range(len(arr)):\n        j = i\n\n        while j < len(arr):\n            if arr[j] == x:\n                count += 1\n\n            j += 1\n\n    return count\n\n\nprint(count_sublists([1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2], 2))"
    },
    {
      "rank": 13,
      "score": 8.0,
      "candidate": "def count_sublists(lst, el):\n    \"\"\"\n    Count the number of sublists of lst containing el.\n    \"\"\"\n    count = 0\n    for i in range(len(lst)):\n        if el in lst[i:]:\n            count += 1\n    return count\n\n\nif __name__ == '__main__':\n    assert count_sublists([1, 2, 3, 4, 5, 6, 7], 3) == 3\n    assert count_sublists([1, 2, 3, 4, 5, 6, 7], 8) == 0\n    assert count_sublists([1, 1, 1, 1, 1, 1, 1], 1) == 7"
    },
    {
      "rank": 14,
      "score": 8.0,
      "candidate": "from collections import defaultdict\n\n\ndef sublists_counting(array, element):\n    # Write your code here.\n    # count = 0\n    # for i in range(len(array)):\n    #     if array[i] == element:\n    #         count += 1\n    # return count\n\n    # count = 0\n    # for i in range(len(array)):\n    #     count += array.count(array[i])\n    # return count\n\n    # count = 0\n    # for i in range(len(array)):\n    #     count += array.count(element)\n    # return count\n\n    # count = 0\n    # for i in range(len(array)):\n    #     if array[i] == element:\n    #         count += 1\n    # return count\n\n    # count = 0\n    # for i in range(len(array)):\n    #     if array[i] == element:\n    #         count += 1\n    # return count\n\n    # count = 0\n    # for i in range(len(array)):\n    #     if array[i] == element:\n    #         count += 1\n    # return count\n\n    # count = 0\n    # for i in range(len(array)):\n    #     if array[i] == element:\n    #         count += 1\n    # return count\n\n    # count = 0\n    # for i in range(len(array)):\n    #     if array[i] == element:\n    #         count += 1\n    # return count\n\n    # count = 0\n    # for i in range(len(array)):\n    #     if array[i] == element:\n    #         count += 1\n    # return count\n\n    # count = 0\n    # for i in range(len(array)):\n    #     if array[i] == element:\n    #         count += 1\n    # return count\n\n    # count = 0\n    # for i in range(len(array)):\n    #     if array[i] == element:\n    #         count += 1\n    # return count\n\n    # count"
    },
    {
      "rank": 15,
      "score": 8.0,
      "candidate": "def sublist_count(lst, target):\n    count = 0\n    for idx, val in enumerate(lst):\n        if val == target:\n            count += 1\n            for j in range(idx, len(lst)):\n                if lst[j] == target:\n                    count += 1\n    return count\n\nprint(sublist_count([2, 4, 2, 4, 2, 4, 2, 4], 4))"
    },
    {
      "rank": 16,
      "score": 8.0,
      "candidate": "from collections import defaultdict\n\n\ndef count_element(lst, element):\n    \"\"\"Count the number of sublists containing a particular element.\n\n    Time Complexity: O(n)\n    Space Complexity: O(n)\n\n    Args:\n        lst: List of integers.\n        element: Integer to count.\n\n    Returns:\n        The number of sublists containing the element.\n    \"\"\"\n    # Edge\n    if not lst:\n        return 0\n\n    count = 0\n    count_sublists = defaultdict(int)\n    for i in range(len(lst)):\n        # Add the current element to the current sublist\n        count_sublists[i] += lst[i]\n\n        # Check if the current sublist contains the element\n        if element in count_sublists:\n            count += 1\n\n    return count\n\n\ndef main():\n    lst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    print(count_element(lst, 3))\n    print(count_element(lst, 5))\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 17,
      "score": 8.0,
      "candidate": "from collections import Counter\n\ndef count_sublists(lst, el):\n    \"\"\"\n    Time complexity: O(n).\n    Space complexity: O(1).\n    \"\"\"\n    count = 0\n    count_el = 0\n    count_non_el = 0\n\n    for i in range(len(lst)):\n        if lst[i] == el:\n            count_el += 1\n        else:\n            count_non_el += 1\n\n        if i - count_non_el == count_el:\n            count += 1\n\n    return count\n\n\ndef main():\n    lst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1]\n    print count_sublists(lst, 1)\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 18,
      "score": 8.0,
      "candidate": "def count_element_in_sublists(lst, element):\n    \"\"\"\n    :param lst: list of integers\n    :param element: integer\n    :return: integer\n    \"\"\"\n    # count = 0\n    # for sublist in lst:\n    #     if element in sublist:\n    #         count += 1\n    # return count\n\n    count = 0\n    for sublist in lst:\n        count += sublist.count(element)\n    return count\n\n\nprint(count_element_in_sublists([[1, 2, 3], [1, 2, 3], [1, 2, 3, 4]], 1))"
    },
    {
      "rank": 19,
      "score": 8.0,
      "candidate": "from typing import List\n\n\ndef count_elements(lst: List[int], target: int) -> int:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(1)\n    \"\"\"\n    count = 0\n    prev = None\n\n    for i in lst:\n        if i == target:\n            if prev is None:\n                count += 1\n            else:\n                count += 2\n        prev = i\n\n    return count\n\n\nif __name__ == \"__main__\":\n    assert count_elements([1, 2, 2, 3, 4, 5], 2) == 3"
    },
    {
      "rank": 20,
      "score": 8.0,
      "candidate": "def count_occurrences(array, element):\n    count = 0\n    for i in range(len(array)):\n        if array[i] == element:\n            count += 1\n    return count\n\n\nassert count_occurrences([1, 2, 2, 2, 2, 3, 3, 4, 5], 2) == 5\nassert count_occurrences([1, 2, 2, 2, 2, 3, 3, 4, 5], 3) == 2\nassert count_occurrences([1, 2, 2, 2, 2, 3, 3, 4, 5], 4) == 1\nassert count_occurrences([1, 2, 2, 2, 2, 3, 3, 4, 5], 5) == 1\nassert count_occurrences([1, 2, 2, 2, 2, 3, 3, 4, 5], 6) == 0"
    },
    {
      "rank": 21,
      "score": 8.0,
      "candidate": "from collections import Counter\n\ndef count_sublists(arr, elem):\n    count = 0\n    for i in range(len(arr)):\n        if arr[i] == elem:\n            count += 1\n    return count\n\ndef count_sublists_counter(arr, elem):\n    c = Counter(arr)\n    return c[elem]\n\ndef main():\n    arr = [1, 1, 2, 2, 2, 2, 3, 3, 3]\n    print(count_sublists(arr, 2))\n    print(count_sublists_counter(arr, 2))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 22,
      "score": 8.0,
      "candidate": "from collections import defaultdict\n\n\ndef count_element(arr, element):\n    \"\"\"\n    :param arr: list of integers\n    :param element: integer to find\n    :return: int\n    \"\"\"\n    # O(n)\n    # O(n)\n    counter = defaultdict(int)\n    for num in arr:\n        counter[num] += 1\n    return counter[element]\n\n\nif __name__ == \"__main__\":\n    print(count_element([1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3], 2))"
    },
    {
      "rank": 23,
      "score": 8.0,
      "candidate": "def count_sublists(arr, element):\n    count = 0\n    for i in range(len(arr)):\n        current = arr[i]\n        count += count_sublists_helper(arr[i+1:], current, element)\n    return count\n\n\ndef count_sublists_helper(arr, current, element):\n    if not arr:\n        return current == element\n    if current == element:\n        return 1 + count_sublists_helper(arr[1:], current, element)\n    else:\n        return count_sublists_helper(arr[1:], current, element)\n\n\ndef test_count_sublists():\n    assert count_sublists([1, 2, 3, 4, 5, 2, 2, 2, 2], 2) == 5\n    assert count_sublists([1, 2, 3, 4, 5, 2, 2, 2, 2], 4) == 1\n    assert count_sublists([1, 2, 3, 4, 5, 2, 2, 2, 2], 3) == 2\n    assert count_sublists([1, 2, 3, 4, 5, 2, 2, 2, 2], 1) == 1\n    assert count_sublists([1, 2, 3, 4, 5, 2, 2, 2, 2], 5) == 1\n    assert count_sublists([1, 2, 3, 4, 5, 2, 2, 2, 2], 10) == 0\n\n\nif __name__ == '__main__':\n    test_count_sublists()"
    },
    {
      "rank": 24,
      "score": 8.0,
      "candidate": "from typing import List\n\n\ndef count_sublists(nums: List[int], target: int) -> int:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(1)\n    \"\"\"\n\n    def count_sublists_helper(nums: List[int], target: int, idx: int) -> int:\n        if idx >= len(nums):\n            return 0\n\n        if nums[idx] == target:\n            return 1 + count_sublists_helper(nums, target, idx + 1)\n\n        return count_sublists_helper(nums, target, idx + 1)\n\n    return count_sublists_helper(nums, target, 0)\n\n\nif __name__ == \"__main__\":\n    assert count_sublists([1, 2, 2, 2, 2, 3, 4, 2], 2) == 5"
    },
    {
      "rank": 25,
      "score": 8.0,
      "candidate": "from collections import defaultdict\n\n\ndef count_elements(A, k):\n    \"\"\"\n    :type A: List[int]\n    :type k: int\n    :rtype: int\n    \"\"\"\n    if not A:\n        return 0\n    result = 0\n    sublist_length = [1]\n    for i in range(1, len(A)):\n        if A[i] == A[i - 1]:\n            sublist_length[i - 1] += 1\n        else:\n            sublist_length.append(1)\n    sublist_length.append(1)\n    sublist_length_dict = defaultdict(int)\n    for i in range(len(sublist_length)):\n        sublist_length_dict[sublist_length[i]] += 1\n    for i in range(len(A)):\n        if A[i] == k:\n            result += sublist_length_dict[sublist_length[i]]\n    return result\n\n\nif __name__ == '__main__':\n    print(count_elements([1, 1, 2, 3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 7, 7, 7], 7))"
    },
    {
      "rank": 26,
      "score": 8.0,
      "candidate": "def count_sublists(lst, element):\n    # Base case\n    if lst == []:\n        return 0\n\n    # Recursive case\n    if lst[0] == element:\n        return 1 + count_sublists(lst[1:], element)\n    else:\n        return count_sublists(lst[1:], element)\n\n\nprint(count_sublists([1, 2, 3, 4, 5, 1, 2, 3], 1))"
    },
    {
      "rank": 27,
      "score": 8.0,
      "candidate": "def count_elements(arr, element):\n    count = 0\n    for i in range(len(arr)):\n        if arr[i] == element:\n            count += 1\n    return count\n\n\ndef main():\n    print(count_elements([1, 2, 2, 3, 4, 5, 6], 2))\n    print(count_elements([1, 2, 2, 3, 4, 5, 6], 3))\n    print(count_elements([1, 2, 2, 3, 4, 5, 6], 4))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 28,
      "score": 8.0,
      "candidate": "from typing import List\n\n\ndef count_elements(elements: List[int], elem: int) -> int:\n    \"\"\"Count elements in list.\n\n    Time Complexity: O(n)\n    Space Complexity: O(1)\n    \"\"\"\n    result = 0\n\n    for i in range(len(elements)):\n        if elements[i] == elem:\n            result += 1\n\n    return result\n\n\nif __name__ == \"__main__\":\n    assert count_elements([1, 2, 3, 4, 5], 1) == 1\n    assert count_elements([1, 1, 2, 2, 3, 3, 4, 4, 5, 5], 2) == 2\n    assert count_elements([1, 2, 3, 4, 5], 2) == 0\n    assert count_elements([1, 1, 1, 1, 1, 1], 1) == 6"
    },
    {
      "rank": 29,
      "score": 8.0,
      "candidate": "from typing import List\n\n\ndef count_element(nums: List[int], target: int) -> int:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(1)\n    \"\"\"\n    if not nums:\n        return 0\n\n    count = 0\n    prev_index = 0\n\n    for index, num in enumerate(nums):\n        if num == target:\n            count += (index - prev_index) + 1\n            prev_index = index\n\n    return count\n\n\nif __name__ == \"__main__\":\n    assert count_element([], 2) == 0\n    assert count_element([2, 1, 2, 2, 2, 3, 4, 2], 2) == 5"
    },
    {
      "rank": 30,
      "score": 8.0,
      "candidate": "def count_sublists(L, e):\n    \"\"\"Return the number of sublists in list L that contain element e.\"\"\"\n    count = 0\n    for i in range(len(L)):\n        if L[i] == e:\n            count += 1\n    return count\n\ndef count_sublists_2(L, e):\n    \"\"\"Return the number of sublists in list L that contain element e.\"\"\"\n    count = 0\n    for i in range(len(L)):\n        if L[i] == e:\n            count += 1\n        if i < len(L) - 1:\n            if L[i] != e and L[i + 1] == e:\n                count += 1\n    return count\n\ndef count_sublists_3(L, e):\n    \"\"\"Return the number of sublists in list L that contain element e.\"\"\"\n    count = 0\n    for i in range(len(L)):\n        if L[i] == e:\n            count += 1\n        if i < len(L) - 1:\n            if L[i] != e and L[i + 1] == e:\n                count += 1\n    return count\n\ndef count_sublists_4(L, e):\n    \"\"\"Return the number of sublists in list L that contain element e.\"\"\"\n    count = 0\n    for i in range(len(L)):\n        if L[i] == e:\n            count += 1\n        if i < len(L) - 1:\n            if L[i] != e and L[i + 1] == e:\n                count += 1\n    return count\n\ndef count_sublists_5(L, e):\n    \"\"\"Return the number of sublists in list L that contain element e.\"\"\"\n    count = 0\n    for i in range(len(L)):\n        if L[i] == e:\n            count += 1\n        if i < len(L) - 1:\n            if L[i] != e and L[i + 1] == e:\n                count += 1\n    return count\n\ndef count_sublists_6(L, e):"
    },
    {
      "rank": 31,
      "score": 8.0,
      "candidate": "def sublist_count(lst, x):\n    \"\"\"\n    We have to count how many sublists contain x.\n    Let's count how many times the element appears in the list,\n    and how many times the element appears in the sublists.\n    We can do this by counting the number of times the element appears in the\n    list and how many times the element appears in the sublist.\n    This can be done by counting the number of times the element appears in the\n    list and how many times the element appears in the sublists.\n    This can be done by counting the number of times the element appears in the\n    list and how many times the element appears in the sublists.\n    This can be done by counting the number of times the element appears in the\n    list and how many times the element appears in the sublists.\n    \"\"\"\n    count = 0\n    for i in range(len(lst)):\n        if lst[i] == x:\n            count += 1\n    return count\n\ndef sublist_count2(lst, x):\n    \"\"\"\n    We have to count how many sublists contain x.\n    Let's count how many times the element appears in the list,\n    and how many times the element appears in the sublists.\n    We can do this by counting the number of times the element appears in the\n    list and how many times the element appears in the sublists.\n    This can be done by counting the number of times the element appears in the\n    list and how many times the element appears in the sublists.\n    This can be done by counting the number of times the element appears in the\n    list and how many times the element appears in the sublists.\n    \"\"\"\n    count = 0\n    for i in range(len(lst)):\n        if lst[i] == x:\n            count += 1\n    return count\n\ndef sublist_count3(lst, x):\n    \"\"\"\n    We have to count how many sublists contain x.\n    Let's count how many times the element appears in the list,\n    and how many times the element appears in the sublists.\n    We can do this by counting the number of times the element appears in the\n    list and how many times the element appears in the sublists."
    },
    {
      "rank": 32,
      "score": 8.0,
      "candidate": "from collections import Counter\n\n\ndef count_sublists(lst, elem):\n    \"\"\"Returns the number of sublists containing the given element.\"\"\"\n    return sum(count_elem in Counter(sublst).values()\n               for count_elem, sublst in enumerate(lst, 1))\n\n\ndef test_count_sublists():\n    \"\"\"Test count_sublists.\"\"\"\n    assert count_sublists([[1, 2], [2, 3], [2, 2], [2, 1]], 2) == 4\n    assert count_sublists([[1, 2], [2, 3], [2, 2], [2, 1]], 3) == 1\n    assert count_sublists([[1, 2], [2, 3], [2, 2], [2, 1]], 4) == 0\n    assert count_sublists([[1], [1], [1]], 1) == 3\n    assert count_sublists([[1], [1], [1]], 2) == 0"
    },
    {
      "rank": 33,
      "score": 8.0,
      "candidate": "from collections import Counter\n\n\ndef count_elements(nums, element):\n    c = Counter(nums)\n    c[element] += 1\n    res = 0\n    for i in c.values():\n        res += (i * (i - 1)) // 2\n    return res\n\n\nif __name__ == \"__main__\":\n    nums = [1, 1, 2, 2, 3]\n    print(count_elements(nums, 2))"
    },
    {
      "rank": 34,
      "score": 8.0,
      "candidate": "def count_occurrence(l, element):\n    count = 0\n    for i in range(len(l)):\n        if element in l[i]:\n            count += 1\n    return count\n\n\nl = [[1, 2, 3], [4, 5], [1, 2, 3], [4, 5], [1, 2, 3], [4, 5], [1, 2, 3]]\nprint(count_occurrence(l, 5))"
    },
    {
      "rank": 35,
      "score": 8.0,
      "candidate": "def count_sublists(lst, element):\n    \"\"\"\n    Return the number of sublists containing a particular element.\n\n    >>> count_sublists([1, 2, 2, 3, 4], 2)\n    2\n    >>> count_sublists([1, 2, 3, 4, 4, 5], 4)\n    2\n    >>> count_sublists([1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5], 1)\n    8\n    \"\"\"\n    count = 0\n\n    for i in range(len(lst)):\n        if lst[i] == element:\n            count += 1\n        if i + 1 < len(lst) and lst[i] != element:\n            count += 1\n\n    return count\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 36,
      "score": 8.0,
      "candidate": "def count_elem(lst, elem):\n    count = 0\n    for i in range(len(lst)):\n        if lst[i] == elem:\n            count += 1\n    return count\n\n\nif __name__ == '__main__':\n    print(count_elem([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5))"
    },
    {
      "rank": 37,
      "score": 8.0,
      "candidate": "def count_sublists(lst, target):\n    counter = 0\n    for i in range(len(lst)):\n        if lst[i] == target:\n            counter += 1\n        if i != len(lst) - 1:\n            if lst[i] != target and lst[i + 1] == target:\n                counter += 1\n    return counter\n\n\ndef test_sublist_counter():\n    lst = [1, 2, 2, 3, 3, 3, 3, 4, 5]\n    assert count_sublists(lst, 3) == 4\n    assert count_sublists(lst, 2) == 2\n    assert count_sublists(lst, 1) == 1\n    assert count_sublists(lst, 4) == 1\n    assert count_sublists(lst, 5) == 1\n    assert count_sublists(lst, 6) == 0\n\n\nif __name__ == '__main__':\n    test_sublist_counter()"
    },
    {
      "rank": 38,
      "score": 8.0,
      "candidate": "def sublist_count(lst, elem):\n    count = 0\n    for i in range(len(lst)):\n        for j in range(i, len(lst)):\n            if lst[j] == elem:\n                count += 1\n    return count\n\n\nif __name__ == \"__main__\":\n    lst = [1, 2, 3, 4, 5, 2, 3]\n    print(sublist_count(lst, 2))"
    },
    {
      "rank": 39,
      "score": 8.0,
      "candidate": "def count_sublists(lst, element):\n    count = 0\n    for i in range(len(lst)):\n        if lst[i] == element:\n            count += 1\n    return count\n\n\ndef test_count_sublists():\n    assert count_sublists([1, 2, 1, 1], 1) == 3\n    assert count_sublists([1, 2, 1, 1], 2) == 1\n    assert count_sublists([1, 1, 1, 1], 1) == 4\n    assert count_sublists([1, 2, 3, 4], 1) == 0\n    assert count_sublists([1, 2, 3, 4], 2) == 1\n    assert count_sublists([1, 2, 3, 4], 3) == 1\n    assert count_sublists([1, 2, 3, 4], 4) == 1\n    assert count_sublists([1, 2, 3, 4], 5) == 0"
    },
    {
      "rank": 40,
      "score": 8.0,
      "candidate": "def sublist_count(lst, target):\n    count = 0\n    for i in range(len(lst)):\n        sublst = lst[i:]\n        if target in sublst:\n            count += 1\n    return count\n\n\nif __name__ == \"__main__\":\n    lst = [1, 2, 3, 4, 5, 5, 5, 5]\n    print(sublist_count(lst, 5))"
    },
    {
      "rank": 41,
      "score": 8.0,
      "candidate": "def count_list(lst, element):\n    count = 0\n    for i in range(len(lst)):\n        if element in lst[i]:\n            count += 1\n    return count\n\n\nif __name__ == \"__main__\":\n    lst = [[1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3]]\n    print(count_list(lst, 2))"
    },
    {
      "rank": 42,
      "score": 8.0,
      "candidate": "from collections import defaultdict\n\ndef sublist_counter(lst, target):\n    \"\"\"\n    Counts the number of sublists containing a particular element.\n    :param lst: list of integers\n    :param target: target element\n    :return: number of sublists containing the element\n    \"\"\"\n    counts = defaultdict(int)\n    total = 0\n    for elem in lst:\n        counts[elem] += 1\n        if elem == target:\n            total += counts[elem]\n    return total\n\n\nprint(sublist_counter([1, 2, 2, 2, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 5], 2))\nprint(sublist_counter([1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4, 5, 5, 5, 5, 5], 2))"
    },
    {
      "rank": 43,
      "score": 8.0,
      "candidate": "def count_sublists(arr, x):\n    count = 0\n\n    for i in range(len(arr)):\n        if arr[i] == x:\n            count += 1\n\n        if arr[i] > x:\n            break\n\n    return count\n\n\ndef main():\n    print(count_sublists([1, 2, 3, 4, 5], 3))\n    print(count_sublists([1, 2, 3, 4, 5], 4))\n    print(count_sublists([1, 2, 3, 4, 5], 5))\n    print(count_sublists([1, 2, 3, 4, 5], 6))\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 44,
      "score": 8.0,
      "candidate": "from collections import Counter\n\n\ndef count_sublists(arr, elem):\n    count = 0\n    start, end = 0, 0\n    count_arr = Counter(arr)\n    while end < len(arr):\n        if arr[end] == elem:\n            count += 1\n        while arr[end] != elem and end > start:\n            end -= 1\n        end += 1\n        start = end - (end - start)\n        count += count_arr[elem] - (end - start)\n    return count\n\n\nif __name__ == \"__main__\":\n    print(count_sublists([1, 2, 4, 4, 4, 4, 5, 7], 4))"
    },
    {
      "rank": 45,
      "score": 8.0,
      "candidate": "def count_sublists(lst, el):\n    count = 0\n    for i in range(len(lst)):\n        if el in lst[i:]:\n            count += 1\n    return count\n\n\ndef test_count_sublists():\n    assert count_sublists([1, 2, 3, 4, 5, 1, 2, 3], 1) == 2\n    assert count_sublists([1, 2, 3, 4, 5, 1, 2, 3], 2) == 2\n    assert count_sublists([1, 2, 3, 4, 5, 1, 2, 3], 3) == 2\n    assert count_sublists([1, 2, 3, 4, 5, 1, 2, 3], 4) == 1\n    assert count_sublists([1, 2, 3, 4, 5, 1, 2, 3], 5) == 1\n    assert count_sublists([1, 2, 3, 4, 5, 1, 2, 3], 6) == 0"
    },
    {
      "rank": 46,
      "score": 8.0,
      "candidate": "from typing import List, Optional\n\n\ndef count_element(arr: List[int], target: int) -> int:\n    \"\"\"\n    Time Complexity: O(n)\n    \"\"\"\n    count = 0\n\n    for i in range(len(arr)):\n        count += arr[i:].count(target)\n\n    return count\n\n\ndef count_element_efficient(arr: List[int], target: int) -> int:\n    \"\"\"\n    Time Complexity: O(n)\n    \"\"\"\n    count = 0\n    sub_count = 0\n\n    for i in range(len(arr)):\n        if arr[i] == target:\n            sub_count += 1\n        else:\n            count += sub_count\n\n    return count + sub_count\n\n\nif __name__ == \"__main__\":\n    assert count_element([1, 2, 2, 2, 2, 3, 4, 7, 7, 8, 8, 8, 8, 8, 8], 8) == 6\n    assert count_element_efficient([1, 2, 2, 2, 2, 3, 4, 7, 7, 8, 8, 8, 8, 8, 8], 8) == 6"
    },
    {
      "rank": 47,
      "score": 8.0,
      "candidate": "def count_element(arr, element):\n    count = 0\n    for i in range(len(arr)):\n        if arr[i] == element:\n            count += 1\n    return count\n\n\ndef main():\n    arr = [1, 2, 2, 3, 4, 5, 2]\n    print(count_element(arr, 2))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 48,
      "score": 8.0,
      "candidate": "from typing import List\n\n\ndef count_sublists(lst: List, element: int) -> int:\n    \"\"\"Counts sublists containing a particular element.\"\"\"\n    count = 0\n\n    for i in range(len(lst)):\n        if lst[i] == element:\n            count += 1\n\n        if i < len(lst) - 1:\n            if lst[i] < lst[i + 1]:\n                count += 1\n\n    return count\n\n\nif __name__ == \"__main__\":\n    assert count_sublists([4, 6, 4, 5, 4], 4) == 4\n    assert count_sublists([4, 6, 4, 5, 4], 5) == 1\n    assert count_sublists([4, 4, 4, 4, 4], 4) == 5"
    },
    {
      "rank": 49,
      "score": 8.0,
      "candidate": "def count_sublists(nums, k):\n    if not nums:\n        return 0\n\n    count = 0\n    count += 1 if k in nums else 0\n\n    for i in range(1, len(nums)):\n        if nums[i] == k and nums[i - 1] != k:\n            count += 1\n        elif nums[i] != k and nums[i - 1] == k:\n            count += 1\n\n    return count\n\n\nassert count_sublists([1, 2, 3, 4, 5], 3) == 2\nassert count_sublists([1, 2, 3, 3, 3, 3], 3) == 6\nassert count_sublists([1, 2, 3, 4, 5, 6, 7, 8, 9], 3) == 6\nassert count_sublists([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3) == 7"
    },
    {
      "rank": 50,
      "score": 8.0,
      "candidate": "def count_elements(nums, target):\n    if not nums:\n        return 0\n\n    count = 0\n    sublist_count = 0\n    for i in range(len(nums)):\n        if nums[i] == target:\n            sublist_count += 1\n        elif nums[i] > target:\n            count += sublist_count\n            sublist_count = 0\n\n    return count + sublist_count\n\n\nnums = [1, 2, 3, 3, 3, 3, 4, 5, 6]\ntarget = 3\nprint(count_elements(nums, target))"
    },
    {
      "rank": 51,
      "score": 8.0,
      "candidate": "def sublist_count(lst, element):\n    \"\"\"\n    This function counts the number of sublists in a list that contain a particular element.\n\n    >>> sublist_count([1, 2, 3, 4, 5], 4)\n    2\n    >>> sublist_count([1, 2, 3, 4, 5], 1)\n    2\n    >>> sublist_count([1, 2, 3, 4, 5], 3)\n    2\n    >>> sublist_count([1, 2, 3, 4, 5], 5)\n    2\n    >>> sublist_count([1, 2, 3, 4, 5], 2)\n    2\n    >>> sublist_count([1, 2, 3, 4, 5], 6)\n    0\n    \"\"\"\n    count = 0\n    for i in range(len(lst)):\n        if element in lst[i:]:\n            count += 1\n    return count\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 52,
      "score": 8.0,
      "candidate": "from collections import Counter\n\ndef count_element(nums, k):\n    \"\"\"\n    :type nums: List[int]\n    :type k: int\n    :rtype: int\n    \"\"\"\n    count = 0\n    for i in range(len(nums)):\n        if nums[i] == k:\n            count += 1\n    return count\n\ndef count_element_2(nums, k):\n    \"\"\"\n    :type nums: List[int]\n    :type k: int\n    :rtype: int\n    \"\"\"\n    count = 0\n    counter = Counter()\n    for i in range(len(nums)):\n        counter[nums[i]] += 1\n        if nums[i] == k:\n            count += 1\n    for i in range(len(nums)):\n        if nums[i] == k:\n            count += counter[nums[i]] - 1\n    return count\n\nprint(count_element_2([1, 2, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2"
    },
    {
      "rank": 53,
      "score": 8.0,
      "candidate": "from collections import defaultdict\n\ndef count_sublists(lst, elem):\n    \"\"\"Returns the number of sublists containing elem in lst.\"\"\"\n    sublists = defaultdict(int)\n    count = 0\n\n    for i, elem in enumerate(lst):\n        sublists[i] += 1\n        count += sublists[i]\n\n    return count\n\n\nprint(count_sublists([1, 2, 2, 2, 2, 3], 2))\nprint(count_sublists([1, 1, 2, 2, 2, 2, 2, 3], 2))\nprint(count_sublists([1, 1, 2, 4, 2, 2, 2, 2, 3], 2))"
    },
    {
      "rank": 54,
      "score": 8.0,
      "candidate": "class ListNode:\n    def __init__(self, x):\n        self.val = x\n        self.next = None\n\n\ndef count_sublists(head, target):\n    \"\"\"\n    :type head: ListNode\n    :type target: int\n    :rtype: int\n    \"\"\"\n    if head is None:\n        return 0\n\n    count = 0\n    current = head\n    prev = None\n    while current is not None:\n        if prev is not None and prev.val == target:\n            count += 1\n        if current.val == target:\n            count += 1\n        prev = current\n        current = current.next\n    return count"
    },
    {
      "rank": 55,
      "score": 8.0,
      "candidate": "def count_list_elements(arr, element):\n    count = 0\n    for i in range(len(arr)):\n        if arr[i] == element:\n            count += 1\n    return count\n\n\nassert count_list_elements([1, 1, 2, 1, 2, 3, 4, 5], 1) == 3\nassert count_list_elements([1, 1, 2, 1, 2, 3, 4, 5], 2) == 2\nassert count_list_elements([1, 1, 2, 1, 2, 3, 4, 5], 3) == 1\nassert count_list_elements([1, 1, 2, 1, 2, 3, 4, 5], 4) == 1\nassert count_list_elements([1, 1, 2, 1, 2, 3, 4, 5], 5) == 1\nassert count_list_elements([1, 1, 2, 1, 2, 3, 4, 5], 6) == 0"
    },
    {
      "rank": 56,
      "score": 8.0,
      "candidate": "class ListNode:\n    def __init__(self, value):\n        self.value = value\n        self.next = None\n\n\nclass LinkedList:\n    def __init__(self, head=None):\n        self.head = head\n\n    def append(self, value):\n        if self.head is None:\n            self.head = ListNode(value)\n            return\n\n        node = self.head\n        while node.next is not None:\n            node = node.next\n\n        node.next = ListNode(value)\n\n\ndef count_sublists(ll, value):\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(1)\n    \"\"\"\n    if ll.head is None:\n        return 0\n\n    count = 0\n    node = ll.head\n    while node is not None:\n        if node.value == value:\n            count += 1\n        node = node.next\n\n    node = ll.head\n    while node is not None:\n        if node.value == value:\n            node = node.next\n            continue\n\n        count += 1\n        node = node.next\n\n    return count\n\n\nif __name__ == \"__main__\":\n    ll = LinkedList()\n    ll.append(1)\n    ll.append(2)\n    ll.append(3)\n    ll.append(2)\n    ll.append(1)\n    print(count_sublists(ll, 2))"
    },
    {
      "rank": 57,
      "score": 8.0,
      "candidate": "from collections import Counter\n\n\ndef count_sublists(arr, target):\n    count = 0\n    for i, elem in enumerate(arr):\n        if elem == target:\n            count += arr[i:].count(elem)\n\n    return count\n\n\ndef test_count_sublists():\n    assert count_sublists([1, 1, 2, 2, 2, 2, 2, 3, 3, 3], 2) == 5\n    assert count_sublists([1, 1, 2, 4, 4, 4], 2) == 0\n\n\nif __name__ == '__main__':\n    test_count_sublists()"
    },
    {
      "rank": 58,
      "score": 8.0,
      "candidate": "from collections import Counter\n\ndef count_sublists(lst, element):\n    return Counter(lst).get(element, 0)\n\nif __name__ == '__main__':\n    print(count_sublists([1, 2, 4, 4, 4, 4], 4))"
    },
    {
      "rank": 59,
      "score": 8.0,
      "candidate": "from collections import defaultdict\n\n\ndef count_sublists(lst, item):\n    res = defaultdict(int)\n    count = 0\n    for i, elem in enumerate(lst):\n        if elem == item:\n            res[i] += 1\n            count += 1\n    for i in range(len(lst)):\n        for j in range(i + 1, len(lst)):\n            if lst[i] == item and lst[j] == item:\n                res[i] += 1\n                count += 1\n    return count\n\n\nif __name__ == \"__main__\":\n    lst = [1, 1, 2, 2, 3, 3, 3, 3]\n    assert count_sublists(lst, 3) == 4\n    assert count_sublists(lst, 2) == 3\n    assert count_sublists(lst, 1) == 3"
    },
    {
      "rank": 60,
      "score": 8.0,
      "candidate": "from collections import Counter\n\n\ndef count_element(lst, element):\n    count = 0\n    for i in range(len(lst)):\n        if lst[i] == element:\n            count += 1\n    return count\n\n\ndef count_element_in_list(lst, element):\n    return count_element(lst, element) + count_element(lst, element) - 1\n\n\ndef count_element_in_list_with_counter(lst, element):\n    c = Counter(lst)\n    return c[element] + c[element] - 1\n\n\nprint(count_element_in_list([1, 2, 3, 4, 5, 5, 5, 5, 5, 5, 6, 7], 5))\nprint(count_element_in_list_with_counter([1, 2, 3, 4, 5, 5, 5, 5, 5, 5, 6, 7], 5))"
    },
    {
      "rank": 61,
      "score": 8.0,
      "candidate": "from collections import defaultdict\n\ndef count_sublists(arr, target):\n    count = 0\n    for i in range(len(arr)):\n        if arr[i] == target:\n            count += 1\n    return count\n\ndef count_sublists_recursive(arr, target, start=0, count=0):\n    if start == len(arr):\n        return count\n    count += arr[start] == target\n    return count_sublists_recursive(arr, target, start+1, count)\n\ndef count_sublists_dict(arr, target):\n    counts = defaultdict(int)\n    for i in range(len(arr)):\n        counts[i] += 1\n        if arr[i] == target:\n            counts[i] += 1\n    total = 0\n    for i in range(len(arr)):\n        if counts[i] == 0:\n            continue\n        total += counts[i] * (counts[i] - 1) / 2\n    return total\n\ndef count_sublists_dict_recursive(arr, target, start=0, total=0):\n    if start == len(arr):\n        return total\n    if arr[start] == target:\n        total += 1\n    return count_sublists_dict_recursive(arr, target, start+1, total)\n\nimport random\n\ndef main():\n    arr = [random.randint(1, 5) for _ in range(10)]\n    target = random.randint(1, 5)\n    print(arr)\n    print(target)\n    print(\"Count:\", count_sublists(arr, target))\n    print(\"Count:\", count_sublists_recursive(arr, target))\n    print(\"Count:\", count_sublists_dict(arr, target))\n    print(\"Count:\", count_sublists_dict_recursive(arr, target))\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 62,
      "score": 8.0,
      "candidate": "def count_sublists(array, element):\n    if not array:\n        return 0\n\n    count = 0\n    for i in range(len(array)):\n        if array[i] == element:\n            count += 1\n\n        if i < len(array) - 1 and array[i] != element:\n            count += 1\n\n    return count\n\n\nif __name__ == \"__main__\":\n    assert count_sublists([1, 2, 3, 4, 5], 4) == 3\n    assert count_sublists([1, 1, 3, 3, 5, 5, 7, 7, 9], 7) == 4\n    assert count_sublists([1, 1, 2, 4, 4, 4, 4, 5, 7, 7, 8, 8, 8, 8, 8, 9], 8) == 9"
    },
    {
      "rank": 63,
      "score": 4.0,
      "candidate": "from typing import List\n\n\ndef count_element(arr: List[int], elem: int) -> int:\n    \"\"\"\n    O(n) and O(1)\n    \"\"\"\n    count = 0\n    sublist_count = 0\n\n    for num in arr:\n        if num == elem:\n            count += 1\n        sublist_count += count\n\n    return sublist_count\n\n\nif __name__ == \"__main__\":\n    assert count_element([1, 1, 2, 1, 1], 1) == 5"
    },
    {
      "rank": 64,
      "score": 1.0,
      "candidate": "from typing import List\n\n\ndef count_sublists(nums: List[int], target: int) -> int:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(n)\n    \"\"\"\n    count = 0\n\n    for idx, val in enumerate(nums):\n        if val == target:\n            count += 1\n\n        for end in range(idx + 1, len(nums) + 1):\n            if sum(nums[idx:end]) == target:\n                count += 1\n\n    return count\n\n\nif __name__ == \"__main__\":\n    assert count_sublists([1, 1, 1, 1, 1], 2) == 0\n    assert count_sublists([1, 2, 1, 2, 1], 2) == 3\n    assert count_sublists([1, 1, 1, 1, 1, 2, 2, 2, 2, 2], 2) == 5"
    },
    {
      "rank": 65,
      "score": 1.0,
      "candidate": "from typing import List\n\n\ndef count_sublists(nums: List[int], target: int) -> int:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(1)\n    \"\"\"\n    total = 0\n    count = 0\n\n    for i in range(len(nums)):\n        if nums[i] == target:\n            count += 1\n        total += count\n\n    return total\n\n\nif __name__ == \"__main__\":\n    assert count_sublists([1, 2, 1, 2, 1], 1) == 4"
    },
    {
      "rank": 66,
      "score": 1.0,
      "candidate": "from typing import List\n\n\ndef count_occurrences(array: List[int], element: int) -> int:\n    \"\"\"\n    O(n) & O(1)\n    \"\"\"\n    count = 0\n\n    current_sublist_count = 0\n    for num in array:\n        if num == element:\n            current_sublist_count += 1\n        else:\n            count += current_sublist_count\n\n    return count\n\n\nif __name__ == \"__main__\":\n    assert count_occurrences([1, 1, 2, 2, 2, 2, 3, 3, 3], 2) == 5"
    },
    {
      "rank": 67,
      "score": 1.0,
      "candidate": "from typing import List, Any\n\n\ndef count_sublists(lst: List[Any], item: Any) -> int:\n    \"\"\"Count the number of sublists containing a particular element.\n\n    Args:\n        lst (List[Any]): list of items\n        item (Any): item to count\n\n    Returns:\n        int: number of sublists\n\n    Examples:\n        >>> assert count_sublists([1, 2, 2], 2) == 2\n    \"\"\"\n    return lst.count(item) * (len(lst) - lst.index(item))\n\n\ndef main():\n    lst = [1, 2, 2]\n    print(count_sublists(lst, 2))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 68,
      "score": 1.0,
      "candidate": "from typing import List\n\n\ndef count_sublists(arr: List[int], val: int) -> int:\n    \"\"\"\n    Time Complexity: O(n)\n    \"\"\"\n    count = 0\n\n    for i in range(len(arr)):\n        if arr[i] == val:\n            count += 1\n\n        if i > 0:\n            if arr[i - 1] != val:\n                count += 1\n\n    return count\n\n\nif __name__ == \"__main__\":\n    assert count_sublists([1, 1, 2, 2, 2, 2, 2, 3, 3, 3], 2) == 5\n    assert count_sublists([1, 1, 2, 4, 4, 4], 2) == 3"
    },
    {
      "rank": 69,
      "score": 1.0,
      "candidate": "from typing import List\n\n\ndef count_sublists(nums: List[int], target: int) -> int:\n    \"\"\"\n    Idea is to maintain a prefix sum array and a hashmap.\n    Prefix sum array will have the sum of all elements upto that index.\n    So, we can use prefix sum array to find the sum of elements in the sublist.\n    If the sum is equal to the target, then the sublist has the element.\n    So, we can increment the count of that prefix sum.\n    \"\"\"\n    count = 0\n    prefix_sum = [0]\n    prefix_sum_count = {}\n\n    for num in nums:\n        prefix_sum.append(prefix_sum[-1] + num)\n\n    for prefix_sum_value in prefix_sum:\n        if prefix_sum_value - target in prefix_sum_count:\n            count += prefix_sum_count[prefix_sum_value - target]\n        prefix_sum_count[prefix_sum_value] = prefix_sum_count.get(prefix_sum_value, 0) + 1\n\n    return count\n\n\nif __name__ == \"__main__\":\n    assert count_sublists([1, 2, 1, 2, 2, 2], 2) == 10\n    assert count_sublists([1, 2, 1, 2, 2, 2], 3) == 4\n    assert count_sublists([1, 2, 1, 2, 2, 2], 1) == 10"
    },
    {
      "rank": 70,
      "score": 1.0,
      "candidate": "from collections import defaultdict\nfrom typing import List\n\n\ndef count_sublists(lst: List[int], elem: int) -> int:\n    \"\"\"\n    Time Complexity: O(n)\n    \"\"\"\n    res = 0\n    d = defaultdict(int)\n    for i, val in enumerate(lst):\n        d[val] += 1\n        if val == elem:\n            res += d[val]\n    return res\n\n\nif __name__ == \"__main__\":\n    lst = [2, 1, 2, 2, 2, 3, 4, 5, 2]\n    assert count_sublists(lst, 2) == 5"
    },
    {
      "rank": 71,
      "score": 1.0,
      "candidate": "from typing import List\n\n\ndef count_sublists(nums: List[int], target: int) -> int:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(1)\n    \"\"\"\n    total_sublists = 0\n    sublist_count = 0\n\n    for num in nums:\n        if num == target:\n            total_sublists += sublist_count\n\n        sublist_count += 1\n\n    return total_sublists\n\n\nif __name__ == \"__main__\":\n    assert count_sublists([1, 2, 3, 4, 5], 2) == 3\n    assert count_sublists([1, 1, 2, 2, 3, 3, 3, 4, 4, 5, 5], 3) == 4"
    },
    {
      "rank": 72,
      "score": 1.0,
      "candidate": "from typing import List\n\n\ndef count_sublists(arr: List[int], target: int) -> int:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(1)\n    \"\"\"\n    result = 0\n    count = 0\n\n    for i in arr:\n        if i == target:\n            count += 1\n        else:\n            result += count\n\n    return result\n\n\nif __name__ == \"__main__\":\n    assert count_sublists([1, 2, 3, 4, 5], 3) == 2"
    },
    {
      "rank": 73,
      "score": 1.0,
      "candidate": "from typing import List\n\n\ndef count_element(arr: List[int], element: int) -> int:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(1)\n    \"\"\"\n    count = 0\n    current = 0\n\n    for i in range(len(arr)):\n        if arr[i] == element:\n            current += 1\n            count += current\n        else:\n            current = 0\n\n    return count\n\n\nif __name__ == \"__main__\":\n    assert count_element([1, 2, 3, 4, 5, 2, 2, 2, 2, 2], 2) == 5"
    },
    {
      "rank": 74,
      "score": 1.0,
      "candidate": "from collections import defaultdict\n\n\ndef count_sublists(lst, elem):\n    count = defaultdict(int)\n    count[0] = 1\n    total = 0\n\n    for i in lst:\n        total += 1\n        count[total] += 1\n\n        if i == elem:\n            total -= 1\n\n    return count[total]\n\n\nprint(count_sublists([1, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 5], 3))\nprint(count_sublists([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], 1))\nprint(count_sublists([1, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 5], 2))\nprint(count_sublists([1, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 5], 4))"
    },
    {
      "rank": 75,
      "score": 1.0,
      "candidate": "from collections import defaultdict\n\n\ndef count_sublists(nums, target):\n    res = 0\n    counter = defaultdict(int)\n    counter[0] = 1\n\n    for num in nums:\n        counter[num] += 1\n        res += counter[num - target]\n\n    return res\n\n\nif __name__ == \"__main__\":\n    assert count_sublists([1, 1, 2, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 6, 6, 6, 6, 7, 7, 7, 7, 7, 8, 8, 8, 8, 9, 9, 9, 9, 10], 2) == 24"
    },
    {
      "rank": 76,
      "score": 1.0,
      "candidate": "from typing import List\n\n\ndef count_occurrences(arr: List[int], target: int) -> int:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(1)\n    \"\"\"\n    count = 0\n    length = len(arr)\n\n    for i in range(length):\n        if arr[i] == target:\n            count += 1\n        if i < length - 1 and arr[i] < target and target < arr[i + 1]:\n            count += 1\n\n    return count\n\n\nif __name__ == \"__main__\":\n    assert count_occurrences([1, 2, 2, 3, 4, 2, 2, 2], 2) == 5"
    },
    {
      "rank": 77,
      "score": 1.0,
      "candidate": "def count_sublists(lst, elem):\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(1)\n    \"\"\"\n    count = 0\n    prev = False\n    for i in lst:\n        if i == elem:\n            if prev:\n                count += 1\n            else:\n                count += 1\n                prev = True\n        else:\n            prev = False\n    return count\n\n\nif __name__ == \"__main__\":\n    lst = [1, 2, 2, 3, 4, 5, 2]\n    print(count_sublists(lst, 2))"
    },
    {
      "rank": 78,
      "score": 1.0,
      "candidate": "from typing import List\n\n\ndef count_sublists(arr: List[int], value: int) -> int:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(1)\n    \"\"\"\n    count = 0\n\n    for i in range(len(arr)):\n        if arr[i] == value:\n            count += 1\n        if i > 0:\n            count += 1\n\n    return count\n\n\nif __name__ == \"__main__\":\n    assert count_sublists([1, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4], 2) == 8"
    },
    {
      "rank": 79,
      "score": 1.0,
      "candidate": "def count_sublists(lst, element):\n    # init sublists count to 0\n    count = 0\n\n    for idx, val in enumerate(lst):\n        # if current element is the element we are looking for\n        if val == element:\n            # count sublists that start at this index\n            count += count_sublists_starting_at(lst, idx)\n\n    return count\n\n\ndef count_sublists_starting_at(lst, idx):\n    # init sublists count to 0\n    count = 0\n\n    # if current element is not the element we are looking for\n    if lst[idx] != element:\n        # increase count by 1\n        count += 1\n\n    # if index is not at the end of the list\n    if idx != len(lst) - 1:\n        # recursively call count_sublists_starting_at with current index + 1\n        count += count_sublists_starting_at(lst, idx + 1)\n\n    return count\n\n\n# test\nlst = [1, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4]\nprint(count_sublists(lst, 2))\nprint(count_sublists(lst, 3))\nprint(count_sublists(lst, 4))"
    },
    {
      "rank": 80,
      "score": 1.0,
      "candidate": "from collections import Counter\n\n\ndef count_sublists(l, e):\n    c = Counter(l)\n    count = 0\n    for i in c:\n        if i == e:\n            count += c[i]\n    return count\n\n\nif __name__ == \"__main__\":\n    l = [1, 2, 2, 2, 3, 4, 2, 2, 5, 2]\n    e = 2\n    print(count_sublists(l, e))"
    },
    {
      "rank": 81,
      "score": 1.0,
      "candidate": "from typing import List\n\n\ndef count_elements(array: List[int], elem: int) -> int:\n    \"\"\"\n    O(n) & O(n)\n    \"\"\"\n    count = 0\n    start = 0\n    for i in range(len(array)):\n        if array[i] == elem:\n            count += 1\n            start = i\n        elif i > start:\n            if array[i] != elem:\n                start = i\n\n    return count\n\n\nif __name__ == \"__main__\":\n    assert count_elements([1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 6, 6, 6, 6, 7, 7, 7, 7], 1) == 6\n    assert count_elements([1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 6, 6, 6, 6, 7, 7, 7, 7], 2) == 6\n    assert count_elements([1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 6, 6, 6, 6, 7, 7, 7, 7], 3) == 6\n    assert count_elements([1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 6, 6, 6, 6, 7, 7, 7, 7], 4) == 6"
    },
    {
      "rank": 82,
      "score": 1.0,
      "candidate": "from typing import List, Union\n\n\ndef count_sublists(nums: List[int], target: int) -> int:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(1)\n    \"\"\"\n    count = 0\n    prefix_sum = 0\n    for i, num in enumerate(nums):\n        prefix_sum += num\n        if i > 0 and num == target:\n            count += prefix_sum\n\n    return count\n\n\nif __name__ == \"__main__\":\n    assert count_sublists([1, 1, 1, 1], 1) == 4\n    assert count_sublists([1, 2, 1, 2, 2], 2) == 3\n    assert count_sublists([1, 2, 3, 1, 2, 2, 2], 2) == 3\n    assert count_sublists([1, 1, 1, 1, 1, 1], 1) == 6\n    assert count_sublists([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5) == 4"
    },
    {
      "rank": 83,
      "score": 1.0,
      "candidate": "def count_sublists(arr, elem):\n    count = 0\n    for i in range(len(arr)):\n        if arr[i] == elem:\n            count += 1\n    return count\n\n\nif __name__ == '__main__':\n    arr = [1, 2, 3, 4, 5]\n    print(count_sublists(arr, 3))\n\n    arr = [1, 2, 3, 3, 3, 3]\n    print(count_sublists(arr, 3))\n\n    arr = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    print(count_sublists(arr, 8))\n\n    arr = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    print(count_sublists(arr, 5))\n\n    arr = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    print(count_sublists(arr, 1))\n\n    arr = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    print(count_sublists(arr, 9))\n\n    arr = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    print(count_sublists(arr, 10))\n\n    arr = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    print(count_sublists(arr, 0))\n\n    arr = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    print(count_sublists(arr, -1))"
    },
    {
      "rank": 84,
      "score": 1.0,
      "candidate": "from typing import List\n\n\ndef count_elements(nums: List[int], target: int) -> int:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(n)\n    \"\"\"\n    count = 0\n    prev_index = -1\n\n    for i, num in enumerate(nums):\n        if num == target:\n            count += 1\n            if prev_index != -1:\n                count += prev_index + 1\n        prev_index = i\n\n    return count\n\n\nif __name__ == \"__main__\":\n    assert count_elements([1, 2, 3, 2, 2, 2, 2, 2, 4, 2], 2) == 5"
    },
    {
      "rank": 85,
      "score": 1.0,
      "candidate": "from typing import List\n\n\ndef count_sublists(nums: List[int], target: int) -> int:\n    \"\"\"\n    Time complexity: O(n)\n    Space complexity: O(1)\n    \"\"\"\n    if not nums:\n        return 0\n\n    count = 0\n    left, right = 0, 0\n\n    for i in range(len(nums)):\n        if nums[i] == target:\n            count += 1\n\n        while left < i and nums[left] < target:\n            left += 1\n\n        while right < i and nums[right] <= target:\n            right += 1\n\n        count += right - left\n\n    return count\n\n\nif __name__ == \"__main__\":\n    assert count_sublists([1, 2, 1, 2, 3], 2) == 4"
    },
    {
      "rank": 86,
      "score": 1.0,
      "candidate": "from typing import List\n\n\ndef count_sublists(input_list: List, value: int) -> int:\n    \"\"\"\n    O(n) & O(1)\n    \"\"\"\n    count = 0\n    left_index = 0\n    for right_index, val in enumerate(input_list):\n        if val == value:\n            count += 1\n        count += left_index\n        left_index += 1\n    return count\n\n\nif __name__ == \"__main__\":\n    assert count_sublists([1, 2, 3, 4, 5, 2], 2) == 4\n    assert count_sublists([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], 1) == 13\n    assert count_sublists([1, 2, 3, 4, 5, 2], 4) == 2"
    },
    {
      "rank": 87,
      "score": 1.0,
      "candidate": "from typing import List, Optional\n\n\ndef count_sublists(arr: List[int], el: int) -> int:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(1)\n    \"\"\"\n    if not arr:\n        return 0\n\n    count = 0\n    prev_count, curr_count = 0, 0\n\n    for i in arr:\n        if i == el:\n            count += prev_count + curr_count + 1\n            curr_count += 1\n        else:\n            prev_count = curr_count\n            curr_count = 0\n\n    return count\n\n\nif __name__ == \"__main__\":\n    assert count_sublists([1, 2, 2, 2, 3], 2) == 5\n    assert count_sublists([1, 1, 1, 1, 1], 1) == 10\n    assert count_sublists([1, 1, 1, 1, 1], 2) == 0"
    },
    {
      "rank": 88,
      "score": 1.0,
      "candidate": "def count_element(arr, el):\n    count = 0\n    for i in range(len(arr)):\n        if el in arr[i]:\n            count += 1\n    return count\n\n\ndef test_count_element():\n    assert count_element([[1, 2, 3], [1, 2, 3], [1, 3, 4], [1, 3, 5, 6]], 1) == 4\n\n\nif __name__ == '__main__':\n    test_count_element()"
    },
    {
      "rank": 89,
      "score": 1.0,
      "candidate": "def count_sublists(arr, elem):\n    # Write your code here.\n    count = 0\n    for i in range(len(arr)):\n        if arr[i] == elem:\n            count += 1\n        if i + 1 < len(arr) and arr[i + 1] == elem:\n            count += 1\n    return count\n\n\ndef main():\n    print(count_sublists([1, 2, 3, 4, 5, 5, 5], 5))\n    print(count_sublists([1, 1, 1, 1, 1], 1))\n    print(count_sublists([1, 2, 3, 4, 5, 5, 5, 5, 5], 5))\n\n\nmain()"
    },
    {
      "rank": 90,
      "score": 1.0,
      "candidate": "from typing import List\n\n\ndef count_sublists(numbers: List[int], target: int) -> int:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(1)\n    \"\"\"\n\n    count = 0\n    cur_sum = 0\n\n    for num in numbers:\n        cur_sum += num\n        if cur_sum == target:\n            count += 1\n\n        if cur_sum < target:\n            count += 1\n\n    return count\n\n\nif __name__ == \"__main__\":\n    assert count_sublists([1, 1, 2, 3, 4, 5], 3) == 4\n    assert count_sublists([1, 1, 2, 3, 4, 5], 4) == 5\n    assert count_sublists([1, 1, 2, 3, 4, 5], 5) == 6\n    assert count_sublists([1, 1, 2, 3, 4, 5], 6) == 6"
    },
    {
      "rank": 91,
      "score": 1.0,
      "candidate": "from typing import List\n\n\ndef count_sublists(array: List[int], element: int) -> int:\n    \"\"\"\n    Time Complexity: O(n)\n    \"\"\"\n    count = 0\n\n    for i in range(len(array)):\n        if array[i] == element:\n            count += 1\n\n        if i > 0 and array[i - 1] == element:\n            count += 1\n\n    return count\n\n\nif __name__ == \"__main__\":\n    assert count_sublists([1, 2, 2, 2, 2, 2, 3, 3, 3, 4, 5], 2) == 7\n    assert count_sublists([1, 1, 2, 2, 2, 2, 2, 3, 3, 3, 4, 5], 2) == 8\n    assert count_sublists([1, 1, 2, 2, 2, 2, 2, 2, 3, 3, 3, 4, 5], 2) == 10"
    },
    {
      "rank": 92,
      "score": 1.0,
      "candidate": "from typing import List\n\n\ndef count_occurrences(array: List[int], element: int) -> int:\n    \"\"\"\n    O(n) & O(1)\n    \"\"\"\n    count = 0\n    prev_element = array[0]\n\n    for elem in array[1:]:\n        if prev_element == element:\n            count += 1\n\n        prev_element = elem\n\n    return count\n\n\nif __name__ == \"__main__\":\n    assert count_occurrences([1, 2, 1, 2, 3, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6], 1) == 4\n    assert count_occurrences([1, 2, 1, 2, 3, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6], 2) == 5\n    assert count_occurrences([1, 2, 1, 2, 3, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6], 3) == 2\n    assert count_occurrences([1, 2, 1, 2, 3, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6], 4) == 1\n    assert count_occurrences([1, 2, 1, 2, 3, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6], 5) == 1\n    assert count_occurrences([1, 2, 1, 2, 3, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6], 6) == 1"
    },
    {
      "rank": 93,
      "score": 1.0,
      "candidate": "from typing import List, Tuple\n\n\ndef count_sublists(nums: List[int], target: int) -> int:\n    \"\"\"\n    Time complexity: O(n)\n    Space complexity: O(1)\n    \"\"\"\n    if not nums:\n        return 0\n\n    count = 0\n    count_left = 0\n    count_right = 0\n    for num in nums:\n        if num == target:\n            count += 1\n        if num <= target:\n            count_left += 1\n        if num >= target:\n            count_right += 1\n\n    return count * count_left * count_right\n\n\nif __name__ == \"__main__\":\n    assert count_sublists([], 0) == 0\n    assert count_sublists([1, 2, 1, 2, 2], 2) == 7\n    assert count_sublists([1, 2, 1, 2, 2], 3) == 0\n    assert count_sublists([1, 2, 3, 4, 5], 3) == 2"
    },
    {
      "rank": 94,
      "score": 1.0,
      "candidate": "from typing import List, Tuple\n\n\ndef count_sublists(nums: List[int], target: int) -> int:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(1)\n    \"\"\"\n\n    count = 0\n\n    for i in range(len(nums)):\n        if nums[i] == target:\n            count += 1\n\n        for j in range(i + 1, len(nums)):\n            if nums[j] == target:\n                count += 1\n\n    return count\n\n\nif __name__ == \"__main__\":\n    assert count_sublists([1, 2, 1, 2, 3], 2) == 3"
    },
    {
      "rank": 95,
      "score": 1.0,
      "candidate": "from collections import defaultdict\n\n\ndef count_sublists(arr, elem):\n    count = 0\n    d = defaultdict(int)\n    d[0] = 1\n    for num in arr:\n        count += d[num]\n        d[num] += 1\n    return count\n\n\ndef test_count_sublists():\n    assert count_sublists([1, 2, 3, 2], 2) == 3"
    },
    {
      "rank": 96,
      "score": 1.0,
      "candidate": "from typing import List\n\n\ndef count_element(arr: List[int], element: int) -> int:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(1)\n    \"\"\"\n    count = 0\n\n    prev_element = None\n\n    for num in arr:\n        if num == element:\n            if prev_element != element:\n                count += 1\n            count += 1\n        prev_element = num\n\n    return count\n\n\nif __name__ == \"__main__\":\n    assert count_element([1, 2, 3, 4, 5, 5, 5, 5, 5, 6, 6, 6], 5) == 4"
    },
    {
      "rank": 97,
      "score": 1.0,
      "candidate": "def count_sublists(arr, k):\n    # TODO: Write your code here\n    count = 0\n    for i in range(len(arr)):\n        if k in arr[i:]:\n            count += 1\n    return count\n\n\ndef main():\n    print(count_sublists([1, 2, 3, 4, 5, 5, 5], 5))\n    print(count_sublists([1, 2, 3, 4, 5, 5, 5], 6))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 98,
      "score": 1.0,
      "candidate": "from collections import Counter\n\n\ndef count_sublists(arr, target):\n    \"\"\"\n    :param: arr - input array\n    :param: target - integer element\n    return: list - containing the count of target in various sublists\n    TODO: complete this function and return a list of the count of target in various sublists\n    \"\"\"\n    count = 0\n    c = Counter()\n    c[target] = 1\n    return count_sublists_helper(arr, c, count)\n\n\ndef count_sublists_helper(arr, c, count):\n    if len(arr) == 0:\n        return c\n    if c[arr[0]] > 0:\n        count += 1\n    c[arr[0]] -= 1\n    return count_sublists_helper(arr[1:], c, count)\n\n\ndef test_function(test_case):\n    arr = test_case[0]\n    target = test_case[1]\n    solution = test_case[2]\n    output = count_sublists(arr, target)\n    if output == solution:\n        print(\"Pass\")\n    else:\n        print(\"Fail\")\n\n\n# Test Cases\nprint('--------------------')\ntest_case_1 = [[], 1, 0]\ntest_function(test_case_1)\n\ntest_case_2 = [[1], 1, 1]\ntest_function(test_case_2)\n\ntest_case_3 = [[1, 1, 2, 2, 2, 2], 2, 4]\ntest_function(test_case_3)\n\ntest_case_4 = [[1, 1, 2, 4, 2, 2], 2, 3]\ntest_function(test_case_4)\n\ntest_case_5 = [[1, 1, 2, 4, 2, 2], 4, 2]\ntest_function(test_case_5)\n\ntest_case_6 = [[1, 1, 2, 4, 2, 2], 3, 0]\ntest_function(test_case_"
    },
    {
      "rank": 99,
      "score": 1.0,
      "candidate": "from typing import List\n\n\ndef count_sublists(lst: List[int], elem: int) -> int:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(1)\n    \"\"\"\n\n    count = 0\n    count_current = 0\n    for i in lst:\n        if i == elem:\n            count += count_current\n\n        count_current += 1\n\n    return count\n\n\nif __name__ == \"__main__\":\n    assert count_sublists([1, 2, 3, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5], 5) == 31"
    },
    {
      "rank": 100,
      "score": 1.0,
      "candidate": "from typing import List\n\n\ndef count_elements(arr: List[int], element: int) -> int:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(n)\n    \"\"\"\n\n    count = 0\n    for i in range(len(arr)):\n        if arr[i] == element:\n            count += 1\n\n    return count\n\n\nif __name__ == \"__main__\":\n    assert count_elements([1, 2, 3, 4, 5, 2], 2) == 3"
    }
  ]
}