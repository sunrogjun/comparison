{
  "timestamp": "2025-09-15T01:20:20.991203",
  "method": "improved_llm_judge",
  "judge_model": "codellama/CodeLlama-7b-Python-hf",
  "target_model": "codellama-7b",
  "dataset": "mbpp",
  "problem_number": 400,
  "total_candidates": 100,
  "results": [
    {
      "rank": 1,
      "score": 10.0,
      "candidate": "def snake_to_camel_case(string: str) -> str:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(1)\n    \"\"\"\n\n    return \"\".join(word.capitalize() for word in string.split(\"_\"))\n\n\nif __name__ == \"__main__\":\n    snake_str = \"this_is_snake_case\"\n    print(snake_to_camel_case(snake_str))"
    },
    {
      "rank": 2,
      "score": 10.0,
      "candidate": "def snake_to_camel_case(snake_case_string: str) -> str:\n    \"\"\"Convert the given snake case string to camel case string.\n\n    Args:\n        snake_case_string (str): snake case string.\n\n    Returns:\n        str: camel case string.\n    \"\"\"\n    return \"\".join(\n        word.title() for word in snake_case_string.split(\"_\")\n    )  # type: ignore"
    },
    {
      "rank": 3,
      "score": 10.0,
      "candidate": "def snake_to_camel_case(snake_case: str) -> str:\n    \"\"\"Converts snake case string to camel case string.\n\n    Args:\n        snake_case (str): snake case string.\n\n    Examples:\n        >>> snake_to_camel_case(\"hello_world\")\n        'helloWorld'\n        >>> snake_to_camel_case(\"_hello_world\")\n        'helloWorld'\n        >>> snake_to_camel_case(\"hello_world_camel_case\")\n        'helloWorldCamelCase'\n        >>> snake_to_camel_case(\"hello_world_camel_case_is_easy\")\n        'helloWorldCamelCaseIsEasy'\n    \"\"\"\n    return snake_case.title().replace(\"_\", \"\")\n\n\ndef snake_to_camel_case_regex(snake_case: str) -> str:\n    \"\"\"Converts snake case string to camel case string.\n\n    Args:\n        snake_case (str): snake case string.\n\n    Examples:\n        >>> snake_to_camel_case_regex(\"hello_world\")\n        'helloWorld'\n        >>> snake_to_camel_case_regex(\"_hello_world\")\n        'helloWorld'\n        >>> snake_to_camel_case_regex(\"hello_world_camel_case\")\n        'helloWorldCamelCase'\n        >>> snake_to_camel_case_regex(\"hello_world_camel_case_is_easy\")\n        'helloWorldCamelCaseIsEasy'\n    \"\"\"\n    return (\n        snake_case.title()\n        .replace(\"_\", \"\")\n        .replace(\" \", \"\")\n        .replace(\"-\", \"\")\n    )\n\n\nif __name__ == \"__main__\":\n    print(snake_to_camel_case(\"hello_world\"))\n    print(snake_to_camel_case(\"_hello_world\"))\n    print(snake_to_camel_case(\"hello_world_camel_case\"))\n    print("
    },
    {
      "rank": 4,
      "score": 10.0,
      "candidate": "from re import sub\n\n\ndef snake_to_camel_case(snake_case: str) -> str:\n    \"\"\"\n    >>> snake_to_camel_case(\"this_is_snake_case\")\n    'thisIsSnakeCase'\n    \"\"\"\n    return sub(r\"(_)([a-z])\", lambda pat: pat.group(2).upper(), snake_case)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 5,
      "score": 8.72281431551835,
      "candidate": "import re\n\n\ndef snake_to_camel(snake_case_string):\n    words = re.split(r'_', snake_case_string)\n    camel_case_string = ''\n\n    for word in words:\n        camel_case_string += word[0].upper() + word[1:]\n\n    return camel_case_string\n\n\ndef main():\n    snake_case_string = 'this_is_a_snake_case_string'\n    print(snake_to_camel(snake_case_string))\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 6,
      "score": 8.707841628767481,
      "candidate": "import re\n\n\ndef convert_to_camelcase(snake_case_string):\n    \"\"\"Convert snake case string to camel case string.\"\"\"\n    return re.sub(r\"_([a-z])\", lambda x: x.group(1).upper(), snake_case_string)"
    },
    {
      "rank": 7,
      "score": 8.691603016224004,
      "candidate": "import re\n\n\ndef snake_to_camel_case(snake_case_string):\n    return re.sub(r\"_([a-z])\", lambda x: x.group(1).upper(), snake_case_string)\n\n\ndef main():\n    snake_case_string = \"hello_world\"\n    print(snake_to_camel_case(snake_case_string))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 8,
      "score": 8.643830421043205,
      "candidate": "import re\n\n\ndef to_camel_case(string: str) -> str:\n    \"\"\"Convert snake case string to camel case string.\"\"\"\n    return re.sub(r\"(?:_([a-zA-Z]))\", lambda match: match.group(1).upper(), string)\n\n\nif __name__ == \"__main__\":\n    assert to_camel_case(\"the_lion_king\") == \"theLionKing\"\n    assert to_camel_case(\"the_lion_king_was_a_musician\") == \"theLionKingWasAMusician\"\n    assert to_camel_case(\"the_lion_king_was_a_musician_like_his_father\") == \"theLionKingWasAMusicianLikeHisFather\"\n    assert to_camel_case(\"\") == \"\"\n    assert to_camel_case(\"snake_case\") == \"snakeCase\"\n    assert to_camel_case(\"Snake_case\") == \"snakeCase\""
    },
    {
      "rank": 9,
      "score": 8.619320349731632,
      "candidate": "from re import sub\n\n\ndef snake_to_camel_case(snake_str):\n    return sub(r\"(?<!^)_([a-zA-Z])\", lambda x: x.group(1).upper(), snake_str)\n\n\ndef main():\n    print(snake_to_camel_case(\"some_test_case\"))\n    print(snake_to_camel_case(\"my_test_case\"))\n    print(snake_to_camel_case(\"my_test_case123\"))\n    print(snake_to_camel_case(\"my_test_case_123\"))\n    print(snake_to_camel_case(\"my_test_case_1234\"))\n    print(snake_to_camel_case(\"my_test_case_12345\"))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 10,
      "score": 8.60959704243148,
      "candidate": "from re import sub\n\n\ndef snake_to_camel(string: str) -> str:\n    \"\"\"Convert snake case string to camel case.\n\n    Args:\n        string (str): snake case string.\n\n    Returns:\n        str: camel case string.\n\n    Examples:\n        >>> assert snake_to_camel('hello_world') == 'helloWorld'\n        >>> assert snake_to_camel('_hello_world') == 'helloWorld'\n        >>> assert snake_to_camel('hello_world_') == 'helloWorld'\n        >>> assert snake_to_camel('hello_world__') == 'helloWorld'\n        >>> assert snake_to_camel('_hello_world_') == 'helloWorld'\n        >>> assert snake_to_camel('__hello_world__') == 'helloWorld'\n        >>> assert snake_to_camel('__hello_world_a') == 'helloWorldA'\n        >>> assert snake_to_camel('hello__world_a') == 'helloWorldA'\n        >>> assert snake_to_camel('hello_world_a_') == 'helloWorldA'\n        >>> assert snake_to_camel('hello_world_a__') == 'helloWorldA'\n        >>> assert snake_to_camel('hello_world_a_b') == 'helloWorldAB'\n        >>> assert snake_to_camel('hello_world_a_b_') == 'helloWorldAB'\n        >>> assert snake_to_camel('hello_world_a_b__') == 'helloWorldAB'\n        >>> assert snake_to_camel('hello_world_a_b_c') == 'helloWorldABC'\n        >>> assert snake_to_camel('hello_world_a_b_c_') == 'helloWorldABC'\n        >>> assert snake_to_camel('hello_world_a_b_c__') == 'helloWorldABC'\n        >>> assert snake_to_camel('hello_world_a_b_c_d') == 'helloWorldABCD'\n        >>> assert snake_to_cam"
    },
    {
      "rank": 11,
      "score": 8.578557265757478,
      "candidate": "import re\n\ndef to_camel_case(snake_case: str) -> str:\n    return re.sub(r\"_([a-z])\", lambda m: m.group(1).upper(), snake_case)\n\n\nif __name__ == \"__main__\":\n    assert to_camel_case(\"this_is_snake_case\") == \"thisIsSnakeCase\"\n    assert to_camel_case(\"this_has_multiple_words\") == \"thisHasMultipleWords\""
    },
    {
      "rank": 12,
      "score": 8.542086171207306,
      "candidate": "import re\n\ndef to_camel_case(snake_case):\n    \"\"\"\n    Converts snake_case string to camel case using regex.\n    :param snake_case: snake_case string\n    :return: camel case string\n    \"\"\"\n    return re.sub(r\"(?:^|_)(.)\", lambda m: m.group(1).upper(), snake_case)"
    },
    {
      "rank": 13,
      "score": 8.540864838752617,
      "candidate": "from re import sub\n\n\ndef camelcase(snake_case):\n    \"\"\"\n    >>> camelcase(\"snake_case\")\n    'snakeCase'\n    \"\"\"\n    return sub(r\"(_|-)+(.)\", lambda m: m.group(2).upper(), snake_case)\n\n\nif __name__ == \"__main__\":\n    print(camelcase(\"snake_case\"))"
    },
    {
      "rank": 14,
      "score": 8.533207244052559,
      "candidate": "from re import sub\n\ndef camel_case(snake_string):\n    \"\"\"Convert snake_case string to camelCase string.\"\"\"\n    return sub(r'(_|-)+(.)', lambda m: m.group(2).upper(), snake_string)"
    },
    {
      "rank": 15,
      "score": 8.531947116181039,
      "candidate": "import re\n\ndef snake_to_camel_case(snake_string):\n    return re.sub(r'(_+)([a-z])', lambda m: m.group(2).upper(), snake_string.lower())\n\nif __name__ == \"__main__\":\n    print(snake_to_camel_case(\"hello_world\"))"
    },
    {
      "rank": 16,
      "score": 8.470655382768415,
      "candidate": "import re\n\ndef to_camel_case(snake_str):\n    camel_case = re.sub(r'_([a-z])', lambda pat: pat.group(1).upper(), snake_str)\n    return camel_case[0].upper() + camel_case[1:]\n\n\nif __name__ == \"__main__\":\n    snake_str = \"hello_world\"\n    print(to_camel_case(snake_str))"
    },
    {
      "rank": 17,
      "score": 8.46921985410903,
      "candidate": "import re\n\n\ndef camel_case(string):\n    return re.sub(r'_([a-z])', lambda match: match.group(1).upper(), string)"
    },
    {
      "rank": 18,
      "score": 8.467947152868751,
      "candidate": "import re\n\ndef snake_to_camel_case(snake_string):\n    return re.sub(r'(?:^|_)([a-z])', lambda x: x.group(1).upper(), snake_string)\n\n\nif __name__ == '__main__': \n    print(\"Enter a snake case string:\")\n    snake_string = input()\n    print(\"The camel case string is: \" + snake_to_camel_case(snake_string))"
    },
    {
      "rank": 19,
      "score": 8.425001711617755,
      "candidate": "import re\n\ndef snake_to_camel(snake_str):\n    # Add code here\n    first_word = snake_str.split('_')[0]\n    return first_word + ''.join(word.capitalize() for word in snake_str.split('_')[1:])\n\n\nprint(snake_to_camel(\"hello_world\"))\nprint(snake_to_camel(\"_hello_world\"))\nprint(snake_to_camel(\"hello_world_\"))\nprint(snake_to_camel(\"_hello_world_\"))\nprint(snake_to_camel(\"hello\"))\nprint(snake_to_camel(\"\"))\nprint(snake_to_camel(\"_\"))\nprint(snake_to_camel(\"hello_world_foo\"))\nprint(snake_to_camel(\"__hello_world_foo\"))\nprint(snake_to_camel(\"hello_wo_rld_foo\"))"
    },
    {
      "rank": 20,
      "score": 8.41321940819962,
      "candidate": "import re\n\ndef snake_to_camel_case(snake_case_string: str) -> str:\n    \"\"\"\n    >>> snake_to_camel_case('camel_case_string')\n    'camelCaseString'\n    >>> snake_to_camel_case('camelcase')\n    'camelcase'\n    \"\"\"\n    snake_case_string = re.sub(r'_', ' ', snake_case_string)\n    camel_case_string = re.sub(r'(?:\\A| )(\\w)', lambda x: x.group(1).upper(), snake_case_string)\n    return camel_case_string\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 21,
      "score": 8.363712459818661,
      "candidate": "import re\n\n\ndef snake_to_camel(snake_case_string):\n    return ''.join(word.title() for word in snake_case_string.split('_'))\n\n\ndef snake_to_camel_case(snake_case_string):\n    return re.sub(r'(?:^|_)([a-z])', lambda x: x.group(1).upper(), snake_case_string)\n\n\nif __name__ == '__main__':\n    print(snake_to_camel(\"the_birthday_of_mary\"))\n    print(snake_to_camel_case(\"the_birthday_of_mary\"))"
    },
    {
      "rank": 22,
      "score": 8.360957102964617,
      "candidate": "import re\n\ndef to_camel_case(string):\n    return re.sub(r'(?:^|_)(.)', lambda m: m.group(1).upper(), string)\n\n\nif __name__ == '__main__':\n    print(to_camel_case(\"snake_case_string\"))\n    print(to_camel_case(\"snake_case_string_2\"))\n    print(to_camel_case(\"snake_case_string_2\"))"
    },
    {
      "rank": 23,
      "score": 8.301409189427345,
      "candidate": "def to_camel_case(snake_case):\n    words = snake_case.split(\"_\")\n    return words[0] + \"\".join(word.title() for word in words[1:])"
    },
    {
      "rank": 24,
      "score": 8.297461108822645,
      "candidate": "import re\n\n\ndef camel_case(snake_case):\n    return re.sub(r\"_([a-z])\", lambda x: x.group(1).upper(), snake_case)\n\n\ndef main():\n    print(camel_case(\"hello_world\"))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 25,
      "score": 8.270262110701061,
      "candidate": "import re\n\ndef snake_to_camel(snake_case):\n    return snake_case.title().replace(\"_\", \"\")\n\ndef main():\n    snake_case = \"snake_case\"\n    print(snake_to_camel(snake_case))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 26,
      "score": 8.250086508177873,
      "candidate": "import re\ndef snake_to_camel_case(snake_case_string):\n    # TODO: Write your code here\n    return re.sub(r\"_([a-zA-Z])\", lambda x: x.group(1).upper(), snake_case_string)\n\n\nif __name__ == \"__main__\":\n    snake_case_string = input(\"Enter snake case string: \")\n    print(\"Camel case string: \" + snake_to_camel_case(snake_case_string))"
    },
    {
      "rank": 27,
      "score": 8.158862493626351,
      "candidate": "def camel_case(string):\n    return string.title().replace(\"_\", \"\")\n\n\ndef main():\n    print(camel_case(\"user_name\"))\n    print(camel_case(\"camel_case\"))\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 28,
      "score": 8.059762434166812,
      "candidate": "import re\n\ndef snake_to_camel(snake_str):\n    words = snake_str.split('_')\n    return words[0].lower() + ''.join(word.capitalize() for word in words[1:])\n\ndef main():\n    snake_str = \"my_name_is_snake\"\n    print(\"snake_str:\", snake_str)\n    print(\"snake_to_camel:\", snake_to_camel(snake_str))\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 29,
      "score": 8.045243507045239,
      "candidate": "import re\ndef snake_to_camel_case(snake_case_str: str) -> str:\n    # pattern = re.compile(r\"_([a-z])\")\n    # return pattern.sub(lambda x: x.group()[1].upper(), snake_case_str)\n    return snake_case_str.title().replace(\"_\", \"\")\n\n\nif __name__ == \"__main__\":\n    snake_case_str = \"snake_case_string\"\n    print(snake_to_camel_case(snake_case_str))"
    },
    {
      "rank": 30,
      "score": 7.927858778386839,
      "candidate": "import re\n\ndef snake_to_camel_case(string):\n    \"\"\"Convert snake case string to camel case string\"\"\"\n    return re.sub(r'_([a-z])', lambda m: m.group(1).upper(), string)\n\ndef main():\n    \"\"\"Call snake_to_camel_case() function\"\"\"\n    print(\"Snake case string: snake_case_string\")\n    print(\"Camel case string:\", snake_to_camel_case(\"snake_case_string\"))\n    print(\"Snake case string: snake_case_string_2\")\n    print(\"Camel case string:\", snake_to_camel_case(\"snake_case_string_2\"))\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 31,
      "score": 7.915333510996906,
      "candidate": "def snake_to_camel_case(snake_str):\n    words = snake_str.split('_')\n    return words[0] + \"\".join(w.capitalize() for w in words[1:])\n\n\nprint(snake_to_camel_case('snake_to_camel_case'))"
    },
    {
      "rank": 32,
      "score": 3.926139092254469,
      "candidate": "import re\n\ndef snake_to_camel_case(snake_case):\n    return re.sub(r\"_([a-zA-Z0-9])\", lambda x: x.group(1).upper(), snake_case)\n\n\nif __name__ == \"__main__\":\n    print(\"Snake case string: snake_case\")\n    print(\"Camel case string: \" + snake_to_camel_case(\"snake_case\"))\n    print(\"Camel case string: \" + snake_to_camel_case(\"snake_case_123\"))\n    print(\"Camel case string: \" + snake_to_camel_case(\"snake_case_hello_world\"))"
    },
    {
      "rank": 33,
      "score": 3.7896064077536957,
      "candidate": "import re\n\n\ndef snake_to_camel_case(string):\n    return re.sub(r\"_([a-zA-Z0-9])\", lambda x: x.group(1).upper(), string)\n\n\ndef test_snake_to_camel_case():\n    \"\"\"\n    >>> snake_to_camel_case(\"hello_world\")\n    'helloWorld'\n    >>> snake_to_camel_case(\"hello_world_123\")\n    'helloWorld123'\n    >>> snake_to_camel_case(\"hello_world_123_abc\")\n    'helloWorld123Abc'\n    \"\"\"\n    pass\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 34,
      "score": 3.782321827907003,
      "candidate": "import re\n\n\ndef convert_to_camel_case(snake_case_str: str) -> str:\n    \"\"\"Converts snake case string to camel case.\n\n    Args:\n        snake_case_str (str): snake case string to convert\n\n    Returns:\n        str: camel case string\n    \"\"\"\n    return re.sub(r\"_([a-z])\", lambda x: x.group(1).upper(), snake_case_str)\n\n\nif __name__ == \"__main__\":\n    print(convert_to_camel_case(\"hello_world\"))"
    },
    {
      "rank": 35,
      "score": 3.7690182832329846,
      "candidate": "from re import sub\n\n\ndef snake_to_camel_case(snake_case: str) -> str:\n    \"\"\"Convert snake_case to camelCase using regex.\n\n    Args:\n        snake_case (str): a string in snake case.\n\n    Returns:\n        str: a string in camel case.\n    \"\"\"\n    return sub(r\"_(\\w)\", lambda m: m.group(1).upper(), snake_case)\n\n\ndef test_snake_to_camel_case():\n    \"\"\"Test for snake_to_camel_case function.\"\"\"\n    assert snake_to_camel_case(\"hello_world\") == \"helloWorld\"\n    assert snake_to_camel_case(\"test_one\") == \"testOne\""
    },
    {
      "rank": 36,
      "score": 3.761514928204013,
      "candidate": "import re\n\n\ndef snake_to_camel(snake_str):\n    \"\"\"\n    :param snake_str: str\n    :return: str\n    \"\"\"\n\n    def to_camel(match):\n        return match.group(1).capitalize()\n\n    return re.sub(r'(^|_)([a-zA-Z])', to_camel, snake_str)\n\n\nif __name__ == \"__main__\":\n    snake_case_str = \"hello_world\"\n    print(snake_to_camel(snake_case_str))"
    },
    {
      "rank": 37,
      "score": 3.738947022370758,
      "candidate": "import re\n\n\ndef snake_to_camel(snake_str: str) -> str:\n    words = re.split(\"_\", snake_str)\n    return words[0] + \"\".join(word.title() for word in words[1:])\n\n\nif __name__ == \"__main__\":\n    snake_str = \"my_snake_case_string\"\n    print(snake_to_camel(snake_str))"
    },
    {
      "rank": 38,
      "score": 3.732824384460777,
      "candidate": "import re\n\n\ndef snake_to_camel(snake_string: str) -> str:\n    \"\"\"Convert the given snake case string to camel case string.\n\n    Args:\n        snake_string (str): Snake case string.\n\n    Returns:\n        str: Camel case string.\n    \"\"\"\n    snake_string = snake_string.lower()\n    return snake_string.title().replace(\"_\", \"\")\n\n\ndef main():\n    \"\"\"Main method.\"\"\"\n    print(snake_to_camel(\"user_name\"))\n    print(snake_to_camel(\"user_name_123\"))\n    print(snake_to_camel(\"user_name_123_456\"))\n    print(snake_to_camel(\"user_1_name_2_name\"))\n    print(snake_to_camel(\"user_name_2_1\"))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 39,
      "score": 3.6781200142854114,
      "candidate": "def camel_case(string):\n    return \" \".join(\n        word.capitalize() for word in string.split(\"_\")\n    )\n\n\ndef camel_case_2(string):\n    return string.title().replace(\"_\", \" \")\n\n\ndef camel_case_3(string):\n    return string.title().replace(\"_\", \"\")\n\n\nif __name__ == \"__main__\":\n    snake_case = \"snake_case_string\"\n    print(camel_case(snake_case))\n    print(camel_case_2(snake_case))\n    print(camel_case_3(snake_case))"
    },
    {
      "rank": 40,
      "score": 3.5285611131094576,
      "candidate": "import re\n\n\ndef camel_case(string: str) -> str:\n    \"\"\"Camel case string.\n\n    Args:\n        string (str): snake case string\n\n    Returns:\n        str: camel case string\n    \"\"\"\n    return re.sub(r\"_([a-z])\", lambda m: m.group(1).upper(), string)\n\n\nif __name__ == \"__main__\":\n    print(camel_case(\"snake_case_string\"))"
    },
    {
      "rank": 41,
      "score": 3.501766448946012,
      "candidate": "import re\n\ndef snake_to_camel_case(snake_case_string):\n    camel_case_string = re.sub(r\"_(.)\", lambda pat: pat.group(1).upper(), snake_case_string)\n    return camel_case_string[0].upper() + camel_case_string[1:]\n\n\nprint(snake_to_camel_case(\"hello_world\"))"
    },
    {
      "rank": 42,
      "score": 3.4843224952664444,
      "candidate": "def camel_case(snake_case_string):\n    return snake_case_string.title().replace(\"_\", \"\")\n\n\ndef test_camel_case():\n    assert camel_case(\"camel_case\") == \"CamelCase\"\n    assert camel_case(\"camel_case_string\") == \"CamelCaseString\"\n    assert camel_case(\"snake_case_string\") == \"SnakeCaseString\"\n    assert camel_case(\"snake_case\") == \"SnakeCase\"\n    assert camel_case(\"snake_case_string\") == \"SnakeCaseString\"\n    assert camel_case(\"snake_case_string_in_the_end\") == \"SnakeCaseStringInTheEnd\"\n    assert camel_case(\"this_string_is_awesome\") == \"ThisStringIsAwesome\""
    },
    {
      "rank": 43,
      "score": 3.4656400595580994,
      "candidate": "def snake_to_camel_case(snake_str: str) -> str:\n    \"\"\"\n    >>> snake_to_camel_case(\"hello_world\")\n    'helloWorld'\n    >>> snake_to_camel_case(\"hello_world_and_universe\")\n    'helloWorldAndUniverse'\n    >>> snake_to_camel_case(\"hello_world_and_universe_and_mars\")\n    'helloWorldAndUniverseAndMars'\n    >>> snake_to_camel_case(\"hello_world_and_universe_and_mars_and_saturn\")\n    'helloWorldAndUniverseAndMarsAndSaturn'\n    >>> snake_to_camel_case(\"hello_world_and_universe_and_mars_and_saturn_and_neptune\")\n    'helloWorldAndUniverseAndMarsAndSaturnAndNeptune'\n    >>> snake_to_camel_case(\"hello_world_and_universe_and_mars_and_saturn_and_neptune_and_venus\")\n    'helloWorldAndUniverseAndMarsAndSaturnAndNeptuneAndVenus'\n    \"\"\"\n    return snake_str.title().replace(\"_\", \"\")\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 44,
      "score": 3.4112724560515946,
      "candidate": "import re\n\ndef to_camel_case(snake_str):\n    return ''.join(word.capitalize() for word in snake_str.split('_'))\n\n\nif __name__ == \"__main__\":\n    snake_str = \"some_snake_case_string\"\n    print(to_camel_case(snake_str))"
    },
    {
      "rank": 45,
      "score": 3.410951252187612,
      "candidate": "import re\n\n\ndef snake_to_camel_case(snake_case: str) -> str:\n    \"\"\"\n    >>> snake_to_camel_case(\"hello_world\")\n    'helloWorld'\n    >>> snake_to_camel_case(\"my_name_is_jonathan\")\n    'myNameIsJonathan'\n    >>> snake_to_camel_case(\"hello_world_and_hello_world\")\n    'helloWorldAndHelloWorld'\n    >>> snake_to_camel_case(\"hello_world_and_hello_world2\")\n    'helloWorldAndHelloWorld2'\n    >>> snake_to_camel_case(\"hello_world_and_hello_world_\")\n    'helloWorldAndHelloWorld'\n    >>> snake_to_camel_case(\"hello_world_and_hello_world_2\")\n    'helloWorldAndHelloWorld2'\n    >>> snake_to_camel_case(\"hello_world_and_hello_world2_\")\n    'helloWorldAndHelloWorld2'\n    >>> snake_to_camel_case(\"hello_world_and_hello_world2_2\")\n    'helloWorldAndHelloWorld22'\n    \"\"\"\n    snake_case = snake_case.lower()\n\n    # Split the string into words\n    words = re.split(r\"_\", snake_case)\n\n    # Concatenate the words and capitalize the first letter of each\n    camel_case = \"\".join([word.capitalize() for word in words])\n\n    return camel_case\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 46,
      "score": 3.406262911197099,
      "candidate": "import re\n\n\ndef snake_to_camel(snake_str):\n    return re.sub(r\"_([a-zA-Z0-9])\", lambda x: x.group(1).upper(), snake_str)\n\n\ndef test_snake_to_camel():\n    \"\"\"Test for snake_to_camel function.\"\"\"\n    assert snake_to_camel(\"hello_world\") == \"helloWorld\"\n    assert snake_to_camel(\"_hello_world\") == \"helloWorld\"\n    assert snake_to_camel(\"hello_world_camel_case\") == \"helloWorldCamelCase\"\n    assert snake_to_camel(\"_hello_world_camel_case\") == \"helloWorldCamelCase\"\n    assert snake_to_camel(\"hello_world_camel_case_\") == \"helloWorldCamelCase_\"\n    assert snake_to_camel(\"_hello_world_camel_case_\") == \"helloWorldCamelCase_\""
    },
    {
      "rank": 47,
      "score": 3.3837173645764542,
      "candidate": "import re\n\n\ndef camel_case(snake_case_string):\n    if snake_case_string == \"\":\n        return snake_case_string\n    else:\n        return snake_case_string[0].upper() + re.sub(r\"_([a-z])\", lambda m: m.group(1).upper(), snake_case_string[1:])\n\n\ndef main():\n    print(camel_case(\"snake_case_string\"))\n    print(camel_case(\"\"))\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 48,
      "score": 3.2712800217929825,
      "candidate": "import re\n\n\ndef camel_case(string):\n    string = re.sub(r\"(_|-)+\", \" \", string).title().replace(\" \", \"\")\n    return string[0].lower() + string[1:]\n\n\ndef main():\n    string = \"a_very_nice_snake\"\n    print(camel_case(string))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 49,
      "score": 3.256633716556678,
      "candidate": "def snake_to_camel_case(snake_str):\n    \"\"\"\n    >>> snake_to_camel_case('snake_case')\n    'snakeCase'\n    >>> snake_to_camel_case('snake_case_to_camel_case')\n    'snakeCaseToCamelCase'\n    \"\"\"\n    # Split the string by '_' and join with empty string\n    return \"\".join(word.capitalize() for word in snake_str.split(\"_\"))\n\n\nif __name__ == \"__main__\":\n    from doctest import testmod\n\n    testmod()"
    },
    {
      "rank": 50,
      "score": 3.1878490091728358,
      "candidate": "import re\n\n\ndef camel_case(snake_case_str):\n    words = snake_case_str.split(\"_\")\n    return words[0] + \"\".join(word.title() for word in words[1:])\n\n\ndef camel_case_2(snake_case_str):\n    return snake_case_str.title().replace(\"_\", \"\")\n\n\ndef camel_case_3(snake_case_str):\n    return \"\".join(word.title() for word in snake_case_str.split(\"_\"))\n\n\ndef camel_case_4(snake_case_str):\n    return re.sub(r\"(?!^)_([a-zA-Z])\", lambda m: m.group(1).upper(), snake_case_str)\n\n\ndef main():\n    snake_case_str = \"snake_case\"\n    print(camel_case(snake_case_str))\n    print(camel_case_2(snake_case_str))\n    print(camel_case_3(snake_case_str))\n    print(camel_case_4(snake_case_str))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 51,
      "score": 3.180697802754207,
      "candidate": "from re import sub\n\n\ndef to_camel_case(snake_str: str) -> str:\n    \"\"\"Convert snake case string to camel case string.\n\n    Args:\n        snake_str (str): snake case string.\n\n    Examples:\n        >>> assert to_camel_case(\"camel_case\") == \"camelCase\"\n        >>> assert to_camel_case(\"snake_case\") == \"snakeCase\"\n    \"\"\"\n    return sub(r\"(?!^)_([a-zA-Z])\", lambda m: m.group(1).upper(), snake_str)\n\n\nif __name__ == \"__main__\":\n    print(to_camel_case(\"camel_case\"))\n    print(to_camel_case(\"snake_case\"))"
    },
    {
      "rank": 52,
      "score": 3.1718091447842305,
      "candidate": "import re\n\n\ndef convert_to_camel_case(snake_str: str) -> str:\n    \"\"\"Convert snake case string to camel case string.\n\n    Args:\n        snake_str (str): snake case string\n\n    Returns:\n        str: camel case string\n    \"\"\"\n    words = snake_str.split(\"_\")\n    return words[0] + \"\".join(word.capitalize() for word in words[1:])\n\n\ndef main():\n    snake_str = \"this_is_snake_case\"\n    print(convert_to_camel_case(snake_str))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 53,
      "score": 3.165631715701782,
      "candidate": "def snake_to_camel_case(snake_str):\n    \"\"\"\n    >>> snake_to_camel_case(\"hello_world\")\n    'helloWorld'\n    >>> snake_to_camel_case(\"_hello_world\")\n    'helloWorld'\n    >>> snake_to_camel_case(\"hello_world_\")\n    'helloWorld'\n    >>> snake_to_camel_case(\"hello_world_123\")\n    'helloWorld123'\n    \"\"\"\n    return snake_str.title().replace(\"_\", \"\")\n\n\ndef snake_to_camel_case_with_regex(snake_str):\n    \"\"\"\n    >>> snake_to_camel_case_with_regex(\"hello_world\")\n    'helloWorld'\n    >>> snake_to_camel_case_with_regex(\"_hello_world\")\n    'helloWorld'\n    >>> snake_to_camel_case_with_regex(\"hello_world_\")\n    'helloWorld'\n    >>> snake_to_camel_case_with_regex(\"hello_world_123\")\n    'helloWorld123'\n    \"\"\"\n    return snake_str.title().replace(\"_\", \"\").replace(\" \", \"\")\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 54,
      "score": 3.157123666297637,
      "candidate": "import re\n\n\ndef snake_to_camel_case(snake_case: str) -> str:\n    \"\"\"Returns camel case of a snake case string.\n\n    Args:\n        snake_case (str): snake case string\n\n    Examples:\n        >>> assert snake_to_camel_case('hello_world') == 'helloWorld'\n        >>> assert snake_to_camel_case('_hello_world') == 'helloWorld'\n    \"\"\"\n    return re.sub(r\"(?:^|_)(.)\", lambda m: m.group(1).upper(), snake_case)\n\n\nif __name__ == \"__main__\":\n    print(snake_to_camel_case(\"hello_world\"))"
    },
    {
      "rank": 55,
      "score": 3.1209811357830173,
      "candidate": "from re import sub\n\n\ndef snake_to_camel_case(string: str) -> str:\n    \"\"\"Convert snake case string to camel case string.\n\n    Args:\n        string (str): snake case string\n\n    Returns:\n        str: camel case string\n    \"\"\"\n    return sub(r\"_(.)\", lambda x: x.group(1).upper(), string.title())\n\n\nif __name__ == \"__main__\":\n    print(snake_to_camel_case(\"hello_world\"))"
    },
    {
      "rank": 56,
      "score": 3.104431797502378,
      "candidate": "def snake_to_camel(snake_str: str) -> str:\n    \"\"\"Convert snake case to camel case.\n\n    Args:\n        snake_str (str): snake case string.\n\n    Returns:\n        str: camel case string.\n\n    Examples:\n        >>> assert snake_to_camel('hello_world') == 'helloWorld'\n        >>> assert snake_to_camel('hello_world_to_you') == 'helloWorldToYou'\n        >>> assert snake_to_camel('hello') == 'hello'\n        >>> assert snake_to_camel('hello_') == 'hello'\n        >>> assert snake_to_camel('_hello') == 'hello'\n    \"\"\"\n    return snake_str.title().replace(\"_\", \"\")\n\n\nif __name__ == \"__main__\":\n    print(snake_to_camel(\"hello_world\"))\n    print(snake_to_camel(\"hello_world_to_you\"))\n    print(snake_to_camel(\"hello\"))\n    print(snake_to_camel(\"hello_\"))\n    print(snake_to_camel(\"_hello\"))"
    },
    {
      "rank": 57,
      "score": 3.0984306179345618,
      "candidate": "def snake_to_camel(snake_str: str) -> str:\n    \"\"\"\n    >>> snake_to_camel('snake_case_string')\n    'SnakeCaseString'\n    \"\"\"\n    return snake_str.title().replace(\"_\", \"\")\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 58,
      "score": 3.085684140594985,
      "candidate": "from re import sub\n\n\ndef to_camel_case(snake_case: str) -> str:\n    \"\"\"Convert snake case string to camel case.\n\n    Args:\n        snake_case (str): snake case string\n\n    Examples:\n        >>> assert to_camel_case(\"this_is_snake_case\") == \"thisIsSnakeCase\"\n    \"\"\"\n    return sub(r\"(_|-)+(.)\", lambda m: m.group(2).upper(), snake_case)\n\n\nif __name__ == \"__main__\":\n    print(to_camel_case(\"this_is_snake_case\"))"
    },
    {
      "rank": 59,
      "score": 3.055461294854933,
      "candidate": "import re\n\n\ndef snake_to_camel_case(string):\n    \"\"\"\n    >>> snake_to_camel_case(\"hello_world\")\n    'helloWorld'\n    >>> snake_to_camel_case(\"hello_world_python\")\n    'helloWorldPython'\n    >>> snake_to_camel_case(\"hello_world_python_programming\")\n    'helloWorldPythonProgramming'\n    \"\"\"\n    if \"_\" not in string:\n        return string\n\n    pattern = r\"(_)([a-zA-Z])\"\n    return re.sub(pattern, lambda x: x.group(2).upper(), string)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 60,
      "score": 3.033764102343962,
      "candidate": "import re\n\n\ndef to_camel_case(snake_case: str) -> str:\n    \"\"\"Converts a snake_case string to camelCase string.\n\n    Args:\n        snake_case (str): snake case string.\n\n    Returns:\n        str: camel case string.\n    \"\"\"\n    return re.sub(r\"_([a-z])\", lambda m: m.group(1).upper(), snake_case)\n\n\nif __name__ == \"__main__\":\n    assert to_camel_case(\"hello_world\") == \"helloWorld\"\n    assert to_camel_case(\"_hello_world\") == \"helloWorld\"\n    assert to_camel_case(\"hello_world_\") == \"helloWorld\"\n    assert to_camel_case(\"hello_world_hi_\") == \"helloWorldHi\"\n    assert to_camel_case(\"hello_world_hi_how_are_you_\") == \"helloWorldHiHowAreYou\"\n    assert to_camel_case(\"hello_world_hi_how_are_you_nice_\") == \"helloWorldHiHowAreYouNice\"\n    assert to_camel_case(\"hello_world_hi_how_are_you_nice_today_\") == \"helloWorldHiHowAreYouNiceToday\"\n    assert to_camel_case(\"hello_world_hi_how_are_you_nice_today_well_\") == \"helloWorldHiHowAreYouNiceTodayWell\"\n    assert to_camel_case(\"hello_world_hi_how_are_you_nice_today_well_doing_\") == \"helloWorldHiHowAreYouNiceTodayWellDoing\""
    },
    {
      "rank": 61,
      "score": 2.993251387631033,
      "candidate": "import re\n\ndef to_camel_case(snake_str):\n    \"\"\"\n    To convert a snake_case string to camel case\n    :param snake_str: string to convert\n    :return: converted string\n    \"\"\"\n    return snake_str.title().replace(\"_\", \"\")\n\n\ndef main():\n    snake_str = \"snake_case_string\"\n    print(to_camel_case(snake_str))\n\n    snake_str = \"this_is_snake_case_string\"\n    print(to_camel_case(snake_str))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 62,
      "score": 2.982086980445024,
      "candidate": "import re\n\n\ndef snake_to_camel_case(snake_str):\n    camel_case_str = re.sub(r'_([a-zA-Z])', lambda x: x.group(1).upper(), snake_str)\n    return camel_case_str[0].upper() + camel_case_str[1:]\n\n\ndef test_snake_to_camel_case():\n    assert snake_to_camel_case('snake_to_camel_case') == 'snakeToCamelCase'\n    assert snake_to_camel_case('snake_case_with_multiple_words') == 'snakeCaseWithMultipleWords'\n    assert snake_to_camel_case('snake_case_with_numbers32') == 'snakeCaseWithNumbers32'\n\n\nif __name__ == '__main__':\n    test_snake_to_camel_case()"
    },
    {
      "rank": 63,
      "score": 2.930867849414408,
      "candidate": "def to_camel_case(string):\n    return string.replace('_', ' ').title().replace(' ', '')\n\n\ndef main():\n    print(to_camel_case(\"the_little_red_fox\"))\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 64,
      "score": 2.9071705116680913,
      "candidate": "import re\n\n\ndef snake_to_camel_case(snake_case: str) -> str:\n    \"\"\"Converts snake case string to camel case string.\n\n    Args:\n        snake_case (str): snake case string\n\n    Examples:\n        >>> assert snake_to_camel_case('snake_case') == 'SnakeCase'\n        >>> assert snake_to_camel_case('snake_case_with_multiple_words') == 'SnakeCaseWithMultipleWords'\n    \"\"\"\n    return re.sub(r\"(?:^|_)([a-z])\", lambda x: x.group(1).upper(), snake_case)\n\n\nif __name__ == \"__main__\":\n    print(snake_to_camel_case(\"snake_case\"))\n    print(snake_to_camel_case(\"snake_case_with_multiple_words\"))"
    },
    {
      "rank": 65,
      "score": 2.890164056081244,
      "candidate": "def snake_to_camel_case(snake_string: str) -> str:\n    \"\"\"\n    >>> snake_to_camel_case(\"snake_case\")\n    'snakeCase'\n    >>> snake_to_camel_case(\"snake_case_with_multiple_underscores\")\n    'snakeCaseWithMultipleUnderscores'\n    >>> snake_to_camel_case(\"snake_case_with_multiple_underscores_and_1_number\")\n    'snakeCaseWithMultipleUnderscoresAnd1Number'\n    >>> snake_to_camel_case(\"snake_case_with_1_number_and_1_letter\")\n    'snakeCaseWith1NumberAnd1Letter'\n    >>> snake_to_camel_case(\"snake_case_with_1_letter_and_1_number\")\n    'snakeCaseWith1LetterAnd1Number'\n    >>> snake_to_camel_case(\"snake_case_with_1_letter\")\n    'snakeCaseWith1Letter'\n    >>> snake_to_camel_case(\"snake_case_with_1_number\")\n    'snakeCaseWith1Number'\n    >>> snake_to_camel_case(\"snake_case_with_1_letter_and_1_number\")\n    'snakeCaseWith1LetterAnd1Number'\n    >>> snake_to_camel_case(\"snake_case_with_multiple_underscores_and_1_number\")\n    'snakeCaseWithMultipleUnderscoresAnd1Number'\n    >>> snake_to_camel_case(\"snake_case_with_multiple_underscores_and_1_number\")\n    'snakeCaseWithMultipleUnderscoresAnd1Number'\n    \"\"\"\n    return snake_string.replace(\"_\", \" \").title().replace(\" \", \"\")\n\n\nif __name__ == \"__main__\":\n    from doctest import testmod\n\n    testmod()"
    },
    {
      "rank": 66,
      "score": 2.887111849756732,
      "candidate": "import re\n\n\ndef convert_snake_case_to_camel_case(snake_case_string: str) -> str:\n    \"\"\"Convert the given snake case string to camel case string.\n\n    Args:\n        snake_case_string (str): snake case string\n\n    Returns:\n        str: camel case string\n    \"\"\"\n\n    return re.sub(r\"(?:^|_)([a-zA-Z])\", lambda m: m.group(1).upper(), snake_case_string)\n\n\nif __name__ == \"__main__\":\n    print(convert_snake_case_to_camel_case(\"hello_world\"))"
    },
    {
      "rank": 67,
      "score": 2.8829315215254097,
      "candidate": "import re\n\n\ndef snake_to_camel(snake_string: str) -> str:\n    \"\"\"Convert snake case string to camel case string.\n\n    Args:\n        snake_string (str): the string to be converted.\n\n    Returns:\n        str: the converted string.\n    \"\"\"\n    camel_string = re.sub(r\"_([a-z])\", lambda m: m.group(1).upper(), snake_string)\n    return camel_string[0].upper() + camel_string[1:]\n\n\nif __name__ == \"__main__\":\n    print(snake_to_camel(\"snake_to_camel_case\"))"
    },
    {
      "rank": 68,
      "score": 2.882923312638332,
      "candidate": "import re\n\n\ndef snake_to_camel_case(snake_case_string):\n    words = re.split('_', snake_case_string)\n    return words[0] + ''.join(word.capitalize() for word in words[1:])\n\n\nif __name__ == '__main__':\n    test_cases = [\n        ('my_snake_case_variable', 'mySnakeCaseVariable'),\n        ('my_camel_case_variable', 'myCamelCaseVariable'),\n        ('my_camel_case', 'myCamelCase'),\n        ('my_camel_case_name', 'myCamelCaseName'),\n        ('my_camel_case_name_1', 'myCamelCaseName1'),\n    ]\n\n    for test_string, expected_output in test_cases:\n        assert snake_to_camel_case(test_string) == expected_output"
    },
    {
      "rank": 69,
      "score": 2.8541531251033616,
      "candidate": "from re import sub\n\n\ndef convert_to_camel_case(snake_case: str) -> str:\n    \"\"\"Convert the given snake case string to camel case string by using regex.\n\n    Args:\n        snake_case (str): snake case string.\n\n    Examples:\n        >>> assert convert_to_camel_case(\"hello_world\") == \"helloWorld\"\n    \"\"\"\n    return sub(r\"(_|-)+(.)\", lambda m: m.group(2).upper(), snake_case)\n\n\nif __name__ == \"__main__\":\n    print(convert_to_camel_case(\"hello_world\"))"
    },
    {
      "rank": 70,
      "score": 2.8494481522053556,
      "candidate": "import re\n\n\ndef snake_to_camel(snake_case_string: str) -> str:\n    \"\"\"Returns the snake case string converted to camel case.\n\n    Parameters:\n        snake_case_string (str): The snake case string.\n\n    Returns:\n        str: The camel case string.\n\n    Examples:\n        >>> snake_to_camel('hello_world')\n        'helloWorld'\n        >>> snake_to_camel('_hello_world')\n        'helloWorld'\n        >>> snake_to_camel('hello_world_')\n        'helloWorld'\n        >>> snake_to_camel('hello_world__')\n        'helloWorld'\n        >>> snake_to_camel('hello_world___')\n        'helloWorld'\n        >>> snake_to_camel('hello_world__1')\n        'helloWorld1'\n    \"\"\"\n    return re.sub(r\"(_|__|__|_)+\", \" \", snake_case_string).title().replace(\" \", \"\")\n\n\nif __name__ == \"__main__\":\n    print(snake_to_camel(\"hello_world\"))"
    },
    {
      "rank": 71,
      "score": 2.836168926701116,
      "candidate": "import re\n\n\ndef snake_to_camel_case(snake_case_str: str) -> str:\n    return re.sub(r'(?:^|_)([a-zA-Z])', lambda x: x.group(1).upper(), snake_case_str)\n\n\nif __name__ == \"__main__\":\n    assert snake_to_camel_case(\"hello_world\") == \"HelloWorld\"\n    assert snake_to_camel_case(\"a_b_c\") == \"ABC\"\n    assert snake_to_camel_case(\"a_b_c_d\") == \"ABCD\"\n    assert snake_to_camel_case(\"a_bc_d\") == \"ABCD\"\n    assert snake_to_camel_case(\"a_b_cd\") == \"ABCD\"\n    assert snake_to_camel_case(\"a_b_c_d_e\") == \"ABCDE\"\n    assert snake_to_camel_case(\"a_b_c_d_e_f\") == \"ABCDEF\"\n    assert snake_to_camel_case(\"a_b_c_d_e_f_g\") == \"ABCDEFG\"\n    assert snake_to_camel_case(\"a_b_c_d_e_f_g_h\") == \"ABCDEFGH\"\n    assert snake_to_camel_case(\"a_b_c_d_e_f_g_h_i\") == \"ABCDEFGHI\"\n    assert snake_to_camel_case(\"a_b_c_d_e_f_g_h_i_j\") == \"ABCDEFGHIJ\"\n    assert snake_to_camel_case(\"a_b_c_d_e_f_g_h_i_j_k\") == \"ABCDEFGHIJK\"\n    assert snake_to_camel_case(\"a_b_c_d_e_f_g_h_i_j_k_l\") == \"ABCDEFGHIJKL\"\n    assert snake_to_camel_case(\"a_"
    },
    {
      "rank": 72,
      "score": 2.8074588597918417,
      "candidate": "import re\n\n\ndef snake_to_camel_case(snake_case: str) -> str:\n    \"\"\"Convert snake case string to camel case string.\n\n    Args:\n        snake_case (str): snake case string\n\n    Returns:\n        str: camel case string\n    \"\"\"\n    return re.sub(r\"_([a-z])\", lambda m: m.group(1).upper(), snake_case)\n\n\nif __name__ == \"__main__\":\n    print(snake_to_camel_case(\"camel_case\"))\n    print(snake_to_camel_case(\"snake_case\"))\n    print(snake_to_camel_case(\"snake_case_123\"))"
    },
    {
      "rank": 73,
      "score": 2.803945923433921,
      "candidate": "import re\n\n\ndef snake_to_camel_case(snake_str):\n    return re.sub(r\"_([a-zA-Z0-9])\", lambda x: x.group(1).upper(), snake_str)\n\n\ndef test_snake_to_camel_case():\n    \"\"\"\n    >>> snake_to_camel_case(\"a_b_c\")\n    'ABC'\n    >>> snake_to_camel_case(\"a_b_c_d\")\n    'ABCD'\n    >>> snake_to_camel_case(\"a_b_c_d_e\")\n    'ABCDE'\n    >>> snake_to_camel_case(\"a\")\n    'A'\n    \"\"\"\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 74,
      "score": 2.769680614520106,
      "candidate": "import re\n\n\ndef snake_to_camel_case(snake_str):\n    # Write your code here\n    return snake_str.title().replace(\"_\", \"\")\n\n\ndef main():\n    print(snake_to_camel_case(\"name_of_the_function\"))\n    print(snake_to_camel_case(\"name_of_the_function1\"))\n    print(snake_to_camel_case(\"name_of_the_function_1\"))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 75,
      "score": 2.768291153593769,
      "candidate": "def snake_to_camel_case(snake_str: str) -> str:\n    \"\"\"\n    >>> snake_to_camel_case(\"a_b_c_d_e\")\n    'aBCDE'\n    >>> snake_to_camel_case(\"a_b_c\")\n    'aBC'\n    >>> snake_to_camel_case(\"a_bc\")\n    'aBc'\n    >>> snake_to_camel_case(\"a_bc_d\")\n    'aBCd'\n    >>> snake_to_camel_case(\"a_bc_d_e_f\")\n    'aBCdEF'\n    \"\"\"\n    return snake_str.replace(\"_\", \" \").title().replace(\" \", \"\")\n\n\nif __name__ == \"__main__\":\n    from doctest import testmod\n\n    testmod()"
    },
    {
      "rank": 76,
      "score": 2.7671351232148718,
      "candidate": "import re\n\n\ndef snake_to_camel_case(snake_case_string):\n    return re.sub(r'(?!^)_([a-zA-Z])', lambda m: m.group(1).upper(), snake_case_string)\n\n\ndef main():\n    print(snake_to_camel_case(\"hello_world\"))\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 77,
      "score": 2.765262807032524,
      "candidate": "def snake_to_camel(snake_str: str) -> str:\n    \"\"\"\n    >>> snake_to_camel(\"snake_case\")\n    'snakeCase'\n    \"\"\"\n    return snake_str.title().replace(\"_\", \"\")\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 78,
      "score": 2.760412881077355,
      "candidate": "def snake_to_camel(snake_case: str) -> str:\n    \"\"\"Converts snake case string to camel case string.\n\n    Args:\n        snake_case (str): the string to convert\n\n    Returns:\n        str: converted string\n    \"\"\"\n\n    return snake_case.replace(\"_\", \" \").title().replace(\" \", \"\")\n\n\nif __name__ == \"__main__\":\n    print(snake_to_camel(\"my_function_name\"))"
    },
    {
      "rank": 79,
      "score": 2.749121478207732,
      "candidate": "import re\n\n\ndef convert_to_camel_case(string: str) -> str:\n    \"\"\"Convert snake case string to camel case string.\n\n    Args:\n        string (str): snake case string\n\n    Returns:\n        str: camel case string\n    \"\"\"\n    return \"\".join(re.sub(r\"(_|-)+(.)\", lambda m: m.group(2).upper(), string).title().split())\n\n\nif __name__ == \"__main__\":\n    print(convert_to_camel_case(\"snake_case\"))\n    print(convert_to_camel_case(\"Snake-case\"))\n    print(convert_to_camel_case(\"snake--case\"))"
    },
    {
      "rank": 80,
      "score": 2.7408648908631763,
      "candidate": "import re\n\n\ndef snake_to_camel_case(snake_case: str) -> str:\n    \"\"\"Convert snake case string to camel case string.\n\n    Args:\n        snake_case (str): snake case string.\n\n    Returns:\n        str: camel case string.\n\n    Examples:\n        >>> snake_to_camel_case(\"hello_world\")\n        'helloWorld'\n        >>> snake_to_camel_case(\"hello_world_and_universe\")\n        'helloWorldAndUniverse'\n    \"\"\"\n    return re.sub(\n        r\"(_+[a-z])\",\n        lambda match: match.group()[1:].upper(),\n        snake_case,\n    )\n\n\nif __name__ == \"__main__\":\n    print(snake_to_camel_case(\"hello_world\"))\n    print(snake_to_camel_case(\"hello_world_and_universe\"))"
    },
    {
      "rank": 81,
      "score": 2.718856235379514,
      "candidate": "def to_camel_case(snake_case_string: str) -> str:\n    \"\"\"Convert snake_case_string to camelCaseString\n\n    Args:\n        snake_case_string (str): string to convert\n\n    Returns:\n        str: converted string\n    \"\"\"\n    return snake_case_string.title().replace(\"_\", \"\")\n\n\nif __name__ == \"__main__\":\n    print(to_camel_case(\"hello_world\"))"
    },
    {
      "rank": 82,
      "score": 2.6996806550405976,
      "candidate": "import re\n\n\ndef to_camel_case(snake_case: str) -> str:\n    \"\"\"\n    >>> to_camel_case('hello_world')\n    'helloWorld'\n    >>> to_camel_case('')\n    ''\n    >>> to_camel_case('hello')\n    'hello'\n    >>> to_camel_case('hello_')\n    'hello'\n    \"\"\"\n    return re.sub(r\"(_[a-zA-Z])\", lambda m: m.group(1)[1].upper(), snake_case)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 83,
      "score": 2.6991466938853015,
      "candidate": "import re\n\n\ndef snake_to_camel(snake_case: str) -> str:\n    \"\"\"Convert snake case string to camel case string\n\n    Args:\n        snake_case (str): snake case string\n\n    Returns:\n        str: camel case string\n    \"\"\"\n    return re.sub(r\"_([a-zA-Z0-9])\", lambda x: x.group(1).upper(), snake_case)\n\n\nif __name__ == \"__main__\":\n    print(snake_to_camel(\"snake_case\"))\n    print(snake_to_camel(\"snake_case_2\"))\n    print(snake_to_camel(\"snake_case_3\"))"
    },
    {
      "rank": 84,
      "score": 2.6615389998470205,
      "candidate": "import re\n\n\ndef snake_to_camel_case(snake_str):\n    words = snake_str.split('_')\n    return words[0] + ''.join(word.capitalize() for word in words[1:])\n\n\ndef main():\n    print(snake_to_camel_case('user_name'))\n    print(snake_to_camel_case('test_string'))\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 85,
      "score": 2.648973453061324,
      "candidate": "def snake_to_camel_case(snake_case: str) -> str:\n    \"\"\"Convert a snake case string to camel case string.\n\n    Args:\n        snake_case (str): snake case string\n\n    Examples:\n        >>> assert snake_to_camel_case(\"hello_world\") == \"helloWorld\"\n        >>> assert snake_to_camel_case(\"hello_world_123\") == \"helloWorld123\"\n        >>> assert snake_to_camel_case(\"hello_the_world_123\") == \"helloTheWorld123\"\n        >>> assert snake_to_camel_case(\"hello_the_world_123\") == \"helloTheWorld123\"\n        >>> assert snake_to_camel_case(\"hello_the_world_123_\") == \"helloTheWorld123\"\n        >>> assert snake_to_camel_case(\"hello__the_world_123\") == \"helloTheWorld123\"\n        >>> assert snake_to_camel_case(\"hello_the_world_123_abc\") == \"helloTheWorld123Abc\"\n        >>> assert snake_to_camel_case(\"hello_the_world_123_abc_def\") == \"helloTheWorld123AbcDef\"\n    \"\"\"\n    return snake_case.title().replace(\"_\", \"\")\n\n\nif __name__ == \"__main__\":\n    print(snake_to_camel_case(\"hello_world\"))"
    },
    {
      "rank": 86,
      "score": 2.5957531985534064,
      "candidate": "def convert_to_camel_case(snake_case_string: str) -> str:\n    \"\"\"\n    >>> convert_to_camel_case('hello_world')\n    'helloWorld'\n    >>> convert_to_camel_case('')\n    ''\n    >>> convert_to_camel_case('a')\n    'a'\n    >>> convert_to_camel_case('_hello_world_')\n    'helloWorld'\n    >>> convert_to_camel_case('__hello_world__')\n    'helloWorld'\n    >>> convert_to_camel_case('__hello_world___')\n    'helloWorld'\n    >>> convert_to_camel_case('hello_world_')\n    'helloWorld'\n    >>> convert_to_camel_case('hello_world__')\n    'helloWorld'\n    \"\"\"\n    snake_case_string = snake_case_string.lstrip(\"_\")\n    snake_case_string = snake_case_string.rstrip(\"_\")\n    return (\n        snake_case_string[0].lower() + snake_case_string[1:].replace(\"_\", \"\")\n    )\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 87,
      "score": 2.580391238388681,
      "candidate": "import re\n\n\ndef camel_case(string):\n    result = re.sub(r'(?<!^)(?=[A-Z])', ' ', string)\n    return result.title().replace(' ', '')\n\n\nif __name__ == '__main__':\n    snake_string = 'this_is_a_snake_case_string'\n    print(camel_case(snake_string))"
    },
    {
      "rank": 88,
      "score": 2.5459879622393946,
      "candidate": "import re\ndef snake_to_camel_case(s):\n    return re.sub(r\"_([a-z])\", lambda m: m.group(1).upper(), s)\n\n\nif __name__ == \"__main__\":\n    print(snake_to_camel_case(\"hello_world\"))"
    },
    {
      "rank": 89,
      "score": 2.493584439832788,
      "candidate": "import re\n\n\ndef snake_to_camel_case(snake_case: str) -> str:\n    \"\"\"\n    >>> snake_to_camel_case(\"a_b_c\")\n    'ABC'\n    >>> snake_to_camel_case(\"a_b_c_d\")\n    'ABCD'\n    >>> snake_to_camel_case(\"a_b_c_d_e\")\n    'ABCD'\n    >>> snake_to_camel_case(\"a\")\n    'A'\n    >>> snake_to_camel_case(\"a_b\")\n    'AB'\n    >>> snake_to_camel_case(\"a_bc\")\n    'ABC'\n    >>> snake_to_camel_case(\"a_b_c_d_e_f\")\n    'ABCDEF'\n    >>> snake_to_camel_case(\"a_b_c_d_e_f_g\")\n    'ABCDEFG'\n    \"\"\"\n    return re.sub(r\"_([a-z])\", lambda x: x.group(1).upper(), snake_case)\n\n\nif __name__ == \"__main__\":\n    from doctest import testmod\n\n    testmod()"
    },
    {
      "rank": 90,
      "score": 2.446832512996986,
      "candidate": "import re\n\n\ndef snake_to_camel_case(snake_case_string: str) -> str:\n    \"\"\"\n    >>> snake_to_camel_case(\"this_is_snake_case\")\n    'thisIsSnakeCase'\n    \"\"\"\n    camel_case = re.sub(r\"_(.)\", lambda x: x.group(1).upper(), snake_case_string)\n    return camel_case[0].upper() + camel_case[1:]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 91,
      "score": 2.4245032112888487,
      "candidate": "import re\n\ndef snake_to_camel(snake_case: str) -> str:\n    \"\"\"Convert snake case string to camel case string.\"\"\"\n    return re.sub(r\"_([a-z])\", lambda match: match.group(1).upper(), snake_case)\n\n\nif __name__ == \"__main__\":\n    snake_case_string = \"this_is_a_snake_case_string\"\n    print(snake_to_camel(snake_case_string))"
    },
    {
      "rank": 92,
      "score": 2.4018966879596646,
      "candidate": "import re\n\n\ndef snake_to_camel_case(snake_str):\n    return re.sub(r\"_([a-zA-Z0-9])\", lambda m: m.group(1).upper(), snake_str)\n\n\ndef test_snake_to_camel_case():\n    assert snake_to_camel_case(\"my_favorite_language\") == \"myFavoriteLanguage\"\n    assert snake_to_camel_case(\"my_function_name_is_so_awesome\") == \"myFunctionNameIsSoAwesome\"\n    assert snake_to_camel_case(\"my_variable_name\") == \"myVariableName\""
    },
    {
      "rank": 93,
      "score": 2.389578175014489,
      "candidate": "def camel_case(string):\n    return string.replace(\"_\", \" \").title().replace(\" \", \"\")\n\n\ndef camel_case_split(string):\n    return string.title().replace(\" \", \"\").replace(\"_\", \"\")"
    },
    {
      "rank": 94,
      "score": 2.3359069755507846,
      "candidate": "def snake_to_camel_case(snake_str: str) -> str:\n    \"\"\"Converts snake case string to camel case string.\n\n    Args:\n        snake_str (str): snake case string.\n\n    Returns:\n        str: camel case string.\n\n    \"\"\"\n    return snake_str.title().replace(\"_\", \"\")\n\n\nif __name__ == \"__main__\":\n    print(snake_to_camel_case(\"hello_world\"))"
    },
    {
      "rank": 95,
      "score": 2.293848149332354,
      "candidate": "import re\n\n\ndef snake_to_camel_case(string: str) -> str:\n    return re.sub(r\"_([a-z])\", lambda m: m.group(1).upper(), string)\n\n\ndef test_snake_to_camel_case():\n    \"\"\"Test for snake_to_camel_case function.\"\"\"\n    assert snake_to_camel_case(\"snake_case\") == \"snakeCase\"\n    assert snake_to_camel_case(\"snake_case_one\") == \"snakeCaseOne\"\n    assert snake_to_camel_case(\"snake_case_one_two\") == \"snakeCaseOneTwo\"\n    assert snake_to_camel_case(\"snake_case_one_two_three\") == \"snakeCaseOneTwoThree\"\n    assert snake_to_camel_case(\"snake_case_one_two_three_four\") == \"snakeCaseOneTwoThreeFour\"\n    assert snake_to_camel_case(\"snake_case_one_two_three_four_five\") == \"snakeCaseOneTwoThreeFourFive\"\n\n\nif __name__ == \"__main__\":\n    test_snake_to_camel_case()"
    },
    {
      "rank": 96,
      "score": 2.2682425259339407,
      "candidate": "from re import sub\n\n\ndef to_camel_case(snake_case_string):\n    \"\"\"\n    >>> to_camel_case('snake_case_string')\n    'snakeCaseString'\n    >>> to_camel_case('')\n    ''\n    >>> to_camel_case('snake_case')\n    'snakeCase'\n    >>> to_camel_case('snake-case')\n    'snakeCase'\n    >>> to_camel_case('snake-case-string')\n    'snakeCaseString'\n    \"\"\"\n    return sub(r\"(_|-)(.)\", lambda m: m.group(2).upper(), snake_case_string)\n\n\nif __name__ == \"__main__\":\n    from doctest import testmod\n\n    testmod()"
    },
    {
      "rank": 97,
      "score": 2.137541083743484,
      "candidate": "import re\n\n\ndef snake_to_camel(snake_str: str) -> str:\n    \"\"\"\n    >>> snake_to_camel(\"snake_case\")\n    'snakeCase'\n    >>> snake_to_camel(\"snake_case_123\")\n    'snakeCase123'\n    \"\"\"\n    return re.sub(r\"(?:^|_)([a-z])\", lambda x: x.group(1).upper(), snake_str)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 98,
      "score": 2.118479922318633,
      "candidate": "import re\n\n\ndef snake_to_camel(snake_case_str: str) -> str:\n    \"\"\"\n    >>> snake_to_camel(\"snake_case\")\n    'snakeCase'\n    \"\"\"\n    return re.sub(r\"_([a-zA-Z0-9])\", lambda m: m.group(1).upper(), snake_case_str)\n\n\nif __name__ == \"__main__\":\n    from doctest import testmod\n\n    testmod()"
    },
    {
      "rank": 99,
      "score": 2.006215542699554,
      "candidate": "def snake_to_camel(snake_case_string: str) -> str:\n    \"\"\"\n    >>> snake_to_camel(\"\")\n    ''\n    >>> snake_to_camel(\"snake_case\")\n    'snakeCase'\n    >>> snake_to_camel(\"snake_case_string\")\n    'snakeCaseString'\n    >>> snake_to_camel(\"snake_case_string_with_multiple_underscores\")\n    'snakeCaseStringWithMultipleUnderscores'\n    \"\"\"\n    return snake_case_string.replace(\"_\", \" \").title().replace(\" \", \"\")\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 100,
      "score": 1.6901274479551278,
      "candidate": "import re\ndef snake_to_camel(string: str) -> str:\n    return re.sub(r\"_([a-z])\", lambda pat: pat.group(1).upper(), string)\n\n\nif __name__ == \"__main__\":\n    print(snake_to_camel(\"a_b_c_d\"))"
    }
  ]
}