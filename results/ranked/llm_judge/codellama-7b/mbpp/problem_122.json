{
  "timestamp": "2025-09-14T23:13:23.446176",
  "method": "improved_llm_judge",
  "judge_model": "codellama/CodeLlama-7b-Python-hf",
  "target_model": "codellama-7b",
  "dataset": "mbpp",
  "problem_number": 122,
  "total_candidates": 100,
  "results": [
    {
      "rank": 1,
      "score": 10.0,
      "candidate": "def sum_of_negatives(lst):\n    return sum(map(lambda x: x if x < 0 else 0, lst))\n\nprint(sum_of_negatives([1,2,3,4,5,6,7,8,9,-1,-2,-3,-4,-5]))"
    },
    {
      "rank": 2,
      "score": 10.0,
      "candidate": "def negative_sum(nums):\n    return lambda x: sum([i for i in x if i < 0])\n\n\nprint(negative_sum([1, 2, 3, 4, 5, 6, 7, 8, 9, -1, -2, -3, -4, -5, -6, -7, -8, -9]))"
    },
    {
      "rank": 3,
      "score": 10.0,
      "candidate": "def neg_sum(a):\n    return sum([x for x in a if x < 0])\n\nprint(neg_sum([1, 2, 3, 4, 5, 6, -3, -5]))"
    },
    {
      "rank": 4,
      "score": 10.0,
      "candidate": "def negative_sum(nums):\n    return lambda x: sum(i for i in x if i < 0)\n\n\ndef main():\n    nums = [2, 5, -4, -1, 1, -10, 100, 0, -5]\n    negative_sum_lambda = negative_sum(nums)\n    print(negative_sum_lambda(nums))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 5,
      "score": 10.0,
      "candidate": "def sum_of_negative_lambda(numbers):\n    return sum(filter(lambda x: x < 0, numbers))\n\n\nif __name__ == '__main__':\n    print(sum_of_negative_lambda([1, 2, 3, -4, 5, -6]))"
    },
    {
      "rank": 6,
      "score": 10.0,
      "candidate": "def sum_of_negative_lambda(list_of_numbers):\n    return sum(list(filter(lambda x: x < 0, list_of_numbers)))\n\ndef main():\n    list_of_numbers = [1, 2, 3, -4, 5, -6, -7, 8, -9]\n    print(f\"Sum of negative numbers in the list: {list_of_numbers} is {sum_of_negative_lambda(list_of_numbers)}\")\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 7,
      "score": 10.0,
      "candidate": "def sum_negative(number):\n    return sum(filter(lambda x: x < 0, number))"
    },
    {
      "rank": 8,
      "score": 10.0,
      "candidate": "#!/usr/bin/env python\ndef sum_of_neg(l):\n    return reduce(lambda x, y: x + y, filter(lambda x: x < 0, l))\n\nif __name__ == \"__main__\":\n    l = [-1, -2, -3, -4, -5, -6, -7, -8, -9]\n    print sum_of_neg(l)"
    },
    {
      "rank": 9,
      "score": 10.0,
      "candidate": "def sum_of_neg_lambda(numbers):\n    return lambda numbers: sum(list(filter(lambda x: x < 0, numbers)))\n\nprint(sum_of_neg_lambda([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, -11, -12, -13, -14]))"
    },
    {
      "rank": 10,
      "score": 10.0,
      "candidate": "def sum_neg_numbers(nums):\n    return sum(lambda x: x if x > 0 else -x, 0, nums)"
    },
    {
      "rank": 11,
      "score": 10.0,
      "candidate": "from functools import reduce\n\n\ndef sum_negatives(lst):\n    return reduce(lambda a, b: a + b, [a for a in lst if a < 0])\n\n\nif __name__ == \"__main__\":\n    print(sum_negatives([1, 2, -4, -1, 4, 6, -8, 9, -10]))"
    },
    {
      "rank": 12,
      "score": 10.0,
      "candidate": "def negative_sum(numbers):\n    return sum(list(filter(lambda x: x < 0, numbers)))\n\n\nprint(negative_sum([-100, -10, -20, -5]))"
    },
    {
      "rank": 13,
      "score": 10.0,
      "candidate": "def sum_neg(lst):\n    return lambda lst: sum(lst)\n\n\nif __name__ == '__main__':\n    print(sum_neg([1, 2, 3, -4, 5, -6, -7]))"
    },
    {
      "rank": 14,
      "score": 10.0,
      "candidate": "def sum_of_negatives(list):\n    return list(filter(lambda x: x < 0, list))\n\nprint(sum_of_negatives([-1, 2, 4, 6, -8, -9]))\nprint(sum_of_negatives([-1, -4, -8]))\nprint(sum_of_negatives([-1, 2, 4, -6, -8, -9]))\nprint(sum_of_negatives([-1, 2, 4, 6, 8, 9]))"
    },
    {
      "rank": 15,
      "score": 10.0,
      "candidate": "#!/usr/bin/env python\n# This is the lambda_example.py script.\n\ndef sum_of_neg(nums):\n    return sum([x for x in nums if x < 0])\n\n\ndef sum_of_neg_lambda(nums):\n    return sum(x for x in nums if x < 0)\n\n\ndef test_sum_of_neg():\n    print(sum_of_neg([1, 2, 3, 4, -5, -6, -7]))\n\n\ndef test_sum_of_neg_lambda():\n    print(sum_of_neg_lambda([1, 2, 3, 4, -5, -6, -7]))"
    },
    {
      "rank": 16,
      "score": 10.0,
      "candidate": "def negative_sum(nums):\n    return sum(filter(lambda x: x < 0, nums))\n\n\nif __name__ == '__main__':\n    print(negative_sum([1, 2, -3, -4, -5, -6]))"
    },
    {
      "rank": 17,
      "score": 9.0,
      "candidate": "from functools import reduce\n\n\ndef sum_of_negative_numbers(nums):\n    return reduce(lambda x, y: x + y, [num for num in nums if num < 0])\n\n\ndef test_sum_of_negative_numbers():\n    \"\"\"Test for sum_of_negative_numbers function.\"\"\"\n    assert sum_of_negative_numbers([-1, -2, -3, -4, -5]) == -15\n    assert sum_of_negative_numbers([-1, -2, 1, 2, -3, -4, 3, -5]) == -15\n    assert sum_of_negative_numbers([-1, -2, -3, -4, -5, -6]) == -21\n    assert sum_of_negative_numbers([-1, -2, -3, -4, -5, -6, -7]) == -28\n    assert sum_of_negative_numbers([-1, -2, -3, -4, -5, -6, -7, -8]) == -35\n\n\nif __name__ == \"__main__\":\n    print(sum_of_negative_numbers([-1, -2, -3, -4, -5, -6, -7, -8]))"
    },
    {
      "rank": 18,
      "score": 9.0,
      "candidate": "from functools import reduce\n\n\ndef sum_of_negatives(arr):\n    return reduce(lambda x, y: x + y, list(filter(lambda x: x < 0, arr)))\n\n\nassert sum_of_negatives([3, 2, 1, -11, -22, 4, -33, -44]) == -88\nassert sum_of_negatives([-3, -2, -1]) == -6\nassert sum_of_negatives([]) == 0"
    },
    {
      "rank": 19,
      "score": 9.0,
      "candidate": "def negative_sum(lst):\n    return sum(list(map(lambda x: x if x<0 else 0, lst)))\n\n# Another way:\ndef negative_sum_2(lst):\n    return sum(list(filter(lambda x: x<0, lst)))\n\n# Using reduce:\ndef negative_sum_3(lst):\n    return sum(list(filter(lambda x: x<0, lst)))\n\n# Using reduce:\ndef negative_sum_4(lst):\n    return reduce(lambda x, y: x+y, list(filter(lambda x: x<0, lst)))\n\n\nprint(negative_sum([1, 2, 3, 4, -5, -6, -7, -8]))\nprint(negative_sum_2([1, 2, 3, 4, -5, -6, -7, -8]))\nprint(negative_sum_3([1, 2, 3, 4, -5, -6, -7, -8]))\nprint(negative_sum_4([1, 2, 3, 4, -5, -6, -7, -8]))"
    },
    {
      "rank": 20,
      "score": 8.0,
      "candidate": "def negative_sum(nums):\n    return sum(filter(lambda x: x < 0, nums))\n\n\nif __name__ == '__main__':\n    print(negative_sum([1, 2, 3, 4, 5, 6, -1, -2, -3, -4, -5, -6]))"
    },
    {
      "rank": 21,
      "score": 8.0,
      "candidate": "def sum_of_negatives(lst):\n    return sum(filter(lambda x: x < 0, lst))\n\ndef test_sum_of_negatives():\n    assert sum_of_negatives([1, 2, -4, -1, -5]) == -6\n\nif __name__ == '__main__':\n    test_sum_of_negatives()"
    },
    {
      "rank": 22,
      "score": 8.0,
      "candidate": "def sum_of_neg(nums):\n    return sum(filter(lambda x: x<0, nums))\n\nnums = [1, 2, 3, -4, 5, -6, -7, 8, -9]\nprint(sum_of_neg(nums))"
    },
    {
      "rank": 23,
      "score": 8.0,
      "candidate": "def neg_sum(l):\n    return sum(filter(lambda x: x < 0, l))\n\ndef test(l):\n    print(neg_sum(l))\n\n\nif __name__ == '__main__':\n    test([1, 2, 3, -4, 5, -6, -7, -8])\n    test([-1, -2, -3, -4, -5, -6, -7, -8])\n    test([1, -2, 3, -4, 5, -6, 7, -8])"
    },
    {
      "rank": 24,
      "score": 8.0,
      "candidate": "from functools import reduce\n\n\ndef sum_neg(lst):\n    return reduce(lambda x, y: x + y, filter(lambda x: x < 0, lst))\n\n\ndef test_sum_neg():\n    \"\"\"Test for sum_neg function.\"\"\"\n    assert sum_neg([-1, 2, -3, 4, -5]) == -15\n    assert sum_neg([2, 3, 4]) == 0\n\n\nif __name__ == \"__main__\":\n    print(sum_neg([-1, 2, -3, 4, -5]))"
    },
    {
      "rank": 25,
      "score": 8.0,
      "candidate": "def negative_sum(arr):\n    return lambda arr: sum(filter(lambda x: x < 0, arr))\n\nprint(negative_sum([1,2,3,-5,-3,-6,4,5]))\nprint(negative_sum([1,2,3,-5,3,6,4,5]))\nprint(negative_sum([1,2,3,4,5]))"
    },
    {
      "rank": 26,
      "score": 8.0,
      "candidate": "#Solution is:\n\ndef sum_of_negative(list_of_numbers):\n    return lambda x: sum([i for i in x if i < 0])"
    },
    {
      "rank": 27,
      "score": 8.0,
      "candidate": "from functools import reduce\n\n\ndef sum_negatives(numbers: list):\n    \"\"\"\n    This function will sum the negative numbers of a given list of numbers.\n\n    :param numbers: list\n    :return: int\n    \"\"\"\n    return reduce(lambda x, y: x + y, [n for n in numbers if n < 0])\n\n\nif __name__ == \"__main__\":\n    print(sum_negatives([1, 2, -1, -4, 5, -4]))"
    },
    {
      "rank": 28,
      "score": 8.0,
      "candidate": "def sum_neg(numbers):\n    return sum([num for num in numbers if num < 0])\n\nprint(sum_neg([1, 2, 3, -4, -2, -4, -3, -1, 2, 3, 4]))"
    },
    {
      "rank": 29,
      "score": 8.0,
      "candidate": "def sum_of_negatives(lst):\n    return sum(filter(lambda x: x < 0, lst))\n\nprint(sum_of_negatives([1, 2, 3, -1, -5, -10]))\nprint(sum_of_negatives([1, 2, 3, 4, 5]))"
    },
    {
      "rank": 30,
      "score": 8.0,
      "candidate": "def sum_of_neg_lambda(nums):\n    return sum(list(map(lambda x: x if x < 0 else 0, nums)))\n\n\ndef main():\n    print(sum_of_neg_lambda([1, 2, 3, 4, 5]))\n    print(sum_of_neg_lambda([-1, -2, -3, -4, -5]))\n    print(sum_of_neg_lambda([-1, -2, 3, 4, -5]))\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 31,
      "score": 8.0,
      "candidate": "def sum_neg(nums):\n    return sum([x for x in nums if x < 0])\n\n\nprint(sum_neg([1, 2, 3, 4, 5, 6]))"
    },
    {
      "rank": 32,
      "score": 8.0,
      "candidate": "def negative_sum(nums):\n    return sum(list(filter(lambda x: x < 0, nums)))\n\n\nprint(negative_sum([1, 2, -1, -5, 10, -15]))"
    },
    {
      "rank": 33,
      "score": 8.0,
      "candidate": "from typing import List\n\n\ndef negative_sum(numbers: List[int]) -> int:\n    \"\"\"Sums negative numbers in a list.\n\n    Examples:\n        >>> assert negative_sum([-2, -3, -1]) == -6\n    \"\"\"\n    return sum(filter(lambda x: x < 0, numbers))\n\n\nif __name__ == \"__main__\":\n    print(negative_sum([-2, -3, -1]))"
    },
    {
      "rank": 34,
      "score": 8.0,
      "candidate": "#Solution is:\n\"\"\"\nlambda_sum = lambda num_list: sum(map(lambda x: x if x < 0 else 0, num_list))\n\"\"\""
    },
    {
      "rank": 35,
      "score": 8.0,
      "candidate": "#Solution is:\ndef negative_sum(numbers):\n    return sum(map(lambda x: x if x < 0 else 0, numbers))"
    },
    {
      "rank": 36,
      "score": 8.0,
      "candidate": "def sum_neg(lst):\n    return sum(map(lambda x: x if x > 0 else 0, lst))\n\ndef main():\n    lst = [1, 2, 3, -4, -1, -2, 5, -6]\n    print(sum_neg(lst))\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 37,
      "score": 8.0,
      "candidate": "# Solution\ndef negative_sum(nums):\n    return sum(filter(lambda x: x < 0, nums))\n\n# Test\nprint(negative_sum([3, -4, 1, -3, 5]))\nprint(negative_sum([3, 4, 1, 3, 5]))"
    },
    {
      "rank": 38,
      "score": 8.0,
      "candidate": "def sum_of_negative(lst):\n    return sum(filter(lambda x: x < 0, lst))\n\nprint(sum_of_negative([1,2,3,4,-1,5,-6,7,-8]))"
    },
    {
      "rank": 39,
      "score": 8.0,
      "candidate": "def sum_of_negative(nums):\n    return sum(filter(lambda x: x < 0, nums))\n\nif __name__ == \"__main__\":\n    print(sum_of_negative([1, 2, 3, -5, -7, -9, 10, -30, 45]))"
    },
    {
      "rank": 40,
      "score": 8.0,
      "candidate": "def sum_neg(numbers):\n    return sum(filter(lambda x: x < 0, numbers))\n\n\nprint(sum_neg([1, 2, 3, -4, -1, 0]))"
    },
    {
      "rank": 41,
      "score": 8.0,
      "candidate": "from functools import reduce\n\ndef sum_negatives(lst):\n    return reduce(lambda x, y: x + y, [num for num in lst if num < 0])\n\nprint(sum_negatives([1, 2, -5, -8, 0, -10]))"
    },
    {
      "rank": 42,
      "score": 8.0,
      "candidate": "from functools import reduce\n\n\ndef sum_negative(l):\n    return reduce(lambda x, y: x + y, [item for item in l if item < 0])\n\n\nprint(sum_negative([1, 2, 3, -1, -2, -3, -4]))"
    },
    {
      "rank": 43,
      "score": 8.0,
      "candidate": "def negative_sum(nums):\n    return sum(filter(lambda x: x < 0, nums))\n\nif __name__ == '__main__':\n    print(\"Enter the numbers: \")\n    nums = list(map(int, input().split()))\n\n    print(\"Sum of negative numbers: {}\".format(negative_sum(nums)))"
    },
    {
      "rank": 44,
      "score": 8.0,
      "candidate": "from functools import reduce\n\n\ndef sum_of_neg(arr):\n    return reduce(lambda x, y: x + y, [a for a in arr if a < 0])\n\n\ndef test_sum_of_neg():\n    \"\"\"Test for sum_of_neg function.\"\"\"\n    assert sum_of_neg([1, 2, -1, -5, 3, -2, 1, 1, 1, 1, 1, -5, -5]) == -15\n    assert sum_of_neg([1, 2, 3, 4, 5, 6]) == 0\n    assert sum_of_neg([-1, -2, -3, -4, -5, -6]) == -21\n\n\nif __name__ == \"__main__\":\n    print(sum_of_neg([1, 2, -1, -5, 3, -2, 1, 1, 1, 1, 1, -5, -5]))"
    },
    {
      "rank": 45,
      "score": 8.0,
      "candidate": "def sum_of_negative(lst):\n    return sum(filter(lambda x: x < 0, lst))\n\n\nif __name__ == '__main__':\n    print(\"Enter the list of numbers: \", end=\"\")\n    try:\n        l = list(map(int, input().split()))\n        print(sum_of_negative(l))\n    except ValueError:\n        print(\"Please enter only integer values.\")"
    },
    {
      "rank": 46,
      "score": 8.0,
      "candidate": "from functools import reduce\n\n\ndef sum_neg(lst: list) -> int:\n    return reduce(lambda x, y: x + y, [i for i in lst if i < 0])\n\n\nif __name__ == \"__main__\":\n    print(sum_neg([1, 2, -1, 3, 4, -2]))"
    },
    {
      "rank": 47,
      "score": 8.0,
      "candidate": "def sum_of_neg(lst):\n    return lambda lst: sum(i for i in lst if i < 0)\n\n\nprint(sum_of_neg([1, 2, 3, 4, 5, 6, -1, -2, -3, -4, -5, -6, 7, 8, 9, 10]))"
    },
    {
      "rank": 48,
      "score": 8.0,
      "candidate": "def sum_of_negatives(lst):\n    return sum(map(lambda x: x if x < 0 else 0, lst))\n\n\nprint(sum_of_negatives([1, -3, 2, -1, -4, 5]))"
    },
    {
      "rank": 49,
      "score": 8.0,
      "candidate": "from functools import reduce\n\n\ndef negative_sum(nums):\n    return reduce(lambda a, b: a + b, filter(lambda x: x < 0, nums))\n\n\nif __name__ == \"__main__\":\n    nums = [1, 2, 3, -4, -3, 2, 1, 0, -2, -1]\n    print(negative_sum(nums))"
    },
    {
      "rank": 50,
      "score": 8.0,
      "candidate": "def sum_neg(nums):\n    return sum([x for x in nums if x < 0])\n\nprint(sum_neg([1,2,3,-4,-5,-6,-7]))"
    },
    {
      "rank": 51,
      "score": 8.0,
      "candidate": "def sum_of_negative_numbers(l):\n    return lambda l: sum([i for i in l if i < 0])\n\n\nif __name__ == \"__main__\":\n    print(sum_of_negative_numbers([1, 2, 3, 4, 5, 6, 7, 8, 9]))"
    },
    {
      "rank": 52,
      "score": 8.0,
      "candidate": "def sum_of_negative(numbers):\n    return sum(filter(lambda x: x < 0, numbers))\n\n\nprint(sum_of_negative([1, 2, 3, 4, 5, 6, -1, -2, -3, -4, -5, -6]))"
    },
    {
      "rank": 53,
      "score": 8.0,
      "candidate": "def sum_neg(lst):\n    return sum(map(lambda x:x, filter(lambda x:x<0, lst)))\n\n\nif __name__ == '__main__':\n    print(\"Enter a list of numbers: \")\n    lst = [int(x) for x in input().split()]\n    print(\"Sum of negative numbers is:\", sum_neg(lst))"
    },
    {
      "rank": 54,
      "score": 8.0,
      "candidate": "from functools import reduce\n\n\ndef sum_of_negative_numbers(arr):\n    return reduce(lambda x, y: x + y, filter(lambda x: x < 0, arr))\n\n\nprint(sum_of_negative_numbers([-5, -10, -15, -20]))"
    },
    {
      "rank": 55,
      "score": 8.0,
      "candidate": "def sum_negative_numbers(lst):\n    return sum(filter(lambda x: x < 0, lst))\n\nprint(sum_negative_numbers([1,2,3,4,-1,5,-8,9,-5]))"
    },
    {
      "rank": 56,
      "score": 8.0,
      "candidate": "#Define the function\ndef sum_negatives(nums):\n    return sum(filter(lambda x: x < 0, nums))\n\n#Define the main function\ndef main():\n    #Ask the user for numbers\n    nums = input(\"Enter the numbers you want to add: \")\n    #Split the numbers to a list\n    nums = nums.split()\n    #Convert the list elements to integer\n    nums = list(map(int, nums))\n\n    #Print the result\n    print(sum_negatives(nums))\n\n#Call the main function\nmain()"
    },
    {
      "rank": 57,
      "score": 8.0,
      "candidate": "def sum_negative(lst):\n    return sum(map(lambda x: x if x > 0 else -x, lst))\n\nif __name__ == '__main__':  # tests\n    print(sum_negative([1, 2, 3, 4, 5, -1, -2, -3, -4]))\n    print(sum_negative([-1, -2, -3, -4]))\n    print(sum_negative([1, 2, 3, 4, -1, -2, -3, -4]))\n    print(sum_negative([-1]))"
    },
    {
      "rank": 58,
      "score": 8.0,
      "candidate": "def sum_of_neg(list_of_nums):\n    return sum(list(filter(lambda x: x < 0, list_of_nums)))\n\n\nprint(sum_of_neg([-3, 8, -6, -1, 0, 5, -4]))"
    },
    {
      "rank": 59,
      "score": 8.0,
      "candidate": "def sum_of_negative_numbers(numbers):\n    return lambda numbers: sum([num for num in numbers if num < 0])\n\n\nif __name__ == \"__main__\":\n    print(sum_of_negative_numbers([3, 4, -5, -6, -8, 3, -2, 1, -4, 6, 7, -4]))"
    },
    {
      "rank": 60,
      "score": 8.0,
      "candidate": "def sum_neg(lst):\n    return list(filter(lambda x: x < 0, lst))\n\ndef main():\n    print(sum_neg([1, 2, 3, 4, -5, 6, -7]))\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 61,
      "score": 8.0,
      "candidate": "def sum_of_neg(nums):\n    return sum(map(lambda x: x if x < 0 else 0, nums))\n\n\nprint(sum_of_neg([1, 2, 3, -4, 5, -6]))"
    },
    {
      "rank": 62,
      "score": 8.0,
      "candidate": "from functools import reduce\n\ndef negative_sum(numbers):\n    return reduce(lambda x, y: x + y, [num for num in numbers if num < 0])\n\n\nprint(negative_sum([-1, 2, -3, 4, -5]))\nprint(negative_sum([1, 2, 3, 4, 5]))"
    },
    {
      "rank": 63,
      "score": 8.0,
      "candidate": "from functools import reduce\n\n\ndef sum_of_negative(l):\n    return reduce(lambda x, y: x + y, list(filter(lambda x: x < 0, l)))\n\n\ndef test_sum_of_negative():\n    \"\"\"Test for sum_of_negative function.\"\"\"\n    assert sum_of_negative([3, 4, -5, 1, 6, -7, -8, 9]) == -22\n    assert sum_of_negative([5, 7, -8, 1, 6, -7, -8, 9]) == -22\n    assert sum_of_negative([-5, 7, -8, 1, 6, -7, -8, 9]) == -22\n    assert sum_of_negative([-5, -7, -8, 1, 6, -7, -8, 9]) == -22\n    assert sum_of_negative([-5, -7, -8, -1, 6, -7, -8, 9]) == -22\n    assert sum_of_negative([-5, -7, -8, -1, -6, -7, -8, -9]) == -34\n    assert sum_of_negative([-5, -7, -8, -1, -6, -7, -8, -9, 10]) == -34\n    assert sum_of_negative([-5, -7, -8, -1, -6, -7, -8, -9, 10, -11]) == -34\n    assert sum_of_negative([-5, -7, -8, -1, -6, -7, -8, -9, 10, -11, 12]) == -34\n    assert sum_of_negative([-5, -7, -8, -1, -6, -7, -8, -9, 10, -11, 12, 13]) == -34\n    assert sum_of_negative([-5, -7, -8, -1, -6, -7, -8, -9"
    },
    {
      "rank": 64,
      "score": 8.0,
      "candidate": "def sum_neg(lst):\n    return sum(list(map(lambda x: x if x > 0 else x*-1, lst)))\n\n\nif __name__ == '__main__':\n    print(\"Enter the numbers: \")\n    lst = [int(num) for num in input().split()]\n    print(f\"Sum of negative numbers is: {sum_neg(lst)}\")"
    },
    {
      "rank": 65,
      "score": 8.0,
      "candidate": "def sum_neg(numbers):\n    return sum(list(filter(lambda x: x < 0, numbers)))\n\nprint(sum_neg([1, 2, 3, 4, -5, 6]))"
    },
    {
      "rank": 66,
      "score": 8.0,
      "candidate": "def sum_neg_lambda(nums):\n    return sum(list(filter(lambda x: x < 0, nums)))\n\nprint(sum_neg_lambda([1,2,3,4,5,-6,-7,-8]))"
    },
    {
      "rank": 67,
      "score": 8.0,
      "candidate": "def negative_sum(numbers):\n    return lambda numbers: sum(filter(lambda x: x < 0, numbers))\n\n\ndef test_negative_sum():\n    assert negative_sum([1, 2, 3, 4, 5, 6, -1, -2, -3, -4]) == -10"
    },
    {
      "rank": 68,
      "score": 8.0,
      "candidate": "def sum_negative_numbers(nums):\n    # function to sum the negative numbers\n    return sum(filter(lambda x: x < 0, nums))\n\nif __name__ == '__main__':\n    # Inputs\n    inputs = [\n        [2, 4, 6, -1, -7, 1, -3, 5, -6],\n        [2, 4, 6, 1, 7, 1, 3, 5, 6],\n        [2, 4, 6, -1, 7, 1, 3, 5, 6],\n        [2, 4, 6, -1, -7, 1, 3, 5, 6],\n        [2, 4, 6, -1, -7, 1, -3, 5, -6],\n        [2, 4, 6, -1, -7, 1, -3, 5, -6]\n    ]\n\n    # Unpack inputs\n    *args, = inputs\n\n    # Print results\n    for arg in args:\n        print(f'Input: {arg}, Output: {sum_negative_numbers(arg)}')"
    },
    {
      "rank": 69,
      "score": 8.0,
      "candidate": "def sum_of_neg_numbers(list_of_numbers):\n    return sum(list(filter(lambda x: x < 0, list_of_numbers)))\n\n\nif __name__ == \"__main__\":\n    print(sum_of_neg_numbers([-1, -2, -3, -5]))"
    },
    {
      "rank": 70,
      "score": 8.0,
      "candidate": "def sum_of_negative(lst):\n    return sum(filter(lambda x: x < 0, lst))\n\nprint(sum_of_negative([-3, -4, -5, -6, -7]))"
    },
    {
      "rank": 71,
      "score": 8.0,
      "candidate": "def negative_sum(list):\n    return sum(list(filter(lambda x: x < 0, list)))\n\nif __name__ == '__main__':\n    print(negative_sum([1, 2, -3, -4, 5]))\n\n# If we want to use list comprehension instead of filter, we can use the following code:\n# print(negative_sum([1, 2, -3, -4, 5]))\n# return sum([num for num in list if num < 0])"
    },
    {
      "rank": 72,
      "score": 8.0,
      "candidate": "def sum_neg(nums):\n    return sum(list(filter(lambda x: x < 0, nums)))\n\nprint(sum_neg([-10, 20, 30, -40]))"
    },
    {
      "rank": 73,
      "score": 8.0,
      "candidate": "from functools import reduce\n\n\ndef sum_negative_lambda(lst):\n    return reduce(lambda x, y: x + y, lst) if lst else 0\n\n\ndef main():\n    print(\"The sum of the negative numbers is:\")\n    print(sum_negative_lambda([1, 2, 3, 4, 5, -5, -6, -7]))\n    print(sum_negative_lambda([1, 2, 3, 4, 5]))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 74,
      "score": 8.0,
      "candidate": "from functools import reduce\nfrom numpy import negative\n\n\ndef sum_of_negative_numbers(nums):\n    return reduce(lambda x, y: x + y, map(lambda x: negative(x), nums))\n\n\n# Test\nprint(sum_of_negative_numbers([1, 2, 3, -4, -2, 5, -12, 0]))"
    },
    {
      "rank": 75,
      "score": 8.0,
      "candidate": "from functools import reduce\n\ndef sum_neg(lst):\n    return reduce(lambda x, y: x+y, lst)\n\ndef main():\n    list_num = [-5, -2, -9, 10, -1]\n    print(sum_neg(list_num))\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 76,
      "score": 8.0,
      "candidate": "#Define the function\ndef sum_neg(lst):\n    return list(map(lambda x: x+lst, filter(lambda x: x<0, lst)))\n\n#Input the list\nlst = [1, -4, 5, -11, 20, -2]\n\n#Call the function and store the output in a variable\noutput = sum_neg(lst)\n\n#Print the output\nprint(output)"
    },
    {
      "rank": 77,
      "score": 8.0,
      "candidate": "from functools import reduce\n\n\ndef sum_negative(nums):\n    return reduce(lambda x, y: x + y, list(filter(lambda x: x < 0, nums)))\n\n\nprint(sum_negative([1, 2, 3, -9, -8, 4, -2]))"
    },
    {
      "rank": 78,
      "score": 8.0,
      "candidate": "def sum_neg(lst):\n    return sum(list(filter(lambda x: x < 0, lst)))\n\n\nif __name__ == '__main__':\n    print(\"Enter numbers: \")\n    lst = [int(x) for x in input().split()]\n    print(\"Sum of negative numbers: {}\".format(sum_neg(lst)))"
    },
    {
      "rank": 79,
      "score": 8.0,
      "candidate": "def negative_sum(lst):\n    return (lambda x: sum([x for x in lst if x < 0]))(lst)\n\nprint(negative_sum([1, 2, -5, -4, 6, -7]))"
    },
    {
      "rank": 80,
      "score": 1.0,
      "candidate": "from typing import List\n\n\ndef negative_sum(numbers: List[int]) -> int:\n    \"\"\"Returns the sum of the negative numbers in a list.\n\n    Examples:\n        >>> assert negative_sum([1, 2, 3, 4, 5]) == 0\n        >>> assert negative_sum([5, 7, 8, -1, -19, 5, 15, -6]) == -34\n\n    Args:\n        numbers (List[int]): list of numbers\n\n    Returns:\n        int: sum of the negative numbers in the list\n    \"\"\"\n    return sum(list(filter(lambda x: x < 0, numbers)))\n\n\nif __name__ == \"__main__\":\n    print(negative_sum([1, 2, 3, 4, 5]))"
    },
    {
      "rank": 81,
      "score": 1.0,
      "candidate": "from functools import reduce\n\n\ndef negative_sum(arr: list) -> int:\n    \"\"\"Returns the sum of the negative numbers of a given list of numbers.\n\n    >>> negative_sum([1, 2, 3, 4, 5])\n    0\n    >>> negative_sum([1, -1, 2, -2, 3, -3])\n    -6\n    >>> negative_sum([-1, -2, -3, -4, -5])\n    -15\n    \"\"\"\n    return reduce(lambda acc, num: acc + num if num < 0 else acc, arr, 0)\n\n\ndef main():\n    from doctest import testmod\n\n    testmod()\n\n    list_of_numbers = [1, -1, 2, -2, 3, -3]\n    print(f'Sum of the negative numbers of a given list of numbers {list_of_numbers} is {negative_sum(list_of_numbers)}')\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 82,
      "score": 1.0,
      "candidate": "def sum_of_negatives(arr):\n    return lambda arr: sum(filter(lambda x: x < 0, arr))\n\n\nprint(sum_of_negatives([5, -7, -8, 1, 10])([5, -7, -8, 1, 10]))"
    },
    {
      "rank": 83,
      "score": 1.0,
      "candidate": "# Solution\ndef negative_sum(arr):\n    return lambda arr: sum(filter(lambda x: x < 0, arr))\n\n\n# Test\nprint(negative_sum([1, 2, -5, 3, -4, 10, 8, 12, -12, -5])([1, 2, -5, 3, -4, 10, 8, 12, -12, -5]))"
    },
    {
      "rank": 84,
      "score": 1.0,
      "candidate": "from functools import reduce\n\ndef sum_negatives(numbers):\n    return reduce(lambda x, y: x+y, filter(lambda x: x<0, numbers))\n\ndef test(candidate, expected):\n    assert candidate([1,2,-3,4,-5]) == expected\n\nif __name__ == '__main__':\n    test(sum_negatives, -13)\n    print(\"Simple tests passed.\")\n\n    test(sum_negatives, 12)\n    print(\"Difficult test passed.\")\n\n    test(sum_negatives, 13)\n    print(\"Extra difficult test passed.\")"
    },
    {
      "rank": 85,
      "score": 1.0,
      "candidate": "def sum_neg_lambda(l):\n    return sum(map(lambda x: x if x > 0 else x*-1, l))\n\ndef main():\n    print(\"[4, 1, 8, 2, 9, -3] ==\", sum_neg_lambda([4, 1, 8, 2, 9, -3]))\n    print(\"[4, 1, 8, 2, 9, -3, -7] ==\", sum_neg_lambda([4, 1, 8, 2, 9, -3, -7]))\n    print(\"[4, 1, 8, 2, 9, -3, -7, -11] ==\", sum_neg_lambda([4, 1, 8, 2, 9, -3, -7, -11]))\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 86,
      "score": 1.0,
      "candidate": "def sum_of_negative(arr):\n    return list(filter(lambda x: x < 0, arr))\n\n\ndef test_sum_of_negative():\n    assert sum_of_negative([-5, -2, -1, 3, 4]) == [-5, -2, -1]\n\n\nif __name__ == \"__main__\":\n    test_sum_of_negative()"
    },
    {
      "rank": 87,
      "score": 1.0,
      "candidate": "# Solution\ndef sum_negative_lambda(nums):\n    return sum(list(filter(lambda x: x < 0, nums)))\n\n\n# Test\nprint(sum_negative_lambda([1, 2, 3, 4, 5]))\nprint(sum_negative_lambda([-1, -2, -3, -4, -5]))\nprint(sum_negative_lambda([-1, 2, -3, 4, -5]))"
    },
    {
      "rank": 88,
      "score": 1.0,
      "candidate": "#!/usr/bin/env python\n# Calculate the sum of the negative numbers of a given list of numbers using lambda function.\n\n# Using filter()\ndef sum_negative(nums):\n    return sum(filter(lambda x: x < 0, nums))\n\n\nprint(sum_negative([1, 2, 3, -1, -2, -3]))\n\n# Using map()\ndef sum_negative(nums):\n    return sum(map(lambda x: x if x < 0 else 0, nums))\n\n\nprint(sum_negative([1, 2, 3, -1, -2, -3]))\n\n# Using list comprehension\ndef sum_negative(nums):\n    return sum([x if x < 0 else 0 for x in nums])\n\n\nprint(sum_negative([1, 2, 3, -1, -2, -3]))"
    },
    {
      "rank": 89,
      "score": 1.0,
      "candidate": "# Solution\ndef sum_neg(nums):\n    return list(filter(lambda x: x < 0, nums))\n\n\n# Tests\ndef test_function(test_case):\n    nums = test_case[0]\n    solution = test_case[1]\n    output = sum_neg(nums)\n    \n    if sum(output) == solution:\n        print(\"Pass\")\n    else:\n        print(\"Fail\")\n\n\n# Run test cases\ntest_function([[1, 2, 3, -1, -5, 4], -6])\ntest_function([[-1, -2, -3, -4, -5, -6], -21])\ntest_function([[-1, 2, 3, -4, 5, -6], -6])\ntest_function([[1, 2, 3, 4, 5, 6], 0])\ntest_function([[1, 2, 3, 4, 5, 6], 0])"
    },
    {
      "rank": 90,
      "score": 1.0,
      "candidate": "from functools import reduce\n\n\ndef sum_of_negatives(lst):\n    return reduce(lambda x, y: x + y, list(filter(lambda x: x < 0, lst)))\n\n\ndef test_sum_of_negatives():\n    \"\"\"Test for sum_of_negatives function.\"\"\"\n    print(sum_of_negatives([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\n    print(sum_of_negatives([1, 2, 3, 4, 5, 6, 7, 8, 9, -10]))\n    print(sum_of_negatives([1, 2, 3, 4, 5, 6, 7, 8, -9, -10]))\n    print(sum_of_negatives([1, 2, 3, 4, 5, 6, 7, -8, -9, -10]))\n    print(sum_of_negatives([1, 2, 3, -4, 5, 6, -7, -8, -9, -10]))\n    print(sum_of_negatives([1, -2, 3, -4, -5, -6, -7, -8, -9, -10]))\n    print(sum_of_negatives([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10]))\n\n\nif __name__ == \"__main__\":\n    test_sum_of_negatives()"
    },
    {
      "rank": 91,
      "score": 1.0,
      "candidate": "def sum_of_negatives(numbers):\n    return sum(filter(lambda x: x < 0, numbers))\n\n\ndef test_lambda_sum_of_negatives():\n    # Positive numbers\n    assert sum_of_negatives([1, 2, 3, 4, 5]) == 0\n    # Negative numbers\n    assert sum_of_negatives([-1, -2, -3, -4, -5]) == -15\n    # Mixed numbers\n    assert sum_of_negatives([-1, 2, -3, 4, -5]) == -11\n    # All negative numbers\n    assert sum_of_negatives([-1, -2, -3, -4, -5]) == -15\n\n\nif __name__ == '__main__':\n    test_lambda_sum_of_negatives()"
    },
    {
      "rank": 92,
      "score": 1.0,
      "candidate": "from functools import reduce\n\n\ndef sum_negative(numbers: list) -> int:\n    \"\"\"Sums the negative numbers in a list using reduce function.\n\n    Args:\n        numbers (list): list of numbers\n\n    Examples:\n        >>> assert sum_negative([1, 2, -1, -5, 6]) == -6\n    \"\"\"\n    return reduce(lambda x, y: x + y, [number for number in numbers if number < 0])\n\n\nif __name__ == \"__main__\":\n    print(sum_negative([1, 2, -1, -5, 6]))"
    },
    {
      "rank": 93,
      "score": 1.0,
      "candidate": "def sum_of_negatives(arr):\n    return sum(list(filter(lambda x: x < 0, arr)))\n\n\ndef test_sum_of_negatives():\n\n    assert sum_of_negatives([2, 3, 7, 9, -10, -11, 1]) == -21\n    assert sum_of_negatives([2, 3, 7, 9, 10, 11, 1]) == 0\n    assert sum_of_negatives([-20, -30, -70, -90, 100, 110, 1]) == -330\n    assert sum_of_negatives([-20, -30, -70, -90, -100, -110, -1]) == -440\n    assert sum_of_negatives([5, 5, 5, 5, 5, 5, 5]) == -15\n\n\nif __name__ == '__main__':\n    test_sum_of_negatives()"
    },
    {
      "rank": 94,
      "score": 1.0,
      "candidate": "def sum_of_neg_numbers(nums):\n    return sum(filter(lambda x: x < 0, nums))\n\nif __name__ == '__main__':\n    print(\"Example:\")\n    print(sum_of_neg_numbers([1, 2, -1, -5, 3]))\n\n    # These \"asserts\" using pytest\n    # assert sum_of_neg_numbers([1, 2, -1, -5, 3]) == -7, \"Negative sum\"\n    # assert sum_of_neg_numbers([1, 2, 3, 4, -1]) == -1, \"Negative sum\"\n    # assert sum_of_neg_numbers([-1, -2, -3, -4, -5]) == -15, \"Negative sum\"\n    # assert sum_of_neg_numbers([]) == 0, \"Empty sum\"\n    # assert sum_of_neg_numbers([1, 1, 1, 1]) == 0, \"Only positive numbers\"\n    # assert sum_of_neg_numbers([-1, -1, -1, -1]) == -4, \"Only negative numbers\""
    },
    {
      "rank": 95,
      "score": 1.0,
      "candidate": "# Solution\n\n\ndef negative_sum(nums):\n    return lambda nums: sum([num for num in nums if num < 0])\n\n\n# Tests\nprint(negative_sum([-5, -2, -1, 0, 5, 6, 7, 8])([1, 2, 3, 4, 5, 6, 7, 8]))"
    },
    {
      "rank": 96,
      "score": 1.0,
      "candidate": "from typing import List\n\n\ndef sum_neg(nums: List[int]) -> int:\n    \"\"\"Returns the sum of the negative numbers of a given list of numbers.\n\n    Args:\n        nums (List[int]): The list of numbers.\n\n    Examples:\n        >>> assert sum_neg([-1, -2, -3, -4]) == -10\n        >>> assert sum_neg([-2, -3, -4]) == -9\n    \"\"\"\n    return sum(filter(lambda x: x < 0, nums))\n\n\nif __name__ == \"__main__\":\n    print(sum_neg([-1, -2, -3, -4]))"
    },
    {
      "rank": 97,
      "score": 1.0,
      "candidate": "def sum_of_neg_lambda(nums):\n    return sum(list(filter(lambda x: x < 0, nums)))\n\nprint(sum_of_neg_lambda([1,2,3,4,-1,-2,-3,-4]))\nprint(sum_of_neg_lambda([-1,2,3,4,-1,-2,-3,-4]))\nprint(sum_of_neg_lambda([-1,2,3,4]))\nprint(sum_of_neg_lambda([]))\n\n# Alternative Solution\ndef sum_of_neg_lambda(nums):\n    return sum(list(filter(lambda x: x < 0, nums)))\n\nprint(sum_of_neg_lambda([1,2,3,4,-1,-2,-3,-4]))\nprint(sum_of_neg_lambda([-1,2,3,4,-1,-2,-3,-4]))\nprint(sum_of_neg_lambda([-1,2,3,4]))\nprint(sum_of_neg_lambda([]))"
    },
    {
      "rank": 98,
      "score": 1.0,
      "candidate": "from functools import reduce\n\n\ndef sum_negative_numbers(lst):\n    return reduce(lambda x, y: x + y, [x for x in lst if x < 0])\n\n\ndef test_sum_negative_numbers():\n    \"\"\"Test for sum_negative_numbers function.\"\"\"\n    assert sum_negative_numbers([1, 2, 3, -5, -8]) == -13\n    assert sum_negative_numbers([5, 7, -8, -2, -1, 10, 2, 1]) == -5\n    assert sum_negative_numbers([1, 2, 3]) == 0\n    assert sum_negative_numbers([-1, -2, -3]) == -6\n\n\nif __name__ == \"__main__\":\n    print(sum_negative_numbers([1, 2, 3, -5, -8]))"
    },
    {
      "rank": 99,
      "score": 1.0,
      "candidate": "# Nested function\ndef find_negative(nums):\n    return lambda nums: sum([i for i in nums if i < 0])\n\n\n# Using lambda\nfind_negative = lambda nums: sum([i for i in nums if i < 0])\n\n\n# Using map\nfind_negative = lambda nums: sum(map(lambda x: x if x < 0 else 0, nums))\n\n\n# Using list comprehension\nfind_negative = lambda nums: sum([i for i in nums if i < 0])\n\n\n# Using filter\nfind_negative = lambda nums: sum(filter(lambda x: x < 0, nums))"
    },
    {
      "rank": 100,
      "score": 1.0,
      "candidate": "from functools import reduce\n\ndef negative_sum(nums):\n    return reduce(lambda x,y: x+y, [x for x in nums if x < 0])\n\n# negative_sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, -11, -12, -13])\n\n\n\"\"\"\nWrite a function to calculate the sum of the numbers of a given list of numbers using lambda function.\n\"\"\"\n\ndef sum_of_nums(nums):\n    return reduce(lambda x,y: x+y, [x for x in nums])\n\n# sum_of_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n\n\n\"\"\"\nWrite a function to calculate the sum of the numbers of a given list of numbers using lambda function.\n\"\"\"\n\ndef sum_of_nums(nums):\n    return reduce(lambda x,y: x+y, nums)\n\n# sum_of_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n\n\n\"\"\"\nWrite a function to calculate the sum of the numbers of a given list of numbers using lambda function.\n\"\"\"\n\ndef sum_of_nums(nums):\n    return reduce(lambda x,y: x+y, nums)\n\n# sum_of_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n\n\n\"\"\"\nWrite a function to calculate the sum of the numbers of a given list of numbers using lambda function.\n\"\"\"\n\ndef sum_of_nums(nums):\n    return reduce(lambda x,y: x+y, nums)\n\n# sum_of_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n\n\n\"\"\"\nWrite a function to calculate the sum of the numbers of a"
    }
  ]
}