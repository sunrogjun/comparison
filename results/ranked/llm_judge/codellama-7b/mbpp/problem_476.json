{
  "timestamp": "2025-09-15T01:54:53.126437",
  "method": "improved_llm_judge",
  "judge_model": "codellama/CodeLlama-7b-Python-hf",
  "target_model": "codellama-7b",
  "dataset": "mbpp",
  "problem_number": 476,
  "total_candidates": 100,
  "results": [
    {
      "rank": 1,
      "score": 10.0,
      "candidate": "def sort_tuples(tuples):\n    \"\"\"Sort a list of tuples in increasing order by the last element in each tuple.\n\n    Args:\n        tuples (list): list of tuples\n\n    Returns:\n        list: sorted list of tuples\n    \"\"\"\n    return sorted(tuples, key=lambda x: x[-1])"
    },
    {
      "rank": 2,
      "score": 10.0,
      "candidate": "def tuples_sort(tuples):\n    return sorted(tuples, key=lambda x: x[-1])\n\n\nif __name__ == '__main__':\n    print(tuples_sort([(1, 4, 3), (4, 3, 2), (3, 2, 1), (2, 1, 0)]))"
    },
    {
      "rank": 3,
      "score": 10.0,
      "candidate": "from random import randint\n\n\ndef sort_tuples(t):\n    return sorted(t, key=lambda x: x[-1])\n\n\nif __name__ == '__main__':\n    tuples = [(randint(0, 100), randint(0, 100), randint(0, 100)) for _ in range(10)]\n    print(tuples)\n    print(sort_tuples(tuples))"
    },
    {
      "rank": 4,
      "score": 10.0,
      "candidate": "def sort_tuples(tuples):\n    \"\"\"\n    >>> sort_tuples([(1, 2), (2, 1), (1, 3), (3, 1), (2, 3)])\n    [(3, 1), (1, 3), (2, 3), (1, 2), (2, 1)]\n    \"\"\"\n    return sorted(tuples, key=lambda x: x[1])\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 5,
      "score": 10.0,
      "candidate": "\"\"\"Question:\nWrite a function to sort a list of tuples in increasing order by the last element in each tuple.\nExample:\nIf the list is:\n[ (2, 5), (1, 2), (4, 4), (2, 3), (2, 1) ]\nThen the sorted list should be:\n[ (2, 1), (2, 3), (4, 4), (1, 2), (2, 5) ]\nHints:\nUse the operator '>' to get the greater value.\n\n\"\"\"\ndef csSortByLastElement(tuples):\n    return sorted(tuples, key=lambda x: x[1])\n\n\nprint csSortByLastElement([(2, 5), (1, 2), (4, 4), (2, 3), (2, 1)])"
    },
    {
      "rank": 6,
      "score": 10.0,
      "candidate": "from typing import List\n\n\ndef sort_by_last_element(tuples: List[tuple]) -> List[tuple]:\n    \"\"\"Sorts a list of tuples by the last element in each tuple.\n\n    Args:\n        tuples (List[tuple]): list of tuples\n\n    Examples:\n        >>> assert sort_by_last_element([(1, 2), (2, 3), (3, 1)]) == [(3, 1), (2, 3), (1, 2)]\n    \"\"\"\n    return sorted(tuples, key=lambda x: x[-1])\n\n\nif __name__ == \"__main__\":\n    print(sort_by_last_element([(1, 2), (2, 3), (3, 1)]))"
    },
    {
      "rank": 7,
      "score": 10.0,
      "candidate": "from typing import List\n\n\n# Time complexity: O(n log n)\n# Space complexity: O(1)\ndef sort_tuples(tuples: List[tuple]) -> List[tuple]:\n    return sorted(tuples, key=lambda t: t[-1])\n\n\n# Time complexity: O(n log n)\n# Space complexity: O(n)\ndef sort_tuples_2(tuples: List[tuple]) -> List[tuple]:\n    return sorted(tuples, key=lambda t: t[-1], reverse=True)"
    },
    {
      "rank": 8,
      "score": 10.0,
      "candidate": "from random import randint\n\n\ndef sort_by_last_element(tuples):\n    for i in range(len(tuples)):\n        for j in range(i + 1, len(tuples)):\n            if tuples[i][-1] > tuples[j][-1]:\n                tuples[i], tuples[j] = tuples[j], tuples[i]\n    return tuples\n\n\ndef test_sort_by_last_element():\n    \"\"\"\n    >>> test_sort_by_last_element()\n    \"\"\"\n    tuples = [(randint(0, 100), randint(0, 100)) for _ in range(10)]\n    assert sort_by_last_element(tuples) == sorted(tuples, key=lambda x: x[-1])\n\n\nif __name__ == '__main__':\n    from doctest import testmod\n    testmod()"
    },
    {
      "rank": 9,
      "score": 10.0,
      "candidate": "from random import randint\n\n\ndef sort_tuples(data):\n    \"\"\"Sort a list of tuples in increasing order by the last element in each tuple.\n\n    Args:\n        data (list): list of tuples to sort\n\n    Returns:\n        list: sorted list of tuples\n    \"\"\"\n    return sorted(data, key=lambda x: x[-1])\n\n\nif __name__ == \"__main__\":\n    data = [(randint(0, 100), randint(0, 100)) for _ in range(10)]\n    print(f\"unsorted: {data}\")\n    print(f\"sorted: {sort_tuples(data)}\")"
    },
    {
      "rank": 10,
      "score": 10.0,
      "candidate": "\"\"\"Question:\nWrite a function to sort a list of tuples in increasing order by the last element in each tuple.\nExample:\nInput: [(2, 5), (1, 2), (4, 4)]\nOutput: [(1, 2), (2, 5), (4, 4)]\nHints:\nUse the operator < to compare two tuples.\n\n\"\"\"\ndef csSortByLastElement(tuples):\n    return sorted(tuples, key=lambda x: x[1])\n\n#print csSortByLastElement([(2, 5), (1, 2), (4, 4)])\n\"\"\"\ndef csSortByLastElement(tuples):\n    return sorted(tuples, key=lambda x: x[1])\n\n\ndef csSortByLastElement(tuples):\n    return sorted(tuples, lambda x, y: cmp(x[1], y[1]))\n\"\"\""
    },
    {
      "rank": 11,
      "score": 10.0,
      "candidate": "from typing import List\n\n\ndef last_element_sort(tuples: List[tuple]) -> List[tuple]:\n    \"\"\"Sorts the list of tuples in increasing order by the last element in each tuple.\n\n    Args:\n        tuples (List[tuple]): list of tuples to sort\n\n    Examples:\n        >>> last_element_sort([(1, 2), (1, 3), (3, 1), (2, 1)])\n        [(2, 1), (1, 3), (3, 1), (1, 2)]\n    \"\"\"\n    return sorted(tuples, key=lambda x: x[-1])\n\n\nif __name__ == \"__main__\":\n    print(last_element_sort([(1, 2), (1, 3), (3, 1), (2, 1)]))"
    },
    {
      "rank": 12,
      "score": 10.0,
      "candidate": "from random import randint\n\n\ndef sort_tuples_in_increasing_order(tuples):\n    return sorted(tuples, key=lambda x: x[1])\n\n\ndef main():\n    tuples = [(randint(0, 100), randint(0, 100)) for _ in range(10)]\n    print(tuples)\n    sorted_tuples = sort_tuples_in_increasing_order(tuples)\n    print(sorted_tuples)\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 13,
      "score": 10.0,
      "candidate": "\"\"\"Question:\nWrite a function to sort a list of tuples in increasing order by the last element in each tuple.\nExample:\nInput: [(2, 5), (1, 2), (4, 4)]\nOutput: [(1, 2), (2, 5), (4, 4)]\nHints:\nNote: this is different from missing number (find the missing number in an array)\n\n\"\"\"\ndef csSortByLastElement(array):\n    return sorted(array, key=lambda x: x[1])"
    },
    {
      "rank": 14,
      "score": 10.0,
      "candidate": "from typing import List\n\n\ndef sort_by_last_element(tuples: List[tuple]) -> List[tuple]:\n    \"\"\"Sort tuples by last element in tuple.\n\n    Args:\n        tuples (List[tuple]): list of tuples to be sorted\n\n    Examples:\n        >>> assert sort_by_last_element([(1, 2), (2, 1)]) == [(2, 1), (1, 2)]\n    \"\"\"\n    return sorted(tuples, key=lambda x: x[-1])\n\n\nif __name__ == \"__main__\":\n    print(sort_by_last_element([(1, 2), (2, 1)]))"
    },
    {
      "rank": 15,
      "score": 10.0,
      "candidate": "def sort_by_last(lst):\n    return sorted(lst, key=lambda x: x[-1])\n\n\nif __name__ == \"__main__\":\n    lst = [(1, 2), (3, 4), (5, 1)]\n    print(sort_by_last(lst))"
    },
    {
      "rank": 16,
      "score": 9.0,
      "candidate": "def sort_tuples(list_of_tuples):\n    return sorted(list_of_tuples, key=lambda x: x[-1])\n\n\ndef test_function():\n    assert sort_tuples([(2, 5), (1, 2), (4, 0), (2, 3), (2, 8), (1, 4)]) == [\n        (1, 2),\n        (1, 4),\n        (2, 3),\n        (2, 5),\n        (2, 8),\n        (4, 0),\n    ]\n    assert sort_tuples([(1, 2), (1, 4), (2, 3), (2, 5), (2, 8), (4, 0)]) == [\n        (1, 2),\n        (1, 4),\n        (2, 3),\n        (2, 5),\n        (2, 8),\n        (4, 0),\n    ]\n    assert sort_tuples([(1, 4), (2, 3), (2, 5), (2, 8), (4, 0), (1, 2)]) == [\n        (1, 2),\n        (1, 4),\n        (2, 3),\n        (2, 5),\n        (2, 8),\n        (4, 0),\n    ]\n    assert sort_tuples([(2, 5), (1, 2), (4, 0), (2, 8), (2, 3), (1, 4)]) == [\n        (1, 2),\n        (1, 4),\n        (2, 3),\n        (2, 5),\n        (2, 8),\n        (4, 0),\n    ]\n    assert sort_tuples([(1, 4), (2, 8), (2, 5), (4, 0), (2, 3), (1, 2)]) == [\n        (1, 2),\n        (1, 4),\n        (2, 3),\n        (2,"
    },
    {
      "rank": 17,
      "score": 9.0,
      "candidate": "from random import randint\n\n\ndef bubble_sort(list_of_tuples):\n    \"\"\"Bubble sort\"\"\"\n    for i in range(len(list_of_tuples) - 1):\n        for j in range(len(list_of_tuples) - i - 1):\n            if list_of_tuples[j][-1] > list_of_tuples[j + 1][-1]:\n                list_of_tuples[j], list_of_tuples[j + 1] = list_of_tuples[j + 1], list_of_tuples[j]\n    return list_of_tuples\n\n\ndef selection_sort(list_of_tuples):\n    \"\"\"Selection sort\"\"\"\n    for i in range(len(list_of_tuples) - 1):\n        for j in range(len(list_of_tuples) - i - 1):\n            if list_of_tuples[j][-1] > list_of_tuples[j + 1][-1]:\n                list_of_tuples[j], list_of_tuples[j + 1] = list_of_tuples[j + 1], list_of_tuples[j]\n    return list_of_tuples\n\n\ndef insertion_sort(list_of_tuples):\n    \"\"\"Insertion sort\"\"\"\n    for i in range(len(list_of_tuples) - 1):\n        for j in range(i + 1, 0, -1):\n            if list_of_tuples[j - 1][-1] > list_of_tuples[j][-1]:\n                list_of_tuples[j], list_of_tuples[j - 1] = list_of_tuples[j - 1], list_of_tuples[j]\n    return list_of_tuples\n\n\ndef merge_sort(list_of_tuples):\n    \"\"\"Merge sort\"\"\"\n    if len(list_of_tuples) > 1:\n        middle = len(list_of_tuples) // 2\n        left = list"
    },
    {
      "rank": 18,
      "score": 8.0,
      "candidate": "from random import randint\n\n\ndef get_random_list_of_tuples(length, min_value, max_value):\n    \"\"\"Returns a list of tuples\"\"\"\n\n    lst = []\n    for _ in range(length):\n        lst.append((randint(min_value, max_value), randint(min_value, max_value)))\n    return lst\n\n\ndef sort_tuples_by_last_element(lst):\n    return sorted(lst, key=lambda x: x[1])\n\n\nif __name__ == \"__main__\":\n    lst = get_random_list_of_tuples(10, 0, 10)\n    print(f\"Random list of tuples: {lst}\")\n    sorted_lst = sort_tuples_by_last_element(lst)\n    print(f\"Sorted list of tuples: {sorted_lst}\")"
    },
    {
      "rank": 19,
      "score": 8.0,
      "candidate": "def sort_by_last_element(list_of_tuples):\n    \"\"\"\n    >>> sort_by_last_element([(1, 2), (2, 1), (3, 3), (4, 4), (5, 5), (6, 6)])\n    [(6, 6), (5, 5), (4, 4), (3, 3), (2, 1), (1, 2)]\n    >>> sort_by_last_element([(3, 2), (1, 5), (2, 1), (4, 3)])\n    [(4, 3), (3, 2), (2, 1), (1, 5)]\n    >>> sort_by_last_element([(1, 1), (1, 1), (1, 1), (1, 1)])\n    [(1, 1), (1, 1), (1, 1), (1, 1)]\n    \"\"\"\n    return sorted(list_of_tuples, key=lambda tup: tup[1])\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 20,
      "score": 8.0,
      "candidate": "def tuples_in_increasing_order(tuples):\n    return sorted(tuples, key=lambda x: x[-1])\n\n\nprint(tuples_in_increasing_order([(2, 5), (1, 2), (4, 3), (2, 3)]))"
    },
    {
      "rank": 21,
      "score": 8.0,
      "candidate": "def sort_by_last_element(tuples):\n    return sorted(tuples, key=lambda tup: tup[-1])\n\n\nif __name__ == '__main__':\n    print(sort_by_last_element([(1, 2, 3), (3, 2, 1), (2, 1, 3)]))"
    },
    {
      "rank": 22,
      "score": 8.0,
      "candidate": "def sort_by_last_element(lst_of_tuples):\n    return sorted(lst_of_tuples, key=lambda x: x[1])\n\nprint(sort_by_last_element([(1, 2), (3, 4), (5, 1)]))"
    },
    {
      "rank": 23,
      "score": 8.0,
      "candidate": "def sort_by_last(lst):\n    \"\"\"\n    >>> lst = [(2, 2), (1, 1), (3, 3), (2, 1), (1, 2), (3, 1), (3, 2)]\n    >>> sort_by_last(lst)\n    [(1, 1), (1, 2), (2, 1), (2, 2), (3, 1), (3, 2), (3, 3)]\n\n    >>> lst = [(1, 1), (1, 2), (2, 1), (2, 2), (3, 1), (3, 2), (3, 3)]\n    >>> sort_by_last(lst)\n    [(1, 1), (1, 2), (2, 1), (2, 2), (3, 1), (3, 2), (3, 3)]\n\n    >>> lst = [(1, 1), (1, 2), (2, 2), (2, 1), (3, 1), (3, 2), (3, 3)]\n    >>> sort_by_last(lst)\n    [(1, 1), (1, 2), (2, 1), (2, 2), (3, 1), (3, 2), (3, 3)]\n\n    >>> lst = [(1, 1), (1, 2), (2, 2), (2, 1), (3, 2), (3, 1), (3, 3)]\n    >>> sort_by_last(lst)\n    [(1, 1), (1, 2), (2, 1), (2, 2), (3, 1), (3, 2), (3, 3)]\n\n    >>> lst = [(1, 1), (1, 2), (2, 2), (2, 1), (3, 3), (3, 1), (3, 2)]\n    >>> sort_by_last(lst)\n    [(1, 1), (1, 2), (2, 1), (2, 2), (3"
    },
    {
      "rank": 24,
      "score": 8.0,
      "candidate": "# time complexity: O(nlogn), space complexity: O(1)\ndef sort_tuples(tuples):\n    \"\"\"\n    :param tuples: List[Tuple[int, int]]\n    :return: List[Tuple[int, int]]\n    \"\"\"\n    tuples.sort(key=lambda x: x[1])\n    return tuples"
    },
    {
      "rank": 25,
      "score": 8.0,
      "candidate": "from random import randint\n\n\ndef bubble_sort(lst):\n    for i in range(len(lst) - 1):\n        for j in range(len(lst) - 1 - i):\n            if lst[j][-1] > lst[j + 1][-1]:\n                lst[j], lst[j + 1] = lst[j + 1], lst[j]\n    return lst\n\n\ndef selection_sort(lst):\n    for i in range(len(lst) - 1):\n        min_index = i\n        for j in range(i + 1, len(lst)):\n            if lst[j][-1] < lst[min_index][-1]:\n                min_index = j\n        lst[i], lst[min_index] = lst[min_index], lst[i]\n    return lst\n\n\ndef insertion_sort(lst):\n    for i in range(1, len(lst)):\n        key = lst[i]\n        j = i - 1\n        while j >= 0 and key[-1] < lst[j][-1]:\n            lst[j + 1] = lst[j]\n            j -= 1\n        lst[j + 1] = key\n    return lst\n\n\ndef merge_sort(lst):\n    if len(lst) > 1:\n        mid = len(lst) // 2\n        left_half, right_half = lst[:mid], lst[mid:]\n        merge_sort(left_half)\n        merge_sort(right_half)\n        i, j, k = 0, 0, 0\n        while i < len(left_half) and j < len(right_half):\n            if left_half[i][-1] <= right_half[j][-1]:\n                lst[k] = left_half[i]\n                i += 1\n            else:\n                lst[k] = right_half[j]\n                j += 1\n            k += 1\n        while i < len(left_half):\n            lst[k] = left_half[i]\n            i += 1\n            k += 1\n        while j"
    },
    {
      "rank": 26,
      "score": 8.0,
      "candidate": "from random import randint\n\n\ndef sort_by_last_element(tuples: list):\n    for i in range(len(tuples) - 1):\n        for j in range(i + 1, len(tuples)):\n            if tuples[j][-1] < tuples[i][-1]:\n                tuples[i], tuples[j] = tuples[j], tuples[i]\n    return tuples\n\n\nif __name__ == \"__main__\":\n    tuples = [(randint(0, 10), randint(0, 10)) for i in range(10)]\n    print(tuples)\n    print(sort_by_last_element(tuples))"
    },
    {
      "rank": 27,
      "score": 8.0,
      "candidate": "def sort_tuples(tuples):\n    return sorted(tuples, key=lambda x: x[-1])\n\ndef test_function(test_case):\n    test_case = test_case[:]\n    solution = sort_tuples(test_case)\n    print(solution)\n    if solution == sorted(test_case, key=lambda x: x[-1]):\n        print(\"Pass\")\n    else:\n        print(\"Fail\")\n\ntest_function([(1, 7), (1, 3), (3, 4, 5), (2, 2)])\ntest_function([(\"bread\", 10), (\"wine\", 9), (\"meat\", 15), (\"water\", 11)])\ntest_function([(1, 3), (1, 5), (1, 7)])\ntest_function([(1, 1), (1, 1)])\ntest_function([(1, 2), (2, 1)])\ntest_function([(\"a\", \"z\", 3), (\"b\", \"y\", 4), (\"c\", \"x\", 5)])\ntest_function([(1, 2, \"a\"), (1, 2, \"b\"), (1, 2, \"c\")])"
    },
    {
      "rank": 28,
      "score": 8.0,
      "candidate": "def sort_by_last_element(list_of_tuples):\n    return sorted(list_of_tuples, key=lambda tup: tup[1])\n\n\nprint(sort_by_last_element([(1, 3), (2, 1), (3, 2), (4, 4), (5, 5), (6, 6)]))"
    },
    {
      "rank": 29,
      "score": 8.0,
      "candidate": "from random import randint\n\n\ndef sort_list_by_last_element(lst):\n    for i in range(len(lst)):\n        for j in range(len(lst) - 1 - i):\n            if lst[j][-1] > lst[j + 1][-1]:\n                lst[j], lst[j + 1] = lst[j + 1], lst[j]\n\n    return lst\n\n\nif __name__ == \"__main__\":\n    tpls = [(randint(0, 10), randint(0, 10)) for _ in range(10)]\n    print(tpls)\n    print(sort_list_by_last_element(tpls))"
    },
    {
      "rank": 30,
      "score": 8.0,
      "candidate": "def sort_tuples(lst):\n    return sorted(lst, key=lambda x: x[-1])\n\n\nprint(sort_tuples([(1, 2, 3), (1, 2, 4), (1, 2, 0)]))"
    },
    {
      "rank": 31,
      "score": 8.0,
      "candidate": "def sort_by_last(tuples):\n    return sorted(tuples, key=lambda x: x[1], reverse=False)\n\n\nif __name__ == '__main__':\n    print(sort_by_last([(3, 6), (2, 5), (1, 4), (5, 3), (4, 2), (6, 1)]))"
    },
    {
      "rank": 32,
      "score": 8.0,
      "candidate": "def sort_by_last(tuples):\n    return sorted(tuples, key=lambda x: x[-1])\n\n\ntuples = [(1, 2), (3, 4), (5, 6), (7, 8)]\nsorted_tuples = sort_by_last(tuples)\nprint(sorted_tuples)"
    },
    {
      "rank": 33,
      "score": 8.0,
      "candidate": "def last_element_sort(tuples):\n    # Write your code here.\n    return sorted(tuples, key=lambda x: x[-1])\n\n#test\ntuples = [(1, 3, 2), (3, 1, 4), (2, 2, 1), (1, 4, 3)]\nprint(last_element_sort(tuples))"
    },
    {
      "rank": 34,
      "score": 8.0,
      "candidate": "def sort_tuples_by_last_element(tuples):\n    \"\"\"\n    >>> tuples = [(1, 2, 3), (2, 3, 4), (3, 4, 1)]\n    >>> sort_tuples_by_last_element(tuples)\n    [(3, 4, 1), (1, 2, 3), (2, 3, 4)]\n    \"\"\"\n    tuples.sort(key=lambda tup: tup[-1])\n    return tuples\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 35,
      "score": 8.0,
      "candidate": "def sort_tuples(tuples):\n    return sorted(tuples, key=lambda x: x[1])\n\n\nif __name__ == \"__main__\":\n    print(sort_tuples([(1, 3), (2, 2), (3, 1)]))"
    },
    {
      "rank": 36,
      "score": 8.0,
      "candidate": "def sort_tuples_by_last_element(tuples):\n    return sorted(tuples, key=lambda x: x[1])\n\n\nprint(sort_tuples_by_last_element([(1, 2), (1, 3), (1, 1)]))"
    },
    {
      "rank": 37,
      "score": 8.0,
      "candidate": "def sort_by_last_element(tuples):\n    return sorted(tuples, key=lambda tup: tup[1])\n\n\nif __name__ == \"__main__\":\n    print(sort_by_last_element([(1, 2), (2, 1), (2, 3)]))"
    },
    {
      "rank": 38,
      "score": 8.0,
      "candidate": "def last_element_sort(tuples):\n    return sorted(tuples, key=lambda x: x[-1])\n\n\nprint(last_element_sort([(1, 2, 3), (2, 3, 4), (3, 4, 5)]))"
    },
    {
      "rank": 39,
      "score": 8.0,
      "candidate": "def sort_tuples(tuples):\n    return sorted(tuples, key=lambda tup: tup[1])\n\n\ntuples = [(1, 3), (2, 4), (3, 2), (4, 1)]\nprint(sort_tuples(tuples))"
    },
    {
      "rank": 40,
      "score": 8.0,
      "candidate": "def sort_by_last(tup):\n    return sorted(tup, key=lambda x: x[-1])\n\nprint(sort_by_last([(1, 3), (3, 2), (2, 1)]))"
    },
    {
      "rank": 41,
      "score": 8.0,
      "candidate": "def sort_by_last_element(tuples):\n    return sorted(tuples, key=lambda x: x[1])\n\n\nif __name__ == \"__main__\":\n    print(sort_by_last_element([(1, 2), (2, 1), (2, 3), (1, 1), (2, 2)]))"
    },
    {
      "rank": 42,
      "score": 8.0,
      "candidate": "\"\"\"Question:\nWrite a function to sort a list of tuples in increasing order by the last element in each tuple.\nHints:\nUse operator.__getitem__ to get an item at an index.\n\n\"\"\"\ndef getLast(e):\n    return e[-1]\ndef sortTuple(L):\n    return sorted(L, key=getLast)\nL = [(2, 6), (1, 2), (3, 4), (2, 7)]\nprint sortTuple(L)"
    },
    {
      "rank": 43,
      "score": 8.0,
      "candidate": "def sort_by_last_element(tuples):\n    return sorted(tuples, key=lambda x: x[1])\n\n\nprint(sort_by_last_element([(1, 2), (3, 4), (5, 6), (7, 8)]))"
    },
    {
      "rank": 44,
      "score": 8.0,
      "candidate": "def sort_tuples(lst):\n    return sorted(lst, key=lambda x: x[1])\n\n\nif __name__ == '__main__':\n    print(sort_tuples([(1, 3), (2, 1), (3, 2), (4, 4)]))"
    },
    {
      "rank": 45,
      "score": 8.0,
      "candidate": "def sort_tuples(tup_list):\n    return sorted(tup_list, key=lambda x: x[1])\n\nprint(sort_tuples([(1, 3), (2, 2), (3, 1)]))"
    },
    {
      "rank": 46,
      "score": 8.0,
      "candidate": "# def sort_by_last(lst_of_tuples):\n#     \"\"\"Sort a list of tuples in increasing order by the last element in each tuple.\"\"\"\n#     return sorted(lst_of_tuples, key=lambda x: x[-1])\n\n\ndef sort_by_last(lst_of_tuples):\n    \"\"\"Sort a list of tuples in increasing order by the last element in each tuple.\"\"\"\n    return sorted(lst_of_tuples, key=lambda x: x[1])\n\n\ndef test_sort_by_last():\n    \"\"\"Test for sort_by_last.\"\"\"\n    assert sort_by_last([(1, 3), (3, 1), (2, 2)]) == [(3, 1), (2, 2), (1, 3)]\n    assert sort_by_last([(1, 3), (3, 1), (2, 2), (2, 1)]) == [(3, 1), (2, 2), (2, 1), (1, 3)]\n\n\nif __name__ == \"__main__\":\n    test_sort_by_last()"
    },
    {
      "rank": 47,
      "score": 8.0,
      "candidate": "def sort_tuples_by_last_element(tuples):\n    return sorted(tuples, key=lambda x: x[-1])\n\nprint(sort_tuples_by_last_element([(1,2,3), (1,3,2), (3,1,2), (2,1,3)]))"
    },
    {
      "rank": 48,
      "score": 8.0,
      "candidate": "from typing import List\n\n\ndef bubble_sort_tuples(tuples: List[tuple]) -> List[tuple]:\n    \"\"\"\n    This is a bubble sort algorithm.\n    :param tuples: list of tuples\n    :return: sorted list of tuples in increasing order by the last element in each tuple\n    >>> bubble_sort_tuples([(1, 2), (3, 4), (5, 6)])\n    [(5, 6), (1, 2), (3, 4)]\n    >>> bubble_sort_tuples([(1, 2), (2, 4), (5, 6)])\n    [(5, 6), (2, 4), (1, 2)]\n    >>> bubble_sort_tuples([(1, 2), (2, 4), (5, 6), (1, 1)])\n    [(5, 6), (2, 4), (1, 2), (1, 1)]\n    \"\"\"\n    for i in range(len(tuples)):\n        for j in range(len(tuples) - 1):\n            if tuples[j][1] > tuples[j + 1][1]:\n                tuples[j], tuples[j + 1] = tuples[j + 1], tuples[j]\n\n    return tuples\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 49,
      "score": 8.0,
      "candidate": "def sort_tuples(tuples):\n    return sorted(tuples, key=lambda x: x[1])\n\n\ndef test_sort_tuples():\n    assert sort_tuples([(1, 2), (2, 1), (3, 3)]) == [(3, 3), (1, 2), (2, 1)]"
    },
    {
      "rank": 50,
      "score": 8.0,
      "candidate": "def sort_tuples(tuples):\n    return sorted(tuples, key=lambda x: x[1])\n\n\nif __name__ == \"__main__\":\n    print(sort_tuples([(2, 2), (1, 1), (3, 3)]))"
    },
    {
      "rank": 51,
      "score": 8.0,
      "candidate": "from functools import cmp_to_key\n\n\ndef sort_by_last_element(tup):\n    tup.sort(key=cmp_to_key(lambda x, y: (x[1] > y[1]) - (x[1] < y[1])))\n    return tup\n\n\ndef test_sort_by_last_element():\n    assert sort_by_last_element([(1, 2), (2, 1), (2, 2)]) == [(2, 1), (1, 2), (2, 2)]\n    assert sort_by_last_element([(1, 1), (1, 3), (1, 2)]) == [(1, 1), (1, 2), (1, 3)]\n    assert sort_by_last_element([(1, 2, 3), (1, 2, 1), (1, 2, 2)]) == [\n        (1, 2, 1),\n        (1, 2, 2),\n        (1, 2, 3),\n    ]\n\n\nif __name__ == \"__main__\":\n    test_sort_by_last_element()"
    },
    {
      "rank": 52,
      "score": 8.0,
      "candidate": "def sort_by_last(list_of_tuples):\n    return sorted(list_of_tuples, key=lambda x: x[-1])\n\nprint(sort_by_last([(1, 2), (2, 1), (1, 1), (2, 2), (2, 3)]))"
    },
    {
      "rank": 53,
      "score": 8.0,
      "candidate": "from typing import List\n\n\n# Time complexity O(n log n)\n# Space complexity O(n)\ndef sort_tuples(tuples: List[tuple]) -> list:\n    return sorted(tuples, key=lambda t: t[-1])\n\n\ndef main():\n    print(sort_tuples([(1, 2), (2, 1), (4, 3), (3, 2)]))\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 54,
      "score": 8.0,
      "candidate": "from typing import List\n\n\n# Time complexity: O(n*log(n)) where n is the length of the list\n# Space complexity: O(1)\ndef sort_tuples_by_last_element(tuples: List[tuple]) -> List[tuple]:\n    return sorted(tuples, key=lambda x: x[-1])\n\n\n# Time complexity: O(n*log(n)) where n is the length of the list\n# Space complexity: O(1)\ndef sort_tuples_by_last_element_builtin(tuples: List[tuple]) -> List[tuple]:\n    return sorted(tuples, key=lambda x: x[-1], reverse=True)\n\n\nif __name__ == \"__main__\":\n    print(sort_tuples_by_last_element([(1, 2), (2, 1), (3, 3), (4, 5), (5, 4)]))\n    print(sort_tuples_by_last_element_builtin([(1, 2), (2, 1), (3, 3), (4, 5), (5, 4)]))"
    },
    {
      "rank": 55,
      "score": 8.0,
      "candidate": "def sort_by_last_element(array_of_tuples):\n    \"\"\"\n    >>> sort_by_last_element([(1, 2), (5, 1), (1, 5), (2, 1)])\n    [(2, 1), (1, 5), (1, 2), (5, 1)]\n    \"\"\"\n    return sorted(array_of_tuples, key=lambda tup: tup[1])\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 56,
      "score": 8.0,
      "candidate": "def sort_tuples(tuples):\n    \"\"\"\n    Time complexity: O(n*log(n)).\n    Space complexity: O(n).\n    \"\"\"\n    # Convert list of tuples to list of lists.\n    tuples = [[elem for elem in t] for t in tuples]\n\n    # Sort the list of lists.\n    tuples.sort(key=lambda t: t[-1])\n\n    # Convert list of lists to list of tuples.\n    tuples = [(elem for elem in t) for t in tuples]\n\n    return tuples\n\n\ndef main():\n    print('Sort tuples:')\n    print(sort_tuples([(1, 3), (3, 1), (2, 2)]))\n    print(sort_tuples([(2, 'a'), (3, 'b'), (1, 'c')]))\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 57,
      "score": 8.0,
      "candidate": "from random import randint\n\n\ndef sort_list(lst: list) -> list:\n    \"\"\"Return sorted list.\n\n    Args:\n        lst (list): list of tuples\n\n    Returns:\n        list: sorted list\n    \"\"\"\n    return sorted(lst, key=lambda x: x[-1])\n\n\nif __name__ == \"__main__\":\n    lst = [(randint(0, 100), randint(0, 100), randint(0, 100)) for _ in range(10)]\n    print(lst)\n    print(sort_list(lst))"
    },
    {
      "rank": 58,
      "score": 8.0,
      "candidate": "def sort_tuples_by_last_element(list_of_tuples):\n    \"\"\"\n    >>> sort_tuples_by_last_element([(3, 4), (2, 3), (1, 2), (4, 1), (3, 3)])\n    [(3, 3), (1, 2), (2, 3), (3, 4), (4, 1)]\n    \"\"\"\n    return sorted(list_of_tuples, key=lambda x: x[1])\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 59,
      "score": 8.0,
      "candidate": "from typing import List\n\n\n# Time complexity: O(n log n)\n# Space complexity: O(1)\ndef sort_tuples(tuples: List[tuple]) -> List[tuple]:\n    return sorted(tuples, key=lambda tup: tup[-1])\n\n\n# Time complexity: O(n)\n# Space complexity: O(1)\ndef sort_tuples2(tuples: List[tuple]) -> List[tuple]:\n    for i in range(len(tuples)):\n        min_idx = i\n\n        for j in range(i + 1, len(tuples)):\n            if tuples[j][-1] < tuples[min_idx][-1]:\n                min_idx = j\n\n        if i != min_idx:\n            tuples[i], tuples[min_idx] = tuples[min_idx], tuples[i]\n\n    return tuples\n\n\n# Time complexity: O(n)\n# Space complexity: O(1)\ndef sort_tuples3(tuples: List[tuple]) -> List[tuple]:\n    for i in range(len(tuples)):\n        min_idx = i\n\n        for j in range(i + 1, len(tuples)):\n            if tuples[j][-1] < tuples[min_idx][-1]:\n                min_idx = j\n\n        if i != min_idx:\n            tuples[i], tuples[min_idx] = tuples[min_idx], tuples[i]\n\n    return tuples\n\n\n# Time complexity: O(n^2)\n# Space complexity: O(1)\ndef sort_tuples4(tuples: List[tuple]) -> List[tuple]:\n    for i in range(len(tuples)):\n        for j in range(i + 1, len(tuples)):\n            if tuples[i][-1] > tuples[j][-1]:\n                tuples[i], tuples[j] = tuples[j], tuples[i]\n\n    return tuples\n\n\n# Time complexity: O(n^2)\n# Space complexity: O(1)\ndef sort_tuples5("
    },
    {
      "rank": 60,
      "score": 8.0,
      "candidate": "def sort_tuples_by_last_element(tuples):\n    \"\"\"\n    >>> sort_tuples_by_last_element([(1, 2, 3), (1, 4, 5), (1, 7, 9), (1, 2, 4)])\n    [(1, 2, 4), (1, 2, 3), (1, 4, 5), (1, 7, 9)]\n    \"\"\"\n    return sorted(tuples, key=lambda x: x[-1])\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 61,
      "score": 8.0,
      "candidate": "def sort_tuples(lst):\n    return sorted(lst, key=lambda x: x[1])\n\n\nif __name__ == \"__main__\":\n    print(sort_tuples([(2, 3), (1, 2), (4, 5), (3, 1)]))"
    },
    {
      "rank": 62,
      "score": 8.0,
      "candidate": "from typing import List\n\n\ndef sort_tuples_by_last_element(tuples: List[tuple]) -> List[tuple]:\n    \"\"\"\n    >>> sort_tuples_by_last_element([(1, 4), (1, 1), (3, 2)])\n    [(1, 1), (1, 4), (3, 2)]\n    \"\"\"\n    return sorted(tuples, key=lambda x: x[1])\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 63,
      "score": 8.0,
      "candidate": "from random import randint\n\n\ndef last_element_sort(tuples):\n    return sorted(tuples, key=lambda x: x[-1])\n\n\nif __name__ == \"__main__\":\n    tup_list = []\n    for i in range(10):\n        tup_list.append((randint(0, 100), randint(0, 100), randint(0, 100)))\n    print(\"Original list:\")\n    print(tup_list)\n    print(\"Sorted list:\")\n    print(last_element_sort(tup_list))"
    },
    {
      "rank": 64,
      "score": 8.0,
      "candidate": "def sort_tuples_by_last_element(list_of_tuples):\n    \"\"\"\n    >>> list_of_tuples = [(1, 2), (3, 1), (2, 2)]\n    >>> sort_tuples_by_last_element(list_of_tuples)\n    [(3, 1), (1, 2), (2, 2)]\n    \"\"\"\n    # return sorted(list_of_tuples, key=lambda x: x[1])\n    return list(sorted(list_of_tuples, key=lambda x: x[1]))\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 65,
      "score": 8.0,
      "candidate": "def sort_by_last_element(lst):\n    return sorted(lst, key=lambda x: x[-1])\n\n\nif __name__ == '__main__':\n    print(sort_by_last_element([(1, 2, 3), (2, 1, 4), (3, 2, 1)]))"
    },
    {
      "rank": 66,
      "score": 8.0,
      "candidate": "def sort_by_last(lst):\n    return sorted(lst, key=lambda x: x[-1])\n\n\nif __name__ == \"__main__\":\n    lst = [(2, 5), (1, 2), (4, 3), (2, 3)]\n    print(sort_by_last(lst))"
    },
    {
      "rank": 67,
      "score": 8.0,
      "candidate": "def sort_tuples_by_last_element(tuples):\n    return sorted(tuples, key=lambda x: x[1])\n\n\nif __name__ == \"__main__\":\n    test_cases = [\n        ([(1, 2), (3, 1), (2, 3)], [(1, 2), (2, 3), (3, 1)]),\n        ([(1, 2), (3, 1), (2, 3), (4, 5)], [(1, 2), (2, 3), (3, 1), (4, 5)]),\n        ([(1, 2), (3, 1), (2, 3), (4, 5), (6, 4)], [(1, 2), (2, 3), (3, 1), (4, 5), (6, 4)]),\n    ]\n\n    for case in test_cases:\n        assert sort_tuples_by_last_element(case[0]) == case[1]"
    },
    {
      "rank": 68,
      "score": 8.0,
      "candidate": "def sort_tuples(t):\n    return sorted(t, key=lambda x: x[-1])\n\n\nif __name__ == '__main__':\n    print(sort_tuples([(1, 2), (1, 3), (1, 1)]))"
    },
    {
      "rank": 69,
      "score": 8.0,
      "candidate": "def last_element_increasing(tuples):\n    return sorted(tuples, key=lambda x: x[-1])\n\n\nif __name__ == \"__main__\":\n    print(last_element_increasing([(1, 4), (3, 2), (2, 1)]))"
    },
    {
      "rank": 70,
      "score": 8.0,
      "candidate": "def sort_by_last_element(list_of_tuples):\n    \"\"\"\n    Time complexity: O(n log n).\n    Space complexity: O(1).\n    \"\"\"\n    return sorted(list_of_tuples, key=lambda x: x[-1])\n\n\ndef main():\n    list_of_tuples = [(1, 2, 3), (1, 3, 2), (1, 4, 1), (1, 2, 2)]\n    print(sort_by_last_element(list_of_tuples))\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 71,
      "score": 8.0,
      "candidate": "def sort_by_last_element(tuples):\n    return sorted(tuples, key=lambda x: x[1])\n\n\nif __name__ == '__main__':\n    print(sort_by_last_element([(2, 5), (1, 2), (4, 3), (3, 1)]))"
    },
    {
      "rank": 72,
      "score": 8.0,
      "candidate": "def sort_tuples_by_last_element(tuples):\n    return sorted(tuples, key=lambda x: x[1])"
    },
    {
      "rank": 73,
      "score": 8.0,
      "candidate": "def sort_tuples(tuples):\n    return sorted(tuples, key=lambda x: x[1])\n\nif __name__ == '__main__':\n    print(sort_tuples([(1, 2), (2, 1), (3, 3)]))"
    },
    {
      "rank": 74,
      "score": 8.0,
      "candidate": "def sort_tuples_by_last_element(tuples):\n    \"\"\"\n    Sorts a list of tuples in increasing order by the last element in each tuple.\n\n    >>> tuples = [(1, 2, 3), (2, 3, 1), (3, 1, 2), (2, 1, 3)]\n    >>> sort_tuples_by_last_element(tuples)\n    [(3, 1, 2), (2, 1, 3), (2, 3, 1), (1, 2, 3)]\n    \"\"\"\n    return sorted(tuples, key=lambda tup: tup[2])\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 75,
      "score": 8.0,
      "candidate": "def sort_tuples(tuples):\n    return sorted(tuples, key=lambda tup: tup[-1])\n\n\nif __name__ == \"__main__\":\n    tuples = [(1, 2), (3, 4), (5, 6), (7, 8), (9, 10)]\n    print(sort_tuples(tuples))"
    },
    {
      "rank": 76,
      "score": 8.0,
      "candidate": "def sort_tuples_in_list(lst):\n    \"\"\"\n    >>> lst = [(4, 5), (2, 3), (1, 2), (3, 1)]\n    >>> sort_tuples_in_list(lst)\n    [(3, 1), (4, 5), (2, 3), (1, 2)]\n    \"\"\"\n    return sorted(lst, key=lambda x: x[1])\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 77,
      "score": 4.0,
      "candidate": "from typing import List\n\n\n# Time complexity: O(n log n) where n is the number of elements in the list\n# Space complexity: O(1)\ndef sort_tuples(tuples: List[tuple]) -> List[tuple]:\n    # The built-in sort function will sort the list in-place\n    tuples.sort(key=lambda tup: tup[1])\n    return tuples\n\n\n# Time complexity: O(n log n) where n is the number of elements in the list\n# Space complexity: O(n)\ndef sort_tuples_2(tuples: List[tuple]) -> List[tuple]:\n    return sorted(tuples, key=lambda tup: tup[1])\n\n\nif __name__ == \"__main__\":\n    print(sort_tuples([(2, 3), (1, 2), (3, 1)]))\n    print(sort_tuples_2([(2, 3), (1, 2), (3, 1)]))"
    },
    {
      "rank": 78,
      "score": 1.0,
      "candidate": "def sort_tuples(lst):\n    return sorted(lst, key=lambda tup: tup[-1])\n\n\ndef test_sort_tuples():\n    lst = [(1, 2), (3, 4), (5, 1), (7, 8)]\n    assert sort_tuples(lst) == [(5, 1), (1, 2), (3, 4), (7, 8)]"
    },
    {
      "rank": 79,
      "score": 1.0,
      "candidate": "from typing import List\n\n\ndef sort_by_last(tuples: List[tuple]) -> List[tuple]:\n    \"\"\"Sorts tuples by last element in tuple.\n\n    Args:\n        tuples (List[tuple]): list of tuples\n\n    Returns:\n        List[tuple]: list of sorted tuples\n    \"\"\"\n    return sorted(tuples, key=lambda x: x[1])\n\n\nif __name__ == \"__main__\":\n    print(sort_by_last([(2, 3), (1, 2), (3, 1)]))"
    },
    {
      "rank": 80,
      "score": 1.0,
      "candidate": "from typing import List, Tuple\n\n\ndef sort_tuples_by_last_element(tuples: List[Tuple[int, int]]) -> List[Tuple[int, int]]:\n    \"\"\"Sorts a list of tuples in increasing order by the last element in each tuple.\n\n    Args:\n        tuples (List[Tuple[int, int]]): the list of tuples to sort\n\n    Returns:\n        List[Tuple[int, int]]: the sorted list of tuples\n    \"\"\"\n    return sorted(tuples, key=lambda x: x[1])\n\n\nif __name__ == \"__main__\":\n    print(sort_tuples_by_last_element([(5, 1), (2, 3), (3, 2), (1, 4)]))"
    },
    {
      "rank": 81,
      "score": 1.0,
      "candidate": "from random import randint\n\n\ndef sort_list_of_tuples(list_of_tuples):\n    return sorted(list_of_tuples, key=lambda x: x[-1])\n\n\ndef main():\n    # Generate some random tuples.\n    list_of_tuples = []\n    for _ in range(100):\n        list_of_tuples.append((randint(0, 1000), randint(0, 1000), randint(0, 1000)))\n\n    sorted_list_of_tuples = sort_list_of_tuples(list_of_tuples)\n\n    print(f\"Unsorted list of tuples: {list_of_tuples}\")\n    print(f\"Sorted list of tuples: {sorted_list_of_tuples}\")\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 82,
      "score": 1.0,
      "candidate": "def sort_by_last_element(lst):\n    return sorted(lst, key=lambda x: x[1])\n\n\ndef test_function(test_case):\n    sorted_array = sort_by_last_element(test_case)\n    print(sorted_array)\n    if sorted_array == sorted(test_case, key=lambda x: x[1]):\n        print(\"Pass\")\n    else:\n        print(\"Fail\")\n\n\n# test 1\ntest_case = [(1, 2), (3, 1), (2, 2), (1, 3)]\ntest_function(test_case)\n\n# test 2\ntest_case = [(10, 10), (5, 5), (1, 1), (7, 6), (10, 9), (1, 2), (9, 9)]\ntest_function(test_case)"
    },
    {
      "rank": 83,
      "score": 1.0,
      "candidate": "from typing import List\n\n\ndef tuples_sort(lst: List[tuple]) -> List[tuple]:\n    \"\"\"Sort a list of tuples in increasing order by the last element in each tuple.\n\n    Args:\n        lst (List[tuple]): list of tuples\n\n    Examples:\n        >>> tuples_sort([(1, 3), (3, 1), (2, 2)])\n        [(3, 1), (2, 2), (1, 3)]\n        >>> tuples_sort([(2, 4), (1, 2), (3, 3)])\n        [(3, 3), (1, 2), (2, 4)]\n    \"\"\"\n    return sorted(lst, key=lambda tup: tup[-1])\n\n\nif __name__ == \"__main__\":\n    print(tuples_sort([(1, 3), (3, 1), (2, 2)]))\n    print(tuples_sort([(2, 4), (1, 2), (3, 3)]))"
    },
    {
      "rank": 84,
      "score": 1.0,
      "candidate": "from typing import List, Tuple\n\n\ndef sort_list_of_tuples(data: List[Tuple]) -> List[Tuple]:\n    \"\"\"Sort list of tuples.\n\n    Args:\n        data (List[Tuple]): list of tuples\n\n    Examples:\n        >>> assert sort_list_of_tuples([(1, 2), (2, 1), (3, 3)]) == [(2, 1), (1, 2), (3, 3)]\n    \"\"\"\n    return sorted(data, key=lambda x: x[-1])\n\n\nif __name__ == \"__main__\":\n    print(sort_list_of_tuples([(1, 2), (2, 1), (3, 3)]))"
    },
    {
      "rank": 85,
      "score": 1.0,
      "candidate": "from typing import List, Tuple\n\n\ndef sort_tuples_by_last_element(tuples: List[Tuple]) -> List[Tuple]:\n    \"\"\"Sort a list of tuples in increasing order by the last element in each tuple.\n\n    Args:\n        tuples (List[Tuple]): list of tuples\n\n    Returns:\n        List[Tuple]: list of tuples in increasing order by the last element in each tuple\n\n    Examples:\n        >>> assert sort_tuples_by_last_element([(2, 'a'), (1, 'b')]) == [(1, 'b'), (2, 'a')]\n        >>> assert sort_tuples_by_last_element([(1, 'a'), (2, 'b'), (3, 'c'), (4, 'd')]) == [(4, 'd'), (3, 'c'), (2, 'b'), (1, 'a')]\n    \"\"\"\n    return sorted(tuples, key=lambda x: x[-1])\n\n\nif __name__ == '__main__':\n    print(sort_tuples_by_last_element([(1, 'a'), (2, 'b'), (3, 'c'), (4, 'd')]))"
    },
    {
      "rank": 86,
      "score": 1.0,
      "candidate": "# Time complexity: O(nlogn)\n# Space complexity: O(1)\ndef sort_by_last_element(lst: list) -> list:\n    return sorted(lst, key=lambda x: x[1])\n\n\nprint(sort_by_last_element([(2, 4), (1, 2), (3, 3), (1, 3), (2, 2)]))"
    },
    {
      "rank": 87,
      "score": 1.0,
      "candidate": "from typing import List\n\n\n# Time complexity: O(nlogn)\n# Space complexity: O(1)\ndef sort_tuples(tuples: List[tuple]) -> List[tuple]:\n    if not tuples:\n        return []\n\n    tuples.sort(key=lambda tup: tup[-1])\n\n    return tuples\n\n\nif __name__ == \"__main__\":\n    print(sort_tuples([(1, 3), (2, 2), (3, 1)]))\n    print(sort_tuples([(1, 3, \"a\"), (2, 2, \"b\"), (3, 1, \"c\")]))\n    print(sort_tuples([(1, 3, \"a\"), (2, 2, \"b\"), (3, 1, \"c\"), (3, 1, \"d\")]))"
    },
    {
      "rank": 88,
      "score": 1.0,
      "candidate": "from typing import List\n\n\ndef sort_tuples_by_last_element(tuples: List[tuple]) -> List[tuple]:\n    \"\"\"Sorts a list of tuples in increasing order by the last element in each tuple.\n\n    Args:\n        tuples (List[tuple]): list of tuples to sort\n\n    Returns:\n        List[tuple]: list of sorted tuples\n    \"\"\"\n    return sorted(tuples, key=lambda x: x[-1])\n\n\nif __name__ == \"__main__\":\n    print(sort_tuples_by_last_element([(1, 2), (2, 3), (3, 1)]))"
    },
    {
      "rank": 89,
      "score": 1.0,
      "candidate": "from typing import List\n\n\ndef sort_tuples(list_of_tuples: List[tuple]) -> List[tuple]:\n    \"\"\"Sorts list of tuples by last element in tuple.\n\n    Args:\n        list_of_tuples (List[tuple]): list of tuples\n\n    Returns:\n        List[tuple]: list of sorted tuples\n    \"\"\"\n\n    return sorted(list_of_tuples, key=lambda x: x[1])\n\n\nif __name__ == \"__main__\":\n    print(sort_tuples([(1, 3), (2, 1), (3, 2)]))"
    },
    {
      "rank": 90,
      "score": 1.0,
      "candidate": "from collections import defaultdict\n\ndef sort_tuples(tuples):\n    \"\"\"\n    Sorts a list of tuples in increasing order by the last element in each tuple.\n\n    Args:\n       tuples(list): list of tuples to sort\n    Returns:\n       list of sorted tuples in increasing order by the last element in each tuple\n    \"\"\"\n    if not tuples:\n        return []\n\n    sorted_tuples = sorted(tuples, key=lambda x: x[-1])\n\n    return sorted_tuples\n\n\ndef test_function(test_case):\n    test_input, test_expected = test_case\n    test_actual = sort_tuples(test_input)\n    if test_actual == test_expected:\n        print(\"Pass\")\n    else:\n        print(\"Fail\")\n\n\ntest_function(([(20, 6, 7), (12, 6, 7), (10, 6, 6)],\n              [(10, 6, 6), (20, 6, 7), (12, 6, 7)]))\ntest_function(([(12, 6, 12), (12, 6, 10), (12, 6, 14)],\n              [(12, 6, 10), (12, 6, 12), (12, 6, 14)]))\ntest_function(([(12, 6, 12), (12, 6, 10), (12, 6, 14), (12, 6, 11)],\n              [(12, 6, 10), (12, 6, 11), (12, 6, 12), (12, 6, 14)]))\ntest_function(([(12, 6, 12), (12, 6, 10), (12, 6, 14), (12, 6, 11), (12, 6, 15)],\n              [(12, 6, 10), (12,"
    },
    {
      "rank": 91,
      "score": 1.0,
      "candidate": "from typing import List\n\n\n# Time complexity: O(nlogn)\n# Space complexity: O(1)\ndef sort_tuples(tuples: List[tuple]) -> List[tuple]:\n    return sorted(tuples, key=lambda x: x[-1])\n\n\ndef main():\n    print(sort_tuples([(2, 3), (1, 2), (3, 1)]))\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 92,
      "score": 1.0,
      "candidate": "# This is the solution I came up with.\ndef tuples_sort(tuples):\n    return sorted(tuples, key=lambda x: x[-1])\n\n\n# This is a solution I found in the book.\ndef tuples_sort_2(tuples):\n    return sorted(tuples, key=lambda x: x[len(x) - 1])\n\n\nprint(tuples_sort([(1, 2), (3, 4), (5, 1)]))\nprint(tuples_sort_2([(1, 2), (3, 4), (5, 1)]))"
    },
    {
      "rank": 93,
      "score": 1.0,
      "candidate": "from typing import List\n\n\ndef sort_tuples(tuples: List[tuple]) -> List[tuple]:\n    \"\"\"Sorts a list of tuples in increasing order by the last element in each tuple.\n\n    Args:\n        tuples (List[tuple]): the list of tuples to be sorted\n\n    Returns:\n        List[tuple]: the list of sorted tuples\n    \"\"\"\n    return sorted(tuples, key=lambda tup: tup[-1])\n\n\nif __name__ == \"__main__\":\n    print(sort_tuples([(1, 2, 3), (2, 2, 3), (1, 1, 3)]))"
    },
    {
      "rank": 94,
      "score": 1.0,
      "candidate": "def sort_tuples_by_last_element(tuples):\n    \"\"\"\n    Time complexity: O(n^2)\n    \"\"\"\n    for i in range(len(tuples)):\n        for j in range(len(tuples)):\n            if tuples[j][-1] < tuples[i][-1]:\n                tuples[j], tuples[i] = tuples[i], tuples[j]\n    return tuples\n\ndef sort_tuples_by_last_element_better(tuples):\n    \"\"\"\n    Time complexity: O(nlogn)\n    \"\"\"\n    def last_element(t):\n        return t[-1]\n\n    return sorted(tuples, key=last_element)\n\n\ndef test_sort_tuples_by_last_element():\n    assert sort_tuples_by_last_element([(1, 2, 3), (2, 4, 1), (3, 1, 2)]) == [(2, 4, 1), (3, 1, 2), (1, 2, 3)]\n    assert sort_tuples_by_last_element_better([(1, 2, 3), (2, 4, 1), (3, 1, 2)]) == [(2, 4, 1), (3, 1, 2), (1, 2, 3)]\n\nif __name__ == '__main__':\n    test_sort_tuples_by_last_element()"
    },
    {
      "rank": 95,
      "score": 1.0,
      "candidate": "from typing import List\n\n\n# Time complexity: O(n*log(n))\n# Space complexity: O(n)\ndef sort_tuples_in_increasing_order(tuples: List[tuple]) -> List[tuple]:\n    \"\"\"\n    >>> sort_tuples_in_increasing_order([(1, 2), (3, 4), (5, 6), (7, 8)])\n    [(7, 8), (5, 6), (3, 4), (1, 2)]\n    \"\"\"\n    return sorted(tuples, key=lambda x: x[-1])\n\n\n# Time complexity: O(n*log(n))\n# Space complexity: O(n)\ndef sort_tuples_in_increasing_order_2(tuples: List[tuple]) -> List[tuple]:\n    \"\"\"\n    >>> sort_tuples_in_increasing_order_2([(1, 2), (3, 4), (5, 6), (7, 8)])\n    [(7, 8), (5, 6), (3, 4), (1, 2)]\n    \"\"\"\n\n    def key(x):\n        return x[-1]\n\n    def compare(a, b):\n        if key(a) == key(b):\n            return 0\n        if key(a) < key(b):\n            return -1\n        return 1\n\n    tuples.sort(cmp=compare)\n    return tuples\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 96,
      "score": 1.0,
      "candidate": "def sort_tuples(tuples):\n    return sorted(tuples, key=lambda x: x[-1])\n\n\ndef test_sort_tuples():\n    assert sort_tuples([(1, 3), (2, 1), (2, 2), (2, 3), (3, 4)]) == [\n        (1, 3),\n        (2, 2),\n        (2, 3),\n        (3, 4),\n        (2, 1),\n    ]"
    },
    {
      "rank": 97,
      "score": 1.0,
      "candidate": "from typing import List\n\n\ndef sort_tuples_increasing_order(tuples: List[tuple]) -> List[tuple]:\n    \"\"\"Sorts a list of tuples in increasing order by the last element in each tuple.\n\n    Args:\n        tuples (List[tuple]): List of tuples to sort.\n\n    Examples:\n        >>> sort_tuples_increasing_order([(1, 2, 3), (2, 2, 2), (3, 1, 2)])\n        [(3, 1, 2), (1, 2, 3), (2, 2, 2)]\n    \"\"\"\n    return sorted(tuples, key=lambda x: x[2])\n\n\nif __name__ == \"__main__\":\n    print(sort_tuples_increasing_order([(1, 2, 3), (2, 2, 2), (3, 1, 2)]))"
    },
    {
      "rank": 98,
      "score": 1.0,
      "candidate": "from typing import List\n\n\ndef sort_list_of_tuples(list_of_tuples: List[tuple]) -> List[tuple]:\n    \"\"\"Sorts a list of tuples in increasing order by the last element in each tuple.\n\n    Args:\n        list_of_tuples (List[tuple]): list of tuples to sort\n\n    Returns:\n        List[tuple]: sorted list of tuples\n    \"\"\"\n    return sorted(list_of_tuples, key=lambda x: x[-1])\n\n\nif __name__ == \"__main__\":\n    list_of_tuples = [(1, 2, 3), (1, 2, 1), (1, 2, 2), (1, 2, 10), (1, 2, 9), (1, 2, 8)]\n    print(sort_list_of_tuples(list_of_tuples))"
    },
    {
      "rank": 99,
      "score": 1.0,
      "candidate": "from random import randint\n\n\ndef sort_by_last(tuples):\n    \"\"\"\n    >>> sort_by_last([(1, 2), (2, 1), (2, 3)])\n    [(2, 1), (1, 2), (2, 3)]\n    \"\"\"\n    return sorted(tuples, key=lambda x: x[-1])\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()\n\n    l = [(randint(1, 100), randint(1, 100)) for _ in range(10)]\n    print(l)\n    print(sort_by_last(l))"
    },
    {
      "rank": 100,
      "score": 1.0,
      "candidate": "def sort_list_of_tuples_by_last_element(lst_of_tuples: list) -> list:\n    \"\"\"Sorts a list of tuples in increasing order by the last element in each tuple.\n\n    Args:\n        lst_of_tuples (list): List of tuples to sort.\n\n    Returns:\n        list: Sorted list of tuples.\n    \"\"\"\n    return sorted(lst_of_tuples, key=lambda x: x[-1])\n\n\nif __name__ == \"__main__\":\n    print(sort_list_of_tuples_by_last_element([(2, 2), (3, 1), (1, 4)]))"
    }
  ]
}