{
  "timestamp": "2025-09-14T21:16:02.734376",
  "method": "improved_llm_judge",
  "judge_model": "codellama/CodeLlama-7b-Python-hf",
  "target_model": "codellama-7b",
  "dataset": "humaneval",
  "problem_number": 25,
  "total_candidates": 100,
  "results": [
    {
      "rank": 1,
      "score": 10.0,
      "candidate": "factors = []\n    while n > 1:\n        for i in range(2, n + 1):\n            if n % i == 0:\n                factors.append(i)\n                n = n // i\n                break\n    return factors\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 2,
      "score": 10.0,
      "candidate": "result = []\n    while n > 1:\n        for i in range(2, n + 1):\n            if n % i == 0:\n                n //= i\n                result.append(i)\n                break\n    return result\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 3,
      "score": 10.0,
      "candidate": "if n < 2:\n        return []\n    result = []\n    i = 2\n    while i * i <= n:\n        while n % i == 0:\n            result.append(i)\n            n //= i\n        i += 1\n    if n > 1:\n        result.append(n)\n    return result\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 4,
      "score": 10.0,
      "candidate": "factors = []\n    i = 2\n    while n != 1:\n        if n % i == 0:\n            factors.append(i)\n            n //= i\n        else:\n            i += 1\n    return factors\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 5,
      "score": 10.0,
      "candidate": "if n <= 0:\n        raise ValueError(\"Only positive integers are allowed\")\n    factors = []\n    while n > 1:\n        for i in range(2, n + 1):\n            if n % i == 0:\n                factors.append(i)\n                n //= i\n                break\n    return factors\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 6,
      "score": 10.0,
      "candidate": "prime_factors = []\n    while n % 2 == 0:\n        prime_factors.append(2)\n        n //= 2\n    for i in range(3, int(n ** 0.5) + 1, 2):\n        while n % i == 0:\n            prime_factors.append(i)\n            n //= i\n    if n > 2:\n        prime_factors.append(n)\n    return prime_factors\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 7,
      "score": 10.0,
      "candidate": "factors = []\n    while n > 1:\n        for prime in range(2, n + 1):\n            if n % prime == 0:\n                factors.append(prime)\n                n = n // prime\n                break\n    return factors\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 8,
      "score": 10.0,
      "candidate": "if n < 2:\n        return []\n    factors = []\n    i = 2\n    while i ** 2 <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n            factors.append(i)\n    if n > 1:\n        factors.append(n)\n    return factors\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 9,
      "score": 10.0,
      "candidate": "result = []\n    for i in range(2, n + 1):\n        while n % i == 0:\n            result.append(i)\n            n //= i\n    return result\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 10,
      "score": 10.0,
      "candidate": "factorization = []\n    i = 2\n    while i ** 2 <= n:\n        while n % i == 0:\n            n //= i\n            factorization.append(i)\n        i += 1\n    if n > 1:\n        factorization.append(n)\n    return factorization\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 11,
      "score": 10.0,
      "candidate": "factors = []\n    while n % 2 == 0:\n        factors.append(2)\n        n //= 2\n    for i in range(3, int(n ** 0.5) + 1, 2):\n        while n % i == 0:\n            factors.append(i)\n            n //= i\n    if n > 2:\n        factors.append(n)\n    return factors"
    },
    {
      "rank": 12,
      "score": 10.0,
      "candidate": "if n < 2:\n        return []\n    res = []\n    i = 2\n    while n > 1:\n        if n % i == 0:\n            n //= i\n            res.append(i)\n        else:\n            i += 1\n    return res\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 13,
      "score": 10.0,
      "candidate": "result = []\n    i = 2\n    while i * i <= n:\n        while n % i == 0:\n            result.append(i)\n            n //= i\n        i += 1\n    if n > 1:\n        result.append(n)\n    return result\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 14,
      "score": 10.0,
      "candidate": "if n == 1:\n        return [1]\n\n    for i in range(2, int(n**0.5)+1):\n        if n % i == 0:\n            return [i] + factorize(n // i)\n    return [n]"
    },
    {
      "rank": 15,
      "score": 10.0,
      "candidate": "result = []\n    while n % 2 == 0:\n        result.append(2)\n        n = n // 2\n    i = 3\n    while i * i <= n:\n        if n % i == 0:\n            result.append(i)\n            n = n // i\n        else:\n            i += 2\n    if n > 2:\n        result.append(n)\n    return result\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 16,
      "score": 10.0,
      "candidate": "if n == 1:\n        return []\n    if n % 2 == 0:\n        return factorize(n // 2) + [2]\n    for i in range(3, int(n ** 0.5) + 1, 2):\n        if n % i == 0:\n            return factorize(n // i) + [i]\n    return [n]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 17,
      "score": 10.0,
      "candidate": "result = []\n    i = 2\n    while i ** 2 <= n:\n        while n % i == 0:\n            result.append(i)\n            n //= i\n        i += 1\n    if n > 1:\n        result.append(n)\n    return result\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 18,
      "score": 9.97623665987849,
      "candidate": "factors = []\n    i = 2\n    while i ** 2 <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n            factors.append(i)\n    if n > 1:\n        factors.append(n)\n    return factors\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 19,
      "score": 9.95437278061351,
      "candidate": "result = []\n    while n > 1:\n        for i in range(2, n + 1):\n            if n % i == 0:\n                result.append(i)\n                n //= i\n                break\n    return result\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 20,
      "score": 9.891871491622737,
      "candidate": "result = []\n    while n % 2 == 0:\n        result.append(2)\n        n //= 2\n    for i in range(3, int(n ** 0.5) + 1, 2):\n        while n % i == 0:\n            result.append(i)\n            n //= i\n    if n > 2:\n        result.append(n)\n    return result\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 21,
      "score": 9.84798920558327,
      "candidate": "if n <= 0:\n        raise ValueError(\"Input number should be greater than zero\")\n    factors = []\n    while n % 2 == 0:\n        factors.append(2)\n        n //= 2\n    for i in range(3, int(n ** 0.5) + 1, 2):\n        while n % i == 0:\n            factors.append(i)\n            n //= i\n    if n > 2:\n        factors.append(n)\n    return factors\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 22,
      "score": 9.846309181321816,
      "candidate": "factors = []\n    if n <= 0:\n        return factors\n    while n > 1:\n        for i in range(2, n + 1):\n            if n % i == 0:\n                n /= i\n                factors.append(int(i))\n                break\n    return factors\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 23,
      "score": 9.841872501511054,
      "candidate": "if n < 0:\n        raise ValueError('Input number should be non-negative')\n    if n == 0:\n        return []\n    if n == 1:\n        return [1]\n    result = []\n    while n % 2 == 0:\n        result.append(2)\n        n //= 2\n    for i in range(3, n + 1, 2):\n        while n % i == 0:\n            result.append(i)\n            n //= i\n    return result\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 24,
      "score": 9.834420175617103,
      "candidate": "prime_factors = []\n    divider = 2\n    while n != 1:\n        if n % divider == 0:\n            prime_factors.append(divider)\n            n /= divider\n        else:\n            divider += 1\n    return prime_factors\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 25,
      "score": 9.82035370090669,
      "candidate": "result = []\n    factor = 2\n    while factor * factor <= n:\n        if n % factor == 0:\n            result.append(factor)\n            n //= factor\n            factor = 2\n        else:\n            factor += 1\n    if n > 1:\n        result.append(n)\n    return result\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 26,
      "score": 9.787110480980308,
      "candidate": "primes = []\n    while n > 1:\n        for i in range(2, n + 1):\n            if n % i == 0:\n                primes.append(i)\n                n //= i\n                break\n    return primes\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 27,
      "score": 9.762451411229746,
      "candidate": "res = []\n    while n % 2 == 0:\n        res.append(2)\n        n //= 2\n    for i in range(3, int(n**0.5)+1, 2):\n        while n % i == 0:\n            res.append(i)\n            n //= i\n    if n > 2:\n        res.append(n)\n    return res\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 28,
      "score": 9.733197111045248,
      "candidate": "factors = []\n    while n % 2 == 0:\n        factors.append(2)\n        n //= 2\n    for i in range(3, int(n ** 0.5) + 1, 2):\n        while n % i == 0:\n            factors.append(i)\n            n //= i\n    if n > 2:\n        factors.append(n)\n    return factors\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 29,
      "score": 9.700352055078,
      "candidate": "primes = [2, 3, 5]\n    factors = []\n    for prime in primes:\n        while n % prime == 0:\n            factors.append(prime)\n            n //= prime\n    if n > 1:\n        factors.append(n)\n    return factors\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 30,
      "score": 9.650955393444553,
      "candidate": "result = []\n    i = 2\n    while n > 1:\n        if n % i == 0:\n            n //= i\n            result.append(i)\n        else:\n            i += 1\n    return result\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 31,
      "score": 9.52983309854956,
      "candidate": "factors = []\n    while n % 2 == 0:\n        factors.append(2)\n        n //= 2\n    for i in range(3, int(n ** 0.5) + 1, 2):\n        while n % i == 0:\n            factors.append(i)\n            n //= i\n    if n > 2:\n        factors.append(n)\n    return factors\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 32,
      "score": 9.517040067116401,
      "candidate": "factorization = []\n    i = 2\n    while i * i <= n:\n        while n % i == 0:\n            n //= i\n            factorization.append(i)\n        i += 1\n    if n > 1:\n        factorization.append(n)\n    return factorization\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 33,
      "score": 9.430777115270699,
      "candidate": "if n < 2:\n        return [n]\n    factors = []\n    while n % 2 == 0:\n        factors.append(2)\n        n //= 2\n    for i in range(3, int(n ** 0.5) + 1, 2):\n        while n % i == 0:\n            factors.append(i)\n            n //= i\n    if n > 2:\n        factors.append(n)\n    return factors\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 34,
      "score": 8.444444444444445,
      "candidate": "pass\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 35,
      "score": 3.926139092254469,
      "candidate": "factors = []\n\n    def find_prime_factors(n, i):\n        if i * i > n:\n            if n > 1:\n                factors.append(n)\n            return\n        if n % i == 0:\n            factors.append(i)\n            find_prime_factors(n // i, i)\n        else:\n            find_prime_factors(n, i + 1)\n\n    find_prime_factors(n, 2)\n    return factors\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 36,
      "score": 3.782321827907003,
      "candidate": "if n < 2:\n        return []\n    factors = []\n    while n % 2 == 0:\n        factors.append(2)\n        n //= 2\n    for i in range(3, int(n ** 0.5) + 1, 2):\n        while n % i == 0:\n            factors.append(i)\n            n //= i\n    if n > 2:\n        factors.append(n)\n    return factors\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 37,
      "score": 3.7690182832329846,
      "candidate": "if n <= 0:\n        raise ValueError(\"n should be greater than 0\")\n    result = []\n    while n != 1:\n        for i in range(2, n + 1):\n            if n % i == 0:\n                n //= i\n                result.append(i)\n                break\n    return result\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 38,
      "score": 3.761514928204013,
      "candidate": "prime_factors = []\n    i = 2\n    while i ** 2 <= n:\n        while n % i == 0:\n            prime_factors.append(i)\n            n //= i\n        i += 1\n    if n > 1:\n        prime_factors.append(n)\n    return prime_factors\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 39,
      "score": 3.6781200142854114,
      "candidate": "result = []\n    while n % 2 == 0:\n        result.append(2)\n        n //= 2\n\n    for i in range(3, int(n ** 0.5) + 1, 2):\n        while n % i == 0:\n            result.append(i)\n            n //= i\n\n    if n > 2:\n        result.append(n)\n\n    return result\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 40,
      "score": 3.501766448946012,
      "candidate": "pass"
    },
    {
      "rank": 41,
      "score": 3.4877725635611796,
      "candidate": "factorization = []\n    while n % 2 == 0:\n        factorization.append(2)\n        n //= 2\n    for i in range(3, int(n ** 0.5) + 1, 2):\n        while n % i == 0:\n            factorization.append(i)\n            n //= i\n    if n != 1:\n        factorization.append(n)\n    return factorization\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 42,
      "score": 3.4843224952664444,
      "candidate": "result = []\n    cur = 2\n    while n > 1:\n        if n % cur == 0:\n            n /= cur\n            result.append(cur)\n        else:\n            cur += 1\n    return result\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 43,
      "score": 3.4656400595580994,
      "candidate": "prime_factors = []\n    if n < 2:\n        return prime_factors\n\n    while n % 2 == 0:\n        prime_factors.append(2)\n        n /= 2\n    for i in range(3, int(n ** 0.5) + 1, 2):\n        while n % i == 0:\n            prime_factors.append(i)\n            n /= i\n    if n > 2:\n        prime_factors.append(int(n))\n    return prime_factors\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 44,
      "score": 3.457701058851037,
      "candidate": "if n <= 0:\n        return []\n    result = []\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n            result.append(i)\n    if n > 1:\n        result.append(n)\n    return result\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 45,
      "score": 3.410951252187612,
      "candidate": "result = []\n    while n > 1:\n        for i in range(2, n + 1):\n            if n % i == 0:\n                n = n // i\n                result.append(i)\n                break\n    return result\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 46,
      "score": 3.3837173645764542,
      "candidate": "result = []\n    cur = 2\n    while n > 1:\n        while n % cur == 0:\n            result.append(cur)\n            n //= cur\n        cur += 1\n    return result\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 47,
      "score": 3.305838144420434,
      "candidate": "if n <= 0:\n        raise ValueError(\"n must be a positive number\")\n    if n == 1:\n        return []\n    res = []\n    while n % 2 == 0:\n        res.append(2)\n        n = n // 2\n    i = 3\n    while n != 1 and i * i <= n:\n        while n % i == 0:\n            res.append(i)\n            n = n // i\n        i += 2\n    if n != 1:\n        res.append(n)\n    return res\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 48,
      "score": 3.2712800217929825,
      "candidate": "if n <= 0:\n        raise ValueError(\"Only positive numbers are allowed\")\n    factors = []\n    i = 2\n    while i * i <= n:\n        while n % i == 0:\n            factors.append(i)\n            n //= i\n        i += 1\n    if n > 1:\n        factors.append(n)\n    return factors\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 49,
      "score": 3.256633716556678,
      "candidate": "if n <= 0:\n        raise ValueError(\"n must be > 0\")\n\n    if n == 1:\n        return []\n\n    factors = []\n\n    while n % 2 == 0:\n        factors.append(2)\n        n //= 2\n\n    if n == 1:\n        return factors\n\n    i = 3\n    while i * i <= n:\n        while n % i == 0:\n            factors.append(i)\n            n //= i\n        i += 2\n\n    if n > 1:\n        factors.append(n)\n\n    return factors\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 50,
      "score": 3.2483570765056164,
      "candidate": "# your task is to complete this function\n    pass\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()\n    print(factorize(100))"
    },
    {
      "rank": 51,
      "score": 3.1878490091728358,
      "candidate": "result = []\n    while n != 1:\n        for i in range(2, n + 1):\n            if n % i == 0:\n                n //= i\n                result.append(i)\n                break\n    return result\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 52,
      "score": 3.180818012523817,
      "candidate": "prime_factors = []\n    while n % 2 == 0:\n        prime_factors.append(2)\n        n //= 2\n\n    for i in range(3, int(n ** 0.5) + 1, 2):\n        while n % i == 0:\n            prime_factors.append(i)\n            n //= i\n\n    if n > 2:\n        prime_factors.append(n)\n    return prime_factors\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 53,
      "score": 3.178556285755873,
      "candidate": "if n < 2:\n        return []\n    primes = []\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n            primes.append(i)\n    if n > 1:\n        primes.append(n)\n    return primes\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 54,
      "score": 3.1718091447842305,
      "candidate": "factors = []\n\n    def is_prime(n):\n        if n % 2 == 0:\n            return False\n        i = 3\n        while i * i <= n:\n            if n % i == 0:\n                return False\n            i += 2\n        return True\n\n    while n > 1:\n        for i in range(2, n + 1):\n            if n % i == 0:\n                if is_prime(i):\n                    factors.append(i)\n                    n //= i\n                    break\n    return factors\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 55,
      "score": 3.157123666297637,
      "candidate": "# Your code here\n    if n == 1:\n        return [1]\n    res = []\n    while n % 2 == 0:\n        res.append(2)\n        n //= 2\n    for i in range(3, int(n**0.5) + 1, 2):\n        while n % i == 0:\n            res.append(i)\n            n //= i\n    if n > 2:\n        res.append(n)\n    return res\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 56,
      "score": 3.148060138532288,
      "candidate": "if n < 1:\n        raise ValueError(\"Factor can't be less than 1\")\n    prime_factors = []\n    while n > 1:\n        for prime in [2, 3, 5]:\n            if n % prime == 0:\n                prime_factors.append(prime)\n                n //= prime\n                break\n        else:\n            prime_factors.append(n)\n            break\n    return prime_factors\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 57,
      "score": 3.1305276360899446,
      "candidate": "if n == 1:\n        return [1]\n    factors = []\n    while n % 2 == 0:\n        factors.append(2)\n        n //= 2\n    for i in range(3, int(n ** 0.5) + 1, 2):\n        while n % i == 0:\n            factors.append(i)\n            n //= i\n    if n > 2:\n        factors.append(n)\n    return factors\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 58,
      "score": 3.104431797502378,
      "candidate": "factors = []\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n            factors.append(i)\n    if n > 1:\n        factors.append(n)\n    return factors\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 59,
      "score": 3.055461294854933,
      "candidate": "pass\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 60,
      "score": 3.0485387746740202,
      "candidate": "if n == 1:\n        return []\n    i = 2\n    factors = []\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n            factors.append(i)\n    if n > 1:\n        factors.append(n)\n    return factors\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 61,
      "score": 3.045880388267751,
      "candidate": "result = []\n    while n > 1:\n        for i in range(2, n + 1):\n            if n % i == 0:\n                result.append(i)\n                n //= i\n                break\n    return result\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 62,
      "score": 3.043523534119086,
      "candidate": "factorization = []\n    while n % 2 == 0:\n        factorization.append(2)\n        n //= 2\n    for i in range(3, int(n ** 0.5) + 1, 2):\n        while n % i == 0:\n            factorization.append(i)\n            n //= i\n    if n > 2:\n        factorization.append(n)\n    return factorization\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 63,
      "score": 3.0025567283212307,
      "candidate": "if n < 2:\n        return []\n\n    factors = []\n\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n            factors.append(i)\n\n    if n > 1:\n        factors.append(n)\n\n    return factors\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 64,
      "score": 2.993251387631033,
      "candidate": "result = []\n    while n > 1:\n        for i in range(2, n + 1):\n            if n % i == 0:\n                result.append(i)\n                n //= i\n                break\n    return result\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 65,
      "score": 2.982086980445024,
      "candidate": "factorization = []\n    while n % 2 == 0:\n        factorization.append(2)\n        n /= 2\n    for i in range(3, int(n ** 0.5) + 1, 2):\n        while n % i == 0:\n            factorization.append(i)\n            n /= i\n    if n > 2:\n        factorization.append(int(n))\n    return factorization\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 66,
      "score": 2.94217585880588,
      "candidate": "if n < 0:\n        raise ValueError(\"Input number should be a positive integer.\")\n    if n == 0:\n        return []\n    res = []\n    i = 2\n    while i ** 2 <= n:\n        if n % i == 0:\n            res.append(i)\n            while n % i == 0:\n                n //= i\n        i += 1\n    if n > 1:\n        res.append(n)\n    return res\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 67,
      "score": 2.9071705116680913,
      "candidate": "prime_factors = []\n    while n > 1:\n        for i in range(2, n + 1):\n            if n % i == 0:\n                prime_factors.append(i)\n                n /= i\n                break\n    return prime_factors\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 68,
      "score": 2.890164056081244,
      "candidate": "factors = []\n    while n % 2 == 0:\n        factors.append(2)\n        n //= 2\n\n    i = 3\n    while i * i <= n:\n        if n % i == 0:\n            factors.append(i)\n            n //= i\n        else:\n            i += 2\n    if n != 1:\n        factors.append(n)\n    return factors\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 69,
      "score": 2.887111849756732,
      "candidate": "factors = []\n    while n > 1:\n        for i in range(2, n + 1):\n            if n % i == 0:\n                factors.append(i)\n                n //= i\n                break\n    return factors\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 70,
      "score": 2.8829315215254097,
      "candidate": "result = []\n    while n % 2 == 0:\n        result.append(2)\n        n //= 2\n    i = 3\n    while i * i <= n:\n        if n % i == 0:\n            result.append(i)\n            n //= i\n            while n % i == 0:\n                result.append(i)\n                n //= i\n        else:\n            i += 2\n    if n > 2:\n        result.append(n)\n    return result\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 71,
      "score": 2.882923312638332,
      "candidate": "if n < 1:\n        raise ValueError(\"Only positive numbers are allowed\")\n\n    result = []\n    divisor = 2\n    while divisor ** 2 <= n:\n        while n % divisor == 0:\n            result.append(divisor)\n            n //= divisor\n        divisor += 1\n\n    if n > 1:\n        result.append(n)\n\n    return result\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 72,
      "score": 2.8541531251033616,
      "candidate": "res = []\n    while n > 1:\n        for i in range(2, n + 1):\n            if n % i == 0:\n                res.append(i)\n                n //= i\n                break\n    return res\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 73,
      "score": 2.8504963247670663,
      "candidate": "factors = []\n    divisor = 2\n    while n > 1:\n        if n % divisor == 0:\n            n //= divisor\n            factors.append(divisor)\n        else:\n            divisor += 1\n    return factors\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 74,
      "score": 2.8494481522053556,
      "candidate": "factors = []\n    while n % 2 == 0:\n        factors.append(2)\n        n //= 2\n    i = 3\n    while i * i <= n:\n        if n % i == 0:\n            factors.append(i)\n            n //= i\n        else:\n            i += 2\n    if n != 1:\n        factors.append(n)\n    return factors\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 75,
      "score": 2.8453938120743927,
      "candidate": "factors = []\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n            factors.append(i)\n    if n > 1:\n        factors.append(n)\n    return factors\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 76,
      "score": 2.8074588597918417,
      "candidate": "pass"
    },
    {
      "rank": 77,
      "score": 2.803945923433921,
      "candidate": "res = []\n    i = 2\n    while i ** 2 <= n:\n        if n % i == 0:\n            res.append(i)\n            n //= i\n            i = 2\n        else:\n            i += 1\n    if n > 1:\n        res.append(n)\n    return res\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 78,
      "score": 2.768291153593769,
      "candidate": "if n <= 0:\n        raise ValueError(\"Input number should be greater than 0\")\n\n    factors = []\n    while n % 2 == 0:\n        factors.append(2)\n        n //= 2\n\n    for i in range(3, int(n ** 0.5) + 1, 2):\n        while n % i == 0:\n            factors.append(i)\n            n //= i\n\n    if n > 2:\n        factors.append(n)\n\n    return factors\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 79,
      "score": 2.765262807032524,
      "candidate": "factors = []\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n            factors.append(i)\n    if n > 1:\n        factors.append(n)\n    return factors\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 80,
      "score": 2.7408648908631763,
      "candidate": "factors = []\n    while n % 2 == 0:\n        factors.append(2)\n        n //= 2\n\n    for i in range(3, int(n ** 0.5) + 1, 2):\n        while n % i == 0:\n            factors.append(i)\n            n //= i\n\n    if n > 2:\n        factors.append(n)\n\n    return factors\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 81,
      "score": 2.735119898116481,
      "candidate": "if n < 0:\n        raise ValueError(\"Only positive integers are allowed\")\n    elif n == 0:\n        return []\n    elif n == 1:\n        return [1]\n\n    factors = []\n    curr_num = n\n    curr_prime = 2\n\n    while curr_num != 1:\n        if curr_num % curr_prime == 0:\n            factors.append(curr_prime)\n            curr_num /= curr_prime\n        else:\n            curr_prime += 1\n\n    return factors\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 82,
      "score": 2.718856235379514,
      "candidate": "if n <= 0:\n        raise ValueError(\"n must be greater or equal to 1\")\n    if n == 1:\n        return []\n\n    primes = []\n    factor = 2\n\n    while n > 1:\n        if n % factor == 0:\n            primes.append(factor)\n            n //= factor\n        else:\n            factor += 1\n\n    return primes\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 83,
      "score": 2.6996806550405976,
      "candidate": "result = []\n    i = 2\n    while i * i <= n:\n        while n % i == 0:\n            result.append(i)\n            n //= i\n        i += 1\n    if n > 1:\n        result.append(n)\n    return result\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 84,
      "score": 2.6991466938853015,
      "candidate": "prime_factors = []\n    while n > 1:\n        for i in range(2, n + 1):\n            if n % i == 0:\n                prime_factors.append(i)\n                n //= i\n                break\n    return prime_factors\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 85,
      "score": 2.6615389998470205,
      "candidate": "primes = []\n    for i in range(2, n + 1):\n        if n % i == 0:\n            primes.append(i)\n            n //= i\n            if n == 1:\n                break\n    return primes\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 86,
      "score": 2.648973453061324,
      "candidate": "if n == 1:\n        return []\n    factors = []\n    while n % 2 == 0:\n        factors.append(2)\n        n //= 2\n    for i in range(3, int(n ** 0.5) + 1, 2):\n        while n % i == 0:\n            factors.append(i)\n            n //= i\n    if n > 2:\n        factors.append(n)\n    return factors\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 87,
      "score": 2.580391238388681,
      "candidate": "result = []\n    if n < 1:\n        raise ValueError(\"Only positive integer is allowed\")\n\n    while n % 2 == 0:\n        n //= 2\n        result.append(2)\n\n    for i in range(3, int(n ** 0.5) + 1, 2):\n        while n % i == 0:\n            n //= i\n            result.append(i)\n\n    if n > 2:\n        result.append(n)\n\n    return result\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 88,
      "score": 2.493584439832788,
      "candidate": "result = []\n    while n > 1:\n        for i in range(2, n + 1):\n            if n % i == 0:\n                result.append(i)\n                n /= i\n                break\n    return result\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 89,
      "score": 2.446832512996986,
      "candidate": "i = 2\n    factors = []\n    while i ** 2 <= n:\n        while n % i == 0:\n            factors.append(i)\n            n //= i\n        i += 1\n    if n > 1:\n        factors.append(n)\n    return factors\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 90,
      "score": 2.4245032112888487,
      "candidate": "if n < 2:\n        raise ValueError(\"Number should be greater than 2\")\n\n    prime_factors = []\n    i = 2\n\n    while i ** 2 <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n            prime_factors.append(i)\n\n    if n > 1:\n        prime_factors.append(n)\n\n    return prime_factors\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 91,
      "score": 2.4018966879596646,
      "candidate": "def prime_factors(n):\n        return [i for i in range(2, n + 1) if n % i == 0]\n    def prime_factorize(n):\n        if n == 1:\n            return []\n        else:\n            return [prime_factors(n)[0]] + prime_factorize(n // prime_factors(n)[0])\n    return prime_factorize(n)\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 92,
      "score": 2.389578175014489,
      "candidate": "factors = []\n    i = 2\n    while n > 1:\n        if n % i == 0:\n            factors.append(i)\n            n //= i\n        else:\n            i += 1\n    return factors"
    },
    {
      "rank": 93,
      "score": 2.3359069755507846,
      "candidate": "result = []\n    i = 2\n    while i ** 2 <= n:\n        while n % i == 0:\n            result.append(i)\n            n //= i\n        i += 1\n    if n > 1:\n        result.append(n)\n    return result\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 94,
      "score": 2.293848149332354,
      "candidate": "if n == 1:\n        return []\n    factorization = []\n    while n % 2 == 0:\n        factorization.append(2)\n        n //= 2\n    if n == 1:\n        return factorization\n    i = 3\n    while i * i <= n:\n        while n % i == 0:\n            factorization.append(i)\n            n //= i\n        i += 2\n    if n > 1:\n        factorization.append(n)\n    return factorization\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 95,
      "score": 2.260739004816286,
      "candidate": "raise NotImplementedError()"
    },
    {
      "rank": 96,
      "score": 2.118479922318633,
      "candidate": "# 1. Check if input is valid\n    if not isinstance(n, int) or n <= 0:\n        raise TypeError(\n            \"Input should be positive integer.\")\n\n    # 2. Initialize variables\n    factors: List[int] = []\n    num: int = n\n\n    # 3. Loop through all possible factors\n    # from 1 to input number and check if\n    # it is factor of input number\n    for i in range(2, num + 1):\n        # 3.1 If factor is found, then add it to list of factors\n        if num % i == 0:\n            factors.append(i)\n            # 3.2 While factor is found, keep dividing input number\n            # with the factor until input number is not divisible\n            # with it anymore\n            while num % i == 0:\n                num = num // i\n        # 3.3 If input number is 1, then we have all the factors\n        if num == 1:\n            break\n\n    # 4. Return list of factors\n    return factors\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 97,
      "score": 2.043359877671101,
      "candidate": "factors = []\n    for i in range(2, n + 1):\n        while n % i == 0:\n            n //= i\n            factors.append(i)\n    return factors\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 98,
      "score": 2.020164938060112,
      "candidate": "result = []\n    if n < 1:\n        raise ValueError(\"Only positive numbers are allowed\")\n    while n > 1:\n        if n % 2 == 0:\n            n /= 2\n            result.append(2)\n        else:\n            for i in range(3, int(n ** 0.5) + 1, 2):\n                if n % i == 0:\n                    n /= i\n                    result.append(int(i))\n                    break\n            else:\n                result.append(int(n))\n                n = 1\n    return result\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 99,
      "score": 2.006215542699554,
      "candidate": "factorization = []\n    while n > 1:\n        for i in range(2, n + 1):\n            if n % i == 0:\n                n = n // i\n                factorization.append(i)\n                break\n    return factorization\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 100,
      "score": 1.6901274479551278,
      "candidate": "factors = []\n    for i in range(2, n + 1):\n        if n % i == 0:\n            factors.append(i)\n            while n % i == 0:\n                n //= i\n    return factors\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    }
  ]
}