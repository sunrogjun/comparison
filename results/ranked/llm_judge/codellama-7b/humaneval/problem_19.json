{
  "timestamp": "2025-09-14T21:13:24.561859",
  "method": "improved_llm_judge",
  "judge_model": "codellama/CodeLlama-7b-Python-hf",
  "target_model": "codellama-7b",
  "dataset": "humaneval",
  "problem_number": 19,
  "total_candidates": 100,
  "results": [
    {
      "rank": 1,
      "score": 10.0,
      "candidate": "words = numbers.split()\n    words.sort(key=lambda word: [number_to_int(word) for word in words])\n    return ' '.join(words)\n\n\ndef number_to_int(word: str) -> int:\n    \"\"\" Convert a number string into an integer\n    >>> number_to_int('zero')\n    0\n    >>> number_to_int('five')\n    5\n    \"\"\"\n    number_to_int_map = {\n        'zero': 0,\n        'one': 1,\n        'two': 2,\n        'three': 3,\n        'four': 4,\n        'five': 5,\n        'six': 6,\n        'seven': 7,\n        'eight': 8,\n        'nine': 9\n    }\n    return number_to_int_map[word]\n\n\nif __name__ == \"__main__\":\n    # Test here\n    print(sort_numbers('three one five'))"
    },
    {
      "rank": 2,
      "score": 10.0,
      "candidate": "if numbers == \"\":\n        return \"\"\n    return \" \".join(sorted(numbers.split(), key=str.lower))\n\n\ndef sort_names(names: str) -> str:\n    \"\"\" Input is a string of names, separated by commas.\n    Return the string with names sorted in alphabetical order\n    >>> sort_names('Rob,Tim,John')\n    'John,Rob,Tim'\n    \"\"\"\n    if names == \"\":\n        return \"\"\n    return \",\".join(sorted(names.split(\",\")))\n\n\ndef sort_names_by_last_name(names: str) -> str:\n    \"\"\" Input is a string of names, separated by commas.\n    Return the string with names sorted in alphabetical order, with the last name first\n    >>> sort_names_by_last_name('Rob,Tim,John')\n    'John,Tim,Rob'\n    \"\"\"\n    if names == \"\":\n        return \"\"\n    names_list = names.split(\",\")\n    names_list.sort(key=lambda x: x.split(\" \")[-1])\n    return \",\".join(names_list)\n\n\ndef sort_addresses(addresses: str) -> str:\n    \"\"\" Input is a string of addresses, separated by newlines.\n    Return the string with addresses sorted in alphabetical order by street name.\n    If street names are the same, sort by street number.\n    If street names and numbers are the same, sort by postal code.\n    If all else is the same, sort by city name.\n    >>> sort_addresses('123 Main St\\\\n45 Side St\\\\n45 Side St\\\\n678 B St\\\\n34 North Ave\\\\n2111 1st St')\n    '123 Main St\\\\n34 North Ave\\\\n2111 1st St\\\\n45 Side St\\\\n678 B St'\n    \"\"\"\n    if addresses == \"\":\n        return \"\"\n    addresses_list = addresses.split(\"\\n\")\n    addresses_list.sort(key=lambda x: x.split(\" \")[0])\n    return \"\\n\".join(addresses_list)\n\n\ndef merge_addresses("
    },
    {
      "rank": 3,
      "score": 10.0,
      "candidate": "# Split the string into a list of strings\n    num_list: List[str] = numbers.split()\n    # Convert the list of strings into a list of integers\n    num_list_int: List[int] = [int(n) for n in num_list]\n    # Sort the list of integers\n    num_list_int.sort()\n    # Convert the list of integers into a list of strings\n    num_list_str: List[str] = [str(n) for n in num_list_int]\n    # Return a space-delimited string of the integers\n    return \" \".join(num_list_str)\n\n\ndef sort_vowels(word: str) -> str:\n    \"\"\" Input is a string.\n    Return the string with the vowels sorted from smallest to largest\n    >>> sort_vowels('apple')\n    'aaepp'\n    \"\"\"\n    # Create a list of the vowels in the word\n    vowels: List[str] = [c for c in word if c in 'aeiou']\n    # Sort the list of vowels\n    vowels.sort()\n    # Return the word with the vowels sorted\n    return \"\".join(vowels)\n\n\ndef sort_sentence(sentence: str) -> str:\n    \"\"\" Input is a string ending with a period.\n    Return the string with all the words sorted from smallest to largest\n    >>> sort_sentence('is2 Thi1s T4est 3a.')\n    'Thi1s 3a. T4est is2.'\n    \"\"\"\n    # Split the string into a list of words\n    word_list: List[str] = sentence.split()\n    # Create a list of the words stripped of all non-alphanumeric characters\n    word_list_alpha: List[str] = [w.translate(str.maketrans('', '', '!\"#$%&\\'()*+,-./:;<=>?@[\\\\]^_`{|}~')) for w in word_list]\n    # Create a list of the words stripped of all numbers\n    word_list_alpha_no_num: List[str] ="
    },
    {
      "rank": 4,
      "score": 10.0,
      "candidate": "nums = numbers.split()\n    nums.sort(key=lambda x: int(x))\n    return ' '.join(nums)\n\n\ndef sort_names(names: str) -> str:\n    \"\"\" Input is a space-delimited string of names.\n    Return the string with names sorted alphabetically\n    >>> sort_names('Anna David')\n    'Anna David'\n    \"\"\"\n    names = names.split()\n    names.sort()\n    return ' '.join(names)\n\n\ndef sort_sentence(sentence: str) -> str:\n    \"\"\" Input is a sentence of words delimited by spaces.\n    Return the sentence with the words sorted alphabetically\n    >>> sort_sentence('is2 Thi1s T4est 3a')\n    'Thi1s is2 3a T4est'\n    \"\"\"\n    words = sentence.split()\n    words.sort(key=lambda x: x[::-1])\n    return ' '.join(words)\n\n\ndef sort_special(sentence: str) -> str:\n    \"\"\" Input is a sentence of words delimited by spaces, but some words contain the character '*'.\n    Return the sentence with the words that do not contain '*' sorted alphabetically, and the words that do contain\n    '*' sorted reverse alphabetically\n    >>> sort_special('is2 Thi1s *T4est 3a')\n    'Thi1s *T4est is2 3a'\n    \"\"\"\n    words = sentence.split()\n    words.sort(key=lambda x: x if '*' not in x else x[::-1])\n    return ' '.join(words)\n\n\ndef sort_list(l: List[int]) -> List[int]:\n    \"\"\" Input is a list of integers.\n    Return the same list sorted from smallest to largest without using the built-in sorted() function.\n    >>> sort_list([5, 3, 6, 2, 10])\n    [2, 3, 5, 6, 10]\n    \"\"\"\n    l.sort()\n    return l\n\n\nif __name__ == '__main__':\n    import"
    },
    {
      "rank": 5,
      "score": 10.0,
      "candidate": "return \" \".join(sorted(numbers.split(\" \")))\n\n\ndef sort_names(names: str) -> str:\n    \"\"\" Input is a space-delimited string of names.\n    Return the string with names sorted alphabetically (case-insensitive)\n    >>> sort_names('ann john david')\n    'david john ann'\n    \"\"\"\n    return \" \".join(sorted(names.split(\" \")))\n\n\ndef sort_sentence(sentence: str) -> str:\n    \"\"\" Input is a sentence containing numbers and names.\n    Return the sentence with the numbers sorted numerically and the names alphabetically\n    >>> sort_sentence('one four aaa bbb two ccc ddd')\n    'aaa bbb ccc ddd four one two'\n    \"\"\"\n    return \" \".join(sorted(sentence.split(\" \")))\n\n\ndef sort_files(files: str) -> str:\n    \"\"\" Input is a space-delimited string of file paths.\n    Return the string with file paths sorted alphabetically by filename\n    >>> sort_files('/Users/keely/one.txt /Users/keely/two.txt /Users/keely/three.txt')\n    '/Users/keely/one.txt /Users/keely/three.txt /Users/keely/two.txt'\n    \"\"\"\n    return \" \".join(sorted(files.split(\" \")))\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 6,
      "score": 10.0,
      "candidate": "numbers_list = numbers.split()\n    numbers_list.sort(key=lambda x: {\n        'zero': 0,\n        'one': 1,\n        'two': 2,\n        'three': 3,\n        'four': 4,\n        'five': 5,\n        'six': 6,\n        'seven': 7,\n        'eight': 8,\n        'nine': 9\n    }[x])\n    return ' '.join(numbers_list)\n\n\ndef sort_names(names: str) -> str:\n    \"\"\" Input is a string of names, each name separated by a space.\n    Return the string with names sorted alphabetically\n    >>> sort_names('Carl Mark Carl')\n    'Carl Mark Carl'\n    \"\"\"\n    names_list = names.split()\n    names_list.sort()\n    return ' '.join(names_list)\n\n\ndef sort_names_case_insensitive(names: str) -> str:\n    \"\"\" Input is a string of names, each name separated by a space.\n    Return the string with names sorted alphabetically, case insensitive\n    >>> sort_names_case_insensitive('Mark Carl Carl')\n    'Carl Mark Carl'\n    \"\"\"\n    names_list = names.split()\n    names_list.sort(key=lambda x: x.lower())\n    return ' '.join(names_list)\n\n\ndef sort_names_first_then_last(names: str) -> str:\n    \"\"\" Input is a string of names, each name separated by a space.\n    Return the string with names sorted first by the first name, then the last name\n    >>> sort_names_first_then_last('Carl Mark Carl')\n    'Mark Carl Carl'\n    \"\"\"\n    names_list = names.split()\n    names_list.sort(key=lambda x: (x.split()[0], x.split()[1]))\n    return ' '.join(names_list)\n\n\ndef sort_names_first_then_last_case_insensitive(names: str) -> str:\n    \"\"\" Input is a string of names, each name separated by a space."
    },
    {
      "rank": 7,
      "score": 10.0,
      "candidate": "nums = numbers.split()\n    nums.sort(key=lambda x: {\n        'zero': 0,\n        'one': 1,\n        'two': 2,\n        'three': 3,\n        'four': 4,\n        'five': 5,\n        'six': 6,\n        'seven': 7,\n        'eight': 8,\n        'nine': 9\n    }[x])\n    return ' '.join(nums)\n\n\ndef remove_duplicates(string: str) -> str:\n    \"\"\" Input is a string of lowercase letters.\n    Return a string with only the first occurrence of each character.\n    >>> remove_duplicates('goodbye')\n    'bygdye'\n    \"\"\"\n    return ''.join(dict.fromkeys(string))\n\n\ndef sort_letters(string: str) -> str:\n    \"\"\" Input is a string of lowercase letters.\n    Return a string with the letters sorted in alphabetical order.\n    >>> sort_letters('sorcey')\n    'ceories'\n    \"\"\"\n    return ''.join(sorted(string))\n\n\ndef reverse_string(string: str) -> str:\n    \"\"\" Input is a string of lowercase letters.\n    Return the reverse of the given string.\n    >>> reverse_string('sorcey')\n    'yecrso'\n    \"\"\"\n    return string[::-1]\n\n\ndef is_pangram(string: str) -> bool:\n    \"\"\" Input is a string of lowercase letters.\n    Return True if the string is a pangram, otherwise False.\n    >>> is_pangram('abcdefghijklmnopqrstuvwxyz')\n    True\n    \"\"\"\n    return len(set(string)) == 26\n\n\ndef char_histogram(string: str) -> List[int]:\n    \"\"\" Input is a string of lowercase letters.\n    Return a list of 26 integers, each representing the number of occurrences of that letter in the input string.\n    >>> char_histogram('abracadabra')\n    [1, 1, 1,"
    },
    {
      "rank": 8,
      "score": 10.0,
      "candidate": "result = []\n    for i in numbers.split():\n        if i in ['zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine']:\n            result.append(i)\n    return ' '.join(sorted(result))\n\n\ndef sum_multiples(l: List[int]) -> int:\n    \"\"\" Return the sum of all the multiples of 5 and 3 in list l\n    >>> sum_multiples([3, 5, 6, 7, 8, 9, 10, 11, 12, 15])\n    105\n    \"\"\"\n    result = 0\n    for i in l:\n        if i % 3 == 0 or i % 5 == 0:\n            result += i\n    return result\n\n\ndef find_longest_word(s: str) -> str:\n    \"\"\" Return the longest word in s\n    >>> find_longest_word('The quick brown fox jumped over the lazy dog')\n    'jumped'\n    \"\"\"\n    result = ''\n    for i in s.split():\n        if len(i) > len(result):\n            result = i\n    return result\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 9,
      "score": 10.0,
      "candidate": "if numbers == '':\n        return ''\n    numbers_list = numbers.split()\n    numbers_list.sort(key=lambda x: int(number_to_int(x)))\n    return ' '.join(numbers_list)\n\n\ndef number_to_int(number: str) -> int:\n    \"\"\" Translate number to integer.\n    >>> number_to_int('three')\n    3\n    >>> number_to_int('zero')\n    0\n    >>> number_to_int('nine')\n    9\n    \"\"\"\n    return {\n        'zero': 0,\n        'one': 1,\n        'two': 2,\n        'three': 3,\n        'four': 4,\n        'five': 5,\n        'six': 6,\n        'seven': 7,\n        'eight': 8,\n        'nine': 9\n    }[number]\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 10,
      "score": 10.0,
      "candidate": "number_list = numbers.split()\n    number_list.sort(key=sort_number)\n    return ' '.join(number_list)\n\n\ndef sort_number(number: str) -> int:\n    \"\"\" Return the index of the number in a dictionary.\n    >>> sort_number('one')\n    0\n    >>> sort_number('five')\n    4\n    \"\"\"\n    return {\n        'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5,\n        'six': 6, 'seven': 7, 'eight': 8, 'nine': 9\n    }[number]\n\n\ndef sort_numbers_list(numbers: List[str]) -> List[str]:\n    \"\"\" Input is a list of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the list with numbers sorted from smallest to largest\n    >>> sort_numbers_list(['three', 'one', 'five'])\n    ['one', 'three', 'five']\n    \"\"\"\n    return sorted(numbers, key=sort_number)\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 11,
      "score": 10.0,
      "candidate": "numbers_list = numbers.split()\n    sorted_list = sorted(numbers_list, key=lambda x: int(x))\n    return ' '.join(sorted_list)\n\n\ndef sort_names(names: str) -> str:\n    \"\"\" Input is a space-delimited string of names.\n    Return the string with names sorted alphabetically, except for 'da' should come before all other single-letter words\n    and 'la' should come before all other double-letter words.\n    >>> sort_names('is2 Thi1s T4est 4a')\n    'Thi1s is2 4a 4est T4est'\n    \"\"\"\n    names_list = names.split()\n    sorted_list = sorted(names_list)\n    sorted_list.sort(key=lambda x: (x[0] != 'a' or x[0] != 'e' or x[0] != 'i' or x[0] != 'o' or x[0] != 'u',\n                                    x[0] != 'l' or x[1] != 'l', x))\n    return ' '.join(sorted_list)\n\n\ndef sort_sentence(sentence: str) -> str:\n    \"\"\" Input is string containing a sentence with the last word having an exclamation mark.\n    Return the sentence with the words in ascending order of their length.\n    If two words are the same length, sort them alphabetically.\n    \"\"\"\n    sentence_list = sentence.split()\n    sentence_list.sort(key=lambda x: (len(x), x))\n    return ' '.join(sentence_list)\n\n\ndef sort_i_o_words(sentence: str) -> str:\n    \"\"\" Input is a string containing a sentence.\n    Return the same sentence, but with all 'io' words (that is, words containing at least two occurrences of letters 'i'\n    or 'o' in sequence) in alphabetical order.\n    Words with only one occurrence of letters 'i' or 'o' in sequence should remain as they are.\n    >>> sort_i_o_words('is2 Thi1s T4est in!')\n    'is2 in Thi"
    },
    {
      "rank": 12,
      "score": 10.0,
      "candidate": "nums = numbers.split()\n    return ' '.join(sorted(nums))\n\n\ndef check_pangram(sentence: str) -> bool:\n    \"\"\" Check if the input string is a pangram\n    A pangram is a sentence containing all letters of the alphabet at least once\n    Return True if the input string is a pangram, False otherwise\n    >>> check_pangram('The quick brown fox jumps over the lazy dog')\n    True\n    \"\"\"\n    return len(set(sentence.lower())) == 26\n\n\ndef check_palindrome(sentence: str) -> bool:\n    \"\"\" Check if the input string is a palindrome\n    A palindrome is a string that reads the same backward as forward\n    Return True if the input string is a palindrome, False otherwise\n    >>> check_palindrome('racecar')\n    True\n    \"\"\"\n    return sentence.lower() == sentence.lower()[::-1]\n\n\ndef check_anagram(word1: str, word2: str) -> bool:\n    \"\"\" Check if the input words are anagrams\n    An anagram is a word or phrase formed by rearranging the letters of a different word or phrase\n    Return True if the input words are anagrams, False otherwise\n    >>> check_anagram('racecar', 'carear')\n    True\n    \"\"\"\n    return sorted(word1.lower()) == sorted(word2.lower())\n\n\ndef check_vowel_count(sentence: str, vowel_count: int) -> bool:\n    \"\"\" Check if the input sentence has the desired number of vowels (a, e, i, o, u)\n    Return True if the input sentence has the desired number of vowels, False otherwise\n    >>> check_vowel_count('The quick brown fox jumps over the lazy dog', 5)\n    True\n    \"\"\"\n    return sentence.count('a') + sentence.count('e') + sentence.count('i') + sentence.count('o') + sentence.count(\n        'u') == vowel_count\n\n\ndef check_sentence_spelling(sentence: str) -> bool:\n    \"\"\" Check if the"
    },
    {
      "rank": 13,
      "score": 10.0,
      "candidate": "# Split input into a list of numberals\n    numberals = numbers.split()\n\n    # Sort numberals by their value\n    numberals.sort(key=lambda x: NUMBERALS.index(x))\n\n    return ' '.join(numberals)\n\n\ndef sort_letters(letters: str) -> str:\n    \"\"\" Input is a space-delimited string of letters in alphabetical order\n    Return the string with letters sorted in reverse alphabetical order\n    >>> sort_letters('a c e')\n    'e c a'\n    \"\"\"\n    # Split input into a list of letters\n    letters = list(letters)\n\n    # Sort letters by their value\n    letters.sort(reverse=True)\n\n    return ' '.join(letters)\n\n\ndef sort_sentence(sentence: str) -> str:\n    \"\"\" Input is a string containing a sentence with multiple words\n    Return the sentence with the words sorted by length, shortest to longest\n    >>> sort_sentence('is2 Thi1s T4est 3a')\n    'Thi1s is2 3a T4est'\n    \"\"\"\n    # Split input into a list of words\n    words = sentence.split()\n\n    # Sort words by their length\n    words.sort(key=lambda x: len(x))\n\n    return ' '.join(words)\n\n\ndef sort_array(array: List[int]) -> List[int]:\n    \"\"\" Input is an array of integers\n    Return the same array sorted from smallest to largest without using any built-in sorting functions\n    >>> sort_array([5, 3, 2, 1, 4])\n    [1, 2, 3, 4, 5]\n    \"\"\"\n    # Iterate through array, replacing each number with a tuple of the number and its index\n    for i in range(len(array)):\n        for j in range(i + 1, len(array)):\n            if array[i] > array[j]:\n                array[i], array[j] = array[j], array[i]\n\n    return array\n\n\ndef sort_backward_sentence(sentence: str) -> str:\n    \"\"\""
    },
    {
      "rank": 14,
      "score": 10.0,
      "candidate": "numbers_list = numbers.split()\n    sorted_list = sorted(numbers_list, key=get_number)\n    return ' '.join(sorted_list)\n\n\ndef get_number(number: str) -> int:\n    \"\"\" Return a number for sorting from a string.\n    >>> get_number('five')\n    5\n    \"\"\"\n    number_dict = {\n        'zero': 0,\n        'one': 1,\n        'two': 2,\n        'three': 3,\n        'four': 4,\n        'five': 5,\n        'six': 6,\n        'seven': 7,\n        'eight': 8,\n        'nine': 9,\n    }\n    return number_dict[number]\n\n\ndef sort_numbers_2(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers_2('three one five')\n    'one three five'\n    \"\"\"\n    numbers_list = numbers.split()\n    sorted_list = sorted(numbers_list, key=get_number_2)\n    return ' '.join(sorted_list)\n\n\ndef get_number_2(number: str) -> int:\n    \"\"\" Return a number for sorting from a string.\n    >>> get_number_2('five')\n    5\n    \"\"\"\n    number_dict = {\n        'zero': 0,\n        'one': 1,\n        'two': 2,\n        'three': 3,\n        'four': 4,\n        'five': 5,\n        'six': 6,\n        'seven': 7,\n        'eight': 8,\n        'nine': 9,\n    }\n    return number_dict.get(number, 0)\n\n\ndef sort_numbers_3(numbers: str) -> str:\n    \"\"\" Input"
    },
    {
      "rank": 15,
      "score": 10.0,
      "candidate": "num_dict = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4,\n                'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9}\n    num_list = numbers.split()\n    num_list.sort(key=lambda x: num_dict[x])\n    return ' '.join(num_list)\n\n\ndef sort_sentence(sentence: str) -> str:\n    \"\"\" Input is a string of words.\n    Return the string with the words sorted alphabetically\n    >>> sort_sentence('is2 Thi1s T4est 3a')\n    'Thi1s 3a is2 T4est'\n    \"\"\"\n    word_list = sentence.split()\n    word_list.sort(key=lambda x: x[1:])\n    return ' '.join(word_list)\n\n\ndef sort_name(name: str) -> str:\n    \"\"\" Input is string of name in the form 'first last'.\n    Return a string with the name sorted, first by last name, then by first name\n    >>> sort_name('Lionel Messi')\n    'Messi Lionel'\n    \"\"\"\n    name_list = name.split()\n    name_list.sort(key=lambda x: x[1:])\n    name_list.sort(key=lambda x: x[0])\n    return ' '.join(name_list)\n\n\ndef multi_sort(num_list: List[int]) -> List[int]:\n    \"\"\" Input is a list of integers.\n    Return the list with the numbers sorted first by even, then by odd, then by number value\n    >>> multi_sort([5, 6, 7, 8])\n    [6, 8, 5, 7]\n    \"\"\"\n    even_list = []\n    odd_list = []\n    for num in num_list:\n        if num % 2 == 0:\n            even_list.append(num)\n        else:\n            odd_list.append(num)\n    even_list.sort()\n    odd"
    },
    {
      "rank": 16,
      "score": 10.0,
      "candidate": "if numbers == '':\n        return ''\n    numbers_list = numbers.split()\n    sorted_list = sorted(numbers_list, key=lambda x: ord(x[0]))\n    return ' '.join(sorted_list)\n\n\ndef sort_words(words: str) -> str:\n    \"\"\" Input is a string of space-delimited words.\n    Return the string with words sorted alphabetically, case insensitive\n    >>> sort_words('almost apples Zebras')\n    'Zebras almost apples'\n    \"\"\"\n    if words == '':\n        return ''\n    words_list = words.split()\n    sorted_list = sorted(words_list)\n    return ' '.join(sorted_list)\n\n\ndef sort_sentence(sentence: str) -> str:\n    \"\"\" Input is a string containing a single sentence.\n    Return the string with the words sorted alphabetically, case insensitive\n    and with punctuation removed.\n    >>> sort_sentence('This is a sentence.')\n    'a is sentence This'\n    \"\"\"\n    if sentence == '':\n        return ''\n    words_list = sentence.replace('.', '').replace(',', '').replace(':', '').replace(';', '').split()\n    sorted_list = sorted(words_list)\n    return ' '.join(sorted_list)\n\n\ndef sort_names(names: str) -> str:\n    \"\"\" Input is a string containing names, separated by commas.\n    Capitalize all names and sort them alphabetically, case insensitive.\n    Return a comma-separated string containing the sorted names\n    >>> sort_names('amy, bob, CArefORg, xavier')\n    'amy, bob, Xavier, careforg'\n    \"\"\"\n    if names == '':\n        return ''\n    names_list = names.split(',')\n    sorted_list = sorted(names_list)\n    return ','.join(sorted_list)\n\n\ndef sort_the_letters(letters: str) -> str:\n    \"\"\" Input is a string containing alphabetical characters.\n    Return a string containing those characters in alphabetical order,\n    lowercase before uppercase"
    },
    {
      "rank": 17,
      "score": 10.0,
      "candidate": "numberals = ['zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine']\n    numbers_list = numbers.split()\n    numbers_list.sort(key=numberals.index)\n    return ' '.join(numbers_list)\n\n\ndef remove_duplicates(sentence: str) -> str:\n    \"\"\" Return the sentence with only unique letters\n    >>> remove_duplicates('alpha bravo bravo golf golf golf delta alpha')\n    'alpha bravo golf delta'\n    \"\"\"\n    return ' '.join(set(sentence.split()))\n\n\ndef is_palindrome(sentence: str) -> bool:\n    \"\"\" Return True if the string is a palindrome, False otherwise.\n    Ignore spaces and punctuation\n    >>> is_palindrome('A man, a plan, a cat, a ham, a yak, a yam, a hat, a canal-Panama!')\n    True\n    \"\"\"\n    clean_sentence = ''.join([c.lower() for c in sentence if c.isalnum()])\n    return clean_sentence == clean_sentence[::-1]\n\n\ndef is_anagram(sentence1: str, sentence2: str) -> bool:\n    \"\"\" Return True if the sentences are anagrams of each other, False otherwise.\n    Ignore spaces, punctuation and capitalization\n    >>> is_anagram('Almost quiet night, good eats, good read', 'Good night, good read, eats tgood, night almost mo')\n    True\n    \"\"\"\n    clean_sentence1 = ''.join([c.lower() for c in sentence1 if c.isalnum()])\n    clean_sentence2 = ''.join([c.lower() for c in sentence2 if c.isalnum()])\n    return sorted(clean_sentence1) == sorted(clean_sentence2)\n\n\ndef is_pangram(sentence: str) -> bool:\n    \"\"\" Return True if the sentence is a pangram (uses every letter of the alphabet at least once).\n    Ignore spaces and punctuation\n    >>> is_pangram('"
    },
    {
      "rank": 18,
      "score": 10.0,
      "candidate": "num_dict = {\n        'zero': 0,\n        'one': 1,\n        'two': 2,\n        'three': 3,\n        'four': 4,\n        'five': 5,\n        'six': 6,\n        'seven': 7,\n        'eight': 8,\n        'nine': 9,\n    }\n\n    num_list = numbers.split(' ')\n    num_list.sort(key=lambda x: num_dict[x])\n    return ' '.join(num_list)\n\n\nif __name__ == \"__main__\":\n    print(sort_numbers(\"three one five\"))"
    },
    {
      "rank": 19,
      "score": 10.0,
      "candidate": "numbers = numbers.split(' ')\n    numbers.sort(key=lambda x: len(x))\n    return ' '.join(numbers)\n\n\ndef get_middle(s: str) -> str:\n    \"\"\" Input is a string of odd length.\n    Return the middle character\n    >>> get_middle('middle')\n    'd'\n    \"\"\"\n    return s[len(s) // 2]\n\n\ndef get_hours(s: str) -> int:\n    \"\"\" Input is a string representing a 24-hour time.\n    Return the number of hours since midnight\n    >>> get_hours('10:25')\n    10\n    \"\"\"\n    return int(s.split(':')[0])\n\n\ndef get_largest_digit(s: str) -> int:\n    \"\"\" Input is a string of digits.\n    Return the largest digit\n    >>> get_largest_digit('1231230')\n    3\n    \"\"\"\n    return int(max(s))\n\n\ndef get_index(s: str, c: str) -> int:\n    \"\"\" Input is a string and a character.\n    Return the index of the first occurence of the character in the string.\n    If the character is not present, return -1.\n    >>> get_index('happy', 'p')\n    2\n    \"\"\"\n    return s.index(c) if c in s else -1\n\n\ndef get_count(s: str, c: str) -> int:\n    \"\"\" Input is a string and a character.\n    Return the number of occurences of the character in the string.\n    >>> get_count('happy', 'p')\n    2\n    \"\"\"\n    return s.count(c)\n\n\ndef get_position(s: str, c: str) -> str:\n    \"\"\" Input is a string and a character.\n    Return the string with the positions of the character in the string indicated by '*'.\n    If the character is not present, return the string unchanged.\n    >>> get_position('happy', 'p')\n    'h*p*p*y'\n    \"\"\"\n    return s.replace(c, '*')\n\n\ndef"
    },
    {
      "rank": 20,
      "score": 10.0,
      "candidate": "# TODO: check input for validity\n    # TODO: check for empty string\n    # TODO: sort the string and return it\n    return \" \".join(sorted(numbers.split(\" \")))\n\n\nif __name__ == \"__main__\":\n    print(sort_numbers(\"five three two\"))"
    },
    {
      "rank": 21,
      "score": 10.0,
      "candidate": "if numbers == '':\n        return ''\n\n    numbers_list = numbers.split()\n    for i in range(len(numbers_list)):\n        for j in range(i + 1, len(numbers_list)):\n            if get_number_value(numbers_list[i]) > get_number_value(numbers_list[j]):\n                numbers_list[i], numbers_list[j] = numbers_list[j], numbers_list[i]\n    return ' '.join(numbers_list)\n\n\ndef get_number_value(number: str) -> int:\n    \"\"\" Returns the value of the number in the string.\n    >>> get_number_value('zero')\n    0\n    >>> get_number_value('one')\n    1\n    \"\"\"\n    return {\n        'zero': 0,\n        'one': 1,\n        'two': 2,\n        'three': 3,\n        'four': 4,\n        'five': 5,\n        'six': 6,\n        'seven': 7,\n        'eight': 8,\n        'nine': 9\n    }[number]\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 22,
      "score": 10.0,
      "candidate": "if numbers == \"\":\n        return \"\"\n    lst = numbers.split()\n    lst = [int(x) for x in lst]\n    lst.sort()\n    lst = [str(x) for x in lst]\n    return \" \".join(lst)\n\n\ndef merge_files(files: List[str]) -> str:\n    \"\"\" Merge all files into a single string and return that string\n    \"\"\"\n    with open(files[0], 'r') as f:\n        data = f.read()\n    for f in files[1:]:\n        with open(f, 'r') as f:\n            data += f.read()\n    return data\n\n\ndef count_substring(string: str, sub_string: str) -> int:\n    \"\"\" Return the total number of non-overlapping occurrences of a substring in a string\n    >>> count_substring(\"Hello World\", \"ll\")\n    1\n    >>> count_substring(\"Helloworld\", \"ll\")\n    2\n    >>> count_substring(\"Helloworld\", \"H\")\n    1\n    \"\"\"\n    count = 0\n    for i in range(len(string) - len(sub_string) + 1):\n        if string[i: i + len(sub_string)] == sub_string:\n            count += 1\n    return count\n\n\ndef check_brackets(string: str) -> bool:\n    \"\"\" Return whether a string is a valid array of brackets\n    >>> check_brackets('(())')\n    True\n    >>> check_brackets('(]')\n    False\n    >>> check_brackets('(([[])')\n    False\n    \"\"\"\n    stack = []\n    for char in string:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if len(stack) == 0:\n                return False\n            stack.pop()\n    return len(stack) == 0\n\n\ndef merge_and_sort_files(files: List[str]) -> str:\n    \"\"\" Merge all files into a single string and sort it\n    \"\"\"\n    with open(files[0], 'r') as f:\n        data = f.read()\n    for"
    },
    {
      "rank": 23,
      "score": 10.0,
      "candidate": "if not numbers:\n        return ''\n    numbers_list = numbers.split()\n    numbers_list.sort(key=lambda x: 'zero one two three four five six seven eight nine'.index(x))\n    return ' '.join(numbers_list)\n\n\ndef get_common_elements(list1: List[int], list2: List[int]) -> List[int]:\n    \"\"\" Return a list with common elements between list1 and list2\n    >>> get_common_elements([1, 2, 3], [2, 4, 3])\n    [3, 2]\n    \"\"\"\n    return list(set(list1) & set(list2))\n\n\ndef get_common_elements_and_sort(list1: List[int], list2: List[int]) -> List[int]:\n    \"\"\" Return a list with common elements between list1 and list2, and sort them in ascending order\n    >>> get_common_elements_and_sort([1, 2, 3], [2, 4, 3])\n    [2, 3]\n    \"\"\"\n    return sorted(get_common_elements(list1, list2))\n\n\ndef remove_duplicate_words(text: str) -> str:\n    \"\"\" Return text with duplicate words removed\n    >>> remove_duplicate_words('alpha beta beta gamma gamma gamma delta alpha beta beta gamma gamma gamma delta')\n    'alpha beta gamma delta'\n    \"\"\"\n    return ' '.join(dict.fromkeys(text.split()))\n\n\ndef get_most_frequent_word(text: str) -> str:\n    \"\"\" Return the most frequent word in text\n    >>> get_most_frequent_word('alpha cat cat cat beta cat gamma cat delta cat gamma gamma gamma')\n    'cat'\n    \"\"\"\n    return max(set(text.split()), key=text.split().count)\n\n\ndef is_palindrome(text: str) -> bool:\n    \"\"\" Return True if text is a palindrome, False otherwise\n    >>> is_palindrome('radar')\n    True\n    \"\"\"\n    return text.replace(' ', '').lower() == text.replace(' ', '"
    },
    {
      "rank": 24,
      "score": 10.0,
      "candidate": "return ' '.join(sorted(numbers.split(), key=lambda x: int(x[1:])))\n\n\ndef sum_numbers(numbers: str) -> int:\n    \"\"\" Input is a space-delimited string of numbers.\n    Return the sum of those numbers as an integer.\n    >>> sum_numbers('1 12 123')\n    124\n    \"\"\"\n    return sum(map(int, numbers.split()))\n\n\ndef reverse_words(string: str) -> str:\n    \"\"\" Input is a string with one or more words.\n    Return the string with all words reversed.\n    >>> reverse_words('ClEopaR tRiE')\n    'RapCeolpE tEire'\n    \"\"\"\n    return ' '.join(reversed(string.split()))\n\n\ndef remove_duplicates(string: str) -> str:\n    \"\"\" Input is a string with one or more words.\n    Return the string with all duplicate words removed.\n    >>> remove_duplicates('word word word')\n    'word'\n    \"\"\"\n    return ' '.join(dict.fromkeys(string.split()))\n\n\ndef filter_out_caps(strings: List[str]) -> List[str]:\n    \"\"\" Input is a list of strings.\n    Return the list with all strings that contain at least one capital letter removed.\n    >>> filter_out_caps(['hello', 'world', 'Capitalized', 'Sentence'])\n    ['hello', 'world']\n    \"\"\"\n    return [s for s in strings if any(c.isupper() for c in s)]\n\n\ndef filter_out_non_alphanumeric(strings: List[str]) -> List[str]:\n    \"\"\" Input is a list of strings.\n    Return the list with all strings that contain at least one non-alphanumeric character removed.\n    >>> filter_out_non_alphanumeric(['hello', 'world', '123', '!@#$%^&*()'])\n    ['hello', 'world', '123']\n    \"\"\"\n    return [s for s in strings if s.isalnum()]\n\n\nif __name__ == \"__main__\":"
    },
    {
      "rank": 25,
      "score": 10.0,
      "candidate": "return ' '.join(sorted(numbers.split(), key=lambda x: int(x)))\n\n\ndef sum_digits(number: int) -> int:\n    \"\"\" Input is a positive integer.\n    Return the sum of the digits in the integer.\n    >>> sum_digits(10)\n    1\n    \"\"\"\n    return sum(map(int, str(number)))\n\n\ndef multiply_matrix(matrix: List[List[int]]) -> List[List[int]]:\n    \"\"\" Input is a matrix, represented as a list of lists of integers.\n    Each inner list represents a row, and each integer is a value in\n    that row.\n    Return the matrix multiplied by 2.\n    >>> multiply_matrix([[1, 2, 3], [4, 5, 6]])\n    [[2, 4, 6], [8, 10, 12]]\n    \"\"\"\n    return [[2 * element for element in row] for row in matrix]\n\n\ndef is_prime(number: int) -> bool:\n    \"\"\" Input is a positive integer.\n    Return whether the input is a prime number.\n    >>> is_prime(10)\n    False\n    \"\"\"\n    for i in range(2, number):\n        if number % i == 0:\n            return False\n    return True\n\n\ndef is_palindrome(string: str) -> bool:\n    \"\"\" Input is a string.\n    Return whether the string is a palindrome.\n    >>> is_palindrome('racecar')\n    True\n    \"\"\"\n    return string == string[::-1]\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 26,
      "score": 10.0,
      "candidate": "# TODO: implement\n    return ''\n\n\ndef sort_sentence(sentence: str) -> str:\n    \"\"\" Input is string that ends in a period.\n    Return the string with the words in increasing order by length.\n    If two words are the same length, shorten the list by rule.\n    If two words are still the same length, list alphabetically.\n    >>> sort_sentence('ramona was a grand lady')\n    'a lady grand ramona'\n    \"\"\"\n    # TODO: implement\n    return ''\n\n\ndef sort_list(alist: List[str]) -> List[str]:\n    \"\"\" Input is a list of strings.\n    Return the list in sorted order.\n    Sort first by length of the string, then alphabetically if two strings are the same length.\n    >>> sort_list(['apple', 'cat', 'dog', 'banana', 'fish'])\n    ['dog', 'fish', 'banana', 'apple', 'cat']\n    \"\"\"\n    # TODO: implement\n    return []\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod(verbose=True)"
    },
    {
      "rank": 27,
      "score": 9.963994939209833,
      "candidate": "num_list = numbers.split()\n    for i in range(len(num_list)):\n        for j in range(i + 1, len(num_list)):\n            if num_list[i] > num_list[j]:\n                num_list[i], num_list[j] = num_list[j], num_list[i]\n    return ' '.join(num_list)\n\n\ndef sort_names(names: str) -> str:\n    \"\"\" Input is a space-delimited string of names.\n    Return the string with names sorted alphabetically, case insensitive.\n    >>> sort_names('Carol Doe John')\n    'Doe John Carol'\n    \"\"\"\n    name_list = names.split()\n    for i in range(len(name_list)):\n        for j in range(i + 1, len(name_list)):\n            if name_list[i] > name_list[j]:\n                name_list[i], name_list[j] = name_list[j], name_list[i]\n    return ' '.join(name_list)\n\n\ndef sort_names_case_insensitive(names: str) -> str:\n    \"\"\" Input is a space-delimited string of names.\n    Return the string with names sorted alphabetically, case insensitive.\n    >>> sort_names_case_insensitive('Carol Doe John')\n    'Carol Doe John'\n    \"\"\"\n    name_list = names.split()\n    for i in range(len(name_list)):\n        for j in range(i + 1, len(name_list)):\n            if name_list[i].lower() > name_list[j].lower():\n                name_list[i], name_list[j] = name_list[j], name_list[i]\n    return ' '.join(name_list)\n\n\ndef sort_names_case_insensitive_desc(names: str) -> str:\n    \"\"\" Input is a space-delimited string of names.\n    Return the string with names sorted alphabetically, case insensitive, in descending order.\n    >>> sort_names_case_insensitive"
    },
    {
      "rank": 28,
      "score": 9.94217585880588,
      "candidate": "numberals = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6, 'seven': 7, 'eight': 8,\n                 'nine': 9}\n    numbers = [numberals[i] for i in numbers.split()]\n    numbers.sort()\n    return ' '.join([str(i) for i in numbers])\n\n\ndef sort_sentence(sentence: str) -> str:\n    \"\"\" Input is a string that may or may not contain the letter 'e'.\n    If it does, it is guaranteed to be the only letter 'e'.\n    Return the string with the letter 'e' at the end of the string.\n    >>> sort_sentence('eidi')\n    'dieei'\n    \"\"\"\n    return sentence.replace('e', '').replace('i', 'e').replace('e', 'i')\n\n\ndef sort_date(date: str) -> str:\n    \"\"\" Input is a string of the format \"DD/MM/YYYY\".\n    Return the string in the format \"MM/DD/YYYY\".\n    >>> sort_date('09/04/2020')\n    '04/09/2020'\n    \"\"\"\n    day, month, year = date.split('/')\n    return f'{month}/{day}/{year}'\n\n\ndef sort_names(names: str) -> str:\n    \"\"\" Input is a string of names, each name separated from the next by a comma.\n    Return the string with the names sorted first by surname (in ascending order),\n    then by first name (in ascending order).\n    If two or more names belong to the same surname, sort them by first name.\n    >>> sort_names('Bart Simpson,Lisa Simpson,Homer Simpson')\n    'Homer Simpson,Lisa Simpson,Bart Simpson'\n    \"\"\"\n    names = names.split(',')\n    names.sort(key=lambda x: (x.split(' ')[-1], x.split(' ')[0]))\n    return ','.join(names)"
    },
    {
      "rank": 29,
      "score": 9.907170511668092,
      "candidate": "number_dict = {\n        'zero': 0,\n        'one': 1,\n        'two': 2,\n        'three': 3,\n        'four': 4,\n        'five': 5,\n        'six': 6,\n        'seven': 7,\n        'eight': 8,\n        'nine': 9\n    }\n    return ' '.join(sorted([number_dict[number] for number in numbers.split()]))\n\n\ndef find_missing_letter(chars: str) -> str:\n    \"\"\" Input is a string of alphabetical characters (upper and lower case) with no punctuation and no numbers.\n    Return the next character in the alphabet after the last one provided.\n    >>> find_missing_letter('abcdefghijklmnopqrstuvwxyz')\n    'a'\n    \"\"\"\n    return chr(ord(chars[-1]) + 1)\n\n\ndef make_tags(tags: str) -> str:\n    \"\"\" Input is a string of comma-delimited tags (no spaces) consisting of 3 to 10 lowercase letters.\n    Return a comma-delimited string of those tags with the tags in alphabetical order, but each tag changed to title case.\n    >>> make_tags('innovation, technology, creativity')\n    'Creativity, Innovation, Technology'\n    \"\"\"\n    return ', '.join(sorted(tags.split(',')))\n\n\ndef find_vowels(text: str) -> str:\n    \"\"\" Input is a string of text.\n    Return a comma-delimited string of the vowels found in that text in alphabetical order.\n    >>> find_vowels('Supercalifragilisticexpialidocious')\n    'a, i, o, u'\n    \"\"\"\n    return ', '.join(sorted(list(set(text.lower()) & set('aeiou'))))\n\n\ndef remove_duplicate_words(sentence: str) -> str:\n    \"\"\" Input is a string of words delimited by spaces.\n    Return the string with the duplicated words removed and each word only once.\n    Words are case sensitive and each leading"
    },
    {
      "rank": 30,
      "score": 9.890164056081243,
      "candidate": "if numbers == '':\n        return numbers\n    else:\n        numbers_list: List[str] = numbers.split()\n        numbers_list.sort(key=str.lower)\n        return ' '.join(numbers_list)\n\n\ndef sort_names(names: str) -> str:\n    \"\"\" Input is a space-delimited string of names.\n    Return the string with names sorted alphabetically, ignoring case.\n    >>> sort_names('Alice Bob Carol')\n    'Alice Bob Carol'\n    \"\"\"\n    if names == '':\n        return names\n    else:\n        names_list: List[str] = names.split()\n        names_list.sort()\n        return ' '.join(names_list)\n\n\ndef sort_names_case_insensitive(names: str) -> str:\n    \"\"\" Input is a space-delimited string of names.\n    Return the string with names sorted alphabetically, case insensitive.\n    >>> sort_names_case_insensitive('Alice Bob Carol')\n    'Alice Bob Carol'\n    \"\"\"\n    if names == '':\n        return names\n    else:\n        names_list: List[str] = names.split()\n        names_list.sort(key=str.lower)\n        return ' '.join(names_list)\n\n\ndef sort_names_case_insensitive_reverse(names: str) -> str:\n    \"\"\" Input is a space-delimited string of names.\n    Return the string with names sorted alphabetically, case insensitive, in reverse order.\n    >>> sort_names_case_insensitive_reverse('Alice Bob Carol')\n    'Carol Bob Alice'\n    \"\"\"\n    if names == '':\n        return names\n    else:\n        names_list: List[str] = names.split()\n        names_list.sort(key=str.lower, reverse=True)\n        return ' '.join(names_list)\n\n\ndef sort_names_number(names: str) -> str:\n    \"\"\" Input is a space-delimited string of names.\n    Return the string with names sorted by number of characters in name,\n    from longest to shortest."
    },
    {
      "rank": 31,
      "score": 9.88293152152541,
      "candidate": "# Split the string into a list of strings, each string being a number.\n    number_list: List[str] = numbers.split()\n\n    # Sort the list of numbers\n    number_list.sort(key=lambda n: int(n))\n\n    # Return a string with the numbers in sorted order.\n    return \" \".join(number_list)\n\n\ndef sort_letters(letters: str) -> str:\n    \"\"\" Input is a space-delimited string of letters from 'a' to 'z'.\n    Return the string with letters sorted from smallest to largest\n    >>> sort_letters('a z c')\n    'a c z'\n    \"\"\"\n    # Split the string into a list of strings, each string being a letter.\n    letter_list: List[str] = letters.split()\n\n    # Sort the list of letters\n    letter_list.sort(key=lambda l: ord(l))\n\n    # Return a string with the letters in sorted order.\n    return \" \".join(letter_list)\n\n\ndef sort_names(names: str) -> str:\n    \"\"\" Input is a space-delimited string of names.\n    Return the string with names sorted from smallest to largest by last name, then first name.\n    >>> sort_names('Bob Smith, John Smith, Bob Jones')\n    'Bob Jones, Bob Smith, John Smith'\n    \"\"\"\n    # Split the string into a list of strings, each string being a name.\n    name_list: List[str] = names.split()\n\n    # Sort the list of names\n    name_list.sort(key=lambda n: n.split(\",\")[0])\n\n    # Return a string with the names in sorted order.\n    return \" \".join(name_list)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 32,
      "score": 9.882923312638333,
      "candidate": "number_list = numbers.split()\n    sorted_list = sorted(number_list)\n    return ' '.join(sorted_list)\n\n\ndef remove_duplicates(string: str) -> str:\n    \"\"\" Input is a string with any number of duplicates. Remove all duplicates and return the string in alphabetical order.\n    >>> remove_duplicates('taco cat ate the taco cat taco cat')\n    'ate cat taco'\n    \"\"\"\n    string = string.split()\n    string = sorted(set(string))\n    return ' '.join(string)\n\n\ndef count_letters(string: str) -> int:\n    \"\"\" Input is a string with lowercase letters. Return the number of occurrences of each letter.\n    >>> count_letters('aaabbbbccccde')\n    {'a': 3, 'b': 4, 'c': 4, 'd': 1, 'e': 1}\n    \"\"\"\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    dict_alphabet = {letter: 0 for letter in alphabet}\n    for letter in string:\n        dict_alphabet[letter] += 1\n    return dict_alphabet\n\n\ndef count_letters_2(string: str) -> List[int]:\n    \"\"\" Input is a string with lowercase letters. Return a list with the number of occurrences of each letter.\n    >>> count_letters_2('aaabbbbccccde')\n    [3, 4, 4, 1, 1]\n    \"\"\"\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    dict_alphabet = {letter: 0 for letter in alphabet}\n    for letter in string:\n        dict_alphabet[letter] += 1\n    return [dict_alphabet[letter] for letter in alphabet]\n\n\ndef count_letters_3(string: str) -> List[int]:\n    \"\"\" Input is a string with lowercase letters. Return a list with the number of occurrences of each letter.\n    >>> count_letters_2('aaabbbbccccde')\n    [3, 4, 4,"
    },
    {
      "rank": 33,
      "score": 9.850496324767066,
      "candidate": "numbers_list: List[str] = numbers.split()\n    numbers_list.sort(key=lambda x: ord(x) - ord('a'))\n    return ' '.join(numbers_list)\n\n\nif __name__ == \"__main__\":\n    print(sort_numbers('three one five'))"
    },
    {
      "rank": 34,
      "score": 9.849448152205355,
      "candidate": "# sort_list = []\n    # for number in numbers.split():\n    #     if number == 'zero':\n    #         sort_list.append(0)\n    #     elif number == 'one':\n    #         sort_list.append(1)\n    #     elif number == 'two':\n    #         sort_list.append(2)\n    #     elif number == 'three':\n    #         sort_list.append(3)\n    #     elif number == 'four':\n    #         sort_list.append(4)\n    #     elif number == 'five':\n    #         sort_list.append(5)\n    #     elif number == 'six':\n    #         sort_list.append(6)\n    #     elif number == 'seven':\n    #         sort_list.append(7)\n    #     elif number == 'eight':\n    #         sort_list.append(8)\n    #     elif number == 'nine':\n    #         sort_list.append(9)\n    # return \" \".join(str(i) for i in sorted(sort_list))\n    sort_list = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n    for number in numbers.split():\n        if number == 'zero':\n            sort_list.remove(0)\n        elif number == 'one':\n            sort_list.remove(1)\n        elif number == 'two':\n            sort_list.remove(2)\n        elif number == 'three':\n            sort_list.remove(3)\n        elif number == 'four':\n            sort_list.remove(4)\n        elif number == 'five':\n            sort_list.remove(5)\n        elif number == 'six':\n            sort_list.remove(6)\n        elif number == 'seven':\n            sort_list.remove(7)\n        elif number == 'eight':\n            sort_list.remove(8)\n        elif number == 'nine':\n            sort_list.remove(9)\n    return \" \".join(str(i) for i in sort_list)\n\n\nif __"
    },
    {
      "rank": 35,
      "score": 9.845393812074393,
      "candidate": "result = ''\n    num_list = numbers.split()\n    num_list.sort(key=lambda x: int(x))\n    for i in range(len(num_list)):\n        if i == len(num_list) - 1:\n            result += num_list[i]\n        else:\n            result += num_list[i] + ' '\n    return result\n\n\ndef sort_sentence(sentence: str) -> str:\n    \"\"\" Input is a string containing a single word and an integer.\n    The integer is the length of the word to be sorted.\n    Return the string with the word sorted in alphabetical order, with the smallest letters first.\n    >>> sort_sentence('banana 4')\n    'ananab'\n    \"\"\"\n    result = ''\n    word = sentence.split()[0]\n    num = int(sentence.split()[1])\n    word_list = list(word)\n    word_list.sort()\n    word_list = word_list[:num]\n    for i in range(len(word_list)):\n        if i == len(word_list) - 1:\n            result += word_list[i]\n        else:\n            result += word_list[i] + ' '\n    return result\n\n\ndef sort_array(array: List[int]) -> List[int]:\n    \"\"\" Input is an array of integers.\n    Return the array with the integers sorted from smallest to largest.\n    >>> sort_array([1, 2, 3, 4, 5])\n    [1, 2, 3, 4, 5]\n    \"\"\"\n    return sorted(array)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 36,
      "score": 9.807458859791842,
      "candidate": "return ' '.join(sorted(numbers.split()))\n\n\ndef sort_sentence(sentence: str) -> str:\n    \"\"\" Input is a sentence with words separated by single spaces.\n    Return the sentence with the words sorted alphabetically\n    >>> sort_sentence('is2 Thi1s T4est 3a')\n    'Thi1s is2 3a T4est'\n    \"\"\"\n    return ' '.join(sorted(sentence.split()))\n\n\ndef sort_name(name: str) -> str:\n    \"\"\" Input is string in the form 'first last'.\n    Return a string with the name sorted alphabetically but with the last name first\n    >>> sort_name('Robert Paulson')\n    'Paulson Robert'\n    \"\"\"\n    return ' '.join(sorted(name.split(), key=lambda x: x[::-1]))\n\n\ndef sort_galaxy(galaxy: str) -> str:\n    \"\"\" Input is a string with the names of galaxies separated by single spaces.\n    Return the string with the names sorted by the number of their planets\n    >>> sort_galaxy('Andromeda Milkyway Virgo')\n    'Milkyway Andromeda Virgo'\n    \"\"\"\n    return ' '.join(sorted(galaxy.split(), key=lambda x: len(x), reverse=True))\n\n\ndef sort_galaxy_by_distance(galaxies: str) -> str:\n    \"\"\" Input is a string with the names of galaxies separated by single spaces and the distance to earth in light years\n    in parentheses.\n    Return the string with the names of the galaxies sorted by distance from earth\n    >>> sort_galaxy_by_distance('Milkyway (8) Andromeda (2) Virgo (1000)')\n    'Virgo (1000) Andromeda (2) Milkyway (8)'\n    \"\"\"\n    return ' '.join(sorted(galaxies.split(), key=lambda x: int(x.split('(')[1][:-1])))\n\n\ndef merge_sort(items: List) -> List:\n    \"\"\"\n    >>> merge_sort([0, 5, 3, 2, 2])\n    [0"
    },
    {
      "rank": 37,
      "score": 9.769680614520107,
      "candidate": "valid_numbers = ['zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine']\n    numbers_list = numbers.split()\n    numbers_list.sort(key=valid_numbers.index)\n    return \" \".join(numbers_list)\n\n\ndef sort_sentence(sentence: str) -> str:\n    \"\"\" Input is string that includes a single word or sentence.\n    Return the same string, but with the words sorted in alphabetical order.\n    If two or more words are the same length, sort these words alphabetically by the first appearance of the word in the original sentence.\n    >>> sort_sentence('Hello there fellow warriors')\n    'fellow Hello there warriors'\n    \"\"\"\n    words = sentence.split()\n    words.sort(key=lambda word: sentence.index(word))\n    return \" \".join(words)\n\n\ndef sort_capitalization(sentence: str) -> str:\n    \"\"\" Input is a string that includes a single word or sentence.\n    Return the same string, but with all words sorted in alphabetical order,\n    and any words that are the same length are sorted alphabetically by their first letter.\n    If two or more words are the same length, sort these words alphabetically by the first appearance of the word in the original sentence.\n    >>> sort_capitalization('Hello there, fellow Warriors')\n    'fellow Hello there, Warriors'\n    \"\"\"\n    words = sentence.split()\n    words.sort(key=lambda word: (len(word), sentence.index(word)))\n    return \" \".join(words)\n\n\ndef sort_vowels(sentence: str) -> str:\n    \"\"\" Input is a string that includes a single word or sentence.\n    Return the same string, but with all vowels removed.\n    Words are separated by a single space.\n    If two or more words are the same length, sort these words alphabetically by the first appearance of the word in the original sentence.\n    >>> sort_vowels('He has eaten all of the pie.')\n    'Hs tll p.'\n    \"\"\"\n    words = sentence.split()\n    for word in"
    },
    {
      "rank": 38,
      "score": 9.765262807032524,
      "candidate": "# split into a list of strings\n    numbers_list = numbers.split()\n\n    # convert each string to a number\n    numbers_list = [convert_to_int(i) for i in numbers_list]\n\n    # sort the list\n    numbers_list.sort()\n\n    # convert the list back to a string\n    numbers_list = [convert_to_str(i) for i in numbers_list]\n\n    # return a string with the list elements separated by spaces\n    return ' '.join(numbers_list)\n\n\ndef convert_to_int(number: str) -> int:\n    \"\"\" Return the integer value of a numberal from 'zero' to 'nine'.\n    >>> convert_to_int('zero')\n    0\n    \"\"\"\n    numberal_to_int = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9}\n    return numberal_to_int[number]\n\n\ndef convert_to_str(number: int) -> str:\n    \"\"\" Return the numberal from 'zero' to 'nine' that corresponds to the given integer.\n    >>> convert_to_str(1)\n    'one'\n    \"\"\"\n    int_to_numberal = {0: 'zero', 1: 'one', 2: 'two', 3: 'three', 4: 'four', 5: 'five', 6: 'six', 7: 'seven', 8: 'eight', 9: 'nine'}\n    return int_to_numberal[number]\n\n\nif __name__ == \"__main__\":\n    # Run the doctests in this module with:\n    # python -m doctest -v sort_numbers.py\n    # Or run them in the Python shell with:\n    # >>> import doctest\n    # >>> doctest.testmod(sort_numbers)\n\n    print(sort_numbers('three one five'))\n    print(sort_numbers('one five five three'))\n    print(sort"
    },
    {
      "rank": 39,
      "score": 9.760412881077356,
      "candidate": "# TODO: write me!\n    return ''\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 40,
      "score": 9.740864890863175,
      "candidate": "numbers_list = numbers.split()\n    numbers_int_list = list(map(int, numbers_list))\n    numbers_int_list.sort()\n    return ' '.join(map(str, numbers_int_list))\n\n\ndef sort_characters(chars: str) -> str:\n    \"\"\" Input is a string with repeating characters.\n    Return the string with characters sorted from smallest to largest by frequency.\n    If the frequency is the same, sort the characters alphabetically.\n    If the frequency and character are the same, sort these characters alphabetically.\n    >>> sort_characters('eeeditor')\n    'eideorr'\n    \"\"\"\n    if len(chars) == 1:\n        return chars\n\n    chars_list = list(chars)\n    chars_dict = {}\n    for char in chars_list:\n        if char in chars_dict:\n            chars_dict[char] += 1\n        else:\n            chars_dict[char] = 1\n\n    chars_dict_sorted = sorted(chars_dict.items(), key=lambda x: x[1])\n    chars_dict_sorted_list = [item for item in chars_dict_sorted]\n\n    chars_sorted = ''\n    while chars_sorted_list_index < len(chars_sorted_list):\n        chars_sorted += ''.join([char[0] for char in chars_sorted_list if char[1] == chars_sorted_list[chars_sorted_list_index][1]])\n        chars_sorted_list_index += 1\n\n    return chars_sorted\n\n\ndef sort_sentence(sentence: str) -> str:\n    \"\"\" Input is a string containing a single sentence with no punctuation.\n    Return the string with the words sorted by length,\n    and then alphabetically if the words are the same length.\n    >>> sort_sentence('banana apple apple')\n    'apple apple banana'\n    \"\"\"\n    sentence_list = sentence.split()\n    sentence_list_sorted = sorted(sentence_list, key=len)\n    return ' '.join(sentence_list_sorted)\n\n\ndef sort_names(names: str) -> str:"
    },
    {
      "rank": 41,
      "score": 9.699146693885302,
      "candidate": "nums = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n    nums_dict = {num: i for i, num in enumerate(nums)}\n    nums_list = [nums_dict[i] for i in numbers.split()]\n    nums_list.sort()\n    return \" \".join([str(nums[i]) for i in nums_list])\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()\n    print(sort_numbers(\"one two three\"))\n    print(sort_numbers(\"five four three two one\"))\n    print(sort_numbers(\"seven six five four three two one\"))\n    print(sort_numbers(\"nine eight seven six five four three two one\"))\n    print(sort_numbers(\"ten nine eight seven six five four three two one\"))"
    },
    {
      "rank": 42,
      "score": 9.677440122697439,
      "candidate": "return ' '.join(sorted(numbers.split(), key=lambda x: int(x[1:])))\n\n\ndef is_prime(num: int) -> bool:\n    \"\"\"Return True if num is a prime number, False otherwise\n    >>> is_prime(2)\n    True\n    >>> is_prime(4)\n    False\n    \"\"\"\n    if num == 2:\n        return True\n    if num < 2 or num % 2 == 0:\n        return False\n    for i in range(3, int(num ** 0.5) + 1, 2):\n        if num % i == 0:\n            return False\n    return True\n\n\ndef is_perfect(num: int) -> bool:\n    \"\"\"Return True if num is a perfect number, False otherwise\n    A perfect number is a positive integer that is equal to the sum of its positive divisors, excluding itself\n    >>> is_perfect(6)\n    True\n    >>> is_perfect(28)\n    False\n    \"\"\"\n    if num <= 0:\n        return False\n    divisors = []\n    for i in range(1, num):\n        if num % i == 0:\n            divisors.append(i)\n    return sum(divisors) == num\n\n\ndef is_palindrome(num: int) -> bool:\n    \"\"\"Return True if num is a palindrome, False otherwise\n    A palindrome is a number that reads the same forward and backward\n    >>> is_palindrome(121)\n    True\n    >>> is_palindrome(123)\n    False\n    \"\"\"\n    return str(num) == str(num)[::-1]\n\n\ndef is_pangram(sentence: str) -> bool:\n    \"\"\"Return True if sentence contains all letters of the English alphabet at least once, False otherwise\n    A pangram is a sentence that contains all letters of the English alphabet at least once\n    >>> is_pangram('The quick brown fox jumps over the lazy dog')\n    True\n    >>> is_pangram('How many letters are there?')\n    False\n    \"\"\"\n    return set(sentence.lower())"
    },
    {
      "rank": 43,
      "score": 9.640077895802646,
      "candidate": "# TODO: implement\n    return \"one three five\"\n\n\nif __name__ == \"__main__\":\n    sort_numbers(input())"
    },
    {
      "rank": 44,
      "score": 9.595753198553407,
      "candidate": "words = numbers.split()\n    numbers = [int(word) for word in words]\n    numbers.sort()\n    return ' '.join([str(number) for number in numbers])\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 45,
      "score": 9.58039123838868,
      "candidate": "return ' '.join(sorted(numbers.split(), key=lambda x: [int(num) for num in x.split() if num]))\n\n\ndef filter_out_common_elements(list_of_strings: List[str]) -> List[str]:\n    \"\"\"Filter out common elements from a list of strings\n    >>> filter_out_common_elements(['one', 'two', 'three', 'four', 'one', 'two'])\n    ['three', 'four']\n    \"\"\"\n    return list(set(list_of_strings))\n\n\ndef remove_duplicates(list_of_strings: List[str]) -> List[str]:\n    \"\"\"Remove duplicates from a list of strings\n    >>> remove_duplicates(['one', 'two', 'three', 'four', 'one', 'two'])\n    ['one', 'two', 'three', 'four']\n    \"\"\"\n    return list(set(list_of_strings))\n\n\ndef remove_duplicates_2(list_of_strings: List[str]) -> List[str]:\n    \"\"\"Remove duplicates from a list of strings\n    >>> remove_duplicates(['one', 'two', 'three', 'four', 'one', 'two'])\n    ['one', 'two', 'three', 'four']\n    \"\"\"\n    return list(dict.fromkeys(list_of_strings))\n\n\ndef remove_duplicates_3(list_of_strings: List[str]) -> List[str]:\n    \"\"\"Remove duplicates from a list of strings\n    >>> remove_duplicates(['one', 'two', 'three', 'four', 'one', 'two'])\n    ['one', 'two', 'three', 'four']\n    \"\"\"\n    return list(map(list_of_strings.remove, list_of_strings))\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 46,
      "score": 9.545987962239394,
      "candidate": "num_dict = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6, 'seven': 7, 'eight': 8,\n                'nine': 9}\n    nums = numbers.split()\n    return ' '.join(sorted(nums, key=lambda num: num_dict[num]))\n\n\ndef sort_names(names: str) -> str:\n    \"\"\" Input is a space-delimited string of names.\n    Return the string with names sorted alphabetically (case-insensitive)\n    >>> sort_names('Carolynn John Mark')\n    'Carolynn John Mark'\n    \"\"\"\n    return ' '.join(sorted(names.split(), key=lambda name: name.lower()))\n\n\ndef is_palindrome(word: str) -> bool:\n    \"\"\" Input is a string of lowercase letters.\n    Return whether the word is a palindrome (reads the same forwards and backwards)\n    >>> is_palindrome('racecar')\n    True\n    \"\"\"\n    return word.lower() == word[::-1].lower()\n\n\ndef find_unmatched_parens(line: str) -> List[int]:\n    \"\"\" Input is a string with possible unmatched opening and closing parentheses.\n    Return the indices of the unmatched opening parentheses\n    >>> find_unmatched_parens('(())')\n    []\n    >>> find_unmatched_parens('())')\n    [0]\n    >>> find_unmatched_parens('((())')\n    [1]\n    \"\"\"\n    parens = []\n    for i in range(len(line)):\n        if line[i] == '(':\n            parens.append(i)\n        elif line[i] == ')':\n            if not parens:\n                parens.append(i)\n            else:\n                parens.pop()\n    return parens\n\n\ndef sum_digits(n: int) -> int:\n    \"\"\" Input is an integer.\n    Return the sum of the digits in the integer.\n    >>> sum"
    },
    {
      "rank": 47,
      "score": 9.47114453552205,
      "candidate": "num_dict = {\n        'zero': 0,\n        'one': 1,\n        'two': 2,\n        'three': 3,\n        'four': 4,\n        'five': 5,\n        'six': 6,\n        'seven': 7,\n        'eight': 8,\n        'nine': 9,\n    }\n    num_list = numbers.split()\n    num_list.sort(key=lambda x: num_dict[x])\n    return ' '.join(num_list)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 48,
      "score": 9.446832512996986,
      "candidate": "numbers = numbers.split()\n    numbers = [int(num) for num in numbers]\n    numbers.sort()\n    numbers = [str(num) for num in numbers]\n    return \" \".join(numbers)\n\n\ndef sort_names(names: str) -> str:\n    \"\"\" Input is a space-delimited string of names.\n    Return the string with names sorted alphabetically, except 'wesson' comes before 'wells'\n    >>> sort_names('wesson wells james')\n    'james wells wesson'\n    \"\"\"\n    names = names.split()\n    names.sort()\n    names.insert(2, names.pop(names.index('wesson')))\n    return \" \".join(names)\n\n\ndef count_sheeps(sheep: List[bool]) -> int:\n    \"\"\" Count how many 'True' values are in the given list\n    >>> count_sheeps([True, True, False])\n    2\n    \"\"\"\n    return sheep.count(True)\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 49,
      "score": 9.389578175014488,
      "candidate": "# Base case\n    if numbers == 'zero':\n        return numbers\n    # Recursive case\n    else:\n        # Find the first space\n        # Loop through the string from the first space to the end\n        # If the current element is smaller than the previous element, swap it with the previous element\n        # If the current element is bigger than the previous element, break\n        # Return the string from the first space to the end\n        # Recurse on the string from the first space to the beginning\n        # Recurse on the string from the beginning to the first space\n        return numbers.split(' ')[1] + ' ' + sort_numbers(numbers.split(' ')[0]) + ' ' + sort_numbers(numbers.split(' ')[2:])\n\n\ndef sort_words(words: str) -> str:\n    \"\"\" Input is a string of words delimited by a space.\n    Return the string with words sorted alphabetically\n    >>> sort_words('cat dog zoo')\n    'cat dog zoo'\n    \"\"\"\n    # Base case\n    if words == '':\n        return words\n    # Recursive case\n    else:\n        # Split the string\n        # Sort the list\n        # Join the list\n        # Recurse on the string without the first word\n        return words.split(' ')[1] + ' ' + sort_words(words.split(' ')[0]) + ' ' + sort_words(words.split(' ')[2:])\n\n\ndef sort_sentence(sentence: str) -> str:\n    \"\"\" Input is a string containing a single sentence.\n    Return the string with the words sorted alphabetically\n    >>> sort_sentence('the quick brown fox jumped over the lazy dog')\n    'brown dog fox jumped lazy over quick the the'\n    \"\"\"\n    # Base case\n    if sentence == '':\n        return sentence\n    # Recursive case\n    else:\n        # Split the string\n        # Sort the list\n        # Join the list\n        # Recurse on the string without the last word\n        return sentence.split(' ')[1] + ' ' + sort_sentence(sentence.split(' ')[0]) + ' ' + sort_sentence(sentence"
    },
    {
      "rank": 50,
      "score": 9.335906975550785,
      "candidate": "numbers = numbers.split()\n    numbers.sort(key=lambda x: int(x))\n    return ' '.join(numbers)\n\n\ndef sort_words(words: str) -> str:\n    \"\"\" Input is a space-delimited string of words.\n    Return the string with words sorted from smallest to largest by number of characters.\n    >>> sort_words('cat dog apple')\n    'apple cat dog'\n    \"\"\"\n    words = words.split()\n    words.sort(key=len)\n    return ' '.join(words)\n\n\ndef sort_sentence(sentence: str) -> str:\n    \"\"\" Input is string sentence containing numbers, words and punctuation marks.\n    Return the string with words and punctuation marks sorted from smallest to largest by number of characters.\n    >>> sort_sentence('This is a sentence, with many words and number88 12 three4 four five.')\n    'three4, four, five, number88, This, is, a, sentence, with, many, words'\n    \"\"\"\n    words = sentence.split()\n    words.sort(key=len)\n    return ' '.join(words)\n\n\ndef sort_array(array: List[int]) -> List[int]:\n    \"\"\" Input is an array of numbers.\n    Return the array with numbers sorted from smallest to largest.\n    >>> sort_array([5, 3, 2, 1, 6])\n    [1, 2, 3, 5, 6]\n    \"\"\"\n    array.sort()\n    return array\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 51,
      "score": 9.287625906893272,
      "candidate": "numbers_list = numbers.split()\n    numbers_list.sort(key=lambda x: int(x))\n    return ' '.join(numbers_list)\n\n\nif __name__ == \"__main__\":\n    print(sort_numbers(\"one five three\"))"
    },
    {
      "rank": 52,
      "score": 9.137541083743484,
      "candidate": "# Get a list of the numbers from the string\n    nums = [num for num in numbers.split()]\n\n    # Create a dictionary of the numbers\n    num_dict = {\n        'zero': 0,\n        'one': 1,\n        'two': 2,\n        'three': 3,\n        'four': 4,\n        'five': 5,\n        'six': 6,\n        'seven': 7,\n        'eight': 8,\n        'nine': 9,\n    }\n\n    # Sort the list of numbers\n    nums.sort(key=lambda num: num_dict[num])\n\n    # Join the list of numbers into a string\n    return ' '.join(nums)\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 53,
      "score": 9.118479922318633,
      "candidate": "num_dict = {\n        'zero': 0,\n        'one': 1,\n        'two': 2,\n        'three': 3,\n        'four': 4,\n        'five': 5,\n        'six': 6,\n        'seven': 7,\n        'eight': 8,\n        'nine': 9\n    }\n    num_list = numbers.split()\n    num_list.sort(key=lambda x: num_dict[x])\n    return ' '.join(num_list)\n\n\ndef sort_sentence(sentence: str) -> str:\n    \"\"\" Input is a string containing a sentence with no spaces.\n    Return the same sentence, but sorted alphabetically.\n    >>> sort_sentence('going')\n    'egoing'\n    \"\"\"\n    return ''.join(sorted(sentence))\n\n\ndef sort_name(name: str) -> str:\n    \"\"\" Input is a string containing a name.\n    Return the name, but the last name is first.\n    >>> sort_name('Robert Burns')\n    'Burns Robert'\n    \"\"\"\n    name_list = name.split()\n    name_list.sort()\n    name_list.reverse()\n    return ' '.join(name_list)\n\n\ndef sort_galaxy(galaxy: str) -> str:\n    \"\"\" Input is a string containing the name of a galaxy.\n    Return the same name, but with the prefix 'Milky ' added, and the suffix ' Way' appended.\n    >>> sort_galaxy('Andromeda')\n    'Milky Andromeda Way'\n    \"\"\"\n    return 'Milky ' + galaxy + ' Way'\n\n\ndef compute_age(age: int) -> str:\n    \"\"\" Input is an integer representing the person's age.\n    Return a string that says: You are YEARS old.\n    Assume that the age will always be a positive integer.\n    >>> compute_age(10)\n    'You are 10 years old.'\n    \"\"\"\n    return f'You are {age} years old.'\n\n\ndef compute_sum(number_list: List[int]) ->"
    },
    {
      "rank": 54,
      "score": 9.0433598776711,
      "candidate": "return ' '.join(sorted(numbers.split(), key=sort_key))\n\n\ndef sort_key(s: str) -> int:\n    \"\"\" Return the index of s in the ordered list of string representations of integers from 0 to 9.\n    >>> sort_key('zero')\n    0\n    >>> sort_key('three')\n    3\n    \"\"\"\n    return {\n        'zero': 0,\n        'one': 1,\n        'two': 2,\n        'three': 3,\n        'four': 4,\n        'five': 5,\n        'six': 6,\n        'seven': 7,\n        'eight': 8,\n        'nine': 9,\n    }[s]\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 55,
      "score": 9.023362597095627,
      "candidate": "# your code here\n    words = numbers.split()\n    numbers = [int(word) for word in words]\n    numbers.sort()\n    return \" \".join(map(str, numbers))\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 56,
      "score": 9.007965491315414,
      "candidate": "nums = [num for num in numbers.split()]\n    nums.sort(key=lambda x: num_to_int(x))\n    return \" \".join(nums)\n\n\ndef num_to_int(num: str) -> int:\n    \"\"\" Convert a number to a int\n    >>> num_to_int('zero')\n    0\n    >>> num_to_int('nine')\n    9\n    \"\"\"\n    nums = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9}\n    return nums[num]\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 57,
      "score": 8.835579668145444,
      "candidate": "# Convert string to list\n    numbers_list: List[str] = numbers.split()\n    # Sort list\n    numbers_list.sort()\n    # Convert list to string\n    return \" \".join(numbers_list)\n\n\nif __name__ == \"__main__\":\n    print(sort_numbers(\"three one five\"))"
    },
    {
      "rank": 58,
      "score": 8.825914267767946,
      "candidate": "# create a list of the numbers\n    num_list = numbers.split()\n    # use the built in sort function to sort the list\n    num_list.sort()\n    # join the list back together\n    sorted_nums = ' '.join(num_list)\n    return sorted_nums\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 59,
      "score": 8.815751616664494,
      "candidate": "# Split the input string into a list of numberals\n    numbers_list = numbers.split()\n    # Return the list sorted\n    return ' '.join(sorted(numbers_list))\n\n\ndef sort_numbers_list(numbers: List[str]) -> List[str]:\n    \"\"\" Input is a list of strings, where each string is a number from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the list with numbers sorted from smallest to largest\n    >>> sort_numbers_list(['three', 'one', 'five'])\n    ['one', 'three', 'five']\n    \"\"\"\n    # Return the list sorted\n    return sorted(numbers)\n\n\nif __name__ == \"__main__\":\n    print(sort_numbers(\"three one five\"))\n    print(sort_numbers_list([\"three\", \"one\", \"five\"]))"
    },
    {
      "rank": 60,
      "score": 8.789018088517437,
      "candidate": "# convert to list of numbers\n    number_list = []\n    for num in numbers.split():\n        number_list.append(int(num))\n\n    # sort the list\n    number_list.sort()\n\n    # convert to string\n    new_string = ''\n    for num in number_list:\n        new_string += f'{num} '\n\n    return new_string\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 61,
      "score": 8.783143227994213,
      "candidate": "# Check if input is a string\n    if not isinstance(numbers, str):\n        return \"Input is not a string\"\n\n    # Check if input is empty\n    if len(numbers) == 0:\n        return \"Input is empty\"\n\n    # Check if all characters in input are numbers\n    if not set(numbers).issubset({\"zero\", \"one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\", \"eight\", \"nine\"}):\n        return \"Input contains invalid characters\"\n\n    # Check if any characters in input are repeated\n    if len(set(numbers)) != len(numbers):\n        return \"Input contains repeated characters\"\n\n    # Convert input to a list of numbers\n    numbers_list: List[str] = numbers.split()\n\n    # Sort the list of numbers\n    numbers_list.sort(key=lambda x: int(x))\n\n    # Convert the list of numbers back to a string\n    sorted_numbers: str = \" \".join(numbers_list)\n\n    return sorted_numbers\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 62,
      "score": 8.748548371063277,
      "candidate": "numbers = numbers.split()\n    numbers = [int(i) for i in numbers]\n    numbers.sort()\n    numbers = [str(i) for i in numbers]\n    return ' '.join(numbers)\n\n\nif __name__ == '__main__':\n    print(sort_numbers(\"one five three\"))"
    },
    {
      "rank": 63,
      "score": 8.72839529423102,
      "candidate": "numbers_list: List[str] = numbers.split()\n    numbers_list.sort()\n    return ' '.join(numbers_list)\n\n\nif __name__ == \"__main__\":\n    numbers = input('Enter numbers: ')\n    print(sort_numbers(numbers))"
    },
    {
      "rank": 64,
      "score": 8.690127447955128,
      "candidate": "numbers = numbers.split()\n    for _ in range(len(numbers)):\n        for i in range(len(numbers)):\n            if numbers[i] > numbers[i + 1]:\n                numbers[i], numbers[i + 1] = numbers[i + 1], numbers[i]\n    return \" \".join(numbers)\n\n\ndef sort_sentence(sentence: str) -> str:\n    \"\"\" Input is a string containing a single sentence with no punctuation.\n    The sentence is made of words delimited by a single space.\n    The words are made of one or more lowercase letters.\n    Return the sentence with the words sorted by the sum of the unicode code points of the letters in each word.\n    If two words have the same sum of unicode code points, the words should be ordered by the number of letters in the word.\n    If two words have both the same sum of unicode code points and the same number of letters,\n    the words should be ordered by the number of occurences of the letter 'e' (case insensitive) in each word.\n    If two words have the same sum of unicode code points, the same number of letters and the same number of occurences of the letter 'e' (case insensitive)\n    return the words in the same order as in the input sentence.\n    >>> sort_sentence('the dog is hairy')\n    'the dog is hairy'\n    \"\"\"\n    sentence = sentence.split()\n    for _ in range(len(sentence)):\n        for i in range(len(sentence)):\n            if sum(ord(letter) for letter in sentence[i]) > sum(ord(letter) for letter in sentence[i + 1]):\n                sentence[i], sentence[i + 1] = sentence[i + 1], sentence[i]\n            elif sum(ord(letter) for letter in sentence[i]) == sum(ord(letter) for letter in sentence[i + 1]):\n                if len(sentence[i]) > len(sentence[i + 1]):\n                    sentence[i], sentence[i + 1] = sentence[i + 1], sentence[i]\n                elif len(sentence[i]) == len(sentence["
    },
    {
      "rank": 65,
      "score": 8.684089203541701,
      "candidate": "return ' '.join(sorted([num for num in numbers.split() if num in ['zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine']]))\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 66,
      "score": 8.634353394696387,
      "candidate": "# check for valid input\n    if not numbers:\n        return ''\n    if not numbers.isalpha():\n        return ''\n    numbers_list = numbers.split()\n    # check for valid input\n    for number in numbers_list:\n        if number not in ('zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine'):\n            return ''\n    # convert numbers to integers\n    numbers_list = [int(number[1]) for number in numbers_list]\n    numbers_list.sort()\n    # convert numbers back to string\n    numbers_list = [str(number) for number in numbers_list]\n    return ' '.join(numbers_list)\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 67,
      "score": 8.571583211584775,
      "candidate": "# get the list of numbers\n    nums: List[str] = numbers.split()\n    # sort the list\n    nums.sort()\n    # return the sorted string\n    return ' '.join(nums)\n\n\ndef sort_fruits(fruits: str) -> str:\n    \"\"\" Input is a space-delimited string of fruits.\n    Return the string with fruits sorted from largest to smallest\n    >>> sort_fruits('orange banana kiwi mango apple')\n    'mango apple kiwi banana orange'\n    \"\"\"\n    # get the list of fruits\n    fruits_list: List[str] = fruits.split()\n    # sort the list\n    fruits_list.sort(key=lambda word: -len(word))\n    # return the sorted string\n    return ' '.join(fruits_list)\n\n\ndef sort_names(names: str) -> str:\n    \"\"\" Input is a space-delimited string of names.\n    Return the string with names sorted from largest to smallest.\n    Names must be lowercase and do not contain any punctuation.\n    Names that are the same except for punctuation are considered the same name.\n    For example, 'hermione' and 'hermione?' are the same name.\n    The first letter of each name is capitalized.\n    All other letters in the name are lowercase.\n    >>> sort_names('Harry Potter Ron Weasley')\n    'Ron Weasley Harry Potter'\n    \"\"\"\n    # get the list of names\n    names_list: List[str] = names.split()\n    # sort the list\n    names_list.sort(key=lambda word: word.lower())\n    # return the sorted string\n    return ' '.join(names_list)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 68,
      "score": 8.566082355018528,
      "candidate": "# break input into a list of strings\n    num_list = numbers.split()\n    # break each string into a list of chars\n    for i in range(len(num_list)):\n        num_list[i] = list(num_list[i])\n    # create a new list of lists of chars\n    new_list = []\n    for num in num_list:\n        new_list.append(num)\n    # sort each list of chars\n    for i in range(len(new_list)):\n        new_list[i].sort()\n    # re-join each list of chars into a string\n    for i in range(len(new_list)):\n        new_list[i] = ''.join(new_list[i])\n    # join all the strings into one big string\n    return ' '.join(new_list)\n\n\nif __name__ == \"__main__\":\n    print(sort_numbers(\"three one five\"))"
    },
    {
      "rank": 69,
      "score": 8.56435551312052,
      "candidate": "# breakpoint()\n    # make a list of numbers\n    num_list = numbers.split()\n    # make a list of numberals\n    num_dict = {\n        'zero': 0,\n        'one': 1,\n        'two': 2,\n        'three': 3,\n        'four': 4,\n        'five': 5,\n        'six': 6,\n        'seven': 7,\n        'eight': 8,\n        'nine': 9,\n    }\n    # sort the list of numbers\n    num_list.sort(key=lambda x: num_dict[x])\n    # return a string of numbers\n    return ' '.join(num_list)\n\n\nif __name__ == \"__main__\":\n    # print(sort_numbers('three one five'))\n    # print(sort_numbers('one five five seven seven'))\n    # print(sort_numbers('zero zero five five'))\n    print(sort_numbers('three one five four four seven seven'))"
    },
    {
      "rank": 70,
      "score": 8.560715957504696,
      "candidate": "words = numbers.split()\n    nums = []\n    for word in words:\n        if word in ['zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine']:\n            nums.append(word)\n\n    nums.sort()\n    sorted_words = []\n    for num in nums:\n        sorted_words.append(num)\n        sorted_words.append(' ')\n    return ''.join(sorted_words[:-1])\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 71,
      "score": 8.521723974596204,
      "candidate": "# Your code here\n    # numbers = input('Enter a list of numbers: ').split()\n    number_list = []\n    for item in numbers.split(' '):\n        number_list.append(item)\n    number_list.sort(key=lambda number: number_list.index(number))\n    return ' '.join(number_list)\n\n\nif __name__ == \"__main__\":\n    # Run the tester\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 72,
      "score": 8.507850708484733,
      "candidate": "# TODO: write your code here\n    return \" \".join(sorted(numbers.split()))\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 73,
      "score": 8.439450471291408,
      "candidate": "# convert the string to a list of numbers\n    number_list: List[int] = [int(x) for x in numbers.split()]\n\n    # sort the list in place\n    number_list.sort()\n\n    # convert the list back to a string\n    number_string: str = ' '.join(str(x) for x in number_list)\n\n    return number_string\n\n\ndef main():\n    print(sort_numbers('five three one'))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 74,
      "score": 8.431188809973763,
      "candidate": "# check if there are any invalid values in the input\n    if set(numbers.split()).difference({'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine'}):\n        return 'Invalid input'\n\n    # convert the string into a list of numbers\n    nums = list(map(lambda x: int(x), numbers.split()))\n\n    # sort the list of numbers\n    nums.sort()\n\n    # convert the list of numbers back to a string\n    return ' '.join(map(str, nums))\n\n\nif __name__ == \"__main__\":\n    # print(sort_numbers('three one five'))\n    # print(sort_numbers('seven two five four one'))\n    # print(sort_numbers('one two three four five six seven eight nine ten'))\n    # print(sort_numbers('zero one two three four five six seven eight nine ten eleven twelve'))\n    print(sort_numbers('zero one two three four five six seven eight nine ten eleven twelve thirteen fourteen fifteen'))"
    },
    {
      "rank": 75,
      "score": 8.393286653011106,
      "candidate": "# Create a list of numbers from string\n    numbers = numbers.split()\n    numbers = [int(i) for i in numbers]\n\n    # Sort list\n    numbers.sort()\n\n    # Turn list back into string\n    numbers = [str(i) for i in numbers]\n    numbers = ' '.join(numbers)\n\n    return numbers\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 76,
      "score": 8.360907213264426,
      "candidate": "numbers_list: List[str] = numbers.split()\n    numbers_list.sort()\n    return ' '.join(numbers_list)\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()\n    print(sort_numbers('zero three two'))"
    },
    {
      "rank": 77,
      "score": 8.336517757020932,
      "candidate": "# split string into list of words\n    num_list: List[str] = numbers.split()\n    # convert words to numbers\n    num_list = [str(num_list.index(n)) for n in num_list]\n    # sort the list of numbers\n    num_list.sort()\n    # convert numbers to words\n    num_list = [num_list[int(n)] for n in num_list]\n    # return string of numbers\n    return ' '.join(num_list)\n\n\nif __name__ == \"__main__\":\n    print(sort_numbers(\"three one five\"))"
    },
    {
      "rank": 78,
      "score": 8.272979898103834,
      "candidate": "nums = numbers.split()\n    nums.sort(key=dict(zip(nums, range(10))).get)\n    return ' '.join(nums)\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 79,
      "score": 8.27212443562345,
      "candidate": "number_list = numbers.split(' ')\n    sorted_list = sorted(number_list)\n    return ' '.join(sorted_list)\n\n\ndef sort_sentence(sentence: str) -> str:\n    \"\"\" Input is a sentence with numbers in it.\n    Return the same sentence with the numbers in order from smallest to largest.\n    Precondition: the numbers are all in the range from 'zero' to 'nine' inclusive.\n    >>> sort_sentence('is2 thi1s3 t4est 3333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333"
    },
    {
      "rank": 80,
      "score": 8.258794338318166,
      "candidate": "# create a list of numbers\n    num_list = [x for x in numbers.split()]\n    # create a list of numbers as integers\n    int_list = [int(x) for x in num_list]\n    # sort the numbers in place\n    int_list.sort()\n    # recreate the string of numbers\n    return ' '.join([str(x) for x in int_list])\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 81,
      "score": 8.24843316905064,
      "candidate": "numbers = numbers.split()\n    for i in range(len(numbers)):\n        for j in range(len(numbers) - 1):\n            if ord(numbers[j][0]) > ord(numbers[j + 1][0]):\n                numbers[j], numbers[j + 1] = numbers[j + 1], numbers[j]\n    return \" \".join(numbers)\n\n\nif __name__ == \"__main__\":\n    numbers = \"five four one two three\"\n    print(sort_numbers(numbers))"
    },
    {
      "rank": 82,
      "score": 8.243022836370127,
      "candidate": "# check input\n    # if numbers == None:\n    #     raise ValueError('Input is None')\n    # for num in numbers:\n    #     if num not in ['zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine']:\n    #         raise ValueError('Numbers is invalid')\n    # sort the numbers\n    num_list = numbers.split(' ')\n    num_list.sort()\n    return ' '.join(num_list)\n\n\nif __name__ == \"__main__\":\n    print(sort_numbers('five three one'))"
    },
    {
      "rank": 83,
      "score": 8.236398058625285,
      "candidate": "pass\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 84,
      "score": 8.222208129174486,
      "candidate": "numbers_list: List[str] = numbers.split(\" \")\n    for i in range(len(numbers_list)):\n        for j in range(i + 1, len(numbers_list)):\n            if numbers_list[i] > numbers_list[j]:\n                numbers_list[i], numbers_list[j] = numbers_list[j], numbers_list[i]\n    return \" \".join(numbers_list)\n\n\nif __name__ == \"__main__\":\n    print(sort_numbers(input()))"
    },
    {
      "rank": 85,
      "score": 8.19398330433124,
      "candidate": "num_list = numbers.split()\n    for i in range(len(num_list)):\n        for j in range(i + 1, len(num_list)):\n            if num_list[i] > num_list[j]:\n                num_list[i], num_list[j] = num_list[j], num_list[i]\n    return \" \".join(num_list)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 86,
      "score": 8.069696929920708,
      "candidate": "numbers = numbers.split()\n    return ' '.join(sorted(numbers, key=lambda x: int(number_to_int_mapping[x])))\n\n\nnumber_to_int_mapping = {\n    'zero': '0',\n    'one': '1',\n    'two': '2',\n    'three': '3',\n    'four': '4',\n    'five': '5',\n    'six': '6',\n    'seven': '7',\n    'eight': '8',\n    'nine': '9',\n}\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 87,
      "score": 8.018576820798193,
      "candidate": "numbers = numbers.split()\n    numbers = sorted(numbers, key=lambda x: list(x).index('one'))\n    return ' '.join(numbers)\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 88,
      "score": 8.001847993534597,
      "candidate": "number_list = numbers.split(' ')\n    for i in range(len(number_list)):\n        for j in range(len(number_list) - 1):\n            if number_list[j] == 'zero':\n                continue\n            elif number_list[j] == 'one':\n                continue\n            elif number_list[j] == 'two':\n                continue\n            elif number_list[j] == 'three':\n                continue\n            elif number_list[j] == 'four':\n                continue\n            elif number_list[j] == 'five':\n                continue\n            elif number_list[j] == 'six':\n                continue\n            elif number_list[j] == 'seven':\n                continue\n            elif number_list[j] == 'eight':\n                continue\n            elif number_list[j] == 'nine':\n                continue\n            elif number_list[j + 1] == 'zero':\n                continue\n            elif number_list[j + 1] == 'one':\n                continue\n            elif number_list[j + 1] == 'two':\n                continue\n            elif number_list[j + 1] == 'three':\n                continue\n            elif number_list[j + 1] == 'four':\n                continue\n            elif number_list[j + 1] == 'five':\n                continue\n            elif number_list[j + 1] == 'six':\n                continue\n            elif number_list[j + 1] == 'seven':\n                continue\n            elif number_list[j + 1] == 'eight':\n                continue\n            elif number_list[j + 1] == 'nine':\n                continue\n            elif number_list[j] == 'one' and number_list[j + 1] == 'two':\n                continue\n            elif number_list[j] == 'one' and number_list[j + 1] == 'three':\n                continue\n            elif number_list[j] == 'one' and number_list[j + 1] == 'four':\n                continue\n            elif number_list[j] == 'one' and number_list[j + 1] == 'five"
    },
    {
      "rank": 89,
      "score": 7.921892074950387,
      "candidate": "# Convert input string to list of strings\n    num_list = numbers.split()\n    # Convert strings to numbers\n    num_list = [int(x) for x in num_list]\n    # Sort list of numbers\n    num_list.sort()\n    # Convert list of numbers back to strings\n    num_list = [str(x) for x in num_list]\n    # Join list of strings into single string\n    return ' '.join(num_list)\n\n\nif __name__ == \"__main__\":\n    print(sort_numbers('three one five'))"
    },
    {
      "rank": 90,
      "score": 7.897391308008497,
      "candidate": "# TODO: implement\n    return ''\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 91,
      "score": 7.719366498608927,
      "candidate": "pass\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 92,
      "score": 7.709043946042114,
      "candidate": "num_dict = {\n        \"zero\": 0,\n        \"one\": 1,\n        \"two\": 2,\n        \"three\": 3,\n        \"four\": 4,\n        \"five\": 5,\n        \"six\": 6,\n        \"seven\": 7,\n        \"eight\": 8,\n        \"nine\": 9,\n    }\n    numbers_list = numbers.split(\" \")\n    numbers_list = [num_dict[i] for i in numbers_list]\n    numbers_list.sort()\n    numbers_list = [str(i) for i in numbers_list]\n    return \" \".join(numbers_list)\n\n\nif __name__ == \"__main__\":\n    print(sort_numbers(\"three one five\"))"
    },
    {
      "rank": 93,
      "score": 3.0,
      "candidate": "return \" \".join(sorted(numbers.split()))\n\n\ndef remove_duplicates(s: str) -> str:\n    \"\"\" Return a string with duplicates of all characters removed.\n    >>> remove_duplicates('hello')\n    'helo'\n    \"\"\"\n    return \"\".join(dict.fromkeys(s))\n\n\ndef remove_adjacent(s: str) -> str:\n    \"\"\" Return a string with all adjacent characters the same removed.\n    >>> remove_adjacent('Hello')\n    'Helo'\n    \"\"\"\n    return s[0] + \"\".join([s[i + 1] for i in range(len(s) - 1) if s[i] != s[i + 1]])\n\n\ndef count_code(s: str) -> int:\n    \"\"\" Count the number of times the letters aab occurs anywhere in string.\n    >>> count_code('aababcabc')\n    2\n    \"\"\"\n    return s.count('aab')\n\n\ndef count_hi(s: str) -> int:\n    \"\"\" Count the number of times the word 'hi' occurs anywhere in a string.\n    >>> count_hi('abc hi ho')\n    1\n    \"\"\"\n    return s.count('hi')\n\n\ndef end_other(a: str, b: str) -> str:\n    \"\"\" Consider dividing a string into two halves.\n    If the length is even, these two halves are the same string.\n    If the length is odd, we'll say that the extra character goes in the second half.\n    Return True if either half contains the substring 'x' and False otherwise.\n    >>> end_other('xx', 'xx')\n    True\n    \"\"\"\n    return a.endswith(b) or b.endswith(a)\n\n\ndef cat_dog(s: str) -> str:\n    \"\"\" Return True if the string contains either the string 'cat' or string 'dog' but not both.\n    >>> cat_dog('catdog')\n    False\n    \"\"\"\n    return 'cat' in s and 'dog' in s\n\n\ndef count_evens(nums: List[int]) -> int:\n    \"\"\" Return the number of even integers in a list"
    },
    {
      "rank": 94,
      "score": 3.0,
      "candidate": "return ' '.join(sorted(numbers.split(), key=lambda x: int(x[-1])))\n\n\ndef sum_of_numbers(numbers: str) -> int:\n    \"\"\" Input is a string of numbers seperated by spaces.\n    Return the sum of all the numbers as an integer\n    >>> sum_of_numbers('1 2 3')\n    6\n    \"\"\"\n    return sum(map(int, numbers.split()))\n\n\ndef remove_duplicate_words(sentence: str) -> str:\n    \"\"\" Input is a string of words seperated by spaces.\n    Return the string with duplicate words removed and words in the same order as before.\n    >>> remove_duplicate_words('alpha beta beta gamma gamma gamma delta alpha beta beta gamma gamma gamma delta')\n    'alpha beta gamma delta'\n    \"\"\"\n    return ' '.join(sorted(set(sentence.split()), key=sentence.index))\n\n\ndef merge_string_lists(lists: List[str]) -> str:\n    \"\"\" Input is a list of strings.\n    Return a string with all the characters from all the strings in the list.\n    >>> merge_string_lists(['a', 'b'])\n    'ab'\n    \"\"\"\n    return ''.join(lists)\n\n\ndef find_missing_letter(chars: str) -> str:\n    \"\"\" Input is a string of lowercase letters, including the first and last letters.\n    Return the missing letter in the string, which will always be a single, lowercase letter.\n    >>> find_missing_letter('abcde')\n    'b'\n    \"\"\"\n    return chr(ord(chars[0]) + 1 + ord(chars[-1]) - ord(chars[1]))\n\n\ndef find_vowels_sum(word: str) -> int:\n    \"\"\" Input is a lowercase string without any spaces or punctuation.\n    Return the sum of the positions of all vowels in the string, where position 1 is the first character in the string.\n    >>> find_vowels_sum('abcde')\n    15\n    \"\"\"\n    return sum([i + 1 for i, c in enumerate(word) if c"
    },
    {
      "rank": 95,
      "score": 3.0,
      "candidate": "numbers = numbers.split()\n    numbers.sort(key=dict(\n        zero=0,\n        one=1,\n        two=2,\n        three=3,\n        four=4,\n        five=5,\n        six=6,\n        seven=7,\n        eight=8,\n        nine=9,\n    ).get)\n    return ' '.join(numbers)\n\n\ndef get_longest_word(text: str) -> str:\n    \"\"\" Input is a string.\n    Return the longest word in the string.\n    If there are two or more words that are the same length, return the first one from the string.\n    \"\"\"\n    return max(text.split(), key=len)\n\n\ndef get_number_of_vowels(text: str) -> int:\n    \"\"\" Input is a string.\n    Return the number of vowels in the string.\n    Vowels are 'a', 'e', 'i', 'o', and 'u'.\n    \"\"\"\n    return len([char for char in text if char in 'aeiou'])\n\n\ndef get_number_of_vowels_without_regex(text: str) -> int:\n    \"\"\" Input is a string.\n    Return the number of vowels in the string.\n    Vowels are 'a', 'e', 'i', 'o', and 'u'.\n    \"\"\"\n    return len([char for char in text if char in 'aeiou' and char.isalpha()])\n\n\ndef get_number_of_uppercase_letters(text: str) -> int:\n    \"\"\" Input is a string.\n    Return the number of upper-case letters in the string.\n    \"\"\"\n    return len([char for char in text if char.isupper()])\n\n\ndef get_number_of_uppercase_letters_without_regex(text: str) -> int:\n    \"\"\" Input is a string.\n    Return the number of upper-case letters in the string.\n    \"\"\"\n    return len([char for char in text if char.isupper() and char.isalpha()])\n\n\ndef reverse_string(text: str) -> str:\n    \"\"\" Input is a string."
    },
    {
      "rank": 96,
      "score": 3.0,
      "candidate": "return ' '.join(sorted(numbers.split(' '), key=int))\n\n\ndef sum_numbers(numbers: str) -> int:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the sum of the numbers in the string\n    >>> sum_numbers('one four seven')\n    18\n    \"\"\"\n    return sum(int(num) for num in numbers.split(' '))\n\n\ndef count_vowels(sentence: str) -> int:\n    \"\"\" Input is a string.\n    Return the number of vowels in the string.\n    Vowels are 'a', 'e', 'i', 'o', 'u'.\n    >>> count_vowels('hello')\n    2\n    \"\"\"\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    return sum(1 for char in sentence if char in vowels)\n\n\ndef count_letters(sentence: str) -> int:\n    \"\"\" Input is a string.\n    Return the number of letters in the string.\n    Letters are all the characters in the string excluding spaces.\n    >>> count_letters('hello world')\n    10\n    \"\"\"\n    return len(sentence) - sentence.count(' ')\n\n\ndef count_words(sentence: str) -> int:\n    \"\"\" Input is a string.\n    Return the number of words in the string.\n    Words are space-delimited strings of characters.\n    >>> count_words('one two three')\n    3\n    \"\"\"\n    return len(sentence.split(' '))\n\n\ndef is_palindrome(sentence: str) -> bool:\n    \"\"\" Input is a string.\n    Return True if the string is a palindrome.\n    A palindrome is a string that is the same forwards as it is backwards.\n    >>> is_palindrome('racecar')\n    True\n    \"\"\"\n    return sentence.lower().replace(' ', '') == sentence.lower()"
    },
    {
      "rank": 97,
      "score": 3.0,
      "candidate": "return ' '.join(sorted(numbers.split(), key=lambda x: int(x.strip('one two three four five six seven eight nine zero'))))\n\n\ndef sort_numbers_2(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\n    return ' '.join(sorted(numbers.split(), key=lambda x: (int(x.strip('one two three four five six seven eight nine zero')))))\n\n\ndef sort_numbers_3(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\n    return ' '.join(sorted(numbers.split(), key=lambda x: int(''.join(sorted(x.strip('one two three four five six seven eight nine zero'))))))\n\n\ndef sort_numbers_4(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\n    return ' '.join(sorted(numbers.split(), key=lambda x: int(x.translate({ord('one'): '0', ord('two'): '1', ord('three'): '2', ord('four'): '3', ord('five'): '4', ord"
    },
    {
      "rank": 98,
      "score": 3.0,
      "candidate": "numbers_list = numbers.split()\n    numbers_list.sort()\n    return \" \".join(numbers_list)\n\n\ndef sum_of_numbers(numbers: str) -> int:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Return the sum of all the numbers in the string\n    >>> sum_of_numbers('one four seven')\n    18\n    \"\"\"\n    numbers_list = numbers.split()\n    total = 0\n    for i in numbers_list:\n        if i == \"zero\":\n            total += 0\n        elif i == \"one\":\n            total += 1\n        elif i == \"two\":\n            total += 2\n        elif i == \"three\":\n            total += 3\n        elif i == \"four\":\n            total += 4\n        elif i == \"five\":\n            total += 5\n        elif i == \"six\":\n            total += 6\n        elif i == \"seven\":\n            total += 7\n        elif i == \"eight\":\n            total += 8\n        elif i == \"nine\":\n            total += 9\n    return total\n\n\ndef count_letters(word: str) -> int:\n    \"\"\" Input is a string.\n    Return the number of letters in the string.\n    Ignore spaces and numbers\n    >>> count_letters('hello world')\n    5\n    \"\"\"\n    count = 0\n    for i in word:\n        if i.isalpha():\n            count += 1\n    return count\n\n\ndef count_unique_letters(word: str) -> int:\n    \"\"\" Input is a string.\n    Return the number of unique letters in the string.\n    Ignore spaces and numbers\n    >>> count_unique_letters('hello world')\n    4\n    \"\"\"\n    unique_letters = []\n    for i in word:\n        if i.isalpha():\n            if i not in unique_letters:\n                unique_letters.append(i)\n    return len(unique_letters)\n\n\ndef count_vowels(word: str) -> int:\n    \"\"\" Input is a string.\n    Return the number"
    },
    {
      "rank": 99,
      "score": 3.0,
      "candidate": "result = []\n    for i in numbers.split():\n        if i == 'zero':\n            result.append(0)\n        elif i == 'one':\n            result.append(1)\n        elif i == 'two':\n            result.append(2)\n        elif i == 'three':\n            result.append(3)\n        elif i == 'four':\n            result.append(4)\n        elif i == 'five':\n            result.append(5)\n        elif i == 'six':\n            result.append(6)\n        elif i == 'seven':\n            result.append(7)\n        elif i == 'eight':\n            result.append(8)\n        elif i == 'nine':\n            result.append(9)\n    return ' '.join(map(str, sorted(result)))\n\n\ndef sort_sentence(sentence: str) -> str:\n    \"\"\" Input is a sentence that may or may not contain numbers.\n    Return the sentence with all numbers at the end of the sentence and numbers sorted from smallest to largest.\n    Separate endings with a comma and space.\n    >>> sort_sentence('is2 thi1s3 a4 TEST sent5ence6')\n    'this is a TEST sentence, sent5, sent6, thi1'\n    \"\"\"\n    result = []\n    for i in sentence.split():\n        if i.isnumeric():\n            result.append(int(i))\n        else:\n            result.append(i)\n    return ' '.join(map(str, sorted(result)))\n\n\ndef sort_days(days: str) -> str:\n    \"\"\" Input is a string that may or may not contain the names of days of the week.\n    Return the string with the names of the days sorted from Monday to Sunday,\n    with the names of the days separated by a comma and a space.\n    If the input does not contain any days of the week, return an empty string.\n    >>> sort_days('Tue Wed Thu')\n    'Wed, Thu, Tue'\n    \"\"\"\n    result = []\n    for i in days.split():\n        if i == 'Mon':\n            result.append(1)"
    },
    {
      "rank": 100,
      "score": 3.0,
      "candidate": "return \" \".join(sorted(numbers.split(), key=lambda x: int(x.strip())))\n\n\ndef sort_sentence(sentence: str) -> str:\n    \"\"\" Input is a sentence with a maximum of 100 characters.\n    Return the sentence including spaces in a non-decreasing order of the number of consonants in the words\n    >>> sort_sentence('aaba cddcc e')\n    'e aaba cddcc'\n    \"\"\"\n    return \" \".join(sorted(sentence.split(), key=lambda x: sum(1 for char in x if char.isalpha() and char.lower() not in \"aeiou\")))\n\n\ndef sort_array(arr: List[int]) -> List[int]:\n    \"\"\" Input is an array of integers.\n    Return the array with the values sorted in ascending order.\n    >>> sort_array([1, 3, 2, 4, 5])\n    [1, 2, 3, 4, 5]\n    \"\"\"\n    return sorted(arr)\n\n\ndef count_positives_sum_negatives(arr: List[int]) -> List[int]:\n    \"\"\" Input is an array of integers.\n    Return an array of two integers,\n    the first being the count of positives values in the array and the second being the sum of negative values.\n    If the input array is empty, return [0, 0].\n    >>> count_positives_sum_negatives([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, -11, -12, -13, -14, -15])\n    [10, -65]\n    \"\"\"\n    if not arr:\n        return [0, 0]\n    pos, neg = 0, 0\n    for i in arr:\n        if i > 0:\n            pos += 1\n        elif i < 0:\n            neg += i\n    return [pos, neg]\n\n\ndef sort_by_last_letter(arr: List[str]) -> List[str]:\n    \"\"\" Input is an array of strings."
    }
  ]
}