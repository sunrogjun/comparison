{
  "timestamp": "2025-09-14T21:40:32.534901",
  "method": "improved_llm_judge",
  "judge_model": "codellama/CodeLlama-7b-Python-hf",
  "target_model": "codellama-7b",
  "dataset": "humaneval",
  "problem_number": 80,
  "total_candidates": 100,
  "results": [
    {
      "rank": 1,
      "score": 10.0,
      "candidate": "if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if s[i] == s[i + 1] or s[i] == s[i + 2] or s[i + 1] == s[i + 2]:\n            return False\n    return True\n\n\nif __name__ == \"__main__\":\n    print(is_happy(\"aabb\"))"
    },
    {
      "rank": 2,
      "score": 10.0,
      "candidate": "if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if s[i] == s[i + 1] or s[i] == s[i + 2] or s[i + 1] == s[i + 2]:\n            return False\n    return True\n\n\nif __name__ == \"__main__\":\n    print(is_happy(\"adb\"))"
    },
    {
      "rank": 3,
      "score": 10.0,
      "candidate": "if len(s)<3:\n        return False\n    if len(s)%3!=0:\n        return False\n    for i in range(0,len(s),3):\n        if s[i]==s[i+1] or s[i+1]==s[i+2] or s[i]==s[i+2]:\n            return False\n    return True\n\n\ndef is_happy_alt(s):\n    if len(s)<3:\n        return False\n    if len(s)%3!=0:\n        return False\n    for i in range(0,len(s),3):\n        if s[i]==s[i+1] or s[i+1]==s[i+2] or s[i]==s[i+2]:\n            return False\n    return True"
    },
    {
      "rank": 4,
      "score": 10.0,
      "candidate": "# 1. Check length\n    if len(s) < 3:\n        return False\n    # 2. Check if all three consecutive letters are distinct\n    for i in range(len(s)-2):\n        if s[i]==s[i+1] or s[i+1]==s[i+2] or s[i]==s[i+2]:\n            return False\n    return True\n\n\nprint(is_happy(\"xyy\"))\nprint(is_happy(\"adb\"))\nprint(is_happy(\"aaa\"))\nprint(is_happy(\"abc\"))\nprint(is_happy(\"abcc\"))\nprint(is_happy(\"abcd\"))\nprint(is_happy(\"aabb\"))\nprint(is_happy(\"aabbcc\"))\nprint(is_happy(\"aabbccd\"))\nprint(is_happy(\"aabbccde\"))\nprint(is_happy(\"aabbccdee\"))\nprint(is_happy(\"aabbccdeee\"))\nprint(is_happy(\"aabbccdeeee\"))\nprint(is_happy(\"aabbccdeeeee\"))\nprint(is_happy(\"aabbccdeeeeee\"))\nprint(is_happy(\"aabbccdeeeeeee\"))\nprint(is_happy(\"aabbccdeeeeeeee\"))\nprint(is_happy(\"aabbccdeeeeeeeee\"))\nprint(is_happy(\"aabbccdeeeeeeeeee\"))\nprint(is_happy(\"aabbccdeeeeeeeeeee\"))\nprint(is_happy(\"aabbccdeeeeeeeeeeee\"))\nprint(is_happy(\"aabbccdeeeeeeeeeeeee\"))\nprint(is_happy(\"aabbccdeeeeeeeeeeeeee\"))\nprint(is_happy(\"aabbccdeeeeeeeeeeeeeee\"))\nprint(is_happy(\"aabbccdeeeeeeeeeeeeeeee\"))\nprint(is_happy(\"aabbccdeeeeeeeeeeeeeeeee\"))\nprint(is_happy(\"aabbccdeeeeeeeeeeeeeee"
    },
    {
      "rank": 5,
      "score": 10.0,
      "candidate": "if len(s) < 3:\n        return False\n    if len(s) == 3:\n        if s[0] == s[1] or s[1] == s[2] or s[0] == s[2]:\n            return False\n        else:\n            return True\n    if len(s) == 4:\n        if s[0] == s[1] or s[2] == s[3] or s[0] == s[3]:\n            return False\n        else:\n            return True\n    for i in range(len(s)-3):\n        if s[i] == s[i+1] or s[i+1] == s[i+2] or s[i+2] == s[i+3]:\n            return False\n    return True\n\n\nif __name__ == \"__main__\":\n    print(is_happy(\"adb\"))"
    },
    {
      "rank": 6,
      "score": 10.0,
      "candidate": "if len(s) < 3:\n        return False\n    for i in range(0, len(s), 3):\n        if s[i] == s[i + 1] or s[i] == s[i + 2] or s[i + 1] == s[i + 2]:\n            return False\n    return True\n\n\nif __name__ == '__main__':\n    print(is_happy('adb'))"
    },
    {
      "rank": 7,
      "score": 10.0,
      "candidate": "if len(s) < 3:\n        return False\n\n    for i in range(len(s) - 2):\n        if s[i] == s[i + 1] or s[i] == s[i + 2] or s[i + 1] == s[i + 2]:\n            return False\n    return True"
    },
    {
      "rank": 8,
      "score": 10.0,
      "candidate": "# TODO: Write your code here\n    if len(s) < 3:\n        return False\n    s = list(s)\n    for i in range(len(s)):\n        s[i] = s[i] * 3\n    s = \"\".join(s)\n    s = list(s)\n    if len(s) < 3:\n        return False\n    return len(set(s)) == len(s)"
    },
    {
      "rank": 9,
      "score": 10.0,
      "candidate": "if len(s) < 3:\n        return False\n    for i in range(0, len(s) - 3):\n        if s[i] == s[i + 1] or s[i] == s[i + 2] or s[i] == s[i + 3] or s[i + 1] == s[i + 2] or s[i + 1] == s[i + 3] or s[\n            i + 2] == s[i + 3]:\n            return False\n    return True\n\n\nif __name__ == '__main__':\n    print(is_happy('adb'))"
    },
    {
      "rank": 10,
      "score": 10.0,
      "candidate": "if len(s) < 3:\n        return False\n    for i in range(0, len(s), 3):\n        if s[i] == s[i+1] or s[i+1] == s[i+2] or s[i] == s[i+2]:\n            return False\n    return True\n\n\nprint(is_happy('abc'))"
    },
    {
      "rank": 11,
      "score": 10.0,
      "candidate": "if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if s[i] == s[i + 1] or s[i] == s[i + 2] or s[i + 1] == s[i + 2]:\n            return False\n    return True\n\n\nprint(is_happy('abcd'))\nprint(is_happy('abc'))"
    },
    {
      "rank": 12,
      "score": 9.315015191163646,
      "candidate": "# check if the string length is at least 3\n    if len(s) < 3:\n        return False\n\n    # check if there are 3 consecutive distinct letters\n    for i in range(len(s) - 2):\n        if s[i] != s[i + 1] and s[i + 1] != s[i + 2] and s[i] != s[i + 2]:\n            return False\n\n    # if the string is happy, return True\n    return True\n\n\nprint(is_happy(\"adb\"))\nprint(is_happy(\"abc\"))\nprint(is_happy(\"xyy\"))\nprint(is_happy(\"adbcd\"))\nprint(is_happy(\"adxbc\"))\nprint(is_happy(\"adxbx\"))"
    },
    {
      "rank": 13,
      "score": 9.16732163068345,
      "candidate": "if len(s)<3:\n        return False\n    for i in range(len(s)-2):\n        if s[i]==s[i+1] or s[i]==s[i+2]:\n            return False\n    return True\n\nprint(is_happy(\"abc\"))"
    },
    {
      "rank": 14,
      "score": 9.139054645472957,
      "candidate": "return len(s) >= 3 and len(set(s[i:i+3] for i in range(len(s)-2))) == len(s)-2\n\n\nprint(is_happy('xyy'))"
    },
    {
      "rank": 15,
      "score": 9.081877257872732,
      "candidate": "if len(s) < 3:\n        return False\n\n    return len(set(s[i:i+3] for i in range(len(s)-2))) == len(s) - 2"
    },
    {
      "rank": 16,
      "score": 8.941291890767335,
      "candidate": "if len(s) < 3:\n        return False\n    if len(s) == 3:\n        return True\n    for i in range(0, len(s) - 3):\n        if s[i] == s[i + 1] or s[i] == s[i + 2] or s[i + 1] == s[i + 2]:\n            return False\n    return True\n\nprint(is_happy(\"abc\"))"
    },
    {
      "rank": 17,
      "score": 8.916104906453697,
      "candidate": "# check if the string is at least 3 characters long\n    if len(s) < 3:\n        return False\n    # check if the string has 3 consecutive characters\n    for i in range(len(s) - 2):\n        if s[i] == s[i + 1] and s[i + 1] == s[i + 2]:\n            return True\n    return False\n\n\nif __name__ == \"__main__\":\n    print(is_happy(\"adb\"))"
    },
    {
      "rank": 18,
      "score": 8.87468343976442,
      "candidate": "if len(s) < 3:\n        return False\n    for i in range(0, len(s)-2):\n        if s[i] == s[i+1] or s[i] == s[i+2] or s[i+1] == s[i+2]:\n            return False\n    return True\n\n\nif __name__ == '__main__':\n    print(is_happy(\"abcd\"))\n    print(is_happy(\"adb\"))\n    print(is_happy(\"xyy\"))"
    },
    {
      "rank": 19,
      "score": 8.8307386215008,
      "candidate": "return len(s) >= 3 and len(set(s[i:i+3] for i in range(0, len(s), 3))) == len(s) / 3\n\n\n\nprint(is_happy(\"adb\"))\nprint(is_happy(\"xyy\"))\nprint(is_happy(\"adb\"))\nprint(is_happy(\"xyy\"))"
    },
    {
      "rank": 20,
      "score": 8.805138767146312,
      "candidate": "if len(s) < 3:\n        return False\n    for i in range(0, len(s) - 2, 3):\n        if s[i] == s[i + 1] or s[i] == s[i + 2] or s[i + 1] == s[i + 2]:\n            return False\n    return True\n\n\nprint(is_happy('adb'))\nprint(is_happy('abc'))\nprint(is_happy('xyy'))"
    },
    {
      "rank": 21,
      "score": 8.74885805735177,
      "candidate": "return len(s) >= 3 and len(set(s[i:i+3] for i in range(len(s)-2))) == len(s)//3+1"
    },
    {
      "rank": 22,
      "score": 8.731932300199652,
      "candidate": "if len(s) < 3:\n        return False\n    for i in range(len(s)-2):\n        if s[i] == s[i+1] or s[i] == s[i+2] or s[i+1] == s[i+2]:\n            return False\n    return True\n\n\nprint(is_happy(\"xyy\"))\nprint(is_happy(\"adb\"))\nprint(is_happy(\"abcd\"))\nprint(is_happy(\"aabb\"))\nprint(is_happy(\"aa\"))\nprint(is_happy(\"a\"))"
    },
    {
      "rank": 23,
      "score": 8.699447664929847,
      "candidate": "if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if s[i] == s[i + 1] or s[i] == s[i + 2] or s[i + 1] == s[i + 2]:\n            return False\n    return True\n\n\nif __name__ == '__main__':\n    print(is_happy('adb'))"
    },
    {
      "rank": 24,
      "score": 8.614300379033399,
      "candidate": "if len(s) < 3:\n        return False\n    for i in range(len(s)-2):\n        if s[i] == s[i+1] or s[i] == s[i+2] or s[i+1] == s[i+2]:\n            return False\n    return True\n\nprint(is_happy(\"xyy\"))"
    },
    {
      "rank": 25,
      "score": 8.612287353054965,
      "candidate": "return len(s) >= 3 and len(set(s[i:i+3] for i in range(0, len(s)-2))) == len(s) // 3"
    },
    {
      "rank": 26,
      "score": 8.605945040541622,
      "candidate": "if len(s) < 3:\n        return False\n    i = 0\n    while i < len(s):\n        if s[i] == s[i+1] or s[i] == s[i+2] or s[i+1] == s[i+2]:\n            return False\n        i += 1\n    return True\n\nif __name__ == '__main__':\n    print(is_happy('abcd'))\n    print(is_happy('aaab'))\n    print(is_happy('adb'))\n    print(is_happy('xyy'))"
    },
    {
      "rank": 27,
      "score": 8.60013825720412,
      "candidate": "if len(s) < 3:\n        return False\n    i = 0\n    while i < len(s):\n        if s[i] == s[i+1] or s[i] == s[i+2]:\n            return False\n        i += 3\n    return True\n\n\ndef test_is_happy():\n    assert not is_happy('a')\n    assert not is_happy('aa')\n    assert is_happy('adb')\n    assert is_happy('adc')\n    assert not is_happy('aaa')\n    assert not is_happy('aaaa')\n    assert not is_happy('adcad')\n    assert is_happy('adcadc')\n    assert is_happy('adcadd')"
    },
    {
      "rank": 28,
      "score": 8.592140690764223,
      "candidate": "if len(s) < 3:\n        return False\n\n    for i in range(len(s) - 2):\n        if s[i] == s[i + 1] or s[i] == s[i + 2] or s[i + 1] == s[i + 2]:\n            return False\n    return True"
    },
    {
      "rank": 29,
      "score": 8.55816671208048,
      "candidate": "if len(s) < 3:\n        return False\n    # Your code here\n    s = s + s[0]\n    for i in range(len(s)-3):\n        if s[i] == s[i+1] or s[i] == s[i+2] or s[i+1] == s[i+2]:\n            return False\n    return True\n\n\nprint(is_happy(\"aaab\"))"
    },
    {
      "rank": 30,
      "score": 8.524987536603732,
      "candidate": "if len(s) < 3:\n        return False\n\n    i = 0\n    while i < len(s):\n        if s[i] == s[i+1] or s[i] == s[i+2]:\n            return False\n        i += 3\n\n    return True"
    },
    {
      "rank": 31,
      "score": 8.48757200941613,
      "candidate": "if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if s[i] == s[i + 1] or s[i] == s[i + 2] or s[i + 1] == s[i + 2]:\n            return False\n    return True\n\n\ndef main():\n    print(is_happy(\"adb\"))\n    print(is_happy(\"adb\"))\n    print(is_happy(\"aabb\"))\n    print(is_happy(\"aaa\"))\n    print(is_happy(\"abc\"))\n    print(is_happy(\"xyy\"))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 32,
      "score": 8.485356566516385,
      "candidate": "if len(s) < 3:\n        return False\n    if len(s) == 3:\n        return True\n    if len(s) == 4:\n        return s[0] != s[1] and s[1] != s[2] and s[2] != s[3]\n    for i in range(0, len(s), 3):\n        if s[i] == s[i+1] or s[i+1] == s[i+2] or s[i+2] == s[i]:\n            return False\n    return True\n\n\nprint(is_happy(\"abcd\"))\nprint(is_happy(\"aa\"))\nprint(is_happy(\"adb\"))\nprint(is_happy(\"xyy\"))"
    },
    {
      "rank": 33,
      "score": 8.476182700647769,
      "candidate": "if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if s[i] == s[i + 1] or s[i] == s[i + 2] or s[i + 1] == s[i + 2]:\n            return False\n    return True"
    },
    {
      "rank": 34,
      "score": 8.379460222893988,
      "candidate": "#print(\"S: \" + s)\n    if len(s) < 3:\n        return False\n    for i in range(0, len(s) - 2):\n        if s[i] == s[i+1] or s[i+1] == s[i+2] or s[i] == s[i+2]:\n            return False\n    return True\n\n#print(is_happy(\"adb\"))"
    },
    {
      "rank": 35,
      "score": 8.35718472541245,
      "candidate": "if len(s) < 3:\n        return False\n    return len(s) >= 3 and len(set(s[i:i+3])) == 3\n\n\nprint(is_happy(\"abcd\"))\nprint(is_happy(\"aabb\"))\nprint(is_happy(\"abc\"))"
    },
    {
      "rank": 36,
      "score": 8.338329583215772,
      "candidate": "if len(s) < 3:\n        return False\n    prev = \"\"\n    for i in range(len(s) - 2):\n        if s[i] == s[i + 1] or s[i] == s[i + 2] or s[i + 1] == s[i + 2]:\n            return False\n    return True\n\n\n# Testing\nprint(is_happy('abc'))\nprint(is_happy('xyy'))\nprint(is_happy('xyyx'))\nprint(is_happy('xyyy'))\nprint(is_happy('aaa'))\nprint(is_happy('aaab'))\nprint(is_happy('aaabb'))"
    },
    {
      "rank": 37,
      "score": 8.33440007467833,
      "candidate": "if len(s) < 3:\n        return False\n    for i in range(0, len(s) - 2):\n        if s[i] == s[i + 1] or s[i] == s[i + 2] or s[i + 1] == s[i + 2]:\n            return False\n    return True"
    },
    {
      "rank": 38,
      "score": 8.334392358324477,
      "candidate": "return len(s) >= 3 and len(set(s[i:i+3] for i in range(0,len(s),3))) == len(s) // 3 + 1\n\nprint(is_happy('aabb'))\nprint(is_happy('adb'))\nprint(is_happy('xyy'))\nprint(is_happy('abc'))\nprint(is_happy('abcd'))\nprint(is_happy('xyyy'))\nprint(is_happy('xabc'))\nprint(is_happy('xabcx'))\nprint(is_happy('xabcxy'))"
    },
    {
      "rank": 39,
      "score": 8.307348382041605,
      "candidate": "if len(s) < 3:\n        return False\n    s = s + s[0]\n    for i in range(len(s) - 2):\n        if s[i] == s[i + 1] and s[i + 1] == s[i + 2]:\n            return False\n    return True\n\n\ndef test_is_happy():\n    assert not is_happy(\"a\")\n    assert not is_happy(\"aa\")\n    assert is_happy(\"abcd\")\n    assert not is_happy(\"aabb\")\n    assert is_happy(\"adb\")\n    assert not is_happy(\"xyy\")\n    assert not is_happy(\"aabc\")\n    assert not is_happy(\"abca\")\n    assert is_happy(\"adbc\")\n    assert not is_happy(\"adca\")"
    },
    {
      "rank": 40,
      "score": 8.30292570751748,
      "candidate": "return len(s) >= 3 and len(set(s[i:i+3] for i in range(len(s) - 2))) == len(s) // 3\n\n\ndef test_is_happy():\n    assert is_happy('aabb') == False\n    assert is_happy('abcd') == True\n    assert is_happy('adb') == True\n    assert is_happy('xyy') == False\n    assert is_happy('aaa') == False\n    assert is_happy('') == False\n    assert is_happy('abc') == False"
    },
    {
      "rank": 41,
      "score": 8.263455772648776,
      "candidate": "#print(s)\n    #print(len(s))\n    if len(s) < 3:\n        return False\n\n    for i in range(len(s)):\n        if s[i] == s[i+1] and s[i] == s[i+2]:\n            return False\n    return True\n\nprint(is_happy('abcd'))\nprint(is_happy('aabb'))\nprint(is_happy('abab'))\nprint(is_happy('abc'))\nprint(is_happy('ab'))\nprint(is_happy('a'))\nprint(is_happy(''))\nprint(is_happy('aa'))"
    },
    {
      "rank": 42,
      "score": 8.226638128822588,
      "candidate": "if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if s[i] == s[i + 1] or s[i] == s[i + 2] or s[i + 1] == s[i + 2]:\n            return False\n    return True"
    },
    {
      "rank": 43,
      "score": 8.225551460266423,
      "candidate": "if len(s) < 3:\n        return False\n    for i in range(0, len(s)-2):\n        if s[i] == s[i+1] or s[i+1] == s[i+2] or s[i] == s[i+2]:\n            return False\n    return True\n\nprint(is_happy(\"abc\"))\nprint(is_happy(\"abcd\"))\nprint(is_happy(\"xyy\"))\nprint(is_happy(\"abab\"))"
    },
    {
      "rank": 44,
      "score": 8.223791483055017,
      "candidate": "if len(s)<3: return False\n    for i in range(len(s)-2):\n        if s[i]==s[i+1] or s[i]==s[i+2] or s[i+1]==s[i+2]:\n            return False\n    return True"
    },
    {
      "rank": 45,
      "score": 8.195457148673936,
      "candidate": "s = s.lower()\n    if len(s) < 3:\n        return False\n    else:\n        for i in range(len(s)-2):\n            if s[i] == s[i+1] or s[i] == s[i+2] or s[i+1] == s[i+2]:\n                return False\n        return True\n\nprint(is_happy('aabb'))\nprint(is_happy('xyy'))\nprint(is_happy('aabbc'))"
    },
    {
      "rank": 46,
      "score": 8.180169305701188,
      "candidate": "if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if s[i] == s[i + 1] or s[i + 1] == s[i + 2] or s[i] == s[i + 2]:\n            return False\n    return True\n\n\ndef main():\n    print(\"Happy or not: \" + str(is_happy(\"adb\")))\n    print(\"Happy or not: \" + str(is_happy(\"xyy\")))\n    print(\"Happy or not: \" + str(is_happy(\"aa\")))\n    print(\"Happy or not: \" + str(is_happy(\"abc\")))\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 47,
      "score": 8.141238159780036,
      "candidate": "if len(s) < 3:\n        return False\n    for i in range(len(s)-2):\n        if s[i] == s[i+1] or s[i] == s[i+2] or s[i+1] == s[i+2]:\n            return False\n    return True\n\n\ndef test_is_happy():\n    assert not is_happy('a')\n    assert not is_happy('aa')\n    assert is_happy('adb')\n    assert is_happy('abcd')\n    assert not is_happy('aabb')\n    assert not is_happy('xyy')\n    assert not is_happy('x')\n    assert not is_happy('xxy')"
    },
    {
      "rank": 48,
      "score": 8.126291104300645,
      "candidate": "if len(s)<3:\n        return False\n    for i in range(len(s)-3):\n        if s[i]==s[i+1] or s[i]==s[i+2] or s[i+1]==s[i+2]:\n            return False\n    return True\n\nif __name__ == '__main__':\n    print(is_happy('aaa'))"
    },
    {
      "rank": 49,
      "score": 7.968413817887265,
      "candidate": "if len(s) < 3:\n        return False\n    i = 0\n    while i < len(s)-2:\n        if s[i] == s[i+1] or s[i] == s[i+2] or s[i+1] == s[i+2]:\n            return False\n        i += 1\n    return True\n\n\nif __name__ == '__main__':\n    print(is_happy('aaa'))\n    print(is_happy('abc'))\n    print(is_happy('abcabc'))\n    print(is_happy('abccba'))"
    },
    {
      "rank": 50,
      "score": 7.947320307835172,
      "candidate": "if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if s[i] == s[i+1] or s[i] == s[i+2] or s[i+1] == s[i+2]:\n            return False\n    return True"
    },
    {
      "rank": 51,
      "score": 7.903477463055962,
      "candidate": "if len(s) < 3:\n        return False\n    s = s.lower()\n    for i in range(len(s) - 3):\n        if s[i] == s[i + 1] or s[i] == s[i + 2] or s[i + 1] == s[i + 2]:\n            return False\n    return True"
    },
    {
      "rank": 52,
      "score": 7.882227331126529,
      "candidate": "if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if s[i] == s[i + 1] or s[i] == s[i + 2]:\n            return False\n    return True\n\n\nif __name__ == \"__main__\":\n    print(is_happy(\"aa\"))"
    },
    {
      "rank": 53,
      "score": 7.870647928958064,
      "candidate": "return len(s) >= 3 and len(set(s[i:i+3] for i in range(0, len(s), 3))) == 3"
    },
    {
      "rank": 54,
      "score": 7.780661704816858,
      "candidate": "if len(s) < 3:\n        return False\n    else:\n        for i in range(len(s)-2):\n            if s[i] == s[i+1] or s[i] == s[i+2] or s[i+1] == s[i+2]:\n                return False\n    return True"
    },
    {
      "rank": 55,
      "score": 7.633733063163319,
      "candidate": "# Check if the length of s is at least 3\n    if len(s) < 3:\n        return False\n\n    # Check if there are at least 3 consecutive letters\n    for i in range(len(s)-3):\n        if s[i] == s[i+1] and s[i+1] == s[i+2]:\n            return True\n    return False\n\nprint(is_happy('aaab'))"
    },
    {
      "rank": 56,
      "score": 7.61581557142396,
      "candidate": "if len(s) < 3:\n        return False\n    for i in range(0, len(s) - 2, 3):\n        if s[i] == s[i + 1] or s[i + 1] == s[i + 2] or s[i + 2] == s[i]:\n            return False\n    return True"
    },
    {
      "rank": 57,
      "score": 7.52339948622095,
      "candidate": "if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if s[i] == s[i+1] or s[i] == s[i+2] or s[i+1] == s[i+2]:\n            return False\n    return True"
    },
    {
      "rank": 58,
      "score": 7.510287054582025,
      "candidate": "return len(s) >= 3 and len(set(s[i:i+3] for i in range(len(s)-2))) == len(s)-2\n\nprint(is_happy('abc'))\nprint(is_happy('abcd'))\nprint(is_happy('abcde'))\nprint(is_happy('aabb'))\nprint(is_happy('adb'))\nprint(is_happy('xyy'))\n\n# def is_happy(s):\n#     return len(s) >= 3 and len(set(s[i:i+3] for i in range(len(s)-2))) == len(s)-2\n\n# print(is_happy('abc'))\n# print(is_happy('abcd'))\n# print(is_happy('abcde'))\n# print(is_happy('aabb'))\n# print(is_happy('adb'))\n# print(is_happy('xyy'))"
    },
    {
      "rank": 59,
      "score": 3.6632693825131044,
      "candidate": "if len(s) < 3:\n        return False\n    for i in range(len(s)-3):\n        if s[i] == s[i+1] or s[i] == s[i+2] or s[i+1] == s[i+2]:\n            return False\n    return True\n\n\ndef is_happy_2(s):\n    \"\"\"You are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) => False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\n    if len(s) < 3:\n        return False\n    for i in range(len(s)-2):\n        if s[i] == s[i+1] or s[i] == s[i+2] or s[i+1] == s[i+2]:\n            return False\n    return True\n\n\nprint(is_happy(\"abc\"))\nprint(is_happy(\"abcabc\"))\nprint(is_happy(\"abcabcabc\"))\nprint(is_happy(\"abcabcab\"))\nprint(is_happy(\"abcbc\"))\nprint(is_happy(\"xyy\"))\nprint(is_happy_2(\"abc\"))\nprint(is_happy_2(\"abcabc\"))\nprint(is_happy_2(\"abcabcabc\"))\nprint(is_happy_2(\"abcabcab\"))\nprint(is_happy_2(\"abcbc\"))\nprint(is_happy_2(\"xyy\"))"
    },
    {
      "rank": 60,
      "score": 3.657150335441883,
      "candidate": "if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if s[i] == s[i+1] or s[i] == s[i+2] or s[i+1] == s[i+2]:\n            return False\n    return True\n\n\ndef is_happy2(s):\n    \"\"\"You are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) => False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\n    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if s[i] == s[i+1] or s[i] == s[i+2] or s[i+1] == s[i+2]:\n            return False\n    return True\n\n\ndef is_happy3(s):\n    \"\"\"You are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) => False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\n    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if s[i] == s[i+1] or s[i] == s[i+2] or s[i+1] == s[i+2]:\n            return False\n    return True\n\n\nif __"
    },
    {
      "rank": 61,
      "score": 3.6396725396913707,
      "candidate": "if len(s) < 3:\n        return False\n    if len(s) == 3:\n        if s[0] == s[1] or s[0] == s[2] or s[1] == s[2]:\n            return False\n        return True\n    if len(s) % 3 == 0:\n        return False\n    for i in range(0, len(s) - 2, 3):\n        if s[i] == s[i+1] or s[i+1] == s[i+2] or s[i] == s[i+2]:\n            return False\n    return True\n\n\ndef is_happy2(s):\n    \"\"\"You are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) => False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\n    if len(s) < 3:\n        return False\n    if len(s) == 3:\n        if s[0] == s[1] or s[0] == s[2] or s[1] == s[2]:\n            return False\n        return True\n    for i in range(0, len(s) - 2, 3):\n        if s[i] == s[i+1] or s[i+1] == s[i+2] or s[i] == s[i+2]:\n            return False\n    return True\n\n\nprint(is_happy('abc'))\nprint(is_happy('abcabc'))\nprint(is_happy('abcabcab'))\nprint(is_happy('abcabcabc'))\nprint(is_happy('abcabcabcd'))\nprint(is_happy('abccabcabc'))\nprint(is_happy('abccabccab'))\nprint("
    },
    {
      "rank": 62,
      "score": 3.615572482947053,
      "candidate": "# your code here\n    if len(s) < 3:\n        return False\n    i = 0\n    while i < len(s) - 2:\n        if s[i] == s[i + 1] or s[i] == s[i + 2] or s[i + 1] == s[i + 2]:\n            return False\n        i += 1\n    return True\n\n\nif __name__ == \"__main__\":\n    print(is_happy(\"aaab\"))"
    },
    {
      "rank": 63,
      "score": 3.4330197994482994,
      "candidate": "if len(s) < 3:\n        return False\n\n    for i in range(0, len(s), 3):\n        if s[i] == s[i + 1] or s[i] == s[i + 2] or s[i + 1] == s[i + 2]:\n            return False\n\n    return True\n\n\ndef is_happy_recur(s, i, j):\n    \"\"\"You are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) => False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\n    if len(s) < 3:\n        return False\n\n    if i >= j:\n        return False\n\n    if s[i] == s[i + 1] or s[i] == s[i + 2] or s[i + 1] == s[i + 2]:\n        return False\n\n    return is_happy_recur(s, i + 1, j)\n\n\nprint(is_happy(\"adb\"))\nprint(is_happy(\"xyy\"))\nprint(is_happy(\"aabb\"))"
    },
    {
      "rank": 64,
      "score": 3.409728953391391,
      "candidate": "if len(s) < 3:\n        return False\n\n    for i in range(0, len(s) - 2, 3):\n        if s[i] == s[i + 1] or s[i] == s[i + 2] or s[i + 1] == s[i + 2]:\n            return False\n\n    return True\n\n\ndef is_happy_v2(s):\n    \"\"\"You are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) => False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\n    if len(s) < 3:\n        return False\n\n    for i in range(0, len(s) - 2, 3):\n        if s[i] == s[i + 1] or s[i] == s[i + 2] or s[i + 1] == s[i + 2]:\n            return False\n\n    return True\n\n\ndef is_happy_v3(s):\n    \"\"\"You are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) => False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\n    if len(s) < 3:\n        return False\n\n    for i in range(0, len(s) - 2, 3):\n        if s[i] == s[i + 1] or s[i] =="
    },
    {
      "rank": 65,
      "score": 3.3911376500288033,
      "candidate": "if len(s) < 3:\n        return False\n\n    for i in range(len(s)-2):\n        if s[i] == s[i+1] or s[i] == s[i+2] or s[i+1] == s[i+2]:\n            return False\n    return True\n\n\ndef is_happy_rec(s):\n    \"\"\"\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) => False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\n    def is_happy_helper(s, i):\n        if i >= len(s) - 2:\n            return True\n        if s[i] == s[i + 1] or s[i] == s[i + 2] or s[i + 1] == s[i + 2]:\n            return False\n        return is_happy_helper(s, i+1)\n\n    return is_happy_helper(s, 0)\n\n\ndef main():\n    print(is_happy(\"abc\"))\n    print(is_happy(\"aaa\"))\n    print(is_happy(\"abcd\"))\n    print(is_happy(\"aabb\"))\n    print(is_happy(\"adb\"))\n    print(is_happy(\"xyy\"))\n    print(is_happy(\"abcxyy\"))\n\n    print(is_happy_rec(\"abc\"))\n    print(is_happy_rec(\"aaa\"))\n    print(is_happy_rec(\"abcd\"))\n    print(is_happy_rec(\"aabb\"))\n    print(is_happy_rec(\"adb\"))\n    print(is_happy_rec(\"xyy\"))\n    print(is_happy_rec(\"abcxyy\"))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 66,
      "score": 3.3454688630833394,
      "candidate": "if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if s[i] == s[i + 1] or s[i + 1] == s[i + 2] or s[i] == s[i + 2]:\n            return False\n    return True\n\n\nif __name__ == \"__main__\":\n    print(is_happy(\"aaab\"))"
    },
    {
      "rank": 67,
      "score": 3.341260845405563,
      "candidate": "if len(s) < 3:\n        return False\n    for i in range(len(s)-2):\n        if s[i] == s[i+1] or s[i] == s[i+2] or s[i+1] == s[i+2]:\n            return False\n    return True\n\ndef is_happy_2(s):\n    \"\"\"You are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) => False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\n    if len(s) < 3:\n        return False\n    for i in range(len(s)-2):\n        if s[i] == s[i+1] or s[i] == s[i+2] or s[i+1] == s[i+2]:\n            return False\n    return True\n\nif __name__ == \"__main__\":\n    print(is_happy(\"adb\"))\n    print(is_happy(\"xyy\"))\n    print(is_happy(\"aaa\"))\n    print(is_happy(\"abca\"))\n    print(is_happy(\"aabb\"))\n    print(is_happy(\"abc\"))"
    },
    {
      "rank": 68,
      "score": 3.3101559635980724,
      "candidate": "if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if s[i] == s[i + 1] or s[i + 1] == s[i + 2] or s[i] == s[i + 2]:\n            return False\n    return True\n\n\nif __name__ == \"__main__\":\n    assert is_happy(\"aabb\") == False\n    assert is_happy(\"adb\") == True\n    assert is_happy(\"xyy\") == False\n    assert is_happy(\"aabbc\") == False\n    assert is_happy(\"xyyxy\") == True\n    assert is_happy(\"aabbcxyy\") == False"
    },
    {
      "rank": 69,
      "score": 3.2086199442647176,
      "candidate": "if len(s) < 3:\n        return False\n    for i in range(len(s)-2):\n        if s[i] == s[i+1] or s[i] == s[i+2] or s[i+1] == s[i+2]:\n            return False\n    return True\n\n\nprint(is_happy(\"abcd\"))\nprint(is_happy(\"aa\"))\nprint(is_happy(\"xyy\"))\nprint(is_happy(\"aabb\"))\nprint(is_happy(\"adb\"))\n\n\ndef is_happy_2(s):\n    if len(s) < 3:\n        return False\n    for i in range(len(s)-2):\n        if s[i] == s[i+1] or s[i] == s[i+2] or s[i+1] == s[i+2]:\n            return False\n    return True\n\n\nprint(is_happy_2(\"abcd\"))\nprint(is_happy_2(\"aa\"))\nprint(is_happy_2(\"xyy\"))\nprint(is_happy_2(\"aabb\"))\nprint(is_happy_2(\"adb\"))"
    },
    {
      "rank": 70,
      "score": 3.157793167705182,
      "candidate": "#TODO: Write your code here\n    if len(s) < 3:\n        return False\n    s = s + s\n    i = 0\n    while i < len(s):\n        if s[i] == s[i+1] or s[i+1] == s[i+2]:\n            return False\n        i += 3\n    return True\n\nprint(is_happy(\"aabb\"))\nprint(is_happy(\"adb\"))\nprint(is_happy(\"xyy\"))\nprint(is_happy(\"abc\"))\nprint(is_happy(\"abcabc\"))\nprint(is_happy(\"abcabcabc\"))\nprint(is_happy(\"aabcaab\"))\nprint(is_happy(\"aabcaa\"))\nprint(is_happy(\"aabbcc\"))\nprint(is_happy(\"aa\"))\nprint(is_happy(\"aaaa\"))\nprint(is_happy(\"aaaaa\"))\nprint(is_happy(\"abcabcabc\"))\nprint(is_happy(\"abccba\"))\nprint(is_happy(\"abcbac\"))\nprint(is_happy(\"abcbab\"))\nprint(is_happy(\"abacab\"))\nprint(is_happy(\"abacaa\"))\nprint(is_happy(\"abacbc\"))\nprint(is_happy(\"abacbc\"))\nprint(is_happy(\"abcbac\"))\nprint(is_happy(\"abcbab\"))\nprint(is_happy(\"abacab\"))\nprint(is_happy(\"abacaa\"))\nprint(is_happy(\"abacbc\"))\nprint(is_happy(\"abcbac\"))\nprint(is_happy(\"abcbab\"))\nprint(is_happy(\"abacab\"))\nprint(is_happy(\"abacaa\"))\nprint(is_happy(\"abacbc\"))\nprint(is_happy(\"abcbac\"))\nprint(is_happy(\"abcbab\"))\nprint(is_happy(\"abacab\"))\nprint(is_happy(\"abacaa\"))\nprint(is_happy(\"abacbc\"))\nprint(is_happy(\"abcbac\"))"
    },
    {
      "rank": 71,
      "score": 3.1518871305200062,
      "candidate": "# print(s)\n    if len(s) < 3:\n        return False\n    for i in range(len(s)-2):\n        if s[i] == s[i+1] or s[i] == s[i+2] or s[i+1] == s[i+2]:\n            return False\n    return True\n\n\ndef is_happy_2(s):\n    \"\"\"You are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) => False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\n    # print(s)\n    if len(s) < 3:\n        return False\n    for i in range(len(s)-2):\n        if s[i] == s[i+1] or s[i] == s[i+2] or s[i+1] == s[i+2]:\n            return False\n    return True\n\n\ndef is_happy_3(s):\n    \"\"\"You are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) => False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\n    # print(s)\n    if len(s) < 3:\n        return False\n    for i in range(len(s)-2):\n        if s[i] == s[i+1] or s[i] == s[i+2] or s[i+1] == s["
    },
    {
      "rank": 72,
      "score": 3.1380754660570673,
      "candidate": "if len(s) < 3:\n        return False\n    for i in range(len(s)-2):\n        if s[i] == s[i+1] or s[i] == s[i+2] or s[i+1] == s[i+2]:\n            return False\n    return True\n\ndef is_happy(s):\n    \"\"\"You are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) => False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\n    if len(s) < 3:\n        return False\n    for i in range(len(s)-2):\n        if s[i] == s[i+1] or s[i] == s[i+2] or s[i+1] == s[i+2]:\n            return False\n    return True\n\ndef is_happy(s):\n    \"\"\"You are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) => False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\n    if len(s) < 3:\n        return False\n    for i in range(len(s)-2):\n        if s[i] == s[i+1] or s[i] == s[i+2] or s[i+1] == s[i+2]:\n            return False\n    return True\n\ndef is_happy(s):\n    \"\"\"You are"
    },
    {
      "rank": 73,
      "score": 3.136115267145814,
      "candidate": "# s = list(s)\n    # for i in range(0, len(s), 3):\n    #     if s[i] == s[i+1] or s[i] == s[i+2] or s[i+1] == s[i+2]:\n    #         return False\n    # return True\n\n    # print(s)\n    # print(s[0::3])\n    # print(s[1::3])\n    # print(s[2::3])\n\n    # return len(s) >= 3 and len(set(s[0::3])) == 1 and len(set(s[1::3])) == 1 and len(set(s[2::3])) == 1\n\n    # return len(s) >= 3 and len(set(s[i:i+3] for i in range(0, len(s), 3))) == 1\n\n    return len(s) >= 3 and len(set(s[i:i+3] for i in range(0, len(s), 3))) == 1\n\nprint(is_happy('a'))\nprint(is_happy('aa'))\nprint(is_happy('abcd'))\nprint(is_happy('aabb'))\nprint(is_happy('adb'))\nprint(is_happy('xyy'))\nprint(is_happy('abcd'))\nprint(is_happy('xyyy'))\nprint(is_happy('ababab'))\nprint(is_happy('abab'))\nprint(is_happy('abac'))\nprint(is_happy('abc'))\nprint(is_happy('abcabc'))\nprint(is_happy('abcabcabc'))\nprint(is_happy('abcabcab'))\nprint(is_happy('abcabcabcd'))\nprint(is_happy('abcabcabcde'))\nprint(is_happy('abcd'))\nprint(is_happy('abcdabcd'))\nprint(is_happy('abcde'))\nprint(is_happy('abcdeabcd'))\nprint(is_happy('abcdef'))\nprint(is_"
    },
    {
      "rank": 74,
      "score": 3.087722709901997,
      "candidate": "if len(s) < 3:\n        return False\n    for i in range(0, len(s)-2):\n        if s[i] == s[i+1] or s[i] == s[i+2]:\n            return False\n    return True\n\n\n\ndef is_happy_two(s):\n    \"\"\"You are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) => False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\n    if len(s) < 3:\n        return False\n    for i in range(0, len(s)-2):\n        if s[i] == s[i+1] or s[i] == s[i+2]:\n            return False\n    return True\n\n\nif __name__ == \"__main__\":\n    print(is_happy(\"abcd\"))\n    print(is_happy(\"aabb\"))\n    print(is_happy(\"adb\"))\n    print(is_happy(\"xyy\"))\n    print(is_happy(\"\"))\n    print(is_happy(\"ab\"))\n    print(is_happy(\"abc\"))\n    print(is_happy(\"aaa\"))\n    print(is_happy(\"aaab\"))\n    print(is_happy(\"abcabc\"))\n    print(is_happy(\"abcdabcd\"))\n    print(is_happy(\"abcabcabc\"))\n    print(is_happy(\"abcabcabcabc\"))\n    print(is_happy(\"abcabcabcabcd\"))\n    print(is_happy(\"abcabcabcabc\"))\n    print(is_happy(\"abcabcabcabcabc\"))"
    },
    {
      "rank": 75,
      "score": 3.082681719065032,
      "candidate": "if len(s) < 3:\n        return False\n    for i in range(0, len(s) - 2, 3):\n        if s[i] == s[i + 1] or s[i + 1] == s[i + 2] or s[i + 2] == s[i]:\n            return False\n    return True\n\n\ndef test_is_happy():\n    assert not is_happy(\"a\")\n    assert not is_happy(\"aa\")\n    assert is_happy(\"abcd\")\n    assert not is_happy(\"aabb\")\n    assert is_happy(\"adb\")\n    assert not is_happy(\"xyy\")"
    },
    {
      "rank": 76,
      "score": 3.046587487678144,
      "candidate": "if len(s) < 3:\n        return False\n    for i in range(0, len(s) - 2, 3):\n        if s[i] == s[i + 1] or s[i + 1] == s[i + 2] or s[i] == s[i + 2]:\n            return False\n    return True\n\n\ndef is_happy_alt(s):\n    return len(s) >= 3 and not any(s[i] == s[i + 1] or s[i + 1] == s[i + 2] or s[i] == s[i + 2] for i in range(0, len(s) - 2, 3))\n\n\nassert not is_happy(\"a\")\nassert not is_happy(\"aa\")\nassert is_happy(\"abcd\")\nassert not is_happy(\"aabb\")\nassert is_happy(\"adb\")\nassert not is_happy(\"xyy\")\nassert is_happy(\"xxy\")\nassert not is_happy(\"xxyy\")\nassert is_happy(\"xxyyx\")\nassert is_happy(\"xxyyxx\")"
    },
    {
      "rank": 77,
      "score": 2.9943311656100677,
      "candidate": "#print(s)\n    if len(s) < 3:\n        return False\n    #print(s)\n    for i in range(0, len(s)-2):\n        if s[i] == s[i+1] or s[i] == s[i+2] or s[i+1] == s[i+2]:\n            return False\n    return True\n\ndef is_happy2(s):\n    \"\"\"You are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) => False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\n    if len(s) < 3:\n        return False\n    for i in range(0, len(s)-2):\n        if s[i] == s[i+1] or s[i] == s[i+2] or s[i+1] == s[i+2]:\n            return False\n    return True\n\n\nif __name__ == '__main__':\n    print(is_happy2('abc'))\n    print(is_happy2('abca'))\n    print(is_happy2('abcd'))\n    print(is_happy2('aabb'))\n    print(is_happy2('adb'))\n    print(is_happy2('xyy'))"
    },
    {
      "rank": 78,
      "score": 2.9849530635738204,
      "candidate": "if len(s)<3:\n        return False\n    for i in range(len(s)-2):\n        if s[i]==s[i+1] or s[i]==s[i+2] or s[i+1]==s[i+2]:\n            return False\n    return True\n\n\ndef is_happy_string(s):\n    \"\"\"You are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) => False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\n    if len(s)<3:\n        return False\n    for i in range(len(s)-2):\n        if s[i]==s[i+1] or s[i]==s[i+2] or s[i+1]==s[i+2]:\n            return False\n    return True\n\n\ndef is_happy_string_v1(s):\n    \"\"\"You are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) => False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\n    if len(s)<3:\n        return False\n    for i in range(len(s)-2):\n        if s[i]==s[i+1] or s[i]==s[i+2] or s[i+1]==s[i+2]:\n            return False\n    return True\n\n\ndef is_happy_"
    },
    {
      "rank": 79,
      "score": 2.96975574893626,
      "candidate": "if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if s[i] == s[i + 1] or s[i] == s[i + 2] or s[i + 1] == s[i + 2]:\n            return False\n    return True\n\n\ndef is_happy_2(s):\n    return len(s) >= 3 and all(s[i] != s[i + 1] and s[i] != s[i + 2] for i in range(len(s) - 2))\n\n\ndef is_happy_3(s):\n    return len(s) >= 3 and all(s[i] != s[i + 1] and s[i + 1] != s[i + 2] for i in range(len(s) - 3))\n\n\nprint(is_happy(\"adb\"))\nprint(is_happy(\"aabb\"))\nprint(is_happy(\"abc\"))\nprint(is_happy(\"xyy\"))"
    },
    {
      "rank": 80,
      "score": 2.951427721396939,
      "candidate": "if len(s) < 3:\n        return False\n    else:\n        s = s.lower()\n        i = 0\n        while i < len(s) - 2:\n            if s[i] == s[i + 1] or s[i] == s[i + 2] or s[i + 1] == s[i + 2]:\n                return False\n            else:\n                i += 1\n    return True\n\n\ndef is_happy_new(s):\n    \"\"\"You are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) => False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\n    if len(s) < 3:\n        return False\n    else:\n        s = s.lower()\n        i = 0\n        while i < len(s) - 2:\n            if s[i] == s[i + 1] or s[i] == s[i + 2] or s[i + 1] == s[i + 2]:\n                return False\n            else:\n                i += 1\n    return True\n\n\nif __name__ == \"__main__\":\n    print(is_happy(\"abc\"))\n    print(is_happy(\"abcabcabc\"))\n    print(is_happy(\"abcabcabcabc\"))\n    print(is_happy(\"abcabcabcabcd\"))\n    print(is_happy(\"abcabcabcab\"))\n    print(is_happy(\"abcabcabcabcd\"))\n    print(is_happy(\"abcabcabcabcc\"))"
    },
    {
      "rank": 81,
      "score": 2.907737807108245,
      "candidate": "if len(s) < 3:\n        return False\n    for i in range(0, len(s) - 2, 3):\n        if s[i] == s[i + 1] or s[i + 1] == s[i + 2] or s[i] == s[i + 2]:\n            return False\n    return True\n\n\ndef is_happy_with_sets(s):\n    \"\"\"You are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) => False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\n    if len(s) < 3:\n        return False\n    return len(s) >= 3 and len(set(s[::3])) == 1 and len(set(s[1::3])) == 1 and len(set(s[2::3])) == 1\n\n\ndef is_happy_with_slicing(s):\n    \"\"\"You are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) => False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\n    if len(s) < 3:\n        return False\n    for i in range(0, len(s) - 2, 3):\n        if s[i] == s[i + 1] or s[i + 1] == s[i + 2] or s[i] == s[i + 2"
    },
    {
      "rank": 82,
      "score": 2.8744169128043358,
      "candidate": "# print(s)\n    # print(len(s))\n    # print(s[0:3])\n    # print(s[3:6])\n    if len(s) < 3:\n        return False\n    for i in range(len(s)-2):\n        # print(s[i:i+3])\n        if s[i] == s[i+1] or s[i] == s[i+2] or s[i+1] == s[i+2]:\n            return False\n    return True\n\ndef is_happy_2(s):\n    \"\"\"You are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) => False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\n    # print(s)\n    # print(len(s))\n    # print(s[0:3])\n    # print(s[3:6])\n    if len(s) < 3:\n        return False\n    return not any(s[i] == s[i+1] or s[i] == s[i+2] or s[i+1] == s[i+2] for i in range(len(s)-2))\n\n\ndef is_happy_3(s):\n    \"\"\"You are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) => False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\n    # print"
    },
    {
      "rank": 83,
      "score": 2.87013080214249,
      "candidate": "if len(s) < 3:\n        return False\n    s = s + s\n    for i in range(0, len(s) - 3):\n        if s[i] == s[i + 1] or s[i] == s[i + 2] or s[i + 1] == s[i + 2]:\n            return False\n    return True\n\n\ndef is_happy_short(s):\n    \"\"\"You are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) => False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\n    if len(s) < 3:\n        return False\n    for i in range(0, len(s) - 2):\n        if s[i] == s[i + 1] or s[i] == s[i + 2] or s[i + 1] == s[i + 2]:\n            return False\n    return True"
    },
    {
      "rank": 84,
      "score": 2.8065317161968895,
      "candidate": "if len(s) < 3:\n        return False\n\n    for i in range(0, len(s), 3):\n        if s[i] == s[i + 1] or s[i + 1] == s[i + 2] or s[i] == s[i + 2]:\n            return False\n    return True\n\n\nif __name__ == '__main__':\n    print(is_happy(\"abcd\"))\n    print(is_happy(\"aabb\"))\n    print(is_happy(\"adb\"))\n    print(is_happy(\"xyy\"))"
    },
    {
      "rank": 85,
      "score": 2.798746820104978,
      "candidate": "if len(s) < 3:\n        return False\n    for i in range(0, len(s), 3):\n        if s[i] == s[i + 1] or s[i + 1] == s[i + 2] or s[i] == s[i + 2]:\n            return False\n    return True\n\n\ndef is_happy2(s):\n    \"\"\"You are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) => False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\n    if len(s) < 3:\n        return False\n    for i in range(0, len(s), 3):\n        if s[i] == s[i + 1] or s[i + 1] == s[i + 2] or s[i] == s[i + 2]:\n            return False\n    return True\n\n\nif __name__ == '__main__':\n    print(is_happy2('adb'))"
    },
    {
      "rank": 86,
      "score": 2.789262041694495,
      "candidate": "# TODO: Write your code here\n    if len(s) < 3:\n        return False\n    for i in range(0, len(s), 3):\n        if s[i] == s[i + 1] or s[i] == s[i + 2] or s[i + 1] == s[i + 2]:\n            return False\n    return True\n\n\ndef is_happy_2(s):\n    \"\"\"You are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) => False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\n    # TODO: Write your code here\n    if len(s) < 3:\n        return False\n    for i in range(0, len(s), 3):\n        if s[i] == s[i + 1] or s[i] == s[i + 2] or s[i + 1] == s[i + 2]:\n            return False\n    return True\n\n\ndef is_happy_3(s):\n    \"\"\"You are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) => False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\n    # TODO: Write your code here\n    if len(s) < 3:\n        return False\n    for i in range(0, len(s), 3):\n        if s[i] == s[i +"
    },
    {
      "rank": 87,
      "score": 2.782326508325068,
      "candidate": "if len(s) < 3:\n        return False\n    for i in range(len(s)-3):\n        if s[i] == s[i+1] or s[i] == s[i+2] or s[i+1] == s[i+2]:\n            return False\n    return True\n\n\ndef test_is_happy():\n    assert is_happy('a') == False\n    assert is_happy('aa') == False\n    assert is_happy('abcd') == True\n    assert is_happy('aabb') == False\n    assert is_happy('adb') == True\n    assert is_happy('xyy') == False\n\n\nif __name__ == '__main__':\n    test_is_happy()"
    },
    {
      "rank": 88,
      "score": 2.7713592556994233,
      "candidate": "if len(s) < 3:\n        return False\n    #if len(s) <= 2:\n    #    return False\n    for i in range(len(s) - 2):\n        if s[i] == s[i+1] or s[i] == s[i+2] or s[i+1] == s[i+2]:\n            return False\n    return True\n\n\ndef is_happy_optimized(s):\n    \"\"\"You are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) => False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\n    if len(s) < 3:\n        return False\n    if len(s) <= 2:\n        return False\n    for i in range(len(s) - 2):\n        if s[i] == s[i+1] or s[i] == s[i+2] or s[i+1] == s[i+2]:\n            return False\n    return True\n\n\ndef is_happy_optimized_2(s):\n    \"\"\"You are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) => False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\n    if len(s) < 3:\n        return False\n    if len(s) <= 2:\n        return False\n    for i in range(len(s) - 2"
    },
    {
      "rank": 89,
      "score": 2.747731750234102,
      "candidate": "if len(s) < 3:\n        return False\n\n    # sliding window\n    # for i in range(len(s) - 2):\n    #     sub_str = s[i : i + 3]\n    #     if len(set(sub_str)) == 1:\n    #         return False\n    # return True\n\n    # optimized\n    prev_char = s[0]\n    window = set([prev_char])\n    for char in s[1:]:\n        if char in window:\n            return False\n        window.add(char)\n        prev_char = char\n    return True\n\n\nif __name__ == \"__main__\":\n    print(is_happy(\"abcd\"))\n    print(is_happy(\"adb\"))\n    print(is_happy(\"xyy\"))\n    print(is_happy(\"aa\"))\n    print(is_happy(\"aaaa\"))\n    print(is_happy(\"aaaaa\"))\n    print(is_happy(\"abcdabcd\"))\n    print(is_happy(\"abcdbcda\"))\n    print(is_happy(\"abcda\"))\n    print(is_happy(\"aabb\"))"
    },
    {
      "rank": 90,
      "score": 2.7472832228636532,
      "candidate": "return len(s) >= 3 and len(set(s[i:i+3] for i in range(0, len(s), 3))) == len(s) // 3\n\n\ndef is_happy_with_comprehension(s):\n    \"\"\"You are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) => False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\n    return len(s) >= 3 and len(set(s[i:i+3] for i in range(0, len(s), 3))) == len(s) // 3\n\n\ndef is_happy_with_regex(s):\n    \"\"\"You are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) => False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\n    import re\n    return len(s) >= 3 and len(re.findall(r'((\\w)\\2\\2)', s)) == len(s) // 3\n\n\nif __name__ == '__main__':\n    print(\"Example:\")\n    print(is_happy('a'))\n\n    # These \"asserts\" are used for self-checking and not for an auto-testing\n    assert is_happy('a') == False\n    assert is_happy('aa') == False\n    assert is_happy('abcd') == True\n    assert is_happy"
    },
    {
      "rank": 91,
      "score": 2.6976654324742224,
      "candidate": "if len(s) < 3:\n        return False\n    if len(s) == 3:\n        return True\n    if s[0] == s[1] or s[0] == s[2] or s[1] == s[2]:\n        return False\n    return is_happy(s[1:])\n\n\ndef is_happy_rec(s):\n    \"\"\"You are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) => False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\n    if len(s) < 3:\n        return False\n    if len(s) == 3:\n        return True\n    if s[0] == s[1] or s[0] == s[2] or s[1] == s[2]:\n        return False\n    return is_happy(s[1:])\n\n\ndef is_happy(s):\n    if len(s) < 3:\n        return False\n    if len(s) == 3:\n        return True\n    if s[0] == s[1] or s[0] == s[2] or s[1] == s[2]:\n        return False\n    return is_happy(s[1:])\n\n\ndef is_happy_rec(s):\n    if len(s) < 3:\n        return False\n    if len(s) == 3:\n        return True\n    if s[0] == s[1] or s[0] == s[2] or s[1] == s[2]:\n        return False\n    return is_happy(s[1:])\n\n\ndef is_happy(s):\n    if len(s) < 3:\n        return False\n    if len(s) =="
    },
    {
      "rank": 92,
      "score": 2.660432686784861,
      "candidate": "# \u5982\u679c\u957f\u5ea6\u5c0f\u4e8e3\uff0c\u6216\u8005\u957f\u5ea6\u5927\u4e8e3\uff0c\u4f46\u662f\u6709\u91cd\u590d\uff0c\u8fd4\u56deFalse\n    if len(s) < 3 or (len(s) > 3 and s[0] == s[1] == s[2]):\n        return False\n\n    # \u5426\u5219\u6211\u4eec\u5148\u628as[0:3] \u62ff\u51fa\u6765\uff0c\u7136\u540e\u770b\u770b\u662f\u5426\u6709\u91cd\u590d\n    # \u5982\u679c\u91cd\u590d\u4e86\uff0c\u90a3\u4e48\u5c31\u7ee7\u7eed\u5f80\u540e\u62ffs[1:4] \u770b\u770b\uff0c\u5982\u679c\u8fd8\u6709\u91cd\u590d\uff0c\u7ee7\u7eed\u5f80\u540e\u62ff\uff0c\n    # \u5982\u679c\u6ca1\u6709\u91cd\u590d\uff0c\u90a3\u4e48\u5c31\u628a\u5f53\u524d\u7684s[0:3] \u548c\u4e0b\u4e00\u4e2as[1:4] \u8fdb\u884c\u6bd4\u8f83\n    for i in range(len(s)-3):\n        if s[i:i+3] == s[i+1:i+4]:\n            return False\n\n    return True\n\n\ndef is_happy2(s):\n    \"\"\"You are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) => False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\n    # \u5982\u679c\u957f\u5ea6\u5c0f\u4e8e3\uff0c\u6216\u8005\u957f\u5ea6\u5927\u4e8e3\uff0c\u4f46\u662f\u6709\u91cd\u590d\uff0c\u8fd4\u56deFalse\n    if len(s) < 3 or (len(s) > 3 and s[0] == s[1] == s[2]):\n        return False\n\n    # \u5426\u5219\u6211\u4eec\u5148\u628as[0:3] \u62ff\u51fa\u6765\uff0c\u7136\u540e\u770b\u770b\u662f\u5426\u6709\u91cd\u590d\n    # \u5982\u679c\u91cd\u590d\u4e86\uff0c\u90a3\u4e48\u5c31\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd"
    },
    {
      "rank": 93,
      "score": 2.6475286402464917,
      "candidate": "# your code here\n    if len(s) < 3:\n        return False\n    if len(s) % 3 != 0:\n        return False\n    s = s + s[0:3]\n    for i in range(0, len(s), 3):\n        if s[i] == s[i+1] or s[i+1] == s[i+2] or s[i] == s[i+2]:\n            return False\n    return True\n\n\ndef is_happy(s):\n    if len(s) < 3:\n        return False\n    if len(s) % 3 != 0:\n        return False\n    s = s + s[0:3]\n    for i in range(0, len(s), 3):\n        if s[i] == s[i+1] or s[i+1] == s[i+2] or s[i] == s[i+2]:\n            return False\n    return True\n\n\ndef is_happy(s):\n    if len(s) < 3:\n        return False\n    if len(s) % 3 != 0:\n        return False\n    s = s + s[0:3]\n    for i in range(0, len(s), 3):\n        if s[i] == s[i+1] or s[i+1] == s[i+2] or s[i] == s[i+2]:\n            return False\n    return True\n\n\ndef is_happy(s):\n    if len(s) < 3:\n        return False\n    if len(s) % 3 != 0:\n        return False\n    s = s + s[0:3]\n    for i in range(0, len(s), 3):\n        if s[i] == s[i+1] or s[i+1] == s[i+2] or s[i] == s[i+2]:\n            return False\n    return True\n\n\ndef is_happy(s):\n    if len(s) < 3:\n        return False\n    if len(s) % 3 !="
    },
    {
      "rank": 94,
      "score": 2.6186298882810917,
      "candidate": "if len(s) < 3:\n        return False\n\n    for i in range(len(s) - 2):\n        if s[i] == s[i + 1] or s[i] == s[i + 2] or s[i + 1] == s[i + 2]:\n            return False\n    return True\n\n\ndef is_happy2(s):\n    \"\"\"You are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) => False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\n    if len(s) < 3:\n        return False\n\n    for i in range(len(s) - 2):\n        if s[i] == s[i + 1] or s[i] == s[i + 2] or s[i + 1] == s[i + 2]:\n            return False\n    return True"
    },
    {
      "rank": 95,
      "score": 2.5353393109174682,
      "candidate": "if len(s) < 3:\n        return False\n    # check if there are at least 3 consecutive letters\n    for i in range(len(s) - 2):\n        if s[i] == s[i + 1] or s[i] == s[i + 2] or s[i + 1] == s[i + 2]:\n            return False\n    return True\n\n\ndef is_happy_alt(s):\n    \"\"\"Alternative solution with zip\"\"\"\n    if len(s) < 3:\n        return False\n    return all(x != y != z for x, y, z in zip(s, s[1:], s[2:]))\n\n\ndef test(s, expected_answer):\n    answer = is_happy(s)\n\n    if answer != expected_answer:\n        raise Exception(\n            f\"Answer {answer} is wrong. Expected answer is {expected_answer}\"\n        )\n\n\nif __name__ == \"__main__\":\n    test(\"abcd\", True)\n    test(\"ab\", False)\n    test(\"aabb\", False)\n    test(\"aaa\", False)\n    test(\"adb\", True)\n    test(\"xyy\", False)\n    test(\"aaabb\", False)\n    test(\"a\", False)\n    test(\"aa\", False)\n    print(\"All tests passed!\")"
    },
    {
      "rank": 96,
      "score": 2.4421618594626593,
      "candidate": "#return len(s) >= 3 and len(set(s[i:i+3] for i in range(len(s)-2))) == len(s)//3\n    #return len(s) >= 3 and len(set(s[i:i+3] for i in range(0, len(s), 3))) == len(s)//3\n    return len(s) >= 3 and len(set(s[i:i+3] for i in range(0, len(s), 3))) == len(s)//3\n\n\nprint(is_happy('abcd'))"
    },
    {
      "rank": 97,
      "score": 2.401605761790348,
      "candidate": "if len(s) < 3:\n        return False\n\n    for i in range(len(s)-2):\n        if s[i] == s[i+1] or s[i] == s[i+2] or s[i+1] == s[i+2]:\n            return False\n    return True\n\n\ndef is_happy_alt(s):\n    if len(s) < 3:\n        return False\n\n    for i in range(len(s)-2):\n        if s[i] == s[i+1] or s[i] == s[i+2] or s[i+1] == s[i+2]:\n            return False\n    return True\n\n\nif __name__ == \"__main__\":\n    print(is_happy(\"abcd\"))\n    print(is_happy_alt(\"abcd\"))"
    },
    {
      "rank": 98,
      "score": 2.3790207640456806,
      "candidate": "s = s.lower()\n    for i in range(len(s)):\n        if s[i] in s[i+1:]:\n            return False\n    return len(s) >= 3\n\n\ndef is_happy_2(s):\n    \"\"\"You are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) => False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\n    s = s.lower()\n    for i in range(len(s)):\n        if s[i] in s[i+1:]:\n            return False\n    return len(s) >= 3"
    },
    {
      "rank": 99,
      "score": 2.196422297243725,
      "candidate": "if len(s) < 3:\n        return False\n    for i in range(len(s) - 3 + 1):\n        if s[i] == s[i + 1] or s[i] == s[i + 2] or s[i + 1] == s[i + 2]:\n            return False\n    return True\n\n\ndef test_is_happy():\n    assert is_happy(\"a\") == False\n    assert is_happy(\"aa\") == False\n    assert is_happy(\"abcd\") == True\n    assert is_happy(\"aabb\") == False\n    assert is_happy(\"adb\") == True\n    assert is_happy(\"xyy\") == False"
    },
    {
      "rank": 100,
      "score": 1.8997070562823075,
      "candidate": "if len(s) < 3:\n        return False\n    for i in range(len(s) - 3):\n        if s[i] == s[i + 1] or s[i] == s[i + 2] or s[i + 1] == s[i + 2]:\n            return False\n    return True\n\n\nif __name__ == \"__main__\":\n    assert is_happy(\"aabb\") == False\n    assert is_happy(\"abc\") == False\n    assert is_happy(\"adb\") == True\n    assert is_happy(\"adx\") == False\n    assert is_happy(\"xyy\") == False\n    assert is_happy(\"aaaa\") == False\n    assert is_happy(\"aaaaa\") == False\n    assert is_happy(\"abcabc\") == False\n    assert is_happy(\"abcabcabc\") == True"
    }
  ]
}