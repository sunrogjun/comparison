{
  "timestamp": "2025-09-14T22:00:12.876698",
  "method": "improved_llm_judge",
  "judge_model": "codellama/CodeLlama-7b-Python-hf",
  "target_model": "codellama-7b",
  "dataset": "humaneval",
  "problem_number": 124,
  "total_candidates": 100,
  "results": [
    {
      "rank": 1,
      "score": 10.0,
      "candidate": "pass"
    },
    {
      "rank": 2,
      "score": 10.0,
      "candidate": "pass"
    },
    {
      "rank": 3,
      "score": 10.0,
      "candidate": "date_list = date.split('-')\n    if len(date_list) != 3:\n        return False\n    month = int(date_list[0])\n    day = int(date_list[1])\n    year = int(date_list[2])\n    if month < 1 or month > 12:\n        return False\n    if day < 1 or day > 31:\n        return False\n    if month in [1,3,5,7,8,10,12] and day < 1 or day > 31:\n        return False\n    if month in [4,6,9,11] and day < 1 or day > 30:\n        return False\n    if month == 2 and day > 29:\n        return False\n    return True\n\n\nif __name__ == '__main__':\n    print(valid_date('03-11-2000'))\n    print(valid_date('15-01-2012'))\n    print(valid_date('04-0-2040'))\n    print(valid_date('06-04-2020'))\n    print(valid_date('06/04/2020'))"
    },
    {
      "rank": 4,
      "score": 10.0,
      "candidate": "# write your code here\n    return True\n\nprint(valid_date('03-11-2000'))\nprint(valid_date('15-01-2012'))\nprint(valid_date('04-0-2040'))\nprint(valid_date('06-04-2020'))\nprint(valid_date('06/04/2020'))"
    },
    {
      "rank": 5,
      "score": 10.0,
      "candidate": "import re\n    regex = re.compile('(0[1-9]|1[0-2])[- /.](0[1-9]|[12][0-9]|3[01])[- /.](19|20)\\d\\d')\n    match = regex.match(date)\n    if match:\n        date_list = date.split('-')\n        month, day, year = date_list[0], date_list[1], date_list[2]\n        if int(month) < 1 or int(month) > 12:\n            return False\n        if int(day) < 1 or int(day) > 31:\n            return False\n        if int(year) < 19 or int(year) > 2020:\n            return False\n        if int(day) < 1 or int(day) > 31:\n            return False\n        if int(month) == 1 or int(month) == 3 or int(month) == 5 or int(month) == 7 or int(month) == 8 or int(month) == 10 or int(month) == 12:\n            if int(day) < 1 or int(day) > 31:\n                return False\n        if int(month) == 4 or int(month) == 6 or int(month) == 9 or int(month) == 11:\n            if int(day) < 1 or int(day) > 30:\n                return False\n        if int(month) == 2:\n            if int(year) % 4 == 0:\n                if int(day) < 1 or int(day) > 29:\n                    return False\n            else:\n                if int(day) < 1 or int(day) > 28:\n                    return False\n    else:\n        return False\n    return True\n\n\n#  Test Function\nprint(valid_date('03-11-2000'))\nprint(valid_date('15-01-2012'))\nprint(valid_date('04-0-2040'))\nprint"
    },
    {
      "rank": 6,
      "score": 10.0,
      "candidate": "date_list = date.split('-')\n\n    if len(date_list) != 3:\n        return False\n\n    if int(date_list[0]) not in range(1,13):\n        return False\n\n    if int(date_list[0]) == 2:\n        if int(date_list[2]) % 400 == 0:\n            if int(date_list[1]) not in range(1,30):\n                return False\n        elif int(date_list[2]) % 100 == 0:\n            if int(date_list[1]) not in range(1,29):\n                return False\n        elif int(date_list[2]) % 4 == 0:\n            if int(date_list[1]) not in range(1,29):\n                return False\n        else:\n            if int(date_list[1]) not in range(1,28):\n                return False\n    else:\n        if int(date_list[1]) not in range(1,32):\n            return False\n\n    return True\n\nprint(valid_date('03-11-2000'))\nprint(valid_date('15-01-2012'))\nprint(valid_date('04-0-2040'))\nprint(valid_date('06-04-2020'))\nprint(valid_date('06/04/2020'))"
    },
    {
      "rank": 7,
      "score": 10.0,
      "candidate": "try:\n        month, day, year = date.split('-')\n        day = int(day)\n        month = int(month)\n        year = int(year)\n        if month < 1 or month > 12:\n            return False\n        elif day < 1 or day > 31:\n            return False\n        elif month in [1, 3, 5, 7, 8, 10, 12] and day > 31:\n            return False\n        elif month in [4, 6, 9, 11] and day > 30:\n            return False\n        elif month == 2 and day > 29:\n            return False\n        return True\n    except:\n        return False\n\nprint(valid_date('03-11-2000'))\nprint(valid_date('15-01-2012'))\nprint(valid_date('04-0-2040'))\nprint(valid_date('06-04-2020'))\nprint(valid_date('06/04/2020'))"
    },
    {
      "rank": 8,
      "score": 10.0,
      "candidate": "# Write your code here.\n    import re\n    if date == \"\":\n        return False\n    elif re.search('[0-9]{2}-[0-9]{2}-[0-9]{4}', date) is None:\n        return False\n    else:\n        month, day, year = date.split(\"-\")\n        if int(month) <= 0 or int(month) > 12:\n            return False\n        elif int(day) <= 0 or int(day) > 31:\n            return False\n        elif int(month) in [1, 3, 5, 7, 8, 10, 12] and int(day) > 31:\n            return False\n        elif int(month) in [4, 6, 9, 11] and int(day) > 30:\n            return False\n        elif int(month) == 2 and int(day) > 29:\n            return False\n        else:\n            return True\n\nprint(valid_date('03-11-2000'))\nprint(valid_date('15-01-2012'))\nprint(valid_date('04-0-2040'))\nprint(valid_date('06-04-2020'))\nprint(valid_date('06/04/2020'))"
    },
    {
      "rank": 9,
      "score": 10.0,
      "candidate": "if date == \"\":\n        return False\n    else:\n        date_list = date.split(\"-\")\n        if int(date_list[1]) < 1 or int(date_list[1]) > 31:\n            if int(date_list[1]) < 1 or int(date_list[1]) > 30:\n                if int(date_list[1]) < 1 or int(date_list[1]) > 29:\n                    return False\n                else:\n                    return True\n            else:\n                return True\n        else:\n            return True\n\nprint(valid_date(\"03-11-2000\")) # True\nprint(valid_date(\"15-01-2012\")) # False\nprint(valid_date(\"04-0-2040\")) # False\nprint(valid_date(\"06-04-2020\")) # True\nprint(valid_date(\"06/04/2020\")) # False\nprint(valid_date(\"\")) # False"
    },
    {
      "rank": 10,
      "score": 10.0,
      "candidate": "if date == \"\":\n        return False\n    date_list = date.split(\"-\")\n    if len(date_list) != 3:\n        return False\n    month, day, year = date_list\n    if int(month) > 12 or int(month) < 1:\n        return False\n    if int(day) > 31 or int(day) < 1:\n        return False\n    if int(month) == 2:\n        if int(year) % 4 == 0:\n            if int(day) > 29 or int(day) < 1:\n                return False\n        else:\n            if int(day) > 28 or int(day) < 1:\n                return False\n    if int(month) in [1, 3, 5, 7, 8, 10, 12]:\n        if int(day) > 31 or int(day) < 1:\n            return False\n    if int(month) in [4, 6, 9, 11]:\n        if int(day) > 30 or int(day) < 1:\n            return False\n    return True"
    },
    {
      "rank": 11,
      "score": 9.927076562551681,
      "candidate": "date_split = date.split('-')\n\n    if date == '':\n        return False\n\n    if (date_split[1] == '02') and (date_split[2] % 4 == 0) and (date_split[2] % 100 != 0) or (date_split[2] % 400 == 0):\n        if date_split[0] == '29' and (date_split[1] == '02'):\n            return True\n    elif date_split[1] == '02' and (date_split[2] % 4 != 0):\n        if date_split[0] == '29' and (date_split[1] == '02'):\n            return False\n\n    if (date_split[0] == '00') or (date_split[0] == '01') or (date_split[0] == '03') or (date_split[0] == '05') or (date_split[0] == '07') or (date_split[0] == '08') or (date_split[0] == '10') or (date_split[0] == '12'):\n        if (date_split[1] == '32'):\n            return False\n        elif (date_split[1] < '01') or (date_split[1] > '31'):\n            return False\n    elif (date_split[0] == '04') or (date_split[0] == '06') or (date_split[0] == '09') or (date_split[0] == '11'):\n        if (date_split[1] == '32'):\n            return False\n        elif (date_split[1] < '01') or (date_split[1] > '30'):\n            return False\n    elif (date_split[0] == '02'):\n        if (date_split[1] == '32'):\n            return False\n        elif (date_split[1] < '01') or (date_split[1] > '29'):\n            return False\n    else"
    },
    {
      "rank": 12,
      "score": 9.925248162383532,
      "candidate": "date_list = date.split('-')\n    if len(date_list) == 3:\n        month = int(date_list[0])\n        day = int(date_list[1])\n        year = int(date_list[2])\n\n        if month < 1 or month > 12:\n            return False\n        elif day < 1 or day > 31:\n            return False\n        elif year < 0 or year > 9999:\n            return False\n        elif (month == 1 or month == 3 or month == 5 or month == 7 or month == 8 or month == 10 or month == 12) and (day < 1 or day > 31):\n            return False\n        elif (month == 4 or month == 6 or month == 9 or month == 11) and (day < 1 or day > 30):\n            return False\n        elif (month == 2) and (day < 1 or day > 29):\n            return False\n        else:\n            return True\n    else:\n        return False"
    },
    {
      "rank": 13,
      "score": 9.884840307260053,
      "candidate": "pass"
    },
    {
      "rank": 14,
      "score": 9.880206440538677,
      "candidate": "if len(date) == 0:\n        return False\n    \n    if date[2] == '-':\n        if date[1] == '0' and date[0] != '0':\n            day = int(date[0])\n        else:\n            day = int(date[0:2])\n        \n        if date[5] == '-':\n            if date[4] == '0' and date[3] != '0':\n                month = int(date[3])\n            else:\n                month = int(date[3:5])\n            \n            if date[8] == '-':\n                if date[7] == '0' and date[6] != '0':\n                    year = int(date[6])\n                else:\n                    year = int(date[6:10])\n            else:\n                return False\n        else:\n            return False\n    else:\n        return False\n    \n    if day < 1 or day > 31:\n        return False\n    \n    if month < 1 or month > 12:\n        return False\n    \n    if year < 2021:\n        return False\n    \n    if month in [1,3,5,7,8,10,12]:\n        if day < 1 or day > 31:\n            return False\n    elif month in [4,6,9,11]:\n        if day < 1 or day > 30:\n            return False\n    elif month == 2:\n        if day < 1 or day > 29:\n            return False\n    else:\n        return False\n    \n    return True\n\nprint(valid_date('03-11-2000'))\nprint(valid_date('15-01-2012'))\nprint(valid_date('04-0-2040'))\nprint(valid_date('06-04-2020'))\nprint(valid_date('06/04/2020'))"
    },
    {
      "rank": 15,
      "score": 9.874560739103865,
      "candidate": "date = date.split('-')\n    month = int(date[0])\n    day = int(date[1])\n    year = int(date[2])\n    if month < 1 or month > 12:\n        return False\n    if year < 0 or year > 9999:\n        return False\n    if month in [1, 3, 5, 7, 8, 10, 12]:\n        if day < 1 or day > 31:\n            return False\n    elif month in [4, 6, 9, 11]:\n        if day < 1 or day > 30:\n            return False\n    elif month == 2:\n        if day < 1 or day > 29:\n            return False\n    return True\n\n\nif __name__ == '__main__':\n    print(valid_date('03-11-2000'))\n    print(valid_date('15-01-2012'))\n    print(valid_date('04-0-2040'))\n    print(valid_date('06-04-2020'))\n    print(valid_date('06/04/2020'))"
    },
    {
      "rank": 16,
      "score": 9.859428117689756,
      "candidate": "# your code here\n    date_list = date.split('-')\n\n    if (len(date_list) == 3) and (len(date_list[0]) == 2) and (len(date_list[1]) == 2) and (len(date_list[2]) == 4):\n        if (date_list[0] in ['01','03','05','07','08','10','12']) and (int(date_list[1]) > 0 and int(date_list[1]) < 32):\n            if (date_list[2] in ['2000','2004','2008','2012','2016','2020','2024','2028']) and (int(date_list[2][2:]) > 0 and int(date_list[2][2:]) < 40):\n                return True\n            else:\n                return False\n        elif (date_list[0] in ['04','06','09','11']) and (int(date_list[1]) > 0 and int(date_list[1]) < 31):\n            if (date_list[2] in ['2000','2004','2008','2012','2016','2020','2024','2028']) and (int(date_list[2][2:]) > 0 and int(date_list[2][2:]) < 40):\n                return True\n            else:\n                return False\n        elif (date_list[0] == '02') and (int(date_list[1]) > 0 and int(date_list[1]) < 30):\n            if (date_list[2] in ['2000','2004','2008','2012','2016','2020','2024','2028']) and (int(date_list[2][2:]) > 0 and int(date_list[2][2:]) < 40):\n                return True"
    },
    {
      "rank": 17,
      "score": 9.824486726530662,
      "candidate": "if not date:\n        return False\n    \n    try:\n        month, day, year = date.split(\"-\")\n        if int(month) in [1,3,5,7,8,10,12] and int(day) < 1 or int(day) > 31:\n            return False\n        if int(month) in [4,6,9,11] and int(day) < 1 or int(day) > 30:\n            return False\n        if int(month) == 2 and int(day) < 1 or int(day) > 29:\n            return False\n        if int(month) < 1 or int(month) > 12:\n            return False\n        return True\n    except:\n        return False"
    },
    {
      "rank": 18,
      "score": 9.772993981119697,
      "candidate": "try:\n        month, day, year = map(int, date.split(\"-\"))\n    except:\n        return False\n\n    if month not in range(1, 13):\n        return False\n\n    if day not in range(1, 32):\n        return False\n\n    if month in [1, 3, 5, 7, 8, 10, 12] and day not in range(1, 32):\n        return False\n\n    if month in [4, 6, 9, 11] and day not in range(1, 31):\n        return False\n\n    if month == 2 and day not in range(1, 29):\n        return False\n\n    return True"
    },
    {
      "rank": 19,
      "score": 9.700948343979832,
      "candidate": "pass\n\n\nprint(valid_date('03-11-2000'))\nprint(valid_date('15-01-2012'))\nprint(valid_date('04-0-2040'))\nprint(valid_date('06-04-2020'))\nprint(valid_date('06/04/2020'))"
    },
    {
      "rank": 20,
      "score": 9.694789087507244,
      "candidate": "date_list = date.split('-')\n    if len(date_list) != 3:\n        return False\n\n    if int(date_list[1]) < 1 or int(date_list[1]) > 31:\n        return False\n\n    if int(date_list[0]) < 1 or int(date_list[0]) > 12:\n        return False\n\n    if int(date_list[2]) < 1970:\n        return False\n\n    if int(date_list[0]) in [1, 3, 5, 7, 8, 10, 12]:\n        if int(date_list[1]) < 1 or int(date_list[1]) > 31:\n            return False\n    elif int(date_list[0]) in [4, 6, 9, 11]:\n        if int(date_list[1]) < 1 or int(date_list[1]) > 30:\n            return False\n    elif int(date_list[0]) == 2:\n        if int(date_list[1]) < 1 or int(date_list[1]) > 29:\n            return False\n    else:\n        return False\n\n    return True\n\n\nif __name__ == '__main__':\n    print(valid_date('03-11-2000'))\n    print(valid_date('15-01-2012'))\n    print(valid_date('04-0-2040'))\n    print(valid_date('06-04-2020'))\n    print(valid_date('06/04/2020'))"
    },
    {
      "rank": 21,
      "score": 9.634121262966971,
      "candidate": "if date == '' or len(date) != 10:\n        return False\n    \n    month = date[0:2]\n    day = date[3:5]\n    year = date[6:]\n    \n    if int(month) < 1 or int(month) > 12:\n        return False\n    \n    if int(year) < 0 or int(year) > 9999:\n        return False\n    \n    if int(day) < 1 or int(day) > 31:\n        return False\n    \n    if int(month) in [1,3,5,7,8,10,12]:\n        if int(day) < 1 or int(day) > 31:\n            return False\n        \n    if int(month) in [4,6,9,11]:\n        if int(day) < 1 or int(day) > 30:\n            return False\n        \n    if int(month) == 2:\n        if int(day) < 1 or int(day) > 29:\n            return False\n    \n    return True"
    },
    {
      "rank": 22,
      "score": 9.630369502408143,
      "candidate": "if len(date) == 0:\n        return False\n    try:\n        day, month, year = date.split('-')\n        if int(day) < 1 or int(day) > 31:\n            return False\n        if int(month) < 1 or int(month) > 12:\n            return False\n        if int(month) == 1 or int(month) == 3 or int(month) == 5 or int(month) == 7 or int(month) == 8 or int(month) == 10 or int(month) == 12:\n            if int(day) < 1 or int(day) > 31:\n                return False\n        if int(month) == 4 or int(month) == 6 or int(month) == 9 or int(month) == 11:\n            if int(day) < 1 or int(day) > 30:\n                return False\n        if int(month) == 2:\n            if int(day) < 1 or int(day) > 29:\n                return False\n        if int(year) < 0 or int(year) > 9999:\n            return False\n    except ValueError:\n        return False\n\n    return True\n\n\nif __name__ == '__main__':\n    print(valid_date('03-11-2000'))\n    print(valid_date('15-01-2012'))\n    print(valid_date('04-0-2040'))\n    print(valid_date('06-04-2020'))\n    print(valid_date('06/04/2020'))"
    },
    {
      "rank": 23,
      "score": 9.568770541871741,
      "candidate": "if date == \"\":\n        return False\n    else:\n        date_list = date.split(\"-\")\n        day = int(date_list[1])\n        month = int(date_list[0])\n        year = int(date_list[2])\n        if month == 1 or month == 3 or month == 5 or month == 7 or month == 8 or month == 10 or month == 12:\n            if day >= 1 and day <= 31:\n                return True\n            else:\n                return False\n        elif month == 4 or month == 6 or month == 9 or month == 11:\n            if day >= 1 and day <= 30:\n                return True\n            else:\n                return False\n        elif month == 2:\n            if day >= 1 and day <= 29:\n                return True\n            else:\n                return False\n        else:\n            return False\n\n\n\n\nprint(valid_date('03-11-2000'))\nprint(valid_date('15-01-2012'))\nprint(valid_date('04-0-2040'))\nprint(valid_date('06-04-2020'))\nprint(valid_date('06/04/2020'))"
    },
    {
      "rank": 24,
      "score": 9.52167993883555,
      "candidate": "if date == '':\n        return False\n    else:\n        date = date.split('-')\n        if int(date[1]) < 1 or int(date[1]) > 31:\n            return False\n        elif int(date[1]) == 31 and int(date[0]) in (4, 6, 9, 11):\n            return False\n        elif int(date[1]) == 29 and int(date[0]) != 2:\n            return False\n        elif int(date[0]) < 1 or int(date[0]) > 12:\n            return False\n        elif len(date) != 3:\n            return False\n        else:\n            return True\n\n\nprint(valid_date('03-11-2000'))\nprint(valid_date('15-01-2012'))\nprint(valid_date('04-0-2040'))\nprint(valid_date('06-04-2020'))\nprint(valid_date('06/04/2020'))"
    },
    {
      "rank": 25,
      "score": 9.510082469030056,
      "candidate": "return True\n\n\n# print(valid_date('03-11-2000'))\n# print(valid_date('15-01-2012'))\n# print(valid_date('04-0-2040'))\n# print(valid_date('06-04-2020'))\n# print(valid_date('06/04/2020'))"
    },
    {
      "rank": 26,
      "score": 8.444444444444445,
      "candidate": "pass\n\nprint(valid_date('03-11-2000')) # => True\nprint(valid_date('15-01-2012')) # => False\nprint(valid_date('04-0-2040')) # => False\nprint(valid_date('06-04-2020')) # => True\nprint(valid_date('06/04/2020')) # => False"
    },
    {
      "rank": 27,
      "score": 8.444444444444445,
      "candidate": "pass\n\n\nif __name__ == '__main__':\n    print('### Example ###')\n    print(valid_date('03-11-2000'))  # True\n    print(valid_date('15-01-2012'))  # False\n    print(valid_date('04-0-2040'))  # False\n    print(valid_date('06-04-2020'))  # True\n    print(valid_date('06/04/2020'))  # False\n\n    print('\\n### Challenge ###')\n    print(valid_date(''))  # False\n    print(valid_date('15-13-2012'))  # False\n    print(valid_date('04-0-2040'))  # False\n    print(valid_date('06-04-2020'))  # True\n    print(valid_date('06/04/2020'))  # False"
    },
    {
      "rank": 28,
      "score": 8.444444444444445,
      "candidate": "import re\n    day, month, year = date.split('-')\n    if day.isdigit() and month.isdigit() and year.isdigit():\n        if int(day) <= 0 or int(day) > 31:\n            return False\n        elif int(month) <= 0 or int(month) > 12:\n            return False\n        elif int(day) == 31 and int(month) in [4,6,9,11]:\n            return False\n        elif int(day) == 30 and int(month) == 2:\n            return False\n        elif int(day) == 29 and int(month) == 2 and int(year) % 4 != 0:\n            return False\n        else:\n            return True\n    else:\n        return False\n\n\nif __name__ == '__main__':\n    print(valid_date('03-11-2000'))\n    print(valid_date('15-01-2012'))\n    print(valid_date('04-0-2040'))\n    print(valid_date('06-04-2020'))\n    print(valid_date('06/04/2020'))"
    },
    {
      "rank": 29,
      "score": 8.444444444444445,
      "candidate": "pass\n\n\nif __name__ == \"__main__\":\n    print(valid_date('03-11-2000'))\n    print(valid_date('15-01-2012'))\n    print(valid_date('04-0-2040'))\n    print(valid_date('06-04-2020'))\n    print(valid_date('06/04/2020'))"
    },
    {
      "rank": 30,
      "score": 3.926139092254469,
      "candidate": "if date == '' or len(date) != 10:\n        return False\n\n    if date.count('-') != 2:\n        return False\n\n    month, day, year = date.split('-')\n\n    if int(month) < 1 or int(month) > 12:\n        return False\n\n    if int(day) < 1 or int(day) > 31:\n        return False\n\n    if int(month) == 2:\n        if int(day) < 1 or int(day) > 29:\n            return False\n    elif (int(month) == 1 or int(month) == 3 or int(month) == 5 or int(month) == 7 or int(month) == 8 or int(month) == 10 or int(month) == 12):\n        if int(day) < 1 or int(day) > 30:\n            return False\n    else:\n        if int(day) < 1 or int(day) > 31:\n            return False\n\n    if int(year) < 1 or int(year) > 9999:\n        return False\n\n    return True\n\n\nprint(valid_date('03-11-2000'))\nprint(valid_date('15-01-2012'))\nprint(valid_date('04-0-2040'))\nprint(valid_date('06-04-2020'))\nprint(valid_date('06/04/2020'))"
    },
    {
      "rank": 31,
      "score": 3.782321827907003,
      "candidate": "if date == \"\":\n        return False\n    if len(date) != 10:\n        return False\n    if date[2] != '-' or date[5] != '-':\n        return False\n    month = int(date[0:2])\n    day = int(date[3:5])\n    year = int(date[6:])\n    if month == 2:\n        if day < 1 or day > 29:\n            return False\n        if year % 4 == 0 and day > 29:\n            return False\n    elif month == 4 or month == 6 or month == 9 or month == 11:\n        if day < 1 or day > 30:\n            return False\n    elif month == 1 or month == 3 or month == 5 or month == 7 or month == 8 or month == 10 or month == 12:\n        if day < 1 or day > 31:\n            return False\n    else:\n        return False\n    if month < 1 or month > 12:\n        return False\n    return True\n\nprint(valid_date('03-11-2000')) # => True\nprint(valid_date('15-01-2012')) # => False\nprint(valid_date('04-0-2040')) # => False\nprint(valid_date('06-04-2020')) # => True\nprint(valid_date('06/04/2020')) # => False"
    },
    {
      "rank": 32,
      "score": 3.738947022370758,
      "candidate": "import re\n    import datetime\n    month_days = [0, 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n    if not date:\n        return False\n    if not re.match(r'^[0-1]?[0-9]-[0-3]?[0-9]-[1-2]?[0-9]{3}$', date):\n        return False\n    month, day, year = date.split('-')\n    if int(month) > 12 or int(month) < 1:\n        return False\n    if int(day) > month_days[int(month)] or int(day) < 1:\n        return False\n    try:\n        datetime.datetime(int(year), int(month), int(day))\n        return True\n    except:\n        return False\n\n\nif __name__ == '__main__':\n    print(valid_date('03-11-2000'))\n    print(valid_date('15-01-2012'))\n    print(valid_date('04-0-2040'))\n    print(valid_date('06-04-2020'))\n    print(valid_date('06/04/2020'))"
    },
    {
      "rank": 33,
      "score": 3.732824384460777,
      "candidate": "pass\n\nprint(valid_date('03-11-2000')) # => True\n\nprint(valid_date('15-01-2012')) # => False\n\nprint(valid_date('04-0-2040')) # => False\n\nprint(valid_date('06-04-2020')) # => True\n\nprint(valid_date('06/04/2020')) # => False"
    },
    {
      "rank": 34,
      "score": 3.6781200142854114,
      "candidate": "if date == '':\n        return False\n    else:\n        day = date.split('-')[1]\n        month = date.split('-')[0]\n        year = date.split('-')[2]\n        if int(day) < 1 or int(day) > 31:\n            return False\n        elif int(month) < 1 or int(month) > 12:\n            return False\n        elif int(day) < 1 or int(day) > 30:\n            return False\n        elif int(month) == 2:\n            if int(day) < 1 or int(day) > 29:\n                return False\n        else:\n            return True\n\n\nprint(valid_date('03-11-2000')) # => True\n\nprint(valid_date('15-01-2012')) # => False\n\nprint(valid_date('04-0-2040')) # => False\n\nprint(valid_date('06-04-2020')) # => True\n\nprint(valid_date('06/04/2020')) # => False"
    },
    {
      "rank": 35,
      "score": 3.5154997612479755,
      "candidate": "if date == \"\":\n        return False\n    try:\n        month, day, year = date.split(\"-\")\n    except:\n        return False\n    try:\n        month = int(month)\n        day = int(day)\n        year = int(year)\n    except:\n        return False\n\n    if not (0 < month < 13):\n        return False\n    if month in [1, 3, 5, 7, 8, 10, 12]:\n        if not (1 <= day <= 31):\n            return False\n    elif month in [4, 6, 9, 11]:\n        if not (1 <= day <= 30):\n            return False\n    elif month == 2:\n        if not (1 <= day <= 29):\n            return False\n    else:\n        return False\n    return True\n\n\n# 1.0\ndef valid_date_1_0(date):\n    \"\"\"You have to write a function which validates a given date string and\n    returns True if the date is valid otherwise False.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/"
    },
    {
      "rank": 36,
      "score": 3.501766448946012,
      "candidate": "try:\n        date_list = date.split(\"-\")\n        if len(date_list) != 3:\n            return False\n        if int(date_list[0]) < 1 or int(date_list[0]) > 12:\n            return False\n        if int(date_list[1]) < 1 or int(date_list[1]) > 31:\n            return False\n        if int(date_list[0]) in [1,3,5,7,8,10,12] and int(date_list[1]) > 31:\n            return False\n        if int(date_list[0]) in [4,6,9,11] and int(date_list[1]) > 30:\n            return False\n        if int(date_list[0]) == 2 and int(date_list[1]) > 29:\n            return False\n        if int(date_list[0]) == 2 and int(date_list[1]) == 29 and date_list[2] % 4 != 0:\n            return False\n        return True\n    except:\n        return False\n\nif __name__ == '__main__':\n    print(valid_date('03-11-2000')) # => True\n\n    print(valid_date('15-01-2012')) # => False\n\n    print(valid_date('04-0-2040')) # => False\n\n    print(valid_date('06-04-2020')) # => True\n\n    print(valid_date('06/04/2020')) # => False"
    },
    {
      "rank": 37,
      "score": 3.4656400595580994,
      "candidate": "try:\n        month, day, year = date.split('-')\n        month = int(month)\n        day = int(day)\n        year = int(year)\n    except:\n        return False\n    if month > 12 or month < 1:\n        return False\n    if day < 1 or day > 31:\n        return False\n    if month in (1, 3, 5, 7, 8, 10, 12):\n        if day < 1 or day > 31:\n            return False\n    if month in (4, 6, 9, 11):\n        if day < 1 or day > 30:\n            return False\n    if month == 2:\n        if day < 1 or day > 29:\n            return False\n    return True\n\n\n# 1\ndef sum_numbers(number):\n    \"\"\"You have to write a function which returns the sum of numbers in a list.\n    for example:\n    sum_numbers([1, 2, 3, 4, 5]) => 15\n    sum_numbers([0, 1, 2, 3, 4, 5]) => 15\n    sum_numbers([-1, -2, -3, -4, -5]) => -15\n    sum_numbers([-1, 2, 3, 4, 5]) => 13\n    \"\"\"\n    return sum(number)\n\n\n# 2\ndef reverse_string(string):\n    \"\"\"You have to write a function which reverses a given string.\n    for example:\n    reverse_string('abc') => 'cba'\n    reverse_string('abcd') => 'dcba'\n    reverse_string('abcde') => 'edcba'\n    \"\"\"\n    return string[::-1]\n\n\n# 3\ndef first_non_repeating_letter(string):\n    \"\"\"You have to write a function which returns the first non-repeating character in a given string.\n    If there is no such character, return None.\n    for example:\n    first_non_repeating_letter('stress') =>"
    },
    {
      "rank": 38,
      "score": 3.457701058851037,
      "candidate": "if not date:\n        return False\n    try:\n        month, day, year = date.split('-')\n    except:\n        return False\n\n    if int(month) not in range(1, 13) or int(day) not in range(1, 32):\n        return False\n\n    if int(month) in [1, 3, 5, 7, 8, 10, 12]:\n        if int(day) not in range(1, 32):\n            return False\n    elif int(month) in [4, 6, 9, 11]:\n        if int(day) not in range(1, 31):\n            return False\n    else:\n        if int(day) not in range(1, 30):\n            return False\n\n    if len(year) != 4:\n        return False\n\n    return True\n\n\nprint(valid_date('03-11-2000'))  # => True\nprint(valid_date('15-01-2012'))  # => False\nprint(valid_date('04-0-2040'))  # => False\nprint(valid_date('06-04-2020'))  # => True\nprint(valid_date('06/04/2020'))  # => False"
    },
    {
      "rank": 39,
      "score": 3.4112724560515946,
      "candidate": "pass\n\nprint(valid_date('03-11-2000')) # => True\nprint(valid_date('15-01-2012')) # => False\nprint(valid_date('04-0-2040')) # => False\nprint(valid_date('06-04-2020')) # => True\nprint(valid_date('06/04/2020')) # => False"
    },
    {
      "rank": 40,
      "score": 3.410951252187612,
      "candidate": "# Write your code here.\n    pass\n\ndef valid_date(date):\n    if date == '':\n        return False\n    day, month, year = date.split('-')\n    if int(day) < 1 or int(day) > 31:\n        return False\n    if int(month) < 1 or int(month) > 12:\n        return False\n    if int(month) in [1,3,5,7,8,10,12]:\n        if int(day) < 1 or int(day) > 31:\n            return False\n    if int(month) in [4,6,9,11]:\n        if int(day) < 1 or int(day) > 30:\n            return False\n    if int(month) == 2:\n        if int(day) < 1 or int(day) > 29:\n            return False\n    return True\n\nprint(valid_date('03-11-2000')) # => True\nprint(valid_date('15-01-2012')) # => False\nprint(valid_date('04-0-2040')) # => False\nprint(valid_date('06-04-2020')) # => True\nprint(valid_date('06/04/2020')) # => False"
    },
    {
      "rank": 41,
      "score": 3.406262911197099,
      "candidate": "if not date:\n        return False\n\n    date_parts = date.split('-')\n    if len(date_parts) != 3:\n        return False\n\n    month, day, year = date_parts\n    if not month.isdigit() or not day.isdigit() or not year.isdigit():\n        return False\n\n    month = int(month)\n    day = int(day)\n    year = int(year)\n\n    if not (1 <= month <= 12):\n        return False\n\n    if month in (1, 3, 5, 7, 8, 10, 12):\n        return 1 <= day <= 31 and 2000 <= year\n    if month in (4, 6, 9, 11):\n        return 1 <= day <= 30 and 2000 <= year\n    return 1 <= day <= 29 and 2000 <= year\n\n\nif __name__ == '__main__':\n    print(valid_date('03-11-2000'))\n    print(valid_date('15-01-2012'))\n    print(valid_date('04-0-2040'))\n    print(valid_date('06-04-2020'))\n    print(valid_date('06/04/2020'))"
    },
    {
      "rank": 42,
      "score": 3.3837173645764542,
      "candidate": "import re\n    import datetime\n    date_pattern = r'^[0-9]{1,2}-[0-9]{1,2}-[0-9]{4}$'\n    date_format = re.compile(date_pattern)\n    if not date_format.match(date):\n        return False\n    else:\n        month, day, year = date.split('-')\n        if int(month) in range(1,13) and int(day) in range(1,32) and int(year) > 0:\n            try:\n                datetime.date(int(year),int(month),int(day))\n                return True\n            except ValueError:\n                return False\n        else:\n            return False\n\nif __name__ == '__main__':\n    print(valid_date('03-11-2000'))\n\n    print(valid_date('15-01-2012'))\n\n    print(valid_date('04-0-2040'))\n\n    print(valid_date('06-04-2020'))\n\n    print(valid_date('06/04/2020'))"
    },
    {
      "rank": 43,
      "score": 3.3238442690503462,
      "candidate": "# Write your code here.\n    try:\n        month, day, year = date.split('-')\n        if len(date) == 0:\n            return False\n        if int(month) in [1,3,5,7,8,10,12]:\n            if int(day) < 1 or int(day) > 31:\n                return False\n        elif int(month) in [4,6,9,11]:\n            if int(day) < 1 or int(day) > 30:\n                return False\n        elif int(month) == 2:\n            if int(day) < 1 or int(day) > 29:\n                return False\n        if int(month) < 1 or int(month) > 12:\n            return False\n        if len(month) != 2 or len(day) != 2 or len(year) != 4:\n            return False\n        return True\n    except:\n        return False\n    \n\nif __name__ == '__main__':\n    print(valid_date('03-11-2000')) # => True\n\n    print(valid_date('15-01-2012')) # => False\n\n    print(valid_date('04-0-2040')) # => False\n\n    print(valid_date('06-04-2020')) # => True\n\n    print(valid_date('06/04/2020')) # => False"
    },
    {
      "rank": 44,
      "score": 3.305838144420434,
      "candidate": "if date == '':\n        return False\n    try:\n        month, day, year = date.split('-')\n    except ValueError:\n        return False\n    if len(month) != 2 or len(day) != 2 or len(year) != 4:\n        return False\n    if int(month) < 1 or int(month) > 12:\n        return False\n    if int(month) in (1, 3, 5, 7, 8, 10, 12):\n        if int(day) < 1 or int(day) > 31:\n            return False\n    elif int(month) in (4, 6, 9, 11):\n        if int(day) < 1 or int(day) > 30:\n            return False\n    elif int(month) == 2:\n        if int(day) < 1 or int(day) > 29:\n            return False\n    else:\n        return False\n    return True\n\n\ndef valid_date1(date):\n    \"\"\"You have to write a function which validates a given date string and\n    returns True if the date is valid otherwise False.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\n    valid_date('06-"
    },
    {
      "rank": 45,
      "score": 3.2712800217929825,
      "candidate": "# Write your code here.\n    month_length = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n\n    if len(date) == 0:\n        return False\n\n    if date.count('-') != 2:\n        return False\n\n    month, day, year = date.split('-')\n    month = int(month)\n    day = int(day)\n    year = int(year)\n\n    if month < 1 or month > 12:\n        return False\n\n    if day < 1 or day > month_length[month - 1]:\n        return False\n\n    if month == 2 and day == 29:\n        if year % 400 == 0:\n            return True\n        elif year % 100 == 0:\n            return False\n        elif year % 4 == 0:\n            return True\n        else:\n            return False\n\n    return True\n\n\nprint(valid_date('03-11-2000'))\nprint(valid_date('15-01-2012'))\nprint(valid_date('04-0-2040'))\nprint(valid_date('06-04-2020'))\nprint(valid_date('06/04/2020'))\nprint(valid_date('04-02-2020'))\nprint(valid_date('04-30-2020'))\nprint(valid_date('04-31-2020'))\nprint(valid_date('02-29-2020'))\nprint(valid_date('04-29-2020'))\nprint(valid_date('02-29-2021'))\nprint(valid_date('04-29-2021'))\nprint(valid_date('02-29-2024'))\nprint(valid_date('04-29-2024'))"
    },
    {
      "rank": 46,
      "score": 3.256633716556678,
      "candidate": "if len(date) < 1:\n        return False\n\n    #split the date string into month, day and year\n    date_split = date.split('-')\n    if len(date_split) != 3:\n        return False\n\n    month = int(date_split[0])\n    day = int(date_split[1])\n    year = int(date_split[2])\n\n    if month < 1 or month > 12:\n        return False\n\n    if day < 1 or day > 31:\n        return False\n\n    if month in [1, 3, 5, 7, 8, 10, 12]:\n        if day < 1 or day > 31:\n            return False\n    elif month in [4, 6, 9, 11]:\n        if day < 1 or day > 30:\n            return False\n    elif month == 2:\n        if day < 1 or day > 29:\n            return False\n\n    return True\n\nprint(valid_date('03-11-2000')) # => True\nprint(valid_date('15-01-2012')) # => False\nprint(valid_date('04-0-2040')) # => False\nprint(valid_date('06-04-2020')) # => True\nprint(valid_date('06/04/2020')) # => False"
    },
    {
      "rank": 47,
      "score": 3.2483570765056164,
      "candidate": "import re\n    import calendar\n    if date == \"\":\n        return False\n    pattern = re.compile(r'^[0-9]{2}-[0-9]{2}-[0-9]{4}$')\n    if not pattern.match(date):\n        return False\n    else:\n        date_list = date.split('-')\n        if int(date_list[0]) > 12:\n            return False\n        if int(date_list[0]) in [1,3,5,7,8,10,12]:\n            if int(date_list[1]) > 31 or int(date_list[1]) < 1:\n                return False\n        if int(date_list[0]) in [4,6,9,11]:\n            if int(date_list[1]) > 30 or int(date_list[1]) < 1:\n                return False\n        if int(date_list[0]) == 2:\n            if int(date_list[1]) > 29 or int(date_list[1]) < 1:\n                return False\n        if calendar.monthrange(int(date_list[2]),int(date_list[0]))[1] < int(date_list[1]):\n            return False\n    return True\n\nif __name__ == '__main__':\n    print(\"Example:\")\n    print(valid_date('03-11-2000'))\n\n    # These \"asserts\" are used for self-checking and not for an auto-testing\n    assert valid_date('03-11-2000') == True\n    assert valid_date('15-01-2012') == False\n    assert valid_date('04-0-2040') == False\n    assert valid_date('06-04-2020') == True\n    assert valid_date('06/04/2020') == False\n    assert valid_date('') == False\n    print(\"Coding complete? Click 'Check' to earn cool rewards!\")"
    },
    {
      "rank": 48,
      "score": 3.1878490091728358,
      "candidate": "# Write your code here.\n    date_list = date.split('-')\n    if len(date_list) != 3:\n        return False\n    month = int(date_list[0])\n    day = int(date_list[1])\n    year = int(date_list[2])\n    if month < 1 or month > 12:\n        return False\n    if day < 1 or day > 31:\n        if month in [1, 3, 5, 7, 8, 10, 12]:\n            return False\n        if month in [4, 6, 9, 11]:\n            if day > 30:\n                return False\n        if month == 2:\n            if day > 29:\n                return False\n    return True\n\nprint(valid_date('03-11-2000')) # => True\n\nprint(valid_date('15-01-2012')) # => False\n\nprint(valid_date('04-0-2040')) # => False\n\nprint(valid_date('06-04-2020')) # => True\n\nprint(valid_date('06/04/2020')) # => False"
    },
    {
      "rank": 49,
      "score": 3.180697802754207,
      "candidate": "if date == '' or len(date) != 10:\n        return False\n    month = int(date[0:2])\n    day = int(date[3:5])\n    year = int(date[6:])\n    if month > 12 or month < 1:\n        return False\n    if day > 31 or day < 1:\n        return False\n    if month in (1, 3, 5, 7, 8, 10, 12):\n        if day > 31 or day < 1:\n            return False\n    if month in (4, 6, 9, 11):\n        if day > 30 or day < 1:\n            return False\n    if month == 2:\n        if day > 29 or day < 1:\n            return False\n    if month == 2 and day == 29 and year % 4 != 0:\n        return False\n    return True\n\n\nif __name__ == '__main__':\n    print(valid_date('03-11-2000'))\n    print(valid_date('15-01-2012'))\n    print(valid_date('04-0-2040'))\n    print(valid_date('06-04-2020'))\n    print(valid_date('06/04/2020'))"
    },
    {
      "rank": 50,
      "score": 3.178556285755873,
      "candidate": "# 1. The date string is not empty.\n    if not date:\n        return False\n    # 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    month, day, year = date.split('-')\n    if not (1 <= int(month) <= 12):\n        return False\n    if not (1 <= int(day) <= 31):\n        return False\n    if month in ['1', '3', '5', '7', '8', '10', '12']:\n        if not (1 <= int(day) <= 31):\n            return False\n    elif month in ['4', '6', '9', '11']:\n        if not (1 <= int(day) <= 30):\n            return False\n    elif month in ['2']:\n        if not (1 <= int(day) <= 29):\n            return False\n    # 3. The months should not be less than 1 or higher than 12.\n    # 4. The date should be in the format: mm-dd-yyyy\n    return True\n\ndef valid_date_2(date):\n    \"\"\"You have to write a function which validates a given date string and\n    returns True if the date is valid otherwise False.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 1"
    },
    {
      "rank": 51,
      "score": 3.1718091447842305,
      "candidate": "import re\n    if len(date) == 0:\n        return False\n    date_pattern = r'^\\d{2}\\-\\d{2}\\-\\d{4}$'\n    if not re.match(date_pattern, date):\n        return False\n    day, month, year = date.split('-')\n    day = int(day)\n    month = int(month)\n    year = int(year)\n    if month in (1, 3, 5, 7, 8, 10, 12):\n        if not (1 <= day <= 31):\n            return False\n    elif month in (4, 6, 9, 11):\n        if not (1 <= day <= 30):\n            return False\n    elif month == 2:\n        if not (1 <= day <= 29):\n            return False\n    else:\n        return False\n    return True\n\n\nif __name__ == '__main__':\n    print(valid_date('03-11-2000'))\n    print(valid_date('15-01-2012'))\n    print(valid_date('04-0-2040'))\n    print(valid_date('06-04-2020'))\n    print(valid_date('06/04/2020'))\n    print(valid_date('01-12-2021'))\n    print(valid_date('04-31-2021'))\n    print(valid_date('07-31-2021'))\n    print(valid_date('13-31-2021'))"
    },
    {
      "rank": 52,
      "score": 3.165631715701782,
      "candidate": "if date == \"\":\n        return False\n    try:\n        month, day, year = date.split('-')\n        if not (1 <= int(month) <= 12):\n            return False\n        if not (1 <= int(day) <= 31):\n            return False\n        if int(month) in [1, 3, 5, 7, 8, 10, 12] and not (1 <= int(day) <= 31):\n            return False\n        if int(month) in [4, 6, 9, 11] and not (1 <= int(day) <= 30):\n            return False\n        if int(month) == 2 and not (1 <= int(day) <= 29):\n            return False\n        if not (2021 <= int(year) <= 2050):\n            return False\n    except:\n        return False\n    return True\n\n\ndef test_valid_date():\n\n    assert valid_date('03-11-2000') == True\n    assert valid_date('15-01-2012') == False\n    assert valid_date('04-0-2040') == False\n    assert valid_date('06-04-2020') == True\n    assert valid_date('06/04/2020') == False\n\n    print(\"Passed\")\n\n\ntest_valid_date()"
    },
    {
      "rank": 53,
      "score": 3.1620419846973977,
      "candidate": "if not date:\n        return False\n    try:\n        day, month, year = date.split('-')\n        month, day, year = int(month), int(day), int(year)\n    except:\n        return False\n    if month not in range(1, 13):\n        return False\n    if day not in range(1, 32):\n        return False\n    if month in [1, 3, 5, 7, 8, 10, 12] and day not in range(1, 32):\n        return False\n    if month in [4, 6, 9, 11] and day not in range(1, 31):\n        return False\n    if month == 2 and day not in range(1, 30):\n        return False\n    if year < 0:\n        return False\n    return True\n\n\nif __name__ == '__main__':\n    print(valid_date('03-11-2000'))\n    print(valid_date('15-01-2012'))\n    print(valid_date('04-0-2040'))\n    print(valid_date('06-04-2020'))\n    print(valid_date('06/04/2020'))"
    },
    {
      "rank": 54,
      "score": 3.157123666297637,
      "candidate": "def get_month_days(month):\n        month = int(month)\n        if month in [1, 3, 5, 7, 8, 10, 12]:\n            return 31\n        elif month in [4, 6, 9, 11]:\n            return 30\n        else:\n            return 29\n\n    if date == \"\":\n        return False\n    try:\n        month, day, year = date.split(\"-\")\n        return (\n            get_month_days(month) >= int(day) >= 1\n            and int(month) in range(1, 13)\n            and len(date) == 10\n        )\n    except:\n        return False\n\n\ndef test_valid_date():\n\n    assert valid_date(\"03-11-2000\") == True\n    assert valid_date(\"15-01-2012\") == False\n    assert valid_date(\"04-0-2040\") == False\n    assert valid_date(\"06-04-2020\") == True\n    assert valid_date(\"06/04/2020\") == False\n    assert valid_date(\"04-29-2020\") == True\n\n\nif __name__ == \"__main__\":\n    test_valid_date()"
    },
    {
      "rank": 55,
      "score": 3.1209811357830173,
      "candidate": "try:\n        month, day, year = date.split('-')\n        if int(month) < 1 or int(month) > 12:\n            return False\n        if int(day) < 1 or int(day) > 31:\n            return False\n        if int(month) in [1, 3, 5, 7, 8, 10, 12]:\n            if int(day) < 1 or int(day) > 31:\n                return False\n        elif int(month) in [4, 6, 9, 11]:\n            if int(day) < 1 or int(day) > 30:\n                return False\n        elif int(month) == 2:\n            if int(year) % 4 != 0:\n                if int(day) < 1 or int(day) > 28:\n                    return False\n            elif int(year) % 100 != 0:\n                if int(day) < 1 or int(day) > 29:\n                    return False\n            elif int(year) % 400 != 0:\n                if int(day) < 1 or int(day) > 29:\n                    return False\n            else:\n                if int(day) < 1 or int(day) > 28:\n                    return False\n        return True\n    except:\n        return False\n\n\ndef valid_date2(date):\n    \"\"\"You have to write a function which validates a given date string and\n    returns True if the date is valid otherwise False.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or"
    },
    {
      "rank": 56,
      "score": 3.104431797502378,
      "candidate": "# 1. The date string is not empty.\n    if date == \"\":\n        return False\n\n    # 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    days = date.split('-')[1]\n    if int(days) < 1 or int(days) > 31:\n        if (int(date.split('-')[0]) % 2 == 0):\n            if int(days) < 1 or int(days) > 30:\n                return False\n        else:\n            if int(days) < 1 or int(days) > 31:\n                return False\n\n    # 3. The months should not be less than 1 or higher than 12.\n    if int(date.split('-')[0]) < 1 or int(date.split('-')[0]) > 12:\n        return False\n\n    # 4. The date should be in the format: mm-dd-yyyy\n    if len(date.split('-')) != 3:\n        return False\n\n    # 5. The year should not be before 1900\n    if int(date.split('-')[2]) < 1900:\n        return False\n\n    return True\n\n\n\n# test\nprint(valid_date('03-11-2000'))\nprint(valid_date('15-01-2012'))\nprint(valid_date('04-0-2040'))\nprint(valid_date('06-04-2020'))\nprint(valid_date('06/04/2020'))"
    },
    {
      "rank": 57,
      "score": 3.0984306179345618,
      "candidate": "if len(date) == 0:\n        return False\n\n    date_list = date.split('-')\n\n    if len(date_list) != 3:\n        return False\n\n    day, month, year = date_list\n\n    month = int(month)\n    day = int(day)\n    year = int(year)\n\n    if day < 1 or day > 31:\n        return False\n\n    if month < 1 or month > 12:\n        return False\n\n    if month in [1, 3, 5, 7, 8, 10, 12] and day > 31:\n        return False\n\n    if month in [4, 6, 9, 11] and day > 30:\n        return False\n\n    if month == 2 and day > 29:\n        return False\n\n    return True\n\n\nif __name__ == '__main__':\n    print(valid_date('03-11-2000'))\n    print(valid_date('15-01-2012'))\n    print(valid_date('04-0-2040'))\n    print(valid_date('06-04-2020'))\n    print(valid_date('06/04/2020'))"
    },
    {
      "rank": 58,
      "score": 3.085684140594985,
      "candidate": "# write your code here\n    return False\n\nif __name__ == '__main__':\n    print(\"Example:\")\n    print(valid_date('03-11-2000'))\n\n    # These \"asserts\" are used for self-checking and not for an auto-testing\n    assert valid_date('03-11-2000') == True\n    assert valid_date('15-01-2012') == False\n    assert valid_date('04-0-2040') == False\n    assert valid_date('06-04-2020') == True\n    assert valid_date('06/04/2020') == False\n    assert valid_date('12-01-2019') == True\n    assert valid_date('12/01/2019') == False\n    assert valid_date('12-01-201') == False\n    assert valid_date('00-11-2000') == False\n    assert valid_date('15-13-2012') == False\n    assert valid_date('04-31-2040') == False\n    assert valid_date('06-05-2020') == False\n    assert valid_date('06/04/2020') == False\n    assert valid_date('06-04-202') == False\n    assert valid_date('06-04-2021') == False\n    assert valid_date('06-04-2019') == True\n    assert valid_date('06-04-2000') == False\n    assert valid_date('06-04-1990') == False\n    assert valid_date('06-04-1999') == False\n    assert valid_date('02-29-2000') == False\n    assert valid_date('02-29-2004') == False\n    assert valid_date('02-29-2400') == False\n    assert valid"
    },
    {
      "rank": 59,
      "score": 3.055461294854933,
      "candidate": "if date == \"\":\n        return False\n    month, day, year = date.split(\"-\")\n    month, day, year = int(month), int(day), int(year)\n    if (month == 2 and day > 29) or (month in [1, 3, 5, 7, 8, 10, 12] and day > 31) or (month in [4, 6, 9, 11] and day > 30) or (month < 1 or month > 12):\n        return False\n    return True\n\nif __name__ == '__main__':\n    print(valid_date('03-11-2000')) # => True\n\n    print(valid_date('15-01-2012')) # => False\n\n    print(valid_date('04-0-2040')) # => False\n\n    print(valid_date('06-04-2020')) # => True\n\n    print(valid_date('06/04/2020')) # => False"
    },
    {
      "rank": 60,
      "score": 3.0485387746740202,
      "candidate": "if date == '':\n        return False\n\n    date = date.split('-')\n\n    if len(date) != 3:\n        return False\n\n    month, day, year = date\n\n    if int(month) > 12 or int(month) < 1:\n        return False\n\n    if int(day) > 31 or int(day) < 1:\n        return False\n\n    if int(month) in [1, 3, 5, 7, 8, 10, 12]:\n        if int(day) > 31 or int(day) < 1:\n            return False\n    elif int(month) in [4, 6, 9, 11]:\n        if int(day) > 30 or int(day) < 1:\n            return False\n    elif int(month) == 2:\n        if int(day) > 29 or int(day) < 1:\n            return False\n    else:\n        return False\n\n    if int(year) < 2020 or int(year) > 2020:\n        return False\n\n    return True\n\n\nprint(valid_date('03-11-2000'))  # => True\nprint(valid_date('15-01-2012'))  # => False\nprint(valid_date('04-0-2040'))   # => False\nprint(valid_date('06-04-2020'))  # => True\nprint(valid_date('06/04/2020'))  # => False"
    },
    {
      "rank": 61,
      "score": 3.045880388267751,
      "candidate": "import datetime\n    import re\n\n    if re.search(r\"^\\d{2}-\\d{2}-\\d{4}$\", date) is None:\n        return False\n    else:\n        day, month, year = date.split(\"-\")\n        try:\n            datetime.datetime(int(year), int(month), int(day))\n        except ValueError:\n            return False\n        else:\n            return True\n\n\ndef valid_date_2(date):\n    \"\"\"You have to write a function which validates a given date string and\n    returns True if the date is valid otherwise False.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n    \"\"\"\n\n    import datetime\n\n    if re.search(r\"^\\d{2}-\\d{2}-\\d{4}$\", date) is None:\n        return False\n    else:\n        day, month, year = date.split(\"-\")\n        try:\n            datetime.datetime(int(year), int(month), int(day))\n        except ValueError:\n            return False\n        else:\n            return True\n\n\ndef valid_date_3(date"
    },
    {
      "rank": 62,
      "score": 3.033764102343962,
      "candidate": "try:\n        month, day, year = date.split(\"-\")\n        if int(month) in [1, 3, 5, 7, 8, 10, 12]:\n            if int(day) < 1 or int(day) > 31:\n                return False\n        elif int(month) in [4, 6, 9, 11]:\n            if int(day) < 1 or int(day) > 30:\n                return False\n        elif int(month) == 2:\n            if int(day) < 1 or int(day) > 29:\n                return False\n        elif int(month) < 1 or int(month) > 12:\n            return False\n        return True\n    except:\n        return False\n\n\nif __name__ == '__main__':\n    print(valid_date('03-11-2000'))  # => True\n\n    print(valid_date('15-01-2012'))  # => False\n\n    print(valid_date('04-0-2040'))  # => False\n\n    print(valid_date('06-04-2020'))  # => True\n\n    print(valid_date('06/04/2020'))  # => False"
    },
    {
      "rank": 63,
      "score": 2.993251387631033,
      "candidate": "if date.count('-') != 2:\n        return False\n    \n    month, day, year = date.split('-')\n    \n    month = int(month)\n    day = int(day)\n    year = int(year)\n\n    if month < 1 or month > 12:\n        return False\n    \n    if day < 1 or day > 31:\n        if month in [4, 6, 9, 11]:\n            if day < 1 or day > 30:\n                return False\n        elif month == 2:\n            if day < 1 or day > 29:\n                return False\n        else:\n            return False\n    \n    return True\n\nif __name__ == '__main__':\n    print(valid_date('03-11-2000')) # => True\n\n    print(valid_date('15-01-2012')) # => False\n\n    print(valid_date('04-0-2040')) # => False\n\n    print(valid_date('06-04-2020')) # => True\n\n    print(valid_date('06/04/2020')) # => False"
    },
    {
      "rank": 64,
      "score": 2.982086980445024,
      "candidate": "if len(date) == 0:\n        return False\n\n    day, month, year = date.split('-')\n\n    if len(day) == 0 or len(month) == 0 or len(year) == 0:\n        return False\n\n    if int(day) < 1 or int(day) > 31:\n        return False\n\n    if int(month) < 1 or int(month) > 12:\n        return False\n\n    if int(month) == 2:\n        if int(year) % 4 == 0:\n            if int(day) < 1 or int(day) > 29:\n                return False\n        else:\n            if int(day) < 1 or int(day) > 28:\n                return False\n\n    if int(month) in [1, 3, 5, 7, 8, 10, 12]:\n        if int(day) < 1 or int(day) > 31:\n            return False\n\n    if int(month) in [4, 6, 9, 11]:\n        if int(day) < 1 or int(day) > 30:\n            return False\n\n    return True\n\ndef valid_date_2(date):\n    \"\"\"You have to write a function which validates a given date string and\n    returns True if the date is valid otherwise False.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-"
    },
    {
      "rank": 65,
      "score": 2.963994939209833,
      "candidate": "if date == '':\n        return False\n    try:\n        month, day, year = date.split('-')\n    except:\n        return False\n    try:\n        day = int(day)\n        month = int(month)\n        year = int(year)\n    except:\n        return False\n    if month in [1,3,5,7,8,10,12] and day < 1 or day > 31:\n        return False\n    if month in [4,6,9,11] and day < 1 or day > 30:\n        return False\n    if month == 2 and day < 1 or day > 29:\n        return False\n    if month < 1 or month > 12:\n        return False\n    return True\n\nprint(valid_date('03-11-2000')) # => True\nprint(valid_date('15-01-2012')) # => False\nprint(valid_date('04-0-2040')) # => False\nprint(valid_date('06-04-2020')) # => True\nprint(valid_date('06/04/2020')) # => False"
    },
    {
      "rank": 66,
      "score": 2.94217585880588,
      "candidate": "try:\n        month, day, year = date.split('-')\n        month = int(month)\n        day = int(day)\n        year = int(year)\n    except:\n        return False\n    \n    if month < 1 or month > 12:\n        return False\n    \n    if month in [1, 3, 5, 7, 8, 10, 12]:\n        if day < 1 or day > 31:\n            return False\n    elif month in [4, 6, 9, 11]:\n        if day < 1 or day > 30:\n            return False\n    elif month == 2:\n        if day < 1 or day > 29:\n            return False\n    else:\n        return False\n\n    return True"
    },
    {
      "rank": 67,
      "score": 2.930867849414408,
      "candidate": "# your code goes here\n    if date == '':\n        return False\n    months = [1,3,5,7,8,10,12]\n    days = 31\n    if date[-4:] == '0000':\n        return False\n    if len(date) != 10:\n        return False\n    if date[2] != '-' or date[5] != '-':\n        return False\n    if int(date[:2]) not in months:\n        if int(date[:2]) > 12:\n            return False\n        if int(date[:2]) < 1:\n            return False\n    if int(date[3:5]) > days:\n        return False\n    if int(date[3:5]) < 1:\n        return False\n    return True\n\nif __name__ == '__main__':\n    print(\"Example:\")\n    print(valid_date('03-11-2000'))\n\n    # These \"asserts\" are used for self-checking and not for an auto-testing\n    assert valid_date('03-11-2000') == True\n    assert valid_date('15-01-2012') == False\n    assert valid_date('04-0-2040') == False\n    assert valid_date('06-04-2020') == True\n    assert valid_date('06/04/2020') == False\n    assert valid_date('10-04-2020') == True\n    assert valid_date('10/04/2020') == False\n    assert valid_date('10-4-2020') == False\n    assert valid_date('10/4/2020') == False\n    assert valid_date('03-11-1999') == False\n    assert valid_date('03-11-2000') == True\n    assert valid_date('03-11-2020') == True\n    assert valid_date('03-11-2021') == False\n    assert valid"
    },
    {
      "rank": 68,
      "score": 2.9071705116680913,
      "candidate": "import datetime\n    import re\n    #write your code here\n    if date != \"\":\n        date_pattern = re.compile(r'^[0-9]{2}\\-[0-9]{2}\\-[0-9]{4}$')\n        if date_pattern.match(date) and datetime.datetime.strptime(date, '%m-%d-%Y').date().month in range(1,13) and datetime.datetime.strptime(date, '%m-%d-%Y').date().day in range(1,32) and datetime.datetime.strptime(date, '%m-%d-%Y').date().year in range(1970,2100):\n            return True\n    return False\n\nif __name__ == '__main__':\n    print(\"Example:\")\n    print(valid_date('03-11-2000'))\n\n    # These \"asserts\" are used for self-checking and not for an auto-testing\n    assert valid_date('03-11-2000') == True\n    assert valid_date('15-01-2012') == False\n    assert valid_date('04-0-2040') == False\n    assert valid_date('06-04-2020') == True\n    assert valid_date('06/04/2020') == False\n    assert valid_date('13-04-1999') == False\n    print(\"Coding complete? Click 'Check' to earn cool rewards!\")"
    },
    {
      "rank": 69,
      "score": 2.890164056081244,
      "candidate": "if date == \"\":\n        return False\n    try:\n        m, d, y = date.split('-')\n        m, d, y = int(m), int(d), int(y)\n    except:\n        return False\n    if not (1 <= m <= 12):\n        return False\n    if not (1 <= d <= 31):\n        return False\n    if m % 2 == 0:\n        if not (1 <= d <= 30):\n            return False\n    else:\n        if not (1 <= d <= 31):\n            return False\n    if not (1900 <= y <= 2021):\n        return False\n    return True\n\n\ndef test_valid_date():\n    assert valid_date('03-11-2000') == True\n    assert valid_date('15-01-2012') == False\n    assert valid_date('04-0-2040') == False\n    assert valid_date('06-04-2020') == True\n    assert valid_date('06/04/2020') == False\n\n\nif __name__ == '__main__':\n    test_valid_date()"
    },
    {
      "rank": 70,
      "score": 2.887111849756732,
      "candidate": "if not date:\n        return False\n    \n    day, month, year = date.split('-')\n\n    if int(month) not in range(1, 13):\n        return False\n\n    if int(day) not in range(1, 32):\n        return False\n\n    if int(month) in [1, 3, 5, 7, 8, 10, 12] and int(day) not in range(1, 31):\n        return False\n\n    if int(month) in [4, 6, 9, 11] and int(day) not in range(1, 30):\n        return False\n\n    if int(month) == 2 and int(day) not in range(1, 29):\n        return False\n\n    return True\n\nprint(valid_date('03-11-2000')) # => True\nprint(valid_date('15-01-2012')) # => False\nprint(valid_date('04-0-2040')) # => False\nprint(valid_date('06-04-2020')) # => True\nprint(valid_date('06/04/2020')) # => False\n\n\n\n\ndef valid_date_2(date):\n    \"\"\"You have to write a function which validates a given date string and\n    returns True if the date is valid otherwise False.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    for example: \n    valid"
    },
    {
      "rank": 71,
      "score": 2.8829315215254097,
      "candidate": "if len(date) < 1:\n        return False\n    month, day, year = date.split('-')\n    if not month.isdigit() or not day.isdigit() or not year.isdigit():\n        return False\n    month, day, year = int(month), int(day), int(year)\n    if month < 1 or month > 12:\n        return False\n    if month in [1, 3, 5, 7, 8, 10, 12]:\n        if day < 1 or day > 31:\n            return False\n    elif month in [4, 6, 9, 11]:\n        if day < 1 or day > 30:\n            return False\n    elif month == 2:\n        if day < 1 or day > 29:\n            return False\n    else:\n        return False\n    return True\n\nif __name__ == '__main__':\n    print(valid_date('03-11-2000')) # => True\n\n    print(valid_date('15-01-2012')) # => False\n\n    print(valid_date('04-0-2040')) # => False\n\n    print(valid_date('06-04-2020')) # => True\n\n    print(valid_date('06/04/2020')) # => False"
    },
    {
      "rank": 72,
      "score": 2.882923312638332,
      "candidate": "# split the date\n    date_split = date.split('-')\n\n    # get the day, month and year\n    day = date_split[1]\n    month = date_split[0]\n    year = date_split[2]\n\n    # check if the day, month and year are all valid\n    # check if the day is valid\n    if (day.isdigit() == False) or (int(day) < 1) or (int(day) > 31):\n        return False\n\n    # check if the month is valid\n    if (month.isdigit() == False) or (int(month) < 1) or (int(month) > 12):\n        return False\n\n    # check if the year is valid\n    if (year.isdigit() == False) or (int(year) < 1):\n        return False\n\n    # check if the day is valid for the month\n    if (int(month) in [1, 3, 5, 7, 8, 10, 12] and int(day) > 31) or (int(month) in [4, 6, 9, 11] and int(day) > 30) or (int(month) == 2 and int(day) > 29):\n        return False\n\n    return True\n\nprint(valid_date('03-11-2000')) # => True\nprint(valid_date('15-01-2012')) # => False\nprint(valid_date('04-0-2040')) # => False\nprint(valid_date('06-04-2020')) # => True\nprint(valid_date('06/04/2020')) # => False"
    },
    {
      "rank": 73,
      "score": 2.8494481522053556,
      "candidate": "if len(date) == 0:\n        return False\n\n    if date.count('-') != 2:\n        return False\n\n    month, day, year = date.split('-')\n\n    if int(month) < 1 or int(month) > 12:\n        return False\n\n    if int(day) < 1 or int(day) > 31:\n        return False\n\n    if int(month) == 2:\n        if int(year) % 4 == 0:\n            if int(day) < 1 or int(day) > 29:\n                return False\n        else:\n            if int(day) < 1 or int(day) > 28:\n                return False\n\n    if (int(month) % 2) == 0:\n        if int(day) < 1 or int(day) > 30:\n            return False\n    else:\n        if int(day) < 1 or int(day) > 31:\n            return False\n\n    return True\n\ndef valid_date2(date):\n    \"\"\"You have to write a function which validates a given date string and\n    returns True if the date is valid otherwise False.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False"
    },
    {
      "rank": 74,
      "score": 2.8453938120743927,
      "candidate": "pass\n\n\nprint(valid_date('03-11-2000'))\nprint(valid_date('15-01-2012'))\nprint(valid_date('04-0-2040'))\nprint(valid_date('06-04-2020'))\nprint(valid_date('06/04/2020'))\n\n\n# 2nd solution\ndef valid_date(date):\n    \"\"\"You have to write a function which validates a given date string and\n    returns True if the date is valid otherwise False.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n    \"\"\"\n    # check for empty string\n    if date == \"\":\n        return False\n\n    # check for valid month\n    month = int(date[0:2])\n    if month < 1 or month > 12:\n        return False\n\n    # check for valid day\n    day = int(date[3:5])\n    if month in [1, 3, 5, 7, 8, 10, 12] and (day <"
    },
    {
      "rank": 75,
      "score": 2.836168926701116,
      "candidate": "date = date.split('-')\n    if date == ['']:\n        return False\n    if int(date[0]) > 12 or int(date[0]) < 1:\n        return False\n    if int(date[0]) in [1, 3, 5, 7, 8, 10, 12]:\n        if int(date[1]) > 31 or int(date[1]) < 1:\n            return False\n    if int(date[0]) in [4, 6, 9, 11]:\n        if int(date[1]) > 30 or int(date[1]) < 1:\n            return False\n    if int(date[0]) == 2:\n        if int(date[1]) > 29 or int(date[1]) < 1:\n            return False\n    if len(date[2]) != 4:\n        return False\n    return True\n\n\nprint(valid_date('03-11-2000'))  # => True\nprint(valid_date('15-01-2012'))  # => False\nprint(valid_date('04-0-2040'))  # => False\nprint(valid_date('06-04-2020'))  # => True\nprint(valid_date('06/04/2020'))  # => False"
    },
    {
      "rank": 76,
      "score": 2.8074588597918417,
      "candidate": "month, day, year = date.split('-')\n    if len(month) != 2 or len(day) != 2 or len(year) != 4:\n        return False\n    month = int(month)\n    day = int(day)\n    year = int(year)\n    if month in [1, 3, 5, 7, 8, 10, 12]:\n        if day < 1 or day > 31:\n            return False\n    elif month in [4, 6, 9, 11]:\n        if day < 1 or day > 30:\n            return False\n    elif month == 2:\n        if day < 1 or day > 29:\n            return False\n    else:\n        return False\n    if month < 1 or month > 12:\n        return False\n    return True\n\n\nif __name__ == '__main__':\n    print(valid_date('03-11-2000'))\n    print(valid_date('15-01-2012'))\n    print(valid_date('04-0-2040'))\n    print(valid_date('06-04-2020'))\n    print(valid_date('06/04/2020'))"
    },
    {
      "rank": 77,
      "score": 2.803945923433921,
      "candidate": "if len(date) == 0:\n        return False\n    elif date[1] == '-' and date[3] == '-':\n        month = int(date[0:2])\n        day = int(date[4:6])\n        year = int(date[7:])\n        if month in [1, 3, 5, 7, 8, 10, 12] and day > 0 and day <= 31:\n            return True\n        elif month in [4, 6, 9, 11] and day > 0 and day <= 30:\n            return True\n        elif month == 2 and day > 0 and day <= 29:\n            return True\n        else:\n            return False\n    else:\n        return False\n\nprint(valid_date('03-11-2000')) # => True\nprint(valid_date('15-01-2012')) # => False\nprint(valid_date('04-0-2040')) # => False\nprint(valid_date('06-04-2020')) # => True\nprint(valid_date('06/04/2020')) # => False"
    },
    {
      "rank": 78,
      "score": 2.768291153593769,
      "candidate": "try:\n        date_str = date.split('-')\n        if len(date_str) != 3:\n            return False\n        date_num = [int(x) for x in date_str]\n        if date_num[0] in range(1,13) and date_num[1] in range(1,32) and date_num[2] > 0:\n            if date_num[0] == 2:\n                if date_num[1] in range(1,30):\n                    return True\n                else:\n                    return False\n            elif date_num[0] in (1,3,5,7,8,10,12):\n                if date_num[1] in range(1,32):\n                    return True\n                else:\n                    return False\n            elif date_num[0] in (4,6,9,11):\n                if date_num[1] in range(1,31):\n                    return True\n                else:\n                    return False\n        else:\n            return False\n    except:\n        return False\n\n\n\ndef valid_date_regex(date):\n    \"\"\"You have to write a function which validates a given date string and\n    returns True if the date is valid otherwise False.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\n    valid_date('15-01-2012') => False\n\n    valid_"
    },
    {
      "rank": 79,
      "score": 2.7671351232148718,
      "candidate": "import re\n    from datetime import date\n    pattern = re.compile(r'^((0?[13578]|1[02])-(31))|((0?[469]|11)-(30))|((0?2)-(29))|((0?[13456789]|1[02])-(30|29|31))|((0?[13578]|1[02])-(31))|((0?[469]|11)-(30))|((0?2)-(29))|((0?[13456789]|1[02])-(30|29|31))|((0?[13578]|1[02])-(31))|((0?[469]|11)-(30))|((0?2)-(29))|((0?[13456789]|1[02])-(30|29|31))$')\n    if not date:\n        return False\n    if not pattern.match(date):\n        return False\n    if int(date.split('-')[0]) not in range(1, 13):\n        return False\n    if int(date.split('-')[1]) not in range(1, 32):\n        return False\n    if int(date.split('-')[2]) not in range(1, 2020):\n        return False\n    return True\n\nif __name__ == '__main__':\n    print(valid_date('03-11-2000'))\n    print(valid_date('15-01-2012'))\n    print(valid_date('04-0-2040'))\n    print(valid_date('06-04-2020'))\n    print(valid_date('06/04/2020'))"
    },
    {
      "rank": 80,
      "score": 2.765262807032524,
      "candidate": "# Write your code here.\n    return False\n\n\n# TESTS\nassert valid_date(\"03-11-2000\")\nassert not valid_date(\"15-01-2012\")\nassert not valid_date(\"04-0-2040\")\nassert valid_date(\"06-04-2020\")\nassert not valid_date(\"06/04/2020\")"
    },
    {
      "rank": 81,
      "score": 2.7408648908631763,
      "candidate": "date_list = date.split('-')\n    if len(date_list) != 3:\n        return False\n    try:\n        month = int(date_list[0])\n        day = int(date_list[1])\n        year = int(date_list[2])\n    except ValueError:\n        return False\n    if month <= 0 or month > 12:\n        return False\n    if day <= 0 or day > 31:\n        return False\n    if month in [1,3,5,7,8,10,12] and day > 31:\n        return False\n    if month in [4,6,9,11] and day > 30:\n        return False\n    if month == 2 and day > 29:\n        return False\n    if day < 10 and len(date_list[1]) == 1:\n        return False\n    return True\n\n\n\nprint(valid_date('03-11-2000')) # => True\nprint(valid_date('15-01-2012')) # => False\nprint(valid_date('04-0-2040')) # => False\nprint(valid_date('06-04-2020')) # => True\nprint(valid_date('06/04/2020')) # => False"
    },
    {
      "rank": 82,
      "score": 2.735119898116481,
      "candidate": "if date == '':\n        return False\n    \n    date_list = date.split('-')\n    \n    if len(date_list) != 3:\n        return False\n    \n    if not date_list[0].isdigit():\n        return False\n    \n    if not date_list[1].isdigit():\n        return False\n    \n    if not date_list[2].isdigit():\n        return False\n    \n    if int(date_list[0]) < 1 or int(date_list[0]) > 12:\n        return False\n    \n    if int(date_list[0]) == 2:\n        if int(date_list[1]) < 1 or int(date_list[1]) > 29:\n            return False\n    elif int(date_list[0]) % 2 != 0:\n        if int(date_list[1]) < 1 or int(date_list[1]) > 31:\n            return False\n    else:\n        if int(date_list[1]) < 1 or int(date_list[1]) > 30:\n            return False\n    \n    return True\n\n\nif __name__ == '__main__':\n    print(\"Example:\")\n    print(valid_date('03-11-2000'))\n\n    # These \"asserts\" are used for self-checking and not for an auto-testing\n    assert valid_date('03-11-2000') == True\n    assert valid_date('15-01-2012') == False\n    assert valid_date('04-0-2040') == False\n    assert valid_date('06-04-2020') == True\n    assert valid_date('06/04/2020') == False\n    assert valid_date('1-1-1999') == True\n    assert valid_date('2-29-1999') == True\n    assert valid_date('2-30-1999') == False\n    assert valid_date('2-28-2001') == False"
    },
    {
      "rank": 83,
      "score": 2.7278086377374087,
      "candidate": "try:\n        month, day, year = date.split('-')\n    except:\n        return False\n    if not (1 <= int(month) <= 12):\n        return False\n    if not (1 <= int(day) <= 31):\n        return False\n    if not (1900 <= int(year) <= 2020):\n        return False\n    if int(month) in [1, 3, 5, 7, 8, 10, 12] and not (1 <= int(day) <= 31):\n        return False\n    if int(month) in [4, 6, 9, 11] and not (1 <= int(day) <= 30):\n        return False\n    if int(month) == 2 and not (1 <= int(day) <= 29):\n        return False\n    return True\n\n\nprint(valid_date('03-11-2000'))\nprint(valid_date('15-01-2012'))\nprint(valid_date('04-0-2040'))\nprint(valid_date('06-04-2020'))\nprint(valid_date('06/04/2020'))"
    },
    {
      "rank": 84,
      "score": 2.6996806550405976,
      "candidate": "if date == '':\n        return False\n    if not date.split('-')[1].isdigit() or not date.split('-')[2].isdigit():\n        return False\n    if int(date.split('-')[1]) < 1 or int(date.split('-')[1]) > 31:\n        return False\n    if int(date.split('-')[2]) < 1 or int(date.split('-')[2]) > 2099:\n        return False\n    return True\n\nif __name__ == '__main__':\n    print(valid_date('03-11-2000')) # => True\n\n    print(valid_date('15-01-2012')) # => False\n\n    print(valid_date('04-0-2040')) # => False\n\n    print(valid_date('06-04-2020')) # => True\n\n    print(valid_date('06/04/2020')) # => False"
    },
    {
      "rank": 85,
      "score": 2.6991466938853015,
      "candidate": "date_list = date.split(\"-\")\n    month = int(date_list[0])\n    day = int(date_list[1])\n    year = int(date_list[2])\n    \n    if month == 2 and day > 29:\n        return False\n    elif month in [4,6,9,11] and day > 30:\n        return False\n    elif month in [1,3,5,7,8,10,12] and day > 31:\n        return False\n    elif month < 1 or month > 12:\n        return False\n    else:\n        return True\n\n\nif __name__ == '__main__':\n    print(\"Example:\")\n    print(valid_date('03-11-2000'))\n\n    # These \"asserts\" are used for self-checking and not for an auto-testing\n    assert valid_date('03-11-2000') == True\n    assert valid_date('15-01-2012') == False\n    assert valid_date('04-0-2040') == False\n    assert valid_date('06-04-2020') == True\n    assert valid_date('06/04/2020') == False\n    print(\"Coding complete? Click 'Check' to earn cool rewards!\")"
    },
    {
      "rank": 86,
      "score": 2.677440122697438,
      "candidate": "pass\n\n\nif __name__ == \"__main__\":\n    print(\"Example:\")\n    print(valid_date('03-11-2000'))\n\n    # These \"asserts\" are used for self-checking and not for an auto-testing\n    assert valid_date('03-11-2000') == True\n    assert valid_date('15-01-2012') == False\n    assert valid_date('04-0-2040') == False\n    assert valid_date('06-04-2020') == True\n    assert valid_date('06/04/2020') == False\n    print(\"Coding complete? Click 'Check' to earn cool rewards!\")"
    },
    {
      "rank": 87,
      "score": 2.6615389998470205,
      "candidate": "pass\n\n\ndef test_valid_date():\n    assert valid_date('03-11-2000') == True\n    assert valid_date('15-01-2012') == False\n    assert valid_date('04-0-2040') == False\n    assert valid_date('06-04-2020') == True\n    assert valid_date('06/04/2020') == False\n\n\nif __name__ == '__main__':\n    test_valid_date()"
    },
    {
      "rank": 88,
      "score": 2.6400778958026456,
      "candidate": "date_list = date.split(\"-\")\n    if len(date_list) == 3:\n        day = int(date_list[1])\n        month = int(date_list[0])\n        year = int(date_list[2])\n        if day > 0 and day <= 31:\n            if month >= 1 and month <= 12:\n                if month in [1, 3, 5, 7, 8, 10, 12]:\n                    if day <= 31:\n                        return True\n                    else:\n                        return False\n                elif month in [4, 6, 9, 11]:\n                    if day <= 30:\n                        return True\n                    else:\n                        return False\n                elif month == 2:\n                    if (year % 4 == 0 and year % 100 != 0) or (year % 400 == 0):\n                        if day <= 29:\n                            return True\n                        else:\n                            return False\n                    else:\n                        if day <= 28:\n                            return True\n                        else:\n                            return False\n            else:\n                return False\n        else:\n            return False\n    else:\n        return False\n\n\ndef test_valid_date():\n\n    assert valid_date('03-11-2000') == True\n    assert valid_date('15-01-2012') == False\n    assert valid_date('04-0-2040') == False\n    assert valid_date('06-04-2020') == True\n    assert valid_date('06/04/2020') == False"
    },
    {
      "rank": 89,
      "score": 2.5957531985534064,
      "candidate": "month, day, year = date.split(\"-\")\n    if len(date) == 0:\n        return False\n    elif len(day) == 1 and len(month) == 1 and len(year) == 4:\n        return False\n    elif int(month) in [1, 3, 5, 7, 8, 10, 12] and int(day) not in range(1, 32):\n        return False\n    elif int(month) in [4, 6, 9, 11] and int(day) not in range(1, 31):\n        return False\n    elif int(month) == 2 and int(day) not in range(1, 29):\n        return False\n    elif int(month) not in range(1, 13):\n        return False\n    else:\n        return True\n\n\nprint(valid_date('03-11-2000'))  # => True\nprint(valid_date('15-01-2012'))  # => False\nprint(valid_date('04-0-2040'))  # => False\nprint(valid_date('06-04-2020'))  # => True\nprint(valid_date('06/04/2020'))  # => False\nprint(valid_date('05-04-2020'))  # => False\nprint(valid_date('05-04-2020'))  # => False"
    },
    {
      "rank": 90,
      "score": 2.580391238388681,
      "candidate": "try:\n        month, day, year = date.split('-')\n    except:\n        return False\n    if int(month) < 1 or int(month) > 12:\n        return False\n    if int(day) < 1 or int(day) > 31:\n        return False\n    if int(month) in [1, 3, 5, 7, 8, 10, 12] and int(day) > 31:\n        return False\n    if int(month) in [4, 6, 9, 11] and int(day) > 30:\n        return False\n    if int(month) == 2 and int(day) > 29:\n        return False\n    if int(year) < 0 or int(year) > 9999:\n        return False\n    return True\n\n\ndef valid_date_2(date):\n    \"\"\"You have to write a function which validates a given date string and\n    returns True if the date is valid otherwise False.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False"
    },
    {
      "rank": 91,
      "score": 2.493584439832788,
      "candidate": "# your code here\n    if date == '':\n        return False\n    if len(date.split('-')) != 3:\n        return False\n    day, month, year = date.split('-')\n    if int(day) < 1 or int(day) > 31:\n        return False\n    if int(month) < 1 or int(month) > 12:\n        return False\n    if int(month) in [1, 3, 5, 7, 8, 10, 12]:\n        if int(day) < 1 or int(day) > 31:\n            return False\n    elif int(month) in [4, 6, 9, 11]:\n        if int(day) < 1 or int(day) > 30:\n            return False\n    elif int(month) == 2:\n        if int(day) < 1 or int(day) > 29:\n            return False\n    return True\n\n\nif __name__ == '__main__':\n    print(valid_date('03-11-2000'))\n    print(valid_date('15-01-2012'))\n    print(valid_date('04-0-2040'))\n    print(valid_date('06-04-2020'))\n    print(valid_date('06/04/2020'))"
    },
    {
      "rank": 92,
      "score": 2.4711445355220496,
      "candidate": "if date.count('-') != 2:\n        return False\n    \n    month, day, year = date.split('-')\n    \n    if int(month) > 12 or int(month) < 1:\n        return False\n    if int(day) > 31 or int(day) < 1:\n        return False\n    if int(year) < 2000 or int(year) > 2020:\n        return False\n    \n    if int(month) in [1,3,5,7,8,10,12]:\n        if int(day) > 31 or int(day) < 1:\n            return False\n    if int(month) in [4,6,9,11]:\n        if int(day) > 30 or int(day) < 1:\n            return False\n    if int(month) == 2:\n        if int(day) > 29 or int(day) < 1:\n            return False\n    \n    return True\n\n\nprint(valid_date('03-11-2000')) # => True\nprint(valid_date('15-01-2012')) # => False\nprint(valid_date('04-0-2040')) # => False\nprint(valid_date('06-04-2020')) # => True\nprint(valid_date('06/04/2020')) # => False"
    },
    {
      "rank": 93,
      "score": 2.446832512996986,
      "candidate": "import datetime\n\n    if date == '':\n        return False\n\n    date_split = date.split('-')\n    if len(date_split) != 3:\n        return False\n\n    try:\n        day = int(date_split[1])\n        month = int(date_split[0])\n        year = int(date_split[2])\n    except:\n        return False\n\n    if (day < 1 or day > 31) and month in [1, 3, 5, 7, 8, 10, 12]:\n        return False\n    if (day < 1 or day > 30) and month in [4, 6, 9, 11]:\n        return False\n    if (day < 1 or day > 29) and month == 2:\n        return False\n    if (month < 1 or month > 12):\n        return False\n\n    try:\n        datetime.date(year, month, day)\n    except:\n        return False\n\n    return True\n\n\ndef valid_date2(date):\n    \"\"\"You have to write a function which validates a given date string and\n    returns True if the date is valid otherwise False.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False"
    },
    {
      "rank": 94,
      "score": 2.4245032112888487,
      "candidate": "if date == '':\n        return False\n    month = date[0:2]\n    day = date[3:5]\n    year = date[6:10]\n    if (int(month) < 1 or int(month) > 12) or (int(day) < 1 or int(day) > 31) or (int(year) < 1 or int(year) > 9999):\n        return False\n    if (int(month) == 1 or int(month) == 3 or int(month) == 5 or int(month) == 7 or int(month) == 8 or int(month) == 10 or int(month) == 12):\n        if (int(day) < 1 or int(day) > 31):\n            return False\n    elif (int(month) == 4 or int(month) == 6 or int(month) == 9 or int(month) == 11):\n        if (int(day) < 1 or int(day) > 30):\n            return False\n    elif (int(month) == 2):\n        if (int(year) % 4 == 0 and (int(year) % 100 != 0 or int(year) % 400 == 0)):\n            if (int(day) < 1 or int(day) > 29):\n                return False\n        else:\n            if (int(day) < 1 or int(day) > 28):\n                return False\n    return True\n\n\nprint(valid_date('03-11-2000'))\nprint(valid_date('15-01-2012'))\nprint(valid_date('04-0-2040'))\nprint(valid_date('06-04-2020'))\nprint(valid_date('06/04/2020'))"
    },
    {
      "rank": 95,
      "score": 2.3359069755507846,
      "candidate": "# your code here\n    if not date:\n        return False\n    try:\n        day, month, year = date.split('-')\n        month = int(month)\n        day = int(day)\n        year = int(year)\n    except:\n        return False\n    if month < 1 or month > 12:\n        return False\n    if day < 1 or day > 31:\n        return False\n    if month in [1,3,5,7,8,10,12] and day > 31:\n        return False\n    if month in [4,6,9,11] and day > 30:\n        return False\n    if month == 2 and day > 29:\n        return False\n    if day < 10:\n        day = '0' + str(day)\n    return '-'.join([month, day, year])\n\nif __name__ == '__main__':\n    print(\"Example:\")\n    print(valid_date('03-11-2000'))\n\n    # These \"asserts\" are used for self-checking and not for an auto-testing\n    assert valid_date('03-11-2000') == True\n    assert valid_date('15-01-2012') == False\n    assert valid_date('04-0-2040') == False\n    assert valid_date('06-04-2020') == True\n    assert valid_date('06/04/2020') == False\n    assert valid_date('03-11-20000') == False\n    print(\"Coding complete? Click 'Check' to earn cool rewards!\")"
    },
    {
      "rank": 96,
      "score": 2.293848149332354,
      "candidate": "try:\n        month, day, year = map(int, date.split('-'))\n    except ValueError:\n        return False\n    \n    if month < 1 or month > 12:\n        return False\n    \n    if day < 1 or day > 31:\n        return False\n    \n    if month in [1, 3, 5, 7, 8, 10, 12] and day > 31:\n        return False\n    elif month in [4, 6, 9, 11] and day > 30:\n        return False\n    elif month == 2 and day > 29:\n        return False\n    \n    return True\n\n\n\nprint(valid_date('03-11-2000')) # => True\nprint(valid_date('15-01-2012')) # => False\nprint(valid_date('04-0-2040')) # => False\nprint(valid_date('06-04-2020')) # => True\nprint(valid_date('06/04/2020')) # => False"
    },
    {
      "rank": 97,
      "score": 2.287625906893272,
      "candidate": "if date == \"\":\n        return False\n    try:\n        month, day, year = date.split(\"-\")\n        month = int(month)\n        day = int(day)\n        year = int(year)\n    except:\n        return False\n    if month > 12 or month < 1:\n        return False\n    if day > 31 or day < 1:\n        return False\n    if month in [1, 3, 5, 7, 8, 10, 12]:\n        if day > 31 or day < 1:\n            return False\n    if month in [4, 6, 9, 11]:\n        if day > 30 or day < 1:\n            return False\n    if month == 2:\n        if day > 29 or day < 1:\n            return False\n    return True\n\n\nprint(valid_date('03-11-2000'))\nprint(valid_date('15-01-2012'))\nprint(valid_date('04-0-2040'))\nprint(valid_date('06-04-2020'))\nprint(valid_date('06/04/2020'))"
    },
    {
      "rank": 98,
      "score": 2.118479922318633,
      "candidate": "if date == \"\":\n        return False\n\n    day = int(date[:2])\n    month = int(date[3:5])\n    year = int(date[6:])\n\n    if (month in [1, 3, 5, 7, 8, 10, 12] and day > 0 and day <= 31) or (month in [4, 6, 9, 11] and day > 0 and day <= 30) or (month == 2 and day > 0 and day <= 29) or (month in [1, 3, 5, 7, 8, 10, 12] and day >= 1 and day <= 31) or (month in [4, 6, 9, 11] and day >= 1 and day <= 30) or (month == 2 and day >= 1 and day <= 29):\n        return True\n    else:\n        return False\n\n\nif __name__ == '__main__':\n    print(valid_date(\"03-11-2000\"))  # => True\n    print(valid_date(\"15-01-2012\"))  # => False\n    print(valid_date('04-0-2040'))  # => False\n    print(valid_date('06-04-2020'))  # => True\n    print(valid_date('06/04/2020'))  # => False"
    },
    {
      "rank": 99,
      "score": 2.006215542699554,
      "candidate": "if not date:\n        return False\n    try:\n        month, day, year = date.split(\"-\")\n    except:\n        return False\n    if not month.isdigit() or not day.isdigit() or not year.isdigit():\n        return False\n    month, day, year = int(month), int(day), int(year)\n    if month < 1 or month > 12:\n        return False\n    if month in [1, 3, 5, 7, 8, 10, 12]:\n        if day < 1 or day > 31:\n            return False\n    elif month in [4, 6, 9, 11]:\n        if day < 1 or day > 30:\n            return False\n    else:\n        if day < 1 or day > 29:\n            return False\n    return True\n\nprint(valid_date('03-11-2000')) # => True\nprint(valid_date('15-01-2012')) # => False\nprint(valid_date('04-0-2040')) # => False\nprint(valid_date('06-04-2020')) # => True\nprint(valid_date('06/04/2020')) # => False"
    },
    {
      "rank": 100,
      "score": 1.6901274479551278,
      "candidate": "date_list = date.split('-')\n    if len(date_list) == 3:\n        if date_list[0] and date_list[1] and date_list[2] and len(date_list[0]) == 2 and len(date_list[1]) == 2 and len(date_list[2]) == 4:\n            if int(date_list[0]) in [1,3,5,7,8,10,12] and int(date_list[1]) in range(1,32) and int(date_list[2]) in range(1900,2021):\n                return True\n            elif int(date_list[0]) in [4,6,9,11] and int(date_list[1]) in range(1,31) and int(date_list[2]) in range(1900,2021):\n                return True\n            elif int(date_list[0]) == 2 and int(date_list[1]) in range(1,30) and int(date_list[2]) in range(1900,2021):\n                return True\n            else:\n                return False\n        else:\n            return False\n    else:\n        return False\n\nprint(valid_date('03-11-2000')) # => True\nprint(valid_date('15-01-2012')) # => False\nprint(valid_date('04-0-2040')) # => False\nprint(valid_date('06-04-2020')) # => True\nprint(valid_date('06/04/2020')) # => False"
    }
  ]
}