{
  "timestamp": "2025-09-14T22:14:59.857434",
  "method": "improved_llm_judge",
  "judge_model": "codellama/CodeLlama-7b-Python-hf",
  "target_model": "codellama-7b",
  "dataset": "humaneval",
  "problem_number": 157,
  "total_candidates": 100,
  "results": [
    {
      "rank": 1,
      "score": 10.0,
      "candidate": "if a**2 + b**2 == c**2 or a**2 + c**2 == b**2 or b**2 + c**2 == a**2:\n        return True\n    else:\n        return False"
    },
    {
      "rank": 2,
      "score": 10.0,
      "candidate": "return a**2 + b**2 == c**2"
    },
    {
      "rank": 3,
      "score": 10.0,
      "candidate": "if a**2 + b**2 == c**2 or a**2 + c**2 == b**2 or b**2 + c**2 == a**2:\n        return True\n    else:\n        return False\n\n\ndef test_cases():\n    assert right_angle_triangle(3, 4, 5) == True\n    assert right_angle_triangle(1, 2, 3) == False\n    assert right_angle_triangle(4, 5, 6) == False\n    assert right_angle_triangle(7, 24, 25) == True\n    assert right_angle_triangle(10, 10, 17) == True\n    assert right_angle_triangle(5, 12, 13) == True\n    assert right_angle_triangle(1, 2, 1) == False\n    assert right_angle_triangle(1, 1, 1) == False\n    print(\"Test Success!\")\n\n\ntest_cases()"
    },
    {
      "rank": 4,
      "score": 10.0,
      "candidate": "if a**2 + b**2 == c**2 or a**2 + c**2 == b**2 or b**2 + c**2 == a**2:\n        return True\n    else:\n        return False"
    },
    {
      "rank": 5,
      "score": 10.0,
      "candidate": "# 1. Get all the angles of the triangle\n    # 2. Check if any of the angles is 90 degree\n    # 3. If yes, return True\n    # 4. Else, return False\n    if a**2 + b**2 == c**2:\n        return True\n    else:\n        return False\n\ndef is_triangle(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a triangle, False otherwise.\n    Example:\n    is_triangle(3, 4, 5) == True\n    is_triangle(1, 2, 3) == False\n    '''\n    # 1. Check if all sides are greater than 0\n    # 2. If yes, return True\n    # 3. Else, return False\n    if a > 0 and b > 0 and c > 0:\n        return True\n    else:\n        return False\n\ndef is_right_angle_triangle(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    is_right_angle_triangle(3, 4, 5) == True\n    is_right_angle_triangle(1, 2, 3) == False\n    '''\n    # 1. Check if all sides are greater than 0\n    # 2. If yes, check if any of the angles is 90 degree\n    # 3. If yes, return True\n    # 4. Else, return False\n    if is_triangle(a, b, c):\n        if right_angle_triangle(a, b, c):\n            return True\n    return False\n\ndef is_equilateral_triangle(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form an equilateral triangle, False otherwise.\n    An equilateral triangle is a triangle in which all three sides"
    },
    {
      "rank": 6,
      "score": 10.0,
      "candidate": "return a**2 + b**2 == c**2\n\ndef right_angle_triangle2(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1, 2, 3) == False\n    '''\n    return a**2 + b**2 == c**2\n\ndef right_angle_triangle3(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1, 2, 3) == False\n    '''\n    return a**2 + b**2 == c**2\n\n\ndef right_angle_triangle4(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1, 2, 3) == False\n    '''\n    return a**2 + b**2 == c**2\n\n\ndef right_angle_triangle5(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    right_angle_triangle(3, 4,"
    },
    {
      "rank": 7,
      "score": 10.0,
      "candidate": "if a**2 + b**2 == c**2:\n        return True\n    else:\n        return False\n\n\ndef pythagorean_triplet(x, y, z):\n    '''\n    Given the length of the three sides of a triangle. Return True if the three\n    sides form a pythagorean triplet, False otherwise.\n    A pythagorean triplet is a triplet of positive integers a, b, c, for which,\n    a**2 + b**2 = c**2\n    Example:\n    pythagorean_triplet(3, 4, 5) == True\n    pythagorean_triplet(3, 4, 6) == False\n    '''\n    if x**2 + y**2 == z**2:\n        return True\n    else:\n        return False\n\n\ndef perfect_square(n):\n    '''\n    Given a positive integer, return True if it is a perfect square, False otherwise.\n    A perfect square is an integer that can be expressed as the sum of two \n    squares in different ways, that is, as the sum of the squares of two integers.\n    Example:\n    perfect_square(1) == True\n    perfect_square(2) == True\n    perfect_square(3) == False\n    perfect_square(4) == True\n    perfect_square(5) == False\n    perfect_square(6) == True\n    perfect_square(7) == False\n    perfect_square(8) == True\n    '''\n    if n == 0 or n == 1:\n        return True\n    elif n < 0:\n        return False\n    else:\n        for i in range(1, int(n**0.5)+1):\n            if n % i == 0:\n                if i**2 + (n/i)**2 == n:\n                    return True\n        return False\n\n\ndef find_factors(n):\n    '''\n    Given a positive integer, return a sorted list of all its factors (as strings), not including itself.\n    Example:\n    find_factors(12) == ['1', '2', '3', '4', '6',"
    },
    {
      "rank": 8,
      "score": 10.0,
      "candidate": "if a ** 2 + b ** 2 == c ** 2:\n        return True\n    else:\n        return False\n\n\ndef test_cases():\n    assert right_angle_triangle(3, 4, 5) == True\n    assert right_angle_triangle(1, 2, 3) == False\n    assert right_angle_triangle(1, 3, 2) == False\n    assert right_angle_triangle(2, 2, 2) == False\n    assert right_angle_triangle(10, 10, 10) == True\n    assert right_angle_triangle(5, 12, 13) == True\n    assert right_angle_triangle(5, 12, 14) == False\n    print(\"Test Success!\")\n\n\ntest_cases()"
    },
    {
      "rank": 9,
      "score": 10.0,
      "candidate": "return a**2 + b**2 == c**2\n\n\ndef test_right_angle_triangle():\n    assert right_angle_triangle(3, 4, 5) == True\n    assert right_angle_triangle(1, 2, 3) == False\n    assert right_angle_triangle(1, 3, 2) == False\n    assert right_angle_triangle(2, 3, 1) == False\n    assert right_angle_triangle(3, 4, 1) == False\n    assert right_angle_triangle(5, 12, 13) == True\n\n\nif __name__ == '__main__':\n    test_right_angle_triangle()"
    },
    {
      "rank": 10,
      "score": 10.0,
      "candidate": "return (a**2 + b**2 == c**2) or (a**2 + c**2 == b**2) or (b**2 + c**2 == a**2)\n\ndef test_right_angle_triangle():\n    assert right_angle_triangle(3, 4, 5) == True\n    assert right_angle_triangle(1, 2, 3) == False\n    assert right_angle_triangle(5, 12, 13) == True\n    assert right_angle_triangle(8, 15, 17) == False\n    assert right_angle_triangle(7, 24, 25) == True\n    assert right_angle_triangle(6, 8, 10) == False\n    assert right_angle_triangle(10, 17, 20) == True\n    assert right_angle_triangle(12, 16, 20) == False\n    assert right_angle_triangle(10, 12, 13) == True\n    assert right_angle_triangle(12, 14, 16) == True\n    assert right_angle_triangle(5, 12, 13) == True\n    assert right_angle_triangle(8, 15, 17) == False\n    assert right_angle_triangle(7, 24, 25) == True\n    assert right_angle_triangle(6, 8, 10) == False\n    assert right_angle_triangle(10, 17, 20) == True\n    assert right_angle_triangle(12, 16, 20) == False\n    assert right_angle_triangle(10, 12, 13) == True\n    assert right_angle_triangle(12, 14, 16) == True\n    assert right_angle_triangle(5, 12, 13) == True\n    assert right_angle_triangle(8, 15, 17) == False\n    assert right_angle_triangle(7, 24, 25) == True\n    assert right_angle_triangle(6, 8,"
    },
    {
      "rank": 11,
      "score": 10.0,
      "candidate": "return (a**2 + b**2 == c**2) or (b**2 + c**2 == a**2) or (a**2 + c**2 == b**2)\n\n\ndef test_right_angle_triangle():\n    assert right_angle_triangle(3, 4, 5) == True\n    assert right_angle_triangle(1, 2, 3) == False\n    assert right_angle_triangle(8, 8, 10) == False\n    assert right_angle_triangle(7, 24, 25) == True\n    assert right_angle_triangle(5, 12, 13) == True\n    assert right_angle_triangle(5, 12, 12) == False\n    assert right_angle_triangle(10, 10, 17) == False\n    assert right_angle_triangle(7, 24, 26) == False\n    assert right_angle_triangle(10, 10, 17) == False\n    assert right_angle_triangle(10, 10, 18) == True\n    assert right_angle_triangle(10, 10, 16) == False\n\n\nif __name__ == '__main__':\n    test_right_angle_triangle()"
    },
    {
      "rank": 12,
      "score": 10.0,
      "candidate": "# Please print out which test cases are passed and which are failed.\n    # If you want to write your own stub test cases, you can check the \n    # progress by uncommenting the following line.\n    #print \"Testing for a = %i, b = %i, c = %i\" % (a, b, c)\n    return (a**2 + b**2) == c**2\n\nif __name__ == \"__main__\":\n    assert right_angle_triangle(3, 4, 5) == True\n    assert right_angle_triangle(1, 2, 3) == False\n    assert right_angle_triangle(5, 12, 13) == False\n    assert right_angle_triangle(10, 10, 17) == True\n    assert right_angle_triangle(10, 17, 10) == True\n    assert right_angle_triangle(2, 2, 2) == False\n    print \"All the test cases are passed!\""
    },
    {
      "rank": 13,
      "score": 10.0,
      "candidate": "if a**2 + b**2 == c**2:\n        return True\n    else:\n        return False\n\ndef right_angle_triangle2(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1, 2, 3) == False\n    '''\n    return (a**2 + b**2 == c**2)\n\ndef right_angle_triangle3(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1, 2, 3) == False\n    '''\n    return a**2 + b**2 == c**2"
    },
    {
      "rank": 14,
      "score": 10.0,
      "candidate": "return (a**2 + b**2 == c**2) or (b**2 + c**2 == a**2) or (c**2 + a**2 == b**2)"
    },
    {
      "rank": 15,
      "score": 10.0,
      "candidate": "if a**2 + b**2 == c**2 or a**2 + c**2 == b**2 or b**2 + c**2 == a**2:\n        return True\n    else:\n        return False"
    },
    {
      "rank": 16,
      "score": 10.0,
      "candidate": "if a**2 + b**2 == c**2:\n        return True\n    else:\n        return False\n\ndef test_cases():\n    assert right_angle_triangle(3, 4, 5) == True\n    assert right_angle_triangle(1, 2, 3) == False\n    assert right_angle_triangle(5, 12, 13) == False\n    assert right_angle_triangle(10, 10, 17) == True\n    assert right_angle_triangle(5, 12, 13) == False\n    assert right_angle_triangle(6, 8, 10) == False\n    assert right_angle_triangle(7, 24, 25) == True\n    assert right_angle_triangle(10, 20, 20) == True\n    assert right_angle_triangle(10, 10, 10) == False\n    assert right_angle_triangle(7, 24, 25) == True\n    assert right_angle_triangle(1, 2, 3) == False\n    assert right_angle_triangle(10, 20, 20) == True\n    assert right_angle_triangle(10, 10, 10) == False\n    assert right_angle_triangle(7, 24, 25) == True\n    assert right_angle_triangle(1, 2, 3) == False\n    assert right_angle_triangle(10, 20, 20) == True\n    assert right_angle_triangle(10, 10, 10) == False\n    assert right_angle_triangle(7, 24, 25) == True\n    assert right_angle_triangle(1, 2, 3) == False\n    assert right_angle_triangle(10, 20, 20) == True\n    assert right_angle_triangle(10, 10, 10) == False\n    assert right_angle_triangle(7, 24, 25) == True\n    assert right_angle_triangle(1, 2, 3) == False"
    },
    {
      "rank": 17,
      "score": 10.0,
      "candidate": "if (a*a + b*b == c*c) or (a*a + c*c == b*b) or (b*b + c*c == a*a):\n        return True\n    else:\n        return False"
    },
    {
      "rank": 18,
      "score": 10.0,
      "candidate": "return a**2 + b**2 == c**2\n\n\ndef right_angle_triangle_2(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1, 2, 3) == False\n    '''\n    return (a ** 2 + b ** 2) == c ** 2\n\n\ndef right_angle_triangle_3(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1, 2, 3) == False\n    '''\n    return (a * a + b * b) == c * c\n\n\ndef right_angle_triangle_4(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1, 2, 3) == False\n    '''\n    return (a ** 2 + b ** 2) == c ** 2\n\n\ndef right_angle_triangle_5(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree."
    },
    {
      "rank": 19,
      "score": 10.0,
      "candidate": "return a*a + b*b == c*c"
    },
    {
      "rank": 20,
      "score": 10.0,
      "candidate": "if a**2 + b**2 == c**2:\n        return True\n    else:\n        return False\n\ndef right_angle_triangle2(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1, 2, 3) == False\n    '''\n    return a**2 + b**2 == c**2"
    },
    {
      "rank": 21,
      "score": 10.0,
      "candidate": "if a**2 + b**2 == c**2:\n        return True\n    elif a**2 + c**2 == b**2:\n        return True\n    elif b**2 + c**2 == a**2:\n        return True\n    else:\n        return False"
    },
    {
      "rank": 22,
      "score": 10.0,
      "candidate": "# Please print out which test cases are failures\n    # Please try to use standard methods in python\n    # You can define your own utility methods\n    if a**2 + b**2 == c**2:\n        return True\n    return False\n\ndef main():\n    assert(right_angle_triangle(3, 4, 5) == True)\n    assert(right_angle_triangle(1, 2, 3) == False)\n    assert(right_angle_triangle(2, 2, 2) == True)\n    assert(right_angle_triangle(5, 12, 13) == True)\n    assert(right_angle_triangle(7, 24, 25) == False)\n    assert(right_angle_triangle(10, 10, 17) == True)\n    assert(right_angle_triangle(6, 8, 10) == False)\n    assert(right_angle_triangle(7, 24, 26) == False)\n    assert(right_angle_triangle(10, 10, 13) == True)\n    assert(right_angle_triangle(7, 24, 25) == False)\n    assert(right_angle_triangle(7, 25, 25) == True)\n    assert(right_angle_triangle(5, 12, 13) == True)\n    assert(right_angle_triangle(5, 12, 12) == False)\n    assert(right_angle_triangle(5, 12, 13) == True)\n    assert(right_angle_triangle(7, 24, 26) == False)\n    assert(right_angle_triangle(7, 25, 25) == True)\n    assert(right_angle_triangle(7, 24, 25) == False)\n    assert(right_angle_triangle(5, 12, 13) == True)\n    assert(right_angle_triangle(5, 12, 12) == False)\n    assert(right_angle_triangle(5, 12, 13)"
    },
    {
      "rank": 23,
      "score": 10.0,
      "candidate": "if a**2 + b**2 == c**2:\n        return True\n    else:\n        return False\n\n\ndef test_case():\n    assert right_angle_triangle(3, 4, 5) == True\n    assert right_angle_triangle(1, 2, 3) == False\n    print(\"Test Success!\")\n\n\nif __name__ == \"__main__\":\n    test_case()"
    },
    {
      "rank": 24,
      "score": 9.0,
      "candidate": "if a**2 + b**2 == c**2:\n        return True\n    elif a**2 + c**2 == b**2:\n        return True\n    elif b**2 + c**2 == a**2:\n        return True\n    else:\n        return False"
    },
    {
      "rank": 25,
      "score": 9.0,
      "candidate": "return a ** 2 + b ** 2 == c ** 2 or a ** 2 + c ** 2 == b ** 2 or b ** 2 + c ** 2 == a ** 2"
    },
    {
      "rank": 26,
      "score": 9.0,
      "candidate": "if a**2 + b**2 == c**2 or a**2 + c**2 == b**2 or b**2 + c**2 == a**2:\n        return True\n    else:\n        return False"
    },
    {
      "rank": 27,
      "score": 9.0,
      "candidate": "if a*a + b*b == c*c or a*a + c*c == b*b or b*b + c*c == a*a:\n        return True\n    else:\n        return False"
    },
    {
      "rank": 28,
      "score": 9.0,
      "candidate": "return a**2 + b**2 == c**2\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 29,
      "score": 9.0,
      "candidate": "if a**2 + b**2 == c**2:\n        return True\n    else:\n        return False"
    },
    {
      "rank": 30,
      "score": 9.0,
      "candidate": "return a**2 + b**2 == c**2\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 31,
      "score": 8.0,
      "candidate": "return a**2 + b**2 == c**2 or a**2 + c**2 == b**2 or b**2 + c**2 == a**2\n\nassert(right_angle_triangle(3, 4, 5) == True)\nassert(right_angle_triangle(1, 2, 3) == False)\nassert(right_angle_triangle(1, 3, 2) == True)\nassert(right_angle_triangle(2, 1, 3) == True)\nassert(right_angle_triangle(2, 3, 1) == True)\nassert(right_angle_triangle(3, 1, 2) == True)\nassert(right_angle_triangle(1, 4, 3) == False)"
    },
    {
      "rank": 32,
      "score": 8.0,
      "candidate": "if a**2 + b**2 == c**2:\n        return True\n    else:\n        return False"
    },
    {
      "rank": 33,
      "score": 8.0,
      "candidate": "if a**2 + b**2 == c**2 or a**2 + c**2 == b**2 or b**2 + c**2 == a**2:\n        return True\n    else:\n        return False"
    },
    {
      "rank": 34,
      "score": 8.0,
      "candidate": "if a**2 + b**2 == c**2 or a**2 + c**2 == b**2 or b**2 + c**2 == a**2:\n        return True\n    return False\n\n\nprint(right_angle_triangle(3, 4, 5))\nprint(right_angle_triangle(1, 2, 3))"
    },
    {
      "rank": 35,
      "score": 8.0,
      "candidate": "if a**2 + b**2 == c**2:\n        return True\n    else:\n        return False\n\nprint(right_angle_triangle(3, 4, 5))\nprint(right_angle_triangle(1, 2, 3))"
    },
    {
      "rank": 36,
      "score": 8.0,
      "candidate": "return a**2+b**2==c**2 or a**2+c**2==b**2 or b**2+c**2==a**2"
    },
    {
      "rank": 37,
      "score": 8.0,
      "candidate": "return (a**2 + b**2 == c**2) or (a**2 + c**2 == b**2) or (b**2 + c**2 == a**2)\n\nprint(right_angle_triangle(3, 4, 5)) # True\nprint(right_angle_triangle(1, 2, 3)) # False\n\ndef right_angle_triangle_v2(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1, 2, 3) == False\n    '''\n    return (a**2 + b**2 == c**2) or (a**2 + c**2 == b**2) or (b**2 + c**2 == a**2)\n\nprint(right_angle_triangle_v2(3, 4, 5)) # True\nprint(right_angle_triangle_v2(1, 2, 3)) # False"
    },
    {
      "rank": 38,
      "score": 8.0,
      "candidate": "return a ** 2 + b ** 2 == c ** 2\n\n\ndef test_right_angle_triangle():\n    assert right_angle_triangle(3, 4, 5) == True\n    assert right_angle_triangle(1, 2, 3) == False\n    assert right_angle_triangle(1, 3, 3) == True\n    assert right_angle_triangle(2, 2, 2) == False\n    assert right_angle_triangle(1, 1, 1) == False"
    },
    {
      "rank": 39,
      "score": 8.0,
      "candidate": "return a ** 2 + b ** 2 == c ** 2\n\n\ndef test_right_angle_triangle():\n    assert right_angle_triangle(3, 4, 5) == True\n    assert right_angle_triangle(1, 2, 3) == False\n    assert right_angle_triangle(1, 3, 4) == True\n    assert right_angle_triangle(2, 2, 2) == True\n    assert right_angle_triangle(5, 12, 13) == False\n    assert right_angle_triangle(10, 8, 17) == True\n    assert right_angle_triangle(7, 24, 25) == False\n    assert right_angle_triangle(10, 12, 15) == False\n    assert right_angle_triangle(7, 24, 26) == False\n    assert right_angle_triangle(10, 12, 16) == True"
    },
    {
      "rank": 40,
      "score": 8.0,
      "candidate": "if a**2 + b**2 == c**2:\n        return True\n    elif a**2 + c**2 == b**2:\n        return True\n    elif b**2 + c**2 == a**2:\n        return True\n    else:\n        return False\n\ndef test_right_angle_triangle():\n    assert right_angle_triangle(3, 4, 5) == True\n    assert right_angle_triangle(1, 2, 3) == False\n    assert right_angle_triangle(4, 5, 6) == False\n    assert right_angle_triangle(10, 10, 10) == True\n    assert right_angle_triangle(3, 4, 3) == False\n    assert right_angle_triangle(3, 3, 3) == True\n    assert right_angle_triangle(5, 5, 5) == False\n    assert right_angle_triangle(10, 10, 11) == False"
    },
    {
      "rank": 41,
      "score": 8.0,
      "candidate": "return a**2 + b**2 == c**2\n\ndef test_right_angle_triangle():\n    assert right_angle_triangle(3, 4, 5) == True\n    assert right_angle_triangle(1, 2, 3) == False\n    assert right_angle_triangle(1, 3, 2) == False\n    assert right_angle_triangle(2, 3, 1) == False\n    assert right_angle_triangle(3, 1, 2) == False\n    assert right_angle_triangle(2, 1, 3) == False"
    },
    {
      "rank": 42,
      "score": 8.0,
      "candidate": "return (a**2 + b**2 == c**2) or (a**2 + c**2 == b**2) or (b**2 + c**2 == a**2)"
    },
    {
      "rank": 43,
      "score": 8.0,
      "candidate": "# Solution\n    return (a**2 + b**2 == c**2) or (a**2 + c**2 == b**2) or (b**2 + c**2 == a**2)\n\n\n# TESTS\nassert right_angle_triangle(3, 4, 5) == True\nassert right_angle_triangle(1, 2, 3) == False\nassert right_angle_triangle(1, 3, 2) == False\nassert right_angle_triangle(2, 3, 4) == False"
    },
    {
      "rank": 44,
      "score": 8.0,
      "candidate": "return (a**2 + b**2 == c**2) or (a**2 + c**2 == b**2) or (b**2 + c**2 == a**2)"
    },
    {
      "rank": 45,
      "score": 8.0,
      "candidate": "if a**2 + b**2 == c**2 or a**2 + c**2 == b**2 or b**2 + c**2 == a**2:\n        return True\n    else:\n        return False"
    },
    {
      "rank": 46,
      "score": 8.0,
      "candidate": "if a**2 + b**2 == c**2:\n        return True\n    else:\n        return False\n\n\ndef main():\n    print(right_angle_triangle(3, 4, 5))\n    print(right_angle_triangle(1, 2, 3))\n    print(right_angle_triangle(3, 4, 3))\n    print(right_angle_triangle(1, 2, 5))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 47,
      "score": 8.0,
      "candidate": "if a**2 + b**2 == c**2:\n        return True\n    elif a**2 + c**2 == b**2:\n        return True\n    elif b**2 + c**2 == a**2:\n        return True\n    else:\n        return False"
    },
    {
      "rank": 48,
      "score": 8.0,
      "candidate": "return a**2 + b**2 == c**2\n\nprint(right_angle_triangle(3, 4, 5))\nprint(right_angle_triangle(1, 2, 3))"
    },
    {
      "rank": 49,
      "score": 8.0,
      "candidate": "if (a**2 + b**2) == c**2 or (a**2 + c**2) == b**2 or (b**2 + c**2) == a**2:\n        return True\n    else:\n        return False"
    },
    {
      "rank": 50,
      "score": 8.0,
      "candidate": "if a**2 + b**2 == c**2 or a**2 + c**2 == b**2 or b**2 + c**2 == a**2:\n        return True\n    else:\n        return False"
    },
    {
      "rank": 51,
      "score": 8.0,
      "candidate": "if a**2 + b**2 == c**2:\n        return True\n    else:\n        return False\n\nprint(right_angle_triangle(3, 4, 5))\nprint(right_angle_triangle(1, 2, 3))"
    },
    {
      "rank": 52,
      "score": 8.0,
      "candidate": "if a**2 + b**2 == c**2:\n        return True\n    else:\n        return False\n\ndef right_angle_triangle2(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1, 2, 3) == False\n    '''\n    return a**2 + b**2 == c**2\n\nprint(right_angle_triangle(3, 4, 5))\nprint(right_angle_triangle(1, 2, 3))\n\nprint(right_angle_triangle2(3, 4, 5))\nprint(right_angle_triangle2(1, 2, 3))"
    },
    {
      "rank": 53,
      "score": 8.0,
      "candidate": "if a**2 + b**2 == c**2 or a**2 + c**2 == b**2 or b**2 + c**2 == a**2:\n        return True\n    else:\n        return False\n\n\nprint(right_angle_triangle(3, 4, 5))\nprint(right_angle_triangle(1, 2, 3))"
    },
    {
      "rank": 54,
      "score": 8.0,
      "candidate": "if a**2 + b**2 == c**2 or a**2 + c**2 == b**2 or b**2 + c**2 == a**2:\n        return True\n    return False"
    },
    {
      "rank": 55,
      "score": 8.0,
      "candidate": "if a**2 + b**2 == c**2:\n        return True\n    else:\n        return False\n\ndef test_cases():\n    assert right_angle_triangle(3, 4, 5) == True\n    assert right_angle_triangle(1, 2, 3) == False\n    assert right_angle_triangle(7, 24, 25) == True\n    assert right_angle_triangle(5, 12, 13) == False\n    assert right_angle_triangle(10, 10, 17) == True\n    assert right_angle_triangle(10, 17, 10) == True\n    assert right_angle_triangle(10, 17, 20) == False\n    print(\"Test Success!\")\n\ntest_cases()"
    },
    {
      "rank": 56,
      "score": 8.0,
      "candidate": "if a**2 + b**2 == c**2 or a**2 + c**2 == b**2 or b**2 + c**2 == a**2:\n        return True\n    else:\n        return False"
    },
    {
      "rank": 57,
      "score": 8.0,
      "candidate": "if a**2 + b**2 == c**2:\n        return True\n    else:\n        return False\n\nassert (right_angle_triangle(3, 4, 5)), \"Should be True\"\nassert not (right_angle_triangle(1, 2, 3)), \"Should be False\""
    },
    {
      "rank": 58,
      "score": 8.0,
      "candidate": "return a ** 2 + b ** 2 == c ** 2\n\nprint(right_angle_triangle(3, 4, 5))\nprint(right_angle_triangle(1, 2, 3))"
    },
    {
      "rank": 59,
      "score": 8.0,
      "candidate": "return a**2 + b**2 == c**2 or a**2 + c**2 == b**2 or b**2 + c**2 == a**2\n\n\nprint(right_angle_triangle(3, 4, 5))\nprint(right_angle_triangle(1, 2, 3))"
    },
    {
      "rank": 60,
      "score": 8.0,
      "candidate": "return a**2 + b**2 == c**2\n\nprint(right_angle_triangle(3, 4, 5))\nprint(right_angle_triangle(1, 2, 3))"
    },
    {
      "rank": 61,
      "score": 8.0,
      "candidate": "if a**2 + b**2 == c**2:\n        return True\n    else:\n        return False\n\nprint(right_angle_triangle(3, 4, 5))\nprint(right_angle_triangle(1, 2, 3))"
    },
    {
      "rank": 62,
      "score": 8.0,
      "candidate": "return (a**2 + b**2 == c**2) or (a**2 + c**2 == b**2) or (b**2 + c**2 == a**2)\n\n\nprint(right_angle_triangle(3, 4, 5))\nprint(right_angle_triangle(1, 2, 3))\nprint(right_angle_triangle(2, 2, 3))\nprint(right_angle_triangle(1, 1, 1))"
    },
    {
      "rank": 63,
      "score": 8.0,
      "candidate": "return (a ** 2 + b ** 2) == c ** 2"
    },
    {
      "rank": 64,
      "score": 8.0,
      "candidate": "return a ** 2 + b ** 2 == c ** 2"
    },
    {
      "rank": 65,
      "score": 8.0,
      "candidate": "if a**2 + b**2 == c**2:\n        return True\n    else:\n        return False"
    },
    {
      "rank": 66,
      "score": 8.0,
      "candidate": "return (a ** 2 + b ** 2 == c ** 2) or (a ** 2 + c ** 2 == b ** 2) or (b ** 2 + c ** 2 == a ** 2)"
    },
    {
      "rank": 67,
      "score": 8.0,
      "candidate": "return a**2 + b**2 == c**2\n\n\nprint(right_angle_triangle(3, 4, 5))\nprint(right_angle_triangle(1, 2, 3))"
    },
    {
      "rank": 68,
      "score": 8.0,
      "candidate": "if (a**2 + b**2 == c**2) or (a**2 + c**2 == b**2) or (b**2 + c**2 == a**2):\n        return True\n    else:\n        return False\n\nprint(right_angle_triangle(3, 4, 5))\nprint(right_angle_triangle(1, 2, 3))"
    },
    {
      "rank": 69,
      "score": 8.0,
      "candidate": "return (a**2 + b**2 == c**2) or (a**2 + c**2 == b**2) or (b**2 + c**2 == a**2)"
    },
    {
      "rank": 70,
      "score": 8.0,
      "candidate": "if a**2 + b**2 == c**2 or a**2 + c**2 == b**2 or b**2 + c**2 == a**2:\n        return True\n    else:\n        return False"
    },
    {
      "rank": 71,
      "score": 8.0,
      "candidate": "if a**2 + b**2 == c**2:\n        return True\n    else:\n        return False\n\ndef test_cases():\n    assert right_angle_triangle(3, 4, 5) == True\n    assert right_angle_triangle(1, 2, 3) == False\n    assert right_angle_triangle(3, 4, 3) == False\n    assert right_angle_triangle(2, 2, 2) == False\n    assert right_angle_triangle(2, 3, 5) == False\n    assert right_angle_triangle(5, 12, 13) == True\n    assert right_angle_triangle(7, 24, 25) == True\n    assert right_angle_triangle(4, 12, 13) == False\n    assert right_angle_triangle(4, 12, 14) == True\n    print(\"Test Success!\")\n\ntest_cases()"
    },
    {
      "rank": 72,
      "score": 8.0,
      "candidate": "return a**2 + b**2 == c**2\n\ndef test_right_angle_triangle():\n    assert right_angle_triangle(3, 4, 5) == True\n    assert right_angle_triangle(1, 2, 3) == False\n\nif __name__ == '__main__':\n    test_right_angle_triangle()"
    },
    {
      "rank": 73,
      "score": 8.0,
      "candidate": "return a**2 + b**2 == c**2"
    },
    {
      "rank": 74,
      "score": 8.0,
      "candidate": "if a**2 + b**2 == c**2 or a**2 + c**2 == b**2 or b**2 + c**2 == a**2:\n        return True\n    else:\n        return False"
    },
    {
      "rank": 75,
      "score": 8.0,
      "candidate": "return a**2 + b**2 == c**2\n\ndef test_right_angle_triangle():\n    assert right_angle_triangle(3, 4, 5) == True\n    assert right_angle_triangle(1, 2, 3) == False\n    assert right_angle_triangle(1, 2, 3) == False\n\nif __name__ == '__main__':\n    test_right_angle_triangle()"
    },
    {
      "rank": 76,
      "score": 8.0,
      "candidate": "return a**2 + b**2 == c**2\n\n\nassert(right_angle_triangle(3, 4, 5) == True)\nassert(right_angle_triangle(1, 2, 3) == False)"
    },
    {
      "rank": 77,
      "score": 8.0,
      "candidate": "return (a**2 + b**2 == c**2) or (a**2 + c**2 == b**2) or (b**2 + c**2 == a**2)"
    },
    {
      "rank": 78,
      "score": 8.0,
      "candidate": "if a**2 + b**2 == c**2 or a**2 + c**2 == b**2 or b**2 + c**2 == a**2:\n        return True\n    else:\n        return False\n\nprint(right_angle_triangle(3, 4, 5))\nprint(right_angle_triangle(1, 2, 3))"
    },
    {
      "rank": 79,
      "score": 8.0,
      "candidate": "if a**2 + b**2 == c**2:\n        return True\n    else:\n        return False"
    },
    {
      "rank": 80,
      "score": 1.0,
      "candidate": "# return a**2 + b**2 == c**2\n    return (a**2 + b**2 == c**2) or (a**2 + c**2 == b**2) or (b**2 + c**2 == a**2)\n\n\ndef test_right_angle_triangle():\n    assert right_angle_triangle(3, 4, 5) == True\n    assert right_angle_triangle(1, 2, 3) == False\n    assert right_angle_triangle(2, 2, 2) == True\n    assert right_angle_triangle(10, 2, 2) == False\n    assert right_angle_triangle(10, 2, 20) == True\n    assert right_angle_triangle(10, 20, 2) == False\n    assert right_angle_triangle(10, 20, 20) == True\n    assert right_angle_triangle(20, 20, 20) == True\n    assert right_angle_triangle(10, 10, 10) == True\n    assert right_angle_triangle(10, 10, 11) == False\n    assert right_angle_triangle(10, 11, 10) == False\n    assert right_angle_triangle(11, 10, 10) == False\n    assert right_angle_triangle(11, 11, 10) == False\n    assert right_angle_triangle(11, 10, 11) == True\n    assert right_angle_triangle(10, 11, 11) == True\n    assert right_angle_triangle(11, 11, 11) == True\n    assert right_angle_triangle(11, 11, 12) == False\n    assert right_angle_triangle(11, 12, 11) == False\n    assert right_angle_triangle(12, 11, 11) == False\n    assert right_angle_triangle(12, 11, 12) == True\n    assert right_angle_triangle(12, 12"
    },
    {
      "rank": 81,
      "score": 1.0,
      "candidate": "if a**2 + b**2 == c**2:\n        return True\n    else:\n        return False\n\n\nprint(right_angle_triangle(3, 4, 5))\nprint(right_angle_triangle(1, 2, 3))\n\n# Another way to do the same\n\ndef right_angle_triangle_1(a, b, c):\n    return a**2 + b**2 == c**2\n\nprint(right_angle_triangle(3, 4, 5))\nprint(right_angle_triangle(1, 2, 3))"
    },
    {
      "rank": 82,
      "score": 1.0,
      "candidate": "if a**2 + b**2 == c**2:\n        return True\n    else:\n        return False\n\n\n\ndef is_right_angle_triangle(a, b, c):\n    return (a**2 + b**2 == c**2)\n\n\n\ndef is_right_angle_triangle_2(a, b, c):\n    return a**2 + b**2 == c**2\n\n\n\ndef is_right_angle_triangle_3(a, b, c):\n    return a**2 + b**2 == c**2\n\n\n\ndef is_right_angle_triangle_4(a, b, c):\n    return a**2 + b**2 == c**2\n\n\n\ndef is_right_angle_triangle_5(a, b, c):\n    return a**2 + b**2 == c**2\n\n\n\ndef is_right_angle_triangle_6(a, b, c):\n    return a**2 + b**2 == c**2\n\n\n\ndef is_right_angle_triangle_7(a, b, c):\n    return a**2 + b**2 == c**2\n\n\n\ndef is_right_angle_triangle_8(a, b, c):\n    return a**2 + b**2 == c**2\n\n\n\ndef is_right_angle_triangle_9(a, b, c):\n    return a**2 + b**2 == c**2\n\n\n\ndef is_right_angle_triangle_10(a, b, c):\n    return a**2 + b**2 == c**2\n\n\n\ndef is_right_angle_triangle_11(a, b, c):\n    return a**2 + b**2 == c**2\n\n\n\ndef is_right_angle_triangle_12(a, b, c):\n    return a**2 + b**2 == c**2\n\n\n\ndef is_right_angle_triangle_13(a, b, c):\n    return a**2 + b**2 == c**2\n\n\n\ndef is_right_angle_triangle_14(a, b, c):\n    return a**"
    },
    {
      "rank": 83,
      "score": 1.0,
      "candidate": "# code goes here\n    return a**2 + b**2 == c**2 or a**2 + c**2 == b**2 or b**2 + c**2 == a**2\n\n#---------------------------------------------------------------------------\n\ndef is_pythagorean_triplet(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a pythagorean triplet, False otherwise.\n    A pythagorean triplet is a triplet of positive integers a, b, c, for which,\n    a**2 + b**2 = c**2\n    Example:\n    is_pythagorean_triplet(3, 4, 5) == True\n    is_pythagorean_triplet(1, 2, 3) == False\n    '''\n    # code goes here\n    return a**2 + b**2 == c**2\n\n#---------------------------------------------------------------------------\n\ndef is_triplet(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a triplet, False otherwise.\n    A triplet is a triplet of positive integers a, b, c, for which,\n    a + b + c == 1000\n    Example:\n    is_triplet(333, 452, 221) == True\n    is_triplet(1, 2, 3) == False\n    '''\n    # code goes here\n    return a + b + c == 1000\n\n#---------------------------------------------------------------------------\n\ndef is_right_angled_and_pythagorean_triplet(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled pythagorean triplet, False otherwise.\n    A right-angled pythagorean triplet is a triplet of positive integers a, b, c, for which,\n    a**2 + b**2 = c**2 and one angle is right angle or"
    },
    {
      "rank": 84,
      "score": 1.0,
      "candidate": "# code goes here\n    if a**2 + b**2 == c**2 or a**2 + c**2 == b**2 or b**2 + c**2 == a**2:\n        return True\n    else:\n        return False\n\n\n# \ud83d\udea8 Don't change the code below \ud83d\udc47\nprint(right_angle_triangle(3, 4, 5))\nprint(right_angle_triangle(1, 2, 3))"
    },
    {
      "rank": 85,
      "score": 1.0,
      "candidate": "# check if the three sides form a right angle triangle\n    if a**2 + b**2 == c**2 or a**2 + c**2 == b**2 or b**2 + c**2 == a**2:\n        return True\n    else:\n        return False\n\n\ndef right_angle_triangle_2(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1, 2, 3) == False\n    '''\n    # check if the three sides form a right angle triangle\n    return a**2 + b**2 == c**2 or a**2 + c**2 == b**2 or b**2 + c**2 == a**2"
    },
    {
      "rank": 86,
      "score": 1.0,
      "candidate": "return a**2 + b**2 == c**2\n\n\ndef right_angle_triangle_v2(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1, 2, 3) == False\n    '''\n    return (a**2 + b**2 == c**2) or (a**2 + c**2 == b**2) or (b**2 + c**2 == a**2)\n\n\ndef right_angle_triangle_v3(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1, 2, 3) == False\n    '''\n    return (a**2 + b**2 == c**2) or (a**2 + c**2 == b**2) or (b**2 + c**2 == a**2)"
    },
    {
      "rank": 87,
      "score": 1.0,
      "candidate": "# code goes here\n    return a**2 + b**2 == c**2\n\n\n# \ud83d\udea8 Don't change the code below \nprint(right_angle_triangle(3, 4, 5))\nprint(right_angle_triangle(3, 4, 6))"
    },
    {
      "rank": 88,
      "score": 1.0,
      "candidate": "return a ** 2 + b ** 2 == c ** 2\n\ndef test_right_angle_triangle():\n    assert right_angle_triangle(3, 4, 5) == True\n    assert right_angle_triangle(1, 2, 3) == False\n    assert right_angle_triangle(5, 12, 13) == True\n    assert right_angle_triangle(10, 10, 17) == True\n    assert right_angle_triangle(10, 10, 19) == False\n    assert right_angle_triangle(10, 11, 19) == False\n    assert right_angle_triangle(3, 4, 12) == False\n    assert right_angle_triangle(10, 10, 30) == False\n    assert right_angle_triangle(2, 2, 3) == False\n    assert right_angle_triangle(3, 3, 3) == False\n    assert right_angle_triangle(10, 10, 31) == False\n    assert right_angle_triangle(3, 4, 4) == False\n    assert right_angle_triangle(1, 1, 1) == False\n    assert right_angle_triangle(0, 0, 0) == False\n\n\nif __name__ == \"__main__\":\n    test_right_angle_triangle()\n    print(\"Pass\")"
    },
    {
      "rank": 89,
      "score": 1.0,
      "candidate": "return a**2 + b**2 == c**2\n\n\ndef right_angle_triangle(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1, 2, 3) == False\n    '''\n    return a**2 + b**2 == c**2"
    },
    {
      "rank": 90,
      "score": 1.0,
      "candidate": "# 1.\n    # if a**2 + b**2 == c**2 or a**2 + c**2 == b**2 or b**2 + c**2 == a**2:\n    #     return True\n    # else:\n    #     return False\n\n    # 2.\n    # if (a**2 + b**2 == c**2) or (a**2 + c**2 == b**2) or (b**2 + c**2 == a**2):\n    #     return True\n    # else:\n    #     return False\n\n    # 3.\n    # if (a**2 + b**2 == c**2) or (a**2 + c**2 == b**2) or (b**2 + c**2 == a**2):\n    #     return True\n    # else:\n    #     return False\n\n    # 4.\n    # return (a**2 + b**2 == c**2) or (a**2 + c**2 == b**2) or (b**2 + c**2 == a**2)\n\n    # 5.\n    return (a**2 + b**2 == c**2) or (a**2 + c**2 == b**2) or (b**2 + c**2 == a**2)\n\nif __name__ == '__main__':\n    print(right_angle_triangle(3, 4, 5))\n    print(right_angle_triangle(1, 2, 3))"
    },
    {
      "rank": 91,
      "score": 1.0,
      "candidate": "if a**2 + b**2 == c**2:\n        return True\n    else:\n        return False\n\nif __name__ == '__main__':\n    #These \"asserts\" using only for self-checking and not necessary for auto-testing\n    assert right_angle_triangle(3, 4, 5) == True\n    assert right_angle_triangle(4, 3, 5) == True\n    assert right_angle_triangle(5, 4, 3) == True\n    assert right_angle_triangle(3, 5, 4) == True\n    assert right_angle_triangle(4, 5, 3) == True\n    assert right_angle_triangle(5, 3, 4) == True\n    assert right_angle_triangle(1, 1, 1) == False\n    assert right_angle_triangle(1, 1, 2) == False"
    },
    {
      "rank": 92,
      "score": 1.0,
      "candidate": "return a**2 + b**2 == c**2\n\ndef right_angle_triangle2(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    right_angle_triangle2(3, 4, 5) == True\n    right_angle_triangle2(1, 2, 3) == False\n    '''\n    return (a**2 + b**2 == c**2) or (b**2 + c**2 == a**2) or (a**2 + c**2 == b**2)\n\n\ndef right_angle_triangle3(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    right_angle_triangle3(3, 4, 5) == True\n    right_angle_triangle3(1, 2, 3) == False\n    '''\n    return (a**2 + b**2 == c**2) or (b**2 + c**2 == a**2) or (a**2 + c**2 == b**2)"
    },
    {
      "rank": 93,
      "score": 1.0,
      "candidate": "if a**2 + b**2 == c**2:\n        return True\n    else:\n        return False\n\nprint(right_angle_triangle(3, 4, 5))\nprint(right_angle_triangle(1, 2, 3))\n\ndef right_angle_triangle_2(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1, 2, 3) == False\n    '''\n    if a**2 + b**2 == c**2:\n        return True\n    elif a**2 + c**2 == b**2:\n        return True\n    elif b**2 + c**2 == a**2:\n        return True\n    else:\n        return False\n\nprint(right_angle_triangle_2(3, 4, 5))\nprint(right_angle_triangle_2(1, 2, 3))\n\ndef right_angle_triangle_3(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1, 2, 3) == False\n    '''\n    if a**2 + b**2 == c**2 or a**2 + c**2 == b**2 or b**2 + c**2 == a**2:\n        return True\n    else:\n        return False\n\nprint(right_angle_triangle_3(3, 4, 5))\nprint(right_angle_triangle_3(1, 2, 3))\n\ndef right_angle_triangle_4(a, b,"
    },
    {
      "rank": 94,
      "score": 1.0,
      "candidate": "if a**2 + b**2 == c**2 or a**2 + c**2 == b**2 or b**2 + c**2 == a**2:\n        return True\n    else:\n        return False\n\n\ndef right_angle_triangle2(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    right_angle_triangle2(3, 4, 5) == True\n    right_angle_triangle2(1, 2, 3) == False\n    '''\n    return a**2 + b**2 == c**2 or a**2 + c**2 == b**2 or b**2 + c**2 == a**2\n\n\ndef right_angle_triangle3(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    right_angle_triangle3(3, 4, 5) == True\n    right_angle_triangle3(1, 2, 3) == False\n    '''\n    return a**2 + b**2 == c**2 or a**2 + c**2 == b**2 or b**2 + c**2 == a**2\n\n\ndef right_angle_triangle4(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    right_angle_triangle4(3, 4, 5) == True\n    right_angle_triangle4(1, 2, 3) == False\n    '''\n    return a**2 + b**2 == c**2 or a**"
    },
    {
      "rank": 95,
      "score": 1.0,
      "candidate": "if a**2 + b**2 == c**2:\n        return True\n    else:\n        return False\n\n\ndef is_square(n):\n    '''\n    Check if a number is a square number. A square number is a number that is \n    the square of an integer.\n    Example:\n    is_square(16) == True\n    is_square(5) == False\n    '''\n    root = n ** 0.5\n    return root.is_integer()\n\n\ndef is_pentagon_number(n):\n    '''\n    Check if a number is a pentagon number. A pentagon number is a number that is \n    the sum of the fifth degree of its numbers.\n    Example:\n    is_pentagon_number(123) == True\n    is_pentagon_number(124) == False\n    '''\n    return is_square(24*n + 1)\n\n\ndef is_hexagon_number(n):\n    '''\n    Check if a number is a hexagon number. A hexagon number is a number that is \n    the sum of the sixth degree of its numbers.\n    Example:\n    is_hexagon_number(123) == True\n    is_hexagon_number(124) == False\n    '''\n    return is_square(8*n + 1)\n\n\ndef is_heptagon_number(n):\n    '''\n    Check if a number is a heptagon number. A heptagon number is a number that is \n    the sum of the seventh degree of its numbers.\n    Example:\n    is_heptagon_number(123) == True\n    is_heptagon_number(124) == False\n    '''\n    return is_square(12*n + 1)\n\n\ndef is_octagon_number(n):\n    '''\n    Check if a number is a octagon number. A octagon number is a number that is \n    the sum of the eighth degree of its numbers.\n    Example:\n    is_octagon_number(123) == True\n    is_octagon_number(124) == False"
    },
    {
      "rank": 96,
      "score": 1.0,
      "candidate": "return (a**2 + b**2 == c**2) or (a**2 + c**2 == b**2) or (b**2 + c**2 == a**2)\n\nif __name__ == '__main__':\n    print(\"Example:\")\n    print(right_angle_triangle(3, 4, 5))\n\n    #These \"asserts\" using only for self-checking and not necessary for auto-testing\n    assert right_angle_triangle(3, 4, 5) == True\n    assert right_angle_triangle(1, 2, 3) == False\n    assert right_angle_triangle(2, 2, 2) == False\n    assert right_angle_triangle(1, 1, 1) == False\n    assert right_angle_triangle(17, 24, 25) == True\n    print(\"Coding complete? Click 'Check' to earn cool rewards!\")"
    },
    {
      "rank": 97,
      "score": 1.0,
      "candidate": "if (a ** 2 + b ** 2 == c ** 2) or (a ** 2 + c ** 2 == b ** 2) or (b ** 2 + c ** 2 == a ** 2):\n        return True\n    else:\n        return False\n\nif __name__ == '__main__':\n    print(\"Example:\")\n    print(right_angle_triangle(3, 4, 5))\n\n    # These \"asserts\" are used for self-checking and not for an auto-testing\n    assert right_angle_triangle(3, 4, 5) == True\n    assert right_angle_triangle(3, 4, 6) == False\n    assert right_angle_triangle(3, 6, 4) == False\n    print(\"Coding complete? Click 'Check' to earn cool rewards!\")"
    },
    {
      "rank": 98,
      "score": 1.0,
      "candidate": "# Please print out which test cases are passed and which are failed.\n    # Do not use return in any case.\n    if (a ** 2 + b ** 2 == c ** 2) or (a ** 2 + c ** 2 == b ** 2) or (b ** 2 + c ** 2 == a ** 2):\n        print(\"passed\")\n    else:\n        print(\"failed\")\n\nright_angle_triangle(3, 4, 5)\nright_angle_triangle(1, 2, 3)"
    },
    {
      "rank": 99,
      "score": 1.0,
      "candidate": "return a**2 + b**2 == c**2 or a**2 + c**2 == b**2 or b**2 + c**2 == a**2\n\nprint(right_angle_triangle(3, 4, 5))\nprint(right_angle_triangle(1, 2, 3))\n\ndef right_angle_triangle(a, b, c):\n    return a**2 + b**2 == c**2 or a**2 + c**2 == b**2 or b**2 + c**2 == a**2\n\ndef right_angle_triangle(a, b, c):\n    return a**2 + b**2 == c**2 or a**2 + c**2 == b**2 or b**2 + c**2 == a**2\n\ndef right_angle_triangle(a, b, c):\n    return a**2 + b**2 == c**2 or a**2 + c**2 == b**2 or b**2 + c**2 == a**2\n\ndef right_angle_triangle(a, b, c):\n    return a**2 + b**2 == c**2 or a**2 + c**2 == b**2 or b**2 + c**2 == a**2\n\ndef right_angle_triangle(a, b, c):\n    return a**2 + b**2 == c**2 or a**2 + c**2 == b**2 or b**2 + c**2 == a**2\n\ndef right_angle_triangle(a, b, c):\n    return a**2 + b**2 == c**2 or a**2 + c**2 == b**2 or b**2 + c**2 == a**2\n\ndef right_angle_triangle(a, b, c):\n    return a**2 + b**2 == c**2 or a**2 + c**2 == b**2 or b**2 + c**2 == a**2\n\ndef right_angle_triangle(a, b, c):\n    return a**2 + b**2 == c**2 or a**2 + c**2 == b**2 or b**2 + c**2 == a**2\n\ndef right_angle_triangle(a, b, c):"
    },
    {
      "rank": 100,
      "score": 1.0,
      "candidate": "# code goes here\n    return (a ** 2 + b ** 2 == c ** 2) or (a ** 2 + c ** 2 == b ** 2) or (b ** 2 + c ** 2 == a ** 2)\n\nprint(right_angle_triangle(3, 4, 5))\nprint(right_angle_triangle(1, 2, 3))\n\n# 1.\n# def right_angle_triangle(a, b, c):\n#     '''\n#     Given the lengths of the three sides of a triangle. Return True if the three\n#     sides form a right-angled triangle, False otherwise.\n#     A right-angled triangle is a triangle in which one angle is right angle or \n#     90 degree.\n#     Example:\n#     right_angle_triangle(3, 4, 5) == True\n#     right_angle_triangle(1, 2, 3) == False\n#     '''\n#     # code goes here\n#     return (a ** 2 + b ** 2 == c ** 2) or (a ** 2 + c ** 2 == b ** 2) or (b ** 2 + c ** 2 == a ** 2)\n\n# print(right_angle_triangle(3, 4, 5))\n# print(right_angle_triangle(1, 2, 3))\n\n# 2.\n# def right_angle_triangle(a, b, c):\n#     '''\n#     Given the lengths of the three sides of a triangle. Return True if the three\n#     sides form a right-angled triangle, False otherwise.\n#     A right-angled triangle is a triangle in which one angle is right angle or \n#     90 degree.\n#     Example:\n#     right_angle_triangle(3, 4, 5) == True\n#     right_angle_triangle(1, 2, 3) == False\n#     '''\n#     # code goes here\n#     return (a ** 2 + b ** 2 == c ** 2) or (a ** 2 + c ** 2 == b ** 2) or (b ** 2 + c **"
    }
  ]
}