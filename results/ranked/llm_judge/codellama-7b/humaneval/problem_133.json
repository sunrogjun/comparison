{
  "timestamp": "2025-09-14T22:04:14.176875",
  "method": "improved_llm_judge",
  "judge_model": "codellama/CodeLlama-7b-Python-hf",
  "target_model": "codellama-7b",
  "dataset": "humaneval",
  "problem_number": 133,
  "total_candidates": 100,
  "results": [
    {
      "rank": 1,
      "score": 10.0,
      "candidate": "return sum(map(lambda x: int(x*x), lst))\n\n\nif __name__ == '__main__':\n    print(sum_squares([1,2,3]))\n    print(sum_squares([1,4,9]))\n    print(sum_squares([1,3,5,7]))\n    print(sum_squares([1.4,4.2,0]))\n    print(sum_squares([-2.4,1,1]))"
    },
    {
      "rank": 2,
      "score": 10.0,
      "candidate": "return sum([int(math.ceil(num**2)) for num in lst])\n\n\nif __name__ == '__main__':\n    assert sum_squares([1, 2, 3]) == 14, (sum_squares([1, 2, 3]), 14)\n    assert sum_squares([1, 4, 9]) == 98, (sum_squares([1, 4, 9]), 98)\n    assert sum_squares([1, 3, 5, 7]) == 84, (sum_squares([1, 3, 5, 7]), 84)\n    assert sum_squares([1.4, 4.2, 0]) == 29, (sum_squares([1.4, 4.2, 0]), 29)\n    assert sum_squares([-2.4, 1, 1]) == 6, (sum_squares([-2.4, 1, 1]), 6)"
    },
    {
      "rank": 3,
      "score": 10.0,
      "candidate": "lst = [int(math.ceil(x)) for x in lst]\n    return sum([x**2 for x in lst])"
    },
    {
      "rank": 4,
      "score": 10.0,
      "candidate": "lst = [int(num)**2 for num in lst]\n    return sum(lst)\n\n\n\n\ndef sum_squares_one_line(lst):\n    \"\"\"You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\n    return sum(int(num)**2 for num in lst)"
    },
    {
      "rank": 5,
      "score": 10.0,
      "candidate": "return sum([int(i**2) for i in lst])"
    },
    {
      "rank": 6,
      "score": 10.0,
      "candidate": "squared_list = [int(x**2) for x in lst]\n    return sum(squared_list)\n\n\nif __name__ == '__main__':\n    # These \"asserts\" using only for self-checking and not necessary for auto-testing\n    assert sum_squares([1, 2, 3]) == 14, \"First\"\n    assert sum_squares([1, 2, 2]) == 10, \"Second\"\n    assert sum_squares((1, 1, 1)) == 3, \"Third\"\n    assert sum_squares([3, 2, 2]) == 20, \"Fourth\"\n    assert sum_squares([3, 2, 4]) == 60, \"Fifth\""
    },
    {
      "rank": 7,
      "score": 10.0,
      "candidate": "result = 0\n    for num in lst:\n        result += num ** 2\n    return result\n\n\nif __name__ == '__main__':\n    print(sum_squares([1,2,3]))"
    },
    {
      "rank": 8,
      "score": 10.0,
      "candidate": "return sum([int(num**2) for num in lst])\n\n\nprint(sum_squares([1, 2, 3]))\nprint(sum_squares([1, 4, 9]))\nprint(sum_squares([1, 3, 5, 7]))\nprint(sum_squares([1.4, 4.2, 0]))\nprint(sum_squares([-2.4, 1, 1]))"
    },
    {
      "rank": 9,
      "score": 10.0,
      "candidate": "# return sum(int(i**2) for i in lst)\n    lst = [int(i**2) for i in lst]\n    return sum(lst)\n\n\ndef sum_squares_2(lst):\n    \"\"\"You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\n    return sum([int(i**2) for i in lst])"
    },
    {
      "rank": 10,
      "score": 10.0,
      "candidate": "# return sum([int(math.ceil(x))**2 for x in lst])\n    return sum([int(math.ceil(x))**2 for x in lst])\n\n\ndef sum_squares_v2(lst):\n    \"\"\"You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n\n    \"\"\"\n    return sum([int(math.ceil(x))**2 for x in lst])\n\n\n\ndef sum_squares_v3(lst):\n    \"\"\"You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n\n    \"\"\"\n    return sum([int(math.ceil(x))**2 for x in lst])\n\n\n\ndef sum_squares_v4(lst):\n    \"\"\"You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14"
    },
    {
      "rank": 11,
      "score": 10.0,
      "candidate": "return sum([int(math.ceil(i)**2) for i in lst])"
    },
    {
      "rank": 12,
      "score": 10.0,
      "candidate": "return sum([pow(x, 2) for x in lst])\n\n\nprint(sum_squares([1, 2, 3]))\nprint(sum_squares([1, 4, 9]))\nprint(sum_squares([1, 3, 5, 7]))\nprint(sum_squares([1.4, 4.2, 0]))\nprint(sum_squares([-2.4, 1, 1]))"
    },
    {
      "rank": 13,
      "score": 10.0,
      "candidate": "return sum([int(x**2) for x in lst])\n\n\n\ndef sum_squares(lst):\n    \"\"\"You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\n    return sum([int(x**2) for x in lst])"
    },
    {
      "rank": 14,
      "score": 10.0,
      "candidate": "return sum(int(i**2) for i in lst)\n\n\n\ndef sum_squares(lst):\n    \"\"\"You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\n    return sum(int(i**2) for i in lst)\n\n\n\n\n\n\ndef sum_squares(lst):\n    \"\"\"You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\n    return sum(int(i**2) for i in lst)\n\n\n\n\n\n\ndef sum_squares(lst):\n    \"\"\"You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7"
    },
    {
      "rank": 15,
      "score": 10.0,
      "candidate": "lst = [int(x+1) for x in lst]\n    lst = [x**2 for x in lst]\n    return sum(lst)\n\n\nif __name__ == '__main__':\n    lst = [1, 2, 3]\n    print(sum_squares(lst))\n    lst = [1, 4, 9]\n    print(sum_squares(lst))\n    lst = [1, 3, 5, 7]\n    print(sum_squares(lst))\n    lst = [1.4, 4.2, 0]\n    print(sum_squares(lst))\n    lst = [-2.4, 1, 1]\n    print(sum_squares(lst))"
    },
    {
      "rank": 16,
      "score": 10.0,
      "candidate": "return sum([int(x**2) for x in lst])\n\n\nif __name__ == '__main__':\n    assert sum_squares([1, 2, 3]) == 14, (sum_squares([1, 2, 3]), 14)\n    assert sum_squares([1, 4, 9]) == 98, (sum_squares([1, 4, 9]), 98)\n    assert sum_squares([1, 3, 5, 7]) == 84, (sum_squares([1, 3, 5, 7]), 84)\n    assert sum_squares([1.4, 4.2, 0]) == 29, (sum_squares([1.4, 4.2, 0]), 29)\n    assert sum_squares([-2.4, 1, 1]) == 6, (sum_squares([-2.4, 1, 1]), 6)"
    },
    {
      "rank": 17,
      "score": 10.0,
      "candidate": "pass"
    },
    {
      "rank": 18,
      "score": 10.0,
      "candidate": "pass"
    },
    {
      "rank": 19,
      "score": 10.0,
      "candidate": "new_lst = []\n    for i in lst:\n        new_lst.append(int(i+1))\n    print(new_lst)\n    print(sum([i**2 for i in new_lst]))\n\n\nlst = [1.4, 4.2, 0]\nsum_squares(lst)"
    },
    {
      "rank": 20,
      "score": 10.0,
      "candidate": "# return sum([math.ceil(x)**2 for x in lst])\n    # return sum([int(x**2) for x in lst])\n    return sum([int(math.ceil(x)**2) for x in lst])\n\n\nif __name__ == '__main__':\n    print(sum_squares([1, 2, 3]))"
    },
    {
      "rank": 21,
      "score": 10.0,
      "candidate": "return sum([int(x)**2 for x in lst])\n\n\nif __name__ == '__main__':\n    print(sum_squares([1, 2, 3]))\n    print(sum_squares([1, 4, 9]))\n    print(sum_squares([1, 3, 5, 7]))\n    print(sum_squares([1.4, 4.2, 0]))\n    print(sum_squares([-2.4, 1, 1]))"
    },
    {
      "rank": 22,
      "score": 10.0,
      "candidate": "return sum([int(math.ceil(i**2)) for i in lst])"
    },
    {
      "rank": 23,
      "score": 10.0,
      "candidate": "lst = [int(x**2) for x in lst]\n    return sum(lst)\n\n\nprint(sum_squares([1,2,3]))\nprint(sum_squares([1,4,9]))\nprint(sum_squares([1,3,5,7]))\nprint(sum_squares([1.4,4.2,0]))\nprint(sum_squares([-2.4,1,1]))"
    },
    {
      "rank": 24,
      "score": 10.0,
      "candidate": "lst_up = [round(i) for i in lst]\n    lst_sq = [i**2 for i in lst_up]\n    return sum(lst_sq)"
    },
    {
      "rank": 25,
      "score": 10.0,
      "candidate": "sum_squares = 0\n    for x in lst:\n        sum_squares += int(x**2)\n    return sum_squares\n\n\nif __name__ == '__main__':\n    print(sum_squares([1, 2, 3]))\n    print(sum_squares([1, 4, 9]))\n    print(sum_squares([1, 3, 5, 7]))\n    print(sum_squares([1.4, 4.2, 0]))\n    print(sum_squares([-2.4, 1, 1]))"
    },
    {
      "rank": 26,
      "score": 10.0,
      "candidate": "lst_int = [int(i) for i in lst]\n    return sum([(i**2) for i in lst_int])"
    },
    {
      "rank": 27,
      "score": 10.0,
      "candidate": "return sum([int(x**2) for x in lst])"
    },
    {
      "rank": 28,
      "score": 10.0,
      "candidate": "return sum([int(i**2) for i in lst])\n\n\ndef sum_squares1(lst):\n    \"\"\"You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\n    return sum([int(i**2) for i in lst])\n\n\ndef sum_squares2(lst):\n    \"\"\"You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\n    return sum([int(i**2) for i in lst])\n\n\ndef sum_squares3(lst):\n    \"\"\"You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be"
    },
    {
      "rank": 29,
      "score": 10.0,
      "candidate": "return sum([int(math.ceil(num))**2 for num in lst])"
    },
    {
      "rank": 30,
      "score": 10.0,
      "candidate": "return sum([int(x**2) for x in lst])\n\n\ndef sum_squares(lst):\n    \"\"\"You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\n    return sum([int(x**2) for x in lst])\n\n\ndef sum_squares(lst):\n    \"\"\"You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\n    return sum([int(x**2) for x in lst])\n\n\ndef sum_squares(lst):\n    \"\"\"You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84"
    },
    {
      "rank": 31,
      "score": 10.0,
      "candidate": "return sum([int(x ** 2) for x in lst])\n\n\nif __name__ == '__main__':\n    print(sum_squares([1, 2, 3]))"
    },
    {
      "rank": 32,
      "score": 10.0,
      "candidate": "# ============================================\n    # My solution\n    # ============================================\n    # for i in range(len(lst)):\n    #     lst[i] = int(lst[i] + 1)\n    # return sum([i**2 for i in lst])\n\n    # ============================================\n    # More Pythonic solution\n    # ============================================\n    return sum(map(lambda x: int(x + 1) ** 2, lst))\n\n\nif __name__ == '__main__':\n    print(sum_squares([1, 2, 3]))"
    },
    {
      "rank": 33,
      "score": 10.0,
      "candidate": "lst = [int(i) for i in lst]\n    lst = [i**2 for i in lst]\n    return sum(lst)\n\n\nif __name__ == '__main__':\n    print(sum_squares([1, 2, 3]))"
    },
    {
      "rank": 34,
      "score": 10.0,
      "candidate": "return sum([int(i*i) for i in lst])\n\n\nif __name__ == '__main__':\n    print(sum_squares([1, 2, 3]))"
    },
    {
      "rank": 35,
      "score": 10.0,
      "candidate": "lst_upper = [int(i**2) for i in lst]\n    return sum(lst_upper)\n\n\n\n\nlst = [1,2,3]\nprint(sum_squares(lst))\n\nlst = [1,4,9]\nprint(sum_squares(lst))\n\nlst = [1,3,5,7]\nprint(sum_squares(lst))\n\nlst = [1.4,4.2,0]\nprint(sum_squares(lst))\n\nlst = [-2.4,1,1]\nprint(sum_squares(lst))"
    },
    {
      "rank": 36,
      "score": 10.0,
      "candidate": "return sum(map(lambda x: int(x)**2, map(lambda x: int(x)+1, lst)))\n\n\nif __name__ == '__main__':\n    print(sum_squares([1, 2, 3]))\n    print(sum_squares([1, 4, 9]))\n    print(sum_squares([1, 3, 5, 7]))\n    print(sum_squares([1.4, 4.2, 0]))\n    print(sum_squares([-2.4, 1, 1]))"
    },
    {
      "rank": 37,
      "score": 10.0,
      "candidate": "sum = 0\n    for i in lst:\n        sum += int(i) ** 2\n    return sum\n\n\nif __name__ == '__main__':\n    print(sum_squares([1, 2, 3]))\n    print(sum_squares([1, 4, 9]))\n    print(sum_squares([1, 3, 5, 7]))\n    print(sum_squares([1.4, 4.2, 0]))\n    print(sum_squares([-2.4, 1, 1]))"
    },
    {
      "rank": 38,
      "score": 10.0,
      "candidate": "# print(lst)\n    lst = [round(i) for i in lst]\n    # print(lst)\n    lst = [i**2 for i in lst]\n    # print(lst)\n    lst = sum(lst)\n    # print(lst)\n    return lst\n\n\n\n\n\nif __name__ == \"__main__\":\n    print(sum_squares([1,2,3]))\n    print(sum_squares([1,4,9]))\n    print(sum_squares([1,3,5,7]))\n    print(sum_squares([1.4,4.2,0]))\n    print(sum_squares([-2.4,1,1]))"
    },
    {
      "rank": 39,
      "score": 10.0,
      "candidate": "result = 0\n    for num in lst:\n        result += (num ** 2)\n    return result"
    },
    {
      "rank": 40,
      "score": 10.0,
      "candidate": "lst = [int(x) + 1 for x in lst]\n    lst = [x ** 2 for x in lst]\n    return sum(lst)"
    },
    {
      "rank": 41,
      "score": 10.0,
      "candidate": "return sum([int(math.ceil(i**2)) for i in lst])"
    },
    {
      "rank": 42,
      "score": 10.0,
      "candidate": "return sum(int(math.ceil(x)**2) for x in lst)"
    },
    {
      "rank": 43,
      "score": 10.0,
      "candidate": "pass\n\n\nprint(sum_squares([1, 2, 3]))\nprint(sum_squares([1, 4, 9]))\nprint(sum_squares([1, 3, 5, 7]))\nprint(sum_squares([1.4, 4.2, 0]))\nprint(sum_squares([-2.4, 1, 1]))"
    },
    {
      "rank": 44,
      "score": 10.0,
      "candidate": "pass"
    },
    {
      "rank": 45,
      "score": 9.0,
      "candidate": "squared_list = []\n    for num in lst:\n        squared_list.append(int(num**2))\n    return sum(squared_list)"
    },
    {
      "rank": 46,
      "score": 8.0,
      "candidate": "lst = [int(x) for x in lst]\n    return sum([x**2 for x in lst])\n\n\nprint(sum_squares([1, 2, 3]))\nprint(sum_squares([1, 4, 9]))\nprint(sum_squares([1, 3, 5, 7]))\nprint(sum_squares([1.4, 4.2, 0]))\nprint(sum_squares([-2.4, 1, 1]))"
    },
    {
      "rank": 47,
      "score": 8.0,
      "candidate": "new_lst = [int(x)+1 for x in lst]\n    return sum([i**2 for i in new_lst])\n\n\nprint(sum_squares([1,2,3]))\nprint(sum_squares([1,4,9]))\nprint(sum_squares([1,3,5,7]))\nprint(sum_squares([1.4,4.2,0]))\nprint(sum_squares([-2.4,1,1]))"
    },
    {
      "rank": 48,
      "score": 8.0,
      "candidate": "squared = []\n    for i in lst:\n        squared.append(int(i**2))\n    return sum(squared)\n\n\nif __name__ == \"__main__\":\n    print(sum_squares([1,2,3]))\n    print(sum_squares([1,4,9]))\n    print(sum_squares([1,3,5,7]))\n    print(sum_squares([1.4,4.2,0]))\n    print(sum_squares([-2.4,1,1]))"
    },
    {
      "rank": 49,
      "score": 8.0,
      "candidate": "return sum([int(math.ceil(i))**2 for i in lst])"
    },
    {
      "rank": 50,
      "score": 8.0,
      "candidate": "return sum([int(math.ceil(x))**2 for x in lst])\n\n\ndef sum_squares(lst):\n    return sum(math.ceil(x)**2 for x in lst)"
    },
    {
      "rank": 51,
      "score": 8.0,
      "candidate": "squared_lst = []\n    for i in lst:\n        squared_lst.append(round(i**2))\n    return sum(squared_lst)\n\n\nif __name__ == '__main__':\n    print(sum_squares([1,2,3]))\n    print(sum_squares([1,4,9]))\n    print(sum_squares([1,3,5,7]))\n    print(sum_squares([1.4,4.2,0]))\n    print(sum_squares([-2.4,1,1]))"
    },
    {
      "rank": 52,
      "score": 8.0,
      "candidate": "new_lst = []\n    for i in lst:\n        new_lst.append(round(i))\n    print(new_lst)\n    sum = 0\n    for i in new_lst:\n        sum += i*i\n    return sum\n\n\n\n\nif __name__ == \"__main__\":\n    lst = [1,4,9]\n    print(sum_squares(lst))\n    lst = [1,3,5,7]\n    print(sum_squares(lst))\n    lst = [1.4,4.2,0]\n    print(sum_squares(lst))\n    lst = [-2.4,1,1]\n    print(sum_squares(lst))"
    },
    {
      "rank": 53,
      "score": 8.0,
      "candidate": "for i in range(len(lst)):\n        lst[i] = int(lst[i] + 1)\n    for i in range(len(lst)):\n        lst[i] = lst[i] ** 2\n    return sum(lst)"
    },
    {
      "rank": 54,
      "score": 8.0,
      "candidate": "# squared_lst = [num**2 for num in lst]\n    # return sum(squared_lst)\n    return sum([num**2 for num in lst])\n\n\nprint(sum_squares([1,2,3]))\nprint(sum_squares([1,4,9]))\nprint(sum_squares([1,3,5,7]))\nprint(sum_squares([1.4,4.2,0]))\nprint(sum_squares([-2.4,1,1]))"
    },
    {
      "rank": 55,
      "score": 8.0,
      "candidate": "new_lst = []\n    for i in lst:\n        new_lst.append(int(i + 0.5)**2)\n    return sum(new_lst)\n\n\nif __name__ == '__main__':\n    print(sum_squares([1, 2, 3]))\n    print(sum_squares([1, 4, 9]))\n    print(sum_squares([1, 3, 5, 7]))\n    print(sum_squares([1.4, 4.2, 0]))\n    print(sum_squares([-2.4, 1, 1]))"
    },
    {
      "rank": 56,
      "score": 8.0,
      "candidate": "return sum(map(lambda x: int(x*x), lst))\n\n\nif __name__ == '__main__':\n    print(sum_squares([1, 2, 3]))\n    print(sum_squares([1, 4, 9]))\n    print(sum_squares([1, 3, 5, 7]))\n    print(sum_squares([1.4, 4.2, 0]))\n    print(sum_squares([-2.4, 1, 1]))"
    },
    {
      "rank": 57,
      "score": 8.0,
      "candidate": "return sum([int(math.ceil(x)**2) for x in lst])\n\n\nif __name__ == '__main__':\n    lst = [1, 2, 3]\n    print(sum_squares(lst))"
    },
    {
      "rank": 58,
      "score": 8.0,
      "candidate": "return sum([int(round(x**2)) for x in lst])\n\n\ndef sum_squares_2(lst):\n    \"\"\"You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\n    return sum([int(round(x**2)) for x in lst])\n\n\nif __name__ == '__main__':\n    print(sum_squares([1, 2, 3]))\n    print(sum_squares([1, 4, 9]))\n    print(sum_squares([1, 3, 5, 7]))\n    print(sum_squares([1.4, 4.2, 0]))\n    print(sum_squares([-2.4, 1, 1]))\n\n    print(sum_squares_2([1, 2, 3]))\n    print(sum_squares_2([1, 4, 9]))\n    print(sum_squares_2([1, 3, 5, 7]))\n    print(sum_squares_2([1.4, 4.2, 0]))\n    print(sum_squares_2([-2.4, 1, 1]))"
    },
    {
      "rank": 59,
      "score": 8.0,
      "candidate": "# Iterate over lst and square each element.\n    squared_numbers = [element ** 2 for element in lst]\n    # Return the sum of the squared numbers.\n    return sum(squared_numbers)\n\n\n# print(sum_squares([1,2,3]))\n# print(sum_squares([1,4,9]))\n# print(sum_squares([1,3,5,7]))\n# print(sum_squares([1.4,4.2,0]))\n# print(sum_squares([-2.4,1,1]))"
    },
    {
      "rank": 60,
      "score": 8.0,
      "candidate": "return sum([int(x**2) for x in lst])\n\n\n\n\nprint(sum_squares([1,2,3]))\nprint(sum_squares([1,4,9]))\nprint(sum_squares([1,3,5,7]))\nprint(sum_squares([1.4,4.2,0]))\nprint(sum_squares([-2.4,1,1]))"
    },
    {
      "rank": 61,
      "score": 8.0,
      "candidate": "#return sum(map(lambda x: x**2, lst))\n    return sum(map(lambda x: int(x**2), lst))\n\n\nif __name__ == '__main__':\n    print(sum_squares([1, 2, 3]))\n    print(sum_squares([1, 4, 9]))\n    print(sum_squares([1, 3, 5, 7]))\n    print(sum_squares([1.4, 4.2, 0]))\n    print(sum_squares([-2.4, 1, 1]))"
    },
    {
      "rank": 62,
      "score": 8.0,
      "candidate": "lst = [int(x) for x in lst]\n    lst = [int(x**2) for x in lst]\n    return sum(lst)\n\n\nprint(sum_squares([1,2,3]))\nprint(sum_squares([1,4,9]))\nprint(sum_squares([1,3,5,7]))\nprint(sum_squares([1.4,4.2,0]))\nprint(sum_squares([-2.4,1,1]))"
    },
    {
      "rank": 63,
      "score": 8.0,
      "candidate": "for i in range(len(lst)):\n        lst[i] = int(lst[i])\n        lst[i] = lst[i] ** 2\n    \n    return sum(lst)\n\n\nif __name__ == '__main__':\n    lst = [1, 2, 3]\n    print(sum_squares(lst))"
    },
    {
      "rank": 64,
      "score": 8.0,
      "candidate": "return sum([int(x**2) for x in lst])\n\n\nif __name__ == '__main__':\n    print(sum_squares([1, 2, 3]))\n    print(sum_squares([1, 4, 9]))\n    print(sum_squares([1, 3, 5, 7]))\n    print(sum_squares([1.4, 4.2, 0]))\n    print(sum_squares([-2.4, 1, 1]))"
    },
    {
      "rank": 65,
      "score": 8.0,
      "candidate": "new_lst = []\n    for i in lst:\n        new_lst.append(int(i ** 2))\n    return sum(new_lst)\n\n\nif __name__ == '__main__':\n    print(sum_squares([1, 2, 3]))\n    print(sum_squares([1, 4, 9]))\n    print(sum_squares([1, 3, 5, 7]))\n    print(sum_squares([1.4, 4.2, 0]))\n    print(sum_squares([-2.4, 1, 1]))"
    },
    {
      "rank": 66,
      "score": 8.0,
      "candidate": "#return sum([int(math.ceil(x)**2) for x in lst])\n    return sum([int(math.ceil(x)**2) for x in lst])\n    \nprint(sum_squares([1,2,3]))"
    },
    {
      "rank": 67,
      "score": 8.0,
      "candidate": "result = 0\n    for i in lst:\n        result += i**2\n    return result\n\n\nif __name__ == '__main__':\n    print(sum_squares([1, 2, 3]))\n    print(sum_squares([1, 4, 9]))\n    print(sum_squares([1, 3, 5, 7]))\n    print(sum_squares([1.4, 4.2, 0]))\n    print(sum_squares([-2.4, 1, 1]))"
    },
    {
      "rank": 68,
      "score": 8.0,
      "candidate": "return sum(map(lambda x: int(x*x), lst))\n\n\nif __name__ == '__main__':\n    print(sum_squares([1,2,3]))\n    print(sum_squares([1,4,9]))\n    print(sum_squares([1,3,5,7]))\n    print(sum_squares([1.4,4.2,0]))\n    print(sum_squares([-2.4,1,1]))"
    },
    {
      "rank": 69,
      "score": 8.0,
      "candidate": "return sum([int(round(i**2)) for i in lst])\n\n\nif __name__ == '__main__':\n    print(sum_squares([1, 2, 3]))\n    print(sum_squares([1, 4, 9]))\n    print(sum_squares([1, 3, 5, 7]))\n    print(sum_squares([1.4, 4.2, 0]))\n    print(sum_squares([-2.4, 1, 1]))"
    },
    {
      "rank": 70,
      "score": 8.0,
      "candidate": "# my_lst = [int(x**2) for x in lst]\n    # return sum(my_lst)\n\n    # return sum([int(x**2) for x in lst])\n    return sum([int(x**2) for x in lst])"
    },
    {
      "rank": 71,
      "score": 8.0,
      "candidate": "return sum([int(i**2) for i in lst])\n\n\nif __name__ == '__main__':\n    print(sum_squares([1,2,3]))\n    print(sum_squares([1,4,9]))\n    print(sum_squares([1,3,5,7]))\n    print(sum_squares([1.4,4.2,0]))\n    print(sum_squares([-2.4,1,1]))"
    },
    {
      "rank": 72,
      "score": 8.0,
      "candidate": "lst = [int(x) + 1 for x in lst]\n    return sum([x**2 for x in lst])\n\n\nif __name__ == '__main__':\n    print(sum_squares([1, 2, 3]))"
    },
    {
      "rank": 73,
      "score": 8.0,
      "candidate": "new_lst = []\n    for i in lst:\n        new_lst.append(int(i+1))\n    squared_lst = [i**2 for i in new_lst]\n    return sum(squared_lst)\n\n\ndef sum_squares_one_line(lst):\n    return sum([int(i+1)**2 for i in lst])"
    },
    {
      "rank": 74,
      "score": 8.0,
      "candidate": "return sum(map(lambda x: int(x)**2, lst))\n\n\nlst = [1, 2, 3]\nprint(sum_squares(lst))\nlst = [1, 4, 9]\nprint(sum_squares(lst))\nlst = [1, 3, 5, 7]\nprint(sum_squares(lst))\nlst = [1.4, 4.2, 0]\nprint(sum_squares(lst))\nlst = [-2.4, 1, 1]\nprint(sum_squares(lst))"
    },
    {
      "rank": 75,
      "score": 8.0,
      "candidate": "lst = [int(x**2) for x in lst]\n    return sum(lst)\n\n\nif __name__ == '__main__':\n    print(sum_squares([1, 2, 3]))\n    print(sum_squares([1, 4, 9]))\n    print(sum_squares([1, 3, 5, 7]))\n    print(sum_squares([1.4, 4.2, 0]))\n    print(sum_squares([-2.4, 1, 1]))"
    },
    {
      "rank": 76,
      "score": 8.0,
      "candidate": "return sum(map(lambda x: x**2, map(lambda x: int(x+1), lst)))"
    },
    {
      "rank": 77,
      "score": 8.0,
      "candidate": "return sum([(x**2) for x in lst])\n\n\ndef sum_squares(lst):\n    return sum([int(x**2) for x in lst])\n\n\n\nif __name__ == '__main__':\n    print(sum_squares([1,2,3]))"
    },
    {
      "rank": 78,
      "score": 8.0,
      "candidate": "# return sum([int(math.ceil(x*x)) for x in lst])\n    return sum([int(math.ceil(x*x)) for x in lst])"
    },
    {
      "rank": 79,
      "score": 8.0,
      "candidate": "return sum([int(math.ceil(num**2)) for num in lst])"
    },
    {
      "rank": 80,
      "score": 8.0,
      "candidate": "result = 0\n    for x in lst:\n        x = int(x)\n        result += x**2\n    return result\n\n\nif __name__ == '__main__':\n    print(sum_squares([1,2,3]))\n    print(sum_squares([1,4,9]))\n    print(sum_squares([1,3,5,7]))\n    print(sum_squares([1.4,4.2,0]))\n    print(sum_squares([-2.4,1,1]))"
    },
    {
      "rank": 81,
      "score": 8.0,
      "candidate": "lst2 = []\n    for i in lst:\n        lst2.append(int(i**2))\n    return sum(lst2)\n\n\nif __name__ == '__main__':\n    print(sum_squares([1,2,3]))\n    print(sum_squares([1,4,9]))\n    print(sum_squares([1,3,5,7]))\n    print(sum_squares([1.4,4.2,0]))\n    print(sum_squares([-2.4,1,1]))"
    },
    {
      "rank": 82,
      "score": 8.0,
      "candidate": "return sum(map(lambda x: int(x*x), lst))"
    },
    {
      "rank": 83,
      "score": 8.0,
      "candidate": "return sum(map(lambda x: int(x*x), lst))\n\n\nif __name__ == '__main__':\n    print(sum_squares([1, 2, 3]))\n    print(sum_squares([1, 4, 9]))\n    print(sum_squares([1, 3, 5, 7]))\n    print(sum_squares([1.4, 4.2, 0]))\n    print(sum_squares([-2.4, 1, 1]))"
    },
    {
      "rank": 84,
      "score": 8.0,
      "candidate": "lst = [int(num**2) for num in lst]\n    return sum(lst)\n\n\nif __name__ == '__main__':\n    print(sum_squares([1,2,3]))\n    print(sum_squares([1,4,9]))\n    print(sum_squares([1,3,5,7]))\n    print(sum_squares([1.4,4.2,0]))\n    print(sum_squares([-2.4,1,1]))"
    },
    {
      "rank": 85,
      "score": 8.0,
      "candidate": "lst = [round(x) for x in lst]\n    return sum([x**2 for x in lst])\n\n\nprint(sum_squares([1,2,3]))\nprint(sum_squares([1,4,9]))\nprint(sum_squares([1,3,5,7]))\nprint(sum_squares([1.4,4.2,0]))\nprint(sum_squares([-2.4,1,1]))"
    },
    {
      "rank": 86,
      "score": 8.0,
      "candidate": "for i in range(len(lst)):\n        lst[i] = int(lst[i])\n        lst[i] = lst[i] ** 2\n    return sum(lst)\n\n\nlst = [1, 2, 3]\nprint(sum_squares(lst))\nlst = [1, 4, 9]\nprint(sum_squares(lst))\nlst = [1, 3, 5, 7]\nprint(sum_squares(lst))\nlst = [1.4, 4.2, 0]\nprint(sum_squares(lst))\nlst = [-2.4, 1, 1]\nprint(sum_squares(lst))"
    },
    {
      "rank": 87,
      "score": 1.0,
      "candidate": "lst = [int(x**2) for x in lst]\n    return sum(lst)\n\n\ndef sum_squares_2(lst):\n    \"\"\"You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\n    lst = [int(x**2) for x in lst]\n    return sum(lst)\n\n\nprint(sum_squares([1,2,3]))\nprint(sum_squares_2([1,2,3]))"
    },
    {
      "rank": 88,
      "score": 1.0,
      "candidate": "new_lst = []\n    for x in lst:\n        new_lst.append(int(x+1))\n    squared_list = [x**2 for x in new_lst]\n    return sum(squared_list)\n    \n\n\nif __name__ == '__main__':\n    #These \"asserts\" using only for self-checking and not necessary for auto-testing\n    assert sum_squares([1, 2, 3]) == 14, \"First\"\n    assert sum_squares([1, 4, 9]) == 98, \"Second\"\n    assert sum_squares([1, 3, 5, 7]) == 84, \"Third\"\n    assert sum_squares([1.4, 4.2, 0]) == 29, \"Fourth\"\n    assert sum_squares([-2.4, 1, 1]) == 6, \"Fifth\"\n    assert sum_squares([1.00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"
    },
    {
      "rank": 89,
      "score": 1.0,
      "candidate": "# ==============================\n    # Solution 1\n    # ==============================\n    # return sum([int(x ** 2) for x in lst])\n\n    # ==============================\n    # Solution 2\n    # ==============================\n    # return sum([int(x + .5) ** 2 for x in lst])\n\n    # ==============================\n    # Solution 3\n    # ==============================\n    # return sum([int(x ** 2) for x in lst])\n\n    # ==============================\n    # Solution 4\n    # ==============================\n    return sum([int(x ** 2) for x in lst])\n\n\nprint(sum_squares([1, 2, 3]))\nprint(sum_squares([1, 4, 9]))\nprint(sum_squares([1, 3, 5, 7]))\nprint(sum_squares([1.4, 4.2, 0]))\nprint(sum_squares([-2.4, 1, 1]))"
    },
    {
      "rank": 90,
      "score": 1.0,
      "candidate": "new_lst = []\n    for i in lst:\n        new_lst.append(int(i**2))\n    return sum(new_lst)\n\n\n\nif __name__ == '__main__':\n    assert sum_squares([1,2,3]) == 14\n    assert sum_squares([1,4,9]) == 98\n    assert sum_squares([1,3,5,7]) == 84\n    assert sum_squares([1.4,4.2,0]) == 29\n    assert sum_squares([-2.4,1,1]) == 6\n    assert sum_squares([0]) == 0\n    assert sum_squares([]) == 0"
    },
    {
      "rank": 91,
      "score": 1.0,
      "candidate": "pass\n\n\ndef sum_squares_two(lst):\n    \"\"\"You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n    \n    \"\"\"\n    pass\n\n\ndef sum_squares_three(lst):\n    \"\"\"You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n    \n    \"\"\"\n    pass\n\n\nif __name__ == '__main__':\n    print(sum_squares([1, 2, 3]))\n    print(sum_squares([1, 4, 9]))\n    print(sum_squares([1, 3, 5, 7]))\n    print(sum_squares([1.4, 4.2, 0]))\n    print(sum_squares([-2.4, 1, 1]))"
    },
    {
      "rank": 92,
      "score": 1.0,
      "candidate": "sum_sq=0\n    for i in lst:\n        sum_sq += (int(i+1)**2)\n    return sum_sq\n\n\nif __name__ == '__main__':\n    #These \"asserts\" using only for self-checking and not necessary for auto-testing\n    assert sum_squares([1, 2, 3]) == 14, \"First\"\n    assert sum_squares([1, 4, 9]) == 98, \"Second\"\n    assert sum_squares([1, 3, 5, 7]) == 84, \"Third\"\n    assert sum_squares([1.4, 4.2, 0]) == 29, \"Fourth\"\n    assert sum_squares([-2.4, 1, 1]) == 6, \"Fifth\""
    },
    {
      "rank": 93,
      "score": 1.0,
      "candidate": "pass\n\n\ndef sum_squares_v2(lst):\n    \"\"\"You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\n    return sum([int(x**2) for x in lst])\n\n\ndef sum_squares_v3(lst):\n    \"\"\"You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\n    return sum([int(x) for x in map(lambda x: x**2, lst)])\n\n\nif __name__ == '__main__':\n    assert sum_squares_v3([1, 2, 3]) == 14\n    assert sum_squares_v3([1, 4, 9]) == 98\n    assert sum_squares_v3([1, 3, 5, 7]) == 84\n    assert sum_squares_v3([1.4, 4.2, 0]) == 29\n    assert sum_squares_v3"
    },
    {
      "rank": 94,
      "score": 1.0,
      "candidate": "return sum([int(math.ceil(i)) ** 2 for i in lst])\n\n\n\ndef sum_squares(lst):\n    return sum([math.ceil(x)**2 for x in lst])\n\n\n\n\ndef sum_squares(lst):\n    return sum(map(lambda x: math.ceil(x) ** 2, lst))"
    },
    {
      "rank": 95,
      "score": 1.0,
      "candidate": "#return sum([int(x**2) for x in lst])\n    return sum([math.ceil(x)**2 for x in lst])\n\n\nif __name__ == '__main__':\n    #These \"asserts\" using only for self-checking and not necessary for auto-testing\n    assert sum_squares([1, 2, 3]) == 14, \"First\"\n    assert sum_squares([1, 2, 2]) == 10, \"Second\"\n    assert sum_squares((4, 1)) == 25, \"Third\"\n    assert sum_squares([0, 0, 0]) == 0, \"Fourth\"\n    assert sum_squares([]) == 0, \"Empty\"\n    print(\"Coding complete? Click 'Check' to review your tests and earn cool rewards!\")"
    },
    {
      "rank": 96,
      "score": 1.0,
      "candidate": "# ...\n    result = 0\n    for i in lst:\n        result += (int(i + 1) ** 2)\n    return result\n\n\n# print(sum_squares([1,2,3]))\n# print(sum_squares([1,4,9]))\n# print(sum_squares([1,3,5,7]))\n# print(sum_squares([1.4,4.2,0]))\n# print(sum_squares([-2.4,1,1]))\n\n\ndef is_prime(n):\n    \"\"\"You are given a number n.\n    Check if it is a prime number or not.\n    Examples:\n    is_prime(10) == False\n    is_prime(133) == True\n    is_prime(673) == False\n    is_prime(5769) == True\n    \n    \"\"\"\n    # ...\n    for i in range(2, n):\n        if n % i == 0:\n            return False\n    return True\n\n\nprint(is_prime(10))\nprint(is_prime(133))\nprint(is_prime(673))\nprint(is_prime(5769))\n\n\ndef square_sum(n):\n    \"\"\"You are given a number n.\n    Compute the square of each digit and sum the results together.\n    Examples:\n    square_sum(89) == 177\n    square_sum(92) == 180\n    square_sum(99) == 180\n    \n    \"\"\"\n    # ...\n    sum = 0\n    for i in str(n):\n        sum += int(i) ** 2\n    return sum\n\n\nprint(square_sum(89))\nprint(square_sum(92))\nprint(square_sum(99))\n\n\ndef is_prime_square(n):\n    \"\"\"You are given a number n.\n    Check if it is a prime number or not.\n    Examples:\n    is_prime_square(17) == False\n    is_prime_square(25) == False\n    is"
    },
    {
      "rank": 97,
      "score": 1.0,
      "candidate": "lst = [int(i**2) for i in lst]\n    return sum(lst)\n\n\nif __name__ == '__main__':\n    #These \"asserts\" using only for self-checking and not necessary for auto-testing\n    assert sum_squares([1, 2, 3]) == 14, \"First\"\n    assert sum_squares([1, 4, 9]) == 98, \"Second\"\n    assert sum_squares((4, 1, 1)) == 29, \"Third\"\n    assert sum_squares([1.4, 4.2, 0]) == 29, \"Fourth\"\n    assert sum_squares([-2.4, 1, 1]) == 6, \"Fifth\""
    },
    {
      "rank": 98,
      "score": 1.0,
      "candidate": "# squared_lst = [int(x*x) for x in lst]\n    # return sum(squared_lst)\n\n    squared_lst = []\n    for x in lst:\n        squared_lst.append(int(x*x))\n    return sum(squared_lst)\n\n\n\n\n\ndef sum_squares(lst):\n    \"\"\"You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\n    squared_lst = []\n    for x in lst:\n        squared_lst.append(int(math.ceil(x*x)))\n    return sum(squared_lst)"
    },
    {
      "rank": 99,
      "score": 1.0,
      "candidate": "lst = [int(x) for x in lst]\n    return sum([x**2 for x in lst])\n\n\n\n\ndef sum_squares(lst):\n    \"\"\"You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\n    return sum([int(x**2) for x in lst])\n\n\n\n\ndef sum_squares(lst):\n    \"\"\"You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\n    return sum([math.ceil(x)**2 for x in lst])\n\n\n\n\ndef sum_squares(lst):\n    \"\"\"You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For"
    },
    {
      "rank": 100,
      "score": 1.0,
      "candidate": "pass\n\n\ndef square_list(lst):\n    \"\"\"You are given a list of numbers.\n    You need to return a list of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be [1,4,9]\n    For lst = [1,4,9] the output should be [1,16,81]\n    For lst = [1,3,5,7] the output should be [1,9,25,49]\n    For lst = [1.4,4.2,0] the output should be [2,17,0]\n    For lst = [-2.4,1,1] the output should be [4,1,1]\n\n    \"\"\"\n    pass\n\n\ndef remove_negatives(lst):\n    \"\"\"You are given a list of numbers.\n    You need to return a list with all negative numbers removed.\n    Examples:\n    For lst = [1,-2,0,3] the output should be [1,0,3]\n    For lst = [1,2,-6,7,-3,-5] the output should be [1,2,7]\n    For lst = [1,2,-6,7,-3,-5,-3] the output should be [1,2,7,-3]\n    For lst = [-1,-2,-3] the output should be []\n    For lst = [-1,-2,-3,-2,-1] the output should be []\n\n    \"\"\"\n    pass\n\n\ndef even_only(lst):\n    \"\"\"You are given a list of numbers.\n    You need to return a list containing only the even numbers\n    in the original list.\n    Examples:\n    For lst = [1,2,3,4,5,6] the output should be [2,4,6]\n    For lst = [1,3,5,7] the output should be []\n    For lst = [2,4,6,8] the output should be [2,4,6,8]\n\n    \"\"\"\n    pass\n\n\ndef odd_only(lst):"
    }
  ]
}