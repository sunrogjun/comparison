{
  "timestamp": "2025-09-14T21:39:38.855485",
  "method": "improved_llm_judge",
  "judge_model": "codellama/CodeLlama-7b-Python-hf",
  "target_model": "codellama-7b",
  "dataset": "humaneval",
  "problem_number": 78,
  "total_candidates": 100,
  "results": [
    {
      "rank": 1,
      "score": 10.0,
      "candidate": "num_list = [int(i, 16) for i in num]\n    primes = [2, 3, 5, 7, 11, 13]\n    return sum([1 for x in num_list if x in primes])\n\n\nif __name__ == '__main__':\n    print(hex_key(\"AB\"))\n    print(hex_key(\"1077E\"))\n    print(hex_key(\"ABED1A33\"))\n    print(hex_key(\"123456789ABCDEF0\"))\n    print(hex_key(\"2020\"))"
    },
    {
      "rank": 2,
      "score": 10.0,
      "candidate": "if num == \"\":\n        return 0\n    hex_dict = {\"0\": 0, \"1\": 0, \"2\": 2, \"3\": 3, \"4\": 5, \"5\": 5, \"6\": 5,\n                \"7\": 7, \"8\": 7, \"9\": 7, \"A\": 11, \"B\": 11, \"C\": 11,\n                \"D\": 13, \"E\": 13, \"F\": 13}\n    hex_keys = [hex_dict.get(c) for c in num]\n    hex_keys = [k for k in hex_keys if k != 0]\n    return len(hex_keys)"
    },
    {
      "rank": 3,
      "score": 10.0,
      "candidate": "hex_dict = {'0': 0, '1': 1, '2': 2, '3': 3, '4': 4, '5': 5, '6': 6, '7': 7, '8': 8, '9': 9, 'A': 10, 'B': 11, 'C': 12, 'D': 13, 'E': 14, 'F': 15}\n    hex_key_dict = {0: 0, 1: 0, 2: 1, 3: 1, 4: 1, 5: 2, 6: 1, 7: 3, 8: 1, 9: 2, 10: 1, 11: 4, 12: 1, 13: 4, 14: 2, 15: 3}\n    hex_num = []\n    for i in num:\n        hex_num.append(hex_dict[i])\n    hex_key_num = []\n    for i in hex_num:\n        hex_key_num.append(hex_key_dict[i])\n    return len(set(hex_key_num))\n\n\nprint(hex_key('AB'))\nprint(hex_key('1077E'))\nprint(hex_key('ABED1A33'))\nprint(hex_key('123456789ABCDEF0'))\nprint(hex_key('2020'))"
    },
    {
      "rank": 4,
      "score": 10.0,
      "candidate": "hex_num = {'0':0,'1':1,'2':2,'3':3,'4':4,'5':5,'6':6,'7':7,'8':8,'9':9,'A':10,'B':11,'C':12,'D':13,'E':14,'F':15}\n    result = []\n    for i in range(len(num)):\n        if hex_num[num[i]] in [2,3,5,7,11,13]:\n            result.append(1)\n        else:\n            result.append(0)\n    return sum(result)\n\n\nprint(hex_key('AB'))\nprint(hex_key('1077E'))\nprint(hex_key('ABED1A33'))\nprint(hex_key('123456789ABCDEF0'))\nprint(hex_key('2020'))"
    },
    {
      "rank": 5,
      "score": 10.0,
      "candidate": "hex_dict = {\n        \"A\": 10,\n        \"B\": 11,\n        \"C\": 12,\n        \"D\": 13,\n        \"E\": 14,\n        \"F\": 15,\n    }\n    num_list = list(num)\n    counter = 0\n    for i in num_list:\n        if i in hex_dict:\n            if hex_dict[i] in [2, 3, 5, 7, 11, 13]:\n                counter += 1\n    return counter"
    },
    {
      "rank": 6,
      "score": 10.0,
      "candidate": "# create a lookup table for hexadecimal digits\n    hex_digits = {\n        'A': 10,\n        'B': 11,\n        'C': 12,\n        'D': 13,\n        'E': 14,\n        'F': 15\n    }\n    # initialize counter\n    counter = 0\n    # loop through each character in the input\n    for char in num:\n        # if the character is a hex digit, check if it is prime\n        if char in hex_digits.keys():\n            # check if the hex digit is prime\n            if hex_digits[char] in [2, 3, 5, 7, 11, 13]:\n                # if the hex digit is prime, add to the counter\n                counter += 1\n    return counter\n\n\nprint(hex_key(\"AB\"))\nprint(hex_key(\"1077E\"))\nprint(hex_key(\"ABED1A33\"))\nprint(hex_key(\"123456789ABCDEF0\"))\nprint(hex_key(\"2020\"))"
    },
    {
      "rank": 7,
      "score": 10.0,
      "candidate": "result = 0\n    hex_dict = {\n        \"0\": 0,\n        \"1\": 0,\n        \"2\": 1,\n        \"3\": 1,\n        \"4\": 0,\n        \"5\": 1,\n        \"6\": 0,\n        \"7\": 1,\n        \"8\": 0,\n        \"9\": 0,\n        \"A\": 1,\n        \"B\": 1,\n        \"C\": 0,\n        \"D\": 1,\n        \"E\": 0,\n        \"F\": 1,\n    }\n    for digit in num:\n        if hex_dict[digit] == 1:\n            result += 1\n    return result\n\n\nif __name__ == \"__main__\":\n    print(hex_key(\"AB\"))\n    print(hex_key(\"1077E\"))\n    print(hex_key(\"ABED1A33\"))\n    print(hex_key(\"123456789ABCDEF0\"))\n    print(hex_key(\"2020\"))"
    },
    {
      "rank": 8,
      "score": 10.0,
      "candidate": "# create a list of all hex digits\n    hex_digits = list(\"0123456789ABCDEF\")\n    # create a list of all prime numbers\n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    # create a list of all hex digits that are prime\n    hex_primes = [hex_digits[i] for i in primes]\n    # convert the hex number to decimal number\n    num = int(num, 16)\n    # count the number of hex digits that are prime\n    num_primes = len([i for i in hex(num)[2:] if i in hex_primes])\n    return num_primes\n\n\nprint(hex_key(\"AB\"))\nprint(hex_key(\"1077E\"))\nprint(hex_key(\"ABED1A33\"))\nprint(hex_key(\"123456789ABCDEF0\"))\nprint(hex_key(\"2020\"))"
    },
    {
      "rank": 9,
      "score": 10.0,
      "candidate": "count = 0\n    hex_to_decimal = {\"A\": 10, \"B\": 11, \"C\": 12, \"D\": 13, \"E\": 14, \"F\": 15}\n    for x in num:\n        if x in hex_to_decimal.keys():\n            if hex_to_decimal[x] in [2, 3, 5, 7, 11, 13]:\n                count += 1\n        elif int(x) in [2, 3, 5, 7, 11, 13]:\n            count += 1\n    return count\n\n\nprint(hex_key(\"AB\"))\nprint(hex_key(\"1077E\"))\nprint(hex_key(\"ABED1A33\"))\nprint(hex_key(\"123456789ABCDEF0\"))\nprint(hex_key(\"2020\"))"
    },
    {
      "rank": 10,
      "score": 10.0,
      "candidate": "pass\n\n\nif __name__ == \"__main__\":\n    hex_key(\"AB\")"
    },
    {
      "rank": 11,
      "score": 10.0,
      "candidate": "hex_primes = [2, 3, 5, 7, 11, 13]\n    hex_dict = {\n        '0': 0,\n        '1': 1,\n        '2': 2,\n        '3': 3,\n        '4': 4,\n        '5': 5,\n        '6': 6,\n        '7': 7,\n        '8': 8,\n        '9': 9,\n        'A': 10,\n        'B': 11,\n        'C': 12,\n        'D': 13,\n        'E': 14,\n        'F': 15\n    }\n    hex_str = \"\"\n    for i in num:\n        hex_str += str(hex_dict[i])\n\n    hex_list = [int(i) for i in hex_str]\n    num_primes = 0\n    for num in hex_list:\n        if num in hex_primes:\n            num_primes += 1\n    return num_primes\n\n\nif __name__ == '__main__':\n    print(hex_key('AB'))\n    print(hex_key('1077E'))\n    print(hex_key('ABED1A33'))\n    print(hex_key('123456789ABCDEF0'))\n    print(hex_key('2020'))"
    },
    {
      "rank": 12,
      "score": 10.0,
      "candidate": "# 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53]\n    hex_keys = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E', 'F']\n    result = 0\n    for i in range(len(hex_keys)):\n        if hex_keys[i] in num:\n            result += 1\n    return result"
    },
    {
      "rank": 13,
      "score": 10.0,
      "candidate": "hex_to_dec_dict = {\n        'A': 10,\n        'B': 11,\n        'C': 12,\n        'D': 13,\n        'E': 14,\n        'F': 15\n    }\n    hex_to_dec_dict.update(dict(zip([str(i) for i in range(16)], range(16))))\n    hex_to_dec_dict.update({'0': 0, '1': 1, '2': 2, '3': 3, '4': 4, '5': 5, '6': 6, '7': 7, '8': 8, '9': 9})\n    hex_num = [hex_to_dec_dict[i] for i in num]\n    hex_num = [i for i in hex_num if i in [2, 3, 5, 7, 11, 13]]\n    return len(hex_num)\n\n\nif __name__ == '__main__':\n    print(hex_key('AB'))\n    print(hex_key('1077E'))\n    print(hex_key('ABED1A33'))\n    print(hex_key('123456789ABCDEF0'))\n    print(hex_key('2020'))"
    },
    {
      "rank": 14,
      "score": 10.0,
      "candidate": "hex_digits = \"0123456789ABCDEF\"\n    hex_digits_dict = {hex_digits[i]:i for i in range(16)}\n    hex_digits_dict[\"A\"] = 10\n    hex_digits_dict[\"B\"] = 11\n    hex_digits_dict[\"C\"] = 12\n    hex_digits_dict[\"D\"] = 13\n    hex_digits_dict[\"E\"] = 14\n    hex_digits_dict[\"F\"] = 15\n    hex_digits_dict[\"a\"] = 10\n    hex_digits_dict[\"b\"] = 11\n    hex_digits_dict[\"c\"] = 12\n    hex_digits_dict[\"d\"] = 13\n    hex_digits_dict[\"e\"] = 14\n    hex_digits_dict[\"f\"] = 15\n    prime_digits = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47]\n    hex_num = num.upper()\n    hex_num_list = list(hex_num)\n    hex_num_list_prime = []\n    for i in hex_num_list:\n        if hex_digits_dict[i] in prime_digits:\n            hex_num_list_prime.append(i)\n    return len(hex_num_list_prime)\n\n\nprint(hex_key(\"AB\"))\nprint(hex_key(\"1077E\"))\nprint(hex_key(\"ABED1A33\"))\nprint(hex_key(\"123456789ABCDEF0\"))\nprint(hex_key(\"2020\"))\nprint(hex_key(\"10000\"))\nprint(hex_key(\"00000\"))\nprint(hex_key(\"00000000\"))"
    },
    {
      "rank": 15,
      "score": 10.0,
      "candidate": "# we create a dictionary with all the hexadecimal digits\n    # and their corresponding values\n    hex_digits = {\n        \"0\": 0,\n        \"1\": 1,\n        \"2\": 2,\n        \"3\": 3,\n        \"4\": 4,\n        \"5\": 5,\n        \"6\": 6,\n        \"7\": 7,\n        \"8\": 8,\n        \"9\": 9,\n        \"A\": 10,\n        \"B\": 11,\n        \"C\": 12,\n        \"D\": 13,\n        \"E\": 14,\n        \"F\": 15,\n    }\n\n    # we create a list with the hexadecimal digits\n    # that are primes (2, 3, 5, 7, B (=decimal 11), D (=decimal 13))\n    primes = [2, 3, 5, 7, 11, 13]\n\n    # we create a counter for the primes\n    count = 0\n\n    # we convert the hexadecimal number to a decimal number\n    # using the function hex_to_dec\n    num_dec = hex_to_dec(num)\n\n    # we check if the number is prime or not\n    for i in num_dec:\n        if i in primes:\n            count += 1\n\n    return count\n\n\ndef hex_to_dec(num):\n    \"\"\"This function converts a hexadecimal number to a decimal number.\n    \"\"\"\n    # we create a list with the hexadecimal digits\n    # that are primes (2, 3, 5, 7, B (=decimal 11), D (=decimal 13))\n    hex_digits = {\n        \"0\": 0,\n        \"1\": 1,\n        \"2\": 2,\n        \"3\": 3,\n        \"4\": 4,\n        \"5\": 5,\n        \"6\": 6,\n        \"7\": 7,\n        \"8\": 8,\n        \"9\": 9,"
    },
    {
      "rank": 16,
      "score": 10.0,
      "candidate": "hex_digits = {'0':0, '1':1, '2':2, '3':3, '4':4, '5':5, '6':6, '7':7, '8':8, '9':9, 'A':10, 'B':11, 'C':12, 'D':13, 'E':14, 'F':15}\n    hex_primes = [2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97]\n    num_primes = 0\n    for i in num:\n        if hex_digits[i] in hex_primes:\n            num_primes += 1\n    return num_primes\n\n\nif __name__ == '__main__':\n    assert hex_key(\"AB\") == 1\n    assert hex_key(\"1077E\") == 2\n    assert hex_key(\"ABED1A33\") == 4\n    assert hex_key(\"123456789ABCDEF0\") == 6\n    assert hex_key(\"2020\") == 2"
    },
    {
      "rank": 17,
      "score": 10.0,
      "candidate": "# create a dictionary to map hex values to decimal\n    hex_dict = {\n        '0': 0,\n        '1': 1,\n        '2': 2,\n        '3': 3,\n        '4': 4,\n        '5': 5,\n        '6': 6,\n        '7': 7,\n        '8': 8,\n        '9': 9,\n        'A': 10,\n        'B': 11,\n        'C': 12,\n        'D': 13,\n        'E': 14,\n        'F': 15,\n    }\n    # create a list of the hex digits\n    hex_list = list(num)\n    # convert each hex digit to decimal\n    for i in range(len(hex_list)):\n        hex_list[i] = hex_dict[hex_list[i]]\n    # count the number of primes\n    primes = 0\n    for i in range(len(hex_list)):\n        if hex_list[i] in [2, 3, 5, 7, 11, 13]:\n            primes += 1\n    return primes"
    },
    {
      "rank": 18,
      "score": 10.0,
      "candidate": "num_dict = {\"0\": 0, \"1\": 0, \"2\": 3, \"3\": 5, \"4\": 7, \"5\": 11, \"6\": 13, \"7\": 17,\n                \"8\": 19, \"9\": 23, \"A\": 29, \"B\": 31, \"C\": 37, \"D\": 41, \"E\": 43, \"F\": 47}\n    num_list = [num_dict[x] for x in num]\n    num_list = [x for x in num_list if x in [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47]]\n    return len(num_list)\n\n\nprint(hex_key(\"AB\"))\nprint(hex_key(\"1077E\"))\nprint(hex_key(\"ABED1A33\"))\nprint(hex_key(\"123456789ABCDEF0\"))\nprint(hex_key(\"2020\"))"
    },
    {
      "rank": 19,
      "score": 10.0,
      "candidate": "hex_dict = {\n        \"0\": 0,\n        \"1\": 1,\n        \"2\": 3,\n        \"3\": 5,\n        \"4\": 7,\n        \"5\": 9,\n        \"6\": 11,\n        \"7\": 13,\n        \"8\": 17,\n        \"9\": 19,\n        \"A\": 23,\n        \"B\": 29,\n        \"C\": 31,\n        \"D\": 37,\n        \"E\": 41,\n        \"F\": 43,\n    }\n    prime_list = [2, 3, 5, 7, 11, 13]\n    hex_num = 0\n    for i in num:\n        hex_num += hex_dict[i]\n    hex_num = hex(hex_num)\n    hex_num = hex_num[2:]\n    count = 0\n    for i in hex_num:\n        if int(i) in prime_list:\n            count += 1\n    return count\n\n\nprint(hex_key(\"AB\"))\nprint(hex_key(\"1077E\"))\nprint(hex_key(\"ABED1A33\"))\nprint(hex_key(\"123456789ABCDEF0\"))\nprint(hex_key(\"2020\"))"
    },
    {
      "rank": 20,
      "score": 10.0,
      "candidate": "hex_dict = {\n        \"0\": 0,\n        \"1\": 1,\n        \"2\": 2,\n        \"3\": 3,\n        \"4\": 4,\n        \"5\": 5,\n        \"6\": 6,\n        \"7\": 7,\n        \"8\": 8,\n        \"9\": 9,\n        \"A\": 11,\n        \"B\": 11,\n        \"C\": 12,\n        \"D\": 13,\n        \"E\": 14,\n        \"F\": 15,\n    }\n\n    def is_prime(x):\n        if x <= 1:\n            return False\n        elif x <= 3:\n            return True\n        elif x % 2 == 0 or x % 3 == 0:\n            return False\n        i = 5\n        while i * i <= x:\n            if x % i == 0 or x % (i + 2) == 0:\n                return False\n            i += 6\n        return True\n\n    def count_primes(num):\n        count = 0\n        for i in range(len(num)):\n            if is_prime(hex_dict[num[i]]):\n                count += 1\n        return count\n\n    return count_primes(num)\n\n\n# hex_key(\"AB\")  # 1\n# hex_key(\"1077E\")  # 2\n# hex_key(\"ABED1A33\")  # 4\n# hex_key(\"123456789ABCDEF0\")  # 6\n# hex_key(\"2020\")  # 2"
    },
    {
      "rank": 21,
      "score": 10.0,
      "candidate": "hex_dict = {\n        \"0\": 0,\n        \"1\": 0,\n        \"2\": 1,\n        \"3\": 1,\n        \"4\": 0,\n        \"5\": 1,\n        \"6\": 1,\n        \"7\": 1,\n        \"8\": 0,\n        \"9\": 0,\n        \"A\": 1,\n        \"B\": 1,\n        \"C\": 1,\n        \"D\": 1,\n        \"E\": 1,\n        \"F\": 1\n    }\n    prime_dict = {\n        \"2\": 1,\n        \"3\": 1,\n        \"5\": 1,\n        \"7\": 1,\n        \"B\": 1,\n        \"D\": 1\n    }\n    num_str = num\n    num_list = list(num_str)\n    num_list = list(map(hex_dict.get, num_list))\n    num_list = list(filter(lambda x: x > 0, num_list))\n    num_list = list(map(prime_dict.get, num_list))\n    return sum(num_list)\n\n\nif __name__ == '__main__':\n    print(hex_key(\"AB\"))\n    print(hex_key(\"1077E\"))\n    print(hex_key(\"ABED1A33\"))\n    print(hex_key(\"123456789ABCDEF0\"))\n    print(hex_key(\"2020\"))"
    },
    {
      "rank": 22,
      "score": 10.0,
      "candidate": "# create a list of primes\n    primes = [2,3,5,7,11,13]\n    # create a list of all numbers that are hexadecimal\n    hex_digits = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 'A', 'B', 'C', 'D', 'E', 'F']\n    # create a list of all numbers that are hexadecimal and are primes\n    hex_prime_digits = [2,3,5,7,11,13]\n    # create an empty list\n    hex_key_list = []\n    # iterate through the list of numbers\n    for num in num:\n        # check if num is a hexadecimal number\n        if num in hex_digits:\n            # check if num is a prime\n            if num in hex_prime_digits:\n                # add num to the list\n                hex_key_list.append(num)\n    # return the length of the list\n    return len(hex_key_list)"
    },
    {
      "rank": 23,
      "score": 10.0,
      "candidate": "hex_digits = {\n        \"0\": False,\n        \"1\": False,\n        \"2\": True,\n        \"3\": True,\n        \"4\": False,\n        \"5\": False,\n        \"6\": True,\n        \"7\": True,\n        \"8\": False,\n        \"9\": False,\n        \"A\": True,\n        \"B\": True,\n        \"C\": True,\n        \"D\": True,\n        \"E\": False,\n        \"F\": False,\n    }\n\n    count = 0\n    for digit in num:\n        if hex_digits[digit]:\n            count += 1\n\n    return count\n\n\ndef hex_key_pythonic(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2."
    },
    {
      "rank": 24,
      "score": 10.0,
      "candidate": "hex_keys = {\n        'A': 10,\n        'B': 11,\n        'C': 12,\n        'D': 13,\n        'E': 14,\n        'F': 15\n    }\n    hex_keys_list = [str(x) for x in range(10)]\n    hex_keys_list.extend([k for k, _ in hex_keys.items()])\n\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, num):\n            if num % i == 0:\n                return False\n        return True\n\n    def get_primes(num):\n        primes = []\n        for x in num:\n            if x in hex_keys_list:\n                if is_prime(hex_keys[x]):\n                    primes.append(x)\n        return len(primes)\n\n    return get_primes(num)"
    },
    {
      "rank": 25,
      "score": 10.0,
      "candidate": "# Convert hexadecimal number to decimal number\n    num_dec = int(num, 16)\n    # Check if number is prime\n    num_primes = 0\n    for i in range(2, num_dec):\n        if num_dec % i == 0:\n            num_primes += 1\n\n    return num_primes\n\n\ndef test_hex_key():\n    assert hex_key(\"AB\") == 1\n    assert hex_key(\"1077E\") == 2\n    assert hex_key(\"ABED1A33\") == 4\n    assert hex_key(\"123456789ABCDEF0\") == 6\n    assert hex_key(\"2020\") == 2\n    assert hex_key(\"\") == 0\n\n\nif __name__ == '__main__':\n    test_hex_key()"
    },
    {
      "rank": 26,
      "score": 10.0,
      "candidate": "hex_dic = {0:'0', 1:'1', 2:'2', 3:'3', 4:'4', 5:'5', 6:'6', 7:'7', 8:'8', 9:'9', 10:'A', 11:'B', 12:'C', 13:'D', 14:'E', 15:'F'}\n    hex_dic_keys = list(hex_dic.keys())\n    hex_dic_vals = list(hex_dic.values())\n    hex_dic_vals.reverse()\n    hex_dic = dict(zip(hex_dic_keys, hex_dic_vals))\n    hex_num = ''\n    for i in num:\n        hex_num += hex_dic[int(i)]\n    hex_num = int(hex_num, 16)\n    num_of_primes = 0\n    for i in range(2, hex_num + 1):\n        if i > 1:\n            for j in range(2, i):\n                if (i % j) == 0:\n                    break\n            else:\n                if i == 11 or i == 13:\n                    num_of_primes += 1\n                elif i == 2 or i == 3 or i == 5 or i == 7:\n                    num_of_primes += 1\n    return num_of_primes\n\nif __name__ == '__main__':\n    print(hex_key(\"AB\"))\n    print(hex_key(\"1077E\"))\n    print(hex_key(\"ABED1A33\"))\n    print(hex_key(\"123456789ABCDEF0\"))\n    print(hex_key(\"2020\"))"
    },
    {
      "rank": 27,
      "score": 10.0,
      "candidate": "#create a list of all the primes\n    primes = [2, 3, 5, 7, 11, 13]\n\n    #create a list of the hexadecimal numbers\n    hex_nums = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E', 'F']\n\n    #set the result to 0\n    result = 0\n\n    #loop through the string of the number\n    for char in num:\n\n        #if the char is in the hexadecimal number list\n        if char in hex_nums:\n\n            #find the index of the char in the hexadecimal list\n            index = hex_nums.index(char)\n\n            #if the index is 10 or above\n            if index > 9:\n\n                #subtract 10 from the index\n                index = index - 10\n\n            #if the index is 1 or below\n            if index < 1:\n\n                #add 10 to the index\n                index = index + 10\n\n            #if the index is in the list of primes\n            if index in primes:\n\n                #add 1 to the result\n                result = result + 1\n\n    return result\n\nprint(hex_key(\"AB\"))\nprint(hex_key(\"1077E\"))\nprint(hex_key(\"ABED1A33\"))\nprint(hex_key(\"123456789ABCDEF0\"))\nprint(hex_key(\"2020\"))"
    },
    {
      "rank": 28,
      "score": 10.0,
      "candidate": "hex_key = {\n        \"0\": 0,\n        \"1\": 0,\n        \"2\": 2,\n        \"3\": 3,\n        \"4\": 0,\n        \"5\": 5,\n        \"6\": 0,\n        \"7\": 7,\n        \"8\": 0,\n        \"9\": 0,\n        \"A\": 2,\n        \"B\": 11,\n        \"C\": 0,\n        \"D\": 13,\n        \"E\": 0,\n        \"F\": 16,\n    }\n\n    num = num.upper()\n    if len(num) == 0:\n        return 0\n    else:\n        return sum([hex_key[x] for x in num if x in hex_key.keys()])"
    },
    {
      "rank": 29,
      "score": 10.0,
      "candidate": "# print(hex_key('AB'))\n    # print(hex_key('1077E'))\n    # print(hex_key('ABED1A33'))\n    # print(hex_key('123456789ABCDEF0'))\n    # print(hex_key('2020'))\n    # print(hex_key(''))\n    # print(hex_key('123456789ABCDEFG'))\n    # print(hex_key(''))\n\n    # if num == '':\n    #     return 0\n    # elif num == '0':\n    #     return 0\n    # elif num == '1':\n    #     return 0\n    # elif num == '2':\n    #     return 1\n    # elif num == '3':\n    #     return 1\n    # elif num == '4':\n    #     return 1\n    # elif num == '5':\n    #     return 1\n    # elif num == '6':\n    #     return 1\n    # elif num == '7':\n    #     return 1\n    # elif num == '8':\n    #     return 1\n    # elif num == '9':\n    #     return 1\n    # elif num == 'A':\n    #     return 1\n    # elif num == 'B':\n    #     return 2\n    # elif num == 'C':\n    #     return 1\n    # elif num == 'D':\n    #     return 2\n    # elif num == 'E':\n    #     return 1\n    # elif num == 'F':\n    #     return 1\n    # elif num == 'G':\n    #     return 0\n    # else:\n    #     return 0\n\n    # if num == '':\n    #     return 0\n    # elif num == '0':\n    #     return 0\n    # elif num == '1':\n    #     return 0\n    # elif num == '2':\n    #     return 1\n    # elif num == '3':\n    #     return 1\n    # elif num == '4':\n    #"
    },
    {
      "rank": 30,
      "score": 10.0,
      "candidate": "hex_keys = ['A', 'B', 'C', 'D', 'E', 'F']\n    hex_keys = [str(x) for x in range(2, 8)] + hex_keys\n    hex_primes = [2, 3, 5, 7, 11, 13]\n    hex_primes = [str(x) for x in hex_primes]\n    num_hex_primes = 0\n    for i in num:\n        if i in hex_primes:\n            num_hex_primes += 1\n    return num_hex_primes\n\n\nprint(hex_key(\"AB\"))\nprint(hex_key(\"1077E\"))\nprint(hex_key(\"ABED1A33\"))\nprint(hex_key(\"123456789ABCDEF0\"))\nprint(hex_key(\"2020\"))"
    },
    {
      "rank": 31,
      "score": 10.0,
      "candidate": "# Convert to decimal\n    num = int(num, 16)\n\n    # Count the primes\n    primes = 0\n    while num > 0:\n        if num % 2 == 0 or num % 3 == 0 or num % 5 == 0 or num % 7 == 0:\n            primes += 1\n        num //= 16\n    return primes\n\n\nif __name__ == '__main__':\n    print(hex_key(\"AB\"))\n    print(hex_key(\"1077E\"))\n    print(hex_key(\"ABED1A33\"))\n    print(hex_key(\"123456789ABCDEF0\"))\n    print(hex_key(\"2020\"))"
    },
    {
      "rank": 32,
      "score": 10.0,
      "candidate": "return 0\n\n\nif __name__ == \"__main__\":\n    print(hex_key(\"AB\"))\n    print(hex_key(\"1077E\"))\n    print(hex_key(\"ABED1A33\"))\n    print(hex_key(\"123456789ABCDEF0\"))\n    print(hex_key(\"2020\"))"
    },
    {
      "rank": 33,
      "score": 10.0,
      "candidate": "# Your code here\n    hex_key_dict = {\"0\": 0, \"1\": 0, \"2\": 1, \"3\": 1, \"4\": 0, \"5\": 0, \"6\": 0, \"7\": 1, \"8\": 0, \"9\": 0, \"A\": 1, \"B\": 1, \"C\": 0, \"D\": 1, \"E\": 0, \"F\": 0}\n    hex_prime_key_dict = {\"0\": 0, \"1\": 0, \"2\": 1, \"3\": 1, \"4\": 0, \"5\": 0, \"6\": 0, \"7\": 1, \"8\": 0, \"9\": 0, \"A\": 1, \"B\": 1, \"C\": 0, \"D\": 1, \"E\": 0, \"F\": 0}\n\n    hex_key_list = list(num)\n    hex_prime_key_list = []\n\n    for i in hex_key_list:\n        hex_key_list[hex_key_list.index(i)] = hex_key_dict[i]\n\n    for i in hex_key_list:\n        if i == 1:\n            hex_prime_key_list.append(0)\n        else:\n            hex_prime_key_list.append(hex_prime_key_dict[i])\n\n    return sum(hex_prime_key_list)\n\nprint(hex_key(\"AB\"))\nprint(hex_key(\"1077E\"))\nprint(hex_key(\"ABED1A33\"))\nprint(hex_key(\"123456789ABCDEF0\"))\nprint(hex_key(\"2020\"))"
    },
    {
      "rank": 34,
      "score": 10.0,
      "candidate": "return len([x for x in num if x in \"2357BDF\"])\n\n\nif __name__ == \"__main__\":\n    print(hex_key(\"AB\"))\n    print(hex_key(\"1077E\"))\n    print(hex_key(\"ABED1A33\"))\n    print(hex_key(\"123456789ABCDEF0\"))\n    print(hex_key(\"2020\"))"
    },
    {
      "rank": 35,
      "score": 10.0,
      "candidate": "hex_nums = {\n        '0': 0,\n        '1': 1,\n        '2': 2,\n        '3': 3,\n        '4': 4,\n        '5': 5,\n        '6': 6,\n        '7': 7,\n        '8': 8,\n        '9': 9,\n        'A': 11,\n        'B': 11,\n        'C': 12,\n        'D': 13,\n        'E': 14,\n        'F': 15\n    }\n    num = num.upper()\n    if num == '':\n        return 0\n    nums = []\n    for n in num:\n        nums.append(hex_nums[n])\n    count = 0\n    for num in nums:\n        if num in [2, 3, 5, 7, 11, 13]:\n            count += 1\n    return count\n\n\nprint(hex_key('AB'))\nprint(hex_key('1077E'))\nprint(hex_key('ABED1A33'))\nprint(hex_key('123456789ABCDEF0'))\nprint(hex_key('2020'))"
    },
    {
      "rank": 36,
      "score": 10.0,
      "candidate": "# please add your code here\n\n\ndef run_example():\n    print(hex_key(\"AB\"))\n    print(hex_key(\"1077E\"))\n    print(hex_key(\"ABED1A33\"))\n    print(hex_key(\"123456789ABCDEF0\"))\n    print(hex_key(\"2020\"))\n\n\nif __name__ == '__main__':\n    run_example()"
    },
    {
      "rank": 37,
      "score": 10.0,
      "candidate": "# print(num)\n    hex_primes = [2, 3, 5, 7, 11, 13]\n    hex_map = {\n        \"0\": 0,\n        \"1\": 1,\n        \"2\": 2,\n        \"3\": 3,\n        \"4\": 4,\n        \"5\": 5,\n        \"6\": 6,\n        \"7\": 7,\n        \"8\": 8,\n        \"9\": 9,\n        \"A\": 10,\n        \"B\": 11,\n        \"C\": 12,\n        \"D\": 13,\n        \"E\": 14,\n        \"F\": 15,\n    }\n\n    # Convert hex to decimal\n    # print(num)\n    dec_num = 0\n    for i, digit in enumerate(num):\n        dec_num += hex_map[digit] * (16 ** (len(num) - i - 1))\n    # print(dec_num)\n\n    # Count the number of primes\n    count = 0\n    for prime in hex_primes:\n        if dec_num % prime == 0:\n            count += 1\n    return count\n\n\n# print(hex_key(\"AB\"))\n# print(hex_key(\"1077E\"))\n# print(hex_key(\"ABED1A33\"))\n# print(hex_key(\"123456789ABCDEF0\"))\n# print(hex_key(\"2020\"))\n# print(hex_key(\"20202020\"))\n# print(hex_key(\"0\"))\n# print(hex_key(\"1\"))\n# print(hex_key(\"2\"))\n# print(hex_key(\"3\"))\n# print(hex_key(\"4\"))\n# print(hex_key(\"5\"))\n# print(hex_key(\"6\"))\n# print(hex_key(\"7\"))\n# print(hex_key(\"8\"))\n# print(hex_key(\"9\"))\n# print(hex_key(\"A\"))\n# print(hex_key(\"B\"))\n# print("
    },
    {
      "rank": 38,
      "score": 10.0,
      "candidate": "hex_dic = {\n        '0': 0,\n        '1': 0,\n        '2': 1,\n        '3': 1,\n        '4': 0,\n        '5': 1,\n        '6': 1,\n        '7': 1,\n        '8': 0,\n        '9': 0,\n        'A': 1,\n        'B': 1,\n        'C': 0,\n        'D': 1,\n        'E': 0,\n        'F': 1\n    }\n    count = 0\n    for i in num:\n        if hex_dic[i] != 0:\n            count += 1\n    return count\n\n\ndef hex_key2(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"20"
    },
    {
      "rank": 39,
      "score": 10.0,
      "candidate": "pass"
    },
    {
      "rank": 40,
      "score": 10.0,
      "candidate": "primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47]\n    hex_dict = {\n        \"0\": 0,\n        \"1\": 1,\n        \"2\": 2,\n        \"3\": 3,\n        \"4\": 4,\n        \"5\": 5,\n        \"6\": 6,\n        \"7\": 7,\n        \"8\": 8,\n        \"9\": 9,\n        \"A\": 10,\n        \"B\": 11,\n        \"C\": 12,\n        \"D\": 13,\n        \"E\": 14,\n        \"F\": 15,\n    }\n    counter = 0\n    num = num.upper()\n    num = num[::-1]\n    for n in num:\n        if int(hex_dict[n]) in primes:\n            counter += 1\n    return counter\n\n\nprint(hex_key(\"AB\"))\nprint(hex_key(\"1077E\"))\nprint(hex_key(\"ABED1A33\"))\nprint(hex_key(\"123456789ABCDEF0\"))\nprint(hex_key(\"2020\"))"
    },
    {
      "rank": 41,
      "score": 10.0,
      "candidate": "# 1. Get the decimal equivalent of the hex string\n    decimal_num = int(num, 16)\n    # 2. Get the primes of the decimal number\n    primes = [2, 3, 5, 7, 11, 13]\n    primes_count = 0\n    # 3. Loop through the decimal number\n    while decimal_num > 0:\n        # 4. Get the last digit\n        digit = decimal_num % 10\n        # 5. Check if the digit is a prime\n        if digit in primes:\n            primes_count += 1\n        # 6. Divide the decimal number by 10 to get the next digit\n        decimal_num //= 10\n    return primes_count"
    },
    {
      "rank": 42,
      "score": 10.0,
      "candidate": "# create a dictionary of hexadecimal digits and their corresponding values\n    hex_dict = {\n        \"0\": 0,\n        \"1\": 1,\n        \"2\": 2,\n        \"3\": 3,\n        \"4\": 4,\n        \"5\": 5,\n        \"6\": 6,\n        \"7\": 7,\n        \"8\": 8,\n        \"9\": 9,\n        \"A\": 10,\n        \"B\": 11,\n        \"C\": 12,\n        \"D\": 13,\n        \"E\": 14,\n        \"F\": 15,\n    }\n\n    # create a list of the hexadecimal digits\n    hex_digits = [digit for digit in num]\n\n    # convert hexadecimal digits into decimal digits\n    decimal_digits = [hex_dict[digit] for digit in hex_digits]\n\n    # convert decimal digits into a single decimal number\n    decimal_num = int(\"\".join([str(digit) for digit in decimal_digits]))\n\n    # create a list of the prime numbers\n    prime_list = [2, 3, 5, 7, 11, 13]\n\n    # create a counter variable\n    counter = 0\n\n    # loop through the prime numbers list\n    for prime in prime_list:\n        # check if prime divides decimal number\n        if decimal_num % prime == 0:\n            # increment counter if prime divides decimal number\n            counter += 1\n\n    return counter\n\n\nprint(hex_key(\"AB\"))\nprint(hex_key(\"1077E\"))\nprint(hex_key(\"ABED1A33\"))\nprint(hex_key(\"123456789ABCDEF0\"))\nprint(hex_key(\"2020\"))"
    },
    {
      "rank": 43,
      "score": 10.0,
      "candidate": "hex_to_dec = {\n        \"0\": 0,\n        \"1\": 1,\n        \"2\": 2,\n        \"3\": 3,\n        \"4\": 4,\n        \"5\": 5,\n        \"6\": 6,\n        \"7\": 7,\n        \"8\": 8,\n        \"9\": 9,\n        \"A\": 10,\n        \"B\": 11,\n        \"C\": 12,\n        \"D\": 13,\n        \"E\": 14,\n        \"F\": 15,\n    }\n    count = 0\n    for i in range(len(num)):\n        if hex_to_dec[num[i]] == 2 or hex_to_dec[num[i]] == 3 or hex_to_dec[num[i]] == 5 or hex_to_dec[num[i]] == 7 or hex_to_dec[num[i]] == 11 or hex_to_dec[num[i]] == 13:\n            count += 1\n    return count\n\n\ndef hex_key_top(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Ex"
    },
    {
      "rank": 44,
      "score": 10.0,
      "candidate": "hex_list = list(num)\n    hex_list_new = []\n    hex_list_new_primes = []\n    hex_list_new_non_primes = []\n    for i in hex_list:\n        hex_list_new.append(int(i, 16))\n    for i in hex_list_new:\n        if i == 2 or i == 3 or i == 5 or i == 7:\n            hex_list_new_primes.append(i)\n        else:\n            hex_list_new_non_primes.append(i)\n    if hex_list_new_non_primes == []:\n        return len(hex_list_new_primes)\n    else:\n        return len(hex_list_new_primes) + len(hex_list_new_non_primes)\n\n\nprint(hex_key(\"AB\"))\nprint(hex_key(\"1077E\"))\nprint(hex_key(\"ABED1A33\"))\nprint(hex_key(\"123456789ABCDEF0\"))\nprint(hex_key(\"2020\"))"
    },
    {
      "rank": 45,
      "score": 10.0,
      "candidate": "if not num:\n        return 0\n    # convert hex to decimal\n    num_decimal = int(num, 16)\n    num_prime = 0\n    while num_decimal > 0:\n        # get last digit\n        last_digit = num_decimal % 10\n        if last_digit in [2, 3, 5, 7, 11, 13]:\n            num_prime += 1\n        # remove last digit from num_decimal\n        num_decimal = num_decimal // 10\n    return num_prime\n\n\nprint(hex_key(\"AB\"))\nprint(hex_key(\"1077E\"))\nprint(hex_key(\"ABED1A33\"))\nprint(hex_key(\"123456789ABCDEF0\"))\nprint(hex_key(\"2020\"))"
    },
    {
      "rank": 46,
      "score": 10.0,
      "candidate": "primes = {2, 3, 5, 7, 11, 13}\n    num = num.upper()\n    return len([i for i in num if int(i, 16) in primes])\n\n\nif __name__ == \"__main__\":\n    print(hex_key(\"AB\"))\n    print(hex_key(\"1077E\"))\n    print(hex_key(\"ABED1A33\"))\n    print(hex_key(\"123456789ABCDEF0\"))\n    print(hex_key(\"2020\"))"
    },
    {
      "rank": 47,
      "score": 10.0,
      "candidate": "primes = [2, 3, 5, 7, 11, 13]\n    hex_to_dec = {'A': 10, 'B': 11, 'C': 12, 'D': 13, 'E': 14, 'F': 15}\n    hex_list = list(num)\n    hex_list = [hex_to_dec[x] if x in hex_to_dec else int(x) for x in hex_list]\n    return len([x for x in hex_list if x in primes])\n\n\nprint(hex_key('AB'))\nprint(hex_key('1077E'))\nprint(hex_key('ABED1A33'))\nprint(hex_key('123456789ABCDEF0'))\nprint(hex_key('2020'))"
    },
    {
      "rank": 48,
      "score": 10.0,
      "candidate": "hex_string = \"0123456789ABCDEF\"\n    hex_string_dict = {hex_string[i]: i for i in range(len(hex_string))}\n    num = num.upper()\n    hex_num = 0\n    for i in num:\n        hex_num = hex_num * 16 + hex_string_dict[i]\n    hex_num_str = str(hex_num)\n    prime_num = [2, 3, 5, 7, 11, 13]\n    hex_num_prime = []\n    for i in hex_num_str:\n        if int(i) in prime_num:\n            hex_num_prime.append(i)\n    return len(hex_num_prime)\n\n\ndef hex_key_pythonic(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF"
    },
    {
      "rank": 49,
      "score": 10.0,
      "candidate": "hex_dict = {'0': 0, '1': 1, '2': 2, '3': 3, '4': 4, '5': 5, '6': 6, '7': 7, '8': 8, '9': 9, 'A': 10, 'B': 11, 'C': 12, 'D': 13, 'E': 14, 'F': 15}\n    hex_num = 0\n    for i in num:\n        hex_num += hex_dict[i]\n    return hex_num\n\n\nprint(hex_key(\"AB\"))\nprint(hex_key(\"1077E\"))\nprint(hex_key(\"ABED1A33\"))\nprint(hex_key(\"123456789ABCDEF0\"))\nprint(hex_key(\"2020\"))"
    },
    {
      "rank": 50,
      "score": 10.0,
      "candidate": "pass\n\n\nif __name__ == \"__main__\":\n    print(hex_key(\"AB\"))\n    print(hex_key(\"1077E\"))\n    print(hex_key(\"ABED1A33\"))\n    print(hex_key(\"123456789ABCDEF0\"))\n    print(hex_key(\"2020\"))"
    },
    {
      "rank": 51,
      "score": 10.0,
      "candidate": "n = 0\n    for i in num:\n        if i in \"0123456789\":\n            if i in \"2357\":\n                n += 1\n        elif i in \"ABCDEF\":\n            if i in \"BD\":\n                n += 1\n    return n\n\n\nif __name__ == \"__main__\":\n    num = \"123456789ABCDEF0\"\n    print(hex_key(num))"
    },
    {
      "rank": 52,
      "score": 10.0,
      "candidate": "hex_dict = {\n        '0':0,\n        '1':1,\n        '2':2,\n        '3':3,\n        '4':4,\n        '5':5,\n        '6':6,\n        '7':7,\n        '8':8,\n        '9':9,\n        'A':10,\n        'B':11,\n        'C':12,\n        'D':13,\n        'E':14,\n        'F':15\n    }\n    hex_list = [hex_dict[x] for x in num.upper()]\n    hex_list = [2, 3, 5, 7, 11, 13]\n    prime_list = []\n    for x in hex_list:\n        if x in prime_list:\n            continue\n        for i in range(2, x):\n            if x % i == 0:\n                break\n        else:\n            prime_list.append(x)\n    return len(prime_list)"
    },
    {
      "rank": 53,
      "score": 10.0,
      "candidate": "hex_dict = {\n        \"0\": 0,\n        \"1\": 0,\n        \"2\": 1,\n        \"3\": 1,\n        \"4\": 0,\n        \"5\": 1,\n        \"6\": 0,\n        \"7\": 0,\n        \"8\": 0,\n        \"9\": 0,\n        \"A\": 1,\n        \"B\": 2,\n        \"C\": 1,\n        \"D\": 2,\n        \"E\": 1,\n        \"F\": 1,\n    }\n\n    hex_count = 0\n    for hex in num:\n        if hex in hex_dict:\n            if hex in (\"2\", \"3\", \"5\", \"7\", \"B\", \"D\"):\n                hex_count += 1\n            hex_count += hex_dict[hex]\n    return hex_count\n\n\nif __name__ == \"__main__\":\n    print(hex_key(\"AB\"))\n    print(hex_key(\"1077E\"))\n    print(hex_key(\"ABED1A33\"))\n    print(hex_key(\"123456789ABCDEF0\"))\n    print(hex_key(\"2020\"))"
    },
    {
      "rank": 54,
      "score": 8.0,
      "candidate": "prime_count = 0\n    hex_dict = {\n        \"0\": 0,\n        \"1\": 0,\n        \"2\": 1,\n        \"3\": 1,\n        \"4\": 0,\n        \"5\": 1,\n        \"6\": 1,\n        \"7\": 1,\n        \"8\": 0,\n        \"9\": 0,\n        \"A\": 1,\n        \"B\": 3,\n        \"C\": 1,\n        \"D\": 3,\n        \"E\": 1,\n        \"F\": 1,\n    }\n\n    for char in num:\n        if hex_dict[char] != 0:\n            prime_count += 1\n\n    return prime_count\n\n\nprint(hex_key(\"AB\"))\nprint(hex_key(\"1077E\"))\nprint(hex_key(\"ABED1A33\"))\nprint(hex_key(\"123456789ABCDEF0\"))\nprint(hex_key(\"2020\"))"
    },
    {
      "rank": 55,
      "score": 8.0,
      "candidate": "# list of prime numbers\n    prime_list = [2, 3, 5, 7, 11, 13]\n\n    # get the decimal equivalent\n    dec_num = int(num, 16)\n\n    # store the number of prime numbers\n    num_primes = 0\n\n    # check if the decimal number is prime\n    for prime in prime_list:\n        if dec_num % prime == 0:\n            num_primes += 1\n\n    return num_primes\n\n\nif __name__ == \"__main__\":\n    print(hex_key(\"AB\"))\n    print(hex_key(\"1077E\"))\n    print(hex_key(\"ABED1A33\"))\n    print(hex_key(\"123456789ABCDEF0\"))\n    print(hex_key(\"2020\"))"
    },
    {
      "rank": 56,
      "score": 8.0,
      "candidate": "primes = [2, 3, 5, 7, 11, 13]\n    hex_digits = [\"A\", \"B\", \"C\", \"D\", \"E\", \"F\"]\n    num_of_primes = 0\n    for i in range(len(num)):\n        if num[i] in hex_digits:\n            num_of_primes += 1\n        else:\n            num_of_primes += num[i] in primes\n    return num_of_primes\n\n\nif __name__ == \"__main__\":\n    assert hex_key(\"AB\") == 1, \"1st example\"\n    assert hex_key(\"1077E\") == 2, \"2nd example\"\n    assert hex_key(\"ABED1A33\") == 4, \"3rd example\"\n    assert hex_key(\"123456789ABCDEF0\") == 6, \"4th example\"\n    assert hex_key(\"2020\") == 2, \"5th example\""
    },
    {
      "rank": 57,
      "score": 8.0,
      "candidate": "hex_to_dec = {'0': 0, '1': 1, '2': 2, '3': 3, '4': 4, '5': 5, '6': 6, '7': 7, '8': 8, '9': 9, 'A': 10, 'B': 11, 'C': 12, 'D': 13, 'E': 14, 'F': 15}\n    num = num.upper()\n    count = 0\n    for i in num:\n        if hex_to_dec[i] in (2, 3, 5, 7, 11, 13):\n            count += 1\n    return count\n\n\nif __name__ == '__main__':\n    print(hex_key(\"AB\"))\n    print(hex_key(\"1077E\"))\n    print(hex_key(\"ABED1A33\"))\n    print(hex_key(\"123456789ABCDEF0\"))\n    print(hex_key(\"2020\"))"
    },
    {
      "rank": 58,
      "score": 8.0,
      "candidate": "count = 0\n    nums = {2: 0, 3: 0, 5: 0, 7: 0, 11: 0, 13: 0}\n    num = num.upper()\n    for c in num:\n        if c in \"0123456789ABCDEF\":\n            if c in \"02468ACE\":\n                nums[2] += 1\n            elif c in \"13579BD\":\n                nums[3] += 1\n            elif c in \"013579F\":\n                nums[5] += 1\n            elif c in \"01379BDF\":\n                nums[7] += 1\n            elif c in \"01379BDEF\":\n                nums[11] += 1\n            elif c in \"01379BEDF\":\n                nums[13] += 1\n\n    count = len([v for v in nums.values() if v > 0])\n\n    return count\n\n\nif __name__ == \"__main__\":\n    print(hex_key(\"AB\"))\n    print(hex_key(\"1077E\"))\n    print(hex_key(\"ABED1A33\"))\n    print(hex_key(\"123456789ABCDEF0\"))\n    print(hex_key(\"2020\"))"
    },
    {
      "rank": 59,
      "score": 8.0,
      "candidate": "# your code goes here\n    count = 0\n    if num == \"\":\n        return count\n    else:\n        for i in num:\n            if i == \"2\" or i == \"3\" or i == \"5\" or i == \"7\" or i == \"B\" or i == \"D\":\n                count += 1\n        return count"
    },
    {
      "rank": 60,
      "score": 8.0,
      "candidate": "num = num.upper()\n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53]\n    hex_num = 0\n    for i in range(len(num)):\n        hex_num += primes[ord(num[i]) - 65]\n    return hex_num"
    },
    {
      "rank": 61,
      "score": 8.0,
      "candidate": "primes = {2, 3, 5, 7, 11, 13}\n    hex_map = {\n        \"A\": 10,\n        \"B\": 11,\n        \"C\": 12,\n        \"D\": 13,\n        \"E\": 14,\n        \"F\": 15\n    }\n    num = num.upper()\n    count = 0\n    for i in num:\n        if hex_map[i] in primes:\n            count += 1\n    return count\n\n\nprint(hex_key(\"AB\"))\nprint(hex_key(\"1077E\"))\nprint(hex_key(\"ABED1A33\"))\nprint(hex_key(\"123456789ABCDEF0\"))\nprint(hex_key(\"2020\"))"
    },
    {
      "rank": 62,
      "score": 8.0,
      "candidate": "primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71]\n    result = 0\n    for i in range(len(num)):\n        if num[i] == \"2\" or num[i] == \"3\" or num[i] == \"5\" or num[i] == \"7\" or num[i] == \"B\" or num[i] == \"D\":\n            result += 1\n    return result\n\n\ndef hex_key2(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2"
    },
    {
      "rank": 63,
      "score": 8.0,
      "candidate": "prime_digits = [2, 3, 5, 7, 11, 13]\n    count = 0\n    for digit in num:\n        if digit in prime_digits:\n            count += 1\n    return count\n\n\nprint(hex_key(\"AB\"))\nprint(hex_key(\"1077E\"))\nprint(hex_key(\"ABED1A33\"))\nprint(hex_key(\"123456789ABCDEF0\"))\nprint(hex_key(\"2020\"))"
    },
    {
      "rank": 64,
      "score": 8.0,
      "candidate": "if len(num) == 0:\n        return 0\n    hex_primes = ['2', '3', '5', '7', 'B', 'D']\n    return len([x for x in num if x in hex_primes])"
    },
    {
      "rank": 65,
      "score": 8.0,
      "candidate": "hex_dict = {'0':0,'1':0,'2':0,'3':0,'4':0,'5':0,'6':0,'7':0,'8':0,'9':0,'A':1,'B':1,'C':1,'D':1,'E':1,'F':1}\n    num = num.upper()\n    hex_list = list(num)\n    prime = 0\n    for i in hex_list:\n        prime += hex_dict[i]\n    return prime\n\nif __name__ == '__main__':\n    print(hex_key('AB'))\n    print(hex_key('1077E'))\n    print(hex_key('ABED1A33'))\n    print(hex_key('123456789ABCDEF0'))\n    print(hex_key('2020'))"
    },
    {
      "rank": 66,
      "score": 8.0,
      "candidate": "primes = [2,3,5,7,11,13]\n    num = num.replace(\"A\", \"10\").replace(\"B\", \"11\").replace(\"C\", \"12\").replace(\"D\", \"13\").replace(\"E\", \"14\").replace(\"F\", \"15\")\n    return len([i for i in num if int(i,16) in primes])\n\n\nif __name__ == '__main__':\n    print(hex_key(\"AB\"))\n    print(hex_key(\"1077E\"))\n    print(hex_key(\"ABED1A33\"))\n    print(hex_key(\"123456789ABCDEF0\"))\n    print(hex_key(\"2020\"))"
    },
    {
      "rank": 67,
      "score": 8.0,
      "candidate": "num = num.upper()\n    counter = 0\n    for i in num:\n        if i == \"0\" or i == \"1\" or i == \"2\" or i == \"3\" or i == \"4\" or i == \"5\" or i == \"6\" or i == \"7\":\n            counter += 1\n        elif i == \"8\" or i == \"9\" or i == \"A\" or i == \"B\":\n            counter += 2\n        elif i == \"C\" or i == \"D\":\n            counter += 3\n        elif i == \"E\" or i == \"F\":\n            counter += 4\n    return counter\n\n\nprint(hex_key(\"123456789ABCDEF0\"))\nprint(hex_key(\"AB\"))\nprint(hex_key(\"1077E\"))\nprint(hex_key(\"ABED1A33\"))\nprint(hex_key(\"2020\"))"
    },
    {
      "rank": 68,
      "score": 8.0,
      "candidate": "# Primes\n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53]\n\n    # Convert to decimal\n    num_dec = int(num, 16)\n\n    # Get digits\n    num_digits = [int(i) for i in str(num_dec)]\n\n    # Count primes\n    num_primes = 0\n    for i in num_digits:\n        if i in primes:\n            num_primes += 1\n\n    return num_primes"
    },
    {
      "rank": 69,
      "score": 8.0,
      "candidate": "num = num.upper()\n    hex_primes = '2357BDF'\n    return sum([1 for n in num if n in hex_primes])\n\n\nif __name__ == '__main__':\n    print(hex_key('AB'))\n    print(hex_key('1077E'))\n    print(hex_key('ABED1A33'))\n    print(hex_key('123456789ABCDEF0'))\n    print(hex_key('2020'))\n    print(hex_key('2020123456789ABCDEF0'))"
    },
    {
      "rank": 70,
      "score": 8.0,
      "candidate": "def is_prime(num):\n        for i in range(2, num):\n            if num % i == 0:\n                return False\n        return True\n\n    count = 0\n    for i in num:\n        if is_prime(int(i, 16)):\n            count += 1\n    return count"
    },
    {
      "rank": 71,
      "score": 8.0,
      "candidate": "hex_to_dec = {\n        '0':0, '1':1, '2':2, '3':3, '4':4, '5':5, '6':6, '7':7, '8':8, '9':9,\n        'A':10, 'B':11, 'C':12, 'D':13, 'E':14, 'F':15\n    }\n\n    num = num.upper()\n    num = ''.join([str(hex_to_dec[i]) for i in num])\n\n    primes = [2, 3, 5, 7, 11, 13]\n    count = 0\n\n    for i in range(len(num)):\n        if int(num[i]) in primes:\n            count += 1\n    return count\n\nif __name__ == '__main__':\n    print(hex_key('AB'))\n    print(hex_key('1077E'))\n    print(hex_key('ABED1A33'))\n    print(hex_key('123456789ABCDEF0'))\n    print(hex_key('2020'))"
    },
    {
      "rank": 72,
      "score": 8.0,
      "candidate": "hex_keys = [2,3,5,7,11,13]\n    hex_num = int(num,16)\n    hex_prime = 0\n    while hex_num > 0:\n        if hex_num % 16 in hex_keys:\n            hex_prime += 1\n        hex_num //= 16\n    return hex_prime"
    },
    {
      "rank": 73,
      "score": 8.0,
      "candidate": "hex_dict = {\n        \"A\": 10,\n        \"B\": 11,\n        \"C\": 12,\n        \"D\": 13,\n        \"E\": 14,\n        \"F\": 15,\n    }\n    count = 0\n    for i in num:\n        if i in hex_dict.keys():\n            if hex_dict[i] in [2, 3, 5, 7, 11, 13]:\n                count += 1\n    return count"
    },
    {
      "rank": 74,
      "score": 8.0,
      "candidate": "# check if the string is empty\n    if num == \"\":\n        return 0\n\n    # convert the string to a list\n    num_list = list(num)\n\n    # convert the list items to integers\n    for i in range(len(num_list)):\n        num_list[i] = int(num_list[i], 16)\n\n    # check if the numbers are prime\n    primes = [2, 3, 5, 7, 11, 13]\n    count = 0\n    for num in num_list:\n        if num in primes:\n            count += 1\n    return count"
    },
    {
      "rank": 75,
      "score": 8.0,
      "candidate": "# Convert the hexadecimal number to decimal\n    num_decimal = int(num, 16)\n    # Count the number of prime digits\n    num_primes = 0\n    # Iterate over the number\n    for digit in str(num_decimal):\n        # Get the digit in decimal\n        digit_decimal = int(digit)\n        # Check if the digit is prime\n        if digit_decimal in [2, 3, 5, 7, 11, 13]:\n            num_primes += 1\n    return num_primes"
    },
    {
      "rank": 76,
      "score": 8.0,
      "candidate": "# put your python code here\n    count = 0\n    for i in num:\n        if i == \"2\" or i == \"3\" or i == \"5\" or i == \"7\" or i == \"B\" or i == \"D\":\n            count += 1\n    return count"
    },
    {
      "rank": 77,
      "score": 8.0,
      "candidate": "if len(num) == 0:\n        return 0\n    prime_list = [2, 3, 5, 7, 11, 13]\n    hex_dict = {\n        \"0\": 0,\n        \"1\": 0,\n        \"2\": 1,\n        \"3\": 1,\n        \"4\": 0,\n        \"5\": 1,\n        \"6\": 0,\n        \"7\": 1,\n        \"8\": 0,\n        \"9\": 0,\n        \"A\": 1,\n        \"B\": 1,\n        \"C\": 0,\n        \"D\": 1,\n        \"E\": 0,\n        \"F\": 1,\n    }\n    output = 0\n    for i in num:\n        if hex_dict[i] in prime_list:\n            output += 1\n    return output"
    },
    {
      "rank": 78,
      "score": 8.0,
      "candidate": "if len(num) == 0:\n        return 0\n    count = 0\n    for ch in num:\n        if ch == \"2\" or ch == \"3\" or ch == \"5\" or ch == \"7\" or ch == \"B\" or ch == \"D\":\n            count += 1\n    return count\n\n\nprint(hex_key(\"AB\"))\nprint(hex_key(\"1077E\"))\nprint(hex_key(\"ABED1A33\"))\nprint(hex_key(\"123456789ABCDEF0\"))\nprint(hex_key(\"2020\"))"
    },
    {
      "rank": 79,
      "score": 8.0,
      "candidate": "# Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    # Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    # So you have to determine a number of the following digits: 2, 3, 5, 7, \n    # B (=decimal 11), D (=decimal 13).\n    # Note: you may assume the input is always correct or empty string, \n    # and symbols A,B,C,D,E,F are always uppercase.\n\n    # We first convert the string to decimal\n    decimal = int(num, 16)\n\n    # We then count the number of primes in the decimal number\n    primes = 0\n    for i in range(2, decimal + 1):\n        if decimal % i == 0:\n            primes += 1\n    return primes"
    },
    {
      "rank": 80,
      "score": 5.0,
      "candidate": "pass"
    },
    {
      "rank": 81,
      "score": 1.0,
      "candidate": "hex_num = {\n        \"0\": 0,\n        \"1\": 1,\n        \"2\": 2,\n        \"3\": 3,\n        \"4\": 4,\n        \"5\": 5,\n        \"6\": 6,\n        \"7\": 7,\n        \"8\": 8,\n        \"9\": 9,\n        \"A\": 11,\n        \"B\": 13,\n        \"C\": 17,\n        \"D\": 19,\n        \"E\": 23,\n        \"F\": 29,\n    }\n    result = 0\n    if len(num) == 0:\n        return result\n    for i in num:\n        if hex_num[i] in [2, 3, 5, 7, 11, 13]:\n            result += 1\n    return result\n\n\nprint(hex_key(\"AB\"))\nprint(hex_key(\"1077E\"))\nprint(hex_key(\"ABED1A33\"))\nprint(hex_key(\"123456789ABCDEF0\"))\nprint(hex_key(\"2020\"))"
    },
    {
      "rank": 82,
      "score": 1.0,
      "candidate": "num_list = [int(num[i:i+1], 16) for i in range(0, len(num), 1)]\n    hex_prime_list = [2,3,5,7,11,13]\n    hex_prime_counter = 0\n    for hex_number in num_list:\n        if hex_number in hex_prime_list:\n            hex_prime_counter += 1\n    return hex_prime_counter\n\ndef hex_key_alt(num):\n    hex_prime_list = [2,3,5,7,11,13]\n    hex_prime_counter = 0\n    for hex_number in num:\n        if hex_number in hex_prime_list:\n            hex_prime_counter += 1\n    return hex_prime_counter\n\ndef hex_key_alt_2(num):\n    hex_prime_list = [2,3,5,7,11,13]\n    hex_prime_counter = 0\n    for hex_number in num:\n        if hex_number in hex_prime_list:\n            hex_prime_counter += 1\n    return hex_prime_counter\n\nif __name__ == '__main__':\n    #These \"asserts\" using only for self-checking and not necessary for auto-testing\n    assert hex_key_alt('AB') == 1, \"A\"\n    assert hex_key_alt('1077E') == 2, \"B\"\n    assert hex_key_alt('ABED1A33') == 4, \"C\"\n    assert hex_key_alt('123456789ABCDEF0') == 6, \"D\"\n    assert hex_key_alt('2020') == 2, \"E\"\n    print('Done')"
    },
    {
      "rank": 83,
      "score": 1.0,
      "candidate": "# your code goes here\n    # return 0\n    hex_key = \"0123456789ABCDEF\"\n    hex_key = dict(zip(hex_key, range(16)))\n    hex_key = {v: k for k, v in hex_key.items()}\n    primes = [2, 3, 5, 7, 11, 13]\n    prime_count = 0\n    for num in num:\n        if hex_key[num] in primes:\n            prime_count += 1\n    return prime_count\n\n\ndef hex_key_2(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    # your code goes here\n    # return 0\n    hex_key ="
    },
    {
      "rank": 84,
      "score": 1.0,
      "candidate": "# the prime numbers in hexadecimal are 2, 3, 5, 7, 11, 13, 17, 19\n    # I'll use a set to store them\n    primes = {2, 3, 5, 7, 11, 13, 17, 19}\n    # a set is faster than a list\n    # we can use a list, but it will be slower\n    # we can use a dictionary, but it will be slower too\n    # I use a set to check if a number is prime\n    # if we use a list or a dictionary, we should check if the number is in the list/dictionary\n    # if we use a set, we should check if the number is in the set\n    # the set contains prime numbers, but the set is a set of prime numbers\n    # the set does not contain the primes, the set is the primes\n    # the set is the primes, but the set contains the primes\n    # it is better to think of the set as the primes, and the primes as the set\n    # we should not think of the set as the numbers that are in the set, \n    # or of the numbers as the set that contains the numbers\n    # the set contains the primes, and the primes are in the set\n    \n    # I use a set comprehension to create the set\n    # I use a set comprehension to check if the number is prime\n    # I use a set comprehension to return the number of prime numbers\n    return len({int(i, 16) for i in set(num)})\n\nif __name__ == '__main__':\n    print(\"Example:\")\n    print(hex_key('AB'))\n\n    #These \"asserts\" using only for self-checking and not necessary for auto-testing\n    assert hex_key('AB') == 1\n    assert hex_key('1077E') == 2\n    assert hex_key('ABED1A33') == 4\n    assert hex_key('123456789ABCDEF0') == 6\n    assert hex_key('2020') == 2"
    },
    {
      "rank": 85,
      "score": 1.0,
      "candidate": "hex_dict = {'0': 0, '1': 1, '2': 2, '3': 3, '4': 4, '5': 5, '6': 6, '7': 7,\n                '8': 8, '9': 9, 'A': 10, 'B': 11, 'C': 12, 'D': 13, 'E': 14, 'F': 15}\n    hex_dict_inv = {0: '0', 1: '1', 2: '2', 3: '3', 4: '4', 5: '5', 6: '6', 7: '7',\n                    8: '8', 9: '9', 10: 'A', 11: 'B', 12: 'C', 13: 'D', 14: 'E', 15: 'F'}\n    hex_primes = [2, 3, 5, 7, 11, 13]\n    hex_list = [hex_dict[i] for i in num]\n    hex_list_rev = hex_list[::-1]\n    hex_list_rev_str = ''.join(str(i) for i in hex_list_rev)\n    hex_list_rev_num = int(hex_list_rev_str, 16)\n    for i in range(len(hex_list)):\n        if hex_list[i] in hex_primes:\n            hex_list[i] = 0\n    hex_list_str = ''.join(str(i) for i in hex_list)\n    hex_list_num = int(hex_list_str, 16)\n    hex_list_rev_str = ''.join(str(i) for i in hex_list_rev)\n    hex_list_rev_num = int(hex_list_rev_str, 16)\n    if hex_list_num == hex_list_rev_num:\n        return len(hex_list)\n    else:\n        return len(hex_list) + len(hex_list_"
    },
    {
      "rank": 86,
      "score": 1.0,
      "candidate": "hex_string = '0123456789ABCDEF'\n    hex_dict = {}\n    for i in range(len(hex_string)):\n        hex_dict[hex_string[i]] = i\n    n = len(num)\n    result = 0\n    for i in range(n):\n        if hex_dict[num[i]] in (2, 3, 5, 7, 11, 13):\n            result += 1\n    return result\n\n\nif __name__ == '__main__':\n    print(\"Example:\")\n    print(hex_key('AB'))\n    assert hex_key('AB') == 1\n    print(hex_key('1077E'))\n    assert hex_key('1077E') == 2\n    print(hex_key('ABED1A33'))\n    assert hex_key('ABED1A33') == 4\n    print(hex_key('123456789ABCDEF0'))\n    assert hex_key('123456789ABCDEF0') == 6\n    print(hex_key('2020'))\n    assert hex_key('2020') == 2\n    print(\"Coding complete? Click 'Check' to earn cool rewards!\")"
    },
    {
      "rank": 87,
      "score": 1.0,
      "candidate": "hex_dict = {\n        '0': 0,\n        '1': 1,\n        '2': 3,\n        '3': 5,\n        '4': 7,\n        '5': 9,\n        '6': 11,\n        '7': 13,\n        '8': 15,\n        '9': 17,\n        'A': 19,\n        'B': 23,\n        'C': 29,\n        'D': 31,\n        'E': 37,\n        'F': 41\n    }\n    result = 0\n    for i in num:\n        if hex_dict[i] % 2 == 1 or hex_dict[i] % 5 == 1:\n            result += 1\n    return result\n\n\ndef hex_key_2(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"1"
    },
    {
      "rank": 88,
      "score": 1.0,
      "candidate": "hex_string = \"0123456789ABCDEF\"\n    hex_dict = {hex_string[i]: i for i in range(len(hex_string))}\n    count = 0\n    for i in num:\n        if hex_dict[i] in [2, 3, 5, 7, 11, 13]:\n            count += 1\n    return count\n\n\ndef test_function():\n    assert hex_key(\"AB\") == 1, \"A and B are prime\"\n    assert hex_key(\"1077E\") == 2, \"10, 7, 7, and E are prime\"\n    assert hex_key(\"ABED1A33\") == 4, \"A, B, E, and D are prime\"\n    assert hex_key(\"123456789ABCDEF0\") == 6, \"All digits are prime\"\n    assert hex_key(\"2020\") == 2, \"2 and 0 are prime\"\n    assert hex_key(\"CAFEBABE\") == 3, \"C, A, F, E, and B are prime\"\n    assert hex_key(\"1AE3BF\") == 3, \"1, A, E, and 3 are prime\"\n    assert hex_key(\"ABCDEF\") == 6, \"All digits are prime\"\n    assert hex_key(\"BEA7231F\") == 3, \"B, E, A, 7, 2, 3, and 1 are prime\"\n    assert hex_key(\"\") == 0, \"Empty string\"\n    assert hex_key(\"FF\") == 2, \"All digits are prime\"\n\n\nif __name__ == '__main__':\n    test_function()"
    },
    {
      "rank": 89,
      "score": 1.0,
      "candidate": "num = str(num)\n    # hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    hexadecimal = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E', 'F']\n    # Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    # hexadecimal_list = []\n    # for hex in hexadecimal:\n    #     if hex in num:\n    #         hexadecimal_list.append(hex)\n    # return len([hex for hex in hexadecimal_list if int(hex, 16) in primes])\n    return len([hex for hex in num if int(hex, 16) in primes])\n\n\nif __name__ == '__main__':\n    print(\"Example:\")\n    print(hex_key('AB'))\n\n    # These \"asserts\" are used for self-checking and not for an auto-testing\n    assert hex_key('AB') == 1\n    assert hex_key('1077E') == 2\n    assert hex_key('ABED1A33') == 4\n    assert hex_key('123456789ABCDEF0') == 6\n    assert hex_key('2020') == 2\n    print(\"Coding complete? Click 'Check' to earn cool rewards!\")"
    },
    {
      "rank": 90,
      "score": 1.0,
      "candidate": "# create a list of hexadecimal digits\n    hex_digits = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E', 'F']\n\n    # create a list of prime digits\n    prime_digits = ['2', '3', '5', '7', 'B', 'D']\n\n    # create a dictionary of hexadecimal digits as keys, and their decimal \n    # values as values\n    hex_dict = {}\n    for i in range(len(hex_digits)):\n        hex_dict[hex_digits[i]] = i\n\n    # create a dictionary of prime digits as keys, and their decimal \n    # values as values\n    prime_dict = {}\n    for i in range(len(prime_digits)):\n        prime_dict[prime_digits[i]] = i\n\n    # create a list of all the digits in the given hex number\n    hex_num = list(num)\n\n    # initialize a counter for the number of prime digits\n    prime_digits_count = 0\n\n    # iterate through the digits in the given hex number\n    for i in range(len(hex_num)):\n\n        # if the current digit is in the prime dictionary, increment \n        # the prime digits counter\n        if hex_num[i] in prime_dict:\n            prime_digits_count += 1\n\n    return prime_digits_count\n\nprint(hex_key('AB'))\nprint(hex_key('1077E'))\nprint(hex_key('ABED1A33'))\nprint(hex_key('123456789ABCDEF0'))\nprint(hex_key('2020'))\n\n# Time complexity: O(n)\n# Space complexity: O(n)"
    },
    {
      "rank": 91,
      "score": 1.0,
      "candidate": "hex_list = [\"0\",\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"A\",\"B\",\"C\",\"D\",\"E\",\"F\"]\n    hex_dict = {\n        \"0\":\"0\",\n        \"1\":\"1\",\n        \"2\":\"2\",\n        \"3\":\"3\",\n        \"4\":\"4\",\n        \"5\":\"5\",\n        \"6\":\"6\",\n        \"7\":\"7\",\n        \"8\":\"8\",\n        \"9\":\"9\",\n        \"A\":\"10\",\n        \"B\":\"11\",\n        \"C\":\"12\",\n        \"D\":\"13\",\n        \"E\":\"14\",\n        \"F\":\"15\"\n    }\n    prime_list = [2,3,5,7,11,13,17]\n    if len(num) == 0:\n        return 0\n    else:\n        num = num.upper()\n        num_list = []\n        for i in num:\n            num_list.append(hex_dict[i])\n        num_list = [int(i) for i in num_list]\n        num_sum = sum(num_list)\n        for i in num_sum:\n            if i in prime_list:\n                return num_sum"
    },
    {
      "rank": 92,
      "score": 1.0,
      "candidate": "# 1. Convert the hex string to decimal number\n    # 2. Convert the decimal number to binary string\n    # 3. Count the number of 1s in the binary string\n    # 4. Return the result\n    hex_dict = {\n        \"0\": \"0000\",\n        \"1\": \"0001\",\n        \"2\": \"0010\",\n        \"3\": \"0011\",\n        \"4\": \"0100\",\n        \"5\": \"0101\",\n        \"6\": \"0110\",\n        \"7\": \"0111\",\n        \"8\": \"1000\",\n        \"9\": \"1001\",\n        \"A\": \"1010\",\n        \"B\": \"1011\",\n        \"C\": \"1100\",\n        \"D\": \"1101\",\n        \"E\": \"1110\",\n        \"F\": \"1111\",\n    }\n    # 1. Convert the hex string to decimal number\n    dec_num = 0\n    for i in range(len(num)):\n        dec_num += int(hex_dict[num[i]], 16) * (16 ** (len(num) - 1 - i))\n    # 2. Convert the decimal number to binary string\n    bin_num = bin(dec_num)[2:]\n    # 3. Count the number of 1s in the binary string\n    count = 0\n    for i in range(len(bin_num)):\n        if bin_num[i] == \"1\":\n            count += 1\n    return count\n\n\n# hex_key(\"AB\")\n# hex_key(\"1077E\")\n# hex_key(\"ABED1A33\")\n# hex_key(\"123456789ABCDEF0\")\n# hex_key(\"2020\")"
    },
    {
      "rank": 93,
      "score": 1.0,
      "candidate": "hex_digit_primes = [2,3,5,7,11,13]\n    hex_digit_prime_values = {\n        'A': 10,\n        'B': 11,\n        'C': 12,\n        'D': 13,\n        'E': 14,\n        'F': 15\n    }\n    \n    hex_digit_count = 0\n    for hex_digit in num:\n        if hex_digit.isdigit():\n            hex_digit_count += 1\n        else:\n            hex_digit_count += 1 if hex_digit in hex_digit_primes else 0\n            hex_digit_count += 1 if hex_digit.lower() in hex_digit_primes else 0\n\n    return hex_digit_count\n\n\nif __name__ == '__main__':\n    assert hex_key(\"AB\") == 1, \"First\"\n    assert hex_key(\"1077E\") == 2, \"Second\"\n    assert hex_key(\"ABED1A33\") == 4, \"Third\"\n    assert hex_key(\"123456789ABCDEF0\") == 6, \"Fourth\"\n    assert hex_key(\"2020\") == 2, \"Fifth\"\n    assert hex_key(\"1010\") == 2, \"Sixth\"\n    assert hex_key(\"123456789ABCDEF\") == 6, \"Seventh\"\n    assert hex_key(\"0000\") == 0, \"Eigth\"\n    assert hex_key(\"123456789ABCDEFG\") == 6, \"Ninth\"\n    assert hex_key(\"0000000000000000\") == 0, \"Tenth\"\n    assert hex_key(\"ABABABABABABABABAB\") == 6, \"Eleventh\"\n    assert hex_key(\"00000000000000000\") == 0, \"Twelveth\"\n    assert hex"
    },
    {
      "rank": 94,
      "score": 1.0,
      "candidate": "hex_dict = {\n        \"0\": 0,\n        \"1\": 0,\n        \"2\": 1,\n        \"3\": 1,\n        \"4\": 0,\n        \"5\": 1,\n        \"6\": 1,\n        \"7\": 1,\n        \"8\": 0,\n        \"9\": 0,\n        \"A\": 1,\n        \"B\": 1,\n        \"C\": 0,\n        \"D\": 1,\n        \"E\": 0,\n        \"F\": 0\n    }\n    hex_dict_prime = {\n        \"2\": 1,\n        \"3\": 1,\n        \"5\": 1,\n        \"7\": 1,\n        \"B\": 1,\n        \"D\": 1\n    }\n    if num == \"\":\n        return 0\n    total = 0\n    for i in num:\n        if hex_dict[i] == 1:\n            total += 1\n    return total\n\n\nif __name__ == '__main__':\n    assert hex_key(\"AB\") == 1, \"Wrong answer\"\n    assert hex_key(\"1077E\") == 2, \"Wrong answer\"\n    assert hex_key(\"ABED1A33\") == 4, \"Wrong answer\"\n    assert hex_key(\"123456789ABCDEF0\") == 6, \"Wrong answer\"\n    assert hex_key(\"2020\") == 2, \"Wrong answer\"\n    assert hex_key(\"123456789ABCDEF0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF0\") == 24, \"Wrong answer\"\n    assert hex_key(\"1\") == 0, \"Wrong answer\"\n    assert hex_key(\"0\") == 0, \"Wrong answer\"\n    assert hex_"
    },
    {
      "rank": 95,
      "score": 1.0,
      "candidate": "count = 0\n    hex_dict = {\n        \"A\": 10,\n        \"B\": 11,\n        \"C\": 12,\n        \"D\": 13,\n        \"E\": 14,\n        \"F\": 15\n    }\n    for i in num:\n        if hex_dict.get(i) in [2, 3, 5, 7, 11, 13]:\n            count += 1\n    return count\n\n\ndef test_hex_key():\n    assert hex_key(\"AB\") == 1\n    assert hex_key(\"1077E\") == 2\n    assert hex_key(\"ABED1A33\") == 4\n    assert hex_key(\"123456789ABCDEF0\") == 6\n    assert hex_key(\"2020\") == 2\n    assert hex_key(\"ABC\") == 3\n    assert hex_key(\"ABC123\") == 3\n    assert hex_key(\"1010101010\") == 4\n    assert hex_key(\"10101010101010101010101010101010\") == 16"
    },
    {
      "rank": 96,
      "score": 1.0,
      "candidate": "# Step 1: Convert the hexadecimal number to decimal number\n    # Step 2: Check if the decimal number is a prime number\n    # Step 3: If it is a prime number, add 1 to the counter\n    # Step 4: Repeat the above steps for all hexadecimal digits\n    \n    # Step 1: Convert the hexadecimal number to decimal number\n    num_decimal = int(num, 16)\n    \n    # Step 2: Check if the decimal number is a prime number\n    # Step 3: If it is a prime number, add 1 to the counter\n    # Step 4: Repeat the above steps for all hexadecimal digits\n    count = 0\n    while num_decimal != 0:\n        rem = num_decimal % 10\n        if rem == 2 or rem == 3 or rem == 5 or rem == 7:\n            count += 1\n        elif rem == 11:\n            count += 1\n        num_decimal = num_decimal // 10\n    \n    return count\n    \n    \nif __name__ == '__main__':\n    #These \"asserts\" using only for self-checking and not necessary for auto-testing\n    assert hex_key(\"AB\") == 1, \"First\"\n    assert hex_key(\"1077E\") == 2, \"Second\"\n    assert hex_key(\"ABED1A33\") == 4, \"Third\"\n    assert hex_key(\"123456789ABCDEF0\") == 6, \"Fourth\"\n    assert hex_key(\"2020\") == 2, \"Fifth\"\n    assert hex_key(\"7F3C\") == 0, \"Sixth\"\n    assert hex_key(\"123456789ABCDEF\") == 6, \"Seventh\"\n    assert hex_key(\"AB12CD34\") == 2, \"Eighth\"\n    assert hex_key(\"0000\") == 0, \"Ninth\"\n    assert hex_key(\"3D\") == 1, \"Tenth\""
    },
    {
      "rank": 97,
      "score": 1.0,
      "candidate": "# 1. check if the string is empty or not\n    if num == \"\":\n        return 0\n    # 2. check if the string has more than 1 character\n    if len(num) == 1:\n        return 0\n    # 3. get the number of primes\n    count = 0\n    # 4. iterate over the string\n    for i in range(len(num)):\n        # 5. if the character is prime, then increase the count\n        if num[i] in \"2357BDF\":\n            count += 1\n    # 6. return the count\n    return count\n\n\ndef test_function():\n    assert hex_key(\"AB\") == 1\n    assert hex_key(\"1077E\") == 2\n    assert hex_key(\"ABED1A33\") == 4\n    assert hex_key(\"123456789ABCDEF0\") == 6\n    assert hex_key(\"2020\") == 2\n    assert hex_key(\"\") == 0\n    assert hex_key(\"FFFFFFFFFFFFFFFFFF\") == 16\n    assert hex_key(\"FFFFFFFFFFFFFFFFFFF\") == 16\n    assert hex_key(\"00000000000000000\") == 0\n    assert hex_key(\"7fffffffffffffff\") == 8\n    assert hex_key(\"7FFFFFFFFFFFFFFF\") == 8\n\n\nif __name__ == '__main__':\n    test_function()"
    },
    {
      "rank": 98,
      "score": 1.0,
      "candidate": "hex_dict = {\n        '0': 0,\n        '1': 1,\n        '2': 2,\n        '3': 3,\n        '4': 4,\n        '5': 5,\n        '6': 6,\n        '7': 7,\n        '8': 8,\n        '9': 9,\n        'A': 10,\n        'B': 11,\n        'C': 12,\n        'D': 13,\n        'E': 14,\n        'F': 15\n    }\n    hex_num = 0\n    prime_dict = {\n        0: 0,\n        1: 0,\n        2: 1,\n        3: 1,\n        4: 1,\n        5: 1,\n        6: 1,\n        7: 1,\n        8: 1,\n        9: 1,\n        10: 1,\n        11: 1,\n        12: 1,\n        13: 1,\n        14: 1,\n        15: 1\n    }\n    for i in num:\n        hex_num += hex_dict[i]\n    result = 0\n    while hex_num > 0:\n        if prime_dict[hex_num % 16] == 1:\n            result += 1\n        hex_num //= 16\n    return result\n\n\nprint(hex_key(\"AB\"))\nprint(hex_key(\"1077E\"))\nprint(hex_key(\"ABED1A33\"))\nprint(hex_key(\"123456789ABCDEF0\"))\nprint(hex_key(\"2020\"))"
    },
    {
      "rank": 99,
      "score": 1.0,
      "candidate": "prime_digits = {2, 3, 5, 7, 11, 13}\n    num = num.upper()\n    output = 0\n    for char in num:\n        if char in prime_digits:\n            output += 1\n    return output\n\n\ndef hex_key_2(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    prime_digits = {2, 3, 5, 7, 11, 13}\n    num = num.upper()\n    output = 0\n    for char in num:\n        if ord(char) - ord(\"A\") in prime_digits:\n            output += 1\n    return output\n\n\nprint(hex_key(\"AB\"))\nprint(hex"
    },
    {
      "rank": 100,
      "score": 1.0,
      "candidate": "hex_nums = {\"A\": 10, \"B\": 11, \"C\": 12, \"D\": 13, \"E\": 14, \"F\": 15}\n    num_list = [x for x in num]\n    num_list = [hex_nums[x] if x in hex_nums.keys() else int(x) for x in num_list]\n    prime_digits = [2, 3, 5, 7, 11, 13]\n    count = 0\n    for num in num_list:\n        if num in prime_digits:\n            count += 1\n    return count\n\n\n# hex_key(\"AB\") # 1\n# hex_key(\"1077E\") # 2\n# hex_key(\"ABED1A33\") # 4\n# hex_key(\"123456789ABCDEF0\") # 6\n# hex_key(\"2020\") # 2"
    }
  ]
}