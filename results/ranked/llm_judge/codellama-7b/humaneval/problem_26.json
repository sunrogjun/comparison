{
  "timestamp": "2025-09-14T21:16:29.055016",
  "method": "improved_llm_judge",
  "judge_model": "codellama/CodeLlama-7b-Python-hf",
  "target_model": "codellama-7b",
  "dataset": "humaneval",
  "problem_number": 26,
  "total_candidates": 100,
  "results": [
    {
      "rank": 1,
      "score": 10.0,
      "candidate": "seen_numbers = set()\n    unique_numbers = []\n\n    for number in numbers:\n        if number not in seen_numbers:\n            unique_numbers.append(number)\n            seen_numbers.add(number)\n\n    return unique_numbers\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 2,
      "score": 10.0,
      "candidate": "seen = set()\n    result = []\n\n    for number in numbers:\n        if number not in seen:\n            result.append(number)\n            seen.add(number)\n\n    return result\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 3,
      "score": 10.0,
      "candidate": "seen = set()\n    return [x for x in numbers if x not in seen and not seen.add(x)]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 4,
      "score": 10.0,
      "candidate": "# create a dictionary of numbers to their frequency\n    freq = {}\n    for number in numbers:\n        if number in freq:\n            freq[number] += 1\n        else:\n            freq[number] = 1\n\n    # return a list of numbers that have frequency of exactly 1\n    return [number for number in numbers if freq[number] == 1]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 5,
      "score": 10.0,
      "candidate": "seen = set()\n    result = []\n    for num in numbers:\n        if num not in seen:\n            result.append(num)\n            seen.add(num)\n    return result\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 6,
      "score": 10.0,
      "candidate": "seen = set()\n    return [n for n in numbers if n not in seen and not seen.add(n)]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 7,
      "score": 10.0,
      "candidate": "result = []\n    for num in numbers:\n        if num not in result:\n            result.append(num)\n    return result\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 8,
      "score": 10.0,
      "candidate": "# Your code here\n    # check that list is not empty\n    if not numbers:\n        return numbers\n\n    # if list contains only one element\n    if len(numbers) == 1:\n        return numbers\n\n    # check if the first element is already in the result\n    result = [numbers[0]]\n    for i in range(1, len(numbers)):\n        # if element is not in the result\n        if numbers[i] not in result:\n            # add it to the result\n            result.append(numbers[i])\n\n    return result\n\n\ndef remove_duplicates_dict(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\n    # Your code here\n    # check that list is not empty\n    if not numbers:\n        return numbers\n\n    # if list contains only one element\n    if len(numbers) == 1:\n        return numbers\n\n    # check if the first element is already in the result\n    result = {}\n    for i in range(len(numbers)):\n        # if element is not in the result\n        if numbers[i] not in result:\n            # add it to the result\n            result[numbers[i]] = 1\n        else:\n            # if element is in the result - remove it from the list\n            numbers.pop(i)\n\n    return numbers\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 9,
      "score": 10.0,
      "candidate": "if not numbers:\n        return []\n\n    # Keep track of the last number seen\n    last_seen = numbers[0]\n    # Keep track of the last index of the last number seen\n    last_seen_idx = 0\n\n    for i in range(1, len(numbers)):\n        # If current number is equal to the last number seen, update last_seen_idx\n        if numbers[i] == last_seen:\n            last_seen_idx = i\n        else:\n            # If the current number is not equal to the last number seen,\n            #  swap the current number with the last number seen\n            numbers[last_seen_idx] = numbers[i]\n            last_seen = numbers[i]\n            last_seen_idx = i\n\n    return numbers\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 10,
      "score": 9.991043490222513,
      "candidate": "# Set of numbers is used to store all unique numbers\n    unique_numbers = set()\n    # For each number in numbers\n    for number in numbers:\n        # If number not in unique_numbers\n        if number not in unique_numbers:\n            # Add number to unique_numbers\n            unique_numbers.add(number)\n    # Return list of unique_numbers\n    return list(unique_numbers)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 11,
      "score": 9.945082028040622,
      "candidate": "seen = set()\n    result = []\n    for number in numbers:\n        if number not in seen:\n            result.append(number)\n            seen.add(number)\n    return result\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 12,
      "score": 9.925248162383532,
      "candidate": "# Create a set from the list, which removes all duplicates\n    set_of_numbers = set(numbers)\n    # Create a list from the set, preserving order\n    return list(set_of_numbers)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 13,
      "score": 9.884145576796884,
      "candidate": "seen = set()\n    result = []\n\n    for number in numbers:\n        if number not in seen:\n            seen.add(number)\n            result.append(number)\n    return result\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 14,
      "score": 9.882631403516262,
      "candidate": "# Base case: an empty list has no duplicates\n    if len(numbers) == 0:\n        return []\n\n    # Base case: if the first element occurs more than once, remove it\n    if numbers.count(numbers[0]) > 1:\n        return remove_duplicates(numbers[1:])\n\n    # Base case: if the first element occurs once, keep it and recurse\n    if numbers.count(numbers[0]) == 1:\n        return [numbers[0]] + remove_duplicates(numbers[1:])\n\n    # If all of the above are false, then the first element is the only\n    # duplicate. Keep it and remove the rest of the duplicates from the\n    # rest of the list\n    return [numbers[0]] + remove_duplicates(numbers[1:])\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 15,
      "score": 9.880206440538677,
      "candidate": "if not numbers:\n        return []\n\n    # Use a set to keep track of which numbers we've seen already\n    seen_numbers = set()\n    seen_numbers.add(numbers[0])\n\n    # Keep track of the index of the last item that we've added to the list\n    last_added_idx = 0\n\n    for idx, num in enumerate(numbers):\n        if num not in seen_numbers:\n            seen_numbers.add(num)\n            # Swap the current number with the one at the end of the list\n            numbers[idx], numbers[last_added_idx] = numbers[last_added_idx], num\n            # Increment the index of the last added number\n            last_added_idx += 1\n\n    # Since we've modified the list, we need to return the first `last_added_idx` elements\n    return numbers[:last_added_idx]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 16,
      "score": 9.859428117689756,
      "candidate": "# Check that input is a list.\n    if not isinstance(numbers, list):\n        raise TypeError(\"Input must be a list\")\n\n    # Check that input is not empty.\n    if len(numbers) == 0:\n        return []\n\n    # Check that input is not a list of integers.\n    for i in numbers:\n        if not isinstance(i, int):\n            raise TypeError(\"List must only contain integers\")\n\n    # Check that input is not a list of negative integers.\n    for i in numbers:\n        if i < 0:\n            raise ValueError(\"List must only contain positive integers\")\n\n    # Create a list to return.\n    return_list = []\n\n    # Iterate through the list.\n    for i in numbers:\n        # If the number is not in the return list, append it.\n        if i not in return_list:\n            return_list.append(i)\n\n    # Return the list.\n    return return_list\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 17,
      "score": 9.84957334694265,
      "candidate": "seen = set()\n    result = []\n    for number in numbers:\n        if number not in seen:\n            seen.add(number)\n            result.append(number)\n    return result\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 18,
      "score": 9.820038947901322,
      "candidate": "# my solution\n    # return list(set(numbers))\n    # solution 1\n    # return sorted(set(numbers), key=numbers.index)\n    # solution 2\n    result = []\n    for num in numbers:\n        if num not in result:\n            result.append(num)\n    return result\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 19,
      "score": 9.790195619194341,
      "candidate": "result = []\n    for number in numbers:\n        if number not in result:\n            result.append(number)\n    return result\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 20,
      "score": 9.735572267761025,
      "candidate": "result = []\n    seen = set()\n    for n in numbers:\n        if n not in seen:\n            result.append(n)\n            seen.add(n)\n    return result\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 21,
      "score": 9.646924074666178,
      "candidate": "# Check input\n    if not numbers:\n        return []\n\n    # Init result\n    result = [numbers[0]]\n\n    # Loop over the numbers\n    for number in numbers[1:]:\n        # Check if number is already in result\n        if number not in result:\n            # If not, add it\n            result.append(number)\n\n    return result\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 22,
      "score": 9.568770541871741,
      "candidate": "seen = set()\n    result = []\n    for number in numbers:\n        if number not in seen:\n            result.append(number)\n            seen.add(number)\n    return result\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 23,
      "score": 9.559239961159317,
      "candidate": "if len(numbers) == 0:\n        return []\n\n    output = [numbers[0]]\n\n    for number in numbers[1:]:\n        if number != output[-1]:\n            output.append(number)\n\n    return output\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 24,
      "score": 9.52167993883555,
      "candidate": "result: List[int] = []\n    seen_numbers: List[int] = []\n    for number in numbers:\n        if number not in seen_numbers:\n            result.append(number)\n            seen_numbers.append(number)\n    return result\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 25,
      "score": 9.510082469030056,
      "candidate": "numbers_set = set()\n    numbers_deduped = []\n\n    for num in numbers:\n        if num not in numbers_set:\n            numbers_set.add(num)\n            numbers_deduped.append(num)\n\n    return numbers_deduped\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 26,
      "score": 9.370583536698913,
      "candidate": "new_numbers = []\n    for number in numbers:\n        if number not in new_numbers:\n            new_numbers.append(number)\n    return new_numbers\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 27,
      "score": 9.234050852198141,
      "candidate": "unique_numbers = []\n    for number in numbers:\n        if number not in unique_numbers:\n            unique_numbers.append(number)\n    return unique_numbers\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 28,
      "score": 9.226766272351448,
      "candidate": "result = []\n    for number in numbers:\n        if number not in result:\n            result.append(number)\n    return result\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 29,
      "score": 9.21346272767743,
      "candidate": "# set is a list without duplicates\n    # so we can convert the list to set, then convert the set back to list\n    return list(set(numbers))\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 30,
      "score": 9.205959372648458,
      "candidate": "seen = set()\n    output = []\n    for num in numbers:\n        if num not in seen:\n            output.append(num)\n            seen.add(num)\n    return output\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 31,
      "score": 9.183391466815202,
      "candidate": "# return sorted(set(numbers), key=numbers.index)\n    seen = set()\n    seen_add = seen.add\n    return [x for x in numbers if not (x in seen or seen_add(x))]\n\n\ndef main():\n    numbers = [1, 2, 3, 2, 4]\n    print(f\"List of numbers: {numbers}\")\n    print(f\"Remove duplicates: {remove_duplicates(numbers)}\")\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 32,
      "score": 9.177268828905222,
      "candidate": "seen = set()\n    result = []\n    for number in numbers:\n        if number not in seen:\n            result.append(number)\n            seen.add(number)\n    return result\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 33,
      "score": 9.122564458729856,
      "candidate": "if len(numbers) == 0:\n        return []\n\n    # create a set from the list\n    seen = set(numbers)\n    # return the list of unique elements\n    return [element for element in numbers if element in seen]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 34,
      "score": 8.973005557553902,
      "candidate": "result = []\n    seen = set()\n\n    for number in numbers:\n        if number not in seen:\n            result.append(number)\n            seen.add(number)\n\n    return result\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 35,
      "score": 8.946210893390457,
      "candidate": "seen = set()\n    for number in numbers:\n        if number not in seen:\n            seen.add(number)\n    return list(seen)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 36,
      "score": 8.910084504002544,
      "candidate": "return list(set(numbers))\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 37,
      "score": 8.85571690049604,
      "candidate": "return list(set(numbers))\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 38,
      "score": 8.855395696632057,
      "candidate": "seen = set()\n    result = []\n    for number in numbers:\n        if number not in seen:\n            result.append(number)\n            seen.add(number)\n    return result\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 39,
      "score": 8.850707355641543,
      "candidate": "seen = set()\n    unique = []\n    for number in numbers:\n        if number not in seen:\n            unique.append(number)\n            seen.add(number)\n    return unique\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 40,
      "score": 8.8281618090209,
      "candidate": "seen = set()\n    return [number for number in numbers if number not in seen and not seen.add(number)]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 41,
      "score": 8.81367773444215,
      "candidate": "seen = set()\n    result = []\n    for number in numbers:\n        if number not in seen:\n            result.append(number)\n            seen.add(number)\n    return result\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 42,
      "score": 8.76828871349479,
      "candidate": "return list(set(numbers))\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 43,
      "score": 8.715724466237427,
      "candidate": "if not numbers:\n        return []\n    result = []\n    for number in numbers:\n        if number not in result:\n            result.append(number)\n    return result\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 44,
      "score": 8.692801520950061,
      "candidate": "# return list(set(numbers))\n    result = []\n    for number in numbers:\n        if number not in result:\n            result.append(number)\n    return result\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 45,
      "score": 8.632293453617281,
      "candidate": "seen = set()\n    result = []\n    for num in numbers:\n        if num not in seen:\n            seen.add(num)\n            result.append(num)\n    return result\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 46,
      "score": 8.625142247198651,
      "candidate": "seen = set()\n    result = []\n    for n in numbers:\n        if n not in seen:\n            result.append(n)\n            seen.add(n)\n    return result"
    },
    {
      "rank": 47,
      "score": 8.623000730200317,
      "candidate": "seen = set()\n    return [n for n in numbers if n not in seen and not seen.add(n)]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 48,
      "score": 8.616253589228675,
      "candidate": "seen = set()\n    result = []\n    for num in numbers:\n        if num not in seen:\n            seen.add(num)\n            result.append(num)\n    return result\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 49,
      "score": 8.610076160146226,
      "candidate": "return list(set(numbers))\n\n\ndef main():\n    numbers = [1, 2, 3, 2, 4]\n    print(remove_duplicates(numbers))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 50,
      "score": 8.606486429141842,
      "candidate": "seen = set()\n    return [x for x in numbers if x not in seen and not seen.add(x)]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 51,
      "score": 8.565425580227462,
      "candidate": "seen = set()\n    return [x for x in numbers if x not in seen and not seen.add(x)]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 52,
      "score": 8.548876241946822,
      "candidate": "result = []\n    for number in numbers:\n        if number not in result:\n            result.append(number)\n    return result\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 53,
      "score": 8.48796797856353,
      "candidate": "result: List[int] = []\n    for num in numbers:\n        if num not in result:\n            result.append(num)\n    return result\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 54,
      "score": 8.478208546788407,
      "candidate": "seen = set()\n    return [number for number in numbers if number not in seen and not seen.add(number)]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 55,
      "score": 8.437695832075478,
      "candidate": "# [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]\n    # [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]\n    # [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]\n    # [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]\n    # [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]\n    # [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]\n    # [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]\n    # [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]\n    # [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]\n    # [1, 2, 3, 4, 5, 6, 7, 8,"
    },
    {
      "rank": 56,
      "score": 8.408439383654278,
      "candidate": "seen = set()\n    result = []\n    for number in numbers:\n        if number not in seen:\n            result.append(number)\n            seen.add(number)\n    return result\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 57,
      "score": 8.386620303250325,
      "candidate": "result = []\n    for number in numbers:\n        if number not in result:\n            result.append(number)\n    return result\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 58,
      "score": 8.375312293858853,
      "candidate": "return list(set(numbers))\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 59,
      "score": 8.351614956112536,
      "candidate": "seen = set()\n    result = []\n    for n in numbers:\n        if n not in seen:\n            result.append(n)\n            seen.add(n)\n    return result\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 60,
      "score": 8.331556294201176,
      "candidate": "seen = set()\n    output = []\n    for number in numbers:\n        if number not in seen:\n            output.append(number)\n            seen.add(number)\n    return output\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 61,
      "score": 8.327375965969855,
      "candidate": "seen = set()\n    return [x for x in numbers if x not in seen and not seen.add(x)]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 62,
      "score": 8.327367757082776,
      "candidate": "seen = set()\n    result = []\n    for number in numbers:\n        if number not in seen:\n            seen.add(number)\n            result.append(number)\n    return result\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 63,
      "score": 8.298597569547805,
      "candidate": "result: List[int] = []\n    for number in numbers:\n        if number not in result:\n            result.append(number)\n    return result\n\n\ndef main():\n    numbers = [1, 2, 3, 2, 4]\n    print(remove_duplicates(numbers))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 64,
      "score": 8.2938925966498,
      "candidate": "return [num for i, num in enumerate(numbers) if numbers.index(num) == i]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 65,
      "score": 8.289838256518838,
      "candidate": "if len(numbers) == 0:\n        return []\n    numbers.sort()\n    # Remove duplicates\n    for i in range(1, len(numbers)):\n        if numbers[i - 1] == numbers[i]:\n            numbers.pop(i)\n    return numbers\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 66,
      "score": 8.251903304236286,
      "candidate": "# for each element in the list, check if it has already been seen\n    # if it has, remove it from the list\n    # if it hasn't, mark it as seen\n    # repeat until the list is empty\n    seen = set()\n    seen_twice = set()\n    for num in numbers:\n        if num in seen:\n            seen_twice.add(num)\n        seen.add(num)\n    return [num for num in numbers if num not in seen_twice]"
    },
    {
      "rank": 67,
      "score": 8.214125058964552,
      "candidate": "return list(set(numbers))\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 68,
      "score": 8.211579567659316,
      "candidate": "seen = set()\n    return [n for n in numbers if n not in seen and not seen.add(n)]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 69,
      "score": 8.185309335307622,
      "candidate": "seen = set()\n    unique = []\n    for number in numbers:\n        if number not in seen:\n            unique.append(number)\n            seen.add(number)\n    return unique\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 70,
      "score": 8.172253082181854,
      "candidate": "seen = set()\n    result = []\n    for number in numbers:\n        if number not in seen:\n            result.append(number)\n            seen.add(number)\n    return result"
    },
    {
      "rank": 71,
      "score": 8.144125099485041,
      "candidate": "seen = set()\n    result = []\n\n    for number in numbers:\n        if number not in seen:\n            seen.add(number)\n            result.append(number)\n    return result\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 72,
      "score": 8.121884567141883,
      "candidate": "seen = set()\n    unique = []\n\n    for num in numbers:\n        if num not in seen:\n            seen.add(num)\n            unique.append(num)\n\n    return unique"
    },
    {
      "rank": 73,
      "score": 8.105983444291466,
      "candidate": "result = []\n\n    for num in numbers:\n        if num not in result:\n            result.append(num)\n\n    return result\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 74,
      "score": 7.990432406683839,
      "candidate": "seen = set()\n    result = []\n    for number in numbers:\n        if number not in seen:\n            result.append(number)\n            seen.add(number)\n    return result\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 75,
      "score": 7.938028884277233,
      "candidate": "seen = set()\n    new_numbers = []\n    for n in numbers:\n        if n not in seen:\n            new_numbers.append(n)\n            seen.add(n)\n    return new_numbers\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 76,
      "score": 7.8912769574414305,
      "candidate": "seen = set()\n    result = []\n    for number in numbers:\n        if number not in seen:\n            result.append(number)\n            seen.add(number)\n    return result\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 77,
      "score": 7.868947655733293,
      "candidate": "result = []\n    for n in numbers:\n        if n not in result:\n            result.append(n)\n    return result\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 78,
      "score": 7.84634113240411,
      "candidate": "seen = set()\n    result = []\n    for num in numbers:\n        if num not in seen:\n            seen.add(num)\n            result.append(num)\n    return result\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 79,
      "score": 7.834022619458933,
      "candidate": "seen = set()\n    output = []\n    for number in numbers:\n        if number not in seen:\n            output.append(number)\n            seen.add(number)\n    return output\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 80,
      "score": 7.780351419995229,
      "candidate": "unique_numbers = []\n    for number in numbers:\n        if number not in unique_numbers:\n            unique_numbers.append(number)\n    return unique_numbers\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 81,
      "score": 7.7320703513377165,
      "candidate": "seen = set()\n    result = []\n    for number in numbers:\n        if number not in seen:\n            result.append(number)\n            seen.add(number)\n    return result"
    },
    {
      "rank": 82,
      "score": 7.705183449260731,
      "candidate": "# the set() object does not allow duplicates\n    # and will automatically remove them\n    return list(set(numbers))"
    },
    {
      "rank": 83,
      "score": 7.4506599871439985,
      "candidate": "return [x for i, x in enumerate(numbers) if numbers.index(x) == i]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 84,
      "score": 7.134571892399572,
      "candidate": "# set() returns unique elements\n    unique_elements = list(set(numbers))\n    return unique_elements"
    },
    {
      "rank": 85,
      "score": 3.0,
      "candidate": "# O(N) time, O(1) space\n    # O(N^2) time, O(N) space\n    # if len(numbers) == 0:\n    #     return []\n    # seen = {numbers[0]}\n    # for i in range(1, len(numbers)):\n    #     num = numbers[i]\n    #     if num not in seen:\n    #         seen.add(num)\n    #         numbers[i - 1] = num\n    # return numbers\n\n    # O(N) time, O(N) space\n    seen = set()\n    result = []\n    for num in numbers:\n        if num not in seen:\n            seen.add(num)\n            result.append(num)\n    return result\n\n\ndef main():\n    numbers = [1, 2, 3, 2, 4]\n    print(remove_duplicates(numbers))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 86,
      "score": 3.0,
      "candidate": "# TODO: implement me\n    return []"
    },
    {
      "rank": 87,
      "score": 3.0,
      "candidate": "# for each number in the list, if it is not in seen_numbers, add it to seen_numbers\n    # if it is in seen_numbers, remove it from the list\n    seen_numbers = set()\n    for number in numbers:\n        if number not in seen_numbers:\n            seen_numbers.add(number)\n        else:\n            numbers.remove(number)\n    return numbers\n\n\ndef remove_duplicates_two_pointers(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates_two_pointers([1, 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\n    if len(numbers) < 2:\n        return numbers\n\n    # get a sorted version of the list\n    numbers.sort()\n    # get a copy of the list\n    numbers_copy = numbers[:]\n\n    # iterate through the copy of the list\n    for number in numbers_copy:\n        # if the current number is equal to the previous number, remove it from the list\n        if number == numbers[numbers.index(number) - 1]:\n            numbers.remove(number)\n    return numbers\n\n\nif __name__ == \"__main__\":\n    print(remove_duplicates([1, 2, 3, 2, 4]))\n    print(remove_duplicates_two_pointers([1, 2, 3, 2, 4]))"
    },
    {
      "rank": 88,
      "score": 3.0,
      "candidate": "# This solution uses a set.\n    # The set keeps track of which numbers have already been seen.\n    # As we go through the list, we add each number to the set.\n    # If we have already seen the number, it is a duplicate, so we do not add it to the output list.\n    # Otherwise, we add it to the output list.\n    # The output list is in the same order as the input list,\n    # because we are adding elements to the output list one at a time.\n    # If we wanted to make the output list in reverse order,\n    # we could add elements to the front of the output list instead of the back.\n    # This would be more efficient if we wanted to reverse a list.\n\n    output_list = []\n    seen_numbers = set()\n    for number in numbers:\n        if number not in seen_numbers:\n            output_list.append(number)\n            seen_numbers.add(number)\n    return output_list\n\n\ndef remove_duplicates_with_counting(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates_with_counting([1, 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\n    # This solution uses a dictionary.\n    # The dictionary keeps track of how many times each number has been seen.\n    # As we go through the list, we add each number to the dictionary.\n    # If we have already seen the number, it is a duplicate, so we add 1 to the value of the dictionary.\n    # If the value of the dictionary is > 1, it is a duplicate, so we do not add it to the output list.\n    # Otherwise, we add it to the output list.\n    # The output list is in the same order as the input list,\n    # because we are adding elements to the output list one at a time.\n    # If we wanted to make the output list in reverse order,\n    # we could add elements to the front of the output list instead of the back.\n    # This would be more efficient if"
    },
    {
      "rank": 89,
      "score": 3.0,
      "candidate": "output_list = []\n    for number in numbers:\n        if number not in output_list:\n            output_list.append(number)\n    return output_list\n\n\ndef remove_duplicates_2(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates_2([1, 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\n    return list(dict.fromkeys(numbers))\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 90,
      "score": 3.0,
      "candidate": "# TODO: implement me.\n    pass"
    },
    {
      "rank": 91,
      "score": 3.0,
      "candidate": "# TODO: implement me\n    pass\n\n\ndef remove_duplicates_2(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates_2([1, 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\n    # TODO: implement me\n    pass\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 92,
      "score": 3.0,
      "candidate": "# TODO: implement me\n    return []\n\n\ndef remove_duplicates_v2(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\n    # TODO: implement me\n    return []\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 93,
      "score": 3.0,
      "candidate": "seen = set()\n    result = []\n    for num in numbers:\n        if num not in seen:\n            result.append(num)\n            seen.add(num)\n    return result\n\n\ndef remove_duplicates_dict(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\n    seen = dict()\n    result = []\n    for num in numbers:\n        if num not in seen:\n            result.append(num)\n            seen[num] = True\n    return result\n\n\nif __name__ == \"__main__\":\n    print(remove_duplicates([1, 2, 3, 2, 4]))"
    },
    {
      "rank": 94,
      "score": 3.0,
      "candidate": "new_list = []\n    for i in numbers:\n        if i not in new_list:\n            new_list.append(i)\n    return new_list\n\n\ndef remove_duplicates_set(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates_set([1, 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\n    return list(set(numbers))\n\n\ndef main():\n    numbers = [1, 2, 3, 2, 4]\n    print(remove_duplicates(numbers))\n    print(remove_duplicates_set(numbers))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 95,
      "score": 3.0,
      "candidate": "# TODO: implement me\n    pass\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 96,
      "score": 3.0,
      "candidate": "# Your code here\n    seen = set()\n    result = []\n    for x in numbers:\n        if x not in seen:\n            seen.add(x)\n            result.append(x)\n    return result\n\n\ndef remove_duplicates_2(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\n    # Your code here\n    return list(set(numbers))\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 97,
      "score": 3.0,
      "candidate": "# TODO: implement me\n    return []\n\n\ndef remove_duplicates_no_extra_space(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\n    # TODO: implement me\n    return []\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 98,
      "score": 3.0,
      "candidate": "# TODO: implement me\n    pass\n\n\ndef merge_ranges(ranges: List[List[int]]) -> List[List[int]]:\n    \"\"\"Merge overlapping ranges.\n\n    >>> merge_ranges([[1, 3], [5, 8], [4, 10]])\n    [[1, 10]]\n    >>> merge_ranges([[1, 4], [4, 6], [6, 10]])\n    [[1, 4], [4, 10]]\n    >>> merge_ranges([[1, 4], [2, 6], [3, 7]])\n    [[1, 7]]\n    >>> merge_ranges([[1, 4], [2, 3], [3, 6]])\n    [[1, 6]]\n    >>> merge_ranges([[1, 2], [3, 4], [5, 6], [7, 8]])\n    [[1, 2], [3, 4], [5, 6], [7, 8]]\n    \"\"\"\n    # TODO: implement me\n    pass\n\n\ndef sum_sublists(input_list: List[int]) -> List[int]:\n    \"\"\"Given a list of integers, return a list of the sums of each of the\n    consecutive sublists of integers.\n\n    >>> sum_sublists([1, 2, 3, 4])\n    [3, 5, 7, 9]\n    \"\"\"\n    # TODO: implement me\n    pass\n\n\ndef is_prime(n: int) -> bool:\n    \"\"\"Return True if n is a prime number.\n\n    >>> is_prime(2)\n    True\n    >>> is_prime(15)\n    False\n    >>> is_prime(521)\n    True\n    \"\"\"\n    # TODO: implement me\n    pass\n\n\ndef is_permutation(s1: str, s2: str) -> bool:\n    \"\"\"Return True if the characters of s1 are a permutation of the\n    characters of s2.\n\n    >>> is_permutation('act', 'cat')\n    True\n    >>> is_permut"
    },
    {
      "rank": 99,
      "score": 3.0,
      "candidate": "seen = set()\n    for num in numbers:\n        if num not in seen:\n            seen.add(num)\n    return list(seen)\n\n\ndef remove_duplicates_no_extra_space(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates_no_extra_space([1, 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\n    for i in range(len(numbers)):\n        if numbers[i] in numbers[i + 1 :]:\n            numbers.pop(i)\n    return numbers\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 100,
      "score": 3.0,
      "candidate": "seen = set()\n    return [x for x in numbers if x not in seen and not seen.add(x)]\n\n\ndef remove_duplicates_no_extra_space(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates_no_extra_space([1, 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\n    return sorted(set(numbers), key=numbers.index)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    }
  ]
}