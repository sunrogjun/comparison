{
  "timestamp": "2025-09-14T21:34:18.030806",
  "method": "improved_llm_judge",
  "judge_model": "codellama/CodeLlama-7b-Python-hf",
  "target_model": "codellama-7b",
  "dataset": "humaneval",
  "problem_number": 66,
  "total_candidates": 100,
  "results": [
    {
      "rank": 1,
      "score": 10.0,
      "candidate": "return sum(ord(x) for x in s if ord(x) > 64)\n\ndef test_digit_sum():\n    assert digitSum(\"\") == 0\n    assert digitSum(\"abAB\") == 131\n    assert digitSum(\"abcCd\") == 67\n    assert digitSum(\"helloE\") == 69\n    assert digitSum(\"woArBld\") == 131\n    assert digitSum(\"aAaaaXa\") == 153\n\nif __name__ == '__main__':\n    test_digit_sum()"
    },
    {
      "rank": 2,
      "score": 10.0,
      "candidate": "sum = 0\n    for char in s:\n        if char.isupper():\n            sum += ord(char)\n    return sum\n\nprint(digitSum(\"abAB\"))\nprint(digitSum(\"abcCd\"))\nprint(digitSum(\"helloE\"))\nprint(digitSum(\"woArBld\"))\nprint(digitSum(\"aAaaaXa\"))"
    },
    {
      "rank": 3,
      "score": 10.0,
      "candidate": "return sum(map(lambda char: ord(char), filter(lambda char: char.isupper(), s)))"
    },
    {
      "rank": 4,
      "score": 10.0,
      "candidate": "total = 0\n    for char in s:\n        if char.isupper():\n            total += ord(char)\n    return total"
    },
    {
      "rank": 5,
      "score": 10.0,
      "candidate": "# return sum([ord(i) for i in s if i.isupper()])\n    return sum([ord(i) for i in s if i.isupper()])\n\n\nif __name__ == '__main__':\n    print(digitSum(\"abAB\"))"
    },
    {
      "rank": 6,
      "score": 10.0,
      "candidate": "# s = s.upper()\n    # s = s.replace(\" \", \"\")\n    # s = s.replace(\"\", \"\")\n    # s = s.replace(\"\", \"\")\n    # s = s.replace(\"\", \"\")\n    # s = s.replace(\"\", \"\")\n    # s = s.replace(\"\", \"\")\n    # s = s.replace(\"\", \"\")\n    # s = s.replace(\"\", \"\")\n    # s = s.replace(\"\", \"\")\n    # s = s.replace(\"\", \"\")\n    # s = s.replace(\"\", \"\")\n    # s = s.replace(\"\", \"\")\n    # s = s.replace(\"\", \"\")\n    # s = s.replace(\"\", \"\")\n    # s = s.replace(\"\", \"\")\n    # s = s.replace(\"\", \"\")\n    # s = s.replace(\"\", \"\")\n    # s = s.replace(\"\", \"\")\n    # s = s.replace(\"\", \"\")\n    # s = s.replace(\"\", \"\")\n    # s = s.replace(\"\", \"\")\n    # s = s.replace(\"\", \"\")\n    # s = s.replace(\"\", \"\")\n    # s = s.replace(\"\", \"\")\n    # s = s.replace(\"\", \"\")\n    # s = s.replace(\"\", \"\")\n    # s = s.replace(\"\", \"\")\n    # s = s.replace(\"\", \"\")\n    # s = s.replace(\"\", \"\")\n    # s = s.replace(\"\", \"\")\n    # s = s.replace(\"\", \"\")\n    # s = s.replace(\"\", \"\")\n    # s = s.replace(\"\", \"\")\n    # s = s.replace(\"\", \"\")\n    # s = s.replace(\"\", \"\")\n    # s = s.replace(\"\", \"\")\n    # s = s.replace(\"\", \"\")\n    # s = s.replace(\"\", \"\")\n    # s = s.replace(\"\", \"\")\n    # s = s.replace(\"\", \"\")\n    # s = s.replace(\"\", \"\")\n    # s = s.replace(\"\", \"\")\n    # s = s.replace(\"\", \"\")\n    # s = s.replace(\"\", \"\")\n    # s = s.replace(\"\", \"\")\n    # s = s.replace(\""
    },
    {
      "rank": 7,
      "score": 10.0,
      "candidate": "sum = 0\n    for i in range(len(s)):\n        if ord(s[i]) > 64 and ord(s[i]) < 91:\n            sum += ord(s[i])\n\n    return sum\n\n\nprint(digitSum(\"\"))\nprint(digitSum(\"abAB\"))\nprint(digitSum(\"abcCd\"))\nprint(digitSum(\"helloE\"))\nprint(digitSum(\"woArBld\"))\nprint(digitSum(\"aAaaaXa\"))"
    },
    {
      "rank": 8,
      "score": 10.0,
      "candidate": "return sum(ord(c) for c in s if c.isupper())\n\n\nprint(digitSum(\"aAaaaXa\"))"
    },
    {
      "rank": 9,
      "score": 10.0,
      "candidate": "# Write your code here\n    return sum(ord(i) for i in s if i.isupper())\n\n\nif __name__ == \"__main__\":\n    s = input(\"Enter the string: \")\n    print(digitSum(s))"
    },
    {
      "rank": 10,
      "score": 10.0,
      "candidate": "sum = 0\n    for i in range(len(s)):\n        if ord(s[i]) >= 65 and ord(s[i]) <= 90:\n            sum += ord(s[i])\n    return sum\n\ndef digitSum2(s):\n    return sum(ord(c) for c in s if 'A' <= c <= 'Z')\n\ndef digitSum3(s):\n    return sum(map(ord, filter(str.isupper, s)))"
    },
    {
      "rank": 11,
      "score": 10.0,
      "candidate": "# return sum(ord(i) for i in s if ord(i) > 64 and ord(i) < 91)\n    return sum(ord(i) for i in s if 64 < ord(i) < 91)"
    },
    {
      "rank": 12,
      "score": 10.0,
      "candidate": "if len(s) == 0:\n        return 0\n    elif s[0].isupper():\n        return ord(s[0]) + digitSum(s[1:])\n    else:\n        return digitSum(s[1:])"
    },
    {
      "rank": 13,
      "score": 10.0,
      "candidate": "total = 0\n    for i in s:\n        if i.isupper():\n            total += ord(i)\n    return total\n\n\ndef digitSum2(s):\n    \"\"\"Task\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n    \"\"\"\n    return sum([ord(i) for i in s if i.isupper()])\n\n\ndef digitSum3(s):\n    \"\"\"Task\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n    \"\"\"\n    return sum(ord(i) for i in s if i.isupper())"
    },
    {
      "rank": 14,
      "score": 10.0,
      "candidate": "return sum(ord(c) for c in s if c.isupper())\n\n\nif __name__ == '__main__':\n    print(digitSum(\"\"))\n    print(digitSum(\"abAB\"))\n    print(digitSum(\"abcCd\"))\n    print(digitSum(\"helloE\"))\n    print(digitSum(\"woArBld\"))\n    print(digitSum(\"aAaaaXa\"))"
    },
    {
      "rank": 15,
      "score": 10.0,
      "candidate": "total = 0\n    for i in s:\n        if 64 < ord(i) < 91:\n            total += ord(i)\n    return total"
    },
    {
      "rank": 16,
      "score": 10.0,
      "candidate": "sum = 0\n    for char in s:\n        if char.isupper():\n            sum += ord(char)\n    return sum\n\n\nif __name__ == '__main__':\n    print(digitSum(\"\"))\n    print(digitSum(\"abAB\"))\n    print(digitSum(\"abcCd\"))\n    print(digitSum(\"helloE\"))\n    print(digitSum(\"woArBld\"))\n    print(digitSum(\"aAaaaXa\"))"
    },
    {
      "rank": 17,
      "score": 10.0,
      "candidate": "# s = \"\".join(x for x in s if x.isupper())\n    # s = \"\".join(s.split())\n    # return sum(ord(x) for x in s)\n    return sum(ord(x) for x in s if x.isupper())\n\nif __name__ == '__main__':\n    print(digitSum(\"\"))\n    print(digitSum(\"abAB\"))\n    print(digitSum(\"abcCd\"))\n    print(digitSum(\"helloE\"))\n    print(digitSum(\"woArBld\"))\n    print(digitSum(\"aAaaaXa\"))"
    },
    {
      "rank": 18,
      "score": 10.0,
      "candidate": "# return sum([ord(c) for c in s if c.isupper()])\n    total = 0\n    for c in s:\n        if c.isupper():\n            total += ord(c)\n    return total"
    },
    {
      "rank": 19,
      "score": 10.0,
      "candidate": "return sum([ord(x) for x in s if x.isupper()])\n\nif __name__ == '__main__':\n    print(digitSum(\"\")) # => 0\n    print(digitSum(\"abAB\")) # => 131\n    print(digitSum(\"abcCd\")) # => 67\n    print(digitSum(\"helloE\")) # => 69\n    print(digitSum(\"woArBld\")) # => 131\n    print(digitSum(\"aAaaaXa\")) # => 153"
    },
    {
      "rank": 20,
      "score": 10.0,
      "candidate": "# return sum(map(ord, filter(str.isupper, s)))\n    return sum(map(ord, filter(str.isupper, s)))\n\n\n# print(digitSum(\"\"))\n# print(digitSum(\"abAB\"))\n# print(digitSum(\"abcCd\"))\n# print(digitSum(\"helloE\"))\n# print(digitSum(\"woArBld\"))\n# print(digitSum(\"aAaaaXa\"))\n# print(digitSum(\"aAaaaXa\"))\n# print(digitSum(\"aAaaaXa\"))\n# print(digitSum(\"aAaaaXa\"))\n# print(digitSum(\"aAaaaXa\"))\n# print(digitSum(\"aAaaaXa\"))\n# print(digitSum(\"aAaaaXa\"))\n# print(digitSum(\"aAaaaXa\"))\n# print(digitSum(\"aAaaaXa\"))\n# print(digitSum(\"aAaaaXa\"))\n# print(digitSum(\"aAaaaXa\"))\n# print(digitSum(\"aAaaaXa\"))\n# print(digitSum(\"aAaaaXa\"))\n# print(digitSum(\"aAaaaXa\"))\n# print(digitSum(\"aAaaaXa\"))\n# print(digitSum(\"aAaaaXa\"))\n# print(digitSum(\"aAaaaXa\"))\n# print(digitSum(\"aAaaaXa\"))\n# print(digitSum(\"aAaaaXa\"))\n# print(digitSum(\"aAaaaXa\"))\n# print(digitSum(\"aAaaaXa\"))\n# print(digitSum(\"aAaaaXa\"))\n# print(digitSum(\"aAaaaXa\"))\n# print(digitSum(\"aAaaaXa\"))\n# print(digitSum(\"aAaaaXa\"))\n# print(digitSum(\"aAaaaXa\"))\n# print(digitSum(\"aAaaaXa\"))\n# print(digitSum(\"aAaaaXa\"))\n# print(digitSum(\"aAaaaXa\"))\n# print(digitSum(\"aAaaaXa\"))\n# print"
    },
    {
      "rank": 21,
      "score": 10.0,
      "candidate": "# Take a string as input and returns the sum of the upper characters only'\n    # ASCII codes.\n    # Examples:\n    # digitSum(\"\") => 0\n    # digitSum(\"abAB\") => 131\n    # digitSum(\"abcCd\") => 67\n    # digitSum(\"helloE\") => 69\n    # digitSum(\"woArBld\") => 131\n    # digitSum(\"aAaaaXa\") => 153\n\n    # Create a function that takes a string as input and returns the sum of the upper characters only'\n    # ASCII codes.\n    # Examples:\n    # digitSum(\"\") => 0\n    # digitSum(\"abAB\") => 131\n    # digitSum(\"abcCd\") => 67\n    # digitSum(\"helloE\") => 69\n    # digitSum(\"woArBld\") => 131\n    # digitSum(\"aAaaaXa\") => 153\n\n    # Create a function that takes a string as input and returns the sum of the upper characters only'\n    # ASCII codes.\n    # Examples:\n    # digitSum(\"\") => 0\n    # digitSum(\"abAB\") => 131\n    # digitSum(\"abcCd\") => 67\n    # digitSum(\"helloE\") => 69\n    # digitSum(\"woArBld\") => 131\n    # digitSum(\"aAaaaXa\") => 153\n\n    # Create a function that takes a string as input and returns the sum of the upper characters only'\n    # ASCII codes.\n    # Examples:\n    # digitSum(\"\") => 0\n    # digitSum(\"abAB\") => 131\n    # digitSum(\"abcCd\") => 67\n    # digitSum(\"helloE\") => 69\n    # digitSum(\"woArBld\") => 131\n    # digitSum(\"aAaaaXa\") => 153\n\n    # Create a function that takes a string as input and returns the sum of the upper characters only'\n    # ASCII codes.\n    # Examples:"
    },
    {
      "rank": 22,
      "score": 10.0,
      "candidate": "return sum([ord(i) for i in s if i.isupper()])"
    },
    {
      "rank": 23,
      "score": 10.0,
      "candidate": "sum = 0\n    for i in s:\n        if i.isupper():\n            sum += ord(i)\n    return sum\n\n\nprint(digitSum(\"\"))\nprint(digitSum(\"abAB\"))\nprint(digitSum(\"abcCd\"))\nprint(digitSum(\"helloE\"))\nprint(digitSum(\"woArBld\"))\nprint(digitSum(\"aAaaaXa\"))"
    },
    {
      "rank": 24,
      "score": 10.0,
      "candidate": "sum = 0\n    for i in s:\n        if ord(i) > 64 and ord(i) < 91:\n            sum += ord(i)\n    return sum\n\nprint(digitSum(\"abAB\"))\nprint(digitSum(\"abcCd\"))\nprint(digitSum(\"helloE\"))\nprint(digitSum(\"woArBld\"))\nprint(digitSum(\"aAaaaXa\"))"
    },
    {
      "rank": 25,
      "score": 10.0,
      "candidate": "sum = 0\n    for i in s:\n        if i.isupper():\n            sum += ord(i)\n    return sum\n\n\nif __name__ == '__main__':\n    print(digitSum(\"\"))\n    print(digitSum(\"abAB\"))\n    print(digitSum(\"abcCd\"))\n    print(digitSum(\"helloE\"))\n    print(digitSum(\"woArBld\"))\n    print(digitSum(\"aAaaaXa\"))"
    },
    {
      "rank": 26,
      "score": 10.0,
      "candidate": "total = 0\n    for char in s:\n        if char.isupper():\n            total += ord(char)\n    return total"
    },
    {
      "rank": 27,
      "score": 10.0,
      "candidate": "return sum([ord(x) for x in s if x.isupper()])"
    },
    {
      "rank": 28,
      "score": 10.0,
      "candidate": "# 1. Take an input string\n    # 2. Iterate over the string and sum the upper characters\n    # 3. Return the sum\n    # 4. If the string is empty, return 0\n    if s == \"\":\n        return 0\n    total = 0\n    for char in s:\n        if ord(char) > 64:\n            total += ord(char)\n    return total\n\n\ndef digitSum(s):\n    \"\"\"Task\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n    \"\"\"\n    # 1. Take an input string\n    # 2. Iterate over the string and sum the upper characters\n    # 3. Return the sum\n    # 4. If the string is empty, return 0\n    if s == \"\":\n        return 0\n    total = 0\n    for char in s:\n        if ord(char) > 64:\n            total += ord(char)\n    return total\n\n\ndef digitSum(s):\n    \"\"\"Task\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n    \"\"\"\n    # 1. Take an input string\n    # 2. Iterate over the string and sum the upper characters\n    # 3. Return the sum\n    # 4. If the string is empty, return 0\n    if s == \"\":\n        return"
    },
    {
      "rank": 29,
      "score": 10.0,
      "candidate": "return sum([ord(x) for x in s if x.isupper()])\n\n\nif __name__ == '__main__':\n    print(digitSum(\"\"))\n    print(digitSum(\"abAB\"))\n    print(digitSum(\"abcCd\"))\n    print(digitSum(\"helloE\"))\n    print(digitSum(\"woArBld\"))\n    print(digitSum(\"aAaaaXa\"))"
    },
    {
      "rank": 30,
      "score": 9.993251387631034,
      "candidate": "return sum([ord(c) for c in s if c.isupper()])"
    },
    {
      "rank": 31,
      "score": 9.982086980445024,
      "candidate": "sum = 0\n    for i in s:\n        if ord(i) >= 65 and ord(i) <= 90:\n            sum += ord(i) - 64\n        else:\n            continue\n    return sum\n\n\ndef main():\n    print(digitSum(\"\"))\n    print(digitSum(\"abAB\"))\n    print(digitSum(\"abcCd\"))\n    print(digitSum(\"helloE\"))\n    print(digitSum(\"woArBld\"))\n    print(digitSum(\"aAaaaXa\"))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 32,
      "score": 9.907170511668092,
      "candidate": "sum = 0\n    for i in s:\n        if 65 <= ord(i) <= 90:\n            sum += ord(i)\n    return sum\n\n\nif __name__ == '__main__':\n    print(digitSum(\"\"))\n    print(digitSum(\"abAB\"))\n    print(digitSum(\"abcCd\"))\n    print(digitSum(\"helloE\"))\n    print(digitSum(\"woArBld\"))\n    print(digitSum(\"aAaaaXa\"))"
    },
    {
      "rank": 33,
      "score": 9.890164056081243,
      "candidate": "return sum([ord(x) for x in s if ord(x) >= 65 and ord(x) <= 90])"
    },
    {
      "rank": 34,
      "score": 9.882923312638333,
      "candidate": "# Write your code here\n    return sum([ord(x) for x in s if x.isupper()])"
    },
    {
      "rank": 35,
      "score": 9.854153125103362,
      "candidate": "# return sum(ord(c) for c in s if c.isupper())\n    return sum(ord(c) for c in s if c.isupper())\n\n\ndef main():\n    print(digitSum(\"\"))\n    print(digitSum(\"abAB\"))\n    print(digitSum(\"abcCd\"))\n    print(digitSum(\"helloE\"))\n    print(digitSum(\"woArBld\"))\n    print(digitSum(\"aAaaaXa\"))\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 36,
      "score": 9.850496324767066,
      "candidate": "sum = 0\n    for char in s:\n        if ord(char) in range(65, 91):\n            sum += ord(char)\n    return sum\n\n\nprint(digitSum(\"\"))\nprint(digitSum(\"abAB\"))\nprint(digitSum(\"abcCd\"))\nprint(digitSum(\"helloE\"))\nprint(digitSum(\"woArBld\"))\nprint(digitSum(\"aAaaaXa\"))"
    },
    {
      "rank": 37,
      "score": 9.849448152205355,
      "candidate": "# Take input and store in variable inputString\n    inputString = s\n\n    # Empty string\n    if inputString == \"\":\n        return 0\n\n    # Sum all the upper case letters' ASCII values\n    return sum([ord(char) for char in inputString if char.isupper()])\n\nprint(digitSum(\"\"))\nprint(digitSum(\"abAB\"))\nprint(digitSum(\"abcCd\"))\nprint(digitSum(\"helloE\"))\nprint(digitSum(\"woArBld\"))\nprint(digitSum(\"aAaaaXa\"))"
    },
    {
      "rank": 38,
      "score": 9.807458859791842,
      "candidate": "return sum([ord(char) for char in s if char.isupper()])\n\n\nif __name__ == '__main__':\n    print(digitSum(\"\"))\n    print(digitSum(\"abAB\"))\n    print(digitSum(\"abcCd\"))\n    print(digitSum(\"helloE\"))\n    print(digitSum(\"woArBld\"))\n    print(digitSum(\"aAaaaXa\"))"
    },
    {
      "rank": 39,
      "score": 9.768291153593768,
      "candidate": "return sum([ord(i) for i in s if i.isupper()])"
    },
    {
      "rank": 40,
      "score": 9.76713512321487,
      "candidate": "return sum([ord(x) for x in s if x.isupper()])"
    },
    {
      "rank": 41,
      "score": 9.765262807032524,
      "candidate": "sum = 0\n    for char in s:\n        if char.isupper():\n            sum += ord(char)\n    return sum\n\nif __name__ == '__main__':\n    print(digitSum(\"\"))\n    print(digitSum(\"abAB\"))\n    print(digitSum(\"abcCd\"))\n    print(digitSum(\"helloE\"))\n    print(digitSum(\"woArBld\"))\n    print(digitSum(\"aAaaaXa\"))"
    },
    {
      "rank": 42,
      "score": 9.760412881077356,
      "candidate": "sum = 0\n    for i in s:\n        if i.isupper():\n            sum += ord(i)\n    return sum\n\nif __name__ == '__main__':\n    print(digitSum(\"\"))\n    print(digitSum(\"abAB\"))\n    print(digitSum(\"abcCd\"))\n    print(digitSum(\"helloE\"))\n    print(digitSum(\"woArBld\"))\n    print(digitSum(\"aAaaaXa\"))"
    },
    {
      "rank": 43,
      "score": 9.749121478207732,
      "candidate": "return sum([ord(x) for x in s if x.isupper()])\n\n\ndef digitSum(s):\n    \"\"\"Task\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n    \"\"\"\n    return sum([ord(x) for x in s if x.isupper()])\n\n\ndef digitSum(s):\n    \"\"\"Task\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n    \"\"\"\n    return sum([ord(x) for x in s if x.isupper()])\n\n\ndef digitSum(s):\n    \"\"\"Task\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n    \"\"\"\n    return sum([ord(x) for x in s if x.isupper()])\n\n\ndef digitSum(s):\n    \"\"\"Task\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") =>"
    },
    {
      "rank": 44,
      "score": 9.740864890863175,
      "candidate": "# Write your code here.\n    s = s.upper()\n    sum = 0\n    for i in s:\n        if ord(i) >= 65 and ord(i) <= 90:\n            sum += ord(i)\n    return sum\n\n\nprint(digitSum(\"abAB\"))\nprint(digitSum(\"abcCd\"))\nprint(digitSum(\"helloE\"))\nprint(digitSum(\"woArBld\"))\nprint(digitSum(\"aAaaaXa\"))"
    },
    {
      "rank": 45,
      "score": 9.72780863773741,
      "candidate": "total = 0\n    for i in s:\n        if i.isupper():\n            total += ord(i)\n    return total\n\n\nprint(digitSum(\"\"))\nprint(digitSum(\"abAB\"))\nprint(digitSum(\"abcCd\"))\nprint(digitSum(\"helloE\"))\nprint(digitSum(\"woArBld\"))\nprint(digitSum(\"aAaaaXa\"))"
    },
    {
      "rank": 46,
      "score": 9.718856235379514,
      "candidate": "return sum(ord(c) for c in s if c.isupper())\n\n\nif __name__ == '__main__':\n    print(digitSum(\"\")) # 0\n    print(digitSum(\"abAB\")) # 131\n    print(digitSum(\"abcCd\")) # 67\n    print(digitSum(\"helloE\")) # 69\n    print(digitSum(\"woArBld\")) # 131\n    print(digitSum(\"aAaaaXa\")) # 153"
    },
    {
      "rank": 47,
      "score": 9.699680655040597,
      "candidate": "# return sum([ord(c) for c in s if c.isupper()])\n    return sum(ord(c) for c in s if c.isupper())\n\nif __name__ == '__main__':\n    print(digitSum(\"aAaaaXa\"))"
    },
    {
      "rank": 48,
      "score": 9.699146693885302,
      "candidate": "sum = 0\n    for i in s:\n        if i.isupper():\n            sum += ord(i)\n    return sum"
    },
    {
      "rank": 49,
      "score": 9.677440122697439,
      "candidate": "# Write your code here\n    return sum(ord(c) for c in s if c.isupper())\n\n\nprint(digitSum(\"\"))\nprint(digitSum(\"abAB\"))\nprint(digitSum(\"abcCd\"))\nprint(digitSum(\"helloE\"))\nprint(digitSum(\"woArBld\"))\nprint(digitSum(\"aAaaaXa\"))"
    },
    {
      "rank": 50,
      "score": 9.661538999847021,
      "candidate": "#print(s)\n    return sum([ord(char) for char in s if char.isupper()])\n\n\ndef digitSum2(s):\n    return sum(ord(c) for c in s if c.isupper())\n\n\nif __name__ == '__main__':\n    print(digitSum(\"\"))\n    print(digitSum(\"abAB\"))\n    print(digitSum(\"abcCd\"))\n    print(digitSum(\"helloE\"))\n    print(digitSum(\"woArBld\"))\n    print(digitSum(\"aAaaaXa\"))\n    print(digitSum2(\"\"))\n    print(digitSum2(\"abAB\"))\n    print(digitSum2(\"abcCd\"))\n    print(digitSum2(\"helloE\"))\n    print(digitSum2(\"woArBld\"))\n    print(digitSum2(\"aAaaaXa\"))"
    },
    {
      "rank": 51,
      "score": 9.640077895802646,
      "candidate": "return sum(map(lambda x: ord(x), filter(lambda x: x.isupper(), s)))\n\nprint(digitSum(\"\"))\nprint(digitSum(\"abAB\"))\nprint(digitSum(\"abcCd\"))\nprint(digitSum(\"helloE\"))\nprint(digitSum(\"woArBld\"))\nprint(digitSum(\"aAaaaXa\"))"
    },
    {
      "rank": 52,
      "score": 9.595753198553407,
      "candidate": "sum = 0\n    for i in s:\n        if 65 <= ord(i) <= 90:\n            sum += ord(i)\n    return sum"
    },
    {
      "rank": 53,
      "score": 9.446832512996986,
      "candidate": "total = 0\n    for char in s:\n        if char.isupper():\n            total += ord(char)\n    return total\n\n\nprint(digitSum(''))\nprint(digitSum('abAB'))\nprint(digitSum('abcCd'))\nprint(digitSum('helloE'))\nprint(digitSum('woArBld'))\nprint(digitSum('aAaaaXa'))"
    },
    {
      "rank": 54,
      "score": 9.42450321128885,
      "candidate": "# YOUR CODE HERE\n    sum = 0\n    for c in s:\n        if c.isupper():\n            sum += ord(c)\n    return sum\n\nprint(digitSum(\"\"))\nprint(digitSum(\"abAB\"))\nprint(digitSum(\"abcCd\"))\nprint(digitSum(\"helloE\"))\nprint(digitSum(\"woArBld\"))\nprint(digitSum(\"aAaaaXa\"))"
    },
    {
      "rank": 55,
      "score": 9.401896687959665,
      "candidate": "return sum(ord(char) for char in s if char.isupper())\n\n\ndef digitSum(s):\n    \"\"\"Task\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n    \"\"\"\n    return sum(ord(char) for char in s if char.isupper())"
    },
    {
      "rank": 56,
      "score": 9.389578175014488,
      "candidate": "result = 0\n    for i in s:\n        if i.isupper():\n            result += ord(i)\n    return result\n\nif __name__ == '__main__':\n    print(digitSum(input()))"
    },
    {
      "rank": 57,
      "score": 9.293848149332355,
      "candidate": "pass\n\n\n# TESTS\nassert digitSum(\"\") == 0\nassert digitSum(\"abAB\") == 131\nassert digitSum(\"abcCd\") == 67\nassert digitSum(\"helloE\") == 69\nassert digitSum(\"woArBld\") == 131\nassert digitSum(\"aAaaaXa\") == 153"
    },
    {
      "rank": 58,
      "score": 9.287625906893272,
      "candidate": "return sum([ord(i) for i in s if i.isupper()])\n\n\nif __name__ == '__main__':\n    print(digitSum(\"\"))\n    print(digitSum(\"abAB\"))\n    print(digitSum(\"abcCd\"))\n    print(digitSum(\"helloE\"))\n    print(digitSum(\"woArBld\"))\n    print(digitSum(\"aAaaaXa\"))"
    },
    {
      "rank": 59,
      "score": 9.260739004816287,
      "candidate": "return sum(ord(x) for x in s if x.isupper())"
    },
    {
      "rank": 60,
      "score": 9.137541083743484,
      "candidate": "return sum(ord(x) for x in s if x.isupper())\n\n\nif __name__ == '__main__':\n    print(digitSum(\"\"))\n    print(digitSum(\"abAB\"))\n    print(digitSum(\"abcCd\"))\n    print(digitSum(\"helloE\"))\n    print(digitSum(\"woArBld\"))\n    print(digitSum(\"aAaaaXa\"))"
    },
    {
      "rank": 61,
      "score": 9.118479922318633,
      "candidate": "total = 0\n    for char in s:\n        if char.isupper():\n            total += ord(char)\n    return total"
    },
    {
      "rank": 62,
      "score": 9.0433598776711,
      "candidate": "return sum([ord(c) for c in s if c.isupper()])\n\n\nif __name__ == '__main__':\n    print(digitSum(\"\"))\n    print(digitSum(\"abAB\"))\n    print(digitSum(\"abcCd\"))\n    print(digitSum(\"helloE\"))\n    print(digitSum(\"woArBld\"))\n    print(digitSum(\"aAaaaXa\"))"
    },
    {
      "rank": 63,
      "score": 9.006215542699554,
      "candidate": "return sum(map(lambda x: ord(x), filter(lambda x: ord(x) > 64, s)))\n\n\ndef digitSum2(s):\n    \"\"\"Task\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n    \"\"\"\n    return sum(ord(x) for x in s if ord(x) > 64)\n\n\nif __name__ == '__main__':\n    print(digitSum(\"abAB\"))\n    print(digitSum(\"abcCd\"))\n    print(digitSum(\"helloE\"))\n    print(digitSum(\"woArBld\"))\n    print(digitSum(\"aAaaaXa\"))"
    },
    {
      "rank": 64,
      "score": 8.690127447955128,
      "candidate": "return sum(map(ord, filter(str.isupper, s)))\n\nif __name__ == '__main__':\n    print(digitSum(\"\"))\n    print(digitSum(\"abAB\"))\n    print(digitSum(\"abcCd\"))\n    print(digitSum(\"helloE\"))\n    print(digitSum(\"woArBld\"))\n    print(digitSum(\"aAaaaXa\"))"
    },
    {
      "rank": 65,
      "score": 8.444444444444445,
      "candidate": "return sum([ord(c) for c in s if c.isupper()])"
    },
    {
      "rank": 66,
      "score": 8.444444444444445,
      "candidate": "return sum([ord(c) for c in s if c.isupper()])\n\n\nprint(digitSum(\"\"))\nprint(digitSum(\"abAB\"))\nprint(digitSum(\"abcCd\"))\nprint(digitSum(\"helloE\"))\nprint(digitSum(\"woArBld\"))\nprint(digitSum(\"aAaaaXa\"))"
    },
    {
      "rank": 67,
      "score": 8.444444444444445,
      "candidate": "return sum([ord(x) for x in s if 'A' <= x <= 'Z'])\n\n\nif __name__ == '__main__':\n    print(digitSum(\"\"))\n    print(digitSum(\"abAB\"))\n    print(digitSum(\"abcCd\"))\n    print(digitSum(\"helloE\"))\n    print(digitSum(\"woArBld\"))\n    print(digitSum(\"aAaaaXa\"))"
    },
    {
      "rank": 68,
      "score": 8.444444444444445,
      "candidate": "# return sum([ord(s) for s in s if s.isupper()])\n    return sum(ord(s) for s in s if s.isupper())"
    },
    {
      "rank": 69,
      "score": 8.444444444444445,
      "candidate": "return sum([ord(c) for c in s if c.isupper()])"
    },
    {
      "rank": 70,
      "score": 8.444444444444445,
      "candidate": "return sum([ord(c) for c in s if c.isupper()])\n\nprint(digitSum(\"\"))\nprint(digitSum(\"abAB\"))\nprint(digitSum(\"abcCd\"))\nprint(digitSum(\"helloE\"))\nprint(digitSum(\"woArBld\"))\nprint(digitSum(\"aAaaaXa\"))"
    },
    {
      "rank": 71,
      "score": 8.444444444444445,
      "candidate": "if s == \"\":\n        return 0\n    else:\n        s = s.upper()\n        return sum(ord(i) for i in s if i.isupper())\n\n\nif __name__ == \"__main__\":\n    print(digitSum(\"\"))\n    print(digitSum(\"abAB\"))\n    print(digitSum(\"abcCd\"))\n    print(digitSum(\"helloE\"))\n    print(digitSum(\"woArBld\"))\n    print(digitSum(\"aAaaaXa\"))"
    },
    {
      "rank": 72,
      "score": 8.444444444444445,
      "candidate": "return sum(ord(char) for char in s if char.isupper())\n\n\nif __name__ == '__main__':\n    print(digitSum(\"\"))\n    print(digitSum(\"abAB\"))\n    print(digitSum(\"abcCd\"))\n    print(digitSum(\"helloE\"))\n    print(digitSum(\"woArBld\"))\n    print(digitSum(\"aAaaaXa\"))"
    },
    {
      "rank": 73,
      "score": 8.444444444444445,
      "candidate": "sum = 0\n    for i in s:\n        if i.isupper():\n            sum += ord(i)\n    return sum\n\nif __name__ == '__main__':\n    print(digitSum(\"\"))\n    print(digitSum(\"abAB\"))\n    print(digitSum(\"abcCd\"))\n    print(digitSum(\"helloE\"))\n    print(digitSum(\"woArBld\"))\n    print(digitSum(\"aAaaaXa\"))"
    },
    {
      "rank": 74,
      "score": 8.444444444444445,
      "candidate": "return sum([ord(x) for x in s if x.isupper()])"
    },
    {
      "rank": 75,
      "score": 8.444444444444445,
      "candidate": "return sum([ord(c) for c in s if c.isupper()])\n\nprint(digitSum(\"abAB\"))\nprint(digitSum(\"abcCd\"))\nprint(digitSum(\"helloE\"))\nprint(digitSum(\"woArBld\"))\nprint(digitSum(\"aAaaaXa\"))"
    },
    {
      "rank": 76,
      "score": 8.444444444444445,
      "candidate": "sum = 0\n    for char in s:\n        if char.isupper():\n            sum += ord(char)\n    return sum"
    },
    {
      "rank": 77,
      "score": 8.444444444444445,
      "candidate": "s = s.upper()\n    result = 0\n    for i in s:\n        if ord(i) >= 65 and ord(i) <= 90:\n            result += ord(i)\n    return result\n\nprint(digitSum(\"abAB\"))\nprint(digitSum(\"abcCd\"))\nprint(digitSum(\"helloE\"))\nprint(digitSum(\"woArBld\"))\nprint(digitSum(\"aAaaaXa\"))"
    },
    {
      "rank": 78,
      "score": 8.444444444444445,
      "candidate": "# Please print out this line for us\n    print(sum(map(lambda x: ord(x.upper()), list(s))))\n\n\nif __name__ == '__main__':\n    digitSum(input())"
    },
    {
      "rank": 79,
      "score": 3.322442729162742,
      "candidate": "# s = \"\".join(s)\n    # s = [i for i in s if i.isupper()]\n    # return sum(s)\n\n    return sum(ord(c) for c in s if c.isupper())\n\n\ndef digitSum2(s):\n    \"\"\"Task\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n    \"\"\"\n    # s = \"\".join(s)\n    # s = [i for i in s if i.isupper()]\n    # return sum(s)\n\n    return sum(ord(c) for c in s if c.isupper())\n\n\ndef digitSum3(s):\n    \"\"\"Task\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n    \"\"\"\n    # s = \"\".join(s)\n    # s = [i for i in s if i.isupper()]\n    # return sum(s)\n\n    return sum(ord(c) for c in s if c.isupper())\n\n\ndef digitSum4(s):\n    \"\"\"Task\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\""
    },
    {
      "rank": 80,
      "score": 3.298372806285581,
      "candidate": "# 1st-way\n    # return sum([ord(c) for c in s if c.isupper()])\n\n    # 2nd-way\n    # return sum(ord(c) for c in s if c.isupper())\n\n    # 3rd-way\n    return sum(ord(c) for c in s if c.isupper())\n\n\nif __name__ == '__main__':\n    print(\"Example:\")\n    print(digitSum(''))\n\n    # These \"asserts\" are used for self-checking and not for an auto-testing\n    assert digitSum('') == 0\n    assert digitSum('abAB') == 131\n    assert digitSum('abcCd') == 67\n    assert digitSum('helloE') == 69\n    assert digitSum('woArBld') == 131\n    assert digitSum('aAaaaXa') == 153\n    print(\"Coding complete? Click 'Check' to earn cool rewards!\")"
    },
    {
      "rank": 81,
      "score": 3.2325668897681616,
      "candidate": "pass\n\n\n# Tests\ndef test_digit_sum():\n    assert digitSum(\"\") == 0\n    assert digitSum(\"abAB\") == 131\n    assert digitSum(\"abcCd\") == 67\n    assert digitSum(\"helloE\") == 69\n    assert digitSum(\"woArBld\") == 131\n    assert digitSum(\"aAaaaXa\") == 153\n\n\ntest_digit_sum()"
    },
    {
      "rank": 82,
      "score": 3.2048816262055637,
      "candidate": "# return sum(ord(c) for c in s if c.isupper())\n    total = 0\n    for c in s:\n        if c.isupper():\n            total += ord(c)\n    return total\n\ndef digitSum2(s):\n    \"\"\"Task\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n    \"\"\"\n    total = 0\n    for c in s:\n        if c.isupper():\n            total += ord(c)\n    return total\n\ndef digitSum3(s):\n    \"\"\"Task\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n    \"\"\"\n    return sum(ord(c) for c in s if c.isupper())\n\ndef digitSum4(s):\n    \"\"\"Task\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n    \"\"\"\n    total = 0\n    for c in s:\n        if c.isupper():\n            total += ord("
    },
    {
      "rank": 83,
      "score": 3.16883564041364,
      "candidate": "return sum(ord(c) for c in s if c.isupper())\n\n\ndef digitSum2(s):\n    \"\"\"Task\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum2(\"\") => 0\n        digitSum2(\"abAB\") => 131\n        digitSum2(\"abcCd\") => 67\n        digitSum2(\"helloE\") => 69\n        digitSum2(\"woArBld\") => 131\n        digitSum2(\"aAaaaXa\") => 153\n    \"\"\"\n    return sum(ord(c) for c in s if c.isupper())"
    },
    {
      "rank": 84,
      "score": 3.16246264759899,
      "candidate": "# your code here\n    return sum(ord(i) for i in s if i.isupper())\n\n\nif __name__ == '__main__':\n    #These \"asserts\" using only for self-checking and not necessary for auto-testing\n    assert digitSum('') == 0, \"Empty string\"\n    assert digitSum('abA') == 131, \"Uppercase A\"\n    assert digitSum('abB') == 130, \"Lowercase a\"\n    assert digitSum('abBcC') == 193, \"Both uppercase and lowercase\"\n    assert digitSum('abBcCa') == 203, \"Both uppercase and lowercase, plus extra letter\""
    },
    {
      "rank": 85,
      "score": 3.1193632095889123,
      "candidate": "result = 0\n    for i in range(len(s)):\n        if ord(s[i]) >= 65 and ord(s[i]) <= 90:\n            result += ord(s[i])\n    return result\n\n\ndef digitSum2(s):\n    \"\"\"Task\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n    \"\"\"\n    result = 0\n    for i in range(len(s)):\n        if s[i] >= 'A' and s[i] <= 'Z':\n            result += ord(s[i])\n    return result\n\n\ndef digitSum3(s):\n    \"\"\"Task\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n    \"\"\"\n    result = 0\n    for i in s:\n        if i >= 'A' and i <= 'Z':\n            result += ord(i)\n    return result\n\n\ndef digitSum4(s):\n    \"\"\"Task\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digit"
    },
    {
      "rank": 86,
      "score": 3.078564765732584,
      "candidate": "sum = 0\n    for char in s:\n        if ord(char) > 64 and ord(char) < 91:\n            sum += ord(char)\n    return sum\n\n\nprint(digitSum(\"abAB\"))  # => 131\nprint(digitSum(\"abcCd\"))  # => 67\nprint(digitSum(\"helloE\"))  # => 69\nprint(digitSum(\"woArBld\"))  # => 131\nprint(digitSum(\"aAaaaXa\"))  # => 153\nprint(digitSum(\"\"))  # => 0"
    },
    {
      "rank": 87,
      "score": 3.0532316997445275,
      "candidate": "sum = 0\n    for ch in s:\n        if 'A' <= ch <= 'Z':\n            sum += ord(ch) - ord('A') + 1\n    return sum\n\n\ndef test_digit_sum():\n    assert digitSum('') == 0\n    assert digitSum('abAB') == 131\n    assert digitSum('abcCd') == 67\n    assert digitSum('helloE') == 69\n    assert digitSum('woArBld') == 131\n    assert digitSum('aAaaaXa') == 153"
    },
    {
      "rank": 88,
      "score": 2.9841577732523263,
      "candidate": "result = 0\n    for char in s:\n        if char.isupper():\n            result += ord(char)\n    return result\n\n\ndef digitSum2(s):\n    return sum([ord(c) for c in s if c.isupper()])\n\n\nif __name__ == '__main__':\n    print(digitSum2(\"aAaaaXa\"))"
    },
    {
      "rank": 89,
      "score": 2.974557377874587,
      "candidate": "return sum([ord(char) for char in s if char.isupper()])\n\n\ndef digitSum2(s):\n    \"\"\"Task\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n    \"\"\"\n\n    return sum([ord(char) for char in s if char in 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'])\n\n\ndef digitSum3(s):\n    \"\"\"Task\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n    \"\"\"\n\n    return sum(ord(char) for char in s if char.isupper())\n\n\nif __name__ == '__main__':\n    print(digitSum(''))\n    print(digitSum('abAB'))\n    print(digitSum('abcCd'))\n    print(digitSum('helloE'))\n    print(digitSum('woArBld'))\n    print(digitSum('aAaaaXa'))\n    print(digitSum('Abc'))\n    print(digitSum('Abc'))"
    },
    {
      "rank": 90,
      "score": 2.9695818537423393,
      "candidate": "# 1st-way\n    # return sum(ord(i) for i in s if i.isupper())\n\n    # 2nd-way\n    return sum(ord(i) for i in s if 65 <= ord(i) <= 90)\n\n\nif __name__ == '__main__':\n    print(\"Example:\")\n    print(digitSum(\"\"))\n\n    # These \"asserts\" are used for self-checking and not for an auto-testing\n    assert digitSum(\"\") == 0\n    assert digitSum(\"abAB\") == 131\n    assert digitSum(\"abcCd\") == 67\n    assert digitSum(\"helloE\") == 69\n    assert digitSum(\"woArBld\") == 131\n    assert digitSum(\"aAaaaXa\") == 153\n    print(\"Coding complete? Click 'Check' to earn cool rewards!\")"
    },
    {
      "rank": 91,
      "score": 2.950329213892962,
      "candidate": "# create an empty sum\n    sum = 0\n\n    # loop through each character\n    for char in s:\n        # if the character is uppercase\n        if char.isupper():\n            # add its ASCII code to the sum\n            sum += ord(char)\n\n    return sum\n\n\ndef digitSum_2(s):\n    return sum(ord(c) for c in s if c.isupper())\n\n\n# TESTS\n# store the function arguments and results in a list\ntest_cases = [\n    [\"\", 0],\n    [\"abAB\", 131],\n    [\"abcCd\", 67],\n    [\"helloE\", 69],\n    [\"woArBld\", 131],\n    [\"aAaaaXa\", 153],\n    [\"aAaaaXa\", 153],\n]\n\n# create a loop that test the function with every set of arguments\nfor test_case in test_cases:\n    assert digitSum(test_case[0]) == test_case[1], test_case[0]\n\n# store the function arguments and results in a list\ntest_cases_2 = [\n    [\"\", 0],\n    [\"abAB\", 131],\n    [\"abcCd\", 67],\n    [\"helloE\", 69],\n    [\"woArBld\", 131],\n    [\"aAaaaXa\", 153],\n    [\"aAaaaXa\", 153],\n]\n\n# create a loop that test the function with every set of arguments\nfor test_case in test_cases_2:\n    assert digitSum_2(test_case[0]) == test_case[1], test_case[0]"
    },
    {
      "rank": 92,
      "score": 2.9484898694711803,
      "candidate": "# 1st-way\n    # return sum([ord(x) for x in s if x.isupper()])\n\n    # 2nd-way\n    # return sum(map(ord, filter(str.isupper, s)))\n\n    # 3rd-way\n    return sum(map(ord, filter(str.isupper, s)))\n\n\nif __name__ == '__main__':\n    print(\"Example:\")\n    print(digitSum(\"\"))\n\n    # These \"asserts\" are used for self-checking and not for an auto-testing\n    assert digitSum(\"\") == 0\n    assert digitSum(\"abAB\") == 131\n    assert digitSum(\"abcCd\") == 67\n    assert digitSum(\"helloE\") == 69\n    assert digitSum(\"woArBld\") == 131\n    assert digitSum(\"aAaaaXa\") == 153\n    print(\"Coding complete? Click 'Check' to earn cool rewards!\")"
    },
    {
      "rank": 93,
      "score": 2.931973277312733,
      "candidate": "return sum([ord(x) for x in s if x.isupper()])\n\n\ndef digitSum2(s):\n    return sum([ord(x) for x in s if x.isupper()])\n\n\ndef digitSum3(s):\n    return sum([ord(x) for x in s if x.isupper()])\n\n\ndef digitSum4(s):\n    return sum([ord(x) for x in s if x.isupper()])\n\n\ndef digitSum5(s):\n    return sum([ord(x) for x in s if x.isupper()])\n\n\ndef digitSum6(s):\n    return sum([ord(x) for x in s if x.isupper()])\n\n\ndef digitSum7(s):\n    return sum([ord(x) for x in s if x.isupper()])\n\n\ndef digitSum8(s):\n    return sum([ord(x) for x in s if x.isupper()])\n\n\ndef digitSum9(s):\n    return sum([ord(x) for x in s if x.isupper()])\n\n\ndef digitSum10(s):\n    return sum([ord(x) for x in s if x.isupper()])\n\n\ndef digitSum11(s):\n    return sum([ord(x) for x in s if x.isupper()])\n\n\ndef digitSum12(s):\n    return sum([ord(x) for x in s if x.isupper()])\n\n\ndef digitSum13(s):\n    return sum([ord(x) for x in s if x.isupper()])\n\n\ndef digitSum14(s):\n    return sum([ord(x) for x in s if x.isupper()])\n\n\ndef digitSum15(s):\n    return sum([ord(x) for x in s if x.isupper()])\n\n\ndef digitSum16(s):\n    return sum([ord(x) for x in s if x.isupper()])\n\n\ndef digitSum17(s):\n    return sum([ord(x) for x in s if x.isupper()])\n\n\ndef digit"
    },
    {
      "rank": 94,
      "score": 2.898659470388847,
      "candidate": "# Return result\n    return sum([ord(x) for x in s if x.isupper()])\n\n\n# Tests\ndef test_digit_sum():\n    assert digitSum(\"\") == 0\n    assert digitSum(\"abAB\") == 131\n    assert digitSum(\"abcCd\") == 67\n    assert digitSum(\"helloE\") == 69\n    assert digitSum(\"woArBld\") == 131\n    assert digitSum(\"aAaaaXa\") == 153\n\n\n# Runner\nif __name__ == \"__main__\":\n    test_digit_sum()"
    },
    {
      "rank": 95,
      "score": 2.8153721448910196,
      "candidate": "# 1st-way\n    # return sum([ord(i) for i in s if i.isupper()])\n\n    # 2nd-way\n    # return sum([ord(i) for i in s if i >= 'A' and i <= 'Z'])\n\n    # 3rd-way\n    return sum([ord(i) for i in s if 'A' <= i <= 'Z'])\n\n\nif __name__ == '__main__':\n    # These \"asserts\" using only for self-checking and not necessary for auto-testing\n    assert digitSum(\"\") == 0, \"Zero\"\n    assert digitSum(\"abAB\") == 131, \"abAB\"\n    assert digitSum(\"abcCd\") == 67, \"abcCd\"\n    assert digitSum(\"helloE\") == 69, \"helloE\"\n    assert digitSum(\"woArBld\") == 131, \"woArBld\"\n    assert digitSum(\"aAaaaXa\") == 153, \"aAaaaXa\""
    },
    {
      "rank": 96,
      "score": 2.8002347033853336,
      "candidate": "return sum(ord(i) for i in s if ord(i) in range(65, 91))\n\n\ndef digitSum2(s):\n    return sum(ord(i) for i in s if i.isupper())\n\n\nprint(digitSum2(\"abAB\"))"
    },
    {
      "rank": 97,
      "score": 2.7771771535264267,
      "candidate": "sum = 0\n    for c in s:\n        if ord(c) >= ord('A') and ord(c) <= ord('Z'):\n            sum += ord(c)\n    return sum\n\nif __name__ == '__main__':\n    #These \"asserts\" using only for self-checking and not necessary for auto-testing\n    assert digitSum('') == 0, \"Empty string\"\n    assert digitSum('abA') == 131, \"abA\"\n    assert digitSum('aBcC') == 131, \"aBcC\"\n    assert digitSum('aBcd') == 131, \"aBcd\"\n    assert digitSum('aBcDe') == 131, \"aBcDe\"\n    assert digitSum('aBcD1e') == 131, \"aBcD1e\"\n    assert digitSum('aBcD1eF') == 131, \"aBcD1eF\"\n    assert digitSum('aBcDe1F') == 131, \"aBcDe1F\"\n    assert digitSum('aBcDe1Fg') == 131, \"aBcDe1Fg\"\n    assert digitSum('aBcDe1FgH') == 131, \"aBcDe1FgH\"\n    assert digitSum('aBcDe1FgHi') == 131, \"aBcDe1FgHi\"\n    assert digitSum('aBcDe1FgHi') == 131, \"aBcDe1FgHi\"\n    assert digitSum('aBcDe1FgHiJ') == 131, \"aBcDe1FgHiJ\"\n    assert digitSum('aBcDe1FgHiJk') == 131, \"aBcDe1FgHiJk\"\n    assert digitSum('aBcDe1FgHiJkL') == 131, \"aBcDe1FgHiJkL\"\n    print('Done! Go Check!')"
    },
    {
      "rank": 98,
      "score": 2.767303595629702,
      "candidate": "s = s.upper()\n    return sum([ord(i) for i in s if ord(i) >= 65 and ord(i) <= 90])\n\n\ndef digitSum2(s):\n    return sum([ord(i) for i in s.upper() if ord(i) >= 65 and ord(i) <= 90])\n\n\ndef digitSum3(s):\n    return sum(map(lambda i: ord(i), filter(lambda i: ord(i) >= 65 and ord(i) <= 90, s.upper())))\n\n\nprint(digitSum(\"abAB\"))\nprint(digitSum(\"abcCd\"))\nprint(digitSum(\"helloE\"))\nprint(digitSum(\"woArBld\"))\nprint(digitSum(\"aAaaaXa\"))"
    },
    {
      "rank": 99,
      "score": 2.7077990692423453,
      "candidate": "return sum(ord(x) for x in s if x.isupper())\n\n\ndef digitSum1(s):\n    \"\"\"Task\n    Write a function that takes a string as input and returns the sum of the lower characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 298\n        digitSum(\"abcCd\") => 105\n        digitSum(\"helloE\") => 143\n        digitSum(\"woArBld\") => 298\n        digitSum(\"aAaaaXa\") => 467\n    \"\"\"\n    return sum(ord(x) for x in s if x.islower())"
    },
    {
      "rank": 100,
      "score": 2.568872572746449,
      "candidate": "sum = 0\n    for s in s:\n        if s.isupper():\n            sum += ord(s)\n    return sum\n\n\ndef digitSum2(s):\n    \"\"\"Task\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum2(\"\") => 0\n        digitSum2(\"abAB\") => 131\n        digitSum2(\"abcCd\") => 67\n        digitSum2(\"helloE\") => 69\n        digitSum2(\"woArBld\") => 131\n        digitSum2(\"aAaaaXa\") => 153\n    \"\"\"\n\n    sum = 0\n    for s in s:\n        if s.isupper():\n            sum += s\n    return sum\n\n\ndef digitSum3(s):\n    \"\"\"Task\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum3(\"\") => 0\n        digitSum3(\"abAB\") => 131\n        digitSum3(\"abcCd\") => 67\n        digitSum3(\"helloE\") => 69\n        digitSum3(\"woArBld\") => 131\n        digitSum3(\"aAaaaXa\") => 153\n    \"\"\"\n\n    sum = 0\n    for s in s:\n        if s.isupper():\n            sum += int(s)\n    return sum\n\n\ndef digitSum4(s):\n    \"\"\"Task\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum4(\"\") => 0\n        digitSum4(\"abAB\") => 131\n        digitSum4(\"abcCd\") => 67\n        digitSum4(\"helloE\") => 69\n        digitSum4(\"woArBld\") => 131\n        digitSum4(\"aAaaaXa\") => 153\n    \"\"\"\n\n    sum = 0\n    for s in"
    }
  ]
}