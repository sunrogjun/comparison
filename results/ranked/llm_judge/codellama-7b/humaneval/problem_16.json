{
  "timestamp": "2025-09-14T21:12:05.880123",
  "method": "improved_llm_judge",
  "judge_model": "codellama/CodeLlama-7b-Python-hf",
  "target_model": "codellama-7b",
  "dataset": "humaneval",
  "problem_number": 16,
  "total_candidates": 100,
  "results": [
    {
      "rank": 1,
      "score": 10.0,
      "candidate": "return len(set(string.lower()))\n\n\ndef is_pangram(string: str) -> bool:\n    \"\"\" Given a string, check whether it is a pangram. Assume that a string consists of Latin letters only.\n    >>> is_pangram('The quick brown fox jumps over the lazy dog')\n    True\n    >>> is_pangram('abcdefghijklmnopqrstuvwxyz')\n    True\n    >>> is_pangram('abcdefghijklmnopqrstuvwxy')\n    False\n    >>> is_pangram('AbCdEfGhIjKlMnOpQrStUvWxYz')\n    True\n    \"\"\"\n    return count_distinct_characters(string) == 26\n\n\ndef is_palindrome(string: str) -> bool:\n    \"\"\" Given a string, check whether it is a palindrome. Assume that punctuation and whitespace symbols don't matter.\n    >>> is_palindrome('A man, a plan, a cat, a ham, a yak, a yam, a hat, a canal-Panama!')\n    True\n    >>> is_palindrome('A man, a plan, a cat, a ham, a yak, a yam, a hat, a canal-Panama')\n    False\n    \"\"\"\n    return string.lower().replace(' ', '').replace('.', '') == string.lower().replace(' ', '').replace('.', '')[::-1]\n\n\ndef count_words(string: str) -> int:\n    \"\"\" Given a string, count how many words are in it. Words are separated by whitespaces.\n    >>> count_words('   This is a string!   ')\n    5\n    >>> count_words('There are five words in this sentence.')\n    5\n    \"\"\"\n    return len(string.split())\n\n\ndef count_unique_words(string: str) -> int:\n    \"\"\" Given a string, count how many unique words are in it. Words are separated by whitespaces.\n    >>> count_unique_words('   This is a string!   ')\n    4\n    >>> count_unique_words('There are five"
    },
    {
      "rank": 2,
      "score": 10.0,
      "candidate": "return len(set(string.lower()))\n\n\ndef count_distinct_characters_better(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters_better('xyzXYZ')\n    3\n    >>> count_distinct_characters_better('Jerry')\n    4\n    \"\"\"\n    return len({char for char in string.lower()})\n\n\nif __name__ == \"__main__\":\n    from doctest import testmod\n\n    testmod()"
    },
    {
      "rank": 3,
      "score": 10.0,
      "candidate": "return len(set(string.lower()))\n\n\nif __name__ == \"__main__\":\n    from doctest import testmod\n\n    testmod()"
    },
    {
      "rank": 4,
      "score": 10.0,
      "candidate": "return len(set(string.lower()))\n\n\nif __name__ == \"__main__\":\n    from doctest import testmod\n    testmod()"
    },
    {
      "rank": 5,
      "score": 10.0,
      "candidate": "distinct_characters = set()\n    for character in string:\n        if character not in distinct_characters:\n            distinct_characters.add(character)\n    return len(distinct_characters)\n\n\ndef count_distinct_characters_without_set(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters_without_set('xyzXYZ')\n    3\n    >>> count_distinct_characters_without_set('Jerry')\n    4\n    \"\"\"\n    distinct_characters = 0\n    for character in string:\n        found = False\n        for character2 in string:\n            if character == character2:\n                found = True\n                break\n        if not found:\n            distinct_characters += 1\n    return distinct_characters\n\n\nif __name__ == \"__main__\":\n    from doctest import testmod\n\n    testmod()"
    },
    {
      "rank": 6,
      "score": 10.0,
      "candidate": "return len(set(string.lower()))\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 7,
      "score": 10.0,
      "candidate": "return len(set(string.lower()))\n\n\ndef count_distinct_characters_builtin(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters_builtin('xyzXYZ')\n    3\n    >>> count_distinct_characters_builtin('Jerry')\n    4\n    \"\"\"\n    return len(set(string.lower()))\n\n\nif __name__ == \"__main__\":\n    from doctest import testmod\n\n    testmod()"
    },
    {
      "rank": 8,
      "score": 10.0,
      "candidate": "return len(set(string.lower()))\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 9,
      "score": 10.0,
      "candidate": "return len(set(string.lower()))\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 10,
      "score": 10.0,
      "candidate": "return len(set(string))\n\n\ndef count_distinct_characters_without_set(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters_without_set('xyzXYZ')\n    3\n    >>> count_distinct_characters_without_set('Jerry')\n    4\n    \"\"\"\n    unique_chars = []\n    for char in string:\n        char_lower = char.lower()\n        if char_lower not in unique_chars:\n            unique_chars.append(char_lower)\n    return len(unique_chars)\n\n\nif __name__ == \"__main__\":\n    from doctest import testmod\n\n    testmod()"
    },
    {
      "rank": 11,
      "score": 10.0,
      "candidate": "return len(set(string.lower()))\n\n\nif __name__ == '__main__':\n    from doctest import testmod\n    testmod()"
    },
    {
      "rank": 12,
      "score": 10.0,
      "candidate": "return len(set(string.lower()))\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 13,
      "score": 10.0,
      "candidate": "return len(set(string.lower()))\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 14,
      "score": 10.0,
      "candidate": "return len(set(string.lower()))\n\n\ndef count_distinct_characters_without_set(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters_without_set('xyzXYZ')\n    3\n    >>> count_distinct_characters_without_set('Jerry')\n    4\n    \"\"\"\n    return len({char.lower() for char in string})\n\n\ndef count_distinct_characters_without_set_and_dict(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters_without_set_and_dict('xyzXYZ')\n    3\n    >>> count_distinct_characters_without_set_and_dict('Jerry')\n    4\n    \"\"\"\n    return len(\n        {chr(ord(char.lower()) - ord('a') + ord('a')) for char in string})\n\n\nif __name__ == \"__main__\":\n    from doctest import testmod\n    testmod()"
    },
    {
      "rank": 15,
      "score": 10.0,
      "candidate": "return len(set(string.lower()))\n\n\ndef find_minimum_length_sub_string(string: str) -> int:\n    \"\"\" Given a string, find the minimum length of a non-empty sub string of this string\n    consisting of only unique characters\n    >>> find_minimum_length_sub_string('Jerry')\n    2\n    >>> find_minimum_length_sub_string('JerryJerry')\n    2\n    >>> find_minimum_length_sub_string('JerryJerryJerry')\n    2\n    \"\"\"\n    if count_distinct_characters(string) == 1:\n        return len(string)\n    window_start = 0\n    window_end = 0\n    char_frequency = {}\n    min_length = float('inf')\n\n    for window_end in range(len(string)):\n        right_char = string[window_end]\n        if right_char in char_frequency:\n            char_frequency[right_char] += 1\n        else:\n            char_frequency[right_char] = 1\n\n        while len(char_frequency.keys()) > 1:\n            left_char = string[window_start]\n            char_frequency[left_char] -= 1\n            if char_frequency[left_char] == 0:\n                del char_frequency[left_char]\n            window_start += 1\n\n        min_length = min(min_length, window_end - window_start + 1)\n\n    return min_length\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 16,
      "score": 10.0,
      "candidate": "return len(set(string.lower()))\n\n\ndef count_distinct_characters_pythonic(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters_pythonic('xyzXYZ')\n    3\n    >>> count_distinct_characters_pythonic('Jerry')\n    4\n    \"\"\"\n    return len(set(string))\n\n\nif __name__ == \"__main__\":\n    from doctest import testmod\n\n    testmod()"
    },
    {
      "rank": 17,
      "score": 10.0,
      "candidate": "return len(set(string.lower()))\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 18,
      "score": 10.0,
      "candidate": "return len(set(string))\n\n\nif __name__ == \"__main__\":\n    from doctest import testmod\n\n    testmod()"
    },
    {
      "rank": 19,
      "score": 10.0,
      "candidate": "return len(set(string.lower()))\n\n\nif __name__ == \"__main__\":\n    from doctest import testmod\n    testmod()"
    },
    {
      "rank": 20,
      "score": 10.0,
      "candidate": "return len(set(string.lower()))"
    },
    {
      "rank": 21,
      "score": 10.0,
      "candidate": "return len(set(string.lower()))\n\n\nif __name__ == \"__main__\":\n    print(count_distinct_characters('xyzXYZ'))"
    },
    {
      "rank": 22,
      "score": 10.0,
      "candidate": "return len(set(string.lower()))\n\n\ndef count_distinct_characters_without_sets(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters_without_sets('xyzXYZ')\n    3\n    >>> count_distinct_characters_without_sets('Jerry')\n    4\n    \"\"\"\n    distinct_characters = set()\n    for char in string.lower():\n        if char not in distinct_characters:\n            distinct_characters.add(char)\n    return len(distinct_characters)\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 23,
      "score": 10.0,
      "candidate": "return len(set(string.lower()))\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 24,
      "score": 9.993251387631034,
      "candidate": "return len(set(string.lower()))\n\n\ndef count_distinct_characters_v2(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters_v2('xyzXYZ')\n    3\n    >>> count_distinct_characters_v2('Jerry')\n    4\n    \"\"\"\n    return len(set(string.lower()))\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 25,
      "score": 9.94217585880588,
      "candidate": "return len(set(string.lower()))\n\n\ndef count_distinct_characters_pythonic(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters_pythonic('xyzXYZ')\n    3\n    >>> count_distinct_characters_pythonic('Jerry')\n    4\n    \"\"\"\n    return len({char.lower() for char in string})\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 26,
      "score": 9.930867849414408,
      "candidate": "return len(set(string.lower()))\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 27,
      "score": 9.907170511668092,
      "candidate": "return len(set(string))\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 28,
      "score": 9.890164056081243,
      "candidate": "return len(set(string.lower()))\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 29,
      "score": 9.887111849756732,
      "candidate": "return len(set(string.lower()))\n\n\ndef count_distinct_characters_2(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters_2('xyzXYZ')\n    3\n    >>> count_distinct_characters_2('Jerry')\n    4\n    \"\"\"\n    return len({char.lower() for char in string})\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 30,
      "score": 9.88293152152541,
      "candidate": "return len(set(string.lower()))\n\n\ndef count_distinct_characters_v2(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\n    return len(set(char.lower() for char in string))\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 31,
      "score": 9.882923312638333,
      "candidate": "return len(set(string.lower()))\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 32,
      "score": 9.854153125103362,
      "candidate": "return len(set(string.lower()))\n\n\ndef main():\n    print(count_distinct_characters('xyzXYZ'))\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 33,
      "score": 9.849448152205355,
      "candidate": "return len(set(string.lower()))\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 34,
      "score": 9.845393812074393,
      "candidate": "return len(set(string.lower()))\n\n\ndef count_distinct_characters_v2(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters_v2('xyzXYZ')\n    3\n    >>> count_distinct_characters_v2('Jerry')\n    4\n    \"\"\"\n    return len(string) - len(set(string)) + 1\n\n\ndef count_distinct_characters_v3(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters_v3('xyzXYZ')\n    3\n    >>> count_distinct_characters_v3('Jerry')\n    4\n    \"\"\"\n    return len(string) - len(string.upper()) + 1\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 35,
      "score": 9.769680614520107,
      "candidate": "return len(set(string.lower()))\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 36,
      "score": 9.768291153593768,
      "candidate": "return len(set(string.lower()))\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 37,
      "score": 9.765262807032524,
      "candidate": "return len(set(string.lower()))\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 38,
      "score": 9.760412881077356,
      "candidate": "return len(set(string.lower()))\n\n\ndef count_distinct_characters_alt(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\n    return len(set(string))\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 39,
      "score": 9.749121478207732,
      "candidate": "return len(set(string.lower()))\n\n\ndef count_distinct_characters_in_list(list_of_strings: list) -> int:\n    \"\"\" Given a list of strings, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters_in_list(['xyzXYZ', 'Jerry', 'abc'])\n    6\n    \"\"\"\n    return sum(count_distinct_characters(string) for string in list_of_strings)\n\n\ndef count_distinct_characters_in_file(file_name: str) -> int:\n    \"\"\" Given a file name, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters_in_file('data.txt')\n    7\n    \"\"\"\n    with open(file_name) as file:\n        return count_distinct_characters_in_list(file.readlines())\n\n\ndef main():\n    print(count_distinct_characters('xyzXYZ'))\n    print(count_distinct_characters('Jerry'))\n    print(count_distinct_characters_in_list(['xyzXYZ', 'Jerry', 'abc']))\n    print(count_distinct_characters_in_file('data.txt'))\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 40,
      "score": 9.740864890863175,
      "candidate": "return len(set(string.lower()))\n\n\ndef count_distinct_characters_built_in(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters_built_in('xyzXYZ')\n    3\n    >>> count_distinct_characters_built_in('Jerry')\n    4\n    \"\"\"\n    return len(set(string))\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 41,
      "score": 9.73511989811648,
      "candidate": "return len(set(string.lower()))\n\n\nif __name__ == '__main__':\n    from doctest import testmod\n    testmod()"
    },
    {
      "rank": 42,
      "score": 9.72780863773741,
      "candidate": "return len(set(string.lower()))\n\n\ndef count_distinct_characters_no_builtins(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters_no_builtins('xyzXYZ')\n    3\n    >>> count_distinct_characters_no_builtins('Jerry')\n    4\n    \"\"\"\n    # Use an array of boolean values to denote whether a character has been encountered\n    char_encountered = [False] * 26\n    for char in string.lower():\n        if ord('a') <= ord(char) <= ord('z'):\n            index = ord(char) - ord('a')\n            char_encountered[index] = True\n    return sum(char_encountered)\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 43,
      "score": 9.718856235379514,
      "candidate": "return len(set(string.lower()))\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 44,
      "score": 9.699680655040597,
      "candidate": "return len(set(string.lower()))\n\n\ndef count_distinct_characters_v2(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters_v2('xyzXYZ')\n    3\n    >>> count_distinct_characters_v2('Jerry')\n    4\n    \"\"\"\n    return len({char.lower() for char in string})\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 45,
      "score": 9.699146693885302,
      "candidate": "return len(set(string.lower()))\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 46,
      "score": 9.661538999847021,
      "candidate": "return len(set(string))\n\n\ndef count_distinct_characters_with_set(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters_with_set('xyzXYZ')\n    3\n    >>> count_distinct_characters_with_set('Jerry')\n    4\n    \"\"\"\n    counter = set()\n    for char in string:\n        counter.add(char.lower())\n    return len(counter)\n\n\ndef count_distinct_characters_with_dict(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters_with_dict('xyzXYZ')\n    3\n    >>> count_distinct_characters_with_dict('Jerry')\n    4\n    \"\"\"\n    counter = {}\n    for char in string:\n        counter[char.lower()] = True\n    return len(counter)\n\n\ndef count_distinct_characters_with_dict_comp(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters_with_dict_comp('xyzXYZ')\n    3\n    >>> count_distinct_characters_with_dict_comp('Jerry')\n    4\n    \"\"\"\n    return len({char.lower() for char in string})\n\n\nif __name__ == '__main__':\n    from doctest import testmod\n    testmod()"
    },
    {
      "rank": 47,
      "score": 9.640077895802646,
      "candidate": "return len(set(string.lower()))\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 48,
      "score": 9.595753198553407,
      "candidate": "return len(set(string))\n\n\ndef count_distinct_characters_with_set(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters_with_set('xyzXYZ')\n    3\n    >>> count_distinct_characters_with_set('Jerry')\n    4\n    \"\"\"\n    distinct_characters = set()\n\n    for character in string:\n        if character not in distinct_characters:\n            distinct_characters.add(character)\n\n    return len(distinct_characters)\n\n\ndef count_distinct_characters_with_dict(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters_with_dict('xyzXYZ')\n    3\n    >>> count_distinct_characters_with_dict('Jerry')\n    4\n    \"\"\"\n    distinct_characters = {}\n\n    for character in string:\n        if character not in distinct_characters:\n            distinct_characters[character] = 1\n        else:\n            distinct_characters[character] += 1\n\n    return len(distinct_characters)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 49,
      "score": 9.58039123838868,
      "candidate": "return len(set(string.lower()))\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 50,
      "score": 9.493584439832787,
      "candidate": "return len(set(string.lower()))\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 51,
      "score": 9.401896687959665,
      "candidate": "# your code goes here\n    return len(set(string.lower()))\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 52,
      "score": 9.389578175014488,
      "candidate": "return len(set(string))\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 53,
      "score": 9.055696245332394,
      "candidate": "return len(set(string.lower()))\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 54,
      "score": 9.0433598776711,
      "candidate": "# your code goes here\n    return len(set(string.lower()))\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 55,
      "score": 9.020164938060113,
      "candidate": "return len(set(string.lower()))\n\n\ndef count_distinct_characters_v2(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters_v2('xyzXYZ')\n    3\n    >>> count_distinct_characters_v2('Jerry')\n    4\n    \"\"\"\n    return len({char.lower() for char in string})\n\n\nif __name__ == \"__main__\":\n    from doctest import testmod\n\n    testmod()"
    },
    {
      "rank": 56,
      "score": 9.006215542699554,
      "candidate": "return len(set(string.lower()))\n\n\ndef count_distinct_characters_v2(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\n    return len({ch for ch in string.lower()})\n\n\nif __name__ == \"__main__\":\n    print(count_distinct_characters(\"Jerry\"))"
    },
    {
      "rank": 57,
      "score": 8.951996511378214,
      "candidate": "return len(set(string.lower()))\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 58,
      "score": 8.928108538188557,
      "candidate": "return len(set(string.lower()))\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 59,
      "score": 8.775610300748813,
      "candidate": "return len(set(string.lower()))\n\n\ndef main():\n    print(count_distinct_characters('xyzXYZ'))\n    print(count_distinct_characters('Jerry'))\n    print(count_distinct_characters('zzzzzzzz'))\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 60,
      "score": 8.75176688375279,
      "candidate": "return len(set(string.lower()))\n\n\nif __name__ == \"__main__\":\n    print(count_distinct_characters(\"Jerry\"))"
    },
    {
      "rank": 61,
      "score": 8.715672270888268,
      "candidate": "return len(set(string.lower()))\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 62,
      "score": 8.697697905064905,
      "candidate": "return len(set(string.lower()))\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 63,
      "score": 8.690127447955128,
      "candidate": "# todo: write your own docstring\n    # todo: find a way to make it case-insensitive\n    return len(set(string))\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 64,
      "score": 8.658181662017673,
      "candidate": "return len(set(string.lower()))\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 65,
      "score": 8.623489258827814,
      "candidate": "return len(set(string.lower()))\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 66,
      "score": 8.553761376807621,
      "candidate": "return len(set(string.lower()))\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 67,
      "score": 8.551392154344727,
      "candidate": "return len(set(string.lower()))\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 68,
      "score": 8.548146064200886,
      "candidate": "return len(set(string.lower()))\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 69,
      "score": 8.513369430796013,
      "candidate": "return len(set(string.lower()))\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 70,
      "score": 8.4810488990487,
      "candidate": "return len(set(string.lower()))\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 71,
      "score": 8.47472550070116,
      "candidate": "return len(set(string))\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 72,
      "score": 8.47316997696304,
      "candidate": "return len(set(string.lower()))\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 73,
      "score": 8.46672875199146,
      "candidate": "return len(set(string.lower()))\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 74,
      "score": 8.43262185153816,
      "candidate": "return len(set(string.lower()))\n\n\ndef is_prime(number: int) -> bool:\n    \"\"\" Given a number, find out if it is prime\n    >>> is_prime(5)\n    True\n    >>> is_prime(10)\n    False\n    \"\"\"\n    if number <= 1:\n        return False\n\n    for index in range(2, number):\n        if number % index == 0:\n            return False\n\n    return True\n\n\ndef find_smallest_positive(list_of_numbers: list) -> int:\n    \"\"\" Given a list of numbers, find the smallest positive number in it\n    >>> find_smallest_positive([3, 4, -1, 1])\n    1\n    >>> find_smallest_positive([3, 4, 2, 1])\n    1\n    \"\"\"\n    smallest = None\n\n    for index in range(len(list_of_numbers)):\n        if list_of_numbers[index] <= 0:\n            continue\n\n        if smallest is None or list_of_numbers[index] < smallest:\n            smallest = list_of_numbers[index]\n\n    return smallest\n\n\ndef is_valid_sudoku_board(board: list) -> bool:\n    \"\"\" Given a sudoku board, find if it is valid\n    >>> is_valid_sudoku_board([[1, 2, 3, 4, 5, 6, 7, 8, 9],\n    ...     [4, 5, 6, 7, 8, 9, 1, 2, 3],\n    ...     [7, 8, 9, 1, 2, 3, 4, 5, 6],\n    ...     [2, 1, 4, 3, 6, 5, 8, 9, 7],\n    ...     [3, 6, 5, 8, 9, 7, 2, 1, 4],\n    ...     [8, 9, 7, 2, 1, 4, 3, 6, 5],\n    ...     [5"
    },
    {
      "rank": 75,
      "score": 8.420681104322934,
      "candidate": "return len(set(string.lower()))\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 76,
      "score": 8.345772018790708,
      "candidate": "return len(set(string))\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 77,
      "score": 8.31736729190706,
      "candidate": "distinct_characters = set()\n    for character in string:\n        distinct_characters.add(character.lower())\n    return len(distinct_characters)\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 78,
      "score": 8.29075362576626,
      "candidate": "return len(set(string.lower()))\n\n\ndef main():\n    print(count_distinct_characters('Jerry'))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 79,
      "score": 8.231554925424753,
      "candidate": "return len(set(string.lower()))\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 80,
      "score": 8.144796499522444,
      "candidate": "return len(set(string))\n\n\nif __name__ == '__main__':\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 81,
      "score": 8.095399837888998,
      "candidate": "return len(set(string.lower()))\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 82,
      "score": 8.079353903022456,
      "candidate": "return len(set(string.lower()))\n\n\nif __name__ == \"__main__\":\n    print(count_distinct_characters(\"xyzXYZ\"))\n    print(count_distinct_characters(\"Jerry\"))\n    print(count_distinct_characters(\"Jerry\"))"
    },
    {
      "rank": 83,
      "score": 8.064616563895084,
      "candidate": "return len(set(string.lower()))\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 84,
      "score": 8.006143048307962,
      "candidate": "return len(set(string.lower()))"
    },
    {
      "rank": 85,
      "score": 7.978384223003799,
      "candidate": "return len(set(string.lower()))\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 86,
      "score": 7.974277542994004,
      "candidate": "return len(set(string.lower()))\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 87,
      "score": 7.956532187623194,
      "candidate": "return len(set(string.lower()))\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 88,
      "score": 7.875221559715143,
      "candidate": "return len(set(string.lower()))\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 89,
      "score": 7.862641193174742,
      "candidate": "return len(set(string.lower()))\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 90,
      "score": 3.0,
      "candidate": "return len(set(string.lower()))\n\n\ndef count_vowels(string: str) -> int:\n    \"\"\" Given a string, find out how many vowels (a, e, i, o, u) does it consist of.\n    The vowels are case insensitive.\n    >>> count_vowels('Hello world!')\n    3\n    >>> count_vowels('PyNaTive')\n    2\n    \"\"\"\n    vowels = set('aeiou')\n    return sum(1 for char in string.lower() if char in vowels)\n\n\ndef count_consecutive_characters(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct, contiguous characters does it consist of.\n    >>> count_consecutive_characters('Hello world!')\n    10\n    >>> count_consecutive_characters('PyNaTive')\n    4\n    \"\"\"\n    return len(string) - len(string.replace(' ', '')) + 1\n\n\ndef count_capitals(string: str) -> int:\n    \"\"\" Given a string, find out how many capital letters does it consist of.\n    The capital letters are the ones that are uppercase, regardless of their case.\n    >>> count_capitals('Hello world!')\n    2\n    >>> count_capitals('PyNaTive')\n    1\n    \"\"\"\n    return sum(char.isupper() for char in string)\n\n\ndef count_vowels_and_consonants(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct vowels and consonants does it consist of.\n    The vowels and consonants are case insensitive.\n    >>> count_vowels_and_consonants('Hello world!')\n    5\n    >>> count_vowels_and_consonants('PyNaTive')\n    6\n    \"\"\"\n    vowels = set('aeiou')\n    consonants = set('bcdfghjklmnpqrstvwxyz')\n    return sum(1 for char in string.lower() if char in vowels or char"
    },
    {
      "rank": 91,
      "score": 3.0,
      "candidate": "return len(set(string.lower()))\n\n\ndef count_distinct_characters_without_set(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\n    return len(string) - len(string.lower().replace('_', '')) + 1\n\n\nif __name__ == '__main__':\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 92,
      "score": 3.0,
      "candidate": "return len(set(string.lower()))\n\n\ndef count_distinct_characters_with_slicing(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters_with_slicing('xyzXYZ')\n    3\n    >>> count_distinct_characters_with_slicing('Jerry')\n    4\n    \"\"\"\n    return len(set(string.lower()[:]))\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 93,
      "score": 3.0,
      "candidate": "return len(set(string.lower()))\n\n\ndef find_the_difference(string1: str, string2: str) -> str:\n    \"\"\" Given two strings, find the character in the second string, that does not occur in the first string\n    >>> find_the_difference('abcd', 'abcde')\n    'e'\n    \"\"\"\n    return list(set(string2) - set(string1))[0]\n\n\ndef find_all_indexes(text: str, pattern: str) -> list:\n    \"\"\"\n    Return a list of starting indexes of all occurrences of pattern in text\n    >>> find_all_indexes('abcabc', 'abc')\n    [0, 3]\n    >>> find_all_indexes('abcabc', 'abcd')\n    []\n    >>> find_all_indexes('abcabc', '')\n    [0, 1, 2, 3, 4, 5]\n    \"\"\"\n    if not pattern:\n        return list(range(len(text)))\n\n    result = []\n    for i in range(len(text)):\n        if text[i:].startswith(pattern):\n            result.append(i)\n    return result\n\n\ndef string_rotation(string1: str, string2: str) -> bool:\n    \"\"\"\n    Check if one string is a string rotation of another\n    >>> string_rotation('waterbottle', 'erbottlewat')\n    True\n    >>> string_rotation('waterbottle', 'erbottlewa')\n    False\n    \"\"\"\n    if len(string1) != len(string2):\n        return False\n    string1 += string1\n    return string2 in string1\n\n\ndef one_away(string1: str, string2: str) -> bool:\n    \"\"\"\n    Check if two strings are one edit (insert, remove, replace) away\n    >>> one_away('pale', 'ple')\n    True\n    >>> one_away('pales', 'pale')\n    True\n    >>> one_away('pale', 'bale')\n    True\n    >>> one_away('pale', 'bake')\n    False\n    \"\"\""
    },
    {
      "rank": 94,
      "score": 3.0,
      "candidate": "return len(set(string.lower()))\n\n\ndef count_distinct_characters_sorting(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters_sorting('xyzXYZ')\n    3\n    >>> count_distinct_characters_sorting('Jerry')\n    4\n    \"\"\"\n    return len(list(set(string.lower())))\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 95,
      "score": 3.0,
      "candidate": "return len(set(string.lower()))\n\n\ndef count_distinct_characters_pythonic(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters_pythonic('xyzXYZ')\n    3\n    >>> count_distinct_characters_pythonic('Jerry')\n    4\n    \"\"\"\n    return len(set(string))\n\n\nif __name__ == '__main__':\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 96,
      "score": 3.0,
      "candidate": "return len(set(string))\n\n\ndef count_distinct_characters_v2(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\n    return len({char.lower() for char in string})\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 97,
      "score": 3.0,
      "candidate": "return len(set(string.lower()))\n\n\ndef count_distinct_characters_faster(string: str) -> int:\n    \"\"\"\n    >>> count_distinct_characters_faster('xyzXYZ')\n    3\n    >>> count_distinct_characters_faster('Jerry')\n    4\n    \"\"\"\n    count = 0\n    for character in string:\n        if character.lower() not in string[:count]:\n            count += 1\n    return count\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 98,
      "score": 3.0,
      "candidate": "return len(set(string))\n\n\ndef count_distinct_characters_without_set(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters_without_set('xyzXYZ')\n    3\n    >>> count_distinct_characters_without_set('Jerry')\n    4\n    \"\"\"\n    return len(string) - len(string.lower().replace(' ', ''))\n\n\nif __name__ == \"__main__\":\n    print(count_distinct_characters('xyzXYZ'))\n    print(count_distinct_characters_without_set('xyzXYZ'))"
    },
    {
      "rank": 99,
      "score": 3.0,
      "candidate": "# return len(set(string.lower()))\n    distinct_chars = set()\n    for char in string:\n        if char.lower() not in distinct_chars:\n            distinct_chars.add(char.lower())\n    return len(distinct_chars)\n\n\ndef count_distinct_characters_v2(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters_v2('xyzXYZ')\n    3\n    >>> count_distinct_characters_v2('Jerry')\n    4\n    \"\"\"\n    return len({char.lower() for char in string})\n\n\ndef main():\n    print(count_distinct_characters('xyzXYZ'))\n    print(count_distinct_characters_v2('xyzXYZ'))\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 100,
      "score": 3.0,
      "candidate": "return len(set(string.lower()))\n\n\ndef count_vowels(string: str) -> int:\n    \"\"\" Given a string, find out how many vowels does it consist of.\n    >>> count_vowels('xyzXYZ')\n    0\n    >>> count_vowels('Jerry')\n    3\n    \"\"\"\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    return sum(1 for char in string if char.lower() in vowels)\n\n\ndef count_consecutive_characters(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct pairs of consecutive characters does it consist of\n    >>> count_consecutive_characters('xyzz')\n    1\n    >>> count_consecutive_characters('Jerry')\n    3\n    \"\"\"\n    return len([True for i in range(len(string) - 1) if string[i] == string[i + 1]])\n\n\ndef count_consecutive_characters_with_same_case(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct pairs of consecutive characters do they have the same case\n    >>> count_consecutive_characters_with_same_case('xyzz')\n    0\n    >>> count_consecutive_characters_with_same_case('Jerry')\n    1\n    \"\"\"\n    return len([True for i in range(len(string) - 1) if string[i] == string[i + 1] and string[i].islower() == string[i + 1].islower()])\n\n\ndef count_common_characters(string1: str, string2: str) -> int:\n    \"\"\" Given two strings, find out how many characters do they have in common\n    >>> count_common_characters('Jerry', 'Jerry')\n    4\n    >>> count_common_characters('Jerry', 'Jerry2')\n    4\n    \"\"\"\n    return len([True for char in string1 if char in string2])\n\n\ndef count_common_characters_with_same_case(string1:"
    }
  ]
}