{
  "timestamp": "2025-09-14T22:01:59.681463",
  "method": "improved_llm_judge",
  "judge_model": "codellama/CodeLlama-7b-Python-hf",
  "target_model": "codellama-7b",
  "dataset": "humaneval",
  "problem_number": 128,
  "total_candidates": 100,
  "results": [
    {
      "rank": 1,
      "score": 10.0,
      "candidate": "if len(arr) == 0:\n        return None\n    sign_sum = 0\n    sign_prod = 1\n    for num in arr:\n        if num == 0:\n            sign_sum += 0\n            sign_prod *= 0\n        elif num > 0:\n            sign_sum += 1\n            sign_prod *= 1\n        else:\n            sign_sum += -1\n            sign_prod *= -1\n    return sign_sum * sign_prod\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 2,
      "score": 10.0,
      "candidate": "if len(arr) == 0:\n        return None\n\n    signs = [1] * len(arr)\n    for i in range(len(arr)):\n        if arr[i] < 0:\n            signs[i] = -1\n\n    return sum([abs(arr[i]) * signs[i] for i in range(len(arr))])\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 3,
      "score": 10.0,
      "candidate": "if len(arr) == 0:\n        return None\n    res = 1\n    for num in arr:\n        if num > 0:\n            res *= 1\n        elif num < 0:\n            res *= -1\n        else:\n            res *= 0\n    return sum(arr) * res\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 4,
      "score": 10.0,
      "candidate": "if len(arr) == 0:\n        return None\n    res = 0\n    for num in arr:\n        if num == 0:\n            res += 0\n        elif num > 0:\n            res += 1\n        else:\n            res += -1\n    res *= prod(arr)\n    return res\n\n\ndef prod(arr):\n    \"\"\"\n    Return product of numbers in arr\n    \"\"\"\n    res = 1\n    for num in arr:\n        res *= num\n    return res\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 5,
      "score": 10.0,
      "candidate": "if len(arr) == 0:\n        return None\n    # if len(arr) == 1:\n    #     return arr[0]\n    # if len(arr) == 2:\n    #     return arr[0] * arr[1]\n    # if len(arr) > 2:\n    #     return arr[0] * arr[1] * prod_signs(arr[2:])\n    # return 0\n    return arr[0] * prod_signs(arr[1:]) if len(arr) > 1 else 0\n\n    # return sum(abs(x) for x in arr) * prod(x for x in arr if x)\n\n    # if len(arr) == 0:\n    #     return None\n    # if len(arr) == 1:\n    #     return arr[0]\n    # if len(arr) == 2:\n    #     return arr[0] * arr[1]\n    # return arr[0] * arr[1] * prod_signs(arr[2:])\n\n    # return sum(abs(x) for x in arr) * prod_signs(arr)\n\n    # return sum(abs(x) for x in arr) * prod_signs(arr)\n\n    # if len(arr) == 0:\n    #     return None\n    # if len(arr) == 1:\n    #     return arr[0]\n    # if len(arr) == 2:\n    #     return arr[0] * arr[1]\n    # return arr[0] * arr[1] * prod_signs(arr[2:])\n\n    # return sum(abs(x) for x in arr) * prod_signs(arr)\n\n    # if len(arr) == 0:\n    #     return None\n    # if len(arr) == 1:\n    #     return arr[0]\n    # if len(arr) == 2:\n    #     return arr[0] * arr[1]\n    # return arr[0] * arr[1] * prod_signs(arr[2:])\n\n    # return sum(abs(x"
    },
    {
      "rank": 6,
      "score": 10.0,
      "candidate": "if not arr:\n        return None\n\n    return sum([abs(x) for x in arr]) * (-1) ** (sum([x < 0 for x in arr]))\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 7,
      "score": 10.0,
      "candidate": "if not arr:\n        return None\n\n    prod = 1\n    sum_of_magnitudes = 0\n    for i in arr:\n        prod *= i\n        sum_of_magnitudes += abs(i)\n\n    return prod * sum_of_magnitudes\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 8,
      "score": 10.0,
      "candidate": "pass\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 9,
      "score": 10.0,
      "candidate": "if not arr:\n        return None\n\n    total = 0\n    sign = 1\n\n    for i in arr:\n        if i > 0:\n            sign *= 1\n            total += i\n        elif i < 0:\n            sign *= -1\n            total += i\n        else:\n            sign *= 0\n            total += 0\n\n    return sign * total\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 10,
      "score": 10.0,
      "candidate": "if not arr:\n        return None\n    signs = [1 if x >= 0 else -1 for x in arr]\n    prod = 1\n    for sign in signs:\n        prod *= sign\n    return sum([abs(x) * prod for x in arr])\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 11,
      "score": 10.0,
      "candidate": "if len(arr) == 0:\n        return None\n    total = 0\n    for i in arr:\n        if i == 0:\n            total += 0\n        elif i > 0:\n            total += 1\n        elif i < 0:\n            total += -1\n    return total * sum(arr)\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 12,
      "score": 10.0,
      "candidate": "if not arr:\n        return None\n    s = 0\n    prod = 1\n    for i in arr:\n        if i > 0:\n            s += 1\n            prod *= 1\n        elif i < 0:\n            s += -1\n            prod *= -1\n        else:\n            s += 0\n            prod *= 0\n    return s * prod\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 13,
      "score": 10.0,
      "candidate": "if len(arr) == 0:\n        return None\n\n    def sign(num):\n        if num < 0:\n            return -1\n        if num > 0:\n            return 1\n        return 0\n\n    signs = [sign(num) for num in arr]\n    result = 1\n    for sign in signs:\n        result *= sign\n    result *= sum(arr)\n    return result\n\n\nif __name__ == '__main__':\n    print(prod_signs([1, 2, 2, -4]))\n    print(prod_signs([0, 1]))\n    print(prod_signs([]))"
    },
    {
      "rank": 14,
      "score": 10.0,
      "candidate": "if not arr:\n        return None\n\n    result = 0\n    for num in arr:\n        result *= int(num / abs(num))\n        result += abs(num)\n\n    return result\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 15,
      "score": 10.0,
      "candidate": "if not arr:\n        return None\n    product = 1\n    sign = 1\n    result = 0\n    for num in arr:\n        if num > 0:\n            sign = 1\n        elif num < 0:\n            sign = -1\n        else:\n            sign = 0\n        result += sign * num\n        product *= sign\n    return result * product\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 16,
      "score": 10.0,
      "candidate": "if not arr:\n        return None\n    prod = 1\n    for num in arr:\n        if num > 0:\n            prod *= 1\n        elif num < 0:\n            prod *= -1\n        else:\n            prod *= 0\n    return sum(abs(num) * prod for num in arr)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 17,
      "score": 10.0,
      "candidate": "if not arr:\n        return None\n    res = 0\n    for elem in arr:\n        if elem < 0:\n            res += elem * -1\n        elif elem > 0:\n            res += elem\n    return res * prod_signs_helper(arr)\n\n\ndef prod_signs_helper(arr):\n    \"\"\"\n    Helper function for prod_signs.\n    \"\"\"\n    if len(arr) == 1:\n        return 1\n    if arr[0] < 0:\n        return -1\n    elif arr[0] > 0:\n        return 1\n    return 0\n\n\ndef test_function():\n    assert prod_signs([1, 2, 2, -4]) == -9\n    assert prod_signs([0, 1]) == 0\n    assert prod_signs([]) == None\n    assert prod_signs([-1, -2, -3, -4]) == 24\n    assert prod_signs([1, -2, -3, -4]) == -24\n    assert prod_signs([-1, -2, 3, -4]) == 24\n    assert prod_signs([1, -2, 3, -4]) == -24\n    assert prod_signs([-1, -2, -3, 4]) == 24\n    assert prod_signs([1, 2, 3, 4]) == 24\n    assert prod_signs([1, 2, 3, 4, 5]) == 120\n\n\nif __name__ == '__main__':\n    test_function()"
    },
    {
      "rank": 18,
      "score": 10.0,
      "candidate": "if arr == []:\n        return None\n    else:\n        return sum([abs(i) for i in arr]) * (-1 if arr.count(-1) > arr.count(1) else 1)\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 19,
      "score": 10.0,
      "candidate": "if len(arr) == 0:\n        return None\n    elif len(arr) == 1:\n        return arr[0]\n    else:\n        result = 0\n        for i in arr:\n            if i < 0:\n                result *= -1\n            elif i == 0:\n                return 0\n        return result * sum(arr)\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 20,
      "score": 10.0,
      "candidate": "if len(arr) == 0:\n        return None\n\n    total = 1\n    for num in arr:\n        if num == 0:\n            total = 0\n        elif num > 0:\n            total *= 1\n        elif num < 0:\n            total *= -1\n\n    total_sum = 0\n    for num in arr:\n        if num == 0:\n            continue\n        total_sum += abs(num)\n\n    return total_sum * total\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 21,
      "score": 10.0,
      "candidate": "if not arr:\n        return None\n    else:\n        prod = 1\n        for elem in arr:\n            if elem > 0:\n                prod *= 1\n            elif elem < 0:\n                prod *= -1\n            else:\n                prod *= 0\n        return abs(prod) * sum(map(abs, arr))\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 22,
      "score": 9.986744365529319,
      "candidate": "if not arr:\n        return None\n\n    # Check for negative values\n    is_neg = any(x < 0 for x in arr)\n\n    # Multiply all values by 1 or -1\n    if is_neg:\n        arr = [abs(x) * (-1) for x in arr]\n    else:\n        arr = [abs(x) for x in arr]\n\n    # Calculate the sum of the array\n    res = sum(arr)\n\n    # Multiply sum by product of signs\n    if is_neg:\n        res *= -1\n\n    return res\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 23,
      "score": 9.973356255015277,
      "candidate": "if not arr:\n        return None\n    arr_str = [str(i) for i in arr]\n    sign_str = \"\".join(arr_str)\n    return sum([int(i) for i in sign_str]) * int(sign_str.count(\"1\") / 2 - sign_str.count(\"-1\") / 2)\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 24,
      "score": 9.888591632631963,
      "candidate": "if arr == []:\n        return None\n    if len(arr) == 1:\n        return arr[0]\n\n    def prod_signs_helper(arr, accum):\n        if len(arr) == 1:\n            return accum * arr[0]\n        if arr[0] == 0:\n            return prod_signs_helper(arr[1:], accum * arr[0])\n        if arr[0] == 1:\n            return prod_signs_helper(arr[1:], accum * arr[0])\n        if arr[0] == -1:\n            return prod_signs_helper(arr[1:], accum * arr[0])\n\n    return prod_signs_helper(arr, 1)\n\n\n# Tests\nassert prod_signs([1, 2, 2, -4]) == -9\nassert prod_signs([0, 1]) == 0\nassert prod_signs([]) == None"
    },
    {
      "rank": 25,
      "score": 9.82853545365939,
      "candidate": "if not arr:\n        return None\n    # Your code here\n    # return sum([abs(x) for x in arr]) * (-1 if arr[0] < 0 else 1) * prod([1 if x > 0 else (-1 if x < 0 else 0) for x in arr])\n    return sum(abs(x) for x in arr) * (1 if arr[0] >= 0 else -1) * prod([1 if x >= 0 else (-1 if x < 0 else 0) for x in arr])\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod(verbose=True)"
    },
    {
      "rank": 26,
      "score": 9.80824001923875,
      "candidate": "# your code here\n    if not arr:\n        return None\n\n    res = 0\n    for num in arr:\n        if num > 0:\n            res += 1\n        elif num < 0:\n            res -= 1\n        else:\n            res += 0\n    return res * product(arr)\n\n\ndef product(arr):\n    if not arr:\n        return 1\n    res = 1\n    for num in arr:\n        res *= num\n    return res\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 27,
      "score": 9.777763684730042,
      "candidate": "if len(arr) == 0:\n        return None\n\n    product_of_signs = 1\n    product_of_numbers = 1\n\n    for i in arr:\n        if i < 0:\n            product_of_signs *= -1\n\n        product_of_numbers *= abs(i)\n\n    return product_of_signs * product_of_numbers\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 28,
      "score": 9.777368553475123,
      "candidate": "if not arr:\n        return None\n    s = 0\n    p = 1\n    for i in arr:\n        s += abs(i)\n        if i < 0:\n            p *= -1\n    return s * p\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 29,
      "score": 9.761305690796105,
      "candidate": "if arr == []:\n        return None\n    res = 0\n    for num in arr:\n        if num == 0:\n            res += 0\n        elif num > 0:\n            res += 1\n        elif num < 0:\n            res -= 1\n    return res * np.prod(arr)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 30,
      "score": 9.733657642893958,
      "candidate": "# your code\n    # if not arr:\n    #     return None\n    # if len(arr) == 1:\n    #     return arr[0]\n    # if len(arr) == 2:\n    #     return arr[0] * arr[1]\n    # return arr[0] * arr[1] * arr[2]\n    # return arr[0] * prod_signs(arr[1:])\n\n    # return arr[0] * prod_signs(arr[1:])\n    # if not arr:\n    #     return None\n    # return arr[0] * prod_signs(arr[1:])\n    # return arr[0] * prod_signs(arr[1:])\n    # return arr[0] * prod_signs(arr[1:])\n    # return arr[0] * prod_signs(arr[1:])\n    # return arr[0] * prod_signs(arr[1:])\n    # return arr[0] * prod_signs(arr[1:])\n    # return arr[0] * prod_signs(arr[1:])\n    # return arr[0] * prod_signs(arr[1:])\n    # return arr[0] * prod_signs(arr[1:])\n    # return arr[0] * prod_signs(arr[1:])\n    # return arr[0] * prod_signs(arr[1:])\n    # return arr[0] * prod_signs(arr[1:])\n    # return arr[0] * prod_signs(arr[1:])\n    # return arr[0] * prod_signs(arr[1:])\n    # return arr[0] * prod_signs(arr[1:])\n    # return arr[0] * prod_signs(arr[1:])\n    # return arr[0] * prod_signs(arr[1:])\n    # return arr[0] * prod_signs(arr[1:])\n    # return arr[0] * prod_signs(arr[1:])\n    # return arr[0] * prod_signs(arr[1"
    },
    {
      "rank": 31,
      "score": 9.59065605961777,
      "candidate": "# Your code here\n    if arr == []:\n        return None\n    res = 0\n    for i in arr:\n        if i > 0:\n            res += 1\n        elif i < 0:\n            res -= 1\n        else:\n            res += 0\n    return res * sum([abs(i) for i in arr])\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 32,
      "score": 9.574132376353749,
      "candidate": "if not arr:\n        return None\n\n    arr_list = [int(i) for i in arr]\n    arr_list_copy = arr_list[:]\n\n    for i in arr_list:\n        arr_list_copy.remove(i)\n\n        if i > 0:\n            arr_list_copy = [x if x > 0 else 0 for x in arr_list_copy]\n\n        elif i < 0:\n            arr_list_copy = [x if x < 0 else 0 for x in arr_list_copy]\n\n        else:\n            arr_list_copy = [0]\n\n    return abs(i) * (-1)**(len(arr_list_copy))\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 33,
      "score": 9.557403549090152,
      "candidate": "# your code here\n    if len(arr) == 0:\n        return None\n    prod = 1\n    sum_mag = 0\n    for i in arr:\n        if i == 0:\n            prod *= 0\n            sum_mag += 0\n        elif i > 0:\n            prod *= 1\n            sum_mag += i\n        elif i < 0:\n            prod *= -1\n            sum_mag += i\n    return sum_mag * prod\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 34,
      "score": 9.548287849510722,
      "candidate": "if not arr:\n        return None\n\n    res = 0\n    for i in arr:\n        if i > 0:\n            res += 1\n        elif i < 0:\n            res -= 1\n        else:\n            res += 0\n\n    return abs(res) * (1 if res > 0 else -1) * (1 if res > 0 else -1)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 35,
      "score": 9.47284317110102,
      "candidate": "if not arr:\n        return None\n    return sum([abs(i) for i in arr]) * prod([1 if i > 0 else -1 if i < 0 else 0 for i in arr])\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 36,
      "score": 9.274922054164483,
      "candidate": "if len(arr) == 0:\n        return None\n    if len(arr) == 1:\n        return arr[0]\n    result = 1\n    for item in arr:\n        if item == 0:\n            result = 0\n            break\n        elif item > 0:\n            result *= 1\n        elif item < 0:\n            result *= -1\n    return result\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 37,
      "score": 9.264599501597669,
      "candidate": "# your code here\n    if not arr:\n        return None\n    prod = 1\n    for i in arr:\n        if i == 0:\n            return 0\n        elif i > 0:\n            prod *= 1\n        else:\n            prod *= -1\n    return abs(prod) * sum([abs(i) for i in arr])\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 38,
      "score": 9.234050852198141,
      "candidate": "if not arr:\n        return None\n\n    if not arr[0]:\n        return 0\n\n    return sum(abs(x) for x in arr) * (-1 if sum(map(lambda x: x < 0, arr)) > 0 else 1)\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 39,
      "score": 9.226766272351448,
      "candidate": "if len(arr) == 0:\n        return None\n    if len(arr) == 1:\n        return arr[0]\n    return sum(abs(num) for num in arr) * (-1 if arr[0] < 0 else 1)\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 40,
      "score": 9.205959372648458,
      "candidate": "if not arr:\n        return None\n    return sum(abs(i) for i in arr) * (-1 if arr[0] < 0 else 1)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 41,
      "score": 9.183391466815202,
      "candidate": "# your code here\n    if len(arr) == 0:\n        return None\n    return sum(arr) * reduce(lambda x, y: x * y, map(lambda x: 1 if x > 0 else -1 if x < 0 else 0, arr))\n\n\nif __name__ == '__main__':\n    print(prod_signs([1, 2, 2, -4]))\n    print(prod_signs([0, 1]))\n    print(prod_signs([]))"
    },
    {
      "rank": 42,
      "score": 9.122564458729856,
      "candidate": "if not arr:\n        return None\n    if len(arr) == 1:\n        return arr[0]\n    if len(arr) == 2:\n        return arr[0] * arr[1]\n\n    return sum([abs(i) * prod_signs(arr[1:]) for i in arr])\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 43,
      "score": 8.973005557553902,
      "candidate": "if len(arr) == 0:\n        return None\n    return sum(abs(i) for i in arr) * (1 if all(i >= 0 for i in arr) else -1 if all(i < 0 for i in arr) else 0)\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 44,
      "score": 8.910084504002544,
      "candidate": "if len(arr) == 0:\n        return None\n    elif len(arr) == 1:\n        return abs(arr[0])\n    else:\n        return sum([abs(x) for x in arr]) * prod([abs(x) for x in arr])\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 45,
      "score": 8.902145503295483,
      "candidate": "if not arr:\n        return None\n\n    res = 0\n    prod = 1\n\n    for x in arr:\n        if x > 0:\n            res += 1\n            prod *= x\n        elif x < 0:\n            res -= 1\n            prod *= x\n        else:\n            res = None\n            break\n\n    return prod * res\n\n\nif __name__ == \"__main__\":\n    print(prod_signs([1, 2, 2, -4]))\n    print(prod_signs([0, 1]))\n    print(prod_signs([]))"
    },
    {
      "rank": 46,
      "score": 8.85571690049604,
      "candidate": "if not arr:\n        return None\n    elif len(arr) == 1:\n        return abs(arr[0])\n    else:\n        return abs(arr[0] * arr[1] * prod_signs(arr[2:]))\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 47,
      "score": 8.855395696632057,
      "candidate": "if not arr:\n        return None\n    return sum([abs(x) for x in arr]) * (-1 if arr[0] < 0 else 1)\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 48,
      "score": 8.8281618090209,
      "candidate": "if not arr:\n        return None\n    signs = [1 if i > 0 else -1 if i < 0 else 0 for i in arr]\n    return sum([signs[i] * signs[i + 1] * i * (arr[i + 1] if i + 1 < len(arr) else 1) for i in range(len(arr) - 1)])\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 49,
      "score": 8.81367773444215,
      "candidate": "if len(arr) == 0:\n        return None\n    elif len(arr) == 1:\n        return arr[0]\n    else:\n        # get the sign of each number\n        signs = [1 if i > 0 else 0 if i == 0 else -1 for i in arr]\n        # get the product of all signs\n        sign_prod = 1\n        for sign in signs:\n            sign_prod *= sign\n        # get the product of each number\n        num_prod = 1\n        for num in arr:\n            num_prod *= num\n        # get the magnitude of each number\n        num_magnitudes = [abs(num) for num in arr]\n        # get the sum of the magnitudes\n        num_mag_sum = sum(num_magnitudes)\n        # return the sum of magnitudes multiplied by sign product\n        return num_mag_sum * sign_prod\n\n\nprint(prod_signs([1, 2, 2, -4]))\nprint(prod_signs([0, 1]))\nprint(prod_signs([]))\nprint(prod_signs([1, 2, 3, 4, 5, 6, 7, 8, 9]))\nprint(prod_signs([1, 2, 3, 4, -5, 6, -7, 8, -9]))\nprint(prod_signs([1, -2, 3, -4, 5, -6, 7, 8, -9]))\nprint(prod_signs([-1, -2, -3, -4, -5, -6, -7, -8, -9]))"
    },
    {
      "rank": 50,
      "score": 8.76828871349479,
      "candidate": "if not arr:\n        return None\n    res = 0\n    for i in arr:\n        if i > 0:\n            res += 1\n        elif i < 0:\n            res -= 1\n        else:\n            res = 0\n    return res * (abs(reduce(lambda x, y: x * y, arr)) if arr else 0)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 51,
      "score": 8.701078161001123,
      "candidate": "if len(arr) == 0:\n        return None\n    elif len(arr) == 1:\n        return arr[0]\n    else:\n        product = 1\n        for i in arr:\n            product *= i\n        return sum([abs(i) for i in arr]) * product\n\n\nif __name__ == '__main__':\n    print(prod_signs([1, 2, 2, -4]))\n    print(prod_signs([0, 1]))\n    print(prod_signs([]))"
    },
    {
      "rank": 52,
      "score": 8.632293453617281,
      "candidate": "if not arr:\n        return None\n    return sum([abs(i) for i in arr])*reduce(lambda x, y: x*y, [1 if i > 0 else -1 if i < 0 else 0 for i in arr])\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 53,
      "score": 8.625142247198651,
      "candidate": "if not arr:\n        return None\n    if len(arr) == 1:\n        return arr[0]\n    if len(arr) == 2:\n        return arr[0]*arr[1]\n    return arr[0]*arr[1]*arr[2]\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 54,
      "score": 8.623000730200317,
      "candidate": "if arr == []:\n        return None\n    if arr == [0]:\n        return 0\n    return sum(abs(x) for x in arr) * (-1)**(len(arr))\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 55,
      "score": 8.610076160146226,
      "candidate": "if not arr:\n        return None\n    signs = [1 if x > 0 else -1 if x < 0 else 0 for x in arr]\n    prod = 1\n    for sign in signs:\n        prod *= sign\n    return sum([abs(x) for x in arr]) * prod\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 56,
      "score": 8.60156811074208,
      "candidate": "if not arr:\n        return None\n    return sum([abs(i) * (-1) ** i for i in arr])\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 57,
      "score": 8.565425580227462,
      "candidate": "if not arr:\n        return None\n    return sum([abs(i) for i in arr]) * (-1) ** (sum([1 if i < 0 else 0 for i in arr]))\n\n\nif __name__ == '__main__':\n    print(prod_signs([1, 2, 2, -4]))\n    print(prod_signs([0, 1]))\n    print(prod_signs([]))"
    },
    {
      "rank": 58,
      "score": 8.499905739299377,
      "candidate": "if not arr:\n        return None\n    if len(arr) == 1:\n        return arr[0]\n    return sum(arr) * prod(arr)\n\n\ndef prod(arr):\n    \"\"\"\n    Returns product of all elements in the array\n    >>> prod([1, 2, 3]) == 6\n    >>> prod([-1, 2, -3]) == -6\n    \"\"\"\n    return 1 if len(arr) == 0 else prod(arr[1:]) * arr[0]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 59,
      "score": 8.437695832075478,
      "candidate": "if not arr:\n        return None\n    product = 1\n    sum_magnitude = 0\n    for number in arr:\n        product *= number\n        sum_magnitude += abs(number)\n    return product * (-1) ** (sum_magnitude)\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 60,
      "score": 8.386620303250325,
      "candidate": "if not arr:\n        return None\n    signs = [1 if x > 0 else -1 if x < 0 else 0 for x in arr]\n    result = sum([abs(x) * y for x, y in zip(arr, signs)]) * prod([1 if x > 0 else -1 if x < 0 else 0 for x in arr])\n    return result\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 61,
      "score": 8.375312293858853,
      "candidate": "# your code here\n    if not arr:\n        return None\n\n    signs = [1 if x > 0 else -1 if x < 0 else 0 for x in arr]\n    return sum([x * y for x, y in zip(signs, [x * y for x, y in zip(signs, signs[1:])])])\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 62,
      "score": 8.351614956112536,
      "candidate": "# your code here\n    if not arr:\n        return None\n    else:\n        p = 1\n        s = 0\n        for n in arr:\n            if n > 0:\n                p = p * n\n                s += 1\n            elif n < 0:\n                p = p * n\n                s -= 1\n            else:\n                s = 0\n        return s * p\n\n\nif __name__ == '__main__':\n    print(prod_signs([1, 2, 2, -4]))\n    print(prod_signs([0, 1]))\n    print(prod_signs([]))"
    },
    {
      "rank": 63,
      "score": 8.334608500525688,
      "candidate": "if not arr:\n        return None\n    return sum([abs(i) for i in arr]) * prod([-1 if i < 0 else 1 for i in arr])\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 64,
      "score": 8.331556294201176,
      "candidate": "if not arr:\n        return None\n    prod = 1\n    signs = [1, -1, 0]\n    for num in arr:\n        prod *= signs[num]\n    return sum(abs(num) for num in arr) * prod\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 65,
      "score": 8.327375965969855,
      "candidate": "if not arr:\n        return None\n    if len(arr) == 1:\n        return arr[0]\n    if len(arr) == 2:\n        return arr[0] * arr[1]\n    return arr[0] * arr[1] * arr[2]\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 66,
      "score": 8.327367757082776,
      "candidate": "if not arr:\n        return None\n    signs = [1 if i > 0 else -1 if i < 0 else 0 for i in arr]\n    return sum(signs) * prod(signs)\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 67,
      "score": 8.298597569547805,
      "candidate": "if len(arr) == 0:\n        return None\n    total = 0\n    for i in arr:\n        if i > 0:\n            total += 1\n        elif i < 0:\n            total -= 1\n    return total * sum(arr)\n\n\nif __name__ == \"__main__\":\n    print(prod_signs([1, 2, 2, -4]))\n    print(prod_signs([0, 1]))\n    print(prod_signs([]))"
    },
    {
      "rank": 68,
      "score": 8.294940769211511,
      "candidate": "if not arr:\n        return None\n    total = 0\n    for num in arr:\n        if num < 0:\n            total -= num\n        elif num > 0:\n            total += num\n    return total * prod_sign(arr)\n\n\ndef prod_sign(arr):\n    \"\"\"\n    Return product of all signs of each number in the array\n    \"\"\"\n    result = 1\n    for num in arr:\n        if num > 0:\n            result *= 1\n        elif num < 0:\n            result *= -1\n        else:\n            result *= 0\n    return result"
    },
    {
      "rank": 69,
      "score": 8.289838256518838,
      "candidate": "if len(arr) == 0:\n        return None\n    # set up sign array\n    sign_arr = []\n    for i in arr:\n        if i < 0:\n            sign_arr.append(-1)\n        elif i > 0:\n            sign_arr.append(1)\n        else:\n            sign_arr.append(0)\n    # set up product\n    prod = 1\n    for i in sign_arr:\n        prod *= i\n    # set up sum of signs\n    sum = 0\n    for i in arr:\n        sum += abs(i)\n    return sum * prod\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 70,
      "score": 8.251903304236286,
      "candidate": "if not arr:\n        return None\n    else:\n        return sum(abs(arr[i] * arr[i + 1]) for i in range(len(arr) - 1))\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 71,
      "score": 8.214125058964552,
      "candidate": "if len(arr) == 0:\n        return None\n    signs = [1, -1, 0]\n    signs_dict = {i: 0 for i in signs}\n    for i in arr:\n        signs_dict[i > 0] += 1\n        signs_dict[i < 0] += 1\n    return sum(signs_dict[i] * i for i in signs)\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 72,
      "score": 8.211579567659316,
      "candidate": "if not arr:\n        return None\n    if len(arr) == 1:\n        return arr[0]\n\n    res = 1\n    for i in arr:\n        if i < 0:\n            res *= -1\n    return res * sum(map(lambda x: abs(x), arr))\n\n\nif __name__ == \"__main__\":\n    print(prod_signs([1, 2, 2, -4]))\n    print(prod_signs([0, 1]))\n    print(prod_signs([]))"
    },
    {
      "rank": 73,
      "score": 8.209707251476969,
      "candidate": "if not arr:\n        return None\n    elif len(arr) == 1:\n        return abs(arr[0])\n    elif len(arr) == 2:\n        return abs(arr[0] * arr[1])\n    else:\n        # product of all signs of each number in the array\n        prod = 1\n        for i in arr:\n            prod *= i\n\n        # sum of magnitudes of integers multiplied by product of all signs\n        return sum(abs(i) * prod for i in arr)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 74,
      "score": 8.2048573255218,
      "candidate": "if not arr:\n        return None\n    res = 1\n    for num in arr:\n        if num == 0:\n            res = 0\n            break\n        elif num > 0:\n            res *= 1\n        else:\n            res *= -1\n    return abs(res * sum([abs(num) for num in arr]))\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 75,
      "score": 8.193565922652176,
      "candidate": "if not arr:\n        return None\n    signs = [1 if i > 0 else (-1 if i < 0 else 0) for i in arr]\n    return sum(signs) * prod(arr)\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 76,
      "score": 8.179564342560925,
      "candidate": "if len(arr) == 0:\n        return None\n    elif len(arr) == 1:\n        return arr[0]\n    else:\n        product = 1\n        for i in range(len(arr)):\n            if arr[i] == 0:\n                product = 0\n            elif arr[i] > 0:\n                product *= 1\n            else:\n                product *= -1\n        sum_signs = sum(arr)\n        return sum_signs * product\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 77,
      "score": 8.172253082181854,
      "candidate": "if len(arr) == 0:\n        return None\n    prod = 1\n    sum = 0\n    for num in arr:\n        prod *= 1 if num > 0 else -1 if num < 0 else 0\n    for num in arr:\n        sum += abs(num) if num > 0 else -abs(num) if num < 0 else 0\n    return sum * prod\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 78,
      "score": 8.163300679823958,
      "candidate": "if arr == []:\n        return None\n    elif arr.count(0) == len(arr):\n        return 0\n    else:\n        return sum([abs(x) for x in arr]) * prod([abs(x) for x in arr])\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 79,
      "score": 8.105983444291466,
      "candidate": "if len(arr) == 0:\n        return None\n    else:\n        return sum(arr) * (1 if arr[0] >= 0 else -1) * prod([1 if x >= 0 else -1 for x in arr])\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 80,
      "score": 8.040197642997851,
      "candidate": "if not arr:\n        return None\n\n    return sum([abs(x) * (-1) ** (x < 0) for x in arr]) * (-1) ** (sum([1 for x in arr if x < 0]) % 2 == 1)\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 81,
      "score": 8.024835682833125,
      "candidate": "if len(arr) == 0:\n        return None\n    elif len(arr) == 1:\n        return arr[0]\n\n    def prod_signs_helper(arr, idx):\n        if idx == 0:\n            return 1\n        if arr[idx] == 0:\n            return 0\n        return arr[idx] * prod_signs_helper(arr, idx - 1)\n\n    prod = prod_signs_helper(arr, len(arr) - 1)\n\n    return sum(abs(i) for i in arr) * prod\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 82,
      "score": 7.990432406683839,
      "candidate": "if not arr:\n        return None\n    s = 0\n    for i in arr:\n        if i == 0:\n            s += 0\n        elif i > 0:\n            s += 1\n        else:\n            s += -1\n    return s * arr[0] * arr[0] * arr[1] * arr[1]\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 83,
      "score": 7.938028884277233,
      "candidate": "if not arr:\n        return None\n    return sum([abs(i) for i in arr]) * (-1) ** (len(arr) - 1)\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 84,
      "score": 7.915588979966494,
      "candidate": "if not arr:\n        return None\n    elif len(arr) == 1:\n        return arr[0]\n    else:\n        return sum(arr) * prod([sign(i) for i in arr])\n\n\ndef sign(i):\n    if i > 0:\n        return 1\n    elif i < 0:\n        return -1\n    else:\n        return 0\n\n\nprint(prod_signs([1, 2, 2, -4]))\nprint(prod_signs([0, 1]))\nprint(prod_signs([]))"
    },
    {
      "rank": 85,
      "score": 7.780351419995229,
      "candidate": "if len(arr) == 0:\n        return None\n    result = 0\n    for x in arr:\n        if x > 0:\n            result += 1\n        elif x < 0:\n            result -= 1\n        else:\n            result += 0\n    return result * arr[0] * arr[1]\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 86,
      "score": 7.738292593776799,
      "candidate": "if not arr:\n        return None\n    result = 1\n    for num in arr:\n        result *= num\n    return result\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 87,
      "score": 7.705183449260731,
      "candidate": "if not arr:\n        return None\n    return sum(abs(x) for x in arr) * prod(x for x in arr if x)\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 88,
      "score": 7.5819855281879285,
      "candidate": "if arr == []:\n        return None\n\n    product = 1\n    sum_of_magnitudes = 0\n    for i in arr:\n        product = product * i / abs(i)\n        sum_of_magnitudes += abs(i)\n    return sum_of_magnitudes * product\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 89,
      "score": 7.562924366763077,
      "candidate": "if len(arr) == 0:\n        return None\n\n    res = 1\n    for item in arr:\n        res *= item\n    return abs(res)\n\n\nif __name__ == '__main__':\n    print(prod_signs([1, 2, 2, -4]))\n    print(prod_signs([0, 1]))\n    print(prod_signs([]))"
    },
    {
      "rank": 90,
      "score": 7.4878043221155455,
      "candidate": "if not arr:\n        return None\n    res = 0\n    for i in arr:\n        if i == 0:\n            res += 0\n        elif i > 0:\n            res += 1\n        else:\n            res += -1\n    return res * arr[0] * arr[0] * arr[0]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 91,
      "score": 7.134571892399572,
      "candidate": "if arr == []:\n        return None\n\n    prod = 1\n    sum = 0\n\n    for i in arr:\n        if i == 0:\n            prod *= 0\n        elif i > 0:\n            prod *= 1\n        else:\n            prod *= -1\n        sum += i * prod\n\n    return sum\n\n\nif __name__ == '__main__':\n    print(prod_signs([1, 2, 2, -4]))\n    print(prod_signs([0, 1]))\n    print(prod_signs([]))"
    },
    {
      "rank": 92,
      "score": 3.0,
      "candidate": "if not arr:\n        return None\n    arr_sign = [1 if i >= 0 else -1 for i in arr]\n    return sum(arr) * prod(arr_sign)\n\n\ndef prod(arr):\n    return 1 if len(arr) == 0 else prod(arr[:-1]) * arr[-1]\n\n\nif __name__ == '__main__':\n    print(prod_signs([1, 2, 2, -4]))\n    print(prod_signs([0, 1]))\n    print(prod_signs([]))"
    },
    {
      "rank": 93,
      "score": 3.0,
      "candidate": "if len(arr) == 0:\n        return None\n\n    total = 0\n    sign = 1\n\n    for i in arr:\n        if i == 0:\n            sign = 0\n        elif i > 0:\n            sign = 1\n        else:\n            sign = -1\n        total += i * sign\n\n    return total * sign\n\n\nprint(prod_signs([1, 2, 2, -4]))\nprint(prod_signs([0, 1]))\nprint(prod_signs([]))"
    },
    {
      "rank": 94,
      "score": 3.0,
      "candidate": "if len(arr) == 0:\n        return None\n    elif len(arr) == 1:\n        return arr[0]\n    else:\n        sum = 0\n        product = 1\n        for i in arr:\n            if i < 0:\n                product *= -1\n            sum += i\n        return sum * product\n\n\ndef test_function():\n    assert prod_signs([1, 2, 2, -4]) == -9\n    assert prod_signs([0, 1]) == 0\n    assert prod_signs([]) == None\n    assert prod_signs([1, -2, 3, 4, -5]) == 12\n    assert prod_signs([1, -2, 3, -4, -5]) == 0\n    assert prod_signs([-1, -2, -3, -4, -5]) == 60\n    assert prod_signs([1, -2, 3, -4, 5]) == 0\n    assert prod_signs([1, -2, 3, -4, 5, 6, -7, 8, -9, -10]) == 30\n\n\nif __name__ == '__main__':\n    test_function()"
    },
    {
      "rank": 95,
      "score": 3.0,
      "candidate": "pass"
    },
    {
      "rank": 96,
      "score": 3.0,
      "candidate": "pass\n\n\nif __name__ == '__main__':\n    # These \"asserts\" using only for self-checking and not necessary for auto-testing\n    assert prod_signs([1, 2, 2, -4]) == -9, \"Example\"\n    assert prod_signs([0, 1]) == 0, \"Zero\"\n    assert prod_signs([]) == None, \"Empty\"\n    assert prod_signs([-1, -2, 2, -4]) == 9, \"Negative\"\n    assert prod_signs([1, 1, 1, 1]) == 4, \"All one\"\n    assert prod_signs([-1, -2, -3, 4]) == 24, \"Mixed\"\n    print(\"Coding complete? Click 'Check' to review your tests and earn cool rewards!\")"
    },
    {
      "rank": 97,
      "score": 3.0,
      "candidate": "# your code\n    # raise NotImplementedError()\n    if len(arr) == 0:\n        return None\n    result = 0\n    for i in range(len(arr)):\n        if arr[i] == 0:\n            result += 0\n        elif arr[i] > 0:\n            result += 1\n        elif arr[i] < 0:\n            result += -1\n    return result * arr[0] * arr[1] * arr[2] * arr[3]\n\n\nif __name__ == '__main__':\n    print('Example:')\n    print(prod_signs([1, 2, 2, -4]))\n\n    # These \"asserts\" are used for self-checking and not for an auto-testing\n    assert prod_signs([1, 2, 2, -4]) == -9\n    assert prod_signs([0, 1]) == 0\n    assert prod_signs([]) == None\n    print('Wow, you are doing pretty good. Time to check it!')"
    },
    {
      "rank": 98,
      "score": 3.0,
      "candidate": "if not arr:\n        return None\n    return sum(abs(i) for i in arr) * (1 if arr[0] > 0 else -1 if arr[0] < 0 else 0)\n\n\nif __name__ == '__main__':\n    print('Example:')\n    print(prod_signs([1, 2, 2, -4]))\n\n    # These \"asserts\" are used for self-checking and not for an auto-testing\n    assert prod_signs([1, 2, 2, -4]) == -9\n    assert prod_signs([0, 1]) == 0\n    assert prod_signs([]) == None\n    print('Wow, you are doing pretty good. Time to check it!')"
    },
    {
      "rank": 99,
      "score": 3.0,
      "candidate": "if not arr:\n        return None\n\n    signs = []\n    for i in arr:\n        if i < 0:\n            signs.append(-1)\n        elif i == 0:\n            signs.append(0)\n        else:\n            signs.append(1)\n\n    return sum([abs(i) for i in arr]) * (1 * signs[0]) * (1 * signs[0])\n\n\nif __name__ == \"__main__\":\n    print(prod_signs([1, 2, 2, -4]))\n    print(prod_signs([0, 1]))\n    print(prod_signs([]))"
    },
    {
      "rank": 100,
      "score": 3.0,
      "candidate": "# your code here\n    if len(arr) == 0:\n        return None\n    if len(arr) == 1:\n        return arr[0]\n    if len(arr) == 2:\n        if arr[0] * arr[1] < 0:\n            return abs(arr[0] * arr[1])\n        elif arr[0] * arr[1] == 0:\n            return 0\n        elif arr[0] * arr[1] > 0:\n            return 1\n    if len(arr) > 2:\n        if arr[0] * arr[1] < 0:\n            arr.pop(0)\n            arr.pop(0)\n            arr.insert(0, arr[0] * arr[1])\n            return arr[0]\n        elif arr[0] * arr[1] == 0:\n            arr.pop(0)\n            arr.pop(0)\n            arr.insert(0, 0)\n            return arr[0]\n        elif arr[0] * arr[1] > 0:\n            arr.pop(0)\n            arr.pop(0)\n            arr.insert(0, 1)\n            return arr[0]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    }
  ]
}