{
  "timestamp": "2025-09-14T21:52:36.234578",
  "method": "improved_llm_judge",
  "judge_model": "codellama/CodeLlama-7b-Python-hf",
  "target_model": "codellama-7b",
  "dataset": "humaneval",
  "problem_number": 107,
  "total_candidates": 100,
  "results": [
    {
      "rank": 1,
      "score": 10.0,
      "candidate": "# palindrome is the number itself\n    # odd palindrome is the number itself + n, n is the number of palindrome\n    # even palindrome is the number itself - n, n is the number of palindrome\n    # palindrome: 1, 2, 3, 4, 5, 6, 7, 8, 9, 11\n    # odd palindrome: 11, 12, 13, 14, 15, 16, 17, 18, 19, 21\n    # even palindrome: 1, 2, 3, 4, 5, 6, 7, 8, 9, 10\n    # 1. odd palindrome: 11, 12, 13, 14, 15, 16, 17, 18, 19, 21\n    # 2. even palindrome: 1, 2, 3, 4, 5, 6, 7, 8, 9, 10\n    # 3. odd palindrome = even palindrome + 1\n    # 4. odd palindrome = even palindrome * 2\n    # 5. even palindrome = odd palindrome - 1\n    # 6. even palindrome = odd palindrome / 2\n\n    # [even, odd] = [1, 10]\n    # odd palindrome = even palindrome + 1\n    # odd palindrome = even palindrome * 2\n    # even palindrome = odd palindrome - 1\n    # even palindrome = odd palindrome / 2\n\n    # [even, odd] = [1, 10]\n    # odd palindrome = even palindrome + 1\n    # odd palindrome = even palindrome * 2\n    # even palindrome = odd palindrome - 1\n    # even palindrome = odd palindrome / 2\n\n    # [even, odd] = [1, 10]\n    #"
    },
    {
      "rank": 2,
      "score": 10.0,
      "candidate": "# count even and odd integer palindromes that fall within the range(1, n), inclusive.\n    even_palindromes, odd_palindromes = 0, 0\n    for i in range(1, n + 1):\n        if str(i) == str(i)[::-1]:\n            if i % 2 == 0:\n                even_palindromes += 1\n            else:\n                odd_palindromes += 1\n    return (even_palindromes, odd_palindromes)\n\n\ndef test_even_odd_palindrome():\n    assert even_odd_palindrome(3) == (1, 2)\n    assert even_odd_palindrome(12) == (4, 6)\n\n\nif __name__ == '__main__':\n    test_even_odd_palindrome()"
    },
    {
      "rank": 3,
      "score": 10.0,
      "candidate": "even_palindromes, odd_palindromes = 0, 0\n    for i in range(1, n+1):\n        if i == int(str(i)[::-1]):\n            if i % 2 == 0:\n                even_palindromes += 1\n            else:\n                odd_palindromes += 1\n    return even_palindromes, odd_palindromes"
    },
    {
      "rank": 4,
      "score": 10.0,
      "candidate": "def is_palindrome(n):\n        return str(n) == str(n)[::-1]\n\n    def count_palindromes(n, is_even):\n        count = 0\n        for i in range(1, n + 1):\n            if is_palindrome(i) and i % 2 == is_even:\n                count += 1\n        return count\n\n    return count_palindromes(n, 0), count_palindromes(n, 1)\n\n\ndef test_even_odd_palindrome():\n    assert (1, 2) == even_odd_palindrome(3)\n    assert (4, 6) == even_odd_palindrome(12)\n    assert (0, 0) == even_odd_palindrome(11)\n\n\nif __name__ == '__main__':\n    test_even_odd_palindrome()"
    },
    {
      "rank": 5,
      "score": 10.0,
      "candidate": "# Initialization\n    # total_palindromes = 0\n    # even_palindromes = 0\n    # odd_palindromes = 0\n    #\n    # # Iteration\n    # for i in range(1, n + 1):\n    #     # Get the length of the number\n    #     length = len(str(i))\n    #\n    #     # Get the middle index of the number\n    #     middle = length // 2\n    #\n    #     # Get the first and last half of the number\n    #     first_half = str(i)[:middle]\n    #     last_half = str(i)[-1:-1 - middle:-1]\n    #\n    #     # Check if the number is a palindrome\n    #     if first_half == last_half:\n    #         total_palindromes += 1\n    #         if i % 2 == 0:\n    #             even_palindromes += 1\n    #         else:\n    #             odd_palindromes += 1\n    #\n    # return even_palindromes, odd_palindromes\n\n    even_palindromes = 0\n    odd_palindromes = 0\n\n    for i in range(1, n + 1):\n        if str(i) == str(i)[::-1]:\n            if i % 2 == 0:\n                even_palindromes += 1\n            else:\n                odd_palindromes += 1\n\n    return even_palindromes, odd_palindromes\n\n\ndef main():\n    print(even_odd_palindrome(12))\n    print(even_odd_palindrome(123))\n    print(even_odd_palindrome(12345))\n    print(even_odd_palindrome(1234567))\n    print(even_odd_palindrome(123456789123456789))\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 6,
      "score": 10.0,
      "candidate": "# exceptions\n    assert isinstance(n, int) and 1 <= n <= 1000, 'n is wrong.'\n\n    # divide and conquer\n    # get even palindromes\n    even_palindromes = set()\n    for i in range(1, n):\n        even_palindromes.add(i)\n        even_palindromes.add(i + int(str(i)[::-1]))\n    even_palindromes.add(n)\n    even_palindromes.add(n + int(str(n)[::-1]))\n\n    # get odd palindromes\n    odd_palindromes = set()\n    for i in range(1, n):\n        odd_palindromes.add(i * 10 + i)\n        odd_palindromes.add(i * 100 + int(str(i)[::-1]))\n\n    # return result\n    return len(even_palindromes), len(odd_palindromes)\n\n\n# test\nn = 12\nprint(even_odd_palindrome(n))"
    },
    {
      "rank": 7,
      "score": 10.0,
      "candidate": "# count = [0, 0]\n    # for i in range(1, n + 1):\n    #     s = str(i)\n    #     if s == s[::-1] and i % 2 == 0:\n    #         count[0] += 1\n    #     elif s == s[::-1] and i % 2 == 1:\n    #         count[1] += 1\n    # return count\n\n    count = [0, 0]\n    for i in range(1, n + 1):\n        s = str(i)\n        if s == s[::-1] and i % 2 == 0:\n            count[0] += 1\n        if s == s[::-1] and i % 2 == 1:\n            count[1] += 1\n    return count\n\n\nif __name__ == '__main__':\n    print(even_odd_palindrome(3))\n    print(even_odd_palindrome(12))"
    },
    {
      "rank": 8,
      "score": 10.0,
      "candidate": "even, odd = 0, 0\n    for i in range(1, n):\n        if i == int(str(i)[::-1]):\n            if i % 2 == 0:\n                even += 1\n            else:\n                odd += 1\n    return (even, odd)"
    },
    {
      "rank": 9,
      "score": 10.0,
      "candidate": "even, odd = 0, 0\n    for i in range(1, n + 1):\n        if i == int(str(i)[::-1]):\n            if i % 2 == 0:\n                even += 1\n            else:\n                odd += 1\n    return even, odd"
    },
    {
      "rank": 10,
      "score": 10.0,
      "candidate": "if n <= 0: return None\n    if n == 1: return (0, 1)\n\n    even, odd = 0, 0\n    for i in range(1, n+1):\n        if i == int(str(i)[::-1]):\n            if i % 2 == 0:\n                even += 1\n            else:\n                odd += 1\n    return (even, odd)"
    },
    {
      "rank": 11,
      "score": 10.0,
      "candidate": "# even palindromes: 1, 2, 3, ..., n\n    # odd palindromes: 11, 101, 111, 1001, 1111, ...\n    even, odd = 0, 0\n    for i in range(n + 1):\n        if str(i) == str(i)[::-1]:\n            if i % 2 == 0:\n                even += 1\n            else:\n                odd += 1\n    return (even, odd)"
    },
    {
      "rank": 12,
      "score": 10.0,
      "candidate": "# even palindrome: 12321, 1234321, 123321, 12344321, ...\n    # odd palindrome: 1231, 12331, 12321, 1234321, ...\n    #\n    # 1. 12321: 12321\n    # 2. 1234321: 1234321, 12321\n    # 3. 123321: 123321, 12321\n    # 4. 12344321: 12344321, 1234321, 123321, 12321\n    #\n    # 1. 12321: 12321\n    # 2. 1234321: 1234321, 12321\n    # 3. 123321: 123321, 12321, 12321\n    # 4. 12344321: 12344321, 1234321, 123321, 12321\n    #\n    # 1. 12321: 12321\n    # 2. 1234321: 1234321, 12321\n    # 3. 123321: 123321, 12321, 12321\n    # 4. 12344321: 12344321, 1234321, 123321, 12321\n    #\n    # 1. 12321: 12321\n    # 2. 12"
    },
    {
      "rank": 13,
      "score": 10.0,
      "candidate": "# [1, 2, 3, 4, 5, 6, 7, 8, 9, 11]\n    # [1, 2, 3, 4, 5, 6, 7, 8, 9, 11]\n    # [1, 1, 1, 2, 3, 4, 5, 6, 7, 8]\n    # [1, 1, 1, 2, 2, 3, 3, 4, 5, 5]\n    # [1, 1, 1, 1, 1, 1, 2, 2, 2, 2]\n    # [1, 1, 1, 1, 1, 1, 1, 1, 1, 1]\n\n    # [1, 2, 3, 4, 5, 6, 7, 8, 9, 11]\n    # [1, 1, 1, 1, 1, 1, 1, 1, 1, 1]\n    # [1, 2, 3, 4, 5, 6, 7, 8, 9, 11]\n\n    # [1, 2, 3, 4, 5, 6, 7, 8, 9, 11]\n    # [1, 2, 3, 4, 5, 6, 7, 8, 9, 11]\n    # [1, 2, 3, 4, 5, 6, 7, 8, 9, 11]\n    # [1, 1, 1, 1, 1, 1, 1, 1, 1, 1]\n    # [1, 2, 3, 4, 5, 6, 7, 8, 9, 11]\n\n    # [1, 2, 3, 4, 5, 6, 7, 8, 9, 11]\n    # [1,"
    },
    {
      "rank": 14,
      "score": 10.0,
      "candidate": "even, odd = 0, 0\n    for i in range(1, n):\n        if i == int(str(i)[::-1]):\n            if i % 2 == 0:\n                even += 1\n            else:\n                odd += 1\n    return even, odd"
    },
    {
      "rank": 15,
      "score": 10.0,
      "candidate": "even = odd = 0\n    for i in range(1, n+1):\n        if i == int(str(i)[::-1]):\n            if i % 2 == 0:\n                even += 1\n            else:\n                odd += 1\n    return even, odd"
    },
    {
      "rank": 16,
      "score": 10.0,
      "candidate": "even_count = 0\n    odd_count = 0\n\n    for i in range(1, n + 1):\n        if str(i) == str(i)[::-1]:\n            if i % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n\n    return (even_count, odd_count)"
    },
    {
      "rank": 17,
      "score": 10.0,
      "candidate": "even, odd = 0, 0\n\n    for i in range(1, n+1):\n        # palindrome is a string\n        palindrome = str(i)\n        # check if palindrome is even or odd\n        if i % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n\n    return even, odd"
    },
    {
      "rank": 18,
      "score": 10.0,
      "candidate": "even, odd = 0, 0\n    for i in range(1, n + 1):\n        if i == int(str(i)[::-1]):\n            if i % 2 == 0:\n                even += 1\n            else:\n                odd += 1\n    return (even, odd)"
    },
    {
      "rank": 19,
      "score": 9.091921698802475,
      "candidate": "def is_palindrome(n):\n        return str(n) == str(n)[::-1]\n\n    def count_palindrome(n, is_even=True):\n        count = 0\n        for i in range(1, n+1):\n            if is_palindrome(i) and i % 2 == (0 if is_even else 1):\n                count += 1\n        return count\n\n    return (count_palindrome(n, is_even=True), count_palindrome(n, is_even=False))\n\n\ndef main():\n    print(even_odd_palindrome(3))\n    print(even_odd_palindrome(12))\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 20,
      "score": 9.045360439702282,
      "candidate": "# Initialization\n    count_even = 0\n    count_odd = 0\n\n    for i in range(1, n+1):\n        # Convert integer to string\n        s = str(i)\n        # Check if the string is a palindrome\n        if s == s[::-1]:\n            # Check if the string is an even or odd integer\n            if i % 2 == 0:\n                count_even += 1\n            else:\n                count_odd += 1\n\n    return (count_even, count_odd)\n\n\nif __name__ == \"__main__\":\n    print(even_odd_palindrome(3))\n    print(even_odd_palindrome(12))"
    },
    {
      "rank": 21,
      "score": 8.867154248667784,
      "candidate": "even_count, odd_count = 0, 0\n    for i in range(1, n + 1):\n        j = i\n        while j > 0:\n            if j % 10 == 0:\n                even_count += 1\n                break\n            j //= 10\n        if (i % 2) == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    return (even_count, odd_count)"
    },
    {
      "rank": 22,
      "score": 8.855892932580174,
      "candidate": "# l = []\n    # for i in range(1,n+1):\n    #     if str(i) == str(i)[::-1]:\n    #         l.append(i)\n    # print(l)\n    # print(len([i for i in l if i%2 == 0]))\n    # print(len([i for i in l if i%2 != 0]))\n    # return (len([i for i in l if i%2 == 0]),len([i for i in l if i%2 != 0]))\n    even = 0\n    odd = 0\n    for i in range(1, n + 1):\n        if str(i) == str(i)[::-1]:\n            if i % 2 == 0:\n                even += 1\n            else:\n                odd += 1\n    return (even, odd)\n\n\nif __name__ == \"__main__\":\n    print(even_odd_palindrome(3))\n    print(even_odd_palindrome(12))"
    },
    {
      "rank": 23,
      "score": 8.781687858406752,
      "candidate": "even_pal = 0\n    odd_pal = 0\n    for i in range(1, n+1):\n        if is_palindrome(i):\n            if i % 2 == 0:\n                even_pal += 1\n            else:\n                odd_pal += 1\n    return (even_pal, odd_pal)\n\n\ndef is_palindrome(num):\n    \"\"\"\n    Given an integer, return a boolean indicating whether it is a palindrome.\n    \"\"\"\n    return str(num) == str(num)[::-1]"
    },
    {
      "rank": 24,
      "score": 8.777580031626066,
      "candidate": "def _is_palindrome(n):\n        return str(n) == str(n)[::-1]\n\n    def _is_palindrome_and_multiple_of_10(n):\n        return _is_palindrome(n) and n % 10 == 0\n\n    even = odd = 0\n    for i in range(1, n + 1):\n        if _is_palindrome_and_multiple_of_10(i):\n            even += 1\n        elif _is_palindrome(i):\n            odd += 1\n    return (even, odd)"
    },
    {
      "rank": 25,
      "score": 8.759092683397137,
      "candidate": "def get_palindrome(n):\n        \"\"\"\n        Get all integer palindrome in range(1, n)\n        \"\"\"\n        res = []\n        for i in range(1, n):\n            if str(i) == str(i)[::-1]:\n                res.append(i)\n        return res\n\n    even = 0\n    odd = 0\n    palindrome = get_palindrome(n)\n    for p in palindrome:\n        if p % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n\n    return even, odd"
    },
    {
      "rank": 26,
      "score": 8.747215742242563,
      "candidate": "evens, odds = 1, 1\n    for i in range(1, n):\n        evens += 2 * i\n        odds += 2 * i + 1\n    return (evens, odds)"
    },
    {
      "rank": 27,
      "score": 8.66689406231469,
      "candidate": "even = odd = 0\n    for i in range(1, n + 1):\n        num = str(i)\n        if num == num[::-1]:\n            if i % 2 == 0:\n                even += 1\n            else:\n                odd += 1\n    return even, odd"
    },
    {
      "rank": 28,
      "score": 8.592715214713975,
      "candidate": "def is_palindrome(n):\n        return n == int(str(n)[::-1])\n\n    even_palindrome = 0\n    odd_palindrome = 0\n\n    for i in range(1, n + 1):\n        if is_palindrome(i):\n            if i % 2 == 0:\n                even_palindrome += 1\n            else:\n                odd_palindrome += 1\n\n    return even_palindrome, odd_palindrome"
    },
    {
      "rank": 29,
      "score": 8.585327943167513,
      "candidate": "# even_palindromes = 0\n    # odd_palindromes = 0\n    # for i in range(1, n+1):\n    #     str_i = str(i)\n    #     if str_i == str_i[::-1]:\n    #         if i % 2 == 0:\n    #             even_palindromes += 1\n    #         else:\n    #             odd_palindromes += 1\n    # return (even_palindromes, odd_palindromes)\n\n    even_palindromes = sum((i % 2 == 0) for i in range(1, n + 1))\n    odd_palindromes = sum((i % 2 == 1) for i in range(1, n + 1))\n    return (even_palindromes, odd_palindromes)"
    },
    {
      "rank": 30,
      "score": 8.54364897578652,
      "candidate": "def is_palindrome(n):\n        return str(n) == str(n)[::-1]\n\n    def is_even(n):\n        return n % 2 == 0\n\n    even, odd = 0, 0\n    for i in range(1, n + 1):\n        if is_palindrome(i):\n            if is_even(i):\n                even += 1\n            else:\n                odd += 1\n\n    return even, odd"
    },
    {
      "rank": 31,
      "score": 8.530078518396394,
      "candidate": "count = 0\n    for i in range(1, n+1):\n        if str(i) == str(i)[::-1]:\n            if i % 2 == 0:\n                count += 1\n            else:\n                count += 2\n    return count\n\n\nprint(even_odd_palindrome(12))\nprint(even_odd_palindrome(3))"
    },
    {
      "rank": 32,
      "score": 8.514705439732333,
      "candidate": "# \u5076\u6570\u4e2a\u6570\u4e3a(n+1)/2\u4e2a\uff0c\u5947\u6570\u4e2a\u6570\u4e3a(n-1)/2\u4e2a\n    return (n + 1) // 2, (n - 1) // 2\n\n\nif __name__ == \"__main__\":\n    assert even_odd_palindrome(1) == (0, 1)\n    assert even_odd_palindrome(2) == (1, 1)\n    assert even_odd_palindrome(3) == (1, 2)\n    assert even_odd_palindrome(4) == (2, 2)\n    assert even_odd_palindrome(5) == (2, 3)\n    assert even_odd_palindrome(10) == (5, 5)\n    assert even_odd_palindrome(12) == (4, 6)\n    assert even_odd_palindrome(13) == (4, 7)"
    },
    {
      "rank": 33,
      "score": 8.480133742422096,
      "candidate": "count = [0, 0]\n    for i in range(1, n):\n        if i == int(str(i)[::-1]):\n            count[i % 2] += 1\n    return tuple(count)"
    },
    {
      "rank": 34,
      "score": 8.472131008366494,
      "candidate": "# Initialization\n    even_count, odd_count = 0, 0\n    # Loop through all numbers from 1 to n\n    for num in range(1, n+1):\n        # If the number is palindrome\n        if str(num) == str(num)[::-1]:\n            # Check if the number is even\n            if num % 2 == 0:\n                # Increment even count\n                even_count += 1\n            else:\n                # Increment odd count\n                odd_count += 1\n    return (even_count, odd_count)\n\n\nif __name__ == '__main__':\n    print(even_odd_palindrome(3))\n    print(even_odd_palindrome(12))"
    },
    {
      "rank": 35,
      "score": 8.429755768409365,
      "candidate": "# initialize\n    even, odd = 0, 0\n\n    # iterate through all numbers\n    for i in range(1, n + 1):\n\n        # get the current number's string representation\n        i_str = str(i)\n\n        # check if the current number is a palindrome\n        if i_str == i_str[::-1]:\n\n            # check if the current number is even or odd\n            if i % 2 == 0:\n                even += 1\n            else:\n                odd += 1\n\n    return even, odd"
    },
    {
      "rank": 36,
      "score": 8.414920294596508,
      "candidate": "even, odd = 0, 0\n\n    for i in range(1, n + 1):\n        s = str(i)\n        if s == s[::-1]:\n            if i % 2 == 0:\n                even += 1\n            else:\n                odd += 1\n\n    return even, odd"
    },
    {
      "rank": 37,
      "score": 8.397028648665266,
      "candidate": "# palindrome number is the same as the reverse of the number\n    # so we can use mod 10 to determine if the number is a palindrome\n    # if the number is even, then we need to divide it by 10 until it is 1\n    # if the number is odd, then we need to divide it by 10 until it is odd\n    # we can use mod 2 to determine if the number is even or odd\n    # use mod 10 to determine if the number is palindrome\n    # use mod 2 to determine if the number is even or odd\n\n    # use a list to store the count of even and odd integer palindromes\n    # use a list to store the palindrome numbers\n    # use a list to store the number of integer palindromes\n    # use a list to store the count of even and odd integer palindromes\n    count = [0, 0]\n    palindrome_nums = []\n    palindrome_count = []\n    for i in range(1, n+1):\n        # store the number of integer palindromes\n        if i % 2 == 0:\n            palindrome_count.append(i)\n        # store the number of odd integer palindromes\n        if i % 10 == 1 and i % 2 != 0:\n            palindrome_count.append(i)\n        # store the number of even integer palindromes\n        if i % 10 == 0 and i % 2 == 0:\n            palindrome_count.append(i)\n        # store the number of odd integer palindromes\n        if i % 10 == 9 and i % 2 != 0:\n            palindrome_count.append(i)\n\n        # store the palindrome number\n        num = i\n        while num != 0:\n            palindrome_nums.append(num % 10)\n            num = num // 10\n\n        # check if the number is palindrome\n        if palindrome_nums == palindrome_nums[::-1]:\n            # store the number of even and odd integer palindromes"
    },
    {
      "rank": 38,
      "score": 8.36832426401228,
      "candidate": "def is_palindrome(n):\n        return str(n) == str(n)[::-1]\n\n    count = [0, 0]\n    for i in range(1, n+1):\n        if is_palindrome(i) and i % 2 == 0:\n            count[0] += 1\n        elif is_palindrome(i) and i % 2 != 0:\n            count[1] += 1\n    return tuple(count)"
    },
    {
      "rank": 39,
      "score": 8.354378970431064,
      "candidate": "even, odd = 0, 0\n    for i in range(1, n+1):\n        if i == int(str(i)[::-1]):\n            if i % 2 == 0:\n                even += 1\n            else:\n                odd += 1\n    return even, odd"
    },
    {
      "rank": 40,
      "score": 8.351876161244965,
      "candidate": "even, odd = 0, 0\n    for i in range(1, n + 1):\n        if str(i) == str(i)[::-1]:\n            if i % 2 == 0:\n                even += 1\n            else:\n                odd += 1\n\n    return even, odd"
    },
    {
      "rank": 41,
      "score": 8.34844829209528,
      "candidate": "def is_palindrome(x):\n        \"\"\"\n        Given a positive integer x, return true if and only if x is a palindrome.\n        \"\"\"\n        return x == int(str(x)[::-1])\n\n    count_even_palindrome = 0\n    count_odd_palindrome = 0\n    for i in range(1, n+1):\n        if is_palindrome(i) and i % 2 == 0:\n            count_even_palindrome += 1\n        elif is_palindrome(i) and i % 2 == 1:\n            count_odd_palindrome += 1\n    return (count_even_palindrome, count_odd_palindrome)\n\nif __name__ == '__main__':\n    n = 12\n    print(even_odd_palindrome(n))"
    },
    {
      "rank": 42,
      "score": 8.324850007029202,
      "candidate": "def is_palindrome(n):\n        if n < 0 or (n % 10 == 0 and n != 0):\n            return False\n\n        rev = 0\n        while n > rev:\n            rev = rev * 10 + n % 10\n            n //= 10\n        return n == rev or n == rev // 10\n\n    count = 0\n    for i in range(1, n + 1):\n        if is_palindrome(i) and is_palindrome(i // 2):\n            count += 1\n    return (count, n - count)"
    },
    {
      "rank": 43,
      "score": 8.320991929252836,
      "candidate": "def _palindrome(n):\n        \"\"\"\n        Return all palindrome numbers less than or equal to n.\n        \"\"\"\n        palindromes = set()\n        for i in range(1, n+1):\n            s = str(i)\n            t = s[::-1]\n            if t == s:\n                palindromes.add(i)\n        return palindromes\n\n    even = 0\n    odd = 0\n    palindromes = _palindrome(n)\n    for p in palindromes:\n        if p % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n    return even, odd"
    },
    {
      "rank": 44,
      "score": 8.286560709473754,
      "candidate": "# Initialize variables\n    even_palindrome = odd_palindrome = 0\n\n    # Get all possible palindromes\n    palindromes = []\n    for i in range(1, n + 1):\n        palindromes.append(i)\n        palindromes.append(int(str(i)[::-1]))\n\n    # Go through all possible palindromes and count even and odd palindromes\n    for palindrome in palindromes:\n        if palindrome % 2 == 0:\n            even_palindrome += 1\n        else:\n            odd_palindrome += 1\n\n    return even_palindrome, odd_palindrome"
    },
    {
      "rank": 45,
      "score": 8.254443190391335,
      "candidate": "# n = 10\n    # return (n, n)\n\n    # even_palindromes = 0\n    # odd_palindromes = 0\n\n    # for i in range(1, n+1):\n    #     # check if number is even\n    #     if i % 2 == 0:\n    #         even_palindromes += 1\n\n    #         # check if number is a palindrome\n    #         if str(i) == str(i)[::-1]:\n    #             odd_palindromes += 1\n\n    # return (even_palindromes, odd_palindromes)\n\n    # return (n, n)\n    return (n//2, n//2)"
    },
    {
      "rank": 46,
      "score": 8.25349524548064,
      "candidate": "count_even, count_odd = 0, 0\n    for i in range(1, n + 1):\n        if is_palindrome(i):\n            if i % 2 == 0:\n                count_even += 1\n            else:\n                count_odd += 1\n    return count_even, count_odd\n\ndef is_palindrome(n):\n    \"\"\"\n    Check if an integer is a palindrome\n    \"\"\"\n    return str(n) == str(n)[::-1]"
    },
    {
      "rank": 47,
      "score": 8.251959946211114,
      "candidate": "def is_palindrome(n):\n        if n < 0:\n            return False\n\n        s = str(n)\n        i, j = 0, len(s) - 1\n\n        while i < j:\n            if s[i] != s[j]:\n                return False\n            i += 1\n            j -= 1\n        return True\n\n    even = odd = 0\n    for i in range(1, n + 1):\n        if is_palindrome(i):\n            if i % 2 == 0:\n                even += 1\n            else:\n                odd += 1\n    return even, odd"
    },
    {
      "rank": 48,
      "score": 8.166906424319002,
      "candidate": "# even = 0\n    # odd = 0\n    # for i in range(1, n+1):\n    #     if is_palindrome(i):\n    #         if i % 2 == 0:\n    #             even += 1\n    #         else:\n    #             odd += 1\n    # return even, odd\n\n    return sum(1 for i in range(1, n+1) if is_palindrome(i) and i % 2 == 0), \\\n           sum(1 for i in range(1, n+1) if is_palindrome(i) and i % 2 != 0)\n\n\ndef is_palindrome(n):\n    return str(n) == str(n)[::-1]"
    },
    {
      "rank": 49,
      "score": 8.149308319002614,
      "candidate": "even, odd = 0, 0\n    for i in range(1, n+1):\n        if i == int(str(i)[::-1]):\n            if i % 2 == 0:\n                even += 1\n            else:\n                odd += 1\n    return (even, odd)\n\nif __name__ == \"__main__\":\n    print(even_odd_palindrome(3))\n    print(even_odd_palindrome(12))"
    },
    {
      "rank": 50,
      "score": 8.100365259923162,
      "candidate": "if n < 1: return None\n    if n == 1: return (0, 1)\n    if n == 2: return (1, 1)\n\n    # even number palindrome:\n    # 1. 2-digit palindrome\n    # 2. 3-digit palindrome\n    # 3. 4-digit palindrome\n    # 4. 5-digit palindrome\n    # 5. 6-digit palindrome\n    # 6. 7-digit palindrome\n    # 7. 8-digit palindrome\n    # 8. 9-digit palindrome\n    # 9. 10-digit palindrome\n\n    # odd number palindrome:\n    # 1. 3-digit palindrome\n    # 2. 5-digit palindrome\n    # 3. 7-digit palindrome\n    # 4. 9-digit palindrome\n\n    even_palindrome = 0\n    odd_palindrome = 0\n\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            if i <= 10:\n                even_palindrome += 1\n            elif i <= 99:\n                even_palindrome += 1\n            elif i <= 999:\n                even_palindrome += 1\n            elif i <= 9999:\n                even_palindrome += 1\n            elif i <= 99999:\n                even_palindrome += 1\n            elif i <= 999999:\n                even_palindrome += 1\n            elif i <= 9999999:\n                even_palindrome += 1\n            elif i <= 99999999:\n                even_palindrome += 1\n            elif i <= 999999999:\n                even_palindrome += 1\n            elif i <= 9999999999:\n                even_palindrome += 1\n            else:\n                even_palindrome"
    },
    {
      "rank": 51,
      "score": 8.02918368510733,
      "candidate": "even, odd = 1, 0\n    for i in range(2, n + 1):\n        even += i // 2\n        odd += i // 2 + 1 if i % 2 else 0\n    return (even, odd)"
    },
    {
      "rank": 52,
      "score": 8.010782963572526,
      "candidate": "count_even, count_odd = 0, 0\n    for i in range(1, n+1):\n        if str(i) == str(i)[::-1]:\n            if i % 2 == 0:\n                count_even += 1\n            else:\n                count_odd += 1\n    return count_even, count_odd"
    },
    {
      "rank": 53,
      "score": 7.95399972857137,
      "candidate": "even = odd = 0\n\n    for i in range(1, n + 1):\n        if i == int(str(i)[::-1]):\n            if i % 2 == 0:\n                even += 1\n            else:\n                odd += 1\n\n    return even, odd"
    },
    {
      "rank": 54,
      "score": 7.8998881643960885,
      "candidate": "even, odd = 0, 0\n    for i in range(1, n+1):\n        j = i\n        while j > 0:\n            if i % 10 == j % 10:\n                j //= 10\n                if j == 0:\n                    if i % 2 == 0:\n                        even += 1\n                    else:\n                        odd += 1\n                    break\n            else:\n                break\n\n    return even, odd"
    },
    {
      "rank": 55,
      "score": 7.865399926896975,
      "candidate": "evens = set()\n    odds = set()\n    for i in range(1, n+1):\n        j = i\n        while j > 0:\n            if i == j:\n                evens.add(i)\n            if i == (j % 10):\n                odds.add(i)\n            j //= 10\n    return (len(evens), len(odds))\n\nif __name__ == \"__main__\":\n    print(even_odd_palindrome(3))\n    print(even_odd_palindrome(12))\n    print(even_odd_palindrome(13))"
    },
    {
      "rank": 56,
      "score": 7.737228133114101,
      "candidate": "even, odd = 0, 0\n    for i in range(1, n+1):\n        if i == int(str(i)[::-1]):\n            if i % 2 == 0:\n                even += 1\n            else:\n                odd += 1\n    return even, odd"
    },
    {
      "rank": 57,
      "score": 7.659999544134748,
      "candidate": "# 2 pointers approach\n    even, odd = 0, 0\n    for i in range(1, n + 1):\n        if is_palindrome(i):\n            if i % 2 == 0:\n                even += 1\n            else:\n                odd += 1\n    return (even, odd)\n\ndef is_palindrome(n):\n    return str(n) == str(n)[::-1]"
    },
    {
      "rank": 58,
      "score": 7.629541189458079,
      "candidate": "def is_palindrome(x):\n        return str(x) == str(x)[::-1]\n\n    def is_even(x):\n        return x % 2 == 0\n\n    def is_odd(x):\n        return x % 2 == 1\n\n    result = [0, 0]\n    for i in range(1, n + 1):\n        if is_palindrome(i) and is_even(i):\n            result[0] += 1\n        if is_palindrome(i) and is_odd(i):\n            result[1] += 1\n    return result\n\n\nprint(even_odd_palindrome(10))\nprint(even_odd_palindrome(12))\nprint(even_odd_palindrome(3))"
    },
    {
      "rank": 59,
      "score": 7.3703489517676495,
      "candidate": "even, odd = 0, 0\n    for i in range(1, n + 1):\n        s = str(i)\n        if s == s[::-1]:\n            if i % 2 == 0:\n                even += 1\n            else:\n                odd += 1\n    return even, odd"
    },
    {
      "rank": 60,
      "score": 3.7594340556486645,
      "candidate": "# Initialize even and odd count\n    even = 0\n    odd = 0\n\n    # Iterate over the range and check if the number is a palindrome\n    for i in range(1, n+1):\n        # Convert the number to a string\n        num_str = str(i)\n        # Reverse the string\n        rev_num_str = num_str[::-1]\n\n        # Check if the number is a palindrome\n        if num_str == rev_num_str:\n            # If the number is even, increment the even count\n            if i % 2 == 0:\n                even += 1\n            # If the number is odd, increment the odd count\n            else:\n                odd += 1\n\n    return (even, odd)\n\n\ndef test_even_odd_palindrome():\n    assert even_odd_palindrome(3) == (1, 2)\n    assert even_odd_palindrome(12) == (4, 6)\n\n\nif __name__ == '__main__':\n    test_even_odd_palindrome()"
    },
    {
      "rank": 61,
      "score": 3.6415038988837427,
      "candidate": "# 1. pre-process:\n    # 1.1. get the even and odd palindrome number\n    even, odd = 0, 0\n    for i in range(1, n+1):\n        if is_palindrome(i):\n            if i % 2 == 0:\n                even += 1\n            else:\n                odd += 1\n    # 2. return\n    return (even, odd)\n\n\ndef is_palindrome(n):\n    return str(n) == str(n)[::-1]\n\n\ndef main():\n    # 1. given\n    n = 12\n\n    # 2. solve\n    ret = even_odd_palindrome(n)\n\n    # 3. output\n    print(ret)\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 62,
      "score": 3.6305949922510474,
      "candidate": "# palindrome = n * (n + 1) // 2\n    # return (palindrome // 2, palindrome // 2 + 1)\n\n    # even = n * (n + 1) // 2\n    # odd = n * (n - 1) // 2\n    # return (odd, even)\n\n    # if n <= 0:\n    #     return (0, 0)\n    # even = n * (n + 1) // 2\n    # odd = n * (n - 1) // 2\n    # return (even + 1, odd)\n\n    if n <= 0:\n        return (0, 0)\n    even = n * (n + 1) // 2\n    odd = n * (n - 1) // 2\n    return (even + 1, odd + 1)\n\n\ndef test_even_odd_palindrome():\n    assert even_odd_palindrome(3) == (1, 2)\n    assert even_odd_palindrome(12) == (4, 6)\n    assert even_odd_palindrome(100) == (250, 249)\n\n\nif __name__ == '__main__':\n    test_even_odd_palindrome()"
    },
    {
      "rank": 63,
      "score": 3.6244422411272903,
      "candidate": "# Initialize the counter.\n    even_count, odd_count = 0, 0\n\n    # Loop for each number in range [1, n] inclusive.\n    for number in range(1, n + 1):\n        # Convert the number to a string.\n        number_as_string = str(number)\n\n        # Check if the string is a palindrome.\n        if number_as_string == number_as_string[::-1]:\n            # If the number is even, increment the even counter.\n            if number % 2 == 0:\n                even_count += 1\n            # If the number is odd, increment the odd counter.\n            else:\n                odd_count += 1\n\n    # Return the tuple of the even and odd counts.\n    return even_count, odd_count\n\n\ndef main():\n    # Output: (1, 2)\n    n = 3\n    print(even_odd_palindrome(n))\n\n    # Output: (4, 6)\n    n = 12\n    print(even_odd_palindrome(n))\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 64,
      "score": 3.5560584117140372,
      "candidate": "even_palindrome_count = 0\n    odd_palindrome_count = 0\n\n    for i in range(n):\n        number_string = str(i)\n        length = len(number_string)\n        if length % 2 == 0:\n            mid_index = length // 2\n            even_half = number_string[:mid_index]\n            odd_half = number_string[mid_index:]\n            if even_half == odd_half[::-1]:\n                even_palindrome_count += 1\n        else:\n            mid_index = length // 2 + 1\n            even_half = number_string[:mid_index]\n            odd_half = number_string[mid_index:]\n            if even_half == odd_half[::-1]:\n                odd_palindrome_count += 1\n\n    return even_palindrome_count, odd_palindrome_count\n\n\ndef main():\n    print(even_odd_palindrome(3))\n    print(even_odd_palindrome(12))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 65,
      "score": 3.4334201127497552,
      "candidate": "# exceptions\n    # 1 <= n <= 10^3\n    if n <= 0 or n > 10**3:\n        return False\n\n    # 0 ms\n    even, odd = 0, 0\n    for i in range(1, n+1):\n        if is_palindrome(i):\n            if i % 2 == 0:\n                even += 1\n            else:\n                odd += 1\n    return (even, odd)\n\n\ndef is_palindrome(n):\n    \"\"\"\n    :type n: int\n    :rtype: bool\n    \"\"\"\n    return str(n) == str(n)[::-1]\n\n\n# test\nn = 12\nprint(even_odd_palindrome(n))"
    },
    {
      "rank": 66,
      "score": 3.3999735021201674,
      "candidate": "# O(n) time, O(1) space\n    even_count, odd_count = 0, 0\n    for i in range(1, n+1):\n        if is_palindrome(i):\n            if i % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n    return even_count, odd_count\n\n\ndef is_palindrome(n):\n    \"\"\"\n    Given an integer n, return a boolean denoting if it is a palindrome integer.\n\n    Example 1:\n\n        Input: 121\n        Output: true\n\n    Example 2:\n\n        Input: -121\n        Output: false\n        Explanation: From left to right, it reads -121. From right to left, it becomes 121-. Therefore it is not a palindrome.\n\n    Example 3:\n\n        Input: 10\n        Output: false\n        Explanation: Reads 01 from right to left. Therefore it is not a palindrome.\n\n    Follow up:\n        Coud you solve it without converting the integer to a string?\n    \"\"\"\n    # O(n) time, O(1) space\n    return str(n) == str(n)[::-1]\n\n\ndef main():\n    print(even_odd_palindrome(3))\n    print(even_odd_palindrome(12))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 67,
      "score": 3.3818248488376415,
      "candidate": "# initialize the counter\n    even, odd = 0, 0\n\n    # loop through all the numbers\n    for i in range(1, n + 1):\n        # convert the number to string\n        num = str(i)\n\n        # if the number is palindrome, and is even, count it\n        if num == num[::-1] and i % 2 == 0:\n            even += 1\n        # if the number is palindrome, and is odd, count it\n        elif num == num[::-1] and i % 2 != 0:\n            odd += 1\n\n    # return the count\n    return even, odd\n\n\ndef even_odd_palindrome2(n):\n    \"\"\"\n    Given a positive integer n, return a tuple that has the number of even and odd\n    integer palindromes that fall within the range(1, n), inclusive.\n\n    Example 1:\n\n        Input: 3\n        Output: (1, 2)\n        Explanation:\n        Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n    Example 2:\n\n        Input: 12\n        Output: (4, 6)\n        Explanation:\n        Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n    Note:\n        1. 1 <= n <= 10^3\n        2. returned tuple has the number of even and odd integer palindromes respectively.\n    \"\"\"\n    # initialize the counter\n    even, odd = 0, 0\n\n    # loop through all the numbers\n    for i in range(1, n + 1):\n        # convert the number to string\n        num = str(i)\n\n        # if the number is palindrome, and is even, count it\n        if num == num[::-1] and i % 2 == 0:\n            even += 1\n        # if the number is palindrome, and is odd, count"
    },
    {
      "rank": 68,
      "score": 3.336980026793842,
      "candidate": "even_palindrome_count = 0\n    odd_palindrome_count = 0\n\n    for i in range(1, n + 1):\n        if is_palindrome(i):\n            if i % 2 == 0:\n                even_palindrome_count += 1\n            else:\n                odd_palindrome_count += 1\n    return (even_palindrome_count, odd_palindrome_count)\n\ndef is_palindrome(n):\n    return str(n) == str(n)[::-1]\n\nprint(even_odd_palindrome(12))"
    },
    {
      "rank": 69,
      "score": 3.265552300621284,
      "candidate": "# Get all palindrome numbers from 1 to n\n    palindrome_numbers = [x for x in range(1, n + 1) if str(x) == str(x)[::-1]]\n    # Even palindrome numbers\n    even_palindrome_numbers = [x for x in palindrome_numbers if not x % 2]\n    # Odd palindrome numbers\n    odd_palindrome_numbers = [x for x in palindrome_numbers if x % 2]\n    # Count even and odd palindrome numbers\n    even_count = len(even_palindrome_numbers)\n    odd_count = len(odd_palindrome_numbers)\n\n    return even_count, odd_count\n\n\ndef test_even_odd_palindrome():\n    assert even_odd_palindrome(3) == (1, 2)\n    assert even_odd_palindrome(12) == (4, 6)\n\n\nif __name__ == '__main__':\n    test_even_odd_palindrome()"
    },
    {
      "rank": 70,
      "score": 3.250787278424756,
      "candidate": "count_even, count_odd = 0, 0\n    for i in range(1, n + 1):\n        if is_palindrome(i):\n            if i % 2 == 0:\n                count_even += 1\n            else:\n                count_odd += 1\n    return (count_even, count_odd)\n\ndef is_palindrome(n):\n    \"\"\"\n    Given an integer n, return true if n is a palindrome integer\n\n    Example 1:\n\n        Input: 121\n        Output: true\n\n    Example 2:\n\n        Input: 1221\n        Output: false\n    \"\"\"\n    if n == 0:\n        return True\n\n    if n % 10 == 0:\n        return False\n\n    reverse = 0\n    while n > reverse:\n        reverse = reverse * 10 + n % 10\n        n //= 10\n\n    return n == reverse or n == reverse // 10\n\n\nif __name__ == '__main__':\n    print(even_odd_palindrome(3))\n    print(even_odd_palindrome(12))"
    },
    {
      "rank": 71,
      "score": 3.2036528027346054,
      "candidate": "if n < 1:\n        return None\n\n    evens = 0\n    odds = 0\n    for i in range(1, n+1):\n        if i == int(str(i)[::-1]):\n            if i % 2 == 0:\n                evens += 1\n            else:\n                odds += 1\n\n    return evens, odds\n\n\nif __name__ == '__main__':\n    t = int(input())\n    for _ in range(t):\n        n = int(input())\n        print(even_odd_palindrome(n))"
    },
    {
      "rank": 72,
      "score": 3.1540361875217253,
      "candidate": "# count the number of even and odd integer palindromes\n    count = [0, 0]\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            count[0] += 1\n        else:\n            count[1] += 1\n    return tuple(count)\n\n\ndef main():\n    print('Please enter an integer: ', end='')\n    n = int(input().strip())\n\n    result = even_odd_palindrome(n)\n    print(result)\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 73,
      "score": 3.14817219825845,
      "candidate": "# palindrome = [str(i) for i in range(1, n + 1)]\n    # palindrome = palindrome[::-1]\n    # even_count = len([i for i in palindrome if i == i[::-1]])\n    # odd_count = len([i for i in palindrome if i != i[::-1]])\n    # return even_count, odd_count\n    # return len([i for i in range(1, n + 1) if str(i) == str(i)[::-1]]) * 2, len([i for i in range(1, n + 1) if str(i) == str(i)[::-1]])\n    even_count = 0\n    odd_count = 0\n    for i in range(1, n + 1):\n        num = str(i)\n        if num == num[::-1]:\n            if i % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n    return even_count, odd_count\n\n\nif __name__ == '__main__':\n    print(even_odd_palindrome(12))"
    },
    {
      "rank": 74,
      "score": 3.146416154319816,
      "candidate": "even, odd = 0, 0\n    for i in range(1, n+1):\n        s = str(i)\n        if s == s[::-1]:\n            if i % 2 == 0:\n                even += 1\n            else:\n                odd += 1\n    return even, odd\n\n\nif __name__ == '__main__':\n    assert even_odd_palindrome(10) == (1, 2)\n    assert even_odd_palindrome(12) == (4, 6)\n    assert even_odd_palindrome(100) == (25, 25)\n    assert even_odd_palindrome(1000) == (500, 500)"
    },
    {
      "rank": 75,
      "score": 3.135818006875461,
      "candidate": "even, odd = 0, 0\n    for i in range(1, n+1):\n        j = i\n        while j > 0:\n            if i == int(str(i)[::-1]) and i % 2 == 0:\n                even += 1\n            if i == int(str(i)[::-1]) and i % 2 != 0:\n                odd += 1\n            j //= 10\n    return (even, odd)\n\n\ndef main():\n    assert even_odd_palindrome(3) == (1, 2)\n    assert even_odd_palindrome(12) == (4, 6)\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 76,
      "score": 3.132874427451866,
      "candidate": "# Time complexity: O(n)\n    # Space complexity: O(1)\n    even, odd = 0, 0\n    for i in range(1, n + 1):\n        j = i\n        while j > 0:\n            if i == int(str(j)[::-1]):\n                if j % 2 == 0:\n                    even += 1\n                else:\n                    odd += 1\n            j //= 10\n    return (even, odd)\n\n\ndef main():\n    import sys\n    import time\n    import random\n\n    start_time = time.time()\n    sys.stdin = open(\"./TestInput_2.txt\")\n    for _ in range(1000):\n        n = int(random.random() * 1000000) + 1\n        even_odd_palindrome(n)\n    print(\"--- %s seconds ---\" % (time.time() - start_time))\n\n    start_time = time.time()\n    sys.stdin = open(\"./TestInput_1.txt\")\n    for _ in range(1000):\n        n = int(random.random() * 1000000) + 1\n        even_odd_palindrome(n)\n    print(\"--- %s seconds ---\" % (time.time() - start_time))\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 77,
      "score": 3.1288414063640624,
      "candidate": "even, odd = 0, 0\n\n    for i in range(n):\n        if i < 10:\n            even += 1\n        else:\n            num = str(i)\n            if num == num[::-1]:\n                if i % 2 == 0:\n                    even += 1\n                else:\n                    odd += 1\n\n    return (even, odd)\n\n\ndef test_even_odd_palindrome():\n    assert even_odd_palindrome(3) == (1, 2)\n    assert even_odd_palindrome(12) == (4, 6)\n    assert even_odd_palindrome(20) == (7, 12)\n    assert even_odd_palindrome(100) == (15, 23)\n\n\nif __name__ == '__main__':\n    test_even_odd_palindrome()"
    },
    {
      "rank": 78,
      "score": 3.0807131067063405,
      "candidate": "count = [0, 0]\n    for i in range(1, n + 1):\n        s = str(i)\n        if s == s[::-1] and i % 2 == 0:\n            count[0] += 1\n        elif s == s[::-1] and i % 2 == 1:\n            count[1] += 1\n    return tuple(count)\n\n\ndef test_even_odd_palindrome():\n    assert even_odd_palindrome(3) == (1, 2)\n    assert even_odd_palindrome(12) == (4, 6)\n\n\nif __name__ == '__main__':\n    test_even_odd_palindrome()"
    },
    {
      "rank": 79,
      "score": 3.045478261781045,
      "candidate": "count_even, count_odd = 0, 0\n    for i in range(1, n+1):\n        if is_palindrome(i):\n            if i % 2 == 0:\n                count_even += 1\n            else:\n                count_odd += 1\n    return (count_even, count_odd)\n\n\ndef is_palindrome(n):\n    return str(n) == str(n)[::-1]"
    },
    {
      "rank": 80,
      "score": 3.037621918379556,
      "candidate": "even_count, odd_count = 0, 0\n    for i in range(1, n+1):\n        s = str(i)\n        if s == s[::-1]:\n            if i % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n\n    return even_count, odd_count\n\n\ndef test_even_odd_palindrome():\n    assert even_odd_palindrome(3) == (1, 2)\n    assert even_odd_palindrome(12) == (4, 6)\n    assert even_odd_palindrome(20) == (5, 11)\n\n\nif __name__ == '__main__':\n    test_even_odd_palindrome()"
    },
    {
      "rank": 81,
      "score": 2.9944661378574473,
      "candidate": "# initialize even_count and odd_count\n    even_count = 0\n    odd_count = 0\n\n    # iterate through all integers within range(1, n)\n    for i in range(1, n + 1):\n        # convert the integer to a string\n        s = str(i)\n\n        # if the integer is even, increment even_count\n        if i % 2 == 0:\n            even_count += 1\n\n        # if the integer is odd, increment odd_count\n        if i % 2 != 0:\n            odd_count += 1\n\n        # if the integer is a palindrome, increment the appropriate count\n        if s == s[::-1]:\n            if i % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n\n    # return the tuple\n    return (even_count, odd_count)\n\n\ndef main():\n    print(even_odd_palindrome(3))\n    print(even_odd_palindrome(12))\n    print(even_odd_palindrome(1000))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 82,
      "score": 2.943311636519814,
      "candidate": "# \u8d1f\u6570\u4e0d\u662f\u6574\u6570\n    if n < 1:\n        return None\n    # 1 \u4e2a\u6570\u662f\u5076\u6570\n    if n == 1:\n        return (1, 0)\n    # \u5076\u6570\n    even = 0\n    # \u5947\u6570\n    odd = 0\n    for i in range(1, n+1):\n        # \u5982\u679c\u662f\u5947\u6570\n        if i % 2 == 1:\n            # \u5947\u6570\u4e0d\u4f1a\u662f\u5947\u6570\n            odd += 1\n            continue\n        # \u5982\u679c\u662f\u5076\u6570\n        if i % 2 == 0:\n            # \u5947\u6570\n            odd_num = i - 1\n            # \u5076\u6570\n            even_num = i + 1\n            # \u5947\u6570\u662f\u5947\u6570\n            odd += 1\n            # \u5076\u6570\u662f\u5076\u6570\n            even += 1\n            # \u5947\u6570\u662f\u5076\u6570\n            odd += 1\n            # \u5947\u6570\u662f\u5076\u6570\n            even += 1\n    return (even, odd)\n\n\nprint(even_odd_palindrome(12))\nprint(even_odd_palindrome(3))"
    },
    {
      "rank": 83,
      "score": 2.903997116363432,
      "candidate": "# even: 1, 2, 3, ..., n\n    # odd: 11, 12, 13, ..., 10n\n    # total: 1 + 2 + ... + n + 11 + 12 + ... + 10n\n    # total = n + 1 + 10n + 10n + ... + 10n\n    # total = n + 10n(1 + 10 + ... + 10)\n    # total = n + 10n(10n / 2)\n    # total = n + 5n(n)\n    # total = 6n^2\n    # O(n) time, O(1) space\n\n    # even: 1, 2, 3, ..., n\n    # odd: 11, 12, 13, ..., 10n\n    # total: 1 + 2 + ... + n + 11 + 12 + ... + 10n\n    # total = n + 1 + 10n + 10n + ... + 10n\n    # total = n + 10n(1 + 10 + ... + 10)\n    # total = n + 5n(n)\n    # total = 6n^2\n    # O(n) time, O(1) space\n\n    if n < 1:\n        return 0, 0\n    if n == 1:\n        return 1, 1\n    if n == 2:\n        return 2, 2\n\n    even = n // 2 + 1\n    odd = (n - 1) // 2 + 1\n\n    return even, odd"
    },
    {
      "rank": 84,
      "score": 2.877406986308994,
      "candidate": "even, odd = 0, 0\n    for i in range(1, n+1):\n        if is_palindrome(i):\n            if i % 2 == 0:\n                even += 1\n            else:\n                odd += 1\n    return even, odd\n\n\ndef is_palindrome(n):\n    \"\"\"\n    check if a number is palindrome\n    \"\"\"\n    return str(n) == str(n)[::-1]"
    },
    {
      "rank": 85,
      "score": 2.8732229259010023,
      "candidate": "if n < 1: return None\n    if n == 1: return (0, 1)\n    if n == 2: return (1, 0)\n    if n == 3: return (0, 1)\n\n    # The number of even integer palindromes that fall within the range(1, n)\n    # is equal to the number of odd integer palindromes that fall within the range(1, n)\n    even = odd = 0\n\n    for i in range(1, n + 1):\n        if i == 1 or i == 2:\n            even += 1\n            odd += 1\n        elif i % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n\n    return even, odd\n\n\ndef main():\n    print('Please enter a number: ')\n    n = int(input().strip())\n    even, odd = even_odd_palindrome(n)\n    print('The number of even integer palindromes that fall within the range(1, {}) is {}.'.format(n, even))\n    print('The number of odd integer palindromes that fall within the range(1, {}) is {}.'.format(n, odd))\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 86,
      "score": 2.811138103906487,
      "candidate": "# 1. check whether n is valid\n    if not (1 <= n <= 10**3):\n        raise ValueError(\"Invalid input value for n\")\n\n    # 2. construct palindrome from n\n    even_palindrome = []\n    odd_palindrome = []\n    for i in range(n):\n        if i % 10:\n            odd_palindrome.append(str(i))\n        else:\n            even_palindrome.append(str(i))\n\n        # reverse the string\n        reversed_string = str(i)[::-1]\n        if i >= 10:\n            even_palindrome.append(str(i) + reversed_string[1:])\n        odd_palindrome.append(reversed_string)\n\n    # 3. return the count of even and odd palindrome\n    return len(even_palindrome), len(odd_palindrome)\n\n\ndef main():\n    # 1. given n\n    n = 3\n\n    # 2. get even and odd palindrome\n    even_palindrome, odd_palindrome = even_odd_palindrome(n)\n\n    # 3. print result\n    print(even_palindrome, odd_palindrome)\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 87,
      "score": 2.803538562483431,
      "candidate": "# Initial result\n    result = [0, 0]\n\n    # Iterate through all integers\n    for i in range(1, n + 1):\n        # Convert integer to string\n        num_str = str(i)\n\n        # Check if integer is even\n        if i % 2 == 0:\n            # Check if string is palindrome\n            if num_str == num_str[::-1]:\n                # Increment even count\n                result[0] += 1\n        else:\n            # Check if string is palindrome\n            if num_str == num_str[::-1]:\n                # Increment odd count\n                result[1] += 1\n\n    # Return result\n    return result\n\n\ndef main():\n    # Output should be (1, 2)\n    n = 3\n    print(even_odd_palindrome(n))\n\n    # Output should be (4, 6)\n    n = 12\n    print(even_odd_palindrome(n))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 88,
      "score": 2.7768030829446753,
      "candidate": "# Initialize the counter\n    even_count = 0\n    odd_count = 0\n\n    # For every number in range(1, n), inclusive\n    for number in range(1, n+1):\n        # If the number is a palindrome\n        if is_palindrome(number):\n            # If the number is even, increment even_count\n            if number % 2 == 0:\n                even_count += 1\n            # If the number is odd, increment odd_count\n            else:\n                odd_count += 1\n\n    # Return a tuple with the number of even and odd integer palindromes\n    return even_count, odd_count\n\ndef is_palindrome(n):\n    \"\"\"\n    Return True if n is a palindrome, False otherwise\n\n    Example 1:\n\n        Input: 121\n        Output: True\n\n    Example 2:\n\n        Input: 123\n        Output: False\n    \"\"\"\n    # Convert n to a string\n    n_str = str(n)\n\n    # Return True if n_str is a palindrome, False otherwise\n    return n_str == n_str[::-1]\n\ndef main():\n    \"\"\"\n    Driver function\n    \"\"\"\n    print(even_odd_palindrome(3))\n    print(even_odd_palindrome(12))\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 89,
      "score": 2.769462113011201,
      "candidate": "# Initialize variables\n    even_count = 0\n    odd_count = 0\n    # Loop through numbers 1 - n\n    for num in range(1, n + 1):\n        # Check if number is a palindrome\n        if str(num) == str(num)[::-1]:\n            if num % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n    return even_count, odd_count\n\n\ndef main():\n    # Output should be (1, 2)\n    n = 3\n    print(even_odd_palindrome(n))\n\n    # Output should be (4, 6)\n    n = 12\n    print(even_odd_palindrome(n))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 90,
      "score": 2.75373813713329,
      "candidate": "even = 0\n    odd = 0\n    for i in range(1, n+1):\n        s = str(i)\n        if s == s[::-1] and i % 2 == 0:\n            even += 1\n        elif s == s[::-1] and i % 2 != 0:\n            odd += 1\n    return (even, odd)\n\n\ndef even_odd_palindrome_2(n):\n    \"\"\"\n    Given a positive integer n, return a tuple that has the number of even and odd\n    integer palindromes that fall within the range(1, n), inclusive.\n\n    Example 1:\n\n        Input: 3\n        Output: (1, 2)\n        Explanation:\n        Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n    Example 2:\n\n        Input: 12\n        Output: (4, 6)\n        Explanation:\n        Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n    Note:\n        1. 1 <= n <= 10^3\n        2. returned tuple has the number of even and odd integer palindromes respectively.\n    \"\"\"\n    even = 0\n    odd = 0\n    for i in range(1, n+1):\n        j = i\n        while j > 0:\n            if j % 10 == j // 10 ** (len(str(j)) - 1):\n                j //= 10\n                if j == 0:\n                    if i % 2 == 0:\n                        even += 1\n                    else:\n                        odd += 1\n            else:\n                break\n    return (even, odd)\n\n\nprint(even_odd_palindrome(3))\nprint(even_odd_palindrome_2(3))"
    },
    {
      "rank": 91,
      "score": 2.7533002889859475,
      "candidate": "def helper(n, even, odd):\n        if n < 0:\n            return even, odd\n\n        if n == 0:\n            return even + 1, odd + 1\n\n        if n == 1:\n            return even + 1, odd\n\n        if n % 10 == 0:\n            return helper(n // 10, even + 1, odd)\n\n        if n % 10 != 0:\n            return helper(n // 10, even + 1, odd + 1)\n\n    return helper(n, 0, 0)\n\n\nprint(even_odd_palindrome(3))\nprint(even_odd_palindrome(12))\nprint(even_odd_palindrome(1000))"
    },
    {
      "rank": 92,
      "score": 2.735500900611899,
      "candidate": "if n < 1: return None\n\n    even = odd = 0\n    for i in range(1, n + 1):\n        if is_palindrome(i):\n            if i % 2 == 0:\n                even += 1\n            else:\n                odd += 1\n    return even, odd\n\ndef is_palindrome(n):\n    return str(n) == str(n)[::-1]\n\ndef test_is_palindrome():\n    assert is_palindrome(121)\n    assert not is_palindrome(123)\n\n\ndef test_even_odd_palindrome():\n    assert even_odd_palindrome(1) == (1, 0)\n    assert even_odd_palindrome(2) == (1, 1)\n    assert even_odd_palindrome(3) == (1, 2)\n    assert even_odd_palindrome(4) == (2, 2)\n    assert even_odd_palindrome(12) == (4, 6)\n    assert even_odd_palindrome(13) == (4, 7)\n    assert even_odd_palindrome(14) == (5, 7)\n    assert even_odd_palindrome(15) == (5, 8)\n    assert even_odd_palindrome(16) == (6, 8)\n    assert even_odd_palindrome(17) == (6, 9)\n    assert even_odd_palindrome(18) == (7, 9)\n    assert even_odd_palindrome(19) == (7, 10)\n    assert even_odd_palindrome(20) == (8, 10)\n    assert even_odd_palindrome(21) == (8, 11)\n    assert even_odd_palindrome(22) == (9, 11)\n    assert even_odd_palindrome(23) == (9, 12)\n    assert even_odd_palindrome(24) == (10,"
    },
    {
      "rank": 93,
      "score": 2.6277101290363034,
      "candidate": "# exceptions\n    if not isinstance(n, int) or not 1 <= n <= 10**3:\n        return None\n\n    # 1. get all palindrome number in range [1, n]\n    # 2. count even and odd palindrome\n    from collections import defaultdict\n    result = defaultdict(int)\n    for i in range(1, n+1):\n        num_str = str(i)\n        if num_str == num_str[::-1]:\n            result[i % 2] += 1\n\n    return result.values()\n\n\ndef main():\n    # example 1\n    print('example 1:')\n    print(even_odd_palindrome(3))\n    print('''output:\n    (1, 2)''')\n\n    # example 2\n    print('example 2:')\n    print(even_odd_palindrome(12))\n    print('''output:\n    (4, 6)''')\n\n    # example 3\n    print('example 3:')\n    print(even_odd_palindrome(100))\n    print('''output:\n    (25, 75)''')\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 94,
      "score": 2.5464026606575283,
      "candidate": "# exceptions\n    assert isinstance(n, int) and 1 <= n <= 10**3\n\n    # divide and conquer\n    even = 0\n    odd = 0\n    for i in range(1, n+1):\n        if is_palindrome(i):\n            if i % 2 == 0:\n                even += 1\n            else:\n                odd += 1\n    return (even, odd)\n\n\ndef is_palindrome(n):\n    \"\"\"\n    Given an integer n, return true if n is a palindrome integer\n    \"\"\"\n    # exceptions\n    assert isinstance(n, int)\n\n    # divide and conquer\n    # convert n to string and then compare the first half with the last half\n    s = str(n)\n    if s == s[::-1]:\n        return True\n    else:\n        return False\n\n\nif __name__ == \"__main__\":\n    input_n = 12\n    print(even_odd_palindrome(input_n))"
    },
    {
      "rank": 95,
      "score": 2.528092633256856,
      "candidate": "even, odd = 0, 0\n    for i in range(1, n+1):\n        j = i\n        while j > 0:\n            if j % 10 != 0:\n                j /= 10\n            else:\n                break\n        if j == 0:\n            even += 1\n        j = i\n        while j > 0:\n            j //= 10\n        if j == 0:\n            odd += 1\n    return even, odd\n\n\ndef even_odd_palindrome2(n):\n    \"\"\"\n    Given a positive integer n, return a tuple that has the number of even and odd\n    integer palindromes that fall within the range(1, n), inclusive.\n\n    Example 1:\n\n        Input: 3\n        Output: (1, 2)\n        Explanation:\n        Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n    Example 2:\n\n        Input: 12\n        Output: (4, 6)\n        Explanation:\n        Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n    Note:\n        1. 1 <= n <= 10^3\n        2. returned tuple has the number of even and odd integer palindromes respectively.\n    \"\"\"\n    even, odd = 0, 0\n    for i in range(1, n+1):\n        j = i\n        while j > 0:\n            if j % 10 != 0:\n                j /= 10\n            else:\n                break\n        if j == 0:\n            even += 1\n        j = i\n        while j > 0:\n            j //= 10\n        if j == 0:\n            odd += 1\n    return even, odd\n\n\nif __name__ == '__main__':\n    assert even_odd_palindrome(3) == (1, 2)"
    },
    {
      "rank": 96,
      "score": 2.499454103511881,
      "candidate": "# Time Complexity: O(n)\n    # Space Complexity: O(1)\n    even, odd = 0, 0\n    for i in range(n):\n        s = str(i)\n        if s == s[::-1] and i % 2 == 0:\n            even += 1\n        elif s == s[::-1] and i % 2 != 0:\n            odd += 1\n\n    return even, odd\n\n\ndef test_even_odd_palindrome():\n    assert even_odd_palindrome(3) == (1, 2)\n    assert even_odd_palindrome(12) == (4, 6)\n\n\nif __name__ == '__main__':\n    test_even_odd_palindrome()"
    },
    {
      "rank": 97,
      "score": 2.415853243652483,
      "candidate": "# initialize variables\n    even_palindromes = 1\n    odd_palindromes = 0\n\n    # loop through the numbers\n    for num in range(2, n):\n        # convert the number to a string\n        num_str = str(num)\n\n        # check if it is a palindrome\n        if num_str == num_str[::-1]:\n            # if it is a palindrome, check if it is even or odd\n            if num % 2 == 0:\n                # it is even\n                even_palindromes += 1\n            else:\n                # it is odd\n                odd_palindromes += 1\n\n    # return the tuple\n    return (even_palindromes, odd_palindromes)\n\n\ndef test_even_odd_palindrome():\n    # test case 1\n    n = 3\n    assert even_odd_palindrome(n) == (1, 2)\n\n    # test case 2\n    n = 12\n    assert even_odd_palindrome(n) == (4, 6)\n\n    # test case 3\n    n = 20\n    assert even_odd_palindrome(n) == (6, 8)\n\n\nif __name__ == \"__main__\":\n    test_even_odd_palindrome()"
    },
    {
      "rank": 98,
      "score": 2.393805983949355,
      "candidate": "# \u6a21\u62df\n    def is_palindrome(n):\n        s = str(n)\n        return s == s[::-1]\n\n    even_num = 0\n    odd_num = 0\n    for i in range(1, n + 1):\n        if is_palindrome(i) and i % 2 == 0:\n            even_num += 1\n        elif is_palindrome(i) and i % 2 != 0:\n            odd_num += 1\n    return (even_num, odd_num)\n\n\ndef even_odd_palindrome_v2(n):\n    \"\"\"\n    Given a positive integer n, return a tuple that has the number of even and odd\n    integer palindromes that fall within the range(1, n), inclusive.\n\n    Example 1:\n\n        Input: 3\n        Output: (1, 2)\n        Explanation:\n        Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n    Example 2:\n\n        Input: 12\n        Output: (4, 6)\n        Explanation:\n        Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n    Note:\n        1. 1 <= n <= 10^3\n        2. returned tuple has the number of even and odd integer palindromes respectively.\n    \"\"\"\n    # \u6a21\u62df\n    def is_palindrome(n):\n        s = str(n)\n        return s == s[::-1]\n\n    even_num = 0\n    odd_num = 0\n    for i in range(1, n + 1):\n        if is_palindrome(i) and i % 2 == 0:\n            even_num += 1\n        elif is_palindrome(i) and i % 2 != 0:\n            odd_num += 1\n    return (even_num,"
    },
    {
      "rank": 99,
      "score": 2.277153536301279,
      "candidate": "# Time complexity: O(n)\n    # Space complexity: O(1)\n    even, odd = 0, 0\n    for num in range(1, n+1):\n        if is_palindrome(num):\n            if num % 2 == 0:\n                even += 1\n            else:\n                odd += 1\n    return even, odd\n\n\ndef is_palindrome(n):\n    if n < 0:\n        return False\n    if n == 0:\n        return True\n    if n % 10 == 0:\n        return False\n\n    rev = 0\n    while n > rev:\n        rev = rev * 10 + n % 10\n        n //= 10\n    return n == rev or n == rev // 10\n\n\ndef main():\n    print(even_odd_palindrome(3))\n    print(even_odd_palindrome(12))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 100,
      "score": 2.196535249209292,
      "candidate": "# \u6a21\u62df\n    even, odd = 0, 0\n    for i in range(1, n+1):\n        if i == int(str(i)[::-1]):\n            if i % 2 == 0:\n                even += 1\n            else:\n                odd += 1\n    return even, odd\n\n\ndef even_odd_palindrome_constant_space(n):\n    \"\"\"\n    Given a positive integer n, return a tuple that has the number of even and odd\n    integer palindromes that fall within the range(1, n), inclusive.\n\n    Example 1:\n\n        Input: 3\n        Output: (1, 2)\n        Explanation:\n        Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n    Example 2:\n\n        Input: 12\n        Output: (4, 6)\n        Explanation:\n        Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n    Note:\n        1. 1 <= n <= 10^3\n        2. returned tuple has the number of even and odd integer palindromes respectively.\n    \"\"\"\n    # \u6a21\u62df\n    even, odd = 0, 0\n    for i in range(1, n+1):\n        if i == int(str(i)[::-1]):\n            if i % 2 == 0:\n                even += 1\n            else:\n                odd += 1\n    return even, odd"
    }
  ]
}