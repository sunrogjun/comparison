{
  "timestamp": "2025-09-14T21:36:31.088332",
  "method": "improved_llm_judge",
  "judge_model": "codellama/CodeLlama-7b-Python-hf",
  "target_model": "codellama-7b",
  "dataset": "humaneval",
  "problem_number": 71,
  "total_candidates": 100,
  "results": [
    {
      "rank": 1,
      "score": 10.0,
      "candidate": "if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2\n        return (s * (s - a) * (s - b) * (s - c)) ** 0.5\n    else:\n        return -1\n\nprint(triangle_area(3, 4, 5))\nprint(triangle_area(1, 2, 10))"
    },
    {
      "rank": 2,
      "score": 10.0,
      "candidate": "if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2\n        return (s*(s - a)*(s - b)*(s - c)) ** 0.5\n    else:\n        return -1"
    },
    {
      "rank": 3,
      "score": 10.0,
      "candidate": "if a + b <= c or a + c <= b or b + c <= a:\n        return -1\n    else:\n        p = (a + b + c) / 2\n        area = (p * (p - a) * (p - b) * (p - c)) ** 0.5\n        return round(area, 2)\n\ndef test_cases():\n    assert triangle_area(3, 4, 5) == 6.00\n    assert triangle_area(1, 2, 10) == -1\n    assert triangle_area(10, 20, 30) == 100.00\n    assert triangle_area(10, 20, 30) == 100.00\n    assert triangle_area(10, 20, 30) == 100.00\n    assert triangle_area(10, 20, 30) == 100.00\n    assert triangle_area(10, 20, 30) == 100.00\n    assert triangle_area(10, 20, 30) == 100.00\n    assert triangle_area(10, 20, 30) == 100.00\n    assert triangle_area(10, 20, 30) == 100.00\n    assert triangle_area(10, 20, 30) == 100.00\n    assert triangle_area(10, 20, 30) == 100.00\n    assert triangle_area(10, 20, 30) == 100.00\n    assert triangle_area(10, 20, 30) == 100.00\n    assert triangle_area(10, 20, 30) == 100.00\n    assert triangle_area(10, 20, 30) == 100.00\n    assert triangle_area(10, 20, 30) =="
    },
    {
      "rank": 4,
      "score": 10.0,
      "candidate": "if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2\n        area = (s*(s-a)*(s-b)*(s-c)) ** 0.5\n        return round(area, 2)\n    else:\n        return -1\n\nprint(triangle_area(3, 4, 5))\nprint(triangle_area(1, 2, 10))"
    },
    {
      "rank": 5,
      "score": 10.0,
      "candidate": "if a + b > c and a + c > b and b + c > a:\n        return (a + b + c)/2 * 1/2 * (a**2 + b**2 + c**2)**0.5\n    else:\n        return -1\n\ndef test_case(test_number, result, expected):\n    print(\"Test Case #{0}\".format(test_number))\n    if result == expected:\n        print(\"Passed\")\n    else:\n        print(\"Failed. {0} != {1}\".format(result, expected))\n\ntest_case(1, triangle_area(3, 4, 5), 6.00)\ntest_case(2, triangle_area(1, 2, 10), -1)\ntest_case(3, triangle_area(10, 2, 5), 9.13)\ntest_case(4, triangle_area(10, 2, 12), 12.47)\ntest_case(5, triangle_area(7, 2, 5), -1)\ntest_case(6, triangle_area(1, 2, 3), -1)\ntest_case(7, triangle_area(1, 3, 2), 2.00)\ntest_case(8, triangle_area(2, 1, 3), 2.00)\ntest_case(9, triangle_area(2, 3, 1), 2.00)\ntest_case(10, triangle_area(3, 1, 2), 2.00)\ntest_case(11, triangle_area(3, 2, 1), 2.00)\ntest_case(12, triangle_area(2, 3, 1), 2.00)\ntest_case(13, triangle_area(1, 3, 2), 2.00)"
    },
    {
      "rank": 6,
      "score": 10.0,
      "candidate": "if a + b > c and b + c > a and a + c > b:\n        s = (a + b + c) / 2\n        area = (s*(s-a)*(s-b)*(s-c))**0.5\n        return round(area, 2)\n    else:\n        return -1\n\nprint(triangle_area(3, 4, 5))\nprint(triangle_area(1, 2, 10))"
    },
    {
      "rank": 7,
      "score": 10.0,
      "candidate": "if a + b > c and a + c > b and b + c > a:\n        return (a*b*c)/2\n    else:\n        return -1\n\ndef triangle_area_2(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return the area of\n    the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    Otherwise return -1\n    Three sides make a valid triangle when the sum of any two sides is greater \n    than the third side.\n    Example:\n    triangle_area(3, 4, 5) == 6.00\n    triangle_area(1, 2, 10) == -1\n    '''\n    if a + b > c and a + c > b and b + c > a:\n        return (a*b*c)/2\n    else:\n        return -1\n\ndef triangle_area_3(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return the area of\n    the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    Otherwise return -1\n    Three sides make a valid triangle when the sum of any two sides is greater \n    than the third side.\n    Example:\n    triangle_area(3, 4, 5) == 6.00\n    triangle_area(1, 2, 10) == -1\n    '''\n    if a + b > c and a + c > b and b + c > a:\n        return (a*b*c)/2\n    else:\n        return -1\n\ndef triangle_area_4(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return the area of\n    the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    Otherwise return -1\n    Three sides make a valid triangle when the sum of any two sides is greater \n    than the third side.\n    Example:\n    triangle_area(3, 4, 5) == 6.00\n    triangle_area(1, 2, 10) == -1"
    },
    {
      "rank": 8,
      "score": 10.0,
      "candidate": "if a + b > c and a + c > b and b + c > a:\n        p = (a + b + c)/2\n        return (p*(p-a)*(p-b)*(p-c))**0.5\n    return -1\n\nprint(triangle_area(3, 4, 5))"
    },
    {
      "rank": 9,
      "score": 10.0,
      "candidate": "if a + b > c and a + c > b and b + c > a:\n        area = (a + b + c) / 2\n        area = (area * (area - a) * (area - b) * (area - c)) ** 0.5\n        return round(area, 2)\n    else:\n        return -1\n\ndef test_cases():\n    assert triangle_area(3, 4, 5) == 6.00\n    assert triangle_area(1, 2, 10) == -1\n    assert triangle_area(10, 2, 1) == -1\n    assert triangle_area(10, 2, 10) == -1\n    assert triangle_area(10, 5, 5) == 10.00\n    assert triangle_area(1, 1, 1) == 0.43\n    assert triangle_area(7.0, 8.0, 9.0) == 18.52\n    assert triangle_area(100, 200, 100) == 176.76\n    assert triangle_area(10, 10, 10) == 10.00\n    assert triangle_area(10, 10, 100) == 50.26\n    assert triangle_area(10, 100, 10) == 50.26\n    assert triangle_area(1, 1, 100) == -1\n    assert triangle_area(100, 100, 1) == -1\n    assert triangle_area(1, 100, 100) == -1\n    print(\"Test Success!\")\n\ntest_cases()"
    },
    {
      "rank": 10,
      "score": 10.0,
      "candidate": "if a + b > c and a + c > b and b + c > a:\n        return 0.5 * (a * b * c) ** (1/2)\n    else:\n        return -1"
    },
    {
      "rank": 11,
      "score": 9.234050852198141,
      "candidate": "# your code here\n    if a + b > c and a + c > b and b + c > a:\n        return (a + b + c)/2 * ((a + b + c) - a) ** 0.5\n    else:\n        return -1\n\n\nif __name__ == '__main__':\n    print(triangle_area(3, 4, 5))\n    print(triangle_area(1, 2, 10))"
    },
    {
      "rank": 12,
      "score": 9.226766272351448,
      "candidate": "if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2\n        area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n        return round(area, 2)\n    else:\n        return -1"
    },
    {
      "rank": 13,
      "score": 9.21346272767743,
      "candidate": "if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2\n        return (s*(s-a)*(s-b)*(s-c)) ** 0.5\n    else:\n        return -1"
    },
    {
      "rank": 14,
      "score": 9.205959372648458,
      "candidate": "if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2\n        area = (s*(s - a) * (s - b) * (s - c)) ** (1/2)\n        return round(area,2)\n    else:\n        return -1"
    },
    {
      "rank": 15,
      "score": 9.183391466815202,
      "candidate": "if a + b > c and a + c > b and b + c > a:\n        return (a + b + c) / 2 * (1 / 2)**0.5\n    else:\n        return -1\n\n\nprint(triangle_area(3, 4, 5))\nprint(triangle_area(1, 2, 10))"
    },
    {
      "rank": 16,
      "score": 9.177268828905222,
      "candidate": "if a + b > c and a + c > b and b + c > a:\n        return (a + b + c) / 2 * (((a + b) * (b + c) * (a + c)) ** 0.5)\n    else:\n        return -1"
    },
    {
      "rank": 17,
      "score": 9.122564458729856,
      "candidate": "if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2\n        return (s * (s - a) * (s - b) * (s - c)) ** 0.5\n    else:\n        return -1"
    },
    {
      "rank": 18,
      "score": 8.946210893390457,
      "candidate": "if a+b>c and a+c>b and b+c>a:\n        return round((a+b+c)/2*((a+b)-(a+c)*(b+c)/(a+b+c)),2)\n    else:\n        return -1\n\nprint(triangle_area(3, 4, 5))\nprint(triangle_area(1, 2, 10))"
    },
    {
      "rank": 19,
      "score": 8.910084504002544,
      "candidate": "if a + b > c and a + c > b and b + c > a:\n        area = (a + b + c) / 2\n        area = area * (area - a) * (area - b) * (area - c)\n        area = area ** 0.5\n        return round(area, 2)\n    else:\n        return -1\n\nprint(triangle_area(3, 4, 5))\nprint(triangle_area(1, 2, 10))"
    },
    {
      "rank": 20,
      "score": 8.8281618090209,
      "candidate": "if a + b > c and a + c > b and b + c > a:\n        p = (a + b + c)/2\n        return (p*(p-a)*(p-b)*(p-c))**(1/2)\n    else:\n        return -1"
    },
    {
      "rank": 21,
      "score": 8.81367773444215,
      "candidate": "if a + b > c and a + c > b and b + c > a:\n        return (a + b + c) / 2 * ((a + b) * (b + c) * (a + c)) ** 0.5\n    else:\n        return -1\n\ndef test_cases():\n    assert triangle_area(3, 4, 5) == 6.00\n    assert triangle_area(1, 2, 10) == -1\n    assert triangle_area(1, 2, 3) == 4.00\n    assert triangle_area(7, 2, 3) == -1\n    assert triangle_area(1, 7, 2) == -1\n    print(\"Test Success!\")\n\ntest_cases()"
    },
    {
      "rank": 22,
      "score": 8.76828871349479,
      "candidate": "if a + b > c and a + c > b and b + c > a:\n        return round(((a + b) * c) / 2, 2)\n    else:\n        return -1\n\nprint(triangle_area(3, 4, 5))\nprint(triangle_area(1, 2, 10))"
    },
    {
      "rank": 23,
      "score": 8.750282588864879,
      "candidate": "if a+b>c and a+c>b and b+c>a:\n        p=(a+b+c)/2\n        return (p*(p-a)*(p-b)*(p-c))**0.5\n    return -1"
    },
    {
      "rank": 24,
      "score": 8.692801520950061,
      "candidate": "if a + b > c and a + c > b and b + c > a:\n        p = (a + b + c) / 2\n        area = (p*(p-a)*(p-b)*(p-c))**0.5\n        return round(area, 2)\n    else:\n        return -1\n\n\nprint(triangle_area(3, 4, 5))\nprint(triangle_area(1, 2, 10))"
    },
    {
      "rank": 25,
      "score": 8.632293453617281,
      "candidate": "if a + b > c and a + c > b and b + c > a:\n        return round((a * b * 100) / 2, 2)\n    else:\n        return -1"
    },
    {
      "rank": 26,
      "score": 8.625262456968262,
      "candidate": "if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2\n        return (s * (s - a) * (s - b) * (s - c)) ** 0.5\n    return -1\n\n\nprint(triangle_area(3, 4, 5))\nprint(triangle_area(1, 2, 10))"
    },
    {
      "rank": 27,
      "score": 8.625142247198651,
      "candidate": "if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2\n        area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n        return round(area, 2)\n    else:\n        return -1\n\nprint(triangle_area(3, 4, 5))\nprint(triangle_area(1, 2, 10))"
    },
    {
      "rank": 28,
      "score": 8.610076160146226,
      "candidate": "if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2\n        area = (s*(s-a)*(s-b)*(s-c)) ** 0.5\n        return round(area, 2)\n    return -1"
    },
    {
      "rank": 29,
      "score": 8.606486429141842,
      "candidate": "if (a + b > c) and (b + c > a) and (a + c > b):\n        return (1/2) * (a + b + c) * (area_triangle(a, b, c))\n    else:\n        return -1\n    \ndef area_triangle(a, b, c):\n    return (a + b + c) / 2\n\n#print(triangle_area(3, 4, 5))\n#print(triangle_area(1, 2, 10))"
    },
    {
      "rank": 30,
      "score": 8.60156811074208,
      "candidate": "if a + b > c and a + c > b and b + c > a:\n        return (a+b+c)/2 * 0.5\n    else:\n        return -1\n    \n\nprint(triangle_area(3, 4, 5))\nprint(triangle_area(1, 2, 10))"
    },
    {
      "rank": 31,
      "score": 8.565425580227462,
      "candidate": "if (a + b > c) and (a + c > b) and (b + c > a):\n        s = (a + b + c) / 2\n        area = (s*(s-a)*(s-b)*(s-c))**0.5\n        return round(area,2)\n    else:\n        return -1\n\nprint(triangle_area(3, 4, 5))\nprint(triangle_area(1, 2, 10))"
    },
    {
      "rank": 32,
      "score": 8.542875062379007,
      "candidate": "if (a + b > c) and (a + c > b) and (b + c > a):\n        s = (a + b + c) / 2\n        area = (s*(s-a)*(s-b)*(s-c)) ** 0.5\n        return round(area, 2)\n    else:\n        return -1\n    \nprint(triangle_area(3, 4, 5))\nprint(triangle_area(1, 2, 10))"
    },
    {
      "rank": 33,
      "score": 8.53012858503943,
      "candidate": "if a + b > c and a + c > b and b + c > a:\n        return (a + b + c) / 2 * ((a + b) * (a + c) * (b + c)) ** 0.5\n    return -1\n\nprint(triangle_area(3, 4, 5))\nprint(triangle_area(1, 2, 10))"
    },
    {
      "rank": 34,
      "score": 8.48796797856353,
      "candidate": "if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2\n        area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n        return round(area, 2)\n    else:\n        return -1\n\n\nprint(triangle_area(3, 4, 5))\nprint(triangle_area(1, 2, 10))"
    },
    {
      "rank": 35,
      "score": 8.478208546788407,
      "candidate": "if a + b > c and a + c > b and b + c > a:\n        return 0.5 * (a + b + c) * (a - b) * (b - c) * (a - c)\n    return -1\n\ndef test_cases():\n    assert triangle_area(3, 4, 5) == 6.00\n    assert triangle_area(1, 2, 10) == -1\n    print(\"Test Success!\")\n\ntest_cases()"
    },
    {
      "rank": 36,
      "score": 8.437695832075478,
      "candidate": "if a + b > c and a + c > b and b + c > a:\n        area = (a + b + c) / 2\n        area = (area * (area - a) * (area - b) * (area - c)) ** 0.5\n        return round(area, 2)\n    else:\n        return -1"
    },
    {
      "rank": 37,
      "score": 8.386620303250325,
      "candidate": "if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2\n        area = (s*(s - a)*(s - b)*(s - c)) ** 0.5\n        return round(area, 2)\n    else:\n        return -1"
    },
    {
      "rank": 38,
      "score": 8.351614956112536,
      "candidate": "if a+b>c and a+c>b and b+c>a:\n        s=(a+b+c)/2\n        area=(s*(s-a)*(s-b)*(s-c))**0.5\n        return round(area,2)\n    else:\n        return -1\n\nprint(triangle_area(3, 4, 5))\nprint(triangle_area(1, 2, 10))"
    },
    {
      "rank": 39,
      "score": 8.327367757082776,
      "candidate": "if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2\n        return (s * (s - a) * (s - b) * (s - c)) ** 0.5\n    else:\n        return -1"
    },
    {
      "rank": 40,
      "score": 8.298597569547805,
      "candidate": "if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2\n        return (s * (s - a) * (s - b) * (s - c)) ** 0.5\n    else:\n        return -1"
    },
    {
      "rank": 41,
      "score": 8.294940769211511,
      "candidate": "if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2\n        return (s * (s - a) * (s - b) * (s - c)) ** 0.5\n    return -1"
    },
    {
      "rank": 42,
      "score": 8.2938925966498,
      "candidate": "if a + b > c and b + c > a and c + a > b:\n        return (a*b*c)/2\n    else:\n        return -1"
    },
    {
      "rank": 43,
      "score": 8.251903304236286,
      "candidate": "if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2\n        return (s * (s - a) * (s - b) * (s - c)) ** 0.5\n    else:\n        return -1"
    },
    {
      "rank": 44,
      "score": 8.185309335307622,
      "candidate": "if a + b > c and a + c > b and b + c > a:\n        return 0.5 * (a + b + c) * (b + c - a) * (c + a - b) / (4 * (a + b + c))\n    else:\n        return -1\n\n\nprint(triangle_area(3, 4, 5))\nprint(triangle_area(1, 2, 10))"
    },
    {
      "rank": 45,
      "score": 8.179564342560925,
      "candidate": "if a + b > c and b + c > a and a + c > b:\n        s = (a + b + c)/2\n        area = (s*(s - a)*(s - b)*(s - c))**(0.5)\n        return round(area, 2)\n    else:\n        return -1"
    },
    {
      "rank": 46,
      "score": 8.163300679823958,
      "candidate": "if a+b>c and a+c>b and b+c>a:\n        s = (a+b+c)/2\n        area = (s*(s-a)*(s-b)*(s-c))**0.5\n        return round(area, 2)\n    else:\n        return -1\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 47,
      "score": 8.144125099485041,
      "candidate": "if a + b > c and a + c > b and b + c > a:\n        return round(((a+b+c)/2) * (((a+b)**2)*((a+c)**2)),2)\n    else:\n        return -1\n\nprint(triangle_area(3, 4, 5)) # 6.00\nprint(triangle_area(1, 2, 10)) # -1"
    },
    {
      "rank": 48,
      "score": 8.143591138329747,
      "candidate": "if a + b > c and a + c > b and b + c > a:\n        p = (a + b + c) / 2\n        area = (p * (p - a) * (p - b) * (p - c)) ** 0.5\n        return round(area, 2)\n    else:\n        return -1\n\nprint(triangle_area(3, 4, 5))\nprint(triangle_area(1, 2, 10))"
    },
    {
      "rank": 49,
      "score": 8.121884567141883,
      "candidate": "if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2\n        area = (s*(s-a)*(s-b)*(s-c))**0.5\n        return round(area, 2)\n    else:\n        return -1\n\n\nassert triangle_area(3, 4, 5) == 6.00, 'First'\nassert triangle_area(1, 2, 10) == -1, 'Second'\nassert triangle_area(10, 2, 5) == 10.00, 'Third'\nassert triangle_area(10, 2, 2) == -1, 'Fourth'\nassert triangle_area(10, 10, 20) == 50.00, 'Fifth'\nassert triangle_area(10, 20, 20) == 60.00, 'Sixth'\nassert triangle_area(10, 20, 10) == 30.00, 'Seventh'\nassert triangle_area(10, 20, 30) == -1, 'Eighth'\nassert triangle_area(10, 10, 30) == 40.00, 'Ninth'\nassert triangle_area(1, 2, 3) == -1, 'Tenth'"
    },
    {
      "rank": 50,
      "score": 8.105983444291466,
      "candidate": "if (a + b > c) and (a + c > b) and (b + c > a):\n        s = (a + b + c) / 2\n        area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n        return round(area, 2)\n    else:\n        return -1"
    },
    {
      "rank": 51,
      "score": 8.040197642997851,
      "candidate": "if a + b > c and a + c > b and b + c > a:\n        return (a + b + c) / 2 * ((a + b) / 2) ** 0.5\n    return -1\n\ndef test_cases():\n    assert triangle_area(3, 4, 5) == 6.00\n    assert triangle_area(1, 2, 10) == -1\n    assert triangle_area(1, 2, 3) == 4.00\n    assert triangle_area(1, 3, 2) == 4.00\n    assert triangle_area(2, 1, 3) == 4.00\n    assert triangle_area(2, 3, 1) == 4.00\n    assert triangle_area(3, 1, 2) == 4.00\n    assert triangle_area(10, 2, 1) == -1\n    assert triangle_area(10, 1, 2) == -1\n    assert triangle_area(2, 10, 1) == -1\n    assert triangle_area(2, 1, 10) == -1\n    assert triangle_area(1, 10, 2) == -1\n    assert triangle_area(1, 2, 10) == -1\n    print(\"Test Success!\")\n\ntest_cases()"
    },
    {
      "rank": 52,
      "score": 8.024835682833125,
      "candidate": "if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2\n        return (s * (s - a) * (s - b) * (s - c)) ** 0.5\n    else:\n        return -1"
    },
    {
      "rank": 53,
      "score": 7.938028884277233,
      "candidate": "if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2\n        return (s * (s - a) * (s - b) * (s - c)) ** 0.5\n    else:\n        return -1"
    },
    {
      "rank": 54,
      "score": 7.915588979966494,
      "candidate": "if a+b>c and a+c>b and b+c>a:\n        p=(a+b+c)/2\n        area=((p*(p-a)*(p-b)*(p-c))**0.5)/4\n        return round(area, 2)\n    else:\n        return -1\n\nprint(triangle_area(3, 4, 5))\nprint(triangle_area(1, 2, 10))"
    },
    {
      "rank": 55,
      "score": 7.8912769574414305,
      "candidate": "if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2\n        area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n        return round(area, 2)\n    else:\n        return -1"
    },
    {
      "rank": 56,
      "score": 7.868947655733293,
      "candidate": "if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2\n        area = (s*(s-a)*(s-b)*(s-c))**(0.5)\n        return round(area, 2)\n    else:\n        return -1"
    },
    {
      "rank": 57,
      "score": 7.84634113240411,
      "candidate": "if a+b>c and a+c>b and b+c>a:\n        return round(((a+b+c)/2)*(math.sin(math.radians(a))),2)\n    else:\n        return -1"
    },
    {
      "rank": 58,
      "score": 7.780351419995229,
      "candidate": "if a + b > c and a + c > b and b + c > a:\n        return (a+b+c)/2 * ((((a+b+c)/2)**2 - a*b)**0.5)\n    else:\n        return -1\n\n\nprint(triangle_area(3, 4, 5))\nprint(triangle_area(1, 2, 10))"
    },
    {
      "rank": 59,
      "score": 7.7320703513377165,
      "candidate": "if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2\n        return (s * (s - a) * (s - b) * (s - c)) ** 0.5\n    else:\n        return -1\n\nprint(triangle_area(3, 4, 5))\nprint(triangle_area(1, 2, 10))"
    },
    {
      "rank": 60,
      "score": 7.705183449260731,
      "candidate": "if a+b>c and a+c>b and b+c>a:\n        s=(a+b+c)/2\n        area=(s*(s-a)*(s-b)*(s-c))**0.5\n        return round(area,2)\n    return -1"
    },
    {
      "rank": 61,
      "score": 7.562924366763077,
      "candidate": "if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2\n        area = (s*(s-a)*(s-b)*(s-c)) ** 0.5\n        return round(area,2)\n    else:\n        return -1\n\n\nprint(triangle_area(3, 4, 5))\nprint(triangle_area(1, 2, 10))"
    },
    {
      "rank": 62,
      "score": 7.4878043221155455,
      "candidate": "if a+b>c and a+c>b and b+c>a:\n        return (a+b+c)/2 * abs(a*b/2)\n    else:\n        return -1\n\nprint(triangle_area(3, 4, 5))\nprint(triangle_area(1, 2, 10))"
    },
    {
      "rank": 63,
      "score": 7.464609382504557,
      "candidate": "if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2\n        area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n        return round(area, 2)\n    else:\n        return -1"
    },
    {
      "rank": 64,
      "score": 3.685342928268307,
      "candidate": "if a+b>c and b+c>a and c+a>b:\n        s=(a+b+c)/2\n        area=s*(s-a)*(s-b)*(s-c)\n        return round(area**(1/2),2)\n    else:\n        return -1\n\nif __name__ == '__main__':\n    print(\"Example:\")\n    print(triangle_area(3, 4, 5))\n\n    # These \"asserts\" are used for self-checking and not for an auto-testing\n    assert triangle_area(3, 4, 5) == 6.00, \"First\"\n    assert triangle_area(2, 2, 2) == 4.13, \"Second\"\n    assert triangle_area(5, 4, 3) == -1, \"Third\"\n    print(\"Coding complete? Click 'Check' to earn cool rewards!\")"
    },
    {
      "rank": 65,
      "score": 3.391135223700999,
      "candidate": "if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2\n        area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n        return round(area, 2)\n    else:\n        return -1\n\n\ndef test_cases():\n    assert triangle_area(3, 4, 5) == 6.00\n    assert triangle_area(3, 4, 6) == -1\n    assert triangle_area(3, 3, 3) == 4.83\n    assert triangle_area(2, 2, 2) == 1.73\n    assert triangle_area(1, 2, 10) == -1\n    assert triangle_area(10, 2, 1) == -1\n    assert triangle_area(1, 2, 1) == -1\n    print(\"Test Success!\")\n\n\nif __name__ == \"__main__\":\n    test_cases()"
    },
    {
      "rank": 66,
      "score": 3.381469823323502,
      "candidate": "if a + b > c and a + c > b and b + c > a:\n        return (a + b + c) / 2 * (a ** 2 + b ** 2 + c ** 2) ** 0.5\n    else:\n        return -1\n\n\ndef test_cases():\n    assert triangle_area(1, 2, 10) == -1\n    assert triangle_area(7, 2, 5) == 11.50\n    assert triangle_area(10, 2, 5) == 10.00\n    assert triangle_area(10, 5, 2) == 10.00\n    assert triangle_area(5, 10, 2) == 10.00\n    assert triangle_area(2, 5, 10) == 10.00\n    assert triangle_area(10, 2, 5) == 10.00\n    assert triangle_area(2, 5, 10) == 10.00\n    assert triangle_area(5, 10, 2) == 10.00\n    assert triangle_area(10, 2, 5) == 10.00\n    assert triangle_area(2, 5, 10) == 10.00\n    assert triangle_area(5, 10, 2) == 10.00\n    assert triangle_area(2, 5, 10) == 10.00\n    assert triangle_area(5, 10, 2) == 10.00\n    assert triangle_area(2, 5, 10) == 10.00\n    assert triangle_area(5, 10, 2) == 10.00\n    assert triangle_area(2, 5, 10) == 10.00\n    assert triangle_area(5, 10, 2) == 10.00\n    assert triangle_area(2, 5, 10) == 10.00\n    assert triangle_area(5"
    },
    {
      "rank": 67,
      "score": 3.360951697035273,
      "candidate": "if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2\n        area = (s*(s - a)*(s - b)*(s - c)) ** 0.5\n        return round(area, 2)\n    return -1\n\n\nprint(triangle_area(3, 4, 5))\nprint(triangle_area(1, 2, 10))"
    },
    {
      "rank": 68,
      "score": 3.3386987835497672,
      "candidate": "if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2\n        return (s*(s-a)*(s-b)*(s-c))**0.5\n    return -1\n\n\n\ndef test_function():\n    assert triangle_area(3, 4, 5) == 6.00, \"Triangle 3-4-5\"\n    assert triangle_area(7, 2, 3) == -1, \"Wrong triangle 7-2-3\"\n    assert triangle_area(1, 2, 10) == -1, \"Wrong triangle 1-2-10\"\n    assert triangle_area(7, 2, 3) == -1, \"Wrong triangle 7-2-3\"\n    assert triangle_area(1, 1, 1) == -1, \"Triangle 1-1-1\"\n    assert triangle_area(10, 20, 10) == -1, \"Isosceles 10-20-10\"\n    assert triangle_area(7, 20, 2) == -1, \"Isosceles 7-20-2\"\n    assert triangle_area(10, 10, 30) == -1, \"Right 10-10-30\"\n    assert triangle_area(35, 35, 50) == -1, \"Right 35-35-50\"\n    assert triangle_area(10, 20, 30) == 100, \"Scalene 10-20-30\"\n    assert triangle_area(100, 200, 100) == 5000, \"Scalene 100-200-100\""
    },
    {
      "rank": 69,
      "score": 3.30434161747818,
      "candidate": "if a+b>c and b+c>a and c+a>b:\n        s = (a+b+c)/2\n        area = (s*(s-a)*(s-b)*(s-c))**0.5\n        return round(area,2)\n    else:\n        return -1\n\n\ndef triangle_area2(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return the area of\n    the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    Otherwise return -1\n    Three sides make a valid triangle when the sum of any two sides is greater \n    than the third side.\n    Example:\n    triangle_area(3, 4, 5) == 6.00\n    triangle_area(1, 2, 10) == -1\n    '''\n    if a+b>c and b+c>a and c+a>b:\n        return round(((a+b+c)/2)*(((a+b)*(b+c)*(c+a))**0.5),2)\n    else:\n        return -1\n\n\ndef triangle_area3(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return the area of\n    the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    Otherwise return -1\n    Three sides make a valid triangle when the sum of any two sides is greater \n    than the third side.\n    Example:\n    triangle_area(3, 4, 5) == 6.00\n    triangle_area(1, 2, 10) == -1\n    '''\n    if a+b>c and b+c>a and c+a>b:\n        s = (a+b+c)/2\n        return round((s*(s-a)*(s-b)*(s-c))**0.5,2)\n    else:\n        return -1\n\n\ndef triangle_area4(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return the area of\n    the"
    },
    {
      "rank": 70,
      "score": 3.304103926618833,
      "candidate": "# your code here\n    if a + b <= c or a + c <= b or b + c <= a:\n        return -1\n    s = (a + b + c) / 2\n    area = (s*(s-a)*(s-b)*(s-c)) ** 0.5\n    return area\n\nprint(triangle_area(3, 4, 5))\nprint(triangle_area(1, 2, 10))"
    },
    {
      "rank": 71,
      "score": 3.3006345542858533,
      "candidate": "if a + b > c and a + c > b and b + c > a:\n        p = (a + b + c) / 2\n        area = (p * (p - a) * (p - b) * (p - c)) ** 0.5\n        return round(area, 2)\n    else:\n        return -1\n\n\ndef test_triangle_area():\n    assert triangle_area(3, 4, 5) == 6.00\n    assert triangle_area(1, 2, 10) == -1\n    assert triangle_area(7, 2, 5) == 10.50\n    assert triangle_area(10, 2, 5) == 10.50\n    assert triangle_area(10, 2, 6) == 9.75\n    assert triangle_area(10, 5, 6) == -1"
    },
    {
      "rank": 72,
      "score": 3.200747216126807,
      "candidate": "if a + b > c and a + c > b and b + c > a:\n        p = (a + b + c) / 2\n        area = (p * (p - a) * (p - b) * (p - c)) ** 0.5\n        return round(area, 2)\n    else:\n        return -1\n\n\ndef test_case(a, b, c, solution, test_func):\n\n    output = test_func(a, b, c)\n    if output == solution:\n        print(\"Passed\")\n    else:\n        print(f\"Failed, expected {solution}, got {output}\")\n\n\ntest_case(3, 4, 5, 6.00, triangle_area)\ntest_case(1, 2, 10, -1, triangle_area)\ntest_case(1, 2, 3, 2.00, triangle_area)\ntest_case(7, 2, 3, -1, triangle_area)"
    },
    {
      "rank": 73,
      "score": 3.189908950251942,
      "candidate": "if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2\n        return (s * (s - a) * (s - b) * (s - c)) ** 0.5\n    else:\n        return -1\n\n\nprint(triangle_area(3, 4, 5))\nprint(triangle_area(1, 2, 10))"
    },
    {
      "rank": 74,
      "score": 3.1321316514593462,
      "candidate": "if a + b > c and a + c > b and b + c > a:\n        s = (a+b+c)/2\n        area = (s*(s-a)*(s-b)*(s-c))**(1/2)\n        return round(area, 2)\n    return -1\n\n\ndef test_cases():\n    assert triangle_area(3, 4, 5) == 6.00\n    assert triangle_area(1, 2, 10) == -1\n    assert triangle_area(1, 2, 3) == 4.00\n    assert triangle_area(7, 2, 3) == 10.00\n    assert triangle_area(1, 2, 30) == -1\n    print(\"Test Success!\")\n\n\ntest_cases()"
    },
    {
      "rank": 75,
      "score": 3.127138767140331,
      "candidate": "if (a + b > c) and (a + c > b) and (b + c > a):\n        s = (a + b + c) / 2\n        area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n        return round(area, 2)\n    return -1\n\n\ndef test_function():\n    assert triangle_area(3, 4, 5) == 6.00\n    assert triangle_area(1, 2, 10) == -1\n    assert triangle_area(1, 2, 3) == -1"
    },
    {
      "rank": 76,
      "score": 3.1216379105740835,
      "candidate": "# Check if the three sides make a valid triangle\n    if a + b > c and a + c > b and b + c > a:\n        # Calculate the area of the triangle\n        s = (a + b + c) / 2\n        area = (s*(s-a)*(s-b)*(s-c)) ** 0.5\n        return round(area, 2)\n    else:\n        return -1\n\nprint(triangle_area(3, 4, 5))\nprint(triangle_area(1, 2, 10))"
    },
    {
      "rank": 77,
      "score": 3.0772795301517597,
      "candidate": "if a + b > c and a + c > b and b + c > a:\n        p = (a + b + c) / 2\n        area = (p*(p-a)*(p-b)*(p-c)) ** 0.5\n        return round(area, 2)\n    else:\n        return -1\n\n\n\nprint(triangle_area(3, 4, 5))\nprint(triangle_area(1, 2, 10))"
    },
    {
      "rank": 78,
      "score": 3.0410413581926505,
      "candidate": "if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2\n        area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n        return round(area, 2)\n    return -1\n\n\nif __name__ == '__main__':\n    a = int(input())\n    b = int(input())\n    c = int(input())\n    result = triangle_area(a, b, c)\n    print(result)"
    },
    {
      "rank": 79,
      "score": 3.0339514873181357,
      "candidate": "if a + b > c and a + c > b and b + c > a:\n        p = (a + b + c) / 2\n        return (p * (p - a) * (p - b) * (p - c)) ** 0.5\n    else:\n        return -1\n\ndef test_cases():\n    assert triangle_area(3, 4, 5) == 6.00\n    assert triangle_area(1, 2, 10) == -1\n    assert triangle_area(10, 10, 10) == 10.00\n    assert triangle_area(5, 1, 1) == 5.24\n    assert triangle_area(7.0, 2.0, 2.0) == 8.49\n    assert triangle_area(5.0, 4.0, 3.0) == 6.00\n    assert triangle_area(5.0, 12.0, 8.0) == -1\n    assert triangle_area(10.0, 20.0, 25.0) == 50.00\n    assert triangle_area(100.0, 200.0, 250.0) == 176.77\n    print(\"Test Success!\")\n\ntest_cases()"
    },
    {
      "rank": 80,
      "score": 2.9867443655293178,
      "candidate": "if a+b>c and a+c>b and b+c>a:\n        s = (a+b+c)/2\n        area = (s*(s-a)*(s-b)*(s-c))**0.5\n        return round(area,2)\n    else:\n        return -1\n\n# \u53e6\u4e00\u79cd\u89e3\u6cd5\ndef triangle_area(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return the area of\n    the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    Otherwise return -1\n    Three sides make a valid triangle when the sum of any two sides is greater \n    than the third side.\n    Example:\n    triangle_area(3, 4, 5) == 6.00\n    triangle_area(1, 2, 10) == -1\n    '''\n    if a+b>c and a+c>b and b+c>a:\n        s = (a+b+c)/2\n        area = (s*(s-a)*(s-b)*(s-c))**0.5\n        return round(area,2)\n    else:\n        return -1\n\nprint(triangle_area(3, 4, 5))\nprint(triangle_area(1, 2, 10))"
    },
    {
      "rank": 81,
      "score": 2.9733562550152763,
      "candidate": "if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2\n        area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n        return round(area, 2)\n    else:\n        return -1\n\n\nprint(triangle_area(3, 4, 5))\nprint(triangle_area(1, 2, 10))"
    },
    {
      "rank": 82,
      "score": 2.9488422085666617,
      "candidate": "# Check if the three sides form a valid triangle\n    if (a + b > c) and (a + c > b) and (b + c > a):\n        # Calculate the area of the triangle using Heron's Formula\n        s = (a + b + c) / 2\n        area = (s*(s-a)*(s-b)*(s-c)) ** 0.5\n        return round(area, 2)\n    return -1\n\n\nprint(triangle_area(3, 4, 5))  # == 6.00,  area of 3, 4, 5 triangle\nprint(triangle_area(1, 2, 10))  # == -1,  the three sides do not form a triangle\nprint(triangle_area(10, 10, 10))  # == 10.00,  area of 3, 4, 5 triangle\nprint(triangle_area(10, 1, 1))  # == -1,  the three sides do not form a triangle\nprint(triangle_area(1, 1, 1))  # == -1,  the three sides do not form a triangle\nprint(triangle_area(1, 2, 2))  # == -1,  the three sides do not form a triangle"
    },
    {
      "rank": 83,
      "score": 2.9187214015001204,
      "candidate": "if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2\n        area = (s*(s-a)*(s-b)*(s-c)) ** 0.5\n        return round(area, 2)\n    else:\n        return -1\n\n\n#Alternative solutions\ndef triangle_area(a, b, c):\n    if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2\n        area = (s*(s-a)*(s-b)*(s-c)) ** 0.5\n        return round(area, 2)\n    return -1\n\ndef triangle_area(a, b, c):\n    if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2\n        area = (s*(s-a)*(s-b)*(s-c)) ** 0.5\n        return round(area, 2)\n    return -1\n\n\n#Test\ndef test(a, b, c):\n    print \"A triangle with sides of length\", a, b, c, \"has area\"\n    print triangle_area(a, b, c), \"unit^2\"\n\ntest(3, 4, 5)\ntest(1, 2, 10)\ntest(1, 2, 3)"
    },
    {
      "rank": 84,
      "score": 2.916462768819982,
      "candidate": "if a + b > c and a + c > b and b + c > a:\n        area = 0.5 * (a + b + c) * (a - b) * (a - c) * (b - c)\n        return round(area**(1/2), 2)\n    else:\n        return -1\n\nprint(triangle_area(3, 4, 5))\nprint(triangle_area(1, 2, 10))\n\n\n# Another solution\ndef triangle_area(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return the area of\n    the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    Otherwise return -1\n    Three sides make a valid triangle when the sum of any two sides is greater \n    than the third side.\n    Example:\n    triangle_area(3, 4, 5) == 6.00\n    triangle_area(1, 2, 10) == -1\n    '''\n    if a + b > c and a + c > b and b + c > a:\n        return round(abs(a * b * c) / 2, 2)\n    else:\n        return -1"
    },
    {
      "rank": 85,
      "score": 2.9133693259288034,
      "candidate": "if a + b > c and a + c > b and b + c > a:\n        p = (a + b + c) / 2\n        area = (p * (p - a) * (p - b) * (p - c)) ** 0.5\n        return round(area, 2)\n    else:\n        return -1\n\ndef test_cases():\n    assert triangle_area(3, 4, 5) == 6.00\n    assert triangle_area(1, 2, 10) == -1\n    assert triangle_area(1, 2, 3) == 4.00\n    assert triangle_area(7, 2, 3) == -1\n    assert triangle_area(1, 2, 3) == 4.00\n    assert triangle_area(1, 2, 1) == -1\n    assert triangle_area(0.5, 0.5, 0.5) == -1\n    assert triangle_area(1, 1, 1) == -1\n    assert triangle_area(1, 2, 3) == 4.00\n    assert triangle_area(1, 2, 3) == 4.00\n    assert triangle_area(1, 2, 3) == 4.00\n    assert triangle_area(1, 2, 3) == 4.00\n    assert triangle_area(1, 2, 3) == 4.00\n    assert triangle_area(1, 2, 3) == 4.00\n    assert triangle_area(1, 2, 3) == 4.00\n    assert triangle_area(1, 2, 3) == 4.00\n    assert triangle_area(1, 2, 3) == 4.00\n    assert triangle_area(1, 2, 3) == 4.00\n    assert triangle_area(1, 2, 3) == 4.00\n    assert triangle_area(1, 2, 3) == 4.00\n    assert triangle_area(1, 2"
    },
    {
      "rank": 86,
      "score": 2.8855914209350506,
      "candidate": "if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2\n        area = (s*(s-a)*(s-b)*(s-c))**0.5\n        return round(area, 2)\n    else:\n        return -1\n    \n    \ndef test_cases():\n    assert triangle_area(3, 4, 5) == 6.00\n    assert triangle_area(1, 2, 10) == -1\n    assert triangle_area(10, 2, 5) == 10.00\n    assert triangle_area(10, 2, 2) == -1\n    assert triangle_area(1, 1, 1) == -1\n    assert triangle_area(10, 2, 10) == 10.00\n    assert triangle_area(1, 1, 10) == -1\n    assert triangle_area(1, 10, 10) == 50.00\n    assert triangle_area(10, 10, 10) == 42.37\n    assert triangle_area(1, 1, 100) == -1\n    assert triangle_area(1, 100, 100) == 50.00\n    assert triangle_area(100, 1, 100) == 42.37\n    assert triangle_area(100, 1, 1) == -1\n    print(\"Test Success!\")\n\ntest_cases()"
    },
    {
      "rank": 87,
      "score": 2.8295636547448786,
      "candidate": "if a + b > c and a + c > b and b + c > a:\n        return (a + b + c) / 2 * ((a + b) * (a + c) * (b + c)) ** (1 / 2)\n    else:\n        return -1\n\n\ndef test_case(arg1, arg2, arg3, arg4, expected):\n    print(f\"Calling triangle_area({arg1}, {arg2}, {arg3})\")\n    result = triangle_area(arg1, arg2, arg3)\n    print(f\"  result: {result}\")\n    print(f\"  expected: {expected}\")\n    if result == expected:\n        print(\"  PASS!\")\n    else:\n        print(\"  FAIL!\")\n\n\ndef test_triangle_area():\n    test_case(3, 4, 5, 6, -1)\n    test_case(1, 2, 10, 6, -1)\n    test_case(10, 1, 1, 10, 5.24)\n    test_case(7, 2, 5, 1, 11.40)\n    test_case(1, 2, 2, 2, 1.73)\n    test_case(2, 2, 2, 2, 1.73)\n\n\nif __name__ == \"__main__\":\n    test_triangle_area()"
    },
    {
      "rank": 88,
      "score": 2.8285354536593887,
      "candidate": "if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2\n        area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n        return round(area, 2)\n    else:\n        return -1\n\n\n\nprint(triangle_area(3, 4, 5))\nprint(triangle_area(1, 2, 10))"
    },
    {
      "rank": 89,
      "score": 2.827679991179005,
      "candidate": "if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c)/2\n        area = (s*(s-a)*(s-b)*(s-c))**(1/2)\n        return round(area, 2)\n    else:\n        return -1\n\nprint(triangle_area(3, 4, 5)) # 6.00\nprint(triangle_area(1, 2, 10)) # -1\nprint(triangle_area(10, 2, 1)) # -1\nprint(triangle_area(5, 4, 3)) # 6.00\nprint(triangle_area(10, 2, 3)) # -1\nprint(triangle_area(5, 4, 4)) # -1\nprint(triangle_area(1, 1, 1)) # -1"
    },
    {
      "rank": 90,
      "score": 2.8262944772040677,
      "candidate": "# check for validity of the triangle\n    if (a + b > c) and (a + c > b) and (b + c > a):\n        # calculate area\n        area = 0.5 * (a + b + c) * abs(a * b - c * c)\n        return round(area, 2)\n    else:\n        return -1\n\nprint(triangle_area(3, 4, 5))\nprint(triangle_area(1, 2, 10))"
    },
    {
      "rank": 91,
      "score": 2.8227055319972427,
      "candidate": "if a + b > c and a + c > b and b + c > a:\n        return (a * b * c) / 2\n    else:\n        return -1\n\n\ndef triangle_area2(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return the area of\n    the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    Otherwise return -1\n    Three sides make a valid triangle when the sum of any two sides is greater \n    than the third side.\n    Example:\n    triangle_area(3, 4, 5) == 6.00\n    triangle_area(1, 2, 10) == -1\n    '''\n    if a + b > c and a + c > b and b + c > a:\n        return round((a * b * c) / 2, 2)\n    else:\n        return -1\n\n\ndef triangle_area3(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return the area of\n    the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    Otherwise return -1\n    Three sides make a valid triangle when the sum of any two sides is greater \n    than the third side.\n    Example:\n    triangle_area(3, 4, 5) == 6.00\n    triangle_area(1, 2, 10) == -1\n    '''\n    if a + b > c and a + c > b and b + c > a:\n        return round((a * b * c) / 2, 2)\n    return -1\n\n\ndef triangle_area4(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return the area of\n    the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    Otherwise return -1\n    Three sides make a valid triangle when the sum of any two sides is greater \n    than the third side.\n    Example:\n    triangle_area(3, 4, 5) == 6.00\n    triangle_area("
    },
    {
      "rank": 92,
      "score": 2.8143498938737217,
      "candidate": "if a + b > c and a + c > b and b + c > a:\n        return (a*b*c)/2\n    else:\n        return -1\n\ndef test_case(a, b, c, solution, test_func):\n\n    output = test_func(a, b, c)\n    if output == solution:\n        print(\"Passed\")\n    else:\n        print(f\"Failed, expected {solution}, got {output}\")\n\n\ntest_case(3, 4, 5, 6.00, triangle_area)\ntest_case(1, 2, 10, -1, triangle_area)\ntest_case(3, 4, 4, 4.00, triangle_area)\ntest_case(1, 1, 1, -1, triangle_area)\ntest_case(1, 2, 1, -1, triangle_area)\ntest_case(3, 4, 2, -1, triangle_area)\ntest_case(3, 4, 3, -1, triangle_area)\ntest_case(3, 4, 5, -1, triangle_area)"
    },
    {
      "rank": 93,
      "score": 2.7985783919256826,
      "candidate": "if (a+b>c) and (a+c>b) and (b+c>a):\n        p=(a+b+c)/2\n        area=(p*(p-a)*(p-b)*(p-c))**0.5\n        return round(area,2)\n    else:\n        return -1\n    \n\n\n\nif __name__ == '__main__':\n    print(\"Example:\")\n    print(triangle_area(3, 4, 5))\n\n    #These \"asserts\" using only for self-checking and not necessary for auto-testing\n    assert triangle_area(3, 4, 5) == 6.00, \"First\"\n    assert triangle_area(2, 2, 2) == -1, \"Second\"\n    assert triangle_area(5, 4, 3) == 6.00, \"Third\"\n    print(\"Coding complete? Click 'Check' to earn cool rewards!\")"
    },
    {
      "rank": 94,
      "score": 2.7336576428939576,
      "candidate": "if a+b > c and a+c > b and b+c > a:\n        s = (a+b+c)/2\n        area = (s*(s-a)*(s-b)*(s-c))**0.5\n        return round(area, 2)\n    else:\n        return -1\n\ndef triangle_area(a, b, c):\n    return (a+b+c)/2 if a+b>c and a+c>b and b+c>a else -1\n\n\ndef triangle_area(a, b, c):\n    return -1 if a+b<c or a+c<b or b+c<a else round((a+b+c)/2 * (a+b-c)*(a+c-b)*(b+c-a), 2)"
    },
    {
      "rank": 95,
      "score": 2.664031092057152,
      "candidate": "if a + b > c and a + c > b and b + c > a:\n        return round(0.5 * a * b * c, 2)\n    else:\n        return -1\n\ndef test_case(test_number, output, expected):\n    print(\"Test case \" + str(test_number) + \":\" + str(output == expected))\n\n\ndef main():\n    print(\"Triangle area test\")\n    test_case(1, triangle_area(3, 4, 5), 6.00)\n    test_case(2, triangle_area(1, 2, 10), -1)\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 96,
      "score": 2.548287849510722,
      "candidate": "if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c)/2\n        area = (s*(s-a)*(s-b)*(s-c))**0.5\n        return round(area, 2)\n    else:\n        return -1\n\ndef triangle_area_2(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return the area of\n    the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    Otherwise return -1\n    Three sides make a valid triangle when the sum of any two sides is greater \n    than the third side.\n    Example:\n    triangle_area(3, 4, 5) == 6.00\n    triangle_area(1, 2, 10) == -1\n    '''\n    if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c)/2\n        area = (s*(s-a)*(s-b)*(s-c))**0.5\n        return round(area, 2)\n    else:\n        return -1\n\ndef triangle_area_3(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return the area of\n    the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    Otherwise return -1\n    Three sides make a valid triangle when the sum of any two sides is greater \n    than the third side.\n    Example:\n    triangle_area(3, 4, 5) == 6.00\n    triangle_area(1, 2, 10) == -1\n    '''\n    if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c)/2\n        area = (s*(s-a)*(s-b)*(s-c))**0.5\n        return round(area, 2)\n    else:\n        return -1\n\n\ndef triangle_area_4(a, b, c):\n    '''"
    },
    {
      "rank": 97,
      "score": 2.4774476305059423,
      "candidate": "if a + b > c and a + c > b and b + c > a:\n        s = (a+b+c)/2\n        area = (s*(s-a)*(s-b)*(s-c))**0.5\n        return round(area, 2)\n    else:\n        return -1\n\n\ndef test_case(a, b, c, solution, test_func):\n\n    output = test_func(a, b, c)\n    if output == solution:\n        print(\"Passed\")\n    else:\n        print(f\"Failed, expected {solution}, got {output}\")\n\n\ntest_case(3, 4, 5, 6.00, triangle_area)\ntest_case(1, 2, 10, -1, triangle_area)\ntest_case(1, 2, 3, 2.00, triangle_area)\ntest_case(2, 2, 3, 1.73, triangle_area)\ntest_case(7, 2, 3, 5.19, triangle_area)"
    },
    {
      "rank": 98,
      "score": 2.361780401970178,
      "candidate": "if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2\n        area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n        return round(area, 2)\n    else:\n        return -1\n\n\n\nprint(triangle_area(3, 4, 5))\nprint(triangle_area(1, 2, 10))"
    },
    {
      "rank": 99,
      "score": 2.2645995015976697,
      "candidate": "if a + b <= c or a + c <= b or b + c <= a:\n        return -1\n    s = (a + b + c) / 2\n    area = (s*(s-a)*(s-b)*(s-c)) ** 0.5\n    return round(area, 2)\n\ndef test_case(a, b, c, solution, test_func):\n\n    output = test_func(a, b, c)\n    if output == solution:\n        print(\"Passed\")\n    else:\n        print(f\"Failed, expected {solution}, got {output}\")\n\ntest_case(3, 4, 5, 6.00, triangle_area)\ntest_case(1, 2, 10, -1, triangle_area)\ntest_case(3, 4, 3, -1, triangle_area)\ntest_case(3, 4, 6, 4.83, triangle_area)\ntest_case(4, 4, 3, 4.00, triangle_area)\ntest_case(4, 3, 4, -1, triangle_area)\ntest_case(4, 3, 3, 4.00, triangle_area)\ntest_case(4, 4, 5, 7.07, triangle_area)\ntest_case(5, 5, 5, 10.00, triangle_area)\ntest_case(5, 5, 6, -1, triangle_area)"
    },
    {
      "rank": 100,
      "score": 2.0306943114867946,
      "candidate": "if a + b > c and b + c > a and a + c > b:\n        s = (a + b + c) / 2\n        area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n        return round(area, 2)\n    else:\n        return -1\n\ndef test_cases():\n    assert triangle_area(3, 4, 5) == 6.00\n    assert triangle_area(1, 2, 10) == -1\n    assert triangle_area(10, 10, 10) == 0.00\n    assert triangle_area(1, 2, 3) == 0.42\n    assert triangle_area(10, 10, 10) == 0.00\n    assert triangle_area(1, 2, 1) == -1\n    assert triangle_area(10, 2, 2) == -1\n    assert triangle_area(10, 10, 1) == -1\n    print(\"Test Success!\")\n\ntest_cases()"
    }
  ]
}