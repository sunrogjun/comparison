{
  "timestamp": "2025-09-14T21:57:30.653828",
  "method": "improved_llm_judge",
  "judge_model": "codellama/CodeLlama-7b-Python-hf",
  "target_model": "codellama-7b",
  "dataset": "humaneval",
  "problem_number": 118,
  "total_candidates": 100,
  "results": [
    {
      "rank": 1,
      "score": 10.0,
      "candidate": "# Find the last consonant\n    last_consonant = \"\"\n    for char in word[::-1]:\n        if char.isalpha() and char.isupper():\n            last_consonant = char\n            break\n    \n    # Find the last vowel\n    last_vowel = \"\"\n    for char in word[::-1]:\n        if char.isalpha() and char.islower():\n            last_vowel = char\n            break\n    \n    # Find the closest vowel\n    closest_vowel = \"\"\n    for char in word[::-1]:\n        if char.isalpha() and char.isupper() and char != last_consonant:\n            closest_vowel = char\n            break\n    \n    if last_vowel == closest_vowel:\n        return \"\"\n    else:\n        return closest_vowel\n\ndef test_get_closest_vowel():\n    assert get_closest_vowel(\"yogurt\") == \"u\"\n    assert get_closest_vowel(\"FULL\") == \"U\"\n    assert get_closest_vowel(\"quick\") == \"\"\n    assert get_closest_vowel(\"ab\") == \"\"\n    assert get_closest_vowel(\"b\") == \"\"\n    assert get_closest_vowel(\"a\") == \"\"\n    assert get_closest_vowel(\"A\") == \"\"\n    assert get_closest_vowel(\"12345\") == \"\"\n    assert get_closest_vowel(\"12345yogurt\") == \"u\"\n    assert get_closest_vowel(\"12345yogurt12345\") == \"u\"\n    assert get_closest_vowel(\"12345yogurtU\") == \"U\"\n    assert get_closest_vowel(\"12345yogurt12345U\") == \"U\"\n    assert get_closest_vowel(\"12345yogurtU12345\") == \"U\"\n    assert get_closest_vowel(\"12345yogurtU12345U\") == \""
    },
    {
      "rank": 2,
      "score": 10.0,
      "candidate": "pass"
    },
    {
      "rank": 3,
      "score": 10.0,
      "candidate": "# Your code goes here\n    vowels = ['a','e','i','o','u']\n    if len(word) < 3:\n        return \"\"\n    if word[0] in vowels or word[-1] in vowels:\n        word = word[1:-1]\n    for i in range(len(word)-1, 0, -1):\n        if word[i] in vowels and word[i-1] not in vowels and word[i+1] not in vowels:\n            return word[i]\n    return \"\"\n\nprint(get_closest_vowel(\"yogurt\")) # ==> \"u\"\nprint(get_closest_vowel(\"FULL\")) # ==> \"U\"\nprint(get_closest_vowel(\"quick\")) # ==> \"\"\nprint(get_closest_vowel(\"ab\")) # ==> \"\""
    },
    {
      "rank": 4,
      "score": 10.0,
      "candidate": "# My and best way solution\n    if len(word) <= 2:\n        return \"\"\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    vowels.reverse()\n    for i in range(len(word)-2, -1, -1):\n        if word[i] in vowels:\n            if word[i+1].isupper() or word[i+1].islower():\n                if word[i+2] in vowels:\n                    return word[i+1]\n    return \"\"\n\n\nif __name__ == '__main__':\n    print(\"Example:\")\n    print(get_closest_vowel(\"yogurt\"))\n\n    # These \"asserts\" are used for self-checking and not for an auto-testing\n    assert get_closest_vowel(\"yogurt\") == \"u\"\n    assert get_closest_vowel(\"eYe\") == \"e\"\n    assert get_closest_vowel(\"EYE\") == \"E\"\n    assert get_closest_vowel(\"abc\") == \"\"\n    assert get_closest_vowel(\"x\") == \"\"\n    assert get_closest_vowel(\"just an example\") == \"e\"\n    print(\"Coding complete? Click 'Check' to earn cool rewards!\")"
    },
    {
      "rank": 5,
      "score": 10.0,
      "candidate": "# My solution\n    vowels = \"aeiouAEIOU\"\n    vowels_idx = []\n    for i, c in enumerate(word):\n        if c in vowels:\n            vowels_idx.append(i)\n\n    if len(vowels_idx) < 2:\n        return \"\"\n\n    vowels_idx.reverse()\n    for i in range(len(vowels_idx) - 1):\n        if vowels_idx[i] < vowels_idx[i+1] - 1:\n            return word[vowels_idx[i]]\n    return \"\"\n\n    # Itertools solution\n    # from itertools import combinations\n    # vowels = \"aeiouAEIOU\"\n    # word = word.lower()\n    # for i in range(len(word) - 1):\n    #     if word[i] in vowels and word[i+1] in vowels:\n    #         for comb in combinations(word[i+2:], 2):\n    #             if (comb[0] in vowels) and (comb[1] in vowels):\n    #                 return word[i]\n    # return \"\"\n\n    # One liner\n    # from itertools import combinations\n    # return next((word[i] for i in range(len(word) - 1) if word[i] in \"aeiouAEIOU\" and word[i+1] in \"aeiouAEIOU\" and any(c in \"aeiouAEIOU\" for c in combinations(word[i+2:], 2))), \"\")\n\nprint(get_closest_vowel(\"yogurt\")) # \"u\"\nprint(get_closest_vowel(\"FULL\")) # \"U\"\nprint(get_closest_vowel(\"quick\")) # \"\"\nprint(get_closest_vowel(\"ab\")) # \"\""
    },
    {
      "rank": 6,
      "score": 10.0,
      "candidate": "# Rules:\n    # 1. Find the last vowel\n    # 2. Find the last consonant before the last vowel\n    # 3. Find the first consonant after the last vowel\n    # 4. Find the first vowel after the first consonant\n    # 5. Return the first vowel after the last vowel\n    \n    vowels = ['A', 'E', 'I', 'O', 'U']\n    vowel_set = set(vowels)\n    # 1. Find the last vowel\n    last_vowel_index = -1\n    for i in range(len(word)-1, -1, -1):\n        if word[i] in vowel_set:\n            last_vowel_index = i\n            break\n    if last_vowel_index == -1:\n        return \"\"\n    # 2. Find the last consonant before the last vowel\n    last_consonant_index = last_vowel_index - 1\n    while last_consonant_index >= 0:\n        if word[last_consonant_index] not in vowel_set:\n            break\n        last_consonant_index -= 1\n    # 3. Find the first consonant after the last vowel\n    first_consonant_index = last_vowel_index + 1\n    while first_consonant_index < len(word):\n        if word[first_consonant_index] not in vowel_set:\n            break\n        first_consonant_index += 1\n    # 4. Find the first vowel after the first consonant\n    first_vowel_index = first_consonant_index\n    while first_vowel_index < len(word):\n        if word[first_vowel_index] in vowel_set:\n            break\n        first_vowel_index += 1\n    return word[first_vowel_index]\n\n\n# Tests\nprint(get_closest_vowel(\"yogurt\"))  # \"u\"\nprint(get_closest_vowel(\"FULL\"))  # \"U\"\nprint"
    },
    {
      "rank": 7,
      "score": 10.0,
      "candidate": "vowels = \"AEIOU\"\n    for i in range(len(word)-1, 0, -1):\n        if word[i] in vowels:\n            if word[i+1] in vowels:\n                continue\n            if word[i-1] in vowels:\n                continue\n            return word[i]\n    return \"\"\n\n\ndef get_closest_vowel2(word):\n    \"\"\"You are given a word. Your task is to find the closest vowel that stands between \n    two consonants from the right side of the word (case sensitive).\n    \n    Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n    find any vowel met the above condition. \n\n    You may assume that the given string contains English letter only.\n\n    Example:\n    get_closest_vowel(\"yogurt\") ==> \"u\"\n    get_closest_vowel(\"FULL\") ==> \"U\"\n    get_closest_vowel(\"quick\") ==> \"\"\n    get_closest_vowel(\"ab\") ==> \"\"\n    \"\"\"\n    vowels = \"AEIOU\"\n    for i in range(len(word)-1, 0, -1):\n        if word[i] in vowels:\n            if word[i+1] in vowels:\n                continue\n            if word[i-1] in vowels:\n                continue\n            return word[i]\n    return \"\"\n\n\ndef get_closest_vowel3(word):\n    \"\"\"You are given a word. Your task is to find the closest vowel that stands between \n    two consonants from the right side of the word (case sensitive).\n    \n    Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n    find any vowel met the above condition. \n\n    You may assume that the given string contains English letter only.\n\n    Example:\n    get_closest_vowel(\"yogurt\") ==> \"u\"\n    get_closest_vowel(\"FULL\") ==> \"U\"\n    get_closest_vowel(\"quick\") ==> \"\""
    },
    {
      "rank": 8,
      "score": 10.0,
      "candidate": "pass"
    },
    {
      "rank": 9,
      "score": 10.0,
      "candidate": "vowels = \"aeiouAEIOU\"\n    word = word.lower()\n    # Edge cases\n    if len(word) < 3:\n        return \"\"\n    if word[-1] in vowels:\n        return \"\"\n    if word[0] in vowels:\n        return \"\"\n    # Find the index of the last consonant\n    for i in range(len(word)-1, 0, -1):\n        if word[i] in vowels:\n            break\n    # If no vowel found\n    if i == 0:\n        return \"\"\n    # Find the index of the first consonant\n    for j in range(i+1, len(word)):\n        if word[j] in vowels:\n            break\n    # If no vowel found\n    if j == len(word)-1:\n        return \"\"\n    # Return the closest vowel\n    return word[j]\n\nprint(get_closest_vowel(\"yogurt\")) # \"u\"\nprint(get_closest_vowel(\"FULL\")) # \"U\"\nprint(get_closest_vowel(\"quick\")) # \"\"\nprint(get_closest_vowel(\"ab\")) # \"\""
    },
    {
      "rank": 10,
      "score": 10.0,
      "candidate": "if len(word) < 2:\n        return \"\"\n    \n    # Find the index of the last consonant\n    last_consonant_idx = -1\n    for i in range(len(word) - 1, 0, -1):\n        if word[i].isalpha() and word[i].islower():\n            last_consonant_idx = i\n            break\n    \n    if last_consonant_idx == -1:\n        return \"\"\n    \n    # Find the index of the first consonant\n    first_consonant_idx = -1\n    for i in range(0, len(word)):\n        if word[i].isalpha() and word[i].islower():\n            first_consonant_idx = i\n            break\n    \n    if first_consonant_idx == -1:\n        return \"\"\n    \n    if last_consonant_idx == first_consonant_idx:\n        return \"\"\n    \n    vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    for i in range(last_consonant_idx + 1, first_consonant_idx):\n        if word[i].lower() in vowels:\n            return word[i]\n    return \"\"\n\n\ndef test_function():\n    assert get_closest_vowel(\"yogurt\") == \"u\"\n    assert get_closest_vowel(\"FULL\") == \"U\"\n    assert get_closest_vowel(\"quick\") == \"\"\n    assert get_closest_vowel(\"ab\") == \"\"\n    assert get_closest_vowel(\"A\") == \"\"\n    assert get_closest_vowel(\"b\") == \"\"\n    assert get_closest_vowel(\"abab\") == \"\"\n    assert get_closest_vowel(\"abba\") == \"a\"\n    assert get_closest_vowel(\"abbaa\") == \"a\"\n    assert get_closest_vowel(\"abba\") == \"a\"\n    assert get_closest_vowel(\"babba\") == \"a\"\n    assert get_closest_vowel(\"abba\")"
    },
    {
      "rank": 11,
      "score": 10.0,
      "candidate": "vowels = \"AEIOU\"\n    if len(word) < 3:\n        return \"\"\n    \n    # Check if the vowel is in the beginning or the ending\n    if word[0] in vowels:\n        word = word[1:]\n    if word[-1] in vowels:\n        word = word[:-1]\n    \n    # Find the closest vowel\n    for i in range(len(word)-1, -1, -1):\n        if word[i] in vowels:\n            return word[i]\n    return \"\"\n\n\ndef get_closest_vowel_v2(word):\n    \"\"\"You are given a word. Your task is to find the closest vowel that stands between \n    two consonants from the right side of the word (case sensitive).\n    \n    Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n    find any vowel met the above condition. \n\n    You may assume that the given string contains English letter only.\n\n    Example:\n    get_closest_vowel(\"yogurt\") ==> \"u\"\n    get_closest_vowel(\"FULL\") ==> \"U\"\n    get_closest_vowel(\"quick\") ==> \"\"\n    get_closest_vowel(\"ab\") ==> \"\"\n    \"\"\"\n    vowels = \"AEIOU\"\n    if len(word) < 3:\n        return \"\"\n    \n    # Check if the vowel is in the beginning or the ending\n    if word[0] in vowels:\n        word = word[1:]\n    if word[-1] in vowels:\n        word = word[:-1]\n    \n    # Find the closest vowel\n    for i in range(len(word)-1, -1, -1):\n        if word[i] in vowels:\n            return word[i]\n    return \"\"\n\n\ndef get_closest_vowel_v3(word):\n    \"\"\"You are given a word. Your task is to find the closest vowel that stands between \n    two consonants from the right side of the word (case sensitive).\n    \n    Vow"
    },
    {
      "rank": 12,
      "score": 10.0,
      "candidate": "# Rules:\n    # 1. Vowels in the beginning and ending doesn't count\n    # 2. Return empty string if you didn't find any vowel met the above condition.\n    # 3. You may assume that the given string contains English letter only.\n\n    # First, let's get all vowels in the word\n    vowels = []\n    for i in range(len(word)):\n        if word[i] in \"aeiou\":\n            vowels.append(i)\n\n    # Next, let's find the vowel that is closest to the right side of the word\n    if len(vowels) == 0:\n        return \"\"\n    elif len(vowels) == 1:\n        return word[vowels[0]]\n    else:\n        # If there is more than one vowel in the word, then we have to find the closest one\n        # If the first index is 0, then the closest vowel is the last vowel in the list\n        if vowels[0] == 0:\n            return word[vowels[-1]]\n        # If the last index is the length of the word, then the closest vowel is the first vowel in the list\n        elif vowels[-1] == len(word)-1:\n            return word[vowels[0]]\n        # If the first and last index are not 0 and len(word)-1, then we can find the closest vowel by\n        # comparing the absolute value of the difference between the first and last vowel\n        else:\n            # We need to find the difference between the first and last vowel\n            # For example, if word = \"apple\", vowels = [1, 4], and the closest vowel is \"e\"\n            # The difference between the first and last vowel is abs(4 - 1) = 3\n            # If the first and last vowel are the same, then the closest vowel is the first vowel\n            # For example, if word = \"aaee\", vowels = [0, 2, 3, 4], and the closest vowel is \"e\"\n            # The difference between the first and last vowel is abs"
    },
    {
      "rank": 13,
      "score": 10.0,
      "candidate": "# 1. Check if there are any vowels in the word, return empty string if not.\n    # 2. Create a list of vowels and find the index of the last vowel.\n    # 3. Find the closest vowel.\n    # 4. Return the vowel.\n    vowels = \"aeiou\"\n    if not any(char in vowels for char in word):\n        return \"\"\n    vowel_index = word.rfind(next((vowel for vowel in vowels if vowel in word), \"\"))\n    for i in range(vowel_index-1, -1, -1):\n        if word[i] in vowels:\n            return word[i]\n    return \"\"\n\n\nif __name__ == \"__main__\":\n    print(get_closest_vowel(\"yogurt\"))\n    print(get_closest_vowel(\"FULL\"))\n    print(get_closest_vowel(\"quick\"))\n    print(get_closest_vowel(\"ab\"))"
    },
    {
      "rank": 14,
      "score": 10.0,
      "candidate": "vowels = ['a', 'e', 'i', 'o', 'u']\n    word = word[::-1]\n    word = list(word)\n    for i in range(len(word)):\n        if word[i] in vowels:\n            if word[i+1] not in vowels:\n                if word[i+2] in vowels:\n                    return word[i+2]\n                else:\n                    return word[i+1]\n    return \"\"\n\n\ndef get_closest_vowel2(word):\n    \"\"\"You are given a word. Your task is to find the closest vowel that stands between \n    two consonants from the right side of the word (case sensitive).\n    \n    Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n    find any vowel met the above condition. \n\n    You may assume that the given string contains English letter only.\n\n    Example:\n    get_closest_vowel(\"yogurt\") ==> \"u\"\n    get_closest_vowel(\"FULL\") ==> \"U\"\n    get_closest_vowel(\"quick\") ==> \"\"\n    get_closest_vowel(\"ab\") ==> \"\"\n    \"\"\"\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    word = word[::-1]\n    for i in range(len(word)):\n        if word[i] in vowels:\n            if word[i+1] not in vowels:\n                if word[i+2] in vowels:\n                    return word[i+2]\n                else:\n                    return word[i+1]\n    return \"\"\n\n\n\n\ndef get_closest_vowel3(word):\n    \"\"\"You are given a word. Your task is to find the closest vowel that stands between \n    two consonants from the right side of the word (case sensitive).\n    \n    Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n    find any vowel met the above condition. \n\n    You may assume that the given string contains English letter"
    },
    {
      "rank": 15,
      "score": 10.0,
      "candidate": "word = word.lower()\n    vowels = set(\"aeiou\")\n    for i in range(len(word) - 1, 0, -1):\n        if word[i] in vowels:\n            return word[i]\n    return \"\"\n\n\ndef main():\n    print(get_closest_vowel(\"yogurt\")) # \"u\"\n    print(get_closest_vowel(\"FULL\")) # \"U\"\n    print(get_closest_vowel(\"quick\")) # \"\"\n    print(get_closest_vowel(\"ab\")) # \"\"\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 16,
      "score": 9.995545915836482,
      "candidate": "vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    result = \"\"\n    for index in range(len(word) - 2, -1, -1):\n        if word[index] in vowels:\n            if word[index + 1] in vowels:\n                result = word[index]\n                break\n    return result\n\n\nif __name__ == \"__main__\":\n    print(get_closest_vowel(\"yogurt\"))\n    print(get_closest_vowel(\"FULL\"))\n    print(get_closest_vowel(\"quick\"))\n    print(get_closest_vowel(\"ab\"))"
    },
    {
      "rank": 17,
      "score": 9.96183606681188,
      "candidate": "vowels = \"aeiou\"\n    consonants = \"bcdfghjklmnpqrstvwxyz\"\n    word = word.lower()\n    for i in range(len(word)-1,0,-1):\n        if word[i] in consonants and word[i-1] in consonants:\n            return word[i+1] if word[i+1] in vowels else \"\"\n    return \"\"\n\ndef get_closest_vowel2(word):\n    \"\"\"You are given a word. Your task is to find the closest vowel that stands between \n    two consonants from the right side of the word (case sensitive).\n    \n    Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n    find any vowel met the above condition. \n\n    You may assume that the given string contains English letter only.\n\n    Example:\n    get_closest_vowel(\"yogurt\") ==> \"u\"\n    get_closest_vowel(\"FULL\") ==> \"U\"\n    get_closest_vowel(\"quick\") ==> \"\"\n    get_closest_vowel(\"ab\") ==> \"\"\n    \"\"\"\n    vowels = \"aeiou\"\n    consonants = \"bcdfghjklmnpqrstvwxyz\"\n    word = word.lower()\n    for i in range(len(word)-1,0,-1):\n        if word[i] in consonants and word[i-1] in consonants:\n            return word[i+1] if word[i+1] in vowels else \"\"\n    return \"\"\n\n\ndef get_closest_vowel3(word):\n    \"\"\"You are given a word. Your task is to find the closest vowel that stands between \n    two consonants from the right side of the word (case sensitive).\n    \n    Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n    find any vowel met the above condition. \n\n    You may assume that the given string contains English letter only.\n\n    Example:\n    get_closest_vowel(\"yogurt\")"
    },
    {
      "rank": 18,
      "score": 9.95437278061351,
      "candidate": "vowels = ['a', 'e', 'i', 'o', 'u']\n    right_vowel_index = []\n    for index, letter in enumerate(word[::-1]):\n        if letter in vowels:\n            right_vowel_index.append(index)\n    if len(right_vowel_index) < 2:\n        return \"\"\n    right_vowel_index = right_vowel_index[1:]\n    for index, value in enumerate(right_vowel_index[:-1]):\n        if value + 1 != right_vowel_index[index+1]:\n            return word[value]\n    return \"\"\n\n\nprint(get_closest_vowel(\"yogurt\")) # 'u'\nprint(get_closest_vowel(\"FULL\")) # 'U'\nprint(get_closest_vowel(\"quick\")) # ''\nprint(get_closest_vowel(\"ab\")) # ''"
    },
    {
      "rank": 19,
      "score": 9.92750827701362,
      "candidate": "pass"
    },
    {
      "rank": 20,
      "score": 9.90374106256822,
      "candidate": "# vowels = [\"A\", \"E\", \"I\", \"O\", \"U\"]\n    vowels = [\"A\", \"E\", \"I\", \"O\", \"U\"]\n\n    if len(word) < 3:\n        return \"\"\n\n    for i in range(len(word) - 2, 0, -1):\n        if word[i].isupper() and word[i - 1].islower() and word[i + 1].islower():\n            for vowel in vowels:\n                if vowel == word[i]:\n                    continue\n                if vowel.lower() == word[i - 1] or vowel.lower() == word[i + 1]:\n                    continue\n                return vowel\n    return \"\"\n\n\ndef test_function():\n    assert get_closest_vowel(\"yogurt\") == \"u\"\n    assert get_closest_vowel(\"FULL\") == \"U\"\n    assert get_closest_vowel(\"quick\") == \"\"\n    assert get_closest_vowel(\"ab\") == \"\"\n    assert get_closest_vowel(\"ABCDEF\") == \"\"\n    assert get_closest_vowel(\"ABCDEFG\") == \"E\"\n    assert get_closest_vowel(\"ABCDEFGH\") == \"E\"\n    assert get_closest_vowel(\"ABCDEFGHI\") == \"I\"\n    assert get_closest_vowel(\"ABCDEFGHIJ\") == \"I\"\n    assert get_closest_vowel(\"ABCDEFGHIJK\") == \"I\"\n    assert get_closest_vowel(\"ABCDEFGHIJKL\") == \"K\"\n    assert get_closest_vowel(\"ABCDEFGHIJKLM\") == \"M\"\n    assert get_closest_vowel(\"ABCDEFGHIJKLMN\") == \"\"\n    assert get_closest_vowel(\"ABCDEFGHIJKLMNO\") == \"\"\n    assert get_closest_vowel(\"ABCDEFGHIJKLMNOP\") == \"\"\n    assert get_closest_vowel(\"ABCDEFGHIJKLMNOPQ\") == \"\""
    },
    {
      "rank": 21,
      "score": 9.834420175617103,
      "candidate": "# 1st solution:\n    # O(n) time | O(1) space\n    # vowels = \"aeiou\"\n    # vowels_set = set(vowels)\n    # for i in range(len(word) - 1, 0, -1):\n    #     if word[i] in vowels_set:\n    #         for j in range(i):\n    #             if word[j] not in vowels_set:\n    #                 return word[i]\n    # return \"\"\n\n    # 2nd solution:\n    # O(n) time | O(1) space\n    # vowels = \"aeiou\"\n    # vowels_set = set(vowels)\n    # for i in range(len(word) - 1, 0, -1):\n    #     if word[i] in vowels_set and word[i-1] not in vowels_set:\n    #         return word[i]\n    # return \"\"\n\n    # 3rd solution:\n    # O(n) time | O(1) space\n    # vowels = \"aeiou\"\n    # vowels_set = set(vowels)\n    # for i in range(len(word) - 1, 0, -1):\n    #     if word[i] in vowels_set and word[i-1] not in vowels_set:\n    #         return word[i]\n    # return \"\"\n\n    # 4th solution:\n    # O(n) time | O(1) space\n    vowels = \"aeiou\"\n    vowels_set = set(vowels)\n    for i in range(len(word) - 1, 0, -1):\n        if word[i] in vowels_set and word[i-1] not in vowels_set:\n            return word[i]\n    return \"\"\n\n# print(get_closest_vowel(\"yogurt\")) # \"u\"\n# print(get_closest_vowel(\"FULL\")) # \"U\"\n# print("
    },
    {
      "rank": 22,
      "score": 9.82035370090669,
      "candidate": "# your code here\n    vowels = \"aeiou\"\n    if len(word) < 2:\n        return \"\"\n    for i in range(len(word)-1, 0, -1):\n        if word[i] in vowels and word[i-1] in vowels:\n            return word[i]\n    return \"\"\n\n\nif __name__ == \"__main__\":\n    print(get_closest_vowel(\"yogurt\"))\n    print(get_closest_vowel(\"FULL\"))\n    print(get_closest_vowel(\"quick\"))\n    print(get_closest_vowel(\"ab\"))"
    },
    {
      "rank": 23,
      "score": 9.814445115350479,
      "candidate": "vowels = \"aeiou\"\n    for i in range(len(word)-1, 0, -1):\n        if word[i] in vowels:\n            if word[i+1] in vowels:\n                continue\n            if word[i-1] in vowels:\n                continue\n            return word[i]\n    return \"\"\n\n\nif __name__ == \"__main__\":\n    print(get_closest_vowel(\"yogurt\"))\n    print(get_closest_vowel(\"FULL\"))\n    print(get_closest_vowel(\"quick\"))\n    print(get_closest_vowel(\"ab\"))"
    },
    {
      "rank": 24,
      "score": 9.787110480980308,
      "candidate": "# find vowels\n    vowels = set([\"a\", \"e\", \"i\", \"o\", \"u\"])\n    vowels_indexes = []\n    for i, char in enumerate(word):\n        if char in vowels:\n            vowels_indexes.append(i)\n    \n    # check if there is any vowels\n    if len(vowels_indexes) == 0:\n        return \"\"\n    \n    # check if the vowels is at the end\n    if vowels_indexes[-1] == len(word) - 1:\n        return \"\"\n    \n    # check if the vowels is at the beginning\n    if vowels_indexes[0] == 0:\n        return \"\"\n    \n    # check if the vowels is between two consonants\n    if vowels_indexes[-1] == vowels_indexes[-2] + 1:\n        return word[vowels_indexes[-1]]\n    \n    # check if the vowels is between two consonants\n    if vowels_indexes[-1] - vowels_indexes[-2] == 2:\n        return word[vowels_indexes[-1]]\n    \n    # check if the vowels is between two consonants\n    if vowels_indexes[-1] - vowels_indexes[-2] == 3:\n        return word[vowels_indexes[-1]]\n    \n    return \"\"\n\n\nprint(get_closest_vowel(\"yogurt\")) # \"u\"\nprint(get_closest_vowel(\"FULL\")) # \"U\"\nprint(get_closest_vowel(\"quick\")) # \"\"\nprint(get_closest_vowel(\"ab\")) # \"\""
    },
    {
      "rank": 25,
      "score": 9.768322479020474,
      "candidate": "vowels = \"aeiou\"\n    if len(word) <= 2:\n        return \"\"\n    if word[-1] in vowels or word[0] in vowels:\n        return \"\"\n    for i in range(len(word)-2, 0, -1):\n        if word[i] in vowels:\n            return word[i]\n    return \"\"\n\n\nprint(get_closest_vowel(\"yogurt\")) # \"u\"\nprint(get_closest_vowel(\"FULL\")) # \"U\"\nprint(get_closest_vowel(\"quick\")) # \"\"\nprint(get_closest_vowel(\"ab\")) # \"\"\nprint(get_closest_vowel(\"apple\")) # \"i\"\nprint(get_closest_vowel(\"aaa\")) # \"\"\nprint(get_closest_vowel(\"bab\")) # \"a\"\nprint(get_closest_vowel(\"abc\")) # \"\"\nprint(get_closest_vowel(\"abcdef\")) # \"\""
    },
    {
      "rank": 26,
      "score": 9.762451411229746,
      "candidate": "# Your code here\n    vowels = \"aeiouAEIOU\"\n    vowel_index = []\n    for i in range(len(word)):\n        if word[i] in vowels:\n            vowel_index.append(i)\n\n    if len(vowel_index) == 0:\n        return \"\"\n\n    if len(vowel_index) == 1:\n        return word[vowel_index[0]]\n\n    for i in range(len(vowel_index) - 1):\n        if vowel_index[i] < vowel_index[i + 1]:\n            return word[vowel_index[i + 1]]\n\n    return word[vowel_index[-1]]\n\n\nif __name__ == \"__main__\":\n    print(get_closest_vowel(\"yogurt\"))\n    print(get_closest_vowel(\"FULL\"))\n    print(get_closest_vowel(\"quick\"))\n    print(get_closest_vowel(\"ab\"))"
    },
    {
      "rank": 27,
      "score": 9.72305821733653,
      "candidate": "# My and best way solution\n    # O(n) time | O(1) space\n    i = len(word) - 1\n    while i > 0 and word[i].isalpha() and word[i].isupper():\n        i -= 1\n    left = i\n    i = len(word) - 1\n    while i > 0 and word[i].isalpha() and word[i].isupper():\n        i -= 1\n    right = i\n    vowels = \"AEIOU\"\n    while left < right:\n        if word[left + 1] in vowels:\n            return word[left + 1]\n        left += 1\n    return \"\"\n\n\ndef get_closest_vowel_best(word):\n    \"\"\"Best way solution\"\"\"\n    # O(n) time | O(1) space\n    vowels = \"AEIOU\"\n    for i in range(len(word) - 2, -1, -1):\n        if word[i].upper() in vowels:\n            for j in range(len(word) - 1, i, -1):\n                if word[j].upper() in vowels:\n                    return word[j]\n    return \"\"\n\n\nprint(get_closest_vowel(\"yogurt\"))\nprint(get_closest_vowel(\"FULL\"))\nprint(get_closest_vowel(\"quick\"))\nprint(get_closest_vowel(\"ab\"))\nprint(get_closest_vowel(\"abc\"))\nprint(get_closest_vowel(\"abcdefghijklmnopqrstuvwxyz\"))\nprint(get_closest_vowel(\"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\"))\nprint(get_closest_vowel(\"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890\"))\n\nprint(get_closest_vowel_best(\"yogurt\"))\nprint(get_closest_vowel_"
    },
    {
      "rank": 28,
      "score": 9.700352055078,
      "candidate": "if len(word) == 1:\n        return \"\"\n    elif len(word) == 2:\n        return \"\" if word[0].lower() in \"aeiou\" else word[1]\n    elif len(word) == 3:\n        return \"\" if word[1].lower() in \"aeiou\" else word[2]\n    elif len(word) == 4:\n        return \"\" if word[1].lower() in \"aeiou\" else word[3]\n\n    for i in range(len(word)-1, 0, -1):\n        if word[i].lower() in \"aeiou\" and word[i-1].lower() not in \"aeiou\":\n            return word[i]\n    return \"\"\n\n\ndef main():\n    print(get_closest_vowel(\"yogurt\")) # ==> \"u\"\n    print(get_closest_vowel(\"FULL\")) # ==> \"U\"\n    print(get_closest_vowel(\"quick\")) # ==> \"\"\n    print(get_closest_vowel(\"ab\")) # ==> \"\"\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 29,
      "score": 9.605251814053378,
      "candidate": "vowels = 'aeiou'\n    index = len(word) - 1\n    while index > 0:\n        if word[index] in vowels:\n            return word[index]\n        if word[index-1] in vowels:\n            return word[index-1]\n        index -= 1\n    return \"\""
    },
    {
      "rank": 30,
      "score": 9.597121595509563,
      "candidate": "word = word.upper()\n    vowels = \"AEIOU\"\n    vowel_list = []\n    for i in range(len(word) - 1):\n        if word[i] in vowels and word[i + 1] in vowels:\n            vowel_list.append(word[i])\n        else:\n            if word[i + 1] in vowels:\n                vowel_list.append(word[i + 1])\n    if len(vowel_list) == 0:\n        return \"\"\n    else:\n        return min(vowel_list)\n    \n\n\nif __name__ == \"__main__\":\n    print(get_closest_vowel(\"yogurt\"))\n    print(get_closest_vowel(\"FULL\"))\n    print(get_closest_vowel(\"quick\"))\n    print(get_closest_vowel(\"ab\"))"
    },
    {
      "rank": 31,
      "score": 9.561698603863517,
      "candidate": "pass\n\nif __name__ == '__main__':\n    print(get_closest_vowel(\"yogurt\")) # \"u\"\n    print(get_closest_vowel(\"FULL\")) # \"U\"\n    print(get_closest_vowel(\"quick\")) # \"\"\n    print(get_closest_vowel(\"ab\")) # \"\"\n    print(get_closest_vowel(\"ABC\")) # \"\"\n    print(get_closest_vowel(\"abc\")) # \"\""
    },
    {
      "rank": 32,
      "score": 9.430777115270699,
      "candidate": "# your code here\n\n    # Solution 1:\n    # Use two pointers, one from the end, one from the middle.\n    # If the pointer from the end is a vowel, return it.\n    # If not, compare the distance between the two pointers.\n    # If the distance between the two pointers is smaller, return the vowel in the middle.\n    # If not, return the vowel in the end.\n    # O(n) time, O(1) space\n\n    # Solution 2:\n    # Use one pointer, starting from the end, and record the last index of consonant.\n    # When the pointer meets a vowel, check if the index of the last index of consonant\n    # is smaller than the index of the vowel. If yes, return the vowel.\n    # O(n) time, O(1) space\n\n    # Solution 3:\n    # Use one pointer, starting from the end, and record the last index of vowel.\n    # When the pointer meets a consonant, check if the index of the last index of vowel\n    # is smaller than the index of the consonant. If yes, return the vowel.\n    # O(n) time, O(1) space\n\n    # Solution 4:\n    # Use one pointer, starting from the end, and record the last index of vowel.\n    # When the pointer meets a consonant, check if the index of the last index of vowel\n    # is smaller than the index of the consonant. If yes, return the vowel.\n    # O(n) time, O(1) space\n\n    # Solution 5:\n    # Use one pointer, starting from the end, and record the last index of vowel.\n    # When the pointer meets a consonant, check if the index of the last index of vowel\n    # is smaller than the index of the consonant. If yes, return the vowel.\n    # O(n) time, O(1) space\n\n    # Solution 6:\n    # Use one pointer, starting from the end, and record the last index of vowel.\n    # When the pointer meets a consonant, check if the index of the last index of"
    },
    {
      "rank": 33,
      "score": 9.344102258181705,
      "candidate": "vowels = ['a', 'e', 'i', 'o', 'u']\n    word = word[::-1]\n    for i, v in enumerate(word):\n        if v in vowels:\n            return v\n        if i == len(word) - 1:\n            return \"\"\n    \n    return \"\"\n\nif __name__ == \"__main__\":\n    print(get_closest_vowel(\"yogurt\"))\n    print(get_closest_vowel(\"FULL\"))\n    print(get_closest_vowel(\"quick\"))\n    print(get_closest_vowel(\"ab\"))"
    },
    {
      "rank": 34,
      "score": 8.855039776476367,
      "candidate": "vowels = \"aeiouAEIOU\"\n    word = word[::-1]\n    for i in range(len(word)):\n        if word[i] in vowels:\n            if i < len(word)-1 and word[i+1] in vowels:\n                return word[i]\n    return \"\"\n\nprint(get_closest_vowel(\"yogurt\")) # u\nprint(get_closest_vowel(\"FULL\")) # U\nprint(get_closest_vowel(\"quick\")) # \"\"\nprint(get_closest_vowel(\"ab\")) # \"\""
    },
    {
      "rank": 35,
      "score": 8.825513124364049,
      "candidate": "word = word.upper()\n    vowels = ['A', 'E', 'I', 'O', 'U']\n    vowel_index = []\n    for i in range(len(word)):\n        if word[i] in vowels:\n            vowel_index.append(i)\n\n    if len(vowel_index) <= 1:\n        return ''\n\n    vowel_index.sort()\n\n    for i in range(len(vowel_index)-1, 0, -1):\n        if vowel_index[i] - vowel_index[i-1] == 2:\n            return word[vowel_index[i-1]+1]\n\n    return ''\n\n\nif __name__ == '__main__':\n    print(get_closest_vowel(\"yogurt\"))\n    print(get_closest_vowel(\"FULL\"))\n    print(get_closest_vowel(\"quick\"))\n    print(get_closest_vowel(\"ab\"))\n    print(get_closest_vowel(\"abababababab\"))"
    },
    {
      "rank": 36,
      "score": 8.698086177496258,
      "candidate": "word = word.upper()\n    vowels = \"AEIOU\"\n    for i in range(len(word)-2, -1, -1):\n        if word[i] in vowels and word[i+1] in \"BCDFGHJKLMNPQRSTVWXYZ\" and word[i+2] in \"BCDFGHJKLMNPQRSTVWXYZ\":\n            return word[i]\n    return \"\"\n\nif __name__ == \"__main__\":\n    print(get_closest_vowel(\"yogurt\"))\n    print(get_closest_vowel(\"FULL\"))\n    print(get_closest_vowel(\"quick\"))\n    print(get_closest_vowel(\"ab\"))"
    },
    {
      "rank": 37,
      "score": 8.655701158266936,
      "candidate": "vowels = \"aeiou\"\n    word = word.lower()\n    word_length = len(word)\n    for i in range(word_length - 1, 0, -1):\n        if word[i] in vowels:\n            if i == word_length - 1:\n                return word[i]\n            elif i > 1 and word[i - 1] in vowels:\n                return word[i]\n    return \"\"\n\nif __name__ == \"__main__\":\n    print(get_closest_vowel(\"yogurt\"))\n    print(get_closest_vowel(\"FULL\"))\n    print(get_closest_vowel(\"quick\"))\n    print(get_closest_vowel(\"ab\"))"
    },
    {
      "rank": 38,
      "score": 8.577893977053916,
      "candidate": "vowels = \"aeiou\"\n    last_consonant_index = len(word) - 1\n    while word[last_consonant_index] not in vowels:\n        last_consonant_index -= 1\n        if last_consonant_index == 0:\n            return \"\"\n    vowel_index = last_consonant_index\n    while word[vowel_index] in vowels:\n        vowel_index -= 1\n        if vowel_index == 0:\n            return \"\"\n    return word[vowel_index]\n\n\nprint(get_closest_vowel(\"yogurt\"))\nprint(get_closest_vowel(\"FULL\"))\nprint(get_closest_vowel(\"quick\"))\nprint(get_closest_vowel(\"ab\"))"
    },
    {
      "rank": 39,
      "score": 8.5372937130375,
      "candidate": "vowels = [\"A\", \"E\", \"I\", \"O\", \"U\", \"Y\"]\n    word = word.upper()\n    for i in range(len(word)-2, -1, -1):\n        if word[i] in vowels:\n            if word[i+1].isupper() and word[i+1] in vowels and word[i+2].isupper():\n                return word[i]\n    return \"\"\n\n\ndef main():\n    print(get_closest_vowel(\"yogurt\")) # ==> \"u\"\n    print(get_closest_vowel(\"FULL\")) # ==> \"U\"\n    print(get_closest_vowel(\"quick\")) # ==> \"\"\n    print(get_closest_vowel(\"ab\")) # ==> \"\"\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 40,
      "score": 8.526148750919216,
      "candidate": "vowels = [\"A\", \"E\", \"I\", \"O\", \"U\"]\n    vowels_index = []\n    for i in range(len(word)):\n        if word[i] in vowels:\n            vowels_index.append(i)\n    if len(vowels_index) == 0:\n        return \"\"\n    elif len(vowels_index) == 1:\n        return \"\"\n    else:\n        for i in range(len(vowels_index) - 2, -1, -1):\n            if (vowels_index[i + 1] - vowels_index[i] == 1) and (vowels_index[i + 2] - vowels_index[i + 1] == 1):\n                return word[vowels_index[i + 1]]\n        return \"\"\n\n\nif __name__ == \"__main__\":\n    print(get_closest_vowel(\"yogurt\"))\n    print(get_closest_vowel(\"FULL\"))\n    print(get_closest_vowel(\"quick\"))\n    print(get_closest_vowel(\"ab\"))"
    },
    {
      "rank": 41,
      "score": 8.507354635051614,
      "candidate": "# Your code here\n\n\nprint(get_closest_vowel(\"yogurt\"))\nprint(get_closest_vowel(\"FULL\"))\nprint(get_closest_vowel(\"quick\"))\nprint(get_closest_vowel(\"ab\"))"
    },
    {
      "rank": 42,
      "score": 8.495628365770417,
      "candidate": "# Rules:\n    # 1. The vowel must be in the middle of 2 consonants\n    # 2. The vowel must be the closest to the right side of the word\n    # 3. The vowel must be the closest to the right side of the consonants\n    # 4. The vowel must be the closest to the right side of the word\n    # 5. The vowel must be the closest to the right side of the consonants\n    \n    # Find the index of the last vowel\n    last_vowel_idx = len(word) - 1\n    while word[last_vowel_idx] not in \"AEIOU\":\n        last_vowel_idx -= 1\n    # Find the index of the first consonant\n    first_consonant_idx = 0\n    while word[first_consonant_idx] not in \"BCDFGHJKLMNPQRSTVWXYZ\":\n        first_consonant_idx += 1\n    # Find the index of the last consonant\n    last_consonant_idx = len(word) - 1\n    while word[last_consonant_idx] not in \"BCDFGHJKLMNPQRSTVWXYZ\":\n        last_consonant_idx -= 1\n    # Find the index of the first vowel\n    first_vowel_idx = 0\n    while word[first_vowel_idx] not in \"AEIOU\":\n        first_vowel_idx += 1\n    \n    # Check the distance between the last vowel and the last consonant\n    # If it is the closest, return the vowel\n    if abs(last_vowel_idx - last_consonant_idx) < abs(first_consonant_idx - last_consonant_idx):\n        return word[last_vowel_idx]\n    \n    # Check the distance between the first vowel and the first consonant\n    # If it is the closest, return the vowel\n    if abs(first_vowel_idx - first_consonant_idx) < abs(first_consonant_idx - last_consonant"
    },
    {
      "rank": 43,
      "score": 8.489000197553837,
      "candidate": "# My and best solution\n    vowels = \"AEIOU\"\n    for i in range(len(word)-1, -1, -1):\n        if word[i] in vowels and i != len(word)-1:\n            return word[i]\n    return \"\"\n\n    # Best practice\n    vowels = \"aeiou\"\n    for i in range(len(word)-1, -1, -1):\n        if word[i] in vowels and word[i+1] not in vowels:\n            return word[i]\n    return \"\""
    },
    {
      "rank": 44,
      "score": 8.435129674275856,
      "candidate": "# Your code here\n    vowels = 'aeiou'\n    word = word.lower()\n    for i in range(len(word)-1, 0, -1):\n        if word[i] in vowels and word[i-1] in vowels:\n            return word[i]\n    return \"\"\n\nprint(get_closest_vowel(\"yogurt\"))\nprint(get_closest_vowel(\"FULL\"))\nprint(get_closest_vowel(\"quick\"))\nprint(get_closest_vowel(\"ab\"))\nprint(get_closest_vowel(\"beeBee\"))\nprint(get_closest_vowel(\"beeBeeBee\"))"
    },
    {
      "rank": 45,
      "score": 8.396173110511851,
      "candidate": "vowels = set(\"aeiou\")\n    for i in range(len(word)-2, -1, -1):\n        if word[i] in vowels and word[i+1].isupper() and word[i+2].isupper():\n            return word[i]\n    return \"\"\n\n\ndef test_get_closest_vowel():\n    assert get_closest_vowel(\"yogurt\") == \"u\"\n    assert get_closest_vowel(\"FULL\") == \"U\"\n    assert get_closest_vowel(\"quick\") == \"\"\n    assert get_closest_vowel(\"ab\") == \"\"\n    assert get_closest_vowel(\"xyZ\") == \"Z\"\n    assert get_closest_vowel(\"xyZy\") == \"y\"\n    assert get_closest_vowel(\"xyZyu\") == \"y\"\n    assert get_closest_vowel(\"xyZyuE\") == \"y\"\n    assert get_closest_vowel(\"xyZyuEa\") == \"a\"\n    assert get_closest_vowel(\"xyZyuEaP\") == \"a\"\n    assert get_closest_vowel(\"xyZyuEaPp\") == \"a\"\n    assert get_closest_vowel(\"xyZyuEaPp2\") == \"a\"\n\n\nif __name__ == '__main__':\n    test_get_closest_vowel()"
    },
    {
      "rank": 46,
      "score": 8.383568835637657,
      "candidate": "word = word.lower()\n    vowels = 'aeiou'\n    vowels_and_index = [(i,vowel) for i,vowel in enumerate(word) if vowel in vowels]\n    if len(vowels_and_index) == 0:\n        return \"\"\n    if len(vowels_and_index) == 1:\n        return vowels_and_index[0][1]\n    if len(vowels_and_index) == 2:\n        if vowels_and_index[0][0] - vowels_and_index[1][0] == 1:\n            return vowels_and_index[1][1]\n        return vowels_and_index[0][1]\n    for i in range(len(vowels_and_index)-1):\n        if vowels_and_index[i+1][0] - vowels_and_index[i][0] == 1:\n            return vowels_and_index[i+1][1]\n    return \"\""
    },
    {
      "rank": 47,
      "score": 8.383564567016377,
      "candidate": "vowels = 'aeiouAEIOU'\n    if len(word) < 3:\n        return ''\n\n    for i in range(len(word) - 2, -1, -1):\n        if word[i] in vowels:\n            if word[i - 1] in vowels:\n                return ''\n            if word[i + 1] in vowels:\n                return ''\n            return word[i]\n    return ''\n\n\nif __name__ == '__main__':\n    print(get_closest_vowel(\"yogurt\"))\n    print(get_closest_vowel(\"FULL\"))\n    print(get_closest_vowel(\"quick\"))\n    print(get_closest_vowel(\"ab\"))"
    },
    {
      "rank": 48,
      "score": 8.383451789766907,
      "candidate": "vowels = ['A', 'E', 'I', 'O', 'U', 'Y']\n\n    for i in range(len(word)-1, -1, -1):\n        if word[i].isupper():\n            continue\n        if word[i] in vowels:\n            return word[i]\n\n    return \"\"\n\n\nif __name__ == '__main__':\n    print(get_closest_vowel(\"yogurt\"))\n    print(get_closest_vowel(\"FULL\"))\n    print(get_closest_vowel(\"quick\"))\n    print(get_closest_vowel(\"ab\"))"
    },
    {
      "rank": 49,
      "score": 8.366157483591229,
      "candidate": "# Rules\n    # 1. Ignore vowels at the beginning or end\n    # 2. Only consider vowels between 2 consonants\n    # 3. Return the closest vowel\n\n    # 1. Ignore vowels at the beginning or end\n    if word[0] in 'aeiou':\n        word = word[1:]\n    if word[-1] in 'aeiou':\n        word = word[:-1]\n\n    # 2. Only consider vowels between 2 consonants\n    # 3. Return the closest vowel\n    for i in range(len(word)):\n        if word[i] in 'aeiou':\n            if i == 0:\n                return word[i]\n            if i == len(word)-1:\n                return word[i]\n            if word[i-1] in 'aeiou' and word[i+1] in 'aeiou':\n                return word[i]\n    return ''\n\n\nif __name__ == '__main__':\n    print(get_closest_vowel(\"yogurt\"))\n    print(get_closest_vowel(\"FULL\"))\n    print(get_closest_vowel(\"quick\"))\n    print(get_closest_vowel(\"ab\"))"
    },
    {
      "rank": 50,
      "score": 8.364049226723129,
      "candidate": "vowels = \"aeiou\"\n    if len(word) < 3:\n        return \"\"\n    for i in range(len(word)-1, 1, -1):\n        if word[i] in vowels and word[i-1] not in vowels and word[i-2] not in vowels:\n            return word[i]\n    return \"\"\n\ndef test_function():\n    assert get_closest_vowel(\"yogurt\") == \"u\"\n    assert get_closest_vowel(\"FULL\") == \"U\"\n    assert get_closest_vowel(\"quick\") == \"\"\n    assert get_closest_vowel(\"ab\") == \"\"\n    assert get_closest_vowel(\"ABCabc\") == \"a\"\n    assert get_closest_vowel(\"acd\") == \"\"\n    assert get_closest_vowel(\"why\") == \"y\"\n    assert get_closest_vowel(\"trying\") == \"i\"\n    assert get_closest_vowel(\"many\") == \"a\"\n    assert get_closest_vowel(\"hmmmmm\") == \"m\"\n    assert get_closest_vowel(\"PrOgRaMmInG\") == \"i\"\n    assert get_closest_vowel(\"abcd\") == \"\"\n    assert get_closest_vowel(\"x\") == \"\"\n    assert get_closest_vowel(\"chair\") == \"a\"\n    print(\"Coding complete!\")\n\ntest_function()"
    },
    {
      "rank": 51,
      "score": 8.359252286329024,
      "candidate": "vowels = \"AEIOU\"\n    word = word.upper()\n    for i in range(len(word)-1, 0, -1):\n        if word[i] in vowels:\n            if i > 0 and word[i-1] in vowels:\n                continue\n            return word[i]\n    return \"\"\n\nif __name__ == \"__main__\":\n    print(get_closest_vowel(\"yogurt\")) # \"u\"\n    print(get_closest_vowel(\"FULL\")) # \"U\"\n    print(get_closest_vowel(\"quick\")) # \"\"\n    print(get_closest_vowel(\"ab\")) # \"\""
    },
    {
      "rank": 52,
      "score": 8.322381104101357,
      "candidate": "# your code here\n    pass\n\nif __name__ == '__main__':\n    print(get_closest_vowel(\"yogurt\"))\n    print(get_closest_vowel(\"FULL\"))\n    print(get_closest_vowel(\"quick\"))\n    print(get_closest_vowel(\"ab\"))"
    },
    {
      "rank": 53,
      "score": 8.319859142604669,
      "candidate": "# Your code here\n    vowels = [\"A\", \"E\", \"I\", \"O\", \"U\", \"a\", \"e\", \"i\", \"o\", \"u\"]\n    for i in range(len(word)):\n        if word[i] in vowels:\n            if i == 0:\n                continue\n            if word[i-1] not in vowels:\n                if i+1 == len(word):\n                    continue\n                if word[i+1] not in vowels:\n                    return word[i]\n            else:\n                continue\n    return \"\"\n\n\nif __name__ == \"__main__\":\n    print(get_closest_vowel(\"yogurt\"))\n    print(get_closest_vowel(\"FULL\"))\n    print(get_closest_vowel(\"quick\"))\n    print(get_closest_vowel(\"ab\"))"
    },
    {
      "rank": 54,
      "score": 8.306706791465015,
      "candidate": "vowels = \"aeiou\"\n    vowels_list = []\n    for index in range(len(word)-1, -1, -1):\n        if word[index] in vowels:\n            vowels_list.append(word[index])\n            if index > 0 and word[index-1] not in vowels:\n                return vowels_list[-1]\n    return \"\"\n\n\nif __name__ == '__main__':\n    print(get_closest_vowel(\"yogurt\"))\n    print(get_closest_vowel(\"FULL\"))\n    print(get_closest_vowel(\"quick\"))\n    print(get_closest_vowel(\"ab\"))\n    print(get_closest_vowel(\"aB\"))\n    print(get_closest_vowel(\"abcd\"))"
    },
    {
      "rank": 55,
      "score": 8.288278385065555,
      "candidate": "# Your code here\n\n    # vowels = set('aeiou')\n    # vowel_list = list(vowels)\n    # word = word.lower()\n    # word_list = list(word)\n    # for i in range(len(word_list)-1, 0, -1):\n    #     if word_list[i] in vowel_list:\n    #         if word_list[i+1] in vowel_list:\n    #             return word_list[i]\n    #     else:\n    #         if word_list[i-1] in vowel_list and word_list[i+1] in vowel_list:\n    #             return word_list[i]\n    # return ''\n\n    vowels = set('aeiou')\n    word = word.lower()\n    word_list = list(word)\n    for i in range(len(word_list)-1, 0, -1):\n        if word_list[i] in vowels:\n            if word_list[i+1] in vowels:\n                return word_list[i]\n            else:\n                for j in range(i, 0, -1):\n                    if word_list[j] in vowels:\n                        return word_list[j]\n    return ''\n\nif __name__ == '__main__':\n    print(get_closest_vowel(\"yogurt\"))\n    print(get_closest_vowel(\"FULL\"))\n    print(get_closest_vowel(\"quick\"))\n    print(get_closest_vowel(\"ab\"))"
    },
    {
      "rank": 56,
      "score": 8.145186114314646,
      "candidate": "vowels = ['A','E','I','O','U']\n    vowel_pos = []\n    word = word.upper()\n    for i in range(len(word)):\n        if word[i] in vowels:\n            vowel_pos.append(i)\n    if len(vowel_pos) == 0:\n        return \"\"\n    else:\n        for i in range(len(vowel_pos)-1,-1,-1):\n            if vowel_pos[i] != vowel_pos[i-1]+1:\n                return word[vowel_pos[i]]\n        return \"\""
    },
    {
      "rank": 57,
      "score": 8.077245482097268,
      "candidate": "vowels = \"aeiou\"\n    for i in range(len(word)-1, 0, -1):\n        if word[i].lower() in vowels and word[i-1].lower() in vowels:\n            return word[i]\n    return \"\"\n\n\nprint(get_closest_vowel(\"yogurt\"))\nprint(get_closest_vowel(\"FULL\"))\nprint(get_closest_vowel(\"quick\"))\nprint(get_closest_vowel(\"ab\"))"
    },
    {
      "rank": 58,
      "score": 7.934930212235703,
      "candidate": "vowels = \"AEIOU\"\n    vowel_indices = [i for i, ltr in enumerate(word) if ltr in vowels]\n    if len(vowel_indices) < 2:\n        return \"\"\n    \n    closest_vowel = \"\"\n    for i in range(len(vowel_indices) - 2, 0, -1):\n        if vowel_indices[i] > vowel_indices[i+1]:\n            closest_vowel = word[vowel_indices[i+1]]\n            break\n    \n    return closest_vowel\n\n\nprint(get_closest_vowel(\"yogurt\")) # ==> \"u\"\nprint(get_closest_vowel(\"FULL\")) # ==> \"U\"\nprint(get_closest_vowel(\"quick\")) # ==> \"\"\nprint(get_closest_vowel(\"ab\")) # ==> \"\""
    },
    {
      "rank": 59,
      "score": 7.763310717381112,
      "candidate": "# RW + TC: O(n)\n    # RW: iterate the string from the end to the front, stop when you find a vowel\n    # TC: O(1)\n    # SC: O(1)\n\n    # RW + TC: O(n)\n    # RW: iterate the string from the end to the front, stop when you find a vowel\n    # TC: O(1)\n    # SC: O(1)\n\n    if len(word) < 3:\n        return \"\"\n\n    for i in range(len(word) - 2, -1, -1):\n        if word[i].lower() in 'aeiou':\n            if word[i - 1].lower() in 'aeiou' and word[i + 1].lower() in 'aeiou':\n                return word[i]\n    return \"\"\n\nif __name__ == '__main__':\n    print(get_closest_vowel(\"yogurt\")) # \"u\"\n    print(get_closest_vowel(\"FULL\")) # \"U\"\n    print(get_closest_vowel(\"quick\")) # \"\"\n    print(get_closest_vowel(\"ab\")) # \"\""
    },
    {
      "rank": 60,
      "score": 3.6415038988837427,
      "candidate": "# RW + IMP\n    # 1. get all vowels\n    # 2. get all consonants\n    # 3. get all vowels between consonants\n    # 4. get closest vowel between consonants\n    # 5. return closest vowel\n    vowels = []\n    consonants = []\n    for idx, char in enumerate(word):\n        if char in \"aeiou\":\n            vowels.append(idx)\n        elif char in \"AEIOU\":\n            vowels.append(idx)\n            consonants.append(idx)\n        elif char in \"abcdefghijklmnopqrstuvwxyz\":\n            consonants.append(idx)\n        elif char in \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\":\n            consonants.append(idx)\n    vowels.append(len(word))\n    closest_vowel = \"\"\n    for idx, vowel in enumerate(vowels[:-1]):\n        if vowels[idx + 1] - vowel == 1:\n            closest_vowel = word[vowel]\n            break\n    return closest_vowel\n\n\ndef test_function():\n    assert get_closest_vowel(\"yogurt\") == \"u\"\n    assert get_closest_vowel(\"FULL\") == \"U\"\n    assert get_closest_vowel(\"quick\") == \"\"\n    assert get_closest_vowel(\"ab\") == \"\"\n    assert get_closest_vowel(\"ABCDEFGH\") == \"\"\n    assert get_closest_vowel(\"yogurt999\") == \"u\"\n    assert get_closest_vowel(\"yogurt999yo\") == \"\"\n    assert get_closest_vowel(\"yogurt999yu\") == \"\"\n    assert get_closest_vowel(\"yogurt999yu9u\") == \"\"\n    assert get_closest_vowel(\"yogurt999yu9uy\") == \"u\"\n    assert get_closest_vowel(\"yogurt999y"
    },
    {
      "rank": 61,
      "score": 3.6305949922510474,
      "candidate": "vowels = \"aeiouAEIOU\"\n    vowel_index = -1\n    for i in range(len(word)-2, -1, -1):\n        if word[i] in vowels:\n            vowel_index = i\n            break\n    if vowel_index == -1:\n        return \"\"\n    for j in range(vowel_index+1, len(word)):\n        if word[j] in vowels:\n            return word[j]\n    return \"\"\n\nif __name__ == '__main__':\n    print(\"Example:\")\n    print(get_closest_vowel(\"yogurt\"))\n\n    # These \"asserts\" are used for self-checking and not for an auto-testing\n    assert get_closest_vowel(\"yogurt\") == \"u\"\n    assert get_closest_vowel(\"honey\") == \"o\"\n    assert get_closest_vowel(\"blue\") == \"\"\n    assert get_closest_vowel(\"green\") == \"o\"\n    assert get_closest_vowel(\"ABC\") == \"\"\n    assert get_closest_vowel(\"google\") == \"o\"\n    assert get_closest_vowel(\"oops!\") == \"o\"\n    print(\"Coding complete? Click 'Check' to earn cool rewards!\")"
    },
    {
      "rank": 62,
      "score": 3.6059365583440215,
      "candidate": "# Your code here\n    vowels = \"aeiouAEIOU\"\n    word = word.strip()\n    if word[0] in vowels:\n        word = word[1:]\n    if word[-1] in vowels:\n        word = word[:-1]\n    for i in range(len(word)-1, 0, -1):\n        if word[i] in vowels and word[i-1] not in vowels:\n            return word[i]\n    return \"\"\n\n\nif __name__ == '__main__':\n    print(\"Example:\")\n    print(get_closest_vowel(\"yogurt\"))\n\n    # These \"asserts\" are used for self-checking and not for an auto-testing\n    assert get_closest_vowel(\"yogurt\") == \"u\"\n    assert get_closest_vowel(\"eYe\") == \"i\"\n    assert get_closest_vowel(\"zombie\") == \"o\"\n    assert get_closest_vowel(\"cozy\") == \"o\"\n    assert get_closest_vowel(\"tYpo\") == \"i\"\n    assert get_closest_vowel(\"cozy\") == \"o\"\n    assert get_closest_vowel(\"tYpo\") == \"i\"\n    assert get_closest_vowel(\"cozy\") == \"o\"\n    assert get_closest_vowel(\"tYpo\") == \"i\"\n    assert get_closest_vowel(\"tYpo\") == \"i\"\n    assert get_closest_vowel(\"cozy\") == \"o\"\n    assert get_closest_vowel(\"tYpo\") == \"i\"\n    assert get_closest_vowel(\"cozy\") == \"o\"\n    assert get_closest_vowel(\"tYpo\") == \"i\"\n    assert get_closest_vowel(\"cozy\") == \"o\"\n    assert get_closest_vowel(\"tYpo\") == \"i\"\n    assert get_closest_vowel(\"cozy\") == \"o\"\n    assert get_closest_vowel(\"tYpo\")"
    },
    {
      "rank": 63,
      "score": 3.5560584117140372,
      "candidate": "word = word.upper()\n    vowels = 'AEIOU'\n    for i in range(len(word)-1, 0, -1):\n        if word[i] in vowels and word[i-1] in vowels:\n            return word[i]\n    return \"\"\n\ndef get_closest_vowel2(word):\n    \"\"\"You are given a word. Your task is to find the closest vowel that stands between \n    two consonants from the right side of the word (case sensitive).\n    \n    Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n    find any vowel met the above condition. \n\n    You may assume that the given string contains English letter only.\n\n    Example:\n    get_closest_vowel(\"yogurt\") ==> \"u\"\n    get_closest_vowel(\"FULL\") ==> \"U\"\n    get_closest_vowel(\"quick\") ==> \"\"\n    get_closest_vowel(\"ab\") ==> \"\"\n    \"\"\"\n    word = word.upper()\n    vowels = 'AEIOU'\n    for i in range(len(word)-1, 0, -1):\n        if word[i] in vowels and word[i-1] in vowels:\n            return word[i]\n    return \"\"\n\ndef get_closest_vowel3(word):\n    \"\"\"You are given a word. Your task is to find the closest vowel that stands between \n    two consonants from the right side of the word (case sensitive).\n    \n    Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n    find any vowel met the above condition. \n\n    You may assume that the given string contains English letter only.\n\n    Example:\n    get_closest_vowel(\"yogurt\") ==> \"u\"\n    get_closest_vowel(\"FULL\") ==> \"U\"\n    get_closest_vowel(\"quick\") ==> \"\"\n    get_closest_vowel(\"ab\") ==> \"\"\n    \"\"\"\n    word = word.upper()\n    vowels = 'AEIO"
    },
    {
      "rank": 64,
      "score": 3.41144848813573,
      "candidate": "if len(word) < 2:\n        return \"\"\n\n    vowels = \"AEIOU\"\n    # search the last consonant from right side\n    for i in range(len(word)-1, 0, -1):\n        if word[i].upper() not in vowels:\n            break\n\n    # search the first consonant from right side\n    for j in range(i, len(word)):\n        if word[j].upper() not in vowels:\n            return word[j-1].upper()\n\n    return \"\"\n\n\ndef test_get_closest_vowel():\n    assert get_closest_vowel(\"yogurt\") == \"u\"\n    assert get_closest_vowel(\"FULL\") == \"U\"\n    assert get_closest_vowel(\"quick\") == \"\"\n    assert get_closest_vowel(\"ab\") == \"\"\n    assert get_closest_vowel(\"aB\") == \"\"\n    assert get_closest_vowel(\"aBc\") == \"\"\n    assert get_closest_vowel(\"aBcD\") == \"D\"\n    assert get_closest_vowel(\"aBcDe\") == \"e\"\n    assert get_closest_vowel(\"aBcDeF\") == \"F\"\n    assert get_closest_vowel(\"aBcDeFG\") == \"F\"\n    assert get_closest_vowel(\"aBcDeFGH\") == \"F\"\n    assert get_closest_vowel(\"aBcDeFGHi\") == \"i\"\n    assert get_closest_vowel(\"aBcDeFGHiJ\") == \"J\"\n    assert get_closest_vowel(\"aBcDeFGHiJK\") == \"J\"\n    assert get_closest_vowel(\"aBcDeFGHiJKL\") == \"J\"\n    assert get_closest_vowel(\"aBcDeFGHiJKLm\") == \"m\"\n    assert get_closest_vowel(\"aBcDeFGHiJKLmN\") == \"N\"\n    assert get_closest"
    },
    {
      "rank": 65,
      "score": 3.3753148682578504,
      "candidate": "vowels = \"AEIOU\"\n    word = word.upper()\n\n    for i in range(len(word)-1, 0, -1):\n        if word[i] in vowels:\n            if word[i-1] in vowels:\n                continue\n            if word[i+1] in vowels:\n                continue\n            return word[i]\n\n    return \"\"\n\n\nif __name__ == '__main__':\n    print(\"Example:\")\n    print(get_closest_vowel(\"yogurt\"))\n\n    # These \"asserts\" are used for self-checking and not for an auto-testing\n    assert get_closest_vowel(\"yogurt\") == \"u\"\n    assert get_closest_vowel(\"mississippi\") == \"i\"\n    assert get_closest_vowel(\"foobar\") == \"\"\n    assert get_closest_vowel(\"hooooray\") == \"o\"\n    assert get_closest_vowel(\"a\") == \"\"\n    assert get_closest_vowel(\"b\") == \"\"\n    assert get_closest_vowel(\"aB\") == \"\"\n    assert get_closest_vowel(\"A\") == \"\"\n    assert get_closest_vowel(\"AB\") == \"\"\n    print(\"Coding complete? Click 'Check' to earn cool rewards!\")"
    },
    {
      "rank": 66,
      "score": 3.3372434139623075,
      "candidate": "vowels = ['a', 'e', 'i', 'o', 'u']\n    word = word.lower()\n    word = word[::-1]\n    for i in range(len(word)):\n        if word[i] in vowels:\n            return word[i]\n    return \"\"\n\nif __name__ == '__main__':\n    print(\"Example:\")\n    print(get_closest_vowel(\"yogurt\"))\n\n    # These \"asserts\" are used for self-checking and not for an auto-testing\n    assert get_closest_vowel(\"yogurt\") == \"u\"\n    assert get_closest_vowel(\"Yogurt\") == \"u\"\n    assert get_closest_vowel(\"gym\") == \"\"\n    assert get_closest_vowel(\"a\") == \"\"\n    assert get_closest_vowel(\"apple\") == \"e\"\n    assert get_closest_vowel(\"ChOrmouS\") == \"o\"\n    assert get_closest_vowel(\"dance\") == \"\"\n    assert get_closest_vowel(\"orange\") == \"e\"\n    print(\"Coding complete? Click 'Check' to earn cool rewards!\")"
    },
    {
      "rank": 67,
      "score": 3.3146482389526923,
      "candidate": "# RW\n    vowels = \"aeiou\"\n    for i in range(len(word)-2, -1, -1):\n        if word[i] in vowels and word[i+1] not in vowels:\n            return word[i]\n    return \"\"\n\n\ndef get_closest_vowel_2(word):\n    \"\"\"You are given a word. Your task is to find the closest vowel that stands between \n    two consonants from the right side of the word (case sensitive).\n    \n    Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n    find any vowel met the above condition. \n\n    You may assume that the given string contains English letter only.\n\n    Example:\n    get_closest_vowel(\"yogurt\") ==> \"u\"\n    get_closest_vowel(\"FULL\") ==> \"U\"\n    get_closest_vowel(\"quick\") ==> \"\"\n    get_closest_vowel(\"ab\") ==> \"\"\n    \"\"\"\n    # MW\n    vowels = \"aeiou\"\n    for i in range(len(word)-2, -1, -1):\n        if word[i] in vowels and word[i+1] not in vowels:\n            return word[i]\n    return \"\"\n\n\ndef get_closest_vowel_3(word):\n    \"\"\"You are given a word. Your task is to find the closest vowel that stands between \n    two consonants from the right side of the word (case sensitive).\n    \n    Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n    find any vowel met the above condition. \n\n    You may assume that the given string contains English letter only.\n\n    Example:\n    get_closest_vowel(\"yogurt\") ==> \"u\"\n    get_closest_vowel(\"FULL\") ==> \"U\"\n    get_closest_vowel(\"quick\") ==> \"\"\n    get_closest_vowel(\"ab\") ==> \"\"\n    \"\"\"\n    # KL\n    vowels = \"aeiou\""
    },
    {
      "rank": 68,
      "score": 3.302771297798118,
      "candidate": "pass\n\n\ndef get_closest_vowel2(word):\n    \"\"\"You are given a word. Your task is to find the closest vowel that stands between \n    two consonants from the right side of the word (case sensitive).\n    \n    Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n    find any vowel met the above condition. \n\n    You may assume that the given string contains English letter only.\n\n    Example:\n    get_closest_vowel(\"yogurt\") ==> \"u\"\n    get_closest_vowel(\"FULL\") ==> \"U\"\n    get_closest_vowel(\"quick\") ==> \"\"\n    get_closest_vowel(\"ab\") ==> \"\"\n    \"\"\"\n    pass\n\n\nif __name__ == \"__main__\":\n    print(get_closest_vowel(\"yogurt\")) # \"u\"\n    print(get_closest_vowel(\"FULL\")) # \"U\"\n    print(get_closest_vowel(\"quick\")) # \"\"\n    print(get_closest_vowel(\"ab\")) # \"\""
    },
    {
      "rank": 69,
      "score": 3.265552300621284,
      "candidate": "vowels = \"aeiouAEIOU\"\n    for i in range(len(word) - 2, -1, -1):\n        if word[i] in vowels and word[i + 1] not in vowels and word[i + 2] in vowels:\n            return word[i]\n    return \"\"\n\n\ndef test_function():\n    assert get_closest_vowel(\"yogurt\") == \"u\"\n    assert get_closest_vowel(\"FULL\") == \"U\"\n    assert get_closest_vowel(\"quick\") == \"\"\n    assert get_closest_vowel(\"ab\") == \"\"\n    assert get_closest_vowel(\"ABCDEFGH\") == \"\"\n    assert get_closest_vowel(\"ABCDEFGHmmm\") == \"m\"\n    assert get_closest_vowel(\"ABCDEFGHmmmNNN\") == \"m\"\n    assert get_closest_vowel(\"ABCDEFGHmmmNNNkkk\") == \"k\"\n    assert get_closest_vowel(\"ABCDEFGHmmmNNNkkkTTT\") == \"k\"\n    assert get_closest_vowel(\"ABCDEFGHmmmNNNkkkTTTy\") == \"y\"\n    assert get_closest_vowel(\"ABCDEFGHmmmNNNkkkTTTyUUU\") == \"y\"\n    assert get_closest_vowel(\"ABCDEFGHmmmNNNkkkTTTyUUUII\") == \"i\"\n    assert get_closest_vowel(\"ABCDEFGHmmmNNNkkkTTTyUUUIIoo\") == \"o\"\n    assert get_closest_vowel(\"ABCDEFGHmmmNNNkkkTTTyUUUIIoooo\") == \"o\"\n    assert get_closest_vowel(\"ABCDEFGHmmmNNNkkkTTTyUUUIIoooooo\") == \"o\"\n    assert get_closest_vowel(\"ABCDEFGHmmmNNNkkkTTTyUUUIIoooooooo\") == \"\""
    },
    {
      "rank": 70,
      "score": 3.250787278424756,
      "candidate": "pass"
    },
    {
      "rank": 71,
      "score": 3.2224496178702453,
      "candidate": "pass\n\ndef get_closest_vowel2(word):\n    \"\"\"You are given a word. Your task is to find the closest vowel that stands between \n    two consonants from the right side of the word (case sensitive).\n    \n    Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n    find any vowel met the above condition. \n\n    You may assume that the given string contains English letter only.\n\n    Example:\n    get_closest_vowel(\"yogurt\") ==> \"u\"\n    get_closest_vowel(\"FULL\") ==> \"U\"\n    get_closest_vowel(\"quick\") ==> \"\"\n    get_closest_vowel(\"ab\") ==> \"\"\n    \"\"\"\n    pass\n\ndef get_closest_vowel3(word):\n    \"\"\"You are given a word. Your task is to find the closest vowel that stands between \n    two consonants from the right side of the word (case sensitive).\n    \n    Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n    find any vowel met the above condition. \n\n    You may assume that the given string contains English letter only.\n\n    Example:\n    get_closest_vowel(\"yogurt\") ==> \"u\"\n    get_closest_vowel(\"FULL\") ==> \"U\"\n    get_closest_vowel(\"quick\") ==> \"\"\n    get_closest_vowel(\"ab\") ==> \"\"\n    \"\"\"\n    pass\n\ndef get_closest_vowel4(word):\n    \"\"\"You are given a word. Your task is to find the closest vowel that stands between \n    two consonants from the right side of the word (case sensitive).\n    \n    Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n    find any vowel met the above condition. \n\n    You may assume that the given string contains English letter only.\n\n    Example:\n    get_closest_vowel(\"yogurt\") ==> \"u\"\n    get_closest_vowel(\"FULL\") ==> \"U\"\n    get_closest_"
    },
    {
      "rank": 72,
      "score": 3.2036528027346054,
      "candidate": "vowels = \"aeiou\"\n    for i in range(len(word)-1, 0, -1):\n        if word[i] in vowels:\n            if word[i-1] not in vowels:\n                return word[i]\n    return \"\"\n\n\ndef get_closest_vowel2(word):\n    \"\"\"You are given a word. Your task is to find the closest vowel that stands between \n    two consonants from the right side of the word (case sensitive).\n    \n    Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n    find any vowel met the above condition. \n\n    You may assume that the given string contains English letter only.\n\n    Example:\n    get_closest_vowel(\"yogurt\") ==> \"u\"\n    get_closest_vowel(\"FULL\") ==> \"U\"\n    get_closest_vowel(\"quick\") ==> \"\"\n    get_closest_vowel(\"ab\") ==> \"\"\n    \"\"\"\n    vowels = \"aeiou\"\n    for i in range(len(word)-1, 0, -1):\n        if word[i] in vowels:\n            if word[i-1] not in vowels:\n                return word[i]\n    return \"\"\n\n\nprint(get_closest_vowel2(\"yogurt\"))\nprint(get_closest_vowel2(\"FULL\"))\nprint(get_closest_vowel2(\"quick\"))\nprint(get_closest_vowel2(\"ab\"))"
    },
    {
      "rank": 73,
      "score": 3.14827077026953,
      "candidate": "# Your code here\n    vowels = 'aeiou'\n    index = -2\n    while index > -len(word):\n        if word[index] in vowels:\n            return word[index]\n        index -= 1\n    return ''\n\n\nif __name__ == '__main__':\n    print(\"Example:\")\n    print(get_closest_vowel(\"yogurt\"))\n\n    # These \"asserts\" are used for self-checking and not for an auto-testing\n    assert get_closest_vowel(\"yogurt\") == \"u\"\n    assert get_closest_vowel(\"javascript\") == \"a\"\n    assert get_closest_vowel(\"Python\") == \"o\"\n    assert get_closest_vowel(\"grass\") == \"a\"\n    assert get_closest_vowel(\"oil\") == \"\"\n    assert get_closest_vowel(\"beer\") == \"\"\n    assert get_closest_vowel(\"a\") == \"\"\n    assert get_closest_vowel(\"z\") == \"\"\n    print(\"Coding complete? Click 'Check' to earn cool rewards!\")"
    },
    {
      "rank": 74,
      "score": 3.140883498723069,
      "candidate": "# Your code here\n    vowels = \"AEIOU\"\n    word = word[::-1]\n    for i in range(len(word)):\n        if word[i] in vowels:\n            if i != 0 and i != len(word) - 1:\n                if word[i + 1] in vowels and word[i - 1] in vowels:\n                    return word[i]\n    return \"\"\n\n\nif __name__ == '__main__':\n    print(\"Example:\")\n    print(get_closest_vowel(\"yogurt\"))\n\n    # These \"asserts\" are used for self-checking and not for an auto-testing\n    assert get_closest_vowel(\"yogurt\") == \"u\"\n    assert get_closest_vowel(\"FULL\") == \"U\"\n    assert get_closest_vowel(\"quick\") == \"\"\n    assert get_closest_vowel(\"ab\") == \"\"\n    print(\"Coding complete? Click 'Check' to earn cool rewards!\")"
    },
    {
      "rank": 75,
      "score": 3.135818006875461,
      "candidate": "vowels = \"aeiou\"\n    word = word.lower()\n    word = word[::-1]\n    for i in range(len(word)):\n        if word[i] in vowels:\n            if i == 0:\n                return \"\"\n            if word[i-1] in vowels:\n                return \"\"\n            return word[i]\n    return \"\"\n\n\ndef test_function():\n    assert get_closest_vowel(\"yogurt\") == \"u\"\n    assert get_closest_vowel(\"FULL\") == \"U\"\n    assert get_closest_vowel(\"quick\") == \"\"\n    assert get_closest_vowel(\"ab\") == \"\"\n    assert get_closest_vowel(\"a\") == \"\"\n    assert get_closest_vowel(\"abcdefghijklmnopqrstuvwxyz\") == \"u\"\n    assert get_closest_vowel(\"qwertyuiopasdfghjklzxcvbnm\") == \"u\"\n    assert get_closest_vowel(\"\") == \"\"\n    assert get_closest_vowel(\"yogurt123\") == \"u\"\n    assert get_closest_vowel(\"yogurt123nop\") == \"u\"\n\nif __name__ == '__main__':\n    test_function()"
    },
    {
      "rank": 76,
      "score": 3.132874427451866,
      "candidate": "vowels = [\"A\", \"E\", \"I\", \"O\", \"U\"]\n    vowel_list = []\n    for i in range(len(word)-1, -1, -1):\n        if word[i] in vowels:\n            vowel_list.append(word[i])\n            break\n    if len(vowel_list) == 0:\n        return \"\"\n    else:\n        return vowel_list[-1]\n\n\ndef get_closest_vowel2(word):\n    \"\"\"You are given a word. Your task is to find the closest vowel that stands between \n    two consonants from the right side of the word (case sensitive).\n    \n    Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n    find any vowel met the above condition. \n\n    You may assume that the given string contains English letter only.\n\n    Example:\n    get_closest_vowel(\"yogurt\") ==> \"u\"\n    get_closest_vowel(\"FULL\") ==> \"U\"\n    get_closest_vowel(\"quick\") ==> \"\"\n    get_closest_vowel(\"ab\") ==> \"\"\n    \"\"\"\n    vowels = [\"A\", \"E\", \"I\", \"O\", \"U\"]\n    vowel_list = []\n    for i in range(len(word)-1, -1, -1):\n        if word[i] in vowels:\n            vowel_list.append(word[i])\n    if len(vowel_list) == 0:\n        return \"\"\n    else:\n        return vowel_list[-1]\n\n\ndef get_closest_vowel3(word):\n    \"\"\"You are given a word. Your task is to find the closest vowel that stands between \n    two consonants from the right side of the word (case sensitive).\n    \n    Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n    find any vowel met the above condition. \n\n    You may assume that the given string contains English letter only.\n\n    Example:\n    get_closest_vowel(\"yog"
    },
    {
      "rank": 77,
      "score": 3.121409313596476,
      "candidate": "vowels = ['A', 'E', 'I', 'O', 'U']\n    right_vowels = [c for c in word if c in vowels]\n    if len(right_vowels) == 0:\n        return \"\"\n    for i in range(len(word)-1, -1, -1):\n        if word[i] not in vowels:\n            if i < len(word)-1 and word[i+1] in vowels:\n                return word[i+1]\n    return \"\"\n\n\ndef test_function():\n    assert get_closest_vowel(\"yogurt\") == \"u\"\n    assert get_closest_vowel(\"honey\") == \"o\"\n    assert get_closest_vowel(\"bee\") == \"e\"\n    assert get_closest_vowel(\"lollipop\") == \"o\"\n    assert get_closest_vowel(\"Apple\") == \"p\"\n    assert get_closest_vowel(\"happy\") == \"p\"\n    assert get_closest_vowel(\"daily\") == \"a\"\n    assert get_closest_vowel(\"happy birthday\") == \"a\"\n    assert get_closest_vowel(\"hello\") == \"e\"\n    assert get_closest_vowel(\"xylophone\") == \"o\"\n    assert get_closest_vowel(\"full\") == \"U\"\n    assert get_closest_vowel(\"quiz\") == \"\"\n    assert get_closest_vowel(\"glove\") == \"o\"\n    assert get_closest_vowel(\"knight\") == \"i\"\n    assert get_closest_vowel(\"ab\") == \"\"\n    assert get_closest_vowel(\"B\") == \"\""
    },
    {
      "rank": 78,
      "score": 3.045478261781045,
      "candidate": "vowels = \"aeiou\"\n    word = word.lower()\n    if len(word) < 3:\n        return \"\"\n    for i in range(len(word)-1, 0, -1):\n        if word[i] in vowels:\n            if (word[i-1].isalpha() and word[i+1].isalpha()) or (word[i-1] == word[i+1]):\n                return word[i]\n    return \"\"\n\n\ndef test_get_closest_vowel():\n    assert get_closest_vowel(\"yogurt\") == \"u\"\n    assert get_closest_vowel(\"FULL\") == \"U\"\n    assert get_closest_vowel(\"quick\") == \"\"\n    assert get_closest_vowel(\"ab\") == \"\""
    },
    {
      "rank": 79,
      "score": 3.037621918379556,
      "candidate": "# My and best way solution\n    # O(n)\n    vowels = \"aeiouAEIOU\"\n    vowel_list = []\n    for i in range(len(word)):\n        if word[i] in vowels:\n            vowel_list.append(i)\n\n    if len(vowel_list) < 2:\n        return \"\"\n\n    if vowel_list[0] + 1 == vowel_list[1]:\n        return word[vowel_list[0]]\n\n    if vowel_list[-1] - 1 == vowel_list[-2]:\n        return word[vowel_list[-1]]\n\n    for i in range(1, len(vowel_list) - 1):\n        if vowel_list[i] - 1 == vowel_list[i - 1] and vowel_list[i] + 1 == vowel_list[i + 1]:\n            return word[vowel_list[i]]\n\n    return \"\"\n\n\n\ndef get_closest_vowel2(word):\n    \"\"\"You are given a word. Your task is to find the closest vowel that stands between \n    two consonants from the right side of the word (case sensitive).\n    \n    Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n    find any vowel met the above condition. \n\n    You may assume that the given string contains English letter only.\n\n    Example:\n    get_closest_vowel(\"yogurt\") ==> \"u\"\n    get_closest_vowel(\"FULL\") ==> \"U\"\n    get_closest_vowel(\"quick\") ==> \"\"\n    get_closest_vowel(\"ab\") ==> \"\"\n    \"\"\"\n    # My and best way solution\n    # O(n)\n    vowels = \"aeiouAEIOU\"\n    vowel_list = []\n    for i in range(len(word)):\n        if word[i] in vowels:\n            vowel_list.append(i)\n\n    if len(vowel_list) < 2:\n        return \"\""
    },
    {
      "rank": 80,
      "score": 3.0276865639220487,
      "candidate": "# check if there are any vowels in the word\n    if len(set(word) & set('aeiou')) == 0:\n        return ''\n\n    # check if the first char is a vowel\n    if word[0] in 'aeiou':\n        return ''\n\n    # check if the last char is a vowel\n    if word[-1] in 'aeiou':\n        return ''\n\n    # get the last consonant\n    for i in range(len(word)-1, 0, -1):\n        if word[i] not in 'aeiou':\n            last_consonant = word[i]\n            break\n\n    # get the closest vowel\n    for i in range(len(word)-1, 0, -1):\n        if word[i] in 'aeiou':\n            if word[i] != last_consonant:\n                return word[i]\n    return ''\n\n\n\ndef get_closest_vowel2(word):\n    \"\"\"You are given a word. Your task is to find the closest vowel that stands between \n    two consonants from the right side of the word (case sensitive).\n    \n    Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n    find any vowel met the above condition. \n\n    You may assume that the given string contains English letter only.\n\n    Example:\n    get_closest_vowel(\"yogurt\") ==> \"u\"\n    get_closest_vowel(\"FULL\") ==> \"U\"\n    get_closest_vowel(\"quick\") ==> \"\"\n    get_closest_vowel(\"ab\") ==> \"\"\n    \"\"\"\n    # check if there are any vowels in the word\n    if len(set(word) & set('aeiou')) == 0:\n        return ''\n\n    # check if the first char is a vowel\n    if word[0] in 'aeiou':\n        return ''\n\n    # check if the last char is a vowel\n    if word[-1] in 'aeiou':\n        return ''\n\n    # get the last consonant\n    for i in"
    },
    {
      "rank": 81,
      "score": 2.970475850152063,
      "candidate": "vowels = 'AEIOU'\n    last_vowel_index = 0\n    for i in range(len(word)-1, 0, -1):\n        if word[i] in vowels:\n            last_vowel_index = i\n            break\n\n    for i in range(last_vowel_index, 0, -1):\n        if word[i] in vowels:\n            if (word[i] == 'A' or word[i] == 'U' or word[i] == 'O') and (word[i-1] == 'A' or word[i-1] == 'U' or word[i-1] == 'O'):\n                continue\n            elif word[i] == word[i-1]:\n                continue\n            else:\n                return word[i]\n\n    return ''\n\nif __name__ == '__main__':\n    print(\"Example:\")\n    print(get_closest_vowel(\"yogurt\"))\n\n    # These \"asserts\" are used for self-checking and not for an auto-testing\n    assert get_closest_vowel(\"yogurt\") == \"u\"\n    assert get_closest_vowel(\"easter\") == \"a\"\n    assert get_closest_vowel(\"distance\") == \"s\"\n    assert get_closest_vowel(\"act\") == \"\"\n    assert get_closest_vowel(\"france\") == \"n\"\n    assert get_closest_vowel(\"happy\") == \"p\"\n    assert get_closest_vowel(\"umbrella\") == \"a\"\n    assert get_closest_vowel(\"rhythm\") == \"y\"\n    assert get_closest_vowel(\"zombie\") == \"\"\n    assert get_closest_vowel(\"Mozart\") == \"a\"\n    assert get_closest_vowel(\"kissed\") == \"s\"\n    assert get_closest_vowel(\"cheese\") == \"\"\n    assert get_closest_vowel(\"easily\") == \"i\"\n    print(\"Coding complete? Click 'Check' to earn cool rewards!\")"
    },
    {
      "rank": 82,
      "score": 2.9074317168005206,
      "candidate": "vowels = \"aeiouAEIOU\"\n    for i in range(len(word)-1, 0, -1):\n        if word[i] in vowels and word[i-1] not in vowels:\n            return word[i]\n    return \"\"\n\n\nif __name__ == '__main__':\n    print(\"Example:\")\n    print(get_closest_vowel(\"yogurt\"))\n\n    # These \"asserts\" are used for self-checking and not for an auto-testing\n    assert get_closest_vowel(\"yogurt\") == \"u\"\n    assert get_closest_vowel(\"FULL\") == \"U\"\n    assert get_closest_vowel(\"candy\") == \"a\"\n    assert get_closest_vowel(\"x\") == \"\"\n    assert get_closest_vowel(\"Tryhard\") == \"a\"\n    print(\"Coding complete? Click 'Check' to earn cool rewards!\")"
    },
    {
      "rank": 83,
      "score": 2.877406986308994,
      "candidate": "vowels = 'aeiou'\n    word = word.lower()\n    for i in range(len(word)-1, -1, -1):\n        if word[i] in vowels:\n            for j in range(i, len(word)):\n                if word[j] in vowels:\n                    return word[j]\n    return ''\n\n\ndef get_closest_vowel_2(word):\n    \"\"\"You are given a word. Your task is to find the closest vowel that stands between \n    two consonants from the right side of the word (case sensitive).\n    \n    Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n    find any vowel met the above condition. \n\n    You may assume that the given string contains English letter only.\n\n    Example:\n    get_closest_vowel(\"yogurt\") ==> \"u\"\n    get_closest_vowel(\"FULL\") ==> \"U\"\n    get_closest_vowel(\"quick\") ==> \"\"\n    get_closest_vowel(\"ab\") ==> \"\"\n    \"\"\"\n    vowels = 'aeiou'\n    word = word.lower()\n    for i in range(len(word)-1, -1, -1):\n        if word[i] in vowels:\n            for j in range(i, len(word)):\n                if word[j] in vowels:\n                    return word[j]\n    return ''\n\n\nif __name__ == '__main__':\n    print(get_closest_vowel(\"yogurt\")) # \"u\"\n    print(get_closest_vowel(\"FULL\")) # \"U\"\n    print(get_closest_vowel(\"quick\")) # \"\"\n    print(get_closest_vowel(\"ab\")) # \"\"\n    print(get_closest_vowel(\"abcdefghijklmnopqrstuvwxyz\")) # \"y\"\n    print(get_closest_vowel(\"abcdefghijklmnopqrstuvwxyZ\")) # \"y\"\n    print(get_closest_vowel(\"ABCDEFGHI"
    },
    {
      "rank": 84,
      "score": 2.8421162650293104,
      "candidate": "vowels = 'aeiou'\n    vowel = ''\n    for i in range(len(word)-2, -1, -1):\n        if word[i] in vowels:\n            vowel = word[i]\n            break\n    if vowel:\n        for i in range(len(word)-1, -1, -1):\n            if word[i] in vowels:\n                return word[i]\n    return ''\n\n\nif __name__ == '__main__':\n    print(\"Example:\")\n    print(get_closest_vowel(\"yogurt\"))\n\n    # These \"asserts\" are used for self-checking and not for an auto-testing\n    assert get_closest_vowel(\"yogurt\") == \"u\"\n    assert get_closest_vowel(\"FULL\") == \"U\"\n    assert get_closest_vowel(\"fast\") == \"\"\n    assert get_closest_vowel(\"ab\") == \"\"\n    print(\"Coding complete? Click 'Check' to earn cool rewards!\")"
    },
    {
      "rank": 85,
      "score": 2.8392356572158155,
      "candidate": "vowels = \"AEIOUaeiou\"\n    word = word.upper()\n    if len(word) < 3:\n        return \"\"\n    for i in range(len(word)-2,0,-1):\n        if word[i] in vowels:\n            if word[i+1] in vowels:\n                return word[i]\n    return \"\"\n\n\nif __name__ == '__main__':\n    print(\"Example:\")\n    print(get_closest_vowel(\"yogurt\"))\n\n    # These \"asserts\" are used for self-checking and not for an auto-testing\n    assert get_closest_vowel(\"yogurt\") == \"u\"\n    assert get_closest_vowel(\"coffee\") == \"i\"\n    assert get_closest_vowel(\"fast\") == \"a\"\n    assert get_closest_vowel(\"diploma\") == \"o\"\n    assert get_closest_vowel(\"vacation\") == \"a\"\n    assert get_closest_vowel(\"accountant\") == \"a\"\n    assert get_closest_vowel(\"container\") == \"e\"\n    assert get_closest_vowel(\"cable\") == \"a\"\n    assert get_closest_vowel(\"through\") == \"a\"\n    assert get_closest_vowel(\"dough\") == \"o\"\n    assert get_closest_vowel(\"alphabet\") == \"o\"\n    assert get_closest_vowel(\"vehicle\") == \"e\"\n    assert get_closest_vowel(\"vehicle\") == \"e\"\n    assert get_closest_vowel(\"gym\") == \"i\"\n    assert get_closest_vowel(\"gym\") == \"i\"\n    assert get_closest_vowel(\"eight\") == \"i\"\n    assert get_closest_vowel(\"eight\") == \"i\"\n    assert get_closest_vowel(\"quiz\") == \"i\"\n    assert get_closest_vowel(\"quiz\") == \"i\"\n    assert get_closest_vowel(\"adjust\") == \"a\""
    },
    {
      "rank": 86,
      "score": 2.811138103906487,
      "candidate": "vowels = 'AEIOUaeiou'\n    for i in range(len(word)-1, 0, -1):\n        if word[i] in vowels:\n            for j in range(i, 0, -1):\n                if word[j] in vowels:\n                    return word[j]\n    return ''\n\n\nif __name__ == '__main__':\n    print(\"Example:\")\n    print(get_closest_vowel(\"yogurt\"))\n\n    # These \"asserts\" are used for self-checking and not for an auto-testing\n    assert get_closest_vowel(\"yogurt\") == \"u\"\n    assert get_closest_vowel(\"Yogurt\") == \"u\"\n    assert get_closest_vowel(\"gym\") == \"\"\n    assert get_closest_vowel(\"aeroplane\") == \"e\"\n    assert get_closest_vowel(\"vacation\") == \"a\"\n    assert get_closest_vowel(\"bicycle\") == \"\"\n    assert get_closest_vowel(\"Aeroplane\") == \"e\"\n    print(\"Coding complete? Click 'Check' to earn cool rewards!\")"
    },
    {
      "rank": 87,
      "score": 2.8099987459468903,
      "candidate": "vowels = \"AEIOUaeiou\"\n    vowel_index = -1\n    vowel_index_next = -1\n    for i in range(len(word)-1, -1, -1):\n        if word[i] in vowels:\n            vowel_index = i\n            break\n    for i in range(len(word)-1, -1, -1):\n        if word[i] in vowels:\n            vowel_index_next = i\n            break\n    if vowel_index == -1 or vowel_index_next == -1 or vowel_index_next <= vowel_index:\n        return \"\"\n    return word[vowel_index_next]\n\ndef test_function():\n    assert get_closest_vowel(\"yogurt\") == \"u\"\n    assert get_closest_vowel(\"FULL\") == \"U\"\n    assert get_closest_vowel(\"quick\") == \"\"\n    assert get_closest_vowel(\"ab\") == \"\"\n    assert get_closest_vowel(\"ABCabc\") == \"a\"\n    assert get_closest_vowel(\"AaBbCc\") == \"a\"\n    assert get_closest_vowel(\"AaBbCcDdEeFfGgHhIiJjKkLlMmNnOoPpQqRrSsTtUuVvWwXxYyZz\") == \"a\"\n    assert get_closest_vowel(\"abcde\") == \"a\"\n    assert get_closest_vowel(\"ABCDE\") == \"A\"\n    assert get_closest_vowel(\"abcdefghijklmnopqrstuvwxyz\") == \"a\"\n    assert get_closest_vowel(\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\") == \"A\"\n\nif __name__ == '__main__':\n    test_function()"
    },
    {
      "rank": 88,
      "score": 2.8090508010361948,
      "candidate": "pass\n\n\ndef get_closest_vowel2(word):\n    \"\"\"You are given a word. Your task is to find the closest vowel that stands between \n    two consonants from the right side of the word (case sensitive).\n    \n    Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n    find any vowel met the above condition. \n\n    You may assume that the given string contains English letter only.\n\n    Example:\n    get_closest_vowel(\"yogurt\") ==> \"u\"\n    get_closest_vowel(\"FULL\") ==> \"U\"\n    get_closest_vowel(\"quick\") ==> \"\"\n    get_closest_vowel(\"ab\") ==> \"\"\n    \"\"\"\n    vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    word = word[::-1]\n    for i in range(len(word)):\n        if word[i] in vowels and word[i+1].isalpha() and word[i+2].isalpha():\n            return word[i]\n    return \"\"\n\n\ndef get_closest_vowel3(word):\n    \"\"\"You are given a word. Your task is to find the closest vowel that stands between \n    two consonants from the right side of the word (case sensitive).\n    \n    Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n    find any vowel met the above condition. \n\n    You may assume that the given string contains English letter only.\n\n    Example:\n    get_closest_vowel(\"yogurt\") ==> \"u\"\n    get_closest_vowel(\"FULL\") ==> \"U\"\n    get_closest_vowel(\"quick\") ==> \"\"\n    get_closest_vowel(\"ab\") ==> \"\"\n    \"\"\"\n    vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    word = word[::-1]\n    for i in range(len(word)):\n        if word[i] in vowels and word[i+1].isalpha() and word[i+2].isalpha"
    },
    {
      "rank": 89,
      "score": 2.7875092105078045,
      "candidate": "pass\n\ndef is_prime(n):\n    \"\"\"You are given a number n. You need to find out whether this number is prime or not. \n    Print \"YES\" (without quotes) if it is, \"NO\" (without quotes) if it's not. \n    \n    Example:\n    is_prime(13) ==> \"YES\"\n    is_prime(14) ==> \"NO\"\n    is_prime(4) ==> \"NO\"\n    is_prime(5) ==> \"YES\"\n    is_prime(2) ==> \"YES\"\n    \"\"\"\n    pass\n\ndef count_digits(n):\n    \"\"\"You are given a number n. Print the count of all digits that occur in it. \n    Assume that n is a positive integer. \n\n    Example:\n    count_digits(123) ==> 3\n    count_digits(12345) ==> 4\n    count_digits(1234567) ==> 5\n    count_digits(12345678) ==> 6\n    \"\"\"\n    pass\n\ndef count_vowels(s):\n    \"\"\"You are given a string s. Count and print the number of vowels in s. \n    Vowels are: 'a', 'e', 'i', 'o', 'u'.\n\n    Example:\n    count_vowels(\"abracadabra\") ==> 5\n    count_vowels(\"aabbccddeeffgg\") ==> 3\n    count_vowels(\"aiou\") ==> 2\n    count_vowels(\"a\") ==> 1\n    \"\"\"\n    pass\n\ndef count_letters(s):\n    \"\"\"You are given a string s. Count and print the number of letters in s. \n    Assume that s is a string that contains only lowercase English characters. \n\n    Example:\n    count_letters(\"abracadabra\") ==> 5\n    count_letters(\"aabbccddeeffgg\") ==> 9\n    count_letters(\"aiou\") ==> 4\n    count_letters(\"a\") ==> 1\n    \"\"\"\n    pass\n\ndef is_v"
    },
    {
      "rank": 90,
      "score": 2.7533002889859475,
      "candidate": "# Your code here\n    # 1. remove all vowels\n    word_without_vowels = ''.join([x for x in word if x.lower() not in 'aeiou'])\n    # 2. reverse the string\n    reverse_word = word_without_vowels[::-1]\n    # 3. find the closest vowel\n    for i in range(len(reverse_word) - 1):\n        if reverse_word[i] in 'aeiou':\n            return reverse_word[i]\n    return ''\n\n\nif __name__ == '__main__':\n    print(\"Example:\")\n    print(get_closest_vowel(\"yogurt\"))\n\n    # These \"asserts\" are used for self-checking and not for an auto-testing\n    assert get_closest_vowel(\"yogurt\") == \"u\"\n    assert get_closest_vowel(\"eat\") == \"a\"\n    assert get_closest_vowel(\"quiz\") == \"u\"\n    assert get_closest_vowel(\"distract\") == \"a\"\n    assert get_closest_vowel(\"glove\") == \"o\"\n    assert get_closest_vowel(\"bluff\") == \"u\"\n    assert get_closest_vowel(\"fruity\") == \"i\"\n    assert get_closest_vowel(\"fly\") == \"\"\n    assert get_closest_vowel(\"ab\") == \"\"\n    print(\"Coding complete? Click 'Check' to earn cool rewards!\")"
    },
    {
      "rank": 91,
      "score": 2.722461979874557,
      "candidate": "# your code here\n    # 1. split the word into consonant and vowel list\n    consonant_list = []\n    vowel_list = []\n    for i in range(len(word)):\n        if word[i].isalpha() and word[i].isupper():\n            if word[i].isupper():\n                consonant_list.append(word[i])\n            else:\n                vowel_list.append(word[i])\n        else:\n            continue\n    # 2. find the closest vowel\n    if len(consonant_list) > 1:\n        return vowel_list[len(consonant_list) - 2]\n    else:\n        return \"\"\n\n\nif __name__ == \"__main__\":\n    print(get_closest_vowel(\"yogurt\"))\n    print(get_closest_vowel(\"FULL\"))\n    print(get_closest_vowel(\"quick\"))\n    print(get_closest_vowel(\"ab\"))"
    },
    {
      "rank": 92,
      "score": 2.668517622813793,
      "candidate": "vowels = 'AEIOUY'\n    result = ''\n\n    for i in range(len(word)-1, -1, -1):\n        if word[i] in vowels:\n            result = word[i]\n            break\n\n    return result\n\n\ndef get_closest_vowel_v2(word):\n    \"\"\"Another way to do it.\n    \"\"\"\n    vowels = 'AEIOUY'\n    result = ''\n\n    for i in range(len(word)-1, -1, -1):\n        if word[i] in vowels and word[i+1] not in vowels:\n            result = word[i]\n            break\n\n    return result\n\n\ndef test_function():\n    assert get_closest_vowel(\"yogurt\") == \"u\"\n    assert get_closest_vowel(\"FULL\") == \"U\"\n    assert get_closest_vowel(\"quick\") == \"\"\n    assert get_closest_vowel(\"ab\") == \"\"\n    assert get_closest_vowel(\"ABCabc\") == \"a\"\n    assert get_closest_vowel(\"xyzXYZ\") == \"Y\"\n    assert get_closest_vowel(\"code\") == \"\"\n    assert get_closest_vowel(\"coder\") == \"o\"\n    assert get_closest_vowel(\"dog\") == \"\"\n    assert get_closest_vowel(\"fly\") == \"\"\n    assert get_closest_vowel(\"oak\") == \"\"\n    assert get_closest_vowel(\"zap\") == \"\"\n    assert get_closest_vowel(\"pizza\") == \"a\"\n    assert get_closest_vowel(\"a\") == \"\"\n    assert get_closest_vowel(\"b\") == \"\"\n\n\nif __name__ == '__main__':\n    test_function()"
    },
    {
      "rank": 93,
      "score": 2.5847392406628864,
      "candidate": "vowels = 'aeiou'\n    for i in range(len(word) - 1, -1, -1):\n        if word[i].lower() in vowels:\n            for j in range(i - 1, -1, -1):\n                if word[j].lower() in vowels:\n                    return word[i]\n    return ''\n\n\nif __name__ == '__main__':\n    print(\"Example:\")\n    print(get_closest_vowel(\"yogurt\"))\n\n    # These \"asserts\" are used for self-checking and not for an auto-testing\n    assert get_closest_vowel(\"yogurt\") == \"u\"\n    assert get_closest_vowel(\"FULL\") == \"U\"\n    assert get_closest_vowel(\"full\") == \"U\"\n    assert get_closest_vowel(\"alphabet\") == \"i\"\n    assert get_closest_vowel(\"cool\") == \"\"\n    assert get_closest_vowel(\"\") == \"\"\n    print(\"Coding complete? Click 'Check' to earn cool rewards!\")"
    },
    {
      "rank": 94,
      "score": 2.566338519128081,
      "candidate": "vowels = \"aeiou\"\n    vowel_index = []\n    for i in range(len(word)-1,0,-1):\n        if word[i] in vowels:\n            vowel_index.append(i)\n    if len(vowel_index) == 0:\n        return \"\"\n    else:\n        vowel_index = sorted(vowel_index,reverse=True)\n        for i in range(len(vowel_index)-1):\n            if vowel_index[i] == vowel_index[i+1]-1:\n                return word[vowel_index[i]]\n        return word[vowel_index[0]]\n\ndef test_function(test_case):\n    string = test_case[0]\n    solution = test_case[1]\n    output = get_closest_vowel(string)\n    if output == solution:\n        print(\"Pass\")\n    else:\n        print(\"Fail\")\n\nstring = \"yogurt\"\nsolution = \"u\"\ntest_case = [string, solution]\ntest_function(test_case)\n\nstring = \"FULL\"\nsolution = \"U\"\ntest_case = [string, solution]\ntest_function(test_case)\n\nstring = \"quick\"\nsolution = \"\"\ntest_case = [string, solution]\ntest_function(test_case)\n\nstring = \"ab\"\nsolution = \"\"\ntest_case = [string, solution]\ntest_function(test_case)\n\nstring = \"qwerty\"\nsolution = \"w\"\ntest_case = [string, solution]\ntest_function(test_case)"
    },
    {
      "rank": 95,
      "score": 2.5464026606575283,
      "candidate": "# My and best solution\n    # return min(filter(lambda x: x.isalpha(), word), key=word.rindex)\n    # return min(filter(lambda x: x in 'aeiou', word), key=word.rindex, default='')\n    \n    # Other creative solutions\n    vowels = 'aeiou'\n    for i in range(len(word)-1, 0, -1):\n        if word[i] in vowels and word[i-1] not in vowels:\n            return word[i]\n    return ''\n\n\ndef get_closest_vowel2(word):\n    for i in range(len(word)-1, 0, -1):\n        if word[i] in 'aeiou' and word[i-1] not in 'aeiou':\n            return word[i]\n    return ''\n\n\ndef get_closest_vowel3(word):\n    for i in range(len(word)-1, 0, -1):\n        if word[i] in 'aeiou':\n            if word[i-1] in 'aeiou':\n                continue\n            return word[i]\n    return ''\n\n\ndef get_closest_vowel4(word):\n    for i in range(len(word)-1, 0, -1):\n        if word[i] in 'aeiou':\n            if word[i-1] in 'aeiou':\n                continue\n            return word[i]\n    return ''\n\n\ndef get_closest_vowel5(word):\n    return min(filter(lambda x: x in 'aeiou', word), key=word.rindex, default='')\n\n\ndef get_closest_vowel6(word):\n    vowels = 'aeiou'\n    for i in range(len(word)-1, 0, -1):\n        if word[i] in vowels and word[i-1] not in vowels:\n            return word[i]\n    return ''\n\n\ndef get_closest_vowel7(word):\n    vowels = 'aeiou'\n    for"
    },
    {
      "rank": 96,
      "score": 2.415853243652483,
      "candidate": "# Your code here\n    vowels = \"AEIOU\"\n    if len(word) <= 2:\n        return \"\"\n    for i in range(len(word)-1, 1, -1):\n        if word[i] in vowels:\n            if word[i-1].isupper() and word[i+1].isupper():\n                continue\n            return word[i]\n    return \"\"\n\n\nif __name__ == '__main__':\n    print(\"Example:\")\n    print(get_closest_vowel(\"yogurt\"))\n\n    # These \"asserts\" are used for self-checking and not for an auto-testing\n    assert get_closest_vowel(\"yogurt\") == \"u\"\n    assert get_closest_vowel(\"eYe\") == \"i\"\n    assert get_closest_vowel(\"EYE\") == \"I\"\n    assert get_closest_vowel(\"eYE\") == \"I\"\n    assert get_closest_vowel(\"ab\") == \"\"\n    assert get_closest_vowel(\"abc\") == \"\"\n    assert get_closest_vowel(\"google\") == \"o\"\n    assert get_closest_vowel(\"abcde\") == \"\"\n    print(\"Coding complete? Click 'Check' to earn cool rewards!\")"
    },
    {
      "rank": 97,
      "score": 2.3999588712658313,
      "candidate": "vowels = \"AEIOU\"\n    vowel_indices = [i for i, ch in enumerate(word) if ch in vowels]\n    if len(vowel_indices) < 2:\n        return \"\"\n    # get the indices of the last two vowels\n    last_two_vowels_indices = [vowel_indices[-1], vowel_indices[-2]]\n    # check the indices of the last two vowels\n    for i in last_two_vowels_indices:\n        for j in last_two_vowels_indices:\n            if i < j:\n                return word[i]\n    return \"\"\n\ndef test_get_closest_vowel():\n    assert get_closest_vowel(\"yogurt\") == \"u\"\n    assert get_closest_vowel(\"FULL\") == \"U\"\n    assert get_closest_vowel(\"quick\") == \"\"\n    assert get_closest_vowel(\"ab\") == \"\"\n    assert get_closest_vowel(\"happy\") == \"i\"\n    assert get_closest_vowel(\"abcde\") == \"\"\n    assert get_closest_vowel(\"aBcDe\") == \"\"\n    assert get_closest_vowel(\"abcdef\") == \"i\"\n    assert get_closest_vowel(\"ABCDEF\") == \"I\"\n\nif __name__ == \"__main__\":\n    test_get_closest_vowel()"
    },
    {
      "rank": 98,
      "score": 2.393805983949355,
      "candidate": "word = word.lower()\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    for i in range(len(word)-1, 0, -1):\n        if word[i] in vowels:\n            for j in range(i-1, 0, -1):\n                if word[j] not in vowels:\n                    return word[j]\n    return \"\"\n\n\ndef test_get_closest_vowel():\n    assert get_closest_vowel(\"yogurt\") == \"u\"\n    assert get_closest_vowel(\"FULL\") == \"U\"\n    assert get_closest_vowel(\"quick\") == \"\"\n    assert get_closest_vowel(\"ab\") == \"\"\n    assert get_closest_vowel(\"ABC\") == \"\"\n    assert get_closest_vowel(\"aBc\") == \"c\"\n    assert get_closest_vowel(\"aBcD\") == \"c\"\n    assert get_closest_vowel(\"aBcDe\") == \"c\"\n    assert get_closest_vowel(\"aBcDf\") == \"\"\n    assert get_closest_vowel(\"aBcDgf\") == \"\"\n    assert get_closest_vowel(\"aBcDgfE\") == \"\"\n    assert get_closest_vowel(\"aBcDgfEe\") == \"e\"\n    assert get_closest_vowel(\"aBcDgfEee\") == \"e\"\n    assert get_closest_vowel(\"aBcDgfEeeE\") == \"e\"\n    assert get_closest_vowel(\"aBcDgfEeeEe\") == \"e\"\n    assert get_closest_vowel(\"aBcDgfEeeEee\") == \"e\"\n    assert get_closest_vowel(\"aBcDgfEeeEeeE\") == \"\"\n    assert get_closest_vowel(\"aBcDgfEeeEeeEe\") == \"\"\n    assert get_closest_vowel(\"aBcDgfEeeE"
    },
    {
      "rank": 99,
      "score": 2.277153536301279,
      "candidate": "# Your code here\n    pass\n\nif __name__ == '__main__':\n    print(\"Example:\")\n    print(get_closest_vowel(\"yogurt\"))\n\n    # These \"asserts\" are used for self-checking and not for an auto-testing\n    assert get_closest_vowel(\"yogurt\") == \"u\"\n    assert get_closest_vowel(\"FULL\") == \"U\"\n    assert get_closest_vowel(\"quick\") == \"\"\n    assert get_closest_vowel(\"ab\") == \"\"\n    print(\"Coding complete? Click 'Check' to earn cool rewards!\")"
    },
    {
      "rank": 100,
      "score": 2.215555099690303,
      "candidate": "pass\n\ndef get_closest_vowel_2(word):\n    \"\"\"You are given a word. Your task is to find the closest vowel that stands between \n    two consonants from the right side of the word (case sensitive).\n    \n    Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n    find any vowel met the above condition. \n\n    You may assume that the given string contains English letter only.\n\n    Example:\n    get_closest_vowel(\"yogurt\") ==> \"u\"\n    get_closest_vowel(\"FULL\") ==> \"U\"\n    get_closest_vowel(\"quick\") ==> \"\"\n    get_closest_vowel(\"ab\") ==> \"\"\n    \"\"\"\n    pass"
    }
  ]
}