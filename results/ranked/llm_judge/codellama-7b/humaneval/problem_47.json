{
  "timestamp": "2025-09-14T21:25:50.508420",
  "method": "improved_llm_judge",
  "judge_model": "codellama/CodeLlama-7b-Python-hf",
  "target_model": "codellama-7b",
  "dataset": "humaneval",
  "problem_number": 47,
  "total_candidates": 100,
  "results": [
    {
      "rank": 1,
      "score": 10.0,
      "candidate": "l = sorted(l)\n    if len(l) % 2 == 1:\n        return l[len(l) // 2]\n    else:\n        return (l[len(l) // 2] + l[len(l) // 2 - 1]) / 2\n\n\ndef main():\n    import doctest\n    doctest.testmod()\n    print(median([3, 1, 2, 4, 5]))\n    print(median([-10, 4, 6, 1000, 10, 20]))\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 2,
      "score": 10.0,
      "candidate": "l = sorted(l)\n    if len(l) % 2 == 1:\n        return l[len(l) // 2]\n    else:\n        return (l[len(l) // 2] + l[len(l) // 2 - 1]) / 2.0\n\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 3,
      "score": 10.0,
      "candidate": "l = sorted(l)\n    length = len(l)\n    if length % 2 == 1:\n        return l[length // 2]\n    else:\n        return (l[length // 2] + l[length // 2 - 1]) / 2.0\n\n\ndef test_median():\n    assert median([3, 1, 2, 4, 5]) == 3\n    assert median([-10, 4, 6, 1000, 10, 20]) == 15.0\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 4,
      "score": 10.0,
      "candidate": "l = sorted(l)\n    n = len(l)\n    if n == 0:\n        return None\n    if n % 2 == 0:\n        return (l[n // 2 - 1] + l[n // 2]) / 2\n    else:\n        return l[n // 2]\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 5,
      "score": 10.0,
      "candidate": "l = sorted(l)\n    if len(l) % 2 == 1:\n        return l[len(l) // 2]\n    else:\n        return (l[len(l) // 2] + l[len(l) // 2 - 1]) / 2.0\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 6,
      "score": 10.0,
      "candidate": "l = sorted(l)\n    n = len(l)\n    if n % 2 == 1:\n        return l[n//2]\n    else:\n        return (l[n//2 - 1] + l[n//2]) / 2\n\n\ndef main():\n    import doctest\n    doctest.testmod()\n    print(\"Bye\")\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 7,
      "score": 10.0,
      "candidate": "# sort the list\n    l.sort()\n\n    # get the middle element\n    middle = len(l) // 2\n\n    # check if there is an odd number of elements\n    if len(l) % 2 == 0:\n        # if there is an even number of elements, return the average of the middle two\n        return (l[middle - 1] + l[middle]) / 2\n    else:\n        # if there is an odd number of elements, return the middle element\n        return l[middle]\n\n\ndef main():\n    print(median([3, 1, 2, 4, 5]))\n    print(median([-10, 4, 6, 1000, 10, 20]))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 8,
      "score": 10.0,
      "candidate": "l.sort()\n    return l[len(l) // 2]\n\n\ndef main():\n    print(median([3, 1, 2, 4, 5]))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 9,
      "score": 10.0,
      "candidate": "l.sort()\n    n = len(l)\n    if n % 2 == 1:\n        return l[n // 2]\n    else:\n        return (l[n // 2 - 1] + l[n // 2]) / 2.0\n\n\ndef main():\n    import doctest\n    doctest.testmod()\n\n    l = [3, 1, 2, 4, 5]\n    print(median(l))\n\n    l = [-10, 4, 6, 1000, 10, 20]\n    print(median(l))\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 10,
      "score": 10.0,
      "candidate": "l = sorted(l)\n    n = len(l)\n    if n % 2 == 1:\n        return l[n // 2]\n    else:\n        return (l[n // 2] + l[n // 2 - 1]) / 2\n\n\ndef main():\n    import doctest\n    doctest.testmod()\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 11,
      "score": 10.0,
      "candidate": "l = sorted(l)\n    n = len(l)\n    if n % 2 == 0:\n        return (l[n // 2 - 1] + l[n // 2]) / 2\n    else:\n        return l[n // 2]\n\n\ndef main():\n    import doctest\n    doctest.testmod()\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 12,
      "score": 10.0,
      "candidate": "if len(l) == 0:\n        return None\n    l.sort()\n    if len(l) % 2 == 0:\n        return (l[len(l) // 2] + l[len(l) // 2 - 1]) / 2\n    else:\n        return l[len(l) // 2]\n\n\ndef main():\n    pass\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 13,
      "score": 10.0,
      "candidate": "l = sorted(l)\n    length = len(l)\n    if length % 2 == 0:\n        return (l[length // 2] + l[length // 2 - 1]) / 2\n    else:\n        return l[length // 2]\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 14,
      "score": 10.0,
      "candidate": "l = sorted(l)\n    size = len(l)\n    if size % 2 == 0:\n        return (l[size // 2] + l[size // 2 - 1]) / 2\n    else:\n        return l[size // 2]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 15,
      "score": 10.0,
      "candidate": "l = sorted(l)\n    if len(l) % 2 == 0:\n        return (l[len(l) // 2] + l[len(l) // 2 - 1]) / 2\n    else:\n        return l[len(l) // 2]\n\n\ndef main():\n    l = [float(input()) for _ in range(int(input()))]\n    print(median(l))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 16,
      "score": 10.0,
      "candidate": "l.sort()\n    l_len = len(l)\n    if l_len % 2 == 0:\n        return (l[int(l_len / 2)] + l[int(l_len / 2) - 1]) / 2\n    else:\n        return l[int(l_len / 2)]\n\n\ndef main():\n    l = list(map(int, input().split()))\n    print(median(l))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 17,
      "score": 10.0,
      "candidate": "l.sort()\n    length = len(l)\n    if length % 2 == 1:\n        return l[length // 2]\n    else:\n        return (l[length // 2] + l[length // 2 - 1]) / 2.0\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 18,
      "score": 10.0,
      "candidate": "l = sorted(l)\n    n = len(l)\n    if n % 2 == 1:\n        return l[n // 2]\n    else:\n        return (l[n // 2] + l[n // 2 - 1]) / 2.0\n\n\ndef main():\n    try:\n        l = [float(x) for x in input('Enter list of numbers: ').split()]\n    except ValueError:\n        print('Non-numeric data found.')\n        return\n    print(median(l))\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 19,
      "score": 10.0,
      "candidate": "l = sorted(l)\n    size = len(l)\n    if size % 2 == 1:\n        return l[size // 2]\n    else:\n        return (l[size // 2] + l[size // 2 - 1]) / 2\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 20,
      "score": 10.0,
      "candidate": "l.sort()\n    n = len(l)\n    if n % 2 == 1:\n        return l[n//2]\n    else:\n        return (l[n//2] + l[n//2 - 1])/2.0\n\n\ndef test_median():\n    import doctest\n    doctest.testmod()\n\n\nif __name__ == \"__main__\":\n    test_median()\n    print(median([3, 1, 2, 4, 5]))\n    print(median([-10, 4, 6, 1000, 10, 20]))"
    },
    {
      "rank": 21,
      "score": 10.0,
      "candidate": "# sort the list\n    l.sort()\n    # if list length is odd return middle element\n    if len(l) % 2 != 0:\n        return l[len(l) // 2]\n    # else return the mean of the middle 2 elements\n    else:\n        return (l[len(l) // 2] + l[len(l) // 2 - 1]) / 2.0\n\n\ndef median2(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median2([3, 1, 2, 4, 5])\n    3\n    >>> median2([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    # sort the list\n    l.sort()\n    # if list length is odd return middle element\n    if len(l) % 2 != 0:\n        return l[len(l) // 2]\n    # else return the mean of the middle 2 elements\n    else:\n        return (l[len(l) // 2] + l[len(l) // 2 - 1]) / 2.0\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 22,
      "score": 10.0,
      "candidate": "# Your code here\n    l.sort()\n    return l[int(len(l)/2)]\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 23,
      "score": 10.0,
      "candidate": "l = sorted(l)\n    if len(l) % 2 == 0:\n        return (l[len(l) // 2] + l[len(l) // 2 - 1]) / 2\n    else:\n        return l[len(l) // 2]\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 24,
      "score": 10.0,
      "candidate": "l = sorted(l)\n    if len(l) % 2 == 1:\n        return l[len(l) // 2]\n    else:\n        return (l[len(l) // 2] + l[len(l) // 2 - 1]) / 2\n\n\ndef median_sorted(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median_sorted([3, 1, 2, 4, 5])\n    3\n    >>> median_sorted([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) % 2 == 1:\n        return l[len(l) // 2]\n    else:\n        return (l[len(l) // 2] + l[len(l) // 2 - 1]) / 2\n\n\ndef median_sorted_rec(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median_sorted_rec([3, 1, 2, 4, 5])\n    3\n    >>> median_sorted_rec([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    return _median_sorted_rec(l, 0, len(l) - 1)\n\n\ndef _median_sorted_rec(l, left, right):\n    if left == right:\n        return l[left]\n    if left + 1 == right:\n        return (l[left] + l[right]) / 2\n\n    mid = (left + right) // 2\n    if l[mid] > l[mid + 1]:\n        return _median_sorted_rec(l, left, mid)\n    else:\n        return _median_sorted_rec(l, mid + 1, right)"
    },
    {
      "rank": 25,
      "score": 10.0,
      "candidate": "l.sort()\n    size = len(l)\n    mid = size // 2\n    if size % 2 == 1:\n        return l[mid]\n    return (l[mid - 1] + l[mid]) / 2.0\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 26,
      "score": 10.0,
      "candidate": "l = sorted(l)\n    length = len(l)\n    if length % 2 == 1:\n        return l[length // 2]\n    else:\n        return (l[length // 2] + l[length // 2 - 1]) / 2\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 27,
      "score": 10.0,
      "candidate": "l = sorted(l)\n    size = len(l)\n    if size % 2 == 1:\n        return l[size // 2]\n    else:\n        return (l[size // 2] + l[size // 2 - 1]) / 2\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 28,
      "score": 10.0,
      "candidate": "l = sorted(l)\n    n = len(l)\n    if n % 2 == 1:\n        return l[n // 2]\n    else:\n        return (l[n // 2 - 1] + l[n // 2]) / 2\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 29,
      "score": 10.0,
      "candidate": "l = sorted(l)\n    n = len(l)\n    mid = n // 2\n    if n % 2 == 1:\n        return l[mid]\n    else:\n        return (l[mid - 1] + l[mid]) / 2\n\n\ndef maximum_subarray(l: list):\n    \"\"\"Return the maximum sum of a subarray of l.\n    >>> maximum_subarray([3, 1, 2, 4, 5])\n    13\n    >>> maximum_subarray([-10, 4, 6, 1000, 10, 20])\n    1060\n    \"\"\"\n    sum = 0\n    max_sum = 0\n    for i in l:\n        sum = max(0, sum + i)\n        max_sum = max(sum, max_sum)\n    return max_sum\n\n\ndef get_largest_num(l: list):\n    \"\"\"Return the largest number in l.\n    >>> get_largest_num([3, 1, 2, 4, 5])\n    5\n    >>> get_largest_num([-10, 4, 6, 1000, 10, 20])\n    1000\n    \"\"\"\n    return max(l)\n\n\ndef get_smallest_num(l: list):\n    \"\"\"Return the smallest number in l.\n    >>> get_smallest_num([3, 1, 2, 4, 5])\n    1\n    >>> get_smallest_num([-10, 4, 6, 1000, 10, 20])\n    -10\n    \"\"\"\n    return min(l)\n\n\ndef is_even(n: int):\n    \"\"\"Return True if n is an even number.\n    >>> is_even(2)\n    True\n    >>> is_even(5)\n    False\n    \"\"\"\n    return n % 2 == 0\n\n\ndef is_odd(n: int):\n    \"\"\"Return True if n is an odd number.\n    >>> is_odd(2)\n    False"
    },
    {
      "rank": 30,
      "score": 10.0,
      "candidate": "\"*** YOUR CODE HERE ***\"\n    l = sorted(l)\n    if len(l) % 2 == 0:\n        return (l[int(len(l) / 2)] + l[int(len(l) / 2 - 1)]) / 2\n    else:\n        return l[int(len(l) / 2)]\n\n\ndef merge(left: list, right: list) -> list:\n    \"\"\"Merge sorted lists left and right by returning a new sorted list.\n\n    >>> a = [1, 2, 4]\n    >>> b = [3, 5]\n    >>> merge(a, b)\n    [1, 2, 3, 4, 5]\n    >>> c = [3, 4, 5, 6]\n    >>> merge(a, c)\n    [1, 2, 3, 3, 4, 4, 5, 5, 6]\n    >>> merge(c, a)\n    [1, 2, 3, 3, 4, 4, 5, 5, 6, 6]\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    if len(left) == 0:\n        return right\n    if len(right) == 0:\n        return left\n    if left[0] < right[0]:\n        return [left[0]] + merge(left[1:], right)\n    else:\n        return [right[0]] + merge(left, right[1:])\n\n\ndef merge_sort(lst: list) -> list:\n    \"\"\"Return a sorted copy of lst.\n\n    >>> merge_sort([5, 3, 2, 1, 4])\n    [1, 2, 3, 4, 5]\n    >>> merge_sort([])\n    []\n    >>> merge_sort([5, 4, 3, 2, 1])\n    [1, 2, 3, 4, 5]\n    >>> merge_sort([1, 2, 3, 4, 5])\n    [1, 2, 3,"
    },
    {
      "rank": 31,
      "score": 10.0,
      "candidate": "l.sort()\n    mid = len(l) // 2\n    if len(l) % 2 == 1:\n        return l[mid]\n    else:\n        return (l[mid] + l[mid - 1]) / 2.0\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 32,
      "score": 10.0,
      "candidate": "# Sort the list.\n    l.sort()\n    # Get the middle element.\n    middle_index = int(len(l) / 2)\n    if len(l) % 2 == 0:\n        # If the length of l is even, return the average of the two middle elements.\n        return (l[middle_index] + l[middle_index - 1]) / 2\n    else:\n        # If the length of l is odd, return the middle element.\n        return l[middle_index]\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 33,
      "score": 10.0,
      "candidate": "l = sorted(l)\n    if len(l) % 2 == 0:\n        return (l[len(l) // 2] + l[len(l) // 2 - 1]) / 2\n    else:\n        return l[len(l) // 2]\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 34,
      "score": 10.0,
      "candidate": "# Sort the list\n    l.sort()\n    # return median\n    if len(l) % 2 == 0:\n        return (l[(len(l) // 2) - 1] + l[len(l) // 2]) / 2.0\n    else:\n        return l[len(l) // 2]\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 35,
      "score": 10.0,
      "candidate": "\"*** YOUR CODE HERE ***\"\n    #sort the list\n    l.sort()\n    #check if the length is odd or even\n    if len(l) % 2 == 0:\n        #if it is even, then we take the average of the middle two elements\n        return (l[(len(l) // 2) - 1] + l[len(l) // 2]) / 2\n    else:\n        #if it is odd, then we return the middle element\n        return l[len(l) // 2]\n\n\ndef quantiles(l: list, p: int):\n    \"\"\"Return a list of p percentile values for elements in the list l.\n    >>> quantiles([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5)\n    [1, 3, 5, 7, 9]\n    >>> quantiles([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 10)\n    [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    >>> quantiles([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 9)\n    [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    >>> quantiles([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2)\n    [1, 2]\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    #sort the list\n    l.sort()\n    #check if the length is odd or even\n    if len(l) % 2 == 0:\n        #if it is even, then we return a list of the middle two elements\n        return [l[(len(l) // 2) - 1], l[len(l) // 2]]\n    else:\n        #if"
    },
    {
      "rank": 36,
      "score": 10.0,
      "candidate": "l = sorted(l)\n    # if the list is empty\n    if len(l) == 0:\n        return None\n    # if the list has an even number of elements\n    if len(l) % 2 == 0:\n        # return the average of the two middle elements\n        return (l[len(l) // 2] + l[len(l) // 2 - 1]) / 2\n    # if the list has an odd number of elements\n    else:\n        # return the middle element\n        return l[len(l) // 2]\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 37,
      "score": 10.0,
      "candidate": "# TODO: implement this method!\n    raise NotImplementedError\n\n\ndef main():\n    import doctest\n    doctest.testmod()\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 38,
      "score": 10.0,
      "candidate": "l = sorted(l)\n    if len(l) % 2 == 1:\n        return l[len(l) // 2]\n    else:\n        return (l[len(l) // 2 - 1] + l[len(l) // 2]) / 2\n\n\ndef main():\n    print(median([3, 1, 2, 4, 5]))\n    print(median([-10, 4, 6, 1000, 10, 20]))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 39,
      "score": 9.993251387631034,
      "candidate": "l = sorted(l)\n\n    if len(l) % 2 == 0:\n        return (l[len(l) // 2] + l[len(l) // 2 - 1]) / 2\n    else:\n        return l[len(l) // 2]\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 40,
      "score": 9.982086980445024,
      "candidate": "l = sorted(l)\n    size = len(l)\n    if size % 2 == 1:\n        return l[size // 2]\n    else:\n        return (l[size // 2] + l[size // 2 - 1]) / 2.0\n\n\ndef median_sorted(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median_sorted([3, 1, 2, 4, 5])\n    3\n    >>> median_sorted([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    size = len(l)\n    if size % 2 == 1:\n        return l[size // 2]\n    else:\n        return (l[size // 2] + l[size // 2 - 1]) / 2.0\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 41,
      "score": 9.963994939209833,
      "candidate": "l.sort()\n    mid = len(l) // 2\n    return (l[mid] + l[~mid]) / 2 if len(l) % 2 == 0 else l[mid]\n\n\ndef test_median():\n    assert median([3, 1, 2, 4, 5]) == 3\n    assert median([-10, 4, 6, 1000, 10, 20]) == 15.0\n    assert median([-10, 4, 6, 1000, 10, 20, 3]) == 7.0\n    assert median([-10, 4, 6, 1000, 10, 20, 3, 5, 7]) == 6.0\n    assert median([-10, 4, 6, 1000, 10, 20, 3, 5, 7, 1]) == 4.0\n    assert median([-10, 4, 6, 1000, 10, 20, 3, 5, 7, 1, 2]) == 4.5\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 42,
      "score": 9.94217585880588,
      "candidate": "length = len(l)\n    l.sort()\n    if length % 2 == 0:\n        return (l[length // 2] + l[length // 2 - 1]) / 2\n    else:\n        return l[length // 2]\n\n\ndef main():\n    import doctest\n    doctest.testmod()\n    l = [3, 1, 2, 4, 5]\n    print(median(l))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 43,
      "score": 9.930867849414408,
      "candidate": "l.sort()\n    n = len(l)\n    if n % 2 == 0:\n        return (l[n // 2] + l[n // 2 - 1]) / 2\n    return l[n // 2]\n\n\ndef main():\n    print(median([3, 1, 2, 4, 5]))\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 44,
      "score": 9.907170511668092,
      "candidate": "l = sorted(l)\n    length = len(l)\n    if length % 2 == 0:\n        return (l[length // 2 - 1] + l[length // 2]) / 2\n    else:\n        return l[length // 2]\n\n\ndef main():\n    print(median([3, 1, 2, 4, 5]))\n    print(median([-10, 4, 6, 1000, 10, 20]))\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()\n    main()"
    },
    {
      "rank": 45,
      "score": 9.890164056081243,
      "candidate": "l = sorted(l)\n    l_len = len(l)\n    if l_len % 2 == 0:\n        return (l[l_len // 2] + l[l_len // 2 - 1]) / 2.0\n    else:\n        return l[l_len // 2]"
    },
    {
      "rank": 46,
      "score": 9.887111849756732,
      "candidate": "l = sorted(l)\n    size = len(l)\n    if size % 2 == 1:\n        return l[size // 2]\n    else:\n        return (l[size // 2 - 1] + l[size // 2]) / 2\n\n\ndef main():\n    median([3, 1, 2, 4, 5])\n    median([-10, 4, 6, 1000, 10, 20])\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 47,
      "score": 9.88293152152541,
      "candidate": "l = sorted(l)\n    if len(l) % 2 == 0:\n        return (l[len(l)//2-1] + l[len(l)//2])/2\n    else:\n        return l[len(l)//2]"
    },
    {
      "rank": 48,
      "score": 9.882923312638333,
      "candidate": "l = sorted(l)\n    n = len(l)\n    if n % 2 == 0:\n        return (l[n // 2 - 1] + l[n // 2]) / 2\n    else:\n        return l[n // 2]\n\n\ndef main():\n    l = [3, 1, 2, 4, 5]\n    print(median(l))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 49,
      "score": 9.854153125103362,
      "candidate": "length = len(l)\n    if length % 2 == 0:\n        return (l[length // 2] + l[length // 2 - 1]) / 2.0\n    else:\n        return l[length // 2]\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 50,
      "score": 9.850496324767066,
      "candidate": "l = sorted(l)\n    if len(l) % 2 == 1:\n        return l[len(l) // 2]\n    else:\n        return (l[len(l) // 2] + l[len(l) // 2 - 1]) / 2.0\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 51,
      "score": 9.849448152205355,
      "candidate": "l = sorted(l)\n    n = len(l)\n    if n % 2 == 1:\n        return l[n // 2]\n    else:\n        return (l[n // 2] + l[n // 2 - 1]) / 2.0\n\n\ndef main():\n    import doctest\n    doctest.testmod()\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 52,
      "score": 9.845393812074393,
      "candidate": "l = sorted(l)\n\n    if len(l) % 2 == 0:\n        return (l[len(l) // 2] + l[len(l) // 2 - 1]) / 2\n    else:\n        return l[len(l) // 2]\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 53,
      "score": 9.807458859791842,
      "candidate": "l.sort()\n    return l[len(l)//2]\n\n\ndef median3(a: int, b: int, c: int):\n    \"\"\"Return median of 3 numbers.\n    >>> median3(1, 2, 3)\n    2\n    >>> median3(3, 1, 2)\n    2\n    \"\"\"\n    return (a + b + c) - max((a, b, c)) - min((a, b, c))\n\n\ndef median_sorted(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median_sorted([3, 1, 2, 4, 5])\n    3\n    >>> median_sorted([-10, 4, 6, 1000, 10, 20])\n    10\n    \"\"\"\n    k = len(l) // 2\n    return l[k] if len(l) % 2 else (l[k] + l[k - 1]) / 2\n\n\ndef median_recursive(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median_recursive([3, 1, 2, 4, 5])\n    3\n    >>> median_recursive([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) == 1:\n        return l[0]\n    elif len(l) % 2 == 0:\n        k = len(l) // 2\n        return (l[k - 1] + l[k]) / 2\n    else:\n        return l[len(l) // 2]\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 54,
      "score": 9.769680614520107,
      "candidate": "l = sorted(l)\n    if len(l) % 2 == 0:\n        return (l[len(l) // 2 - 1] + l[len(l) // 2]) / 2\n    else:\n        return l[len(l) // 2]\n\n\ndef get_average(l: list):\n    \"\"\"Return average of elements in the list l.\n    >>> get_average([1, 2, 3, 4, 5])\n    3.0\n    >>> get_average([-10, 4, 6, 1000, 10, 20])\n    16.0\n    \"\"\"\n    return sum(l) / len(l)\n\n\ndef get_mode(l: list):\n    \"\"\"Return mode of elements in the list l.\n    >>> get_mode([1, 2, 3, 4, 5])\n    1\n    >>> get_mode([-10, 4, 6, 1000, 10, 20])\n    -10\n    \"\"\"\n    return max(l, key=l.count)\n\n\ndef get_range(l: list):\n    \"\"\"Return range of elements in the list l.\n    >>> get_range([1, 2, 3, 4, 5])\n    4\n    >>> get_range([-10, 4, 6, 1000, 10, 20])\n    1004\n    \"\"\"\n    return max(l) - min(l)\n\n\ndef get_variance(l: list):\n    \"\"\"Return variance of elements in the list l.\n    >>> get_variance([1, 2, 3, 4, 5])\n    2.5\n    >>> get_variance([-10, 4, 6, 1000, 10, 20])\n    26694000.0\n    \"\"\"\n    mean = get_average(l)\n    return sum([(i - mean)**2 for i in l]) / len(l)\n\n\ndef get_"
    },
    {
      "rank": 55,
      "score": 9.768291153593768,
      "candidate": "l = sorted(l)\n    n = len(l)\n    if n % 2 == 0:\n        return (l[n // 2] + l[n // 2 - 1]) / 2.0\n    else:\n        return l[n // 2]\n\n\ndef median_sorted(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median_sorted([3, 1, 2, 4, 5])\n    3\n    >>> median_sorted([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    n = len(l)\n    if n % 2 == 0:\n        return (l[n // 2] + l[n // 2 - 1]) / 2.0\n    else:\n        return l[n // 2]\n\n\ndef median_sorted2(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median_sorted2([3, 1, 2, 4, 5])\n    3\n    >>> median_sorted2([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    n = len(l)\n    if n % 2 == 0:\n        return (l[n // 2] + l[(n - 1) // 2]) / 2.0\n    else:\n        return l[n // 2]\n\n\ndef median_sorted3(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median_sorted3([3, 1, 2, 4, 5])\n    3\n    >>> median_sorted3([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    n = len(l)\n    if n % 2 == 0:\n        return (l[n // 2] + l[n // 2 - 1]) / 2.0\n    else:\n        return l"
    },
    {
      "rank": 56,
      "score": 9.76713512321487,
      "candidate": "sorted_list = sorted(l)\n    length = len(sorted_list)\n    if length % 2 == 0:\n        return (sorted_list[length // 2] + sorted_list[length // 2 - 1]) / 2\n    else:\n        return sorted_list[length // 2]\n\n\ndef main():\n    a = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    b = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]\n    c = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    d = [1, 2, 3, 4, 5, 6, 7, 8]\n    e = [1, 2, 3, 4, 5, 6, 7]\n    f = [1, 2, 3, 4, 5, 6]\n    g = [1, 2, 3, 4, 5]\n    h = [1, 2, 3, 4]\n    i = [1, 2, 3]\n    j = [1, 2]\n    k = [1]\n    print(median(a))\n    print(median(b))\n    print(median(c))\n    print(median(d))\n    print(median(e))\n    print(median(f))\n    print(median(g))\n    print(median(h))\n    print(median(i))\n    print(median(j))\n    print(median(k))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 57,
      "score": 9.765262807032524,
      "candidate": "length = len(l)\n    if length % 2 == 0:\n        return (l[length // 2] + l[length // 2 - 1]) / 2\n    return l[length // 2]\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 58,
      "score": 9.760412881077356,
      "candidate": "l = sorted(l)\n    if len(l) % 2 == 0:\n        return (l[len(l) // 2 - 1] + l[len(l) // 2]) / 2\n    else:\n        return l[len(l) // 2]\n\n\ndef main():\n    import doctest\n    doctest.testmod()\n    l = [float(input(\"Enter a number: \")) for _ in range(int(input(\"How many numbers do you want to enter? \")))]\n    print(\"The median of the numbers is\", median(l))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 59,
      "score": 9.72780863773741,
      "candidate": "l = sorted(l)\n    if len(l) % 2 == 1:\n        return l[len(l) // 2]\n    else:\n        return (l[len(l) // 2] + l[len(l) // 2 - 1]) / 2\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 60,
      "score": 9.718856235379514,
      "candidate": "l.sort()\n    size = len(l)\n    if size % 2 == 1:\n        return l[size // 2]\n    else:\n        return (l[size // 2 - 1] + l[size // 2]) / 2\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 61,
      "score": 9.699680655040597,
      "candidate": "l.sort()\n    if len(l) % 2 == 0:\n        return (l[int(len(l) / 2)] + l[int(len(l) / 2 - 1)]) / 2\n    else:\n        return l[int(len(l) / 2)]\n\n\ndef median2(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median2([3, 1, 2, 4, 5])\n    3\n    >>> median2([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l.sort()\n    if len(l) % 2 == 0:\n        return (l[int(len(l) / 2)] + l[int(len(l) / 2 - 1)]) / 2\n    else:\n        return l[int(len(l) / 2)]\n\n\ndef median3(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median3([3, 1, 2, 4, 5])\n    3\n    >>> median3([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l.sort()\n    return l[len(l) // 2]\n\n\ndef median4(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median4([3, 1, 2, 4, 5])\n    3\n    >>> median4([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l.sort()\n    return l[len(l) // 2]\n\n\ndef median5(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median5([3, 1, 2, 4, 5])\n    3\n    >>> median5([-10, 4, 6, 1000, 1"
    },
    {
      "rank": 62,
      "score": 9.699146693885302,
      "candidate": "l.sort()\n    # the number of elements in the list\n    n = len(l)\n    if n % 2 == 0:\n        return (l[n // 2] + l[n // 2 - 1]) / 2\n    else:\n        return l[n // 2]\n\n\ndef test_median():\n    assert median([3, 1, 2, 4, 5]) == 3\n    assert median([-10, 4, 6, 1000, 10, 20]) == 15.0\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 63,
      "score": 9.677440122697439,
      "candidate": "l.sort()\n    return l[(len(l) - 1) // 2]\n\n\ndef median_sorted(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median_sorted([3, 1, 2, 4, 5])\n    3\n    >>> median_sorted([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    n = len(l)\n    if n % 2 == 1:\n        return l[n//2]\n    else:\n        return (l[n//2 - 1] + l[n//2])/2.0\n\n\ndef median_sorted_inplace(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median_sorted_inplace([3, 1, 2, 4, 5])\n    3\n    >>> median_sorted_inplace([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    n = len(l)\n    if n % 2 == 1:\n        return l[n//2]\n    else:\n        l.sort()\n        return (l[n//2 - 1] + l[n//2])/2.0"
    },
    {
      "rank": 64,
      "score": 9.661538999847021,
      "candidate": "# Your code here\n    l.sort()\n    length = len(l)\n    if length % 2 == 0:\n        return (l[length // 2] + l[length // 2 - 1]) / 2\n    else:\n        return l[length // 2]\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 65,
      "score": 9.640077895802646,
      "candidate": "length = len(l)\n    if length % 2 == 1:\n        return l[length // 2]\n    else:\n        return (l[length // 2] + l[length // 2 - 1]) / 2.0\n\n\ndef median_sorted(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median_sorted([3, 1, 2, 4, 5])\n    3\n    >>> median_sorted([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    length = len(l)\n    if length % 2 == 1:\n        return l[length // 2]\n    else:\n        return (l[length // 2] + l[length // 2 - 1]) / 2.0\n\n\ndef main():\n    print(median([3, 1, 2, 4, 5]))\n    print(median_sorted([3, 1, 2, 4, 5]))\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()\n    main()"
    },
    {
      "rank": 66,
      "score": 9.58039123838868,
      "candidate": "l = sorted(l)\n    length = len(l)\n    midpoint = length // 2\n\n    if length % 2 == 1:\n        return l[midpoint]\n    else:\n        return (l[midpoint - 1] + l[midpoint]) / 2.0\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 67,
      "score": 9.545987962239394,
      "candidate": "sorted_l = sorted(l)\n    if len(sorted_l) % 2 == 0:\n        return (sorted_l[len(sorted_l) // 2] + sorted_l[len(sorted_l) // 2 - 1]) / 2\n    else:\n        return sorted_l[len(sorted_l) // 2]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 68,
      "score": 9.493584439832787,
      "candidate": "l = sorted(l)\n    n = len(l)\n    if n % 2 == 1:\n        return l[n // 2]\n    else:\n        return (l[n // 2 - 1] + l[n // 2]) / 2.0\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 69,
      "score": 9.47114453552205,
      "candidate": "l = sorted(l)\n    length = len(l)\n    if length % 2 == 0:\n        return (l[length // 2 - 1] + l[length // 2]) / 2\n    else:\n        return l[length // 2]\n\n\ndef main():\n    import doctest\n    doctest.testmod()\n    l = [3, 1, 2, 4, 5]\n    print(median(l))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 70,
      "score": 9.446832512996986,
      "candidate": "\"*** YOUR CODE HERE ***\"\n    l.sort()\n    if len(l) % 2 == 0:\n        return (l[len(l)//2 - 1] + l[len(l)//2])/2\n    else:\n        return l[(len(l) - 1)//2]\n\n\n\ndef linear_search(L: list, e: object):\n    \"\"\"\n    Return the index of the first occurrence of element e in list L, or return\n    None if e is not in L.\n\n    >>> linear_search([2, 3, 5, 7], 2)\n    0\n    >>> linear_search([2, 3, 5, 7], 5)\n    2\n    >>> linear_search([2, 3, 5, 7], 9)\n    \"\"\"\n    for index, element in enumerate(L):\n        if element == e:\n            return index\n    return None\n\n\n\ndef binary_search(L: list, e: object):\n    \"\"\"\n    Return the index of the first occurrence of element e in sorted list L, or\n    return None if e is not in L.\n\n    >>> binary_search([2, 3, 5, 7], 2)\n    0\n    >>> binary_search([2, 3, 5, 7], 5)\n    2\n    >>> binary_search([2, 3, 5, 7], 9)\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    low = 0\n    high = len(L) - 1\n    while low <= high:\n        mid = (low + high) // 2\n        if L[mid] == e:\n            return mid\n        elif L[mid] > e:\n            high = mid - 1\n        else:\n            low = mid + 1\n    return None\n\n\n\ndef riffle(deck1: list, deck2: list):\n    \"\"\"\n    Assumes that deck1 and deck2 are both non-empty lists, and that each list\n    contains the same number of aces, twos, ..., ten cards (in that order)."
    },
    {
      "rank": 71,
      "score": 9.42450321128885,
      "candidate": "# sort the list in place\n    l.sort()\n    # return median\n    return l[(len(l) - 1) // 2]\n\n\ndef main():\n    try:\n        l = [float(x) for x in input('Enter list of numbers: ').split()]\n        print(median(l))\n    except ValueError:\n        print('Error: list must contain all numbers.')\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 72,
      "score": 9.401896687959665,
      "candidate": "return sorted(l)[len(l) // 2]\n\n\ndef main():\n    l = [int(input()) for _ in range(int(input()))]\n    print(median(l))\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 73,
      "score": 9.389578175014488,
      "candidate": "l.sort()\n    mid = len(l) // 2\n    if len(l) % 2 == 0:\n        return (l[mid] + l[mid - 1]) / 2\n    else:\n        return l[mid]\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 74,
      "score": 9.335906975550785,
      "candidate": "l = sorted(l)\n    if len(l) % 2 == 0:\n        return (l[len(l) // 2 - 1] + l[len(l) // 2]) / 2.0\n    else:\n        return l[len(l) // 2]\n\n\ndef main():\n    print(median([3, 1, 2, 4, 5]))\n    print(median([-10, 4, 6, 1000, 10, 20]))\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()\n    main()"
    },
    {
      "rank": 75,
      "score": 9.293848149332355,
      "candidate": "l = sorted(l)\n    return l[len(l)//2] if len(l) % 2 == 1 else (l[len(l)//2-1] + l[len(l)//2]) / 2.0\n\n\ndef test_median():\n    assert median([3, 1, 2, 4, 5]) == 3\n    assert median([-10, 4, 6, 1000, 10, 20]) == 15.0\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 76,
      "score": 9.287625906893272,
      "candidate": "l.sort()\n    n = len(l)\n    if n % 2 == 1:\n        return l[n // 2]\n    else:\n        return (l[n // 2] + l[n // 2 - 1]) / 2.0\n\n\ndef main():\n    import doctest\n    doctest.testmod()\n\n    test_data = [\n        [3, 1, 2, 4, 5],\n        [-10, 4, 6, 1000, 10, 20],\n        [3, 4, 6, 7, 10, 11, 12],\n        [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]\n    ]\n    for l in test_data:\n        print(median(l), l)\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 77,
      "score": 9.260739004816287,
      "candidate": "l.sort()\n    return l[len(l) // 2]\n\n\ndef median2(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median2([3, 1, 2, 4, 5])\n    3\n    >>> median2([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    if len(l) % 2 == 1:\n        return l[len(l) // 2]\n    else:\n        return (l[len(l) // 2 - 1] + l[len(l) // 2]) / 2\n\n\ndef main():\n    import doctest\n    doctest.testmod()\n\n    l = [3, 1, 2, 4, 5]\n    print(median(l))\n    l = [-10, 4, 6, 1000, 10, 20]\n    print(median(l))\n\n    l = [3, 1, 2, 4, 5]\n    print(median2(l))\n    l = [-10, 4, 6, 1000, 10, 20]\n    print(median2(l))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 78,
      "score": 9.137541083743484,
      "candidate": "l = sorted(l)\n    length = len(l)\n    if length % 2 == 1:\n        return l[length//2]\n    else:\n        return (l[length//2-1] + l[length//2])/2.0\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 79,
      "score": 9.118479922318633,
      "candidate": "l = sorted(l)\n    n = len(l)\n    if n % 2 == 1:\n        return l[n // 2]\n    else:\n        return (l[n // 2] + l[n // 2 - 1]) / 2\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 80,
      "score": 9.0433598776711,
      "candidate": "length = len(l)\n    if length % 2 == 0:\n        return (l[length//2 - 1] + l[length//2])/2\n    else:\n        return l[length//2]\n\n\ndef find_median(data: list):\n    \"\"\"\n    >>> find_median([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n    5.5\n    \"\"\"\n    data.sort()\n    return median(data)\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 81,
      "score": 9.020164938060113,
      "candidate": "n = len(l)\n    l.sort()\n    if n % 2 == 0:\n        return (l[n//2] + l[n//2 - 1])/2\n    else:\n        return l[n//2]\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 82,
      "score": 9.006215542699554,
      "candidate": "l = sorted(l)\n    size = len(l)\n    if size % 2 == 0:\n        return (l[size//2] + l[size//2-1])/2\n    else:\n        return l[size//2]\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 83,
      "score": 8.690127447955128,
      "candidate": "# TODO: implement this method!\n    raise NotImplementedError\n\n\ndef main():\n    import doctest\n    doctest.testmod()\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 84,
      "score": 8.444444444444445,
      "candidate": "l = sorted(l)\n    n = len(l)\n    if n % 2 == 1:\n        return l[n // 2]\n    else:\n        return (l[n // 2 - 1] + l[n // 2]) / 2\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 85,
      "score": 8.444444444444445,
      "candidate": "sorted_list = l.sort()\n    return sorted_list[len(sorted_list) // 2]\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 86,
      "score": 8.444444444444445,
      "candidate": "l = sorted(l)\n    if len(l) % 2 == 0:\n        return (l[len(l) // 2] + l[len(l) // 2 - 1]) / 2\n    else:\n        return l[len(l) // 2]\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 87,
      "score": 8.444444444444445,
      "candidate": "l = sorted(l)\n    n = len(l)\n    if n % 2 == 1:\n        return l[n // 2]\n    else:\n        return (l[n // 2] + l[n // 2 - 1]) / 2\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 88,
      "score": 8.444444444444445,
      "candidate": "# Calculate the median.\n    l = sorted(l)\n    length = len(l)\n    middle = length // 2\n\n    # If there is an even number of elements, return the mean of the\n    # two middle elements.\n    if length % 2 == 0:\n        return (l[middle - 1] + l[middle]) / 2.0\n    else:\n        return l[middle]\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()\n\n    # Test your code with this first.\n    print(median([3, 1, 2, 4, 5]))\n\n    # After you are satisfied with your results, use input() to prompt\n    # the user for a list of integers and print the median.\n    # HINT: You can use the 'split' method to get a list from a string.\n    list_str = input('Enter list: ')\n    list_int = list_str.split()\n    list_int = [int(x) for x in list_int]\n    print(median(list_int))"
    },
    {
      "rank": 89,
      "score": 8.444444444444445,
      "candidate": "return l[len(l)//2]\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 90,
      "score": 8.444444444444445,
      "candidate": "l = sorted(l)\n    if len(l) % 2 == 1:\n        return l[len(l) // 2]\n    else:\n        return (l[len(l) // 2] + l[len(l) // 2 - 1]) / 2.0\n\n\ndef main():\n    print(median([3, 1, 2, 4, 5]))\n    print(median([-10, 4, 6, 1000, 10, 20]))\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()\n    main()"
    },
    {
      "rank": 91,
      "score": 8.444444444444445,
      "candidate": "l = sorted(l)\n    if len(l) % 2 == 1:\n        return l[len(l) // 2]\n    else:\n        return (l[len(l) // 2 - 1] + l[len(l) // 2]) / 2\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 92,
      "score": 8.444444444444445,
      "candidate": "l = sorted(l)\n    if len(l) % 2 == 0:\n        return (l[len(l)//2] + l[len(l)//2 - 1]) / 2\n    else:\n        return l[len(l)//2]"
    },
    {
      "rank": 93,
      "score": 8.444444444444445,
      "candidate": "sorted_list = sorted(l)\n    if len(l) % 2 == 1:\n        return sorted_list[len(l) // 2]\n    else:\n        return (sorted_list[len(l) // 2] + sorted_list[len(l) // 2 - 1]) / 2.0\n\n\ndef main():\n    import doctest\n    doctest.testmod()\n    print(median([3, 1, 2, 4, 5]))\n    print(median([-10, 4, 6, 1000, 10, 20]))\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 94,
      "score": 8.444444444444445,
      "candidate": "l = sorted(l)\n    if len(l) == 0:\n        return None\n    if len(l) % 2 == 0:\n        return (l[len(l) // 2] + l[len(l) // 2 - 1]) / 2\n    else:\n        return l[len(l) // 2]\n\n\ndef main():\n    import doctest\n    doctest.testmod()\n    print(median([3, 1, 2, 4, 5]))\n    print(median([-10, 4, 6, 1000, 10, 20]))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 95,
      "score": 8.444444444444445,
      "candidate": "l = sorted(l)\n    length = len(l)\n    if length % 2 == 0:\n        return (l[length // 2 - 1] + l[length // 2]) / 2.0\n    else:\n        return l[length // 2]\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 96,
      "score": 8.444444444444445,
      "candidate": "l = sorted(l)\n    length = len(l)\n    mid_pos = length // 2\n    if length % 2 == 0:\n        return (l[mid_pos] + l[mid_pos - 1]) / 2\n    else:\n        return l[mid_pos]\n\n\ndef main():\n    print(median([3, 1, 2, 4, 5]))\n    print(median([-10, 4, 6, 1000, 10, 20]))\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 97,
      "score": 8.444444444444445,
      "candidate": "l = sorted(l)\n    if len(l) % 2 == 1:\n        return l[len(l) // 2]\n    else:\n        return (l[len(l) // 2] + l[len(l) // 2 - 1]) / 2\n\n\ndef main():\n    l = [1, 2, 3, 4, 5]\n    print(median(l))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 98,
      "score": 8.444444444444445,
      "candidate": "l = sorted(l)\n    mid = len(l) // 2\n    if len(l) % 2 == 0:\n        return (l[mid] + l[mid - 1]) / 2\n    else:\n        return l[mid]\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 99,
      "score": 3.0,
      "candidate": "l = sorted(l)\n    if len(l) % 2 == 0:\n        return (l[len(l)//2] + l[len(l)//2 - 1]) / 2\n    else:\n        return l[len(l)//2]\n\n\ndef quantile(l: list, p: float):\n    \"\"\"Return p-quantile of elements in the list l.\n    >>> quantile([3, 1, 2, 4, 5], 0.5)\n    3\n    >>> quantile([-10, 4, 6, 1000, 10, 20], 0.5)\n    15.0\n    \"\"\"\n    l = sorted(l)\n    index = int(p * len(l))\n    return l[index]\n\n\ndef median_low(l: list):\n    \"\"\"Return median_low of elements in the list l.\n    >>> median_low([3, 1, 2, 4, 5])\n    2\n    >>> median_low([-10, 4, 6, 1000, 10, 20])\n    -10\n    \"\"\"\n    l = sorted(l)\n    if len(l) % 2 == 0:\n        return l[len(l)//2 - 1]\n    else:\n        return l[len(l)//2]\n\n\ndef median_high(l: list):\n    \"\"\"Return median_high of elements in the list l.\n    >>> median_high([3, 1, 2, 4, 5])\n    4\n    >>> median_high([-10, 4, 6, 1000, 10, 20])\n    10\n    \"\"\"\n    l = sorted(l)\n    if len(l) % 2 == 0:\n        return l[len(l)//2]\n    else:\n        return l[len(l)//2 + 1]\n\n\ndef interquartile_range(l: list):\n    \"\"\"Return interquartile range of elements in the list l.\n    >>>"
    },
    {
      "rank": 100,
      "score": 3.0,
      "candidate": "sorted_list = sorted(l)\n    length = len(sorted_list)\n    if length % 2 == 1:\n        return sorted_list[length // 2]\n    else:\n        return (sorted_list[length // 2] + sorted_list[length // 2 - 1]) / 2.0\n\n\ndef median_sorted(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median_sorted([3, 1, 2, 4, 5])\n    3\n    >>> median_sorted([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    length = len(l)\n    if length % 2 == 1:\n        return l[(length - 1) // 2]\n    else:\n        return (l[length // 2] + l[length // 2 - 1]) / 2.0\n\n\ndef median_sorted_fast(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median_sorted_fast([3, 1, 2, 4, 5])\n    3\n    >>> median_sorted_fast([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    length = len(l)\n    if length % 2 == 1:\n        return l[length // 2]\n    else:\n        return (l[length // 2] + l[length // 2 - 1]) / 2.0\n\n\ndef median_unsorted(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median_unsorted([3, 1, 2, 4, 5])\n    3\n    >>> median_unsorted([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    sorted_list = sorted(l)\n    length = len(sorted_list)\n    if length % 2 == 1:\n        return sorted_list["
    }
  ]
}