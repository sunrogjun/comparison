{
  "timestamp": "2025-09-14T21:12:57.947756",
  "method": "improved_llm_judge",
  "judge_model": "codellama/CodeLlama-7b-Python-hf",
  "target_model": "codellama-7b",
  "dataset": "humaneval",
  "problem_number": 18,
  "total_candidates": 100,
  "results": [
    {
      "rank": 1,
      "score": 10.0,
      "candidate": "return string.count(substring)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 2,
      "score": 10.0,
      "candidate": "return string.count(substring)"
    },
    {
      "rank": 3,
      "score": 10.0,
      "candidate": "return string.count(substring)\n\n\ndef run_tests():\n    \"\"\" Helper to test the solutions.\n    >>> all([how_many_times(solution('aaa', 'a'), 'a') == 3, solution('aaa', 'a') == 'aaa'])\n    True\n    >>> all([how_many_times(solution('aaaa', 'aa'), 'aa') == 3, solution('aaaa', 'aa') == 'aaaa'])\n    True\n    >>> all([how_many_times(solution('abc', 'bc'), 'bc') == 1, solution('abc', 'bc') == 'abc'])\n    True\n    >>> all([how_many_times(solution('abc', 'ab'), 'ab') == 1, solution('abc', 'ab') == 'abc'])\n    True\n    >>> all([how_many_times(solution('abc', 'abcd'), 'abcd') == 0, solution('abc', 'abcd') == 'abc'])\n    True\n    >>> all([how_many_times(solution('abc', ''), '') == 0, solution('abc', '') == 'abc'])\n    True\n    \"\"\"\n    for solution in [how_many_times, how_many_times]:\n        print(solution('aaa', 'a'))\n        print(solution('aaaa', 'aa'))\n        print(solution('abc', 'bc'))\n        print(solution('abc', 'ab'))\n        print(solution('abc', 'abcd'))\n        print(solution('abc', ''))\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()\n    run_tests()"
    },
    {
      "rank": 4,
      "score": 10.0,
      "candidate": "if not string or not substring:\n        return 0\n\n    if len(substring) > len(string):\n        return 0\n\n    counter = 0\n    index = 0\n    while index != -1:\n        index = string.find(substring, index)\n        if index != -1:\n            counter += 1\n            index += 1\n\n    return counter\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 5,
      "score": 10.0,
      "candidate": "count = 0\n    for i in range(len(string)):\n        if string[i:].startswith(substring):\n            count += 1\n    return count"
    },
    {
      "rank": 6,
      "score": 10.0,
      "candidate": "return string.count(substring)\n\n\ndef how_many_times_no_count(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times_no_count('', 'a')\n    0\n    >>> how_many_times_no_count('aaa', 'a')\n    3\n    >>> how_many_times_no_count('aaaa', 'aa')\n    3\n    \"\"\"\n    count = 0\n    index = 0\n    while index != -1:\n        index = string.find(substring, index)\n        if index != -1:\n            count += 1\n            index += 1\n    return count\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 7,
      "score": 10.0,
      "candidate": "if len(string) == 0:\n        return 0\n    if len(substring) == 0:\n        return 0\n    if len(substring) > len(string):\n        return 0\n\n    count = 0\n    for i in range(len(string)):\n        if string[i:i + len(substring)] == substring:\n            count += 1\n    return count\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 8,
      "score": 10.0,
      "candidate": "return string.count(substring)\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 9,
      "score": 10.0,
      "candidate": "return string.count(substring)\n\n\ndef main():\n    import doctest\n    doctest.testmod()\n    str1 = input(\"Enter a string: \")\n    str2 = input(\"Enter a substring: \")\n    print(f\"The string '{str1}' contains the substring '{str2}' {how_many_times(str1, str2)} times\")\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 10,
      "score": 10.0,
      "candidate": "return len(string) // len(substring)\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 11,
      "score": 10.0,
      "candidate": "if len(substring) > len(string):\n        return 0\n    if len(substring) == 0:\n        return 0\n    if len(substring) == len(string):\n        return 1 if string == substring else 0\n\n    index = 0\n    count = 0\n    while index + len(substring) <= len(string):\n        if string[index:index + len(substring)] == substring:\n            count += 1\n        index += 1\n    return count\n\n\ndef main():\n    import doctest\n    doctest.testmod()\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 12,
      "score": 10.0,
      "candidate": "return string.count(substring)\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 13,
      "score": 10.0,
      "candidate": "count = 0\n    for i in range(len(string) - len(substring) + 1):\n        if string[i:i + len(substring)] == substring:\n            count += 1\n    return count\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 14,
      "score": 10.0,
      "candidate": "if not string or not substring:\n        return 0\n\n    substring_length = len(substring)\n    string_length = len(string)\n\n    count = 0\n    for i in range(string_length):\n        if string[i:i + substring_length] == substring:\n            count += 1\n    return count\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 15,
      "score": 10.0,
      "candidate": "return string.count(substring)\n\n\ndef main():\n    print(f\"How many times does 'a' occur in 'aaa'? {how_many_times('aaa', 'a')}\")\n    print(f\"How many times does 'aa' occur in 'aaa'? {how_many_times('aaa', 'aa')}\")\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 16,
      "score": 10.0,
      "candidate": "return string.count(substring)"
    },
    {
      "rank": 17,
      "score": 10.0,
      "candidate": "return string.count(substring)\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 18,
      "score": 10.0,
      "candidate": "return string.count(substring)\n\n\ndef how_many_times_no_string_lib(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times_no_string_lib('', 'a')\n    0\n    >>> how_many_times_no_string_lib('aaa', 'a')\n    3\n    >>> how_many_times_no_string_lib('aaaa', 'aa')\n    3\n    \"\"\"\n    result = 0\n    for i in range(len(string)):\n        for j in range(len(substring)):\n            if i + j >= len(string):\n                break\n            if substring[j] == string[i + j]:\n                result += 1\n            else:\n                break\n    return result\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 19,
      "score": 10.0,
      "candidate": "# count = 0\n    # for i in range(len(string)):\n    #     if string[i:].startswith(substring):\n    #         count += 1\n    # return count\n\n    return string.count(substring)\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 20,
      "score": 10.0,
      "candidate": "return string.count(substring)\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 21,
      "score": 10.0,
      "candidate": "if len(substring) > len(string):\n        return 0\n    if len(substring) == 0:\n        return len(string)\n    counter = 0\n    for i in range(len(string)):\n        if string[i:i+len(substring)] == substring:\n            counter += 1\n    return counter\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 22,
      "score": 10.0,
      "candidate": "if not string or not substring:\n        return 0\n    count = 0\n    for i in range(len(string)):\n        if string[i:].startswith(substring):\n            count += 1\n    return count\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 23,
      "score": 10.0,
      "candidate": "if len(string) < 1 or len(substring) < 1:\n        return 0\n\n    count = 0\n    for i in range(len(string)):\n        if string[i:i + len(substring)] == substring:\n            count += 1\n    return count\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 24,
      "score": 10.0,
      "candidate": "count = 0\n    for i in range(len(string) - len(substring) + 1):\n        if string[i:i + len(substring)] == substring:\n            count += 1\n    return count\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 25,
      "score": 10.0,
      "candidate": "return len(string) - len(substring) + 1\n\n\ndef main():\n    how_many_times('aaaaa', 'aa')\n    import doctest\n    doctest.testmod()\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 26,
      "score": 10.0,
      "candidate": "if not string:\n        return 0\n    if len(substring) > len(string):\n        return 0\n    if substring == string:\n        return 1\n    if len(substring) == 1:\n        return string.count(substring)\n    times = 0\n    for i in range(len(string)):\n        if string[i:i+len(substring)] == substring:\n            times += 1\n    return times\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 27,
      "score": 10.0,
      "candidate": "return string.count(substring)"
    },
    {
      "rank": 28,
      "score": 10.0,
      "candidate": "return len(string) - len(substring) + 1\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 29,
      "score": 9.993251387631034,
      "candidate": "count = 0\n    for i in range(len(string)):\n        if string[i:].startswith(substring):\n            count += 1\n    return count\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 30,
      "score": 9.982086980445024,
      "candidate": "return string.count(substring)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 31,
      "score": 9.963994939209833,
      "candidate": "return len(string) - len(substring) + 1"
    },
    {
      "rank": 32,
      "score": 9.907170511668092,
      "candidate": "substring_length = len(substring)\n    if substring_length == 0:\n        return 0\n\n    result = 0\n    substring_pointer = 0\n    for i in range(len(string)):\n        if string[i] == substring[substring_pointer]:\n            substring_pointer += 1\n            if substring_pointer == substring_length:\n                result += 1\n                substring_pointer = 0\n        else:\n            substring_pointer = 0\n    return result\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 33,
      "score": 9.890164056081243,
      "candidate": "return string.count(substring)"
    },
    {
      "rank": 34,
      "score": 9.887111849756732,
      "candidate": "count = 0\n    for i in range(len(string)):\n        if string[i:].startswith(substring):\n            count += 1\n    return count\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 35,
      "score": 9.88293152152541,
      "candidate": "if len(substring) == 0:\n        return len(string)\n    if len(string) == 0:\n        return 0\n    return string.count(substring) + how_many_times(string[1:], substring)\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 36,
      "score": 9.854153125103362,
      "candidate": "if not string or not substring:\n        return 0\n    count = 0\n    for i in range(0, len(string) - len(substring) + 1):\n        if string[i:i + len(substring)] == substring:\n            count += 1\n    return count\n\n\ndef how_many_times_v2(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    if not string or not substring:\n        return 0\n    count = 0\n    for i in range(0, len(string) - len(substring) + 1):\n        if string[i:i + len(substring)] == substring:\n            count += 1\n    return count\n\n\ndef how_many_times_v3(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    return string.count(substring)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 37,
      "score": 9.850496324767066,
      "candidate": "return string.count(substring)\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 38,
      "score": 9.807458859791842,
      "candidate": "return string.count(substring)\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 39,
      "score": 9.803945923433922,
      "candidate": "if len(substring) == 0:\n        return 0\n    if len(string) == 0:\n        return 0\n    if len(substring) > len(string):\n        return 0\n    count = 0\n    for i in range(len(string) - len(substring) + 1):\n        if string[i:i + len(substring)] == substring:\n            count += 1\n    return count\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 40,
      "score": 9.768291153593768,
      "candidate": "count = 0\n    for i in range(len(string) - len(substring) + 1):\n        if string[i:i+len(substring)] == substring:\n            count += 1\n    return count\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 41,
      "score": 9.765262807032524,
      "candidate": "return string.count(substring)\n\n\ndef how_many_times_optimized(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times_optimized('', 'a')\n    0\n    >>> how_many_times_optimized('aaa', 'a')\n    3\n    >>> how_many_times_optimized('aaaa', 'aa')\n    3\n    \"\"\"\n    return len(string) - len(string.replace(substring, '', 1))\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 42,
      "score": 9.760412881077356,
      "candidate": "return string.count(substring)\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 43,
      "score": 9.749121478207732,
      "candidate": "return len(string) - len(substring) + 1\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 44,
      "score": 9.73511989811648,
      "candidate": "return string.count(substring)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 45,
      "score": 9.677440122697439,
      "candidate": "return string.count(substring)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod(verbose=True)"
    },
    {
      "rank": 46,
      "score": 9.661538999847021,
      "candidate": "count = 0\n    for _ in range(len(string)):\n        if string.find(substring) != -1:\n            count += 1\n            string = string[string.find(substring) + 1:]\n    return count\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 47,
      "score": 9.640077895802646,
      "candidate": "return string.count(substring)\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 48,
      "score": 9.595753198553407,
      "candidate": "return string.count(substring)\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 49,
      "score": 9.58039123838868,
      "candidate": "count = 0\n    for i in range(len(string) - len(substring) + 1):\n        if string[i:i + len(substring)] == substring:\n            count += 1\n    return count\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 50,
      "score": 9.545987962239394,
      "candidate": "return string.count(substring)\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 51,
      "score": 9.47114453552205,
      "candidate": "if len(substring) == 0:\n        return 0\n    if len(string) == 0:\n        return 0\n    if len(substring) > len(string):\n        return 0\n    count = 0\n    for i in range(len(string) - len(substring) + 1):\n        if string[i:i + len(substring)] == substring:\n            count += 1\n    return count\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 52,
      "score": 9.42450321128885,
      "candidate": "if not string or not substring:\n        return 0\n    count = 0\n    for i in range(len(string)):\n        if string[i:].startswith(substring):\n            count += 1\n    return count\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 53,
      "score": 9.401896687959665,
      "candidate": "return string.count(substring)\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 54,
      "score": 9.287625906893272,
      "candidate": "if len(string) == 0 or len(substring) == 0:\n        return 0\n\n    if len(string) < len(substring):\n        return 0\n\n    return string.count(substring)\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 55,
      "score": 9.260739004816287,
      "candidate": "count = 0\n    for i in range(len(string)):\n        if string[i:].startswith(substring):\n            count += 1\n    return count\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 56,
      "score": 9.0433598776711,
      "candidate": "return string.count(substring)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod(verbose=True)"
    },
    {
      "rank": 57,
      "score": 9.020164938060113,
      "candidate": "return string.count(substring)\n\n\ndef how_many_times_no_count(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times_no_count('', 'a')\n    0\n    >>> how_many_times_no_count('aaa', 'a')\n    3\n    >>> how_many_times_no_count('aaaa', 'aa')\n    3\n    \"\"\"\n    if not string or not substring:\n        return 0\n    if len(substring) > len(string):\n        return 0\n    count = 0\n    for i in range(len(string)):\n        if string[i:].startswith(substring):\n            count += 1\n    return count\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 58,
      "score": 9.006215542699554,
      "candidate": "return string.count(substring)\n\n\ndef how_many_times_no_count(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times_no_count('', 'a')\n    0\n    >>> how_many_times_no_count('aaa', 'a')\n    3\n    >>> how_many_times_no_count('aaaa', 'aa')\n    3\n    \"\"\"\n    total = 0\n    for idx in range(len(string) - len(substring) + 1):\n        if string[idx:idx + len(substring)] == substring:\n            total += 1\n    return total\n\n\nif __name__ == '__main__':\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 59,
      "score": 8.815751616664494,
      "candidate": "counter = 0\n    while substring in string:\n        string = string[string.find(substring)+1:]\n        counter += 1\n    return counter\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 60,
      "score": 8.783143227994213,
      "candidate": "# return len([i for i in range(len(string) - len(substring) + 1) if string[i:i + len(substring)] == substring])\n    return string.count(substring)\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 61,
      "score": 8.748548371063277,
      "candidate": "count = 0\n    for i in range(len(string)):\n        if string[i:i+len(substring)] == substring:\n            count += 1\n    return count"
    },
    {
      "rank": 62,
      "score": 8.72839529423102,
      "candidate": "return string.count(substring)\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 63,
      "score": 8.717677079042746,
      "candidate": "return string.count(substring)"
    },
    {
      "rank": 64,
      "score": 8.684089203541701,
      "candidate": "if len(substring) == 0:\n        return len(string) + 1\n    count = 0\n    for i in range(len(string) - len(substring) + 1):\n        if string[i:i+len(substring)] == substring:\n            count += 1\n    return count\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 65,
      "score": 8.628228681058602,
      "candidate": "return string.count(substring)\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 66,
      "score": 8.578160818482559,
      "candidate": "return string.count(substring)\n\nprint(f\"how_many_times('', 'a') = {how_many_times('', 'a')}\")\nprint(f\"how_many_times('aaa', 'a') = {how_many_times('aaa', 'a')}\")\nprint(f\"how_many_times('aaaa', 'aa') = {how_many_times('aaaa', 'aa')}\")"
    },
    {
      "rank": 67,
      "score": 8.571583211584775,
      "candidate": "return string.count(substring)\n\nprint(F\"how_many_times.py: how_many_times('', 'a') = 0 = {how_many_times('', 'a')}\")\nprint(F\"how_many_times.py: how_many_times('aaa', 'a') = 3 = {how_many_times('aaa', 'a')}\")\nprint(F\"how_many_times.py: how_many_times('aaaa', 'aa') = 3 = {how_many_times('aaaa', 'aa')}\")"
    },
    {
      "rank": 68,
      "score": 8.566082355018528,
      "candidate": "return len(string) - len(substring) + 1\n\n\ndef main():\n    \"\"\" This is executed when run from the command line \"\"\"\n    print(how_many_times('', 'a'))\n    print(how_many_times('aaa', 'a'))\n    print(how_many_times('aaaa', 'aa'))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 69,
      "score": 8.56435551312052,
      "candidate": "return len(string) - len(substring) + 1"
    },
    {
      "rank": 70,
      "score": 8.560715957504696,
      "candidate": "return string.count(substring)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 71,
      "score": 8.533970484923877,
      "candidate": "if len(string) < len(substring):\n        return 0\n    count = 0\n    for i in range(len(string) - len(substring) + 1):\n        if string[i : i + len(substring)] == substring:\n            count += 1\n    return count"
    },
    {
      "rank": 72,
      "score": 8.51728310171602,
      "candidate": "if not string or not substring:\n        return 0\n\n    count = 0\n    for i in range(len(string)):\n        if string[i:].startswith(substring):\n            count += 1\n\n    return count"
    },
    {
      "rank": 73,
      "score": 8.48036313770322,
      "candidate": "return string.count(substring)\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 74,
      "score": 8.401654579960796,
      "candidate": "count = 0\n    for i in range(len(string)):\n        if string[i:].startswith(substring):\n            count += 1\n    return count\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 75,
      "score": 8.393286653011106,
      "candidate": "if len(substring) == 0:\n        return 0\n    return string.count(substring)\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 76,
      "score": 8.35780769579681,
      "candidate": "return string.count(substring)\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 77,
      "score": 8.333036077076407,
      "candidate": "if len(substring) > len(string):\n        return 0\n    if len(substring) == 0:\n        return len(string)\n    if len(substring) == len(string):\n        return 1 if substring == string else 0\n    if len(substring) < len(string):\n        count = 0\n        i = 0\n        while i < len(string) - len(substring) + 1:\n            if string[i:i + len(substring)] == substring:\n                count += 1\n            i += 1\n        return count"
    },
    {
      "rank": 78,
      "score": 8.330035865379495,
      "candidate": "count = 0\n    i = 0\n    while i < len(string) - len(substring) + 1:\n        if string[i:i + len(substring)] == substring:\n            count += 1\n            i += len(substring)\n        else:\n            i += 1\n    return count\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 79,
      "score": 8.32320945020327,
      "candidate": "if not string or not substring:\n        return 0\n    return string.count(substring)\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 80,
      "score": 8.274008099189324,
      "candidate": "return len(string) - len(string.replace(substring, '', len(string)))\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 81,
      "score": 8.27212443562345,
      "candidate": "return len(string) - len(substring) + 1\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 82,
      "score": 8.252684463683195,
      "candidate": "return len(string) - len(string.replace(substring, '', len(string)))\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 83,
      "score": 8.243022836370127,
      "candidate": "if len(substring) == 0:\n        return 0\n\n    count = 0\n    for i in range(len(string) - len(substring) + 1):\n        if string[i:i+len(substring)] == substring:\n            count += 1\n    return count\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 84,
      "score": 8.236398058625285,
      "candidate": "return string.count(substring)\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 85,
      "score": 8.222208129174486,
      "candidate": "return string.count(substring)\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 86,
      "score": 8.221812997919567,
      "candidate": "return string.count(substring)\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 87,
      "score": 8.184684799709824,
      "candidate": "return len(string) - len(substring) + 1\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 88,
      "score": 8.069696929920708,
      "candidate": "count = 0\n    for i in range(0, len(string)):\n        if string[i:i + len(substring)] == substring:\n            count += 1\n    return count\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 89,
      "score": 8.035100504062214,
      "candidate": "if len(substring) == 0:\n        return len(string) + 1\n    if len(string) == 0:\n        return 0\n    if string[0] == substring[0]:\n        return 1 + how_many_times(string[1:], substring[1:])\n    return how_many_times(string[1:], substring)"
    },
    {
      "rank": 90,
      "score": 7.992732293955166,
      "candidate": "if not string or not substring:\n        return 0\n    return string.count(substring)\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 91,
      "score": 7.953015606352025,
      "candidate": "return len(string) - len(substring) + 1\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 92,
      "score": 7.921892074950387,
      "candidate": "return len(string) - len(substring) + 1\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 93,
      "score": 7.806224846414622,
      "candidate": "counter = 0\n    for _ in range(len(string) - len(substring) + 1):\n        counter += 1\n        string = string[1:]\n    return counter\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 94,
      "score": 7.792119586960233,
      "candidate": "# return string.count(substring)\n    count = 0\n    i = 0\n    while i < len(string):\n        if string[i:i+len(substring)] == substring:\n            count += 1\n            i += len(substring)\n        else:\n            i += 1\n    return count\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 95,
      "score": 7.475138755931239,
      "candidate": "return len(string) - len(substring) + 1\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 96,
      "score": 3.0,
      "candidate": "if len(string) == 0 or len(substring) == 0:\n        return 0\n    elif len(substring) > len(string):\n        return 0\n    else:\n        return string.count(substring)\n\n\ndef find_index(string: str, substring: str) -> int:\n    \"\"\" Find the first index of a given substring in the original string.\n    >>> find_index('', 'a')\n    -1\n    >>> find_index('aaa', 'a')\n    0\n    >>> find_index('aaaa', 'aa')\n    0\n    \"\"\"\n    if len(string) == 0 or len(substring) == 0:\n        return -1\n    elif len(substring) > len(string):\n        return -1\n    else:\n        return string.find(substring)\n\n\ndef is_there_a_substring(string: str, substring: str) -> bool:\n    \"\"\" Check if there is a given substring in the original string.\n    >>> is_there_a_substring('', 'a')\n    False\n    >>> is_there_a_substring('aaa', 'a')\n    True\n    >>> is_there_a_substring('aaaa', 'aa')\n    True\n    \"\"\"\n    if len(string) == 0 or len(substring) == 0:\n        return False\n    elif len(substring) > len(string):\n        return False\n    else:\n        return substring in string\n\n\ndef replace_string(string: str, substring: str, new_substring: str) -> str:\n    \"\"\" Replace a given substring with a new substring in the original string.\n    >>> replace_string('', 'a', 'b')\n    ''\n    >>> replace_string('aaa', 'a', 'b')\n    'bbb'\n    >>> replace_string('aaaa', 'aa', 'b')\n    'bbbb'\n    \"\"\"\n    if len(string) == 0 or len(substring) == 0:\n        return string\n    elif len(substring) > len(string):\n        return string\n    else:\n        return string.replace(substring, new_substring)\n\n\ndef insert_string(string: str, substring:"
    },
    {
      "rank": 97,
      "score": 3.0,
      "candidate": "return string.count(substring)\n\n\ndef find_index(string: str, substring: str) -> int:\n    \"\"\" Find the first index of a given substring in the original string.\n    >>> find_index('', 'a')\n    -1\n    >>> find_index('aaa', 'a')\n    0\n    >>> find_index('aaaa', 'aa')\n    0\n    \"\"\"\n    return string.find(substring)\n\n\ndef is_in(string: str, substring: str) -> bool:\n    \"\"\" Check if a substring can be found in the original string.\n    >>> is_in('', 'a')\n    False\n    >>> is_in('aaa', 'a')\n    True\n    >>> is_in('aaaa', 'aa')\n    True\n    \"\"\"\n    return substring in string\n\n\ndef is_not_in(string: str, substring: str) -> bool:\n    \"\"\" Check if a substring can not be found in the original string.\n    >>> is_not_in('', 'a')\n    True\n    >>> is_not_in('aaa', 'a')\n    False\n    >>> is_not_in('aaaa', 'aa')\n    False\n    \"\"\"\n    return substring not in string\n\n\ndef replace_string(string: str, substring: str, replacement: str) -> str:\n    \"\"\" Replace all occurences of a given substring with a given replacement string.\n    >>> replace_string('', 'a', 'b')\n    ''\n    >>> replace_string('aaa', 'a', 'b')\n    'bbb'\n    >>> replace_string('aaaa', 'aa', 'b')\n    'bbbb'\n    \"\"\"\n    return string.replace(substring, replacement)\n\n\ndef get_character(string: str, index: int) -> str:\n    \"\"\" Get a character from a string at a given index.\n    >>> get_character('', 0)\n    ''\n    >>> get_character('aaa', 0)\n    'a'\n    >>> get_character('aaa', 2)\n    'a'\n    \"\"\"\n    return string[index]\n\n\ndef remove_character(string: str, index: int) -> str"
    },
    {
      "rank": 98,
      "score": 3.0,
      "candidate": "# initialize the count\n    count = 0\n    # check if the substring is empty\n    if substring == \"\":\n        return len(string)\n    # loop over the string\n    for i in range(len(string)):\n        # check for a match and increment the counter\n        if string[i:].startswith(substring):\n            count += 1\n    return count\n\n\nprint(how_many_times('', 'a'))\nprint(how_many_times('aaa', 'a'))\nprint(how_many_times('aaaa', 'aa'))"
    },
    {
      "rank": 99,
      "score": 3.0,
      "candidate": "if not string:\n        return 0\n    if not substring:\n        return 0\n    if len(substring) > len(string):\n        return 0\n    count = 0\n    for i in range(0, len(string) - len(substring) + 1):\n        if string[i:i+len(substring)] == substring:\n            count += 1\n    return count\n\n\nprint(how_many_times('', 'a'))\nprint(how_many_times('aaa', 'a'))\nprint(how_many_times('aaaa', 'aa'))"
    },
    {
      "rank": 100,
      "score": 3.0,
      "candidate": "if len(substring) > len(string):\n        return 0\n\n    count = 0\n    for i in range(len(string)):\n        if string[i] == substring[0]:\n            flag = True\n            for j in range(len(substring)):\n                if i + j >= len(string) or string[i + j] != substring[j]:\n                    flag = False\n                    break\n            if flag:\n                count += 1\n    return count\n\n\ndef count_substring(string, sub_string):\n    count = 0\n    for i in range(len(string)):\n        if string[i:].startswith(sub_string):\n            count += 1\n    return count\n\n\nif __name__ == \"__main__\":\n    string = input().strip()\n    sub_string = input().strip()\n\n    count = count_substring(string, sub_string)\n    print(count)"
    }
  ]
}