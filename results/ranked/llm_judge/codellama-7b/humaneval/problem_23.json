{
  "timestamp": "2025-09-14T21:15:10.578657",
  "method": "improved_llm_judge",
  "judge_model": "codellama/CodeLlama-7b-Python-hf",
  "target_model": "codellama-7b",
  "dataset": "humaneval",
  "problem_number": 23,
  "total_candidates": 100,
  "results": [
    {
      "rank": 1,
      "score": 10.0,
      "candidate": "count = 0\n    for c in string:\n        count += 1\n    return count\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 2,
      "score": 10.0,
      "candidate": "# your code here\n    return len(string)\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 3,
      "score": 10.0,
      "candidate": "count = 0\n    for _ in string:\n        count += 1\n    return count\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 4,
      "score": 10.0,
      "candidate": "count = 0\n    for _ in string:\n        count += 1\n    return count\n\n\ndef strlen2(string: str) -> int:\n    \"\"\" Return length of given string\n    >>> strlen2('')\n    0\n    >>> strlen2('abc')\n    3\n    \"\"\"\n    return len(string)\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 5,
      "score": 10.0,
      "candidate": "length = 0\n    for i in string:\n        length += 1\n    return length\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 6,
      "score": 10.0,
      "candidate": "count = 0\n    for i in string:\n        count += 1\n    return count\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 7,
      "score": 10.0,
      "candidate": "return len(string)\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 8,
      "score": 10.0,
      "candidate": "count = 0\n    for c in string:\n        count += 1\n    return count\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 9,
      "score": 10.0,
      "candidate": "return len(string)\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 10,
      "score": 10.0,
      "candidate": "return len(string)\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 11,
      "score": 10.0,
      "candidate": "return len(string)\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 12,
      "score": 10.0,
      "candidate": "return len(string)"
    },
    {
      "rank": 13,
      "score": 10.0,
      "candidate": "return len(string)\n\n\ndef main():\n    print(strlen('abc'))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 14,
      "score": 10.0,
      "candidate": "return len(string)\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 15,
      "score": 10.0,
      "candidate": "count = 0\n    for i in string:\n        count += 1\n    return count\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 16,
      "score": 10.0,
      "candidate": "return len(string)\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 17,
      "score": 10.0,
      "candidate": "return len(string)\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 18,
      "score": 10.0,
      "candidate": "return len(string)\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 19,
      "score": 10.0,
      "candidate": "return len(string)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 20,
      "score": 10.0,
      "candidate": "return len(string)"
    },
    {
      "rank": 21,
      "score": 10.0,
      "candidate": "return len(string)\n\n\ndef main():\n    \"\"\" Main function \"\"\"\n    print(strlen(''))\n    print(strlen('abc'))\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 22,
      "score": 10.0,
      "candidate": "length = 0\n    for _ in string:\n        length += 1\n    return length\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 23,
      "score": 10.0,
      "candidate": "return len(string)\n\n\ndef is_palindrome(string: str) -> bool:\n    \"\"\" Return True if given string is palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('abba')\n    True\n    >>> is_palindrome('abb')\n    False\n    \"\"\"\n    return string == string[::-1]\n\n\ndef is_pangram(string: str) -> bool:\n    \"\"\" Return True if given string is pangram\n    >>> is_pangram('The quick brown fox jumps over the lazy dog.')\n    True\n    >>> is_pangram('The quick brown fox jumps over the lazy fox.')\n    False\n    \"\"\"\n    return len(set(string.lower())) == 26\n\n\ndef count_vowels(string: str) -> int:\n    \"\"\" Return count of vowels in given string\n    >>> count_vowels('abracadabra')\n    5\n    >>> count_vowels('alphabet')\n    5\n    >>> count_vowels('uuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuu"
    },
    {
      "rank": 24,
      "score": 10.0,
      "candidate": "return len(string)\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 25,
      "score": 10.0,
      "candidate": "return len(string)\n\ndef test():\n    import doctest\n    doctest.testmod()\n\nif __name__ == \"__main__\":\n    test()"
    },
    {
      "rank": 26,
      "score": 10.0,
      "candidate": "return len(string)\n\n\ndef main():\n    str = input(\"Enter string: \")\n    print(strlen(str))\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()\n    main()"
    },
    {
      "rank": 27,
      "score": 10.0,
      "candidate": "return len(string)\n\ndef main():\n    \"\"\" This is the main function to be called \"\"\"\n    # Do not edit this function\n    assert strlen(raw_input('Enter String: ')) == int(raw_input('Enter Length: '))\n    print 'All test cases passed'\n\n# Do not edit any code below this line\n# You may not remove this line\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 28,
      "score": 10.0,
      "candidate": "return len(string)"
    },
    {
      "rank": 29,
      "score": 10.0,
      "candidate": "return len(string)\n\n\ndef strlen_v2(string: str) -> int:\n    \"\"\" Return length of given string\n    >>> strlen_v2('')\n    0\n    >>> strlen_v2('abc')\n    3\n    \"\"\"\n    if string == '':\n        return 0\n    return strlen_v2(string[1:]) + 1\n\n\ndef strlen_v3(string: str) -> int:\n    \"\"\" Return length of given string\n    >>> strlen_v3('')\n    0\n    >>> strlen_v3('abc')\n    3\n    \"\"\"\n    return len(string)\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 30,
      "score": 10.0,
      "candidate": "return len(string)\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 31,
      "score": 10.0,
      "candidate": "return len(string)\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 32,
      "score": 10.0,
      "candidate": "return len(string)\n\n\ndef is_palindrome(string: str) -> bool:\n    \"\"\" Return whether given string is palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('abc')\n    False\n    >>> is_palindrome('aba')\n    True\n    \"\"\"\n    return strlen(string) == strlen(string[::-1])\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 33,
      "score": 10.0,
      "candidate": "return len(string)\n\n\ndef is_palindrome(string: str) -> bool:\n    \"\"\" Return whether given string is palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('abba')\n    True\n    >>> is_palindrome('abbc')\n    False\n    \"\"\"\n    return string == string[::-1]\n\n\ndef count_char(string: str, char: str) -> int:\n    \"\"\" Return the count of given char in given string\n    >>> count_char('', 'a')\n    0\n    >>> count_char('aba', 'a')\n    2\n    >>> count_char('aba', 'b')\n    1\n    \"\"\"\n    return string.count(char)\n\n\ndef count_consecutive_char(string: str, char: str) -> int:\n    \"\"\" Return the count of consecutive given chars in given string\n    >>> count_consecutive_char('', 'a')\n    0\n    >>> count_consecutive_char('aa', 'a')\n    1\n    >>> count_consecutive_char('aa', 'b')\n    0\n    \"\"\"\n    return len(max(re.findall(f'{char}+', string), key=len, default=''))\n\n\ndef strstr(string: str, target: str) -> int:\n    \"\"\" Return the index of first occurrence of target in string,\n        or -1 if not found\n    >>> strstr('', '')\n    0\n    >>> strstr('abcdef', 'ab')\n    0\n    >>> strstr('abcdef', 'bc')\n    1\n    >>> strstr('abcdef', 'cd')\n    2\n    \"\"\"\n    return string.find(target)\n\n\ndef strcmp(string: str, target: str) -> int:\n    \"\"\" Return 0 if string is equal to target,\n        a positive value if string is lexicographically greater than target,\n        and a negative value if string is lexicographically smaller than target\n    >>> strcmp('', '')\n    0\n    >>> strcmp('abc', 'abc')\n    0\n    >>> strcmp('abc', 'cba')\n    1"
    },
    {
      "rank": 34,
      "score": 10.0,
      "candidate": "count = 0\n    for letter in string:\n        count += 1\n    return count\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 35,
      "score": 10.0,
      "candidate": "return len(string)\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 36,
      "score": 10.0,
      "candidate": "count = 0\n    for char in string:\n        count += 1\n    return count\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 37,
      "score": 10.0,
      "candidate": "return len(string)\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 38,
      "score": 10.0,
      "candidate": "return len(string)"
    },
    {
      "rank": 39,
      "score": 10.0,
      "candidate": "if not isinstance(string, str):\n        raise TypeError('Argument must be a string')\n    return len(string)\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 40,
      "score": 10.0,
      "candidate": "return len(string)"
    },
    {
      "rank": 41,
      "score": 10.0,
      "candidate": "return len(string)\n\n\ndef strcat(s1: str, s2: str) -> str:\n    \"\"\" Return concatenation of given strings\n    >>> strcat('abc', 'def')\n    'abcdef'\n    >>> strcat('abc', 'defg')\n    'abcdefg'\n    \"\"\"\n    return s1 + s2\n\n\ndef strcmp(s1: str, s2: str) -> int:\n    \"\"\" Return 0 if both strings are equal, 1 if the first is greater, -1 if the second is greater\n    >>> strcmp('abc', 'abc')\n    0\n    >>> strcmp('abc', 'def')\n    -1\n    \"\"\"\n    if s1 < s2:\n        return -1\n    if s1 > s2:\n        return 1\n    return 0\n\n\ndef strchr(string: str, char: str) -> str:\n    \"\"\" Return the first occurrence of given char in given string\n    >>> strchr('abcdef', 'd')\n    'd'\n    >>> strchr('abcdef', 'g')\n    >>> strchr('abcdef', 'c')\n    'c'\n    \"\"\"\n    return string[string.find(char):]\n\n\ndef strcpy(string: str, max_len: int) -> str:\n    \"\"\" Return a copy of the string up to max_len\n    >>> strcpy('abcdef', 3)\n    'abc'\n    >>> strcpy('abcdef', 6)\n    'abcdef'\n    \"\"\"\n    return string[:max_len]\n\n\ndef strncpy(string: str, max_len: int) -> str:\n    \"\"\" Return a copy of the string up to max_len\n    >>> strncpy('abcdef', 3)\n    'abc'\n    >>> strncpy('abcdef', 6)\n    'abcdef'\n    \"\"\"\n    return string[:max_len]\n\n\ndef strncmp(s1: str, s2: str, n: int) -> int:\n    \"\"\" Return 0 if both strings are equal, 1 if the first is greater, -1 if the second is greater\n    >>> strncmp('abc',"
    },
    {
      "rank": 42,
      "score": 10.0,
      "candidate": "return len(string)\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 43,
      "score": 10.0,
      "candidate": "return len(string)\n\n\ndef is_palindrome(string: str) -> bool:\n    \"\"\" Return whether given string is palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('a')\n    True\n    >>> is_palindrome('aa')\n    True\n    >>> is_palindrome('ab')\n    False\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('abb')\n    False\n    >>> is_palindrome('abba')\n    True\n    \"\"\"\n    return strlen(string) > 0 and strlen(string) % 2 == 1 and string[:strlen(string) // 2] == string[strlen(string) - 1:strlen(string) // 2 - 1:-1]\n\n\ndef test():\n    import doctest\n    doctest.testmod(verbose=True)\n\n\nif __name__ == '__main__':\n    test()"
    },
    {
      "rank": 44,
      "score": 10.0,
      "candidate": "return len(string)"
    },
    {
      "rank": 45,
      "score": 10.0,
      "candidate": "count = 0\n    for _ in string:\n        count += 1\n    return count\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 46,
      "score": 10.0,
      "candidate": "return len(string)\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 47,
      "score": 10.0,
      "candidate": "return len(string)\n\n\ndef strlen_recursive(string: str) -> int:\n    \"\"\" Return length of given string\n    >>> strlen_recursive('')\n    0\n    >>> strlen_recursive('abc')\n    3\n    \"\"\"\n    if string == '':\n        return 0\n    else:\n        return 1 + strlen_recursive(string[1:])\n\n\ndef is_palindrome(string: str) -> bool:\n    \"\"\" Return whether given string is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('abc')\n    False\n    \"\"\"\n    return string == string[::-1]\n\n\ndef is_palindrome_recursive(string: str) -> bool:\n    \"\"\" Return whether given string is a palindrome\n    >>> is_palindrome_recursive('')\n    True\n    >>> is_palindrome_recursive('aba')\n    True\n    >>> is_palindrome_recursive('abc')\n    False\n    \"\"\"\n    if len(string) <= 1:\n        return True\n    elif string[0] != string[-1]:\n        return False\n    else:\n        return is_palindrome_recursive(string[1:-1])\n\n\ndef count_vowels(string: str) -> int:\n    \"\"\" Return number of vowels in given string\n    >>> count_vowels('')\n    0\n    >>> count_vowels('abc')\n    0\n    >>> count_vowels('abcdefghijklm')\n    5\n    \"\"\"\n    count = 0\n    for c in string:\n        if c in 'aeiou':\n            count += 1\n    return count\n\n\ndef count_vowels_recursive(string: str) -> int:\n    \"\"\" Return number of vowels in given string\n    >>> count_vowels_recursive('')\n    0\n    >>> count_vowels_recursive('abc')\n    0\n    >>> count_vowels_recursive('abcdefghijklm')"
    },
    {
      "rank": 48,
      "score": 10.0,
      "candidate": "return len(string)\n\ndef is_palindrome(string: str) -> bool:\n    \"\"\" Return True if given string is a palindrome, False otherwise.\n    A palindrome is a string that reads the same from the left or right.\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('abba')\n    True\n    >>> is_palindrome('abbc')\n    False\n    \"\"\"\n    return string == string[::-1]\n\ndef is_valid_email(email: str) -> bool:\n    \"\"\" Return True if given string is a valid email address, False otherwise.\n    The email address is valid if it contains a single @ symbol, and the part\n    before the @ contains only alphanumeric characters, and the part after the\n    @ contains only characters, digits, and a few special characters.\n    >>> is_valid_email('john@doe.com')\n    True\n    >>> is_valid_email('john@doe')\n    False\n    >>> is_valid_email('john@doe@doe.com')\n    False\n    \"\"\"\n    at_sign_index = email.index('@')\n    if at_sign_index < 1 or at_sign_index + 1 == len(email):\n        return False\n    return email[at_sign_index - 1].isalnum() and email[at_sign_index + 1:].replace('.', '').isalnum()\n\ndef remove_duplicates(string: str) -> str:\n    \"\"\" Return given string without any duplicate consecutive characters.\n    >>> remove_duplicates('john')\n    'john'\n    >>> remove_duplicates('johnny')\n    'john'\n    >>> remove_duplicates('johoohohooh')\n    'joho'\n    \"\"\"\n    return ''.join(a for a, b in zip(string, string[1:]) if a != b)\n\ndef count_consonants(string: str) -> int:\n    \"\"\" Return number of consonants in given string.\n    >>> count_consonants('john')\n    2\n    >>> count_conson"
    },
    {
      "rank": 49,
      "score": 10.0,
      "candidate": "return len(string)\n\n\ndef is_palindrome(string: str) -> bool:\n    \"\"\" Return whether given string is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('abba')\n    True\n    >>> is_palindrome('abbc')\n    False\n    \"\"\"\n    if strlen(string) <= 1:\n        return True\n    else:\n        return string[0] == string[-1] and is_palindrome(string[1:-1])\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 50,
      "score": 10.0,
      "candidate": "count = 0\n    for _ in string:\n        count += 1\n    return count\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 51,
      "score": 10.0,
      "candidate": "count = 0\n    for i in string:\n        count += 1\n    return count\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 52,
      "score": 10.0,
      "candidate": "# your code here\n    return len(string)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 53,
      "score": 10.0,
      "candidate": "return len(string)\n\ndef is_palindrome(string: str) -> bool:\n    \"\"\" Return whether given string is palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('abc')\n    False\n    \"\"\"\n    return string == string[::-1]\n\ndef is_pangram(string: str) -> bool:\n    \"\"\" Return whether given string is pangram\n    >>> is_pangram('abcdefghijklmnopqrstuvwxyz')\n    True\n    >>> is_pangram('abcdefghijklmnopqrstuvwxy')\n    False\n    \"\"\"\n    return len(set(string)) == 26\n\ndef str_to_int(string: str) -> int:\n    \"\"\" Return integer representation of given string\n    >>> str_to_int('123')\n    123\n    \"\"\"\n    return int(string)\n\ndef str_to_float(string: str) -> float:\n    \"\"\" Return float representation of given string\n    >>> str_to_float('12.3')\n    12.3\n    \"\"\"\n    return float(string)\n\ndef int_to_str(integer: int) -> str:\n    \"\"\" Return string representation of given integer\n    >>> int_to_str(123)\n    '123'\n    \"\"\"\n    return str(integer)\n\ndef float_to_str(floating: float) -> str:\n    \"\"\" Return string representation of given float\n    >>> float_to_str(12.3)\n    '12.3'\n    \"\"\"\n    return str(floating)\n\ndef int_to_float(integer: int) -> float:\n    \"\"\" Return float representation of given integer\n    >>> int_to_float(123)\n    123.0\n    \"\"\"\n    return float(integer)\n\ndef float_to_int(floating: float) -> int:\n    \"\"\" Return integer representation of given float\n    >>> float_to_int(12.3)\n    12\n    \"\"\""
    },
    {
      "rank": 54,
      "score": 10.0,
      "candidate": "return len(string)"
    },
    {
      "rank": 55,
      "score": 10.0,
      "candidate": "return len(string)\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 56,
      "score": 10.0,
      "candidate": "count = 0\n    for char in string:\n        count += 1\n    return count\n\n\ndef strlen_v2(string: str) -> int:\n    return len(string)\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 57,
      "score": 10.0,
      "candidate": "return len(string)\n\n\ndef sum(a: int, b: int) -> int:\n    \"\"\" Return sum of two integers\n    >>> sum(1, 1)\n    2\n    >>> sum(0, 1)\n    1\n    \"\"\"\n    return a + b\n\n\ndef main() -> None:\n    \"\"\" Print sum of two integers and length of string\n    \"\"\"\n    print(sum(1, 1))\n    print(strlen('abc'))\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()\n    main()"
    },
    {
      "rank": 58,
      "score": 10.0,
      "candidate": "return len(string)\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 59,
      "score": 10.0,
      "candidate": "return len(string)\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 60,
      "score": 10.0,
      "candidate": "count = 0\n    for c in string:\n        count += 1\n    return count\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 61,
      "score": 9.0,
      "candidate": "return len(string)\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 62,
      "score": 9.0,
      "candidate": "return len(string)\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 63,
      "score": 9.0,
      "candidate": "# Use a for loop to count the number of characters in a string\n    count = 0\n    for _ in string:\n        count += 1\n\n    return count\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 64,
      "score": 9.0,
      "candidate": "return len(string)\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 65,
      "score": 9.0,
      "candidate": "return len(string)\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 66,
      "score": 9.0,
      "candidate": "return len(string)\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 67,
      "score": 9.0,
      "candidate": "return len(string)\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 68,
      "score": 9.0,
      "candidate": "return len(string)\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 69,
      "score": 9.0,
      "candidate": "return len(string)\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 70,
      "score": 9.0,
      "candidate": "return len(string)"
    },
    {
      "rank": 71,
      "score": 9.0,
      "candidate": "return len(string)\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 72,
      "score": 9.0,
      "candidate": "return len(string)\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 73,
      "score": 8.0,
      "candidate": "return len(string)"
    },
    {
      "rank": 74,
      "score": 8.0,
      "candidate": "# your code here\n    return len(string)\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 75,
      "score": 8.0,
      "candidate": "count = 0\n    for i in string:\n        count += 1\n    return count\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 76,
      "score": 8.0,
      "candidate": "# Your code here\n    return len(string)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 77,
      "score": 8.0,
      "candidate": "return len(string)\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 78,
      "score": 8.0,
      "candidate": "length = 0\n    for char in string:\n        length += 1\n    return length\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 79,
      "score": 8.0,
      "candidate": "count = 0\n    for _ in string:\n        count += 1\n    return count\n\n\ndef main():\n    print(strlen(''))\n    print(strlen('abc'))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 80,
      "score": 8.0,
      "candidate": "return len(string)\n\n\ndef main():\n    print(strlen(''))\n    print(strlen('abc'))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 81,
      "score": 8.0,
      "candidate": "length = 0\n    for char in string:\n        length += 1\n    return length\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 82,
      "score": 8.0,
      "candidate": "return len(string)\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 83,
      "score": 8.0,
      "candidate": "return len(string)\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 84,
      "score": 8.0,
      "candidate": "length = 0\n    for i in string:\n        length += 1\n    return length\n\nprint(strlen(''))\nprint(strlen('abc'))"
    },
    {
      "rank": 85,
      "score": 8.0,
      "candidate": "# return len(string)\n\n    # O(1)\n    if not string:\n        return 0\n\n    # O(n)\n    return len(string)\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 86,
      "score": 8.0,
      "candidate": "if string == '':\n        return 0\n    return 1 + strlen(string[1:])\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 87,
      "score": 8.0,
      "candidate": "return len(string)"
    },
    {
      "rank": 88,
      "score": 8.0,
      "candidate": "return len(string)"
    },
    {
      "rank": 89,
      "score": 8.0,
      "candidate": "count = 0\n    for _ in string:\n        count += 1\n    return count\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 90,
      "score": 8.0,
      "candidate": "return len(string)\n\n\ndef main():\n    print(strlen(''))\n    print(strlen('abc'))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 91,
      "score": 8.0,
      "candidate": "return len(string)\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 92,
      "score": 8.0,
      "candidate": "return len(string)\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 93,
      "score": 8.0,
      "candidate": "count = 0\n    for _ in string:\n        count += 1\n    return count\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 94,
      "score": 8.0,
      "candidate": "# Initialize an accumulator variable\n    acc = 0\n\n    # Loop over each character in the string\n    for c in string:\n        # Increment the accumulator\n        acc += 1\n\n    # Return the length of the string\n    return acc\n\n\nprint(strlen(''))\nprint(strlen('abc'))"
    },
    {
      "rank": 95,
      "score": 1.0,
      "candidate": "return len(string)\n\n\ndef strcat(string1: str, string2: str) -> str:\n    \"\"\" Concatenate given strings\n    >>> strcat('abc', 'def')\n    'abcdef'\n    \"\"\"\n    return string1 + string2\n\n\ndef strcmp(string1: str, string2: str) -> bool:\n    \"\"\" Return if given strings are equal\n    >>> strcmp('abc', 'abc')\n    True\n    >>> strcmp('abc', 'def')\n    False\n    \"\"\"\n    return string1 == string2\n\n\ndef strchr(string: str, char: str) -> str:\n    \"\"\" Return first occurrence of given character in given string\n    >>> strchr('abcdef', 'c')\n    'cdef'\n    \"\"\"\n    return string[string.index(char):]\n\n\ndef strcpy(string: str, char: str) -> str:\n    \"\"\" Return copy of given string\n    >>> strcpy('abc', 'd')\n    'd'\n    \"\"\"\n    return char * strlen(string)\n\n\ndef strdup(string: str) -> str:\n    \"\"\" Return copy of given string\n    >>> strdup('abc')\n    'abc'\n    \"\"\"\n    return string\n\n\ndef strncpy(string: str, char: str, n: int) -> str:\n    \"\"\" Return copy of given string with at most n characters\n    >>> strncpy('abc', 'd', 2)\n    'ab'\n    \"\"\"\n    return char * n\n\n\ndef strpbrk(string: str, char: str) -> str:\n    \"\"\" Return first occurrence of given character in given string\n    >>> strpbrk('abcdef', 'c')\n    'cdef'\n    \"\"\"\n    return string[string.index(char):]\n\n\ndef strstr(string: str, char: str) -> str:\n    \"\"\" Return first occurrence of given string in given string\n    >>> strstr('abcdef', 'cd')\n    'cd'\n    \"\"\"\n    return string[string.index(char):]\n\n\ndef strtok(string: str, char: str) -> str:\n    \"\"\" Return first occurrence of given character in"
    },
    {
      "rank": 96,
      "score": 1.0,
      "candidate": "return len(string)\n\n\ndef strcat(s1: str, s2: str) -> str:\n    \"\"\" Return concatenation of two strings\n    >>> strcat('', '')\n    ''\n    >>> strcat('abc', 'def')\n    'abcdef'\n    >>> strcat('abc', 'defg')\n    'abcdefg'\n    \"\"\"\n    return s1 + s2\n\n\ndef strcmp(s1: str, s2: str) -> int:\n    \"\"\" Return 0 if both string are equal, 1 if s1 > s2, -1 if s1 < s2\n    >>> strcmp('', '')\n    0\n    >>> strcmp('abc', 'abc')\n    0\n    >>> strcmp('abc', 'def')\n    -1\n    >>> strcmp('def', 'abc')\n    1\n    >>> strcmp('abc', 'abcd')\n    -1\n    >>> strcmp('abcd', 'abc')\n    1\n    \"\"\"\n    if s1 == s2:\n        return 0\n    elif s1 > s2:\n        return 1\n    else:\n        return -1\n\n\ndef strncmp(s1: str, s2: str, n: int) -> int:\n    \"\"\" Return 0 if both string are equal, 1 if s1 > s2, -1 if s1 < s2\n    >>> strncmp('', '', 0)\n    0\n    >>> strncmp('abc', 'abc', 0)\n    0\n    >>> strncmp('abc', 'def', 0)\n    0\n    >>> strncmp('abc', 'def', 2)\n    0\n    >>> strncmp('abc', 'def', 1)\n    0\n    >>> strncmp('abc', 'def', 3)\n    0\n    >>> strncmp('abc', 'def', 4)\n    0\n    >>> strncmp('abc', 'def', 5)\n    0\n    >>> strncmp('abc', 'def', 6)\n    0\n    >>> strncmp('abc', 'def', 7)\n    0\n    >>> strncmp('abc', 'def', 8"
    },
    {
      "rank": 97,
      "score": 1.0,
      "candidate": "return len(string)\n\n\ndef find_index(string: str, target: str) -> int:\n    \"\"\" Return the index of the first occurrence of target in string, or else -1\n    >>> find_index('abcdef', 'c')\n    2\n    >>> find_index('abcdef', 'cd')\n    2\n    >>> find_index('abcdef', 'g')\n    -1\n    \"\"\"\n    for i, c in enumerate(string):\n        if c == target:\n            return i\n    return -1\n\n\ndef is_palindrome(s: str) -> bool:\n    \"\"\" Return whether the given string is a palindrome\n    >>> is_palindrome('noon')\n    True\n    >>> is_palindrome('racecar')\n    True\n    >>> is_palindrome('dented')\n    False\n    \"\"\"\n    return s == s[::-1]\n\n\ndef is_valid_email(email: str) -> bool:\n    \"\"\" Return whether the given string is a valid email address\n    >>> is_valid_email('a@b.com')\n    True\n    >>> is_valid_email('a.b@c.com')\n    True\n    >>> is_valid_email('a@b')\n    False\n    >>> is_valid_email('a@bc')\n    False\n    >>> is_valid_email('a@b.com.com')\n    False\n    \"\"\"\n    parts = email.split('@')\n    if len(parts) != 2:\n        return False\n    local, domain = parts\n    if '.' not in domain:\n        return False\n    return all(c.isalnum() or c == '-' for c in local)\n\n\ndef is_valid_phone_number(s: str) -> bool:\n    \"\"\" Return whether the given string is a valid phone number\n    >>> is_valid_phone_number('123-456-7890')\n    True\n    >>> is_valid_phone_number('123-456-abc')\n    False\n    >>> is_valid_phone_number('123-abc-7890')\n    False\n    \"\"\""
    },
    {
      "rank": 98,
      "score": 1.0,
      "candidate": "return len(string)\n\n\ndef strlen_alt(string: str) -> int:\n    \"\"\" Return length of given string\n    >>> strlen_alt('')\n    0\n    >>> strlen_alt('abc')\n    3\n    \"\"\"\n    if not string:\n        return 0\n    return 1 + strlen_alt(string[1:])"
    },
    {
      "rank": 99,
      "score": 1.0,
      "candidate": "return len(string)\n\n\ndef strcat(string1: str, string2: str) -> str:\n    \"\"\" Concatenate two strings\n    >>> strcat('abc', 'def')\n    'abcdef'\n    >>> strcat('', 'def')\n    'def'\n    >>> strcat('abc', '')\n    'abc'\n    >>> strcat('', '')\n    ''\n    \"\"\"\n    return string1 + string2\n\n\ndef strcmp(string1: str, string2: str) -> int:\n    \"\"\" Compare two strings\n    >>> strcmp('abc', 'abc')\n    0\n    >>> strcmp('abc', 'def')\n    -1\n    >>> strcmp('def', 'abc')\n    1\n    \"\"\"\n    if string1 == string2:\n        return 0\n    if string1 < string2:\n        return -1\n    if string1 > string2:\n        return 1\n\n\ndef strchr(string: str, char: str) -> str:\n    \"\"\" Return first occurence of a char in a string\n    >>> strchr('abcdef', 'd')\n    'd'\n    >>> strchr('abcdef', 'z')\n    >>> strchr('abcdef', 'a')\n    'a'\n    >>> strchr('', 'a')\n    >>> strchr('a', '')\n    'a'\n    \"\"\"\n    for c in string:\n        if c == char:\n            return c\n\n\ndef strcpy(string1: str, string2: str) -> str:\n    \"\"\" Copy one string to another\n    >>> strcpy('abc', 'def')\n    'def'\n    >>> strcpy('', 'def')\n    'def'\n    >>> strcpy('abc', '')\n    ''\n    >>> strcpy('', '')\n    ''\n    \"\"\"\n    return string2[:]\n\n\ndef strncpy(string1: str, string2: str, maxlen: int) -> str:\n    \"\"\" Copy at most maxlen chars from string2 to string1\n    >>> strncpy('abc', 'def', 2)\n    'de'\n    >>> strncpy('abc', 'def', 1)\n    'd'"
    },
    {
      "rank": 100,
      "score": 1.0,
      "candidate": "return len(string)\n\n\ndef strcat(string: str, append: str) -> str:\n    \"\"\" Return string with append string appended\n    >>> strcat('abc', 'def')\n    'abcdef'\n    \"\"\"\n    return string + append\n\n\ndef strinsert(string: str, index: int, append: str) -> str:\n    \"\"\" Return string with append string inserted at index\n    >>> strinsert('abc', 0, 'd')\n    'dabc'\n    >>> strinsert('abc', 3, 'd')\n    'abdcd'\n    \"\"\"\n    return string[:index] + append + string[index:]\n\n\ndef strcontains(string: str, substring: str) -> bool:\n    \"\"\" Return whether string contains substring\n    >>> strcontains('abc', 'a')\n    True\n    >>> strcontains('abc', 'd')\n    False\n    \"\"\"\n    return substring in string\n\n\ndef strreplace(string: str, old: str, new: str) -> str:\n    \"\"\" Return string with all occurences of substring old replaced by new\n    >>> strreplace('aabc', 'a', 'd')\n    'dbdc'\n    \"\"\"\n    return string.replace(old, new)\n\n\ndef strstrip(string: str) -> str:\n    \"\"\" Return string with whitespace stripped from start and end\n    >>> strstrip('  abc  ')\n    'abc'\n    \"\"\"\n    return string.strip()\n\n\ndef strpad(string: str, width: int, padwith: str = ' ') -> str:\n    \"\"\" Return string padded with padwith to given width\n    >>> strpad('abc', 5, '0')\n    'abc00'\n    \"\"\"\n    return string.rjust(width, padwith)\n\n\ndef strrepeat(string: str, times: int) -> str:\n    \"\"\" Return string repeated given number of times\n    >>> strrepeat('abc', 3)\n    'abcabcabc'\n    \"\"\"\n    return string * times\n\n\ndef strsplit(string: str, sep: str = None) -> list:\n    \"\"\" Return list of substrings of string split by separator sep\n    >>> strsplit('a,b,"
    }
  ]
}