{
  "timestamp": "2025-09-14T22:10:33.424845",
  "method": "improved_llm_judge",
  "judge_model": "codellama/CodeLlama-7b-Python-hf",
  "target_model": "codellama-7b",
  "dataset": "humaneval",
  "problem_number": 147,
  "total_candidates": 100,
  "results": [
    {
      "rank": 1,
      "score": 10.0,
      "candidate": "def get_triples(n):\n        \"\"\"\n        Returns the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n        and a[i] + a[j] + a[k] is a multiple of 3.\n        \"\"\"\n        if n < 3:\n            return 0\n        count = 0\n        a = [i * i - i + 1 for i in range(1, n + 1)]\n        for i in range(n):\n            for j in range(i + 1, n):\n                for k in range(j + 1, n):\n                    if (a[i] + a[j] + a[k]) % 3 == 0:\n                        count += 1\n        return count\n\n    return get_triples(n)\n\n\nif __name__ == \"__main__\":\n    print(get_max_triples(5))\n    print(get_max_triples(10))\n    print(get_max_triples(15))"
    },
    {
      "rank": 2,
      "score": 10.0,
      "candidate": "pass\n\n\nif __name__ == \"__main__\":\n    n = 5\n    out = get_max_triples(n)\n    print(out)"
    },
    {
      "rank": 3,
      "score": 10.0,
      "candidate": "def count_triples(n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        a = [i * i - i + 1 for i in range(1, n + 1)]\n        print(a)\n        count = 0\n        for i in range(n):\n            for j in range(i + 1, n):\n                for k in range(j + 1, n):\n                    if a[i] + a[j] + a[k] % 3 == 0:\n                        count += 1\n        return count\n\n    return count_triples(n)\n\n\nprint(get_max_triples(5))"
    },
    {
      "rank": 4,
      "score": 10.0,
      "candidate": "result = 0\n    for i in range(1, n):\n        for j in range(i+1, n):\n            for k in range(j+1, n):\n                if (i*i - i + 1 + j*j - j + 1 + k*k - k + 1) % 3 == 0:\n                    result += 1\n    return result\n\nif __name__ == \"__main__\":\n    print(get_max_triples(5))\n    print(get_max_triples(10))"
    },
    {
      "rank": 5,
      "score": 10.0,
      "candidate": "# 1. Brute Force\n    #   O(n^3)\n    # def get_max_triples(n):\n    #     a = [i * i - i + 1 for i in range(1, n+1)]\n    #     count = 0\n    #     for i in range(n-1):\n    #         for j in range(i+1, n-1):\n    #             for k in range(j+1, n):\n    #                 if (a[i] + a[j] + a[k]) % 3 == 0:\n    #                     count += 1\n    #     return count\n    \n    # 2. Efficient\n    #   O(n^2)\n    # def get_max_triples(n):\n    #     a = [i * i - i + 1 for i in range(1, n+1)]\n    #     count = 0\n    #     for i in range(n-1):\n    #         for j in range(i+1, n-1):\n    #             for k in range(j+1, n):\n    #                 if (a[i] + a[j] + a[k]) % 3 == 0:\n    #                     count += 1\n    #     return count\n    \n    # 3. Efficient\n    #   O(n)\n    def get_max_triples(n):\n        a = [i * i - i + 1 for i in range(1, n+1)]\n        count = 0\n        for i in range(n-1):\n            for j in range(i+1, n-1):\n                for k in range(j+1, n):\n                    if (a[i] + a[j] + a[k]) % 3 == 0:\n                        count += 1\n        return count\n    \n    return get_max_triples(n)"
    },
    {
      "rank": 6,
      "score": 10.0,
      "candidate": "# 1. Take a[i] = i * i - i + 1\n    # 2. Generate a new array b[i] = a[i] + a[j] + a[k]\n    # 3. Generate a new array c[i] = (a[i] + a[j] + a[k]) // 3\n    # 4. Count how many times the value in c is repeated\n\n    # n = 5\n    # a = [1, 3, 7, 13, 21]\n    # b = [4, 8, 16, 26, 38]\n    # c = [1, 1, 1, 2, 2]\n    # return 1\n\n    # n = 10\n    # a = [1, 3, 7, 13, 21, 34, 55, 84, 119, 162]\n    # b = [4, 8, 16, 26, 38, 62, 98, 138, 187, 246]\n    # c = [1, 1, 1, 2, 2, 3, 3, 4, 4, 5]\n    # return 4\n\n    # n = 20\n    # a = [1, 3, 7, 13, 21, 34, 55, 84, 119, 162, 220, 293, 381, 484, 605, 756, 932, 1139, 1384, 1689]\n    # b = [4, 8, 16, 26, 38, 62, 98, 138, 187, 246, 310, 390, 484, 595, 720, 872, 1050, 1254,"
    },
    {
      "rank": 7,
      "score": 10.0,
      "candidate": "pass\n\n\ndef get_max_triples_soln(n):\n    \"\"\"\n    Solution:\n    - Initialize an array with length n, where each element is the ith element of the array a.\n    - For each element in the array, find the sum of the elements of the array.\n    - Return the number of elements in the array that are multiples of 3.\n    \"\"\"\n    arr = [i*i - i + 1 for i in range(1, n+1)]\n    return len([i for i in arr if i % 3 == 0])\n\n\n# Tests\nassert get_max_triples_soln(5) == 1"
    },
    {
      "rank": 8,
      "score": 10.0,
      "candidate": "# n = 5\n    # a = [1, 3, 7, 13, 21]\n\n    # i = 1\n    # j = 3\n    # k = 5\n    # a[i] + a[j] + a[k] = 3 + 7 + 21 = 31\n\n    # i = 1\n    # j = 2\n    # k = 4\n    # a[i] + a[j] + a[k] = 1 + 7 + 13 = 21\n\n    # i = 1\n    # j = 3\n    # k = 5\n    # a[i] + a[j] + a[k] = 3 + 7 + 21 = 31\n\n    # i = 2\n    # j = 4\n    # k = 5\n    # a[i] + a[j] + a[k] = 7 + 13 + 21 = 41\n\n    # i = 3\n    # j = 4\n    # k = 5\n    # a[i] + a[j] + a[k] = 7 + 13 + 21 = 41\n\n    # total = 1 + 1 + 2 = 3\n    # total = 3\n    # return total\n\n    # 1 + 1 + 2 = 3\n    # 1 + 2 + 2 = 4\n    # 2 + 2 + 2 = 6\n    # 1 + 1 + 3 = 4\n    # 1 + 3 + 3 = 7\n    # 3 + 3 + 3 = 9\n    # 2 + 2 + 3 = 7\n    # 1 + 2 + 4 = 6\n    # 2 + 3 + 4 = 9\n    # 3 + 4 + 4 = 12\n    # 2 + 2 + 4 = 8\n    # 1 + 3 + 5 = 6\n    # 3 + 5 + 5 = 14\n    #"
    },
    {
      "rank": 9,
      "score": 10.0,
      "candidate": "# create array\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n\n    # get triples\n    triples = []\n    for i in range(len(a) - 2):\n        for j in range(i + 1, len(a) - 1):\n            for k in range(j + 1, len(a)):\n                if a[i] + a[j] + a[k] % 3 == 0:\n                    triples.append([a[i], a[j], a[k]])\n    return len(triples)\n\n\nif __name__ == \"__main__\":\n    n = 5\n    print(get_max_triples(n))"
    },
    {
      "rank": 10,
      "score": 10.0,
      "candidate": "# your code goes here\n    if n % 3 == 0:\n        return 1\n    if n % 3 == 1:\n        return 0\n    if n % 3 == 2:\n        return 2\n\n\nprint(get_max_triples(5))\nprint(get_max_triples(6))\nprint(get_max_triples(7))"
    },
    {
      "rank": 11,
      "score": 10.0,
      "candidate": "# O(n^2) solution\n    # a = [i*i - i + 1 for i in range(1,n+1)]\n    # count = 0\n    # for i in range(1, n-2):\n    #     for j in range(i+1, n-1):\n    #         for k in range(j+1, n):\n    #             if (a[i] + a[j] + a[k]) % 3 == 0:\n    #                 count += 1\n    # return count\n\n    # O(n) solution\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    for i in range(1, n - 2):\n        for j in range(i + 1, n - 1):\n            k = 2 * a[i] - a[j]\n            if k in a and a.index(k) > j:\n                count += 1\n    return count\n\nif __name__ == \"__main__\":\n    n = 5\n    print(get_max_triples(n))"
    },
    {
      "rank": 12,
      "score": 10.0,
      "candidate": "pass\n\n\ndef get_max_triples_inplace(n):\n    \"\"\"\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \"\"\"\n    pass\n\n\ndef get_max_triples_hash(n):\n    \"\"\"\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \"\"\"\n    pass\n\n\ndef get_max_triples_sort(n):\n    \"\"\"\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a["
    },
    {
      "rank": 13,
      "score": 8.444444444444445,
      "candidate": "# create list of squares\n    squares = [i * i for i in range(1, n + 1)]\n    # count the number of triples\n    return sum(squares[i] + squares[j] + squares[k] == 0 for i in range(n) for j in range(i + 1, n) for k in range(j + 1, n))\n\n\nif __name__ == \"__main__\":\n    print(get_max_triples(10))\n    print(get_max_triples(100))\n    print(get_max_triples(1000))"
    },
    {
      "rank": 14,
      "score": 8.444444444444445,
      "candidate": "pass\n\n\nif __name__ == \"__main__\":\n    n = 5\n    out = get_max_triples(n)\n    print(out)"
    },
    {
      "rank": 15,
      "score": 8.444444444444445,
      "candidate": "# Create an array of length n\n    # For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n    a = [i * i - i + 1 for i in range(1, n+1)]\n    # return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    # and a[i] + a[j] + a[k] is a multiple of 3.\n    # print(a)\n    count = 0\n    for i in range(1, n-1):\n        for j in range(i+1, n):\n            for k in range(j+1, n+1):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n    return count\n\n\nif __name__ == \"__main__\":\n    n = 5\n    print(get_max_triples(n))\n    n = 10\n    print(get_max_triples(n))"
    },
    {
      "rank": 16,
      "score": 8.444444444444445,
      "candidate": "# Initialize the array\n    a = [i*i - i + 1 for i in range(1,n+1)]\n    print(a)\n    count = 0\n    # Iterate over the array\n    for i in range(0,n-2):\n        for j in range(i+1,n-1):\n            for k in range(j+1,n):\n                if a[i]+a[j]+a[k]%3==0:\n                    count+=1\n    return count\n\n\nif __name__ == \"__main__\":\n    print(get_max_triples(5))\n    print(get_max_triples(10))\n    print(get_max_triples(1000))"
    },
    {
      "rank": 17,
      "score": 8.444444444444445,
      "candidate": "# initialize the array\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    print(a)\n\n    count = 0\n    for i in range(len(a)):\n        for j in range(i + 1, len(a)):\n            for k in range(j + 1, len(a)):\n                if a[i] + a[j] + a[k] % 3 == 0:\n                    count += 1\n    return count\n\n\n# test cases\nprint(get_max_triples(5))  # 1\nprint(get_max_triples(12))  # 7"
    },
    {
      "rank": 18,
      "score": 8.444444444444445,
      "candidate": "pass"
    },
    {
      "rank": 19,
      "score": 8.444444444444445,
      "candidate": "# Brute Force\n    # time complexity O(n^3)\n    # space complexity O(1)\n\n    # # Triplet Sum Equal to Zero\n    # def get_max_triples(n):\n    #     # Write your code here\n    #     count = 0\n    #     for i in range(1, n):\n    #         for j in range(i+1, n):\n    #             for k in range(j+1, n):\n    #                 if (i*i - i + 1) + (j*j - j + 1) + (k*k - k + 1) == 0:\n    #                     count += 1\n    #     return count\n\n    # Optimized Solution\n    # time complexity O(n^2)\n    # space complexity O(1)\n\n    # # Triplet Sum Equal to Zero\n    # def get_max_triples(n):\n    #     # Write your code here\n    #     count = 0\n    #     for i in range(1, n):\n    #         for j in range(i+1, n):\n    #             k = -i - j\n    #             if k >= j:\n    #                 break\n    #             if (i*i - i + 1) + (j*j - j + 1) + (k*k - k + 1) == 0:\n    #                 count += 1\n    #     return count\n\n    # Optimized Solution\n    # time complexity O(n^2)\n    # space complexity O(1)\n\n    # # Triplet Sum Equal to Zero\n    # def get_max_triples(n):\n    #     # Write your code here\n    #     count = 0\n    #     for i in range(1, n):\n    #         for j in range(i+1, n):\n    #             k = (i*i - i + 1) + (j*j - j + 1)\n    #             k //= 3\n    #             if k >= j:\n    #                 break\n    #             if (k*k - k + 1) == -i"
    },
    {
      "rank": 20,
      "score": 8.444444444444445,
      "candidate": "count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if (i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0:\n                    count += 1\n    return count\n\nif __name__ == \"__main__\":\n    n = 5\n    print(get_max_triples(n))\n    n = 10\n    print(get_max_triples(n))"
    },
    {
      "rank": 21,
      "score": 8.444444444444445,
      "candidate": "# Code here\n    pass\n\n\ndef main():\n    n = int(input(\"Enter the number : \"))\n    print(f\"Maximum triples are : {get_max_triples(n)}\")\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 22,
      "score": 8.444444444444445,
      "candidate": "if n<3:\n        return 0\n    res = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            for k in range(j+1, n):\n                if (i*i-i+1)+(j*j-j+1)+(k*k-k+1)%3 == 0:\n                    res+=1\n    return res\n\nif __name__ == \"__main__\":\n    print(get_max_triples(5))"
    },
    {
      "rank": 23,
      "score": 8.444444444444445,
      "candidate": "pass\n\n\ndef main():\n    n = 5\n    res = get_max_triples(n)\n    print(res)\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 24,
      "score": 8.444444444444445,
      "candidate": "result = 0\n    for i in range(1, n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if (i * i - i + 1) + (j * j - j + 1) + (k * k - k + 1) % 3 == 0:\n                    result += 1\n    return result\n\n\nif __name__ == \"__main__\":\n    print(get_max_triples(5))\n    print(get_max_triples(6))\n    print(get_max_triples(10))"
    },
    {
      "rank": 25,
      "score": 8.444444444444445,
      "candidate": "# n = 5\n    # a = [1, 3, 7, 13, 21]\n    # i = 1, j = 3, k = 5\n    # i * i - i + 1 + j * j - j + 1 + k * k - k + 1 = 1 + 3 + 7 = 11\n    # 11 is divisible by 3\n    # We can use the following formula for a[i] = i * i - i + 1\n    # a[i] = (i * i - i) + 1\n    # a[i] = i * (i - 1) + 1\n    # a[i] = i * (i - 1) + 1 + 1\n    # a[i] = (i - 1) * (i - 1) + 2 * i + 1\n    # a[i] = (i - 1) * (i - 1) + (2 * i + 1)\n    # a[i] = (i - 1) * (i - 1) + (2 * i + 1)\n    # a[i] = (i - 1) * (i - 1) + (2 * i + 1)\n    # a[i] = (i - 1) * (i - 1) + (2 * i + 1)\n    # a[i] = (i - 1) * (i - 1) + (2 * i + 1)\n    # a[i] = (i - 1) * (i - 1) + (2 * i + 1)\n    # a[i] = (i - 1) * (i - 1) + (2 * i + 1)\n    # a[i] = (i - 1) * (i - 1) + (2 * i + 1)\n    # a[i] = (i - 1) * (i - 1) + (2 * i + 1)\n    # a[i] = (i - 1) * (i - 1) + (2 * i + 1)"
    },
    {
      "rank": 26,
      "score": 8.444444444444445,
      "candidate": "if n <= 2:\n        return 0\n    count = 0\n    for i in range(1, n - 2):\n        for j in range(i + 1, n - 1):\n            for k in range(j + 1, n):\n                if (i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0:\n                    count += 1\n    return count\n\n\nif __name__ == \"__main__\":\n    print(get_max_triples(5))\n    print(get_max_triples(10))\n    print(get_max_triples(15))"
    },
    {
      "rank": 27,
      "score": 8.444444444444445,
      "candidate": "# calculate the array values\n    arr = [i*i-i+1 for i in range(1, n+1)]\n    # count number of times 3 divides the sum of the three elements in a triple\n    count = 0\n    for i in range(n-2):\n        for j in range(i+1, n-1):\n            for k in range(j+1, n):\n                if (arr[i]+arr[j]+arr[k])%3 == 0:\n                    count+=1\n    return count\n\nif __name__ == \"__main__\":\n    n = 5\n    print(get_max_triples(n))"
    },
    {
      "rank": 28,
      "score": 8.444444444444445,
      "candidate": "# 1. The idea is to use the formula given in the problem statement.\n    #    For a given number n, we can find the value of a[i] for i = 1 to n.\n    #    We can find the number of valid triples by using the formula.\n    # 2. The formula is (a[i] + a[j] + a[k]) % 3 = 0, where 1 \u2264 i < j < k \u2264 n.\n    # 3. We can find the number of valid triples using the formula.\n    #    For example, for n = 5, we have a[i] = {1, 3, 7, 13, 21}.\n    #    The number of valid triples is (1 + 7 + 13) + (3 + 13 + 21) = 2 * 20 = 40.\n    #    The number of valid triples is (1 + 13 + 21) + (3 + 7 + 13) = 2 * 20 = 40.\n    # 4. The number of valid triples is calculated as 3 * (number of pairs) - (number of pairs with a[i] + a[j] + a[k] % 3 != 0).\n    # 5. The number of pairs is calculated as n * (n - 1) * (n - 2) / 6.\n    # 6. The number of pairs with a[i] + a[j] + a[k] % 3 != 0 can be calculated as follows.\n    #    Let's assume there are x triples (a[i], a[j], a[k]) with a[i] + a[j] + a[k] % 3 != 0.\n    #    The total number of triples is 3 * (number of pairs).\n    #    The total number of triples is 3 * (n * (n - 1) * (n - 2) / 6).\n    #    The number of triples with a[i] + a[j] + a[k] % 3 != 0 is 3 * (n *"
    },
    {
      "rank": 29,
      "score": 8.444444444444445,
      "candidate": "\"\"\"\n        Time Complexity: O(n)\n        Space Complexity: O(1)\n\n        If n is odd, then we can say that the answer will be zero.\n        If n is even, then we can say that the answer will be floor(n/2)\n\n        Let us consider an example.\n        n = 6.\n        We can say that the answer will be (n/2) = 3.\n        The valid triples are:\n        (1, 5, 9), (1, 7, 11), (3, 5, 7), (3, 7, 9), (5, 7, 11)\n\n        Now, we can say that the answer will be (n/2) - 1.\n        The valid triples are:\n        (1, 5, 9), (1, 7, 11), (3, 5, 7), (3, 7, 9), (5, 7, 11), (5, 9, 13), (7, 9, 15)\n\n        Now, we can say that the answer will be (n/2) - 2.\n        The valid triples are:\n        (1, 5, 9), (1, 7, 11), (3, 5, 7), (3, 7, 9), (5, 7, 11), (5, 9, 13), (7, 9, 15), (9, 11, 17)\n\n        We can see that the answer will be (n/2) - (n/2) = (n/2) - 1.\n        Therefore, the answer will be (n/2) - 1\n\n        If n = 7, then we can say that the answer will be 2.\n        The valid triples are:\n        (1, 5, 9), (1, 7, 11), (3, 5, 7), (3, 7, 9), (5, 7, 11), (5, 9, 13), (7, 9, 15)"
    },
    {
      "rank": 30,
      "score": 3.926139092254469,
      "candidate": "# 1. We can create the array using list comprehension\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    print(a)\n\n    # 2. Now we can iterate over the array and get the number of triples\n    count = 0\n    for i in range(n - 1):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if a[i] + a[j] + a[k] % 3 == 0:\n                    count += 1\n    return count\n\n\nif __name__ == \"__main__\":\n    n = 5\n    print(get_max_triples(n))"
    },
    {
      "rank": 31,
      "score": 3.7896064077536957,
      "candidate": "# code here\n    res = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if (i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0:\n                    res += 1\n    return res\n\n\ndef main():\n    n = 5\n    res = get_max_triples(n)\n    print(res)\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 32,
      "score": 3.761514928204013,
      "candidate": "if n <= 2:\n        return 0\n    if n == 3:\n        return 1\n\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    for i in range(1, n - 1):\n        for j in range(i + 1, n - 1):\n            for k in range(j + 1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n    return count\n\n\nif __name__ == \"__main__\":\n    n = 5\n    print(get_max_triples(n))"
    },
    {
      "rank": 33,
      "score": 3.732824384460777,
      "candidate": "# Solution\n    count = 0\n    for i in range(1, n):\n        for j in range(i + 1, n):\n            k = n - i - j\n            if k < j:\n                break\n            if (i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0:\n                count += 1\n    return count\n\n\nif __name__ == \"__main__\":\n    n = 5\n    print(get_max_triples(n))"
    },
    {
      "rank": 34,
      "score": 3.6781200142854114,
      "candidate": "max_triples = 0\n    a = [i*i - i + 1 for i in range(1, n+1)]\n    for i in range(len(a)-2):\n        for j in range(i+1, len(a)-1):\n            for k in range(j+1, len(a)):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    max_triples += 1\n    return max_triples\n\nif __name__ == '__main__':\n    n = 5\n    print(get_max_triples(n))\n    n = 12\n    print(get_max_triples(n))"
    },
    {
      "rank": 35,
      "score": 3.5285611131094576,
      "candidate": "if n <= 2:\n        return 0\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    for i in range(1, n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n + 1):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n    return count\n\n\ndef main():\n    n = 5\n    ans = get_max_triples(n)\n    print(ans)\n\n\nmain()"
    },
    {
      "rank": 36,
      "score": 3.5154997612479755,
      "candidate": "return get_max_triples_rec(n)\n\ndef get_max_triples_rec(n):\n    a = []\n    for i in range(1, n+1):\n        a.append(i*i - i + 1)\n    return get_max_triples_rec_helper(a, 0)\n\ndef get_max_triples_rec_helper(a, i):\n    if i == len(a) - 1:\n        return 0\n    max_triples = 0\n    for j in range(i + 1, len(a)):\n        for k in range(j + 1, len(a)):\n            if a[i] + a[j] + a[k] % 3 == 0:\n                max_triples += 1\n    return max_triples + get_max_triples_rec_helper(a, i+1)\n\nif __name__ == \"__main__\":\n    print(get_max_triples(5))\n    print(get_max_triples(10))"
    },
    {
      "rank": 37,
      "score": 3.501766448946012,
      "candidate": "a = [i * i - i + 1 for i in range(1, n + 1)]\n\n    count = 0\n    for i in range(n - 2):\n        for j in range(i + 1, n - 1):\n            for k in range(j + 1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n\n    return count\n\n\nif __name__ == \"__main__\":\n    n = 5\n    print(get_max_triples(n))"
    },
    {
      "rank": 38,
      "score": 3.4877725635611796,
      "candidate": "# first solution\n    # 1. create a array of length n\n    # 2. loop over the array and calculate the value of a[i] = i * i - i + 1\n    # 3. create a set of all the values in the array\n    # 4. loop over the set and check if the sum is multiple of 3\n    # 5. return the length of the set\n\n    # time complexity: O(n^2)\n    # space complexity: O(n)\n\n    arr = []\n    for i in range(1, n + 1):\n        arr.append(i * i - i + 1)\n\n    set_arr = set(arr)\n\n    count = 0\n    for i in set_arr:\n        for j in set_arr:\n            for k in set_arr:\n                if i < j < k and (i + j + k) % 3 == 0:\n                    count += 1\n\n    return count\n\n\nif __name__ == \"__main__\":\n    n = 5\n    print(get_max_triples(n))"
    },
    {
      "rank": 39,
      "score": 3.4656400595580994,
      "candidate": "if n == 1:\n        return 0\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    for i in range(n - 2):\n        for j in range(i + 1, n - 1):\n            for k in range(j + 1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n    return count\n\n\nif __name__ == \"__main__\":\n    print(get_max_triples(5))\n    print(get_max_triples(10))\n    print(get_max_triples(15))"
    },
    {
      "rank": 40,
      "score": 3.4112724560515946,
      "candidate": "if n < 3:\n        return 0\n    result = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if (i * i - i + 1) + (j * j - j + 1) + (k * k - k + 1) % 3 == 0:\n                    result += 1\n    return result\n\n\nprint(get_max_triples(5))\nprint(get_max_triples(10))"
    },
    {
      "rank": 41,
      "score": 3.406262911197099,
      "candidate": "# Get the array of the numbers\n    arr = [i * i - i + 1 for i in range(1, n + 1)]\n\n    # Get the total number of triples\n    total_triples = 0\n    for i in range(n - 2):\n        for j in range(i + 1, n - 1):\n            for k in range(j + 1, n):\n                if (arr[i] + arr[j] + arr[k]) % 3 == 0:\n                    total_triples += 1\n\n    return total_triples\n\n\nif __name__ == \"__main__\":\n    n = 5\n    result = get_max_triples(n)\n    print(result)"
    },
    {
      "rank": 42,
      "score": 3.3837173645764542,
      "candidate": "# O(n^2)\n    a = [i*i - i + 1 for i in range(1,n+1)]\n    count = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            for k in range(j+1,n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n    return count\n\nif __name__ == '__main__':\n    n = 5\n    res = get_max_triples(n)\n    print(res)"
    },
    {
      "rank": 43,
      "score": 3.3692332899977053,
      "candidate": "max_triples = 0\n    for i in range(1, n + 1):\n        for j in range(i + 1, n + 1):\n            for k in range(j + 1, n + 1):\n                if (i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0:\n                    max_triples += 1\n    return max_triples\n\n\nif __name__ == \"__main__\":\n    n = 5\n    print(get_max_triples(n))"
    },
    {
      "rank": 44,
      "score": 3.3238442690503462,
      "candidate": "# your code goes here\n    cnt = 0\n    for i in range(1, n + 1):\n        for j in range(1, n + 1):\n            for k in range(1, n + 1):\n                if i < j < k and (i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0:\n                    cnt += 1\n    return cnt\n\n\nif __name__ == '__main__':\n    print(get_max_triples(5))"
    },
    {
      "rank": 45,
      "score": 3.305838144420434,
      "candidate": "# Your code here\n    count = 0\n    for i in range(1, n + 1):\n        for j in range(i + 1, n + 1):\n            for k in range(j + 1, n + 1):\n                if (i * i - i + 1) + (j * j - j + 1) + (k * k - k + 1) % 3 == 0:\n                    count += 1\n    return count\n\n\nif __name__ == \"__main__\":\n    n = 5\n    print(get_max_triples(n))"
    },
    {
      "rank": 46,
      "score": 3.2712800217929825,
      "candidate": "count = 0\n    for i in range(1, n+1):\n        for j in range(i+1, n+1):\n            for k in range(j+1, n+1):\n                if (i*i - i + 1 + j*j - j + 1 + k*k - k + 1) % 3 == 0:\n                    count += 1\n    return count\n\n\nif __name__ == '__main__':\n    n = 5\n    print(get_max_triples(n))"
    },
    {
      "rank": 47,
      "score": 3.2483570765056164,
      "candidate": "# Your code here\n    # pass\n    max_triples = 0\n    # create an array of length n\n    a = [i*i - i + 1 for i in range(1, n+1)]\n    # loop through the array\n    for i in range(n-2):\n        for j in range(i+1, n-1):\n            for k in range(j+1, n):\n                # check if the sum of 3 elements is multiple of 3\n                if a[i] + a[j] + a[k] % 3 == 0:\n                    # increment the max triples\n                    max_triples += 1\n\n    return max_triples\n\n\nprint(get_max_triples(5))\nprint(get_max_triples(6))"
    },
    {
      "rank": 48,
      "score": 3.1878490091728358,
      "candidate": "# 1. Calculate a[i] for all i in [1, n]\n    # 2. For each i, count the number of j such that j < i and a[i] + a[j] is a multiple of 3\n    # 3. Sum up the counts\n\n    # Calculate a[i] for all i in [1, n]\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n\n    # For each i, count the number of j such that j < i and a[i] + a[j] is a multiple of 3\n    count = [0] * n\n    for i in range(1, n):\n        for j in range(i):\n            if a[i] + a[j] % 3 == 0:\n                count[i] += 1\n\n    # Sum up the counts\n    result = 0\n    for i in range(1, n):\n        result += count[i]\n\n    return result\n\n\nif __name__ == \"__main__\":\n    n = 5\n    print(get_max_triples(n))"
    },
    {
      "rank": 49,
      "score": 3.180818012523817,
      "candidate": "\"\"\"\n        Time Complexity: O(n)\n        Space Complexity: O(1)\n\n        Write a function get_max_triples that takes in a positive integer n and returns the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n    \"\"\"\n    # Applying the formula given in the problem statement\n    return (n * (n - 1) // 2) - (n * (n - 1) * (n - 2) // 6)\n\n\nif __name__ == \"__main__\":\n    n = 5\n    print(get_max_triples(n))"
    },
    {
      "rank": 50,
      "score": 3.180697802754207,
      "candidate": "max_triples = 0\n    a = [i*i - i + 1 for i in range(1, n+1)]\n\n    for i in range(0, n-2):\n        for j in range(i+1, n-1):\n            for k in range(j+1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    max_triples += 1\n    return max_triples\n\n\nif __name__ == \"__main__\":\n    n = 5\n    print(get_max_triples(n))"
    },
    {
      "rank": 51,
      "score": 3.1718091447842305,
      "candidate": "# Your code here\n    # Initialize the array\n    arr = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    for i in range(1, n - 1):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if (arr[i] + arr[j] + arr[k]) % 3 == 0:\n                    count += 1\n    return count\n\n\nif __name__ == \"__main__\":\n    n = 5\n    print(get_max_triples(n))"
    },
    {
      "rank": 52,
      "score": 3.165631715701782,
      "candidate": "pass\n\n\ndef get_max_triples_eff(n):\n    \"\"\"\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \"\"\"\n    pass\n\n\nif __name__ == \"__main__\":\n    print(get_max_triples(5))\n    print(get_max_triples_eff(5))"
    },
    {
      "rank": 53,
      "score": 3.1620419846973977,
      "candidate": "# Initialize a list of size n\n    a = [0] * n\n\n    # Loop through the list and populate with values\n    for i in range(n):\n        a[i] = i * i - i + 1\n\n    # Initialize the result to 0\n    res = 0\n\n    # Loop through the list and check the triplets\n    for i in range(n - 2):\n        for j in range(i + 1, n - 1):\n            for k in range(j + 1, n):\n                if a[i] + a[j] + a[k] % 3 == 0:\n                    res += 1\n\n    # Return the result\n    return res\n\n\ndef main():\n    print(\"Total triples: \" +\n          str(get_max_triples(5)))  # Should be 1\n    print(\"Total triples: \" +\n          str(get_max_triples(8)))  # Should be 2\n    print(\"Total triples: \" +\n          str(get_max_triples(12)))  # Should be 4\n\n\nmain()"
    },
    {
      "rank": 54,
      "score": 3.157123666297637,
      "candidate": "# Initialize the array\n    array = [i * i - i + 1 for i in range(1, n + 1)]\n    # Initialize the number of triples\n    triples = 0\n\n    for i in range(1, n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if (array[i] + array[j] + array[k]) % 3 == 0:\n                    triples += 1\n    return triples\n\n\nif __name__ == \"__main__\":\n    n = 5\n    print(get_max_triples(n))"
    },
    {
      "rank": 55,
      "score": 3.1209811357830173,
      "candidate": "res = 0\n    for i in range(1, n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if (i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0:\n                    res += 1\n    return res\n\n\nprint(get_max_triples(5))\nprint(get_max_triples(10))\nprint(get_max_triples(100))\nprint(get_max_triples(1000))"
    },
    {
      "rank": 56,
      "score": 3.104431797502378,
      "candidate": "if n < 1:\n        return 0\n\n    max_triples = 0\n    for i in range(1, n+1):\n        for j in range(i+1, n+1):\n            for k in range(j+1, n+1):\n                if (i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0:\n                    max_triples += 1\n\n    return max_triples\n\n\nif __name__ == \"__main__\":\n    n = 5\n    print(get_max_triples(n))"
    },
    {
      "rank": 57,
      "score": 3.0984306179345618,
      "candidate": "# O(n) time | O(n) space\n    # if n % 3 == 0:\n    #     return n // 3\n    # else:\n    #     return (n // 3) + 1\n    # O(n) time | O(n) space\n    # if n % 3 == 0:\n    #     return n // 3\n    # else:\n    #     return (n // 3) + 1\n\n    # O(n) time | O(1) space\n    # if n % 3 == 0:\n    #     return n // 3\n    # else:\n    #     return (n // 3) + 1\n    # O(1) time | O(1) space\n    return (n // 3) + (n % 3 == 0)\n\n\nif __name__ == \"__main__\":\n    n = 5\n    print(get_max_triples(n))"
    },
    {
      "rank": 58,
      "score": 3.085684140594985,
      "candidate": "arr = [i*i - i + 1 for i in range(1, n+1)]\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            for k in range(j+1, len(arr)):\n                if arr[i] + arr[j] + arr[k] % 3 == 0:\n                    count += 1\n    return count\n\n\nif __name__ == \"__main__\":\n    n = 5\n    out = 1\n    res = get_max_triples(n)\n    assert out == res, (out, res)\n\n    n = 12\n    out = 4\n    res = get_max_triples(n)\n    assert out == res, (out, res)\n\n    n = 29\n    out = 0\n    res = get_max_triples(n)\n    assert out == res, (out, res)\n\n    n = 100\n    out = 69\n    res = get_max_triples(n)\n    assert out == res, (out, res)"
    },
    {
      "rank": 59,
      "score": 3.055461294854933,
      "candidate": "# your code goes here\n    count = 0\n    for i in range(1, n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if (i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0:\n                    count += 1\n    return count\n\n\nif __name__ == '__main__':\n    n = 5\n    print(get_max_triples(n))"
    },
    {
      "rank": 60,
      "score": 3.033764102343962,
      "candidate": "n = int(n)\n    # init\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    # init result\n    result = 0\n    # init dp table\n    dp = [[0] * n for _ in range(n)]\n    # loop\n    for i in range(n):\n        for j in range(i + 1, n):\n            dp[i][j] = a[i] + a[j]\n            if dp[i][j] % 3 == 0:\n                for k in range(j + 1, n):\n                    if dp[i][j] + a[k] % 3 == 0:\n                        result += 1\n    return result\n\n\nif __name__ == \"__main__\":\n    print(get_max_triples(5))\n    print(get_max_triples(10))\n    print(get_max_triples(1))"
    },
    {
      "rank": 61,
      "score": 2.993251387631033,
      "candidate": "max_triples = 0\n    for i in range(1, n+1):\n        for j in range(i+1, n+1):\n            for k in range(j+1, n+1):\n                if (i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0:\n                    max_triples += 1\n    return max_triples\n\n\nprint(get_max_triples(5))\nprint(get_max_triples(8))\nprint(get_max_triples(12))"
    },
    {
      "rank": 62,
      "score": 2.963994939209833,
      "candidate": "# your code goes here\n    result = 0\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    for i in range(n - 2):\n        for j in range(i + 1, n - 1):\n            for k in range(j + 1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    result += 1\n    return result\n\n\nif __name__ == '__main__':\n    n = 5\n    print(get_max_triples(n))"
    },
    {
      "rank": 63,
      "score": 2.94217585880588,
      "candidate": "pass\n\n\nif __name__ == \"__main__\":\n    n = 5\n    result = get_max_triples(n)\n    print(result)"
    },
    {
      "rank": 64,
      "score": 2.930867849414408,
      "candidate": "pass\n\n\nif __name__ == \"__main__\":\n    n = 5\n    print(get_max_triples(n))"
    },
    {
      "rank": 65,
      "score": 2.9071705116680913,
      "candidate": "# Brute force solution\n    #  1st find all triplets\n    #  2nd check if sum of triplets is divisible by 3\n    #  3rd return the number of triplets\n\n    #  1st find all triplets\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    triplets = []\n    for i in range(n - 2):\n        for j in range(i + 1, n - 1):\n            for k in range(j + 1, n):\n                triplets.append((a[i], a[j], a[k]))\n\n    #  2nd check if sum of triplets is divisible by 3\n    num_triplets = 0\n    for triplet in triplets:\n        if triplet[0] + triplet[1] + triplet[2] % 3 == 0:\n            num_triplets += 1\n\n    #  3rd return the number of triplets\n    return num_triplets\n\n\ndef main():\n    print(\"Number of triples is: \" +\n          str(get_max_triples(5)))\n\n\nmain()"
    },
    {
      "rank": 66,
      "score": 2.887111849756732,
      "candidate": "# n = 5\n    # a = [1, 3, 7, 13, 21]\n    # return 1\n    if n < 3:\n        return 0\n    a = [x * x - x + 1 for x in range(1, n + 1)]\n    print(a)\n    ans = 0\n    for i in range(n - 1, 0, -1):\n        for j in range(i - 1, 0, -1):\n            for k in range(j - 1, 0, -1):\n                if a[i] + a[j] + a[k] % 3 == 0:\n                    ans += 1\n    return ans\n\n\nif __name__ == \"__main__\":\n    n = 5\n    res = get_max_triples(n)\n    print(res)"
    },
    {
      "rank": 67,
      "score": 2.8829315215254097,
      "candidate": "result = 0\n    for i in range(1, n + 1):\n        for j in range(i + 1, n + 1):\n            for k in range(j + 1, n + 1):\n                if (i * i - i + 1) + (j * j - j + 1) + (k * k - k + 1) % 3 == 0:\n                    result += 1\n\n    return result\n\n\nif __name__ == \"__main__\":\n    n = 5\n    print(get_max_triples(n))"
    },
    {
      "rank": 68,
      "score": 2.882923312638332,
      "candidate": "def get_max_triples_rec(n):\n        a = [0] * n\n        for i in range(n):\n            a[i] = i * i - i + 1\n        count = 0\n        for i in range(n - 2):\n            for j in range(i + 1, n - 1):\n                for k in range(j + 1, n):\n                    if a[i] + a[j] + a[k] % 3 == 0:\n                        count += 1\n        return count\n\n    def get_max_triples_dp(n):\n        a = [0] * n\n        for i in range(n):\n            a[i] = i * i - i + 1\n        count = 0\n        for i in range(n - 2):\n            for j in range(i + 1, n - 1):\n                for k in range(j + 1, n):\n                    if a[i] + a[j] + a[k] % 3 == 0:\n                        count += 1\n        return count\n\n    return get_max_triples_dp(n)\n\n\n\n\ndef get_max_triples_optimized(n):\n    \"\"\"\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \"\"\"\n    def get_max_triples_rec(n):\n        a = [0] * n\n        for i in range(n):\n            a[i"
    },
    {
      "rank": 69,
      "score": 2.8541531251033616,
      "candidate": "# Initialize an empty array\n    arr = []\n    # Iterate through the numbers from 1 to n\n    for i in range(1, n+1):\n        # Append the value of the current number squared minus the number plus one\n        arr.append(i * i - i + 1)\n    # Initialize a counter\n    counter = 0\n    # Iterate through the array\n    for i in range(len(arr)):\n        # Iterate through the array\n        for j in range(len(arr)):\n            # Iterate through the array\n            for k in range(len(arr)):\n                # Check if the sum of the three numbers is a multiple of 3\n                if arr[i] + arr[j] + arr[k] % 3 == 0:\n                    # Increment the counter\n                    counter += 1\n    # Return the counter\n    return counter\n\n# Get the number of triples\nn = 5\nmax_triples = get_max_triples(n)\nprint(max_triples)\n\n\n# def get_max_triples(n):\n#     \"\"\"\n#     You are given a positive integer n. You have to create an integer array a of length n.\n#         For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n#         Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n#     and a[i] + a[j] + a[k] is a multiple of 3.\n\n#     Example :\n#         Input: n = 5\n#         Output: 1\n#         Explanation: \n#         a = [1, 3, 7, 13, 21]\n#         The only valid triple is (1, 7, 13).\n#     \"\"\"\n#     # Initialize an empty array\n#     arr = []\n#     # Iterate through the numbers from 1 to n\n#     for i in range(1, n+1):\n#         # Append the value of the current number squared minus the number plus one\n#         arr.append("
    },
    {
      "rank": 70,
      "score": 2.8494481522053556,
      "candidate": "max_triples = 0\n    for i in range(1, n + 1):\n        for j in range(1, n + 1):\n            for k in range(1, n + 1):\n                if i < j < k and (i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0:\n                    max_triples += 1\n    return max_triples\n\n\nif __name__ == \"__main__\":\n    print(get_max_triples(5))"
    },
    {
      "rank": 71,
      "score": 2.8453938120743927,
      "candidate": "max_triples = 0\n    for i in range(1, n + 1):\n        for j in range(i + 1, n + 1):\n            for k in range(j + 1, n + 1):\n                if (i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0:\n                    max_triples += 1\n    return max_triples\n\n\nif __name__ == \"__main__\":\n    n = 5\n    print(get_max_triples(n))"
    },
    {
      "rank": 72,
      "score": 2.8074588597918417,
      "candidate": "def get_num_triples(n):\n        \"\"\"\n        returns the number of triples a[i], a[j], a[k]\n        where i < j < k and a[i] + a[j] + a[k] is a multiple of 3.\n        \"\"\"\n        triples = 0\n        for i in range(n):\n            for j in range(i + 1, n):\n                for k in range(j + 1, n):\n                    if (a[i] + a[j] + a[k]) % 3 == 0:\n                        triples += 1\n        return triples\n\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    return get_num_triples(n)\n\n\ndef main():\n    assert get_max_triples(5) == 1\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 73,
      "score": 2.769680614520106,
      "candidate": "# 1st solution\n    # O(n) time | O(n) space\n    def get_max_triples(n):\n        a = [i*i-i+1 for i in range(1, n+1)]\n        count = 0\n        for i in range(n):\n            for j in range(i+1, n):\n                for k in range(j+1, n):\n                    if (a[i] + a[j] + a[k]) % 3 == 0:\n                        count += 1\n        return count\n\n    # 2nd solution\n    # O(n) time | O(1) space\n    def get_max_triples(n):\n        count = 0\n        for i in range(1, n):\n            for j in range(i+1, n):\n                for k in range(j+1, n):\n                    if (i*i-i+1 + j*j-j+1 + k*k-k+1) % 3 == 0:\n                        count += 1\n        return count\n\n    # 3rd solution\n    # O(n) time | O(1) space\n    def get_max_triples(n):\n        count = 0\n        for i in range(1, n):\n            for j in range(i+1, n):\n                for k in range(j+1, n):\n                    if i*i-i+1 + j*j-j+1 + k*k-k+1 == 0 or i*i-i+1 + j*j-j+1 + k*k-k+1 == 3:\n                        count += 1\n        return count\n\n    # 4th solution\n    # O(n) time | O(1) space\n    def get_max_triples(n):\n        count = 0\n        for i in range(1, n):\n            for j in range(i+1, n):\n                for k in range(j+1, n):\n                    if i*i-i+1 + j*j-j+1 + k*k-k+1 == 0 or i"
    },
    {
      "rank": 74,
      "score": 2.768291153593769,
      "candidate": "# initialize result\n    res = 0\n    # loop for each element of a\n    for i in range(n):\n        # compute a[i]\n        a_i = i * i - i + 1\n        # loop for each element of a\n        for j in range(i + 1, n):\n            # compute a[j]\n            a_j = j * j - j + 1\n            # loop for each element of a\n            for k in range(j + 1, n):\n                # compute a[k]\n                a_k = k * k - k + 1\n                # check if a[i] + a[j] + a[k] is a multiple of 3\n                if (a_i + a_j + a_k) % 3 == 0:\n                    res += 1\n    # return result\n    return res\n\ndef main():\n    print(\"Total triples: \" + str(get_max_triples(5)))\n\n\nmain()"
    },
    {
      "rank": 75,
      "score": 2.7671351232148718,
      "candidate": "# Your code here\n    arr = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    for i in range(n - 2):\n        for j in range(i + 1, n - 1):\n            for k in range(j + 1, n):\n                if (arr[i] + arr[j] + arr[k]) % 3 == 0:\n                    count += 1\n    return count\n\n\nif __name__ == \"__main__\":\n    n = 5\n    print(get_max_triples(n))"
    },
    {
      "rank": 76,
      "score": 2.765262807032524,
      "candidate": "\"\"\"\n    Input: n = 5\n    Output: 1\n    Explanation: \n    a = [1, 3, 7, 13, 21]\n    The only valid triple is (1, 7, 13).\n    \"\"\"\n    a = [i*i-i+1 for i in range(1,n+1)]\n    count = 0\n    for i in range(n-2):\n        for j in range(i+1,n-1):\n            for k in range(j+1,n):\n                if (a[i]+a[j]+a[k])%3 == 0:\n                    count+=1\n    return count\n\nif __name__ == \"__main__\":\n    n = 5\n    print(get_max_triples(n))"
    },
    {
      "rank": 77,
      "score": 2.760412881077355,
      "candidate": "max_triples = 0\n    for i in range(1, n + 1):\n        for j in range(i + 1, n + 1):\n            for k in range(j + 1, n + 1):\n                if (i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0:\n                    max_triples += 1\n    return max_triples\n\nprint(get_max_triples(5))"
    },
    {
      "rank": 78,
      "score": 2.7278086377374087,
      "candidate": "arr = [i*i - i + 1 for i in range(1, n+1)]\n    count = 0\n    for i in range(n-1):\n        for j in range(i+1, n):\n            for k in range(j, n):\n                if (arr[i] + arr[j] + arr[k]) % 3 == 0:\n                    count += 1\n    return count\n\n\nif __name__ == '__main__':\n    n = 5\n    print(get_max_triples(n))\n    n = 10\n    print(get_max_triples(n))"
    },
    {
      "rank": 79,
      "score": 2.718856235379514,
      "candidate": "# your code goes here\n    res = 0\n    for i in range(1, n+1):\n        for j in range(1, n+1):\n            for k in range(1, n+1):\n                if i < j < k and (i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0:\n                    res += 1\n    return res\n\n\nif __name__ == '__main__':\n    n = 5\n    print(get_max_triples(n))"
    },
    {
      "rank": 80,
      "score": 2.6996806550405976,
      "candidate": "result = 0\n    for i in range(1, n + 1):\n        for j in range(i + 1, n + 1):\n            for k in range(j + 1, n + 1):\n                if (i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0:\n                    result += 1\n    return result\n\n\ndef get_max_triples_fast(n):\n    \"\"\"\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \"\"\"\n    result = 0\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    for i in range(1, n - 1):\n        for j in range(i + 1, n - 1):\n            for k in range(j + 1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    result += 1\n    return result\n\n\nif __name__ == '__main__':\n    print(get_max_triples(5))\n    print(get_max_triples_fast(5))"
    },
    {
      "rank": 81,
      "score": 2.6991466938853015,
      "candidate": "# Get the array of squares\n    squares = [i * i for i in range(1, n + 1)]\n\n    # Get the count of triples\n    count = 0\n    for i in range(n - 2):\n        for j in range(i + 1, n - 1):\n            for k in range(j + 1, n):\n                if squares[i] + squares[j] + squares[k] % 3 == 0:\n                    count += 1\n\n    return count\n\n\nif __name__ == \"__main__\":\n    print(get_max_triples(5))\n    print(get_max_triples(8))\n    print(get_max_triples(10))"
    },
    {
      "rank": 82,
      "score": 2.677440122697438,
      "candidate": "pass\n\n\ndef get_max_triples_dp(n):\n    \"\"\"\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \"\"\"\n    pass\n\n\nif __name__ == \"__main__\":\n    n = 5\n    print(get_max_triples(n))\n    print(get_max_triples_dp(n))"
    },
    {
      "rank": 83,
      "score": 2.6615389998470205,
      "candidate": "# Initialize the list\n    a = [i*i - i + 1 for i in range(1, n+1)]\n    # Initialize the count\n    count = 0\n    # Iterate over the list\n    for i in range(0, len(a)-2):\n        for j in range(i+1, len(a)-1):\n            for k in range(j+1, len(a)):\n                # Check if the sum of the three values is a multiple of 3\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n    return count\n\n\nif __name__ == \"__main__\":\n    print(get_max_triples(5))\n    print(get_max_triples(10))"
    },
    {
      "rank": 84,
      "score": 2.6400778958026456,
      "candidate": "pass\n\ndef get_max_triples(n):\n    \"\"\"\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \"\"\"\n    a = [i*i - i + 1 for i in range(1, n+1)]\n    max_triples = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            for k in range(j+1, n):\n                if a[i] + a[j] + a[k] % 3 == 0:\n                    max_triples += 1\n    return max_triples\n\nif __name__ == \"__main__\":\n    n = 5\n    print(get_max_triples(n))"
    },
    {
      "rank": 85,
      "score": 2.580391238388681,
      "candidate": "# Your code here\n    result = 0\n    arr = [i * i - i + 1 for i in range(1, n + 1)]\n    for i in range(0, n - 2):\n        for j in range(i + 1, n - 1):\n            for k in range(j + 1, n):\n                if (arr[i] + arr[j] + arr[k]) % 3 == 0:\n                    result += 1\n    return result\n\n\nif __name__ == \"__main__\":\n    n = 5\n    print(get_max_triples(n))"
    },
    {
      "rank": 86,
      "score": 2.5459879622393946,
      "candidate": "if n < 3:\n        return 0\n\n    arr = [i * i - i + 1 for i in range(1, n + 1)]\n    # print(arr)\n\n    count = 0\n    for i in range(n - 2):\n        for j in range(i + 1, n - 1):\n            for k in range(j + 1, n):\n                if (arr[i] + arr[j] + arr[k]) % 3 == 0:\n                    count += 1\n    return count\n\n\nif __name__ == '__main__':\n    n = 5\n    op = get_max_triples(n)\n    print(op)"
    },
    {
      "rank": 87,
      "score": 2.493584439832788,
      "candidate": "# Brute Force Solution\n    #   Time Complexity: O(N^3)\n    #   Space Complexity: O(N)\n    # def get_max_triples(n):\n    #     a = [i * i - i + 1 for i in range(1, n + 1)]\n    #     count = 0\n    #     for i in range(n - 2):\n    #         for j in range(i + 1, n - 1):\n    #             for k in range(j + 1, n):\n    #                 if (a[i] + a[j] + a[k]) % 3 == 0:\n    #                     count += 1\n    #     return count\n\n    # Optimized Solution\n    #   Time Complexity: O(N^2)\n    #   Space Complexity: O(1)\n    # def get_max_triples(n):\n    #     count = 0\n    #     for i in range(n - 2):\n    #         for j in range(i + 1, n - 1):\n    #             if (i * i - i + 1 + j * j - j + 1) % 3 == 0:\n    #                 count += (n - 2) - i\n    #     return count\n\n    # DP Solution\n    #   Time Complexity: O(N^2)\n    #   Space Complexity: O(1)\n    # def get_max_triples(n):\n    #     count = 0\n    #     for i in range(n - 2):\n    #         for j in range(i + 1, n - 1):\n    #             if (i * i - i + 1 + j * j - j + 1) % 3 == 0:\n    #                 count += (n - 2) - i\n    #     return count\n\n    # DP Solution - Optimized\n    #   Time Complexity: O(N)\n    #   Space Complexity: O(1)\n    def get_max_triples(n):\n        count = 0\n        for i in range(n - 2"
    },
    {
      "rank": 88,
      "score": 2.4711445355220496,
      "candidate": "# your code goes here\n    res = 0\n    for i in range(1, n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n + 1):\n                if (i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0:\n                    res += 1\n    return res\n\n\ndef main():\n    n = 5\n    print(\"Maximum triples: \", get_max_triples(n))\n\n\nmain()"
    },
    {
      "rank": 89,
      "score": 2.446832512996986,
      "candidate": "n = 1000000\n    a = [i*i - i + 1 for i in range(1, n+1)]\n\n    # 1) 2-D array of size n x n\n    # 2) For each i, j, k, check if a[i] + a[j] + a[k] is a multiple of 3\n    # 3) count the number of such valid triples\n    # 4) return the count\n\n    # 1) 2-D array of size n x n\n    dp = [[0 for i in range(n)] for j in range(n)]\n\n    # 2) For each i, j, k, check if a[i] + a[j] + a[k] is a multiple of 3\n    for i in range(n):\n        for j in range(n):\n            dp[i][j] = (a[i] + a[j]) % 3\n\n    # 3) count the number of such valid triples\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            for k in range(j+1, n):\n                if dp[i][j] == 0 and dp[j][k] == 0:\n                    count += 1\n\n    # 4) return the count\n    return count\n\n\nif __name__ == \"__main__\":\n    print(get_max_triples(5))"
    },
    {
      "rank": 90,
      "score": 2.4245032112888487,
      "candidate": "# Time Complexity : O(n)\n    # Space Complexity : O(n)\n    ans = 0\n    arr = [i * i - i + 1 for i in range(1, n + 1)]\n    for i in range(1, n - 1):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if (arr[i] + arr[j] + arr[k]) % 3 == 0:\n                    ans += 1\n    return ans\n\n\nif __name__ == \"__main__\":\n    print(get_max_triples(5))\n    print(get_max_triples(12))"
    },
    {
      "rank": 91,
      "score": 2.4018966879596646,
      "candidate": "# return get_max_triples_solution(n)\n    return get_max_triples_solution_1(n)\n\n\ndef get_max_triples_solution(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    cnt = 0\n    for i in range(1, n - 2):\n        for j in range(i + 1, n - 1):\n            for k in range(j + 1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    cnt += 1\n    return cnt\n\n\ndef get_max_triples_solution_1(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    cnt = 0\n    for i in range(1, n - 2):\n        for j in range(i + 1, n - 1):\n            for k in range(j + 1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    cnt += 1\n    return cnt\n\n\nif __name__ == '__main__':\n    n = 5\n    print(get_max_triples(n))"
    },
    {
      "rank": 92,
      "score": 2.389578175014489,
      "candidate": "\"\"\"\n    a[i] + a[j] + a[k] = 3 * m\n    a[i] = i^2 - i + 1\n    a[j] = j^2 - j + 1\n    a[k] = k^2 - k + 1\n\n    i^2 - i + 1 + j^2 - j + 1 + k^2 - k + 1 = 3 * m\n    i^2 - i + j^2 - j + k^2 - k + 1 = 3 * m - 3\n    (i - 1) * (i + j - 1) * (i + j + k - 1) = 3 * m - 3\n\n    i - 1 = 3 * m - 3 / (i + j - 1)\n    i + j - 1 = 3 * m - 3 / (i - 1)\n    i + j + k - 1 = 3 * m - 3\n\n    i + j + k - 1 = 3 * m - 3\n    j + k - 1 = 3 * m - 3 - i\n    i + j - 1 = 3 * m - 3 - i - k\n    j - 1 = 3 * m - 3 - i - k\n    \"\"\"\n    triplets = 0\n    for i in range(1, n + 1):\n        for j in range(i + 1, n + 1):\n            for k in range(j + 1, n + 1):\n                if (i + j + k - 1) % 3 == 0:\n                    triplets += 1\n    return triplets\n\n\nif __name__ == \"__main__\":\n    print(get_max_triples(5))"
    },
    {
      "rank": 93,
      "score": 2.3359069755507846,
      "candidate": "# Your code here\n\n    if n == 1:\n        return 0\n    elif n == 2:\n        return 0\n    elif n == 3:\n        return 1\n    elif n == 4:\n        return 0\n    elif n == 5:\n        return 1\n\n    i = 1\n    j = 2\n    k = 3\n    res = 0\n    while k < n:\n        if i+j+k < n and (i+j+k)%3 == 0:\n            res += 1\n        i += 1\n        j += 1\n        k += 1\n    \n    return res\n\n\nif __name__ == \"__main__\":\n    n = 5\n    print(get_max_triples(n))"
    },
    {
      "rank": 94,
      "score": 2.293848149332354,
      "candidate": "# O(n)\n    max_triple = 0\n    for i in range(1, n+1):\n        for j in range(i+1, n+1):\n            for k in range(j+1, n+1):\n                if (i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0:\n                    max_triple = max(max_triple, i * j * k)\n    return max_triple\n\n\nif __name__ == \"__main__\":\n    print(get_max_triples(5))\n    print(get_max_triples(12))"
    },
    {
      "rank": 95,
      "score": 2.287625906893272,
      "candidate": "# Initialize the count\n    count = 0\n    # Iterate through the numbers\n    for i in range(1, n + 1):\n        for j in range(i + 1, n + 1):\n            for k in range(j + 1, n + 1):\n                # Check if the sum of the numbers is divisible by 3\n                if (i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0:\n                    count += 1\n    # Return the count\n    return count\n\n\nprint(get_max_triples(5))\nprint(get_max_triples(10))\nprint(get_max_triples(15))"
    },
    {
      "rank": 96,
      "score": 2.260739004816286,
      "candidate": "a = [i * i - i + 1 for i in range(1, n + 1)]\n    print(a)\n    count = 0\n    for i in range(0, len(a)):\n        for j in range(i + 1, len(a)):\n            for k in range(j + 1, len(a)):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n    return count\n\n\nif __name__ == \"__main__\":\n    n = 5\n    out = 1\n    actual = get_max_triples(n)\n    assert out == actual, (out, actual)\n\n    n = 10\n    out = 9\n    actual = get_max_triples(n)\n    assert out == actual, (out, actual)\n\n    n = 100\n    out = 733\n    actual = get_max_triples(n)\n    assert out == actual, (out, actual)"
    },
    {
      "rank": 97,
      "score": 2.137541083743484,
      "candidate": "return 0\n\n\nif __name__ == \"__main__\":\n    n = 5\n    out = get_max_triples(n)\n    print(out)"
    },
    {
      "rank": 98,
      "score": 2.118479922318633,
      "candidate": "# Time Complexity: O(n^2)\n    # Space Complexity: O(n)\n    arr = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    for i in range(n - 2):\n        for j in range(i + 1, n - 1):\n            for k in range(j + 1, n):\n                if (arr[i] + arr[j] + arr[k]) % 3 == 0:\n                    count += 1\n    return count\n\n\ndef get_max_triples_dp(n):\n    \"\"\"\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \"\"\"\n    # Time Complexity: O(n^2)\n    # Space Complexity: O(n)\n    arr = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    dp = [0] * n\n    for i in range(n - 2):\n        for j in range(i + 1, n - 1):\n            for k in range(j + 1, n):\n                if (arr[i] + arr[j] + arr[k]) % 3 == 0:\n                    dp[k] += 1\n    return dp[-1]\n\n\ndef main():\n    print(\"Maximum number of triples is: \" +\n          str(get_max_triples(5)))"
    },
    {
      "rank": 99,
      "score": 2.043359877671101,
      "candidate": "if n < 3:\n        return 0\n\n    n_triples = 0\n    # a[i] = i * i - i + 1\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n\n    # a[i] + a[j] + a[k] is multiple of 3 iff a[i] + a[j] is multiple of 3\n    # because a[i] + a[j] = (i * i - i + 1) + (j * j - j + 1) = (i + j) * (i - j + 1)\n    for i in range(n):\n        for j in range(i + 1, n):\n            if (a[i] + a[j]) % 3 == 0:\n                for k in range(j + 1, n):\n                    if (a[i] + a[j] + a[k]) % 3 == 0:\n                        n_triples += 1\n    return n_triples\n\n\ndef test_get_max_triples():\n    assert get_max_triples(5) == 1\n    assert get_max_triples(10) == 1\n    assert get_max_triples(15) == 2\n    assert get_max_triples(20) == 4\n    assert get_max_triples(25) == 4\n    assert get_max_triples(30) == 7\n    assert get_max_triples(35) == 7\n    assert get_max_triples(40) == 10\n    assert get_max_triples(45) == 14\n    assert get_max_triples(50) == 18\n    assert get_max_triples(55) == 24\n    assert get_max_triples(60) == 28\n    assert get_max_triples(65) == 36\n    assert get_max_triples(70) == 44\n    assert get_max_triples(75) == 50"
    },
    {
      "rank": 100,
      "score": 2.020164938060112,
      "candidate": "# Code here\n    if n < 3:\n        return 0\n\n    max_triples = 0\n    arr = [i * i - i + 1 for i in range(1, n + 1)]\n\n    for i in range(n - 1, 0, -1):\n        for j in range(i - 1, 0, -1):\n            for k in range(j - 1, 0, -1):\n                if arr[i] + arr[j] + arr[k] % 3 == 0:\n                    max_triples += 1\n    return max_triples\n\n\ndef main():\n    print(\"Total triples are: \" +\n          str(get_max_triples(int(input().strip()))))\n\n\nif __name__ == \"__main__\":\n    main()"
    }
  ]
}