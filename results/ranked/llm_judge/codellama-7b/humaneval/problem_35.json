{
  "timestamp": "2025-09-14T21:20:33.706152",
  "method": "improved_llm_judge",
  "judge_model": "codellama/CodeLlama-7b-Python-hf",
  "target_model": "codellama-7b",
  "dataset": "humaneval",
  "problem_number": 35,
  "total_candidates": 100,
  "results": [
    {
      "rank": 1,
      "score": 10.0,
      "candidate": "max_so_far = l[0]\n    for element in l:\n        if element > max_so_far:\n            max_so_far = element\n    return max_so_far\n\n\ndef max_element_no_loops(l: list):\n    \"\"\"Return maximum element in the list.\n    >>> max_element([1, 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    123\n    \"\"\"\n    return max(l)\n\n\ndef test():\n    l = [1, 2, 3]\n    assert max_element(l) == 3\n    assert max_element_no_loops(l) == 3\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 2,
      "score": 10.0,
      "candidate": "max = l[0]\n    for i in range(1, len(l)):\n        if l[i] > max:\n            max = l[i]\n    return max\n\n\ndef max_element_recursive(l: list):\n    \"\"\"Return maximum element in the list.\n    >>> max_element_recursive([1, 2, 3])\n    3\n    >>> max_element_recursive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    123\n    \"\"\"\n    if len(l) == 1:\n        return l[0]\n    if l[0] > max_element_recursive(l[1:]):\n        return l[0]\n    else:\n        return max_element_recursive(l[1:])\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 3,
      "score": 10.0,
      "candidate": "m = l[0]\n    for i in range(1, len(l)):\n        if l[i] > m:\n            m = l[i]\n    return m\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 4,
      "score": 10.0,
      "candidate": "max_ = l[0]\n    for i in range(1, len(l)):\n        if l[i] > max_:\n            max_ = l[i]\n    return max_\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 5,
      "score": 10.0,
      "candidate": "return max(l)\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 6,
      "score": 10.0,
      "candidate": "max_el = None\n    for el in l:\n        if max_el is None or el > max_el:\n            max_el = el\n    return max_el\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 7,
      "score": 10.0,
      "candidate": "return max(l)\n\n\ndef max_element_2(l: list):\n    \"\"\"Return maximum element in the list.\n    >>> max_element([1, 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    123\n    \"\"\"\n    m = l[0]\n    for i in l:\n        if i > m:\n            m = i\n    return m\n\n\ndef max_element_3(l: list):\n    \"\"\"Return maximum element in the list.\n    >>> max_element([1, 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    123\n    \"\"\"\n    return l[0] if len(l) == 1 else max(l[0], max_element_3(l[1:]))\n\n\ndef max_element_4(l: list):\n    \"\"\"Return maximum element in the list.\n    >>> max_element([1, 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    123\n    \"\"\"\n    return max(l) if len(l) == 1 else max(l[0], max_element_4(l[1:]))\n\n\ndef max_element_5(l: list):\n    \"\"\"Return maximum element in the list.\n    >>> max_element([1, 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    123\n    \"\"\"\n    return l[0] if len(l) == 1 else max(l[0], max_element_5(l[1:]))\n\n\ndef max_element_"
    },
    {
      "rank": 8,
      "score": 10.0,
      "candidate": "m = l[0]\n    for i in range(len(l)):\n        if l[i] > m:\n            m = l[i]\n    return m\n\n\ndef max_element_linear(l: list):\n    \"\"\"Return maximum element in the list.\n    >>> max_element([1, 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    123\n    \"\"\"\n    m = l[0]\n    for i in range(1, len(l)):\n        if l[i] > m:\n            m = l[i]\n    return m\n\n\ndef max_element_linear_alt(l: list):\n    \"\"\"Return maximum element in the list.\n    >>> max_element([1, 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    123\n    \"\"\"\n    m = l[0]\n    for i in l:\n        if i > m:\n            m = i\n    return m\n\n\ndef max_element_linear_alt_2(l: list):\n    \"\"\"Return maximum element in the list.\n    >>> max_element([1, 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    123\n    \"\"\"\n    m = l[0]\n    for i in range(len(l)):\n        if l[i] > m:\n            m = l[i]\n    return m\n\n\ndef max_element_linear_alt_3(l: list):\n    \"\"\"Return maximum element in the list.\n    >>> max_element([1, 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0"
    },
    {
      "rank": 9,
      "score": 10.0,
      "candidate": "return max(l)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 10,
      "score": 10.0,
      "candidate": "max_ = l[0]\n    for i in l:\n        if i > max_:\n            max_ = i\n    return max_\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 11,
      "score": 10.0,
      "candidate": "if not l:\n        return None\n    m = l[0]\n    for i in l:\n        if i > m:\n            m = i\n    return m\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 12,
      "score": 10.0,
      "candidate": "max_ = l[0]\n    for i in range(1, len(l)):\n        if l[i] > max_:\n            max_ = l[i]\n    return max_\n\n\ndef max_element_no_if(l: list):\n    \"\"\"Return maximum element in the list.\n    >>> max_element_no_if([1, 2, 3])\n    3\n    >>> max_element_no_if([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    123\n    \"\"\"\n    if len(l) == 1:\n        return l[0]\n    else:\n        max_ = l[0]\n        for i in range(1, len(l)):\n            if l[i] > max_:\n                max_ = l[i]\n        return max_\n\n\ndef main():\n    l = [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]\n    assert max_element(l) == max_element_no_if(l)\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()\n    main()"
    },
    {
      "rank": 13,
      "score": 10.0,
      "candidate": "max_element = l[0]\n    for i in range(len(l)):\n        if l[i] > max_element:\n            max_element = l[i]\n    return max_element\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 14,
      "score": 10.0,
      "candidate": "return max(l)\n\ndef main():\n    print(max_element([1, 2, 3]))\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 15,
      "score": 10.0,
      "candidate": "max_el = l[0]\n    for el in l:\n        if el > max_el:\n            max_el = el\n    return max_el\n\n\ndef min_element(l: list):\n    \"\"\"Return minimum element in the list.\n    >>> min_element([1, 2, 3])\n    1\n    >>> min_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    -10\n    \"\"\"\n    min_el = l[0]\n    for el in l:\n        if el < min_el:\n            min_el = el\n    return min_el\n\n\ndef sum_element(l: list):\n    \"\"\"Return sum of elements in the list.\n    >>> sum_element([1, 2, 3])\n    6\n    >>> sum_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    142\n    \"\"\"\n    sum = 0\n    for el in l:\n        sum += el\n    return sum\n\n\ndef average_element(l: list):\n    \"\"\"Return average of elements in the list.\n    >>> average_element([1, 2, 3])\n    2.0\n    >>> average_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    30.0\n    \"\"\"\n    return sum_element(l) / len(l)\n\n\ndef median_element(l: list):\n    \"\"\"Return median of elements in the list.\n    >>> median_element([1, 2, 3])\n    2\n    >>> median_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    1\n    \"\"\"\n    sorted_l = sorted(l)\n    length = len(sorted_l)\n    if length % 2 == 0:\n        median ="
    },
    {
      "rank": 16,
      "score": 10.0,
      "candidate": "maximum = l[0]\n    for x in l:\n        if x > maximum:\n            maximum = x\n    return maximum\n\n\ndef min_element(l: list):\n    \"\"\"Return minimum element in the list.\n    >>> min_element([1, 2, 3])\n    1\n    >>> min_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    -10\n    \"\"\"\n    minimum = l[0]\n    for x in l:\n        if x < minimum:\n            minimum = x\n    return minimum\n\n\ndef sum_element(l: list):\n    \"\"\"Return sum of all elements in the list.\n    >>> sum_element([1, 2, 3])\n    6\n    >>> sum_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    141\n    \"\"\"\n    total = 0\n    for x in l:\n        total += x\n    return total\n\n\ndef product_element(l: list):\n    \"\"\"Return product of all elements in the list.\n    >>> product_element([1, 2, 3])\n    6\n    >>> product_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    0\n    \"\"\"\n    total = 1\n    for x in l:\n        total *= x\n    return total\n\n\ndef even_elements(l: list):\n    \"\"\"Return even elements in the list.\n    >>> even_elements([1, 2, 3, 4])\n    [2, 4]\n    >>> even_elements([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [-5, 2, 0]\n    \"\"\"\n    even_list = []\n    for x in l:\n        if x % 2 == 0:\n            even_list"
    },
    {
      "rank": 17,
      "score": 10.0,
      "candidate": "max_element = l[0]\n    for element in l:\n        if element > max_element:\n            max_element = element\n    return max_element\n\n\ndef min_element(l: list):\n    \"\"\"Return minimum element in the list.\n    >>> min_element([1, 2, 3])\n    1\n    >>> min_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    -10\n    \"\"\"\n    min_element = l[0]\n    for element in l:\n        if element < min_element:\n            min_element = element\n    return min_element\n\n\ndef sum_element(l: list):\n    \"\"\"Return sum of elements in the list.\n    >>> sum_element([1, 2, 3])\n    6\n    >>> sum_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    130\n    \"\"\"\n    sum_element = 0\n    for element in l:\n        sum_element += element\n    return sum_element\n\n\ndef product_element(l: list):\n    \"\"\"Return product of elements in the list.\n    >>> product_element([1, 2, 3])\n    6\n    >>> product_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    0\n    \"\"\"\n    product_element = 1\n    for element in l:\n        product_element *= element\n    return product_element\n\n\ndef mean(l: list):\n    \"\"\"Return mean of elements in the list.\n    >>> mean([1, 2, 3])\n    2.0\n    >>> mean([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    32.2\n    \"\"\"\n    return sum_element(l) / len(l)\n\n\ndef median("
    },
    {
      "rank": 18,
      "score": 10.0,
      "candidate": "maximum = l[0]\n    for i in l:\n        if i > maximum:\n            maximum = i\n    return maximum\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 19,
      "score": 10.0,
      "candidate": "# Your code here\n    max_element = l[0]\n    for element in l:\n        if element > max_element:\n            max_element = element\n    return max_element\n\n\ndef min_element(l: list):\n    \"\"\"Return minimum element in the list.\n    >>> min_element([1, 2, 3])\n    1\n    >>> min_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    -10\n    \"\"\"\n    # Your code here\n    min_element = l[0]\n    for element in l:\n        if element < min_element:\n            min_element = element\n    return min_element\n\n\ndef max_and_min(l: list):\n    \"\"\"Return maximum and minimum element in the list.\n    >>> max_and_min([1, 2, 3])\n    (3, 1)\n    >>> max_and_min([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    (123, -10)\n    \"\"\"\n    # Your code here\n    max_element = l[0]\n    min_element = l[0]\n    for element in l:\n        if element > max_element:\n            max_element = element\n        if element < min_element:\n            min_element = element\n    return (max_element, min_element)"
    },
    {
      "rank": 20,
      "score": 10.0,
      "candidate": "max_value = l[0]\n    for i in range(1, len(l)):\n        if l[i] > max_value:\n            max_value = l[i]\n    return max_value\n\n\ndef main():\n    l = [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]\n    print(max_element(l))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 21,
      "score": 10.0,
      "candidate": "return l[0] if l[0] > l[1] else l[1]\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 22,
      "score": 10.0,
      "candidate": "max_element = l[0]\n    for i in range(1, len(l)):\n        if l[i] > max_element:\n            max_element = l[i]\n    return max_element\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 23,
      "score": 10.0,
      "candidate": "m = l[0]\n    for x in l:\n        if x > m:\n            m = x\n    return m\n\n\ndef max_element2(l: list):\n    \"\"\"Return maximum element in the list.\n    >>> max_element2([1, 2, 3])\n    3\n    >>> max_element2([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    123\n    \"\"\"\n    return max(l)\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 24,
      "score": 10.0,
      "candidate": "return max(l)\n\n\ndef main():\n    try:\n        raw_input = input('Enter numbers separated by comma:\\n')\n        l = raw_input.split(',')\n        assert l[0].isdigit()\n        assert len(l) == len(set(l))\n        l = list(map(int, l))\n    except:\n        print('Invalid input')\n    else:\n        print(max_element(l))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 25,
      "score": 10.0,
      "candidate": "# Fill in\n    max_el = l[0]\n    for i in range(0, len(l)):\n        if l[i] > max_el:\n            max_el = l[i]\n    return max_el\n\n\ndef min_element(l: list):\n    \"\"\"Return minimum element in the list.\n    >>> min_element([1, 2, 3])\n    1\n    >>> min_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    -10\n    \"\"\"\n    # Fill in\n    min_el = l[0]\n    for i in range(0, len(l)):\n        if l[i] < min_el:\n            min_el = l[i]\n    return min_el\n\n\ndef sum_element(l: list):\n    \"\"\"Return sum of all elements in the list.\n    >>> sum_element([1, 2, 3])\n    6\n    >>> sum_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    131\n    \"\"\"\n    # Fill in\n    sum = 0\n    for i in range(0, len(l)):\n        sum += l[i]\n    return sum\n\n\ndef product_element(l: list):\n    \"\"\"Return product of all elements in the list.\n    >>> product_element([1, 2, 3])\n    6\n    >>> product_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    12600\n    \"\"\"\n    # Fill in\n    prod = 1\n    for i in range(0, len(l)):\n        prod *= l[i]\n    return prod\n\n\ndef mean(l: list):\n    \"\"\"Return the mean of the elements in the list.\n    >>> mean([1, 2, 3])\n    2.0\n    >>> mean([5,"
    },
    {
      "rank": 26,
      "score": 10.0,
      "candidate": "return max(l)\n\n\ndef min_element(l: list):\n    \"\"\"Return minimum element in the list.\n    >>> min_element([1, 2, 3])\n    1\n    >>> min_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    -10\n    \"\"\"\n    return min(l)\n\n\ndef sum_element(l: list):\n    \"\"\"Return sum of elements in the list.\n    >>> sum_element([1, 2, 3])\n    6\n    >>> sum_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    126\n    \"\"\"\n    return sum(l)\n\n\ndef prod_element(l: list):\n    \"\"\"Return product of elements in the list.\n    >>> prod_element([1, 2, 3])\n    6\n    >>> prod_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    13300\n    \"\"\"\n    return 1\n\n\ndef mean_element(l: list):\n    \"\"\"Return mean of elements in the list.\n    >>> mean_element([1, 2, 3])\n    2.0\n    >>> mean_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    17.833333333333334\n    \"\"\"\n    return sum_element(l) / len(l)\n\n\ndef median_element(l: list):\n    \"\"\"Return median of elements in the list.\n    >>> median_element([1, 2, 3])\n    2\n    >>> median_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    0\n    \"\"\""
    },
    {
      "rank": 27,
      "score": 10.0,
      "candidate": "max_value = l[0]\n\n    for i in l:\n        if i > max_value:\n            max_value = i\n\n    return max_value\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 28,
      "score": 10.0,
      "candidate": "maximum = None\n    for e in l:\n        if maximum is None or e > maximum:\n            maximum = e\n    return maximum\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 29,
      "score": 10.0,
      "candidate": "max_element = l[0]\n    for element in l:\n        if element > max_element:\n            max_element = element\n    return max_element\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 30,
      "score": 10.0,
      "candidate": "# max_element = 0\n    # for i in l:\n    #     if i > max_element:\n    #         max_element = i\n    # return max_element\n    return max(l)\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 31,
      "score": 10.0,
      "candidate": "m = l[0]\n    for i in range(len(l)):\n        if l[i] > m:\n            m = l[i]\n    return m\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 32,
      "score": 10.0,
      "candidate": "return max(l)\n\n\ndef min_element(l: list):\n    \"\"\"Return minimum element in the list.\n    >>> min_element([1, 2, 3])\n    1\n    >>> min_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    -10\n    \"\"\"\n    return min(l)\n\n\ndef sum_element(l: list):\n    \"\"\"Return sum of all the elements in the list.\n    >>> sum_element([1, 2, 3])\n    6\n    >>> sum_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    137\n    \"\"\"\n    return sum(l)\n\n\ndef average_element(l: list):\n    \"\"\"Return average of all the elements in the list.\n    >>> average_element([1, 2, 3])\n    2.0\n    >>> average_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    29.2\n    \"\"\"\n    return sum(l) / len(l)\n\n\ndef median_element(l: list):\n    \"\"\"Return median of all the elements in the list.\n    >>> median_element([1, 2, 3])\n    2.0\n    >>> median_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    0.0\n    >>> median_element([1, 2, 3, 4, 5, 6])\n    3.5\n    \"\"\"\n    l = sorted(l)\n    if len(l) % 2 == 0:\n        return (l[len(l) // 2 - 1] + l[len(l) // 2]) / 2\n    return l[len(l) // 2]\n\n\ndef mode_element(l: list"
    },
    {
      "rank": 33,
      "score": 10.0,
      "candidate": "max_element = 0\n    for element in l:\n        if element > max_element:\n            max_element = element\n    return max_element\n\n\ndef max_element_rec(l: list):\n    \"\"\"Return maximum element in the list.\n    >>> max_element_rec([1, 2, 3])\n    3\n    >>> max_element_rec([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    123\n    \"\"\"\n    if len(l) == 1:\n        return l[0]\n    else:\n        max_element = max_element_rec(l[1:])\n        return l[0] if l[0] > max_element else max_element\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 34,
      "score": 10.0,
      "candidate": "# T(n) = O(n)\n    # S(n) = O(1)\n    # max_element = l[0]\n    # for i in range(1, len(l)):\n    #     if max_element < l[i]:\n    #         max_element = l[i]\n    # return max_element\n\n    # T(n) = O(n)\n    # S(n) = O(1)\n    # return max(l)\n\n    # T(n) = O(n)\n    # S(n) = O(n)\n    # return max(l, key=lambda x: x)\n\n    # T(n) = O(n)\n    # S(n) = O(1)\n    # return sorted(l)[-1]\n\n    # T(n) = O(n)\n    # S(n) = O(1)\n    # return l[-1]\n\n    # T(n) = O(n)\n    # S(n) = O(1)\n    # return l[0]\n\n    # T(n) = O(n)\n    # S(n) = O(1)\n    # return l[-1]\n\n    # T(n) = O(n)\n    # S(n) = O(1)\n    # return l[len(l) // 2]\n\n    # T(n) = O(n)\n    # S(n) = O(1)\n    # return l[len(l) // 2]\n\n    # T(n) = O(n)\n    # S(n) = O(1)\n    # return sorted(l)[len(l) // 2]\n\n    # T(n) = O(n)\n    # S(n) = O(1)\n    # return max(l[len(l) // 2], sorted(l)[-1])\n\n    # T(n) = O(n)\n    # S(n) = O(1)\n    # return max(l[len(l) // 2], l[len(l) // 2 + 1], sorted(l"
    },
    {
      "rank": 35,
      "score": 9.993251387631034,
      "candidate": "# Your code here\n    max = 0\n    for i in l:\n        if i > max:\n            max = i\n    return max\n\n\ndef main():\n    print(max_element([1, 2, 3]))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 36,
      "score": 9.982086980445024,
      "candidate": "# Your code here\n    max = l[0]\n    for item in l:\n        if item > max:\n            max = item\n    return max\n\n\ndef min_element(l: list):\n    \"\"\"Return minimum element in the list.\n    >>> min_element([1, 2, 3])\n    1\n    >>> min_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    -10\n    \"\"\"\n    # Your code here\n    min = l[0]\n    for item in l:\n        if item < min:\n            min = item\n    return min\n\n\ndef sum_element(l: list):\n    \"\"\"Return sum of all elements in the list.\n    >>> sum_element([1, 2, 3])\n    6\n    >>> sum_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    134\n    \"\"\"\n    # Your code here\n    sum = 0\n    for item in l:\n        sum += item\n    return sum\n\n\ndef product_element(l: list):\n    \"\"\"Return product of all elements in the list.\n    >>> product_element([1, 2, 3])\n    6\n    >>> product_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    0\n    \"\"\"\n    # Your code here\n    product = 1\n    for item in l:\n        product *= item\n    return product\n\n\ndef mean(l: list):\n    \"\"\"Return the mean of all elements in the list.\n    >>> mean([1, 2, 3])\n    2.0\n    >>> mean([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    19.0\n    \"\"\"\n    # Your code here\n    return sum_element(l)/len(l)"
    },
    {
      "rank": 37,
      "score": 9.963994939209833,
      "candidate": "return max(l)\n\n\ndef min_element(l: list):\n    \"\"\"Return minimum element in the list.\n    >>> min_element([1, 2, 3])\n    1\n    >>> min_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    -10\n    \"\"\"\n    return min(l)\n\n\ndef get_element_at(l: list, i: int):\n    \"\"\"Return i-th element of the list.\n    >>> get_element_at([1, 2, 3], 1)\n    2\n    >>> get_element_at([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], 7)\n    0\n    \"\"\"\n    return l[i]\n\n\ndef delete_element_at(l: list, i: int):\n    \"\"\"Delete i-th element from the list.\n    >>> delete_element_at([1, 2, 3], 1)\n    [1, 3]\n    >>> delete_element_at([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], 7)\n    [5, 3, -5, 2, -3, 3, 9, -10]\n    \"\"\"\n    del l[i]\n    return l\n\n\ndef insert_element_at(l: list, i: int, e):\n    \"\"\"Insert element e at index i in the list.\n    >>> insert_element_at([1, 2, 3], 1, 100)\n    [1, 100, 2, 3]\n    >>> insert_element_at([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], 7, 1000)\n    [5, 3, -5, 2, -3, 3, 9,"
    },
    {
      "rank": 38,
      "score": 9.94217585880588,
      "candidate": "return max(l)\n\n\ndef max_element_2(l: list):\n    \"\"\"Return maximum element in the list.\n    >>> max_element_2([1, 2, 3])\n    3\n    >>> max_element_2([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    123\n    \"\"\"\n    max_el = 0\n    for i in l:\n        if i > max_el:\n            max_el = i\n    return max_el\n\n\ndef max_element_3(l: list):\n    \"\"\"Return maximum element in the list.\n    >>> max_element_3([1, 2, 3])\n    3\n    >>> max_element_3([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    123\n    \"\"\"\n    max_el = l[0]\n    for i in l:\n        if i > max_el:\n            max_el = i\n    return max_el\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 39,
      "score": 9.930867849414408,
      "candidate": "max_el = l[0]\n    for i in l:\n        if i > max_el:\n            max_el = i\n    return max_el\n\n\ndef max_element_iter(l: list):\n    \"\"\"Return maximum element in the list.\n    >>> max_element([1, 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    123\n    \"\"\"\n    max_el = l[0]\n    for i in l:\n        if i > max_el:\n            max_el = i\n    return max_el\n\n\ndef main():\n    a = [1, 2, 3]\n    print(max_element(a))\n    print(max_element_iter(a))\n    b = [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]\n    print(max_element(b))\n    print(max_element_iter(b))\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()\n    main()"
    },
    {
      "rank": 40,
      "score": 9.907170511668092,
      "candidate": "if len(l) == 0:\n        return None\n    max_el = l[0]\n    for i in range(len(l)):\n        if l[i] > max_el:\n            max_el = l[i]\n    return max_el\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 41,
      "score": 9.887111849756732,
      "candidate": "return max(l)\n\n\ndef min_element(l: list):\n    \"\"\"Return minimum element in the list.\n    >>> min_element([1, 2, 3])\n    1\n    >>> min_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    -10\n    \"\"\"\n    return min(l)\n\n\ndef sum_element(l: list):\n    \"\"\"Return sum of all elements in the list.\n    >>> sum_element([1, 2, 3])\n    6\n    >>> sum_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    128\n    \"\"\"\n    return sum(l)\n\n\ndef average_element(l: list):\n    \"\"\"Return average of all elements in the list.\n    >>> average_element([1, 2, 3])\n    2.0\n    >>> average_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    17.6\n    \"\"\"\n    return sum(l) / len(l)\n\n\ndef max_element_index(l: list):\n    \"\"\"Return index of maximum element in the list.\n    >>> max_element_index([1, 2, 3])\n    2\n    >>> max_element_index([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    8\n    \"\"\"\n    return l.index(max(l))\n\n\ndef min_element_index(l: list):\n    \"\"\"Return index of minimum element in the list.\n    >>> min_element_index([1, 2, 3])\n    0\n    >>> min_element_index([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    9\n    \"\"\""
    },
    {
      "rank": 42,
      "score": 9.88293152152541,
      "candidate": "return max(l)\n\n\ndef max_element_2(l: list):\n    \"\"\"Return maximum element in the list.\n    >>> max_element_2([1, 2, 3])\n    3\n    >>> max_element_2([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    123\n    \"\"\"\n    max_value = l[0]\n    for i in range(1, len(l)):\n        if l[i] > max_value:\n            max_value = l[i]\n    return max_value\n\n\ndef max_element_3(l: list):\n    \"\"\"Return maximum element in the list.\n    >>> max_element_3([1, 2, 3])\n    3\n    >>> max_element_3([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    123\n    \"\"\"\n    max_value = l[0]\n    for i in l:\n        if i > max_value:\n            max_value = i\n    return max_value\n\n\ndef max_element_4(l: list):\n    \"\"\"Return maximum element in the list.\n    >>> max_element_4([1, 2, 3])\n    3\n    >>> max_element_4([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    123\n    \"\"\"\n    max_value = l[0]\n    for i in l:\n        if i > max_value:\n            max_value = i\n    return max_value\n\n\ndef max_element_5(l: list):\n    \"\"\"Return maximum element in the list.\n    >>> max_element_5([1, 2, 3])\n    3\n    >>> max_element_5([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])"
    },
    {
      "rank": 43,
      "score": 9.882923312638333,
      "candidate": "maximum = l[0]\n    for element in l:\n        if element > maximum:\n            maximum = element\n    return maximum\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 44,
      "score": 9.854153125103362,
      "candidate": "max_element = l[0]\n    for i in l:\n        if i > max_element:\n            max_element = i\n    return max_element\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 45,
      "score": 9.849448152205355,
      "candidate": "max = l[0]\n    for i in range(1, len(l)):\n        if l[i] > max:\n            max = l[i]\n    return max\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 46,
      "score": 9.845393812074393,
      "candidate": "max_el = l[0]\n    for x in l:\n        if x > max_el:\n            max_el = x\n    return max_el\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 47,
      "score": 9.807458859791842,
      "candidate": "# Your code here\n    # pass\n    max_element = l[0]\n    for i in l:\n        if i > max_element:\n            max_element = i\n    return max_element\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 48,
      "score": 9.769680614520107,
      "candidate": "max_element = l[0]\n    for i in range(1, len(l)):\n        if l[i] > max_element:\n            max_element = l[i]\n    return max_element\n\n\ndef max_element_in_list(l: list):\n    \"\"\"Return maximum element in the list.\n    >>> max_element_in_list([1, 2, 3])\n    3\n    >>> max_element_in_list([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    123\n    \"\"\"\n    max_element = l[0]\n    for i in l:\n        if i > max_element:\n            max_element = i\n    return max_element\n\n\ndef max_element_in_list_rec(l: list):\n    \"\"\"Return maximum element in the list.\n    >>> max_element_in_list_rec([1, 2, 3])\n    3\n    >>> max_element_in_list_rec([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    123\n    \"\"\"\n    if len(l) == 1:\n        return l[0]\n    else:\n        if l[0] > l[1]:\n            return l[0]\n        else:\n            return l[1]\n\n\ndef max_element_in_list_rec_2(l: list):\n    \"\"\"Return maximum element in the list.\n    >>> max_element_in_list_rec_2([1, 2, 3])\n    3\n    >>> max_element_in_list_rec_2([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    123\n    \"\"\"\n    if len(l) == 1:\n        return l[0]\n    else:\n        if l[0] > l[1]:\n            return max_element_in_list_rec_"
    },
    {
      "rank": 49,
      "score": 9.768291153593768,
      "candidate": "max_element = l[0]\n    for i in range(1, len(l)):\n        if l[i] > max_element:\n            max_element = l[i]\n    return max_element\n\n\ndef max_element_2(l: list):\n    \"\"\"Return maximum element in the list.\n    >>> max_element_2([1, 2, 3])\n    3\n    >>> max_element_2([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    123\n    \"\"\"\n    return max(l)\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 50,
      "score": 9.76713512321487,
      "candidate": "max_el = l[0]\n    for el in l:\n        if el > max_el:\n            max_el = el\n    return max_el\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 51,
      "score": 9.765262807032524,
      "candidate": "max_val = l[0]\n    for x in l:\n        if x > max_val:\n            max_val = x\n    return max_val\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 52,
      "score": 9.760412881077356,
      "candidate": "# TODO: implement\n    return None"
    },
    {
      "rank": 53,
      "score": 9.72780863773741,
      "candidate": "max = l[0]\n    for i in l:\n        if i > max:\n            max = i\n    return max\n\n\ndef min_element(l: list):\n    \"\"\"Return minimum element in the list.\n    >>> min_element([1, 2, 3])\n    1\n    >>> min_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    -10\n    \"\"\"\n    min = l[0]\n    for i in l:\n        if i < min:\n            min = i\n    return min\n\n\ndef average(l: list):\n    \"\"\"Return average value of the list.\n    >>> average([1, 2, 3])\n    2.0\n    >>> average([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    42.0\n    \"\"\"\n    sum = 0\n    for i in l:\n        sum += i\n    return sum/len(l)\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 54,
      "score": 9.718856235379514,
      "candidate": "max_ = l[0]\n    for i in range(len(l)):\n        if l[i] > max_:\n            max_ = l[i]\n    return max_\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 55,
      "score": 9.699680655040597,
      "candidate": "return max(l)\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 56,
      "score": 9.699146693885302,
      "candidate": "return max(l)\n\n\ndef min_element(l: list):\n    \"\"\"Return minimum element in the list.\n    >>> min_element([1, 2, 3])\n    1\n    >>> min_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    -10\n    \"\"\"\n    return min(l)\n\n\ndef get_positive_elements(l: list):\n    \"\"\"Return positive elements in the list.\n    >>> get_positive_elements([1, 2, 3])\n    [1, 2, 3]\n    >>> get_positive_elements([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123]\n    \"\"\"\n    return [e for e in l if e > 0]\n\n\ndef get_negative_elements(l: list):\n    \"\"\"Return negative elements in the list.\n    >>> get_negative_elements([1, 2, 3])\n    []\n    >>> get_negative_elements([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [-5, -3, -10]\n    \"\"\"\n    return [e for e in l if e < 0]\n\n\ndef remove_duplicate_elements(l: list):\n    \"\"\"Return list with unique elements.\n    >>> remove_duplicate_elements([1, 2, 3])\n    [1, 2, 3]\n    >>> remove_duplicate_elements([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [-10, 5, 3, 2, -3, 9, 0, 123, 1]\n    \"\"\"\n    return list(set(l))\n\n\ndef sum_elements(l:"
    },
    {
      "rank": 57,
      "score": 9.677440122697439,
      "candidate": "return max(l)\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 58,
      "score": 9.661538999847021,
      "candidate": "# max_elem = l[0]\n    # for i in range(1, len(l)):\n    #     if l[i] > max_elem:\n    #         max_elem = l[i]\n    # return max_elem\n    # return max(l)\n    return max(l)\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 59,
      "score": 9.640077895802646,
      "candidate": "max_elem = l[0]\n    for elem in l:\n        if elem > max_elem:\n            max_elem = elem\n    return max_elem\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 60,
      "score": 9.58039123838868,
      "candidate": "max_element = l[0]\n    for element in l:\n        if element > max_element:\n            max_element = element\n    return max_element\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 61,
      "score": 9.545987962239394,
      "candidate": "if len(l) == 0:\n        raise ValueError('Empty list')\n    max_el = l[0]\n    for el in l:\n        if el > max_el:\n            max_el = el\n    return max_el\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 62,
      "score": 9.493584439832787,
      "candidate": "max_el = 0\n    for i in l:\n        if i > max_el:\n            max_el = i\n    return max_el\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 63,
      "score": 9.47114453552205,
      "candidate": "m = l[0]\n    for i in range(1, len(l)):\n        if l[i] > m:\n            m = l[i]\n    return m\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 64,
      "score": 9.446832512996986,
      "candidate": "if len(l) == 0:\n        return None\n    max_ = l[0]\n    for i in l:\n        if i > max_:\n            max_ = i\n    return max_\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 65,
      "score": 9.42450321128885,
      "candidate": "maximum = l[0]\n    for i in range(1, len(l)):\n        if l[i] > maximum:\n            maximum = l[i]\n    return maximum\n\n\ndef main():\n    import doctest\n    doctest.testmod()\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 66,
      "score": 9.401896687959665,
      "candidate": "max_value = l[0]\n    for i in l:\n        if i > max_value:\n            max_value = i\n    return max_value\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 67,
      "score": 9.389578175014488,
      "candidate": "return l[0]\n\n\ndef max_element_v2(l: list):\n    \"\"\"Return maximum element in the list.\n    >>> max_element_v2([1, 2, 3])\n    3\n    >>> max_element_v2([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    123\n    \"\"\"\n    return l[0]\n\n\ndef max_element_v3(l: list):\n    \"\"\"Return maximum element in the list.\n    >>> max_element_v3([1, 2, 3])\n    3\n    >>> max_element_v3([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    123\n    \"\"\"\n    return l[0]\n\n\ndef max_element_v4(l: list):\n    \"\"\"Return maximum element in the list.\n    >>> max_element_v4([1, 2, 3])\n    3\n    >>> max_element_v4([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    123\n    \"\"\"\n    return l[0]\n\n\ndef max_element_v5(l: list):\n    \"\"\"Return maximum element in the list.\n    >>> max_element_v5([1, 2, 3])\n    3\n    >>> max_element_v5([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    123\n    \"\"\"\n    return l[0]\n\n\ndef max_element_v6(l: list):\n    \"\"\"Return maximum element in the list.\n    >>> max_element_v6([1, 2, 3])\n    3\n    >>> max_element_v6([5, 3, -5, 2, -3, 3, 9, 0, 12"
    },
    {
      "rank": 68,
      "score": 9.335906975550785,
      "candidate": "max = l[0]\n    for i in l:\n        if i > max:\n            max = i\n    return max\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 69,
      "score": 9.293848149332355,
      "candidate": "max_element = l[0]\n    for i in l:\n        if i > max_element:\n            max_element = i\n    return max_element\n\n\ndef max_element_v2(l: list):\n    \"\"\"Return maximum element in the list.\n    >>> max_element([1, 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    123\n    \"\"\"\n    return max(l)\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 70,
      "score": 9.287625906893272,
      "candidate": "if l == []:\n        return None\n    else:\n        max_el = l[0]\n        for i in l:\n            if i > max_el:\n                max_el = i\n        return max_el\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 71,
      "score": 9.260739004816287,
      "candidate": "return max(l)\n\n\ndef min_element(l: list):\n    \"\"\"Return minimum element in the list.\n    >>> min_element([1, 2, 3])\n    1\n    >>> min_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    -10\n    \"\"\"\n    return min(l)\n\n\ndef max_element_index(l: list):\n    \"\"\"Return index of maximum element in the list.\n    >>> max_element_index([1, 2, 3])\n    2\n    >>> max_element_index([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    8\n    \"\"\"\n    return l.index(max_element(l))\n\n\ndef min_element_index(l: list):\n    \"\"\"Return index of minimum element in the list.\n    >>> min_element_index([1, 2, 3])\n    0\n    >>> min_element_index([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    9\n    \"\"\"\n    return l.index(min_element(l))\n\n\ndef main():\n    import doctest\n    doctest.testmod()\n    l = [int(input()) for _ in range(10)]\n    print(f'max_element: {max_element(l)}')\n    print(f'max_element_index: {max_element_index(l)}')\n    print(f'min_element: {min_element(l)}')\n    print(f'min_element_index: {min_element_index(l)}')\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 72,
      "score": 9.137541083743484,
      "candidate": "max_element = l[0]\n    for x in l:\n        if x > max_element:\n            max_element = x\n    return max_element\n\n\ndef min_element(l: list):\n    \"\"\"Return minimum element in the list.\n    >>> min_element([1, 2, 3])\n    1\n    >>> min_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    -10\n    \"\"\"\n    min_element = l[0]\n    for x in l:\n        if x < min_element:\n            min_element = x\n    return min_element\n\n\ndef min_abs_element(l: list):\n    \"\"\"Return minimum absolute value element in the list.\n    >>> min_abs_element([1, 2, 3])\n    1\n    >>> min_abs_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    0\n    \"\"\"\n    min_abs_element = l[0]\n    for x in l:\n        if abs(x) < abs(min_abs_element):\n            min_abs_element = x\n    return min_abs_element\n\n\ndef sum_element(l: list):\n    \"\"\"Return sum of all the elements in the list.\n    >>> sum_element([1, 2, 3])\n    6\n    >>> sum_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    140\n    \"\"\"\n    sum_element = 0\n    for x in l:\n        sum_element += x\n    return sum_element\n\n\ndef product_element(l: list):\n    \"\"\"Return product of all the elements in the list.\n    >>> product_element([1, 2, 3])\n    6\n    >>> product_element([5, 3, -5, 2, -3, 3, 9, 0, 12"
    },
    {
      "rank": 73,
      "score": 9.118479922318633,
      "candidate": "m = l[0]\n    for i in l:\n        if i > m:\n            m = i\n    return m\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 74,
      "score": 9.0433598776711,
      "candidate": "maximum = None\n    for element in l:\n        if maximum is None or element > maximum:\n            maximum = element\n    return maximum\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 75,
      "score": 9.020164938060113,
      "candidate": "return l[len(l) - 1]\n\n\ndef min_element(l: list):\n    \"\"\"Return minimum element in the list.\n    >>> min_element([1, 2, 3])\n    1\n    >>> min_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    -10\n    \"\"\"\n    return l[0]\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 76,
      "score": 8.690127447955128,
      "candidate": "max = l[0]\n    for element in l:\n        if element > max:\n            max = element\n    return max\n\n\ndef min_element(l: list):\n    \"\"\"Return minimum element in the list.\n    >>> min_element([1, 2, 3])\n    1\n    >>> min_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    -10\n    \"\"\"\n    min = l[0]\n    for element in l:\n        if element < min:\n            min = element\n    return min\n\n\ndef reverse_list(l: list):\n    \"\"\"Return a new list with elements in reversed order.\n    >>> reverse_list([1, 2, 3])\n    [3, 2, 1]\n    >>> reverse_list([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [-10, 1, 9, 3, 3, -3, 2, -5, 3, 5, 123, 0]\n    \"\"\"\n    return l[::-1]\n\n\ndef sum_list(l: list):\n    \"\"\"Return sum of all elements in the list.\n    >>> sum_list([1, 2, 3])\n    6\n    >>> sum_list([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    132\n    \"\"\"\n    return sum(l)\n\n\ndef even_elements(l: list):\n    \"\"\"Return a new list with only even elements.\n    >>> even_elements([1, 2, 3])\n    [2]\n    >>> even_elements([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [2, -3, 3, 0, -10]\n    \"\"\"\n    return [element for element in"
    },
    {
      "rank": 77,
      "score": 8.444444444444445,
      "candidate": "m = l[0]\n    for i in l:\n        if i > m:\n            m = i\n    return m\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 78,
      "score": 8.444444444444445,
      "candidate": "return max(l)\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 79,
      "score": 8.444444444444445,
      "candidate": "maximum = l[0]\n    for x in l:\n        if x > maximum:\n            maximum = x\n    return maximum\n\n\ndef main():\n    l = [1, 2, 3]\n    print(max_element(l))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 80,
      "score": 8.444444444444445,
      "candidate": "return max(l)\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 81,
      "score": 8.444444444444445,
      "candidate": "# max_element = None\n    # for element in l:\n    #     if max_element is None or element > max_element:\n    #         max_element = element\n    # return max_element\n\n    max_element = l[0]\n    for element in l:\n        if element > max_element:\n            max_element = element\n    return max_element\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 82,
      "score": 8.444444444444445,
      "candidate": "max = l[0]\n    for i in range(1, len(l)):\n        if l[i] > max:\n            max = l[i]\n    return max\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 83,
      "score": 8.444444444444445,
      "candidate": "maximum = l[0]\n    for e in l:\n        if e > maximum:\n            maximum = e\n    return maximum\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 84,
      "score": 8.444444444444445,
      "candidate": "return max(l)\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 85,
      "score": 8.444444444444445,
      "candidate": "max_el = l[0]\n    for x in l:\n        if x > max_el:\n            max_el = x\n    return max_el\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 86,
      "score": 8.444444444444445,
      "candidate": "return l[0] if len(l) == 1 else max(l[0], max_element(l[1:]))\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 87,
      "score": 8.444444444444445,
      "candidate": "return max(l)\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 88,
      "score": 8.444444444444445,
      "candidate": "return max(l)\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 89,
      "score": 8.444444444444445,
      "candidate": "return max(l)"
    },
    {
      "rank": 90,
      "score": 8.444444444444445,
      "candidate": "return max(l)\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 91,
      "score": 8.444444444444445,
      "candidate": "max_so_far = l[0]\n    for i in range(1, len(l)):\n        if l[i] > max_so_far:\n            max_so_far = l[i]\n    return max_so_far\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 92,
      "score": 8.444444444444445,
      "candidate": "# Your code here\n    if len(l) == 1:\n        return l[0]\n    else:\n        max_num = max_element(l[1:])\n        if l[0] > max_num:\n            return l[0]\n        else:\n            return max_num\n\n\nprint(max_element([1, 2, 3]))\nprint(max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]))"
    },
    {
      "rank": 93,
      "score": 8.444444444444445,
      "candidate": "if l == []:\n        return None\n    else:\n        max_ele = l[0]\n        for i in range(len(l)):\n            if l[i] > max_ele:\n                max_ele = l[i]\n        return max_ele\n\n\nprint(max_element([1, 2, 3]))\nprint(max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]))"
    },
    {
      "rank": 94,
      "score": 3.0,
      "candidate": "max = 0\n    for i in l:\n        if i > max:\n            max = i\n    return max\n\n\ndef max_element_no_compare(l: list):\n    \"\"\"Return maximum element in the list.\n    >>> max_element_no_compare([1, 2, 3])\n    3\n    >>> max_element_no_compare([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    123\n    \"\"\"\n    max = l[0]\n    for i in l[1:]:\n        if i > max:\n            max = i\n    return max\n\n\ndef max_element_no_compare_no_loop(l: list):\n    \"\"\"Return maximum element in the list.\n    >>> max_element_no_compare_no_loop([1, 2, 3])\n    3\n    >>> max_element_no_compare_no_loop([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    123\n    \"\"\"\n    return max(l)\n\n\ndef min_element(l: list):\n    \"\"\"Return minimum element in the list.\n    >>> min_element([1, 2, 3])\n    1\n    >>> min_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    -10\n    \"\"\"\n    min = 0\n    for i in l:\n        if i < min:\n            min = i\n    return min\n\n\ndef min_element_no_compare(l: list):\n    \"\"\"Return minimum element in the list.\n    >>> min_element_no_compare([1, 2, 3])\n    1\n    >>> min_element_no_compare([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    -10\n    \"\"\"\n    min = l["
    },
    {
      "rank": 95,
      "score": 3.0,
      "candidate": "max_elem = l[0]\n    for elem in l:\n        if elem > max_elem:\n            max_elem = elem\n    return max_elem\n\n\ndef min_element(l: list):\n    \"\"\"Return minimum element in the list.\n    >>> min_element([1, 2, 3])\n    1\n    >>> min_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    -10\n    \"\"\"\n    min_elem = l[0]\n    for elem in l:\n        if elem < min_elem:\n            min_elem = elem\n    return min_elem\n\n\ndef max_and_min(l: list):\n    \"\"\"Return maximum and minimum element in the list.\n    >>> max_and_min([1, 2, 3])\n    (3, 1)\n    >>> max_and_min([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    (123, -10)\n    \"\"\"\n    max_elem = l[0]\n    min_elem = l[0]\n    for elem in l:\n        if elem > max_elem:\n            max_elem = elem\n        if elem < min_elem:\n            min_elem = elem\n    return max_elem, min_elem\n\n\ndef max_and_min_recursive(l: list):\n    \"\"\"Return maximum and minimum element in the list.\n    >>> max_and_min_recursive([1, 2, 3])\n    (3, 1)\n    >>> max_and_min_recursive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    (123, -10)\n    \"\"\"\n    if len(l) == 1:\n        return l[0], l[0]\n    else:\n        max_elem, min_elem = max_and_min_recursive(l[1:"
    },
    {
      "rank": 96,
      "score": 3.0,
      "candidate": "# Your code here\n    max_element = l[0]\n    for e in l:\n        if e > max_element:\n            max_element = e\n\n    return max_element\n\n\ndef max_element_binary(l: list):\n    \"\"\"Return maximum element in the list.\n    >>> max_element([1, 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    123\n    \"\"\"\n    # Your code here\n    if len(l) == 1:\n        return l[0]\n\n    if len(l) == 2:\n        if l[0] >= l[1]:\n            return l[0]\n        else:\n            return l[1]\n\n    middle = len(l) // 2\n\n    left_max = max_element_binary(l[:middle])\n    right_max = max_element_binary(l[middle:])\n\n    return left_max if left_max > right_max else right_max\n\n\ndef max_element_recursive_linear_time(l: list):\n    \"\"\"Return maximum element in the list.\n    >>> max_element([1, 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    123\n    \"\"\"\n    # Your code here\n    return _max_element_recursive_linear_time(l, 0)\n\n\ndef _max_element_recursive_linear_time(l: list, i: int):\n    if i >= len(l) - 1:\n        return l[i]\n\n    max_element = _max_element_recursive_linear_time(l, i + 1)\n\n    if l[i] > max_element:\n        max_element = l[i]\n\n    return max_element\n\n\ndef max_element_recursive_quad_time(l: list):"
    },
    {
      "rank": 97,
      "score": 3.0,
      "candidate": "if len(l) == 0:\n        return None\n    elif len(l) == 1:\n        return l[0]\n\n    max_element = l[0]\n    for i in range(1, len(l)):\n        if l[i] > max_element:\n            max_element = l[i]\n\n    return max_element\n\n\ndef min_element(l: list):\n    \"\"\"Return minimum element in the list.\n    >>> min_element([1, 2, 3])\n    1\n    >>> min_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    -10\n    \"\"\"\n\n    if len(l) == 0:\n        return None\n    elif len(l) == 1:\n        return l[0]\n\n    min_element = l[0]\n    for i in range(1, len(l)):\n        if l[i] < min_element:\n            min_element = l[i]\n\n    return min_element\n\n\ndef is_sorted(l: list):\n    \"\"\"Return True if the list is sorted.\n    >>> is_sorted([1, 2, 3])\n    True\n    >>> is_sorted([1, 2, 3, 3])\n    False\n    \"\"\"\n\n    for i in range(len(l) - 1):\n        if l[i] > l[i + 1]:\n            return False\n\n    return True\n\n\ndef count_occurrences(l: list, el):\n    \"\"\"Return the number of occurrences of the element in the list.\n    >>> count_occurrences([1, 2, 3, 4, 5], 3)\n    1\n    >>> count_occurrences([1, 2, 3, 4, 5], 2)\n    1\n    >>> count_occurrences([1, 2, 3, 4, 5], 0)\n    0\n    \"\"\"\n\n    count = 0\n    for i in range(len(l)):\n        if l"
    },
    {
      "rank": 98,
      "score": 3.0,
      "candidate": "return max(l)\n\n\ndef min_element(l: list):\n    \"\"\"Return minimum element in the list.\n    >>> min_element([1, 2, 3])\n    1\n    >>> min_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    -10\n    \"\"\"\n    return min(l)\n\n\ndef sum_element(l: list):\n    \"\"\"Return sum of all elements in the list.\n    >>> sum_element([1, 2, 3])\n    6\n    >>> sum_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    123\n    \"\"\"\n    return sum(l)\n\n\ndef max_element_naive(l: list):\n    \"\"\"Return maximum element in the list.\n    >>> max_element_naive([1, 2, 3])\n    3\n    >>> max_element_naive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    123\n    \"\"\"\n    max_element = l[0]\n    for i in range(len(l)):\n        if l[i] > max_element:\n            max_element = l[i]\n    return max_element\n\n\ndef min_element_naive(l: list):\n    \"\"\"Return minimum element in the list.\n    >>> min_element_naive([1, 2, 3])\n    1\n    >>> min_element_naive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    -10\n    \"\"\"\n    min_element = l[0]\n    for i in range(len(l)):\n        if l[i] < min_element:\n            min_element = l[i]\n    return min_element\n\n\ndef sum_element_naive(l: list"
    },
    {
      "rank": 99,
      "score": 3.0,
      "candidate": "max_el = None\n    for el in l:\n        if max_el is None or el > max_el:\n            max_el = el\n    return max_el\n\n\ndef min_element(l: list):\n    \"\"\"Return minimum element in the list.\n    >>> min_element([1, 2, 3])\n    1\n    >>> min_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    -10\n    \"\"\"\n    min_el = None\n    for el in l:\n        if min_el is None or el < min_el:\n            min_el = el\n    return min_el\n\n\ndef sum_elements(l: list):\n    \"\"\"Return sum of elements in the list.\n    >>> sum_elements([1, 2, 3])\n    6\n    >>> sum_elements([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    111\n    \"\"\"\n    total = 0\n    for el in l:\n        total += el\n    return total\n\n\ndef count_elements(l: list):\n    \"\"\"Return number of elements in the list.\n    >>> count_elements([1, 2, 3])\n    3\n    >>> count_elements([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    11\n    \"\"\"\n    return len(l)\n\n\ndef product_elements(l: list):\n    \"\"\"Return product of elements in the list.\n    >>> product_elements([1, 2, 3])\n    6\n    >>> product_elements([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    0\n    \"\"\"\n    total = 1\n    for el in l:\n        total *= el\n    return total\n\n\ndef mean_element(l: list):\n    \"\"\"Return mean"
    },
    {
      "rank": 100,
      "score": 3.0,
      "candidate": "if len(l) == 0:\n        return None\n    max_value = l[0]\n    for e in l:\n        if e > max_value:\n            max_value = e\n    return max_value\n\n\ndef min_element(l: list):\n    \"\"\"Return minimum element in the list.\n    >>> min_element([1, 2, 3])\n    1\n    >>> min_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    -10\n    \"\"\"\n    if len(l) == 0:\n        return None\n    min_value = l[0]\n    for e in l:\n        if e < min_value:\n            min_value = e\n    return min_value\n\n\ndef sum_element(l: list):\n    \"\"\"Return sum of elements in the list.\n    >>> sum_element([1, 2, 3])\n    6\n    >>> sum_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    136\n    \"\"\"\n    if len(l) == 0:\n        return None\n    sum_value = 0\n    for e in l:\n        sum_value += e\n    return sum_value\n\n\ndef product_element(l: list):\n    \"\"\"Return product of elements in the list.\n    >>> product_element([1, 2, 3])\n    6\n    >>> product_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    229262400\n    \"\"\"\n    if len(l) == 0:\n        return None\n    product_value = 1\n    for e in l:\n        product_value *= e\n    return product_value\n\n\ndef all_elements(l: list):\n    \"\"\"Return True if all elements in the list are True, otherwise False.\n    >>> all_elements([True, True,"
    }
  ]
}