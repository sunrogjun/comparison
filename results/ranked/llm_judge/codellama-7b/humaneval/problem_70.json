{
  "timestamp": "2025-09-14T21:36:04.492273",
  "method": "improved_llm_judge",
  "judge_model": "codellama/CodeLlama-7b-Python-hf",
  "target_model": "codellama-7b",
  "dataset": "humaneval",
  "problem_number": 70,
  "total_candidates": 100,
  "results": [
    {
      "rank": 1,
      "score": 10.0,
      "candidate": "if len(lst) == 0:\n        return lst\n    elif len(lst) == 1:\n        return lst\n    elif len(lst) == 2:\n        return lst\n    elif len(lst) == 3:\n        return lst\n    elif len(lst) == 4:\n        return lst\n    elif len(lst) == 5:\n        return lst\n    else:\n        minimum = min(lst)\n        maximum = max(lst)\n        lst_without_minimum = lst.remove(minimum)\n        lst_without_maximum = lst.remove(maximum)\n        lst_without_minimum_and_maximum = lst_without_minimum.remove(maximum)\n        sorted_lst = sorted(lst_without_minimum_and_maximum)\n        sorted_lst.append(minimum)\n        sorted_lst.append(maximum)\n        return sorted_lst\n\n\nprint(strange_sort_list([1, 2, 3, 4]))\nprint(strange_sort_list([5, 5, 5, 5]))\nprint(strange_sort_list([]))\nprint(strange_sort_list([1, 2, 3, 4, 5, 6]))"
    },
    {
      "rank": 2,
      "score": 10.0,
      "candidate": "return sorted(lst, key=lambda x: (x, -x))\n\n\ndef test_strange_sort_list():\n    assert strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    assert strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    assert strange_sort_list([]) == []\n    assert strange_sort_list([1, 1, 1, 1]) == [1, 1, 1, 1]\n    assert strange_sort_list([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3]\n    assert strange_sort_list([5, 4, 3, 2, 1]) == [1, 5, 2, 4, 3]\n    assert strange_sort_list([1, 2, 3, 4, 5, 6]) == [1, 6, 2, 5, 3, 4]"
    },
    {
      "rank": 3,
      "score": 10.0,
      "candidate": "if len(lst) == 0:\n        return []\n\n    lst = lst.copy()\n    lst.sort()\n    result = []\n\n    while len(lst) > 0:\n        result.append(lst[0])\n        lst.pop(0)\n\n        if len(lst) > 0:\n            lst.sort()\n            result.append(lst[-1])\n            lst.pop(-1)\n\n    return result\n\n\ndef strange_sort_list_2(lst):\n    return sorted(lst, key=lambda x: (x, -x))"
    },
    {
      "rank": 4,
      "score": 10.0,
      "candidate": "if len(lst) == 0:\n        return []\n    new_lst = []\n    new_lst.append(min(lst))\n    lst.remove(min(lst))\n    new_lst.append(max(lst))\n    lst.remove(max(lst))\n    new_lst.append(min(lst))\n    lst.remove(min(lst))\n    new_lst += lst\n    return new_lst\n\n\ndef strange_sort_list_2(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    if len(lst) == 0:\n        return []\n    new_lst = []\n    new_lst.append(min(lst))\n    lst.remove(min(lst))\n    new_lst.append(max(lst))\n    lst.remove(max(lst))\n    new_lst.append(min(lst))\n    lst.remove(min(lst))\n    new_lst += lst\n    return new_lst\n\n\nprint(strange_sort_list([1, 2, 3, 4]))\nprint(strange_sort_list([5, 5, 5, 5]))\nprint(strange_sort_list([]))\nprint(strange_sort_list_2([1, 2, 3, 4]))\nprint(strange_sort_list_2([5, 5, 5, 5]))\nprint(strange_sort_list_2([]))"
    },
    {
      "rank": 5,
      "score": 10.0,
      "candidate": "if len(lst) < 2:\n        return lst\n\n    new_lst = []\n    min_val = min(lst)\n    max_val = max(lst)\n    while min_val <= max_val:\n        if min_val in lst:\n            new_lst.append(min_val)\n            lst.remove(min_val)\n            min_val = min(lst)\n        else:\n            max_val -= 1\n\n    return new_lst + lst\n\n\ndef strange_sort_list_2(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n\n    if len(lst) < 2:\n        return lst\n\n    new_lst = []\n    min_val = min(lst)\n    max_val = max(lst)\n    while min_val <= max_val:\n        if min_val in lst:\n            new_lst.append(min_val)\n            lst.remove(min_val)\n            min_val = min(lst)\n        else:\n            max_val -= 1\n\n    return new_lst + lst\n\n\ndef strange_sort_list_3(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort"
    },
    {
      "rank": 6,
      "score": 10.0,
      "candidate": "# if lst == []:\n    #     return []\n    # else:\n    #     min_val = min(lst)\n    #     lst_min = [x for x in lst if x != min_val]\n    #     lst_max = [x for x in lst if x == max(lst_min)]\n    #     return [min_val] + lst_max + lst_min\n\n    if lst == []:\n        return []\n    else:\n        min_val = min(lst)\n        lst_min = [x for x in lst if x != min_val]\n        lst_max = [x for x in lst if x == max(lst_min)]\n        return [min_val] + lst_max + lst_min\n\n\nprint(strange_sort_list([1, 2, 3, 4]))\nprint(strange_sort_list([5, 5, 5, 5]))\nprint(strange_sort_list([]))"
    },
    {
      "rank": 7,
      "score": 10.0,
      "candidate": "# Your code here\n    if len(lst) == 0:\n        return lst\n    else:\n        minimum = min(lst)\n        lst.remove(minimum)\n        maximum = max(lst)\n        lst.remove(maximum)\n        return [minimum, maximum] + strange_sort_list(lst)\n\n\n# print(strange_sort_list([1, 2, 3, 4]))\n# print(strange_sort_list([5, 5, 5, 5]))\n# print(strange_sort_list([]))"
    },
    {
      "rank": 8,
      "score": 10.0,
      "candidate": "if len(lst) < 2:\n        return lst\n    else:\n        min_val = min(lst)\n        lst.remove(min_val)\n        max_val = max(lst)\n        lst.remove(max_val)\n        return [min_val] + [max_val] + strange_sort_list(lst)\n\n\ndef test_strange_sort_list():\n    assert strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    assert strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    assert strange_sort_list([]) == []\n    assert strange_sort_list([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3]\n    assert strange_sort_list([5, 4, 3, 2, 1]) == [1, 5, 2, 4, 3]\n    assert strange_sort_list([1, 5, 2, 4, 3]) == [1, 5, 2, 4, 3]\n    assert strange_sort_list([6, 1, 2, 7, 3, 8, 4, 5]) == [1, 8, 2, 7, 3, 6, 4, 5]"
    },
    {
      "rank": 9,
      "score": 10.0,
      "candidate": "# your code here\n    if len(lst) == 0:\n        return []\n    else:\n        min_val = min(lst)\n        lst.remove(min_val)\n        max_val = max(lst)\n        lst.append(max_val)\n        lst.sort()\n        return lst\n\n\nprint(strange_sort_list([1, 2, 3, 4]))\nprint(strange_sort_list([5, 5, 5, 5]))\nprint(strange_sort_list([]))"
    },
    {
      "rank": 10,
      "score": 10.0,
      "candidate": "if len(lst) == 0:\n        return []\n\n    # If list has only one element, return that element\n    if len(lst) == 1:\n        return lst\n\n    # Get the min and max value\n    min_value = min(lst)\n    max_value = max(lst)\n\n    # Remove the min and max value from the list\n    lst.remove(min_value)\n    lst.remove(max_value)\n\n    # Add the min value at the beginning of the list\n    lst.insert(0, min_value)\n\n    # Add the max value at the end of the list\n    lst.append(max_value)\n\n    # Call the function recursively\n    return strange_sort_list(lst)\n\n\ndef strange_sort_list_2(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    if len(lst) == 0:\n        return []\n\n    # Get the min and max value\n    min_value = min(lst)\n    max_value = max(lst)\n\n    # Remove the min and max value from the list\n    lst.remove(min_value)\n    lst.remove(max_value)\n\n    # Add the min value at the beginning of the list\n    lst.insert(0, min_value)\n\n    # Add the max value at the end of the list\n    lst.append(max_value)\n\n    # Create a new list with the same length as the original\n    new_list = [None] * len(lst)\n\n    # Loop through the list\n    for index, item in enumerate(lst):\n        # If the item is smaller than the min value, add it to"
    },
    {
      "rank": 11,
      "score": 10.0,
      "candidate": "if len(lst) == 0:\n        return []\n    lst_new = []\n    while len(lst) != 0:\n        min_val = min(lst)\n        lst.remove(min_val)\n        if len(lst) == 0:\n            lst_new.append(min_val)\n        else:\n            max_val = max(lst)\n            lst.remove(max_val)\n            lst_new.append(max_val)\n            lst_new.append(min_val)\n    return lst_new\n\n\ndef strange_sort_list2(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    return sorted(lst, key=lambda x: (x, -x))\n\n\nif __name__ == '__main__':\n    print(strange_sort_list([1, 2, 3, 4]))\n    print(strange_sort_list([5, 5, 5, 5]))\n    print(strange_sort_list([]))\n    print(strange_sort_list([1, 1, 2, 4, 4, 4, 4, 5]))\n    print(strange_sort_list([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,"
    },
    {
      "rank": 12,
      "score": 10.0,
      "candidate": "if len(lst) == 0:\n        return []\n    lst_sorted = lst.copy()\n    lst_sorted.sort()\n    result = [lst_sorted[0]]\n    lst_sorted.pop(0)\n    while len(lst_sorted) > 0:\n        lst_sorted.sort(reverse=True)\n        result.append(lst_sorted[0])\n        lst_sorted.pop(0)\n        lst_sorted.sort()\n    return result\n\nif __name__ == '__main__':\n    print(strange_sort_list([1, 2, 3, 4]))\n    print(strange_sort_list([5, 5, 5, 5]))\n    print(strange_sort_list([]))"
    },
    {
      "rank": 13,
      "score": 10.0,
      "candidate": "if len(lst) == 0:\n        return []\n    if len(lst) == 1:\n        return lst\n    if len(lst) == 2:\n        if lst[0] > lst[1]:\n            return [lst[1], lst[0]]\n        return lst\n\n    lst = [int(i) for i in lst]\n    lst.sort()\n    result = []\n    while len(lst) > 0:\n        result.append(min(lst))\n        lst.remove(min(lst))\n        if len(lst) == 0:\n            break\n        result.append(max(lst))\n        lst.remove(max(lst))\n\n    return result\n\n\ndef strange_sort_list_2(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    if len(lst) == 0:\n        return []\n    if len(lst) == 1:\n        return lst\n    if len(lst) == 2:\n        if lst[0] > lst[1]:\n            return [lst[1], lst[0]]\n        return lst\n\n    lst = [int(i) for i in lst]\n    lst.sort()\n    result = []\n    while len(lst) > 0:\n        result.append(lst[0])\n        lst.remove(lst[0])\n        if len(lst) == 0:\n            break\n        result.append(lst[-1])\n        lst.remove(lst[-1])\n\n    return result\n\n\ndef strange_sort_list_3(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you"
    },
    {
      "rank": 14,
      "score": 10.0,
      "candidate": "if len(lst) == 0:\n        return []\n    min = lst[0]\n    max = lst[0]\n    for i in lst:\n        if i < min:\n            min = i\n        elif i > max:\n            max = i\n    if len(lst) == 1:\n        return [lst[0]]\n    result = [min]\n    for i in range(len(lst)):\n        lst.remove(min)\n        if len(lst) == 0:\n            return result + [max]\n        min = lst[0]\n        for j in lst:\n            if j < min:\n                min = j\n        result.append(max)\n        max = min\n    return result\n\n\ndef strange_sort_list_v2(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    if len(lst) == 0:\n        return []\n    min = lst[0]\n    max = lst[0]\n    for i in lst:\n        if i < min:\n            min = i\n        elif i > max:\n            max = i\n    if len(lst) == 1:\n        return [lst[0]]\n    result = [min]\n    for i in range(len(lst)):\n        lst.remove(min)\n        if len(lst) == 0:\n            return result + [max]\n        min = lst[0]\n        for j in lst:\n            if j < min:\n                min = j\n        result.append(max)\n        max = min\n    return result"
    },
    {
      "rank": 15,
      "score": 10.0,
      "candidate": "if lst == []:\n        return []\n    elif len(lst) == 1:\n        return lst\n    else:\n        return [min(lst), max(lst[1:])] + strange_sort_list(lst[1:])\n\n\n\ndef strange_sort_list2(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    if lst == []:\n        return []\n    else:\n        return [min(lst)] + [max(lst[1:])] + strange_sort_list2(lst[1:])\n\n\ndef strange_sort_list3(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    if lst == []:\n        return []\n    elif len(lst) == 1:\n        return lst\n    else:\n        return [min(lst)] + [max(lst[1:])] + strange_sort_list3(lst[1:])\n\n\ndef strange_sort_list4(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on."
    },
    {
      "rank": 16,
      "score": 10.0,
      "candidate": "if len(lst) == 0:\n        return []\n    min_val = min(lst)\n    max_val = max(lst)\n    result = [min_val]\n    if min_val == max_val:\n        return lst\n    result.append(max_val)\n    new_lst = [x for x in lst if x != min_val and x != max_val]\n    return result + strange_sort_list(new_lst)\n\n\ndef strange_sort_list_1(lst):\n    return sorted(lst, key=lambda x: (x in lst[::-2], lst.index(x)))"
    },
    {
      "rank": 17,
      "score": 10.0,
      "candidate": "pass"
    },
    {
      "rank": 18,
      "score": 10.0,
      "candidate": "pass\n\n\n\ndef strange_sort_list_inplace(lst):\n    '''\n    Given list of integers, sort the list in place.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    pass"
    },
    {
      "rank": 19,
      "score": 10.0,
      "candidate": "if len(lst) == 0:\n        return []\n\n    new_lst = []\n    lst.sort()\n    for i in range(len(lst)):\n        new_lst.append(lst[i])\n        lst.remove(lst[i])\n        lst.sort()\n        lst.append(new_lst[i])\n\n    return new_lst\n\n\ndef strange_sort_list_2(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n\n    if len(lst) == 0:\n        return []\n\n    new_lst = []\n    lst.sort()\n    for i in range(len(lst)):\n        new_lst.append(lst[i])\n        lst.remove(lst[i])\n        lst.sort()\n        lst.append(new_lst[i])\n\n    return new_lst\n\n\ndef strange_sort_list_3(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    return sorted(lst, reverse=True)\n\n\ndef strange_sort_list_4(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when"
    },
    {
      "rank": 20,
      "score": 10.0,
      "candidate": "if len(lst) == 0:\n        return []\n\n    new_list = [min(lst)]\n\n    while len(lst) > 0:\n        lst.remove(min(lst))\n        new_list.append(max(lst))\n        lst.remove(max(lst))\n        new_list.append(min(lst))\n        lst.remove(min(lst))\n\n    return new_list\n\n\nif __name__ == '__main__':\n    print(strange_sort_list([1, 2, 3, 4]))\n    print(strange_sort_list([5, 5, 5, 5]))\n    print(strange_sort_list([]))"
    },
    {
      "rank": 21,
      "score": 10.0,
      "candidate": "if len(lst) == 0:\n        return []\n    lst.sort()\n    min_value = lst[0]\n    max_value = lst[-1]\n    result = []\n    while len(lst) > 0:\n        if len(lst) == 1:\n            result.append(lst[0])\n            break\n        elif min_value == max_value:\n            result.append(max_value)\n            result.append(min_value)\n            break\n        elif len(lst) == 2:\n            if lst[0] == min_value:\n                result.append(min_value)\n                result.append(max_value)\n            elif lst[1] == min_value:\n                result.append(max_value)\n                result.append(min_value)\n            break\n        else:\n            result.append(min_value)\n            lst.remove(min_value)\n            min_value = min(lst)\n            max_value = max(lst)\n    return result\n\n\nif __name__ == '__main__':\n    print(strange_sort_list([1, 2, 3, 4]))\n    print(strange_sort_list([5, 5, 5, 5]))\n    print(strange_sort_list([]))\n    print(strange_sort_list([10, 9, 8, 7, 6, 5, 4, 3, 2, 1]))\n    print(strange_sort_list([1, 1, 1, 1, 1, 1, 1, 1, 1, 1]))"
    },
    {
      "rank": 22,
      "score": 9.993251387631034,
      "candidate": "if len(lst) == 0:\n        return lst\n    else:\n        min_val = min(lst)\n        max_val = max(lst)\n        lst.remove(min_val)\n        lst.remove(max_val)\n        return [min_val, max_val] + strange_sort_list(lst)\n\ndef strange_sort_list_1(lst):\n    if len(lst) < 2:\n        return lst\n    elif len(lst) == 2:\n        return [min(lst), max(lst)]\n    else:\n        return [min(lst)] + [max(lst)] + strange_sort_list_1(lst[:-2])\n\ndef strange_sort_list_2(lst):\n    if len(lst) < 2:\n        return lst\n    elif len(lst) == 2:\n        return [min(lst), max(lst)]\n    else:\n        return strange_sort_list_2([min(lst), max(lst)] + lst[2:])\n\ndef strange_sort_list_3(lst):\n    return lst[::2] + lst[1::2][::-1]\n\ndef strange_sort_list_4(lst):\n    return sorted(lst, key=lambda x: (x % 2 == 0, x))\n\ndef strange_sort_list_5(lst):\n    return sorted(lst, key=lambda x: (x % 2 == 0, -x))\n\ndef strange_sort_list_6(lst):\n    return sorted(lst, key=lambda x: (x % 2 == 0, x))[1::2]\n\ndef strange_sort_list_7(lst):\n    return sorted(lst, key=lambda x: (x % 2 == 0, -x))[1::2]\n\n\nif __name__ == '__main__':\n    print(strange_sort_list([1, 2, 3, 4]))\n    print(strange_sort_list([5, 5, 5, 5]))\n    print(strange_sort_list([]))\n    print(strange_sort_list_1"
    },
    {
      "rank": 23,
      "score": 9.982086980445024,
      "candidate": "result = []\n    while lst:\n        min_val = min(lst)\n        max_val = max(lst)\n        result.append(min_val)\n        result.append(max_val)\n        lst.remove(min_val)\n        lst.remove(max_val)\n\n    return result\n\nprint(strange_sort_list([1, 2, 3, 4]))"
    },
    {
      "rank": 24,
      "score": 9.963994939209833,
      "candidate": "lst_len = len(lst)\n    if lst_len == 0:\n        return []\n    elif lst_len == 1:\n        return lst\n    elif lst_len == 2:\n        if lst[0] <= lst[1]:\n            return [lst[0], lst[1]]\n        elif lst[0] > lst[1]:\n            return [lst[1], lst[0]]\n    else:\n        min_val = min(lst)\n        lst.remove(min_val)\n        lst.append(min_val)\n        max_val = max(lst)\n        lst.remove(max_val)\n        lst.insert(0, max_val)\n        return [min_val] + strange_sort_list(lst[:2]) + strange_sort_list(lst[2:])\n\n\nif __name__ == '__main__':\n    print(strange_sort_list([1, 2, 3, 4]))\n    print(strange_sort_list([5, 5, 5, 5]))\n    print(strange_sort_list([]))"
    },
    {
      "rank": 25,
      "score": 9.907170511668092,
      "candidate": "if len(lst) == 0:\n        return []\n    else:\n        min_num = min(lst)\n        lst.remove(min_num)\n        max_num = max(lst)\n        lst.remove(max_num)\n        lst.append(max_num)\n        lst.append(min_num)\n        return lst\n\n\ndef strange_sort_list_inplace(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    lst.sort()\n    return lst"
    },
    {
      "rank": 26,
      "score": 9.887111849756732,
      "candidate": "if lst == []:\n        return []\n    else:\n        min = min(lst)\n        lst.remove(min)\n        max = max(lst)\n        lst.remove(max)\n        return [min, max] + strange_sort_list(lst)\n\n\n\ndef strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    if lst == []:\n        return []\n    else:\n        min = min(lst)\n        lst.remove(min)\n        max = max(lst)\n        lst.remove(max)\n        return [min, max] + strange_sort_list(lst)\n\n\n\ndef strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    if lst == []:\n        return []\n    else:\n        min = min(lst)\n        lst.remove(min)\n        max = max(lst)\n        lst.remove(max)\n        return [min, max] + strange_sort_list(lst)"
    },
    {
      "rank": 27,
      "score": 9.88293152152541,
      "candidate": "# Your code here\n    if not lst:\n        return []\n    # if len(lst) == 1:\n    #     return lst\n    lst_min = min(lst)\n    lst_max = max(lst)\n    lst_min_idx = lst.index(lst_min)\n    lst_max_idx = lst.index(lst_max)\n    lst[lst_min_idx] = lst_max\n    lst[lst_max_idx] = lst_min\n    return lst\n\n\ndef strange_sort_list_2(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    # Your code here\n    if not lst:\n        return []\n    # if len(lst) == 1:\n    #     return lst\n    lst_min = min(lst)\n    lst_max = max(lst)\n    lst_min_idx = lst.index(lst_min)\n    lst_max_idx = lst.index(lst_max)\n    lst[lst_min_idx] = lst_max\n    lst[lst_max_idx] = lst_min\n    return lst"
    },
    {
      "rank": 28,
      "score": 9.845393812074393,
      "candidate": "if len(lst) == 0:\n        return []\n    else:\n        lst_min = min(lst)\n        lst_max = max(lst)\n        lst_min_index = lst.index(lst_min)\n        lst_max_index = lst.index(lst_max)\n        lst_min_list = lst[:lst_min_index]\n        lst_max_list = lst[lst_min_index:]\n        lst_min_list.append(lst_max)\n        lst_max_list.append(lst_min)\n        return lst_min_list + lst_max_list\n\n\ndef strange_sort_list_inplace(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    lst_min = min(lst)\n    lst_max = max(lst)\n    lst_min_index = lst.index(lst_min)\n    lst_max_index = lst.index(lst_max)\n    lst_min_list = lst[:lst_min_index]\n    lst_max_list = lst[lst_min_index:]\n    lst_min_list.append(lst_max)\n    lst_max_list.append(lst_min)\n    lst_min_list = lst[:lst_min_index]\n    lst_max_list = lst[lst_min_index:]\n    lst_min_list.append(lst_max)\n    lst_max_list.append(lst_min)\n    lst[0:lst_min_index] = lst_min_list\n    lst[lst_min_index:] = lst_max_list\n    return lst"
    },
    {
      "rank": 29,
      "score": 9.807458859791842,
      "candidate": "# if lst == []:\n    #     return []\n    # min_val = min(lst)\n    # max_val = max(lst)\n    # lst = [x for x in lst if x != min_val and x != max_val]\n    # return [min_val, max_val] + strange_sort_list(lst)\n\n    # new_lst = []\n    # min_val = min(lst)\n    # max_val = max(lst)\n    # lst = [x for x in lst if x != min_val and x != max_val]\n    # new_lst.append(min_val)\n    # new_lst.append(max_val)\n    # new_lst = new_lst + strange_sort_list(lst)\n    # return new_lst\n\n    if lst == []:\n        return []\n    else:\n        min_val = min(lst)\n        max_val = max(lst)\n        lst = [x for x in lst if x != min_val and x != max_val]\n        return [min_val, max_val] + strange_sort_list(lst)\n\n\ndef strange_sort_list_II(lst):\n    # O(n) time, O(n) space\n    if lst == []:\n        return []\n    else:\n        min_val = min(lst)\n        lst = lst.remove(min_val)\n        max_val = max(lst)\n        lst = lst.remove(max_val)\n        return [min_val, max_val] + strange_sort_list_II(lst)\n\n\ndef strange_sort_list_III(lst):\n    # O(n^2) time, O(n) space\n    if lst == []:\n        return []\n    else:\n        min_val = min(lst)\n        lst = lst.remove(min_val)\n        max_val = max(lst)\n        lst = lst.remove(max_val)\n        return [min_val, max_val] + strange_sort_list_III(lst)\n\n\ndef strange_sort_list_IV(lst):\n    # O(n) time"
    },
    {
      "rank": 30,
      "score": 9.769680614520107,
      "candidate": "if lst == []:\n        return []\n    else:\n        min = lst[0]\n        max = lst[0]\n        for i in lst:\n            if i < min:\n                min = i\n            elif i > max:\n                max = i\n        lst.remove(min)\n        lst.remove(max)\n        lst.insert(0, min)\n        lst.append(max)\n        return lst\n\n\ndef strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    if lst == []:\n        return []\n    else:\n        min = lst[0]\n        max = lst[0]\n        for i in lst:\n            if i < min:\n                min = i\n            elif i > max:\n                max = i\n        lst.remove(min)\n        lst.remove(max)\n        lst.insert(0, min)\n        lst.append(max)\n        return lst"
    },
    {
      "rank": 31,
      "score": 9.768291153593768,
      "candidate": "if not lst:\n        return lst\n    else:\n        minimum = min(lst)\n        lst.remove(minimum)\n        maximum = max(lst)\n        lst.remove(maximum)\n        return [minimum, maximum] + strange_sort_list(lst)\n\n\ndef strange_sort_list_2(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    if not lst:\n        return lst\n    else:\n        minimum = min(lst)\n        lst.remove(minimum)\n        return [minimum] + strange_sort_list_2(lst) + [max(lst)]\n\n\ndef strange_sort_list_3(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    if not lst:\n        return lst\n    else:\n        minimum = min(lst)\n        lst.remove(minimum)\n        return [minimum] + strange_sort_list_3(lst) + [max(lst)]"
    },
    {
      "rank": 32,
      "score": 9.765262807032524,
      "candidate": "# your code here\n    if len(lst) == 0:\n        return []\n    else:\n        min_val = min(lst)\n        lst.remove(min_val)\n        max_val = max(lst)\n        lst.remove(max_val)\n        lst.append(max_val)\n        lst.append(min_val)\n        return lst\n\n\ndef strange_sort_list2(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    # your code here\n    if len(lst) == 0:\n        return []\n    else:\n        lst.sort()\n        return lst[0:1] + lst[-1:] + lst[1:-1]\n\n\ndef strange_sort_list3(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    # your code here\n    return sorted(lst, key=lambda x: (x, -x))"
    },
    {
      "rank": 33,
      "score": 9.749121478207732,
      "candidate": "result = []\n    while len(lst) > 0:\n        min_value = min(lst)\n        result.append(min_value)\n        lst.remove(min_value)\n        max_value = max(lst)\n        result.append(max_value)\n        lst.remove(max_value)\n    return result\n\n\ndef strange_sort_list_2(lst):\n    return sorted(lst, key=lambda x: (x, -x))"
    },
    {
      "rank": 34,
      "score": 9.72780863773741,
      "candidate": "if len(lst) == 0:\n        return []\n\n    sorted_list = []\n    while lst:\n        minimum = min(lst)\n        lst.remove(minimum)\n        sorted_list.append(minimum)\n        if lst:\n            maximum = max(lst)\n            sorted_list.append(maximum)\n            lst.remove(maximum)\n    return sorted_list\n\n\nprint(strange_sort_list([1, 2, 3, 4]))\nprint(strange_sort_list([5, 5, 5, 5]))\nprint(strange_sort_list([]))"
    },
    {
      "rank": 35,
      "score": 9.699680655040597,
      "candidate": "if len(lst) == 0:\n        return []\n    result = []\n    for i in range(len(lst)):\n        if len(lst) == 1:\n            return lst\n        elif len(lst) == 2:\n            return [lst[1], lst[0]]\n        elif len(lst) > 2:\n            min_value = min(lst)\n            max_value = max(lst)\n            result.append(min_value)\n            lst.remove(min_value)\n            result.append(max_value)\n            lst.remove(max_value)\n    return result\n\n\nprint(strange_sort_list([1, 2, 3, 4]))\nprint(strange_sort_list([5, 5, 5, 5]))\nprint(strange_sort_list([]))"
    },
    {
      "rank": 36,
      "score": 9.699146693885302,
      "candidate": "lst = list(lst)\n    lst.sort()\n    lst_len = len(lst)\n    i = 0\n    while i < lst_len:\n        min_value = lst[0]\n        lst.remove(min_value)\n        lst.append(min_value)\n        i += 1\n    return lst\n\nprint(strange_sort_list([1, 2, 3, 4]))\nprint(strange_sort_list([5, 5, 5, 5]))\nprint(strange_sort_list([]))"
    },
    {
      "rank": 37,
      "score": 9.595753198553407,
      "candidate": "pass\n\n\ndef strange_sort_list2(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    if not lst:\n        return lst\n    result = []\n    min_val = min(lst)\n    max_val = max(lst)\n    lst.remove(min_val)\n    lst.remove(max_val)\n    result.append(min_val)\n    result.append(max_val)\n    if lst:\n        result += strange_sort_list2(lst)\n    return result\n\n\n\ndef strange_sort_list3(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    if not lst:\n        return lst\n    result = []\n    min_val = min(lst)\n    lst.remove(min_val)\n    max_val = max(lst)\n    lst.remove(max_val)\n    result.append(min_val)\n    result.append(max_val)\n    if lst:\n        result += strange_sort_list3(lst)\n    return result"
    },
    {
      "rank": 38,
      "score": 9.58039123838868,
      "candidate": "result = []\n    if lst:\n        minimum = min(lst)\n        maximum = max(lst)\n        result.append(minimum)\n        lst.remove(minimum)\n        result.append(maximum)\n        lst.remove(maximum)\n        while lst:\n            result.append(min(lst))\n            lst.remove(min(lst))\n            result.append(max(lst))\n            lst.remove(max(lst))\n    return result\n\n\ndef strange_sort_list_2(lst):\n    return sorted(lst, key=lambda x: (x, -x))\n\n\ndef strange_sort_list_3(lst):\n    return sorted(lst, key=lambda x: (-abs(x), x))\n\n\ndef strange_sort_list_4(lst):\n    return sorted(lst, key=lambda x: (abs(x), -x))\n\n\ndef strange_sort_list_5(lst):\n    return sorted(lst, key=lambda x: (x, -x))\n\n\ndef strange_sort_list_6(lst):\n    return sorted(lst, key=lambda x: (abs(x), -x))"
    },
    {
      "rank": 39,
      "score": 9.493584439832787,
      "candidate": "if len(lst) == 0:\n        return []\n    lst = sorted(lst)\n    result = [lst[0]]\n    for i in range(1, len(lst)):\n        result.append(lst[-i])\n    return result\n\n\ndef strange_sort_list_in_place(lst):\n    '''\n    Given list of integers, sort list in place into strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list_in_place([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list_in_place([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list_in_place([]) == []\n    '''\n    if len(lst) == 0:\n        return []\n    lst = sorted(lst)\n    result = [lst[0]]\n    for i in range(1, len(lst)):\n        result.append(lst[-i])\n    lst[:] = result\n    return lst"
    },
    {
      "rank": 40,
      "score": 9.47114453552205,
      "candidate": "if lst == []:\n        return lst\n    else:\n        return [min(lst)] + [max(lst)] + [min(lst[1:])] + [max(lst[1:])]\n\n\ndef strange_sort_list(lst):\n    if lst == []:\n        return []\n    else:\n        return [min(lst)] + [max(lst)] + strange_sort_list(sorted(lst[2:]))"
    },
    {
      "rank": 41,
      "score": 9.446832512996986,
      "candidate": "#pass\n\n    # if len(lst) == 0:\n    #     return lst\n    # else:\n    #     return [min(lst)] + [max(lst)] + [min(lst)] + [max(lst)]\n\n    # if len(lst) == 0:\n    #     return lst\n    # else:\n    #     return [min(lst)] + [max(lst)] + [min(lst)] + [max(lst)]\n\n    # if len(lst) == 0:\n    #     return lst\n    # else:\n    #     return [min(lst)] + [max(lst)] + [min(lst)] + [max(lst)]\n\n    if len(lst) == 0:\n        return lst\n    else:\n        return [min(lst)] + [max(lst)] + [min(lst)] + [max(lst)]\n\n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n# \n#"
    },
    {
      "rank": 42,
      "score": 9.42450321128885,
      "candidate": "result = []\n    while lst:\n        result.append(min(lst))\n        lst.remove(min(lst))\n        result.append(max(lst))\n        lst.remove(max(lst))\n    return result\n\n\nif __name__ == '__main__':\n    print(strange_sort_list([1, 2, 3, 4]))\n    print(strange_sort_list([5, 5, 5, 5]))\n    print(strange_sort_list([]))"
    },
    {
      "rank": 43,
      "score": 9.389578175014488,
      "candidate": "result = []\n    if lst == []:\n        return []\n    else:\n        m = min(lst)\n        result.append(m)\n        lst.remove(m)\n        m = max(lst)\n        result.append(m)\n        lst.remove(m)\n        return result + strange_sort_list(lst)\n\n\n\n\n\ndef strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    result = []\n    if lst == []:\n        return []\n    else:\n        m = min(lst)\n        result.append(m)\n        lst.remove(m)\n        m = max(lst)\n        result.append(m)\n        lst.remove(m)\n        return result + strange_sort_list(lst)"
    },
    {
      "rank": 44,
      "score": 9.335906975550785,
      "candidate": "if not lst:\n        return []\n\n    sorted_list = []\n    while lst:\n        min_value = min(lst)\n        lst.remove(min_value)\n        max_value = max(lst)\n        lst.remove(max_value)\n        sorted_list.append(min_value)\n        sorted_list.append(max_value)\n    return sorted_list\n\n\ndef strange_sort_list2(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list2([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list2([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list2([]) == []\n    '''\n    if not lst:\n        return []\n\n    lst.sort()\n    min_value = min(lst)\n    lst.remove(min_value)\n    max_value = max(lst)\n    lst.remove(max_value)\n    lst.append(min_value)\n    lst.append(max_value)\n    lst.sort()\n    return lst"
    },
    {
      "rank": 45,
      "score": 9.260739004816287,
      "candidate": "# your code here\n    if len(lst) == 0:\n        return []\n    else:\n        return [min(lst)] + strange_sort_list([i for i in lst if i != min(lst)]) + [max(lst)]\n\n\nprint(strange_sort_list([1, 2, 3, 4]))\nprint(strange_sort_list([5, 5, 5, 5]))\nprint(strange_sort_list([]))"
    },
    {
      "rank": 46,
      "score": 9.137541083743484,
      "candidate": "if not lst:\n        return []\n    if len(lst) == 1:\n        return lst\n    min_lst = sorted(lst)[0]\n    lst.remove(min_lst)\n    max_lst = sorted(lst)[-1]\n    lst.remove(max_lst)\n    lst.append(min_lst)\n    lst.append(max_lst)\n    return lst\n\ndef strange_sort_list_2(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    return sorted(lst)\n\ndef strange_sort_list_3(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    return sorted(lst)"
    },
    {
      "rank": 47,
      "score": 9.0433598776711,
      "candidate": "# your code here\n    # if len(lst) == 0:\n    #     return []\n    # lst.sort()\n    # min_val = lst[0]\n    # max_val = lst[-1]\n    # lst.remove(max_val)\n    # lst.remove(min_val)\n    # lst.append(max_val)\n    # lst.append(min_val)\n    # return lst\n\n    # lst.sort()\n    # lst = [min(lst)] + [max(lst)] + lst[2:]\n    # return lst\n\n    lst.sort()\n    min_val = lst[0]\n    max_val = lst[-1]\n    lst.remove(max_val)\n    lst.remove(min_val)\n    lst.append(max_val)\n    lst.append(min_val)\n    return lst"
    },
    {
      "rank": 48,
      "score": 9.020164938060113,
      "candidate": "# your code here\n    if len(lst) == 0:\n        return []\n    else:\n        lst_min = min(lst)\n        lst_max = max(lst)\n        lst_mid = lst_max if lst_min == lst_max else min([x for x in lst if x != lst_min and x != lst_max])\n        lst_odd = sorted([x for x in lst if x % 2 != 0])\n        lst_even = sorted([x for x in lst if x % 2 == 0])\n        return [lst_min] + [lst_max] + lst_odd + lst_even\n\n\nif __name__ == '__main__':\n    print(strange_sort_list([1, 2, 3, 4]))\n    # >>> [1, 4, 2, 3]\n    print(strange_sort_list([5, 5, 5, 5]))\n    # >>> [5, 5, 5, 5]\n    print(strange_sort_list([]))\n    # >>> []\n    print(strange_sort_list([-1, -2, -3, -4, -5]))\n    # >>> [-5, -4, -3, -2, -1]"
    },
    {
      "rank": 49,
      "score": 9.007965491315414,
      "candidate": "return sorted(lst, key=abs)\n\n\nif __name__ == '__main__':\n    print(strange_sort_list([1, 2, 3, 4]))\n    print(strange_sort_list([5, 5, 5, 5]))\n    print(strange_sort_list([]))"
    },
    {
      "rank": 50,
      "score": 9.006215542699554,
      "candidate": "if len(lst) == 0:\n        return []\n    if len(lst) == 1:\n        return lst\n    sorted_lst = lst.sort()\n    result = []\n    for i in range(0, len(lst)):\n        if i == 0:\n            result.append(min(lst))\n            lst.remove(min(lst))\n        if i == 1:\n            result.append(max(lst))\n            lst.remove(max(lst))\n        if i != 1 and i != 0:\n            result.append(min(lst))\n            lst.remove(min(lst))\n    return result\n\n\nprint(strange_sort_list([1, 2, 3, 4]))\nprint(strange_sort_list([5, 5, 5, 5]))\nprint(strange_sort_list([]))"
    },
    {
      "rank": 51,
      "score": 8.991265240998805,
      "candidate": "lst = lst.copy()\n    lst.sort()\n    result = []\n    if len(lst) > 0:\n        result.append(lst[0])\n        for i in range(1, len(lst)):\n            result.append(lst[-i])\n    return result"
    },
    {
      "rank": 52,
      "score": 8.94625325501565,
      "candidate": "if len(lst) == 0:\n        return []\n    else:\n        min = lst[0]\n        max = lst[0]\n        for i in lst:\n            if i > max:\n                max = i\n            elif i < min:\n                min = i\n        if min < max:\n            return [min] + [max] + strange_sort_list([i for i in lst if i != min and i != max])\n        elif min > max:\n            return [max] + [min] + strange_sort_list([i for i in lst if i != min and i != max])\n        else:\n            return [min] + strange_sort_list([i for i in lst if i != min])"
    },
    {
      "rank": 53,
      "score": 8.835579668145444,
      "candidate": "if len(lst) == 0:\n        return []\n    new_lst = []\n    while len(lst) > 0:\n        min_val = min(lst)\n        lst.remove(min_val)\n        max_val = max(lst)\n        lst.remove(max_val)\n        new_lst.append(min_val)\n        new_lst.append(max_val)\n    return new_lst\n\n\nif __name__ == '__main__':\n    print(strange_sort_list([1, 2, 3, 4]))\n    print(strange_sort_list([5, 5, 5, 5]))\n    print(strange_sort_list([]))"
    },
    {
      "rank": 54,
      "score": 8.789018088517437,
      "candidate": "return sorted(lst, key=lambda x: (x, -x))"
    },
    {
      "rank": 55,
      "score": 8.783143227994213,
      "candidate": "if len(lst) == 0:\n        return []\n    else:\n        new_lst = lst[1:]\n        new_lst.sort()\n        new_lst.append(lst[0])\n        lst = new_lst\n        return lst\n\n\nprint(strange_sort_list([1, 2, 3, 4]))\nprint(strange_sort_list([5, 5, 5, 5]))\nprint(strange_sort_list([]))"
    },
    {
      "rank": 56,
      "score": 8.745078998730298,
      "candidate": "if lst == []:\n        return lst\n    else:\n        return [min(lst)] + strange_sort_list([max(lst)]) + [min(lst)]\n\nprint(strange_sort_list([1,2,3,4]))\nprint(strange_sort_list([5,5,5,5]))\nprint(strange_sort_list([]))"
    },
    {
      "rank": 57,
      "score": 8.72839529423102,
      "candidate": "if lst == []:\n        return lst\n    else:\n        return [min(lst)] + strange_sort_list([x for x in lst if x != min(lst)]) + [max(lst)]\n\n\n# print(strange_sort_list([1, 2, 3, 4]))\n# print(strange_sort_list([5, 5, 5, 5]))\n# print(strange_sort_list([]))\n\n\ndef strange_sort_list_v2(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    if lst == []:\n        return lst\n    else:\n        return [min(lst)] + strange_sort_list_v2([x for x in lst if x != min(lst)]) + [max(lst)]\n\n\n# print(strange_sort_list_v2([1, 2, 3, 4]))\n# print(strange_sort_list_v2([5, 5, 5, 5]))\n# print(strange_sort_list_v2([]))"
    },
    {
      "rank": 58,
      "score": 8.717677079042746,
      "candidate": "if len(lst) == 0:\n        return []\n    lst.sort()\n    minimum = lst[0]\n    lst.remove(minimum)\n    maximum = lst[-1]\n    lst.remove(maximum)\n    lst.append(minimum)\n    lst.append(maximum)\n    return lst"
    },
    {
      "rank": 59,
      "score": 8.690127447955128,
      "candidate": "# your code here\n    if len(lst) == 0:\n        return lst\n    else:\n        # 1. find min\n        min_value = min(lst)\n        # 2. find max\n        max_value = max(lst)\n        # 3. find min of remaining\n        min_of_remaining = min([i for i in lst if i != max_value])\n        # 4. find max of remaining\n        max_of_remaining = max([i for i in lst if i != min_value])\n        # 5. create new list\n        if min_value < max_of_remaining:\n            new_lst = [min_value] + [max_value] + [min_of_remaining] + [max_of_remaining]\n        elif min_value > max_of_remaining:\n            new_lst = [min_value] + [min_of_remaining] + [max_value] + [max_of_remaining]\n        elif min_value == max_of_remaining:\n            new_lst = [min_value] + [max_value] + [min_of_remaining] + [max_of_remaining]\n        return new_lst"
    },
    {
      "rank": 60,
      "score": 8.645191660571252,
      "candidate": "if len(lst) == 0:\n        return []\n    elif len(lst) == 1:\n        return lst\n    else:\n        return [min(lst), max(lst), min(lst[1:])]"
    },
    {
      "rank": 61,
      "score": 8.628228681058602,
      "candidate": "if len(lst) == 0:\n        return []\n    else:\n        return [min(lst)] + [max(lst)] + strange_sort_list(lst[:-2])\n\n\nprint(strange_sort_list([1, 2, 3, 4]))\nprint(strange_sort_list([5, 5, 5, 5]))\nprint(strange_sort_list([]))"
    },
    {
      "rank": 62,
      "score": 8.578160818482559,
      "candidate": "if len(lst) == 0:\n        return lst\n    else:\n        minimum = min(lst)\n        lst.remove(minimum)\n        maximum = max(lst)\n        lst.remove(maximum)\n        return [minimum, maximum] + strange_sort_list(lst)\n\n\nprint(strange_sort_list([1, 2, 3, 4]))\nprint(strange_sort_list([5, 5, 5, 5]))\nprint(strange_sort_list([]))"
    },
    {
      "rank": 63,
      "score": 8.57657609590379,
      "candidate": "if lst == []:\n        return []\n    else:\n        min = lst[0]\n        max = lst[0]\n        for num in lst:\n            if num < min:\n                min = num\n            if num > max:\n                max = num\n        new_lst = []\n        while lst != []:\n            for num in lst:\n                if num == min:\n                    lst.remove(min)\n                    new_lst.append(min)\n                    min = max\n                if num == max:\n                    lst.remove(max)\n                    new_lst.append(max)\n                    max = min\n        return new_lst"
    },
    {
      "rank": 64,
      "score": 8.571583211584775,
      "candidate": "if not lst:\n        return lst\n    min_val = min(lst)\n    max_val = max(lst)\n    if min_val == max_val:\n        return lst\n    lst.remove(min_val)\n    lst.remove(max_val)\n    return [min_val, max_val] + strange_sort_list(lst)\n\n\nprint(strange_sort_list([1, 2, 3, 4]))\nprint(strange_sort_list([5, 5, 5, 5]))\nprint(strange_sort_list([]))"
    },
    {
      "rank": 65,
      "score": 8.567011914063764,
      "candidate": "return sorted(lst, key=lambda x: (x, -x))\n\n    # if lst == []:\n    #     return []\n    # else:\n    #     return [min(lst)] + [max(lst)] + [min(lst[1:])] + [max(lst[1:])] + [min(lst[2:])] + [max(lst[2:])]\n\n\nprint(strange_sort_list([1, 2, 3, 4]))\nprint(strange_sort_list([5, 5, 5, 5]))\nprint(strange_sort_list([]))"
    },
    {
      "rank": 66,
      "score": 8.51728310171602,
      "candidate": "if lst == []:\n        return []\n    else:\n        return [min(lst)] + [max(lst)] + [min([i for i in lst if i != min(lst) and i != max(lst)])] + strange_sort_list([i for i in lst if i != min(lst) and i != max(lst) and i != min([i for i in lst if i != min(lst) and i != max(lst)])])"
    },
    {
      "rank": 67,
      "score": 8.485485802637095,
      "candidate": "if lst == []:\n        return []\n    else:\n        return [min(lst)] + strange_sort_list([x for x in lst if x != min(lst)]) + [max(lst)]\n\ndef strange_sort_list_2(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    if lst == []:\n        return []\n    else:\n        return [min(lst)] + strange_sort_list([x for x in lst if x != min(lst)]) + [max(lst)]\n\ndef strange_sort_list_3(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    if lst == []:\n        return []\n    else:\n        return [min(lst)] + strange_sort_list([x for x in lst if x != min(lst)]) + [max(lst)]\n\ndef strange_sort_list_4(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3"
    },
    {
      "rank": 68,
      "score": 8.469429880178977,
      "candidate": "lst_sort = sorted(lst)\n    lst_sort_len = len(lst_sort)\n    if lst_sort_len == 0:\n        return []\n    else:\n        return [lst_sort[0]] + strange_sort_list(lst_sort[1:lst_sort_len - 1]) + [lst_sort[-1]]\n\n\nprint(strange_sort_list([1, 2, 3, 4]))\nprint(strange_sort_list([5, 5, 5, 5]))\nprint(strange_sort_list([]))"
    },
    {
      "rank": 69,
      "score": 8.401654579960796,
      "candidate": "if len(lst) == 0:\n        return []\n    else:\n        return [min(lst)] + strange_sort_list([x for x in lst if x != min(lst)]) + [max(lst)]\n\n\nif __name__ == '__main__':\n    print(strange_sort_list([1, 2, 3, 4]))"
    },
    {
      "rank": 70,
      "score": 8.393286653011106,
      "candidate": "if len(lst) == 0:\n        return []\n    elif len(lst) == 1:\n        return [lst[0]]\n    elif len(lst) == 2:\n        return lst if lst[0] < lst[1] else [lst[1], lst[0]]\n    else:\n        return [min(lst)] + [max(lst)] + strange_sort_list(lst[:-2])\n\n\ndef strange_sort_list_2(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    if len(lst) == 0:\n        return []\n    elif len(lst) == 1:\n        return [lst[0]]\n    else:\n        lst.sort()\n        return [min(lst)] + [max(lst)] + lst[:-2]"
    },
    {
      "rank": 71,
      "score": 8.363165845944565,
      "candidate": "# Your code here\n    if len(lst) == 0:\n        return []\n    elif len(lst) == 1:\n        return lst\n    else:\n        return [min(lst)] + [max(lst)] + strange_sort_list(lst[:-2])\n\n\nprint(strange_sort_list([1, 2, 3, 4]))\nprint(strange_sort_list([5, 5, 5, 5]))\nprint(strange_sort_list([]))"
    },
    {
      "rank": 72,
      "score": 8.35780769579681,
      "candidate": "#if not lst:\n    #    return []\n    #elif len(lst) == 1:\n    #    return lst\n    #else:\n    #    return [min(lst)] + [max(lst)] + [min(lst)]\n    \n    if not lst:\n        return []\n    else:\n        return [min(lst)] + [max(lst)] + strange_sort_list(lst[:1] + lst[2:])"
    },
    {
      "rank": 73,
      "score": 8.336517757020932,
      "candidate": "if len(lst) == 0:\n        return []\n    else:\n        new_lst = []\n        min_val = min(lst)\n        max_val = max(lst)\n        new_lst.append(min_val)\n        new_lst.append(max_val)\n        lst.remove(max_val)\n        lst.remove(min_val)\n        for i in range(0, len(lst)):\n            new_lst.append(min(lst))\n            lst.remove(min(lst))\n        return new_lst"
    },
    {
      "rank": 74,
      "score": 8.333811724772074,
      "candidate": "if len(lst) == 0:\n        return []\n    return [min(lst)] + strange_sort_list([x for x in lst if x != min(lst)]) + [max(lst)]\n\n\nif __name__ == '__main__':\n    print(strange_sort_list([1, 2, 3, 4]))\n    print(strange_sort_list([5, 5, 5, 5]))\n    print(strange_sort_list([]))"
    },
    {
      "rank": 75,
      "score": 8.333036077076407,
      "candidate": "if not lst:\n        return []\n    min_num = lst[0]\n    lst.pop(0)\n    return [min_num] + strange_sort_list(max(lst)) + [min_num]\n\n\nprint(strange_sort_list([1, 2, 3, 4]))\nprint(strange_sort_list([5, 5, 5, 5]))\nprint(strange_sort_list([]))"
    },
    {
      "rank": 76,
      "score": 8.27212443562345,
      "candidate": "if len(lst) == 0:\n        return []\n\n    minimum = min(lst)\n    maximum = max(lst)\n\n    lst.remove(minimum)\n    lst.remove(maximum)\n\n    lst.insert(0, minimum)\n    lst.append(maximum)\n\n    return lst\n\n\nprint(strange_sort_list([1, 2, 3, 4]))\nprint(strange_sort_list([5, 5, 5, 5]))\nprint(strange_sort_list([]))"
    },
    {
      "rank": 77,
      "score": 8.267149976441686,
      "candidate": "if lst == []:\n        return []\n    else:\n        return [min(lst)] + [max(lst)] + strange_sort_list(filter(lambda x: x != min(lst) and x != max(lst), lst))\n\n\nprint(strange_sort_list([1, 2, 3, 4]))\nprint(strange_sort_list([5, 5, 5, 5]))\nprint(strange_sort_list([]))"
    },
    {
      "rank": 78,
      "score": 8.252684463683195,
      "candidate": "# your code here\n    return sorted(lst, key=lambda x: (x, -x))\n\n\nprint(strange_sort_list([1, 2, 3, 4]))\nprint(strange_sort_list([5, 5, 5, 5]))\nprint(strange_sort_list([]))"
    },
    {
      "rank": 79,
      "score": 8.236398058625285,
      "candidate": "if len(lst) == 0:\n        return []\n    else:\n        min_val = min(lst)\n        lst.remove(min_val)\n        lst.append(min_val)\n        return [min(lst)] + strange_sort_list(max(lst))\n\n\nprint(strange_sort_list([1, 2, 3, 4]))\nprint(strange_sort_list([5, 5, 5, 5]))\nprint(strange_sort_list([]))"
    },
    {
      "rank": 80,
      "score": 8.20575013524055,
      "candidate": "# create a copy of the list\n    new_list = lst[:]\n    # sort the list\n    new_list.sort()\n    # initialize a list to hold the result\n    result = []\n\n    # loop through the list\n    for i in range(len(new_list)):\n        # append the minimum value to the result\n        result.append(new_list[0])\n        # remove the minimum value from the list\n        new_list.remove(new_list[0])\n        # sort the list\n        new_list.sort()\n\n    return result\n\n\nif __name__ == '__main__':\n    print(strange_sort_list([1, 2, 3, 4]))\n    print(strange_sort_list([5, 5, 5, 5]))\n    print(strange_sort_list([]))\n    print(strange_sort_list([0]))\n    print(strange_sort_list([1, 2]))"
    },
    {
      "rank": 81,
      "score": 8.19398330433124,
      "candidate": "# your code here\n    if len(lst) == 0:\n        return []\n    elif len(lst) == 1:\n        return lst\n    elif len(lst) == 2:\n        if lst[0] < lst[1]:\n            return lst\n        else:\n            return [lst[1], lst[0]]\n    else:\n        if lst[0] < lst[1]:\n            return [lst[0]] + strange_sort_list(lst[1:])\n        else:\n            return strange_sort_list(lst[1:]) + [lst[0]]"
    },
    {
      "rank": 82,
      "score": 8.178102087338402,
      "candidate": "if len(lst) == 0:\n        return []\n\n    new_lst = []\n    min_val = min(lst)\n    max_val = max(lst)\n    lst.remove(min_val)\n    lst.remove(max_val)\n    new_lst.append(min_val)\n    new_lst.append(max_val)\n\n    while len(lst) > 0:\n        min_val = min(lst)\n        max_val = max(lst)\n        lst.remove(min_val)\n        lst.remove(max_val)\n        new_lst.append(max_val)\n        new_lst.append(min_val)\n\n    return new_lst\n\nprint(strange_sort_list([1, 2, 3, 4]))\nprint(strange_sort_list([5, 5, 5, 5]))\nprint(strange_sort_list([]))"
    },
    {
      "rank": 83,
      "score": 8.108475536501597,
      "candidate": "if len(lst) == 0:\n        return []\n    lst_copy = lst.copy()\n    lst_copy.sort()\n    lst_copy.reverse()\n    return [lst_copy[0]] + strange_sort_list(lst[1:]) + [lst_copy[1]]\n\ndef strange_sort_list_2(lst):\n    lst_copy = lst.copy()\n    lst_copy.sort()\n    lst_copy.reverse()\n    return [lst_copy[0]] + strange_sort_list_2(lst[1:]) + [lst_copy[1]] if lst else []\n\n# print(strange_sort_list_2([1, 2, 3, 4]))\n# print(strange_sort_list_2([5, 5, 5, 5]))\n# print(strange_sort_list_2([]))"
    },
    {
      "rank": 84,
      "score": 8.001847993534597,
      "candidate": "return sorted(lst, key=lambda x: (x, -x))\n\n\nprint(strange_sort_list([1, 2, 3, 4]))\nprint(strange_sort_list([5, 5, 5, 5]))\nprint(strange_sort_list([]))"
    },
    {
      "rank": 85,
      "score": 7.921892074950387,
      "candidate": "if len(lst) == 0:\n        return lst\n    else:\n        return [min(lst)] + strange_sort_list(lst[lst.index(min(lst))+1:]) + [max(lst)] + strange_sort_list(lst[0:lst.index(max(lst))])"
    },
    {
      "rank": 86,
      "score": 7.917287615545465,
      "candidate": "if lst == []:\n        return []\n    else:\n        return [min(lst), max(lst)] + strange_sort_list([x for x in lst if x != min(lst) and x != max(lst)])\n\n\nprint(strange_sort_list([1, 2, 3, 4]))\nprint(strange_sort_list([5, 5, 5, 5]))\nprint(strange_sort_list([]))"
    },
    {
      "rank": 87,
      "score": 7.792119586960233,
      "candidate": "result = []\n    while len(lst) > 0:\n        result.append(min(lst))\n        lst.remove(min(lst))\n        if len(lst) > 0:\n            result.append(max(lst))\n            lst.remove(max(lst))\n    return result"
    },
    {
      "rank": 88,
      "score": 3.0,
      "candidate": "if len(lst) == 0:\n        return []\n    lst = sorted(lst)\n    lst = lst[:1] + lst[-1:] + lst[1:-1]\n    return lst\n\n\nprint(strange_sort_list([1, 2, 3, 4]))\nprint(strange_sort_list([5, 5, 5, 5]))\nprint(strange_sort_list([]))\n\n\ndef strange_sort_list_v2(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    if len(lst) == 0:\n        return []\n    lst = sorted(lst)\n    lst = lst[:1] + lst[-1:] + lst[1:-1]\n    return lst\n\n\nprint(strange_sort_list_v2([1, 2, 3, 4]))\nprint(strange_sort_list_v2([5, 5, 5, 5]))\nprint(strange_sort_list_v2([]))"
    },
    {
      "rank": 89,
      "score": 3.0,
      "candidate": "# Your code here\n    if len(lst) == 0:\n        return []\n    if len(lst) == 1:\n        return lst\n    min = lst[0]\n    max = lst[0]\n    for item in lst:\n        if item < min:\n            min = item\n        elif item > max:\n            max = item\n    lst.remove(max)\n    lst.remove(min)\n    lst.append(min)\n    lst.append(max)\n    return lst\n\n\nprint(strange_sort_list([1, 2, 3, 4]))\nprint(strange_sort_list([5, 5, 5, 5]))\nprint(strange_sort_list([]))"
    },
    {
      "rank": 90,
      "score": 3.0,
      "candidate": "# Your code here\n    if len(lst) == 0:\n        return []\n    if len(lst) == 1:\n        return lst\n    if len(lst) == 2:\n        if lst[0] >= lst[1]:\n            return lst\n        else:\n            return [lst[1], lst[0]]\n    lst_new = [lst[0]]\n    for i in range(len(lst)):\n        if i == 0:\n            continue\n        elif i == 1:\n            if lst[1] <= lst[0]:\n                lst_new.append(lst[1])\n            else:\n                lst_new.append(lst[0])\n                lst_new.append(lst[1])\n        else:\n            if lst[i] >= lst_new[-1]:\n                lst_new.append(lst[i])\n            elif lst[i] <= lst[0]:\n                lst_new.insert(0, lst[i])\n            else:\n                lst_new.insert(len(lst_new) - 1, lst[i])\n    return lst_new"
    },
    {
      "rank": 91,
      "score": 3.0,
      "candidate": "if lst == []:\n        return lst\n    else:\n        min_val = min(lst)\n        lst.remove(min_val)\n        max_val = max(lst)\n        lst.remove(max_val)\n        return [min_val, max_val] + strange_sort_list(lst)\n\n\ndef strange_sort_list_v2(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    if lst == []:\n        return lst\n    else:\n        min_val = min(lst)\n        lst.remove(min_val)\n        max_val = max(lst)\n        lst.remove(max_val)\n        return [min_val, max_val] + strange_sort_list_v2(lst)\n\n\ndef strange_sort_list_v3(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    if lst == []:\n        return lst\n    else:\n        min_val = min(lst)\n        lst.remove(min_val)\n        max_val = max(lst)\n        lst.remove(max_val)\n        return [min_val, max_val] +"
    },
    {
      "rank": 92,
      "score": 3.0,
      "candidate": "if len(lst) == 0:\n        return []\n\n    lst = sorted(lst)\n    min_value = lst[0]\n    max_value = lst[-1]\n    return [min_value, max_value] + strange_sort_list(lst[1:-1])\n\n\ndef test_function():\n    assert strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    assert strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    assert strange_sort_list([]) == []\n    assert strange_sort_list([1, 2, 3, 4, 5, 6]) == [1, 6, 2, 5, 3, 4]\n    assert strange_sort_list([1, 2, 3, 4, 5, 6, 7]) == [1, 7, 2, 6, 3, 5, 4]\n\nif __name__ == '__main__':\n    test_function()"
    },
    {
      "rank": 93,
      "score": 3.0,
      "candidate": "#your code here\n    return sorted(lst, key=lambda x: (x, -x))\n\nif __name__ == '__main__':\n    #These \"asserts\" using only for self-checking and not necessary for auto-testing\n    assert strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3], \"First\"\n    assert strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5], \"Second\"\n    assert strange_sort_list([1, 2, 3]) == [1, 3, 2], \"Third\"\n    assert strange_sort_list([]) == [], \"Empty\"\n    print(\"Coding complete? Click 'Check' to review your tests and earn cool rewards!\")"
    },
    {
      "rank": 94,
      "score": 3.0,
      "candidate": "lst_length = len(lst)\n    if lst_length < 2:\n        return lst\n    lst_sorted = sorted(lst)\n    lst_strange_sorted = []\n    for i in range(lst_length):\n        lst_strange_sorted.append(lst_sorted[0])\n        lst_sorted.remove(lst_sorted[0])\n    return lst_strange_sorted\n\n\ndef test_function():\n    assert strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3], \"First\"\n    assert strange_sort_list([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3], \"Second\"\n    assert strange_sort_list([5, 4, 3, 2, 1]) == [1, 2, 3, 4, 5], \"Third\"\n    assert strange_sort_list([5, 3, 2, 1, 4]) == [1, 4, 2, 3, 5], \"Four\"\n    assert strange_sort_list([1, 1, 1, 1]) == [1, 1, 1, 1], \"All the same\"\n    assert strange_sort_list([-1, -2, -3, -4]) == [-4, -3, -2, -1], \"Negative\"\n    assert strange_sort_list([-4, -3, -2, -1]) == [-1, -2, -3, -4], \"Negative #2\"\n    assert strange_sort_list([]) == [], \"Empty\"\n    assert strange_sort_list([-1]) == [-1], \"One negative\"\n    assert strange_sort_list([1]) == [1], \"One positive\"\n    assert strange_sort_list([0]) == [0], \"Zero\"\n\nif __name__ == '__main__':\n    test_function()"
    },
    {
      "rank": 95,
      "score": 3.0,
      "candidate": "# sort the list\n    lst.sort()\n    # get the length of the list\n    length = len(lst)\n    # create an empty list to store the values\n    result = []\n    # iterate through the list\n    for i in range(0,length):\n        # get the minimum value\n        min_val = lst[0]\n        # get the maximum value\n        max_val = lst[-1]\n        # append the minimum value to the result\n        result.append(min_val)\n        # remove the minimum value from the list\n        lst.remove(min_val)\n        # get the length of the list\n        length = len(lst)\n        # if the list is empty\n        if length == 0:\n            # append the maximum value to the result\n            result.append(max_val)\n        # if the list is not empty\n        else:\n            # append the maximum value to the result\n            result.append(max_val)\n            # get the length of the list\n            length = len(lst)\n            # remove the maximum value from the list\n            lst.remove(max_val)\n    # return the result\n    return result\n\n\ndef test_function(test_case):\n    answer = strange_sort_list(test_case[0])\n    if answer == test_case[1]:\n        print(\"Pass\")\n    else:\n        print(\"Fail\")\n\ntest_case_1 = [[], []]\ntest_function(test_case_1)\n\ntest_case_2 = [[1, 2, 3, 4], [1, 4, 2, 3]]\ntest_function(test_case_2)\n\ntest_case_3 = [[5, 5, 5, 5], [5, 5, 5, 5]]\ntest_function(test_case_3)\n\ntest_case_4 = [[1, 2, 3, 6, 5, 4], [1, 6, 2, 5, 3, 4]]\ntest_function(test_case_4)"
    },
    {
      "rank": 96,
      "score": 3.0,
      "candidate": "# Your code here\n    if len(lst) == 0:\n        return []\n    result = []\n    min = lst[0]\n    max = lst[0]\n    for i in lst:\n        if i < min:\n            min = i\n        if i > max:\n            max = i\n    result.append(min)\n    result.append(max)\n    for i in lst:\n        if i == min or i == max:\n            continue\n        result.append(i)\n    return result\n\n\nif __name__ == '__main__':\n    print(strange_sort_list([1, 2, 3, 4]))\n    print(strange_sort_list([5, 5, 5, 5]))\n    print(strange_sort_list([]))"
    },
    {
      "rank": 97,
      "score": 3.0,
      "candidate": "# TODO: Implement me\n    pass\n\n\n# ## Unit Test\n\n# **The following unit test is expected to fail until you solve the challenge.**\n\n# In[ ]:\n\n\n# %load test_strange_sort_list.py\nimport unittest\n\n\nclass TestStrangeSortList(unittest.TestCase):\n\n    def test_strange_sort_list(self):\n        self.assertEqual(strange_sort_list([]), [])\n        self.assertEqual(strange_sort_list([1]), [1])\n        self.assertEqual(strange_sort_list([1, 2]), [1, 2])\n        self.assertEqual(strange_sort_list([1, 2, 3, 4]), [1, 4, 2, 3])\n        self.assertEqual(strange_sort_list([1, 2, 3, 4, 5]), [1, 5, 2, 4, 3])\n        self.assertEqual(strange_sort_list([1, 5, 2, 4, 3]), [1, 5, 2, 4, 3])\n        self.assertEqual(strange_sort_list([5, 3, 2, 5, 2, 1]), [1, 2, 2, 3, 5, 5])\n\n        print('Success: test_strange_sort_list')\n\n\ndef main():\n    test = TestStrangeSortList()\n    test.test_strange_sort_list()\n\n\nif __name__ == '__main__':\n    main()\n\n\n# ## Solution Notebook\n# \n# Review the [Solution Notebook](http://nbviewer.ipython.org/github/donnemartin/interactive-coding-challenges/blob/master/arrays_strings/strange_sort_list/strange_sort_list_solution.ipynb) for a discussion on algorithms and code solutions."
    },
    {
      "rank": 98,
      "score": 3.0,
      "candidate": "lst = sorted(lst)\n    res = []\n    while len(lst) > 0:\n        res.append(min(lst))\n        lst.remove(min(lst))\n        if len(lst) > 0:\n            res.append(max(lst))\n            lst.remove(max(lst))\n    return res\n\ndef strange_sort_list_2(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    lst = sorted(lst)\n    res = []\n    while len(lst) > 0:\n        res.append(lst.pop(0))\n        if len(lst) > 0:\n            res.append(lst.pop())\n    return res\n\ndef strange_sort_list_3(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    lst = sorted(lst)\n    res = []\n    while len(lst) > 0:\n        res.append(lst.pop(0))\n        if len(lst) > 0:\n            res.append(lst.pop())\n    return res\n\nprint(strange_sort_list([1, 2, 3, 4]))\nprint(st"
    },
    {
      "rank": 99,
      "score": 3.0,
      "candidate": "# your code here\n    if not lst:\n        return []\n    result = []\n    min_value = min(lst)\n    max_value = max(lst)\n    while lst:\n        if min_value in lst:\n            lst.remove(min_value)\n            result.append(min_value)\n        if max_value in lst:\n            lst.remove(max_value)\n            result.append(max_value)\n    return result\n\n\nif __name__ == '__main__':\n    print(strange_sort_list([1, 2, 3, 4]))\n    print(strange_sort_list([5, 5, 5, 5]))\n    print(strange_sort_list([]))"
    },
    {
      "rank": 100,
      "score": 3.0,
      "candidate": "if not lst:\n        return lst\n\n    new_lst = []\n    while lst:\n        min_val = min(lst)\n        lst.remove(min_val)\n        new_lst.append(min_val)\n        if lst:\n            max_val = max(lst)\n            lst.remove(max_val)\n            new_lst.append(max_val)\n\n    return new_lst\n\n\ndef strange_sort_list_adv(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    if not lst:\n        return lst\n\n    new_lst = []\n    while lst:\n        min_val = min(lst)\n        lst.remove(min_val)\n        new_lst.append(min_val)\n        if lst:\n            max_val = max(lst)\n            lst.remove(max_val)\n            new_lst.append(max_val)\n\n    return new_lst\n\n\ndef strange_sort_list_adv2(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    if not lst:\n        return lst\n\n    new_lst = []\n    while lst:\n        min"
    }
  ]
}