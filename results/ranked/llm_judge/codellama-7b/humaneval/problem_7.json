{
  "timestamp": "2025-09-14T21:08:02.708723",
  "method": "improved_llm_judge",
  "judge_model": "codellama/CodeLlama-7b-Python-hf",
  "target_model": "codellama-7b",
  "dataset": "humaneval",
  "problem_number": 7,
  "total_candidates": 100,
  "results": [
    {
      "rank": 1,
      "score": 10.0,
      "candidate": "return [string for string in strings if substring in string]\n\n\nif __name__ == \"__main__\":\n    from doctest import testmod\n\n    testmod()"
    },
    {
      "rank": 2,
      "score": 10.0,
      "candidate": "return [string for string in strings if substring in string]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 3,
      "score": 10.0,
      "candidate": "return [string for string in strings if substring in string]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 4,
      "score": 10.0,
      "candidate": "return [string for string in strings if substring in string]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 5,
      "score": 10.0,
      "candidate": "return [string for string in strings if substring in string]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 6,
      "score": 10.0,
      "candidate": "return [string for string in strings if substring in string]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 7,
      "score": 10.0,
      "candidate": "return [string for string in strings if substring in string]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 8,
      "score": 10.0,
      "candidate": "return [string for string in strings if substring in string]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 9,
      "score": 9.99211827139581,
      "candidate": "return list(filter(lambda x: substring in x, strings))\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 10,
      "score": 9.984157773252326,
      "candidate": "return list(filter(lambda s: substring in s, strings))\n\n\nif __name__ == \"__main__\":\n    from doctest import testmod\n\n    testmod()"
    },
    {
      "rank": 11,
      "score": 9.974557377874588,
      "candidate": "return [string for string in strings if substring in string]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 12,
      "score": 9.95915502513396,
      "candidate": "return [string for string in strings if substring in string]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 13,
      "score": 9.951672184675747,
      "candidate": "return [x for x in strings if substring in x]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 14,
      "score": 9.889613450411401,
      "candidate": "return [string for string in strings if substring in string]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 15,
      "score": 9.867624545309532,
      "candidate": "return list(filter(lambda x: substring in x, strings))\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 16,
      "score": 9.858073653986873,
      "candidate": "return [string for string in strings if substring in string]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 17,
      "score": 9.822131407363498,
      "candidate": "return [string for string in strings if substring in string]\n\n\nif __name__ == \"__main__\":\n    from doctest import testmod\n\n    testmod()"
    },
    {
      "rank": 18,
      "score": 9.767303595629702,
      "candidate": "return [string for string in strings if substring in string]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 19,
      "score": 9.731414397006375,
      "candidate": "return [string for string in strings if substring in string]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 20,
      "score": 9.674725162119167,
      "candidate": "return [string for string in strings if substring in string]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 21,
      "score": 9.620518076847134,
      "candidate": "return [string for string in strings if substring in string]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 22,
      "score": 9.579078346175285,
      "candidate": "return [string for string in strings if substring in string]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 23,
      "score": 9.234050852198141,
      "candidate": "return list(filter(lambda string: substring in string, strings))\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 24,
      "score": 9.226766272351448,
      "candidate": "return [x for x in strings if substring in x]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 25,
      "score": 9.21346272767743,
      "candidate": "return [string for string in strings if substring in string]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 26,
      "score": 9.183391466815202,
      "candidate": "return [string for string in strings if substring in string]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 27,
      "score": 9.177268828905222,
      "candidate": "return [s for s in strings if s.find(substring) != -1]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 28,
      "score": 9.122564458729856,
      "candidate": "return [string for string in strings if substring in string]\n\n\nif __name__ == \"__main__\":\n    print(filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"a\"))"
    },
    {
      "rank": 29,
      "score": 8.973005557553902,
      "candidate": "return list(filter(lambda s: substring in s, strings))\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 30,
      "score": 8.95994420569242,
      "candidate": "return [string for string in strings if substring in string]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 31,
      "score": 8.946210893390457,
      "candidate": "return [string for string in strings if substring in string]\n\n\nif __name__ == \"__main__\":\n    from doctest import testmod\n\n    testmod()"
    },
    {
      "rank": 32,
      "score": 8.932217008005624,
      "candidate": "return [string for string in strings if substring in string]\n\n\nif __name__ == \"__main__\":\n    from doctest import testmod\n\n    testmod()"
    },
    {
      "rank": 33,
      "score": 8.910084504002544,
      "candidate": "return [string for string in strings if substring in string]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 34,
      "score": 8.85571690049604,
      "candidate": "return list(filter(lambda string: substring in string, strings))\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 35,
      "score": 8.855395696632057,
      "candidate": "return [string for string in strings if substring in string]\n\n\nif __name__ == \"__main__\":\n    print(filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a'))"
    },
    {
      "rank": 36,
      "score": 8.8281618090209,
      "candidate": "return list(filter(lambda s: substring in s, strings))\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 37,
      "score": 8.81367773444215,
      "candidate": "return list(filter(lambda string: substring in string, strings))\n\n\nif __name__ == \"__main__\":\n    print(filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a'))"
    },
    {
      "rank": 38,
      "score": 8.76828871349479,
      "candidate": "return [string for string in strings if substring in string]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 39,
      "score": 8.750282588864879,
      "candidate": "return [string for string in strings if substring in string]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 40,
      "score": 8.715724466237427,
      "candidate": "return [string for string in strings if substring in string]\n\n\nif __name__ == \"__main__\":\n    print(filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a'))"
    },
    {
      "rank": 41,
      "score": 8.701078161001123,
      "candidate": "return [string for string in strings if substring in string]\n\n\nif __name__ == \"__main__\":\n    print(filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"a\"))"
    },
    {
      "rank": 42,
      "score": 8.692801520950061,
      "candidate": "return [\n        string\n        for string in strings\n        if substring in string\n    ]\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 43,
      "score": 8.632293453617281,
      "candidate": "return [s for s in strings if substring in s]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 44,
      "score": 8.625262456968262,
      "candidate": "return [string for string in strings if substring in string]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 45,
      "score": 8.623000730200317,
      "candidate": "return [string for string in strings if substring in string]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 46,
      "score": 8.616253589228675,
      "candidate": "return [string for string in strings if substring in string]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 47,
      "score": 8.608819999274287,
      "candidate": "return [string for string in strings if substring in string]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 48,
      "score": 8.606486429141842,
      "candidate": "return [string for string in strings if substring in string]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 49,
      "score": 8.60156811074208,
      "candidate": "return [string for string in strings if substring in string]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 50,
      "score": 8.565425580227462,
      "candidate": "return list(filter(lambda s: substring in s, strings))\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 51,
      "score": 8.542875062379007,
      "candidate": "return list(filter(lambda x: substring in x, strings))\n\n\nif __name__ == \"__main__\":\n    from doctest import testmod\n\n    testmod()"
    },
    {
      "rank": 52,
      "score": 8.499905739299377,
      "candidate": "return [string for string in strings if substring in string]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 53,
      "score": 8.492983219118464,
      "candidate": "return [string for string in strings if substring in string]\n\n\nif __name__ == \"__main__\":\n    from doctest import testmod\n\n    testmod()"
    },
    {
      "rank": 54,
      "score": 8.490324832712195,
      "candidate": "return [string for string in strings if substring in string]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 55,
      "score": 8.48796797856353,
      "candidate": "return [string for string in strings if substring in string]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 56,
      "score": 8.478208546788407,
      "candidate": "return [x for x in strings if substring in x]\n\n\nif __name__ == \"__main__\":\n    from doctest import testmod\n\n    testmod()"
    },
    {
      "rank": 57,
      "score": 8.437695832075478,
      "candidate": "return [string for string in strings if substring in string]\n\n\nif __name__ == \"__main__\":\n    print(filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"a\"))"
    },
    {
      "rank": 58,
      "score": 8.375312293858853,
      "candidate": "return [string for string in strings if substring in string]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 59,
      "score": 8.331556294201176,
      "candidate": "return [string for string in strings if substring in string]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 60,
      "score": 8.327375965969855,
      "candidate": "return [x for x in strings if substring in x]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 61,
      "score": 8.327367757082776,
      "candidate": "return [string for string in strings if substring in string]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 62,
      "score": 8.298597569547805,
      "candidate": "result = [string for string in strings if substring in string]\n    return result\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 63,
      "score": 8.294940769211511,
      "candidate": "return [string for string in strings if substring in string]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 64,
      "score": 8.2938925966498,
      "candidate": "return [string for string in strings if substring in string]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 65,
      "score": 8.289838256518838,
      "candidate": "return [string for string in strings if substring in string]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 66,
      "score": 8.251903304236286,
      "candidate": "return [s for s in strings if substring in s]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 67,
      "score": 8.214125058964552,
      "candidate": "return [string for string in strings if substring in string]\n\n\nif __name__ == \"__main__\":\n    print(filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"a\"))"
    },
    {
      "rank": 68,
      "score": 8.212735598038213,
      "candidate": "return [string for string in strings if substring in string]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 69,
      "score": 8.211579567659316,
      "candidate": "return [string for string in strings if substring in string]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 70,
      "score": 8.209707251476969,
      "candidate": "return [string for string in strings if substring in string]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 71,
      "score": 8.2048573255218,
      "candidate": "return [string for string in strings if substring in string]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 72,
      "score": 8.185309335307622,
      "candidate": "return [string for string in strings if substring in string]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 73,
      "score": 8.179564342560925,
      "candidate": "return [string for string in strings if substring in string]\n\n\nif __name__ == \"__main__\":\n    print(filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"a\"))"
    },
    {
      "rank": 74,
      "score": 8.172253082181854,
      "candidate": "return [string for string in strings if substring in string]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 75,
      "score": 8.163300679823958,
      "candidate": "return [s for s in strings if substring in s]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 76,
      "score": 8.144125099485041,
      "candidate": "return [string for string in strings if substring in string]\n\n\nif __name__ == \"__main__\":\n    from doctest import testmod\n\n    testmod()"
    },
    {
      "rank": 77,
      "score": 8.105983444291466,
      "candidate": "return [string for string in strings if substring in string]\n\n\nif __name__ == \"__main__\":\n    print(filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a'))"
    },
    {
      "rank": 78,
      "score": 8.08452234024709,
      "candidate": "return [string for string in strings if substring in string]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 79,
      "score": 8.024835682833125,
      "candidate": "return [string for string in strings if substring in string]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 80,
      "score": 7.990432406683839,
      "candidate": "return [string for string in strings if substring in string]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 81,
      "score": 7.938028884277233,
      "candidate": "return [x for x in strings if substring in x]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 82,
      "score": 7.8912769574414305,
      "candidate": "return [string for string in strings if substring in string]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 83,
      "score": 7.868947655733293,
      "candidate": "return [string for string in strings if substring in string]\n\n\nif __name__ == \"__main__\":\n    from doctest import testmod\n\n    testmod()"
    },
    {
      "rank": 84,
      "score": 7.84634113240411,
      "candidate": "return [string for string in strings if substring in string]\n\n\nif __name__ == \"__main__\":\n    print(filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"a\"))"
    },
    {
      "rank": 85,
      "score": 7.780351419995229,
      "candidate": "return list(filter(lambda string: substring in string, strings))\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 86,
      "score": 7.738292593776799,
      "candidate": "return [s for s in strings if substring in s]\n\n\nif __name__ == \"__main__\":\n    from doctest import testmod\n\n    testmod()"
    },
    {
      "rank": 87,
      "score": 7.7320703513377165,
      "candidate": "return [x for x in strings if substring in x]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 88,
      "score": 7.562924366763077,
      "candidate": "return [string for string in strings if substring in string]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 89,
      "score": 7.464609382504557,
      "candidate": "return [string for string in strings if substring in string]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 90,
      "score": 7.4506599871439985,
      "candidate": "return [string for string in strings if substring in string]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 91,
      "score": 7.134571892399572,
      "candidate": "return [string for string in strings if substring in string]\n\n\nif __name__ == \"__main__\":\n    print(filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"a\"))\n    print(filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"c\"))\n    print(filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"b\"))\n    print(filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"d\"))\n    print(filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"e\"))\n    print(filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"f\"))\n    print(filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"r\"))\n    print(filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"ar\"))\n    print(filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"array\"))"
    },
    {
      "rank": 92,
      "score": 3.0,
      "candidate": "return [s for s in strings if s.find(substring) != -1]\n\n\ndef filter_by_length(strings: List[str], min_length: int) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that have length greater than given\n    >>> filter_by_length([], 1)\n    []\n    >>> filter_by_length(['abc', 'bacd', 'cde', 'array'], 3)\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [s for s in strings if len(s) >= min_length]\n\n\ndef filter_by_length_and_substring(\n    strings: List[str], min_length: int, substring: str\n) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that have length greater than given\n    and contain a given substring\n    >>> filter_by_length_and_substring([], 1, 'a')\n    []\n    >>> filter_by_length_and_substring(['abc', 'bacd', 'cde', 'array'], 3, 'a')\n    ['abc', 'bacd']\n    \"\"\"\n    return [s for s in strings if s.find(substring) != -1 and len(s) >= min_length]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 93,
      "score": 3.0,
      "candidate": "return [string for string in strings if substring in string]\n\n\ndef filter_by_substring_v2(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> filter_by_substring_v2([], 'a')\n    []\n    >>> filter_by_substring_v2(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [string for string in strings if any(char in string for char in substring)]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod(verbose=True)"
    },
    {
      "rank": 94,
      "score": 3.0,
      "candidate": "return [string for string in strings if substring in string]\n\n\ndef filter_by_length(strings: List[str], length: int) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given length\n    >>> filter_by_length([], 5)\n    []\n    >>> filter_by_length(['abc', 'bacd', 'cde', 'array'], 3)\n    ['abc', 'bacd', 'cde']\n    \"\"\"\n    return [string for string in strings if len(string) == length]\n\n\ndef filter_by_length_and_substring(strings: List[str], length: int, substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given length and substring\n    >>> filter_by_length_and_substring([], 5, 'a')\n    []\n    >>> filter_by_length_and_substring(['abc', 'bacd', 'cde', 'array'], 3, 'a')\n    ['abc', 'bacd']\n    \"\"\"\n    return filter_by_length(filter_by_substring(strings, substring), length)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 95,
      "score": 3.0,
      "candidate": "return [s for s in strings if substring in s]\n\n\ndef filter_by_length(strings: List[str], min_len: int, max_len: int) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that have length in given range\n    >>> filter_by_length([], 0, 0)\n    []\n    >>> filter_by_length(['abc', 'bacd', 'cde', 'array'], 1, 2)\n    ['abc', 'bacd']\n    \"\"\"\n    return [s for s in strings if len(s) in range(min_len, max_len + 1)]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 96,
      "score": 3.0,
      "candidate": "return [string for string in strings if substring in string]\n\n\ndef filter_by_substring_v2(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> filter_by_substring_v2([], 'a')\n    []\n    >>> filter_by_substring_v2(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [string for string in strings if substring in string]\n\n\nif __name__ == \"__main__\":\n    from doctest import testmod\n\n    testmod()"
    },
    {
      "rank": 97,
      "score": 3.0,
      "candidate": "return [string for string in strings if substring in string]\n\n\ndef filter_by_length(strings: List[str], length: int) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given length\n    >>> filter_by_length([], 0)\n    []\n    >>> filter_by_length(['abc', 'bacd', 'cde', 'array'], 4)\n    ['abc', 'bacd']\n    \"\"\"\n    return [string for string in strings if len(string) == length]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 98,
      "score": 3.0,
      "candidate": "return [string for string in strings if substring in string]\n\n\nif __name__ == \"__main__\":\n    print(filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"a\"))"
    },
    {
      "rank": 99,
      "score": 3.0,
      "candidate": "return [s for s in strings if substring in s]\n\n\ndef filter_by_length(strings: List[str], length: int) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that have given length\n    >>> filter_by_length([], 0)\n    []\n    >>> filter_by_length(['abc', 'bacd', 'cde', 'array'], 4)\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [s for s in strings if len(s) == length]\n\n\ndef filter_by_condition(strings: List[str], condition: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that satisfy given condition\n    >>> filter_by_condition([], 's > 3')\n    []\n    >>> filter_by_condition(['abc', 'bacd', 'cde', 'array'], 'len(s) > 3')\n    ['bacd', 'array']\n    \"\"\"\n    return [s for s in strings if eval(condition)]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 100,
      "score": 3.0,
      "candidate": "return [s for s in strings if substring in s]\n\n\ndef filter_by_length(strings: List[str], length: int) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that have length equal to given length\n    >>> filter_by_length([], 3)\n    []\n    >>> filter_by_length(['abc', 'bacd', 'cde', 'array'], 3)\n    ['abc', 'bacd']\n    \"\"\"\n    return [s for s in strings if len(s) == length]\n\n\ndef filter_by_length_and_substring(strings: List[str], length: int, substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that have length equal to given length and contain given substring\n    >>> filter_by_length_and_substring([], 3, 'a')\n    []\n    >>> filter_by_length_and_substring(['abc', 'bacd', 'cde', 'array'], 3, 'a')\n    ['abc', 'bacd']\n    \"\"\"\n    return [s for s in strings if len(s) == length and substring in s]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod(verbose=True)"
    }
  ]
}