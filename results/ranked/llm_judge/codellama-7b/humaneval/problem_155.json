{
  "timestamp": "2025-09-14T22:14:06.189127",
  "method": "improved_llm_judge",
  "judge_model": "codellama/CodeLlama-7b-Python-hf",
  "target_model": "codellama-7b",
  "dataset": "humaneval",
  "problem_number": 155,
  "total_candidates": 100,
  "results": [
    {
      "rank": 1,
      "score": 10.0,
      "candidate": "return (sum(1 for c in str(num) if int(c) % 2 == 0),\n            sum(1 for c in str(num) if int(c) % 2 == 1))\n\n\ndef test_even_odd_count():\n    assert even_odd_count(0) == (1, 0)\n    assert even_odd_count(10) == (1, 1)\n    assert even_odd_count(-10) == (1, 1)\n    assert even_odd_count(123) == (1, 2)\n    assert even_odd_count(-123) == (1, 2)\n    assert even_odd_count(100) == (2, 0)\n    assert even_odd_count(-100) == (2, 0)\n    assert even_odd_count(-2100) == (2, 1)\n\n\nif __name__ == '__main__':\n    test_even_odd_count()"
    },
    {
      "rank": 2,
      "score": 10.0,
      "candidate": "if not isinstance(num, int):\n        raise TypeError(\"only accepts integer\")\n    if num == 0:\n        return (1, 0)\n    if num < 0:\n        num = -num\n    even_cnt = 0\n    odd_cnt = 0\n    while num > 0:\n        if num % 2 == 0:\n            even_cnt += 1\n        else:\n            odd_cnt += 1\n        num = num // 10\n    return (even_cnt, odd_cnt)\n\n\ndef test_even_odd_count():\n    assert even_odd_count(-12) == (1, 1)\n    assert even_odd_count(123) == (1, 2)\n    assert even_odd_count(-1234) == (2, 1)\n    assert even_odd_count(12345) == (2, 2)\n    assert even_odd_count(1234567890) == (5, 5)\n    assert even_odd_count(1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"
    },
    {
      "rank": 3,
      "score": 10.0,
      "candidate": "even, odd = 0, 0\n    for digit in str(num):\n        if int(digit) % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n    return even, odd\n\n\ndef test_even_odd_count():\n    assert even_odd_count(-12) == (1, 1)\n    assert even_odd_count(123) == (1, 2)\n    assert even_odd_count(1234567890) == (4, 6)\n    assert even_odd_count(101) == (2, 1)\n    assert even_odd_count(0) == (1, 0)\n    assert even_odd_count(11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111"
    },
    {
      "rank": 4,
      "score": 10.0,
      "candidate": "# return (len([x for x in str(num) if int(x) % 2 == 0]), len([x for x in str(num) if int(x) % 2 == 1]))\n    even_count = 0\n    odd_count = 0\n    for i in str(num):\n        if int(i) % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    return (even_count, odd_count)\n\n\ndef test_function():\n    assert even_odd_count(123) == (1, 2)\n    assert even_odd_count(-12) == (1, 1)\n    assert even_odd_count(1230) == (2, 2)\n    assert even_odd_count(-1230) == (2, 2)\n    assert even_odd_count(-1) == (0, 1)\n    assert even_odd_count(-12300) == (2, 3)\n    assert even_odd_count(0) == (1, 0)\n    assert even_odd_count(220) == (2, 1)\n    assert even_odd_count(102102) == (3, 3)\n    assert even_odd_count(-1111) == (0, 4)\n    assert even_odd_count(222222) == (6, 0)\n    assert even_odd_count(101010) == (3, 3)"
    },
    {
      "rank": 5,
      "score": 10.0,
      "candidate": "even, odd = 0, 0\n    for digit in str(num):\n        if int(digit) % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n    return even, odd\n\n\ndef test_even_odd_count():\n    assert even_odd_count(-12) == (1, 1)\n    assert even_odd_count(123) == (1, 2)\n    assert even_odd_count(1234567) == (3, 4)\n    assert even_odd_count(12345678) == (4, 4)\n    assert even_odd_count(123456789) == (5, 5)"
    },
    {
      "rank": 6,
      "score": 10.0,
      "candidate": "return (sum(int(x) % 2 == 0 for x in str(num)), sum(int(x) % 2 == 1 for x in str(num)))\n\n\ndef test_even_odd_count():\n    assert even_odd_count(-12) == (1, 1)\n    assert even_odd_count(123) == (1, 2)\n    assert even_odd_count(1230) == (2, 1)\n    assert even_odd_count(1023) == (2, 1)\n    assert even_odd_count(10203) == (3, 0)\n    assert even_odd_count(12304567) == (3, 4)\n\n\nif __name__ == \"__main__\":\n    test_even_odd_count()"
    },
    {
      "rank": 7,
      "score": 10.0,
      "candidate": "even_count = 0\n    odd_count = 0\n    if num < 0:\n        num = -num\n    while num != 0:\n        if num % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n        num = num // 10\n    return (even_count, odd_count)\n\n\nprint(even_odd_count(-12))\nprint(even_odd_count(123))\nprint(even_odd_count(-123456))"
    },
    {
      "rank": 8,
      "score": 10.0,
      "candidate": "#return ((num // 10) % 2, (num % 10) % 2)\n    #return ((num // 10) & 1, (num % 10) & 1)\n    return ((num & 1) + (num & 2), (num >> 1) & 1)\n\n\nif __name__ == \"__main__\":\n    print(even_odd_count(-12))\n    print(even_odd_count(123))"
    },
    {
      "rank": 9,
      "score": 10.0,
      "candidate": "return (sum(map(lambda x: 1 if x % 2 == 0 else 0, [int(x) for x in str(num)])), sum(map(lambda x: 1 if x % 2 != 0 else 0, [int(x) for x in str(num)])))\n\n\ndef test_function():\n    assert even_odd_count(123) == (1, 2)\n    assert even_odd_count(1244) == (2, 2)\n    assert even_odd_count(1221) == (2, 2)\n    assert even_odd_count(111) == (0, 3)\n    assert even_odd_count(1230) == (1, 2)\n    assert even_odd_count(-12) == (1, 1)\n    assert even_odd_count(0) == (0, 1)\n    assert even_odd_count(222) == (0, 3)\n    assert even_odd_count(-212) == (1, 2)\n    assert even_odd_count(212) == (1, 2)\n    assert even_odd_count(-11) == (0, 2)\n    assert even_odd_count(-2212) == (2, 2)\n    assert even_odd_count(10230) == (1, 2)\n    assert even_odd_count(-10230) == (1, 2)\n    assert even_odd_count(-10200) == (2, 2)"
    },
    {
      "rank": 10,
      "score": 10.0,
      "candidate": "even = 0\n    odd = 0\n    for i in str(num):\n        if int(i) % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n    return (even, odd)\n\n\nprint(even_odd_count(123))\nprint(even_odd_count(-12))"
    },
    {
      "rank": 11,
      "score": 10.0,
      "candidate": "even = odd = 0\n    for digit in str(num):\n        if int(digit) % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n    return (even, odd)\n\n\ndef test_even_odd_count():\n    assert even_odd_count(123) == (1, 2)\n    assert even_odd_count(1230) == (2, 1)\n    assert even_odd_count(1230456) == (3, 3)\n    assert even_odd_count(-1230456) == (2, 3)\n    assert even_odd_count(0) == (1, 0)\n    assert even_odd_count(-1) == (1, 1)\n    assert even_odd_count(-1230456789) == (4, 5)\n    assert even_odd_count(1024) == (2, 1)\n    assert even_odd_count(2147483647) == (3, 4)\n    assert even_odd_count(-2147483648) == (3, 4)\n\n\nif __name__ == '__main__':\n    test_even_odd_count()"
    },
    {
      "rank": 12,
      "score": 10.0,
      "candidate": "even_count = 0\n    odd_count = 0\n    for digit in str(num):\n        if int(digit) % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n\n    return even_count, odd_count\n\n\ndef test_even_odd_count():\n    assert even_odd_count(-12) == (1, 1)\n    assert even_odd_count(123) == (1, 2)\n    assert even_odd_count(101) == (1, 2)\n    assert even_odd_count(0) == (1, 0)\n    assert even_odd_count(110) == (0, 2)\n    assert even_odd_count(1111) == (0, 4)\n    assert even_odd_count(101010) == (1, 5)"
    },
    {
      "rank": 13,
      "score": 10.0,
      "candidate": "even_count = 0\n    odd_count = 0\n    num_str = str(num)\n    for i in num_str:\n        if int(i) % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    return (even_count, odd_count)\n\n\ndef test_function():\n    assert even_odd_count(123) == (1, 2)\n    assert even_odd_count(12) == (1, 1)\n    assert even_odd_count(12300) == (2, 3)\n    assert even_odd_count(-1) == (0, 1)\n    assert even_odd_count(-12) == (1, 1)\n    assert even_odd_count(-123) == (1, 2)\n    assert even_odd_count(-12300) == (2, 3)\n    assert even_odd_count(102300) == (2, 3)\n    assert even_odd_count(-102300) == (2, 3)\n    assert even_odd_count(1023000) == (2, 4)\n    assert even_odd_count(-1023000) == (2, 4)\n    assert even_odd_count(1002300) == (2, 4)\n    assert even_odd_count(-1002300) == (2, 4)"
    },
    {
      "rank": 14,
      "score": 10.0,
      "candidate": "return (sum(1 for c in str(num) if int(c) % 2 == 0),\n            sum(1 for c in str(num) if int(c) % 2 == 1))\n\n\ndef test_even_odd_count():\n    assert even_odd_count(0) == (1, 0)\n    assert even_odd_count(1) == (0, 1)\n    assert even_odd_count(10) == (1, 1)\n    assert even_odd_count(123) == (1, 2)\n    assert even_odd_count(1230) == (2, 1)\n    assert even_odd_count(-1) == (0, 1)\n    assert even_odd_count(-12) == (1, 1)\n    assert even_odd_count(-123) == (1, 2)\n    assert even_odd_count(-1230) == (2, 1)"
    },
    {
      "rank": 15,
      "score": 10.0,
      "candidate": "# BEGIN PROBLEM 1\n    even, odd = 0, 0\n    for i in str(num):\n        if i.isdigit():\n            if int(i) % 2 == 0:\n                even += 1\n            else:\n                odd += 1\n    return (even, odd)\n    # END PROBLEM 1\n\n\ndef reverse_string(string):\n    \"\"\"Return a reversed version of the given string.\n\n    Example:\n        reverse_string('abc') returns 'cba'\n    \"\"\"\n    # BEGIN PROBLEM 2\n    return string[::-1]\n    # END PROBLEM 2\n\n\ndef substring_position(substring, string):\n    \"\"\"Return the position of the first occurrence of a substring, or -1 if not found.\n\n    Example:\n        substring_position('abc', 'abxyzabc') returns 0\n        substring_position('abc', 'abyzabxc') returns -1\n\n    \"\"\"\n    # BEGIN PROBLEM 3\n    for i in range(len(string)):\n        for j in range(len(substring)):\n            if string[i:i+j+1] == substring:\n                return i\n    return -1\n    # END PROBLEM 3\n\n\ndef count_substring(substring, string):\n    \"\"\"Return the number of occurrences of a substring in a string.\n\n    Example:\n        count_substring('a', 'aabcasd') returns 3\n        count_substring('b', 'aabcasd') returns 1\n    \"\"\"\n    # BEGIN PROBLEM 4\n    count = 0\n    for i in range(len(string)):\n        for j in range(len(substring)):\n            if string[i:i+j+1] == substring:\n                count += 1\n    return count\n    # END PROBLEM 4\n\n\ndef balanced_parens(s):\n    \"\"\"Return whether a string of parentheses is balanced.\n\n    Example:\n        balanced_parens('()') returns True\n        balanced_parens(')(') returns False\n\n    \"\"\"\n    # BEGIN PROBLEM 5"
    },
    {
      "rank": 16,
      "score": 10.0,
      "candidate": "# return tuple(map(lambda x: x.count(num), (list(str(num)))))\n\n    # return tuple(map(lambda x: list(str(num)).count(x), ('0','1')))\n\n    # return tuple(map(lambda x: sum(1 for s in str(num) if s == x), ('0','1')))\n    return tuple(sum(1 for s in str(num) if s == x) for x in ('0','1'))\n\n\ndef test_even_odd_count():\n    assert even_odd_count(-12) == (1, 1)\n    assert even_odd_count(123) == (1, 2)\n    assert even_odd_count(-1) == (0, 1)\n    assert even_odd_count(1) == (1, 0)\n    assert even_odd_count(0) == (1, 0)\n    assert even_odd_count(111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111"
    },
    {
      "rank": 17,
      "score": 10.0,
      "candidate": "count_even = 0\n    count_odd = 0\n    if num < 0:\n        num = -1 * num\n    num_str = str(num)\n    for n in num_str:\n        if int(n) % 2 == 0:\n            count_even += 1\n        else:\n            count_odd += 1\n    return (count_even, count_odd)\n\n\ndef test_even_odd_count():\n    assert even_odd_count(123) == (1, 2)\n    assert even_odd_count(1230) == (2, 1)\n    assert even_odd_count(12300) == (3, 0)\n    assert even_odd_count(-12) == (1, 1)\n    assert even_odd_count(-123) == (1, 2)\n\n\nif __name__ == '__main__':\n    test_even_odd_count()"
    },
    {
      "rank": 18,
      "score": 10.0,
      "candidate": "if num < 0:\n        num = -num\n\n    even = odd = 0\n    while num > 0:\n        if num % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n        num //= 10\n\n    return even, odd\n\n\ndef test_even_odd_count():\n    assert even_odd_count(-12) == (1, 1)\n    assert even_odd_count(123) == (1, 2)\n    assert even_odd_count(0) == (1, 0)\n    assert even_odd_count(100) == (2, 0)\n    assert even_odd_count(123456789) == (4, 5)\n    assert even_odd_count(1234567890) == (5, 5)"
    },
    {
      "rank": 19,
      "score": 10.0,
      "candidate": "even = odd = 0\n    if num < 0:\n        num = -num\n    while num > 0:\n        if num % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n        num = num // 10\n    return (even, odd)\n\n\ndef test_even_odd_count():\n    assert even_odd_count(-12) == (1, 1)\n    assert even_odd_count(123) == (1, 2)\n    assert even_odd_count(-123) == (1, 2)\n    assert even_odd_count(1023) == (2, 1)\n    assert even_odd_count(-1023) == (2, 1)\n    assert even_odd_count(-3) == (0, 1)\n    assert even_odd_count(0) == (1, 0)\n\n\nif __name__ == \"__main__\":\n    test_even_odd_count()"
    },
    {
      "rank": 20,
      "score": 10.0,
      "candidate": "even_count = 0\n    odd_count = 0\n    num_str = str(num)\n\n    for digit in num_str:\n        digit_int = int(digit)\n        if digit_int % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n\n    return (even_count, odd_count)\n\n\ndef test_even_odd_count():\n    assert even_odd_count(-12) == (1, 1)\n    assert even_odd_count(123) == (1, 2)\n    assert even_odd_count(10) == (1, 1)\n    assert even_odd_count(1000000) == (1, 6)\n    assert even_odd_count(10000000) == (2, 5)\n    assert even_odd_count(100000000) == (2, 6)\n\n\ndef main():\n    test_even_odd_count()\n    print('Passed')\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 21,
      "score": 10.0,
      "candidate": "count_even = 0\n    count_odd = 0\n    if num < 0:\n        num = -num\n    while num > 0:\n        if num % 2 == 0:\n            count_even += 1\n        else:\n            count_odd += 1\n        num //= 10\n    return (count_even, count_odd)\n\n\ndef test_even_odd_count():\n    assert even_odd_count(123) == (1, 2)\n    assert even_odd_count(-12) == (1, 1)\n    assert even_odd_count(1230) == (2, 1)\n    assert even_odd_count(-1230) == (2, 1)\n    assert even_odd_count(10203) == (2, 2)\n    assert even_odd_count(-10203) == (2, 2)"
    },
    {
      "rank": 22,
      "score": 10.0,
      "candidate": "# your code here\n    even, odd = 0, 0\n    for n in str(abs(num)):\n        if n == '0':\n            continue\n        if int(n) % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n    return even, odd\n\n\nprint(even_odd_count(102))\nprint(even_odd_count(1002))"
    },
    {
      "rank": 23,
      "score": 10.0,
      "candidate": "return (sum(1 for i in str(num) if int(i) % 2 == 0), sum(1 for i in str(num) if int(i) % 2 != 0))\n\ndef test_function(test_case):\n    even_num, odd_num = test_case\n    test_case_1 = even_odd_count(even_num)\n    test_case_2 = even_odd_count(odd_num)\n    if test_case_1 == (1, 1) and test_case_2 == (1, 2):\n        print(\"Pass\")\n    else:\n        print(\"Fail\")\n\ntest_function((-12, 123))\ntest_function((222, 111))\ntest_function((100, 111))\ntest_function((99, 102))\ntest_function((2222, 1111))\ntest_function((234, 1234))"
    },
    {
      "rank": 24,
      "score": 10.0,
      "candidate": "if not isinstance(num, int):\n        raise TypeError(\"Input must be an integer\")\n    if num == 0:\n        return (1, 0)\n    if num < 0:\n        num = -num\n    even_count = 0\n    odd_count = 0\n    while num > 0:\n        if num % 10 % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n        num //= 10\n    return (even_count, odd_count)\n\n\ndef test_function():\n    assert even_odd_count(123) == (1, 2)\n    assert even_odd_count(12000) == (2, 1)\n    assert even_odd_count(0) == (1, 0)\n    assert even_odd_count(123000) == (2, 2)\n    assert even_odd_count(-123000) == (2, 2)\n    assert even_odd_count(100) == (2, 0)\n    assert even_odd_count(101) == (1, 1)\n    assert even_odd_count(-212) == (1, 2)\n    assert even_odd_count(-101) == (1, 1)\n    assert even_odd_count(212) == (2, 0)\n\nif __name__ == '__main__':\n    test_function()"
    },
    {
      "rank": 25,
      "score": 10.0,
      "candidate": "# your code here\n    even = 0\n    odd = 0\n    for i in str(num):\n        if i == '0':\n            even += 1\n        elif int(i) % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n    return even, odd\n\n\nprint(even_odd_count(-12))\nprint(even_odd_count(123))\nprint(even_odd_count(0))\nprint(even_odd_count(1023))\nprint(even_odd_count(123456789))"
    },
    {
      "rank": 26,
      "score": 10.0,
      "candidate": "if num < 0:\n        num = abs(num)\n\n    even_count = 0\n    odd_count = 0\n\n    while num > 0:\n        if num % 10 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n        num //= 10\n\n    return (even_count, odd_count)\n\n\ndef test_even_odd_count():\n    assert even_odd_count(-12) == (1, 1)\n    assert even_odd_count(123) == (1, 2)\n    assert even_odd_count(123456789101112) == (6, 6)\n    assert even_odd_count(1) == (0, 1)\n\n\nif __name__ == '__main__':\n    test_even_odd_count()"
    },
    {
      "rank": 27,
      "score": 10.0,
      "candidate": "# Your code here\n    if num < 0:\n        num = -num\n    count_even = 0\n    count_odd = 0\n    while num > 0:\n        if num % 2 == 0:\n            count_even += 1\n        else:\n            count_odd += 1\n        num = num // 10\n    return (count_even, count_odd)\n\n\ndef test_even_odd_count():\n    assert even_odd_count(-12) == (1, 1)\n    assert even_odd_count(123) == (1, 2)\n    assert even_odd_count(1230) == (2, 1)\n    assert even_odd_count(1023) == (2, 1)\n    assert even_odd_count(220) == (2, 0)\n    assert even_odd_count(1111) == (0, 4)\n    assert even_odd_count(2111) == (1, 3)\n    assert even_odd_count(1011) == (1, 2)\n    assert even_odd_count(2020) == (2, 0)"
    },
    {
      "rank": 28,
      "score": 10.0,
      "candidate": "#return (num.count(2), num.count(3))\n    #return (num.count(4), num.count(5))\n    #return (num.count(6), num.count(7))\n    #return (num.count(8), num.count(9))\n    #return (num.count(10), num.count(11))\n    #return (num.count(12), num.count(13))\n    #return (num.count(14), num.count(15))\n    #return (num.count(16), num.count(17))\n    #return (num.count(18), num.count(19))\n    #return (num.count(20), num.count(21))\n    #return (num.count(22), num.count(23))\n    #return (num.count(24), num.count(25))\n    #return (num.count(26), num.count(27))\n    #return (num.count(28), num.count(29))\n    #return (num.count(30), num.count(31))\n    #return (num.count(32), num.count(33))\n    #return (num.count(34), num.count(35))\n    #return (num.count(36), num.count(37))\n    #return (num.count(38), num.count(39))\n    #return (num.count(40), num.count(41))\n    #return (num.count(42), num.count(43))\n    #return (num.count(44), num.count(45))\n    #return (num.count(46), num.count(47))\n    #return (num.count(48), num.count(49))\n    #return (num.count(50), num.count(51))\n    #return (num.count(52), num.count(53))\n    #return (num.count(54), num.count(55))\n    #return (num.count"
    },
    {
      "rank": 29,
      "score": 10.0,
      "candidate": "# your code here\n    even_count = 0\n    odd_count = 0\n    for i in num:\n        if i % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n\n    return (even_count, odd_count)\n\n\nprint(even_odd_count(123))\nprint(even_odd_count(-12))"
    },
    {
      "rank": 30,
      "score": 10.0,
      "candidate": "even = odd = 0\n    if num < 0:\n        num = -num\n\n    while num:\n        if num % 10 == 0:\n            even += 1\n        elif num % 10 % 2 == 1:\n            odd += 1\n\n        num //= 10\n\n    return (even, odd)\n\n\ndef test_even_odd_count():\n    assert even_odd_count(-12) == (1, 1)\n    assert even_odd_count(123) == (1, 2)\n    assert even_odd_count(-123) == (1, 2)\n    assert even_odd_count(10) == (1, 1)\n    assert even_odd_count(-10) == (1, 1)\n    assert even_odd_count(101) == (0, 1)\n    assert even_odd_count(100) == (1, 1)\n    assert even_odd_count(200) == (1, 1)\n    assert even_odd_count(12121) == (2, 3)\n    assert even_odd_count(12345678910) == (5, 5)\n    assert even_odd_count(-1000) == (1, 1)\n    assert even_odd_count(22222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222"
    },
    {
      "rank": 31,
      "score": 10.0,
      "candidate": "return (num.count(1), num.count(2), num.count(3))\n\n\ndef test_even_odd_count():\n    assert even_odd_count(123) == (1, 2)\n    assert even_odd_count(-12) == (1, 1)\n    assert even_odd_count(0) == (1, 0)\n    assert even_odd_count(10) == (0, 1)\n    assert even_odd_count(100) == (1, 1)\n    assert even_odd_count(110) == (1, 2)\n    assert even_odd_count(111) == (1, 3)\n    assert even_odd_count(111111) == (3, 3)\n\n\nif __name__ == '__main__':\n    test_even_odd_count()"
    },
    {
      "rank": 32,
      "score": 9.993251387631034,
      "candidate": "if not isinstance(num, int):\n        raise TypeError(\"num must be an int\")\n\n    if num < 0:\n        num = -num\n\n    even = 0\n    odd = 0\n    while num > 0:\n        if num % 10 == 0:\n            even += 1\n        elif num % 10 % 2 == 1:\n            odd += 1\n        num = num // 10\n    return (even, odd)"
    },
    {
      "rank": 33,
      "score": 9.963994939209833,
      "candidate": "pass"
    },
    {
      "rank": 34,
      "score": 9.94217585880588,
      "candidate": "# return (sum(int(i) % 2 == 0 for i in str(num)), sum(int(i) % 2 != 0 for i in str(num)))\n    return (sum(int(i) % 2 == 0 for i in str(abs(num))), sum(int(i) % 2 != 0 for i in str(abs(num))))\n\n\ndef test_even_odd_count():\n    assert even_odd_count(0) == (1, 0)\n    assert even_odd_count(1) == (0, 1)\n    assert even_odd_count(12) == (1, 1)\n    assert even_odd_count(123) == (1, 2)\n    assert even_odd_count(-123) == (1, 2)\n    assert even_odd_count(-12) == (1, 1)\n    assert even_odd_count(-1) == (0, 1)\n\n\nif __name__ == '__main__':\n    test_even_odd_count()"
    },
    {
      "rank": 35,
      "score": 9.930867849414408,
      "candidate": "even = 0\n    odd = 0\n    for i in str(num):\n        if int(i) % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n    return (even, odd)\n\n\ndef test_even_odd_count():\n    assert even_odd_count(123) == (1, 2)\n    assert even_odd_count(1230) == (2, 1)\n    assert even_odd_count(1023) == (2, 1)\n    assert even_odd_count(10203) == (3, 1)\n    assert even_odd_count(-123) == (1, 1)\n    assert even_odd_count(-1230) == (2, 1)\n    assert even_odd_count(-1023) == (2, 1)\n    assert even_odd_count(-10203) == (3, 1)\n    assert even_odd_count(-102003) == (3, 2)\n    assert even_odd_count(1002003) == (2, 3)\n    assert even_odd_count(-1002003) == (2, 3)\n    assert even_odd_count(0) == (1, 0)\n    assert even_odd_count(-0) == (1, 0)\n    assert even_odd_count(1200300) == (2, 3)\n    assert even_odd_count(-1200300) == (2, 3)\n    assert even_odd_count(10200300) == (3, 3)\n    assert even_odd_count(-10200300) == (3, 3)\n    assert even_odd_count(102003000) == (4, 3)\n    assert even_odd_count(-102003000) == (4, 3)"
    },
    {
      "rank": 36,
      "score": 9.907170511668092,
      "candidate": "if num < 0:\n        return 1, num // -2 + 1\n    return 0, num // 2\n\n\ndef test_even_odd_count():\n    assert even_odd_count(-12) == (1, 1)\n    assert even_odd_count(123) == (1, 2)\n    assert even_odd_count(123456789) == (4, 5)\n    assert even_odd_count(1234567890) == (4, 5)\n    assert even_odd_count(0) == (1, 0)\n    assert even_odd_count(1) == (0, 1)\n    assert even_odd_count(2) == (1, 1)"
    },
    {
      "rank": 37,
      "score": 9.887111849756732,
      "candidate": "pass"
    },
    {
      "rank": 38,
      "score": 9.88293152152541,
      "candidate": "return (len([i for i in str(num) if int(i) % 2 == 0]),\n            len([i for i in str(num) if int(i) % 2 != 0]))\n\n\ndef test_function():\n    assert even_odd_count(123) == (1, 2)\n    assert even_odd_count(12) == (2, 0)\n    assert even_odd_count(123456789) == (4, 5)\n    assert even_odd_count(101) == (1, 2)\n    assert even_odd_count(1001) == (1, 2)\n    assert even_odd_count(10001) == (1, 2)\n    assert even_odd_count(1000000001) == (1, 2)\n    assert even_odd_count(10000000001) == (1, 3)\n    assert even_odd_count(100000000001) == (1, 3)\n    assert even_odd_count(-123) == (1, 2)\n    assert even_odd_count(-12) == (2, 0)\n    assert even_odd_count(-123456789) == (4, 5)\n    assert even_odd_count(-101) == (1, 2)\n    assert even_odd_count(-1001) == (1, 2)\n    assert even_odd_count(-10001) == (1, 2)\n    assert even_odd_count(-1000000001) == (1, 2)\n    assert even_odd_count(-10000000001) == (1, 3)\n    assert even_odd_count(-100000000001) == (1, 3)"
    },
    {
      "rank": 39,
      "score": 9.882923312638333,
      "candidate": "return (len([d for d in str(num) if int(d) % 2 == 0]), len([d for d in str(num) if int(d) % 2 != 0]))\n\n\ndef test_even_odd_count():\n    assert even_odd_count(0) == (1, 0)\n    assert even_odd_count(123) == (1, 2)\n    assert even_odd_count(1230) == (2, 1)\n    assert even_odd_count(1230456) == (3, 3)\n    assert even_odd_count(-1230456) == (2, 3)\n    assert even_odd_count(-12304567) == (3, 3)\n    assert even_odd_count(-123045678) == (4, 4)\n    assert even_odd_count(-1230456789) == (5, 5)\n    assert even_odd_count(-12304567890) == (6, 6)\n\n\nif __name__ == '__main__':\n    test_even_odd_count()"
    },
    {
      "rank": 40,
      "score": 9.854153125103362,
      "candidate": "# even = 0\n    # odd = 0\n    # if num > 0:\n    #     while num > 0:\n    #         digit = num % 10\n    #         if digit % 2 == 0:\n    #             even += 1\n    #         else:\n    #             odd += 1\n    #         num //= 10\n    # elif num < 0:\n    #     while num < 0:\n    #         digit = num % 10\n    #         if digit % 2 == 0:\n    #             even += 1\n    #         else:\n    #             odd += 1\n    #         num //= 10\n    # return even, odd\n\n    if num > 0:\n        return num.bit_length() // 2, num.bit_length() // 2 + num.bit_length() % 2\n    elif num < 0:\n        return (num.bit_length() - 1) // 2, (num.bit_length() - 1) // 2 + num.bit_length() % 2\n    else:\n        return 0, 0\n\n\nprint(even_odd_count(123456789))\nprint(even_odd_count(-123456789))"
    },
    {
      "rank": 41,
      "score": 9.849448152205355,
      "candidate": "# Number of even and odd digits respectively\n    even, odd = 0, 0\n\n    # Loop over the digits of the number\n    while num > 0:\n        # Extract the last digit\n        digit = num % 10\n\n        # Check if the digit is even\n        if digit % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n\n        # Remove the last digit from the number\n        num = num // 10\n\n    return even, odd\n\n\ndef test_even_odd_count():\n    assert even_odd_count(-12) == (1, 1)\n    assert even_odd_count(123) == (1, 2)\n    assert even_odd_count(10) == (1, 0)\n    assert even_odd_count(20) == (1, 1)\n    assert even_odd_count(1212) == (2, 2)\n\n\nif __name__ == \"__main__\":\n    test_even_odd_count()"
    },
    {
      "rank": 42,
      "score": 9.845393812074393,
      "candidate": "return (sum(1 for c in str(abs(num)) if int(c) % 2 == 0),\n            sum(1 for c in str(abs(num)) if int(c) % 2 != 0))\n\n\ndef test_even_odd_count():\n    assert even_odd_count(-12) == (1, 1)\n    assert even_odd_count(123) == (1, 2)\n    assert even_odd_count(101) == (1, 2)\n    assert even_odd_count(122) == (2, 0)\n    assert even_odd_count(1001) == (2, 1)\n    assert even_odd_count(10001) == (2, 2)\n    assert even_odd_count(12345) == (2, 3)\n    assert even_odd_count(-12345) == (1, 3)\n    assert even_odd_count(0) == (1, 0)\n\n\nif __name__ == '__main__':\n    test_even_odd_count()"
    },
    {
      "rank": 43,
      "score": 9.807458859791842,
      "candidate": "if num == 0:\n        return (1, 0)\n\n    count_even = count_odd = 0\n    while num > 0:\n        if num % 2 == 0:\n            count_even += 1\n        else:\n            count_odd += 1\n        num //= 10\n    return (count_even, count_odd)\n\n\nprint(even_odd_count(-12))\nprint(even_odd_count(123))\nprint(even_odd_count(123456789))"
    },
    {
      "rank": 44,
      "score": 9.769680614520107,
      "candidate": "even = 0\n    odd = 0\n    if num < 0:\n        num = -num\n    while num > 0:\n        if num % 10 == 0:\n            even += 1\n        else:\n            odd += 1\n        num //= 10\n    return (even, odd)\n\n\ndef test_even_odd_count():\n    assert even_odd_count(-12) == (1, 1)\n    assert even_odd_count(123) == (1, 2)\n    assert even_odd_count(12345) == (2, 3)\n    assert even_odd_count(1234567) == (3, 4)\n    assert even_odd_count(123456789) == (4, 5)\n    assert even_odd_count(1234567890) == (5, 5)\n    assert even_odd_count(12345678901) == (6, 6)\n\n\nif __name__ == '__main__':\n    test_even_odd_count()"
    },
    {
      "rank": 45,
      "score": 9.768291153593768,
      "candidate": "even = 0\n    odd = 0\n    for x in str(num):\n        if int(x) % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n    return (even, odd)\n\n\nif __name__ == '__main__':\n    print(even_odd_count(-12))\n    print(even_odd_count(123))"
    },
    {
      "rank": 46,
      "score": 9.76713512321487,
      "candidate": "even = odd = 0\n    for digit in str(num):\n        if digit == '0':\n            continue\n        if int(digit) % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n    return even, odd\n\n\ndef test_even_odd_count():\n    assert even_odd_count(-12) == (1, 1)\n    assert even_odd_count(123) == (1, 2)\n    assert even_odd_count(-12345678910) == (5, 5)\n\n\nif __name__ == '__main__':\n    test_even_odd_count()"
    },
    {
      "rank": 47,
      "score": 9.765262807032524,
      "candidate": "if num == 0:\n        return (1, 0)\n\n    even = odd = 0\n    if num < 0:\n        num *= -1\n\n    while num > 0:\n        if num % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n        num = num // 10\n    return (even, odd)\n\n\ndef test_even_odd_count():\n    assert even_odd_count(0) == (1, 0)\n    assert even_odd_count(123) == (1, 2)\n    assert even_odd_count(100) == (2, 0)\n    assert even_odd_count(-12) == (1, 1)\n    assert even_odd_count(-100) == (2, 0)\n    assert even_odd_count(1010) == (2, 3)\n    assert even_odd_count(10000) == (2, 4)\n    assert even_odd_count(-12345) == (1, 4)\n    assert even_odd_count(123000) == (2, 3)\n    assert even_odd_count(-120000) == (2, 4)\n\n\nif __name__ == '__main__':\n    test_even_odd_count()"
    },
    {
      "rank": 48,
      "score": 9.760412881077356,
      "candidate": "even = 0\n    odd = 0\n    if num < 0:\n        num = -num\n    while num > 0:\n        r = num % 10\n        if r % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n        num //= 10\n    return (even, odd)\n\n\ndef test_even_odd_count():\n    assert even_odd_count(0) == (1, 0)\n    assert even_odd_count(1) == (0, 1)\n    assert even_odd_count(10) == (1, 1)\n    assert even_odd_count(123) == (1, 2)\n    assert even_odd_count(123456) == (3, 3)\n    assert even_odd_count(1234567) == (3, 4)\n    assert even_odd_count(12345678) == (4, 4)\n    assert even_odd_count(123456789) == (4, 5)\n    assert even_odd_count(-123456789) == (3, 5)\n    assert even_odd_count(-12345678) == (4, 4)\n    assert even_odd_count(-1234567) == (4, 3)\n    assert even_odd_count(-123456) == (4, 2)\n    assert even_odd_count(-12345) == (4, 1)\n    assert even_odd_count(-1234) == (3, 1)\n    assert even_odd_count(-123) == (2, 1)\n    assert even_odd_count(-12) == (1, 1)\n    assert even_odd_count(-1) == (0, 1)\n\n\nif __name__ == '__main__':\n    test_even_odd_count()"
    },
    {
      "rank": 49,
      "score": 9.72780863773741,
      "candidate": "count = (0, 0)\n    for x in str(num):\n        if x == '0':\n            continue\n        if int(x) % 2 == 0:\n            count = (count[0] + 1, count[1])\n        else:\n            count = (count[0], count[1] + 1)\n    return count\n\n\ndef test_even_odd_count():\n    assert even_odd_count(0) == (1, 0)\n    assert even_odd_count(1) == (0, 1)\n    assert even_odd_count(-1) == (1, 0)\n    assert even_odd_count(-12) == (1, 1)\n    assert even_odd_count(123) == (1, 2)\n    assert even_odd_count(12345) == (2, 3)\n\n\nif __name__ == '__main__':\n    test_even_odd_count()"
    },
    {
      "rank": 50,
      "score": 9.718856235379514,
      "candidate": "# return len(list(filter(lambda x: x % 2 == 0, str(num)))) , len(list(filter(lambda x: x % 2 != 0, str(num))))\n    return len([x for x in str(num) if int(x) % 2 == 0]), len([x for x in str(num) if int(x) % 2 != 0])\n\n\n# print(even_odd_count(-12))\n# print(even_odd_count(123))\n# print(even_odd_count(1025))\n# print(even_odd_count(102500))\n# print(even_odd_count(1025000000))\n# print(even_odd_count(102500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"
    },
    {
      "rank": 51,
      "score": 9.699680655040597,
      "candidate": "even = 0\n    odd = 0\n    num_str = str(num)\n    for i in num_str:\n        if int(i) % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n\n    return even, odd\n\ndef test_even_odd_count():\n    assert even_odd_count(123) == (1, 2)\n    assert even_odd_count(-12) == (1, 1)\n    assert even_odd_count(1230) == (2, 2)\n    assert even_odd_count(12300) == (3, 2)\n    assert even_odd_count(-12300) == (2, 3)\n    assert even_odd_count(-123) == (1, 2)\n    assert even_odd_count(-1200) == (2, 1)\n    assert even_odd_count(-100) == (1, 1)\n    assert even_odd_count(0) == (1, 0)\n    assert even_odd_count(220) == (1, 2)\n\nif __name__ == '__main__':\n    test_even_odd_count()"
    },
    {
      "rank": 52,
      "score": 9.699146693885302,
      "candidate": "even_count = 0\n    odd_count = 0\n    for i in num:\n        if i % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    return (even_count, odd_count)\n\n\nprint(even_odd_count(-12))\nprint(even_odd_count(123))"
    },
    {
      "rank": 53,
      "score": 9.677440122697439,
      "candidate": "pass\n\n# \u4f7f\u7528\u4e00\u4e2a\u6570\u5b57\uff0c\u5982123\uff0c\u9010\u4f4d\u8d4b\u503c\u7ed9a\uff0ca\u7684\u503c\u4e3a23\uff0c\u518d\u7528a\u7684\u503c\u51cf\u53bb10\u7684\u500d\u6570\uff0ca\u7684\u503c\u4e3a3\uff0c\u7136\u540e\u518d\u75283\u7684\u503c\u51cf\u53bb10\u7684\u500d\u6570\uff0ca\u7684\u503c\u4e3a0\uff0c\u6700\u540ea\u7684\u503c\u4e3a0\uff0c\u5219123\u662f\u4e00\u4e2a\u5947\u6570\u3002\n# \u5982\u679c123\u662f\u4e00\u4e2a\u5947\u6570\uff0c\u5219123\u7684\u5947\u6570\u4f4d\u6570\u4e3a\u5947\u6570\uff1b\u5982\u679c123\u662f\u4e00\u4e2a\u5076\u6570\uff0c\u5219123\u7684\u5947\u6570\u4f4d\u6570\u4e3a\u5076\u6570\u3002\n\n\ndef even_odd_count(num):\n    a = num\n    while a > 0:\n        a = a - (a // 10) * 10\n    if a == 0:\n        return (num.count(\"0\"), num.count(\"1\"))\n    elif a % 2 == 0:\n        return (num.count(\"0\"), num.count(\"1\") + num.count(\"2\") + num.count(\"3\") + num.count(\"4\") + num.count(\"5\") + num.count(\"6\") + num.count(\"7\") + num.count(\"8\") + num.count(\"9\"))\n    else:\n        return (num.count(\"1\") + num.count(\"2\") + num.count(\"3\") + num.count(\"4\") + num.count(\"5\") + num.count(\"6\") + num.count(\"7\") + num.count(\"8\") + num.count(\"9\"), num.count(\"0\"))\n\n\nprint(even_odd_count(123))\n\n\ndef even_odd_count(num):\n    a = num\n    while a > 0:\n        a = a - (a // 10) * 10\n    if a == 0:\n        return (num.count(\"0\"), num.count(\"1\"))\n    elif a % 2 == 0:\n        return (num.count(\"1\") + num.count(\"2\") + num.count(\"3\") + num.count(\"4\") + num.count(\"5\")"
    },
    {
      "rank": 54,
      "score": 9.661538999847021,
      "candidate": "even = 0\n    odd = 0\n\n    if num < 0:\n        num = abs(num)\n\n    while num > 0:\n        r = num % 10\n        num = num // 10\n\n        if r % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n\n    return (even, odd)\n\n\ndef test_even_odd_count():\n    assert even_odd_count(123) == (1, 2)\n    assert even_odd_count(-123) == (1, 2)\n    assert even_odd_count(12) == (2, 0)\n    assert even_odd_count(1230) == (2, 1)\n    assert even_odd_count(111) == (0, 3)\n    assert even_odd_count(111000) == (1, 3)\n\n\nif __name__ == '__main__':\n    test_even_odd_count()"
    },
    {
      "rank": 55,
      "score": 9.640077895802646,
      "candidate": "count_even = 0\n    count_odd = 0\n    for i in str(num):\n        if int(i) % 2 == 0:\n            count_even += 1\n        else:\n            count_odd += 1\n    return (count_even, count_odd)\n\n\ndef test_even_odd_count():\n    assert even_odd_count(-12) == (1, 1)\n    assert even_odd_count(123) == (1, 2)\n    assert even_odd_count(101) == (2, 1)\n    assert even_odd_count(1122) == (4, 0)\n    assert even_odd_count(12345) == (3, 2)\n    assert even_odd_count(102345) == (3, 3)\n    assert even_odd_count(120345) == (2, 3)\n    assert even_odd_count(1002345) == (2, 4)\n    assert even_odd_count(10002345) == (2, 5)\n    assert even_odd_count(100002345) == (1, 6)\n    assert even_odd_count(1000002345) == (0, 7)\n\n\nif __name__ == \"__main__\":\n    test_even_odd_count()"
    },
    {
      "rank": 56,
      "score": 9.58039123838868,
      "candidate": "count = 0\n    for i in str(num):\n        if int(i) % 2 == 0:\n            count += 1\n    return (count, len(str(num)) - count)\n\n\ndef test_function():\n    assert even_odd_count(123) == (1, 2)\n    assert even_odd_count(12) == (2, 0)\n    assert even_odd_count(111) == (0, 3)\n    assert even_odd_count(-1) == (1, 1)\n    assert even_odd_count(-111) == (0, 3)\n    assert even_odd_count(1000000) == (3, 6)\n    assert even_odd_count(-1000000) == (3, 6)\n    assert even_odd_count(-1001235) == (2, 5)\n    assert even_odd_count(0) == (1, 0)"
    },
    {
      "rank": 57,
      "score": 9.545987962239394,
      "candidate": "count_even, count_odd = 0, 0\n    for digit in str(num):\n        digit = int(digit)\n        if digit % 2 == 0:\n            count_even += 1\n        else:\n            count_odd += 1\n\n    return count_even, count_odd\n\n\ndef test_even_odd_count():\n    assert even_odd_count(-12) == (1, 1)\n    assert even_odd_count(123) == (1, 2)\n    assert even_odd_count(1023) == (2, 2)\n    assert even_odd_count(2023) == (3, 2)\n    assert even_odd_count(20234) == (3, 3)\n    assert even_odd_count(1230234) == (3, 4)\n    assert even_odd_count(10230234) == (4, 4)\n    assert even_odd_count(20230234) == (5, 4)\n    assert even_odd_count(30230234) == (6, 4)\n    assert even_odd_count(302302345) == (6, 5)\n    assert even_odd_count(3023023456) == (7, 5)\n\n\nif __name__ == '__main__':\n    test_even_odd_count()"
    },
    {
      "rank": 58,
      "score": 9.493584439832787,
      "candidate": "even = odd = 0\n    if num < 0:\n        num = abs(num)\n    while num:\n        if num % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n        num //= 10\n    return (even, odd)\n\n\nif __name__ == \"__main__\":\n    print(even_odd_count(-12))\n    print(even_odd_count(123))"
    },
    {
      "rank": 59,
      "score": 9.47114453552205,
      "candidate": "return (sum(int(x) % 2 == 0 for x in str(num)), sum(int(x) % 2 != 0 for x in str(num)))\n\n\ndef test_even_odd_count():\n    assert even_odd_count(123) == (1, 2)\n    assert even_odd_count(1230) == (2, 2)\n    assert even_odd_count(-12) == (1, 1)\n    assert even_odd_count(0) == (1, 0)\n    assert even_odd_count(102102) == (3, 2)\n\n\nif __name__ == \"__main__\":\n    test_even_odd_count()"
    },
    {
      "rank": 60,
      "score": 9.446832512996986,
      "candidate": "even_count, odd_count = 0, 0\n    abs_num = abs(num)\n    while abs_num > 0:\n        digit = abs_num % 10\n        if digit % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n        abs_num = abs_num // 10\n    return even_count, odd_count\n\n\nif __name__ == \"__main__\":\n    print(even_odd_count(12345))"
    },
    {
      "rank": 61,
      "score": 9.42450321128885,
      "candidate": "even = 0\n    odd = 0\n    for i in str(num):\n        if int(i) % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n    return (even, odd)\n\n\ndef test_even_odd_count():\n    assert even_odd_count(-12) == (1, 1)\n    assert even_odd_count(123) == (1, 2)\n    assert even_odd_count(101) == (1, 2)\n    assert even_odd_count(-101) == (1, 2)\n    assert even_odd_count(1000000) == (3, 1)\n    assert even_odd_count(-1000000) == (3, 1)\n    assert even_odd_count(10111000000001111) == (3, 8)\n    assert even_odd_count(-10111000000001111) == (3, 8)\n\n\nif __name__ == \"__main__\":\n    test_even_odd_count()"
    },
    {
      "rank": 62,
      "score": 9.401896687959665,
      "candidate": "count = [0,0]\n    num = str(num)\n    for i in range(len(num)):\n        if int(num[i])%2 == 0:\n            count[0] += 1\n        else:\n            count[1] += 1\n    return count\n\ndef test_bench():\n    test_data = [10, 12, 13, 15, 20, 25, 32, 35, 40, 45]\n\n    for num in test_data:\n        print(even_odd_count(num))\n\nif __name__ == \"__main__\":\n    test_bench()"
    },
    {
      "rank": 63,
      "score": 9.389578175014488,
      "candidate": "if num < 0:\n        num = -num\n\n    even = odd = 0\n\n    while num > 0:\n        if num % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n        num //= 10\n\n    return (even, odd)\n\n\ndef test_even_odd_count():\n    assert even_odd_count(-12) == (1, 1)\n    assert even_odd_count(123) == (1, 2)\n    assert even_odd_count(12345) == (2, 3)\n    assert even_odd_count(123456) == (3, 3)\n    assert even_odd_count(1234567) == (3, 4)\n    assert even_odd_count(12345678) == (4, 4)\n    assert even_odd_count(123456789) == (4, 5)\n    assert even_odd_count(1234567890) == (5, 5)\n    assert even_odd_count(12345678901) == (5, 6)\n    assert even_odd_count(123456789012) == (6, 6)\n    assert even_odd_count(1234567890123) == (6, 7)"
    },
    {
      "rank": 64,
      "score": 9.335906975550785,
      "candidate": "# l = [int(x) for x in str(num)]\n    # even = sum(i % 2 == 0 for i in l)\n    # odd = sum(i % 2 != 0 for i in l)\n    # return even, odd\n\n    return (sum(int(x) % 2 == 0 for x in str(num)), sum(int(x) % 2 != 0 for x in str(num)))\n\n\nprint(even_odd_count(-12))\nprint(even_odd_count(123))"
    },
    {
      "rank": 65,
      "score": 9.293848149332355,
      "candidate": "even = 0\n    odd = 0\n    for n in str(num):\n        if int(n) % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n    return (even, odd)\n\n\nprint(even_odd_count(123))\nprint(even_odd_count(-12))\nprint(even_odd_count(123456789))"
    },
    {
      "rank": 66,
      "score": 9.287625906893272,
      "candidate": "num_even = 0\n    num_odd = 0\n\n    if num < 0:\n        num = -num\n\n    while num > 0:\n        if num % 2 == 0:\n            num_even += 1\n        else:\n            num_odd += 1\n        num //= 10\n\n    return (num_even, num_odd)\n\n\ndef test_function():\n    assert even_odd_count(123) == (1, 2)\n    assert even_odd_count(1230) == (2, 1)\n    assert even_odd_count(12300) == (3, 0)\n    assert even_odd_count(-12300) == (3, 0)\n    assert even_odd_count(-12) == (1, 1)\n    assert even_odd_count(-123) == (1, 2)\n    assert even_odd_count(1025) == (2, 1)\n\nif __name__ == '__main__':\n    test_function()"
    },
    {
      "rank": 67,
      "score": 9.260739004816287,
      "candidate": "# your code here\n    count_even = 0\n    count_odd = 0\n    if num < 0:\n        num *= -1\n    while num > 0:\n        digit = num % 10\n        if digit % 2 == 0:\n            count_even += 1\n        else:\n            count_odd += 1\n        num = num // 10\n    return (count_even, count_odd)\n\nprint(even_odd_count(-12))\nprint(even_odd_count(123))"
    },
    {
      "rank": 68,
      "score": 9.137541083743484,
      "candidate": "even = odd = 0\n    for digit in str(num):\n        if int(digit) % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n    return even, odd\n\n\ndef test_even_odd_count():\n    assert even_odd_count(-12) == (1, 1)\n    assert even_odd_count(123) == (1, 2)\n    assert even_odd_count(1230) == (2, 1)\n\n\nif __name__ == '__main__':\n    test_even_odd_count()"
    },
    {
      "rank": 69,
      "score": 9.118479922318633,
      "candidate": "# Your code here\n    even = 0\n    odd = 0\n    num_str = str(num)\n    for i in num_str:\n        if int(i) % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n    return (even, odd)\n\n\nprint(even_odd_count(-12))\nprint(even_odd_count(123))\nprint(even_odd_count(123456))"
    },
    {
      "rank": 70,
      "score": 9.0433598776711,
      "candidate": "# your code here\n\n    even = 0\n    odd = 0\n    string = str(num)\n    for i in string:\n        if int(i) % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n    return even, odd\n\n\nprint(even_odd_count(-12))\nprint(even_odd_count(123))\nprint(even_odd_count(111))\nprint(even_odd_count(1212))\nprint(even_odd_count(1213))\nprint(even_odd_count(1210))\nprint(even_odd_count(12101))"
    },
    {
      "rank": 71,
      "score": 9.020164938060113,
      "candidate": "return (sum(1 for i in str(abs(num)) if int(i) % 2 == 0),\n            sum(1 for i in str(abs(num)) if int(i) % 2 != 0))\n\n\ndef test_function():\n    assert even_odd_count(-12) == (1, 1)\n    assert even_odd_count(123) == (1, 2)\n    assert even_odd_count(1230) == (2, 1)\n\nif __name__ == '__main__':\n    test_function()"
    },
    {
      "rank": 72,
      "score": 8.444444444444445,
      "candidate": "count = 0\n    even_count = 0\n    odd_count = 0\n    while num != 0:\n        count += 1\n        if num % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n        num //= 10\n    return (even_count, odd_count)\n\n\nif __name__ == '__main__':\n    print(even_odd_count(-12))\n    print(even_odd_count(123))"
    },
    {
      "rank": 73,
      "score": 8.444444444444445,
      "candidate": "if num < 0:\n        num = -num\n\n    even = 0\n    odd = 0\n    while num:\n        if num % 10:\n            odd += 1\n        else:\n            even += 1\n        num //= 10\n\n    return (even, odd)\n\n\ndef test_even_odd_count():\n    assert even_odd_count(123) == (1, 2)\n    assert even_odd_count(120) == (2, 1)\n    assert even_odd_count(111) == (0, 3)\n    assert even_odd_count(100) == (2, 0)\n    assert even_odd_count(1111) == (0, 4)\n    assert even_odd_count(1234567890) == (4, 5)\n    assert even_odd_count(-1234567890) == (4, 5)"
    },
    {
      "rank": 74,
      "score": 8.444444444444445,
      "candidate": "count_even, count_odd = 0, 0\n    for digit in str(num):\n        if int(digit) % 2 == 0:\n            count_even += 1\n        else:\n            count_odd += 1\n    return (count_even, count_odd)"
    },
    {
      "rank": 75,
      "score": 8.444444444444445,
      "candidate": "return len([i for i in str(num) if i.isdigit() and int(i) % 2 == 0]), len([i for i in str(num) if i.isdigit() and int(i) % 2 != 0])\n\nprint(even_odd_count(-12))\nprint(even_odd_count(123))"
    },
    {
      "rank": 76,
      "score": 8.444444444444445,
      "candidate": "even, odd = 0, 0\n    for digit in str(num):\n        if int(digit) % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n    return even, odd\n\n\nif __name__ == \"__main__\":\n    print(even_odd_count(123))\n    print(even_odd_count(1234))\n    print(even_odd_count(-123456))"
    },
    {
      "rank": 77,
      "score": 8.444444444444445,
      "candidate": "even = odd = 0\n    for digit in str(num):\n        if digit.isdigit():\n            if int(digit) % 2 == 0:\n                even += 1\n            else:\n                odd += 1\n\n    return even, odd\n\n\nprint(even_odd_count(123))\nprint(even_odd_count(0))\nprint(even_odd_count(-1))"
    },
    {
      "rank": 78,
      "score": 8.444444444444445,
      "candidate": "if num < 0:\n        num = -num\n    count_even = 0\n    count_odd = 0\n    while num > 0:\n        if num % 2 == 0:\n            count_even += 1\n        else:\n            count_odd += 1\n        num = num // 10\n    return (count_even, count_odd)\n\n\ndef test_even_odd_count():\n    assert even_odd_count(123) == (1, 2)\n    assert even_odd_count(-12) == (1, 1)\n    assert even_odd_count(1230) == (2, 1)\n    assert even_odd_count(1023) == (2, 1)\n    assert even_odd_count(2025) == (3, 0)\n    assert even_odd_count(-2125) == (2, 2)\n    assert even_odd_count(-2025) == (2, 2)\n\n\nif __name__ == '__main__':\n    test_even_odd_count()"
    },
    {
      "rank": 79,
      "score": 8.444444444444445,
      "candidate": "even, odd = 0, 0\n    for n in str(num):\n        if int(n) % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n    return (even, odd)"
    },
    {
      "rank": 80,
      "score": 8.444444444444445,
      "candidate": "#return (sum([int(c) for c in str(num) if int(c) % 2 == 0]), sum([int(c) for c in str(num) if int(c) % 2 != 0]))\n    return (len([c for c in str(num) if int(c) % 2 == 0]), len([c for c in str(num) if int(c) % 2 != 0]))"
    },
    {
      "rank": 81,
      "score": 8.444444444444445,
      "candidate": "even = odd = 0\n    for n in str(num):\n        if int(n) % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n    return even, odd\n\n\ndef test_even_odd_count():\n    assert even_odd_count(-12) == (1, 1)\n    assert even_odd_count(123) == (1, 2)\n    assert even_odd_count(12345) == (2, 3)\n    assert even_odd_count(-12345) == (2, 3)\n    assert even_odd_count(1230) == (2, 1)\n    assert even_odd_count(-21230) == (2, 1)\n    assert even_odd_count(0) == (1, 0)\n    assert even_odd_count(-0) == (1, 0)"
    },
    {
      "rank": 82,
      "score": 8.444444444444445,
      "candidate": "even = 0\n    odd = 0\n    num_string = str(abs(num))\n    for char in num_string:\n        if int(char) % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n\n    return even, odd\n\n\nprint(even_odd_count(-12))\nprint(even_odd_count(123))\nprint(even_odd_count(1023))"
    },
    {
      "rank": 83,
      "score": 8.444444444444445,
      "candidate": "if num < 0:\n        num = -num\n    even = odd = 0\n    while num:\n        if num % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n        num //= 10\n    return even, odd\n\n\nif __name__ == \"__main__\":\n    print(even_odd_count(-12))\n    print(even_odd_count(123))\n    print(even_odd_count(-123))\n    print(even_odd_count(12345))\n    print(even_odd_count(123456789))"
    },
    {
      "rank": 84,
      "score": 8.444444444444445,
      "candidate": "# your code here\n    count_even = 0\n    count_odd = 0\n    num = str(num)\n    for i in num:\n        if int(i) % 2 == 0:\n            count_even += 1\n        else:\n            count_odd += 1\n    return count_even, count_odd"
    },
    {
      "rank": 85,
      "score": 3.0,
      "candidate": "#return len(str(num))\n    return (str(num).count('2'), str(num).count('1'))\n\n\ndef test_function():\n    # These 'asserts' using only for self-checking and not necessary for auto-testing\n    assert even_odd_count(12) == (1, 1)\n    assert even_odd_count(225) == (3, 1)\n    assert even_odd_count(123) == (1, 2)\n    assert even_odd_count(111) == (0, 3)\n    assert even_odd_count(5555) == (0, 5)\n    assert even_odd_count(99) == (1, 2)\n    assert even_odd_count(0) == (1, 0)\n    assert even_odd_count(-1) == (0, 1)\n    assert even_odd_count(-5555) == (0, 5)\n    print(\"Coding complete? Click 'Check' to review your tests and earn cool rewards!\")"
    },
    {
      "rank": 86,
      "score": 3.0,
      "candidate": "if num < 0:\n        num = -num\n    count_even = count_odd = 0\n    while num != 0:\n        if num % 2 == 0:\n            count_even += 1\n        else:\n            count_odd += 1\n        num = num // 10\n    return count_even, count_odd\n\n\ndef test_even_odd_count():\n    assert even_odd_count(-12) == (1, 1)\n    assert even_odd_count(123) == (1, 2)\n    assert even_odd_count(1230) == (2, 1)\n    assert even_odd_count(10230) == (2, 2)\n    assert even_odd_count(100230) == (3, 2)\n    assert even_odd_count(-100230) == (3, 2)"
    },
    {
      "rank": 87,
      "score": 3.0,
      "candidate": "even = 0\n    odd = 0\n    temp = abs(num)\n    while temp > 0:\n        if temp % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n        temp = temp // 10\n    return (even, odd)\n\n\nprint(even_odd_count(123))\nprint(even_odd_count(-12))"
    },
    {
      "rank": 88,
      "score": 3.0,
      "candidate": "even = odd = 0\n    for i in str(num):\n        if int(i) % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n\n    return even, odd\n\n\n# Pybites solution\n\n\ndef even_odd_count1(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    even = odd = 0\n    for i in str(num):\n        if int(i) % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n\n    return even, odd\n\n\ndef even_odd_count2(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    even = odd = 0\n    for i in str(num):\n        if int(i) % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n\n    return even, odd"
    },
    {
      "rank": 89,
      "score": 3.0,
      "candidate": "# Your code here\n    return (sum(int(i)%2==0 for i in str(num)),sum(int(i)%2!=0 for i in str(num)))\n\n\n\ndef count_odd_digits(num):\n    \"\"\"Given an integer. return the number of odd digits.\n\n     Example:\n        count_odd_digits(-12) ==> 1\n        count_odd_digits(123) ==> 2\n    \"\"\"\n    # Your code here\n    return sum(int(i)%2!=0 for i in str(num))\n\n\n\ndef count_even_digits(num):\n    \"\"\"Given an integer. return the number of even digits.\n\n     Example:\n        count_even_digits(-12) ==> 1\n        count_even_digits(123) ==> 2\n    \"\"\"\n    # Your code here\n    return sum(int(i)%2==0 for i in str(num))\n\n\n\ndef get_digits(num):\n    \"\"\"Given an integer. return a list of digits.\n\n     Example:\n        get_digits(-12) ==> [-1, 2]\n        get_digits(123) ==> [1, 2, 3]\n    \"\"\"\n    # Your code here\n    return [int(i) for i in str(num)]\n\n\n\ndef reverse_nums(nums):\n    \"\"\"Given a list of integers. return a list of integers that are in the reversed order.\n\n     Example:\n        reverse_nums([1, 2, 3]) ==> [3, 2, 1]\n    \"\"\"\n    # Your code here\n    return nums[::-1]\n\n\n\ndef sum_nums(nums):\n    \"\"\"Given a list of integers. return the sum of all the integers.\n\n     Example:\n        sum_nums([1, 2, 3]) ==> 6\n    \"\"\"\n    # Your code here\n    return sum(nums)\n\n\n\ndef max_num(nums):\n    \"\"\"Given a list of integers. return the maximum integer.\n\n     Example:"
    },
    {
      "rank": 90,
      "score": 3.0,
      "candidate": "return num.count('0'), num.count('1')\n\n\ndef even_odd_count_v2(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n\n    even = 0\n    odd = 0\n    for c in str(num):\n        if c == '0':\n            even += 1\n        elif c == '1':\n            odd += 1\n        else:\n            pass\n\n    return even, odd"
    },
    {
      "rank": 91,
      "score": 3.0,
      "candidate": "pass\n\ndef is_prime(num):\n    \"\"\"Given an integer. return True if it is prime.\n\n     Example:\n        is_prime(12) ==> False\n        is_prime(13) ==> True\n    \"\"\"\n    pass\n\ndef largest_prime_factor(num):\n    \"\"\"Given an integer. return the largest prime factor.\n\n     Example:\n        largest_prime_factor(12) ==> 2\n        largest_prime_factor(13) ==> 13\n    \"\"\"\n    pass\n\ndef find_divisors(num):\n    \"\"\"Given an integer. return a list of divisors.\n\n     Example:\n        find_divisors(12) ==> [1, 2, 3, 4, 6, 12]\n        find_divisors(13) ==> [1, 13]\n    \"\"\"\n    pass\n\ndef is_perfect_number(num):\n    \"\"\"Given an integer. return True if it is a perfect number.\n\n     Example:\n        is_perfect_number(6) ==> True\n        is_perfect_number(12) ==> False\n    \"\"\"\n    pass\n\ndef is_abundant_number(num):\n    \"\"\"Given an integer. return True if it is an abundant number.\n\n     Example:\n        is_abundant_number(18) ==> True\n        is_abundant_number(12) ==> False\n    \"\"\"\n    pass\n\ndef is_deficient_number(num):\n    \"\"\"Given an integer. return True if it is a deficient number.\n\n     Example:\n        is_deficient_number(4) ==> True\n        is_deficient_number(12) ==> False\n    \"\"\"\n    pass\n\ndef is_fibonacci_number(num):\n    \"\"\"Given an integer. return True if it is a Fibonacci number.\n\n     Example:\n        is_fibonacci_number(14) ==> True\n        is_fibonacci_number(15) ==> False\n    \"\"\"\n    pass\n\ndef is_palindrome(num):"
    },
    {
      "rank": 92,
      "score": 3.0,
      "candidate": "pass\n\n\ndef even_odd_count_v2(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    return (sum(1 for i in str(num) if int(i) % 2 == 0), sum(1 for i in str(num) if int(i) % 2 == 1))\n\n\nprint(even_odd_count_v2(123))\nprint(even_odd_count_v2(-12))"
    },
    {
      "rank": 93,
      "score": 3.0,
      "candidate": "count_even, count_odd = 0, 0\n    for i in str(num):\n        if int(i) % 2 == 0:\n            count_even += 1\n        else:\n            count_odd += 1\n    return (count_even, count_odd)\n\n\n# print(even_odd_count(-12))\n# print(even_odd_count(123))\n\n\ndef max_min(num1, num2):\n    \"\"\"Given two integers. return a tuple that has the max and min number.\n\n     Example:\n        max_min(1, 2) ==> (2, 1)\n        max_min(2, 1) ==> (2, 1)\n    \"\"\"\n    return (max(num1, num2), min(num1, num2))\n\n\n# print(max_min(1, 2))\n# print(max_min(2, 1))\n\n\ndef max_min_dict(nums):\n    \"\"\"Given a list of integers. return a tuple that has the max and min number.\n\n     Example:\n        max_min_dict([1, 2]) ==> (2, 1)\n        max_min_dict([2, 1]) ==> (2, 1)\n    \"\"\"\n    return (max(nums), min(nums))\n\n\n# print(max_min_dict([1, 2]))\n# print(max_min_dict([2, 1]))\n\n\ndef sum_square_tuple(nums):\n    \"\"\"Given a list of integers. return a tuple that has the sum and the sum of square of the numbers.\n\n     Example:\n        sum_square_tuple([1, 2]) ==> (3, 5)\n        sum_square_tuple([2, 1]) ==> (3, 5)\n    \"\"\"\n    return (sum(nums), sum([i ** 2 for i in nums]))\n\n\n# print(sum_square_tuple([1, 2]))\n# print(sum_square_tuple([2, 1]))\n\n\ndef sum_square_dict(nums):\n    \"\"\"Given a list of"
    },
    {
      "rank": 94,
      "score": 3.0,
      "candidate": "# \u68c0\u67e5num\u662f\u5426\u4e3a\u6574\u6570\n    if num % 1 != 0:\n        return \"Invalid Number\"\n\n    # \u68c0\u67e5num\u662f\u5426\u4e3a\u8d1f\u6570\n    if num < 0:\n        num = -num\n\n    # \u68c0\u67e5num\u662f\u5426\u4e3a0\n    if num == 0:\n        return (1, 0)\n\n    # \u68c0\u67e5num\u662f\u5426\u4e3a\u6b63\u6570\n    if num > 0:\n        if num % 10 % 2 == 0:\n            even_count = 1\n        else:\n            even_count = 0\n        num = num // 10\n        return even_odd_count(num) + (even_count,)\n\n    # \u68c0\u67e5num\u662f\u5426\u4e3a\u8d1f\u6570\n    if num < 0:\n        if num % 10 % 2 == 0:\n            even_count = 1\n        else:\n            even_count = 0\n        num = num // 10\n        return even_odd_count(num) + (even_count,)\n\n\nprint(even_odd_count(-12))\nprint(even_odd_count(123))\nprint(even_odd_count(2468))\nprint(even_odd_count(9635))\nprint(even_odd_count(7635))"
    },
    {
      "rank": 95,
      "score": 3.0,
      "candidate": "return (sum([1 for i in str(num) if int(i)%2==0]),sum([1 for i in str(num) if int(i)%2!=0]))\n\n\n\n\nif __name__ == '__main__':\n    #These \"asserts\" using only for self-checking and not necessary for auto-testing\n    assert even_odd_count(12) == (1, 1), \"First\"\n    assert even_odd_count(22) == (2, 0), \"Second\"\n    assert even_odd_count(123) == (1, 2), \"Third\"\n    assert even_odd_count(222) == (2, 0), \"Fourth\"\n    assert even_odd_count(12345) == (2, 3), \"Fifth\""
    },
    {
      "rank": 96,
      "score": 3.0,
      "candidate": "even = odd = 0\n    if num < 0:\n        num = abs(num)\n    while num > 0:\n        if num % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n        num = num // 10\n    return even, odd\n\n\ndef test_function():\n    assert even_odd_count(-12) == (1, 1)\n    assert even_odd_count(123) == (1, 2)\n    assert even_odd_count(1230) == (2, 1)\n    assert even_odd_count(-3456) == (2, 2)\n    assert even_odd_count(-1) == (0, 1)\n    assert even_odd_count(0) == (1, 0)\n    assert even_odd_count(-123) == (1, 2)\n\n\nif __name__ == '__main__':\n    test_function()"
    },
    {
      "rank": 97,
      "score": 3.0,
      "candidate": "even = odd = 0\n    if num < 0:\n        num = -num\n    while num:\n        if num % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n        num //= 10\n    return even, odd\n\n\nif __name__ == \"__main__\":\n    print(even_odd_count(-12))\n    print(even_odd_count(123))"
    },
    {
      "rank": 98,
      "score": 3.0,
      "candidate": "if num == 0:\n        return (1, 0)\n    if num < 0:\n        num = -num\n    return (num // 10, num % 10)\n\n\ndef even_odd_count_v2(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count_v2(-12) ==> (1, 1)\n        even_odd_count_v2(123) ==> (1, 2)\n    \"\"\"\n    if num == 0:\n        return (1, 0)\n    if num < 0:\n        num = -num\n    even = num % 10\n    odd = num // 10\n    return (even, odd)\n\n\ndef test_function():\n    assert even_odd_count(0) == (1, 0)\n    assert even_odd_count(123) == (1, 2)\n    assert even_odd_count(1230) == (2, 1)\n    assert even_odd_count(12300) == (2, 2)\n    assert even_odd_count(1230000) == (3, 2)\n    assert even_odd_count(1023000) == (2, 3)\n    assert even_odd_count(12030000) == (2, 3)\n\n    assert even_odd_count_v2(0) == (1, 0)\n    assert even_odd_count_v2(123) == (1, 2)\n    assert even_odd_count_v2(1230) == (2, 1)\n    assert even_odd_count_v2(12300) == (2, 2)\n    assert even_odd_count_v2(1230000) == (3, 2)\n    assert even_odd_count_v2(1023000) == (2, 3)\n    assert even_odd_count_v2"
    },
    {
      "rank": 99,
      "score": 3.0,
      "candidate": "# return tuple(map(lambda x: x % 2 == 0, str(num)))\n    return tuple(map(lambda x: x % 2 == 0, str(num)))\n\n\ndef test_even_odd_count():\n    assert even_odd_count(-12) == (1, 1)\n    assert even_odd_count(123) == (1, 2)\n    assert even_odd_count(123456) == (3, 3)"
    },
    {
      "rank": 100,
      "score": 3.0,
      "candidate": "even = odd = 0\n    if num < 0:\n        num = -num\n    while num > 0:\n        if num % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n        num = num // 10\n    return (even, odd)\n\n\ndef test_even_odd_count():\n    assert even_odd_count(123) == (1, 2)\n    assert even_odd_count(12) == (2, 0)\n    assert even_odd_count(1230) == (2, 1)\n    assert even_odd_count(10230) == (3, 1)\n    assert even_odd_count(-123) == (1, 2)\n    assert even_odd_count(-12) == (2, 0)\n    assert even_odd_count(-1230) == (2, 1)\n    assert even_odd_count(-10230) == (3, 1)\n    assert even_odd_count(0) == (1, 0)\n    assert even_odd_count(-0) == (1, 0)\n    assert even_odd_count(10) == (1, 1)\n    assert even_odd_count(-10) == (1, 1)\n\n\nif __name__ == \"__main__\":\n    test_even_odd_count()"
    }
  ]
}