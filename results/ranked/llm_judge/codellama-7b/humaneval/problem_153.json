{
  "timestamp": "2025-09-14T22:13:12.349367",
  "method": "improved_llm_judge",
  "judge_model": "codellama/CodeLlama-7b-Python-hf",
  "target_model": "codellama-7b",
  "dataset": "humaneval",
  "problem_number": 153,
  "total_candidates": 100,
  "results": [
    {
      "rank": 1,
      "score": 10.0,
      "candidate": "strongest_strength = 0\n    strongest_extension = \"\"\n    for extension in extensions:\n        extension_strength = extension.count('A') - extension.count('a')\n        if extension_strength > strongest_strength:\n            strongest_strength = extension_strength\n            strongest_extension = extension\n    return class_name + '.' + strongest_extension\n\n\nprint(Strongest_Extension('my_class', ['AA', 'Be', 'CC']))"
    },
    {
      "rank": 2,
      "score": 10.0,
      "candidate": "strongest_extension = extensions[0]\n    strongest_extension_strength = 0\n    \n    for extension in extensions:\n        extension_strength = extension.count('A') - extension.count('a')\n        if extension_strength > strongest_extension_strength:\n            strongest_extension_strength = extension_strength\n            strongest_extension = extension\n    \n    return class_name + '.' + strongest_extension"
    },
    {
      "rank": 3,
      "score": 10.0,
      "candidate": "class_name = class_name\n    strongest = 0\n    strongest_name = ''\n    for extension in extensions:\n        cap = 0\n        sm = 0\n        for ch in extension:\n            if ch.isupper():\n                cap += 1\n            if ch.islower():\n                sm += 1\n        if cap - sm > strongest:\n            strongest = cap - sm\n            strongest_name = extension\n    return class_name + '.' + strongest_name"
    },
    {
      "rank": 4,
      "score": 10.0,
      "candidate": "import string\n    class_name = class_name + \".\"\n    strength_extension = {}\n    for extension in extensions:\n        strength = extension.count(string.ascii_uppercase) - extension.count(string.ascii_lowercase)\n        strength_extension[extension] = strength\n    strongest_extension = max(strength_extension, key = strength_extension.get)\n    return class_name + strongest_extension\n\nprint(Strongest_Extension('my_class', ['AA', 'Be', 'CC']))"
    },
    {
      "rank": 5,
      "score": 10.0,
      "candidate": "max_strength = -1\n    strongest_extension = \"\"\n    for extension in extensions:\n        CAP_count = 0\n        SM_count = 0\n        for letter in extension:\n            if letter.isupper():\n                CAP_count += 1\n            elif letter.islower():\n                SM_count += 1\n        extension_strength = CAP_count - SM_count\n        if extension_strength > max_strength:\n            max_strength = extension_strength\n            strongest_extension = extension\n    return \"{}.{}\".format(class_name, strongest_extension)\n\n\n# print(Strongest_Extension('my_class', ['AA', 'Be', 'CC']))\n# print(Strongest_Extension('my_class', ['AA', 'Be', 'CC', 'DD']))\n# print(Strongest_Extension('my_class', ['AA', 'Be', 'CC', 'DD', 'EE']))\n# print(Strongest_Extension('my_class', ['AA', 'Be', 'CC', 'DD', 'EE', 'FF']))\n# print(Strongest_Extension('my_class', ['AA', 'Be', 'CC', 'DD', 'EE', 'FF', 'GG']))\n# print(Strongest_Extension('my_class', ['AA', 'Be', 'CC', 'DD', 'EE', 'FF', 'GG', 'HH']))\n# print(Strongest_Extension('my_class', ['AA', 'Be', 'CC', 'DD', 'EE', 'FF', 'GG', 'HH', 'II']))\n# print(Strongest_Extension('my_class', ['AA', 'Be', 'CC', 'DD', 'EE', 'FF', 'GG', 'HH', 'II', 'J']))\n# print(Strongest_Extension('my_class', ['AA', 'Be', 'CC', 'DD', 'EE', 'FF', 'GG', 'HH', 'II', 'J', 'K']))\n# print(Strongest_Extension('my_class', ['AA', 'Be', 'CC', 'DD', 'EE', 'FF', 'GG', 'HH', 'II', 'J', 'K', 'L']))"
    },
    {
      "rank": 6,
      "score": 10.0,
      "candidate": "strongest_ext = ''\n    max_strength = 0\n    for ext in extensions:\n        CAP = 0\n        SM = 0\n        for letter in ext:\n            if letter.isupper():\n                CAP += 1\n            elif letter.islower():\n                SM += 1\n        if CAP - SM > max_strength:\n            strongest_ext = ext\n            max_strength = CAP - SM\n    return class_name + '.' + strongest_ext\n\n\nprint(Strongest_Extension('my_class', ['AA', 'Be', 'CC']))\nprint(Strongest_Extension('my_class', ['AA', 'Be', 'CC', 'DD']))\nprint(Strongest_Extension('my_class', ['AA', 'Be', 'CC', 'DD', 'EE']))\nprint(Strongest_Extension('my_class', ['AA', 'Be', 'CC', 'DD', 'EE', 'FF']))\nprint(Strongest_Extension('my_class', ['AA', 'Be', 'CC', 'DD', 'EE', 'FF', 'GG']))\nprint(Strongest_Extension('my_class', ['AA', 'Be', 'CC', 'DD', 'EE', 'FF', 'GG', 'HH']))\nprint(Strongest_Extension('my_class', ['AA', 'Be', 'CC', 'DD', 'EE', 'FF', 'GG', 'HH', 'II']))\nprint(Strongest_Extension('my_class', ['AA', 'Be', 'CC', 'DD', 'EE', 'FF', 'GG', 'HH', 'II', 'J']))\nprint(Strongest_Extension('my_class', ['AA', 'Be', 'CC', 'DD', 'EE', 'FF', 'GG', 'HH', 'II', 'J', 'K']))\nprint(Strongest_Extension('my_class', ['AA', 'Be', 'CC', 'DD', 'EE', 'FF', 'GG', 'HH', 'II', 'J', 'K', 'L']))"
    },
    {
      "rank": 7,
      "score": 10.0,
      "candidate": "strongest = extensions[0]\n    for extension in extensions:\n        if Strength(extension) > Strength(strongest):\n            strongest = extension\n    return class_name + '.' + strongest\n\ndef Strength(extension):\n    cap = 0\n    sm = 0\n    for c in extension:\n        if c.isupper():\n            cap += 1\n        elif c.islower():\n            sm += 1\n    return cap - sm\n\n\ndef Strongest_Extension(class_name, extensions):\n    return class_name + '.' + max(extensions, key=Strength)\n\ndef Strength(extension):\n    return sum(1 if c.isupper() else -1 for c in extension)\n\n\ndef Strongest_Extension(class_name, extensions):\n    return class_name + '.' + max(extensions, key=Strength)\n\ndef Strength(extension):\n    return sum(1 if c.isupper() else -1 for c in extension)\n\n\ndef Strongest_Extension(class_name, extensions):\n    return class_name + '.' + max(extensions, key=Strength)\n\ndef Strength(extension):\n    return sum(1 if c.isupper() else -1 for c in extension)"
    },
    {
      "rank": 8,
      "score": 10.0,
      "candidate": "strongest = 0\n    strongest_extension = None\n    for extension in extensions:\n        cap = 0\n        sm = 0\n        for letter in extension:\n            if letter.isupper():\n                cap += 1\n            else:\n                sm += 1\n        if cap - sm > strongest:\n            strongest = cap - sm\n            strongest_extension = extension\n    return f'{class_name}.{strongest_extension}'\n\n\nprint(Strongest_Extension('my_class', ['AA', 'Be', 'CC']))\nprint(Strongest_Extension('my_class', ['AA', 'Be', 'CC', 'DD']))\nprint(Strongest_Extension('my_class', ['AA', 'AAA', 'AAAB', 'AAAC']))\nprint(Strongest_Extension('my_class', ['AA', 'AAA', 'AAAB', 'AAAC', 'AAAD']))\nprint(Strongest_Extension('my_class', ['AA', 'AAA', 'AAAB', 'AAAC', 'AAAD', 'AAEE']))\nprint(Strongest_Extension('my_class', ['AA', 'AAA', 'AAAB', 'AAAC', 'AAAD', 'AAEE', 'AAAAC']))\nprint(Strongest_Extension('my_class', ['AA', 'AAA', 'AAAB', 'AAAC', 'AAAD', 'AAEE', 'AAAAC', 'BBB']))\nprint(Strongest_Extension('my_class', ['AA', 'AAA', 'AAAB', 'AAAC', 'AAAD', 'AAEE', 'AAAAC', 'BBB', 'CCC']))\nprint(Strongest_Extension('my_class', ['AA', 'AAA', 'AAAB', 'AAAC', 'AAAD', 'AAEE', 'AAAAC', 'BBB', 'CCC', 'DDD']))"
    },
    {
      "rank": 9,
      "score": 10.0,
      "candidate": "strongest_extension = extensions[0]\n    strongest_extension_strength = Strength(extensions[0])\n    for extension in extensions:\n        strength = Strength(extension)\n        if strength > strongest_extension_strength:\n            strongest_extension = extension\n            strongest_extension_strength = strength\n    return class_name + \".\" + strongest_extension\n\ndef Strength(extension):\n    return len(extension) - len(extension.lower())"
    },
    {
      "rank": 10,
      "score": 10.0,
      "candidate": "strongest_extension_name = ''\n    strongest_extension_strength = -1\n    for extension in extensions:\n        extension_strength = extension.count('A') - extension.count('a')\n        if extension_strength > strongest_extension_strength:\n            strongest_extension_name = extension\n            strongest_extension_strength = extension_strength\n    return class_name + '.' + strongest_extension_name\n\n\nif __name__ == '__main__':\n    print(\"Example:\")\n    print(Strongest_Extension('my_class', ['AA', 'Be', 'CC']))\n\n    # These \"asserts\" are used for self-checking and not for an auto-testing\n    assert Strongest_Extension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n    assert Strongest_Extension('my_class', ['AAA', 'Be', 'CCC']) == 'my_class.AAA'\n    assert Strongest_Extension('my_class', ['BA', 'Be', 'CC']) == 'my_class.BA'\n    assert Strongest_Extension('my_class', ['AA', 'foo', 'CC']) == 'my_class.AA'\n    assert Strongest_Extension('my_class', ['AA', 'foo1', 'foo2']) == 'my_class.foo1'\n    assert Strongest_Extension('my_class', ['', 'foo']) == 'my_class.foo'\n    print(\"Coding complete? Click 'Check' to earn cool rewards!\")"
    },
    {
      "rank": 11,
      "score": 10.0,
      "candidate": "strongest = extensions[0]\n    strength = -1\n    for ext in extensions:\n        ext_strength = len(list(filter(str.isupper, ext))) - len(list(filter(str.islower, ext)))\n        if ext_strength > strength:\n            strength = ext_strength\n            strongest = ext\n    return f\"{class_name}.{strongest}\""
    },
    {
      "rank": 12,
      "score": 10.0,
      "candidate": "pass"
    },
    {
      "rank": 13,
      "score": 10.0,
      "candidate": "strongest_extension = ''\n    max_strength = -1\n    for extension in extensions:\n        extension_name = extension.lower()\n        strength = extension_name.count('a') - extension_name.count('b')\n        if strength > max_strength:\n            max_strength = strength\n            strongest_extension = extension\n    return f'{class_name}.{strongest_extension}'\n\nprint(Strongest_Extension('my_class', ['AA', 'Be', 'CC']))\nprint(Strongest_Extension('my_class', ['AA', 'Be', 'CC', 'aa']))\nprint(Strongest_Extension('my_class', ['AA', 'AA', 'AA', 'AA']))\nprint(Strongest_Extension('my_class', ['aa', 'aa', 'aa', 'aa']))\nprint(Strongest_Extension('my_class', ['Aa', 'aA', 'aa', 'AA']))\nprint(Strongest_Extension('my_class', ['aA', 'aA', 'aa', 'AA']))\nprint(Strongest_Extension('my_class', ['Aa', 'aA', 'AA', 'aa']))\nprint(Strongest_Extension('my_class', ['aa', 'aA', 'aa', 'AA']))"
    },
    {
      "rank": 14,
      "score": 10.0,
      "candidate": "strongest_extension = extensions[0]\n    strength = 0\n    for extension in extensions:\n        cap = sum(1 for letter in extension if letter.isupper())\n        sm = sum(1 for letter in extension if letter.islower())\n        if cap - sm > strength:\n            strength = cap - sm\n            strongest_extension = extension\n    return class_name + '.' + strongest_extension"
    },
    {
      "rank": 15,
      "score": 9.990685229831412,
      "candidate": "strongest = []\n    for ext in extensions:\n        cap = sum(c.isupper() for c in ext)\n        sm = sum(c.islower() for c in ext)\n        strongest.append([ext, cap-sm])\n    strongest.sort(key=lambda x: x[1], reverse=True)\n    return class_name + '.' + strongest[0][0]"
    },
    {
      "rank": 16,
      "score": 9.964051281695491,
      "candidate": "def get_extension_strength(ext):\n        cap = 0\n        sm = 0\n        for c in ext:\n            if c.isupper():\n                cap += 1\n            elif c.islower():\n                sm += 1\n        return cap - sm\n    \n    strongest_ext = extensions[0]\n    strength = get_extension_strength(extensions[0])\n    for ext in extensions[1:]:\n        ext_strength = get_extension_strength(ext)\n        if ext_strength > strength:\n            strongest_ext = ext\n            strength = ext_strength\n    \n    return f'{class_name}.{strongest_ext}'\n\nprint(Strongest_Extension('my_class', ['AA', 'Be', 'CC']))\nprint(Strongest_Extension('my_class', ['AA', 'Be', 'CC', 'dd']))\nprint(Strongest_Extension('my_class', ['AA', 'Be', 'CC', 'dd', 'ee']))\nprint(Strongest_Extension('my_class', ['AA', 'Be', 'CC', 'dd', 'ee', 'FF']))\nprint(Strongest_Extension('my_class', ['AA', 'Be', 'CC', 'dd', 'ee', 'FF', 'GG']))\nprint(Strongest_Extension('my_class', ['AA', 'Be', 'CC', 'dd', 'ee', 'FF', 'GG', 'Hh']))\nprint(Strongest_Extension('my_class', ['AA', 'Be', 'CC', 'dd', 'ee', 'FF', 'GG', 'Hh', 'ii']))\nprint(Strongest_Extension('my_class', ['AA', 'Be', 'CC', 'dd', 'ee', 'FF', 'GG', 'Hh', 'ii', 'Jj']))\nprint(Strongest_Extension('my_class', ['AA', 'Be', 'CC', 'dd', 'ee', 'FF', 'GG', 'Hh', 'ii', 'Jj', 'Kk']))"
    },
    {
      "rank": 17,
      "score": 9.951728666067407,
      "candidate": "# Your code here\n    strength_dict = {}\n    for ext in extensions:\n        strength_dict[ext] = ext.count('A') - ext.count('a')\n    strongest_extension = sorted(strength_dict.items(), key=lambda x: x[1], reverse=True)[0]\n    return f'{class_name}.{strongest_extension[0]}'\n\n\nprint(Strongest_Extension('my_class', ['AA', 'Be', 'CC']))"
    },
    {
      "rank": 18,
      "score": 9.939007345322462,
      "candidate": "strongest_extension_name = extensions[0]\n    strongest_extension_strength = 0\n    for extension in extensions:\n        extension_strength = len(extension) - extension.lower().count('a')\n        if extension_strength > strongest_extension_strength:\n            strongest_extension_strength = extension_strength\n            strongest_extension_name = extension\n    return class_name + '.' + strongest_extension_name\n\n\nprint(Strongest_Extension('my_class', ['AA', 'Be', 'CC']))\nprint(Strongest_Extension('my_class', ['AA', 'Be', 'CC', 'DD']))\nprint(Strongest_Extension('my_class', ['AA', 'Be', 'CC', 'DD', 'EE']))\nprint(Strongest_Extension('my_class', ['AA', 'Be', 'CC', 'DD', 'EE', 'FF']))\nprint(Strongest_Extension('my_class', ['AA', 'Be', 'CC', 'DD', 'EE', 'FF', 'GG']))\nprint(Strongest_Extension('my_class', ['AA', 'Be', 'CC', 'DD', 'EE', 'FF', 'GG', 'HH']))\nprint(Strongest_Extension('my_class', ['AA', 'Be', 'CC', 'DD', 'EE', 'FF', 'GG', 'HH', 'II']))\nprint(Strongest_Extension('my_class', ['AA', 'Be', 'CC', 'DD', 'EE', 'FF', 'GG', 'HH', 'II', 'J']))"
    },
    {
      "rank": 19,
      "score": 9.899878607091757,
      "candidate": "# your code here\n    Strongest = 0\n    Strongest_name = \"\"\n    for extension in extensions:\n        CAP = 0\n        SM = 0\n        for letter in extension:\n            if letter.isupper():\n                CAP += 1\n            if letter.islower():\n                SM += 1\n        if Strongest < CAP - SM:\n            Strongest = CAP - SM\n            Strongest_name = extension\n    return class_name + \".\" + Strongest_name"
    },
    {
      "rank": 20,
      "score": 9.880233919550456,
      "candidate": "pass"
    },
    {
      "rank": 21,
      "score": 9.865249743248851,
      "candidate": "return class_name + \".\" + sorted(extensions, key=lambda x: x.upper().count(\"A\") - x.upper().count(\"a\"))[0]\n\nif __name__ == '__main__':\n    print(\"Example:\")\n    print(Strongest_Extension('my_class', ['AA', 'Be', 'CC']))\n    # These \"asserts\" are used for self-checking and not for an auto-testing\n    assert Strongest_Extension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n    assert Strongest_Extension('my_class', ['CA', 'Be', 'CC']) == 'my_class.CA'\n    assert Strongest_Extension('my_class', ['AA', 'Be', 'Cc']) == 'my_class.Cc'\n    assert Strongest_Extension('my_class', ['aa', 'be', 'cc']) == 'my_class.aa'\n    assert Strongest_Extension('my_class', ['', 'Be', 'CC']) == 'my_class.Be'\n    assert Strongest_Extension('my_class', ['AA', 'be', '']) == 'my_class.AA'\n    print(\"Coding complete? Click 'Check' to earn cool rewards!\")"
    },
    {
      "rank": 22,
      "score": 9.86226234702057,
      "candidate": "highest_strength = 0\n    strongest_extension = ''\n    for extension in extensions:\n        strength = extension.count('A') - extension.count('a')\n        if strength > highest_strength:\n            highest_strength = strength\n            strongest_extension = extension\n    return '{}.{}'.format(class_name, strongest_extension)\n\n\nif __name__ == '__main__':\n    print(\"Example:\")\n    print(Strongest_Extension('my_class', ['AA', 'Be', 'CC']))\n\n    # These \"asserts\" are used for self-checking and not for an auto-testing\n    assert Strongest_Extension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n    assert Strongest_Extension('my_class', ['BA', 'Foo', 'bAaz', 'c']) == 'my_class.bAaz'\n    assert Strongest_Extension('my_class', ['Foo', 'Bar', 'baz', 'aaa', 'BB']) == 'my_class.Foo'\n    print(\"Coding complete? Click 'Check' to earn cool rewards!\")"
    },
    {
      "rank": 23,
      "score": 9.84383394062111,
      "candidate": "# Your code here\n    strongest_extension = extensions[0]\n    strength = 0\n    for extension in extensions:\n        if extension.isupper():\n            cap = len(extension)\n        else:\n            cap = 0\n        if extension.islower():\n            sm = len(extension)\n        else:\n            sm = 0\n        if (cap - sm) > strength:\n            strength = cap - sm\n            strongest_extension = extension\n    return class_name + \".\" + strongest_extension"
    },
    {
      "rank": 24,
      "score": 9.724995158471465,
      "candidate": "strongest_extension = ''\n    strength = 0\n    for extension in extensions:\n        cap_count = 0\n        sm_count = 0\n        for char in extension:\n            if char.isupper():\n                cap_count += 1\n            if char.islower():\n                sm_count += 1\n        current_strength = cap_count - sm_count\n        if current_strength > strength:\n            strength = current_strength\n            strongest_extension = extension\n    return class_name + '.' + strongest_extension"
    },
    {
      "rank": 25,
      "score": 9.712352906758433,
      "candidate": "# your code here\n    strongest = 0\n    strongest_name = \"\"\n    for ext in extensions:\n        cap = 0\n        sm = 0\n        for letter in ext:\n            if letter.isupper():\n                cap += 1\n            if letter.islower():\n                sm += 1\n        strength = cap - sm\n        if strength > strongest:\n            strongest = strength\n            strongest_name = ext\n    return class_name + \".\" + strongest_name\n\nprint(Strongest_Extension('my_class', ['AA', 'Be', 'CC']))\nprint(Strongest_Extension('my_class', ['AA', 'Be', 'CC', 'DD']))\nprint(Strongest_Extension('my_class', ['AA', 'Be', 'CC', 'DD', 'EE']))\nprint(Strongest_Extension('my_class', ['AA', 'Be', 'CC', 'DD', 'EE', 'FF']))\nprint(Strongest_Extension('my_class', ['AA', 'Be', 'CC', 'DD', 'EE', 'FF', 'GG']))\nprint(Strongest_Extension('my_class', ['AA', 'Be', 'CC', 'DD', 'EE', 'FF', 'GG', 'HH']))\nprint(Strongest_Extension('my_class', ['AA', 'Be', 'CC', 'DD', 'EE', 'FF', 'GG', 'HH', 'II']))\nprint(Strongest_Extension('my_class', ['AA', 'Be', 'CC', 'DD', 'EE', 'FF', 'GG', 'HH', 'II', 'J']))"
    },
    {
      "rank": 26,
      "score": 9.688986277739026,
      "candidate": "strengths = {}\n    strongest_extension = ''\n    for extension in extensions:\n        extension_strength = extension.upper().count('A') - extension.lower().count('a')\n        if extension_strength not in strengths:\n            strengths[extension_strength] = extension\n        elif extension_strength in strengths:\n            if extension < strengths[extension_strength]:\n                strengths[extension_strength] = extension\n    strongest_extension = class_name + '.' + strengths[max(strengths)]\n    return strongest_extension\n\n\nprint(Strongest_Extension('my_class', ['AA', 'Be', 'CC']))\nprint(Strongest_Extension('my_class', ['AA', 'Be', 'CC', 'dd']))\nprint(Strongest_Extension('my_class', ['AA', 'Be', 'CC', 'dd', 'EE', 'ff', 'gg']))\nprint(Strongest_Extension('my_class', ['AA', 'Be', 'CC', 'dd', 'EE', 'ff', 'gg', 'hh']))"
    },
    {
      "rank": 27,
      "score": 9.074219027177483,
      "candidate": "strength = 0\n    name = ''\n    for ext in extensions:\n        cap = 0\n        sm = 0\n        for ch in ext:\n            if ch.isupper():\n                cap += 1\n            elif ch.islower():\n                sm += 1\n        if cap - sm > strength:\n            strength = cap - sm\n            name = ext\n    return class_name + '.' + name\n\nif __name__ == '__main__':\n    #These \"asserts\" using only for self-checking and not necessary for auto-testing\n    assert Strongest_Extension(\"MyClass\", [\"a\", \"b\", \"C\"]) == \"MyClass.C\", \"MyClass.C\"\n    assert Strongest_Extension(\"MyClass\", [\"a\", \"BC\", \"C\"]) == \"MyClass.BC\", \"MyClass.BC\"\n    assert Strongest_Extension(\"Class\", [\"my\", \"name\", \"is\", \"Class\"]) == \"Class.Class\", \"Class.Class\"\n    assert Strongest_Extension(\"Class\", [\"my\", \"name\", \"is\", \"class\"]) == \"Class.class\", \"Class.class\"\n    assert Strongest_Extension(\"Class\", [\"class\", \"is\", \"class\", \"class\"]) == \"Class.class\", \"Class.class\"\n    print('Done')"
    },
    {
      "rank": 28,
      "score": 8.976423287421207,
      "candidate": "# Your code here\n    strengths = {}\n    for extension in extensions:\n        strengths[extension] = extension.count('A') - extension.count('a')\n    return class_name + '.' + max(strengths, key=strengths.get)\n\n\nprint(Strongest_Extension('my_class', ['AA', 'Be', 'CC']))"
    },
    {
      "rank": 29,
      "score": 8.967376877042874,
      "candidate": "strengths = {}\n    for extension in extensions:\n        strength = extension.count('A') - extension.count('a')\n        if strength not in strengths:\n            strengths[strength] = extension\n        elif strength in strengths and extension < strengths[strength]:\n            strengths[strength] = extension\n    return class_name + '.' + strengths[max(strengths.keys())]\n\n\nprint(Strongest_Extension('my_class', ['AA', 'Be', 'CC']))"
    },
    {
      "rank": 30,
      "score": 8.942765025877772,
      "candidate": "strongest = [extensions[0]]\n    strength = 0\n    for extension in extensions[1:]:\n        cap_count = 0\n        sm_count = 0\n        for letter in extension:\n            if letter.isupper():\n                cap_count += 1\n            elif letter.islower():\n                sm_count += 1\n        if cap_count - sm_count > strength:\n            strongest = [extension]\n            strength = cap_count - sm_count\n        elif cap_count - sm_count == strength:\n            strongest.append(extension)\n    return '{}.{}'.format(class_name, strongest[0])"
    },
    {
      "rank": 31,
      "score": 8.785645629727734,
      "candidate": "highest = 0\n    extension = ''\n    for i in extensions:\n        num_upper = 0\n        num_lower = 0\n        for j in i:\n            if j.isupper():\n                num_upper += 1\n            if j.islower():\n                num_lower += 1\n        if (num_upper - num_lower) > highest:\n            highest = num_upper - num_lower\n            extension = i\n    return class_name + '.' + extension\n\nprint(Strongest_Extension('my_class', ['AA', 'Be', 'CC']))"
    },
    {
      "rank": 32,
      "score": 8.75568116446315,
      "candidate": "strongest = extensions[0]\n    strength = 0\n    for extension in extensions:\n        cap = 0\n        sm = 0\n        for char in extension:\n            if char.isupper():\n                cap += 1\n            elif char.islower():\n                sm += 1\n        if cap - sm > strength:\n            strength = cap - sm\n            strongest = extension\n    return class_name + '.' + strongest\n\nprint(Strongest_Extension('my_class', ['AA', 'Be', 'CC']))"
    },
    {
      "rank": 33,
      "score": 8.705372252356433,
      "candidate": "upper = 0\n    lower = 0\n    max_value = 0\n    max_index = 0\n    for index, item in enumerate(extensions):\n        for letter in item:\n            if letter.isupper():\n                upper += 1\n            elif letter.islower():\n                lower += 1\n        if (upper - lower) > max_value:\n            max_value = upper - lower\n            max_index = index\n        upper = 0\n        lower = 0\n    return class_name + \".\" + extensions[max_index]\n\n\nprint(Strongest_Extension('Slices', ['SErviNGSliCes', 'Cheese', 'StuFfed']))\nprint(Strongest_Extension('my_class', ['AA', 'Be', 'CC']))"
    },
    {
      "rank": 34,
      "score": 8.561274662897722,
      "candidate": "max_diff = -1\n    strongest_extension = \"\"\n    for extension in extensions:\n        cap_count = 0\n        sm_count = 0\n        for letter in extension:\n            if letter.isupper():\n                cap_count += 1\n            elif letter.islower():\n                sm_count += 1\n        diff = cap_count - sm_count\n        if diff > max_diff:\n            max_diff = diff\n            strongest_extension = extension\n    return f\"{class_name}.{strongest_extension}\"\n\nprint(Strongest_Extension('my_class', ['AA', 'Be', 'CC']))\nprint(Strongest_Extension('my_class', ['AA', 'Be', 'CC', 'DD']))\nprint(Strongest_Extension('my_class', ['AA', 'aA', 'aa']))\nprint(Strongest_Extension('my_class', ['AA', 'Be', 'CC', 'DD', 'ee', 'FF', 'gg', 'HH']))\nprint(Strongest_Extension('my_class', ['AA', 'aA', 'aa', 'BB', 'bB', 'bb', 'CC', 'cc', 'DD', 'dd', 'EE', 'ee', 'FF', 'ff', 'GG', 'gg', 'HH', 'hh']))"
    },
    {
      "rank": 35,
      "score": 8.551288537526839,
      "candidate": "strongest_extension_name = ''\n    strongest_extension_strength = 0\n    \n    for extension in extensions:\n        strength = abs(len(extension) - len(extension.lower()))\n        if strength > strongest_extension_strength:\n            strongest_extension_strength = strength\n            strongest_extension_name = extension\n    \n    return f'{class_name}.{strongest_extension_name}'"
    },
    {
      "rank": 36,
      "score": 8.5451253386464,
      "candidate": "return class_name + '.' + sorted(extensions, key = lambda x: (x.upper().count('A'), x.lower().count('a')))[-1]\n\n\n\n\nprint(Strongest_Extension('Slices', ['SErviNGSliCes', 'Cheese', 'StuFfed']))\nprint(Strongest_Extension('my_class', ['AA', 'Be', 'CC']))"
    },
    {
      "rank": 37,
      "score": 8.4821581249458,
      "candidate": "# your code here\n    if len(extensions) == 0:\n        return class_name\n    \n    strongest = extensions[0]\n    strength = 0\n    for ext in extensions:\n        cap = 0\n        sm = 0\n        for i in range(len(ext)):\n            if ext[i].isupper():\n                cap += 1\n            if ext[i].islower():\n                sm += 1\n        if strength < cap - sm:\n            strength = cap - sm\n            strongest = ext\n    return class_name + '.' + strongest\n\nprint(Strongest_Extension('my_class', ['AA', 'Be', 'CC']))\nprint(Strongest_Extension('my_class', ['AA', 'Be', 'CC', 'Slice']))\nprint(Strongest_Extension('my_class', ['AA', 'Be', 'CC', 'Slice', 'SErviNGSliCes']))\nprint(Strongest_Extension('my_class', ['AA', 'Be', 'CC', 'Slice', 'SErviNGSliCes', 'Cheese', 'StuFfed']))"
    },
    {
      "rank": 38,
      "score": 8.477450811222779,
      "candidate": "strongest_extension = extensions[0]\n    strength = -1\n    for extension in extensions:\n        cap = 0\n        sm = 0\n        for letter in extension:\n            if letter.isupper():\n                cap += 1\n            elif letter.islower():\n                sm += 1\n        if cap - sm > strength:\n            strength = cap - sm\n            strongest_extension = extension\n    return class_name + '.' + strongest_extension"
    },
    {
      "rank": 39,
      "score": 8.475643108466516,
      "candidate": "strongest = extensions[0]\n    strength = -1\n    for extension in extensions:\n        cap = 0\n        sm = 0\n        for c in extension:\n            if c.isupper():\n                cap += 1\n            elif c.islower():\n                sm += 1\n        if cap - sm > strength:\n            strongest = extension\n            strength = cap - sm\n    return class_name + '.' + strongest"
    },
    {
      "rank": 40,
      "score": 8.467404034038339,
      "candidate": "def strength(ext):\n        return len([c for c in ext if c.isupper()]) - len([c for c in ext if c.islower()])\n\n    return class_name + '.' + sorted(extensions, key=strength, reverse=True)[0]\n\n\nprint(Strongest_Extension('my_class', ['AA', 'Be', 'CC']))"
    },
    {
      "rank": 41,
      "score": 8.439855388033546,
      "candidate": "strongest_extension = extensions[0]\n    strength = 0\n\n    for extension in extensions:\n        cap = 0\n        sm = 0\n\n        for letter in extension:\n            if letter.isupper():\n                cap += 1\n            elif letter.islower():\n                sm += 1\n\n        if cap - sm > strength:\n            strength = cap - sm\n            strongest_extension = extension\n\n    return class_name + '.' + strongest_extension\n\nprint(Strongest_Extension('my_class', ['AA', 'Be', 'CC']))\n\n\n# =============================================================================\n# The function will return the strongest extension from the list of extensions.\n# =============================================================================\n\n# def Strongest_Extension(class_name, extensions):\n#     \"\"\"You will be given the name of a class (a string) and a list of extensions.\n#     The extensions are to be used to load additional classes to the class. The\n#     strength of the extension is as follows: Let CAP be the number of the uppercase\n#     letters in the extension's name, and let SM be the number of lowercase letters \n#     in the extension's name, the strength is given by the fraction CAP - SM. \n#     You should find the strongest extension and return a string in this \n#     format: ClassName.StrongestExtensionName.\n#     If there are two or more extensions with the same strength, you should\n#     choose the one that comes first in the list.\n#     For example, if you are given \"Slices\" as the class and a list of the\n#     extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n#     return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n#     (its strength is -1).\n#     Example:\n#     for Strongest_Extension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n#     \"\"\"\n\n#     strongest_extension = extensions[0]\n#     strength = 0"
    },
    {
      "rank": 42,
      "score": 8.419961003107131,
      "candidate": "# your code here\n    strongest_strength = -1\n    strongest_extension = None\n    for extension in extensions:\n        strength = extension.upper().count('A') - extension.lower().count('a')\n        if strength > strongest_strength:\n            strongest_strength = strength\n            strongest_extension = extension\n    return f\"{class_name}.{strongest_extension}\"\n\n\nprint(Strongest_Extension('my_class', ['AA', 'Be', 'CC']))\nprint(Strongest_Extension('my_class', ['AA', 'Be', 'CC', 'DD']))\nprint(Strongest_Extension('my_class', ['AA', 'Be', 'CC', 'SeRvInGsLiCes']))\nprint(Strongest_Extension('my_class', ['AA', 'Be', 'CC', 'SeRvInGsLiCes', 'CHEESE']))\nprint(Strongest_Extension('my_class', ['AA', 'Be', 'CC', 'SeRvInGsLiCes', 'CHEESE', 'stuFfEd']))"
    },
    {
      "rank": 43,
      "score": 8.405124028432443,
      "candidate": "strongest_extension = extensions[0]\n    for extension in extensions:\n        extension_strength = extension.count('A') - extension.count('a')\n        if extension_strength > strongest_extension.count('A') - strongest_extension.count('a'):\n            strongest_extension = extension\n    return '{}.{}'.format(class_name, strongest_extension)"
    },
    {
      "rank": 44,
      "score": 8.36975600257969,
      "candidate": "max_strength = -1\n    strongest_extension = ''\n    for ext in extensions:\n        strength = ext.count('A') - ext.count('a')\n        if strength > max_strength:\n            max_strength = strength\n            strongest_extension = ext\n    return class_name + '.' + strongest_extension"
    },
    {
      "rank": 45,
      "score": 8.345268569514731,
      "candidate": "strongest_extension = None\n    strength = -1\n    for extension in extensions:\n        extension_strength = (len(list(filter(str.isupper, extension))) - len(list(filter(str.islower, extension))))\n        if extension_strength > strength:\n            strongest_extension = extension\n            strength = extension_strength\n    return \"{}.{}\".format(class_name, strongest_extension)"
    },
    {
      "rank": 46,
      "score": 8.342069187944086,
      "candidate": "class_name_extension = ''\n    for extension in extensions:\n        uppercase = 0\n        lowercase = 0\n        for i in extension:\n            if i.isupper():\n                uppercase += 1\n            elif i.islower():\n                lowercase += 1\n        if class_name_extension == '':\n            class_name_extension = extension\n            continue\n        if uppercase - lowercase > uppercase - lowercase:\n            class_name_extension = extension\n    return f'{class_name}.{class_name_extension}'\n\n\nprint(Strongest_Extension('my_class', ['AA', 'Be', 'CC']))"
    },
    {
      "rank": 47,
      "score": 8.333039314601203,
      "candidate": "strengths = {}\n    for extension in extensions:\n        extension_cap = 0\n        extension_sm = 0\n        for c in extension:\n            if c.isupper():\n                extension_cap += 1\n            if c.islower():\n                extension_sm += 1\n        strengths[extension] = extension_cap - extension_sm\n    \n    strongest_extension = max(strengths, key=strengths.get)\n    return class_name + '.' + strongest_extension"
    },
    {
      "rank": 48,
      "score": 8.286882428888207,
      "candidate": "import string\n    class_name = class_name + \".\"\n    strongest = []\n    for extension in extensions:\n        cap = 0\n        sm = 0\n        for letter in extension:\n            if letter in string.ascii_uppercase:\n                cap += 1\n            elif letter in string.ascii_lowercase:\n                sm += 1\n        strongest.append((cap-sm, extension))\n    strongest.sort(key = lambda x:x[0])\n    return class_name + strongest[0][1]\n\nprint(Strongest_Extension('Slices', ['SErviNGSliCes', 'Cheese', 'StuFfed']))"
    },
    {
      "rank": 49,
      "score": 8.284823153226561,
      "candidate": "def strong(ext):\n        return ext.count('A') - ext.count('a')\n    \n    return '{}.{}'.format(class_name, sorted(extensions, key=strong)[-1])\n\nprint(Strongest_Extension('my_class', ['AA', 'Be', 'CC']))"
    },
    {
      "rank": 50,
      "score": 8.281525203577045,
      "candidate": "strongest = 0\n    strongest_extension = ''\n    for extension in extensions:\n        letters = list(extension)\n        letters_upper = [x for x in letters if x.isupper()]\n        letters_lower = [x for x in letters if x.islower()]\n        strength = len(letters_upper) - len(letters_lower)\n        if strength > strongest:\n            strongest = strength\n            strongest_extension = extension\n    return class_name + '.' + strongest_extension\n\n\n#  Other ways of doing it:\n\n# def Strongest_Extension(class_name, extensions):\n#     return class_name + '.' + max(extensions, key=lambda x: sum(c.isupper() for c in x) - sum(c.islower() for c in x))\n\n# def Strongest_Extension(class_name, extensions):\n#     return class_name + '.' + max(extensions, key=lambda x: len([c for c in x if c.isupper()]) - len([c for c in x if c.islower()]))"
    },
    {
      "rank": 51,
      "score": 8.273847049625703,
      "candidate": "strongest_extension = extensions[0]\n    strongest_extension_strength = -1\n    for extension in extensions:\n        extension_strength = extension.count('A') - extension.count('a')\n        if extension_strength > strongest_extension_strength:\n            strongest_extension_strength = extension_strength\n            strongest_extension = extension\n        elif extension_strength == strongest_extension_strength:\n            if extension < strongest_extension:\n                strongest_extension = extension\n    return f'{class_name}.{strongest_extension}'\n\n\nprint(Strongest_Extension('my_class', ['AA', 'Be', 'CC']))\nprint(Strongest_Extension('my_class', ['AA', 'Be', 'CC', 'AA']))\nprint(Strongest_Extension('my_class', ['AA', 'aA', 'aa']))"
    },
    {
      "rank": 52,
      "score": 8.259354318105883,
      "candidate": "# your code here\n    strongest = 0\n    strongest_name = \"\"\n    for extension in extensions:\n        upper_count = 0\n        lower_count = 0\n        for letter in extension:\n            if letter.isupper():\n                upper_count += 1\n            elif letter.islower():\n                lower_count += 1\n        if upper_count - lower_count > strongest:\n            strongest = upper_count - lower_count\n            strongest_name = extension\n    return class_name + \".\" + strongest_name\n\nprint(Strongest_Extension('Slices', ['SErviNGSliCes', 'Cheese', 'StuFfed']))"
    },
    {
      "rank": 53,
      "score": 8.23986419628645,
      "candidate": "strengths = {}\n    strongest = 0\n    for extension in extensions:\n        strength = 0\n        for letter in extension:\n            if letter.isupper():\n                strength += 1\n            else:\n                strength -= 1\n        strengths[extension] = strength\n        if strength > strongest:\n            strongest = strength\n    for extension in strengths:\n        if strengths[extension] == strongest:\n            return '{}.{}'.format(class_name, extension)"
    },
    {
      "rank": 54,
      "score": 8.225103727878702,
      "candidate": "# your code here\n    if len(extensions) == 0:\n        return class_name\n    else:\n        strongest_extension = extensions[0]\n        for extension in extensions:\n            if len(extension) == len(extensions[0]):\n                if extension[0] == extensions[0][0]:\n                    if extension[0].isupper() and extension[0].islower():\n                        strongest_extension = extension\n            else:\n                if extension[0].isupper():\n                    CAP = 0\n                    for i in range(len(extension)):\n                        if extension[i].isupper():\n                            CAP += 1\n                    SM = 0\n                    for i in range(len(extension)):\n                        if extension[i].islower():\n                            SM += 1\n                    if (CAP - SM) > (len(strongest_extension) - len(strongest_extension[0])):\n                        strongest_extension = extension\n                elif extension[0].islower():\n                    CAP = 0\n                    for i in range(len(extension)):\n                        if extension[i].isupper():\n                            CAP += 1\n                    SM = 0\n                    for i in range(len(extension)):\n                        if extension[i].islower():\n                            SM += 1\n                    if (CAP - SM) > (len(strongest_extension) - len(strongest_extension[0])):\n                        strongest_extension = extension\n        return class_name + \".\" + strongest_extension\n\n\nprint(Strongest_Extension('my_class', ['AA', 'Be', 'CC']))\nprint(Strongest_Extension('my_class', ['AA', 'Be', 'CC', 'DD']))\nprint(Strongest_Extension('my_class', ['AA', 'Be', 'CC', 'DD', 'EE', 'FF', 'GG', 'HH']))\nprint(Strongest_Extension('my_class', ['AA', 'Be', 'CC', 'DD', 'EE', 'FF', 'GG', 'HH', 'II', 'J']))\nprint(Strongest_Extension('my_class', ['"
    },
    {
      "rank": 55,
      "score": 8.21429096434042,
      "candidate": "strength_dict = {}\n    strongest_extension = ''\n    for extension in extensions:\n        strength = extension.count('A') - extension.count('a')\n        if strength not in strength_dict:\n            strength_dict[strength] = extension\n        elif strength > strength_dict[strength]:\n            strength_dict[strength] = extension\n    for strength in strength_dict:\n        if strength > strength_dict[strongest_extension]:\n            strongest_extension = strength_dict[strength]\n    return class_name + '.' + strongest_extension"
    },
    {
      "rank": 56,
      "score": 8.10008186353074,
      "candidate": "strongest_extension = ''\n    strength = 0\n    for extension in extensions:\n        cap_count = 0\n        small_count = 0\n        for letter in extension:\n            if letter.isupper():\n                cap_count += 1\n            elif letter.islower():\n                small_count += 1\n        if cap_count - small_count > strength:\n            strength = cap_count - small_count\n            strongest_extension = extension\n    return class_name + '.' + strongest_extension\n\n\ndef test_function():\n    assert Strongest_Extension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n    assert Strongest_Extension('class', ['lOwEr_CASE', 'Very_HIGH_CASES']) == 'class.lOwEr_CASE'\n    assert Strongest_Extension('my_class', ['AAA', 'ABc', 'XYZ']) == 'my_class.AAA'\n    assert Strongest_Extension('my_class', ['Be', 'AbC', 'XyZ']) == 'my_class.AbC'\n    assert Strongest_Extension('class', ['lowER_CASE', 'Very_High_Cases', 'aaA']) == 'class.aaA'\n    assert Strongest_Extension('class', ['lowER_CASE', 'Very_High_Cases', 'AAA']) == 'class.lowER_CASE'\n    assert Strongest_Extension('class', ['A', 'b', 'C']) == 'class.A'\n    assert Strongest_Extension('class', ['A', 'b', 'CC']) == 'class.CC'\n\nif __name__ == '__main__':\n    test_function()"
    },
    {
      "rank": 57,
      "score": 8.053106628120862,
      "candidate": "return class_name + '.' + sorted(extensions, key=lambda x: x.lower().count('a') - x.lower().count('b'))[-1]"
    },
    {
      "rank": 58,
      "score": 7.992861187818979,
      "candidate": "# Your code here\n    return class_name + '.' + sorted(extensions, key=lambda x: (x.count('A'), x.count('a')), reverse=True)[0]\n\nprint(Strongest_Extension('my_class', ['AA', 'Be', 'CC']))"
    },
    {
      "rank": 59,
      "score": 7.778156602325321,
      "candidate": "strongest_strength = 0\n    strongest_extension = \"\"\n    for extension in extensions:\n        extension_strength = extension.count('C') - extension.count('c')\n        if extension_strength > strongest_strength:\n            strongest_strength = extension_strength\n            strongest_extension = extension\n    return \"{}.{}\".format(class_name, strongest_extension)\n\nprint(Strongest_Extension('my_class', ['AA', 'Be', 'CC']))"
    },
    {
      "rank": 60,
      "score": 7.553731109053931,
      "candidate": "strongest_extension = ''\n    strength = 0\n    for extension in extensions:\n        cap = len(list(filter(str.isupper, extension)))\n        sm = len(list(filter(str.islower, extension)))\n        if cap - sm > strength:\n            strongest_extension = extension\n            strength = cap - sm\n    return class_name + '.' + strongest_extension\n\n\nprint(Strongest_Extension('my_class', ['AA', 'Be', 'CC']))"
    },
    {
      "rank": 61,
      "score": 3.6316851262029566,
      "candidate": "strongest = ''\n    strength = 0\n    for ext in extensions:\n        cap = 0\n        sm = 0\n        for c in ext:\n            if c.isupper():\n                cap += 1\n            elif c.islower():\n                sm += 1\n        if cap - sm > strength:\n            strength = cap - sm\n            strongest = ext\n    return f'{class_name}.{strongest}'\n\nif __name__ == '__main__':\n    print(\"Example:\")\n    print(Strongest_Extension('my_class', ['AA', 'Be', 'CC']))\n\n    #These \"asserts\" using only for self-checking and not necessary for auto-testing\n    assert Strongest_Extension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA', \"First\"\n    assert Strongest_Extension('Weird', ['A', 'B', 'C']) == 'Weird.C', \"Second\"\n    assert Strongest_Extension('my_class', ['Potato', 'Gumbo', 'Wow']) == 'my_class.Potato', \"Third\"\n    assert Strongest_Extension('S3ri77SliCes', ['S3ri77SliCes', 'Cheese', 'StuFfed']) == 'S3ri77SliCes.S3ri77SliCes', \"Fourth\"\n    print(\"Coding complete? Click 'Check' to earn cool rewards!\")"
    },
    {
      "rank": 62,
      "score": 3.6092119425632103,
      "candidate": "strongest_extension = \"\"\n    strength = 0\n    for extension in extensions:\n        extension_strength = (extension.count(\"A\") + extension.count(\"E\") + extension.count(\"I\") + extension.count(\"O\") + extension.count(\"U\")) - (extension.count(\"a\") + extension.count(\"e\") + extension.count(\"i\") + extension.count(\"o\") + extension.count(\"u\"))\n        if extension_strength > strength:\n            strongest_extension = extension\n            strength = extension_strength\n    return class_name + \".\" + strongest_extension\n\nif __name__ == '__main__':\n    #These \"asserts\" using only for self-checking and not necessary for auto-testing\n    assert Strongest_Extension(\"MyClass\", [\"a\", \"b\", \"c\", \"d\", \"e\"]) == \"MyClass.a\", \"First\"\n    assert Strongest_Extension(\"MyClass\", [\"aA\", \"Be\", \"cC\", \"dD\", \"eE\"]) == \"MyClass.aA\", \"Second\"\n    assert Strongest_Extension(\"CLASS\", [\"ABC\", \"ARRAY\", \"aar\", \"aasss\", \"case\"]) == \"CLASS.ABC\", \"Third\"\n    print(\"Coding complete? Click 'Check' to review your tests and earn cool rewards!\")"
    },
    {
      "rank": 63,
      "score": 3.5911576178966067,
      "candidate": "class_name = class_name + '.'\n    extensions = sorted(extensions, key=lambda x: abs(len(x) - len([c for c in x if c.isupper()]) - len([c for c in x if c.islower()])), reverse=True)\n    return class_name + extensions[0]\n\nif __name__ == '__main__':\n    #These \"asserts\" using only for self-checking and not necessary for auto-testing\n    assert Strongest_Extension(\"my_class\", [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"]) == \"my_class.SErviNGSliCes\", \"Strength 1\"\n    assert Strongest_Extension(\"Information\", [\"A\", \"B\", \"C\"]) == \"Information.A\", \"Strength 2\"\n    assert Strongest_Extension(\"Z\", [\"A\", \"B\", \"C\"]) == \"Z.A\", \"Strength 3\"\n    assert Strongest_Extension(\"Int\", [\"Ab\", \"Ba\", \"AbaBa\"]) == \"Int.Ab\", \"Strength 4\"\n    assert Strongest_Extension(\"Z\", [\"Aa\", \"Bb\", \"Cc\"]) == \"Z.Aa\", \"Strength 5\"\n    print(\"Coding complete? Click 'Check' to review your tests and earn cool rewards!\")"
    },
    {
      "rank": 64,
      "score": 3.4123998089983805,
      "candidate": "# return '{}.{}'.format(class_name, sorted(extensions, key=lambda x: (x.upper().count('A'), x.lower().count('a')))[-1])\n    return '{}.{}'.format(class_name, max(extensions, key=lambda x: (x.upper().count('A'), x.lower().count('a'))) )\n\n\nif __name__ == '__main__':\n    print(\"Example:\")\n    print(Strongest_Extension('my_class', ['AA', 'Be', 'CC']))\n\n    # These \"asserts\" are used for self-checking and not for an auto-testing\n    assert Strongest_Extension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n    assert Strongest_Extension('my_class', ['AaA', 'aAa', 'aaA']) == 'my_class.AaA'\n    assert Strongest_Extension('my_class', ['Aa', 'aa', 'aaa']) == 'my_class.aaa'\n    print(\"Coding complete? Click 'Check' to earn cool rewards!\")"
    },
    {
      "rank": 65,
      "score": 3.3725120476464796,
      "candidate": "if len(extensions) == 0:\n        return class_name\n    strongest = extensions[0]\n    strength = 0\n    for ext in extensions:\n        if strength < (ext.upper().count('A') - ext.lower().count('a')):\n            strongest = ext\n            strength = (ext.upper().count('A') - ext.lower().count('a'))\n    return class_name + '.' + strongest\n\n\nif __name__ == '__main__':\n    print(\"Example:\")\n    print(Strongest_Extension('my_class', ['AA', 'Be', 'CC']))\n\n    # These \"asserts\" are used for self-checking and not for an auto-testing\n    assert Strongest_Extension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n    assert Strongest_Extension('my_class', ['AAA', 'Be', 'CCC']) == 'my_class.AAA'\n    assert Strongest_Extension('my_class', ['BA', 'Be', 'CC']) == 'my_class.BA'\n    assert Strongest_Extension('my_class', ['BA', 'Ce', 'CC']) == 'my_class.CC'\n    assert Strongest_Extension('my_class', ['BA', 'Ba', 'CC']) == 'my_class.BA'\n    print(\"Coding complete? Click 'Check' to earn cool rewards!\")"
    },
    {
      "rank": 66,
      "score": 3.325010328957679,
      "candidate": "strongest = 0\n    strongest_extension = ''\n    for extension in extensions:\n        cap = 0\n        sm = 0\n        for letter in extension:\n            if letter.isupper():\n                cap += 1\n            elif letter.islower():\n                sm += 1\n        if cap - sm > strongest:\n            strongest = cap - sm\n            strongest_extension = extension\n    return f'{class_name}.{strongest_extension}'\n\nif __name__ == '__main__':\n    print(\"Example:\")\n    print(Strongest_Extension('my_class', ['AA', 'Be', 'CC']))\n    print(Strongest_Extension('my_class', ['AAA', 'Be', 'CCC']))\n    print(Strongest_Extension('my_class', ['AA', 'aa', 'aaa']))\n\n    #These \"asserts\" using only for self-checking and not necessary for auto-testing\n    assert Strongest_Extension(\"my_class\", [\"\"]) == \"my_class.\", \"No extension\"\n    assert Strongest_Extension(\"my_class\", [\"A\", \"a\"]) == \"my_class.A\", \"All lowercase\"\n    assert Strongest_Extension(\"my_class\", [\"A\", \"B\", \"C\"]) == \"my_class.A\", \"First is the best\"\n    assert Strongest_Extension(\"my_class\", [\"A\", \"ba\", \"C\"]) == \"my_class.ba\", \"First is the best\"\n    assert Strongest_Extension(\"my_class\", [\"Aa\", \"Ba\", \"C\"]) == \"my_class.Aa\", \"First is the best\"\n    assert Strongest_Extension(\"my_class\", [\"Aa\", \"Ba\", \"Cc\"]) == \"my_class.Cc\", \"Last is the worst\"\n    assert Strongest_Extension(\"my_class\", [\"Aa\", \"B\", \"Cc\"]) == \"my_class.Cc\", \"Last is the worst\"\n    assert Strongest_Extension(\"my_class\", [\"Aa\", \"Bb\", \"Ccc\"]) == \"my_class.Ccc\", \"Last is the worst\""
    },
    {
      "rank": 67,
      "score": 3.295386631998164,
      "candidate": "strongest_extension = None\n    strongest_extension_strength = 0\n    for extension in extensions:\n        cap_letters = 0\n        small_letters = 0\n        for letter in extension:\n            if letter.isupper():\n                cap_letters += 1\n            elif letter.islower():\n                small_letters += 1\n        if cap_letters - small_letters > strongest_extension_strength:\n            strongest_extension = extension\n            strongest_extension_strength = cap_letters - small_letters\n    return f\"{class_name}.{strongest_extension}\"\n\n\nif __name__ == '__main__':\n    print(\"Example:\")\n    print(Strongest_Extension('my_class', ['AA', 'Be', 'CC']))\n\n    # These \"asserts\" are used for self-checking and not for an auto-testing\n    assert Strongest_Extension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n    assert Strongest_Extension('YourClass', ['myClass', 'YourClass', 'YourClass']) == 'YourClass.myClass'\n    assert Strongest_Extension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n    print(\"Coding complete? Click 'Check' to earn cool rewards!\")"
    },
    {
      "rank": 68,
      "score": 3.259075415240277,
      "candidate": "strongest_extension = extensions[0]\n    strongest_extension_strength = -1\n    for extension in extensions:\n        extension_strength = extension.count('A') - extension.count('a')\n        if extension_strength > strongest_extension_strength:\n            strongest_extension = extension\n            strongest_extension_strength = extension_strength\n    return f'{class_name}.{strongest_extension}'\n\n\nif __name__ == '__main__':\n    print(\"Example:\")\n    print(Strongest_Extension('my_class', ['AA', 'Be', 'CC']))\n\n    #These \"asserts\" using only for self-checking and not necessary for auto-testing\n    assert Strongest_Extension(\"MyClass\", [\"a\", \"A\"]) == \"MyClass.a\", \"Strength 1\"\n    assert Strongest_Extension(\"MyClass\", [\"aa\", \"be\", \"cc\"]) == \"MyClass.aa\", \"Strength 2\"\n    assert Strongest_Extension(\"MyClass\", [\"aA\", \"be\", \"cc\"]) == \"MyClass.aA\", \"Equal Strength\"\n    assert Strongest_Extension(\"MyClass\", [\"aA\", \"bE\", \"cC\"]) == \"MyClass.bE\", \"Equal Strength\"\n    assert Strongest_Extension(\"MyClass\", [\"aA\", \"bE\", \"CC\"]) == \"MyClass.bE\", \"Equal Strength\"\n    print(\"Coding complete? Click 'Check' to earn cool rewards!\")"
    },
    {
      "rank": 69,
      "score": 3.244670515536347,
      "candidate": "strongest_extension = extensions[0]\n    strength = -1\n    for extension in extensions:\n        if len(extension) != len(extension.upper()):\n            extension_strength = len(extension) - len(extension.lower())\n            if strength < extension_strength:\n                strength = extension_strength\n                strongest_extension = extension\n    return class_name + '.' + strongest_extension\n\n\nif __name__ == '__main__':\n    print(\"Example:\")\n    print(Strongest_Extension('my_class', ['AA', 'Be', 'CC']))\n\n    # These \"asserts\" are used for self-checking and not for an auto-testing\n    assert Strongest_Extension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n    assert Strongest_Extension('my_class', ['Aa', 'be', 'CC']) == 'my_class.be'\n    assert Strongest_Extension('my_class', ['aA', 'bE', 'cC']) == 'my_class.bE'\n    assert Strongest_Extension('my_class', ['AA', 'aa', 'aaa']) == 'my_class.AA'\n    assert Strongest_Extension('my_class', ['AAAA', 'a', 'aa']) == 'my_class.AAAA'\n    assert Strongest_Extension('my_class', ['AAAA', 'Aa', 'aa']) == 'my_class.AAAA'\n    print(\"Coding complete? Click 'Check' to earn cool rewards!\")"
    },
    {
      "rank": 70,
      "score": 3.217024017434386,
      "candidate": "cap_letters = sum([c.isupper() for c in extensions[0]])\n    sm_letters = sum([c.islower() for c in extensions[0]])\n    strength = cap_letters - sm_letters\n    strongest_extension = extensions[0]\n    for extension in extensions[1:]:\n        cap_letters = sum([c.isupper() for c in extension])\n        sm_letters = sum([c.islower() for c in extension])\n        strength_of_extension = cap_letters - sm_letters\n        if strength_of_extension > strength:\n            strength = strength_of_extension\n            strongest_extension = extension\n    return '{}.{}'.format(class_name, strongest_extension)\n\n\nif __name__ == '__main__':\n    print(\"Example:\")\n    print(Strongest_Extension('my_class', ['AA', 'Be', 'CC']))\n\n    #These \"asserts\" using only for self-checking and not necessary for auto-testing\n    assert Strongest_Extension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA', \"First\"\n    assert Strongest_Extension('my_class', ['Ss', 'AA', 'Be', 'CC']) == 'my_class.Ss', \"Second\"\n    assert Strongest_Extension('my_class', ['s', 'ss', 'sss', 'ssss']) == 'my_class.ssss', \"Third\"\n    assert Strongest_Extension('my_class', ['s', 'SS', 'sSS', 'SSS']) == 'my_class.SSS', \"Four\"\n    print(\"Coding complete? Click 'Check' to earn cool rewards!\")"
    },
    {
      "rank": 71,
      "score": 3.2053069732453423,
      "candidate": "strongest_extension = extensions[0]\n    strongest_extension_strength = 0\n    for extension in extensions:\n        extension_strength = extension.count('A') - extension.count('a')\n        if extension_strength > strongest_extension_strength:\n            strongest_extension_strength = extension_strength\n            strongest_extension = extension\n        elif extension_strength == strongest_extension_strength and extension < strongest_extension:\n            strongest_extension_strength = extension_strength\n            strongest_extension = extension\n\n    return f\"{class_name}.{strongest_extension}\"\n\n\nif __name__ == '__main__':\n    print(\"Example:\")\n    print(Strongest_Extension('my_class', ['AA', 'Be', 'CC']))\n\n    # These \"asserts\" are used for self-checking and not for an auto-testing\n    assert Strongest_Extension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n    assert Strongest_Extension('com.my_class', ['AA', 'Be', 'CC']) == 'com.my_class.AA'\n    assert Strongest_Extension('com.my_class', ['AA', 'aB', 'Abc', 'xyz']) == 'com.my_class.Abc'\n    assert Strongest_Extension('com.my_class', ['AA', 'aB', 'Abc', 'Xyz']) == 'com.my_class.AA'\n    print(\"Coding complete? Click 'Check' to earn cool rewards!\")"
    },
    {
      "rank": 72,
      "score": 3.1446544100190534,
      "candidate": "return class_name + '.' + sorted(extensions, key=lambda x: (-len([c for c in x if c.isupper()]), len([c for c in x if c.islower()])))[0]\n\n\nif __name__ == '__main__':\n    print(\"Example:\")\n    print(Strongest_Extension('my_class', ['AA', 'Be', 'CC']))\n    # These \"asserts\" are used for self-checking and not for an auto-testing\n    assert Strongest_Extension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n    assert Strongest_Extension('my_class', ['Aa', 'be', 'cc']) == 'my_class.be'\n    assert Strongest_Extension('my_class', ['Aa', 'aa', 'Cc']) == 'my_class.aa'\n    assert Strongest_Extension('my_class', ['Aa', 'Bb', 'Cc']) == 'my_class.Aa'\n    assert Strongest_Extension('my_class', ['Ee', 'e', 'cc']) == 'my_class.Ee'\n    assert Strongest_Extension('my_class', ['E', 'e', 'cc']) == 'my_class.e'\n    print(\"Coding complete? Click 'Check' to earn cool rewards!\")"
    },
    {
      "rank": 73,
      "score": 3.1315004438638736,
      "candidate": "class_name_extension = []\n    for extension in extensions:\n        CAP = 0\n        SM = 0\n        for letter in extension:\n            if letter.isupper():\n                CAP += 1\n            if letter.islower():\n                SM += 1\n        strength = CAP - SM\n        class_name_extension.append([extension, strength])\n    class_name_extension.sort(key=lambda x: x[1], reverse=True)\n    return f\"{class_name}.{class_name_extension[0][0]}\"\n\n\nif __name__ == '__main__':\n    print(\"Example:\")\n    print(Strongest_Extension('my_class', ['AA', 'Be', 'CC']))\n\n    # These \"asserts\" are used for self-checking and not for an auto-testing\n    assert Strongest_Extension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA', \"First\"\n    assert Strongest_Extension('Weird', ['Aa', 'aaa', 'Be', 'CC']) == 'Weird.aaa', \"Second\"\n    assert Strongest_Extension('my_class', ['Ss', 'sss', 'ssss', 'DD']) == 'my_class.sss', \"Third\"\n    assert Strongest_Extension('class', ['lowercase', 'UPPERCASE', 'case', 'CAPSLOCK']) == 'class.UPPERCASE', \"Fourth\"\n    print(\"Coding complete? Click 'Check' to earn cool rewards!\")"
    },
    {
      "rank": 74,
      "score": 3.104422108871956,
      "candidate": "strongest_extension = extensions[0]\n    strongest_extension_strength = 0\n    for extension in extensions:\n        cap_count = 0\n        sm_count = 0\n        for char in extension:\n            if char.isupper():\n                cap_count += 1\n            elif char.islower():\n                sm_count += 1\n        strength = cap_count - sm_count\n        if strength > strongest_extension_strength:\n            strongest_extension = extension\n            strongest_extension_strength = strength\n    return class_name + '.' + strongest_extension\n\nif __name__ == '__main__':\n    print(\"Example:\")\n    print(Strongest_Extension('my_class', ['AA', 'Be', 'CC']))\n\n    #These \"asserts\" using only for self-checking and not necessary for auto-testing\n    assert Strongest_Extension(\"Fish\", [\"disH\", \"Fish\", \"FishFile\"]) == \"Fish.Fish\"\n    assert Strongest_Extension(\"Pies\", [\"applePies\", \"orange\"]) == \"Pies.applePies\"\n    print(\"Coding complete? Click 'Check' to earn cool rewards!\")"
    },
    {
      "rank": 75,
      "score": 3.0967849086264136,
      "candidate": "# return f\"{class_name}.{max(extensions, key=lambda x: (x.count('A'), x.count('a')))}\"\n    return f\"{class_name}.{max(extensions, key=lambda x: x.count('A') - x.count('a'))}\"\n\n\nif __name__ == '__main__':\n    print(\"Example:\")\n    print(Strongest_Extension('my_class', ['AA', 'Be', 'CC']))\n\n    # These \"asserts\" are used for self-checking and not for an auto-testing\n    assert Strongest_Extension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n    assert Strongest_Extension('my_class', ['AAA', 'Be', 'CCC']) == 'my_class.AAA'\n    assert Strongest_Extension('my_class', ['BA', 'Be', 'CC']) == 'my_class.BA'\n    assert Strongest_Extension('my_class', ['AA', 'foo', 'CC']) == 'my_class.foo'\n    assert Strongest_Extension('my_class', ['', 'foo', 'CC']) == 'my_class.foo'\n    assert Strongest_Extension('my_class', ['', '']) == 'my_class.'\n    assert Strongest_Extension('my_class', ['AA', '']) == 'my_class.AA'\n    print(\"Coding complete? Click 'Check' to earn cool rewards!\")"
    },
    {
      "rank": 76,
      "score": 3.0835454380019023,
      "candidate": "strongest_extension = ''\n    strongest_strength = 0\n    for extension in extensions:\n        cap_count = 0\n        small_count = 0\n        for char in extension:\n            if char.isupper():\n                cap_count += 1\n            elif char.islower():\n                small_count += 1\n        strength = cap_count - small_count\n        if strength > strongest_strength:\n            strongest_strength = strength\n            strongest_extension = extension\n    return class_name + '.' + strongest_extension\n\n\nif __name__ == '__main__':\n    print(\"Example:\")\n    print(Strongest_Extension('my_class', ['AA', 'Be', 'CC']))\n\n    # These \"asserts\" are used for self-checking and not for an auto-testing\n    assert Strongest_Extension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n    assert Strongest_Extension(' klass', ['a', 'ANOTHERCLASS', 'YetAnother']) == 'klass.ANOTHERCLASS'\n    assert Strongest_Extension('hi', ['H1', 'Hlo', 'hey']) == 'hi.H1'\n    assert Strongest_Extension('MyClass', ['OOP', 'OOD', 'PDD']) == 'MyClass.OOP'\n    assert Strongest_Extension('hi', ['H1', 'Hlo', 'hey']) == 'hi.H1'\n    print(\"Coding complete? Click 'Check' to earn cool rewards!\")"
    },
    {
      "rank": 77,
      "score": 3.0348188272952683,
      "candidate": "max_strength = 0\n    for extension in extensions:\n        cap_count = 0\n        sm_count = 0\n        for letter in extension:\n            if letter.isupper():\n                cap_count += 1\n            elif letter.islower():\n                sm_count += 1\n        strength = cap_count - sm_count\n        if strength > max_strength:\n            max_strength = strength\n            strongest_extension = extension\n    return f'{class_name}.{strongest_extension}'\n\n\nif __name__ == '__main__':\n    print(\"Example:\")\n    print(Strongest_Extension('my_class', ['AA', 'Be', 'CC']))\n\n    # These \"asserts\" are used for self-checking and not for an auto-testing\n    assert Strongest_Extension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n    assert Strongest_Extension('Machine', ['Oil', 'WATER', 'Gasoline']) == 'Machine.Oil'\n    assert (\n        Strongest_Extension('Car', ['Airbag', 'Abs', 'Alarm']) == 'Car.Airbag'\n    )\n    assert Strongest_Extension('Garden', ['Flower', 'Grass', 'Weed']) == 'Garden.Flower'\n    assert (\n        Strongest_Extension(\n            'CheeseCake', ['Sugar', 'Milk', 'Vanilla', 'Chocolate']\n        )\n        == 'CheeseCake.Sugar'\n    )\n    assert Strongest_Extension('Onions', ['Sweet', 'Savory']) == 'Onions.Sweet'\n    print(\"Coding complete? Click 'Check' to earn cool rewards!\")"
    },
    {
      "rank": 78,
      "score": 3.002045382656984,
      "candidate": "max_strength = 0\n    chosen_extension = ''\n    for extension in extensions:\n        strength = extension.count('A') - extension.count('a')\n        if strength > max_strength:\n            max_strength = strength\n            chosen_extension = extension\n    return f\"{class_name}.{chosen_extension}\"\n\n\nif __name__ == '__main__':\n    print(\"Example:\")\n    print(Strongest_Extension('my_class', ['AA', 'Be', 'CC']))\n\n    #These \"asserts\" using only for self-checking and not necessary for auto-testing\n    assert Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\"]) == \"my_class.AA\", \"First\"\n    assert Strongest_Extension(\"com.my_class\", [\"AA\", \"Be\", \"CC\"]) == \"com.my_class.AA\", \"Second\"\n    assert Strongest_Extension(\"com.my_class\", [\"AA\", \"aA\", \"aaa\"]) == \"com.my_class.AA\", \"Third\"\n    assert Strongest_Extension(\"com.my_class\", [\"BA\", \"BA\", \"BA\"]) == \"com.my_class.BA\", \"Fourth\"\n    print(\"Coding complete? Click 'Check' to earn cool rewards!\")"
    },
    {
      "rank": 79,
      "score": 2.909689479805386,
      "candidate": "strongest_extension = None\n    strength = 0\n    for extension in extensions:\n        cap = sum(1 for c in extension if c.isupper())\n        sm = sum(1 for c in extension if c.islower())\n        if strength < cap - sm:\n            strength = cap - sm\n            strongest_extension = extension\n    return f\"{class_name}.{strongest_extension}\"\n\n\nif __name__ == '__main__':\n    print(\"Example:\")\n    print(Strongest_Extension('my_class', ['AA', 'Be', 'CC']))\n\n    # These \"asserts\" are used for self-checking and not for an auto-testing\n    assert Strongest_Extension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n    assert Strongest_Extension('my_class', ['AAA', 'Be', 'CC']) == 'my_class.AAA'\n    assert Strongest_Extension('my_class', ['AA', 'Be', 'CCC']) == 'my_class.CCC'\n    assert Strongest_Extension('my_class', ['AAA', 'BeCC', 'CC']) == 'my_class.BeCC'\n    assert Strongest_Extension('my_class', ['AA', 'BeCC', 'CC']) == 'my_class.BeCC'\n    print(\"Coding complete? Click 'Check' to earn cool rewards!\")"
    },
    {
      "rank": 80,
      "score": 2.906345217220328,
      "candidate": "strongest_extension = extensions[0]\n    strongest_extension_strength = 0\n\n    for extension in extensions:\n        extension_strength = 0\n        for c in extension:\n            if c.isupper():\n                extension_strength += 1\n            elif c.islower():\n                extension_strength -= 1\n\n        if extension_strength > strongest_extension_strength:\n            strongest_extension = extension\n            strongest_extension_strength = extension_strength\n\n    return f'{class_name}.{strongest_extension}'\n\n\nif __name__ == '__main__':\n    print(\"Example:\")\n    print(Strongest_Extension('my_class', ['AA', 'Be', 'CC']))\n\n    # These \"asserts\" are used for self-checking and not for an auto-testing\n    assert Strongest_Extension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA', \"First\"\n    assert Strongest_Extension('Weird', ['A', 'B', 'C']) == 'Weird.C', \"Second\"\n    assert Strongest_Extension('AWESOME', ['ABC', 'Be', 'A']) == 'AWESOME.ABC', \"Third\"\n    assert Strongest_Extension('class', ['aa', 'be', 'cc']) == 'class.cc', \"Fourth\"\n    print(\"Coding complete? Click 'Check' to earn cool rewards!\")"
    },
    {
      "rank": 81,
      "score": 2.9063386501106656,
      "candidate": "# Your code here\n    max = 0\n    ans = 0\n    for i in extensions:\n        a = 0\n        b = 0\n        for j in i:\n            if j.isupper():\n                a+=1\n            else:\n                b+=1\n        if a - b > max:\n            max = a - b\n            ans = i\n    return class_name + '.' + ans\n\n\nif __name__ == '__main__':\n    #These \"asserts\" using only for self-checking and not necessary for auto-testing\n    assert Strongest_Extension(\"my_class\", ['SErviNGSliCes', 'Cheese', 'StuFfed']) == 'my_class.SErviNGSliCes', \"SErviNGSliCes\"\n    assert Strongest_Extension(\"Weatherman\", ['Sunny', 'Rainy', 'Stormy']) == 'Weatherman.Sunny', \"Sunny\"\n    assert Strongest_Extension(\"Chef\", ['ch3f', 'Chef!', 'CHEF']) == 'Chef.CHEF', \"CHEF\"\n    print(\"Coding complete? Click 'Check' to review your tests and earn cool rewards!\")"
    },
    {
      "rank": 82,
      "score": 2.880397059813653,
      "candidate": "strongest = 0\n    strongest_name = ''\n    for name in extensions:\n        CAP = 0\n        SM = 0\n        for c in name:\n            if c.isupper():\n                CAP += 1\n            if c.islower():\n                SM += 1\n        if CAP - SM > strongest:\n            strongest = CAP - SM\n            strongest_name = name\n    return class_name + '.' + strongest_name\n\n\nif __name__ == '__main__':\n    print(\"Example:\")\n    print(Strongest_Extension('my_class', ['AA', 'Be', 'CC']))\n\n    #These \"asserts\" using only for self-checking and not necessary for auto-testing\n    assert Strongest_Extension(\"my_class\", ['AA', 'Be', 'CC']) == \"my_class.AA\", \"First\"\n    assert Strongest_Extension(\"com.my_class\", ['AA', 'Be', 'CC']) == \"com.my_class.AA\", \"Second\"\n    assert Strongest_Extension(\"com.my_class\", ['AABB', 'BeCC', 'CCxx']) == \"com.my_class.AABB\", \"Third\"\n    assert Strongest_Extension(\"com.my_class\", ['XcC', 'BbAA', 'Cc']) == \"com.my_class.BbAA\", \"Forth\"\n    print(\"Coding complete? Click 'Check' to earn cool rewards!\")"
    },
    {
      "rank": 83,
      "score": 2.8763150496595142,
      "candidate": "strongest = extensions[0]\n    for extension in extensions[1:]:\n        extension_strength = abs(len(extension) - len(extension.lower()))\n        strongest_strength = abs(len(strongest) - len(strongest.lower()))\n        if extension_strength > strongest_strength:\n            strongest = extension\n        elif extension_strength == strongest_strength:\n            if extension < strongest:\n                strongest = extension\n    return f\"{class_name}.{strongest}\"\n\n\ndef test_function():\n    assert Strongest_Extension(\"my_class\", ['AA', 'Be', 'CC']) == \"my_class.AA\"\n    assert Strongest_Extension(\"my_class\", ['AA', 'aa', 'CC']) == \"my_class.AA\"\n    assert Strongest_Extension(\"my_class\", ['AA', 'aa', 'BB', 'cc']) == \"my_class.AA\"\n    assert Strongest_Extension(\"my_class\", ['AA', 'aa', 'BB', 'bb']) == \"my_class.AA\"\n    assert Strongest_Extension(\"my_class\", ['AA', 'aa', 'BB', 'bb', 'Ss']) == \"my_class.Ss\"\n    assert Strongest_Extension(\"my_class\", ['AA', 'aa', 'BB', 'bb', 'SS']) == \"my_class.SS\"\n    assert Strongest_Extension(\"my_class\", ['aa', 'AA', 'bb', 'BB', 'SS']) == \"my_class.SS\"\n    assert Strongest_Extension(\"my_class\", ['aa', 'AA', 'bb', 'BB', 'SS', 'ss']) == \"my_class.SS\"\n    assert Strongest_Extension(\"my_class\", ['aa', 'AA', 'bb', 'BB', 'SS', 'Ss']) == \"my_class.SS\"\n    assert Strongest_Extension(\"my_class\", ['aA', 'Aa', 'bB', 'Bb', 'SS']) == \"my_class.SS\"\n    assert Strongest_Extension(\"my_class\", ['Aa', 'aA', 'Bb', '"
    },
    {
      "rank": 84,
      "score": 2.843156738747137,
      "candidate": "strength = 0\n    for extension in extensions:\n        cap = 0\n        sm = 0\n        for letter in extension:\n            if letter.isupper():\n                cap += 1\n            else:\n                sm += 1\n        extension_strength = cap - sm\n        if extension_strength > strength:\n            strength = extension_strength\n            strongest_extension = extension\n    return class_name + '.' + strongest_extension\n\n\nif __name__ == '__main__':\n    print(\"Example:\")\n    print(Strongest_Extension('my_class', ['AA', 'Be', 'CC']))\n\n    # These \"asserts\" are used for self-checking and not for an auto-testing\n    assert Strongest_Extension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n    assert Strongest_Extension('YourClass', ['myClass', 'YourClass', 'myClass']) == 'YourClass.myClass'\n    assert Strongest_Extension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n    assert Strongest_Extension('my_class', ['AA', 'Be', 'CC', 'AA']) == 'my_class.AA'\n    assert Strongest_Extension('my_class', ['AA', 'Be', 'CC', 'AA', 'Be', 'AA']) == 'my_class.AA'\n    assert Strongest_Extension('my_class', ['AA', 'AA', 'AA']) == 'my_class.AA'\n    assert Strongest_Extension('my_class', ['AA', 'aA', 'aa']) == 'my_class.aA'\n    print(\"Coding complete? Click 'Check' to earn cool rewards!\")"
    },
    {
      "rank": 85,
      "score": 2.8137080985718974,
      "candidate": "return class_name + '.' + sorted(extensions, key=lambda x: (x.upper().count('A') - x.lower().count('a')), reverse=True)[0]\n\n\nif __name__ == '__main__':\n    print(\"Example:\")\n    print(Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\"]))\n\n    # These \"asserts\" are used for self-checking and not for an auto-testing\n    assert Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\"]) == \"my_class.AA\"\n    assert Strongest_Extension(\"my_class\", [\"AAA\", \"Be\", \"CCC\"]) == \"my_class.AAA\"\n    assert Strongest_Extension(\"my_class\", [\"BA\", \"Be\", \"CC\"]) == \"my_class.BA\"\n    assert Strongest_Extension(\"my_class\", [\"AA\", \"foo\", \"CCCC\"]) == \"my_class.foo\"\n    assert Strongest_Extension(\"my_class\", [\"AA\", \"foo\", \"CCCC\"]) == \"my_class.foo\"\n    assert Strongest_Extension(\"my_class\", [\"AAA\", \"foo\", \"CCCCC\"]) == \"my_class.AAA\"\n    assert Strongest_Extension(\"my_class\", [\"BAA\", \"foo\", \"CCCCC\"]) == \"my_class.BAA\"\n    print(\"Coding complete? Click 'Check' to earn cool rewards!\")"
    },
    {
      "rank": 86,
      "score": 2.775084988303611,
      "candidate": "strongest = ''\n    max_strength = 0\n    for extension in extensions:\n        cap = 0\n        sm = 0\n        for char in extension:\n            if char.isupper():\n                cap += 1\n            elif char.islower():\n                sm += 1\n        strength = cap - sm\n        if strength > max_strength:\n            max_strength = strength\n            strongest = extension\n    return f\"{class_name}.{strongest}\"\n\n\nif __name__ == '__main__':\n    print(\"Example:\")\n    print(Strongest_Extension('my_class', ['AA', 'Be', 'CC']))\n\n    #These \"asserts\" using only for self-checking and not necessary for auto-testing\n    assert Strongest_Extension(\"MyClass\", [\"A\", \"b\", \"C\"]) == \"MyClass.A\", \"First\"\n    assert Strongest_Extension(\"MyClass\", [\"A\", \"B\", \"C\"]) == \"MyClass.C\", \"Second\"\n    assert Strongest_Extension(\"MyClass\", [\"A\", \"B\", \"C\", \"D\", \"E\"]) == \"MyClass.E\", \"Third\"\n    assert Strongest_Extension(\"MyClass\", [\"Aa\", \"Bb\", \"Cc\"]) == \"MyClass.Aa\", \"Lowercase\"\n    print(\"Coding complete? Click 'Check' to earn cool rewards!\")"
    },
    {
      "rank": 87,
      "score": 2.719178762449059,
      "candidate": "strongest_extension = extensions[0]\n    strength = 0\n    for extension in extensions:\n        cap = 0\n        sm = 0\n        for char in extension:\n            if char.isupper():\n                cap += 1\n            elif char.islower():\n                sm += 1\n        if cap - sm > strength:\n            strength = cap - sm\n            strongest_extension = extension\n    return f'{class_name}.{strongest_extension}'\n\n\nif __name__ == '__main__':\n    print(\"Example:\")\n    print(Strongest_Extension('my_class', ['AA', 'Be', 'CC']))\n\n    # These \"asserts\" are used for self-checking and not for an auto-testing\n    assert Strongest_Extension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n    assert Strongest_Extension('com.my_class', ['AA', 'Be', 'CC']) == 'com.my_class.AA'\n    assert Strongest_Extension('com.my_class', ['aA', 'Be', 'gHi']) == 'com.my_class.aA'\n    assert Strongest_Extension('class', ['a', 'A']) == 'class.a'\n    print(\"Coding complete? Click 'Check' to earn cool rewards!\")"
    },
    {
      "rank": 88,
      "score": 2.7120623166421165,
      "candidate": "max_strength = 0\n    max_strength_extension = ''\n    for extension in extensions:\n        CAP = 0\n        SM = 0\n        for letter in extension:\n            if letter.isupper():\n                CAP += 1\n            elif letter.islower():\n                SM += 1\n        strength = CAP - SM\n        if strength > max_strength:\n            max_strength = strength\n            max_strength_extension = extension\n    return '{}.{}'.format(class_name, max_strength_extension)\n\nif __name__ == '__main__':\n    print(\"Example:\")\n    print(Strongest_Extension('my_class', ['AA', 'Be', 'CC']))\n    #These \"asserts\" using only for self-checking and not necessary for auto-testing\n    assert Strongest_Extension(\"Zoo\", [\"Aardvark\", \"Zebra\", \"Kudu\"]) == \"Zoo.Zebra\", \"Zebra\"\n    assert Strongest_Extension(\"Incomprehensibilities\", [\"\u201c\u2026 \u201d\u201d, \u201c\u201d\u201d \u201d\u201d, \u201c\u201d \u201d \u201d\u201d \u201d\u201d\u201d \u201d\u201d \u201c\u201d \u201d \u201d\u201d \u201d\u201d \u201c\u201d \u201d \u201d \u201c\u201d \u201d\u201d\u201d \u201d\u201d \u201c\u201d \u201d\u201d\u201d \u201d\u201d \u201c\u201d \u201d \u201d\u201d \u201d\u201d\u201d \u201d\u201d \u201c\u201d \u201d \u201d\u201d \u201d\u201d \u201c\u201d \u201d \u201d \u201c\u201d \u201d\u201d\u201d \u201d\u201d \u201c\u201d \u201d \u201d\u201d \u201d\u201d \u201c\u201d \u201d \u201d \u201c\u201d \u201d\u201d\u201d \u201d\u201d \u201c\u201d \u201d \u201d\u201d \u201d\u201d \u201c\u201d \u201d \u201d \u201c\u201d \u201d\u201d\u201d \u201d\u201d \u201c\u201d \u201d \u201d\u201d \u201d\u201d \u201c\u201d \u201d \u201d \u201c\u201d \u201d\u201d\u201d \u201d\u201d \u201c\u201d \u201d \u201d\u201d \u201d\u201d \u201c\u201d \u201d \u201d \u201c\u201d \u201d\u201d\u201d \u201d\u201d \u201c\u201d \u201d \u201d\u201d \u201d\u201d \u201c\u201d \u201d \u201d \u201c\u201d \u201d\u201d\u201d \u201d\u201d \u201c\u201d \u201d \u201d\u201d \u201d\u201d \u201c\u201d \u201d \u201d \u201c\u201d \u201d\u201d\u201d \u201d\u201d \u201c\u201d \u201d \u201d\u201d \u201d\u201d \u201c\u201d \u201d \u201d \u201c\u201d \u201d\u201d\u201d \u201d\u201d \u201c\u201d \u201d \u201d\u201d \u201d\u201d \u201c\u201d \u201d \u201d \u201c\u201d \u201d\u201d\u201d \u201d\u201d \u201c\u201d \u201d \u201d\u201d \u201d\u201d \u201c\u201d \u201d \u201d \u201c\u201d \u201d\u201d\u201d \u201d\u201d \u201c\u201d \u201d \u201d\u201d \u201d\u201d \u201c\u201d \u201d \u201d \u201c\u201d \u201d\u201d\u201d \u201d\u201d \u201c\u201d \u201d \u201d\u201d \u201d"
    },
    {
      "rank": 89,
      "score": 2.676602558842725,
      "candidate": "strength = []\n    for extension in extensions:\n        cap = 0\n        sm = 0\n        for char in extension:\n            if char.isupper():\n                cap += 1\n            elif char.islower():\n                sm += 1\n            else:\n                pass\n        strength.append(cap - sm)\n    max_strength = max(strength)\n    if strength.count(max_strength) == 1:\n        index = strength.index(max_strength)\n        return \"{}.{}\".format(class_name, extensions[index])\n    else:\n        indices = [i for i, e in enumerate(strength) if e == max_strength]\n        return \"{}.{}\".format(class_name, extensions[indices[0]])\n    \nif __name__ == '__main__':\n    print(\"Example:\")\n    print(Strongest_Extension('my_class', ['AA', 'Be', 'CC']))\n\n    #These \"asserts\" using only for self-checking and not necessary for auto-testing\n    assert Strongest_Extension(\"class\", [\"aaA\", \"be\", \"cc\"]) == \"class.aaA\", \"First\"\n    assert Strongest_Extension(\"class\", [\"asd\", \"MMM\", \"HMM\"]) == \"class.MMM\", \"Middle\"\n    assert Strongest_Extension(\"class\", [\"a\", \"B\", \"c\"]) == \"class.B\", \"Single\"\n    assert Strongest_Extension(\"class\", [\"DD\", \"Be\", \"CC\"]) == \"class.DD\", \"Double\"\n    print(\"Coding complete? Click 'Check' to earn cool rewards!\")"
    },
    {
      "rank": 90,
      "score": 2.6643129907109446,
      "candidate": "strongest_extension_name = ''\n    strongest_extension_strength = -1\n    for extension in extensions:\n        extension_strength = extension.count('A') - extension.count('a')\n        if extension_strength > strongest_extension_strength:\n            strongest_extension_name = extension\n            strongest_extension_strength = extension_strength\n    return \"{}.{}\".format(class_name, strongest_extension_name)\n\n\nif __name__ == '__main__':\n    #These \"asserts\" using only for self-checking and not necessary for auto-testing\n    assert Strongest_Extension(\"my_class\", [\"A\", \"a\"]) == \"my_class.A\", \"Strength 0\"\n    assert Strongest_Extension(\"Wow\", [\"AAA\", \"Be\", \"CCC\"]) == \"Wow.AAA\", \"Strength 2\"\n    assert Strongest_Extension(\"Reflect\", [\"A\", \"b\", \"C\"]) == \"Reflect.A\", \"Strength 0\"\n    assert Strongest_Extension(\"Reflect\", [\"A\", \"B\", \"C\"]) == \"Reflect.C\", \"B > A > C\"\n    assert Strongest_Extension(\"Reflect\", [\"A\", \"B\", \"aa\"]) == \"Reflect.B\", \"B > A == aa\"\n    assert Strongest_Extension(\"Reflect\", [\"aA\", \"ab\", \"Aa\"]) == \"Reflect.aA\", \"aA > ab > Aa\"\n    assert Strongest_Extension(\"Reflect\", [\"a\", \"a\", \"a\"]) == \"Reflect.a\", \"The last is the strongest\""
    },
    {
      "rank": 91,
      "score": 2.6367903697915156,
      "candidate": "strongest_extension = extensions[0]\n    strength = -1\n    for extension in extensions:\n        extension_strength = extension.upper().count('A') - extension.lower().count('a')\n        if extension_strength > strength:\n            strongest_extension = extension\n            strength = extension_strength\n    return class_name + '.' + strongest_extension\n\nif __name__ == '__main__':\n    print(\"Example:\")\n    print(Strongest_Extension('my_class', ['AA', 'Be', 'CC']))\n\n    #These \"asserts\" using only for self-checking and not necessary for auto-testing\n    assert Strongest_Extension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA', \"First\"\n    assert Strongest_Extension('com.my_class', ['AA', 'Be', 'CC']) == 'com.my_class.AA', \"Second\"\n    assert Strongest_Extension('com.my_class', ['A', 'a']) == 'com.my_class.A', \"Third\"\n    assert Strongest_Extension('com.my_class', ['', 'Aa', 'bB']) == 'com.my_class.Aa', \"Four\"\n    assert Strongest_Extension('class', ['aA', 'Bb', 'Cc']) == 'class.aA', \"Fifth\"\n    print(\"Coding complete? Click 'Check' to earn cool rewards!\")"
    },
    {
      "rank": 92,
      "score": 2.5116625400115913,
      "candidate": "strongest_extension = extensions[0]\n    strength = -1\n    \n    for extension in extensions:\n        cap = 0\n        sm = 0\n        for letter in extension:\n            if letter.isupper():\n                cap += 1\n            elif letter.islower():\n                sm += 1\n\n        if cap - sm > strength:\n            strength = cap - sm\n            strongest_extension = extension\n\n    return f'{class_name}.{strongest_extension}'\n\nif __name__ == '__main__':\n    print(\"Example:\")\n    print(Strongest_Extension('my_class', ['AA', 'Be', 'CC']))\n    print(Strongest_Extension('my_class', ['AA', 'ca', 'DD']))\n\n    #These \"asserts\" using only for self-checking and not necessary for auto-testing\n    assert Strongest_Extension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA', \"First\"\n    assert Strongest_Extension('my_class', ['AA', 'ca', 'DD']) == 'my_class.ca', \"Second\"\n    print(\"Coding complete? Click 'Check' to earn cool rewards!\")"
    },
    {
      "rank": 93,
      "score": 2.4350785194658835,
      "candidate": "import re\n    strongest_ext = extensions[0]\n    strongest_ext_strength = 0\n    for ext in extensions:\n        ext_strength = len(re.findall(r'[A-Z]', ext)) - len(re.findall(r'[a-z]', ext))\n        if ext_strength > strongest_ext_strength:\n            strongest_ext = ext\n            strongest_ext_strength = ext_strength\n    return class_name + '.' + strongest_ext\n\n\nif __name__ == '__main__':\n    print(\"Example:\")\n    print(Strongest_Extension('my_class', ['AA', 'Be', 'CC']))\n\n    # These \"asserts\" are used for self-checking and not for an auto-testing\n    assert Strongest_Extension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n    assert Strongest_Extension('Weird', ['A', 'b']) == 'Weird.A'\n    assert Strongest_Extension('Weird', ['A', 'B']) == 'Weird.A'\n    assert Strongest_Extension('Weird', ['a', 'B']) == 'Weird.B'\n    assert Strongest_Extension('Weird', ['A', 'b', 'C']) == 'Weird.A'\n    assert Strongest_Extension('Weird', ['a', 'B', 'C']) == 'Weird.B'\n    assert Strongest_Extension('Weird', ['a', 'b', 'C']) == 'Weird.C'\n    assert Strongest_Extension('Weird', ['a', 'Bb', 'C']) == 'Weird.Bb'\n    assert Strongest_Extension('Weird', ['a', 'bb', 'C']) == 'Weird.bb'\n    assert Strongest_Extension('Weird', ['a', 'b', 'Ccc']) == 'Weird.Ccc'\n    assert Strongest_Extension('Weird', ['a', 'B', 'c']) == 'Weird.B'\n    print(\"Coding complete? Click 'Check' to ear"
    },
    {
      "rank": 94,
      "score": 2.430100725514617,
      "candidate": "extensions_dict = {}\n    for extension in extensions:\n        cap_count = 0\n        small_count = 0\n        for i in extension:\n            if i.isupper():\n                cap_count += 1\n            elif i.islower():\n                small_count += 1\n        extension_strength = cap_count - small_count\n        extensions_dict[extension] = extension_strength\n    strongest_extension = max(extensions_dict, key=extensions_dict.get)\n    return class_name + '.' + strongest_extension\n\nif __name__ == '__main__':\n    print(\"Example:\")\n    print(Strongest_Extension('my_class', ['AA', 'Be', 'CC']))\n    print(Strongest_Extension('my_class', ['AAA', 'Be', 'CCC']))\n    print(Strongest_Extension('my_class', ['AA', 'aa', 'CCC']))\n\n    #These \"asserts\" using only for self-checking and not necessary for auto-testing\n    assert Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\"]) == \"my_class.AA\"\n    assert Strongest_Extension(\"my_class\", [\"AAA\", \"Be\", \"CCC\"]) == \"my_class.AAA\"\n    assert Strongest_Extension(\"my_class\", [\"AA\", \"aa\", \"CCC\"]) == \"my_class.aa\"\n    assert Strongest_Extension(\"my_class\", [\"Leet\", \"is\", \"strong\", \"and\", \"powerful\"]) == \"my_class.Leet\"\n    assert Strongest_Extension(\"my_class\", [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\"]) == \"my_class.10\"\n    assert Strongest_Extension(\"my_class\", [\"l\", \"o\", \"o\", \"o\", \"o\", \"o\", \"o\", \"o\", \"o\", \"o\"]) == \"my_class.o\"\n    print(\"Coding complete? Click 'Check' to earn cool rewards!\")"
    },
    {
      "rank": 95,
      "score": 2.4145940207471526,
      "candidate": "strongest_extension = ''\n    strongest_extension_strength = 0\n    for extension in extensions:\n        extension_strength = extension.count('A') - extension.count('a')\n        if extension_strength > strongest_extension_strength:\n            strongest_extension_strength = extension_strength\n            strongest_extension = extension\n    return f'{class_name}.{strongest_extension}'\n\n\nif __name__ == '__main__':\n    print(\"Example:\")\n    print(Strongest_Extension('my_class', ['AA', 'Be', 'CC']))\n\n    # These \"asserts\" are used for self-checking and not for an auto-testing\n    assert Strongest_Extension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA', \"1st example\"\n    assert Strongest_Extension('my_class', ['A', 'b']) == 'my_class.A', \"2nd example\"\n    assert (\n        Strongest_Extension('my_class', ['A', 'a', 'AA', 'Bb', 'Cc']) == 'my_class.AA'\n    ), \"3rd example\"\n    assert Strongest_Extension('my_class', ['aA', 'Be', 'cC']) == 'my_class.aA', \"4th example\"\n    print(\"Coding complete? Click 'Check' to earn cool rewards!\")"
    },
    {
      "rank": 96,
      "score": 2.408591203853029,
      "candidate": "# your code here\n    strongest_ext = extensions[0]\n    strength = -1\n    for ext in extensions:\n        count_upper = 0\n        count_lower = 0\n        for c in ext:\n            if c.isupper():\n                count_upper += 1\n            elif c.islower():\n                count_lower += 1\n        if count_upper - count_lower > strength:\n            strongest_ext = ext\n            strength = count_upper - count_lower\n    return class_name + '.' + strongest_ext\n\n\ndef test_function(test_case):\n    class_name = test_case[0]\n    extensions = test_case[1]\n    solution = test_case[2]\n    output = Strongest_Extension(class_name, extensions)\n    if output == solution:\n        print(\"Pass\")\n    else:\n        print(\"Fail\")\n\n\nclass_name = 'my_class'\nextensions = ['AA', 'Be', 'CC']\nsolution = 'my_class.AA'\ntest_case = [class_name, extensions, solution]\ntest_function(test_case)\n\nclass_name = 'Slices'\nextensions = ['SErviNGSliCes', 'Cheese', 'StuFfed']\nsolution = 'Slices.SErviNGSliCes'\ntest_case = [class_name, extensions, solution]\ntest_function(test_case)\n\nclass_name = 'com.my_class'\nextensions = ['AA', 'Be', 'CC']\nsolution = 'com.my_class.AA'\ntest_case = [class_name, extensions, solution]\ntest_function(test_case)\n\nclass_name = 'com.my_class'\nextensions = ['SErviNGSliCes', 'Cheese', 'StuFfed']\nsolution = 'com.my_class.SErviNGSliCes'\ntest_case = [class_name, extensions, solution]\ntest_function(test_case)\n\nclass_name = 'com.my_class'\nextensions = ['com.AA', 'com.Be',"
    },
    {
      "rank": 97,
      "score": 2.3100328669947867,
      "candidate": "if len(extensions) == 0:\n        return class_name\n\n    max_score = -1\n    max_extension = ''\n    for extension in extensions:\n        score = len([c for c in extension if c.isupper()]) - len([c for c in extension if c.islower()])\n        if score > max_score:\n            max_score = score\n            max_extension = extension\n\n    return class_name + '.' + max_extension\n\n\nif __name__ == '__main__':\n    print(\"Example:\")\n    print(Strongest_Extension('my_class', ['AA', 'Be', 'CC']))\n\n    # These \"asserts\" are used for self-checking and not for an auto-testing\n    assert Strongest_Extension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n    assert Strongest_Extension('my_class', ['AAA', 'Be', 'CCC']) == 'my_class.AAA'\n    assert Strongest_Extension('my_class', ['BA', 'Be', 'CC']) == 'my_class.BA'\n    assert Strongest_Extension('my_class', ['AA', 'foo', 'CC']) == 'my_class.foo'\n    assert Strongest_Extension('my_class', ['AA', 'bR', 'CC']) == 'my_class.bR'\n    print(\"Coding complete? Click 'Check' to earn cool rewards!\")"
    },
    {
      "rank": 98,
      "score": 2.2947839378549064,
      "candidate": "# get strength of each extension\n    strengths = [get_extension_strength(ext) for ext in extensions]\n    # get index of strongest extension\n    strongest_index = strengths.index(max(strengths))\n    # return class name and strongest extension\n    return f\"{class_name}.{extensions[strongest_index]}\"\n\n\ndef get_extension_strength(ext):\n    \"\"\"Returns the strength of a given extension\"\"\"\n    cap = len([c for c in ext if c.isupper()])\n    sm = len([c for c in ext if c.islower()])\n    return cap - sm\n\n\n# Pybites solution\n\n\ndef strongest_extension_1(class_name, extensions):\n    \"\"\"You will be given the name of a class (a string) and a list of extensions.\n    The extensions are to be used to load additional classes to the class. The\n    strength of the extension is as follows: Let CAP be the number of the uppercase\n    letters in the extension's name, and let SM be the number of lowercase letters \n    in the extension's name, the strength is given by the fraction CAP - SM. \n    You should find the strongest extension and return a string in this \n    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions with the same strength, you should\n    choose the one that comes first in the list.\n    For example, if you are given \"Slices\" as the class and a list of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n    (its strength is -1).\n    Example:\n    for Strongest_Extension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n    \"\"\"\n\n    # get strength of each extension\n    strengths = [get_extension_strength_1(ext) for ext in extensions]\n    # get index of strongest extension\n    strongest_index = strength"
    },
    {
      "rank": 99,
      "score": 2.234687902136881,
      "candidate": "strongest_extension = extensions[0]\n    strength = -1\n    for extension in extensions:\n        cap = 0\n        sm = 0\n        for ch in extension:\n            if ch.isupper():\n                cap += 1\n            elif ch.islower():\n                sm += 1\n            else:\n                continue\n        if cap - sm > strength:\n            strongest_extension = extension\n            strength = cap - sm\n    return class_name + '.' + strongest_extension\n\n\n\nif __name__ == '__main__':\n    print(\"Example:\")\n    print(Strongest_Extension('my_class', ['AA', 'Be', 'CC']))\n    print(Strongest_Extension('my_class', ['AA', 'Be', 'CC', 'my_class']))\n    print(Strongest_Extension('my_class', ['AA', 'Be', 'CC', 'my_class', 'my_class.AA']))\n\n    #These \"asserts\" using only for self-checking and not necessary for auto-testing\n    assert Strongest_Extension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA', \"First\"\n    assert Strongest_Extension('my_class', ['AA', 'Be', 'CC', 'my_class']) == 'my_class.my_class', \"Second\"\n    assert Strongest_Extension('my_class', ['AA', 'Be', 'CC', 'my_class', 'my_class.AA']) == 'my_class.my_class', \"Third\"\n    assert Strongest_Extension('my_class', ['AA', 'AA.CC', 'BB.CC']) == 'my_class.AA', \"Fourth\"\n    assert Strongest_Extension('my_class', ['AA', 'AA.CC', 'BB', 'BB.CC']) == 'my_class.AA', \"Fifth\"\n    print(\"Coding complete? Click 'Check' to earn cool rewards!\")"
    },
    {
      "rank": 100,
      "score": 2.204972434159643,
      "candidate": "strongest_extension = extensions[0]\n    strongest_extension_strength = -1\n    for extension in extensions:\n        extension_strength = extension.count('A') - extension.count('a')\n        if extension_strength > strongest_extension_strength:\n            strongest_extension = extension\n            strongest_extension_strength = extension_strength\n    return class_name + '.' + strongest_extension\n\n\nif __name__ == '__main__':\n    print(\"Example:\")\n    print(Strongest_Extension('my_class', ['AA', 'Be', 'CC']))\n\n    #These \"asserts\" using only for self-checking and not necessary for auto-testing\n    assert Strongest_Extension(\"Zoo\", [\"Aardvark\", \"Zebra\", \"Kudu\"]) == \"Zoo.Aardvark\", \"Zoo\"\n    assert Strongest_Extension(\"Merge\", [\"MergeSort\", \"Merge\"]) == \"Merge.MergeSort\", \"MergeSort\"\n    assert Strongest_Extension(\"Merge\", [\"MergeSort\", \"Merge\", \"DukesSort\"]) == \"Merge.MergeSort\", \"DukesSort\"\n    assert Strongest_Extension(\"Sort\", [\"Sort\", \"QuickSort\", \"IntroSort\"]) == \"Sort.IntroSort\", \"IntroSort\"\n    print(\"Coding complete? Click 'Check' to earn cool rewards!\")"
    }
  ]
}