{
  "timestamp": "2025-09-14T21:45:03.607066",
  "method": "improved_llm_judge",
  "judge_model": "codellama/CodeLlama-7b-Python-hf",
  "target_model": "codellama-7b",
  "dataset": "humaneval",
  "problem_number": 90,
  "total_candidates": 100,
  "results": [
    {
      "rank": 1,
      "score": 10.0,
      "candidate": "#pass\n    if len(lst) < 2:\n        return None\n    else:\n        lst.sort()\n        return lst[1]\n\n\nif __name__ == '__main__':\n    print(next_smallest([1, 2, 3, 4, 5]))\n    print(next_smallest([5, 1, 4, 3, 2]))\n    print(next_smallest([]))\n    print(next_smallest([1, 1]))"
    },
    {
      "rank": 2,
      "score": 10.0,
      "candidate": "if len(lst) == 0:\n        return None\n    elif len(lst) == 1:\n        return None\n    else:\n        lst.sort()\n        return lst[1]\n\ndef test_next_smallest():\n    assert next_smallest([1, 2, 3, 4, 5]) == 2\n    assert next_smallest([5, 1, 4, 3, 2]) == 2\n    assert next_smallest([]) == None\n    assert next_smallest([1, 1]) == None\n\ndef test_next_smallest_random():\n    from random import randint\n    for _ in range(10):\n        lst = [randint(-10, 10) for _ in range(randint(0, 10))]\n        print(lst)\n        assert next_smallest(lst) == sorted(lst)[1]\n\ntest_next_smallest_random()"
    },
    {
      "rank": 3,
      "score": 10.0,
      "candidate": "if len(lst) < 2:\n        return None\n    else:\n        lst.sort()\n        return lst[1]"
    },
    {
      "rank": 4,
      "score": 10.0,
      "candidate": "if len(lst) < 2:\n        return None\n    else:\n        lst.sort()\n        return lst[1]"
    },
    {
      "rank": 5,
      "score": 9.0,
      "candidate": "if len(lst) < 2:\n        return None\n    lst.sort()\n    return lst[1]\n\n\ndef test_next_smallest():\n    assert next_smallest([1, 2, 3, 4, 5]) == 2\n    assert next_smallest([5, 1, 4, 3, 2]) == 2\n    assert next_smallest([]) is None\n    assert next_smallest([1, 1]) is None\n    assert next_smallest([0, 1, 2]) == 1\n    assert next_smallest([1, 2, 0]) == 0\n    assert next_smallest([1, 1, 0]) is None\n\n\ndef test_next_smallest_randomized():\n    from random import randint\n    for i in range(100):\n        lst = [randint(0, 100) for i in range(randint(0, 100))]\n        lst.sort()\n        if lst[1] == min(lst):\n            continue\n        assert next_smallest(lst) == lst[1]"
    },
    {
      "rank": 6,
      "score": 9.0,
      "candidate": "if not lst:\n        return None\n    return sorted(set(lst))[1]\n\ndef test_next_smallest():\n    assert next_smallest([1, 2, 3, 4, 5]) == 2\n    assert next_smallest([5, 1, 4, 3, 2]) == 2\n    assert next_smallest([]) == None\n    assert next_smallest([1, 1]) == None\n    assert next_smallest([1, 2, 3, 3, 3, 3, 4]) == 3\n    assert next_smallest([1, 1, 1]) == None\n    assert next_smallest([1, 1, 1, 2]) == 2\n    assert next_smallest([-1, 1, 2, 0, -3, 5]) == 0\n    assert next_smallest([1, 1, 0, 0, -1, 1, 2, 2]) == 0\n\nif __name__ == '__main__':\n    test_next_smallest()"
    },
    {
      "rank": 7,
      "score": 8.0,
      "candidate": "if len(lst) == 0:\n        return None\n    elif len(lst) == 1:\n        return None\n    else:\n        lst.sort()\n        return lst[1]\n    \nif __name__ == '__main__':\n    print(next_smallest([1, 2, 3, 4, 5]))\n    print(next_smallest([5, 1, 4, 3, 2]))\n    print(next_smallest([]))\n    print(next_smallest([1, 1]))"
    },
    {
      "rank": 8,
      "score": 8.0,
      "candidate": "if len(lst) < 2:\n        return None\n    min_val = min(lst)\n    lst.remove(min_val)\n    min_val_2 = min(lst)\n    return min_val_2\n\nif __name__ == '__main__':\n    print(next_smallest([1, 2, 3, 4, 5]))\n    print(next_smallest([5, 1, 4, 3, 2]))\n    print(next_smallest([]))\n    print(next_smallest([1, 1]))"
    },
    {
      "rank": 9,
      "score": 8.0,
      "candidate": "if len(lst) < 2:\n        return None\n    lst.sort()\n    if lst[1] == lst[0]:\n        return None\n    return lst[1]\n\n\ndef test_next_smallest():\n    assert next_smallest([1, 2, 3, 4, 5]) == 2\n    assert next_smallest([5, 1, 4, 3, 2]) == 2\n    assert next_smallest([]) is None\n    assert next_smallest([1, 1]) is None\n    assert next_smallest([1, 1, 0]) == 0\n\n\ndef test_next_smallest_sorted():\n    assert next_smallest([1, 2, 3, 4, 5]) == 2\n    assert next_smallest([5, 1, 4, 3, 2]) == 2\n    assert next_smallest([3, 2, 5, 1, 4]) == 2\n    assert next_smallest([1, 2, 0]) == 0\n    assert next_smallest([2, 2, 0]) is None\n    assert next_smallest([1, 1, 0]) == 0\n    assert next_smallest([1, 2, 3, 4, 5]) == 2\n    assert next_smallest([5, 1, 4, 3, 2]) == 2\n    assert next_smallest([1, 1]) is None\n    assert next_smallest([1, 1, 0]) == 0"
    },
    {
      "rank": 10,
      "score": 8.0,
      "candidate": "# My solution\n    # return sorted(lst)[1]\n\n    # Solution 2\n    # return min(lst[lst.index(min(lst))+1:])\n\n    # Solution 3\n    min_value = min(lst)\n    lst.remove(min_value)\n    return min(lst)\n\n    # Solution 4\n    # return lst[lst.index(min(lst))+1] if min(lst) != min(lst[lst.index(min(lst))+1:]) else None\n\n    # Solution 5\n    # return min(lst[lst.index(min(lst))+1:]) if lst.index(min(lst))+1 != len(lst) else None\n\n    # Solution 6\n    # return lst[lst.index(min(lst))+1] if lst.index(min(lst))+1 < len(lst) else None"
    },
    {
      "rank": 11,
      "score": 8.0,
      "candidate": "if len(lst) <= 2:\n        return None\n    else:\n        lst.sort()\n        return lst[1]\n\n\nif __name__ == '__main__':\n    print(next_smallest([1, 2, 3, 4, 5]))\n    print(next_smallest([5, 1, 4, 3, 2]))\n    print(next_smallest([]))\n    print(next_smallest([1, 1]))"
    },
    {
      "rank": 12,
      "score": 8.0,
      "candidate": "if len(lst) <= 1:\n        return None\n    \n    min_val = min(lst)\n    lst.remove(min_val)\n    sec_min_val = min(lst)\n    lst.append(min_val)\n    return sec_min_val\n\n\nprint(next_smallest([1, 2, 3, 4, 5]))\nprint(next_smallest([5, 1, 4, 3, 2]))\nprint(next_smallest([]))\nprint(next_smallest([1, 1]))"
    },
    {
      "rank": 13,
      "score": 8.0,
      "candidate": "if len(lst) == 0:\n        return None\n\n    if len(lst) == 1:\n        return None\n\n    lst.sort()\n\n    return lst[1]\n\nprint(next_smallest([1, 2, 3, 4, 5]))\nprint(next_smallest([5, 1, 4, 3, 2]))\nprint(next_smallest([]))\nprint(next_smallest([1, 1]))"
    },
    {
      "rank": 14,
      "score": 8.0,
      "candidate": "if len(lst) == 0:\n        return None\n    \n    lst.sort()\n\n    return lst[1]\n\ndef test_next_smallest():\n    assert next_smallest([1, 2, 3, 4, 5]) == 2\n    assert next_smallest([5, 1, 4, 3, 2]) == 2\n    assert next_smallest([]) == None\n    assert next_smallest([1, 1]) == None"
    },
    {
      "rank": 15,
      "score": 8.0,
      "candidate": "if len(lst) < 2:\n        return None\n\n    min_num = lst[0]\n    for num in lst:\n        if num < min_num:\n            min_num = num\n\n    min_num_index = lst.index(min_num)\n    lst = lst[min_num_index + 1:]\n    for num in lst:\n        if num < min_num:\n            return num\n    return None\n\nprint(next_smallest([1, 2, 3, 4, 5]))\nprint(next_smallest([5, 1, 4, 3, 2]))\nprint(next_smallest([]))\nprint(next_smallest([1, 1]))"
    },
    {
      "rank": 16,
      "score": 8.0,
      "candidate": "if len(lst) == 0:\n        return None\n    elif len(lst) == 1:\n        return None\n    else:\n        min_num = min(lst)\n        lst.remove(min_num)\n        next_min = min(lst)\n        return next_min\n\nprint(next_smallest([1, 2, 3, 4, 5]))\nprint(next_smallest([5, 1, 4, 3, 2]))\nprint(next_smallest([]))\nprint(next_smallest([1, 1]))"
    },
    {
      "rank": 17,
      "score": 8.0,
      "candidate": "if len(lst) < 2:\n        return None\n    lst.sort()\n    if lst[1] == lst[0]:\n        return None\n    else:\n        return lst[1]\n\n\nif __name__ == \"__main__\":\n    print(next_smallest([1, 2, 3, 4, 5]))\n    print(next_smallest([5, 1, 4, 3, 2]))\n    print(next_smallest([]))\n    print(next_smallest([1, 1]))"
    },
    {
      "rank": 18,
      "score": 8.0,
      "candidate": "if not lst:\n        return None\n    if len(lst) < 2:\n        return None\n    if len(lst) == 2:\n        if lst[0] > lst[1]:\n            return lst[1]\n        return None\n    \n    lst.sort()\n    if lst[1] == lst[2]:\n        return None\n    return lst[1]\n\n\nif __name__ == \"__main__\":\n    print(next_smallest([1, 2, 3, 4, 5]))\n    print(next_smallest([5, 1, 4, 3, 2]))\n    print(next_smallest([]))\n    print(next_smallest([1, 1]))"
    },
    {
      "rank": 19,
      "score": 8.0,
      "candidate": "if len(lst) < 2:\n        return None\n\n    min_value = min(lst)\n    lst.remove(min_value)\n    second_min_value = min(lst)\n\n    return second_min_value\n\n\nprint(next_smallest([1, 2, 3, 4, 5]))\nprint(next_smallest([5, 1, 4, 3, 2]))\nprint(next_smallest([]))\nprint(next_smallest([1, 1]))"
    },
    {
      "rank": 20,
      "score": 8.0,
      "candidate": "if len(lst) < 2:\n        return None\n    \n    lst.sort()\n    return lst[1]\n\ndef test_next_smallest():\n    assert next_smallest([1, 2, 3, 4, 5]) == 2\n    assert next_smallest([5, 1, 4, 3, 2]) == 2\n    assert next_smallest([]) == None\n    assert next_smallest([1, 1]) == None\n    assert next_smallest([1, 1, 0]) == 0\n\nif __name__ == '__main__':\n    test_next_smallest()"
    },
    {
      "rank": 21,
      "score": 8.0,
      "candidate": "# Your code here\n    if len(lst) <= 1:\n        return None\n    lst.sort()\n    return lst[1]\n\nprint(next_smallest([1, 2, 3, 4, 5]))\nprint(next_smallest([5, 1, 4, 3, 2]))\nprint(next_smallest([]))\nprint(next_smallest([1, 1]))"
    },
    {
      "rank": 22,
      "score": 8.0,
      "candidate": "if len(lst) == 0:\n        return None\n    elif len(lst) == 1:\n        return None\n    else:\n        lst.sort()\n        return lst[1]\n\nprint(next_smallest([1, 2, 3, 4, 5]))\nprint(next_smallest([5, 1, 4, 3, 2]))\nprint(next_smallest([]))\nprint(next_smallest([1, 1]))"
    },
    {
      "rank": 23,
      "score": 8.0,
      "candidate": "if len(lst) < 2:\n        return None\n\n    lst.sort()\n    return lst[1]\n\nprint(next_smallest([1, 2, 3, 4, 5]))\nprint(next_smallest([5, 1, 4, 3, 2]))\nprint(next_smallest([]))\nprint(next_smallest([1, 1]))"
    },
    {
      "rank": 24,
      "score": 8.0,
      "candidate": "if len(lst) < 2:\n        return None\n    lst.sort()\n    return lst[1]\n\ndef test_next_smallest():\n    assert next_smallest([1, 2, 3, 4, 5]) == 2\n    assert next_smallest([5, 1, 4, 3, 2]) == 2\n    assert next_smallest([]) == None\n    assert next_smallest([1, 1]) == None\n    assert next_smallest([1, 1, 0]) == 0\n    assert next_smallest([1, 2, 0]) == 0\n    assert next_smallest([0, 1, 2]) == 1\n    assert next_smallest([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 3\n\nif __name__ == '__main__':\n    test_next_smallest()"
    },
    {
      "rank": 25,
      "score": 8.0,
      "candidate": "if len(lst) < 2:\n        return None\n    else:\n        lst.sort()\n        return lst[1]\n\ndef test_next_smallest():\n    assert next_smallest([1, 2, 3, 4, 5]) == 2\n    assert next_smallest([5, 1, 4, 3, 2]) == 2\n    assert next_smallest([]) == None\n    assert next_smallest([1, 1]) == None\n    assert next_smallest([1, 2, 3, 4, 5]) == 2\n    assert next_smallest([5, 4, 3, 2, 1]) == 3\n    assert next_smallest([5, 1, 3, 2, 4]) == 2\n    assert next_smallest([1, 2, 0]) == 0\n    assert next_smallest([2, 2, 0]) == None\n    assert next_smallest([1, 1, 0]) == None\n\nif __name__ == '__main__':\n    test_next_smallest()"
    },
    {
      "rank": 26,
      "score": 8.0,
      "candidate": "if len(lst) == 0:\n        return None\n    else:\n        lst.sort()\n        if lst[1] == lst[0]:\n            return None\n        else:\n            return lst[1]\n\nprint(next_smallest([1, 2, 3, 4, 5]))\nprint(next_smallest([5, 1, 4, 3, 2]))\nprint(next_smallest([]))\nprint(next_smallest([1, 1]))"
    },
    {
      "rank": 27,
      "score": 8.0,
      "candidate": "if len(lst) < 2:\n        return None\n    lst.sort()\n    return lst[1]\n\n\ndef test_next_smallest():\n    assert next_smallest([1, 2, 3, 4, 5]) == 2\n    assert next_smallest([5, 1, 4, 3, 2]) == 2\n    assert next_smallest([]) == None\n    assert next_smallest([1, 1]) == None\n    assert next_smallest([1, 2, 3, 4, 5, 6]) == 3\n\n\nif __name__ == '__main__':\n    test_next_smallest()"
    },
    {
      "rank": 28,
      "score": 8.0,
      "candidate": "if len(lst) == 0:\n        return None\n    if len(lst) == 1:\n        return None\n    if lst[1] < lst[0]:\n        return lst[1]\n    for i in range(2, len(lst)):\n        if lst[i] < lst[i-1] and lst[i] < lst[i-2]:\n            return lst[i]\n    return None\n\n\nif __name__ == \"__main__\":\n    print(next_smallest([1, 2, 3, 4, 5]))\n    print(next_smallest([5, 1, 4, 3, 2]))\n    print(next_smallest([]))\n    print(next_smallest([1, 1]))"
    },
    {
      "rank": 29,
      "score": 8.0,
      "candidate": "if len(lst) < 2:\n        return None\n    lst.sort()\n    return lst[1]\n\n\ndef test_next_smallest():\n    assert next_smallest([1, 2, 3, 4, 5]) == 2\n    assert next_smallest([5, 1, 4, 3, 2]) == 2\n    assert next_smallest([]) is None\n    assert next_smallest([1, 1]) is None\n    assert next_smallest([1, 2, 1, 2, 3]) == 1\n    assert next_smallest([2, 2, 3, 3, 3]) == 2\n    assert next_smallest([-1, -2]) == -2\n    assert next_smallest([-1]) is None"
    },
    {
      "rank": 30,
      "score": 8.0,
      "candidate": "if len(lst) < 2:\n        return None\n    \n    if len(lst) == 2:\n        if lst[0] == lst[1]:\n            return None\n        else:\n            return lst[0] if lst[0] < lst[1] else lst[1]\n\n    min_val = min(lst)\n    lst = [x for x in lst if x != min_val]\n    return min(lst)\n\nprint(next_smallest([1, 2, 3, 4, 5]))\nprint(next_smallest([5, 1, 4, 3, 2]))\nprint(next_smallest([]))\nprint(next_smallest([1, 1]))"
    },
    {
      "rank": 31,
      "score": 8.0,
      "candidate": "if len(lst) < 2:\n        return None\n\n    # Sort the list\n    lst.sort()\n\n    # Second smallest element is at index 1\n    return lst[1]\n\nif __name__ == \"__main__\":\n    print(next_smallest([1, 2, 3, 4, 5]))\n    print(next_smallest([5, 1, 4, 3, 2]))\n    print(next_smallest([]))\n    print(next_smallest([1, 1]))"
    },
    {
      "rank": 32,
      "score": 8.0,
      "candidate": "if len(lst) < 2:\n        return None\n    elif lst[0] < lst[1]:\n        return lst[0]\n    elif lst[0] > lst[1]:\n        return next_smallest(lst[1:])\n    else:\n        return next_smallest(lst[1:])"
    },
    {
      "rank": 33,
      "score": 8.0,
      "candidate": "if len(lst) < 2:\n        return None\n    lst.sort()\n    return lst[1]\n\nprint(next_smallest([1, 2, 3, 4, 5]))\nprint(next_smallest([5, 1, 4, 3, 2]))\nprint(next_smallest([]))\nprint(next_smallest([1, 1]))"
    },
    {
      "rank": 34,
      "score": 8.0,
      "candidate": "if len(lst) == 0:\n        return None\n    lst.sort()\n    if lst[1] == lst[0]:\n        return None\n    return lst[1]\n\nprint(next_smallest([1, 2, 3, 4, 5]))\nprint(next_smallest([5, 1, 4, 3, 2]))\nprint(next_smallest([]))\nprint(next_smallest([1, 1]))"
    },
    {
      "rank": 35,
      "score": 8.0,
      "candidate": "if len(lst) < 2:\n        return None\n    lst.sort()\n    return lst[1]\n\n\nif __name__ == '__main__':\n    print(next_smallest([1, 2, 3, 4, 5]))\n    print(next_smallest([5, 1, 4, 3, 2]))\n    print(next_smallest([]))\n    print(next_smallest([1, 1]))"
    },
    {
      "rank": 36,
      "score": 8.0,
      "candidate": "if len(lst) < 2:\n        return None\n    lst.sort()\n    return lst[1]\n\n\nif __name__ == '__main__':\n    print(next_smallest([1, 2, 3, 4, 5]))\n    print(next_smallest([5, 1, 4, 3, 2]))\n    print(next_smallest([]))\n    print(next_smallest([1, 1]))\n    print(next_smallest([-2, -5, 0, -3]))"
    },
    {
      "rank": 37,
      "score": 8.0,
      "candidate": "if len(lst) < 2:\n        return None\n\n    lst.sort()\n    return lst[1]\n\n\nif __name__ == \"__main__\":\n    print(next_smallest([1, 2, 3, 4, 5]))\n    print(next_smallest([5, 1, 4, 3, 2]))\n    print(next_smallest([]))\n    print(next_smallest([1, 1]))"
    },
    {
      "rank": 38,
      "score": 8.0,
      "candidate": "if len(lst) < 2:\n        return None\n    else:\n        min_value = min(lst)\n        lst.remove(min_value)\n        min_value = min(lst)\n        return min_value"
    },
    {
      "rank": 39,
      "score": 8.0,
      "candidate": "if not lst:\n        return None\n    elif len(lst) == 1:\n        return None\n    else:\n        lst.sort()\n        if lst[1] < lst[2]:\n            return lst[1]\n        else:\n            return None"
    },
    {
      "rank": 40,
      "score": 8.0,
      "candidate": "if len(lst) < 2:\n        return None\n    \n    lst.sort()\n    return lst[1]\n\n\nprint(next_smallest([1, 2, 3, 4, 5]))\nprint(next_smallest([5, 1, 4, 3, 2]))\nprint(next_smallest([]))\nprint(next_smallest([1, 1]))"
    },
    {
      "rank": 41,
      "score": 8.0,
      "candidate": "if len(lst) < 2:\n        return None\n    lst.sort()\n    return lst[1]\n    \nprint(next_smallest([1, 2, 3, 4, 5]))\nprint(next_smallest([5, 1, 4, 3, 2]))\nprint(next_smallest([]))\nprint(next_smallest([1, 1]))"
    },
    {
      "rank": 42,
      "score": 8.0,
      "candidate": "lst.sort()\n    if len(lst) == 0:\n        return None\n    elif len(lst) == 1:\n        return None\n    else:\n        return lst[1]\n\nprint(next_smallest([1, 2, 3, 4, 5]))\nprint(next_smallest([5, 1, 4, 3, 2]))\nprint(next_smallest([]))\nprint(next_smallest([1, 1]))"
    },
    {
      "rank": 43,
      "score": 8.0,
      "candidate": "if len(lst) < 2:\n        return None\n    else:\n        return sorted(lst)[1]\n\nif __name__ == \"__main__\":\n    print(next_smallest([1, 2, 3, 4, 5]))\n    print(next_smallest([5, 1, 4, 3, 2]))\n    print(next_smallest([]))\n    print(next_smallest([1, 1]))"
    },
    {
      "rank": 44,
      "score": 8.0,
      "candidate": "lst.sort()\n    try:\n        return lst[1]\n    except:\n        return None\n\nif __name__ == \"__main__\":\n    print(next_smallest([1, 2, 3, 4, 5]))\n    print(next_smallest([5, 1, 4, 3, 2]))\n    print(next_smallest([]))\n    print(next_smallest([1, 1]))"
    },
    {
      "rank": 45,
      "score": 8.0,
      "candidate": "if len(lst) < 2:\n        return None\n    lst.sort()\n    return lst[1]\n\nif __name__ == \"__main__\":\n    print(next_smallest([1, 2, 3, 4, 5]))\n    print(next_smallest([5, 1, 4, 3, 2]))\n    print(next_smallest([]))\n    print(next_smallest([1, 1]))"
    },
    {
      "rank": 46,
      "score": 8.0,
      "candidate": "if len(lst) == 0:\n        return None\n    lst.sort()\n    if len(lst) <= 1:\n        return None\n    return lst[1]\n\nprint(next_smallest([1, 2, 3, 4, 5]))\nprint(next_smallest([5, 1, 4, 3, 2]))\nprint(next_smallest([]))\nprint(next_smallest([1, 1]))"
    },
    {
      "rank": 47,
      "score": 8.0,
      "candidate": "if len(lst) < 2:\n        return None\n    lst.sort()\n    return lst[1]\n\n\nif __name__ == '__main__':\n    print(next_smallest([1, 2, 3, 4, 5]))\n    print(next_smallest([5, 1, 4, 3, 2]))\n    print(next_smallest([]))\n    print(next_smallest([1, 1]))"
    },
    {
      "rank": 48,
      "score": 8.0,
      "candidate": "if len(lst) == 0:\n        return None\n    elif len(lst) == 1:\n        return None\n    else:\n        lst.sort()\n        return lst[1]\n\n\nprint(next_smallest([1, 2, 3, 4, 5]))\nprint(next_smallest([5, 1, 4, 3, 2]))\nprint(next_smallest([]))\nprint(next_smallest([1, 1]))"
    },
    {
      "rank": 49,
      "score": 8.0,
      "candidate": "lst = sorted(lst)\n    if len(lst) < 2:\n        return None\n    return lst[1]\n\n\nif __name__ == \"__main__\":\n    print(next_smallest([1, 2, 3, 4, 5]))\n    print(next_smallest([5, 1, 4, 3, 2]))\n    print(next_smallest([]))\n    print(next_smallest([1, 1]))"
    },
    {
      "rank": 50,
      "score": 8.0,
      "candidate": "if len(lst) == 0:\n        return None\n    elif len(lst) == 1:\n        return None\n    else:\n        lst.sort()\n        return lst[1]\n\nprint(next_smallest([1, 2, 3, 4, 5]))\nprint(next_smallest([5, 1, 4, 3, 2]))\nprint(next_smallest([]))\nprint(next_smallest([1, 1]))"
    },
    {
      "rank": 51,
      "score": 8.0,
      "candidate": "if len(lst) < 2:\n        return None\n    elif len(lst) == 2:\n        return min(lst)\n    else:\n        lst.sort()\n        return lst[1]\n\nprint(next_smallest([1, 2, 3, 4, 5]))\nprint(next_smallest([5, 1, 4, 3, 2]))\nprint(next_smallest([]))\nprint(next_smallest([1, 1]))"
    },
    {
      "rank": 52,
      "score": 8.0,
      "candidate": "if len(lst) < 2:\n        return None\n    else:\n        return sorted(lst)[1]\n\nprint(next_smallest([1, 2, 3, 4, 5]))\nprint(next_smallest([5, 1, 4, 3, 2]))\nprint(next_smallest([]))\nprint(next_smallest([1, 1]))"
    },
    {
      "rank": 53,
      "score": 8.0,
      "candidate": "if len(lst) == 0:\n        return None\n    elif len(lst) == 1:\n        return None\n    else:\n        lst.sort()\n        return lst[1]\n\ndef test_next_smallest():\n    assert next_smallest([1, 2, 3, 4, 5]) == 2\n    assert next_smallest([5, 1, 4, 3, 2]) == 2\n    assert next_smallest([]) == None\n    assert next_smallest([1, 1]) == None\n    assert next_smallest([1, 2, 3, 4, 5, 5, 6, 7, 8, 9]) == 3"
    },
    {
      "rank": 54,
      "score": 8.0,
      "candidate": "if len(lst) < 2:\n        return None\n\n    # sort the list in ascending order\n    sorted_lst = sorted(lst)\n\n    # find the first occurence of the second smallest number\n    for i in range(len(sorted_lst)):\n        if sorted_lst[i] != sorted_lst[0]:\n            return sorted_lst[i]\n\n    return None\n\nprint(next_smallest([1, 2, 3, 4, 5]))\nprint(next_smallest([5, 1, 4, 3, 2]))\nprint(next_smallest([]))\nprint(next_smallest([1, 1]))"
    },
    {
      "rank": 55,
      "score": 8.0,
      "candidate": "if len(lst) < 2:\n        return None\n\n    min_val = min(lst)\n    lst.remove(min_val)\n    min_val = min(lst)\n\n    return min_val\n\nprint(next_smallest([1, 2, 3, 4, 5]))\nprint(next_smallest([5, 1, 4, 3, 2]))\nprint(next_smallest([]))\nprint(next_smallest([1, 1]))"
    },
    {
      "rank": 56,
      "score": 8.0,
      "candidate": "if len(lst) < 2:\n        return None\n    lst.sort()\n    return lst[1]\n\n\ndef test_next_smallest():\n    assert next_smallest([1, 2, 3, 4, 5]) == 2\n    assert next_smallest([5, 1, 4, 3, 2]) == 2\n    assert next_smallest([]) is None\n    assert next_smallest([1, 1]) is None\n    assert next_smallest([1, 2, 3, 4, 5, 6, 7]) == 3\n    assert next_smallest([3, 1, 2, 4, 5, 6, 7]) == 3\n    assert next_smallest([1, 2, 3, 4, 3, 6, 7]) == 3\n    assert next_smallest([1, 1, 2, 4, 5, 6, 7]) is None\n    assert next_smallest([1, 1, 1, 4, 5, 6, 7]) is None"
    },
    {
      "rank": 57,
      "score": 8.0,
      "candidate": "if len(lst) < 2:\n        return None\n\n    smallest = lst[0]\n    for i in range(len(lst)):\n        if lst[i] < smallest:\n            smallest = lst[i]\n    \n    for i in range(len(lst)):\n        if lst[i] < smallest:\n            return lst[i]\n\n    return None\n\n\nprint(next_smallest([1, 2, 3, 4, 5]))\nprint(next_smallest([5, 1, 4, 3, 2]))\nprint(next_smallest([]))\nprint(next_smallest([1, 1]))"
    },
    {
      "rank": 58,
      "score": 8.0,
      "candidate": "if len(lst) < 2:\n        return None\n    else:\n        lst.sort()\n        return lst[1]\n\nprint(next_smallest([1, 2, 3, 4, 5]))\nprint(next_smallest([5, 1, 4, 3, 2]))\nprint(next_smallest([]))\nprint(next_smallest([1, 1]))"
    },
    {
      "rank": 59,
      "score": 8.0,
      "candidate": "if len(lst) == 1:\n        return None\n    else:\n        lst.sort()\n        return lst[1]\n\nprint(next_smallest([1, 2, 3, 4, 5]))\nprint(next_smallest([5, 1, 4, 3, 2]))\nprint(next_smallest([]))\nprint(next_smallest([1, 1]))"
    },
    {
      "rank": 60,
      "score": 8.0,
      "candidate": "if len(lst) < 2:\n        return None\n    \n    min_ = min(lst)\n    lst.remove(min_)\n    \n    for i in lst:\n        if i < min_:\n            min_ = i\n    \n    return min_\n\nif __name__ == '__main__':\n    print(next_smallest([1, 2, 3, 4, 5]))\n    print(next_smallest([5, 1, 4, 3, 2]))\n    print(next_smallest([]))\n    print(next_smallest([1, 1]))"
    },
    {
      "rank": 61,
      "score": 8.0,
      "candidate": "if len(lst) < 2:\n        return None\n    lst.sort()\n    return lst[1]\n\n\nprint(next_smallest([1, 2, 3, 4, 5]))\nprint(next_smallest([5, 1, 4, 3, 2]))\nprint(next_smallest([]))\nprint(next_smallest([1, 1]))"
    },
    {
      "rank": 62,
      "score": 8.0,
      "candidate": "if len(lst) == 0:\n        return None\n    else:\n        return min(lst[1:])\n\nprint(next_smallest([1, 2, 3, 4, 5]))\nprint(next_smallest([5, 1, 4, 3, 2]))\nprint(next_smallest([]))\nprint(next_smallest([1, 1]))"
    },
    {
      "rank": 63,
      "score": 8.0,
      "candidate": "# Your code here\n    if len(lst) < 2:\n        return None\n    lst.sort()\n    return lst[1]\n\nprint(next_smallest([1, 2, 3, 4, 5]))\nprint(next_smallest([5, 1, 4, 3, 2]))\nprint(next_smallest([]))\nprint(next_smallest([1, 1]))"
    },
    {
      "rank": 64,
      "score": 8.0,
      "candidate": "if len(lst) < 2:\n        return None\n    lst.sort()\n    return lst[1]\n\n\ndef test_next_smallest():\n    assert next_smallest([1, 2, 3, 4, 5]) == 2\n    assert next_smallest([5, 1, 4, 3, 2]) == 2\n    assert next_smallest([]) is None\n    assert next_smallest([1, 1]) is None"
    },
    {
      "rank": 65,
      "score": 8.0,
      "candidate": "pass\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 66,
      "score": 8.0,
      "candidate": "if len(lst) < 2:\n        return None\n    else:\n        lst.sort()\n        return lst[1]\n\ndef test_next_smallest():\n    assert next_smallest([1, 2, 3, 4, 5]) == 2\n    assert next_smallest([5, 1, 4, 3, 2]) == 2\n    assert next_smallest([]) == None\n    assert next_smallest([1, 1]) == None\n    assert next_smallest([-1, -2]) == None\n    assert next_smallest([-2, -1]) == -1\n    assert next_smallest([0, 1, 2, 3, 3, 3, 3, 4, 5, 5, 5]) == 3\n    assert next_smallest([1, 1, 2, 3, 3, 3, 3, 4, 5, 5, 5]) == 2\n    assert next_smallest([1, 2, 3, 4, 5, 5, 5, 6, 7, 7, 7]) == 5\n    assert next_smallest([1, 2, 3, 4, 5, 6, 7, 7, 7, 7, 8]) == 7\n    assert next_smallest([1, 1, 1, 5, 5, 5, 6, 6, 6, 7, 7]) == 5\n    assert next_smallest([1, 1, 2, 2, 3, 5, 5, 6, 6, 7, 7]) == 2\n    assert next_smallest([2, 3, 3, 3, 4, 4, 5, 5, 6, 7, 7]) == 3\n    assert next_smallest([2, 2, 2, 4, 4, 5, 5, 6, 7, 7, 7]) == 4"
    },
    {
      "rank": 67,
      "score": 8.0,
      "candidate": "# check if list is empty\n    if len(lst) == 0:\n        return None\n\n    # check if list has only 1 element\n    if len(lst) == 1:\n        return None\n\n    # create a variable to track the smallest element\n    smallest = lst[0]\n\n    # iterate through the list\n    for i in range(len(lst)):\n\n        # compare the current element to the smallest\n        if lst[i] < smallest:\n\n            # if current element is smaller than smallest, set it as smallest\n            smallest = lst[i]\n    \n    # create a variable to track the next smallest element\n    next_smallest = None\n\n    # iterate through the list\n    for i in range(len(lst)):\n\n        # compare the current element to the smallest\n        if lst[i] > smallest and next_smallest is None:\n\n            # if current element is smaller than smallest, set it as smallest\n            next_smallest = lst[i]\n\n        # if current element is smaller than next smallest\n        elif lst[i] < next_smallest:\n\n            # set current element as next smallest\n            next_smallest = lst[i]\n    \n    return next_smallest\n\n\nprint(next_smallest([1, 2, 3, 4, 5]))\nprint(next_smallest([5, 1, 4, 3, 2]))\nprint(next_smallest([]))\nprint(next_smallest([1, 1]))"
    },
    {
      "rank": 68,
      "score": 8.0,
      "candidate": "if len(lst) < 2:\n        return None\n    else:\n        lst.sort()\n        return lst[1]\n\n\nif __name__ == \"__main__\":\n    print(next_smallest([1, 2, 3, 4, 5]))\n    print(next_smallest([5, 1, 4, 3, 2]))\n    print(next_smallest([]))\n    print(next_smallest([1, 1]))"
    },
    {
      "rank": 69,
      "score": 8.0,
      "candidate": "lst.sort()\n    if len(lst) < 2:\n        return None\n    else:\n        return lst[1]\n\n\nprint(next_smallest([1, 2, 3, 4, 5]))\nprint(next_smallest([5, 1, 4, 3, 2]))\nprint(next_smallest([]))\nprint(next_smallest([1, 1]))"
    },
    {
      "rank": 70,
      "score": 8.0,
      "candidate": "if len(lst) < 2:\n        return None\n    else:\n        smallest = min(lst)\n        lst.remove(smallest)\n        next_smallest = min(lst)\n        return next_smallest\n\n\ndef test_next_smallest():\n    assert next_smallest([1, 2, 3, 4, 5]) == 2\n    assert next_smallest([5, 1, 4, 3, 2]) == 2\n    assert next_smallest([]) == None\n    assert next_smallest([1, 1]) == None"
    },
    {
      "rank": 71,
      "score": 8.0,
      "candidate": "lst.sort()\n    if len(lst) >= 2:\n        return lst[1]\n    else:\n        return None\n\n\nprint(next_smallest([1, 2, 3, 4, 5]))\nprint(next_smallest([5, 1, 4, 3, 2]))\nprint(next_smallest([]))\nprint(next_smallest([1, 1]))"
    },
    {
      "rank": 72,
      "score": 8.0,
      "candidate": "if len(lst) < 2:\n        return None\n    min_1 = min(lst)\n    lst.remove(min_1)\n    if min(lst) < min_1:\n        return min(lst)\n    else:\n        return None\n\n\nprint(next_smallest([1, 2, 3, 4, 5]))\nprint(next_smallest([5, 1, 4, 3, 2]))\nprint(next_smallest([]))\nprint(next_smallest([1, 1]))"
    },
    {
      "rank": 73,
      "score": 8.0,
      "candidate": "if len(lst) == 0:\n        return None\n    lst.sort()\n    return lst[1]\n\n\nprint(next_smallest([1, 2, 3, 4, 5]))\nprint(next_smallest([5, 1, 4, 3, 2]))\nprint(next_smallest([]))\nprint(next_smallest([1, 1]))"
    },
    {
      "rank": 74,
      "score": 1.0,
      "candidate": "# My and best solutions\n    if len(lst) < 2:\n        return None\n\n    lst.sort()\n    return lst[1]\n\n\ndef next_smallest_best(lst):\n    \"\"\"\n    Best solution\n    \"\"\"\n\n    if len(lst) < 2:\n        return None\n\n    return sorted(lst)[1]\n\n\ndef next_smallest_best_2(lst):\n    \"\"\"\n    Best solution\n    \"\"\"\n\n    if len(lst) < 2:\n        return None\n\n    return sorted(lst)[1]\n\n\ndef next_smallest_best_3(lst):\n    \"\"\"\n    Best solution\n    \"\"\"\n\n    if len(lst) < 2:\n        return None\n\n    return sorted(lst)[1]\n\n\ndef next_smallest_best_4(lst):\n    \"\"\"\n    Best solution\n    \"\"\"\n\n    if len(lst) < 2:\n        return None\n\n    return sorted(lst)[1]\n\n\ndef next_smallest_best_5(lst):\n    \"\"\"\n    Best solution\n    \"\"\"\n\n    if len(lst) < 2:\n        return None\n\n    return sorted(lst)[1]\n\n\ndef next_smallest_best_6(lst):\n    \"\"\"\n    Best solution\n    \"\"\"\n\n    if len(lst) < 2:\n        return None\n\n    return sorted(lst)[1]\n\n\ndef next_smallest_best_7(lst):\n    \"\"\"\n    Best solution\n    \"\"\"\n\n    if len(lst) < 2:\n        return None\n\n    return sorted(lst)[1]\n\n\ndef next_smallest_best_8(lst):\n    \"\"\"\n    Best solution\n    \"\"\"\n\n    if len(lst) < 2:\n        return None\n\n    return sorted(lst)[1]"
    },
    {
      "rank": 75,
      "score": 1.0,
      "candidate": "pass"
    },
    {
      "rank": 76,
      "score": 1.0,
      "candidate": "# sort the list\n    lst.sort()\n\n    # return the second element if the list has at least two elements\n    if len(lst) >= 2:\n        return lst[1]\n\n    # otherwise return None\n    return None\n\n\ndef test_next_smallest():\n    assert next_smallest([1, 2, 3, 4, 5]) == 2\n    assert next_smallest([5, 1, 4, 3, 2]) == 2\n    assert next_smallest([]) is None\n    assert next_smallest([1, 1]) is None\n    assert next_smallest([1, 2, 1, 2]) == 1\n    assert next_smallest([2, 1, 2, 1]) == 1\n    assert next_smallest([1, 5, 1, 5]) == 1\n    assert next_smallest([1, 2, 3, 1, 2, 3]) == 1\n    assert next_smallest([1, 2, 3, 4, 3, 2, 1]) == 2\n    assert next_smallest([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 3\n\n\ndef main():\n    test_next_smallest()\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 77,
      "score": 1.0,
      "candidate": "if len(lst) == 0:\n        return None\n    if len(lst) == 1:\n        return None\n    smallest = None\n    second_smallest = None\n    for item in lst:\n        if smallest is None:\n            smallest = item\n        if item < smallest:\n            second_smallest = smallest\n            smallest = item\n        elif second_smallest is None:\n            second_smallest = item\n        elif item < second_smallest:\n            second_smallest = item\n    return second_smallest\n\n\ndef test_next_smallest():\n    assert next_smallest([1, 2, 3, 4, 5]) == 2\n    assert next_smallest([5, 1, 4, 3, 2]) == 2\n    assert next_smallest([]) is None\n    assert next_smallest([1, 1]) is None\n    assert next_smallest([1, 2, 3, 4, 5, 5]) == 3\n    assert next_smallest([-1, -2]) == -1\n    assert next_smallest([-1, -2, -3]) == -2\n\n\nif __name__ == '__main__':\n    test_next_smallest()"
    },
    {
      "rank": 78,
      "score": 1.0,
      "candidate": "if not lst or len(lst) < 2:\n        return None\n    lst.sort()\n    return lst[1]\n\n\ndef test_next_smallest():\n    assert next_smallest([1, 2, 3, 4, 5]) == 2\n    assert next_smallest([5, 1, 4, 3, 2]) == 2\n    assert next_smallest([]) is None\n    assert next_smallest([1, 1]) is None\n    assert next_smallest([1, 2, 3, 0, 4, 5]) == 0\n    assert next_smallest([1, 1, 3, 3, 3, 4, 4]) == 3\n\n\ndef test_benchmark_next_smallest():\n    import timeit\n\n    print(\"{} second(s) taken\".format(timeit.timeit(\n        \"next_smallest([1, 2, 3, 4, 5])\", setup=\"from __main__ import next_smallest\"\n    ), ))\n    print(\"{} second(s) taken\".format(timeit.timeit(\n        \"next_smallest([5, 1, 4, 3, 2])\", setup=\"from __main__ import next_smallest\"\n    ), ))\n    print(\"{} second(s) taken\".format(timeit.timeit(\n        \"next_smallest([])\", setup=\"from __main__ import next_smallest\"\n    ), ))\n    print(\"{} second(s) taken\".format(timeit.timeit(\n        \"next_smallest([1, 1])\", setup=\"from __main__ import next_smallest\"\n    ), ))\n    print(\"{} second(s) taken\".format(timeit.timeit(\n        \"next_smallest([1, 2, 3, 0, 4, 5])\", setup=\"from __main__ import next_smallest\"\n    ), ))\n    print(\"{} second(s) taken\".format(timeit.timeit(\n        \"next_smallest([1, 1, 3, 3, 3"
    },
    {
      "rank": 79,
      "score": 1.0,
      "candidate": "if len(lst) == 0:\n        return None\n\n    # sort the list in place\n    lst.sort()\n\n    # return the second element of the list\n    return lst[1]\n\n\n# tests\ndef test_next_smallest():\n    assert next_smallest([1, 2, 3, 4, 5]) == 2\n    assert next_smallest([5, 1, 4, 3, 2]) == 2\n    assert next_smallest([]) == None\n    assert next_smallest([1, 1]) == None\n    assert next_smallest([-2, -1, 0, 3, 10]) == 0\n    assert next_smallest([-2, -1, 0, 3, 10, 12]) == 0\n    assert next_smallest([-2, -1, 0, 3, 10, 12, 14]) == 3\n    assert next_smallest([-2, -1, 0, 3, 10, 12, 14, 15]) == 3\n    assert next_smallest([-2, -1, 0, 3, 10, 12, 14, 15, 16]) == 3\n    assert next_smallest([-2, -1, 0, 3, 10, 12, 14, 15, 16, 17]) == 3\n    assert next_smallest([-2, -1, 0, 3, 10, 12, 14, 15, 16, 17, 18]) == 3\n\n\nif __name__ == '__main__':\n    test_next_smallest()"
    },
    {
      "rank": 80,
      "score": 1.0,
      "candidate": "# Your code here\n    if len(lst) < 2:\n        return None\n    \n    sorted_lst = sorted(lst)\n    for i in range(len(sorted_lst) - 1):\n        if sorted_lst[i] < sorted_lst[i + 1]:\n            return sorted_lst[i + 1]\n    return None\n\n\ndef test_function():\n    assert next_smallest([1, 2, 3, 4, 5]) == 2\n    assert next_smallest([5, 1, 4, 3, 2]) == 2\n    assert next_smallest([]) == None\n    assert next_smallest([1, 1]) == None\n    assert next_smallest([-2, -1, 0, 1, 2]) == 0\n    assert next_smallest([2, 1, 3, 4, 2]) == 2\n    assert next_smallest([1, 2, 0, 3, 4]) == 0\n    assert next_smallest([1, 2, 3, 0, 3]) == 0\n    assert next_smallest([1, 1, 0, 3, 3]) == 0\n    assert next_smallest([2, 2, 0, 3, 3]) == 0\n    assert next_smallest([1, 1, 1, 0, 3]) == 0\n    assert next_smallest([1, 1, 1, 1, 0]) == None"
    },
    {
      "rank": 81,
      "score": 1.0,
      "candidate": "pass\n\nif __name__ == '__main__':\n    print(next_smallest([1, 2, 3, 4, 5]))\n    print(next_smallest([5, 1, 4, 3, 2]))\n    print(next_smallest([]))\n    print(next_smallest([1, 1]))"
    },
    {
      "rank": 82,
      "score": 1.0,
      "candidate": "if len(lst) == 0:\n        return None\n    lst.sort()\n    return lst[1]\n\n\n\ndef test_next_smallest():\n    assert next_smallest([1, 2, 3, 4, 5]) == 2\n    assert next_smallest([5, 1, 4, 3, 2]) == 2\n    assert next_smallest([]) == None\n    assert next_smallest([1, 1]) == None\n    assert next_smallest([1, 2, 3, 4, 5, 3]) == 3\n    assert next_smallest([5, 4, 3, 2, 1]) == 2\n    assert next_smallest([2, 2, 1, 0]) == 0\n    assert next_smallest([2, 0, 0, 1]) == 1\n    assert next_smallest([2, 0, 1, 1]) == 1\n    assert next_smallest([2, 2, 0, 1]) == 1\n    assert next_smallest([2, 2, 1, 0]) == 0\n    assert next_smallest([2, 3, 1, 0]) == 1\n    assert next_smallest([2, 3, 0, 1]) == 1\n    assert next_smallest([1, 2, 3, 4, 5, 5]) == 3\n    assert next_smallest([1, 2, 3, 3, 4, 5]) == 3\n    assert next_smallest([1, 2, 3, 3, 4, 3]) == 3\n    assert next_smallest([1, 2, 3, 3, 4, 5, 5]) == 3\n    assert next_smallest([1, 2, 2, 3, 4, 3]) == 3\n    assert next_smallest([1, 2, 2, 3, 4, 3, 3]) == 3\n    assert next_smallest([1, 2, 2,"
    },
    {
      "rank": 83,
      "score": 1.0,
      "candidate": "if len(lst) < 2:\n        return None\n\n    lst.sort()\n    return lst[1]\n\n\ndef test_next_smallest():\n    assert next_smallest([1, 2, 3, 4, 5]) == 2\n    assert next_smallest([5, 1, 4, 3, 2]) == 2\n    assert next_smallest([]) == None\n    assert next_smallest([1, 1]) == None\n    assert next_smallest([1, 2, 3, 4, 5, 5]) == 3\n    assert next_smallest([-1, -2]) == None\n    assert next_smallest([10, 3, 5, 100, 1]) == 3\n    assert next_smallest([1, 1, 0]) == 0\n    assert next_smallest([1, 2, 0, 3]) == 0\n    assert next_smallest([1, 1, 1, 0]) == 0\n    assert next_smallest([1, 2, 3, 0]) == 0\n    assert next_smallest([1, 1, 1, 1]) == None\n    assert next_smallest([1, 2, 3, 3]) == None\n    assert next_smallest([-1, -3, -5]) == None"
    },
    {
      "rank": 84,
      "score": 1.0,
      "candidate": "if len(lst) == 0:\n        return None\n    if len(lst) == 1:\n        return None\n    lst.sort()\n    return lst[1]\n\nprint(next_smallest([1, 2, 3, 4, 5]))\nprint(next_smallest([5, 1, 4, 3, 2]))\nprint(next_smallest([]))\nprint(next_smallest([1, 1]))\n\n# def next_smallest(lst):\n#     if len(lst) == 0:\n#         return None\n#     elif len(lst) == 1:\n#         return None\n#     else:\n#         lst.sort()\n#         return lst[1]\n\n# print(next_smallest([1, 2, 3, 4, 5]))\n# print(next_smallest([5, 1, 4, 3, 2]))\n# print(next_smallest([]))\n# print(next_smallest([1, 1]))"
    },
    {
      "rank": 85,
      "score": 1.0,
      "candidate": "if len(lst) == 0:\n        return None\n    lst.sort()\n    if lst[1] == lst[0]:\n        return None\n    return lst[1]\n\ndef test_next_smallest():\n    assert next_smallest([1, 2, 3, 4, 5]) == 2\n    assert next_smallest([5, 1, 4, 3, 2]) == 2\n    assert next_smallest([]) == None\n    assert next_smallest([1, 1]) == None\n\nif __name__ == '__main__':\n    test_next_smallest()"
    },
    {
      "rank": 86,
      "score": 1.0,
      "candidate": "if not lst:\n        return None\n    if len(lst) < 2:\n        return None\n    # TODO: YOUR CODE HERE\n    lst.sort()\n    return lst[1]\n\n\ndef next_smallest_enumerate(lst):\n    \"\"\"\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5, 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1]) == None\n    \"\"\"\n    if not lst:\n        return None\n    if len(lst) < 2:\n        return None\n    # TODO: YOUR CODE HERE\n    min_value = min(lst)\n    for i in range(len(lst)):\n        if lst[i] > min_value and lst[i] < max(lst):\n            return lst[i]\n    return None\n\n\ndef next_smallest_enumerate_v2(lst):\n    \"\"\"\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5, 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1]) == None\n    \"\"\"\n    if not lst:\n        return None\n    if len(lst) < 2:\n        return None\n    # TODO: YOUR CODE HERE\n    min_value = min(lst)\n    for i in range(len(lst)):\n        if lst[i] > min_value and lst[i] < max(lst):\n            return lst[i]\n    return None\n\n\nif __name__ == '__main"
    },
    {
      "rank": 87,
      "score": 1.0,
      "candidate": "# Your code here\n    if len(lst) < 2:\n        return None\n    lst.sort()\n    return lst[1]\n\n\nif __name__ == \"__main__\":\n    print(next_smallest([1, 2, 3, 4, 5]))\n    print(next_smallest([5, 1, 4, 3, 2]))\n    print(next_smallest([]))\n    print(next_smallest([1, 1]))\n    print(next_smallest([5, 5, 5, 5]))"
    },
    {
      "rank": 88,
      "score": 1.0,
      "candidate": "if not lst:\n        return None\n    elif len(lst) == 1:\n        return None\n    else:\n        return sorted(lst)[1]\n\n\ndef test_next_smallest():\n    assert next_smallest([1, 2, 3, 4, 5]) == 2\n    assert next_smallest([5, 1, 4, 3, 2]) == 2\n    assert next_smallest([]) is None\n    assert next_smallest([1, 1]) is None\n    assert next_smallest([1, 2, 1]) == 1\n    assert next_smallest([1, 2, 3, 4, 3, 2]) == 2\n    assert next_smallest([1, 2, 3, 4, 5, 5]) == 3\n    assert next_smallest([1, 2, 3, 4, 5, 6]) == 3\n    assert next_smallest([1, 2, 3, 4, 5, 6, 7]) == 3\n    assert next_smallest([7, 1, 2, 3, 4, 5, 6]) == 3\n    assert next_smallest([10, 1, 2, 3, 4, 5, 6, 7]) == 3\n    assert next_smallest([-1, -2, -3, -4, -5, -6, -7]) == -2\n\n\nif __name__ == '__main__':\n    test_next_smallest()"
    },
    {
      "rank": 89,
      "score": 1.0,
      "candidate": "# Your code here\n    if len(lst) < 2:\n        return None\n    if len(lst) == 2:\n        return None if lst[0] == lst[1] else lst[0] if lst[0] < lst[1] else lst[1]\n    lst.sort()\n    if lst[1] == lst[2]:\n        return None\n    return lst[1]\n\n\nprint(next_smallest([1, 2, 3, 4, 5]))\nprint(next_smallest([5, 1, 4, 3, 2]))\nprint(next_smallest([]))\nprint(next_smallest([1, 1]))"
    },
    {
      "rank": 90,
      "score": 1.0,
      "candidate": "if len(lst) == 0:\n        return None\n    elif len(lst) == 1:\n        return None\n    else:\n        lst.sort()\n        return lst[1]\n\nprint(next_smallest([1, 2, 3, 4, 5]))\nprint(next_smallest([5, 1, 4, 3, 2]))\nprint(next_smallest([]))\nprint(next_smallest([1, 1]))\n\n# This solution is O(n) time complexity and O(n) space complexity\n\n# Can we do better?\n\ndef next_smallest(lst):\n    \"\"\"\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5, 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1]) == None\n    \"\"\"\n\n    if len(lst) == 0:\n        return None\n    elif len(lst) == 1:\n        return None\n    else:\n        lst.sort()\n        return lst[1]\n\nprint(next_smallest([1, 2, 3, 4, 5]))\nprint(next_smallest([5, 1, 4, 3, 2]))\nprint(next_smallest([]))\nprint(next_smallest([1, 1]))"
    },
    {
      "rank": 91,
      "score": 1.0,
      "candidate": "# Your code here\n    if len(lst) == 0:\n        return None\n    if len(lst) == 1:\n        return None\n    if len(lst) == 2:\n        return None\n    lst.sort()\n    for i in range(len(lst)):\n        if lst[i] != lst[0]:\n            return lst[i]\n\nprint(next_smallest([1, 2, 3, 4, 5]))\nprint(next_smallest([5, 1, 4, 3, 2]))\nprint(next_smallest([]))\nprint(next_smallest([1, 1]))"
    },
    {
      "rank": 92,
      "score": 1.0,
      "candidate": "if len(lst) < 2:\n        return None\n    lst.sort()\n    return lst[1]\n\n\ndef test_function():\n    assert next_smallest([1, 2, 3, 4, 5]) == 2\n    assert next_smallest([5, 1, 4, 3, 2]) == 2\n    assert next_smallest([]) == None\n    assert next_smallest([1, 1]) == None\n    assert next_smallest([1, 0]) == 0\n    assert next_smallest([10, 3, 5, 12, 8, 7]) == 5\n    assert next_smallest([10, 3, 5, 1, 8, 7]) == 1"
    },
    {
      "rank": 93,
      "score": 1.0,
      "candidate": "if len(lst) < 2:\n        return None\n    lst.sort()\n    return lst[1]\n    \nprint(next_smallest([1, 2, 3, 4, 5]))\nprint(next_smallest([5, 1, 4, 3, 2]))\nprint(next_smallest([]))\nprint(next_smallest([1, 1]))\n\n# \n# def next_smallest(lst):\n#     if len(lst) < 2:\n#         return None\n#     lst.sort()\n#     return lst[1]\n\n# print(next_smallest([1, 2, 3, 4, 5]))\n# print(next_smallest([5, 1, 4, 3, 2]))\n# print(next_smallest([]))\n# print(next_smallest([1, 1]))\n\n# \n# def next_smallest(lst):\n#     if len(lst) < 2:\n#         return None\n#     lst.sort()\n#     return lst[1]\n\n# print(next_smallest([1, 2, 3, 4, 5]))\n# print(next_smallest([5, 1, 4, 3, 2]))\n# print(next_smallest([]))\n# print(next_smallest([1, 1]))"
    },
    {
      "rank": 94,
      "score": 1.0,
      "candidate": "if len(lst) == 0:\n        return None\n    if len(lst) == 1:\n        return None\n    lst.sort()\n    return lst[1]\n\ndef test_next_smallest():\n    assert next_smallest([1, 2, 3, 4, 5]) == 2\n    assert next_smallest([5, 1, 4, 3, 2]) == 2\n    assert next_smallest([]) == None\n    assert next_smallest([1, 1]) == None\n    assert next_smallest([0, 1, 1, 1, 1]) == 0\n    assert next_smallest([1000000, 1000000, 1000000]) == None\n\nif __name__ == '__main__':\n    test_next_smallest()"
    },
    {
      "rank": 95,
      "score": 1.0,
      "candidate": "if len(lst) < 2:\n        return None\n    \n    smallest = None\n    second_smallest = None\n    for item in lst:\n        if smallest is None or item < smallest:\n            second_smallest = smallest\n            smallest = item\n        elif second_smallest is None or item < second_smallest:\n            second_smallest = item\n\n    return second_smallest\n\n\ndef next_smallest_b(lst):\n    if len(lst) < 2:\n        return None\n    else:\n        lst.sort()\n        return lst[1]\n\n\nprint(next_smallest([1, 2, 3, 4, 5]))\nprint(next_smallest([5, 1, 4, 3, 2]))\nprint(next_smallest([]))\nprint(next_smallest([1, 1]))"
    },
    {
      "rank": 96,
      "score": 1.0,
      "candidate": "if not lst:\n        return None\n    if len(lst) == 1:\n        return None\n    if len(lst) == 2:\n        return None\n    lst.sort()\n    for i in range(len(lst)):\n        if lst[i] != lst[0]:\n            return lst[i]\n        \nprint(next_smallest([1, 2, 3, 4, 5]))\nprint(next_smallest([5, 1, 4, 3, 2]))\nprint(next_smallest([]))\nprint(next_smallest([1, 1]))"
    },
    {
      "rank": 97,
      "score": 1.0,
      "candidate": "# Your code here\n    if len(lst) < 2:\n        return None\n    if len(lst) == 2:\n        if lst[0] == lst[1]:\n            return None\n        else:\n            return lst[1]\n    lst.sort()\n    if lst[1] != lst[2]:\n        return lst[2]\n    else:\n        return None\n\n\nprint(next_smallest([1, 2, 3, 4, 5]))\nprint(next_smallest([5, 1, 4, 3, 2]))\nprint(next_smallest([]))\nprint(next_smallest([1, 1]))"
    },
    {
      "rank": 98,
      "score": 1.0,
      "candidate": "if len(lst) < 2:\n        return None\n    elif len(lst) == 2:\n        if lst[0] == lst[1]:\n            return None\n        else:\n            return lst[1]\n    else:\n        return sorted(lst)[1]\n\n\ndef test_next_smallest():\n    assert next_smallest([1, 2, 3, 4, 5]) == 2\n    assert next_smallest([5, 1, 4, 3, 2]) == 2\n    assert next_smallest([]) == None\n    assert next_smallest([1, 1]) == None"
    },
    {
      "rank": 99,
      "score": 1.0,
      "candidate": "# return sorted(lst)[1]\n    return sorted(lst)[1] if len(lst) > 1 else None\n\n\ndef test_function():\n    assert next_smallest([1, 2, 3, 4, 5]) == 2\n    assert next_smallest([5, 1, 4, 3, 2]) == 2\n    assert next_smallest([]) is None\n    assert next_smallest([1, 1]) is None\n    assert next_smallest([1, 2, 1]) == 1\n    assert next_smallest([1, 1, 0]) == 0\n    assert next_smallest([5, 3, 2, 1, 0]) == 1\n    assert next_smallest([5, 3, 10, 1, 0]) == 3\n    assert next_smallest([3, 3, 3]) is None\n    assert next_smallest([1, 1, 2]) == 1\n    assert next_smallest([1, 2, 2]) == 1\n    assert next_smallest([1, 2, 2, 0]) == 0\n    assert next_smallest([1, 3, 2, 0]) == 1\n    assert next_smallest([3, 3, 2, 0]) == 0\n    assert next_smallest([3, 3, 2]) == 2\n    print(\"Test completed!\")\n\n\nif __name__ == '__main__':\n    test_function()"
    },
    {
      "rank": 100,
      "score": 1.0,
      "candidate": "if len(lst) < 2:\n        return None\n    lst.sort()\n    return lst[1]\n\n\ndef test_next_smallest():\n    assert next_smallest([1, 2, 3, 4, 5]) == 2\n    assert next_smallest([5, 1, 4, 3, 2]) == 2\n    assert next_smallest([]) == None\n    assert next_smallest([1, 1]) == None\n    assert next_smallest([1, 2, 3, 4, 5, 5]) == 3\n\n\nif __name__ == '__main__':\n    test_next_smallest()"
    }
  ]
}