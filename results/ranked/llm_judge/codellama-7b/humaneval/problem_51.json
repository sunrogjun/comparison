{
  "timestamp": "2025-09-14T21:27:37.029975",
  "method": "improved_llm_judge",
  "judge_model": "codellama/CodeLlama-7b-Python-hf",
  "target_model": "codellama-7b",
  "dataset": "humaneval",
  "problem_number": 51,
  "total_candidates": 100,
  "results": [
    {
      "rank": 1,
      "score": 10.0,
      "candidate": "text = text.lower()\n    vowels = 'aeiou'\n    for vowel in vowels:\n        text = text.replace(vowel, '')\n    return text\n\n\ndef remove_duplicates(text):\n    \"\"\"\n    remove_duplicates is a function that takes string and returns string without duplicates.\n    >>> remove_duplicates('')\n    ''\n    >>> remove_duplicates(\"abcdef\\nghijklm\")\n    'abcdef\\nghjklm'\n    >>> remove_duplicates('abcdef')\n    'abcdef'\n    >>> remove_duplicates('aaaaa')\n    'a'\n    >>> remove_duplicates('aaBAA')\n    'aBa'\n    >>> remove_duplicates('zbcd')\n    'zbcd'\n    \"\"\"\n    text = text.lower()\n    return ''.join(set(text))\n\n\ndef remove_duplicates_list(text):\n    \"\"\"\n    remove_duplicates_list is a function that takes string and returns list without duplicates.\n    >>> remove_duplicates_list('')\n    []\n    >>> remove_duplicates_list(\"abcdef\\nghijklm\")\n    ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm']\n    >>> remove_duplicates_list('abcdef')\n    ['a', 'b', 'c', 'd', 'e', 'f']\n    >>> remove_duplicates_list('aaaaa')\n    ['a']\n    >>> remove_duplicates_list('aaBAA')\n    ['a', 'B']\n    >>> remove_duplicates_list('zbcd')\n    ['z', 'b', 'c', 'd']\n    \"\"\"\n    text = text.lower()\n    return list(set(text))\n\n\ndef get_index(text, index):\n    \"\"\"\n    get_index is a function that takes string and index and returns the letter at that index.\n    >>> get_index('', 0)\n    ''\n    >>> get_index('abcdef', 2)\n    'c'\n    >>>"
    },
    {
      "rank": 2,
      "score": 10.0,
      "candidate": "return \"\".join(c for c in text if c.lower() not in \"aeiou\")\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 3,
      "score": 10.0,
      "candidate": "vowels = 'aAeEiIoOuU'\n    return ''.join(char for char in text if char not in vowels)\n\n\ndef remove_vowels_regex(text):\n    \"\"\"\n    remove_vowels_regex is a function that takes string and returns string without vowels.\n    >>> remove_vowels_regex('')\n    ''\n    >>> remove_vowels_regex(\"abcdef\\nghijklm\")\n    'bcdf\\nghjklm'\n    >>> remove_vowels_regex('abcdef')\n    'bcdf'\n    >>> remove_vowels_regex('aaaaa')\n    ''\n    >>> remove_vowels_regex('aaBAA')\n    'B'\n    >>> remove_vowels_regex('zbcd')\n    'zbcd'\n    \"\"\"\n    import re\n    return re.sub('[aeiou]', '', text, flags=re.IGNORECASE)\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 4,
      "score": 10.0,
      "candidate": "return ''.join([i for i in text if i.lower() not in 'aeiou'])\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 5,
      "score": 10.0,
      "candidate": "vowels = 'aeiouAEIOU'\n    for v in vowels:\n        text = text.replace(v, '')\n    return text\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 6,
      "score": 10.0,
      "candidate": "return ''.join(c for c in text if c not in 'aeiou')\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 7,
      "score": 10.0,
      "candidate": "return ''.join(filter(lambda x: x not in 'aeiou', text))\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 8,
      "score": 10.0,
      "candidate": "text = text.replace(\"a\", \"\").replace(\"e\", \"\").replace(\"i\", \"\").replace(\"o\", \"\").replace(\"u\", \"\")\n    return text\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 9,
      "score": 10.0,
      "candidate": "return ''.join(filter(lambda x: x not in 'aeiou', text))\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 10,
      "score": 10.0,
      "candidate": "return ''.join(filter(lambda c: c not in 'aeiouAEIOU', text))\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 11,
      "score": 10.0,
      "candidate": "text = text.lower()\n    return \"\".join([c for c in text if c not in \"aeiou\"])\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 12,
      "score": 10.0,
      "candidate": "return ''.join(char for char in text if char.lower() not in 'aeiou')\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 13,
      "score": 10.0,
      "candidate": "vowels = 'aeiou'\n    return ''.join([i for i in text if i.lower() not in vowels])\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 14,
      "score": 10.0,
      "candidate": "# return ''.join([i for i in text if i.lower() not in 'aeiou'])\n    return ''.join(i for i in text if i.lower() not in 'aeiou')\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod(verbose=True)"
    },
    {
      "rank": 15,
      "score": 10.0,
      "candidate": "return text.translate(str.maketrans('', '', 'aeiou'))\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 16,
      "score": 10.0,
      "candidate": "return ''.join(c for c in text if c not in 'aeiou')\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 17,
      "score": 10.0,
      "candidate": "return ''.join(ch for ch in text if ch.lower() not in 'aeiou')\n\n\ndef replace_vowels(text):\n    \"\"\"\n    replace_vowels is a function that takes string and returns string with all vowels replaced by '*' character.\n    >>> replace_vowels('')\n    ''\n    >>> replace_vowels(\"abcdef\\nghijklm\")\n    '**c**d**f\\n**h**j**k**l**m'\n    >>> replace_vowels('abcdef')\n    '**c**d**f'\n    >>> replace_vowels('aaaaa')\n    '*****'\n    >>> replace_vowels('aaBAA')\n    '**B**'\n    >>> replace_vowels('zbcd')\n    'zbcd'\n    \"\"\"\n    return ''.join('*' if ch.lower() in 'aeiou' else ch for ch in text)\n\n\ndef remove_consonants(text):\n    \"\"\"\n    remove_consonants is a function that takes string and returns string without consonants.\n    >>> remove_consonants('')\n    ''\n    >>> remove_consonants(\"abcdef\\nghijklm\")\n    'abcdef\\nghijklm'\n    >>> remove_consonants('abcdef')\n    'abcdef'\n    >>> remove_consonants('aaaaa')\n    ''\n    >>> remove_consonants('aaBAA')\n    'aaBAA'\n    >>> remove_consonants('zbcd')\n    'zbcd'\n    \"\"\"\n    return ''.join(ch for ch in text if ch.lower() not in 'bcdfghjklmnpqrstvwxyz')\n\n\ndef replace_consonants(text):\n    \"\"\"\n    replace_consonants is a function that takes string and returns string with all consonants replaced by '*' character.\n    >>> replace_consonants('')\n    ''\n    >>> replace_consonants(\"abcdef\\nghijklm\")\n    '**c**d**f\\n**h**j**k**l**"
    },
    {
      "rank": 18,
      "score": 10.0,
      "candidate": "vowels = 'aeiou'\n    text = text.lower()\n    for vowel in vowels:\n        text = text.replace(vowel, '')\n    return text\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 19,
      "score": 10.0,
      "candidate": "return \"\".join([i for i in text if i not in 'aeiou'])\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 20,
      "score": 10.0,
      "candidate": "vowels = \"aeiouAEIOU\"\n    for vowel in vowels:\n        text = text.replace(vowel, \"\")\n    return text\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 21,
      "score": 10.0,
      "candidate": "vowels = 'aeiou'\n    return ''.join(filter(lambda x: x not in vowels, text))"
    },
    {
      "rank": 22,
      "score": 10.0,
      "candidate": "vowels = \"aeiou\"\n    for i in vowels:\n        text = text.replace(i, \"\")\n    return text\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 23,
      "score": 10.0,
      "candidate": "text = text.replace('a', '')\n    text = text.replace('e', '')\n    text = text.replace('i', '')\n    text = text.replace('o', '')\n    text = text.replace('u', '')\n    return text\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 24,
      "score": 10.0,
      "candidate": "# return ''.join(filter(lambda x: x.lower() not in 'aeiou', text))\n    return ''.join(i for i in text if i.lower() not in 'aeiou')\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 25,
      "score": 10.0,
      "candidate": "vowels = ['a', 'e', 'i', 'o', 'u', 'y']\n    text = str(text)\n    for v in vowels:\n        text = text.replace(v, '')\n    return text\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 26,
      "score": 10.0,
      "candidate": "return ''.join(c for c in text if c not in 'aeiou')\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 27,
      "score": 10.0,
      "candidate": "return text.translate(str.maketrans('', '', 'aeiouAEIOU'))\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 28,
      "score": 10.0,
      "candidate": "vowels = ['a', 'e', 'i', 'o', 'u']\n    res = ''\n    for char in text:\n        if char.lower() not in vowels:\n            res += char\n    return res\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 29,
      "score": 10.0,
      "candidate": "vowels = 'aeiouAEIOU'\n    return ''.join(char for char in text if char not in vowels)\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 30,
      "score": 10.0,
      "candidate": "if not text:\n        return ''\n    return ''.join(filter(lambda x: x not in 'aeiou', text))"
    },
    {
      "rank": 31,
      "score": 10.0,
      "candidate": "# print(text)\n    text = text.replace(\"a\",\"\")\n    text = text.replace(\"e\",\"\")\n    text = text.replace(\"i\",\"\")\n    text = text.replace(\"o\",\"\")\n    text = text.replace(\"u\",\"\")\n    text = text.replace(\"A\",\"\")\n    text = text.replace(\"E\",\"\")\n    text = text.replace(\"I\",\"\")\n    text = text.replace(\"O\",\"\")\n    text = text.replace(\"U\",\"\")\n    return text\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 32,
      "score": 10.0,
      "candidate": "# Your code here\n    vowels = 'aeiou'\n    result = ''\n    for c in text:\n        if c.lower() not in vowels:\n            result += c\n    return result\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 33,
      "score": 10.0,
      "candidate": "vowels = 'aeiou'\n    return ''.join(filter(lambda x: x not in vowels, text))\n\n\ndef remove_vowels_regex(text):\n    \"\"\"\n    remove_vowels_regex is a function that takes string and returns string without vowels.\n    >>> remove_vowels_regex('')\n    ''\n    >>> remove_vowels_regex(\"abcdef\\nghijklm\")\n    'bcdf\\nghjklm'\n    >>> remove_vowels_regex('abcdef')\n    'bcdf'\n    >>> remove_vowels_regex('aaaaa')\n    ''\n    >>> remove_vowels_regex('aaBAA')\n    'B'\n    >>> remove_vowels_regex('zbcd')\n    'zbcd'\n    \"\"\"\n    vowels = 'aeiou'\n    return re.sub('[aeiou]', '', text, flags=re.IGNORECASE)\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 34,
      "score": 10.0,
      "candidate": "return ''.join(c for c in text if c not in 'aeiouAEIOU')\n\n\nif __name__ == \"__main__\":\n    from doctest import testmod\n    testmod()"
    },
    {
      "rank": 35,
      "score": 10.0,
      "candidate": "return ''.join(char for char in text if char not in 'aeiou')\n\n\nif __name__ == \"__main__\":\n    from doctest import testmod\n    testmod()"
    },
    {
      "rank": 36,
      "score": 10.0,
      "candidate": "return ''.join(ch for ch in text if ch.lower() not in 'aeiou')\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 37,
      "score": 10.0,
      "candidate": "if text == \"\":\n        return \"\"\n    else:\n        text = text.lower()\n        for char in text:\n            if char in \"aeiou\":\n                text = text.replace(char, \"\")\n        return text"
    },
    {
      "rank": 38,
      "score": 10.0,
      "candidate": "return ''.join(filter(lambda x: x not in 'aeiou', text))\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 39,
      "score": 10.0,
      "candidate": "return text.translate(str.maketrans('','','aeiouAEIOU'))\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 40,
      "score": 10.0,
      "candidate": "return \"\".join(filter(lambda c: c not in 'aeiou', text))\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 41,
      "score": 10.0,
      "candidate": "vowels = \"aeiou\"\n    return \"\".join(i for i in text if i not in vowels)\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 42,
      "score": 10.0,
      "candidate": "vowels = \"aeiouAEIOU\"\n    for i in vowels:\n        text = text.replace(i, \"\")\n    return text"
    },
    {
      "rank": 43,
      "score": 9.993251387631034,
      "candidate": "return ''.join(filter(lambda x: x not in 'aeiou', text))"
    },
    {
      "rank": 44,
      "score": 9.982086980445024,
      "candidate": "vowels = 'aeiou'\n    return ''.join([char for char in text if char not in vowels])\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 45,
      "score": 9.963994939209833,
      "candidate": "return text.translate(str.maketrans(\"\",\"\",\"aeiou\"))"
    },
    {
      "rank": 46,
      "score": 9.94217585880588,
      "candidate": "vowels = ['a', 'e', 'i', 'o', 'u', 'y']\n    result = \"\"\n    for char in text:\n        if char.lower() not in vowels:\n            result += char\n    return result\n\n\ndef remove_vowels_and_sort(text):\n    \"\"\"\n    remove_vowels_and_sort is a function that takes string and returns string without vowels and sorted.\n    >>> remove_vowels_and_sort('')\n    ''\n    >>> remove_vowels_and_sort(\"abcdef\\nghijklm\")\n    'abcdef\\nghijklm'\n    >>> remove_vowels_and_sort('abcdef')\n    'abcd'\n    >>> remove_vowels_and_sort('aaaaa')\n    ''\n    >>> remove_vowels_and_sort('aaBAA')\n    'AB'\n    >>> remove_vowels_and_sort('zbcd')\n    'bcd'\n    \"\"\"\n    vowels = ['a', 'e', 'i', 'o', 'u', 'y']\n    result = \"\"\n    for char in text:\n        if char.lower() not in vowels:\n            result += char\n    return ''.join(sorted(result))\n\n\ndef remove_vowels_and_sort_inplace(text):\n    \"\"\"\n    remove_vowels_and_sort_inplace is a function that takes string and returns string without vowels and sorted.\n    >>> remove_vowels_and_sort_inplace('')\n    ''\n    >>> remove_vowels_and_sort_inplace(\"abcdef\\nghijklm\")\n    'abcdef\\nghijklm'\n    >>> remove_vowels_and_sort_inplace('abcdef')\n    'abcd'\n    >>> remove_vowels_and_sort_inplace('aaaaa')\n    ''\n    >>> remove_vowels_and_sort_inplace('aaBAA')\n    'AB'\n    >>> remove_vowels_and_sort_inplace('zbcd')\n    '"
    },
    {
      "rank": 47,
      "score": 9.930867849414408,
      "candidate": "vowels = \"aeiou\"\n    return \"\".join([char for char in text if char.lower() not in vowels])\n\n\ndef remove_all_spaces(text):\n    \"\"\"\n    remove_all_spaces is a function that takes string and returns string without spaces.\n    >>> remove_all_spaces('')\n    ''\n    >>> remove_all_spaces(\"a b c d\")\n    'abc d'\n    >>> remove_all_spaces('abc d')\n    'abc d'\n    >>> remove_all_spaces('abc   d')\n    'abcd'\n    >>> remove_all_spaces('abc  def')\n    'abcdef'\n    \"\"\"\n    return text.replace(\" \", \"\")\n\n\ndef reverse(text):\n    \"\"\"\n    reverse is a function that takes string and returns its reverse.\n    >>> reverse('')\n    ''\n    >>> reverse('abc')\n    'cba'\n    >>> reverse('abcdef')\n    'fedcba'\n    >>> reverse('abcdefg')\n    'gfedcba'\n    \"\"\"\n    return text[::-1]\n\n\ndef remove_duplicates(text):\n    \"\"\"\n    remove_duplicates is a function that takes string and returns its duplicate-free version.\n    >>> remove_duplicates('')\n    ''\n    >>> remove_duplicates('a')\n    'a'\n    >>> remove_duplicates('aa')\n    'a'\n    >>> remove_duplicates('abba')\n    'abba'\n    >>> remove_duplicates('abbaa')\n    'abba'\n    >>> remove_duplicates('aabbc')\n    'abc'\n    >>> remove_duplicates('abbc')\n    'abc'\n    \"\"\"\n    return \"\".join(set(text))\n\n\ndef remove_chars(text, chars):\n    \"\"\"\n    remove_chars is a function that takes string and list of characters and returns string without chars in list.\n    >>> remove_chars('',[])\n    ''\n    >>> remove_chars('abc',[])\n    'abc'\n    >>> remove_chars('abc',['a'])\n    'bc'\n    >>> remove_ch"
    },
    {
      "rank": 48,
      "score": 9.907170511668092,
      "candidate": "vowels = 'aeiou'\n    result = ''\n    for char in text:\n        if char.lower() not in vowels:\n            result += char\n    return result\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 49,
      "score": 9.890164056081243,
      "candidate": "return ''.join(i for i in text if i not in 'aeiou')\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 50,
      "score": 9.887111849756732,
      "candidate": "return text.translate(str.maketrans('', '', 'aeiouAEIOU'))\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 51,
      "score": 9.88293152152541,
      "candidate": "text = text.lower()\n    vowels = 'aeiou'\n    for v in vowels:\n        text = text.replace(v, \"\")\n    return text\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 52,
      "score": 9.882923312638333,
      "candidate": "return ''.join([i for i in text if i not in 'aeiou'])\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 53,
      "score": 9.854153125103362,
      "candidate": "vowels = 'aeiou'\n    for v in vowels:\n        text = text.replace(v, '')\n    return text\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod(verbose=True)"
    },
    {
      "rank": 54,
      "score": 9.850496324767066,
      "candidate": "text = str(text)\n    vowels = 'aeiou'\n    result = ''\n    for i in range(len(text)):\n        if text[i] in vowels:\n            continue\n        result += text[i]\n    return result\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 55,
      "score": 9.849448152205355,
      "candidate": "vowels = \"aeiouAEIOU\"\n    return \"\".join(c for c in text if c not in vowels)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 56,
      "score": 9.845393812074393,
      "candidate": "return \"\".join(filter(lambda c: c.lower() not in \"aeiou\", text))"
    },
    {
      "rank": 57,
      "score": 9.807458859791842,
      "candidate": "return text.translate(str.maketrans('', '', 'aeiouAEIOU'))\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 58,
      "score": 9.769680614520107,
      "candidate": "if text == \"\":\n        return \"\"\n    else:\n        return \"\".join(char for char in text if char not in 'aeiouAEIOU')\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 59,
      "score": 9.768291153593768,
      "candidate": "# return text.translate(str.maketrans('', '', 'aeiouAEIOU'))\n    return ''.join(c for c in text if c not in 'aeiou')\n\n\ndef remove_vowels_list(text):\n    \"\"\"\n    remove_vowels is a function that takes string and returns string without vowels.\n    >>> remove_vowels('')\n    ''\n    >>> remove_vowels(\"abcdef\\nghijklm\")\n    'bcdf\\nghjklm'\n    >>> remove_vowels('abcdef')\n    'bcdf'\n    >>> remove_vowels('aaaaa')\n    ''\n    >>> remove_vowels('aaBAA')\n    'B'\n    >>> remove_vowels('zbcd')\n    'zbcd'\n    \"\"\"\n    return [c for c in text if c not in 'aeiou']"
    },
    {
      "rank": 60,
      "score": 9.76713512321487,
      "candidate": "vowels = 'aeiou'\n    return ''.join([i for i in text if i.lower() not in vowels])\n\n\nif __name__ == \"__main__\":\n    from doctest import testmod\n    testmod()"
    },
    {
      "rank": 61,
      "score": 9.765262807032524,
      "candidate": "if not text:\n        return ''\n    vowels = 'aeiouAEIOU'\n    text = text.lower()\n    res = ''\n    for char in text:\n        if char not in vowels:\n            res += char\n    return res\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 62,
      "score": 9.760412881077356,
      "candidate": "return ''.join(filter(lambda c: c not in 'aeiou', text))\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 63,
      "score": 9.749121478207732,
      "candidate": "return \"\".join(i for i in text if i not in \"aeiou\")\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 64,
      "score": 9.740864890863175,
      "candidate": "text_without_vowels = \"\"\n    vowels = \"aeiou\"\n    for char in text:\n        if char.lower() not in vowels:\n            text_without_vowels += char\n    return text_without_vowels\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 65,
      "score": 9.73511989811648,
      "candidate": "return ''.join(x for x in text if x.lower() not in 'aeiou')\n\n\ndef vowels_per_word(text):\n    \"\"\"\n    vowels_per_word is a function that takes string and returns list of tuples with number of vowels in each word.\n    >>> vowels_per_word('')\n    []\n    >>> vowels_per_word(\"abcdef\\nghijklm\")\n    [(0, 0), (1, 0), (0, 1), (0, 1), (0, 1), (1, 1)]\n    >>> vowels_per_word('abcdef')\n    [(0, 1), (0, 1), (0, 1), (0, 1), (0, 1)]\n    >>> vowels_per_word('aaaaa')\n    [(5, 0)]\n    >>> vowels_per_word('aaBAA')\n    [(1, 1), (1, 1)]\n    >>> vowels_per_word('zbcd')\n    [(0, 1), (0, 1), (0, 1), (0, 1)]\n    \"\"\"\n    words = text.split()\n    return [(len([x for x in word if x.lower() in 'aeiou']), len(word) - len([x for x in word if x.lower() in 'aeiou']))\n            for word in words]\n\n\ndef remove_consonants(text):\n    \"\"\"\n    remove_consonants is a function that takes string and returns string without consonants.\n    >>> remove_consonants('')\n    ''\n    >>> remove_consonants(\"abcdef\\nghijklm\")\n    'aeiouaeiouaeiouaeiouaeiouaeiou'\n    >>> remove_consonants('abcdef')\n    'aeiouaeiouaeiouaeiouaeiou'\n    >>> remove_consonants('aaaaa')\n    'aaaaa'\n    >>> remove_consonants('aaBAA')\n    'aaaeiou'\n    >>> remove_conson"
    },
    {
      "rank": 66,
      "score": 9.72780863773741,
      "candidate": "# your code here\n    text = text.replace(\"a\", \"\").replace(\"e\", \"\").replace(\"i\", \"\").replace(\"o\", \"\").replace(\"u\", \"\")\n    return text\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 67,
      "score": 9.718856235379514,
      "candidate": "return \"\".join([char for char in text if char not in \"aeiou\"])\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 68,
      "score": 9.699680655040597,
      "candidate": "vowels = 'aeiou'\n    for v in vowels:\n        text = text.replace(v, '')\n    return text\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 69,
      "score": 9.699146693885302,
      "candidate": "return ''.join(c for c in text if c not in 'aeiouAEIOU')\n\n\ndef remove_consonants(text):\n    \"\"\"\n    remove_consonants is a function that takes string and returns string without consonants.\n    >>> remove_consonants('')\n    ''\n    >>> remove_consonants(\"abcdef\\nghijklm\")\n    'abcdef\\nghijklm'\n    >>> remove_consonants('abcdef')\n    'bcdf'\n    >>> remove_consonants('aaaaa')\n    'aaaaa'\n    >>> remove_consonants('aaBAA')\n    'AA'\n    >>> remove_consonants('zbcd')\n    'zcd'\n    \"\"\"\n    return ''.join(c for c in text if c not in 'bcdfghjklmnpqrstvwxyz')\n\n\ndef remove_duplicates(text):\n    \"\"\"\n    remove_duplicates is a function that takes string and returns string without duplicates.\n    >>> remove_duplicates('')\n    ''\n    >>> remove_duplicates('abc')\n    'abc'\n    >>> remove_duplicates('aaabbbccc')\n    'abc'\n    >>> remove_duplicates('aabbc')\n    'abc'\n    >>> remove_duplicates('abcddcba')\n    'abcdcba'\n    >>> remove_duplicates('abababab')\n    'ab'\n    \"\"\"\n    return ''.join(c for i, c in enumerate(text) if c not in text[:i])\n\n\ndef remove_whitespaces(text):\n    \"\"\"\n    remove_whitespaces is a function that takes string and returns string without whitespaces.\n    >>> remove_whitespaces('')\n    ''\n    >>> remove_whitespaces('abc def')\n    'abcdef'\n    >>> remove_whitespaces('abc\\tdef\\nghi')\n    'abcdefghi'\n    >>> remove_whitespaces('abc\\t def\\nghi\\njkl')\n    'abcdefghijkl'\n    >>> remove_whitespaces('abc\\t def\\nghi\\njkl\\"
    },
    {
      "rank": 70,
      "score": 9.677440122697439,
      "candidate": "vowels = \"aeiou\"\n    for v in vowels:\n        text = text.replace(v, \"\")\n    return text\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 71,
      "score": 9.661538999847021,
      "candidate": "vowels = set('aeiouAEIOU')\n    return ''.join([c for c in text if c not in vowels])\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 72,
      "score": 9.640077895802646,
      "candidate": "text = text.replace(\"a\",\"\")\n    text = text.replace(\"e\",\"\")\n    text = text.replace(\"i\",\"\")\n    text = text.replace(\"o\",\"\")\n    text = text.replace(\"u\",\"\")\n    text = text.replace(\"y\",\"\")\n    return text"
    },
    {
      "rank": 73,
      "score": 9.595753198553407,
      "candidate": "vowels = \"aeiou\"\n    text_without_vowels = \"\"\n    for letter in text:\n        if letter.lower() not in vowels:\n            text_without_vowels += letter\n    return text_without_vowels\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 74,
      "score": 9.58039123838868,
      "candidate": "return ''.join(x for x in text if x not in \"aeiou\")\n\n\nif __name__ == \"__main__\":\n    from doctest import testmod\n    testmod()"
    },
    {
      "rank": 75,
      "score": 9.545987962239394,
      "candidate": "vowels = 'aeiouAEIOU'\n    new_text = ''\n    for i in text:\n        if i not in vowels:\n            new_text += i\n    return new_text\n\n\nif __name__ == '__main__':\n    from doctest import testmod\n    testmod()"
    },
    {
      "rank": 76,
      "score": 9.493584439832787,
      "candidate": "vowels = 'aeiou'\n    return ''.join(i for i in text if i.lower() not in vowels)\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()\n\n    string = input('Enter string: ')\n    print(remove_vowels(string))"
    },
    {
      "rank": 77,
      "score": 9.47114453552205,
      "candidate": "if text == '':\n        return text\n    else:\n        vowels = 'aeiou'\n        for char in vowels:\n            text = text.replace(char, '')\n    return text"
    },
    {
      "rank": 78,
      "score": 9.446832512996986,
      "candidate": "return \"\".join([c for c in text if c not in \"aeiou\"])\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 79,
      "score": 9.42450321128885,
      "candidate": "text = text.replace('a', '')\n    text = text.replace('e', '')\n    text = text.replace('i', '')\n    text = text.replace('o', '')\n    text = text.replace('u', '')\n    text = text.replace('A', '')\n    text = text.replace('E', '')\n    text = text.replace('I', '')\n    text = text.replace('O', '')\n    text = text.replace('U', '')\n    return text"
    },
    {
      "rank": 80,
      "score": 9.401896687959665,
      "candidate": "return ''.join(filter(lambda x: x.lower() not in 'aeiou', text))\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 81,
      "score": 9.389578175014488,
      "candidate": "# new_text = ''\n    # for letter in text:\n    #     if letter.lower() in 'aeiou':\n    #         pass\n    #     else:\n    #         new_text += letter\n    # return new_text\n\n    # return ''.join(letter for letter in text if letter.lower() not in 'aeiou')\n    return ''.join(letter for letter in text if letter.lower() not in 'aeiouaeiou')\n\n\nif __name__ == '__main__':\n    from doctest import testmod\n    testmod()\n    input_text = input('Enter text: ')\n    print(remove_vowels(input_text))"
    },
    {
      "rank": 82,
      "score": 9.335906975550785,
      "candidate": "return ''.join(c for c in text if c not in 'aeiou')\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 83,
      "score": 9.293848149332355,
      "candidate": "return \"\".join(i for i in text if i not in \"aeiou\")\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 84,
      "score": 9.287625906893272,
      "candidate": "return text.translate(str.maketrans(\"\",\"\",\"aeiouAEIOU\"))\n\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 85,
      "score": 9.260739004816287,
      "candidate": "vowels = 'aeiou'\n    new_text = ''\n    for char in text:\n        if char not in vowels:\n            new_text += char\n    return new_text\n\n\ndef remove_vowels_re(text):\n    \"\"\"\n    remove_vowels_re is a function that takes string and returns string without vowels.\n    >>> remove_vowels_re('')\n    ''\n    >>> remove_vowels_re(\"abcdef\\nghijklm\")\n    'bcdf\\nghjklm'\n    >>> remove_vowels_re('abcdef')\n    'bcdf'\n    >>> remove_vowels_re('aaaaa')\n    ''\n    >>> remove_vowels_re('aaBAA')\n    'B'\n    >>> remove_vowels_re('zbcd')\n    'zbcd'\n    \"\"\"\n    import re\n    return re.sub(r'[aeiou]', '', text, flags=re.I)\n\n\ndef remove_vowels_re2(text):\n    \"\"\"\n    remove_vowels_re is a function that takes string and returns string without vowels.\n    >>> remove_vowels_re2('')\n    ''\n    >>> remove_vowels_re2(\"abcdef\\nghijklm\")\n    'bcdf\\nghjklm'\n    >>> remove_vowels_re2('abcdef')\n    'bcdf'\n    >>> remove_vowels_re2('aaaaa')\n    ''\n    >>> remove_vowels_re2('aaBAA')\n    'B'\n    >>> remove_vowels_re2('zbcd')\n    'zbcd'\n    \"\"\"\n    import re\n    return re.sub(r'[aeiou]', '', text, flags=re.I)\n\n\ndef remove_vowels_re3(text):\n    \"\"\"\n    remove_vowels_re is a function that takes string and returns string without vowels.\n    >>> remove_vowels_re3('')\n    ''\n    >>> remove_vow"
    },
    {
      "rank": 86,
      "score": 9.137541083743484,
      "candidate": "vowels = 'aeiou'\n    text = text.lower()\n    for char in text:\n        if char in vowels:\n            text = text.replace(char, '')\n    return text\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 87,
      "score": 9.118479922318633,
      "candidate": "vowels = \"aeiou\"\n    text = text.lower()\n    result = \"\"\n    for char in text:\n        if char not in vowels:\n            result += char\n    return result\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 88,
      "score": 9.0433598776711,
      "candidate": "if text == '':\n        return ''\n    vowels = 'aeiou'\n    vowels_in_text = ''\n    for vowel in vowels:\n        if vowel in text:\n            vowels_in_text += vowel\n    text_without_vowels = text\n    for vowel in vowels_in_text:\n        text_without_vowels = text_without_vowels.replace(vowel, '')\n    return text_without_vowels\n\n\ndef remove_vowels_and_return_count(text):\n    \"\"\"\n    remove_vowels_and_return_count is a function that takes string and returns a tuple\n    (string without vowels, number of vowels removed).\n    >>> remove_vowels_and_return_count('')\n    ('', 0)\n    >>> remove_vowels_and_return_count(\"abcdef\\nghijklm\")\n    ('bcdf\\nghjklm', 6)\n    >>> remove_vowels_and_return_count('abcdef')\n    ('bcdf', 2)\n    >>> remove_vowels_and_return_count('aaaaa')\n    ('', 5)\n    >>> remove_vowels_and_return_count('aaBAA')\n    ('B', 3)\n    >>> remove_vowels_and_return_count('zbcd')\n    ('zbcd', 0)\n    \"\"\"\n    if text == '':\n        return '', 0\n    vowels = 'aeiou'\n    vowels_in_text = ''\n    for vowel in vowels:\n        if vowel in text:\n            vowels_in_text += vowel\n    text_without_vowels = text\n    for vowel in vowels_in_text:\n        text_without_vowels = text_without_vowels.replace(vowel, '')\n    return text_without_vowels, len(vowels_in_text)\n\n\ndef remove_vowels_and_count(text):\n    \"\"\"\n    remove_"
    },
    {
      "rank": 89,
      "score": 9.020164938060113,
      "candidate": "vowels = 'aeiou'\n    return ''.join(c for c in text if c.lower() not in vowels)\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 90,
      "score": 9.006215542699554,
      "candidate": "vowels = 'aeiouAEIOU'\n    for v in vowels:\n        text = text.replace(v, '')\n    return text\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 91,
      "score": 8.690127447955128,
      "candidate": "return \"\".join([char for char in text if char not in \"aeiou\"])\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 92,
      "score": 3.0,
      "candidate": "vowels = ['a', 'e', 'i', 'o', 'u']\n    new_text = ''\n    for letter in text:\n        if letter.lower() not in vowels:\n            new_text += letter\n    return new_text"
    },
    {
      "rank": 93,
      "score": 3.0,
      "candidate": "# remove all the vowels in the text\n    for vowel in \"aeiouAEIOU\":\n        text = text.replace(vowel, \"\")\n\n    # return the text\n    return text"
    },
    {
      "rank": 94,
      "score": 3.0,
      "candidate": "return \"\".join(char for char in text if char.lower() not in 'aeiou')"
    },
    {
      "rank": 95,
      "score": 3.0,
      "candidate": "return ''.join(char for char in text if char.lower() not in 'aeiou')\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 96,
      "score": 3.0,
      "candidate": "return text.translate(str.maketrans('', '', 'aeiouAEIOU'))\n\n\nif __name__ == \"__main__\":\n    from doctest import testmod\n    testmod()"
    },
    {
      "rank": 97,
      "score": 3.0,
      "candidate": "return \"\".join(i for i in text if i not in \"aeiouAEIOU\")"
    },
    {
      "rank": 98,
      "score": 3.0,
      "candidate": "return \"\".join(ch for ch in text if ch.lower() not in 'aeiou')\n\nif __name__ == \"__main__\":\n    from doctest import testmod\n    testmod()"
    },
    {
      "rank": 99,
      "score": 3.0,
      "candidate": "return \"\".join(char for char in text if char.lower() not in 'aeiou')\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 100,
      "score": 3.0,
      "candidate": "return ''.join(ch for ch in text if ch.lower() not in 'aeiou')\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    }
  ]
}