{
  "timestamp": "2025-09-14T22:12:19.779144",
  "method": "improved_llm_judge",
  "judge_model": "codellama/CodeLlama-7b-Python-hf",
  "target_model": "codellama-7b",
  "dataset": "humaneval",
  "problem_number": 151,
  "total_candidates": 100,
  "results": [
    {
      "rank": 1,
      "score": 10.0,
      "candidate": "if len(lst) == 0:\n        return 0\n    else:\n        return sum([i**2 for i in lst if i%2 == 1])\n\n\ndef test_double_the_difference():\n    assert double_the_difference([1, 3, 2, 0]) == 10\n    assert double_the_difference([-1, -2, 0]) == 0\n    assert double_the_difference([9, -2]) == 81\n    assert double_the_difference([0]) == 0\n    assert double_the_difference([]) == 0\n\nif __name__ == '__main__':\n    test_double_the_difference()"
    },
    {
      "rank": 2,
      "score": 10.0,
      "candidate": "return sum([x**2 for x in lst if x%2])\n\ndef test_double_the_difference():\n    assert double_the_difference([1, 3, 2, 0]) == 10\n    assert double_the_difference([-1, -2, 0]) == 0\n    assert double_the_difference([9, -2]) == 81\n    assert double_the_difference([0]) == 0\n    assert double_the_difference([]) == 0\n    assert double_the_difference([5, 4, 3, 2, 1]) == 55\n    assert double_the_difference([-1, 0, 1, 2, 3]) == 0\n    assert double_the_difference([1, 2, 3, 4, 5]) == 55\n    assert double_the_difference([10, 20, 30, 40, 50]) == 2700\n\nif __name__ == '__main__':\n    test_double_the_difference()"
    },
    {
      "rank": 3,
      "score": 10.0,
      "candidate": "result = 0\n    for i in lst:\n        if i%2 != 0:\n            result += i**2\n    return result\n\n\nprint(double_the_difference([1, 3, 2, 0]))\nprint(double_the_difference([-1, -2, 0]))\nprint(double_the_difference([9, -2]))\nprint(double_the_difference([0]))"
    },
    {
      "rank": 4,
      "score": 10.0,
      "candidate": "sum = 0\n    for num in lst:\n        if num > 0 and num % 2 == 1:\n            sum += num * num\n    return sum\n\ndef test_double_the_difference():\n    assert double_the_difference([1, 3, 2, 0]) == 10\n    assert double_the_difference([-1, -2, 0]) == 0\n    assert double_the_difference([9, -2]) == 81\n    assert double_the_difference([0]) == 0\n    assert double_the_difference([]) == 0\n\nif __name__ == '__main__':\n    test_double_the_difference()"
    },
    {
      "rank": 5,
      "score": 10.0,
      "candidate": "if not lst:\n        return 0\n    else:\n        return sum([x*x for x in lst if x%2 != 0])"
    },
    {
      "rank": 6,
      "score": 10.0,
      "candidate": "return sum([(x**2) for x in lst if (x%2==1)])\n\ndef test_double_the_difference():\n    assert double_the_difference([1, 3, 2, 0]) == 10\n    assert double_the_difference([-1, -2, 0]) == 0\n    assert double_the_difference([9, -2]) == 81\n    assert double_the_difference([0]) == 0  \n    assert double_the_difference([]) == 0  \n    assert double_the_difference([5, 2, 1, 2, 3]) == 10\n    assert double_the_difference([10, 2, 2, 3]) == 20\n    assert double_the_difference([3, 2, 1, 2, 3]) == 10\n    assert double_the_difference([2, 1, 2, 3]) == 10\n    assert double_the_difference([1, 2, 3]) == 10\n    assert double_the_difference([1, 2, 3, 4]) == 10\n    assert double_the_difference([4, 5, 6, 7]) == 0\n    assert double_the_difference([]) == 0\n\nif __name__ == '__main__':\n    test_double_the_difference()"
    },
    {
      "rank": 7,
      "score": 10.0,
      "candidate": "result = 0\n    for i in lst:\n        if type(i) == int and i > 0:\n            if i % 2 != 0:\n                result += (i ** 2)\n    return result\n    \nprint(double_the_difference([1, 3, 2, 0])) #\u279e 10\nprint(double_the_difference([-1, -2, 0])) #\u279e 0\nprint(double_the_difference([9, -2])) #\u279e 81\nprint(double_the_difference([0])) #\u279e 0"
    },
    {
      "rank": 8,
      "score": 10.0,
      "candidate": "odd_sum = 0\n    for i in lst:\n        if i % 2 == 1:\n            odd_sum += i ** 2\n    return odd_sum\n    \n\nprint(double_the_difference([1, 3, 2, 0]))\nprint(double_the_difference([-1, -2, 0]))\nprint(double_the_difference([9, -2]))\nprint(double_the_difference([0]))"
    },
    {
      "rank": 9,
      "score": 10.0,
      "candidate": "total = 0\n    for num in lst:\n        if num % 2 != 0:\n            total += num ** 2\n    return total\n\n\ndef test_double_the_difference():\n    assert double_the_difference([1, 3, 2, 0]) == 10\n    assert double_the_difference([-1, -2, 0]) == 0\n    assert double_the_difference([9, -2]) == 81\n    assert double_the_difference([0]) == 0\n    assert double_the_difference([]) == 0\n\n\nif __name__ == '__main__':\n    test_double_the_difference()"
    },
    {
      "rank": 10,
      "score": 10.0,
      "candidate": "return sum([abs(num)**2 for num in lst if num%2 == 1])\n\ndef test_double_the_difference():\n    assert double_the_difference([1, 3, 2, 0]) == 10\n    assert double_the_difference([-1, -2, 0]) == 0\n    assert double_the_difference([9, -2]) == 81\n    assert double_the_difference([0]) == 0\n    assert double_the_difference([1, 2, 3, 4, 5]) == 55\n    assert double_the_difference([]) == 0\n    assert double_the_difference([-1, -3, -4, -5]) == 0\n    assert double_the_difference([1, 3, 2, 4]) == 20\n    assert double_the_difference([1, 3, 2, 4, 5, 6]) == 55\n    assert double_the_difference([1, 3, 2, 4, 5, 6, 7, 8, 9, 10]) == 225\n    assert double_the_difference([-10, -20, -30, -40, -50]) == 0\n    assert double_the_difference([-1, 2, 3, 4, 5]) == 55\n    assert double_the_difference([1, 3, 2, 4, 5, 6, 7, 8, 9, 10]) == 225\n    assert double_the_difference([-1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 225\n    assert double_the_difference([1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 100\n    assert double_the_difference([-1, -1, -1, -1, -1, -1, -1, -"
    },
    {
      "rank": 11,
      "score": 10.0,
      "candidate": "new_lst = []\n    for num in lst:\n        if num % 2 == 1:\n            new_lst.append(num**2)\n    return sum(new_lst)\n\ndef double_the_difference(lst):\n    '''\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9, -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list is empty, return 0.\n    '''\n    new_lst = []\n    for num in lst:\n        if num % 2 == 1:\n            new_lst.append(num**2)\n    return sum(new_lst)\n\ndouble_the_difference([1, 3, 2, 0])\ndouble_the_difference([-1, -2, 0])\ndouble_the_difference([9, -2])\ndouble_the_difference([0])"
    },
    {
      "rank": 12,
      "score": 10.0,
      "candidate": "if len(lst) == 0:\n        return 0\n    else:\n        odd_nums = [x**2 for x in lst if x > 0 and type(x) == int]\n        return sum(odd_nums)\n\n\n\ndef test_function():\n    assert double_the_difference([1, 3, 2, 0]) == 10\n    assert double_the_difference([-1, -2, 0]) == 0\n    assert double_the_difference([9, -2]) == 81\n    assert double_the_difference([0]) == 0\n    assert double_the_difference([]) == 0"
    },
    {
      "rank": 13,
      "score": 10.0,
      "candidate": "# YOUR CODE HERE\n    total = 0\n    for num in lst:\n        if num % 2 == 1:\n            total += num ** 2\n    return total\n\nprint(double_the_difference([1, 3, 2, 0]))\nprint(double_the_difference([-1, -2, 0]))\nprint(double_the_difference([9, -2]))\nprint(double_the_difference([0]))"
    },
    {
      "rank": 14,
      "score": 10.0,
      "candidate": "total = 0\n    for i in lst:\n        if i%2 != 0 and i >= 0:\n            total += i**2\n    return total\n\n# \ud83d\udea8 Do NOT change any of the code below \nprint(double_the_difference([1, 3, 2, 0]))\nprint(double_the_difference([-1, -2, 0]))\nprint(double_the_difference([9, -2]))\nprint(double_the_difference([0]))"
    },
    {
      "rank": 15,
      "score": 10.0,
      "candidate": "sum = 0\n    for i in lst:\n        if (i % 2) != 0:\n            sum += i**2\n    return sum\n\ndef test_double_the_difference():\n    assert double_the_difference([1, 3, 2, 0]) == 10\n    assert double_the_difference([-1, -2, 0]) == 0\n    assert double_the_difference([9, -2]) == 81\n    assert double_the_difference([0]) == 0\n    assert double_the_difference([]) == 0\n    assert double_the_difference([3, 2, 5, 10, 7, 9]) == 230\n    assert double_the_difference([3, 2, 5, 10, 7, -9]) == 230\n    assert double_the_difference([3, 2, 5, 10, 7, 9, -5]) == 230\n    assert double_the_difference([3, 2, 5, 10, 7, 9, 10]) == 230\n    assert double_the_difference([3, 2, 5, 10, 7, 9, 11]) == 230\n    assert double_the_difference([-3, 2, 5, 10, 7, 9, 11]) == 0"
    },
    {
      "rank": 16,
      "score": 10.0,
      "candidate": "pass\n\n\ndouble_the_difference([1, 3, 2, 0])\n# 10\n\ndouble_the_difference([-1, -2, 0])\n# 0\n\ndouble_the_difference([9, -2])\n# 81\n\ndouble_the_difference([0])\n# 0\n\ndouble_the_difference([])\n# 0\n\ndouble_the_difference([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n# 240\n\ndouble_the_difference([1, 3, 5, 7, 9])\n# 160\n\ndouble_the_difference([5, 4, 3, 2, 1])\n# 0\n\ndouble_the_difference([10, 9, 8, 7, 6, 5, 4, 3, 2, 1])\n# 160\n\ndouble_the_difference([10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0])\n# 160\n\ndouble_the_difference([10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0, -1])\n# 160\n\ndouble_the_difference([10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0, -1, -2, -3, -4, -5])\n# 160\n\ndouble_the_difference([10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0, -1, -2, -3, -4, -5, -6])\n# 160"
    },
    {
      "rank": 17,
      "score": 10.0,
      "candidate": "sum = 0\n    for i in lst:\n        if i >= 0 and i % 2 != 0:\n            sum += (i**2)\n    return sum\n    \nprint(double_the_difference([1, 3, 2, 0]))\nprint(double_the_difference([-1, -2, 0]))\nprint(double_the_difference([9, -2]))\nprint(double_the_difference([0]))"
    },
    {
      "rank": 18,
      "score": 10.0,
      "candidate": "# Your code here\n    lst_new = []\n    for i in lst:\n        if i > 0:\n            if i % 2 != 0:\n                lst_new.append(i)\n    return sum([i**2 for i in lst_new])\n\n# Tests\ndef test_double_the_difference(arg, expected):\n    '''\n    Run-time tests for double_the_difference.\n    '''\n    print(f'Calling double_the_difference({arg})')\n    result = double_the_difference(arg)\n    \n    if result == expected:\n        print('Pass!')\n    else:\n        print(f'Fail! Expected {expected}, got {result}')\n\n# Test cases\ntest_double_the_difference([1, 3, 2, 0], 10)\ntest_double_the_difference([-1, -2, 0], 0)\ntest_double_the_difference([9, -2], 81)\ntest_double_the_difference([0], 0)\ntest_double_the_difference([], 0)\ntest_double_the_difference([2, 1, 3, 4, 1, 1, 1], 16)\ntest_double_the_difference([10, 20, 30, 40, 50, 60], 4040)\ntest_double_the_difference([10, 11, 12, 13, 14, 15], 1665)\ntest_double_the_difference([10, 11, 12, 13, 14, 15, 16, 17], 2389)\ntest_double_the_difference([10, 11, 12, 13, 14, 15, 16, 17, 18], 3314)\ntest_double_the_difference([10, 11, 12, 13, 14,"
    },
    {
      "rank": 19,
      "score": 10.0,
      "candidate": "total = 0\n    for num in lst:\n        if num % 2 != 0 and num >= 0:\n            total += num**2\n    return total\n\n\ndef double_the_difference(lst):\n    '''\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9, -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list is empty, return 0.\n    '''\n    total = 0\n    for num in lst:\n        if num % 2 != 0 and num >= 0:\n            total += num**2\n    return total\n\ndef double_the_difference(lst):\n    '''\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9, -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list is empty, return 0.\n    '''\n    return sum([num**2 for num in lst if num % 2 != 0 and num >= 0])"
    },
    {
      "rank": 20,
      "score": 10.0,
      "candidate": "return sum([(x*x) for x in lst if x%2!=0])\n\n\n\n\ndef test_function():\n    assert double_the_difference([1, 3, 2, 0]) == 10\n    assert double_the_difference([-1, -2, 0]) == 0\n    assert double_the_difference([9, -2]) == 81\n    assert double_the_difference([0]) == 0\n    assert double_the_difference([]) == 0\n    assert double_the_difference([1, 3, 2, 0, \"a\"]) == 10\n    assert double_the_difference([1, 3, 2, 0, None]) == 10\n    assert double_the_difference([1, 3, 2, 0, 5.0]) == 10\n\nif __name__ == '__main__':\n    test_function()"
    },
    {
      "rank": 21,
      "score": 10.0,
      "candidate": "sum = 0\n    for i in lst:\n        if i >= 0 and i % 2 == 1:\n            sum += (i**2)\n    return sum\n\n\ndef test_cases():\n    assert double_the_difference([1, 3, 2, 0]) == 10\n    assert double_the_difference([-1, -2, 0]) == 0\n    assert double_the_difference([9, -2]) == 81\n    assert double_the_difference([0]) == 0\n    assert double_the_difference([]) == 0\n    print(\"Test Success!\")\n\n\nif __name__ == \"__main__\":\n    test_cases()"
    },
    {
      "rank": 22,
      "score": 9.994871054599585,
      "candidate": "sum = 0\n    for n in lst:\n        if n%2 == 1:\n            sum += n**2\n    return sum"
    },
    {
      "rank": 23,
      "score": 9.972636153799472,
      "candidate": "# Your code here\n    total_sum = 0\n    for num in lst:\n        if num % 2 == 1:\n            total_sum += num ** 2\n    return total_sum\n\ndouble_the_difference([1, 3, 2, 0])"
    },
    {
      "rank": 24,
      "score": 9.956053652692468,
      "candidate": "odds = []\n    for num in lst:\n        if num % 2 != 0:\n            odds.append(num**2)\n    return sum(odds)\n\n\n\ndef double_the_difference(lst):\n    '''\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9, -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list is empty, return 0.\n    '''\n    return sum(num**2 for num in lst if num%2!=0)"
    },
    {
      "rank": 25,
      "score": 9.94745956555495,
      "candidate": "sum = 0\n    for i in lst:\n        if i % 2 != 0 and i >= 0:\n            sum += i * i\n    return sum\n\n\nprint(double_the_difference([1, 3, 2, 0]))\nprint(double_the_difference([-1, -2, 0]))\nprint(double_the_difference([9, -2]))\nprint(double_the_difference([0]))"
    },
    {
      "rank": 26,
      "score": 9.914205005815116,
      "candidate": "# Your code here\n    sum = 0\n    for num in lst:\n        if num % 2 != 0 and num >= 0:\n            sum += num**2\n    return sum\n\n\n#double_the_difference([1, 3, 2, 0])\n#double_the_difference([-1, -2, 0])\n#double_the_difference([9, -2])\n#double_the_difference([0])"
    },
    {
      "rank": 27,
      "score": 9.875488384292849,
      "candidate": "# Your code here\n    pass\n\nif __name__ == '__main__':\n    # Run Tests\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 28,
      "score": 9.85099890180978,
      "candidate": "sum = 0\n    for i in lst:\n        if i < 0 or not i % 2 == 1:\n            continue\n        else:\n            sum += i*i\n    return sum\n\n\ndef test_cases():\n    assert double_the_difference([1, 3, 2, 0]) == 10\n    assert double_the_difference([-1, -2, 0]) == 0\n    assert double_the_difference([9, -2]) == 81\n    assert double_the_difference([0]) == 0\n    assert double_the_difference([]) == 0\n    print(\"Test Success!\")\n\n\ntest_cases()"
    },
    {
      "rank": 29,
      "score": 9.823901276731265,
      "candidate": "# Your code here\n    sum = 0\n    for num in lst:\n        if num >= 0 and type(num) == int and num % 2 != 0:\n            sum += num ** 2\n    return sum\n\nprint(double_the_difference([1, 3, 2, 0])) # 10\nprint(double_the_difference([-1, -2, 0])) # 0\nprint(double_the_difference([9, -2])) # 81\nprint(double_the_difference([0])) # 0"
    },
    {
      "rank": 30,
      "score": 9.821599733344717,
      "candidate": "result = 0\n    for item in lst:\n        if item > 0 and item % 2 != 0:\n            result += item**2\n    return result"
    },
    {
      "rank": 31,
      "score": 9.79313456468043,
      "candidate": "# your code here\n    sum = 0\n    for i in lst:\n        if i%2 != 0:\n            sum += i**2\n    return sum\n\nprint(double_the_difference([1, 3, 2, 0]))\nprint(double_the_difference([-1, -2, 0]))\nprint(double_the_difference([9, -2]))\nprint(double_the_difference([0]))"
    },
    {
      "rank": 32,
      "score": 9.742769639883736,
      "candidate": "# Your code here\n    # If the list is empty, return 0\n    if lst == []:\n        return 0\n    \n    # initialize a variable to keep track of the sum of squares of odd numbers\n    sum = 0\n    \n    # loop through the list\n    for item in lst:\n        # if the item is an integer and the item is odd\n        if type(item) == int and item % 2 != 0:\n            # add the square of the item to the sum\n            sum += item ** 2\n            \n    # return the sum\n    return sum\n\nprint(double_the_difference([1, 3, 2, 0]))\nprint(double_the_difference([-1, -2, 0]))\nprint(double_the_difference([9, -2]))\nprint(double_the_difference([0]))"
    },
    {
      "rank": 33,
      "score": 9.733219824326605,
      "candidate": "# Your code here\n    sum = 0\n    for i in lst:\n        if i % 2 != 0 and i > 0:\n            sum += i**2\n    return sum\n    \nprint(double_the_difference([1, 3, 2, 0]))\nprint(double_the_difference([-1, -2, 0]))\nprint(double_the_difference([9, -2]))\nprint(double_the_difference([0]))"
    },
    {
      "rank": 34,
      "score": 9.598069846996758,
      "candidate": "if not lst:\n        return 0\n    sum_of_square_of_odd = 0\n    for num in lst:\n        if num % 2 != 0 and num >= 0:\n            sum_of_square_of_odd += num**2\n    return sum_of_square_of_odd\n\ndef test_function(test_case):\n    answer = double_the_difference(test_case)\n    print(answer)\n    if answer == test_case[1]:\n        print(\"Pass\")\n    else:\n        print(\"Fail\")\n\ntest_case = ([1, 3, 2, 0], 10)\ntest_function(test_case)\n\ntest_case = ([-1, -2, 0], 0)\ntest_function(test_case)\n\ntest_case = ([9, -2], 81)\ntest_function(test_case)\n\ntest_case = ([0], 0)\ntest_function(test_case)\n\ntest_case = ([], 0)\ntest_function(test_case)"
    },
    {
      "rank": 35,
      "score": 9.545441482849345,
      "candidate": "result = 0\n    for num in lst:\n        if num >= 0 and int(num) == num:\n            if num % 2 != 0:\n                result += num**2\n    return result"
    },
    {
      "rank": 36,
      "score": 9.495289301418596,
      "candidate": "total = 0\n    for i in lst:\n        if i%2 == 1:\n            total += i**2\n    return total"
    },
    {
      "rank": 37,
      "score": 9.344531223645047,
      "candidate": "result = 0\n    for num in lst:\n        if num > 0:\n            if num % 2 != 0:\n                result += (num * num)\n    return result"
    },
    {
      "rank": 38,
      "score": 9.234050852198141,
      "candidate": "result = 0\n    for number in lst:\n        if number > 0:\n            if number % 2 != 0:\n                result += number**2\n    return result\n\n\nprint(double_the_difference([1, 3, 2, 0]))\nprint(double_the_difference([-1, -2, 0]))\nprint(double_the_difference([9, -2]))\nprint(double_the_difference([0]))"
    },
    {
      "rank": 39,
      "score": 9.21346272767743,
      "candidate": "odd_sum = 0\n    for i in lst:\n        if i >= 0 and i % 2 == 1:\n            odd_sum += i * i\n    return odd_sum"
    },
    {
      "rank": 40,
      "score": 9.205959372648458,
      "candidate": "# Your code here\n    odd_sum = 0\n    for i in lst:\n        if i % 2 == 1 and i >= 0:\n            odd_sum += i * i\n    return odd_sum\n\nprint(double_the_difference([1, 3, 2, 0]))\nprint(double_the_difference([-1, -2, 0]))\nprint(double_the_difference([9, -2]))\nprint(double_the_difference([0]))"
    },
    {
      "rank": 41,
      "score": 9.183391466815202,
      "candidate": "odd_sum = 0\n    for i in lst:\n        if i < 0 or i%2 == 0:\n            continue\n        odd_sum += i**2\n    return odd_sum\n\nprint(double_the_difference([1, 3, 2, 0]))\nprint(double_the_difference([-1, -2, 0]))\nprint(double_the_difference([9, -2]))\nprint(double_the_difference([0]))"
    },
    {
      "rank": 42,
      "score": 9.177268828905222,
      "candidate": "sum = 0\n    for num in lst:\n        if num >= 0 and num % 2 != 0:\n            sum += num ** 2\n    return sum"
    },
    {
      "rank": 43,
      "score": 9.122564458729856,
      "candidate": "if len(lst) == 0:\n        return 0\n    else:\n        return sum([(i ** 2) if i % 2 != 0 else 0 for i in lst])"
    },
    {
      "rank": 44,
      "score": 9.004496860445897,
      "candidate": "result = 0\n    for i in lst:\n        if i % 2 != 0:\n            result += i ** 2\n    return result\n\ndef test_function():\n    assert double_the_difference([1, 3, 2, 0]) == 10\n    assert double_the_difference([-1, -2, 0]) == 0\n    assert double_the_difference([9, -2]) == 81\n    assert double_the_difference([0]) == 0\n    assert double_the_difference([]) == 0"
    },
    {
      "rank": 45,
      "score": 8.973005557553902,
      "candidate": "total = 0\n    for i in lst:\n        if i % 2 != 0:\n            total += (i ** 2)\n    return total"
    },
    {
      "rank": 46,
      "score": 8.946210893390457,
      "candidate": "pass"
    },
    {
      "rank": 47,
      "score": 8.902145503295483,
      "candidate": "sum = 0\n    for i in lst:\n        if i%2!=0:\n            sum+=i**2\n    return sum"
    },
    {
      "rank": 48,
      "score": 8.81367773444215,
      "candidate": "result = 0\n    for num in lst:\n        if num % 2 != 0:\n            result += num ** 2\n    return result"
    },
    {
      "rank": 49,
      "score": 8.76828871349479,
      "candidate": "sum = 0\n    for num in lst:\n        if num % 2 != 0 and num > 0:\n            sum += (num * num)\n    return sum"
    },
    {
      "rank": 50,
      "score": 8.701078161001123,
      "candidate": "if not lst:\n        return 0\n    \n    result = 0\n    for num in lst:\n        if num % 2 == 1:\n            result += num ** 2\n    return result\n\ndef test_cases():\n    assert double_the_difference([1, 3, 2, 0]) == 10\n    assert double_the_difference([-1, -2, 0]) == 0\n    assert double_the_difference([9, -2]) == 81\n    assert double_the_difference([0]) == 0\n    assert double_the_difference([]) == 0\n    print(\"Test Success!\")\n\ntest_cases()"
    },
    {
      "rank": 51,
      "score": 8.632293453617281,
      "candidate": "new_lst = []\n    for i in lst:\n        if i % 2 == 1:\n            new_lst.append(i**2)\n    return sum(new_lst)"
    },
    {
      "rank": 52,
      "score": 8.625262456968262,
      "candidate": "# your code here\n    output = 0\n    for i in lst:\n        if (i%2 != 0):\n            output += i**2\n    return output\n\nprint(double_the_difference([1, 3, 2, 0]))\nprint(double_the_difference([-1, -2, 0]))\nprint(double_the_difference([9, -2]))\nprint(double_the_difference([0]))"
    },
    {
      "rank": 53,
      "score": 8.616253589228675,
      "candidate": "# your code here\n    sum_of_squares = 0\n    for num in lst:\n        if num > 0 and num % 2 != 0:\n            sum_of_squares += num ** 2\n    return sum_of_squares"
    },
    {
      "rank": 54,
      "score": 8.610076160146226,
      "candidate": "return_value = 0\n    \n    for i in lst:\n        if i >= 0 and i % 2 != 0:\n            return_value += (i**2)\n            \n    return return_value"
    },
    {
      "rank": 55,
      "score": 8.608819999274287,
      "candidate": "sum = 0\n    for i in lst:\n        if i >= 0 and i % 2 != 0:\n            sum += i**2\n    return sum\n\n\nprint(double_the_difference([1, 3, 2, 0]))\nprint(double_the_difference([-1, -2, 0]))\nprint(double_the_difference([9, -2]))\nprint(double_the_difference([0]))"
    },
    {
      "rank": 56,
      "score": 8.60156811074208,
      "candidate": "result = 0\n    for i in lst:\n        if i < 0 or not isinstance(i, int):\n            continue\n        if i % 2 != 0:\n            result += i**2\n    return result"
    },
    {
      "rank": 57,
      "score": 8.592504582976733,
      "candidate": "result = 0\n    for x in lst:\n        if isinstance(x, int) and x % 2 != 0:\n            result += x**2\n    return result"
    },
    {
      "rank": 58,
      "score": 8.565425580227462,
      "candidate": "if lst == []:\n        return 0\n    sum_of_squares = 0\n    for number in lst:\n        if number < 0:\n            continue\n        elif number % 2 == 1:\n            sum_of_squares += number**2\n    return sum_of_squares"
    },
    {
      "rank": 59,
      "score": 8.548876241946822,
      "candidate": "sum = 0\n    for num in lst:\n        if num < 0 or not num%2 == 1:\n            continue\n        else:\n            sum += num**2\n    return sum"
    },
    {
      "rank": 60,
      "score": 8.499905739299377,
      "candidate": "total = 0\n    for num in lst:\n        if num % 2 != 0:\n            total += num ** 2\n    return total"
    },
    {
      "rank": 61,
      "score": 8.48796797856353,
      "candidate": "sum = 0\n    for i in lst:\n        try:\n            if i % 2 != 0:\n                sum += i ** 2\n        except:\n            continue\n    return sum"
    },
    {
      "rank": 62,
      "score": 8.426531424889468,
      "candidate": "sum = 0\n    for num in lst:\n        if num > 0:\n            if num % 2 != 0:\n                sum += num ** 2\n    return sum"
    },
    {
      "rank": 63,
      "score": 8.351614956112536,
      "candidate": "sum = 0\n    for i in lst:\n        if i > 0 and i%2 == 1:\n            sum += i**2\n    return sum\n\nprint(double_the_difference([1, 3, 2, 0]))\nprint(double_the_difference([-1, -2, 0]))\nprint(double_the_difference([9, -2]))\nprint(double_the_difference([0]))"
    },
    {
      "rank": 64,
      "score": 8.334608500525688,
      "candidate": "return sum([x**2 for x in lst if x%2 == 1])\n\nprint(double_the_difference([1, 3, 2, 0]))\nprint(double_the_difference([-1, -2, 0]))\nprint(double_the_difference([9, -2]))\nprint(double_the_difference([0]))\nprint(double_the_difference([]))"
    },
    {
      "rank": 65,
      "score": 8.327375965969855,
      "candidate": "if len(lst) == 0:\n        return 0\n    else:\n        total = 0\n        for i in lst:\n            if i % 2 != 0:\n                total += i ** 2\n        return total\n\nprint(double_the_difference([1, 3, 2, 0]))\nprint(double_the_difference([-1, -2, 0]))\nprint(double_the_difference([9, -2]))\nprint(double_the_difference([0]))"
    },
    {
      "rank": 66,
      "score": 8.327367757082776,
      "candidate": "# Your code here\n    result = 0\n    for num in lst:\n        if num > 0 and num % 2 == 1:\n            result += num**2\n    return result\n\nprint(double_the_difference([1, 3, 2, 0]))\nprint(double_the_difference([-1, -2, 0]))\nprint(double_the_difference([9, -2]))\nprint(double_the_difference([0]))\nprint(double_the_difference([]))"
    },
    {
      "rank": 67,
      "score": 8.298597569547805,
      "candidate": "# Your code here\n    odd_list = [i**2 for i in lst if i%2!=0]\n    return sum(odd_list)"
    },
    {
      "rank": 68,
      "score": 8.294940769211511,
      "candidate": "if len(lst) == 0:\n        return 0\n    \n    square_list = []\n    for number in lst:\n        if number % 2 == 1 and number > 0:\n            square_list.append(number**2)\n    return sum(square_list)\n\nprint(double_the_difference([1, 3, 2, 0]))\nprint(double_the_difference([-1, -2, 0]))\nprint(double_the_difference([9, -2]))\nprint(double_the_difference([0]))"
    },
    {
      "rank": 69,
      "score": 8.2938925966498,
      "candidate": "return sum([num * num for num in lst if num % 2 != 0])"
    },
    {
      "rank": 70,
      "score": 8.289838256518838,
      "candidate": "total = 0\n    for num in lst:\n        if type(num) == int and num >= 0:\n            if num % 2 != 0:\n                total += num ** 2\n    return total"
    },
    {
      "rank": 71,
      "score": 8.251903304236286,
      "candidate": "total = 0\n    for i in lst:\n        if i%2 != 0:\n            total += i**2\n    return total"
    },
    {
      "rank": 72,
      "score": 8.214125058964552,
      "candidate": "if len(lst) == 0:\n        return 0\n    else:\n        return sum([i**2 for i in lst if i%2 == 1])\n    \n\nprint(double_the_difference([1, 3, 2, 0]))\nprint(double_the_difference([-1, -2, 0]))\nprint(double_the_difference([9, -2]))\nprint(double_the_difference([0]))"
    },
    {
      "rank": 73,
      "score": 8.211579567659316,
      "candidate": "sum_squares = 0\n    for i in lst:\n        if i > 0 and i % 2 != 0:\n            sum_squares += i ** 2\n    return sum_squares"
    },
    {
      "rank": 74,
      "score": 8.2048573255218,
      "candidate": "# Your code here\n    sum = 0\n    for i in lst:\n        if i%2 != 0:\n            sum += i*i\n    return sum"
    },
    {
      "rank": 75,
      "score": 8.193565922652176,
      "candidate": "sum = 0\n    for x in lst:\n        if x < 0 or not x % 2 == 1:\n            continue\n        sum += x*x\n    return sum\n\n\nprint(double_the_difference([1, 3, 2, 0]))\nprint(double_the_difference([-1, -2, 0]))\nprint(double_the_difference([9, -2]))\nprint(double_the_difference([0]))"
    },
    {
      "rank": 76,
      "score": 8.185309335307622,
      "candidate": "odd_list = []\n    for num in lst:\n        if num % 2 != 0:\n            odd_list.append(num)\n    return sum([num**2 for num in odd_list])\n\n\nprint(double_the_difference([1, 3, 2, 0]))\nprint(double_the_difference([-1, -2, 0]))\nprint(double_the_difference([9, -2]))\nprint(double_the_difference([0]))"
    },
    {
      "rank": 77,
      "score": 8.179564342560925,
      "candidate": "if not lst:\n        return 0\n    else:\n        return sum([x**2 for x in lst if x%2 == 1])"
    },
    {
      "rank": 78,
      "score": 8.163300679823958,
      "candidate": "sum_of_squares = 0\n    for num in lst:\n        if num >= 0 and num%2 == 1:\n            sum_of_squares += num**2\n    return sum_of_squares"
    },
    {
      "rank": 79,
      "score": 8.144125099485041,
      "candidate": "# Your code here\n    total = 0\n    for num in lst:\n        if num >= 0 and num % 2 == 1:\n            total += num ** 2\n    return total\n\nprint(double_the_difference([1, 3, 2, 0]))\nprint(double_the_difference([-1, -2, 0]))\nprint(double_the_difference([9, -2]))\nprint(double_the_difference([0]))"
    },
    {
      "rank": 80,
      "score": 8.143591138329747,
      "candidate": "# Your code here\n    result = 0\n    for x in lst:\n        if x < 0 or x % 2 == 0:\n            continue\n        result += x**2\n    return result\n\nprint(double_the_difference([1, 3, 2, 0]))\nprint(double_the_difference([-1, -2, 0]))\nprint(double_the_difference([9, -2]))\nprint(double_the_difference([0]))\nprint(double_the_difference([]))"
    },
    {
      "rank": 81,
      "score": 8.121884567141883,
      "candidate": "total = 0\n    for num in lst:\n        if num > 0 and num % 2 != 0:\n            total += num**2\n    return total\n\n\nprint(double_the_difference([1, 3, 2, 0]))\nprint(double_the_difference([-1, -2, 0]))\nprint(double_the_difference([9, -2]))\nprint(double_the_difference([0]))"
    },
    {
      "rank": 82,
      "score": 8.08452234024709,
      "candidate": "# Your code here\n    sum = 0\n    for i in lst:\n        if i % 2 != 0 and i >= 0:\n            sum += i**2\n    return sum"
    },
    {
      "rank": 83,
      "score": 8.040197642997851,
      "candidate": "return sum(i**2 for i in lst if i % 2 == 1)"
    },
    {
      "rank": 84,
      "score": 8.024835682833125,
      "candidate": "sum = 0\n    for num in lst:\n        if num > 0 and num % 2 == 1:\n            sum += num**2\n    return sum\n\n\nprint(double_the_difference([1, 3, 2, 0]))\nprint(double_the_difference([-1, -2, 0]))\nprint(double_the_difference([9, -2]))\nprint(double_the_difference([0]))"
    },
    {
      "rank": 85,
      "score": 7.990432406683839,
      "candidate": "sum = 0\n    for i in lst:\n        if i % 2 == 1:\n            sum += i**2\n    return sum"
    },
    {
      "rank": 86,
      "score": 7.938028884277233,
      "candidate": "result = 0\n    for i in lst:\n        if i % 2 != 0 and i > 0:\n            result += i**2\n    return result"
    },
    {
      "rank": 87,
      "score": 7.8912769574414305,
      "candidate": "return_list = []\n    for num in lst:\n        if num % 2 != 0 and num > 0:\n            return_list.append(num**2)\n    return sum(return_list)"
    },
    {
      "rank": 88,
      "score": 7.868947655733293,
      "candidate": "odd_squared = []\n    for num in lst:\n        if isinstance(num, int) and num > 0:\n            if num % 2 != 0:\n                odd_squared.append(num**2)\n    return sum(odd_squared)"
    },
    {
      "rank": 89,
      "score": 7.834022619458933,
      "candidate": "sum = 0\n    for i in lst:\n        if (i > 0) and (i % 2 != 0):\n            sum += (i ** 2)\n    return sum\n\n\n\n\n\nprint(double_the_difference([1, 3, 2, 0]))\nprint(double_the_difference([-1, -2, 0]))\nprint(double_the_difference([9, -2]))\nprint(double_the_difference([0]))"
    },
    {
      "rank": 90,
      "score": 7.738292593776799,
      "candidate": "odd_sum = 0\n    for x in lst:\n        if x > 0:\n            if x % 2 == 1:\n                odd_sum += x**2\n    return odd_sum\n\n\nprint(double_the_difference([1, 3, 2, 0]))\nprint(double_the_difference([-1, -2, 0]))\nprint(double_the_difference([9, -2]))\nprint(double_the_difference([0]))"
    },
    {
      "rank": 91,
      "score": 7.7320703513377165,
      "candidate": "# Your code here\n    #sum = 0\n    #for x in lst:\n    #    if x < 0 or x % 2 == 0:\n    #        continue\n    #    else:\n    #        sum += x ** 2\n    #return sum\n    \n    #return sum([x**2 for x in lst if x % 2 != 0])\n    \n    #return sum([x**2 for x in lst if x > 0 and x % 2 != 0])\n    \n    return sum([x**2 for x in lst if x % 2 != 0 and x >= 0])\n\nprint(double_the_difference([1, 3, 2, 0]))\nprint(double_the_difference([-1, -2, 0]))\nprint(double_the_difference([9, -2]))\nprint(double_the_difference([0]))"
    },
    {
      "rank": 92,
      "score": 7.712686970378385,
      "candidate": "lst = [x**2 for x in lst if x >= 0 and x % 2 == 1]\n    return sum(lst)\n\nprint(double_the_difference([1, 3, 2, 0]))"
    },
    {
      "rank": 93,
      "score": 7.705183449260731,
      "candidate": "# your code here\n    sum = 0\n    for i in lst:\n        if i % 2 != 0:\n            sum += i * i\n    return sum"
    },
    {
      "rank": 94,
      "score": 7.562924366763077,
      "candidate": "odd_sum = 0\n    for i in lst:\n        if i % 2 != 0 and i > 0:\n            odd_sum += (i ** 2)\n    return odd_sum\n    \n    \n    \ndouble_the_difference([1, 3, 2, 0])"
    },
    {
      "rank": 95,
      "score": 7.4878043221155455,
      "candidate": "total = 0\n    for num in lst:\n        if num % 2 != 0:\n            total += num**2\n    return total\n\nprint(double_the_difference([1, 3, 2, 0])) # 10\nprint(double_the_difference([-1, -2, 0])) # 0\nprint(double_the_difference([9, -2])) # 81\nprint(double_the_difference([0])) # 0"
    },
    {
      "rank": 96,
      "score": 7.464609382504557,
      "candidate": "# Your code here\n    sum_of_squares = 0\n    for i in lst:\n        if i >= 0 and i % 2 == 1:\n            sum_of_squares += i**2\n    return sum_of_squares\n\n\nprint(double_the_difference([1, 3, 2, 0]))\nprint(double_the_difference([-1, -2, 0]))\nprint(double_the_difference([9, -2]))\nprint(double_the_difference([0]))"
    },
    {
      "rank": 97,
      "score": 7.4506599871439985,
      "candidate": "result = 0\n    for num in lst:\n        if isinstance(num, int) and num > 0:\n            result += (num * num)\n    return result"
    },
    {
      "rank": 98,
      "score": 3.0,
      "candidate": "return sum([pow(n, 2) for n in lst if n%2 != 0 and n > 0])\n    \ndef test_function(test_case):\n    answer = double_the_difference(test_case)\n    if answer == test_case[1]:\n        print(\"Pass\")\n    else:\n        print(\"Fail\")\n\ntest_case_1 = ([1, 3, 2, 0], 10)\ntest_function(test_case_1)\n\ntest_case_2 = ([-1, -2, 0], 0)\ntest_function(test_case_2)\n\ntest_case_3 = ([9, -2], 81)\ntest_function(test_case_3)\n\ntest_case_4 = ([0], 0)\ntest_function(test_case_4)\n\ntest_case_5 = ([], 0)\ntest_function(test_case_5)\n\ntest_case_6 = ([\"1\", 2, 3], 0)\ntest_function(test_case_6)\n\ntest_case_7 = ([1, 3, \"b\", 2, 0], 10)\ntest_function(test_case_7)\n\ntest_case_8 = ([1, 3, None, 2, 0], 10)\ntest_function(test_case_8)\n\ntest_case_9 = (None, 0)\ntest_function(test_case_9)"
    },
    {
      "rank": 99,
      "score": 3.0,
      "candidate": "# Your code here\n    return 0\n\nprint(double_the_difference([1, 3, 2, 0])) # 1 + 9 + 0 + 0 = 10\nprint(double_the_difference([-1, -2, 0])) # 0\nprint(double_the_difference([9, -2])) # 81\nprint(double_the_difference([0])) # 0  \n\ndef double_the_difference(lst):\n    '''\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9, -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list is empty, return 0.\n    '''\n    # Your code here\n    return 0\n\nprint(double_the_difference([1, 3, 2, 0])) # 1 + 9 + 0 + 0 = 10\nprint(double_the_difference([-1, -2, 0])) # 0\nprint(double_the_difference([9, -2])) # 81\nprint(double_the_difference([0])) # 0  \n\ndef double_the_difference(lst):\n    '''\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9, -2]) == 81\n    double_the_difference([0]) == 0"
    },
    {
      "rank": 100,
      "score": 3.0,
      "candidate": "# your code here\n    sum = 0\n    for i in lst:\n        if i % 2 == 1:\n            sum += (i * i)\n    return sum\n\nprint(double_the_difference([1, 3, 2, 0]))\nprint(double_the_difference([-1, -2, 0]))\nprint(double_the_difference([9, -2]))\nprint(double_the_difference([0]))\n\n# 3\ndef count_positives(lst):\n    '''\n    Given a list of numbers, return the count of the positives ones.\n    Examples:\n    count_positives([1, 2, 3, -4, 5]) == 3\n    count_positives([1, 1, 1, 1, 1]) == 5\n    count_positives([-1, -1, -1, -1, -1]) == 0\n    count_positives([]) == 0\n    \n    If the input list is None or empty, return 0.\n    '''\n    # your code here\n    count = 0\n    for i in lst:\n        if i > 0:\n            count += 1\n    return count\n\nprint(count_positives([1, 2, 3, -4, 5]))\nprint(count_positives([1, 1, 1, 1, 1]))\nprint(count_positives([-1, -1, -1, -1, -1]))\nprint(count_positives([]))\n\n# 4\ndef get_min(lst):\n    '''\n    Given a list of numbers, return the min number.\n    Examples:\n    get_min([1, 2, 3, 4, 5]) == 1\n    get_min([1, 2, 3, 4, -5]) == -5\n    get_min([1, 2, -3, 4, 5]) == -3\n    get_min([-1, -2, -3, -4, -5]) == -5\n    get_min([-1"
    }
  ]
}