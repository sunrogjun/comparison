{
  "timestamp": "2025-09-14T21:26:16.794341",
  "method": "improved_llm_judge",
  "judge_model": "codellama/CodeLlama-7b-Python-hf",
  "target_model": "codellama-7b",
  "dataset": "humaneval",
  "problem_number": 48,
  "total_candidates": 100,
  "results": [
    {
      "rank": 1,
      "score": 10.0,
      "candidate": "return text == text[::-1]\n\n\ndef is_palindrome_optimized(text: str):\n    \"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome_optimized('')\n    True\n    >>> is_palindrome_optimized('aba')\n    True\n    >>> is_palindrome_optimized('aaaaa')\n    True\n    >>> is_palindrome_optimized('zbcd')\n    False\n    \"\"\"\n    if len(text) <= 1:\n        return True\n    if text[0] != text[-1]:\n        return False\n    return is_palindrome_optimized(text[1:-1])\n\n\ndef is_palindrome_recursive(text: str):\n    \"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome_recursive('')\n    True\n    >>> is_palindrome_recursive('aba')\n    True\n    >>> is_palindrome_recursive('aaaaa')\n    True\n    >>> is_palindrome_recursive('zbcd')\n    False\n    \"\"\"\n    return _is_palindrome_recursive(text, 0, len(text) - 1)\n\n\ndef _is_palindrome_recursive(text: str, left: int, right: int) -> bool:\n    if left >= right:\n        return True\n    if text[left] != text[right]:\n        return False\n    return _is_palindrome_recursive(text, left + 1, right - 1)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 2,
      "score": 10.0,
      "candidate": "return text == text[::-1]\n\n\ndef is_palindrome_optimized(text: str):\n    \"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome_optimized('')\n    True\n    >>> is_palindrome_optimized('aba')\n    True\n    >>> is_palindrome_optimized('aaaaa')\n    True\n    >>> is_palindrome_optimized('zbcd')\n    False\n    \"\"\"\n    if len(text) == 1:\n        return True\n    if text[0] == text[-1]:\n        return is_palindrome_optimized(text[1:-1])\n    return False\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 3,
      "score": 10.0,
      "candidate": "return text == text[::-1]\n\n\ndef is_palindrome_with_stack(text: str):\n    \"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome_with_stack('')\n    True\n    >>> is_palindrome_with_stack('aba')\n    True\n    >>> is_palindrome_with_stack('aaaaa')\n    True\n    >>> is_palindrome_with_stack('zbcd')\n    False\n    \"\"\"\n    stack = []\n    for char in text:\n        stack.append(char)\n    for char in text:\n        if char != stack.pop():\n            return False\n    return True\n\n\ndef is_palindrome_with_stack_reverse(text: str):\n    \"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome_with_stack_reverse('')\n    True\n    >>> is_palindrome_with_stack_reverse('aba')\n    True\n    >>> is_palindrome_with_stack_reverse('aaaaa')\n    True\n    >>> is_palindrome_with_stack_reverse('zbcd')\n    False\n    \"\"\"\n    stack = []\n    for char in text:\n        stack.append(char)\n    return text == ''.join(stack[::-1])\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 4,
      "score": 10.0,
      "candidate": "return text == text[::-1]\n\n\ndef is_palindrome_alt(text: str):\n    \"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome_alt('')\n    True\n    >>> is_palindrome_alt('aba')\n    True\n    >>> is_palindrome_alt('aaaaa')\n    True\n    >>> is_palindrome_alt('zbcd')\n    False\n    \"\"\"\n    return text == text[::-1]"
    },
    {
      "rank": 5,
      "score": 10.0,
      "candidate": "if text == text[::-1]:\n        return True\n    return False\n\n\ndef is_palindrome_reverse(text: str):\n    \"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome_reverse('')\n    True\n    >>> is_palindrome_reverse('aba')\n    True\n    >>> is_palindrome_reverse('aaaaa')\n    True\n    >>> is_palindrome_reverse('zbcd')\n    False\n    \"\"\"\n    reversed_text = text[::-1]\n    if text == reversed_text:\n        return True\n    return False\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 6,
      "score": 10.0,
      "candidate": "return text == text[::-1]\n\n\ndef is_palindrome_rec(text: str):\n    \"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome_rec('')\n    True\n    >>> is_palindrome_rec('aba')\n    True\n    >>> is_palindrome_rec('aaaaa')\n    True\n    >>> is_palindrome_rec('zbcd')\n    False\n    \"\"\"\n    return _is_palindrome_rec(text, 0, len(text) - 1)\n\n\ndef _is_palindrome_rec(text: str, left: int, right: int):\n    \"\"\"\n    Recursively checks if given string is a palindrome\n    >>> _is_palindrome_rec('', 0, 0)\n    True\n    >>> _is_palindrome_rec('aba', 0, 2)\n    True\n    >>> _is_palindrome_rec('aaaaa', 0, 4)\n    True\n    >>> _is_palindrome_rec('zbcd', 0, 4)\n    False\n    \"\"\"\n    if left >= right:\n        return True\n    if text[left] != text[right]:\n        return False\n    return _is_palindrome_rec(text, left + 1, right - 1)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 7,
      "score": 10.0,
      "candidate": "return text == text[::-1]\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 8,
      "score": 10.0,
      "candidate": "if not isinstance(text, str):\n        raise TypeError('text must be of type string')\n    return text == text[::-1]\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 9,
      "score": 10.0,
      "candidate": "return text == text[::-1]\n\n\ndef is_palindrome_iterative(text: str):\n    \"\"\"\n    Checks if given string is a palindrome using iterative approach\n    >>> is_palindrome_iterative('')\n    True\n    >>> is_palindrome_iterative('aba')\n    True\n    >>> is_palindrome_iterative('aaaaa')\n    True\n    >>> is_palindrome_iterative('zbcd')\n    False\n    \"\"\"\n    start = 0\n    end = len(text) - 1\n    while start < end:\n        if text[start] != text[end]:\n            return False\n        start += 1\n        end -= 1\n    return True\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 10,
      "score": 10.0,
      "candidate": "if len(text) <= 1:\n        return True\n\n    return text[0] == text[-1] and is_palindrome(text[1:-1])\n\n\ndef is_palindrome_recursive(text: str, left: int, right: int):\n    \"\"\"\n    Checks if given string is a palindrome (recursive)\n    >>> is_palindrome_recursive('', 0, 0)\n    True\n    >>> is_palindrome_recursive('aba', 0, 2)\n    True\n    >>> is_palindrome_recursive('aaaaa', 0, 4)\n    True\n    >>> is_palindrome_recursive('zbcd', 0, 4)\n    False\n    \"\"\"\n    if left >= right:\n        return True\n\n    return text[left] == text[right] and is_palindrome_recursive(text, left + 1, right - 1)\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 11,
      "score": 10.0,
      "candidate": "return text == text[::-1]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 12,
      "score": 10.0,
      "candidate": "return text == text[::-1]\n\n\ndef is_palindrome_two(text: str):\n    \"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome_two('')\n    True\n    >>> is_palindrome_two('aba')\n    True\n    >>> is_palindrome_two('aaaaa')\n    True\n    >>> is_palindrome_two('zbcd')\n    False\n    \"\"\"\n    return text == text[::-1]\n\n\ndef is_palindrome_three(text: str):\n    \"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome_three('')\n    True\n    >>> is_palindrome_three('aba')\n    True\n    >>> is_palindrome_three('aaaaa')\n    True\n    >>> is_palindrome_three('zbcd')\n    False\n    \"\"\"\n    return text == text[::-1]\n\n\ndef is_palindrome_four(text: str):\n    \"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome_four('')\n    True\n    >>> is_palindrome_four('aba')\n    True\n    >>> is_palindrome_four('aaaaa')\n    True\n    >>> is_palindrome_four('zbcd')\n    False\n    \"\"\"\n    return text == text[::-1]\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 13,
      "score": 10.0,
      "candidate": "return text == text[::-1]\n\n\ndef is_palindrome_rec(text: str):\n    \"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome_rec('')\n    True\n    >>> is_palindrome_rec('aba')\n    True\n    >>> is_palindrome_rec('aaaaa')\n    True\n    >>> is_palindrome_rec('zbcd')\n    False\n    \"\"\"\n    if len(text) <= 1:\n        return True\n    elif text[0] != text[-1]:\n        return False\n    return is_palindrome_rec(text[1:-1])\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 14,
      "score": 10.0,
      "candidate": "return text == text[::-1]\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 15,
      "score": 10.0,
      "candidate": "return text == text[::-1]\n\n\ndef is_palindrome_two(text: str):\n    \"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome_two('')\n    True\n    >>> is_palindrome_two('aba')\n    True\n    >>> is_palindrome_two('aaaaa')\n    True\n    >>> is_palindrome_two('zbcd')\n    False\n    \"\"\"\n    return text == text[::-1]\n\n\ndef is_palindrome_three(text: str):\n    \"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome_three('')\n    True\n    >>> is_palindrome_three('aba')\n    True\n    >>> is_palindrome_three('aaaaa')\n    True\n    >>> is_palindrome_three('zbcd')\n    False\n    \"\"\"\n    return text == text[::-1]\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 16,
      "score": 10.0,
      "candidate": "return text == text[::-1]\n\n\ndef is_palindrome_reverse(text: str):\n    \"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome_reverse('')\n    True\n    >>> is_palindrome_reverse('aba')\n    True\n    >>> is_palindrome_reverse('aaaaa')\n    True\n    >>> is_palindrome_reverse('zbcd')\n    False\n    \"\"\"\n    return text == text[::-1]\n\n\ndef is_palindrome_reverse_inplace(text: str):\n    \"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome_reverse_inplace('')\n    True\n    >>> is_palindrome_reverse_inplace('aba')\n    True\n    >>> is_palindrome_reverse_inplace('aaaaa')\n    True\n    >>> is_palindrome_reverse_inplace('zbcd')\n    False\n    \"\"\"\n    left = 0\n    right = len(text) - 1\n    while left < right:\n        if text[left] != text[right]:\n            return False\n        left += 1\n        right -= 1\n    return True\n\n\ndef is_palindrome_two_pointers(text: str):\n    \"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome_two_pointers('')\n    True\n    >>> is_palindrome_two_pointers('aba')\n    True\n    >>> is_palindrome_two_pointers('aaaaa')\n    True\n    >>> is_palindrome_two_pointers('zbcd')\n    False\n    \"\"\"\n    left = 0\n    right = len(text) - 1\n    while left < right:\n        if text[left] != text[right]:\n            return False\n        left += 1\n        right -= 1\n    return True\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 17,
      "score": 10.0,
      "candidate": "return text == text[::-1]\n\n\ndef is_palindrome2(text: str):\n    \"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome2('')\n    True\n    >>> is_palindrome2('aba')\n    True\n    >>> is_palindrome2('aaaaa')\n    True\n    >>> is_palindrome2('zbcd')\n    False\n    \"\"\"\n    return text == text[::-1]\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 18,
      "score": 10.0,
      "candidate": "return text == text[::-1]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 19,
      "score": 10.0,
      "candidate": "return text == text[::-1]\n\n\ndef is_palindrome_v2(text: str):\n    \"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome_v2('')\n    True\n    >>> is_palindrome_v2('aba')\n    True\n    >>> is_palindrome_v2('aaaaa')\n    True\n    >>> is_palindrome_v2('zbcd')\n    False\n    \"\"\"\n    return text == text[::-1]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 20,
      "score": 10.0,
      "candidate": "if len(text) == 0 or len(text) == 1:\n        return True\n\n    if text[0] == text[-1]:\n        return is_palindrome(text[1:-1])\n    else:\n        return False\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 21,
      "score": 10.0,
      "candidate": "return text == text[::-1]\n\n\ndef is_palindrome_with_stack(text: str):\n    \"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome_with_stack('')\n    True\n    >>> is_palindrome_with_stack('aba')\n    True\n    >>> is_palindrome_with_stack('aaaaa')\n    True\n    >>> is_palindrome_with_stack('zbcd')\n    False\n    \"\"\"\n    text = text.lower()\n    stack = []\n    for char in text:\n        if char.isalnum():\n            stack.append(char)\n\n    while len(stack) > 1 and stack[-1] == stack[0]:\n        stack.pop()\n        stack.pop(0)\n\n    return len(stack) <= 1\n\n\ndef is_palindrome_with_recursion(text: str):\n    \"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome_with_recursion('')\n    True\n    >>> is_palindrome_with_recursion('aba')\n    True\n    >>> is_palindrome_with_recursion('aaaaa')\n    True\n    >>> is_palindrome_with_recursion('zbcd')\n    False\n    \"\"\"\n    text = text.lower()\n    return is_palindrome_recursive(text, 0, len(text) - 1)\n\n\ndef is_palindrome_recursive(text: str, left: int, right: int):\n    if left >= right:\n        return True\n    if text[left] != text[right]:\n        return False\n    return is_palindrome_recursive(text, left + 1, right - 1)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 22,
      "score": 10.0,
      "candidate": "return text == text[::-1]\n\n\ndef is_palindrome_with_stack(text: str):\n    \"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome_with_stack('')\n    True\n    >>> is_palindrome_with_stack('aba')\n    True\n    >>> is_palindrome_with_stack('aaaaa')\n    True\n    >>> is_palindrome_with_stack('zbcd')\n    False\n    \"\"\"\n    stack = []\n    for char in text:\n        stack.append(char)\n    for char in text:\n        if stack.pop() != char:\n            return False\n    return True\n\n\ndef is_palindrome_with_stack_and_set(text: str):\n    \"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome_with_stack_and_set('')\n    True\n    >>> is_palindrome_with_stack_and_set('aba')\n    True\n    >>> is_palindrome_with_stack_and_set('aaaaa')\n    True\n    >>> is_palindrome_with_stack_and_set('zbcd')\n    False\n    \"\"\"\n    stack = []\n    for char in text:\n        stack.append(char)\n    for char in text:\n        if stack.pop() != char:\n            return False\n    return True\n\n\ndef is_palindrome_with_stack_and_set_with_index(text: str):\n    \"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome_with_stack_and_set_with_index('')\n    True\n    >>> is_palindrome_with_stack_and_set_with_index('aba')\n    True\n    >>> is_palindrome_with_stack_and_set_with_index('aaaaa')\n    True\n    >>> is_palindrome_with_stack_and_set_with_index('zbcd')\n    False\n    \"\"\"\n    stack = []\n    for index in range(len(text)):\n        stack.append(("
    },
    {
      "rank": 23,
      "score": 10.0,
      "candidate": "if len(text) <= 1:\n        return True\n\n    if text[0] != text[-1]:\n        return False\n\n    return is_palindrome(text[1:-1])\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 24,
      "score": 10.0,
      "candidate": "return text == text[::-1]\n\n\ndef is_palindrome_optimized(text: str):\n    \"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome_optimized('')\n    True\n    >>> is_palindrome_optimized('aba')\n    True\n    >>> is_palindrome_optimized('aaaaa')\n    True\n    >>> is_palindrome_optimized('zbcd')\n    False\n    \"\"\"\n    return text == text[::-1]\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 25,
      "score": 10.0,
      "candidate": "return text == text[::-1]\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 26,
      "score": 10.0,
      "candidate": "return text == text[::-1]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 27,
      "score": 10.0,
      "candidate": "return text == text[::-1]\n\n\ndef is_palindrome_recursive(text: str, left: int, right: int):\n    \"\"\"\n    Recursive implementation of is_palindrome\n    >>> is_palindrome_recursive('', 0, 0)\n    True\n    >>> is_palindrome_recursive('aba', 0, 2)\n    True\n    >>> is_palindrome_recursive('aaaaa', 0, 4)\n    True\n    >>> is_palindrome_recursive('zbcd', 0, 4)\n    False\n    \"\"\"\n    if left >= right:\n        return True\n    if text[left] != text[right]:\n        return False\n    return is_palindrome_recursive(text, left + 1, right - 1)\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 28,
      "score": 10.0,
      "candidate": "if len(text) == 1:\n        return True\n    if len(text) % 2 == 0:\n        return text[0:int(len(text) / 2)] == text[int(len(text) / 2):][::-1]\n    else:\n        return text[0:int((len(text) - 1) / 2)] == text[int((len(text) + 1) / 2):][::-1]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 29,
      "score": 10.0,
      "candidate": "return text == text[::-1]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 30,
      "score": 9.982086980445024,
      "candidate": "return text == text[::-1]\n\n\ndef is_palindrome_optimized(text: str):\n    \"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\n    for i in range(len(text)):\n        if text[i] != text[len(text) - i - 1]:\n            return False\n    return True\n\n\nif __name__ == '__main__':\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 31,
      "score": 9.963994939209833,
      "candidate": "return text == text[::-1]\n\n\ndef is_palindrome_recursive(text: str, start: int, end: int):\n    \"\"\"\n    Checks if given string is a palindrome using recursion\n    >>> is_palindrome_recursive('', 0, 0)\n    True\n    >>> is_palindrome_recursive('aba', 0, 2)\n    True\n    >>> is_palindrome_recursive('aaaaa', 0, 4)\n    True\n    >>> is_palindrome_recursive('zbcd', 0, 4)\n    False\n    \"\"\"\n    if start >= end:\n        return True\n    elif text[start] != text[end]:\n        return False\n    return is_palindrome_recursive(text, start + 1, end - 1)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod(verbose=True)"
    },
    {
      "rank": 32,
      "score": 9.930867849414408,
      "candidate": "return text == text[::-1]\n\n\ndef is_palindrome_with_list(text: str):\n    \"\"\"\n    Checks if given string is a palindrome using a list\n    >>> is_palindrome_with_list('')\n    True\n    >>> is_palindrome_with_list('aba')\n    True\n    >>> is_palindrome_with_list('aaaaa')\n    True\n    >>> is_palindrome_with_list('zbcd')\n    False\n    \"\"\"\n    text_list = list(text)\n    text_list.reverse()\n    return text_list == list(text)\n\n\ndef is_palindrome_with_stack(text: str):\n    \"\"\"\n    Checks if given string is a palindrome using a stack\n    >>> is_palindrome_with_stack('')\n    True\n    >>> is_palindrome_with_stack('aba')\n    True\n    >>> is_palindrome_with_stack('aaaaa')\n    True\n    >>> is_palindrome_with_stack('zbcd')\n    False\n    \"\"\"\n    text_stack = list(text)\n    while len(text_stack) > 1:\n        if text_stack.pop() != text_stack.pop():\n            return False\n    return True\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 33,
      "score": 9.907170511668092,
      "candidate": "return text == text[::-1]\n\n\ndef is_palindrome_r(text: str):\n    \"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome_r('')\n    True\n    >>> is_palindrome_r('aba')\n    True\n    >>> is_palindrome_r('aaaaa')\n    True\n    >>> is_palindrome_r('zbcd')\n    False\n    \"\"\"\n    if len(text) < 2:\n        return True\n    if text[0] != text[-1]:\n        return False\n    return is_palindrome_r(text[1:-1])\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 34,
      "score": 9.890164056081243,
      "candidate": "return text == text[::-1]\n\n\ndef is_palindrome2(text: str):\n    \"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome2('')\n    True\n    >>> is_palindrome2('aba')\n    True\n    >>> is_palindrome2('aaaaa')\n    True\n    >>> is_palindrome2('zbcd')\n    False\n    \"\"\"\n    text = text.lower()\n    for i in range(len(text) // 2):\n        if text[i] != text[-i - 1]:\n            return False\n    return True\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 35,
      "score": 9.887111849756732,
      "candidate": "return text == text[::-1]\n\n\ndef is_palindrome_optimized(text: str):\n    \"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome_optimized('')\n    True\n    >>> is_palindrome_optimized('aba')\n    True\n    >>> is_palindrome_optimized('aaaaa')\n    True\n    >>> is_palindrome_optimized('zbcd')\n    False\n    \"\"\"\n    return text == text[::-1]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 36,
      "score": 9.88293152152541,
      "candidate": "return text == text[::-1]\n\n\ndef is_palindrome_recursive(text: str):\n    \"\"\"\n    Recursively checks if given string is a palindrome\n    >>> is_palindrome_recursive('')\n    True\n    >>> is_palindrome_recursive('aba')\n    True\n    >>> is_palindrome_recursive('aaaaa')\n    True\n    >>> is_palindrome_recursive('zbcd')\n    False\n    \"\"\"\n    return _is_palindrome_recursive(text, 0, len(text) - 1)\n\n\ndef _is_palindrome_recursive(text: str, left: int, right: int) -> bool:\n    if left >= right:\n        return True\n    if text[left] != text[right]:\n        return False\n    return _is_palindrome_recursive(text, left + 1, right - 1)\n\n\nif __name__ == \"__main__\":\n    from doctest import testmod\n    testmod()"
    },
    {
      "rank": 37,
      "score": 9.854153125103362,
      "candidate": "return text == text[::-1]\n\n\ndef is_palindrome_naive(text: str):\n    \"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome_naive('')\n    True\n    >>> is_palindrome_naive('aba')\n    True\n    >>> is_palindrome_naive('aaaaa')\n    True\n    >>> is_palindrome_naive('zbcd')\n    False\n    \"\"\"\n    if len(text) <= 1:\n        return True\n\n    if text[0] != text[-1]:\n        return False\n\n    return is_palindrome_naive(text[1:-1])\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 38,
      "score": 9.849448152205355,
      "candidate": "return text == text[::-1]\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 39,
      "score": 9.845393812074393,
      "candidate": "text = text.lower()\n    reversed_text = text[::-1]\n    return text == reversed_text\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 40,
      "score": 9.807458859791842,
      "candidate": "return text == text[::-1]\n\n\ndef is_palindrome_short(text: str):\n    \"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome_short('')\n    True\n    >>> is_palindrome_short('aba')\n    True\n    >>> is_palindrome_short('aaaaa')\n    True\n    >>> is_palindrome_short('zbcd')\n    False\n    \"\"\"\n    return text == text[::-1]\n\n\ndef is_palindrome_shortest(text: str):\n    \"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome_shortest('')\n    True\n    >>> is_palindrome_shortest('aba')\n    True\n    >>> is_palindrome_shortest('aaaaa')\n    True\n    >>> is_palindrome_shortest('zbcd')\n    False\n    \"\"\"\n    return text == text[::-1]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 41,
      "score": 9.803945923433922,
      "candidate": "return text == text[::-1]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 42,
      "score": 9.769680614520107,
      "candidate": "if len(text) <= 1:\n        return True\n    if text[0] != text[-1]:\n        return False\n    return is_palindrome(text[1:-1])\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 43,
      "score": 9.768291153593768,
      "candidate": "if not isinstance(text, str):\n        return False\n\n    if len(text) == 1:\n        return True\n\n    if len(text) == 2:\n        if text[0] == text[1]:\n            return True\n        return False\n\n    if text[0] == text[-1]:\n        return is_palindrome(text[1:-1])\n    return False\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 44,
      "score": 9.76713512321487,
      "candidate": "return text == text[::-1]\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 45,
      "score": 9.765262807032524,
      "candidate": "return text == text[::-1]\n\n\ndef is_palindrome_with_reverse(text: str):\n    \"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome_with_reverse('')\n    True\n    >>> is_palindrome_with_reverse('aba')\n    True\n    >>> is_palindrome_with_reverse('aaaaa')\n    True\n    >>> is_palindrome_with_reverse('zbcd')\n    False\n    \"\"\"\n    return text == text[::-1]\n\n\ndef is_palindrome_with_reversed(text: str):\n    \"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome_with_reversed('')\n    True\n    >>> is_palindrome_with_reversed('aba')\n    True\n    >>> is_palindrome_with_reversed('aaaaa')\n    True\n    >>> is_palindrome_with_reversed('zbcd')\n    False\n    \"\"\"\n    reversed_text = text[::-1]\n    return text == reversed_text\n\n\ndef is_palindrome_with_reversed_with_slice(text: str):\n    \"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome_with_reversed_with_slice('')\n    True\n    >>> is_palindrome_with_reversed_with_slice('aba')\n    True\n    >>> is_palindrome_with_reversed_with_slice('aaaaa')\n    True\n    >>> is_palindrome_with_reversed_with_slice('zbcd')\n    False\n    \"\"\"\n    reversed_text = text[::-1]\n    return text == reversed_text\n\n\ndef is_palindrome_with_reversed_with_reversed(text: str):\n    \"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome_with_reversed_with_reversed('')\n    True\n    >>> is_palindrome_with_"
    },
    {
      "rank": 46,
      "score": 9.749121478207732,
      "candidate": "text = text.lower()\n    reversed_text = text[::-1]\n    return text == reversed_text\n\n\ndef is_palindrome_rec(text: str):\n    \"\"\"\n    Checks if given string is a palindrome (using recursion)\n    >>> is_palindrome_rec('')\n    True\n    >>> is_palindrome_rec('aba')\n    True\n    >>> is_palindrome_rec('aaaaa')\n    True\n    >>> is_palindrome_rec('zbcd')\n    False\n    \"\"\"\n    return is_palindrome_rec_inner(text, 0, len(text)-1)\n\n\ndef is_palindrome_rec_inner(text: str, left: int, right: int):\n    if left >= right:\n        return True\n\n    if text[left] != text[right]:\n        return False\n\n    return is_palindrome_rec_inner(text, left+1, right-1)\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 47,
      "score": 9.72780863773741,
      "candidate": "return text == text[::-1]\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 48,
      "score": 9.718856235379514,
      "candidate": "return text == text[::-1]\n\n\ndef is_palindrome_rec(text: str):\n    \"\"\"\n    Checks if given string is a palindrome.\n    Uses recursion\n    >>> is_palindrome_rec('')\n    True\n    >>> is_palindrome_rec('aba')\n    True\n    >>> is_palindrome_rec('aaaaa')\n    True\n    >>> is_palindrome_rec('zbcd')\n    False\n    \"\"\"\n    if len(text) <= 1:\n        return True\n    if text[0] != text[-1]:\n        return False\n    return is_palindrome_rec(text[1:-1])\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 49,
      "score": 9.699146693885302,
      "candidate": "return text == text[::-1]\n\n\ndef is_palindrome_v2(text: str):\n    \"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome_v2('')\n    True\n    >>> is_palindrome_v2('aba')\n    True\n    >>> is_palindrome_v2('aaaaa')\n    True\n    >>> is_palindrome_v2('zbcd')\n    False\n    \"\"\"\n    for i in range(len(text) // 2):\n        if text[i] != text[len(text) - 1 - i]:\n            return False\n    return True\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 50,
      "score": 9.661538999847021,
      "candidate": "return text == text[::-1]\n\n\ndef is_palindrome_rec(text: str, left: int, right: int):\n    \"\"\"\n    Recursive version of the palindrome checker.\n    >>> is_palindrome_rec('', 0, 0)\n    True\n    >>> is_palindrome_rec('aba', 0, 2)\n    True\n    >>> is_palindrome_rec('aaaaa', 0, 4)\n    True\n    >>> is_palindrome_rec('zbcd', 0, 3)\n    False\n    \"\"\"\n    if right - left <= 1:\n        return True\n\n    if text[left] != text[right]:\n        return False\n\n    return is_palindrome_rec(text, left + 1, right - 1)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 51,
      "score": 9.648973453061323,
      "candidate": "if len(text) == 0:\n        return True\n\n    if text[0] == text[-1]:\n        return is_palindrome(text[1:-1])\n    return False\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 52,
      "score": 9.595753198553407,
      "candidate": "text = text.replace(' ', '')\n    text = text.lower()\n    return text == text[::-1]\n\n\ndef is_palindrome_2(text: str):\n    \"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome_2('')\n    True\n    >>> is_palindrome_2('aba')\n    True\n    >>> is_palindrome_2('aaaaa')\n    True\n    >>> is_palindrome_2('zbcd')\n    False\n    \"\"\"\n    text = text.replace(' ', '')\n    text = text.lower()\n    return text == text[::-1]\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 53,
      "score": 9.58039123838868,
      "candidate": "if len(text) < 2:\n        return True\n\n    if text[0] != text[-1]:\n        return False\n\n    return is_palindrome(text[1:-1])\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 54,
      "score": 9.545987962239394,
      "candidate": "if not isinstance(text, str):\n        return False\n    return text == text[::-1]\n\n\ndef is_palindrome_rec(text: str):\n    \"\"\"\n    Checks if given string is a palindrome (recursive)\n    >>> is_palindrome_rec('')\n    True\n    >>> is_palindrome_rec('aba')\n    True\n    >>> is_palindrome_rec('aaaaa')\n    True\n    >>> is_palindrome_rec('zbcd')\n    False\n    \"\"\"\n    if len(text) < 2:\n        return True\n    return text[0] == text[-1] and is_palindrome_rec(text[1:-1])\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 55,
      "score": 9.47114453552205,
      "candidate": "text = text.lower()\n    return text == text[::-1]\n\n\ndef is_palindrome_pythonic(text: str):\n    \"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome_pythonic('')\n    True\n    >>> is_palindrome_pythonic('aba')\n    True\n    >>> is_palindrome_pythonic('aaaaa')\n    True\n    >>> is_palindrome_pythonic('zbcd')\n    False\n    \"\"\"\n    return text.lower() == text[::-1]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod(verbose=True)"
    },
    {
      "rank": 56,
      "score": 9.42450321128885,
      "candidate": "if len(text) <= 1:\n        return True\n    if text[0] != text[-1]:\n        return False\n    return is_palindrome(text[1:-1])\n\n\nif __name__ == \"__main__\":\n    print(is_palindrome(\"\"))\n    print(is_palindrome(\"aba\"))\n    print(is_palindrome(\"aaaaa\"))\n    print(is_palindrome(\"zbcd\"))"
    },
    {
      "rank": 57,
      "score": 9.401896687959665,
      "candidate": "return text == text[::-1]\n\n\ndef is_palindrome_v2(text: str):\n    \"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome_v2('')\n    True\n    >>> is_palindrome_v2('aba')\n    True\n    >>> is_palindrome_v2('aaaaa')\n    True\n    >>> is_palindrome_v2('zbcd')\n    False\n    \"\"\"\n    return text == text[::-1]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 58,
      "score": 9.389578175014488,
      "candidate": "return text == text[::-1]\n\n\ndef is_palindrome_with_stack(text: str):\n    \"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome_with_stack('')\n    True\n    >>> is_palindrome_with_stack('aba')\n    True\n    >>> is_palindrome_with_stack('aaaaa')\n    True\n    >>> is_palindrome_with_stack('zbcd')\n    False\n    \"\"\"\n    stack = []\n    for char in text:\n        stack.append(char)\n\n    while len(stack) > 1:\n        if stack.pop() != stack.pop():\n            return False\n\n    return True\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 59,
      "score": 9.335906975550785,
      "candidate": "if not text:\n        return True\n\n    if text[0] != text[-1]:\n        return False\n\n    return is_palindrome(text[1:-1])\n\n\ndef is_palindrome_v2(text: str):\n    \"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome_v2('')\n    True\n    >>> is_palindrome_v2('aba')\n    True\n    >>> is_palindrome_v2('aaaaa')\n    True\n    >>> is_palindrome_v2('zbcd')\n    False\n    \"\"\"\n    return text == text[::-1]\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 60,
      "score": 9.293848149332355,
      "candidate": "return text == text[::-1]\n\n\ndef is_palindrome2(text: str):\n    \"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome2('')\n    True\n    >>> is_palindrome2('aba')\n    True\n    >>> is_palindrome2('aaaaa')\n    True\n    >>> is_palindrome2('zbcd')\n    False\n    \"\"\"\n    return text == text[::-1]\n\n\nif __name__ == \"__main__\":\n    from doctest import testmod\n\n    testmod()"
    },
    {
      "rank": 61,
      "score": 9.287625906893272,
      "candidate": "return text == text[::-1]\n\n\ndef is_palindrome_naive(text: str):\n    \"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome_naive('')\n    True\n    >>> is_palindrome_naive('aba')\n    True\n    >>> is_palindrome_naive('aaaaa')\n    True\n    >>> is_palindrome_naive('zbcd')\n    False\n    \"\"\"\n    return text == text[::-1]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 62,
      "score": 9.26824252593394,
      "candidate": "return text == text[::-1]\n\n\ndef is_palindrome_reverse(text: str):\n    \"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome_reverse('')\n    True\n    >>> is_palindrome_reverse('aba')\n    True\n    >>> is_palindrome_reverse('aaaaa')\n    True\n    >>> is_palindrome_reverse('zbcd')\n    False\n    \"\"\"\n    reversed_text = text[::-1]\n    return text == reversed_text\n\n\ndef is_palindrome_reverse_inplace(text: str):\n    \"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome_reverse_inplace('')\n    True\n    >>> is_palindrome_reverse_inplace('aba')\n    True\n    >>> is_palindrome_reverse_inplace('aaaaa')\n    True\n    >>> is_palindrome_reverse_inplace('zbcd')\n    False\n    \"\"\"\n    return text == text[::-1]\n\n\ndef is_palindrome_recursive(text: str):\n    \"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome_recursive('')\n    True\n    >>> is_palindrome_recursive('aba')\n    True\n    >>> is_palindrome_recursive('aaaaa')\n    True\n    >>> is_palindrome_recursive('zbcd')\n    False\n    \"\"\"\n    return is_palindrome_recursive_aux(text, 0, len(text) - 1)\n\n\ndef is_palindrome_recursive_aux(text: str, left: int, right: int):\n    \"\"\"\n    Recursively checks if given string is a palindrome\n    >>> is_palindrome_recursive_aux('', 0, 0)\n    True\n    >>> is_palindrome_recursive_aux('aba', 0, 2)\n    True\n    >>> is_palindrome_recursive_aux('aaaaa', 0, 4)\n    True\n    >>>"
    },
    {
      "rank": 63,
      "score": 9.111264590867663,
      "candidate": "return text == text[::-1]\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 64,
      "score": 8.972078001256204,
      "candidate": "return text == text[::-1]\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 65,
      "score": 8.932690854729941,
      "candidate": "return text == text[::-1]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 66,
      "score": 8.805716287685573,
      "candidate": "return text == text[::-1]\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 67,
      "score": 8.795640690208494,
      "candidate": "if text == text[::-1]:\n        return True\n    return False\n\n\nif __name__ == '__main__':\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 68,
      "score": 8.793156641036285,
      "candidate": "return text == text[::-1]\n\n\ndef is_palindrome_rec(text: str):\n    \"\"\"\n    Checks if given string is a palindrome (recursive approach)\n    >>> is_palindrome_rec('')\n    True\n    >>> is_palindrome_rec('aba')\n    True\n    >>> is_palindrome_rec('aaaaa')\n    True\n    >>> is_palindrome_rec('zbcd')\n    False\n    \"\"\"\n    if len(text) <= 1:\n        return True\n    if text[0] != text[-1]:\n        return False\n    return is_palindrome_rec(text[1:-1])\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 69,
      "score": 8.740560612801593,
      "candidate": "return text == text[::-1]\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 70,
      "score": 8.623261539528489,
      "candidate": "return text == text[::-1]\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 71,
      "score": 8.579695731048886,
      "candidate": "return text == text[::-1]\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 72,
      "score": 8.563699279749727,
      "candidate": "return text == text[::-1]\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 73,
      "score": 8.561114673426571,
      "candidate": "if len(text) <= 1:\n        return True\n    if text[0] == text[-1]:\n        return is_palindrome(text[1:-1])\n    return False\n\n\nif __name__ == '__main__':\n    from doctest import testmod\n    testmod()"
    },
    {
      "rank": 74,
      "score": 8.557573484178743,
      "candidate": "return text == text[::-1]\n\n\nif __name__ == '__main__':\n    print(is_palindrome(''))\n    print(is_palindrome('aba'))\n    print(is_palindrome('aaaaa'))\n    print(is_palindrome('zbcd'))"
    },
    {
      "rank": 75,
      "score": 8.538424342429204,
      "candidate": "return text == text[::-1]\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 76,
      "score": 8.531550862208217,
      "candidate": "return text == text[::-1]\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 77,
      "score": 8.51531448935733,
      "candidate": "return text == text[::-1]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 78,
      "score": 8.468754598132097,
      "candidate": "return text == text[::-1]\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 79,
      "score": 8.439585443538789,
      "candidate": "return text == text[::-1]\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 80,
      "score": 8.402811062784679,
      "candidate": "return text == text[::-1]\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 81,
      "score": 8.360149229544044,
      "candidate": "return text == text[::-1]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 82,
      "score": 8.336801798276733,
      "candidate": "text = text.lower()\n    return text == text[::-1]\n\n\nif __name__ == '__main__':\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 83,
      "score": 8.326486071669247,
      "candidate": "return text == text[::-1]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 84,
      "score": 8.27194171882014,
      "candidate": "return text == text[::-1]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 85,
      "score": 8.257867165865932,
      "candidate": "return text == text[::-1]\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 86,
      "score": 8.25373077108831,
      "candidate": "return text == text[::-1]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 87,
      "score": 8.228214516073676,
      "candidate": "text = text.replace(' ', '')\n    return text == text[::-1]\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 88,
      "score": 8.2122013327866,
      "candidate": "if len(text) < 2:\n        return True\n    return text[0] == text[-1] and is_palindrome(text[1:-1])\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 89,
      "score": 8.18530052942235,
      "candidate": "return text == text[::-1]\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 90,
      "score": 8.079825241124052,
      "candidate": "return text == text[::-1]\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 91,
      "score": 8.046163853802275,
      "candidate": "return text == text[::-1]\n\n\nif __name__ == '__main__':\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 92,
      "score": 7.9121765279121705,
      "candidate": "return text == text[::-1]\n\n\ndef is_palindrome_rec(text: str):\n    \"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome_rec('')\n    True\n    >>> is_palindrome_rec('aba')\n    True\n    >>> is_palindrome_rec('aaaaa')\n    True\n    >>> is_palindrome_rec('zbcd')\n    False\n    \"\"\"\n    def is_palindrome_rec_helper(text, start, end):\n        if start >= end:\n            return True\n        if text[start] != text[end]:\n            return False\n        return is_palindrome_rec_helper(text, start + 1, end - 1)\n    return is_palindrome_rec_helper(text, 0, len(text) - 1)\n\n\ndef is_palindrome_iter(text: str):\n    \"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome_iter('')\n    True\n    >>> is_palindrome_iter('aba')\n    True\n    >>> is_palindrome_iter('aaaaa')\n    True\n    >>> is_palindrome_iter('zbcd')\n    False\n    \"\"\"\n    start, end = 0, len(text) - 1\n    while start < end:\n        if text[start] != text[end]:\n            return False\n        start += 1\n        end -= 1\n    return True\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 93,
      "score": 7.8234740247397525,
      "candidate": "return text == text[::-1]\n\n\ndef is_palindrome_with_stack(text: str):\n    \"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome_with_stack('')\n    True\n    >>> is_palindrome_with_stack('aba')\n    True\n    >>> is_palindrome_with_stack('aaaaa')\n    True\n    >>> is_palindrome_with_stack('zbcd')\n    False\n    \"\"\"\n    stack = []\n\n    for char in text:\n        stack.append(char)\n\n    for _ in range(len(stack)):\n        char = stack.pop()\n\n        if char != text[-1]:\n            return False\n\n        text = text[1:]\n\n    return True\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 94,
      "score": 7.80974998851386,
      "candidate": "if len(text) <= 1:\n        return True\n    if text[0] != text[-1]:\n        return False\n    return is_palindrome(text[1:-1])\n\n\nif __name__ == \"__main__\":\n    from doctest import testmod\n    testmod()"
    },
    {
      "rank": 95,
      "score": 7.7556635563676375,
      "candidate": "return text == text[::-1]\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 96,
      "score": 7.738963199847726,
      "candidate": "return text == text[::-1]\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 97,
      "score": 7.728919635188124,
      "candidate": "return text == text[::-1]\n\n\nif __name__ == \"__main__\":\n    print(is_palindrome(input(\"Enter text: \")))"
    },
    {
      "rank": 98,
      "score": 7.5013362069721365,
      "candidate": "return text == text[::-1]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 99,
      "score": 3.0,
      "candidate": "return text == text[::-1]\n\n\ndef is_palindrome_2(text: str):\n    \"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome_2('')\n    True\n    >>> is_palindrome_2('aba')\n    True\n    >>> is_palindrome_2('aaaaa')\n    True\n    >>> is_palindrome_2('zbcd')\n    False\n    \"\"\"\n    return text == text[::-1]\n\n\ndef is_palindrome_3(text: str):\n    \"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome_3('')\n    True\n    >>> is_palindrome_3('aba')\n    True\n    >>> is_palindrome_3('aaaaa')\n    True\n    >>> is_palindrome_3('zbcd')\n    False\n    \"\"\"\n    return text == text[::-1]\n\n\ndef is_palindrome_4(text: str):\n    \"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome_4('')\n    True\n    >>> is_palindrome_4('aba')\n    True\n    >>> is_palindrome_4('aaaaa')\n    True\n    >>> is_palindrome_4('zbcd')\n    False\n    \"\"\"\n    return text == text[::-1]\n\n\ndef is_palindrome_5(text: str):\n    \"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome_5('')\n    True\n    >>> is_palindrome_5('aba')\n    True\n    >>> is_palindrome_5('aaaaa')\n    True\n    >>> is_palindrome_5('zbcd')\n    False\n    \"\"\"\n    return text == text[::-1]\n\n\ndef is_palindrome_6(text: str):\n    \"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome_6('')\n    True\n    >>> is_palindrome_6('aba"
    },
    {
      "rank": 100,
      "score": 3.0,
      "candidate": "return text == text[::-1]\n\n\ndef is_palindrome_v2(text: str):\n    \"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome_v2('')\n    True\n    >>> is_palindrome_v2('aba')\n    True\n    >>> is_palindrome_v2('aaaaa')\n    True\n    >>> is_palindrome_v2('zbcd')\n    False\n    \"\"\"\n    return text == text[::-1]\n\n\ndef is_palindrome_v3(text: str):\n    \"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome_v3('')\n    True\n    >>> is_palindrome_v3('aba')\n    True\n    >>> is_palindrome_v3('aaaaa')\n    True\n    >>> is_palindrome_v3('zbcd')\n    False\n    \"\"\"\n    return text == text[::-1]\n\n\ndef is_palindrome_v4(text: str):\n    \"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome_v4('')\n    True\n    >>> is_palindrome_v4('aba')\n    True\n    >>> is_palindrome_v4('aaaaa')\n    True\n    >>> is_palindrome_v4('zbcd')\n    False\n    \"\"\"\n    return text == text[::-1]\n\n\ndef is_palindrome_v5(text: str):\n    \"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome_v5('')\n    True\n    >>> is_palindrome_v5('aba')\n    True\n    >>> is_palindrome_v5('aaaaa')\n    True\n    >>> is_palindrome_v5('zbcd')\n    False\n    \"\"\"\n    return text == text[::-1]\n\n\ndef is_palindrome_v6(text: str):\n    \"\"\"\n    Checks if given string is a palindrome\n    >>> is_pal"
    }
  ]
}