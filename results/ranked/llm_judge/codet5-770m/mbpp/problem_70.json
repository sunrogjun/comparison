{
  "timestamp": "2025-09-14T12:59:02.340911",
  "method": "improved_llm_judge",
  "judge_model": "codellama/CodeLlama-7b-Python-hf",
  "target_model": "codet5-770m",
  "dataset": "mbpp",
  "problem_number": 70,
  "total_candidates": 100,
  "results": [
    {
      "rank": 1,
      "score": 10.0,
      "candidate": "def zip(a, b):\n    return zip(a, b)\n\nif __name__ == '__main__':\n    a = (1, 2, 3)\n    b = (4, 5, 6)\n\n    print(zip(a, b))"
    },
    {
      "rank": 2,
      "score": 10.0,
      "candidate": "def zip_two_tuples(a, b):\n    return zip(a, b)\n\nprint(zip_two_tuples(a=[1, 2, 3, 4, 5], b=[2, 3, 4, 5, 6]))"
    },
    {
      "rank": 3,
      "score": 10.0,
      "candidate": "def zip_tuples(a, b):\n    return zip(a, b)\n\n\nprint(zip_tuples((1, 2, 3), (4, 5, 6)))"
    },
    {
      "rank": 4,
      "score": 10.0,
      "candidate": "def zip(*args):\n    return [(a, b) for a, b in zip(*args)]\n\nprint(zip(range(1, 4), range(2, 5)))"
    },
    {
      "rank": 5,
      "score": 10.0,
      "candidate": "def zip_tuples(t1, t2):\n    return zip(t1, t2)\n\nprint(zip_tuples((1, 2, 3), (4, 5, 6)))\nprint(zip_tuples((1, 2, 3), (4, 5, 6, 7)))\nprint(zip_tuples((1, 2, 3), (4, 5, 6, 7, 8)))\nprint(zip_tuples((1, 2, 3), (4, 5, 6, 7, 8, 9)))"
    },
    {
      "rank": 6,
      "score": 10.0,
      "candidate": "def zip(tuple1, tuple2):\n    return zip(tuple1, tuple2)\n\nprint(zip((1, 2, 3), (4, 5, 6)))"
    },
    {
      "rank": 7,
      "score": 10.0,
      "candidate": "def zip(a, b):\n    return zip(a,b)\n\nprint(zip((1,2,3), (4,5,6)))"
    },
    {
      "rank": 8,
      "score": 10.0,
      "candidate": "def zip_tuple(tuple1, tuple2):\n    return tuple(zip(tuple1, tuple2))\n\n\nprint(zip_tuple((1, 2, 3), (4, 5, 6)))"
    },
    {
      "rank": 9,
      "score": 10.0,
      "candidate": "def zip_tuple(*args):\n    return zip(*args)"
    },
    {
      "rank": 10,
      "score": 10.0,
      "candidate": "def zip_tuples(a,b):\n    return zip(a,b)"
    },
    {
      "rank": 11,
      "score": 10.0,
      "candidate": "def zip(a, b):\n    return zip(a, b)"
    },
    {
      "rank": 12,
      "score": 10.0,
      "candidate": "def zip_tuples(t1, t2):\n    return zip(*t1), zip(*t2)\n\nprint(zip_tuples((1,2,3), (4,5,6)))"
    },
    {
      "rank": 13,
      "score": 10.0,
      "candidate": "a = (1, 2, 3)\nb = (4, 5, 6)\nprint(list(zip(a, b)))"
    },
    {
      "rank": 14,
      "score": 10.0,
      "candidate": "def zip_two_tuples(a, b):\n    return zip(a, b)\n\nif __name__ == \"__main__\":\n    print(zip_two_tuples((1, 2), (3, 4)))"
    },
    {
      "rank": 15,
      "score": 10.0,
      "candidate": "def zip_tuple(x, y):\n    return zip(x, y)\n\nprint(zip_tuple((1, 2, 3), (4, 5, 6)))"
    },
    {
      "rank": 16,
      "score": 10.0,
      "candidate": "def zip_tuple(t1, t2):\n    return zip(t1, t2)\n\nprint(zip_tuple((1, 2, 3), (4, 5, 6)))\nprint(zip_tuple((1, 2, 3), (4, 5, 6)))\nprint(zip_tuple((1, 2, 3), (4, 5, 6)))"
    },
    {
      "rank": 17,
      "score": 10.0,
      "candidate": "def zip_tuple(*args):\n    return list(zip(*args))\n\nprint(zip_tuple(1,2,3))"
    },
    {
      "rank": 18,
      "score": 10.0,
      "candidate": "def zip_tuple(a, b):\n    return zip(a, b)\n\nprint(zip_tuple(('a', 'b'), ('b', 'c')))"
    },
    {
      "rank": 19,
      "score": 10.0,
      "candidate": "def zip_tuple(a, b):\n    return zip(a, b)"
    },
    {
      "rank": 20,
      "score": 10.0,
      "candidate": "def zip_tuples(t1, t2):\n    return zip(t1, t2)\n\n\nt1 = (1, 2, 3)\nt2 = (4, 5, 6)\nprint(zip_tuples(t1, t2))"
    },
    {
      "rank": 21,
      "score": 10.0,
      "candidate": "def zip_tuple(a, b):\n    return zip(a, b)\n\nif __name__ == \"__main__\":\n    a = (1,2,3)\n    b = (4,5,6)\n\n    print(zip_tuple(a,b))"
    },
    {
      "rank": 22,
      "score": 10.0,
      "candidate": "a, b = input().split(' ')\na, b = int(a), int(b)\n\nprint(*zip(a, b))"
    },
    {
      "rank": 23,
      "score": 10.0,
      "candidate": "def zip_tuple(*args):\n    return tuple(zip(*args))"
    },
    {
      "rank": 24,
      "score": 10.0,
      "candidate": "def zip_tuple(a, b):\n    return zip(a, b)\n\nif __name__ == '__main__':\n    print(zip_tuple((1, 2, 3), (4, 5, 6)))"
    },
    {
      "rank": 25,
      "score": 10.0,
      "candidate": "def zip_tuple(a, b):\n    return zip(a, b)\n\nif __name__ == '__main__':\n    print(zip_tuple((1, 2, 3), (4, 5, 6)))\n    print(zip_tuple((1, 2, 3), (4, 5, 6, 7)))\n    print(zip_tuple((1, 2, 3), (4, 5, 6, 7, 8)))"
    },
    {
      "rank": 26,
      "score": 10.0,
      "candidate": "def zip_tuples(t1, t2):\n    return zip(*t1), zip(*t2)"
    },
    {
      "rank": 27,
      "score": 10.0,
      "candidate": "def zip_tuple(a, b):\n    return zip(a, b)\n\n\nprint(zip_tuple((1, 2, 3), (4, 5, 6)))"
    },
    {
      "rank": 28,
      "score": 10.0,
      "candidate": "def zip_tuple(tuple1, tuple2):\n    return tuple(tuple1[i] for i in range(len(tuple1))) + tuple(tuple2[i] for i in range(len(tuple2)))\n\n\nprint(zip_tuple((1, 2, 3), (4, 5, 6)))"
    },
    {
      "rank": 29,
      "score": 10.0,
      "candidate": "def zip_tuple(a, b):\n    return zip(a, b)\n\n\ndef main():\n    a = [1, 2, 3]\n    b = [4, 5, 6]\n    print(zip_tuple(a, b))\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 30,
      "score": 10.0,
      "candidate": "def zip_tuples(a,b):\n    return zip(a,b)\n\n\n\nprint(zip_tuples((1,2),(3,4)))"
    },
    {
      "rank": 31,
      "score": 10.0,
      "candidate": "def zip_tuples(a,b):\n    return zip(a,b)\n\nprint(zip_tuples([1,2,3],[4,5,6]))"
    },
    {
      "rank": 32,
      "score": 10.0,
      "candidate": "def zip_tuples(x, y):\n    return zip(x, y)"
    },
    {
      "rank": 33,
      "score": 10.0,
      "candidate": "def zip_tuple(tuple1, tuple2):\n    return tuple(zip(tuple1, tuple2))"
    },
    {
      "rank": 34,
      "score": 10.0,
      "candidate": "def zip(*args):\n    return zip(*args)\n\nprint(zip((1,2,3), (4,5,6)))\nprint(zip((\"a\", \"b\"), (\"c\", \"d\")))"
    },
    {
      "rank": 35,
      "score": 10.0,
      "candidate": "def zip_tuples(tuple1, tuple2):\n    return tuple(zip(tuple1, tuple2))"
    },
    {
      "rank": 36,
      "score": 10.0,
      "candidate": "def zip(*tup):\n    return zip(*tup)\n\n\ndef test():\n    print(zip((1, 2, 3), (4, 5, 6)))\n\n\nif __name__ == \"__main__\":\n    test()"
    },
    {
      "rank": 37,
      "score": 10.0,
      "candidate": "a = [1, 2, 3]\nb = [4, 5, 6]\n\nprint(list(zip(a, b)))"
    },
    {
      "rank": 38,
      "score": 10.0,
      "candidate": "def zip_tuples(a, b):\n    return zip(a, b)"
    },
    {
      "rank": 39,
      "score": 10.0,
      "candidate": "def zip_tuple(tuple1, tuple2):\n    return tuple(zip(*tuple1))"
    },
    {
      "rank": 40,
      "score": 9.0,
      "candidate": "def zip_tuple(tuple1, tuple2):\n    return tuple(tuple1[i] for i in range(len(tuple1)) if tuple2[i] in tuple1[i])\n\n\nif __name__ == '__main__':\n    print(zip_tuple((1, 2, 3, 4), (5, 6, 7, 8)))"
    },
    {
      "rank": 41,
      "score": 9.0,
      "candidate": "def zip_tuples(tuple1, tuple2):\n    return zip(tuple1, tuple2)\n\n\nif __name__ == \"__main__\":\n    print(zip_tuples((\"a\", \"b\"), (\"c\", \"d\")))"
    },
    {
      "rank": 42,
      "score": 9.0,
      "candidate": "def zip_tuples(a, b):\n    return zip(a, b)\n\nif __name__ == '__main__':\n    a = (1, 2, 3)\n    b = (4, 5, 6)\n    print(zip_tuples(a, b))"
    },
    {
      "rank": 43,
      "score": 9.0,
      "candidate": "def zip_tuples(t1, t2):\n    return zip(*t1), zip(*t2)\n\nif __name__ == '__main__':\n    print(zip_tuples((1, 2, 3, 4), (5, 6, 7, 8)))"
    },
    {
      "rank": 44,
      "score": 8.0,
      "candidate": "def zip_tuples(t1, t2):\n    return tuple(zip(t1, t2))\n\n\n\nif __name__ == \"__main__\":\n    print(zip_tuples((1, 2, 3), (4, 5, 6)))"
    },
    {
      "rank": 45,
      "score": 8.0,
      "candidate": "def zip_tuples(a, b):\n    return list(zip(a, b))"
    },
    {
      "rank": 46,
      "score": 8.0,
      "candidate": "def zip_tuples(t1, t2):\n    return zip(t1, t2)"
    },
    {
      "rank": 47,
      "score": 8.0,
      "candidate": "def zip_tuples(t1, t2):\n    return zip(*t1), zip(*t2)\n\n\nprint(zip_tuples((1, 2, 3), (4, 5, 6)))\nprint(zip_tuples((1, 2, 3), (4, 5, 6)))"
    },
    {
      "rank": 48,
      "score": 8.0,
      "candidate": "def zip_tuples(tuple1, tuple2):\n    return zip(tuple1, tuple2)\n\n\nprint(zip_tuples((1, 2, 3), (4, 5, 6)))"
    },
    {
      "rank": 49,
      "score": 8.0,
      "candidate": "def zip_tuple(tuple1, tuple2):\n    return zip(tuple1, tuple2)\n\nprint(zip_tuple((1,2), (3,4)))"
    },
    {
      "rank": 50,
      "score": 8.0,
      "candidate": "def zip_tuple(tuple1, tuple2):\n    return tuple(x for x in zip(tuple1, tuple2))\n\nprint(zip_tuple((1,2,3), (4,5,6)))\nprint(zip_tuple((1,2), (3,4)))\nprint(zip_tuple((1,2), (3,4,5)))"
    },
    {
      "rank": 51,
      "score": 8.0,
      "candidate": "def zip_tuples(a, b):\n    return zip(a, b)\n\n\nif __name__ == '__main__':\n    print(zip_tuples((1, 2, 3), (4, 5, 6)))\n    print(zip_tuples((1, 2, 3), (4, 5, 6)))"
    },
    {
      "rank": 52,
      "score": 8.0,
      "candidate": "def zip_tuples(t1, t2):\n    return list(zip(t1, t2))\n\n\nprint(zip_tuples((1, 2, 3), (4, 5, 6)))"
    },
    {
      "rank": 53,
      "score": 8.0,
      "candidate": "def zip_tuple(a,b):\n    return zip(a,b)\n\n\nprint(zip_tuple((1, 2, 3), (4, 5, 6)))"
    },
    {
      "rank": 54,
      "score": 8.0,
      "candidate": "def zip_tuples(*args):\n    return list(zip(*args))"
    },
    {
      "rank": 55,
      "score": 8.0,
      "candidate": "def zip_tuple(a, b):\n    return zip(a, b)\n\na = (1, 2, 3)\nb = (4, 5, 6)\nprint(zip_tuple(a, b))"
    },
    {
      "rank": 56,
      "score": 8.0,
      "candidate": "def zip_tuples(t1, t2):\n    return zip(*t1), zip(*t2)\n\n\nprint(zip_tuples((1, 2, 3), (4, 5, 6)))\nprint(zip_tuples((1, 2, 3), (4, 5, 6, 7)))"
    },
    {
      "rank": 57,
      "score": 8.0,
      "candidate": "def zip(*args):\n    return list(zip(*args))\n\n\nprint(zip(range(10), range(10)))\nprint(zip(range(10), range(10), range(10)))"
    },
    {
      "rank": 58,
      "score": 8.0,
      "candidate": "def zip_tuples(a, b):\n    return zip(a, b)"
    },
    {
      "rank": 59,
      "score": 8.0,
      "candidate": "def zip_tuples(tuple1, tuple2):\n    return zip(tuple1, tuple2)\n\nprint(zip_tuples((1,2,3), (4,5,6)))"
    },
    {
      "rank": 60,
      "score": 8.0,
      "candidate": "def zip_tuples(tuple1, tuple2):\n    return list(zip(tuple1, tuple2))\n\nprint(zip_tuples((1, 2), (3, 4)))"
    },
    {
      "rank": 61,
      "score": 8.0,
      "candidate": "a = (1, 2, 3)\nb = (4, 5, 6)\n\ndef zip(a, b):\n    return zip(a, b)\n\nprint(zip(a, b))"
    },
    {
      "rank": 62,
      "score": 8.0,
      "candidate": "def zip_tuples(a, b):\n    return zip(a, b)\n\nprint(zip_tuples([1,2,3], [4,5,6]))"
    },
    {
      "rank": 63,
      "score": 8.0,
      "candidate": "def zip_tuple(tuple1, tuple2):\n    return tuple(tuple1[i] for i in range(len(tuple1)) if tuple1[i] in tuple2)\n\n\nif __name__ == '__main__':\n    assert zip_tuple((1, 2, 3), (4, 5, 6)) == (1, 4, 5, 6)"
    },
    {
      "rank": 64,
      "score": 8.0,
      "candidate": "def zip_tuples(*args):\n    return zip(*args)\n\n\nif __name__ == '__main__':\n    print(zip_tuples(('a', 'b'), ('c', 'd')))"
    },
    {
      "rank": 65,
      "score": 8.0,
      "candidate": "def zip_tuple(*args):\n    return list(zip(*args))\n\n\nprint(zip_tuple((1, 2, 3, 4, 5), (2, 3, 4, 5, 6)))"
    },
    {
      "rank": 66,
      "score": 8.0,
      "candidate": "def zip_tuples(tuple1, tuple2):\n    return tuple(zip(*tuple1))\n\n\nif __name__ == '__main__':\n    print(zip_tuples((1, 2, 3), (4, 5, 6)))"
    },
    {
      "rank": 67,
      "score": 8.0,
      "candidate": "def zip_tuples(tuple_a, tuple_b):\n    return zip(*tuple_a), zip(*tuple_b)\n\nprint(zip_tuples(('a', 'b'), ('c', 'd')))\n\nprint(zip_tuples((1, 2, 3), (4, 5, 6)))"
    },
    {
      "rank": 68,
      "score": 8.0,
      "candidate": "def zip_tuple(a, b):\n    return zip(a, b)"
    },
    {
      "rank": 69,
      "score": 8.0,
      "candidate": "t1 = (1, 2, 3)\nt2 = (4, 5, 6)\n\nt = zip(t1, t2)\nprint(t)\n\nt = zip(t1, t2, t3)\nprint(t)"
    },
    {
      "rank": 70,
      "score": 8.0,
      "candidate": "def zip_tuples(a,b):\n    return zip(*a), zip(*b)"
    },
    {
      "rank": 71,
      "score": 8.0,
      "candidate": "def zip_tuples(t1,t2):\n  return list(zip(t1,t2))\n\nprint(zip_tuples((1,2,3),(4,5,6)))"
    },
    {
      "rank": 72,
      "score": 8.0,
      "candidate": "def zip_tuple(a, b):\n    return zip(a, b)\n\nif __name__ == \"__main__\":\n    print(zip_tuple(('a', 'b'), ('c', 'd')))"
    },
    {
      "rank": 73,
      "score": 8.0,
      "candidate": "def zip_tuple(*args):\n    return zip(*args)\n\n\nprint(zip_tuple(1, 2, 3, 4))"
    },
    {
      "rank": 74,
      "score": 8.0,
      "candidate": "def zip_tuples(t1, t2):\n    return tuple(zip(t1, t2))\n\nif __name__ == '__main__':\n    t1 = (1, 2)\n    t2 = (3, 4)\n\n    print(zip_tuples(t1, t2))"
    },
    {
      "rank": 75,
      "score": 8.0,
      "candidate": "def zip_tuples(a, b):\n    return zip(a, b)"
    },
    {
      "rank": 76,
      "score": 8.0,
      "candidate": "def zip_tuples(a, b):\n    return list(zip(a, b))\n\n\nif __name__ == \"__main__\":\n    print(zip_tuples([1, 2, 3], [4, 5, 6]))"
    },
    {
      "rank": 77,
      "score": 8.0,
      "candidate": "def zip_tuples(a, b):\n    return zip(a, b)\n\nif __name__ == \"__main__\":\n    a = (1, 2, 3)\n    b = (4, 5, 6)\n\n    print(zip_tuples(a, b))"
    },
    {
      "rank": 78,
      "score": 8.0,
      "candidate": "def zip_tuple(t1, t2):\n    return zip(t1, t2)"
    },
    {
      "rank": 79,
      "score": 8.0,
      "candidate": "def zip_two_tuples(a, b):\n    return zip(a, b)\n\n\nprint(zip_two_tuples(range(1, 11), range(1, 11)))"
    },
    {
      "rank": 80,
      "score": 8.0,
      "candidate": "def zip_tuples(*tup):\n    return zip(*tup)"
    },
    {
      "rank": 81,
      "score": 8.0,
      "candidate": "def zip_tuples(tuple1, tuple2):\n    return zip(tuple1, tuple2)\n\nprint(zip_tuples((1, 2, 3), (4, 5, 6)))"
    },
    {
      "rank": 82,
      "score": 8.0,
      "candidate": "a = (1, 2, 3)\nb = (4, 5, 6)\n\nprint(zip(a, b))"
    },
    {
      "rank": 83,
      "score": 8.0,
      "candidate": "def zip_tuples(a, b):\n    return zip(a, b)\n\nprint(zip_tuples((1,2,3), (4,5,6)))"
    },
    {
      "rank": 84,
      "score": 8.0,
      "candidate": "def zip_tuple(t1, t2):\n    return zip(t1, t2)\n\n\nt1 = (1, 2, 3)\nt2 = (4, 5, 6)\n\nprint(zip_tuple(t1, t2))"
    },
    {
      "rank": 85,
      "score": 8.0,
      "candidate": "def zip_tuples(t1, t2):\n    return zip(t1, t2)"
    },
    {
      "rank": 86,
      "score": 8.0,
      "candidate": "def zip_tuples(tuple_a, tuple_b):\n    return zip(*tuple_a, *tuple_b)"
    },
    {
      "rank": 87,
      "score": 8.0,
      "candidate": "def zip_tuples(t1, t2):\n    return tuple(zip(t1, t2))\n\n\nif __name__ == \"__main__\":\n    t1 = (1, 2, 3)\n    t2 = (4, 5, 6)\n    print(zip_tuples(t1, t2))"
    },
    {
      "rank": 88,
      "score": 8.0,
      "candidate": "def zip_tuples(tuple1, tuple2):\n    return zip(tuple1, tuple2)"
    },
    {
      "rank": 89,
      "score": 8.0,
      "candidate": "def zip_tuples(a, b):\n    return zip(a, b)\n\nif __name__ == \"__main__\":\n    a = (1, 2, 3)\n    b = (4, 5, 6)\n\n    print(zip_tuples(a, b))"
    },
    {
      "rank": 90,
      "score": 8.0,
      "candidate": "def zip_tuples(t1, t2):\n    return zip(*t1), zip(*t2)"
    },
    {
      "rank": 91,
      "score": 8.0,
      "candidate": "def zip_tuple(tuple1, tuple2):\n    return tuple(x for x in zip(tuple1, tuple2))\n\nprint(zip_tuple((1, 2, 3), (4, 5, 6)))"
    },
    {
      "rank": 92,
      "score": 1.0,
      "candidate": "def zip_two_tuples(t1, t2):\n    return zip(t1, t2)\n\n\nprint(zip_two_tuples((1, 2, 3), (4, 5, 6)))"
    },
    {
      "rank": 93,
      "score": 1.0,
      "candidate": "def zip_tuple(tuple1, tuple2):\n    return zip(*tuple1), zip(*tuple2)\n\n\ndef test_zip():\n    assert zip_tuple((1, 2), (3, 4)) == ((1, 2), (3, 4))\n    assert zip_tuple((1, 2), (3, 4, 5)) == ((1, 2), (3, 4, 5))\n    assert zip_tuple((1, 2), (3, 4, 5, 6)) == ((1, 2), (3, 4, 5, 6))\n    assert zip_tuple((1, 2), (3, 4, 5, 6, 7)) == ((1, 2), (3, 4, 5, 6, 7))\n    assert zip_tuple((1, 2), (3, 4, 5, 6, 7, 8)) == ((1, 2), (3, 4, 5, 6, 7, 8))\n    assert zip_tuple((1, 2), (3, 4, 5, 6, 7, 8, 9)) == ((1, 2), (3, 4, 5, 6, 7, 8, 9))\n    assert zip_tuple((1, 2), (3, 4, 5, 6, 7, 8, 9, 10)) == ((1, 2), (3, 4, 5, 6, 7, 8, 9, 10))\n    assert zip_tuple((1, 2), (3, 4, 5, 6, 7, 8, 9, 10, 11, 12)) == ((1, 2), (3, 4, 5, 6, 7, 8, 9, 10, 11, 12))\n    assert zip_tuple((1, 2), (3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13)) == ((1, 2), (3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13))\n    assert zip_tuple((1, 2), (3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14)) == ((1, 2), (3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14))\n    assert zip_tuple((1, 2), (3,"
    },
    {
      "rank": 94,
      "score": 1.0,
      "candidate": "def zip_two_tuples(a, b):\n    return zip(a, b)\n\n\ndef zip_two_tuples_2(a, b):\n    return zip(a, b)\n\n\nif __name__ == '__main__':\n    print(zip_two_tuples(3, 4))\n    print(zip_two_tuples_2(3, 4))"
    },
    {
      "rank": 95,
      "score": 1.0,
      "candidate": "def zip_tuples(t1, t2):\n    return zip(t1, t2)\n\n\nprint(zip_tuples((1, 2), (3, 4)))"
    },
    {
      "rank": 96,
      "score": 1.0,
      "candidate": "def zip_tuple(t1, t2):\n    return zip(t1, t2)\n\n\nprint(zip_tuple((1, 2, 3), (4, 5, 6)))"
    },
    {
      "rank": 97,
      "score": 1.0,
      "candidate": "def zip_tuple(tuple1, tuple2):\n    return tuple(zip(tuple1, tuple2))\n\n\nprint(zip_tuple(1, 2))\nprint(zip_tuple((1, 2), (3, 4)))"
    },
    {
      "rank": 98,
      "score": 1.0,
      "candidate": "def zip_tuples(t1, t2):\n    return list(zip(t1, t2))\n\n\nprint(zip_tuples((1, 2, 3), (4, 5, 6)))\nprint(zip_tuples((1, 2, 3), (4, 5, 6)))\nprint(zip_tuples((1, 2, 3), (4, 5, 6), (7, 8, 9)))"
    },
    {
      "rank": 99,
      "score": 1.0,
      "candidate": "def zip_tuple(*args):\n    return tuple(zip(*args))\n\ndef zip_list(*args):\n    return [tuple(a) for a in zip(*args)]\n\nprint(zip_tuple(1, 2, 3, 4))\nprint(zip_list(1, 2, 3, 4))"
    },
    {
      "rank": 100,
      "score": 1.0,
      "candidate": "def zip_tuples(a, b):\n    return zip(a, b)\n\n\nprint(zip_tuples(('a', 'b'), ('c', 'd')))"
    }
  ]
}