{
  "timestamp": "2025-09-14T13:01:11.831918",
  "method": "improved_llm_judge",
  "judge_model": "codellama/CodeLlama-7b-Python-hf",
  "target_model": "codet5-770m",
  "dataset": "mbpp",
  "problem_number": 75,
  "total_candidates": 100,
  "results": [
    {
      "rank": 1,
      "score": 10.0,
      "candidate": "def hexagonal(n):\n    h = 2\n    while n > 1:\n        h += 1\n        n -= 1\n    return h\n\nprint(hexagonal(2))\nprint(hexagonal(4))\nprint(hexagonal(6))\nprint(hexagonal(8))\nprint(hexagonal(10))\nprint(hexagonal(12))\nprint(hexagonal(14))\nprint(hexagonal(16))\nprint(hexagonal(18))\nprint(hexagonal(20))"
    },
    {
      "rank": 2,
      "score": 10.0,
      "candidate": "def hexagonal(n):\n    i = 0\n    while i <= n:\n        i += 1\n        print(i)\n        print(i**2)\n\n\nif __name__ == '__main__':\n    hexagonal(int(input(\"Enter a number: \")))"
    },
    {
      "rank": 3,
      "score": 10.0,
      "candidate": "def find_hexagonal_number(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    if n == 1:\n        return 1\n\n    hexagonal_number = 1\n    for i in range(2, n + 1):\n        hexagonal_number += i\n        if hexagonal_number % 2 == 0:\n            hexagonal_number += 1\n\n    return hexagonal_number\n\n\nif __name__ == '__main__':\n    print(find_hexagonal_number(10))"
    },
    {
      "rank": 4,
      "score": 10.0,
      "candidate": "def hex_center(n):\n    hex_list = [i*i for i in range(1,n+1)]\n    return hex_list[0]\n\nprint(hex_center(6))"
    },
    {
      "rank": 5,
      "score": 10.0,
      "candidate": "def hexagonal(n):\n    for i in range(1,n+1):\n        print(i*i*i, end=' ')\n    print()\n\nhexagonal(int(input(\"Enter number of hexagonal numbers: \")))"
    },
    {
      "rank": 6,
      "score": 10.0,
      "candidate": "def hexagonal(n):\n    return n*(n+1)*(2*n+1)//6\n\n\nif __name__ == \"__main__\":\n    print(hexagonal(int(input())))"
    },
    {
      "rank": 7,
      "score": 10.0,
      "candidate": "def hexagonal_number(n):\n    n_hex = n - 1\n    hexagonal_number = 0\n    while n_hex >= 1:\n        hexagonal_number += n_hex\n        n_hex -= 1\n    return hexagonal_number\n\nprint(hexagonal_number(5))\nprint(hexagonal_number(6))\nprint(hexagonal_number(7))\nprint(hexagonal_number(8))\nprint(hexagonal_number(9))\nprint(hexagonal_number(10))\nprint(hexagonal_number(11))\nprint(hexagonal_number(12))\nprint(hexagonal_number(13))\nprint(hexagonal_number(14))\nprint(hexagonal_number(15))\nprint(hexagonal_number(16))\nprint(hexagonal_number(17))\nprint(hexagonal_number(18))\nprint(hexagonal_number(19))\nprint(hexagonal_number(20))\nprint(hexagonal_number(21))\nprint(hexagonal_number(22))\nprint(hexagonal_number(23))\nprint(hexagonal_number(24))\nprint(hexagonal_number(25))\nprint(hexagonal_number(26))\nprint(hexagonal_number(27))\nprint(hexagonal_number(28))\nprint(hexagonal_number(29))\nprint(hexagonal_number(30))\nprint(hexagonal_number(31))\nprint(hexagonal_number(32))\nprint(hexagonal_number(33))\nprint(hexagonal_number(34))\nprint(hexagonal_number(35))\nprint(hexagonal_number(36))\nprint(hexagonal_number(37))\nprint(hexagonal_number(38))\nprint(hexagonal_number(39))\nprint(hexagonal_number(40))\nprint(hexagonal_number(41))\nprint(hexagonal_number(42))\nprint(hexagonal_number(43))\nprint(hexagonal_number(44))\nprint(hexagonal"
    },
    {
      "rank": 8,
      "score": 10.0,
      "candidate": "def hexagon(n):\n    a = 0\n    b = 1\n    for i in range(1, n+1):\n        a = b\n        b = (a + b) * 2\n    return b\n\nprint(hexagon(10))"
    },
    {
      "rank": 9,
      "score": 10.0,
      "candidate": "def hex_center(n):\n    hex = 2\n    while hex < n:\n        hex += 2\n        for i in range(hex, n, hex):\n            print(i, end=' ')\n        print()\n    print()\n\n\nhex_center(4)\nhex_center(5)\nhex_center(6)\nhex_center(7)\nhex_center(8)\nhex_center(9)\nhex_center(10)\nhex_center(11)\nhex_center(12)\nhex_center(13)\nhex_center(14)\nhex_center(15)\nhex_center(16)\nhex_center(17)\nhex_center(18)\nhex_center(19)\nhex_center(20)\nhex_center(21)\nhex_center(22)\nhex_center(23)\nhex_center(24)\nhex_center(25)\nhex_center(26)\nhex_center(27)\nhex_center(28)\nhex_center(29)\nhex_center(30)\nhex_center(31)\nhex_center(32)\nhex_center(33)\nhex_center(34)\nhex_center(35)\nhex_center(36)\nhex_center(37)\nhex_center(38)\nhex_center(39)\nhex_center(40)\nhex_center(41)\nhex_center(42)\nhex_center(43)\nhex_center(44)\nhex_center(45)\nhex_center(46)\nhex_center(47)\nhex_center(48)\nhex_center(49)\nhex_center(50)\nhex_center(51)\nhex_center(52)\nhex_center(53)\nhex_center(54)\nhex_center(55)\nhex_center(56)\nhex_center(57)\nhex_center(58)\nhex_center(59)\nhex_center(60)\nhex_center(61)\nhex_center(62)\nhex_center(63)\nhex_center(64)\nhex_center(65)\nhex_center(66)\nhex_center(67)\nhex_center"
    },
    {
      "rank": 10,
      "score": 10.0,
      "candidate": "def hexagonal_number(n):\n    return n*(n+1)/2\n\n\ndef main():\n    n = int(input())\n    print(hexagonal_number(n))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 11,
      "score": 10.0,
      "candidate": "def hexagonal_number(n):\n    hex = 1\n    for i in range(1, n+1):\n        hex += 2*i**2\n\n    return hex\n\n\ndef main():\n    n = int(input())\n    print(hexagonal_number(n))\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 12,
      "score": 10.0,
      "candidate": "def hexagonal_number(n):\n    count = 0\n    for i in range(n+1):\n        count += (i*i+i*i+i)//2\n    return count\n\nprint(hexagonal_number(1))\nprint(hexagonal_number(2))\nprint(hexagonal_number(3))\nprint(hexagonal_number(4))\nprint(hexagonal_number(5))\nprint(hexagonal_number(6))\nprint(hexagonal_number(7))\nprint(hexagonal_number(8))\nprint(hexagonal_number(9))"
    },
    {
      "rank": 13,
      "score": 9.370583536698913,
      "candidate": "def hexagonal(n):\n    return sum(n ** 2 + 1) / 2 ** n\n\n\ndef main():\n    n = int(input(\"Enter the number of the nth center hexagonal number: \"))\n    print(hexagonal(n))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 14,
      "score": 9.234050852198141,
      "candidate": "def hexagonal(n):\n    if n <= 2:\n        return n\n    if n%2 == 0:\n        return n-1\n    return hexagonal(n-1)+n-2\n\nprint(hexagonal(10))"
    },
    {
      "rank": 15,
      "score": 9.21346272767743,
      "candidate": "def find_hexagonal_num(n):\n    if n == 1:\n        return 1\n    for i in range(1, n):\n        a = (3 * (i - 1) + 1) ** 2\n        b = (2 * (i - 1) + 1) ** 2\n        c = (1 * (i - 1) + 1) ** 2\n        d = (1 * (i - 1) + 1) ** 2\n        if a + b + c + d == n:\n            return i\n    return -1\n\n\nif __name__ == '__main__':\n    assert find_hexagonal_num(3) == 1\n    assert find_hexagonal_num(5) == 2\n    assert find_hexagonal_num(7) == -1"
    },
    {
      "rank": 16,
      "score": 9.205959372648458,
      "candidate": "def nth_centered_hexagonal_number(n):\n    hexagonal = [1]\n    for i in range(1, n+1):\n        hexagonal.append(hexagonal[i-1] + 2*hexagonal[i-2] + 3*hexagonal[i-3])\n    return hexagonal[n]\n\n\nprint(nth_centered_hexagonal_number(5))"
    },
    {
      "rank": 17,
      "score": 9.183391466815202,
      "candidate": "def hexagonal_number(n):\n    return sum(range(1, n + 1)) ** 2\n\n\nif __name__ == \"__main__\":\n    print(hexagonal_number(5))"
    },
    {
      "rank": 18,
      "score": 9.122564458729856,
      "candidate": "def hexagonal_number(n):\n    if n == 1:\n        return 1\n    return n + hexagonal_number(n-1)\n\nprint(hexagonal_number(10))"
    },
    {
      "rank": 19,
      "score": 8.973005557553902,
      "candidate": "def hexagonal_number(n):\n    i = 1\n    while n > 1:\n        i += 1\n        n -= 1\n        print(i)\n        if i < 4:\n            continue\n        else:\n            print(i**2, end=\"\")\n            if i % 2 == 0:\n                print(i, end=\"\")\n            else:\n                print(i)\n\n\nif __name__ == \"__main__\":\n    hexagonal_number(10)"
    },
    {
      "rank": 20,
      "score": 8.95994420569242,
      "candidate": "import math\n\ndef hexagonal_num(n):\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n\n    a = hexagonal_num(n - 1)\n    b = hexagonal_num(n - 2)\n\n    c = a + b\n\n    return c\n\nprint(hexagonal_num(6))"
    },
    {
      "rank": 21,
      "score": 8.946210893390457,
      "candidate": "def hexagon(n):\n    return n * (n + 1) // 2\n\n\ndef main():\n    print(hexagon(10))\n    print(hexagon(20))\n    print(hexagon(30))\n    print(hexagon(40))\n    print(hexagon(50))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 22,
      "score": 8.932217008005624,
      "candidate": "def find_nth_hexagonal_number(n):\n    if n < 1:\n        return None\n    result = 2\n    for i in range(1, n):\n        result *= 2\n        result += i\n    return result\n\nprint(find_nth_hexagonal_number(5))"
    },
    {
      "rank": 23,
      "score": 8.910084504002544,
      "candidate": "def hexagonal_num(n):\n    hex = 1\n    for i in range(2, n + 1):\n        hex += 2 * i\n    return hex\n\n\nprint(hexagonal_num(30))"
    },
    {
      "rank": 24,
      "score": 8.902145503295483,
      "candidate": "def hexagon(n):\n    \"\"\"\n    Find hexagon number from 1 to n.\n    \"\"\"\n    return hexagon(n // 2) + hexagon(n // 2 + 1)\n\n\nif __name__ == \"__main__\":\n    print(hexagon(15))"
    },
    {
      "rank": 25,
      "score": 8.85571690049604,
      "candidate": "def hexagon(n):\n    # Base Case\n    if n <= 2:\n        return n\n\n    # Recursive Case\n    return hexagon(n - 1) + hexagon(n - 2)\n\n\nif __name__ == \"__main__\":\n    print(hexagon(5))"
    },
    {
      "rank": 26,
      "score": 8.855395696632057,
      "candidate": "import math\n\n\ndef hexagon_number(n):\n    return int(math.pow(2, n) - 1)\n\n\nif __name__ == '__main__':\n    print(hexagon_number(10))"
    },
    {
      "rank": 27,
      "score": 8.850707355641543,
      "candidate": "def hexagonal(n):\n    n = int(n)\n    if n < 2:\n        return n\n    return n ** 2 + n ** 3 + (n ** 2) ** 2 + 2 * n ** 3 + (n ** 2) ** 3 + n ** 2 * n ** 3 + 1\n\n\ndef main():\n    n = int(input())\n    print(hexagonal(n))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 28,
      "score": 8.8281618090209,
      "candidate": "def hexagonal_number(n):\n    if n < 2:\n        return n\n    return hexagonal_number(n - 2) + hexagonal_number(n - 1)\n\nif __name__ == '__main__':\n    print(hexagonal_number(1))"
    },
    {
      "rank": 29,
      "score": 8.81367773444215,
      "candidate": "def hexagonal(n):\n    hexagonal_number = 0\n    if n == 0:\n        return hexagonal_number\n    for i in range(1, n):\n        hexagonal_number += (i**2)\n    return hexagonal_number\n\nprint(hexagonal(10))"
    },
    {
      "rank": 30,
      "score": 8.76828871349479,
      "candidate": "def hexagonal(n):\n    hexagonal = 1\n    for i in range(1, n + 1):\n        hexagonal += hexagonal * (i + 2) * (i + 3) * (i + 4)\n    return hexagonal\n\n\nif __name__ == \"__main__\":\n    print(hexagonal(5))"
    },
    {
      "rank": 31,
      "score": 8.750282588864879,
      "candidate": "def find_hexagonal(n):\n    n = int(n)\n    hex_list = []\n    for i in range(n):\n        hex_list.append(i ** 2)\n    hex_list.sort()\n    print(hex_list)\n\n\nif __name__ == '__main__':\n    find_hexagonal(int(input()))"
    },
    {
      "rank": 32,
      "score": 8.692801520950061,
      "candidate": "def find_hexagonal(n):\n    if n < 0:\n        return 0\n    if n == 0:\n        return 1\n    if n == 1:\n        return 2\n\n    i = 0\n    while i < n:\n        i += 1\n        if i % 2 == 0:\n            i += 1\n            if i == n:\n                return i\n        else:\n            i += 1\n            if i == n:\n                return i - 1\n\n\nif __name__ == \"__main__\":\n    print(find_hexagonal(3))"
    },
    {
      "rank": 33,
      "score": 8.623000730200317,
      "candidate": "def hexagonal(n):\n    return sum(\n        [\n            (2 * (i + 1)) ** 2\n            for i in range(n - 1)\n        ]\n    )\n\nif __name__ == \"__main__\":\n    print(hexagonal(3))"
    },
    {
      "rank": 34,
      "score": 8.565425580227462,
      "candidate": "def find_hexagonal(n):\n    hexagonal_number = 1\n    for i in range(1, n + 1):\n        hexagonal_number = hexagonal_number + (i ** 2)\n    return hexagonal_number\n\n\nprint(find_hexagonal(3))\nprint(find_hexagonal(5))\nprint(find_hexagonal(10))"
    },
    {
      "rank": 35,
      "score": 8.548876241946822,
      "candidate": "def hexagonal(n):\n    return sum(map(lambda i: i**2, range(1, n + 1)))\n\n\nif __name__ == \"__main__\":\n    print(hexagonal(5))"
    },
    {
      "rank": 36,
      "score": 8.53012858503943,
      "candidate": "def hexagonal(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    n = int(n)\n    if n <= 1:\n        return n\n\n    i = 1\n    while i <= n - 2:\n        if i * i <= n:\n            i += 1\n        else:\n            i = 0\n\n    return i"
    },
    {
      "rank": 37,
      "score": 8.499905739299377,
      "candidate": "def hexagonal_number(n):\n    hexagonal_numbers = []\n    for i in range(1,n+1):\n        hexagonal_numbers.append(hexagonal_number_helper(i))\n    return hexagonal_numbers\n\ndef hexagonal_number_helper(n):\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 3\n    else:\n        return n + hexagonal_number_helper(n-1) + hexagonal_number_helper(n-2) + hexagonal_number_helper(n-3)\n\n\nprint(hexagonal_number(10))"
    },
    {
      "rank": 38,
      "score": 8.48796797856353,
      "candidate": "def get_hexagonal_number(n):\n    hexagonal_numbers = [0] * n\n    hexagonal_numbers[0] = 1\n    hexagonal_numbers[1] = 1\n    for i in range(2, n):\n        hexagonal_numbers[i] = hexagonal_numbers[i - 1] + hexagonal_numbers[i - 2]\n    return hexagonal_numbers[n - 1]\n\n\nprint(get_hexagonal_number(10))"
    },
    {
      "rank": 39,
      "score": 8.478208546788407,
      "candidate": "def hexagonal_number(n):\n    if n == 0:\n        return 0\n    else:\n        return n * (2 * n - 1)\n\n\nif __name__ == \"__main__\":\n    print(hexagonal_number(5))"
    },
    {
      "rank": 40,
      "score": 8.437695832075478,
      "candidate": "def hexagonal_number(n):\n    return n * (n + 1) / 2\n\nprint(hexagonal_number(int(input(\"Enter the nth value of hexagonal number: \"))))"
    },
    {
      "rank": 41,
      "score": 8.426531424889468,
      "candidate": "def hexagon(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    hex_list = [1]\n    for i in range(n + 1):\n        hex_list.append(hex_list[i - 1] + hex_list[i - 2] + hex_list[i - 3])\n    return hex_list[n]\n\n\nprint(hexagon(1))"
    },
    {
      "rank": 42,
      "score": 8.408439383654278,
      "candidate": "def hexagonal_number(n):\n    n = int(n)\n    if n < 2:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return (hexagonal_number(n-2)+hexagonal_number(n-1))/2\n\n\nprint(hexagonal_number(4))"
    },
    {
      "rank": 43,
      "score": 8.294940769211511,
      "candidate": "def hexagonal_num(n):\n    hex_num = 1\n    for i in range(1, n):\n        hex_num += i * (i + 1) / 2\n    return hex_num\n\n\ndef main():\n    print(hexagonal_num(int(input(\"Enter the number of hexagonal numbers to find: \"))))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 44,
      "score": 8.2938925966498,
      "candidate": "def hexagon(n):\n    for i in range(1, n + 1):\n        print(i, end=\" \")\n        for j in range(1, i // 3):\n            print(i // 3, end=\" \")\n        print()\n\n\nhexagon(10)"
    },
    {
      "rank": 45,
      "score": 8.251903304236286,
      "candidate": "def hexagonal_number(n):\n    hexagonal_number = 1\n    for i in range(1, n + 1):\n        hexagonal_number *= (4 * i)\n    return hexagonal_number\n\n\nif __name__ == '__main__':\n    n = int(input())\n    print(hexagonal_number(n))"
    },
    {
      "rank": 46,
      "score": 8.214125058964552,
      "candidate": "def find_hexagonal_number(n):\n    for i in range(1, n):\n        print(i, hex(i))\n\n\nif __name__ == \"__main__\":\n    find_hexagonal_number(10)"
    },
    {
      "rank": 47,
      "score": 8.212735598038213,
      "candidate": "def hexagonal(n):\n    return n**3 + n**2 - n + 1\n\n\nif __name__ == \"__main__\":\n    print(hexagonal(10))\n    print(hexagonal(100))\n    print(hexagonal(1000))"
    },
    {
      "rank": 48,
      "score": 8.209707251476969,
      "candidate": "def hexagonal_number(n):\n    return (n * (n + 1) // 2) ** 2\n\n\ndef main():\n    print(hexagonal_number(4))\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 49,
      "score": 8.2048573255218,
      "candidate": "def hex_centered(n):\n    if n < 2:\n        return\n    c = 1\n    while c * c <= n:\n        if c % 2 == 1:\n            print(c)\n        c += 1\n\n\nhex_centered(int(input()))"
    },
    {
      "rank": 50,
      "score": 8.193565922652176,
      "candidate": "def hexagonal(n):\n    x = 1\n    for i in range(1, n):\n        x = x * (2 * i + 1)\n\n    return x\n\n\nprint(hexagonal(5))"
    },
    {
      "rank": 51,
      "score": 8.172253082181854,
      "candidate": "def hexagon_number(n):\n    if n == 1:\n        return 1\n    if n == 2:\n        return 1\n    hex = hexagon_number(n-1)\n    return hex + hexagon_number(n-2)\n\n\nprint(hexagon_number(5))"
    },
    {
      "rank": 52,
      "score": 8.143591138329747,
      "candidate": "def hexagonal_number(n):\n    n = int(n)\n    if n == 1:\n        return 1\n    for i in range(2, n+1):\n        if i % 2 == 0:\n            print(i, end=\" \")\n        else:\n            print((i**2) - 1, end=\" \")\n    print()\n\nhexagonal_number(3)"
    },
    {
      "rank": 53,
      "score": 8.08452234024709,
      "candidate": "def find_hexagonal_number(n):\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    return n + 2 * find_hexagonal_number(n - 1)\n\n\nif __name__ == \"__main__\":\n    print(find_hexagonal_number(10))"
    },
    {
      "rank": 54,
      "score": 8.040197642997851,
      "candidate": "def find_hexagonal_number(n):\n    result = 0\n    for i in range(1, n):\n        result += i * (i + 1) // 2\n    return result\n\n\nif __name__ == \"__main__\":\n    print(find_hexagonal_number(3))"
    },
    {
      "rank": 55,
      "score": 8.024835682833125,
      "candidate": "def get_hexagonal_number(n):\n    hexagonal_number = [0]\n    for i in range(1, n + 1):\n        hexagonal_number.append(i ** 2 + i + 1)\n\n    return hexagonal_number\n\n\nif __name__ == \"__main__\":\n    print(get_hexagonal_number(3))"
    },
    {
      "rank": 56,
      "score": 7.990432406683839,
      "candidate": "def nth_centered_hexagonal(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    n = abs(n)\n    result = 1\n    for i in range(1, n):\n        result *= i\n    return result"
    },
    {
      "rank": 57,
      "score": 7.8912769574414305,
      "candidate": "def hexagonal_num(n):\n    num = 1\n    for i in range(n):\n        num += 1\n        for j in range(1, num):\n            if i == 0:\n                hexagonal_num = num\n            elif i == n-1:\n                hexagonal_num += num\n            elif num % 2 == 0:\n                hexagonal_num += num\n            else:\n                hexagonal_num += num - 2\n    return hexagonal_num\n\n\nprint(hexagonal_num(6))"
    },
    {
      "rank": 58,
      "score": 7.868947655733293,
      "candidate": "def hexagonal(n):\n    return int((n * (n + 1) // 2) ** 0.5)\n\n\nif __name__ == \"__main__\":\n    print(hexagonal(15))"
    },
    {
      "rank": 59,
      "score": 7.84634113240411,
      "candidate": "def find_hexagonal(n):\n    return sum(1 for i in range(2, n+1) if i**2 == i**3)\n\n\nif __name__ == '__main__':\n    print(find_hexagonal(100))"
    },
    {
      "rank": 60,
      "score": 7.834022619458933,
      "candidate": "def hexagonal_number(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return hexagonal_number(n-1) + hexagonal_number(n-2) + hexagonal_number(n-3)\n\n\nif __name__ == \"__main__\":\n    print(hexagonal_number(10))"
    },
    {
      "rank": 61,
      "score": 7.780351419995229,
      "candidate": "def hexagonal(n):\n    hex = 1\n    for i in range(2, n + 1):\n        hex = hex * i + 1\n    return hex"
    },
    {
      "rank": 62,
      "score": 7.7320703513377165,
      "candidate": "def hexagonal(n):\n    x = n // 3\n    y = n - x * 3\n    return x * y * x\n\n\nif __name__ == \"__main__\":\n    print(hexagonal(100))"
    },
    {
      "rank": 63,
      "score": 7.5819855281879285,
      "candidate": "def hexagonal_number(n):\n    # write your code here\n    for i in range(n-1):\n        for j in range(1, n-1):\n            print(i**2, end=\"\")\n        print(\"\")\n    return\n\nhexagonal_number(9)"
    },
    {
      "rank": 64,
      "score": 7.562924366763077,
      "candidate": "def hexagonal_number(n):\n    n = n + 1\n    hex = 2\n    for i in range(1, n):\n        hex = hex * hex + i\n    return hex\n\n\ndef main():\n    print(hexagonal_number(3))\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 65,
      "score": 7.4878043221155455,
      "candidate": "def hexagonal_number(n):\n    return n * (n + 1) / 2\n\n\nif __name__ == \"__main__\":\n    print(hexagonal_number(20))"
    },
    {
      "rank": 66,
      "score": 7.464609382504557,
      "candidate": "import math\n\ndef hex_center(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    x = math.sqrt(n)\n    if x < 1:\n        return 0\n\n    result = 0\n    for i in range(1, x+1):\n        if i == x:\n            result += 1\n            continue\n\n        if i**2 > n:\n            break\n\n        for j in range(1, x+1):\n            result += (i**2) * (j**2)\n\n    return result\n\nprint(hex_center(1000))"
    },
    {
      "rank": 67,
      "score": 7.4506599871439985,
      "candidate": "def hexagon(n):\n    n = int(n)\n    if n < 0 or n > 100:\n        return None\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    if n == 2:\n        return 3\n    if n % 2 == 0:\n        return hexagon(n - 1) + hexagon(n - 2)\n    else:\n        return hexagon(n - 1) + hexagon(n - 2) + 3\n\n\nprint(hexagon(20))"
    },
    {
      "rank": 68,
      "score": 7.134571892399572,
      "candidate": "def hexagonal_num(n):\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    return hexagonal_num(n - 1) + (hexagonal_num(n - 2) * 2)\n\nprint(hexagonal_num(6))"
    },
    {
      "rank": 69,
      "score": 3.500685969860482,
      "candidate": "def hexagonal(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    return n ** 2 + 3 * n + 1\n\n\nif __name__ == \"__main__\":\n    print(hexagonal(1))\n    print(hexagonal(2))\n    print(hexagonal(3))\n    print(hexagonal(4))\n    print(hexagonal(5))\n    print(hexagonal(6))\n    print(hexagonal(7))\n    print(hexagonal(8))\n    print(hexagonal(9))\n    print(hexagonal(10))\n    print(hexagonal(11))\n    print(hexagonal(12))\n    print(hexagonal(13))\n    print(hexagonal(14))\n    print(hexagonal(15))"
    },
    {
      "rank": 70,
      "score": 3.4690076060548973,
      "candidate": "def hexagonal_number(n):\n    if n <= 1:\n        return 0\n    hexagonal = [0] * n\n    for i in range(1, n):\n        hexagonal[i] = i * (i + 1) / 2\n        for j in range(i):\n            hexagonal[i] += hexagonal[j]\n    return hexagonal[-1]\n\n\ndef main():\n    print(hexagonal_number(10))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 71,
      "score": 3.1736192139475086,
      "candidate": "def hexagonal(n):\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    else:\n        return n * (n + 1) // 2\n\n\nprint(hexagonal(5))"
    },
    {
      "rank": 72,
      "score": 3.120223365870615,
      "candidate": "def find_hexagonal_number(n):\n    n = int(n)\n    if n < 1:\n        return -1\n\n    if n == 1:\n        return 1\n\n    if n == 2:\n        return 2\n\n    if n == 3:\n        return 4\n\n    if n == 4:\n        return 6\n\n    if n == 5:\n        return 8\n\n    if n == 6:\n        return 10\n\n    if n == 7:\n        return 12\n\n    if n == 8:\n        return 14\n\n    if n == 9:\n        return 16\n\n    if n == 10:\n        return 18\n\n    if n == 11:\n        return 20\n\n    if n == 12:\n        return 22\n\n    if n == 13:\n        return 24\n\n    if n == 14:\n        return 26\n\n    if n == 15:\n        return 28\n\n    if n == 16:\n        return 30\n\n    if n == 17:\n        return 32\n\n    if n == 18:\n        return 34\n\n    if n == 19:\n        return 36\n\n    if n == 20:\n        return 38\n\n    if n == 21:\n        return 42\n\n    if n == 22:\n        return 44\n\n    if n == 23:\n        return 46\n\n    if n == 24:\n        return 52\n\n    if n == 25:\n        return 56\n\n    if n == 26:\n        return 60\n\n    if n == 27:\n        return 64\n\n    if n == 28:\n        return 76\n\n    if n == 29:\n        return 80\n\n    if n == 30:\n        return 90\n\n    if n == 31:\n        return 100\n\n    return -1\n\n\nprint(find_hexagonal_number(5))"
    },
    {
      "rank": 73,
      "score": 3.115723528015243,
      "candidate": "def hexagon(n):\n    return hexagon_helper(n, 0)\n\ndef hexagon_helper(n, i):\n    if n == 1:\n        return i\n    if n == 2:\n        return i + 1\n    if i == 0:\n        return hexagon_helper(n-1, 1) + hexagon_helper(n-1, 2)\n    if i == n-1:\n        return hexagon_helper(n-1, 1) + hexagon_helper(n-1, 2) + hexagon_helper(n-1, 3)\n    if i == n-2:\n        return hexagon_helper(n-1, 1) + hexagon_helper(n-1, 2) + hexagon_helper(n-1, 3) + hexagon_helper(n-1, 4)\n    if i == n-3:\n        return hexagon_helper(n-1, 1) + hexagon_helper(n-1, 2) + hexagon_helper(n-1, 3) + hexagon_helper(n-1, 4) + hexagon_helper(n-1, 5)\n    if i == n-4:\n        return hexagon_helper(n-1, 1) + hexagon_helper(n-1, 2) + hexagon_helper(n-1, 3) + hexagon_helper(n-1, 4) + hexagon_helper(n-1, 5)\n\nprint(hexagon(5))"
    },
    {
      "rank": 74,
      "score": 3.1156465937626923,
      "candidate": "def hexagon(n):\n    # write your code in Python 3.6\n    return hexagonal(n)\n\n\ndef hexagonal(n):\n    if n == 1:\n        return 1\n    if n == 2:\n        return 1\n    if n == 3:\n        return 2\n    if n == 4:\n        return 3\n    if n == 5:\n        return 4\n    if n == 6:\n        return 5\n    if n == 7:\n        return 6\n    if n == 8:\n        return 7\n    if n == 9:\n        return 8\n    if n == 10:\n        return 9\n    if n == 11:\n        return 10\n    if n == 12:\n        return 11\n    if n == 13:\n        return 12\n    if n == 14:\n        return 13\n    if n == 15:\n        return 14\n    if n == 16:\n        return 15\n    if n == 17:\n        return 16\n    if n == 18:\n        return 17\n    if n == 19:\n        return 18\n    if n == 20:\n        return 19\n    if n == 21:\n        return 20\n    if n == 22:\n        return 21\n    if n == 23:\n        return 22\n    if n == 24:\n        return 23\n    if n == 25:\n        return 24\n    if n == 26:\n        return 25\n    if n == 27:\n        return 26\n    if n == 28:\n        return 27\n    if n == 29:\n        return 28\n    if n == 30:\n        return 29\n    if n == 31:\n        return 30\n    if n == 32:\n        return 31\n    if n == 33:\n        return 32\n    if n == 34:\n        return 33\n    if n == 35:\n        return 34\n    if n == 36:\n        return 35\n    if n == 37:\n        return 36\n    if n == 38:\n        return 37\n    if n == 39:\n        return 38\n    if n == 40:\n        return 39\n    if n == 41:\n        return 40\n    if n == 42:\n        return 41\n    if n == 43:"
    },
    {
      "rank": 75,
      "score": 3.109957852661908,
      "candidate": "def hexagonal_number(n):\n    if n == 1:\n        return 1\n    if n == 2:\n        return 4\n    if n == 3:\n        return 9\n    if n == 4:\n        return 16\n    if n == 5:\n        return 27\n    if n == 6:\n        return 64\n    if n == 7:\n        return 81\n    if n == 8:\n        return 100\n    if n == 9:\n        return 121\n    if n == 10:\n        return 131\n    if n == 11:\n        return 141\n    if n == 12:\n        return 151\n    if n == 13:\n        return 161\n    if n == 14:\n        return 171\n    if n == 15:\n        return 181\n    if n == 16:\n        return 191\n    if n == 17:\n        return 201\n    if n == 18:\n        return 21\n    if n == 19:\n        return 22\n    if n == 20:\n        return 23\n    if n == 21:\n        return 24\n    if n == 22:\n        return 25\n    if n == 23:\n        return 26\n    if n == 24:\n        return 27\n    if n == 25:\n        return 28\n    if n == 26:\n        return 29\n    if n == 27:\n        return 30\n    if n == 28:\n        return 31\n    if n == 29:\n        return 32\n    if n == 30:\n        return 33\n    if n == 31:\n        return 34\n    if n == 32:\n        return 35\n    if n == 33:\n        return 36\n    if n == 34:\n        return 37\n    if n == 35:\n        return 38\n    if n == 36:\n        return 39\n    if n == 37:\n        return 40\n    if n == 38:\n        return 41\n    if n == 39:\n        return 42\n    if n == 40:\n        return 43\n    if n == 41:\n        return 44\n    if n == 42:\n        return 45\n    if n == 43:\n        return 46\n    if n == 44:\n        return 47\n    if n == 45:"
    },
    {
      "rank": 76,
      "score": 3.1060042980491405,
      "candidate": "def find_nth_hexagon(n):\n    if n < 1:\n        return -1\n    if n == 1:\n        return 1\n    if n == 2:\n        return 1\n    if n == 3:\n        return 2\n    if n == 4:\n        return 3\n    if n == 5:\n        return 4\n    if n == 6:\n        return 5\n    if n == 7:\n        return 6\n    if n == 8:\n        return 7\n    if n == 9:\n        return 8\n    if n == 10:\n        return 9\n    if n == 11:\n        return 10\n    if n == 12:\n        return 11\n    if n == 13:\n        return 12\n    if n == 14:\n        return 13\n    if n == 15:\n        return 14\n    if n == 16:\n        return 15\n    if n == 17:\n        return 16\n    if n == 18:\n        return 17\n    if n == 19:\n        return 18\n    if n == 20:\n        return 19\n    if n == 21:\n        return 20\n    if n == 22:\n        return 21\n    if n == 23:\n        return 22\n    if n == 24:\n        return 23\n    if n == 25:\n        return 24\n    if n == 26:\n        return 25\n    if n == 27:\n        return 26\n    if n == 28:\n        return 27\n    if n == 29:\n        return 28\n    if n == 30:\n        return 29\n    if n == 31:\n        return 30\n    if n == 32:\n        return 31\n    if n == 33:\n        return 32\n    if n == 34:\n        return 33\n    if n == 35:\n        return 34\n    if n == 36:\n        return 35\n    if n == 37:\n        return 36\n    if n == 38:\n        return 37\n    if n == 39:\n        return 38\n    if n == 40:\n        return 39\n    if n == 41:\n        return 40\n    if n == 42:\n        return 41\n    if n == 43:\n        return 42\n    if n == 44:\n        return 43"
    },
    {
      "rank": 77,
      "score": 3.105200355091099,
      "candidate": "def hexagonal(n):\n    n = int(n)\n    if n == 0:\n        return 1\n    if n == 1:\n        return 2\n    if n == 2:\n        return 3\n    if n == 3:\n        return 4\n    if n == 4:\n        return 5\n    if n == 5:\n        return 6\n    if n == 6:\n        return 7\n    if n == 7:\n        return 8\n    if n == 8:\n        return 9\n    if n == 9:\n        return 10\n    if n == 10:\n        return 11\n    if n == 11:\n        return 12\n    if n == 12:\n        return 13\n    if n == 13:\n        return 14\n    if n == 14:\n        return 15\n    if n == 15:\n        return 16\n    if n == 16:\n        return 17\n    if n == 17:\n        return 18\n    if n == 18:\n        return 19\n    if n == 19:\n        return 20\n    if n == 20:\n        return 21\n    if n == 21:\n        return 22\n    if n == 22:\n        return 23\n    if n == 23:\n        return 24\n    if n == 24:\n        return 25\n    if n == 25:\n        return 26\n    if n == 26:\n        return 27\n    if n == 27:\n        return 28\n    if n == 28:\n        return 29\n    if n == 29:\n        return 30\n    if n == 30:\n        return 31\n    if n == 31:\n        return 32\n    if n == 32:\n        return 33\n    if n == 33:\n        return 34\n    if n == 34:\n        return 35\n    if n == 35:\n        return 36\n    if n == 36:\n        return 37\n    if n == 37:\n        return 38\n    if n == 38:\n        return 39\n    if n == 39:\n        return 40\n    if n == 40:\n        return 41\n    if n == 41:\n        return 42\n    if n == 42:\n        return 43\n    if n == 43:\n        return 44\n    if n == 44:\n        return"
    },
    {
      "rank": 78,
      "score": 3.1037068702063344,
      "candidate": "def hex_center(n):\n    hex_list = [1]\n    for i in range(2, n + 1):\n        hex_list.append(hex_list[i-1] + hex_list[i-2] + hex_list[i-3])\n    return hex_list[n]\n\n\ndef test_hex_center():\n    assert hex_center(1) == 1\n    assert hex_center(2) == 1\n    assert hex_center(3) == 2\n    assert hex_center(4) == 3\n    assert hex_center(5) == 5\n    assert hex_center(6) == 8\n    assert hex_center(7) == 13\n    assert hex_center(8) == 21\n    assert hex_center(9) == 34\n    assert hex_center(10) == 55\n    assert hex_center(11) == 89\n    assert hex_center(12) == 144\n    assert hex_center(13) == 233\n    assert hex_center(14) == 377\n    assert hex_center(15) == 446\n    assert hex_center(16) == 513\n    assert hex_center(17) == 613\n    assert hex_center(18) == 713\n    assert hex_center(19) == 813\n    assert hex_center(20) == 913\n    assert hex_center(21) == 1013\n    assert hex_center(22) == 1213\n    assert hex_center(23) == 1413\n    assert hex_center(24) == 1613\n    assert hex_center(25) == 1713\n    assert hex_center(26) == 1813\n    assert hex_center(27) == 1913\n    assert hex_center(28) == 2013\n    assert hex_center(29) == 2113\n    assert hex_center(30) == 2213\n    assert hex_center(31) == 2313\n    assert hex_center(32) == 2413\n    assert hex_center(33) == 2513\n    assert hex_center(34) == 2613\n    assert hex_center(35) == 2713\n    assert hex_center(36) == 2813\n    assert hex_center"
    },
    {
      "rank": 79,
      "score": 3.100559146430488,
      "candidate": "def hexagon(n):\n    # Write your code here\n    if n < 0:\n        return 0\n    hex_list = [0] * (n + 1)\n    hex_list[0] = 1\n    hex_list[1] = 1\n    for i in range(2, n + 1):\n        hex_list[i] = hex_list[i - 1] + hex_list[i - 2] + hex_list[i - 3]\n    return hex_list[n]\n\n\nif __name__ == \"__main__\":\n    print(hexagon(5))"
    },
    {
      "rank": 80,
      "score": 3.0629955954781196,
      "candidate": "def nth_hexagonal_number(n):\n    n = int(n)\n    if n < 1:\n        return -1\n    if n == 1:\n        return 1\n\n    if n % 2 == 0:\n        return n * (n + 1) // 2\n\n    if n % 3 == 0:\n        return n * (n + 2) // 6\n\n    if n % 5 == 0:\n        return n * (n + 3) // 12\n\n    if n % 6 == 0:\n        return n * (n + 4) // 20\n\n    return -1\n\nprint(nth_hexagonal_number(1))\nprint(nth_hexagonal_number(2))\nprint(nth_hexagonal_number(3))\nprint(nth_hexagonal_number(4))\nprint(nth_hexagonal_number(5))\nprint(nth_hexagonal_number(6))\nprint(nth_hexagonal_number(7))\nprint(nth_hexagonal_number(8))\nprint(nth_hexagonal_number(9))\nprint(nth_hexagonal_number(10))"
    },
    {
      "rank": 81,
      "score": 3.0293634484913605,
      "candidate": "def hexagonal_number(n):\n    if n < 0:\n        return -1\n    if n == 0:\n        return 1\n    if n == 1:\n        return 2\n    return hexagonal_number(n-1) + hexagonal_number(n-2)\n\n\nif __name__ == \"__main__\":\n    print(hexagonal_number(0))\n    print(hexagonal_number(1))\n    print(hexagonal_number(2))\n    print(hexagonal_number(3))\n    print(hexagonal_number(4))\n    print(hexagonal_number(5))\n    print(hexagonal_number(6))\n    print(hexagonal_number(7))\n    print(hexagonal_number(8))\n    print(hexagonal_number(9))\n    print(hexagonal_number(10))\n    print(hexagonal_number(11))\n    print(hexagonal_number(12))\n    print(hexagonal_number(13))\n    print(hexagonal_number(14))\n    print(hexagonal_number(15))\n    print(hexagonal_number(16))\n    print(hexagonal_number(17))\n    print(hexagonal_number(18))\n    print(hexagonal_number(19))\n    print(hexagonal_number(20))\n    print(hexagonal_number(21))\n    print(hexagonal_number(22))\n    print(hexagonal_number(23))\n    print(hexagonal_number(24))\n    print(hexagonal_number(25))\n    print(hexagonal_number(26))\n    print(hexagonal_number(27))\n    print(hexagonal_number(28))\n    print(hexagonal_number(29))\n    print(hexagonal_number(30))\n    print(hexagonal_number(31))\n    print(hexagonal_number(32))\n    print(hexagonal_number(33))\n    print(hexagonal_number(34))\n    print(hexagonal_number"
    },
    {
      "rank": 82,
      "score": 2.962992549635763,
      "candidate": "def find_hexagonal(n):\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 4\n    else:\n        return (n * (n + 1) / 2) - 2\n\nprint(find_hexagonal(2))\nprint(find_hexagonal(3))\nprint(find_hexagonal(4))\nprint(find_hexagonal(5))\nprint(find_hexagonal(6))\nprint(find_hexagonal(7))\nprint(find_hexagonal(8))\nprint(find_hexagonal(9))\nprint(find_hexagonal(10))\nprint(find_hexagonal(11))\nprint(find_hexagonal(12))\nprint(find_hexagonal(13))\nprint(find_hexagonal(14))\nprint(find_hexagonal(15))\nprint(find_hexagonal(16))\nprint(find_hexagonal(17))\nprint(find_hexagonal(18))\nprint(find_hexagonal(19))\nprint(find_hexagonal(20))\nprint(find_hexagonal(21))\nprint(find_hexagonal(22))\nprint(find_hexagonal(23))\nprint(find_hexagonal(24))\nprint(find_hexagonal(25))\nprint(find_hexagonal(26))\nprint(find_hexagonal(27))\nprint(find_hexagonal(28))\nprint(find_hexagonal(29))\nprint(find_hexagonal(30))\nprint(find_hexagonal(31))\nprint(find_hexagonal(32))\nprint(find_hexagonal(33))\nprint(find_hexagonal(34))\nprint(find_hexagonal(35))\nprint(find_hexagonal(36))\nprint(find_hexagonal(37))\nprint(find_hexagonal(38))\nprint(find_hexagonal(39))\nprint(find_hexagonal(40))\nprint(find_hexagonal(41))\nprint(find_hex"
    },
    {
      "rank": 83,
      "score": 2.955755423625221,
      "candidate": "def find_hexagonal(n):\n    if n==1:\n        return 1\n    else:\n        return (n*2 + 1) * (n*3 + 1) * (n*5 + 1) * (n*7 + 1) * (n*11 + 1) * (n*13 + 1) * (n*17 + 1) * (n*19 + 1) * (n*23 + 1) * (n*29 + 1) * (n*33 + 1)\n\n\nprint(find_hexagonal(int(input())))"
    },
    {
      "rank": 84,
      "score": 2.9405891274675784,
      "candidate": "def hexagonal_number(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n\n    return hexagonal_number(n - 1) + hexagonal_number(n - 2) + hexagonal_number(n - 3)"
    },
    {
      "rank": 85,
      "score": 2.929704995891996,
      "candidate": "def hexagon(n):\n    a = 1\n    b = 1\n    for i in range(1, n + 1):\n        a, b = b, a + b\n    return a\n\nprint(hexagon(10))"
    },
    {
      "rank": 86,
      "score": 2.9277515838443087,
      "candidate": "def hexagonal_number(n):\n    if n == 1:\n        return 0\n    if n == 2:\n        return 1\n    if n == 3:\n        return 2\n    if n == 4:\n        return 3\n    if n == 5:\n        return 4\n    if n == 6:\n        return 5\n    if n == 7:\n        return 6\n    if n == 8:\n        return 7\n    if n == 9:\n        return 8\n    if n == 10:\n        return 9\n    if n == 11:\n        return 10\n    if n == 12:\n        return 11\n    if n == 13:\n        return 12\n    if n == 14:\n        return 13\n    if n == 15:\n        return 14\n    if n == 16:\n        return 15\n    if n == 17:\n        return 16\n    if n == 18:\n        return 17\n    if n == 19:\n        return 18\n    if n == 20:\n        return 19\n    if n == 21:\n        return 20\n    if n == 22:\n        return 21\n    if n == 23:\n        return 22\n    if n == 24:\n        return 23\n    if n == 25:\n        return 24\n    if n == 26:\n        return 25\n    if n == 27:\n        return 26\n    if n == 28:\n        return 27\n    if n == 29:\n        return 28\n    if n == 30:\n        return 29\n    if n == 31:\n        return 30\n    if n == 32:\n        return 31\n    if n == 33:\n        return 32\n    if n == 34:\n        return 33\n    if n == 35:\n        return 34\n    if n == 36:\n        return 35\n    if n == 37:\n        return 36\n    if n == 38:\n        return 37\n    if n == 39:\n        return 38\n    if n == 40:\n        return 39\n    if n == 41:\n        return 40\n    if n == 42:\n        return 41\n    if n == 43:\n        return 42\n    if n == 44:\n        return 43\n    if n == 45:\n        return 44\n    if n"
    },
    {
      "rank": 87,
      "score": 2.925076173776262,
      "candidate": "def hexagonal(n):\n    return hex(n)[::-1]\n\n\ndef hex(n):\n    return hex(n//2) + hex(n//4) + hex(n//8) + hex(n//16)\n\n\nprint(hexagonal(6))"
    },
    {
      "rank": 88,
      "score": 2.9250709200885323,
      "candidate": "def hex_number(n):\n    if n < 2:\n        return 0\n    if n == 2:\n        return 1\n    else:\n        return (n ** 2) * hex_number(n - 1)\n\n\ndef hex_number_2(n):\n    return (n ** 2) * (n ** 2 - 2 * n)\n\n\nif __name__ == '__main__':\n    print(hex_number(4))\n    print(hex_number_2(4))"
    },
    {
      "rank": 89,
      "score": 2.9066580000661513,
      "candidate": "def hexagonal_number(n):\n    # TODO: Write a function that finds nth centered hexagonal number.\n    return 1\n\n\nprint(hexagonal_number(5))"
    },
    {
      "rank": 90,
      "score": 2.9010520397276114,
      "candidate": "def find_hexagonal(n):\n    if n == 1:\n        return 1\n\n    hexagonal = [1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096, 8192]\n    res = hexagonal[n-1]\n\n    for i in range(2, n-1):\n        res += hexagonal[i-1]\n\n    return res\n\n\nprint(find_hexagonal(1))"
    },
    {
      "rank": 91,
      "score": 2.8509664788575177,
      "candidate": "def hexagonal(n):\n    return hexagonal_helper(n)\n\ndef hexagonal_helper(n):\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n == 3:\n        return 4\n    if n == 4:\n        return 6\n    if n == 5:\n        return 8\n    if n == 6:\n        return 10\n    if n == 7:\n        return 12\n    if n == 8:\n        return 14\n    if n == 9:\n        return 16\n    if n == 10:\n        return 18\n    if n == 11:\n        return 20\n    if n == 12:\n        return 24\n    if n == 13:\n        return 28\n    if n == 14:\n        return 32\n    if n == 15:\n        return 36\n    if n == 16:\n        return 40\n    if n == 17:\n        return 44\n    if n == 18:\n        return 48\n    if n == 19:\n        return 56\n    if n == 20:\n        return 60\n    if n == 21:\n        return 64\n    if n == 22:\n        return 72\n    if n == 23:\n        return 80\n    if n == 24:\n        return 98\n    if n == 25:\n        return 100\n    if n == 26:\n        return 110\n    if n == 27:\n        return 120\n    if n == 28:\n        return 120\n    if n == 29:\n        return 130\n    if n == 30:\n        return 140\n    if n == 31:\n        return 160\n    if n == 32:\n        return 180\n    if n == 33:\n        return 200\n    if n == 34:\n        return 220\n    if n == 35:\n        return 240\n    if n == 36:\n        return 260\n    if n == 37:\n        return 280\n    if n == 38:\n        return 300\n    if n == 39:\n        return 320\n    if n == 40:\n        return 340\n    if n == 41:\n        return 360\n    if n == 42:\n        return 380\n    if n == 43:\n        return 400"
    },
    {
      "rank": 92,
      "score": 2.8341535301524328,
      "candidate": "def hexagonal_number(n):\n    return hexagonal_number_helper(0, n, 0, 0)\n\ndef hexagonal_number_helper(i, j, k, l):\n    if i == j == k == l:\n        return i\n\n    if i == j:\n        return hexagonal_number_helper(i + 1, j, k, l)\n\n    if i == j + 1:\n        return hexagonal_number_helper(i + 1, j + 1, k, l)\n\n    if i == j - 1:\n        return hexagonal_number_helper(i + 1, j - 1, k, l)\n\n    if i == j - 1 and j > k:\n        return hexagonal_number_helper(i + 1, j - 1, k, l)\n\n    if i == j + 1 and j < l:\n        return hexagonal_number_helper(i + 1, j + 1, k, l)\n\n    if i == j - 1 and k > l:\n        return hexagonal_number_helper(i + 1, j - 1, k, l)\n\n    return hexagonal_number_helper(i + 1, j - 1, k, l)\n\nprint(hexagonal_number(10))"
    },
    {
      "rank": 93,
      "score": 2.820067990642889,
      "candidate": "def hexagonal_number(n):\n    if n < 0:\n        return -1\n    elif n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        return (hexagonal_number(n-1) + hexagonal_number(n-2) + hexagonal_number(n-3)) / 6\n\nprint(hexagonal_number(10))"
    },
    {
      "rank": 94,
      "score": 2.8077956192259825,
      "candidate": "def get_hexagonal_number(n):\n    return get_hexagonal_number_helper(n, 0, n)\n\ndef get_hexagonal_number_helper(n, i, j):\n    if i == j:\n        return 1\n    if i == j - 1:\n        return 2**n - 1\n    if i > j:\n        return 0\n    if i == j - 1:\n        return 2**(n - 1)\n    return 2**(n - 1) * get_hexagonal_number_helper(n - 1, i + 1, j) - 2**(n - 1) * get_hexagonal_number_helper(n - 1, i, j - 1)\n\nif __name__ == \"__main__\":\n    print(get_hexagonal_number(2))\n    print(get_hexagonal_number(3))\n    print(get_hexagonal_number(4))\n    print(get_hexagonal_number(5))\n    print(get_hexagonal_number(6))\n    print(get_hexagonal_number(7))\n    print(get_hexagonal_number(8))\n    print(get_hexagonal_number(9))\n    print(get_hexagonal_number(10))\n    print(get_hexagonal_number(11))\n    print(get_hexagonal_number(12))\n    print(get_hexagonal_number(13))\n    print(get_hexagonal_number(14))\n    print(get_hexagonal_number(15))\n    print(get_hexagonal_number(16))\n    print(get_hexagonal_number(17))\n    print(get_hexagonal_number(18))\n    print(get_hexagonal_number(19))\n    print(get_hexagonal_number(20))\n    print(get_hexagonal_number(21))\n    print(get_hexagonal_number(22))\n    print(get_hexagonal_number(23))\n    print(get_hexagonal_number(24))\n    print(get_hexagonal"
    },
    {
      "rank": 95,
      "score": 2.7935616785263604,
      "candidate": "def find_hexagonal(n):\n    print(hex_number(n))\n\n\ndef hex_number(n):\n    hex_num = [1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096, 8192, 16384, 32768, 65536, 131072, 262144, 524288, 1073741824, 1048576, 2097152, 536870912, 1099511627776049341824]\n    return hex_num[n]\n\n\nfind_hexagonal(6)"
    },
    {
      "rank": 96,
      "score": 2.7833849599020932,
      "candidate": "def hexagonal(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    return n * (n + 1) // 2\n\n\ndef main():\n    print(hexagonal(1))\n    print(hexagonal(2))\n    print(hexagonal(3))\n    print(hexagonal(4))\n    print(hexagonal(5))\n    print(hexagonal(6))\n    print(hexagonal(7))\n    print(hexagonal(8))\n    print(hexagonal(9))\n    print(hexagonal(10))\n    print(hexagonal(11))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 97,
      "score": 2.6758940414929846,
      "candidate": "def hexagonal(n):\n    if n < 0:\n        raise ValueError('N must be >= 0')\n\n    if n == 0:\n        return 1\n\n    if n == 1:\n        return 1\n\n    if n == 2:\n        return 1 + 2\n\n    if n == 3:\n        return 1 + 2 + 4\n\n    if n == 4:\n        return 1 + 2 + 4 + 8\n\n    if n == 5:\n        return 1 + 2 + 4 + 8 + 16\n\n    if n == 6:\n        return 1 + 2 + 4 + 8 + 16 + 32\n\n    if n == 7:\n        return 1 + 2 + 4 + 8 + 16 + 32 + 64\n\n    if n == 8:\n        return 1 + 2 + 4 + 8 + 16 + 32 + 64 + 128\n\n    if n == 9:\n        return 1 + 2 + 4 + 8 + 16 + 32 + 64 + 128 + 256\n\n    if n == 10:\n        return 1 + 2 + 4 + 8 + 16 + 32 + 64 + 128 + 256 + 512\n\n    if n == 11:\n        return 1 + 2 + 4 + 8 + 16 + 32 + 64 + 128 + 256 + 512 + 1024\n\n    if n == 12:\n        return 1 + 2 + 4 + 8 + 16 + 32 + 64 + 128 + 256 + 512 + 1024 + 2048\n\n    if n == 13:\n        return 1 + 2 + 4 + 8 + 16 + 32 + 64 + 128 + 256 + 512 + 1024 + 2048 + 4096\n\n    if n == 14:\n        return 1 + 2 + 4 + 8 + 16 + 32 + 64 + 128 + 256 + 512 + 1024 + 2048 + 4096 + 8192\n\n    if n == 15:\n        return 1 + 2 + 4 + 8 + 16 + 32 + 64 + 128 + 256 + 512 + 1024 + 2048 + 4096 + 8192\n\n    if n == 16:\n        return 1 + 2 + 4 + 8 + 16 + 32 + 64 + 128 + 256 + 512 + 1024 + 2048 + 4096 + 8192\n\n    if n == 17:\n        return 1 + 2 + 4 + 8 + 16 + 32 + 64 + 128 + 256 + 512 + 1024 + 2048 + 4096 + 8192\n\n    if n == 18"
    },
    {
      "rank": 98,
      "score": 2.661532502734112,
      "candidate": "def hexagon(n):\n    c = [0, 1, 1, 1, 1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100]\n    hex_number = 0\n    while hex_number < n:\n        hex_number += c[hex_number % len(c)]\n    return hex_number\n\n\nif __name__ == '__main__':\n    n = int(input())\n    print(hexagon(n))"
    },
    {
      "rank": 99,
      "score": 2.5480628155727065,
      "candidate": "def get_hexagonal_number(n):\n    hexagonal_numbers = [0] * (n + 1)\n    hexagonal_numbers[0] = 1\n    hexagonal_numbers[1] = 1\n    hexagonal_numbers[2] = 4\n    hexagonal_numbers[3] = 8\n    hexagonal_numbers[4] = 16\n    hexagonal_numbers[5] = 32\n    hexagonal_numbers[6] = 64\n    hexagonal_numbers[7] = 128\n    hexagonal_numbers[8] = 256\n    hexagonal_numbers[9] = 512\n    hexagonal_numbers[10] = 1024\n    hexagonal_numbers[11] = 2048\n    hexagonal_numbers[12] = 4096\n    hexagonal_numbers[13] = 8192\n    hexagonal_numbers[14] = 16384\n    hexagonal_numbers[15] = 32768\n    hexagonal_numbers[16] = 65536\n    hexagonal_numbers[17] = 131072\n    hexagonal_numbers[18] = 262144\n    hexagonal_numbers[19] = 524288\n    hexagonal_numbers[20] = 1048576\n    hexagonal_numbers[21] = 2097152\n    hexagonal_numbers[22] = 4194304\n    hexagonal_numbers[23] = 8388608\n    hexagonal_numbers[24] = 2097152\n    hexagonal_numbers[25] = 4194304\n    hexagonal_numbers[26] = 8388608\n    hexagonal_numbers[27] = 2097152\n    hexagonal_numbers[28] = 1048576\n    hexagonal_numbers[29] = 2097152\n    hexagonal_numbers[30] = 4194304\n    hexagonal_numbers[31] = 8388608\n    hexagonal_numbers[32] = 2097152\n    hexagonal_numbers[33] = 4194304\n    hexagonal_numbers[34] = 8388608\n    hexagonal_numbers[35] = 2097152"
    },
    {
      "rank": 100,
      "score": 2.526872963082423,
      "candidate": "import unittest\n\n\ndef hex_center(n):\n    return hex_center_helper(n, 0, n - 1)\n\n\ndef hex_center_helper(n, i, j):\n    if i == j:\n        return n\n    if i == 0:\n        return hex_center_helper(n, i + 1, j)\n    if j == 0:\n        return hex_center_helper(n, i, j + 1)\n    if i + j == n:\n        return hex_center_helper(n, i + 1, j + 1)\n    return hex_center_helper(n, i + 1, j) + hex_center_helper(n, i, j + 1)\n\n\nclass Test(unittest.TestCase):\n    def test_case_1(self):\n        result = hex_center(3)\n        self.assertEqual(result, 4)\n\n    def test_case_2(self):\n        result = hex_center(5)\n        self.assertEqual(result, 7)\n\n    def test_case_3(self):\n        result = hex_center(10)\n        self.assertEqual(result, 12)\n\n    def test_case_4(self):\n        result = hex_center(15)\n        self.assertEqual(result, 19)\n\n    def test_case_5(self):\n        result = hex_center(20)\n        self.assertEqual(result, 22)\n\n    def test_case_6(self):\n        result = hex_center(25)\n        self.assertEqual(result, 34)\n\n    def test_case_7(self):\n        result = hex_center(30)\n        self.assertEqual(result, 35)\n\n    def test_case_8(self):\n        result = hex_center(40)\n        self.assertEqual(result, 42)\n\n    def test_case_9(self):\n        result = hex_center(50)\n        self.assertEqual(result, 50)\n\n    def test_case_10(self):\n        result = hex_center(60)\n        self.assertEqual(result, 60)"
    }
  ]
}