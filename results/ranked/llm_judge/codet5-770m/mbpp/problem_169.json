{
  "timestamp": "2025-09-14T13:42:34.284079",
  "method": "improved_llm_judge",
  "judge_model": "codellama/CodeLlama-7b-Python-hf",
  "target_model": "codet5-770m",
  "dataset": "mbpp",
  "problem_number": 169,
  "total_candidates": 100,
  "results": [
    {
      "rank": 1,
      "score": 10.0,
      "candidate": "import math\n\n\ndef distance(lat1, lon1, lat2, lon2):\n    lat1 = math.radians(lat1)\n    lat2 = math.radians(lat2)\n    lon1 = math.radians(lon1)\n    lon2 = math.radians(lon2)\n\n    dlon = lon2 - lon1\n    dlat = lat2 - lat1\n\n    a = math.sin(dlat / 2) ** 2 + math.cos(lat1) * math.cos(lat2) * math.sin(dlon / 2) ** 2\n    c = 2 * math.asin(math.sqrt(a))\n\n    return c * 6371000\n\n\nif __name__ == \"__main__\":\n    print(distance(40.5, -7.5, 40.5, -7.5))"
    },
    {
      "rank": 2,
      "score": 10.0,
      "candidate": "import math\n\n\ndef distance(lat1, lon1, lat2, lon2):\n    r = 6378137.0\n    lat1 = math.radians(lat1)\n    lat2 = math.radians(lat2)\n    dlon = lon2 - lon1\n    dlat = lat2 - lat1\n    a = math.sin(dlat / 2) ** 2 + math.cos(lat1) * math.cos(lat2) * math.sin(dlon / 2) ** 2\n    c = 2 * math.atan2(math.sqrt(a), math.sqrt(1 - a))\n    d = r * c\n    return d\n\n\ndef main():\n    print(distance(38, -74, -74, -74))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 3,
      "score": 10.0,
      "candidate": "def distance(lat1, lon1, lat2, lon2):\n    # Your code here\n    lat1 = float(lat1)\n    lon1 = float(lon1)\n    lat2 = float(lat2)\n    lon2 = float(lon2)\n    lat_rad = lat2 - lat1\n    lon_rad = lon2 - lon1\n    lat_rad = lat_rad * 180 / 3.14159265358979323846\n    lon_rad = lon_rad * 180 / 3.14159265358979323846\n    dist = 6371 * (lat_rad * lat_rad + lon_rad * lon_rad)\n    return dist\n\n\nlat1 = float(input(\"Enter latitude of first point: \"))\nlon1 = float(input(\"Enter longitude of first point: \"))\nlat2 = float(input(\"Enter latitude of second point: \"))\nlon2 = float(input(\"Enter longitude of second point: \"))\nprint(distance(lat1, lon1, lat2, lon2))"
    },
    {
      "rank": 4,
      "score": 10.0,
      "candidate": "def get_distance(lat1, lon1, lat2, lon2):\n    # your code here\n    return 0"
    },
    {
      "rank": 5,
      "score": 10.0,
      "candidate": "def distance(lat1, lon1, lat2, lon2):\n    # Your code here\n    d = 6371  # radius of earth in km\n    a = math.radians(lat2 - lat1)\n    b = math.radians(lon2 - lon1)\n    c = math.atan2(math.sqrt(math.pow(math.sin(a / 2), 2) + math.pow(math.sin(b / 2), 2)), math.sqrt(math.pow(math.cos(a / 2), 2) * math.cos(b / 2) * math.sin(c / 2)))\n    return d * c\n\n\nlat1 = float(input(\"Enter latitude: \"))\nlon1 = float(input(\"Enter longitude: \"))\nlat2 = float(input(\"Enter latitude: \"))\nlon2 = float(input(\"Enter longitude: \"))\nprint(\"Distance: \", distance(lat1, lon1, lat2, lon2))"
    },
    {
      "rank": 6,
      "score": 10.0,
      "candidate": "import math\n\n\ndef distance(lat1, lon1, lat2, lon2):\n    lat1 = math.radians(lat1)\n    lat2 = math.radians(lat2)\n    lon1 = math.radians(lon1)\n    lon2 = math.radians(lon2)\n\n    dlon = lon2 - lon1\n    dlat = lat2 - lat1\n\n    a = math.sin(dlat / 2) ** 2 + math.cos(lat1) * math.cos(lat2) * math.sin(dlon / 2) ** 2\n    c = 2 * math.atan2(math.sqrt(a), math.sqrt(1 - a))\n\n    return 6371 * c\n\n\nlat1 = int(input())\nlon1 = int(input())\nlat2 = int(input())\nlon2 = int(input())\n\nprint(distance(lat1, lon1, lat2, lon2))"
    },
    {
      "rank": 7,
      "score": 10.0,
      "candidate": "import math\n\n\ndef distance(lat1, lng1, lat2, lng2):\n    lat1 = float(lat1)\n    lng1 = float(lng1)\n    lat2 = float(lat2)\n    lng2 = float(lng2)\n    if lat1 < lat2:\n        lat1, lat2 = lat2, lat1\n    if lng1 < lng2:\n        lng1, lng2 = lng2, lng1\n\n    return math.sqrt((lng2 - lng1)**2 + (lat2 - lat1)**2)\n\n\nif __name__ == '__main__':\n    print(distance(32.5, -97.2, 32.5, -97.2))"
    },
    {
      "rank": 8,
      "score": 10.0,
      "candidate": "def distance(lat1, lon1, lat2, lon2):\n    lon1, lat1, lon2, lat2 = map(radians, [lon1, lat1, lon2, lat2])\n    dlon = lon2 - lon1\n    dlat = lat2 - lat1\n    a = sin(dlat/2)**2 + cos(lat1) * cos(lat2) * sin(dlon/2)**2\n    c = 2 * asin(sqrt(a))\n    r = 6371 # Radius of earth in kilometers. Use 3956 for miles\n    return c * r\n\nprint(distance(40, -100, 40, -100))"
    },
    {
      "rank": 9,
      "score": 10.0,
      "candidate": "def distance(lat1, lon1, lat2, lon2):\n    # write your code here\n    r = 6371 # Radius of earth in kilometers\n    lat1 = radians(lat1)\n    lon1 = radians(lon1)\n    lat2 = radians(lat2)\n    lon2 = radians(lon2)\n    dlon = lon2 - lon1\n    dlat = lat2 - lat1\n    a = sin(dlat/2)**2 + cos(lat1) * cos(lat2) * sin(dlon/2)**2\n    c = 2 * asin(sqrt(a))\n    d = r * c\n    return d\n\nlat1 = float(input(\"Enter latitude: \"))\nlon1 = float(input(\"Enter longitude: \"))\nlat2 = float(input(\"Enter latitude: \"))\nlon2 = float(input(\"Enter longitude: \"))\nprint(\"Distance in Kilometers is: \", distance(lat1, lon1, lat2, lon2))"
    },
    {
      "rank": 10,
      "score": 10.0,
      "candidate": "def distance(lat1, lon1, lat2, lon2):\n    r = 6371 # Radius of Earth in km\n    a = 6378137 # Radius of earth in m\n    lat1 = radians(lat1)\n    lat2 = radians(lat2)\n    lon1 = radians(lon1)\n    lon2 = radians(lon2)\n    dlon = lon2 - lon1\n    dlat = lat2 - lat1\n    a = sin(dlat/2)**2 + cos(lat1) * cos(lat2) * sin(dlon/2)**2\n    c = 2 * asin(sqrt(a))\n    r = 6371 # Radius of Earth in km\n    return c * r"
    },
    {
      "rank": 11,
      "score": 10.0,
      "candidate": "def distance(lat1, lon1, lat2, lon2):\n    lat1 = float(lat1)\n    lon1 = float(lon1)\n    lat2 = float(lat2)\n    lon2 = float(lon2)\n    lat_rad = lat2 - lat1\n    lon_rad = lon2 - lon1\n    lat_rad = lat_rad / 3600\n    lon_rad = lon_rad / 3600\n    distance = 6371 * lat_rad * lon_rad\n    return distance\n\nif __name__ == '__main__':\n    print(distance(45.9248, -71.9083, 45.9248, -71.9083))"
    },
    {
      "rank": 12,
      "score": 10.0,
      "candidate": "def distance(lat1, lon1, lat2, lon2):\n    # your code here\n    d = (360 * (lat2 - lat1) * (lon2 - lon1)) / 2\n    return d\n\n\nprint(distance(45, -40, 52, -54))"
    },
    {
      "rank": 13,
      "score": 10.0,
      "candidate": "import math\n\n\ndef distance(lat1, lng1, lat2, lng2):\n    return math.sqrt((lat1 - lat2)**2 + (lng1 - lng2)**2)\n\n\nif __name__ == '__main__':\n    lat1 = float(input(\"Latitude: \"))\n    lng1 = float(input(\"Longitude: \"))\n    lat2 = float(input(\"Latitude: \"))\n    lng2 = float(input(\"Longitude: \"))\n\n    print(distance(lat1, lng1, lat2, lng2))"
    },
    {
      "rank": 14,
      "score": 10.0,
      "candidate": "import math\n\n\ndef distance(lat1, lon1, lat2, lon2):\n    \"\"\"\n    :param lat1:\n    :param lon1:\n    :param lat2:\n    :param lon2:\n    :return:\n    \"\"\"\n    # Your code here\n    dlat = lat2 - lat1\n    dlon = lon2 - lon1\n    a = math.sin(dlat / 2) ** 2 + math.cos(lat1) * math.cos(lat2) * math.sin(dlon / 2) ** 2\n    c = 2 * math.asin(math.sqrt(a))\n    r = 6371\n    return c * r\n\n\nif __name__ == \"__main__\":\n    lat1 = 50.42\n    lon1 = -73.14\n    lat2 = 50.41\n    lon2 = -73.14\n    print(distance(lat1, lon1, lat2, lon2))"
    },
    {
      "rank": 15,
      "score": 10.0,
      "candidate": "def distance(lat1, lon1, lat2, lon2):\n    if lat1 == lat2:\n        return 0\n    d = (lat2-lat1)**2 + (lon2-lon1)**2\n    return math.sqrt(d)"
    },
    {
      "rank": 16,
      "score": 10.0,
      "candidate": "def distance(lat1, lon1, lat2, lon2):\n    if lat1 > lat2:\n        lat1, lat2 = lat2, lat1\n    if lon1 > lon2:\n        lon1, lon2 = lon2, lon1\n\n    dlon = lon2 - lon1\n    dlat = lat2 - lat1\n\n    a = sin(dlat/2)**2 + cos(lat1) * cos(lat2) * sin(dlon/2)**2\n    c = 2 * asin(sqrt(a))\n\n    return c * 3956\n\n\nprint(distance(51.463, 4.529, 51.818, 4.518))"
    },
    {
      "rank": 17,
      "score": 10.0,
      "candidate": "import math\n\n\ndef distance(p1, p2):\n    lat1 = p1[0]\n    lon1 = p1[1]\n    lat2 = p2[0]\n    lon2 = p2[1]\n\n    dlat = math.radians(lat2 - lat1)\n    dlon = math.radians(lon2 - lon1)\n\n    a = math.sin(dlat / 2) ** 2 + math.cos(lat1) * math.cos(lat2) * math.sin(dlon / 2) ** 2\n    c = 2 * math.atan2(math.sqrt(a), math.sqrt(1 - a))\n    d = 6378137.0\n    return c * d\n\n\nif __name__ == '__main__':\n    print(distance((30.0, -95.0), (40.0, 50.0)))"
    },
    {
      "rank": 18,
      "score": 10.0,
      "candidate": "from math import sqrt\n\ndef distance(lat1, long1, lat2, long2):\n    lat1, long1 = float(lat1), float(long1)\n    lat2, long2 = float(lat2), float(long2)\n    r = 6371\n\n    lat1 = radians(lat1)\n    lat2 = radians(lat2)\n    long1 = radians(long1)\n    long2 = radians(long2)\n\n    dlon = long2 - long1\n    dlat = lat2 - lat1\n    a = sin(dlat / 2)**2 + cos(lat1) * cos(lat2) * sin(dlon / 2)**2\n    c = 2 * asin(sqrt(a))\n\n    d = r * c\n    return d\n\nprint(distance(34.654, -78.45, 34.654, -78.45))"
    },
    {
      "rank": 19,
      "score": 10.0,
      "candidate": "def distance(lat1, long1, lat2, long2):\n    dist = 6371 # miles\n    a = (lat2 - lat1) * (lat2 - lat1)\n    b = (long2 - long1) * (long2 - long1)\n    c = 2 * (a * a + b * b)\n    d = dist * c / 1000\n    return d\n\nprint(distance(40, -75, 48, -81))"
    },
    {
      "rank": 20,
      "score": 10.0,
      "candidate": "import math\n\n\ndef calculate_distance(lat1, long1, lat2, long2):\n    # your code here\n    lat1 = float(lat1)\n    long1 = float(long1)\n    lat2 = float(lat2)\n    long2 = float(long2)\n    d = math.sqrt(math.pow((lat2 - lat1), 2) + math.pow((long2 - long1), 2))\n    return d\n\n\nprint(calculate_distance(38.5, -97.8, 38.5, -97.8))"
    },
    {
      "rank": 21,
      "score": 10.0,
      "candidate": "def distance(lat1, lon1, lat2, lon2):\n    # your code here\n    r = 6373\n    lat1 = radians(lat1)\n    lat2 = radians(lat2)\n    lon1 = radians(lon1)\n    lon2 = radians(lon2)\n    a = sin(lat2 - lat1)**2 + cos(lat1) * cos(lat2) * sin(lon2 - lon1)**2\n    c = 2 * asin(sqrt(a))\n    d = r * c\n    return d\n\n\nlat1 = float(input(\"Enter latitude: \"))\nlon1 = float(input(\"Enter longitude: \"))\nlat2 = float(input(\"Enter latitude: \"))\nlon2 = float(input(\"Enter longitude: \"))\nprint(\"The distance between {} and {} is {:.2f} km\".format(lat1, lat2, distance(lat1, lon1, lat2, lon2)))"
    },
    {
      "rank": 22,
      "score": 10.0,
      "candidate": "def distance(p1, p2):\n    lat1 = float(p1[0])\n    lon1 = float(p1[1])\n    lat2 = float(p2[0])\n    lon2 = float(p2[1])\n\n    radius = 6371  # km\n    d = (lat2 - lat1) * (lat2 - lat1) + (lon2 - lon1) * (lon2 - lon1)\n\n    return d * radius\n\n\nif __name__ == '__main__':\n    print(distance((41.238267, -76.284864), (41.238267, -76.284864)))\n    print(distance((41.238267, -76.284864), (41.238267, -76.284864)))\n    print(distance((41.238267, -76.284864), (41.238267, -76.284864)))\n    print(distance((41.238267, -76.284864), (41.238267, -76.284864)))\n    print(distance((41.238267, -76.284864), (41.238267, -76.284864)))\n    print(distance((41.238267, -76.284864), (41.238267, -76.284864)))\n    print(distance((41.238267, -76.284864), (41.238267, -76.284864)))"
    },
    {
      "rank": 23,
      "score": 10.0,
      "candidate": "import math\n\n\ndef distance(lat1, lon1, lat2, lon2):\n    dlat = math.radians(lat2 - lat1)\n    dlon = math.radians(lon2 - lon1)\n    a = math.sin(dlat / 2) ** 2 + math.cos(math.radians(lat1)) \\\n        * math.cos(math.radians(lat2)) * math.sin(dlon / 2) ** 2\n    c = 2 * math.atan2(math.sqrt(a), math.sqrt(1 - a))\n    r = 6371\n    return r * c\n\n\nif __name__ == '__main__':\n    print(distance(38.9869, -77.898, 38.9869, -77.898))"
    },
    {
      "rank": 24,
      "score": 10.0,
      "candidate": "def calculate_distance(lat1, lon1, lat2, lon2):\n    lat1 = float(lat1)\n    lat2 = float(lat2)\n    lon1 = float(lon1)\n    lon2 = float(lon2)\n    r = 6371\n\n    dlat = lat2 - lat1\n    dlon = lon2 - lon1\n\n    a = math.sin(dlat / 2) ** 2 + math.cos(lat1) * math.cos(lat2) * math.sin(dlon / 2) ** 2\n    c = 2 * math.atan2(math.sqrt(a), math.sqrt(1 - a))\n\n    return r * c"
    },
    {
      "rank": 25,
      "score": 10.0,
      "candidate": "import math\n\ndef calculate_distance(lat1, lat2, long1, long2):\n    lat1 = math.radians(lat1)\n    lat2 = math.radians(lat2)\n    long1 = math.radians(long1)\n    long2 = math.radians(long2)\n\n    dlon = long2 - long1\n    dlat = lat2 - lat1\n\n    a = math.sin(dlat / 2) ** 2 + math.cos(lat1) * math.cos(lat2) * math.sin(dlon / 2) ** 2\n    c = 2 * math.atan2(math.sqrt(a), math.sqrt(1 - a))\n\n    return 6378137.0 * c\n\n\nif __name__ == \"__main__\":\n    print(calculate_distance(41.4, -73.8, -87.6, -76.5))"
    },
    {
      "rank": 26,
      "score": 10.0,
      "candidate": "def distance(lat1, lng1, lat2, lng2):\n    r = 6371\n    dlat = lat2 - lat1\n    dlon = lng2 - lng1\n    a = math.sin(dlat/2)**2 + math.cos(lat1) * math.cos(lat2) * math.sin(dlon/2)**2\n    c = 2 * math.atan2(math.sqrt(a), math.sqrt(1-a))\n    return r * c\n\nprint(distance(40.8379, -73.9247, 40.8379, -73.9247))"
    },
    {
      "rank": 27,
      "score": 10.0,
      "candidate": "def distance(latitude, longitude):\n    # your code here\n    return 0\n\n\nprint(distance(37.9, -122.9))"
    },
    {
      "rank": 28,
      "score": 10.0,
      "candidate": "def calculate_distance(lat1, lon1, lat2, lon2):\n    if lat1 == lat2 or lon1 == lon2:\n        return 0\n    else:\n        d = 6371\n        lat_diff = abs(lat1 - lat2)\n        lon_diff = abs(lon1 - lon2)\n        return d * lat_diff / (2 * lat_diff + lon_diff)\n\n\nif __name__ == '__main__':\n    print(calculate_distance(40.823, -77.989, 40.823, -77.989))"
    },
    {
      "rank": 29,
      "score": 10.0,
      "candidate": "def distance(lat1, long1, lat2, long2):\n    r = 6371\n    lat1 = float(lat1)\n    long1 = float(long1)\n    lat2 = float(lat2)\n    long2 = float(long2)\n    lat_diff = lat2 - lat1\n    long_diff = long2 - long1\n    a = lat_diff * lat_diff\n    c = 2 * lat_diff * long_diff\n    d = r * c\n    return d\n\nprint(distance(45, -122, 48.6, -73.8))"
    },
    {
      "rank": 30,
      "score": 10.0,
      "candidate": "def distance(lat1, lng1, lat2, lng2):\n    if lat1 == lat2:\n        return 0\n\n    dlat = lat2 - lat1\n    dlon = lng2 - lng1\n\n    a = 6378137\n    b = 6356752.3142\n\n    c = 2 * a * dlat / (b * dlat)\n    d = 2 * a * dlon / (b * dlon)\n\n    return c * 1000\n\n\nif __name__ == \"__main__\":\n    lat1 = float(input(\"Enter latitude: \"))\n    lng1 = float(input(\"Enter longitude: \"))\n    lat2 = float(input(\"Enter latitude: \"))\n    lng2 = float(input(\"Enter longitude: \"))\n\n    print(distance(lat1, lng1, lat2, lng2))"
    },
    {
      "rank": 31,
      "score": 10.0,
      "candidate": "def distance(lat1, lng1, lat2, lng2):\n    r = 6378137\n    dlon = lng2 - lng1\n    dlat = lat2 - lat1\n    a = math.sin(dlat / 2) ** 2 + math.cos(lat1) * math.cos(lat2) * math.sin(dlon / 2) ** 2\n    c = 2 * math.atan2(math.sqrt(a), math.sqrt(1 - a))\n    return r * c"
    },
    {
      "rank": 32,
      "score": 10.0,
      "candidate": "def distance(lat1, lon1, lat2, lon2):\n    # Your code here\n    pass\n\n\ndef main():\n    lat1 = float(input(\"Enter latitude: \"))\n    lon1 = float(input(\"Enter longitude: \"))\n    lat2 = float(input(\"Enter latitude: \"))\n    lon2 = float(input(\"Enter longitude: \"))\n    print(distance(lat1, lon1, lat2, lon2))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 33,
      "score": 9.0,
      "candidate": "import math\n\n\ndef distance(lat1, lon1, lat2, lon2):\n    # calculate the euclidean distance between two points\n    # lat1, lon1, lat2, lon2 = float(lat1), float(lon1), float(lat2), float(lon2)\n    return math.sqrt((lat1 - lat2)**2 + (lon1 - lon2)**2)\n\n\nif __name__ == \"__main__\":\n    print(distance(52.4, 7.5, 53.2, 7.5))"
    },
    {
      "rank": 34,
      "score": 8.0,
      "candidate": "import math\n\ndef distance(lat1, lon1, lat2, lon2):\n    # Converting to radians\n    lat1 = math.radians(lat1)\n    lat2 = math.radians(lat2)\n    lon1 = math.radians(lon1)\n    lon2 = math.radians(lon2)\n\n    # Calculating the Euclidean distance between two points\n    dlon = lon2 - lon1\n    dlat = lat2 - lat1\n    a = math.sin(dlat / 2) ** 2 + math.cos(lat1) * math.cos(lat2) * math.sin(dlon / 2) ** 2\n    c = 2 * math.asin(math.sqrt(a))\n    r = 6371  # Radius of earth in kilometers. Use 6371 as a default.\n    return c * r\n\n\nif __name__ == \"__main__\":\n    print(distance(40.5, -73.2, 40.5, -73.2))\n    print(distance(40.5, -73.2, 40.5, -73.2))\n    print(distance(40.5, -73.2, 40.5, -73.2))\n    print(distance(40.5, -73.2, 40.5, -73.2))\n    print(distance(40.5, -73.2, 40.5, -73.2))"
    },
    {
      "rank": 35,
      "score": 8.0,
      "candidate": "def distance(lat1, lon1, lat2, lon2):\n    # Your code here\n    r = 6371\n    lat1 = float(lat1)\n    lat2 = float(lat2)\n    lon1 = float(lon1)\n    lon2 = float(lon2)\n\n    dLat = lat2 - lat1\n    dLon = lon2 - lon1\n\n    a = math.sin(dLat/2)**2 + math.cos(lat1) * math.cos(lat2) * math.sin(dLon/2)**2\n\n    return 2 * math.asin(math.sqrt(a)) * r\n\n\nif __name__ == '__main__':\n    print(distance(45, -105, 40, -65))"
    },
    {
      "rank": 36,
      "score": 8.0,
      "candidate": "import math\n\ndef distance(lat1, lon1, lat2, lon2):\n    dlat = math.radians(lat2-lat1)\n    dlon = math.radians(lon2-lon1)\n    a = math.sin(dlat/2)**2 + math.cos(math.radians(lat1)) * math.cos(math.radians(lat2)) * math.sin(dlon/2)**2\n    c = 2 * math.atan2(math.sqrt(a), math.sqrt(1-a))\n    return 6371 * c\n\n\ndef test():\n    assert distance(52.6, 13.7, 54.4, 57.6) == 289.5\n    assert distance(52.6, 13.7, 54.4, 55.5) == 289.5\n    assert distance(52.6, 13.7, 54.4, 56.5) == 289.5\n    assert distance(52.6, 13.7, 54.4, 57.5) == 289.5\n    assert distance(52.6, 13.7, 54.4, 58.5) == 289.5\n    assert distance(52.6, 13.7, 54.4, 59.5) == 289.5\n    assert distance(52.6, 13.7, 54.4, 60.5) == 289.5\n    assert distance(52.6, 13.7, 54.4, 61.5) == 289.5\n    assert distance(52.6, 13.7, 54.4, 62.5) == 289.5\n    assert distance(52.6, 13.7, 54.4, 63.5) == 289.5\n    assert distance(52.6, 13.7, 54.4, 64.5) == 289.5\n    assert distance(52.6, 13.7, 54.4, 65.5) == 289.5\n    assert distance(52.6, 13.7, 54.4, 66.5) == 289.5\n    assert distance(52.6, 13.7, 54.4, 67.5) == 289.5"
    },
    {
      "rank": 37,
      "score": 8.0,
      "candidate": "import math\n\ndef distance(p1, p2):\n    lat1 = math.radians(p1.latitude)\n    lon1 = math.radians(p1.longitude)\n    lat2 = math.radians(p2.latitude)\n    lon2 = math.radians(p2.longitude)\n\n    a = math.sin(lat2-lat1)**2 + math.cos(lat1)*math.cos(lat2)*math.sin(lon2-lon1)**2\n    c = 2 * math.atan2(math.sqrt(a), math.sqrt(1-a))\n\n    return c * 6371\n\n\n\nprint(distance(40.3, -73.4))"
    },
    {
      "rank": 38,
      "score": 8.0,
      "candidate": "def distance(lat1, lon1, lat2, lon2):\n    # Your code here\n    r = 6371\n    lat1 = radians(lat1)\n    lat2 = radians(lat2)\n    lon1 = radians(lon1)\n    lon2 = radians(lon2)\n    dlon = lon2 - lon1\n    dlat = lat2 - lat1\n    a = sin(dlat / 2) ** 2 + cos(lat1) * cos(lat2) * sin(dlon / 2) ** 2\n    c = 2 * asin(sqrt(a))\n    d = r * c\n    return d\n\n\nif __name__ == \"__main__\":\n    lat1 = input(\"Enter latitude: \")\n    lon1 = input(\"Enter longitude: \")\n    lat2 = input(\"Enter latitude: \")\n    lon2 = input(\"Enter longitude: \")\n    print(distance(lat1, lon1, lat2, lon2))"
    },
    {
      "rank": 39,
      "score": 8.0,
      "candidate": "def distance(lat1, long1, lat2, long2):\n    return ((lat1 - lat2) ** 2 + (long1 - long2) ** 2) ** 0.5\n\n\nprint(distance(38, -73, 34, -75))"
    },
    {
      "rank": 40,
      "score": 8.0,
      "candidate": "import math\n\n\ndef distance(lat1, lng1, lat2, lng2):\n    # calculate the distance between two points using latitude and longitude\n    d = 6371  # radius of earth in km\n    lat1 = math.radians(lat1)\n    lat2 = math.radians(lat2)\n    dlon = lng2 - lng1\n    a = math.sin(lat1) * math.sin(lat2) + math.cos(lat1) * math.cos(lat2) * math.sin(dlon) * math.sin(dlon)\n    c = 2 * math.atan2(math.sqrt(a), math.sqrt(1 - a))\n    return d * c\n\n\nlat1 = float(input(\"Enter latitude: \"))\nlng1 = float(input(\"Enter longitude: \"))\nlat2 = float(input(\"Enter latitude: \"))\nlng2 = float(input(\"Enter longitude: \"))\n\nprint(\"Distance between the two points is\", distance(lat1, lng1, lat2, lng2))"
    },
    {
      "rank": 41,
      "score": 8.0,
      "candidate": "def calculate_distance(lat1, lon1, lat2, lon2):\n    # your code here\n    r = 6371 # Radius of Earth in kilometers.\n    dlon = lon2 - lon1\n    dlat = lat2 - lat1\n    a = math.sin(dlat/2)**2 + math.cos(lat1) * math.cos(lat2) * math.sin(dlon/2)**2\n    c = 2 * math.atan2(math.sqrt(a), math.sqrt(1-a))\n    d = r * c\n    return d\n\nlat1 = float(input(\"Enter latitude: \"))\nlon1 = float(input(\"Enter longitude: \"))\nlat2 = float(input(\"Enter latitude: \"))\nlon2 = float(input(\"Enter longitude: \"))\nprint(\"The distance between two points is: \" + str(calculate_distance(lat1, lon1, lat2, lon2)))"
    },
    {
      "rank": 42,
      "score": 8.0,
      "candidate": "def calculate_distance(lat1, lon1, lat2, lon2):\n    # Your code here\n    d = 6371\n    a = (lat2-lat1) * (lon2-lon1)\n    b = 2 * math.atan2(math.sqrt(a), math.sqrt(1-a))\n    return d * b\n\n\nlat1 = float(input(\"Enter latitude: \"))\nlon1 = float(input(\"Enter longitude: \"))\nlat2 = float(input(\"Enter latitude: \"))\nlon2 = float(input(\"Enter longitude: \"))\n\nprint(calculate_distance(lat1, lon1, lat2, lon2))"
    },
    {
      "rank": 43,
      "score": 8.0,
      "candidate": "def distance(lat1, lon1, lat2, lon2):\n    lon1, lat1, lon2, lat2 = map(radians, [lon1, lat1, lon2, lat2])\n\n    dlon = lon2 - lon1\n    dlat = lat2 - lat1\n    a = sin(dlat / 2) ** 2 + cos(lat1) * cos(lat2) * sin(dlon / 2) ** 2\n    c = 2 * asin(sqrt(a))\n    r = 6371  # Radius of earth in kilometers. Use 3956 for miles\n    return c * r\n\n\ndef main():\n    print(distance(float(input('latitude: ')), float(input('longitude: ')),\n                  float(input('latitude: ')), float(input('longitude: '))))\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 44,
      "score": 8.0,
      "candidate": "import math\n\n\ndef distance(p1, p2):\n    return math.sqrt((p1[0] - p2[0]) ** 2 + (p1[1] - p2[1]) ** 2)\n\n\nprint(distance((0, 0), (0, 0)))"
    },
    {
      "rank": 45,
      "score": 8.0,
      "candidate": "def distance(latitude1, longitude1, latitude2, longitude2):\n    lat1 = float(latitude1)\n    lat2 = float(latitude2)\n    long1 = float(longitude1)\n    long2 = float(longitude2)\n    if lat1 == lat2:\n        return 0\n    if long1 == long2:\n        return 360\n    if lat1 > lat2:\n        return 360 - (360 - long1) * (lat1 - lat2) / (long1 - long2)\n    return 360 - (360 - long1) * (lat2 - lat1) / (long2 - long1)\n\n\nprint(distance(40.4, -73.6))"
    },
    {
      "rank": 46,
      "score": 8.0,
      "candidate": "import math\n\ndef distance(lat1, lon1, lat2, lon2):\n\n    # convert the latitude and longitude to radians\n    lat1 = math.radians(lat1)\n    lon1 = math.radians(lon1)\n    lat2 = math.radians(lat2)\n    lon2 = math.radians(lon2)\n\n    # calculate the distance between the two points\n    dlon = lon2 - lon1\n    dlat = lat2 - lat1\n    a = math.sin(dlat/2)**2 + math.cos(lat1) * math.cos(lat2) * math.sin(dlon/2)**2\n    c = 2 * math.atan2(math.sqrt(a), math.sqrt(1-a))\n\n    # return the distance in km\n    return 6371 * c\n\n\nprint(distance(45, -73, 45, -73))"
    },
    {
      "rank": 47,
      "score": 8.0,
      "candidate": "def distance(lat1, lon1, lat2, lon2):\n    r = 6371  # Radius of earth in kilometers. Use 3956 for miles.\n    lat1 = float(lat1)\n    lon1 = float(lon1)\n    lat2 = float(lat2)\n    lon2 = float(lon2)\n    d = 2 * r * math.asin(math.sqrt(math.sin((lat2 - lat1) / 2) ** 2 + math.cos(lat1) * math.cos(lat2) * math.sin((lon2 - lon1) / 2) ** 2))\n    return d"
    },
    {
      "rank": 48,
      "score": 8.0,
      "candidate": "def distance(lat1, long1, lat2, long2):\n    return 6371 * (pow(math.sin((lat1 - lat2) / 2), 2) + math.cos(lat1) * math.cos(lat2) * pow(math.sin((long1 - long2) / 2), 2))\n\nprint(distance(45, -75, 42, -81))"
    },
    {
      "rank": 49,
      "score": 8.0,
      "candidate": "def distance(p1, p2):\n    return math.sqrt((p1.latitude - p2.latitude) ** 2 + (p1.longitude - p2.longitude) ** 2)"
    },
    {
      "rank": 50,
      "score": 8.0,
      "candidate": "import math\n\ndef distance(lat1, lng1, lat2, lng2):\n    lat1 = math.radians(lat1)\n    lng1 = math.radians(lng1)\n    lat2 = math.radians(lat2)\n    lng2 = math.radians(lng2)\n\n    dlon = lng2 - lng1\n    dlat = lat2 - lat1\n\n    a = math.sin(dlat/2)**2 + math.cos(lat1) * math.cos(lat2) * math.sin(dlon/2)**2\n\n    c = 2 * math.atan2(math.sqrt(a), math.sqrt(1-a))\n\n    return 6371 * c\n\nprint(distance(30, -75, -50, 50))"
    },
    {
      "rank": 51,
      "score": 8.0,
      "candidate": "def distance(lat1, lon1, lat2, lon2):\n    lat1 = float(lat1)\n    lon1 = float(lon1)\n    lat2 = float(lat2)\n    lon2 = float(lon2)\n    d = 6371 # earth radius\n    a = (lat1-lat2)**2 + (lon1-lon2)**2\n    c = 2 * math.atan2(math.sqrt(a), math.sqrt(1-a))\n    d = d * c\n    return d\n\n\n\n\nlat1 = input('Enter latitude: ')\nlon1 = input('Enter longitude: ')\nlat2 = input('Enter latitude: ')\nlon2 = input('Enter longitude: ')\n\nprint(distance(lat1, lon1, lat2, lon2))"
    },
    {
      "rank": 52,
      "score": 8.0,
      "candidate": "def get_distance(lat1, long1, lat2, long2):\n    return 6371 * (math.sin(math.radians(lat1 - lat2))) + 6371 * (math.sin(math.radians(lat1))) * math.cos(math.radians(lat2)) * math.cos(math.radians(long1 - long2))"
    },
    {
      "rank": 53,
      "score": 8.0,
      "candidate": "def distance(lat1, lon1, lat2, lon2):\n    lat1 = float(lat1)\n    lon1 = float(lon1)\n    lat2 = float(lat2)\n    lon2 = float(lon2)\n    radius = 6371000\n    lat1 = lat1 * radius\n    lon1 = lon1 * radius\n    lat2 = lat2 * radius\n    lon2 = lon2 * radius\n    lat1 = math.radians(lat1)\n    lon1 = math.radians(lon1)\n    lat2 = math.radians(lat2)\n    lon2 = math.radians(lon2)\n    dlon = lon2 - lon1\n    dlat = lat2 - lat1\n    a = math.sin(dlat / 2) ** 2 + math.cos(lat1) * math.cos(lat2) * math.sin(dlon / 2) ** 2\n    c = 2 * math.asin(math.sqrt(a))\n    d = radius * c\n    return d\n\n\nif __name__ == \"__main__\":\n    print(distance(40, -100, -100, 40, -100))\n    print(distance(40, -100, -100, 40, -100))"
    },
    {
      "rank": 54,
      "score": 8.0,
      "candidate": "from math import sqrt\n\ndef distance(lat1, lon1, lat2, lon2):\n    # Your code here\n    return sqrt(pow((lat1-lat2),2)+pow((lon1-lon2),2))\n\n\nprint(distance(41.9, -74.0, 41.9, -74.0))"
    },
    {
      "rank": 55,
      "score": 8.0,
      "candidate": "def distance(lat1, lng1, lat2, lng2):\n    # Your code here\n    d = 6371\n    if lat1 == lat2 and lng1 == lng2:\n        return 0\n    if lat1 < lat2:\n        return d * math.sin((lat2 - lat1) / 2)\n    else:\n        return d * math.cos((lat2 - lat1) / 2)\n\n\nif __name__ == \"__main__\":\n    print(distance(52.0, 4.0, 51.0, 5.0))\n    print(distance(51.0, 4.0, 52.0, 5.0))\n    print(distance(52.0, 4.0, 52.0, 4.0))"
    },
    {
      "rank": 56,
      "score": 8.0,
      "candidate": "def distance(lat1, lon1, lat2, lon2):\n    d = 6378137.0\n    lat1 = float(lat1)\n    lat2 = float(lat2)\n    lon1 = float(lon1)\n    lon2 = float(lon2)\n\n    a = (d * (lat2 - lat1)) / (pow(2.0, 0.5))\n    b = (d * (lon2 - lon1)) / (pow(2.0, 0.5))\n\n    return a\n\n\nprint(distance(45.9, -75.1, 40.5, -77.6))"
    },
    {
      "rank": 57,
      "score": 8.0,
      "candidate": "def distance(lat1, lon1, lat2, lon2):\n    # Your code here\n    lat1 = float(lat1)\n    lon1 = float(lon1)\n    lat2 = float(lat2)\n    lon2 = float(lon2)\n    d = 6371  # Distance in km\n    lat1_rad = lat1 * math.pi / 180\n    lon1_rad = lon1 * math.pi / 180\n    lat2_rad = lat2 * math.pi / 180\n    lon2_rad = lon2 * math.pi / 180\n    a = math.sin(lat1_rad) * math.sin(lat2_rad) + math.cos(lat1_rad) * math.cos(lat2_rad) * math.sin(lon1_rad) * math.sin(lon2_rad)\n    c = 2 * math.atan2(math.sqrt(a), math.sqrt(1 - a))\n    return d * c\n\n\nif __name__ == \"__main__\":\n    print(distance(45, 30, -45, -30))"
    },
    {
      "rank": 58,
      "score": 8.0,
      "candidate": "def distance(p1,p2):\n    # Your code here\n    d = 0\n    # print(p1.latitude)\n    # print(p2.latitude)\n    # print(p1.longitude)\n    # print(p2.longitude)\n    # print(p1.distance(p2))\n    # print(p2.distance(p1))\n    d = math.sqrt((p1.latitude - p2.latitude) ** 2 + (p1.longitude - p2.longitude) ** 2)\n    return d\n\n\nif __name__ == '__main__':\n    p1 = float(input('Enter a latitude: '))\n    p2 = float(input('Enter a longitude: '))\n    print(distance(p1,p2))"
    },
    {
      "rank": 59,
      "score": 1.0,
      "candidate": "def distance(lat1, lon1, lat2, lon2):\n    # Your code here\n    lat1 = float(lat1)\n    lon1 = float(lon1)\n    lat2 = float(lat2)\n    lon2 = float(lon2)\n\n    r = 6371\n    lat_d = (lat2 - lat1)\n    lon_d = (lon2 - lon1)\n    d = (lat_d * lat_d) + (lon_d * lon_d)\n    return d * r\n\n\nif __name__ == '__main__':\n    print(distance(45, -75, 43, -79))"
    },
    {
      "rank": 60,
      "score": 1.0,
      "candidate": "def distance(lat1, lon1, lat2, lon2):\n    # your code here\n    lat1 = float(lat1)\n    lon1 = float(lon1)\n    lat2 = float(lat2)\n    lon2 = float(lon2)\n    d = 6371\n    lat_rad = lat2 - lat1\n    lon_rad = lon2 - lon1\n    lat_rad = lat_rad * math.pi / 180\n    lon_rad = lon_rad * math.pi / 180\n    return math.sqrt(lat_rad ** 2 + lon_rad ** 2) * d\n\n\nif __name__ == \"__main__\":\n    print(distance(40, -20, 0, 0))\n    print(distance(40, -20, 0, 1))\n    print(distance(40, -20, 1, 0))\n    print(distance(40, -20, 1, 1))\n    print(distance(40, -20, 2, 0))\n    print(distance(40, -20, 2, 1))\n    print(distance(40, -20, 2, 2))"
    },
    {
      "rank": 61,
      "score": 1.0,
      "candidate": "def distance(p1, p2):\n    lat1 = p1.get('latitude')\n    lon1 = p1.get('longitude')\n    lat2 = p2.get('latitude')\n    lon2 = p2.get('longitude')\n    return pow((pow(lat2 - lat1, 2) + pow(lon2 - lon1, 2)), 0.5)\n\n\nprint(distance(latitude=32.9, longitude=-75.1))"
    },
    {
      "rank": 62,
      "score": 1.0,
      "candidate": "def calculate_distance(lat1, long1, lat2, long2):\n    # Your code here\n    # Find the great circle distance between two points\n    # using the earth's radius\n    #\n    # The radius of the earth is 6371 km.\n    #\n    # lat1 = decimal degrees\n    # long1 = decimal degrees\n    # lat2 = decimal degrees\n    # long2 = decimal degrees\n    #\n    # return the great circle distance between two points\n    # using the earth's radius\n\n    R = 6371\n    dlat = lat2 - lat1\n    dlon = long2 - long1\n    a = math.sin(dlat / 2)**2 + math.cos(lat1) * math.cos(lat2) * math.sin(dlon / 2)**2\n    c = 2 * math.asin(math.sqrt(a))\n    return R * c"
    },
    {
      "rank": 63,
      "score": 1.0,
      "candidate": "def distance(lat1, lon1, lat2, lon2):\n    # Your code here\n    # (a) Convert the two points into floats.\n    lat1 = float(lat1)\n    lon1 = float(lon1)\n    lat2 = float(lat2)\n    lon2 = float(lon2)\n\n    # (b) Calculate the distance in miles.\n    d = 6371.0 * (lat2 - lat1) + 6371.0 * (lon2 - lon1)\n    return d\n\n\nprint(distance(40.833, -79.919, 40.833, -79.919))"
    },
    {
      "rank": 64,
      "score": 1.0,
      "candidate": "def distance(lat1, lon1, lat2, lon2):\n    # Your code here\n    d = 6371  # Radius of earth in kilometers. Use 3956 for miles\n    lat1 = float(lat1)\n    lon1 = float(lon1)\n    lat2 = float(lat2)\n    lon2 = float(lon2)\n    dlon = lon2 - lon1\n    dlat = lat2 - lat1\n    a = math.sqrt(d * d + dlon * dlon)\n    return d * a\n\n\nlat1 = float(input(\"Enter latitude: \"))\nlon1 = float(input(\"Enter longitude: \"))\nlat2 = float(input(\"Enter latitude: \"))\nlon2 = float(input(\"Enter longitude: \"))\n\nprint(distance(lat1, lon1, lat2, lon2))"
    },
    {
      "rank": 65,
      "score": 1.0,
      "candidate": "import math\n\n\ndef distance(lat1, lon1, lat2, lon2):\n    dlat = math.radians(lat2 - lat1)\n    dlon = math.radians(lon2 - lon1)\n    a = math.sin(dlat / 2)**2 + math.cos(math.radians(lat1)) \\\n        * math.cos(math.radians(lat2)) * math.sin(dlon / 2)**2\n    c = 2 * math.atan2(math.sqrt(a), math.sqrt(1 - a))\n    d = 6371 * c\n    return d\n\n\nif __name__ == '__main__':\n    assert distance(41.8637, -74.8773) == 6371\n    assert distance(41.8637, -74.8773, 41.8637, -74.8773) == 6371\n    assert distance(41.8637, -74.8773, 41.8637, -74.8773) == 6371\n    assert distance(41.8637, -74.8773, 41.8637, -74.8773) == 6371\n    assert distance(41.8637, -74.8773, 41.8637, -74.8773) == 6371\n    assert distance(41.8637, -74.8773, 41.8637, -74.8773) == 6371\n    assert distance(41.8637, -74.8773, 41.8637, -74.8773) == 6371\n    assert distance(41.8637, -74.8773, 41.8637, -74.8773) == 6371\n    assert distance(41.8637, -74.8773, 41.8637, -74.8773) == 6371\n    assert distance(41.8637, -74.8773, 41.8637, -74.8773) == 6371\n    assert distance(41.8637, -74"
    },
    {
      "rank": 66,
      "score": 1.0,
      "candidate": "def get_distance(lat1, lon1, lat2, lon2):\n    lat1, lon1 = float(lat1), float(lon1)\n    lat2, lon2 = float(lat2), float(lon2)\n    radius = 6371\n    lat_diff = lat2 - lat1\n    lon_diff = lon2 - lon1\n    a = lat_diff * lat_diff\n    b = lon_diff * lon_diff\n    c = 2 * a * b\n    distance = radius * c\n    return distance\n\n\nprint(get_distance(45, -100, 45, -100))"
    },
    {
      "rank": 67,
      "score": 1.0,
      "candidate": "def get_distance(lat1, long1, lat2, long2):\n    lat1 = float(lat1)\n    long1 = float(long1)\n    lat2 = float(lat2)\n    long2 = float(long2)\n    return 6371 * (pow(lat2 - lat1, 2) + pow(long2 - long1, 2))\n\nprint(get_distance(40.62667, -73.73435, 40.62667, -73.73435))"
    },
    {
      "rank": 68,
      "score": 1.0,
      "candidate": "def distance(latitude1, longitude1, latitude2, longitude2):\n    if latitude1 is None:\n        latitude1 = 0\n    if latitude2 is None:\n        latitude2 = 0\n    if longitude1 is None:\n        longitude1 = 0\n    if longitude2 is None:\n        longitude2 = 0\n\n    # Calculate the Euclidean Distance\n    distance = 6378137\n    # Distance is calculated using the squared euclidean distance\n    return distance * (latitude2 - latitude1) * (longitude2 - longitude1)\n\n\n# Testing\nprint(distance(1, 2, 3, 4))\nprint(distance(1, 1, 1, 1))\nprint(distance(1, 2, 3, 4))\nprint(distance(1, 2, 3, 4, 5))\nprint(distance(1, 2, 3, 4, 5, 6))\nprint(distance(1, 2, 3, 4, 5, 6, 7))"
    },
    {
      "rank": 69,
      "score": 1.0,
      "candidate": "def distance(lat1, lon1, lat2, lon2):\n    d = 6371\n    lat1 = float(lat1)\n    lon1 = float(lon1)\n    lat2 = float(lat2)\n    lon2 = float(lon2)\n    lat_rad = lat1 * math.pi / 180\n    lon_rad = lon1 * math.pi / 180\n    lat_d = lat2 - lat1\n    lon_d = lon2 - lon1\n    a = math.sin(lat_d / 2) ** 2 + math.cos(lat_rad) * math.cos(lon_rad) * math.sin(lon_d / 2) ** 2\n    c = 2 * math.atan2(math.sqrt(a), math.sqrt(1 - a))\n    d = d * c\n    return d\n\n\nif __name__ == '__main__':\n    print(distance(20, 40, 30, 40))"
    },
    {
      "rank": 70,
      "score": 1.0,
      "candidate": "import math\n\n\ndef distance(lat1, lon1, lat2, lon2):\n    return math.sqrt((lat1 - lat2) ** 2 + (lon1 - lon2) ** 2)\n\n\nif __name__ == '__main__':\n    print(distance(40, -20, 39, -10))"
    },
    {
      "rank": 71,
      "score": 1.0,
      "candidate": "def distance(lat1, lon1, lat2, lon2):\n    # your code here\n    lat1 = float(lat1)\n    lon1 = float(lon1)\n    lat2 = float(lat2)\n    lon2 = float(lon2)\n    dlat = lat2 - lat1\n    dlon = lon2 - lon1\n    a = 2*dlat*dlat + dlon*dlon\n    c = 2*lat1*lat2 + lon1*lon2\n    d = 6378137\n    return (a + c)/2\n\n\nprint(distance(47, -122, 49, -122))"
    },
    {
      "rank": 72,
      "score": 1.0,
      "candidate": "def distance(lat1, lon1, lat2, lon2):\n    lat1 = float(lat1)\n    lon1 = float(lon1)\n    lat2 = float(lat2)\n    lon2 = float(lon2)\n    # print(lat1, lon1)\n    # print(lat2, lon2)\n    # print(type(lat1), type(lon1))\n    # print(type(lat2), type(lon2))\n    # print(type(lat1, lon1, lat2, lon2))\n    # print(type(lat1, lon1, lat2, lon2))\n    # print(type(lat1, lon1, lat2, lon2))\n    # print(type(lat1, lon1, lat2, lon2))\n    # print(type(lat1, lon1, lat2, lon2))\n    # print(type(lat1, lon1, lat2, lon2))\n    # print(type(lat1, lon1, lat2, lon2))\n    # print(type(lat1, lon1, lat2, lon2))\n    # print(type(lat1, lon1, lat2, lon2))\n    # print(type(lat1, lon1, lat2, lon2))\n    # print(type(lat1, lon1, lat2, lon2))\n    # print(type(lat1, lon1, lat2, lon2))\n    # print(type(lat1, lon1, lat2, lon2))\n    # print(type(lat1, lon1, lat2, lon2))\n    # print(type(lat1, lon1, lat2, lon2))\n    # print(type(lat1, lon1, lat2, lon2))\n    # print(type(lat1, lon1, lat2, lon2))\n    # print(type(lat1, lon1, lat2, lon2))\n    # print(type(lat1, lon1, lat2, lon2))\n    # print(type(lat1, lon1, lat2, lon2))\n    # print(type(lat1, lon1, lat2, lon2))\n    #"
    },
    {
      "rank": 73,
      "score": 1.0,
      "candidate": "def distance(lat1, lon1, lat2, lon2):\n    lat1 = float(lat1)\n    lon1 = float(lon1)\n    lat2 = float(lat2)\n    lon2 = float(lon2)\n    return 6371.0 * (\n        (math.sin((lat1 - lat2) / 2) ** 2) +\n        math.cos(lat1) * math.cos(lat2) *\n        (math.sin((lon1 - lon2) / 2) ** 2)\n    )\n\n\nif __name__ == \"__main__\":\n    print(distance(40.312, -75.515, 40.312, -75.515))"
    },
    {
      "rank": 74,
      "score": 1.0,
      "candidate": "def get_distance(p1, p2):\n    lat1 = p1[0]\n    lon1 = p1[1]\n    lat2 = p2[0]\n    lon2 = p2[1]\n    return 6371 * (math.sin(math.radians(lat1))) + 6371 * (math.sin(math.radians(lat2))) + \\\n           6371 * math.cos(math.radians(lat1)) * math.cos(math.radians(lat2)) * (math.radians(lon1 - lon2))\n\n\nif __name__ == \"__main__\":\n    p1 = (51.916, 4.826)\n    p2 = (51.932, 4.832)\n    print(get_distance(p1, p2))"
    },
    {
      "rank": 75,
      "score": 1.0,
      "candidate": "def distance(lat1, lon1, lat2, lon2):\n    # Your code here\n    dLat = (lat1-lat2)\n    dLon = (lon1-lon2)\n    r = 6371\n    return dLat*dLat + dLon*dLon + r\n\n\nif __name__ == '__main__':\n    print(distance(40.9, -73.8, 40.6, -73.8))"
    },
    {
      "rank": 76,
      "score": 1.0,
      "candidate": "def distance(lat1, lon1, lat2, lon2):\n    # define the distance in miles\n    dist_miles = 6371.0\n\n    # calculate the distance\n    dLat = lat2 - lat1\n    dLon = lon2 - lon1\n    dLat = dLat * 0.017453292519943295\n    dLon = dLon * 0.017453292519943295\n    d = dLat + dLon\n\n    return dist_miles * d\n\n\n# test cases\nprint(distance(42.4, -73.9, 42.4, -73.9))\nprint(distance(42.4, -73.9, 42.4, -73.9))\nprint(distance(42.4, -73.9, 42.4, -73.9))\nprint(distance(42.4, -73.9, 42.4, -73.9))\nprint(distance(42.4, -73.9, 42.4, -73.9))\nprint(distance(42.4, -73.9, 42.4, -73.9))\nprint(distance(42.4, -73.9, 42.4, -73.9))\nprint(distance(42.4, -73.9, 42.4, -73.9))\nprint(distance(42.4, -73.9, 42.4, -73.9))\nprint(distance(42.4, -73.9, 42.4, -73.9))\nprint(distance(42.4, -73.9, 42.4, -73.9))\nprint(distance(42.4, -73.9, 42.4, -73.9))\nprint(distance(42.4, -73.9, 42.4, -73.9))\nprint(distance(42.4, -73.9, 42.4, -73.9))\nprint(distance(42.4, -73.9, 42.4, -73.9))\nprint(distance(42.4, -73.9, 42.4, -73.9))"
    },
    {
      "rank": 77,
      "score": 1.0,
      "candidate": "def distance(latitude, longitude):\n    # your code here\n    pass\n\n\n# test cases\nprint(distance(10, 20))\nprint(distance(10, -20))\nprint(distance(10, 20))\nprint(distance(-10, 20))\nprint(distance(-10, -20))"
    },
    {
      "rank": 78,
      "score": 1.0,
      "candidate": "def distance(lat1, long1, lat2, long2):\n    # your code here\n    # the distance between two points is defined as the distance between the two points using latitude and longitude.\n    # return the distance in kilometers.\n    # https://en.wikipedia.org/wiki/Kilometers\n    return 6371"
    },
    {
      "rank": 79,
      "score": 1.0,
      "candidate": "def distance(lat1, lon1, lat2, lon2):\n    # convert lat1, lon1 and lat2, lon2 into radians\n    lat1 = lat1 * (math.pi / 180)\n    lat2 = lat2 * (math.pi / 180)\n    lon1 = lon1 * (math.pi / 180)\n    lon2 = lon2 * (math.pi / 180)\n\n    # calculate distance between two points using the formula\n    return math.sqrt((lat1 - lat2) ** 2 + (lon1 - lon2) ** 2)\n\n\nif __name__ == \"__main__\":\n    print(distance(45.2, -71.9, 45.8, -71.9))"
    },
    {
      "rank": 80,
      "score": 1.0,
      "candidate": "def distance(lat1, lon1, lat2, lon2):\n    # write your code in Python 3.6\n    # my_lat = float(lat1)\n    # my_lon = float(lon1)\n    # my_lat2 = float(lat2)\n    # my_lon2 = float(lon2)\n\n    # distance = (((my_lat - my_lat2)**2) + (my_lon - my_lon2)**2)**0.5\n\n    # return distance\n\n    # my_lat = float(lat1)\n    # my_lon = float(lon1)\n    # my_lat2 = float(lat2)\n    # my_lon2 = float(lon2)\n\n    # distance = (((my_lat - my_lat2)**2) + (my_lon - my_lon2)**2)**0.5\n\n    # return distance\n\n    # my_lat = float(lat1)\n    # my_lon = float(lon1)\n    # my_lat2 = float(lat2)\n    # my_lon2 = float(lon2)\n\n    # distance = ((my_lat - my_lat2)**2) + (my_lon - my_lon2)**2\n\n    # return distance\n\n    # my_lat = float(lat1)\n    # my_lon = float(lon1)\n    # my_lat2 = float(lat2)\n    # my_lon2 = float(lon2)\n\n    # distance = ((my_lat - my_lat2)**2) + (my_lon - my_lon2)**2\n\n    # return distance**0.5\n\n    # my_lat = float(lat1)\n    # my_lon = float(lon1)\n    # my_lat2 = float(lat2)\n    # my_lon2 = float(lon2)\n\n    # distance = ((my_lat - my_lat2)**2) + (my_lon - my_lon2)**2\n\n    # return distance**0.5\n\n    # my_lat = float(lat1)\n    # my_lon"
    },
    {
      "rank": 81,
      "score": 1.0,
      "candidate": "def get_distance(latitude1, longitude1, latitude2, longitude2):\n    return 6371*((latitude1-latitude2)**2 + (longitude1-longitude2)**2)\n\nif __name__ == \"__main__\":\n    print(get_distance(52.23, -7.13, 52.34, -7.23))"
    },
    {
      "rank": 82,
      "score": 1.0,
      "candidate": "def distance(lat1, long1, lat2, long2):\n    lat1 = float(lat1)\n    long1 = float(long1)\n    lat2 = float(lat2)\n    long2 = float(long2)\n\n    # Calculate distance using math.sqrt(pow((lat2 - lat1), 2) + pow((long2 - long1), 2))\n    # https://en.wikipedia.org/wiki/Euclidean_distance\n    return (\n        pow((lat2 - lat1), 2)\n        + pow((long2 - long1), 2)\n    ) / 2\n\n\nif __name__ == \"__main__\":\n    print(distance(41.916, -76.918, 41.916, -76.918))"
    },
    {
      "rank": 83,
      "score": 1.0,
      "candidate": "def distance(lat1, lon1, lat2, lon2):\n    # Your code here\n    return 6371 # Kilometers"
    },
    {
      "rank": 84,
      "score": 1.0,
      "candidate": "import math\n\n\ndef calculate_distance(lat1, lon1, lat2, lon2):\n    lat1 = math.radians(lat1)\n    lat2 = math.radians(lat2)\n    lon1 = math.radians(lon1)\n    lon2 = math.radians(lon2)\n\n    dlon = lon2 - lon1\n    dlat = lat2 - lat1\n\n    a = math.sin(dlat / 2) ** 2 + math.cos(lat1) * math.cos(lat2) * math.sin(dlon / 2) ** 2\n    c = 2 * math.atan2(math.sqrt(a), math.sqrt(1 - a))\n\n    return 6371 * c\n\n\nif __name__ == \"__main__\":\n    print(calculate_distance(40, -75, -75, -75))"
    },
    {
      "rank": 85,
      "score": 1.0,
      "candidate": "def distance(p1,p2):\n    # your code here\n    return 0\n\nprint(distance(1,2))"
    },
    {
      "rank": 86,
      "score": 1.0,
      "candidate": "def distance(lat1, lng1, lat2, lng2):\n    # Your code here\n    pass\n\n\nif __name__ == \"__main__\":\n    print(distance(40, -100, 40, -100))"
    },
    {
      "rank": 87,
      "score": 1.0,
      "candidate": "def calculate_distance(lat1, lon1, lat2, lon2):\n    # Your code here\n    return ((90 - (lat1 * 180 / 3.14159265358979323846) - (lon1 * 180 / 3.14159265358979323846))**2 +\n            (90 - (lat2 * 180 / 3.14159265358979323846) - (lon2 * 180 / 3.14159265358979323846))**2)**0.5\n\nlat1 = float(input(\"Enter latitude: \"))\nlon1 = float(input(\"Enter longitude: \"))\nlat2 = float(input(\"Enter latitude: \"))\nlon2 = float(input(\"Enter longitude: \"))\n\nprint(\"Distance between points is {}\".format(calculate_distance(lat1, lon1, lat2, lon2)))"
    },
    {
      "rank": 88,
      "score": 1.0,
      "candidate": "import math\n\n\ndef calculate_distance(lat1, lon1, lat2, lon2):\n    # TODO: Your code here\n    distance = math.sqrt((lat1 - lat2) ** 2 + (lon1 - lon2) ** 2)\n    return distance\n\n\nlat1 = float(input(\"Enter lat1: \"))\nlon1 = float(input(\"Enter lon1: \"))\nlat2 = float(input(\"Enter lat2: \"))\nlon2 = float(input(\"Enter lon2: \"))\nprint(calculate_distance(lat1, lon1, lat2, lon2))"
    },
    {
      "rank": 89,
      "score": 1.0,
      "candidate": "def distance(lat1, lon1, lat2, lon2):\n    r = 6371000\n    lat1, lon1, lat2, lon2 = map(radians, [lat1, lon1, lat2, lon2])\n    dlon = lon2 - lon1\n    dlat = lat2 - lat1\n    a = sin(dlat / 2)**2 + cos(lat1) * cos(lat2) * sin(dlon / 2)**2\n    c = 2 * asin(sqrt(a))\n    return r * c\n\nif __name__ == '__main__':\n    print(distance(40.5, -73.8, 40.5, -73.8))"
    },
    {
      "rank": 90,
      "score": 1.0,
      "candidate": "from math import radians\n\n\ndef distance(lat1, lon1, lat2, lon2):\n    \"\"\"\n    Calculates the distance between two points using latitude and longitude\n    \"\"\"\n    lat1 = radians(lat1)\n    lat2 = radians(lat2)\n    lon1 = radians(lon1)\n    lon2 = radians(lon2)\n    return 6371 * pow(sin((lat2 - lat1) / 2), 2) + 6371 * pow(sin((lon2 - lon1) / 2), 2)\n\n\nif __name__ == '__main__':\n    print(distance(51, -1, 52, -1))\n    print(distance(51, -1, 52, 51))\n    print(distance(51, -1, 52, 51, -1))\n    print(distance(51, -1, 52, 51, -1, -1))"
    },
    {
      "rank": 91,
      "score": 1.0,
      "candidate": "from math import radians, degrees\n\n\ndef distance(lat1, lon1, lat2, lon2):\n    lat1 = radians(lat1)\n    lon1 = radians(lon1)\n    lat2 = radians(lat2)\n    lon2 = radians(lon2)\n\n    dlon = lon2 - lon1\n    dlat = lat2 - lat1\n\n    a = sin(dlat/2)**2 + cos(lat1) * cos(lat2) * sin(dlon/2)**2\n\n    c = 2 * asin(sqrt(a))\n\n    return c"
    },
    {
      "rank": 92,
      "score": 1.0,
      "candidate": "def get_distance(latitude, longitude):\n    return 6371\n\nprint(get_distance(40, -100))"
    },
    {
      "rank": 93,
      "score": 1.0,
      "candidate": "import math\n\n\ndef get_distance(lat1, lon1, lat2, lon2):\n    lat1 = math.radians(lat1)\n    lat2 = math.radians(lat2)\n\n    dlon = lon2 - lon1\n    dlat = lat2 - lat1\n\n    a = math.sin(dlat / 2) ** 2 + math.cos(lat1) * math.cos(lat2) * math.sin(dlon / 2) ** 2\n    c = 2 * math.asin(math.sqrt(a))\n\n    r = 6371\n    return c * r\n\n\nif __name__ == \"__main__\":\n    print(get_distance(45, -70, 45, -70))"
    },
    {
      "rank": 94,
      "score": 1.0,
      "candidate": "def distance(lat1, lon1, lat2, lon2):\n    # Your code here\n    # Calculate the distance between two points using latitude and longitude\n    d = 6378137\n    lat1 = float(lat1)\n    lat2 = float(lat2)\n    lon1 = float(lon1)\n    lon2 = float(lon2)\n\n    r = 6378137\n    lat1 = lat1 * pi / 180\n    lat2 = lat2 * pi / 180\n    lon1 = lon1 * pi / 180\n    lon2 = lon2 * pi / 180\n\n    a = (sin(lat1) * sin(lat2) + cos(lat1) * cos(lat2) * cos(lon1 - lon2)) * r\n    c = 2 * atan2(sqrt(a), sqrt(1 - a))\n    return c\n\n\n# Test\nlat1 = 45\nlon1 = -10\nlat2 = 45\nlon2 = -10\n\ndistance(lat1, lon1, lat2, lon2)"
    },
    {
      "rank": 95,
      "score": 1.0,
      "candidate": "import math\n\n\ndef distance(lat1, lon1, lat2, lon2):\n    # convert latitudes to radians\n    lat1 = math.radians(lat1)\n    lat2 = math.radians(lat2)\n\n    # convert longitudes to radians\n    lon1 = math.radians(lon1)\n    lon2 = math.radians(lon2)\n\n    # calculate the distance\n    d = math.sqrt((math.sin(lat1) * math.sin(lat2)) + (math.cos(lat1) * math.cos(lat2) * math.sin(lon1 - lon2)))\n\n    return d\n\n\nif __name__ == \"__main__\":\n    print(distance(41, -83, 49, -75))"
    },
    {
      "rank": 96,
      "score": 1.0,
      "candidate": "def distance(lat1, lon1, lat2, lon2):\n    \"\"\"\n    :type lat1: float\n    :type lon1: float\n    :type lat2: float\n    :type lon2: float\n    :rtype: float\n    \"\"\"\n    return 6371 * (\n        (lat1 - lat2) ** 2 +\n        (lon1 - lon2) ** 2\n    )\n\n\nif __name__ == '__main__':\n    lat1 = 51.8667\n    lon1 = -0.1836\n    lat2 = 51.7845\n    lon2 = -0.0026\n    print(distance(lat1, lon1, lat2, lon2))"
    },
    {
      "rank": 97,
      "score": 1.0,
      "candidate": "def distance(lat1, lon1, lat2, lon2):\n    d = (lat1 - lat2) ** 2 + (lon1 - lon2) ** 2\n    return math.sqrt(d)\n\n\nprint(distance(40.78, -75.29, 40.75, -75.29))"
    },
    {
      "rank": 98,
      "score": 1.0,
      "candidate": "def distance(lat1, lon1, lat2, lon2):\n    # Your code here\n    # The formula for the distance is:\n    # the distance between two points using latitude and longitude\n    # return the distance\n    # latitude and longitude are given in radians\n    # The formula for the distance is:\n    # the distance between two points using latitude and longitude\n    # return the distance in kilometers\n    # return the distance in miles\n    # return the distance in miles\n    return 6371 * (math.sin((lat2 - lat1) / 2) ** 2 + math.cos(lat1) * math.cos(lat2) * math.sin((lon2 - lon1) / 2) ** 2)\n\n\nprint(distance(40, -90, 40, -90))"
    },
    {
      "rank": 99,
      "score": 1.0,
      "candidate": "def distance(p1, p2):\n    lat1, lon1 = p1\n    lat2, lon2 = p2\n    r = 6371\n    lat1 = lat1 * r\n    lat2 = lat2 * r\n    a = math.sin(lat1 / 2) ** 2 + math.cos(lat1) * math.cos(lat2) * math.sin(lon2 / 2) ** 2\n    c = 2 * math.atan2(math.sqrt(a), math.sqrt(1 - a))\n    d = 6371 * c\n    return d\n\n\nif __name__ == \"__main__\":\n    p1 = (37.0, -122.0)\n    p2 = (40.0, -119.0)\n    print(distance(p1, p2))"
    },
    {
      "rank": 100,
      "score": 1.0,
      "candidate": "def distance(lat1, lng1, lat2, lng2):\n    # latitude and longitude are floats.\n    # convert them to radians.\n    lat1 = radians(lat1)\n    lng1 = radians(lng1)\n    lat2 = radians(lat2)\n    lng2 = radians(lng2)\n\n    # calculate the distance between the two points\n    dlat = lat2 - lat1\n    dlon = lng2 - lng1\n\n    # calculate the distance in kilometers\n    d = 6378137.0\n\n    # calculate the distance in miles\n    m = 0.621371\n\n    # calculate the distance in km\n    k = 0.621371\n\n    # calculate the distance in miles\n    miles = d * m\n\n    # calculate the distance in km\n    km = d * k\n\n    # calculate the distance in miles\n    miles_km = miles * km\n\n    # return the distance in miles\n    return miles_km"
    }
  ]
}