{
  "timestamp": "2025-09-14T16:05:36.565873",
  "method": "improved_llm_judge",
  "judge_model": "codellama/CodeLlama-7b-Python-hf",
  "target_model": "codet5-770m",
  "dataset": "mbpp",
  "problem_number": 495,
  "total_candidates": 100,
  "results": [
    {
      "rank": 1,
      "score": 10.0,
      "candidate": "def p(n, k):\n    return (1 + k) ** n\n\nprint(p(2, 2))"
    },
    {
      "rank": 2,
      "score": 10.0,
      "candidate": "def permutation(p, n, k):\n    p = [1] + p\n    p = [p[i] * (n + 1) // (i + 1) for i in range(n + 1)]\n    p.sort()\n    return p[k]\n\n\nif __name__ == \"__main__\":\n    print(permutation([1, 3, 5, 7], 3, 5))\n    print(permutation([1, 3, 5, 7], 3, 6))\n    print(permutation([1, 3, 5, 7], 3, 7))"
    },
    {
      "rank": 3,
      "score": 10.0,
      "candidate": "def perm(n, k):\n    # your code here\n    return n**k\n\n\ndef test_perm():\n    assert perm(3, 2) == 9\n    assert perm(3, 4) == 27\n    assert perm(3, 6) == 24"
    },
    {
      "rank": 4,
      "score": 10.0,
      "candidate": "def perm(n, k):\n    if n == 1:\n        if k == 1:\n            return 1\n        else:\n            return 0\n    else:\n        return (perm(n-1, k) + perm(n-1, k-1)) / 2\n\nprint(perm(5, 5))\nprint(perm(5, 7))\nprint(perm(5, 10))"
    },
    {
      "rank": 5,
      "score": 10.0,
      "candidate": "def permutationCoefficient(n, k):\n    return n * (n - 1) // 2 / k\n\nprint(permutationCoefficient(5, 3))\nprint(permutationCoefficient(3, 3))\nprint(permutationCoefficient(6, 5))\nprint(permutationCoefficient(7, 5))"
    },
    {
      "rank": 6,
      "score": 10.0,
      "candidate": "def permutationCoefficient(n, k):\n    # Write your code here\n    if n == 1:\n        return 1\n    if k == 1:\n        return n\n    return (n * (k - 1)) / (k * (n - 1))"
    },
    {
      "rank": 7,
      "score": 10.0,
      "candidate": "def permutationCoefficient(n, k):\n    if n == 0:\n        return 1\n    elif n == 1:\n        return k\n    else:\n        return k * permutationCoefficient(n-1, k)\n\ndef main():\n    print(permutationCoefficient(3, 2))\n    print(permutationCoefficient(3, 3))\n    print(permutationCoefficient(3, 4))\n    print(permutationCoefficient(3, 5))\n    print(permutationCoefficient(3, 6))\n    print(permutationCoefficient(3, 7))\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 8,
      "score": 10.0,
      "candidate": "def perm_coefficient(p, n, k):\n    return p[k][n]\n\np = [[0 for _ in range(100)] for _ in range(100)]\np[0][0] = 1\np[1][1] = 1\np[1][2] = 1\np[2][1] = 2\np[2][2] = 2\np[3][1] = 3\np[3][2] = 3\np[4][1] = 4\np[4][2] = 4\np[5][1] = 5\np[5][2] = 5\np[6][1] = 6\np[6][2] = 6\np[7][1] = 7\np[7][2] = 7\np[8][1] = 8\np[8][2] = 8\np[9][1] = 9\np[9][2] = 9\n\nprint(perm_coefficient(p, 4, 0))"
    },
    {
      "rank": 9,
      "score": 10.0,
      "candidate": "def perm(n, k):\n    if n == 0:\n        return 0\n    if n == 1:\n        return k\n    return (perm(n-1, k) * k) % n\n\n\nif __name__ == \"__main__\":\n    n = int(input())\n    k = int(input())\n    print(perm(n, k))"
    },
    {
      "rank": 10,
      "score": 10.0,
      "candidate": "def perm(n, k):\n    if n == 1:\n        return k\n    elif k == 0:\n        return 1\n    elif k % 2 == 0:\n        return perm(n-1, k/2) * perm(n-1, k/2)\n    else:\n        return perm(n-1, k/2) * perm(n-1, k/2) * perm(n-1, k/2)\n\n\nn = int(input(\"Enter n: \"))\nk = int(input(\"Enter k: \"))\nprint(perm(n, k))"
    },
    {
      "rank": 11,
      "score": 10.0,
      "candidate": "def permutation_coefficient(p, n, k):\n    if k == 1:\n        return p[n][k]\n    else:\n        return (p[n][k] * permutation_coefficient(p, n - 1, k - 1)) % (10 ** 9 + 7)\n\n\ndef main():\n    p = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    print(permutation_coefficient(p, 2, 1))\n    print(permutation_coefficient(p, 2, 2))\n    print(permutation_coefficient(p, 2, 3))\n    print(permutation_coefficient(p, 2, 4))\n    print(permutation_coefficient(p, 2, 5))\n    print(permutation_coefficient(p, 2, 6))\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 12,
      "score": 10.0,
      "candidate": "def perm(n, k):\n    if k==1:\n        return n\n    return perm(n,k-1) * perm(n,k)\n\nprint(perm(1,2))\nprint(perm(1,3))\nprint(perm(2,1))\nprint(perm(3,1))\nprint(perm(3,2))\nprint(perm(3,3))\nprint(perm(4,3))\nprint(perm(5,4))\nprint(perm(5,5))\nprint(perm(6,5))\nprint(perm(7,5))\nprint(perm(8,5))\nprint(perm(9,5))\nprint(perm(10,5))\nprint(perm(11,5))\nprint(perm(12,5))\nprint(perm(13,5))\nprint(perm(14,5))\nprint(perm(15,5))\nprint(perm(16,5))\nprint(perm(17,5))\nprint(perm(18,5))\nprint(perm(19,5))\nprint(perm(20,5))\nprint(perm(21,5))\nprint(perm(22,5))\nprint(perm(23,5))\nprint(perm(24,5))\nprint(perm(25,5))\nprint(perm(26,5))\nprint(perm(27,5))\nprint(perm(28,5))\nprint(perm(29,5))\nprint(perm(30,5))\nprint(perm(31,5))\nprint(perm(32,5))\nprint(perm(33,5))\nprint(perm(34,5))\nprint(perm(35,5))\nprint(perm(36,5))\nprint(perm(37,5))\nprint(perm(38,5))\nprint(perm(39,5))\nprint(perm(40,5))\nprint(perm(41,5))\nprint(perm(42,5))\nprint(perm(43,5))\nprint(perm(44,5))\nprint(perm(45,5))\nprint(perm(46,5))\nprint(perm(47,5))\nprint(perm(48,5))\nprint(perm"
    },
    {
      "rank": 13,
      "score": 10.0,
      "candidate": "def p(n, k):\n    if k == 1:\n        return 1\n    else:\n        return p(n-1, k) * p(n, k-1)\n\n\nn = int(input())\nk = int(input())\n\nprint(p(n, k))"
    },
    {
      "rank": 14,
      "score": 10.0,
      "candidate": "def p(n, k):\n    return (n**k)\n\nprint(p(2, 3))\nprint(p(2, 4))\nprint(p(2, 5))\nprint(p(2, 6))\nprint(p(3, 4))\nprint(p(3, 5))\nprint(p(3, 6))\nprint(p(4, 5))\nprint(p(4, 6))\nprint(p(5, 6))\nprint(p(5, 7))\nprint(p(5, 8))\nprint(p(6, 7))\nprint(p(6, 8))"
    },
    {
      "rank": 15,
      "score": 10.0,
      "candidate": "def permutationCoefficient(n, k):\n    return (n**k) / (n-1)\n\n\nprint(permutationCoefficient(3, 3))\nprint(permutationCoefficient(4, 3))\nprint(permutationCoefficient(5, 3))\nprint(permutationCoefficient(6, 3))\nprint(permutationCoefficient(7, 3))"
    },
    {
      "rank": 16,
      "score": 10.0,
      "candidate": "def perm_coefficient(n, k):\n    return n*k\n\n\ndef perm_coefficient_2(n, k):\n    return n*k + k\n\n\nif __name__ == \"__main__\":\n    n = int(input())\n    k = int(input())\n    print(perm_coefficient(n, k))\n    print(perm_coefficient_2(n, k))"
    },
    {
      "rank": 17,
      "score": 10.0,
      "candidate": "def perm(n, k):\n    if n == 1:\n        return 1\n\n    return perm(n - 1, k) * perm(n - 1, k - 1)\n\n\nn, k = map(int, input().split())\nprint(perm(n, k))"
    },
    {
      "rank": 18,
      "score": 10.0,
      "candidate": "from math import factorial\n\ndef perm_coefficient(n, k):\n    return factorial(n)/factorial(k)/(factorial(n-k)*factorial(k))\n\nif __name__ == \"__main__\":\n    print(perm_coefficient(1, 1))\n    print(perm_coefficient(2, 1))\n    print(perm_coefficient(3, 1))\n    print(perm_coefficient(4, 1))\n    print(perm_coefficient(5, 1))\n    print(perm_coefficient(6, 1))\n    print(perm_coefficient(7, 1))\n    print(perm_coefficient(8, 1))\n    print(perm_coefficient(9, 1))\n    print(perm_coefficient(10, 1))\n    print(perm_coefficient(11, 1))\n    print(perm_coefficient(12, 1))\n    print(perm_coefficient(13, 1))\n    print(perm_coefficient(14, 1))\n    print(perm_coefficient(15, 1))\n    print(perm_coefficient(16, 1))\n    print(perm_coefficient(17, 1))\n    print(perm_coefficient(18, 1))\n    print(perm_coefficient(19, 1))\n    print(perm_coefficient(20, 1))\n    print(perm_coefficient(21, 1))\n    print(perm_coefficient(22, 1))\n    print(perm_coefficient(23, 1))\n    print(perm_coefficient(24, 1))\n    print(perm_coefficient(25, 1))\n    print(perm_coefficient(26, 1))\n    print(perm_coefficient(27, 1))\n    print(perm_coefficient(28, 1))\n    print(perm_coefficient(29, 1))\n    print(perm_coefficient(30, 1))\n    print(perm_coefficient(31, 1))\n    print(perm_coefficient(32, 1))\n    print(perm_coefficient(33, 1))\n    print(perm_coefficient(34, 1))\n    print(perm_coefficient(35, 1))"
    },
    {
      "rank": 19,
      "score": 10.0,
      "candidate": "def perm_coeff(n, k):\n    if k == 0:\n        return 1\n\n    if n == 1:\n        return perm_coeff(n, k - 1)\n\n    return perm_coeff(n - 1, k) * perm_coeff(n - 1, k - 1)\n\n\nprint(perm_coeff(10, 2))\nprint(perm_coeff(10, 1))\nprint(perm_coeff(10, 0))"
    },
    {
      "rank": 20,
      "score": 10.0,
      "candidate": "def p(n, k):\n    return (n**k) / (n + k)\n\nprint(p(3, 2))\nprint(p(3, 4))\nprint(p(3, 5))\nprint(p(3, 6))\nprint(p(3, 7))\nprint(p(3, 8))\nprint(p(3, 9))\nprint(p(3, 10))\nprint(p(3, 11))\nprint(p(3, 12))\nprint(p(3, 13))\nprint(p(3, 14))\nprint(p(3, 15))\nprint(p(3, 16))\nprint(p(3, 17))\nprint(p(3, 18))\nprint(p(3, 19))\nprint(p(3, 20))\nprint(p(3, 21))\nprint(p(3, 22))\nprint(p(3, 23))\nprint(p(3, 24))\nprint(p(3, 25))\nprint(p(3, 26))\nprint(p(3, 27))\nprint(p(3, 28))\nprint(p(3, 29))\nprint(p(3, 30))\nprint(p(3, 31))\nprint(p(3, 32))\nprint(p(3, 33))\nprint(p(3, 34))\nprint(p(3, 35))\nprint(p(3, 36))\nprint(p(3, 37))\nprint(p(3, 38))\nprint(p(3, 39))\nprint(p(3, 40))\nprint(p(3, 41))\nprint(p(3, 42))\nprint(p(3, 43))\nprint(p(3, 44))\nprint(p(3, 45))\nprint(p(3, 46))\nprint(p(3, 47))\nprint(p(3, 48))\nprint(p(3, 49))\nprint(p(3, 50))\nprint(p(3, 51))\nprint(p(3, 52))\nprint(p(3, 53))\nprint(p(3, 54))\nprint(p(3, 55))\nprint(p(3, 56))"
    },
    {
      "rank": 21,
      "score": 10.0,
      "candidate": "def perm_coeff(n, k):\n    p = {}\n    for i in range(1, n+1):\n        p[i] = i\n\n    for i in range(1, k+1):\n        p[i] = k\n\n    return p[n]\n\n\nif __name__ == \"__main__\":\n    n = int(input())\n    k = int(input())\n    print(perm_coeff(n, k))"
    },
    {
      "rank": 22,
      "score": 10.0,
      "candidate": "def permutation_coefficient(p, n, k):\n    # Your code here\n    count = 0\n    for i in range(1, n+1):\n        if i % k == 0:\n            count += 1\n    return count\n\n\nprint(permutation_coefficient(5, 5, 5))"
    },
    {
      "rank": 23,
      "score": 10.0,
      "candidate": "def perm_coefficient(n, k):\n    return n * k\n\n\nprint(perm_coefficient(5, 4))\nprint(perm_coefficient(5, 6))\nprint(perm_coefficient(5, 7))\nprint(perm_coefficient(5, 8))\nprint(perm_coefficient(5, 9))\nprint(perm_coefficient(5, 10))\nprint(perm_coefficient(5, 11))\nprint(perm_coefficient(5, 12))\nprint(perm_coefficient(5, 13))\nprint(perm_coefficient(5, 14))\nprint(perm_coefficient(5, 15))\nprint(perm_coefficient(5, 16))\nprint(perm_coefficient(5, 17))\nprint(perm_coefficient(5, 18))\nprint(perm_coefficient(5, 19))\nprint(perm_coefficient(5, 20))\nprint(perm_coefficient(5, 21))\nprint(perm_coefficient(5, 22))\nprint(perm_coefficient(5, 23))\nprint(perm_coefficient(5, 24))\nprint(perm_coefficient(5, 25))\nprint(perm_coefficient(5, 26))\nprint(perm_coefficient(5, 27))\nprint(perm_coefficient(5, 28))\nprint(perm_coefficient(5, 29))\nprint(perm_coefficient(5, 30))\nprint(perm_coefficient(5, 31))\nprint(perm_coefficient(5, 32))\nprint(perm_coefficient(5, 33))\nprint(perm_coefficient(5, 34))\nprint(perm_coefficient(5, 35))\nprint(perm_coefficient(5, 36))\nprint(perm_coefficient(5, 37))\nprint(perm_coefficient(5, 38))\nprint(perm_coefficient(5, 39))\nprint(perm_coefficient(5, 40))\nprint(perm_coefficient(5, 41))\nprint(perm_coefficient(5, 42))\nprint(perm_coefficient(5, 43))\nprint(perm_coefficient(5, 44))\nprint(perm_coefficient(5, 45"
    },
    {
      "rank": 24,
      "score": 10.0,
      "candidate": "def permutation_coefficient(n, k):\n    if n == 1:\n        return k\n    else:\n        return k * permutation_coefficient(n-1, k)\n\n\nn = int(input())\nk = int(input())\n\nprint(permutation_coefficient(n, k))"
    },
    {
      "rank": 25,
      "score": 10.0,
      "candidate": "def perm_coefficient(n, k):\n    return k - n + 1\n\n\nif __name__ == \"__main__\":\n    n = int(input())\n    k = int(input())\n\n    print(perm_coefficient(n, k))"
    },
    {
      "rank": 26,
      "score": 10.0,
      "candidate": "def permutationCoefficient(p, n, k):\n    p.sort()\n    return p[k] // (p[n - 1] * (n - k))\n\n\nif __name__ == \"__main__\":\n    p = [2, 3, 4, 5, 6, 7, 8, 9]\n    print(permutationCoefficient(p, 5, 3))"
    },
    {
      "rank": 27,
      "score": 10.0,
      "candidate": "import math\n\ndef permutationCoefficient(n, k):\n    if k == 1:\n        return math.factorial(n) / math.factorial(k)\n    else:\n        return (n * permutationCoefficient(n - 1, k)) / (k * permutationCoefficient(n, k - 1))\n\n\nif __name__ == '__main__':\n    n = int(input())\n    k = int(input())\n    print(permutationCoefficient(n, k))"
    },
    {
      "rank": 28,
      "score": 10.0,
      "candidate": "def permutationCoefficient(n, k):\n    if n == 1:\n        return k\n    else:\n        return permutationCoefficient(n-1, k) + k\n\n\nn = int(input())\nk = int(input())\nprint(permutationCoefficient(n, k))"
    },
    {
      "rank": 29,
      "score": 10.0,
      "candidate": "def perm_coeff(n, k):\n    \"\"\"\n    :type n: int\n    :type k: int\n    :rtype: int\n    \"\"\"\n    return n / (n + k)\n\n\ndef perm_coeff_2(n, k):\n    \"\"\"\n    :type n: int\n    :type k: int\n    :rtype: int\n    \"\"\"\n    return n / (n + k) ** 2\n\n\ndef perm_coeff_3(n, k):\n    \"\"\"\n    :type n: int\n    :type k: int\n    :rtype: int\n    \"\"\"\n    return n / (n + k) ** 3\n\n\nif __name__ == \"__main__\":\n    print(perm_coeff(1, 1))\n    print(perm_coeff(1, 2))\n    print(perm_coeff(1, 3))\n    print(perm_coeff(1, 4))\n    print(perm_coeff(1, 5))\n    print(perm_coeff(1, 6))\n    print(perm_coeff(1, 7))\n    print(perm_coeff(1, 8))\n    print(perm_coeff(1, 9))\n    print(perm_coeff(2, 1))\n    print(perm_coeff(2, 2))\n    print(perm_coeff(2, 3))\n    print(perm_coeff(2, 4))\n    print(perm_coeff(2, 5))\n    print(perm_coeff(2, 6))\n    print(perm_coeff(2, 7))\n    print(perm_coeff(2, 8))\n    print(perm_coeff(2, 9))\n    print(perm_coeff(3, 1))\n    print(perm_coeff(3, 2))\n    print(perm_coeff(3, 3))\n    print(perm_coeff(3, 4))\n    print(perm_coeff(3, 5))\n    print(perm_coeff(3, 6))\n    print(perm_coeff(3, 7))\n    print(perm_coeff(3, 8))\n    print(perm_coeff(4, 1))\n    print(perm_coeff(4, 2))\n    print(perm_coeff("
    },
    {
      "rank": 30,
      "score": 9.0,
      "candidate": "def permutationCoefficient(p, n, k):\n    # Write your code here\n    p = list(p)\n    p.sort()\n    p.insert(k, 1)\n    p.sort()\n    return p[n-1]"
    },
    {
      "rank": 31,
      "score": 8.0,
      "candidate": "from collections import defaultdict\n\n\ndef p(n, k):\n    if n == 1:\n        return 1\n    if n == 2:\n        return k\n    if k == 1:\n        return p(n-1, k-1)\n    if k == 2:\n        return p(n-1, k)\n    if k % 2 == 0:\n        return p(n-1, k//2) + p(n-1, k//2+1)\n    return p(n-1, k//2) + p(n-1, k//2-1)\n\n\ndef perm(n, k):\n    if n == 1:\n        return 1\n    if n == 2:\n        return k\n    if k == 1:\n        return perm(n-1, k)\n    if k == 2:\n        return perm(n-1, k//2) + perm(n-1, k//2+1)\n    if k % 2 == 0:\n        return perm(n-1, k//2) + perm(n-1, k//2+1) + perm(n-1, k//2)\n    return perm(n-1, k//2) + perm(n-1, k//2-1) + perm(n-1, k//2)\n\n\ndef perm_coefficient(n, k):\n    d = defaultdict(lambda: 0)\n    for i in range(1, n+1):\n        d[i] = d[i-1] + p(i, k)\n    return d[n]\n\n\nif __name__ == \"__main__\":\n    print(perm_coefficient(5, 3))\n    print(perm_coefficient(5, 5))\n    print(perm_coefficient(5, 7))\n    print(perm_coefficient(5, 15))\n    print(perm_coefficient(5, 31))\n    print(perm_coefficient(5, 36))\n    print(perm_coefficient(5, 64))\n    print(perm_coefficient(5, 100))"
    },
    {
      "rank": 32,
      "score": 8.0,
      "candidate": "def permutationCoefficient(n, k):\n    p = [0 for i in range(n+1)]\n    for i in range(1, n+1):\n        p[i] = p[i-1] + i\n    for i in range(k):\n        p[k] = p[k] - 1\n    for i in range(n, 0, -1):\n        p[i] = p[i] / i\n    return p[n]\n\n\nprint(permutationCoefficient(5, 3))"
    },
    {
      "rank": 33,
      "score": 8.0,
      "candidate": "def permutation_coefficient(n, k):\n    p = [0 for i in range(n + 1)]\n    p[1] = 1\n    for i in range(2, n + 1):\n        p[i] = p[i - 1] * k\n    return p[n]\n\n\nif __name__ == \"__main__\":\n    print(permutation_coefficient(3, 2))"
    },
    {
      "rank": 34,
      "score": 8.0,
      "candidate": "def permutation(n, k):\n    if n < 2 or k < 2:\n        return 0\n    return 1 / (n - k)\n\nprint(permutation(3, 2))"
    },
    {
      "rank": 35,
      "score": 8.0,
      "candidate": "def permutation_coefficient(n, k):\n    if n <= k:\n        return 1\n    else:\n        return (n * permutation_coefficient(n - k, k)) / (n - k)\n\nprint(permutation_coefficient(5, 3))"
    },
    {
      "rank": 36,
      "score": 8.0,
      "candidate": "from math import sqrt\n\ndef perm(n, k):\n    p = 1\n    for i in range(1, n):\n        p *= (k-i)\n    return p\n\n\nif __name__ == '__main__':\n    n = int(input())\n    k = int(input())\n    print(perm(n, k))"
    },
    {
      "rank": 37,
      "score": 8.0,
      "candidate": "def perm_coeff(n, k):\n    if n == 0 or k == 0:\n        return 1\n\n    return perm_coeff(n-1, k) * (k+1) / n\n\n\nprint(perm_coeff(5, 3))"
    },
    {
      "rank": 38,
      "score": 8.0,
      "candidate": "def permutation_coefficient(n, k):\n    if n == 1:\n        return 1\n    if n == 2:\n        return k\n    return permutation_coefficient(n-1, k) * permutation_coefficient(n-1, k-1)\n\n\nprint(permutation_coefficient(5, 3))"
    },
    {
      "rank": 39,
      "score": 8.0,
      "candidate": "from functools import reduce\n\ndef perm_coefficient(n, k):\n    p = reduce(lambda x, y: x*y, [1] + [i**k for i in range(1, n+1)])\n    return p\n\ndef main():\n    print(perm_coefficient(10, 6))\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 40,
      "score": 8.0,
      "candidate": "def p_coefficient(n, k):\n    if k == 0:\n        return 1\n    else:\n        return p_coefficient(n-1, k) * p_coefficient(n, k-1)\n\nprint(p_coefficient(3, 2))"
    },
    {
      "rank": 41,
      "score": 8.0,
      "candidate": "def perm_coeff(n, k):\n    p = [1]\n    for i in range(1, n+1):\n        p.append(p[i-1]*k)\n    return p[n]\n\n\nprint(perm_coeff(5, 2))"
    },
    {
      "rank": 42,
      "score": 8.0,
      "candidate": "from itertools import permutations\n\n\ndef p(n, k):\n    return sum(int(x) for x in permutations(str(n), k))\n\n\nif __name__ == \"__main__\":\n    assert p(1, 2) == 1\n    assert p(1, 3) == 1\n    assert p(3, 4) == 2\n    assert p(4, 3) == 2"
    },
    {
      "rank": 43,
      "score": 8.0,
      "candidate": "def p_coeff(n, k):\n    if k == 0:\n        return 1\n    return p_coeff(n-1, k) * p_coeff(n-1, k-1)\n\n\nif __name__ == \"__main__\":\n    n = int(input(\"Enter n: \"))\n    k = int(input(\"Enter k: \"))\n    print(\"p(n, k) = \", p_coeff(n, k))"
    },
    {
      "rank": 44,
      "score": 8.0,
      "candidate": "import math\n\ndef permutationCoefficient(n, k):\n    if k == 0:\n        return 1\n    if k == 1:\n        return n\n    return math.factorial(k) / (math.factorial(n - k) * math.factorial(k - n))\n\nprint(permutationCoefficient(5, 2))\nprint(permutationCoefficient(5, 1))\nprint(permutationCoefficient(5, 5))\nprint(permutationCoefficient(5, 10))\nprint(permutationCoefficient(5, 20))\nprint(permutationCoefficient(5, 30))\nprint(permutationCoefficient(5, 40))\nprint(permutationCoefficient(5, 50))\nprint(permutationCoefficient(5, 60))\nprint(permutationCoefficient(5, 70))\nprint(permutationCoefficient(5, 80))\nprint(permutationCoefficient(5, 90))\nprint(permutationCoefficient(5, 100))\nprint(permutationCoefficient(5, 1000))"
    },
    {
      "rank": 45,
      "score": 8.0,
      "candidate": "def perm_coeff(n, k):\n    if k == 0:\n        return 1\n    if n == 1:\n        return 1\n    return n * perm_coeff(n - 1, k)\n\n\nprint(perm_coeff(2, 2))"
    },
    {
      "rank": 46,
      "score": 8.0,
      "candidate": "def calc_perm_coeff(n, k):\n    return n*k//2\n\nprint(calc_perm_coeff(4, 2))\nprint(calc_perm_coeff(2, 2))\nprint(calc_perm_coeff(3, 3))\nprint(calc_perm_coeff(2, 2))"
    },
    {
      "rank": 47,
      "score": 8.0,
      "candidate": "def perm(n, k):\n    if n == 1:\n        return 1\n    if n == 2:\n        return k\n\n    return (n*k)%1000000007\n\n\nn = int(input())\nk = int(input())\nprint(perm(n, k))"
    },
    {
      "rank": 48,
      "score": 8.0,
      "candidate": "def permutation_coefficient(n, k):\n    return (n * (n - 1)) / (2 * k)\n\n\nprint(permutation_coefficient(6, 2))"
    },
    {
      "rank": 49,
      "score": 8.0,
      "candidate": "def permutation(n, k):\n    if n < 2 or k < 2:\n        return 0\n    if k == 1:\n        return 1\n    return 1/(n*(n-1)*(n-2)) * permutation(n-1, k-1) * permutation(n-2, k-1)\n\nprint(permutation(5, 1))"
    },
    {
      "rank": 50,
      "score": 8.0,
      "candidate": "def perm(n, k):\n    if k == 1:\n        return n\n    return n * perm(n - 1, k - 1)\n\nprint(perm(3, 2))"
    },
    {
      "rank": 51,
      "score": 8.0,
      "candidate": "def perm_coefficient(p, k):\n    n = len(p)\n    sum = 0\n    for i in range(1, n + 1):\n        for j in range(1, k + 1):\n            if i * j == p[i - 1] * p[j - 1]:\n                sum += 1\n    return sum\n\n\nprint(perm_coefficient([1, 3, 5], 2))"
    },
    {
      "rank": 52,
      "score": 8.0,
      "candidate": "def p(n, k):\n    if n == 0:\n        return 1\n    elif n == 1:\n        return k\n    else:\n        return (k + p(n - 1, k)) / (n + k)\n\nn, k = int(input()), int(input())\nprint(p(n, k))"
    },
    {
      "rank": 53,
      "score": 8.0,
      "candidate": "def permutation_coefficient(n, k):\n    if n == 1:\n        return 1\n    if n == 2:\n        return k\n    if k == 1:\n        return n\n    return n * permutation_coefficient(n - 1, k) * permutation_coefficient(n - 1, k - 1)\n\n\nif __name__ == \"__main__\":\n    print(permutation_coefficient(3, 1))\n    print(permutation_coefficient(3, 2))\n    print(permutation_coefficient(3, 3))"
    },
    {
      "rank": 54,
      "score": 8.0,
      "candidate": "def p(n, k):\n    p = 1\n    for i in range(1, n + 1):\n        p *= i\n    for i in range(1, k + 1):\n        p *= (i + 1)\n    return p\n\n\nprint(p(2, 3))\nprint(p(3, 2))\nprint(p(4, 3))\nprint(p(5, 4))"
    },
    {
      "rank": 55,
      "score": 8.0,
      "candidate": "def p(n, k):\n    if n == 1:\n        return 1\n    if k == 1:\n        return n\n    return n * p(n - 1, k - 1)\n\n\nprint(p(5, 2))\nprint(p(5, 4))\nprint(p(5, 6))\nprint(p(5, 7))"
    },
    {
      "rank": 56,
      "score": 8.0,
      "candidate": "def perm(n, k):\n    if k == 1:\n        return 1\n    return n * perm(n-1, k-1)\n\nprint(perm(3, 1))"
    },
    {
      "rank": 57,
      "score": 8.0,
      "candidate": "def perm_coefficient(n, k):\n    if k == 1:\n        return 1\n    return n * perm_coefficient(n-1, k-1)\n\n\nif __name__ == '__main__':\n    n = int(input())\n    k = int(input())\n    print(perm_coefficient(n, k))"
    },
    {
      "rank": 58,
      "score": 8.0,
      "candidate": "def permutationCoefficient(n, k):\n    if k == 1:\n        return n\n    if k == n:\n        return 1\n    return n * permutationCoefficient(n - 1, k - 1)\n\n\nprint(permutationCoefficient(5, 4))\nprint(permutationCoefficient(5, 6))\nprint(permutationCoefficient(5, 7))\nprint(permutationCoefficient(5, 8))"
    },
    {
      "rank": 59,
      "score": 8.0,
      "candidate": "def permutation_coefficient(n, k):\n    p = [1] * k\n    for i in range(1, k):\n        p[i] = p[i - 1] * n // i\n    return p[k - 1]\n\nprint(permutation_coefficient(2, 3))\nprint(permutation_coefficient(5, 2))\nprint(permutation_coefficient(5, 3))\nprint(permutation_coefficient(5, 4))\nprint(permutation_coefficient(5, 5))"
    },
    {
      "rank": 60,
      "score": 8.0,
      "candidate": "def p(n, k):\n    # Write your code here\n    if n == 0:\n        return 1\n    else:\n        return p(n - 1, k) * k\n\n\ndef main():\n    n = int(input(\"Enter n: \"))\n    k = int(input(\"Enter k: \"))\n    print(\"Permutation Coefficient =\", p(n, k))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 61,
      "score": 8.0,
      "candidate": "def p_coefficient(n, k):\n    return n*(n-1)/2\n\nprint(p_coefficient(3, 4))\nprint(p_coefficient(4, 4))\nprint(p_coefficient(6, 3))\nprint(p_coefficient(9, 8))\nprint(p_coefficient(3, 1))"
    },
    {
      "rank": 62,
      "score": 8.0,
      "candidate": "def permutation_coefficient(n, k):\n    p = [0] * (n + 1)\n    p[0] = 1\n    for i in range(1, n + 1):\n        for j in range(i, 0, -1):\n            p[j] *= p[j - i]\n    return p[k]\n\n\nprint(permutation_coefficient(4, 2))"
    },
    {
      "rank": 63,
      "score": 8.0,
      "candidate": "def p_coefficient(n, k):\n    p = 1\n    for i in range(1,n+1):\n        p *= i\n    for j in range(1,k+1):\n        p *= j\n    return p\n\nprint(p_coefficient(5,6))"
    },
    {
      "rank": 64,
      "score": 8.0,
      "candidate": "def p(n, k):\n    if k == 0:\n        return 1\n    elif k == 1:\n        return n\n    else:\n        return n * p(n - 1, k - 1)\n\n\nif __name__ == \"__main__\":\n    print(p(10, 2))"
    },
    {
      "rank": 65,
      "score": 8.0,
      "candidate": "def permutationCoefficient(n, k):\n    if k == 0:\n        return 1\n    else:\n        return permutationCoefficient(n-1, k) + permutationCoefficient(n, k-1)\n\nprint(permutationCoefficient(5, 0))"
    },
    {
      "rank": 66,
      "score": 8.0,
      "candidate": "def p(n, k):\n    return n**k\n\n\nprint(p(3, 1))\nprint(p(3, 2))\nprint(p(3, 3))"
    },
    {
      "rank": 67,
      "score": 8.0,
      "candidate": "def p(n, k):\n    return (n + k) / (n - k)\n\nprint(p(5, 4))\nprint(p(5, 5))\nprint(p(5, 6))"
    },
    {
      "rank": 68,
      "score": 8.0,
      "candidate": "def permutation(n, k):\n    return n * k / (n + k)\n\n\nprint(permutation(3, 3))\nprint(permutation(4, 4))\nprint(permutation(5, 5))"
    },
    {
      "rank": 69,
      "score": 8.0,
      "candidate": "import math\n\ndef p(n, k):\n    if n == 0:\n        return 1\n    return p(n-1, k) * p(n-1, k-1) / math.factorial(n)\n\nn = int(input())\nk = int(input())\n\nprint(p(n, k))"
    },
    {
      "rank": 70,
      "score": 1.0,
      "candidate": "def permutationCoefficient(n, k):\n    if k == 1:\n        return 1\n    else:\n        return (n * permutationCoefficient(n - 1, k - 1)) // k\n\n\nprint(permutationCoefficient(3, 1))\nprint(permutationCoefficient(3, 2))\nprint(permutationCoefficient(3, 3))\nprint(permutationCoefficient(3, 4))\nprint(permutationCoefficient(3, 5))\nprint(permutationCoefficient(3, 6))\nprint(permutationCoefficient(3, 7))\nprint(permutationCoefficient(3, 8))\nprint(permutationCoefficient(3, 9))\nprint(permutationCoefficient(3, 10))\nprint(permutationCoefficient(3, 11))\nprint(permutationCoefficient(3, 12))\nprint(permutationCoefficient(3, 13))\nprint(permutationCoefficient(3, 14))\nprint(permutationCoefficient(3, 15))\nprint(permutationCoefficient(3, 16))\nprint(permutationCoefficient(3, 17))\nprint(permutationCoefficient(3, 18))\nprint(permutationCoefficient(3, 19))\nprint(permutationCoefficient(3, 20))\nprint(permutationCoefficient(3, 21))\nprint(permutationCoefficient(3, 22))\nprint(permutationCoefficient(3, 23))\nprint(permutationCoefficient(3, 24))\nprint(permutationCoefficient(3, 25))\nprint(permutationCoefficient(3, 26))\nprint(permutationCoefficient(3, 27))\nprint(permutationCoefficient(3, 28))\nprint(permutationCoefficient(3, 29))\nprint(permutationCoefficient(3, 30))\nprint(permutationCoefficient(3, 31))\nprint(permutationCoefficient(3, 32))\nprint(permutationCoefficient(3, 33))\nprint(permutationCoefficient(3, 34))\nprint(permutationCoefficient(3, 35))\nprint(permutationCoefficient(3, 36))\nprint(permutationCoefficient(3, 37))\nprint(permutationCoefficient(3, 38))\nprint(permutationCo"
    },
    {
      "rank": 71,
      "score": 1.0,
      "candidate": "def p(n, k):\n    if n < k:\n        return 0\n    elif k == 1:\n        return 1\n    elif k == n:\n        return n\n    else:\n        return p(n - 1, k) * p(n - k, k - 1)\n\n\nif __name__ == \"__main__\":\n    assert p(1, 1) == 1\n    assert p(1, 2) == 2\n    assert p(1, 3) == 6\n    assert p(1, 4) == 12\n    assert p(1, 5) == 24"
    },
    {
      "rank": 72,
      "score": 1.0,
      "candidate": "def permutationCoefficient(n, k):\n    if n == 1 or k == 1:\n        return 1\n\n    return (n * k) / (n * k + k * (n - 1))\n\n\nprint(permutationCoefficient(3, 2))\nprint(permutationCoefficient(4, 2))\nprint(permutationCoefficient(5, 2))\nprint(permutationCoefficient(6, 2))\nprint(permutationCoefficient(7, 2))\nprint(permutationCoefficient(8, 2))\nprint(permutationCoefficient(9, 2))"
    },
    {
      "rank": 73,
      "score": 1.0,
      "candidate": "def permutation_coefficient(p, n, k):\n    # Your code here\n    c = 0\n    for i in range(1, n + 1):\n        for j in range(1, k + 1):\n            if (p[i - 1] * p[j - 1]) % (n - i) == 0:\n                c += 1\n    return c\n\n\nprint(permutation_coefficient([1, 2, 3], 2, 3))"
    },
    {
      "rank": 74,
      "score": 1.0,
      "candidate": "def permutation_coefficient(n, k):\n    if n == 0:\n        return 1\n    return n * permutation_coefficient(n - 1, k) / (n - 1)\n\n\nif __name__ == \"__main__\":\n    assert permutation_coefficient(5, 3) == 1.0\n    assert permutation_coefficient(5, 6) == 1.0\n    assert permutation_coefficient(5, 7) == 2.0\n    assert permutation_coefficient(5, 8) == 2.0\n    assert permutation_coefficient(5, 9) == 2.0\n    assert permutation_coefficient(5, 10) == 2.0\n    assert permutation_coefficient(5, 11) == 3.0\n    assert permutation_coefficient(5, 12) == 3.0\n    assert permutation_coefficient(5, 13) == 3.0\n    assert permutation_coefficient(5, 14) == 4.0\n    assert permutation_coefficient(5, 15) == 4.0\n    assert permutation_coefficient(5, 16) == 4.0\n    assert permutation_coefficient(5, 17) == 4.0\n    assert permutation_coefficient(5, 18) == 4.0\n    assert permutation_coefficient(5, 19) == 4.0\n    assert permutation_coefficient(5, 20) == 4.0\n    assert permutation_coefficient(5, 21) == 4.0\n    assert permutation_coefficient(5, 22) == 4.0\n    assert permutation_coefficient(5, 23) == 4.0\n    assert permutation_coefficient(5, 24) == 4.0\n    assert permutation_coefficient(5, 25) == 4.0\n    assert permutation_coefficient(5, 26) == 4.0\n    assert permutation_coefficient(5, 27) == 4.0\n    assert permutation_coefficient(5, 28) == 4.0\n    assert permutation_coefficient(5, 29) == 4.0\n    assert permutation_coefficient(5, 30) == 4.0\n    assert permutation_coefficient(5, 31) == 4.0\n    assert permutation_coefficient(5, 32) == 4.0\n    assert permutation_"
    },
    {
      "rank": 75,
      "score": 1.0,
      "candidate": "def perm_coefficient(n, k):\n    if k == 0:\n        return 1\n\n    return perm_coefficient(n-1, k) * perm_coefficient(n, k-1)\n\n\nif __name__ == '__main__':\n    print(perm_coefficient(3, 1))\n    print(perm_coefficient(3, 2))\n    print(perm_coefficient(3, 3))\n    print(perm_coefficient(3, 4))"
    },
    {
      "rank": 76,
      "score": 1.0,
      "candidate": "def perm_coeff(n, k):\n    if k == 0:\n        return 1\n    if k == 1:\n        return n\n    return n / perm_coeff(n - k, k - 1)\n\n\nprint(perm_coeff(3, 4))"
    },
    {
      "rank": 77,
      "score": 1.0,
      "candidate": "def permutationCoefficient(n, k):\n    if n == 0:\n        return 1\n    if k == 0:\n        return 1\n    return (n * permutationCoefficient(n - 1, k)) / (k * permutationCoefficient(n - 1, k - 1))\n\n\nif __name__ == \"__main__\":\n    n = int(input())\n    k = int(input())\n    print(permutationCoefficient(n, k))"
    },
    {
      "rank": 78,
      "score": 1.0,
      "candidate": "def permutation_coefficient(n, k):\n    return (n*k)/(n-k)\n\n\nif __name__ == '__main__':\n    assert permutation_coefficient(3, 1) == 0.5\n    assert permutation_coefficient(3, 2) == 0.25\n    assert permutation_coefficient(3, 3) == 0.125\n    assert permutation_coefficient(3, 4) == 0.0625\n    assert permutation_coefficient(3, 5) == 0.03125\n    assert permutation_coefficient(3, 6) == 0.013125\n    assert permutation_coefficient(3, 7) == 0.0043125"
    },
    {
      "rank": 79,
      "score": 1.0,
      "candidate": "def perm_coefficient(p, n, k):\n    if n == 1:\n        return p[n-1]\n    p_n = p[n-1]\n    p_k = p[k-1]\n    p_n_k = p_n*p_k\n    return p_n_k\n\n\np = [1, 2, 3, 4]\nn = 4\nk = 3\nprint(perm_coefficient(p, n, k))"
    },
    {
      "rank": 80,
      "score": 1.0,
      "candidate": "def perm_coeff(n, k):\n    if n == 1:\n        return 1\n    if k == 1:\n        return n\n\n    return perm_coeff(n - 1, k) * perm_coeff(n, k - 1)\n\n\nprint(perm_coeff(2, 1))\nprint(perm_coeff(2, 2))\nprint(perm_coeff(2, 3))\nprint(perm_coeff(3, 1))\nprint(perm_coeff(3, 2))\nprint(perm_coeff(3, 3))\nprint(perm_coeff(4, 1))\nprint(perm_coeff(4, 2))\nprint(perm_coeff(4, 3))\nprint(perm_coeff(4, 4))"
    },
    {
      "rank": 81,
      "score": 1.0,
      "candidate": "def perm(n, k):\n    p = [1]\n    for i in range(1, n + 1):\n        p.append(p[i - 1] * k)\n    return p\n\n\nif __name__ == '__main__':\n    print(perm(4, 3))"
    },
    {
      "rank": 82,
      "score": 1.0,
      "candidate": "def perm_coeff(p, n, k):\n    p_n = p[n]\n    p_k = p[k]\n\n    return p_n / p_k\n\n\ndef perm_coeff_2(p, n, k):\n    p_n = p[n]\n    p_k = p[k]\n\n    return p_n / (p_n * p_k)\n\n\nprint(perm_coeff([1, 2, 3], 1, 3))\nprint(perm_coeff([1, 2, 3], 2, 3))\nprint(perm_coeff([1, 2, 3], 3, 3))\nprint(perm_coeff([1, 2, 3], 4, 3))\nprint(perm_coeff([1, 2, 3], 5, 3))\nprint(perm_coeff([1, 2, 3], 6, 3))\nprint(perm_coeff([1, 2, 3], 7, 3))\nprint(perm_coeff([1, 2, 3], 8, 3))\nprint(perm_coeff([1, 2, 3], 9, 3))\nprint(perm_coeff([1, 2, 3], 10, 3))\nprint(perm_coeff([1, 2, 3], 11, 3))\nprint(perm_coeff([1, 2, 3], 12, 3))\nprint(perm_coeff([1, 2, 3], 13, 3))\nprint(perm_coeff([1, 2, 3], 14, 3))\nprint(perm_coeff([1, 2, 3], 15, 3))\nprint(perm_coeff([1, 2, 3], 16, 3))\nprint(perm_coeff([1, 2, 3], 17, 3))\nprint(perm_coeff([1, 2, 3], 18, 3))\nprint(perm_coeff([1, 2, 3], 19, 3))\nprint(perm_coeff([1, 2, 3], 20, 3))\nprint(perm_coeff([1, 2, 3], 21, 3))\nprint(perm_coeff([1, 2, 3], 22, 3))\nprint(perm_coeff([1, 2, 3], 23, 3))\nprint(perm_coeff([1, 2, 3], 24, 3))\nprint(perm"
    },
    {
      "rank": 83,
      "score": 1.0,
      "candidate": "def permutationCoefficient(n, k):\n    if n == 0:\n        return 1\n    elif n == 1:\n        return k\n    else:\n        return permutationCoefficient(n-1, k) * permutationCoefficient(n, k-1)\n\n\nprint(permutationCoefficient(5, 6))\nprint(permutationCoefficient(5, 4))\nprint(permutationCoefficient(5, 5))\nprint(permutationCoefficient(5, 2))\nprint(permutationCoefficient(2, 2))"
    },
    {
      "rank": 84,
      "score": 1.0,
      "candidate": "def permutationCoefficient(n, k):\n    n = int(n)\n    k = int(k)\n    return (n * k) // 2\n\n\nif __name__ == \"__main__\":\n    assert permutationCoefficient(1, 2) == 1\n    assert permutationCoefficient(3, 2) == 2\n    assert permutationCoefficient(5, 2) == 4\n    assert permutationCoefficient(7, 2) == 8\n    assert permutationCoefficient(10, 2) == 12\n    assert permutationCoefficient(15, 2) == 18\n    assert permutationCoefficient(20, 2) == 24\n    assert permutationCoefficient(30, 2) == 30\n    assert permutationCoefficient(40, 2) == 40\n    assert permutationCoefficient(50, 2) == 50"
    },
    {
      "rank": 85,
      "score": 1.0,
      "candidate": "def permutation_coefficient(n, k):\n    if n == 1:\n        return 1\n    else:\n        return n * permutation_coefficient(n - 1, k)\n\n\nif __name__ == \"__main__\":\n    assert permutation_coefficient(2, 3) == 6\n    assert permutation_coefficient(2, 4) == 6\n    assert permutation_coefficient(2, 5) == 12\n    assert permutation_coefficient(4, 2) == 3\n    assert permutation_coefficient(4, 3) == 3\n    assert permutation_coefficient(4, 4) == 6"
    },
    {
      "rank": 86,
      "score": 1.0,
      "candidate": "def perm(n, k):\n    return k**n\n\nprint(perm(2, 4))"
    },
    {
      "rank": 87,
      "score": 1.0,
      "candidate": "from typing import List\n\n\ndef perm_coefficient(p: List[int], n: int, k: int) -> int:\n    if n == 0 or k == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif k == 1:\n        return p[0]\n    else:\n        return p[n - 1] * perm_coefficient(p, n - 1, k - 1)\n\n\nif __name__ == \"__main__\":\n    assert perm_coefficient([1, 2, 3], 2, 2) == 1\n    assert perm_coefficient([1, 2, 3], 3, 2) == 3\n    assert perm_coefficient([1, 2, 3], 3, 3) == 6\n    assert perm_coefficient([1, 2, 3], 3, 4) == 12\n    assert perm_coefficient([1, 2, 3], 4, 2) == 9\n    assert perm_coefficient([1, 2, 3], 4, 3) == 27\n    assert perm_coefficient([1, 2, 3], 4, 4) == 50"
    },
    {
      "rank": 88,
      "score": 1.0,
      "candidate": "def permutation_coefficient(n, k):\n    # Your code here\n    return n**k\n\n\nn = int(input())\nk = int(input())\n\nprint(permutation_coefficient(n, k))"
    },
    {
      "rank": 89,
      "score": 1.0,
      "candidate": "def permutation_coefficient(n, k):\n    # write your code here\n    return 1\n\n\nprint(permutation_coefficient(2, 2))\nprint(permutation_coefficient(2, 3))\nprint(permutation_coefficient(2, 4))\nprint(permutation_coefficient(2, 5))\nprint(permutation_coefficient(3, 2))\nprint(permutation_coefficient(3, 3))\nprint(permutation_coefficient(3, 4))\nprint(permutation_coefficient(3, 5))\nprint(permutation_coefficient(4, 2))\nprint(permutation_coefficient(4, 3))\nprint(permutation_coefficient(4, 4))\nprint(permutation_coefficient(4, 5))"
    },
    {
      "rank": 90,
      "score": 1.0,
      "candidate": "def permutation_coefficient(p, n, k):\n    if p[k] == 1:\n        return 1\n    if k == 0:\n        return n\n    return permutation_coefficient(p, n, k - 1) * p[k]\n\n\np = [1, 2, 3]\nn = 3\nk = 2\n\nprint(permutation_coefficient(p, n, k))"
    },
    {
      "rank": 91,
      "score": 1.0,
      "candidate": "def perm(n, k):\n    p = 1\n    for i in range(n):\n        p *= i\n    for j in range(k):\n        p /= n\n    return p\n\n\n\nif __name__ == \"__main__\":\n    print(perm(3,2))\n    print(perm(4,2))\n    print(perm(2,3))"
    },
    {
      "rank": 92,
      "score": 1.0,
      "candidate": "def calc_p(n, k):\n    return n * (k - 1) / (k + 1)\n\n\nif __name__ == \"__main__\":\n    print(calc_p(2, 2))\n    print(calc_p(3, 2))\n    print(calc_p(4, 2))\n    print(calc_p(5, 2))\n    print(calc_p(6, 2))\n    print(calc_p(7, 2))\n    print(calc_p(8, 2))\n    print(calc_p(9, 2))\n    print(calc_p(10, 2))"
    },
    {
      "rank": 93,
      "score": 1.0,
      "candidate": "def permutation_coefficient(n, k):\n    # Write your code here\n    if n == 1 and k == 1:\n        return 1\n\n    return n * permutation_coefficient(n - 1, k) / (k * (k - 1))\n\n\nif __name__ == \"__main__\":\n    print(permutation_coefficient(3, 2))\n    print(permutation_coefficient(3, 1))\n    print(permutation_coefficient(3, 0))\n    print(permutation_coefficient(5, 1))\n    print(permutation_coefficient(5, 0))\n    print(permutation_coefficient(5, 4))\n    print(permutation_coefficient(5, 5))\n    print(permutation_coefficient(5, 6))\n    print(permutation_coefficient(5, 7))"
    },
    {
      "rank": 94,
      "score": 1.0,
      "candidate": "def perm(n, k):\n    if k == 0:\n        return 1\n    return perm(n, k - 1) * perm(n - 1, k)\n\n\nif __name__ == \"__main__\":\n    print(perm(3, 0))"
    },
    {
      "rank": 95,
      "score": 1.0,
      "candidate": "def p(n, k):\n    return 1.0 / (n * (n - 1)) * (1.0 + (k - 1) / (n - 1))\n\n\nif __name__ == \"__main__\":\n    print(p(10, 2))\n    print(p(10, 1))\n    print(p(10, 3))\n    print(p(10, 4))\n    print(p(10, 5))"
    },
    {
      "rank": 96,
      "score": 1.0,
      "candidate": "def permutation_coefficient(n, k):\n    if k == 0:\n        return 1\n    elif k > 0 and n == 1:\n        return 1\n    else:\n        return permutation_coefficient(n - 1, k) + permutation_coefficient(n - 1, k - 1)\n\n\nif __name__ == \"__main__\":\n    n = 2\n    k = 3\n    print(permutation_coefficient(n, k))"
    },
    {
      "rank": 97,
      "score": 1.0,
      "candidate": "def permutationCoefficient(p, n, k):\n    if n == 0:\n        return 1\n\n    if n == 1:\n        return p[n-1]\n\n    if k == 0:\n        return permutationCoefficient(p, n-1, 1)\n\n    return p[n-1] * permutationCoefficient(p, n-1, k-1)\n\n\nif __name__ == '__main__':\n    assert permutationCoefficient([1, 2, 3, 4, 5], 3, 1) == 1\n    assert permutationCoefficient([1, 2, 3, 4, 5], 3, 2) == 1\n    assert permutationCoefficient([1, 2, 3, 4, 5], 3, 3) == 1\n    assert permutationCoefficient([1, 2, 3, 4, 5], 3, 4) == 1\n    assert permutationCoefficient([1, 2, 3, 4, 5], 3, 5) == 1\n    assert permutationCoefficient([1, 2, 3, 4, 5], 3, 6) == 1\n    assert permutationCoefficient([1, 2, 3, 4, 5], 3, 7) == 1\n    assert permutationCoefficient([1, 2, 3, 4, 5], 3, 8) == 1\n    assert permutationCoefficient([1, 2, 3, 4, 5], 3, 9) == 1\n    assert permutationCoefficient([1, 2, 3, 4, 5], 3, 10) == 1"
    },
    {
      "rank": 98,
      "score": 1.0,
      "candidate": "def p(n, k):\n    if k == 1:\n        return 1\n    if n == 1:\n        return k * p(n - 1, k - 1)\n    return p(n - 1, k) * p(n, k - 1)\n\n\ndef permutationCoefficient(n, k):\n    return p(n, k)\n\n\nif __name__ == \"__main__\":\n    assert permutationCoefficient(2, 1) == 1\n    assert permutationCoefficient(2, 2) == 1\n    assert permutationCoefficient(2, 3) == 2\n    assert permutationCoefficient(2, 4) == 4\n    assert permutationCoefficient(2, 5) == 6\n    assert permutationCoefficient(3, 2) == 2\n    assert permutationCoefficient(3, 3) == 2\n    assert permutationCoefficient(3, 4) == 6\n    assert permutationCoefficient(3, 5) == 8"
    },
    {
      "rank": 99,
      "score": 1.0,
      "candidate": "def p(n, k):\n    return k**n\n\n\nprint(p(10, 5))\nprint(p(5, 10))"
    },
    {
      "rank": 100,
      "score": 1.0,
      "candidate": "def calc_perm_coefficient(n, k):\n    p = [1] * k\n    for i in range(n - 1, -1, -1):\n        p[i] = p[i + 1]\n    return p[0] * p[1]\n\n\nif __name__ == '__main__':\n    print(calc_perm_coefficient(6, 1))\n    print(calc_perm_coefficient(6, 2))\n    print(calc_perm_coefficient(6, 3))\n    print(calc_perm_coefficient(6, 4))\n    print(calc_perm_coefficient(6, 5))\n    print(calc_perm_coefficient(6, 6))\n    print(calc_perm_coefficient(6, 7))\n    print(calc_perm_coefficient(6, 8))\n    print(calc_perm_coefficient(6, 9))"
    }
  ]
}