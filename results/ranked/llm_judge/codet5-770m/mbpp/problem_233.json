{
  "timestamp": "2025-09-14T14:10:41.327288",
  "method": "improved_llm_judge",
  "judge_model": "codellama/CodeLlama-7b-Python-hf",
  "target_model": "codet5-770m",
  "dataset": "mbpp",
  "problem_number": 233,
  "total_candidates": 100,
  "results": [
    {
      "rank": 1,
      "score": 10.0,
      "candidate": "def next_perfect_square(n):\n    for i in range(1,n):\n        if n%i==0:\n            return i*i\n    return n\n\nprint(next_perfect_square(100))"
    },
    {
      "rank": 2,
      "score": 10.0,
      "candidate": "def perfect_square(num):\n    # Write your code here\n    # Find the next perfect square greater than num\n    # and return the result\n    for i in range(num, 0, -1):\n        if (i**2 > num):\n            return i**2\n    return -1\n\n\ndef main():\n    num = int(input(\"Please enter a number: \"))\n    print(\"The next perfect square greater than\", num, \"is\", perfect_square(num))\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 3,
      "score": 10.0,
      "candidate": "def next_square(n):\n    for i in range(1, int(n ** 0.5) + 1):\n        if (n % i == 0):\n            return i\n    return None\n\nprint(next_square(4))\nprint(next_square(9))\nprint(next_square(16))\nprint(next_square(24))\nprint(next_square(32))\nprint(next_square(48))\nprint(next_square(64))\nprint(next_square(96))\nprint(next_square(128))\nprint(next_square(192))\nprint(next_square(256))\nprint(next_square(512))\nprint(next_square(1024))\nprint(next_square(1024))\nprint(next_square(2048))\nprint(next_square(4096))\nprint(next_square(8192))\nprint(next_square(16384))\nprint(next_square(32768))\nprint(next_square(4294967295))"
    },
    {
      "rank": 4,
      "score": 10.0,
      "candidate": "def perfect_square(num):\n    if num == 1:\n        return 1\n    for i in range(2,num):\n        if num % i == 0:\n            return num\n    return num\n\nprint(perfect_square(4))\nprint(perfect_square(1))"
    },
    {
      "rank": 5,
      "score": 10.0,
      "candidate": "def next_square(n):\n    x = 1\n    while x**2 <= n:\n        x = x+1\n    return x\n\nprint(next_square(100))"
    },
    {
      "rank": 6,
      "score": 10.0,
      "candidate": "def next_square(n):\n    i=1\n    while i**2<=n:\n        i+=1\n    return i**2\n\nprint(next_square(100))"
    },
    {
      "rank": 7,
      "score": 10.0,
      "candidate": "def next_square(num):\n    # Code here\n    i = 0\n    while i < num:\n        if num % i == 0:\n            return i\n        i = i + 1\n\nprint(next_square(100))"
    },
    {
      "rank": 8,
      "score": 10.0,
      "candidate": "def next_perfect_square(n):\n    # Create an empty list\n    squares = []\n    # Loop through the range\n    for i in range(1, n+1):\n        # Calculate the square root of the current number\n        square_root = int(i**0.5)\n        # If the square root is less than the current number, then add the current square root to the list\n        if square_root < n:\n            squares.append(square_root)\n    # Return the next perfect square greater than the given number\n    return squares[-1]\n\n\nprint(next_perfect_square(4))\nprint(next_perfect_square(5))\nprint(next_perfect_square(6))\nprint(next_perfect_square(8))\nprint(next_perfect_square(13))\nprint(next_perfect_square(16))\nprint(next_perfect_square(21))\nprint(next_perfect_square(34))"
    },
    {
      "rank": 9,
      "score": 10.0,
      "candidate": "def perfectSquare(num):\n    \"\"\"\n    Finds the next perfect square greater than the given number\n    :param num: int\n    :return: int\n    \"\"\"\n    if num == 1:\n        return 2\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return i**2\n    return None\n\n\nif __name__ == \"__main__\":\n    print(perfectSquare(4))\n    print(perfectSquare(5))\n    print(perfectSquare(6))\n    print(perfectSquare(7))\n    print(perfectSquare(8))\n    print(perfectSquare(9))\n    print(perfectSquare(10))"
    },
    {
      "rank": 10,
      "score": 10.0,
      "candidate": "def next_square(num):\n    # Write your code here\n    return num**2\n\nprint(next_square(9))"
    },
    {
      "rank": 11,
      "score": 10.0,
      "candidate": "def next_perfect_square(num):\n    \"\"\"\n    :type num: int\n    :rtype: int\n    \"\"\"\n    i = 1\n    while i * i <= num:\n        if num % i == 0:\n            num //= i\n        else:\n            i += 1\n    return num\n\n\nif __name__ == \"__main__\":\n    print(next_perfect_square(1))\n    print(next_perfect_square(2))\n    print(next_perfect_square(3))\n    print(next_perfect_square(4))\n    print(next_perfect_square(5))\n    print(next_perfect_square(6))\n    print(next_perfect_square(7))\n    print(next_perfect_square(8))\n    print(next_perfect_square(9))\n    print(next_perfect_square(10))\n    print(next_perfect_square(11))\n    print(next_perfect_square(12))\n    print(next_perfect_square(13))\n    print(next_perfect_square(14))\n    print(next_perfect_square(15))\n    print(next_perfect_square(16))\n    print(next_perfect_square(17))\n    print(next_perfect_square(18))\n    print(next_perfect_square(19))\n    print(next_perfect_square(20))\n    print(next_perfect_square(21))\n    print(next_perfect_square(22))\n    print(next_perfect_square(23))\n    print(next_perfect_square(24))\n    print(next_perfect_square(25))\n    print(next_perfect_square(26))\n    print(next_perfect_square(27))\n    print(next_perfect_square(28))\n    print(next_perfect_square(29))\n    print(next_perfect_square(30))\n    print(next_perfect_square(31))\n    print(next_perfect_square(32))\n    print(next_perfect"
    },
    {
      "rank": 12,
      "score": 10.0,
      "candidate": "def next_square(n):\n    # Write your code here\n    i = 0\n    while i**2 < n:\n        i += 1\n    return i**2\n\nif __name__ == \"__main__\":\n    print(next_square(8))"
    },
    {
      "rank": 13,
      "score": 10.0,
      "candidate": "def perfect_square(num):\n    num = int(num)\n    while True:\n        num = num**2\n        if num > num**2:\n            return num"
    },
    {
      "rank": 14,
      "score": 10.0,
      "candidate": "def next_perfect_square(num):\n    \"\"\"\n    :type num: int\n    :rtype: int\n    \"\"\"\n    if num == 1:\n        return 1\n    i = 2\n    while i * i <= num:\n        if num % i == 0:\n            return i\n        i += 1\n    return num\n\nprint(next_perfect_square(10))"
    },
    {
      "rank": 15,
      "score": 10.0,
      "candidate": "def next_square(number):\n    # Your code here\n    return (number ** 2) + 1\n\nprint(next_square(16))\nprint(next_square(32))\nprint(next_square(64))\nprint(next_square(128))\nprint(next_square(256))"
    },
    {
      "rank": 16,
      "score": 10.0,
      "candidate": "def next_perfect_square(n):\n    \"\"\"\n    :param n: integer\n    :return: the next perfect square greater than n\n    \"\"\"\n    i = 1\n    while i * i <= n:\n        i += 1\n    return i * i\n\n\nif __name__ == \"__main__\":\n    print(next_perfect_square(8))"
    },
    {
      "rank": 17,
      "score": 10.0,
      "candidate": "def next_square_greater(num):\n    for i in range(1, num+1):\n        if num % i == 0:\n            return i\n\nprint(next_square_greater(6))\nprint(next_square_greater(8))\nprint(next_square_greater(14))\nprint(next_square_greater(16))\nprint(next_square_greater(32))"
    },
    {
      "rank": 18,
      "score": 10.0,
      "candidate": "def next_square_greater_than(num):\n    for i in range(1, num):\n        if i ** 2 > num:\n            return i\n    return None\n\n\nif __name__ == \"__main__\":\n    print(next_square_greater_than(int(input(\"Enter a number: \"))))"
    },
    {
      "rank": 19,
      "score": 10.0,
      "candidate": "def next_perfect_square(n):\n    for i in range(1,n+1):\n        if i**2==n:\n            return i\n\nprint(next_perfect_square(4))\nprint(next_perfect_square(6))\nprint(next_perfect_square(8))\nprint(next_perfect_square(12))\nprint(next_perfect_square(16))\nprint(next_perfect_square(20))\nprint(next_perfect_square(24))\nprint(next_perfect_square(30))\nprint(next_perfect_square(40))\nprint(next_perfect_square(48))\nprint(next_perfect_square(60))\nprint(next_perfect_square(80))\nprint(next_perfect_square(96))\nprint(next_perfect_square(100))"
    },
    {
      "rank": 20,
      "score": 10.0,
      "candidate": "def next_square(num):\n    sq = num\n    while sq*sq > num:\n        sq += 1\n    return sq-1\n\n\nprint(next_square(8))"
    },
    {
      "rank": 21,
      "score": 10.0,
      "candidate": "def next_perfect_square(num):\n    i = num\n    j = num\n    while j > 1:\n        if j * j > num:\n            i = i + 1\n        j = j - 1\n    return i\n\nprint(next_perfect_square(1))\nprint(next_perfect_square(2))\nprint(next_perfect_square(3))\nprint(next_perfect_square(4))\nprint(next_perfect_square(5))\nprint(next_perfect_square(6))\nprint(next_perfect_square(7))\nprint(next_perfect_square(8))\nprint(next_perfect_square(9))\nprint(next_perfect_square(10))"
    },
    {
      "rank": 22,
      "score": 10.0,
      "candidate": "def perfect_square(n):\n    while True:\n        if n % 2 == 0:\n            n += 1\n        else:\n            n = n + 1\n        if n == 4:\n            return n\n\n\nprint(perfect_square(1))\nprint(perfect_square(10))\nprint(perfect_square(100))"
    },
    {
      "rank": 23,
      "score": 10.0,
      "candidate": "def next_perfect_square(n):\n    \"\"\"\n    :param n: a positive integer\n    :return: the next perfect square greater than the number\n    \"\"\"\n    i = 2\n    while i * i <= n:\n        if n % i == 0:\n            return i\n        i += 1\n\n\nif __name__ == '__main__':\n    print(next_perfect_square(0))\n    print(next_perfect_square(1))\n    print(next_perfect_square(2))\n    print(next_perfect_square(3))\n    print(next_perfect_square(4))\n    print(next_perfect_square(5))\n    print(next_perfect_square(6))\n    print(next_perfect_square(7))\n    print(next_perfect_square(8))\n    print(next_perfect_square(9))\n    print(next_perfect_square(10))"
    },
    {
      "rank": 24,
      "score": 10.0,
      "candidate": "def next_square(num):\n    \"\"\"\n    :param num:\n    :return:\n    \"\"\"\n    i = 1\n    while i ** 2 <= num:\n        i += 1\n    return i ** 2\n\n\nprint(next_square(100))"
    },
    {
      "rank": 25,
      "score": 10.0,
      "candidate": "def next_square(num):\n    i = 1\n    while i*i <= num:\n        if num % i == 0:\n            return i\n        i += 1\n    return None\n\n\nif __name__ == \"__main__\":\n    assert next_square(1) == 1\n    assert next_square(2) == 2\n    assert next_square(3) == 4\n    assert next_square(4) == 8\n    assert next_square(5) == 13\n    assert next_square(6) == 21\n    assert next_square(7) == 34\n    assert next_square(8) == 56\n    assert next_square(9) == 64\n    assert next_square(10) == 81\n    assert next_square(11) == 96\n    assert next_square(12) == 110\n    assert next_square(13) == 121\n    assert next_square(14) == 138\n    assert next_square(15) == 146\n    assert next_square(16) == 154\n    assert next_square(17) == 155\n    assert next_square(18) == 181\n    assert next_square(19) == 198\n    assert next_square(20) == 211\n    assert next_square(21) == 213\n    assert next_square(22) == 216\n    assert next_square(23) == 217\n    assert next_square(24) == 218\n    assert next_square(25) == 219\n    assert next_square(26) == 221\n    assert next_square(27) == 227\n    assert next_square(28) == 228\n    assert next_square(29) == 229\n    assert next_square(30) == 230\n    assert next_square(31) == 231\n    assert next_square(32) == 232\n    assert next_square(33) == 233\n    assert next_square(34) == 234\n    assert next_square(35) == 235\n    assert next_square(36) == 236\n    assert next_square(37) == 237\n    assert next_square(38) == 238\n    assert next_square(39)"
    },
    {
      "rank": 26,
      "score": 10.0,
      "candidate": "def perfect_square(n):\n    return int((n*n)/2)\n\n\nprint(perfect_square(5))\nprint(perfect_square(8))\nprint(perfect_square(13))\nprint(perfect_square(17))\nprint(perfect_square(19))\nprint(perfect_square(23))\nprint(perfect_square(27))\nprint(perfect_square(31))\nprint(perfect_square(41))\nprint(perfect_square(59))\nprint(perfect_square(81))\nprint(perfect_square(97))\nprint(perfect_square(99))\nprint(perfect_square(101))\nprint(perfect_square(111))\nprint(perfect_square(129))\nprint(perfect_square(131))\nprint(perfect_square(137))\nprint(perfect_square(143))\nprint(perfect_square(154))\nprint(perfect_square(159))\nprint(perfect_square(171))\nprint(perfect_square(191))\nprint(perfect_square(197))\nprint(perfect_square(199))\nprint(perfect_square(200))\nprint(perfect_square(211))\nprint(perfect_square(227))\nprint(perfect_square(231))\nprint(perfect_square(241))\nprint(perfect_square(251))\nprint(perfect_square(271))\nprint(perfect_square(281))\nprint(perfect_square(291))\nprint(perfect_square(211))\nprint(perfect_square(227))\nprint(perfect_square(231))\nprint(perfect_square(241))\nprint(perfect_square(251))\nprint(perfect_square(271))\nprint(perfect_square(281))\nprint(perfect_square(291))\nprint(perfect_square(211))\nprint(perfect_square(227))\nprint(perfect_square(231))\nprint(perfect_square(241))\nprint(perfect_square("
    },
    {
      "rank": 27,
      "score": 9.0,
      "candidate": "def perfect_square(x):\n    n = x\n    while True:\n        n = n * n\n        if n > x:\n            return n\n\n\nprint(perfect_square(20))"
    },
    {
      "rank": 28,
      "score": 9.0,
      "candidate": "def next_perfect_square(num):\n    \"\"\"\n    :type num: int\n    :rtype: int\n    \"\"\"\n    x = 0\n    y = num\n    while y > x:\n        x = x + 1\n        y = y + y\n    return x\n\nprint(next_perfect_square(16))"
    },
    {
      "rank": 29,
      "score": 8.0,
      "candidate": "import math\n\ndef next_perfect_square(number):\n    for i in range(1, int(math.sqrt(number)) + 1):\n        if number % i == 0:\n            return i\n\nprint(next_perfect_square(9))"
    },
    {
      "rank": 30,
      "score": 8.0,
      "candidate": "def next_square(number):\n    # This function is a simple function that returns the next perfect square greater than the given number.\n    # It returns -1 if the number is less than or equal to 1.\n    # It returns 0 if the number is greater than 1.\n\n    # The first iteration is to calculate the next perfect square greater than the given number.\n    # Then we will try to use the previous iteration as a starting point.\n\n    # We will start from the previous iteration as a starting point.\n\n    # The next iteration is to calculate the next perfect square greater than the given number.\n    # Then we will try to use the previous iteration as a starting point.\n\n    # This is the end of the function.\n    # The function will return -1 if the given number is less than or equal to 1.\n    # The function will return 0 if the given number is greater than 1.\n\n    # We will start from the previous iteration as a starting point.\n\n    # The next iteration is to calculate the next perfect square greater than the given number.\n    # Then we will try to use the previous iteration as a starting point.\n\n    # This is the end of the function.\n    # The function will return -1 if the given number is less than or equal to 1.\n    # The function will return 0 if the given number is greater than 1.\n\n    # We will start from the previous iteration as a starting point.\n\n    # The next iteration is to calculate the next perfect square greater than the given number.\n    # Then we will try to use the previous iteration as a starting point.\n\n    # This is the end of the function.\n    # The function will return -1 if the given number is less than or equal to 1.\n    # The function will return 0 if the given number is greater than 1.\n\n    # We will start from the previous iteration as a starting point.\n\n    # The next iteration is to calculate the next perfect square greater than the given number.\n    # Then we will try to use the previous iteration as a starting point.\n\n    # This is the end of the function.\n    # The function will return -1 if the given number is less than or equal to 1.\n    # The function will return 0 if the given number is greater than 1."
    },
    {
      "rank": 31,
      "score": 8.0,
      "candidate": "def next_square(number):\n    num = number\n    i = 0\n    while num > 1:\n        num = num - (num % 2)\n        i += 1\n\n    return i\n\n\nif __name__ == \"__main__\":\n    number = int(input(\"Enter a number: \"))\n    result = next_square(number)\n    print(result)"
    },
    {
      "rank": 32,
      "score": 8.0,
      "candidate": "def next_perfect_square(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    x = 2\n    while x * x <= n:\n        if n % x == 0:\n            return x\n        x += 1\n    return 0\n\nprint(next_perfect_square(100))"
    },
    {
      "rank": 33,
      "score": 8.0,
      "candidate": "def next_square_greater_than(num):\n    \"\"\"\n    :type num: int\n    :rtype: int\n    \"\"\"\n    for i in range(1, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return i ** 2\n    return num ** 2\n\n\nif __name__ == \"__main__\":\n    print(next_square_greater_than(9))"
    },
    {
      "rank": 34,
      "score": 8.0,
      "candidate": "def perfect_square(x):\n    i = 0\n    while i < x:\n        if (x % i == 0):\n            i += 1\n            continue\n        else:\n            x = x * x\n            i += 1\n    return x\n\nprint(perfect_square(3))\nprint(perfect_square(4))\nprint(perfect_square(5))\nprint(perfect_square(6))\nprint(perfect_square(7))\nprint(perfect_square(8))\nprint(perfect_square(9))"
    },
    {
      "rank": 35,
      "score": 8.0,
      "candidate": "def next_perfect_square(num):\n    max_num = num * num\n    for i in range(2, int(max_num)):\n        if num % i == 0:\n            return i\n\nprint(next_perfect_square(3))\nprint(next_perfect_square(5))\nprint(next_perfect_square(7))\nprint(next_perfect_square(9))\nprint(next_perfect_square(11))\nprint(next_perfect_square(13))\nprint(next_perfect_square(15))\nprint(next_perfect_square(17))\nprint(next_perfect_square(19))\nprint(next_perfect_square(23))\nprint(next_perfect_square(27))\nprint(next_perfect_square(29))"
    },
    {
      "rank": 36,
      "score": 8.0,
      "candidate": "def perfect_square(n):\n    \"\"\"\n    :param n:\n    :return:\n    \"\"\"\n    for i in range(n):\n        if i == 0:\n            return i\n        elif i == n - 1:\n            return i + 1\n        else:\n            while i*i <= n:\n                if i*i > n:\n                    return i\n                else:\n                    i += 1\n    return -1\n\n\nif __name__ == '__main__':\n    print(perfect_square(4))\n    print(perfect_square(9))\n    print(perfect_square(15))"
    },
    {
      "rank": 37,
      "score": 8.0,
      "candidate": "def next_square(n):\n    x = 0\n    while True:\n        x = (x + 1) * x\n        if x > n:\n            return x\n\nprint(next_square(4))"
    },
    {
      "rank": 38,
      "score": 8.0,
      "candidate": "def perfectSquare(num):\n    \"\"\"\n    :param num: the number to find the next perfect square greater than.\n    :type num: int\n    :return: the next perfect square greater than the given number.\n    :rtype: int\n    \"\"\"\n    if num <= 0:\n        raise ValueError(\"Input number must be positive.\")\n    if num == 1:\n        return 1\n    i = 1\n    while i * i <= num:\n        if num % i == 0:\n            return i\n        i += 1\n\n\nif __name__ == '__main__':\n    print(perfectSquare(4))"
    },
    {
      "rank": 39,
      "score": 8.0,
      "candidate": "def next_perfect_square(n):\n    \"\"\"\n    :param n:\n    :return:\n    \"\"\"\n    while True:\n        square = n * n\n        if square > n:\n            return square\n        n += 1\n\n\nif __name__ == '__main__':\n    n = int(input(\"Enter a number: \"))\n    print(next_perfect_square(n))"
    },
    {
      "rank": 40,
      "score": 8.0,
      "candidate": "def next_square(n):\n    i = 1\n    while i * i < n:\n        i += 1\n\n    return i - 1\n\n\nprint(next_square(10000))"
    },
    {
      "rank": 41,
      "score": 8.0,
      "candidate": "def next_square(num):\n    \"\"\"\n    :type num: int\n    :rtype: int\n    \"\"\"\n    if num == 0:\n        return 0\n    if num == 1:\n        return 1\n    i = 2\n    while i*i <= num:\n        if num % i == 0:\n            return i\n        i += 1\n    return -1\n\nprint(next_square(20))"
    },
    {
      "rank": 42,
      "score": 8.0,
      "candidate": "def perfect_square(num):\n    a = 1\n    b = num\n    while b * b > num:\n        a += 1\n        b = (a * a + num) / 2\n    return a\n\n\nif __name__ == \"__main__\":\n    print(perfect_square(4))\n    print(perfect_square(3))\n    print(perfect_square(2))\n    print(perfect_square(1))"
    },
    {
      "rank": 43,
      "score": 8.0,
      "candidate": "def next_perfect_square(num):\n    \"\"\"\n    :type num: int\n    :rtype: int\n    \"\"\"\n    i = 0\n    j = 1\n    while j*j <= num:\n        i += 1\n        j *= i\n    return i - 1\n\n\nprint(next_perfect_square(5))"
    },
    {
      "rank": 44,
      "score": 8.0,
      "candidate": "def next_square(num):\n    n = num\n    while n % 4 == 0:\n        n = n / 4\n        n = int(n)\n    return n * n\n\nprint(next_square(3))\nprint(next_square(4))\nprint(next_square(5))\nprint(next_square(6))\nprint(next_square(7))\nprint(next_square(8))\nprint(next_square(9))\nprint(next_square(10))"
    },
    {
      "rank": 45,
      "score": 8.0,
      "candidate": "def next_square(num):\n    \"\"\"\n    :type num: int\n    :rtype: int\n    \"\"\"\n    if num == 1:\n        return 1\n    else:\n        return (num * num) + 1\n\n\nprint(next_square(9))"
    },
    {
      "rank": 46,
      "score": 8.0,
      "candidate": "def next_perfect_square(n):\n    # Initialize variables\n    i = 0\n    # Find the next perfect square greater than n\n    while i < n:\n        if n % i == 0:\n            i += 1\n            n = n / i\n        else:\n            i += 1\n    return n\n\nprint(next_perfect_square(100))"
    },
    {
      "rank": 47,
      "score": 8.0,
      "candidate": "def next_perfect_square(n):\n    i = 1\n    while i * i <= n:\n        if n % i == 0:\n            i += 1\n        else:\n            i += 1\n    return i\n\n\nif __name__ == '__main__':\n    print(next_perfect_square(100))"
    },
    {
      "rank": 48,
      "score": 8.0,
      "candidate": "def perfect_square(n):\n    for i in range(1, n+1):\n        if i**2 == n:\n            return i\n\nprint(perfect_square(100))"
    },
    {
      "rank": 49,
      "score": 8.0,
      "candidate": "def next_perfect_square(n):\n    m = int((n*n)/2)\n    while m**2 < n:\n        m += 1\n    return m\n\n\nif __name__ == \"__main__\":\n    n = int(input())\n    print(next_perfect_square(n))"
    },
    {
      "rank": 50,
      "score": 8.0,
      "candidate": "def perfect_square(n):\n\ta=1\n\twhile a<n:\n\t\tif a*a>n:\n\t\t\treturn a\n\t\ta+=1\n\treturn None\n\nprint(perfect_square(1000000))\nprint(perfect_square(1000000000000))"
    },
    {
      "rank": 51,
      "score": 8.0,
      "candidate": "def next_square(n):\n    n = int(n)\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    for i in range(2, int(n**0.5)+1):\n        if n % i == 0:\n            return i\n    return n\n\nprint(next_square(0))\nprint(next_square(1))\nprint(next_square(10))\nprint(next_square(100))\nprint(next_square(1000))\nprint(next_square(1000000))"
    },
    {
      "rank": 52,
      "score": 8.0,
      "candidate": "def next_square(n):\n    i = 0\n    while i * i <= n:\n        i += 1\n    return i * i\n\n\nprint(next_square(10000000))"
    },
    {
      "rank": 53,
      "score": 8.0,
      "candidate": "def perfect_square_greater(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    low = 1\n    high = n\n    while low <= high:\n        mid = (low + high) // 2\n        if mid**2 > n:\n            high = mid - 1\n        else:\n            low = mid + 1\n    return low\n\n\nprint(perfect_square_greater(8))"
    },
    {
      "rank": 54,
      "score": 8.0,
      "candidate": "def perfect_square(num):\n    \"\"\"\n    Finds the next perfect square greater than num.\n    \"\"\"\n    i = 0\n    j = num\n    while (i < num):\n        if (j**2 > num):\n            return j**2\n        else:\n            i += 1\n            j += 1\n    return i**2\n\n\nprint(perfect_square(4))"
    },
    {
      "rank": 55,
      "score": 8.0,
      "candidate": "def next_perfect_square(num):\n    if num < 0:\n        return False\n    i = 0\n    while i * i <= num:\n        if num % i == 0:\n            i += 1\n            continue\n        else:\n            return num\n    return False\n\n\nprint(next_perfect_square(14))"
    },
    {
      "rank": 56,
      "score": 8.0,
      "candidate": "def next_square(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 3\n    else:\n        for i in range(3, int(n ** 0.5) + 1, 2):\n            if n % i == 0:\n                return i\n        return int(n ** 0.5) + 1\n\n\nprint(next_square(7))"
    },
    {
      "rank": 57,
      "score": 8.0,
      "candidate": "def perfect_square(num):\n    # write your code here\n    max_num = int(num**0.5)\n    while num > max_num:\n        num -= max_num\n    return num\n\nprint(perfect_square(100))"
    },
    {
      "rank": 58,
      "score": 8.0,
      "candidate": "def next_square(n):\n    # Code here\n    i = 1\n    while i*i < n:\n        i += 1\n    return i-1\n\n\nif __name__ == \"__main__\":\n    n = int(input(\"Enter a number: \"))\n    print(\"The next perfect square greater than {} is {}\".format(n, next_square(n)))"
    },
    {
      "rank": 59,
      "score": 8.0,
      "candidate": "def next_square(number):\n    i = 1\n    while True:\n        i += 1\n        if i * i > number:\n            return i\n\n\nprint(next_square(100))"
    },
    {
      "rank": 60,
      "score": 8.0,
      "candidate": "def next_perfect_square(num):\n    if num == 1:\n        return 1\n    else:\n        return num * num + 1\n\n\nprint(next_perfect_square(4))"
    },
    {
      "rank": 61,
      "score": 8.0,
      "candidate": "def next_square(num):\n    for i in range(1, num):\n        if num % i == 0:\n            return i * i\n\nprint(next_square(100))"
    },
    {
      "rank": 62,
      "score": 8.0,
      "candidate": "def next_square(n):\n    return (n * n) + 1\n\n\nn = int(input(\"Enter a number: \"))\nprint(next_square(n))"
    },
    {
      "rank": 63,
      "score": 8.0,
      "candidate": "def next_square(num):\n    if num <= 1:\n        return num\n    i = 1\n    while i * i <= num:\n        if num % i == 0:\n            return num / i\n        i += 1\n    return num\n\n\nprint(next_square(1))\nprint(next_square(2))\nprint(next_square(3))\nprint(next_square(4))\nprint(next_square(5))\nprint(next_square(6))\nprint(next_square(7))\nprint(next_square(8))\nprint(next_square(9))"
    },
    {
      "rank": 64,
      "score": 8.0,
      "candidate": "def perfect_square(num):\n    i = 0\n    while i ** 2 < num:\n        i += 1\n    return i ** 2\n\n\nprint(perfect_square(100))\nprint(perfect_square(1000))\nprint(perfect_square(1))\nprint(perfect_square(10))"
    },
    {
      "rank": 65,
      "score": 8.0,
      "candidate": "def perfect_square(num):\n    \"\"\"\n    :param num: the number you want to find the next perfect square greater than\n    :return: the next perfect square greater than the number\n    \"\"\"\n    x = 1\n    while x**2 <= num:\n        x += 1\n    return x**2\n\n\nprint(perfect_square(int(input(\"enter the number\"))))"
    },
    {
      "rank": 66,
      "score": 8.0,
      "candidate": "def next_perfect_square(n):\n    i = 1\n    while i*i <= n:\n        if n % i == 0:\n            return i\n        i += 1\n\nprint(next_perfect_square(1000))"
    },
    {
      "rank": 67,
      "score": 8.0,
      "candidate": "def next_square(num):\n    # print(num)\n    # print(next_square(int(num)))\n    return num * (num + 1) // 2\n\n\nif __name__ == \"__main__\":\n    print(next_square(100))"
    },
    {
      "rank": 68,
      "score": 8.0,
      "candidate": "def next_square(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    if n % 2 == 0:\n        return (n - 1) * (n - 1) / 2\n    return (n - 1) * (n - 1) + 1\n\n\nif __name__ == '__main__':\n    print(next_square(1))\n    print(next_square(2))\n    print(next_square(3))\n    print(next_square(4))\n    print(next_square(5))\n    print(next_square(6))\n    print(next_square(7))\n    print(next_square(8))\n    print(next_square(9))\n    print(next_square(10))\n    print(next_square(11))\n    print(next_square(12))\n    print(next_square(13))\n    print(next_square(14))\n    print(next_square(15))\n    print(next_square(16))\n    print(next_square(17))\n    print(next_square(18))\n    print(next_square(19))\n    print(next_square(20))\n    print(next_square(21))\n    print(next_square(22))\n    print(next_square(23))\n    print(next_square(24))\n    print(next_square(25))\n    print(next_square(26))\n    print(next_square(27))\n    print(next_square(28))\n    print(next_square(29))\n    print(next_square(30))\n    print(next_square(31))\n    print(next_square(32))\n    print(next_square(33))\n    print(next_square(34))\n    print(next_square(35))\n    print(next_square(36))\n    print(next_square(37))\n    print(next_square(38))\n    print(next_square(39))\n    print(next_square(40))\n    print(next_"
    },
    {
      "rank": 69,
      "score": 8.0,
      "candidate": "def next_perfect_square(number):\n    \"\"\"\n    :type number: int\n    :rtype: int\n    \"\"\"\n    i = 0\n    j = number\n    while i < j:\n        if j % i == 0:\n            i += 1\n            j = i * i\n        else:\n            j -= 1\n    return j\n\n\nif __name__ == \"__main__\":\n    print(next_perfect_square(5))"
    },
    {
      "rank": 70,
      "score": 8.0,
      "candidate": "def next_square(n):\n    i = n\n    while i > 1:\n        i = i ** 2\n    return i\n\n\nprint(next_square(1))"
    },
    {
      "rank": 71,
      "score": 8.0,
      "candidate": "def next_square(num):\n    if num < 0:\n        return -1\n    if num == 0:\n        return 0\n\n    for i in range(1, num):\n        if num % i == 0:\n            return i\n    return -1\n\n\ndef test_next_square():\n    assert next_square(0) == 0\n    assert next_square(1) == 1\n    assert next_square(10) == 13\n    assert next_square(100) == 200\n    assert next_square(1000) == 40000\n    assert next_square(10000000) == 9999999\n\n\nif __name__ == \"__main__\":\n    test_next_square()"
    },
    {
      "rank": 72,
      "score": 8.0,
      "candidate": "def next_square(n):\n    for i in range(1,n+1):\n        if i*i > n:\n            return i"
    },
    {
      "rank": 73,
      "score": 8.0,
      "candidate": "def perfect_square(n):\n    \"\"\"\n    Function to find the next perfect square greater than a given number.\n    :param n: number to find the next perfect square greater than\n    :return: next perfect square greater than n\n    \"\"\"\n    if n < 0:\n        return None\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    sqr = n\n    i = 2\n    while i * i <= n:\n        if n % i == 0:\n            sqr += i\n            i += 1\n        else:\n            i += 1\n    return sqr\n\nprint(perfect_square(100))\nprint(perfect_square(1000))\nprint(perfect_square(1))\nprint(perfect_square(0))\nprint(perfect_square(-1))\nprint(perfect_square(2))\nprint(perfect_square(3))\nprint(perfect_square(4))\nprint(perfect_square(5))\nprint(perfect_square(6))\nprint(perfect_square(7))\nprint(perfect_square(8))\nprint(perfect_square(9))\nprint(perfect_square(10))\nprint(perfect_square(11))\nprint(perfect_square(12))\nprint(perfect_square(13))\nprint(perfect_square(14))\nprint(perfect_square(15))\nprint(perfect_square(16))\nprint(perfect_square(17))\nprint(perfect_square(18))\nprint(perfect_square(19))\nprint(perfect_square(20))\nprint(perfect_square(21))\nprint(perfect_square(22))\nprint(perfect_square(23))\nprint(perfect_square(24))\nprint(perfect_square(25))\nprint(perfect_square(26))\nprint(perfect_square(27))\nprint(perfect_square(28))\nprint(perfect_square(29))\nprint(perfect_square(30))\nprint(perfect_square(31))\nprint(perfect_square(32))\nprint(perfect_square"
    },
    {
      "rank": 74,
      "score": 8.0,
      "candidate": "def next_square(n):\n    square = 2\n    while square * square <= n:\n        square += 1\n    return square\n\n\n\nif __name__ == '__main__':\n    print(next_square(int(input())))"
    },
    {
      "rank": 75,
      "score": 8.0,
      "candidate": "def next_square(n):\n    # write your code here\n    i = 2\n    while i * i <= n:\n        if n % i == 0:\n            i += 1\n        else:\n            n = n / i\n    return n\n\n\nprint(next_square(9))\nprint(next_square(8))\nprint(next_square(7))\nprint(next_square(6))\nprint(next_square(5))"
    },
    {
      "rank": 76,
      "score": 8.0,
      "candidate": "def next_perfect_square(n):\n\t\"\"\"\n\t:param n: The number to be checked\n\t:return: The next perfect square greater than n\n\t\"\"\"\n\ti = 1\n\twhile i**2 <= n:\n\t\tif i**2 == n:\n\t\t\treturn i**2\n\t\ti += 1\n\nif __name__ == \"__main__\":\n\tprint(next_perfect_square(1))\n\tprint(next_perfect_square(2))\n\tprint(next_perfect_square(3))\n\tprint(next_perfect_square(4))\n\tprint(next_perfect_square(5))"
    },
    {
      "rank": 77,
      "score": 8.0,
      "candidate": "def perfect_square_greater(n):\n    i=0\n    while i<n:\n        if n%i==0:\n            i=i+1\n        else:\n            i=i+1\n    return i\n\n\nif __name__==\"__main__\":\n    print(perfect_square_greater(5))\n    print(perfect_square_greater(8))\n    print(perfect_square_greater(10))\n    print(perfect_square_greater(20))\n    print(perfect_square_greater(30))\n    print(perfect_square_greater(40))\n    print(perfect_square_greater(50))\n    print(perfect_square_greater(60))\n    print(perfect_square_greater(70))\n    print(perfect_square_greater(80))\n    print(perfect_square_greater(90))\n    print(perfect_square_greater(100))"
    },
    {
      "rank": 78,
      "score": 8.0,
      "candidate": "def next_perfect_square(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    x = 1\n    while x * x <= n:\n        x += 1\n    return x - 1\n\n\nif __name__ == \"__main__\":\n    print(next_perfect_square(5))\n    print(next_perfect_square(4))\n    print(next_perfect_square(3))\n    print(next_perfect_square(2))\n    print(next_perfect_square(1))"
    },
    {
      "rank": 79,
      "score": 8.0,
      "candidate": "def next_square(num):\n    while num >= 2:\n        if num % 4 == 0:\n            num /= 4\n        else:\n            num /= 2\n    return num\n\nprint(next_square(10))\nprint(next_square(2))\nprint(next_square(4))\nprint(next_square(8))\nprint(next_square(16))"
    },
    {
      "rank": 80,
      "score": 8.0,
      "candidate": "def next_perfect_square(n):\n    x = 1\n    while x*x <= n:\n        x += 1\n    return x*x\n\n\nprint(next_perfect_square(4))\nprint(next_perfect_square(5))\nprint(next_perfect_square(6))\nprint(next_perfect_square(7))\nprint(next_perfect_square(8))\nprint(next_perfect_square(9))\nprint(next_perfect_square(10))\nprint(next_perfect_square(11))"
    },
    {
      "rank": 81,
      "score": 8.0,
      "candidate": "def next_square(number):\n    n=number\n    s=1\n    while s*s<n:\n        s+=1\n    return s\n\nprint(next_square(4))"
    },
    {
      "rank": 82,
      "score": 8.0,
      "candidate": "def next_perfect_square(num):\n    \"\"\"\n    :type num: int\n    :rtype: int\n    \"\"\"\n    if num < 0:\n        return -1\n    s = 1\n    while s * s <= num:\n        if s * s == num:\n            return num\n        s += 1\n    return -1\n\n\ndef main():\n    print(next_perfect_square(1))\n    print(next_perfect_square(2))\n    print(next_perfect_square(3))\n    print(next_perfect_square(4))\n    print(next_perfect_square(5))\n    print(next_perfect_square(6))\n    print(next_perfect_square(7))\n    print(next_perfect_square(8))\n    print(next_perfect_square(9))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 83,
      "score": 8.0,
      "candidate": "def next_square(n):\n    i = 1\n    while i < n:\n        if i * i == n:\n            return i\n        i += 1\n\n\nprint(next_square(15))"
    },
    {
      "rank": 84,
      "score": 8.0,
      "candidate": "def next_square(num):\n    n = 0\n    while num > 1:\n        n += 1\n        num /= 2\n    return n\n\n\nprint(next_square(100))"
    },
    {
      "rank": 85,
      "score": 8.0,
      "candidate": "def next_perfect_square(num):\n    num = int(num)\n    if num == 1:\n        return 1\n    for i in range(2, num):\n        if num % i == 0:\n            return i**2\n    return num**2\n\n\nprint(next_perfect_square(1))\nprint(next_perfect_square(2))\nprint(next_perfect_square(4))"
    },
    {
      "rank": 86,
      "score": 8.0,
      "candidate": "def next_square_greater_than(number):\n    while True:\n        if number**2 > number:\n            return number\n        number += 1\n\nif __name__ == \"__main__\":\n    print(next_square_greater_than(int(input(\"Enter a number: \"))))"
    },
    {
      "rank": 87,
      "score": 8.0,
      "candidate": "def next_square_greater_than_number(n):\n    return int(n**0.5)\n\nprint(next_square_greater_than_number(10))"
    },
    {
      "rank": 88,
      "score": 8.0,
      "candidate": "def perfectSquare(n):\n    n = int(n)\n    a = 0\n    b = int(n**0.5)\n    while b**2 < n:\n        a += 1\n        b = int(n**0.5)\n    if a > 1:\n        for i in range(a):\n            if n%i == 0:\n                return i\n    else:\n        return n\n\nif __name__ == '__main__':\n    print(perfectSquare(5))\n    print(perfectSquare(12))\n    print(perfectSquare(32))\n    print(perfectSquare(100))"
    },
    {
      "rank": 89,
      "score": 8.0,
      "candidate": "import math\n\ndef next_perfect_square(num):\n    square = math.floor(math.sqrt(num))\n    return square\n\n\nprint(next_perfect_square(100))\nprint(next_perfect_square(10001))"
    },
    {
      "rank": 90,
      "score": 8.0,
      "candidate": "def next_square(n):\n    \"\"\"\n    :param n: the number to find the next perfect square greater than\n    :return: the next perfect square greater than n\n    \"\"\"\n    i = 1\n    while True:\n        if i * i > n:\n            break\n        i += 1\n    return i * i\n\nprint(next_square(9))"
    },
    {
      "rank": 91,
      "score": 8.0,
      "candidate": "def next_perfect_square(n):\n    \"\"\"\n    Finds the next perfect square greater than n\n    :param n:\n    :return:\n    \"\"\"\n    i = 1\n    while i * i <= n:\n        if n % i == 0:\n            return n // i\n        i += 1\n    return -1\n\n\nif __name__ == \"__main__\":\n    print(next_perfect_square(100))"
    },
    {
      "rank": 92,
      "score": 8.0,
      "candidate": "def next_square(n):\n    square = 1\n    while True:\n        square *= square\n        if square > n:\n            return square\n\n\nprint(next_square(4))"
    },
    {
      "rank": 93,
      "score": 8.0,
      "candidate": "def perfect_square(n):\n    max_value = int(n**0.5)+1\n    for i in range(max_value):\n        if n%i == 0:\n            return i**2\n\nprint(perfect_square(5))"
    },
    {
      "rank": 94,
      "score": 8.0,
      "candidate": "def next_square(num):\n    while num > 1:\n        if num % 2 == 0:\n            num //= 2\n        else:\n            num += 1\n    return num\n\nprint(next_square(1))\nprint(next_square(5))\nprint(next_square(10))\nprint(next_square(15))\nprint(next_square(25))\nprint(next_square(30))\nprint(next_square(50))\nprint(next_square(100))"
    },
    {
      "rank": 95,
      "score": 8.0,
      "candidate": "def next_perfect_square(n):\n    for i in range(n,1,-1):\n        if n%i == 0:\n            return i\n    return 0\nprint(next_perfect_square(3))"
    },
    {
      "rank": 96,
      "score": 8.0,
      "candidate": "import math\n\ndef perfect_square(n):\n    return int(math.sqrt(n))\n\ndef main():\n    print(perfect_square(8))\n    print(perfect_square(4))\n    print(perfect_square(9))\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 97,
      "score": 8.0,
      "candidate": "def next_perfect_square(n):\n    # start from 1\n    i = 1\n    # while i < n:\n    while True:\n        i += 1\n        if (i * i) > n:\n            return i\n\n\nprint(next_perfect_square(16))\nprint(next_perfect_square(12))\nprint(next_perfect_square(8))\nprint(next_perfect_square(8))"
    },
    {
      "rank": 98,
      "score": 8.0,
      "candidate": "import math\n\n\ndef find_next_square(n):\n    \"\"\"\n    Find the next perfect square greater than n\n    \"\"\"\n    if n == 0:\n        return 0\n    m = int(math.sqrt(n))\n    while m * m <= n:\n        if n % m == 0:\n            return m\n        m += 1\n    return -1\n\n\nif __name__ == \"__main__\":\n    n = int(input(\"Enter the number: \"))\n    print(f\"The next perfect square greater than {n} is {find_next_square(n)}\")"
    },
    {
      "rank": 99,
      "score": 8.0,
      "candidate": "def next_perfect_square(n):\n    i = n\n    while i**2 < n:\n        i += 1\n    return i**2\n\nprint(next_perfect_square(int(input(\"Enter a number: \"))))"
    },
    {
      "rank": 100,
      "score": 1.0,
      "candidate": "def next_square(n):\n    # Write your code here\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 4\n    elif n == 4:\n        return 6\n    elif n == 5:\n        return 8\n    elif n == 6:\n        return 10\n    elif n == 7:\n        return 12\n    elif n == 8:\n        return 14\n    elif n == 9:\n        return 16\n    elif n == 10:\n        return 18\n    elif n == 11:\n        return 20\n    elif n == 12:\n        return 22\n    elif n == 13:\n        return 24\n    elif n == 14:\n        return 28\n    elif n == 15:\n        return 32\n    elif n == 16:\n        return 36\n    elif n == 17:\n        return 40\n    elif n == 18:\n        return 48\n    elif n == 19:\n        return 60\n    elif n == 20:\n        return 72\n    elif n == 21:\n        return 80\n    elif n == 22:\n        return 96\n    elif n == 23:\n        return 112\n    elif n == 24:\n        return 144\n    elif n == 25:\n        return 176\n    elif n == 26:\n        return 208\n    elif n == 27:\n        return 224\n    elif n == 28:\n        return 260\n    elif n == 29:\n        return 312\n    elif n == 30:\n        return 340\n    elif n == 31:\n        return 348\n    elif n == 32:\n        return 396\n    elif n == 33:\n        return 396\n    elif n == 34:\n        return 396\n    elif n == 35:\n        return 396\n    elif n == 36:\n        return 396\n    elif n == 37:\n        return 396\n    elif n == 38:\n        return 396\n    elif n == 39:\n        return 396\n    elif n == 40:\n        return 396\n    elif n == 41:\n        return 396\n    elif n == 42:\n        return 396\n    elif n == 43:\n        return 396\n    elif n"
    }
  ]
}