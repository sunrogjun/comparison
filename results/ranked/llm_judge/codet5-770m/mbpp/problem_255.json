{
  "timestamp": "2025-09-14T14:20:22.480441",
  "method": "improved_llm_judge",
  "judge_model": "codellama/CodeLlama-7b-Python-hf",
  "target_model": "codet5-770m",
  "dataset": "mbpp",
  "problem_number": 255,
  "total_candidates": 100,
  "results": [
    {
      "rank": 1,
      "score": 10.0,
      "candidate": "import numpy as np\n\ndef lateral_surface_area(c):\n    return (c**3) / 4\n\ndef test_function():\n    c = np.array([1,1,1])\n    assert lateral_surface_area(c) == 1\n\nif __name__ == \"__main__\":\n    test_function()"
    },
    {
      "rank": 2,
      "score": 10.0,
      "candidate": "def cube_area(length, width, height):\n    return length * width * height\n\n\nprint(cube_area(2, 3, 4))"
    },
    {
      "rank": 3,
      "score": 10.0,
      "candidate": "def lateral_surface_area(x, y, z):\n    return (x*y*z)\n\n\nprint(lateral_surface_area(10, 5, 5))"
    },
    {
      "rank": 4,
      "score": 10.0,
      "candidate": "def cube_area(radius):\n    return radius**3\n\nprint(cube_area(8))"
    },
    {
      "rank": 5,
      "score": 10.0,
      "candidate": "def surface_area(width, height, depth):\n    return (width * height * depth) / 2\n\nprint(surface_area(50, 50, 50))\nprint(surface_area(10, 10, 10))\nprint(surface_area(20, 20, 20))"
    },
    {
      "rank": 6,
      "score": 10.0,
      "candidate": "def cube_area(a, b, c):\n    area = a * b * c\n    return area\n\nif __name__ == '__main__':\n    print(cube_area(5,5,5))"
    },
    {
      "rank": 7,
      "score": 10.0,
      "candidate": "def surface_area(x, y, z):\n    return (x * y * z) ** 0.5\n\nprint(surface_area(1, 2, 3))"
    },
    {
      "rank": 8,
      "score": 10.0,
      "candidate": "def lateral_surface_area(x,y,z):\n    return (x**2 + y**2 + z**2)**(1/2)\n\nprint(lateral_surface_area(4,8,9))"
    },
    {
      "rank": 9,
      "score": 10.0,
      "candidate": "import math\n\ndef surface_area(radius):\n    return math.pi * radius**2\n\nprint(surface_area(10))"
    },
    {
      "rank": 10,
      "score": 10.0,
      "candidate": "def lateral_area(cube_size):\n    return cube_size * cube_size * cube_size\n\n\nif __name__ == \"__main__\":\n    print(lateral_area(5))"
    },
    {
      "rank": 11,
      "score": 10.0,
      "candidate": "def cube_surface_area(x, y, z):\n    return x * y * z\n\n\nprint(cube_surface_area(1, 2, 3))"
    },
    {
      "rank": 12,
      "score": 10.0,
      "candidate": "def surface_area(c):\n    return c * c * c\n\n\ndef main():\n    print(surface_area(3))\n    print(surface_area(4))\n    print(surface_area(5))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 13,
      "score": 10.0,
      "candidate": "def lateral_area(x,y,z):\n    return (x**2 + y**2 + z**2)**(1/2)\n\nprint(lateral_area(1,1,1))"
    },
    {
      "rank": 14,
      "score": 10.0,
      "candidate": "import numpy as np\nimport matplotlib.pyplot as plt\n\ndef lateral_area(c):\n    # define the function\n    def f(x):\n        return np.power(x, 2)\n    # calculate the lateral surface area\n    lateral_area = np.sum(f(c)) / 2\n    return lateral_area\n\n# define the function\ndef lateral_area_2(c):\n    # define the function\n    def f(x):\n        return np.power(x, 3)\n    # calculate the lateral surface area\n    lateral_area = np.sum(f(c)) / 2\n    return lateral_area\n\n# define the function\ndef lateral_area_3(c):\n    # define the function\n    def f(x):\n        return np.power(x, 4)\n    # calculate the lateral surface area\n    lateral_area = np.sum(f(c)) / 2\n    return lateral_area\n\n# define the function\ndef lateral_area_4(c):\n    # define the function\n    def f(x):\n        return np.power(x, 5)\n    # calculate the lateral surface area\n    lateral_area = np.sum(f(c)) / 2\n    return lateral_area\n\n# define the function\ndef lateral_area_5(c):\n    # define the function\n    def f(x):\n        return np.power(x, 6)\n    # calculate the lateral surface area\n    lateral_area = np.sum(f(c)) / 2\n    return lateral_area\n\n# define the function\ndef lateral_area_6(c):\n    # define the function\n    def f(x):\n        return np.power(x, 7)\n    # calculate the lateral surface area\n    lateral_area = np.sum(f(c)) / 2\n    return lateral_area\n\n# define the function\ndef lateral_area_7(c):\n    # define the function\n    def f(x):\n        return np.power(x, 8)\n    # calculate the lateral surface area\n    lateral_area = np.sum"
    },
    {
      "rank": 15,
      "score": 10.0,
      "candidate": "def lateral_surface_area(cube_area):\n\treturn cube_area * 0.5\n\nprint(lateral_surface_area(1))\nprint(lateral_surface_area(2))\nprint(lateral_surface_area(3))\nprint(lateral_surface_area(4))\nprint(lateral_surface_area(5))\nprint(lateral_surface_area(6))\nprint(lateral_surface_area(7))\nprint(lateral_surface_area(8))\nprint(lateral_surface_area(9))\nprint(lateral_surface_area(10))"
    },
    {
      "rank": 16,
      "score": 10.0,
      "candidate": "def surface_area(length, width, height, depth):\n    return (length * width * height) / depth"
    },
    {
      "rank": 17,
      "score": 10.0,
      "candidate": "def surfaceArea(x, y, z):\n    return x * y * z\n\n\nif __name__ == \"__main__\":\n    print(surfaceArea(4, 4, 4))"
    },
    {
      "rank": 18,
      "score": 10.0,
      "candidate": "def surface_area(size):\n    return size * size * size\n\nprint(surface_area(10))"
    },
    {
      "rank": 19,
      "score": 10.0,
      "candidate": "def surface_area(width, height, depth):\n    return width * height * depth\n\n\nprint(surface_area(width=10, height=10, depth=10))"
    },
    {
      "rank": 20,
      "score": 10.0,
      "candidate": "def surface_area(c):\n    return c**2\n\nprint(surface_area(4))"
    },
    {
      "rank": 21,
      "score": 10.0,
      "candidate": "from math import pi\n\ndef surface_area(x,y,z):\n    return pi*(x**2+y**2+z**2)"
    },
    {
      "rank": 22,
      "score": 10.0,
      "candidate": "def surface_area(x, y, z):\n    return x * y * z\n\nprint(surface_area(3, 5, 7))"
    },
    {
      "rank": 23,
      "score": 10.0,
      "candidate": "def surface_area(x,y,z):\n    return (x**2 + y**2 + z**2)**0.5\n\nprint(surface_area(1,1,1))"
    },
    {
      "rank": 24,
      "score": 10.0,
      "candidate": "def surface_area(length, width, height):\n    return length * width * height\n\n\ndef main():\n    print(surface_area(100, 100, 100))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 25,
      "score": 10.0,
      "candidate": "def lateral_surface_area(c):\n    return c**3\n\n\nprint(lateral_surface_area(10))"
    },
    {
      "rank": 26,
      "score": 10.0,
      "candidate": "from math import pi\n\ndef lateral_area(radius, height, width):\n    return 2 * pi * (radius ** 2) * (height ** 2) / width\n\nif __name__ == \"__main__\":\n    print(lateral_area(5, 2, 5))"
    },
    {
      "rank": 27,
      "score": 10.0,
      "candidate": "from math import sqrt\n\ndef surface_area(x, y, z):\n    return sqrt((x**2)+(y**2)+(z**2))\n\n\nif __name__ == '__main__':\n    print(surface_area(2, 2, 2))"
    },
    {
      "rank": 28,
      "score": 10.0,
      "candidate": "def lateral_area(l):\n    # l is a list\n    # l[0] is the length of the list\n    # l[1] is the length of the list\n    # l[2] is the length of the list\n    # l[3] is the length of the list\n    # l[4] is the length of the list\n    # l[5] is the length of the list\n    # l[6] is the length of the list\n    l = [l[0], l[1], l[2], l[3], l[4], l[5], l[6]]\n    area = 0\n    for i in l:\n        area += i**2\n    return area\n\nprint(lateral_area([1, 2, 3, 4, 5, 6]))"
    },
    {
      "rank": 29,
      "score": 10.0,
      "candidate": "def surface_area(c):\n    return c**3/4"
    },
    {
      "rank": 30,
      "score": 10.0,
      "candidate": "from math import sqrt\n\ndef lateral_surface_area(x, y, z):\n    return sqrt((x**2)+(y**2)+(z**2))\n\nx = float(input(\"Enter the x value: \"))\ny = float(input(\"Enter the y value: \"))\nz = float(input(\"Enter the z value: \"))\n\nprint(\"The lateral surface area of the cube is:\", lateral_surface_area(x, y, z))"
    },
    {
      "rank": 31,
      "score": 10.0,
      "candidate": "import math\n\n\ndef lateral_surface_area(radius):\n    \"\"\"\n    :param radius: the radius of the cube\n    :return: the lateral surface area\n    \"\"\"\n    return math.pi * radius ** 2 * (radius ** 3)\n\n\ndef main():\n    \"\"\"\n    Driver Code\n    \"\"\"\n    radius = float(input(\"Enter the radius of the cube: \"))\n    print(f\"The lateral surface area of the cube is {lateral_surface_area(radius)}\")\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 32,
      "score": 10.0,
      "candidate": "def cube_area(x, y, z):\n    return (x*x + y*y + z*z)**(1/3)\n\nprint(cube_area(1, 1, 1))"
    },
    {
      "rank": 33,
      "score": 10.0,
      "candidate": "def surface_area(cube):\n    return (cube.width * cube.height) * (cube.depth / 2)\n\n\ndef main():\n    cube = Cube(10, 10, 10)\n    print(surface_area(cube))\n\n\nclass Cube:\n    def __init__(self, width, height, depth):\n        self.width = width\n        self.height = height\n        self.depth = depth\n\n    def __str__(self):\n        return f\"Cube(width={self.width}, height={self.height}, depth={self.depth})\"\n\n    def __repr__(self):\n        return f\"Cube(width={self.width}, height={self.height}, depth={self.depth})\"\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 34,
      "score": 9.0,
      "candidate": "from math import pi\n\ndef surface_area(radius, area):\n    return pi*radius**2*area"
    },
    {
      "rank": 35,
      "score": 9.0,
      "candidate": "def surface_area(a, b, c):\n    return a * b * c\n\n\na = float(input(\"Enter the width of the cube: \"))\nb = float(input(\"Enter the height of the cube: \"))\nc = float(input(\"Enter the depth of the cube: \"))\nprint(\"The lateral surface area is \", surface_area(a, b, c))"
    },
    {
      "rank": 36,
      "score": 9.0,
      "candidate": "def surface_area(r):\n    return (4 * r ** 3) / 6"
    },
    {
      "rank": 37,
      "score": 9.0,
      "candidate": "import math\n\ndef cube_area(r):\n    area = math.pi * (r**3)\n    return area\n\nr = float(input(\"Enter a radius: \"))\nprint(\"The area of the cube is:\", cube_area(r))"
    },
    {
      "rank": 38,
      "score": 8.0,
      "candidate": "def surface_area(r):\n    return (4/3) * r**3\n\nprint(surface_area(1))\nprint(surface_area(3))\nprint(surface_area(5))\nprint(surface_area(7))"
    },
    {
      "rank": 39,
      "score": 8.0,
      "candidate": "import math\n\ndef surfaceArea(width, height, depth):\n    return (width * height * depth) / 2\n\nprint(surfaceArea(5, 5, 5))\nprint(surfaceArea(5, 5, 10))\nprint(surfaceArea(3, 5, 5))\nprint(surfaceArea(2, 5, 5))"
    },
    {
      "rank": 40,
      "score": 8.0,
      "candidate": "def surfaceArea(length, width, height):\n    return (length*width*height)/2\n\nprint(surfaceArea(10, 20, 30))"
    },
    {
      "rank": 41,
      "score": 8.0,
      "candidate": "def lateral_surface_area(l, r, b):\n    return l * r * b"
    },
    {
      "rank": 42,
      "score": 8.0,
      "candidate": "def area(r):\n    return 3.14159 * r**3\n\nprint(area(3))\nprint(area(5))"
    },
    {
      "rank": 43,
      "score": 8.0,
      "candidate": "def surface_area(x, y, z):\n    return (x**2 + y**2 + z**2)**(0.5)\n\n\nx, y, z = float(input()), float(input()), float(input())\n\nprint(f\"The lateral surface area of the cube is {surface_area(x, y, z)}\")"
    },
    {
      "rank": 44,
      "score": 8.0,
      "candidate": "def surfaceArea(a):\n    return a * (a + 2) / 3\n\nif __name__ == \"__main__\":\n    print(surfaceArea(7))"
    },
    {
      "rank": 45,
      "score": 8.0,
      "candidate": "import math\n\ndef surface_area(x, y, z):\n    # define the function\n    def area(r):\n        return math.sqrt((x-r)**2+(y-r)**2+(z-r)**2)\n    \n    # loop through all the points\n    for i in range(len(x)):\n        for j in range(len(y)):\n            for k in range(len(z)):\n                # calculate the lateral surface area\n                lateral_area = area(x[i][j][k])\n                # print the lateral surface area\n                print(\"Lateral Surface Area: \", lateral_area)\n\n# Driver code\nif __name__ == \"__main__\":\n    # define the x and y coordinates\n    x = [[1, 2, 3],\n         [1, 2, 4],\n         [2, 3, 4]]\n    y = [[1, 2, 3],\n         [2, 3, 4],\n         [2, 3, 4]]\n    z = [[2, 3, 4],\n         [2, 3, 4],\n         [2, 3, 4]]\n\n    # calculate the lateral surface area\n    surface_area(x, y, z)"
    },
    {
      "rank": 46,
      "score": 8.0,
      "candidate": "def lateral_surface_area(l, r, b):\n    area = l * r * b\n    return area\n\nprint(lateral_surface_area(3, 4, 2))"
    },
    {
      "rank": 47,
      "score": 8.0,
      "candidate": "def surface_area(c):\n    return (4/3)*(c**3)\n\n\nc = float(input(\"Enter the radius of the cube: \"))\nprint(\"The lateral surface area of the cube is\", surface_area(c))"
    },
    {
      "rank": 48,
      "score": 8.0,
      "candidate": "def surface_area(height):\n    return 3.14159 * (height**2)\n\nprint(surface_area(10))\nprint(surface_area(20))\nprint(surface_area(30))\nprint(surface_area(40))\nprint(surface_area(50))\nprint(surface_area(60))"
    },
    {
      "rank": 49,
      "score": 8.0,
      "candidate": "def cube_surface_area(x, y, z):\n    return (x * x + y * y + z * z) * 0.5\n\nprint(cube_surface_area(2, 4, 6))\nprint(cube_surface_area(2, 4, 5))\nprint(cube_surface_area(2, 4, 3))\nprint(cube_surface_area(2, 4, 4))\nprint(cube_surface_area(2, 4, 1))"
    },
    {
      "rank": 50,
      "score": 8.0,
      "candidate": "import numpy as np\n\ndef surface_area(x, y, z):\n\n    return np.sqrt(x**2 + y**2 + z**2)\n\n\n# Test\nprint(surface_area(1, 1, 1))\nprint(surface_area(1, 1, -1))\nprint(surface_area(1, 1, 1.5))\nprint(surface_area(1, -1, 1))\nprint(surface_area(-1, 1, 1))\nprint(surface_area(-1, 1, -1))\nprint(surface_area(-1, 1, 1.5))\nprint(surface_area(-1, -1, 1))\nprint(surface_area(-1, -1, 1.5))\nprint(surface_area(-1, 1, -1.5))"
    },
    {
      "rank": 51,
      "score": 8.0,
      "candidate": "def lateral_surface_area(x,y,z):\n    return x**2 + y**2 + z**2\n\nprint(lateral_surface_area(1,2,3))"
    },
    {
      "rank": 52,
      "score": 8.0,
      "candidate": "def surface_area(x, y, z):\n    return 0.5 * x * y * z\n\n\nif __name__ == \"__main__\":\n    print(surface_area(0, 0, 0))\n    print(surface_area(2, 0, 0))\n    print(surface_area(1, 0, 0))"
    },
    {
      "rank": 53,
      "score": 8.0,
      "candidate": "def surface_area(x, y, z):\n    return (x**2 + y**2 + z**2)**(1/2)\n\n\nif __name__ == \"__main__\":\n    print(surface_area(1, 1, 1))\n    print(surface_area(1, 1, 2))\n    print(surface_area(1, 2, 1))"
    },
    {
      "rank": 54,
      "score": 8.0,
      "candidate": "def surface_area(a):\n    return a * (a - 1) / 2\n\n\na = int(input(\"Enter the number of the cube: \"))\nb = int(input(\"Enter the width: \"))\nc = int(input(\"Enter the height: \"))\n\nprint(\"The surface area of the cube is: \", surface_area(a))"
    },
    {
      "rank": 55,
      "score": 8.0,
      "candidate": "def surface_area(size, height):\n    return (size * height) / 2\n\n# Testing\nprint(surface_area(5, 6))"
    },
    {
      "rank": 56,
      "score": 8.0,
      "candidate": "from math import pi\ndef surfaceArea(r,h,w):\n    s = pi*(r*r*r)\n    return s"
    },
    {
      "rank": 57,
      "score": 8.0,
      "candidate": "import math\n\ndef lateral_surface_area(c):\n    # define the height of the cube\n    height = c\n    # define the width of the cube\n    width = c\n    # define the height of the cube\n    height_2 = height * height\n    # define the width of the cube\n    width_2 = width * width\n    # define the height of the cube\n    height_3 = height * height * height\n    # define the width of the cube\n    width_3 = width * width * width\n    # define the height of the cube\n    height_4 = height * height * height\n    # define the width of the cube\n    width_4 = width * width * width\n    # define the lateral surface area\n    lateral_surface_area = height_2 * width_2 * height_3 * width_3 * height_4\n    return lateral_surface_area\n\n# test case\nc = float(input(\"Enter a cube height: \"))\nprint(\"Lateral surface area of cube is: \", lateral_surface_area(c))"
    },
    {
      "rank": 58,
      "score": 8.0,
      "candidate": "def surface_area(width, height, depth):\n    return width * height * depth\n\n\nprint(surface_area(2, 2, 2))"
    },
    {
      "rank": 59,
      "score": 8.0,
      "candidate": "def surfaceArea(x,y,z):\n    return (x**2+y**2+z**2)**(1/2)"
    },
    {
      "rank": 60,
      "score": 8.0,
      "candidate": "def surface_area(c):\n    return c**2 * (4 * (c**2 - 1))\n\nprint(surface_area(5))"
    },
    {
      "rank": 61,
      "score": 8.0,
      "candidate": "def surface_area(r,h,w):\n    return r*h*w\n\nprint(surface_area(10,10,10))"
    },
    {
      "rank": 62,
      "score": 8.0,
      "candidate": "def surface_area(c,n):\n    area = 0\n    for i in range(n):\n        area += c[i]*(i+1)\n    return area\n\nprint(surface_area([1,2,3],5))"
    },
    {
      "rank": 63,
      "score": 8.0,
      "candidate": "from math import sqrt\n\ndef surface_area(a,b,c):\n    return a*b*c\n\nprint(surface_area(3,4,5))"
    },
    {
      "rank": 64,
      "score": 8.0,
      "candidate": "def lateral_surface_area(r, h, w):\n    return (r**2 + h**2 + w**2)**0.5\n\n\nprint(lateral_surface_area(10, 10, 10))"
    },
    {
      "rank": 65,
      "score": 8.0,
      "candidate": "import math\n\ndef surface_area(radius):\n    #Define the radius of the cube\n    cuboid_radius = radius\n\n    #Define the area of the cube\n    cuboid_area = math.pi * cuboid_radius**3\n\n    return cuboid_area\n\n#Test case 1\nprint(surface_area(2))\nprint(surface_area(4))\nprint(surface_area(6))\nprint(surface_area(10))\nprint(surface_area(16))\n\n#Test case 2\nprint(surface_area(3))\nprint(surface_area(4))\nprint(surface_area(5))\nprint(surface_area(6))\nprint(surface_area(10))\nprint(surface_area(16))\n\n#Test case 3\nprint(surface_area(0))\nprint(surface_area(1))\nprint(surface_area(2))\nprint(surface_area(3))\nprint(surface_area(4))\nprint(surface_area(5))\nprint(surface_area(6))\nprint(surface_area(10))\nprint(surface_area(16))"
    },
    {
      "rank": 66,
      "score": 8.0,
      "candidate": "def lateral_surface_area(r, theta, phi):\n    x = r * np.cos(theta) * np.cos(phi)\n    y = r * np.cos(theta) * np.sin(phi)\n    z = r * np.sin(theta)\n    return x + y + z"
    },
    {
      "rank": 67,
      "score": 8.0,
      "candidate": "def area(size, x, y, z):\n    area = size * (x * y * z)\n    return area\n\n\ndef main():\n    x = int(input(\"X: \"))\n    y = int(input(\"Y: \"))\n    z = int(input(\"Z: \"))\n    size = int(input(\"Size: \"))\n    print(f\"The lateral area of the cube is: {area(size, x, y, z)}\")\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 68,
      "score": 8.0,
      "candidate": "import math\n\ndef cube_lateral_surface_area(r, h, w):\n    return r * h * w\n\nif __name__ == '__main__':\n    print(\"The lateral surface area of a cube is: \", cube_lateral_surface_area(3,3,3))"
    },
    {
      "rank": 69,
      "score": 8.0,
      "candidate": "def surface_area(length, width, height):\n    return length * width * height"
    },
    {
      "rank": 70,
      "score": 8.0,
      "candidate": "import math\n\ndef surface_area(x, y, z):\n    return math.sqrt((x**2)+(y**2)+(z**2))\n\nx = float(input(\"Enter the x value: \"))\ny = float(input(\"Enter the y value: \"))\nz = float(input(\"Enter the z value: \"))\n\nprint(\"The lateral surface area of the cube is: \", surface_area(x, y, z))"
    },
    {
      "rank": 71,
      "score": 8.0,
      "candidate": "def surface_area(radius):\n    return 3.14 * radius ** 2\n\ndef main():\n    print(surface_area(5))\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 72,
      "score": 8.0,
      "candidate": "def surface_area(c):\n    return c * c * c\n\nprint(surface_area(4))"
    },
    {
      "rank": 73,
      "score": 8.0,
      "candidate": "def surface_area(height, width, depth):\n    return height * width * depth\n\nprint(surface_area(10, 10, 10))\nprint(surface_area(5, 5, 5))\nprint(surface_area(10, 5, 3))\nprint(surface_area(5, 10, 10))"
    },
    {
      "rank": 74,
      "score": 8.0,
      "candidate": "import math\n\ndef surface_area(c):\n    #calculate the volume of the cube\n    volume = math.pi * (c * c)\n\n    #calculate the lateral surface area\n    lateral_surface = volume / 2\n\n    return lateral_surface\n\nprint(surface_area(1))\nprint(surface_area(2))\nprint(surface_area(3))"
    },
    {
      "rank": 75,
      "score": 8.0,
      "candidate": "def lateral_surface_area(cube_area):\n    return cube_area / 2\n\nprint(lateral_surface_area(12))\nprint(lateral_surface_area(15))\nprint(lateral_surface_area(20))\nprint(lateral_surface_area(25))"
    },
    {
      "rank": 76,
      "score": 8.0,
      "candidate": "def surface_area(x,y,z):\n    return (x**2 + y**2 + z**2)**(1/2)\n\n\nprint(surface_area(4,4,4))"
    },
    {
      "rank": 77,
      "score": 8.0,
      "candidate": "def surface_area(length, width, height):\n    return length * width * height\n\nprint(surface_area(3, 3, 3))"
    },
    {
      "rank": 78,
      "score": 8.0,
      "candidate": "def surface_area(r, h, l):\n    # TODO: Implement the function here\n    pass"
    },
    {
      "rank": 79,
      "score": 8.0,
      "candidate": "from math import sqrt\n\ndef surface_area(c):\n    return sqrt(c[0] * c[1] * c[2])\n\n\nprint(surface_area([1, 2, 3]))\nprint(surface_area([-1, -2, -3]))"
    },
    {
      "rank": 80,
      "score": 8.0,
      "candidate": "import numpy as np\n\ndef surface_area(x,y,z):\n    return np.sqrt(x**2+y**2+z**2)\n\nprint(surface_area(0.5,0.5,0.5))"
    },
    {
      "rank": 81,
      "score": 8.0,
      "candidate": "def surface_area(radius):\n    return 3.14 * radius**2\n\nprint(surface_area(5))"
    },
    {
      "rank": 82,
      "score": 8.0,
      "candidate": "def surface_area(c):\n    return c * (c ** 2) / 2"
    },
    {
      "rank": 83,
      "score": 8.0,
      "candidate": "from math import sqrt\n\ndef surface_area(cube_area):\n    # the above function is for the lateral surface area\n    return cube_area * sqrt(2)\n\ndef main():\n    cube_area = float(input(\"Enter the cube area: \"))\n    print(\"The lateral surface area is: \", surface_area(cube_area))\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 84,
      "score": 8.0,
      "candidate": "def cube_area(l, r, b):\n    return l * r * b\n\nprint(cube_area(4, 4, 4))"
    },
    {
      "rank": 85,
      "score": 8.0,
      "candidate": "def surface_area(cube):\n    return cube[0] * cube[1] * cube[2]"
    },
    {
      "rank": 86,
      "score": 8.0,
      "candidate": "def lateral_surface_area(height, width, depth):\n    return height * width * depth\n\nprint(lateral_surface_area(5, 2, 2))"
    },
    {
      "rank": 87,
      "score": 8.0,
      "candidate": "import numpy as np\n\ndef surface_area(x, y, z):\n    return (x * y * z)**(1/3)\n\nx = float(input(\"Enter the x coordinate \"))\ny = float(input(\"Enter the y coordinate \"))\nz = float(input(\"Enter the z coordinate \"))\n\nprint(\"The lateral surface area is\", surface_area(x,y,z))"
    },
    {
      "rank": 88,
      "score": 1.0,
      "candidate": "def lateral_area(height, width, depth):\n    return height * width * depth\n\n\nprint(lateral_area(2, 3, 4))"
    },
    {
      "rank": 89,
      "score": 1.0,
      "candidate": "def surface_area(a):\n    # Write your code here\n    return a*a*a"
    },
    {
      "rank": 90,
      "score": 1.0,
      "candidate": "import numpy as np\n\ndef surface_area(x, y, z):\n    # x,y,z are the coordinates of the center of the cube.\n    # x1,y1,z1 are the coordinates of the first point of the cube.\n    # x2,y2,z2 are the coordinates of the second point of the cube.\n    # x3,y3,z3 are the coordinates of the third point of the cube.\n\n    # find the area of the cube\n    return ((x**2) + (y**2) + (z**2))**(0.5)\n\ndef main():\n    # x,y,z are the coordinates of the center of the cube.\n    # x1,y1,z1 are the coordinates of the first point of the cube.\n    # x2,y2,z2 are the coordinates of the second point of the cube.\n    # x3,y3,z3 are the coordinates of the third point of the cube.\n\n    # find the area of the cube\n    print(surface_area(2, 3, 4))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 91,
      "score": 1.0,
      "candidate": "def surface_area(cube):\n    return cube.area()\n\n\ndef main():\n    cube = Cube()\n    print(surface_area(cube))\n\n\nclass Cube:\n    def __init__(self):\n        self.area = 0\n\n    def area(self):\n        self.area = 3.14 * (3.14 - 2.718281828459045)\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 92,
      "score": 1.0,
      "candidate": "def get_surface_area(cube):\n    return (cube.x**2 + cube.y**2 + cube.z**2)**0.5\n\n\nprint(get_surface_area(Cube(1, 1, 1)))"
    },
    {
      "rank": 93,
      "score": 1.0,
      "candidate": "import numpy as np\n\ndef lateral_surface_area(cube):\n    return np.sum(np.square(cube))\n\ncube = np.array([[1,2,3], [4,5,6], [7,8,9]])\n\nprint(lateral_surface_area(cube))"
    },
    {
      "rank": 94,
      "score": 1.0,
      "candidate": "def surface_area(cube):\n    \"\"\"\n    :type cube: Cube\n    :rtype: float\n    \"\"\"\n    return cube.area\n\n\nif __name__ == \"__main__\":\n    cube = Cube(5, 2, 2, 1)\n    print(surface_area(cube))"
    },
    {
      "rank": 95,
      "score": 1.0,
      "candidate": "def lateral_surface_area(cube):\n    # your code here\n    return 0\n\nif __name__ == \"__main__\":\n    cube = int(input())\n    result = lateral_surface_area(cube)\n    print(result)"
    },
    {
      "rank": 96,
      "score": 1.0,
      "candidate": "def surface_area(cube_height, cube_width, cube_depth):\n    cube_width = cube_width / 2\n    cube_height = cube_height / 2\n    cube_depth = cube_depth / 2\n\n    surface_area = cube_width * cube_height * cube_depth\n\n    return surface_area\n\n\nprint(surface_area(4, 3, 2))"
    },
    {
      "rank": 97,
      "score": 1.0,
      "candidate": "def surface_area(l, r, b):\n    return (l * r * b) / 2\n\n\nprint(surface_area(1, 2, 3))"
    },
    {
      "rank": 98,
      "score": 1.0,
      "candidate": "def lateral_surface_area(a, b, c):\n    return (a * b * c) / 2\n\n\nprint(lateral_surface_area(1, 2, 3))"
    },
    {
      "rank": 99,
      "score": 1.0,
      "candidate": "def cube_surface_area(width, height, depth):\n    return width * height * depth\n\n\nif __name__ == \"__main__\":\n    print(cube_surface_area(10, 10, 10))\n    print(cube_surface_area(10, 10, 20))\n    print(cube_surface_area(10, 10, 30))\n    print(cube_surface_area(10, 10, 40))\n    print(cube_surface_area(10, 10, 50))\n    print(cube_surface_area(10, 10, 60))\n    print(cube_surface_area(10, 10, 70))\n    print(cube_surface_area(10, 10, 80))\n    print(cube_surface_area(10, 10, 90))\n    print(cube_surface_area(10, 10, 100))\n    print(cube_surface_area(10, 10, 110))\n    print(cube_surface_area(10, 10, 120))\n    print(cube_surface_area(10, 10, 130))\n    print(cube_surface_area(10, 10, 140))\n    print(cube_surface_area(10, 10, 150))\n    print(cube_surface_area(10, 10, 160))\n    print(cube_surface_area(10, 10, 170))\n    print(cube_surface_area(10, 10, 180))\n    print(cube_surface_area(10, 10, 200))\n    print(cube_surface_area(10, 10, 300))\n    print(cube_surface_area(10, 10, 400))\n    print(cube_surface_area(10, 10, 500))\n    print(cube_surface_area(10, 10, 600))\n    print(cube_surface_area(10, 10, 700))\n    print(cube_surface_area(10, 10, 800))\n    print(cube_surface_area(10, 10, 900))\n    print(cube_surface_area(10, 10, 1000))\n    print(cube_surface_area(10, 10, 1100))"
    },
    {
      "rank": 100,
      "score": 1.0,
      "candidate": "def cube_surface_area(radius):\n    # Your code here\n    return radius**3\n\nprint(cube_surface_area(10))"
    }
  ]
}