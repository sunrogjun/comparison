{
  "timestamp": "2025-09-14T13:10:49.967311",
  "method": "improved_llm_judge",
  "judge_model": "codellama/CodeLlama-7b-Python-hf",
  "target_model": "codet5-770m",
  "dataset": "mbpp",
  "problem_number": 97,
  "total_candidates": 100,
  "results": [
    {
      "rank": 1,
      "score": 10.0,
      "candidate": "from heapq import heappush, heappop\n\n\ndef merge_sort(arr):\n    # sort the input array\n    if len(arr) > 1:\n        mid = len(arr) // 2\n        left = arr[:mid]\n        right = arr[mid:]\n\n        merge_sort(left)\n        merge_sort(right)\n\n        # merge the two sorted arrays\n        i = 0\n        j = 0\n        k = 0\n        while i < len(left) and j < len(right):\n            if left[i] <= right[j]:\n                heappush(arr, left[i])\n                i += 1\n            else:\n                heappush(arr, right[j])\n                j += 1\n            k += 1\n\n        # add any remaining elements to the output array\n        while i < len(left):\n            heappush(arr, left[i])\n            i += 1\n\n        while j < len(right):\n            heappush(arr, right[j])\n            j += 1\n\n        return arr\n\n\nif __name__ == \"__main__\":\n    assert merge_sort([]) == []\n    assert merge_sort([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]\n    assert merge_sort([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert merge_sort([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 2, 3, 4, 5, 6, 7, 8]"
    },
    {
      "rank": 2,
      "score": 10.0,
      "candidate": "from heapq import heappush, heappop\n\nclass SortedIterator:\n    def __init__(self, a):\n        self.a = a\n\n    def __iter__(self):\n        return self\n\n    def __next__(self):\n        if not self.a:\n            raise StopIteration\n        return heappop(self.a)\n\n    def __getitem__(self, index):\n        if not self.a:\n            raise IndexError\n        return self.a[index]\n\n    def __len__(self):\n        return len(self.a)\n\n    def __contains__(self, val):\n        return val in self.a\n\n    def __add__(self, other):\n        return SortedIterator(self.a + other.a)\n\n    def __sub__(self, other):\n        return SortedIterator(self.a - other.a)\n\n    def __mul__(self, other):\n        return SortedIterator(self.a * other.a)\n\n    def __div__(self, other):\n        return SortedIterator(self.a / other.a)\n\n    def __mod__(self, other):\n        return SortedIterator(self.a % other.a)\n\n    def __pow__(self, other):\n        return SortedIterator(self.a ** other.a)\n\n    def __and__(self, other):\n        return SortedIterator(self.a & other.a)\n\n    def __or__(self, other):\n        return SortedIterator(self.a | other.a)\n\n    def __xor__(self, other):\n        return SortedIterator(self.a ^ other.a)\n\n    def __invert__(self):\n        return SortedIterator(self.a ^ 1)\n\n    def __xor__(self, other):\n        return SortedIterator(self.a ^ other.a)\n\n    def __lshift__(self, other):\n        return SortedIterator(self.a << other.a)\n\n    def __rshift__(self, other):\n        return SortedIterator(self.a >> other.a)\n\n    def __and__(self, other):\n        return SortedIterator("
    },
    {
      "rank": 3,
      "score": 10.0,
      "candidate": "class Solution:\n    def merge(self, nums1: List[int], nums2: List[int]) -> List[int]:\n        nums = []\n        while nums1 or nums2:\n            if nums1 and nums2:\n                if nums1[0] < nums2[0]:\n                    nums.append(nums1.pop(0))\n                else:\n                    nums.append(nums2.pop(0))\n            elif nums1:\n                nums.append(nums1.pop(0))\n            elif nums2:\n                nums.append(nums2.pop(0))\n        return nums"
    },
    {
      "rank": 4,
      "score": 10.0,
      "candidate": "class Queue:\n    def __init__(self):\n        self.items = []\n\n    def push(self, item):\n        self.items.append(item)\n\n    def pop(self):\n        return self.items.pop()\n\n    def peek(self):\n        return self.items[0]\n\n    def __len__(self):\n        return len(self.items)\n\n\ndef heap_sort(arr):\n    if len(arr) <= 1:\n        return arr\n    p = len(arr) // 2\n    l = heap_sort(arr[:p])\n    r = heap_sort(arr[p:])\n\n    return merge(l, r)\n\n\ndef merge(l, r):\n    result = []\n    while len(l) > 0 and len(r) > 0:\n        if l[0] <= r[0]:\n            result.append(l.pop(0))\n        else:\n            result.append(r.pop(0))\n    if len(l) > 0:\n        result += l\n    if len(r) > 0:\n        result += r\n    return result\n\n\nif __name__ == '__main__':\n    q = Queue()\n    q.push(1)\n    q.push(2)\n    q.push(3)\n    q.push(4)\n    q.push(5)\n    q.push(6)\n    q.push(7)\n    q.push(8)\n    print(q)\n    print(heap_sort(q))\n    print(heap_sort(q, reverse=True))\n    print(heap_sort(q, reverse=False))\n    print(heap_sort(q, reverse=True, reverse=True))\n    print(heap_sort(q, reverse=False, reverse=True))\n    print(heap_sort(q, reverse=False, reverse=False))\n    print(heap_sort(q, reverse=False, reverse=False))\n    print(heap_sort(q, reverse=False, reverse=False, reverse=True))"
    },
    {
      "rank": 5,
      "score": 10.0,
      "candidate": "import heapq\n\ndef merge_sorted_iter(sorted_list):\n    if len(sorted_list) == 1:\n        return sorted_list\n    heap = []\n    for i in range(len(sorted_list)):\n        heapq.heappush(heap, sorted_list[i])\n    while len(heap) > 1:\n        heapq.heappop(heap)\n        heapq.heappush(heap, sorted_list[0])\n    return heap\n\n\nif __name__ == \"__main__\":\n    print(merge_sorted_iter([1, 2, 3, 4, 5, 6]))\n    print(merge_sorted_iter([1, 2, 3, 4]))\n    print(merge_sorted_iter([]))\n    print(merge_sorted_iter([1, 2, 3, 4, 5]))\n    print(merge_sorted_iter([1, 2, 3, 4, 5, 6]))\n    print(merge_sorted_iter([1, 2, 3, 4, 5, 6, 7, 8, 9]))\n    print(merge_sorted_iter([1, 2, 3, 4, 5]))\n    print(merge_sorted_iter([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\n    print(merge_sorted_iter([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]))\n    print(merge_sorted_iter([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]))\n    print(merge_sorted_iter([]))\n    print(merge_sorted_iter([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]))\n    print(merge_sorted_iter([]))\n    print(merge_sorted_iter([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17]))\n    print(merge_sorted_iter([]))\n    print(merge_sorted_iter([1, 2, 3, 4, 5, 6, 7"
    },
    {
      "rank": 6,
      "score": 10.0,
      "candidate": "from heapq import *\n\n\ndef merge_sorted_iterator(itr):\n    result = []\n    heappush(result, next(itr))\n    for x in itr:\n        heappush(result, x)\n    return result\n\n\nif __name__ == '__main__':\n    assert merge_sorted_iterator(range(10)) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n    assert merge_sorted_iterator(range(10, 20)) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]\n    assert merge_sorted_iterator([1, 2, 3]) == [1, 2, 3]\n    assert merge_sorted_iterator([1, 2, 3, 4]) == [1, 2, 3, 4]"
    },
    {
      "rank": 7,
      "score": 10.0,
      "candidate": "class HeapQueue:\n    def __init__(self, data=[]):\n        self.data = data\n        self.heap = []\n        self.heapify()\n\n    def heapify(self):\n        for i in range(len(self.data)):\n            self.heap.append(self.data.pop(0))\n\n    def push(self, value):\n        self.data.append(value)\n        self.heapify()\n\n    def pop(self):\n        return self.data.pop(0)\n\n    def peek(self):\n        return self.data[0]\n\n    def size(self):\n        return len(self.data)\n\n    def __str__(self):\n        return str(self.data)\n\n    def __repr__(self):\n        return self.data\n\n\ndef merge(a, b):\n    if len(a) > len(b):\n        a, b = b, a\n    if not a or not b:\n        return a or b\n\n    a_heap, b_heap = HeapQueue(), HeapQueue()\n\n    while len(a) > 0 or len(b) > 0:\n        if a and b:\n            if a[0] <= b[0]:\n                a_heap.push(a.pop(0))\n            else:\n                b_heap.push(b.pop(0))\n\n        if not a_heap.size() and not b_heap.size():\n            return a_heap or b_heap\n\n        if not a_heap.size():\n            a_heap.push(b_heap.pop())\n        if not b_heap.size():\n            b_heap.push(a_heap.pop())\n\n    return a_heap or b_heap\n\n\nif __name__ == '__main__':\n    print(merge([1, 2, 3, 4, 5, 6, 7], [4, 5, 6, 7, 8, 9]))\n    print(merge([1, 2, 3, 4, 5, 6, 7], [1, 2, 3, 4, 5, 6, 7]))\n    print(merge([1, 2, 3, 4, 5,"
    },
    {
      "rank": 8,
      "score": 10.0,
      "candidate": "import heapq\n\n\ndef merge_sorted_iterator(it_1, it_2):\n    if len(it_1) == 0:\n        return it_2\n\n    if len(it_2) == 0:\n        return it_1\n\n    heap_q.heapify(it_1)\n    heap_q.heapify(it_2)\n\n    while len(it_1) > 0 or len(it_2) > 0:\n        if len(it_1) > 0:\n            heap_q.heappush(it_1, heapq.heappop(it_1))\n        if len(it_2) > 0:\n            heap_q.heappush(it_2, heapq.heappop(it_2))\n\n    return it_1 + it_2\n\n\nif __name__ == '__main__':\n    it_1 = [1, 2, 3, 4]\n    it_2 = [5, 6, 7, 8]\n    print(merge_sorted_iterator(it_1, it_2))"
    },
    {
      "rank": 9,
      "score": 9.0,
      "candidate": "from heapq import heapify, heappush, heappop\n\n\nclass Heap(object):\n    def __init__(self, iterable):\n        self.heap = []\n        for item in iterable:\n            heappush(self.heap, item)\n\n    def __iter__(self):\n        while self.heap:\n            yield heappop(self.heap)\n\n\ndef merge_sorted_iterators(iterators):\n    if len(iterators) == 0:\n        return []\n    else:\n        heap = Heap(iterators)\n        while len(heap) > 1:\n            heappush(heap, heappop(heap))\n        return heap\n\n\nif __name__ == \"__main__\":\n    assert merge_sorted_iterators([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]\n    assert merge_sorted_iterators([1, 2, 3]) == [1, 2, 3]\n    assert merge_sorted_iterators([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert merge_sorted_iterators([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]\n    assert merge_sorted_iterators([1, 2, 3, 4, 5, 6, 7]) == [1, 2, 3, 4, 5, 6, 7]\n    assert merge_sorted_iterators([1, 2, 3]) == [1, 2, 3]\n    assert merge_sorted_iterators([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 2, 3, 4, 5, 6, 7, 8]"
    },
    {
      "rank": 10,
      "score": 8.0,
      "candidate": "from heapq import heappush, heappop\n\n\ndef merge_sorted_iterator(sorted_input):\n    heap = []\n    for item in sorted_input:\n        heappush(heap, item)\n    while len(heap) > 0:\n        yield heappop(heap)"
    },
    {
      "rank": 11,
      "score": 8.0,
      "candidate": "from heapq import heappush, heappop\n\ndef merge(lst):\n    result = []\n    while lst:\n        result.append(heappop(lst))\n    return result\n\n\nif __name__ == \"__main__\":\n    print(merge([1, 2, 3, 4, 5, 6]))"
    },
    {
      "rank": 12,
      "score": 8.0,
      "candidate": "from heapq import heappush, heappop\n\nclass ArrayIterator(object):\n    def __init__(self, arr):\n        self.arr = arr\n\n    def __iter__(self):\n        return self\n\n    def __next__(self):\n        if len(self.arr) == 0:\n            raise StopIteration\n        if len(self.arr) == 1:\n            return self.arr.pop(0)\n        if len(self.arr) == 2:\n            heappush(self.arr, heappop(self.arr))\n            return heappop(self.arr)\n        if heappop(self.arr) > heappop(self.arr[0]):\n            heappush(self.arr, heappop(self.arr[0]))\n            return heappop(self.arr)\n        return heappop(self.arr)\n\narr = [1, 2, 3, 4, 5]\narr2 = [1, 2, 3, 4]\nprint(ArrayIterator(arr2))"
    },
    {
      "rank": 13,
      "score": 8.0,
      "candidate": "import heapq\n\n\nclass MaxHeap:\n    def __init__(self, iterable):\n        self.heap = []\n        for x in iterable:\n            heapq.heappush(self.heap, x)\n\n    def __iter__(self):\n        return self.heap.__iter__()\n\n    def __len__(self):\n        return len(self.heap)\n\n    def __getitem__(self, i):\n        return heapq.heappop(self.heap)[i]\n\n    def __contains__(self, x):\n        return x in self.heap\n\n    def __setitem__(self, i, x):\n        heapq.heappush(self.heap, (x, i))\n\n\nif __name__ == \"__main__\":\n    h = MaxHeap([5, 3, 2, 6, 4, 1])\n    assert h[0] == 3\n    assert h[1] == 2\n    assert h[2] == 6\n    assert h[3] == 4\n    assert h[4] == 1\n    assert h[5] == 5\n    assert h[6] == 6\n\n    assert h[0] == 5\n    assert h[1] == 6\n    assert h[2] == 4\n    assert h[3] == 1\n    assert h[4] == 2\n    assert h[5] == 3"
    },
    {
      "rank": 14,
      "score": 8.0,
      "candidate": "from heapq import heappush, heappop\n\n\nclass Stack:\n    def __init__(self):\n        self.items = []\n\n    def __len__(self):\n        return len(self.items)\n\n    def push(self, item):\n        self.items.append(item)\n\n    def pop(self):\n        return self.items.pop()\n\n\ndef merge_sorted_iterator(s):\n    s_stack = Stack()\n    for item in s:\n        heappush(s_stack, item)\n    while not s_stack.is_empty():\n        yield s_stack.pop()\n\n\nif __name__ == '__main__':\n    s = [1, 2, 3, 4, 5, 6, 7]\n    print(merge_sorted_iterator(s))"
    },
    {
      "rank": 15,
      "score": 8.0,
      "candidate": "class HeapIterator:\n\n    def __init__(self, items):\n        self.items = items\n        self.heap = []\n        self.index = 0\n\n    def __next__(self):\n        if self.index >= len(self.items):\n            raise StopIteration\n\n        if self.heap and self.items[self.index] > self.heap[0]:\n            self.heap[0], self.items[self.index] = self.items[self.index], self.heap[0]\n\n        if self.index < len(self.items):\n            self.heap.append(self.items[self.index])\n            self.index += 1\n\n        return self.heap[0]\n\n    def __iter__(self):\n        return self\n\n\ndef heap_merge(items):\n    iterator = HeapIterator(items)\n    while True:\n        yield iterator.__next__()\n\n\nif __name__ == '__main__':\n    print(list(heap_merge([1, 3, 5, 7, 9])))"
    },
    {
      "rank": 16,
      "score": 8.0,
      "candidate": "from typing import Iterator, List\n\n\nclass SortedIterator(Iterator):\n    def __init__(self, data: List[int]):\n        self.data = data\n        self.index = 0\n\n    def __next__(self) -> int:\n        if self.index >= len(self.data):\n            raise StopIteration\n        current_value = self.data[self.index]\n        self.index += 1\n        return current_value\n\n    def __iter__(self) -> Iterator[int]:\n        return self\n\n\ndef merge(iterator1: SortedIterator, iterator2: SortedIterator) -> SortedIterator:\n    data = []\n    while iterator1 or iterator2:\n        if iterator1:\n            data.append(iterator1.next())\n        if iterator2:\n            data.append(iterator2.next())\n\n    return SortedIterator(data)"
    },
    {
      "rank": 17,
      "score": 8.0,
      "candidate": "class Heap:\n    def __init__(self):\n        self.heap = []\n        self.size = 0\n\n    def __len__(self):\n        return self.size\n\n    def __str__(self):\n        return str(self.heap)\n\n    def __iter__(self):\n        return self\n\n    def push(self, item):\n        heapq.heappush(self.heap, item)\n        self.size += 1\n\n    def pop(self):\n        if self.size > 0:\n            return heapq.heappop(self.heap)\n        else:\n            return None\n\n    def peek(self):\n        if self.size > 0:\n            return self.heap[0]\n        else:\n            return None\n\n    def clear(self):\n        while self.size > 0:\n            self.heap[0] = self.pop()\n            self.size -= 1\n\n\nif __name__ == \"__main__\":\n    h = Heap()\n    h.push(1)\n    h.push(2)\n    h.push(3)\n    h.push(4)\n    h.push(5)\n    h.push(6)\n    print(h)\n    print(h.pop())\n    print(h)\n    print(h.pop())\n    print(h)\n    print(h.pop())\n    print(h)\n    print(h)\n    print(h)\n    print(h)"
    },
    {
      "rank": 18,
      "score": 8.0,
      "candidate": "import heapq\n\n\ndef merge_sorted_iterators(iterators):\n    heap = []\n    for iterator in iterators:\n        heapq.heappush(heap, iterator)\n\n    while heap:\n        yield heapq.heappop(heap)"
    },
    {
      "rank": 19,
      "score": 8.0,
      "candidate": "from heapq import heappush, heappop\n\n\ndef merge_sorted_iterator(it):\n    while True:\n        x = heappop(it)\n        y = heappop(it)\n        if x < y:\n            heappush(it, x)\n        else:\n            heappush(it, y)\n        yield x"
    },
    {
      "rank": 20,
      "score": 8.0,
      "candidate": "class Heap:\n    def __init__(self):\n        self.heap = []\n\n    def push(self, x):\n        heapq.heappush(self.heap, x)\n\n    def pop(self):\n        return heapq.heappop(self.heap)\n\n    def is_empty(self):\n        return len(self.heap) == 0\n\n    def __iter__(self):\n        while not self.is_empty():\n            yield self.pop()\n\n\nif __name__ == \"__main__\":\n    heap = Heap()\n    heap.push(5)\n    heap.push(3)\n    heap.push(2)\n    heap.push(1)\n\n    print(heap)\n    print(list(heap))\n    print(list(heap)[0])\n    print(list(heap)[0:2])\n    print(list(heap)[0:2][1:])\n    print(list(heap)[2:])\n    print(list(heap)[2:][1:])"
    },
    {
      "rank": 21,
      "score": 8.0,
      "candidate": "from typing import List\n\n\nclass Heap:\n    def __init__(self, iterable: List[int]):\n        self.heap: List[int] = []\n        self.add_list(iterable)\n\n    def add_list(self, iterable: List[int]):\n        for item in iterable:\n            self.heap.append(item)\n            self.heapify()\n\n    def heapify(self):\n        max_idx = len(self.heap) - 1\n        while max_idx > 0:\n            if self.heap[0] > self.heap[max_idx]:\n                max_idx -= 1\n            else:\n                self.heap[0], self.heap[max_idx] = self.heap[max_idx], self.heap[0]\n\n\nif __name__ == \"__main__\":\n    heap = Heap([1, 2, 3, 4, 5])\n    assert heap.heapify() == [1, 2, 3, 4, 5]"
    },
    {
      "rank": 22,
      "score": 8.0,
      "candidate": "class MinHeap(object):\n    def __init__(self):\n        self.heap = []\n\n    def push(self, val):\n        self.heap.append(val)\n        self.heapify(len(self.heap) - 1)\n\n    def pop(self):\n        if len(self.heap) == 0:\n            return None\n        else:\n            return self.heap[0]\n\n    def pop_min(self):\n        if len(self.heap) == 0:\n            return None\n        else:\n            return self.heap[0]\n\n    def heapify(self, index):\n        parent = (index - 1) // 2\n        if parent >= 0 and self.heap[index] > self.heap[parent]:\n            self.heap[index], self.heap[parent] = self.heap[parent], self.heap[index]\n            self.heapify(parent)\n\n    def __iter__(self):\n        while self.heap:\n            yield self.pop()\n\n\ndef merge_sort(lst):\n    if len(lst) < 2:\n        return lst\n    min_heap = MinHeap()\n    for val in lst:\n        min_heap.push(val)\n    for _ in range(len(lst) - 1):\n        yield min_heap.pop_min()"
    },
    {
      "rank": 23,
      "score": 8.0,
      "candidate": "from heapq import heappush, heappop\n\n\ndef merge_sort(nums):\n    if len(nums) <= 1:\n        return nums\n    else:\n        return merge(merge_sort(nums[:len(nums)//2]), merge_sort(nums[len(nums)//2:]))\n\n\ndef merge(left, right):\n    result = []\n    left_heap, right_heap = [], []\n    for x in left:\n        if x not in result:\n            heappush(left_heap, x)\n    for x in right:\n        if x not in result:\n            heappush(right_heap, x)\n    while len(left_heap) > 0 or len(right_heap) > 0:\n        if len(left_heap) > 0:\n            result.append(heappop(left_heap))\n        if len(right_heap) > 0:\n            result.append(heappop(right_heap))\n    return result"
    },
    {
      "rank": 24,
      "score": 8.0,
      "candidate": "def merge_sorted_iterator(lst):\n    heap = []\n    for i in range(len(lst)):\n        heapq.heappush(heap, lst[i])\n\n    while heap:\n        yield heapq.heappop(heap)\n\n\nif __name__ == \"__main__\":\n    assert list(merge_sorted_iterator([1, 2, 3, 4])) == [1, 2, 3, 4]"
    },
    {
      "rank": 25,
      "score": 8.0,
      "candidate": "def merge_sorted_iterator(iterables):\n    for i in iterables:\n        yield from heapq.nlargest(1, i)"
    },
    {
      "rank": 26,
      "score": 8.0,
      "candidate": "from heapq import heappush, heappop\n\n\nclass SortedIterator(object):\n    def __init__(self, iterable):\n        self.iterable = iterable\n        self.index = 0\n\n    def __iter__(self):\n        return self\n\n    def __next__(self):\n        if self.index < len(self.iterable):\n            item = self.iterable[self.index]\n            self.index += 1\n            return item\n        else:\n            raise StopIteration()\n\n\ndef merge_sorted_iterator(iter1, iter2):\n    if iter1 is None:\n        return iter2\n    if iter2 is None:\n        return iter1\n    heap = []\n    heapq.heappush(heap, (iter1.next(), iter1))\n    heapq.heappush(heap, (iter2.next(), iter2))\n    while heap:\n        current, iterator = heapq.heappop(heap)\n        if iterator is iter1:\n            yield current\n            continue\n        if iterator is iter2:\n            yield current\n            continue\n        heappush(heap, (iterator.next(), iterator))\n\n\nif __name__ == '__main__':\n    it1 = SortedIterator([1, 2, 3, 4])\n    it2 = SortedIterator([5, 6, 7])\n    print(list(merge_sorted_iterator(it1, it2)))"
    },
    {
      "rank": 27,
      "score": 8.0,
      "candidate": "class SortedIterator:\n    def __init__(self, input_list):\n        self.input_list = input_list\n        self.index = 0\n        self.heap_queue = []\n\n    def __iter__(self):\n        return self\n\n    def __next__(self):\n        if self.index >= len(self.input_list):\n            raise StopIteration\n        if self.heap_queue and self.heap_queue[0][0] < self.input_list[self.index]:\n            self.heap_queue.pop(0)\n        if self.heap_queue:\n            item = self.heap_queue[0]\n            self.index += 1\n            return item\n        else:\n            raise StopIteration\n\n    def add(self, item):\n        self.heap_queue.append((item, self.index))\n\n    def size(self):\n        return len(self.heap_queue)\n\n\nif __name__ == \"__main__\":\n    test_list = [(3, 1, 2), (1, 2, 3), (4, 5, 6)]\n    test_iterator = SortedIterator(test_list)\n    for item in test_iterator:\n        print(item)"
    },
    {
      "rank": 28,
      "score": 8.0,
      "candidate": "from typing import List\n\n\ndef merge_sorted_iterator(l: List[int]) -> int:\n    if len(l) == 0:\n        return 0\n\n    heap = []\n    for num in l:\n        heapq.heappush(heap, num)\n\n    while len(heap) > 1:\n        heapq.heappop(heap)\n\n        heapq.heappush(heap, heapq.heappop(heap))\n\n    return heap[0]\n\n\nif __name__ == \"__main__\":\n    assert merge_sorted_iterator([1, 2, 3, 4, 5]) == 5\n    assert merge_sorted_iterator([3, 4, 5]) == 5\n    assert merge_sorted_iterator([]) == 0"
    },
    {
      "rank": 29,
      "score": 8.0,
      "candidate": "class Heap:\n    def __init__(self, value):\n        self.value = value\n        self.left = None\n        self.right = None\n\n    def __lt__(self, other):\n        return self.value < other.value\n\n    def __gt__(self, other):\n        return self.value > other.value\n\n    def __le__(self, other):\n        return self.value <= other.value\n\n    def __ge__(self, other):\n        return self.value >= other.value\n\n    def __eq__(self, other):\n        return self.value == other.value\n\n    def __ne__(self, other):\n        return self.value!= other.value\n\n    def __hash__(self):\n        return hash(self.value)\n\n    def push(self, value):\n        if not self.left:\n            self.left = Heap(value)\n        else:\n            if self.value < value:\n                self.left.push(value)\n            else:\n                self.right.push(value)\n\n    def pop(self):\n        if not self.left:\n            return self.right.pop()\n        elif self.value > self.right.value:\n            return self.left.pop()\n        else:\n            return self.right.pop()\n\n    def size(self):\n        return self.left.size() + self.right.size()\n\n    def __str__(self):\n        return \"heap: left: \" + str(self.left) + \" right: \" + str(self.right)\n\nif __name__ == \"__main__\":\n    heap = Heap(10)\n    heap.push(9)\n    heap.push(8)\n    heap.push(7)\n    heap.push(6)\n    heap.push(5)\n    heap.push(4)\n    heap.push(3)\n    heap.push(2)\n    heap.push(1)\n\n    print(heap)\n\n    print(heap.pop())\n    print(heap)\n\n    print(heap.pop())\n    print(heap)\n\n    print(heap.pop"
    },
    {
      "rank": 30,
      "score": 8.0,
      "candidate": "from heapq import heappush, heappop\n\n\ndef merge_sorted_iter(arr):\n    if not arr:\n        return\n\n    heap = []\n    for item in arr:\n        heappush(heap, -item)\n\n    while heap:\n        yield heappop(heap)\n\n\nif __name__ == \"__main__\":\n    arr = [5, 4, 3, 2, 1]\n    print(merge_sorted_iter(arr))"
    },
    {
      "rank": 31,
      "score": 8.0,
      "candidate": "class Heap:\n    def __init__(self, max_val):\n        self.max_val = max_val\n        self.heap = []\n\n    def push(self, val):\n        heapq.heappush(self.heap, val)\n\n    def pop(self):\n        return heapq.heappop(self.heap)\n\n    def __iter__(self):\n        return self\n\n    def __next__(self):\n        if len(self.heap) == 0:\n            raise StopIteration()\n        else:\n            return self.pop()\n\n\nclass SortedIterator(object):\n    def __init__(self, max_val):\n        self.max_val = max_val\n        self.heap = Heap(max_val)\n\n    def __iter__(self):\n        return self\n\n    def __next__(self):\n        if len(self.heap) == 0:\n            raise StopIteration()\n        else:\n            return self.pop()\n\n    def push(self, val):\n        self.heap.push(val)\n\n    def pop(self):\n        return self.heap.pop()\n\n    def __len__(self):\n        return len(self.heap)\n\n    def __getitem__(self, index):\n        if index < 0 or index >= len(self):\n            raise IndexError()\n        else:\n            return self.pop()\n\n    def __repr__(self):\n        return str(list(self))\n\n\nif __name__ == \"__main__\":\n    iter_1 = SortedIterator(5)\n    iter_2 = SortedIterator(5)\n    iter_3 = SortedIterator(5)\n\n    iter_1.push(1)\n    iter_1.push(2)\n    iter_1.push(3)\n    iter_1.push(4)\n    iter_1.push(5)\n\n    iter_2.push(1)\n    iter_2.push(2)\n    iter_2.push(3)\n    iter_2.push(4)\n    iter_2.push(5)\n\n    iter_3.push(1)\n    iter_3"
    },
    {
      "rank": 32,
      "score": 8.0,
      "candidate": "from heapq import heappush, heappop\n\nclass SortedIterator:\n\n    def __init__(self, inputs):\n        self.inputs = inputs\n\n    def __iter__(self):\n        return self\n\n    def next(self):\n        if not self.inputs:\n            raise StopIteration\n        x = heappop(self.inputs)\n        return x\n\n    def __len__(self):\n        return len(self.inputs)\n\n\nif __name__ == '__main__':\n    iterator = SortedIterator([1, 2, 3, 4, 5])\n    for i in iterator:\n        print(i)"
    },
    {
      "rank": 33,
      "score": 8.0,
      "candidate": "def merge_sorted_iterator(iter1, iter2):\n    while iter1 and iter2:\n        if iter1.next() <= iter2.next():\n            yield iter1.next()\n            iter1 = iter1.next()\n        else:\n            yield iter2.next()\n            iter2 = iter2.next()"
    },
    {
      "rank": 34,
      "score": 8.0,
      "candidate": "class HeapQueue:\n    def __init__(self):\n        self.heap = []\n\n    def push(self, value):\n        self.heap.append(value)\n        self.heapify()\n\n    def pop(self):\n        if len(self.heap) > 0:\n            return self.heap[0]\n        else:\n            return None\n\n    def heapify(self):\n        p = len(self.heap)//2\n        if p > 0:\n            if self.heap[0] > self.heap[p]:\n                self.heap[0], self.heap[p] = self.heap[p], self.heap[0]\n            self.heapify()\n\n\nif __name__ == \"__main__\":\n    heap = HeapQueue()\n    heap.push(1)\n    heap.push(2)\n    heap.push(3)\n    heap.push(4)\n    print(heap.pop())\n    print(heap.pop())\n    print(heap.pop())\n    print(heap.pop())\n    print(heap.pop())\n    print(heap.pop())\n    print(heap.pop())\n    print(heap.pop())\n    print(heap.pop())\n    print(heap.pop())"
    },
    {
      "rank": 35,
      "score": 8.0,
      "candidate": "class HeapQueue:\n    def __init__(self, elements):\n        self.elements = elements\n        self.size = len(elements)\n        self.heap = []\n        self.heapify(0)\n\n    def heapify(self, index):\n        while index > 0:\n            parent = (index - 1) // 2\n            if self.elements[index] < self.elements[parent]:\n                self.elements[index], self.elements[parent] = self.elements[parent], self.elements[index]\n            index = parent\n\n    def push(self, value):\n        self.heapify(self.size)\n        self.heap.append(value)\n\n    def pop(self):\n        if self.size > 0:\n            element = self.heap[0]\n            self.heap[0] = self.heap[self.size]\n            self.size -= 1\n            return element\n        return None\n\n    def peek(self):\n        if self.size > 0:\n            return self.heap[0]\n        return None\n\n    def __len__(self):\n        return self.size\n\n    def __getitem__(self, index):\n        if index >= self.size or index < 0:\n            raise IndexError\n        return self.elements[index]\n\n    def __iter__(self):\n        for i in range(self.size):\n            yield self.elements[i]"
    },
    {
      "rank": 36,
      "score": 8.0,
      "candidate": "import heapq\n\n\nclass MergeSortedIterator:\n\n    def __init__(self, iterable):\n        self.iterable = iterable\n        self.heap = []\n\n    def push(self, item):\n        heapq.heappush(self.heap, item)\n\n    def pop(self):\n        return heapq.heappop(self.heap)\n\n    def __iter__(self):\n        while self.heap:\n            yield self.pop()\n\n\nif __name__ == '__main__':\n    iter = MergeSortedIterator(range(10))\n    iter.push(1)\n    iter.push(2)\n    iter.push(3)\n    iter.push(4)\n    iter.push(5)\n    iter.push(6)\n    iter.push(7)\n    iter.push(8)\n    iter.push(9)\n\n    for item in iter:\n        print(item)"
    },
    {
      "rank": 37,
      "score": 8.0,
      "candidate": "import heapq\n\nclass HeapIterator:\n    def __init__(self, iterable):\n        self.heap = [(val, i) for i, val in enumerate(iterable)]\n\n    def next(self):\n        heapq.heappop(self.heap)\n        val, i = heapq.heappop(self.heap)\n        return val, i\n\n    def __iter__(self):\n        return self\n\n\ndef merge_sorted_iterators(iter1, iter2):\n    if not iter1:\n        return iter2\n    elif not iter2:\n        return iter1\n    if iter1[0] <= iter2[0]:\n        return merge_sorted_iterators(iter1[1:], iter2[1:])\n    else:\n        return merge_sorted_iterators(iter1, iter2[1:])\n\n\nif __name__ == \"__main__\":\n    iter1 = [5, 7, 9, 1, 3, 6, 2]\n    iter2 = [2, 6, 8, 3, 9, 4, 1, 5]\n    assert merge_sorted_iterators(iter1, iter2) == (5, 1, 2, 6, 8, 3, 9, 4, 1)"
    },
    {
      "rank": 38,
      "score": 8.0,
      "candidate": "from heapq import heappush, heappop\n\n\ndef merge_sorted_iterator(list_of_items):\n    list_of_items.sort()\n    return iter(list_of_items)\n\n\ndef test_merge_sorted_iterator():\n    list_of_items = [1, 2, 3, 4, 5]\n    assert list_of_items == list(merge_sorted_iterator(list_of_items))\n\n\ndef test_merge_sorted_iterator_empty():\n    list_of_items = []\n    assert list_of_items == list(merge_sorted_iterator(list_of_items))\n\n\ndef test_merge_sorted_iterator_empty_list():\n    list_of_items = []\n    assert list_of_items == list(merge_sorted_iterator(list_of_items))\n\n\ndef test_merge_sorted_iterator_empty_iterator():\n    list_of_items = []\n    assert list_of_items == list(merge_sorted_iterator(list_of_items))"
    },
    {
      "rank": 39,
      "score": 8.0,
      "candidate": "from heapq import heappush, heappop\n\n\nclass MergeIterator:\n    def __init__(self, nums):\n        self.nums = nums\n\n    def merge(self):\n        h = []\n        while len(self.nums) > 0:\n            heappush(h, self.nums.pop())\n        while len(h) > 0:\n            yield heappop(h)"
    },
    {
      "rank": 40,
      "score": 8.0,
      "candidate": "from heapq import heapify, heappush, heappop\n\n\nclass Iterators:\n\n    def __init__(self, inputs):\n        self.inputs = inputs\n        self.size = len(inputs)\n\n    def next(self):\n        if self.size == 0:\n            raise StopIteration\n\n        item = heappop(self.inputs)\n        self.size -= 1\n\n        return item\n\n    def __iter__(self):\n        return self\n\n\nif __name__ == '__main__':\n    input_iterator = Iterators([1, 2, 3, 4])\n    print(list(input_iterator))\n    print(next(input_iterator))\n    print(next(input_iterator))\n    print(next(input_iterator))\n    print(next(input_iterator))\n    print(next(input_iterator))\n    print(next(input_iterator))\n    print(next(input_iterator))\n    print(next(input_iterator))\n    print(next(input_iterator))\n    print(next(input_iterator))\n    print(next(input_iterator))\n    print(next(input_iterator))\n    print(next(input_iterator))\n    print(next(input_iterator))\n    print(next(input_iterator))\n    print(next(input_iterator))\n    print(next(input_iterator))\n    print(next(input_iterator))\n    print(next(input_iterator))\n    print(next(input_iterator))\n    print(next(input_iterator))\n    print(next(input_iterator))\n    print(next(input_iterator))\n    print(next(input_iterator))\n    print(next(input_iterator))\n    print(next(input_iterator))\n    print(next(input_iterator))\n    print(next(input_iterator))\n    print(next(input_iterator))\n    print(next(input_iterator))\n    print(next(input_iterator))\n    print(next(input_iterator))\n    print(next(input_iterator))\n    print(next(input_iterator))\n    print(next(input_iterator))\n    print(next(input_iterator))"
    },
    {
      "rank": 41,
      "score": 8.0,
      "candidate": "class HeapQueue:\n    def __init__(self, list_of_elements):\n        self.elements = list_of_elements\n        self.heap = []\n        self.heapify()\n\n    def heapify(self):\n        for i in range(len(self.elements) - 1, 0, -1):\n            self.heapify_by_heap(i)\n\n    def heapify_by_heap(self, i):\n        parent = i // 2\n        while parent >= 0 and self.elements[i] > self.elements[parent]:\n            self.elements[i], self.elements[parent] = self.elements[parent], self.elements[i]\n            parent = parent // 2\n\n    def push(self, value):\n        self.heap.append(value)\n        self.heapify()\n\n    def pop(self):\n        return self.heap.pop()\n\n    def peek(self):\n        return self.heap[0]\n\n    def __len__(self):\n        return len(self.elements)"
    },
    {
      "rank": 42,
      "score": 8.0,
      "candidate": "class heap_queue:\n    def __init__(self):\n        self.heap = []\n\n    def push(self, val):\n        heapq.heappush(self.heap, val)\n\n    def pop(self):\n        return heapq.heappop(self.heap)\n\n    def peek(self):\n        return self.heap[0]\n\n    def empty(self):\n        return not self.heap\n\n    def size(self):\n        return len(self.heap)\n\n\nif __name__ == '__main__':\n    my_heap = heap_queue()\n    my_heap.push(10)\n    my_heap.push(5)\n    my_heap.push(2)\n    my_heap.push(4)\n    print(my_heap.peek())\n    print(my_heap.empty())\n    print(my_heap.size())\n\n    my_heap.push(20)\n    print(my_heap.peek())\n    print(my_heap.empty())\n    print(my_heap.size())\n\n    my_heap.push(3)\n    print(my_heap.peek())\n    print(my_heap.empty())\n    print(my_heap.size())\n\n    my_heap.push(20)\n    print(my_heap.peek())\n    print(my_heap.empty())\n    print(my_heap.size())\n\n    my_heap.push(5)\n    print(my_heap.peek())\n    print(my_heap.empty())\n    print(my_heap.size())\n\n    my_heap.push(2)\n    print(my_heap.peek())\n    print(my_heap.empty())\n    print(my_heap.size())\n\n    my_heap.push(4)\n    print(my_heap.peek())\n    print(my_heap.empty())\n    print(my_heap.size())\n\n    my_heap.push(3)\n    print(my_heap.peek())\n    print(my_heap.empty())\n    print(my_heap.size())"
    },
    {
      "rank": 43,
      "score": 8.0,
      "candidate": "class MergeSortedIterator:\n    def __init__(self, data):\n        self.data = data\n\n    def __next__(self):\n        if len(self.data) == 0:\n            raise StopIteration\n\n        data_index = 0\n        while data_index < len(self.data) - 1:\n            if self.data[data_index] > self.data[data_index + 1]:\n                return self.data[data_index]\n            data_index += 1\n\n        return self.data[data_index]\n\n    def __iter__(self):\n        return self\n\n\nif __name__ == '__main__':\n    data = [1, 2, 3, 4, 5, 6, 7]\n    iterator = MergeSortedIterator(data)\n    while True:\n        print(next(iterator))"
    },
    {
      "rank": 44,
      "score": 8.0,
      "candidate": "class Heap:\n\n    def __init__(self):\n        self.heap = []\n        self.size = 0\n\n    def push(self, value):\n        heapq.heappush(self.heap, value)\n        self.size += 1\n\n    def pop(self):\n        return heapq.heappop(self.heap)\n\n    def __len__(self):\n        return self.size\n\n\ndef merge_sort(nums):\n    heap = Heap()\n\n    for num in nums:\n        heap.push(num)\n\n    while len(heap) > 1:\n        left = heap.pop()\n        right = heap.pop()\n        if left > right:\n            heap.push(right)\n        else:\n            heap.push(left)\n\n    return heap.pop()\n\n\nif __name__ == '__main__':\n    nums = [10, 11, 12, 13, 14, 15, 16, 17]\n    print(merge_sort(nums))"
    },
    {
      "rank": 45,
      "score": 8.0,
      "candidate": "def merge_sort(nums):\n    if len(nums) <= 1:\n        return nums\n\n    # make a heap\n    heap = []\n    for num in nums:\n        heapq.heappush(heap, num)\n\n    # do the sorting\n    while heap:\n        num = heapq.heappop(heap)\n        yield num\n\n\nif __name__ == \"__main__\":\n    import unittest\n\n    class Test(unittest.TestCase):\n\n        def test_case_1(self):\n            nums = [1, 2, 3, 4]\n            self.assertEqual(list(merge_sort(nums)), [1, 2, 3, 4])\n\n        def test_case_2(self):\n            nums = [1, 2, 3, 4, 5]\n            self.assertEqual(list(merge_sort(nums)), [1, 2, 3, 4, 5])\n\n        def test_case_3(self):\n            nums = [1, 2, 3, 4, 5]\n            self.assertEqual(list(merge_sort(nums)), [1, 2, 3, 4, 5])\n\n        def test_case_4(self):\n            nums = [1, 2, 3, 4, 5, 6]\n            self.assertEqual(list(merge_sort(nums)), [1, 2, 3, 4, 5, 6])\n\n    unittest.main()"
    },
    {
      "rank": 46,
      "score": 8.0,
      "candidate": "from typing import List\n\n\nclass HeapQueue:\n    def __init__(self) -> None:\n        self.heap: List[int] = []\n\n    def push(self, val: int) -> None:\n        self.heap.append(val)\n        self.heapify(len(self.heap) - 1)\n\n    def pop(self) -> int:\n        return self.heap[0]\n\n    def pop_min(self) -> int:\n        return self.heap[0]\n\n    def push_max(self, val: int) -> None:\n        if len(self.heap) == 1:\n            self.heap.append(val)\n        else:\n            self.heap[0] = val\n            self.heapify(0)\n\n    def push_min_max(self, val: int) -> None:\n        if len(self.heap) == 1:\n            self.heap.append(val)\n        else:\n            self.heap[0] = val\n            self.heapify(0)\n            self.heapify(1)\n\n    def heapify(self, pos: int) -> None:\n        parent = pos // 2\n        while pos > 0 and self.heap[parent] < self.heap[pos]:\n            self.heap[parent], self.heap[pos] = self.heap[pos], self.heap[parent]\n            pos = parent\n\n    def __len__(self) -> int:\n        return len(self.heap)\n\n\nif __name__ == \"__main__\":\n    heap = HeapQueue()\n    heap.push(1)\n    heap.push(2)\n    heap.push(3)\n    print(heap)\n    print(heap.pop())\n    print(heap.pop())\n    print(heap.pop())\n    print(heap.pop())\n    print(heap)\n    print(heap.pop())\n    print(heap)\n    print(heap.pop())\n    print(heap)\n    print(heap.pop())\n    print(heap)\n    print(heap)\n    print(heap)\n    print(heap)\n    print(heap)\n    print(heap)"
    },
    {
      "rank": 47,
      "score": 8.0,
      "candidate": "from heapq import heappush, heappop\nfrom typing import List\n\n\nclass Iter:\n    def __init__(self, values: List[int]):\n        self.values = values\n\n    def __iter__(self):\n        return self\n\n    def __next__(self):\n        if not self.values:\n            raise StopIteration\n        value = heappop(self.values)\n        return value\n\n\ndef merge_sorted_iterators(iter1: Iter, iter2: Iter) -> Iter:\n    return Iter(\n        [value for value in iter1.values if value < iter2.values[0]]\n        + [value for value in iter2.values if value > iter1.values[0]]\n    )\n\n\nif __name__ == \"__main__\":\n    assert merge_sorted_iterators([1, 2, 3], [4, 5, 6]) == Iter([1, 4, 5, 6])\n    assert merge_sorted_iterators([1, 2, 3], [4, 5, 6]) == Iter([1, 4, 5, 6])\n    assert merge_sorted_iterators([1, 2, 3, 4], [5, 6, 7, 8]) == Iter([1, 2, 3, 4, 5, 6, 7, 8])"
    },
    {
      "rank": 48,
      "score": 8.0,
      "candidate": "from heapq import heappush, heappop\n\n\nclass HeapIterator:\n    def __init__(self, iterable):\n        self.heap = []\n        for item in iterable:\n            heappush(self.heap, item)\n\n    def __iter__(self):\n        while self.heap:\n            yield heappop(self.heap)\n\n\nif __name__ == '__main__':\n    it = HeapIterator([4, 5, 1, 2, 3])\n    for item in it:\n        print(item)"
    },
    {
      "rank": 49,
      "score": 8.0,
      "candidate": "class HeapIterator:\n    def __init__(self, heap_list):\n        self.heap_list = heap_list\n        self.heap_index = 0\n        self.heap_size = len(heap_list)\n\n    def __iter__(self):\n        return self\n\n    def __next__(self):\n        if self.heap_index >= self.heap_size:\n            raise StopIteration\n        value, key = self.heap_list[self.heap_index], self.heap_list[self.heap_index]\n        self.heap_index += 1\n        return key, value\n\n    def __len__(self):\n        return self.heap_size\n\n    def push(self, item):\n        self.heap_list.append(item)\n        self.heapify(self.heap_index)\n\n    def pop(self):\n        if self.heap_index < len(self.heap_list) - 1:\n            self.heap_index += 1\n            return self.heap_list.pop()\n        raise StopIteration\n\n    def heapify(self, index):\n        while index * 2 + 1 < len(self.heap_list):\n            if index * 2 + 1 < len(self.heap_list) and self.heap_list[index * 2 + 1] < self.heap_list[index * 2]:\n                self.heap_list[index * 2], self.heap_list[index * 2 + 1] = self.heap_list[index * 2 + 1], self.heap_list[index * 2]\n            else:\n                break\n\n    def heap_sort(self):\n        for i in range(len(self.heap_list) // 2):\n            self.heapify(i)\n        for i in range(len(self.heap_list) - 1, 0, -1):\n            self.heap_list[0], self.heap_list[i] = self.heap_list[i], self.heap_list[0]\n\n\nif __name__ == '__main__':\n    heap_list = [10, 5, 5, 6, 6, 6, 6]\n    heap_iterator = HeapIterator(heap_list)"
    },
    {
      "rank": 50,
      "score": 8.0,
      "candidate": "from heapq import heappush, heappop\n\n\nclass SortedIterator:\n    def __init__(self, arr):\n        self.arr = arr\n        self.heap = []\n\n    def __iter__(self):\n        return self\n\n    def __next__(self):\n        while self.heap:\n            val = heappop(self.heap)\n            if val < self.arr[0]:\n                return val\n        return None\n\n    def push(self, val):\n        heappush(self.heap, val)\n\n    def __len__(self):\n        return len(self.arr)\n\n\narr = [1, 2, 3, 4, 5]\nit = SortedIterator(arr)\nfor i in it:\n    print(i)"
    },
    {
      "rank": 51,
      "score": 8.0,
      "candidate": "from heapq import heapify, heappush, heappop\n\n\nclass HeapIterator:\n    def __init__(self, arr):\n        self.arr = arr\n        self.heap = []\n\n    def __len__(self):\n        return len(self.arr)\n\n    def __iter__(self):\n        while self.heap:\n            yield heappop(self.heap)\n\n    def push(self, value):\n        heappush(self.heap, value)\n\n\nif __name__ == \"__main__\":\n    it = HeapIterator([1, 2, 3, 4, 5])\n    for i in it:\n        print(i)"
    },
    {
      "rank": 52,
      "score": 8.0,
      "candidate": "class MinHeap:\n    def __init__(self):\n        self.heap = []\n\n    def push(self, val):\n        heapq.heappush(self.heap, val)\n\n    def pop(self):\n        return heapq.heappop(self.heap)\n\n    def peek(self):\n        return self.heap[0]\n\n    def is_empty(self):\n        return self.heap == []\n\n    def size(self):\n        return len(self.heap)\n\n\nif __name__ == '__main__':\n    my_heap = MinHeap()\n    my_heap.push(2)\n    my_heap.push(1)\n    my_heap.push(3)\n    print(my_heap.pop())\n    print(my_heap.pop())\n    print(my_heap.pop())\n    print(my_heap.pop())\n    print(my_heap.is_empty())\n    print(my_heap.size())"
    },
    {
      "rank": 53,
      "score": 8.0,
      "candidate": "import heapq\n\n\nclass ListNode:\n    def __init__(self, x):\n        self.val = x\n        self.next = None\n\n\ndef merge_sorted_iterator(head, tail):\n    if not head or not tail:\n        return\n    heapq.heappush(head, ListNode(head.val))\n    while head and tail:\n        if head.val < tail.val:\n            heapq.heappush(tail, ListNode(head.val))\n        head = heapq.heappop(head)\n        tail = heapq.heappop(tail)\n    while head:\n        heapq.heappush(head, ListNode(head.val))\n        head = heapq.heappop(head)\n    while tail:\n        heapq.heappush(tail, ListNode(tail.val))\n        tail = heapq.heappop(tail)\n\n\nif __name__ == \"__main__\":\n    l = ListNode(1)\n    l.next = ListNode(4)\n    l.next.next = ListNode(7)\n    l.next.next.next = ListNode(9)\n    l.next.next.next.next = ListNode(5)\n    l.next.next.next.next.next = ListNode(2)\n    l.next.next.next.next.next.next = ListNode(3)\n    l.next.next.next.next.next.next.next = ListNode(6)\n\n    print(l)\n\n    merge_sorted_iterator(l, l)\n    print(l)"
    },
    {
      "rank": 54,
      "score": 8.0,
      "candidate": "from heapq import heappush, heappop\n\n\ndef merge_sorted_iter(nums):\n    if not nums:\n        return []\n\n    heap = [(num, i) for i, num in enumerate(nums)]\n    heapq.heapify(heap)\n\n    while heap:\n        _, i = heappop(heap)\n        yield i\n        heappush(heap, (nums[i], i))"
    },
    {
      "rank": 55,
      "score": 8.0,
      "candidate": "import heapq\n\n\nclass HeapIterator:\n\n    def __init__(self, arr):\n        self.heap = []\n        for i in arr:\n            heapq.heappush(self.heap, i)\n\n    def __next__(self):\n        if not self.heap:\n            raise StopIteration()\n        return heapq.heappop(self.heap)\n\n\ndef merge_sort(arr):\n    if not arr:\n        return\n    mid = len(arr) // 2\n    left = arr[:mid]\n    right = arr[mid:]\n    merge_sort(left)\n    merge_sort(right)\n    i = 0\n    j = 0\n    while i < len(left) and j < len(right):\n        if left[i] < right[j]:\n            arr[i + j] = left[i]\n            i += 1\n        else:\n            arr[i + j] = right[j]\n            j += 1\n    while i < len(left):\n        arr[i + j] = left[i]\n        i += 1\n        j += 1\n    while j < len(right):\n        arr[i + j] = right[j]\n        i += 1\n        j += 1\n\n\nif __name__ == \"__main__\":\n    arr = [3, 4, 5, 6]\n    print(arr)\n    i = HeapIterator(arr)\n    for i in range(3):\n        print(i, i.next(), i.next(), i.next(), i.next())\n    print(arr)\n    merge_sort(arr)\n    print(arr)"
    },
    {
      "rank": 56,
      "score": 8.0,
      "candidate": "from heapq import heappush, heappop\n\n\ndef merge(a, b):\n    result = []\n    while len(a)!= 0 and len(b)!= 0:\n        if a[0] > b[0]:\n            heappush(result, a.pop(0))\n        else:\n            heappush(result, b.pop(0))\n    while len(a)!= 0:\n        result.append(a.pop(0))\n    while len(b)!= 0:\n        result.append(b.pop(0))\n    return result\n\n\nif __name__ == \"__main__\":\n    print(merge([4, 3, 1, 2, 5, 6], [4, 3, 1, 2, 5, 6]))"
    },
    {
      "rank": 57,
      "score": 8.0,
      "candidate": "class Heap:\n    def __init__(self, data):\n        self.data = data\n        self.min_heap = []\n        self.max_heap = []\n\n    def push(self, value):\n        if self.min_heap:\n            if self.min_heap[0] > value:\n                self.min_heap.pop(0)\n                self.max_heap.append(value)\n                self.min_heap.append(value)\n            else:\n                self.min_heap.append(value)\n        else:\n            self.max_heap.append(value)\n\n    def pop(self):\n        if self.max_heap:\n            return self.max_heap.pop()\n        else:\n            return self.data[0]\n\n    def peek(self):\n        if self.max_heap:\n            return self.max_heap[0]\n        else:\n            return self.data[0]\n\n    def __str__(self):\n        if self.max_heap:\n            return str(self.max_heap)\n        else:\n            return str(self.data)\n\n    def __repr__(self):\n        return self.__str__()\n\n\ndef merge_sort(data):\n    if len(data) <= 1:\n        return data\n    else:\n        mid = len(data) // 2\n        left = merge_sort(data[:mid])\n        right = merge_sort(data[mid:])\n\n        result = []\n\n        while left and right:\n            if left[0] > right[0]:\n                result.append(left.pop(0))\n            else:\n                result.append(right.pop(0))\n\n        result.extend(left)\n        result.extend(right)\n\n        return result"
    },
    {
      "rank": 58,
      "score": 8.0,
      "candidate": "import heapq\n\n\nclass MergeSortIterator:\n\n    def __init__(self, iterator):\n        self.iterator = iterator\n\n    def __iter__(self):\n        return self\n\n    def __next__(self):\n        if not self.iterator:\n            raise StopIteration\n\n        if not self.iterator[0]:\n            heapq.heappop(self.iterator)\n\n        return self.iterator.popleft()"
    },
    {
      "rank": 59,
      "score": 8.0,
      "candidate": "class PriorityQueue:\n    def __init__(self):\n        self.items = []\n\n    def push(self, item):\n        heapq.heappush(self.items, (item, -item))\n\n    def pop(self):\n        return heapq.heappop(self.items)[1]\n\n    def __iter__(self):\n        return self\n\n\nif __name__ == '__main__':\n    q = PriorityQueue()\n    q.push(5)\n    q.push(4)\n    q.push(2)\n    q.push(1)\n    q.push(3)\n    q.push(6)\n\n    for i in q:\n        print(i, end=' ')\n\n    print()\n\n    for i in q:\n        print(i, end=' ')\n\n    print()\n\n    for i in q:\n        print(i, end=' ')"
    },
    {
      "rank": 60,
      "score": 8.0,
      "candidate": "class Heap:\n    def __init__(self):\n        self.heap = []\n\n    def push(self, x):\n        self.heap.append(x)\n        heapify(self.heap)\n\n    def pop(self):\n        return self.heap.pop()\n\n    def peek(self):\n        return self.heap[0]\n\n    def size(self):\n        return len(self.heap)\n\n    def is_empty(self):\n        return self.size() == 0\n\n    def __str__(self):\n        return str(self.heap)\n\n\ndef heapify(self, x):\n    if len(self) == 0:\n        self.push(x)\n        return\n    if x < self[0]:\n        self.push(x)\n    else:\n        self.pop()\n\n\ndef merge_sort(self, x):\n    if len(self) == 0:\n        return x\n    if len(x) == 1:\n        return x\n\n    mid = len(self) // 2\n    left = merge_sort(self[:mid])\n    right = merge_sort(self[mid:])\n\n    return merge(left, right)\n\n\ndef merge(left, right):\n    result = []\n    while len(left) > 0 or len(right) > 0:\n        if len(left) > 0:\n            result.append(left.pop())\n        if len(right) > 0:\n            result.append(right.pop())\n\n    return result"
    },
    {
      "rank": 61,
      "score": 8.0,
      "candidate": "class heap_queue:\n    def __init__(self):\n        self.heap = []\n\n    def push(self, item):\n        heapq.heappush(self.heap, item)\n\n    def pop(self):\n        return heapq.heappop(self.heap)\n\n    def peek(self):\n        return self.heap[0]\n\n    def size(self):\n        return len(self.heap)\n\n    def __repr__(self):\n        return str(self.heap)\n\n\nif __name__ == \"__main__\":\n    q = heap_queue()\n    q.push(1)\n    q.push(2)\n    q.push(3)\n    q.push(4)\n    q.push(5)\n    print(q)\n    print(q.peek())\n    print(q.size())\n    print(q)\n    print(q.pop())\n    print(q.pop())\n    print(q.pop())\n    print(q.pop())\n    print(q.pop())\n    print(q.pop())\n    print(q.pop())\n    print(q.pop())\n    print(q.pop())\n    print(q.pop())\n    print(q.pop())\n    print(q.pop())\n    print(q.pop())\n    print(q.pop())\n    print(q.pop())\n    print(q.pop())\n    print(q.pop())\n    print(q.pop())\n    print(q.pop())\n    print(q.pop())\n    print(q.pop())\n    print(q.pop())\n    print(q.pop())\n    print(q.pop())\n    print(q.pop())\n    print(q.pop())\n    print(q.pop())\n    print(q.pop())\n    print(q.pop())\n    print(q.pop())\n    print(q.pop())\n    print(q.pop())\n    print(q.pop())\n    print(q.pop())\n    print(q.pop())\n    print(q.pop())\n    print(q.pop())\n    print"
    },
    {
      "rank": 62,
      "score": 8.0,
      "candidate": "from heapq import *\n\nclass SortedIterator:\n    def __init__(self, data):\n        self.data = data\n        self.heap = []\n        self.heapify(data)\n\n    def heapify(self, data):\n        heappush(self.heap, data[0])\n\n    def __iter__(self):\n        while self.heap:\n            yield heappop(self.heap)\n\n    def __next__(self):\n        return next(self.heap)\n\n    def peek(self):\n        return self.heap[0]\n\n    def pop(self):\n        return heappop(self.heap)\n\n    def add(self, value):\n        heappush(self.heap, value)\n\n    def __len__(self):\n        return len(self.data)\n\n    def __str__(self):\n        return str(self.data)\n\n\nif __name__ == \"__main__\":\n    data = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    it = SortedIterator(data)\n    print(it)\n    print(it.__next__())\n    print(it.peek())\n    print(it.add(3))\n    print(it)\n    print(it.__len__())\n    print(it.__str__())"
    },
    {
      "rank": 63,
      "score": 8.0,
      "candidate": "import heapq\n\nclass HeapIterator(object):\n    def __init__(self, nums):\n        self.heap = []\n        for num in nums:\n            heapq.heappush(self.heap, num)\n\n    def __iter__(self):\n        while self.heap:\n            yield heapq.heappop(self.heap)\n\n    def __len__(self):\n        return len(self.heap)\n\n\nif __name__ == \"__main__\":\n    h = HeapIterator([1, 2, 3, 4, 5])\n    print(list(h))\n    print(list(h))\n    print(list(h))\n    print(list(h))\n    print(list(h))\n    print(list(h))"
    },
    {
      "rank": 64,
      "score": 8.0,
      "candidate": "class MyHeap:\n    def __init__(self, val):\n        self.val = val\n        self.heap = []\n    \n    def push(self, val):\n        self.heap.append(val)\n        heapify(self.heap)\n    \n    def pop(self):\n        return self.heap.pop(0)\n    \n    def peek(self):\n        return self.heap[0]\n    \n    def isEmpty(self):\n        return len(self.heap) == 0\n    \n    def size(self):\n        return len(self.heap)\n    \n    def __str__(self):\n        return str(self.heap)\n\ndef heapify(h):\n    #base case\n    if len(h) <= 1:\n        return\n    \n    #find the mid\n    m = len(h) // 2\n    \n    #if the mid is smaller than the left half\n    if h[m] > h[m - 1]:\n        h[m], h[m - 1] = h[m - 1], h[m]\n    \n    #swap the two parts\n    h[m], h[m - 1] = h[m - 1], h[m]\n    \n    #loop through the remaining half\n    heapify(h)\n\n\ndef merge(x):\n    if x is None or len(x) == 0:\n        return None\n    h = MyHeap(x[0])\n    \n    for i in range(1, len(x)):\n        h.push(x[i])\n    \n    #pop the first element\n    return h.pop()\n\n\nif __name__ == \"__main__\":\n    print(merge([1,2,3,4,5,6,7,8,9]))"
    },
    {
      "rank": 65,
      "score": 8.0,
      "candidate": "class HeapQueue:\n    def __init__(self):\n        self.heap = []\n\n    def push(self, val):\n        heapq.heappush(self.heap, val)\n\n    def pop(self):\n        return heapq.heappop(self.heap)\n\n    def isEmpty(self):\n        return len(self.heap) == 0\n\n    def __len__(self):\n        return len(self.heap)\n\n    def __iter__(self):\n        return self\n\n\nif __name__ == '__main__':\n    heapq = HeapQueue()\n    for i in range(10):\n        heapq.push(i)\n    for i in range(10):\n        print(heapq.pop())"
    },
    {
      "rank": 66,
      "score": 8.0,
      "candidate": "from heapq import heappush, heappop\n\ndef merge(a, b):\n    if len(a) < len(b):\n        heappush(a, b[0])\n    else:\n        heappush(b, a[0])\n    while a and b:\n        if a[0] < b[0]:\n            heappop(a)\n        else:\n            heappop(b)\n    return a or b\n\n\nif __name__ == \"__main__\":\n    print(merge([1, 2, 3], [4, 5, 6]))"
    },
    {
      "rank": 67,
      "score": 8.0,
      "candidate": "from heapq import heappush, heappop\n\nclass SortedIterator:\n    def __init__(self, data):\n        self.data = data\n\n    def __iter__(self):\n        return self\n\n    def __next__(self):\n        if not self.data:\n            raise StopIteration\n        val = heappop(self.data)\n        if val:\n            return val\n        raise StopIteration\n\n    def __len__(self):\n        return len(self.data)\n\n    def __contains__(self, val):\n        return val in self.data\n\n    def __delitem__(self, val):\n        self.data.remove(val)\n\n    def __contains__(self, val):\n        return val in self.data\n\n\ndef merge(lst):\n    result = []\n    while lst:\n        val = lst.pop()\n        if not result or result[-1] > val:\n            result.append(val)\n        else:\n            heappush(result, val)\n    return result\n\n\nif __name__ == \"__main__\":\n    s = SortedIterator([1, 2, 3])\n    assert list(s) == [1, 2, 3]\n    assert s.next() == 2\n    assert s.next() == 3\n    assert s.next() == 4\n    assert s.next() == 5\n    assert s.next() == 6\n    assert s.next() == 7\n    assert s.next() == 8\n    assert s.next() == 9\n    assert s.next() == 10\n    assert s.next() == 11\n    assert s.next() == 12\n    assert s.next() == 13\n    assert s.next() == 14\n    assert s.next() == 15\n    assert s.next() == 16\n    assert s.next() == 17\n    assert s.next() == 18\n    assert s.next() == 19\n    assert s.next() == 20\n    assert s.next() == 21\n    assert s.next() == 22\n    assert s.next() == 23\n    assert s.next() == 24\n    assert s.next() == 25\n    assert s.next() == 26"
    },
    {
      "rank": 68,
      "score": 8.0,
      "candidate": "class Heap:\n    def __init__(self, iterable):\n        self.arr = [None] * len(iterable)\n        self.heapify(iterable)\n\n    def heapify(self, iterable):\n        for i in iterable:\n            j = i\n            while j and self.arr[j] < self.arr[i]:\n                self.arr[j], self.arr[i] = self.arr[i], self.arr[j]\n                j = i\n\n    def __iter__(self):\n        while self.arr:\n            yield self.arr[0]\n            self.arr[0] = self.arr[len(self.arr) - 1]\n            self.heapify(self.arr)"
    },
    {
      "rank": 69,
      "score": 8.0,
      "candidate": "from heapq import heappush, heappop\n\n\ndef merge_sort(arr):\n    if len(arr) <= 1:\n        return arr\n\n    mid = len(arr) // 2\n    left = merge_sort(arr[:mid])\n    right = merge_sort(arr[mid:])\n\n    return merge(left, right)\n\n\ndef merge(left, right):\n    res = []\n    while left and right:\n        if left[0] <= right[0]:\n            heappush(res, left.pop(0))\n        else:\n            heappush(res, right.pop(0))\n\n    while left:\n        res.append(left.pop(0))\n\n    while right:\n        res.append(right.pop(0))\n\n    return res\n\n\nif __name__ == \"__main__\":\n    assert merge_sort([0, 1, 2, 3, 4, 5]) == [0, 1, 2, 3, 4, 5]\n    assert merge_sort([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]\n    assert merge_sort([1, 2, 3, 4]) == [1, 2, 3, 4]"
    },
    {
      "rank": 70,
      "score": 8.0,
      "candidate": "class Heap:\n    def __init__(self, elements):\n        self.elements = elements\n        self.heap = []\n        self.heapify(self.elements)\n\n    def heapify(self, elements):\n        for i in range(len(elements) // 2):\n            self.heapify_at(i, elements)\n\n    def heapify_at(self, i, elements):\n        parent = (i + 1) // 2\n        if elements[i] > elements[parent]:\n            elements[i], elements[parent] = elements[parent], elements[i]\n            self.heapify(elements)\n\n    def __iter__(self):\n        while self.heap:\n            yield self.heap[0]\n            self.heap.pop(0)\n\n\nif __name__ == \"__main__\":\n    h = Heap([5, 3, 1, 9, 2, 4])\n    for i in h:\n        print(i)"
    },
    {
      "rank": 71,
      "score": 8.0,
      "candidate": "from heapq import heappush, heappop\n\nclass HeapIterator:\n    def __init__(self, iterable):\n        self.heap = []\n        for i in iterable:\n            heappush(self.heap, i)\n    \n    def next(self):\n        return heappop(self.heap)\n\n    def __iter__(self):\n        return self\n\n    def __len__(self):\n        return len(self.heap)\n\nif __name__ == '__main__':\n    h = HeapIterator([1, 2, 3, 4, 5, 6, 7])\n    print(h)\n    for i in h:\n        print(i)\n    print(h.next())\n    print(h.next())\n    print(h.next())\n    print(h.next())\n    print(h.next())\n    print(h.next())\n    print(h.next())\n    print(h.next())\n    print(h.next())\n    print(h.next())\n    print(h.next())\n    print(h.next())\n    print(h.next())\n    print(h.next())\n    print(h.next())\n    print(h.next())\n    print(h.next())\n    print(h.next())\n    print(h.next())\n    print(h.next())\n    print(h.next())\n    print(h.next())\n    print(h.next())\n    print(h.next())\n    print(h.next())\n    print(h.next())\n    print(h.next())\n    print(h.next())\n    print(h.next())\n    print(h.next())\n    print(h.next())\n    print(h.next())\n    print(h.next())\n    print(h.next())\n    print(h.next())\n    print(h.next())\n    print(h.next())\n    print(h.next())\n    print(h.next())\n    print(h.next())\n    print(h.next())\n    print(h.next())\n    print(h.next())\n    print(h.next"
    },
    {
      "rank": 72,
      "score": 8.0,
      "candidate": "from heapq import heappush, heappop\n\nclass Iterator:\n    def __init__(self, iterable):\n        self.iterable = iterable\n        self.heap = []\n\n    def __iter__(self):\n        return self\n\n    def __next__(self):\n        if not self.heap:\n            heappush(self.heap, self.iterable.pop())\n        else:\n            return heappop(self.heap)\n\n\nif __name__ == '__main__':\n    it = Iterator([2, 1, 5, 6, 3, 4, 7, 8, 9])\n    print(list(it))\n\n    it2 = Iterator([1, 2, 3, 4, 5])\n    print(list(it2))\n\n    it3 = Iterator([4, 7])\n    print(list(it3))"
    },
    {
      "rank": 73,
      "score": 8.0,
      "candidate": "from heapq import heappush, heappop\n\n\nclass Heap:\n    def __init__(self):\n        self.data = []\n\n    def push(self, data):\n        heappush(self.data, data)\n\n    def pop(self):\n        return heappop(self.data)\n\n    def __len__(self):\n        return len(self.data)\n\n\ndef merge(heap1: Heap, heap2: Heap):\n    data = []\n\n    while heap1 and heap2:\n        if heap1.pop() <= heap2.pop():\n            heappush(data, heap1.pop())\n        else:\n            heappush(data, heap2.pop())\n\n    while heap1:\n        data.append(heap1.pop())\n\n    while heap2:\n        data.append(heap2.pop())\n\n    return data\n\n\nif __name__ == \"__main__\":\n    heap1 = Heap()\n    heap2 = Heap()\n\n    heap1.push(1)\n    heap1.push(2)\n    heap1.push(3)\n    heap1.push(4)\n\n    heap2.push(5)\n    heap2.push(6)\n    heap2.push(7)\n\n    print(merge(heap1, heap2))"
    },
    {
      "rank": 74,
      "score": 8.0,
      "candidate": "class Heap:\n    def __init__(self, data=[]):\n        self.data = data\n        self.heap = []\n        self.heapify()\n\n    def heapify(self):\n        # if the heap is not empty\n        if len(self.data) > 0:\n            # find the minimum element\n            min_element = self.data[0]\n            # find the maximum element\n            max_element = self.data[0]\n            for i in range(1, len(self.data)):\n                # if the data between the two elements is smaller than the one before\n                if self.data[i] < min_element:\n                    min_element = self.data[i]\n                # if the data between the two elements is greater than the one after\n                if self.data[i] > max_element:\n                    max_element = self.data[i]\n\n            # swap the two elements\n            self.data[0], self.data[1] = self.data[1], self.data[0]\n\n            # remove the minimum element from the heap\n            self.heap.remove(min_element)\n\n    def push(self, value):\n        # add the new element to the heap\n        self.heap.append(value)\n\n    def pop(self):\n        # remove the min element from the heap\n        return self.heap.pop(0)\n\n    def peek(self):\n        # return the min element from the heap\n        return self.heap[0]\n\n    def size(self):\n        # return the size of the heap\n        return len(self.data)\n\n\nif __name__ == \"__main__\":\n    heap = Heap([1, 2, 3, 4, 5])\n    print(heap.data)\n    print(heap.size())\n    print(heap.peek())\n    print(heap.pop())\n    print(heap.size())"
    },
    {
      "rank": 75,
      "score": 8.0,
      "candidate": "from heapq import heappush, heappop\nfrom typing import List\n\n\nclass SortedIterator:\n    def __init__(self, elements: List[int]):\n        self.heap: List[int] = elements\n        self.index: int = 0\n\n    def next(self) -> int:\n        if self.index < len(self.heap):\n            heappush(self.heap, self.heap[self.index])\n            self.index += 1\n            return self.heap[self.index]\n        raise StopIteration\n\n    def __len__(self) -> int:\n        return len(self.heap)\n\n\nif __name__ == '__main__':\n    it = SortedIterator([1, 3, 5, 6, 7, 9])\n\n    for i in range(5):\n        print(it.next())\n\n    # output:\n    # 1 3 5 6 7 9\n    # 1 3 5 6 7 9\n    # 1 3 5 6 7 9\n    # 1 3 5 6 7 9\n    # 1 3 5 6 7 9"
    },
    {
      "rank": 76,
      "score": 8.0,
      "candidate": "from heapq import heapify, heappush, heappop, heappushpop, heapreplace\n\n\nclass MergingIterator:\n    def __init__(self, data):\n        self.data = data\n        self.size = len(data)\n\n    def __iter__(self):\n        return self\n\n    def __next__(self):\n        if self.size == 0:\n            raise StopIteration\n        if self.size == 1:\n            return self.data[0]\n        if self.size == 2:\n            return heappop(self.data)\n\n        if self.data[0] > self.data[1]:\n            heappush(self.data, heappop(self.data))\n        else:\n            heappushpop(self.data, heappop(self.data))\n\n        return self.data[0]\n\n    def __contains__(self, item):\n        return item in self.data\n\n    def __len__(self):\n        return self.size\n\n    def __getitem__(self, item):\n        if isinstance(item, slice):\n            return self.data[item.start:item.stop:item.step]\n        else:\n            return self.data[item]\n\n    def __setitem__(self, key, value):\n        if isinstance(key, slice):\n            raise TypeError(\"Cannot set slice\")\n        else:\n            self.data[key] = value\n\n\nif __name__ == \"__main__\":\n    data = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    iterator = MergingIterator(data)\n\n    for i in iterator:\n        print(i)"
    },
    {
      "rank": 77,
      "score": 8.0,
      "candidate": "import heapq\n\nclass MergeIterator:\n    def __init__(self, data):\n        self.data = data\n\n    def __iter__(self):\n        return self\n\n    def __next__(self):\n        if not self.data:\n            raise StopIteration\n\n        heapq.heappush(self.data, heapq.heappop(self.data))\n        return heapq.heappop(self.data)"
    },
    {
      "rank": 78,
      "score": 8.0,
      "candidate": "class heap_queue:\n    def __init__(self):\n        self.heap_list = []\n\n    def push(self, item):\n        heapq.heappush(self.heap_list, item)\n\n    def pop(self):\n        return heapq.heappop(self.heap_list)\n\n    def peek(self):\n        return self.heap_list[0]\n\n    def __len__(self):\n        return len(self.heap_list)"
    },
    {
      "rank": 79,
      "score": 8.0,
      "candidate": "class Heap:\n    def __init__(self):\n        self.heap = []\n    \n    def push(self, val):\n        self.heap.append(val)\n        heapify(self.heap)\n    \n    def pop(self):\n        return self.heap.pop(0)\n    \n    def peek(self):\n        return self.heap[0]\n    \n    def is_empty(self):\n        return len(self.heap) == 0\n    \n    def size(self):\n        return len(self.heap)\n    \n    def __str__(self):\n        return str(self.heap)\n    \n    def __repr__(self):\n        return str(self.heap)\n    \n    def __len__(self):\n        return len(self.heap)\n    \n    def __getitem__(self, key):\n        return self.heap[key]\n    \n    def __setitem__(self, key, val):\n        self.heap[key] = val\n    \n    def __delitem__(self, key):\n        del self.heap[key]\n    \n    def __contains__(self, key):\n        return key in self.heap\n    \n    def __iter__(self):\n        return self.heap.__iter__()\n    \n    def __reversed__(self):\n        return self.heap.__reversed__()\n    \n    def __contains__(self, item):\n        return item in self.heap\n    \n    def __len__(self):\n        return len(self.heap)\n    \n    def __eq__(self, other):\n        if isinstance(other, Heap):\n            return self.heap == other.heap\n        else:\n            return False\n    \n    def __ne__(self, other):\n        return not self.__eq__(other)\n    \n    def __lt__(self, other):\n        if isinstance(other, Heap):\n            return self.heap < other.heap\n        else:\n            return False\n    \n    def __le__(self, other):\n        if isinstance(other, Heap):\n            return self.heap <= other.heap\n        else:\n            return False"
    },
    {
      "rank": 80,
      "score": 8.0,
      "candidate": "class Heap:\n    def __init__(self, data=None):\n        self.heap = data\n        self.size = len(data)\n\n    def __len__(self):\n        return self.size\n\n    def __iter__(self):\n        return self\n\n    def __next__(self):\n        if self.size == 0:\n            raise StopIteration\n        else:\n            item = self.heap[0]\n            self.heap[0] = self.heap[1]\n            self.heap[1] = item\n            return item\n\n    def push(self, data):\n        self.heap.append(data)\n        self.heap = self.heap[0:self.size]\n\n\nif __name__ == '__main__':\n    h = Heap([1, 2, 3, 4, 5, 6, 7, 8, 9])\n    h.push(7)\n    h.push(8)\n    h.push(9)\n    h.push(10)\n    h.push(11)\n    h.push(12)\n    h.push(13)\n    print(list(h))\n    print(list(h.__iter__()))"
    },
    {
      "rank": 81,
      "score": 8.0,
      "candidate": "class HeapIterator:\n    def __init__(self, iterator):\n        self.heap = []\n        for elem in iterator:\n            self.insert(elem)\n\n    def insert(self, elem):\n        if self.heap:\n            if elem < self.heap[0]:\n                self.heap[0], self.heap[1] = self.heap[1], self.heap[0]\n        else:\n            self.heap.append(elem)\n\n    def pop(self):\n        if not self.heap:\n            return None\n        else:\n            elem = self.heap[0]\n            self.heap[0] = self.heap[1]\n            self.heap.pop()\n            return elem\n\n    def peek(self):\n        if not self.heap:\n            return None\n        else:\n            return self.heap[0]\n\n    def size(self):\n        return len(self.heap)\n\n\nif __name__ == '__main__':\n    iterator = [5, 6, 7, 8, 9, 10, 11, 12, 13]\n    heap_iterator = HeapIterator(iterator)\n    print(heap_iterator.size())\n    print(heap_iterator.peek())\n    print(heap_iterator.pop())\n    print(heap_iterator.pop())\n    print(heap_iterator.pop())\n    print(heap_iterator.pop())\n    print(heap_iterator.pop())\n    print(heap_iterator.pop())\n    print(heap_iterator.pop())\n    print(heap_iterator.pop())\n    print(heap_iterator.pop())\n    print(heap_iterator.pop())\n    print(heap_iterator.pop())\n    print(heap_iterator.pop())\n    print(heap_iterator.pop())\n    print(heap_iterator.pop())\n    print(heap_iterator.pop())\n    print(heap_iterator.pop())\n    print(heap_iterator.pop())\n    print(heap_iterator.pop())\n    print(heap_iterator.pop())\n    print(heap_iterator.pop())\n    print(heap_iterator.pop())\n    print(heap_iterator.pop())\n    print("
    },
    {
      "rank": 82,
      "score": 8.0,
      "candidate": "import heapq\n\nclass HeapIterator(object):\n\n    def __init__(self, items):\n        self.items = items\n        self.heap = []\n\n    def __len__(self):\n        return len(self.items)\n\n    def push(self, item):\n        heapq.heappush(self.heap, item)\n\n    def pop(self):\n        return heapq.heappop(self.heap)\n\n    def peek(self):\n        return self.heap[0]\n\n    def isEmpty(self):\n        return self.heap == []\n\n\nif __name__ == '__main__':\n    heapq.heapify(HeapIterator([1, 2, 3, 4, 5, 6]))\n    heapq.heapify(HeapIterator([1, 2, 3, 4, 5]))\n    heapq.heapify(HeapIterator([1, 2, 3, 4, 5, 6]))\n    print(heapq.heapify(HeapIterator([1, 2, 3, 4, 5, 6])))\n    print(heapq.heapify(HeapIterator([1, 2, 3, 4, 5, 6])))\n    print(heapq.heapify(HeapIterator([1, 2, 3, 4, 5, 6])))\n    print(heapq.heapify(HeapIterator([1, 2, 3, 4, 5, 6])))"
    },
    {
      "rank": 83,
      "score": 8.0,
      "candidate": "from heapq import *\n\n\ndef merge_heap(heap):\n    while len(heap) > 1:\n        heappush(heap, heappop(heap) + heappop(heap))\n    return heap[0]\n\n\nif __name__ == '__main__':\n    print(merge_heap([1, 2, 3, 4, 5, 6, 7]))"
    },
    {
      "rank": 84,
      "score": 8.0,
      "candidate": "from heapq import heappush, heappop\n\ndef merge_sorted_arrays(arr1, arr2):\n    arr1_len = len(arr1)\n    arr2_len = len(arr2)\n    merged_arr = []\n    while arr1_len or arr2_len:\n        if arr1_len:\n            heapq.heappush(merged_arr, arr1.pop(0))\n        if arr2_len:\n            heappush(merged_arr, arr2.pop(0))\n    return merged_arr\n\n\nif __name__ == '__main__':\n    print(merge_sorted_arrays([1, 2, 3, 4], [4, 5, 6, 7]))\n    print(merge_sorted_arrays([1, 2, 3, 4], [5, 6, 7]))\n    print(merge_sorted_arrays([1, 2, 3, 4], [6, 7, 8, 9]))\n    print(merge_sorted_arrays([1, 2, 3, 4], [5, 6, 7, 8]))\n    print(merge_sorted_arrays([1, 2, 3, 4], [6, 7, 8]))\n    print(merge_sorted_arrays([1, 2, 3, 4], [8, 9]))\n    print(merge_sorted_arrays([1, 2, 3, 4], [9, 10]))\n    print(merge_sorted_arrays([1, 2, 3, 4], [1, 2, 3]))\n    print(merge_sorted_arrays([1, 2, 3, 4], [5, 6, 7, 8]))\n    print(merge_sorted_arrays([1, 2, 3, 4], [6, 7, 8]))\n    print(merge_sorted_arrays([1, 2, 3, 4], [8, 9]))\n    print(merge_sorted_arrays([1, 2, 3, 4], [9, 10]))\n    print(merge_sorted_arrays([1, 2, 3, 4], [1, 2, 3, 4]))\n    print(merge_sorted_arrays([1, 2, 3, 4], [8, 9]))\n    print(merge_sorted_arrays([1, 2, 3, 4],"
    },
    {
      "rank": 85,
      "score": 8.0,
      "candidate": "class MinHeap:\n    def __init__(self, data):\n        self.heap = []\n        for i in data:\n            self.insert(i)\n\n    def insert(self, item):\n        if item < self.heap[0]:\n            self.heap.insert(0, item)\n        else:\n            self.heap.append(item)\n        return self.heap\n\n    def min_heapify(self, index):\n        while index > 0 and self.heap[index] < self.heap[index // 2]:\n            self.heap[index], self.heap[index // 2] = self.heap[index // 2], self.heap[index]\n            index //= 2\n\n    def get_min(self):\n        return self.heap[0]\n\n    def pop_min(self):\n        return self.heap.pop(0)\n\n    def peek_min(self):\n        return self.heap[0]\n\n    def get_max(self):\n        return self.heap[-1]\n\n    def pop_max(self):\n        return self.heap[-1]\n\n    def peek_max(self):\n        return self.heap[-1]\n\n    def is_empty(self):\n        return len(self.heap) == 0\n\n    def size(self):\n        return len(self.heap)\n\n\nif __name__ == '__main__':\n    data = [9, 8, 7, 6, 5, 4, 3, 2, 1, 0]\n    min_heap = MinHeap(data)\n    print(min_heap.get_min())\n    print(min_heap.get_min())\n    print(min_heap.get_max())\n    print(min_heap.get_max())\n    print(min_heap.peek_min())\n    print(min_heap.peek_max())\n    print(min_heap.peek_max())\n    print(min_heap.get_max())\n    print(min_heap.get_max())\n    print(min_heap.get_max())\n    print(min_heap.get_max())\n    print(min_heap.get"
    },
    {
      "rank": 86,
      "score": 8.0,
      "candidate": "class Solution(object):\n    def merge(self, nums1, nums2):\n        \"\"\"\n        :type nums1: List[int]\n        :type nums2: List[int]\n        :rtype: List[int]\n        \"\"\"\n        n1 = len(nums1)\n        n2 = len(nums2)\n        if n1 > n2:\n            nums1, nums2 = nums2, nums1\n        result = []\n        while n1 > 0 or n2 > 0:\n            if n1 == 0:\n                result.append(nums2.pop())\n            elif n2 == 0:\n                result.append(nums1.pop())\n            elif nums1[0] < nums2[0]:\n                result.append(nums1.pop())\n            else:\n                result.append(nums2.pop())\n        return result"
    },
    {
      "rank": 87,
      "score": 8.0,
      "candidate": "class heapq:\n    def __init__(self, items):\n        self.items = items\n        self.heap = []\n        self.heapify()\n\n    def heapify(self):\n        if len(self.items) > 1:\n            pivot = self.items[0]\n            i = 0\n            for j in range(len(self.items)):\n                if self.items[j] < pivot:\n                    self.heap[0] = self.items[i]\n                    self.heap[i] = self.items[j]\n                    i += 1\n\n    def heap_pop(self):\n        if len(self.items) > 0:\n            self.items[0] = self.heap[0]\n            self.heap.pop(0)\n\n    def heap_push(self, item):\n        if len(self.items) > 0:\n            self.heap.append(item)\n\n    def heap_pop_min(self):\n        if len(self.items) > 0:\n            return self.heap[0]\n\n    def heap_push_min(self, item):\n        if len(self.items) > 0:\n            self.heap.append(item)\n\n    def heap_size(self):\n        return len(self.items)\n\n    def heap_print(self):\n        print(self.heap)\n\n\nif __name__ == '__main__':\n    hq = heapq([4, 2, 5, 6, 1])\n    hq.heapify()\n    hq.heapify()\n    hq.heapify()\n    hq.heapify()\n    hq.heapify()\n    hq.heapify()\n    hq.heapify()\n    hq.heapify()\n    hq.heapify()\n    hq.heapify()\n    hq.heapify()\n    hq.heapify()\n    hq.heapify()\n    hq.heapify()\n    hq.heapify()\n    hq.heapify()\n    hq.heapify()\n    hq.heapify()\n    hq.heapify()\n    hq.heapify"
    },
    {
      "rank": 88,
      "score": 8.0,
      "candidate": "class Heap:\n    def __init__(self):\n        self.heap = []\n\n    def push(self, value):\n        self.heap.append(value)\n        self.heapify()\n\n    def heapify(self):\n        if len(self.heap) > 1:\n            m = len(self.heap) // 2\n            if self.heap[m] > self.heap[m + 1]:\n                self.heap[m], self.heap[m + 1] = self.heap[m + 1], self.heap[m]\n\n    def pop(self):\n        return self.heap[0]\n\n    def __iter__(self):\n        return self\n\n    def __next__(self):\n        return self.pop()\n\n\nif __name__ == \"__main__\":\n    heap = Heap()\n\n    for i in range(3):\n        heap.push(i)\n\n    for i in range(3):\n        print(heap.pop())"
    },
    {
      "rank": 89,
      "score": 8.0,
      "candidate": "from heapq import *\n\n\nclass IterativeHeap:\n    def __init__(self):\n        self.heap = []\n\n    def push(self, x):\n        heappush(self.heap, x)\n\n    def pop(self):\n        return heappop(self.heap)\n\n    def size(self):\n        return len(self.heap)\n\n\ndef merge_sort(iterative_heap, input_list):\n    if iterative_heap.size() > len(input_list):\n        return iterative_heap.pop()\n    else:\n        return iterative_heap.push(input_list[0])\n\n\nif __name__ == '__main__':\n    heap = IterativeHeap()\n    for i in range(10):\n        heap.push(i)\n    print(heap.pop())\n    print(heap.pop())\n    print(heap.pop())\n    print(heap.pop())\n    print(heap.pop())\n    print(heap.pop())\n    print(heap.pop())\n    print(heap.pop())\n    print(heap.pop())\n    print(heap.pop())\n    print(heap.pop())\n    print(heap.pop())\n    print(heap.pop())\n    print(heap.pop())\n    print(heap.pop())\n    print(heap.pop())\n    print(heap.pop())\n    print(heap.pop())\n    print(heap.pop())\n    print(heap.pop())\n    print(heap.pop())\n    print(heap.pop())\n    print(heap.pop())\n    print(heap.pop())\n    print(heap.pop())\n    print(heap.pop())\n    print(heap.pop())\n    print(heap.pop())\n    print(heap.pop())\n    print(heap.pop())\n    print(heap.pop())\n    print(heap.pop())\n    print(heap.pop())\n    print(heap.pop())\n    print(heap.pop())\n    print(heap.pop())\n    print(heap.pop())\n    print(heap.pop())\n    print(heap.pop())\n    print(heap.pop())"
    },
    {
      "rank": 90,
      "score": 8.0,
      "candidate": "def heap_sort(l):\n    n = len(l)\n    if n < 2:\n        return l\n    elif n == 2:\n        return [l[0], l[1]]\n\n    def helper(low, high):\n        if low >= high:\n            return\n\n        mid = (low + high) // 2\n        if l[mid] > l[high]:\n            l[low], l[high] = l[high], l[low]\n            helper(low, mid)\n            helper(mid + 1, high)\n\n    helper(0, n-1)\n    return l\n\n\nif __name__ == \"__main__\":\n    print(heap_sort([1, 3, 2, 4, 5]))"
    },
    {
      "rank": 91,
      "score": 8.0,
      "candidate": "def heap_sort(l):\n    n = len(l)\n\n    if n < 2:\n        return l\n    elif n == 2:\n        return l[0] + l[1]\n\n    l.sort()\n    heapq.heappush(l, heapq.heappop(l))\n\n    i = 0\n    j = n - 1\n\n    while i < j:\n        if l[i] < l[j]:\n            heapq.heappush(l, l[i] + l[j])\n            i += 1\n        else:\n            heapq.heappush(l, l[j] + l[i])\n            j -= 1\n\n    return l\n\n\nl = [1, 2, 3, 4, 5]\nprint(heap_sort(l))"
    },
    {
      "rank": 92,
      "score": 8.0,
      "candidate": "class Heap(object):\n    def __init__(self, data):\n        self.data = data\n        self.heap = [None] * len(data)\n        self.heapify(data)\n\n    def heapify(self, data):\n        for i in range(len(data)//2, -1, -1):\n            if self.heap[i] is not None:\n                continue\n            self.heap[i] = data[i]\n            self.heapify(data[:i])\n\n    def pop(self):\n        if self.heap[0] is None:\n            return None\n        else:\n            value = self.heap[0]\n            self.heap[0] = self.heap[len(self.heap)-1]\n            del self.heap[len(self.heap)-1]\n            return value\n\n    def push(self, value):\n        self.heap.append(value)\n        self.heapify(self.heap)\n\n    def peek(self):\n        if self.heap[0] is None:\n            return None\n        else:\n            return self.heap[0]\n\n    def __len__(self):\n        return len(self.heap)\n\n\nif __name__ == \"__main__\":\n    h = Heap([5, 4, 3, 2, 1])\n    print(h.pop())\n    print(h.pop())\n    print(h.pop())\n    print(h.pop())\n    print(h.pop())\n    print(h.pop())\n    print(h.pop())\n    print(h.pop())\n    print(h.pop())\n    print(h.pop())\n    print(h.pop())\n    print(h.pop())\n    print(h.pop())\n    print(h.pop())\n    print(h.pop())\n    print(h.pop())\n    print(h.pop())\n    print(h.pop())\n    print(h.pop())\n    print(h.pop())\n    print(h.pop())\n    print(h.pop())\n    print(h.pop())\n    print(h.pop())\n    print(h."
    },
    {
      "rank": 93,
      "score": 8.0,
      "candidate": "class Solution:\n    def merge(self, nums1, nums2):\n        \"\"\"\n        :type nums1: List[int]\n        :type nums2: List[int]\n        :rtype: void Do not return anything, modify nums1 in-place instead.\n        \"\"\"\n        n1, n2 = len(nums1), len(nums2)\n        heap = []\n        i, j = 0, 0\n        while i < n1 and j < n2:\n            if nums1[i] < nums2[j]:\n                heapq.heappush(heap, nums1[i])\n                i += 1\n            else:\n                heapq.heappush(heap, nums2[j])\n                j += 1\n        while i < n1:\n            heapq.heappush(heap, nums1[i])\n            i += 1\n        while j < n2:\n            heapq.heappush(heap, nums2[j])\n            j += 1\n        while heap:\n            yield heapq.heappop(heap)"
    },
    {
      "rank": 94,
      "score": 8.0,
      "candidate": "from heapq import heappush, heappop\n\n\nclass MergeSortedIterator:\n    def __init__(self, arr):\n        self.arr = arr\n        self.heap = []\n        self.heap_size = len(self.arr)\n\n    def __iter__(self):\n        return self\n\n    def __next__(self):\n        if self.heap_size == 0:\n            raise StopIteration()\n        while len(self.heap) > 0:\n            value = heappop(self.heap)\n            if value > self.arr[0]:\n                return value\n            else:\n                heappush(self.heap, value)\n\n        return None\n\n\nif __name__ == '__main__':\n    i = MergeSortedIterator([1, 2, 3, 4, 5])\n    for x in i:\n        print(x)"
    },
    {
      "rank": 95,
      "score": 1.0,
      "candidate": "import heapq\n\n\ndef merge_sorted(nums):\n    return heapq.merge(*nums)\n\n\nif __name__ == \"__main__\":\n    print(merge_sorted([1, 2, 3, 4]))"
    },
    {
      "rank": 96,
      "score": 1.0,
      "candidate": "from heapq import *\n\nclass MergeSortIterator:\n    def __init__(self, values):\n        self.heap = []\n        self.values = values\n        self.size = len(values)\n\n    def add(self, value):\n        heappush(self.heap, (-value, value))\n\n    def get_min(self):\n        if self.size == 0:\n            return None\n        return heappop(self.heap)[1]\n\n    def merge(self, other):\n        result = MergeSortIterator(self.values)\n        result.add(other.get_min())\n        while self.size > 0 and other.size > 0:\n            if self.get_min() < other.get_min():\n                result.add(self.get_min())\n                self.size -= 1\n            else:\n                result.add(other.get_min())\n                other.size -= 1\n        if self.size == 0:\n            result.add(other.get_min())\n        if other.size == 0:\n            result.add(self.get_min())\n        return result\n\n    def sort(self):\n        return self.merge(self.sort_recursive(self.values))\n\n    def sort_recursive(self, values):\n        if self.size == 0:\n            return values\n        if len(values) < 2:\n            return values\n        mid = self.size // 2\n        left = self.sort_recursive(values[:mid])\n        right = self.sort_recursive(values[mid:])\n        return merge_sorted_lists(left, right)\n\n\nif __name__ == \"__main__\":\n    test_case = [\n        (\n            [1, 2, 3, 4, 5, 6, 7, 8, 9, 10],\n            [1, 2, 3, 4, 5, 6, 7, 8, 9, 10],\n        ),\n        (\n            [1, 2, 3, 4, 5, 6, 7, 8, 9, 10],\n            [1, 2, 3, 4, 5, 6, 7, 8, 9, 10],\n        ),\n        (\n            [1, 2"
    },
    {
      "rank": 97,
      "score": 1.0,
      "candidate": "class Heap:\n    def __init__(self, arr):\n        self.arr = arr\n        self.size = len(arr)\n        self.heap = []\n        self.heapify()\n\n    def heapify(self):\n        for i in range(self.size//2):\n            if self.arr[i] < self.arr[self.size-1-i]:\n                temp = self.arr[i]\n                self.arr[i] = self.arr[self.size-1-i]\n                self.arr[self.size-1-i] = temp\n        return self.arr\n\n    def heapreplace(self, i, j):\n        temp = self.arr[i]\n        self.arr[i] = self.arr[j]\n        self.arr[j] = temp\n        return self.arr\n\n    def heapreplace_heapify(self, i, j):\n        temp = self.arr[i]\n        self.arr[i] = self.arr[j]\n        self.arr[j] = temp\n        self.heapify()\n        return self.arr\n\n    def heapreplace_heapify_heapify(self, i, j):\n        temp = self.arr[i]\n        self.arr[i] = self.arr[j]\n        self.arr[j] = temp\n        self.heapify()\n        return self.arr\n\n    def heap_insert(self, i):\n        if self.size < i:\n            self.arr.append(i)\n            self.heapify()\n            return i\n        temp = self.arr[0]\n        self.arr[0] = i\n        self.heapify()\n        return temp\n\n    def heap_pop(self):\n        if self.size == 0:\n            return None\n        temp = self.arr[0]\n        self.arr[0] = self.arr[self.size-1]\n        self.heapify()\n        return temp\n\n    def heap_print(self):\n        for i in self.arr:\n            print(i)\n\n\nif __name__ == \"__main__\":\n    arr = [2, 8,"
    },
    {
      "rank": 98,
      "score": 1.0,
      "candidate": "from heapq import *\n\n\ndef merge_sorted_iterator(iterator):\n    while True:\n        try:\n            yield heappop(iterator)\n        except IndexError:\n            break\n\n\nif __name__ == '__main__':\n    for i in merge_sorted_iterator([1, 2, 3, 4, 5]):\n        print(i)"
    },
    {
      "rank": 99,
      "score": 1.0,
      "candidate": "class Heap:\n    def __init__(self, items):\n        self.items = items\n        self.heap = []\n        self.buildHeap()\n\n    def buildHeap(self):\n        for i in self.items:\n            self.heapq.heappush(self.heap, i)\n\n    def peek(self):\n        return self.heap[0]\n\n    def pop(self):\n        return self.heapq.heappop(self.heap)\n\n    def peek_min(self):\n        return self.heap[0] if self.heap else None\n\n    def push(self, value):\n        self.heapq.heappush(self.heap, value)\n\n    def __len__(self):\n        return len(self.items)\n\n\nif __name__ == '__main__':\n    heap = Heap([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n    print(heap)\n    print(heap.peek())\n    print(heap.pop())\n    print(heap.peek())\n    print(heap.pop())\n    print(heap.pop())\n    print(heap)\n    print(heap.peek())\n    print(heap)\n    print(heap.pop())\n    print(heap)\n    print(heap)\n    print(heap)\n    print(heap)\n    print(heap)\n    print(heap)\n    print(heap)\n    print(heap)\n    print(heap)\n    print(heap)\n    print(heap)\n    print(heap)\n    print(heap)\n    print(heap)\n    print(heap)\n    print(heap)\n    print(heap)\n    print(heap)\n    print(heap)\n    print(heap)\n    print(heap)\n    print(heap)\n    print(heap)\n    print(heap)\n    print(heap)\n    print(heap)\n    print(heap)\n    print(heap)\n    print(heap)\n    print(heap)\n    print(heap)\n    print(heap)\n    print(heap)\n    print(heap)\n    print(heap)"
    },
    {
      "rank": 100,
      "score": 1.0,
      "candidate": "def merge_sorted_iter(l1, l2):\n    i = 0\n    j = 0\n    while i < len(l1) and j < len(l2):\n        if l1[i] < l2[j]:\n            yield l1[i]\n            i += 1\n        else:\n            yield l2[j]\n            j += 1\n\n\nif __name__ == '__main__':\n    print(list(merge_sorted_iter([1, 3, 4, 5], [2, 7, 8, 9])))"
    }
  ]
}