{
  "timestamp": "2025-09-14T14:27:16.676624",
  "method": "improved_llm_judge",
  "judge_model": "codellama/CodeLlama-7b-Python-hf",
  "target_model": "codet5-770m",
  "dataset": "mbpp",
  "problem_number": 271,
  "total_candidates": 100,
  "results": [
    {
      "rank": 1,
      "score": 10.0,
      "candidate": "def sub_list(list1, list2):\n    return list(map(lambda x, y: x-y, list1, list2))\n\nprint(sub_list([1, 2, 3, 4, 5], [10, 20, 30, 40, 50]))"
    },
    {
      "rank": 2,
      "score": 10.0,
      "candidate": "def substaract_list(a, b):\n    return [x for x in a if x not in b]\n\nprint(substaract_list([1,2,3], [4,5,6]))"
    },
    {
      "rank": 3,
      "score": 10.0,
      "candidate": "def substaract(list1, list2):\n    return list(map(lambda x: x - y, list1, list2))\n\n\nprint(substaract([1, 2, 3, 4], [5, 6, 7, 8]))"
    },
    {
      "rank": 4,
      "score": 10.0,
      "candidate": "def substaract_list(list1, list2):\n    return list(map(lambda x: x - list2[x], range(len(list1))))\n\n\nprint(substaract_list([1, 2, 3, 4], [4, 5, 6, 7]))"
    },
    {
      "rank": 5,
      "score": 10.0,
      "candidate": "def substaract_list(l1, l2):\n    return list(map(lambda x, y: x - y, l1, l2))\n\n\nprint(substaract_list([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]))\nprint(substaract_list([1, 2, 3, 4, 5], [7, 8, 9, 10, 11]))"
    },
    {
      "rank": 6,
      "score": 10.0,
      "candidate": "def substaract(list1, list2):\n    return list(map(lambda x: x - y, list1, list2))\n\n\nprint(substaract([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))"
    },
    {
      "rank": 7,
      "score": 10.0,
      "candidate": "def substaract(a,b):\n    return list(map(lambda x: x-y, a,b))"
    },
    {
      "rank": 8,
      "score": 10.0,
      "candidate": "def substaract(list1, list2):\n    return list(map(lambda x, y: x - y, list1, list2))\n\nif __name__ == \"__main__\":\n    l1 = [1,2,3,4,5]\n    l2 = [1,2,3,4,5]\n    print(substaract(l1, l2))"
    },
    {
      "rank": 9,
      "score": 10.0,
      "candidate": "def substaract_list(list1, list2):\n    return [item for item in list1 if item not in list2]\n\n\nif __name__ == '__main__':\n    print(substaract_list([1, 2, 3, 4, 5], [6, 7, 8, 9, 10]))"
    },
    {
      "rank": 10,
      "score": 10.0,
      "candidate": "def substaract(a, b):\n    return list(map(lambda x: x - y, a, b))"
    },
    {
      "rank": 11,
      "score": 10.0,
      "candidate": "def substaract(list1, list2):\n    return list(map(lambda x: x if x not in list2 else list2.pop(list2.index(x)), list1))\n\n\nif __name__ == '__main__':\n    assert substaract([1, 2, 3, 4], [2, 3, 4, 5]) == [1, 2, 5]\n    assert substaract([1, 2, 3, 4], [1, 2, 3, 4]) == [2, 3, 4]\n    assert substaract([1, 2, 3, 4], [2, 3, 4, 5]) == [1, 2, 4]\n    assert substaract([1, 2, 3, 4], [1, 2, 3, 4]) == [1, 2, 4]\n    assert substaract([1, 2, 3, 4], [2, 3, 4, 5]) == [1, 2, 4]\n    assert substaract([1, 2, 3, 4], [1, 2, 3, 4]) == [1, 2, 4]\n    assert substaract([1, 2, 3, 4], [1, 2, 3, 4]) == [1, 2, 4]\n    assert substaract([1, 2, 3, 4], [1, 2, 3, 4]) == [1, 2, 4]\n    assert substaract([1, 2, 3, 4], [1, 2, 3, 4]) == [1, 2, 4]\n    assert substaract([1, 2, 3, 4], [1, 2, 3, 4]) == [1, 2, 4]\n    assert substaract([1, 2, 3, 4], [1, 2, 3, 4]) == [1, 2, 4]\n    assert substaract([1, 2, 3, 4], [1, 2, 3, 4]) == [1, 2, 4]"
    },
    {
      "rank": 12,
      "score": 10.0,
      "candidate": "def substaract(l1, l2):\n    return list(map(lambda x: x-l1[0], l2))\n\n\nprint(substaract([1,2,3,4,5], [5,6,7,8,9]))\n\n\ndef substaract(l1, l2):\n    return list(map(lambda x: x-l1[0], l2))\n\n\nprint(substaract([1,2,3,4,5], [5,6,7,8,9]))"
    },
    {
      "rank": 13,
      "score": 10.0,
      "candidate": "def substaract(list1, list2):\n    return list(map(lambda x: x - y, list1, list2))\n\n\nif __name__ == '__main__':\n    print(substaract([1, 2, 3], [4, 5, 6]))"
    },
    {
      "rank": 14,
      "score": 10.0,
      "candidate": "def substaract_list(l1, l2):\n    return list(map(lambda x: x - 1, l1, l2))\n\n\ndef substaract_list_lambda(l1, l2):\n    return list(map(lambda x: x - 1, l1, l2))\n\n\nif __name__ == \"__main__\":\n    print(substaract_list([1, 2, 3, 4], [2, 3, 4, 5]))\n    print(substaract_list([1, 2, 3, 4], [5, 6, 7, 8]))\n    print(substaract_list([1, 2, 3, 4], [7, 8, 9, 10]))\n    print(substaract_list([1, 2, 3, 4], [5, 6, 7, 8]))\n    print(substaract_list_lambda([1, 2, 3, 4], [2, 3, 4, 5]))\n    print(substaract_list_lambda([1, 2, 3, 4], [5, 6, 7, 8]))\n    print(substaract_list_lambda([1, 2, 3, 4], [7, 8, 9, 10]))"
    },
    {
      "rank": 15,
      "score": 10.0,
      "candidate": "def substaract(list1, list2):\n    return [x for x in map(lambda x,y: x-y, list1, list2)]\n\nif __name__ == \"__main__\":\n    print(substaract([1,2,3,4],[5,6,7,8]))"
    },
    {
      "rank": 16,
      "score": 10.0,
      "candidate": "def substaract(list1, list2):\n    return list(map(lambda x: x - y, list1, list2))\n\nprint(substaract([1,2,3], [4,5,6]))"
    },
    {
      "rank": 17,
      "score": 9.0,
      "candidate": "def substaract_list(list1, list2):\n    return list(map(lambda x, y: x-y, list1, list2))\n\n\nif __name__ == \"__main__\":\n    print(substaract_list([1, 2, 3], [4, 5, 6]))"
    },
    {
      "rank": 18,
      "score": 9.0,
      "candidate": "def substaract_lists(a, b):\n    return [x for x in a if x not in b] + [x for x in b if x not in a]\n\nprint(substaract_lists([1, 2, 3, 4], [5, 6, 7, 8]))"
    },
    {
      "rank": 19,
      "score": 9.0,
      "candidate": "def substaract_list(list1, list2):\n    return list(map(lambda x: x-y, list1, list2))\n\n\ndef substaract_list2(list1, list2):\n    return list(map(lambda x: x-y, list1, list2))\n\n\nif __name__ == '__main__':\n    print(substaract_list([1, 2, 3, 4], [5, 6, 7, 8]))\n    print(substaract_list2([1, 2, 3, 4], [5, 6, 7, 8]))"
    },
    {
      "rank": 20,
      "score": 9.0,
      "candidate": "def substaract_list(l1, l2):\n    return [i for i in map(lambda x, y: x-y, l1, l2)]\n\n\nprint(substaract_list([1, 2, 3], [4, 5, 6]))"
    },
    {
      "rank": 21,
      "score": 9.0,
      "candidate": "def substaract(a,b):\n    return list(map(lambda x: x-y,a,b))\n\n\nif __name__ == '__main__':\n    a = [1,2,3,4,5]\n    b = [3,2,1,0,4]\n    print(substaract(a,b))"
    },
    {
      "rank": 22,
      "score": 9.0,
      "candidate": "def sub_list(list1, list2):\n    return list(map(lambda x, y: x - y, list1, list2))\n\n\nprint(sub_list([1, 2, 3], [4, 5, 6]))"
    },
    {
      "rank": 23,
      "score": 9.0,
      "candidate": "def sub_list(list1,list2):\n    return list(map(lambda x: x - list2[0],list1))\n\n\nif __name__ == \"__main__\":\n    print(sub_list([1,2,3,4,5],[5,5,5,5,5]))"
    },
    {
      "rank": 24,
      "score": 9.0,
      "candidate": "def substaract_list(list1, list2):\n    return list(map(lambda x, y: x-y, list1, list2))\n\n\nif __name__ == \"__main__\":\n    print(substaract_list([1, 2, 3], [2, 3, 4]))"
    },
    {
      "rank": 25,
      "score": 9.0,
      "candidate": "def substaract(a, b):\n    return [x for x in map(lambda x: x + b[x], range(len(a))) if x in a]\n\nif __name__ == '__main__':\n    a = [1, 2, 3, 4, 5]\n    b = [1, 2, 3, 4, 5]\n    print(substaract(a, b))"
    },
    {
      "rank": 26,
      "score": 9.0,
      "candidate": "def substaract_list(lst1, lst2):\n    return list(map(lambda x: x-x[-1], zip(lst1, lst2)))\n\nif __name__ == \"__main__\":\n    lst1 = [1,2,3,4]\n    lst2 = [5,6,7,8]\n    print(substaract_list(lst1, lst2))"
    },
    {
      "rank": 27,
      "score": 9.0,
      "candidate": "def substaract(list1, list2):\n    return list(map(lambda x: x - list2[0], list1))"
    },
    {
      "rank": 28,
      "score": 8.0,
      "candidate": "def substaract(list1, list2):\n    return list(map(lambda x: x - list2[x], range(len(list2))))\n\ndef test():\n    assert substaract([1,2,3], [4,5,6]) == [2,3]\n    assert substaract([1,2,3], [4,5,6]) == [2,3,4,5,6,7,8,9]\n    assert substaract([1,2,3], [4,5,6]) == [2,3,4,5,6,7,8,9]\n    assert substaract([1,2,3], [4,5,6]) == [2,3,4,5,6,7,8,9,10]\n    assert substaract([1,2,3], [4,5,6]) == [2,3,4,5,6,7,8,9,10,11]\n    assert substaract([1,2,3], [4,5,6]) == [2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19]\n    assert substaract([1,2,3], [4,5,6]) == [2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]\n    assert substaract([1,2,3], [4,5,6]) == [2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21]\n    assert substaract([1,2,3], [4,5,6]) == [2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22]\n    assert substaract([1,2,3], [4,5,6]) == [2,3,4,5,6,7,8,9,10,"
    },
    {
      "rank": 29,
      "score": 8.0,
      "candidate": "def substaract_lists(list1, list2):\n    return list(map(lambda x: x - y, list1, list2))"
    },
    {
      "rank": 30,
      "score": 8.0,
      "candidate": "def substaract(l1, l2):\n    return list(map(lambda x: x-1, l1, l2))\n\n\nprint(substaract([1,2,3], [4,5,6]))"
    },
    {
      "rank": 31,
      "score": 8.0,
      "candidate": "def substaract_lists(list1, list2):\n    return list(map(lambda x: x-x[0], list1, list2))\n\nprint(substaract_lists([1, 2, 3, 4], [5, 6, 7, 8]))"
    },
    {
      "rank": 32,
      "score": 8.0,
      "candidate": "def substaract_lists(list1, list2):\n    return [x for x in list1 if x not in list2]\n\nprint(substaract_lists([1,2,3], [4,5,6]))"
    },
    {
      "rank": 33,
      "score": 8.0,
      "candidate": "def substaract(a, b):\n    return [item for item in a if item not in b]\n\nprint(substaract([1,2,3], [4,5,6]))\nprint(substaract([1,2,3], [4,5,6], lambda x: x-1))\nprint(substaract([1,2,3], [4,5,6], lambda x: x+1))\nprint(substaract([1,2,3], [4,5,6], lambda x: x-1 if x>=1 else x+1))"
    },
    {
      "rank": 34,
      "score": 8.0,
      "candidate": "def sub_list(l1,l2):\n    return list(map(lambda x: x-l2[l1.index(x)],l1))"
    },
    {
      "rank": 35,
      "score": 8.0,
      "candidate": "def substaract_list(list1, list2):\n    return list(map(lambda x: x-list2[0], list1))"
    },
    {
      "rank": 36,
      "score": 8.0,
      "candidate": "def substaract(list_1, list_2):\n    return list(map(lambda x: x-y, list_1, list_2))\n\nif __name__ == '__main__':\n    print(substaract([1, 2, 3], [4, 5, 6]))\n    print(substaract([1, 2, 3], [4, 5, 6, 7]))"
    },
    {
      "rank": 37,
      "score": 8.0,
      "candidate": "def substaract(list1, list2):\n    return list(map(lambda x, y: x - y, list1, list2))\n\n\nif __name__ == '__main__':\n    list1 = [2, 3, 4, 5]\n    list2 = [1, 2, 3, 4]\n    print(substaract(list1, list2))"
    },
    {
      "rank": 38,
      "score": 8.0,
      "candidate": "def substaract_list(l1, l2):\n    return list(map(lambda x: x-y, l1, l2))\n\n\nprint(substaract_list([1, 2, 3], [4, 5, 6]))"
    },
    {
      "rank": 39,
      "score": 8.0,
      "candidate": "# My Solution\n\n\ndef substaract(list1, list2):\n    return list(map(lambda x: x + list2[list1.index(x)], list1))\n\n\n# Test\nprint(substaract([1, 2, 3, 4], [4, 5, 6, 7]))"
    },
    {
      "rank": 40,
      "score": 8.0,
      "candidate": "def substaract(a, b):\n    return [x for x in map(lambda x: x-y, a, b)]\n\n\n\nprint(substaract([1, 2, 3], [4, 5, 6]))"
    },
    {
      "rank": 41,
      "score": 8.0,
      "candidate": "def substaract(list1, list2):\n    return list(map(lambda x: x-y, list1, list2))\n\n\nif __name__ == '__main__':\n    print(substaract([1, 2, 3, 4], [2, 3, 4]))"
    },
    {
      "rank": 42,
      "score": 8.0,
      "candidate": "def substaract(list1, list2):\n    return list(map(lambda x: x - list2[0], list1))\n\nif __name__ == '__main__':\n    print(substaract([1, 2, 3], [4, 5, 6]))"
    },
    {
      "rank": 43,
      "score": 8.0,
      "candidate": "def substaract(a, b):\n    return list(map(lambda x: x-y, a, b))\n\nprint(substaract([1, 2, 3, 4], [2, 3, 4, 5]))"
    },
    {
      "rank": 44,
      "score": 8.0,
      "candidate": "def substaract(list_1, list_2):\n    return list(map(lambda x: x + list_2[x - 1], list_1))\n\n\nif __name__ == \"__main__\":\n    print(substaract([1, 2, 3], [4, 5, 6]))"
    },
    {
      "rank": 45,
      "score": 8.0,
      "candidate": "def substaract_list(list1, list2):\n    return list(map(lambda x: x - y, list1, list2))\n\n\ndef substaract_list2(list1, list2):\n    return list(map(lambda x: x - y, list1, list2))"
    },
    {
      "rank": 46,
      "score": 8.0,
      "candidate": "list1 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25]\nlist2 = [11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100]\n\n\ndef substaract(list1, list2):\n    return list(map(lambda x: x - list2[x], list1))"
    },
    {
      "rank": 47,
      "score": 8.0,
      "candidate": "def substaract(list1, list2):\n    return list(map(lambda x,y:x-y,list1,list2))\n\nprint(substaract([1,2,3],[2,3,4]))"
    },
    {
      "rank": 48,
      "score": 8.0,
      "candidate": "def substaract_list(l1, l2):\n    return list(map(lambda x: x - l2[x], l1))\n\n\ndef substaract_list_lambda(l1, l2):\n    return list(map(lambda x: x - l2[x], l1))"
    },
    {
      "rank": 49,
      "score": 8.0,
      "candidate": "def substaract_lists(list1, list2):\n    return list(map(lambda x: x-list1[0], list2))\n\n\ndef substaract_lists_lambda(list1, list2):\n    return list(map(lambda x: x-list1[0], list2))\n\n\ndef main():\n    print(substaract_lists([1,2,3], [4,5,6]))\n    print(substaract_lists([1,2,3], [4,5,6], lambda x: x-x))\n    print(substaract_lists_lambda([1,2,3], [4,5,6], lambda x: x-x))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 50,
      "score": 8.0,
      "candidate": "def substaract(list1, list2):\n    return list(map(lambda x: x - y, list1, list2))\n\n\nprint(substaract([1, 2, 3, 4, 5], [4, 2, 1, 3, 5]))"
    },
    {
      "rank": 51,
      "score": 8.0,
      "candidate": "def substaract_list(l1, l2):\n    return list(map(lambda x: x-1, l1, l2))\n\nprint(substaract_list([1,2,3], [4,5,6]))"
    },
    {
      "rank": 52,
      "score": 8.0,
      "candidate": "def substaract(list1, list2):\n    return list(map(lambda x: x-list1[x], list2))\n\nprint(substaract([1,2,3,4,5],[1,2,3,4,5]))\nprint(substaract([1,2,3,4,5],[2,3,4,5,6]))\nprint(substaract([1,2,3,4,5],[3,4,5,6,7]))"
    },
    {
      "rank": 53,
      "score": 8.0,
      "candidate": "def substaract_lists(a, b):\n    return list(map(lambda x: x-a[x], b))\n\nprint(substaract_lists([0, 1, 2, 3], [2, 3, 4, 5]))"
    },
    {
      "rank": 54,
      "score": 8.0,
      "candidate": "def substaract(list1, list2):\n    return list(map(lambda x: x-y, list1, list2))\n\nif __name__ == \"__main__\":\n    list1 = [1,2,3,4,5]\n    list2 = [2,3,4,5,6]\n    print(substaract(list1, list2))"
    },
    {
      "rank": 55,
      "score": 8.0,
      "candidate": "def substaract_list(list_1, list_2):\n    return list(map(lambda x: x - x[1], zip(list_1, list_2)))\n\nprint(substaract_list([2, 3], [2, 3]))"
    },
    {
      "rank": 56,
      "score": 8.0,
      "candidate": "def substaract(l1, l2):\n    return list(map(lambda x: x - y, l1, l2))"
    },
    {
      "rank": 57,
      "score": 8.0,
      "candidate": "def substaract_lists(list1, list2):\n    return list(map(lambda x: x - y, list1, list2))\n\n\nprint(substaract_lists([1, 2, 3, 4], [2, 3, 4, 5]))"
    },
    {
      "rank": 58,
      "score": 8.0,
      "candidate": "def substaract(a, b):\n    return list(map(lambda x: x - b[0], a))\n\nprint(substaract([1, 2, 3, 4], [1, 2, 3, 4]))\nprint(substaract([1, 2, 3, 4], [1, 2, 3, 4]))"
    },
    {
      "rank": 59,
      "score": 8.0,
      "candidate": "def substaract(list1, list2):\n    return list(map(lambda x: x - x[0], list1, list2))\n\n\nprint(substaract([1, 2, 3, 4], [1, 2, 3, 4]))"
    },
    {
      "rank": 60,
      "score": 8.0,
      "candidate": "def substaract(lst1, lst2):\n    return list(map(lambda x, y: x - y, lst1, lst2))"
    },
    {
      "rank": 61,
      "score": 8.0,
      "candidate": "def substaract(list1, list2):\n    return list(map(lambda x: x-y, list1, list2))\n\nprint(substaract([1,2,3], [4,5,6]))\nprint(substaract([1,2,3], [4,5,6,7]))"
    },
    {
      "rank": 62,
      "score": 8.0,
      "candidate": "def substaract_list(list_1, list_2):\n    return list(map(lambda x: x - list_2[x], range(len(list_1))))\n\n\nif __name__ == '__main__':\n    print(substaract_list([1, 2, 3], [4, 5, 6]))"
    },
    {
      "rank": 63,
      "score": 8.0,
      "candidate": "def substaract_list(list1, list2):\n    return list(map(lambda x: x if x in list2 else '', list1))"
    },
    {
      "rank": 64,
      "score": 8.0,
      "candidate": "def substaract_list(a, b):\n    return map(lambda x: x - b[x], a)\n\n\ndef substaract_list_lambda(a, b):\n    return list(filter(lambda x: x - b[x]!= 0, a))\n\n\nprint(substaract_list([1, 2, 3, 4], [4, 5, 6]))\nprint(substaract_list_lambda([1, 2, 3, 4], [4, 5, 6]))"
    },
    {
      "rank": 65,
      "score": 8.0,
      "candidate": "list1 = [1, 2, 3, 4, 5]\nlist2 = [1, 2, 3, 4, 5]\n\n\ndef substaract(list1, list2):\n    return list(map(lambda x: x-1, list1, list2))\n\n\nprint(substaract(list1, list2))"
    },
    {
      "rank": 66,
      "score": 8.0,
      "candidate": "def substaract(lst1, lst2):\n    return list(map(lambda x: x - lst2[x], range(len(lst1))))"
    },
    {
      "rank": 67,
      "score": 8.0,
      "candidate": "list1 = [1, 2, 3]\nlist2 = [4, 5, 6]\n\n# substaract\ndef substaract(list1, list2):\n    return list(map(lambda x, y: x - y, list1, list2))\n\nprint(substaract(list1, list2))"
    },
    {
      "rank": 68,
      "score": 8.0,
      "candidate": "def substaract(list1, list2):\n    return list(map(lambda x: x-y, list1, list2))\n\nprint(substaract([1,2,3], [4,5,6]))"
    },
    {
      "rank": 69,
      "score": 8.0,
      "candidate": "def substaract(a, b):\n    return list(map(lambda x: x-y, a, b))\n\n\ndef test():\n    assert substaract([1, 2, 3], [2, 3]) == [1, 3]\n    assert substaract([1, 2, 3], [3, 2, 1]) == [2, 3]\n    assert substaract([1, 2, 3], [4, 3, 2]) == [1, 3]\n    assert substaract([1, 2, 3], [5, 3, 2]) == [1, 3, 5]\n\n\nif __name__ == '__main__':\n    test()"
    },
    {
      "rank": 70,
      "score": 8.0,
      "candidate": "def substaract(a, b):\n    return list(map(lambda x: x-y, a, b))\n\n\nprint(substaract([1,2,3], [4,5,6]))"
    },
    {
      "rank": 71,
      "score": 8.0,
      "candidate": "def substaract(list_1, list_2):\n    return list(map(lambda x, y: x - y, list_1, list_2))\n\n\nprint(substaract([1, 2, 3, 4, 5], [1, 2, 3, 4, 5]))"
    },
    {
      "rank": 72,
      "score": 8.0,
      "candidate": "list1 = [1, 2, 3, 4, 5]\nlist2 = [5, 6, 7, 8, 9]\n\n\ndef sublist(list1, list2):\n    return list(map(lambda x: x-y, list1, list2))\n\n\nprint(sublist(list1, list2))"
    },
    {
      "rank": 73,
      "score": 8.0,
      "candidate": "def substaract(list1, list2):\n    return list(map(lambda x: x-y, list1, list2))\n\n\nprint(substaract([1,2,3], [4,5,6]))"
    },
    {
      "rank": 74,
      "score": 8.0,
      "candidate": "def substaract(list1, list2):\n    return list(map(lambda x: x - x[0], list1, list2))\n\n\ndef substaract2(list1, list2):\n    return list(map(lambda x: x - x[0], list1, list2))\n\n\nprint(substaract([1, 2, 3], [4, 5, 6]))\nprint(substaract([1, 2, 3], [4, 5, 6]))\nprint(substaract([1, 2, 3], [4, 5, 6], lambda x: x[0] - x[1]))\nprint(substaract([1, 2, 3], [4, 5, 6], lambda x: x[0] - x[1], lambda y: y[0] - y[1]))"
    },
    {
      "rank": 75,
      "score": 8.0,
      "candidate": "def substaract_lists(list1, list2):\n    return list(map(lambda x: x if x not in list2 else list1.pop(list2.index(x)), list1))"
    },
    {
      "rank": 76,
      "score": 8.0,
      "candidate": "def substaract_lists(l1, l2):\n    return list(map(lambda x: x - l2[0], l1))"
    },
    {
      "rank": 77,
      "score": 8.0,
      "candidate": "def substaract(a, b):\n    return list(map(lambda x: x if x in b else None, a))\n\n\nif __name__ == \"__main__\":\n    print(substaract([1, 2, 3, 4, 5], [1, 2, 3, 4, 5]))"
    },
    {
      "rank": 78,
      "score": 8.0,
      "candidate": "def substaract(a,b):\n    return [x for x in map(lambda x: x-y, a, b)]\n\nprint(substaract([1,2,3],[4,5,6]))"
    },
    {
      "rank": 79,
      "score": 8.0,
      "candidate": "def substaract(a, b):\n    return list(map(lambda x: x-y, a, b))"
    },
    {
      "rank": 80,
      "score": 8.0,
      "candidate": "def substaract(list1, list2):\n    return list(map(lambda x: x-y, list1, list2))\n\n\nprint(substaract([1, 2, 3], [4, 5, 6]))\nprint(substaract([1, 2, 3], [4, 5, 6, 7]))"
    },
    {
      "rank": 81,
      "score": 8.0,
      "candidate": "def substaract(lst1, lst2):\n    return list(map(lambda x: x if x in lst1 else x + lst2[0], lst1))"
    },
    {
      "rank": 82,
      "score": 8.0,
      "candidate": "def substaract(list1, list2):\n    return list(map(lambda x, y: x - y, list1, list2))"
    },
    {
      "rank": 83,
      "score": 8.0,
      "candidate": "def substaract_list(list1, list2):\n    return list(map(lambda x: x-1, list1, list2))\n\n\nprint(substaract_list([1, 2, 3], [4, 5, 6]))"
    },
    {
      "rank": 84,
      "score": 8.0,
      "candidate": "def substaract_lists(first_list, second_list):\n    return list(map(lambda x: x - x.count(1), first_list) + list(map(lambda x: x.count(1), second_list)))\n\n\nif __name__ == \"__main__\":\n    print(substaract_lists([1, 2, 3], [3, 4, 5]))"
    },
    {
      "rank": 85,
      "score": 8.0,
      "candidate": "def sub_list(l1, l2):\n    return list(map(lambda x: x-y, l1, l2))"
    },
    {
      "rank": 86,
      "score": 8.0,
      "candidate": "def substaract(a, b):\n    return list(map(lambda x: x-y, a, b))\n\n\n\nif __name__ == '__main__':\n    a = [1,2,3,4]\n    b = [2,4,6,8]\n\n    print(substaract(a, b))"
    },
    {
      "rank": 87,
      "score": 8.0,
      "candidate": "def substaract_list(list_1, list_2):\n    return list(map(lambda x: x - x[0], zip(list_1, list_2)))\n\n\nif __name__ == \"__main__\":\n    print(substaract_list([1, 2, 3], [4, 5, 6]))"
    },
    {
      "rank": 88,
      "score": 8.0,
      "candidate": "def substaract_list(first, second):\n    return list(map(lambda x: x-y, first, second))\n\nprint(substaract_list([1, 2, 3], [4, 5, 6]))\n\nprint(substaract_list([1, 2, 3], [5, 6, 7]))"
    },
    {
      "rank": 89,
      "score": 8.0,
      "candidate": "def substaract(list1, list2):\n    return list(map(lambda x: x-list1[x], list2))\n\nprint(substaract([1, 2, 3], [4, 5, 6]))"
    },
    {
      "rank": 90,
      "score": 8.0,
      "candidate": "def substaract(l1, l2):\n    return list(map(lambda x: x - l2[0], l1))"
    },
    {
      "rank": 91,
      "score": 8.0,
      "candidate": "def substaract(list1, list2):\n    return list(map(lambda x, y: x - y, list1, list2))\n\n\nif __name__ == \"__main__\":\n    print(substaract([1, 2, 3], [4, 5, 6]))"
    },
    {
      "rank": 92,
      "score": 8.0,
      "candidate": "def substaract(list1, list2):\n    return list(map(lambda x: x if x not in list2 else list2.remove(x), list1))\n\n\nprint(substaract([1, 2, 3], [3, 2, 1]))"
    },
    {
      "rank": 93,
      "score": 7.0,
      "candidate": "def substaract(list1, list2):\n    return list(map(lambda x: x - list2[x], range(len(list1))))\n\n\nif __name__ == \"__main__\":\n    print(substaract([1, 2, 3], [4, 5, 6]))"
    },
    {
      "rank": 94,
      "score": 1.0,
      "candidate": "def substaract_lists(list1, list2):\n    return list(map(lambda x, y: x-y, list1, list2))\n\n\nif __name__ == \"__main__\":\n    print(substaract_lists([1, 2, 3], [4, 5, 6]))"
    },
    {
      "rank": 95,
      "score": 1.0,
      "candidate": "def substaract_lists(list_1, list_2):\n    return [item for item in list_1 if item not in list_2]\n\n\nprint(substaract_lists([1, 2, 3, 4], [5, 6, 7, 8]))\n\n\ndef substaract_list(list_1, list_2):\n    return [item for item in list_1 if item not in list_2]\n\n\nprint(substaract_list([1, 2, 3, 4], [5, 6, 7, 8]))\n\n\ndef substaract_list_lambda(list_1, list_2):\n    return [item for item in list_1 if item not in list_2]\n\n\nprint(substaract_list_lambda([1, 2, 3, 4], [5, 6, 7, 8]))\n\n\ndef substaract_list_map(list_1, list_2):\n    return [item for item in list_1 if item not in list_2]\n\n\nprint(substaract_list_map([1, 2, 3, 4], [5, 6, 7, 8]))"
    },
    {
      "rank": 96,
      "score": 1.0,
      "candidate": "def sub_list(list1, list2):\n    return list(map(lambda x: x-list1[0], list1)) + list(map(lambda x: x-list2[0], list2))\n\n\ndef test_sub_list():\n    assert sub_list([1, 2, 3], [4, 5, 6]) == [2, 4, 6]\n    assert sub_list([1, 2, 3], [4, 5, 6]) == [1, 2, 3, 4, 5, 6]\n\n    assert sub_list([1, 2, 3], [4, 5, 6]) == [1, 2, 3, 4, 5, 6]\n    assert sub_list([1, 2, 3], [4, 5, 6]) == [1, 2, 3, 4, 5, 6]\n\n    assert sub_list([1, 2, 3], [4, 5, 6]) == [1, 2, 3, 4, 5, 6]\n    assert sub_list([1, 2, 3], [4, 5, 6]) == [1, 2, 3, 4, 5, 6]\n\n    assert sub_list([1, 2, 3], [4, 5, 6]) == [1, 2, 3, 4, 5, 6]\n    assert sub_list([1, 2, 3], [4, 5, 6]) == [1, 2, 3, 4, 5, 6]\n\n    assert sub_list([1, 2, 3], [4, 5, 6]) == [1, 2, 3, 4, 5, 6]\n    assert sub_list([1, 2, 3], [4, 5, 6]) == [1, 2, 3, 4, 5, 6]\n\n    assert sub_list([1, 2, 3], [4, 5, 6]) == [1, 2, 3, 4, 5, 6]\n    assert sub_list([1, 2, 3], [4, 5, 6]) == [1, 2, 3, 4, 5, 6]\n\n    assert sub_list([1, 2, 3], [4, 5, 6]) == [1, 2, 3, 4, 5, 6]\n    assert sub_list([1"
    },
    {
      "rank": 97,
      "score": 1.0,
      "candidate": "def substaract(a, b):\n    return list(map(lambda x: x-b, a))\n\n\ndef substaract2(a, b):\n    return list(map(lambda x: x-b, a))\n\n\nif __name__ == '__main__':\n    a = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    b = [2, 4, 6, 8, 10, 12, 14, 16]\n    print(substaract(a, b))\n    print(substaract2(a, b))"
    },
    {
      "rank": 98,
      "score": 1.0,
      "candidate": "def substaract(l1, l2):\n    return list(map(lambda x: x-l1[x], l2))\n\ndef substaract_lambda(l1, l2):\n    return list(map(lambda x: x-l1[x], l2))\n\n\nif __name__ == \"__main__\":\n    print(substaract([1,2,3,4], [1,2,3,4]))\n    print(substaract([1,2,3,4], [1,2,3,4]))\n    print(substaract([1,2,3,4], [1,2,3,4]))\n    print(substaract([1,2,3,4], [1,2,3,4]))\n    print(substaract([1,2,3,4], [1,2,3,4]))\n    print(substaract([1,2,3,4], [1,2,3,4]))\n    print(substaract([1,2,3,4], [1,2,3,4]))\n    print(substaract([1,2,3,4], [1,2,3,4]))\n    print(substaract([1,2,3,4], [1,2,3,4]))\n    print(substaract([1,2,3,4], [1,2,3,4]))\n    print(substaract([1,2,3,4], [1,2,3,4]))"
    },
    {
      "rank": 99,
      "score": 1.0,
      "candidate": "# Example:\n# substaract_list([1, 2, 3, 4], [5, 6, 7, 8])\n# returns [1, 2, 3, 4, 5, 6, 7, 8]\n\ndef substaract_list(list1, list2):\n    return list(map(lambda x, y: x-y, list1, list2))"
    },
    {
      "rank": 100,
      "score": 1.0,
      "candidate": "def substaract(a, b):\n    return list(map(lambda x: x-y, a, b))\n\ndef substaract2(a, b):\n    return list(map(lambda x: x-y, a, b))\n\nif __name__ == '__main__':\n    print(substaract([1, 2, 3, 4, 5], [1, 2, 3, 4, 5]))\n    print(substaract([1, 2, 3, 4, 5], [2, 3, 4, 5]))\n\n    print(substaract2([1, 2, 3, 4, 5], [1, 2, 3, 4, 5]))\n    print(substaract2([1, 2, 3, 4, 5], [2, 3, 4, 5]))"
    }
  ]
}