{
  "timestamp": "2025-09-14T13:39:49.492456",
  "method": "improved_llm_judge",
  "judge_model": "codellama/CodeLlama-7b-Python-hf",
  "target_model": "codet5-770m",
  "dataset": "mbpp",
  "problem_number": 163,
  "total_candidates": 100,
  "results": [
    {
      "rank": 1,
      "score": 10.0,
      "candidate": "def group_by_key(items):\n    groups = {}\n    for key, value in items:\n        if key in groups:\n            groups[key].append(value)\n        else:\n            groups[key] = [value]\n    return groups\n\nprint(group_by_key([(\"a\", \"1\"), (\"b\", \"2\"), (\"c\", \"3\")]))"
    },
    {
      "rank": 2,
      "score": 10.0,
      "candidate": "def group_by_key(items):\n    result = {}\n    for key, value in items:\n        if key not in result:\n            result[key] = [value]\n        else:\n            result[key].append(value)\n    return result\n\n\nif __name__ == \"__main__\":\n    items = [\n        (\"a\", \"1\"),\n        (\"b\", \"2\"),\n        (\"c\", \"3\"),\n        (\"d\", \"4\"),\n        (\"e\", \"5\"),\n        (\"f\", \"6\"),\n        (\"g\", \"7\"),\n        (\"h\", \"8\"),\n    ]\n\n    print(group_by_key(items))"
    },
    {
      "rank": 3,
      "score": 10.0,
      "candidate": "def group_by_key(keys):\n    keys = list(keys)\n    result = {}\n    for key in keys:\n        if key not in result:\n            result[key] = []\n        result[key].append(key)\n    return result\n\nprint(group_by_key({'key1': 'value1', 'key2': 'value2'}))"
    },
    {
      "rank": 4,
      "score": 10.0,
      "candidate": "def group_by_key(lst):\n    dic = {}\n    for i in lst:\n        key = i[0]\n        if key not in dic:\n            dic[key] = [i[1]]\n        else:\n            dic[key].append(i[1])\n    return dic\n\nprint(group_by_key([('a', 'b'), ('b', 'c'), ('c', 'd'), ('d', 'e')]))"
    },
    {
      "rank": 5,
      "score": 10.0,
      "candidate": "def group(d):\n    if d == {}:\n        return {}\n    else:\n        return {k: [v] for k, v in d.items()}\n\n\nif __name__ == '__main__':\n    d = {'key1': [1, 2, 3], 'key2': [4, 5, 6], 'key3': [7, 8, 9]}\n    print(group(d))"
    },
    {
      "rank": 6,
      "score": 9.0,
      "candidate": "def group_by_key(d):\n    result = {}\n    for key, value in d.items():\n        if key not in result:\n            result[key] = [value]\n        else:\n            result[key].append(value)\n    return result\n\n\nif __name__ == '__main__':\n    print(group_by_key({'a': 1, 'b': 2, 'c': 3}))"
    },
    {
      "rank": 7,
      "score": 9.0,
      "candidate": "def group_dict(items):\n    groups = {}\n    for key, value in items:\n        groups[key].append(value)\n    return groups\n\nprint(group_dict([('a', 1), ('b', 2), ('c', 3)]))"
    },
    {
      "rank": 8,
      "score": 9.0,
      "candidate": "def group_by(data):\n    res = {}\n    for key, value in data:\n        if key not in res:\n            res[key] = [value]\n        else:\n            res[key].append(value)\n    return res\n\n\nif __name__ == '__main__':\n    print(group_by([('a', '1'), ('a', '2'), ('b', '3'), ('b', '4'), ('c', '5'), ('c', '6'), ('c', '7')]))"
    },
    {
      "rank": 9,
      "score": 9.0,
      "candidate": "def group_by(d):\n    grouped = {}\n    for k, v in d.items():\n        if k in grouped:\n            grouped[k].append(v)\n        else:\n            grouped[k] = [v]\n    return grouped"
    },
    {
      "rank": 10,
      "score": 9.0,
      "candidate": "def group(dict_list):\n    groups = {}\n    for item in dict_list:\n        groups.setdefault(item[0], []).append(item[1])\n    return groups\n\ndict_list = [\n    (\"a\", \"1\"),\n    (\"b\", \"2\"),\n    (\"c\", \"3\"),\n    (\"d\", \"4\"),\n    (\"e\", \"5\"),\n    (\"f\", \"6\"),\n    (\"g\", \"7\"),\n    (\"h\", \"8\")\n]\nprint(group(dict_list))"
    },
    {
      "rank": 11,
      "score": 9.0,
      "candidate": "def group_keys(pairs):\n    dict = {}\n    for key, value in pairs:\n        if key not in dict:\n            dict[key] = [value]\n        else:\n            dict[key].append(value)\n    return dict"
    },
    {
      "rank": 12,
      "score": 8.0,
      "candidate": "def group_items(items):\n    # your code here\n    return {k: [v] for k, v in items}\n\nprint(group_items([('a', 1), ('b', 2), ('c', 3)]))"
    },
    {
      "rank": 13,
      "score": 8.0,
      "candidate": "def group_items(items):\n    grouped_items = {}\n\n    for item in items:\n        if item[0] not in grouped_items.keys():\n            grouped_items[item[0]] = [item[1]]\n        else:\n            grouped_items[item[0]].append(item[1])\n\n    return grouped_items\n\n\nif __name__ == \"__main__\":\n    assert group_items([(\"A\", \"B\"), (\"B\", \"C\"), (\"B\", \"D\"), (\"C\", \"E\"), (\"A\", \"F\")]) == {\n        \"A\": [\"B\", \"C\"],\n        \"B\": [\"B\", \"D\"],\n        \"C\": [\"E\"],\n        \"D\": [\"F\"],\n    }"
    },
    {
      "rank": 14,
      "score": 8.0,
      "candidate": "def group_pairs(pairs):\n    d = {}\n    for key, val in pairs:\n        if key not in d:\n            d[key] = [val]\n        else:\n            d[key].append(val)\n    return d\n\n\nif __name__ == \"__main__\":\n    pairs = [(\"key1\", \"value1\"), (\"key2\", \"value2\"), (\"key3\", \"value3\")]\n    print(group_pairs(pairs))"
    },
    {
      "rank": 15,
      "score": 8.0,
      "candidate": "def group(data):\n    group_dict = {}\n    for key, value in data:\n        if key not in group_dict:\n            group_dict[key] = [value]\n        else:\n            group_dict[key].append(value)\n    return group_dict\n\ndata = [(\"Apple\", \"Banana\"), (\"Orange\", \"Apple\"), (\"Apple\", \"Orange\"), (\"Apple\", \"Banana\")]\nprint(group(data))"
    },
    {
      "rank": 16,
      "score": 8.0,
      "candidate": "from collections import defaultdict\n\ndef group_by(items, key_func=lambda x: x):\n    return defaultdict(list, {key_func(i): items[i] for i in range(len(items))})\n\nif __name__ == '__main__':\n    print(group_by([('a', 'a'), ('b', 'b'), ('c', 'c')]))"
    },
    {
      "rank": 17,
      "score": 8.0,
      "candidate": "import collections\n\ndef group(items):\n    d = collections.defaultdict(list)\n    for item in items:\n        d[item[0]].append(item[1])\n    return d\n\nprint(group([('apple', 'banana'), ('apple', 'orange'), ('apple', 'cherry')]))"
    },
    {
      "rank": 18,
      "score": 8.0,
      "candidate": "def group(sequence):\n    # your code here\n    dict = {}\n    for key, value in sequence:\n        if key not in dict:\n            dict[key] = [value]\n        else:\n            dict[key].append(value)\n    return dict\n\nif __name__ == \"__main__\":\n    print(group([(\"a\", \"b\"), (\"b\", \"c\"), (\"c\", \"d\"), (\"d\", \"e\")]))"
    },
    {
      "rank": 19,
      "score": 8.0,
      "candidate": "def group_by(seq):\n    result = {}\n    for k, v in seq:\n        if k not in result:\n            result[k] = [v]\n        else:\n            result[k].append(v)\n    return result\n\n\ndef test_group_by():\n    assert group_by([(\"a\", \"a\"), (\"b\", \"b\"), (\"c\", \"c\"), (\"d\", \"d\")]) == {\n        \"a\": [\"a\"],\n        \"b\": [\"b\"],\n        \"c\": [\"c\"],\n        \"d\": [\"d\"],\n    }\n\n\nif __name__ == \"__main__\":\n    test_group_by()"
    },
    {
      "rank": 20,
      "score": 8.0,
      "candidate": "def group_by_key(items):\n    # Fill this in.\n    return {k: [v] for k, v in items}\n\n\nif __name__ == \"__main__\":\n    items = [\n        (\"a\", \"b\"),\n        (\"c\", \"d\"),\n        (\"e\", \"f\"),\n        (\"g\", \"h\"),\n        (\"i\", \"j\"),\n        (\"k\", \"l\"),\n        (\"m\", \"n\"),\n        (\"o\", \"p\"),\n        (\"q\", \"r\"),\n        (\"s\", \"t\"),\n        (\"u\", \"v\"),\n        (\"v\", \"w\"),\n        (\"x\", \"y\"),\n        (\"z\", \"z\"),\n    ]\n    print(group_by_key(items))"
    },
    {
      "rank": 21,
      "score": 8.0,
      "candidate": "def group(items):\n    return {k:[v] for k,v in items}\n\nprint(group([('a', 'b'), ('b', 'c'), ('a', 'd')]))"
    },
    {
      "rank": 22,
      "score": 8.0,
      "candidate": "def group_by_key(sequence):\n    result = {}\n    for key, value in sequence:\n        if key not in result:\n            result[key] = [value]\n        else:\n            result[key].append(value)\n    return result\n\nprint(group_by_key([(\"key1\", \"value1\"), (\"key2\", \"value2\"), (\"key3\", \"value3\")]))\nprint(group_by_key([(\"key1\", \"value1\"), (\"key2\", \"value2\"), (\"key3\", \"value3\"), (\"key4\", \"value4\")]))\nprint(group_by_key([(\"key1\", \"value1\"), (\"key2\", \"value2\"), (\"key3\", \"value3\"), (\"key4\", \"value4\"), (\"key5\", \"value5\")]))\nprint(group_by_key([(\"key1\", \"value1\"), (\"key2\", \"value2\"), (\"key3\", \"value3\"), (\"key4\", \"value4\"), (\"key5\", \"value5\")]))\n\nprint(group_by_key([(\"key1\", \"value1\"), (\"key2\", \"value2\"), (\"key3\", \"value3\"), (\"key4\", \"value4\"), (\"key5\", \"value5\"), (\"key6\", \"value6\")]))\nprint(group_by_key([(\"key1\", \"value1\"), (\"key2\", \"value2\"), (\"key3\", \"value3\"), (\"key4\", \"value4\"), (\"key5\", \"value5\"), (\"key6\", \"value6\"), (\"key7\", \"value7\")]))\nprint(group_by_key([(\"key1\", \"value1\"), (\"key2\", \"value2\"), (\"key3\", \"value3\"), (\"key4\", \"value4\"), (\"key5\", \"value5\"), (\"key6\", \"value6\"), (\"key7\", \"value7\")]))\nprint(group_by_key([(\"key1\", \"value1\"), (\"key2\", \"value2\"), (\"key3\", \"value3\"), (\"key4\", \"value4\"), (\"key5\", \"value5"
    },
    {
      "rank": 23,
      "score": 8.0,
      "candidate": "def group_items(items):\n    grouped_items = {}\n    for k, v in items:\n        if grouped_items.get(k) is None:\n            grouped_items[k] = [v]\n        else:\n            grouped_items[k].append(v)\n    return grouped_items\n\n\nif __name__ == \"__main__\":\n    print(group_items([(\"a\", 1), (\"b\", 2), (\"c\", 3), (\"d\", 4)]))"
    },
    {
      "rank": 24,
      "score": 8.0,
      "candidate": "def group_by_key(items):\n    key_value_dict = {}\n    for item in items:\n        key = item[0]\n        value = item[1]\n        if key in key_value_dict:\n            key_value_dict[key].append(value)\n        else:\n            key_value_dict[key] = [value]\n    return key_value_dict\n\nprint(group_by_key([(\"A\", \"A\"), (\"B\", \"B\"), (\"C\", \"C\")]))"
    },
    {
      "rank": 25,
      "score": 8.0,
      "candidate": "def group_by_key(data):\n    \"\"\"\n    :type data: List[List[str]]\n    :rtype: Dict[str, List[str]]\n    \"\"\"\n    d = {}\n    for i in data:\n        d[i[0]].append(i[1])\n    return d"
    },
    {
      "rank": 26,
      "score": 8.0,
      "candidate": "def group_by_key(items):\n    key_value_dict = {}\n    for k, v in items:\n        key_value_dict.setdefault(k, []).append(v)\n    return key_value_dict\n\n\nprint(group_by_key([('a', 'b'), ('b', 'c'), ('c', 'd')]))"
    },
    {
      "rank": 27,
      "score": 8.0,
      "candidate": "def group_by_key(lst):\n    key_to_value = {}\n    for key, value in lst:\n        if key not in key_to_value:\n            key_to_value[key] = [value]\n        else:\n            key_to_value[key].append(value)\n    return key_to_value\n\n\n\nprint(group_by_key([(\"a\", \"b\"), (\"b\", \"c\"), (\"b\", \"c\"), (\"c\", \"d\"), (\"d\", \"e\"), (\"e\", \"f\")]))"
    },
    {
      "rank": 28,
      "score": 8.0,
      "candidate": "def group_pairs(pairs):\n    d = {}\n    for k,v in pairs:\n        if k in d:\n            d[k].append(v)\n        else:\n            d[k] = [v]\n    return d\n\nprint(group_pairs([(\"a\", \"b\"), (\"b\", \"c\"), (\"c\", \"d\")]))"
    },
    {
      "rank": 29,
      "score": 8.0,
      "candidate": "def group_by(seq):\n    dic = {}\n    for key, value in seq:\n        if key not in dic:\n            dic[key] = [value]\n        else:\n            dic[key].append(value)\n    return dic\n\n\nif __name__ == \"__main__\":\n    print(group_by([(\"apples\", \"bananas\"), (\"oranges\", \"cherries\"), (\"apples\", \"oranges\")]))"
    },
    {
      "rank": 30,
      "score": 8.0,
      "candidate": "def group_key_value(pairs):\n    d = {}\n    for k, v in pairs:\n        if k not in d:\n            d[k] = [v]\n        else:\n            d[k].append(v)\n    return d\n\nprint(group_key_value([('a', 'b'), ('b', 'c'), ('b', 'd'), ('c', 'e'), ('d', 'f'), ('e', 'g'), ('f', 'h'), ('h', 'i'), ('i', 'j'), ('j', 'k')]))\nprint(group_key_value([('a', 'b'), ('b', 'c'), ('b', 'd'), ('c', 'e'), ('d', 'f'), ('e', 'g'), ('f', 'h'), ('h', 'i'), ('i', 'j'), ('j', 'k')]))"
    },
    {
      "rank": 31,
      "score": 8.0,
      "candidate": "def group_by_key(seq):\n    d = {}\n    for i in seq:\n        if i[0] not in d:\n            d[i[0]] = [i[1]]\n        else:\n            d[i[0]].append(i[1])\n    return d\n\n\nif __name__ == '__main__':\n    print(group_by_key([('name', 'Tom'), ('age', 28), ('gender','male'), ('hair_color', 'blue'), ('hair_color','red'),\n                       ('hair_color', 'yellow'), ('hair_color', 'green'), ('hair_color', 'brown'), ('hair_color', 'orange'), ('hair_color', 'grey'),\n                       ('hair_color', 'blue'), ('hair_color', 'white'), ('hair_color', 'black'), ('hair_color', 'grey'), ('hair_color', 'white'),\n                       ('hair_color', 'black')]))"
    },
    {
      "rank": 32,
      "score": 8.0,
      "candidate": "def group_keys(data):\n    groups = {}\n    for k, v in data:\n        groups.setdefault(k, []).append(v)\n    return groups\n\n\nif __name__ == '__main__':\n    data = [\n        ('apple', 'banana'),\n        ('orange', 'apple'),\n        ('pear', 'orange'),\n        ('strawberry', 'pear'),\n        ('pear','strawberry'),\n        ('pear','strawberry')\n    ]\n    print(group_keys(data))"
    },
    {
      "rank": 33,
      "score": 8.0,
      "candidate": "from collections import defaultdict\n\n\ndef group_by(data):\n    return defaultdict(list)\n\n\ndata = [\n    (\"a\", 1),\n    (\"b\", 2),\n    (\"c\", 3),\n    (\"a\", 4),\n    (\"b\", 5),\n    (\"c\", 6),\n]\n\ng = group_by(data)\nprint(g)"
    },
    {
      "rank": 34,
      "score": 8.0,
      "candidate": "def group(seq):\n    d = {}\n    for x in seq:\n        if x[0] not in d:\n            d[x[0]] = [x[1]]\n        else:\n            d[x[0]].append(x[1])\n    return d\n\nprint(group([('a', 1), ('b', 2), ('c', 3), ('d', 4), ('e', 5), ('f', 6)]))"
    },
    {
      "rank": 35,
      "score": 8.0,
      "candidate": "def group_by_key(key_value_pairs):\n    key_value_dict = {}\n    for key, value in key_value_pairs:\n        if key in key_value_dict:\n            key_value_dict[key].append(value)\n        else:\n            key_value_dict[key] = [value]\n    return key_value_dict\n\n\nif __name__ == \"__main__\":\n    test_cases = [\n        ([\"a\", \"b\", \"c\"], {\"a\": [\"b\", \"c\"], \"b\": [\"c\"]}),\n        ([\"a\", \"b\", \"c\"], {\"a\": [\"b\", \"c\"], \"b\": [\"c\"], \"c\": [\"b\"]}),\n        ([\"a\", \"b\", \"c\"], {\"a\": [\"b\", \"c\"], \"b\": [\"c\"], \"c\": [\"b\"]}),\n        ([\"a\", \"b\", \"c\"], {\"a\": [\"b\", \"c\"], \"b\": [\"c\"], \"c\": [\"b\"]}),\n    ]\n    for test_case in test_cases:\n        print(f\"Input: {test_case}\")\n        print(f\"Output: {group_by_key(test_case)}\")"
    },
    {
      "rank": 36,
      "score": 8.0,
      "candidate": "def group_by(items):\n    \"\"\"\n    :type items: List[Tuple[str, str]]\n    :rtype: Dict[str, List[str]]\n    \"\"\"\n    result = {}\n    for key, value in items:\n        if key not in result:\n            result[key] = [value]\n        else:\n            result[key].append(value)\n    return result\n\n\nif __name__ == '__main__':\n    assert group_by([('apple', 'orange'), ('banana', 'cherry')]) == {\n        'apple': ['orange'], 'banana': ['cherry']\n    }"
    },
    {
      "rank": 37,
      "score": 8.0,
      "candidate": "from typing import List\n\n\ndef group_by(keys: List[str], values: List[str]) -> dict:\n    result = {}\n\n    for key, value in zip(keys, values):\n        result.setdefault(key, []).append(value)\n\n    return result"
    },
    {
      "rank": 38,
      "score": 8.0,
      "candidate": "def group_key_value(keys_value_pairs):\n    key_value_dict = {}\n\n    for key, value in keys_value_pairs:\n        if key not in key_value_dict:\n            key_value_dict[key] = [value]\n        else:\n            key_value_dict[key].append(value)\n\n    return key_value_dict\n\n\nif __name__ == '__main__':\n    print(group_key_value([(\"a\", \"b\"), (\"c\", \"d\"), (\"e\", \"f\"), (\"g\", \"h\")]))"
    },
    {
      "rank": 39,
      "score": 8.0,
      "candidate": "def group_by_key(lst):\n    res = {}\n    for key, value in lst:\n        if key not in res:\n            res[key] = []\n        res[key].append(value)\n    return res\n\nprint(group_by_key([('a', 'b'), ('b', 'c'), ('c', 'd')]))"
    },
    {
      "rank": 40,
      "score": 8.0,
      "candidate": "def group_by_key(items):\n    if not items:\n        return []\n    result = dict()\n    for key, value in items:\n        if key not in result:\n            result[key] = [value]\n        else:\n            result[key].append(value)\n    return result"
    },
    {
      "rank": 41,
      "score": 8.0,
      "candidate": "def group_key_value(key_value_pairs):\n    key_value_dict = {}\n    for key, value in key_value_pairs:\n        if key not in key_value_dict:\n            key_value_dict[key] = [value]\n        else:\n            key_value_dict[key].append(value)\n    return key_value_dict\n\nprint(group_key_value([('a', 'b'), ('a', 'c'), ('a', 'd'), ('b', 'c'), ('c', 'd'), ('d', 'e')]))"
    },
    {
      "rank": 42,
      "score": 8.0,
      "candidate": "def group(items):\n    d = {}\n    for k, v in items:\n        d[k].append(v)\n    return d"
    },
    {
      "rank": 43,
      "score": 8.0,
      "candidate": "def group_key_value(items):\n    return {key: [value] for key, value in items}\n\n\nitems = [\n    (\"a\", \"a\"),\n    (\"b\", \"b\"),\n    (\"c\", \"c\"),\n    (\"d\", \"d\"),\n    (\"e\", \"e\")\n]\n\nprint(group_key_value(items))"
    },
    {
      "rank": 44,
      "score": 8.0,
      "candidate": "def group_by_key(key_value_pairs):\n    d = {}\n    for k, v in key_value_pairs:\n        if k not in d:\n            d[k] = [v]\n        else:\n            d[k].append(v)\n    return d\n\n\n\n\nprint(group_by_key([\n    ('a', 'b'),\n    ('b', 'c'),\n    ('c', 'd'),\n    ('c', 'e'),\n    ('b', 'f'),\n    ('d', 'e'),\n    ('d', 'f')\n]))"
    },
    {
      "rank": 45,
      "score": 8.0,
      "candidate": "def group_key_value(pairs):\n    key_value_dict = {}\n    for key, value in pairs:\n        if key not in key_value_dict:\n            key_value_dict[key] = []\n        key_value_dict[key].append(value)\n    return key_value_dict\n\n\nif __name__ == \"__main__\":\n    pairs = [(\"a\", \"b\"), (\"b\", \"c\"), (\"a\", \"d\")]\n    print(group_key_value(pairs))"
    },
    {
      "rank": 46,
      "score": 8.0,
      "candidate": "from typing import Dict\n\n\ndef group(pairs: List[Tuple[str, str]]) -> Dict[str, List[str]]:\n    d = {}\n\n    for pair in pairs:\n        if pair[0] not in d:\n            d[pair[0]] = [pair[1]]\n        else:\n            d[pair[0]].append(pair[1])\n\n    return d\n\n\nif __name__ == \"__main__\":\n    assert group([(\"a\", \"b\"), (\"b\", \"c\"), (\"c\", \"d\"), (\"a\", \"e\"), (\"e\", \"f\")]) == {\n        \"a\": [\"b\", \"c\"],\n        \"b\": [\"c\", \"d\"],\n        \"c\": [\"d\", \"e\"],\n        \"d\": [\"e\", \"f\"],\n    }"
    },
    {
      "rank": 47,
      "score": 8.0,
      "candidate": "from collections import defaultdict\n\n\ndef group_by_key(items):\n    d = defaultdict(list)\n    for k, v in items:\n        d[k].append(v)\n    return d\n\n\nif __name__ == \"__main__\":\n    assert group_by_key([(\"a\", \"1\"), (\"b\", \"2\"), (\"c\", \"3\"), (\"d\", \"4\")]) == {\n        \"a\": [\"1\", \"2\"],\n        \"b\": [\"3\"],\n        \"c\": [\"4\"],\n        \"d\": [],\n    }"
    },
    {
      "rank": 48,
      "score": 8.0,
      "candidate": "def group_by(pairs):\n    dic = {}\n    for pair in pairs:\n        if pair[0] not in dic.keys():\n            dic[pair[0]] = [pair[1]]\n        else:\n            dic[pair[0]].append(pair[1])\n    return dic\n\n\nif __name__ == '__main__':\n    pairs = [(\"c\", \"a\"), (\"a\", \"b\"), (\"a\", \"c\"), (\"b\", \"d\"), (\"b\", \"e\"), (\"c\", \"f\")]\n    print(group_by(pairs))"
    },
    {
      "rank": 49,
      "score": 8.0,
      "candidate": "def group_pairs(pairs):\n    d = {}\n    for key, value in pairs:\n        if key in d:\n            d[key].append(value)\n        else:\n            d[key] = [value]\n    return d\n\n\nif __name__ == \"__main__\":\n    pairs = [(\"a\", \"1\"), (\"b\", \"2\"), (\"c\", \"3\"), (\"d\", \"4\"), (\"e\", \"5\")]\n    d = group_pairs(pairs)\n    print(d)"
    },
    {
      "rank": 50,
      "score": 8.0,
      "candidate": "def group_by_key(pairs):\n    return dict(pairs)\n\npairs = [(\"a\", \"a\"), (\"a\", \"b\"), (\"b\", \"c\"), (\"b\", \"d\"), (\"c\", \"d\"), (\"d\", \"e\"), (\"e\", \"f\"), (\"f\", \"g\"), (\"g\", \"h\"), (\"h\", \"i\")]\nprint(group_by_key(pairs))"
    },
    {
      "rank": 51,
      "score": 8.0,
      "candidate": "def group(key_value_pairs):\n    return {k:v for k,v in key_value_pairs}"
    },
    {
      "rank": 52,
      "score": 8.0,
      "candidate": "def group_by_key(items):\n    return {k: list(v) for k, v in sorted(items.items())}\n\nprint(group_by_key({'key1': ['value1'], 'key2': ['value2'], 'key3': ['value3']}))"
    },
    {
      "rank": 53,
      "score": 8.0,
      "candidate": "def group_by_key(pairs):\n    key_to_value = {}\n    for key, value in pairs:\n        key_to_value.setdefault(key, []).append(value)\n    return key_to_value\n\n\ndef test():\n    pairs = [\n        ('a', 'b'),\n        ('a', 'c'),\n        ('a', 'd'),\n        ('b', 'e'),\n        ('c', 'f'),\n        ('b', 'g'),\n        ('c', 'h'),\n        ('c', 'i'),\n        ('d', 'j'),\n        ('d', 'k'),\n        ('d', 'l'),\n        ('e', 'f'),\n        ('e', 'g'),\n        ('e', 'h'),\n        ('f', 'i'),\n        ('f', 'j'),\n        ('f', 'k'),\n        ('f', 'l'),\n    ]\n    result = group_by_key(pairs)\n    assert result == {\n        'a': ['b', 'c', 'd', 'e', 'f'],\n        'b': ['e', 'g', 'h'],\n        'c': ['f', 'i'],\n        'd': ['j'],\n        'e': ['f', 'j'],\n        'f': ['i'],\n        'i': [],\n        'k': ['l'],\n    }\n\n\nif __name__ == '__main__':\n    test()"
    },
    {
      "rank": 54,
      "score": 8.0,
      "candidate": "def group_key_value(pairs):\n    \"\"\"\n    :type pairs: List[Tuple[str, str]]\n    :rtype: Dict[str, List[str]]\n    \"\"\"\n    group_dict = {}\n    for k, v in pairs:\n        group_dict.setdefault(k, []).append(v)\n    return group_dict\n\n\nif __name__ == '__main__':\n    assert group_key_value([('a', 'b'), ('b', 'c'), ('b', 'd')]) == {\n        'a': ['b', 'c', 'd'],\n        'b': ['b', 'd']\n    }"
    },
    {
      "rank": 55,
      "score": 8.0,
      "candidate": "def group_by_key(sequence):\n    return {k: list(v) for k, v in collections.Counter(sequence).items()}\n\nif __name__ == \"__main__\":\n    print(group_by_key([('a', 'a'), ('b', 'b'), ('c', 'c')]))"
    },
    {
      "rank": 56,
      "score": 8.0,
      "candidate": "def group_by_key(pairs):\n    return {key: [value] for key, value in pairs}\n\n\nif __name__ == '__main__':\n    pairs = [\n        ('a', 'b'),\n        ('a', 'c'),\n        ('b', 'd'),\n        ('b', 'e'),\n        ('c', 'f'),\n        ('c', 'g'),\n        ('d', 'h'),\n        ('d', 'i'),\n    ]\n    print(group_by_key(pairs))"
    },
    {
      "rank": 57,
      "score": 8.0,
      "candidate": "def group_dict(dic):\n    keys = []\n    values = []\n    for key, value in dic.items():\n        keys.append(key)\n        values.append(value)\n    return dict(zip(keys, values))\n\nprint(group_dict({'key1': 'value1', 'key2': 'value2'}))\nprint(group_dict({'key1': 'value1', 'key2': 'value2', 'key3': 'value3'}))\nprint(group_dict({'key1': 'value1', 'key2': 'value2', 'key3': 'value3', 'key4': 'value4'}))"
    },
    {
      "rank": 58,
      "score": 8.0,
      "candidate": "def group_by_key(dictionary):\n    return dict(sorted(dictionary.items()))\n\n\nif __name__ == '__main__':\n    print(group_by_key({'a': 'b', 'c': 'd', 'e': 'f'}))"
    },
    {
      "rank": 59,
      "score": 8.0,
      "candidate": "def group_by_keys(pairs):\n    result = {}\n\n    for key, value in pairs:\n        if key not in result:\n            result[key] = [value]\n        else:\n            result[key].append(value)\n\n    return result\n\n\nif __name__ == '__main__':\n    pairs = [('a', 'b'), ('a', 'c'), ('b', 'd'), ('b', 'e')]\n    print(group_by_keys(pairs))"
    },
    {
      "rank": 60,
      "score": 8.0,
      "candidate": "def group_pairs(pairs):\n    d = {}\n    for key, value in pairs:\n        if key not in d:\n            d[key] = [value]\n        else:\n            d[key].append(value)\n    return d\n\n\npairs = [(\"a\", \"b\"), (\"a\", \"c\"), (\"a\", \"d\"), (\"b\", \"c\"), (\"b\", \"d\")]\nprint(group_pairs(pairs))"
    },
    {
      "rank": 61,
      "score": 8.0,
      "candidate": "def group_by_key(data):\n    dict = {}\n    for k,v in data:\n        if k not in dict:\n            dict[k] = [v]\n        else:\n            dict[k].append(v)\n    return dict\n\nprint(group_by_key([(\"one\",\"one\"),(\"two\",\"two\"),(\"three\",\"three\"),(\"four\",\"four\"),(\"five\",\"five\")]))"
    },
    {
      "rank": 62,
      "score": 8.0,
      "candidate": "def group_by(pairs):\n    key_list = []\n    value_list = []\n\n    for key, value in pairs:\n        key_list.append(key)\n        value_list.append(value)\n\n    return dict(zip(key_list, value_list))\n\npairs = [(\"A\", \"B\"), (\"B\", \"C\"), (\"C\", \"D\"), (\"D\", \"E\"), (\"E\", \"F\"), (\"F\", \"G\"), (\"G\", \"H\")]\nprint(group_by(pairs))"
    },
    {
      "rank": 63,
      "score": 8.0,
      "candidate": "def group_dict(d):\n    groups = {}\n    for key, value in d.items():\n        if key not in groups:\n            groups[key] = []\n        groups[key].append(value)\n    return groups"
    },
    {
      "rank": 64,
      "score": 8.0,
      "candidate": "def group_items(items):\n    items = dict()\n    for key, value in items:\n        if key not in items:\n            items[key] = []\n        items[key].append(value)\n    return items\n\n\nif __name__ == \"__main__\":\n    print(group_items([(\"name\", \"James\"), (\"age\", 30), (\"gender\", \"male\"), (\"hobby\", \"coffee\")]))\n    print(group_items([(\"name\", \"James\"), (\"age\", 30), (\"gender\", \"male\"), (\"hobby\", \"coffee\")]))"
    },
    {
      "rank": 65,
      "score": 8.0,
      "candidate": "def group(items):\n    groups = {}\n    for key, value in items:\n        if key not in groups:\n            groups[key] = [value]\n        else:\n            groups[key].append(value)\n    return groups\n\nif __name__ == '__main__':\n    print(group([('key', 'value'), ('key', 'value2'), ('key', 'value3'), ('key', 'value4')]))"
    },
    {
      "rank": 66,
      "score": 8.0,
      "candidate": "def group(sequence):\n    result = {}\n    for key, value in sequence:\n        result.setdefault(key, []).append(value)\n    return result\n\nprint(group([('a', '1'), ('b', '2'), ('c', '3'), ('d', '4')]))"
    },
    {
      "rank": 67,
      "score": 8.0,
      "candidate": "def group_dict(pairs):\n    key_val_dict = {}\n    for key, value in pairs:\n        key_val_dict[key].append(value)\n    return key_val_dict\n\n\nif __name__ == \"__main__\":\n    pairs = [(\"key\", \"value\"), (\"key2\", \"value2\"), (\"key3\", \"value3\"), (\"key4\", \"value4\")]\n    print(group_dict(pairs))"
    },
    {
      "rank": 68,
      "score": 8.0,
      "candidate": "def group(items):\n    # Fill this in.\n    group = {}\n    for item in items:\n        if item in group:\n            group[item].append(item)\n        else:\n            group[item] = [item]\n    return group"
    },
    {
      "rank": 69,
      "score": 8.0,
      "candidate": "def group_key_value(pairs):\n    pairs = sorted(pairs, key=lambda x: x[0])\n    d = {}\n    for pair in pairs:\n        d.setdefault(pair[0], []).append(pair[1])\n    return d"
    },
    {
      "rank": 70,
      "score": 8.0,
      "candidate": "def group_by_key(pairs):\n    groups = {}\n    for key, value in pairs:\n        groups.setdefault(key, []).append(value)\n    return groups\n\n\nif __name__ == \"__main__\":\n    pairs = [(\"a\", 1), (\"b\", 2), (\"a\", 3), (\"c\", 4), (\"a\", 5), (\"c\", 6)]\n    print(group_by_key(pairs))"
    },
    {
      "rank": 71,
      "score": 8.0,
      "candidate": "def group(items):\n    groups = {}\n    for key, value in items:\n        if key not in groups:\n            groups[key] = []\n        groups[key].append(value)\n    return groups\n\nprint(group([(\"Apple\", \"banana\"), (\"Apple\", \"cherry\"), (\"Apple\", \"cherry\")]))\nprint(group([(\"Apple\", \"banana\"), (\"Apple\", \"cherry\"), (\"Apple\", \"cherry\")]))"
    },
    {
      "rank": 72,
      "score": 8.0,
      "candidate": "def group_by_key(iterable):\n    return dict(zip(iterable[0::2], iterable[1::2]))\n\n\nif __name__ == \"__main__\":\n    assert group_by_key([(\"key\", \"value\")]) == {\"key\": [\"value\"]}"
    },
    {
      "rank": 73,
      "score": 8.0,
      "candidate": "def group_by_key(pairs):\n    dict_of_lists = {}\n    for key, value in pairs:\n        if key not in dict_of_lists:\n            dict_of_lists[key] = [value]\n        else:\n            dict_of_lists[key].append(value)\n    return dict_of_lists\n\n\ndef main():\n    pairs = [\n        (\"one\", \"one\"),\n        (\"two\", \"two\"),\n        (\"one\", \"two\"),\n        (\"two\", \"three\"),\n        (\"one\", \"three\"),\n    ]\n    print(group_by_key(pairs))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 74,
      "score": 8.0,
      "candidate": "def group_dict(dict_items):\n    return {k:v for k,v in dict_items}"
    },
    {
      "rank": 75,
      "score": 8.0,
      "candidate": "def group_key_value(pairs):\n    result = {}\n    for key, value in pairs:\n        if key not in result:\n            result[key] = [value]\n        else:\n            result[key].append(value)\n    return result\n\n\nif __name__ == '__main__':\n    pairs = [\n        ('a', 1),\n        ('b', 2),\n        ('c', 3),\n        ('a', 4),\n        ('d', 5),\n        ('e', 6),\n        ('f', 7),\n        ('g', 8)\n    ]\n    print(group_key_value(pairs))"
    },
    {
      "rank": 76,
      "score": 8.0,
      "candidate": "def group_by_key(items):\n    keys = list(set(item[0] for item in items))\n    groups = {key: [] for key in keys}\n    for key, value in items:\n        groups[key].append(value)\n    return groups\n\n\nitems = [(\"Bob\", \"Bob's password is\"), (\"Alice\", \"Alice's password is\"), (\"Bob\", \"Alice's password is\")]\nprint(group_by_key(items))"
    },
    {
      "rank": 77,
      "score": 8.0,
      "candidate": "def group_by_key(data):\n    result = {}\n    for pair in data:\n        result.setdefault(pair[0], []).append(pair[1])\n    return result\n\n\nif __name__ == '__main__':\n    print(group_by_key([('a', 1), ('b', 2), ('c', 3)]))\n    print(group_by_key([('a', 1), ('b', 2), ('c', 3), ('d', 4), ('e', 5)]))\n    print(group_by_key([('a', 1), ('b', 2), ('c', 3), ('d', 4), ('e', 5)]))"
    },
    {
      "rank": 78,
      "score": 8.0,
      "candidate": "def group_keys_values(d):\n    groups = {}\n    for key, value in d.items():\n        groups.setdefault(key, []).append(value)\n    return groups\n\n\nprint(group_keys_values({\"key\": \"value\", \"key2\": \"value2\"}))\nprint(group_keys_values({\"key\": \"value\", \"key2\": \"value2\", \"key3\": \"value3\"}))\nprint(group_keys_values({\"key\": \"value\", \"key2\": \"value2\", \"key3\": \"value3\"}))"
    },
    {
      "rank": 79,
      "score": 8.0,
      "candidate": "def group_by_keys(items):\n    result = {}\n    for item in items:\n        result[item[0]].append(item[1])\n    return result\n\nprint(group_by_keys([(\"a\", 1), (\"b\", 2), (\"c\", 3), (\"d\", 4)]))"
    },
    {
      "rank": 80,
      "score": 8.0,
      "candidate": "def group(seq):\n    d = {}\n    for x in seq:\n        if x[0] not in d:\n            d[x[0]] = [x[1]]\n        else:\n            d[x[0]].append(x[1])\n    return d\n\n\nif __name__ == \"__main__\":\n    seq = [\n        ('a', '1'),\n        ('b', '2'),\n        ('c', '3'),\n        ('d', '4'),\n    ]\n    print(group(seq))"
    },
    {
      "rank": 81,
      "score": 8.0,
      "candidate": "def group_by_key(seq):\n    d = {}\n    for key, value in seq:\n        if key not in d:\n            d[key] = [value]\n        else:\n            d[key].append(value)\n    return d\n\n\ndef test():\n    seq = [('a', 'b'), ('b', 'c'), ('c', 'd'), ('a', 'e'), ('e', 'f'), ('a', 'g'), ('g', 'h')]\n    assert group_by_key(seq) == {\n        'a': ['b', 'c'],\n        'b': ['c', 'd'],\n        'c': ['d', 'e'],\n        'd': ['e', 'f'],\n        'e': ['f', 'g'],\n        'f': ['g', 'h'],\n    }\n\n\nif __name__ == '__main__':\n    test()"
    },
    {
      "rank": 82,
      "score": 8.0,
      "candidate": "def group_pairs(pairs):\n    groups = {}\n    for k, v in pairs:\n        if k not in groups:\n            groups[k] = []\n        groups[k].append(v)\n    return groups\n\ndef test():\n    pairs = [('a', '1'), ('b', '2'), ('c', '3'), ('d', '4')]\n    print(group_pairs(pairs))\n\nif __name__ == '__main__':\n    test()"
    },
    {
      "rank": 83,
      "score": 8.0,
      "candidate": "def group_by(data):\n    d = {}\n    for key, value in data:\n        if key not in d:\n            d[key] = [value]\n        else:\n            d[key].append(value)\n    return d\n\n\ndef test():\n    data = [('a', '1'), ('b', '2'), ('c', '3'), ('d', '4'), ('e', '5')]\n    print(group_by(data))\n\n\nif __name__ == '__main__':\n    test()"
    },
    {
      "rank": 84,
      "score": 8.0,
      "candidate": "def group_key_value(pairs):\n    pairs.sort(key=lambda x: x[0])\n    return {x[0]: x[1] for x in pairs}"
    },
    {
      "rank": 85,
      "score": 8.0,
      "candidate": "def group_items(items):\n    result = {}\n    for key, value in items:\n        if key not in result:\n            result[key] = [value]\n        else:\n            result[key].append(value)\n    return result\n\nprint(group_items([(\"a\", \"b\"), (\"b\", \"c\"), (\"c\", \"d\"), (\"d\", \"e\"), (\"e\", \"f\")]))"
    },
    {
      "rank": 86,
      "score": 8.0,
      "candidate": "import collections\n\ndef group_key_value(items):\n    d = collections.defaultdict(list)\n    for k, v in items:\n        d[k].append(v)\n    return d\n\nif __name__ == '__main__':\n    items = [('a', 'b'), ('a', 'c'), ('b', 'd'), ('c', 'e'), ('c', 'f')]\n    print(group_key_value(items))"
    },
    {
      "rank": 87,
      "score": 1.0,
      "candidate": "def group(seq):\n    d = {}\n    for k, v in seq:\n        if k in d:\n            d[k].append(v)\n        else:\n            d[k] = [v]\n    return d\n\n\nif __name__ == \"__main__\":\n    assert group([(\"a\", \"b\"), (\"c\", \"d\"), (\"e\", \"f\")]) == {\"a\": [\"b\"], \"c\": [\"d\"], \"e\": [\"f\"]}"
    },
    {
      "rank": 88,
      "score": 1.0,
      "candidate": "def group_items(items):\n    # TODO: Write your code here\n    items_dict = {}\n\n    for item in items:\n        if item[0] not in items_dict:\n            items_dict[item[0]] = [item[1]]\n        else:\n            items_dict[item[0]].append(item[1])\n\n    return items_dict\n\n\nif __name__ == \"__main__\":\n    items = [\n        (\"A\", 1),\n        (\"B\", 2),\n        (\"C\", 3),\n        (\"D\", 4),\n        (\"E\", 5)\n    ]\n\n    items_dict = group_items(items)\n\n    print(items_dict)"
    },
    {
      "rank": 89,
      "score": 1.0,
      "candidate": "def group_dict(dict_list):\n    dict_dict = {}\n    for item in dict_list:\n        if item[0] not in dict_dict.keys():\n            dict_dict[item[0]] = [item[1]]\n        else:\n            dict_dict[item[0]].append(item[1])\n    return dict_dict\n\n\nif __name__ == \"__main__\":\n    dict_list = [(\"key\", \"value\"), (\"key\", \"value\"), (\"key\", \"value\"), (\"key\", \"value\")]\n    print(group_dict(dict_list))"
    },
    {
      "rank": 90,
      "score": 1.0,
      "candidate": "from typing import Dict\n\n\ndef group_by_key(data: Dict) -> Dict:\n    return {key: list(value) for key, value in data.items()}"
    },
    {
      "rank": 91,
      "score": 1.0,
      "candidate": "def group_dict(d):\n    return {k: list(v) for k, v in d.items()}\n\n\nif __name__ == \"__main__\":\n    d = {'a': [1, 2, 3, 4], 'b': [1, 2, 3, 4, 5, 6], 'c': [1, 2, 3, 4, 5, 6, 7], 'd': [1, 2, 3, 4, 5, 6, 7, 8, 9]}\n    print(group_dict(d))"
    },
    {
      "rank": 92,
      "score": 1.0,
      "candidate": "def group_by_key(seq):\n    d = {}\n    for key, value in seq:\n        d.setdefault(key, []).append(value)\n    return d\n\ndef group_by_value(seq):\n    d = {}\n    for key, value in seq:\n        d.setdefault(value, []).append(key)\n    return d\n\ndef group_by_value_and_key(seq):\n    d = {}\n    for key, value in seq:\n        if key in d:\n            d[key].append(value)\n        else:\n            d[key] = [value]\n    return d\n\ndef group_by_value_and_key_and_value(seq):\n    d = {}\n    for key, value in seq:\n        if key in d:\n            d[key].append(value)\n        else:\n            d[key] = [value]\n    return d\n\ndef group_by_value_and_key_and_value_and_key(seq):\n    d = {}\n    for key, value in seq:\n        if key in d:\n            d[key].append(value)\n        else:\n            d[key] = [value]\n        if value in d:\n            d[value].append(key)\n        else:\n            d[value] = [key]\n    return d\n\ndef group_by_value_and_key_and_value_and_value_and_key(seq):\n    d = {}\n    for key, value in seq:\n        if key in d:\n            d[key].append(value)\n        else:\n            d[key] = [value]\n        if value in d:\n            d[value].append(key)\n        else:\n            d[value] = [key]\n    return d\n\ndef group_by_value_and_key_and_value_and_key_and_value(seq):\n    d = {}\n    for key, value in seq:\n        if key in d:\n            d[key].append(value)\n        else:\n            d[key] = [value]\n        if value in d:"
    },
    {
      "rank": 93,
      "score": 1.0,
      "candidate": "def group_dict(d):\n    # Your code here\n    return d\n\n\nif __name__ == '__main__':\n    d = {'key1': [1, 2, 3, 4, 5], 'key2': [1, 2, 3, 4, 5]}\n    print(group_dict(d))"
    },
    {
      "rank": 94,
      "score": 1.0,
      "candidate": "import collections\n\n\ndef group_dict(dict_list):\n    key_dict = collections.defaultdict(list)\n    for key, value in dict_list:\n        key_dict[key].append(value)\n    return key_dict\n\n\nif __name__ == \"__main__\":\n    dict_list = [\n        (\"a\", \"1\"),\n        (\"b\", \"2\"),\n        (\"c\", \"3\"),\n        (\"d\", \"4\"),\n        (\"e\", \"5\"),\n        (\"f\", \"6\"),\n        (\"g\", \"7\"),\n        (\"h\", \"8\"),\n        (\"i\", \"9\"),\n        (\"j\", \"10\"),\n    ]\n    print(group_dict(dict_list))"
    },
    {
      "rank": 95,
      "score": 1.0,
      "candidate": "def group_by_key(data):\n    return dict(sorted(data.items()))\n\ndef test_group_by_key():\n    assert group_by_key({\"a\": 1, \"b\": 2, \"c\": 3}) == {\"a\": [1], \"b\": [2], \"c\": [3]}"
    },
    {
      "rank": 96,
      "score": 1.0,
      "candidate": "def group_by(items):\n    result = {}\n\n    for key, value in items:\n        result.setdefault(key, []).append(value)\n\n    return result\n\n\ndef test_group_by():\n    assert group_by([(\"a\", \"b\"), (\"a\", \"c\"), (\"b\", \"d\"), (\"a\", \"e\"), (\"c\", \"f\")]) == {\n        \"a\": [\"b\", \"c\"],\n        \"b\": [\"d\", \"e\"],\n        \"c\": [\"f\"],\n    }"
    },
    {
      "rank": 97,
      "score": 1.0,
      "candidate": "def group(data):\n    # Your code here\n    return_dict = {}\n    for k, v in data:\n        if k not in return_dict:\n            return_dict[k] = [v]\n        else:\n            return_dict[k].append(v)\n    return return_dict\n\n\nprint(group([(\"a\", \"a\"), (\"b\", \"b\"), (\"c\", \"c\"), (\"d\", \"d\")]))"
    },
    {
      "rank": 98,
      "score": 1.0,
      "candidate": "def group_pairs(pairs):\n    groups = {}\n    for k, v in pairs:\n        if k not in groups:\n            groups[k] = [v]\n        else:\n            groups[k].append(v)\n    return groups\n\n\nprint(group_pairs([(\"A\", \"B\"), (\"A\", \"C\"), (\"B\", \"D\"), (\"C\", \"E\"), (\"C\", \"F\"), (\"C\", \"G\"), (\"D\", \"E\")]))\nprint(group_pairs([(\"A\", \"B\"), (\"B\", \"C\"), (\"C\", \"E\"), (\"C\", \"F\"), (\"D\", \"E\"), (\"D\", \"F\"), (\"E\", \"F\")]))\nprint(group_pairs([(\"A\", \"B\"), (\"B\", \"C\"), (\"B\", \"D\"), (\"C\", \"E\"), (\"C\", \"F\"), (\"D\", \"E\"), (\"E\", \"F\"), (\"E\", \"F\")]))"
    },
    {
      "rank": 99,
      "score": 1.0,
      "candidate": "def group_items(items):\n    result = {}\n    for key, value in items:\n        if key not in result:\n            result[key] = [value]\n        else:\n            result[key].append(value)\n    return result\n\n\ndef test_group_items():\n    assert group_items([(\"A\", \"B\"), (\"A\", \"C\"), (\"A\", \"D\"), (\"C\", \"A\"), (\"C\", \"B\"), (\"D\", \"A\"), (\"D\", \"B\")]) == {\n        \"A\": [\"B\"],\n        \"B\": [\"C\"],\n        \"C\": [\"A\", \"B\"],\n        \"D\": [\"A\"],\n    }"
    },
    {
      "rank": 100,
      "score": 1.0,
      "candidate": "def group_dict(data):\n    return {key: [val] for key, val in data.items()}\n\n\ndef test_group_dict():\n    assert group_dict({\"key1\": \"val1\", \"key2\": \"val2\"}) == {\n        \"key1\": [\"val1\"],\n        \"key2\": [\"val2\"],\n    }\n\n\ndef test_group_dict_empty():\n    assert group_dict({}) == {}\n\n\ndef test_group_dict_non_empty():\n    assert group_dict({\"key1\": \"val1\", \"key2\": \"val2\"}) == {\n        \"key1\": [\"val1\"],\n        \"key2\": [\"val2\"],\n    }"
    }
  ]
}