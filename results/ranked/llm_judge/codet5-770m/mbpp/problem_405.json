{
  "timestamp": "2025-09-14T15:26:30.402276",
  "method": "improved_llm_judge",
  "judge_model": "codellama/CodeLlama-7b-Python-hf",
  "target_model": "codet5-770m",
  "dataset": "mbpp",
  "problem_number": 405,
  "total_candidates": 100,
  "results": [
    {
      "rank": 1,
      "score": 10.0,
      "candidate": "def max_sum_recursive(num):\n    if num == 0:\n        return 0\n    elif num == 1:\n        return 1\n    else:\n        return max(num//3, max_sum_recursive(num-3*num//2)) + max_sum_recursive(num-3*num//2)\n\ndef max_sum_iterative(num):\n    if num == 0:\n        return 0\n    elif num == 1:\n        return 1\n    else:\n        return max(num//3, max_sum_iterative(num-3*num//2)) + max_sum_iterative(num-3*num//2)\n\nif __name__ == '__main__':\n    print(max_sum_iterative(1))\n    print(max_sum_iterative(2))\n    print(max_sum_iterative(3))\n    print(max_sum_iterative(4))\n    print(max_sum_iterative(5))\n    print(max_sum_iterative(6))\n    print(max_sum_iterative(7))\n    print(max_sum_iterative(8))\n    print(max_sum_iterative(9))\n    print(max_sum_iterative(10))\n    print(max_sum_iterative(11))\n    print(max_sum_iterative(12))\n    print(max_sum_iterative(13))\n    print(max_sum_iterative(14))\n    print(max_sum_iterative(15))\n    print(max_sum_iterative(16))\n    print(max_sum_iterative(17))\n    print(max_sum_iterative(18))\n    print(max_sum_iterative(19))\n    print(max_sum_iterative(20))\n    print(max_sum_iterative(21))\n    print(max_sum_iterative(22))\n    print(max_sum_iterative(23))\n    print(max_sum_iterative(24))\n    print(max_sum_iterative(25))\n    print(max_sum_iterative(26))\n    print(max_sum_iter"
    },
    {
      "rank": 2,
      "score": 10.0,
      "candidate": "class Solution(object):\n    def threeSum(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: int\n        \"\"\"\n        if num < 0:\n            return 0\n        return self.threeSum(num//3) + self.threeSum(num//2) + self.threeSum(num//1)\n\n\nprint(Solution().threeSum(0))"
    },
    {
      "rank": 3,
      "score": 10.0,
      "candidate": "def max_sum(n):\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        return max(max_sum(n-1),max_sum(n-2)) + max_sum(n-3)\n\n\nprint(max_sum(10))\nprint(max_sum(20))\nprint(max_sum(30))\nprint(max_sum(40))\nprint(max_sum(50))\nprint(max_sum(60))\nprint(max_sum(70))\nprint(max_sum(80))\nprint(max_sum(90))\nprint(max_sum(100))\nprint(max_sum(120))\nprint(max_sum(120))\nprint(max_sum(120))\nprint(max_sum(120))\nprint(max_sum(120))\nprint(max_sum(120))\nprint(max_sum(120))\nprint(max_sum(120))\nprint(max_sum(120))\nprint(max_sum(120))\nprint(max_sum(120))\nprint(max_sum(120))\nprint(max_sum(120))\nprint(max_sum(120))\nprint(max_sum(120))\nprint(max_sum(120))\nprint(max_sum(120))\nprint(max_sum(120))\nprint(max_sum(120))\nprint(max_sum(120))\nprint(max_sum(120))\nprint(max_sum(120))\nprint(max_sum(120))\nprint(max_sum(120))\nprint(max_sum(120))\nprint(max_sum(120))\nprint(max_sum(120))\nprint(max_sum(120))\nprint(max_sum(120))\nprint(max_sum(120))\nprint(max_sum(120))\nprint(max_sum(120))\nprint(max_sum(120))\nprint(max_sum(120))\nprint(max_sum(120))\nprint(max_sum(120))\nprint(max_sum(120))\nprint(max_sum(120))\nprint(max_sum(120))\nprint("
    },
    {
      "rank": 4,
      "score": 10.0,
      "candidate": "def max_sum_recursive(num):\n    if num == 0:\n        return 0\n    if num == 1:\n        return 1\n\n    if num % 3 == 0:\n        return max_sum_recursive(num // 3) + max_sum_recursive(num // 3) + max_sum_recursive(num // 3)\n    else:\n        return max_sum_recursive(num // 3) + max_sum_recursive(num // 3) + max_sum_recursive(num // 3)\n\n\ndef max_sum_iterative(num):\n    if num == 0:\n        return 0\n    if num == 1:\n        return 1\n\n    if num % 3 == 0:\n        return max_sum_iterative(num // 3) + max_sum_iterative(num // 3) + max_sum_iterative(num // 3)\n    else:\n        return max_sum_iterative(num // 3) + max_sum_iterative(num // 3) + max_sum_iterative(num // 3)\n\n\nif __name__ == '__main__':\n    print(max_sum_recursive(1))\n    print(max_sum_recursive(2))\n    print(max_sum_recursive(3))\n    print(max_sum_recursive(4))\n    print(max_sum_recursive(5))\n    print(max_sum_recursive(6))\n    print(max_sum_recursive(7))\n    print(max_sum_recursive(8))\n    print(max_sum_recursive(9))\n    print(max_sum_recursive(10))"
    },
    {
      "rank": 5,
      "score": 10.0,
      "candidate": "def max_sum(num):\n    if num < 2:\n        return num\n    else:\n        return max_sum(num - 1) + max_sum(num - 2) + max_sum(num - 3)\n\n\nprint(max_sum(100))"
    },
    {
      "rank": 6,
      "score": 10.0,
      "candidate": "def maximum_sum(num):\n    if num == 1:\n        return 1\n    elif num == 2:\n        return 2\n    elif num == 3:\n        return 4\n    else:\n        return max(maximum_sum(num // 2), maximum_sum(num // 3), maximum_sum(num // 4)) + num\n\nif __name__ == \"__main__\":\n    assert maximum_sum(1) == 1\n    assert maximum_sum(2) == 2\n    assert maximum_sum(3) == 4\n    assert maximum_sum(4) == 6\n    assert maximum_sum(5) == 9\n    assert maximum_sum(6) == 12\n    assert maximum_sum(7) == 15\n    assert maximum_sum(8) == 18\n    assert maximum_sum(9) == 21\n    assert maximum_sum(10) == 28\n    assert maximum_sum(11) == 36\n    assert maximum_sum(12) == 48\n    assert maximum_sum(13) == 64\n    assert maximum_sum(14) == 81\n    assert maximum_sum(15) == 96\n    assert maximum_sum(16) == 120\n    assert maximum_sum(17) == 144\n    assert maximum_sum(18) == 288\n    assert maximum_sum(19) == 384\n    assert maximum_sum(20) == 576\n    assert maximum_sum(21) == 768\n    assert maximum_sum(22) == 896\n    assert maximum_sum(23) == 972\n    assert maximum_sum(24) == 1076\n    assert maximum_sum(25) == 1280\n    assert maximum_sum(26) == 1464\n    assert maximum_sum(27) == 1632\n    assert maximum_sum(28) == 1832\n    assert maximum_sum(29) == 2888\n    assert maximum_sum(30) == 3848\n    assert maximum_sum(31) == 9608\n    assert maximum_sum(32) == 12960\n    assert maximum_sum(33) == 16368\n    assert maximum_sum(34) == 18368\n    assert maximum_sum(35) == 2888\n    assert maximum_sum(36) == 3848"
    },
    {
      "rank": 7,
      "score": 10.0,
      "candidate": "class Solution:\n    def maxSumThreeParts(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        if n == 1:\n            return 1\n        else:\n            return max(self.maxSumThreeParts(n-1), self.maxSumThreeParts(n-2) + self.maxSumThreeParts(n-3))"
    },
    {
      "rank": 8,
      "score": 10.0,
      "candidate": "class Solution(object):\n    def maxProduct(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        # Base Case\n        if len(nums) == 0:\n            return 0\n        elif len(nums) == 1:\n            return nums[0]\n\n        # Recursive Case\n        return max(self.maxProduct(nums[:-1]) * nums[-1], self.maxProduct(nums[:-2]) * nums[-2], self.maxProduct(nums[:-3]) * nums[-3])\n\n\ns = Solution()\nprint s.maxProduct([1, 2, 3, 4, 5, 6, 7])"
    },
    {
      "rank": 9,
      "score": 10.0,
      "candidate": "def max_sum_of_divisible_numbers(n):\n    if n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return max_sum_of_divisible_numbers(n - 1) + max_sum_of_divisible_numbers(n - 2)\n\n\ndef max_sum_of_divisible_numbers_recursive(n):\n    if n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return max_sum_of_divisible_numbers_recursive(n - 1) + max_sum_of_divisible_numbers_recursive(n - 2)\n\n\nif __name__ == '__main__':\n    n = int(input())\n    print(max_sum_of_divisible_numbers(n))\n    print(max_sum_of_divisible_numbers_recursive(n))"
    },
    {
      "rank": 10,
      "score": 10.0,
      "candidate": "def max_sum(n, s=0):\n    if n <= 1:\n        return s\n    s = max_sum(n-1, s) + n\n    s = max_sum(n-2, s) + n\n    s = max_sum(n-3, s)\n    return s\n\n\nif __name__ == \"__main__\":\n    print(max_sum(7))"
    },
    {
      "rank": 11,
      "score": 10.0,
      "candidate": "def max_sum_recursive(num):\n    if num <= 1:\n        return num\n    else:\n        return num + max_sum_recursive(num // 3) + max_sum_recursive(num // 5)\n\n\ndef max_sum_iterative(num):\n    if num <= 1:\n        return num\n    else:\n        return num + max_sum_iterative(num // 3) + max_sum_iterative(num // 5)\n\n\nprint(max_sum_iterative(10))\nprint(max_sum_iterative(1))\nprint(max_sum_iterative(2))\nprint(max_sum_iterative(3))\nprint(max_sum_iterative(4))\nprint(max_sum_iterative(5))\nprint(max_sum_iterative(6))\nprint(max_sum_iterative(7))\nprint(max_sum_iterative(8))\nprint(max_sum_iterative(9))\nprint(max_sum_iterative(10))\nprint(max_sum_iterative(11))\nprint(max_sum_iterative(12))\nprint(max_sum_iterative(13))\nprint(max_sum_iterative(14))\nprint(max_sum_iterative(15))\nprint(max_sum_iterative(16))\nprint(max_sum_iterative(17))\nprint(max_sum_iterative(18))\nprint(max_sum_iterative(19))\nprint(max_sum_iterative(20))\nprint(max_sum_iterative(21))\nprint(max_sum_iterative(22))\nprint(max_sum_iterative(23))\nprint(max_sum_iterative(24))\nprint(max_sum_iterative(25))\nprint(max_sum_iterative(26))\nprint(max_sum_iterative(27))\nprint(max_sum_iterative(28))\nprint(max_sum_iterative(29))\nprint(max_sum_iterative(30))\nprint(max_sum_iterative(31))\nprint(max_sum_iterative(32))\nprint(max"
    },
    {
      "rank": 12,
      "score": 10.0,
      "candidate": "def max_sum_recursive(n):\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n % 3 == 0:\n        return max(max_sum_recursive(n // 3), max_sum_recursive(n // 3 - 1) + n)\n    else:\n        return max_sum_recursive(n // 3) + max_sum_recursive(n // 3 - 1)\n\n\ndef max_sum_iterative(n):\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n % 3 == 0:\n        return max(max_sum_iterative(n // 3), max_sum_iterative(n // 3 - 1) + n)\n    else:\n        return max_sum_iterative(n // 3) + max_sum_iterative(n // 3 - 1)\n\n\nif __name__ == \"__main__\":\n    print(max_sum_iterative(1))\n    print(max_sum_iterative(2))\n    print(max_sum_iterative(3))\n    print(max_sum_iterative(4))\n    print(max_sum_iterative(5))\n    print(max_sum_iterative(6))\n    print(max_sum_iterative(7))\n    print(max_sum_iterative(8))\n    print(max_sum_iterative(9))"
    },
    {
      "rank": 13,
      "score": 10.0,
      "candidate": "class Solution(object):\n    def max_sum_three_parts(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        if n <= 1:\n            return n\n        return max(self.max_sum_three_parts(n - 1), self.max_sum_three_parts(n - 2), self.max_sum_three_parts(n - 3))"
    },
    {
      "rank": 14,
      "score": 10.0,
      "candidate": "def max_sum_recursive(num, memo):\n    if num in memo:\n        return memo[num]\n\n    if num <= 0:\n        return 0\n\n    if num == 1:\n        memo[num] = 1\n        return 1\n\n    if num == 2:\n        memo[num] = 2\n        return 2\n\n    memo[num] = max(max_sum_recursive(num - 1, memo), max_sum_recursive(num - 2, memo)) + num\n    return memo[num]\n\n\ndef max_sum(num):\n    memo = {}\n    return max_sum_recursive(num, memo)\n\n\nprint(max_sum(10))\nprint(max_sum(3))\nprint(max_sum(4))\nprint(max_sum(5))\nprint(max_sum(6))\nprint(max_sum(7))\nprint(max_sum(8))\nprint(max_sum(9))\nprint(max_sum(10))\nprint(max_sum(5))\nprint(max_sum(6))\nprint(max_sum(7))\nprint(max_sum(8))\nprint(max_sum(9))\nprint(max_sum(10))\nprint(max_sum(5))\nprint(max_sum(6))\nprint(max_sum(7))\nprint(max_sum(8))\nprint(max_sum(9))\nprint(max_sum(10))\nprint(max_sum(5))\nprint(max_sum(6))\nprint(max_sum(7))\nprint(max_sum(8))\nprint(max_sum(9))\nprint(max_sum(10))\nprint(max_sum(5))\nprint(max_sum(6))\nprint(max_sum(7))\nprint(max_sum(8))\nprint(max_sum(9))\nprint(max_sum(10))\nprint(max_sum(5))\nprint(max_sum(6))\nprint(max_sum(7))\nprint(max_sum(8))\nprint(max_sum(9))\nprint(max_sum(10))\nprint(max_sum("
    },
    {
      "rank": 15,
      "score": 10.0,
      "candidate": "def max_sum_recursive(num):\n\tif num == 1:\n\t\treturn 1\n\telse:\n\t\treturn num * max_sum_recursive(num - 1)\n\ndef max_sum(num):\n\treturn max_sum_recursive(num)\n\nprint(max_sum(4))"
    },
    {
      "rank": 16,
      "score": 10.0,
      "candidate": "class Solution:\n    def maximumSum(self, n: int) -> int:\n        if n < 3:\n            return n\n        return self.maximumSum(n // 3) + self.maximumSum(n // 2) + self.maximumSum(n // 1)"
    },
    {
      "rank": 17,
      "score": 9.0,
      "candidate": "def max_sum(num):\n    if num < 2:\n        return num\n    return max_sum(num // 3) + num % 3\n\n\nif __name__ == '__main__':\n    print(max_sum(100))\n    print(max_sum(1))\n    print(max_sum(0))"
    },
    {
      "rank": 18,
      "score": 9.0,
      "candidate": "def max_sum(n):\n    if n <= 0:\n        return 0\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n % 3 == 0:\n        return max(max_sum(n // 3) + 2, max_sum(n // 3) + 2, max_sum(n // 3) + 1)\n    else:\n        return max(max_sum(n // 3) + 3, max_sum(n // 3) + 2, max_sum(n // 3) + 1)\n\nif __name__ == \"__main__\":\n    print(max_sum(5))\n    print(max_sum(1))\n    print(max_sum(0))\n    print(max_sum(2))\n    print(max_sum(5))\n    print(max_sum(6))\n    print(max_sum(8))\n    print(max_sum(4))\n    print(max_sum(8))\n    print(max_sum(10))"
    },
    {
      "rank": 19,
      "score": 9.0,
      "candidate": "def three_sum(num):\n    if num == 0:\n        return 0\n\n    left = three_sum(num // 3)\n    right = three_sum(num // 3 - 1)\n    mid = three_sum(num // 3 + 1)\n\n    return max(left, right, mid)\n\n\nprint(three_sum(10))\nprint(three_sum(2))\nprint(three_sum(3))\nprint(three_sum(4))"
    },
    {
      "rank": 20,
      "score": 8.0,
      "candidate": "class Solution:\n    def maxSum(self, n: int) -> int:\n        if n < 3:\n            return n\n        return self.maxSum(n // 3) + self.maxSum(n // 2) + self.maxSum(n // 1)"
    },
    {
      "rank": 21,
      "score": 8.0,
      "candidate": "def max_sum(n):\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    return max(max_sum(n-1), max_sum(n-2), max_sum(n-3))\n\nprint(max_sum(0))\nprint(max_sum(1))\nprint(max_sum(2))\nprint(max_sum(3))\nprint(max_sum(4))\nprint(max_sum(5))\nprint(max_sum(6))\nprint(max_sum(7))\nprint(max_sum(8))\nprint(max_sum(9))\nprint(max_sum(10))"
    },
    {
      "rank": 22,
      "score": 8.0,
      "candidate": "def maximum_sum(n):\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n == 3:\n        return 3\n\n    a = maximum_sum(n - 1)\n    b = maximum_sum(n - 2)\n    c = maximum_sum(n - 3)\n\n    return max(a, b, c)\n\n\nprint(maximum_sum(5))"
    },
    {
      "rank": 23,
      "score": 8.0,
      "candidate": "def max_sum_recursive(number):\n    if number == 0:\n        return 0\n    elif number == 1:\n        return 1\n    elif number == 2:\n        return 2\n    else:\n        return max(number % 3, max_sum_recursive(number // 3) + number // 3)\n\n\ndef max_sum_iterative(number):\n    if number == 0:\n        return 0\n    elif number == 1:\n        return 1\n    elif number == 2:\n        return 2\n    else:\n        return max(number % 3, max_sum_iterative(number // 3) + number // 3)\n\n\nprint(max_sum_recursive(1))\nprint(max_sum_recursive(2))\nprint(max_sum_recursive(3))\nprint(max_sum_recursive(4))\nprint(max_sum_recursive(5))"
    },
    {
      "rank": 24,
      "score": 8.0,
      "candidate": "def max_sum(num):\n    if num == 0:\n        return 0\n    if num == 1:\n        return 1\n    if num == 2:\n        return 2\n    return max(num // 3, max_sum(num // 3) + max_sum(num // 3))\n\n\nif __name__ == \"__main__\":\n    print(max_sum(10))\n    print(max_sum(1))\n    print(max_sum(2))\n    print(max_sum(3))\n    print(max_sum(4))\n    print(max_sum(5))\n    print(max_sum(6))\n    print(max_sum(7))\n    print(max_sum(8))\n    print(max_sum(9))"
    },
    {
      "rank": 25,
      "score": 8.0,
      "candidate": "def max_sum(n):\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    return max(max_sum(n // 2), max_sum(n // 3), max_sum(n // 4))\n\nif __name__ == '__main__':\n    print(max_sum(6))"
    },
    {
      "rank": 26,
      "score": 8.0,
      "candidate": "def max_sum(n):\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        return max(n % 3 + max_sum(n // 3), max_sum(n // 3))\n\n\nif __name__ == \"__main__\":\n    print(max_sum(5))\n    print(max_sum(7))\n    print(max_sum(4))\n    print(max_sum(3))\n    print(max_sum(2))\n    print(max_sum(1))"
    },
    {
      "rank": 27,
      "score": 8.0,
      "candidate": "def max_sum(n):\n    if n <= 1:\n        return n\n    return max(n // 3, max_sum(n // 3), n // 6)\n\n\nif __name__ == '__main__':\n    print(max_sum(1))\n    print(max_sum(5))\n    print(max_sum(7))"
    },
    {
      "rank": 28,
      "score": 8.0,
      "candidate": "def max_sum_recursive(n):\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        return max(n*2, max_sum_recursive(n-1) + max_sum_recursive(n-2))\n\n\ndef max_sum_iterative(n):\n    return max(n*3, max_sum_iterative_helper(n, 0))\n\n\ndef max_sum_iterative_helper(n, index):\n    if index == 3:\n        return n\n    if index == 2:\n        return n*2\n    else:\n        return max(n*3, max_sum_iterative_helper(n, index+1) + max_sum_iterative_helper(n, index+2))\n\n\nif __name__ == \"__main__\":\n    print(max_sum_recursive(20))\n    print(max_sum_iterative(20))\n    print(max_sum_iterative_helper(20, 0))"
    },
    {
      "rank": 29,
      "score": 8.0,
      "candidate": "def max_sum(n):\n    if n == 0:\n        return 0\n    else:\n        return max(max_sum(n-1), max_sum(n-2), max_sum(n-3))\n\nprint(max_sum(15))"
    },
    {
      "rank": 30,
      "score": 8.0,
      "candidate": "def max_sum(n, m):\n    if n == 0:\n        return m\n    else:\n        return max(max_sum(n-1, m), max_sum(n-2, m), max_sum(n-3, m))\n\n\nprint(max_sum(5, 0))\nprint(max_sum(2, 0))\nprint(max_sum(1, 0))\nprint(max_sum(6, 0))\nprint(max_sum(10, 0))"
    },
    {
      "rank": 31,
      "score": 8.0,
      "candidate": "def max_sum_recursive(num):\n    if num == 0:\n        return 0\n    if num == 1:\n        return 1\n    if num == 2:\n        return 2\n\n    return max(max_sum_recursive(num - 1), max_sum_recursive(num - 2), max_sum_recursive(num - 3))\n\ndef max_sum(num):\n    if num == 0:\n        return 0\n    if num == 1:\n        return 1\n    if num == 2:\n        return 2\n    if num == 3:\n        return 3\n\n    return max(max_sum(num - 1), max_sum(num - 2), max_sum(num - 3))\n\n\nprint(max_sum(5))\nprint(max_sum(7))\nprint(max_sum(3))\nprint(max_sum(2))\nprint(max_sum(0))\nprint(max_sum(10))\nprint(max_sum(2))\nprint(max_sum(5))\nprint(max_sum(10))\nprint(max_sum(6))\nprint(max_sum(7))\nprint(max_sum(5))\nprint(max_sum(6))\nprint(max_sum(3))\nprint(max_sum(2))\nprint(max_sum(1))"
    },
    {
      "rank": 32,
      "score": 8.0,
      "candidate": "def three_sum(n):\n    if n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    elif n == 3:\n        return 2\n    elif n % 3 == 0:\n        return n // 3\n    else:\n        return three_sum(n - 1) + three_sum(n - 2) + three_sum(n - 3)\n\n\nprint(three_sum(10))"
    },
    {
      "rank": 33,
      "score": 8.0,
      "candidate": "def max_sum_recursive(n):\n    if n <= 1:\n        return n\n    else:\n        return max(max_sum_recursive(n//3),max_sum_recursive(n//5),max_sum_recursive(n//7))\n\nprint(max_sum_recursive(12))\nprint(max_sum_recursive(7))\nprint(max_sum_recursive(21))"
    },
    {
      "rank": 34,
      "score": 8.0,
      "candidate": "def max_sum_recursive(number):\n    if number == 1:\n        return 1\n    elif number == 2:\n        return 2\n    elif number == 3:\n        return 3\n    elif number < 3:\n        return max_sum_recursive(number - 1) + max_sum_recursive(number - 2) + max_sum_recursive(number - 3)\n    else:\n        return max_sum_recursive(number - 1) + max_sum_recursive(number - 2) + max_sum_recursive(number - 3) + max_sum_recursive(number - 4)\n\ndef max_sum(number):\n    return max_sum_recursive(number)\n\nprint(max_sum(2))\nprint(max_sum(1))\nprint(max_sum(4))"
    },
    {
      "rank": 35,
      "score": 8.0,
      "candidate": "def max_sum(num):\n    if num == 1:\n        return 1\n    if num == 2:\n        return 2\n\n    return max(num % 3 + max_sum(num // 3), max_sum(num // 3))\n\n\nif __name__ == \"__main__\":\n    print(max_sum(15))"
    },
    {
      "rank": 36,
      "score": 8.0,
      "candidate": "def max_sum_recursive(num):\n    if num == 0:\n        return 0\n    return max(num, num + max_sum_recursive(num - 1))\n\ndef max_sum(num):\n    if num == 0:\n        return 0\n    return max(num, num + max_sum(num - 1) + max_sum(num - 2))\n\nprint(max_sum(2))\nprint(max_sum(3))\nprint(max_sum(5))"
    },
    {
      "rank": 37,
      "score": 8.0,
      "candidate": "def max_sum_three(n):\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n % 3 == 0:\n        return max(max_sum_three(n - 1), max_sum_three(n - 2), max_sum_three(n - 3)) + n\n\n\nif __name__ == \"__main__\":\n    assert max_sum_three(5) == 6\n    assert max_sum_three(7) == 9\n    assert max_sum_three(8) == 11\n    assert max_sum_three(10) == 12"
    },
    {
      "rank": 38,
      "score": 8.0,
      "candidate": "def max_sum_three(num):\n    if num <= 1:\n        return num\n    return max(num, max_sum_three(num - 1) + max_sum_three(num - 2) + max_sum_three(num - 3))\n\n\nprint(max_sum_three(5))\nprint(max_sum_three(10))\nprint(max_sum_three(100))"
    },
    {
      "rank": 39,
      "score": 8.0,
      "candidate": "def max_sum(num):\n    if num < 0:\n        return -1\n    elif num == 0:\n        return 0\n    else:\n        return max(num, max_sum(num-1), max_sum(num-2)) + max(num, max_sum(num-3))\n\n\nif __name__ == \"__main__\":\n    print(max_sum(100))\n    print(max_sum(4))\n    print(max_sum(0))"
    },
    {
      "rank": 40,
      "score": 8.0,
      "candidate": "def max_sum(n):\n    if n < 3:\n        return n\n    else:\n        return max(n * (n - 1) * (n - 2), max_sum(n - 1) + max_sum(n - 2))\n\n\nprint(max_sum(4))"
    },
    {
      "rank": 41,
      "score": 8.0,
      "candidate": "def max_sum(n):\n    if n <= 0:\n        return 0\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    return max_sum(n-1) + max_sum(n-2) + max_sum(n-3)\n\n\nif __name__ == \"__main__\":\n    print(max_sum(3))"
    },
    {
      "rank": 42,
      "score": 8.0,
      "candidate": "def max_sum_helper(n, sum):\n    if n < 0:\n        return 0\n    if n == 0:\n        return 1\n    if n == 1:\n        return 2\n    return max(max_sum_helper(n - 1, sum + n), max_sum_helper(n - 2, sum + n - 2))\n\n\ndef max_sum(n):\n    return max_sum_helper(n, 0)\n\n\nif __name__ == \"__main__\":\n    print(max_sum(3))"
    },
    {
      "rank": 43,
      "score": 8.0,
      "candidate": "def max_sum_three_parts(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        return max(max_sum_three_parts(n-1), max_sum_three_parts(n-2), max_sum_three_parts(n-3)) + n\n\nif __name__ == '__main__':\n    print(max_sum_three_parts(5))"
    },
    {
      "rank": 44,
      "score": 8.0,
      "candidate": "def max_sum(num):\n    if num == 0:\n        return 0\n    elif num == 1:\n        return 1\n    else:\n        return max(num % 3 + max_sum(num // 3), num % 5 + max_sum(num // 5))\n\nif __name__ == '__main__':\n    print(max_sum(6))"
    },
    {
      "rank": 45,
      "score": 8.0,
      "candidate": "def max_sum(num):\n    if num == 0:\n        return 0\n    else:\n        return max(num % 3, num // 3, num // 6) + num\n\n\nprint(max_sum(3))\nprint(max_sum(2))\nprint(max_sum(1))"
    },
    {
      "rank": 46,
      "score": 8.0,
      "candidate": "def max_sum_rec(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        return max(max_sum_rec(n-1), max_sum_rec(n-2), max_sum_rec(n-3))\n\ndef max_sum_iterative(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return max(max_sum_iterative(n-1), max_sum_iterative(n-2), max_sum_iterative(n-3))\n\ndef max_sum(n):\n    return max(max_sum_iterative(n-1), max_sum_iterative(n-2), max_sum_iterative(n-3))\n\nprint(max_sum(5))"
    },
    {
      "rank": 47,
      "score": 8.0,
      "candidate": "def max_sum_recursive(num):\n\tif num == 1:\n\t\treturn 1\n\treturn max_sum_recursive(num - 1) + max_sum_recursive(num - 2) + max_sum_recursive(num - 3)\n\ndef max_sum(num):\n\treturn max_sum_recursive(num)\n\nprint(max_sum(15))"
    },
    {
      "rank": 48,
      "score": 8.0,
      "candidate": "def max_sum(num):\n    if num == 1:\n        return 1\n    elif num == 2:\n        return 2\n    else:\n        return max(max_sum(num - 1), max_sum(num - 2)) + num\n\n\nif __name__ == \"__main__\":\n    assert max_sum(1) == 1\n    assert max_sum(2) == 2\n    assert max_sum(3) == 6\n    assert max_sum(4) == 9\n    assert max_sum(5) == 12\n    assert max_sum(6) == 18"
    },
    {
      "rank": 49,
      "score": 8.0,
      "candidate": "def max_sum(num):\n    if num <= 1:\n        return num\n\n    return max(max_sum(num // 3), max_sum(num // 2), max_sum(num))\n\n\nprint(max_sum(10))"
    },
    {
      "rank": 50,
      "score": 8.0,
      "candidate": "def max_sum(num):\n    if num == 0:\n        return 0\n    elif num == 1:\n        return 1\n    elif num == 2:\n        return 2\n    else:\n        return max(max_sum(num-1), max_sum(num-2), max_sum(num-3))\n\nprint(max_sum(5))"
    },
    {
      "rank": 51,
      "score": 8.0,
      "candidate": "def max_sum(n):\n    if n <= 2:\n        return n\n\n    return max(n % 3 + max_sum(n // 3), n % 5 + max_sum(n // 5))\n\n\nprint(max_sum(10))"
    },
    {
      "rank": 52,
      "score": 8.0,
      "candidate": "def max_sum(n):\n    if n == 1:\n        return n\n    return max(n, max_sum(n-1) + n-2)\n\n\nif __name__ == '__main__':\n    print(max_sum(10))\n    print(max_sum(100))\n    print(max_sum(2))\n    print(max_sum(4))\n    print(max_sum(8))"
    },
    {
      "rank": 53,
      "score": 8.0,
      "candidate": "def max_sum(n):\n    if n < 0:\n        return 0\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    return max(max_sum(n - 1), max_sum(n - 2), max_sum(n - 3))\n\n\nprint(max_sum(5))"
    },
    {
      "rank": 54,
      "score": 8.0,
      "candidate": "def max_sum_recursive(num, target):\n    if num == 1:\n        return num\n    elif num == 2:\n        return num * 2\n    elif num == 3:\n        return num * 3\n    else:\n        return max_sum_recursive(num - 1, target) + max_sum_recursive(num - 2, target) + max_sum_recursive(num - 3, target)\n\n\ndef max_sum(num):\n    return max_sum_recursive(num, num)\n\n\nprint(max_sum(1))\nprint(max_sum(2))\nprint(max_sum(3))\nprint(max_sum(4))\nprint(max_sum(5))"
    },
    {
      "rank": 55,
      "score": 8.0,
      "candidate": "def max_sum_recursive(num):\n    if num == 0:\n        return 0\n    return max(num, max_sum_recursive(num // 3) + num % 3)\n\n\ndef max_sum(num):\n    if num == 0:\n        return 0\n    return max(max_sum(num // 3) + num % 3, max_sum(num // 2) + num % 2, num)\n\n\ndef max_sum_iterative(num):\n    if num == 0:\n        return 0\n    return max(max_sum_iterative(num // 3) + num % 3, max_sum_iterative(num // 2) + num % 2, num)\n\n\ndef max_sum_recursive_iterative(num):\n    if num == 0:\n        return 0\n    return max(max_sum_recursive_iterative(num // 3) + num % 3, max_sum_recursive_iterative(num // 2) + num % 2, num)\n\n\nif __name__ == \"__main__\":\n    print(max_sum_iterative(1))\n    print(max_sum_recursive_iterative(1))"
    },
    {
      "rank": 56,
      "score": 8.0,
      "candidate": "def max_sum(num):\n    if num <= 1:\n        return num\n    else:\n        return max(num % 3, num % 5, num % 7) + max_sum(num // 3) + max_sum(num // 5)"
    },
    {
      "rank": 57,
      "score": 8.0,
      "candidate": "def max_sum_recursive(num):\n    if num == 0:\n        return 0\n    elif num == 1:\n        return 1\n    else:\n        return num + max_sum_recursive(num-1) + max_sum_recursive(num-2)\n\n\ndef max_sum_iterative(num):\n    if num == 0:\n        return 0\n    elif num == 1:\n        return 1\n    else:\n        return num + max_sum_iterative(num-1) + max_sum_iterative(num-2) + max_sum_iterative(num-3)\n\n\ndef main():\n    print(max_sum_iterative(5))\n    print(max_sum_iterative(5))\n    print(max_sum_iterative(0))\n    print(max_sum_iterative(0))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 58,
      "score": 8.0,
      "candidate": "def find_max_sum(num):\n    if num == 1:\n        return 1\n    elif num == 2:\n        return 2\n    else:\n        return max(find_max_sum(num - 1), find_max_sum(num - 2), find_max_sum(num - 3))\n\n\nprint(find_max_sum(10))"
    },
    {
      "rank": 59,
      "score": 8.0,
      "candidate": "def max_sum_of_three(num):\n    if num == 0:\n        return 0\n    elif num == 1:\n        return 1\n    elif num == 2:\n        return 2\n    elif num % 3 == 0:\n        return max_sum_of_three(num // 3) + max_sum_of_three(num // 3) + max_sum_of_three(num // 3)\n    else:\n        return max_sum_of_three(num // 3) + max_sum_of_three(num // 3) + max_sum_of_three(num // 3)\n\nif __name__ == \"__main__\":\n    assert max_sum_of_three(1) == 1\n    assert max_sum_of_three(2) == 2\n    assert max_sum_of_three(3) == 4\n    assert max_sum_of_three(4) == 8\n    assert max_sum_of_three(5) == 12\n    assert max_sum_of_three(6) == 18\n    assert max_sum_of_three(7) == 24\n    assert max_sum_of_three(8) == 36\n    assert max_sum_of_three(9) == 48\n    assert max_sum_of_three(10) == 72\n    assert max_sum_of_three(11) == 72\n    assert max_sum_of_three(12) == 96\n    assert max_sum_of_three(13) == 96\n    assert max_sum_of_three(14) == 144\n    assert max_sum_of_three(15) == 144\n    assert max_sum_of_three(16) == 144\n    assert max_sum_of_three(17) == 144\n    assert max_sum_of_three(18) == 144\n    assert max_sum_of_three(19) == 144\n    assert max_sum_of_three(20) == 144\n    assert max_sum_of_three(21) == 144\n    assert max_sum_of_three(22) == 144"
    },
    {
      "rank": 60,
      "score": 8.0,
      "candidate": "def max_sum(num):\n    if num == 0:\n        return 0\n    if num == 1:\n        return 1\n    if num == 2:\n        return 2\n    return max(num, max_sum(num-1) + max_sum(num-2) + max_sum(num-3))\n\nprint(max_sum(20))"
    },
    {
      "rank": 61,
      "score": 8.0,
      "candidate": "def max_sum_recursive(num):\n    if num == 0:\n        return 0\n    elif num == 1:\n        return 1\n    else:\n        return max(num % 3 + max_sum_recursive(num // 3), num % 5 + max_sum_recursive(num // 5))\n\n\ndef max_sum(num):\n    return max_sum_recursive(num)\n\n\nif __name__ == \"__main__\":\n    print(max_sum(3))"
    },
    {
      "rank": 62,
      "score": 8.0,
      "candidate": "def max_sum(n):\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n % 3 == 0:\n        return max(max_sum(n // 3), max_sum(n // 3 - 1), max_sum(n // 3 - 2)) + n\n    else:\n        return max_sum(n // 3) + max_sum(n // 3 - 1) + max_sum(n // 3 - 2)\n\n\nprint(max_sum(7))"
    },
    {
      "rank": 63,
      "score": 8.0,
      "candidate": "def max_sum_recursive(num):\n    if num == 0:\n        return 0\n    elif num == 1:\n        return 1\n    elif num == 2:\n        return 2\n    else:\n        return max(max_sum_recursive(num - 1), max_sum_recursive(num - 2), max_sum_recursive(num - 3))\n\n\ndef max_sum_iterative(num):\n    if num == 0:\n        return 0\n    elif num == 1:\n        return 1\n    elif num == 2:\n        return 2\n    else:\n        return max(max_sum_iterative(num - 1), max_sum_iterative(num - 2), max_sum_iterative(num - 3)) + num\n\n\nif __name__ == \"__main__\":\n    print(max_sum_recursive(7))\n    print(max_sum_iterative(7))"
    },
    {
      "rank": 64,
      "score": 8.0,
      "candidate": "def maximum_sum(n):\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    return max(maximum_sum(n-1), maximum_sum(n-2), maximum_sum(n-3))\n\nprint(maximum_sum(10))\nprint(maximum_sum(2))\nprint(maximum_sum(5))\nprint(maximum_sum(15))"
    },
    {
      "rank": 65,
      "score": 8.0,
      "candidate": "def max_sum(num):\n    if num == 0:\n        return 0\n    if num < 0:\n        return -1\n\n    if num % 3 == 0:\n        return num * max_sum(num // 3)\n    else:\n        return num * max_sum(num // 3) + max_sum(num // 3)\n\n\nprint(max_sum(10))\nprint(max_sum(5))\nprint(max_sum(1))"
    },
    {
      "rank": 66,
      "score": 8.0,
      "candidate": "def max_sum(n):\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 3\n    else:\n        return max_sum(n-1) + max_sum(n-2) + max_sum(n-3)\n\n\nprint(max_sum(1))\nprint(max_sum(2))\nprint(max_sum(3))\nprint(max_sum(4))\nprint(max_sum(5))\nprint(max_sum(6))\nprint(max_sum(7))\nprint(max_sum(8))\nprint(max_sum(9))\nprint(max_sum(10))"
    },
    {
      "rank": 67,
      "score": 8.0,
      "candidate": "def maximum_sum(n):\n    return _maximum_sum(n)\n\n\ndef _maximum_sum(n):\n    if n < 0:\n        return 0\n    elif n == 0:\n        return 1\n    else:\n        return max(_maximum_sum(n-1), _maximum_sum(n-2)) + n\n\n\nprint(maximum_sum(5))"
    },
    {
      "rank": 68,
      "score": 8.0,
      "candidate": "def max_sum(num):\n    if num <= 0:\n        return 0\n    elif num == 1:\n        return 1\n    elif num == 2:\n        return 2\n    else:\n        return max_sum(num - 1) + max_sum(num - 2) + max_sum(num - 3)\n\nprint(max_sum(10))"
    },
    {
      "rank": 69,
      "score": 8.0,
      "candidate": "def max_sum(n):\n    if n <= 1:\n        return n\n    return max(n, max_sum(n // 3) + max_sum(n // 2) + max_sum(n // 1))\n\n\nprint(max_sum(100))"
    },
    {
      "rank": 70,
      "score": 8.0,
      "candidate": "def max_sum_3_parts(num):\n    if num == 0:\n        return 0\n    elif num == 1:\n        return 1\n    else:\n        return max(num%3 + max_sum_3_parts(num//3), max_sum_3_parts(num//3))\n\n\nprint(max_sum_3_parts(5))"
    },
    {
      "rank": 71,
      "score": 8.0,
      "candidate": "def max_sum(n):\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n == 3:\n        return 3\n    return max(max_sum(n-1), max_sum(n-2), max_sum(n-3))\n\n\nprint(max_sum(5))"
    },
    {
      "rank": 72,
      "score": 8.0,
      "candidate": "def max_sum_recursive(number, max_sum, previous_sum):\n    if number == 1:\n        return max_sum\n    if number == 2:\n        return max_sum + previous_sum\n    if number == 3:\n        return max_sum + previous_sum + 3\n    previous_sum = max_sum\n    return max_sum_recursive(number - 1, max_sum + previous_sum, previous_sum)\n\ndef max_sum_iterative(number, max_sum):\n    for i in range(1, number):\n        if number % i == 0:\n            max_sum = max_sum_recursive(i, max_sum, 0)\n    return max_sum\n\nif __name__ == \"__main__\":\n    print(max_sum_iterative(2, 0))\n    print(max_sum_iterative(3, 0))\n    print(max_sum_iterative(4, 0))\n    print(max_sum_iterative(5, 0))\n    print(max_sum_iterative(6, 0))\n    print(max_sum_iterative(7, 0))\n    print(max_sum_iterative(8, 0))\n    print(max_sum_iterative(9, 0))\n    print(max_sum_iterative(10, 0))\n    print(max_sum_iterative(11, 0))\n    print(max_sum_iterative(12, 0))\n    print(max_sum_iterative(13, 0))\n    print(max_sum_iterative(14, 0))\n    print(max_sum_iterative(15, 0))\n    print(max_sum_iterative(16, 0))\n    print(max_sum_iterative(17, 0))\n    print(max_sum_iterative(18, 0))\n    print(max_sum_iterative(19, 0))\n    print(max_sum_iterative(20, 0))\n    print(max_sum_iterative(21, 0))\n    print(max_sum_iterative(22, 0))\n    print(max_sum_iterative(23, 0))\n    print(max_"
    },
    {
      "rank": 73,
      "score": 8.0,
      "candidate": "def max_sum_recursive(num):\n    if num == 0:\n        return 0\n    if num == 1:\n        return 1\n    if num == 2:\n        return 2\n    if num == 3:\n        return 3\n    return max(max_sum_recursive(num // 2), max_sum_recursive(num // 3), max_sum_recursive(num // 4)) + num\n\n\ndef max_sum_iterative(num):\n    if num == 0:\n        return 0\n    if num == 1:\n        return 1\n    if num == 2:\n        return 2\n    return max(max_sum_iterative(num // 2), max_sum_iterative(num // 3), max_sum_iterative(num // 4)) + num\n\n\ndef max_sum_recursive_iterative(num):\n    if num == 0:\n        return 0\n    if num == 1:\n        return 1\n    if num == 2:\n        return 2\n    return max(num, max_sum_iterative(num // 2), max_sum_iterative(num // 3), max_sum_iterative(num // 4)) + num\n\n\ndef main():\n    print(max_sum_iterative(0))\n    print(max_sum_recursive_iterative(0))\n\n\nmain()"
    },
    {
      "rank": 74,
      "score": 8.0,
      "candidate": "def max_sum(num):\n    if num == 0:\n        return 0\n    elif num == 1:\n        return 1\n    elif num == 2:\n        return 2\n    elif num % 2 == 0:\n        return max_sum(num // 2) + max_sum(num // 2 - 1) + max_sum(num // 2 + 1)\n    else:\n        return max_sum(num // 2) + max_sum(num // 2 - 1) + max_sum(num // 2 + 1) + max_sum(num // 3)\n\n\nprint(max_sum(10))"
    },
    {
      "rank": 75,
      "score": 8.0,
      "candidate": "def max_sum(n):\n    if n == 1:\n        return n\n    elif n == 2:\n        return n * 3\n    else:\n        return max_sum(n // 2) + max_sum(n // 3)\n\nprint(max_sum(5))"
    },
    {
      "rank": 76,
      "score": 8.0,
      "candidate": "def max_sum_recursive(num):\n    if num == 1:\n        return 1\n    elif num == 2:\n        return 2\n    elif num == 3:\n        return 3\n    else:\n        return max(num//3, max_sum_recursive(num//3)+3)\n\n\ndef max_sum_iterative(num):\n    max_sum = 0\n    if num == 1:\n        return 1\n    elif num == 2:\n        return 2\n    elif num == 3:\n        return 3\n    else:\n        for i in range(2, num//3+1):\n            if num % i == 0:\n                max_sum += i\n    return max_sum\n\n\nprint(max_sum_iterative(1))\nprint(max_sum_iterative(2))\nprint(max_sum_iterative(3))"
    },
    {
      "rank": 77,
      "score": 8.0,
      "candidate": "def max_sum(n):\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 4\n    else:\n        return max(max_sum(n//2), max_sum(n//3), max_sum(n//4))\n\nprint(max_sum(5))"
    },
    {
      "rank": 78,
      "score": 8.0,
      "candidate": "def max_sum_helper(num, curr_sum, curr_max_sum, curr_max_sum_2, curr_max_sum_3):\n    if num == 1:\n        return curr_sum\n    if num == 2:\n        return curr_sum + curr_max_sum\n    if num == 3:\n        return curr_sum + curr_max_sum_2 + curr_max_sum_3\n    return max(\n        max_sum_helper(num - 1, curr_sum + curr_max_sum, curr_max_sum, curr_max_sum_2, curr_max_sum_3),\n        max_sum_helper(num - 2, curr_sum + curr_max_sum_2, curr_max_sum, curr_max_sum_3, curr_max_sum_2),\n        max_sum_helper(num - 3, curr_sum + curr_max_sum_2, curr_max_sum, curr_max_sum_2, curr_max_sum_3)\n    )\n\ndef max_sum(num):\n    return max_sum_helper(num, 0, 0, 0, 0)\n\nprint(max_sum(5))\nprint(max_sum(7))\nprint(max_sum(11))\nprint(max_sum(13))\nprint(max_sum(17))"
    },
    {
      "rank": 79,
      "score": 8.0,
      "candidate": "def find_max_sum(num):\n    if num == 1:\n        return num\n    else:\n        return num + find_max_sum(num - 1)\n\n\nprint(find_max_sum(10))\nprint(find_max_sum(3))\nprint(find_max_sum(5))\nprint(find_max_sum(1))\nprint(find_max_sum(2))"
    },
    {
      "rank": 80,
      "score": 8.0,
      "candidate": "def max_sum_helper(n):\n    if n <= 1:\n        return n\n    return max(n, n * 3)\n\ndef max_sum(n):\n    return max_sum_helper(n)\n\n\nprint(max_sum(5))"
    },
    {
      "rank": 81,
      "score": 8.0,
      "candidate": "def max_sum(num):\n    if num == 0:\n        return 0\n    elif num == 1:\n        return 1\n    elif num == 2:\n        return 2\n\n    return max(max_sum(num//2), max_sum(num//3)) + num\n\nprint(max_sum(10))\nprint(max_sum(1))\nprint(max_sum(3))\nprint(max_sum(4))\nprint(max_sum(5))\nprint(max_sum(7))\nprint(max_sum(8))\nprint(max_sum(9))\nprint(max_sum(10))"
    },
    {
      "rank": 82,
      "score": 8.0,
      "candidate": "def max_sum_3_parts(n):\n    if n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    elif n == 3:\n        return 2\n    else:\n        return max(max_sum_3_parts(n - 1), max_sum_3_parts(n - 2), max_sum_3_parts(n - 3))\n\n\nif __name__ == \"__main__\":\n    print(max_sum_3_parts(3))\n    print(max_sum_3_parts(4))\n    print(max_sum_3_parts(5))\n    print(max_sum_3_parts(6))\n    print(max_sum_3_parts(7))\n    print(max_sum_3_parts(8))\n    print(max_sum_3_parts(9))"
    },
    {
      "rank": 83,
      "score": 8.0,
      "candidate": "def find_max_sum_recursive(number):\n    if number == 0:\n        return 0\n    if number == 1:\n        return 1\n    if number == 2:\n        return 2\n\n    # base case\n    if number % 3 == 0:\n        return find_max_sum_recursive(number // 3) + find_max_sum_recursive(number // 3) + find_max_sum_recursive(number // 3)\n\n    # recursive case\n    return max(find_max_sum_recursive(number // 3), find_max_sum_recursive(number // 3) + find_max_sum_recursive(number // 3))\n\n\nif __name__ == \"__main__\":\n    print(find_max_sum_recursive(1))\n    print(find_max_sum_recursive(2))\n    print(find_max_sum_recursive(3))\n    print(find_max_sum_recursive(4))\n    print(find_max_sum_recursive(5))\n    print(find_max_sum_recursive(6))\n    print(find_max_sum_recursive(7))"
    },
    {
      "rank": 84,
      "score": 8.0,
      "candidate": "def find_max_sum(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        return max(find_max_sum(n - 1), find_max_sum(n - 2), find_max_sum(n - 3))\n\n\nif __name__ == \"__main__\":\n    print(find_max_sum(0))\n    print(find_max_sum(1))\n    print(find_max_sum(2))\n    print(find_max_sum(3))\n    print(find_max_sum(4))\n    print(find_max_sum(5))\n    print(find_max_sum(6))\n    print(find_max_sum(7))\n    print(find_max_sum(8))\n    print(find_max_sum(9))\n    print(find_max_sum(10))"
    },
    {
      "rank": 85,
      "score": 8.0,
      "candidate": "def find_max_sum(n):\n    if n == 1:\n        return n\n    elif n == 2:\n        return 2\n    else:\n        return max(find_max_sum(n-1),find_max_sum(n-2)) + n\n\nprint(find_max_sum(10))\nprint(find_max_sum(5))\nprint(find_max_sum(3))\nprint(find_max_sum(7))\nprint(find_max_sum(2))\nprint(find_max_sum(1))"
    },
    {
      "rank": 86,
      "score": 8.0,
      "candidate": "class Solution(object):\n    def maxSum(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: int\n        \"\"\"\n        if num <= 2:\n            return num\n        return max(self.maxSum(num//3), self.maxSum(num//2), self.maxSum(num//1))"
    },
    {
      "rank": 87,
      "score": 1.0,
      "candidate": "class Solution:\n    def max_sum_three_parts(self, n: int) -> int:\n        if n == 1:\n            return 0\n        if n == 2:\n            return 1\n        if n == 3:\n            return 2\n        if n == 4:\n            return 3\n        if n == 5:\n            return 4\n        if n == 6:\n            return 5\n        if n == 7:\n            return 6\n        if n == 8:\n            return 7\n        if n == 9:\n            return 8\n        if n == 10:\n            return 9\n        if n == 11:\n            return 10\n\n        return self.max_sum_three_parts(n - 1) + self.max_sum_three_parts(n - 2) + self.max_sum_three_parts(n - 3)"
    },
    {
      "rank": 88,
      "score": 1.0,
      "candidate": "class Solution:\n    def maxSum3(self, n: int) -> int:\n        if n < 3:\n            return n\n        return max(self.maxSum3(n//3), self.maxSum3(n//2), self.maxSum3(n//1)) + n\n\n    def maxSum(self, n: int) -> int:\n        if n == 0:\n            return 0\n        return max(self.maxSum(n//3), self.maxSum(n//2), self.maxSum(n//1)) + n\n\n\nif __name__ == \"__main__\":\n    s = Solution()\n    print(s.maxSum(0))\n    print(s.maxSum(1))\n    print(s.maxSum(2))\n    print(s.maxSum(3))\n    print(s.maxSum(4))\n    print(s.maxSum(5))\n    print(s.maxSum(6))\n    print(s.maxSum(7))\n    print(s.maxSum(8))\n    print(s.maxSum(9))\n    print(s.maxSum(10))\n    print(s.maxSum(11))\n    print(s.maxSum(12))\n    print(s.maxSum(13))\n    print(s.maxSum(14))\n    print(s.maxSum(15))\n    print(s.maxSum(16))\n    print(s.maxSum(17))\n    print(s.maxSum(18))\n    print(s.maxSum(19))\n    print(s.maxSum(20))\n    print(s.maxSum(21))\n    print(s.maxSum(22))\n    print(s.maxSum(23))\n    print(s.maxSum(24))\n    print(s.maxSum(25))\n    print(s.maxSum(26))\n    print(s.maxSum(27))\n    print(s.maxSum(28))\n    print(s.maxSum(29))\n    print(s.maxSum(30))\n    print(s.maxSum(31))\n    print(s.maxSum(32))"
    },
    {
      "rank": 89,
      "score": 1.0,
      "candidate": "def max_sum_recursive(n):\n    if n <= 1:\n        return n\n    else:\n        return max_sum_recursive(n - 1) + max_sum_recursive(n - 2) + max_sum_recursive(n - 3)\n\n\ndef max_sum(n):\n    return max_sum_recursive(n)\n\n\nif __name__ == \"__main__\":\n    assert max_sum(1) == 1\n    assert max_sum(2) == 2\n    assert max_sum(3) == 6\n    assert max_sum(4) == 15\n    assert max_sum(5) == 21\n    assert max_sum(6) == 24\n    assert max_sum(7) == 30\n    assert max_sum(8) == 36\n    assert max_sum(9) == 42\n    assert max_sum(10) == 49\n    assert max_sum(11) == 56\n    assert max_sum(12) == 58\n    assert max_sum(13) == 64\n    assert max_sum(14) == 72\n    assert max_sum(15) == 80\n    assert max_sum(16) == 90\n    assert max_sum(17) == 96\n    assert max_sum(18) == 100\n    assert max_sum(19) == 144\n    assert max_sum(20) == 160\n    assert max_sum(21) == 182\n    assert max_sum(22) == 288\n    assert max_sum(23) == 384\n    assert max_sum(24) == 448\n    assert max_sum(25) == 576\n    assert max_sum(26) == 608\n    assert max_sum(27) == 664\n    assert max_sum(28) == 720\n    assert max_sum(29) == 832\n    assert max_sum(30) == 960\n    assert max_sum(31) == 1080\n    assert max_sum(32) == 1280\n    assert max_sum(33) == 1440\n    assert max_sum(34) == 1632\n    assert max_sum(35) == 1864\n    assert max_sum(36) == 2160\n    assert max"
    },
    {
      "rank": 90,
      "score": 1.0,
      "candidate": "class Solution(object):\n    def maxSum3(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        if n <= 1:\n            return n\n        else:\n            return max(self.maxSum3(n // 3), self.maxSum3(n // 2) + self.maxSum3(n))\n\n\nif __name__ == \"__main__\":\n    assert Solution().maxSum3(0) == 0\n    assert Solution().maxSum3(1) == 1\n    assert Solution().maxSum3(2) == 2\n    assert Solution().maxSum3(3) == 6\n    assert Solution().maxSum3(4) == 20"
    },
    {
      "rank": 91,
      "score": 1.0,
      "candidate": "class Solution:\n    def max_sum_three_parts(self, n: int) -> int:\n        if n < 3:\n            return n\n        return max(self.max_sum_three_parts(n-2), self.max_sum_three_parts(n-1), self.max_sum_three_parts(n-3))"
    },
    {
      "rank": 92,
      "score": 1.0,
      "candidate": "class Solution(object):\n    def max_sum_3parts(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: int\n        \"\"\"\n        if num == 0:\n            return 0\n        if num == 1:\n            return 1\n\n        # if the number is less than 3, it can be made by dividing it by 3 and adding up the result\n        if num % 3 == 0:\n            return self.max_sum_3parts(num // 3) + self.max_sum_3parts(num // 3) + self.max_sum_3parts(num // 3)\n\n        # if the number is greater than 3, it can be made by dividing it by 3 and adding up the result\n        if num % 3 == 1:\n            return self.max_sum_3parts(num // 3) + self.max_sum_3parts(num // 3) + self.max_sum_3parts(num // 3)\n\n        # if the number is even, it can be made by dividing it by 2 and adding up the result\n        if num % 2 == 0:\n            return self.max_sum_3parts(num // 2) + self.max_sum_3parts(num // 2) + self.max_sum_3parts(num // 2)\n\n        return num\n\n\nif __name__ == \"__main__\":\n    assert Solution().max_sum_3parts(3) == 6\n    assert Solution().max_sum_3parts(5) == 10\n    assert Solution().max_sum_3parts(2) == 2\n    assert Solution().max_sum_3parts(1) == 1"
    },
    {
      "rank": 93,
      "score": 1.0,
      "candidate": "def max_sum_recursive(n):\n    if n == 1:\n        return n\n    return max(max_sum_recursive(n // 3), max_sum_recursive(n // 2), max_sum_recursive(n // 1))\n\n\ndef max_sum_iterative(n):\n    return max(n, max_sum_recursive(n // 3), max_sum_recursive(n // 2), max_sum_recursive(n // 1))\n\n\nif __name__ == \"__main__\":\n    print(max_sum_iterative(10))\n    print(max_sum_iterative(20))\n    print(max_sum_iterative(30))\n    print(max_sum_iterative(40))\n    print(max_sum_iterative(50))"
    },
    {
      "rank": 94,
      "score": 1.0,
      "candidate": "def max_sum_recursive(num):\n    if num == 0:\n        return 0\n    elif num == 1:\n        return 1\n    elif num == 2:\n        return 2\n    else:\n        return max(num, max_sum_recursive(num - 1) + max_sum_recursive(num - 2))\n\n\ndef max_sum(num):\n    return max_sum_recursive(num)\n\n\ndef max_sum_recursion(num):\n    if num == 0:\n        return 0\n    elif num == 1:\n        return 1\n    elif num == 2:\n        return 2\n    else:\n        return max(num, max_sum_recursion(num - 1) + max_sum_recursion(num - 2))\n\n\ndef max_sum_recursion_2(num):\n    if num == 0:\n        return 0\n    elif num == 1:\n        return 1\n    elif num == 2:\n        return 2\n    else:\n        return max(num, max_sum_recursion_2(num - 1) + max_sum_recursion_2(num - 2))\n\n\nif __name__ == \"__main__\":\n    assert max_sum(0) == 0\n    assert max_sum(1) == 1\n    assert max_sum(2) == 2\n    assert max_sum(3) == 4\n    assert max_sum(4) == 8\n    assert max_sum(5) == 12\n    assert max_sum(6) == 16\n    assert max_sum(7) == 18\n    assert max_sum(8) == 20\n    assert max_sum(9) == 22\n    assert max_sum(10) == 28\n    assert max_sum(11) == 32\n    assert max_sum(12) == 36\n    assert max_sum(13) == 40\n    assert max_sum(14) == 48\n    assert max_sum(15) == 56\n    assert max_sum(16) == 64\n    assert max_sum(17) == 72\n    assert max_sum(18) == 84\n    assert max_sum(19) == 96\n    assert max_sum(20) == 100\n    assert max_sum(21) == 120"
    },
    {
      "rank": 95,
      "score": 1.0,
      "candidate": "def max_sum(n):\n    # base case\n    if n == 1:\n        return n\n\n    # recursive case\n    left = max_sum(n // 3)\n    right = max_sum(n // 3 - 1)\n    middle = max_sum(n // 3 - 2)\n    return max(left, right, middle) + n\n\n\nprint(max_sum(1))\nprint(max_sum(2))\nprint(max_sum(3))\nprint(max_sum(4))\nprint(max_sum(5))"
    },
    {
      "rank": 96,
      "score": 1.0,
      "candidate": "class Solution(object):\n    def maxSum3(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: int\n        \"\"\"\n        if num == 0:\n            return 0\n        if num == 1:\n            return 1\n        return max(self.maxSum3(num - 1), self.maxSum3(num - 2), self.maxSum3(num - 3))"
    },
    {
      "rank": 97,
      "score": 1.0,
      "candidate": "class Solution:\n    def maximumSum3(self, n: int) -> int:\n        if n == 0:\n            return 0\n        if n == 1:\n            return 1\n        if n == 2:\n            return 2\n\n        return self.maximumSum3(n-1)+self.maximumSum3(n-2)+self.maximumSum3(n-3)\n\nprint(Solution().maximumSum3(5))\nprint(Solution().maximumSum3(4))\nprint(Solution().maximumSum3(3))\nprint(Solution().maximumSum3(2))\nprint(Solution().maximumSum3(1))\nprint(Solution().maximumSum3(0))"
    },
    {
      "rank": 98,
      "score": 1.0,
      "candidate": "def max_sum(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return max(n, max_sum(n - 1) + max_sum(n - 2) + max_sum(n - 3))\n\n\nif __name__ == \"__main__\":\n    assert max_sum(0) == 0\n    assert max_sum(1) == 1\n    assert max_sum(2) == 2\n    assert max_sum(3) == 6\n    assert max_sum(4) == 10\n    assert max_sum(5) == 18\n    assert max_sum(6) == 36\n    assert max_sum(7) == 60\n    assert max_sum(8) == 36\n    assert max_sum(9) == 36\n    assert max_sum(10) == 36\n    assert max_sum(11) == 36\n    assert max_sum(12) == 36\n    assert max_sum(13) == 36\n    assert max_sum(14) == 36\n    assert max_sum(15) == 36\n    assert max_sum(16) == 36\n    assert max_sum(17) == 36\n    assert max_sum(18) == 36\n    assert max_sum(19) == 36\n    assert max_sum(20) == 36\n    assert max_sum(21) == 36\n    assert max_sum(22) == 36\n    assert max_sum(23) == 36\n    assert max_sum(24) == 36\n    assert max_sum(25) == 36\n    assert max_sum(26) == 36\n    assert max_sum(27) == 36\n    assert max_sum(28) == 36\n    assert max_sum(29) == 36\n    assert max_sum(30) == 36\n    assert max_sum(31) == 36\n    assert max_sum(32) == 36\n    assert max_sum(33) == 36\n    assert max_sum(34) == 36\n    assert max_sum(35) == 36\n    assert max_sum(36) == 36\n    assert max_sum(37) == 36\n    assert max_sum(38) == 36"
    },
    {
      "rank": 99,
      "score": 1.0,
      "candidate": "class Solution:\n    def maximumSum(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: int\n        \"\"\"\n        if num == 0:\n            return 0\n\n        if num == 1:\n            return 1\n\n        if num == 2:\n            return 2\n\n        if num % 3 == 0:\n            return 3\n\n        if num % 3 == 1:\n            return 5\n\n        if num % 3 == 2:\n            return 7\n\n        if num % 3 == 3:\n            return 11\n\n        if num % 3 == 4:\n            return 13\n\n        if num % 3 == 5:\n            return 17\n\n        if num % 3 == 6:\n            return 19\n\n        if num % 3 == 7:\n            return 23\n\n        return 29"
    },
    {
      "rank": 100,
      "score": 1.0,
      "candidate": "class Solution:\n    def maxSum(self, n: int) -> int:\n        if n == 1:\n            return 1\n        elif n == 2:\n            return 2\n        elif n == 3:\n            return 4\n\n        if n % 3 == 0:\n            return self.maxSum(n / 3) + self.maxSum(n / 3 - 1) + self.maxSum(n / 3 - 2)\n        else:\n            return self.maxSum(n / 3) + self.maxSum(n / 3 - 1) + self.maxSum(n / 3 - 2) + self.maxSum(n / 3)"
    }
  ]
}