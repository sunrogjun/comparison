{
  "timestamp": "2025-09-14T12:41:40.491023",
  "method": "improved_llm_judge",
  "judge_model": "codellama/CodeLlama-7b-Python-hf",
  "target_model": "codet5-770m",
  "dataset": "mbpp",
  "problem_number": 30,
  "total_candidates": 100,
  "results": [
    {
      "rank": 1,
      "score": 10.0,
      "candidate": "even_num = lambda n: n % 2 == 0\n\nprint(list(filter(even_num, [1, 2, 3, 4, 5])))"
    },
    {
      "rank": 2,
      "score": 10.0,
      "candidate": "def filter_even(n):\n    return lambda x: x%2==0\n\nprint(list(filter_even(3)))\nprint(list(filter_even(5)))\nprint(list(filter_even(7)))\nprint(list(filter_even(10)))\nprint(list(filter_even(11)))\nprint(list(filter_even(13)))\nprint(list(filter_even(15)))"
    },
    {
      "rank": 3,
      "score": 10.0,
      "candidate": "filter_even = lambda num: num % 2 == 0\n\nfor num in range(1, 51):\n    if filter_even(num):\n        print(num)"
    },
    {
      "rank": 4,
      "score": 10.0,
      "candidate": "def even_numbers(n):\n    return lambda x: x%2==0\n\nprint(list(filter(even_numbers, [1,2,3,4,5,6,7,8,9,10])))"
    },
    {
      "rank": 5,
      "score": 10.0,
      "candidate": "def even_numbers(n):\n    return filter(lambda x: x % 2 == 0, range(n))\n\nprint(list(even_numbers(10)))"
    },
    {
      "rank": 6,
      "score": 10.0,
      "candidate": "def even_numbers(number):\n    return lambda x: x % 2 == 0\n\n\nfor i in range(1, 11):\n    print(i, \"->\", list(filter(even_numbers(i), range(1, 11))))"
    },
    {
      "rank": 7,
      "score": 10.0,
      "candidate": "def even_numbers(nums):\n    return filter(lambda x: x % 2 == 0, nums)\n\nprint(list(even_numbers([1, 2, 3, 4, 5, 6, 7, 8, 9])))"
    },
    {
      "rank": 8,
      "score": 10.0,
      "candidate": "numbers = [x for x in range(1, 10) if x % 2 == 0]\nprint(numbers)"
    },
    {
      "rank": 9,
      "score": 10.0,
      "candidate": "import unittest\n\ndef filter_even(numbers):\n    return list(filter(lambda x: x % 2 == 0, numbers))\n\nclass Test(unittest.TestCase):\n\n    def test_filter_even(self):\n        self.assertEqual(filter_even([1, 2, 3, 4, 5]), [1, 2, 3, 4, 5])\n        self.assertEqual(filter_even([1, 2, 3, 4]), [1, 2, 3, 4])\n        self.assertEqual(filter_even([]), [])\n\nif __name__ == '__main__':\n    unittest.main()"
    },
    {
      "rank": 10,
      "score": 10.0,
      "candidate": "def even_numbers(x):\n    return x % 2 == 0\n\neven_numbers(int(input(\"Enter a number: \")))"
    },
    {
      "rank": 11,
      "score": 10.0,
      "candidate": "def filter_even(nums):\n    return list(filter(lambda x: x % 2 == 0, nums))\n\nprint(filter_even([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))"
    },
    {
      "rank": 12,
      "score": 10.0,
      "candidate": "def even_numbers():\n    \"\"\"\n    The even numbers function\n    \"\"\"\n    return filter(lambda x: x % 2 == 0, range(1, 1001))\n\n\nprint(list(even_numbers()))"
    },
    {
      "rank": 13,
      "score": 10.0,
      "candidate": "even_numbers = lambda x: x%2 == 0\n\nprint(list(filter(even_numbers, range(1, 11))))"
    },
    {
      "rank": 14,
      "score": 10.0,
      "candidate": "even_numbers = list(filter(lambda x: x % 2 == 0, range(1, 20)))\nprint(even_numbers)"
    },
    {
      "rank": 15,
      "score": 10.0,
      "candidate": "def even_numbers(n):\n    return lambda x: x % 2 == 0\n\n\nprint(list(filter(even_numbers(4), range(1, 100))))"
    },
    {
      "rank": 16,
      "score": 10.0,
      "candidate": "def even_filter(l: list):\n    return list(filter(lambda x: x % 2 == 0, l))\n\n\nprint(even_filter([1, 2, 3, 4, 5, 6, 7, 8, 9]))"
    },
    {
      "rank": 17,
      "score": 10.0,
      "candidate": "def even_filter(num):\n    return lambda x: x % 2 == 0\n\ndef main():\n    even_numbers = filter(even_filter, range(10))\n    for x in even_numbers:\n        print(x)\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 18,
      "score": 10.0,
      "candidate": "# Function to filter even numbers\nfilter_even = lambda x: x % 2 == 0\n\n# Function to filter odd numbers\nfilter_odd = lambda x: x % 2 == 1\n\n# Function to filter all even numbers\nfilter_all_even = lambda x: x % 2 == 0 and x % 3 == 0\n\n# Function to filter all odd numbers\nfilter_all_odd = lambda x: x % 2 == 1 and x % 3 == 1\n\n# Function to print all even numbers\nprint(list(filter(filter_even, range(1, 11))))\n\n# Function to print all odd numbers\nprint(list(filter(filter_odd, range(1, 11))))\n\n# Function to print all even numbers and odd numbers\nprint(list(filter(filter_all_even, range(1, 11))))\n\n# Function to print all odd numbers and even numbers\nprint(list(filter(filter_all_odd, range(1, 11))))"
    },
    {
      "rank": 19,
      "score": 10.0,
      "candidate": "def even_numbers(n):\n    return filter(lambda x: x%2 == 0, range(n))\n\nprint(list(even_numbers(20)))"
    },
    {
      "rank": 20,
      "score": 10.0,
      "candidate": "even_numbers = [num for num in range(1, 101) if num % 2 == 0]\n\nprint(even_numbers)\n\n# output: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]"
    },
    {
      "rank": 21,
      "score": 10.0,
      "candidate": "numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\n# filter function\neven_numbers = filter(lambda n: n % 2 == 0, numbers)\n\n# print the numbers\nprint(list(even_numbers))"
    },
    {
      "rank": 22,
      "score": 10.0,
      "candidate": "list_num = [2, 4, 6, 8, 10, 12]\n\nprint(list(filter(lambda num: num % 2 == 0, list_num)))"
    },
    {
      "rank": 23,
      "score": 10.0,
      "candidate": "def even_numbers(num):\n    return num % 2 == 0\n\nprint(list(filter(even_numbers, [1, 2, 3, 4, 5])))"
    },
    {
      "rank": 24,
      "score": 10.0,
      "candidate": "def even(n):\n    if n % 2 == 0:\n        return True\n\n\neven_numbers = filter(even, range(1, 11))\nfor number in even_numbers:\n    print(number)"
    },
    {
      "rank": 25,
      "score": 10.0,
      "candidate": "even_numbers = filter(lambda n: n % 2 == 0, range(1, 31))\n\nfor n in even_numbers:\n    print(n)"
    },
    {
      "rank": 26,
      "score": 10.0,
      "candidate": "def even_numbers(num):\n    return filter(lambda x: x % 2 == 0, range(num))\n\n\nprint(list(even_numbers(1)))\nprint(list(even_numbers(2)))"
    },
    {
      "rank": 27,
      "score": 10.0,
      "candidate": "def even_numbers(n):\n    return n % 2 == 0\n\n\nprint(list(filter(even_numbers, range(1, 101))))"
    },
    {
      "rank": 28,
      "score": 10.0,
      "candidate": "def even_numbers(num):\n    return lambda x: x % 2 == 0\n\n\nfor i in range(1, 31):\n    print(i, end=' ')\n    print(list(filter(even_numbers(i), range(1, 31))))\n    print()"
    },
    {
      "rank": 29,
      "score": 10.0,
      "candidate": "def even(n):\n    return n % 2 == 0\n\nprint(list(filter(even, range(1, 21))))\n\n#print(list(filter(lambda n: n % 2 == 0, range(1, 21))))"
    },
    {
      "rank": 30,
      "score": 10.0,
      "candidate": "numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n\neven_numbers = filter(lambda x: x % 2 == 0, numbers)\nprint(list(even_numbers))"
    },
    {
      "rank": 31,
      "score": 10.0,
      "candidate": "def even_numbers(n):\n    return n % 2 == 0\n\nprint(list(filter(even_numbers, [1, 2, 3, 4, 5, 6, 7, 8, 9])))"
    },
    {
      "rank": 32,
      "score": 9.0,
      "candidate": "even_numbers = filter(lambda num: num % 2 == 0, range(10))\nprint(list(even_numbers))\n\n\"\"\"\nOutput:\n[2, 4, 6, 8]\n\"\"\""
    },
    {
      "rank": 33,
      "score": 9.0,
      "candidate": "even_numbers = list(filter(lambda n: n % 2 == 0, range(1, 101)))\nprint(even_numbers)"
    },
    {
      "rank": 34,
      "score": 9.0,
      "candidate": "even = lambda x: x % 2 == 0\n\nprint(list(filter(even, range(1, 101))))"
    },
    {
      "rank": 35,
      "score": 9.0,
      "candidate": "numbers = list(filter(lambda x: x % 2 == 0, range(1, 101)))\nprint(numbers)"
    },
    {
      "rank": 36,
      "score": 9.0,
      "candidate": "def even_numbers(num):\n    return (num % 2) == 0\n\n\nprint(list(filter(even_numbers, [2, 4, 6, 8, 10, 12, 14])))"
    },
    {
      "rank": 37,
      "score": 9.0,
      "candidate": "filter_even = lambda x: x % 2 == 0\n\nprint(list(filter(filter_even, range(1, 11))))"
    },
    {
      "rank": 38,
      "score": 9.0,
      "candidate": "def even_numbers(num):\n    return filter(lambda x: x%2 == 0, num)\n\nprint(even_numbers(range(1, 10)))"
    },
    {
      "rank": 39,
      "score": 8.0,
      "candidate": "import operator\n\ndef even_numbers(n):\n    return lambda x: x % 2 == 0\n\nprint(list(filter(even_numbers(4), range(1, 11))))"
    },
    {
      "rank": 40,
      "score": 8.0,
      "candidate": "even = lambda num: num % 2 == 0\n\nprint(list(filter(even, range(1, 11))))"
    },
    {
      "rank": 41,
      "score": 8.0,
      "candidate": "even_numbers = list(filter(lambda x: x % 2 == 0, range(1, 100)))\nprint(even_numbers)"
    },
    {
      "rank": 42,
      "score": 8.0,
      "candidate": "even_numbers = [i for i in range(1, 101) if i % 2 == 0]\nprint(even_numbers)"
    },
    {
      "rank": 43,
      "score": 8.0,
      "candidate": "even_numbers = [x for x in range(1, 101) if x % 2 == 0]\nprint(even_numbers)"
    },
    {
      "rank": 44,
      "score": 8.0,
      "candidate": "even_numbers = filter(lambda x: x % 2 == 0, range(1, 101))\nprint(list(even_numbers))"
    },
    {
      "rank": 45,
      "score": 8.0,
      "candidate": "import unittest\n\ndef even_filter(number):\n    return number % 2 == 0\n\n\nclass Test(unittest.TestCase):\n\n    def test_even_filter(self):\n        self.assertEqual(even_filter(1), False)\n        self.assertEqual(even_filter(2), True)\n        self.assertEqual(even_filter(3), False)\n        self.assertEqual(even_filter(4), True)\n        self.assertEqual(even_filter(5), False)\n        self.assertEqual(even_filter(6), True)\n        self.assertEqual(even_filter(7), False)\n        self.assertEqual(even_filter(8), True)\n        self.assertEqual(even_filter(9), False)\n        self.assertEqual(even_filter(10), True)\n        self.assertEqual(even_filter(11), False)\n        self.assertEqual(even_filter(12), True)\n        self.assertEqual(even_filter(13), True)\n        self.assertEqual(even_filter(14), True)\n        self.assertEqual(even_filter(15), False)\n        self.assertEqual(even_filter(16), False)\n        self.assertEqual(even_filter(17), True)\n        self.assertEqual(even_filter(18), True)\n        self.assertEqual(even_filter(19), False)\n        self.assertEqual(even_filter(20), True)\n        self.assertEqual(even_filter(21), True)\n        self.assertEqual(even_filter(22), False)\n        self.assertEqual(even_filter(23), False)\n        self.assertEqual(even_filter(24), False)\n        self.assertEqual(even_filter(25), False)\n        self.assertEqual(even_filter(26), False)\n        self.assertEqual(even_filter(27), False)\n        self.assertEqual(even_filter(28), False)\n        self.assertEqual(even_filter(29), True)\n        self.assertEqual(even_filter(30), False)\n        self.assertEqual(even_filter(31), False)"
    },
    {
      "rank": 46,
      "score": 8.0,
      "candidate": "numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n\neven_numbers = filter(lambda x: x % 2 == 0, numbers)\n\nprint(list(even_numbers))"
    },
    {
      "rank": 47,
      "score": 8.0,
      "candidate": "numbers = list(range(1, 11))\nprint(numbers)\n\neven_numbers = filter(lambda x: x % 2 == 0, numbers)\nprint(even_numbers)"
    },
    {
      "rank": 48,
      "score": 8.0,
      "candidate": "numbers = [1, 2, 3, 4, 5]\n\neven_numbers = filter(lambda n: n % 2 == 0, numbers)\nprint(list(even_numbers))"
    },
    {
      "rank": 49,
      "score": 8.0,
      "candidate": "def even(num):\n    return num % 2 == 0\n\ndef even_filter(num):\n    return list(filter(even, num))\n\nprint(even_filter(range(1, 10)))"
    },
    {
      "rank": 50,
      "score": 8.0,
      "candidate": "def even_numbers():\n    even_numbers = filter(lambda x: x % 2 == 0, range(10))\n    print(list(even_numbers))\n\neven_numbers()"
    },
    {
      "rank": 51,
      "score": 8.0,
      "candidate": "def even_numbers(n):\n    return filter(lambda x: x % 2 == 0, range(n))\n\nprint(list(even_numbers(10)))"
    },
    {
      "rank": 52,
      "score": 8.0,
      "candidate": "even_numbers = list(filter(lambda x: x % 2 == 0, range(1, 101)))\nprint(even_numbers)"
    },
    {
      "rank": 53,
      "score": 8.0,
      "candidate": "def even_numbers(n):\n    return filter(lambda x: x % 2 == 0, range(n))\n\n\nprint(list(even_numbers(10)))"
    },
    {
      "rank": 54,
      "score": 8.0,
      "candidate": "def even_numbers(num):\n    return filter(lambda x: x % 2 == 0, num)\n\nprint(list(even_numbers(int(input(\"Enter a number: \")))))"
    },
    {
      "rank": 55,
      "score": 8.0,
      "candidate": "def even_numbers(n):\n    return [x for x in range(n) if x % 2 == 0]\n\nprint(even_numbers(6))\nprint(even_numbers(0))\nprint(even_numbers(1))\nprint(even_numbers(2))\nprint(even_numbers(4))\nprint(even_numbers(8))"
    },
    {
      "rank": 56,
      "score": 8.0,
      "candidate": "even_numbers = list(filter(lambda x: x % 2 == 0, [1, 2, 3, 4, 5]))\nprint(even_numbers)"
    },
    {
      "rank": 57,
      "score": 8.0,
      "candidate": "even_numbers = list(filter(lambda n: n % 2 == 0, range(1, 21)))\nprint(even_numbers)"
    },
    {
      "rank": 58,
      "score": 8.0,
      "candidate": "even_numbers = filter(lambda x: x % 2 == 0, range(1, 100))\n\nfor number in even_numbers:\n    print(number)"
    },
    {
      "rank": 59,
      "score": 8.0,
      "candidate": "def even_numbers(n):\n    return [x for x in range(n) if x % 2 == 0]\n\nprint(even_numbers(5))"
    },
    {
      "rank": 60,
      "score": 8.0,
      "candidate": "def even_number(number):\n    return number % 2 == 0\n\neven_numbers = list(filter(even_number, range(1, 50)))\nprint(even_numbers)"
    },
    {
      "rank": 61,
      "score": 8.0,
      "candidate": "even_numbers = [num for num in range(1, 101) if num % 2 == 0]\nprint(even_numbers)\n\n\ndef even_numbers_filter(num):\n    return num % 2 == 0\n\n\neven_numbers = filter(even_numbers_filter, range(1, 101))\nprint(even_numbers)"
    },
    {
      "rank": 62,
      "score": 8.0,
      "candidate": "even_numbers = list(filter(lambda x: x % 2 == 0, [1, 2, 3, 4, 5]))\nprint(even_numbers)\n\n\"\"\"\nOutput:\n[1, 2, 3, 4]\n\"\"\""
    },
    {
      "rank": 63,
      "score": 8.0,
      "candidate": "numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n\neven_numbers = list(filter(lambda x: x % 2 == 0, numbers))\nprint(even_numbers)"
    },
    {
      "rank": 64,
      "score": 8.0,
      "candidate": "even_numbers = [x for x in range(1, 11) if x % 2 == 0]\nprint(even_numbers)\n\n\ndef even_numbers_filter(num):\n    return [x for x in range(1, num) if x % 2 == 0]\n\n\neven_numbers_filter(10)"
    },
    {
      "rank": 65,
      "score": 8.0,
      "candidate": "def even_numbers(num):\n    return num % 2 == 0\n\neven_numbers(5)"
    },
    {
      "rank": 66,
      "score": 8.0,
      "candidate": "even_numbers = [x for x in range(1,101) if x % 2 == 0]\n\nprint(even_numbers)"
    },
    {
      "rank": 67,
      "score": 8.0,
      "candidate": "list = [1,2,3,4,5,6,7,8,9,10]\nprint(list)\n\neven = list(filter(lambda x: x % 2 == 0, list))\nprint(even)"
    },
    {
      "rank": 68,
      "score": 8.0,
      "candidate": "def filter_even(n):\n    return lambda x: x % 2 == 0\n\nprint(list(filter(filter_even, range(1,11))))"
    },
    {
      "rank": 69,
      "score": 8.0,
      "candidate": "even = lambda x: x % 2 == 0\n\nprint(list(filter(even, range(1, 101))))"
    },
    {
      "rank": 70,
      "score": 8.0,
      "candidate": "def even_numbers(number):\n    return lambda x: x % 2 == 0\n\nprint(list(filter(even_numbers(10), range(1, 11))))\nprint(list(filter(lambda x: x % 2 == 0, range(1, 11))))"
    },
    {
      "rank": 71,
      "score": 8.0,
      "candidate": "def filter_even(l):\n    return list(filter(lambda x: x%2==0, l))\n\nprint(filter_even([1,2,3,4,5,6]))"
    },
    {
      "rank": 72,
      "score": 8.0,
      "candidate": "def even_filter(number):\n    return lambda x: x % 2 == 0\n\nprint(list(filter(even_filter, range(1,11))))"
    },
    {
      "rank": 73,
      "score": 8.0,
      "candidate": "even_numbers = list(filter(lambda num: num % 2 == 0, range(1, 101)))\nprint(even_numbers)"
    },
    {
      "rank": 74,
      "score": 8.0,
      "candidate": "# filter even numbers\ndef even_numbers(list):\n    return list(filter(lambda x: x % 2 == 0, list))\n\n# test\nlist = [1, 2, 3, 4, 5]\nprint(even_numbers(list))"
    },
    {
      "rank": 75,
      "score": 8.0,
      "candidate": "def even_numbers(n):\n    return filter(lambda x: x%2==0, range(1,n+1))\n\n\nprint(list(even_numbers(10)))"
    },
    {
      "rank": 76,
      "score": 8.0,
      "candidate": "def even_numbers(num):\n    return num % 2 == 0\n\neven_numbers_list = list(filter(even_numbers, range(1, 101)))\nprint(even_numbers_list)"
    },
    {
      "rank": 77,
      "score": 8.0,
      "candidate": "even_numbers = list(filter(lambda x: x % 2 == 0, range(1, 21)))\nprint(even_numbers)"
    },
    {
      "rank": 78,
      "score": 8.0,
      "candidate": "even_numbers = list(filter(lambda x: x % 2 == 0, range(1, 100)))\nprint(even_numbers)"
    },
    {
      "rank": 79,
      "score": 8.0,
      "candidate": "from functools import reduce\n\n\ndef filter_even(number):\n    return filter(lambda x: x % 2 == 0, number)\n\n\nprint(list(filter_even(range(1, 101))))"
    },
    {
      "rank": 80,
      "score": 8.0,
      "candidate": "def even_numbers(n):\n    return n % 2 == 0\n\n\nprint(list(filter(even_numbers, [1, 2, 3, 4, 5, 6, 7, 8, 9])))"
    },
    {
      "rank": 81,
      "score": 8.0,
      "candidate": "even_numbers = list(filter(lambda x: x % 2 == 0, range(1,101)))\n\nprint(even_numbers)"
    },
    {
      "rank": 82,
      "score": 8.0,
      "candidate": "def even_numbers(n):\n    return n % 2 == 0\n\nprint(list(filter(even_numbers, range(1, 21))))"
    },
    {
      "rank": 83,
      "score": 8.0,
      "candidate": "def even_numbers(n):\n    return filter(lambda x: x % 2 == 0, range(n))\n\nprint(list(even_numbers(10)))"
    },
    {
      "rank": 84,
      "score": 8.0,
      "candidate": "def even_filter(my_list):\n    return list(filter(lambda x: x%2==0, my_list))\n\nprint(even_filter([1,2,3,4,5,6]))"
    },
    {
      "rank": 85,
      "score": 8.0,
      "candidate": "even_numbers = [\n    n for n in range(1, 101) if n % 2 == 0\n]\nprint(even_numbers)"
    },
    {
      "rank": 86,
      "score": 8.0,
      "candidate": "even_numbers = list(filter(lambda x: x%2 == 0, range(1,101)))\nprint(even_numbers)"
    },
    {
      "rank": 87,
      "score": 8.0,
      "candidate": "def filter_even(numbers):\n    return list(filter(lambda x: x % 2 == 0, numbers))\n\n\ndef main():\n    numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    print(list(filter_even(numbers)))\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 88,
      "score": 8.0,
      "candidate": "even_numbers = filter(lambda x: x % 2 == 0, range(10))\nprint(list(even_numbers))\n\n\"\"\"\nSample I/O:\n\nInput:\n10\nOutput:\n[0, 2, 4, 6, 8, 10]\n\nInput:\n5\nOutput:\n[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nTime Complexity: O(log n)\nSpace Complexity: O(1)\n\"\"\""
    },
    {
      "rank": 89,
      "score": 8.0,
      "candidate": "def even_numbers(num):\n    return filter(lambda x: x%2 == 0, range(num))\n\nprint(list(even_numbers(10)))"
    },
    {
      "rank": 90,
      "score": 1.0,
      "candidate": "numbers = [x for x in range(1, 101) if x % 2 == 0]\nprint(numbers)\n\n# O(1) time | O(1) space\n\n# O(n) time | O(1) space\n\n\n# filter even numbers using lambda function\n\nnumbers = [x for x in range(1, 101) if x % 2 == 0]\nprint(numbers)\n\n# O(n) time | O(1) space\n\n\n# filter even numbers using lambda function\n\nnumbers = [x for x in range(1, 101) if x % 2!= 0]\nprint(numbers)\n\n# O(n) time | O(1) space"
    },
    {
      "rank": 91,
      "score": 1.0,
      "candidate": "even_numbers = [x for x in range(1, 21) if x % 2 == 0]\nprint(even_numbers)\n\n\n# \u5c06list\u7684\u6570\u636e\u7ed9\u51fd\u6570\u52a0\u5165\u5230\u5176\u51fd\u6570\u7684\u5217\u8868\u4e2d\neven_numbers = [x for x in range(1, 21) if x % 2 == 0]\nprint(even_numbers)\n\n\n# \u5c06\u5217\u8868\u52a0\u5165\u51fd\u6570\u52a0\u5165\u5230\u5176\u51fd\u6570\u7684\u5217\u8868\u4e2d\neven_numbers = [x for x in range(1, 21) if x % 2 == 0]\nprint(even_numbers)\n\n\n# \u5c06\u5217\u8868\u52a0\u5165\u51fd\u6570\u52a0\u5165\u5230\u5176\u51fd\u6570\u7684\u5217\u8868\u4e2d\neven_numbers = [x for x in range(1, 21) if x % 2 == 0]\nprint(even_numbers)\n\n\n# \u5c06\u5217\u8868\u52a0\u5165\u51fd\u6570\u52a0\u5165\u5230\u5176\u51fd\u6570\u7684\u5217\u8868\u4e2d\neven_numbers = [x for x in range(1, 21) if x % 2 == 0]\nprint(even_numbers)\n\n\n# \u5c06\u5217\u8868\u52a0\u5165\u51fd\u6570\u52a0\u5165\u5230\u5176\u51fd\u6570\u7684\u5217\u8868\u4e2d\neven_numbers = [x for x in range(1, 21) if x % 2 == 0]\nprint(even_numbers)\n\n\n# \u5c06\u5217\u8868\u52a0\u5165\u51fd\u6570\u52a0\u5165\u5230\u5176\u51fd\u6570\u7684\ufffd"
    },
    {
      "rank": 92,
      "score": 1.0,
      "candidate": "def filter_even(number):\n    return filter(lambda x: x % 2 == 0, number)\n\n\nprint(list(filter_even(range(0, 100, 2))))"
    },
    {
      "rank": 93,
      "score": 1.0,
      "candidate": "even_numbers = [x for x in range(1, 51) if x % 2 == 0]\nprint(even_numbers)\n\neven_numbers = [x for x in range(1, 51) if x % 2 == 0]\nprint(even_numbers)\n\neven_numbers = [x for x in range(1, 51) if x % 2 == 0]\nprint(even_numbers)\n\neven_numbers = [x for x in range(1, 51) if x % 2 == 0]\nprint(even_numbers)\n\neven_numbers = [x for x in range(1, 51) if x % 2 == 0]\nprint(even_numbers)\n\neven_numbers = [x for x in range(1, 51) if x % 2 == 0]\nprint(even_numbers)\n\neven_numbers = [x for x in range(1, 51) if x % 2 == 0]\nprint(even_numbers)\n\neven_numbers = [x for x in range(1, 51) if x % 2 == 0]\nprint(even_numbers)\n\neven_numbers = [x for x in range(1, 51) if x % 2 == 0]\nprint(even_numbers)\n\neven_numbers = [x for x in range(1, 51) if x % 2 == 0]\nprint(even_numbers)\n\neven_numbers = [x for x in range(1, 51) if x % 2 == 0]\nprint(even_numbers)\n\neven_numbers = [x for x in range(1, 51) if x % 2 == 0]\nprint(even_numbers)\n\neven_numbers = [x for x in range(1, 51) if x % 2 == 0]\nprint(even_numbers)\n\neven_numbers = [x for x in range(1, 51) if x % 2 == 0]\nprint(even_numbers)\n\neven_numbers = [x for x in range(1, 51) if x % 2 == 0]\nprint(even_numbers)\n\neven_numbers = [x for x in range(1, 51) if x % 2 == 0]\nprint(even_numbers)\n\neven_numbers = [x for x in range(1,"
    },
    {
      "rank": 94,
      "score": 1.0,
      "candidate": "list_number = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 175, 176, 177, 178, 179, 181, 182, 183, 184, 185, 186, 187, 189, 190, 191, 192, 193, 195, 196, 197, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 2"
    },
    {
      "rank": 95,
      "score": 1.0,
      "candidate": "from typing import Callable\n\n\ndef filter_even(number: int) -> Callable:\n    return lambda x: x % 2 == 0\n\n\nprint(filter_even(2))\nprint(filter_even(3))\nprint(filter_even(4))"
    },
    {
      "rank": 96,
      "score": 1.0,
      "candidate": "filter_even = lambda num: num % 2 == 0\n\nprint(list(filter(filter_even, [1, 2, 3, 4, 5])))\n\n\"\"\"\nOutput:\n[1, 2, 3, 4, 5]\n\"\"\""
    },
    {
      "rank": 97,
      "score": 1.0,
      "candidate": "# solution\ndef even_numbers(n):\n    return list(filter(lambda x: x%2==0, range(n)))\n\nprint(even_numbers(100))"
    },
    {
      "rank": 98,
      "score": 1.0,
      "candidate": "# Write a function that filter even numbers using lambda function.\n#\n# Example:\n#\n# filter_even(filter_even, [1, 2, 3, 4, 5])\n# should return [2, 3, 4, 5]\n#\n# filter_even(filter_even, [1, 2, 3, 4, 5, 6, 7, 8, 9])\n# should return [1, 2, 3, 4, 5, 6, 7, 8, 9]\n#\n# filter_even(filter_even, [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n# should return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\n# Write a function that filter even numbers using lambda function.\n#\n# Example:\n#\n# filter_even(filter_even, [1, 2, 3, 4, 5])\n# should return [1, 2, 3, 4, 5]\n#\n# filter_even(filter_even, [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n# should return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n#\n# filter_even(filter_even, [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n# should return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n#\n# filter_even(filter_even, [1, 2, 3, 4, 5])\n# should return [1, 2, 3, 4, 5]\n#\n# filter_even(filter_even, [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n# should return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\n# Write a function that filter even numbers using lambda function.\n#\n# Example:\n#\n# filter_even(filter_even, [1, 2, 3, 4, 5])\n# should return [1, 2, 3, 4, 5]\n#\n# filter_even(filter_even, [1,"
    },
    {
      "rank": 99,
      "score": 1.0,
      "candidate": "even_numbers = [x for x in range(1, 101) if x % 2 == 0]\nprint(even_numbers)\n\n\ndef even_numbers_filter(list):\n    return list(filter(lambda x: x % 2 == 0, list))\n\n\nprint(even_numbers_filter([1, 2, 3, 4, 5, 6, 7, 8, 9]))"
    },
    {
      "rank": 100,
      "score": 1.0,
      "candidate": "def even_filter(nums):\n    return list(filter(lambda num: num % 2 == 0, nums))\n\n\nassert even_filter([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]\nassert even_filter([1, 2, 3, 4, 5, 6]) == [1, 2, 3, 4, 5, 6]\nassert even_filter([1, 2, 3, 4, 5, 6, 7, 8, 9]) == [1, 2, 3, 4, 5, 6, 7, 8, 9]"
    }
  ]
}