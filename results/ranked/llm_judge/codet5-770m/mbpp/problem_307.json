{
  "timestamp": "2025-09-14T14:43:28.015405",
  "method": "improved_llm_judge",
  "judge_model": "codellama/CodeLlama-7b-Python-hf",
  "target_model": "codet5-770m",
  "dataset": "mbpp",
  "problem_number": 307,
  "total_candidates": 100,
  "results": [
    {
      "rank": 1,
      "score": 10.0,
      "candidate": "def max_volume(sides):\n    return (sides**3) / 4\n\n\nprint(max_volume(3))\nprint(max_volume(4))\nprint(max_volume(5))\nprint(max_volume(6))"
    },
    {
      "rank": 2,
      "score": 10.0,
      "candidate": "def cuboid(n):\n    volume = 0\n    for i in range(n):\n        volume += 4\n        volume -= 2\n    return volume\n\n\nprint(cuboid(5))"
    },
    {
      "rank": 3,
      "score": 10.0,
      "candidate": "def max_volume(side):\n    if side <= 0:\n        return 0\n    if side == 1:\n        return 4\n    if side == 2:\n        return 6\n    if side == 3:\n        return 9\n    return 12\n\nprint(max_volume(5))"
    },
    {
      "rank": 4,
      "score": 10.0,
      "candidate": "def cuboid(sides):\n    sides = int(sides)\n    if sides == 0:\n        return 0\n    volume = sides * sides * sides * sides\n    return volume\n\n\nprint(cuboid(1))\nprint(cuboid(2))\nprint(cuboid(3))\nprint(cuboid(4))\nprint(cuboid(5))\nprint(cuboid(6))\nprint(cuboid(7))\nprint(cuboid(8))\nprint(cuboid(9))\nprint(cuboid(10))"
    },
    {
      "rank": 5,
      "score": 10.0,
      "candidate": "def cuboid(sides):\n    return sides * (sides + 1) / 2\n\n\nprint(cuboid(4))\nprint(cuboid(5))\nprint(cuboid(8))"
    },
    {
      "rank": 6,
      "score": 10.0,
      "candidate": "def cuboid(sides):\n    if sides == 0:\n        return 0\n    else:\n        return sides * (sides + 1) / 2\n\nprint(cuboid(2))\nprint(cuboid(3))\nprint(cuboid(5))\nprint(cuboid(6))\nprint(cuboid(7))\nprint(cuboid(8))"
    },
    {
      "rank": 7,
      "score": 10.0,
      "candidate": "def cuboid_volume(sides):\n    if sides < 0:\n        return -1\n    else:\n        return sides**3"
    },
    {
      "rank": 8,
      "score": 10.0,
      "candidate": "def find_volume(sides):\n    if sides == 0:\n        return 0\n    elif sides > 0:\n        return sides * (sides - 1) * (sides - 2) * (sides - 3) / 6\n    else:\n        return 0\n\nprint(find_volume(1))\nprint(find_volume(2))\nprint(find_volume(3))\nprint(find_volume(4))\nprint(find_volume(5))\nprint(find_volume(6))"
    },
    {
      "rank": 9,
      "score": 10.0,
      "candidate": "import math\n\n\ndef max_volume(sides):\n    return math.sqrt(sides*sides-4*sides*sides)\n\n\nprint(max_volume(8))"
    },
    {
      "rank": 10,
      "score": 10.0,
      "candidate": "def max_volume(sides):\n    return sides ** 3\n\nprint(max_volume(5))\nprint(max_volume(15))\nprint(max_volume(17))\nprint(max_volume(31))"
    },
    {
      "rank": 11,
      "score": 10.0,
      "candidate": "def cuboid_volume(sides):\n    cuboid_volume = 0\n    for i in range(sides):\n        cuboid_volume += (i ** 2)\n    return cuboid_volume\n\n\nprint(cuboid_volume(4))"
    },
    {
      "rank": 12,
      "score": 10.0,
      "candidate": "def cuboid(sides):\n    # return the maximum volume of a cuboid with given sum of sides\n    return sides**3\n\nif __name__ == \"__main__\":\n    print(cuboid(3))\n    print(cuboid(6))\n    print(cuboid(4))\n    print(cuboid(10))\n    print(cuboid(12))\n    print(cuboid(14))\n    print(cuboid(20))\n    print(cuboid(24))\n    print(cuboid(30))\n    print(cuboid(40))\n    print(cuboid(50))\n    print(cuboid(60))\n    print(cuboid(70))\n    print(cuboid(80))\n    print(cuboid(100))\n    print(cuboid(120))\n    print(cuboid(150))\n    print(cuboid(200))\n    print(cuboid(250))\n    print(cuboid(300))\n    print(cuboid(400))\n    print(cuboid(500))\n    print(cuboid(600))\n    print(cuboid(700))\n    print(cuboid(800))\n    print(cuboid(900))"
    },
    {
      "rank": 13,
      "score": 10.0,
      "candidate": "def max_volume(sides):\n    return sides * (sides + 1) / 2\n\n\nprint(max_volume(5))\nprint(max_volume(6))\nprint(max_volume(7))\nprint(max_volume(8))"
    },
    {
      "rank": 14,
      "score": 10.0,
      "candidate": "def cuboid(sides):\n    return sides ** 3\n\n\nprint(cuboid(10))\nprint(cuboid(5))\nprint(cuboid(15))"
    },
    {
      "rank": 15,
      "score": 10.0,
      "candidate": "def max_volume(sides):\n    volume = 0\n    for side in sides:\n        volume += side * (side + 1) / 2\n    return volume\n\n\nsides = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]\nprint(max_volume(sides))"
    },
    {
      "rank": 16,
      "score": 10.0,
      "candidate": "def max_volume(n, s):\n    if n == 0:\n        return 0\n    if n == 1:\n        return s\n    return max(s*n, max_volume(n-1, s))\n\n\nprint(max_volume(3, 3))"
    },
    {
      "rank": 17,
      "score": 10.0,
      "candidate": "def cuboid_volume(sides):\n    return sides**3\n\n\nif __name__ == \"__main__\":\n    print(cuboid_volume(4))\n    print(cuboid_volume(6))\n    print(cuboid_volume(8))\n    print(cuboid_volume(10))"
    },
    {
      "rank": 18,
      "score": 10.0,
      "candidate": "def cuboid_volume(sides):\n    return sides**3\n\n\nif __name__ == \"__main__\":\n    print(cuboid_volume(3))\n    print(cuboid_volume(5))\n    print(cuboid_volume(8))\n    print(cuboid_volume(10))\n    print(cuboid_volume(15))"
    },
    {
      "rank": 19,
      "score": 10.0,
      "candidate": "def max_volume(sides):\n    if sides == 0:\n        return 0\n    if sides <= 3:\n        return sides * sides * sides\n    return max_volume(sides - 2) + max_volume(sides - 1) + max_volume(sides - 0.5)\n\nprint(max_volume(5))\nprint(max_volume(6))\nprint(max_volume(9))\nprint(max_volume(8))"
    },
    {
      "rank": 20,
      "score": 10.0,
      "candidate": "def max_volume(sides):\n    if sides <= 0:\n        return 0\n    volume = 0\n    for i in range(1, sides + 1):\n        volume += i * (i + 1) / 2\n    return volume\n\n\ndef main():\n    print(max_volume(int(input(\"Enter the number of sides: \"))))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 21,
      "score": 9.370583536698913,
      "candidate": "def cuboid(sides):\n    if sides < 0:\n        print(\"Invalid sides\")\n    else:\n        volume = sides * (sides + 1) / 2\n        print(\"The volume of the cuboid is\", volume)\n\n\ncuboid(0)\ncuboid(1)\ncuboid(2)\ncuboid(3)\ncuboid(4)\ncuboid(5)"
    },
    {
      "rank": 22,
      "score": 9.234050852198141,
      "candidate": "def max_volume(sides):\n    if sides < 0:\n        return 0\n    if sides == 0:\n        return 1\n    return sides**3 * max_volume(sides-1)\n\nprint(max_volume(3))"
    },
    {
      "rank": 23,
      "score": 9.21346272767743,
      "candidate": "def max_volume(sides):\n    if sides <= 1:\n        return sides\n    else:\n        return max_volume(sides - 1) * sides\n\nprint(max_volume(6))\nprint(max_volume(4))\nprint(max_volume(3))"
    },
    {
      "rank": 24,
      "score": 9.205959372648458,
      "candidate": "def max_volume(sides):\n    volume = 0\n    for i in range(1,sides+1):\n        volume = max(volume, i**2)\n    return volume\n\nsides = int(input(\"Enter sides:\"))\nprint(max_volume(sides))"
    },
    {
      "rank": 25,
      "score": 9.177268828905222,
      "candidate": "def cuboid_volume(sides):\n    volume = 0\n    for i in range(1, sides+1):\n        volume += (i**2)\n    return volume\n\n\nprint(cuboid_volume(3))"
    },
    {
      "rank": 26,
      "score": 9.122564458729856,
      "candidate": "def cuboid(sides):\n    sides = int(sides)\n    if sides == 0:\n        return 0\n    if sides == 1:\n        return 1\n    return 1 + max(cuboid(sides - 1), cuboid(sides - 2), cuboid(sides - 3))\n\nprint(cuboid(5))\nprint(cuboid(4))\nprint(cuboid(3))\nprint(cuboid(2))"
    },
    {
      "rank": 27,
      "score": 8.973005557553902,
      "candidate": "def cuboid_volume(sides):\n    return sides * (sides + 1) / 2\n\n\nprint(cuboid_volume(3))\nprint(cuboid_volume(5))\nprint(cuboid_volume(7))"
    },
    {
      "rank": 28,
      "score": 8.95994420569242,
      "candidate": "def max_volume(sides):\n    return sides ** 3\n\n\nprint(max_volume(5))\nprint(max_volume(10))\nprint(max_volume(20))\nprint(max_volume(30))"
    },
    {
      "rank": 29,
      "score": 8.946210893390457,
      "candidate": "def max_volume(sides):\n    volume = 0\n    for i in range(sides):\n        volume += i\n    return volume\n\nprint(max_volume(3))\nprint(max_volume(5))\nprint(max_volume(7))\nprint(max_volume(11))"
    },
    {
      "rank": 30,
      "score": 8.932217008005624,
      "candidate": "def cuboid(sides):\n    cuboid_volume = 0\n    for i in range(sides):\n        cuboid_volume += (sides - i)**3\n    return cuboid_volume\n\nprint(cuboid(3))\nprint(cuboid(6))\nprint(cuboid(4))\nprint(cuboid(7))"
    },
    {
      "rank": 31,
      "score": 8.910084504002544,
      "candidate": "def max_volume(sides):\n    if sides < 0:\n        raise ValueError(\"Sides cannot be negative.\")\n\n    volume = 0\n    for side in sides:\n        volume += side**3\n\n    return volume\n\n\nprint(max_volume([1,2,3,4]))\nprint(max_volume([-1,-2,-3,-4]))\nprint(max_volume([4,2,1,0]))"
    },
    {
      "rank": 32,
      "score": 8.85571690049604,
      "candidate": "def max_volume(sides):\n    if sides == 0:\n        return 0\n    if sides == 1:\n        return 2\n    return max(2, sides * sides)\n\nprint(max_volume(3))\nprint(max_volume(6))\nprint(max_volume(10))"
    },
    {
      "rank": 33,
      "score": 8.850707355641543,
      "candidate": "def cuboid(sides):\n    volume = 0\n    for i in range(sides):\n        volume = volume + (i**2)\n    return volume\n\nprint(cuboid(3))\nprint(cuboid(5))\nprint(cuboid(7))\nprint(cuboid(11))"
    },
    {
      "rank": 34,
      "score": 8.8281618090209,
      "candidate": "def volume(sides):\n    max_volume = 0\n    for i in range(sides):\n        max_volume = max(max_volume, sides*sides*sides)\n    return max_volume\n\nprint(volume(3))\nprint(volume(4))\nprint(volume(5))"
    },
    {
      "rank": 35,
      "score": 8.81367773444215,
      "candidate": "def max_volume(sides):\n    if sides == 0:\n        return 0\n    else:\n        return sides * (sides + 1) / 2\n\n\nif __name__ == '__main__':\n    print(max_volume(1))\n    print(max_volume(2))\n    print(max_volume(3))\n    print(max_volume(4))\n    print(max_volume(5))\n    print(max_volume(6))\n    print(max_volume(7))"
    },
    {
      "rank": 36,
      "score": 8.76828871349479,
      "candidate": "def max_volume(sides):\n    if sides == 0:\n        return 0\n    if sides > 0:\n        return sides * (sides - 1)\n\n\nif __name__ == \"__main__\":\n    print(max_volume(5))"
    },
    {
      "rank": 37,
      "score": 8.750282588864879,
      "candidate": "def maximum_volume(sides):\n    volume = 0\n    for i in range(1,sides+1):\n        volume = max(volume,i**3)\n    return volume\n\n\nprint(maximum_volume(6))\nprint(maximum_volume(7))\nprint(maximum_volume(8))"
    },
    {
      "rank": 38,
      "score": 8.715724466237427,
      "candidate": "def cuboid_volume(sides):\n    volume = 0\n    for i in range(1,sides+1):\n        volume += i**3\n    return volume\n\nprint(cuboid_volume(4))\nprint(cuboid_volume(5))\nprint(cuboid_volume(6))"
    },
    {
      "rank": 39,
      "score": 8.692801520950061,
      "candidate": "def cuboid_volume(sides):\n    volume = 0\n    if sides <= 0:\n        return volume\n    for i in range(sides):\n        volume += i**3\n    return volume\n\n\nprint(cuboid_volume(3))\nprint(cuboid_volume(4))\nprint(cuboid_volume(6))"
    },
    {
      "rank": 40,
      "score": 8.632293453617281,
      "candidate": "def find_max_volume(sides):\n    max_volume = 0\n    for i in range(1, sides + 1):\n        volume = (i ** 3) * (i ** 2) * (i + 1)\n        if volume > max_volume:\n            max_volume = volume\n    return max_volume\n\nprint(find_max_volume(5))\nprint(find_max_volume(6))\nprint(find_max_volume(9))"
    },
    {
      "rank": 41,
      "score": 8.625262456968262,
      "candidate": "def cuboid_volume(sides):\n    return sides**3\n\nprint(cuboid_volume(4))\nprint(cuboid_volume(1))\nprint(cuboid_volume(2))\nprint(cuboid_volume(3))"
    },
    {
      "rank": 42,
      "score": 8.625142247198651,
      "candidate": "def max_volume(sides):\n    volume = 0\n    while sides > 0:\n        volume = volume + (sides * (sides - 1)) / 2\n        sides = sides - 1\n    return volume\n\nprint(max_volume(5))\nprint(max_volume(10))\nprint(max_volume(5))\nprint(max_volume(2))\nprint(max_volume(15))"
    },
    {
      "rank": 43,
      "score": 8.616253589228675,
      "candidate": "def max_volume(sides):\n    volume = 0\n    for i in range(sides):\n        volume += i**3\n    return volume\n\n\nif __name__ == '__main__':\n    print(max_volume(5))"
    },
    {
      "rank": 44,
      "score": 8.610076160146226,
      "candidate": "def max_volume(sides):\n    total = 0\n    for i in range(sides):\n        total += i**3\n    return total\n\nprint(max_volume(10))"
    },
    {
      "rank": 45,
      "score": 8.606486429141842,
      "candidate": "def max_volume(sides):\n    return sides**3\n\nprint(max_volume(10))\nprint(max_volume(3))\nprint(max_volume(2))\nprint(max_volume(5))"
    },
    {
      "rank": 46,
      "score": 8.60156811074208,
      "candidate": "def max_volume(sides):\n    if sides <= 0:\n        return 0\n\n    return sides * (sides + 1) / 2\n\nprint(max_volume(5))"
    },
    {
      "rank": 47,
      "score": 8.565425580227462,
      "candidate": "def max_volume(sides):\n    if sides == 0:\n        return 0\n    if sides == 1:\n        return 1\n    if sides == 2:\n        return 4\n\n    if sides % 2 == 0:\n        return max(sides // 2, max_volume(sides // 2) + max_volume(sides // 4))\n    else:\n        return max(sides // 2, max_volume(sides // 4) + max_volume(sides // 8))\n\n\nif __name__ == \"__main__\":\n    print(max_volume(5))"
    },
    {
      "rank": 48,
      "score": 8.548876241946822,
      "candidate": "def cuboid_volume(sides):\n    return sides**3\n\nif __name__ == \"__main__\":\n    print(cuboid_volume(10))\n    print(cuboid_volume(5))\n    print(cuboid_volume(0))"
    },
    {
      "rank": 49,
      "score": 8.542875062379007,
      "candidate": "def cuboid(sides):\n    sides = sorted(sides)\n    return sides[0]*sides[1]*sides[2]\n\n\nprint(cuboid([1, 2, 3]))\nprint(cuboid([1, 2, 3, 4]))\nprint(cuboid([1, 2, 3, 4, 5]))"
    },
    {
      "rank": 50,
      "score": 8.53012858503943,
      "candidate": "def max_volume(sides):\n    volume = 0\n    if sides == 0:\n        return 0\n    for i in range(1, sides + 1):\n        volume += i * i * i\n    return volume\n\n\nprint(max_volume(5))\nprint(max_volume(10))\nprint(max_volume(15))"
    },
    {
      "rank": 51,
      "score": 8.499905739299377,
      "candidate": "def volume(sides):\n    if sides == 0:\n        return 0\n    else:\n        return sides**3\n\n\nprint(volume(3))"
    },
    {
      "rank": 52,
      "score": 8.478208546788407,
      "candidate": "def max_volume(sides):\n    if sides == 0:\n        return 0\n    return sides**3\n\nprint(max_volume(5))\nprint(max_volume(8))\nprint(max_volume(13))\nprint(max_volume(22))"
    },
    {
      "rank": 53,
      "score": 8.437695832075478,
      "candidate": "def volume(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return n * volume(n - 1)\n\nprint(volume(4))"
    },
    {
      "rank": 54,
      "score": 8.408439383654278,
      "candidate": "def max_volume(sides):\n    if sides<0:\n        return 0\n    else:\n        return (sides**3)\n\nsides = int(input(\"Enter the number of sides: \"))\nprint(\"The maximum volume of cuboid with given sum of sides is :\", max_volume(sides))"
    },
    {
      "rank": 55,
      "score": 8.386620303250325,
      "candidate": "def cuboid(sides):\n    return sides**3\n\nprint(cuboid(3))\nprint(cuboid(5))\nprint(cuboid(8))\nprint(cuboid(13))\nprint(cuboid(15))\nprint(cuboid(21))"
    },
    {
      "rank": 56,
      "score": 8.375312293858853,
      "candidate": "def max_volume(sides):\n    if sides < 0:\n        return 0\n    return sides * (sides + 1) / 2\n\nif __name__ == '__main__':\n    print(max_volume(4))\n    print(max_volume(3))\n    print(max_volume(2))\n    print(max_volume(1))"
    },
    {
      "rank": 57,
      "score": 8.351614956112536,
      "candidate": "def max_volume(sides):\n    total_volume = 0\n    total_volume = sides*sides*sides\n    return total_volume\n\nprint(max_volume(8))"
    },
    {
      "rank": 58,
      "score": 8.331556294201176,
      "candidate": "def max_volume(sides):\n    return sides ** 3\n\n\nsides = int(input(\"Enter the sides of the cuboid: \"))\nprint(\"Maximum volume is\", max_volume(sides))"
    },
    {
      "rank": 59,
      "score": 8.327375965969855,
      "candidate": "def find_volume(sides):\n    if sides == 0:\n        return 0\n    else:\n        return (sides**3) / 2\n\n\nif __name__ == \"__main__\":\n    print(find_volume(10))\n    print(find_volume(5))\n    print(find_volume(2))\n    print(find_volume(10))"
    },
    {
      "rank": 60,
      "score": 8.327367757082776,
      "candidate": "def find_max_volume(side_list):\n    max_volume = 0\n    for i in side_list:\n        max_volume = max(max_volume, i*i*i)\n    return max_volume\n\nif __name__ == '__main__':\n    print(find_max_volume([1, 3, 6, 10]))"
    },
    {
      "rank": 61,
      "score": 8.298597569547805,
      "candidate": "def max_volume(sides):\n    # if sides > 100:\n    #     return 0\n    # else:\n    #     return sides * sides * sides * sides\n    return sides * sides * sides * sides\n\nprint(max_volume(100))\n\n# if sides > 100:\n#     return 0\n# else:\n#     return sides * sides * sides * sides"
    },
    {
      "rank": 62,
      "score": 8.2938925966498,
      "candidate": "def max_volume(sides):\n    return sides**3\n\nprint(max_volume(10))\nprint(max_volume(20))\nprint(max_volume(40))\nprint(max_volume(50))"
    },
    {
      "rank": 63,
      "score": 8.289838256518838,
      "candidate": "def max_volume(sides):\n    if sides == 0:\n        return 0\n    else:\n        return sides * (sides + 1) / 2\n\n\nprint(max_volume(3))"
    },
    {
      "rank": 64,
      "score": 8.251903304236286,
      "candidate": "def cuboid(sides):\n    if sides < 0:\n        raise Exception('Invalid sides')\n    else:\n        max_volume = 0\n        for i in range(sides):\n            max_volume = max(max_volume, (i ** 2) * (i ** 3))\n        return max_volume\n\nif __name__ == '__main__':\n    sides = int(input('Enter the sides of the cuboid: '))\n    print('Maximum volume of cuboid is:'+ str(cuboid(sides)))"
    },
    {
      "rank": 65,
      "score": 8.214125058964552,
      "candidate": "def max_volume(sides):\n    if sides <= 0:\n        return 0\n\n    max_volume = 0\n    for side in range(1, sides + 1):\n        volume = side ** 3\n        if volume > max_volume:\n            max_volume = volume\n\n    return max_volume\n\nprint(max_volume(10))\nprint(max_volume(20))\nprint(max_volume(30))"
    },
    {
      "rank": 66,
      "score": 8.212735598038213,
      "candidate": "def max_volume(sides):\n    if sides <= 0:\n        return 0\n    return sides ** 3\n\n\nprint(max_volume(6))"
    },
    {
      "rank": 67,
      "score": 8.211579567659316,
      "candidate": "def cuboid_volume(side1,side2,side3):\n    return (side1*side2*side3)/2\n\nprint(cuboid_volume(5,2,5))"
    },
    {
      "rank": 68,
      "score": 8.209707251476969,
      "candidate": "def find_max_volume(sides):\n    volume = 0\n    for i in range(1, sides+1):\n        volume += (sides - i) * i\n    return volume\n\nprint(find_max_volume(3))\nprint(find_max_volume(5))\nprint(find_max_volume(10))"
    },
    {
      "rank": 69,
      "score": 8.2048573255218,
      "candidate": "def find_max_volume(sides):\n    max_volume = 0\n    for i in range(sides+1):\n        max_volume = max(max_volume, sides * (sides + 1) / 2)\n    return max_volume\n\n\ndef main():\n    sides = int(input(\"Enter sides: \"))\n    print(find_max_volume(sides))\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 70,
      "score": 8.172253082181854,
      "candidate": "def max_volume(sides):\n    return sides ** 3\n\nprint(max_volume(3))\nprint(max_volume(5))\nprint(max_volume(8))"
    },
    {
      "rank": 71,
      "score": 8.163300679823958,
      "candidate": "def cuboid_volume(side):\n    return side * (side + 1) / 2\n\ndef main():\n    print(cuboid_volume(10))\n    print(cuboid_volume(5))\n    print(cuboid_volume(5))\n    print(cuboid_volume(0))\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 72,
      "score": 8.144125099485041,
      "candidate": "def max_volume(sides):\n    if sides < 0:\n        return \"Invalid sides\"\n    elif sides == 0:\n        return 0\n    else:\n        return sides * (sides + 1) / 2\n\nprint(max_volume(2))"
    },
    {
      "rank": 73,
      "score": 8.143591138329747,
      "candidate": "def find_max_volume(sides):\n    total_volume = 0\n    for i in range(sides):\n        total_volume += (i ** 3)\n    return total_volume\n\nprint(find_max_volume(1))\nprint(find_max_volume(2))\nprint(find_max_volume(3))\nprint(find_max_volume(4))\nprint(find_max_volume(5))"
    },
    {
      "rank": 74,
      "score": 8.121884567141883,
      "candidate": "def cuboid_volume(sides):\n    # Your code here\n    volume = 0\n    for i in range(1,sides+1):\n        volume += (i**3)\n    return volume\n\nprint(cuboid_volume(5))\nprint(cuboid_volume(3))\nprint(cuboid_volume(4))\nprint(cuboid_volume(2))\nprint(cuboid_volume(1))"
    },
    {
      "rank": 75,
      "score": 8.105983444291466,
      "candidate": "def cuboid_volume(sides):\n    max_volume = 0\n    for i in range(sides):\n        max_volume = max(max_volume, i * (i + 1) / 2)\n    return max_volume\n\n\nif __name__ == '__main__':\n    print(cuboid_volume(5))"
    },
    {
      "rank": 76,
      "score": 8.08452234024709,
      "candidate": "def max_volume(sides):\n    if sides <= 0:\n        return 0\n    else:\n        return sides * (sides + 1) * (2 * sides - 1)"
    },
    {
      "rank": 77,
      "score": 8.024835682833125,
      "candidate": "def cuboid(sides):\n    if sides <= 0:\n        return 0\n    else:\n        return sides**3\n\nprint(cuboid(3))\nprint(cuboid(4))\nprint(cuboid(5))\nprint(cuboid(6))\nprint(cuboid(7))\nprint(cuboid(8))\nprint(cuboid(9))"
    },
    {
      "rank": 78,
      "score": 7.990432406683839,
      "candidate": "def max_volume(a, b, c):\n    if a+b+c==0:\n        return 0\n    elif a+b+c<0:\n        return 0\n    else:\n        return a*b*c/(4*a+b+c)\n\nprint(max_volume(5, 10, 6))\nprint(max_volume(4, 5, 6))\nprint(max_volume(5, -5, 10))\nprint(max_volume(10, -5, -5))"
    },
    {
      "rank": 79,
      "score": 7.938028884277233,
      "candidate": "def volume(sides):\n    if sides == 0:\n        return 0\n    else:\n        return sides * (sides + 1) / 2\n\n\nprint(volume(4))\nprint(volume(5))\nprint(volume(6))"
    },
    {
      "rank": 80,
      "score": 7.915588979966494,
      "candidate": "def max_volume(sides):\n    if sides < 0:\n        return 0\n    else:\n        return sides * (sides + 1) / 2\n\ndef main():\n    print(max_volume(1))\n    print(max_volume(2))\n    print(max_volume(3))\n    print(max_volume(4))\n    print(max_volume(5))\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 81,
      "score": 7.8912769574414305,
      "candidate": "def cuboid(sides):\n    if sides > 4:\n        return -1\n    return (sides ** 3) / 6\n\nsides = int(input(\"Enter the sides of the cuboid: \"))\nprint(\"The maximum volume is: \", cuboid(sides))"
    },
    {
      "rank": 82,
      "score": 7.868947655733293,
      "candidate": "def cuboid_volume(sides):\n    if sides == 0:\n        return 0\n    else:\n        return sides ** 3\n\nif __name__ == \"__main__\":\n    print(cuboid_volume(3))"
    },
    {
      "rank": 83,
      "score": 7.84634113240411,
      "candidate": "def max_volume(sides):\n    return sides ** 3\n\n\nprint(max_volume(4))\nprint(max_volume(9))\nprint(max_volume(12))"
    },
    {
      "rank": 84,
      "score": 7.834022619458933,
      "candidate": "def cuboid(side_1, side_2, side_3):\n    return side_1 * side_2 * side_3\n\n\nprint(cuboid(4, 3, 2))"
    },
    {
      "rank": 85,
      "score": 7.780351419995229,
      "candidate": "def max_volume(sides):\n    if sides == 0:\n        return 0\n    elif sides == 1:\n        return 1\n    else:\n        return sides * max_volume(sides-1)\n\nprint(max_volume(3))\nprint(max_volume(4))\nprint(max_volume(5))"
    },
    {
      "rank": 86,
      "score": 7.738292593776799,
      "candidate": "def max_volume(sides):\n    if sides == 0:\n        return 0\n    if sides == 1:\n        return 1\n    return max(sides, (sides * sides) / 2)\n\nprint(max_volume(3))\nprint(max_volume(5))\nprint(max_volume(6))\nprint(max_volume(7))\nprint(max_volume(8))\nprint(max_volume(9))"
    },
    {
      "rank": 87,
      "score": 7.7320703513377165,
      "candidate": "def maxVolume(sides):\n    volume = 0\n    if sides <= 1:\n        return volume\n    for i in range(1,sides+1):\n        volume = max(volume,(sides-i)*(i**3))\n    return volume\n\nprint(maxVolume(4))"
    },
    {
      "rank": 88,
      "score": 7.705183449260731,
      "candidate": "def maximumVolume(a, b, c):\n    if a > b and a > c:\n        return max(a, b, c)\n    elif b > a and b > c:\n        return max(b, a, c)\n    elif c > a and c > b:\n        return max(c, a, b)\n    else:\n        return 0\n\nprint(maximumVolume(2, 2, 2))"
    },
    {
      "rank": 89,
      "score": 7.5819855281879285,
      "candidate": "def max_volume(sides):\n    return sides * (sides + 1) * (sides + 2) / 6\n\n\nif __name__ == \"__main__\":\n    print(max_volume(5))"
    },
    {
      "rank": 90,
      "score": 7.562924366763077,
      "candidate": "def max_volume(sides):\n    if sides == 0:\n        return 0\n    return sides ** 3\n\n\nif __name__ == \"__main__\":\n    print(max_volume(3))\n    print(max_volume(4))"
    },
    {
      "rank": 91,
      "score": 7.4878043221155455,
      "candidate": "def cuboid(sides):\n    return (sides**3)\n\n\nprint(cuboid(6))"
    },
    {
      "rank": 92,
      "score": 7.464609382504557,
      "candidate": "def cuboid(a, b, c):\n    if a+b+c > 100:\n        print(\"Error\")\n        return\n    return a*b*c\n\na = int(input(\"Enter the sum of sides of the cuboid: \"))\nb = int(input(\"Enter the sum of sides of the cuboid: \"))\nc = int(input(\"Enter the sum of sides of the cuboid: \"))\n\nprint(\"The volume of a cuboid with given sum of sides is:\", cuboid(a,b,c))"
    },
    {
      "rank": 93,
      "score": 3.0,
      "candidate": "def max_volume(sides):\n    # Write your code here\n    return sides * sides * sides\n\nprint(max_volume(6))\nprint(max_volume(9))"
    },
    {
      "rank": 94,
      "score": 3.0,
      "candidate": "def max_volume(sides):\n    if sides == 0:\n        return 0\n    if sides <= 1:\n        return sides * sides * sides\n    if sides <= 4:\n        return sides * (sides + 1) * (sides + 2) * (sides + 3)\n    if sides <= 7:\n        return sides * (sides + 1) * (sides + 2) * (sides + 3) * (sides + 4)\n    if sides <= 10:\n        return sides * (sides + 1) * (sides + 2) * (sides + 3) * (sides + 4) * (sides + 5)\n    if sides <= 12:\n        return sides * (sides + 1) * (sides + 2) * (sides + 3) * (sides + 4) * (sides + 5) * (sides + 6)\n    if sides <= 14:\n        return sides * (sides + 1) * (sides + 2) * (sides + 3) * (sides + 4) * (sides + 5) * (sides + 6) * (sides + 7)\n    if sides <= 16:\n        return sides * (sides + 1) * (sides + 2) * (sides + 3) * (sides + 4) * (sides + 5) * (sides + 6) * (sides + 7) * (sides + 8)\n    if sides <= 18:\n        return sides * (sides + 1) * (sides + 2) * (sides + 3) * (sides + 4) * (sides + 5) * (sides + 6) * (sides + 7) * (sides + 8) * (sides + 9) * (sides + 10)\n    if sides <= 20:\n        return sides * (sides + 1) * (sides + 2) * (sides + 3) * (sides + 4) * (sides + 5) * (sides + 6) * (sides + 7) * (sides + 8) * (sides + 9) * (sides + 10) * (sides + 11)\n    if sides <= 22:"
    },
    {
      "rank": 95,
      "score": 3.0,
      "candidate": "def max_volume(sides):\n    volume = 0\n    for side in sides:\n        volume += side ** 3\n    return volume\n\n\ndef max_volume2(sides):\n    if sides == 0:\n        return 0\n    elif sides == 1:\n        return 1\n    else:\n        return max_volume2(sides - 1) + max_volume2(sides - 2) + max_volume2(sides - 3)\n\n\nprint(max_volume(5))\nprint(max_volume2(5))"
    },
    {
      "rank": 96,
      "score": 3.0,
      "candidate": "def cuboid_volume(sides):\n    # Your code here\n    total_volume = 0\n    for i in range(1, sides+1):\n        total_volume += i * (i * i)\n    return total_volume\n\nprint(cuboid_volume(10))\nprint(cuboid_volume(15))\nprint(cuboid_volume(20))\nprint(cuboid_volume(25))"
    },
    {
      "rank": 97,
      "score": 3.0,
      "candidate": "def cuboid(side_sum):\n    return (side_sum * 2)\n\n\nprint(cuboid(4))"
    },
    {
      "rank": 98,
      "score": 3.0,
      "candidate": "def cuboid_volume(sides):\n    return sides * (sides + 1) / 2\n\n\nprint(cuboid_volume(10))"
    },
    {
      "rank": 99,
      "score": 3.0,
      "candidate": "def max_volume(sides):\n    if sides < 0:\n        return 0\n    if sides == 0:\n        return 1\n    return max_volume(sides-1) + max_volume(sides-2) + max_volume(sides-3)\n\n\nprint(max_volume(1))\nprint(max_volume(2))\nprint(max_volume(3))\nprint(max_volume(4))\nprint(max_volume(5))\nprint(max_volume(6))\nprint(max_volume(7))"
    },
    {
      "rank": 100,
      "score": 3.0,
      "candidate": "def cuboid(side1, side2, side3):\n    side1 = int(side1)\n    side2 = int(side2)\n    side3 = int(side3)\n    if side1 < 0:\n        side1 = 0\n    if side2 < 0:\n        side2 = 0\n    if side3 < 0:\n        side3 = 0\n    if side1 > side2 and side1 > side3:\n        return side1 * side2 * side3\n    if side2 > side1 and side2 > side3:\n        return side2 * side3\n    if side3 > side1 and side3 > side2:\n        return side3 * side2\n    return 0\n\nprint(cuboid(0, 0, 0))\nprint(cuboid(1, 1, 1))\nprint(cuboid(2, 2, 2))\nprint(cuboid(3, 3, 3))\nprint(cuboid(4, 4, 4))"
    }
  ]
}