{
  "timestamp": "2025-09-14T15:37:20.501625",
  "method": "improved_llm_judge",
  "judge_model": "codellama/CodeLlama-7b-Python-hf",
  "target_model": "codet5-770m",
  "dataset": "mbpp",
  "problem_number": 430,
  "total_candidates": 100,
  "results": [
    {
      "rank": 1,
      "score": 10.0,
      "candidate": "def cube_area(radius):\n    return 6.0 * radius ** 2\n\nprint(cube_area(2))"
    },
    {
      "rank": 2,
      "score": 10.0,
      "candidate": "def surface_area(length, width, height):\n    return (length * width * height) / 2\n\n\nprint(surface_area(10, 15, 12))\nprint(surface_area(15, 10, 15))"
    },
    {
      "rank": 3,
      "score": 10.0,
      "candidate": "import math\n\ndef surfaceArea(x, y, z):\n    return (x*x + y*y + z*z)\n\n\ndef main():\n    print(surfaceArea(1, 2, 3))\n    print(surfaceArea(1, 2, 4))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 4,
      "score": 10.0,
      "candidate": "def surface_area(a, b, c):\n    return (a * b) * (c * c)\n\na = float(input(\"Enter the area of the cube: \"))\nb = float(input(\"Enter the height of the cube: \"))\nc = float(input(\"Enter the width of the cube: \"))\n\nprint(\"The surface area of the cube is: %f\" % surface_area(a, b, c))"
    },
    {
      "rank": 5,
      "score": 10.0,
      "candidate": "def surface_area(x, y, z):\n    return (x**2 + y**2 + z**2)**(0.5)\n\nprint(surface_area(1, 1, 1))\nprint(surface_area(1, 1, 2))\nprint(surface_area(1, 2, 1))\nprint(surface_area(2, 1, 1))\nprint(surface_area(2, 1, 2))\nprint(surface_area(2, 2, 1))\nprint(surface_area(2, 2, 2))\nprint(surface_area(3, 1, 1))\nprint(surface_area(3, 1, 2))\nprint(surface_area(3, 2, 1))\nprint(surface_area(3, 2, 2))\nprint(surface_area(4, 1, 1))\nprint(surface_area(4, 1, 2))\nprint(surface_area(4, 2, 1))\nprint(surface_area(4, 2, 2))\nprint(surface_area(5, 1, 1))\nprint(surface_area(5, 1, 2))\nprint(surface_area(5, 2, 1))\nprint(surface_area(5, 2, 2))"
    },
    {
      "rank": 6,
      "score": 10.0,
      "candidate": "import math\n\ndef surface_area(radius):\n    return math.pi * (radius**2)\n\nif __name__ == '__main__':\n    print(surface_area(5))"
    },
    {
      "rank": 7,
      "score": 10.0,
      "candidate": "def surface_area(c):\n    return (4/3) * (c**3)\n\nprint(surface_area(4))"
    },
    {
      "rank": 8,
      "score": 10.0,
      "candidate": "def surface_area(height):\n    return height * height * height\n\nprint(surface_area(20))\nprint(surface_area(5))\nprint(surface_area(100))"
    },
    {
      "rank": 9,
      "score": 10.0,
      "candidate": "def surface_area(radius):\n    return 3.14 * radius ** 2\n\n\nprint(surface_area(2))"
    },
    {
      "rank": 10,
      "score": 10.0,
      "candidate": "import math\n\ndef surface_area(x, y, z):\n    return math.sqrt(x ** 2 + y ** 2 + z ** 2)\n\nprint(surface_area(3, 2, 4))"
    },
    {
      "rank": 11,
      "score": 10.0,
      "candidate": "def surface_area(x, y, z):\n    return (x*y*z)**(1/2)\n\nprint(surface_area(5, 5, 5))"
    },
    {
      "rank": 12,
      "score": 10.0,
      "candidate": "import math\n\n\ndef surface_area(x, y, z):\n    return math.sqrt(x ** 2 + y ** 2 + z ** 2)\n\n\ndef main():\n    print(surface_area(1, 2, 3))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 13,
      "score": 10.0,
      "candidate": "import math\n\ndef surfaceArea(x,y,z):\n    return math.sqrt(x*x+y*y+z*z)\n\nprint(surfaceArea(4,4,4))"
    },
    {
      "rank": 14,
      "score": 10.0,
      "candidate": "def surfaceArea(radius):\n    return 4*radius**2\n\nprint(surfaceArea(10))\nprint(surfaceArea(1))\nprint(surfaceArea(5))"
    },
    {
      "rank": 15,
      "score": 10.0,
      "candidate": "def surface_area(length, width, height):\n    surface = length * width * height\n    return surface"
    },
    {
      "rank": 16,
      "score": 10.0,
      "candidate": "def cubeArea(width, height, depth):\n    return width * height * depth\n\nprint(cubeArea(2, 2, 2))"
    },
    {
      "rank": 17,
      "score": 10.0,
      "candidate": "def surface_area(width, height, depth):\n    return width * height * depth"
    },
    {
      "rank": 18,
      "score": 10.0,
      "candidate": "def surface_area(c):\n    area = c * c * c\n    return area"
    },
    {
      "rank": 19,
      "score": 10.0,
      "candidate": "def surface_area(radius, height, width):\n    return radius * height * width\n\nprint(surface_area(10, 10, 10))"
    },
    {
      "rank": 20,
      "score": 10.0,
      "candidate": "def cube_area(r,c,b):\n    return (r*c)*(b*b)\n\ndef main():\n    r = float(input(\"Enter the radius of the cube: \"))\n    c = float(input(\"Enter the width of the cube: \"))\n    b = float(input(\"Enter the height of the cube: \"))\n    print(\"The area of the cube is:\", cube_area(r,c,b))\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 21,
      "score": 10.0,
      "candidate": "import numpy as np\n\ndef cube_area(area, x, y, z):\n    area = area * (x * y * z)\n    return area\n\ndef main():\n    x = float(input(\"x = \"))\n    y = float(input(\"y = \"))\n    z = float(input(\"z = \"))\n    area = cube_area(100, x, y, z)\n    print(area)\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 22,
      "score": 10.0,
      "candidate": "def surfaceArea(radius):\n    return radius**3\n\n\nprint(surfaceArea(6))"
    },
    {
      "rank": 23,
      "score": 10.0,
      "candidate": "def surface_area(x, y, z):\n    return x * y * z"
    },
    {
      "rank": 24,
      "score": 10.0,
      "candidate": "def surface_area(x,y,z):\n    return x*y*z\n\nif __name__ == '__main__':\n    print(surface_area(1,1,1))"
    },
    {
      "rank": 25,
      "score": 10.0,
      "candidate": "def surface_area(radius, area):\n    return 2 * radius * area\n\nprint(surface_area(3, 6))\nprint(surface_area(10, 5))"
    },
    {
      "rank": 26,
      "score": 10.0,
      "candidate": "def surface_area(radius):\n    return 3.14159 * (radius ** 2)\n\ndef main():\n    print(surface_area(3))\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 27,
      "score": 10.0,
      "candidate": "import math\n\ndef surfaceArea(r,h,b):\n    return math.pi * (r**2 + h**2) * (b**2)\n\nprint(surfaceArea(10,20,30))"
    },
    {
      "rank": 28,
      "score": 10.0,
      "candidate": "import math\n\ndef surface_area(r, h, w):\n    area = (r*r)*(h*h) + (w*w)\n    return area\n\nprint(surface_area(3, 2, 1))\nprint(surface_area(2, 2, 2))\nprint(surface_area(1, 1, 1))\nprint(surface_area(1, 1, 2))\nprint(surface_area(1, 2, 1))\nprint(surface_area(1, 2, 2))\nprint(surface_area(1, 2, 3))\nprint(surface_area(1, 2, 4))"
    },
    {
      "rank": 29,
      "score": 10.0,
      "candidate": "from __future__ import division\n\nimport math\n\n\ndef surface_area(radius):\n    return math.pi * radius**2\n\n\nprint(surface_area(3))"
    },
    {
      "rank": 30,
      "score": 10.0,
      "candidate": "def surface_area(a,b,c):\n    area = a * b * c\n    return area\n\n\nprint(surface_area(3,5,4))"
    },
    {
      "rank": 31,
      "score": 10.0,
      "candidate": "def surface_area(width, height, depth):\n    return width * height * depth\n\n\nprint(surface_area(4, 4, 4))"
    },
    {
      "rank": 32,
      "score": 10.0,
      "candidate": "def area(r):\n    return 3.14 * (r ** 2)\n\nprint(area(1))\nprint(area(2))\nprint(area(3))\nprint(area(4))\nprint(area(5))\nprint(area(6))\nprint(area(7))\nprint(area(8))\nprint(area(9))\nprint(area(10))\nprint(area(11))\nprint(area(12))\nprint(area(13))\nprint(area(14))\nprint(area(15))\nprint(area(16))\nprint(area(17))\nprint(area(18))\nprint(area(19))\nprint(area(20))\nprint(area(21))\nprint(area(22))\nprint(area(23))\nprint(area(24))\nprint(area(25))\nprint(area(26))\nprint(area(27))\nprint(area(28))\nprint(area(29))\nprint(area(30))\nprint(area(31))\nprint(area(32))\nprint(area(33))\nprint(area(34))\nprint(area(35))\nprint(area(36))\nprint(area(37))\nprint(area(38))\nprint(area(39))\nprint(area(40))\nprint(area(41))\nprint(area(42))\nprint(area(43))\nprint(area(44))\nprint(area(45))\nprint(area(46))\nprint(area(47))\nprint(area(48))\nprint(area(49))\nprint(area(50))\nprint(area(51))\nprint(area(52))\nprint(area(53))\nprint(area(54))\nprint(area(55))\nprint(area(56))\nprint(area(57))\nprint(area(58))\nprint(area(59))\nprint(area(60))\nprint(area(61))\nprint(area(62))\nprint(area(63))\nprint(area(64))\nprint(area(65))\nprint(area(66))\nprint(area(67))\nprint(area(68))\nprint(area(69))\nprint(area(70))"
    },
    {
      "rank": 33,
      "score": 10.0,
      "candidate": "import math\n\ndef surface_area(r, theta, phi):\n    return math.pi * r**2 * math.sin(theta) * math.sin(phi)\n\n\nif __name__ == '__main__':\n    r = float(input(\"Enter radius: \"))\n    theta = float(input(\"Enter theta: \"))\n    phi = float(input(\"Enter phi: \"))\n    print(surface_area(r, theta, phi))"
    },
    {
      "rank": 34,
      "score": 10.0,
      "candidate": "def surface_area(radius, height, width):\n    return radius * height * width"
    },
    {
      "rank": 35,
      "score": 10.0,
      "candidate": "def surface_area(area):\n    return area * (3.14159 * area)\n\nprint(surface_area(100))\nprint(surface_area(1000))\nprint(surface_area(10000))\nprint(surface_area(100000))\nprint(surface_area(1000000))"
    },
    {
      "rank": 36,
      "score": 10.0,
      "candidate": "def surface_area(x, y, z):\n    return (x**2 + y**2 + z**2)**0.5\n\n\nprint(surface_area(1, 1, 1))"
    },
    {
      "rank": 37,
      "score": 10.0,
      "candidate": "def surface_area(a, b, c):\n    return (a * b * c)**(1/2)\n\nprint(surface_area(3, 6, 9))"
    },
    {
      "rank": 38,
      "score": 10.0,
      "candidate": "def area(a,b,c):\n    return (a*b*c)/2\n\nprint(area(1,2,3))"
    },
    {
      "rank": 39,
      "score": 10.0,
      "candidate": "def surface_area(x, y, z):\n    return (x * x + y * y + z * z) ** 0.5\n\n\nif __name__ == \"__main__\":\n    print(surface_area(10, 10, 10))"
    },
    {
      "rank": 40,
      "score": 10.0,
      "candidate": "def surface_area(radius, height, width):\n    area = (radius * radius) * (height * height)\n    return area\n\nprint(surface_area(3, 5, 6))"
    },
    {
      "rank": 41,
      "score": 10.0,
      "candidate": "def surface_area(radius):\n    return 3.14 * radius ** 2\n\n\nprint(surface_area(3))"
    },
    {
      "rank": 42,
      "score": 10.0,
      "candidate": "import math\n\n\ndef surface_area(radius, height):\n    return (radius * height) * math.pi\n\n\nprint(surface_area(1, 1))"
    },
    {
      "rank": 43,
      "score": 10.0,
      "candidate": "def surface_area(l,b,r):\n    return (l*b)*(r*r)\n\ndef main():\n    l = int(input(\"Enter the length of the cube: \"))\n    b = int(input(\"Enter the height of the cube: \"))\n    r = int(input(\"Enter the radius of the cube: \"))\n    print(\"The surface area of the cube is\", surface_area(l,b,r))\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 44,
      "score": 10.0,
      "candidate": "def surface_area(x, y, z):\n    return x*y*z\n\n\nprint(surface_area(2, 3, 4))"
    },
    {
      "rank": 45,
      "score": 10.0,
      "candidate": "def surface_area(length, width, height):\n    area = (length * width) * (height * height)\n    return area\n\n\ndef main():\n    length = float(input(\"Enter the length: \"))\n    width = float(input(\"Enter the width: \"))\n    height = float(input(\"Enter the height: \"))\n    print(\"The surface area is: \", surface_area(length, width, height))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 46,
      "score": 10.0,
      "candidate": "def surfaceArea(length, width, height):\n    return length * width * height\n\nprint(surfaceArea(10, 10, 10))"
    },
    {
      "rank": 47,
      "score": 10.0,
      "candidate": "def surface_area(length, width, height):\n    return (length * width) + (height * height)\n\n\nprint(surface_area(20, 30, 40))"
    },
    {
      "rank": 48,
      "score": 10.0,
      "candidate": "def surface_area(radius):\n\treturn 4 * (radius * radius)\n\nprint(surface_area(5))"
    },
    {
      "rank": 49,
      "score": 10.0,
      "candidate": "def cube_area(r, c, s):\n    area = r * c * s\n    return area\n\n\nif __name__ == \"__main__\":\n    print(cube_area(2, 3, 4))"
    },
    {
      "rank": 50,
      "score": 9.0,
      "candidate": "def surface_area(a, b, c):\n    return a * b * c\n\na = float(input(\"Enter the area of the cube: \"))\nb = float(input(\"Enter the height of the cube: \"))\nc = float(input(\"Enter the width of the cube: \"))\n\nprint(f\"The surface area of the cube is {surface_area(a, b, c)}\")"
    },
    {
      "rank": 51,
      "score": 8.0,
      "candidate": "def surface_area(a):\n    return a * a * a\n\nprint(surface_area(1))"
    },
    {
      "rank": 52,
      "score": 8.0,
      "candidate": "def surface_area(radius):\n    return (4 / 3) * (radius ** 3)\n\n\n\nprint(surface_area(2))"
    },
    {
      "rank": 53,
      "score": 8.0,
      "candidate": "def surface_area(length, width, height):\n    return (length * width) * (height * height)\n\nprint(surface_area(1,1,1))"
    },
    {
      "rank": 54,
      "score": 8.0,
      "candidate": "import math\n\ndef surface_area(radius):\n    return math.pi * (radius ** 2)\n\nprint(surface_area(2))\nprint(surface_area(4))\nprint(surface_area(6))"
    },
    {
      "rank": 55,
      "score": 8.0,
      "candidate": "def surfaceArea(x,y,z):\n    return x*y*z\n\n\nprint(surfaceArea(4,4,4))"
    },
    {
      "rank": 56,
      "score": 8.0,
      "candidate": "def surfaceArea(a, b, c):\n    return (a * b * c) ** 0.5\n\n\nprint(surfaceArea(4, 6, 6))"
    },
    {
      "rank": 57,
      "score": 8.0,
      "candidate": "import numpy as np\n\ndef surface_area(r, theta, phi):\n    r = np.radians(r)\n    theta = np.radians(theta)\n    phi = np.radians(phi)\n    # calculate the circumference\n    c = np.sqrt(r**2 + theta**2 + phi**2)\n    # calculate the surface area\n    area = c * (2 * np.pi)\n    return area\n\nif __name__ == '__main__':\n    print(surface_area(1, 0, 0))"
    },
    {
      "rank": 58,
      "score": 8.0,
      "candidate": "import numpy as np\n\n\ndef surface_area(a):\n    return (0.5 * (a[0] ** 2 + a[1] ** 2 + a[2] ** 2))\n\n\ndef main():\n    a = np.array([[1, 2, 3], [4, 5, 6]])\n    print(surface_area(a))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 59,
      "score": 8.0,
      "candidate": "def surface_area(x,y,z):\n    return (x*x+y*y+z*z)**0.5\n\ndef main():\n    print(surface_area(2,2,2))\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 60,
      "score": 8.0,
      "candidate": "import math\n\ndef surface_area(r,h,w):\n    return math.pi*r*h*w\n\nprint(surface_area(1,1,1))"
    },
    {
      "rank": 61,
      "score": 8.0,
      "candidate": "def cube_area(radius):\n    return 6 * radius ** 2\n\n\ndef main():\n    print(cube_area(2))\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 62,
      "score": 8.0,
      "candidate": "def surface_area(radius):\n    return (3.14 * radius ** 2)\n\nprint(surface_area(10))"
    },
    {
      "rank": 63,
      "score": 8.0,
      "candidate": "def surface_area(x,y,z):\n    return (x*y)*(z*z)\n\nprint(surface_area(4,3,3))"
    },
    {
      "rank": 64,
      "score": 8.0,
      "candidate": "def surface_area(radius):\n    return (3.14159 * radius**2) / 2\n\n\nprint(surface_area(5))"
    },
    {
      "rank": 65,
      "score": 8.0,
      "candidate": "def surfaceArea(x,y,z):\n    return x*y*z\n\nx = float(input(\"Enter the x coordinate of the cube\"))\ny = float(input(\"Enter the y coordinate of the cube\"))\nz = float(input(\"Enter the z coordinate of the cube\"))\nprint(\"The surface area of the cube is %0.2f\" % surfaceArea(x,y,z))"
    },
    {
      "rank": 66,
      "score": 8.0,
      "candidate": "import math\n\ndef surface_area(l, r, b):\n    return l * r * b"
    },
    {
      "rank": 67,
      "score": 8.0,
      "candidate": "import numpy as np\n\ndef area(x,y,z):\n    area = np.sqrt((x-y)**2+(z-x)**2)\n    return area\n\ndef main():\n    print(area(1,1,1))\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 68,
      "score": 8.0,
      "candidate": "def surface_area(radius):\n    return 4 * (radius ** 2)\n\nprint(surface_area(4))"
    },
    {
      "rank": 69,
      "score": 8.0,
      "candidate": "import math\n\ndef surface_area(r, h, l):\n    #r is the radius of the cube\n    #h is the height of the cube\n    #l is the length of the cube\n    return r*h*l\n\nif __name__ == \"__main__\":\n    print(surface_area(2, 1, 3))"
    },
    {
      "rank": 70,
      "score": 8.0,
      "candidate": "def surface_area(length, width, height):\n    return length * width * height\n\ndef main():\n    length = float(input(\"Length: \"))\n    width = float(input(\"Width: \"))\n    height = float(input(\"Height: \"))\n    print(\"Surface Area: \" + str(surface_area(length, width, height)))\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 71,
      "score": 8.0,
      "candidate": "def surface_area(x, y, z):\n    return (x*y*z)/2\n\nif __name__ == \"__main__\":\n    print(surface_area(10, 10, 10))\n    print(surface_area(10, 10, 10))\n    print(surface_area(10, 10, 10))\n    print(surface_area(10, 10, 10))"
    },
    {
      "rank": 72,
      "score": 8.0,
      "candidate": "import math\ndef surfaceArea(a,b,c):\n    return (a*b*c)/2\n\na = float(input(\"Enter the area of the cube: \"))\nb = float(input(\"Enter the height of the cube: \"))\nc = float(input(\"Enter the width of the cube: \"))\n\nprint(\"The surface area of the cube is:\",surfaceArea(a,b,c))"
    },
    {
      "rank": 73,
      "score": 8.0,
      "candidate": "import math\n\ndef surface_area(radius):\n    return math.pi * radius ** 2\n\nprint(surface_area(4))"
    },
    {
      "rank": 74,
      "score": 8.0,
      "candidate": "from math import sqrt\n\ndef surface_area(c):\n    return c**3\n\nprint(surface_area(1.5))"
    },
    {
      "rank": 75,
      "score": 8.0,
      "candidate": "def surface_area(c):\n    return (c**3) / 4"
    },
    {
      "rank": 76,
      "score": 8.0,
      "candidate": "def surface_area(radius):\n    return (4/3)*radius*radius\n\nprint(surface_area(4))"
    },
    {
      "rank": 77,
      "score": 8.0,
      "candidate": "import math\n\n\ndef surface_area(r, h, w):\n    return math.pi * (r * r) * (h * h) * (w * w)\n\n\ndef main():\n    print(\"Surface area of a cube is: \", surface_area(2, 1, 1))\n    print(\"Surface area of a cube is: \", surface_area(2, 4, 2))\n    print(\"Surface area of a cube is: \", surface_area(3, 3, 3))\n    print(\"Surface area of a cube is: \", surface_area(5, 5, 5))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 78,
      "score": 8.0,
      "candidate": "def surface_area(cubed):\n    return cubed * cubed * cubed"
    },
    {
      "rank": 79,
      "score": 8.0,
      "candidate": "def surfaceArea(length, width, height):\n    return length * width * height\n\n\nprint(surfaceArea(3, 5, 6))"
    },
    {
      "rank": 80,
      "score": 8.0,
      "candidate": "def surface_area(c):\n    return c**2"
    },
    {
      "rank": 81,
      "score": 8.0,
      "candidate": "def surface_area(h,w,d):\n    return h*w*d\n\nprint(surface_area(3,4,2))"
    },
    {
      "rank": 82,
      "score": 8.0,
      "candidate": "def surfaceArea(r, theta, phi):\n    return (3 * r * r) / 2 + (3 * r * r * r) / 2 + (3 * r * r * r) / 2\n\n\nprint(surfaceArea(r=3, theta=0, phi=0))\nprint(surfaceArea(r=3, theta=0, phi=90))\nprint(surfaceArea(r=3, theta=90, phi=0))"
    },
    {
      "rank": 83,
      "score": 8.0,
      "candidate": "def surface_area(length, width, height):\n    area = length * width * height\n    return area\n\nprint(surface_area(2, 3, 4))"
    },
    {
      "rank": 84,
      "score": 8.0,
      "candidate": "def surface_area(l, r, b):\n    return l * r * b\n\nl = float(input(\"Enter the length of the cube: \"))\nr = float(input(\"Enter the length of the cube: \"))\nb = float(input(\"Enter the length of the cube: \"))\n\nprint(\"The surface area of the cube is:\", surface_area(l, r, b))"
    },
    {
      "rank": 85,
      "score": 8.0,
      "candidate": "def surface_area(length, width, height):\n    return length * width * height\n\nprint(surface_area(3, 4, 5))"
    },
    {
      "rank": 86,
      "score": 8.0,
      "candidate": "def surface_area(r, theta, phi):\n    return 3.14 * r * r * r * (theta ** 2 + phi ** 2)\n\nprint(surface_area(1, 0, 0))"
    },
    {
      "rank": 87,
      "score": 8.0,
      "candidate": "def surface_area(x, y, z):\n    return (x**2 + y**2 + z**2)**(1/2)\n\n\nprint(surface_area(2, 4, 6))"
    },
    {
      "rank": 88,
      "score": 8.0,
      "candidate": "def surface_area(radius, height, width):\n    area = radius * height * width\n    return area\n\n\nif __name__ == \"__main__\":\n    print(surface_area(5, 10, 10))"
    },
    {
      "rank": 89,
      "score": 8.0,
      "candidate": "def surface_area(c):\n    return (4/3)*(c[0]**2+c[1]**2+c[2]**2)\n\nprint(surface_area([1,2,3]))"
    },
    {
      "rank": 90,
      "score": 8.0,
      "candidate": "import math\n\ndef surface_area(l, b, c):\n    return math.sqrt(l * l + b * b + c * c)"
    },
    {
      "rank": 91,
      "score": 8.0,
      "candidate": "def surface_area(length, width, height):\n    return length * width * height\n\nprint(surface_area(20, 30, 40))"
    },
    {
      "rank": 92,
      "score": 8.0,
      "candidate": "def surfaceArea(radius):\n    return 3.14 * radius ** 2\n\nprint(surfaceArea(3))"
    },
    {
      "rank": 93,
      "score": 8.0,
      "candidate": "def surface_area(c):\n    return c**3\n\nprint(surface_area(1))"
    },
    {
      "rank": 94,
      "score": 8.0,
      "candidate": "def surface_area(l, w, h):\n    return l * w * h\n\nprint(surface_area(5, 5, 5))"
    },
    {
      "rank": 95,
      "score": 8.0,
      "candidate": "import math\n\ndef surface_area(l,r,b):\n    return math.sqrt((l*l)+(r*r)+(b*b))"
    },
    {
      "rank": 96,
      "score": 1.0,
      "candidate": "def surface_area(cube_area):\n    \"\"\"\n    :type cube_area: int\n    :rtype: float\n    \"\"\"\n\n    return cube_area * 3.141592653589793\n\n\ndef main():\n    \"\"\"\n    Tests.\n    \"\"\"\n    assert surface_area(100) == 100.0\n    assert surface_area(1) == 1.0\n    assert surface_area(2) == 2.0\n    assert surface_area(3) == 4.0\n    assert surface_area(4) == 6.0\n    assert surface_area(5) == 9.0\n    assert surface_area(6) == 12.0\n    assert surface_area(7) == 15.0\n    assert surface_area(8) == 18.0\n    assert surface_area(9) == 21.0\n    assert surface_area(10) == 24.0\n    assert surface_area(11) == 28.0\n    assert surface_area(12) == 32.0\n    assert surface_area(13) == 36.0\n    assert surface_area(14) == 40.0\n    assert surface_area(15) == 48.0\n    assert surface_area(16) == 56.0\n    assert surface_area(17) == 64.0\n    assert surface_area(18) == 72.0\n    assert surface_area(19) == 96.0\n    assert surface_area(20) == 128.0\n    assert surface_area(21) == 160.0\n    assert surface_area(22) == 192.0\n    assert surface_area(23) == 288.0\n    assert surface_area(24) == 384.0\n    assert surface_area(25) == 384.0\n    assert surface_area(26) == 448.0\n    assert surface_area(27) == 448.0\n    assert surface_area(28) == 448.0\n    assert surface_area(29) == 448.0\n    assert surface_area(30) == 448.0\n    assert surface_area(31) == 448.0\n    assert surface_area(32) == 448.0\n    assert surface"
    },
    {
      "rank": 97,
      "score": 1.0,
      "candidate": "def surface_area(cube_width, cube_height, cube_depth):\n    return (cube_width * cube_height * cube_depth) ** 0.5\n\n\nprint(surface_area(5, 5, 5))"
    },
    {
      "rank": 98,
      "score": 1.0,
      "candidate": "def surface_area(c):\n    return c**3\n\n\nprint(surface_area(2))\nprint(surface_area(3))"
    },
    {
      "rank": 99,
      "score": 1.0,
      "candidate": "def surface_area(r, h, w):\n    area = 2 * r * h * w\n    return area\n\n\nprint(surface_area(1, 1, 1))\nprint(surface_area(3, 1, 1))\nprint(surface_area(4, 1, 1))"
    },
    {
      "rank": 100,
      "score": 1.0,
      "candidate": "import numpy as np\n\n\ndef surface_area(arr):\n    return np.sum(arr)\n\n\ndef test():\n    arr = np.array([0, 0, 0])\n    assert surface_area(arr) == 0\n\n    arr = np.array([1, 2, 3])\n    assert surface_area(arr) == 3\n\n    arr = np.array([1, 1, 1])\n    assert surface_area(arr) == 1\n\n    arr = np.array([1, 2, 3, 4])\n    assert surface_area(arr) == 7\n\n    arr = np.array([1, 2, 3, 4, 5])\n    assert surface_area(arr) == 9\n\n    arr = np.array([1, 2, 3, 4, 5, 6])\n    assert surface_area(arr) == 10\n\n    arr = np.array([1, 2, 3, 4, 5, 6, 7])\n    assert surface_area(arr) == 15\n\n    arr = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n    assert surface_area(arr) == 15\n\n    arr = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14])\n    assert surface_area(arr) == 20\n\n    arr = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15])\n    assert surface_area(arr) == 20\n\n    arr = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16])\n    assert surface_area(arr) == 20\n\n    arr = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18])\n    assert surface_area(arr) == 20\n\n    arr = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12,"
    }
  ]
}