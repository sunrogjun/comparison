{
  "timestamp": "2025-09-14T16:06:28.946886",
  "method": "improved_llm_judge",
  "judge_model": "codellama/CodeLlama-7b-Python-hf",
  "target_model": "codet5-770m",
  "dataset": "mbpp",
  "problem_number": 497,
  "total_candidates": 100,
  "results": [
    {
      "rank": 1,
      "score": 10.0,
      "candidate": "def same_order(list1, list2):\n    if list1 == list2:\n        return True\n    else:\n        return False\n\nlist1 = [1, 2, 3]\nlist2 = [1, 2, 3]\nprint(same_order(list1, list2))"
    },
    {
      "rank": 2,
      "score": 10.0,
      "candidate": "def common_elements(list_1, list_2):\n    return list(set(list_1).intersection(set(list_2))) == []\n\nprint(common_elements([1,2,3], [4,5,6]))\nprint(common_elements([1,2,3], [4,5,6,7]))\nprint(common_elements([1,2,3], [5,6,7]))\nprint(common_elements([1,2,3], [4,5,6,7]))\nprint(common_elements([1,2,3], [5,6,7,8]))\nprint(common_elements([1,2,3], [6,7,8]))\nprint(common_elements([1,2,3], [5,7,8]))\nprint(common_elements([1,2,3], [6,7,8,9]))\nprint(common_elements([1,2,3], [5,7,8,9,10]))"
    },
    {
      "rank": 3,
      "score": 10.0,
      "candidate": "def common_elements(list_1, list_2):\n    if len(list_1)!= len(list_2):\n        return False\n    else:\n        common_list = []\n        for i in range(len(list_1)):\n            if list_1[i] in common_list:\n                return False\n            else:\n                common_list.append(list_1[i])\n        return True\n\n\nif __name__ == '__main__':\n    list_1 = [1, 2, 3, 4, 5, 6, 7, 8]\n    list_2 = [5, 6, 7, 8, 9, 10, 11, 12]\n    print(common_elements(list_1, list_2))"
    },
    {
      "rank": 4,
      "score": 10.0,
      "candidate": "def check_list(a, b):\n    if len(a)!= len(b):\n        return False\n    if a == b:\n        return True\n    else:\n        return False\n\n\nif __name__ == \"__main__\":\n    a = [1, 2, 3, 4, 5]\n    b = [1, 2, 3, 4, 5]\n    print(check_list(a, b))"
    },
    {
      "rank": 5,
      "score": 9.370583536698913,
      "candidate": "def common_elements(a, b):\n    if len(a)!= len(b):\n        return False\n\n    for i in range(len(a)):\n        if a[i]!= b[i]:\n            return False\n\n    return True\n\nprint(common_elements([1, 2, 3, 4, 5], [2, 4, 5, 3, 1]))\nprint(common_elements([1, 2, 3, 4, 5], [1, 4, 5, 3, 2]))\nprint(common_elements([1, 2, 3, 4, 5], [1, 3, 2, 5, 4]))\nprint(common_elements([1, 2, 3, 4, 5], [3, 1, 2, 5, 4]))\nprint(common_elements([1, 2, 3, 4, 5], [3, 1, 5, 2, 4]))\nprint(common_elements([1, 2, 3, 4, 5], [1, 5, 2, 3, 4]))\nprint(common_elements([1, 2, 3, 4, 5], [2, 3, 4, 5, 1]))"
    },
    {
      "rank": 6,
      "score": 9.234050852198141,
      "candidate": "def check_common_elements(list1, list2):\n    if len(list1) == len(list2):\n        if list1 == sorted(list1):\n            return True\n        else:\n            return False\n    else:\n        return False\n\n\nprint(check_common_elements([1, 2, 3, 4, 5], [4, 5, 3, 2, 1]))\nprint(check_common_elements([1, 2, 3, 4, 5], [3, 2, 1, 4, 5]))\nprint(check_common_elements([1, 2, 3, 4, 5], [1, 4, 5, 3, 2]))"
    },
    {
      "rank": 7,
      "score": 9.226766272351448,
      "candidate": "def common_elements(l1, l2):\n    l1.sort()\n    l2.sort()\n    if l1 == l2:\n        return True\n    else:\n        return False\n\nprint(common_elements([1, 2, 3], [2, 3, 1]))\nprint(common_elements([1, 2, 3], [1, 3, 2]))\nprint(common_elements([1, 2, 3], [3, 2, 1]))"
    },
    {
      "rank": 8,
      "score": 9.21346272767743,
      "candidate": "def common_elements(list1, list2):\n    list1.sort()\n    list2.sort()\n    if list1 == list2:\n        return True\n    else:\n        return False\n\n\nif __name__ == '__main__':\n    assert common_elements([1, 2, 3, 4], [1, 2, 3, 4]) == True\n    assert common_elements([1, 2, 3, 4], [1, 2, 3]) == False\n    assert common_elements([1, 2, 3, 4], [1, 3, 4]) == True\n    assert common_elements([1, 2, 3, 4], [1, 2]) == False"
    },
    {
      "rank": 9,
      "score": 9.205959372648458,
      "candidate": "def same_order(a, b):\n    if len(a)!= len(b):\n        return False\n    else:\n        for i in range(0, len(a)):\n            if a[i]!= b[i]:\n                return False\n        return True"
    },
    {
      "rank": 10,
      "score": 9.177268828905222,
      "candidate": "def common_elements(list1, list2):\n    common = []\n    for element in list1:\n        if element in list2:\n            common.append(element)\n    return common\n\ndef main():\n    list1 = [1,2,3,4,5,6,7]\n    list2 = [2,3,4,5,6,7]\n    print(common_elements(list1, list2))\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 11,
      "score": 9.122564458729856,
      "candidate": "def common_elements(list1, list2):\n    if len(list1)!= len(list2):\n        return False\n    else:\n        for i in range(len(list1)):\n            if list1[i]!= list2[i]:\n                return False\n        return True\n\n\nif __name__ == '__main__':\n    print(common_elements([1, 2, 3], [2, 3, 1]))\n    print(common_elements([1, 2, 3], [2, 3, 4]))\n    print(common_elements([1, 2, 3, 4], [1, 2, 3, 4]))"
    },
    {
      "rank": 12,
      "score": 8.973005557553902,
      "candidate": "def common_elements(list1, list2):\n    return list(set(list1) & set(list2))\n\n\nif __name__ == \"__main__\":\n    assert common_elements([1, 2, 3, 4, 5], [1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]"
    },
    {
      "rank": 13,
      "score": 8.95994420569242,
      "candidate": "def same_order(list1, list2):\n    return list(set(list1) & set(list2))\n\n\nprint(same_order([1, 2, 3], [2, 3, 1]))\nprint(same_order([1, 2, 3], [3, 2, 1]))\nprint(same_order([1, 2, 3], [2, 1, 3]))\nprint(same_order([1, 2, 3], [1, 3, 2]))\nprint(same_order([1, 2, 3], [1, 2, 3]))"
    },
    {
      "rank": 14,
      "score": 8.946210893390457,
      "candidate": "def check_list(a, b):\n    if len(a)!= len(b):\n        return False\n    else:\n        result = []\n        for i in range(len(a)):\n            if a[i] in result:\n                return False\n            else:\n                result.append(a[i])\n        return True\n\n\nif __name__ == '__main__':\n    print(check_list([1, 2, 3, 4], [1, 2, 3, 4]))"
    },
    {
      "rank": 15,
      "score": 8.932217008005624,
      "candidate": "def common(a, b):\n    if len(a)!= len(b):\n        return False\n    else:\n        c = []\n        for i in range(len(a)):\n            if a[i] == b[i]:\n                c.append(a[i])\n        return c == sorted(c)\n\n\nprint(common([1, 2, 3], [1, 2, 3]))\nprint(common([1, 2, 3], [3, 1, 2]))\nprint(common([1, 2, 3], [1, 3, 2]))\nprint(common([1, 2, 3], [1, 2, 3, 4]))\nprint(common([1, 2, 3, 4], [1, 2, 3]))"
    },
    {
      "rank": 16,
      "score": 8.910084504002544,
      "candidate": "def common_elements(lst1, lst2):\n    if len(lst1)!= len(lst2):\n        return False\n    return set(lst1).intersection(set(lst2)) == set()\n\n\nif __name__ == '__main__':\n    print(common_elements([1, 2, 3], [2, 3, 1]))\n    print(common_elements([1, 2, 3], [2, 3, 4]))\n    print(common_elements([1, 2, 3], [4, 2, 3]))\n    print(common_elements([1, 2, 3], [4, 2, 3, 5]))\n    print(common_elements([1, 2, 3], [1, 3, 3, 5, 5]))\n    print(common_elements([1, 2, 3], [1, 3, 3, 5, 5]))"
    },
    {
      "rank": 17,
      "score": 8.85571690049604,
      "candidate": "def common_elements(lst1, lst2):\n    common_list = list(set(lst1) & set(lst2))\n    return common_list\n\n\nprint(common_elements([1, 2, 3, 4, 5], [2, 4, 6, 8, 10]))"
    },
    {
      "rank": 18,
      "score": 8.855395696632057,
      "candidate": "def common_elements(list1, list2):\n    common_list = []\n    for element in list1:\n        if element in list2:\n            common_list.append(element)\n    return common_list\n\n\nprint(common_elements([1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6]))\nprint(common_elements([1, 2, 3, 4, 5, 6], [3, 4, 5, 6, 7, 8, 9]))\nprint(common_elements([1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6]))"
    },
    {
      "rank": 19,
      "score": 8.850707355641543,
      "candidate": "def common_elements(lst1, lst2):\n    return set(lst1).intersection(set(lst2))\n\nprint(common_elements([1,2,3], [2,3,1]))\nprint(common_elements([1,2,3], [3,1,2]))"
    },
    {
      "rank": 20,
      "score": 8.8281618090209,
      "candidate": "def common_elements(list1, list2):\n    if len(list1)!= len(list2):\n        return False\n    else:\n        return sorted(list1) == sorted(list2)\n\n\nif __name__ == \"__main__\":\n    print(common_elements([1, 2, 3, 4, 5, 6], [2, 3, 4, 5, 6, 7]))"
    },
    {
      "rank": 21,
      "score": 8.81367773444215,
      "candidate": "def same_order(list1, list2):\n    return sorted(list1) == sorted(list2)\n\nif __name__ == \"__main__\":\n    print(same_order([1,2,3,4,5], [2,4,5,1,3]))\n    print(same_order([1,2,3,4,5], [2,4,5,1,3]))"
    },
    {
      "rank": 22,
      "score": 8.76828871349479,
      "candidate": "def common_elements(list1, list2):\n    if len(list1)!= len(list2):\n        return False\n    else:\n        for i in range(len(list1)):\n            if list1[i]!= list2[i]:\n                return False\n        return True\n\n\nif __name__ == '__main__':\n    print(common_elements([1, 2, 3, 4, 5], [1, 2, 3, 4, 5]))\n    print(common_elements([1, 2, 3, 4, 5], [4, 5, 3, 2, 1]))\n    print(common_elements([1, 2, 3, 4, 5], [5, 3, 2, 1, 4]))\n    print(common_elements([1, 2, 3, 4, 5], [4, 5, 2, 3, 1]))"
    },
    {
      "rank": 23,
      "score": 8.750282588864879,
      "candidate": "def common_elements(list1, list2):\n    return list(set(list1) & set(list2))\n\nprint(common_elements([1, 2, 3, 4, 5], [2, 4, 5]))\nprint(common_elements([1, 2, 3, 4, 5], [3, 4, 5]))\nprint(common_elements([1, 2, 3, 4, 5], [2, 3, 4]))"
    },
    {
      "rank": 24,
      "score": 8.715724466237427,
      "candidate": "def check_order(list1, list2):\n    return sorted(list1) == sorted(list2)\n\nprint(check_order([1,2,3,4,5,6], [4,5,6,7,8,9]))\nprint(check_order([1,2,3,4,5,6], [2,4,5,6,7,8,9]))\nprint(check_order([1,2,3,4,5,6], [2,3,4,5,6,7,8,9]))"
    },
    {
      "rank": 25,
      "score": 8.692801520950061,
      "candidate": "def same_order(a, b):\n    if len(a)!= len(b):\n        return False\n    return sorted(a) == sorted(b)\n\n\nprint(same_order([1, 2, 3, 4, 5], [1, 2, 3, 4, 5]))"
    },
    {
      "rank": 26,
      "score": 8.632293453617281,
      "candidate": "def common_elements(a, b):\n    return set(a) & set(b) == set(a) & set(b)\n\n\na = [1, 2, 3, 4, 5]\nb = [3, 5, 5, 7, 9]\nprint(common_elements(a, b))"
    },
    {
      "rank": 27,
      "score": 8.625262456968262,
      "candidate": "def common_elements(arr1, arr2):\n  if len(arr1) > len(arr2):\n    arr1, arr2 = arr2, arr1\n  return sorted(arr1) == sorted(arr2)"
    },
    {
      "rank": 28,
      "score": 8.625142247198651,
      "candidate": "def common_elements(a, b):\n    if len(a)!= len(b):\n        return False\n    else:\n        for i in range(len(a)):\n            if a[i]!= b[i]:\n                return False\n        return True\n\n\nprint(common_elements([1, 2, 3], [2, 3, 1]))\nprint(common_elements([1, 2, 3], [1, 2, 3]))\nprint(common_elements([1, 2, 3], [1, 3, 2]))\nprint(common_elements([1, 2, 3], [1, 2, 3, 4]))"
    },
    {
      "rank": 29,
      "score": 8.623000730200317,
      "candidate": "def check_common_elements(list1, list2):\n    if len(list1)!= len(list2):\n        return False\n    return sorted(list1) == sorted(list2)\n\n\nprint(check_common_elements([1, 2, 3, 4, 5], [5, 2, 4, 3, 1]))"
    },
    {
      "rank": 30,
      "score": 8.616253589228675,
      "candidate": "def check_list_order(list1, list2):\n    if len(list1)!= len(list2):\n        return False\n\n    dict_list1 = {}\n    dict_list2 = {}\n\n    for i in range(len(list1)):\n        dict_list1[list1[i]] = i\n\n    for i in range(len(list2)):\n        dict_list2[list2[i]] = i\n\n    for key in dict_list1.keys():\n        if key not in dict_list2.keys():\n            return False\n\n    return True\n\n\nif __name__ == \"__main__\":\n    print(check_list_order([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [9, 8, 7, 6, 5, 4, 3, 2, 1]))"
    },
    {
      "rank": 31,
      "score": 8.610076160146226,
      "candidate": "def common_list_elements(list1, list2):\n    if len(list1)!= len(list2):\n        return False\n    common_list = []\n    for i in range(len(list1)):\n        if list1[i] in list2:\n            common_list.append(list1[i])\n    return common_list\n\n\nif __name__ == \"__main__\":\n    print(common_list_elements([1, 2, 3, 4], [2, 3, 4, 1]))\n    print(common_list_elements([1, 2, 3, 4], [3, 4, 1, 2]))\n    print(common_list_elements([1, 2, 3, 4], [1, 2, 3, 4]))\n    print(common_list_elements([1, 2, 3, 4], [1, 2, 3, 4]))\n    print(common_list_elements([1, 2, 3, 4], [1, 2, 3, 4]))"
    },
    {
      "rank": 32,
      "score": 8.606486429141842,
      "candidate": "def check_if_common_elements(list1, list2):\n    if len(list1)!= len(list2):\n        return False\n    else:\n        return all(x == y for x, y in zip(list1, list2))\n\nprint(check_if_common_elements([1, 2, 3, 4, 5], [1, 2, 3, 4, 5]))\nprint(check_if_common_elements([1, 2, 3, 4, 5], [1, 2, 4, 5]))\nprint(check_if_common_elements([1, 2, 3, 4, 5], [4, 5, 1, 2, 3]))\nprint(check_if_common_elements([1, 2, 3, 4, 5], [1, 4, 5, 3, 2]))\nprint(check_if_common_elements([1, 2, 3, 4, 5], [1, 2, 3, 4]))"
    },
    {
      "rank": 33,
      "score": 8.60156811074208,
      "candidate": "def check_same_order(l1, l2):\n    if len(l1)!= len(l2):\n        return False\n    for i in range(len(l1)):\n        if l1[i]!= l2[i]:\n            return False\n    return True\n\n\nprint(check_same_order([1, 2, 3, 4], [2, 3, 4, 1]))\nprint(check_same_order([1, 2, 3, 4], [4, 3, 2, 1]))\nprint(check_same_order([1, 2, 3, 4], [5, 3, 2, 1]))\nprint(check_same_order([1, 2, 3, 4], [6, 3, 2, 1]))\nprint(check_same_order([1, 2, 3, 4], [1, 3, 2, 4]))"
    },
    {
      "rank": 34,
      "score": 8.565425580227462,
      "candidate": "def same_order(l1, l2):\n    return sorted(l1) == sorted(l2)\n\nprint(same_order([1, 2, 3, 4], [1, 2, 3]))\nprint(same_order([1, 2, 3, 4], [2, 1, 3, 4]))\nprint(same_order([1, 2, 3, 4], [1, 2, 3, 5]))"
    },
    {
      "rank": 35,
      "score": 8.548876241946822,
      "candidate": "def common_elements(a, b):\n    if len(a) == len(b):\n        for i in a:\n            if i not in b:\n                return False\n        return True\n    else:\n        return False\n\n\nif __name__ == '__main__':\n    print(common_elements([1, 2, 3, 4], [1, 2, 3, 4]))\n    print(common_elements([1, 2, 3, 4], [4, 2, 3, 1]))\n    print(common_elements([1, 2, 3, 4], [3, 4, 2, 1]))\n    print(common_elements([1, 2, 3, 4], [4, 2, 3, 1, 5]))\n    print(common_elements([1, 2, 3, 4], [2, 3, 4, 1]))\n    print(common_elements([1, 2, 3, 4], [4, 2, 3, 1, 5]))\n    print(common_elements([1, 2, 3, 4], [4, 2, 3, 5]))\n    print(common_elements([1, 2, 3, 4], [1, 3, 4, 4, 2]))"
    },
    {
      "rank": 36,
      "score": 8.542875062379007,
      "candidate": "def same_list(a, b):\n    if len(a)!= len(b):\n        return False\n    else:\n        return sorted(a) == sorted(b)\n\n\nif __name__ == \"__main__\":\n    assert same_list([1, 2, 3], [2, 3, 1]) == True\n    assert same_list([1, 2, 3], [4, 2, 3]) == False\n    assert same_list([1, 2, 3], [2, 4, 3]) == True"
    },
    {
      "rank": 37,
      "score": 8.53012858503943,
      "candidate": "def common_elements(a, b):\n    if len(a)!= len(b):\n        return False\n    else:\n        return all(a[i] == b[i] for i in range(len(a)))\n\n\nprint(common_elements([1, 2, 3], [1, 3, 2]))\nprint(common_elements([1, 2, 3], [2, 3, 1]))\nprint(common_elements([1, 2, 3], [1, 1, 2]))"
    },
    {
      "rank": 38,
      "score": 8.499905739299377,
      "candidate": "def common(a,b):\n    if len(a)!= len(b):\n        return False\n    return set(a) & set(b)\n\nif __name__ == \"__main__\":\n    assert common([1,2,3],[1,2,3]) == True\n    assert common([1,2,3],[3,1,2]) == False\n    assert common([1,2,3],[1,2,3,4]) == False\n    assert common([1,2,3],[3,1,2,4]) == True\n    assert common([1,2,3],[1,2,3,4]) == False\n    assert common([1,2,3],[1,3,1,2]) == False\n    assert common([1,2,3],[3,1,2,4]) == False"
    },
    {
      "rank": 39,
      "score": 8.490324832712195,
      "candidate": "def common_elements(list1, list2):\n    list1.sort()\n    list2.sort()\n\n    common = []\n    for i in range(len(list1)):\n        if list1[i] in common:\n            return False\n        else:\n            common.append(list1[i])\n    return True\n\n\n\n\n\nprint(common_elements([1,2,3,4], [2,3,4,5]))\nprint(common_elements([1,2,3,4], [5,3,4,2]))\nprint(common_elements([1,2,3,4], [1,2,3,5]))\nprint(common_elements([1,2,3,4], [5,1,4,2]))\nprint(common_elements([1,2,3,4], [1,2,3,5]))"
    },
    {
      "rank": 40,
      "score": 8.48796797856353,
      "candidate": "def common_elements(list1, list2):\n    # write your code here\n    if len(list1)!= len(list2):\n        return False\n    else:\n        return sorted(list1) == sorted(list2)\n\nif __name__ == '__main__':\n    assert common_elements([1,2,3,4,5], [5,4,3,2,1]) == True"
    },
    {
      "rank": 41,
      "score": 8.478208546788407,
      "candidate": "def same_order(l1, l2):\n    common_elements = []\n    for i in range(min(len(l1), len(l2))):\n        if l1[i] in common_elements:\n            return False\n        else:\n            common_elements.append(l1[i])\n    return True\n\n\nprint(same_order([1, 2, 3, 4, 5, 6], [2, 3, 5, 4, 6, 7]))\nprint(same_order([1, 2, 3, 4, 5, 6], [7, 8, 9, 10, 11, 12]))\nprint(same_order([1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6]))"
    },
    {
      "rank": 42,
      "score": 8.437695832075478,
      "candidate": "def same_order(lst1, lst2):\n    return list(set(lst1) & set(lst2)) == []\n\n\nprint(same_order([1, 2, 3, 4, 5], [1, 2, 3, 4, 5]))"
    },
    {
      "rank": 43,
      "score": 8.426531424889468,
      "candidate": "def same_list(list1, list2):\n    list1_set = set(list1)\n    list2_set = set(list2)\n    return list1_set == list2_set\n\n\nprint(same_list([1, 2, 3, 4, 5], [2, 3, 4, 5]))\nprint(same_list([1, 2, 3, 4, 5], [2, 3, 4, 5]))\nprint(same_list([1, 2, 3, 4, 5], [1, 2, 4, 5]))\nprint(same_list([1, 2, 3, 4, 5], [2, 4, 5, 3, 3]))\nprint(same_list([1, 2, 3, 4, 5], [3, 4, 5, 2, 2]))"
    },
    {
      "rank": 44,
      "score": 8.408439383654278,
      "candidate": "def common_elements(l1, l2):\n    if len(l1)!= len(l2):\n        return False\n    elif set(l1)!= set(l2):\n        return False\n    else:\n        return True\n\n\nprint(common_elements([1, 2, 3, 4], [2, 4, 6, 8]))"
    },
    {
      "rank": 45,
      "score": 8.386620303250325,
      "candidate": "def common_elements(a, b):\n    return sorted(set(a) & set(b)) == sorted(set(a) | set(b))\n\n\nif __name__ == \"__main__\":\n    assert common_elements([1, 1, 2, 2, 2, 3, 3, 3], [1, 2, 3, 3, 3, 3, 3]) == True\n    assert common_elements([1, 2, 2, 3, 3, 3], [1, 2, 3, 3, 3, 3]) == False"
    },
    {
      "rank": 46,
      "score": 8.375312293858853,
      "candidate": "def is_same_order(list_1, list_2):\n    return len(set(list_1).intersection(set(list_2))) == 0\n\n\nprint(is_same_order([1, 2, 3, 4], [4, 3, 2, 1]))"
    },
    {
      "rank": 47,
      "score": 8.351614956112536,
      "candidate": "def same_elements(list1, list2):\n    list1.sort()\n    list2.sort()\n    return list1 == list2"
    },
    {
      "rank": 48,
      "score": 8.334608500525688,
      "candidate": "def common_elements(l1, l2):\n    if len(l1)!= len(l2):\n        return False\n    else:\n        l1.sort()\n        l2.sort()\n        return l1 == l2\n\n\nprint(common_elements([1, 2, 3], [2, 3, 1]))\nprint(common_elements([1, 2, 3], [2, 3, 1, 4]))\nprint(common_elements([1, 2, 3], [4, 3, 1, 2]))\nprint(common_elements([1, 2, 3], [1, 3, 4, 2]))"
    },
    {
      "rank": 49,
      "score": 8.331556294201176,
      "candidate": "def check_common_elements(list1, list2):\n    # Write your code here\n    # 1. Sort the two lists\n    list1.sort()\n    list2.sort()\n    # 2. Check if the first and second lists are the same length\n    if len(list1)!= len(list2):\n        return False\n    # 3. Check if the first and second list are the same elements\n    for i in range(len(list1)):\n        if list1[i]!= list2[i]:\n            return False\n    return True\n\nprint(check_common_elements([1, 2, 3, 4, 5], [1, 2, 3, 4, 5]))"
    },
    {
      "rank": 50,
      "score": 8.327375965969855,
      "candidate": "def same_order(list1, list2):\n    return sorted(list1) == sorted(list2)\n\n\nprint(same_order([1, 2, 3, 4, 5], [4, 5, 3, 2, 1]))"
    },
    {
      "rank": 51,
      "score": 8.327367757082776,
      "candidate": "def common_elements(list1, list2):\n    list1.sort()\n    list2.sort()\n\n    if list1 == list2:\n        return True\n    else:\n        return False\n\n\nlist1 = [1, 2, 3]\nlist2 = [1, 2, 3]\nprint(common_elements(list1, list2))"
    },
    {
      "rank": 52,
      "score": 8.298597569547805,
      "candidate": "def same_order(arr1, arr2):\n    if arr1 == arr2:\n        return True\n    else:\n        return False\n\nprint(same_order([1, 2, 3], [2, 3, 1]))\nprint(same_order([1, 2, 3], [3, 1, 2]))\nprint(same_order([1, 2, 3], [1, 3, 2]))"
    },
    {
      "rank": 53,
      "score": 8.294940769211511,
      "candidate": "def common_elements(list1, list2):\n    if len(list1)!= len(list2):\n        return False\n    else:\n        common_list = []\n        for i in range(len(list1)):\n            if list1[i] in common_list:\n                return False\n            else:\n                common_list.append(list1[i])\n        return True\n\n\nprint(common_elements([1, 2, 3, 4, 5], [2, 3, 4, 5]))"
    },
    {
      "rank": 54,
      "score": 8.2938925966498,
      "candidate": "def same_order(list1, list2):\n    if len(list1)!= len(list2):\n        return False\n    for i in range(len(list1)):\n        if list1[i] not in list2:\n            return False\n    return True\n\nprint(same_order([1, 2, 3, 4, 5], [2, 3, 4, 5, 6]))\nprint(same_order([1, 2, 3, 4, 5], [2, 3, 4, 5, 6]))\nprint(same_order([1, 2, 3, 4, 5], [4, 5, 6, 7, 8]))\nprint(same_order([1, 2, 3, 4, 5], [1, 2, 3, 4, 5]))\nprint(same_order([1, 2, 3, 4, 5], [1, 2, 3, 4, 5]))\nprint(same_order([1, 2, 3, 4, 5], [4, 5, 6, 7, 8]))"
    },
    {
      "rank": 55,
      "score": 8.289838256518838,
      "candidate": "def common_elements(list1, list2):\n    common = []\n    for i in list1:\n        if i in list2:\n            common.append(i)\n    return common\n\n\nprint(common_elements([1, 2, 3], [2, 3, 4]))\nprint(common_elements([2, 3, 4], [1, 2, 3]))\nprint(common_elements([2, 3, 4], [3, 4, 1]))"
    },
    {
      "rank": 56,
      "score": 8.251903304236286,
      "candidate": "def common_elements(list1, list2):\n    # Write your code here\n    list1 = sorted(list1)\n    list2 = sorted(list2)\n    if list1 == list2:\n        return True\n    else:\n        return False\n\nprint(common_elements([1, 2, 3], [1, 2, 3]))\nprint(common_elements([1, 2, 3], [3, 1, 2]))\nprint(common_elements([1, 2, 3], [2, 1, 3]))\nprint(common_elements([1, 2, 3], [1, 2, 3, 4]))\nprint(common_elements([1, 2, 3], [2, 3, 1]))\nprint(common_elements([1, 2, 3], [3, 1, 2]))\nprint(common_elements([1, 2, 3], [3, 4, 1]))\nprint(common_elements([1, 2, 3], [2, 3, 4]))"
    },
    {
      "rank": 57,
      "score": 8.214125058964552,
      "candidate": "def common_elements(a, b):\n    return list(set(a) & set(b))\n\n\na = [1, 2, 3]\nb = [1, 2, 3]\nprint(common_elements(a, b))"
    },
    {
      "rank": 58,
      "score": 8.212735598038213,
      "candidate": "def common_elements(list1, list2):\n    if len(list1)!= len(list2):\n        return False\n    else:\n        return list(set(list1) & set(list2))\n\nprint(common_elements([1, 2, 3], [2, 3, 1]))\nprint(common_elements([1, 2, 3], [3, 1, 2]))"
    },
    {
      "rank": 59,
      "score": 8.211579567659316,
      "candidate": "def common_elements(list1, list2):\n    if len(list1)!= len(list2):\n        return False\n    common = []\n    for i in range(len(list1)):\n        if list1[i] in common:\n            return False\n        common.append(list1[i])\n    return True\n\n\nlist1 = [1, 2, 3, 4]\nlist2 = [2, 3, 4, 1]\nprint(common_elements(list1, list2))"
    },
    {
      "rank": 60,
      "score": 8.209707251476969,
      "candidate": "def same_elements(l1, l2):\n    if len(l1)!= len(l2):\n        return False\n    if l1 == []:\n        return True\n    if l2 == []:\n        return True\n\n    if l1[0] == l2[0]:\n        return same_elements(l1[1:], l2[1:])\n    else:\n        return False\n\nif __name__ == \"__main__\":\n    print(same_elements([1, 2, 3], [1, 2, 3]))\n    print(same_elements([1, 2, 3], [2, 3, 4]))\n    print(same_elements([1, 2, 3], [4, 3, 2]))\n    print(same_elements([1, 2, 3], [3, 2, 4]))\n    print(same_elements([1, 2, 3], [3, 4, 2]))\n    print(same_elements([1, 2, 3], [2, 4, 3]))"
    },
    {
      "rank": 61,
      "score": 8.2048573255218,
      "candidate": "def common_elements(list1, list2):\n    if len(list1)!= len(list2):\n        return False\n\n    list1.sort()\n    list2.sort()\n\n    for i in range(len(list1)):\n        if list1[i]!= list2[i]:\n            return False\n\n    return True\n\n\nif __name__ == \"__main__\":\n    print(common_elements([1, 1, 1, 1, 1, 1, 2], [1, 1, 2, 1, 1, 1, 1]))"
    },
    {
      "rank": 62,
      "score": 8.172253082181854,
      "candidate": "def common_elements(a,b):\n  if len(a)!= len(b):\n    return False\n  i = 0\n  while i < len(a):\n    if a[i]!= b[i]:\n      return False\n    i += 1\n  return True\n\na = [1,2,3,4,5,6,7]\nb = [2,3,4,5,6,7]\nprint(common_elements(a,b))"
    },
    {
      "rank": 63,
      "score": 8.163300679823958,
      "candidate": "def same_order(list1, list2):\n    return list(set(list1) & set(list2)) == []\n\n\nprint(same_order([1, 2, 3, 4], [4, 3, 2, 1]))"
    },
    {
      "rank": 64,
      "score": 8.144125099485041,
      "candidate": "def same_order(a, b):\n    if len(a)!= len(b):\n        return False\n    for i in range(len(a)):\n        if a[i]!= b[i]:\n            return False\n    return True\n\nprint(same_order([1, 2, 3, 4], [2, 3, 4, 1]))"
    },
    {
      "rank": 65,
      "score": 8.143591138329747,
      "candidate": "def common_elements(a,b):\n    return list(set(a) & set(b))\n\nprint(common_elements([1,2,3],[1,2,3]))\nprint(common_elements([1,2,3],[1,3,2]))"
    },
    {
      "rank": 66,
      "score": 8.121884567141883,
      "candidate": "def check_common_elements(list1, list2):\n    if len(list1)!= len(list2):\n        return False\n\n    common_list = []\n    for i in range(len(list1)):\n        if list1[i] in common_list:\n            return False\n        else:\n            common_list.append(list1[i])\n\n    return True\n\nprint(check_common_elements([1,2,3], [1,2,3]))\nprint(check_common_elements([1,2,3], [1,2,3]))\nprint(check_common_elements([1,2,3], [1,2,3]))\nprint(check_common_elements([1,2,3], [1,2,3]))\nprint(check_common_elements([1,2,3], [1,2,3]))\nprint(check_common_elements([1,2,3], [1,2,3]))\nprint(check_common_elements([1,2,3], [1,3,3]))"
    },
    {
      "rank": 67,
      "score": 8.105983444291466,
      "candidate": "def common_elements(list1, list2):\n    if len(list1)!= len(list2):\n        return False\n    common_list = list(set(list1) & set(list2))\n    return len(common_list) == len(set(common_list))\n\n\nprint(common_elements([1, 2, 3, 4, 5], [4, 5, 3, 2, 1]))"
    },
    {
      "rank": 68,
      "score": 8.08452234024709,
      "candidate": "def common_elements(list1, list2):\n    common = set(list1) & set(list2)\n    return len(common) == 0"
    },
    {
      "rank": 69,
      "score": 8.024835682833125,
      "candidate": "def same_order(l1, l2):\n  if len(l1)!= len(l2):\n    return False\n\n  sorted_l1 = sorted(l1)\n  sorted_l2 = sorted(l2)\n\n  return sorted_l1 == sorted_l2\n\nprint(same_order([1, 2, 3, 4, 5], [4, 5, 3, 2, 1]))\nprint(same_order([1, 2, 3, 4, 5], [3, 2, 1, 4, 5]))\nprint(same_order([1, 2, 3, 4, 5], [5, 2, 3, 1, 4]))"
    },
    {
      "rank": 70,
      "score": 7.990432406683839,
      "candidate": "def same_order(list1, list2):\n    if len(list1)!= len(list2):\n        return False\n    common = []\n    for i in range(len(list1)):\n        if list1[i] in list2:\n            common.append(list1[i])\n    return len(common) == len(set(common))\n\nprint(same_order([1, 2, 3, 4, 5], [1, 2, 3, 4, 5]))\nprint(same_order([1, 2, 3, 4, 5], [5, 4, 3, 2, 1]))\nprint(same_order([1, 2, 3, 4, 5], [2, 3, 4, 5, 1]))"
    },
    {
      "rank": 71,
      "score": 7.938028884277233,
      "candidate": "def check_order(list_1, list_2):\n    # Sort lists\n    list_1.sort()\n    list_2.sort()\n\n    # Check if the common elements are in the same order\n    for i in range(len(list_1)):\n        if list_1[i]!= list_2[i]:\n            return False\n\n    return True"
    },
    {
      "rank": 72,
      "score": 7.915588979966494,
      "candidate": "def common_elements(list1, list2):\n    return list(set(list1) & set(list2))"
    },
    {
      "rank": 73,
      "score": 7.8912769574414305,
      "candidate": "def same_order(list_1, list_2):\n    if len(list_1)!= len(list_2):\n        return False\n    else:\n        return set(list_1) == set(list_2)\n\n\nif __name__ == \"__main__\":\n    assert same_order([1, 2, 3], [1, 2, 3]) == True\n    assert same_order([1, 2, 3], [1, 2]) == False\n    assert same_order([1, 2, 3], [3, 2, 1]) == True\n    assert same_order([1, 2, 3], [3, 1, 2]) == False\n    assert same_order([1, 2, 3], [1, 2, 3, 1]) == True\n    assert same_order([1, 2, 3], [3, 1, 2, 1]) == False\n    assert same_order([1, 2, 3], [1, 2, 3, 3]) == False\n    assert same_order([1, 2, 3], [1, 2, 3, 3]) == True\n    assert same_order([1, 2, 3], [3, 1, 2]) == False"
    },
    {
      "rank": 74,
      "score": 7.868947655733293,
      "candidate": "def common_elements(list1, list2):\n    list1.sort()\n    list2.sort()\n\n    for i in range(len(list1)):\n        if list1[i] not in list2:\n            return False\n    return True\n\nif __name__ == '__main__':\n    print(common_elements([1, 2, 3, 4, 5], [2, 3, 4, 5, 1]))\n    print(common_elements([1, 2, 3, 4, 5], [2, 3, 5, 4, 1]))\n    print(common_elements([1, 2, 3, 4, 5], [1, 2, 3, 4, 5]))\n    print(common_elements([1, 2, 3, 4, 5], [1, 2, 3, 4, 5]))\n    print(common_elements([1, 2, 3, 4, 5], [2, 3, 4, 5, 1]))"
    },
    {
      "rank": 75,
      "score": 7.84634113240411,
      "candidate": "def common_elements(a, b):\n    if len(a)!= len(b):\n        return False\n\n    common_list = []\n    for i in range(len(a)):\n        if a[i] in b:\n            common_list.append(a[i])\n\n    return common_list == sorted(common_list)\n\nprint(common_elements([1,2,3], [2,3,1]))\nprint(common_elements([1,2,3], [3,2,1]))\nprint(common_elements([1,2,3], [2,3,2]))\nprint(common_elements([1,2,3], [2,3,3]))"
    },
    {
      "rank": 76,
      "score": 7.834022619458933,
      "candidate": "def common_elements(list1, list2):\n    if len(list1)!= len(list2):\n        return False\n    else:\n        return set(list1) & set(list2) == set()\n\n\nprint(common_elements([1, 2, 3, 4], [1, 2, 3, 4]))\nprint(common_elements([1, 2, 3, 4], [2, 2, 3, 4]))"
    },
    {
      "rank": 77,
      "score": 7.780351419995229,
      "candidate": "def common_elements(list1, list2):\n    if list1 == list2:\n        return True\n    else:\n        return False\n\nprint(common_elements([1,2,3], [2,3,1]))\nprint(common_elements([1,2,3], [1,3,2]))\nprint(common_elements([1,2,3], [2,3,1]))\nprint(common_elements([1,2,3], [2,3,4]))\nprint(common_elements([1,2,3], [1,4,2]))"
    },
    {
      "rank": 78,
      "score": 7.738292593776799,
      "candidate": "def same_order(a, b):\n    return sorted(a) == sorted(b)\n\n\nprint(same_order([1, 2, 3, 4, 5, 6], [2, 4, 6, 8, 10]))"
    },
    {
      "rank": 79,
      "score": 7.7320703513377165,
      "candidate": "def same_order(arr1, arr2):\n    return sorted(arr1) == sorted(arr2)\n\nprint(same_order([1, 2, 3, 4], [2, 3, 4, 1]))"
    },
    {
      "rank": 80,
      "score": 7.705183449260731,
      "candidate": "def common_elements(list1,list2):\n    count = 0\n    for i in list1:\n        for j in list2:\n            if i == j:\n                count += 1\n    return count == len(list1)\n\nprint(common_elements([1,2,3,4,5],[1,2,3,4,5]))\nprint(common_elements([1,2,3,4,5],[2,3,4,5]))\nprint(common_elements([1,2,3,4,5],[2,3,4,5,6]))\nprint(common_elements([1,2,3,4,5],[6,5,4,3,2]))"
    },
    {
      "rank": 81,
      "score": 7.5819855281879285,
      "candidate": "def common_elements(list1, list2):\n    list1.sort()\n    list2.sort()\n\n    return list1 == list2"
    },
    {
      "rank": 82,
      "score": 7.562924366763077,
      "candidate": "def common_elements(list1, list2):\n    common = []\n    for i in range(len(list1)):\n        if list1[i] in list2:\n            common.append(list1[i])\n    return common\n\n\nprint(common_elements([1, 2, 3], [2, 3, 1]))\nprint(common_elements([1, 2, 3], [2, 3, 1, 4]))\nprint(common_elements([1, 2, 3], [1, 2, 4, 5]))\nprint(common_elements([1, 2, 3], [4, 5, 1, 2]))"
    },
    {
      "rank": 83,
      "score": 7.4878043221155455,
      "candidate": "def common(list1, list2):\n    if len(list1)!= len(list2):\n        return False\n    else:\n        return sorted(list1) == sorted(list2)"
    },
    {
      "rank": 84,
      "score": 7.464609382504557,
      "candidate": "def common_elements(list1, list2):\n    common_list = []\n\n    for i in range(len(list1)):\n        if list1[i] in common_list:\n            return False\n        else:\n            common_list.append(list1[i])\n    return True\n\n\nprint(common_elements([1, 2, 3, 4, 5], [2, 3, 4, 5]))\nprint(common_elements([1, 2, 3, 4, 5], [1, 2, 3, 4, 5]))\nprint(common_elements([1, 2, 3, 4, 5], [1, 2, 3, 4, 5]))\nprint(common_elements([1, 2, 3, 4, 5], [2, 3, 4, 5, 6]))\nprint(common_elements([1, 2, 3, 4, 5], [1, 2, 3, 4, 5]))\nprint(common_elements([1, 2, 3, 4, 5], [1, 2, 3, 4, 5]))\nprint(common_elements([1, 2, 3, 4, 5], [2, 3, 4, 5]))\nprint(common_elements([1, 2, 3, 4, 5], [1, 2, 3, 4, 5]))\nprint(common_elements([1, 2, 3, 4, 5], [1, 2, 3, 4, 5]))\nprint(common_elements([1, 2, 3, 4, 5], [1, 2, 3, 4, 5]))"
    },
    {
      "rank": 85,
      "score": 7.4506599871439985,
      "candidate": "def common_elements(list1, list2):\n    return list(set(list1).intersection(list2))\n\nprint(common_elements([1, 2, 3, 4, 5, 6], [2, 3, 4, 5, 6]))"
    },
    {
      "rank": 86,
      "score": 7.134571892399572,
      "candidate": "def check_common_elements(list_1, list_2):\n    common_elements = []\n    for i in range(len(list_1)):\n        if list_1[i] in list_2:\n            common_elements.append(list_1[i])\n    if len(common_elements) == len(set(common_elements)):\n        return True\n    else:\n        return False\n\n\nprint(check_common_elements([1, 2, 3, 4, 5], [2, 4, 3, 5, 6]))\nprint(check_common_elements([1, 2, 3, 4, 5], [1, 2, 4, 3, 5]))\nprint(check_common_elements([1, 2, 3, 4, 5], [3, 5, 5, 5, 5]))\nprint(check_common_elements([1, 2, 3, 4, 5], [2, 4, 3, 5, 6]))\nprint(check_common_elements([1, 2, 3, 4, 5], [1, 2, 4, 3, 5]))"
    },
    {
      "rank": 87,
      "score": 3.0,
      "candidate": "def common_elements(list_a, list_b):\n    # Write your code here\n    return list(set(list_a).intersection(set(list_b))) == []"
    },
    {
      "rank": 88,
      "score": 3.0,
      "candidate": "def common(a, b):\n    return sorted(set(a) & set(b)) == sorted(set(a) | set(b))\n\n\nprint(common([1, 2, 3, 4, 5], [4, 5, 3, 2, 1]))\nprint(common([1, 2, 3, 4, 5], [2, 3, 4, 5, 1]))\nprint(common([1, 2, 3, 4, 5], [2, 3, 4, 5, 1]))\nprint(common([1, 2, 3, 4, 5], [1, 2, 3, 4, 5]))"
    },
    {
      "rank": 89,
      "score": 3.0,
      "candidate": "def is_common(list1, list2):\n    return sorted(list1) == sorted(list2)\n\nif __name__ == '__main__':\n    print(is_common([1, 2, 3, 4, 5], [2, 3, 4, 5]))\n    print(is_common([1, 2, 3, 4, 5], [3, 4, 5, 6]))\n    print(is_common([1, 2, 3, 4, 5], [1, 2, 3, 4, 5]))\n    print(is_common([1, 2, 3, 4, 5], [1, 2, 3, 4, 5]))\n    print(is_common([1, 2, 3, 4, 5], [1, 2, 3, 4, 5]))\n    print(is_common([1, 2, 3, 4, 5], [1, 2, 3, 4, 5]))\n    print(is_common([1, 2, 3, 4, 5], [1, 2, 3, 4, 5]))\n    print(is_common([1, 2, 3, 4, 5], [1, 2, 3, 4, 5]))\n    print(is_common([1, 2, 3, 4, 5], [1, 2, 3, 4, 5]))\n    print(is_common([1, 2, 3, 4, 5], [1, 2, 3, 4, 5]))\n    print(is_common([1, 2, 3, 4, 5], [1, 2, 3, 4, 5]))"
    },
    {
      "rank": 90,
      "score": 3.0,
      "candidate": "def common_elements(list1, list2):\n    list1 = list(set(list1))\n    list2 = list(set(list2))\n    return list1 == list2\n\nif __name__ == \"__main__\":\n    print(common_elements([1, 2, 3, 4, 5], [2, 3, 4, 5, 6]))\n    print(common_elements([1, 2, 3, 4, 5], [1, 2, 3, 4, 5]))\n    print(common_elements([1, 2, 3, 4, 5], [1, 2, 3, 4, 5]))\n    print(common_elements([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6]))\n    print(common_elements([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6, 7]))\n    print(common_elements([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6, 7, 8]))\n    print(common_elements([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6]))\n    print(common_elements([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6, 7, 8]))\n    print(common_elements([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))"
    },
    {
      "rank": 91,
      "score": 3.0,
      "candidate": "def common_elements(list1, list2):\n    # write your code here\n    if len(list1)!= len(list2):\n        return False\n    else:\n        dict_list = {}\n        for i in range(len(list1)):\n            if list1[i] in dict_list:\n                dict_list[list1[i]].append(list2[i])\n            else:\n                dict_list[list1[i]] = [list2[i]]\n        for k in dict_list:\n            if len(dict_list[k])!= len(set(dict_list[k])):\n                return False\n        return True\n\n\nprint(common_elements([1, 2, 3, 4], [1, 2, 3, 4]))"
    },
    {
      "rank": 92,
      "score": 3.0,
      "candidate": "def same_order(lst1, lst2):\n    return sorted(lst1) == sorted(lst2)\n\n\nprint(same_order([1, 2, 3, 4, 5], [2, 3, 4, 5, 6]))\nprint(same_order([1, 2, 3, 4, 5], [5, 6, 4, 3, 2]))\nprint(same_order([1, 2, 3, 4, 5], [6, 4, 3, 2, 1]))"
    },
    {
      "rank": 93,
      "score": 3.0,
      "candidate": "def same_order(list1, list2):\n    if len(list1)!= len(list2):\n        return False\n    for i in range(len(list1)):\n        if list1[i]!= list2[i]:\n            return False\n    return True\n\n\n\nlist1 = [1,2,3,4,5,6,7]\nlist2 = [3,5,6,7,9,8]\nprint(same_order(list1, list2))"
    },
    {
      "rank": 94,
      "score": 3.0,
      "candidate": "def check_common(a, b):\n    return a == b\n\n\nprint(check_common([1, 1, 1], [1, 2, 3]))\nprint(check_common([1, 2, 1], [2, 1, 3]))\nprint(check_common([1, 2, 1], [1, 2, 2]))\nprint(check_common([1, 2, 1], [1, 2, 3]))"
    },
    {
      "rank": 95,
      "score": 3.0,
      "candidate": "def common_elements(list1, list2):\n    list1 = sorted(list1)\n    list2 = sorted(list2)\n    for x in list1:\n        if x not in list2:\n            return False\n    return True\n\nprint(common_elements([1, 2, 3, 4, 5], [2, 3, 4, 5, 6]))\nprint(common_elements([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]))\nprint(common_elements([1, 2, 3, 4, 5], [6, 7, 8, 9]))"
    },
    {
      "rank": 96,
      "score": 3.0,
      "candidate": "def common_elements(a, b):\n    if len(a)!= len(b):\n        return False\n    return sorted(a) == sorted(b)\n\nprint(common_elements([1,2,3], [1,2,3]))\nprint(common_elements([1,2,3], [2,3,1]))\nprint(common_elements([1,2,3], [2,3,1,5]))\nprint(common_elements([1,2,3], [2,3,5,1]))\nprint(common_elements([1,2,3], [3,4,5,1]))\nprint(common_elements([1,2,3], [3,4,5]))\nprint(common_elements([1,2,3], [3,4,5,4]))\nprint(common_elements([1,2,3], [3,4,5,5,6]))\nprint(common_elements([1,2,3], [3,4,5,6,7]))\nprint(common_elements([1,2,3], [3,4,5,6,7,8]))"
    },
    {
      "rank": 97,
      "score": 3.0,
      "candidate": "def check_same_order(list1, list2):\n    list1.sort()\n    list2.sort()\n    if list1 == list2:\n        return True\n    else:\n        return False\n\n\nprint(check_same_order([1, 2, 3], [2, 3, 1]))\nprint(check_same_order([1, 2, 3], [1, 3, 2]))"
    },
    {
      "rank": 98,
      "score": 3.0,
      "candidate": "def common(a, b):\n    return list(set(a) & set(b))\n\n\nprint(common([1, 2, 3, 4, 5], [4, 5, 6, 7]))\nprint(common([1, 2, 3, 4, 5], [6, 7, 8, 9]))\nprint(common([1, 2, 3, 4, 5], [1, 2, 3, 4, 5]))\nprint(common([1, 2, 3, 4, 5], [1, 2, 3, 4, 5]))\nprint(common([1, 2, 3, 4, 5], [1, 2, 3, 4, 5]))\nprint(common([1, 2, 3, 4, 5], [1, 2, 3, 4, 5]))\nprint(common([1, 2, 3, 4, 5], [1, 2, 3, 4, 5]))\nprint(common([1, 2, 3, 4, 5], [1, 2, 3, 4, 5]))\nprint(common([1, 2, 3, 4, 5], [1, 2, 3, 4, 5]))\nprint(common([1, 2, 3, 4, 5], [1, 2, 3, 4, 5]))\nprint(common([1, 2, 3, 4, 5], [1, 2, 3, 4, 5]))\nprint(common([1, 2, 3, 4, 5], [1, 2, 3, 4, 5]))\nprint(common([1, 2, 3, 4, 5], [1, 2, 3, 4, 5]))\nprint(common([1, 2, 3, 4, 5], [1, 2, 3, 4, 5]))\nprint(common([1, 2, 3, 4, 5], [1, 2, 3, 4, 5]))\nprint(common([1, 2, 3, 4, 5], [1, 2, 3, 4, 5]))\nprint(common([1, 2, 3, 4, 5], [1, 2, 3, 4, 5]))\nprint(common([1, 2, 3, 4, 5], [1, 2, 3, 4, 5]))\nprint(common([1, 2, 3, 4, 5], [1, 2, 3,"
    },
    {
      "rank": 99,
      "score": 3.0,
      "candidate": "def common_elements(a, b):\n    if len(a)!= len(b):\n        return False\n    return sorted(a) == sorted(b)\n\n\ndef common_elements_2(a, b):\n    return set(a) == set(b)\n\n\nprint(common_elements([1, 2, 3, 4, 5], [4, 5, 3, 2, 1]))\nprint(common_elements_2([1, 2, 3, 4, 5], [4, 5, 3, 2, 1]))"
    },
    {
      "rank": 100,
      "score": 3.0,
      "candidate": "def check_common_elements(list1, list2):\n    # Write your code here\n    list1.sort()\n    list2.sort()\n\n    if list1 == list2:\n        return True\n    else:\n        return False\n\n\n\n\n\nif __name__ == \"__main__\":\n    list1 = [1,2,3,4]\n    list2 = [2,3,4,1]\n\n    print(check_common_elements(list1, list2))"
    }
  ]
}