{
  "timestamp": "2025-09-14T13:45:38.829393",
  "method": "improved_llm_judge",
  "judge_model": "codellama/CodeLlama-7b-Python-hf",
  "target_model": "codet5-770m",
  "dataset": "mbpp",
  "problem_number": 176,
  "total_candidates": 100,
  "results": [
    {
      "rank": 1,
      "score": 10.0,
      "candidate": "class Solution:\n    def longestCommonSubsequence(self, s1: str, s2: str) -> str:\n        m, n = len(s1), len(s2)\n        dp = [[0] * (n + 1) for _ in range(m + 1)]\n        for i in range(m + 1):\n            for j in range(n + 1):\n                if i == 0 or j == 0:\n                    dp[i][j] = 0\n                elif s1[i - 1] == s2[j - 1]:\n                    dp[i][j] = dp[i - 1][j - 1] + 1\n                else:\n                    dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])\n        return dp[m][n]"
    },
    {
      "rank": 2,
      "score": 10.0,
      "candidate": "class Solution(object):\n    def longestCommonSubsequence(self, s1, s2):\n        \"\"\"\n        :type s1: str\n        :type s2: str\n        :rtype: str\n        \"\"\"\n        if len(s1) == 0:\n            return s2\n        elif len(s2) == 0:\n            return s1\n        else:\n            if s1[0] == s2[0]:\n                return self.longestCommonSubsequence(s1[1:], s2[1:])\n            else:\n                return self.longestCommonSubsequence(s1, s2[1:]) + s1[0]"
    },
    {
      "rank": 3,
      "score": 10.0,
      "candidate": "def longest_common_subsequence(s1, s2):\n    m, n = len(s1), len(s2)\n    dp = [[0 for x in range(n + 1)] for x in range(m + 1)]\n\n    for i in range(m + 1):\n        for j in range(n + 1):\n            if i == 0 or j == 0:\n                dp[i][j] = 0\n            elif s1[i - 1] == s2[j - 1]:\n                dp[i][j] = dp[i - 1][j - 1] + 1\n            else:\n                dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])\n\n    return dp[m][n]\n\n\nif __name__ == '__main__':\n    print(longest_common_subsequence('abc', 'bac'))"
    },
    {
      "rank": 4,
      "score": 10.0,
      "candidate": "class Solution(object):\n    def longestCommonSubsequence(self, s1, s2):\n        \"\"\"\n        :type s1: str\n        :type s2: str\n        :rtype: str\n        \"\"\"\n        if len(s1) == 0 or len(s2) == 0:\n            return \"\"\n        m = len(s1)\n        n = len(s2)\n        dp = [[0 for _ in range(n + 1)] for _ in range(m + 1)]\n        for i in range(m + 1):\n            for j in range(n + 1):\n                if i == 0 or j == 0:\n                    dp[i][j] = 0\n                elif s1[i - 1] == s2[j - 1]:\n                    dp[i][j] = dp[i - 1][j - 1] + 1\n                else:\n                    dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])\n        return s1[dp[m][n] - 1]\n\n\nif __name__ == \"__main__\":\n    s1 = \"abcd\"\n    s2 = \"abc\"\n    s3 = \"abcde\"\n    s4 = \"abcdea\"\n    s5 = \"abcdabcd\"\n    s6 = \"abcdabcdabcd\"\n    s7 = \"abcdabcdabcdabcd\"\n    s8 = \"abcdabcdabcdabcd\"\n    s9 = \"abcdabcdabcdabcd\"\n    s10 = \"abcdabcdabcdabcd\"\n    s11 = \"abcdabcdabcdabcd\"\n    s12 = \"abcdabcdabcdabcd\"\n    s13 = \"abcdabcdabcdabcd\"\n    s14 = \"abcdabcdabcdabcd\"\n    s15 = \"abcdabcdabcdabcd\"\n    s16 = \"abcdabcdabcdabcd\"\n    s17 = \"abcdabcdabcdabcd\"\n    s18 = \"abcdabcdabcdabcd\"\n    s19 = \"abcdabcdabcdabcd"
    },
    {
      "rank": 5,
      "score": 10.0,
      "candidate": "def longest_common_subsequence(s1, s2):\n    m = len(s1)\n    n = len(s2)\n    if m == 0 or n == 0:\n        return \"\"\n    if m == 1 and n == 1:\n        return s1[0]\n    if m == 1 and n > 1:\n        return s1[0] + s2[0]\n    if m > 1 and n == 1:\n        return s1[0] + s2[0]\n    if m > 1 and n > 1:\n        return s1[0] + s2[0] + longest_common_subsequence(s1[1:], s2[1:])\n\n\nif __name__ == \"__main__\":\n    print(longest_common_subsequence([1, 2], [2, 1]))\n    print(longest_common_subsequence([2, 2, 2], [2, 2, 2]))\n    print(longest_common_subsequence([2, 2, 2, 2], [2, 2, 2]))\n    print(longest_common_subsequence([2, 2, 2, 2, 2, 2, 2, 2, 2], [2, 2, 2, 2, 2, 2, 2, 2, 2]))\n    print(longest_common_subsequence([2, 2, 2, 2, 2, 2, 2, 2, 2, 2], [2, 2, 2, 2, 2, 2, 2, 2, 2, 2]))\n    print(longest_common_subsequence([2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2], [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]))"
    },
    {
      "rank": 6,
      "score": 10.0,
      "candidate": "def longestCommonSubsequence(str1, str2):\n    if len(str1) == 0 or len(str2) == 0:\n        return \"\"\n    if len(str1) == 1:\n        return str1[0]\n    if len(str2) == 1:\n        return str2[0]\n    if str1[0] == str2[0]:\n        return longestCommonSubsequence(str1[1:], str2[1:])\n    else:\n        return str(max(longestCommonSubsequence(str1[1:], str2), key=len)) + str(max(longestCommonSubsequence(str1, str2[1:]), key=len))\n\n\nif __name__ == \"__main__\":\n    print(longestCommonSubsequence(\"ab\", \"abc\"))\n    print(longestCommonSubsequence(\"ab\", \"abc\", 4))\n    print(longestCommonSubsequence(\"ab\", \"abc\", 7))\n    print(longestCommonSubsequence(\"ab\", \"ab\", 4))\n    print(longestCommonSubsequence(\"abc\", \"ab\", 4))\n    print(longestCommonSubsequence(\"abc\", \"abc\", 7))\n    print(longestCommonSubsequence(\"abc\", \"abc\", 8))\n    print(longestCommonSubsequence(\"abc\", \"abc\", 9))\n    print(longestCommonSubsequence(\"abc\", \"abc\", 10))\n    print(longestCommonSubsequence(\"abc\", \"abc\", 11))\n    print(longestCommonSubsequence(\"abc\", \"abc\", 12))\n    print(longestCommonSubsequence(\"abc\", \"abc\", 13))\n    print(longestCommonSubsequence(\"abc\", \"abc\", 14))\n    print(longestCommonSubsequence(\"abc\", \"abc\", 15))"
    },
    {
      "rank": 7,
      "score": 10.0,
      "candidate": "class Solution:\n    # @param {integer[]} nums1\n    # @param {integer[]} nums2\n    # @return {string}\n    def longestCommonSubsequence(self, nums1, nums2):\n        n = len(nums1)\n        m = len(nums2)\n        dp = [[0 for j in range(m + 1)] for i in range(n + 1)]\n        for i in range(1, n + 1):\n            for j in range(1, m + 1):\n                if i == 0 or j == 0:\n                    dp[i][j] = 0\n                elif nums1[i - 1] == nums2[j - 1]:\n                    dp[i][j] = dp[i - 1][j - 1] + 1\n                else:\n                    dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])\n        return dp[n][m]\n\n\nif __name__ == \"__main__\":\n    s = Solution()\n    print(s.longestCommonSubsequence([1, 2, 3], [2, 3]))\n    print(s.longestCommonSubsequence([1, 2], [1, 2]))\n    print(s.longestCommonSubsequence([], []))\n    print(s.longestCommonSubsequence([1], [1]))\n    print(s.longestCommonSubsequence([1, 1], [2, 2]))"
    },
    {
      "rank": 8,
      "score": 10.0,
      "candidate": "def lcs(s1, s2):\n    if len(s1) == 0 or len(s2) == 0:\n        return []\n    if s1[0] == s2[0]:\n        return lcs(s1[1:], s2[1:]) + [s1[0]]\n    else:\n        return lcs(s1, s2[1:])\n\n\nprint(lcs('abc', 'abc'))"
    },
    {
      "rank": 9,
      "score": 10.0,
      "candidate": "class Solution(object):\n    def longestCommonSubsequence(self, text1, text2):\n        \"\"\"\n        :type text1: str\n        :type text2: str\n        :rtype: str\n        \"\"\"\n        if text1 == '' or text2 == '':\n            return ''\n        m, n = len(text1), len(text2)\n        dp = [[0 for i in range(n+1)] for j in range(m+1)]\n        for i in range(1, m+1):\n            for j in range(1, n+1):\n                if text1[i-1] == text2[j-1]:\n                    dp[i][j] = dp[i-1][j-1] + 1\n                else:\n                    dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n        return dp[m][n]\n\ns = Solution()\nprint(s.longestCommonSubsequence('abc', 'abc'))"
    },
    {
      "rank": 10,
      "score": 10.0,
      "candidate": "class Solution:\n    def longestCommonSubsequence(self, s: str, t: str) -> str:\n        if not s or not t:\n            return ''\n        m = len(s)\n        n = len(t)\n        dp = [[0 for j in range(n + 1)] for i in range(m + 1)]\n        for i in range(m + 1):\n            for j in range(n + 1):\n                if i == 0 or j == 0:\n                    dp[i][j] = 0\n                elif s[i - 1] == t[j - 1]:\n                    dp[i][j] = dp[i - 1][j - 1] + 1\n                else:\n                    dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])\n        return dp[m][n]\n\n\ns = Solution()\nprint(s.longestCommonSubsequence('abc', 'abc'))"
    },
    {
      "rank": 11,
      "score": 10.0,
      "candidate": "class Solution:\n    def longestCommonSubsequence(self, s1: str, s2: str) -> str:\n        n = len(s1)\n        m = len(s2)\n        if m == 0:\n            return s1\n        elif n == 0:\n            return s2\n\n        dp = [[0 for i in range(m+1)] for j in range(n+1)]\n\n        for i in range(1, n+1):\n            for j in range(1, m+1):\n                if s1[i-1] == s2[j-1]:\n                    dp[i][j] = dp[i-1][j-1] + 1\n                else:\n                    dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n\n        return dp[n][m]\n\n\nif __name__ == \"__main__\":\n    s1 = \"abc\"\n    s2 = \"abcde\"\n\n    s1 = \"bac\"\n    s2 = \"bacde\"\n\n    s1 = \"ab\"\n    s2 = \"abcd\"\n\n    s1 = \"abc\"\n    s2 = \"abcd\"\n\n    s1 = \"aab\"\n    s2 = \"aabcd\"\n\n    s1 = \"abc\"\n    s2 = \"aabcd\"\n\n    s1 = \"aab\"\n    s2 = \"aabcd\"\n\n    s1 = \"aab\"\n    s2 = \"aabcd\"\n\n    s1 = \"aab\"\n    s2 = \"aabcd\"\n\n    s1 = \"aab\"\n    s2 = \"aabcd\"\n\n    s1 = \"aab\"\n    s2 = \"aabcd\"\n\n    s1 = \"aab\"\n    s2 = \"aabcd\"\n\n    s1 = \"aab\"\n    s2 = \"aabcd\"\n\n    s1 = \"aab\"\n    s2 = \"aabcd\"\n\n    s1 = \"aab\"\n    s2 = \"aabcd\"\n\n    s1"
    },
    {
      "rank": 12,
      "score": 10.0,
      "candidate": "class Solution(object):\n    def findLCS(self, s1, s2):\n        \"\"\"\n        :type s1: str\n        :type s2: str\n        :rtype: str\n        \"\"\"\n        if len(s1) == 0 or len(s2) == 0:\n            return \"\"\n\n        m, n = len(s1), len(s2)\n\n        dp = [[0 for _ in range(n+1)] for _ in range(m+1)]\n\n        for i in range(m+1):\n            dp[i][0] = i\n\n        for j in range(n+1):\n            dp[0][j] = j\n\n        for i in range(1, m+1):\n            for j in range(1, n+1):\n                if s1[i-1] == s2[j-1]:\n                    dp[i][j] = dp[i-1][j-1] + 1\n                else:\n                    dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n\n        return dp[m][n]\n\n\na = Solution()\nprint a.findLCS(\"abc\", \"bac\")"
    },
    {
      "rank": 13,
      "score": 9.370583536698913,
      "candidate": "def lcs(s1,s2):\n    if len(s1)==0 or len(s2)==0:\n        return []\n    if s1[0]==s2[0]:\n        return [s1[0]] + lcs(s1[1:],s2[1:])\n    else:\n        return lcs(s1,s2[1:]) + [s2[0]]\n\nprint(lcs('abc', 'abcd'))"
    },
    {
      "rank": 14,
      "score": 9.234050852198141,
      "candidate": "def longestCommonSubsequence(s1, s2):\n    n, m = len(s1), len(s2)\n    dp = [[0] * (m+1) for _ in range(n+1)]\n\n    for i in range(1, n+1):\n        for j in range(1, m+1):\n            if s1[i-1] == s2[j-1]:\n                dp[i][j] = dp[i-1][j-1] + 1\n            else:\n                dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n\n    return dp[n][m]\n\n\nif __name__ == '__main__':\n    print(longestCommonSubsequence(\"abc\", \"acb\"))\n    print(longestCommonSubsequence(\"abc\", \"ab\"))\n    print(longestCommonSubsequence(\"abc\", \"abc\"))\n    print(longestCommonSubsequence(\"abc\", \"abc\"))\n    print(longestCommonSubsequence(\"abc\", \"abc\"))"
    },
    {
      "rank": 15,
      "score": 9.226766272351448,
      "candidate": "def longest_common_subsequence(str1, str2):\n    \"\"\"\n    :type str1: str\n    :type str2: str\n    :rtype: str\n    \"\"\"\n    if len(str1) == 0:\n        return str2\n    if len(str2) == 0:\n        return str1\n\n    if str1[0] == str2[0]:\n        return longest_common_subsequence(str1[1:], str2[1:])\n\n    if str1[0] > str2[0]:\n        return longest_common_subsequence(str1, str2[1:])\n    else:\n        return longest_common_subsequence(str2, str1[1:])\n\n\nprint(longest_common_subsequence(\"aab\", \"aba\"))"
    },
    {
      "rank": 16,
      "score": 9.21346272767743,
      "candidate": "class Solution:\n    def findLCS(self, s1, s2):\n        m = len(s1)\n        n = len(s2)\n\n        dp = [[0] * (n + 1) for _ in range(m + 1)]\n        for i in range(1, m + 1):\n            for j in range(1, n + 1):\n                if s1[i - 1] == s2[j - 1]:\n                    dp[i][j] = dp[i - 1][j - 1] + 1\n                else:\n                    dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])\n\n        return dp[-1][-1]\n\n\nif __name__ == \"__main__\":\n    assert Solution().findLCS(\"abc\", \"acb\") == 2\n    assert Solution().findLCS(\"abc\", \"ac\") == 1\n    assert Solution().findLCS(\"abc\", \"ab\") == 0\n    assert Solution().findLCS(\"abc\", \"abc\") == 0\n    assert Solution().findLCS(\"abc\", \"abc\") == 0\n    assert Solution().findLCS(\"abc\", \"abc\") == 1"
    },
    {
      "rank": 17,
      "score": 9.205959372648458,
      "candidate": "class Solution:\n    def findLCS(self, s1, s2):\n        \"\"\"\n        :type s1: str\n        :type s2: str\n        :rtype: str\n        \"\"\"\n        if len(s1) < len(s2):\n            return self.findLCS(s2, s1)\n\n        if len(s1) == 0:\n            return s2\n\n        m = len(s1)\n        n = len(s2)\n\n        dp = [[0 for i in range(n + 1)] for j in range(m + 1)]\n\n        for i in range(m + 1):\n            for j in range(n + 1):\n                if i == 0 or j == 0:\n                    dp[i][j] = 0\n                elif s1[i - 1] == s2[j - 1]:\n                    dp[i][j] = dp[i - 1][j - 1] + 1\n                else:\n                    dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])\n\n        return dp[m][n]\n\n\nprint(Solution().findLCS(\"abc\", \"abc\"))"
    },
    {
      "rank": 18,
      "score": 9.177268828905222,
      "candidate": "def longest_common_subsequence(s1, s2):\n    if len(s1) == 0 or len(s2) == 0:\n        return []\n\n    m = len(s1)\n    n = len(s2)\n    dp = [[0 for i in range(n+1)] for j in range(m+1)]\n    for i in range(1, m+1):\n        for j in range(1, n+1):\n            if s1[i-1] == s2[j-1]:\n                dp[i][j] = dp[i-1][j-1] + 1\n            else:\n                dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n    return dp[m][n]\n\n\nprint(longest_common_subsequence([1, 2, 3], [4, 5, 6]))"
    },
    {
      "rank": 19,
      "score": 9.122564458729856,
      "candidate": "def longest_common_subsequence(a, b):\n    m = len(a)\n    n = len(b)\n    dp = [[0 for _ in range(n + 1)] for _ in range(m + 1)]\n    for i in range(1, m + 1):\n        for j in range(1, n + 1):\n            if a[i - 1] == b[j - 1]:\n                dp[i][j] = dp[i - 1][j - 1] + 1\n            else:\n                dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])\n    return dp[m][n]\n\n\nif __name__ == '__main__':\n    assert longest_common_subsequence('abc', 'bac') == 3\n    assert longest_common_subsequence('abc', 'abc') == 2"
    },
    {
      "rank": 20,
      "score": 8.973005557553902,
      "candidate": "def longest_common_subsequence(s1, s2):\n    # write your code here\n    m = len(s1)\n    n = len(s2)\n    dp = [[0] * (n + 1) for _ in range(m + 1)]\n\n    for i in range(1, m + 1):\n        for j in range(1, n + 1):\n            if s1[i - 1] == s2[j - 1]:\n                dp[i][j] = dp[i - 1][j - 1] + 1\n            else:\n                dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])\n\n    return dp[m][n]\n\n\nif __name__ == \"__main__\":\n    print(longest_common_subsequence(\"abc\", \"abc\"))\n    print(longest_common_subsequence(\"ab\", \"a\"))\n    print(longest_common_subsequence(\"abc\", \"bca\"))\n    print(longest_common_subsequence(\"abc\", \"cab\"))\n    print(longest_common_subsequence(\"abc\", \"abc\"))\n    print(longest_common_subsequence(\"abc\", \"cba\"))\n    print(longest_common_subsequence(\"abc\", \"cbb\"))\n    print(longest_common_subsequence(\"abc\", \"abcc\"))\n    print(longest_common_subsequence(\"abc\", \"abc\"))"
    },
    {
      "rank": 21,
      "score": 8.95994420569242,
      "candidate": "def longest_common_subsequence(s1, s2):\n    if len(s1) == 0 or len(s2) == 0:\n        return \"\"\n    if len(s1) == 1:\n        return s1[0]\n    if len(s2) == 1:\n        return s2[0]\n    if s1[0] == s2[0]:\n        return longest_common_subsequence(s1[1:], s2[1:])\n    else:\n        return max(longest_common_subsequence(s1[1:], s2), longest_common_subsequence(s1, s2[1:]))\n\n\nif __name__ == \"__main__\":\n    assert longest_common_subsequence(\"abc\", \"aab\") == \"abc\"\n    assert longest_common_subsequence(\"abc\", \"cba\") == \"bca\"\n    assert longest_common_subsequence(\"abc\", \"abc\") == \"\""
    },
    {
      "rank": 22,
      "score": 8.946210893390457,
      "candidate": "def longest_common_subsequence(str1, str2):\n    if len(str1) == 0 or len(str2) == 0:\n        return \"\"\n    if str1[0] == str2[0]:\n        return str1[0]\n    else:\n        return longest_common_subsequence(str1[1:], str2[1:]) + str1[0]\n\n\nprint(longest_common_subsequence(\"abc\", \"abc\"))\nprint(longest_common_subsequence(\"ab\", \"abc\"))\nprint(longest_common_subsequence(\"ab\", \"ab\"))\nprint(longest_common_subsequence(\"abc\", \"abc\"))"
    },
    {
      "rank": 23,
      "score": 8.932217008005624,
      "candidate": "def longest_common_subsequence(str1, str2):\n    if len(str1) == 0:\n        return len(str2)\n    if len(str2) == 0:\n        return len(str1)\n    m = len(str1)\n    n = len(str2)\n    dp = [[0 for _ in range(n+1)] for _ in range(m+1)]\n\n    for i in range(1, m+1):\n        for j in range(1, n+1):\n            if str1[i-1] == str2[j-1]:\n                dp[i][j] = dp[i-1][j-1] + 1\n            else:\n                dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n\n    return dp[m][n]\n\n\nprint(longest_common_subsequence(\"a\", \"a\"))\nprint(longest_common_subsequence(\"a\", \"a\"))\nprint(longest_common_subsequence(\"abc\", \"abc\"))"
    },
    {
      "rank": 24,
      "score": 8.910084504002544,
      "candidate": "def longest_common_subsequence(s1, s2):\n    if len(s1) == 0 or len(s2) == 0:\n        return []\n    dp = [[0 for i in range(len(s2)+1)] for j in range(len(s1)+1)]\n    for i in range(1, len(s1)+1):\n        for j in range(1, len(s2)+1):\n            if s1[i-1] == s2[j-1]:\n                dp[i][j] = dp[i-1][j-1] + 1\n            else:\n                dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n    return dp[len(s1)][len(s2)]\n\nif __name__ == \"__main__\":\n    print(longest_common_subsequence(\"abc\", \"abc\"))\n    print(longest_common_subsequence(\"abc\", \"abcd\"))\n    print(longest_common_subsequence(\"abc\", \"abcde\"))"
    },
    {
      "rank": 25,
      "score": 8.85571690049604,
      "candidate": "def longest_common_subsequence(s1, s2):\n    if len(s1) == 0 or len(s2) == 0:\n        return s1 + s2\n\n    m = len(s1)\n    n = len(s2)\n\n    dp = [[0 for x in range(n + 1)] for x in range(m + 1)]\n\n    for i in range(m + 1):\n        for j in range(n + 1):\n            if i == 0 or j == 0:\n                dp[i][j] = 0\n            elif s1[i - 1] == s2[j - 1]:\n                dp[i][j] = dp[i - 1][j - 1] + 1\n            else:\n                dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])\n\n    return dp[m][n]\n\n\nif __name__ == \"__main__\":\n    assert longest_common_subsequence(\"\", \"\") == \"\"\n    assert longest_common_subsequence(\"abcd\", \"abc\") == \"abcd\"\n    assert longest_common_subsequence(\"abcd\", \"abcdab\") == \"abcdab\"\n    assert longest_common_subsequence(\"abcd\", \"abcdabcd\") == \"abcdabcd\"\n    assert longest_common_subsequence(\"abcd\", \"abcde\") == \"abcd\"\n    assert longest_common_subsequence(\"abcd\", \"abcdabcd\") == \"abcdabcd\""
    },
    {
      "rank": 26,
      "score": 8.855395696632057,
      "candidate": "def lcs(a, b):\n    if len(a) == 0:\n        return len(b)\n    if len(b) == 0:\n        return len(a)\n    elif a[0] == b[0]:\n        return lcs(a[1:], b[1:])\n    else:\n        return max(lcs(a, b[1:]), lcs(a[1:], b))\n\n\nprint(lcs([], []))\nprint(lcs([1], [2]))\nprint(lcs([1, 2], [3, 4]))\nprint(lcs([1, 2, 3, 4], [1, 2, 3, 4]))"
    },
    {
      "rank": 27,
      "score": 8.850707355641543,
      "candidate": "def longest_common_subsequence(s1, s2):\n    if len(s1) == 0:\n        return s2\n    if len(s2) == 0:\n        return s1\n\n    for i in range(min(len(s1), len(s2))):\n        if s1[i] == s2[i]:\n            if i == 0:\n                return s1\n            if i == len(s1)-1:\n                return s2\n\n        else:\n            return \"Not matching\"\n\n\nif __name__ == \"__main__\":\n    assert longest_common_subsequence(\"abc\", \"abc\") == \"abc\"\n    assert longest_common_subsequence(\"abc\", \"bca\") == \"abc\"\n    assert longest_common_subsequence(\"abc\", \"cba\") == \"acb\""
    },
    {
      "rank": 28,
      "score": 8.8281618090209,
      "candidate": "def longest_common_subsequence(s1, s2):\n    if len(s1) == 0:\n        return s2\n    elif len(s2) == 0:\n        return s1\n    elif s1[0] == s2[0]:\n        return longest_common_subsequence(s1[1:], s2[1:])\n    else:\n        return max(longest_common_subsequence(s1[1:], s2), longest_common_subsequence(s1, s2[1:]))\n\ns1 = \"abc\"\ns2 = \"aac\"\n\nprint(longest_common_subsequence(s1, s2))"
    },
    {
      "rank": 29,
      "score": 8.81367773444215,
      "candidate": "class Solution(object):\n    def longestCommonSubsequence(self, str1, str2):\n        \"\"\"\n        :type str1: str\n        :type str2: str\n        :rtype: str\n        \"\"\"\n        if len(str1) == 0:\n            return str2\n        if len(str2) == 0:\n            return str1\n\n        # create a dict to store the longest common subsequence\n        longest_common_subsequence = {}\n\n        # create a dict to store the longest common subsequence length\n        longest_common_subsequence_length = {}\n\n        # iterate over the strings\n        for i in range(len(str1)):\n            # check if the current character is in the dict\n            if str1[i] in longest_common_subsequence:\n                # add the length of the subsequence\n                longest_common_subsequence_length[str1[i]] = longest_common_subsequence_length.get(str1[i], 0) + 1\n            else:\n                # if it is not in the dict, we are going to insert it\n                longest_common_subsequence_length[str1[i]] = 1\n\n            # check if the current character is in the dict\n            if str2[i] in longest_common_subsequence_length:\n                # add the length of the subsequence\n                longest_common_subsequence[str2[i]] = longest_common_subsequence.get(str2[i], 0) + 1\n            else:\n                # if it is not in the dict, we are going to insert it\n                longest_common_subsequence[str2[i]] = 1\n\n        # create the final result\n        result = \"\"\n\n        # iterate over the dict\n        for i in longest_common_subsequence_length:\n            # check if the current character is in the dict\n            if i in longest_common_subsequence:\n                # if it is in the dict, we add the length of the subsequence\n                result += str(i)\n            else:\n                # if it is not in the dict, we are going to insert it\n                result += str(i)\n\n        return result[::-1]"
    },
    {
      "rank": 30,
      "score": 8.76828871349479,
      "candidate": "def longest_common_subsequence(s1, s2):\n    if len(s1) == 0 or len(s2) == 0:\n        return []\n\n    if len(s1) == 1:\n        return [s1[0]]\n\n    if len(s2) == 1:\n        return [s2[0]]\n\n    if s1[0] == s2[0]:\n        return longest_common_subsequence(s1[1:], s2[1:]) + [s1[0]]\n    else:\n        return longest_common_subsequence(s1[1:], s2[:]) + [s2[0]]\n\n\nif __name__ == '__main__':\n    print(longest_common_subsequence(\"abc\", \"abc\"))\n    print(longest_common_subsequence(\"abc\", \"abcd\"))\n    print(longest_common_subsequence(\"abc\", \"abcde\"))\n    print(longest_common_subsequence(\"abc\", \"abcdeab\"))"
    },
    {
      "rank": 31,
      "score": 8.750282588864879,
      "candidate": "class Solution(object):\n    def longestCommonSubsequence(self, strs):\n        \"\"\"\n        :type strs: List[str]\n        :rtype: str\n        \"\"\"\n        if len(strs) == 0:\n            return \"\"\n        if len(strs) == 1:\n            return strs[0]\n        if len(strs) == 2:\n            return max(strs[0], strs[1])\n        if len(strs) > 2:\n            max_len = max(len(strs[0]), len(strs[1]))\n            return max(self.longestCommonSubsequence(strs[0:max_len]), self.longestCommonSubsequence(strs[max_len:]))\n        else:\n            return None\n\n\ns = Solution()\nprint(s.longestCommonSubsequence([\"a\", \"b\", \"c\"]))\nprint(s.longestCommonSubsequence([\"a\", \"b\", \"a\"]))\nprint(s.longestCommonSubsequence([\"a\", \"b\"]))\nprint(s.longestCommonSubsequence([\"a\", \"b\", \"a\", \"b\"]))\nprint(s.longestCommonSubsequence([\"a\", \"b\", \"b\", \"b\"]))\nprint(s.longestCommonSubsequence([\"a\", \"b\", \"b\", \"b\"]))\nprint(s.longestCommonSubsequence([\"a\", \"b\", \"b\", \"b\"]))"
    },
    {
      "rank": 32,
      "score": 8.715724466237427,
      "candidate": "def longestCommonSubsequence(s1, s2):\n    if len(s1) == 0:\n        return len(s2)\n    if len(s2) == 0:\n        return len(s1)\n\n    if s1[0] == s2[0]:\n        return longestCommonSubsequence(s1[1:], s2[1:])\n\n    if s1[0] > s2[0]:\n        return longestCommonSubsequence(s1, s2[1:])\n    else:\n        return longestCommonSubsequence(s1[1:], s2)\n\n\ns1 = \"ABCB\"\ns2 = \"ABC\"\nprint(longestCommonSubsequence(s1, s2))"
    },
    {
      "rank": 33,
      "score": 8.692801520950061,
      "candidate": "class Solution(object):\n    def longestCommonSubsequence(self, text1, text2):\n        \"\"\"\n        :type text1: str\n        :type text2: str\n        :rtype: str\n        \"\"\"\n        m = len(text1)\n        n = len(text2)\n\n        if m == 0 or n == 0:\n            return ''\n\n        dp = [[0 for _ in range(n+1)] for _ in range(m+1)]\n\n        for i in range(1, m+1):\n            for j in range(1, n+1):\n                if text1[i-1] == text2[j-1]:\n                    dp[i][j] = dp[i-1][j-1] + 1\n                else:\n                    dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n\n        return dp[m][n]\n\n\nif __name__ == \"__main__\":\n    assert Solution().longestCommonSubsequence('abc', 'cba') == 'a'\n    assert Solution().longestCommonSubsequence('abc', 'ab') == 'a'\n    assert Solution().longestCommonSubsequence('abc', 'bca') == 'a'\n    assert Solution().longestCommonSubsequence('abc', 'abc') == 'a'\n    assert Solution().longestCommonSubsequence('abc', 'abc') == ''\n    assert Solution().longestCommonSubsequence('abc', 'abc') == ''\n    assert Solution().longestCommonSubsequence('abc', 'abca') == 'a'"
    },
    {
      "rank": 34,
      "score": 8.632293453617281,
      "candidate": "def find_lcs(s1, s2):\n    m, n = len(s1), len(s2)\n    if m == 0 or n == 0:\n        return 0\n\n    dp = [[0 for _ in range(n + 1)] for _ in range(m + 1)]\n\n    for i in range(m + 1):\n        for j in range(n + 1):\n            if i == 0 or j == 0:\n                dp[i][j] = 0\n            elif s1[i - 1] == s2[j - 1]:\n                dp[i][j] = dp[i - 1][j - 1] + 1\n            else:\n                dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])\n\n    return dp[m][n]\n\n\nif __name__ == \"__main__\":\n    print(find_lcs(\"a\", \"b\"))\n    print(find_lcs(\"abc\", \"abcd\"))\n    print(find_lcs(\"abc\", \"abc\"))"
    },
    {
      "rank": 35,
      "score": 8.625262456968262,
      "candidate": "def longest_common_subsequence(str1, str2):\n    m, n = len(str1), len(str2)\n    if m == 0 or n == 0:\n        return \"\"\n    if m == 1 and n == 1:\n        return str1[0]\n    if m == 1 or n == 1:\n        return \"\"\n\n    dp = [[0 for _ in range(n + 1)] for _ in range(m + 1)]\n\n    for i in range(1, m + 1):\n        for j in range(1, n + 1):\n            if str1[i - 1] == str2[j - 1]:\n                dp[i][j] = dp[i - 1][j - 1] + 1\n            else:\n                dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])\n    return dp[m][n]\n\n\nprint(longest_common_subsequence(\"abc\", \"acb\"))\nprint(longest_common_subsequence(\"abc\", \"acb\"))\nprint(longest_common_subsequence(\"abc\", \"ac\"))\nprint(longest_common_subsequence(\"abc\", \"ab\"))\nprint(longest_common_subsequence(\"ab\", \"ab\"))\nprint(longest_common_subsequence(\"abc\", \"ab\"))\nprint(longest_common_subsequence(\"abc\", \"abc\"))\nprint(longest_common_subsequence(\"abc\", \"abc\"))\nprint(longest_common_subsequence(\"abc\", \"abc\"))\nprint(longest_common_subsequence(\"abc\", \"abc\"))\nprint(longest_common_subsequence(\"abc\", \"abcc\"))\nprint(longest_common_subsequence(\"abc\", \"aabbcc\"))\nprint(longest_common_subsequence(\"abc\", \"b\"))"
    },
    {
      "rank": 36,
      "score": 8.625142247198651,
      "candidate": "def longestCommonSubsequence(s1, s2):\n    if len(s1) < len(s2):\n        return longestCommonSubsequence(s2, s1)\n    if len(s1) == 0:\n        return s2\n\n    result = []\n    for i in range(len(s2)):\n        if s1[0] == s2[i]:\n            result.append(s1[i])\n            s1.pop(0)\n        else:\n            result.append(max(result[-1], s2[i]))\n    return result\n\n\ndef main():\n    print(longestCommonSubsequence(\"abc\", \"abc\"))\n    print(longestCommonSubsequence(\"abc\", \"abcde\"))\n    print(longestCommonSubsequence(\"abcde\", \"abc\"))\n    print(longestCommonSubsequence(\"abcde\", \"abcde\"))\n    print(longestCommonSubsequence(\"abcd\", \"abcd\"))\n    print(longestCommonSubsequence(\"abcd\", \"abcdde\"))\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 37,
      "score": 8.616253589228675,
      "candidate": "def longestCommonSubsequence(s1, s2):\n  m = len(s1)\n  n = len(s2)\n  dp = [[0 for i in range(n + 1)] for j in range(m + 1)]\n\n  for i in range(1, m + 1):\n    for j in range(1, n + 1):\n      if i == 0 or j == 0:\n        dp[i][j] = 0\n      elif s1[i - 1] == s2[j - 1]:\n        dp[i][j] = dp[i - 1][j - 1] + 1\n      else:\n        dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])\n\n  return dp[m][n]\n\nprint(longestCommonSubsequence(\"abc\", \"bac\"))"
    },
    {
      "rank": 38,
      "score": 8.610076160146226,
      "candidate": "def longestCommonSubsequence(s1, s2):\n    m = len(s1)\n    n = len(s2)\n\n    if m > n:\n        return longestCommonSubsequence(s2, s1)\n\n    dp = [[0] * (n + 1) for _ in range(m + 1)]\n\n    for i in range(m + 1):\n        for j in range(n + 1):\n            if i == 0 or j == 0:\n                dp[i][j] = 0\n            elif s1[i - 1] == s2[j - 1]:\n                dp[i][j] = dp[i - 1][j - 1] + 1\n            else:\n                dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])\n\n    return dp[m][n]\n\n\nprint(longestCommonSubsequence(\"abc\", \"acb\"))"
    },
    {
      "rank": 39,
      "score": 8.606486429141842,
      "candidate": "def longest_common_subsequence(s1, s2):\n    m, n = len(s1), len(s2)\n    dp = [[0 for x in range(n + 1)] for x in range(m + 1)]\n\n    for i in range(1, m + 1):\n        for j in range(1, n + 1):\n            if s1[i - 1] == s2[j - 1]:\n                dp[i][j] = dp[i - 1][j - 1] + 1\n            else:\n                dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])\n\n    return dp[-1][-1]\n\n\nif __name__ == '__main__':\n    assert longest_common_subsequence(\"abc\", \"abc\") == 2\n    assert longest_common_subsequence(\"abc\", \"abcd\") == 2\n    assert longest_common_subsequence(\"abc\", \"abcdab\") == 3\n    assert longest_common_subsequence(\"abc\", \"abcde\") == 2"
    },
    {
      "rank": 40,
      "score": 8.60156811074208,
      "candidate": "def longestCommonSubsequence(s1, s2):\n    m = len(s1)\n    n = len(s2)\n    dp = [[0 for j in range(n + 1)] for i in range(m + 1)]\n    for i in range(m + 1):\n        for j in range(n + 1):\n            if i == 0 or j == 0:\n                dp[i][j] = 0\n            elif s1[i - 1] == s2[j - 1]:\n                dp[i][j] = dp[i - 1][j - 1] + 1\n            else:\n                dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])\n    return dp[m][n]\n\n\nprint(longestCommonSubsequence('abc', 'abcd'))\nprint(longestCommonSubsequence('ab', 'cd'))\nprint(longestCommonSubsequence('abcd', 'abcd'))\nprint(longestCommonSubsequence('abc', 'abc'))\nprint(longestCommonSubsequence('abc', 'abcda'))\nprint(longestCommonSubsequence('abc', 'abcdaab'))\nprint(longestCommonSubsequence('abc', 'abcdaababc'))\nprint(longestCommonSubsequence('abc', 'abcdaababcabc'))\nprint(longestCommonSubsequence('abc', 'abcdaababcabcabc'))\nprint(longestCommonSubsequence('abc', 'abcdaababcabcabcabc'))"
    },
    {
      "rank": 41,
      "score": 8.565425580227462,
      "candidate": "def longest_common_subsequence(s1, s2):\n    if len(s1) > len(s2):\n        s1, s2 = s2, s1\n    m = len(s1) + 1\n    n = len(s2) + 1\n    dp = [[0 for j in range(n)] for i in range(m)]\n    for i in range(1, m):\n        for j in range(1, n):\n            if s1[i-1] == s2[j-1]:\n                dp[i][j] = dp[i-1][j-1] + 1\n            else:\n                dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n    return dp[m-1][n-1]\n\n\nprint(longest_common_subsequence(\"abc\", \"abc\"))"
    },
    {
      "rank": 42,
      "score": 8.548876241946822,
      "candidate": "def longest_common_subsequence(str1, str2):\n    if len(str1) == 0 or len(str2) == 0:\n        return \"\"\n\n    max_length = 0\n    max_length_index = -1\n\n    for i in range(len(str1)):\n        for j in range(len(str2)):\n            if str1[i] == str2[j]:\n                if j == 0:\n                    max_length = i + 1\n                    max_length_index = i\n                else:\n                    max_length = max(max_length, i + 1)\n\n    return str1[max_length_index]\n\n\nprint(longest_common_subsequence(\"abc\", \"abc\"))\nprint(longest_common_subsequence(\"abc\", \"ab\"))\nprint(longest_common_subsequence(\"abc\", \"abc\"))\nprint(longest_common_subsequence(\"abc\", \"abc\"))\nprint(longest_common_subsequence(\"abc\", \"aba\"))\nprint(longest_common_subsequence(\"abc\", \"abca\"))\nprint(longest_common_subsequence(\"abc\", \"abc\"))\nprint(longest_common_subsequence(\"abc\", \"abccc\"))\nprint(longest_common_subsequence(\"abc\", \"abca\"))"
    },
    {
      "rank": 43,
      "score": 8.542875062379007,
      "candidate": "def longest_common_subsequence(s1, s2):\n    if len(s1) == 0 or len(s2) == 0:\n        return s1 or s2\n    if len(s1) > len(s2):\n        return longest_common_subsequence(s2, s1)\n    else:\n        return longest_common_subsequence(s1, s2)\n\n\nif __name__ == '__main__':\n    print(longest_common_subsequence(\"abc\", \"def\"))\n    print(longest_common_subsequence(\"abc\", \"ab\"))\n    print(longest_common_subsequence(\"abc\", \"abc\"))\n    print(longest_common_subsequence(\"abc\", \"abc\"))\n    print(longest_common_subsequence(\"abc\", \"abc\"))"
    },
    {
      "rank": 44,
      "score": 8.53012858503943,
      "candidate": "def longest_common_subsequence(s1, s2):\n    m = len(s1)\n    n = len(s2)\n\n    if m == 0 or n == 0:\n        return \"\"\n\n    dp = [[0 for x in range(n+1)] for x in range(m+1)]\n\n    for i in range(m+1):\n        for j in range(n+1):\n            if i == 0 or j == 0:\n                dp[i][j] = 0\n            elif s1[i-1] == s2[j-1]:\n                dp[i][j] = dp[i-1][j-1] + 1\n            else:\n                dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n\n    return dp[m][n]\n\n\nprint(longest_common_subsequence(\"abc\", \"abc\"))"
    },
    {
      "rank": 45,
      "score": 8.499905739299377,
      "candidate": "def longest_common_subsequence(str1, str2):\n    n = len(str1)\n    m = len(str2)\n    dp = [[0 for _ in range(m + 1)] for _ in range(n + 1)]\n    for i in range(n + 1):\n        for j in range(m + 1):\n            if i == 0 or j == 0:\n                dp[i][j] = 0\n            elif str1[i - 1] == str2[j - 1]:\n                dp[i][j] = dp[i - 1][j - 1] + 1\n            else:\n                dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])\n    return dp[n][m]\n\n\nprint(longest_common_subsequence(\"abc\", \"abcd\"))\nprint(longest_common_subsequence(\"abc\", \"abcc\"))\nprint(longest_common_subsequence(\"abc\", \"abc\"))"
    },
    {
      "rank": 46,
      "score": 8.48796797856353,
      "candidate": "def longest_common_subsequence(s1, s2):\n    m = len(s1)\n    n = len(s2)\n    dp = [[0 for i in range(n+1)] for j in range(m+1)]\n\n    for i in range(m+1):\n        for j in range(n+1):\n            if i == 0 or j == 0:\n                dp[i][j] = 0\n            elif s1[i-1] == s2[j-1]:\n                dp[i][j] = dp[i-1][j-1] + 1\n            else:\n                dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n\n    return dp[m][n]\n\n\ns1 = 'abc'\ns2 = 'abcd'\nprint(longest_common_subsequence(s1, s2))"
    },
    {
      "rank": 47,
      "score": 8.478208546788407,
      "candidate": "def find_longest_common_subsequence(a, b):\n    if not a or not b:\n        return []\n    if len(a) == 1:\n        return [a[0]]\n    if len(b) == 1:\n        return [b[0]]\n    if a[0] == b[0]:\n        return find_longest_common_subsequence(a[1:], b[1:]) + [a[0]]\n    else:\n        return find_longest_common_subsequence(a[1:], b) + [a[0]]\n\n\nif __name__ == \"__main__\":\n    print(find_longest_common_subsequence([1, 2, 3], [2, 3]))\n    print(find_longest_common_subsequence([1, 2, 3], [4, 5, 6]))\n    print(find_longest_common_subsequence([1, 2, 3], [4, 5, 6]))"
    },
    {
      "rank": 48,
      "score": 8.437695832075478,
      "candidate": "def longestCommonSubsequence(s1, s2):\n    if len(s1) == 0 or len(s2) == 0:\n        return []\n    if s1[0] == s2[0]:\n        return [s1[0]]\n    else:\n        return longestCommonSubsequence(s1[1:], s2[1:]) + [s1[0]] + longestCommonSubsequence(s1, s2[1:])\n\n\nprint(longestCommonSubsequence('abc', 'bac'))\nprint(longestCommonSubsequence('abc', 'a'))\nprint(longestCommonSubsequence('abc', 'abc'))\nprint(longestCommonSubsequence('abc', 'ab'))\nprint(longestCommonSubsequence('abc', 'abc'))"
    },
    {
      "rank": 49,
      "score": 8.426531424889468,
      "candidate": "def longestCommonSubsequence(seq1, seq2):\n    if len(seq1) > len(seq2):\n        seq1, seq2 = seq2, seq1\n    m = len(seq1) + 1\n    n = len(seq2) + 1\n    dp = [[0 for i in range(n+1)] for j in range(m+1)]\n    for i in range(1, m+1):\n        for j in range(1, n+1):\n            if seq1[i-1] == seq2[j-1]:\n                dp[i][j] = dp[i-1][j-1] + 1\n            else:\n                dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n    return dp[m][n]\n\nif __name__ == \"__main__\":\n    print(longestCommonSubsequence(\"abc\", \"bc\"))\n    print(longestCommonSubsequence(\"abc\", \"abcd\"))\n    print(longestCommonSubsequence(\"ab\", \"ab\"))\n    print(longestCommonSubsequence(\"a\", \"a\"))\n    print(longestCommonSubsequence(\"abc\", \"abc\"))"
    },
    {
      "rank": 50,
      "score": 8.408439383654278,
      "candidate": "def longestCommonSubsequence(str1, str2):\n    len1, len2 = len(str1), len(str2)\n    dp = [[0] * (len2 + 1) for _ in range(len1 + 1)]\n\n    for i in range(len1 + 1):\n        for j in range(len2 + 1):\n            if i == 0 or j == 0:\n                dp[i][j] = 0\n            elif str1[i - 1] == str2[j - 1]:\n                dp[i][j] = dp[i - 1][j - 1] + 1\n            else:\n                dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])\n\n    return dp[len1][len2]\n\n\nprint(longestCommonSubsequence(\"abc\", \"abc\"))\nprint(longestCommonSubsequence(\"abc\", \"abc\"))\nprint(longestCommonSubsequence(\"abc\", \"ab\"))\nprint(longestCommonSubsequence(\"abc\", \"ac\"))\nprint(longestCommonSubsequence(\"abc\", \"acb\"))\nprint(longestCommonSubsequence(\"abc\", \"abc\"))\nprint(longestCommonSubsequence(\"abc\", \"abcd\"))\nprint(longestCommonSubsequence(\"abc\", \"acba\"))\nprint(longestCommonSubsequence(\"abc\", \"abc\"))"
    },
    {
      "rank": 51,
      "score": 8.386620303250325,
      "candidate": "class Solution:\n    def longestCommonSubsequence(self, s: str, t: str) -> str:\n        if not s:\n            return t\n        if not t:\n            return s\n        if len(s) == 1:\n            return t if s[0] == t[0] else s\n        if len(t) == 1:\n            return s if s[0] == t[0] else t\n        for i in range(len(s)):\n            if s[i] == t[0]:\n                if i == 0 or t[0]!= s[i-1]:\n                    return self.longestCommonSubsequence(s[i+1:], t[1:])\n            else:\n                return s[i]\n        return s[0]\n\n\nif __name__ == '__main__':\n    s = Solution()\n    assert s.longestCommonSubsequence(\"abc\", \"abc\") == \"acb\"\n    assert s.longestCommonSubsequence(\"abc\", \"acb\") == \"acb\"\n    assert s.longestCommonSubsequence(\"abc\", \"\") == \"\"\n    assert s.longestCommonSubsequence(\"\", \"\") == \"\"\n    assert s.longestCommonSubsequence(\"ab\", \"\") == \"\"\n    assert s.longestCommonSubsequence(\"\", \"ab\") == \"\"\n    assert s.longestCommonSubsequence(\"abc\", \"ab\") == \"abc\"\n    assert s.longestCommonSubsequence(\"abc\", \"abcd\") == \"abcd\""
    },
    {
      "rank": 52,
      "score": 8.375312293858853,
      "candidate": "class Solution(object):\n    def longestCommonSubsequence(self, text1, text2):\n        \"\"\"\n        :type text1: str\n        :type text2: str\n        :rtype: str\n        \"\"\"\n        m = len(text1)\n        n = len(text2)\n\n        dp = [[0 for j in range(n+1)] for i in range(m+1)]\n\n        for i in range(m+1):\n            for j in range(n+1):\n                if i == 0 or j == 0:\n                    dp[i][j] = 0\n                elif text1[i-1] == text2[j-1]:\n                    dp[i][j] = dp[i-1][j-1] + 1\n                else:\n                    dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n\n        return dp[m][n]\n\n\nif __name__ == \"__main__\":\n    s = Solution()\n    assert s.longestCommonSubsequence(\"abc\", \"abc\") == 2\n    assert s.longestCommonSubsequence(\"ab\", \"a\") == 2\n    assert s.longestCommonSubsequence(\"a\", \"b\") == 2\n    assert s.longestCommonSubsequence(\"a\", \"bb\") == 2\n    assert s.longestCommonSubsequence(\"abc\", \"ab\") == 2\n    assert s.longestCommonSubsequence(\"ab\", \"bc\") == 2"
    },
    {
      "rank": 53,
      "score": 8.351614956112536,
      "candidate": "def longest_common_subsequence(s1, s2):\n    # write your code here\n    n = len(s1)\n    m = len(s2)\n    if n == 0 or m == 0:\n        return []\n    dp = [[0] * (m + 1) for _ in range(n + 1)]\n    for i in range(1, n + 1):\n        for j in range(1, m + 1):\n            if s1[i - 1] == s2[j - 1]:\n                dp[i][j] = dp[i - 1][j - 1] + 1\n            else:\n                dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])\n    return dp[n][m]\n\n\nprint(longest_common_subsequence(\"\", \"\"))\nprint(longest_common_subsequence(\"abc\", \"abc\"))\nprint(longest_common_subsequence(\"abc\", \"abc\"))"
    },
    {
      "rank": 54,
      "score": 8.331556294201176,
      "candidate": "def longest_common_subsequence(a, b):\n    n, m = len(a), len(b)\n    dp = [[0] * (m + 1) for _ in range(n + 1)]\n\n    for i in range(1, n + 1):\n        for j in range(1, m + 1):\n            if a[i - 1] == b[j - 1]:\n                dp[i][j] = dp[i - 1][j - 1] + 1\n            else:\n                dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])\n\n    return dp[-1][-1]\n\n\nif __name__ == \"__main__\":\n    print(longest_common_subsequence([\"A\", \"A\"], [\"A\", \"B\"]))"
    },
    {
      "rank": 55,
      "score": 8.327375965969855,
      "candidate": "def longest_common_subsequence(seq1, seq2):\n    # write your code in Python 3.6\n    if len(seq1) > len(seq2):\n        return longest_common_subsequence(seq2, seq1)\n    elif len(seq1) == len(seq2):\n        if seq1[0] == seq2[0]:\n            return seq1[0]\n        else:\n            return seq2[0]\n    else:\n        return seq1[0]\n\n\nprint(longest_common_subsequence(\"abc\", \"abcde\"))"
    },
    {
      "rank": 56,
      "score": 8.327367757082776,
      "candidate": "def lcs(seq1, seq2):\n    if len(seq1) == 0 or len(seq2) == 0:\n        return \"\"\n    if seq1[0] == seq2[0]:\n        return lcs(seq1[1:], seq2[1:]) + seq1[0]\n    else:\n        return lcs(seq1, seq2[1:]) + seq2[0]\n\ndef lcs_rec(seq1, seq2):\n    if len(seq1) == 0 or len(seq2) == 0:\n        return \"\"\n    if seq1[0] == seq2[0]:\n        return lcs_rec(seq1[1:], seq2[1:]) + seq1[0]\n    else:\n        return lcs_rec(seq1, seq2[1:]) + seq2[0]\n\nif __name__ == \"__main__\":\n    assert lcs([1, 2, 3], [2, 3, 1]) == \"3\"\n    assert lcs([1, 2, 3], [1]) == \"1\"\n    assert lcs([1, 2, 3], [3]) == \"2\"\n    assert lcs([1, 2, 3], [2, 3, 1]) == \"1\"\n    assert lcs([1, 2, 3], [3, 2]) == \"2\"\n    assert lcs([1, 2, 3], [3, 1, 2]) == \"2\"\n    assert lcs([1, 2, 3], [1, 1, 2, 3, 4, 5]) == \"2\""
    },
    {
      "rank": 57,
      "score": 8.298597569547805,
      "candidate": "def longest_common_subsequence(s1, s2):\n    n = len(s1)\n    m = len(s2)\n    dp = [[0] * (m + 1) for _ in range(n + 1)]\n    for i in range(1, n + 1):\n        for j in range(1, m + 1):\n            if s1[i - 1] == s2[j - 1]:\n                dp[i][j] = dp[i - 1][j - 1] + 1\n            else:\n                dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])\n    return dp[n][m]\n\n\nif __name__ == '__main__':\n    assert longest_common_subsequence('abc', 'abcd') == 3\n    assert longest_common_subsequence('abc', 'abc') == 1\n    assert longest_common_subsequence('ab', 'abc') == 2\n    assert longest_common_subsequence('a', 'b') == 1\n    assert longest_common_subsequence('ab', 'c') == 0\n    assert longest_common_subsequence('ab', 'd') == 1\n    assert longest_common_subsequence('abc', 'abc') == 3"
    },
    {
      "rank": 58,
      "score": 8.294940769211511,
      "candidate": "def longest_common_subsequence(s1, s2):\n    \"\"\"\n    :type s1: str\n    :type s2: str\n    :rtype: str\n    \"\"\"\n    if len(s1) > len(s2):\n        return longest_common_subsequence(s2, s1)\n\n    m = len(s1)\n    n = len(s2)\n\n    dp = [[0 for i in range(n + 1)] for j in range(m + 1)]\n\n    for i in range(1, m + 1):\n        for j in range(1, n + 1):\n            if s1[i - 1] == s2[j - 1]:\n                dp[i][j] = dp[i - 1][j - 1] + 1\n            else:\n                dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])\n\n    return dp[m][n]\n\n\nif __name__ == \"__main__\":\n    assert longest_common_subsequence(\"abc\", \"abc\") == 3\n    assert longest_common_subsequence(\"abc\", \"bac\") == 2\n    assert longest_common_subsequence(\"abc\", \"abc\") == 3\n    assert longest_common_subsequence(\"abc\", \"abcd\") == 4"
    },
    {
      "rank": 59,
      "score": 8.2938925966498,
      "candidate": "def longest_common_subsequence(str1, str2):\n    if len(str1) == 0 or len(str2) == 0:\n        return []\n\n    result = []\n    for i in range(min(len(str1), len(str2))):\n        if str1[i] == str2[i]:\n            result.append(str1[i])\n        else:\n            result.append(str1[i])\n            result.append(str2[i])\n    return result\n\n\nprint(longest_common_subsequence(\"abc\", \"acb\"))"
    },
    {
      "rank": 60,
      "score": 8.289838256518838,
      "candidate": "def longest_common_subsequence(s1, s2):\n    if not s1 or not s2:\n        return \"\"\n    elif len(s1) == 1 and len(s2) == 1:\n        return s1[0]\n    else:\n        m = len(s1)\n        n = len(s2)\n        result = \"\"\n        for i in range(max(m, n)):\n            if i == 0 or i == m-1 or j == 0 or j == n-1:\n                result += s1[i]\n            elif s1[i] == s2[j]:\n                result += s1[i]\n            else:\n                result += max(s1[i], s2[j])\n        return result"
    },
    {
      "rank": 61,
      "score": 8.251903304236286,
      "candidate": "def longest_common_subsequence(s1, s2):\n    \"\"\"\n    :type s1: str\n    :type s2: str\n    :rtype: str\n    \"\"\"\n    m, n = len(s1), len(s2)\n    dp = [[0 for i in range(n + 1)] for j in range(m + 1)]\n\n    for i in range(m + 1):\n        for j in range(n + 1):\n            if i == 0 or j == 0:\n                dp[i][j] = 0\n            elif s1[i - 1] == s2[j - 1]:\n                dp[i][j] = dp[i - 1][j - 1] + 1\n            else:\n                dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])\n\n    return dp[m][n]\n\n\nif __name__ == '__main__':\n    print(longest_common_subsequence(\"abc\", \"abcd\"))"
    },
    {
      "rank": 62,
      "score": 8.214125058964552,
      "candidate": "def lcs(seq1, seq2):\n    n = len(seq1)\n    m = len(seq2)\n    dp = [[0 for i in range(m+1)] for j in range(n+1)]\n    for i in range(n+1):\n        for j in range(m+1):\n            if i == 0 or j == 0:\n                dp[i][j] = 0\n            elif seq1[i-1] == seq2[j-1]:\n                dp[i][j] = dp[i-1][j-1] + 1\n            else:\n                dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n    return dp[n][m]\n\n\nprint(lcs([1, 2, 3], [2, 3, 4]))\nprint(lcs([1, 2, 3], [2, 3, 1]))\nprint(lcs([1, 2, 3], [1, 2, 3]))"
    },
    {
      "rank": 63,
      "score": 8.212735598038213,
      "candidate": "class Solution:\n    def longestCommonSubsequence(self, s: str, t: str) -> str:\n        if len(s) == 0 or len(t) == 0:\n            return \"\"\n\n        m = len(s)\n        n = len(t)\n\n        dp = [[0 for j in range(n + 1)] for i in range(m + 1)]\n\n        for i in range(1, m + 1):\n            for j in range(1, n + 1):\n                if i == 0 or j == 0:\n                    dp[i][j] = 0\n                elif s[i - 1] == t[j - 1]:\n                    dp[i][j] = dp[i - 1][j - 1] + 1\n                else:\n                    dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])\n\n        return dp[m][n]\n\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.longestCommonSubsequence(\"abc\", \"abc\"))\n    print(sol.longestCommonSubsequence(\"abc\", \"ab\"))\n    print(sol.longestCommonSubsequence(\"ab\", \"abc\"))"
    },
    {
      "rank": 64,
      "score": 8.211579567659316,
      "candidate": "def lcs(s1, s2):\n    if len(s1) == 0:\n        return len(s2)\n    if len(s2) == 0:\n        return len(s1)\n\n    if s1[0] == s2[0]:\n        return lcs(s1[1:], s2[1:])\n    else:\n        return max(lcs(s1, s2[1:]), lcs(s1[1:], s2))\n\n\nif __name__ == \"__main__\":\n    print(lcs(\"abc\", \"abc\"))\n    print(lcs(\"abc\", \"abc\"))\n    print(lcs(\"abc\", \"abc\"))\n    print(lcs(\"abc\", \"acb\"))"
    },
    {
      "rank": 65,
      "score": 8.209707251476969,
      "candidate": "def longest_common_subsequence(s1, s2):\n    n = len(s1)\n    m = len(s2)\n\n    if m == 0 or n == 0:\n        return \"\"\n\n    dp = [[0 for i in range(m + 1)] for j in range(n + 1)]\n\n    for i in range(1, n + 1):\n        for j in range(1, m + 1):\n            if i == 0 or j == 0:\n                dp[i][j] = 0\n            elif s1[i - 1] == s2[j - 1]:\n                dp[i][j] = dp[i - 1][j - 1] + 1\n            else:\n                dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])\n\n    return dp[n][m]\n\n\nif __name__ == \"__main__\":\n    print(longest_common_subsequence([1, 2, 3], [2, 3, 4]))\n    print(longest_common_subsequence([1, 2, 3], [1, 2, 4]))\n    print(longest_common_subsequence([1, 2, 3], [2, 3, 5]))"
    },
    {
      "rank": 66,
      "score": 8.2048573255218,
      "candidate": "def lcs(s1, s2):\n    if len(s1) == 0 or len(s2) == 0:\n        return []\n    if len(s1) == 1:\n        return [s1[0]]\n    if len(s2) == 1:\n        return [s2[0]]\n    if s1[0] == s2[0]:\n        return lcs(s1[1:], s2[1:]) + [s1[0]]\n    else:\n        return lcs(s1[1:], s2) + [s2[0]]\n\n\nif __name__ == \"__main__\":\n    s1 = \"aabcc\"\n    s2 = \"aabcc\"\n    print(lcs(s1, s2))"
    },
    {
      "rank": 67,
      "score": 8.172253082181854,
      "candidate": "def lcs(s1, s2):\n    m = len(s1)\n    n = len(s2)\n    if m == 0 or n == 0:\n        return 0\n    if s1[0] == s2[0]:\n        return lcs(s1[1:], s2[1:]) + 1\n    else:\n        return max(lcs(s1, s2[:-1]), lcs(s1[:-1], s2))\n\n\nif __name__ == \"__main__\":\n    assert lcs([\"a\", \"b\", \"c\"], [\"a\", \"b\", \"c\"]) == 3\n    assert lcs([\"a\", \"b\", \"c\"], [\"b\", \"c\", \"a\"]) == 2\n    assert lcs([\"a\", \"b\", \"c\"], [\"a\", \"c\", \"b\"]) == 1\n    assert lcs([\"a\", \"b\", \"c\"], [\"b\", \"c\", \"c\"]) == 2\n    assert lcs([\"a\", \"b\", \"c\"], [\"c\", \"b\", \"a\"]) == 1\n    assert lcs([\"a\", \"b\", \"c\"], [\"c\", \"b\", \"b\"]) == 2\n    assert lcs([\"a\", \"b\", \"c\"], [\"c\", \"b\", \"c\"]) == 1"
    },
    {
      "rank": 68,
      "score": 8.163300679823958,
      "candidate": "def longest_common_subsequence(s1, s2):\n    if not s1 or not s2:\n        return s1 or s2\n    if len(s1) == 1:\n        return s1[0]\n    if len(s2) == 1:\n        return s2[0]\n    i = j = 0\n    while i < len(s1) and j < len(s2):\n        if s1[i] == s2[j]:\n            i += 1\n            j += 1\n        elif s1[i] < s2[j]:\n            i += 1\n        else:\n            j += 1\n    return s1[i:] + s2[j:]\n\n\nif __name__ == \"__main__\":\n    assert longest_common_subsequence(\"abc\", \"abc\") == \"abc\"\n    assert longest_common_subsequence(\"abcd\", \"abcd\") == \"abcd\"\n    assert longest_common_subsequence(\"abcd\", \"abcde\") == \"abcd\"\n    assert longest_common_subsequence(\"a\", \"b\") == \"a\"\n    assert longest_common_subsequence(\"a\", \"ab\") == \"ab\"\n    assert longest_common_subsequence(\"a\", \"abcd\") == \"abcd\"\n    assert longest_common_subsequence(\"a\", \"abcdab\") == \"abcdab\"\n    assert longest_common_subsequence(\"a\", \"abcdabcd\") == \"abcdabcd\""
    },
    {
      "rank": 69,
      "score": 8.144125099485041,
      "candidate": "def longest_common_subsequence(string1, string2):\n    # write your code here\n    if not string1 or not string2:\n        return []\n    if len(string1) == 1 and len(string2) == 1:\n        return [string1[0]]\n    if len(string1) == 1:\n        return string2\n    if len(string2) == 1:\n        return string1\n    if string1[0]!= string2[0]:\n        return longest_common_subsequence(string1[1:], string2[1:])\n    result = []\n    for i in range(min(len(string1), len(string2))):\n        if string1[i] == string2[i]:\n            result.append(string1[i])\n        else:\n            result.append(longest_common_subsequence(string1[i+1:], string2[i+1:]))\n    return result\n\n\ndef longest_common_subsequence_2(string1, string2):\n    # write your code here\n    if not string1 or not string2:\n        return []\n    if len(string1) == 1 and len(string2) == 1:\n        return [string1[0]]\n    if len(string1) == 1:\n        return string2\n    if string1[0]!= string2[0]:\n        return longest_common_subsequence_2(string1[1:], string2[1:])\n    result = []\n    for i in range(min(len(string1), len(string2))):\n        if string1[i] == string2[i]:\n            result.append(string1[i])\n        else:\n            result.append(longest_common_subsequence_2(string1[i+1:], string2[i+1:]))\n    return result\n\n\nprint(longest_common_subsequence_2(\"abc\", \"abc\"))"
    },
    {
      "rank": 70,
      "score": 8.143591138329747,
      "candidate": "def longest_common_subsequence(seq1, seq2):\n    # Write your code here\n    m = len(seq1)\n    n = len(seq2)\n    if m == 0 or n == 0:\n        return \"\"\n    dp = [[0 for _ in range(n+1)] for _ in range(m+1)]\n    for i in range(m+1):\n        for j in range(n+1):\n            if i == 0 or j == 0:\n                dp[i][j] = 0\n            elif seq1[i-1] == seq2[j-1]:\n                dp[i][j] = dp[i-1][j-1] + 1\n            else:\n                dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n    return dp[m][n]\n\n\n\nif __name__ == \"__main__\":\n    print(longest_common_subsequence([1, 2, 3, 4, 5], [2, 4, 5, 1, 3]))"
    },
    {
      "rank": 71,
      "score": 8.121884567141883,
      "candidate": "def lcs(s1, s2):\n  n = len(s1)\n  m = len(s2)\n  dp = [[0 for j in range(m+1)] for i in range(n+1)]\n\n  for i in range(1, n+1):\n    for j in range(1, m+1):\n      if s1[i-1] == s2[j-1]:\n        dp[i][j] = dp[i-1][j-1] + 1\n      else:\n        dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n\n  return dp[n][m]\n\ns1 = \"ABC\"\ns2 = \"ABCDE\"\nprint(lcs(s1, s2))\n\ns1 = \"ABC\"\ns2 = \"ABCDE\"\nprint(lcs(s1, s2))\n\ns1 = \"A\"\ns2 = \"A\"\nprint(lcs(s1, s2))\n\ns1 = \"A\"\ns2 = \"AA\"\nprint(lcs(s1, s2))\n\ns1 = \"A\"\ns2 = \"AAA\"\nprint(lcs(s1, s2))\n\ns1 = \"A\"\ns2 = \"AAAA\"\nprint(lcs(s1, s2))\n\ns1 = \"A\"\ns2 = \"AAB\"\nprint(lcs(s1, s2))\n\ns1 = \"A\"\ns2 = \"AABA\"\nprint(lcs(s1, s2))\n\ns1 = \"A\"\ns2 = \"AABAA\"\nprint(lcs(s1, s2))\n\ns1 = \"A\"\ns2 = \"AABAAAB\"\nprint(lcs(s1, s2))\n\ns1 = \"A\"\ns2 = \"AABAAABAA\"\nprint(lcs(s1, s2))\n\ns1 = \"A\"\ns2 = \"AABAAABAAABAA\"\nprint(lcs(s1, s2))\n\ns1 = \""
    },
    {
      "rank": 72,
      "score": 8.105983444291466,
      "candidate": "class Solution(object):\n    def longestCommonSubsequence(self, str1, str2):\n        \"\"\"\n        :type str1: str\n        :type str2: str\n        :rtype: str\n        \"\"\"\n        n, m = len(str1), len(str2)\n        if n == 0 or m == 0:\n            return \"\"\n\n        dp = [[0] * (m + 1) for _ in range(n + 1)]\n\n        for i in range(n + 1):\n            for j in range(m + 1):\n                if i == 0 or j == 0:\n                    dp[i][j] = 0\n                elif str1[i - 1] == str2[j - 1]:\n                    dp[i][j] = dp[i - 1][j - 1] + 1\n                else:\n                    dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])\n\n        return dp[n][m]\n\n\nif __name__ == \"__main__\":\n    s = Solution()\n    print s.longestCommonSubsequence(\"abc\", \"abc\")\n    print s.longestCommonSubsequence(\"aa\", \"a\")\n    print s.longestCommonSubsequence(\"abc\", \"ab\")\n    print s.longestCommonSubsequence(\"abc\", \"abc\")\n    print s.longestCommonSubsequence(\"abc\", \"acb\")\n    print s.longestCommonSubsequence(\"acb\", \"abc\")\n    print s.longestCommonSubsequence(\"abc\", \"aab\")\n    print s.longestCommonSubsequence(\"acb\", \"acb\")\n    print s.longestCommonSubsequence(\"abc\", \"abab\")\n    print s.longestCommonSubsequence(\"abc\", \"abc\")\n    print s.longestCommonSubsequence(\"abc\", \"ababa\")\n    print s.longestCommonSubsequence(\"ababa\", \"abc\")\n    print s.longestCommonSubsequence(\"ababa\", \"abab\")"
    },
    {
      "rank": 73,
      "score": 8.08452234024709,
      "candidate": "def longest_common_subsequence(s1, s2):\n  if len(s1) == 0 or len(s2) == 0:\n    return []\n  if len(s1) == 1:\n    return s1 if s2[0] == s1[0] else s2\n  if len(s2) == 1:\n    return s1 if s1[0] == s2[0] else s2\n  lcs = []\n  for i in range(len(s1)):\n    for j in range(len(s2)):\n      if s1[i] == s2[j]:\n        lcs.append(s1[i])\n      else:\n        break\n  return lcs\n\n\ns1 = \"abc\"\ns2 = \"bac\"\nprint(longest_common_subsequence(s1, s2))"
    },
    {
      "rank": 74,
      "score": 8.024835682833125,
      "candidate": "def longest_common_subsequence(a, b):\n    if len(a) < len(b):\n        return longest_common_subsequence(b, a)\n    elif len(a) == len(b):\n        return a[0] if a[0] == b[0] else \"\"\n    else:\n        return \"\"\n\n\nif __name__ == \"__main__\":\n    print(longest_common_subsequence(\"abc\", \"abc\"))\n    print(longest_common_subsequence(\"ab\", \"ac\"))\n    print(longest_common_subsequence(\"ab\", \"abc\"))\n    print(longest_common_subsequence(\"abc\", \"ab\"))"
    },
    {
      "rank": 75,
      "score": 7.990432406683839,
      "candidate": "def longestCommonSubsequence(s1, s2):\n    if len(s1) == 0:\n        return s2\n    if len(s2) == 0:\n        return s1\n    if s1[0] == s2[0]:\n        return longestCommonSubsequence(s1[1:], s2[1:])\n    else:\n        return max(longestCommonSubsequence(s1, s2[1:]), longestCommonSubsequence(s1[1:], s2))\n\nif __name__ == \"__main__\":\n    assert longestCommonSubsequence(\"abc\", \"abc\") == \"abc\"\n    assert longestCommonSubsequence(\"\", \"abc\") == \"\"\n    assert longestCommonSubsequence(\"abc\", \"abcde\") == \"abcde\"\n    assert longestCommonSubsequence(\"abc\", \"\") == \"\""
    },
    {
      "rank": 76,
      "score": 7.938028884277233,
      "candidate": "def lcs(s1, s2):\n    if len(s1) == 0 or len(s2) == 0:\n        return []\n\n    # initialize the matrix\n    m = [[0 for _ in range(len(s2) + 1)] for _ in range(len(s1) + 1)]\n\n    for i in range(1, len(s1) + 1):\n        for j in range(1, len(s2) + 1):\n            if s1[i - 1] == s2[j - 1]:\n                m[i][j] = m[i - 1][j - 1] + 1\n            else:\n                m[i][j] = max(m[i - 1][j], m[i][j - 1])\n\n    # return the longest common subsequence\n    return m[len(s1)][len(s2)]\n\n\ns1 = \"abc\"\ns2 = \"abcde\"\nprint(lcs(s1, s2))"
    },
    {
      "rank": 77,
      "score": 7.915588979966494,
      "candidate": "def longest_common_subsequence(arr1, arr2):\n    if len(arr1) < len(arr2):\n        return longest_common_subsequence(arr2, arr1)\n\n    if len(arr1) == 0:\n        return arr2\n\n    if len(arr2) == 0:\n        return arr1\n\n    if arr1[0] == arr2[0]:\n        return longest_common_subsequence(arr1[1:], arr2[1:])\n\n    return arr1[0] + longest_common_subsequence(arr1[1:], arr2)\n\n\nif __name__ == '__main__':\n    print(longest_common_subsequence([1, 2, 3], [1, 2, 3, 4]))\n    print(longest_common_subsequence([1, 2, 3], [1, 3, 4]))\n    print(longest_common_subsequence([1, 2, 3, 4], [2, 3, 4]))\n    print(longest_common_subsequence([1, 2, 3], [2, 4, 5]))\n    print(longest_common_subsequence([1, 2, 3, 4], [3, 4, 5]))\n    print(longest_common_subsequence([1, 2, 3, 4], [5, 4, 3, 2]))\n    print(longest_common_subsequence([1, 2, 3, 4], [5, 3, 4, 2]))"
    },
    {
      "rank": 78,
      "score": 7.8912769574414305,
      "candidate": "def longest_common_subsequence(a, b):\n    m = len(a)\n    n = len(b)\n\n    if m == 0 or n == 0:\n        return \"\"\n\n    dp = [[0 for x in range(n + 1)] for y in range(m + 1)]\n    for i in range(1, m + 1):\n        for j in range(1, n + 1):\n            if a[i - 1] == b[j - 1]:\n                dp[i][j] = dp[i - 1][j - 1] + 1\n            else:\n                dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])\n    return dp[m][n]\n\n\nif __name__ == \"__main__\":\n    print(longest_common_subsequence([1, 2, 3], [2, 2, 3]))\n    print(longest_common_subsequence([1, 2, 3], [2, 2, 4]))"
    },
    {
      "rank": 79,
      "score": 7.868947655733293,
      "candidate": "def longestCommonSubsequence(s1, s2):\n    m, n = len(s1), len(s2)\n    dp = [[0 for _ in range(n + 1)] for _ in range(m + 1)]\n\n    for i in range(1, m + 1):\n        for j in range(1, n + 1):\n            if s1[i - 1] == s2[j - 1]:\n                dp[i][j] = dp[i - 1][j - 1] + 1\n            else:\n                dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])\n\n    return dp[m][n]\n\n\nprint(longestCommonSubsequence(\"abc\", \"abc\"))"
    },
    {
      "rank": 80,
      "score": 7.84634113240411,
      "candidate": "def longestCommonSubsequence(a, b):\n    if len(a) == 0:\n        return b\n    if len(b) == 0:\n        return a\n    if a[0] == b[0]:\n        return longestCommonSubsequence(a[1:], b[1:])\n    return max(longestCommonSubsequence(a[1:], b), longestCommonSubsequence(a, b[1:]))\n\n\nprint(longestCommonSubsequence([1, 2, 3], [2, 3, 4]))"
    },
    {
      "rank": 81,
      "score": 7.834022619458933,
      "candidate": "def lcs(s1, s2):\n    m, n = len(s1), len(s2)\n    if m == 0 or n == 0:\n        return \"\"\n    if m == 1 and n == 1:\n        return s1[0]\n    if m == 1 and n == 2:\n        return s2[0]\n    if m == 2 and n == 1:\n        return max(s1[0], s2[0])\n    if m == 2 and n == 2:\n        return max(s1[0], s2[0]) + s1[1] + s2[1]\n    if m > 1 and n > 1:\n        return max(s1[0], s2[0]) + lcs(s1[1:], s2[1:])\n    if m > 1 and n == 1:\n        return s1[0] + s2[0]\n    if m == 1 and n == 2:\n        return s1[0]\n    if m == 2 and n == 1:\n        return s1[0] + s2[0]\n    if m == 2 and n == 2:\n        return s1[0] + s2[0] + s1[1] + s2[1]\n    return \"\"\n\ns1 = \"abc\"\ns2 = \"def\"\nprint(lcs(s1, s2))"
    },
    {
      "rank": 82,
      "score": 7.780351419995229,
      "candidate": "def longest_common_subsequence(s1, s2):\n    if len(s1) == 0:\n        return len(s2)\n    if len(s2) == 0:\n        return len(s1)\n    if s1[0] == s2[0]:\n        return max(longest_common_subsequence(s1[1:], s2[1:]), longest_common_subsequence(s1, s2[1:]))\n    else:\n        return max(longest_common_subsequence(s1, s2[1:]), longest_common_subsequence(s1[1:], s2))\n\n\nif __name__ == \"__main__\":\n    assert longest_common_subsequence([\"a\", \"b\", \"c\"], [\"a\", \"b\", \"c\"]) == 3\n    assert longest_common_subsequence([\"a\", \"b\"], [\"a\", \"b\"]) == 2\n    assert longest_common_subsequence([\"a\", \"b\"], [\"b\", \"c\"]) == 2\n    assert longest_common_subsequence([\"a\", \"b\"], [\"b\", \"c\"]) == 1\n    assert longest_common_subsequence([\"a\", \"b\"], [\"b\", \"c\", \"d\"]) == 2"
    },
    {
      "rank": 83,
      "score": 7.738292593776799,
      "candidate": "def longestCommonSubsequence(s1, s2):\n    if len(s1) == 0 or len(s2) == 0:\n        return []\n    if s1[0] == s2[0]:\n        return longestCommonSubsequence(s1[1:], s2[1:]) + [s1[0]]\n    else:\n        return longestCommonSubsequence(s1, s2[1:])\n\nprint(longestCommonSubsequence(\"abc\", \"abc\"))\nprint(longestCommonSubsequence(\"abc\", \"ab\"))\nprint(longestCommonSubsequence(\"abc\", \"abcd\"))\nprint(longestCommonSubsequence(\"ab\", \"abcd\"))\nprint(longestCommonSubsequence(\"ab\", \"abcd\"))\nprint(longestCommonSubsequence(\"\", \"\"))"
    },
    {
      "rank": 84,
      "score": 7.7320703513377165,
      "candidate": "def longest_common_subsequence(s1, s2):\n    \"\"\"\n    :type s1: str\n    :type s2: str\n    :rtype: str\n    \"\"\"\n    if len(s1) == 0:\n        return s2\n    if len(s2) == 0:\n        return s1\n\n    if s1[0] == s2[0]:\n        return longest_common_subsequence(s1[1:], s2[1:])\n\n    return max(longest_common_subsequence(s1[1:], s2),\n               longest_common_subsequence(s1, s2[1:]))\n\n\nif __name__ == \"__main__\":\n    assert longest_common_subsequence('abc', 'abc') == 'abc'\n    assert longest_common_subsequence('abc', 'ab') == 'abc'\n    assert longest_common_subsequence('abc', 'acb') == 'acb'\n    assert longest_common_subsequence('abc', 'abc') == 'abc'\n    assert longest_common_subsequence('abc', 'bac') == 'bac'\n    assert longest_common_subsequence('abc', 'bacb') == 'bacb'"
    },
    {
      "rank": 85,
      "score": 7.705183449260731,
      "candidate": "def longest_common_subsequence(seq1, seq2):\n    \"\"\"\n    :type seq1: List[int]\n    :type seq2: List[int]\n    :rtype: int\n    \"\"\"\n    if not seq1 or not seq2:\n        return 0\n\n    if len(seq1) == 1:\n        return len(seq2)\n\n    if len(seq2) == 1:\n        return len(seq1)\n\n    m = len(seq1)\n    n = len(seq2)\n    dp = [[0] * (n + 1) for _ in range(m + 1)]\n\n    for i in range(1, m + 1):\n        for j in range(1, n + 1):\n            if seq1[i - 1] == seq2[j - 1]:\n                dp[i][j] = dp[i - 1][j - 1] + 1\n            else:\n                dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])\n\n    return dp[m][n]\n\n\nif __name__ == '__main__':\n    assert longest_common_subsequence([1, 2, 3], [1, 2, 4]) == 3\n    assert longest_common_subsequence([1, 2, 3], [2, 3, 4]) == 3\n    assert longest_common_subsequence([1, 2, 3], [2, 4, 5]) == 4\n    assert longest_common_subsequence([1, 2, 3], [2, 5, 4]) == 3"
    },
    {
      "rank": 86,
      "score": 7.5819855281879285,
      "candidate": "def lcs(s1, s2):\n    m = len(s1)\n    n = len(s2)\n    dp = [[0 for _ in range(n + 1)] for _ in range(m + 1)]\n\n    for i in range(m + 1):\n        for j in range(n + 1):\n            if i == 0 or j == 0:\n                dp[i][j] = 0\n            elif s1[i - 1] == s2[j - 1]:\n                dp[i][j] = dp[i - 1][j - 1] + 1\n            else:\n                dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])\n\n    return dp[m][n]\n\n\nif __name__ == '__main__':\n    print(lcs('abc', 'abc'))\n    print(lcs('abc', 'ab'))\n    print(lcs('abc', 'abcc'))\n    print(lcs('abc', 'abccc'))\n    print(lcs('abc', 'acb'))\n    print(lcs('abc', 'acbcc'))\n    print(lcs('abc', 'acbccc'))\n    print(lcs('ab', 'ab'))\n    print(lcs('abc', 'abc'))\n    print(lcs('abc', 'abcab'))\n    print(lcs('abc', 'abcabc'))\n    print(lcs('abc', 'abcabcab'))\n    print(lcs('abc', 'abcabcabcc'))\n    print(lcs('abc', 'abcabcabccc'))\n    print(lcs('abc', 'abcabcabcccab'))"
    },
    {
      "rank": 87,
      "score": 7.562924366763077,
      "candidate": "def find_longest_common_subsequence(a, b):\n    if len(a) > len(b):\n        return find_longest_common_subsequence(b, a)\n    if len(b) > len(a):\n        return find_longest_common_subsequence(a, b)\n    if a[0] == b[0]:\n        return find_longest_common_subsequence(a[1:], b[1:]) + [a[0]]\n    return find_longest_common_subsequence(a, b[1:]) + [b[0]]\n\nprint(find_longest_common_subsequence(\"a\", \"aa\"))\nprint(find_longest_common_subsequence(\"a\", \"aa\"))\nprint(find_longest_common_subsequence(\"aa\", \"a\"))"
    },
    {
      "rank": 88,
      "score": 7.4878043221155455,
      "candidate": "def longest_common_subsequence(s1, s2):\n    if len(s1) < len(s2):\n        return longest_common_subsequence(s2, s1)\n\n    m = len(s1)\n    n = len(s2)\n    dp = [[0 for j in range(n + 1)] for i in range(m + 1)]\n\n    for i in range(m + 1):\n        for j in range(n + 1):\n            if i == 0 or j == 0:\n                dp[i][j] = 0\n            elif s1[i - 1] == s2[j - 1]:\n                dp[i][j] = dp[i - 1][j - 1] + 1\n            else:\n                dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])\n\n    return dp[m][n]\n\n\nif __name__ == \"__main__\":\n    print(longest_common_subsequence(\"abc\", \"abc\"))"
    },
    {
      "rank": 89,
      "score": 7.464609382504557,
      "candidate": "def longestCommonSubsequence(s1, s2):\n    m = len(s1)\n    n = len(s2)\n    dp = [[0 for j in range(n+1)] for i in range(m+1)]\n\n    for i in range(m+1):\n        for j in range(n+1):\n            if i == 0 or j == 0:\n                dp[i][j] = 0\n            elif s1[i-1] == s2[j-1]:\n                dp[i][j] = dp[i-1][j-1] + 1\n            else:\n                dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n    return dp[m][n]\n\ns1 = \"ABC\"\ns2 = \"ABC\"\nprint(longestCommonSubsequence(s1, s2))"
    },
    {
      "rank": 90,
      "score": 7.134571892399572,
      "candidate": "def longest_common_subsequence(seq1, seq2):\n    m, n = len(seq1), len(seq2)\n    dp = [[0 for x in range(n+1)] for x in range(m+1)]\n    for i in range(m+1):\n        for j in range(n+1):\n            if i == 0 or j == 0:\n                dp[i][j] = 0\n            elif seq1[i-1] == seq2[j-1]:\n                dp[i][j] = dp[i-1][j-1] + 1\n            else:\n                dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n    return dp[m][n]\n\n\nprint(longest_common_subsequence([1, 2, 3, 4, 5, 6, 7, 8, 9], [2, 3, 4, 5, 6, 7, 8, 9]))"
    },
    {
      "rank": 91,
      "score": 3.0,
      "candidate": "class Solution:\n    def longestCommonSubsequence(self, s: str, t: str) -> str:\n        if len(s) == 0 or len(t) == 0:\n            return \"\"\n\n        if len(s) == 1 and len(t) == 1:\n            return s if s == t else \"\"\n\n        dp = [[0] * (len(t) + 1) for _ in range(len(s) + 1)]\n        for i in range(1, len(s) + 1):\n            for j in range(1, len(t) + 1):\n                if i == 1 or j == 1:\n                    dp[i][j] = 0\n                elif s[i - 1] == t[j - 1]:\n                    dp[i][j] = dp[i - 1][j - 1] + 1\n                else:\n                    dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])\n        return dp[len(s)][len(t)]"
    },
    {
      "rank": 92,
      "score": 3.0,
      "candidate": "class Solution:\n    def findLongestCommonSubsequence(self, s: str, t: str) -> str:\n        if len(s) == 0 or len(t) == 0:\n            return ''\n\n        m, n = len(s), len(t)\n\n        dp = [[0 for _ in range(n + 1)] for _ in range(m + 1)]\n\n        for i in range(m + 1):\n            for j in range(n + 1):\n                if i == 0 or j == 0:\n                    dp[i][j] = 0\n                elif s[i - 1] == t[j - 1]:\n                    dp[i][j] = dp[i - 1][j - 1] + 1\n                else:\n                    dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])\n\n        return dp[m][n]\n\n\nif __name__ == \"__main__\":\n    assert Solution().findLongestCommonSubsequence(\"abc\", \"def\") == \"abc\"\n    assert Solution().findLongestCommonSubsequence(\"abc\", \"abc\") == \"abc\"\n    assert Solution().findLongestCommonSubsequence(\"abc\", \"abcde\") == \"abcde\""
    },
    {
      "rank": 93,
      "score": 3.0,
      "candidate": "class Solution:\n    # @param A : list of integers\n    # @param B : list of integers\n    # @return an integer\n    def longestCommonSubsequence(self, A, B):\n        m = len(A)\n        n = len(B)\n        dp = [[0 for i in range(n+1)] for j in range(m+1)]\n        for i in range(1, m+1):\n            for j in range(1, n+1):\n                if A[i-1] == B[j-1]:\n                    dp[i][j] = dp[i-1][j-1] + 1\n                else:\n                    dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n        return dp[m][n]\n\n\nif __name__ == \"__main__\":\n    s = Solution()\n    print(s.longestCommonSubsequence([1, 2, 3], [2, 3, 4]))\n    print(s.longestCommonSubsequence([1, 2, 3], [2, 3, 1]))\n    print(s.longestCommonSubsequence([1, 2, 3, 4, 5], [2, 3, 4, 5]))\n    print(s.longestCommonSubsequence([1, 2, 3, 4, 5], [3, 4, 5, 6, 7]))\n    print(s.longestCommonSubsequence([1, 2, 3, 4, 5], [1, 3, 2, 4, 5]))\n    print(s.longestCommonSubsequence([1, 2, 3, 4, 5], [1, 3, 4, 5, 6]))\n    print(s.longestCommonSubsequence([1, 2, 3, 4, 5], [1, 3, 4, 5, 6, 7]))\n    print(s.longestCommonSubsequence([1, 2, 3, 4, 5], [2, 3, 4, 5, 6]))\n    print(s.longestCommonSubsequence([1, 2, 3, 4, 5], [2, 3, 4, 5, 6, 7]))\n    print(s.longestCommonSubsequence([1, 2, 3, 4, 5"
    },
    {
      "rank": 94,
      "score": 3.0,
      "candidate": "def lcs(s1, s2):\n    # Write your code here\n    if len(s1) == 0 or len(s2) == 0:\n        return \"\"\n    if len(s1) == 1:\n        return s1[0]\n    if len(s2) == 1:\n        return s2[0]\n    if s1[0] == s2[0]:\n        return lcs(s1[1:], s2[1:])\n    else:\n        return max(lcs(s1[1:], s2), lcs(s1, s2[1:]))\n\n\nprint(lcs([], []))\nprint(lcs([1], [1]))\nprint(lcs([1, 2], [1, 3]))\nprint(lcs([1, 2, 3], [1, 2, 3]))"
    },
    {
      "rank": 95,
      "score": 3.0,
      "candidate": "class Solution:\n    def longestCommonSubsequence(self, s1: str, s2: str) -> str:\n        m, n = len(s1), len(s2)\n        dp = [[0 for j in range(n+1)] for i in range(m+1)]\n        for i in range(1, m+1):\n            for j in range(1, n+1):\n                if s1[i-1] == s2[j-1]:\n                    dp[i][j] = dp[i-1][j-1] + 1\n                else:\n                    dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n        return dp[m][n]"
    },
    {
      "rank": 96,
      "score": 3.0,
      "candidate": "class Solution:\n    def longestCommonSubsequence(self, s1: str, s2: str) -> str:\n        if len(s1) == 0 or len(s2) == 0:\n            return \"\"\n        \n        if s1[0] == s2[0]:\n            return s1[0]\n        \n        m = len(s1)\n        n = len(s2)\n        \n        dp = [[0 for i in range(n + 1)] for j in range(m + 1)]\n        \n        for i in range(1, m + 1):\n            for j in range(1, n + 1):\n                if i == 0 or j == 0:\n                    dp[i][j] = 0\n                elif s1[i - 1] == s2[j - 1]:\n                    dp[i][j] = dp[i - 1][j - 1] + 1\n                else:\n                    dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])\n        \n        return dp[m][n]"
    },
    {
      "rank": 97,
      "score": 3.0,
      "candidate": "def longest_common_subsequence(s1, s2):\n    m = len(s1)\n    n = len(s2)\n    if m == 0 or n == 0:\n        return \"\"\n\n    if m == 1 and n == 1:\n        return s1[0]\n\n    if m == 1 and n > 1:\n        return max(s1[0], s2[0])\n\n    if m > 1 and n == 1:\n        return max(s1[0], s2[0], s1[0] + s2[0])\n\n    if m > 1 and n > 1:\n        return max(s1[0], s2[0], s1[0] + s2[0], s1[0] + s2[0], s1[0] + s2[1])\n\n    return s1[0] + s2[0]\n\n\nprint(longest_common_subsequence([\"a\", \"b\", \"c\"], [\"a\", \"b\"]))\nprint(longest_common_subsequence([\"a\", \"b\", \"c\"], [\"a\", \"c\"]))\nprint(longest_common_subsequence([\"a\", \"b\", \"c\"], [\"b\", \"c\"]))\nprint(longest_common_subsequence([\"a\", \"b\", \"c\"], [\"a\", \"b\"]))\nprint(longest_common_subsequence([\"a\", \"b\", \"c\"], [\"a\", \"b\"]))"
    },
    {
      "rank": 98,
      "score": 3.0,
      "candidate": "class Solution:\n    def findLCS(self, s: str, t: str) -> int:\n        m, n = len(s), len(t)\n        dp = [[0 for i in range(n+1)] for j in range(m+1)]\n        for i in range(m+1):\n            for j in range(n+1):\n                if i == 0 or j == 0:\n                    dp[i][j] = 0\n                elif s[i-1] == t[j-1]:\n                    dp[i][j] = dp[i-1][j-1] + 1\n                else:\n                    dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n        return dp[m][n]\n\n\nif __name__ == \"__main__\":\n    s = Solution()\n    print(s.findLCS(\"abc\", \"abc\"))\n    print(s.findLCS(\"abc\", \"ac\"))\n    print(s.findLCS(\"aab\", \"bac\"))\n    print(s.findLCS(\"ab\", \"ac\"))"
    },
    {
      "rank": 99,
      "score": 3.0,
      "candidate": "def longest_common_subsequence(a, b):\n    \"\"\"\n    :type a: List[int]\n    :type b: List[int]\n    :rtype: int\n    \"\"\"\n    if len(a) == 0 or len(b) == 0:\n        return 0\n    m = len(a)\n    n = len(b)\n    dp = [[0 for _ in range(n + 1)] for _ in range(m + 1)]\n    for i in range(1, m + 1):\n        for j in range(1, n + 1):\n            if a[i - 1] == b[j - 1]:\n                dp[i][j] = dp[i - 1][j - 1] + 1\n            else:\n                dp[i][j] = max(dp[i][j - 1], dp[i - 1][j])\n    return dp[m][n]\n\n\na = [1, 2, 3, 4, 5]\nb = [2, 4, 5]\nprint(longest_common_subsequence(a, b))\n\na = [1, 2, 3, 4]\nb = [5, 6, 7, 8]\nprint(longest_common_subsequence(a, b))\n\na = [1, 2, 3, 4]\nb = [6, 7, 8]\nprint(longest_common_subsequence(a, b))\n\na = [1, 2, 3]\nb = [3, 4, 5]\nprint(longest_common_subsequence(a, b))\n\na = [1, 2, 3]\nb = [4, 5, 6]\nprint(longest_common_subsequence(a, b))\n\na = [1, 2, 3, 4]\nb = [5, 6, 7, 8]\nprint(longest_common_subsequence(a, b))"
    },
    {
      "rank": 100,
      "score": 3.0,
      "candidate": "def longest_common_subsequence(s1, s2):\n    \"\"\"\n    :type s1: str\n    :type s2: str\n    :rtype: str\n    \"\"\"\n    if len(s1) == 0:\n        return s2\n    if len(s2) == 0:\n        return s1\n\n    # if there is only one char in both\n    if len(s1) == 1 and len(s2) == 1:\n        return s1[0]\n\n    # if there are two char in both\n    if len(s1) == 2 and len(s2) == 2:\n        if s1[0] == s2[0]:\n            return s1[0]\n        return s2[0]\n\n    # if there are two char in both but different\n    if len(s1) == 2 and len(s2) > 2:\n        return longest_common_subsequence(s1[1:], s2)\n\n    # if there are two char in both but different but different\n    if len(s1) > 2 and len(s2) == 2:\n        return longest_common_subsequence(s1[1:], s2[1:])\n\n    # if there are two char in both but different but different but different\n    if len(s1) > 2 and len(s2) > 2:\n        return longest_common_subsequence(s1[1:], s2[1:])\n\n    # if there are two char in both but different but different but different\n    if len(s1) > 2 and len(s2) > 2 and s1[0] == s2[0]:\n        return longest_common_subsequence(s1[1:], s2[1:])\n\n    # if there are two char in both but different but different but different\n    if len(s1) > 2 and len(s2) > 2 and s1[0] == s2[1]:\n        return longest_common_subsequence(s1[1:], s2[1:])\n\n    # if there are two char in both but different but different but different\n    if len(s1) > 2 and len(s"
    }
  ]
}