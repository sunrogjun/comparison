{
  "timestamp": "2025-09-14T15:24:19.947128",
  "method": "improved_llm_judge",
  "judge_model": "codellama/CodeLlama-7b-Python-hf",
  "target_model": "codet5-770m",
  "dataset": "mbpp",
  "problem_number": 400,
  "total_candidates": 100,
  "results": [
    {
      "rank": 1,
      "score": 10.0,
      "candidate": "import re\n\n\ndef camel_case(snake):\n    camel = re.sub(\"(.)([A-Z][a-z]+)\", r\"\\1_\\2\", snake)\n    return camel.title()"
    },
    {
      "rank": 2,
      "score": 10.0,
      "candidate": "import re\n\ndef camel_case(snake_str):\n    \"\"\"\n    :type snake_str: str\n    :rtype: str\n    \"\"\"\n    return re.sub('(.)([A-Z][a-z]+)', r'\\1_\\2', snake_str).lower()\n\nprint(camel_case(\"snake\"))"
    },
    {
      "rank": 3,
      "score": 9.370583536698913,
      "candidate": "import re\n\n\ndef camel_case_to_snake(camel_case_string):\n    snake_case_string = re.sub(r'(.)([A-Z][a-z]+)', r'\\1_\\2', camel_case_string).lower()\n    return snake_case_string"
    },
    {
      "rank": 4,
      "score": 9.234050852198141,
      "candidate": "import re\n\n\ndef camel_case_to_snake(input_string: str) -> str:\n    regex_pattern = r'([a-z]+)([A-Z])'\n    result = re.sub(regex_pattern, r'\\1_\\2', input_string)\n    return result\n\n\nprint(camel_case_to_snake(\"snake\"))\nprint(camel_case_to_snake(\"camel\"))"
    },
    {
      "rank": 5,
      "score": 9.21346272767743,
      "candidate": "import re\n\n\ndef snake_to_camel(snake_case):\n    \"\"\"\n    :type snake_case: str\n    :rtype: str\n    \"\"\"\n    camel_case = re.sub(r\"([A-Z])\", lambda x: x.group(1).upper(), snake_case)\n    return camel_case"
    },
    {
      "rank": 6,
      "score": 9.205959372648458,
      "candidate": "import re\n\n\ndef snake_to_camel(snake_case):\n    \"\"\"\n    :type snake_case: str\n    :rtype: str\n    \"\"\"\n    snake_case = snake_case.replace(\"_\", \"\")\n    camel_case = re.sub(r\"([a-z])([A-Z])\", r\"\\1_\\2\", snake_case).lower()\n    return camel_case\n\n\nprint(snake_to_camel(\"snake_case\"))"
    },
    {
      "rank": 7,
      "score": 9.122564458729856,
      "candidate": "import re\n\ndef snake_to_camel(snake_string):\n    camel_string = re.sub(r'([a-z])([A-Z])', lambda m: m.group(1).upper() + m.group(2).lower(), snake_string)\n    return camel_string\n\nassert snake_to_camel(\"snake\") == \"snake\"\nassert snake_to_camel(\"snakeCase\") == \"snakeCase\"\nassert snake_to_camel(\"snakeCase\") == \"snakeCase\"\nassert snake_to_camel(\"snakeCase\") == \"snakeCase\"\nassert snake_to_camel(\"snakeCase\") == \"snakeCase\"\nassert snake_to_camel(\"snakeCase\") == \"snakeCase\""
    },
    {
      "rank": 8,
      "score": 8.973005557553902,
      "candidate": "import re\n\ndef camel_to_snake(snake_case):\n    return re.sub('(.)([A-Z][a-z]+)', r'\\1_\\2', snake_case).lower()\n\nif __name__ == '__main__':\n    assert camel_to_snake(\"SnakeCase\") == \"SnakeCase\"\n    assert camel_to_snake(\"snakeCase\") == \"snakeCase\"\n    assert camel_to_snake(\"snake_case\") == \"snake_case\"\n    assert camel_to_snake(\"snakeCase\") == \"snake_case\"\n    assert camel_to_snake(\"snake_case\") == \"snake_case\"\n    assert camel_to_snake(\"snake_case\") == \"snake_case\"\n    assert camel_to_snake(\"snake_case\") == \"snake_case\"\n    assert camel_to_snake(\"snake_case\") == \"snake_case\"\n    assert camel_to_snake(\"snake_case\") == \"snake_case\""
    },
    {
      "rank": 9,
      "score": 8.95994420569242,
      "candidate": "import re\n\n\ndef snake_to_camel(s):\n    return re.sub('(.)([A-Z][a-z]+)', r'\\1_\\2', s).lower()\n\n\nprint(snake_to_camel('snake'))\nprint(snake_to_camel('snake1'))\nprint(snake_to_camel('snake1_2'))"
    },
    {
      "rank": 10,
      "score": 8.946210893390457,
      "candidate": "import re\n\ndef camel_case(snake_case):\n    s1 = re.sub(r\"(.)([A-Z][a-z]+)\", r\"\\1_\\2\", snake_case)\n    return re.sub(r\"([a-z0-9])([A-Z])\", r\"\\1_\\2\", s1).lower()"
    },
    {
      "rank": 11,
      "score": 8.910084504002544,
      "candidate": "import re\n\n\ndef snake_to_camel(snake_case_str):\n    regex = r\"[A-Z]([a-z].*)\"\n    camel_case_str = re.sub(regex, r\"\\1_\\2\", snake_case_str)\n    return camel_case_str\n\n\nassert snake_to_camel(\"snake_case\") == \"snakeCase\"\nassert snake_to_camel(\"snake_case_1\") == \"snakeCase1\"\nassert snake_to_camel(\"snake_case_1_2\") == \"snakeCase1_2\"\nassert snake_to_camel(\"snake_case_1_2_3\") == \"snakeCase1_2_3\"\nassert snake_to_camel(\"snake_case_1_2_3_4\") == \"snakeCase1_2_3_4\"\nassert snake_to_camel(\"snake_case_1_2_3_4_5\") == \"snakeCase1_2_3_4_5\""
    },
    {
      "rank": 12,
      "score": 8.902145503295483,
      "candidate": "import re\n\ndef camel_to_snake(snake_string):\n    return re.sub('([a-z])([A-Z])', r'\\1_\\2', snake_string).lower()\n\nassert camel_to_snake(\"snake\") == \"snake\"\nassert camel_to_snake(\"snake_case\") == \"snakeCase\"\nassert camel_to_snake(\"snake_case_case\") == \"snakeCaseCase\"\nassert camel_to_snake(\"snake_case_case_case\") == \"snakeCaseCaseCase\"\nassert camel_to_snake(\"snake_case_case_case_case\") == \"snakeCaseCaseCaseCase\"\nassert camel_to_snake(\"snake_case_case_case_case_case\") == \"snakeCaseCaseCaseCase\"\nassert camel_to_snake(\"snake_case_case_case_case_case\") == \"snakeCaseCaseCaseCase\"\nassert camel_to_snake(\"snake_case_case_case_case_case_case\") == \"snakeCaseCaseCaseCaseCase\""
    },
    {
      "rank": 13,
      "score": 8.855395696632057,
      "candidate": "from typing import List\n\n\ndef camel_case_to_snake_case(string: str) -> str:\n    return string[0].lower() + string[1:]\n\n\nif __name__ == \"__main__\":\n    print(camel_case_to_snake_case(\"snakeCase\"))\n    print(camel_case_to_snake_case(\"camelCase\"))\n    print(camel_case_to_snake_case(\"snake\"))\n    print(camel_case_to_snake_case(\"camel\"))\n    print(camel_case_to_snake_case(\"\"))\n    print(camel_case_to_snake_case(\"_snake\"))\n    print(camel_case_to_snake_case(\"_camel\"))\n    print(camel_case_to_snake_case(\"_snake\"))\n    print(camel_case_to_snake_case(\"_camel\"))\n    print(camel_case_to_snake_case(\"\"))\n    print(camel_case_to_snake_case(\"\"))\n    print(camel_case_to_snake_case(\"_\"))\n    print(camel_case_to_snake_case(\"_\"))"
    },
    {
      "rank": 14,
      "score": 8.850707355641543,
      "candidate": "import re\n\n\ndef camel_case_to_snake(snake_case: str):\n    regex = re.compile(r\"([A-Z][a-z]+)\")\n    return regex.sub(r\"_\\1\", snake_case).lower()\n\n\nprint(camel_case_to_snake(\"snake_case\"))\nprint(camel_case_to_snake(\"snake\"))\nprint(camel_case_to_snake(\"snake_case\"))\nprint(camel_case_to_snake(\"snake_case\"))"
    },
    {
      "rank": 15,
      "score": 8.8281618090209,
      "candidate": "import re\n\ndef snake_to_camel(snake):\n    s1 = snake.split(\"_\")\n    s2 = \"\"\n    for i in s1:\n        if i.isupper():\n            s2 += i.lower()\n        else:\n            s2 += i.title()\n    return s2\n\ndef camel_to_snake(snake):\n    s1 = snake.split(\"_\")\n    s2 = \"\"\n    for i in s1:\n        if i.isupper():\n            s2 += i.lower()\n        else:\n            s2 += i.title()\n    return s2\n\nif __name__ == \"__main__\":\n    print(snake_to_camel(\"snake\"))\n    print(camel_to_snake(\"camel\"))\n    print(camel_to_snake(\"snake\"))"
    },
    {
      "rank": 16,
      "score": 8.76828871349479,
      "candidate": "import re\n\n\ndef camel_case(snake_string):\n    camel_string = re.sub(r'(.)([A-Z][a-z]+)', r'\\1_\\2', snake_string)\n    return camel_string.lower()\n\n\nassert camel_case(\"snake\") == \"snake\"\nassert camel_case(\"snake_case\") == \"snakeCase\"\nassert camel_case(\"snake_case_case\") == \"snakeCaseCase\"\nassert camel_case(\"snake_case_case_case\") == \"snakeCaseCaseCase\"\nassert camel_case(\"snake_case_case_case_case\") == \"snakeCaseCaseCaseCase\"\nassert camel_case(\"snake_case_case_case_case_case\") == \"snakeCaseCaseCaseCaseCase\"\nassert camel_case(\"snake_case_case_case_case_case\") == \"snakeCaseCaseCaseCaseCase\"\nassert camel_case(\"snake_case_case_case_case_case_case\") == \"snakeCaseCaseCaseCaseCaseCase\"\nassert camel_case(\"snake_case_case_case_case_case_case_case\") == \"snakeCaseCaseCaseCaseCaseCase\"\nassert camel_case(\"snake_case_case_case_case_case_case_case_case\") == \"snakeCaseCaseCaseCaseCaseCaseCase\"\nassert camel_case(\"snake_case_case_case_case_case_case_case_case\") == \"snakeCaseCaseCaseCaseCaseCaseCase\"\nassert camel_case(\"snake_case_case_case_case_case_case_case_case_case\") == \"snakeCaseCaseCaseCaseCaseCase\""
    },
    {
      "rank": 17,
      "score": 8.715724466237427,
      "candidate": "import re\n\ndef snake_to_camel(snake):\n    \"\"\"\n    :type snake: str\n    :rtype: str\n    \"\"\"\n    snake_regex = re.compile(r\"([A-Z][a-z]+)\")\n    return snake_regex.sub(r\"_\\1\", snake).lower()"
    },
    {
      "rank": 18,
      "score": 8.701078161001123,
      "candidate": "class Solution(object):\n    def camelCase(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        from re import sub\n        import re\n\n        def convert(word):\n            word = re.sub(r\"(.)([A-Z][a-z]+)\", r\"\\1_\\2\", word)\n            return word[0].lower() + word[1:]\n\n        return sub(\"([a-z])([A-Z])\", convert, s)\n\n\nif __name__ == '__main__':\n    assert Solution().camelCase(\"snake\") == \"Snake\"\n    assert Solution().camelCase(\"camel\") == \"Camel\"\n    assert Solution().camelCase(\"CamelCase\") == \"CamelCase\"\n    assert Solution().camelCase(\"\") == \"\""
    },
    {
      "rank": 19,
      "score": 8.692801520950061,
      "candidate": "from regex import compile\n\n\ndef camel_case(string):\n    return ''.join([i[0].upper() + i[1:] for i in string.split('_')])\n\n\nassert camel_case('snake') =='snake'\nassert camel_case('snake_case') =='snake_case'\nassert camel_case('snake_case_case') =='snake_case_case'\nassert camel_case('snake_case_case_case') =='snake_case_case_case'\nassert camel_case('snake_case_case_case_case') =='snake_case_case_case_case'"
    },
    {
      "rank": 20,
      "score": 8.616253589228675,
      "candidate": "def snake_to_camel(snake):\n    import re\n    return re.sub('(.)([A-Z][a-z]+)', r'\\1_\\2', snake).lower()\n\n\ndef test_snake_to_camel():\n    assert snake_to_camel('snake') =='snake'\n    assert snake_to_camel('snakeCase') =='snakeCase'\n    assert snake_to_camel('snake_case') =='snakeCase'\n    assert snake_to_camel('snake_case_case') =='snakeCaseCase'\n    assert snake_to_camel('snake_case_case_case') =='snakeCaseCaseCase'\n    assert snake_to_camel('snake_case_case_case_case') =='snakeCaseCaseCaseCase'\n    assert snake_to_camel('snake_case_case_case_case') =='snakeCaseCaseCaseCase'\n    assert snake_to_camel('snake_case_case_case_case_case') =='snakeCaseCaseCaseCase'"
    },
    {
      "rank": 21,
      "score": 8.610076160146226,
      "candidate": "from regex import *\n\ndef snake_to_camel(s):\n    s = s.replace(\"_\", \"\")\n    s = s.title()\n    return s\n\nprint(snake_to_camel(\"snake\"))\nprint(snake_to_camel(\"snake_case\"))\nprint(snake_to_camel(\"snake_case_with_underscores\"))\nprint(snake_to_camel(\"snake_case_with_underscores_and_hyphens\"))"
    },
    {
      "rank": 22,
      "score": 8.606486429141842,
      "candidate": "import re\n\ndef snake_to_camel(snake_case):\n    camel_case = re.sub(r'(.)([A-Z][a-z]+)', r'\\1_\\2', snake_case)\n    return camel_case.title()"
    },
    {
      "rank": 23,
      "score": 8.60156811074208,
      "candidate": "import re\n\ndef camel_case(s):\n    # Your code here\n    s = re.sub('(.)([A-Z][a-z]+)', r'\\1_\\2', s)\n    return s[0].upper() + s[1:]\n\nif __name__ == '__main__':\n    print(camel_case(\"snake\"))\n    print(camel_case(\"camel\"))\n    print(camel_case(\"snake_case\"))\n    print(camel_case(\"camel_case\"))"
    },
    {
      "rank": 24,
      "score": 8.565425580227462,
      "candidate": "import re\n\ndef camel_to_snake(s):\n    return re.sub(r'(.)([A-Z][a-z]+)', r'\\1_\\2', s).lower()\n\nprint(camel_to_snake('snake_case'))\nprint(camel_to_snake('camel_case'))\nprint(camel_to_snake('camelCase'))"
    },
    {
      "rank": 25,
      "score": 8.542875062379007,
      "candidate": "def camel_case(s):\n    import re\n    return re.sub(r\"(.)([A-Z][a-z]+)\", r\"\\1_\\2\", s).lower()\n\n\nprint(camel_case(\"snake\"))\nprint(camel_case(\"snake_case\"))"
    },
    {
      "rank": 26,
      "score": 8.53012858503943,
      "candidate": "import re\n\n\ndef snake_to_camel(snake_str):\n    return re.sub(r'(.)([A-Z][a-z]+)', r'\\1_\\2', snake_str)\n\n\nprint(snake_to_camel(\"snakeCase\"))\nprint(snake_to_camel(\"snake_case\"))\nprint(snake_to_camel(\"snake_case_with_underscores\"))"
    },
    {
      "rank": 27,
      "score": 8.499905739299377,
      "candidate": "import re\n\n\ndef convert_snake(snake_string):\n    snake_string = snake_string.replace('_', '')\n    return re.sub('(.)([A-Z][a-z]+)', r'\\1_\\2', snake_string).lower()\n\n\nif __name__ == '__main__':\n    print(convert_snake('snake'))\n    print(convert_snake('snake_case'))\n    print(convert_snake('snake_case_1'))\n    print(convert_snake('snake_case_2'))\n    print(convert_snake('snake_case_3'))\n    print(convert_snake('snake_case_4'))\n    print(convert_snake('snake_case_5'))\n    print(convert_snake('snake_case_6'))\n    print(convert_snake('snake_case_7'))\n    print(convert_snake('snake_case_8'))\n    print(convert_snake('snake_case_9'))\n    print(convert_snake('snake_case_10'))\n    print(convert_snake('snake_case_11'))\n    print(convert_snake('snake_case_12'))\n    print(convert_snake('snake_case_13'))\n    print(convert_snake('snake_case_14'))\n    print(convert_snake('snake_case_15'))\n    print(convert_snake('snake_case_16'))\n    print(convert_snake('snake_case_17'))\n    print(convert_snake('snake_case_18'))\n    print(convert_snake('snake_case_19'))\n    print(convert_snake('snake_case_20'))\n    print(convert_snake('snake_case_21'))\n    print(convert_snake('snake_case_22'))\n    print(convert_snake('snake_case_23'))\n    print(convert_snake('snake_case_24'))\n    print(convert_snake('snake_case_25'))\n    print(convert_snake('"
    },
    {
      "rank": 28,
      "score": 8.490324832712195,
      "candidate": "import re\n\n\ndef camel_case_snake(snake_string):\n    camel_string = re.sub(r\"(.)([A-Z][a-z]+)\", r\"\\1_\\2\", snake_string)\n    return camel_string.title()\n\n\nif __name__ == \"__main__\":\n    print(camel_case_snake(\"SnakeCase\"))\n    print(camel_case_snake(\"snake_case\"))\n    print(camel_case_snake(\"Snake_Case\"))"
    },
    {
      "rank": 29,
      "score": 8.48796797856353,
      "candidate": "import re\n\n\ndef camel_case(snake_string):\n    \"\"\"\n    :type snake_string: str\n    :rtype: str\n    \"\"\"\n    camel_string = re.sub(r'(?<=[a-z])(?=[A-Z])', '_', snake_string)\n    return camel_string.title()\n\n\nif __name__ == '__main__':\n    assert camel_case('snake') == 'Snake'\n    assert camel_case('snake_case') == 'SnakeCase'\n    assert camel_case('snake_case_case') == 'SnakeCaseCase'\n    assert camel_case('snake_case_case_case') == 'SnakeCaseCaseCase'\n    assert camel_case('snake_case_case_case_case') == 'SnakeCaseCaseCaseCase'\n    assert camel_case('snake_case_case_case_case') == 'SnakeCaseCaseCaseCase'\n    assert camel_case('snake_case_case_case_case') == 'SnakeCaseCaseCaseCase'"
    },
    {
      "rank": 30,
      "score": 8.478208546788407,
      "candidate": "import re\n\ndef snake_to_camel(snake):\n    return re.sub(r'([A-Z])([A-Z][a-z])', r'\\1_\\2', snake).lower()\n\nprint(snake_to_camel(\"snake\"))\nprint(snake_to_camel(\"snake_case\"))\nprint(snake_to_camel(\"snake_case_with_spaces\"))\nprint(snake_to_camel(\"SnakeCase\"))\nprint(snake_to_camel(\"SnakeCase_with_Spaces\"))\nprint(snake_to_camel(\"snake_case_with_spaces_and_underscores\"))"
    },
    {
      "rank": 31,
      "score": 8.437695832075478,
      "candidate": "import re\n\ndef convert_snake_to_camel(snake):\n    camel = snake.split('_')\n    return camel[0] + ''.join(x.title() for x in camel[1:])"
    },
    {
      "rank": 32,
      "score": 8.426531424889468,
      "candidate": "import re\n\n\ndef camel_case(snake_case):\n    result = re.sub(r'([A-Z][a-z]+)', lambda x: x.group(0).upper(), snake_case)\n    return result\n\n\ndef main():\n    print(camel_case(\"snake\"))\n    print(camel_case(\"snake_case\"))\n    print(camel_case(\"snake_case_case\"))\n    print(camel_case(\"snake_case_case_case\"))\n    print(camel_case(\"snake_case_case_case_case\"))\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 33,
      "score": 8.408439383654278,
      "candidate": "def camel_case(snake_case):\n    # your code here\n    import re\n    return re.sub('([a-z])([A-Z])', r'\\1_\\2', snake_case).lower()"
    },
    {
      "rank": 34,
      "score": 8.334608500525688,
      "candidate": "import re\n\ndef camel_case_to_snake(s):\n    return re.sub(r\"([A-Z])\\1+\", lambda m: m.group(1).upper(), s)\n\nprint(camel_case_to_snake(\"snake\"))\nprint(camel_case_to_snake(\"snake_case\"))\nprint(camel_case_to_snake(\"snake_case_case\"))\nprint(camel_case_to_snake(\"snake_case_case_case\"))\nprint(camel_case_to_snake(\"snake_case_case_case_case\"))\nprint(camel_case_to_snake(\"snake_case_case_case_case_case\"))\nprint(camel_case_to_snake(\"snake_case_case_case_case_case\"))"
    },
    {
      "rank": 35,
      "score": 8.331556294201176,
      "candidate": "import re\n\n\ndef snake_to_camel(snake_str):\n    return re.sub(r\"(?<!^)([A-Z][a-z]+)\", lambda x: x.group(1).upper(), snake_str)\n\n\nprint(snake_to_camel(\"snake\"))\nprint(snake_to_camel(\"snake case\"))\nprint(snake_to_camel(\"snake_case\"))\nprint(snake_to_camel(\"snake_case_case\"))\nprint(snake_to_camel(\"snake_case_case_case\"))"
    },
    {
      "rank": 36,
      "score": 8.327375965969855,
      "candidate": "import re\n\ndef camel_case_snake(string):\n    return re.sub(r'(.)([A-Z][a-z]+)', r'\\1_\\2', string).lower()\n\nprint(camel_case_snake(\"snake\"))\nprint(camel_case_snake(\"snake_case\"))\nprint(camel_case_snake(\"snake_case_case\"))\nprint(camel_case_snake(\"snake_case_case_case\"))\nprint(camel_case_snake(\"snake_case_case_case_case\"))"
    },
    {
      "rank": 37,
      "score": 8.327367757082776,
      "candidate": "import re\n\n\ndef snake_to_camel(snake_string: str) -> str:\n    camel_string = re.sub(r'([A-Z])([A-Z][a-z])', r'\\1_\\2', snake_string)\n    return camel_string.title()\n\n\nassert snake_to_camel('snake') == 'Snake'\nassert snake_to_camel('snake_case') == 'SnakeCase'\nassert snake_to_camel('snake_case_case') == 'SnakeCaseCase'\nassert snake_to_camel('camel') == 'Camel'\nassert snake_to_camel('camel_case') == 'CamelCase'\nassert snake_to_camel('camel_case_case') == 'CamelCaseCase'\nassert snake_to_camel('snake_case_camel_case') == 'SnakeCaseCamelCase'\nassert snake_to_camel('snake_case_camel_case_case') == 'SnakeCaseCamelCaseCase'"
    },
    {
      "rank": 38,
      "score": 8.298597569547805,
      "candidate": "from re import search\n\n\ndef snake_to_camel(snake_string):\n    camel_string = \"\"\n    for char in snake_string:\n        if char.isupper():\n            camel_string += char.lower()\n        else:\n            camel_string += char.upper()\n    return camel_string\n\n\nprint(snake_to_camel(\"snake_case\"))"
    },
    {
      "rank": 39,
      "score": 8.2938925966498,
      "candidate": "import re\n\n\ndef snake_to_camel(snake_case: str):\n    return re.sub(r\"[^A-Za-z0-9]\", \"_\", snake_case).lower()\n\n\nassert snake_to_camel(\"snake\") == \"snake\"\nassert snake_to_camel(\"snake_case\") == \"snake_case\"\nassert snake_to_camel(\"snake_case_case\") == \"snake_case_case\"\nassert snake_to_camel(\"snake_case_case_case\") == \"snake_case_case_case\"\nassert snake_to_camel(\"snake_case_case_case_case\") == \"snake_case_case_case_case\"\nassert snake_to_camel(\"snake_case_case_case_case_case\") == \"snake_case_case_case_case\"\nassert snake_to_camel(\"snake_case_case_case_case_case_case\") == \"snake_case_case_case_case_case\"\nassert snake_to_camel(\"snake_case_case_case_case_case_case\") == \"snake_case_case_case_case_case\"\nassert snake_to_camel(\"snake_case_case_case_case_case_case_case\") == \"snake_case_case_case_case_case\"\nassert snake_to_camel(\"snake_case_case_case_case_case_case_case\") == \"snake_case_case_case_case_case\"\nassert snake_to_camel(\"snake_case_case_case_case_case_case_case_case\") == \"snake_case_case_case_case_case\""
    },
    {
      "rank": 40,
      "score": 8.289838256518838,
      "candidate": "import re\n\ndef convert_snake_to_camel(snake_string):\n    # Your code here\n    regex_snake_case = re.compile(r'([a-z][A-Z]+)')\n    return regex_snake_case.sub(lambda m: m.group().lower(), snake_string)\n\nprint(convert_snake_to_camel('snake'))\nprint(convert_snake_to_camel('snake_case'))"
    },
    {
      "rank": 41,
      "score": 8.280613371145561,
      "candidate": "import re\n\n\ndef convert(snake_string):\n    return re.sub(r'(.)([A-Z][a-z]+)', r'\\1_\\2', snake_string).lower()"
    },
    {
      "rank": 42,
      "score": 8.248390367878367,
      "candidate": "import re\n\n\ndef snake_to_camel(snake_string):\n    return re.sub(r\"([A-Z])\", lambda x: x.group(1).upper(), snake_string)"
    },
    {
      "rank": 43,
      "score": 8.214125058964552,
      "candidate": "import re\n\ndef camel_case(snake_case):\n    return re.sub('(.)([A-Z][a-z]+)', r'\\1_\\2', snake_case).lower()\n\nprint(camel_case('snake'))\nprint(camel_case('snakeCase'))"
    },
    {
      "rank": 44,
      "score": 8.211579567659316,
      "candidate": "import re\n\n\ndef snake_to_camel(snake):\n    camel = re.sub('(.)([A-Z][a-z]+)', r'\\1_\\2', snake)\n    return camel.lower()\n\n\nif __name__ == '__main__':\n    assert snake_to_camel(\"snakeCase\") == \"snakeCase\"\n    assert snake_to_camel(\"camelCase\") == \"camelCase\"\n    assert snake_to_camel(\"snake\") == \"snake\"\n    assert snake_to_camel(\"snakeCase\") == \"snakeCase\""
    },
    {
      "rank": 45,
      "score": 8.209707251476969,
      "candidate": "import re\n\n\ndef convert_snake_case(string):\n    return re.sub(r\"(.)([A-Z][a-z]+)\", r\"\\1_\\2\", string).lower()"
    },
    {
      "rank": 46,
      "score": 8.2048573255218,
      "candidate": "import re\n\n\ndef snake_to_camel(s):\n    return re.sub(r'([A-Z])([A-Z][a-z]+)', r'\\1_\\2', s)\n\n\nprint(snake_to_camel(\"snake\"))\nprint(snake_to_camel(\"snake_case\"))\nprint(snake_to_camel(\"snake_case_2\"))\nprint(snake_to_camel(\"snake_case_3\"))\nprint(snake_to_camel(\"snake_case_4\"))\nprint(snake_to_camel(\"snake_case_5\"))\nprint(snake_to_camel(\"snake_case_6\"))"
    },
    {
      "rank": 47,
      "score": 8.185309335307622,
      "candidate": "def camel_case_snake(snake_string):\n    \"\"\"\n    :type snake_string: str\n    :rtype: str\n    \"\"\"\n    import re\n    return re.sub(r\"(.)([A-Z][a-z]+)\", r\"\\1_\\2\", snake_string).lower()\n\n\nprint(camel_case_snake(\"snake\"))\nprint(camel_case_snake(\"Snake\"))\nprint(camel_case_snake(\"Snake\"))"
    },
    {
      "rank": 48,
      "score": 8.179564342560925,
      "candidate": "import re\n\ndef snake_to_camel(snake_string):\n    camel_string = \"\"\n    for char in snake_string:\n        if char.isalpha():\n            camel_string += char.lower()\n        else:\n            camel_string += char.upper()\n    return camel_string\n\nprint(snake_to_camel(\"snake\"))\nprint(snake_to_camel(\"snake_case\"))\nprint(snake_to_camel(\"snake_case_case\"))\nprint(snake_to_camel(\"snake_case_case_case\"))\nprint(snake_to_camel(\"snake_case_case_case_case\"))\nprint(snake_to_camel(\"snake_case_case_case_case_case\"))\nprint(snake_to_camel(\"snake_case_case_case_case_case\"))\nprint(snake_to_camel(\"snake_case_case_case_case_case_case\"))\nprint(snake_to_camel(\"snake_case_case_case_case_case_case\"))\nprint(snake_to_camel(\"snake_case_case_case_case_case_case\"))"
    },
    {
      "rank": 49,
      "score": 8.163300679823958,
      "candidate": "import re\n\ndef snake_to_camel(snake_string):\n    return re.sub('(.)([A-Z][a-z]+)', r'\\1_\\2', snake_string).lower()\n\n\nprint(snake_to_camel(\"snake_case\"))\nprint(snake_to_camel(\"snake_case_with_underscores\"))\nprint(snake_to_camel(\"snake_case_with_underscores_and_underscores\"))\nprint(snake_to_camel(\"snake_case_with_underscores_and_underscores_and_underscores_and_underscores\"))"
    },
    {
      "rank": 50,
      "score": 8.144125099485041,
      "candidate": "import re\n\n\ndef camel_to_snake(string):\n    camel_string = re.sub(r'(.)([A-Z][a-z]+)', r'\\1_\\2', string)\n    return camel_string.lower()"
    },
    {
      "rank": 51,
      "score": 8.143591138329747,
      "candidate": "import re\n\ndef snake_to_camel(snake_string):\n    return re.sub(r'([A-Z])([A-Z][a-z]+)', lambda m: m.group(1).upper() + m.group(2).lower(), snake_string)"
    },
    {
      "rank": 52,
      "score": 8.093417897505768,
      "candidate": "import re\n\n\ndef camel_case(snake_case):\n    camel_case = re.sub(r'(.)([A-Z][a-z]+)', r'\\1_\\2', snake_case)\n    return camel_case\n\n\nif __name__ == '__main__':\n    print(camel_case('snake'))\n    print(camel_case('snake_case'))"
    },
    {
      "rank": 53,
      "score": 8.040197642997851,
      "candidate": "import re\n\n\ndef snake_to_camel(snake_string: str) -> str:\n    return re.sub(r\"([a-z])([A-Z])\", lambda x: x.group(1).upper() + x.group(2).lower(), snake_string)"
    },
    {
      "rank": 54,
      "score": 7.990432406683839,
      "candidate": "import re\n\ndef camelcase(str):\n    return re.sub(r'((?<=[a-z])[A-Z](?=[A-Z](?!^))|(?<=[A-Z])[A-Z](?=[A-Z](?!^)[A-Z])|(?<=[a-z])[A-Z](?=[A-Z](?!^)[A-Z])|(?<=[a-z])[A-Z](?=[A-Z](?!^)[A-Z])|(?<=[a-z])[A-Z](?=[A-Z](?!^)[A-Z])|(?<=[a-z])[A-Z](?=[A-Z](?!^)[A-Z])|(?<=[a-z])[A-Z](?=[A-Z](?!^)[A-Z])|(?<=[a-z])[A-Z](?=[A-Z](?!^)[A-Z])|(?<=[a-z])[A-Z](?=[A-Z](?!^)[A-Z])|(?<=[a-z])[A-Z](?=[A-Z](?!^)[A-Z])|(?<=[a-z])[A-Z](?=[A-Z](?!^)[A-Z])|(?<=[a-z])[A-Z](?=[A-Z](?!^)[A-Z])|(?<=[a-z])[A-Z](?=[A-Z](?!^)[A-Z])|(?<=[a-z])[A-Z](?=[A-Z](?!^)[A-Z])|(?<=[a-z])[A-Z](?=[A-Z](?!^)[A-Z])|(?<=[a-z])[A-Z](?=[A-Z](?!^)[A-Z])|(?<=[a-z])[A-Z](?=[A-Z](?!^)[A-Z])|(?<=[a-z])[A-Z](?=[A-Z](?!^)[A-Z])|(?<=[a-z])[A-Z](?=[A-Z](?!^)[A-Z])|(?<=[a-z])[A-Z](?=[A-Z](?!"
    },
    {
      "rank": 55,
      "score": 7.938028884277233,
      "candidate": "import re\n\n\ndef snake_to_camel(snake_string):\n    return re.sub(r'(.)([A-Z][a-z]+)', r'\\1_\\2', snake_string).lower()\n\n\nprint(snake_to_camel(\"snake\"))\nprint(snake_to_camel(\"snake_case\"))\nprint(snake_to_camel(\"snake_case_with_underscores\"))"
    },
    {
      "rank": 56,
      "score": 7.8912769574414305,
      "candidate": "import re\n\ndef snake_to_camel(snake_string):\n    regex = re.compile(r\"([a-zA-Z][a-zA-Z0-9_]*)\")\n    return regex.sub(r\"_\\1\", snake_string).lower()"
    },
    {
      "rank": 57,
      "score": 7.868947655733293,
      "candidate": "import re\n\ndef snake_to_camel(s):\n    s = re.sub(r\"(.)([A-Z][a-z]+)\", r\"\\1_\\2\", s)\n    return re.sub(r\"([a-z0-9])([A-Z])\", r\"\\1_\\2\", s).lower()\n\nprint(snake_to_camel(\"snake\"))"
    },
    {
      "rank": 58,
      "score": 7.84634113240411,
      "candidate": "import re\n\n\ndef camel_case(snake_case):\n    \"\"\"\n    :type snake_case: str\n    :rtype: str\n    \"\"\"\n    return re.sub(r'(?<!^)(?=[A-Z])', '_', snake_case).lower()\n\n\nif __name__ == '__main__':\n    assert camel_case('snake') =='snake'\n    assert camel_case('snake_case') =='snakeCase'\n    assert camel_case('snake_case_case') =='snakeCaseCase'\n    assert camel_case('snake_case_case_case') =='snakeCaseCaseCase'"
    },
    {
      "rank": 59,
      "score": 7.834022619458933,
      "candidate": "import re\n\n\ndef camelcase_to_snake(string):\n    s = re.sub(\"(.)([A-Z][a-z]+)\", r\"\\1_\\2\", string)\n    return re.sub(\"([a-z0-9])([A-Z])\", r\"\\1_\\2\", s).lower()\n\n\nprint(camelcase_to_snake(\"snake\"))\nprint(camelcase_to_snake(\"camel\"))\nprint(camelcase_to_snake(\"camelCase\"))"
    },
    {
      "rank": 60,
      "score": 7.780351419995229,
      "candidate": "import re\n\n\ndef camelcase_to_snake(camel_case):\n    snake_case = re.sub(r\"([A-Z])\", r\" \\1\", camel_case)\n    return snake_case.title()\n\n\nprint(camelcase_to_snake(\"camelCase\"))"
    },
    {
      "rank": 61,
      "score": 7.738292593776799,
      "candidate": "import re\n\n\ndef camel_to_snake(input_string):\n    regex = re.compile(r\"([A-Z][a-z]+)\")\n    output_string = regex.sub(lambda x: x.group(1).upper(), input_string)\n    return output_string\n\n\nprint(camel_to_snake(\"snakeCase\"))"
    },
    {
      "rank": 62,
      "score": 7.7320703513377165,
      "candidate": "import re\n\n\ndef camel_case_to_snake(camel_case_string):\n    camel_case_regex = re.compile(r\"([A-Z][a-z]*)\")\n    return camel_case_regex.sub(lambda m: m.group(1).upper(), camel_case_string)\n\n\nprint(camel_case_to_snake(\"camelCase\"))\nprint(camel_case_to_snake(\"snakeCase\"))"
    },
    {
      "rank": 63,
      "score": 7.712686970378385,
      "candidate": "import re\n\n\ndef snake_to_camel(snake):\n    regex = r\"^([a-z][A-Z]*)\"\n    result = re.sub(regex, lambda x: x.group(1).upper(), snake)\n    return result\n\n\nif __name__ == \"__main__\":\n    print(snake_to_camel(\"snake\"))\n    print(snake_to_camel(\"camel\"))\n    print(snake_to_camel(\"snake_camel\"))"
    },
    {
      "rank": 64,
      "score": 7.705183449260731,
      "candidate": "import re\n\n\ndef camel_case(snake):\n    snake = re.sub(r\"(.)([A-Z][a-z]+)\", r\"\\1_\\2\", snake)\n    snake = re.sub(r\"([a-z0-9])([A-Z])\", r\"\\1_\\2\", snake)\n    return snake.title()\n\n\nprint(camel_case(\"snake\"))"
    },
    {
      "rank": 65,
      "score": 7.5819855281879285,
      "candidate": "import re\n\ndef snake_to_camel(snake_string):\n    return re.sub(r\"(.)([A-Z][a-z]+)\", r\"\\1_\\2\", snake_string).lower()\n\nprint(snake_to_camel(\"snake\"))\nprint(snake_to_camel(\"snake_case\"))\nprint(snake_to_camel(\"snake_case_case\"))\nprint(snake_to_camel(\"snake_case_case_case\"))"
    },
    {
      "rank": 66,
      "score": 7.4878043221155455,
      "candidate": "import re\n\ndef snake_to_camel(snake_string):\n    # Convert the given snake case string to camel case\n    camel_string = re.sub(r'(.)([A-Z][a-z]+)', r'\\1_\\2', snake_string)\n    # Remove the last underscore from the camel case\n    return camel_string[0:-1]\n\nif __name__ == \"__main__\":\n    assert snake_to_camel(\"snake\") == \"Snake\"\n    assert snake_to_camel(\"snake_case\") == \"SnakeCase\"\n    assert snake_to_camel(\"snake_case_and_camel\") == \"SnakeCaseAndCamel\"\n    assert snake_to_camel(\"snake_and_camel\") == \"SnakeAndCamel\"\n    assert snake_to_camel(\"snake_and_camel_case\") == \"SnakeAndCamelCase\""
    },
    {
      "rank": 67,
      "score": 7.464609382504557,
      "candidate": "import re\n\n\ndef snake_to_camel(snake_string):\n    \"\"\"\n    :type snake_string: str\n    :rtype: str\n    \"\"\"\n    camel_string = re.sub(r\"(.)([A-Z][a-z]+)\", r\"\\1_\\2\", snake_string).lower()\n    return camel_string\n\n\nassert snake_to_camel(\"snake\") == \"Snake\"\nassert snake_to_camel(\"snake_case\") == \"SnakeCase\"\nassert snake_to_camel(\"snake_case_1\") == \"SnakeCase1\"\nassert snake_to_camel(\"snake_case_1_1\") == \"SnakeCase1_1\""
    },
    {
      "rank": 68,
      "score": 7.134571892399572,
      "candidate": "import re\n\n\ndef camel_case(s):\n    s = re.sub(r\"_([a-z])\", r\"_\\1\", s)\n    return re.sub(r\"([a-z0-9])([A-Z])\", r\"\\1_\\2\", s).lower()\n\n\nassert camel_case(\"snake\") == \"snake\"\nassert camel_case(\"snakeCase\") == \"snakeCase\"\nassert camel_case(\"snakeCase_case\") == \"snakeCaseCase\"\nassert camel_case(\"snakeCase_case_case\") == \"snakeCaseCaseCase\"\nassert camel_case(\"snake_case_case\") == \"snake_case_case\"\nassert camel_case(\"snakeCase_case_case\") == \"snake_case_case\"\nassert camel_case(\"snake_case_case_case\") == \"snake_case_case_case\"\nassert camel_case(\"snakeCase_case_case\") == \"snake_case_case\""
    },
    {
      "rank": 69,
      "score": 3.500685969860482,
      "candidate": "import re\n\n\ndef snake_to_camel(snake_string):\n    return re.sub(r\"(.)([A-Z][a-z]+)\", r\"\\1_\\2\", snake_string).lower()"
    },
    {
      "rank": 70,
      "score": 3.4729260943172853,
      "candidate": "import re\n\n\ndef snake_to_camel(snake_str):\n    pattern = r'([a-z][A-Z][a-z]+)'\n    result = re.sub(pattern, r'_\\1', snake_str)\n    return result\n\n\ndef main():\n    print(snake_to_camel('snake'))\n    print(snake_to_camel('snakeCase'))\n    print(snake_to_camel('snake_case'))\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 71,
      "score": 3.4690076060548973,
      "candidate": "import re\n\n\ndef snake_to_camel(snake_str):\n    \"\"\"\n    :type snake_str: str\n    :rtype: str\n    \"\"\"\n    snake_str = snake_str.lower()\n    camel_str = re.sub(r\"(.)([A-Z][a-z]+)\", r\"\\1_\\2\", snake_str)\n    return camel_str\n\n\ndef test():\n    assert snake_to_camel(\"snake\") == \"snake\"\n    assert snake_to_camel(\"snake_case\") == \"snake_case\"\n    assert snake_to_camel(\"snake_case_with_spaces\") == \"snake_case_with_spaces\"\n    assert snake_to_camel(\"SnakeCase\") == \"SnakeCase\"\n    assert snake_to_camel(\"snake_case_with_spaces\") == \"SnakeCaseWithSpaces\"\n    assert snake_to_camel(\"snake_case_with_spaces_and_spaces\") == \"snake_case_with_spaces_and_spaces\"\n    assert snake_to_camel(\"snake_case_with_spaces_and_spaces_and_spaces\") == \"SnakeCaseWithSpacesAndSpacesAndSpaces\"\n    assert snake_to_camel(\"snake_case_with_spaces_and_spaces_and_spaces_and_spaces\") == \"SnakeCaseWithSpacesAndSpacesAndSpacesAndSpaces\"\n    assert snake_to_camel(\"snake_case_with_spaces_and_spaces_and_spaces_and_spaces\") == \"SnakeCaseWithSpacesAndSpacesAndSpacesAndSpaces\"\n    assert snake_to_camel(\"snake_case_with_spaces_and_spaces_and_spaces_and_spaces\") == \"SnakeCaseWithSpacesAndSpacesAndSpacesAndSpaces\"\n    assert snake_to_camel(\"snake_case_with_spaces_and_spaces_and_spaces_and_spaces\") == \"SnakeCaseWithSpacesAndSpacesAndSpacesAndSpaces\"\n    assert snake_to_camel(\"snake_case_with_spaces_and_spaces_and_spaces_and_spaces_and_spaces\") == \"SnakeCaseWithSpacesAndSpacesAndSpacesAndSpacesAnd"
    },
    {
      "rank": 72,
      "score": 3.312174440679155,
      "candidate": "import re\n\n\ndef snake_to_camel(snake):\n    \"\"\"\n    :type snake: str\n    :rtype: str\n    \"\"\"\n    return re.sub(r\"([a-z])([A-Z])\", r\"\\1_\\2\", snake).lower()\n\n\ndef test_snake_to_camel():\n    assert snake_to_camel(\"snake\") == \"snake\"\n    assert snake_to_camel(\"snake\") == \"snake\"\n    assert snake_to_camel(\"snake2\") == \"snake2\"\n    assert snake_to_camel(\"snake3\") == \"snake3\"\n    assert snake_to_camel(\"snake4\") == \"snake4\"\n    assert snake_to_camel(\"snake5\") == \"snake5\"\n    assert snake_to_camel(\"snake6\") == \"snake6\"\n    assert snake_to_camel(\"snake7\") == \"snake7\"\n    assert snake_to_camel(\"snake8\") == \"snake8\""
    },
    {
      "rank": 73,
      "score": 3.3099663969705246,
      "candidate": "import re\n\ndef camel_to_snake(snake_string):\n    camel_string = \"\"\n    for i in snake_string:\n        if i.isupper():\n            camel_string += i.lower()\n        else:\n            camel_string += i.capitalize()\n    return camel_string\n\n\nprint(camel_to_snake(\"snake\"))\nprint(camel_to_snake(\"snake_case\"))\nprint(camel_to_snake(\"snake_case_case\"))\nprint(camel_to_snake(\"snake_case_case_case\"))\nprint(camel_to_snake(\"snake_case_case_case_case\"))\nprint(camel_to_snake(\"snake_case_case_case_case_case_case\"))\nprint(camel_to_snake(\"snake_case_case_case_case_case_case_case_case\"))\nprint(camel_to_snake(\"snake_case_case_case_case_case_case_case_case\"))\nprint(camel_to_snake(\"snake_case_case_case_case_case_case_case_case_case\"))\nprint(camel_to_snake(\"snake_case_case_case_case_case_case_case_case_case\"))\nprint(camel_to_snake(\"snake_case_case_case_case_case_case_case_case_case\"))\nprint(camel_to_snake(\"snake_case_case_case_case_case_case_case_case_case_case\"))"
    },
    {
      "rank": 74,
      "score": 3.2632143718730204,
      "candidate": "import re\n\n\ndef snake_to_camel(snake_case: str) -> str:\n    \"\"\"\n    :type snake_case: str\n    :rtype: str\n    \"\"\"\n    pattern = re.compile(r\"([a-z])([A-Z])\")\n    return pattern.sub(r\"\\1_\\2\", snake_case).lower()\n\n\nif __name__ == \"__main__\":\n    assert snake_to_camel(\"snake\") == \"snake\"\n    assert snake_to_camel(\"snake_case\") == \"snake_case\"\n    assert snake_to_camel(\"snake_case_case\") == \"snake_case_case\"\n    assert snake_to_camel(\"snake_case_case_case\") == \"snake_case_case_case\"\n    assert snake_to_camel(\"snake_case_case_case_case\") == \"snake_case_case_case_case\"\n    assert snake_to_camel(\"snake_case_case_case_case_case\") == \"snake_case_case_case_case_case\"\n    assert snake_to_camel(\"snake_case_case_case_case_case_case_case\") == \"snake_case_case_case_case_case_case\"\n    assert snake_to_camel(\"snake_case_case_case_case_case_case_case_case\") == \"snake_case_case_case_case_case_case\"\n    assert snake_to_camel(\"snake_case_case_case_case_case_case_case_case_case\") == \"snake_case_case_case_case_case_case\"\n    assert snake_to_camel(\"snake_case_case_case_case_case_case_case_case\") == \"snake_case_case_case_case_case_case\"\n    assert snake_to_camel(\"snake_case_case_case_case_case_case_case_case\") == \"snake_case_case_case_case_case_case\"\n    assert snake_to_camel(\"snake_case_case_case_case_case_case_case"
    },
    {
      "rank": 75,
      "score": 3.2363093055985312,
      "candidate": "import re\n\n\ndef camel_case(snake_case):\n    result = re.sub(r\"(.)([A-Z][a-z]+)\", r\"\\1_\\2\", snake_case)\n    return result.title()\n\n\nprint(camel_case(\"snake\"))\nprint(camel_case(\"snakeCase\"))\nprint(camel_case(\"snake_case\"))\nprint(camel_case(\"snake_case_case\"))"
    },
    {
      "rank": 76,
      "score": 3.1957364124290777,
      "candidate": "import re\n\n\ndef convert_snake_case_to_camel(snake_case: str) -> str:\n    \"\"\"\n    :type snake_case: str\n    :rtype: str\n    \"\"\"\n    snake_case = re.sub(r\"([A-Z])\", r\"_\\1\", snake_case)\n    snake_case = re.sub(r\"([a-z])\", r\"_\\1\", snake_case)\n    return snake_case.lower()\n\n\nprint(convert_snake_case_to_camel(\"snake\"))"
    },
    {
      "rank": 77,
      "score": 3.120223365870615,
      "candidate": "import re\n\n\ndef camel_case(string):\n    return re.sub(r\"([a-z])([A-Z])\", r\"\\1_\\2\", string).lower()\n\n\nif __name__ == \"__main__\":\n    assert camel_case(\"snakeCase\") == \"snakeCase\"\n    assert camel_case(\"camelCase\") == \"camelCase\"\n    assert camel_case(\"snakeCase\") == \"snakeCase\"\n    assert camel_case(\"camelCase\") == \"camelCase\"\n    assert camel_case(\"snakeCase\") == \"snakeCase\"\n    assert camel_case(\"camelCase\") == \"camelCase\"\n    assert camel_case(\"snakeCase\") == \"snakeCase\"\n    assert camel_case(\"snakeCase\") == \"snakeCase\"\n    assert camel_case(\"snakeCase\") == \"snakeCase\"\n    assert camel_case(\"snakeCase\") == \"snakeCase\"\n    assert camel_case(\"snakeCase\") == \"snakeCase\"\n    assert camel_case(\"snakeCase\") == \"snakeCase\"\n    assert camel_case(\"snakeCase\") == \"snakeCase\"\n    assert camel_case(\"snakeCase\") == \"snakeCase\"\n    assert camel_case(\"snakeCase\") == \"snakeCase\"\n    assert camel_case(\"snakeCase\") == \"snakeCase\""
    },
    {
      "rank": 78,
      "score": 3.115723528015243,
      "candidate": "def snake_to_camel(snake_string):\n    \"\"\"\n    :type snake_string: str\n    :rtype: str\n    \"\"\"\n    return snake_string.replace(\"_\", \"\").replace(\" \", \"\").lower()\n\n\ndef main():\n    \"\"\"\n    Test cases:\n    \"\"\"\n    assert snake_to_camel(\"snake\") == \"snake\"\n    assert snake_to_camel(\"snake_case\") == \"snakeCase\"\n    assert snake_to_camel(\"snake_case_case\") == \"snakeCaseCase\"\n    assert snake_to_camel(\"snake_case_case_case\") == \"snakeCaseCaseCase\"\n    assert snake_to_camel(\"snake_case_case_case_case\") == \"snakeCaseCaseCaseCase\"\n    assert snake_to_camel(\"snake_case_case_case_case_case\") == \"snakeCaseCaseCaseCase\"\n    assert snake_to_camel(\"snake_case_case_case_case_case_case\") == \"snakeCaseCaseCaseCase\"\n    assert snake_to_camel(\"snake_case_case_case_case_case_case_case\") == \"snakeCaseCaseCaseCase\"\n    assert snake_to_camel(\"snake_case_case_case_case_case_case_case\") == \"snakeCaseCaseCaseCase\"\n    assert snake_to_camel(\"snake_case_case_case_case_case_case_case\") == \"snakeCaseCaseCaseCase\"\n    assert snake_to_camel(\"snake_case_case_case_case_case_case_case_case_case\") == \"snakeCaseCaseCaseCase\"\n    assert snake_to_camel(\"snake_case_case_case_case_case_case_case_case_case_case\") == \"snakeCaseCaseCaseCase\"\n    assert snake_to_camel(\"snake_case_case_case_case_case_case_case_case_case\") == \"snakeCaseCaseCaseCase\"\n    assert snake_to_camel(\"snake_case_case_case_case_case_case_case_case_case\") == \"snake"
    },
    {
      "rank": 79,
      "score": 3.1156465937626923,
      "candidate": "import re\n\n\ndef snake_to_camel(snake_string):\n    \"\"\"\n    :type snake_string: str\n    :rtype: str\n    \"\"\"\n    # your code here\n    camel_string = re.sub(r'(.)([A-Z][a-z]+)', r'\\1_\\2', snake_string)\n    return camel_string.title()\n\n\nprint(snake_to_camel(\"snake\"))"
    },
    {
      "rank": 80,
      "score": 3.1142760228837587,
      "candidate": "import re\n\n\ndef snake_to_camel(snake_case):\n    return re.sub(r\"([a-z0-9])([A-Z])\", r\"\\1_\\2\", snake_case)\n\n\nassert snake_to_camel(\"snakeCase\") == \"snake_case\"\nassert snake_to_camel(\"snake_case\") == \"snake_case\"\nassert snake_to_camel(\"snakeCase_case\") == \"snake_case_case\"\nassert snake_to_camel(\"snake_case_case\") == \"snake_case_case\"\nassert snake_to_camel(\"snake_case_case_case\") == \"snake_case_case_case\"\nassert snake_to_camel(\"snake_case_case_case\") == \"snake_case_case_case\"\nassert snake_to_camel(\"snake_case_case_case_case\") == \"snake_case_case_case\"\nassert snake_to_camel(\"snake_case_case_case_case_case\") == \"snake_case_case_case_case\""
    },
    {
      "rank": 81,
      "score": 3.105200355091099,
      "candidate": "def camel_case(string):\n    import re\n    import sys\n    string = string.replace(\"_\", \"\")\n    string = re.sub(r\"([a-z])([A-Z])\", r\"\\1_\\2\", string)\n    return string.title()\n\n\nif __name__ == \"__main__\":\n    print(camel_case(\"snake\"))\n    print(camel_case(\"snake\"))\n    print(camel_case(\"snake\"))\n    print(camel_case(\"snake\"))\n    print(camel_case(\"snake\"))\n    print(camel_case(\"snake\"))\n    print(camel_case(\"snake\"))\n    print(camel_case(\"snake\"))\n    print(camel_case(\"snake\"))\n    print(camel_case(\"snake\"))\n    print(camel_case(\"snake\"))\n    print(camel_case(\"snake\"))\n    print(camel_case(\"snake\"))\n    print(camel_case(\"snake\"))\n    print(camel_case(\"snake\"))\n    print(camel_case(\"snake\"))\n    print(camel_case(\"snake\"))\n    print(camel_case(\"snake\"))\n    print(camel_case(\"snake\"))\n    print(camel_case(\"snake\"))\n    print(camel_case(\"snake\"))\n    print(camel_case(\"snake\"))\n    print(camel_case(\"snake\"))\n    print(camel_case(\"snake\"))\n    print(camel_case(\"snake\"))\n    print(camel_case(\"snake\"))\n    print(camel_case(\"snake\"))\n    print(camel_case(\"snake\"))\n    print(camel_case(\"snake\"))\n    print(camel_case(\"snake\"))\n    print(camel_case(\"snake\"))\n    print(camel_case(\"snake\"))\n    print(camel_case(\"snake\"))\n    print(camel_case(\"snake\"))\n    print(camel_case(\"snake\"))\n    print(camel_case(\"snake\"))"
    },
    {
      "rank": 82,
      "score": 3.0947584886606645,
      "candidate": "import re\n\n\ndef convert_snake_case(string: str) -> str:\n    pattern = r\"((?<=[a-z])[A-Z](?=[A-Z](?![A-Z])))+\"\n    return re.sub(pattern, lambda x: x.group(0).upper(), string)\n\n\nif __name__ == \"__main__\":\n    assert convert_snake_case(\"snake\") == \"snake\"\n    assert convert_snake_case(\"snakeCase\") == \"snakeCase\"\n    assert convert_snake_case(\"snakeCase2\") == \"snakeCase2\"\n    assert convert_snake_case(\"snakeCase3\") == \"snakeCase3\"\n    assert convert_snake_case(\"snakeCase4\") == \"snakeCase4\""
    },
    {
      "rank": 83,
      "score": 3.0835376870975644,
      "candidate": "import re\n\n\ndef snake_to_camel(snake_string: str) -> str:\n    \"\"\"\n    :type snake_string: str\n    :rtype: str\n    \"\"\"\n    snake_case = re.sub(r\"([A-Z])([A-Z][a-z])\", r\"\\1_\\2\", snake_string)\n    return snake_case.title()"
    },
    {
      "rank": 84,
      "score": 3.066836350401522,
      "candidate": "def snake_to_camel(snake_str):\n    \"\"\"\n    :type snake_str: str\n    :rtype: str\n    \"\"\"\n    return snake_str.replace('_','').title()\n\n\nif __name__ == '__main__':\n    assert snake_to_camel('snake') =='snake'\n    assert snake_to_camel('snakeCase') =='snakeCase'\n    assert snake_to_camel('snake_case') =='snakeCase'\n    assert snake_to_camel('snakeCase') =='snakeCase'"
    },
    {
      "rank": 85,
      "score": 3.031064815791373,
      "candidate": "import re\n\n\ndef camel_to_snake(string: str) -> str:\n    # Your code here\n    return re.sub(r\"(.)([A-Z][a-z]+)\", r\"\\1_\\2\", string).lower()\n\n\ndef test_case():\n    assert camel_to_snake(\"CamelCase\") == \"camelCase\"\n    assert camel_to_snake(\"snakeCase\") == \"snakeCase\"\n    assert camel_to_snake(\"camelCase\") == \"camelCase\"\n    assert camel_to_snake(\"snakeCase1\") == \"snakeCase1\"\n    assert camel_to_snake(\"snakeCase1_2\") == \"snakeCase1_2\"\n    assert camel_to_snake(\"snakeCase1_2_3\") == \"snakeCase1_2_3\"\n    assert camel_to_snake(\"snakeCase1_2_3_4\") == \"snakeCase1_2_3_4\"\n    assert camel_to_snake(\"snakeCase1_2_3_4_5\") == \"snakeCase1_2_3_4_5\"\n    assert camel_to_snake(\"snakeCase1_2_3_4_5_6\") == \"snakeCase1_2_3_4_5_6\"\n    assert camel_to_snake(\"snakeCase1_2_3_4_5_6_7\") == \"snakeCase1_2_3_4_5_6_7\"\n    assert camel_to_snake(\"snakeCase1_2_3_4_5_6_7_8\") == \"snakeCase1_2_3_4_5_6_7_8\"\n    assert camel_to_snake(\"snakeCase1_2_3_4_5_6_7_8_9\") == \"snakeCase1_2_3_4_5_6_7_8_9\""
    },
    {
      "rank": 86,
      "score": 2.962992549635763,
      "candidate": "import re\n\n\ndef snake_to_camel(snake_str):\n    camel_str = re.sub(r\"([A-Z][a-z]+)\", lambda x: x.group(1).upper(), snake_str)\n    return camel_str\n\n\nif __name__ == \"__main__\":\n    print(snake_to_camel(\"snake\"))\n    print(snake_to_camel(\"snake_case\"))\n    print(snake_to_camel(\"snake_case_with_underscores\"))"
    },
    {
      "rank": 87,
      "score": 2.955755423625221,
      "candidate": "import re\n\n\ndef snake_to_camel(snake_str):\n    snake_str = snake_str.strip()\n    snake_str = re.sub(r\"(.)([A-Z][a-z]+)\", r\"\\1_\\2\", snake_str)\n    snake_str = re.sub(r\"([a-z0-9])([A-Z])\", r\"\\1_\\2\", snake_str)\n    snake_str = re.sub(r\"([A-Z])([a-z])\", r\"\\1_\\2\", snake_str)\n    return snake_str.title()\n\n\nprint(snake_to_camel(\"snake\"))\nprint(snake_to_camel(\"snake_case\"))\nprint(snake_to_camel(\"snake_case_2\"))\nprint(snake_to_camel(\"snake_case_2_2\"))"
    },
    {
      "rank": 88,
      "score": 2.9405891274675784,
      "candidate": "import re\n\n\ndef convert_snake_case(snake_case):\n    return re.sub(r\"(?<!^)(?=[A-Z])\", \"_\", snake_case).lower()\n\n\nassert convert_snake_case(\"snake_case\") == \"snakeCase\"\nassert convert_snake_case(\"snake_case\") == \"snakeCase\"\nassert convert_snake_case(\"snake_case_with_spaces\") == \"snakeCaseWithSpaces\"\nassert convert_snake_case(\"snake_case_with_spaces_and_dashes\") == \"snakeCaseWithSpacesAndDashes\""
    },
    {
      "rank": 89,
      "score": 2.9043176478509225,
      "candidate": "def snake_to_camel(snake):\n    s = snake.replace(\"_\", \"\")\n    s = s.title()\n    return s\n\n\nprint(snake_to_camel(\"snake\"))"
    },
    {
      "rank": 90,
      "score": 2.8767736702667785,
      "candidate": "import re\n\n\ndef snake_to_camel(snake):\n    return re.sub(r\"(?<=[a-z])([A-Z])\", lambda m: m.group(1).upper(), snake)\n\n\nprint(snake_to_camel(\"snake\"))\nprint(snake_to_camel(\"snake_case\"))\nprint(snake_to_camel(\"snake_case_case\"))"
    },
    {
      "rank": 91,
      "score": 2.851706338300012,
      "candidate": "import re\n\n\ndef snake_to_camel(snake_str):\n    \"\"\"\n    :type snake_str: str\n    :rtype: str\n    \"\"\"\n    regex = re.compile(r\"([A-Z][a-z]+)\")\n    return regex.sub(r\"_\\1\", snake_str).lower()\n\n\ndef test_function():\n    assert snake_to_camel(\"snake\") == \"snake\"\n    assert snake_to_camel(\"snake_case\") == \"snake_case\"\n    assert snake_to_camel(\"snake_case_with_underscores\") == \"snake_caseWithUnderscore\"\n    assert snake_to_camel(\"snake_case_with_underscores_and_punctuation\") == \"snake_caseWithUnderscoreAndPunctuation\"\n    assert snake_to_camel(\"snake_case_with_underscores_and_numbers\") == \"snake_caseWithUnderscoreAndNumbers\"\n    assert snake_to_camel(\"snake_case_with_underscores_and_special_characters\") == \"snake_caseWithUnderscoreAndSpecialCharacters\"\n    assert snake_to_camel(\"snake_case_with_underscores_and_numbers_and_special_characters\") == \"snake_caseWithUnderscoreAndNumbersAndSpecialCharacters\"\n    assert snake_to_camel(\"snake_case_with_underscores_and_numbers_and_special_characters_and_punctuation\") == \"snake_caseWithUnderscoreAndNumbersAndSpecialCharactersAndPunctuation\"\n    assert snake_to_camel(\"snake_case_with_underscores_and_numbers_and_special_characters_and_punctuation_and_underscores\") == \"snake_caseWithUnderscoreAndNumbersAndSpecialCharactersAndPunctuationAndUnderscore\"\n    assert snake_to_camel(\"snake_case_with_underscores_and_numbers_and_special_characters_and_punctuation_and_underscores_and_numbers\") == \"snake_caseWithUnderscoreAndNumbersAndSpecialCharactersAndPunctuationAndUnderscore\""
    },
    {
      "rank": 92,
      "score": 2.8394377460529485,
      "candidate": "import re\n\n\ndef camel_case_to_snake(s):\n    return re.sub(r\"([A-Z])\", lambda m: m.group(1).upper(), s)\n\n\ndef test_case():\n    assert camel_case_to_snake(\"SnakeCase\") == \"SnakeCase\"\n    assert camel_case_to_snake(\"CamelCase\") == \"CamelCase\"\n    assert camel_case_to_snake(\"camelCase\") == \"camelCase\"\n    assert camel_case_to_snake(\"camelCaseWithUnderscore\") == \"camelCaseWithUnderscore\"\n    assert camel_case_to_snake(\"snakeWithUnderscore\") == \"snakeWithUnderscore\"\n    assert camel_case_to_snake(\"snakeWithUnderscoreWithUnderscore\") == \"snakeWithUnderscoreWithUnderscore\"\n    assert camel_case_to_snake(\"snakeWithUnderscoreWithUnderscoreWithUnderscore\") == \"snakeWithUnderscoreWithUnderscoreWithUnderscore\"\n    assert camel_case_to_snake(\"SnakeWithUnderscoreWithUnderscoreWithUnderscore\") == \"snakeWithUnderscoreWithUnderscoreWithUnderscore\"\n    assert camel_case_to_snake(\"snakeWithUnderscoreWithUnderscore\") == \"snakeWithUnderscoreWithUnderscore\"\n    assert camel_case_to_snake(\"snakeWithUnderscoreWithUnderscoreWithUnderscore\") == \"snakeWithUnderscoreWithUnderscore\""
    },
    {
      "rank": 93,
      "score": 2.8257975281519414,
      "candidate": "def snake_to_camel(snake_str):\n    \"\"\"\n    :type snake_str: str\n    :rtype: str\n    \"\"\"\n    import re\n\n    return re.sub(r\"(.)([A-Z][a-z]+)\", r\"\\1_\\2\", snake_str).lower()\n\n\nprint(snake_to_camel(\"snake\"))\nprint(snake_to_camel(\"snake_case\"))\nprint(snake_to_camel(\"snake_case_case\"))\nprint(snake_to_camel(\"snake_case_case_case\"))\nprint(snake_to_camel(\"snake_case_case_case_case\"))\nprint(snake_to_camel(\"snake_case_case_case_case_case\"))"
    },
    {
      "rank": 94,
      "score": 2.7935616785263604,
      "candidate": "def camel_case_to_snake_case(camel_case):\n    \"\"\"\n    :type camel_case: str\n    :rtype: str\n    \"\"\"\n    return \"\".join(x.title() for x in camel_case.split(\"_\"))"
    },
    {
      "rank": 95,
      "score": 2.7833849599020932,
      "candidate": "import re\n\n\ndef snake_to_camel(snake_str):\n    \"\"\"\n    :type snake_str: str\n    :rtype: str\n    \"\"\"\n    camel_str = re.sub(r\"([A-Z])\\1+\", r\"\\1\", snake_str)\n    return camel_str.title()\n\n\ndef test_snake_to_camel():\n    assert snake_to_camel(\"snake\") == \"snake\"\n    assert snake_to_camel(\"snake_case\") == \"snake_case\"\n    assert snake_to_camel(\"camel\") == \"camel\"\n    assert snake_to_camel(\"camel_case\") == \"camel_case\"\n    assert snake_to_camel(\"CamelCase\") == \"CamelCase\"\n    assert snake_to_camel(\"snakeCase\") == \"snake_case\"\n    assert snake_to_camel(\"camelCase\") == \"camel_case\"\n    assert snake_to_camel(\"snakeCase\") == \"snake_case\"\n    assert snake_to_camel(\"snake_case\") == \"snake_case\"\n    assert snake_to_camel(\"_camel\") == \"_camel\""
    },
    {
      "rank": 96,
      "score": 2.7696498533136933,
      "candidate": "import re\n\n\ndef camel_case(snake_string):\n    # type: (str) -> str\n    # Your code here\n    snake_string = snake_string.replace(\"_\", \"\")\n    camel_string = re.sub(r\"(.)([A-Z][a-z]+)\", r\"\\1_\\2\", snake_string).lower()\n    return camel_string\n\n\ndef main():\n    print(camel_case(\"snake\"))\n    print(camel_case(\"camel\"))\n    print(camel_case(\"snake_case\"))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 97,
      "score": 2.731450392568756,
      "candidate": "import re\n\n\ndef snake_to_camel(string):\n    \"\"\"\n    :type string: str\n    :rtype: str\n    \"\"\"\n    return re.sub(r\"(.)([A-Z][a-z]+)\", r\"\\1_\\2\", string).lower()\n\n\ndef test():\n    assert snake_to_camel(\"snakeCase\") == \"SnakeCase\"\n    assert snake_to_camel(\"snakeCase1\") == \"SnakeCase1\"\n    assert snake_to_camel(\"snakeCase1_2\") == \"SnakeCase1_2\"\n    assert snake_to_camel(\"snakeCase1_2_3\") == \"SnakeCase1_2_3\"\n    assert snake_to_camel(\"snakeCase1_2_3_4\") == \"SnakeCase1_2_3_4\"\n    assert snake_to_camel(\"snake_case1_2_3_4\") == \"SnakeCase1_2_3_4\"\n    assert snake_to_camel(\"snake_case1_2_3_4_5\") == \"SnakeCase1_2_3_4_5\"\n    assert snake_to_camel(\"snake_case1_2_3_4_5_6\") == \"SnakeCase1_2_3_4_5_6\"\n    assert snake_to_camel(\"snake_case1_2_3_4_5_6_7\") == \"SnakeCase1_2_3_4_5_6_7\"\n    assert snake_to_camel(\"snake_case1_2_3_4_5_6_7_8\") == \"SnakeCase1_2_3_4_5_6_7_8\"\n    assert snake_to_camel(\"snake_case1_2_3_4_5_6_7_8_9\") == \"SnakeCase1_2_3_4_5_6_7_8_9\"\n    assert snake_to_camel(\"snake_case1_2_3_4_5_6_7_8_9_10\") == \"SnakeCase1_2_3_4_"
    },
    {
      "rank": 98,
      "score": 2.661532502734112,
      "candidate": "import re\n\n\ndef camel_case(snake_string: str) -> str:\n    return re.sub(r\"(.)([A-Z][a-z]+)\", r\"\\1_\\2\", snake_string).lower()\n\n\nif __name__ == \"__main__\":\n    assert camel_case(\"snake\") == \"snake\"\n    assert camel_case(\"snake_case\") == \"snake_case\"\n    assert camel_case(\"snake_case_2\") == \"snake_case2\"\n    assert camel_case(\"snake_case_3\") == \"snake_case3\"\n    assert camel_case(\"snake_case_4\") == \"snake_case4\"\n    assert camel_case(\"snake_case_5\") == \"snake_case5\"\n    assert camel_case(\"snake_case_6\") == \"snake_case6\"\n    assert camel_case(\"snake_case_7\") == \"snake_case7\"\n    assert camel_case(\"snake_case_8\") == \"snake_case8\""
    },
    {
      "rank": 99,
      "score": 2.435827150283925,
      "candidate": "import re\n\n\ndef convert_snake_case(snake_case):\n    return re.sub(r\"([a-z])([A-Z])\", r\"\\1_\\2\", snake_case)\n\n\ndef test_convert_snake_case():\n    assert convert_snake_case(\"SnakeCase\") == \"SnakeCase\"\n    assert convert_snake_case(\"snake\") == \"snake\"\n    assert convert_snake_case(\"snake_case\") == \"snake_case\"\n    assert convert_snake_case(\"snake_case_case\") == \"snake_case_case\"\n    assert convert_snake_case(\"snake_case_case_case\") == \"snake_case_case_case\""
    },
    {
      "rank": 100,
      "score": 2.3639779473277143,
      "candidate": "import re\n\n\ndef snake_to_camel(s):\n    return re.sub(r\"(.)([A-Z][a-z]+)\", r\"\\1_\\2\", s).lower()\n\n\ndef test_function():\n    assert snake_to_camel(\"snake\") == \"snake\"\n    assert snake_to_camel(\"snake_case\") == \"snake_case\"\n    assert snake_to_camel(\"snake_case_1\") == \"snake_case_1\"\n    assert snake_to_camel(\"snake_case_1_2\") == \"snake_case_1_2\"\n    assert snake_to_camel(\"snake_case_1_2_3\") == \"snake_case_1_2_3\"\n    assert snake_to_camel(\"snake_case1_2_3_4\") == \"snake_case1_2_3_4\"\n    assert snake_to_camel(\"snake_case1_2_3_4_5\") == \"snake_case1_2_3_4_5\"\n    assert snake_to_camel(\"snake_case1_2_3_4_5_6\") == \"snake_case1_2_3_4_5_6\"\n    assert snake_to_camel(\"snake_case1_2_3_4_5_6_7\") == \"snake_case1_2_3_4_5_6_7\"\n    assert snake_to_camel(\"snake_case1_2_3_4_5_6_7_8\") == \"snake_case1_2_3_4_5_6_7_8\"\n    assert snake_to_camel(\"snake_case1_2_3_4_5_6_7_8_9\") == \"snake_case1_2_3_4_5_6_7_8_9\"\n    assert snake_to_camel(\"snake_case1_2_3_4_5_6_7_8_9_10\") == \"snake_case1_2_3_4_5_6_7_8_9_10\""
    }
  ]
}