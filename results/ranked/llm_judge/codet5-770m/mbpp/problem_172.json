{
  "timestamp": "2025-09-14T13:43:53.641354",
  "method": "improved_llm_judge",
  "judge_model": "codellama/CodeLlama-7b-Python-hf",
  "target_model": "codet5-770m",
  "dataset": "mbpp",
  "problem_number": 172,
  "total_candidates": 100,
  "results": [
    {
      "rank": 1,
      "score": 10.0,
      "candidate": "class Solution(object):\n    def countPairs(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"\n        # Runtime: 36 ms\n        # Memory: 13.2 MB\n        dic = {}\n        for i in range(len(nums)):\n            if nums[i] not in dic:\n                dic[nums[i]] = 1\n            else:\n                dic[nums[i]] += 1\n\n        ans = 0\n        for i in dic.values():\n            if i == k:\n                ans += 1\n\n        return ans\n\n\ns = Solution()\nprint(s.countPairs([2, 2, 3, 1, 2], 3))"
    },
    {
      "rank": 2,
      "score": 10.0,
      "candidate": "def count_pairs(arr, k):\n    \"\"\"\n    :type arr: List[int]\n    :type k: int\n    :rtype: int\n    \"\"\"\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            if arr[i] - arr[j] == k:\n                count += 1\n    return count\n\n\nif __name__ == '__main__':\n    print(count_pairs([1, 2, 2, 3, 3, 4, 4, 5, 5], 3))\n    print(count_pairs([1, 2, 2, 3, 3, 4, 4, 5, 5], 2))\n    print(count_pairs([1, 2, 2, 3, 3, 4, 4, 5, 5], 4))"
    },
    {
      "rank": 3,
      "score": 10.0,
      "candidate": "def count_pairs(array, k):\n    \"\"\"\n    :type array: List[int]\n    :type k: int\n    :rtype: int\n    \"\"\"\n    count = 0\n    for i in range(len(array)):\n        for j in range(i+1, len(array)):\n            if array[i] - array[j] == k:\n                count += 1\n    return count"
    },
    {
      "rank": 4,
      "score": 10.0,
      "candidate": "def count_pairs(arr, k):\n    arr.sort()\n    count = 0\n    for i in range(len(arr)-1):\n        for j in range(i+1, len(arr)):\n            if arr[i] - arr[j] == k:\n                count += 1\n    return count\n\n\n\nif __name__ == \"__main__\":\n    print(count_pairs([4, 6, 6, 7, 7, 7], 3))\n    print(count_pairs([1, 2, 3, 4, 5], 3))\n    print(count_pairs([1, 2, 3, 4, 5, 6], 4))"
    },
    {
      "rank": 5,
      "score": 10.0,
      "candidate": "class Solution:\n    def countPairs(self, nums, k):\n        count = 0\n        for i in range(len(nums)):\n            for j in range(i + 1, len(nums)):\n                if nums[i] > nums[j]:\n                    count += 1\n        return count\n\n\nif __name__ == \"__main__\":\n    assert Solution().countPairs([1, 2, 3, 4, 5], 3) == 3\n    assert Solution().countPairs([1, 2, 3, 4, 5], 4) == 2\n    assert Solution().countPairs([1, 2, 3, 4, 5], 2) == 1\n    assert Solution().countPairs([1, 2, 3, 4, 5], 1) == 0"
    },
    {
      "rank": 6,
      "score": 10.0,
      "candidate": "class Solution:\n    def twoSum(self, nums: List[int], k: int) -> int:\n        nums.sort()\n        count = 0\n        for i in range(len(nums)):\n            for j in range(i + 1, len(nums)):\n                if nums[i] + nums[j] == k:\n                    count += 1\n        return count"
    },
    {
      "rank": 7,
      "score": 10.0,
      "candidate": "def count_pairs(k, arr):\n    return len(set(zip(arr, arr[1:])))\n\n\nif __name__ == \"__main__\":\n    print(count_pairs(1, [1, 2, 3, 4, 5, 6, 7]))"
    },
    {
      "rank": 8,
      "score": 10.0,
      "candidate": "class Solution:\n    def countPairs(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"\n        # Runtime: 40 ms\n        # Memory: 13.5 MB\n        dic = {}\n        for i in nums:\n            if i in dic.keys():\n                dic[i] += 1\n            else:\n                dic[i] = 1\n        count = 0\n        for key, value in dic.items():\n            if key + k in dic.keys():\n                count += value\n        return count\n\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.countPairs([1,2,2,2,3,3], 3))\n    print(sol.countPairs([3,2,3,2,1,2], 3))\n    print(sol.countPairs([3,2,3,2,1,2], 1))\n    print(sol.countPairs([3,2,3,2,1,2], 2))\n    print(sol.countPairs([3,2,3,2,1,2], 3))\n    print(sol.countPairs([3,2,3,2,1,2], 4))"
    },
    {
      "rank": 9,
      "score": 10.0,
      "candidate": "class Solution(object):\n    def countPairs(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"\n        nums.sort()\n        return sum([(nums[i] - nums[i+1]) * (nums[i] - nums[i+1]) for i in range(len(nums) - 1)])\n\nif __name__ == '__main__':\n    s = Solution()\n    nums = [1,2,3,4,5]\n    k = 3\n    print s.countPairs(nums, k)"
    },
    {
      "rank": 10,
      "score": 9.0,
      "candidate": "from typing import List\n\n\ndef count_pairs(nums: List[int], k: int) -> int:\n    count = 0\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] > nums[j]:\n                count += 1\n    return count\n\n\nif __name__ == \"__main__\":\n    assert count_pairs([1, 2, 3, 4, 5], 2) == 3\n    assert count_pairs([1, 2, 3, 4, 5], 3) == 4\n    assert count_pairs([1, 2, 3, 4, 5], 6) == 0"
    },
    {
      "rank": 11,
      "score": 8.0,
      "candidate": "def count_pairs_with_difference(arr, k):\n    if not arr:\n        return 0\n    counter = 0\n    arr.sort()\n    for i in range(len(arr) - k + 1):\n        if arr[i] + arr[i + k] in arr[i + 1:]:\n            counter += 1\n    return counter\n\n\ndef main():\n    print(count_pairs_with_difference([2, 3, 4, 5, 7, 1], 3))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 12,
      "score": 8.0,
      "candidate": "def count_pairs(arr, k):\n    arr.sort()\n    count = 0\n    for i in range(len(arr) - 1):\n        for j in range(i + 1, len(arr)):\n            if arr[i] + arr[j] == k:\n                count += 1\n    return count"
    },
    {
      "rank": 13,
      "score": 8.0,
      "candidate": "def count_pairs(array, k):\n    count = 0\n    for i in range(len(array)-1):\n        for j in range(i+1, len(array)):\n            if array[i] + array[j] == k:\n                count += 1\n    return count\n\nif __name__ == '__main__':\n    array = [1, 2, 3, 4, 5]\n    k = 5\n    print(count_pairs(array, k))"
    },
    {
      "rank": 14,
      "score": 8.0,
      "candidate": "def count_pairs(arr, k):\n    arr_dict = {}\n    for i in range(len(arr)):\n        arr_dict[arr[i]] = arr_dict.get(arr[i], 0) + 1\n\n    count = 0\n    for key, value in arr_dict.items():\n        if key - k in arr:\n            count += value\n\n    return count\n\n\nif __name__ == \"__main__\":\n    print(count_pairs([1, 2, 3, 4, 5, 6, 7], 2))\n    print(count_pairs([1, 2, 3, 4, 5, 6, 7], 3))\n    print(count_pairs([1, 2, 3, 4, 5, 6, 7], 1))\n    print(count_pairs([1, 2, 3, 4, 5, 6, 7], 4))\n    print(count_pairs([1, 2, 3, 4, 5, 6, 7], 5))\n    print(count_pairs([1, 2, 3, 4, 5, 6, 7], 7))"
    },
    {
      "rank": 15,
      "score": 8.0,
      "candidate": "def countPairs(arr, k):\n    if not arr:\n        return 0\n\n    arr.sort()\n    count = 0\n    for i in range(0, len(arr) - 1):\n        if arr[i] + k in arr[i + 1:]:\n            count += 1\n\n    return count\n\n\nif __name__ == \"__main__\":\n    print(countPairs([1, 2, 3, 4, 5], 3))\n    print(countPairs([1, 2, 3, 4, 5], 4))\n    print(countPairs([1, 2, 3, 4, 5], 2))\n    print(countPairs([1, 2, 3, 4, 5], 1))\n    print(countPairs([1, 2, 3, 4, 5], 0))\n    print(countPairs([1, 2, 3, 4, 5], -1))\n    print(countPairs([1, 2, 3, 4, 5], -2))"
    },
    {
      "rank": 16,
      "score": 8.0,
      "candidate": "def count_pairs_with_diff(arr, k):\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == k:\n                count += 1\n    return count\n\nif __name__ == '__main__':\n    arr = [1,2,3,4,5,6]\n    k = 6\n    print(count_pairs_with_diff(arr, k))"
    },
    {
      "rank": 17,
      "score": 8.0,
      "candidate": "def count_pairs_with_difference(array, k):\n    arr_dict = {}\n    count = 0\n    for i in range(len(array)):\n        if k in arr_dict:\n            count += arr_dict[k]\n        arr_dict[array[i]] = i\n    return count\n\n\nif __name__ == '__main__':\n    print(count_pairs_with_difference([1, 2, 3, 4, 5], 2))"
    },
    {
      "rank": 18,
      "score": 8.0,
      "candidate": "def count_pairs(arr, k):\n    count = 0\n    for i in range(len(arr) - 1):\n        for j in range(i + 1, len(arr)):\n            if arr[i] == arr[j]:\n                count += 1\n    return count\n\n\nif __name__ == \"__main__\":\n    print(count_pairs([1, 2, 3, 4, 5], 5))"
    },
    {
      "rank": 19,
      "score": 8.0,
      "candidate": "def count_pairs(arr, k):\n    pairs = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] - arr[j] == k:\n                pairs += 1\n    return pairs"
    },
    {
      "rank": 20,
      "score": 8.0,
      "candidate": "def count_pairs(arr, k):\n    # write your code in Python 3.6\n    arr.sort()\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            if arr[i] - arr[j] == k:\n                count += 1\n    return count\n\n\nprint(count_pairs([1, 2, 3, 4, 5], 2))\nprint(count_pairs([1, 2, 3, 4, 5], 1))\nprint(count_pairs([1, 2, 3, 4, 5], 3))\nprint(count_pairs([1, 2, 3, 4, 5], 4))\nprint(count_pairs([1, 2, 3, 4, 5], 5))"
    },
    {
      "rank": 21,
      "score": 8.0,
      "candidate": "def count_pairs(arr, k):\n    arr.sort()\n    count = 0\n    for i in range(len(arr) - 1):\n        for j in range(i + 1, len(arr)):\n            if arr[i] == arr[j]:\n                count += 1\n    return count\n\n\nprint(count_pairs([1, 3, 2, 4, 5], 2))\nprint(count_pairs([1, 2, 3], 2))\nprint(count_pairs([1, 2, 3, 4, 5, 6], 3))"
    },
    {
      "rank": 22,
      "score": 7.0,
      "candidate": "from typing import List\n\n\ndef count_pairs(nums: List[int], k: int) -> int:\n    if k > 0:\n        count = 0\n        for i in range(len(nums) - 1):\n            for j in range(i + 1, len(nums)):\n                if nums[i] - nums[j] == k:\n                    count += 1\n        return count\n    else:\n        return 0\n\n\nif __name__ == \"__main__\":\n    assert count_pairs([1, 2, 3, 4, 5], 4) == 2\n    assert count_pairs([1, 2, 3, 4, 5], -3) == 0"
    },
    {
      "rank": 23,
      "score": 1.0,
      "candidate": "class Solution:\n    def countPairs(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"\n        result = 0\n        for i in range(len(nums)):\n            for j in range(i+1, len(nums)):\n                if nums[i] == nums[j] and (i - j) % k == 0:\n                    result += 1\n        return result"
    },
    {
      "rank": 24,
      "score": 1.0,
      "candidate": "class Solution:\n    def countPairs(self, nums: List[int], k: int) -> int:\n        if len(nums) == 0:\n            return 0\n        if len(nums) == 1:\n            return 1\n        dp = [0] * (len(nums) + 1)\n        dp[0] = 1\n        for i in range(1, len(nums) + 1):\n            for j in range(i):\n                if nums[i - 1] == nums[j]:\n                    dp[i] += dp[j]\n        return dp[len(nums)] - dp[len(nums) - k]\n\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.countPairs([1, 1, 1, 2, 2], 1))\n    print(sol.countPairs([1, 2, 3, 4, 5], 2))\n    print(sol.countPairs([1, 2, 3, 4, 5], 3))"
    },
    {
      "rank": 25,
      "score": 1.0,
      "candidate": "def count_pairs(arr, k):\n    # Write your code here\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] - arr[j] == k:\n                count += 1\n    return count\n\n\ndef main():\n    print(count_pairs([1, 1, 2, 2, 3, 3], 2))\n    print(count_pairs([1, 1, 2, 2, 3, 3], 3))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 26,
      "score": 1.0,
      "candidate": "def count_pairs(arr, k):\n    if k == 0:\n        return 0\n    if k < 0:\n        return 0\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == k:\n                count += 1\n    return count\n\n\nif __name__ == \"__main__\":\n    arr = [1, 2, 3, 4, 5, 7]\n    k = 2\n    print(count_pairs(arr, k))"
    },
    {
      "rank": 27,
      "score": 1.0,
      "candidate": "class Solution:\n    def countPairs(self, nums: List[int], k: int) -> int:\n        nums.sort()\n        ans = 0\n        for i in range(len(nums)-1):\n            for j in range(i+1, len(nums)):\n                if nums[i] > nums[j]:\n                    ans += 1\n        return ans"
    },
    {
      "rank": 28,
      "score": 1.0,
      "candidate": "class Solution(object):\n    def countPairs(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"\n        if len(nums) < 2:\n            return 0\n        nums.sort()\n        res = 0\n        for i in range(len(nums) - 1):\n            for j in range(i + 1, len(nums)):\n                if nums[i] + nums[j] == k:\n                    res += 1\n        return res\n\n\nif __name__ == \"__main__\":\n    s = Solution()\n    print s.countPairs([1, 1, 1, 1, 1], 1)\n    print s.countPairs([1, 2, 3, 4, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 5, 4, 4, 5, 4, 5, 4, 5, 4, 5, 5, 5, 5, 4, 5, 5, 4, 5, 5, 5, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 5, 4, 4, 5, 4, 5, 5, 4, 5, 5, 4, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 5, 4, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 5, 5, 5, 4, 4, 4, 4, 5, 4, 4, 4, 5, 5, 5, 5, 5, 5, 4, 4, 4, 5, 5, 5, 5, 5, 4, 5, 5, 4, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5"
    },
    {
      "rank": 29,
      "score": 1.0,
      "candidate": "class Solution(object):\n    def findPairs(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"\n        dic = {}\n        for i in nums:\n            if i in dic.keys():\n                dic[i] += 1\n            else:\n                dic[i] = 1\n        count = 0\n        for i in dic.values():\n            if i-k in dic.keys():\n                count += 1\n        return count\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.findPairs([1,3,2,4], 2))\n    print(sol.findPairs([1,2,3,4], 2))\n    print(sol.findPairs([1,2,3,4], 3))\n    print(sol.findPairs([1,3,4,5], 4))\n    print(sol.findPairs([1,3,4,5], 5))\n    print(sol.findPairs([1,2,3,4,5], 5))\n    print(sol.findPairs([1,2,3,4,5], 5))\n    print(sol.findPairs([1,2,3,4,5], 2))\n    print(sol.findPairs([1,2,3,4,5], 3))"
    },
    {
      "rank": 30,
      "score": 1.0,
      "candidate": "def count_pairs(arr, k):\n    count = 0\n    for i in range(len(arr)):\n        for j in range(len(arr)):\n            if arr[i] == arr[j] and arr[i] + arr[j]!= k:\n                count += 1\n    return count\n\n\nif __name__ == \"__main__\":\n    print(count_pairs([1, 2, 3, 4, 5, 6], 3))\n    print(count_pairs([1, 2, 3, 4, 5, 6], 2))\n    print(count_pairs([1, 2, 3, 4, 5, 6], 1))\n    print(count_pairs([1, 2, 3, 4, 5, 6], 2))\n    print(count_pairs([1, 2, 3, 4, 5, 6], 3))\n    print(count_pairs([1, 2, 3, 4, 5, 6], 3))\n    print(count_pairs([1, 2, 3, 4, 5, 6], 5))\n    print(count_pairs([1, 2, 3, 4, 5, 6], 4))\n    print(count_pairs([1, 2, 3, 4, 5, 6], 2))\n    print(count_pairs([1, 2, 3, 4, 5, 6], 1))\n    print(count_pairs([1, 2, 3, 4, 5, 6], 2))\n    print(count_pairs([1, 2, 3, 4, 5, 6], 3))\n    print(count_pairs([1, 2, 3, 4, 5, 6], 3))\n    print(count_pairs([1, 2, 3, 4, 5, 6], 1))\n    print(count_pairs([1, 2, 3, 4, 5, 6], 3))\n    print(count_pairs([1, 2, 3, 4, 5, 6], 4))\n    print(count_pairs([1, 2, 3, 4, 5, 6], 2))\n    print(count_pairs([1, 2, 3, 4, 5, 6], 1))\n    print(count_pairs([1, 2, 3, 4, 5, 6], 2))\n    print(count_"
    },
    {
      "rank": 31,
      "score": 1.0,
      "candidate": "def count_pairs(arr, k):\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] - arr[j] == k:\n                count += 1\n    return count\n\n\nprint(count_pairs([2, 3, 4, 1, 2], 2))\nprint(count_pairs([2, 3, 4, 1, 2], 1))\nprint(count_pairs([1, 2, 3, 4, 5], 2))\nprint(count_pairs([1, 2, 3, 4, 5], 1))\nprint(count_pairs([1, 2, 3, 4, 5], 3))\nprint(count_pairs([1, 2, 3, 4, 5], 4))\nprint(count_pairs([1, 2, 3, 4, 5], 5))"
    },
    {
      "rank": 32,
      "score": 1.0,
      "candidate": "def count_pairs_diff(arr, k):\n    if not arr:\n        return 0\n    arr.sort()\n    count = 0\n    for i in range(len(arr) - k):\n        if arr[i] + arr[i + k] > arr[i + k - 1]:\n            count += 1\n    return count\n\n\nprint(count_pairs_diff([1, 2, 3, 4, 5, 6, 7, 8], 3))"
    },
    {
      "rank": 33,
      "score": 1.0,
      "candidate": "class Solution:\n    def find_pairs(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"\n        d = {}\n        for num in nums:\n            if num in d:\n                d[num] += 1\n            else:\n                d[num] = 1\n\n        result = 0\n        for num in d:\n            if d[num] % k == 0:\n                result += 1\n\n        return result\n\n\nif __name__ == '__main__':\n    nums = [1, 2, 3, 4, 5, 6, 7]\n    k = 5\n    out = 4\n    res = Solution().find_pairs(nums, k)\n    print(res)\n    assert res == out, (res, out)"
    },
    {
      "rank": 34,
      "score": 1.0,
      "candidate": "def count_pairs(arr, k):\n    # write your code here\n    d = {}\n    for i in range(len(arr)):\n        if arr[i] not in d:\n            d[arr[i]] = 1\n        else:\n            d[arr[i]] += 1\n\n    count = 0\n    for key in d:\n        if key - k in d:\n            count += d[key]\n    return count\n\n\nprint(count_pairs([1, 2, 3, 4], 2))\nprint(count_pairs([1, 2, 3, 4], 3))\nprint(count_pairs([1, 2, 3, 4], 5))\nprint(count_pairs([1, 2, 3, 4], 6))\nprint(count_pairs([1, 2, 3, 4], 7))\nprint(count_pairs([1, 2, 3, 4], 8))\nprint(count_pairs([1, 2, 3, 4], 9))"
    },
    {
      "rank": 35,
      "score": 1.0,
      "candidate": "def count_pairs(arr, k):\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            if arr[i] - arr[j] == k:\n                count += 1\n    return count\n\n\nif __name__ == '__main__':\n    print(count_pairs([1, 2, 3, 4, 5], 3))\n    print(count_pairs([1, 2, 3, 4, 5], 2))\n    print(count_pairs([1, 2, 3, 4, 5], 5))\n    print(count_pairs([1, 2, 3, 4, 5], 1))"
    },
    {
      "rank": 36,
      "score": 1.0,
      "candidate": "def count_distinct_pairs_with_difference(arr, k):\n    # Write your code here\n    if not arr or not k:\n        return 0\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            if arr[i] - arr[j] == k:\n                count += 1\n    return count\n\nprint(count_distinct_pairs_with_difference([1, 2, 3, 4, 5], 3))\nprint(count_distinct_pairs_with_difference([1, 2, 3, 4, 5], 2))\nprint(count_distinct_pairs_with_difference([1, 2, 3, 4, 5], 4))\nprint(count_distinct_pairs_with_difference([1, 2, 3, 4, 5], 5))\nprint(count_distinct_pairs_with_difference([1, 2, 3, 4, 5], 1))\nprint(count_distinct_pairs_with_difference([1, 2, 3, 4, 5], 3))\nprint(count_distinct_pairs_with_difference([1, 2, 3, 4, 5], 2))"
    },
    {
      "rank": 37,
      "score": 1.0,
      "candidate": "def count_distinct_pairs(arr, k):\n    arr.sort()\n    count = 0\n    for i in range(len(arr) - 1):\n        for j in range(i + 1, len(arr)):\n            if arr[i] == arr[j] and arr[i] - arr[j] == k:\n                count += 1\n    return count\n\n\narr = [1, 2, 2, 3, 1, 1, 2, 3, 1, 2, 2, 3, 1]\nk = 2\nprint(count_distinct_pairs(arr, k))"
    },
    {
      "rank": 38,
      "score": 1.0,
      "candidate": "class Solution:\n    def countPairs(self, nums: List[int], k: int) -> int:\n        if len(nums) < 2:\n            return 0\n        count = 0\n        nums.sort()\n        for i in range(len(nums)-1):\n            if i == 0:\n                count += 1\n                continue\n            if nums[i] - nums[i-1] == k:\n                count += 1\n        return count"
    },
    {
      "rank": 39,
      "score": 1.0,
      "candidate": "class Solution:\n    def twoSum(self, nums, k):\n        n = len(nums)\n        if n < 2:\n            return 0\n\n        nums.sort()\n        count = 0\n        for i in range(n - 1):\n            for j in range(i + 1, n):\n                if nums[i] + nums[j] == k:\n                    count += 1\n\n        return count\n\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    nums = [1, 2, 3, 4, 5]\n    k = 5\n    print(sol.twoSum(nums, k))"
    },
    {
      "rank": 40,
      "score": 1.0,
      "candidate": "class Solution:\n    def countPairs(self, nums: List[int], k: int) -> int:\n        result = 0\n        for i in range(len(nums)):\n            for j in range(i+1, len(nums)):\n                if nums[i] == nums[j] - k:\n                    result += 1\n        return result"
    },
    {
      "rank": 41,
      "score": 1.0,
      "candidate": "class Solution(object):\n    def findPairs(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"\n        res = 0\n        for i in range(len(nums)):\n            for j in range(i+1, len(nums)):\n                if nums[i] == nums[j] and nums[i]!= k and nums[j]!= k:\n                    res += 1\n        return res"
    },
    {
      "rank": 42,
      "score": 1.0,
      "candidate": "def count_pairs(arr, k):\n    count = 0\n\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            if arr[i] > arr[j]:\n                count += 1\n\n    return count\n\n\nif __name__ == \"__main__\":\n    print(count_pairs([1, 2, 4, 6, 8, 10], 3))"
    },
    {
      "rank": 43,
      "score": 1.0,
      "candidate": "class Solution(object):\n    def countPairs(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"\n        if k == 0:\n            return 0\n        dic = {}\n        for i in range(len(nums)):\n            dic[nums[i]] = dic.get(nums[i], 0) + 1\n        return sum(v*v for v in dic.values())\n\na = Solution()\nprint(a.countPairs([1,2,3,4,5], 2))\nprint(a.countPairs([1,2,3,4,5], 4))\nprint(a.countPairs([1,2,3,4,5], 1))\nprint(a.countPairs([1,2,3,4,5], 0))"
    },
    {
      "rank": 44,
      "score": 1.0,
      "candidate": "def count_pairs(arr, k):\n    return count_pairs_recursive(arr, 0, k)\n\ndef count_pairs_recursive(arr, i, k):\n    if i == len(arr):\n        return 0\n    if arr[i] - k == 0:\n        return 1\n    if arr[i] - k in arr[i+1:]:\n        return count_pairs_recursive(arr, i+1, k)\n    return 0\n\n\narr = [1, 2, 3, 4, 5, 6]\nk = 5\nprint(count_pairs(arr, k))"
    },
    {
      "rank": 45,
      "score": 1.0,
      "candidate": "def count_pairs_with_diff_k(arr, k):\n    count = 0\n\n    for i in range(len(arr) - 1):\n        for j in range(i + 1, len(arr)):\n            if arr[i] == arr[j] and arr[i] - arr[j] == k:\n                count += 1\n\n    return count\n\n\narr = [1, 2, 3, 4, 5]\nk = 2\n\nprint(count_pairs_with_diff_k(arr, k))"
    },
    {
      "rank": 46,
      "score": 1.0,
      "candidate": "def count_pairs_with_diff_of_k(arr, k):\n    arr.sort()\n    count = 0\n    for i in range(len(arr)-1):\n        for j in range(i+1, len(arr)):\n            if arr[i] == arr[j] and arr[i]!= k:\n                count += 1\n    return count\n\narr = [1, 2, 3, 4, 5, 6]\nk = 5\nprint(count_pairs_with_diff_of_k(arr, k))"
    },
    {
      "rank": 47,
      "score": 1.0,
      "candidate": "class Solution:\n    def findPairs(self, nums: List[int], k: int) -> int:\n        dic = {}\n        for num in nums:\n            if num in dic.keys():\n                dic[num] += 1\n            else:\n                dic[num] = 1\n        count = 0\n        for key in dic.keys():\n            if key - k in dic.keys():\n                count += 1\n        return count\n\n\nif __name__ == '__main__':\n    nums = [1, 2, 3, 4, 5, 6]\n    k = 5\n    out = 4\n    res = Solution().findPairs(nums, k)\n    print(res)"
    },
    {
      "rank": 48,
      "score": 1.0,
      "candidate": "class Solution:\n    def countPairs(self, nums: List[int], k: int) -> int:\n        dic = {}\n        for i in nums:\n            if i not in dic:\n                dic[i] = 1\n            else:\n                dic[i] += 1\n\n        res = 0\n        for i in dic.keys():\n            if i + k in dic.keys():\n                res += 1\n\n        return res"
    },
    {
      "rank": 49,
      "score": 1.0,
      "candidate": "def count_distinct_pairs(arr, k):\n    arr.sort()\n    count = 0\n    for i in range(len(arr) - 1):\n        for j in range(i + 1, len(arr)):\n            if arr[i] + arr[j] == k:\n                count += 1\n    return count\n\n\nif __name__ == '__main__':\n    print(count_distinct_pairs([1, 1, 2, 3, 4, 5, 6, 7, 8], 7))\n    print(count_distinct_pairs([1, 1, 2, 3, 4, 5, 6, 7, 8], 4))\n    print(count_distinct_pairs([1, 1, 2, 3, 4, 5, 6, 7, 8], 5))\n    print(count_distinct_pairs([1, 1, 2, 3, 4, 5, 6, 7, 8], 1))\n    print(count_distinct_pairs([1, 1, 2, 3, 4, 5, 6, 7, 8], 0))\n    print(count_distinct_pairs([1, 1, 2, 3, 4, 5, 6, 7, 8], 5))\n    print(count_distinct_pairs([1, 1, 2, 3, 4, 5, 6, 7, 8], 3))\n    print(count_distinct_pairs([1, 1, 2, 3, 4, 5, 6, 7, 8], 2))\n    print(count_distinct_pairs([1, 1, 2, 3, 4, 5, 6, 7, 8], 1))\n    print(count_distinct_pairs([1, 1, 2, 3, 4, 5, 6, 7, 8], 0))"
    },
    {
      "rank": 50,
      "score": 1.0,
      "candidate": "class Solution:\n    def findPairs(self, nums: List[int], k: int) -> int:\n        nums.sort()\n        res = 0\n        for i in range(len(nums)-1):\n            for j in range(i+1, len(nums)):\n                if nums[i] - nums[j] == k:\n                    res += 1\n        return res\n\n\nif __name__ == \"__main__\":\n    nums = [1, 2, 3, 3, 1]\n    k = 3\n    out = 2\n    sol = Solution()\n    assert sol.findPairs(nums, k) == out, (sol.findPairs(nums, k), out)\n\n    nums = [1, 1, 1, 1]\n    k = 1\n    out = 2\n    sol = Solution()\n    assert sol.findPairs(nums, k) == out, (sol.findPairs(nums, k), out)\n\n    nums = [1, 1, 1, 2, 2, 2]\n    k = 2\n    out = 6\n    sol = Solution()\n    assert sol.findPairs(nums, k) == out, (sol.findPairs(nums, k), out)"
    },
    {
      "rank": 51,
      "score": 1.0,
      "candidate": "class Solution(object):\n    def findPairs(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"\n        if len(nums) < 2:\n            return 0\n\n        nums.sort()\n        count = 0\n        for i in range(len(nums) - 1):\n            for j in range(i + 1, len(nums)):\n                if nums[i] - nums[j] == k:\n                    count += 1\n        return count\n\n\nprint(Solution().findPairs([1, 2, 3, 4, 5], 2))\nprint(Solution().findPairs([1, 2, 3, 4, 5], 1))\nprint(Solution().findPairs([1, 2, 3, 4, 5], 3))\nprint(Solution().findPairs([1, 2, 3, 4, 5], 2))\nprint(Solution().findPairs([1, 2, 3, 4, 5], 5))"
    },
    {
      "rank": 52,
      "score": 1.0,
      "candidate": "from typing import List\n\n\nclass Solution:\n    def findPairs(self, nums: List[int], k: int) -> int:\n        hashmap = {}\n        for num in nums:\n            if num in hashmap:\n                hashmap[num] += 1\n            else:\n                hashmap[num] = 1\n\n        pairs = 0\n        for num1 in hashmap.keys():\n            for num2 in hashmap.keys():\n                if num1!= num2 and num1 - num2 == k:\n                    pairs += 1\n\n        return pairs\n\n\nif __name__ == '__main__':\n    s = Solution()\n    print(s.findPairs([1, 2, 3, 4], 3))\n    print(s.findPairs([1, 2, 3, 4, 5], 3))\n    print(s.findPairs([1, 2, 3, 4, 5, 6, 7, 8, 9], 3))\n    print(s.findPairs([1, 2, 3, 4, 5, 6, 7, 8, 9], 4))\n    print(s.findPairs([1, 2, 3, 4, 5, 6, 7, 8, 9], 5))"
    },
    {
      "rank": 53,
      "score": 1.0,
      "candidate": "def count_distinct_pairs(arr, k):\n    # write your code here\n    dic = {}\n    for num in arr:\n        if num not in dic:\n            dic[num] = 1\n        else:\n            dic[num] += 1\n    count = 0\n    for num in dic.values():\n        if num > k:\n            count += 1\n    return count\n\n\nprint(count_distinct_pairs([1, 2, 3, 4, 5], 5))"
    },
    {
      "rank": 54,
      "score": 1.0,
      "candidate": "def count_distinct_pairs(arr, k):\n    if len(arr) < 2:\n        return 0\n\n    count = 0\n    arr.sort()\n    for i in range(len(arr) - 1):\n        for j in range(i + 1, len(arr)):\n            if arr[i] + arr[j] == k:\n                count += 1\n\n    return count\n\n\nprint(count_distinct_pairs([2, 2, 3, 4, 4, 4, 4], 2))"
    },
    {
      "rank": 55,
      "score": 1.0,
      "candidate": "class Solution:\n    def countPairs(self, nums: List[int], k: int) -> int:\n        nums.sort()\n        count = 0\n        for i in range(len(nums) - k + 1):\n            for j in range(i + k, len(nums)):\n                if nums[i] == nums[j]:\n                    count += 1\n        return count"
    },
    {
      "rank": 56,
      "score": 1.0,
      "candidate": "class Solution:\n    def countPairs(self, nums, k):\n        if k <= 0:\n            return 0\n        nums.sort()\n        return sum([i * i for i in range(len(nums)) if i % k == 0])\n\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    assert sol.countPairs([1,2,3,4], 1) == 2\n    assert sol.countPairs([1,2,3,4], 2) == 4\n    assert sol.countPairs([1,2,3,4], 3) == 2\n    assert sol.countPairs([1,2,3,4], 4) == 4\n    assert sol.countPairs([1,2,3,4], 5) == 0\n    assert sol.countPairs([1,2,3,4], 6) == 0"
    },
    {
      "rank": 57,
      "score": 1.0,
      "candidate": "def count_pairs_with_difference(arr, k):\n    count = 0\n    for i in range(len(arr) - 1):\n        for j in range(i + 1, len(arr)):\n            if arr[i] == arr[j]:\n                count += 1\n    return count\n\n\nif __name__ == \"__main__\":\n    arr = [3, 3, 3, 2, 3, 3, 2, 3, 3, 2, 3, 3, 2, 2, 3, 3, 3, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,"
    },
    {
      "rank": 58,
      "score": 1.0,
      "candidate": "class Solution:\n    def countPairs(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"\n        nums.sort()\n        count = 0\n        for i in range(len(nums) - 1):\n            for j in range(i + 1, len(nums)):\n                if nums[i] + nums[j] == k:\n                    count += 1\n        return count\n\n\nif __name__ == \"__main__\":\n    nums = [1, 1, 2, 2, 2, 3, 3, 4]\n    k = 2\n    out = 3\n    out_2 = 0\n    out_3 = 0\n    out_4 = 0\n    out_5 = 0\n    out_6 = 0\n    out_7 = 0\n    out_8 = 0\n    out_9 = 0\n    out_10 = 0\n\n    sol = Solution()\n    out = sol.countPairs(nums, k)\n    print(out)\n    print(out_2)\n    print(out_3)\n    print(out_4)\n    print(out_5)\n    print(out_6)\n    print(out_7)\n    print(out_8)\n    print(out_9)\n    print(out_10)"
    },
    {
      "rank": 59,
      "score": 1.0,
      "candidate": "def count_pairs(arr, k):\n    if len(arr) < 2:\n        return 0\n\n    arr_dict = {}\n    for i in range(len(arr)):\n        if arr[i] not in arr_dict.keys():\n            arr_dict[arr[i]] = 1\n        else:\n            arr_dict[arr[i]] += 1\n\n    result = 0\n\n    for key in arr_dict.keys():\n        if arr_dict[key] == k:\n            result += 1\n\n    return result"
    },
    {
      "rank": 60,
      "score": 1.0,
      "candidate": "def count_diff(arr, k):\n    # Write your code here\n    count = 0\n    arr.sort()\n    for i in range(len(arr) - 1):\n        if arr[i] + k in arr[i + 1:]:\n            count += 1\n    return count\n\n\nprint(count_diff([2, 4, 7, 1, 9], 5))"
    },
    {
      "rank": 61,
      "score": 1.0,
      "candidate": "from collections import defaultdict\n\n\ndef count_pairs(arr, k):\n    # create a set to store the unique pairs\n    unique_pairs = defaultdict(int)\n\n    # count the number of unique pairs\n    for x in arr:\n        if x in unique_pairs:\n            unique_pairs[x] += 1\n        else:\n            unique_pairs[x] = 1\n\n    # return the number of pairs\n    return unique_pairs[k]\n\n\nprint(count_pairs([1, 2, 3, 4, 5], 3))\nprint(count_pairs([1, 2, 3, 4, 5], 5))\nprint(count_pairs([1, 2, 3, 4, 5], 4))"
    },
    {
      "rank": 62,
      "score": 1.0,
      "candidate": "def count_pairs_with_diff_k(arr, k):\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            if arr[i] == arr[j] and (i - j) == k:\n                count += 1\n    return count\n\n\narr = [1, 2, 3, 4, 5, 6]\nk = 3\n\nprint(count_pairs_with_diff_k(arr, k))"
    },
    {
      "rank": 63,
      "score": 1.0,
      "candidate": "def count_distinct_pairs_with_difference(arr, k):\n    arr.sort()\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] == arr[j] and i!= j and arr[i]!= k:\n                count += 1\n    return count\n\n\nif __name__ == \"__main__\":\n    assert count_distinct_pairs_with_difference([1, 3, 4, 7], 3) == 2\n    assert count_distinct_pairs_with_difference([1, 2, 3, 4, 5, 6, 7], 3) == 6"
    },
    {
      "rank": 64,
      "score": 1.0,
      "candidate": "def count_pairs(arr, k):\n    # write your code here\n    arr.sort()\n    count = 0\n    for i in range(0, len(arr) - 1):\n        for j in range(i + 1, len(arr)):\n            if arr[i] == arr[j]:\n                count += 1\n    return count\n\n\nif __name__ == \"__main__\":\n    print(count_pairs([1, 2, 3, 4, 5, 6], 3))"
    },
    {
      "rank": 65,
      "score": 1.0,
      "candidate": "class Solution:\n    def countPairs(self, nums, k):\n        nums = sorted(nums)\n        count = 0\n        for i in range(len(nums)-1):\n            for j in range(i+1, len(nums)):\n                if nums[i] == nums[j]:\n                    count += 1\n        return count"
    },
    {
      "rank": 66,
      "score": 1.0,
      "candidate": "class Solution(object):\n    def countPairs(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"\n        if len(nums) < 2:\n            return 0\n        nums.sort()\n        res = 0\n        for i in range(len(nums) - 1):\n            if nums[i] + nums[i + 1] < k:\n                res += 1\n        return res\n\n\nif __name__ == '__main__':\n    s = Solution()\n    nums = [1, 3, 2, 4, 5]\n    k = 5\n    print(s.countPairs(nums, k))"
    },
    {
      "rank": 67,
      "score": 1.0,
      "candidate": "class Solution(object):\n    def findPairs(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"\n        dic = {}\n        for i in range(len(nums)):\n            if nums[i] in dic:\n                dic[nums[i]].append(i)\n            else:\n                dic[nums[i]] = [i]\n        ans = 0\n        for key in dic.keys():\n            if len(key)!= k:\n                continue\n            for i in dic[key]:\n                ans += 1\n        return ans\n\nnums = [1, 2, 3, 4, 5]\nk = 2\ns = Solution()\nprint s.findPairs(nums, k)"
    },
    {
      "rank": 68,
      "score": 1.0,
      "candidate": "class Solution:\n    def count_pairs(self, nums, k):\n        if len(nums) < 2:\n            return 0\n        count = 0\n        for i in range(len(nums) - 1):\n            for j in range(i + 1, len(nums)):\n                if nums[i] + nums[j] == k:\n                    count += 1\n        return count\n\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    nums = [1, 2, 3, 4, 5]\n    k = 4\n    print(sol.count_pairs(nums, k))"
    },
    {
      "rank": 69,
      "score": 1.0,
      "candidate": "def count_diff(arr, k):\n    arr.sort()\n    count = 0\n    for i in range(len(arr)-k+1):\n        for j in range(i+k, len(arr)-k+1):\n            if arr[i] == arr[j]:\n                count += 1\n    return count\n\n\narr = [1, 2, 2, 1, 2]\nk = 2\n\nprint(count_diff(arr, k))"
    },
    {
      "rank": 70,
      "score": 1.0,
      "candidate": "def count_pairs_with_diff(arr, k):\n    arr = sorted(arr)\n    count = 0\n    for i in range(len(arr) - 1):\n        if arr[i] + k == arr[i + 1]:\n            count += 1\n    return count\n\n\ndef main():\n    print(count_pairs_with_diff([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3))\n    print(count_pairs_with_diff([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3))\n    print(count_pairs_with_diff([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], -3))\n    print(count_pairs_with_diff([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2))\n    print(count_pairs_with_diff([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3))\n    print(count_pairs_with_diff([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], -3))\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 71,
      "score": 1.0,
      "candidate": "class Solution:\n    def countPairs(self, nums, k):\n        if len(nums) < 2:\n            return 0\n\n        nums.sort()\n        res = 0\n        for i in range(len(nums) - 1):\n            for j in range(i + 1, len(nums)):\n                if nums[i] - nums[j] == k:\n                    res += 1\n        return res\n\n\ns = Solution()\nprint(s.countPairs([3, 2, 1, 4], 1))"
    },
    {
      "rank": 72,
      "score": 1.0,
      "candidate": "def distinct_pairs(arr, k):\n    arr.sort()\n    count = 0\n    for i in range(len(arr) - 1):\n        for j in range(i + 1, len(arr)):\n            if arr[i] + arr[j] == k:\n                count += 1\n    return count\n\n\nprint(distinct_pairs([1, 3, 5, 7, 8, 9, 2], 5))"
    },
    {
      "rank": 73,
      "score": 1.0,
      "candidate": "class Solution(object):\n    def countPairs(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"\n        if len(nums) <= 2:\n            return 0\n        dic = {}\n        for num in nums:\n            if num in dic.keys():\n                dic[num] += 1\n            else:\n                dic[num] = 1\n        res = 0\n        for key in dic.keys():\n            if key - k in dic.keys():\n                res += 1\n        return res"
    },
    {
      "rank": 74,
      "score": 1.0,
      "candidate": "def count_pairs(arr, k):\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] - arr[j] == k:\n                count += 1\n    return count\n\n\nif __name__ == \"__main__\":\n    print(count_pairs([1, 2, 3, 4, 5], 5))\n    print(count_pairs([1, 2, 3, 4, 5], 1))\n    print(count_pairs([1, 2, 3, 4, 5], 2))\n    print(count_pairs([1, 2, 3, 4, 5], 3))\n    print(count_pairs([1, 2, 3, 4, 5], 4))"
    },
    {
      "rank": 75,
      "score": 1.0,
      "candidate": "class Solution:\n    def countPairs(self, nums: List[int], k: int) -> int:\n        nums.sort()\n        count = 0\n        for i in range(len(nums)):\n            for j in range(i+1, len(nums)):\n                if nums[i] == nums[j]:\n                    count += 1\n        return count\n\nnums = [1,2,3,4,5]\nk = 5\ns = Solution()\nprint(s.countPairs(nums, k))"
    },
    {
      "rank": 76,
      "score": 1.0,
      "candidate": "class Solution:\n    def countPairs(self, nums, k):\n        # Write your code here\n        dic = {}\n        for num in nums:\n            if num not in dic.keys():\n                dic[num] = 1\n            else:\n                dic[num] += 1\n        return sum(dic.values()) - (sum(dic.values()) - (sum(dic.values()) % k))"
    },
    {
      "rank": 77,
      "score": 1.0,
      "candidate": "def count_distinct_pairs_with_difference(nums, k):\n    count = 0\n    nums.sort()\n    for i in range(len(nums)):\n        for j in range(i + 1, len(nums)):\n            if nums[i] - nums[j] == k:\n                count += 1\n    return count\n\n\nprint(count_distinct_pairs_with_difference([1, 2, 3, 4], 3))"
    },
    {
      "rank": 78,
      "score": 1.0,
      "candidate": "def count_distinct_pairs_with_difference(arr, k):\n    arr.sort()\n    res = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] - arr[j] == k:\n                res += 1\n    return res\n\narr = [1,1,2,2,2,3,3]\nk = 2\n\nprint(count_distinct_pairs_with_difference(arr, k))"
    },
    {
      "rank": 79,
      "score": 1.0,
      "candidate": "class Solution:\n    def countPairs(self, nums: List[int], k: int) -> int:\n        nums.sort()\n        count = 0\n        for i in range(len(nums)-1):\n            for j in range(i+1, len(nums)):\n                if nums[i] - nums[j] == k:\n                    count += 1\n        return count"
    },
    {
      "rank": 80,
      "score": 1.0,
      "candidate": "class Solution(object):\n    def countPairs(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"\n        if not nums:\n            return 0\n\n        nums.sort()\n\n        count = 0\n        for i in range(len(nums)):\n            if nums[i] - k in nums[i+1:]:\n                count += 1\n        return count"
    },
    {
      "rank": 81,
      "score": 1.0,
      "candidate": "class Solution(object):\n    def countPairs(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"\n        nums.sort()\n        count = 0\n        for i in range(len(nums) - 1):\n            for j in range(i + 1, len(nums)):\n                if nums[i] + nums[j] == k:\n                    count += 1\n        return count\n\na = Solution()\nprint(a.countPairs([1, 2, 3, 4], 2))"
    },
    {
      "rank": 82,
      "score": 1.0,
      "candidate": "def count_pairs(arr, k):\n    pairs = set()\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] > arr[j]:\n                pairs.add((arr[i], arr[j]))\n    return len(pairs)\n\narr = [1, 2, 2, 2, 3, 3, 3]\nk = 2\nprint(count_pairs(arr, k))"
    },
    {
      "rank": 83,
      "score": 1.0,
      "candidate": "class Solution(object):\n    def countPairs(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"\n        nums.sort()\n        count = 0\n        for i in range(len(nums)-1):\n            if nums[i]-k in nums[i+1:]:\n                count += 1\n        return count\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.countPairs([1, 2, 3, 4, 5], 2))\n    print(sol.countPairs([1, 2, 3, 4, 5], 1))"
    },
    {
      "rank": 84,
      "score": 1.0,
      "candidate": "def count_distinct_pairs(arr, k):\n    arr.sort()\n    count = 0\n    for i in range(len(arr) - 1):\n        if arr[i] + k in arr[i + 1:]:\n            count += 1\n    return count\n\n\nprint(count_distinct_pairs([1, 2, 3, 4, 5, 6], 3))\nprint(count_distinct_pairs([1, 2, 3, 4, 5, 6], 2))"
    },
    {
      "rank": 85,
      "score": 1.0,
      "candidate": "class Solution(object):\n    def countPairs(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"\n        d = {}\n        for i, num in enumerate(nums):\n            if num in d:\n                d[num] += 1\n            else:\n                d[num] = 1\n        \n        count = 0\n        for num in d:\n            if num - k in d:\n                count += d[num]\n        \n        return count"
    },
    {
      "rank": 86,
      "score": 1.0,
      "candidate": "def count_pairs_with_diff(arr, k):\n    count = 0\n    for i in range(len(arr)-1):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == k:\n                count += 1\n    return count\n\n\nprint(count_pairs_with_diff([1, 2, 3, 4, 5], 5))\nprint(count_pairs_with_diff([1, 2, 3, 4, 5], 2))\nprint(count_pairs_with_diff([1, 2, 3, 4, 5], 1))"
    },
    {
      "rank": 87,
      "score": 1.0,
      "candidate": "class Solution(object):\n    def numPairs(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"\n        dic = {}\n        for num in nums:\n            if num in dic:\n                dic[num] += 1\n            else:\n                dic[num] = 1\n        \n        count = 0\n        for key in dic:\n            if dic[key] == k:\n                count += 1\n        return count"
    },
    {
      "rank": 88,
      "score": 1.0,
      "candidate": "class Solution(object):\n    def countPairs(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"\n        dic = {}\n        for i in range(len(nums)):\n            if nums[i] not in dic:\n                dic[nums[i]] = 1\n            else:\n                dic[nums[i]] += 1\n        res = 0\n        for i in dic:\n            for j in dic:\n                if i!= j and i-k in dic and j-k in dic:\n                    res += 1\n        return res\n\nnums = [1,2,2,1,3,4]\nk = 3\ns = Solution()\nprint(s.countPairs(nums, k))"
    },
    {
      "rank": 89,
      "score": 1.0,
      "candidate": "def count_pairs(array, k):\n    if k == 0:\n        return 0\n    elif k < 0:\n        return -1\n    else:\n        if len(array) < 2:\n            return -1\n        else:\n            return (count_pairs(array[1:], k) + count_pairs(array[:-1], k))\n\n\nif __name__ == \"__main__\":\n    print(count_pairs([1, 2, 3, 4, 5], 5))\n    print(count_pairs([1, 2, 3, 4, 5], -3))\n    print(count_pairs([1, 2, 3, 4, 5], 0))\n    print(count_pairs([1, 2, 3, 4, 5], 1))\n    print(count_pairs([1, 2, 3, 4, 5], 2))\n    print(count_pairs([1, 2, 3, 4, 5], 3))\n    print(count_pairs([1, 2, 3, 4, 5], -2))\n    print(count_pairs([1, 2, 3, 4, 5], -4))\n    print(count_pairs([1, 2, 3, 4, 5], -5))\n    print(count_pairs([1, 2, 3, 4, 5], -1))\n    print(count_pairs([1, 2, 3, 4, 5], 0))\n    print(count_pairs([1, 2, 3, 4, 5], 1))\n    print(count_pairs([1, 2, 3, 4, 5], 2))\n    print(count_pairs([1, 2, 3, 4, 5], 3))\n    print(count_pairs([1, 2, 3, 4, 5], -2))\n    print(count_pairs([1, 2, 3, 4, 5], -4))\n    print(count_pairs([1, 2, 3, 4, 5], -5))\n    print(count_pairs([1, 2, 3, 4, 5], -1))\n    print(count_pairs([1, 2, 3, 4, 5], 0))\n    print(count_pairs([1, 2, 3, 4, 5], 1))\n    print(count_"
    },
    {
      "rank": 90,
      "score": 1.0,
      "candidate": "def count_pairs(arr, k):\n    hashmap = {}\n    for i in arr:\n        if i in hashmap:\n            hashmap[i] += 1\n        else:\n            hashmap[i] = 1\n    count = 0\n    for i in arr:\n        for j in arr:\n            if i == j:\n                continue\n            if hashmap[i] == k and hashmap[j] == k:\n                count += 1\n    return count\n\n\nif __name__ == \"__main__\":\n    print(count_pairs([1, 2, 3, 4, 5, 6, 7, 8], 2))"
    },
    {
      "rank": 91,
      "score": 1.0,
      "candidate": "class Solution(object):\n    def countPairs(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"\n        if len(nums) < 2:\n            return 0\n        \n        nums = sorted(nums)\n        count = 0\n        for i in range(len(nums) - 1):\n            for j in range(i + 1, len(nums)):\n                if nums[i] - nums[j] == k:\n                    count += 1\n        return count"
    },
    {
      "rank": 92,
      "score": 1.0,
      "candidate": "class Solution(object):\n    def numPairs(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"\n        if len(nums) < 2:\n            return 0\n        d = {}\n        for i in nums:\n            if i in d:\n                d[i] += 1\n            else:\n                d[i] = 1\n        return sum([v*v for v in d.values() if v > k])"
    },
    {
      "rank": 93,
      "score": 1.0,
      "candidate": "def count_pairs(arr, k):\n    arr.sort()\n    count = 0\n    for i in range(len(arr)-1):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == k:\n                count += 1\n    return count\n\n\nif __name__ == '__main__':\n    print(count_pairs([1, 2, 3, 4, 5], 2))\n    print(count_pairs([1, 2, 3, 4, 5], 1))\n    print(count_pairs([1, 2, 3, 4, 5], 3))"
    },
    {
      "rank": 94,
      "score": 1.0,
      "candidate": "def count_distinct_pairs_with_different_k(arr, k):\n    arr.sort()\n    result = 0\n    for i in range(len(arr)-1):\n        for j in range(i+1, len(arr)):\n            if arr[i] == arr[j] - k:\n                result += 1\n    return result\n\n\nprint(count_distinct_pairs_with_different_k([1,2,3,4,5,6], 3))"
    },
    {
      "rank": 95,
      "score": 1.0,
      "candidate": "def count_distinct_pairs(arr, k):\n    hash = {}\n    for i in arr:\n        if i in hash:\n            hash[i] += 1\n        else:\n            hash[i] = 1\n    count = 0\n    for i in hash.values():\n        if i > k:\n            count += 1\n    return count"
    },
    {
      "rank": 96,
      "score": 1.0,
      "candidate": "class Solution:\n    def countPairs(self, nums: List[int], k: int) -> int:\n        nums.sort()\n        count = 0\n        for i in range(len(nums) - k + 1):\n            for j in range(i + k, len(nums)):\n                if nums[i] == nums[j]:\n                    count += 1\n        return count\n\nif __name__ == \"__main__\":\n    s = Solution()\n    nums = [1, 2, 3, 2, 1]\n    k = 2\n    print(s.countPairs(nums, k))"
    },
    {
      "rank": 97,
      "score": 1.0,
      "candidate": "class Solution:\n    def countPairs(self, nums: List[int], k: int) -> int:\n        hashmap = {}\n        for i, num in enumerate(nums):\n            if num in hashmap:\n                hashmap[num] += 1\n            else:\n                hashmap[num] = 1\n\n        count = 0\n        for key, value in hashmap.items():\n            if value - k in hashmap:\n                count += 1\n\n        return count\n\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    nums = [1, 2, 3, 4, 5]\n    k = 5\n    print(sol.countPairs(nums, k))"
    },
    {
      "rank": 98,
      "score": 1.0,
      "candidate": "class Solution(object):\n    def findPairs(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"\n        n = len(nums)\n        res = 0\n        for i in range(n):\n            for j in range(i+1, n):\n                if nums[i]-k in nums[j]:\n                    res += 1\n        return res"
    },
    {
      "rank": 99,
      "score": 1.0,
      "candidate": "def count_distinct_pairs(arr, k):\n    arr.sort()\n    count = 0\n    for i in range(len(arr)-1):\n        if arr[i] + k in arr[i+1:]:\n            count += 1\n    return count\n\n\n\nprint(count_distinct_pairs([1, 1, 2, 2, 3, 3], 2))"
    },
    {
      "rank": 100,
      "score": 1.0,
      "candidate": "class Solution(object):\n    def countPairs(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"\n        dic = {}\n        for i in range(len(nums)):\n            if nums[i] not in dic:\n                dic[nums[i]] = 1\n            else:\n                dic[nums[i]] += 1\n        count = 0\n        for key, value in dic.items():\n            if value == k:\n                count += 1\n        return count"
    }
  ]
}