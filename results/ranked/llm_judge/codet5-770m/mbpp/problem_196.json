{
  "timestamp": "2025-09-14T13:54:24.270364",
  "method": "improved_llm_judge",
  "judge_model": "codellama/CodeLlama-7b-Python-hf",
  "target_model": "codet5-770m",
  "dataset": "mbpp",
  "problem_number": 196,
  "total_candidates": 100,
  "results": [
    {
      "rank": 1,
      "score": 10.0,
      "candidate": "def longest_repeating_subsequence(str1, str2):\n    \"\"\"\n    :type str1: str\n    :type str2: str\n    :rtype: int\n    \"\"\"\n    if len(str1) == 0:\n        return len(str2)\n    if len(str2) == 0:\n        return len(str1)\n    if str1[0] == str2[0]:\n        return 1 + longest_repeating_subsequence(str1[1:], str2[1:])\n    else:\n        return max(longest_repeating_subsequence(str1[1:], str2), longest_repeating_subsequence(str1, str2[1:]))\n\nif __name__ == '__main__':\n    print(longest_repeating_subsequence(\"abcabc\", \"abcabc\"))"
    },
    {
      "rank": 2,
      "score": 10.0,
      "candidate": "def longest_repeating_string(s1, s2):\n    # Write your code here\n    # 1. create a dictionary of the characters in both the strings\n    # 2. create a dictionary of the characters in both the strings\n    # 3. create a dictionary of the characters in both the strings\n    # 4. create a dictionary of the characters in both the strings\n    # 5. create a dictionary of the characters in both the strings\n    # 6. create a dictionary of the characters in both the strings\n    # 7. create a dictionary of the characters in both the strings\n    # 8. create a dictionary of the characters in both the strings\n    # 9. create a dictionary of the characters in both the strings\n    # 10. create a dictionary of the characters in both the strings\n    # 11. create a dictionary of the characters in both the strings\n    # 12. create a dictionary of the characters in both the strings\n    # 13. create a dictionary of the characters in both the strings\n    # 14. create a dictionary of the characters in both the strings\n    # 15. create a dictionary of the characters in both the strings\n    # 16. create a dictionary of the characters in both the strings\n    # 17. create a dictionary of the characters in both the strings\n    # 18. create a dictionary of the characters in both the strings\n    # 19. create a dictionary of the characters in both the strings\n    # 20. create a dictionary of the characters in both the strings\n    # 21. create a dictionary of the characters in both the strings\n    # 22. create a dictionary of the characters in both the strings\n    # 23. create a dictionary of the characters in both the strings\n    # 24. create a dictionary of the characters in both the strings\n    # 25. create a dictionary of the characters in both the strings\n    # 26. create a dictionary of the characters in both the strings\n    # 27. create a dictionary of the characters in both the strings\n    # 28. create a dictionary of the characters in both the strings\n    # 29. create a dictionary of the characters in both the strings\n    # 30. create a dictionary of the characters in both the strings\n    # 31. create a dictionary of the characters in both the strings\n    # 32. create a dictionary of the characters in both the strings\n    # 33. create a"
    },
    {
      "rank": 3,
      "score": 10.0,
      "candidate": "def count_repeating_subsequences(s1, s2):\n    count = 0\n    for i in range(len(s1)):\n        for j in range(len(s2)):\n            if s1[i] == s2[j]:\n                count += 1\n    return count\n\nprint(count_repeating_subsequences('abc', 'bac'))\nprint(count_repeating_subsequences('a', 'b'))\nprint(count_repeating_subsequences('b', 'a'))\nprint(count_repeating_subsequences('a', 'c'))\nprint(count_repeating_subsequences('abcd', 'bcdb'))\nprint(count_repeating_subsequences('ab', 'ac'))\nprint(count_repeating_subsequences('a', 'b'))\nprint(count_repeating_subsequences('a', 'bac'))\nprint(count_repeating_subsequences('a', 'acd'))\nprint(count_repeating_subsequences('a', 'abc'))\nprint(count_repeating_subsequences('a', 'bab'))\nprint(count_repeating_subsequences('a', 'bacd'))\nprint(count_repeating_subsequences('a', 'acdab'))\nprint(count_repeating_subsequences('abcd', 'bcdb'))\nprint(count_repeating_subsequences('ab', 'ac'))\nprint(count_repeating_subsequences('ab', 'bcdb'))\nprint(count_repeating_subsequences('ab', 'abcd'))\nprint(count_repeating_subsequences('abcd', 'bcdbab'))"
    },
    {
      "rank": 4,
      "score": 10.0,
      "candidate": "def longest_repeating_subsequence(s1, s2):\n    n = len(s1)\n    m = len(s2)\n    dp = [[0 for i in range(m+1)] for j in range(n+1)]\n\n    for i in range(n):\n        for j in range(m):\n            if s1[i] == s2[j]:\n                dp[i+1][j+1] = dp[i][j] + 1\n            else:\n                dp[i+1][j+1] = max(dp[i+1][j], dp[i][j+1])\n\n    return dp[n][m]\n\n\ndef main():\n    s1 = \"abcabcbb\"\n    s2 = \"cbbd\"\n    s3 = \"aaaaaabbbb\"\n    s4 = \"bbbbb\"\n    print(longest_repeating_subsequence(s1, s2))\n    print(longest_repeating_subsequence(s1, s3))\n    print(longest_repeating_subsequence(s2, s3))\n    print(longest_repeating_subsequence(s4, s3))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 5,
      "score": 10.0,
      "candidate": "def longest_repeating_sequence(s1, s2):\n    \"\"\"\n    :type s1: str\n    :type s2: str\n    :rtype: int\n    \"\"\"\n    if not s1 or not s2:\n        return 0\n\n    seen_set = set()\n    result = 0\n\n    for i in range(len(s1)):\n        if s1[i] not in seen_set:\n            seen_set.add(s1[i])\n            if s2[i] in seen_set:\n                result = max(result, i - seen_set.index(s2[i]) + 1)\n\n    return result\n\n\ndef longest_repeating_sequence2(s1, s2):\n    \"\"\"\n    :type s1: str\n    :type s2: str\n    :rtype: int\n    \"\"\"\n    if not s1 or not s2:\n        return 0\n\n    seen_set = set()\n    result = 0\n\n    for i in range(len(s1)):\n        if s1[i] not in seen_set:\n            seen_set.add(s1[i])\n            if s2[i] in seen_set:\n                result = max(result, i - seen_set.index(s2[i]) + 1)\n\n    return result\n\n\nif __name__ == \"__main__\":\n    s1 = \"abcabcbb\"\n    s2 = \"bcbb\"\n    print(longest_repeating_sequence(s1, s2))\n    print(longest_repeating_sequence2(s1, s2))"
    },
    {
      "rank": 6,
      "score": 10.0,
      "candidate": "class Solution:\n    def longestRepeatingSubsequence(self, s: str) -> int:\n        if len(s) == 1:\n            return 0\n        else:\n            longest = 0\n            longest_count = 0\n            for i in range(len(s)):\n                for j in range(len(s)):\n                    if i == j:\n                        continue\n                    elif s[i] == s[j]:\n                        longest_count += 1\n                    else:\n                        break\n                longest = max(longest, longest_count)\n            return longest\n\n\nif __name__ == \"__main__\":\n    s = \"abcbb\"\n    s1 = \"bcbb\"\n    s2 = \"bbbbb\"\n    s3 = \"aab\"\n    s4 = \"aaab\"\n    s5 = \"abc\"\n    s6 = \"aaabaa\"\n    s7 = \"aabbbb\"\n    s8 = \"abcabc\"\n    s9 = \"aaabbbb\"\n    s10 = \"abbbabab\"\n    s11 = \"abbbabab\"\n    s12 = \"abbbbbbb\"\n    s13 = \"abbbbbbbb\"\n    s14 = \"abbbbbbbbbb\"\n    s15 = \"abbbbbbbbbb\"\n    s16 = \"abbbbbbbbbb\"\n    s17 = \"abbbbbbbbbb\"\n    s18 = \"abbbbbbbbbb\"\n    s19 = \"abbbbbbbbbb\"\n    s20 = \"abbbbbbbbbb\"\n    s21 = \"abbbbbbbbbb\"\n    s22 = \"abbbbbbbbbb\"\n    s23 = \"abbbbbbbbbb\"\n    s24 = \"abbbbbbbbbb\"\n    s25 = \"abbbbbbbbbb\"\n    s26 = \"abbbbbbbbbb\"\n    s27 = \"abbbbbbbbbb\"\n    s28 = \"abbbbbbbbbb\"\n    s29 = \"abbbbbbbbbb\"\n    s30 = \"abbbbbbbbbb\"\n    s31 ="
    },
    {
      "rank": 7,
      "score": 10.0,
      "candidate": "class Solution:\n    def longestRepeatingSubseq(self, s: str) -> int:\n        dp = [0] * len(s)\n        for i in range(len(s)):\n            for j in range(i):\n                if s[i] == s[j]:\n                    dp[i] = max(dp[i], dp[j] + 1)\n        return max(dp)"
    },
    {
      "rank": 8,
      "score": 10.0,
      "candidate": "class Solution:\n    def findLengthOfLongestSubsequence(self, s: str) -> int:\n        n = len(s)\n        if n == 0:\n            return 0\n        if n == 1:\n            return 1\n\n        dp = [[0] * (n + 1) for _ in range(n + 1)]\n        dp[0][0] = 1\n        dp[1][0] = 1\n\n        for i in range(2, n + 1):\n            for j in range(1, i):\n                if s[i - 1] == s[j - 1]:\n                    dp[i][j] = dp[i - 1][j - 1] + 1\n                else:\n                    dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])\n\n        return dp[-1][-1]"
    },
    {
      "rank": 9,
      "score": 10.0,
      "candidate": "class Solution:\n    def longestRepeatingSubsequence(self, s: str) -> int:\n        if len(s) == 0:\n            return 0\n        res = 0\n        memo = {}\n        for i in range(len(s)):\n            if s[i] in memo:\n                res = max(res, memo[s[i]] + 1)\n            else:\n                memo[s[i]] = 1\n        return res\n\nif __name__ == \"__main__\":\n    s = Solution()\n    print(s.longestRepeatingSubsequence(\"abcabcbb\"))\n    print(s.longestRepeatingSubsequence(\"cbbbb\"))\n    print(s.longestRepeatingSubsequence(\"pwwkew\"))\n    print(s.longestRepeatingSubsequence(\"pwwkewpwwkew\"))"
    },
    {
      "rank": 10,
      "score": 10.0,
      "candidate": "class Solution:\n    def lengthOfLongestSubsequence(self, s: str, t: str) -> int:\n        # Time: O(m*n)\n        # Space: O(m*n)\n        # Runtime: 20 ms, faster than 88.61% of Python3 online submissions for Longest Repeating Subsequences.\n        # Memory Usage: 13.9 MB, less than 100.00% of Python3 online submissions for Longest Repeating Subsequences.\n        m, n = len(s), len(t)\n        max_length = 0\n        dict = {}\n        for i in range(m):\n            if s[i] in dict:\n                dict[s[i]] += 1\n            else:\n                dict[s[i]] = 1\n            if t[i] in dict:\n                dict[t[i]] -= 1\n            else:\n                dict[t[i]] = -1\n            if dict[t[i]] == 0:\n                del dict[t[i]]\n            else:\n                max_length = max(max_length, dict[t[i]])\n        return max_length"
    },
    {
      "rank": 11,
      "score": 8.0,
      "candidate": "def count_repeating_subsequences(s1, s2):\n    # Write your code here\n    count = 0\n    if s1 == s2:\n        count += 1\n    elif len(s1) == 1:\n        count += 1\n    elif len(s2) == 1:\n        count += 1\n    else:\n        for i in range(len(s1)):\n            if s1[i] == s2[0]:\n                count += 1\n                if count > count_repeating_subsequences(s1[i:], s2[1:]):\n                    count = count_repeating_subsequences(s1[:i], s2[:-1])\n                else:\n                    count = 0\n            else:\n                count = 0\n    return count\n\n\nif __name__ == '__main__':\n    print(count_repeating_subsequences(\"abab\", \"abab\"))\n    print(count_repeating_subsequences(\"abab\", \"bab\"))\n    print(count_repeating_subsequences(\"abab\", \"abab\"))\n    print(count_repeating_subsequences(\"abab\", \"aba\"))\n    print(count_repeating_subsequences(\"abab\", \"abab\"))\n    print(count_repeating_subsequences(\"abab\", \"abab\"))\n    print(count_repeating_subsequences(\"abab\", \"abab\"))\n    print(count_repeating_subsequences(\"abab\", \"bab\"))\n    print(count_repeating_subsequences(\"abab\", \"bab\"))\n    print(count_repeating_subsequences(\"abab\", \"abab\"))\n    print(count_repeating_subsequences(\"abab\", \"aba\"))"
    },
    {
      "rank": 12,
      "score": 8.0,
      "candidate": "def longest_repeating_substring(s1, s2):\n    count = 0\n    i, j = 0, 0\n    while i < len(s1) and j < len(s2):\n        if s1[i] == s2[j]:\n            count += 1\n            i += 1\n            j += 1\n        else:\n            count = 0\n            i, j = i + 1, j + 1\n    return count\n\n\nif __name__ == \"__main__\":\n    assert longest_repeating_substring(\"abc\", \"acb\") == 1\n    assert longest_repeating_substring(\"a\", \"b\") == 1\n    assert longest_repeating_substring(\"aa\", \"aa\") == 2\n    assert longest_repeating_substring(\"aab\", \"aacb\") == 1\n    assert longest_repeating_substring(\"aa\", \"a\") == 1"
    },
    {
      "rank": 13,
      "score": 8.0,
      "candidate": "def longest_repeating_subsequence(s1, s2):\n    count = 0\n    if len(s1) == 0 or len(s2) == 0:\n        return count\n    if s1[0] == s2[0]:\n        count += longest_repeating_subsequence(s1[1:], s2[1:])\n    return max(count, longest_repeating_subsequence(s1[1:], s2))\n\n\nif __name__ == '__main__':\n    print(longest_repeating_subsequence('a', 'a'))\n    print(longest_repeating_subsequence('a', 'aa'))\n    print(longest_repeating_subsequence('aa', 'a'))\n    print(longest_repeating_subsequence('aa', 'aa'))\n    print(longest_repeating_subsequence('aa', 'aaaa'))\n    print(longest_repeating_subsequence('aa', 'aaaaaa'))\n    print(longest_repeating_subsequence('aa', 'aaaaa'))\n    print(longest_repeating_subsequence('aa', 'aaaaaaaa'))\n    print(longest_repeating_subsequence('aa', 'aaaaaaaaaa'))"
    },
    {
      "rank": 14,
      "score": 8.0,
      "candidate": "def longest_repeating_subsequence(s1, s2):\n    n = len(s1)\n    if n == 0 or n == 0:\n        return 0\n\n    l1 = [0] * (n+1)\n    l2 = [0] * (n+1)\n    l1[0] = 1\n    l2[0] = 1\n\n    for i in range(1, n+1):\n        if s1[i-1] == s2[i-1]:\n            l1[i] = l1[i-1] + 1\n            l2[i] = l2[i-1] + 1\n        else:\n            l1[i] = 1\n            l2[i] = 1\n\n    return max(l1[n], l2[n])\n\nif __name__ == \"__main__\":\n    s1 = \"abc\"\n    s2 = \"abc\"\n    print(longest_repeating_subsequence(s1, s2))"
    },
    {
      "rank": 15,
      "score": 8.0,
      "candidate": "def longest_repeating_subseq(s1, s2):\n    n = len(s1)\n    m = len(s2)\n    dp = [[0 for _ in range(m + 1)] for _ in range(n + 1)]\n    for i in range(n + 1):\n        dp[i][0] = i\n    for j in range(m + 1):\n        dp[0][j] = j\n    for i in range(1, n + 1):\n        for j in range(1, m + 1):\n            if s1[i - 1] == s2[j - 1]:\n                dp[i][j] = dp[i - 1][j - 1] + 1\n            else:\n                dp[i][j] = max(dp[i][j - 1], dp[i - 1][j])\n    return dp[n][m]\n\n\ns1 = \"abc\"\ns2 = \"abc\"\nprint(longest_repeating_subseq(s1, s2))"
    },
    {
      "rank": 16,
      "score": 8.0,
      "candidate": "def count_longest_repeated_subsequence(s1: str, s2: str) -> int:\n    \"\"\"\n    Time: O(n*m)\n    Space: O(n*m)\n    \"\"\"\n    if len(s1)!= len(s2):\n        return 0\n\n    dp = [0] * (len(s1) + 1)\n    for i in range(1, len(s1) + 1):\n        for j in range(1, len(s2) + 1):\n            if s1[i - 1] == s2[j - 1]:\n                dp[i] = max(dp[i], dp[i - 1] + 1)\n            else:\n                dp[i] = max(dp[i], dp[i - 1])\n\n    return dp[-1]\n\n\nif __name__ == \"__main__\":\n    assert count_longest_repeated_subsequence(\"aab\", \"aab\") == 3\n    assert count_longest_repeated_subsequence(\"aa\", \"aa\") == 1\n    assert count_longest_repeated_subsequence(\"a\", \"a\") == 0"
    },
    {
      "rank": 17,
      "score": 8.0,
      "candidate": "def longest_repeating_string(s1, s2):\n    if len(s1) == len(s2):\n        return 0\n\n    dp = [[0 for _ in range(len(s1))] for _ in range(len(s2))]\n\n    for i in range(len(s1)):\n        for j in range(len(s2)):\n            if s1[i] == s2[j]:\n                dp[i][j] = 1 + dp[i-1][j-1]\n            else:\n                dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n\n    return dp[-1][-1]\n\n\nif __name__ == \"__main__\":\n    print(longest_repeating_string(\"abc\", \"abc\"))"
    },
    {
      "rank": 18,
      "score": 8.0,
      "candidate": "def longest_repeating_subsequence(string):\n    # Write your code here\n    max_len = 0\n    max_len_2 = 0\n    for i in range(len(string)):\n        for j in range(i+1, len(string)):\n            if string[i] == string[j]:\n                if len(string[i:j+1]) > max_len:\n                    max_len = len(string[i:j+1])\n                    max_len_2 = max_len\n    return max_len\n\n\nprint(longest_repeating_subsequence(\"abcabcbb\"))\nprint(longest_repeating_subsequence(\"abcbb\"))\nprint(longest_repeating_subsequence(\"aabbbbbb\"))\nprint(longest_repeating_subsequence(\"\"))"
    },
    {
      "rank": 19,
      "score": 8.0,
      "candidate": "def find_longest_repeating_substring(str1, str2):\n    max_length = 0\n    max_sub_length = 0\n    max_sub_index = -1\n    for i in range(len(str1)):\n        for j in range(i+1, len(str2)):\n            if str1[i] == str2[j]:\n                if max_length < j-i+1:\n                    max_length = j-i+1\n                    max_sub_length = max_length\n                    max_sub_index = i\n    return max_length, max_sub_length, max_sub_index\n\ndef main():\n    print(find_longest_repeating_substring(\"abcabcbb\", \"abcabcbb\"))\n    print(find_longest_repeating_substring(\"abcabcbb\", \"abcbb\"))\n    print(find_longest_repeating_substring(\"abbbbbb\", \"abbbbbb\"))\n    print(find_longest_repeating_substring(\"abbbbbb\", \"aabbbbbb\"))\n    print(find_longest_repeating_substring(\"abbbbbb\", \"abbbbbbb\"))\n    print(find_longest_repeating_substring(\"abcabcbb\", \"aabbcc\"))\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 20,
      "score": 8.0,
      "candidate": "def longest_repeating_sequence(string):\n    longest_len = 0\n    longest_sequence = []\n    length = len(string)\n    for i in range(length):\n        if string[i] == string[i-1]:\n            longest_len += 1\n        else:\n            if len(longest_sequence) > 0:\n                longest_len = max(longest_len, len(longest_sequence))\n                longest_sequence = []\n            longest_sequence.append(string[i])\n    return longest_len, longest_sequence\n\n\nprint(longest_repeating_sequence(\"ababcba\"))\nprint(longest_repeating_sequence(\"ababcba\"))\nprint(longest_repeating_sequence(\"ababcba\"))\nprint(longest_repeating_sequence(\"ababcba\"))"
    },
    {
      "rank": 21,
      "score": 8.0,
      "candidate": "def count_repeat_subsequences(s1, s2):\n  res = 0\n  n1 = len(s1)\n  n2 = len(s2)\n  max_len = 0\n  for i in range(n1):\n    for j in range(n2):\n      if s1[i] == s2[j]:\n        res += 1\n      else:\n        break\n      max_len = max(max_len, res)\n  return max_len\n\nif __name__ == \"__main__\":\n  assert count_repeat_subsequences(\"abc\", \"abc\") == 2\n  assert count_repeat_subsequences(\"a\", \"a\") == 1\n  assert count_repeat_subsequences(\"a\", \"a\") == 1\n  assert count_repeat_subsequences(\"ab\", \"ab\") == 2\n  assert count_repeat_subsequences(\"a\", \"b\") == 1\n  assert count_repeat_subsequences(\"ab\", \"ab\") == 2"
    },
    {
      "rank": 22,
      "score": 8.0,
      "candidate": "def longest_repeating_subsequence(s1, s2):\n    # write your code here\n    count = 0\n    max_count = 0\n    last_index = 0\n    for index, char in enumerate(s1):\n        if s2[index] == char:\n            count += 1\n            max_count = max(max_count, count)\n        else:\n            count = 0\n            last_index = index\n    return max_count\n\n\nprint(longest_repeating_subsequence(\"abc\", \"abc\"))\nprint(longest_repeating_subsequence(\"abc\", \"ab\"))\nprint(longest_repeating_subsequence(\"ab\", \"abc\"))\nprint(longest_repeating_subsequence(\"ab\", \"a\"))\nprint(longest_repeating_subsequence(\"abc\", \"aba\"))"
    },
    {
      "rank": 23,
      "score": 8.0,
      "candidate": "def longest_repeating_subsequence(s1: str, s2: str) -> int:\n    if len(s1)!= len(s2):\n        return 0\n\n    s1_dict = {}\n    s2_dict = {}\n    longest_length = 0\n\n    for i in range(len(s1)):\n        if s1[i] not in s1_dict:\n            s1_dict[s1[i]] = 1\n        else:\n            s1_dict[s1[i]] += 1\n\n        if s2[i] not in s2_dict:\n            s2_dict[s2[i]] = 1\n        else:\n            s2_dict[s2[i]] += 1\n\n        if s1_dict[s1[i]] == s2_dict[s2[i]]:\n            longest_length = max(longest_length, i - s1_dict[s1[i]])\n\n    return longest_length\n\n\nif __name__ == \"__main__\":\n    print(longest_repeating_subsequence(\"abcabcbb\", \"abcabcbb\"))"
    },
    {
      "rank": 24,
      "score": 8.0,
      "candidate": "def longest_repeating_subsequence(str1, str2):\n    # Fill this in.\n    if not str1 or not str2:\n        return 0\n    m, n = len(str1), len(str2)\n    dp = [[0 for _ in range(n+1)] for _ in range(m+1)]\n\n    for i in range(m+1):\n        for j in range(n+1):\n            if i == 0 or j == 0:\n                dp[i][j] = 1\n            elif str1[i-1] == str2[j-1]:\n                dp[i][j] = dp[i-1][j-1] + 1\n            else:\n                dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n    return dp[m][n]\n\n\nprint(longest_repeating_subsequence(\"abc\", \"abc\"))"
    },
    {
      "rank": 25,
      "score": 8.0,
      "candidate": "def count_longest_repeating_subsequence(string, start, end):\n    if start >= end:\n        return 0\n\n    max_len = 0\n    curr_len = 0\n    curr_char = string[start]\n    curr_index = start\n    for i in range(start + 1, end + 1):\n        if string[i] == curr_char:\n            curr_len += 1\n            if curr_len > max_len:\n                max_len = curr_len\n                curr_index = i\n\n    return max_len + curr_index - curr_len\n\n\nif __name__ == \"__main__\":\n    assert count_longest_repeating_subsequence(\"abc\", 0, len(\"abc\")) == 1\n    assert count_longest_repeating_subsequence(\"abc\", 1, len(\"abc\")) == 2\n    assert count_longest_repeating_subsequence(\"abc\", 2, len(\"abc\")) == 3\n    assert count_longest_repeating_subsequence(\"abc\", 0, len(\"abc\") - 1) == 3\n    assert count_longest_repeating_subsequence(\"abc\", 0, len(\"abc\")) == 2"
    },
    {
      "rank": 26,
      "score": 8.0,
      "candidate": "def longest_repeating_subsequence(s1, s2):\n    if len(s1) == 0 or len(s2) == 0:\n        return 0\n    d = {}\n    max_length = 0\n    for i in range(len(s1)):\n        if s1[i] not in d:\n            d[s1[i]] = i\n        else:\n            j = d[s1[i]]\n            if s2[j] in d:\n                max_length = max(max_length, i - j + 1)\n            else:\n                d[s2[j]] = i\n    return max_length\n\n\nif __name__ == \"__main__\":\n    assert longest_repeating_subsequence(\"abcabcbb\", \"abcabcbb\") == 2\n    assert longest_repeating_subsequence(\"abcabcbb\", \"abc\") == 1\n    assert longest_repeating_subsequence(\"\", \"a\") == 0\n    assert longest_repeating_subsequence(\"\", \"aa\") == 0\n    assert longest_repeating_subsequence(\"aa\", \"aa\") == 0\n    assert longest_repeating_subsequence(\"aa\", \"aaaa\") == 0\n    assert longest_repeating_subsequence(\"aab\", \"ab\") == 2\n    assert longest_repeating_subsequence(\"ab\", \"a\") == 1\n    assert longest_repeating_subsequence(\"ab\", \"abc\") == 1\n    assert longest_repeating_subsequence(\"ab\", \"abcab\") == 2\n    assert longest_repeating_subsequence(\"abc\", \"abcab\") == 3\n    assert longest_repeating_subsequence(\"abc\", \"aab\") == 3"
    },
    {
      "rank": 27,
      "score": 8.0,
      "candidate": "def longest_repeating_string(str1: str, str2: str) -> int:\n    if len(str1)!= len(str2):\n        return 0\n    d = {}\n    for i in range(len(str1)):\n        if str1[i] not in d:\n            d[str1[i]] = 1\n        else:\n            d[str1[i]] += 1\n    max_len = 0\n    for i in range(len(str2)):\n        if str2[i] not in d:\n            d[str2[i]] = 1\n        else:\n            d[str2[i]] += 1\n        if len(d) > max_len:\n            max_len = len(d)\n    return max_len\n\n\nif __name__ == \"__main__\":\n    print(longest_repeating_string(\"abcabcbb\", \"bacb\"))"
    },
    {
      "rank": 28,
      "score": 8.0,
      "candidate": "def longest_repeating_subsequence(string1, string2):\n    \"\"\"\n    :type string1: str\n    :type string2: str\n    :rtype: int\n    \"\"\"\n    length1, length2 = len(string1), len(string2)\n    dp = [[0 for _ in range(length2 + 1)] for _ in range(length1 + 1)]\n    for i in range(length1 + 1):\n        for j in range(length2 + 1):\n            if i == 0 or j == 0:\n                dp[i][j] = 0\n            elif string1[i - 1] == string2[j - 1]:\n                dp[i][j] = dp[i - 1][j - 1] + 1\n            else:\n                dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])\n    return dp[length1][length2]\n\n\nif __name__ == \"__main__\":\n    print(longest_repeating_subsequence(\"abc\", \"abc\"))\n    print(longest_repeating_subsequence(\"abc\", \"abcde\"))"
    },
    {
      "rank": 29,
      "score": 8.0,
      "candidate": "def longest_repeating_sequence(s1, s2):\n    result = 0\n    for i in range(len(s1)):\n        for j in range(i + 1, len(s2)):\n            if s1[i] == s2[j]:\n                result = max(result, j - i + 1)\n    return result\n\n\nif __name__ == \"__main__\":\n    assert longest_repeating_sequence(\"abc\", \"cba\") == 3\n    assert longest_repeating_sequence(\"abc\", \"abc\") == 1\n    assert longest_repeating_sequence(\"abc\", \"abc\") == 0\n    assert longest_repeating_sequence(\"a\", \"a\") == 1\n    assert longest_repeating_sequence(\"aa\", \"aa\") == 2\n    assert longest_repeating_sequence(\"aa\", \"aa\") == 1\n    assert longest_repeating_sequence(\"aa\", \"aa\") == 0"
    },
    {
      "rank": 30,
      "score": 8.0,
      "candidate": "def longest_repeating_substring(s1, s2):\n    if len(s1) < len(s2):\n        return longest_repeating_substring(s2, s1)\n\n    # Initialize the dictionary\n    dictionary = {}\n    longest_repeating_substring_count = 0\n\n    for i in range(len(s1)):\n        if s1[i] in dictionary:\n            dictionary[s1[i]] += 1\n        else:\n            dictionary[s1[i]] = 1\n\n        if s2[i] in dictionary:\n            dictionary[s2[i]] -= 1\n        else:\n            dictionary[s2[i]] = -1\n\n        if dictionary[s2[i]] == 0:\n            longest_repeating_substring_count += 1\n\n    return longest_repeating_substring_count\n\n\nprint(longest_repeating_substring(\"abc\", \"abc\"))\nprint(longest_repeating_substring(\"abc\", \"ab\"))\nprint(longest_repeating_substring(\"abcd\", \"abc\"))\nprint(longest_repeating_substring(\"abcd\", \"ab\"))\nprint(longest_repeating_substring(\"a\", \"a\"))\nprint(longest_repeating_substring(\"a\", \"b\"))\nprint(longest_repeating_substring(\"a\", \"c\"))"
    },
    {
      "rank": 31,
      "score": 8.0,
      "candidate": "def count_repeat_subseq(s1, s2):\n    n = len(s1)\n    m = len(s2)\n    dp = [[0 for _ in range(m + 1)] for _ in range(n + 1)]\n    for i in range(1, n + 1):\n        for j in range(1, m + 1):\n            if s1[i - 1] == s2[j - 1]:\n                dp[i][j] = dp[i - 1][j - 1] + 1\n            else:\n                dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])\n    return dp[n][m]\n\n\nif __name__ == \"__main__\":\n    print(count_repeat_subseq(\"abc\", \"abc\"))"
    },
    {
      "rank": 32,
      "score": 8.0,
      "candidate": "def longest_repeating_substring(s1, s2):\n    # Write your code here\n    max_len = 0\n    max_length = 0\n    max_count = 0\n\n    for i in range(len(s1)):\n        for j in range(len(s2)):\n            if s1[i] == s2[j]:\n                if max_len < j - i + 1:\n                    max_len = j - i + 1\n                    max_length = max_len\n                    max_count = 1\n                else:\n                    max_count += 1\n\n    return max_length, max_count\n\n\nif __name__ == \"__main__\":\n    s1 = \"abc\"\n    s2 = \"abc\"\n    print(longest_repeating_substring(s1, s2))"
    },
    {
      "rank": 33,
      "score": 8.0,
      "candidate": "def count_repeating_subsequences(s):\n    n = len(s)\n    dp = [[0 for i in range(n + 1)] for j in range(n + 1)]\n    dp[0][0] = 1\n\n    for i in range(1, n + 1):\n        for j in range(1, n + 1):\n            if s[i - 1] == s[j - 1]:\n                dp[i][j] = dp[i - 1][j - 1] + 1\n            else:\n                dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])\n\n    return dp[n][n]\n\n\nprint(count_repeating_subsequences(\"abcabcbb\"))"
    },
    {
      "rank": 34,
      "score": 8.0,
      "candidate": "def longest_repeating_sequence(s1, s2):\n    # Write your code here\n    if len(s1)!= len(s2):\n        return 0\n    dict_s1 = {}\n    dict_s2 = {}\n    max_len = 0\n    max_index = 0\n    for i in range(len(s1)):\n        if s1[i] in dict_s1:\n            dict_s1[s1[i]].append(i)\n        else:\n            dict_s1[s1[i]] = [i]\n        if s2[i] in dict_s2:\n            dict_s2[s2[i]].append(i)\n        else:\n            dict_s2[s2[i]] = [i]\n        if len(dict_s1[s1[i]]) > len(dict_s2[s2[i]]):\n            max_len = len(dict_s1[s1[i]])\n            max_index = dict_s1[s1[i]].index(i)\n        else:\n            max_len = len(dict_s2[s2[i]])\n            max_index = dict_s2[s2[i]].index(i)\n    return max_len + max_index\n\n\nif __name__ == '__main__':\n    print(longest_repeating_sequence(\"ab\", \"abc\"))\n    print(longest_repeating_sequence(\"ab\", \"ab\"))\n    print(longest_repeating_sequence(\"abc\", \"abc\"))\n    print(longest_repeating_sequence(\"abc\", \"ab\"))"
    },
    {
      "rank": 35,
      "score": 8.0,
      "candidate": "def longest_repeating_sequence(s1, s2):\n    if s1 == s2:\n        return 1\n    if len(s1) == 1:\n        return 0\n    if len(s2) == 1:\n        return 0\n    if s1[0] == s2[0]:\n        return max(longest_repeating_sequence(s1[1:], s2), longest_repeating_sequence(s1, s2[1:]))\n    else:\n        return max(longest_repeating_sequence(s1, s2[1:]), longest_repeating_sequence(s1[:-1], s2))\n\n\nif __name__ == \"__main__\":\n    print(longest_repeating_sequence(\"abcabc\", \"abcabc\"))\n    print(longest_repeating_sequence(\"a\", \"a\"))\n    print(longest_repeating_sequence(\"a\", \"aa\"))\n    print(longest_repeating_sequence(\"ab\", \"ab\"))\n    print(longest_repeating_sequence(\"\", \"a\"))\n    print(longest_repeating_sequence(\"ab\", \"\"))"
    },
    {
      "rank": 36,
      "score": 8.0,
      "candidate": "def count_repeat_sub_seq(str1, str2):\n    if len(str1) > len(str2):\n        return count_repeat_sub_seq(str2, str1)\n\n    count = 0\n    start_index = -1\n    end_index = -1\n\n    for i in range(len(str1)):\n        if str1[i] == str2[i]:\n            start_index = i\n            end_index = i\n            count += 1\n\n        if start_index == -1:\n            start_index = i\n\n        if end_index == -1:\n            end_index = i\n\n    return count\n\nprint(count_repeat_sub_seq('abc', 'abc'))\nprint(count_repeat_sub_seq('abc', 'abc'))\nprint(count_repeat_sub_seq('abc', 'acb'))"
    },
    {
      "rank": 37,
      "score": 8.0,
      "candidate": "def longest_repeating_subseq(str1, str2):\n    count = 0\n    i = 0\n    j = 0\n    while i < len(str1) and j < len(str2):\n        if str1[i] == str2[j]:\n            count += 1\n            i += 1\n            j += 1\n        else:\n            i += 1\n            j += 1\n    return count\n\n\nif __name__ == '__main__':\n    assert longest_repeating_subseq(\"abc\", \"abc\") == 1\n    assert longest_repeating_subseq(\"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"
    },
    {
      "rank": 38,
      "score": 8.0,
      "candidate": "def longest_repeating_sequence(s1, s2):\n    if len(s1)!= len(s2):\n        return 0\n    \n    dict = {}\n    for i in range(len(s1)):\n        if s1[i] in dict:\n            dict[s1[i]]+=1\n        else:\n            dict[s1[i]]=1\n    max_len = 0\n    for i in range(len(s2)):\n        if s2[i] in dict:\n            if dict[s2[i]]>1:\n                max_len = max(max_len,i-dict[s2[i]]+1)\n    return max_len\n\n\n\nif __name__ == '__main__':\n    s1 = 'abcabcbb'\n    s2 = 'abcabcbb'\n    print(longest_repeating_sequence(s1, s2))"
    },
    {
      "rank": 39,
      "score": 8.0,
      "candidate": "def longest_repeating_subsequence(str1, str2):\n    if len(str1) == len(str2):\n        return 1\n\n    def check_substring(str1, str2, i, j):\n        if i < 0 or j < 0:\n            return False\n\n        if str1[i]!= str2[j]:\n            return False\n\n        return check_substring(str1, str2, i - 1, j - 1)\n\n    i = 0\n    j = 0\n    max_len = 0\n    while i < len(str1) and j < len(str2):\n        if check_substring(str1, str2, i, j):\n            i += 1\n            j += 1\n        else:\n            max_len = max(max_len, j - i + 1)\n            i = 0\n            j = 0\n\n    max_len = max(max_len, j - i + 1)\n\n    return max_len\n\n\nprint(longest_repeating_subsequence(\"abcbba\", \"abcabcba\"))"
    },
    {
      "rank": 40,
      "score": 8.0,
      "candidate": "def count_repeating_subsequences(s1, s2):\n    if len(s1)!= len(s2):\n        return 0\n\n    max_len = 0\n    prev_len = 0\n    prev_char = None\n\n    for i in range(len(s1)):\n        if s1[i] == s2[i]:\n            if prev_len == 0:\n                prev_len = 1\n            else:\n                prev_len += 1\n        else:\n            if prev_len > 0:\n                max_len = max(max_len, prev_len)\n            prev_len = 1\n            prev_char = s1[i]\n\n    return max_len\n\n\ndef main():\n    s1 = \"abcabcbb\"\n    s2 = \"abcabcbb\"\n    print(count_repeating_subsequences(s1, s2))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 41,
      "score": 8.0,
      "candidate": "def longest_repeating_subsequence(s1, s2):\n    # write your code here\n    max_count = 0\n    prev_char = \"\"\n    count = 0\n    for i in range(len(s1)):\n        if s1[i]!= prev_char:\n            count += 1\n            prev_char = s1[i]\n        else:\n            max_count = max(max_count, count)\n            count = 1\n    max_count = max(max_count, count)\n    return max_count\n\n\nprint(longest_repeating_subsequence(\"abc\", \"abcd\"))\nprint(longest_repeating_subsequence(\"ab\", \"abc\"))\nprint(longest_repeating_subsequence(\"abc\", \"ab\"))"
    },
    {
      "rank": 42,
      "score": 8.0,
      "candidate": "def longest_repeating_subsequence(s1, s2):\n    m = {}\n    result = 0\n    for i in range(len(s1)):\n        if s1[i] in m:\n            result = max(result, i - m[s1[i]])\n        else:\n            m[s1[i]] = i\n    return result\n\nprint(longest_repeating_subsequence('a', 'a'))"
    },
    {
      "rank": 43,
      "score": 8.0,
      "candidate": "def longest_repeating_subsequence(str1, str2):\n    # Write your code here\n    count = 0\n    dict = {}\n    for i in range(len(str1)):\n        if str1[i] in dict:\n            count += max(dict[str1[i]], dict[str2[i]])\n        else:\n            dict[str1[i]] = i\n    return count\n\nprint(longest_repeating_subsequence('abc', 'bac'))"
    },
    {
      "rank": 44,
      "score": 8.0,
      "candidate": "def longest_repeating_subsequence(s1, s2):\n    if len(s1) > len(s2):\n        return len(s1)\n    if len(s2) > len(s1):\n        return len(s2)\n    dp = [0] * (len(s1) + 1)\n    dp[0] = 1\n    for i in range(1, len(s1) + 1):\n        for j in range(1, len(s2) + 1):\n            if s1[i - 1] == s2[j - 1]:\n                dp[i] = max(dp[i], dp[i - 1] + 1)\n            else:\n                dp[i] = max(dp[i], dp[i - 1])\n    return dp[-1]\n\n\nprint(longest_repeating_subsequence(\"abcabcbb\", \"abcabcbb\"))"
    },
    {
      "rank": 45,
      "score": 8.0,
      "candidate": "def count_repeating_subsequences(string, char_to_index):\n    \"\"\"\n    :type string: str\n    :type char_to_index: dict[str, int]\n    :rtype: int\n    \"\"\"\n\n    if len(string) == 0:\n        return 0\n\n    if len(string) == 1:\n        return 1\n\n    if string[0] == string[-1]:\n        return count_repeating_subsequences(string[1:-1], char_to_index)\n\n    max_length = 0\n    max_index = 0\n    for i in range(len(string)):\n        for j in range(i + 1, len(string)):\n            if string[i] == string[j]:\n                if char_to_index[string[i]] == char_to_index[string[j]]:\n                    max_length = max(max_length, count_repeating_subsequences(string[i + 1:j], char_to_index))\n                else:\n                    max_index = max(max_index, char_to_index[string[i]])\n\n    return max_length + max_index\n\n\nif __name__ == '__main__':\n    print(count_repeating_subsequences('abcabc', {'a': 0, 'b': 1, 'c': 2, 'd': 1}))\n    print(count_repeating_subsequences('abcabc', {'a': 0, 'b': 1, 'c': 2, 'd': 1}))\n    print(count_repeating_subsequences('abcabc', {'a': 0, 'b': 1, 'c': 2, 'd': 0}))\n    print(count_repeating_subsequences('abcabc', {'a': 0, 'b': 1, 'c': 2, 'd': 2}))\n    print(count_repeating_subsequences('abcabc', {'a': 0, 'b': 1, 'c': 2, 'd': 3}))"
    },
    {
      "rank": 46,
      "score": 8.0,
      "candidate": "def find_longest_repeating_subsequence(s):\n    if not s:\n        return 0\n    if len(s) == 1:\n        return 1\n    prev_char = s[0]\n    prev_count = 0\n    prev_len = 1\n    count = 1\n    for i in range(1, len(s)):\n        if s[i] == prev_char:\n            prev_count += 1\n        else:\n            if prev_count > prev_len:\n                count = prev_count\n                prev_len = prev_count\n                prev_char = s[i]\n            else:\n                prev_count = 1\n    return count\n\n\nif __name__ == \"__main__\":\n    print(find_longest_repeating_subsequence(\"abab\"))\n    print(find_longest_repeating_subsequence(\"abababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababab"
    },
    {
      "rank": 47,
      "score": 8.0,
      "candidate": "def longest_repeating_subsequence(s1, s2):\n    s1_dict = {}\n    s2_dict = {}\n    max_len = 0\n    for i in range(len(s1)):\n        if s1[i] not in s1_dict:\n            s1_dict[s1[i]] = 1\n        else:\n            s1_dict[s1[i]] += 1\n\n    for i in range(len(s2)):\n        if s2[i] not in s2_dict:\n            s2_dict[s2[i]] = 1\n        else:\n            s2_dict[s2[i]] += 1\n\n        if len(s1_dict) > len(s2_dict):\n            max_len = i\n\n    return max_len\n\n\nprint(longest_repeating_subsequence(\"abc\", \"abc\"))\nprint(longest_repeating_subsequence(\"abc\", \"cba\"))\nprint(longest_repeating_subsequence(\"abc\", \"cba\"))\nprint(longest_repeating_subsequence(\"abc\", \"abc\"))"
    },
    {
      "rank": 48,
      "score": 8.0,
      "candidate": "def longest_repeating_subsequence(s1, s2):\n    # write your code here\n    if len(s1) == 0 or len(s2) == 0:\n        return 0\n\n    max_len = 0\n    curr_len = 0\n\n    for i in range(len(s1)):\n        if s1[i] == s2[0]:\n            curr_len += 1\n            if curr_len > max_len:\n                max_len = curr_len\n        else:\n            curr_len = 1\n\n    return max_len\n\n\nprint(longest_repeating_subsequence(\"abc\", \"abc\"))\nprint(longest_repeating_subsequence(\"abc\", \"abc\"))\nprint(longest_repeating_subsequence(\"abc\", \"abc\"))\nprint(longest_repeating_subsequence(\"abc\", \"abcc\"))\nprint(longest_repeating_subsequence(\"abc\", \"abc\"))"
    },
    {
      "rank": 49,
      "score": 8.0,
      "candidate": "def longest_repeating_subsequence(str1, str2):\n    return _find_length(str1, str2, 1, len(str1), len(str2))\n\n\ndef _find_length(str1, str2, pos1, pos2, max_length):\n    if pos1 == pos2:\n        return max_length\n    elif pos1 < pos2:\n        return _find_length(str1, str2, pos1 + 1, pos2, max_length)\n    else:\n        return _find_length(str1, str2, pos1, pos2 + 1, max_length)\n\n\nif __name__ == \"__main__\":\n    assert longest_repeating_subsequence(\"abcabcbb\", \"bcbb\") == 3"
    },
    {
      "rank": 50,
      "score": 8.0,
      "candidate": "def longest_repeating_subsequence(s1, s2):\n    if s1 == s2:\n        return 1\n\n    max_count = 0\n    max_substring = \"\"\n    for i in range(len(s1)):\n        if s1[i] == s2[i]:\n            if len(max_substring) > 0:\n                max_count = max(max_count, longest_repeating_subsequence(s1[i+1:], s2[i+1:]))\n            max_substring = s1[i]\n        else:\n            max_count += 1\n\n    return max_count\n\n\nif __name__ == \"__main__\":\n    s1 = \"aab\"\n    s2 = \"aab\"\n    print(longest_repeating_subsequence(s1, s2))"
    },
    {
      "rank": 51,
      "score": 8.0,
      "candidate": "def longest_repeating_subsequence(string1, string2):\n    \"\"\"\n    Time: O(n^2)\n    Space: O(n^2)\n    :param string1:\n    :param string2:\n    :return:\n    \"\"\"\n    if len(string1) == 0 or len(string2) == 0:\n        return 0\n\n    hash = {}\n    max_length = 0\n\n    for i in range(len(string1)):\n        if string1[i] not in hash:\n            hash[string1[i]] = 1\n        else:\n            hash[string1[i]] += 1\n\n        if string2[i] not in hash:\n            hash[string2[i]] = 1\n        else:\n            hash[string2[i]] += 1\n\n        if hash[string1[i]] > hash[string2[i]]:\n            max_length = i\n\n    return max_length\n\n\nif __name__ == \"__main__\":\n    print(longest_repeating_subsequence(\"aaaa\", \"aaa\"))"
    },
    {
      "rank": 52,
      "score": 8.0,
      "candidate": "def count_repeating_subsequences(s1, s2):\n    n = len(s1)\n    m = len(s2)\n    res = 0\n    dp = [[0 for _ in range(m + 1)] for _ in range(n + 1)]\n    dp[0][0] = 1\n    for i in range(n + 1):\n        dp[i][0] = 1\n    for i in range(1, m + 1):\n        for j in range(1, n + 1):\n            if s1[i - 1] == s2[j - 1]:\n                dp[i][j] = dp[i - 1][j - 1] + 1\n            else:\n                dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])\n            res = max(res, dp[i][j])\n    return res\n\n\nprint(count_repeating_subsequences(\"abc\", \"aac\"))\nprint(count_repeating_subsequences(\"aac\", \"abc\"))\nprint(count_repeating_subsequences(\"abc\", \"abcd\"))"
    },
    {
      "rank": 53,
      "score": 8.0,
      "candidate": "def longest_repeating_substring(str1, str2):\n    count = 0\n    longest_substring = 0\n    for i in range(len(str1)):\n        if str1[i] == str2[i]:\n            count += 1\n            if count > longest_substring:\n                longest_substring = count\n    return longest_substring\n\nprint(longest_repeating_substring(\"abc\", \"abc\"))\nprint(longest_repeating_substring(\"abc\", \"abc\"))\nprint(longest_repeating_substring(\"abc\", \"ab\"))\nprint(longest_repeating_substring(\"ab\", \"abc\"))\nprint(longest_repeating_substring(\"ab\", \"ab\"))"
    },
    {
      "rank": 54,
      "score": 8.0,
      "candidate": "def count_longest_repeating_subsequence(s1, s2):\n    if len(s1)!= len(s2):\n        return 0\n    if len(s1) == 0:\n        return len(s2)\n    if s1[0] == s2[0]:\n        return count_longest_repeating_subsequence(s1[1:], s2[1:]) + 1\n    else:\n        return max(count_longest_repeating_subsequence(s1[1:], s2), count_longest_repeating_subsequence(s1, s2[1:]))\n\n\nif __name__ == \"__main__\":\n    print(count_longest_repeating_subsequence(\"abc\", \"abc\"))"
    },
    {
      "rank": 55,
      "score": 8.0,
      "candidate": "def count_repeat(str1, str2):\n    if len(str1) == 0 or len(str2) == 0:\n        return 0\n    # initialize hashmap\n    hashmap = {}\n    # initialize count\n    count = 0\n    # for each character\n    for i in range(len(str1)):\n        if str1[i] in hashmap:\n            # if the character is in the hashmap, increment the count\n            if str2[i] in hashmap:\n                count = max(count, hashmap[str1[i]]+1)\n            # otherwise, add the character to the hashmap\n            else:\n                hashmap[str1[i]] = 1\n        else:\n            # if the character is not in the hashmap, add the character to the hashmap\n            hashmap[str1[i]] = 1\n    return count\n\n\nprint(count_repeat(\"abab\", \"abc\"))\nprint(count_repeat(\"abab\", \"abab\"))\nprint(count_repeat(\"abab\", \"babab\"))"
    },
    {
      "rank": 56,
      "score": 7.0,
      "candidate": "class Solution:\n    def findLongestSubsequence(self, s: str, p: str) -> int:\n        n = len(s)\n        m = len(p)\n        dp = [[0 for _ in range(m + 1)] for _ in range(n + 1)]\n\n        for i in range(n + 1):\n            for j in range(m + 1):\n                if i == 0 or j == 0:\n                    dp[i][j] = 0\n                elif s[i - 1] == p[j - 1]:\n                    dp[i][j] = dp[i - 1][j - 1] + 1\n                else:\n                    dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])\n\n        return dp[n][m]\n\n\ns = Solution()\nprint(s.findLongestSubsequence(\"abcabcbb\", \"bcbb\"))"
    },
    {
      "rank": 57,
      "score": 1.0,
      "candidate": "class Solution(object):\n    def longestRepeatingSubsequence(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        if len(s) <= 1:\n            return len(s)\n        d = {}\n        for i in range(1, len(s)):\n            if s[i] not in d:\n                d[s[i]] = 1\n            else:\n                d[s[i]] += 1\n        max_len = 0\n        for k, v in d.items():\n            if v > max_len:\n                max_len = v\n        return max_len"
    },
    {
      "rank": 58,
      "score": 1.0,
      "candidate": "class Solution:\n    def longestRepeatingSubsequence(self, s: str) -> int:\n        s = list(s)\n        if len(s) < 2:\n            return 0\n        s.sort()\n        c = [0] * (len(s) + 1)\n        c[0] = 1\n        for i in range(1, len(s)):\n            if s[i - 1] == s[i]:\n                c[i] = c[i - 1] + 1\n            else:\n                c[i] = 1\n        res = 0\n        for i in range(1, len(s)):\n            for j in range(i, len(s)):\n                if s[i] == s[j]:\n                    res = max(res, c[i] + c[j])\n        return res"
    },
    {
      "rank": 59,
      "score": 1.0,
      "candidate": "def count_longest_repeated_subsequence(s1: str, s2: str) -> int:\n    \"\"\"\n    :type s1: str\n    :type s2: str\n    :rtype: int\n    \"\"\"\n    if len(s1) == 0 or len(s2) == 0:\n        return 0\n\n    if s1[0] == s2[0]:\n        return count_longest_repeated_subsequence(s1[1:], s2[1:]) + 1\n    else:\n        return max(count_longest_repeated_subsequence(s1[1:], s2), count_longest_repeated_subsequence(s1, s2[1:]))\n\n\nif __name__ == \"__main__\":\n    assert count_longest_repeated_subsequence(\"ab\", \"ba\") == 1\n    assert count_longest_repeated_subsequence(\"ab\", \"ab\") == 1\n    assert count_longest_repeated_subsequence(\"a\", \"a\") == 1\n    assert count_longest_repeated_subsequence(\"a\", \"aa\") == 2\n    assert count_longest_repeated_subsequence(\"aa\", \"aa\") == 3\n    assert count_longest_repeated_subsequence(\"aa\", \"ab\") == 3\n    assert count_longest_repeated_subsequence(\"aa\", \"aa\") == 1"
    },
    {
      "rank": 60,
      "score": 1.0,
      "candidate": "def count_repeating_subsequences(string):\n    longest_subsequence_length = 0\n    longest_subsequence = \"\"\n    counter = {}\n    for i in range(len(string)):\n        if string[i] not in counter:\n            counter[string[i]] = 1\n        else:\n            counter[string[i]] += 1\n        if string[i] in counter and counter[string[i]] > longest_subsequence_length:\n            longest_subsequence_length = counter[string[i]]\n            longest_subsequence = string[i]\n    return longest_subsequence_length, longest_subsequence\n\n\nprint(count_repeating_subsequences(\"ababab\"))"
    },
    {
      "rank": 61,
      "score": 1.0,
      "candidate": "class Solution:\n    def longestRepeatingSubsequence(self, s: str) -> int:\n        res = 0\n        dp = [1 for _ in range(len(s))]\n        for i in range(1, len(s)):\n            for j in range(i):\n                if s[i] == s[j]:\n                    dp[i] = max(dp[i], dp[j] + 1)\n            res = max(res, dp[i])\n        return res\n\n\ns = Solution()\nprint(s.longestRepeatingSubsequence(\"abcabcbb\"))"
    },
    {
      "rank": 62,
      "score": 1.0,
      "candidate": "class Solution:\n    def lengthOfLongestRepeatingSubseq(self, s: str, t: str) -> int:\n        if s is None or t is None:\n            return 0\n        d = {}\n        max_len = 0\n        for i, c in enumerate(s):\n            if c in d:\n                d[c] += 1\n            else:\n                d[c] = 1\n            if t[i] in d:\n                max_len = max(max_len, d[t[i]] + 1)\n            else:\n                d[t[i]] = 1\n        return max_len\n\nif __name__ == '__main__':\n    s = None\n    t = None\n    s = \"aabcc\"\n    t = \"abc\"\n    sol = Solution()\n    ans = sol.lengthOfLongestRepeatingSubseq(s, t)\n    print(ans)"
    },
    {
      "rank": 63,
      "score": 1.0,
      "candidate": "def longest_repeating_subsequence(string, n):\n    count = 0\n    for i in range(n):\n        for j in range(n):\n            if string[i] == string[j]:\n                count += 1\n    return count\n\n\nif __name__ == \"__main__\":\n    assert longest_repeating_subsequence(\"abcabcbb\", 3) == 1\n    assert longest_repeating_subsequence(\"abcabcbb\", 4) == 1\n    assert longest_repeating_subsequence(\"abab\", 3) == 1\n    assert longest_repeating_subsequence(\"abab\", 4) == 1"
    },
    {
      "rank": 64,
      "score": 1.0,
      "candidate": "def longest_repeating_subsequence(string):\n    if len(string) == 0:\n        return 0\n\n    longest_len = 0\n    longest_len_dict = {}\n    for i in range(len(string)):\n        if string[i] in longest_len_dict:\n            longest_len = max(longest_len, longest_len_dict[string[i]])\n        else:\n            longest_len_dict[string[i]] = i\n\n    return longest_len\n\n\nif __name__ == \"__main__\":\n    print(longest_repeating_subsequence(\"abcabcbb\"))"
    },
    {
      "rank": 65,
      "score": 1.0,
      "candidate": "def count_longest_repeating_subsequence(s):\n    if len(s) < 2:\n        return 0\n    dp = [[0 for _ in range(len(s))] for _ in range(len(s))]\n    dp[0][0] = 1\n    for i in range(1, len(s)):\n        for j in range(0, i):\n            if s[j] == s[i]:\n                dp[i][j] = dp[i-1][j] + 1\n            else:\n                dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n    return max(dp[len(s) - 1][len(s) - 1])\n\n\ns = \"abcd\"\nprint(count_longest_repeating_subsequence(s))"
    },
    {
      "rank": 66,
      "score": 1.0,
      "candidate": "def longest_repeating_subseq(string: str) -> int:\n    # Fill this in.\n    if len(string) < 2:\n        return 0\n\n    max_count = 0\n    prev_char = \"\"\n    prev_index = 0\n    for i in range(len(string)):\n        if string[i] == prev_char:\n            prev_index += 1\n\n        if prev_index > 0:\n            prev_count = i - prev_index\n        max_count = max(max_count, prev_count)\n\n        prev_char = string[i]\n        prev_index = i\n\n    return max_count\n\n\nprint(longest_repeating_subseq(\"abc\"))"
    },
    {
      "rank": 67,
      "score": 1.0,
      "candidate": "def longest_repeating_subsequence(s1, s2):\n    if s1 == s2:\n        return 0\n    if len(s1) < len(s2):\n        return max(longest_repeating_subsequence(s2, s1), longest_repeating_subsequence(s1, s2))\n    if len(s2) < len(s1):\n        return max(longest_repeating_subsequence(s1, s2), longest_repeating_subsequence(s2, s1))\n    return max(longest_repeating_subsequence(s1, s2), longest_repeating_subsequence(s2, s1)) + 1\n\n\nif __name__ == '__main__':\n    assert longest_repeating_subsequence(\"abcabcbb\", \"abc\") == 1\n    assert longest_repeating_subsequence(\"abcabcbb\", \"abc\") == 2\n    assert longest_repeating_subsequence(\"abc\", \"abc\") == 1\n    assert longest_repeating_subsequence(\"abc\", \"abcd\") == 2\n    assert longest_repeating_subsequence(\"abc\", \"abcdab\") == 3\n    assert longest_repeating_subsequence(\"abc\", \"abcabc\") == 3"
    },
    {
      "rank": 68,
      "score": 1.0,
      "candidate": "def longest_repeating_subseq(string, n):\n    \"\"\"\n    :type string: str\n    :type n: int\n    :rtype: int\n    \"\"\"\n    if n == 1:\n        return 1\n\n    string = list(string)\n    string.sort()\n    max_count = 0\n    max_len = 1\n    index = 0\n    for i in range(1, n):\n        if string[i] == string[i - 1]:\n            index += 1\n            if index > max_count:\n                max_count = index\n                max_len = i - index + 1\n\n    return max_len\n\n\nif __name__ == \"__main__\":\n    assert longest_repeating_subseq(\"abcabcbb\", 2) == 3\n    assert longest_repeating_subseq(\"abcabcbb\", 3) == 3\n    assert longest_repeating_subseq(\"abcd\", 4) == 3\n    assert longest_repeating_subseq(\"abcd\", 5) == 3\n    assert longest_repeating_subseq(\"abcd\", 6) == 3\n    assert longest_repeating_subseq(\"abcd\", 7) == 3\n    assert longest_repeating_subseq(\"abcd\", 8) == 2\n    assert longest_repeating_subseq(\"abcd\", 9) == 2\n    assert longest_repeating_subseq(\"abc\", 2) == 3\n    assert longest_repeating_subseq(\"abc\", 3) == 3\n    assert longest_repeating_subseq(\"abc\", 4) == 3"
    },
    {
      "rank": 69,
      "score": 1.0,
      "candidate": "def longest_repeating_substring(s1: str, s2: str) -> int:\n    if len(s1) == 0 or len(s2) == 0:\n        return 0\n    if s1[0] == s2[0]:\n        return 1 + longest_repeating_substring(s1[1:], s2[1:])\n    else:\n        return max(longest_repeating_substring(s1, s2[1:]), longest_repeating_substring(s1, s2[:-1]))\n\n\nprint(longest_repeating_substring(\"abcabcbb\", \"abcabcbb\"))\nprint(longest_repeating_substring(\"abcabcbb\", \"abccbbb\"))\nprint(longest_repeating_substring(\"abcabcbb\", \"abcccab\"))"
    },
    {
      "rank": 70,
      "score": 1.0,
      "candidate": "def longest_repeating_string(s1, s2):\n    # Write your code here\n    n1, n2 = len(s1), len(s2)\n    res = 0\n    dp = [[0 for _ in range(n2+1)] for _ in range(n1+1)]\n    for i in range(n1+1):\n        for j in range(n2+1):\n            if i == 0 or j == 0:\n                dp[i][j] = 0\n            elif s1[i-1] == s2[j-1]:\n                dp[i][j] = dp[i-1][j-1] + 1\n            else:\n                dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n            res = max(res, dp[i][j])\n    return res\n\n\nprint(longest_repeating_string(\"abc\", \"bac\"))"
    },
    {
      "rank": 71,
      "score": 1.0,
      "candidate": "def count_repeating_substring(s1, s2):\n    # Write your code here\n    result = 0\n    char_map = {}\n    char_count = 0\n    for i in range(len(s1)):\n        if s1[i] in char_map:\n            char_count += 1\n        char_map[s1[i]] = char_count\n        if s2[i] in char_map:\n            char_count = max(char_count, char_map[s2[i]])\n        result = max(result, char_count)\n    return result\n\nprint(count_repeating_substring(\"abc\", \"abc\"))"
    },
    {
      "rank": 72,
      "score": 1.0,
      "candidate": "class Solution:\n    def findLongestRepeatingSubsequence(self, s: str) -> int:\n        if len(s) < 2:\n            return 0\n\n        if s[0] == s[-1]:\n            return 1 + self.findLongestRepeatingSubsequence(s[1:-1])\n\n        longest_subseq = 0\n        for i in range(1, len(s)):\n            if s[i] == s[i-1]:\n                longest_subseq = max(longest_subseq, 1 + self.findLongestRepeatingSubsequence(s[i:]))\n\n        return longest_subseq\n\n\nif __name__ == \"__main__\":\n    s = \"abcabcbb\"\n    assert Solution().findLongestRepeatingSubsequence(s) == 2"
    },
    {
      "rank": 73,
      "score": 1.0,
      "candidate": "def longest_repeating_subsequence(s1, s2):\n    # write your code here\n    if s1 == s2:\n        return len(s1)\n\n    max_count = 0\n    for i in range(len(s1)):\n        for j in range(i, len(s2)):\n            if s1[i] == s2[j]:\n                if max_count < len(s1[i:j+1]):\n                    max_count = len(s1[i:j+1])\n    return max_count\n\n\nprint(longest_repeating_subsequence(\"abcabcbb\", \"babbbbbb\"))"
    },
    {
      "rank": 74,
      "score": 1.0,
      "candidate": "def longest_repeating_subsequence(s1, s2):\n    if len(s1)!= len(s2):\n        return 0\n    result = 0\n    seen = {}\n    for i in range(len(s1)):\n        if s1[i] not in seen:\n            seen[s1[i]] = 1\n        else:\n            seen[s1[i]] += 1\n        if s2[i] not in seen:\n            seen[s2[i]] = 1\n        else:\n            seen[s2[i]] += 1\n        result = max(result, seen[s1[i]])\n    return result\n\n\nprint(longest_repeating_subsequence(\"abcabcbb\", \"cbba\"))\nprint(longest_repeating_subsequence(\"abcabcbb\", \"a\"))\nprint(longest_repeating_subsequence(\"abcabcbb\", \"cbba\"))\nprint(longest_repeating_subsequence(\"abcabcbb\", \"c\"))\nprint(longest_repeating_subsequence(\"abcabcbb\", \"abc\"))\nprint(longest_repeating_subsequence(\"abcabcbb\", \"ab\"))\nprint(longest_repeating_subsequence(\"abcabcbb\", \"aab\"))\nprint(longest_repeating_subsequence(\"abcabcbb\", \"aaba\"))\nprint(longest_repeating_subsequence(\"abcabcbb\", \"aabb\"))\nprint(longest_repeating_subsequence(\"abcabcbb\", \"abab\"))\nprint(longest_repeating_subsequence(\"abcabcbb\", \"ababa\"))\nprint(longest_repeating_subsequence(\"abcabcbb\", \"aabab\"))\nprint(longest_repeating_subsequence(\"abcabcbb\", \"aabbab\"))\nprint(longest_repeating_subsequence(\"abcabcbb\", \"abababab\"))\nprint(longest_repeating_subsequence(\"abcabcbb\", \"abababab\"))\nprint(longest_repeating_subsequence(\"abcabcbb\", \"ababab"
    },
    {
      "rank": 75,
      "score": 1.0,
      "candidate": "class Solution:\n    def findLengthOfLongestSubsequence(self, s: str) -> int:\n        memo = {}\n        return self.findLengthOfLongestSubsequenceHelper(s, 0, 0, memo)\n\n    def findLengthOfLongestSubsequenceHelper(self, s: str, start: int, end: int, memo: dict) -> int:\n        if (start, end) in memo:\n            return memo[(start, end)]\n        if start == end:\n            memo[(start, end)] = 1\n            return 1\n        if s[start] == s[end]:\n            memo[(start, end)] = 1 + self.findLengthOfLongestSubsequenceHelper(s, start + 1, end - 1, memo)\n        return memo[(start, end)]\n\n\ns = Solution()\nprint(s.findLengthOfLongestSubsequence(\"abcbb\"))\nprint(s.findLengthOfLongestSubsequence(\"babab\"))\nprint(s.findLengthOfLongestSubsequence(\"a\"))"
    },
    {
      "rank": 76,
      "score": 1.0,
      "candidate": "def longest_repeating_substring(s1, s2):\n    # Write your code here\n    dic = {}\n    longest = 0\n    for i in range(len(s1)):\n        if s1[i] in dic.keys():\n            dic[s1[i]]+=1\n        else:\n            dic[s1[i]] = 1\n\n    for j in range(len(s2)):\n        if s2[j] in dic.keys():\n            if dic[s2[j]] > longest:\n                longest = dic[s2[j]]\n\n    return longest\n\n\nprint(longest_repeating_substring(\"abc\", \"cba\"))"
    },
    {
      "rank": 77,
      "score": 1.0,
      "candidate": "def longest_repeating_subsequence(s):\n    if len(s) <= 1:\n        return len(s)\n    if len(s) == 2:\n        return max(len(s) - 1, len(s) - 2)\n    if s[0] == s[1]:\n        return max(longest_repeating_subsequence(s[2:]), longest_repeating_subsequence(s[:-1]))\n    else:\n        return max(longest_repeating_subsequence(s[1:]), longest_repeating_subsequence(s[:-1])) + 1\n\n\nif __name__ == \"__main__\":\n    assert longest_repeating_subsequence(\"abcabcbb\") == 3\n    assert longest_repeating_subsequence(\"abab\") == 3\n    assert longest_repeating_subsequence(\"abc\") == 1"
    },
    {
      "rank": 78,
      "score": 1.0,
      "candidate": "class Solution:\n    def longestRepeatingSubsequence(self, s: str) -> int:\n        # Write your code here\n        d = {}\n        res = 0\n        for i in range(len(s)):\n            if s[i] in d:\n                res = max(res, i - d[s[i]])\n            else:\n                d[s[i]] = i\n        return res\n\ns = Solution()\nprint(s.longestRepeatingSubsequence(\"abcabcbb\"))"
    },
    {
      "rank": 79,
      "score": 1.0,
      "candidate": "def longest_repeating_substring(string1, string2):\n    if len(string1) == 0:\n        return 0\n    if len(string2) == 0:\n        return 0\n    if string1[0] == string2[0]:\n        return longest_repeating_substring(string1[1:], string2[1:])\n    return max(longest_repeating_substring(string1, string2[1:]), longest_repeating_substring(string1[1:], string2)) + 1\n\n\nif __name__ == \"__main__\":\n    assert longest_repeating_substring(\"\", \"\") == 0\n    assert longest_repeating_substring(\"ab\", \"ab\") == 1\n    assert longest_repeating_substring(\"ab\", \"ab\") == 2\n    assert longest_repeating_substring(\"ab\", \"a\") == 1\n    assert longest_repeating_substring(\"abc\", \"abc\") == 2\n    assert longest_repeating_substring(\"ab\", \"abc\") == 3\n    assert longest_repeating_substring(\"ab\", \"acb\") == 2\n    assert longest_repeating_substring(\"ab\", \"ac\") == 1\n    assert longest_repeating_substring(\"a\", \"a\") == 1\n    assert longest_repeating_substring(\"aa\", \"aa\") == 0\n    assert longest_repeating_substring(\"aa\", \"b\") == 0\n    assert longest_repeating_substring(\"a\", \"b\") == 0\n    assert longest_repeating_substring(\"aa\", \"a\") == 1\n    assert longest_repeating_substring(\"a\", \"b\") == 1\n    assert longest_repeating_substring(\"ab\", \"c\") == 2\n    assert longest_repeating_substring(\"ab\", \"c\") == 2\n    assert longest_repeating_substring(\"ab\", \"c\") == 3\n    assert longest_repeating_substring(\"ab\", \"ac\") == 2\n    assert longest_repeating_substring(\"ab\", \"ac\") == 3\n    assert longest_repeating_substring(\"ab\", \"ab\") == 4"
    },
    {
      "rank": 80,
      "score": 1.0,
      "candidate": "class Solution:\n    def find_longest_repeating_subsequence(self, s1: str, s2: str) -> int:\n        if s1 == s2:\n            return 1\n        if s1 == s1[::-1]:\n            return len(s1)\n        if s2 == s2[::-1]:\n            return len(s2)\n\n        if len(s1) > len(s2):\n            return len(s1)\n        return len(s2)\n\n\ns = Solution()\nprint(s.find_longest_repeating_subsequence(\"abc\", \"abc\"))"
    },
    {
      "rank": 81,
      "score": 1.0,
      "candidate": "def longest_repeating_subsequence(s1: str, s2: str) -> int:\n    # Time Complexity: O(m + n)\n    # Space Complexity: O(m + n)\n    # m and n are the length of the two strings, respectively.\n\n    # Start with empty string.\n    max_len = 0\n    max_seq = \"\"\n\n    # Loop over the two strings.\n    for i in range(len(s1)):\n        # Check if the current string is the same.\n        if s1[i] == s2[i]:\n            # If so, increment the length.\n            max_len = max(max_len, i + 1)\n            # Get the current sequence.\n            seq = s1[i:]\n        else:\n            # Otherwise, reset the current sequence and increment length.\n            max_len = 0\n            seq = s1[i:]\n\n        # Update the maximum sequence length.\n        max_seq = max(max_seq, seq)\n\n    return max_len\n\n\ndef main():\n    s1 = \"abc\"\n    s2 = \"bac\"\n    assert longest_repeating_subsequence(s1, s2) == 2\n\n    s1 = \"abc\"\n    s2 = \"bac\"\n    assert longest_repeating_subsequence(s1, s2) == 1\n\n    s1 = \"abcd\"\n    s2 = \"acb\"\n    assert longest_repeating_subsequence(s1, s2) == 2\n\n    s1 = \"abcd\"\n    s2 = \"acb\"\n    assert longest_repeating_subsequence(s1, s2) == 1\n\n    s1 = \"aa\"\n    s2 = \"ab\"\n    assert longest_repeating_subsequence(s1, s2) == 1\n\n    s1 = \"abcd\"\n    s2 = \"abcd\"\n    assert longest_repeating_subsequence(s1, s2) == 1\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 82,
      "score": 1.0,
      "candidate": "def longest_repeating_subsequence(s):\n    # write your code here\n    if len(s) == 0:\n        return 0\n    if len(s) == 1:\n        return 1\n    if len(s) == 2:\n        if s[0] == s[1]:\n            return 1\n        else:\n            return 0\n    if s[0] == s[1]:\n        return max(longest_repeating_subsequence(s[1:]), longest_repeating_subsequence(s[:-1])) + 1\n    else:\n        return 0\n\nprint(longest_repeating_subsequence(\"bab\"))"
    },
    {
      "rank": 83,
      "score": 1.0,
      "candidate": "def longest_repeating_subsequence(s1, s2):\n    # Write your code here\n    if len(s1) == 0:\n        return 0\n    elif len(s2) == 0:\n        return 0\n    elif len(s1) > len(s2):\n        return len(s1)\n    elif len(s2) > len(s1):\n        return len(s2)\n\n    dp = [[0] * (len(s2) + 1) for _ in range(len(s1) + 1)]\n    for i in range(len(s1) + 1):\n        for j in range(len(s2) + 1):\n            if i == 0 or j == 0:\n                dp[i][j] = 0\n            elif s1[i - 1] == s2[j - 1]:\n                dp[i][j] = dp[i - 1][j - 1] + 1\n            else:\n                dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])\n    return dp[len(s1)][len(s2)]\n\n\ns1 = \"abcabcbb\"\ns2 = \"abc\"\n\nprint(longest_repeating_subsequence(s1, s2))"
    },
    {
      "rank": 84,
      "score": 1.0,
      "candidate": "def longest_repeating_subsequences(s1: str, s2: str) -> int:\n    n = len(s1)\n    if n == 0 or n == 0:\n        return 0\n    if s1 == s2:\n        return 1\n    if len(s1) == 1:\n        return max(longest_repeating_subsequences(s1, s2[1:]), longest_repeating_subsequences(s1, s2[:-1]))\n    if len(s2) == 1:\n        return max(longest_repeating_subsequences(s1, s2[1:]), longest_repeating_subsequences(s1, s2[:-1]))\n    if s1 == s2[::-1]:\n        return max(longest_repeating_subsequences(s1[1:], s2), longest_repeating_subsequences(s1[:-1], s2))\n    return 0\n\n\nif __name__ == \"__main__\":\n    assert longest_repeating_subsequences(\"abc\", \"abc\") == 0\n    assert longest_repeating_subsequences(\"abc\", \"abcc\") == 1\n    assert longest_repeating_subsequences(\"abc\", \"acb\") == 2\n    assert longest_repeating_subsequences(\"abc\", \"cba\") == 3\n    assert longest_repeating_subsequences(\"abc\", \"bca\") == 3\n    assert longest_repeating_subsequences(\"abc\", \"ccc\") == 1"
    },
    {
      "rank": 85,
      "score": 1.0,
      "candidate": "class Solution:\n    def longestRepeatingSubseq(self, s: str) -> int:\n        # Write your code here\n        result = 0\n        dp = [[0] * (len(s) + 1) for _ in range(len(s) + 1)]\n        for i in range(1, len(s) + 1):\n            for j in range(1, len(s) + 1):\n                if s[i - 1] == s[j - 1]:\n                    dp[i][j] = dp[i - 1][j - 1] + 1\n                else:\n                    dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])\n                result = max(result, dp[i][j])\n        return result\n\n\nif __name__ == \"__main__\":\n    assert Solution().longestRepeatingSubseq(\"abab\") == 2\n    assert Solution().longestRepeatingSubseq(\"abc\") == 1\n    assert Solution().longestRepeatingSubseq(\"abcbb\") == 3\n    assert Solution().longestRepeatingSubseq(\"aab\") == 2"
    },
    {
      "rank": 86,
      "score": 1.0,
      "candidate": "def longest_repeating_subsequence(str1, str2):\n    # Write your code here\n    max_len = 0\n    dict_count = {}\n    for i in range(len(str1)):\n        if str1[i] in dict_count:\n            dict_count[str1[i]].append(str2[i])\n        else:\n            dict_count[str1[i]] = [str2[i]]\n        if len(dict_count[str1[i]]) > max_len:\n            max_len = len(dict_count[str1[i]])\n    return max_len\n\n\nstr1 = 'aba'\nstr2 = 'aba'\nprint(longest_repeating_subsequence(str1, str2))"
    },
    {
      "rank": 87,
      "score": 1.0,
      "candidate": "def longest_repeating_substring(s1, s2):\n    n = len(s1)\n    m = len(s2)\n    dp = [[0 for _ in range(m + 1)] for _ in range(n + 1)]\n\n    for i in range(1, n + 1):\n        for j in range(1, m + 1):\n            if s1[i - 1] == s2[j - 1]:\n                dp[i][j] = dp[i - 1][j - 1] + 1\n            else:\n                dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])\n\n    return dp[n][m]\n\n\ndef main():\n    s1 = \"aaaa\"\n    s2 = \"aaa\"\n    print(longest_repeating_substring(s1, s2))\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 88,
      "score": 1.0,
      "candidate": "def longest_repeating_subsequence(s1, s2):\n    if len(s1) == 0 or len(s2) == 0:\n        return 0\n    d = {}\n    res = 0\n    for i in range(len(s1)):\n        if s1[i] in d:\n            res = max(res, d[s1[i]]+1)\n        d[s2[i]] = i\n    return res\n\n\nif __name__ == \"__main__\":\n    s1 = \"aab\"\n    s2 = \"aab\"\n    print(longest_repeating_subsequence(s1, s2))"
    },
    {
      "rank": 89,
      "score": 1.0,
      "candidate": "def longest_repeating_subsequence(s1, s2):\n    \"\"\"\n    :type s1: str\n    :type s2: str\n    :rtype: int\n    \"\"\"\n    if len(s1) == 0 or len(s2) == 0:\n        return 0\n    res = 0\n    max_len = 0\n    max_idx = 0\n    for i in range(len(s1)):\n        if s1[i] == s2[0]:\n            max_len = max(max_len, i - max_idx + 1)\n            res = max(res, i - max_idx + 1)\n        else:\n            max_idx = i\n    return res\n\n\nif __name__ == \"__main__\":\n    assert longest_repeating_subsequence(\"aab\", \"abb\") == 3\n    assert longest_repeating_subsequence(\"aab\", \"ab\") == 3\n    assert longest_repeating_subsequence(\"aab\", \"a\") == 0\n    assert longest_repeating_subsequence(\"\", \"\") == 0\n    assert longest_repeating_subsequence(\"\", \"a\") == 0"
    },
    {
      "rank": 90,
      "score": 1.0,
      "candidate": "def longest_repeating_subsequence(string, substring):\n    # Fill this in.\n    l = len(string)\n    m = len(substring)\n    memo = [[0 for _ in range(m + 1)] for _ in range(l + 1)]\n    memo[0][0] = 1\n\n    for i in range(1, l + 1):\n        for j in range(1, m + 1):\n            if string[i - 1] == substring[j - 1]:\n                memo[i][j] = memo[i - 1][j - 1] + 1\n            else:\n                memo[i][j] = max(memo[i - 1][j], memo[i][j - 1])\n\n    return memo[l][m]\n\n\nif __name__ == \"__main__\":\n    string = \"abcabcbb\"\n    substring = \"bcbb\"\n    print(longest_repeating_subsequence(string, substring))"
    },
    {
      "rank": 91,
      "score": 1.0,
      "candidate": "class Solution:\n    def count_repeats(self, s: str) -> int:\n        if len(s) < 2:\n            return 0\n        if len(s) == 2:\n            return 1 if s[0] == s[1] else 0\n        if len(s) == 3:\n            if s[0] == s[1] and s[0] == s[2]:\n                return 1\n            return 0\n        if len(s) == 4:\n            if s[0] == s[1] and s[0] == s[2] and s[0] == s[3]:\n                return 2\n            if s[0] == s[1] and s[0] == s[3]:\n                return 3\n            if s[0] == s[2] and s[0] == s[3]:\n                return 4\n            return 0\n        if len(s) == 5:\n            if s[0] == s[1] and s[0] == s[2] and s[0] == s[3] and s[0] == s[4]:\n                return 5\n            if s[0] == s[1] and s[0] == s[3] and s[0] == s[4]:\n                return 6\n            if s[0] == s[2] and s[0] == s[4] and s[0] == s[5]:\n                return 7\n            if s[0] == s[3] and s[0] == s[4] and s[0] == s[5]:\n                return 8\n            if s[0] == s[4] and s[0] == s[5] and s[0] == s[6]:\n                return 9\n            if s[0] == s[5] and s[0] == s[6] and s[0] == s[7]:\n                return 10\n            return 0\n        return 0"
    },
    {
      "rank": 92,
      "score": 1.0,
      "candidate": "def longest_repeating_sequence(s1, s2):\n    \"\"\"\n    Time: O(n^2)\n    Space: O(n^2)\n    \"\"\"\n    # Create a dictionary to store the length of the longest repeating subsequence\n    # and the length of the longest repeating subsequence itself\n    longest_repeating_subsequence = {}\n    longest_repeating_subsequence_length = {}\n    # Iterate through the strings\n    for i in range(len(s1)):\n        # If the current character is not already in the dictionary,\n        # add the character to the dictionary\n        if s1[i] not in longest_repeating_subsequence:\n            # Increment the length of the longest repeating subsequence\n            longest_repeating_subsequence_length[i] = 1\n        # If the current character is already in the dictionary,\n        # increment the length of the longest repeating subsequence\n        elif s1[i] in longest_repeating_subsequence:\n            longest_repeating_subsequence_length[i] += 1\n        # If the current character is not in the dictionary,\n        # add the character to the dictionary and increment the length of the longest repeating subsequence\n        else:\n            longest_repeating_subsequence_length[i] = 1\n\n    # Iterate through the strings\n    for i in range(len(s2)):\n        # If the current character is not already in the dictionary,\n        # add the character to the dictionary\n        if s2[i] not in longest_repeating_subsequence_length:\n            # Increment the length of the longest repeating subsequence\n            longest_repeating_subsequence_length[i] = 1\n        # If the current character is already in the dictionary,\n        # increment the length of the longest repeating subsequence\n        elif s2[i] in longest_repeating_subsequence_length:\n            longest_repeating_subsequence_length[i] += 1\n        # If the current character is not in the dictionary,\n        # add the character to the dictionary and increment the length of the longest repeating subsequence\n        else:\n            longest_repeating_subsequence_length[i] = 1\n\n    # Count the number of longest repeating subsequences"
    },
    {
      "rank": 93,
      "score": 1.0,
      "candidate": "def longest_repeating_subsequence(str1, str2):\n    # write your code here\n    dict1 = {}\n    dict2 = {}\n    max_length = 0\n    for i in range(len(str1)):\n        if str1[i] in dict1:\n            max_length = max(max_length, dict1[str1[i]]+1)\n        if str2[i] in dict2:\n            max_length = max(max_length, dict2[str2[i]]+1)\n        dict1[str1[i]] = i\n        dict2[str2[i]] = i\n    return max_length\n\n\nprint(longest_repeating_subsequence('aa', 'aa'))\nprint(longest_repeating_subsequence('ab', 'ab'))\nprint(longest_repeating_subsequence('abc', 'abc'))\nprint(longest_repeating_subsequence('abc', 'acb'))\nprint(longest_repeating_subsequence('abc', 'bac'))"
    },
    {
      "rank": 94,
      "score": 1.0,
      "candidate": "def longest_repeating_subsequence(s1, s2):\n    if s1 == s2:\n        return len(s1)\n    if len(s1) > len(s2):\n        return len(s1)\n    if len(s2) > len(s1):\n        return len(s2)\n    for i in range(len(s1)):\n        if s1[i] == s2[i]:\n            return longest_repeating_subsequence(s1[i + 1:], s2)\n    return 0\n\n\nprint(longest_repeating_subsequence(\"aabcc\", \"aabcc\"))"
    },
    {
      "rank": 95,
      "score": 1.0,
      "candidate": "class Solution(object):\n    def longestRepeatingSubsequence(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        if len(s) == 0:\n            return 0\n        if len(s) == 1:\n            return 1\n        if len(s) == 2:\n            return max(len(s), len(s))\n        if len(s) == 3:\n            return max(len(s), len(s) * 2)\n        if len(s) == 4:\n            return max(len(s), len(s) * 3)\n        if len(s) == 5:\n            return max(len(s), len(s) * 4)\n        if len(s) == 6:\n            return max(len(s), len(s) * 5)\n        if len(s) == 7:\n            return max(len(s), len(s) * 6)\n        if len(s) == 8:\n            return max(len(s), len(s) * 7)\n        if len(s) == 9:\n            return max(len(s), len(s) * 8)\n        if len(s) == 10:\n            return max(len(s), len(s) * 9)\n        if len(s) == 11:\n            return max(len(s), len(s) * 10)\n        if len(s) == 12:\n            return max(len(s), len(s) * 11)\n        if len(s) == 13:\n            return max(len(s), len(s) * 12)\n        if len(s) == 14:\n            return max(len(s), len(s) * 13)\n        if len(s) == 15:\n            return max(len(s), len(s) * 14)\n        if len(s) == 16:\n            return max(len(s), len(s) * 15)\n        if len(s) == 17:\n            return max(len(s), len(s) * 16)\n        if len(s) == 18:\n            return max(len(s), len(s) * 17)\n        if"
    },
    {
      "rank": 96,
      "score": 1.0,
      "candidate": "class Solution(object):\n    def longestRepeatingSubsequence(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        if not s:\n            return 0\n\n        dp = [0 for _ in range(len(s) + 1)]\n        dp[0] = 1\n\n        for i in range(1, len(s) + 1):\n            for j in range(i):\n                if s[j] == s[i - 1]:\n                    dp[i] = max(dp[i], dp[j] + 1)\n\n        return dp[-1]\n\n\nif __name__ == '__main__':\n    s = Solution()\n    assert s.longestRepeatingSubsequence('ab') == 1\n    assert s.longestRepeatingSubsequence('aba') == 2\n    assert s.longestRepeatingSubsequence('abba') == 3"
    },
    {
      "rank": 97,
      "score": 1.0,
      "candidate": "def longest_repeating_subsequence(s1, s2):\n    if s1 == s2:\n        return 0\n    else:\n        max_count = 0\n        for i in range(len(s1)):\n            for j in range(i+1, len(s1)):\n                if s1[i] == s1[j]:\n                    if max_count < j-i:\n                        max_count = j-i\n        return max_count\n\n\ndef test_longest_repeating_subsequence():\n    assert longest_repeating_subsequence(\"abc\", \"abc\") == 1\n    assert longest_repeating_subsequence(\"abc\", \"ab\") == 1\n    assert longest_repeating_subsequence(\"ab\", \"abc\") == 2\n    assert longest_repeating_subsequence(\"abc\", \"acb\") == 2\n    assert longest_repeating_subsequence(\"abc\", \"acbac\") == 2\n    assert longest_repeating_subsequence(\"abc\", \"abcac\") == 3\n    assert longest_repeating_subsequence(\"abc\", \"abcab\") == 3\n    assert longest_repeating_subsequence(\"abc\", \"abcabc\") == 3\n    assert longest_repeating_subsequence(\"abc\", \"abcabac\") == 3\n    assert longest_repeating_subsequence(\"abc\", \"abacb\") == 1\n    assert longest_repeating_subsequence(\"ab\", \"abacb\") == 1\n    assert longest_repeating_subsequence(\"ab\", \"abacbac\") == 2\n    assert longest_repeating_subsequence(\"ab\", \"abacbacab\") == 2\n    assert longest_repeating_subsequence(\"ab\", \"abacbacabac\") == 1\n    assert longest_repeating_subsequence(\"ab\", \"abacbacabacab\") == 2\n    assert longest_repeating_subsequence(\"ab\", \"abacbacabacabac\") == 2\n    assert longest_repeating_subsequence(\"ab\", \"abacbacabacabac\") == 2\n    assert longest_repeating_subsequence(\"ab\", \"abacbacabacabacacab\") == 2\n    assert longest_repeating"
    },
    {
      "rank": 98,
      "score": 1.0,
      "candidate": "def longest_repeating_subsequence(s1, s2):\n    \"\"\"\n    :type s1: str\n    :type s2: str\n    :rtype: int\n    \"\"\"\n    if len(s1) == 0 or len(s2) == 0:\n        return 0\n\n    if len(s1) > len(s2):\n        return len(s1)\n\n    if len(s2) > len(s1):\n        return len(s2)\n\n    if s1[0] == s2[0]:\n        return longest_repeating_subsequence(s1[1:], s2[1:])\n    else:\n        return max(longest_repeating_subsequence(s1[1:], s2), longest_repeating_subsequence(s1, s2[1:]))\n\n\nif __name__ == '__main__':\n    assert longest_repeating_subsequence(\"abc\", \"ab\") == 3\n    assert longest_repeating_subsequence(\"aa\", \"aa\") == 2\n    assert longest_repeating_subsequence(\"aa\", \"b\") == 3\n    assert longest_repeating_subsequence(\"aa\", \"a\") == 2"
    },
    {
      "rank": 99,
      "score": 1.0,
      "candidate": "def longest_repeating_subsequence(string1: str, string2: str) -> int:\n    if len(string1) > len(string2):\n        return len(string1)\n\n    if len(string2) > len(string1):\n        return len(string2)\n\n    dp = [[0 for _ in range(len(string2) + 1)] for _ in range(len(string1) + 1)]\n\n    for i in range(len(string1)):\n        for j in range(len(string2)):\n            if string1[i] == string2[j]:\n                dp[i + 1][j + 1] = dp[i][j] + 1\n            else:\n                dp[i + 1][j + 1] = max(dp[i + 1][j], dp[i][j + 1])\n\n    return dp[len(string1)][len(string2)]\n\n\nif __name__ == \"__main__\":\n    assert longest_repeating_subsequence(\"abc\", \"aac\") == 4\n    assert longest_repeating_subsequence(\"abc\", \"bc\") == 2\n    assert longest_repeating_subsequence(\"abc\", \"acb\") == 3\n    assert longest_repeating_subsequence(\"abc\", \"aab\") == 4\n    assert longest_repeating_subsequence(\"abc\", \"abc\") == 0\n    assert longest_repeating_subsequence(\"abc\", \"abcab\") == 3\n    assert longest_repeating_subsequence(\"abc\", \"abcabc\") == 4\n    assert longest_repeating_subsequence(\"abc\", \"abcabcabc\") == 0\n    assert longest_repeating_subsequence(\"abc\", \"abcabcab\") == 3\n    assert longest_repeating_subsequence(\"abc\", \"abcabcabab\") == 5\n    assert longest_repeating_subsequence(\"abc\", \"abcabcabac\") == 4"
    },
    {
      "rank": 100,
      "score": 1.0,
      "candidate": "def longest_repeating_sequence(s1, s2):\n    length = len(s1)\n    if length == 0 or length == len(s2):\n        return 0\n\n    if s1[0] == s2[0]:\n        return max(longest_repeating_sequence(s1[1:], s2), longest_repeating_sequence(s1[:-1], s2))\n    else:\n        return max(longest_repeating_sequence(s1, s2[1:]), longest_repeating_sequence(s1[:-1], s2))\n\n\nif __name__ == \"__main__\":\n    assert longest_repeating_sequence(\"abc\", \"abc\") == 3\n    assert longest_repeating_sequence(\"abc\", \"ab\") == 1\n    assert longest_repeating_sequence(\"a\", \"b\") == 2\n    assert longest_repeating_sequence(\"abc\", \"abcbb\") == 2\n    assert longest_repeating_sequence(\"abc\", \"abcbbab\") == 2\n    assert longest_repeating_sequence(\"ab\", \"abc\") == 3\n    assert longest_repeating_sequence(\"abc\", \"abcba\") == 3\n    assert longest_repeating_sequence(\"abc\", \"abcbbab\") == 3\n    assert longest_repeating_sequence(\"abc\", \"abcbaab\") == 3\n    assert longest_repeating_sequence(\"abc\", \"abcbaabcbb\") == 3"
    }
  ]
}