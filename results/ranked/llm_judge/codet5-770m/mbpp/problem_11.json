{
  "timestamp": "2025-09-14T12:33:21.842275",
  "method": "improved_llm_judge",
  "judge_model": "codellama/CodeLlama-7b-Python-hf",
  "target_model": "codet5-770m",
  "dataset": "mbpp",
  "problem_number": 11,
  "total_candidates": 100,
  "results": [
    {
      "rank": 1,
      "score": 10.0,
      "candidate": "class Solution(object):\n    def firstDuplicate(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        # \u5b57\u5178\n        hash_map = {}\n        for i in range(len(nums)):\n            if nums[i] in hash_map:\n                return nums[hash_map[nums[i]]]\n            else:\n                hash_map[nums[i]] = i\n        return -1"
    },
    {
      "rank": 2,
      "score": 10.0,
      "candidate": "def first_duplicate(arr):\n    for i in range(len(arr)):\n        if arr[arr[i] - 1] < 0:\n            return arr[i]\n    return None\n\n\nprint(first_duplicate([1, 3, 2, 4, 4, 2, 1]))"
    },
    {
      "rank": 3,
      "score": 10.0,
      "candidate": "def find_first_duplicate(array):\n    for i in range(len(array)):\n        if array[array[i] - 1] > 0:\n            return array[array[i] - 1]\n\n\nif __name__ == \"__main__\":\n    print(find_first_duplicate([-1, 0, 1, 2, 3, 4, 4]))"
    },
    {
      "rank": 4,
      "score": 10.0,
      "candidate": "def find_first_duplicate(nums):\n    for i in range(len(nums)):\n        if nums[abs(nums[i])-1] < 0:\n            return nums[abs(nums[i])-1]\n    return -1\n\nprint(find_first_duplicate([-1,-2,-3,3,2,1,4,-1,-2,-3,3]))"
    },
    {
      "rank": 5,
      "score": 10.0,
      "candidate": "def first_duplicate_element(arr):\n    # Write your code here\n    for i in range(len(arr)):\n        if arr[abs(arr[i])-1]>0:\n            return arr[abs(arr[i])-1]\n    return 0\n\n\narr = [3,1,2,4]\nprint(first_duplicate_element(arr))"
    },
    {
      "rank": 6,
      "score": 10.0,
      "candidate": "def first_duplicate(arr):\n    # write your code here\n    for i in range(len(arr)):\n        if arr[i] > 0:\n            continue\n        else:\n            return arr[i]\n\n\narr = [0, 1, 1, 2, 2, 3, 3, 4, 4, 4, 5, 5, 5, 5, 5, 5, 6, 6, 6, 6, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,"
    },
    {
      "rank": 7,
      "score": 10.0,
      "candidate": "def first_duplicate(nums):\n    for i in range(len(nums)):\n        if nums[nums[i] - 1] == nums[i]:\n            return nums[i]\n    return -1\n\n\nprint(first_duplicate([1, 2, 3, 3, 4, 5, 5, 6, 7, 7, 8, 8, 9, 9, 9, 10, 10, 10, 11, 11, 11, 11, 12, 12, 12, 13, 13, 13, 14, 14, 14, 15, 15, 15, 16, 16, 16, 17, 17, 17, 18, 18, 18, 19, 19, 19, 20, 20, 20, 21, 21, 21, 22, 22, 22, 23, 23, 23, 24, 24, 24, 25, 25, 25, 26, 26, 27, 27, 27, 27, 28, 28, 29, 30, 30, 30, 31, 31, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32"
    },
    {
      "rank": 8,
      "score": 10.0,
      "candidate": "def first_duplicate(nums):\n    # find the first duplicate in the given array\n    for i in range(len(nums)):\n        if nums[i] > nums[i - 1]:\n            return nums[i]\n    return -1\n\n\nprint(first_duplicate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]))"
    },
    {
      "rank": 9,
      "score": 10.0,
      "candidate": "def first_duplicate(arr):\n    for i in range(len(arr)):\n        if arr[arr[i]-1] > 0 and arr[arr[i]-1] == arr[i]:\n            return arr[arr[i]-1]\n    return None\n\n\nprint(first_duplicate([1,2,3,4,5,6,7,8,9,10]))"
    },
    {
      "rank": 10,
      "score": 10.0,
      "candidate": "def first_duplicate(nums):\n    if len(nums) == 1:\n        return nums[0]\n    else:\n        for i in range(len(nums)):\n            if nums[i]!= nums[i-1]:\n                return nums[i]\n\nprint(first_duplicate([1, 2, 3, 4, 5, 6, 7, 8, 9]))"
    },
    {
      "rank": 11,
      "score": 10.0,
      "candidate": "class Solution:\n    def firstDuplicate(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        i = 0\n        while i < len(nums) - 1:\n            if nums[i] == nums[i + 1]:\n                return nums[i]\n            i += 1\n        return -1"
    },
    {
      "rank": 12,
      "score": 10.0,
      "candidate": "def first_duplicate(arr):\n    # Your code here\n    for i in range(len(arr)):\n        if arr[i] == arr[i - 1]:\n            return arr[i]\n    return None\n\n\nprint(first_duplicate([1, 2, 3, 4, 5, 6]))\nprint(first_duplicate([1, 2, 3, 4, 5, 6, 7]))\nprint(first_duplicate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\nprint(first_duplicate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]))\nprint(first_duplicate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]))\nprint(first_duplicate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146"
    },
    {
      "rank": 13,
      "score": 10.0,
      "candidate": "def first_duplicate(arr):\n    if len(arr) == 1:\n        return arr[0]\n    else:\n        for i in range(len(arr)-1):\n            if arr[i] == arr[i+1]:\n                return arr[i]"
    },
    {
      "rank": 14,
      "score": 10.0,
      "candidate": "def first_duplicate(arr):\n  return find_first_duplicate(arr,0,len(arr)-1)\n\ndef find_first_duplicate(arr, start, end):\n    if start == end:\n        return start\n    mid = (start + end)//2\n    if arr[mid] > arr[start]:\n        return find_first_duplicate(arr, start, mid)\n    elif arr[mid] < arr[end]:\n        return find_first_duplicate(arr, mid+1, end)\n    else:\n        return arr[start]\n\n\nprint(first_duplicate([1, 2, 3, 4, 5, 6, 7, 8, 9]))\nprint(first_duplicate([-1, -2, -3, -4, -5, -6, -7, -8, -9]))\nprint(first_duplicate([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10, -11, -12, -13, -14, -15, -16, -17, -18, -19, -20]))"
    },
    {
      "rank": 15,
      "score": 10.0,
      "candidate": "def find_duplicate(arr):\n    seen = set()\n\n    for num in arr:\n        if num in seen:\n            return num\n        else:\n            seen.add(num)\n\n\nif __name__ == \"__main__\":\n    print(find_duplicate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))"
    },
    {
      "rank": 16,
      "score": 10.0,
      "candidate": "def first_duplicate(arr):\n    for i in range(len(arr)):\n        if arr[i] > arr[i-1]:\n            return arr[i]\n\n\nif __name__ == \"__main__\":\n    arr = [1, 2, 3, 3, 2, 1]\n    print(first_duplicate(arr))\n\n    arr = [1, 2, 3, 4, 5, 1]\n    print(first_duplicate(arr))\n\n    arr = [1, 2, 3, 3, 2, 1]\n    print(first_duplicate(arr))\n\n    arr = [1, 2, 3, 4, 5, 4, 4, 4, 4, 4]\n    print(first_duplicate(arr))\n\n    arr = [1, 2, 3, 4, 5, 5, 5, 5, 5]\n    print(first_duplicate(arr))"
    },
    {
      "rank": 17,
      "score": 10.0,
      "candidate": "def first_duplicate(arr):\n    if len(arr) <= 1:\n        return None\n\n    hash_map = {}\n    for i in range(len(arr)):\n        if arr[i] in hash_map:\n            return arr[i]\n        hash_map[arr[i]] = i\n\n    return None\n\n\nif __name__ == \"__main__\":\n    assert first_duplicate([1, 2, 3, 4, 5]) == 5\n    assert first_duplicate([3, 2, 1, 4]) == 3\n    assert first_duplicate([1, 2, 3, 4, 5, 6, 7, 8]) == 8"
    },
    {
      "rank": 18,
      "score": 10.0,
      "candidate": "def first_duplicate(arr):\n    for i in range(len(arr)):\n        if arr[i]!= i+1:\n            return arr[arr[i]-1]\n    return -1\n\nprint(first_duplicate([1,2,3,4,5,5,6,7,8,9]))"
    },
    {
      "rank": 19,
      "score": 10.0,
      "candidate": "def firstDuplicate(arr):\n    for i in range(len(arr)):\n        if arr[arr[i] - 1] > 0:\n            return arr[arr[i] - 1]\n    return -1\n\n\narr = [1, 2, 3, 4, 5, 5, 6, 7, 8, 9]\nprint(firstDuplicate(arr))"
    },
    {
      "rank": 20,
      "score": 10.0,
      "candidate": "def first_duplicate(arr):\n    for i in range(len(arr)):\n        if arr[i] > 0 and arr[arr[i] - 1] > 0:\n            return arr[arr[i] - 1]\n    return None\n\n\nif __name__ == \"__main__\":\n    print(first_duplicate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]))"
    },
    {
      "rank": 21,
      "score": 10.0,
      "candidate": "def first_duplicate(arr):\n    for i in range(len(arr)):\n        if arr[i] == arr[i-1]:\n            return arr[i]\n    return -1\n\n\narr = [1, 2, 3, 4, 5]\nprint(first_duplicate(arr))"
    },
    {
      "rank": 22,
      "score": 10.0,
      "candidate": "def first_duplicate(nums):\n    \"\"\"\n    :type nums: List[int]\n    :rtype: int\n    \"\"\"\n    for i in range(len(nums)):\n        if nums[i] > 0:\n            nums[abs(nums[i]) - 1] = -nums[abs(nums[i]) - 1]\n        else:\n            return nums[i]\n\n\nif __name__ == '__main__':\n    print(first_duplicate([-1, 3, 2, 1]))\n    print(first_duplicate([-1, -1, -1, 1, 2, 3, 4, 5, 6, 7, 8, 9]))"
    },
    {
      "rank": 23,
      "score": 10.0,
      "candidate": "def first_duplicate(nums):\n    # Time Complexity: O(n)\n    # Space Complexity: O(n)\n    for num in nums:\n        if nums.count(num) > 1:\n            return num\n    return None\n\n\ndef main():\n    nums = [1, 1, 2, 3, 4, 5, 4, 5, 4, 3, 3, 3, 3, 3, 4, 4, 4, 5, 4, 5, 4, 5, 4, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 5, 4, 4, 5, 4, 4, 4, 5, 4, 4, 4, 4, 5, 4, 4, 4, 4, 5, 4, 4, 4, 4, 5, 4, 4, 4, 5, 4, 4, 4, 4, 5, 4, 4, 4, 4, 4, 5, 4, 5, 4, 4, 4, 4, 4, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 5, 4, 4, 4, 4, 4, 4, 4, 4, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4"
    },
    {
      "rank": 24,
      "score": 10.0,
      "candidate": "def first_duplicate_element(arr):\n    return arr.index(min(arr))\n\n\nif __name__ == '__main__':\n    arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    print(first_duplicate_element(arr))"
    },
    {
      "rank": 25,
      "score": 10.0,
      "candidate": "def first_duplicate(arr):\n    if len(arr) == 0:\n        return None\n    first_duplicate_index = 0\n    second_duplicate_index = 0\n    for i in range(len(arr)):\n        if arr[first_duplicate_index]!= arr[second_duplicate_index]:\n            if arr[first_duplicate_index] > arr[second_duplicate_index]:\n                return arr[first_duplicate_index]\n            else:\n                return arr[second_duplicate_index]\n        else:\n            first_duplicate_index += 1\n            second_duplicate_index += 1\n    return None\n\n\nprint(first_duplicate([1, 2, 3, 3, 3, 3, 4, 5, 6, 7, 8, 9, 10]))"
    },
    {
      "rank": 26,
      "score": 10.0,
      "candidate": "def first_duplicate(arr):\n    \"\"\"\n    :type arr: List[int]\n    :rtype: int\n    \"\"\"\n    arr.sort()\n    for i in range(len(arr)):\n        if arr[arr[i]] > 0:\n            return arr[arr[i]-1]\n    return -1\n\n\n\nif __name__ == '__main__':\n    print(first_duplicate([1,2,3,4,5,6,7,8,9,10]))"
    },
    {
      "rank": 27,
      "score": 10.0,
      "candidate": "def first_duplicate_element(arr):\n    \"\"\"\n    :type arr: List[int]\n    :rtype: int\n    \"\"\"\n\n    if not arr:\n        return None\n\n    for i in arr:\n        if arr[abs(i) - 1] < 0:\n            return abs(i)\n\n    return None\n\n\nif __name__ == \"__main__\":\n    print(first_duplicate_element([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))"
    },
    {
      "rank": 28,
      "score": 10.0,
      "candidate": "def find_duplicate(arr):\n    for i in range(len(arr)):\n        if arr[i] == arr[i-1]:\n            return i\n    return -1\n\nprint(find_duplicate([1,2,3,4,5,6]))"
    },
    {
      "rank": 29,
      "score": 10.0,
      "candidate": "def first_duplicate(nums):\n    for i in range(len(nums)):\n        if nums[i] == nums[i - 1]:\n            return nums[i]\n    return -1\n\n\nprint(first_duplicate([1, 2, 3, 4, 5, 6, 7, 8, 9]))\nprint(first_duplicate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17]))\nprint(first_duplicate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 122, 123, 124, 125, 126, 127, 128, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 171, 172, 173, 170, 173, 174,"
    },
    {
      "rank": 30,
      "score": 10.0,
      "candidate": "def first_duplicate(nums):\n    for i in range(len(nums)):\n        if nums[i] == nums[i-1]:\n            return i\n\n    return -1\n\n\n\nif __name__ == \"__main__\":\n    nums = [2,2,3,3,3,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,"
    },
    {
      "rank": 31,
      "score": 10.0,
      "candidate": "def first_duplicate(arr):\n    for i in arr:\n        if arr[abs(i)-1] > 0:\n            return i\n\n    return -1\n\n\nif __name__ == \"__main__\":\n    arr = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16]\n    print(first_duplicate(arr))"
    },
    {
      "rank": 32,
      "score": 9.0,
      "candidate": "def first_duplicate(arr):\n    for i in range(len(arr)):\n        if arr[i] > 0:\n            if arr[i] == arr[arr[i] - 1]:\n                return arr[i]\n            else:\n                return arr[i] + 1"
    },
    {
      "rank": 33,
      "score": 8.0,
      "candidate": "def find_duplicate(arr):\n    for i in range(len(arr)):\n        if arr[i] > 0:\n            return arr[i]\n\n\narr = [1, 2, 3, 3, 4, 4, 5, 5, 5, 6]\n\nprint(find_duplicate(arr))"
    },
    {
      "rank": 34,
      "score": 8.0,
      "candidate": "def first_duplicate(arr):\n    arr.sort()\n    for i in range(len(arr)):\n        if arr[i] == arr[i-1]:\n            return arr[i]\n\n\nprint(first_duplicate([1, 1, 2, 3, 2, 4, 4]))\nprint(first_duplicate([1, 2, 3, 3, 4, 4, 4, 5]))"
    },
    {
      "rank": 35,
      "score": 8.0,
      "candidate": "def first_duplicate(arr):\n    for i in range(len(arr)):\n        if arr[arr[i] - 1] > 0:\n            return arr[arr[i] - 1]\n\n\nif __name__ == '__main__':\n    print(first_duplicate([1, 2, 3, 4, 5, 5, 4]))"
    },
    {
      "rank": 36,
      "score": 8.0,
      "candidate": "def find_first_duplicate(arr):\n    for i in range(len(arr)):\n        if arr[i] > 0:\n            if arr[arr[i] - 1]!= arr[i]:\n                return arr[arr[i] - 1]\n    return -1\n\n\nif __name__ == \"__main__\":\n    print(find_first_duplicate([0, 1, 1, 2, 2, 3, 3, 4]))"
    },
    {
      "rank": 37,
      "score": 8.0,
      "candidate": "def first_duplicate(nums):\n    # Write your code here\n    for i in nums:\n        if nums[abs(nums[i]) - 1] < 0:\n            return nums[abs(nums[i]) - 1]\n    return -1\n\nprint(first_duplicate([1, 2, 3, 3, 4, 3, 2, 3, 4]))\nprint(first_duplicate([1, 2, 3, 3, 4, 4, 5]))\nprint(first_duplicate([1, 2, 3, 4, 5, 6, 7, 8, 9]))\nprint(first_duplicate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))"
    },
    {
      "rank": 38,
      "score": 8.0,
      "candidate": "def first_duplicate(arr):\n    if not arr:\n        return None\n    arr.sort()\n    for i in range(len(arr)):\n        if arr[i] > arr[i-1]:\n            return arr[i]\n    return None\n\n\nif __name__ == \"__main__\":\n    arr = [1, 2, 3, 4, 5, 6, 7]\n    print(first_duplicate(arr))"
    },
    {
      "rank": 39,
      "score": 8.0,
      "candidate": "def first_duplicate(arr):\n    for i in range(len(arr)):\n        if arr[i] == arr[i-1]:\n            return arr[i]\n    return -1\n\nprint(first_duplicate([1,2,3,4,5,6,7]))"
    },
    {
      "rank": 40,
      "score": 8.0,
      "candidate": "def find_duplicate(nums):\n    for num in nums:\n        if nums.count(num) > 1:\n            return num\n    return None\n\n\nif __name__ == \"__main__\":\n    assert find_duplicate([1, 2, 3, 4, 5, 6, 7]) == 6"
    },
    {
      "rank": 41,
      "score": 8.0,
      "candidate": "def first_duplicate(nums):\n    if not nums:\n        return None\n\n    hashmap = {}\n    for num in nums:\n        if num in hashmap:\n            return num\n        hashmap[num] = 1\n\n    return None"
    },
    {
      "rank": 42,
      "score": 8.0,
      "candidate": "def first_duplicate(nums):\n    seen = {}\n\n    for num in nums:\n        if num in seen:\n            return num\n        seen[num] = 1\n\n\nif __name__ == \"__main__\":\n    assert first_duplicate([1, 2, 3, 4, 5]) == 5\n    assert first_duplicate([4, 2, 1, 3, 4]) == 2\n    assert first_duplicate([1, 1, 2, 2]) == 1\n    assert first_duplicate([1, 2, 1, 3, 3, 4, 4]) == 3"
    },
    {
      "rank": 43,
      "score": 8.0,
      "candidate": "def first_duplicate(arr):\n    for i in arr:\n        if arr.count(i) > 1:\n            return i\n\n\narr = [3, 2, 1, 4, 5, 4]\nprint(first_duplicate(arr))"
    },
    {
      "rank": 44,
      "score": 8.0,
      "candidate": "def first_duplicate(arr):\n    \"\"\"\n    Time: O(n)\n    Space: O(1)\n    \"\"\"\n\n    for i in range(len(arr)):\n        if arr[abs(arr[i]) - 1] < 0:\n            return arr[abs(arr[i]) - 1]\n    return -1\n\n\nif __name__ == \"__main__\":\n    print(first_duplicate([3, 1, 5, 2, 4]))"
    },
    {
      "rank": 45,
      "score": 8.0,
      "candidate": "def first_duplicate(nums):\n    for num in nums:\n        if nums.count(num) > 1:\n            return num\n    return None\n\n\nprint(first_duplicate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))"
    },
    {
      "rank": 46,
      "score": 8.0,
      "candidate": "def find_first_duplicate(arr):\n    for i in range(len(arr)):\n        if arr[i]!= arr[i-1]:\n            return arr[i]\n    return None\n\n\nprint(find_first_duplicate([1,2,3,4,5,6,7]))\nprint(find_first_duplicate([1,2,3,4,5,6,7,8,9]))"
    },
    {
      "rank": 47,
      "score": 8.0,
      "candidate": "def find_first_duplicate(arr):\n    for i in range(len(arr)):\n        if arr[abs(arr[i]) - 1] < 0:\n            return arr[abs(arr[i]) - 1]\n\n\nprint(find_first_duplicate([1, 2, 3, 4, 5, 6]))"
    },
    {
      "rank": 48,
      "score": 8.0,
      "candidate": "def find_duplicate(arr):\n    for i in arr:\n        if arr[abs(arr[i])-1] > 0:\n            return arr[abs(arr[i])-1]\n\n    return None\n\nif __name__ == \"__main__\":\n    print(find_duplicate([-2, -1, 2, 3, 4, 5, 6, 7, 8, 9, 8, 9, 10]))"
    },
    {
      "rank": 49,
      "score": 8.0,
      "candidate": "def first_duplicate(nums):\n    for i in range(len(nums)):\n        if nums[i] == nums[i - 1]:\n            return nums[i]\n    return -1\n\n\nif __name__ == \"__main__\":\n    assert first_duplicate([1, 2, 3, 4]) == 4\n    assert first_duplicate([1, 2, 3, 5]) == 5\n    assert first_duplicate([3, 2, 2, 4, 5]) == 2\n    assert first_duplicate([1, 2, 3, 5, 4]) == 2\n    assert first_duplicate([1, 2, 3, 4, 5, 6, 7]) == 2\n    assert first_duplicate([1, 2, 3, 4, 5, 6, 7, 8, 9]) == 2"
    },
    {
      "rank": 50,
      "score": 8.0,
      "candidate": "def first_duplicate_element(arr):\n    for i in range(len(arr)):\n        if arr[i] > 0:\n            arr[arr[i]-1] = -arr[arr[i]-1]\n    for i in range(len(arr)):\n        if arr[i] > 0:\n            return arr[i]\n    return -1\n\n\nif __name__ == \"__main__\":\n    arr = [1, 2, 3, 4, 5, 4, 5, 4, 4, 4, 4, 4, 4]\n    print(first_duplicate_element(arr))"
    },
    {
      "rank": 51,
      "score": 8.0,
      "candidate": "class Solution:\n    # @param A : list of integers\n    # @return an integer\n    def firstDuplicate(self, A):\n        seen = set()\n        for num in A:\n            if num in seen:\n                return num\n            seen.add(num)"
    },
    {
      "rank": 52,
      "score": 8.0,
      "candidate": "def first_duplicate(nums):\n    for i in range(len(nums)):\n        if nums[nums[i]-1] < 0:\n            return nums[nums[i]-1]\n\n\nprint(first_duplicate([1, 2, 3, 4, 5]))\nprint(first_duplicate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\nprint(first_duplicate([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10]))"
    },
    {
      "rank": 53,
      "score": 8.0,
      "candidate": "def first_duplicate(arr):\n    for i in arr:\n        if i > 0 and arr[i - 1] == i:\n            return i\n    return -1\n\n\nif __name__ == \"__main__\":\n    print(first_duplicate([0, 1, 2, 3, 4, 5]))"
    },
    {
      "rank": 54,
      "score": 8.0,
      "candidate": "def find_duplicate(arr):\n    for i in range(len(arr)):\n        if arr[arr[i]-1]!= arr[i]:\n            return arr[arr[i]-1]\n    return -1\n\n\nif __name__ == \"__main__\":\n    print(find_duplicate([0, 1, 2, 3, 4, 5, 6]))"
    },
    {
      "rank": 55,
      "score": 8.0,
      "candidate": "def find_duplicate(nums):\n    for i in range(len(nums)):\n        if nums[abs(nums[i]) - 1] < 0:\n            return nums[abs(nums[i]) - 1]\n    return -1\n\n\nif __name__ == '__main__':\n    print(find_duplicate([1, 3, 5, 7, 9]))"
    },
    {
      "rank": 56,
      "score": 8.0,
      "candidate": "def first_duplicate_element(arr):\n    # Write your code here\n    if not arr:\n        return None\n    hash_map = {}\n    for num in arr:\n        if num in hash_map:\n            return num\n        hash_map[num] = 1\n\n\nif __name__ == \"__main__\":\n    print(first_duplicate_element([1, 2, 3, 4, 5, 5, 5, 5, 5, 5, 5]))"
    },
    {
      "rank": 57,
      "score": 8.0,
      "candidate": "def first_duplicate(nums):\n    if len(nums) <= 1:\n        return None\n    first = nums[0]\n    for num in nums[1:]:\n        if num == first:\n            return num\n        else:\n            first = num\n    return None\n\nprint(first_duplicate([1, 2, 3, 4, 5, 6]))"
    },
    {
      "rank": 58,
      "score": 8.0,
      "candidate": "def firstDuplicate(arr):\n    arr.sort()\n    for i in range(len(arr)):\n        if arr[i]!= arr[arr[i] - 1]:\n            return arr[i]"
    },
    {
      "rank": 59,
      "score": 8.0,
      "candidate": "def first_duplicate(arr):\n    \"\"\"\n    :type arr: List[int]\n    :rtype: int\n    \"\"\"\n    if not arr:\n        return None\n\n    seen = set()\n    for num in arr:\n        if num in seen:\n            return num\n        seen.add(num)\n    return None\n\n\nif __name__ == \"__main__\":\n    assert first_duplicate([1, 2, 3, 4]) == 3\n    assert first_duplicate([1, 1, 2, 3, 4]) == 2\n    assert first_duplicate([1, 1, 2, 3, 4]) == 1"
    },
    {
      "rank": 60,
      "score": 8.0,
      "candidate": "def first_duplicate_element(arr):\n    for i in range(len(arr)):\n        if arr[arr[i]-1] < 0:\n            return arr[i]\n    return -1\n\n\narr = [2, 2, 3, 4, 4, 3, 2, 2, 4, 3, 4, 3, 2, 4, 4, 3, 2, 4, 4]\n\nprint(first_duplicate_element(arr))"
    },
    {
      "rank": 61,
      "score": 8.0,
      "candidate": "def first_duplicate(arr):\n    for i in arr:\n        if i > 0 and arr[i - 1] == i:\n            return i\n    return None\n\n\narr = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nprint(first_duplicate(arr))"
    },
    {
      "rank": 62,
      "score": 8.0,
      "candidate": "def first_duplicate(arr):\n    # write your code here\n    for i in arr:\n        if arr.count(i) > 1:\n            return i\n    return -1\n\n\narr = [1, 2, 2, 3, 3, 4, 4, 4, 5, 5, 5]\nprint(first_duplicate(arr))"
    },
    {
      "rank": 63,
      "score": 8.0,
      "candidate": "def first_duplicate(arr):\n    arr.sort()\n    for i in range(len(arr)):\n        if arr[i] > arr[arr[i] - 1]:\n            return arr[i]\n    return -1\n\n\nif __name__ == \"__main__\":\n    print(first_duplicate([1, 2, 3, 4, 5]))\n    print(first_duplicate([1, 2, 3, 4, 5, 5]))\n    print(first_duplicate([2, 2, 2, 3, 3, 4, 4, 5, 5]))\n    print(first_duplicate([2, 2, 2, 3, 3, 4, 4, 5, 5]))"
    },
    {
      "rank": 64,
      "score": 8.0,
      "candidate": "def first_duplicate(arr):\n    # Write your code here\n    dict = {}\n    for i in range(len(arr)):\n        if arr[i] in dict:\n            return arr[i]\n        else:\n            dict[arr[i]] = i\n\n\nif __name__ == \"__main__\":\n    print(first_duplicate([1, 2, 3, 4, 5, 6, 7]))"
    },
    {
      "rank": 65,
      "score": 8.0,
      "candidate": "def first_duplicate(arr):\n    for i in range(len(arr)):\n        if arr[i] == arr[i-1]:\n            return arr[i]\n    return -1\n\nif __name__ == \"__main__\":\n    print(first_duplicate([1, 2, 3, 4, 4]))"
    },
    {
      "rank": 66,
      "score": 8.0,
      "candidate": "def find_first_duplicate(arr):\n    for i in range(len(arr)):\n        if arr[i] > arr[i-1]:\n            return arr[i]\n\n\nif __name__ == \"__main__\":\n    print(find_first_duplicate([1, 2, 3, 4, 5, 5, 6, 7]))"
    },
    {
      "rank": 67,
      "score": 8.0,
      "candidate": "def first_duplicate(arr):\n    for i in arr:\n        if arr[arr.index(i)]!= i:\n            return i\n\narr = [2,1,2,3,3,3,4]\nprint(first_duplicate(arr))"
    },
    {
      "rank": 68,
      "score": 8.0,
      "candidate": "def find_first_duplicate(arr):\n    for i in range(len(arr)):\n        if arr[arr[i]-1]!= arr[i]:\n            return arr[arr[i]-1]\n    return -1\n\nprint(find_first_duplicate([1,2,3,4,5,6,7,8,9,10,12]))"
    },
    {
      "rank": 69,
      "score": 8.0,
      "candidate": "def first_duplicate_element(arr):\n    for i in arr:\n        if arr.count(i) > 1:\n            return i\n    return None\n\n\nprint(first_duplicate_element([1, 2, 3, 4, 5]))"
    },
    {
      "rank": 70,
      "score": 8.0,
      "candidate": "def first_duplicate(arr):\n    for i in range(len(arr)):\n        if arr[i] > 0 and arr[arr[i] - 1] > 0:\n            return arr[arr[i] - 1]\n    return -1\n\n\nprint(first_duplicate([-2, 1, 2, 3, -1, 4]))\nprint(first_duplicate([-2, 1, 2, 3, 4, 5, 6, -1, -2]))\nprint(first_duplicate([-1, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2,"
    },
    {
      "rank": 71,
      "score": 8.0,
      "candidate": "def first_duplicate(arr):\n    for i in range(len(arr)):\n        if arr[i] == arr[i+1]:\n            return arr[i]\n\n\nif __name__ == \"__main__\":\n    print(first_duplicate([1, 2, 3, 4, 5]))"
    },
    {
      "rank": 72,
      "score": 8.0,
      "candidate": "def find_first_duplicate(nums):\n    return find_duplicate_helper(nums, 0, len(nums) - 1)\n\n\ndef find_duplicate_helper(nums, start, end):\n    if start == end:\n        return nums[start]\n    mid = (start + end) // 2\n    if nums[mid] < nums[start]:\n        return find_duplicate_helper(nums, mid + 1, end)\n    else:\n        return find_duplicate_helper(nums, start, mid - 1)\n\n\nif __name__ == \"__main__\":\n    print(find_first_duplicate([1, 2, 3, 4, 5]))\n    print(find_first_duplicate([1, 2, 3, 4, 5, 6]))"
    },
    {
      "rank": 73,
      "score": 8.0,
      "candidate": "def first_duplicate(arr):\n    for i in range(len(arr)):\n        if arr[i] > arr[arr[i] - 1]:\n            return arr[i]\n    return None\n\n\nprint(first_duplicate([1, 2, 3, 4, 5, 6, 7]))"
    },
    {
      "rank": 74,
      "score": 8.0,
      "candidate": "def find_first_duplicate(arr):\n  if len(arr) <= 1:\n    return -1\n\n  for i in range(len(arr)):\n    if arr[i] == arr[i - 1]:\n      return arr[i]\n\n  return -1\n\n\nprint(find_first_duplicate([1, 2, 3, 3, 3, 1]))\nprint(find_first_duplicate([1, 2, 3, 3, 4, 4]))\nprint(find_first_duplicate([1, 2, 3, 4, 4, 4]))\nprint(find_first_duplicate([1, 2, 3, 4, 4, 4]))\nprint(find_first_duplicate([1, 2, 3, 4, 4, 4]))"
    },
    {
      "rank": 75,
      "score": 8.0,
      "candidate": "def first_duplicate(arr):\n    \"\"\"\n    :type arr: List[int]\n    :rtype: int\n    \"\"\"\n    if arr is None or len(arr) == 0:\n        return None\n\n    left = 0\n    right = len(arr) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == arr[mid + 1]:\n            return arr[mid]\n        elif arr[mid] > arr[mid + 1]:\n            right = mid - 1\n        else:\n            left = mid + 1\n\n    return None\n\n\nif __name__ == \"__main__\":\n    print(first_duplicate([1, 2, 3, 4, 5, 6, 7]))"
    },
    {
      "rank": 76,
      "score": 8.0,
      "candidate": "def first_duplicate(nums):\n    # Write your code here\n    for i in range(len(nums)):\n        if nums[nums[i]-1]!= nums[i]:\n            return nums[nums[i]-1]\n\nif __name__ == '__main__':\n    nums = [1,2,3,4,5,6,6,7,7,8,8,9,9,9,10,10,11,11,11,12,12,12,13,13,13,14,14,15]\n    print(first_duplicate(nums))"
    },
    {
      "rank": 77,
      "score": 8.0,
      "candidate": "def find_first_duplicate(arr):\n    for i in range(len(arr)):\n        if arr[arr[i] - 1]!= arr[i]:\n            return arr[arr[i] - 1]"
    },
    {
      "rank": 78,
      "score": 8.0,
      "candidate": "def first_duplicate(nums):\n    for i in nums:\n        if nums[abs(nums[i]) - 1] > 0:\n            return abs(nums[i]) - 1\n\n    return -1\n\nprint(first_duplicate([2, 3, 2, 4, 4, 3, 2, 5, 4, 3, 2, 4, 4, 5]))"
    },
    {
      "rank": 79,
      "score": 8.0,
      "candidate": "def first_duplicate(arr):\n    for i in range(len(arr)):\n        if arr[abs(arr[i]) - 1] < 0:\n            return arr[abs(arr[i]) - 1]\n\n\nif __name__ == \"__main__\":\n    print(first_duplicate([3, 4, 5, 7, 8, 9]))"
    },
    {
      "rank": 80,
      "score": 8.0,
      "candidate": "def first_duplicate(nums):\n    for i in nums:\n        if nums.count(i) > 1:\n            return i\n    return -1"
    },
    {
      "rank": 81,
      "score": 8.0,
      "candidate": "def first_duplicate_element(nums):\n    if len(nums) == 0:\n        return None\n    for i in range(len(nums)):\n        if nums[nums[i]-1]!= nums[i]:\n            return nums[nums[i]-1]\n    return None\n\nprint(first_duplicate_element([1, 2, 3, 4, 5]))\nprint(first_duplicate_element([1, 2, 3, 4, 5, 6, 7, 8, 9]))"
    },
    {
      "rank": 82,
      "score": 8.0,
      "candidate": "def first_duplicate(arr):\n    for i in range(len(arr)):\n        if arr[arr[i] - 1]!= arr[i]:\n            return arr[arr[i] - 1]\n\n\narr = [2, 4, 3, 5, 6, 7, 8, 9, 8, 10, 11]\nprint(first_duplicate(arr))"
    },
    {
      "rank": 83,
      "score": 8.0,
      "candidate": "def first_duplicate(arr):\n    if len(arr) == 1:\n        return arr[0]\n\n    for i in range(len(arr)):\n        if arr[i] == arr[i-1]:\n            return arr[i]\n\n    return None\n\narr = [1,2,3,4,5,6]\nprint(first_duplicate(arr))"
    },
    {
      "rank": 84,
      "score": 8.0,
      "candidate": "def find_duplicate(arr):\n    if len(arr) <= 1:\n        return None\n    arr.sort()\n    for i in range(len(arr)-1):\n        if arr[i] == arr[i+1]:\n            return arr[i]\n\n\nprint(find_duplicate([1, 2, 3, 4, 5]))"
    },
    {
      "rank": 85,
      "score": 8.0,
      "candidate": "def first_duplicate(nums):\n    hashmap = {}\n    for i in nums:\n        if nums[abs(i) - 1] in hashmap:\n            return nums[abs(i) - 1]\n        else:\n            hashmap[i] = 1\n    return -1\n\n\nnums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]\nprint(first_duplicate(nums))"
    },
    {
      "rank": 86,
      "score": 8.0,
      "candidate": "def first_duplicate(arr):\n    for i in range(len(arr)):\n        if arr[i] > 0:\n            break\n    else:\n        return -1\n\n    for i in range(len(arr)):\n        if arr[arr[i] - 1] == arr[i]:\n            return arr[i]\n\n    return -1\n\nprint(first_duplicate([1, 2, 3, 4, 5]))\nprint(first_duplicate([1, 1, 2, 3, 4, 5]))\nprint(first_duplicate([1, 1, 2, 3, 4, 5]))\nprint(first_duplicate([1, 2, 3, 4, 5]))"
    },
    {
      "rank": 87,
      "score": 8.0,
      "candidate": "def first_duplicate(array):\n    hashmap = {}\n    for num in array:\n        if num in hashmap:\n            return num\n        else:\n            hashmap[num] = 1\n\n\nif __name__ == '__main__':\n    print(first_duplicate([1, 2, 3, 3, 4, 5, 5, 5, 5, 5, 5]))"
    },
    {
      "rank": 88,
      "score": 8.0,
      "candidate": "def first_duplicate(arr):\n    for i in arr:\n        if arr.count(i) > 1:\n            return i\n\n\narr = [1, 2, 3, 4, 4, 4, 3, 2]\nprint(first_duplicate(arr))\n\n\narr = [1, 2, 3, 4, 4, 4, 3, 2]\nprint(first_duplicate(arr))"
    },
    {
      "rank": 89,
      "score": 8.0,
      "candidate": "def first_duplicate(arr):\n    hash_table = {}\n    for num in arr:\n        if num in hash_table:\n            return num\n        else:\n            hash_table[num] = 1\n\n\nif __name__ == \"__main__\":\n    print(first_duplicate([1, 2, 3, 4, 4, 5]))\n    print(first_duplicate([1, 2, 3, 4, 5, 6, 7]))\n    print(first_duplicate([1, 2, 3, 4, 5, 6, 7, 8]))"
    },
    {
      "rank": 90,
      "score": 8.0,
      "candidate": "def first_duplicate(nums):\n    \"\"\"\n    :type nums: List[int]\n    :rtype: int\n    \"\"\"\n    if not nums:\n        return None\n    for i in range(len(nums)):\n        if nums[abs(nums[i]) - 1] < 0:\n            return abs(nums[i]) - 1\n    return None"
    },
    {
      "rank": 91,
      "score": 8.0,
      "candidate": "def find_first_duplicate(nums):\n    seen = set()\n    for n in nums:\n        if n in seen:\n            return n\n        seen.add(n)\n    return None\n\n\nif __name__ == \"__main__\":\n    print(find_first_duplicate([1, 2, 3, 4, 4, 5, 5]))"
    },
    {
      "rank": 92,
      "score": 8.0,
      "candidate": "def find_first_duplicate_element(nums):\n    \"\"\"\n    :type nums: List[int]\n    :rtype: int\n    \"\"\"\n    hash_map = {}\n\n    for num in nums:\n        if num in hash_map:\n            return num\n        else:\n            hash_map[num] = 1\n\n\nif __name__ == \"__main__\":\n    nums = [1, 2, 3, 4, 5]\n    print(find_first_duplicate_element(nums))"
    },
    {
      "rank": 93,
      "score": 1.0,
      "candidate": "class Solution:\n    def firstDuplicate(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        for i in nums:\n            if nums[abs(i) - 1] < 0:\n                return i\n        return -1\n\n\nif __name__ == \"__main__\":\n    nums = [1, 2, 3, 4, 1]\n    out = 2\n    out = 2\n    out = -1\n    out = -1\n    out = 2\n    out = -1\n    out = -1\n    out = 1\n    out = 1\n    out = 1\n    out = 1\n    out = 1\n    out = 1\n    out = 1\n    out = 1\n    out = 1\n    out = 1\n    out = 1\n    out = 1\n    out = 1\n    out = 1\n    out = 1\n    out = 1\n    out = 1\n    out = 1\n    out = 1\n    out = 1\n    out = 1\n    out = 1\n    out = 1\n    out = 1\n    out = 1\n    out = 1\n    out = 1\n    out = 1\n    out = 1\n    out = 1\n    out = 1\n    out = 1\n    out = 1\n    out = 1\n    out = 1\n    out = 1\n    out = 1\n    out = 1\n    out = 1\n    out = 1\n    out = 1\n    out = 1\n    out = 1\n    out = 1\n    out = 1\n    out = 1\n    out = 1\n    out = 1\n    out = 1\n    out = 1\n    out = 1\n    out = 1\n    out = 1\n    out = 1\n    out = 1\n    out = 1\n    out = 1\n    out = 1\n    out = 1\n    out = 1\n    out = 1\n    out = 1\n    out = 1\n    out = 1\n    out = 1\n    out = 1\n    out = 1\n    out = 1\n    out = 1\n    out = 1\n    out = 1\n    out = 1\n    out = 1\n    out = 1\n    out = 1"
    },
    {
      "rank": 94,
      "score": 1.0,
      "candidate": "class Solution:\n    def firstDuplicate(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        if not nums:\n            return None\n        if len(nums) == 1:\n            return nums[0]\n        for i in range(len(nums)):\n            for j in range(i+1, len(nums)):\n                if nums[i] == nums[j]:\n                    return nums[i]\n\nif __name__ == '__main__':\n    s = Solution()\n    print(s.firstDuplicate([]))"
    },
    {
      "rank": 95,
      "score": 1.0,
      "candidate": "def first_duplicate_element(array):\n    # Write your code here\n    if not array:\n        return -1\n    if len(array) == 1:\n        return array[0]\n    index = array[0]\n    for i in range(1, len(array)):\n        if array[index] == array[i]:\n            return array[index]\n        index = array[i]\n    return -1\n\n\nprint(first_duplicate_element([3, 2, 1, 4]))"
    },
    {
      "rank": 96,
      "score": 1.0,
      "candidate": "def first_duplicate(arr):\n    # write your code here\n    for i in arr:\n        if arr[abs(i) - 1] > 0:\n            return abs(i)\n    return -1\n\n\nprint(first_duplicate([4, 2, 4, 2, 4, 2]))"
    },
    {
      "rank": 97,
      "score": 1.0,
      "candidate": "class Solution:\n    # @param A : list of integers\n    # @return an integer\n    def find_first_duplicate(self, A):\n        seen = {}\n        for num in A:\n            if num in seen:\n                return num\n            else:\n                seen[num] = 1"
    },
    {
      "rank": 98,
      "score": 1.0,
      "candidate": "def find_duplicate(arr):\n    # write your code here\n    i = 0\n    j = len(arr) - 1\n    while i < j:\n        if arr[i] == arr[j]:\n            return arr[i]\n        elif arr[i] > arr[j]:\n            i += 1\n        else:\n            j -= 1\n    return -1\n\n\nprint(find_duplicate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]))"
    },
    {
      "rank": 99,
      "score": 1.0,
      "candidate": "def firstDuplicate(arr):\n    # Fill this in.\n    # return arr.index(max(arr)) + 1\n    return (arr.index(max(arr)) + 1)\n\n\nprint(firstDuplicate([1, 2, 3, 4, 4, 5]))"
    },
    {
      "rank": 100,
      "score": 1.0,
      "candidate": "def first_duplicate(nums):\n    for num in nums:\n        if nums.count(num) > 1:\n            return num\n\n\nprint(first_duplicate([1, 2, 3, 4, 5, 5, 6, 6, 7, 7, 8, 8, 8, 9, 9, 9, 10, 10, 10, 11, 11, 11, 11, 12, 12, 12, 13, 13, 13, 13, 14, 14, 14, 15, 15, 15, 15, 16, 16, 16, 16, 16, 17, 17, 17, 17, 17, 18, 18, 18, 18, 18, 18, 19, 19, 19, 19, 19, 20, 20, 20, 20, 21, 21, 21, 21, 22, 22, 22, 23, 23, 23, 23, 23, 24, 24, 24, 24, 24, 25, 25, 25, 25, 26, 26, 26, 27, 27, 27, 27, 27, 28, 28, 28, 28, 29, 29, 30, 30, 31, 31, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32"
    }
  ]
}