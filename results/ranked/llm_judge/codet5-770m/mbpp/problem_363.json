{
  "timestamp": "2025-09-14T15:08:02.948495",
  "method": "improved_llm_judge",
  "judge_model": "codellama/CodeLlama-7b-Python-hf",
  "target_model": "codet5-770m",
  "dataset": "mbpp",
  "problem_number": 363,
  "total_candidates": 100,
  "results": [
    {
      "rank": 1,
      "score": 10.0,
      "candidate": "def permutations(s):\n    if len(s) == 0:\n        print(\"\")\n    else:\n        for i in range(len(s)):\n            for j in range(len(s)):\n                if i!= j:\n                    s1 = s[:i] + s[j+1:]\n                    s2 = s[:j] + s[i+1:]\n                    permutations(s1)\n                    permutations(s2)\n\ns = \"aab\"\npermutations(s)"
    },
    {
      "rank": 2,
      "score": 10.0,
      "candidate": "def print_permutations(string):\n    if len(string) == 1:\n        print(string)\n        return\n    for i in range(1, len(string) + 1):\n        print_permutations(string[:i])\n        print_permutations(string[i:])\n\n\nprint_permutations(\"abcd\")"
    },
    {
      "rank": 3,
      "score": 10.0,
      "candidate": "def permute(string):\n    if string == \"\":\n        return\n    if string[0]!= string[-1]:\n        permute(string[1:-1])\n    else:\n        print(string)\n\npermute(\"abc\")"
    },
    {
      "rank": 4,
      "score": 10.0,
      "candidate": "def permutations(string):\n    if string == '':\n        return\n    print(string)\n    for i in range(len(string)):\n        print(string[:i] + string[i+1:] + string[:i])\n\nif __name__ == \"__main__\":\n    permutations(\"\")"
    },
    {
      "rank": 5,
      "score": 10.0,
      "candidate": "def permutations(s):\n    if len(s) <= 1:\n        print(s)\n    else:\n        for i in range(len(s)):\n            new_s = s[:i] + s[i + 1:]\n            permutations(new_s)\n\n\npermutations(\"abc\")"
    },
    {
      "rank": 6,
      "score": 10.0,
      "candidate": "def permutations(s, n):\n    if n == 0:\n        print(s)\n    else:\n        for i in range(n):\n            s = s[:i] + s[i+1:]\n            print(s)\n            permutations(s, n-1)\n\nif __name__ == '__main__':\n    permutations('abc', 3)"
    },
    {
      "rank": 7,
      "score": 10.0,
      "candidate": "def permutations(str):\n    # your code here\n    if len(str) == 0:\n        print(str)\n    else:\n        for i in range(len(str)):\n            for j in range(i, len(str)):\n                permutations(str[:i] + str[j] + str[i+1:])\n\nstr = input()\npermutations(str)"
    },
    {
      "rank": 8,
      "score": 10.0,
      "candidate": "def permutations(string):\n    if len(string) == 0:\n        print(string)\n        return\n    for i in range(len(string)):\n        for j in range(i + 1, len(string)):\n            permutations(string[:i] + string[i + 1:] + string[:i] + string[j + 1:])\n\nif __name__ == \"__main__\":\n    permutations(\"abc\")\n    permutations(\"abcd\")\n    permutations(\"abcc\")\n    permutations(\"aabb\")\n    permutations(\"aabbcc\")\n    permutations(\"aabbcca\")\n    permutations(\"aabbccbb\")\n    permutations(\"aabbccbba\")\n    permutations(\"aabbccbbb\")\n    permutations(\"aabbccbbbb\")\n    permutations(\"aabbccbbbbb\")\n    permutations(\"abcc\")\n    permutations(\"abcca\")\n    permutations(\"abccaabb\")\n    permutations(\"abccaabbcc\")\n    permutations(\"abccaabbcca\")\n    permutations(\"abccaabbccbb\")\n    permutations(\"abccaabbccbba\")\n    permutations(\"abccaabbccbbbb\")\n    permutations(\"abccaabbccbbbbb\")\n    permutations(\"abccaabbccbbbbbb\")\n    permutations(\"abccaabbccbbbbbbb\")\n    permutations(\"abccaabbccbbbbbbb\")\n    permutations(\"abccaabbccbbbbbbbbb\")\n    permutations(\"abccaabbccbbbbbbbbb\")\n    permutations(\"abccaabbccbbbbbbbbb\")\n    permutations(\"abccaabbccbbbbbbbbbbb\")\n    permutations(\"abccaabbccbbbbbbbbbbb\")"
    },
    {
      "rank": 9,
      "score": 10.0,
      "candidate": "def permute(string):\n    if len(string) == 0:\n        print(\"empty string\")\n    else:\n        print(string)\n        for i in range(len(string)):\n            permute(string[:i] + string[i + 1:])\n\n\nstring = \"abc\"\npermute(string)"
    },
    {
      "rank": 10,
      "score": 10.0,
      "candidate": "def permutations(s):\n    # Write your code here\n    if len(s) == 1:\n        print(s)\n    else:\n        for i in range(len(s)):\n            for j in range(i + 1, len(s)):\n                print(s[i], s[j])\n\n\nif __name__ == '__main__':\n    permutations('abcd')"
    },
    {
      "rank": 11,
      "score": 10.0,
      "candidate": "def print_permutations(str):\n    if len(str) == 0:\n        print()\n    else:\n        for i in range(len(str)):\n            print_permutations(str[:i]+str[i+1:])\n\n\nprint_permutations(\"abc\")\nprint_permutations(\"abcde\")\nprint_permutations(\"abcdeabc\")\nprint_permutations(\"abcd\")\nprint_permutations(\"abcdabc\")\nprint_permutations(\"abcdeabcde\")\nprint_permutations(\"abcdeabcdeabc\")\nprint_permutations(\"abcdeabcdeabcde\")\nprint_permutations(\"abcdeabcdeabcdeabc\")\nprint_permutations(\"abcdeabcdeabcdeabcde\")\nprint_permutations(\"abcdeabcdeabcdeabcde\")\nprint_permutations(\"abcdeabcdeabcdeabcde\")\nprint_permutations(\"abcdeabcdeabcdeabcde\")\nprint_permutations(\"abcdeabcdeabcdeabcde\")\nprint_permutations(\"abcdeabcdeabcdeabcde\")\nprint_permutations(\"abcdeabcdeabcdeabcde\")\nprint_permutations(\"abcdeabcdeabcdeabcde\")\nprint_permutations(\"abcdeabcdeabcdeabcde\")\nprint_permutations(\"abcdeabcdeabcdeabcde\")\nprint_permutations(\"abcdeabcdeabcdeabcde\")"
    },
    {
      "rank": 12,
      "score": 10.0,
      "candidate": "def permutations(str):\n    if len(str) == 0:\n        print('')\n    else:\n        for i in range(len(str)):\n            print(str[i], end=' ')\n            permutations(str[0:i] + str[i+1:])\n        print()\n\n\nstr = input('Input string: ')\npermutations(str)"
    },
    {
      "rank": 13,
      "score": 10.0,
      "candidate": "def permute(str):\n    if len(str) == 1:\n        print(str)\n    else:\n        for i in range(1, len(str)):\n            for j in range(len(str)):\n                print(str[i], end=\"\")\n            print()\n\npermute(\"abc\")"
    },
    {
      "rank": 14,
      "score": 10.0,
      "candidate": "def permute(s):\n    if s == '':\n        return\n    for i in range(len(s)):\n        permute(s[:i] + s[i + 1:])\n\n\nif __name__ == '__main__':\n    s = 'aabbcc'\n    permute(s)"
    },
    {
      "rank": 15,
      "score": 9.0,
      "candidate": "def permutations(str1):\n    if len(str1) == 1:\n        print(str1)\n    else:\n        for i in range(len(str1)):\n            for j in range(len(str1)):\n                if i!= j:\n                    str1_new = str1[:i] + str1[j:]\n                    permutations(str1_new)\n\n\npermutations(\"abc\")\npermutations(\"abcde\")"
    },
    {
      "rank": 16,
      "score": 9.0,
      "candidate": "def permute(str):\n    if str == \"\":\n        return\n    print(str)\n    for i in range(len(str)):\n        permute(str[:i]+str[i+1:])\n\npermute(\"abc\")\npermute(\"abcd\")\npermute(\"abcdab\")\npermute(\"aabb\")\npermute(\"abab\")"
    },
    {
      "rank": 17,
      "score": 9.0,
      "candidate": "import time\n\ndef permute(string):\n\tif len(string) == 1:\n\t\tprint(string)\n\telse:\n\t\tfor i in range(len(string)):\n\t\t\tpermute(string[:i]+string[i+1:])\n\n\nif __name__ == \"__main__\":\n\tstart = time.time()\n\tstring = \"abc\"\n\tpermute(string)\n\tprint(\"--- %s seconds ---\" % (time.time() - start))"
    },
    {
      "rank": 18,
      "score": 9.0,
      "candidate": "def permutations(s):\n    if not s:\n        print(\"Permutations of empty string are:\")\n    else:\n        permutations(s[1:])\n        print(\"Permutations of\", s, \"are:\")\n        permutations(s[:-1])\n\n\nif __name__ == \"__main__\":\n    permutations(\"abc\")"
    },
    {
      "rank": 19,
      "score": 9.0,
      "candidate": "def permute(string):\n    if not string:\n        return\n    if len(string) == 1:\n        print(string)\n        return\n    for i in range(len(string)):\n        permute(string[:i] + string[i + 1:])\n\n\npermute(\"abc\")"
    },
    {
      "rank": 20,
      "score": 8.0,
      "candidate": "def permute(string, n):\n    if n == 1:\n        print(string)\n    else:\n        for i in range(n):\n            permute(string + string[0], n - 1)\n            permute(string + string[i], n - 1)\n\n\npermute(\"\", 2)"
    },
    {
      "rank": 21,
      "score": 8.0,
      "candidate": "import random\n\n\ndef permute_string(string):\n    if not string:\n        return\n    permute_string(string[1:])\n    permute_string(string[:-1])\n\n\ndef main():\n    string = input(\"Enter the string: \")\n    random.shuffle(string)\n    permute_string(string)\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 22,
      "score": 8.0,
      "candidate": "def permutations(s):\n    \"\"\"\n    :type s: str\n    :rtype: List[str]\n    \"\"\"\n    if len(s) == 0:\n        return [s]\n    else:\n        return permutations(s[:-1]) + [s + s[0]]\n\n\nif __name__ == \"__main__\":\n    assert permutations(\"abc\") == [\"abc\", \"bac\", \"baca\", \"bca\", \"cab\", \"caa\", \"caab\", \"caba\", \"cba\", \"cabab\"]\n    assert permutations(\"ab\") == [\"ab\"]"
    },
    {
      "rank": 23,
      "score": 8.0,
      "candidate": "def perm(str):\n    if len(str) == 0:\n        print(str)\n    else:\n        for i in range(len(str)):\n            perm(str[:i] + str[i + 1:])\n\n\nperm(\"abc\")"
    },
    {
      "rank": 24,
      "score": 8.0,
      "candidate": "def permutations(str1):\n    if len(str1) == 0:\n        print(\"\")\n    else:\n        for i in range(len(str1)):\n            print(str1[:i] + str1[i] + str1[i+1:])\n        permutations(str1[1:])\n\n\npermutations(\"abcd\")\npermutations(\"abcdabcd\")\npermutations(\"abcdabcdabcd\")"
    },
    {
      "rank": 25,
      "score": 8.0,
      "candidate": "def permutation(string):\n    if len(string) == 0:\n        print([string])\n    else:\n        for i in range(len(string)):\n            string_perm = string[:i] + string[i + 1:]\n            permutation(string_perm)\n            string_perm = string[:i] + string[i + 1:] + string[:i]\n            permutation(string_perm)\n\n\nif __name__ == \"__main__\":\n    permutation(\"abcd\")"
    },
    {
      "rank": 26,
      "score": 8.0,
      "candidate": "def print_permutations(str1):\n    if len(str1) <= 1:\n        print(str1)\n        return\n    for i in range(len(str1)):\n        print_permutations(str1[:i] + str1[i + 1:])\n\n\n\nprint_permutations(\"abc\")\nprint_permutations(\"def\")\nprint_permutations(\"ghi\")\nprint_permutations(\"abcd\")\nprint_permutations(\"abcde\")\nprint_permutations(\"abcdab\")\nprint_permutations(\"abcdabcd\")\nprint_permutations(\"abcdabcdabcd\")\nprint_permutations(\"abcdabcdabcdabcdabcd\")"
    },
    {
      "rank": 27,
      "score": 8.0,
      "candidate": "def print_permutations(string):\n    if len(string) == 1:\n        print(string)\n    else:\n        for i in range(len(string)):\n            print_permutations(string[:i] + string[i + 1:])\n\n\nif __name__ == \"__main__\":\n    print_permutations(\"abc\")"
    },
    {
      "rank": 28,
      "score": 8.0,
      "candidate": "def permute(str):\n    if len(str) == 1:\n        print(str)\n    else:\n        for i in range(len(str)):\n            print(str[:i]+permute(str[i+1:])+str[i+1:])\n\n\npermute('abc')"
    },
    {
      "rank": 29,
      "score": 8.0,
      "candidate": "def permutations(s):\n    \"\"\"\n    :type s: str\n    :rtype: None\n    \"\"\"\n    if not s:\n        return\n    if len(s) == 1:\n        print(s)\n    else:\n        for i in range(len(s)):\n            print(s[:i] + s[i + 1:])\n            permutations(s[i + 1:])\n\n\npermutations(\"ab\")"
    },
    {
      "rank": 30,
      "score": 8.0,
      "candidate": "def permutations(str):\n    str = str.lower()\n    if len(str) == 0:\n        print(str)\n    else:\n        for i in range(len(str)):\n            for j in range(i+1, len(str)):\n                str1 = str[:i] + str[j] + str[i+1:]\n                str2 = str[i] + str[j] + str[:i]\n                print(str1 + str2)\n\npermutations('abc')\npermutations('abcd')\npermutations('a')"
    },
    {
      "rank": 31,
      "score": 8.0,
      "candidate": "import itertools\n\ndef permutation(s:str):\n    result = []\n    if len(s) == 0:\n        result.append([s])\n    else:\n        for c in itertools.permutations(s):\n            result.append([s] + c)\n    return result\n\n\n\n\nif __name__ == '__main__':\n    s = 'abc'\n    print(permutation(s))"
    },
    {
      "rank": 32,
      "score": 8.0,
      "candidate": "def permute(string):\n    if len(string) == 1:\n        print(string)\n    else:\n        for i in range(1, len(string) + 1):\n            permute(string[:i])\n            permute(string[i:])\n\n\npermute(\"ab\")"
    },
    {
      "rank": 33,
      "score": 8.0,
      "candidate": "def permute(s):\n    if len(s) == 1:\n        print(s)\n    else:\n        for i in range(len(s)):\n            print(s[:i] + s[i+1:])\n            permute(s[:i] + s[i+1:])\n\nif __name__ == '__main__':\n    s = input()\n    permute(s)"
    },
    {
      "rank": 34,
      "score": 8.0,
      "candidate": "def permute(str):\n    res = []\n    for i in range(len(str)):\n        if i == 0:\n            res.append(str)\n        else:\n            for j in range(len(str)):\n                if j == 0:\n                    res.append(str[i:])\n                else:\n                    res.append(str[i] + str[j])\n    return res\n\n\nprint(permute(\"aabcc\"))"
    },
    {
      "rank": 35,
      "score": 8.0,
      "candidate": "def permute(str):\n    if len(str) == 0:\n        print([str])\n    else:\n        for i in range(len(str)):\n            for j in range(i + 1, len(str)):\n                print(str[i], str[j], end='')\n                permute(str[:i] + str[j:] + str[i + 1:])\n\n\nif __name__ == '__main__':\n    permute('abc')\n    permute('abcd')\n    permute('abcdab')\n    permute('abcdabc')\n    permute('aab')"
    },
    {
      "rank": 36,
      "score": 8.0,
      "candidate": "def permutations(string):\n    if string == \"\":\n        return\n    else:\n        for i in range(len(string)):\n            for j in range(i+1, len(string)+1):\n                print(string[:i]+string[i]+string[j-1])\n\npermutations(\"abc\")"
    },
    {
      "rank": 37,
      "score": 8.0,
      "candidate": "def permute(s, n):\n    if n == 1:\n        print(s)\n    else:\n        for i in range(n):\n            permute(s[:i] + s[i+1:], n-1)\n\n\nif __name__ == \"__main__\":\n    s = \"abc\"\n    n = len(s)\n    permute(s, n)"
    },
    {
      "rank": 38,
      "score": 8.0,
      "candidate": "def permute_string(string):\n    if len(string) == 1:\n        print(string)\n        return\n    for i in range(len(string)):\n        permute_string(string[:i] + string[i + 1:])\n\n\nif __name__ == '__main__':\n    string = 'abc'\n    permute_string(string)"
    },
    {
      "rank": 39,
      "score": 8.0,
      "candidate": "def permute(string):\n    if string == \"\":\n        print(\"\")\n        return\n\n    string = list(string)\n    permute(string[1:])\n    print(\"\".join(string))\n\npermute(\"abc\")"
    },
    {
      "rank": 40,
      "score": 8.0,
      "candidate": "def permute(string):\n    if len(string) <= 1:\n        print(string)\n    else:\n        for i in range(len(string)):\n            permute(string[:i] + string[i + 1:])\n\n\nif __name__ == \"__main__\":\n    string = \"abc\"\n    permute(string)"
    },
    {
      "rank": 41,
      "score": 8.0,
      "candidate": "def perm(string, n):\n    if len(string) == 0:\n        print(\"\".join(string))\n        return\n    for i in range(n):\n        perm(string + string[i], n)\n\n\nif __name__ == \"__main__\":\n    string = \"abc\"\n    n = len(string)\n    perm(string, n)"
    },
    {
      "rank": 42,
      "score": 8.0,
      "candidate": "def print_permutations(string):\n    # write your code here\n    if not string:\n        print(\"Empty string\")\n        return\n    if len(string) == 1:\n        print(string)\n    else:\n        for i in range(1, len(string)+1):\n            for j in range(len(string)-i+1):\n                print(string[:j]+string[j+1:]+string[:j])\n\nif __name__ == \"__main__\":\n    print_permutations(\"abc\")"
    },
    {
      "rank": 43,
      "score": 8.0,
      "candidate": "def permute_str(str_):\n    if len(str_) == 0:\n        print(\"\")\n    else:\n        for i in range(len(str_)):\n            print(str_[:i]+str_[i+1:])\n\nif __name__ == \"__main__\":\n    str_ = input(\"Enter the string: \")\n    permute_str(str_)"
    },
    {
      "rank": 44,
      "score": 8.0,
      "candidate": "def permute(str):\n    if not str:\n        return\n\n    perm = [[]]\n    for i in range(len(str)):\n        perm = perm + [list(perm) for perm in perm]\n    return perm\n\n\ndef permute_2(str):\n    if not str:\n        return\n\n    if len(str) == 1:\n        print(str)\n    else:\n        for i in range(len(str)):\n            permute_2(str[:i] + str[i + 1:])\n\n\nif __name__ == \"__main__\":\n    print(permute(\"abc\"))\n    print(permute(\"ab\"))\n    print(permute(\"abcd\"))\n    print(permute(\"abcde\"))\n    print(permute(\"abcdef\"))\n    print(permute(\"abab\"))"
    },
    {
      "rank": 45,
      "score": 8.0,
      "candidate": "def permutations(string):\n    if string == \"\":\n        print(\"\")\n    else:\n        for i in range(len(string)):\n            print(string[:i] + string[i+1:] + string[:i])\n\npermutations(\"abc\")"
    },
    {
      "rank": 46,
      "score": 8.0,
      "candidate": "def permutations(s):\n    \"\"\"\n    :type s: str\n    :rtype: None\n    \"\"\"\n    if not s:\n        return\n    for i in range(1, len(s) + 1):\n        for j in range(i):\n            if s[j] == s[i - 1]:\n                s = s[:j] + s[j + 1:] + s[:j]\n                print(s)\n\n\nif __name__ == \"__main__\":\n    permutations(\"abc\")\n    permutations(\"abcd\")\n    permutations(\"a\")\n    permutations(\"ab\")"
    },
    {
      "rank": 47,
      "score": 8.0,
      "candidate": "def permutations(str):\n    if len(str) == 0:\n        print(str)\n    else:\n        for i in range(len(str)):\n            print(str[i] + \" \" + permutations(str[i + 1:]))\n\n\nif __name__ == \"__main__\":\n    permutations(\"abc\")"
    },
    {
      "rank": 48,
      "score": 8.0,
      "candidate": "def print_permutations(str):\n    if len(str) == 0:\n        print(str)\n        return\n    print_permutations(str[1:])\n    print_permutations(str[:-1])\n\nprint_permutations(\"abcd\")"
    },
    {
      "rank": 49,
      "score": 8.0,
      "candidate": "def permute(s):\n    if not s:\n        return\n    if s[0] not in s:\n        print(s)\n        return\n    permute(s[1:])\n    permute(s[0:1])\n\n\nif __name__ == \"__main__\":\n    s = input(\"Enter the string: \")\n    permute(s)"
    },
    {
      "rank": 50,
      "score": 8.0,
      "candidate": "def print_permutations(string):\n    permutations = []\n    if not string:\n        permutations.append([])\n    else:\n        for i in range(len(string)):\n            temp = []\n            temp.append(string[0:i])\n            for j in permutations:\n                temp.append(string[i] + j)\n            permutations.append(temp)\n    return permutations\n\n\ndef main():\n    string = \"aabccdde\"\n    print_permutations(string)\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 51,
      "score": 8.0,
      "candidate": "def permute(string):\n    permutations = []\n    for i in range(len(string)):\n        sub_permutation = string[:i] + string[i+1:]\n        if sub_permutation not in permutations:\n            permutations.append(sub_permutation)\n    return permutations\n\nif __name__ == \"__main__\":\n    print(permute(\"abc\"))"
    },
    {
      "rank": 52,
      "score": 8.0,
      "candidate": "def permute(str):\n    if str == \"\":\n        print(\"\")\n    else:\n        permute(str[:-1])\n        print(str)\n\n\nif __name__ == '__main__':\n    permute(\"\")"
    },
    {
      "rank": 53,
      "score": 8.0,
      "candidate": "from typing import List\n\n\ndef permute(string: str) -> List[str]:\n    \"\"\"\n    :type string: str\n    :rtype: List[str]\n    \"\"\"\n    if len(string) == 1:\n        return [string]\n    if len(string) == 0:\n        return []\n    else:\n        result = []\n        for i in range(len(string)):\n            for j in permute(string[:i] + string[i + 1:]):\n                result.append(string[i] + j)\n        return result\n\n\nif __name__ == \"__main__\":\n    assert permute(\"\") == [\"\"]\n    assert permute(\"ab\") == [\"ab\"]\n    assert permute(\"abcd\") == [\"abcd\", \"abcdab\", \"abcdabcd\"]\n    assert permute(\"abc\") == [\"abc\", \"abcde\", \"abcdeab\", \"abcdeabcd\", \"abcdabcdab\", \"abcdabcdabcd\"]\n    assert permute(\"abcd\") == [\"abcd\", \"abcdab\", \"abcdabcd\", \"abcdabcdab\"]\n    assert permute(\"abcd\") == [\"abcd\", \"abcdab\", \"abcdabcdab\"]\n    assert permute(\"abcd\") == [\"abcd\", \"abcdab\", \"abcdabcdab\"]"
    },
    {
      "rank": 54,
      "score": 8.0,
      "candidate": "def permute(string):\n    if string is None or len(string) == 0:\n        return\n    print(string)\n    permute(string[1:])\n    permute(string[:-1])\n\nif __name__ == \"__main__\":\n    permute(\"aab\")"
    },
    {
      "rank": 55,
      "score": 8.0,
      "candidate": "def permutations(str1):\n    if len(str1) == 1:\n        print(str1)\n    else:\n        for i in range(len(str1)):\n            for j in range(i+1, len(str1)):\n                permutations(str1[:i] + str1[j] + str1[i+1:])"
    },
    {
      "rank": 56,
      "score": 8.0,
      "candidate": "def permutations(str):\n    if len(str) == 0:\n        print(\"\")\n    else:\n        for i in range(1, len(str) + 1):\n            print(str[:i] + str[i:])\n\n\npermutations(\"abc\")\npermutations(\"abcde\")\npermutations(\"abcdeabc\")\npermutations(\"a\")\npermutations(\"abcd\")"
    },
    {
      "rank": 57,
      "score": 8.0,
      "candidate": "def permutations(s):\n    if len(s) == 1:\n        print(s)\n    else:\n        for i in range(len(s)):\n            for j in range(len(s)):\n                if i!= j:\n                    permutations(s[:i] + s[j + 1:])\n\n\nif __name__ == \"__main__\":\n    permutations(\"abc\")\n    permutations(\"a\")\n    permutations(\"abc\")"
    },
    {
      "rank": 58,
      "score": 8.0,
      "candidate": "def permute_string(str):\n    if len(str) == 0:\n        print([])\n    else:\n        for i in range(len(str)):\n            permute_string(str[:i] + str[i + 1:])\n            permute_string(str[:i] + str[i + 1:])\n\nif __name__ == \"__main__\":\n    permute_string(\"ab\")\n    permute_string(\"aba\")\n    permute_string(\"abc\")\n    permute_string(\"abcde\")\n    permute_string(\"abcdeabc\")\n    permute_string(\"abcdeabcde\")\n    permute_string(\"abcdeabcdeab\")\n    permute_string(\"abcdeabcdeaba\")"
    },
    {
      "rank": 59,
      "score": 8.0,
      "candidate": "import itertools\n\n\ndef permutations(s):\n    return list(itertools.permutations(s))\n\n\nif __name__ == \"__main__\":\n    print(permutations('abc'))"
    },
    {
      "rank": 60,
      "score": 8.0,
      "candidate": "def print_permutations(string):\n    if not string:\n        print(\"\")\n    else:\n        print_permutations(string[1:])\n        print_permutations(string[:-1])\n\n\nprint_permutations(\"abc\")\nprint_permutations(\"aba\")\nprint_permutations(\"ab\")"
    },
    {
      "rank": 61,
      "score": 8.0,
      "candidate": "def print_permutations(string):\n    if string == \"\":\n        return\n    print_permutations(string[1:])\n    print(string)\n    print_permutations(string[0])\n\nprint_permutations(\"abc\")"
    },
    {
      "rank": 62,
      "score": 8.0,
      "candidate": "def permute(s):\n    if len(s) == 1:\n        print(s)\n    else:\n        for i in range(1, len(s) + 1):\n            permute(s[:i])\n            permute(s[i:])\n\n\nif __name__ == \"__main__\":\n    permute(\"abc\")"
    },
    {
      "rank": 63,
      "score": 8.0,
      "candidate": "def permute(string, i=0, j=0):\n    if i == len(string) - 1 and j == len(string):\n        print(string)\n        return\n    for k in range(i, len(string)):\n        permute(string, i + 1, j)\n        permute(string, i, j + 1)\n\n\npermute(\"abc\")"
    },
    {
      "rank": 64,
      "score": 8.0,
      "candidate": "def permute(string):\n    if string == \"\":\n        return\n\n    for i in range(len(string)):\n        for j in range(len(string)):\n            permute(string[:i] + string[j+1:] + string[:i])\n\n\nif __name__ == \"__main__\":\n    string = \"abcd\"\n    permute(string)"
    },
    {
      "rank": 65,
      "score": 8.0,
      "candidate": "def permutations(s):\n    if len(s) == 1:\n        print(s)\n    else:\n        for i in range(len(s)):\n            for j in range(len(s)):\n                permutations(s[:i] + s[i+1:] + s[:i])\n\n\nif __name__ == \"__main__\":\n    permutations(\"abc\")"
    },
    {
      "rank": 66,
      "score": 8.0,
      "candidate": "def permute(s):\n    res = []\n    if not s:\n        res.append([])\n    elif len(s) == 1:\n        res.append([s])\n    else:\n        for i in range(len(s)):\n            for perm in permute(s[:i] + s[i+1:]):\n                res.append([s[i]] + perm)\n\n    return res\n\n\nprint(permute(\"abc\"))"
    },
    {
      "rank": 67,
      "score": 8.0,
      "candidate": "def permute(string):\n    \"\"\"\n    :type string: str\n    :rtype: None\n    \"\"\"\n    if len(string) <= 1:\n        print(string)\n    else:\n        for i in range(len(string)):\n            permute(string[:i] + string[i + 1:])\n\n\nif __name__ == '__main__':\n    permute('ab')"
    },
    {
      "rank": 68,
      "score": 8.0,
      "candidate": "def permute(str):\n    # Write your code here\n    if len(str) <= 1:\n        print(str)\n    else:\n        for i in range(1, len(str)+1):\n            permute(str[:i])\n            permute(str[i:])\n\n\npermute('ab')"
    },
    {
      "rank": 69,
      "score": 8.0,
      "candidate": "def permute(s):\n    return permute_helper(s, set(), 0)\n\n\ndef permute_helper(s, perm, i):\n    if i == len(s):\n        print(perm)\n        return\n    for j in range(i, len(s)):\n        if s[i] == s[j]:\n            continue\n        perm.add(s[i])\n        permute_helper(s, perm, j + 1)\n        perm.remove(s[i])\n\n\npermute(\"abc\")"
    },
    {
      "rank": 70,
      "score": 8.0,
      "candidate": "def permute(string):\n    if len(string) == 0:\n        print(string)\n    else:\n        for i in range(len(string)):\n            for j in range(len(string)):\n                permute(string[:i] + string[j + 1:])\n\n\nif __name__ == '__main__':\n    permute(\"abc\")"
    },
    {
      "rank": 71,
      "score": 8.0,
      "candidate": "def permute(string):\n    if string == \"\":\n        print(\"\")\n    else:\n        for i in range(1, len(string)+1):\n            permute(string[:i])\n            print(string[:i])\n\n\npermute(\"a\")"
    },
    {
      "rank": 72,
      "score": 8.0,
      "candidate": "def permutations(string):\n    if not string:\n        print(\"\")\n        return\n    if string[0] == string[-1]:\n        print(string)\n    else:\n        for i in range(len(string)):\n            for j in range(len(string)):\n                if i == j:\n                    print(string[i], end=\"\")\n                else:\n                    permutations(string[i+1:j+1])\n\n\nif __name__ == \"__main__\":\n    permutations(\"abc\")\n    permutations(\"aba\")\n    permutations(\"a\")\n    permutations(\"aab\")\n    permutations(\"aabb\")\n    permutations(\"abcabc\")\n    permutations(\"aabbac\")\n    permutations(\"ababab\")\n    permutations(\"abababababababab\")\n    permutations(\"abababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababab"
    },
    {
      "rank": 73,
      "score": 8.0,
      "candidate": "def permute(s):\n    if len(s) == 0:\n        print('')\n    else:\n        for i in range(len(s)):\n            permute(s[:i] + s[i + 1:])\n\n\npermute('a')\npermute('ab')\npermute('abcd')\npermute('abc')\npermute('abcde')"
    },
    {
      "rank": 74,
      "score": 8.0,
      "candidate": "def permute_string(string):\n    if string == '':\n        return\n    result = list()\n    permute_string(string[1:])\n    for i in range(len(string)):\n        for j in range(len(string)):\n            if i!= j and string[i]!= string[j]:\n                result.append(string[i] + string[j])\n    print(result)\n\n\nif __name__ == \"__main__\":\n    permute_string('abc')\n    permute_string('ab')"
    },
    {
      "rank": 75,
      "score": 8.0,
      "candidate": "def permute(string):\n    if not string:\n        return\n    result = []\n    permute(string[1:], result)\n    print(result)\n\n\npermute(\"abc\")"
    },
    {
      "rank": 76,
      "score": 8.0,
      "candidate": "def permutation(str1):\n    if not str1:\n        return\n\n    for i in range(1, len(str1) + 1):\n        for j in range(i):\n            if str1[j]!= str1[i - 1]:\n                str1[j], str1[i - 1] = str1[i - 1], str1[j]\n\n                permutation(str1)\n\n                str1[j], str1[i - 1] = str1[i - 1], str1[j]\n\n\nif __name__ == \"__main__\":\n    str1 = \"abcd\"\n    permutation(str1)"
    },
    {
      "rank": 77,
      "score": 8.0,
      "candidate": "def permute(string, n):\n    if n == 0:\n        print(string)\n    else:\n        for i in range(n):\n            permute(string+string[i], n-1)\n\nif __name__ == \"__main__\":\n    permute(\"abc\", 3)"
    },
    {
      "rank": 78,
      "score": 8.0,
      "candidate": "def permute(str):\n    if not str:\n        return\n    if str == str[0]:\n        print(\"\".join(str))\n    else:\n        for i in range(1, len(str)):\n            for j in range(len(str) - i + 1):\n                print(str[:j + 1] + str[j + 1:] + str[:j] + str[j + 1:])\n\n\nif __name__ == \"__main__\":\n    permute(\"abc\")"
    },
    {
      "rank": 79,
      "score": 8.0,
      "candidate": "def print_permutations(s):\n    if s == \"\":\n        print(\"\")\n    else:\n        print_permutations(s[1:])\n        print_permutations(s[:-1])\n\nprint_permutations(\"abc\")"
    },
    {
      "rank": 80,
      "score": 8.0,
      "candidate": "def permutations(str1):\n    if len(str1) == 0:\n        return []\n    else:\n        result = []\n        for i in range(len(str1)):\n            if str1[i] == str1[-1]:\n                result.append(str1[:i] + str1[i + 1:])\n            else:\n                for j in permutations(str1[:i] + str1[i + 1:]):\n                    result.append(str1[:i] + j + str1[i + 1:])\n        return result\n\nprint(permutations(\"abc\"))"
    },
    {
      "rank": 81,
      "score": 8.0,
      "candidate": "def permute(str):\n\tif len(str) == 1:\n\t\tprint(str)\n\telse:\n\t\tfor i in range(len(str)):\n\t\t\tpermute(str[:i] + str[i+1:])\n\npermute(\"abc\")"
    },
    {
      "rank": 82,
      "score": 8.0,
      "candidate": "def permute(str):\n    if len(str) == 0:\n        print(str)\n        return\n    for i in range(len(str)):\n        for j in range(i+1, len(str)):\n            if str[i]!= str[j]:\n                permute(str[:i] + str[j] + str[i+1:])\n\n\ndef main():\n    string = input()\n    permute(string)\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 83,
      "score": 8.0,
      "candidate": "def permutations(str):\n    if len(str) == 0:\n        print(str)\n    else:\n        for i in range(len(str)):\n            for j in range(i+1, len(str)):\n                print(str[:i]+str[i]+str[j])\n\nif __name__ == '__main__':\n    permutations(\"abc\")"
    },
    {
      "rank": 84,
      "score": 8.0,
      "candidate": "def print_permutations(string):\n    if len(string) <= 1:\n        print(string)\n    else:\n        for i in range(1, len(string) + 1):\n            for j in range(len(string) - i + 1):\n                print(string[j:j+i], end=\"\")\n            print()\n\n\nprint_permutations(\"ab\")\nprint_permutations(\"abcd\")\nprint_permutations(\"abcdabc\")"
    },
    {
      "rank": 85,
      "score": 8.0,
      "candidate": "def permute(string, n):\n    if n == 0:\n        print(string)\n    else:\n        for i in range(n):\n            permute(string + string[i], n - 1)\n\nif __name__ == '__main__':\n    permute(\"abc\", 3)"
    },
    {
      "rank": 86,
      "score": 8.0,
      "candidate": "def permutations(string):\n    if not string:\n        print(\"\")\n        return\n    if len(string) == 1:\n        print(string)\n    else:\n        for i in range(len(string)):\n            print(string[:i] + string[i + 1:] + string[:i])\n            permutations(string[:i] + string[i + 1:])\n\n\nif __name__ == '__main__':\n    permutations(\"abc\")\n    permutations(\"a\")\n    permutations(\"ab\")\n    permutations(\"aba\")\n    permutations(\"abaab\")\n    permutations(\"ababb\")\n    permutations(\"ababbab\")\n    permutations(\"abababab\")\n    permutations(\"aabababab\")\n    permutations(\"aababababa\")\n    permutations(\"aababababaab\")\n    permutations(\"aababababaababab\")\n    permutations(\"aabababababababababababababab\")\n    permutations(\"aababababababababababababababababababab\")"
    },
    {
      "rank": 87,
      "score": 8.0,
      "candidate": "def print_permutations(s):\n    if len(s) == 0:\n        print(s)\n    else:\n        for i in range(len(s)):\n            print_permutations(s[:i] + s[i+1:])\n\n\nprint_permutations(\"abc\")"
    },
    {
      "rank": 88,
      "score": 8.0,
      "candidate": "def permute(str):\n    if len(str) == 0:\n        print(\"\")\n    else:\n        for i in range(1, len(str)+1):\n            print(str[:i], end=\"\")\n            permute(str[i:])\n\n\nif __name__ == '__main__':\n    permute(\"\")"
    },
    {
      "rank": 89,
      "score": 8.0,
      "candidate": "def permute(s):\n    if len(s) == 1:\n        print(s)\n    else:\n        for i in range(len(s)):\n            permute(s[:i]+s[i+1:])\n\npermute('abc')"
    },
    {
      "rank": 90,
      "score": 8.0,
      "candidate": "def permute(str):\n    if len(str) == 1:\n        print(str)\n    else:\n        for i in range(len(str)):\n            print(str[:i] + permute(str[i + 1:]))\n\n\npermute(\"aab\")"
    },
    {
      "rank": 91,
      "score": 8.0,
      "candidate": "def print_permutations(string, length):\n    if length == 0:\n        print(string)\n    else:\n        print_permutations(string, length - 1)\n        print_permutations(string + string[0], length - 1)\n\n\nstring = \"abcd\"\nlength = len(string)\nprint_permutations(string, length)"
    },
    {
      "rank": 92,
      "score": 8.0,
      "candidate": "def permute(string):\n    if len(string) == 0:\n        print(string)\n    else:\n        for i in range(len(string)):\n            permute(string[:i] + string[i+1:])\n\nif __name__ == '__main__':\n    permute(\"abc\")"
    },
    {
      "rank": 93,
      "score": 8.0,
      "candidate": "def permutations(string):\n    string = list(string)\n    result = []\n    for i in range(len(string)):\n        result.append(string[:i]+string[i+1:])\n    return result\n\nif __name__ == '__main__':\n    print(permutations('abc'))"
    },
    {
      "rank": 94,
      "score": 8.0,
      "candidate": "def permute(s):\n    if len(s) == 0:\n        print(s)\n    else:\n        permute(s[1:])\n        for i in range(len(s)):\n            print(s[0:i] + s[i+1:])\n\n\npermute(\"abc\")"
    },
    {
      "rank": 95,
      "score": 8.0,
      "candidate": "from typing import List\n\ndef permutations(s: str) -> List[str]:\n    if len(s) == 1:\n        print(s)\n        return [s]\n    else:\n        return [s + x for x in permutations(s[1:])]\n\n\nprint(permutations('abc'))"
    },
    {
      "rank": 96,
      "score": 8.0,
      "candidate": "def print_permutations(string):\n    if not string:\n        print('')\n    else:\n        for i in range(len(string)):\n            print_permutations(string[:i] + string[i+1:])\n\nprint_permutations('abc')"
    },
    {
      "rank": 97,
      "score": 8.0,
      "candidate": "def print_permutations(string):\n    if string == \"\":\n        print(\"\")\n    else:\n        print_permutations(string[1:])\n        print(string[0] + str(string[1:]))\n\n\nprint_permutations(\"abcb\")"
    },
    {
      "rank": 98,
      "score": 8.0,
      "candidate": "def permute(str):\n    if not str:\n        return\n    res = []\n    res += permute(str[:-1])\n    res += [str + str]\n    res += permute(str[:-1])\n    return res\n\n\nprint(permute(\"abc\"))"
    },
    {
      "rank": 99,
      "score": 8.0,
      "candidate": "def permute(s):\n    \"\"\"\n    :type s: str\n    :rtype: None\n    \"\"\"\n    if len(s) <= 1:\n        print(s)\n    else:\n        for i in range(len(s)):\n            permute(s[:i] + s[i + 1:])"
    },
    {
      "rank": 100,
      "score": 7.0,
      "candidate": "import itertools\n\ndef permutation(string):\n    print(list(itertools.permutations(string)))\n\nif __name__ == \"__main__\":\n    permutation(\"ab\")"
    }
  ]
}