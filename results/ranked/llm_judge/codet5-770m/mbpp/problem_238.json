{
  "timestamp": "2025-09-14T14:12:56.086594",
  "method": "improved_llm_judge",
  "judge_model": "codellama/CodeLlama-7b-Python-hf",
  "target_model": "codet5-770m",
  "dataset": "mbpp",
  "problem_number": 238,
  "total_candidates": 100,
  "results": [
    {
      "rank": 1,
      "score": 10.0,
      "candidate": "def intersection(arr1, arr2):\n    return list(set(arr1) & set(arr2))\n\n\ndef main():\n    arr1 = list(map(int, input().split()))\n    arr2 = list(map(int, input().split()))\n    print(intersection(arr1, arr2))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 2,
      "score": 10.0,
      "candidate": "def intersection(arr1, arr2):\n    return list(set(arr1) & set(arr2))\n\nprint(intersection([1,2,3,4,5], [1,2,3,4,5]))"
    },
    {
      "rank": 3,
      "score": 10.0,
      "candidate": "def intersection(arr1, arr2):\n    intersection = []\n\n    for i in arr1:\n        if i in arr2:\n            intersection.append(i)\n\n    return intersection\n\n\nprint(intersection([1, 2, 3, 4, 5], [2, 3, 4, 5]))"
    },
    {
      "rank": 4,
      "score": 10.0,
      "candidate": "def intersection(arr1, arr2):\n    return [i for i in arr1 if i in arr2]\n\nif __name__ == \"__main__\":\n    arr1 = [1, 2, 3, 4, 5]\n    arr2 = [2, 3, 4]\n\n    print(intersection(arr1, arr2))"
    },
    {
      "rank": 5,
      "score": 10.0,
      "candidate": "arr1 = [1, 2, 3, 4, 5]\narr2 = [2, 3, 4, 5, 6, 7, 8, 9]\n\nprint(list(set(arr1).intersection(set(arr2))))"
    },
    {
      "rank": 6,
      "score": 10.0,
      "candidate": "arr1 = [1, 2, 3, 4, 5]\narr2 = [2, 3, 4, 5]\n\nprint(list(filter(lambda x: x == 1, arr1)))\nprint(list(filter(lambda x: x == 2, arr2)))"
    },
    {
      "rank": 7,
      "score": 10.0,
      "candidate": "def intersection(arr1, arr2):\n    return list(set(arr1).intersection(set(arr2)))\n\n\narr1 = [1, 2, 3, 4, 5]\narr2 = [1, 2, 3, 4, 5]\n\nprint(intersection(arr1, arr2))"
    },
    {
      "rank": 8,
      "score": 10.0,
      "candidate": "def intersection(arr1, arr2):\n    return list(set(arr1).intersection(set(arr2)))\n\n\nprint(intersection([1, 2, 3, 4, 5], [4, 5]))"
    },
    {
      "rank": 9,
      "score": 10.0,
      "candidate": "def intersection(a, b):\n    return list(set(a).intersection(set(b)))\n\nprint(intersection([1, 2, 3, 4, 5, 6, 7, 8], [2, 3, 4, 5, 6, 7, 8]))"
    },
    {
      "rank": 10,
      "score": 10.0,
      "candidate": "def intersection(arr1, arr2):\n    return list(filter(lambda x: x in arr2, arr1))\n\n\narr1 = [1, 2, 3, 4, 5]\narr2 = [2, 4]\n\nprint(intersection(arr1, arr2))"
    },
    {
      "rank": 11,
      "score": 10.0,
      "candidate": "def intersection(arr1, arr2):\n    return list(set(arr1).intersection(set(arr2)))"
    },
    {
      "rank": 12,
      "score": 10.0,
      "candidate": "def intersection(a, b):\n    return list(set(a).intersection(b))\n\n\nif __name__ == '__main__':\n    print(intersection([1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6]))"
    },
    {
      "rank": 13,
      "score": 10.0,
      "candidate": "def intersection(a, b):\n    return list(set(a) & set(b))\n\n\nprint(intersection([1, 2, 3, 4, 5], [1, 2, 3, 4, 5]))"
    },
    {
      "rank": 14,
      "score": 10.0,
      "candidate": "def intersection(arr1, arr2):\n    return list(set(arr1).intersection(set(arr2)))"
    },
    {
      "rank": 15,
      "score": 10.0,
      "candidate": "def intersection(arr1, arr2):\n    return list(filter(lambda x: x in arr2, arr1))\n\nprint(intersection([1, 2, 3, 4, 5], [1, 3, 5]))"
    },
    {
      "rank": 16,
      "score": 10.0,
      "candidate": "def intersection(array1, array2):\n    return list(set(array1).intersection(set(array2)))\n\n\nif __name__ == '__main__':\n    print(intersection([1, 2, 3], [4, 5, 6]))"
    },
    {
      "rank": 17,
      "score": 10.0,
      "candidate": "def intersection(arr1, arr2):\n    return list(filter(lambda x: x in arr2, arr1))\n\n\nprint(intersection([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]))"
    },
    {
      "rank": 18,
      "score": 10.0,
      "candidate": "def intersection(arr1, arr2):\n    return list(filter(lambda x: x in arr2, arr1))\n\n\nprint(intersection([1, 2, 3], [4, 5, 6]))"
    },
    {
      "rank": 19,
      "score": 10.0,
      "candidate": "def intersection(a,b):\n    return list(set(a) & set(b))\n\nprint(intersection([1,2,3],[4,5,6]))"
    },
    {
      "rank": 20,
      "score": 10.0,
      "candidate": "def intersection(arr1, arr2):\n    intersection = list(filter(lambda x: x in arr2, arr1))\n    return intersection\n\n\narr1 = [2, 4, 6, 8, 10, 12, 14, 16, 18]\narr2 = [4, 6, 8, 10, 12, 14, 16, 18]\n\nprint(intersection(arr1, arr2))"
    },
    {
      "rank": 21,
      "score": 10.0,
      "candidate": "def intersection(arr1, arr2):\n    return list(set(arr1).intersection(set(arr2)))\n\n\nif __name__ == '__main__':\n    print(intersection([1, 2, 3, 4, 5], [2, 4, 6, 8, 10]))"
    },
    {
      "rank": 22,
      "score": 10.0,
      "candidate": "arr1 = [1, 2, 3, 4, 5, 6]\narr2 = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n\n\ndef intersection(arr1, arr2):\n    return [item for item in arr1 if item in arr2]\n\n\nprint(intersection(arr1, arr2))"
    },
    {
      "rank": 23,
      "score": 10.0,
      "candidate": "def intersection(arr1, arr2):\n    return list(set(arr1) & set(arr2))\n\n\nprint(intersection([1, 2, 3, 4, 5, 6], [7, 8, 9, 10, 11, 12]))"
    },
    {
      "rank": 24,
      "score": 10.0,
      "candidate": "arr = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n\nprint(list(filter(lambda x: x < 10, arr)))"
    },
    {
      "rank": 25,
      "score": 10.0,
      "candidate": "def intersection(a, b):\n    return list(filter(lambda x: x in a, b))\n\n\n\na = [1,2,3]\nb = [1,2,3,4,5]\nprint(intersection(a,b))"
    },
    {
      "rank": 26,
      "score": 10.0,
      "candidate": "def intersection(arr1, arr2):\n    return list(set(arr1) & set(arr2))\n\nprint(intersection([1, 2, 3], [1, 2, 3]))"
    },
    {
      "rank": 27,
      "score": 10.0,
      "candidate": "arr1 = [1, 2, 3]\narr2 = [4, 5, 6]\n\nintersection = list(filter(lambda x, y: x in y, arr1, arr2))\n\nprint(intersection)"
    },
    {
      "rank": 28,
      "score": 10.0,
      "candidate": "def intersection(arr1, arr2):\n    return list(map(lambda x: x in arr1, arr2))\n\n\nprint(intersection([1, 2, 3, 4, 5], [1, 2, 3, 4]))"
    },
    {
      "rank": 29,
      "score": 10.0,
      "candidate": "def intersection(arr1, arr2):\n    return list(set(arr1).intersection(set(arr2)))"
    },
    {
      "rank": 30,
      "score": 9.0,
      "candidate": "def intersection(arr1, arr2):\n    return list(filter(lambda x: x in arr2, arr1))\n\nprint(intersection([1, 2, 3], [4, 5, 6, 7, 8]))"
    },
    {
      "rank": 31,
      "score": 9.0,
      "candidate": "arr1 = [1,2,3,4,5]\narr2 = [2,4,6,8]\n\nprint(list(filter(lambda x: x<=5, arr1)))\nprint(list(filter(lambda x: x>=4, arr2)))"
    },
    {
      "rank": 32,
      "score": 9.0,
      "candidate": "def intersection(arr1, arr2):\n    return list(filter(lambda x: x in arr2, arr1))"
    },
    {
      "rank": 33,
      "score": 8.0,
      "candidate": "from typing import List\n\ndef intersection(arr1: List[int], arr2: List[int]) -> List[int]:\n    return list(set(arr1) & set(arr2))\n\nprint(intersection([1, 2, 3, 4, 5], [2, 3, 5, 6, 7]))"
    },
    {
      "rank": 34,
      "score": 8.0,
      "candidate": "from typing import List\n\n\ndef intersection(array_1: List[int], array_2: List[int]) -> List[int]:\n    return list(set(array_1).intersection(set(array_2)))\n\n\nif __name__ == \"__main__\":\n    assert intersection([1, 2, 3, 4], [2, 3, 4]) == [2]"
    },
    {
      "rank": 35,
      "score": 8.0,
      "candidate": "def intersection(arr1, arr2):\n    return list(set(arr1) & set(arr2))\n\n\nif __name__ == \"__main__\":\n    assert intersection([1, 2, 3], [2, 3]) == [2]\n    assert intersection([1, 2, 3], [3, 4]) == []\n    assert intersection([1, 2, 3], [2, 3, 4]) == [2]"
    },
    {
      "rank": 36,
      "score": 8.0,
      "candidate": "def intersection(array_1, array_2):\n    return list(set(array_1).intersection(set(array_2)))\n\n\nprint(intersection([1, 2, 3, 4, 5], [1, 3, 4, 5]))"
    },
    {
      "rank": 37,
      "score": 8.0,
      "candidate": "def intersection(arr1, arr2):\n    return list(set(arr1) & set(arr2))\n\n\nif __name__ == \"__main__\":\n    print(intersection([1, 2, 3, 4, 5], [2, 4]))"
    },
    {
      "rank": 38,
      "score": 8.0,
      "candidate": "def intersection(arr1, arr2):\n    return list(set(arr1) & set(arr2))\n\n\nprint(intersection([1, 2, 3, 4, 5], [4, 5]))"
    },
    {
      "rank": 39,
      "score": 8.0,
      "candidate": "def intersection(arr1, arr2):\n    return list(set(arr1) & set(arr2))\n\n\nprint(intersection([1, 2, 3, 4, 5, 6], [3, 4, 5, 6]))\nprint(intersection([1, 2, 3, 4, 5, 6], [4, 5, 6]))\nprint(intersection([1, 2, 3, 4, 5, 6], [2, 3, 4, 6]))"
    },
    {
      "rank": 40,
      "score": 8.0,
      "candidate": "# Solution\ndef intersection(arr1, arr2):\n    return list(set(arr1) & set(arr2))\n\n\n# Test\narr1 = [1, 2, 2, 3, 3, 4]\narr2 = [2, 2, 3, 3, 4]\n\nprint(intersection(arr1, arr2))"
    },
    {
      "rank": 41,
      "score": 8.0,
      "candidate": "def intersection(arr1, arr2):\n    return list(set(arr1).intersection(set(arr2)))\n\n\nif __name__ == '__main__':\n    print(intersection([1,2,3,4,5,6,7,8,9,10], [2,3,4,5,6,7,8,9,10]))\n    print(intersection([1,2,3,4,5,6,7,8,9,10], [1,2,3,4,5,6,7,8,9,10]))\n    print(intersection([1,2,3,4,5,6,7,8,9,10], [1,2,3,4,5,6,7,8,9,10,11,12,13]))\n    print(intersection([1,2,3,4,5,6,7,8,9,10], [1,2,3,4,5,6,7,8,9,10,11,12,13,14]))\n    print(intersection([1,2,3,4,5,6,7,8,9,10,11,12,13,14], [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]))\n    print(intersection([1,2,3,4,5,6,7,8,9,10,11,12,13,14], [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86"
    },
    {
      "rank": 42,
      "score": 8.0,
      "candidate": "a = [1, 2, 3, 4, 5]\nb = [2, 3, 5, 4, 6]\n\nprint(list(set(a).intersection(b)))"
    },
    {
      "rank": 43,
      "score": 8.0,
      "candidate": "arr1 = [1,2,3,4,5]\narr2 = [3,4,5,6]\n\nprint(list(map(lambda x: x in arr2, arr1)))"
    },
    {
      "rank": 44,
      "score": 8.0,
      "candidate": "def intersection(arr1, arr2):\n    return list(set(arr1) & set(arr2))\n\n\nif __name__ == '__main__':\n    arr1 = [1, 2, 3, 4, 5]\n    arr2 = [2, 3, 4, 5]\n    print(intersection(arr1, arr2))"
    },
    {
      "rank": 45,
      "score": 8.0,
      "candidate": "def intersection(arr1, arr2):\n    return list(filter(lambda x: x in arr2, arr1))\n\n\nprint(intersection([1, 2, 3, 4, 5], [2, 3]))"
    },
    {
      "rank": 46,
      "score": 8.0,
      "candidate": "arr1 = [1, 2, 3, 4, 5, 6, 7, 8, 9]\narr2 = [1, 3, 4, 6, 7, 8, 9]\n\n\nintersection = lambda arr1, arr2: list(set(arr1).intersection(set(arr2)))\n\nprint(intersection(arr1, arr2))"
    },
    {
      "rank": 47,
      "score": 8.0,
      "candidate": "def intersection(arr1, arr2):\n    return list(filter(lambda x: x in arr2, arr1))\n\n\nif __name__ == \"__main__\":\n    print(intersection([1, 2, 3], [1, 2, 4]))"
    },
    {
      "rank": 48,
      "score": 8.0,
      "candidate": "def intersection(arr1, arr2):\n    return list(filter(lambda x: x in arr2, arr1))\n\n\nif __name__ == \"__main__\":\n    arr1 = [1, 2, 3, 4, 5]\n    arr2 = [1, 2, 3, 4, 5]\n\n    print(intersection(arr1, arr2))"
    },
    {
      "rank": 49,
      "score": 8.0,
      "candidate": "a = [1, 2, 3, 4, 5, 6, 7]\nb = [1, 2, 3, 4, 5, 6, 7]\n\nprint(list(set(a).intersection(b)))"
    },
    {
      "rank": 50,
      "score": 8.0,
      "candidate": "def intersection(arr1, arr2):\n    return list(set(arr1) & set(arr2))\n\n\nif __name__ == \"__main__\":\n    print(intersection([1, 2, 3, 4, 5, 6, 7, 8, 9], [9, 9, 9, 9, 9, 9, 9, 9]))"
    },
    {
      "rank": 51,
      "score": 8.0,
      "candidate": "arr1 = [1, 2, 3]\narr2 = [4, 5, 6]\n\nprint(list(map(lambda x: x * x, arr1, arr2)))"
    },
    {
      "rank": 52,
      "score": 8.0,
      "candidate": "def intersection(arr1, arr2):\n    return list(filter(lambda x: x in arr2, arr1))\n\n\nif __name__ == \"__main__\":\n    print(intersection([1, 2, 3, 4, 5], [1, 2, 3, 4, 5]))"
    },
    {
      "rank": 53,
      "score": 8.0,
      "candidate": "def intersection(arr1, arr2):\n    return list(filter(lambda x: x in arr1, arr2))\n\nif __name__ == '__main__':\n    arr1 = [1, 2, 3, 4]\n    arr2 = [2, 3, 4]\n    print(intersection(arr1, arr2))"
    },
    {
      "rank": 54,
      "score": 8.0,
      "candidate": "def intersection(arr1, arr2):\n    return list(filter(lambda x: x in arr1, arr2))\n\n\narr1 = [1, 2, 3, 4, 5]\narr2 = [1, 2, 3, 4, 5]\nprint(intersection(arr1, arr2))"
    },
    {
      "rank": 55,
      "score": 8.0,
      "candidate": "def intersection(arr1, arr2):\n    return list(set(arr1) & set(arr2))\n\n\ndef main():\n    print(intersection([1, 2, 3, 4, 5], [2, 3, 4, 5, 6]))\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 56,
      "score": 8.0,
      "candidate": "def intersection(a, b):\n    return list(filter(lambda x: x in b, a))\n\n\nif __name__ == \"__main__\":\n    assert intersection([1, 2, 3, 4], [2, 3]) == [1, 2]\n    assert intersection([1, 2, 3], [3, 4]) == [1, 2, 3, 4]\n    assert intersection([1, 2, 3, 4], [3, 5]) == []\n    assert intersection([1, 2, 3, 4], [5, 6]) == []\n    assert intersection([1, 2, 3, 4], [5, 7]) == [1, 2, 3, 4]\n    assert intersection([1, 2, 3, 4], [5, 6, 7]) == [1, 2, 3, 4]\n    assert intersection([1, 2, 3, 4], [5]) == []\n    assert intersection([1, 2, 3, 4], [5, 6, 7]) == [1, 2, 3, 4]"
    },
    {
      "rank": 57,
      "score": 8.0,
      "candidate": "def intersection(arr1, arr2):\n    return list(map(lambda x: x in arr2, arr1))\n\n\nif __name__ == \"__main__\":\n    print(intersection([1, 2, 3, 4, 5], [2, 3, 4, 5, 6]))"
    },
    {
      "rank": 58,
      "score": 8.0,
      "candidate": "def intersection(arr1, arr2):\n    return list(map(lambda x: x in arr2, arr1))\n\n\nif __name__ == '__main__':\n    print(intersection([1, 2, 3, 4, 5], [1, 2, 3, 4, 5]))"
    },
    {
      "rank": 59,
      "score": 8.0,
      "candidate": "def intersection(arr1, arr2):\n    return list(set(arr1) & set(arr2))\n\n\nprint(intersection([1, 2, 3], [2, 3, 4]))\nprint(intersection([1, 2, 3], [3, 4, 5]))"
    },
    {
      "rank": 60,
      "score": 8.0,
      "candidate": "def intersection(arr1, arr2):\n    return list(set(arr1) & set(arr2))\n\n\nprint(intersection([1, 2, 3, 4, 5], [1, 2, 3, 4, 5]))"
    },
    {
      "rank": 61,
      "score": 8.0,
      "candidate": "def intersection(arr1, arr2):\n    return list(set(arr1) & set(arr2))\n\n\nif __name__ == \"__main__\":\n    print(intersection([1, 2, 3, 4, 5], [2, 3, 4, 5, 6]))"
    },
    {
      "rank": 62,
      "score": 8.0,
      "candidate": "def intersection(arr1, arr2):\n    return list(set(arr1) & set(arr2))\n\nprint(intersection([1,2,3,4,5], [2,3,4,5]))\nprint(intersection([1,2,3,4,5], [1,2,3,4,5]))\nprint(intersection([1,2,3,4,5], [1,2,3,4,5]))\nprint(intersection([1,2,3,4,5], [1,2,3,4,5]))\nprint(intersection([1,2,3,4,5], [2,3,4,5]))"
    },
    {
      "rank": 63,
      "score": 8.0,
      "candidate": "def intersection(arr1, arr2):\n    return list(set(arr1) & set(arr2))\n\n\nif __name__ == \"__main__\":\n    print(intersection([1, 2, 3, 4, 5], [2, 5, 3, 7, 9]))"
    },
    {
      "rank": 64,
      "score": 8.0,
      "candidate": "def intersection(arr1, arr2):\n    return list(set(arr1).intersection(set(arr2)))"
    },
    {
      "rank": 65,
      "score": 8.0,
      "candidate": "a = [1, 2, 3, 4, 5]\nb = [3, 4, 5, 6]\n\nprint(list(set(a).intersection(b)))"
    },
    {
      "rank": 66,
      "score": 8.0,
      "candidate": "def intersection(arr1, arr2):\n    return list(set(arr1) & set(arr2))\n\n\nprint(intersection([1, 2, 3, 4, 5], [2, 5]))"
    },
    {
      "rank": 67,
      "score": 8.0,
      "candidate": "a = [1, 2, 3, 4, 5]\nb = [3, 4, 5, 6, 7]\n\nprint(lambda x, y: x.intersection(y))\n\n\"\"\"\nTime Complexity: O(n)\nSpace Complexity: O(1)\n\"\"\""
    },
    {
      "rank": 68,
      "score": 8.0,
      "candidate": "arr1 = [1, 2, 3, 4, 5, 6]\narr2 = [2, 3, 4, 5, 6]\n\nintersection = list(filter(lambda x: x in arr2, arr1))\n\nprint(intersection)"
    },
    {
      "rank": 69,
      "score": 8.0,
      "candidate": "def intersection(arr1, arr2):\n    return list(set(arr1) & set(arr2))\n\n\nprint(intersection([1, 2, 3, 4, 5], [1, 2, 3, 4, 5]))\nprint(intersection([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6]))"
    },
    {
      "rank": 70,
      "score": 8.0,
      "candidate": "def intersection(arr1, arr2):\n    return list(set(arr1).intersection(set(arr2)))\n\n\nprint(intersection([1, 2, 3, 4, 5, 6], [3, 4, 5, 6, 7]))"
    },
    {
      "rank": 71,
      "score": 8.0,
      "candidate": "def intersection(arr1, arr2):\n    return list(set(arr1) & set(arr2))\n\nprint(intersection([1, 2, 3, 4, 5, 6], [2, 3, 4, 5, 6, 7]))"
    },
    {
      "rank": 72,
      "score": 8.0,
      "candidate": "def intersection(a, b):\n    return list(filter(lambda x: x in b, a))\n\n\nif __name__ == '__main__':\n    print(intersection([1, 2, 3, 4, 5], [1, 2, 3, 4, 5]))"
    },
    {
      "rank": 73,
      "score": 8.0,
      "candidate": "def intersection(arr1, arr2):\n    return list(set(arr1) & set(arr2))\n\n\nif __name__ == \"__main__\":\n    print(intersection([1, 2, 3, 4, 5], [2, 4, 6]))"
    },
    {
      "rank": 74,
      "score": 8.0,
      "candidate": "def intersection(arr1, arr2):\n    return list(map(lambda x, y: x & y, arr1, arr2))\n\narr1 = [1, 2, 3, 4, 5]\narr2 = [2, 3]\nprint(intersection(arr1, arr2))"
    },
    {
      "rank": 75,
      "score": 8.0,
      "candidate": "def intersection(array1, array2):\n    return list(set(array1) & set(array2))\n\n\nprint(intersection([1, 2, 3, 4], [4, 2, 1, 3]))"
    },
    {
      "rank": 76,
      "score": 8.0,
      "candidate": "def intersection(a, b):\n    return list(filter(lambda x: x in b, a))\n\n\nif __name__ == \"__main__\":\n    a = [1, 2, 3]\n    b = [4, 5, 6]\n    print(intersection(a, b))"
    },
    {
      "rank": 77,
      "score": 8.0,
      "candidate": "def intersection(arr1, arr2):\n    return [x for x in arr1 if x in arr2]\n\n\nprint(intersection([1, 2, 3, 4], [1, 2, 3, 4]))\nprint(intersection([1, 2, 3, 4], [2, 3, 4]))"
    },
    {
      "rank": 78,
      "score": 8.0,
      "candidate": "def intersection(a, b):\n    return list(filter(lambda x: x in b, a))\n\n\na = [1, 2, 3, 4, 5]\nb = [2, 4, 6, 8]\n\nprint(intersection(a, b))"
    },
    {
      "rank": 79,
      "score": 8.0,
      "candidate": "from typing import List\n\n\ndef intersection(a: List[int], b: List[int]) -> List[int]:\n    return list(set(a) & set(b))\n\n\ndef main():\n    a = [1, 2, 3, 4, 5, 6]\n    b = [3, 4, 5, 6]\n    print(intersection(a, b))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 80,
      "score": 8.0,
      "candidate": "def intersection(a, b):\n    return list(set(a) & set(b))\n\n\nif __name__ == \"__main__\":\n    assert intersection([1, 2, 3], [2, 3, 4]) == [2]\n    assert intersection([1, 2, 3], [4, 3]) == [1, 2, 3]"
    },
    {
      "rank": 81,
      "score": 8.0,
      "candidate": "def intersection(arr1, arr2):\n    intersection = []\n\n    for i in arr1:\n        if i in arr2:\n            intersection.append(i)\n\n    return intersection\n\n\nif __name__ == \"__main__\":\n    arr1 = [1, 2, 3, 4, 5]\n    arr2 = [2, 3, 4, 5, 6]\n\n    print(intersection(arr1, arr2))"
    },
    {
      "rank": 82,
      "score": 8.0,
      "candidate": "arr1 = [1, 2, 3, 4, 5]\narr2 = [2, 3, 4, 5, 6]\n\nprint(list(filter(lambda x: x > 2, arr1)))\nprint(list(filter(lambda x: x > 3, arr2)))"
    },
    {
      "rank": 83,
      "score": 8.0,
      "candidate": "arr1 = [1, 2, 3, 4, 5]\narr2 = [5, 4, 3, 2, 1]\n\nprint(list(filter(lambda x: x < 5, arr1)))\nprint(list(filter(lambda x: x < 5, arr2)))\n\nprint(list(map(lambda x: x < 5, arr1)))\nprint(list(map(lambda x: x < 5, arr2)))\n\nprint(list(map(lambda x: x < 5, filter(lambda x: x < 5, arr1))))\nprint(list(map(lambda x: x < 5, filter(lambda x: x < 5, arr2))))\n\nprint(list(map(lambda x: x < 5, filter(lambda x: x < 5, filter(lambda x: x < 5, arr1)))))\nprint(list(map(lambda x: x < 5, filter(lambda x: x < 5, filter(lambda x: x < 5, arr2)))))\n\nprint(list(map(lambda x: x < 5, filter(lambda x: x < 5, arr1))))\nprint(list(map(lambda x: x < 5, filter(lambda x: x < 5, arr2))))\n\nprint(list(map(lambda x: x < 5, map(lambda x: x < 5, arr1))))\nprint(list(map(lambda x: x < 5, map(lambda x: x < 5, arr2))))"
    },
    {
      "rank": 84,
      "score": 8.0,
      "candidate": "def intersection(arr1, arr2):\n    return [x for x in arr1 if x in arr2]\n\n\narr1 = [1, 3, 4, 5]\narr2 = [2, 4, 6, 8]\n\nprint(intersection(arr1, arr2))"
    },
    {
      "rank": 85,
      "score": 8.0,
      "candidate": "def intersection(arr1, arr2):\n    return list(filter(lambda x: x in arr2, arr1))\n\narr1 = [1, 2, 3, 4, 5, 6]\narr2 = [1, 2, 3, 4, 5, 6]\n\nprint(intersection(arr1, arr2))"
    },
    {
      "rank": 86,
      "score": 8.0,
      "candidate": "def intersection(arr1, arr2):\n    intersection = set(arr1) & set(arr2)\n    return intersection\n\n\nif __name__ == \"__main__\":\n    arr1 = [1, 2, 3, 4, 5, 6, 7]\n    arr2 = [3, 4, 5]\n    print(intersection(arr1, arr2))"
    },
    {
      "rank": 87,
      "score": 8.0,
      "candidate": "arr1 = [1, 2, 3]\narr2 = [2, 2, 3]\n\nprint(list(filter(lambda x: x % 2 == 0, arr1)))\nprint(list(filter(lambda x: x % 2!= 0, arr1)))\nprint(list(filter(lambda x: x % 2 == 1, arr2)))\nprint(list(filter(lambda x: x % 2!= 1, arr2)))"
    },
    {
      "rank": 88,
      "score": 8.0,
      "candidate": "def intersection(arr1, arr2):\n    return list(filter(lambda x: x in arr2, arr1))"
    },
    {
      "rank": 89,
      "score": 8.0,
      "candidate": "def intersection(arr1, arr2):\n    return list(set(arr1) & set(arr2))\n\n\n\narr1 = [1, 2, 3, 4, 5]\narr2 = [1, 2, 3, 4]\n\nprint(intersection(arr1, arr2))"
    },
    {
      "rank": 90,
      "score": 8.0,
      "candidate": "arr1 = [1, 2, 3, 4, 5]\narr2 = [1, 2, 3, 4, 5]\n\n\nintersection = list(map(lambda x, y: x if x in y else y, arr1, arr2))\nprint(intersection)"
    },
    {
      "rank": 91,
      "score": 8.0,
      "candidate": "arr1 = [1, 2, 3, 4, 5]\narr2 = [4, 5, 6, 7]\n\nintersection = list(filter(lambda x: x in arr1, arr2))\nprint(intersection)"
    },
    {
      "rank": 92,
      "score": 8.0,
      "candidate": "a = [1, 2, 3, 4, 5, 6]\nb = [2, 3, 4]\n\n# intersection = set(a).intersection(set(b))\nintersection = list(map(lambda x, y: x & y, a, b))\nprint(intersection)\n\n# intersection = list(filter(lambda x: x in b, a))\n# print(intersection)"
    },
    {
      "rank": 93,
      "score": 1.0,
      "candidate": "def intersection(arr1, arr2):\n    return list(set(arr1) & set(arr2))\n\n\nprint(intersection([1, 2, 3, 4], [5, 6, 7, 8]))"
    },
    {
      "rank": 94,
      "score": 1.0,
      "candidate": "def intersection(a, b):\n    return list(set(a) & set(b))\n\n\nprint(intersection([1, 2, 3], [1, 2, 3]))\nprint(intersection([1, 2, 3], [4, 5, 6, 7, 8]))\nprint(intersection([1, 2, 3], [4, 5, 6, 7, 8]))\nprint(intersection([1, 2, 3], [4, 5, 6, 7, 8, 9]))\nprint(intersection([1, 2, 3], [4, 5, 6, 7, 8, 9, 10]))"
    },
    {
      "rank": 95,
      "score": 1.0,
      "candidate": "import unittest\n\n\ndef intersection(arr1, arr2):\n    return list(set(arr1).intersection(arr2))\n\n\nclass Test(unittest.TestCase):\n\n    def test_intersection(self):\n        self.assertEqual(intersection([1, 2, 3, 4, 5], [5, 6, 7, 8]), [1, 2])\n        self.assertEqual(intersection([1, 2, 3, 4, 5], [6, 7, 8]), [1, 2])\n        self.assertEqual(intersection([1, 2, 3, 4, 5], [8, 9, 10, 11]), [1, 2])\n        self.assertEqual(intersection([1, 2, 3, 4, 5], [10, 11, 12, 13]), [1, 2])\n        self.assertEqual(intersection([1, 2, 3, 4, 5], [1, 2, 3, 4, 5]), [1, 2])\n\n\nif __name__ == '__main__':\n    unittest.main()"
    },
    {
      "rank": 96,
      "score": 1.0,
      "candidate": "def intersection(arr1, arr2):\n    return list(set(arr1) & set(arr2))\n\n\nprint(intersection([1, 2, 3], [4, 5, 6]))\nprint(intersection([1, 2, 3], [4, 5, 7]))\nprint(intersection([1, 2, 3], [4, 5, 6, 7]))"
    },
    {
      "rank": 97,
      "score": 1.0,
      "candidate": "# Solution\narr1 = [1, 2, 3, 4, 5]\narr2 = [2, 4, 7]\n\nprint(list(map(lambda x, y: x in y, arr1, arr2)))\n\n# Time Complexity: O(n)\n# Space Complexity: O(n)\n\n# Solution\narr1 = [1, 2, 3, 4, 5]\narr2 = [2, 4, 7]\n\nprint(list(set(map(lambda x, y: x in y, arr1, arr2))))"
    },
    {
      "rank": 98,
      "score": 1.0,
      "candidate": "def intersection(arr1, arr2):\n    return list(set(arr1) & set(arr2))\n\n\nprint(intersection([1, 2, 3], [4, 5, 6]))"
    },
    {
      "rank": 99,
      "score": 1.0,
      "candidate": "import pytest\n\n\n@pytest.mark.parametrize(\n    \"arr1, arr2\",\n    [\n        ([1, 2, 3, 4, 5], [2, 3, 4, 5]),\n        ([1, 2, 3, 4, 5], [3, 4, 5]),\n        ([1, 2, 3, 4, 5], [1, 4, 5]),\n        ([1, 2, 3, 4, 5], [2, 3, 5]),\n    ],\n)\ndef test_intersection(arr1, arr2):\n    assert list(map(lambda x: x in arr1, arr2)) == [True]"
    },
    {
      "rank": 100,
      "score": 1.0,
      "candidate": "from typing import List\n\n\ndef intersection(arr1: List[int], arr2: List[int]) -> List[int]:\n    return list(set(arr1).intersection(set(arr2)))\n\n\nif __name__ == \"__main__\":\n    assert intersection([1, 2, 3], [1, 2, 3]) == [1, 2, 3]\n    assert intersection([1, 2, 3], [1, 2]) == [1, 2, 3]\n    assert intersection([1, 2, 3], [3, 2]) == [1, 2, 3]"
    }
  ]
}