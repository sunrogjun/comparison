{
  "timestamp": "2025-09-14T15:17:58.414734",
  "method": "improved_llm_judge",
  "judge_model": "codellama/CodeLlama-7b-Python-hf",
  "target_model": "codet5-770m",
  "dataset": "mbpp",
  "problem_number": 386,
  "total_candidates": 100,
  "results": [
    {
      "rank": 1,
      "score": 10.0,
      "candidate": "def median(a, b, c):\n    return (a + b + c) / 3.0\n\n\nprint(median(1, 2, 3))\nprint(median(5, 6, 7))\nprint(median(1, 2, 4))\nprint(median(3, 5, 6))"
    },
    {
      "rank": 2,
      "score": 10.0,
      "candidate": "def find_median(a, b, c):\n    return (a + b + c) / 3\n\nprint(find_median(1, 2, 3))"
    },
    {
      "rank": 3,
      "score": 10.0,
      "candidate": "def median(a, b, c):\n    if len(a) < len(b) and len(a) < len(c):\n        return a\n    elif len(b) < len(a):\n        return b\n    elif len(c) < len(b):\n        return c\n\n\nif __name__ == \"__main__\":\n    print(median(2, 3, 4))"
    },
    {
      "rank": 4,
      "score": 10.0,
      "candidate": "def median(x, y, z):\n    if x + y + z > 0:\n        return (x + y + z) / 3\n    else:\n        return 0\n\n\nif __name__ == \"__main__\":\n    print(median(1, 2, 3))\n    print(median(2, 3, 4))"
    },
    {
      "rank": 5,
      "score": 10.0,
      "candidate": "def find_median(a, b, c):\n    if a > b and a > c:\n        return (a + b) / 2\n    elif b > a and b > c:\n        return (b + a) / 2\n    elif c > a and c > b:\n        return (c + a) / 2\n    else:\n        return (a + b + c) / 3\n\n\nprint(find_median(1, 2, 3))\nprint(find_median(1, 2, 3, 4))\nprint(find_median(1, 2, 3, 4, 5))\nprint(find_median(1, 2, 3, 4, 5, 6))\nprint(find_median(1, 2, 3, 4, 5, 6, 7))\nprint(find_median(1, 2, 3, 4, 5, 6, 7, 8))\nprint(find_median(1, 2, 3, 4, 5, 6, 7, 8, 9))"
    },
    {
      "rank": 6,
      "score": 10.0,
      "candidate": "def median(num1, num2, num3):\n    if num1 == num2 == num3:\n        return num1\n    elif num1 < num2 < num3:\n        return num1\n    else:\n        return num2\n\n\nprint(median(3, 5, 7))\nprint(median(7, 3, 4))\nprint(median(2, 4, 8))"
    },
    {
      "rank": 7,
      "score": 10.0,
      "candidate": "def median(a, b, c):\n    if a > b and a > c:\n        return (a + b + c) / 2\n    elif b > a and b > c:\n        return (a + b + c) / 2\n    elif c > a and c > b:\n        return (a + b + c) / 2\n    else:\n        return (a + b + c) / 2\n\n\nprint(median(5, 8, 9))\nprint(median(6, 7, 8))\nprint(median(2, 1, 3))\nprint(median(1, 2, 3))\nprint(median(4, 3, 5))"
    },
    {
      "rank": 8,
      "score": 10.0,
      "candidate": "def find_median(num1, num2, num3):\n    if (num1 > num2 and num2 > num3):\n        return (num1 + num3) / 2\n    elif (num1 > num3 and num3 > num2):\n        return num1\n    else:\n        return num2\n\n\nprint(find_median(0, 0, 0))\nprint(find_median(1, 1, 1))\nprint(find_median(0, 1, 1))\nprint(find_median(1, 0, 1))\nprint(find_median(1, 1, 0))\nprint(find_median(0, 1, 2))\nprint(find_median(1, 1, 2))\nprint(find_median(1, 1, 3))\nprint(find_median(1, 0, 3))\nprint(find_median(1, 0, 4))\nprint(find_median(1, 0, 5))\nprint(find_median(1, 0, 6))\nprint(find_median(1, 1, 7))\nprint(find_median(1, 1, 8))\nprint(find_median(0, 1, 9))"
    },
    {
      "rank": 9,
      "score": 10.0,
      "candidate": "def median(a, b, c):\n    a = sorted(a)\n    b = sorted(b)\n    c = sorted(c)\n\n    if len(a) % 2!= 0:\n        a.append(a[-1] + (b[-1] - b[-2]) / 2)\n\n    if len(b) % 2!= 0:\n        b.append(b[-1] + (c[-1] - c[-2]) / 2)\n\n    if len(c) % 2!= 0:\n        c.append(c[-1] + (a[-1] - a[-2]) / 2)\n\n    return (a[len(a) // 2] + b[len(b) // 2] + c[len(c) // 2]) / 3\n\nprint(median([1,2,3], [4,5,6], [7,8,9]))\nprint(median([1,2,3,4,5,6,7,8,9], [4,5,6,7,8,9,10], [7,8,9,10,11,12,13,14]))"
    },
    {
      "rank": 10,
      "score": 10.0,
      "candidate": "def find_median(a, b, c):\n    if a + b + c < 0:\n        return None\n    elif a == b == c:\n        return a\n    elif a > b and a > c:\n        return a\n    elif b > a and b > c:\n        return b\n    else:\n        return c\n\nprint(find_median(4, 3, 1))\nprint(find_median(1, 2, 3))\nprint(find_median(2, 3, 4))\nprint(find_median(2, 2, 3))\nprint(find_median(2, 3, 2))\nprint(find_median(1, 1, 1))\nprint(find_median(2, 2, 2))\nprint(find_median(2, 3, 1))\nprint(find_median(2, 3, 2))\nprint(find_median(1, 1, 1))\nprint(find_median(1, 1, 2))\nprint(find_median(1, 1, 3))\nprint(find_median(1, 1, 4))\nprint(find_median(1, 1, 5))\nprint(find_median(1, 1, 6))\nprint(find_median(1, 1, 7))\nprint(find_median(1, 1, 8))\nprint(find_median(1, 1, 9))\nprint(find_median(1, 1, 10))\nprint(find_median(1, 1, 11))\nprint(find_median(1, 1, 12))\nprint(find_median(1, 1, 13))\nprint(find_median(1, 1, 14))\nprint(find_median(1, 1, 15))\nprint(find_median(1, 1, 16))\nprint(find_median(1, 1, 17))\nprint(find_median(1, 1, 18))\nprint(find_median(1, 1, 19))\nprint(find_median(1, 1, 20))\nprint(find_median(1, 1, 21))\nprint(find_median(1, 1, 22))\nprint(find_median(1, 1, 23))\nprint(find_median(1, 1, 24))\nprint"
    },
    {
      "rank": 11,
      "score": 10.0,
      "candidate": "def median(x, y, z):\n    # Your code here\n    return (x + y + z) / 3.0\n\n\nprint(median(5, 7, 9))\nprint(median(10, 7, 9))\nprint(median(7, 10, 9))\nprint(median(8, 8, 8))\nprint(median(7, 8, 8))"
    },
    {
      "rank": 12,
      "score": 10.0,
      "candidate": "def median_of_three(a, b, c):\n    if len(a) > len(b) > len(c):\n        a, b, c = b, c, a\n    if len(a) == len(b) == len(c):\n        return (a + b + c) / 3\n    return (a + b) / 2\n\n\nif __name__ == '__main__':\n    print(median_of_three(1, 2, 3))"
    },
    {
      "rank": 13,
      "score": 10.0,
      "candidate": "def median(a, b, c):\n    return (a + b + c) / 3\n\nprint(median(1, 2, 3))"
    },
    {
      "rank": 14,
      "score": 10.0,
      "candidate": "def median(a, b, c):\n    if a + b + c > 1000:\n        return \"Too high\"\n    elif a + b + c == 1000:\n        return (a + b + c) / 2\n    elif a + b + c == 0:\n        return a\n    else:\n        return (a + b + c) / 2\n\n\nprint(median(1, 2, 3))\nprint(median(4, 5, 6))\nprint(median(8, 9, 10))"
    },
    {
      "rank": 15,
      "score": 10.0,
      "candidate": "def median_of_three(x, y, z):\n    return ((x + y + z) / 3)\n\n\nprint(median_of_three(1, 2, 3))\nprint(median_of_three(3, 2, 1))\nprint(median_of_three(1, 2, 3))"
    },
    {
      "rank": 16,
      "score": 10.0,
      "candidate": "def median(a, b, c):\n    if a > b and a > c:\n        return (a + b) / 2.0\n    elif b > a and b > c:\n        return (b + c) / 2.0\n    elif c > a and c > b:\n        return (c + a) / 2.0\n    else:\n        return a\n\nprint(median(2, 3, 4))\nprint(median(5, 6, 7))\nprint(median(1, 2, 3))\nprint(median(3, 4, 5))\nprint(median(4, 5, 6))\nprint(median(3, 1, 2))"
    },
    {
      "rank": 17,
      "score": 10.0,
      "candidate": "def median(a, b, c):\n    if a > b and a > c:\n        return (a + b) / 2\n    elif b > a and b > c:\n        return (b + c) / 2\n    elif c > a and c > b:\n        return (c + a) / 2\n\n\nprint(median(3, 5, 7))"
    },
    {
      "rank": 18,
      "score": 10.0,
      "candidate": "def findMedian(a, b, c):\n    if a + b > c:\n        return (a + c) / 2\n    else:\n        return (b + c) / 2"
    },
    {
      "rank": 19,
      "score": 10.0,
      "candidate": "import math\n\n\ndef median(a, b, c):\n    return (a + b + c) / 3\n\n\nprint(median(1, 2, 3))"
    },
    {
      "rank": 20,
      "score": 10.0,
      "candidate": "def median_three(a, b, c):\n    if a > b:\n        return (a + c) / 2\n    elif b > c:\n        return (b + c) / 2\n    elif c > a:\n        return (a + c) / 2\n\n\nprint(median_three(10, 12, 14))"
    },
    {
      "rank": 21,
      "score": 10.0,
      "candidate": "import math\n\ndef median(a, b, c):\n    median = (a + b + c) / 3\n    return median\n\ndef main():\n    print(median(1, 2, 3))\n    print(median(2, 4, 6))\n    print(median(4, 6, 8))\n    print(median(4, 6, 4))\n    print(median(4, 4, 6))\n    print(median(4, 2, 6))\n    print(median(4, 2, 4))\n    print(median(4, 2, 6))\n    print(median(4, 2, 4))\n    print(median(4, 4, 2))\n    print(median(4, 4, 2))\n    print(median(4, 4, 2))\n    print(median(4, 2, 4))\n    print(median(4, 2, 2))\n    print(median(4, 4, 2))\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 22,
      "score": 9.993521332125791,
      "candidate": "def median(num1, num2, num3):\n    if len(num1) > len(num2) and len(num1) > len(num3):\n        return (num1[0] + num2[0]) / 2\n    elif len(num2) > len(num1) and len(num2) > len(num3):\n        return num2[0]\n    elif len(num3) > len(num1) and len(num3) > len(num2):\n        return num3[0]\n    else:\n        return num1"
    },
    {
      "rank": 23,
      "score": 9.982803501227224,
      "candidate": "def median(a, b, c):\n    if len(a) == len(b) == len(c):\n        return (a[0] + b[0] + c[0]) / 3\n    else:\n        return \"Not enough values\"\n\n\nif __name__ == \"__main__\":\n    print(median(3, 5, 7))\n    print(median(3, 4, 5))\n    print(median(3, 5, 7))"
    },
    {
      "rank": 24,
      "score": 9.96543514164144,
      "candidate": "def find_median(a, b, c):\n    if len(a) == 1:\n        return a\n    elif len(b) == 1:\n        return b\n    elif len(c) == 1:\n        return c\n\n    if len(a) > len(b) and len(a) > len(c):\n        return a\n    elif len(b) > len(a) and len(b) > len(c):\n        return b\n    else:\n        return c\n\n\nprint(find_median([1, 2, 3], [4, 5, 6], [7, 8, 9]))"
    },
    {
      "rank": 25,
      "score": 9.944488824453645,
      "candidate": "def median(a, b, c):\n  return (a + b + c)/3\n\n\nprint(median(3, 2, 1))"
    },
    {
      "rank": 26,
      "score": 9.933633135437832,
      "candidate": "def find_median(num1, num2, num3):\n    num_list = [num1, num2, num3]\n    num_list.sort()\n    return num_list[len(num_list)//2]\n\n\nif __name__ == \"__main__\":\n    print(find_median(1, 2, 3))"
    },
    {
      "rank": 27,
      "score": 9.894557493837993,
      "candidate": "def median(a, b, c):\n    if a + b > c:\n        return (a + c) / 2\n    elif a + c > b:\n        return (a + b) / 2\n    else:\n        return (a + c) / 2\n\n\nif __name__ == \"__main__\":\n    print(median(1, 2, 3))\n    print(median(1, 2, 4))\n    print(median(1, 2, 5))\n    print(median(1, 2, 6))\n    print(median(1, 2, 7))\n    print(median(1, 2, 8))\n    print(median(1, 2, 9))\n    print(median(1, 2, 10))\n    print(median(1, 2, 11))\n    print(median(1, 2, 12))\n    print(median(1, 2, 13))\n    print(median(1, 2, 14))\n    print(median(1, 2, 15))\n    print(median(1, 2, 16))\n    print(median(1, 2, 17))\n    print(median(1, 2, 18))\n    print(median(1, 2, 19))\n    print(median(1, 2, 20))\n    print(median(1, 2, 21))\n    print(median(1, 2, 22))\n    print(median(1, 2, 23))\n    print(median(1, 2, 24))\n    print(median(1, 2, 25))\n    print(median(1, 2, 26))\n    print(median(1, 2, 27))\n    print(median(1, 2, 28))\n    print(median(1, 2, 29))\n    print(median(1, 2, 30))\n    print(median(1, 2, 31))\n    print(median(1, 2, 32))\n    print(median(1, 2, 33))\n    print(median(1, 2, 34))\n    print(median(1, 2, 35))\n    print(median(1, 2, 36))\n    print(median(1, 2, 37))\n    print(median(1, 2, 38))\n    print"
    },
    {
      "rank": 28,
      "score": 9.887606380132798,
      "candidate": "def find_median(a, b, c):\n    if (len(a) == len(b) == len(c)):\n        return (a + b + c) / 3\n    else:\n        return \"Invalid inputs\"\n\n\nif __name__ == \"__main__\":\n    print(find_median([1, 2, 3], [4, 5, 6], [7, 8, 9]))"
    },
    {
      "rank": 29,
      "score": 9.859987000099228,
      "candidate": "def median(a, b, c):\n    if a > b and a > c:\n        return (a + b) / 2\n    elif b > a and b > c:\n        return (b + c) / 2\n    elif c > a and c > b:\n        return (c + a) / 2\n    elif a > c and c > b:\n        return (a + c) / 2\n    else:\n        return (a + b + c) / 2\n\nprint(median(1, 2, 3))\nprint(median(1, 2, 4))\nprint(median(1, 2, 5))\nprint(median(1, 2, 6))\nprint(median(1, 2, 7))\nprint(median(1, 2, 8))\nprint(median(1, 2, 9))\nprint(median(1, 2, 10))\nprint(median(1, 2, 11))\nprint(median(1, 2, 12))\nprint(median(1, 2, 13))\nprint(median(1, 2, 14))\nprint(median(1, 2, 15))\nprint(median(1, 2, 16))\nprint(median(1, 2, 17))\nprint(median(1, 2, 18))\nprint(median(1, 2, 19))\nprint(median(1, 2, 20))\nprint(median(1, 2, 21))\nprint(median(1, 2, 22))\nprint(median(1, 2, 23))\nprint(median(1, 2, 24))\nprint(median(1, 2, 25))\nprint(median(1, 2, 26))\nprint(median(1, 2, 27))\nprint(median(1, 2, 28))\nprint(median(1, 2, 29))\nprint(median(1, 2, 30))\nprint(median(1, 2, 31))\nprint(median(1, 2, 32))\nprint(median(1, 2, 33))\nprint(median(1, 2, 34))\nprint(median(1, 2, 35))\nprint(median(1, 2, 36))\nprint(median(1, 2, 37))\nprint(median(1, 2, 38))\nprint("
    },
    {
      "rank": 30,
      "score": 9.851578059591416,
      "candidate": "def find_median(numbers):\n    numbers.sort()\n    if len(numbers) % 2 == 1:\n        return numbers[int(len(numbers)/2)]\n    else:\n        return (numbers[int(len(numbers)/2)-1] + numbers[int(len(numbers)/2)])/2\n\n\ndef main():\n    print(find_median([3, 4, 5]))\n    print(find_median([1, 2, 3]))\n    print(find_median([1, 2, 3, 4]))\n    print(find_median([1, 2, 3, 4, 5]))\n    print(find_median([3, 4, 5, 6, 7, 8, 9]))\n    print(find_median([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\n    print(find_median([3, 4, 5, 6, 7, 8, 9, 10, 11]))\n    print(find_median([3, 4, 5, 6, 7, 8, 9, 10, 11, 12]))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 31,
      "score": 9.774652294751222,
      "candidate": "def find_median(x,y,z):\n    if (x > y and x > z):\n        return x\n    elif (y > x and y > z):\n        return y\n    elif (z > x and z > y):\n        return z\n    else:\n        return x+y+z\n\nprint(find_median(2,3,4))\nprint(find_median(2,3,4))\nprint(find_median(2,3,4))\nprint(find_median(2,3,4))\nprint(find_median(2,3,4))\nprint(find_median(2,3,4))\nprint(find_median(2,3,4))\nprint(find_median(2,3,4))\nprint(find_median(2,3,4))\nprint(find_median(2,3,4))\nprint(find_median(2,3,4))\nprint(find_median(2,3,4))\nprint(find_median(2,3,4))\nprint(find_median(2,3,4))\nprint(find_median(2,3,4))\nprint(find_median(2,3,4))\nprint(find_median(2,3,4))\nprint(find_median(2,3,4))\nprint(find_median(2,3,4))\nprint(find_median(2,3,4))\nprint(find_median(2,3,4))\nprint(find_median(2,3,4))\nprint(find_median(2,3,4))\nprint(find_median(2,3,4))\nprint(find_median(2,3,4))\nprint(find_median(2,3,4))\nprint(find_median(2,3,4))\nprint(find_median(2,3,4))\nprint(find_median(2,3,4))\nprint(find_median(2,3,4))\nprint(find_median(2,3,4))\nprint(find_median(2,3,4))\nprint(find_median(2,3,4))\nprint(find_median(2"
    },
    {
      "rank": 32,
      "score": 9.769996365834261,
      "candidate": "def median_of_three(a, b, c):\n    if len(a) < len(b) and len(a) < len(c):\n        a, b, c = b, c, a\n\n    a, b, c = sorted(a), sorted(b), sorted(c)\n    if len(a) % 2 == 0:\n        return (a[len(a) // 2] + b[len(b) // 2] + c[len(c) // 2]) / 3\n    else:\n        return (a[len(a) // 2] + b[len(b) // 2]) / 2\n\n\nif __name__ == \"__main__\":\n    print(median_of_three(0, 1, 2))\n    print(median_of_three(0, 1, 3))\n    print(median_of_three(0, 1, 4))\n    print(median_of_three(0, 1, 5))\n    print(median_of_three(0, 1, 6))\n    print(median_of_three(0, 1, 7))\n    print(median_of_three(0, 2, 4))\n    print(median_of_three(0, 2, 6))\n    print(median_of_three(0, 2, 8))\n    print(median_of_three(0, 2, 10))"
    },
    {
      "rank": 33,
      "score": 9.759156619079423,
      "candidate": "def median(x, y, z):\n    return (x + y + z) / 3\n\nprint(median(1, 2, 3))"
    },
    {
      "rank": 34,
      "score": 9.745715102191822,
      "candidate": "def median(a, b, c):\n    if len(a) > len(b) > len(c):\n        return (a + b + c) / 3\n    elif len(a) < len(b) < len(c):\n        return (a + c + b) / 3\n    else:\n        return a\n\n\nprint(median(4, 7, 8))\nprint(median(2, 4, 5))\nprint(median(1, 2, 3))\nprint(median(1, 2, 3, 4))\nprint(median(2, 4, 5, 6))\nprint(median(1, 2, 3, 4, 5, 6))\nprint(median(1, 2, 3, 4, 5, 6, 7, 8))"
    },
    {
      "rank": 35,
      "score": 9.730101985964334,
      "candidate": "def median(a, b, c):\n    if len(a) == len(b) == len(c):\n        return (a[0] + b[0] + c[0])/3\n    else:\n        return \"Invalid input\"\n\na = int(input(\"Enter the first number: \"))\nb = int(input(\"Enter the second number: \"))\nc = int(input(\"Enter the third number: \"))\n\nprint(\"The median of three numbers is: \" + str(median(a, b, c)))"
    },
    {
      "rank": 36,
      "score": 9.711693428838974,
      "candidate": "def median(a, b, c):\n    # Your code here\n    return (a + b + c) / 3"
    },
    {
      "rank": 37,
      "score": 9.711180826129889,
      "candidate": "def findMedian(a,b,c):\n    if len(a)<=len(b) and len(a)<=len(c):\n        m= (a+b+c)/2\n        return m\n    else:\n        print(\"Invalid inputs\")\n\n\nif __name__ == \"__main__\":\n    findMedian(1,2,3)"
    },
    {
      "rank": 38,
      "score": 9.66301451493887,
      "candidate": "import math\n\n\ndef median(a, b, c):\n    if a + b + c < math.inf:\n        return (a + b + c) / 3\n    return (a + b + c) / 2\n\n\nprint(median(1, 2, 3))\nprint(median(1, 2, -1))\nprint(median(1, -2, 3))\nprint(median(1, 2, -3))\nprint(median(1, 2, -4))\nprint(median(1, 2, -5))\nprint(median(1, 2, -6))\nprint(median(1, 2, -7))\nprint(median(1, 2, -8))\nprint(median(1, 2, -9))\nprint(median(1, 2, -10))\nprint(median(1, -2, -3))\nprint(median(-1, -2, -3))\nprint(median(-1, -2, -4))\nprint(median(-1, -2, -5))\nprint(median(-1, -2, -6))\nprint(median(-1, -2, -7))\nprint(median(-1, -2, -8))\nprint(median(-1, -2, -9))\nprint(median(-1, -2, -10))\nprint(median(-1, -2, -11))\nprint(median(-1, -2, -12))"
    },
    {
      "rank": 39,
      "score": 9.65447477997054,
      "candidate": "def findMedian(a, b, c):\n    if (a+b+c)%2==0:\n        return (a+b+c)/2\n    else:\n        return (a+c+b)/2\n\nprint(findMedian(1,2,3))\nprint(findMedian(1,3,2))\nprint(findMedian(1,2,3))"
    },
    {
      "rank": 40,
      "score": 9.597175588853133,
      "candidate": "def find_median(a, b, c):\n    return (a + b + c) / 3\n\n\nif __name__ == '__main__':\n    print(find_median(1, 2, 3))"
    },
    {
      "rank": 41,
      "score": 9.564148443749819,
      "candidate": "def median(x, y, z):\n    return (x + y + z) / 3\n\n\nprint(median(1, 2, 3))\nprint(median(3, 4, 5))\nprint(median(2, 1, 3))\nprint(median(5, 3, 2))\nprint(median(5, 3, 2, 2))"
    },
    {
      "rank": 42,
      "score": 9.492298754101167,
      "candidate": "def find_median(a, b, c):\n    if len(a) == 0 or len(b) == 0 or len(c) == 0:\n        return 0\n    if len(a) < len(b) and len(a) < len(c):\n        return max(a, b, c)\n    if len(b) < len(a) and len(b) < len(c):\n        return min(a, b, c)\n    if len(c) < len(a) and len(c) < len(b):\n        return max(a, b, c)\n    if len(b) < len(c) and len(b) < len(a):\n        return min(a, b, c)\n    return (a + b + c) / 3\n\n\nif __name__ == \"__main__\":\n    print(find_median(1, 2, 3))"
    },
    {
      "rank": 43,
      "score": 9.447523082837295,
      "candidate": "def median(a, b, c):\n    return (a + b + c) / 3\n\n\nprint(median(3, 2, 1))"
    },
    {
      "rank": 44,
      "score": 9.362470696528753,
      "candidate": "import math\n\ndef median(a,b,c):\n    if a == b == c:\n        return a\n    elif a > b > c:\n        return a\n    elif a < b < c:\n        return b\n    else:\n        return c\n\nif __name__ == '__main__':\n    a = int(input(\"Enter the first number: \"))\n    b = int(input(\"Enter the second number: \"))\n    c = int(input(\"Enter the third number: \"))\n    print(\"The median of the three numbers is\", median(a,b,c))"
    },
    {
      "rank": 45,
      "score": 9.333537973008735,
      "candidate": "def median(a, b, c):\n    if (len(a) == 0 or len(b) == 0 or len(c) == 0):\n        return None\n    if (len(a) > len(b) and len(a) > len(c)):\n        return a\n    elif (len(b) > len(a) and len(b) > len(c)):\n        return b\n    elif (len(c) > len(a) and len(c) > len(b)):\n        return c\n    else:\n        return (a + b + c) / 3\n\n\na = int(input())\nb = int(input())\nc = int(input())\nprint(median(a, b, c))"
    },
    {
      "rank": 46,
      "score": 9.322094223359061,
      "candidate": "def find_median(num1, num2, num3):\n    num1, num2, num3 = sorted([num1, num2, num3])\n\n    if len(num1) == 1:\n        return num1\n    if len(num2) == 1:\n        return (num1 + num2) / 2.0\n    if len(num3) == 1:\n        return (num1 + num2 + num3) / 3.0\n\n\ndef main():\n    print(find_median(10, 8, 5))\n    print(find_median(10, 8, 4))\n    print(find_median(10, 8, 2))\n\n\nmain()"
    },
    {
      "rank": 47,
      "score": 9.290309444623635,
      "candidate": "def median(a, b, c):\n    if len(a) == 0 or len(b) == 0 or len(c) == 0:\n        return 0\n    return (a[0] + b[0] + c[0]) / 3"
    },
    {
      "rank": 48,
      "score": 9.195473399235167,
      "candidate": "def median(num1, num2, num3):\n    if (num1 < num2 and num1 < num3) or (num2 < num1 and num2 < num3):\n        return (num1 + num2 + num3) / 3\n    else:\n        return num1\n\n\nprint(median(1, 2, 3))"
    },
    {
      "rank": 49,
      "score": 9.153833585920372,
      "candidate": "def findMedian(num1, num2, num3):\n    num = [num1, num2, num3]\n    num.sort()\n    return num[len(num) // 2]\n\n\nif __name__ == \"__main__\":\n    print(findMedian(1, 2, 3))\n    print(findMedian(3, 2, 1))\n    print(findMedian(2, 1, 3))\n    print(findMedian(3, 2, 1))\n    print(findMedian(2, 3, 1))"
    },
    {
      "rank": 50,
      "score": 9.09543965815844,
      "candidate": "import math\n\ndef median(a, b, c):\n    if len(a) > len(b) and len(a) > len(c):\n        return max(a, b, c)\n    elif len(a) < len(b) and len(a) < len(c):\n        return min(a, b, c)\n    elif len(a) < len(b) and len(a) > len(c):\n        return a\n    elif len(a) > len(b) and len(a) > len(c):\n        return b\n\n\n\nprint(median(1, 2, 3))\nprint(median(2, 3, 4))\nprint(median(4, 3, 1))\nprint(median(2, 4, 3))\nprint(median(2, 1, 4))\nprint(median(2, 1, 3))\nprint(median(1, 2, 3))\nprint(median(3, 2, 1))\nprint(median(3, 1, 2))\nprint(median(3, 1, 1))"
    },
    {
      "rank": 51,
      "score": 9.081625482564258,
      "candidate": "def median(a, b, c):\n    a = sorted(a)\n    b = sorted(b)\n    c = sorted(c)\n\n    if len(a) == 1:\n        return a[0]\n    elif len(b) == 1:\n        return b[0]\n    elif len(c) == 1:\n        return c[0]\n    else:\n        return (a[0] + b[0] + c[0]) / 3\n\n\nprint(median([1, 3, 5], [1, 3, 5], [1, 3, 5]))\nprint(median([1, 3, 5], [1, 3, 5], [1, 3, 5]))\nprint(median([1, 3, 5], [1, 3, 5], [1, 3, 5]))"
    },
    {
      "rank": 52,
      "score": 8.926140235432616,
      "candidate": "def median(a, b, c):\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    elif c < a and c < b:\n        return c\n    else:\n        return a"
    },
    {
      "rank": 53,
      "score": 8.909394039900231,
      "candidate": "def median(a, b, c):\n    if len(a) > len(b) > len(c):\n        a, b, c = b, a, c\n\n    if len(a) == len(b) == len(c):\n        return (a + b + c) / 3\n    else:\n        return (a + b) / 2\n\nprint(median(1, 3, 5))\nprint(median(1, 3, 4))\nprint(median(1, 2, 3))\nprint(median(1, 2, 4))\nprint(median(2, 3, 4))\nprint(median(2, 3, 5))\nprint(median(2, 3, 6))\nprint(median(3, 4, 5))\nprint(median(3, 4, 6))\nprint(median(3, 4, 7))\nprint(median(4, 5, 6))\nprint(median(4, 5, 7))\nprint(median(5, 6, 7))\nprint(median(5, 6, 8))\nprint(median(5, 6, 9))\nprint(median(5, 6, 10))"
    },
    {
      "rank": 54,
      "score": 8.89145890162022,
      "candidate": "def median(a, b, c):\n    if len(a) < len(b) and len(a) < len(c):\n        return max(a, b, c)\n    elif len(b) < len(a):\n        return min(a, c)\n    else:\n        return (a + b + c) / 3\n\n\nprint(median(1, 2, 3))\nprint(median(1, 2, 4))\nprint(median(2, 1, 3))\nprint(median(1, 2, 3, 4))\nprint(median(2, 1, 3, 4, 5))\nprint(median(1, 2, 3, 4, 5, 6))"
    },
    {
      "rank": 55,
      "score": 8.81281311443784,
      "candidate": "def median(a, b, c):\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c\n\n\nprint(median(1, 2, 3))\nprint(median(2, 3, 1))\nprint(median(3, 2, 1))\nprint(median(2, 3, 1))\nprint(median(1, 2, 3))\nprint(median(2, 3, 1))\nprint(median(3, 2, 1))\nprint(median(2, 3, 1))\nprint(median(1, 2, 3))\nprint(median(2, 3, 1))\nprint(median(3, 2, 1))\nprint(median(2, 3, 1))\nprint(median(1, 2, 3))\nprint(median(2, 3, 1))\nprint(median(3, 2, 1))"
    },
    {
      "rank": 56,
      "score": 8.742522350036923,
      "candidate": "def findMedian(a,b,c):\n    if a == b == c:\n        return a\n    if a > b and a > c:\n        return b\n    if b > a and b > c:\n        return c\n    if c > a and c > b:\n        return a\n    if a > b and b > c:\n        return b\n    if c > a and a > b:\n        return c\n\nif __name__ == \"__main__\":\n    print(findMedian(3,5,8))\n    print(findMedian(5,8,3))\n    print(findMedian(8,3,5))\n    print(findMedian(1,1,1))"
    },
    {
      "rank": 57,
      "score": 8.704873265365707,
      "candidate": "def median(a, b, c):\n    return (a + b + c) / 3\n\n\nprint(median(1, 2, 3))\nprint(median(1, 2, 5))\nprint(median(1, 2, -3))\nprint(median(1, 2, 1))\nprint(median(1, 2, 0))"
    },
    {
      "rank": 58,
      "score": 8.690812812338855,
      "candidate": "import math\n\n\ndef find_median(x, y, z):\n    x_median = (x + y + z) / 3\n    return x_median\n\n\nif __name__ == \"__main__\":\n    x = int(input(\"Enter the first number: \"))\n    y = int(input(\"Enter the second number: \"))\n    z = int(input(\"Enter the third number: \"))\n    print(\"The median is {}\".format(find_median(x, y, z)))"
    },
    {
      "rank": 59,
      "score": 8.682867237889836,
      "candidate": "def median(num1, num2, num3):\n    # Sort the numbers\n    num1.sort()\n    num2.sort()\n    num3.sort()\n    # Calculate the length of the list\n    l = len(num1) + len(num2) + len(num3)\n    # Determine the position of the median\n    if l % 2 == 0:\n        i = int((l / 2) - 1)\n    else:\n        i = int((l / 2) + 1)\n    if l % 2 == 0:\n        return (num1[i] + num2[i]) / 2\n    else:\n        return num1[i]\n\n\nif __name__ == \"__main__\":\n    print(median(1, 2, 3))"
    },
    {
      "rank": 60,
      "score": 8.624779493250367,
      "candidate": "def findMedian(num1, num2, num3):\n    if len(num1) == len(num2) == len(num3):\n        if len(num1) == 1:\n            return num1[0]\n        elif len(num2) == 1:\n            return num2[0]\n        elif len(num3) == 1:\n            return num3[0]\n        else:\n            return (num1[0] + num2[0] + num3[0]) / 3\n    else:\n        return \"Invalid input\"\n\n\nprint(findMedian(1, 2, 3))\nprint(findMedian(2, 3, 1))\nprint(findMedian(2, 3, 4))\nprint(findMedian(2, 3, 5))\nprint(findMedian(2, 3, 6))\nprint(findMedian(2, 3, 7))\nprint(findMedian(2, 3, 8))\nprint(findMedian(2, 3, 9))"
    },
    {
      "rank": 61,
      "score": 8.618029736467308,
      "candidate": "def find_median(a, b, c):\n    if len(a) == 1:\n        return (b + c) / 2\n    elif len(b) == 1:\n        return (a + c) / 2\n    elif len(c) == 1:\n        return (a + b) / 2\n    else:\n        return (a + b + c) / 2\n\n\nprint(find_median(1, 2, 3))\nprint(find_median(1, 3, 4))\nprint(find_median(2, 3, 4))\nprint(find_median(1, 2, 3, 4, 5, 6))"
    },
    {
      "rank": 62,
      "score": 8.617914335088484,
      "candidate": "def find_median(n1, n2, n3):\n    \"\"\"\n    :type n1: int\n    :type n2: int\n    :type n3: int\n    :rtype: float\n    \"\"\"\n    if n1 > n2 and n1 > n3:\n        return (n1 + n2 + n3) / 3\n    elif n2 > n1 and n2 > n3:\n        return (n2 + n1 + n3) / 3\n    elif n3 > n1 and n3 > n2:\n        return (n3 + n1 + n2) / 3\n    else:\n        return n1\n\n\nif __name__ == \"__main__\":\n    assert find_median(1, 2, 3) == 2\n    assert find_median(1, 3, 2) == 2\n    assert find_median(2, 1, 3) == 1\n    assert find_median(1, 2, 1) == 1\n    assert find_median(3, 2, 1) == 1"
    },
    {
      "rank": 63,
      "score": 8.609381223437307,
      "candidate": "def median(a, b, c):\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    elif c < a and c < b:\n        return c\n    else:\n        return (a + b + c) / 2\n\n\nprint(median(1, 2, 3))\nprint(median(1, 2, 4))\nprint(median(2, 3, 4))\nprint(median(2, 3, 4, 5))"
    },
    {
      "rank": 64,
      "score": 8.603450891518156,
      "candidate": "def median(a, b, c):\n  if len(a) > len(b) and len(a) > len(c):\n    a, b, c = b, c, a\n  a, b, c = sorted([a, b, c])\n  if len(a) > len(b):\n    return a\n  if len(a) > len(c):\n    return c\n  return (b + c) / 2\n\n\nprint(median(1, 2, 3))\nprint(median(1, 2, 4))\nprint(median(1, 2, 5))"
    },
    {
      "rank": 65,
      "score": 8.600004749753946,
      "candidate": "def find_median(num1, num2, num3):\n    if num1 < num2 and num2 < num3:\n        return num1\n    elif num2 < num1 and num1 < num3:\n        return num2\n    elif num3 < num2 and num2 < num1:\n        return num3\n    else:\n        return num1\n\n\nprint(find_median(1, 2, 3))\nprint(find_median(3, 4, 5))\nprint(find_median(1, 3, 4))\nprint(find_median(3, 4, 5))\nprint(find_median(1, 2, 3))"
    },
    {
      "rank": 66,
      "score": 8.595283164090176,
      "candidate": "def median(n1, n2, n3):\n    return (n1 + n2 + n3) / 3.0\n\nprint(median(1, 2, 3))\nprint(median(4, 5, 6))\nprint(median(1, 2, 3, 4, 5, 6))"
    },
    {
      "rank": 67,
      "score": 8.560586334796142,
      "candidate": "def median(num1, num2, num3):\n    num1_sorted = sorted(num1)\n    num2_sorted = sorted(num2)\n    num3_sorted = sorted(num3)\n    if len(num1_sorted) == len(num2_sorted) == len(num3_sorted):\n        return (num1_sorted[len(num1_sorted)//2] + num2_sorted[len(num2_sorted)//2] + num3_sorted[len(num3_sorted)//2])/3\n    else:\n        return num1_sorted[len(num1_sorted)//2]\n\n\nprint(median([1, 2, 3], [4, 5, 6], [7, 8, 9]))"
    },
    {
      "rank": 68,
      "score": 8.544698970046728,
      "candidate": "import math\n\ndef median(a, b, c):\n    if a > b and a > c:\n        return (a + b + c)/2\n    elif b > a and b > c:\n        return a\n    else:\n        return b\n\nprint(median(1, 2, 3))\nprint(median(2, 3, 1))\nprint(median(1, 2, 3))\nprint(median(2, 3, 4))\nprint(median(3, 4, 2))"
    },
    {
      "rank": 69,
      "score": 8.49768728750518,
      "candidate": "def median(a, b, c):\n    if len(a) > len(b) and len(a) > len(c):\n        return max(a + b + c) / 3.0\n    else:\n        return max(a, b, c)\n\n\nprint(median(1, 3, 5))"
    },
    {
      "rank": 70,
      "score": 8.486227037198766,
      "candidate": "def find_median(num1, num2, num3):\n    num1, num2, num3 = sorted(num1), sorted(num2), sorted(num3)\n    if len(num1) == len(num2) == len(num3):\n        return (num1[len(num1) // 2] + num2[len(num2) // 2] + num3[len(num3) // 2]) / 3\n    else:\n        return num1[len(num1) // 2]\n\nprint(find_median(1, 2, 3))\nprint(find_median(4, 5, 6))\nprint(find_median(1, 2, 3, 4))"
    },
    {
      "rank": 71,
      "score": 8.355328135645813,
      "candidate": "def median(a, b, c):\n    if len(a) == len(b) == len(c):\n        if len(a) % 2 == 0:\n            return (a[len(a) // 2] + a[len(a) // 2 - 1]) / 2\n        else:\n            return a[len(a) // 2]\n    else:\n        return None\n\nprint(median(5, 3, 4))\nprint(median(5, 3, 4))\nprint(median(5, 4, 4))\nprint(median(5, 4, 4))\nprint(median(4, 4, 4))"
    },
    {
      "rank": 72,
      "score": 8.336071820210908,
      "candidate": "def find_median(a, b, c):\n    if a > b and a > c:\n        return (a + b) / 2\n    elif b > a and b > c:\n        return (b + a) / 2\n    elif c > a and c > b:\n        return (c + a) / 2\n    else:\n        return (a + b + c) / 3\n\n\nprint(find_median(1, 2, 3))"
    },
    {
      "rank": 73,
      "score": 8.332058705108839,
      "candidate": "def median_of_three(a, b, c):\n    \"\"\"\n    :type a: int\n    :type b: int\n    :type c: int\n    :rtype: int\n    \"\"\"\n    if a > b and a > c:\n        return a\n    elif b > a and b > c:\n        return b\n    elif c > a and c > b:\n        return c\n    else:\n        return a"
    },
    {
      "rank": 74,
      "score": 8.300920916220829,
      "candidate": "def find_median(num1, num2, num3):\n    if num1 > num2:\n        num1, num2 = num2, num1\n    if num1 > num3:\n        num1, num3 = num3, num1\n    return (num1 + num2 + num3) / 3.0\n\n\ndef main():\n    print(find_median(3, 4, 5))\n    print(find_median(2, 3, 4))\n    print(find_median(1, 2, 3))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 75,
      "score": 8.299914670561586,
      "candidate": "def median_3(nums):\n    if len(nums) == 0:\n        return 0\n\n    if len(nums) == 1:\n        return nums[0]\n\n    nums.sort()\n    return nums[len(nums)//2]\n\nprint(median_3([1,2,3]))\nprint(median_3([1,2,3,4]))\nprint(median_3([1,2,3,4,5]))\nprint(median_3([1,2,3,4,5,6]))\nprint(median_3([1,2,3,4,5,6,7]))\nprint(median_3([1,2,3,4,5,6,7,8]))"
    },
    {
      "rank": 76,
      "score": 8.287166614077515,
      "candidate": "def median(a, b, c):\n    if a < b + c:\n        return (a + b + c) / 2\n    elif a > b - c:\n        return (a + b - c) / 2\n    else:\n        return a\n\nprint(median(3, 2, 1))\nprint(median(5, 1, 4))\nprint(median(2, 2, 3))\nprint(median(2, 2, 4))"
    },
    {
      "rank": 77,
      "score": 8.259604949844613,
      "candidate": "def find_median(num1, num2, num3):\n    a = sorted([num1, num2, num3])\n    if len(a) == 1:\n        return a[0]\n    elif len(a) == 2:\n        return (a[0] + a[1]) / 2\n    else:\n        return a[1]\n\n\nprint(find_median(4, 3, 2))\nprint(find_median(4, 3, 4))\nprint(find_median(4, 3, 5))\nprint(find_median(4, 3, 6))\nprint(find_median(4, 3, 7))\nprint(find_median(4, 3, 8))\nprint(find_median(4, 3, 9))\nprint(find_median(4, 3, 10))\nprint(find_median(4, 3, 11))\nprint(find_median(4, 3, 12))"
    },
    {
      "rank": 78,
      "score": 8.25623253094101,
      "candidate": "import math\n\ndef findMedian(a, b, c):\n    if (a > b):\n        return (a + c) / 2\n    elif (b > c):\n        return (b + c) / 2\n    else:\n        return (a + b) / 2\n\nprint(findMedian(1, 2, 3))\nprint(findMedian(1, 2, 4))\nprint(findMedian(1, 2, 5))\nprint(findMedian(2, 3, 4))\nprint(findMedian(2, 3, 5))\nprint(findMedian(3, 4, 5))\nprint(findMedian(3, 4, 6))\nprint(findMedian(4, 5, 6))\nprint(findMedian(5, 6, 7))\nprint(findMedian(5, 6, 8))\nprint(findMedian(6, 7, 8))\nprint(findMedian(7, 8, 9))\nprint(findMedian(8, 9, 10))\nprint(findMedian(8, 9, 11))\nprint(findMedian(8, 9, 12))\nprint(findMedian(9, 10, 11))\nprint(findMedian(9, 10, 12))"
    },
    {
      "rank": 79,
      "score": 8.223337834383747,
      "candidate": "def median(a, b, c):\n    if a > b and a > c:\n        return (a + b) / 2\n    elif b > a and b > c:\n        return (b + a) / 2\n    else:\n        return a"
    },
    {
      "rank": 80,
      "score": 8.222003951894463,
      "candidate": "def find_median(a, b, c):\n    if a+b+c == 0:\n        return 0\n    else:\n        return (a + b + c) / 3\n\n\nprint(find_median(3, 5, 7))\nprint(find_median(1, 2, 3))\nprint(find_median(4, 5, 6))"
    },
    {
      "rank": 81,
      "score": 8.22089416273072,
      "candidate": "def find_median(a, b, c):\n    a_value = a\n    b_value = b\n    c_value = c\n\n    if a_value > b_value:\n        a, b = b, a\n\n    if a_value > c_value:\n        a, c = c, a\n\n    if a_value > b_value:\n        a, b = b, a\n\n    if a_value > c_value:\n        a, c = c, a\n\n    if a_value == b_value == c_value:\n        return (a + b + c) / 3\n\n    else:\n        return (a + b) / 2\n\n\nprint(find_median(1, 2, 3))\nprint(find_median(2, 3, 4))\nprint(find_median(2, 4, 3))"
    },
    {
      "rank": 82,
      "score": 8.195674739673095,
      "candidate": "def median(a, b, c):\n    if a > b and a > c:\n        return (a + b) / 2\n    elif b > a and b > c:\n        return (b + a) / 2\n    elif c > a and c > b:\n        return (c + a) / 2\n    else:\n        return (a + b + c) / 3\n\nprint(median(4, 2, 6))\nprint(median(1, 2, 3))\nprint(median(2, 3, 4))\nprint(median(4, 5, 6))\nprint(median(5, 6, 4))\nprint(median(6, 5, 4))\nprint(median(4, 5, 6))"
    },
    {
      "rank": 83,
      "score": 8.183140736672357,
      "candidate": "def median(a, b, c):\n    a = sorted(a)\n    b = sorted(b)\n    c = sorted(c)\n\n    if len(a) == len(b) == len(c):\n        return (a[0] + b[0] + c[0]) / 3\n\n    else:\n        return (a[0] + b[1] + c[0]) / 2\n\n\nprint(median(1, 2, 3))"
    },
    {
      "rank": 84,
      "score": 8.134786962233985,
      "candidate": "from math import sqrt\n\ndef median(a, b, c):\n    if a + b > c:\n        return (a + c) / 2\n    elif a + c > b:\n        return (b + c) / 2\n    else:\n        return a\n\n\nif __name__ == \"__main__\":\n    print(median(5, 7, 9))\n    print(median(10, 11, 12))\n    print(median(2, 3, 4))\n    print(median(7, 6, 5))\n    print(median(9, 8, 7))"
    },
    {
      "rank": 85,
      "score": 8.119521884297585,
      "candidate": "def median(a, b, c):\n    if (a + b + c) % 2 == 0:\n        return (a + b + c) / 2\n    else:\n        return a\n\nprint(median(4, 5, 6))\nprint(median(2, 3, 4))\nprint(median(1, 2, 3))"
    },
    {
      "rank": 86,
      "score": 8.056367515055715,
      "candidate": "def median_of_three(x, y, z):\n    if x > y and x > z:\n        return x\n    elif y > x and y > z:\n        return y\n    elif z > x and z > y:\n        return z\n    else:\n        return x if x > y else y if x > z else z"
    },
    {
      "rank": 87,
      "score": 7.9582855066839215,
      "candidate": "def median_of_three(a, b, c):\n    a_median = (a + b + c) / 3\n    return a_median\n\n\nprint(median_of_three(1, 2, 3))\nprint(median_of_three(2, 3, 4))\nprint(median_of_three(2, 4, 6))"
    },
    {
      "rank": 88,
      "score": 7.913403656921551,
      "candidate": "def find_median(a, b, c):\n    if a > b and a > c:\n        return (a + c) / 2\n    if b > a and b > c:\n        return (b + c) / 2\n    if c > a and c > b:\n        return (c + a) / 2\n    return a\n\n\nprint(find_median(1, 2, 3))"
    },
    {
      "rank": 89,
      "score": 7.870265264885723,
      "candidate": "from typing import List\n\ndef find_median(nums: List[int]) -> float:\n    if len(nums) < 3:\n        return None\n    if len(nums) == 3:\n        return nums[0]\n    else:\n        return (nums[0] + nums[1] + nums[2]) / 3"
    },
    {
      "rank": 90,
      "score": 7.858439492458354,
      "candidate": "def findMedian(num1, num2, num3):\n    if num1 > num2 and num1 > num3:\n        return num1\n    elif num2 > num1 and num2 > num3:\n        return num2\n    elif num3 > num1 and num3 > num2:\n        return num3\n    else:\n        return num1\n\n\n\nprint(findMedian(4, 3, 5))\nprint(findMedian(2, 1, 3))\nprint(findMedian(2, 1, 4))"
    },
    {
      "rank": 91,
      "score": 7.760565315061985,
      "candidate": "import math\n\n\ndef find_median(a, b, c):\n    if a + b > c:\n        return (a + b) / 2\n    elif a + c > b:\n        return (a + c) / 2\n    elif a + b + c > c:\n        return (a + b + c) / 3\n\n\nprint(find_median(1, 2, 3))\nprint(find_median(1, 2, 4))\nprint(find_median(1, 2, 5))"
    },
    {
      "rank": 92,
      "score": 7.741957269341028,
      "candidate": "import math\n\n\ndef median(a, b, c):\n    a, b, c = sorted([a, b, c])\n    if len(a) % 2 == 0:\n        return (a + b + c) / 2\n    else:\n        return (a + b) / 2\n\n\ndef main():\n    print(median(1, 2, 3))\n    print(median(1, 2, 3, 4))\n    print(median(1, 2, 3, 4, 5))\n    print(median(1, 2, 3, 4, 5, 6))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 93,
      "score": 7.616483884838189,
      "candidate": "def find_median(nums):\n    if len(nums) % 2 == 0:\n        return (nums[len(nums)//2] + nums[len(nums)//2-1])/2\n    else:\n        return nums[len(nums)//2]"
    },
    {
      "rank": 94,
      "score": 7.598185169870332,
      "candidate": "def find_median(a, b, c):\n    if len(a) == len(b) == len(c):\n        if len(a) == 1:\n            return a[0]\n        elif len(b) == 1:\n            return b[0]\n        else:\n            return (a[0] + b[0]) / 2.0\n    else:\n        return None\n\nprint(find_median(1, 2, 3))\nprint(find_median(1, 2, 4))\nprint(find_median(1, 2, 5))\nprint(find_median(1, 2, 6))\nprint(find_median(1, 2, 7))\nprint(find_median(2, 2, 2))\nprint(find_median(2, 2, 4))\nprint(find_median(2, 2, 6))\nprint(find_median(2, 2, 7))\nprint(find_median(3, 2, 2))\nprint(find_median(3, 2, 4))\nprint(find_median(3, 2, 6))\nprint(find_median(3, 2, 7))\nprint(find_median(4, 2, 2))\nprint(find_median(4, 2, 4))\nprint(find_median(4, 2, 6))\nprint(find_median(4, 2, 7))\nprint(find_median(5, 2, 2))\nprint(find_median(5, 2, 4))\nprint(find_median(5, 2, 6))\nprint(find_median(5, 2, 7))\nprint(find_median(6, 2, 2))\nprint(find_median(6, 2, 4))\nprint(find_median(6, 2, 6))\nprint(find_median(6, 2, 7))\nprint(find_median(7, 2, 2))\nprint(find_median(7, 2, 4))\nprint(find_median(7, 2, 6))\nprint(find_median(7, 2, 7))\nprint(find_median(8, 2, 2))\nprint(find_median(8, 2, 4))\nprint(find_median(8, 2, 6))"
    },
    {
      "rank": 95,
      "score": 7.5038027849821525,
      "candidate": "def find_median(nums):\n    if len(nums) == 3:\n        return (nums[0] + nums[1] + nums[2]) / 3\n    else:\n        return nums[0]\n\n\nprint(find_median([1, 2, 3]))"
    },
    {
      "rank": 96,
      "score": 7.4904113654360165,
      "candidate": "def find_median(a, b, c):\n    if a > b and a > c:\n        return (a + c) / 2\n    elif b > a and b > c:\n        return (b + c) / 2\n    elif c > a and c > b:\n        return (c + a) / 2\n    else:\n        return a\n\n\nprint(find_median(1, 2, 3))\nprint(find_median(2, 3, 4))\nprint(find_median(4, 5, 6))\nprint(find_median(3, 4, 5))"
    },
    {
      "rank": 97,
      "score": 3.0,
      "candidate": "def find_median(a,b,c):\n    if len(a) == 1:\n        return a[0]\n    if len(b) == 1:\n        return b[0]\n    if len(c) == 1:\n        return c[0]\n    if a[0] > b[0] and a[0] > c[0]:\n        return a[0]\n    if b[0] > a[0] and b[0] > c[0]:\n        return b[0]\n    if c[0] > a[0] and c[0] > b[0]:\n        return c[0]\n    return a[0] if a[0] > b[0] else b[0] if b[0] > c[0] else c[0]\n\n\na = [1,2,3]\nb = [1,2,3]\nc = [1,2,3]\nprint(find_median(a,b,c))"
    },
    {
      "rank": 98,
      "score": 3.0,
      "candidate": "def find_median(a, b, c):\n    # write your code here\n    if a + b + c > 100:\n        return None\n    else:\n        return (a + b + c) / 3\n\n\n\n\n\nprint(find_median(1, 2, 3))"
    },
    {
      "rank": 99,
      "score": 3.0,
      "candidate": "def find_median(a, b, c):\n    # Your code here\n    if a > b and a > c:\n        return (a + b + c) / 3\n    elif b > a and b > c:\n        return (a + b + c) / 2\n    elif c > a and c > b:\n        return (a + b + c) / 1\n    else:\n        return (a + b + c) / 0\n\nprint(find_median(1, 2, 3))\nprint(find_median(2, 4, 6))\nprint(find_median(4, 6, 8))\nprint(find_median(8, 9, 10))"
    },
    {
      "rank": 100,
      "score": 3.0,
      "candidate": "def find_median(num1, num2, num3):\n    # write your code here\n    if num1 > num2 and num1 > num3:\n        return num1\n    elif num2 > num1 and num2 > num3:\n        return num2\n    elif num3 > num1 and num3 > num2:\n        return num3\n    elif num1 == num2 == num3:\n        return (num1 + num2 + num3) / 3\n    else:\n        return (num2 + num3) / 2\n\n\nprint(find_median(1, 2, 3))"
    }
  ]
}