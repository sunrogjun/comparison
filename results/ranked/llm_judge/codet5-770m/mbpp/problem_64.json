{
  "timestamp": "2025-09-14T12:56:26.299697",
  "method": "improved_llm_judge",
  "judge_model": "codellama/CodeLlama-7b-Python-hf",
  "target_model": "codet5-770m",
  "dataset": "mbpp",
  "problem_number": 64,
  "total_candidates": 100,
  "results": [
    {
      "rank": 1,
      "score": 10.0,
      "candidate": "class Solution(object):\n    def divisibleTuples(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: List[int]\n        \"\"\"\n        # Runtime: 32 ms, faster than 68.00% of Python3 online submissions\n        # Memory Usage: 13.9 MB, less than 100.00% of Python3 online submissions\n        res = []\n        for i in range(len(nums)):\n            for j in range(len(nums)):\n                if nums[i][0] % k == 0 and nums[j][0] % k == 0:\n                    res.append([nums[i][0], nums[j][0]])\n        return res\n\n\nif __name__ == \"__main__\":\n    nums = [1, 2, 3, 4, 5, 6, 7]\n    k = 5\n    sol = Solution()\n    res = sol.divisibleTuples(nums, k)\n    print(res)"
    },
    {
      "rank": 2,
      "score": 10.0,
      "candidate": "class Solution:\n    def divisibleTuples(self, nums: List[int], k: int) -> List[int]:\n        return [x for x in nums if all(x % k == 0 for x in x)]"
    },
    {
      "rank": 3,
      "score": 9.0,
      "candidate": "def find_divisible_tuples(arr, k):\n    result = set()\n    for i in arr:\n        if i[0] % k == 0 and i[1] % k == 0:\n            result.add(i)\n    return result"
    },
    {
      "rank": 4,
      "score": 9.0,
      "candidate": "def find_divisible_tuples(tuples, k):\n    res = []\n    for t in tuples:\n        if all(x % k == 0 for x in t):\n            res.append(t)\n    return res"
    },
    {
      "rank": 5,
      "score": 9.0,
      "candidate": "def divisible_tuples(tuples, k):\n    result = []\n    for i in tuples:\n        if i[0] % k == 0:\n            result.append(i)\n    return result"
    },
    {
      "rank": 6,
      "score": 8.0,
      "candidate": "def divisible_by_k(tuples, k):\n    result = []\n\n    for i in range(len(tuples)):\n        for j in range(len(tuples[i])):\n            if tuples[i][j] % k == 0:\n                result.append(tuples[i])\n\n    return result\n\n\nif __name__ == \"__main__\":\n    print(divisible_by_k([(1, 2, 3), (2, 4, 6), (3, 5, 7)], 4))"
    },
    {
      "rank": 7,
      "score": 8.0,
      "candidate": "def find_tuples_divisible_by_k(tup, k):\n    return [tup[i] for i in range(len(tup)) if tup[i][0] % k == 0]\n\n\nprint(find_tuples_divisible_by_k((1, 2, 3, 4), 3))\nprint(find_tuples_divisible_by_k((1, 2, 3, 4, 5), 2))\nprint(find_tuples_divisible_by_k((1, 2, 3, 4, 5, 6, 7), 3))\nprint(find_tuples_divisible_by_k((1, 2, 3, 4, 5, 6, 7), 5))\nprint(find_tuples_divisible_by_k((1, 2, 3, 4, 5, 6, 7), 1))"
    },
    {
      "rank": 8,
      "score": 8.0,
      "candidate": "def divisible_by_k(tuples, k):\n    return [x for x in tuples if all(x[i] % k == 0 for i in range(len(x)))]\n\n\nif __name__ == \"__main__\":\n    assert divisible_by_k([(1, 2), (1, 2, 3), (1, 2, 3, 4)], 3) == [(1, 2), (1, 2, 3, 4)]\n    assert divisible_by_k([(1, 2), (1, 2, 3), (1, 2, 3, 4), (1, 2, 3, 4, 5)], 3) == [(1, 2), (1, 2, 3, 4, 5)]\n    assert divisible_by_k([(1, 2), (1, 2, 3), (1, 2, 3, 4), (1, 2, 3, 4, 5)], 2) == [(1, 2)]\n    assert divisible_by_k([(1, 2), (1, 2, 3), (1, 2, 3, 4), (1, 2, 3, 4, 5)], 3) == []\n    assert divisible_by_k([(1, 2), (1, 2, 3), (1, 2, 3, 4), (1, 2, 3, 4, 5)], 4) == []\n    assert divisible_by_k([(1, 2), (1, 2, 3), (1, 2, 3, 4), (1, 2, 3, 4, 5)], 5) == [(1, 2, 3), (1, 2, 3, 4, 5)]\n    assert divisible_by_k([(1, 2), (1, 2, 3), (1, 2, 3, 4), (1, 2, 3, 4, 5)], 6) == []"
    },
    {
      "rank": 9,
      "score": 8.0,
      "candidate": "def find_divisible_tuples(tuples, k):\n    return [(x, y) for x, y in tuples if y % k == 0]"
    },
    {
      "rank": 10,
      "score": 8.0,
      "candidate": "def find_tuples(tuples, k):\n    result = []\n\n    for i in range(len(tuples)):\n        for j in range(len(tuples)):\n            if tuples[i][0] % tuples[j][1] == k:\n                result.append(tuples[i])\n\n    return result\n\n\nif __name__ == \"__main__\":\n    assert find_tuples([(2, 2), (5, 5)], 3) == [(2, 2), (5, 5)]\n    assert find_tuples([(2, 2), (5, 5)], 2) == [(2, 2)]\n    assert find_tuples([(2, 2), (5, 5)], 5) == []"
    },
    {
      "rank": 11,
      "score": 8.0,
      "candidate": "def divisible_by_k(tuples, k):\n    return [x for x in tuples if all(x[i] % k == 0 for i in range(len(x)))]\n\n\nif __name__ == '__main__':\n    print(divisible_by_k([(2, 3), (2, 5), (4, 5)], 2))\n    print(divisible_by_k([(2, 3), (2, 5), (4, 5)], 3))"
    },
    {
      "rank": 12,
      "score": 8.0,
      "candidate": "def divisible_tuples(tuples, k):\n    return [t for t in tuples if all(t[i] % k == 0 for i in range(len(t)))]\n\n\nprint(divisible_tuples([(2, 2), (3, 5), (3, 10), (5, 7)], 5))"
    },
    {
      "rank": 13,
      "score": 8.0,
      "candidate": "def find_tuples_divisible_by_k(lst, k):\n    for t in lst:\n        if t[0] % k == 0:\n            print(t)\n\n\nlst = [(2, 3, 4), (2, 3, 5), (3, 5, 6), (3, 3, 2)]\nk = 2\nfind_tuples_divisible_by_k(lst, k)"
    },
    {
      "rank": 14,
      "score": 8.0,
      "candidate": "from typing import List, Tuple\n\n\ndef find_divisible_tuples(list_of_tuples: List[Tuple[int, int]], k: int) -> List[Tuple[int, int]]:\n    return [tuple for tuple in list_of_tuples if tuple[0] % k == 0 and tuple[1] % k == 0]\n\n\nif __name__ == \"__main__\":\n    assert find_divisible_tuples([(2, 4), (3, 6)], 3) == [(2, 4), (3, 6)]\n    assert find_divisible_tuples([(2, 4), (3, 6), (5, 8)], 5) == [(2, 4), (3, 6), (5, 8)]\n    assert find_divisible_tuples([(2, 4), (3, 6), (5, 8)], 7) == [(2, 4), (3, 6), (5, 8)]\n    assert find_divisible_tuples([(2, 4), (3, 6), (5, 8)], 11) == [(2, 4), (3, 6), (5, 8)]\n    assert find_divisible_tuples([(2, 4), (3, 6), (5, 8)], 12) == []"
    },
    {
      "rank": 15,
      "score": 8.0,
      "candidate": "def divisible_by_k(list_of_tuples, k):\n    divisible_list = []\n    for x in list_of_tuples:\n        if x[0] % k == 0:\n            divisible_list.append(x)\n    return divisible_list\n\n\nif __name__ == \"__main__\":\n    assert divisible_by_k([(1, 2), (2, 3), (3, 4), (4, 5), (5, 6)], 3) == [(2, 3), (5, 6)]"
    },
    {
      "rank": 16,
      "score": 8.0,
      "candidate": "def divisible_tuples(tuples, k):\n    result = []\n    for tuple in tuples:\n        if all(x % k == 0 for x in tuple):\n            result.append(tuple)\n    return result\n\n\nif __name__ == '__main__':\n    print(divisible_tuples([(1, 2), (1, 4), (2, 5), (2, 6), (2, 7)], 3))"
    },
    {
      "rank": 17,
      "score": 8.0,
      "candidate": "def divisible_tuples(tuples, k):\n    return [tuple for tuple in tuples if all(tuple[i] % k == 0 for i in range(len(tuple)))]"
    },
    {
      "rank": 18,
      "score": 8.0,
      "candidate": "def divisible_by_k(tuples, k):\n    return [t for t in tuples if all(t[i] % k == 0 for i in range(len(t)))]\n\n\nif __name__ == \"__main__\":\n    print(divisible_by_k([(1, 2), (3, 4)], 2))"
    },
    {
      "rank": 19,
      "score": 8.0,
      "candidate": "def divisible_by_k(tuples, k):\n    return [(x, y) for x, y in tuples if (x % k == 0) for y in tuples if (y % k == 0)]\n\n\nprint(divisible_by_k([(1, 1), (2, 2), (3, 3), (4, 4)], 2))\nprint(divisible_by_k([(1, 1), (2, 2), (3, 3), (4, 4)], 3))\nprint(divisible_by_k([(1, 1), (2, 2), (3, 3), (4, 4)], 4))"
    },
    {
      "rank": 20,
      "score": 8.0,
      "candidate": "def divisible_by_k(tuples, k):\n    return [t for t in tuples if sum(t) % k == 0]\n\n\nprint(divisible_by_k([(1, 2), (2, 3), (3, 5)], 2))"
    },
    {
      "rank": 21,
      "score": 8.0,
      "candidate": "def divisible_by_k(l, k):\n    return [x for x in l if x[0]%k==0 or x[1]%k==0]\n\nprint(divisible_by_k([(1,3),(4,5)],2))"
    },
    {
      "rank": 22,
      "score": 8.0,
      "candidate": "def find_tuples_with_all_elements_divisible_by_k(tuples, k):\n    tuples.sort(key=lambda tup: tup[0])\n    result = []\n    for tup in tuples:\n        if all(tup[0] % k == 0 for tup in result):\n            result.append(tup)\n    return result\n\n\ndef main():\n    print(find_tuples_with_all_elements_divisible_by_k([(1, 2, 3), (1, 3, 5), (2, 4, 5)], 2))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 23,
      "score": 8.0,
      "candidate": "def find_divisible_tuples(tuples, k):\n    return [t for t in tuples if all(t[i] % k == 0 for i in range(len(t)))]\n\n\nprint(find_divisible_tuples([(1, 2, 3), (4, 5, 6), (7, 8, 9)], 4))"
    },
    {
      "rank": 24,
      "score": 8.0,
      "candidate": "def divisible_by_k(list_of_tuples, k):\n    return [x for x in list_of_tuples if all(x[i]%k==0 for i in range(len(x)))]"
    },
    {
      "rank": 25,
      "score": 8.0,
      "candidate": "def divisible_tuples(tuples, k):\n    return [tuple for tuple in tuples if all(x % k == 0 for x in tuple)]\n\n\nif __name__ == '__main__':\n    assert divisible_tuples([(1, 2), (3, 4), (5, 6)], 2) == [(1, 2), (3, 4), (5, 6)]\n    assert divisible_tuples([(1, 2), (3, 4), (5, 6)], 3) == [(1, 2), (3, 4)]\n    assert divisible_tuples([(1, 2), (3, 4), (5, 6)], 4) == []"
    },
    {
      "rank": 26,
      "score": 8.0,
      "candidate": "def divisible_tuples(tuples, k):\n    tuples = sorted(tuples)\n    for i in range(0, len(tuples)-k):\n        if tuples[i][0] % k == 0 and tuples[i+1][0] % k == 0:\n            yield tuples[i]\n\nif __name__ == \"__main__\":\n    print(divisible_tuples([(3, 4), (2, 4), (1, 2)], 3))"
    },
    {
      "rank": 27,
      "score": 8.0,
      "candidate": "def divisible_by_k(k, nums):\n    divisible = []\n    for i in range(len(nums)):\n        if all(nums[i][j]%k==0 for j in range(len(nums[0]))) :\n            divisible.append(nums[i])\n    return divisible\n\n\n\nprint(divisible_by_k(4, [(1,2,3), (5,6,7), (1,2,3,5,6,7)]))\nprint(divisible_by_k(1, [(1,2,3), (5,6,7), (1,2,3,5,6,7)]))\nprint(divisible_by_k(2, [(1,2,3), (5,6,7), (1,2,3,5,6,7)]))\nprint(divisible_by_k(1, [(1,2,3), (5,6,7), (1,2,3,5,6,7)]))\nprint(divisible_by_k(2, [(1,2,3), (5,6,7), (1,2,3,5,6,7)]))"
    },
    {
      "rank": 28,
      "score": 8.0,
      "candidate": "def divisible_by_k(tuples, k):\n    return [x for x in tuples if sum(x) % k == 0]"
    },
    {
      "rank": 29,
      "score": 8.0,
      "candidate": "class Solution:\n    def divisibleTuples(self, nums, k):\n        return [(num, num % k) for num in nums]"
    },
    {
      "rank": 30,
      "score": 8.0,
      "candidate": "def divisible_tuples(tuples, k):\n    for i in tuples:\n        if i[0]%k == 0 and i[1]%k == 0:\n            print(i)\n\nif __name__ == \"__main__\":\n    divisible_tuples([(1, 1), (1, 2), (2, 3), (3, 4)], 3)"
    },
    {
      "rank": 31,
      "score": 8.0,
      "candidate": "def find_tuples_divisible_by_k(tuples, k):\n    # write your code here\n    res = []\n    for t in tuples:\n        if all(x % k == 0 for x in t):\n            res.append(t)\n    return res\n\nif __name__ == \"__main__\":\n    print(find_tuples_divisible_by_k([(1,1), (2,2), (3,3), (4,4), (5,5)], 2))\n    print(find_tuples_divisible_by_k([(1,1), (2,2), (3,3), (4,4), (5,5)], 3))\n    print(find_tuples_divisible_by_k([(1,1), (2,2), (3,3), (4,4), (5,5)], 4))"
    },
    {
      "rank": 32,
      "score": 8.0,
      "candidate": "def divisible_by_k(tuples, k):\n    divisible = set()\n    for i in tuples:\n        if i[0] % k == 0:\n            divisible.add(i)\n\n    return divisible\n\n\nif __name__ == \"__main__\":\n    print(divisible_by_k([(1, 2), (3, 4)], 2))"
    },
    {
      "rank": 33,
      "score": 8.0,
      "candidate": "def divisible_by_k(tuples, k):\n    result = set()\n    for i in tuples:\n        if all(num % k == 0 for num in i):\n            result.add(i)\n    return result\n\n\nif __name__ == '__main__':\n    assert divisible_by_k(\n        [(1, 2), (3, 4), (5, 6)],\n        3\n    ) == {(1, 2), (5, 6)}"
    },
    {
      "rank": 34,
      "score": 8.0,
      "candidate": "def divisible_tuples(tuples, k):\n    return [(x,y) for x,y in tuples if x % k == 0]\n\nprint(divisible_tuples([(1,2),(2,2)], 3))"
    },
    {
      "rank": 35,
      "score": 8.0,
      "candidate": "def divisible_by_k(l, k):\n    res = []\n    for i in l:\n        if i[0] % k == 0:\n            res.append(i)\n    return res\n\n\ndef main():\n    print(divisible_by_k([(1, 1), (2, 2), (3, 3)], 3))\n    print(divisible_by_k([(1, 1), (2, 2), (3, 3)], 4))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 36,
      "score": 8.0,
      "candidate": "def divisible_by(k, arr):\n    return [t for t in arr if t[0]%k == 0 and t[1]%k == 0]\n\nif __name__ == \"__main__\":\n    arr = [(2, 3), (2, 4), (5, 6), (7, 8)]\n    print(divisible_by(3, arr))"
    },
    {
      "rank": 37,
      "score": 8.0,
      "candidate": "def tuple_divisible_by_k(t, k):\n    return [i for i in t if i[0] % k == 0 and i[1] % k == 0]\n\n\nif __name__ == \"__main__\":\n    print(tuple_divisible_by_k([(2, 4), (3, 6)], 5))\n    print(tuple_divisible_by_k([(1, 1), (2, 2)], 5))\n    print(tuple_divisible_by_k([(1, 1), (2, 2)], 10))\n    print(tuple_divisible_by_k([(1, 1), (2, 2)], 20))"
    },
    {
      "rank": 38,
      "score": 8.0,
      "candidate": "def find_tuples_by_divisible_by(tuples, k):\n    result = []\n    for tup in tuples:\n        if tup[0] % k == 0 and tup[1] % k == 0:\n            result.append(tup)\n    return result\n\n\nif __name__ == \"__main__\":\n    print(find_tuples_by_divisible_by([(1, 1), (2, 2), (3, 3)], 3))"
    },
    {
      "rank": 39,
      "score": 8.0,
      "candidate": "def find_tuples_with_all_divisible_by_k(tuples, k):\n    return [tuple for tuple in tuples if all(tuple[i] % k == 0 for i in range(len(tuple)))]\n\n\ndef main():\n    print(find_tuples_with_all_divisible_by_k([(1, 2, 3), (4, 5, 6)], 2))\n    print(find_tuples_with_all_divisible_by_k([(1, 2, 3), (4, 5, 6)], 1))\n    print(find_tuples_with_all_divisible_by_k([(1, 2, 3), (4, 5, 6)], 3))\n    print(find_tuples_with_all_divisible_by_k([(1, 2, 3), (4, 5, 6)], 4))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 40,
      "score": 8.0,
      "candidate": "def divisible_by_k(tuples, k):\n    return [tup for tup in tuples if all(tup[i] % k == 0 for i in range(len(tup)))]\n\n\nif __name__ == '__main__':\n    print(divisible_by_k([(1, 2), (3, 4), (2, 3)], 3))\n    print(divisible_by_k([(1, 2), (3, 4), (2, 3)], 4))\n    print(divisible_by_k([(1, 2), (3, 4), (2, 3)], 5))\n    print(divisible_by_k([(1, 2), (3, 4), (2, 3)], 6))\n    print(divisible_by_k([(1, 2), (3, 4), (2, 3)], 7))\n    print(divisible_by_k([(1, 2), (3, 4), (2, 3)], 8))\n    print(divisible_by_k([(1, 2), (3, 4), (2, 3)], 9))"
    },
    {
      "rank": 41,
      "score": 8.0,
      "candidate": "def divisible_tuples(tuples, k):\n    # write your code here\n    result = []\n    for i in range(len(tuples)):\n        for j in range(len(tuples)):\n            if tuples[i][0] % tuples[j][1] == 0:\n                if tuples[i][1] == k:\n                    result.append(tuples[i])\n    return result"
    },
    {
      "rank": 42,
      "score": 8.0,
      "candidate": "def divisible_by_k(list_of_tuples, k):\n    return [x for x in list_of_tuples if all(x[i] % k == 0 for i in range(len(x)))]\n\n\nif __name__ == '__main__':\n    print(divisible_by_k([(1, 2, 3), (2, 3, 4), (1, 2, 3), (1, 2, 4), (4, 5, 6)], 3))\n    print(divisible_by_k([(1, 2, 3), (2, 3, 4), (1, 2, 3), (1, 2, 4), (4, 5, 6)], 5))\n    print(divisible_by_k([(1, 2, 3), (2, 3, 4), (1, 2, 3), (1, 2, 4), (4, 5, 6)], 7))\n    print(divisible_by_k([(1, 2, 3), (2, 3, 4), (1, 2, 3), (1, 2, 4), (4, 5, 6)], 8))"
    },
    {
      "rank": 43,
      "score": 8.0,
      "candidate": "def divisible_by_k(l, k):\n    d = {}\n    for i in l:\n        if i[0] % k == 0:\n            if i not in d:\n                d[i] = 1\n            else:\n                d[i] += 1\n    return [x for x in d if d[x] == k]\n\n\nif __name__ == '__main__':\n    assert divisible_by_k([(1, 2), (2, 1), (3, 5), (4, 3), (5, 3)], 3) == [(1, 2), (2, 3), (4, 5), (5, 3)]"
    },
    {
      "rank": 44,
      "score": 8.0,
      "candidate": "def find_tuples_divisible_by_k(tuples, k):\n    return [tuple for tuple in tuples if all(element % k == 0 for element in tuple)]\n\n\nif __name__ == \"__main__\":\n    print(find_tuples_divisible_by_k([(3, 2), (3, 4), (5, 5)], 3))"
    },
    {
      "rank": 45,
      "score": 8.0,
      "candidate": "def divisible_tuples(tuple_list, k):\n    return [t for t in tuple_list if t[0] % k == 0 and t[1] % k == 0]\n\nprint(divisible_tuples([(1, 2), (1, 3), (1, 4), (1, 5)], 2))"
    },
    {
      "rank": 46,
      "score": 8.0,
      "candidate": "def divisibleByK(tuples, k):\n    \"\"\"\n    :type tuples: List[Tuple[int]]\n    :type k: int\n    :rtype: List[Tuple[int]]\n    \"\"\"\n    return [(x, y) for x, y in tuples if x % k == 0]\n\nif __name__ == '__main__':\n    print(divisibleByK([(1,2), (1,4), (2,3)], 3))"
    },
    {
      "rank": 47,
      "score": 8.0,
      "candidate": "def find_tuples_by_k(tuples, k):\n    return [x for x in tuples if all(x[i] % k == 0 for i in range(len(x)))]\n\nprint(find_tuples_by_k([(2,3),(2,4),(4,3),(4,5)], 3))"
    },
    {
      "rank": 48,
      "score": 8.0,
      "candidate": "def divisible_by_k(k, tuples):\n    result = set()\n    for i in tuples:\n        if i[0] % k == 0 and i[1] % k == 0:\n            result.add(i)\n    return result\n\nprint(divisible_by_k(2, [(2, 3), (2, 4), (2, 6), (6, 2)]))\nprint(divisible_by_k(3, [(2, 3), (2, 4), (3, 2), (4, 3)]))\nprint(divisible_by_k(4, [(2, 3), (2, 4), (3, 2), (4, 3), (5, 3)]))\nprint(divisible_by_k(5, [(2, 3), (2, 4), (3, 2), (4, 3), (5, 3)]))"
    },
    {
      "rank": 49,
      "score": 8.0,
      "candidate": "def divisible_by_k(tuples, k):\n    divisible = []\n    for i in tuples:\n        if i[0] % k == 0 and i[1] % k == 0:\n            divisible.append(i)\n    return divisible\n\n\nprint(divisible_by_k([(1, 2), (2, 3), (2, 4)], 3))"
    },
    {
      "rank": 50,
      "score": 8.0,
      "candidate": "def divisible_by_k(list, k):\n    return [(x,y) for x,y in list if x%k==0 or y%k==0]\n\nlist = [(1,3),(2,4),(5,7),(9,4),(3,6)]\nk = 4\nprint(divisible_by_k(list, k))"
    },
    {
      "rank": 51,
      "score": 8.0,
      "candidate": "def tuple_divisible(tuples, k):\n    return [x for x in tuples if all(x[i] % k == 0 for i in range(len(x)))]\n\n\nif __name__ == \"__main__\":\n    assert tuple_divisible([(1, 2), (3, 4), (5, 6)], 3) == [(1, 2), (3, 4)]\n    assert tuple_divisible([(1, 2), (3, 4), (5, 6)], 4) == [(1, 2), (3, 4)]"
    },
    {
      "rank": 52,
      "score": 8.0,
      "candidate": "def divisible_by(k, tuples):\n    return [t for t in tuples if all(t[i] % k == 0 for i in range(len(t)))]\n\n\nif __name__ == '__main__':\n    print(divisible_by(6, [(3, 5), (1, 5), (5, 3), (3, 4)]))\n    print(divisible_by(5, [(2, 3), (3, 4), (3, 5), (4, 3), (4, 5)]))"
    },
    {
      "rank": 53,
      "score": 8.0,
      "candidate": "def find_divisible_tuples(l, k):\n    if not l:\n        return []\n    if len(l) == 1:\n        return [(l[0],)]\n    return [(i[0] % k, i[1]) for i in l]\n\nif __name__ == \"__main__\":\n    l = [(1, 2), (3, 4), (5, 6)]\n    k = 3\n    print(find_divisible_tuples(l, k))"
    },
    {
      "rank": 54,
      "score": 8.0,
      "candidate": "def find_tuples_by_divisor(tuple_list, divisor):\n    return [tuple for tuple in tuple_list if tuple[0] % divisor == 0]\n\nprint(find_tuples_by_divisor([(3,4),(5,6),(8,9)],3))\nprint(find_tuples_by_divisor([(3,4),(5,6),(8,9)],5))\nprint(find_tuples_by_divisor([(3,4),(5,6),(8,9)],10))"
    },
    {
      "rank": 55,
      "score": 8.0,
      "candidate": "def find_tuples_divisible_by_k(tuples, k):\n    result = []\n    for i in tuples:\n        if all(x % k == 0 for x in i):\n            result.append(i)\n    return result\n\nprint(find_tuples_divisible_by_k([(1, 2), (3, 4)], 3))"
    },
    {
      "rank": 56,
      "score": 8.0,
      "candidate": "def find_divisible_tuples(tuples, k):\n    return [t for t in tuples if all(t[i] % k == 0 for i in range(len(t)))]\n\nprint(find_divisible_tuples([(1, 2), (4, 5)], 3))"
    },
    {
      "rank": 57,
      "score": 8.0,
      "candidate": "def divisible_tuples(k, arr):\n    return [x for x in arr if x[0] % k == 0 and x[1] % k == 0]\n\n\nif __name__ == \"__main__\":\n    print(divisible_tuples(10, [(1, 2), (2, 3), (4, 5)]))"
    },
    {
      "rank": 58,
      "score": 8.0,
      "candidate": "def divisible_by(arr, k):\n    divisible = []\n    for i in arr:\n        if i[0] % k == 0:\n            if i not in divisible:\n                divisible.append(i)\n    return divisible\n\nif __name__ == '__main__':\n    arr = [(1,2), (3,4), (5,6), (7,8), (9,10)]\n    k = 5\n    print(divisible_by(arr, k))"
    },
    {
      "rank": 59,
      "score": 8.0,
      "candidate": "def find_tuples_divisible_by_k(tuples, k):\n    result = []\n    for t in tuples:\n        if t[0] % k == 0 and t[1] % k == 0:\n            result.append(t)\n    return result\n\n\n\nif __name__ == \"__main__\":\n    print(find_tuples_divisible_by_k([(2, 3), (3, 5), (2, 5)], 3))"
    },
    {
      "rank": 60,
      "score": 8.0,
      "candidate": "def find_tuples_divisible_by_k(tuples, k):\n    result = []\n    for tup in tuples:\n        if all(tup[i] % k == 0 for i in range(len(tup))):\n            result.append(tup)\n    return result"
    },
    {
      "rank": 61,
      "score": 8.0,
      "candidate": "def find_tuples_divisible_by_k(list_of_tuples, k):\n    result = []\n    for i in list_of_tuples:\n        if i[0] % k == 0 and i[1] % k == 0:\n            result.append(i)\n    return result\n\n\nprint(find_tuples_divisible_by_k([(1, 2), (3, 4)], 3))\nprint(find_tuples_divisible_by_k([(1, 2)], 3))\nprint(find_tuples_divisible_by_k([(1, 2), (3, 4)], 5))"
    },
    {
      "rank": 62,
      "score": 8.0,
      "candidate": "def divisible_by_k(tuples, k):\n    return [x for x in tuples if all(x[i] % k == 0 for i in range(len(x)))]\n\nif __name__ == \"__main__\":\n    print(divisible_by_k([(1, 2, 3), (1, 3, 5), (2, 3, 7)], 3))\n    print(divisible_by_k([(1, 2, 3), (1, 3, 5), (2, 3, 7)], 5))\n    print(divisible_by_k([(1, 2, 3), (1, 3, 5), (2, 3, 7)], 8))"
    },
    {
      "rank": 63,
      "score": 8.0,
      "candidate": "def find_tuples_divisible(tuples, k):\n    return [x for x in tuples if all(x[0] % i == 0 for i in k)]\n\n\nprint(find_tuples_divisible([(1, 1), (2, 2), (3, 3), (4, 4), (5, 5)], [2, 3, 4, 5, 6]))"
    },
    {
      "rank": 64,
      "score": 8.0,
      "candidate": "def find_divisible_tuple(list_of_tuples, k):\n    return [(x, y) for x, y in list_of_tuples if x % k == 0 for y in list_of_tuples if y % k == 0]\n\n\nif __name__ == \"__main__\":\n    print(find_divisible_tuple([(1, 2), (1, 3), (2, 2)], 3))\n    print(find_divisible_tuple([(1, 2), (1, 3), (2, 3), (3, 2)], 2))"
    },
    {
      "rank": 65,
      "score": 8.0,
      "candidate": "def find_tuples_with_all_elements_divisible_by_k(tuples, k):\n    count = 0\n    for i in range(len(tuples)):\n        for j in range(len(tuples)):\n            if tuples[i][0] % tuples[j][0] == 0 and tuples[i][1] % tuples[j][1] == 0:\n                count += 1\n    return count\n\n\nif __name__ == '__main__':\n    print(find_tuples_with_all_elements_divisible_by_k([(5, 10), (20, 30)], 2))\n    print(find_tuples_with_all_elements_divisible_by_k([(5, 10), (20, 30)], 3))\n    print(find_tuples_with_all_elements_divisible_by_k([(5, 10), (20, 30)], 5))"
    },
    {
      "rank": 66,
      "score": 8.0,
      "candidate": "def divisible(tuples, k):\n    return [t for t in tuples if all(t[i] % k == 0 for i in range(len(t)))]\n\n\nif __name__ == \"__main__\":\n    print(divisible([(1, 2, 3), (1, 5, 7), (2, 4, 6)], 3))"
    },
    {
      "rank": 67,
      "score": 8.0,
      "candidate": "def divisible_tuples(k, tuples):\n    return [x for x in tuples if all(x % k == 0 for x in x)]\n\nprint(divisible_tuples(3, [(1, 2), (3, 4), (5, 6)]))\nprint(divisible_tuples(2, [(1, 2), (3, 4)]))\nprint(divisible_tuples(1, [(1, 2), (3, 4)]))\nprint(divisible_tuples(0, [(1, 2), (3, 4)]))"
    },
    {
      "rank": 68,
      "score": 8.0,
      "candidate": "def find_tuples_with_all_elements_divisible_by_k(tuples, k):\n    result = []\n    for tup in tuples:\n        if all(tup[i] % k == 0 for i in range(len(tup))) and len(tup)!= 0:\n            result.append(tup)\n    return result\n\n\ndef main():\n    print(find_tuples_with_all_elements_divisible_by_k([(1, 2), (2, 3), (3, 4), (4, 5)], 3))\n\n\nmain()"
    },
    {
      "rank": 69,
      "score": 8.0,
      "candidate": "def find_divisible_tuples(tuples, k):\n    return [x for x in tuples if all(x[i] % k == 0 for i in range(len(x)))]\n\n\nif __name__ == \"__main__\":\n    print(find_divisible_tuples([(2, 3), (5, 3)], 3))"
    },
    {
      "rank": 70,
      "score": 8.0,
      "candidate": "def find_tuples(tuples, k):\n    return [x for x in tuples if x[0] % k == 0]\n\n\nif __name__ == \"__main__\":\n    print(find_tuples([(1, 3), (2, 2), (5, 3), (7, 3)], 3))\n    print(find_tuples([(1, 3), (2, 2), (5, 3), (7, 3)], 2))\n    print(find_tuples([(1, 3), (2, 2), (5, 3), (7, 3)], 5))"
    },
    {
      "rank": 71,
      "score": 8.0,
      "candidate": "def divisible_tuples(tuples, k):\n    return [x for x in tuples if all(x[i] % k == 0 for i in range(len(x)))]\n\n\nprint(divisible_tuples([(1, 2, 3), (3, 5, 7)], 3))\nprint(divisible_tuples([(1, 2, 3), (3, 5, 7), (4, 8, 9)], 2))"
    },
    {
      "rank": 72,
      "score": 8.0,
      "candidate": "def divisible_tuples(tuples, k):\n    return [x for x in tuples if all(x[i]%k==0 for i in range(len(x)))]\n\nprint(divisible_tuples([(1, 2, 3), (1, 2, 4), (1, 2, 5), (3, 4, 6), (3, 4, 7)], 3))\nprint(divisible_tuples([(1, 2, 3), (1, 2, 4), (1, 2, 5), (3, 4, 6), (3, 4, 7)], 3))"
    },
    {
      "rank": 73,
      "score": 8.0,
      "candidate": "def find_tuples_divisible_by_k(tuples, k):\n    return [x for x in tuples if all(x[0] % k == 0 or x[1] % k == 0 for x in x)]\n\n\nif __name__ == \"__main__\":\n    assert find_tuples_divisible_by_k([(2, 3), (3, 4), (4, 5)], 2) == [(3, 4), (4, 5)]\n    assert find_tuples_divisible_by_k([(1, 2, 3), (1, 3, 4), (1, 4, 5)], 2) == [(1, 4, 5)]\n    assert find_tuples_divisible_by_k([(1, 2, 3), (1, 3, 4), (1, 4, 5)], 4) == []\n    assert find_tuples_divisible_by_k([(1, 2, 3), (1, 3, 4), (1, 4, 5)], 5) == []"
    },
    {
      "rank": 74,
      "score": 8.0,
      "candidate": "def divisible_tuples(tuples, k):\n    if len(tuples) <= 0:\n        return []\n    divisible_tuples_list = []\n    for i in range(len(tuples)):\n        for j in range(len(tuples)):\n            if i!= j:\n                if tuples[i][0] % k == 0 and tuples[j][0] % k == 0:\n                    divisible_tuples_list.append((tuples[i], tuples[j]))\n    return divisible_tuples_list\n\nprint(divisible_tuples([(1,1), (2,2), (3,3)], 3))"
    },
    {
      "rank": 75,
      "score": 8.0,
      "candidate": "def find_divisible(list_of_tuples, k):\n    list_of_tuples.sort()\n    count = 0\n    for i in range(len(list_of_tuples)):\n        for j in range(i+1, len(list_of_tuples)):\n            if list_of_tuples[i][0] % list_of_tuples[j][0] == k:\n                count += 1\n    return count"
    },
    {
      "rank": 76,
      "score": 8.0,
      "candidate": "def find_divisible_tuples(tuples, k):\n    return [(tup[0] // k, tup[1]) for tup in tuples if tup[0] % k == 0]\n\n\nif __name__ == \"__main__\":\n    assert find_divisible_tuples([(1, 2), (3, 4), (4, 5), (5, 2)], 3) == [(4, 2), (5, 2)]\n    assert find_divisible_tuples([(1, 2), (3, 4), (4, 5), (5, 2)], 6) == []"
    },
    {
      "rank": 77,
      "score": 8.0,
      "candidate": "def divisible_by_k(tuple_list, k):\n    result = []\n    for i in range(len(tuple_list)):\n        if tuple_list[i][0] % k == 0:\n            result.append(tuple_list[i])\n    return result\n\n\nif __name__ == \"__main__\":\n    print(divisible_by_k([(1, 1), (2, 2)], 2))"
    },
    {
      "rank": 78,
      "score": 8.0,
      "candidate": "def divisible_tuples(arr, k):\n    result = []\n    for t in arr:\n        if t[0] % k == 0:\n            if t[1] not in result:\n                result.append(t[1])\n    return result\n\n\nif __name__ == \"__main__\":\n    print(divisible_tuples([(2, 3), (1, 5), (2, 2), (3, 1)], 3))\n    print(divisible_tuples([(2, 3), (1, 5), (2, 2), (3, 1)], 5))\n    print(divisible_tuples([(2, 3), (1, 5), (2, 2), (3, 1)], 7))"
    },
    {
      "rank": 79,
      "score": 8.0,
      "candidate": "def find_tuples_divisible_by_k(tuples, k):\n    # Your code here\n    return [x for x in tuples if all(x[i] % k == 0 for i in range(len(x)))]"
    },
    {
      "rank": 80,
      "score": 8.0,
      "candidate": "def find_divisible(arr, k):\n    arr.sort()\n    for i in range(len(arr)):\n        if arr[i][0] % k == 0:\n            print(arr[i])\n\narr = [(2, 3), (2, 4), (2, 5), (3, 4)]\nk = 5\nfind_divisible(arr, k)"
    },
    {
      "rank": 81,
      "score": 8.0,
      "candidate": "def find_divisible_tuples(tuples, k):\n    return [x for x in tuples if all(x[i] % k == 0 for i in range(len(x)))]"
    },
    {
      "rank": 82,
      "score": 7.0,
      "candidate": "def divisible_by_k(arr, k):\n    for i in arr:\n        if i[0] % k == 0:\n            if i[1] % k == 0:\n                print(i)\n\n\nif __name__ == \"__main__\":\n    arr = [(2, 4), (3, 6), (5, 8), (6, 9), (1, 10)]\n    k = 5\n    divisible_by_k(arr, k)"
    },
    {
      "rank": 83,
      "score": 1.0,
      "candidate": "def find_divisible_tuples(arr, k):\n    res = []\n    for i in arr:\n        if i[0] % k == 0:\n            res.append(i)\n    return res\n\n\nprint(find_divisible_tuples([(1, 2), (2, 3), (3, 5)], 3))\nprint(find_divisible_tuples([(1, 2), (2, 3), (3, 5)], 4))"
    },
    {
      "rank": 84,
      "score": 1.0,
      "candidate": "def divisible_by_k(list_of_tuples, k):\n    res = []\n    for i in range(len(list_of_tuples)):\n        for j in range(len(list_of_tuples[i])):\n            if list_of_tuples[i][j] % k == 0:\n                res.append(list_of_tuples[i])\n                break\n    return res\n\n\nlist_of_tuples = [(1, 2, 3), (1, 3, 4), (1, 4, 5), (1, 5, 6)]\nk = 3\nprint(divisible_by_k(list_of_tuples, k))"
    },
    {
      "rank": 85,
      "score": 1.0,
      "candidate": "class Solution(object):\n    def divisibleTuples(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: List[Tuple]\n        \"\"\"\n        if not nums:\n            return []\n        d = {}\n        for i in nums:\n            if i[0] not in d:\n                d[i[0]] = 1\n            else:\n                d[i[0]] += 1\n        res = []\n        for i in d:\n            if d[i] % k == 0:\n                res.append((i, d[i]))\n        return res"
    },
    {
      "rank": 86,
      "score": 1.0,
      "candidate": "def divisible_by(lst, k):\n    result = []\n    for i in lst:\n        if i[0] % k == 0 and i[1] % k == 0:\n            result.append(i)\n    return result\n\n\nif __name__ == \"__main__\":\n    lst = [(1, 2), (3, 4), (5, 6), (7, 8), (9, 10), (11, 12)]\n    print(divisible_by(lst, 3))"
    },
    {
      "rank": 87,
      "score": 1.0,
      "candidate": "class Solution(object):\n    def divisibleTuples(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: List[int]\n        \"\"\"\n        if not nums:\n            return []\n        nums = sorted(nums)\n        return [(i, j) for i, j in zip(nums, nums[1:]) if i % k == 0]"
    },
    {
      "rank": 88,
      "score": 1.0,
      "candidate": "def find_tuples(arr, k):\n    return [(x,y) for x,y in arr if x%k == 0]\n\n\ndef find_tuples_v2(arr, k):\n    return [(x,y) for x,y in arr if x%k == 0 and y%k == 0]\n\n\ndef find_tuples_v3(arr, k):\n    return [(x,y) for x,y in arr if x%k == 0 and y%k == 0 and x%k!= 0 and y%k!= 0]\n\n\ndef find_tuples_v4(arr, k):\n    return [(x,y) for x,y in arr if x%k == 0 and y%k!= 0 and x%k!= 0 and y%k == 0]\n\n\narr = [(3,4),(4,7),(3,8),(4,9),(4,11),(5,1),(6,2),(6,5),(7,6)]\nprint(find_tuples(arr, 3))\nprint(find_tuples_v2(arr, 3))\nprint(find_tuples_v3(arr, 3))\nprint(find_tuples_v4(arr, 3))"
    },
    {
      "rank": 89,
      "score": 1.0,
      "candidate": "class Solution:\n    def divisibleTuples(self, nums: List[int], k: int) -> List[int]:\n        dict_ = {}\n        for i in range(len(nums)):\n            if nums[i] % k not in dict_:\n                dict_[nums[i] % k] = [nums[i]]\n            else:\n                dict_[nums[i] % k].append(nums[i])\n        \n        result = []\n        for i in dict_.keys():\n            if len(dict_[i]) == 1:\n                result.append(dict_[i][0])\n            else:\n                result.append(tuple(dict_[i]))\n        \n        return result"
    },
    {
      "rank": 90,
      "score": 1.0,
      "candidate": "class Solution:\n    def divisibleByK(self, nums: List[int], k: int) -> List[int]:\n        res = []\n        for num in nums:\n            if num % k == 0:\n                res.append(num)\n        return res"
    },
    {
      "rank": 91,
      "score": 1.0,
      "candidate": "def find_divisible_tuples(tuples, k):\n    for i in range(len(tuples)):\n        for j in range(len(tuples[i])):\n            if tuples[i][j] % k == 0:\n                print(tuples[i], tuples[j])\n                return\n\n\nif __name__ == \"__main__\":\n    find_divisible_tuples([(2, 4), (3, 6)], 3)"
    },
    {
      "rank": 92,
      "score": 1.0,
      "candidate": "class Solution:\n    def divisibleTuples(self, nums, k):\n        return [tuple(t) for t in nums if all(t[i] % k == 0 for i in range(len(t)))]\n\n\nif __name__ == '__main__':\n    nums = [(1, 2, 3), (1, 3, 5), (5, 7, 8)]\n    k = 3\n    out = [(1, 2), (5, 7, 8)]\n    s = Solution()\n    assert s.divisibleTuples(nums, k) == out"
    },
    {
      "rank": 93,
      "score": 1.0,
      "candidate": "def find_divisible(list, k):\n    result = []\n    for i in list:\n        if i[0] % k == 0:\n            result.append(i)\n    return result\n\n\nprint(find_divisible([(1, 2), (3, 4), (5, 6)], 5))\nprint(find_divisible([(1, 2), (3, 4), (5, 6)], 3))\nprint(find_divisible([(1, 2), (3, 4), (5, 6)], 7))\nprint(find_divisible([(1, 2), (3, 4), (5, 6)], 9))\nprint(find_divisible([(1, 2), (3, 4), (5, 6)], 11))"
    },
    {
      "rank": 94,
      "score": 1.0,
      "candidate": "class Solution:\n    def divisibleTuples(self, nums, k):\n        return [x for x in nums if x[0] % k == 0 and x[1] % k == 0]"
    },
    {
      "rank": 95,
      "score": 1.0,
      "candidate": "class Solution:\n    def divisibleByK(self, nums, k):\n        return [(i, j) for i, j in enumerate(nums) if j % k == 0]"
    },
    {
      "rank": 96,
      "score": 1.0,
      "candidate": "class Solution(object):\n    def divisibleTuples(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: List[int]\n        \"\"\"\n        if len(nums) < 2:\n            return []\n\n        nums.sort()\n        ans = []\n        for i in range(len(nums)):\n            if nums[i][0] % k == 0:\n                for j in range(len(nums)):\n                    if nums[j][0] % k == 0:\n                        ans.append((nums[i][0], nums[j][0]))\n\n        return ans\n\nprint Solution().divisibleTuples([4, 3, 2, 5], 3)\nprint Solution().divisibleTuples([2,3,4,5], 2)\nprint Solution().divisibleTuples([4,3,2,5], 5)"
    },
    {
      "rank": 97,
      "score": 1.0,
      "candidate": "class Solution(object):\n    def divisibleTuples(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: List[int]\n        \"\"\"\n        result = []\n        for i in range(len(nums)):\n            for j in range(len(nums)):\n                if nums[i][0] % k == 0 and nums[j][0] % k == 0:\n                    if nums[i][1] % k == 0 and nums[j][1] % k == 0:\n                        result.append((nums[i][0], nums[j][0]))\n        return result"
    },
    {
      "rank": 98,
      "score": 1.0,
      "candidate": "class Solution(object):\n    def divisibleTuples(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: List[int]\n        \"\"\"\n        return [x for x in nums if all(x%k==0 for x in x)]\n\nprint(Solution().divisibleTuples([1,2,3,4,5], 2))"
    },
    {
      "rank": 99,
      "score": 1.0,
      "candidate": "def divisibleByK(arr, k):\n    ans = []\n    for i in arr:\n        if i[0] % k == 0:\n            ans.append(i)\n    return ans"
    },
    {
      "rank": 100,
      "score": 1.0,
      "candidate": "def divisible_by_k(tuples, k):\n    \"\"\"\n    :type tuples: List[Tuple[int, int]]\n    :type k: int\n    :rtype: List[Tuple[int, int]]\n    \"\"\"\n    # write your code here\n    return [t for t in tuples if all(t[0] % k == 0 or t[1] % k == 0 for t in tuples)]"
    }
  ]
}