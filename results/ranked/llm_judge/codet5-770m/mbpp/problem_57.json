{
  "timestamp": "2025-09-14T12:53:20.651408",
  "method": "improved_llm_judge",
  "judge_model": "codellama/CodeLlama-7b-Python-hf",
  "target_model": "codet5-770m",
  "dataset": "mbpp",
  "problem_number": 57,
  "total_candidates": 100,
  "results": [
    {
      "rank": 1,
      "score": 10.0,
      "candidate": "def is_monotonic(arr):\n    if arr[0] < arr[1]:\n        return False\n    for i in range(len(arr) - 1):\n        if arr[i] > arr[i + 1]:\n            return False\n    return True\n\n\nprint(is_monotonic([4, 3, 2, 1]))\nprint(is_monotonic([5, 6, 5, 5, 4, 3, 2, 1]))\nprint(is_monotonic([4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4,"
    },
    {
      "rank": 2,
      "score": 10.0,
      "candidate": "def check_monotonic(arr):\n    for i in range(1, len(arr)):\n        if arr[i] > arr[i-1]:\n            return False\n    return True\n\nprint(check_monotonic([1, 2, 3, 4, 5, 6, 7, 8, 9]))"
    },
    {
      "rank": 3,
      "score": 10.0,
      "candidate": "def monotonic(arr):\n    if len(arr) == 1:\n        return True\n    if arr[0] < arr[1]:\n        return False\n    for i in range(1, len(arr)):\n        if arr[i] > arr[i-1]:\n            return False\n    return True\n\n\narr = [1, 2, 3, 4, 5, 6, 7, 8]\nprint(monotonic(arr))"
    },
    {
      "rank": 4,
      "score": 10.0,
      "candidate": "def monotonic(arr):\n    if len(arr) == 1:\n        return True\n    if arr[0] >= arr[len(arr)-1]:\n        return False\n    else:\n        return True\n\n\nprint(monotonic([1, 2, 3, 4, 5]))\nprint(monotonic([1, 2, 3, 4, 5, 6, 7, 8]))\nprint(monotonic([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]))\nprint(monotonic([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 151, 152, 153, 154, 155, 156, 157, 158, 159, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 1"
    },
    {
      "rank": 5,
      "score": 10.0,
      "candidate": "def monotonic_array(arr):\n    if len(arr) < 2:\n        return True\n    for i in range(1, len(arr)):\n        if arr[i] < arr[i-1]:\n            return False\n    return True\n\n\nprint(monotonic_array([1, 5, 3, 4, 2]))\nprint(monotonic_array([1, 2, 3, 4, 5]))\nprint(monotonic_array([1, 2, 3, 4, 5, 6, 7]))\nprint(monotonic_array([1, 2, 3, 4, 5, 6, 7, 8, 9]))\nprint(monotonic_array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]))\nprint(monotonic_array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]))\nprint(monotonic_array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]))\nprint(monotonic_array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17]))\nprint(monotonic_array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18]))\nprint(monotonic_array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23]))\nprint(monotonic_array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56"
    },
    {
      "rank": 6,
      "score": 10.0,
      "candidate": "def is_monotonic(arr):\n    if len(arr) == 1:\n        return True\n    if arr[0] >= arr[len(arr)-1]:\n        return False\n    for i in range(1, len(arr)):\n        if arr[i] > arr[i-1]:\n            return False\n    return True\n\narr = [1,2,3,4,5,6,7]\nprint(is_monotonic(arr))\n\narr = [1,2,3,4,5,6,7,8,9,10,11,12]\nprint(is_monotonic(arr))\n\narr = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,158,159,160,161,162,163,165,166,167,168,168,168,168,168,168,168,168,168,168,168,168"
    },
    {
      "rank": 7,
      "score": 8.0,
      "candidate": "def is_monotonic(arr):\n    if len(arr) <= 1:\n        return True\n    return arr[0] == arr[-1] and is_monotonic(arr[1:-1])\n\nprint(is_monotonic([1, 2, 3, 4, 5]))\nprint(is_monotonic([-1, -2, -3, -4, -5]))\nprint(is_monotonic([-1, -2, -3, -4, -5, -6]))"
    },
    {
      "rank": 8,
      "score": 8.0,
      "candidate": "def is_monotonic(arr):\n    if len(arr) <= 1:\n        return True\n\n    for i in range(1, len(arr) - 1):\n        if arr[i] > arr[i - 1]:\n            return False\n    return True\n\n\nif __name__ == '__main__':\n    arr = [5, 1, 2, 4, 3, 6, 7]\n    print(is_monotonic(arr))"
    },
    {
      "rank": 9,
      "score": 8.0,
      "candidate": "def monotonic(arr):\n    if arr[0] >= arr[-1]:\n        return False\n    else:\n        return True\n\nprint(monotonic([1,2,3,4,5]))\nprint(monotonic([4,5,1,2,3]))"
    },
    {
      "rank": 10,
      "score": 8.0,
      "candidate": "def is_monotonic(arr):\n    if len(arr) < 2:\n        return True\n    for i in range(1, len(arr)):\n        if arr[i] > arr[i - 1]:\n            return False\n    return True\n\n\nif __name__ == \"__main__\":\n    print(is_monotonic([1, 2, 3, 4, 5]))\n    print(is_monotonic([2, 1, 3, 4, 5]))\n    print(is_monotonic([-2, -1, -3, -4, -5]))\n    print(is_monotonic([-2, -1, -3, -4, -5, -6]))\n    print(is_monotonic([-2, -1, -3, -4, -5, -6, -7]))\n    print(is_monotonic([-2, -1, -3, -4, -5, -6, -7, -8]))\n    print(is_monotonic([-2, -1, -3, -4, -5, -6, -7, -8, -9]))\n    print(is_monotonic([-2, -1, -3, -4, -5, -6, -7, -8, -9, 10]))\n    print(is_monotonic([-2, -1, -3, -4, -5, -6, -7, -8, -9, 11]))\n    print(is_monotonic([-2, -1, -3, -4, -5, -6, -7, -8, -9, 10, 11, 12]))\n    print(is_monotonic([-2, -1, -3, -4, -5, -6, -7, -8, -9, 11, 12, 13]))"
    },
    {
      "rank": 11,
      "score": 8.0,
      "candidate": "def monotonic(arr):\n    if len(arr) <= 1:\n        return True\n    if arr[0] > arr[-1]:\n        return False\n    else:\n        return monotonic(arr[1:-1])\n\n\narr = [1, 2, 3, 4, 5]\nprint(monotonic(arr))"
    },
    {
      "rank": 12,
      "score": 8.0,
      "candidate": "def is_monotonic(array):\n    if len(array) <= 1:\n        return True\n    if array[0] > array[-1]:\n        return False\n    for i in range(len(array) - 1):\n        if array[i] > array[i + 1]:\n            return False\n    return True\n\nif __name__ == \"__main__\":\n    print(is_monotonic([1, 2, 3, 4, 5, 6]))\n    print(is_monotonic([-1, -2, -3, -4, -5, -6]))\n    print(is_monotonic([4, 5, 6, 7, 8]))\n    print(is_monotonic([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]))"
    },
    {
      "rank": 13,
      "score": 8.0,
      "candidate": "def is_monotonic(a):\n    if len(a) <= 1:\n        return True\n    else:\n        if a[0] <= a[-1]:\n            return False\n        else:\n            return is_monotonic(a[1:-1])\n\nif __name__ == '__main__':\n    a = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99]\n    print(is_monotonic(a))"
    },
    {
      "rank": 14,
      "score": 8.0,
      "candidate": "def is_monotonic(arr):\n    if len(arr) <= 1:\n        return True\n    if arr[0] >= arr[-1]:\n        return False\n    for i in range(len(arr) - 1):\n        if arr[i] > arr[i + 1]:\n            return False\n    return True\n\n\nprint(is_monotonic([-1, 0, 1, 2, 3, 4, 5]))"
    },
    {
      "rank": 15,
      "score": 8.0,
      "candidate": "def is_monotonic(arr):\n    if arr[0] > arr[-1]:\n        return False\n    for i in range(1, len(arr)):\n        if arr[i] > arr[i-1]:\n            return False\n    return True\n\n\ndef is_monotonic2(arr):\n    if arr[0] > arr[len(arr)-1]:\n        return False\n    for i in range(1, len(arr)):\n        if arr[i] < arr[i-1]:\n            return False\n    return True\n\n\nprint(is_monotonic([1, 2, 3, 4, 5]))\nprint(is_monotonic([1, 2, 3, 4, 5]))\nprint(is_monotonic([1, 2, 3, 4]))\nprint(is_monotonic([1, 2, 3, 4, 5, 6, 7]))\nprint(is_monotonic([1, 2, 3, 4, 5, 6, 7, 8, 9]))\nprint(is_monotonic([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\nprint(is_monotonic([1, 2, 3, 4, 5, 6, 7, 8, 9]))\nprint(is_monotonic([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))"
    },
    {
      "rank": 16,
      "score": 8.0,
      "candidate": "def monotonic(arr):\n    for i in range(len(arr)-1):\n        if arr[i] > arr[i+1]:\n            return False\n    return True\n\n\narr = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nprint(monotonic(arr))"
    },
    {
      "rank": 17,
      "score": 8.0,
      "candidate": "def monotonic(arr):\n    if len(arr) == 1:\n        return True\n\n    if arr[0] > arr[-1]:\n        return False\n\n    for i in range(1, len(arr)):\n        if arr[i] < arr[i-1]:\n            return False\n\n    return True\n\n\ndef main():\n    arr = [4, 3, 2, 1, -1]\n    print(monotonic(arr))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 18,
      "score": 8.0,
      "candidate": "def is_monotonic(arr):\n    if arr[0] < arr[-1]:\n        return False\n    return True\n\nif __name__ == \"__main__\":\n    arr = [1,2,3,4,5]\n    print(is_monotonic(arr))"
    },
    {
      "rank": 19,
      "score": 8.0,
      "candidate": "def monotonic(a):\n    if len(a) == 1:\n        return True\n    if len(a) == 2:\n        if a[0] >= a[1]:\n            return False\n        else:\n            return True\n    if len(a) == 3:\n        if a[0] <= a[1] and a[0] <= a[2]:\n            return False\n        else:\n            return True\n\n\nprint(monotonic([0, 1, 2, 3]))\nprint(monotonic([-1, 0, 1, 2]))\nprint(monotonic([-1, 0, 1, 3]))\nprint(monotonic([-1, -1, -1, -1, -1, -1, -1, -1, -1]))\nprint(monotonic([-1, -1, -1, -1, -1, -1, -1, -1, -1, -1]))\nprint(monotonic([-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]))\nprint(monotonic([-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]))\nprint(monotonic([-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]))\nprint(monotonic([-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]))\nprint(monotonic([-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]))\nprint(monotonic([-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1"
    },
    {
      "rank": 20,
      "score": 8.0,
      "candidate": "def is_monotonic(arr):\n    if len(arr) < 2:\n        return True\n    elif arr[0] < arr[1]:\n        return False\n    else:\n        return is_monotonic(arr[1:])\n\nprint(is_monotonic([1, 2, 3, 4, 5]))"
    },
    {
      "rank": 21,
      "score": 8.0,
      "candidate": "def is_monotonic(arr):\n    if len(arr) <= 1:\n        return True\n    else:\n        for i in range(1, len(arr)):\n            if arr[i] < arr[i - 1]:\n                return False\n        return True\n\nprint(is_monotonic([4, 2, 3, 1, 2, 3, 1]))\nprint(is_monotonic([4, 2, 3, 1, 2, 3, 1]))\nprint(is_monotonic([4, 2, 3, 1, 2, 3, 1]))\nprint(is_monotonic([4, 2, 3, 1, 2, 3, 1]))"
    },
    {
      "rank": 22,
      "score": 8.0,
      "candidate": "def is_monotonic(arr):\n    if len(arr) == 1:\n        return True\n    elif arr[0] > arr[-1]:\n        return False\n    else:\n        return is_monotonic(arr[1:-1])\n\nprint(is_monotonic([1, 2, 3, 4, 5]))\nprint(is_monotonic([1, 2, 3, 4]))\nprint(is_monotonic([]))"
    },
    {
      "rank": 23,
      "score": 8.0,
      "candidate": "def check_monotonic(arr):\n    if len(arr)<2:\n        return True\n    for i in range(len(arr)-1):\n        if arr[i]>arr[i+1]:\n            return False\n    return True\n\n\nprint(check_monotonic([0,1,2,3,4,5]))"
    },
    {
      "rank": 24,
      "score": 8.0,
      "candidate": "import pytest\n\n\ndef is_monotonic(arr):\n    if len(arr) <= 1:\n        return True\n    if arr[0] >= arr[-1]:\n        return False\n    for i in range(1, len(arr)):\n        if arr[i] > arr[i - 1]:\n            return False\n    return True\n\n\ndef test_is_monotonic():\n    assert is_monotonic([1, 2, 3, 4, 5])\n    assert is_monotonic([1, 2, 3, 5, 4])\n    assert is_monotonic([1, 2, 3, 4, 5, 6])\n    assert is_monotonic([1, 2, 3, 4, 5, 6, 7, 8])\n    assert not is_monotonic([1, 2, 3, 4, 5, 6, 7, 8, 9])\n    assert not is_monotonic([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n\n\nif __name__ == \"__main__\":\n    pytest.main([__file__])"
    },
    {
      "rank": 25,
      "score": 8.0,
      "candidate": "def monotonic_array(arr):\n    if arr[0] < arr[1]:\n        return False\n    for i in range(len(arr)-1):\n        if arr[i] > arr[i+1]:\n            return False\n    return True\n\n\nprint(monotonic_array([1, 2, 3, 4, 5]))\nprint(monotonic_array([1, 3, 2, 4, 5]))\nprint(monotonic_array([1, 2, 3, 5, 4]))\nprint(monotonic_array([1, 2, 3, 4, 5, 6, 7]))\nprint(monotonic_array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))"
    },
    {
      "rank": 26,
      "score": 8.0,
      "candidate": "def monotonic(arr):\n    if len(arr) <= 1:\n        return True\n\n    for i in range(1, len(arr)):\n        if arr[i] < arr[i - 1]:\n            return False\n\n    return True\n\n\nif __name__ == \"__main__\":\n    assert monotonic([1, 2, 3])"
    },
    {
      "rank": 27,
      "score": 8.0,
      "candidate": "def check_monotonic(arr):\n    if len(arr) <= 1:\n        return True\n    if arr[0] < arr[-1]:\n        return False\n    return check_monotonic(arr[1:-1])\n\n\nprint(check_monotonic([1, 2, 3, 4, 5]))\nprint(check_monotonic([2, 3, 4, 5, 6]))\nprint(check_monotonic([1, 2, 4, 6, 7]))\nprint(check_monotonic([1, 2, 3, 4, 5, 6, 7]))"
    },
    {
      "rank": 28,
      "score": 8.0,
      "candidate": "def monotonic(arr):\n    if len(arr) == 1:\n        return True\n    if arr[0] > arr[-1]:\n        return False\n    return monotonic(arr[1:])\n\nprint(monotonic([1, 3, 4, 5, 2]))\nprint(monotonic([2, 3, 4, 5, 1]))\nprint(monotonic([1, 2, 3, 4, 5, 6]))\nprint(monotonic([1, 3, 2, 4, 5, 6]))\nprint(monotonic([1, 3, 2, 4, 5, 6, 7, 8]))"
    },
    {
      "rank": 29,
      "score": 8.0,
      "candidate": "def monotonic(array):\n    \"\"\"\n    :type array: List[int]\n    :rtype: bool\n    \"\"\"\n    if len(array) == 1:\n        return True\n\n    if array[0] > array[-1]:\n        return False\n\n    return monotonic(array[1:-1])\n\n\nif __name__ == '__main__':\n    assert monotonic([1, 2, 3, 4, 5]) == True\n    assert monotonic([4, 5, 3, 2, 1]) == False"
    },
    {
      "rank": 30,
      "score": 8.0,
      "candidate": "def monotonic(arr):\n    if len(arr) < 2:\n        return True\n    for i in range(1, len(arr)):\n        if arr[i] < arr[i-1]:\n            return False\n    return True\n\n\narr = [1, 2, 3, 4, 5, 6, 7]\nprint(monotonic(arr))"
    },
    {
      "rank": 31,
      "score": 8.0,
      "candidate": "def is_monotonic(arr):\n    if len(arr) < 2:\n        return True\n    else:\n        for i in range(1, len(arr)):\n            if arr[i] > arr[i-1]:\n                return False\n        return True\n\n\nprint(is_monotonic([1, 2, 3, 4, 5, 6, 7, 8, 9]))\nprint(is_monotonic([1, 2, 3, 4, 5]))\nprint(is_monotonic([1, 2, 3, 4, 6]))\nprint(is_monotonic([1, 2, 3, 4, 5, 6, 7]))\nprint(is_monotonic([1, 2, 3, 4, 5, 6, 7, 8, 9]))\nprint(is_monotonic([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))"
    },
    {
      "rank": 32,
      "score": 8.0,
      "candidate": "def is_monotonic(arr):\n    if len(arr) == 1:\n        return True\n    elif len(arr) == 2:\n        return arr[0] < arr[1]\n    elif arr[0] > arr[1]:\n        return False\n    else:\n        return is_monotonic(arr[1:])\n\n\nprint(is_monotonic([1, 2, 3, 4, 5, 6]))\nprint(is_monotonic([4, 3, 2, 1]))"
    },
    {
      "rank": 33,
      "score": 8.0,
      "candidate": "def monotonic(array):\n    return array == sorted(array)\n\nif __name__ == \"__main__\":\n    array = [1, 2, 3, 4, 5]\n    print(monotonic(array))"
    },
    {
      "rank": 34,
      "score": 8.0,
      "candidate": "def is_monotonic(arr):\n    if len(arr) == 1:\n        return True\n    if arr[0] > arr[1]:\n        return False\n    for i in range(1, len(arr)):\n        if arr[i] > arr[i-1]:\n            return False\n    return True\n\nprint(is_monotonic([1, 2, 3, 4, 5]))\nprint(is_monotonic([1, 2, 3, 4, 5, 6]))\nprint(is_monotonic([1, 2, 3, 4, 5, 6, 7]))\nprint(is_monotonic([1, 2, 3, 4, 5, 6, 7, 8]))\nprint(is_monotonic([1, 2, 3, 4, 5, 6, 7, 8, 9]))"
    },
    {
      "rank": 35,
      "score": 8.0,
      "candidate": "def monotonic(arr):\n    if len(arr) <= 1:\n        return True\n    for i in range(1, len(arr)):\n        if arr[i] > arr[i - 1]:\n            return False\n    return True\n\narr = [1, 2, 3, 4, 5, 6]\nprint(monotonic(arr))"
    },
    {
      "rank": 36,
      "score": 8.0,
      "candidate": "def monotonic(arr):\n    if len(arr) == 1:\n        return True\n    if len(arr) == 2:\n        return arr[0] > arr[1]\n    if len(arr) > 2:\n        return arr[0] < arr[1]\n\nprint(monotonic([1,2,3,4,5]))\nprint(monotonic([1,2,3,4]))\nprint(monotonic([2,1,2,3,4,5,6]))\nprint(monotonic([-1,-2,-3,-4,-5,-6]))\nprint(monotonic([1,2,3,4,5]))\nprint(monotonic([2,1,2,3,4]))\nprint(monotonic([2,1,2,3,4,5]))\nprint(monotonic([1,2,3,4,5]))\nprint(monotonic([-1,-2,-3,-4,-5,-6]))\nprint(monotonic([1,2,3,4,5]))\nprint(monotonic([2,1,2,3,4,5]))\nprint(monotonic([2,1,2,3,4]))\nprint(monotonic([1,2,3,4,5]))"
    },
    {
      "rank": 37,
      "score": 8.0,
      "candidate": "def monotonic_array(arr):\n    if len(arr) < 2:\n        return True\n    else:\n        if arr[0] > arr[1]:\n            return False\n        else:\n            return monotonic_array(arr[1:])\n\n\nprint(monotonic_array([1, 2, 3, 4, 5, 6, 7]))"
    },
    {
      "rank": 38,
      "score": 8.0,
      "candidate": "def monotonic(arr):\n    return arr[0] < arr[-1]\n\n\narr = [1, 2, -1, 3, 4, 5, 6, -2, -3, 4, 5, 6, -4, 7, 8, -7, 9, -8]\nprint(monotonic(arr))"
    },
    {
      "rank": 39,
      "score": 8.0,
      "candidate": "def check_monotonic(arr):\n    # Your code here\n    for i in range(len(arr)-1):\n        if arr[i] > arr[i+1]:\n            return False\n    return True\n\narr = [1,2,3,4,5,6]\nprint(check_monotonic(arr))"
    },
    {
      "rank": 40,
      "score": 8.0,
      "candidate": "def monotonic(arr):\n    if arr == []:\n        return True\n    elif arr[0] > arr[1]:\n        return False\n    else:\n        return True\n\nprint(monotonic([1,2,4,5,6]))"
    },
    {
      "rank": 41,
      "score": 8.0,
      "candidate": "def is_monotonic(arr):\n    if len(arr) == 1:\n        return True\n    if arr[0] > arr[len(arr)-1]:\n        return False\n    return is_monotonic(arr[1:])\n\narr = [1,2,3,4,5]\nprint(is_monotonic(arr))"
    },
    {
      "rank": 42,
      "score": 8.0,
      "candidate": "def monotonic(arr):\n    if len(arr) == 1:\n        return True\n    if arr[0] > arr[len(arr)-1]:\n        return False\n    else:\n        return monotonic(arr[1:])\n\nprint(monotonic([1,2,3,4,5]))"
    },
    {
      "rank": 43,
      "score": 8.0,
      "candidate": "def monotonic_array(arr):\n    for i in range(len(arr)-1):\n        if arr[i] < arr[i+1]:\n            return False\n    return True\n\n\narr = [4, 2, 3, 1, 5]\nprint(monotonic_array(arr))"
    },
    {
      "rank": 44,
      "score": 8.0,
      "candidate": "def is_monotonic(arr):\n    if len(arr) == 1:\n        return True\n    elif arr[0] > arr[len(arr) - 1]:\n        return False\n    else:\n        return is_monotonic(arr[1:])\n\narr = [2, 1, 3, 4, 5]\nprint(is_monotonic(arr))"
    },
    {
      "rank": 45,
      "score": 8.0,
      "candidate": "def is_monotonic(arr):\n    if len(arr) < 2:\n        return True\n    if arr[0] > arr[-1]:\n        return False\n    for i in range(1, len(arr)):\n        if arr[i] < arr[i - 1]:\n            return False\n    return True\n\n\narr = [1, 2, 3, 4, 5]\nprint(is_monotonic(arr))"
    },
    {
      "rank": 46,
      "score": 8.0,
      "candidate": "def is_monotonic(arr):\n    if len(arr) == 1:\n        return True\n\n    if arr[0] <= arr[1]:\n        return False\n\n    i = 0\n    j = 1\n\n    while j < len(arr):\n        if arr[i] <= arr[j]:\n            i += 1\n        else:\n            return False\n\n        j += 1\n\n    return True\n\n\nif __name__ == \"__main__\":\n    print(is_monotonic([0,1,2,3,4]))\n    print(is_monotonic([1,2,3,4,5]))\n    print(is_monotonic([1,1,1,1,1,1,1,1]))\n    print(is_monotonic([1,1,1,1,1,1,1,1,1]))"
    },
    {
      "rank": 47,
      "score": 8.0,
      "candidate": "def monotonic(arr):\n    if len(arr) <= 1:\n        return True\n\n    for i in range(len(arr) - 1):\n        if arr[i] > arr[i + 1]:\n            return False\n\n    return True\n\n\narr = [1, 4, 7, 8, 9]\nprint(monotonic(arr))"
    },
    {
      "rank": 48,
      "score": 8.0,
      "candidate": "def monotonic_array(arr):\n    if len(arr) < 2:\n        return True\n    elif arr[0] < arr[1]:\n        return False\n    else:\n        return monotonic_array(arr[1:])\n\n\nprint(monotonic_array([1, 2, 3, 4]))\nprint(monotonic_array([1, 2, 3, 4, 5]))\nprint(monotonic_array([1, 2, 3, 4, 5, 6, 7]))\nprint(monotonic_array([1, 2, 3, 4, 5, 6, 7, 8, 9]))"
    },
    {
      "rank": 49,
      "score": 8.0,
      "candidate": "def monotonic(arr):\n    return arr.sort() == arr\n\n\nif __name__ == '__main__':\n    arr = [1, 3, 5, 7, 2, 4]\n    print(monotonic(arr))"
    },
    {
      "rank": 50,
      "score": 8.0,
      "candidate": "def monotonic(arr):\n    if len(arr) <= 1:\n        return True\n\n    for i in range(1, len(arr)):\n        if arr[i] > arr[i-1]:\n            return False\n\n    return True\n\n\nprint(monotonic([1, 2, 3, 4, 5]))"
    },
    {
      "rank": 51,
      "score": 8.0,
      "candidate": "def monotonic(arr):\n    if len(arr) == 1:\n        return True\n    if arr[0] > arr[-1]:\n        return False\n    return monotonic(arr[1:-1])\n\n\nprint(monotonic([1, 2, 3, 4, 5]))"
    },
    {
      "rank": 52,
      "score": 8.0,
      "candidate": "def is_monotonic(arr):\n    if len(arr) < 2:\n        return True\n    if arr[0] >= arr[-1]:\n        return False\n    if arr[0] < arr[-1]:\n        return False\n    return True\n\n\narr = list(map(int, input().split()))\nprint(is_monotonic(arr))"
    },
    {
      "rank": 53,
      "score": 8.0,
      "candidate": "def is_monotonic(arr):\n    if len(arr) == 1:\n        return True\n    if arr[0] > arr[-1]:\n        return False\n    for i in range(1, len(arr)):\n        if arr[i] < arr[i-1]:\n            return False\n    return True\n\n\narr = [3, 2, 1, 5, -1, 4, -3]\nprint(is_monotonic(arr))"
    },
    {
      "rank": 54,
      "score": 8.0,
      "candidate": "def is_monotonic(arr):\n    if len(arr) == 1:\n        return True\n    if arr[0] > arr[-1]:\n        return False\n\n    i = 1\n    while i < len(arr):\n        if arr[i] > arr[i-1]:\n            return False\n        i += 1\n    return True\n\n\narr = [1, -1, 2, -2, 4, 4, -4, 5, 5, -5, 4, -4, 4, -4, 4, 4, 4, 4, 4, 4, 4]\nprint(is_monotonic(arr))"
    },
    {
      "rank": 55,
      "score": 8.0,
      "candidate": "def is_monotonic(arr):\n    if arr == sorted(arr):\n        return True\n    else:\n        return False\n\n\narr = [1, 2, 3, 4, 5]\nprint(is_monotonic(arr))"
    },
    {
      "rank": 56,
      "score": 8.0,
      "candidate": "def monotonic(arr):\n    if len(arr) <= 1:\n        return True\n\n    if arr[0] > arr[-1]:\n        return False\n\n    return monotonic(arr[1:])\n\n\nprint(monotonic([5, 4, 3, 2, 1]))\nprint(monotonic([4, 3, 2, 1, 5]))\nprint(monotonic([5, 3, 2, 1, 5]))"
    },
    {
      "rank": 57,
      "score": 8.0,
      "candidate": "def is_monotonic(arr):\n    if len(arr) == 1:\n        return True\n    if arr[0] < arr[-1]:\n        return False\n    if arr[0] == arr[-1]:\n        return is_monotonic(arr[1:-1])\n    return is_monotonic(arr[1:])\n\n\nprint(is_monotonic([4, 5, 6, 2, 3, 1]))"
    },
    {
      "rank": 58,
      "score": 8.0,
      "candidate": "import numpy as np\n\ndef is_monotonic(arr):\n    if arr[0] == arr[-1]:\n        return True\n    else:\n        return False\n\n\nprint(is_monotonic([1, 2, 2, 3, 3, 4, 4]))\nprint(is_monotonic([1, 2, 3, 4, 4, 5, 5]))\nprint(is_monotonic([1, 2, 3, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5]))"
    },
    {
      "rank": 59,
      "score": 8.0,
      "candidate": "def monotonic(arr):\n    if len(arr) == 1:\n        return True\n    if arr[0] <= arr[1]:\n        return False\n    for i in range(len(arr) - 1):\n        if arr[i] > arr[i + 1]:\n            return False\n    return True\n\n\nif __name__ == \"__main__\":\n    arr = [3, 2, 1, 4, 5, 6]\n    print(monotonic(arr))"
    },
    {
      "rank": 60,
      "score": 8.0,
      "candidate": "def monotonic(arr):\n    if len(arr) <= 1:\n        return True\n    if arr[0] < arr[-1]:\n        return False\n    for i in range(1, len(arr)):\n        if arr[i] > arr[i-1]:\n            return False\n    return True\n\n\nif __name__ == \"__main__\":\n    print(monotonic([4, 2, 1, 6, 3, 5]))\n    print(monotonic([4, 2, 5, 1, 6, 3]))"
    },
    {
      "rank": 61,
      "score": 8.0,
      "candidate": "def monotonic(arr):\n    if len(arr) < 2:\n        return True\n    if arr[0] > arr[-1]:\n        return False\n    for i in range(1, len(arr)):\n        if arr[i] > arr[i-1]:\n            return False\n    return True\n\n\nif __name__ == '__main__':\n    print(monotonic([5, 6, 8, 10, 12, 14]))\n    print(monotonic([8, 9, 4, 1, 2, 3]))\n    print(monotonic([1, 1, 1, 1, 1, 1]))\n    print(monotonic([1, 1, 1, 1, 1]))\n    print(monotonic([1, 1, 1, 1, 1, 1, 1, 1, 1, 1]))\n    print(monotonic([1, 1, 1, 1, 1, 1, 1, 1, 1, 1]))\n    print(monotonic([1, 1, 1, 1, 1, 1, 1]))\n    print(monotonic([1, 1, 1, 1, 1, 1, 1, 1, 1, 1]))\n    print(monotonic([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]))"
    },
    {
      "rank": 62,
      "score": 8.0,
      "candidate": "def monotonic(arr):\n    if arr[0] > arr[-1]:\n        return False\n    else:\n        return True\n\n\nif __name__ == \"__main__\":\n    arr = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1]\n    print(monotonic(arr))"
    },
    {
      "rank": 63,
      "score": 8.0,
      "candidate": "def monotonic(arr):\n    if len(arr) < 2:\n        return True\n    else:\n        for i in range(1, len(arr)):\n            if arr[i] > arr[i-1]:\n                return False\n        return True\n\n\nif __name__ == \"__main__\":\n    print(monotonic([1, 2, 3, 4]))\n    print(monotonic([1, 3, 5, 2, 4]))\n    print(monotonic([1, 2, 3, 4, 5]))\n    print(monotonic([1, 2, 3, 4, 5, 6, 7]))\n    print(monotonic([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\n    print(monotonic([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]))\n    print(monotonic([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18]))"
    },
    {
      "rank": 64,
      "score": 8.0,
      "candidate": "def monotonic(arr):\n    return all(arr[i+1] <= arr[i] for i in range(len(arr)-1))\n\nif __name__ == \"__main__\":\n    print(monotonic([1,2,3,4,5,6,7]))\n    print(monotonic([1,2,3,4,5,6]))\n    print(monotonic([1,2,3,4,5]))"
    },
    {
      "rank": 65,
      "score": 8.0,
      "candidate": "def is_monotonic(arr):\n    if len(arr) < 2:\n        return True\n    if arr[0] < arr[-1]:\n        return False\n    return is_monotonic(arr[1:-1])\n\n\nif __name__ == \"__main__\":\n    arr = [4, 2, 1, 3, 7, 6, 5, 8, 2, 5, 6, 5]\n    print(is_monotonic(arr))"
    },
    {
      "rank": 66,
      "score": 8.0,
      "candidate": "def is_monotonic(arr):\n    if len(arr) == 1:\n        return True\n    if arr[0] < arr[1]:\n        return False\n    return is_monotonic(arr[1:])\n\n\narr = [1, 2, 3, 4, 5]\nprint(is_monotonic(arr))"
    },
    {
      "rank": 67,
      "score": 8.0,
      "candidate": "def monotonic_check(arr):\n    if len(arr) < 2:\n        return True\n    for i in range(len(arr) - 1):\n        if arr[i] > arr[i + 1]:\n            return False\n    return True\n\n\nif __name__ == '__main__':\n    print(monotonic_check([1, 2, 3, 4, 5, 6, 7, 8, 9]))"
    },
    {
      "rank": 68,
      "score": 8.0,
      "candidate": "def monotonic(arr):\n    if arr[0] == arr[-1]:\n        return True\n    else:\n        return False\n\nprint(monotonic([1, 3, 2, 4]))"
    },
    {
      "rank": 69,
      "score": 8.0,
      "candidate": "def is_monotonic(arr):\n    for i in range(len(arr)-1):\n        if arr[i] > arr[i+1]:\n            return False\n    return True\n\nprint(is_monotonic([-1, -2, 0, 1, 2, 3, 4, 5]))"
    },
    {
      "rank": 70,
      "score": 8.0,
      "candidate": "def monotonic(a):\n    if len(a) == 1:\n        return True\n    if len(a) == 2:\n        return a[0] < a[1]\n    if len(a) == 3:\n        return a[0] > a[1]\n    if len(a) == 4:\n        return a[0] == a[1] or a[0] == a[2] or a[1] == a[2] or a[2] == a[3]\n    if len(a) == 5:\n        return a[0]!= a[1]!= a[2]!= a[3]!= a[4]\n    return False"
    },
    {
      "rank": 71,
      "score": 8.0,
      "candidate": "def is_monotonic(arr):\n    if len(arr) == 1:\n        return True\n\n    if arr[0] > arr[1]:\n        return False\n\n    for i in range(1, len(arr)):\n        if arr[i] > arr[i-1]:\n            return False\n    return True\n\n\nif __name__ == \"__main__\":\n    print(is_monotonic([1,2,3,4,5]))"
    },
    {
      "rank": 72,
      "score": 8.0,
      "candidate": "def is_monotonic(arr):\n    for i in range(1, len(arr)):\n        if arr[i] > arr[i-1]:\n            return False\n    return True\n\narr = [1, 2, 3, 4, 5, 6, 7]\nprint(is_monotonic(arr))"
    },
    {
      "rank": 73,
      "score": 7.0,
      "candidate": "def is_monotonic(arr):\n    if not arr:\n        return True\n    elif arr[0] > arr[-1]:\n        return False\n    else:\n        for i in range(1, len(arr)):\n            if arr[i] > arr[i - 1]:\n                return False\n        return True"
    },
    {
      "rank": 74,
      "score": 7.0,
      "candidate": "def monotonic(arr):\n    if arr[0] > arr[-1]:\n        return False\n    for i in range(1, len(arr)):\n        if arr[i] > arr[i - 1]:\n            return False\n    return True\n\narr = [1, 2, 3, 4, 5]\nprint(monotonic(arr))"
    },
    {
      "rank": 75,
      "score": 7.0,
      "candidate": "def is_monotonic(arr):\n    if len(arr) <= 1:\n        return True\n    for i in range(len(arr)-1):\n        if arr[i] > arr[i+1]:\n            return False\n    return True\n\nif __name__ == \"__main__\":\n    print(is_monotonic([1,2,3,4]))"
    },
    {
      "rank": 76,
      "score": 6.0,
      "candidate": "def check_monotonic(arr):\n    if arr[0]!= arr[1]:\n        return False\n    return True\n\narr = [1,2,3,4,5]\nprint(check_monotonic(arr))"
    },
    {
      "rank": 77,
      "score": 1.0,
      "candidate": "def is_monotonic(arr):\n    return True\n\n\nprint(is_monotonic([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\nprint(is_monotonic([1, 3, 5, 7, 9, 11, 13, 15, 17]))"
    },
    {
      "rank": 78,
      "score": 1.0,
      "candidate": "def is_monotonic(arr):\n    if arr[0] < arr[-1]:\n        return False\n    return True\n\n\nprint(is_monotonic([1, 2, 3, 4, 5]))"
    },
    {
      "rank": 79,
      "score": 1.0,
      "candidate": "def is_monotonic(arr):\n    if len(arr) == 1:\n        return True\n    if arr[0] > arr[-1]:\n        return False\n    for i in range(len(arr)-1):\n        if arr[i] > arr[i+1]:\n            return False\n    return True\n\n\narr = [0, 1, 2, 3, 4, 5, 6]\nprint(is_monotonic(arr))"
    },
    {
      "rank": 80,
      "score": 1.0,
      "candidate": "def check_monotonic(arr):\n    if arr == sorted(arr):\n        return True\n    else:\n        return False\n\nprint(check_monotonic([5, 4, 3, 2, 1]))\nprint(check_monotonic([3, 2, 1, 4, 5]))\nprint(check_monotonic([3, 4, 1, 2, 5]))\nprint(check_monotonic([3, 2, 1, 4, 5]))\nprint(check_monotonic([3, 4, 1, 2, 5]))\nprint(check_monotonic([1, 2, 3, 4, 5]))\nprint(check_monotonic([5, 4, 3, 2, 1]))\nprint(check_monotonic([4, 3, 2, 1, 5]))\nprint(check_monotonic([4, 3, 2, 1, 5]))\nprint(check_monotonic([4, 3, 2, 1, 5]))\nprint(check_monotonic([4, 3, 2, 1, 5]))\nprint(check_monotonic([4, 3, 2, 1, 5]))\nprint(check_monotonic([4, 3, 2, 1, 5]))\nprint(check_monotonic([4, 3, 2, 1, 5]))\nprint(check_monotonic([4, 3, 2, 1, 5]))\nprint(check_monotonic([4, 3, 2, 1, 5]))\nprint(check_monotonic([4, 3, 2, 1, 5]))\nprint(check_monotonic([4, 3, 2, 1, 5]))\nprint(check_monotonic([4, 3, 2, 1, 5]))\nprint(check_monotonic([4, 3, 2, 1, 5]))\nprint(check_monotonic([4, 3, 2, 1, 5]))\nprint(check_monotonic([4, 3, 2, 1, 5]))\nprint(check_monotonic([4, 3, 2, 1, 5]))\nprint(check_monotonic([4, 3, 2, 1, 5]))\nprint(check_monotonic([4, 3, 2, 1, 5]))\nprint(check_monotonic([4, 3, 2, 1, 5]))\nprint(check_monotonic([4, 3"
    },
    {
      "rank": 81,
      "score": 1.0,
      "candidate": "def monotonic(arr):\n    if arr[0] > arr[-1]:\n        return False\n    else:\n        return True\n\n\nif __name__ == \"__main__\":\n    print(monotonic([1, 2, 3, 4, 5]))\n    print(monotonic([4, 2, 3, 1, 5]))\n    print(monotonic([-1, 2, -3, -4, 5]))\n    print(monotonic([-1, -2, -3, -4, -5]))"
    },
    {
      "rank": 82,
      "score": 1.0,
      "candidate": "def is_monotonic(arr):\n    for i in range(1, len(arr)):\n        if arr[i] > arr[i - 1]:\n            return False\n    return True\n\n\ndef is_monotonic2(arr):\n    if len(arr) <= 1:\n        return True\n    for i in range(1, len(arr)):\n        if arr[i] < arr[i - 1]:\n            return False\n    return True\n\n\nif __name__ == \"__main__\":\n    assert is_monotonic([1, 2, 3, 4, 5]) == True\n    assert is_monotonic([1, 2, 3, 4, 5, 6]) == False\n    assert is_monotonic([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == True\n    assert is_monotonic([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == False\n    assert is_monotonic([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]) == True\n    assert is_monotonic([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]) == False\n    assert is_monotonic([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]) == True\n    assert is_monotonic([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]) == False\n    assert is_monotonic([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]) == False\n    assert is_monotonic([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17]) == True\n    assert is_monotonic([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18]) == False\n    assert is_mon"
    },
    {
      "rank": 83,
      "score": 1.0,
      "candidate": "def is_monotonic(arr):\n    if len(arr) == 1:\n        return True\n    elif len(arr) == 2:\n        return arr[0] == arr[1]\n    else:\n        return arr[0] < arr[1] or arr[1] < arr[0]\n\n\narr = [1, 2, 3, 4, 5]\nprint(is_monotonic(arr))"
    },
    {
      "rank": 84,
      "score": 1.0,
      "candidate": "def is_monotonic(arr):\n    if len(arr) <= 1:\n        return True\n    if arr[0] >= arr[-1]:\n        return False\n    return is_monotonic(arr[1:-1])\n\n\nprint(is_monotonic([1, 2, 3, 4, 5]))\nprint(is_monotonic([1, 2, 3, 4, 5, 6]))\nprint(is_monotonic([1, 2, 3, 4, 5, 6, 7, 8, 9]))"
    },
    {
      "rank": 85,
      "score": 1.0,
      "candidate": "def check_monotonic(arr):\n    if len(arr) == 1:\n        return True\n    if arr[0] < arr[1]:\n        return False\n    return True\n\nprint(check_monotonic([1,2,3]))\nprint(check_monotonic([1,2,3,4]))\nprint(check_monotonic([1,2,3,4,5]))"
    },
    {
      "rank": 86,
      "score": 1.0,
      "candidate": "def is_monotonic(arr):\n    if len(arr) < 2:\n        return True\n    for i in range(1, len(arr)-1):\n        if arr[i] > arr[i-1] and arr[i] < arr[i+1]:\n            return False\n    return True\n\nif __name__ == \"__main__\":\n    arr = [5, 6, 7, 8, 9, 10, 11, 12, 13, 14]\n    print(is_monotonic(arr))"
    },
    {
      "rank": 87,
      "score": 1.0,
      "candidate": "def is_monotonic(arr):\n    if len(arr) == 1:\n        return True\n    if arr[0] < arr[1]:\n        return False\n    if arr[-1] > arr[-2]:\n        return False\n    return True\n\nprint(is_monotonic([1, 4, 3, 2, 3, 5, 6]))\nprint(is_monotonic([-1, 3, 4, 2, -5]))\nprint(is_monotonic([-1, 3, 4, 2, -5, 6]))\nprint(is_monotonic([-1, 3, 4, 2, -5, 6, 7]))\nprint(is_monotonic([-1, 3, 4, 2, -5, 6]))\nprint(is_monotonic([-1, 3, 4, 2, -5, 7, 8]))\nprint(is_monotonic([-1, 3, 4, 2, -5]))\nprint(is_monotonic([-1, 3, 4, 2, -5, 6]))\nprint(is_monotonic([-1, 3, 4, 2, -5, 6, 7, 8]))\nprint(is_monotonic([-1, 3, 4, 2, -5, 6]))\nprint(is_monotonic([-1, 3, 4, 2, -5, 7]))\nprint(is_monotonic([-1, 3, 4, 2, -5, 6]))\nprint(is_monotonic([-1, 3, 4, 2, -5]))\nprint(is_monotonic([-1, 3, 4, 2, -5]))\nprint(is_monotonic([-1, 3, 4, 2, -5]))\nprint(is_monotonic([-1, 3, 4, 2, -5]))"
    },
    {
      "rank": 88,
      "score": 1.0,
      "candidate": "def monotonic(arr):\n    if len(arr) < 2:\n        return True\n\n    prev = arr[0]\n    prev_index = 0\n    for i in range(1, len(arr)):\n        if arr[i] < prev:\n            return False\n        prev = arr[i]\n        prev_index = i\n\n    return True\n\nprint(monotonic([-1, 0, 1, 2, 3, 4, 5]))\nprint(monotonic([-1, 0, 1, 2, 3, 4, 5, 6]))\nprint(monotonic([-1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9]))\nprint(monotonic([-1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9]))\nprint(monotonic([-1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9]))"
    },
    {
      "rank": 89,
      "score": 1.0,
      "candidate": "def monotonic(arr):\n    for i in range(len(arr)):\n        if arr[i] > arr[i-1]:\n            return False\n    return True\n\n\nif __name__ == '__main__':\n    assert monotonic([1, 2, 3, 4, 5]) == True\n    assert monotonic([1, 2, 3, 4, 5, 6, 7, 8, 9]) == False\n    assert monotonic([1, 1, 1, 1, 1, 1, 1, 1]) == True\n    assert monotonic([1, 2, 3, 4, 5, 6, 7, 8, 9]) == False"
    },
    {
      "rank": 90,
      "score": 1.0,
      "candidate": "def monotonic(arr):\n    return (arr[0] > arr[-1]) or (arr[0] < arr[-1])\n\n\nprint(monotonic([1, 2, 3, 4, 5]))\nprint(monotonic([1, 2, 4, 5]))\nprint(monotonic([1, 2, 3, 4]))\nprint(monotonic([]))\nprint(monotonic([1, 2, 3, 4, 5, 6, 7, 8, 9]))"
    },
    {
      "rank": 91,
      "score": 1.0,
      "candidate": "def is_monotonic(arr):\n    if len(arr) == 1:\n        return True\n    if arr[0] > arr[-1]:\n        return False\n    else:\n        return True\n\nprint(is_monotonic([1, -1, -3, 1, 3, 5]))\nprint(is_monotonic([1, -1, -3, 1, 3, 5]))\nprint(is_monotonic([1, -1, -3, 1, 3, 5]))\nprint(is_monotonic([1, -1, -3, 1, 3, 5]))\nprint(is_monotonic([1, -1, -3, 1, 3, 5]))\nprint(is_monotonic([1, -1, -3, 1, 3, 5]))\nprint(is_monotonic([1, -1, -3, 1, 3, 5]))\nprint(is_monotonic([1, -1, -3, 1, 3, 5]))\nprint(is_monotonic([1, -1, -3, 1, 3, 5]))\nprint(is_monotonic([1, -1, -3, 1, 3, 5]))\nprint(is_monotonic([1, -1, -3, 1, 3, 5]))\nprint(is_monotonic([1, -1, -3, 1, 3, 5]))\nprint(is_monotonic([1, -1, -3, 1, 3, 5]))\nprint(is_monotonic([1, -1, -3, 1, 3, 5]))\nprint(is_monotonic([1, -1, -3, 1, 3, 5]))\nprint(is_monotonic([1, -1, -3, 1, 3, 5]))\nprint(is_monotonic([1, -1, -3, 1, 3, 5]))\nprint(is_monotonic([1, -1, -3, 1, 3, 5]))\nprint(is_monotonic([1, -1, -3, 1, 3, 5]))\nprint(is_monotonic([1, -1, -3, 1, 3, 5]))\nprint(is_monotonic([1, -1, -3, 1, 3, 5]))"
    },
    {
      "rank": 92,
      "score": 1.0,
      "candidate": "def is_monotonic(arr):\n    if len(arr) <= 1:\n        return True\n    elif arr[0] < arr[1]:\n        return False\n    else:\n        return is_monotonic(arr[1:])\n\nprint(is_monotonic([1, 2, 3]))\nprint(is_monotonic([1, 2, 3, 4, 5]))\nprint(is_monotonic([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))"
    },
    {
      "rank": 93,
      "score": 1.0,
      "candidate": "def monotonic(arr):\n    if len(arr) == 1:\n        return True\n    if arr[0] > arr[-1]:\n        return False\n    else:\n        return monotonic(arr[1:])\n\n\ndef main():\n    arr = [1, 2, 3, 4, 5]\n    print(monotonic(arr))\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 94,
      "score": 1.0,
      "candidate": "def monotonic_array(arr):\n    if len(arr) > 1:\n        for i in range(1, len(arr)):\n            if arr[i] > arr[i-1]:\n                return False\n        return True\n    return False\n\nprint(monotonic_array([1, 2, 3, 4, 5]))\nprint(monotonic_array([1, 2, 3, 4, 5, 6]))\nprint(monotonic_array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))"
    },
    {
      "rank": 95,
      "score": 1.0,
      "candidate": "def monotonic(arr):\n    if len(arr) < 2:\n        return True\n    mid = len(arr) // 2\n    if arr[mid] < arr[mid-1]:\n        return False\n    if arr[mid] > arr[mid+1]:\n        return False\n    return monotonic(arr[:mid]) and monotonic(arr[mid+1:])\n\n\nprint(monotonic([3, 2, 1]))"
    },
    {
      "rank": 96,
      "score": 1.0,
      "candidate": "def is_monotonic(arr):\n    # write your code here\n    if len(arr) == 1:\n        return True\n\n    if arr[0] < arr[1]:\n        return False\n\n    for i in range(len(arr)-1):\n        if arr[i] < arr[i+1]:\n            return False\n\n    return True\n\n\nif __name__ == \"__main__\":\n    print(is_monotonic([4, 3, 2, 1]))\n    print(is_monotonic([4, 3, 2, 1, 5]))\n    print(is_monotonic([4, 3, 2, 1, 5, 6]))\n    print(is_monotonic([4, 3, 2, 1, 5, 6, 7]))\n    print(is_monotonic([4, 3, 2, 1, 5, 6, 7, 8]))\n    print(is_monotonic([4, 3, 2, 1, 5, 6, 7, 8, 9]))"
    },
    {
      "rank": 97,
      "score": 1.0,
      "candidate": "def is_monotonic(arr):\n  if len(arr) == 1:\n    return True\n  if len(arr) == 2:\n    if arr[0] > arr[1]:\n      return False\n    else:\n      return True\n  if len(arr) == 3:\n    if arr[0] < arr[1] < arr[2]:\n      return False\n    else:\n      return True\n\nprint(is_monotonic([1, 2, 3, 4]))\nprint(is_monotonic([1, 2, 4, 3]))\nprint(is_monotonic([1, 2, 3, 5, 4, 7, 8, 9, 10]))"
    },
    {
      "rank": 98,
      "score": 1.0,
      "candidate": "def is_monotonic(arr):\n    if len(arr) == 1:\n        return True\n    return arr[0] > arr[-1] or arr[len(arr) - 1] < arr[0]\n\n\nprint(is_monotonic([1, 3, 2, -1, 5, 7, 9]))\nprint(is_monotonic([1, 3, 2, -1, 5, 7, 9]))\nprint(is_monotonic([1, 3, 2, -1, 5, 7]))"
    },
    {
      "rank": 99,
      "score": 1.0,
      "candidate": "def check_monotonic(arr):\n    if len(arr) < 2:\n        return True\n    for i in range(1, len(arr)):\n        if arr[i] > arr[i-1]:\n            return False\n    return True\n\n\nif __name__ == '__main__':\n    print(check_monotonic([1, 2, 3, 4]))\n    print(check_monotonic([-1, 0, 1, 2, 3, 4]))\n    print(check_monotonic([-1, 0, 1, 2, 3, 4, 5]))\n    print(check_monotonic([1, 2, 3, 4, 5]))\n    print(check_monotonic([-1, 0, 1, 2, 3, 4, 5, 6]))\n    print(check_monotonic([-1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]))\n    print(check_monotonic([-1, 0, 1, 2, 3, 4, 5]))\n    print(check_monotonic([-1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]))\n    print(check_monotonic([-1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32]))"
    },
    {
      "rank": 100,
      "score": 1.0,
      "candidate": "def is_monotonic(arr):\n    if len(arr) < 2:\n        return True\n    else:\n        if arr[0] <= arr[1]:\n            return False\n        else:\n            return is_monotonic(arr[1:])\n\nprint(is_monotonic([1, 2, 3, 4, 5, 6, 7, 8, 9]))"
    }
  ]
}