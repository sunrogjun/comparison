{
  "timestamp": "2025-09-14T15:26:03.898318",
  "method": "improved_llm_judge",
  "judge_model": "codellama/CodeLlama-7b-Python-hf",
  "target_model": "codet5-770m",
  "dataset": "mbpp",
  "problem_number": 404,
  "total_candidates": 100,
  "results": [
    {
      "rank": 1,
      "score": 10.0,
      "candidate": "def highest_product(nums):\n    max_product = nums[0]\n    max_index = 0\n    for i in range(len(nums)):\n        if nums[i] > max_product:\n            max_product = nums[i]\n            max_index = i\n    return max_index, max_product\n\n\nprint(highest_product([1, 2, 3, 4, 5, 6]))\nprint(highest_product([1, 2, 3, 4, 5, 6, 7]))\nprint(highest_product([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\nprint(highest_product([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100]))"
    },
    {
      "rank": 2,
      "score": 10.0,
      "candidate": "def highest_product(arr):\n    maximum = 0\n    maximum_index = -1\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] * arr[j] > maximum:\n                maximum = arr[i] * arr[j]\n                maximum_index = i\n    return maximum, maximum_index\n\n\nif __name__ == \"__main__\":\n    arr = [1, 2, 3, 4, 5]\n    print(highest_product(arr))"
    },
    {
      "rank": 3,
      "score": 10.0,
      "candidate": "def highest_product(arr):\n    arr.sort()\n    m, n = 0, 0\n    for i in range(len(arr)):\n        if arr[i] == m:\n            n += 1\n        else:\n            if n > m:\n                m = n\n            if m < n:\n                m = n\n    return (m, n)\n\n\nprint(highest_product([3, 4, 3, 4]))"
    },
    {
      "rank": 4,
      "score": 10.0,
      "candidate": "def highest_product(arr):\n    arr = sorted(arr)\n    for i in range(len(arr) - 2):\n        if arr[i] * arr[i + 1] > arr[i] * arr[i + 2]:\n            print(\"The pair with highest product is: \", arr[i], arr[i + 1], arr[i + 2])\n            return\n\nhighest_product([3, 4, 5, 7, 2, 8])\nhighest_product([4, 5, 6, 7, 8])\nhighest_product([3, 2, 4, 6, 1])"
    },
    {
      "rank": 5,
      "score": 10.0,
      "candidate": "def highest_product(arr):\n    arr.sort()\n    n=len(arr)\n    if(n>1):\n        if(arr[0]<arr[1]):\n            return arr[0],arr[1]\n        else:\n            return arr[1],arr[0]\n    else:\n        return 0,0\n\narr=[0,1,3,2,4,5,6,7,8,9]\nprint(highest_product(arr))"
    },
    {
      "rank": 6,
      "score": 10.0,
      "candidate": "def highest_product(arr):\n    arr.sort()\n    return arr[int(len(arr)/2)-1], arr[int(len(arr)/2)]\n\n\nprint(highest_product([2, -2, 4, -3, -2, 1]))\nprint(highest_product([2, -2, 4, -3, -2, 1]))\nprint(highest_product([2, -2, 4, -3, -2, 1]))\nprint(highest_product([2, -2, 4, -3, -2, 1]))"
    },
    {
      "rank": 7,
      "score": 10.0,
      "candidate": "def highest_product(arr):\n    arr.sort()\n    a = arr[0]\n    b = arr[1]\n    print(a,b)\n    if a > b:\n        a,b = b,a\n    if a*b > 0:\n        print(a,b)\n    else:\n        print(b,a)\n\n# Driver program to test above function\narr = [10, 8, -5, 2, -3, 4]\nhighest_product(arr)"
    },
    {
      "rank": 8,
      "score": 10.0,
      "candidate": "def highest_product(arr):\n    arr.sort()\n    return (arr[0], arr[1])\n\nprint(highest_product([1, 2, 3, 4, 5, 6, 7, 8]))\nprint(highest_product([-2, -1, -4, -8, -10, -3]))\nprint(highest_product([-10, -3, -4, -2, -1]))"
    },
    {
      "rank": 9,
      "score": 10.0,
      "candidate": "def highest_product(arr):\n    n = len(arr)\n    arr = sorted(arr)\n    for i in range(n-1):\n        for j in range(i+1,n):\n            if arr[i] * arr[j] > arr[i] * arr[j+1]:\n                print(arr[i], arr[j])\n                return\n\n\narr = [1,2,3,4,5,6,7,8,9]\nhighest_product(arr)"
    },
    {
      "rank": 10,
      "score": 10.0,
      "candidate": "def highest_product(arr):\n    highest = arr[0]\n    lowest = arr[0]\n    for i in range(1, len(arr)):\n        if arr[i] > highest:\n            highest = arr[i]\n        if arr[i] < lowest:\n            lowest = arr[i]\n    return (highest, lowest)\n\n\narr = [1, 2, 4, 6, 7]\nprint(highest_product(arr))"
    },
    {
      "rank": 11,
      "score": 10.0,
      "candidate": "def highest_product(arr):\n    max_product = 0\n    max_index = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            product = arr[i] * arr[j]\n            if product > max_product:\n                max_product = product\n                max_index = [i, j]\n    return max_index\n\n\nprint(highest_product([-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]))"
    },
    {
      "rank": 12,
      "score": 10.0,
      "candidate": "def highest_product(arr):\n    arr.sort()\n    n = len(arr)\n    if n < 2:\n        return 0,0\n    else:\n        low = 0\n        high = n-1\n        while low < high:\n            mid = low+(high-low)//2\n            if arr[mid] * arr[high] > arr[mid] * arr[low]:\n                low = mid + 1\n            else:\n                high = mid - 1\n        return arr[low], arr[high]\n\n\nprint(highest_product([1, 2, 3, 4, 5, 6, 7, 8]))"
    },
    {
      "rank": 13,
      "score": 10.0,
      "candidate": "def highest_product(arr):\n    if len(arr)<2:\n        return False\n    else:\n        max_prod = arr[0]\n        for i in range(1,len(arr)):\n            if arr[i]>max_prod:\n                max_prod=arr[i]\n        for i in range(len(arr)):\n            for j in range(i+1,len(arr)):\n                if arr[i] * arr[j]>max_prod:\n                    max_prod=arr[i] * arr[j]\n        return max_prod,max_prod\n\nprint(highest_product([-1,2,3,4]))"
    },
    {
      "rank": 14,
      "score": 10.0,
      "candidate": "def highest_product(arr):\n    arr.sort()\n    if len(arr) < 2:\n        return False\n    mid = len(arr)//2\n    if arr[mid] * arr[mid] > 0:\n        return (arr[mid], arr[mid])\n    else:\n        return (arr[mid], arr[mid])\n\narr = [4, 2, -4, 6, -2, 3, -5, 2, 7, 8, -1, -4, -8, -9, -2, -4, -3, -9, -7, -8, -5, -9, -5, -9, -6]\nprint(highest_product(arr))"
    },
    {
      "rank": 15,
      "score": 9.0,
      "candidate": "def high_product(arr):\n    n = len(arr)\n    max_product = -1\n    max_product_index = -1\n    for i in range(n):\n        for j in range(i+1, n):\n            product = arr[i] * arr[j]\n            if product > max_product:\n                max_product = product\n                max_product_index = i\n    print(max_product_index, max_product)\n\n\nif __name__ == \"__main__\":\n    arr = [2, -3, 4, 5, -6, -7, 8]\n    high_product(arr)"
    },
    {
      "rank": 16,
      "score": 9.0,
      "candidate": "def highest_product(arr):\n    arr.sort()\n    if len(arr) > 1:\n        return arr[0], arr[len(arr) - 1]\n\n    return arr[0]\n\n\nif __name__ == \"__main__\":\n    print(highest_product([2, 3, 4, 5, 6, 7, 8]))"
    },
    {
      "rank": 17,
      "score": 8.0,
      "candidate": "def highest_product(arr):\n    max_product = 0\n    max_product_index = -1\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            product = arr[i] * arr[j]\n            if product > max_product:\n                max_product = product\n                max_product_index = (i, j)\n    return max_product_index\n\n\nif __name__ == \"__main__\":\n    print(highest_product([-1, 2, 4, -1, -2]))"
    },
    {
      "rank": 18,
      "score": 8.0,
      "candidate": "def highest_product(arr):\n    max_product = 0\n    max_element = arr[0]\n\n    for i in range(1, len(arr)):\n        if arr[i] > max_element:\n            max_element = arr[i]\n            max_product = i\n\n    return max_product, max_element\n\n\narr = [2, 2, 3, -2, -3, 4, -4]\nprint(highest_product(arr))"
    },
    {
      "rank": 19,
      "score": 8.0,
      "candidate": "def highest_product(arr):\n  max1 = arr[0]\n  max2 = arr[0]\n  for i in arr:\n    if i > max1:\n      max1 = i\n    if i > max2:\n      max2 = i\n  return max1 * max2\n\ndef highest_product_2(arr):\n  max1 = arr[0]\n  max2 = arr[0]\n  for i in arr:\n    if i > max1:\n      max1 = i\n    if i > max2:\n      max2 = i\n  return max1 * max2\n\nif __name__ == \"__main__\":\n  print(highest_product([1, 2, 3, 4, 5]))\n  print(highest_product([-1, -2, -3, -4, -5]))\n  print(highest_product([1, 2, 3, -4, 5]))\n  print(highest_product([-1, -2, -3, -4, 5]))\n  print(highest_product([1, -2, -3, -4, 5]))\n  print(highest_product([1, 2, 3, 4, -5]))\n  print(highest_product_2([1, 2, 3, 4, 5]))\n  print(highest_product_2([-1, -2, -3, -4, 5]))\n  print(highest_product_2([1, -2, -3, -4, 5]))\n  print(highest_product_2([-1, -2, -3, -4, 5]))"
    },
    {
      "rank": 20,
      "score": 8.0,
      "candidate": "def highest_product(arr):\n    arr.sort()\n    return arr[len(arr)//2], arr[len(arr)//2]\n\n\nprint(highest_product([-2, 1, -3, 4, -1, 2, 1, -5]))"
    },
    {
      "rank": 21,
      "score": 8.0,
      "candidate": "def highest_product(arr):\n    arr.sort()\n    return arr[0] * arr[-1]\n\n\narr = [1, 2, 3, 4, 5, 6, 7, 8]\n\nprint(f\"Highest product is {highest_product(arr)}\")"
    },
    {
      "rank": 22,
      "score": 8.0,
      "candidate": "def highest_product(arr):\n    max_prod = 0\n    for i in range(len(arr)-1):\n        for j in range(i+1, len(arr)):\n            if arr[i] * arr[j] > max_prod:\n                max_prod = arr[i] * arr[j]\n    return max_prod\n\n\nif __name__ == '__main__':\n    print(highest_product([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))"
    },
    {
      "rank": 23,
      "score": 8.0,
      "candidate": "def highest_product(nums):\n    # TODO: Write your code here\n    max_prod = 0\n    max_num = 0\n    min_num = 0\n    for i in nums:\n        max_num = max(max_num, i)\n        min_num = min(min_num, i)\n        if i > max_num:\n            max_prod = i\n    return max_prod, min_num\n\n\nnums = [1, 2, 3, 4, 5, 6, 7, 8, 9]\nprint(highest_product(nums))"
    },
    {
      "rank": 24,
      "score": 8.0,
      "candidate": "def highest_product(arr):\n    arr.sort()\n    for i in range(len(arr)-1):\n        for j in range(i+1, len(arr)):\n            if arr[i] * arr[j] > arr[i] * arr[j+1]:\n                return [arr[i], arr[j]]\n\n\nprint(highest_product([-2, 1, -3, 4, -1, 2, 1, -5, 4, -7, 8, -1, -10, -5, -3, -7, -8, -9, 10]))"
    },
    {
      "rank": 25,
      "score": 8.0,
      "candidate": "def highest_product(arr):\n    max_product = 0\n    max_index = 0\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            product = arr[i] * arr[j]\n            if product > max_product:\n                max_product = product\n                max_index = (i, j)\n\n    return max_index\n\n\narr = [4, 6, -3, -5, 2, -2, -3, 2]\nprint(highest_product(arr))"
    },
    {
      "rank": 26,
      "score": 8.0,
      "candidate": "def highest_product(arr):\n    arr.sort()\n    i,j = 0,len(arr)-1\n    while i < j:\n        if arr[i] * arr[j] > arr[i] * arr[j+1]:\n            i+=1\n        elif arr[i] * arr[j] < arr[i] * arr[j-1]:\n            j-=1\n    return (arr[i],arr[j])\n\narr = [2,2,-1,3,5,-5,-3,4,-2]\nprint(highest_product(arr))"
    },
    {
      "rank": 27,
      "score": 8.0,
      "candidate": "def find_highest_product(arr):\n    n = len(arr)\n    if n == 0:\n        return\n    arr.sort()\n    print(arr[0], arr[-1])\n    for i in range(n - 2):\n        if arr[i] * arr[i + 1] > arr[i] * arr[i + 2]:\n            print(arr[i], arr[i + 1])\n            return\n\n\ndef main():\n    arr = [3, 4, 5, 2, -1, 3]\n    find_highest_product(arr)\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 28,
      "score": 8.0,
      "candidate": "def highest_product(arr):\n    arr.sort()\n    if len(arr) % 2 == 0:\n        a, b = arr[0], arr[1]\n    else:\n        a, b = arr[0], arr[-1]\n    return a * b\n\n\nif __name__ == '__main__':\n    print(highest_product([-1, -2, 3, -4, -5, -6, -7]))"
    },
    {
      "rank": 29,
      "score": 8.0,
      "candidate": "def highest_product(arr):\n    max_prod = 0\n    max_prod_idx = -1\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] * arr[j] > max_prod:\n                max_prod = arr[i] * arr[j]\n                max_prod_idx = i\n    return max_prod_idx\n\narr = [2, -4, 7, 9]\nprint(highest_product(arr))"
    },
    {
      "rank": 30,
      "score": 8.0,
      "candidate": "def highest_product(arr):\n    max_prod = 0\n    max_index = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            prod = arr[i]*arr[j]\n            if prod > max_prod:\n                max_prod = prod\n                max_index = i\n\n    return max_index, max_prod\n\n\nprint(highest_product([-1, -2, 3, -4, -5, -6, -7]))"
    },
    {
      "rank": 31,
      "score": 8.0,
      "candidate": "def highest_product(arr):\n    arr.sort()\n    arr = arr[:2]\n    return arr[0]*arr[1]\n\n\nprint(highest_product([-1, -2, 3, -4]))"
    },
    {
      "rank": 32,
      "score": 8.0,
      "candidate": "def highest_product(arr):\n    arr.sort()\n    return arr[len(arr)//2] * arr[len(arr)//2]\n\n\nprint(highest_product([-1, -3, 5, -6, -3, -1, -5, -3, 5, -6, -4]))"
    },
    {
      "rank": 33,
      "score": 8.0,
      "candidate": "def highest_product(arr):\n    arr.sort()\n    return (arr[0], arr[-1])\n\n\nif __name__ == \"__main__\":\n    arr = [3, 2, 4, -2, 1]\n    print(highest_product(arr))"
    },
    {
      "rank": 34,
      "score": 8.0,
      "candidate": "def highest_product(arr):\n    if len(arr) < 2:\n        return\n\n    n = len(arr)\n    arr.sort()\n\n    for i in range(n):\n        for j in range(n):\n            if i == j:\n                continue\n\n            if arr[i] * arr[j] > arr[i] * arr[j+1]:\n                return [arr[i], arr[j]]"
    },
    {
      "rank": 35,
      "score": 8.0,
      "candidate": "def highest_product(arr):\n    max_prod = 0\n    min_prod = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            prod = arr[i] * arr[j]\n            if prod > max_prod:\n                max_prod = prod\n            if prod < min_prod:\n                min_prod = prod\n    print(\"The pair with highest product is: \", max_prod, min_prod)\n\n\narr = [3, 4, -1, -2, 1, -3]\nhighest_product(arr)"
    },
    {
      "rank": 36,
      "score": 8.0,
      "candidate": "def highest_product(arr):\n    if len(arr) < 2:\n        return None\n    arr.sort()\n    first_product = arr[0] * arr[1]\n    second_product = arr[1] * arr[0]\n    if first_product > second_product:\n        return arr[0], arr[1]\n    else:\n        return arr[1], arr[0]\n\n\narr = [2, -1, -10, 3, -2, 6, -1, -1, -3, -4, -5]\nprint(highest_product(arr))"
    },
    {
      "rank": 37,
      "score": 8.0,
      "candidate": "def highest_product(arr):\n    if len(arr) < 2:\n        return False\n    max_prod = -1\n    max_prod_idx = -1\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] * arr[j] > max_prod:\n                max_prod = arr[i] * arr[j]\n                max_prod_idx = i\n    return max_prod_idx\n\n\nprint(highest_product([1, 2, 3, 4, 5]))\nprint(highest_product([-1, -2, -3, -4]))"
    },
    {
      "rank": 38,
      "score": 8.0,
      "candidate": "def highest_product(array):\n    max_prod = array[0]\n    max_prod_index = 0\n    for i in range(1, len(array)):\n        if array[i] > max_prod:\n            max_prod = array[i]\n            max_prod_index = i\n    return max_prod_index, max_prod\n\n\nif __name__ == \"__main__\":\n    array = [2, -1, -3, -4, -5, -6, -7, -8, -9, -10]\n    print(f\"Highest product is {highest_product(array)}\")"
    },
    {
      "rank": 39,
      "score": 8.0,
      "candidate": "def highest_product(arr):\n    if len(arr) < 2:\n        return \"Invalid array\"\n\n    arr.sort()\n\n    return arr[0] * arr[1]"
    },
    {
      "rank": 40,
      "score": 8.0,
      "candidate": "def highest_product(arr):\n    max_prod = 0\n    max_prod_index = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] * arr[j] > max_prod:\n                max_prod = arr[i] * arr[j]\n                max_prod_index = i\n    print(max_prod_index, max_prod)\n\n\narr = [4, 2, -2, 4, -3, 4]\nhighest_product(arr)\n\n\"\"\"\nTime Complexity: O(N)\nSpace Complexity: O(1)\n\"\"\""
    },
    {
      "rank": 41,
      "score": 8.0,
      "candidate": "def high_product(array):\n    max_product = 0\n    max_index = 0\n    for i in range(len(array)):\n        for j in range(i+1, len(array)):\n            if array[i] * array[j] > max_product:\n                max_product = array[i] * array[j]\n                max_index = i\n    return max_index, max_product\n\n\narray = [2, -4, -3, 1, -2, 4, -3]\n\nprint(high_product(array))"
    },
    {
      "rank": 42,
      "score": 8.0,
      "candidate": "def highest_product(arr):\n    arr.sort()\n    n = len(arr)\n    i = 0\n    j = n - 1\n    while i < j:\n        if arr[i] * arr[j] > arr[i] * arr[j + 1]:\n            return arr[i], arr[j]\n        elif arr[i] * arr[j] < arr[i] * arr[j + 1]:\n            i += 1\n        else:\n            j -= 1\n\n\nif __name__ == \"__main__\":\n    arr = [1, 2, 3, 4, 5, 6]\n    print(highest_product(arr))"
    },
    {
      "rank": 43,
      "score": 8.0,
      "candidate": "def highest_product(arr):\n    arr = sorted(arr)\n    if len(arr) < 2:\n        return \"The array should have at least two elements.\"\n    elif len(arr) == 2:\n        return arr\n    else:\n        if arr[0] * arr[1] > arr[1] * arr[0]:\n            return arr\n        else:\n            return arr"
    },
    {
      "rank": 44,
      "score": 8.0,
      "candidate": "def highest_product(arr):\n    arr.sort()\n    length = len(arr)\n    left = 0\n    right = length - 1\n    max_prod = 0\n    for i in range(length):\n        if i!= left:\n            if arr[i] * arr[left] > max_prod:\n                max_prod = arr[i] * arr[left]\n        if i!= right:\n            if arr[i] * arr[right] > max_prod:\n                max_prod = arr[i] * arr[right]\n        left += 1\n        right -= 1\n    return max_prod\n\n\narr = [1, 2, 3, 4, 5]\nprint(highest_product(arr))"
    },
    {
      "rank": 45,
      "score": 8.0,
      "candidate": "def highest_product(arr):\n    max_product = 0\n    max_index = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            product = arr[i] * arr[j]\n            if product > max_product:\n                max_product = product\n                max_index = i\n    return max_index, max_product\n\n\nprint(highest_product([-1, 4, -3, 2, 5, -2, -1]))"
    },
    {
      "rank": 46,
      "score": 8.0,
      "candidate": "def highest_product(arr):\n    arr.sort()\n    return arr[len(arr)-2] * arr[len(arr)-1]\n\nprint(highest_product([-10, -5, -1, 1, 5, 10]))\nprint(highest_product([-5, -10, -1, -1, -1, 1]))"
    },
    {
      "rank": 47,
      "score": 8.0,
      "candidate": "def max_product(arr):\n    if not arr:\n        return 0\n\n    max1 = max(arr)\n    max2 = 0\n    for i in arr:\n        if i > max1:\n            max1 = i\n\n        if i > max2:\n            max2 = i\n\n    return max1 * max2\n\n\nif __name__ == \"__main__\":\n    print(max_product([2, 3, -5, -2, 4, -1, -6, 7]))"
    },
    {
      "rank": 48,
      "score": 8.0,
      "candidate": "def highest_product(arr):\n    arr.sort()\n    return (arr[0], arr[-1])\n\n\narr = [2, 3, -1, -2, 4, -3, 5]\nprint(highest_product(arr))"
    },
    {
      "rank": 49,
      "score": 8.0,
      "candidate": "def max_product(arr):\n    max_product = 0\n    for i in range(0, len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] * arr[j] > max_product:\n                max_product = arr[i] * arr[j]\n    return max_product\n\n\narr = [2, 4, 7, -1, -2, 3]\nprint(max_product(arr))"
    },
    {
      "rank": 50,
      "score": 8.0,
      "candidate": "def highest_product(arr):\n    arr.sort()\n    n = len(arr)\n    left = 0\n    right = n - 1\n    while left <= right:\n        product = arr[left] * arr[right]\n        if product > arr[left] * arr[right]:\n            left += 1\n        elif product < arr[left] * arr[right]:\n            right -= 1\n        else:\n            return arr[left], arr[right]\n    return None\n\n\nif __name__ == \"__main__\":\n    arr = [1, 2, 3, 4, 5, 6]\n    print(highest_product(arr))"
    },
    {
      "rank": 51,
      "score": 8.0,
      "candidate": "def highest_product(arr):\n    max_prod = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            prod = arr[i] * arr[j]\n            if prod > max_prod:\n                max_prod = prod\n    return max_prod\n\n\nprint(highest_product([2, 3, 4, 5, 6]))\nprint(highest_product([-1, -2, -3, -4]))\nprint(highest_product([-1, -2, -3, -4, -5, -6]))"
    },
    {
      "rank": 52,
      "score": 8.0,
      "candidate": "def highest_product(arr):\n    arr.sort()\n    result = 0\n    for i in range(len(arr) - 1):\n        for j in range(i + 1, len(arr)):\n            result = max(result, arr[i] * arr[j])\n    return result\n\n\ndef main():\n    arr = [1, 2, 4, 5, 7, 8, 9, 10]\n    print(\"Highest product is \" + str(highest_product(arr)))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 53,
      "score": 8.0,
      "candidate": "def highest_product(arr):\n    arr.sort()\n    return arr[len(arr)//2], arr[len(arr)//2]\n\n\narr = [1, 5, 2, -3, 4, -2]\n\nprint(highest_product(arr))"
    },
    {
      "rank": 54,
      "score": 8.0,
      "candidate": "def highest_product(arr):\n  if arr == []:\n    return None\n  else:\n    arr.sort()\n    max_prod = arr[0]*arr[0]\n    max_index = 0\n    for i in range(1, len(arr)):\n      if arr[i] > max_prod:\n        max_prod = arr[i]\n        max_index = i\n    max_prod = arr[max_index]*arr[max_index]\n    return [max_index, max_prod]\n\narr = [2, -2, 3, -4, 5, -2]\nprint(highest_product(arr))"
    },
    {
      "rank": 55,
      "score": 8.0,
      "candidate": "def highest_product(arr):\n    if len(arr) < 2:\n        return False\n    max1 = -1\n    max2 = -1\n    for i in range(len(arr)):\n        for j in range(len(arr)):\n            if i == j:\n                continue\n            product = arr[i] * arr[j]\n            if product > max1:\n                max1 = product\n            if product > max2:\n                max2 = product\n    return max1, max2\n\n\nif __name__ == '__main__':\n    arr = [3, 6, -2, 7, -2, -1, -2, -2]\n    print(highest_product(arr))"
    },
    {
      "rank": 56,
      "score": 8.0,
      "candidate": "def highest_product(arr):\n    arr.sort()\n    l = len(arr)\n    if l < 2:\n        return 0\n    elif l < 3:\n        return arr[0] * arr[1]\n    else:\n        return arr[l-1] * arr[l-2]\n\n\nprint(highest_product([-2, -3, -4, -1, -2, -3, -4]))\nprint(highest_product([-2, -3, -4]))\nprint(highest_product([-2, -3, -4, -1]))\nprint(highest_product([-2, -3, -4, -1, -2, -3, -4]))"
    },
    {
      "rank": 57,
      "score": 8.0,
      "candidate": "def highest_product(arr):\n    # Write your code here\n    product_dict = {}\n    for item in arr:\n        if item in product_dict:\n            product_dict[item] = max(product_dict[item], item * product_dict[item])\n        else:\n            product_dict[item] = item\n    return product_dict\n\n\nif __name__ == '__main__':\n    print(highest_product([-2, -4, -3, 2, -1, 1, 5, 4]))"
    },
    {
      "rank": 58,
      "score": 8.0,
      "candidate": "def highest_product(arr):\n    arr.sort()\n    first = arr[0]\n    second = arr[1]\n    if first > second:\n        print(\"The pair with highest product is \", first, \"*\", second)\n    else:\n        print(\"The pair with highest product is \", second, \"*\", first)\n\nhighest_product([5, 4, 3, 2, 1])"
    },
    {
      "rank": 59,
      "score": 8.0,
      "candidate": "def maxProduct(arr):\n    # write your code here\n    arr.sort()\n    product = 1\n    for i in range(len(arr)):\n        if i < len(arr) - 1:\n            if arr[i] * arr[i + 1] > product:\n                product = arr[i] * arr[i + 1]\n                pair = [arr[i], arr[i + 1]]\n    return pair\n\nprint(maxProduct([3, 4, 5, 8, 9]))\nprint(maxProduct([6, 4, 8, 9, 10]))\nprint(maxProduct([-1, -2, -3, -4, -5, -6]))"
    },
    {
      "rank": 60,
      "score": 8.0,
      "candidate": "def highest_product(arr):\n    arr.sort()\n    if len(arr) == 2:\n        return arr[0] * arr[1]\n    else:\n        return arr[1] * arr[2]\n\narr = [2, 2, 3, 1, -2]\nprint(highest_product(arr))"
    },
    {
      "rank": 61,
      "score": 8.0,
      "candidate": "def highest_product(nums):\n    # print(nums)\n    # print(max(nums))\n    # print(min(nums))\n    # return max(nums)\n    # return min(nums)\n    max_product = 0\n    min_product = float(\"inf\")\n    for i in range(len(nums)):\n        if nums[i] > max_product:\n            max_product = nums[i]\n        if nums[i] < min_product:\n            min_product = nums[i]\n    return max_product, min_product\n\n\nprint(highest_product([1, 2, 3, 4, 5, 6]))"
    },
    {
      "rank": 62,
      "score": 8.0,
      "candidate": "def highest_product(arr):\n    arr.sort()\n    return arr[0] * arr[1]\n\nprint(highest_product([2, 3, 4, 5, 7, 9, 10]))"
    },
    {
      "rank": 63,
      "score": 8.0,
      "candidate": "def find_highest_product(arr):\n    # sort the array\n    arr.sort()\n    # get the length of the array\n    n = len(arr)\n    # get the index of the largest\n    i = n - 1\n    j = n - 1\n    # while i >= 0 and j < n:\n    #     if arr[i] * arr[j] > arr[i] * arr[j+1]:\n    #         i -= 1\n    #         j += 1\n    #     else:\n    #         break\n    while i >= 0 and j < n:\n        if arr[i] * arr[j] > arr[i] * arr[j+1]:\n            i -= 1\n        else:\n            break\n    while i < n-1 and arr[i] * arr[j] > arr[i+1]:\n        j += 1\n    return arr[i], arr[j]\n\n\nprint(find_highest_product([-1, -2, 3, 4, -5]))"
    },
    {
      "rank": 64,
      "score": 8.0,
      "candidate": "def high_product(arr):\n    arr.sort()\n    length = len(arr)\n    for i in range(length - 1):\n        for j in range(i + 1, length):\n            if arr[i] * arr[j] > arr[i] * arr[j + 1]:\n                return arr[i], arr[j]\n    return arr[0], arr[0]\n\n\nif __name__ == '__main__':\n    arr = [2, 3, 4, -1, -2]\n    print(high_product(arr))"
    },
    {
      "rank": 65,
      "score": 8.0,
      "candidate": "def highest_product(array):\n    max_prod = array[0]\n    min_prod = array[0]\n    for i in range(1, len(array)):\n        if array[i] > max_prod:\n            max_prod = array[i]\n        if array[i] < min_prod:\n            min_prod = array[i]\n    return (max_prod, min_prod)\n\nprint(highest_product([1, 2, 3, 4, 5]))"
    },
    {
      "rank": 66,
      "score": 8.0,
      "candidate": "def highest_product(nums):\n    max_prod = nums[0]\n    max_num = nums[0]\n    for num in nums:\n        if num > max_num:\n            max_num = num\n            max_prod = num\n    print(f\"max_prod = {max_prod}\")\n    print(f\"max_num = {max_num}\")\n\n\nif __name__ == '__main__':\n    nums = [2, 4, 8, -2, -3, 7, 5, -1]\n    highest_product(nums)"
    },
    {
      "rank": 67,
      "score": 8.0,
      "candidate": "def highest_product(arr):\n    arr.sort()\n    for i in range(len(arr)-2):\n        for j in range(i+1, len(arr)):\n            if arr[i] * arr[j] > arr[i] * arr[j+1]:\n                print(arr[i], arr[j])\n                return arr[i], arr[j]\n\n\nif __name__ == \"__main__\":\n    arr = [3, 2, -1, -3, -2, 4]\n    print(highest_product(arr))\n\n    arr = [-2, -1, 1, -3]\n    print(highest_product(arr))\n\n    arr = [1, -2, 3]\n    print(highest_product(arr))\n\n    arr = [-2, -1, 1]\n    print(highest_product(arr))\n\n    arr = [-2, -1, 1, -2, 3]\n    print(highest_product(arr))"
    },
    {
      "rank": 68,
      "score": 8.0,
      "candidate": "def find_pair(arr):\n    arr.sort()\n    l = len(arr)\n    i, j = 0, l-1\n    while i<j:\n        if arr[i]*arr[j] > arr[i+1]*arr[j+1]:\n            return arr[i], arr[j]\n        elif arr[i]*arr[j] < arr[i+1]*arr[j+1]:\n            i += 1\n        else:\n            j -= 1\n\n\narr = [1, 5, 10, 4, 2, 8, 7, 6, 9]\nprint(find_pair(arr))"
    },
    {
      "rank": 69,
      "score": 8.0,
      "candidate": "def highest_product(arr):\n    arr.sort()\n    for i in range(len(arr)-1):\n        for j in range(i+1, len(arr)):\n            if arr[i] * arr[j] > arr[i] * arr[j+1]:\n                return arr[i], arr[j]\n    return -1\n\nprint(highest_product([1, 2, 3, 4, 5]))\nprint(highest_product([1, 2, 3, 4]))\nprint(highest_product([1, 2, 3, 4, 5, 6, 7]))"
    },
    {
      "rank": 70,
      "score": 8.0,
      "candidate": "def highest_product(arr):\n    arr.sort()\n    for i in range(len(arr) - 1):\n        for j in range(i + 1, len(arr)):\n            if arr[i] * arr[j] > arr[i] * arr[j + 1]:\n                print(f\"The product of {arr[i]} and {arr[j]} is {arr[i] * arr[j + 1]}\")\n\n\nhighest_product([1, -1, -2, -3, 4, 5, -1, -5])"
    },
    {
      "rank": 71,
      "score": 8.0,
      "candidate": "def highest_product(array):\n    maximum = 0\n    maximum_index = 0\n    for index, value in enumerate(array):\n        if value > maximum:\n            maximum = value\n            maximum_index = index\n\n    return maximum_index, maximum\n\n\nprint(highest_product([1, 2, 3, 4, 5]))\nprint(highest_product([1, 2, 3, 4, 5, 6]))"
    },
    {
      "rank": 72,
      "score": 8.0,
      "candidate": "def highest_product(arr):\n    arr = sorted(arr)\n    return arr[len(arr)//2] * arr[len(arr)//2]\n\n\nprint(highest_product([-3, 2, -3, 4, -2, -1]))"
    },
    {
      "rank": 73,
      "score": 8.0,
      "candidate": "def highest_product(arr):\n    max_product = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            product = arr[i]*arr[j]\n            if product > max_product:\n                max_product = product\n    return max_product\n\narr = [10, 2, 5, -2, 4, 8, -7, 9, -4, -5, -1]\n\nprint(highest_product(arr))"
    },
    {
      "rank": 74,
      "score": 8.0,
      "candidate": "def highest_product(arr):\n    arr.sort()\n    if len(arr) == 2:\n        return arr[0], arr[1]\n    else:\n        return arr[0], arr[1] * arr[2]\n\nprint(highest_product([2, 2, 3, 4, 5]))\nprint(highest_product([-2, 3, 2, -2, 3, 2, -3]))\nprint(highest_product([2, 2, 3, 4, 5]))\nprint(highest_product([-2, -3, 2, -2, 3, 2, -3]))"
    },
    {
      "rank": 75,
      "score": 8.0,
      "candidate": "def find_highest_product(arr):\n    arr.sort()\n    n = len(arr)\n    if n==2:\n        return arr[0], arr[1]\n    if n==3:\n        return arr[0], arr[1], arr[2]\n    if n==4:\n        return arr[0], arr[1], arr[2], arr[3]\n    if n==5:\n        return arr[0], arr[1], arr[2], arr[3], arr[4]\n\nif __name__ == \"__main__\":\n    print(find_highest_product([2,3,-1,4]))\n    print(find_highest_product([-1,4,-1,2,3,-1]))\n    print(find_highest_product([1,-2,3,4]))\n    print(find_highest_product([2,-1,2,-1,-2]))\n    print(find_highest_product([-1,2,-1,-2]))\n    print(find_highest_product([-1,-2,-1,-2]))"
    },
    {
      "rank": 76,
      "score": 8.0,
      "candidate": "def highest_product(arr):\n    max1 = arr[0]\n    max2 = arr[0]\n    for i in range(1, len(arr)):\n        if arr[i] > max1:\n            max1 = arr[i]\n        elif arr[i] > max2:\n            max2 = arr[i]\n\n    return max1 * max2\n\nprint(highest_product([-4, -3, -2, -1, 5, -1, -2, -3]))\nprint(highest_product([-3, -2, -3, -1, 5, -1, -2, -3, -4]))"
    },
    {
      "rank": 77,
      "score": 8.0,
      "candidate": "def highest_product(arr):\n    if arr == None or len(arr) == 0:\n        return None\n    max_prod = 0\n    min_prod = 1\n    for i in arr:\n        if i > max_prod:\n            max_prod = i\n        if i < min_prod:\n            min_prod = i\n    return (max_prod, min_prod)\n\n\nprint(highest_product([-1, -1, -1, 0, 0, 1, 1, 2, 2, 3, 3, 4]))"
    },
    {
      "rank": 78,
      "score": 8.0,
      "candidate": "def highest_product(nums):\n    \"\"\"\n    :type nums: List[int]\n    :rtype: int\n    \"\"\"\n    n = len(nums)\n    if n == 0:\n        return 0\n    else:\n        max_val = nums[0]\n        max_index = 0\n        for i in range(n):\n            if nums[i] > max_val:\n                max_val = nums[i]\n                max_index = i\n        return max_index, max_val\n\n\nprint(highest_product([-2, 1, -3, 4, -1, 2, 1]))\nprint(highest_product([-2, 2, -1, 2, 1]))\nprint(highest_product([-2, -1, -3, -4, -1, 2, 1]))\nprint(highest_product([-2, -3, 4, -1, 2, 1]))"
    },
    {
      "rank": 79,
      "score": 8.0,
      "candidate": "def highest_product(arr):\n    arr.sort()\n    return arr[len(arr)//2] * arr[len(arr)//2-1]\n\n\n\n\n\n\nif __name__ == \"__main__\":\n    print(highest_product([-1, -2, -3, -4, -5]))"
    },
    {
      "rank": 80,
      "score": 8.0,
      "candidate": "def find_highest_product(nums):\n    # if len(nums) < 2:\n    #     return None\n    # if len(nums) == 2:\n    #     return nums[0], nums[1]\n    # if len(nums) == 3:\n    #     return nums[0], nums[1], nums[2]\n    # if len(nums) == 4:\n    #     return nums[0], nums[1], nums[2], nums[3]\n    # return max(nums[0], nums[1]) * max(nums[2], nums[3])\n    # return max(nums[0], nums[1]) * max(nums[2]) * max(nums[3], nums[4])\n    # return max(nums[0], nums[1]) * max(nums[2]) * max(nums[3], nums[4])\n    # return max(nums[0], nums[1], nums[2], nums[3], nums[4])\n    return max(nums[0], nums[1], nums[2], nums[3]) * max(nums[4], nums[5])\n\n\nprint(find_highest_product([-2, -1, 0, 3, 6, 4]))"
    },
    {
      "rank": 81,
      "score": 8.0,
      "candidate": "def highest_product(arr):\n    arr.sort()\n    max_1 = arr[0]\n    max_2 = arr[0]\n    for i in range(1, len(arr)):\n        if arr[i] > max_1:\n            max_1 = arr[i]\n        if arr[i] > max_2:\n            max_2 = arr[i]\n    print(f\"The pair with highest product is {max_1} * {max_2}\")\n\n\nif __name__ == \"__main__\":\n    arr = [1, 2, 3, 4, 5]\n    highest_product(arr)"
    },
    {
      "rank": 82,
      "score": 8.0,
      "candidate": "def highest_product(arr):\n    if len(arr) < 2:\n        return\n    arr.sort()\n    high_prod = arr[len(arr)-1] * arr[len(arr)-2]\n    low_prod = arr[0] * arr[1]\n    for i in range(len(arr)-1):\n        if arr[i] > high_prod:\n            high_prod = arr[i] * arr[i+1]\n        if arr[i] < low_prod:\n            low_prod = arr[i] * arr[i+1]\n    print(high_prod, low_prod)\n\n\nif __name__ == \"__main__\":\n    arr = [1, 2, 3, 4, 5]\n    highest_product(arr)"
    },
    {
      "rank": 83,
      "score": 8.0,
      "candidate": "def highest_product(arr):\n    arr.sort()\n    return arr[len(arr)//2], arr[len(arr)//2+1]\n\n\narr = [2, 3, -3, 4, -1, 5, -5, -2, -2, 4]\nprint(highest_product(arr))"
    },
    {
      "rank": 84,
      "score": 8.0,
      "candidate": "def highest_product(arr):\n    arr.sort()\n    max_1 = 0\n    max_2 = 0\n    for i in range(len(arr)):\n        if arr[i] > max_1:\n            max_1 = arr[i]\n            max_2 = arr[i] * max_1\n        elif arr[i] > max_2:\n            max_2 = arr[i]\n    print(f\"The highest product is {max_2}\")\n\n\narr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nhighest_product(arr)"
    },
    {
      "rank": 85,
      "score": 8.0,
      "candidate": "def highest_product(nums):\n    min_num = min(nums)\n    max_num = max(nums)\n    prod = 0\n    for i in nums:\n        prod = max(prod, i*min_num)\n    return prod, prod\n\nprint(highest_product([1, 2, 3, 4, 5, 6, 7, 8, 9]))"
    },
    {
      "rank": 86,
      "score": 8.0,
      "candidate": "def highest_product(arr):\n    arr.sort()\n    n = len(arr)\n    if n == 2:\n        return arr[0], arr[1]\n    else:\n        return arr[n // 2], arr[n // 2 - 1]\n\n\nprint(highest_product([1, 2, 3, 4]))\nprint(highest_product([1, 4, 5, -3]))"
    },
    {
      "rank": 87,
      "score": 7.0,
      "candidate": "def highest_product(arr):\n    arr.sort()\n    result = arr[0] * arr[1]\n    for i in range(2, len(arr)):\n        result = max(result, arr[i] * arr[i-1])\n    return result\n\nprint(highest_product([-5, -3, 4, -2, -1, 2, 1]))"
    },
    {
      "rank": 88,
      "score": 7.0,
      "candidate": "def highest_product(arr):\n    \"\"\"\n    :param arr:\n    :return:\n    \"\"\"\n    arr.sort()\n    n = len(arr)\n    for i in range(n):\n        for j in range(n):\n            if i!= j:\n                if arr[i] * arr[j] > arr[i] * arr[j+1]:\n                    return arr[i], arr[j]\n\n\narr = [2, 4, 8, 12, 16, 20]\nprint(highest_product(arr))"
    },
    {
      "rank": 89,
      "score": 1.0,
      "candidate": "def highest_product(arr):\n    arr.sort()\n    l = len(arr)\n    l1 = l - 2\n    l2 = l - 1\n    i = 0\n    j = 0\n    for i in range(l):\n        if i < l1 and arr[i] > arr[i+1]:\n            break\n        if i < l2 and arr[i] > arr[i+1]:\n            break\n        if i < l1 and arr[i] > arr[i+2]:\n            break\n        if i < l2 and arr[i] > arr[i+2]:\n            break\n        if i < l1 and arr[i] > arr[i+3]:\n            break\n        if i < l2 and arr[i] > arr[i+3]:\n            break\n        if i < l1 and arr[i] > arr[i+4]:\n            break\n        if i < l2 and arr[i] > arr[i+4]:\n            break\n    return arr[i], arr[i+1], arr[i+2]\n\narr = [2,3,4,5,6,7,8,9]\nprint(highest_product(arr))"
    },
    {
      "rank": 90,
      "score": 1.0,
      "candidate": "def highest_product(arr):\n    max_product = arr[0]\n    max_product_index = 0\n\n    for i in range(1, len(arr)):\n        if arr[i] > max_product:\n            max_product = arr[i]\n            max_product_index = i\n\n    print(\"Max product is {}\".format(max_product))\n    print(\"Max product index is {}\".format(max_product_index))\n\n\n# Driver Code\narr = [2, -3, -4, -5, -7, -8, -9, -1]\nhighest_product(arr)"
    },
    {
      "rank": 91,
      "score": 1.0,
      "candidate": "def find_pair(arr):\n    arr.sort()\n    return (arr[0], arr[1])\n\n\narr = [1, 2, 3, 4, 5]\nprint(find_pair(arr))"
    },
    {
      "rank": 92,
      "score": 1.0,
      "candidate": "def highest_product(arr):\n    # create a set of unique values\n    unique_values = set(arr)\n\n    # create a set of unique values\n    unique_values.remove(max(arr))\n\n    # create a list of unique values\n    unique_values = list(unique_values)\n\n    # create a list of unique values\n    unique_values.remove(min(arr))\n\n    # create a list of unique values\n    unique_values = list(unique_values)\n\n    # create a list of unique values\n    unique_values.remove(max(arr) - min(arr))\n\n    # create a list of unique values\n    unique_values = list(unique_values)\n\n    # create a list of unique values\n    unique_values.remove(max(arr) * min(arr))\n\n    # create a list of unique values\n    unique_values = list(unique_values)\n\n    # create a list of unique values\n    unique_values.remove(max(arr) / min(arr))\n\n    # create a list of unique values\n    unique_values = list(unique_values)\n\n    # create a list of unique values\n    unique_values.remove(max(arr) / min(arr) * max(arr))\n\n    # create a list of unique values\n    unique_values.remove(max(arr) / min(arr) * min(arr))\n\n    # create a list of unique values\n    unique_values.remove(max(arr) / min(arr) * max(arr) * min(arr))\n\n    # create a list of unique values\n    unique_values.remove(max(arr) / min(arr) * max(arr) * min(arr))\n\n    # create a list of unique values\n    unique_values.remove(max(arr) / min(arr) * max(arr) * min(arr))\n\n    # create a list of unique values\n    unique_values.remove(max(arr) * min(arr))\n\n    # create a list of unique values\n    unique_values.remove(max(arr) * min(arr) * max(arr) * min(arr))\n\n    # create a list of"
    },
    {
      "rank": 93,
      "score": 1.0,
      "candidate": "def highest_product(arr):\n    \"\"\"\n    Function to find the pair with highest product from the given array of integers.\n    :param arr: The array of integers to find the pair with highest product\n    :return: The pair with highest product\n    \"\"\"\n    # Your code here\n    max_prod = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] * arr[j] > max_prod:\n                max_prod = arr[i] * arr[j]\n                pair = (arr[i], arr[j])\n    return pair\n\n\ndef test_function():\n    arr = [3, 5, 7, 8, 5, 4, 3, 2, 1]\n    assert highest_product(arr) == (3, 4)\n    arr = [4, 5, 6, 7, 8, 3, 2, 1]\n    assert highest_product(arr) == (4, 6)\n\n\nif __name__ == '__main__':\n    test_function()"
    },
    {
      "rank": 94,
      "score": 1.0,
      "candidate": "def highest_product(arr):\n    arr.sort()\n    #print(arr)\n    if arr[0] * arr[1] > arr[1] * arr[0]:\n        return (arr[0], arr[1])\n    else:\n        return (arr[1], arr[0])\n\n\n\n\narr = [3, -1, -2, 5, -4, -3, 2, -1, -4, 5]\nprint(highest_product(arr))\n\narr = [3, -1, -2, 5, -4, -3, 2, -1, -4, 5, -1]\nprint(highest_product(arr))"
    },
    {
      "rank": 95,
      "score": 1.0,
      "candidate": "def highest_product(arr):\n    arr.sort()\n    if len(arr) == 2:\n        return arr[0], arr[1]\n    elif len(arr) == 3:\n        return arr[0] * arr[1], arr[2]\n    elif len(arr) == 4:\n        return arr[0] * arr[1] * arr[2], arr[3]\n    else:\n        return 0, 0\n\n\nprint(highest_product([3, 4, 2, 3, 1, 5]))"
    },
    {
      "rank": 96,
      "score": 1.0,
      "candidate": "def highest_product(arr):\n    # write your code here\n    arr.sort()\n    # print(arr)\n    # print(arr[0]*arr[1])\n    # print(arr[len(arr)-1]*arr[len(arr)-2])\n    if len(arr) == 2:\n        return arr[0]*arr[1]\n    elif len(arr) == 3:\n        return arr[0]*arr[1]*arr[2]\n    elif len(arr) == 4:\n        return arr[0]*arr[1]*arr[2]*arr[3]\n\n\nprint(highest_product([-2, -3, 5, -1, -4, 8]))"
    },
    {
      "rank": 97,
      "score": 1.0,
      "candidate": "def highest_product(arr):\n    # Sort the list\n    arr.sort()\n\n    # Get the maximum product\n    max_product = arr[0] * arr[1]\n\n    # Iterate over the list\n    for i in range(1, len(arr)):\n        # Get the product\n        product = arr[i] * arr[i-1]\n\n        # Check if the product is greater than the maximum product\n        if product > max_product:\n            # Set the maximum product\n            max_product = product\n\n    # Return the pair\n    return max_product, arr[len(arr)//2]\n\n\n# Test\narr = [2, -5, -1, 4, -5, -7, 2, -1, 3, -5, -7]\nprint(highest_product(arr))"
    },
    {
      "rank": 98,
      "score": 1.0,
      "candidate": "def highest_product(arr):\n    arr.sort()\n    if len(arr) == 2:\n        return arr[0], arr[1]\n    else:\n        return arr[-1], arr[-2]\n\n\ndef test_function():\n    test_cases = [\n        (\n            ([2, 7, 11, 15], [2, 7, 11, 15]),\n            [2, 7, 11, 15],\n        ),\n        (\n            ([2, 7, 11, 15, 20], [2, 7, 11, 15, 20]),\n            [2, 7, 11, 15, 20],\n        ),\n    ]\n\n    for test_case in test_cases:\n        output = highest_product(*test_case)\n        assert output == test_case[0], f\"Output {output} is not equal to expected {test_case[0]}\"\n        assert output == test_case[1], f\"Output {output} is not equal to expected {test_case[1]}\"\n\n\nif __name__ == '__main__':\n    test_function()"
    },
    {
      "rank": 99,
      "score": 1.0,
      "candidate": "def highest_product(arr):\n    # Initialize the maximum product to the first element\n    maximum_product = arr[0]\n    # Initialize the maximum product to the last element\n    maximum_product_last = arr[-1]\n    # Initialize the maximum product to the last element\n    for element in arr:\n        if element > maximum_product:\n            # Update the maximum product\n            maximum_product = element\n            # Update the maximum product last element\n            maximum_product_last = element\n\n    # Return the maximum product\n    return maximum_product, maximum_product_last\n\n\n# Testing\narr = [2, 3, -1, 4, -2, -3]\nprint(highest_product(arr))"
    },
    {
      "rank": 100,
      "score": 1.0,
      "candidate": "def highest_product(arr):\n    max_product = 0\n    max_value = 0\n    min_value = 0\n    for i in arr:\n        if i > max_value:\n            max_value = i\n        elif i < min_value:\n            min_value = i\n        elif i > max_product:\n            max_product = i\n        elif i < min_value:\n            min_value = i\n    return max_product, min_value\n\n\narr = [2, 3, -5, -1, -3, -4]\nprint(highest_product(arr))"
    }
  ]
}