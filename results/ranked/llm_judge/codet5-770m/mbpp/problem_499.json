{
  "timestamp": "2025-09-14T16:07:21.983187",
  "method": "improved_llm_judge",
  "judge_model": "codellama/CodeLlama-7b-Python-hf",
  "target_model": "codet5-770m",
  "dataset": "mbpp",
  "problem_number": 499,
  "total_candidates": 100,
  "results": [
    {
      "rank": 1,
      "score": 10.0,
      "candidate": "class Solution(object):\n    def numSubsequences(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"\n        if len(nums) == 0:\n            return 0\n\n        dp = [0] * (len(nums) + 1)\n        dp[0] = 1\n        for i in range(1, len(nums) + 1):\n            dp[i] = dp[i - 1] * nums[i - 1]\n\n        for i in range(len(nums) - 2, -1, -1):\n            for j in range(i + 1, len(nums) + 1):\n                if nums[i] <= nums[j]:\n                    dp[j] += dp[j - nums[i]]\n\n        return dp[len(nums)]"
    },
    {
      "rank": 2,
      "score": 10.0,
      "candidate": "def subseq_product_smaller_than_k(arr, k):\n    n = len(arr)\n    dp = [[0 for _ in range(k+1)] for _ in range(n+1)]\n    dp[0][0] = 1\n    for i in range(1, n+1):\n        dp[i][0] = dp[i-1][0]\n\n    for i in range(1, n+1):\n        for j in range(1, k+1):\n            if j <= arr[i-1]:\n                dp[i][j] += dp[i-1][j]\n\n    return dp[n][k]\n\n\nif __name__ == \"__main__\":\n    print(subseq_product_smaller_than_k([1, 2, 3, 4, 5], 5))\n    print(subseq_product_smaller_than_k([2, 3, 4, 5, 6], 5))\n    print(subseq_product_smaller_than_k([2, 3, 4, 5, 6], 7))\n    print(subseq_product_smaller_than_k([2, 3, 4, 5, 6], 8))\n    print(subseq_product_smaller_than_k([2, 3, 4, 5, 6], 9))\n    print(subseq_product_smaller_than_k([2, 3, 4, 5, 6], 10))\n    print(subseq_product_smaller_than_k([2, 3, 4, 5, 6], 11))\n    print(subseq_product_smaller_than_k([2, 3, 4, 5, 6], 12))\n    print(subseq_product_smaller_than_k([2, 3, 4, 5, 6], 13))\n    print(subseq_product_smaller_than_k([2, 3, 4, 5, 6], 14))\n    print(subseq_product_smaller_than_k([2, 3, 4, 5, 6], 15))\n    print(subseq_product_smaller_than_k([2, 3, 4, 5, 6], 16))"
    },
    {
      "rank": 3,
      "score": 10.0,
      "candidate": "def numSubsequences(k, arr):\n    product = 1\n    count = 0\n    for i in arr:\n        product *= i\n        if product < k:\n            count += 1\n\n    return count\n\n\nif __name__ == '__main__':\n    print(numSubsequences(5, [1, 2, 3, 4, 5, 6]))\n    print(numSubsequences(5, [2, 3, 4, 5, 6, 7]))\n    print(numSubsequences(5, [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))"
    },
    {
      "rank": 4,
      "score": 10.0,
      "candidate": "def subsequences(k, arr):\n    n = len(arr)\n    dp = [[0 for _ in range(k+1)] for _ in range(n+1)]\n    dp[0][0] = 1\n\n    for i in range(1, n+1):\n        for j in range(1, k+1):\n            if arr[i-1] < j:\n                dp[i][j] += dp[i-1][j]\n            else:\n                dp[i][j] = dp[i-1][j]\n\n    return dp[n][k]\n\n\nprint(subsequences(3, [1, 2, 3, 4, 5, 6, 7]))\nprint(subsequences(3, [1, 2, 3, 4, 5, 6, 7]))\nprint(subsequences(3, [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))"
    },
    {
      "rank": 5,
      "score": 10.0,
      "candidate": "class Solution(object):\n    def numSubsequences(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"\n        if not nums: return 0\n        nums.sort()\n        dp = [1 for _ in range(len(nums))]\n        dp[0] = 1\n        for i in range(1, len(nums)):\n            dp[i] = dp[i-1] * nums[i]\n\n        count = 0\n        for i in range(1, len(nums)):\n            for j in range(i):\n                if nums[i] * nums[j] < k:\n                    count += dp[j]\n        return count\n\nif __name__ == \"__main__\":\n    s = Solution()\n    print s.numSubsequences([1,2,3,4,5,6,7,8], 5)\n    print s.numSubsequences([2,3,4,5,6,7,8], 8)\n    print s.numSubsequences([2,3,4,5,6,7,8], 4)\n    print s.numSubsequences([2,3,4,5,6,7,8], 3)\n    print s.numSubsequences([2,3,4,5,6,7,8], 2)\n    print s.numSubsequences([2,3,4,5,6,7,8], 1)\n    print s.numSubsequences([2,3,4,5,6,7,8], 0)\n    print s.numSubsequences([2,3,4,5,6,7,8], -1)"
    },
    {
      "rank": 6,
      "score": 10.0,
      "candidate": "def count_smaller_product_subsequences(nums, k):\n    count = 0\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] * nums[j] < k:\n                count += 1\n    return count\n\n\nif __name__ == '__main__':\n    print(count_smaller_product_subsequences([3, 4, 5, 2, 1], 2))"
    },
    {
      "rank": 7,
      "score": 8.444444444444445,
      "candidate": "def subsequences_smaller_than_k(arr, k):\n    n = len(arr)\n    dp = [[0 for i in range(k+1)] for j in range(n+1)]\n    dp[0][0] = 1\n    for i in range(1,n+1):\n        for j in range(1,k+1):\n            if arr[i-1] < j:\n                dp[i][j] += dp[i-1][j]\n            else:\n                dp[i][j] = dp[i-1][j]\n    return dp[n][k]\n\nprint(subsequences_smaller_than_k([1,2,3,4,5], 3))\nprint(subsequences_smaller_than_k([1,2,3,4,5], 5))\nprint(subsequences_smaller_than_k([1,2,3,4,5], 2))\nprint(subsequences_smaller_than_k([1,2,3,4,5], 1))"
    },
    {
      "rank": 8,
      "score": 8.444444444444445,
      "candidate": "def subsequences_smaller_than_k(arr, k):\n    # Write your code here\n    # count = 0\n    # product = 1\n    # for i in range(len(arr)):\n    #     product *= arr[i]\n    #     if product < k:\n    #         count += 1\n    # return count\n\n    count = 0\n    product = 1\n    for i in range(len(arr)):\n        if arr[i] >= k:\n            count += 1\n            if count > 1:\n                product *= arr[i]\n                count -= 1\n        else:\n            product *= arr[i]\n    return count\n\n\nif __name__ == \"__main__\":\n    print(subsequences_smaller_than_k([2, 3, 4, 5], 4))\n    print(subsequences_smaller_than_k([2, 3, 4, 5], 5))\n    print(subsequences_smaller_than_k([2, 3, 4, 5], 6))\n    print(subsequences_smaller_than_k([2, 3, 4, 5], 7))"
    },
    {
      "rank": 9,
      "score": 8.444444444444445,
      "candidate": "def num_subsequences(arr, k):\n    if len(arr) == 0:\n        return 0\n    n = len(arr)\n    product = 1\n    res = 0\n    for i in range(n):\n        product *= arr[i]\n        if product < k:\n            res += 1\n    return res\n\nprint(num_subsequences([1, 2, 3, 4, 5], 3))"
    },
    {
      "rank": 10,
      "score": 8.444444444444445,
      "candidate": "def subseq_with_product_smaller_than(arr, k):\n    n = len(arr)\n    ans = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            ans += arr[j] // arr[i]\n    return ans\n\n\nif __name__ == \"__main__\":\n    assert subseq_with_product_smaller_than([1, 2, 3, 4, 5], 3) == 1\n    assert subseq_with_product_smaller_than([1, 2, 3, 4, 5], 2) == 2\n    assert subseq_with_product_smaller_than([1, 2, 3, 4, 5], 5) == 4\n    assert subseq_with_product_smaller_than([1, 2, 3, 4, 5], 1) == 1\n    assert subseq_with_product_smaller_than([1, 2, 3, 4, 5], 6) == 3"
    },
    {
      "rank": 11,
      "score": 8.444444444444445,
      "candidate": "class Solution(object):\n    def numSubsequences(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"\n        if not nums:\n            return 0\n        count = 0\n        for i in range(len(nums)):\n            for j in range(i+1, len(nums)):\n                if nums[i] * nums[j] <= k:\n                    count += 1\n        return count\n\na = Solution()\nprint(a.numSubsequences([1,3,2,2], 2))"
    },
    {
      "rank": 12,
      "score": 8.444444444444445,
      "candidate": "def count_subsequences(nums, k):\n    count = 0\n    for i in range(len(nums)):\n        if nums[i] >= k:\n            count += 1\n    return count\n\n\nif __name__ == \"__main__\":\n    print(count_subsequences([1, 2, 3, 4, 5], 4))\n    print(count_subsequences([1, 2, 3, 4, 5, 6], 4))\n    print(count_subsequences([1, 2, 3, 4, 5, 6], 2))"
    },
    {
      "rank": 13,
      "score": 8.444444444444445,
      "candidate": "def find_subsequences(arr, k):\n\tn = len(arr)\n\tdp = [[0 for _ in range(k+1)] for _ in range(n+1)]\n\tfor i in range(1, n+1):\n\t\tfor j in range(1, k+1):\n\t\t\tif arr[i-1] >= j:\n\t\t\t\tdp[i][j] = dp[i-1][j]\n\t\t\telse:\n\t\t\t\tdp[i][j] = dp[i-1][j-arr[i-1]] + 1\n\treturn dp[n][k]"
    },
    {
      "rank": 14,
      "score": 8.444444444444445,
      "candidate": "def subsequences(k, arr):\n    n = len(arr)\n    dp = [[0] * (k + 1) for _ in range(n + 1)]\n    dp[0][0] = 1\n    for i in range(1, n + 1):\n        for j in range(1, k + 1):\n            if i <= j:\n                dp[i][j] = dp[i - 1][j] + dp[i - 1][j - arr[i - 1]]\n            else:\n                dp[i][j] = dp[i - 1][j]\n    return dp[n][k]\n\n\nif __name__ == '__main__':\n    print(subsequences(5, [1, 2, 3, 4, 5, 6]))"
    },
    {
      "rank": 15,
      "score": 8.444444444444445,
      "candidate": "def num_subsequences(arr, k):\n    n = len(arr)\n    dp = [[0 for _ in range(k+1)] for _ in range(n+1)]\n    dp[0][0] = 1\n\n    for i in range(1, n+1):\n        for j in range(1, k+1):\n            if arr[i-1] <= j:\n                dp[i][j] += dp[i-1][j]\n            else:\n                dp[i][j] = dp[i-1][j]\n\n    return dp[n][k]"
    },
    {
      "rank": 16,
      "score": 8.444444444444445,
      "candidate": "class Solution(object):\n    def numSubsequences(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"\n        res = 0\n        n = len(nums)\n        for i in range(n):\n            for j in range(i+1, n+1):\n                res += (nums[i]*nums[j] > k)\n        return res"
    },
    {
      "rank": 17,
      "score": 8.444444444444445,
      "candidate": "def subsequences(k, nums):\n    # write your code here\n    prod_dict = {}\n    for i in range(len(nums)):\n        prod_dict[nums[i]] = prod_dict.get(nums[i], 0) + 1\n    res = 0\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] * nums[j] < k:\n                res += prod_dict[nums[i]] - prod_dict[nums[j]]\n    return res\n\nprint(subsequences(2, [2, 3, 4, 5]))\nprint(subsequences(3, [2, 3, 4, 5]))\nprint(subsequences(2, [1, 2, 3, 4, 5]))"
    },
    {
      "rank": 18,
      "score": 8.444444444444445,
      "candidate": "def sub_seq_k_prod(arr, k):\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] * arr[j] < k:\n                count += 1\n    return count\n\n\ndef main():\n    print(sub_seq_k_prod([3, 2, 1], 2))\n    print(sub_seq_k_prod([1, 2, 3, 4, 5], 3))\n    print(sub_seq_k_prod([1, 2, 3, 4, 5], 5))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 19,
      "score": 8.444444444444445,
      "candidate": "def count_smaller(arr, k):\n    count = 0\n    total = 1\n    for i in range(len(arr)):\n        total *= arr[i]\n        while total >= k:\n            total /= arr[i]\n            count += 1\n    return count\n\n\nif __name__ == \"__main__\":\n    assert count_smaller([1, 2, 3, 4, 5], 3) == 2\n    assert count_smaller([1, 2, 3, 4, 5], 4) == 1\n    assert count_smaller([1, 2, 3, 4, 5], 1) == 1"
    },
    {
      "rank": 20,
      "score": 8.444444444444445,
      "candidate": "def number_of_subsequences(k, arr):\n    # TODO: Write your code here\n    n = len(arr)\n    count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if arr[i] * arr[j] <= k:\n                count += 1\n    return count\n\n\nprint(number_of_subsequences(4, [2, 3, 4, 5, 6, 7, 8]))\nprint(number_of_subsequences(5, [2, 3, 4, 5, 6, 7, 8]))\nprint(number_of_subsequences(4, [3, 2, 4, 5, 6, 7, 8]))\nprint(number_of_subsequences(6, [3, 2, 4, 5, 6, 7, 8]))"
    },
    {
      "rank": 21,
      "score": 8.444444444444445,
      "candidate": "def subsequence_product_smaller_than_k(array, k):\n    if not array:\n        return 0\n\n    dp = [0] * (len(array) + 1)\n    dp[0] = 1\n    for i in range(1, len(array) + 1):\n        for j in range(len(array) - i + 1):\n            if array[j] > k:\n                break\n            dp[i] += dp[j]\n\n    return dp[len(array)]\n\n\nif __name__ == '__main__':\n    print(subsequence_product_smaller_than_k([3, 4, 5, 2, 1], 2))\n    print(subsequence_product_smaller_than_k([3, 4, 5, 2, 1], 0))\n    print(subsequence_product_smaller_than_k([3, 4, 5, 2, 1], 5))\n    print(subsequence_product_smaller_than_k([3, 4, 5, 2, 1], 10))"
    },
    {
      "rank": 22,
      "score": 8.444444444444445,
      "candidate": "def count_subsequences(nums, k):\n    result = 0\n    count = 0\n    for i in range(len(nums)):\n        for j in range(i + 1, len(nums)):\n            if nums[i] * nums[j] <= k:\n                count += 1\n                result += count\n    return result\n\n\nif __name__ == \"__main__\":\n    print(count_subsequences([3, 3, 3, 3], 3))\n    print(count_subsequences([3, 2, 3, 2, 2, 3, 2, 3], 3))"
    },
    {
      "rank": 23,
      "score": 8.444444444444445,
      "candidate": "def num_subsequences_smaller_than_k(arr, k):\n    product = 1\n    n = len(arr)\n    count = 0\n    for i in range(n):\n        product *= arr[i]\n        if product < k:\n            count += 1\n    return count\n\n\nif __name__ == \"__main__\":\n    print(num_subsequences_smaller_than_k([2, 2, 3, 3, 3], 3))\n    print(num_subsequences_smaller_than_k([2, 2, 3, 3, 3], 3))\n    print(num_subsequences_smaller_than_k([2, 2, 3, 3, 3], 2))"
    },
    {
      "rank": 24,
      "score": 8.444444444444445,
      "candidate": "def count_subsequences(array, k):\n    # Write your code here\n    n = len(array)\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            product = 1\n            for k_index in range(i, j):\n                product *= array[k_index]\n            if product <= k:\n                count += 1\n    return count"
    },
    {
      "rank": 25,
      "score": 8.444444444444445,
      "candidate": "def count_subseq(arr, k):\n    count = 0\n\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] * arr[j] < k:\n                count += 1\n\n    return count\n\n\nprint(count_subseq([2, 3, 4, 5], 6))"
    },
    {
      "rank": 26,
      "score": 3.926139092254469,
      "candidate": "def subsequence_product_smaller_than_k(array, k):\n    result = 0\n    total = 1\n    for i in array:\n        total *= i\n        if total < k:\n            result += 1\n    return result\n\n\narray = [2, 4, 6, 8, 10, 12]\nk = 12\nprint(subsequence_product_smaller_than_k(array, k))"
    },
    {
      "rank": 27,
      "score": 3.7896064077536957,
      "candidate": "class Solution:\n    def numSubsequences(self, arr, k):\n        \"\"\"\n        :type arr: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"\n        res = 0\n        product = 1\n        for i in arr:\n            product *= i\n            res += product // k\n        return res"
    },
    {
      "rank": 28,
      "score": 3.782321827907003,
      "candidate": "def num_subsequences(array, k):\n    count = 0\n    for i in range(len(array)):\n        for j in range(i + 1, len(array)):\n            if array[i] * array[j] < k:\n                count += 1\n    return count\n\n\nif __name__ == '__main__':\n    array = [1, 2, 3, 4, 5]\n    k = 5\n    print(num_subsequences(array, k))\n\n\n\"\"\"\nTime Complexity = O(N)\nSpace Complexity = O(N)\n\nInput\n\n1 2 3 4 5\n\nk = 5\n\nOutput\n\n3\n\"\"\""
    },
    {
      "rank": 29,
      "score": 3.7690182832329846,
      "candidate": "def number_of_subsequences_smaller_than_k(array, k):\n    if len(array) == 0:\n        return 0\n    count = 0\n    for i in range(len(array)):\n        for j in range(len(array)):\n            if i == 0 or j == 0:\n                if array[i] * array[j] < k:\n                    count += 1\n            else:\n                if array[i] * array[j] < k:\n                    count += 1\n                    break\n    return count\n\n\nif __name__ == \"__main__\":\n    assert number_of_subsequences_smaller_than_k([1, 2, 3, 4, 5], 2) == 1\n    assert number_of_subsequences_smaller_than_k([1, 2, 3, 4, 5], 3) == 2\n    assert number_of_subsequences_smaller_than_k([1, 2, 3, 4, 5], 4) == 1\n    assert number_of_subsequences_smaller_than_k([1, 2, 3, 4, 5], 5) == 1\n    assert number_of_subsequences_smaller_than_k([1, 2, 3, 4, 5], 6) == 0"
    },
    {
      "rank": 30,
      "score": 3.761514928204013,
      "candidate": "class Solution:\n    def numSubseq(self, k, nums):\n        \"\"\"\n        :type k: int\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        if len(nums) == 0:\n            return 0\n        dp = [0 for _ in range(len(nums)+1)]\n        dp[0] = 1\n        for i in range(1, len(nums)+1):\n            dp[i] = dp[i-1] * nums[i-1]\n        for i in range(1, len(nums)+1):\n            for j in range(i-1, -1, -1):\n                if nums[j] > k:\n                    dp[i] += dp[j]\n        return dp[len(nums)]\n\n\nif __name__ == \"__main__\":\n    assert Solution().numSubseq(4, [2, 3, 4, 5]) == 1"
    },
    {
      "rank": 31,
      "score": 3.732824384460777,
      "candidate": "class Solution:\n    def numSubsequences(self, nums, k):\n        if not nums:\n            return 0\n\n        n = len(nums)\n        dp = [0 for _ in range(n+1)]\n        dp[0] = 1\n\n        for i in range(1, n+1):\n            for j in range(1, i):\n                if nums[i-1] > nums[j-1]:\n                    dp[i] += dp[j-1]\n\n        return dp[n] - k"
    },
    {
      "rank": 32,
      "score": 3.6781200142854114,
      "candidate": "def subsequences(arr, k):\n    n = len(arr)\n    dp = [[0 for _ in range(k + 1)] for _ in range(n + 1)]\n    dp[0][0] = 1\n    for i in range(1, n + 1):\n        for j in range(1, k + 1):\n            if arr[i - 1] <= j:\n                dp[i][j] = dp[i - 1][j] + dp[i - 1][j - arr[i - 1]]\n            else:\n                dp[i][j] = dp[i - 1][j]\n\n    return dp[n][k]\n\n\nif __name__ == \"__main__\":\n    assert subsequences([1, 3, 5], 3) == 1\n    assert subsequences([1, 2, 2], 2) == 1\n    assert subsequences([3, 3], 3) == 1\n    assert subsequences([3, 1], 2) == 2"
    },
    {
      "rank": 33,
      "score": 3.5285611131094576,
      "candidate": "def num_subsequences(arr, k):\n    if len(arr) == 0:\n        return 0\n    if len(arr) == 1:\n        return 1\n    dp = [0] * (len(arr) + 1)\n    dp[0] = 1\n    dp[1] = 1\n    for i in range(2, len(arr) + 1):\n        dp[i] = dp[i - 1] + (arr[i - 1] * dp[i - 2])\n\n    return dp[len(arr)] - k\n\n\nprint(num_subsequences([1, 2, 3, 4, 5], 2))\nprint(num_subsequences([1, 2, 3, 4, 5], 3))\nprint(num_subsequences([1, 2, 3, 4, 5], 4))\nprint(num_subsequences([1, 2, 3, 4, 5], 5))"
    },
    {
      "rank": 34,
      "score": 3.5154997612479755,
      "candidate": "class Solution:\n    def numSubsequences(self, nums: List[int], k: int) -> int:\n        if len(nums) == 0:\n            return 0\n        res, count = 0, 0\n        for i in range(len(nums)):\n            for j in range(i, len(nums)):\n                if nums[i] * nums[j] < k:\n                    res += 1\n                    count += 1\n        return res, count"
    },
    {
      "rank": 35,
      "score": 3.501766448946012,
      "candidate": "class Solution(object):\n    def numSubsequences(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"\n        n = len(nums)\n        dp = [0 for _ in range(n+1)]\n        dp[0] = 1\n        for i in range(1,n+1):\n            for j in range(i):\n                if nums[j] > nums[i-1]:\n                    dp[i] += dp[j]\n        return dp[-1]"
    },
    {
      "rank": 36,
      "score": 3.4877725635611796,
      "candidate": "class Solution:\n    def numSubsequences(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"\n        if not nums:\n            return 0\n\n        dp = [0] * (len(nums) + 1)\n        dp[0] = 1\n        dp[1] = 1\n\n        for i in range(2, len(nums) + 1):\n            dp[i] = dp[i - 1] * nums[i - 2]\n\n        for i in range(2, len(nums) + 1):\n            for j in range(1, i):\n                dp[i] += dp[j - 1]\n\n        return dp[k]"
    },
    {
      "rank": 37,
      "score": 3.4656400595580994,
      "candidate": "class Solution:\n    def numSubsequences(self, nums: List[int], k: int) -> int:\n        n = len(nums)\n        dp = [[0 for i in range(k + 1)] for j in range(n + 1)]\n\n        for i in range(1, n + 1):\n            dp[i][0] = dp[i - 1][0] + 1\n\n        for i in range(1, n + 1):\n            for j in range(1, k + 1):\n                if nums[i - 1] < j:\n                    dp[i][j] = dp[i - 1][j]\n                else:\n                    dp[i][j] = dp[i - 1][j] + dp[i - 1][j - nums[i - 1]]\n        return dp[-1][-1]\n\n\nif __name__ == \"__main__\":\n    assert Solution().numSubsequences([1, 2, 3, 4, 5], 3) == 2\n    assert Solution().numSubsequences([3, 2, 3, 4], 4) == 1\n    assert Solution().numSubsequences([2, 2, 2, 2], 2) == 0\n    assert Solution().numSubsequences([1, 2, 3, 4], 3) == 1\n    assert Solution().numSubsequences([1, 2, 3, 4], 2) == 0\n    assert Solution().numSubsequences([1, 2, 3, 4], 1) == 0"
    },
    {
      "rank": 38,
      "score": 3.4112724560515946,
      "candidate": "class Solution(object):\n    def numSubseq(self, k, arr):\n        \"\"\"\n        :type k: int\n        :type arr: List[int]\n        :rtype: int\n        \"\"\"\n        dp = [0] * (k + 1)\n        dp[0] = 1\n\n        for i in range(1, len(arr)):\n            for j in range(0, k + 1):\n                if arr[i - 1] >= j:\n                    dp[j] += dp[j - arr[i - 1]]\n\n        return dp[k]\n\n\narr = [2, 4, 3, 6, 8, 1, 5]\nk = 8\n\ns = Solution()\nprint(s.numSubseq(k, arr))"
    },
    {
      "rank": 39,
      "score": 3.406262911197099,
      "candidate": "def numSubsequences(array, k):\n    n = len(array)\n    if n < 2:\n        return 0\n    memo = [0 for _ in range(n)]\n    memo[0] = 1\n    memo[1] = 1\n    for i in range(2, n):\n        memo[i] = memo[i - 1] * array[i - 2]\n    result = 0\n    for i in range(2, n):\n        for j in range(i - 2, -1, -1):\n            if array[j] >= k:\n                result += memo[i]\n    return result\n\n\nif __name__ == '__main__':\n    print(numSubsequences([4, 6, 8], 4))\n    print(numSubsequences([5, 2, 1, 3, 7], 5))\n    print(numSubsequences([2, 1, 2, 3, 5, 4], 2))\n    print(numSubsequences([2, 1, 2, 3, 5, 4, 6], 2))\n    print(numSubsequences([2, 1, 2, 3, 5, 4, 6, 7], 2))\n    print(numSubsequences([2, 1, 2, 3, 5, 4, 6, 7], 3))\n    print(numSubsequences([2, 1, 2, 3, 5, 4, 6, 7], 4))\n    print(numSubsequences([2, 1, 2, 3, 5, 4, 6, 7], 5))\n    print(numSubsequences([2, 1, 2, 3, 5, 4, 6, 7], 6))\n    print(numSubsequences([2, 1, 2, 3, 5, 4, 6, 7], 7))"
    },
    {
      "rank": 40,
      "score": 3.3837173645764542,
      "candidate": "def count_subsequences(arr, k):\n    # Write your code here\n    if len(arr) == 1:\n        return 1\n    dp = [0 for i in range(len(arr))]\n    dp[0] = 1\n    dp[1] = 1\n    for i in range(2, len(arr)):\n        dp[i] = dp[i - 1] * arr[i - 1]\n    for i in range(2, len(arr)):\n        dp[i] = dp[i - 1] * arr[i - 2]\n    for i in range(len(arr)):\n        dp[i] += dp[i - 1] * arr[i]\n    return dp[len(arr) - 1]\n\n\nif __name__ == \"__main__\":\n    print(count_subsequences([1, 2, 3], 3))\n    print(count_subsequences([1, 2, 3, 4], 3))\n    print(count_subsequences([1, 2, 3, 4, 5], 3))"
    },
    {
      "rank": 41,
      "score": 3.3692332899977053,
      "candidate": "class Solution(object):\n    def numSubseq(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"\n        if len(nums) == 0:\n            return 0\n        if len(nums) == 1:\n            return 1\n        res = 0\n        for i in range(len(nums)):\n            for j in range(len(nums)):\n                if i == j:\n                    res += (nums[i] * nums[j])\n                else:\n                    res += (nums[i] * nums[j]) - (nums[i] * nums[j - 1])\n        return res\n\n\nif __name__ == '__main__':\n    sol = Solution()\n    nums = [1, 2, 3, 4, 5]\n    k = 1\n    print(sol.numSubseq(nums, k))"
    },
    {
      "rank": 42,
      "score": 3.3238442690503462,
      "candidate": "class Solution:\n    def numSubseq(self, k: int, arr: List[int]) -> int:\n        n = len(arr)\n        dp = [0] * (k + 1)\n        dp[0] = 1\n        for i in range(1, k + 1):\n            for j in range(n):\n                if arr[j] <= i:\n                    dp[i] += dp[i - arr[j]]\n        return dp[k]\n\n\nif __name__ == \"__main__\":\n    s = Solution()\n    arr = [1, 2, 3, 4, 5]\n    k = 3\n    print(s.numSubseq(k, arr))"
    },
    {
      "rank": 43,
      "score": 3.305838144420434,
      "candidate": "def find_subsequences(k, arr):\n    if not arr:\n        return 0\n\n    n = len(arr)\n    dp = [0] * (n + 1)\n    dp[0] = 1\n    for i in range(1, n + 1):\n        for j in range(i):\n            if arr[j] >= arr[j - 1]:\n                dp[i] += dp[j]\n\n    return dp[n]\n\n\nprint(find_subsequences(3, [1, 2, 3, 4, 5]))\nprint(find_subsequences(4, [1, 2, 3, 4, 5]))\nprint(find_subsequences(5, [1, 2, 3, 4, 5]))"
    },
    {
      "rank": 44,
      "score": 3.2712800217929825,
      "candidate": "def find_number_of_subsequences(arr, k):\n    n = len(arr)\n    dp = [0] * (k + 1)\n    dp[0] = 1\n    for i in range(1, k + 1):\n        for j in range(n):\n            if arr[j] >= i:\n                dp[i] += dp[i - arr[j]]\n    return dp[k]\n\n\nprint(find_number_of_subsequences([1, 2, 3, 4], 3))"
    },
    {
      "rank": 45,
      "score": 3.2483570765056164,
      "candidate": "class Solution:\n    def numSubseqKSub(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"\n        # If the array is empty return 0\n        if len(nums) == 0:\n            return 0\n\n        # If the array is non-empty\n        if len(nums) == 1:\n            return 1\n\n        # If the product of the two arrays is less than k\n        if nums[0] * nums[1] < k:\n            return 0\n\n        # If the product of the two arrays is greater than k\n        if nums[0] * nums[1] > k:\n            return 1\n\n        # Find the number of subsequences having product smaller than k\n        count = 0\n        for i in range(len(nums)):\n            for j in range(len(nums)):\n                if i == j:\n                    continue\n                if nums[i] * nums[j] < k:\n                    count += 1\n\n        return count\n\n\ns = Solution()\nprint(s.numSubseqKSub([1, 2, 3, 4], 3))"
    },
    {
      "rank": 46,
      "score": 3.1878490091728358,
      "candidate": "def num_subsequences(arr, k):\n    # Write your code here\n    n = len(arr)\n    dp = [[0 for _ in range(k+1)] for _ in range(n+1)]\n    for i in range(n+1):\n        for j in range(k+1):\n            dp[i][j] = 0\n\n    for i in range(1, n+1):\n        for j in range(1, k+1):\n            if arr[i-1] < j:\n                dp[i][j] = dp[i-1][j]\n            else:\n                dp[i][j] = dp[i-1][j] + dp[i-1][j-arr[i-1]]\n    return dp[n][k]\n\n\nif __name__ == \"__main__\":\n    print(num_subsequences([2, 3, 4, 1], 2))"
    },
    {
      "rank": 47,
      "score": 3.180818012523817,
      "candidate": "def find_subsequence_smaller_than_k(arr, k):\n    # Write your code here\n    ans = 0\n    arr.sort()\n    for i in range(len(arr)):\n        ans += (k * (i + 1))\n    return ans\n\n\nif __name__ == '__main__':\n    assert find_subsequence_smaller_than_k([1, 2, 3, 4], 3) == 1\n    assert find_subsequence_smaller_than_k([3, 2, 1, 4], 2) == 1\n    assert find_subsequence_smaller_than_k([1, 2, 3, 4], 5) == 0\n    assert find_subsequence_smaller_than_k([1, 2, 3, 4], 6) == 0"
    },
    {
      "rank": 48,
      "score": 3.180697802754207,
      "candidate": "def sub_seq_product(arr, k):\n    arr_len = len(arr)\n    if arr_len == 0:\n        return 0\n    if arr_len == 1:\n        return 1\n\n    dp = [[0 for _ in range(k+1)] for _ in range(arr_len+1)]\n    dp[0][0] = 1\n    dp[0][1] = 1\n\n    for i in range(1, arr_len+1):\n        for j in range(1, k+1):\n            if arr[i-1] <= j:\n                dp[i][j] += dp[i-1][j]\n\n    return dp[arr_len][k]\n\n\nif __name__ == \"__main__\":\n    arr = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    k = 7\n    print(sub_seq_product(arr, k))"
    },
    {
      "rank": 49,
      "score": 3.1718091447842305,
      "candidate": "def subseq(k, arr):\n    dp = [[0] * (k + 1) for _ in range(len(arr) + 1)]\n    for i in range(1, len(arr) + 1):\n        for j in range(1, k + 1):\n            if arr[i - 1] <= j:\n                dp[i][j] = dp[i - 1][j] + dp[i - 1][j - arr[i - 1]]\n            else:\n                dp[i][j] = dp[i - 1][j]\n    return dp[len(arr)][k]\n\n\nif __name__ == \"__main__\":\n    arr = [4, 3, 2, 1]\n    k = 2\n    print(subseq(k, arr))"
    },
    {
      "rank": 50,
      "score": 3.165631715701782,
      "candidate": "def subsequences(arr, k):\n    n = len(arr)\n    dp = [0] * (n + 1)\n    dp[0] = 1\n\n    for i in range(1, n + 1):\n        dp[i] = 0\n\n    for i in range(1, n + 1):\n        for j in range(1, k + 1):\n            if arr[i - 1] <= j:\n                dp[i] += dp[i - 1]\n\n    return dp[n]\n\n\nif __name__ == \"__main__\":\n    arr = [2, 3, 2, 4, 6]\n    k = 6\n    print(subsequences(arr, k))"
    },
    {
      "rank": 51,
      "score": 3.1620419846973977,
      "candidate": "def numSubsequences(arr, k):\n    if len(arr) == 0:\n        return 0\n    if len(arr) == 1:\n        return 1\n    if k <= 0:\n        return 0\n    dp = [0 for _ in range(len(arr))]\n    dp[0] = 1\n    for i in range(1, len(arr)):\n        dp[i] = dp[i-1] * arr[i-1]\n    dp[1] = 1\n    for i in range(len(arr)-2, -1, -1):\n        dp[i] += dp[i+1] * arr[i+1]\n    return dp[len(arr)-1]\n\n\nif __name__ == \"__main__\":\n    assert numSubsequences([1, 2, 3, 4, 5], 2) == 2\n    assert numSubsequences([1, 2, 3, 4, 5], 3) == 2\n    assert numSubsequences([1, 2, 3, 4, 5], 1) == 0\n    assert numSubsequences([1, 2, 3, 4, 5], 4) == 2\n    assert numSubsequences([1, 2, 3, 4, 5], 5) == 2\n    assert numSubsequences([1, 2, 3, 4, 5], 6) == 2\n    assert numSubsequences([1, 2, 3, 4, 5], 7) == 2\n    assert numSubsequences([1, 2, 3, 4, 5], 8) == 2\n    assert numSubsequences([1, 2, 3, 4, 5], 9) == 2\n    assert numSubsequences([1, 2, 3, 4, 5], 10) == 2\n    assert numSubsequences([1, 2, 3, 4, 5], 11) == 2\n    assert numSubsequences([1, 2, 3, 4, 5], 12) == 2\n    assert numSubsequences([1, 2, 3, 4, 5], 13) == 2\n    assert numSubsequences([1, 2, 3, 4, 5], 14) == 2\n    assert numSubsequences([1, 2, 3, 4, 5], 15) == 2\n    assert numSubsequences([1, 2, 3, 4, 5], 16"
    },
    {
      "rank": 52,
      "score": 3.157123666297637,
      "candidate": "def num_subsequences_with_product_smaller_than(arr, k):\n    result = 0\n    n = len(arr)\n    product = 1\n    for i in range(n):\n        product *= arr[i]\n        if product < k:\n            result += 1\n    return result\n\n\ndef num_subsequences_with_product_smaller_than_2(arr, k):\n    result = 0\n    n = len(arr)\n    product = 1\n    for i in range(n):\n        product *= arr[i]\n        if product < k:\n            result += 1\n            if product < k:\n                result += 1\n    return result\n\n\ndef num_subsequences_with_product_smaller_than_3(arr, k):\n    result = 0\n    n = len(arr)\n    product = 1\n    for i in range(n):\n        product *= arr[i]\n        if product < k:\n            result += 1\n            if product < k:\n                result += 1\n                if product < k:\n                    result += 1\n                    if product < k:\n                        result += 1\n    return result\n\n\nif __name__ == \"__main__\":\n    print(num_subsequences_with_product_smaller_than([1, 2, 3], 2))\n    print(num_subsequences_with_product_smaller_than([1, 2, 3], 1))\n    print(num_subsequences_with_product_smaller_than([1, 2, 3], 5))\n    print(num_subsequences_with_product_smaller_than([1, 2, 3], 7))\n    print(num_subsequences_with_product_smaller_than([1, 2, 3], 11))\n    print(num_subsequences_with_product_smaller_than([1, 2, 3], 15))\n    print(num_subsequences_with_product_smaller_than([1, 2, 3], 17))\n    print(num_subsequences_with_product_smaller_than([1, 2, 3], 18))\n    print(num_subsequences_with_product_smaller_than([1, 2"
    },
    {
      "rank": 53,
      "score": 3.1209811357830173,
      "candidate": "def count_subsequences(arr, k):\n    n = len(arr)\n    count = 0\n    for i in range(n):\n        for j in range(i, n):\n            if arr[i] * arr[j] < k:\n                count += 1\n    return count\n\n\ndef main():\n    print(count_subsequences([2, 3, 4, 5], 6))\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 54,
      "score": 3.104431797502378,
      "candidate": "def numSubsequences(array, k):\n    n = len(array)\n    count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if (array[i] * array[j]) < k:\n                count += 1\n    return count\n\n\narray = [2, 5, -10, -2, 3, 10]\nk = -2\nprint(numSubsequences(array, k))"
    },
    {
      "rank": 55,
      "score": 3.0984306179345618,
      "candidate": "from typing import List\n\n\ndef count_subsequences(nums: List[int], k: int) -> int:\n    if not nums:\n        return 0\n\n    n = len(nums)\n    dp = [1 for i in range(n+1)]\n    dp[0] = 0\n    dp[1] = 1\n\n    for i in range(2, n+1):\n        for j in range(1, i):\n            if nums[j] >= nums[i-1]:\n                dp[i] += dp[j-1]\n\n    return dp[n]\n\n\nif __name__ == '__main__':\n    nums = [3, 2, 1]\n    k = 2\n    print(count_subsequences(nums, k))"
    },
    {
      "rank": 56,
      "score": 3.085684140594985,
      "candidate": "def num_subsequences_smaller_than_k(arr, k):\n    n = len(arr)\n    dp = [[0 for _ in range(k+1)] for _ in range(n+1)]\n    dp[0][0] = 1\n    for i in range(1, n+1):\n        dp[i][0] = 1\n        for j in range(1, k+1):\n            if arr[i-1] <= j:\n                dp[i][j] += dp[i-1][j]\n    return dp[n][k]\n\n\nif __name__ == \"__main__\":\n    arr = [1, 2, 3, 4, 5]\n    k = 2\n    print(num_subsequences_smaller_than_k(arr, k))"
    },
    {
      "rank": 57,
      "score": 3.055461294854933,
      "candidate": "from typing import List\n\n\ndef count_smaller_product(arr: List[int], k: int) -> int:\n    n = len(arr)\n    if n == 0:\n        return 0\n\n    product_dict = {}\n    for i in range(n):\n        product_dict[arr[i]] = product_dict.get(arr[i], 0) + 1\n\n    count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if arr[i] * arr[j] < k:\n                count += product_dict[arr[i]]\n\n    return count\n\n\nif __name__ == \"__main__\":\n    assert count_smaller_product([1, 2, 3, 4], 2) == 2\n    assert count_smaller_product([1, 2, 3, 4], 1) == 1\n    assert count_smaller_product([1, 2, 3, 4], 2) == 0\n    assert count_smaller_product([1, 2, 3, 4], 3) == 1"
    },
    {
      "rank": 58,
      "score": 3.033764102343962,
      "candidate": "def sub_sequences(arr, k):\n    n = len(arr)\n    dp = [0] * (k + 1)\n    dp[0] = 1\n    for i in range(1, k + 1):\n        for j in range(n):\n            if arr[j] >= i:\n                dp[i] += dp[i - arr[j]]\n    return dp[k]\n\n\nprint(sub_sequences([1, 2, 3, 4, 5], 2))"
    },
    {
      "rank": 59,
      "score": 2.993251387631033,
      "candidate": "class Solution:\n    def numSubsequences(self, nums: List[int], k: int) -> int:\n        dp = [0] * (len(nums) + 1)\n        dp[0] = 1\n        for i in range(1, len(nums) + 1):\n            dp[i] = 0\n            for j in range(i):\n                if nums[j] <= nums[i - 1]:\n                    dp[i] += dp[j]\n        return dp[-1]"
    },
    {
      "rank": 60,
      "score": 2.982086980445024,
      "candidate": "def subsequences_smaller_than_k(arr, k):\n    # write your code here\n    n = len(arr)\n    dp = [0] * (k + 1)\n    dp[0] = 1\n    for i in range(1, k + 1):\n        for j in range(n):\n            if arr[j] >= i:\n                dp[i] += dp[i - arr[j]]\n    return dp[k]\n\n\nprint(subsequences_smaller_than_k([2, 3, 5, 6, 7], 5))\nprint(subsequences_smaller_than_k([2, 3, 5, 6, 7], 4))\nprint(subsequences_smaller_than_k([2, 3, 5, 6, 7], 1))"
    },
    {
      "rank": 61,
      "score": 2.963994939209833,
      "candidate": "def subsequences_with_product_smaller_than_k(arr, k):\n    n = len(arr)\n    count = 0\n    for i in range(n):\n        for j in range(i, n):\n            if arr[i] * arr[j] < k:\n                count += 1\n    return count\n\n\nprint(subsequences_with_product_smaller_than_k([1, 2, 3, 4], 3))"
    },
    {
      "rank": 62,
      "score": 2.94217585880588,
      "candidate": "def find_subsequences(arr, k):\n    dp = [0] * (len(arr) + 1)\n    dp[0] = 1\n\n    for i in range(1, len(arr) + 1):\n        for j in range(i):\n            if arr[j] > arr[j - 1]:\n                dp[i] += dp[j]\n\n    return dp[-1]\n\n\nif __name__ == \"__main__\":\n    print(find_subsequences([1, 2, 3, 4, 5], 3))"
    },
    {
      "rank": 63,
      "score": 2.930867849414408,
      "candidate": "def numSubsequences(arr, k):\n    ans = 0\n    n = len(arr)\n    dp = [0] * (n+1)\n    dp[0] = 1\n    for i in range(1,n+1):\n        for j in range(1,i+1):\n            dp[i] += dp[j-1]\n            if arr[i-j] < k:\n                dp[i] += dp[i-j-1]\n    return dp[n]\n\narr = [1,2,3,4]\nk = 6\nprint(numSubsequences(arr, k))"
    },
    {
      "rank": 64,
      "score": 2.9071705116680913,
      "candidate": "def subsequences(arr, k):\n    n = len(arr)\n    dp = [0] * (n + 1)\n    dp[0] = 1\n\n    for i in range(1, n + 1):\n        for j in range(i):\n            if arr[j] <= arr[i - 1]:\n                dp[i] += dp[j]\n\n    return dp[n] - dp[n - 1]\n\n\nif __name__ == '__main__':\n    assert subsequences([2, 3, 4, 5], 3) == 1\n    assert subsequences([2, 3, 4, 5], 7) == 0"
    },
    {
      "rank": 65,
      "score": 2.887111849756732,
      "candidate": "class Solution:\n    def numSubsequences(self, nums: List[int], k: int) -> int:\n        dp = [[0 for _ in range(len(nums))] for _ in range(len(nums))]\n        dp[0][0] = 1\n        for i in range(1, len(nums)):\n            for j in range(i):\n                if nums[i] > nums[j]:\n                    dp[i][j] = dp[i-1][j] + dp[i-1][j-nums[i]]\n                else:\n                    dp[i][j] = dp[i-1][j]\n        return dp[-1][-1]\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.numSubsequences([3, 5, 6, 2], 4))"
    },
    {
      "rank": 66,
      "score": 2.8829315215254097,
      "candidate": "def count_subsequences_smaller_than_k(array, k):\n    \"\"\"\n    :type array: List[int]\n    :type k: int\n    :rtype: int\n    \"\"\"\n\n    # find the maximum product for the given array\n    product = array[0]\n    for i in array:\n        product *= i\n\n    # count the number of subsequences\n    return count_subsequences(array, 0, product, k)\n\n\ndef count_subsequences(array, index, product, k):\n    \"\"\"\n    :type array: List[int]\n    :type index: int\n    :type product: int\n    :type k: int\n    :rtype: int\n    \"\"\"\n\n    # base case\n    if index == len(array):\n        return 1\n\n    # check if we have reached the end of the array\n    if index == len(array) - 1:\n        return 0\n\n    # check if we have reached the end of the array\n    if array[index + 1] >= k:\n        return count_subsequences(array, index + 1, product, k)\n\n    # check if we have reached the end of the array\n    if product < k:\n        return count_subsequences(array, index + 1, product * array[index + 1], k)\n\n    return count_subsequences(array, index + 1, product * array[index + 1], k) + count_subsequences(array, index + 1,\n                                                                                                       product * array[index + 1],\n                                                                                                       k)\n\n\nif __name__ == \"__main__\":\n    print(count_subsequences_smaller_than_k([3, 2, 5, 7, 4], 7))"
    },
    {
      "rank": 67,
      "score": 2.882923312638332,
      "candidate": "def count_subsequences_smaller_than_k(arr, k):\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i, len(arr)):\n            if arr[i] * arr[j] < k:\n                count += 1\n    return count\n\n\nprint(count_subsequences_smaller_than_k([-3, -2, -1, -5, 4, -7], 2))"
    },
    {
      "rank": 68,
      "score": 2.8541531251033616,
      "candidate": "class Solution:\n    def numSubsequences(self, nums: List[int], k: int) -> int:\n        n = len(nums)\n        if n == 0 or k == 0:\n            return 0\n        dp = [1] * (n + 1)\n        dp[0] = 0\n        for i in range(1, n + 1):\n            dp[i] = dp[i - 1]\n            for j in range(i):\n                if nums[j] < nums[i - 1]:\n                    dp[i] += dp[j]\n        return dp[-1]\n\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    nums = [3, 2, 3, 1, 3, 2, 3, 1, 2]\n    k = 3\n    print(sol.numSubsequences(nums, k))"
    },
    {
      "rank": 69,
      "score": 2.8494481522053556,
      "candidate": "def subsequences_smaller_than_k(nums, k):\n    # write your code here\n    # the answer is the number of subsequences having product smaller than k\n    # if the product is smaller than k, then it is the number of subsequences having product smaller than k\n    if len(nums) == 0:\n        return 0\n    # if the product is smaller than k, then it is the number of subsequences having product smaller than k\n    if nums[0] <= k:\n        return 1\n    # if the product is larger than k, then it is the number of subsequences having product smaller than k\n    else:\n        return subsequences_smaller_than_k(nums[1:], k) + subsequences_smaller_than_k(nums[:-1], k)\n\n\nif __name__ == \"__main__\":\n    print(subsequences_smaller_than_k([1, 2, 3, 4, 5, 6, 7], 6))\n    print(subsequences_smaller_than_k([1, 2, 3, 4, 5, 6, 7], 4))\n    print(subsequences_smaller_than_k([1, 2, 3, 4, 5, 6, 7], 1))\n    print(subsequences_smaller_than_k([1, 2, 3, 4, 5, 6, 7], 2))\n    print(subsequences_smaller_than_k([1, 2, 3, 4, 5, 6, 7], 0))"
    },
    {
      "rank": 70,
      "score": 2.8453938120743927,
      "candidate": "def num_subsequences(arr, k):\n    count = 0\n    if k <= 0:\n        return count\n\n    n = len(arr)\n    dp = [0 for _ in range(n + 1)]\n    dp[0] = 1\n    for i in range(1, n + 1):\n        for j in range(1, i + 1):\n            if arr[j - 1] < arr[i - 1]:\n                dp[i] += dp[j - 1]\n\n    for i in range(n):\n        if dp[i] >= k:\n            count += 1\n\n    return count\n\n\nprint(num_subsequences([1, 2, 3, 4, 5, 6], 4))\nprint(num_subsequences([1, 2, 3, 4, 5, 6], 7))\nprint(num_subsequences([1, 2, 3, 4, 5, 6], 0))\nprint(num_subsequences([1, 2, 3, 4, 5, 6], 0))"
    },
    {
      "rank": 71,
      "score": 2.8074588597918417,
      "candidate": "def num_subsequences(arr, k):\n    n = len(arr)\n    dp = [0] * (k+1)\n    dp[0] = 1\n    for i in range(n):\n        for j in range(i+1, n+1):\n            if arr[i] > arr[j]:\n                dp[j] += dp[j-arr[i]]\n    return dp[n]\n\nprint(num_subsequences([-2,-3,4,-1], 2))"
    },
    {
      "rank": 72,
      "score": 2.769680614520106,
      "candidate": "def subsequences(arr, k):\n    count = 0\n    for i in range(len(arr)):\n        if arr[i] >= k:\n            count += 1\n    return count\n\n\ndef subsequences_v2(arr, k):\n    count = 0\n    dp = [0] * (len(arr) + 1)\n    dp[0] = 1\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            if arr[i] < arr[j]:\n                count += dp[j] - dp[i]\n            dp[i + 1] = dp[j] + dp[i]\n    return count\n\n\nif __name__ == '__main__':\n    arr = [1, 2, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14]\n    k = 10\n    print(subsequences(arr, k))\n    print(subsequences_v2(arr, k))"
    },
    {
      "rank": 73,
      "score": 2.768291153593769,
      "candidate": "class Solution:\n    def numSubseq(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"\n        if not nums:\n            return 0\n        dp = [0 for _ in range(len(nums)+1)]\n        dp[0] = 1\n        for i in range(1, len(nums)+1):\n            for j in range(0, i):\n                if nums[j] > nums[i-1]:\n                    dp[i] += dp[j]\n        return dp[len(nums)]\n\n\n\n\ns = Solution()\nprint(s.numSubseq([1,2,3,4,5], 3))"
    },
    {
      "rank": 74,
      "score": 2.7671351232148718,
      "candidate": "def num_subsequences(arr, k):\n    n = len(arr)\n    if n == 0:\n        return 0\n\n    dp = [[0 for _ in range(k + 1)] for _ in range(n + 1)]\n\n    for i in range(n + 1):\n        dp[i][0] = 1\n\n    for i in range(1, n + 1):\n        for j in range(1, k + 1):\n            if j == arr[i - 1]:\n                dp[i][j] = dp[i - 1][j]\n            else:\n                dp[i][j] = dp[i - 1][j] + dp[i - 1][j - arr[i - 1]]\n\n    return dp[n][k]\n\n\nif __name__ == \"__main__\":\n    arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    k = 6\n    print(num_subsequences(arr, k))"
    },
    {
      "rank": 75,
      "score": 2.765262807032524,
      "candidate": "def sub_sequences(arr, k):\n    # Your code here\n    d = dict()\n    d[0] = 1\n    for i in arr:\n        if i in d.keys():\n            d[i] += d[i-1]\n        else:\n            d[i] = 1\n    n = len(arr)\n    dp = [0] * (n+1)\n    dp[0] = 1\n    for i in range(1, n+1):\n        for j in range(0, i):\n            if arr[j] < arr[i-1]:\n                dp[i] += dp[j]\n    return dp[n]\n\n\nif __name__ == \"__main__\":\n    print(sub_sequences([1,2,3,4,5,6], 5))"
    },
    {
      "rank": 76,
      "score": 2.760412881077355,
      "candidate": "def num_subsequences(arr, k):\n    # write your code here\n    n = len(arr)\n    dp = [0 for _ in range(n + 1)]\n    dp[0] = 1\n    for i in range(1, n + 1):\n        for j in range(i):\n            if arr[j] >= arr[j - 1]:\n                dp[i] += dp[j]\n    return dp[n]\n\n\nif __name__ == \"__main__\":\n    assert num_subsequences([2, 3, 6, 8], 7) == 2\n    assert num_subsequences([2, 3, 6, 8], 9) == 0"
    },
    {
      "rank": 77,
      "score": 2.7278086377374087,
      "candidate": "def count_subsequences(arr, k):\n    # write your code here\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] * arr[j] < k:\n                count += 1\n    return count\n\n\nif __name__ == '__main__':\n    print(count_subsequences([3, 1, 2, 3], 3))\n    print(count_subsequences([1, 2, 3, 4], 4))\n    print(count_subsequences([1, 2, 3, 4, 5], 5))\n    print(count_subsequences([-1, 0, 0, 0, -1], -1))\n    print(count_subsequences([1, 2, 3, 4, 5, 6, 7, 8], 5))\n    print(count_subsequences([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16], 8))\n    print(count_subsequences([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30], 4))\n    print(count_subsequences([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30], 5))\n    print(count_subsequences([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30], 6))\n    print(count_subsequences([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24,"
    },
    {
      "rank": 78,
      "score": 2.718856235379514,
      "candidate": "class Solution(object):\n    def numSubsequences(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"\n        if not nums:\n            return 0\n        dp = [0 for _ in range(len(nums)+1)]\n        dp[0] = 1\n        for i in range(1, len(nums)+1):\n            for j in range(i):\n                if nums[j] > nums[j-1]:\n                    dp[i] += dp[j]\n        return dp[-1]"
    },
    {
      "rank": 79,
      "score": 2.6996806550405976,
      "candidate": "class Solution(object):\n    def numSubsequences(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"\n        if k == 0:\n            return 0\n\n        if len(nums) == 0:\n            return 0\n\n        dp = [0 for i in range(len(nums)+1)]\n        dp[0] = 1\n\n        for i in range(len(nums)):\n            for j in range(i+1, len(nums)+1):\n                dp[j] += dp[j-i]\n                if nums[i]*nums[j] < k:\n                    break\n\n        return dp[len(nums)]\n\na = Solution()\nprint a.numSubsequences([1,2,3,4], 2)"
    },
    {
      "rank": 80,
      "score": 2.6991466938853015,
      "candidate": "def num_subsequences(arr, k):\n    count = 0\n    if k <= 0:\n        return 0\n    l = len(arr)\n    dp = [1 for _ in range(l+1)]\n    dp[0] = 0\n    for i in range(1, l+1):\n        for j in range(i):\n            if arr[j] <= arr[i-1]:\n                dp[i] += dp[j]\n    for i in range(l):\n        if arr[i] <= k:\n            count += dp[i]\n    return count\n\n\nif __name__ == \"__main__\":\n    print(num_subsequences([4, 3, 2, 1], 2))"
    },
    {
      "rank": 81,
      "score": 2.677440122697438,
      "candidate": "class Solution:\n    def numSubsequences(self, k: int, nums: list) -> int:\n        if len(nums) == 0:\n            return 0\n        dp = [0 for i in range(len(nums))]\n        dp[0] = 1\n        for i in range(1, len(nums)):\n            dp[i] = dp[i-1] * nums[i-1]\n        for i in range(len(nums)-1, -1, -1):\n            dp[i] = dp[i] * nums[i+1]\n        result = 0\n        for i in range(len(nums)):\n            if dp[i] >= k:\n                result += 1\n        return result\n\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.numSubsequences(5, [1, 2, 3, 4, 5]))"
    },
    {
      "rank": 82,
      "score": 2.6615389998470205,
      "candidate": "def count_subsequences(k, nums):\n    n = len(nums)\n    dp = [[0] * (k + 1) for _ in range(n + 1)]\n\n    for i in range(1, n + 1):\n        for j in range(1, k + 1):\n            if nums[i - 1] <= j:\n                dp[i][j] = dp[i - 1][j] + dp[i - 1][j - nums[i - 1]]\n            else:\n                dp[i][j] = dp[i - 1][j]\n\n    return dp[n][k]\n\n\nprint(count_subsequences(2, [1, 2, 3, 4, 5, 6]))\nprint(count_subsequences(2, [2, 2, 2, 2, 2, 2, 2, 2, 2, 2]))\nprint(count_subsequences(2, [2, 2, 2, 2, 2, 2, 2, 2, 2]))"
    },
    {
      "rank": 83,
      "score": 2.6400778958026456,
      "candidate": "class Solution:\n    def numSubsequences(self, nums: List[int], k: int) -> int:\n        if not nums:\n            return 0\n        dp = [0 for _ in range(len(nums))]\n        dp[0] = 1\n        for i in range(1, len(nums)):\n            dp[i] = dp[i-1] * nums[i-1]\n        dp[len(nums)-1] = 1\n        ans = 0\n        for i in range(len(nums)-2, -1, -1):\n            ans += dp[i]\n            if ans < k:\n                break\n        return ans\n\n\nif __name__ == '__main__':\n    sol = Solution()\n    assert sol.numSubsequences([2, 3, 4, 5], 2) == 3\n    assert sol.numSubsequences([2, 3, 4, 5], 5) == 2\n    assert sol.numSubsequences([2, 3, 4, 5], 7) == 0\n    assert sol.numSubsequences([2, 3, 4, 5], 8) == 0"
    },
    {
      "rank": 84,
      "score": 2.580391238388681,
      "candidate": "def count_subsequences(arr, k):\n    res = 0\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            res += arr[i] * arr[j]\n    return res\n\n\nif __name__ == \"__main__\":\n    arr = [4, 2, 3, 2]\n    k = 2\n    print(count_subsequences(arr, k))"
    },
    {
      "rank": 85,
      "score": 2.5459879622393946,
      "candidate": "def count_subsequences(arr, k):\n    count = 0\n    arr.sort()\n    for i in range(len(arr)-1):\n        for j in range(i+1, len(arr)):\n            if arr[i]*arr[j] < k:\n                count += 1\n    return count\n\n\nprint(count_subsequences([1, 3, 2, 4], 2))\nprint(count_subsequences([1, 3, 2, 4], 3))\nprint(count_subsequences([1, 3, 2, 4], 10))"
    },
    {
      "rank": 86,
      "score": 2.493584439832788,
      "candidate": "def count_subsequences(arr, k):\n    n = len(arr)\n    dp = [0] * (n + 1)\n    dp[0] = 1\n    for i in range(1, n + 1):\n        for j in range(1, i + 1):\n            dp[i] += dp[j - 1]\n\n    return dp[n]\n\n\nif __name__ == \"__main__\":\n    print(count_subsequences([-2, 3, -1, -4], 3))\n    print(count_subsequences([-2, 3, -1, -4], 4))\n    print(count_subsequences([-2, 3, -1, -4], 5))"
    },
    {
      "rank": 87,
      "score": 2.4711445355220496,
      "candidate": "def subsequences(arr, k):\n    # write your code here\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] * arr[j] < k:\n                count += 1\n    return count\n\nprint(subsequences([-1, 2, -1, 3, -1, 4], 2))"
    },
    {
      "rank": 88,
      "score": 2.446832512996986,
      "candidate": "def sub_sequences_smaller_than_k(arr, k):\n    n = len(arr)\n    dp = [[0] * (k + 1) for _ in range(n + 1)]\n    for i in range(n + 1):\n        for j in range(k + 1):\n            if i == 0 or j == 0:\n                dp[i][j] = 0\n            elif arr[i - 1] == j:\n                dp[i][j] = dp[i - 1][j]\n            else:\n                dp[i][j] = dp[i - 1][j] + dp[i][j - arr[i - 1]]\n    return dp[n][k]\n\n\nif __name__ == \"__main__\":\n    print(sub_sequences_smaller_than_k([1, 2, 3, 4, 5, 6, 7, 8, 9], 4))"
    },
    {
      "rank": 89,
      "score": 2.4245032112888487,
      "candidate": "class Solution(object):\n    def numSubseqProductSmallerThanK(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"\n        dp = [0] * (len(nums) + 1)\n        dp[0] = 1\n        for i in range(1, len(nums) + 1):\n            for j in range(i):\n                if nums[j] >= nums[j - 1]:\n                    dp[i] += dp[j]\n        return dp[len(nums)]\n\n\nif __name__ == \"__main__\":\n    s = Solution()\n    assert s.numSubseqProductSmallerThanK([1, 2, 3, 4], 3) == 2\n    assert s.numSubseqProductSmallerThanK([1, 2, 3, 4], 4) == 4\n    assert s.numSubseqProductSmallerThanK([1, 2, 3, 4], 2) == 2\n    assert s.numSubseqProductSmallerThanK([1, 2, 3, 4], 1) == 0\n    assert s.numSubseqProductSmallerThanK([1, 2, 3, 4], 0) == 0"
    },
    {
      "rank": 90,
      "score": 2.4018966879596646,
      "candidate": "def subseq(arr, k):\n    length = len(arr)\n    dp = [[0 for _ in range(k + 1)] for _ in range(length + 1)]\n    dp[0][0] = 1\n    for i in range(1, length + 1):\n        for j in range(1, k + 1):\n            if j == arr[i - 1]:\n                dp[i][j] = dp[i - 1][j]\n            else:\n                dp[i][j] = dp[i - 1][j - arr[i - 1]] + dp[i - 1][j]\n    return dp[length][k]\n\n\narr = [1, 2, 3, 4]\nk = 4\nprint(subseq(arr, k))"
    },
    {
      "rank": 91,
      "score": 2.389578175014489,
      "candidate": "class Solution(object):\n    def numSubsequences(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"\n        n = len(nums)\n        dp = [[0 for _ in range(k+1)] for _ in range(n+1)]\n        dp[0][0] = 1\n        for i in range(1, n+1):\n            for j in range(1, k+1):\n                if nums[i-1] <= j:\n                    dp[i][j] = dp[i-1][j] + dp[i-1][j-nums[i-1]]\n                else:\n                    dp[i][j] = dp[i-1][j]\n        return dp[n][k]\n\na = Solution()\nprint(a.numSubsequences([1, 2, 3, 4, 5], 3))"
    },
    {
      "rank": 92,
      "score": 2.3359069755507846,
      "candidate": "def find_subsequences(arr, k):\n    n = len(arr)\n    dp = [0] * (n + 1)\n    dp[0] = 1\n\n    for i in range(1, n + 1):\n        for j in range(i):\n            if arr[j] <= arr[i - 1]:\n                dp[i] += dp[j]\n\n    return dp[n]\n\n\nif __name__ == \"__main__\":\n    print(find_subsequences([1, 2, 3, 4], 2))"
    },
    {
      "rank": 93,
      "score": 2.293848149332354,
      "candidate": "class Solution:\n    def numSubseq(self, nums, k):\n        n = len(nums)\n        dp = [[0 for i in range(k + 1)] for j in range(n + 1)]\n        for i in range(1, n + 1):\n            for j in range(1, k + 1):\n                if nums[i - 1] <= j:\n                    dp[i][j] = dp[i - 1][j]\n                else:\n                    dp[i][j] = dp[i - 1][j - nums[i - 1]] + 1\n        return dp[n][k]\n\n\nif __name__ == \"__main__\":\n    nums = [2, 3, 4, 2, 2, 3]\n    k = 2\n    res = Solution().numSubseq(nums, k)\n    print(res)"
    },
    {
      "rank": 94,
      "score": 2.287625906893272,
      "candidate": "class Solution(object):\n    def numSubsequences(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"\n        if not nums:\n            return 0\n        dp = [0] * (len(nums)+1)\n        dp[0] = 1\n        for i in range(1, len(nums)+1):\n            dp[i] = dp[i-1] + nums[i-1] * dp[i-2]\n        return dp[-1] % k"
    },
    {
      "rank": 95,
      "score": 2.260739004816286,
      "candidate": "class Solution:\n    def numSubsequences(self, k: int, nums: List[int]) -> int:\n        if len(nums) < 2:\n            return 0\n        dp = [0] * (len(nums) + 1)\n        dp[0] = 1\n        for i in range(1, len(nums) + 1):\n            for j in range(i):\n                if nums[j] <= k:\n                    dp[i] += dp[j]\n        return dp[-1]"
    },
    {
      "rank": 96,
      "score": 2.137541083743484,
      "candidate": "def find_subsequence(k, arr):\n    n = len(arr)\n    dp = [[0 for _ in range(k+1)] for _ in range(n+1)]\n    dp[0][0] = 1\n\n    for i in range(1, n+1):\n        dp[i][0] = dp[i-1][0]\n        for j in range(1, k+1):\n            if arr[i-j] < j:\n                dp[i][j] += dp[i-j][j-arr[i-j]]\n\n    return dp[n][k]\n\n\nprint(find_subsequence(5, [2, 3, 4, 6, 7]))"
    },
    {
      "rank": 97,
      "score": 2.118479922318633,
      "candidate": "def num_subseq_smaller_k(arr, k):\n    n = len(arr)\n    count = 0\n    for i in range(n):\n        if arr[i] == k:\n            count += 1\n    return count\n\n\ndef num_subseq_smaller_k_2(arr, k):\n    if k <= 0:\n        return 0\n    n = len(arr)\n    dp = [[0] * (k + 1) for _ in range(n + 1)]\n    dp[0][0] = 1\n    for i in range(1, n + 1):\n        dp[i][0] = dp[i - 1][0]\n        for j in range(1, k + 1):\n            dp[i][j] = dp[i - 1][j] + dp[i - 1][j - arr[i - 1]]\n    return dp[n][k]\n\n\ndef num_subseq_smaller_k_3(arr, k):\n    if k <= 0:\n        return 0\n    n = len(arr)\n    dp = [0] * (k + 1)\n    dp[0] = 1\n    for i in range(1, n + 1):\n        dp[i] = dp[i - 1]\n        for j in range(1, k + 1):\n            dp[i] += dp[i - 1]\n    return dp[n]\n\n\ndef num_subseq_smaller_k_4(arr, k):\n    if k <= 0:\n        return 0\n    n = len(arr)\n    dp = [0] * (k + 1)\n    dp[0] = 1\n    for i in range(1, n + 1):\n        dp[i] = dp[i - 1]\n        for j in range(1, k + 1):\n            dp[i] += dp[i - 1]\n            if i - j >= 0 and arr[i - j] <= k:\n                dp[i] += dp[i - j]\n    return dp[n]\n\n\nif __name__ == \"__main__\":\n    print(num_subseq_smaller_k([2,"
    },
    {
      "rank": 98,
      "score": 2.043359877671101,
      "candidate": "class Solution:\n    def numSubseq(self, nums, k):\n        if not nums:\n            return 0\n        memo = {0: 1}\n        for num in nums:\n            count = 0\n            for k in memo.keys():\n                if k < num:\n                    count += memo[k]\n            memo[num] = count + 1\n        return memo[k]\n\na = Solution()\nprint(a.numSubseq([2, 3, 4, 1, 2, 4], 2))\nprint(a.numSubseq([1, 2, 3, 4, 5, 6], 3))\nprint(a.numSubseq([1, 2, 3, 4, 5, 6], 7))"
    },
    {
      "rank": 99,
      "score": 2.020164938060112,
      "candidate": "def num_subseq_smaller_than_k(nums, k):\n    n = len(nums)\n    dp = [[0 for _ in range(k+1)] for _ in range(n+1)]\n    dp[0][0] = 1\n    for i in range(1, n+1):\n        dp[i][0] = dp[i-1][0]\n        for j in range(1, k+1):\n            if j == nums[i-1]:\n                dp[i][j] = dp[i-1][j-nums[i-1]]\n            else:\n                dp[i][j] = dp[i-1][j] + dp[i][j-nums[i-1]]\n    return dp[n][k]\n\n\nif __name__ == \"__main__\":\n    nums = [1, 2, 3, 4, 5, 6, 7]\n    k = 5\n    print(num_subseq_smaller_than_k(nums, k))"
    },
    {
      "rank": 100,
      "score": 1.6901274479551278,
      "candidate": "class Solution(object):\n    def numSubseqProductThanK(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"\n        if len(nums) == 0:\n            return 0\n        dp = [0 for _ in range(k+1)]\n        dp[0] = 1\n        for i in range(1,k+1):\n            for num in nums:\n                if i <= num:\n                    dp[i] += dp[i-num]\n        return dp[-1]"
    }
  ]
}