{
  "timestamp": "2025-09-14T15:07:36.812187",
  "method": "improved_llm_judge",
  "judge_model": "codellama/CodeLlama-7b-Python-hf",
  "target_model": "codet5-770m",
  "dataset": "mbpp",
  "problem_number": 362,
  "total_candidates": 100,
  "results": [
    {
      "rank": 1,
      "score": 10.0,
      "candidate": "import math\n\ndef cuboid_volume(r, theta, phi, psi):\n    return math.pi * (r**3) * (theta**3) * (phi**3) * (psi**3)\n\nprint(cuboid_volume(r=6, theta=45, phi=180, psi=90))"
    },
    {
      "rank": 2,
      "score": 10.0,
      "candidate": "from math import pi\n\ndef cuboid_volume(r, h):\n    return r * h * pi\n\n\nprint(cuboid_volume(r=1, h=1))\nprint(cuboid_volume(r=1, h=2))\nprint(cuboid_volume(r=2, h=1))\nprint(cuboid_volume(r=2, h=2))\nprint(cuboid_volume(r=3, h=1))\nprint(cuboid_volume(r=3, h=2))\nprint(cuboid_volume(r=4, h=1))\nprint(cuboid_volume(r=4, h=2))\nprint(cuboid_volume(r=5, h=1))\nprint(cuboid_volume(r=5, h=2))\nprint(cuboid_volume(r=6, h=1))\nprint(cuboid_volume(r=6, h=2))"
    },
    {
      "rank": 3,
      "score": 10.0,
      "candidate": "def cuboid_volume(r, theta, phi):\n    return (r**3)*(theta**3)*(phi**3)\n\n\nprint(cuboid_volume(5, 0, 0))"
    },
    {
      "rank": 4,
      "score": 10.0,
      "candidate": "def cuboid_volume(r, h, l):\n    return r * h * l\n\ndef main():\n    print(cuboid_volume(5, 5, 5))\n    print(cuboid_volume(4, 5, 5))\n    print(cuboid_volume(1, 1, 1))\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 5,
      "score": 10.0,
      "candidate": "def cuboid(x,y,z):\n    return x*y*z\n\nprint(cuboid(1,2,3))"
    },
    {
      "rank": 6,
      "score": 10.0,
      "candidate": "def cuboid_volume(r, h, s):\n    volume = r*h*s\n    return volume\n\nprint(cuboid_volume(3, 5, 3))"
    },
    {
      "rank": 7,
      "score": 10.0,
      "candidate": "def volume(length, width, height):\n    volume = length * width * height\n    return volume\n\nprint(volume(4, 4, 4))"
    },
    {
      "rank": 8,
      "score": 10.0,
      "candidate": "def cuboid_volume(r, h, b):\n    return r * h * b\n\n\nprint(cuboid_volume(3, 2, 4))"
    },
    {
      "rank": 9,
      "score": 10.0,
      "candidate": "def cuboid_volume(r, h, b):\n    return (r**2) * (h**2) * (b**2)\n\n\nprint(cuboid_volume(1, 1, 1))"
    },
    {
      "rank": 10,
      "score": 10.0,
      "candidate": "def cuboid_volume(r,h,p):\n    return r*h*p\n\nprint(cuboid_volume(3,2,2))"
    },
    {
      "rank": 11,
      "score": 10.0,
      "candidate": "def cuboid_volume(r, theta, phi, phi2):\n    a = 3.141592653589793238462643383279502884197169399375105820974944592\n    b = 0.5 * r * r * r * r\n    c = 2 * r * r * r\n    d = (r ** 2) * (theta ** 2) * (phi ** 2)\n    e = (phi2 ** 2) * (phi2 ** 2)\n    f = 2 * r * theta * phi\n    g = a * b * c\n    h = a * d * e\n    i = b * f * g\n    j = c * h * i\n    k = a * i * h\n    l = a * j * k\n    return (a * l + b * k + c * j + d * i) / 6\n\nprint(cuboid_volume(3.0, 0.0, 1.0, 1.0))"
    },
    {
      "rank": 12,
      "score": 10.0,
      "candidate": "def volume(radius):\n    return 3.14159 * radius ** 2\n\n\nif __name__ == '__main__':\n    print(volume(3))\n    print(volume(4))\n    print(volume(5))\n    print(volume(6))\n    print(volume(7))\n    print(volume(8))\n    print(volume(9))\n    print(volume(10))\n    print(volume(11))\n    print(volume(12))\n    print(volume(13))\n    print(volume(14))\n    print(volume(15))\n    print(volume(16))\n    print(volume(17))\n    print(volume(18))\n    print(volume(19))\n    print(volume(20))\n    print(volume(21))\n    print(volume(22))\n    print(volume(23))\n    print(volume(24))\n    print(volume(25))\n    print(volume(26))\n    print(volume(27))\n    print(volume(28))\n    print(volume(29))\n    print(volume(30))\n    print(volume(31))\n    print(volume(32))\n    print(volume(33))\n    print(volume(34))\n    print(volume(35))\n    print(volume(36))\n    print(volume(37))\n    print(volume(38))\n    print(volume(39))\n    print(volume(40))\n    print(volume(41))\n    print(volume(42))\n    print(volume(43))\n    print(volume(44))\n    print(volume(45))\n    print(volume(46))\n    print(volume(47))\n    print(volume(48))\n    print(volume(49))\n    print(volume(50))\n    print(volume(51))\n    print(volume(52))\n    print(volume(53))\n    print(volume(54))\n    print(volume(55))\n    print(volume(56))\n    print(volume(57))\n    print(volume(58))\n    print(volume(59))\n    print(volume(60))\n    print(volume(61))\n    print(volume(62))"
    },
    {
      "rank": 13,
      "score": 10.0,
      "candidate": "def cuboid_volume(r, h, p, n):\n    r = float(r)\n    h = float(h)\n    p = float(p)\n    n = float(n)\n\n    return ((p**3) * (n**2) * (r**2) * (h**3))\n\n\nprint(cuboid_volume(2, 4, 1, 6))\nprint(cuboid_volume(2, 4, 2, 6))\nprint(cuboid_volume(2, 4, 2, 6))\nprint(cuboid_volume(2, 4, 2, 6))\nprint(cuboid_volume(2, 4, 2, 6))\nprint(cuboid_volume(2, 4, 2, 6))\nprint(cuboid_volume(2, 4, 2, 6))\nprint(cuboid_volume(2, 4, 2, 6))\nprint(cuboid_volume(2, 4, 2, 6))\nprint(cuboid_volume(2, 4, 2, 6))\nprint(cuboid_volume(2, 4, 2, 6))\nprint(cuboid_volume(2, 4, 2, 6))\nprint(cuboid_volume(2, 4, 2, 6))\nprint(cuboid_volume(2, 4, 2, 6))\nprint(cuboid_volume(2, 4, 2, 6))\nprint(cuboid_volume(2, 4, 2, 6))\nprint(cuboid_volume(2, 4, 2, 6))\nprint(cuboid_volume(2, 4, 2, 6))\nprint(cuboid_volume(2, 4, 2, 6))\nprint(cuboid_volume(2, 4, 2, 6))\nprint(cuboid_volume(2, 4, 2, 6))\nprint(cuboid_volume(2, 4, 2, 6))\nprint(cuboid_volume(2, 4, 2, 6))\nprint(cuboid_volume(2, 4, 2, 6))\nprint(cuboid_volume(2, 4, 2, 6))\nprint(cuboid_volume"
    },
    {
      "rank": 14,
      "score": 10.0,
      "candidate": "def cuboid_volume(a, b, c):\n    return a * b * c"
    },
    {
      "rank": 15,
      "score": 10.0,
      "candidate": "def cuboid(r,h,w):\n    return r*h*w\n\n\nprint(cuboid(5,2,2))"
    },
    {
      "rank": 16,
      "score": 10.0,
      "candidate": "def cuboid_volume(r, theta, phi):\n    return r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r * r *"
    },
    {
      "rank": 17,
      "score": 10.0,
      "candidate": "def cuboid_volume(a, b, c):\n    return a * b * c\n\n\nprint(cuboid_volume(1, 2, 3))"
    },
    {
      "rank": 18,
      "score": 10.0,
      "candidate": "def volume(r,h,l):\n    return (r**2 + h**2 + l**2)**(1/2)\n\nif __name__ == \"__main__\":\n    print(volume(3,4,5))"
    },
    {
      "rank": 19,
      "score": 10.0,
      "candidate": "def volume(r, theta, phi):\n    return r * r * r * np.sin(theta) * np.sin(phi)\n\n\nprint(volume(1, np.pi / 2, np.pi / 2))"
    },
    {
      "rank": 20,
      "score": 10.0,
      "candidate": "def cuboid_volume(r,h,b):\n\treturn (r**3)*(h**3)*(b**3)\n\nprint(cuboid_volume(3,4,1))"
    },
    {
      "rank": 21,
      "score": 10.0,
      "candidate": "def volume(r, theta, phi):\n    return r*r*r*r*r*r*r*r*r*r*r*r*r*r*r*r*r*r*r*r*r*r*r*r*r*r*r*r*r*r*r*r*r*r*r*r*r*r*r*r*r*r*r*r*r*r*r*r*r*r*r*r*r*r*r*r*r*r*r*r*r*r*r*r*r*r*r*r*r*r*r*r*r*r*r*r*r*r*r*r*r*r*r*r*r*r*r*r*r*r*r*r*r*r*r*r*r*r*r*r*r*r*r*r*r*r*r*r*r*r*r*r*r*r*r*r*r*r*r*r*r*r*r*r*r*r*r*r*r*r*r*r*r*r*r*r*r*r*r*r*r*r*r*r*r*r*r*r*r*r*r*r*r*r*r*r*r*r*r*r*r*r*r*r*r*r*r*r*r*r*r*r*r*r*r*r*r*r*r*r*r*r*r*r*r*r*r*r*r*r*r*r*r*r*r*r*r*r*r*r*r*r*r*r*r*r*r*r*r*r*r*r*r*r*r*r*r*r*r*r*r*r*r*r*r*r*r*r*r*r*r*r*r*r*r*r*r*r*r*r*r*r*r*r*r*r*r*r*r"
    },
    {
      "rank": 22,
      "score": 10.0,
      "candidate": "def volume(r, h):\n    return r * h * r * h\n\n\nprint(volume(4, 1))"
    },
    {
      "rank": 23,
      "score": 9.99406122111531,
      "candidate": "def cuboid_volume(r, theta, phi):\n    return (4/3) * (r * r * r * (r * r + theta * theta * theta + phi * phi))\n\n\nprint(cuboid_volume(1, 0, 0))"
    },
    {
      "rank": 24,
      "score": 9.949114755749175,
      "candidate": "def cuboid_volume(radius):\n    return 3.14 * radius ** 2\n\n\nprint(cuboid_volume(2))"
    },
    {
      "rank": 25,
      "score": 9.93916370748468,
      "candidate": "def cuboid(radius, height):\n    volume = radius * height * height\n    return volume\n\n\nprint(cuboid(4, 1))"
    },
    {
      "rank": 26,
      "score": 9.903344369351494,
      "candidate": "def cuboid_volume(r, theta, phi):\n    return r * r * r * np.sin(theta) * np.sin(phi)\n\n\nif __name__ == '__main__':\n    print(cuboid_volume(1, 2, 3))\n    print(cuboid_volume(1, 2, 3, 4))\n    print(cuboid_volume(1, 2, 3, 4, 5))\n    print(cuboid_volume(1, 2, 3, 4, 5, 6))\n    print(cuboid_volume(1, 2, 3, 4, 5, 6, 7))"
    },
    {
      "rank": 27,
      "score": 9.896972515121732,
      "candidate": "def volume(r, theta, phi):\n\treturn r*r*r*r*r*r*r*r*r*r*r*r*r*r*r*r*r*r*r*r*r*r*r*r*r*r*r*r*r*r*r*r*r*r*r*r*r*r*r*r*r*r*r*r*r*r*r*r*r*r*r*r*r*r*r*r*r*r*r*r*r*r*r*r*r*r*r*r*r*r*r*r*r*r*r*r*r*r*r*r*r*r*r*r*r*r*r*r*r*r*r*r*r*r*r*r*r*r*r*r*r*r*r*r*r*r*r*r*r*r*r*r*r*r*r*r*r*r*r*r*r*r*r*r*r*r*r*r*r*r*r*r*r*r*r*r*r*r*r*r*r*r*r*r*r*r*r*r*r*r*r*r*r*r*r*r*r*r*r*r*r*r*r*r*r*r*r*r*r*r*r*r*r*r*r*r*r*r*r*r*r*r*r*r*r*r*r*r*r*r*r*r*r*r*r*r*r*r*r*r*r*r*r*r*r*r*r*r*r*r*r*r*r*r*r*r*r*r*r*r*r*r*r*r*r*r*r*r*r*r*r*r*r*r*r*r*r*r*r*r*r*r*r*r*r*r*r*r*r"
    },
    {
      "rank": 28,
      "score": 9.871654750090958,
      "candidate": "def cuboid_volume(r):\n    return r**3"
    },
    {
      "rank": 29,
      "score": 9.797318940777693,
      "candidate": "def volume(r, theta, phi):\n    return (r**2)*(r*math.sin(theta)*math.cos(phi))\n\nprint(volume(2, 0, math.pi/2))"
    },
    {
      "rank": 30,
      "score": 9.796096215162517,
      "candidate": "def cuboid_volume(a, b, c):\n    return (a * b * c)**0.5\n\nprint(cuboid_volume(3, 2, 2))"
    },
    {
      "rank": 31,
      "score": 9.771961103959596,
      "candidate": "from math import pi\n\ndef volume(r, h):\n    return pi * r**2 * h**2\n\n\nprint(volume(3, 3))\nprint(volume(3, 4))\nprint(volume(3, 5))\nprint(volume(5, 5))\nprint(volume(5, 6))\nprint(volume(6, 6))\nprint(volume(6, 7))\nprint(volume(6, 8))\nprint(volume(7, 7))\nprint(volume(7, 8))"
    },
    {
      "rank": 32,
      "score": 9.735249090619066,
      "candidate": "def cuboid_volume(r):\n    return r**3"
    },
    {
      "rank": 33,
      "score": 9.716147307973745,
      "candidate": "def cuboid(r, theta, phi):\n    return (r ** 3) * (theta ** 2) * (phi ** 2)\n\n\nprint(cuboid(r=5, theta=0, phi=0))"
    },
    {
      "rank": 34,
      "score": 9.691096638693965,
      "candidate": "def cuboid_volume(radius):\n    return 2.0 * radius * radius * radius\n\nprint(cuboid_volume(4))"
    },
    {
      "rank": 35,
      "score": 9.683268548306328,
      "candidate": "import math\n\ndef volume(radius, height):\n    return radius * height * math.pi\n\ndef main():\n    print(volume(3, 2))\n    print(volume(4, 4))\n    print(volume(5, 4))\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 36,
      "score": 9.630744289782038,
      "candidate": "def cuboid_volume(length, width, height):\n    return length * width * height\n\n\nif __name__ == \"__main__\":\n    print(cuboid_volume(10, 5, 5))"
    },
    {
      "rank": 37,
      "score": 9.513212611437348,
      "candidate": "def cuboid_volume(radius, height, width):\n    return (radius * height * width) / 2"
    },
    {
      "rank": 38,
      "score": 9.493562825934188,
      "candidate": "def volume(r):\n    return (4/3)*(r**3)\n\nprint(volume(2))\nprint(volume(3))\nprint(volume(4))\nprint(volume(5))"
    },
    {
      "rank": 39,
      "score": 9.473669085404504,
      "candidate": "def cuboid_volume(x, y, z):\n    return (x * y * z) ** 0.5\n\n\nprint(cuboid_volume(2, 3, 4))"
    },
    {
      "rank": 40,
      "score": 9.356053422821867,
      "candidate": "def cuboid_volume(r, theta, phi):\n    return (r**3)*(theta**3)*(phi**3)\n\n\ndef main():\n    print(cuboid_volume(1, 1, 1))\n    print(cuboid_volume(1, 1, -1))\n    print(cuboid_volume(1, 1, 2))\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 41,
      "score": 9.349450324238331,
      "candidate": "def cuboid_volume(r, theta, phi):\n    return r * (r * r + theta * theta + phi * phi) / 6\n\ndef main():\n    print(cuboid_volume(1, 0, 0))\n    print(cuboid_volume(1, 0, 1))\n    print(cuboid_volume(2, 0, 0))\n    print(cuboid_volume(2, 0, 1))\n    print(cuboid_volume(2, 1, 0))\n    print(cuboid_volume(2, 1, 1))\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 42,
      "score": 9.224262331640396,
      "candidate": "def cuboid_volume(n, r):\n    return (4 * r * r) / n\n\nprint(cuboid_volume(5, 2))"
    },
    {
      "rank": 43,
      "score": 9.205959372648458,
      "candidate": "def cuboid_volume(radius, height, height_cuboid, volume_cuboid):\n    return (radius * height * height_cuboid * volume_cuboid)\n\n\ndef main():\n    print(cuboid_volume(4, 4, 4, 0.2))\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 44,
      "score": 9.183391466815202,
      "candidate": "def volume(a, b, c):\n    return a * b * c\n\nprint(volume(1, 1, 1))"
    },
    {
      "rank": 45,
      "score": 9.15815669235057,
      "candidate": "def volume(x, y, z):\n    return x * y * z\n\n\nprint(volume(2, 2, 2))"
    },
    {
      "rank": 46,
      "score": 9.137745145492898,
      "candidate": "def cuboid_volume(r):\n    return (4/3) * r * r * r\n\nprint(cuboid_volume(3))\nprint(cuboid_volume(4))\nprint(cuboid_volume(5))"
    },
    {
      "rank": 47,
      "score": 8.973005557553902,
      "candidate": "def cuboid_volume(radius, height, width, area):\n    return (radius * height * width) * area\n\n\nprint(cuboid_volume(10, 10, 10, 20))"
    },
    {
      "rank": 48,
      "score": 8.95994420569242,
      "candidate": "def volume(r, theta, phi, a):\n    return (r * (a * (np.cos(theta) * np.cos(phi) - a * np.sin(theta) * np.sin(phi))))\n\n\nprint(volume(1, 0, 0, 1))\nprint(volume(1, 0, np.pi / 4, 1))\nprint(volume(1, np.pi / 4, 0, 1))\nprint(volume(1, 0, 0, 0))\nprint(volume(1, 0, 0, 0))\nprint(volume(1, 0, 0, 0))\nprint(volume(1, 0, 0, 0))\nprint(volume(1, 0, 0, 0))"
    },
    {
      "rank": 49,
      "score": 8.932217008005624,
      "candidate": "def cuboid_volume(r, h, p):\n    r2 = r**2\n    h2 = h**2\n    p2 = p**2\n    volume = r2 + h2 + p2\n    return volume\n\nprint(cuboid_volume(2, 2, 2))"
    },
    {
      "rank": 50,
      "score": 8.910084504002544,
      "candidate": "def cuboid_volume(r, h):\n    return 3.14 * r * h"
    },
    {
      "rank": 51,
      "score": 8.85571690049604,
      "candidate": "def volume(r, h, b, t):\n    return r * h * b * t\n\nprint(volume(3, 3, 3, 1))"
    },
    {
      "rank": 52,
      "score": 8.855395696632057,
      "candidate": "def cuboid_volume(r, h, w):\n    return r * h * w\n\nprint(cuboid_volume(r=0.5, h=0.5, w=0.5))\nprint(cuboid_volume(r=0.5, h=0.5, w=0.25))"
    },
    {
      "rank": 53,
      "score": 8.8281618090209,
      "candidate": "from math import pi\n\ndef volume(r):\n    return pi * r**3\n\nprint(volume(3))"
    },
    {
      "rank": 54,
      "score": 8.81367773444215,
      "candidate": "def cuboid_volume(a, b, c):\n    return (a * b * c) ** 0.5\n\nprint(cuboid_volume(5, 10, 20))\nprint(cuboid_volume(3, 4, 5))"
    },
    {
      "rank": 55,
      "score": 8.76828871349479,
      "candidate": "def cuboid_volume(r, theta, phi):\n    return (4/3) * r * theta * phi\n\nprint(cuboid_volume(1, 1, 1))\nprint(cuboid_volume(1, 2, 1))\nprint(cuboid_volume(1, 2, 2))\nprint(cuboid_volume(2, 1, 1))\nprint(cuboid_volume(2, 2, 1))\nprint(cuboid_volume(3, 2, 2))\nprint(cuboid_volume(3, 2, 3))"
    },
    {
      "rank": 56,
      "score": 8.701078161001123,
      "candidate": "def cuboid_volume(r):\n    return (3 * r ** 2) / 4\n\nprint(cuboid_volume(5))"
    },
    {
      "rank": 57,
      "score": 8.625142247198651,
      "candidate": "def volume(x, y, z):\n    return x*y*z\n\nprint(volume(1, 2, 3))"
    },
    {
      "rank": 58,
      "score": 8.616253589228675,
      "candidate": "def cuboid_volume(radius, height):\n    return 4 * (radius ** 2) * height\n\n\nprint(cuboid_volume(2, 2))\nprint(cuboid_volume(3, 2))\nprint(cuboid_volume(3, 3))\nprint(cuboid_volume(3, 4))\nprint(cuboid_volume(4, 4))"
    },
    {
      "rank": 59,
      "score": 8.610076160146226,
      "candidate": "def volume_cuboid(r, h):\n    return r * h\n\n\nprint(volume_cuboid(3, 2))"
    },
    {
      "rank": 60,
      "score": 8.608819999274287,
      "candidate": "from math import pi, sqrt\n\n\ndef cuboid_volume(a, b, c):\n    # A = a * a * a\n    # B = b * b * b\n    # C = c * c * c\n    return (a * b * c) * (sqrt(a ** 2 + b ** 2 + c ** 2))\n\n\nif __name__ == \"__main__\":\n    print(cuboid_volume(1, 2, 3))"
    },
    {
      "rank": 61,
      "score": 8.606486429141842,
      "candidate": "def cuboid_volume(r, h, l):\n    return (4 * r * h * l) / 3\n\n\nprint(cuboid_volume(1, 1, 1))"
    },
    {
      "rank": 62,
      "score": 8.60156811074208,
      "candidate": "def volume(radius, height, width):\n    return 4 * (radius * radius) + 2 * (height * height) + 2 * (width * width)\n\n\nprint(volume(3, 5, 7))"
    },
    {
      "rank": 63,
      "score": 8.574972080534389,
      "candidate": "import math\n\ndef cuboid_volume(r, h):\n    return r * h * math.pi\n\nprint(cuboid_volume(1, 1))\nprint(cuboid_volume(3, 1))\nprint(cuboid_volume(3, 2))\nprint(cuboid_volume(3, 3))"
    },
    {
      "rank": 64,
      "score": 8.565425580227462,
      "candidate": "def cuboid_volume(radius):\n    return 4 * (3 * radius * radius)\n\n\nprint(cuboid_volume(2))\nprint(cuboid_volume(3))\nprint(cuboid_volume(4))"
    },
    {
      "rank": 65,
      "score": 8.542875062379007,
      "candidate": "def cuboid_volume(radius):\n    cuboid_volume = 2 * radius * radius * radius\n    return cuboid_volume\n\nprint(cuboid_volume(1))\nprint(cuboid_volume(2))\nprint(cuboid_volume(3))\nprint(cuboid_volume(4))\nprint(cuboid_volume(5))"
    },
    {
      "rank": 66,
      "score": 8.499905739299377,
      "candidate": "import math\n\ndef volume(radius):\n    return math.pi * radius ** 2\n\nprint(volume(5))"
    },
    {
      "rank": 67,
      "score": 8.478208546788407,
      "candidate": "import math\n\ndef cuboid_volume(radius, height, width):\n    return math.pi * (radius**2) * (height**2) * (width**2)\n\n\nprint(cuboid_volume(2, 2, 2))"
    },
    {
      "rank": 68,
      "score": 8.426531424889468,
      "candidate": "def cuboid_volume(r, h, v):\n    return (r**2 + h**2 + v**2)**(1/2)\n\nif __name__ == '__main__':\n    print(cuboid_volume(3, 6, 3))"
    },
    {
      "rank": 69,
      "score": 8.408439383654278,
      "candidate": "def cuboid_volume(radius):\n    return 3.14159 * radius ** 3"
    },
    {
      "rank": 70,
      "score": 8.351614956112536,
      "candidate": "import math\n\ndef volume(r):\n    return (4 * math.pi * r ** 3) / 3\n\nprint(volume(3))\nprint(volume(5))\nprint(volume(7))"
    },
    {
      "rank": 71,
      "score": 8.331556294201176,
      "candidate": "def cuboid_volume(radius, height):\n    return (radius * height) * (radius * height)\n\n\nprint(cuboid_volume(2, 2))\nprint(cuboid_volume(2, 3))\nprint(cuboid_volume(3, 3))\nprint(cuboid_volume(5, 5))"
    },
    {
      "rank": 72,
      "score": 8.327375965969855,
      "candidate": "def cuboid_volume(r, h):\n    return (r * h) ** 3\n\nprint(cuboid_volume(1, 1))\nprint(cuboid_volume(2, 1))\nprint(cuboid_volume(3, 1))\nprint(cuboid_volume(4, 1))\nprint(cuboid_volume(5, 1))"
    },
    {
      "rank": 73,
      "score": 8.294940769211511,
      "candidate": "import math\n\ndef cuboid_volume(r, theta, phi):\n    # your code here\n    return math.pi * (r ** 2) * (theta ** 2) * (phi ** 2)\n\nif __name__ == '__main__':\n    r = float(input(\"Enter the radius of the cuboid: \"))\n    theta = float(input(\"Enter the angle of the cuboid in degrees: \"))\n    phi = float(input(\"Enter the angle of the cuboid in degrees: \"))\n    print(\"The volume of the cuboid is: \", cuboid_volume(r, theta, phi))"
    },
    {
      "rank": 74,
      "score": 8.2938925966498,
      "candidate": "def volume(radius, height):\n    return (3 * radius * radius) * (height * height)\n\nprint(volume(4,5))\nprint(volume(2, 3))"
    },
    {
      "rank": 75,
      "score": 8.289838256518838,
      "candidate": "import math\n\n\ndef volume(a, b, c):\n    return math.pi * (a * a + b * b + c * c)\n\n\nif __name__ == \"__main__\":\n    print(volume(2, 2, 3))"
    },
    {
      "rank": 76,
      "score": 8.280613371145561,
      "candidate": "def cuboid_volume(a, b, c):\n    return (a*b*c)/6\n\n\nprint(cuboid_volume(2, 4, 8))"
    },
    {
      "rank": 77,
      "score": 8.251903304236286,
      "candidate": "def cuboid_volume(r):\n    return 4.0 * r * r * r\n\nprint(cuboid_volume(3.0))\nprint(cuboid_volume(5.0))\nprint(cuboid_volume(7.0))\nprint(cuboid_volume(10.0))\nprint(cuboid_volume(12.0))\nprint(cuboid_volume(15.0))"
    },
    {
      "rank": 78,
      "score": 8.248390367878367,
      "candidate": "def cuboid_volume(a, b, c):\n    return a*b*c\n\nprint(cuboid_volume(1, 2, 3))"
    },
    {
      "rank": 79,
      "score": 8.211579567659316,
      "candidate": "def volume(r, theta, phi):\n    a = r * (1 - 2 * r) * (1 - 2 * r)\n    b = 2 * r * (1 - r) * (1 - 2 * r) * (1 - r)\n    c = 2 * r * (1 - r) * (1 - 2 * r) * (1 - r)\n    d = 2 * r * (1 - r) * (1 - 2 * r) * (1 - r)\n    e = 2 * r * (1 - r) * (1 - 2 * r) * (1 - r) * (1 - r)\n    f = r * (1 - r) * (1 - 2 * r) * (1 - 2 * r) * (1 - r)\n    g = r * (1 - r) * (1 - 2 * r) * (1 - 2 * r) * (1 - r)\n    h = r * (1 - r) * (1 - 2 * r) * (1 - 2 * r) * (1 - r)\n    i = r * (1 - r) * (1 - 2 * r) * (1 - 2 * r) * (1 - r) * (1 - r)\n    j = r * (1 - r) * (1 - 2 * r) * (1 - 2 * r) * (1 - r) * (1 - r)\n    k = r * (1 - r) * (1 - 2 * r) * (1 - 2 * r) * (1 - r) * (1 - r)\n    l = r * (1 - r) * (1 - 2 * r) * (1 - 2 * r) * (1 - r) * (1 - r) * (1 - r)\n    m = r * (1 - r) * (1 - 2 * r) * (1 - 2 * r) * (1 - r) * (1 - r) * (1 - r)\n    n = r * (1 - r) * (1 - 2 * r) * (1 - 2 * r) * (1 - r) * (1 - r) * (1 - r)\n    o = r * (1 - r) * ("
    },
    {
      "rank": 80,
      "score": 8.209707251476969,
      "candidate": "def cuboid_volume(r, theta, phi):\n    r = r * r\n    theta = theta * theta\n    phi = phi * phi\n\n    return r * theta * phi\n\n\nif __name__ == '__main__':\n    print(cuboid_volume(1, 2, 3))"
    },
    {
      "rank": 81,
      "score": 8.2048573255218,
      "candidate": "def cuboid_volume(r, h):\n    volume = (3.14159 * r) * (3.14159 * h)\n    return volume\n\n\nprint(cuboid_volume(2, 2))"
    },
    {
      "rank": 82,
      "score": 8.193565922652176,
      "candidate": "def cuboid_volume(r, theta, phi):\n    return r**3 * (np.sin(theta) * np.sin(phi) + np.cos(theta) * np.cos(phi))\n\nr = float(input(\"Enter radius: \"))\ntheta = float(input(\"Enter theta: \"))\nphi = float(input(\"Enter phi: \"))\n\nprint(f\"The volume of the cuboid is: {cuboid_volume(r, theta, phi)}\")"
    },
    {
      "rank": 83,
      "score": 8.179564342560925,
      "candidate": "import math\n\n\ndef volume(r, theta, phi):\n    return math.pi * (r ** 2) * (theta ** 2) * (phi ** 2)\n\n\nprint(volume(1.0, 0.0, 0.0))\nprint(volume(1.0, math.pi / 2, 0.0))\nprint(volume(1.0, math.pi, math.pi / 2))"
    },
    {
      "rank": 84,
      "score": 8.172253082181854,
      "candidate": "def cuboid_volume(radius, height):\n    return 2 * (radius * radius) + height * height\n\nprint(cuboid_volume(1, 1))\nprint(cuboid_volume(2, 1))\nprint(cuboid_volume(2, 2))\nprint(cuboid_volume(1, 2))"
    },
    {
      "rank": 85,
      "score": 8.163300679823958,
      "candidate": "import math\n\n\ndef volume(r, h):\n    return math.pi * r**3 * h**2\n\n\nprint(volume(1.0, 1.0))"
    },
    {
      "rank": 86,
      "score": 8.144125099485041,
      "candidate": "def volume(radius, height):\n    return radius * height * radius * height\n\nprint(volume(5, 5))"
    },
    {
      "rank": 87,
      "score": 8.105983444291466,
      "candidate": "def cuboid_volume(r, theta, phi):\n    return (r**2 * np.sin(theta) * np.sin(phi))\n\nif __name__ == \"__main__\":\n    print(cuboid_volume(5, 0, 0))"
    },
    {
      "rank": 88,
      "score": 8.040197642997851,
      "candidate": "def cuboid_volume(r, h, l):\n    return (r**3) * (h**3) * (l**3)\n\nprint(cuboid_volume(5, 5, 5))"
    },
    {
      "rank": 89,
      "score": 7.990432406683839,
      "candidate": "import math\n\n\ndef cuboid_volume(r, h, c):\n    \"\"\"\n    :type r: float\n    :type h: float\n    :type c: float\n    :rtype: float\n    \"\"\"\n    a = math.sqrt(r**2 + h**2 + c**2)\n    return a\n\n\nprint(cuboid_volume(3, 2, 1))\nprint(cuboid_volume(3, 2, 2))\nprint(cuboid_volume(1, 3, 2))\nprint(cuboid_volume(1, 3, 3))\nprint(cuboid_volume(2, 3, 3))\nprint(cuboid_volume(2, 3, 4))\nprint(cuboid_volume(2, 4, 4))\nprint(cuboid_volume(2, 5, 4))\nprint(cuboid_volume(2, 4, 5))\nprint(cuboid_volume(2, 5, 6))\nprint(cuboid_volume(2, 6, 4))\nprint(cuboid_volume(2, 6, 5))\nprint(cuboid_volume(2, 6, 6))"
    },
    {
      "rank": 90,
      "score": 7.938028884277233,
      "candidate": "def cuboid_volume(radius, height, width):\n    volume = 3.14 * (radius ** 2) * (height ** 2) * (width ** 2)\n    return volume\n\n\nprint(cuboid_volume(radius=2, height=3, width=5))"
    },
    {
      "rank": 91,
      "score": 7.915588979966494,
      "candidate": "import math\n\ndef cuboid_volume(x, y, z):\n    return math.pi * (x**2 + y**2 + z**2)\n\nprint(cuboid_volume(3, 4, 5))"
    },
    {
      "rank": 92,
      "score": 7.834022619458933,
      "candidate": "def cuboid_volume(r, theta, phi):\n    return (r**3)*(np.sin(theta)*np.sin(phi))\n\n\nif __name__ == '__main__':\n    print(cuboid_volume(2,0,0))"
    },
    {
      "rank": 93,
      "score": 7.780351419995229,
      "candidate": "def cuboid_volume(radius):\n    return (4/3)*pi*radius**3\n\n\nprint(cuboid_volume(3))"
    },
    {
      "rank": 94,
      "score": 7.738292593776799,
      "candidate": "def cuboid_volume(length, width, height):\n    return (length * width * height) ** (1/3)\n\n\nprint(cuboid_volume(3, 4, 5))"
    },
    {
      "rank": 95,
      "score": 7.7320703513377165,
      "candidate": "import math\n\ndef cuboid(x,y,z):\n    return math.sqrt((x**2) + (y**2) + (z**2))\n\nprint(cuboid(1,1,1))\nprint(cuboid(1,1,2))\nprint(cuboid(1,2,1))\nprint(cuboid(2,1,1))\nprint(cuboid(2,2,1))\nprint(cuboid(2,2,2))\nprint(cuboid(2,2,3))\nprint(cuboid(2,3,3))\nprint(cuboid(3,3,3))\nprint(cuboid(3,3,4))\nprint(cuboid(4,4,4))\nprint(cuboid(4,4,5))\nprint(cuboid(5,5,5))\nprint(cuboid(5,5,6))\nprint(cuboid(6,5,5))\nprint(cuboid(6,5,7))\nprint(cuboid(7,5,5))\nprint(cuboid(7,5,8))\nprint(cuboid(8,5,5))\nprint(cuboid(8,5,9))\nprint(cuboid(8,9,5))\nprint(cuboid(9,9,5))\nprint(cuboid(9,9,9))\nprint(cuboid(10,9,9))\nprint(cuboid(10,10,9))\nprint(cuboid(10,10,10))\nprint(cuboid(10,10,10))\nprint(cuboid(10,10,10))\nprint(cuboid(10,10,10))\nprint(cuboid(10,10,10))\nprint(cuboid(10,10,10))\nprint(cuboid(10,10,10))\nprint(cuboid(10,10,10))"
    },
    {
      "rank": 96,
      "score": 7.5819855281879285,
      "candidate": "def cuboid_volume(r, h, b):\n    return (r * r) * (h * h) * b\n\nprint(cuboid_volume(2, 2, 2))"
    },
    {
      "rank": 97,
      "score": 7.4506599871439985,
      "candidate": "def volume(radius):\n    return 3.14159 * radius ** 2\n\n\nassert volume(3) == 3.14159\nassert volume(4) == 4.14159\nassert volume(5) == 8.14159"
    },
    {
      "rank": 98,
      "score": 7.134571892399572,
      "candidate": "def volume(r, theta, phi):\n    return r * r * r * r * r * (theta - phi)\n\nprint(volume(3, 4, 5))"
    },
    {
      "rank": 99,
      "score": 3.0,
      "candidate": "def cuboid_volume(r, h, w):\n    return r * h * w\n\n\nif __name__ == \"__main__\":\n    assert cuboid_volume(2, 2, 2) == 6"
    },
    {
      "rank": 100,
      "score": 3.0,
      "candidate": "def cuboid_volume(r, h, w):\n    return r * h * w\n\n\nprint(cuboid_volume(1, 1, 1))"
    }
  ]
}