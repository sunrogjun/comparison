{
  "timestamp": "2025-09-14T13:53:31.073841",
  "method": "improved_llm_judge",
  "judge_model": "codellama/CodeLlama-7b-Python-hf",
  "target_model": "codet5-770m",
  "dataset": "mbpp",
  "problem_number": 194,
  "total_candidates": 100,
  "results": [
    {
      "rank": 1,
      "score": 10.0,
      "candidate": "def inversions(lst):\n    i = 0\n    while i < len(lst) - 1:\n        if lst[i] > lst[i+1]:\n            lst[i], lst[i+1] = lst[i+1], lst[i]\n        i += 1\n\nlst = [1,2,3,4,5,6,7,8]\ninversions(lst)\nprint(lst)\n\nlst = [1,2,3,4,5,6,7,8,9,10]\ninversions(lst)\nprint(lst)"
    },
    {
      "rank": 2,
      "score": 10.0,
      "candidate": "def find_inversions(tuple_list):\n    # Write your code here\n    for i in range(len(tuple_list)):\n        for j in range(i+1, len(tuple_list)):\n            if tuple_list[i] > tuple_list[j]:\n                temp = tuple_list[i]\n                tuple_list[i] = tuple_list[j]\n                tuple_list[j] = temp\n    return tuple_list\n\n\nprint(find_inversions([1, 2, 3, 4, 5, 6]))\nprint(find_inversions([5, 6, 7, 8, 9, 10]))\nprint(find_inversions([]))"
    },
    {
      "rank": 3,
      "score": 10.0,
      "candidate": "def find_inversions(tup):\n    return tuple(sorted(tup))\n\nif __name__ == '__main__':\n    assert find_inversions((1,2,3)) == (1,2,3)\n    assert find_inversions((1,2,3,4)) == (1,2,3,4)\n    assert find_inversions((2,1,4)) == (2,1,4)\n    assert find_inversions((2,4,3,1)) == (2,4,3,1)\n    assert find_inversions((2,4,3,1,5)) == (2,4,3,1,5)\n    assert find_inversions((2,4,3,1,5,6)) == (2,4,3,1,5,6)\n    assert find_inversions((2,4,3,1,5,6,7)) == (2,4,3,1,5,6,7)\n    assert find_inversions((2,4,3,1,5,6,7,8)) == (2,4,3,1,5,6,7,8)\n    assert find_inversions((2,4,3,1,5,6,7,8,9)) == (2,4,3,1,5,6,7,8,9)\n    assert find_inversions((2,4,3,1,5,6,7,8,9,10)) == (2,4,3,1,5,6,7,8,9,10)\n    assert find_inversions((2,4,3,1,5,6,7,8,9,10,11,12,13,14,15)) == (2,4,3,1,5,6,7,8,9,10,11,12,13,14,15)"
    },
    {
      "rank": 4,
      "score": 10.0,
      "candidate": "def inversions(tup):\n    inversions = []\n    for i in range(len(tup) - 1, -1, -1):\n        if tup[i] > tup[i + 1]:\n            inversions.append(tup[i])\n    return inversions\n\n\nprint(inversions((2, 4, 6, 8, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10"
    },
    {
      "rank": 5,
      "score": 10.0,
      "candidate": "def inversions(arr):\n    # write your code here\n    inversions_list = []\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] > arr[j]:\n                inversions_list.append(arr[j])\n                break\n    return inversions_list\n\n\nif __name__ == '__main__':\n    print(inversions([2, 3, 5, 6, 7]))"
    },
    {
      "rank": 6,
      "score": 10.0,
      "candidate": "def inversions(tup):\n    n = len(tup)\n    inversions = []\n    for i in range(n-1, 0, -1):\n        for j in range(n-1):\n            if tup[i] > tup[j]:\n                inversions.append((tup[j], tup[i]))\n                break\n    return inversions\n\n\nprint(inversions((3, 2, 1, 5)))"
    },
    {
      "rank": 7,
      "score": 10.0,
      "candidate": "def inversions(t):\n    # Write your code here\n    for i in range(len(t)-1, 0, -1):\n        if t[i] > t[i-1]:\n            print(t[i], end=' ')\n\n\nif __name__ == '__main__':\n    t = [1, 2, 3, 4, 5]\n    inversions(t)"
    },
    {
      "rank": 8,
      "score": 10.0,
      "candidate": "def inversions(lst):\n    res = []\n    for i in range(len(lst)):\n        for j in range(i + 1, len(lst)):\n            if lst[i] > lst[j]:\n                res.append(lst[j])\n                break\n    return res\n\n\nprint(inversions([5, 3, 2, 1, 4]))"
    },
    {
      "rank": 9,
      "score": 10.0,
      "candidate": "class Solution(object):\n    def findInversions(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[int]\n        \"\"\"\n        res = []\n        for i in range(len(nums)):\n            if i == 0:\n                res.append(nums[i])\n                continue\n\n            if nums[i-1] < nums[i]:\n                res.append(nums[i])\n\n        return res\n\n\ns = Solution()\nprint s.findInversions([1,2,3,4])"
    },
    {
      "rank": 10,
      "score": 10.0,
      "candidate": "def inversions(tuple_list):\n    new_list = []\n    for x in tuple_list:\n        x.reverse()\n        new_list.append(x)\n    return new_list\n\n\ndef main():\n    print(inversions([1, 2, 3, 4, 5]))\n    print(inversions([1, 2, 3, 4, 5, 6]))\n    print(inversions([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\n    print(inversions([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 11,
      "score": 10.0,
      "candidate": "def find_inversions(list):\n    list.sort()\n    count = 0\n    for i in range(1, len(list)):\n        if list[i] > list[i - 1]:\n            count += 1\n            list.insert(i, list[i - 1])\n    return count\n\n\nprint(find_inversions([1, 2, 3, 4, 5]))\nprint(find_inversions([1, 2, 3, 4, 5, 6]))\nprint(find_inversions([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]))"
    },
    {
      "rank": 12,
      "score": 10.0,
      "candidate": "def inversions(list):\n    inversions = []\n    for i in range(len(list)):\n        for j in range(len(list)-1, -1, -1):\n            if list[i] > list[j]:\n                inversions.append(list[j])\n                list[j+1] = list[i]\n                break\n    return inversions\n\n\nif __name__ == '__main__':\n    list = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1]\n    print(inversions(list))"
    },
    {
      "rank": 13,
      "score": 10.0,
      "candidate": "def inversions(lst):\n    for i in range(len(lst)-1, 0, -1):\n        for j in range(i):\n            if lst[i] > lst[j]:\n                lst[i], lst[j] = lst[j], lst[i]\n    return lst\n\n\nprint(inversions([1, 2, 3, 4, 5]))"
    },
    {
      "rank": 14,
      "score": 10.0,
      "candidate": "def inversions(tup):\n    # if tup is empty, return None\n    if len(tup) == 0:\n        return None\n\n    # else, sort the tup and return the result\n    sorted_tup = sorted(tup)\n    return sorted_tup\n\n\nprint(inversions((1, 2, 3, 4, 5, 6)))"
    },
    {
      "rank": 15,
      "score": 10.0,
      "candidate": "def inversions(tuples):\n    inversions = []\n    for i in range(len(tuples)):\n        for j in range(i + 1, len(tuples)):\n            if tuples[i] > tuples[j]:\n                inversions.append(tuples[j])\n                inversions.append(tuples[i])\n    return inversions\n\n\nprint(inversions([2, 3, 5, 7, 9]))"
    },
    {
      "rank": 16,
      "score": 10.0,
      "candidate": "def tuple_inversions(t):\n    t.sort()\n    for i in range(len(t)-1, -1, -1):\n        if t[i] > t[i+1]:\n            t[i], t[i+1] = t[i+1], t[i]\n    return t\n\nprint(tuple_inversions((1,2,3,4,5)))\nprint(tuple_inversions((1,3,2,4,5)))"
    },
    {
      "rank": 17,
      "score": 10.0,
      "candidate": "def find_inversions(tuple_list):\n    \"\"\"\n    :type tuple_list: List[int]\n    :rtype: List[int]\n    \"\"\"\n    inversions = []\n    for i in range(len(tuple_list) - 1, 0, -1):\n        if tuple_list[i - 1] > tuple_list[i]:\n            inversions.append(tuple_list[i - 1])\n    return inversions\n\n\nprint(find_inversions([1, 2, 3, 4, 5]))"
    },
    {
      "rank": 18,
      "score": 10.0,
      "candidate": "def find_inversions(list_of_tuples):\n    sorted_list = sorted(list_of_tuples)\n    return sorted_list\n\nif __name__ == '__main__':\n    list_of_tuples = (1,2,3,4,5)\n    print(find_inversions(list_of_tuples))"
    },
    {
      "rank": 19,
      "score": 10.0,
      "candidate": "def find_inversions(tuple_list):\n    for i in range(len(tuple_list) - 1, 0, -1):\n        if tuple_list[i][1] > tuple_list[i - 1][1]:\n            temp = tuple_list[i]\n            tuple_list[i] = tuple_list[i - 1]\n            tuple_list[i - 1] = temp\n    return tuple_list\n\n\nif __name__ == '__main__':\n    tuple_list = [(1, 2, 3), (5, 6, 7), (8, 9, 10)]\n    print(find_inversions(tuple_list))"
    },
    {
      "rank": 20,
      "score": 10.0,
      "candidate": "class Solution:\n    def inversions(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[int]\n        \"\"\"\n        result = []\n        for i in range(len(nums)):\n            if i == 0:\n                continue\n            if nums[i] > nums[i-1]:\n                result.append(nums[i])\n                result.append(nums[i-1])\n        return result\n\n\nif __name__ == \"__main__\":\n    solution = Solution()\n    print(solution.inversions([1, 2, 3, 4, 5]))"
    },
    {
      "rank": 21,
      "score": 10.0,
      "candidate": "def inversions(arr):\n    # write your code here\n    inversions = []\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] > arr[j]:\n                temp = arr[i]\n                arr[i] = arr[j]\n                arr[j] = temp\n    return arr"
    },
    {
      "rank": 22,
      "score": 10.0,
      "candidate": "def inversions(lst):\n    n = len(lst)\n    for i in range(n):\n        for j in range(i + 1, n):\n            if lst[i] > lst[j]:\n                lst[i], lst[j] = lst[j], lst[i]\n    return lst\n\nprint(inversions([1,3,5,6,8]))"
    },
    {
      "rank": 23,
      "score": 10.0,
      "candidate": "def find_inversions(arr):\n    # Write your code here\n    n = len(arr)\n    if n <= 1:\n        return arr\n    else:\n        left = arr[:n//2]\n        right = arr[n//2:]\n        return find_inversions(left) + [right]\n\n\nprint(find_inversions([1, 2, 3, 4, 5]))\nprint(find_inversions([1, 2, 3, 4]))\nprint(find_inversions([1, 2, 3]))\nprint(find_inversions([1, 2, 3, 4, 5, 6, 7, 8]))\nprint(find_inversions([1, 2, 3, 4, 5, 6, 7]))\nprint(find_inversions([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))"
    },
    {
      "rank": 24,
      "score": 10.0,
      "candidate": "def find_inversions(tuple):\n    if len(tuple) == 0:\n        return []\n    else:\n        return sorted(tuple, key = lambda x: x[0])\n\n\ndef main():\n    print(find_inversions([]))\n    print(find_inversions([1, 2, 3, 4, 5]))\n    print(find_inversions([1, 2, 3, 4, 5, 6, 7]))\n    print(find_inversions([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]))\n    print(find_inversions([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]))\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 25,
      "score": 10.0,
      "candidate": "def inversion_finder(tuple_list):\n    inversions = []\n    for i in range(len(tuple_list) - 1):\n        if tuple_list[i] > tuple_list[i + 1]:\n            inversions.append(tuple_list[i])\n    return inversions\n\n\ndef test_function(test_case):\n    tuple_list = test_case\n    solution = inversion_finder(tuple_list)\n    print(solution)\n    if solution == sorted(tuple_list):\n        print(\"Pass\")\n    else:\n        print(\"Fail\")\n\n\ntest_function([1, 2, 3, 4, 5])\ntest_function([4, 5, 3, 2, 1])\ntest_function([4, 5, 3, 2])\ntest_function([])\ntest_function([1])\ntest_function([1, 2])\ntest_function([1, 2, 3])\ntest_function([1, 2, 3, 4])\ntest_function([1, 2, 3, 4, 5])\ntest_function([1, 2, 3, 4, 5, 6])\ntest_function([1, 2, 3, 4, 5, 6, 7])\ntest_function([1, 2, 3, 4, 5, 6, 7, 8])\ntest_function([1, 2, 3, 4, 5, 6, 7, 8, 9])\ntest_function([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\ntest_function([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])\ntest_function([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12])\ntest_function([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13])\ntest_function([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15])\ntest_function([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17])"
    },
    {
      "rank": 26,
      "score": 10.0,
      "candidate": "def inversions(l):\n    if len(l) <= 1:\n        return l\n    else:\n        mid = len(l)//2\n        l1 = l[:mid]\n        l2 = l[mid:]\n        l3 = inversions(l1)\n        l4 = inversions(l2)\n        return l3 + l4\n\ndef test_inversions():\n    assert inversions([1,2,3,4,5]) == [1,2,3,4,5]\n    assert inversions([2,3,4,5,6]) == [2,3,4,5,6]\n    assert inversions([]) == []\n    assert inversions([2,3,4,5]) == [2,3,4,5]\n    assert inversions([1,2,3,4]) == [1,2,3,4]\n    assert inversions([]) == []\n    assert inversions([1,2,3,4,5]) == [1,2,3,4,5]\n    assert inversions([1,2,3,4,5,6,7]) == [1,2,3,4,5,6,7]\n    assert inversions([1,2,3,4,5,6,7,8,9]) == [1,2,3,4,5,6,7,8,9]\n\nif __name__ == '__main__':\n    test_inversions()"
    },
    {
      "rank": 27,
      "score": 10.0,
      "candidate": "def tuple_inversion(t):\n    if len(t) == 0:\n        return t\n    if len(t) == 1:\n        return t\n    return tuple_inversion(t[1:]) + tuple_inversion(t[:1])\n\nif __name__ == '__main__':\n    print(tuple_inversion([]))\n    print(tuple_inversion([1]))\n    print(tuple_inversion([1,2]))\n    print(tuple_inversion([1,2,3]))\n    print(tuple_inversion([2,3,4,5]))\n    print(tuple_inversion([2,3,4,5,6,7]))\n    print(tuple_inversion([1,1,1,1,1,1,1,1,1]))\n    print(tuple_inversion([1,2,3,4,5,6,7,8]))\n    print(tuple_inversion([1,2,3,4,5,6,7,8,9,10]))\n    print(tuple_inversion([1,2,3,4,5,6,7,8,9,10,11,12,13,14]))\n    print(tuple_inversion([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]))\n    print(tuple_inversion([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16]))"
    },
    {
      "rank": 28,
      "score": 10.0,
      "candidate": "def inversions(tuple_list):\n    for i in range(len(tuple_list) - 1, 0, -1):\n        if tuple_list[i - 1] > tuple_list[i]:\n            tuple_list[i - 1], tuple_list[i] = tuple_list[i], tuple_list[i - 1]\n    return tuple_list\n\n\ndef main():\n    print(inversions((1, 2, 3, 4, 5, 6, 7)))\n\n\nmain()"
    },
    {
      "rank": 29,
      "score": 10.0,
      "candidate": "def inversions(t):\n    \"\"\"\n    :type t: List[int]\n    :rtype: List[int]\n    \"\"\"\n    if len(t) == 1:\n        return t\n    else:\n        left = inversions(t[:len(t)//2])\n        right = inversions(t[len(t)//2:])\n        return sorted(left + right)\n\n\nif __name__ == '__main__':\n    print(inversions([1, 2, 3]))"
    },
    {
      "rank": 30,
      "score": 10.0,
      "candidate": "def inversions(list_of_tuples):\n    return list(reversed(tuple(list_of_tuples)))\n\n\ndef main():\n    test_cases = [([], []), ([1, 2, 3, 4], [1, 2, 3, 4]), ([1, 2, 3, 4, 5], [1, 2, 3, 4, 5]),\n                  ([1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6]), ([1, 2, 3, 4, 5, 6, 7], [1, 2, 3, 4, 5, 6, 7]),\n                  ([1, 2, 3, 4, 5, 6, 7, 8, 9], [1, 2, 3, 4, 5, 6, 7, 8, 9])]\n    for test_case in test_cases:\n        assert inversions(test_case[0]) == test_case[1]\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 31,
      "score": 10.0,
      "candidate": "def find_inversions(tuple_list):\n    inversions = []\n    for i in range(1, len(tuple_list)):\n        for j in range(i - 1, -1, -1):\n            if tuple_list[j] > tuple_list[i]:\n                inversions.append(tuple_list[i])\n                inversions.append(tuple_list[j])\n    return inversions\n\n\nprint(find_inversions([1, 2, 3, 4, 5]))\nprint(find_inversions([1, 2, 3, 4, 5, 6, 7, 8, 9]))\nprint(find_inversions([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))"
    },
    {
      "rank": 32,
      "score": 10.0,
      "candidate": "def tuple_inversions(tup):\n    # Write your code here\n    return sorted(list(set(tup)))\n\nif __name__ == \"__main__\":\n    print(tuple_inversions((1, 2, 3, 4, 5)))\n    print(tuple_inversions((1, 2, 3, 4, 5, 6, 7, 8, 9)))\n    print(tuple_inversions((1, 2, 3, 4, 5, 6, 7, 8, 9, 10)))\n    print(tuple_inversions((1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11)))"
    },
    {
      "rank": 33,
      "score": 10.0,
      "candidate": "def find_inversions(tup):\n    # write your code here\n    i=0\n    j=len(tup)-1\n    while i<j:\n        if tup[i]>tup[j]:\n            tup[i],tup[j]=tup[j],tup[i]\n            i+=1\n            j-=1\n        elif tup[i]<tup[j]:\n            tup[j],tup[i]=tup[i],tup[j]\n            i+=1\n        else:\n            i+=1\n            j-=1\n    return tup"
    },
    {
      "rank": 34,
      "score": 10.0,
      "candidate": "def find_inversions(t):\n    inversions = []\n    for i in range(len(t)):\n        for j in range(i+1, len(t)):\n            if t[i] > t[j]:\n                inversions.append(t[i])\n                inversions.append(t[j])\n                break\n    return inversions\n\nprint(find_inversions((1,2,3,4)))\nprint(find_inversions((1,2,3,4,5)))\nprint(find_inversions((1,2,3,4,5,6,7)))\nprint(find_inversions((1,2,3,4,5,6,7,8)))\nprint(find_inversions((1,2,3,4,5,6,7,8,9)))\nprint(find_inversions((1,2,3,4,5,6,7,8,9,10)))"
    },
    {
      "rank": 35,
      "score": 9.0,
      "candidate": "def find_inversions(t):\n    n = len(t)\n    for i in range(n-1):\n        for j in range(i+1, n):\n            if t[i] > t[j]:\n                t[i], t[j] = t[j], t[i]\n    return t\n\nt = (3, 4, 5, 6, 7, 8)\nprint(find_inversions(t))"
    },
    {
      "rank": 36,
      "score": 8.0,
      "candidate": "def inversion(tuple_):\n    if len(tuple_) == 1:\n        return tuple_\n    else:\n        l = len(tuple_)\n        left = inversion(tuple_[:l//2])\n        right = inversion(tuple_[l//2:])\n        return (left,) + right\n\n\nif __name__ == '__main__':\n    print(inversion((3, 2, 1, 4)))\n    print(inversion((3, 2, 1, 4, 5)))\n    print(inversion((3, 2, 1, 4, 5, 6)))\n    print(inversion((3, 2, 1, 4, 5, 6, 7)))"
    },
    {
      "rank": 37,
      "score": 8.0,
      "candidate": "def inversions(arr):\n    if len(arr) < 2:\n        return arr\n    else:\n        l = len(arr)\n        i = 0\n        j = l - 1\n        while i < j:\n            if arr[i] > arr[j]:\n                temp = arr[i]\n                arr[i] = arr[j]\n                arr[j] = temp\n                i += 1\n                j -= 1\n            else:\n                i += 1\n        return arr\n\n\nif __name__ == \"__main__\":\n    arr = [1, 2, 3, 4, 5]\n    print(inversions(arr))"
    },
    {
      "rank": 38,
      "score": 8.0,
      "candidate": "def inversions(tuple_list):\n    sorted_list = sorted(tuple_list)\n    reversed_list = []\n    for i in range(len(tuple_list)):\n        if sorted_list[i] > sorted_list[len(tuple_list) - 1 - i]:\n            reversed_list.append(sorted_list[i])\n        else:\n            reversed_list.append(sorted_list[len(tuple_list) - 1 - i])\n    return reversed_list\n\n\nif __name__ == \"__main__\":\n    print(inversions([1, 2, 3, 4, 5]))\n    print(inversions([1, 2, 3, 4, 5, 6]))\n    print(inversions([1, 2, 3, 4, 5, 6, 7]))"
    },
    {
      "rank": 39,
      "score": 8.0,
      "candidate": "def inversions(tuple_list):\n    return [tuple_list[i] for i in range(len(tuple_list)) if tuple_list[i] > tuple_list[i+1]]\n\n\nif __name__ == \"__main__\":\n    t1 = (1, 2, 3, 4, 5, 6)\n    t2 = (3, 4, 5, 6, 7, 8)\n    t3 = (1, 2, 4, 6, 7, 8)\n\n    assert inversions(t1) == [1, 2, 3, 4, 5, 6, 7, 8]\n    assert inversions(t2) == [3, 4, 5, 6, 7, 8]\n    assert inversions(t3) == [1, 2, 4, 6, 7, 8]"
    },
    {
      "rank": 40,
      "score": 8.0,
      "candidate": "def find_inversions(tuple_list):\n    # Write your code here\n    for i in range(len(tuple_list)):\n        for j in range(len(tuple_list)):\n            if i!= j:\n                if tuple_list[i] > tuple_list[j]:\n                    temp = tuple_list[i]\n                    tuple_list[i] = tuple_list[j]\n                    tuple_list[j] = temp\n    return tuple_list\n\n\nprint(find_inversions((1, 2, 3, 4, 5, 6)))\nprint(find_inversions((1, 2, 3, 4, 5, 6, 7)))"
    },
    {
      "rank": 41,
      "score": 8.0,
      "candidate": "class Solution(object):\n    def findInversions(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[int]\n        \"\"\"\n        if not nums:\n            return nums\n        sorted_nums = sorted(nums)\n        count = 0\n        for i in range(len(nums)):\n            if nums[i] > sorted_nums[count]:\n                nums[count], nums[i] = nums[i], nums[count]\n                count += 1\n        return nums"
    },
    {
      "rank": 42,
      "score": 8.0,
      "candidate": "def find_inversions(t):\n    if len(t) < 2:\n        return t\n    else:\n        l = find_inversions(t[:len(t)//2])\n        r = find_inversions(t[len(t)//2:])\n        return [l[0], r[0], l[1], r[1]]\n\n\nif __name__ == \"__main__\":\n    assert find_inversions((1, 2, 3)) == [1, 2, 3]\n    assert find_inversions((1, 3, 5)) == [1, 3, 5]\n    assert find_inversions((3, 4, 5)) == [3, 4, 5]\n    assert find_inversions((1, 2, 3, 4, 5, 6, 7)) == [1, 2, 3, 4, 5, 6, 7]"
    },
    {
      "rank": 43,
      "score": 8.0,
      "candidate": "def find_inversions(t):\n    n = len(t)\n    if n == 1:\n        return t\n    if n == 2:\n        return t[0], t[1]\n    if n == 3:\n        return t[0], t[1], t[2]\n    return find_inversions(t[0]), find_inversions(t[1]), find_inversions(t[2])\n\n\ndef test():\n    t = (1, 2, 3, 4, 5)\n    print(find_inversions(t))\n\n\ntest()"
    },
    {
      "rank": 44,
      "score": 8.0,
      "candidate": "def inversions(arr):\n    if len(arr) == 1:\n        return arr\n    else:\n        mid = len(arr) // 2\n        left_inversions = inversions(arr[:mid])\n        right_inversions = inversions(arr[mid:])\n        inversions_list = []\n        for i in range(len(left_inversions)):\n            if left_inversions[i] > right_inversions[i]:\n                inversions_list.append(left_inversions[i])\n            elif left_inversions[i] < right_inversions[i]:\n                inversions_list.append(right_inversions[i])\n            else:\n                inversions_list.append(left_inversions[i])\n        return inversions_list"
    },
    {
      "rank": 45,
      "score": 8.0,
      "candidate": "def inversions(t):\n    n = len(t)\n    if n == 1:\n        return t\n\n    if n == 2:\n        if t[0] > t[1]:\n            return [t[0], t[1]]\n        else:\n            return [t[1], t[0]]\n\n    if n == 3:\n        if t[0] < t[1]:\n            return [t[0], t[1], t[2]]\n        else:\n            return [t[2], t[0], t[1]]\n\n    if n == 4:\n        if t[0] < t[1] and t[0] < t[2]:\n            return [t[0], t[1], t[2]]\n        else:\n            return [t[2], t[0], t[1]]\n\n    if n == 5:\n        if t[0] > t[1] and t[0] > t[2]:\n            return [t[0], t[1], t[2]]\n        else:\n            return [t[2], t[0], t[1]]\n\n    if n == 6:\n        if t[0] > t[1] and t[0] > t[2]:\n            return [t[0], t[1], t[2]]\n        elif t[0] > t[2] and t[0] > t[3]:\n            return [t[2], t[0], t[3]]\n        else:\n            return [t[3], t[0], t[1]]\n\n    if n == 7:\n        if t[0] > t[1] and t[0] > t[2] and t[0] > t[3] and t[0] > t[4]:\n            return [t[0], t[1], t[2], t[3], t[4]]\n        elif t[0] > t[2] and t[0] > t[3] and t[0] > t[4] and t[0] > t[5]:\n            return [t[3], t[0], t[4], t[1], t[5]]\n        elif"
    },
    {
      "rank": 46,
      "score": 8.0,
      "candidate": "def inversions(lst):\n    inversions_list = []\n    for i in range(len(lst)):\n        for j in range(i + 1, len(lst)):\n            if lst[i] > lst[j]:\n                inversions_list.append(lst[j])\n                break\n    return inversions_list\n\n\nprint(inversions([2, 4, 5, 6, 7]))"
    },
    {
      "rank": 47,
      "score": 8.0,
      "candidate": "def find_inversions(tuple_list):\n    tuple_list.sort()\n    #print(tuple_list)\n    inversions = []\n    #print(tuple_list[0])\n    for i in range(1, len(tuple_list)):\n        if tuple_list[i] < tuple_list[i-1]:\n            inversions.append(tuple_list[i])\n    return inversions\n\n\ntuple_list = [(2, 4, 6, 8), (1, 3, 5, 7), (1, 2, 3)]\nprint(tuple_list)\nprint(find_inversions(tuple_list))"
    },
    {
      "rank": 48,
      "score": 8.0,
      "candidate": "def tuple_inversions(tuple_list):\n    inversions = []\n    for i in range(len(tuple_list)):\n        for j in range(i + 1, len(tuple_list)):\n            if tuple_list[i] > tuple_list[j]:\n                inversions.append(tuple_list[i])\n                inversions.append(tuple_list[j])\n\n    return inversions\n\n\nprint(tuple_inversions([1, 2, 3, 4, 5]))\nprint(tuple_inversions([1, 2, 3, 4, 5, 6]))\nprint(tuple_inversions([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))"
    },
    {
      "rank": 49,
      "score": 8.0,
      "candidate": "def find_inversions(tup):\n    inversions = []\n    for i in range(len(tup)):\n        if tup[i] > tup[i+1]:\n            inversions.append(tup[i])\n            inversions.append(tup[i+1])\n\n    return inversions\n\n\nif __name__ == \"__main__\":\n    assert find_inversions((1, 2, 3, 4, 5, 6)) == [4, 5, 6]\n    assert find_inversions((4, 2, 1, 3, 5, 6)) == [1, 2, 3, 4, 5, 6]\n    assert find_inversions((1, 2, 3, 4, 5, 6, 7)) == [1, 2, 3, 4, 5, 6, 7]\n    assert find_inversions((1, 2, 3, 4, 5, 6, 7, 8)) == [1, 2, 3, 4, 5, 6, 7, 8]\n    assert find_inversions((1, 2, 3, 4, 5, 6, 7, 8, 9)) == [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    assert find_inversions((1, 2, 3, 4, 5, 6, 7)) == [1, 2, 3, 4, 5, 6]\n    assert find_inversions((1, 2, 3, 4, 5, 6, 7, 8, 9, 10)) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]"
    },
    {
      "rank": 50,
      "score": 8.0,
      "candidate": "def inversion(list):\n    if len(list) <= 1:\n        return list\n    list.sort()\n    return [list[i] for i in range(len(list) - 1, -1, -1)]\n\n\nprint(inversion([1, 2, 3, 4, 5]))"
    },
    {
      "rank": 51,
      "score": 8.0,
      "candidate": "def inversions(T):\n    if len(T) == 0:\n        return\n    inversions(T[1:])\n    inversions(T[:-1])\n    for i in range(len(T)-1,-1,-1):\n        if T[i] > T[i+1]:\n            T[i], T[i+1] = T[i+1], T[i]\n    return T\n\ndef main():\n    T = (2, 1, 6, 3, 5, 4)\n    print(inversions(T))\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 52,
      "score": 8.0,
      "candidate": "def inversions(t):\n    # Write your code here\n    inversions = []\n    for i in range(len(t)-1):\n        if t[i] > t[i+1]:\n            inversions.append(t[i])\n    return inversions\n\nprint(inversions((1,3,4,2,5)))\nprint(inversions((2,3,4,5,6)))"
    },
    {
      "rank": 53,
      "score": 8.0,
      "candidate": "def find_inversions(t):\n    n = len(t)\n    for i in range(n-1):\n        for j in range(i+1, n):\n            if t[i] > t[j]:\n                t[i], t[j] = t[j], t[i]\n    return t\n\n\nt = (1, 2, 3, 4, 5)\nprint(find_inversions(t))"
    },
    {
      "rank": 54,
      "score": 8.0,
      "candidate": "def find_inversions(t):\n    inversions = []\n    for i in range(len(t)-1, 0, -1):\n        if t[i] > t[i-1]:\n            inversions.append(t[i-1])\n    return inversions\n\n\nprint(find_inversions((2, 4, 6, 8, 10, 9, 1, 3)))\nprint(find_inversions((1, 2, 3, 4, 5, 6, 7)))"
    },
    {
      "rank": 55,
      "score": 8.0,
      "candidate": "def find_inversions(lst):\n    for i in range(len(lst)-1, 0, -1):\n        if lst[i] > lst[i-1]:\n            lst[i], lst[i-1] = lst[i-1], lst[i]\n            print(lst)\n    return lst\n\n\nif __name__ == \"__main__\":\n    lst = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    print(find_inversions(lst))"
    },
    {
      "rank": 56,
      "score": 8.0,
      "candidate": "def inversions(tuple_list):\n    inversions = []\n    for i in range(len(tuple_list)):\n        for j in range(i+1, len(tuple_list)):\n            if tuple_list[i] > tuple_list[j]:\n                temp = tuple_list[i]\n                tuple_list[i] = tuple_list[j]\n                tuple_list[j] = temp\n            if tuple_list[i] == tuple_list[j]:\n                inversions.append(tuple_list[i])\n    return inversions\n\n\nif __name__ == \"__main__\":\n    print(inversions([1, 2, 3, 4, 5]))"
    },
    {
      "rank": 57,
      "score": 8.0,
      "candidate": "def find_inversions(tuple_list):\n    inversions = []\n\n    for i in range(len(tuple_list)):\n        if i == 0:\n            continue\n        if tuple_list[i] > tuple_list[i-1]:\n            inversions.append(tuple_list[i])\n            inversions.append(tuple_list[i-1])\n\n    return inversions"
    },
    {
      "rank": 58,
      "score": 8.0,
      "candidate": "def inversion_finder(tuple_list):\n    return sorted(tuple_list, reverse=True)\n\n\ndef main():\n    print(inversion_finder([1, 2, 3, 4, 5]))\n    print(inversion_finder([1, 2, 3, 4]))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 59,
      "score": 8.0,
      "candidate": "def inversions(nums):\n    sorted_nums = sorted(nums)\n    return sorted_nums\n\n\nif __name__ == \"__main__\":\n    assert inversions([1, 2, 3, 4, 5]) == [5, 4, 3, 2, 1]\n    assert inversions([1, 2, 3, 4, 5, 6, 7]) == [6, 7, 5, 4, 3, 2, 1]"
    },
    {
      "rank": 60,
      "score": 8.0,
      "candidate": "def inversions(tuples):\n    inversions = []\n    for i in range(len(tuples)-1, 0, -1):\n        if tuples[i] > tuples[i-1]:\n            inversions.append(tuples[i])\n        if tuples[i] < tuples[i-1]:\n            inversions.append(tuples[i-1])\n    return inversions\n\nprint(inversions([1, 2, 3, 4, 5]))"
    },
    {
      "rank": 61,
      "score": 8.0,
      "candidate": "# Write a function that returns a list of the elements in the given tuple list that are inversions of the given tuple list.\n# The list is assumed to be non-empty.\n\n\ndef find_inversions(t):\n    inversions = []\n    if len(t) <= 1:\n        return t\n    for i in range(1, len(t)):\n        if t[i] > t[i - 1]:\n            inversions.append(t[i - 1])\n            inversions.append(t[i])\n    return inversions\n\n\n# Tests\nprint(find_inversions((1, 2, 3, 4)))\nprint(find_inversions((1, 2, 3, 4, 5)))\nprint(find_inversions((1, 2, 3, 4, 5, 6)))"
    },
    {
      "rank": 62,
      "score": 8.0,
      "candidate": "def inversions(tuple_list):\n    if len(tuple_list) < 2:\n        return tuple_list\n\n    inversions_list = []\n\n    for i in range(len(tuple_list)):\n        if tuple_list[i] > tuple_list[i-1]:\n            inversions_list.append(tuple_list[i])\n        else:\n            inversions_list.append(tuple_list[i-1])\n    return inversions_list\n\nprint(inversions([1, 3, 2, 4]))\nprint(inversions([1, 2, 3, 4, 5]))\nprint(inversions([1, 2, 3, 4, 5, 6, 7, 8, 9]))\nprint(inversions([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\nprint(inversions([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]))\nprint(inversions([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]))\nprint(inversions([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21]))"
    },
    {
      "rank": 63,
      "score": 8.0,
      "candidate": "def find_inversions(tuple):\n    \"\"\"\n    :type tuple: List[int]\n    :rtype: List[int]\n    \"\"\"\n    if len(tuple) < 2:\n        return tuple\n    inversions = []\n    inversions.append(tuple[0])\n    for i in range(1, len(tuple)):\n        if tuple[i] > tuple[i - 1]:\n            inversions.append(tuple[i])\n    return inversions\n\nif __name__ == \"__main__\":\n    assert find_inversions([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert find_inversions([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]\n    assert find_inversions([1, 2, 3, 4, 5, 6]) == [1, 2, 3, 4, 5, 6]\n    assert find_inversions([1, 2, 3, 4, 5, 6, 7]) == [1, 2, 3, 4, 5, 6, 7]"
    },
    {
      "rank": 64,
      "score": 8.0,
      "candidate": "def inversions(arr):\n    # Write your code here\n    result = []\n    for i in range(len(arr)):\n        if arr[i] > arr[i + 1]:\n            result.append(arr[i])\n        else:\n            result.append(arr[i + 1])\n    return result\n\nprint(inversions([1,2,3,4,5]))"
    },
    {
      "rank": 65,
      "score": 8.0,
      "candidate": "def find_inversions(tup):\n    new_tup = []\n    for i in range(len(tup)):\n        if i == 0:\n            new_tup.append(tup[i])\n        elif i == len(tup) - 1:\n            new_tup.append(tup[-1])\n        else:\n            if tup[i] > tup[i-1]:\n                new_tup.append(tup[i])\n            else:\n                new_tup.append(tup[-1])\n    return new_tup\n\n\nprint(find_inversions((1, 2, 3, 4, 5)))"
    },
    {
      "rank": 66,
      "score": 8.0,
      "candidate": "def inversion(list_to_sort):\n    if list_to_sort == []:\n        return list_to_sort\n    else:\n        list_to_sort.sort()\n        return list_to_sort\n\n\nprint(inversion([1, 2, 3, 4, 5]))\nprint(inversion([3, 1, 5, 2, 4]))\nprint(inversion([]))\nprint(inversion([1, 2, 3]))"
    },
    {
      "rank": 67,
      "score": 8.0,
      "candidate": "def find_inversions(tuple_list):\n    # write your code here\n    inversions = []\n    for i in range(len(tuple_list)):\n        for j in range(len(tuple_list)):\n            if i < j:\n                if tuple_list[i] > tuple_list[j]:\n                    inversions.append(tuple_list[j])\n                    inversions.append(tuple_list[i])\n    return inversions\n\n\nprint(find_inversions([1, 2, 3, 4, 5]))\nprint(find_inversions([2, 3, 4, 5, 6, 7]))"
    },
    {
      "rank": 68,
      "score": 8.0,
      "candidate": "def inversions(tup):\n    inversions_list = []\n    if len(tup) <= 1:\n        return tup\n    for i in range(len(tup)):\n        if tup[i] < tup[i-1]:\n            inversions_list.append(tup[i])\n        else:\n            inversions_list.append(tup[i-1])\n    return inversions_list"
    },
    {
      "rank": 69,
      "score": 8.0,
      "candidate": "def find_inversions(T):\n    inversions = []\n    for i in range(len(T)-1,-1,-1):\n        if T[i] > T[i+1]:\n            inversions.append(T[i])\n    return inversions\n\ndef main():\n    T = (1, 2, 3, 4, 5)\n    print(find_inversions(T))\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 70,
      "score": 8.0,
      "candidate": "def find_inversions(lst):\n    for i in range(len(lst)-1, -1, -1):\n        if lst[i] > lst[i+1]:\n            return False\n    return True\n\n\nif __name__ == '__main__':\n    lst = [1, 5, 2, 3, 4]\n    print(find_inversions(lst))"
    },
    {
      "rank": 71,
      "score": 8.0,
      "candidate": "def inversions(tuple):\n    i = 0\n    while i < len(tuple):\n        j = i\n        while j < len(tuple):\n            if tuple[i] > tuple[j]:\n                tuple[i], tuple[j] = tuple[j], tuple[i]\n            j += 1\n        i += 1\n    return tuple\n\n\ndef main():\n    t = (1, 2, 3, 4, 5)\n    inversions(t)\n    print(t)\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 72,
      "score": 8.0,
      "candidate": "def inversions(lst):\n    inversions = []\n    for i in range(len(lst)-1, 0, -1):\n        if lst[i] > lst[i-1]:\n            inversions.append(lst[i])\n    return inversions\n\ndef test():\n    lst = [2,3,1,4,5]\n    print(inversions(lst))\n\ntest()"
    },
    {
      "rank": 73,
      "score": 8.0,
      "candidate": "def inversions(lst):\n    # write your code in Python 3.6\n    lst.sort()\n    i = 0\n    j = len(lst)-1\n    while i < j:\n        if lst[i] > lst[j]:\n            lst[i], lst[j] = lst[j], lst[i]\n            i += 1\n        j -= 1\n    return lst\n\n\nprint(inversions([1, 2, 3, 4]))\nprint(inversions([5, 6, 7, 8]))"
    },
    {
      "rank": 74,
      "score": 8.0,
      "candidate": "def inversions(list):\n    inversions = []\n    for i in range(len(list)-1, -1, -1):\n        if list[i] > list[i+1]:\n            inversions.append(list[i])\n    return inversions\n\nprint(inversions([1, 2, 3, 4, 5]))"
    },
    {
      "rank": 75,
      "score": 8.0,
      "candidate": "def inversions(tuple_list):\n    sorted_list = sorted(tuple_list)\n    for i in range(len(tuple_list) - 1, 0, -1):\n        if sorted_list[i] > sorted_list[i - 1]:\n            tuple_list[i], tuple_list[i - 1] = tuple_list[i - 1], tuple_list[i]\n    return tuple_list\n\ndef main():\n    print(inversions([1, 2, 3, 4, 5]))\n    print(inversions([1, 2, 3, 4, 5, 6]))\n    print(inversions([1, 2, 3, 4, 5, 6, 7]))\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 76,
      "score": 8.0,
      "candidate": "def inversions(t):\n    inversions = []\n    for i in range(len(t) - 1, 0, -1):\n        if t[i] > t[i - 1]:\n            inversions.append(t[i - 1])\n            inversions.append(t[i])\n    return inversions\n\n\nif __name__ == \"__main__\":\n    t = [1, 2, 3, 4]\n    print(inversions(t))"
    },
    {
      "rank": 77,
      "score": 8.0,
      "candidate": "def inversions(tuple_list):\n    inversions = []\n    for index in range(len(tuple_list)-1,-1,-1):\n        if tuple_list[index] > tuple_list[index+1]:\n            inversions.append(tuple_list[index])\n    return inversions\n\nprint(inversions([1, 2, 3, 4]))"
    },
    {
      "rank": 78,
      "score": 8.0,
      "candidate": "def find_inversions(t):\n    if len(t) == 0:\n        return []\n    else:\n        inversions = []\n        for i in range(len(t)):\n            for j in range(i+1, len(t)):\n                if t[i] > t[j]:\n                    inversions.append((i,j))\n        return inversions\n\nprint(find_inversions((5,6,4,3,2,1)))"
    },
    {
      "rank": 79,
      "score": 8.0,
      "candidate": "def find_inversions(tup):\n    if len(tup) == 1:\n        return tup\n\n    # find the inversions of the tuple\n    inversions = []\n    for i in range(len(tup)):\n        # find the index of the value\n        index = i\n        while index > 0:\n            if tup[index] > tup[index - 1]:\n                inversions.append(tup[index])\n                index -= 1\n            elif tup[index] < tup[index - 1]:\n                break\n\n    return inversions\n\n\nprint(find_inversions((5, 3, 2, 6, 4, 1, 7)))"
    },
    {
      "rank": 80,
      "score": 8.0,
      "candidate": "def inversions(arr):\n    result = []\n    for i in range(len(arr)):\n        if i == 0:\n            continue\n        if arr[i] > arr[i - 1]:\n            result.append(arr[i])\n        else:\n            result.append(arr[i - 1])\n    return result\n\n\narr = [3, 2, 4, 1, 5]\nprint(inversions(arr))"
    },
    {
      "rank": 81,
      "score": 8.0,
      "candidate": "def find_inversions(tuples):\n    # Write your code here\n    inversions = []\n    for i in range(len(tuples)-1):\n        for j in range(len(tuples)-i-1, -1, -1):\n            if tuples[i] > tuples[j]:\n                inversions.append(tuples[j])\n                break\n    return inversions\n\n\nprint(find_inversions((1, 2, 3, 4, 5)))\nprint(find_inversions((1, 2, 3, 4)))\nprint(find_inversions((1, 2, 3, 5)))\nprint(find_inversions((1, 2, 3, 4, 5, 6)))"
    },
    {
      "rank": 82,
      "score": 8.0,
      "candidate": "def inversion(tup):\n    inversion_list = []\n    for i in range(len(tup)-1, 0, -1):\n        if tup[i] > tup[i-1]:\n            inversion_list.append(tup[i-1])\n            inversion_list.append(tup[i])\n    return tuple(inversion_list)\n\n\nif __name__ == \"__main__\":\n    assert inversion((2, 3, 1)) == (1, 2, 3)\n    assert inversion((1, 2, 3)) == (1, 2, 3)\n    assert inversion((2, 3, 1, 4)) == (1, 2, 3, 4)"
    },
    {
      "rank": 83,
      "score": 8.0,
      "candidate": "def find_inversions(tuple_list):\n    for i in range(len(tuple_list)-1, 0, -1):\n        for j in range(i):\n            if tuple_list[i] > tuple_list[j]:\n                tuple_list[i], tuple_list[j] = tuple_list[j], tuple_list[i]\n    return tuple_list\n\n\nprint(find_inversions([1, 2, 3, 4, 5]))\nprint(find_inversions([1, 2, 3, 4, 5, 6, 7]))\nprint(find_inversions([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))"
    },
    {
      "rank": 84,
      "score": 8.0,
      "candidate": "def inversions(t):\n    if len(t) == 1:\n        return t\n\n    temp = []\n    for i in range(len(t)):\n        if t[i] > t[i-1]:\n            temp.append(t[i])\n        else:\n            temp.append(t[i-1])\n\n    return temp\n\ndef test():\n    t = (1, 2, 3, 4, 5, 6, 7)\n    print(inversions(t))\n\ntest()"
    },
    {
      "rank": 85,
      "score": 8.0,
      "candidate": "def inversions(tuple):\n    # Write your code here\n    inversions_list = []\n    for i in range(len(tuple)):\n        for j in range(len(tuple)):\n            if i == j:\n                continue\n            if tuple[i] > tuple[j]:\n                inversions_list.append(tuple[i])\n                inversions_list.append(tuple[j])\n                break\n    return inversions_list\n\n\nprint(inversions((2, 1, 3, 4, 5)))"
    },
    {
      "rank": 86,
      "score": 8.0,
      "candidate": "def inversions(l):\n    n = len(l)\n    if n < 2:\n        return l\n    else:\n        middle = n // 2\n        left = l[:middle]\n        right = l[middle:]\n        return inversions(left) + [right] + inversions(right)\n\n\nprint(inversions([1, 2, 3, 4]))\nprint(inversions([1, 2, 3, 4, 5, 6]))\nprint(inversions([1, 2, 3, 4, 5, 6, 7, 8, 9]))"
    },
    {
      "rank": 87,
      "score": 8.0,
      "candidate": "def get_inversions(tup):\n    inversions = []\n    for i in range(len(tup)):\n        for j in range(i + 1, len(tup)):\n            if tup[i] > tup[j]:\n                inversions.append(tup[i])\n                inversions.append(tup[j])\n    return inversions\n\n\ndef main():\n    tup = [1, 3, 5, 2, 4]\n    print(get_inversions(tup))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 88,
      "score": 8.0,
      "candidate": "def find_inversions(t):\n    l = len(t)\n    for i in range(l):\n        for j in range(i+1, l):\n            if t[i] > t[j]:\n                t[i], t[j] = t[j], t[i]\n    return t\n\nprint(find_inversions((1, 2, 3, 4, 5)))"
    },
    {
      "rank": 89,
      "score": 8.0,
      "candidate": "def inversions(tuple_list):\n    if len(tuple_list) <= 1:\n        return tuple_list\n    inversions_list = []\n    for i in range(len(tuple_list) - 1):\n        if tuple_list[i] > tuple_list[i + 1]:\n            inversions_list.append(tuple_list[i])\n    return tuple_list[:len(inversions_list)] + inversions_list\n\n\nif __name__ == '__main__':\n    assert inversions([]) == []\n    assert inversions([1, 2, 3]) == [1, 2, 3]\n    assert inversions([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]\n    assert inversions([1, 2, 3, 4, 5, 6]) == [1, 2, 3, 4, 5, 6]\n    assert inversions([1, 2, 3, 4, 5, 6, 7]) == [1, 2, 3, 4, 5, 6, 7]\n    assert inversions([1, 2, 3, 4, 5, 6, 7, 8, 9]) == [1, 2, 3, 4, 5, 6, 7, 8, 9]"
    },
    {
      "rank": 90,
      "score": 8.0,
      "candidate": "def find_inversions(list_of_tuples):\n    list_of_tuples.sort()\n    inversions = []\n    for index, value in enumerate(list_of_tuples):\n        if index + 1 < len(list_of_tuples):\n            if value > list_of_tuples[index + 1]:\n                inversions.append(value)\n    return inversions\n\n\nif __name__ == '__main__':\n    assert find_inversions([(1, 2, 3), (1, 2, 3, 4)]) == [1, 2, 3, 4]\n    assert find_inversions([(1, 2, 3), (1, 2, 3, 4)]) == [1, 2, 3, 4]"
    },
    {
      "rank": 91,
      "score": 8.0,
      "candidate": "# Time: O(n)\n# Space: O(n)\n\ndef find_inversions(list):\n    if len(list) == 0:\n        return []\n    inversions = []\n    for i in range(len(list) - 1, 0, -1):\n        if list[i] > list[0]:\n            inversions.append(list[i])\n    return inversions\n\n\nif __name__ == \"__main__\":\n    print(find_inversions([1, 2, 3, 4, 5]))"
    },
    {
      "rank": 92,
      "score": 8.0,
      "candidate": "def get_inversions(t):\n    i = 0\n    j = len(t) - 1\n    inversions = []\n    while i < j:\n        if t[i] > t[j]:\n            inversions.append(t[j])\n            j -= 1\n        elif t[j] < t[i]:\n            inversions.append(t[i])\n            i += 1\n    return inversions\n\nprint(get_inversions((1, 2, 3, 4, 5)))"
    },
    {
      "rank": 93,
      "score": 8.0,
      "candidate": "def inversions(tuple_list):\n    if len(tuple_list) == 0:\n        return []\n    elif len(tuple_list) == 1:\n        return [tuple_list[0]]\n    else:\n        sorted_list = sorted(tuple_list)\n        inversions = []\n        for i in range(len(sorted_list)):\n            if sorted_list[i] > sorted_list[i-1]:\n                inversions.append(sorted_list[i])\n        return inversions\n\n\nif __name__ == \"__main__\":\n    assert inversions([1, 2, 3, 4, 5, 6, 7]) == [5, 6, 7, 4, 3, 2, 1]\n    assert inversions([1, 2, 3, 4, 5]) == [5, 6, 7, 4, 3, 2, 1]\n    assert inversions([1, 2, 3, 4]) == [5, 6, 7, 4, 3, 2, 1]"
    },
    {
      "rank": 94,
      "score": 8.0,
      "candidate": "def find_inversions(tuple_list):\n    sorted_list = []\n    for i in range(len(tuple_list)):\n        for j in range(i + 1, len(tuple_list)):\n            if tuple_list[i] > tuple_list[j]:\n                sorted_list.append(tuple_list[j])\n                break\n            else:\n                continue\n    return sorted_list\n\n\nif __name__ == \"__main__\":\n    print(find_inversions((1, 2, 3, 4, 5)))\n    print(find_inversions((5, 4, 3, 2, 1)))"
    },
    {
      "rank": 95,
      "score": 8.0,
      "candidate": "def inversions(arr):\n    for i in range(len(arr)-1, 0, -1):\n        for j in range(i):\n            if arr[j] > arr[j+1]:\n                temp = arr[j]\n                arr[j] = arr[j+1]\n                arr[j+1] = temp\n\n    return arr\n\n\nif __name__ == \"__main__\":\n    assert inversions([1, 2, 3, 4]) == (2, 3, 4, 1)\n    assert inversions([1, 2, 3, 4, 5]) == (2, 3, 4, 5, 1)\n    assert inversions([1, 2, 3, 4, 5, 6]) == (2, 3, 4, 5, 6, 1)\n    assert inversions([1, 2, 3, 4, 5, 6, 7, 8]) == (2, 3, 4, 5, 6, 7, 8, 1)\n    assert inversions([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == (2, 3, 4, 5, 6, 7, 8, 9, 10, 1)"
    },
    {
      "rank": 96,
      "score": 8.0,
      "candidate": "def inversions(tuple_list):\n    inversions_list = []\n    inversions_dict = {}\n\n    for i in range(len(tuple_list)):\n        if tuple_list[i] in inversions_dict:\n            inversions_dict[tuple_list[i]].append(tuple_list[i])\n        else:\n            inversions_dict[tuple_list[i]] = [tuple_list[i]]\n\n    for key in inversions_dict:\n        inversions_list.extend(inversions_dict[key])\n\n    return inversions_list\n\n\n\nprint(inversions([1, 2, 3, 4, 5]))\nprint(inversions([1, 2, 3, 4, 5]))\nprint(inversions([1, 2, 3, 4, 5, 6]))"
    },
    {
      "rank": 97,
      "score": 8.0,
      "candidate": "def find_inversions(a):\n    \"\"\"\n    :type a: List[int]\n    :rtype: List[int]\n    \"\"\"\n    if not a:\n        return []\n\n    if len(a) == 1:\n        return [a[0]]\n\n    result = []\n    for i in range(len(a)):\n        if a[i] > a[i-1]:\n            result.append(a[i])\n        else:\n            result.append(a[i-1])\n\n    return result\n\n\nif __name__ == \"__main__\":\n    assert find_inversions([2, 1, 3, 4, 5]) == [5, 4, 3, 2, 1]\n    assert find_inversions([3, 1, 2, 4]) == [4, 3, 2, 1]\n    assert find_inversions([1, 1, 1, 1, 1]) == [1, 1, 1, 1, 1]"
    },
    {
      "rank": 98,
      "score": 8.0,
      "candidate": "def find_inversions(tuple_list):\n    for i in range(len(tuple_list)):\n        for j in range(i + 1, len(tuple_list)):\n            if tuple_list[i] > tuple_list[j]:\n                temp = tuple_list[i]\n                tuple_list[i] = tuple_list[j]\n                tuple_list[j] = temp\n    return tuple_list\n\n\nif __name__ == \"__main__\":\n    tuple_list = [1, 2, 3, 4, 5, 6]\n    print(find_inversions(tuple_list))"
    },
    {
      "rank": 99,
      "score": 1.0,
      "candidate": "def tuple_inversions(tup):\n    if tup is None:\n        return None\n    return tuple_inversions(tup[1:]) + (tup[0],) + tuple_inversions(tup[0:1])\n\n\ndef test_tuple_inversions():\n    assert tuple_inversions((1, 2, 3)) == (1, 2, 3)\n    assert tuple_inversions((1, 2, 3, 4)) == (1, 2, 3, 4)\n    assert tuple_inversions((1, 2, 3, 4, 5)) == (1, 2, 3, 4, 5)\n    assert tuple_inversions((1, 2, 3, 4, 5, 6, 7)) == (1, 2, 3, 4, 5, 6, 7)\n    assert tuple_inversions((1, 2, 3, 4, 5, 6, 7, 8)) == (1, 2, 3, 4, 5, 6, 7, 8)\n    assert tuple_inversions((1, 2, 3, 4, 5, 6, 7, 8, 9)) == (1, 2, 3, 4, 5, 6, 7, 8, 9)\n    assert tuple_inversions((1, 2, 3, 4, 5, 6, 7, 8, 9, 10)) == (1, 2, 3, 4, 5, 6, 7, 8, 9, 10)\n    assert tuple_inversions((1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12)) == (1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12)\n    assert tuple_inversions((1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15)) == (1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15)\n    assert tuple_inversions((1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16)) == (1, 2, 3, 4, 5, 6, 7, 8, 9,"
    },
    {
      "rank": 100,
      "score": 1.0,
      "candidate": "def find_inversions(tuple_list):\n    if len(tuple_list) == 0:\n        return tuple_list\n    for i in range(len(tuple_list) - 1, 0, -1):\n        if tuple_list[i] > tuple_list[i - 1]:\n            temp = tuple_list[i]\n            tuple_list[i] = tuple_list[i - 1]\n            tuple_list[i - 1] = temp\n    return tuple_list\n\n\nif __name__ == \"__main__\":\n    assert find_inversions([1, 2, 3, 4, 5]) == [5, 4, 3, 2, 1]\n    assert find_inversions([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert find_inversions([]) == []"
    }
  ]
}