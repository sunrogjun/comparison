{
  "timestamp": "2025-09-14T14:35:53.704834",
  "method": "improved_llm_judge",
  "judge_model": "codellama/CodeLlama-7b-Python-hf",
  "target_model": "codet5-770m",
  "dataset": "mbpp",
  "problem_number": 290,
  "total_candidates": 100,
  "results": [
    {
      "rank": 1,
      "score": 10.0,
      "candidate": "def depth(dictionary):\n    return len(dictionary) if dictionary else 0\n\n\nprint(depth({1:2, 3:4, 5:6}))"
    },
    {
      "rank": 2,
      "score": 10.0,
      "candidate": "class Node:\n    def __init__(self, key, value):\n        self.key = key\n        self.value = value\n        self.children = []\n\n\ndef depth(node):\n    depth_dict = {}\n    depth_dict[node.key] = node.value\n    if len(node.children) > 0:\n        for child in node.children:\n            depth_dict = depth(child)\n    return depth_dict\n\n\nif __name__ == '__main__':\n    n1 = Node(\"a\", 1)\n    n2 = Node(\"b\", 2)\n    n3 = Node(\"c\", 3)\n    n4 = Node(\"d\", 4)\n    n5 = Node(\"e\", 5)\n    n6 = Node(\"f\", 6)\n    n7 = Node(\"g\", 7)\n    n8 = Node(\"h\", 8)\n    n9 = Node(\"i\", 9)\n    n10 = Node(\"j\", 10)\n    n11 = Node(\"k\", 11)\n    n12 = Node(\"l\", 12)\n    n13 = Node(\"m\", 13)\n    n14 = Node(\"n\", 14)\n    n15 = Node(\"o\", 15)\n    n16 = Node(\"p\", 16)\n    n17 = Node(\"q\", 17)\n    n18 = Node(\"r\", 18)\n    n19 = Node(\"s\", 19)\n    n20 = Node(\"t\", 20)\n    n21 = Node(\"u\", 21)\n    n22 = Node(\"v\", 22)\n    n23 = Node(\"w\", 23)\n    n24 = Node(\"x\", 24)\n    n25 = Node(\"y\", 25)\n    n26 = Node(\"z\", 26)\n    n27 = Node(\"a\", 27)\n    n28 = Node(\"b\", 28)\n    n29 = Node(\"c\", 29)\n    n30 = Node(\"d\", 30)\n    n31 = Node(\"e\", 31)\n    n32 = Node(\"f\", 32)\n    n33 = Node(\"g\", 33)\n    n34 = Node(\"h\", 34)\n    n35 = Node(\"i\", 35)\n    n36 = Node(\"j\","
    },
    {
      "rank": 3,
      "score": 10.0,
      "candidate": "def depth(d):\n    if isinstance(d, dict):\n        return 1 + max(depth(v) for k, v in d.items())\n    else:\n        return 0\n\n\nprint(depth({'a': 1, 'b': 2, 'c': 3}))"
    },
    {
      "rank": 4,
      "score": 10.0,
      "candidate": "def depth(dict):\n    return len(dict.keys())\n\nprint(depth({'a': 1, 'b': 2, 'c': 3}))"
    },
    {
      "rank": 5,
      "score": 10.0,
      "candidate": "def depth(d):\n    for key in d:\n        if isinstance(d[key], dict):\n            print(key)\n            depth(d[key])\n\nd = {\n    'a': {\n        'b': {\n            'c': {\n                'd': {\n                    'e': {\n                        'f': {\n                            'g': {\n                                'h': {\n                                    'i': {\n                                        'j': {\n                                            'k': {\n                                                'l': {\n                                                   'm': {\n                                                        'n': {\n                                                            'o': {\n                                                                'p': {\n                                                                    'q': {\n                                                                        'r': {\n                                                                           's': {\n                                                                                't': {\n                                                                                    'u': {\n                                                                                        'v': {\n                                                                                            'w': {\n                                                                                                'x': {\n                                                                                                'y': {\n                                                                                            'z': {\n                                                                                                '1': {\n                                                                                                '2': {\n                                                                                                '3': {\n                                                                                                '4': {\n                                                                                                '5': {\n                                                                                                '6': {\n                                                                                                '7': {\n                                                                                                '8': {\n                                                                                                '9': {\n                                                                                                '0': {\n                                                                                                '1': {\n                                                                                                '2': {\n                                                                                                '3': {\n                                                                                                '4': {\n                                                                                                '5': {\n                                                                                                '6': {\n                                                                                                '7': {\n                                                                                                '8': {\n                                                                                                '9': {\n                                                                                                '0': {\n                                                                                                '1': {\n                                                                                                '2': {\n                                                                                                '3': {\n                                                                                                '4': {\n                                                                                                '5': {\n                                                                                                '6': {\n                                                                                                '7': {\n                                                                                                '8': {\n                                                                                                '9': {\n                                                                                                '0': {\n                                                                                                '1': {\n                                                                                                '2': {\n                                                                                                '3': {\n                                                                                                '4': {\n                                                                                                '5': {"
    },
    {
      "rank": 6,
      "score": 10.0,
      "candidate": "def depth(d):\n    for k, v in d.items():\n        if isinstance(v, dict):\n            print(k, v)\n            depth(v)\n\nif __name__ == \"__main__\":\n    d = {\n        'a': {\n            'b': {\n                'c': {\n                    'd': {\n                        'e': {\n                            'f': {\n                                'g': {\n                                    'h': {\n                                        'i': {\n                                            'j': {\n                                                'k': {\n                                                    'l': {\n                                                       'm': {\n                                                            'n': {\n                                                                'o': {\n                                                                    'p': {\n                                                                        'q': {\n                                                                            'r': {\n                                                                               's': {\n                                                                                    't': {\n                                                                                        'u': {\n                                                                                            'v': {\n                                                                                                'w': {\n                                                                                            'x': {\n                                                                                                'y': {\n                                                                                                'z': {\n                                                                    '1': {\n                                                                    '2': {\n                                                                        '3': {\n                                                                            '4': {\n                                                                                '5': {\n                                                                                '6': {\n                                                                                    '7': {\n                                                                                        '8': {\n                                                                                            '9': {\n                                                                                                '10': {\n                                                                                                 '11': {\n                                                                                                 '12': {\n                                                                                                 '13': {\n                                                                                                 '14': {\n                                                                                                 '15': {\n                                                                                                 '16': {\n                                                                                                 '17': {\n                                                                                                 '18': {\n                                                                                                 '19': {\n                                                                                                 '20': {\n                                                                                                 '21': {\n                                                                                                 '22': {\n                                                                                                 '23': {\n                                                                                                 '24': {\n                                                                                                 '25': {\n                                                                                                 '26': {\n                                                                                                 '27': {\n                                                                                                 '28': {\n                                                                                                 '29': {\n                                                                                                 '30': {\n                                                                                                 '31': {\n                                                                                                 '32': {\n                                                                                                 '33': {\n                                                                                                 '34': {\n                                                                                                 '35': {\n                                                                                                 '36': {\n                                                                                                 '37': {\n                                                                                                 '38': {"
    },
    {
      "rank": 7,
      "score": 10.0,
      "candidate": "def depth(dict):\n    if not dict:\n        return 0\n    return 1 + max(depth(k) for k in dict.values())\n\n\nif __name__ == '__main__':\n    print(depth({'a': 1, 'b': 2, 'c': 3}))\n    print(depth({'a': 1, 'b': 2, 'c': 3, 'd': 4}))"
    },
    {
      "rank": 8,
      "score": 10.0,
      "candidate": "def depth(d):\n    if d == {}:\n        return 0\n    return 1 + max(depth(v) for k, v in d.items())\n\nprint(depth({'a': 1, 'b': 2, 'c': 3}))"
    },
    {
      "rank": 9,
      "score": 10.0,
      "candidate": "def depth(d):\n    for k, v in d.items():\n        if isinstance(v, dict):\n            depth(v)\n        else:\n            print(k, v)\n\n\nif __name__ == \"__main__\":\n    d = {\"a\": 1, \"b\": 2, \"c\": 3}\n    depth(d)"
    },
    {
      "rank": 10,
      "score": 10.0,
      "candidate": "def depth(dict):\n    return len(dict)\n\n\nif __name__ == \"__main__\":\n    print(depth({\"a\": 1, \"b\": 2, \"c\": 3, \"d\": 4}))"
    },
    {
      "rank": 11,
      "score": 10.0,
      "candidate": "def depth(dict_):\n    if not dict_:\n        return 0\n    if not isinstance(dict_, dict):\n        return 1\n    return 1 + max([depth(v) for v in dict_.values()])\n\n\ndef depth2(dict_):\n    if not dict_:\n        return 0\n    if not isinstance(dict_, dict):\n        return 1\n    return 1 + max([depth2(v) for v in dict_.values()])\n\n\ndef depth3(dict_):\n    if not dict_:\n        return 0\n    if not isinstance(dict_, dict):\n        return 1\n    return 1 + max([depth3(v) for v in dict_.values()])\n\n\nif __name__ == '__main__':\n    print(depth({'a': 1, 'b': 2, 'c': 3}))\n    print(depth({'a': 1, 'b': 2, 'c': 3, 'd': 4}))\n    print(depth({'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5}))\n    print(depth({'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5, 'f': 6}))\n    print(depth({'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5, 'f': 6, 'g': 7}))\n    print(depth({'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5, 'f': 6, 'g': 7, 'h': 8}))\n    print(depth({'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5, 'f': 6, 'g': 7, 'h': 8, 'i': 9}))\n    print(depth({'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5, 'f': 6, 'g': 7, 'h': 8, 'i': 9, 'j': 10}))"
    },
    {
      "rank": 12,
      "score": 10.0,
      "candidate": "def depth(d):\n    if type(d) is dict:\n        return 1 + max(depth(v) for k, v in d.items())\n    else:\n        return 0\n\n\nif __name__ == \"__main__\":\n    d = {\n        'a': 1,\n        'b': 2,\n        'c': 3,\n        'd': 4,\n        'e': 5,\n        'f': 6,\n        'g': 7,\n        'h': 8\n    }\n    print(depth(d))"
    },
    {
      "rank": 13,
      "score": 10.0,
      "candidate": "def depth_dict(dict):\n    if not isinstance(dict, dict):\n        return 0\n    if not dict:\n        return 1\n    return 1 + max(depth_dict(v) for k, v in dict.items())\n\n\nprint(depth_dict({'a': 1, 'b': 2, 'c': 3}))\nprint(depth_dict({'a': 1, 'b': 2, 'c': 3, 'd': 4}))\nprint(depth_dict({'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5}))\nprint(depth_dict({'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5, 'f': 6}))\nprint(depth_dict({'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5, 'f': 6, 'g': 7}))\nprint(depth_dict({'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5, 'f': 6, 'g': 7, 'h': 8}))\nprint(depth_dict({'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5, 'f': 6, 'g': 7, 'h': 8, 'i': 9}))\nprint(depth_dict({'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5, 'f': 6, 'g': 7, 'h': 8, 'i': 9, 'j': 10}))\nprint(depth_dict({'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5, 'f': 6, 'g': 7, 'h': 8, 'i': 9, 'j': 10, 'k': 11}))\nprint(depth_dict({'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5, 'f': 6, 'g': 7, 'h': 8, 'i': 9, 'j': 10, 'k': 11, 'l': 12}))"
    },
    {
      "rank": 14,
      "score": 10.0,
      "candidate": "def depth_of_dictionary(dictionary):\n    depth = 0\n    for key in dictionary.keys():\n        if isinstance(dictionary[key], dict):\n            depth += 1\n            depth_of_dictionary(dictionary[key])\n        else:\n            print(\"Key \" + str(key) + \" has depth \" + str(depth))\n\nif __name__ == \"__main__\":\n    d = {\n        \"a\": 1,\n        \"b\": 2,\n        \"c\": 3,\n        \"d\": 4,\n        \"e\": 5,\n        \"f\": 6,\n        \"g\": 7,\n        \"h\": 8\n    }\n    depth_of_dictionary(d)"
    },
    {
      "rank": 15,
      "score": 10.0,
      "candidate": "def depth(d):\n  return 1 + max(depth(v) for k,v in d.items())"
    },
    {
      "rank": 16,
      "score": 10.0,
      "candidate": "def depth(dictionary):\n    if dictionary == {}:\n        return 0\n    return 1 + max(depth(k) for k in dictionary)\n\nif __name__ == \"__main__\":\n    print(depth({'a': 1, 'b': 2, 'c': 3}))"
    },
    {
      "rank": 17,
      "score": 10.0,
      "candidate": "class depth_dict:\n\n    def __init__(self, d):\n        self.d = d\n\n    def depth(self):\n        if not self.d:\n            return 0\n        return 1 + max(self.d.values()) + self.depth(self.d.keys())\n\n\nif __name__ == '__main__':\n    d = {'a': 1, 'b': 2, 'c': 3}\n    print(depth_dict(d))"
    },
    {
      "rank": 18,
      "score": 10.0,
      "candidate": "def depth(d):\n    if isinstance(d, dict):\n        return 1 + max(depth(k) for k in d.keys())\n    return 0\n\n\n\nif __name__ == '__main__':\n    d = {'a': 1, 'b': 2, 'c': 3}\n    print(depth(d))"
    },
    {
      "rank": 19,
      "score": 10.0,
      "candidate": "def depth(dictionary):\n    return len(dictionary)"
    },
    {
      "rank": 20,
      "score": 10.0,
      "candidate": "def depth(d):\n    \"\"\"\n    :type d: dict\n    :rtype: int\n    \"\"\"\n    if not d:\n        return 0\n    else:\n        return 1 + max([depth(k) for k in d])\n\n\nif __name__ == \"__main__\":\n    assert depth({'a': 1, 'b': 2, 'c': 3}) == 2\n    assert depth({'a': 1, 'b': 2, 'c': 3, 'd': 4}) == 2\n    assert depth({'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5}) == 3\n    assert depth({'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5, 'f': 6, 'g': 7}) == 4\n    assert depth({'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5, 'f': 6, 'g': 7, 'h': 8, 'i': 9}) == 5\n    assert depth({'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5, 'f': 6, 'g': 7, 'h': 8, 'i': 9, 'j': 10}) == 6\n    assert depth({'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5, 'f': 6, 'g': 7, 'h': 8, 'i': 9, 'j': 10, 'k': 11}) == 7"
    },
    {
      "rank": 21,
      "score": 10.0,
      "candidate": "def depth(d):\n    if d:\n        return max(depth(v) for k, v in d.items()) + 1\n    return 0\n\n\nif __name__ == '__main__':\n    d = {'a': 1, 'b': {'c': 2, 'd': 3}, 'e': {'f': 4}}\n    print(depth(d))"
    },
    {
      "rank": 22,
      "score": 9.0,
      "candidate": "def depth(dictionary):\n    \"\"\"\n    :type dictionary: dict\n    :rtype: int\n    \"\"\"\n    if not dictionary:\n        return 0\n\n    return 1 + max(depth(value) for value in dictionary.values())"
    },
    {
      "rank": 23,
      "score": 8.0,
      "candidate": "def depth_of_dict(d: dict) -> int:\n    if not d:\n        return 0\n    depth = 1\n    for k, v in d.items():\n        depth += depth_of_dict(v)\n    return depth\n\n\nprint(depth_of_dict({\"a\": 1, \"b\": 2, \"c\": 3}))"
    },
    {
      "rank": 24,
      "score": 8.0,
      "candidate": "def depth(dictionary):\n    if len(dictionary) == 0:\n        return 0\n    else:\n        return 1 + max(depth(k) for k in dictionary.keys())\n\n\nif __name__ == \"__main__\":\n    dictionary = {\n        \"a\": 1,\n        \"b\": 2,\n        \"c\": 3,\n        \"d\": 4,\n        \"e\": 5,\n        \"f\": 6,\n    }\n    print(depth(dictionary))"
    },
    {
      "rank": 25,
      "score": 8.0,
      "candidate": "from collections import defaultdict\n\ndef depth(d):\n    if not d:\n        return 0\n    return 1 + max([depth(v) for k, v in d.items()])\n\n\nif __name__ == '__main__':\n    d = {'a': 1, 'b': 2, 'c': 3}\n    print(depth(d))"
    },
    {
      "rank": 26,
      "score": 8.0,
      "candidate": "def depth(dictionary):\n    return len(dictionary)"
    },
    {
      "rank": 27,
      "score": 8.0,
      "candidate": "def depth_of_dict(dictionary):\n    if not dictionary:\n        return 0\n    if len(dictionary) == 1:\n        return 1\n\n    return 1 + max(depth_of_dict(key) for key in dictionary.values())\n\n\nif __name__ == \"__main__\":\n    d = {\"a\": {\"b\": {\"c\": {\"d\": {\"e\": {\"f\": {\"g\": {\"h\": 1}}}}}}}}\n    print(depth_of_dict(d))"
    },
    {
      "rank": 28,
      "score": 8.0,
      "candidate": "def depth(dict):\n    if dict is None:\n        return 0\n    return 1 + max(depth(v) for k, v in dict.items())\n\nprint(depth({'a': 1, 'b': 2, 'c': 3}))"
    },
    {
      "rank": 29,
      "score": 8.0,
      "candidate": "def depth(dictionary):\n    depth = 0\n\n    def depth_helper(dictionary, depth):\n        if depth == len(dictionary):\n            return\n\n        for key in dictionary:\n            depth_helper(dictionary[key], depth + 1)\n\n    depth_helper(dictionary, 0)\n    return depth\n\n\nif __name__ == \"__main__\":\n    print(depth({\"a\": {\"b\": {\"c\": {\"d\": {\"e\": {\"f\": \"g\"}}}}}})\n          == 2)\n    print(depth({\"a\": {\"b\": {\"c\": {\"d\": {\"e\": {\"f\": \"g\"}}}}}})\n          == 3)"
    },
    {
      "rank": 30,
      "score": 8.0,
      "candidate": "class Depth:\n    def __init__(self, dictionary):\n        self.depth = 0\n        self.dictionary = dictionary\n\n    def get_depth(self):\n        return self.depth\n\n    def get_value(self, key):\n        if key in self.dictionary:\n            return self.dictionary[key]\n        else:\n            return None\n\n    def get_keys(self):\n        return self.dictionary.keys()\n\n    def get_values(self):\n        return self.dictionary.values()\n\n    def update(self, new_dictionary):\n        self.dictionary.update(new_dictionary)\n\n    def __str__(self):\n        return str(self.dictionary)\n\n    def __repr__(self):\n        return repr(self.dictionary)"
    },
    {
      "rank": 31,
      "score": 8.0,
      "candidate": "from typing import List\n\n\ndef depth(dict: dict) -> int:\n    depth_sum = 0\n    for key in dict:\n        if isinstance(dict[key], dict):\n            depth_sum += depth(dict[key])\n        else:\n            depth_sum += 1\n    return depth_sum\n\n\nif __name__ == \"__main__\":\n    assert depth({\"a\": 1, \"b\": 2, \"c\": 3}) == 1\n    assert depth({\"a\": 1, \"b\": 2, \"c\": 3, \"d\": 4}) == 4"
    },
    {
      "rank": 32,
      "score": 8.0,
      "candidate": "def depth(d):\n    return len(d)\n\n\ndef test_depth():\n    assert depth({\"a\": 1, \"b\": 2, \"c\": 3}) == 3\n    assert depth({\"a\": 1, \"b\": 2, \"c\": 3, \"d\": 4}) == 4\n    assert depth({\"a\": 1, \"b\": 2, \"c\": 3, \"d\": 4, \"e\": 5}) == 5"
    },
    {
      "rank": 33,
      "score": 8.0,
      "candidate": "class Dict:\n    def __init__(self, dict):\n        self.dict = dict\n\n    def __str__(self):\n        return str(self.dict)\n\n    def __getitem__(self, item):\n        return self.dict[item]\n\n    def __setitem__(self, item, value):\n        self.dict[item] = value\n\n    def __delitem__(self, item):\n        del self.dict[item]\n\n    def __contains__(self, item):\n        return item in self.dict\n\n    def __iter__(self):\n        return iter(self.dict)\n\n    def __len__(self):\n        return len(self.dict)\n\n    def depth(self, key):\n        if key in self.dict:\n            return self.dict[key]\n        else:\n            return 0\n\n    def keys(self):\n        return self.dict.keys()\n\n    def values(self):\n        return self.dict.values()\n\n    def items(self):\n        return self.dict.items()\n\n    def __contains__(self, key):\n        return key in self.dict\n\n    def __iter__(self):\n        return iter(self.dict)\n\n    def __len__(self):\n        return len(self.dict)\n\n    def depth_list(self, key):\n        if key in self.dict:\n            return self.dict[key]\n        else:\n            return 0\n\n    def keys_list(self):\n        return self.dict.keys()\n\n    def values_list(self):\n        return self.dict.values()\n\n    def items_list(self):\n        return self.dict.items()\n\n    def __contains__(self, key):\n        return key in self.dict\n\n    def __iter__(self):\n        return iter(self.dict)\n\n    def __len__(self):\n        return len(self.dict)\n\n    def depth_dict(self, key):\n        if key in self.dict:\n            return self.dict[key]\n        else:\n            return 0\n\n    def keys_dict"
    },
    {
      "rank": 34,
      "score": 8.0,
      "candidate": "def depth(dictionary):\n    # Your code here\n    depth_list = []\n    for key in dictionary.keys():\n        depth_list.append(depth(dictionary[key]))\n    return len(depth_list)"
    },
    {
      "rank": 35,
      "score": 8.0,
      "candidate": "def depth(dict):\n    if type(dict) == dict:\n        return 1 + max(depth(key) for key in dict.keys())\n    return 0\n\nif __name__ == '__main__':\n    d = {\n        \"a\": 1,\n        \"b\": 2,\n        \"c\": 3,\n        \"d\": 4,\n    }\n    print(depth(d))"
    },
    {
      "rank": 36,
      "score": 8.0,
      "candidate": "class Node:\n    def __init__(self, data):\n        self.data = data\n        self.next = None\n\nclass Depth:\n    def __init__(self):\n        self.depth = 0\n\n    def find_depth(self, node):\n        self.depth += 1\n        if node.next:\n            self.find_depth(node.next)\n        return self.depth\n\n    def find_depth_recursive(self, node, depth):\n        if node.next:\n            self.find_depth_recursive(node.next, depth)\n        if depth == self.depth:\n            print(node.data)\n\n\nd = {'a': {'b': {'c': {'d': {'e': {'f': {'g': {'h': {'i': {'j': {'k': {'l': {'m': {'n': {'o': 'p'}}}}}}}}}}}}}}\nd = {'a': {'b': {'c': {'d': {'e': {'f': {'g': {'h': {'i': {'j': {'k': {'l': {'m': {'n': {'o': 'p'}}}}}}}}}}}}}}}}\nd = {'a': {'b': {'c': {'d': {'e': {'f': {'g': {'h': {'i': {'j': {'k': {'l': {'m': {'n': {'o': 'p'}}}}}}}}}}}}}}\nd = {'a': {'b': {'c': {'d': {'e': {'f': {'g': {'h': {'i': {'j': {'k': {'l': {'m': {'n': {'o': 'p'}}}}}}}}}}}}}}}\n\nd = {'a': {'b': {'c': {'d': {'e': {'f': {'g': {'h': {'i': {'j': {'k': {'l': {'m': {'n': {'o': 'p'}}}}}}}}}}}}}}\nd = {'a': {'b': {'c': {'d': {'e': {'f': {'g': {'h': {'i': {'j': {'k': {'l': {'m': {'n': {'o': 'p'}}}}}}}}}}}}}}}\n\nd = {'a"
    },
    {
      "rank": 37,
      "score": 8.0,
      "candidate": "def depth(d):\n    \"\"\"\n    :type d: dict\n    :rtype: int\n    \"\"\"\n    return max([len(v) for v in d.values()])"
    },
    {
      "rank": 38,
      "score": 8.0,
      "candidate": "def depth(d):\n    if len(d) == 0:\n        return 0\n\n    return 1 + max(depth(v) for v in d.values())"
    },
    {
      "rank": 39,
      "score": 8.0,
      "candidate": "def depth(d):\n    if not d:\n        return 0\n    return 1 + max(depth(v) for k,v in d.items())\n\nd = {1:2, 3:4, 5:6, 6:7}\nprint(depth(d))"
    },
    {
      "rank": 40,
      "score": 8.0,
      "candidate": "def depth(d):\n    if isinstance(d, dict):\n        return 1 + max([depth(v) for k, v in d.items()])\n    return 0\n\n\nif __name__ == \"__main__\":\n    assert depth({'a': 1, 'b': 2, 'c': 3}) == 2\n    assert depth({'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5}) == 4\n    assert depth({'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5, 'f': 6, 'g': 7}) == 6"
    },
    {
      "rank": 41,
      "score": 8.0,
      "candidate": "def depth(d):\n    if not d:\n        return 0\n    return 1 + max([depth(v) for v in d.values()])\n\n\nif __name__ == '__main__':\n    d = {'a': 1, 'b': 2, 'c': 3}\n    print(depth(d))"
    },
    {
      "rank": 42,
      "score": 8.0,
      "candidate": "def depth_of_dict(d):\n    depth = 0\n    for key, value in d.items():\n        if isinstance(value, dict):\n            depth += 1\n            depth_of_dict(value)\n        elif isinstance(value, list):\n            depth += len(value)\n    return depth\n\n\nif __name__ == \"__main__\":\n    d = {\"a\": 1, \"b\": 2, \"c\": 3}\n    assert depth_of_dict(d) == 3"
    },
    {
      "rank": 43,
      "score": 8.0,
      "candidate": "def depth(dictionary):\n    if type(dictionary) is dict:\n        return 1 + max([depth(x) for x in dictionary.values()])\n    else:\n        return 0\n\nprint(depth({'a': 1, 'b': 2, 'c': 3}))"
    },
    {
      "rank": 44,
      "score": 8.0,
      "candidate": "def depth(dict):\n    if dict is None:\n        return 0\n    return 1 + max(depth(v) for v in dict.values())\n\nprint(depth({\"a\":1, \"b\":2, \"c\":3}))"
    },
    {
      "rank": 45,
      "score": 8.0,
      "candidate": "def depth(d):\n    if isinstance(d, dict):\n        return 1 + max(depth(v) for v in d.values())\n    return 0\n\n\ndef test_depth():\n    assert depth({\"a\": 1, \"b\": 2, \"c\": 3}) == 1\n    assert depth({\"a\": 1, \"b\": 2, \"c\": 3, \"d\": 4}) == 2\n    assert depth({\"a\": 1, \"b\": 2, \"c\": 3, \"d\": 4, \"e\": 5}) == 4\n    assert depth({\"a\": 1, \"b\": 2, \"c\": 3, \"d\": 4, \"e\": 5, \"f\": 6}) == 6"
    },
    {
      "rank": 46,
      "score": 8.0,
      "candidate": "def depth(d):\n    if isinstance(d, dict):\n        return 1 + max(depth(v) for k, v in d.items())\n    else:\n        return 0\n\n\nif __name__ == \"__main__\":\n    d = {1: 2, 2: 3}\n    print(depth(d))"
    },
    {
      "rank": 47,
      "score": 8.0,
      "candidate": "from collections import defaultdict\n\ndef depth(d):\n    if type(d) == defaultdict:\n        return 1 + sum(map(depth, d.values()))\n    else:\n        return 0\n\nif __name__ == \"__main__\":\n    d = {\"a\": 1, \"b\": {\"c\": 2, \"d\": {\"e\": 3}}}\n    print(d)\n    print(depth(d))"
    },
    {
      "rank": 48,
      "score": 8.0,
      "candidate": "def depth(d):\n    if not d:\n        return 0\n    else:\n        return 1 + max(depth(v) for v in d.values())\n\nprint(depth({\"a\": 1, \"b\": 2, \"c\": 3}))"
    },
    {
      "rank": 49,
      "score": 8.0,
      "candidate": "def depth(dic):\n    if type(dic) == dict:\n        return 1 + max(depth(val) for val in dic.values())\n    else:\n        return 0"
    },
    {
      "rank": 50,
      "score": 8.0,
      "candidate": "def depth(dictionary):\n    depth = 0\n    if isinstance(dictionary, dict):\n        for key in dictionary:\n            depth += 1\n            depth += depth(dictionary[key])\n    return depth\n\n\nif __name__ == '__main__':\n    print(depth({'a': 1, 'b': 2, 'c': 3, 'd': 4}))"
    },
    {
      "rank": 51,
      "score": 8.0,
      "candidate": "def depth(dictionary):\n    if not dictionary:\n        return 0\n    else:\n        return 1 + max(depth(v) for k,v in dictionary.items())\n\nif __name__ == \"__main__\":\n    d = {'a':{'b':{'c':{'d':{'e':{'f':{'g':{'h':{'i':{'j':{'k':{'l':{'m':{'n':{'o':{'p':{'q':{'r':{'s':{'t':{'u':{'v':{'w':{'x':{'y':{'z':{'y':{'z':{'x':{'y':{'z':{'y':{'z':{'x':{'z':{'y':{'y':{'z':{'x':{'y':{'z':{'y':{'z':{'x':{'x':{'y':{'y':{'z':{'x':{'z':{'y':{'x':{'x':{'y':{'z':{'z':{'x':{'x':{'x':{'y':{'z':{'x':{'y':{'x':{'y':{'z':{'x':{'y':{'z':{'z':{'y':{'x':{'z':{'y':{'z':{'x':{'x':{'y':{'x':{'y':{'x':{'y':{'z':{'x':{'z':{'x':{'y':{'x':{'z':{'y':{'z':{'x':{'y':{'x':{'y':{'x':{'y':{'y':{'x':{'x':{'y':{'x':{'y':{'x':{'z':{'x':{'y':{'y':{'x':{'y':{'y':{'y':{'x':{'x':{'x':{'y':{'x':{'x':{'x':{'y':{'x':{'x':{'x':{'y':{'x':{'x':{'x':{'y':{'x':{'y':{'x':{'x':{'x':{'y':{'x':{'y':{'y':{'x':{'y':{'x':{'y':{'y':{'x':{'x':{'x':{'y':{'y':{'x':{'x':{'y':{'y':{'x"
    },
    {
      "rank": 52,
      "score": 8.0,
      "candidate": "def depth(dict):\n    if len(dict) == 0:\n        return 0\n    return 1 + max(depth(v) for v in dict.values())\n\nprint(depth({'a': 1, 'b': 2, 'c': 3}))"
    },
    {
      "rank": 53,
      "score": 8.0,
      "candidate": "def depth_dict(d):\n    if isinstance(d, dict):\n        return 1 + max([depth_dict(k) for k in d.keys()])\n    else:\n        return 0\n\n\nif __name__ == \"__main__\":\n    d = {\"a\": 1, \"b\": 2, \"c\": 3, \"d\": 4}\n    print(depth_dict(d))"
    },
    {
      "rank": 54,
      "score": 8.0,
      "candidate": "def depth(d):\n    if not d:\n        return 0\n    else:\n        return 1 + max(depth(v) for v in d.values())\n\nprint(depth({'a': 1, 'b': 2, 'c': 3}))"
    },
    {
      "rank": 55,
      "score": 8.0,
      "candidate": "def depth_of_dict(d):\n    return sum([depth_of_dict(v) for k, v in d.items()])"
    },
    {
      "rank": 56,
      "score": 8.0,
      "candidate": "def depth(d):\n    if d:\n        if isinstance(d, dict):\n            return 1 + max(depth(k) for k in d.keys())\n        else:\n            return 1\n    else:\n        return 0\n\n\nif __name__ == '__main__':\n    d = {'a': 1, 'b': 2, 'c': 3}\n    print(depth(d))"
    },
    {
      "rank": 57,
      "score": 8.0,
      "candidate": "def depth(d):\n    if not d:\n        return 0\n\n    if type(d) == dict:\n        return 1 + max(depth(k) for k in d.keys())\n    return max(depth(v) for v in d.values()) + 1\n\n\nif __name__ == \"__main__\":\n    d = {\"a\": 1, \"b\": 2, \"c\": 3}\n    print(depth(d))"
    },
    {
      "rank": 58,
      "score": 8.0,
      "candidate": "def depth_of_dict(d):\n    return 1 + max(map(depth_of_dict, d.values()))\n\n\nif __name__ == \"__main__\":\n    print(depth_of_dict({\"a\": {\"b\": {\"c\": {\"d\": {\"e\": \"f\"}}}}}))\n    print(depth_of_dict({\"a\": {\"b\": {\"c\": {\"d\": {\"e\": \"f\"}}}}}))\n    print(depth_of_dict({\"a\": {\"b\": {\"c\": {\"d\": {\"e\": \"f\"}}}}}))\n    print(depth_of_dict({\"a\": {\"b\": {\"c\": {\"d\": {\"e\": \"f\"}}}}}))"
    },
    {
      "rank": 59,
      "score": 8.0,
      "candidate": "def depth(d):\n    if not d:\n        return 0\n\n    d_depth = 1\n    for key in d:\n        d_depth = max(d_depth, depth(d[key]))\n\n    return d_depth\n\nd = {\n    'a': {\n        'b': {\n            'c': 'd'\n        }\n    },\n    'b': {\n        'c': 'd'\n    },\n    'c': 'd'\n}\n\nprint(depth(d))"
    },
    {
      "rank": 60,
      "score": 8.0,
      "candidate": "def depth(d):\n    return 1 + max(depth(k) for k in d.keys()) if isinstance(d, dict) else 0\n\n\nif __name__ == \"__main__\":\n    d = {\"a\": 1, \"b\": 2, \"c\": 3}\n    print(depth(d))"
    },
    {
      "rank": 61,
      "score": 8.0,
      "candidate": "def depth(dictionary):\n    if dictionary:\n        return 1 + max(depth(v) for k, v in dictionary.items())\n    else:\n        return 0\n\n\ndef depth_recursive(dictionary):\n    if dictionary:\n        return 1 + max(depth_recursive(v) for k, v in dictionary.items())\n    else:\n        return 0\n\n\nprint(depth({\"a\": 1, \"b\": 2, \"c\": 3}))\nprint(depth_recursive({\"a\": 1, \"b\": 2, \"c\": 3}))"
    },
    {
      "rank": 62,
      "score": 8.0,
      "candidate": "def depth(dict):\n    if not dict:\n        return 0\n    else:\n        return 1 + max(depth(v) for k, v in dict.items())"
    },
    {
      "rank": 63,
      "score": 8.0,
      "candidate": "def depth(dictionary):\n    if dictionary:\n        return 1 + max(depth(key) for key in dictionary.values())\n    return 0"
    },
    {
      "rank": 64,
      "score": 8.0,
      "candidate": "class Dictionary:\n    def __init__(self, dictionary):\n        self.dictionary = dictionary\n\n    def depth(self):\n        depth = 0\n        for key in self.dictionary:\n            depth += 1\n            print(key, self.dictionary[key])\n        return depth\n\n\nif __name__ == \"__main__\":\n    dictionary = {\n        \"a\": 1,\n        \"b\": {\n            \"c\": 2,\n            \"d\": 3,\n        },\n        \"e\": {\n            \"f\": 4,\n        }\n    }\n\n    print(\"Depth of dictionary: \", Dictionary(dictionary).depth())"
    },
    {
      "rank": 65,
      "score": 8.0,
      "candidate": "def depth(dictionary):\n    if not dictionary:\n        return 0\n    return 1 + max(depth(key) for key in dictionary.keys())"
    },
    {
      "rank": 66,
      "score": 8.0,
      "candidate": "def depth(d):\n    # Write your code here\n    if not d:\n        return 0\n    else:\n        return 1 + max(depth(v) for k, v in d.items())\n\n\nprint(depth({'a': 1, 'b': 2, 'c': 3}))\nprint(depth({'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5}))"
    },
    {
      "rank": 67,
      "score": 8.0,
      "candidate": "def depth(d):\n    if not d:\n        return 0\n    else:\n        return 1 + max([depth(x) for x in d.values()])\n\n\nif __name__ == '__main__':\n    d = {'a': 1, 'b': 2, 'c': 3}\n    print(depth(d))"
    },
    {
      "rank": 68,
      "score": 8.0,
      "candidate": "def depth(dictionary):\n    if isinstance(dictionary, dict):\n        return 1 + max(depth(value) for key, value in dictionary.items())\n    else:\n        return 0"
    },
    {
      "rank": 69,
      "score": 8.0,
      "candidate": "def depth(d):\n    return len(d) if isinstance(d, dict) else 0\n\n\ndef depth_recursive(d, level=0):\n    if isinstance(d, dict):\n        return level + 1\n    if isinstance(d, list):\n        return max(depth_recursive(item, level + 1) for item in d)\n    return 0\n\n\ndef depth_iterative(d, level=0):\n    if isinstance(d, dict):\n        return max(depth_iterative(item, level + 1) for item in d.items())\n    if isinstance(d, list):\n        return max(depth_iterative(item, level + 1) for item in d)\n    return 0\n\n\ndef depth_iterative_recursive(d, level=0):\n    if isinstance(d, dict):\n        return max(depth_iterative_recursive(item, level + 1) for item in d.items())\n    if isinstance(d, list):\n        return max(depth_iterative_recursive(item, level + 1) for item in d)\n    return 0\n\n\nif __name__ == '__main__':\n    print(depth({1: 1, 2: 2, 3: 3}))\n    print(depth({1: 1, 2: 2, 3: 3, 4: 4, 5: 5, 6: 6}))\n    print(depth({1: 1, 2: 2, 3: 3, 4: 4, 5: 5, 6: 6}))\n    print(depth({1: 1, 2: 2, 3: 3, 4: 4, 5: 5, 6: 6}))\n    print(depth({1: 1, 2: 2, 3: 3, 4: 4, 5: 5, 6: 6}))"
    },
    {
      "rank": 70,
      "score": 8.0,
      "candidate": "def depth(d):\n    if type(d) is dict:\n        return 1 + max(depth(v) for v in d.values())\n    return 0\n\n\nprint(depth({'a': {'b': {'c': 'd'}, 'e': 'f'}}))"
    },
    {
      "rank": 71,
      "score": 8.0,
      "candidate": "def depth(dictionary):\n    if type(dictionary)!= dict:\n        return 0\n\n    depth = 0\n    for key in dictionary.keys():\n        depth += 1\n        depth = depth + depth(dictionary[key])\n    return depth\n\n\nif __name__ == \"__main__\":\n    assert depth({\"a\": 1, \"b\": 2, \"c\": 3}) == 1\n    assert depth({\"a\": 1, \"b\": 2, \"c\": 3, \"d\": 4}) == 1\n    assert depth({\"a\": 1, \"b\": 2, \"c\": 3, \"d\": 4, \"e\": 5}) == 2\n    assert depth({\"a\": 1, \"b\": 2, \"c\": 3, \"d\": 4, \"e\": 5, \"f\": 6, \"g\": 7}) == 2\n    assert depth({\"a\": 1, \"b\": 2, \"c\": 3, \"d\": 4, \"e\": 5, \"f\": 6, \"g\": 7, \"h\": 8}) == 2\n    assert depth({\"a\": 1, \"b\": 2, \"c\": 3, \"d\": 4, \"e\": 5, \"f\": 6, \"g\": 7, \"h\": 8, \"i\": 9}) == 2"
    },
    {
      "rank": 72,
      "score": 8.0,
      "candidate": "def depth(d):\n    \"\"\"\n    :type d: dict\n    :rtype: int\n    \"\"\"\n    if not d:\n        return 0\n    else:\n        return 1 + max(depth(v) for k, v in d.items())\n\n\nif __name__ == '__main__':\n    assert depth({'a': 1, 'b': 2, 'c': 3}) == 4\n    assert depth({'a': 1, 'b': 2, 'c': 3, 'd': 4}) == 5\n    assert depth({'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5}) == 6\n    assert depth({'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5, 'f': 6, 'g': 7}) == 8\n    assert depth({'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5, 'f': 6, 'g': 7, 'h': 8}) == 9"
    },
    {
      "rank": 73,
      "score": 8.0,
      "candidate": "def depth(dict):\n    \"\"\"\n    :type dict: dict\n    :rtype: int\n    \"\"\"\n    if not dict:\n        return 0\n    elif len(dict) == 1:\n        return 1\n    else:\n        return max(depth(dict[key]) for key in dict) + 1\n\n\nif __name__ == \"__main__\":\n    assert depth({\"a\": 1, \"b\": 2, \"c\": 3}) == 2\n    assert depth({\"a\": 1, \"b\": 2, \"c\": 3, \"d\": 4}) == 2\n    assert depth({\"a\": 1, \"b\": 2, \"c\": 3, \"d\": 4, \"e\": 5}) == 2\n    assert depth({\"a\": 1, \"b\": 2, \"c\": 3, \"d\": 4, \"e\": 5, \"f\": 6}) == 2\n    assert depth({\"a\": 1, \"b\": 2, \"c\": 3, \"d\": 4, \"e\": 5, \"f\": 6, \"g\": 7}) == 1"
    },
    {
      "rank": 74,
      "score": 8.0,
      "candidate": "def depth(dictionary):\n    if len(dictionary) == 0:\n        return 0\n    else:\n        return 1 + max(depth(item) for item in dictionary.values())\n\n\nif __name__ == \"__main__\":\n    dictionary = {1: 2, 2: 3, 3: 4}\n    print(depth(dictionary))"
    },
    {
      "rank": 75,
      "score": 8.0,
      "candidate": "def depth(dictionary):\n    if not dictionary:\n        return 0\n    else:\n        return 1 + max(depth(value) for key, value in dictionary.items())\n\n\nif __name__ == \"__main__\":\n    print(depth({\"a\": {\"b\": 1}, \"c\": {\"d\": 2}}))"
    },
    {
      "rank": 76,
      "score": 8.0,
      "candidate": "def depth(dict):\n    return len(dict) if dict else 0"
    },
    {
      "rank": 77,
      "score": 8.0,
      "candidate": "def depth(dict):\n    if dict:\n        return 1 + max(map(depth, dict.values()))\n    else:\n        return 0\n\n\ndef depth_recursive(dict):\n    if dict:\n        return 1 + max(map(depth_recursive, dict.values()))\n    else:\n        return 0\n\n\nprint(depth({\"a\": 1, \"b\": 2, \"c\": 3, \"d\": 4, \"e\": 5}))\nprint(depth_recursive({\"a\": 1, \"b\": 2, \"c\": 3, \"d\": 4, \"e\": 5}))"
    },
    {
      "rank": 78,
      "score": 8.0,
      "candidate": "def depth(d):\n    if type(d) == dict:\n        return 1 + max(depth(k) for k in d.keys())\n    return 0\n\nif __name__ == '__main__':\n    d = {\"a\": 1, \"b\": 2, \"c\": 3}\n    print(depth(d))"
    },
    {
      "rank": 79,
      "score": 8.0,
      "candidate": "def depth(dictionary):\n    if not dictionary:\n        return 0\n    return 1 + max(map(depth, dictionary.values()))\n\n\nif __name__ == \"__main__\":\n    d = {\"a\": 1, \"b\": 2, \"c\": 3}\n    print(depth(d))"
    },
    {
      "rank": 80,
      "score": 8.0,
      "candidate": "def depth(d):\n    if not d:\n        return 0\n    else:\n        return 1 + max(depth(v) for v in d.values())\n\n\nif __name__ == \"__main__\":\n    d = {\n        \"a\": 1,\n        \"b\": 2,\n        \"c\": {\n            \"d\": 3\n        }\n    }\n    print(d)\n    print(depth(d))"
    },
    {
      "rank": 81,
      "score": 8.0,
      "candidate": "def depth(dict):\n    # initialize depth to 0\n    depth = 0\n    # add keys to depth\n    for key in dict.keys():\n        # increment depth\n        depth += 1\n    return depth\n\n\nif __name__ == \"__main__\":\n    dict_ = {\"key1\": 1, \"key2\": 2, \"key3\": 3}\n    print(depth(dict_))"
    },
    {
      "rank": 82,
      "score": 8.0,
      "candidate": "def depth(dictionary):\n    if dictionary == None:\n        return 0\n    else:\n        return 1 + max(depth(value) for key, value in dictionary.items())"
    },
    {
      "rank": 83,
      "score": 8.0,
      "candidate": "def depth(dict_):\n    if isinstance(dict_, dict):\n        return 1 + max(depth(val) for key, val in dict_.items())\n    else:\n        return 0\n\n\nif __name__ == \"__main__\":\n    d = {\n        \"key\": \"value\",\n        \"a\": [\n            {\"b\": {\"c\": \"d\"}, \"e\": {\"f\": \"g\"}},\n            {\"b\": {\"c\": \"d\"}},\n        ],\n    }\n\n    print(depth(d))"
    },
    {
      "rank": 84,
      "score": 8.0,
      "candidate": "def depth(dictionary):\n    \"\"\"\n    :type dictionary: dict\n    :rtype: int\n    \"\"\"\n    if not dictionary:\n        return 0\n    return 1 + max(depth(v) for k, v in dictionary.items())\n\n\nif __name__ == \"__main__\":\n    print(depth({\"a\": 1, \"b\": 2, \"c\": 3}))"
    },
    {
      "rank": 85,
      "score": 8.0,
      "candidate": "def depth(dictionary):\n    # write your code here\n    if not dictionary:\n        return 0\n    depth = 1\n    for key in dictionary:\n        depth = max(depth, depth + depth(dictionary[key]))\n    return depth\n\nprint(depth({\"a\":1, \"b\":2, \"c\":3}))"
    },
    {
      "rank": 86,
      "score": 8.0,
      "candidate": "def depth(dictionary):\n    if not dictionary:\n        return 0\n    else:\n        return 1 + max(depth(value) for value in dictionary.values())\n\n\nif __name__ == \"__main__\":\n    assert depth({\"a\": 1, \"b\": 2, \"c\": 3}) == 3\n    assert depth({\"a\": 1, \"b\": 2, \"c\": 3, \"d\": 4}) == 4\n    assert depth({\"a\": 1, \"b\": 2, \"c\": 3, \"d\": 4, \"e\": 5}) == 5"
    },
    {
      "rank": 87,
      "score": 8.0,
      "candidate": "def depth(d):\n    if type(d) is dict:\n        return 1 + max(depth(key) for key in d)\n    else:\n        return 0\n\n\nif __name__ == '__main__':\n    d = {'a': 1, 'b': 2, 'c': 3}\n    print(depth(d))"
    },
    {
      "rank": 88,
      "score": 8.0,
      "candidate": "class Node:\n    def __init__(self, key, value):\n        self.key = key\n        self.value = value\n\n    def __str__(self):\n        return f\"{self.key} -> {self.value}\"\n\n\ndef depth(node, level=0):\n    if isinstance(node, dict):\n        return level + 1\n    if isinstance(node, list):\n        return max(depth(n, level + 1) for n in node)\n    return level\n\n\ndef depth_list(node, level=0):\n    if isinstance(node, dict):\n        return depth(node, level + 1)\n    if isinstance(node, list):\n        return max(depth_list(n, level + 1) for n in node)\n    return level\n\n\nif __name__ == \"__main__\":\n    root = Node(\"root\", \"root\")\n    root.children = [Node(\"child\", \"child\"), Node(\"child2\", \"child2\"), Node(\"child3\", \"child3\")]\n    print(depth(root))\n    print(depth_list(root))"
    },
    {
      "rank": 89,
      "score": 8.0,
      "candidate": "def depth(d):\n    \"\"\"\n    :type d: dict\n    :rtype: int\n    \"\"\"\n    if not d:\n        return 0\n    return 1 + max(depth(v) for v in d.values())\n\n\nif __name__ == \"__main__\":\n    print(depth({\"a\": 1, \"b\": 2}))\n    print(depth({\"a\": 1, \"b\": 2, \"c\": 3}))"
    },
    {
      "rank": 90,
      "score": 8.0,
      "candidate": "def depth(d):\n    if not d:\n        return 0\n    else:\n        return 1 + max(depth(k) for k in d.keys())\n\nd = {'a': 1, 'b': 2, 'c': 3}\nprint(depth(d))"
    },
    {
      "rank": 91,
      "score": 8.0,
      "candidate": "def depth(d):\n    if isinstance(d, dict):\n        return 1 + max([depth(v) for k, v in d.items()])\n    else:\n        return 0\n\n\nif __name__ == '__main__':\n    d = {'a': 1, 'b': 2, 'c': 3}\n    print(depth(d))"
    },
    {
      "rank": 92,
      "score": 8.0,
      "candidate": "def depth(d):\n    if not d:\n        return 0\n    return 1 + max(depth(k) for k in d.keys())\n\nif __name__ == '__main__':\n    d = {'a': 1, 'b': 2, 'c': 3}\n    print(depth(d))"
    },
    {
      "rank": 93,
      "score": 8.0,
      "candidate": "def depth(dict):\n    depth = 0\n    for key, value in dict.items():\n        if isinstance(value, dict):\n            depth += 1\n            depth += depth(value)\n        else:\n            print(f\"{key} = {value}\")\n    return depth\n\n\nif __name__ == \"__main__\":\n    depth({'a': {'b': {'c': 1}, 'd': {'e': 2}}})"
    },
    {
      "rank": 94,
      "score": 8.0,
      "candidate": "def depth(d):\n    if not d:\n        return 0\n\n    return 1 + max(depth(k) for k in d.keys())\n\nprint(depth({\"a\": 1, \"b\": 2, \"c\": 3}))"
    },
    {
      "rank": 95,
      "score": 1.0,
      "candidate": "def depth(d):\n    # your code here\n    return 1 + max(depth(k) for k in d.keys())\n\n\nprint(depth({'a': 1, 'b': 2, 'c': 3, 'd': 4}))"
    },
    {
      "rank": 96,
      "score": 1.0,
      "candidate": "class Node:\n    def __init__(self, value):\n        self.value = value\n        self.next = None\n\n\ndef depth(node):\n    if node is None:\n        return 0\n    return 1 + max(depth(n) for n in node.next)\n\n\ndef test_depth():\n    node = Node(1)\n    node.next = Node(2)\n    node.next.next = Node(3)\n    node.next.next.next = Node(4)\n\n    assert depth(node) == 1"
    },
    {
      "rank": 97,
      "score": 1.0,
      "candidate": "class DictNode:\n    def __init__(self, val):\n        self.val = val\n        self.next = None\n\n\ndef depth(d):\n    if d is None:\n        return 0\n    return 1 + max(depth(v) for v in d.values())\n\n\ndef depth_recursive(d, depth):\n    if d is None:\n        return depth\n    return depth + 1 + max(depth_recursive(v, depth) for v in d.values())\n\n\nd = {\"a\": 1, \"b\": 2, \"c\": 3}\n\nprint(depth(d))\nprint(depth_recursive(d, 0))"
    },
    {
      "rank": 98,
      "score": 1.0,
      "candidate": "from typing import Dict\n\n\ndef depth(d: Dict) -> int:\n    \"\"\"\n    Time: O(n)\n    Space: O(1)\n    \"\"\"\n    if len(d) == 0:\n        return 0\n\n    if len(d) == 1:\n        return 1\n\n    return max(depth(k) for k in d.keys()) + 1\n\n\nif __name__ == \"__main__\":\n    d = {\"a\": 1, \"b\": 2, \"c\": 3}\n    assert depth(d) == 2"
    },
    {
      "rank": 99,
      "score": 1.0,
      "candidate": "def depth(d):\n    if len(d) == 0:\n        return 0\n    else:\n        return 1 + max(depth(v) for k, v in d.items())\n\n\nif __name__ == '__main__':\n    print(depth({'a': 1, 'b': 2, 'c': 3, 'd': 4}))\n    print(depth({'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5}))\n    print(depth({'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5, 'f': 6}))"
    },
    {
      "rank": 100,
      "score": 1.0,
      "candidate": "class Node:\n    def __init__(self, data):\n        self.data = data\n        self.next = None\n\n\ndef depth(node):\n    \"\"\"\n    Find the depth of a dictionary\n    :param node:\n    :return:\n    \"\"\"\n    if node is None:\n        return 0\n    if node.next is None:\n        return 1\n    return 1 + max(depth(node.next), depth(node))\n\n\nif __name__ == \"__main__\":\n    node = Node({'a': 1, 'b': 2, 'c': 3})\n    print(depth(node))"
    }
  ]
}