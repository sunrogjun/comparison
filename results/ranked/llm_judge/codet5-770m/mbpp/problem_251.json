{
  "timestamp": "2025-09-14T14:18:37.174539",
  "method": "improved_llm_judge",
  "judge_model": "codellama/CodeLlama-7b-Python-hf",
  "target_model": "codet5-770m",
  "dataset": "mbpp",
  "problem_number": 251,
  "total_candidates": 100,
  "results": [
    {
      "rank": 1,
      "score": 10.0,
      "candidate": "def split_list(l, n):\n    return l[:n], l[n:]\n\n\nif __name__ == \"__main__\":\n    print(split_list([1, 2, 3, 4, 5, 6, 7, 8, 9], 3))"
    },
    {
      "rank": 2,
      "score": 10.0,
      "candidate": "def split(lst, n):\n    return lst[:n], lst[n:]\n\n\nprint(split([1, 2, 3, 4, 5, 6, 7, 8], 3))"
    },
    {
      "rank": 3,
      "score": 10.0,
      "candidate": "def split_list(list, length):\n    # Write your code here\n    if len(list) < length:\n        return [list[0:length], list[length:]]\n    else:\n        return [list[0:length], list[length:]]\n\n\nprint(split_list([1, 2, 3, 4, 5], 3))"
    },
    {
      "rank": 4,
      "score": 10.0,
      "candidate": "def split_list(lst, n):\n    return [lst[i:i+n] for i in range(0, len(lst), n)]\n\n\nprint(split_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], 3))"
    },
    {
      "rank": 5,
      "score": 10.0,
      "candidate": "def split_list(l, n):\n    return l[:n], l[n:]\n\nprint(split_list([1,2,3,4,5,6,7,8,9,10], 3))\nprint(split_list([1,2,3,4,5,6,7,8,9,10], 7))\nprint(split_list([1,2,3,4,5,6,7,8,9,10], 12))"
    },
    {
      "rank": 6,
      "score": 10.0,
      "candidate": "def split_list(list, length):\n    left = list[0:length]\n    right = list[length:]\n\n    return left, right\n\nprint(split_list([1,2,3,4,5,6,7,8,9], 3))"
    },
    {
      "rank": 7,
      "score": 10.0,
      "candidate": "def split_list(list, length):\n    return list[:length], list[length:]\n\n\nprint(split_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 4))\nprint(split_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], 5))\nprint(split_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 161, 162, 163, 165, 166, 167, 168, 169, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185,"
    },
    {
      "rank": 8,
      "score": 10.0,
      "candidate": "def split_list(list, length):\n    return list[:length], list[length:]\n\n\nprint(split_list([1, 2, 3, 4, 5, 6, 7, 8, 9], 3))\nprint(split_list([1, 2, 3, 4, 5, 6, 7, 8, 9], 4))\nprint(split_list([1, 2, 3, 4, 5, 6, 7, 8, 9], 5))"
    },
    {
      "rank": 9,
      "score": 10.0,
      "candidate": "def split_list(lst, length):\n    if length == 0:\n        return [lst[0:2]]\n    elif length == 1:\n        return [lst[0]]\n    else:\n        return [lst[0], lst[length:]]\n\nif __name__ == \"__main__\":\n    print(split_list([1,2,3,4,5], 1))\n    print(split_list([1,2,3,4,5], 2))\n    print(split_list([1,2,3,4,5], 3))\n    print(split_list([1,2,3,4,5], 4))\n    print(split_list([1,2,3,4,5], 5))\n    print(split_list([1,2,3,4,5], 6))\n    print(split_list([1,2,3,4,5], 7))\n    print(split_list([1,2,3,4,5], 8))\n    print(split_list([1,2,3,4,5], 9))\n    print(split_list([1,2,3,4,5], 10))"
    },
    {
      "rank": 10,
      "score": 10.0,
      "candidate": "def split_list(list, first_len):\n    if first_len == 0:\n        return list[:], list[:]\n    else:\n        return list[:first_len], list[first_len:]"
    },
    {
      "rank": 11,
      "score": 10.0,
      "candidate": "def split(arr, n):\n    first_part = arr[:n]\n    second_part = arr[n:]\n    return first_part, second_part\n\n\ndef test():\n    arr = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    n = len(arr)\n    print(split(arr, n))\n\nif __name__ == \"__main__\":\n    test()"
    },
    {
      "rank": 12,
      "score": 10.0,
      "candidate": "def split_list(arr, length):\n    return arr[:length], arr[length:]\n\n\nprint(split_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3))\nprint(split_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 7))\nprint(split_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5))\nprint(split_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 10))"
    },
    {
      "rank": 13,
      "score": 10.0,
      "candidate": "def split_list(lst, n):\n    return lst[0:n], lst[n:]\n\n\nprint(split_list([1, 2, 3, 4], 3))\nprint(split_list([1, 2, 3, 4, 5], 3))\nprint(split_list([1, 2, 3, 4, 5, 6, 7, 8, 9], 4))\nprint(split_list([1, 2, 3, 4, 5, 6, 7, 8, 9], 5))"
    },
    {
      "rank": 14,
      "score": 10.0,
      "candidate": "def split_list(list_of_numbers):\n    first_part = list_of_numbers[0]\n    second_part = list_of_numbers[1:]\n\n    return [first_part, second_part]"
    },
    {
      "rank": 15,
      "score": 10.0,
      "candidate": "def split(list, length):\n    return [list[i:i + length] for i in range(0, len(list), length)]\n\n\nif __name__ == \"__main__\":\n    print(split([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2))"
    },
    {
      "rank": 16,
      "score": 10.0,
      "candidate": "def split_list_into_two(lst, first_length):\n    return lst[:first_length], lst[first_length:]\n\n\nif __name__ == '__main__':\n    print(split_list_into_two([1, 2, 3, 4, 5, 6, 7, 8, 9], 3))"
    },
    {
      "rank": 17,
      "score": 10.0,
      "candidate": "def split_list_into_two(list_of_items, length):\n    first_part = list_of_items[0:length]\n    second_part = list_of_items[length:]\n    return first_part, second_part\n\nif __name__ == '__main__':\n    print(split_list_into_two([1,2,3,4,5,6,7,8,9], 2))"
    },
    {
      "rank": 18,
      "score": 9.370583536698913,
      "candidate": "def split_list(list, length):\n    first_part = list[:length]\n    second_part = list[length:]\n    return first_part, second_part\n\n\nprint(split_list([1, 2, 3, 4, 5], 2))"
    },
    {
      "rank": 19,
      "score": 9.234050852198141,
      "candidate": "def split_list(lst, n):\n    return lst[:n], lst[n:]\n\nprint(split_list([1,2,3,4], 3))\nprint(split_list([1,2,3,4], 2))\nprint(split_list([1,2,3,4,5], 2))\nprint(split_list([1,2,3,4,5,6], 3))\nprint(split_list([1,2,3,4,5,6], 4))"
    },
    {
      "rank": 20,
      "score": 9.226766272351448,
      "candidate": "def split_list(arr, n):\n    return [arr[i:i + n] for i in range(0, len(arr), n)]\n\nif __name__ == \"__main__\":\n    print(split_list([1,2,3,4,5], 2))\n    print(split_list([1,2,3,4,5], 3))\n    print(split_list([1,2,3,4,5], 4))\n    print(split_list([1,2,3,4,5], 5))\n    print(split_list([1,2,3,4,5], 6))"
    },
    {
      "rank": 21,
      "score": 9.21346272767743,
      "candidate": "def split_list(l, n):\n    first = l[:n]\n    second = l[n:]\n\n    return first, second\n\n\nprint(split_list([1, 2, 3, 4, 5, 6], 2))"
    },
    {
      "rank": 22,
      "score": 9.205959372648458,
      "candidate": "def split_list_into_two_parts(list_of_numbers):\n    # Your code here\n    first_part = list_of_numbers[0:len(list_of_numbers)//2]\n    second_part = list_of_numbers[len(list_of_numbers)//2:]\n    return first_part, second_part\n\n\nprint(split_list_into_two_parts([1, 2, 3, 4, 5]))\nprint(split_list_into_two_parts([1, 2, 3, 4]))\nprint(split_list_into_two_parts([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]))\nprint(split_list_into_two_parts([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]))"
    },
    {
      "rank": 23,
      "score": 9.177268828905222,
      "candidate": "def split_list(list, length):\n    return list[:length], list[length:]\n\n\nprint(split_list([1, 2, 3, 4, 5], 3))"
    },
    {
      "rank": 24,
      "score": 9.122564458729856,
      "candidate": "def split_list(l, first_part):\n    \"\"\"\n    :type l: list\n    :type first_part: int\n    :rtype: list\n    \"\"\"\n    if first_part == 0:\n        return [l[0], l[1:]]\n    else:\n        return [l[0], l[1:first_part]]\n\n\ndef test_split_list():\n    assert split_list([1, 2, 3, 4, 5], 1) == [1, 2, 3, 4, 5]\n    assert split_list([1, 2, 3, 4, 5], 2) == [1, 2, 3, 4, 5]\n    assert split_list([1, 2, 3, 4, 5], 3) == [1, 2, 3, 4, 5]\n    assert split_list([1, 2, 3, 4, 5], 4) == [1, 2, 3, 4, 5]\n    assert split_list([1, 2, 3, 4, 5], 5) == [1, 2, 3, 4, 5]\n    assert split_list([1, 2, 3, 4, 5], 6) == [1, 2, 3, 4, 5]\n    assert split_list([1, 2, 3, 4, 5], 7) == [1, 2, 3, 4, 5]"
    },
    {
      "rank": 25,
      "score": 8.973005557553902,
      "candidate": "def split_list(list_input, first_part_len):\n    return list_input[:first_part_len], list_input[first_part_len:]"
    },
    {
      "rank": 26,
      "score": 8.95994420569242,
      "candidate": "def split_list(l, n):\n    return l[0:n], l[n:]"
    },
    {
      "rank": 27,
      "score": 8.946210893390457,
      "candidate": "def split(l, n):\n    return l[:n], l[n:]\n\nprint(split([1,2,3,4,5,6,7], 2))"
    },
    {
      "rank": 28,
      "score": 8.932217008005624,
      "candidate": "def split_list(list, length):\n    return list[0:length], list[length:]\n\nprint(split_list([1,2,3,4,5,6,7], 2))\nprint(split_list([1,2,3,4,5,6,7], 3))\nprint(split_list([1,2,3,4,5,6,7], 4))"
    },
    {
      "rank": 29,
      "score": 8.910084504002544,
      "candidate": "def split_list(list, length):\n    first = list[:length]\n    second = list[length:]\n    return first, second\n\nprint(split_list([1, 2, 3, 4, 5], 3))"
    },
    {
      "rank": 30,
      "score": 8.85571690049604,
      "candidate": "def split_list(lst, n):\n    if n == 0:\n        return (lst, lst)\n\n    l1, l2 = split_list(lst, n-1)\n    return (l1 + [lst[0]], l2 + [lst[-1]])\n\n\nprint(split_list([1, 2, 3, 4, 5], 2))"
    },
    {
      "rank": 31,
      "score": 8.850707355641543,
      "candidate": "def split_list(l: list, length: int) -> list:\n    if len(l) == 1:\n        return [l[0]]\n    else:\n        return [l[0], l[1]]\n\n\nif __name__ == \"__main__\":\n    assert split_list([1, 2, 3], 2) == [1, 2], \"Test 1\"\n    assert split_list([1, 2, 3, 4], 2) == [1, 2, 3, 4], \"Test 2\"\n    assert split_list([1, 2, 3, 4, 5, 6], 2) == [1, 2, 3, 4, 5, 6], \"Test 3\"\n    assert split_list([1, 2, 3, 4, 5, 6, 7], 2) == [1, 2, 3, 4, 5, 6, 7], \"Test 4\""
    },
    {
      "rank": 32,
      "score": 8.8281618090209,
      "candidate": "def split_list_into_two_parts(arr, n):\n    result = []\n    for i in range(0, n):\n        result.append(arr[i])\n\n    return result\n\nprint(split_list_into_two_parts([1,2,3,4,5], 4))"
    },
    {
      "rank": 33,
      "score": 8.81367773444215,
      "candidate": "def split_list(list, first_part_length):\n    \"\"\"\n    :type list: list[int]\n    :type first_part_length: int\n    :rtype: list[int]\n    \"\"\"\n    if len(list) <= first_part_length:\n        return list\n    return list[:first_part_length], list[first_part_length:]\n\n\nprint(split_list([1, 2, 3, 4, 5], 2))"
    },
    {
      "rank": 34,
      "score": 8.76828871349479,
      "candidate": "def split_list(list_, first_length):\n    first_part = list_[:first_length]\n    second_part = list_[first_length:]\n\n    return first_part, second_part\n\n\nprint(split_list([1, 2, 3, 4, 5], 2))"
    },
    {
      "rank": 35,
      "score": 8.750282588864879,
      "candidate": "def split_list(arr, length):\n    # Your code here\n    result = []\n    for i in range(length):\n        result.append(arr[i])\n    return result\n\nprint(split_list([1,2,3,4,5,6,7,8,9,10], 3))"
    },
    {
      "rank": 36,
      "score": 8.715724466237427,
      "candidate": "def split_list(lst, length):\n\tif length < 2:\n\t\treturn [lst]\n\telse:\n\t\treturn [lst[:length], lst[length:]]\n\n\ndef main():\n\tlst = [1, 2, 3, 4, 5, 6]\n\tprint(split_list(lst, 2))\n\n\nif __name__ == \"__main__\":\n\tmain()"
    },
    {
      "rank": 37,
      "score": 8.692801520950061,
      "candidate": "def split(arr, length):\n    return arr[:length], arr[length:]\n\nprint(split([1,2,3,4,5], 3))"
    },
    {
      "rank": 38,
      "score": 8.632293453617281,
      "candidate": "def split_list(l, first_part):\n    result = []\n    for i in range(first_part):\n        result.append(l[i])\n    return result\n\n\nprint(split_list([1, 2, 3, 4, 5], 2))"
    },
    {
      "rank": 39,
      "score": 8.625262456968262,
      "candidate": "def split_list(lst, n):\n    return lst[:n], lst[n:]\n\n\nprint(split_list([1, 2, 3, 4, 5], 3))"
    },
    {
      "rank": 40,
      "score": 8.625142247198651,
      "candidate": "def split_list(lst, length):\n    first = lst[0:length]\n    second = lst[length:]\n    return first, second\n\n\nif __name__ == '__main__':\n    print(split_list([1, 2, 3, 4, 5, 6], 3))"
    },
    {
      "rank": 41,
      "score": 8.616253589228675,
      "candidate": "def split_list(list_, first_part_len):\n    first_part_len = int(first_part_len)\n    first_part = list_[:first_part_len]\n    second_part = list_[first_part_len:]\n    return first_part, second_part\n\n\nprint(split_list([1, 2, 3, 4, 5, 6, 7, 8, 9], 3))"
    },
    {
      "rank": 42,
      "score": 8.610076160146226,
      "candidate": "def split_list(l,n):\n    return l[0:n],l[n:]\n\n\nprint(split_list([1,2,3,4,5,6],3))"
    },
    {
      "rank": 43,
      "score": 8.606486429141842,
      "candidate": "def split_list(list_, len_):\n    list_1 = list_[:len_]\n    list_2 = list_[len_:]\n    return list_1, list_2\n\n\nprint(split_list([1, 2, 3, 4, 5, 6, 7, 8, 9], 2))"
    },
    {
      "rank": 44,
      "score": 8.60156811074208,
      "candidate": "def split_list(lst, l):\n    return (lst[0:l], lst[l:])\n\n\nif __name__ == \"__main__\":\n    assert split_list([1, 2, 3, 4, 5, 6, 7, 8, 9], 3) == (\n        [1, 2, 3],\n        [4, 5, 6, 7, 8, 9],\n    )"
    },
    {
      "rank": 45,
      "score": 8.565425580227462,
      "candidate": "def split_list(lst, n):\n    if len(lst) < n:\n        return lst, []\n    elif len(lst) == n:\n        return lst, [lst[0]]\n    else:\n        return [lst[0:n], lst[n:]]"
    },
    {
      "rank": 46,
      "score": 8.548876241946822,
      "candidate": "def split_list(list, length):\n    return list[0:length], list[length:]\n\nprint(split_list([1,2,3,4,5,6,7], 2))\nprint(split_list([1,2,3,4,5,6,7], 4))\nprint(split_list([1,2,3,4,5,6,7], 4))\nprint(split_list([1,2,3,4,5,6,7], 1))\nprint(split_list([1,2,3,4,5,6,7], 3))"
    },
    {
      "rank": 47,
      "score": 8.542875062379007,
      "candidate": "def split_list(arr, length):\n    print(f\"Splitting list {arr} into two parts with length {length}\")\n    return arr[:length], arr[length:]\n\n\nprint(split_list([1, 2, 3, 4, 5, 6, 7], 2))\nprint(split_list([1, 2, 3, 4, 5, 6, 7], 3))"
    },
    {
      "rank": 48,
      "score": 8.53012858503943,
      "candidate": "def split_list(l,n):\n    return l[0:n],l[n:]\n\nprint(split_list([1,2,3,4,5,6,7,8,9,10],2))"
    },
    {
      "rank": 49,
      "score": 8.499905739299377,
      "candidate": "def split_list(list_, first_part):\n    return list_[0:first_part], list_[first_part:]\n\n\nprint(split_list([1, 2, 3, 4, 5, 6, 7, 8, 9], 3))"
    },
    {
      "rank": 50,
      "score": 8.478208546788407,
      "candidate": "def split_list(l: list, first: int) -> list:\n    return l[first:], l[:first]\n\n\nprint(split_list([1, 2, 3, 4, 5, 6], 3))"
    },
    {
      "rank": 51,
      "score": 8.437695832075478,
      "candidate": "def split_list(l: list, first_part_len: int) -> list:\n    return l[:first_part_len], l[first_part_len:]\n\n\nprint(split_list([1, 2, 3, 4, 5, 6], 2))"
    },
    {
      "rank": 52,
      "score": 8.426531424889468,
      "candidate": "def split(arr, first_len):\n    return arr[:first_len], arr[first_len:]\n\nprint(split([1,2,3,4,5], 3))"
    },
    {
      "rank": 53,
      "score": 8.408439383654278,
      "candidate": "def split_list(list, first_part_length):\n    first_part = list[:first_part_length]\n    second_part = list[first_part_length:]\n\n    return first_part, second_part\n\n\nprint(split_list([1,2,3,4,5,6,7,8,9], 2))\nprint(split_list([1,2,3,4,5,6,7,8,9], 4))"
    },
    {
      "rank": 54,
      "score": 8.386620303250325,
      "candidate": "def split(list_, first_len):\n    return list_[0:first_len], list_[first_len:]\n\nprint(split([1, 2, 3, 4, 5, 6, 7, 8, 9], 2))\nprint(split([1, 2, 3, 4, 5, 6, 7, 8, 9], 2))\nprint(split([1, 2, 3, 4, 5, 6, 7, 8, 9], 4))\nprint(split([1, 2, 3, 4, 5, 6, 7, 8, 9], -1))\nprint(split([1, 2, 3, 4, 5, 6, 7, 8, 9], 0))"
    },
    {
      "rank": 55,
      "score": 8.375312293858853,
      "candidate": "def split_list(list_of_numbers, first_part_length):\n    # Write your code here\n    first_part = list_of_numbers[0:first_part_length]\n    second_part = list_of_numbers[first_part_length:]\n    return first_part, second_part"
    },
    {
      "rank": 56,
      "score": 8.351614956112536,
      "candidate": "def split_list(list, first_part_len):\n    return list[0:first_part_len], list[first_part_len:]\n\n\nif __name__ == \"__main__\":\n    assert split_list([1, 2, 3, 4], 2) == (1, 2, 3, 4)\n    assert split_list([1, 2, 3, 4], 1) == (1, 2, 3, 4)\n    assert split_list([1, 2, 3, 4], 2) == (1, 2, 3, 4)\n    assert split_list([1, 2, 3, 4], 0) == (1, 2, 3, 4)"
    },
    {
      "rank": 57,
      "score": 8.331556294201176,
      "candidate": "def split_list(list, n):\n    return list[0:n], list[n:]\n\n\nprint(split_list([1, 2, 3, 4, 5], 3))"
    },
    {
      "rank": 58,
      "score": 8.327375965969855,
      "candidate": "def split_list(l, n):\n    return l[0:n], l[n:]\n\nprint(split_list([1, 2, 3, 4, 5, 6, 7], 3))\nprint(split_list([1, 2, 3, 4, 5, 6, 7], 2))\nprint(split_list([1, 2, 3, 4, 5, 6, 7], 3))"
    },
    {
      "rank": 59,
      "score": 8.327367757082776,
      "candidate": "def split_list(list, length):\n    if len(list) == 1:\n        return [list[0], list[0]]\n    else:\n        return [list[0][:length], list[1][:length]]\n\n\nlist1 = [1, 2, 3, 4, 5]\nprint(split_list(list1, 4))\nlist2 = [1, 2, 3, 4, 5]\nprint(split_list(list2, 4))\nlist3 = [1, 2, 3, 4, 5, 6]\nprint(split_list(list3, 4))"
    },
    {
      "rank": 60,
      "score": 8.298597569547805,
      "candidate": "def split_list(list_, n):\n    return list_[:n], list_[n:]\n\n\nprint(split_list([1, 2, 3, 4, 5], 3))"
    },
    {
      "rank": 61,
      "score": 8.2938925966498,
      "candidate": "def split_list(list_of_numbers, length):\n    if length < 0:\n        return False\n    elif len(list_of_numbers) == 1:\n        return [list_of_numbers[0], list_of_numbers[0]]\n    else:\n        return [list_of_numbers[0], list_of_numbers[length]]\n\n\ndef test_split_list():\n    assert split_list([1, 2, 3, 4, 5], 0) == [1, 2, 3]\n    assert split_list([1, 2, 3, 4, 5], 1) == [1, 2, 3]\n    assert split_list([1, 2, 3, 4, 5], 2) == [1, 2, 3, 4, 5]\n    assert split_list([1, 2, 3, 4, 5], 3) == [1, 2, 3, 4, 5]\n    assert split_list([1, 2, 3, 4, 5], 4) == [1, 2, 3, 4, 5]\n    assert split_list([1, 2, 3, 4, 5], 5) == [1, 2, 3, 4, 5]\n    assert split_list([1, 2, 3, 4, 5], 6) == [1, 2, 3, 4, 5]"
    },
    {
      "rank": 62,
      "score": 8.289838256518838,
      "candidate": "def split_list(list, length):\n    first = list[:length]\n    second = list[length:]\n\n    return first, second\n\n\nprint(split_list([1, 2, 3, 4, 5, 6, 7, 8, 9], 2))\nprint(split_list([1, 2, 3, 4, 5, 6, 7, 8, 9], 5))"
    },
    {
      "rank": 63,
      "score": 8.251903304236286,
      "candidate": "def split_list(lst, n):\n    return lst[0:n], lst[n:]\n\n\nprint(split_list([1, 2, 3, 4, 5, 6, 7], 3))\nprint(split_list([1, 2, 3, 4, 5, 6, 7], 4))\nprint(split_list([1, 2, 3, 4, 5, 6, 7], 5))"
    },
    {
      "rank": 64,
      "score": 8.214125058964552,
      "candidate": "def split_list(list_of_numbers, length):\n\tfirst_part = list_of_numbers[0:length]\n\tsecond_part = list_of_numbers[length:]\n\treturn first_part, second_part\n\nprint(split_list([1,2,3,4,5], 3))"
    },
    {
      "rank": 65,
      "score": 8.212735598038213,
      "candidate": "def split_list(lst, length):\n    return [lst[i:i+length] for i in range(0, len(lst), length)]\n\n\nprint(split_list([1, 2, 3, 4, 5], 3))\nprint(split_list([1, 2, 3, 4, 5], 4))"
    },
    {
      "rank": 66,
      "score": 8.211579567659316,
      "candidate": "def split_list(lst, n):\n    lst_len = len(lst)\n    left_len = lst_len // n\n    right_len = lst_len % n\n    lst_left = lst[0:left_len]\n    lst_right = lst[left_len:]\n    return [lst_left, lst_right]\n\nlst = [1, 2, 3, 4, 5, 6, 7]\nn = 5\nprint(split_list(lst, n))"
    },
    {
      "rank": 67,
      "score": 8.209707251476969,
      "candidate": "def split_list(l, n):\n    return [l[i:i+n] for i in range(0, len(l), n)]\n\n\ndef test():\n    test_list = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    assert split_list(test_list, 4) == [1, 2, 3, 4]\n    assert split_list(test_list, 5) == [1, 2, 3, 4, 5]\n    assert split_list(test_list, 6) == [1, 2, 3, 4, 5, 6]\n    assert split_list(test_list, 7) == [1, 2, 3, 4, 5, 6, 7]\n    assert split_list(test_list, 8) == [1, 2, 3, 4, 5, 6, 7, 8]\n    assert split_list(test_list, 9) == [1, 2, 3, 4, 5, 6, 7, 8, 9]\n\n\nif __name__ == '__main__':\n    test()"
    },
    {
      "rank": 68,
      "score": 8.2048573255218,
      "candidate": "def split(l):\n    return l[:len(l)//2], l[len(l)//2:]\n\n\nprint(split([1, 2, 3, 4, 5]))\nprint(split([1, 2, 3, 4, 5, 6, 7]))"
    },
    {
      "rank": 69,
      "score": 8.172253082181854,
      "candidate": "def split_list(lst, n):\n    if n == 1:\n        return [lst[0]]\n    else:\n        return [lst[i:i+n] for i in range(0, len(lst), n)]\n\n\nif __name__ == '__main__':\n    assert split_list([1, 2, 3, 4], 1) == [1, 2, 3, 4]\n    assert split_list([1, 2, 3, 4], 2) == [1, 2, 3, 4]\n    assert split_list([1, 2, 3, 4], 3) == [1, 2, 3, 4]"
    },
    {
      "rank": 70,
      "score": 8.163300679823958,
      "candidate": "def split(l):\n    i = 0\n    j = 0\n    l_len = len(l)\n    while i < l_len:\n        j = i + 1\n        while j < l_len:\n            yield l[i:j]\n            i = j\n            j += 1\n\n\nif __name__ == \"__main__\":\n    print(list(split([1, 2, 3, 4, 5, 6, 7])))"
    },
    {
      "rank": 71,
      "score": 8.144125099485041,
      "candidate": "def split_list_into_two_parts(list_of_elements):\n    return list_of_elements[:int(len(list_of_elements)/2)], list_of_elements[int(len(list_of_elements)/2):]\n\nprint(split_list_into_two_parts([1,2,3,4,5]))"
    },
    {
      "rank": 72,
      "score": 8.143591138329747,
      "candidate": "def split_list(list_, length):\n    list1 = list_[0:length]\n    list2 = list_[length:]\n    return list1, list2\n\nprint(split_list([1,2,3,4,5,6,7,8,9,10], 3))\nprint(split_list([1,2,3,4,5,6,7,8,9,10], 7))"
    },
    {
      "rank": 73,
      "score": 8.121884567141883,
      "candidate": "def split_list(lst, n):\n    return lst[0:n], lst[n:]"
    },
    {
      "rank": 74,
      "score": 8.105983444291466,
      "candidate": "def split_list(lst, length):\n    return lst[:length], lst[length:]\n\nprint(split_list([1, 2, 3, 4, 5], 2))"
    },
    {
      "rank": 75,
      "score": 8.08452234024709,
      "candidate": "def split_list(lst, n):\n    return [lst[i:i+n] for i in range(0,len(lst),n)]\n\n\nprint(split_list([1,2,3,4,5],2))\nprint(split_list([1,2,3,4,5],3))\nprint(split_list([1,2,3,4,5],4))\nprint(split_list([1,2,3,4,5],5))"
    },
    {
      "rank": 76,
      "score": 8.024835682833125,
      "candidate": "def split_list(lst: list, first_len: int):\n    if len(lst) < first_len:\n        return lst[:first_len], lst[first_len:]\n    else:\n        return lst[:first_len], lst[first_len:]\n\n\nif __name__ == \"__main__\":\n    assert split_list([1, 2, 3], 2) == [1, 2, 3]\n    assert split_list([1, 2, 3], 2) == [1, 2, 3, 4]\n    assert split_list([1, 2, 3], 1) == [1, 2, 3]\n    assert split_list([1, 2, 3], 3) == [1, 2, 3, 4]"
    },
    {
      "rank": 77,
      "score": 7.990432406683839,
      "candidate": "def split_list(input_list: list, length: int) -> list:\n    return input_list[length:], input_list[:length]\n\n\nif __name__ == \"__main__\":\n    assert split_list([1, 2, 3, 4, 5], 2) == ([1, 2, 3, 4, 5], [1, 2, 3])"
    },
    {
      "rank": 78,
      "score": 7.938028884277233,
      "candidate": "def split_list(l, n):\n    return l[:n], l[n:]\n\n\ndef test_split_list():\n    assert split_list([1, 2, 3, 4, 5], 2) == (1, 2), \"Test 1\"\n    assert split_list([1, 2, 3, 4, 5], 3) == (1, 2, 3), \"Test 2\"\n    assert split_list([1, 2, 3, 4, 5], 4) == (1, 2, 3, 4, 5), \"Test 3\"\n    assert split_list([1, 2, 3, 4, 5], 5) == (1, 2, 3, 4, 5), \"Test 4\""
    },
    {
      "rank": 79,
      "score": 7.915588979966494,
      "candidate": "def split_list(l):\n    n = len(l)\n    left = l[:n//2]\n    right = l[n//2:]\n    return left, right\n\n\nl = [1, 2, 3, 4, 5, 6, 7]\nprint(split_list(l))"
    },
    {
      "rank": 80,
      "score": 7.8912769574414305,
      "candidate": "def split_list(l, n):\n    return l[:n], l[n:]\n\n\nprint(split_list([1, 2, 3, 4, 5, 6, 7, 8, 9], 3))"
    },
    {
      "rank": 81,
      "score": 7.868947655733293,
      "candidate": "def split_list(list_of_numbers, first_length):\n    # Code here\n    return list_of_numbers[:first_length], list_of_numbers[first_length:]\n\n\nprint(split_list([1, 2, 3, 4], 3))\nprint(split_list([1, 2, 3, 4], 2))\nprint(split_list([1, 2, 3, 4], 1))\nprint(split_list([1, 2, 3, 4], 0))"
    },
    {
      "rank": 82,
      "score": 7.84634113240411,
      "candidate": "def split_list(lst, n):\n    return lst[0:n], lst[n:]\n\n\nprint(split_list([1, 2, 3, 4, 5], 3))\nprint(split_list([1, 2, 3, 4, 5], 3))"
    },
    {
      "rank": 83,
      "score": 7.834022619458933,
      "candidate": "def split_list(lst, length):\n    result = []\n    for i in range(len(lst)):\n        result.append(lst[i:i+length])\n    return result\n\n\nprint(split_list([1, 2, 3, 4, 5, 6], 2))\nprint(split_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3))\nprint(split_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5))"
    },
    {
      "rank": 84,
      "score": 7.780351419995229,
      "candidate": "def split_list_into_two(lst):\n    return lst[:len(lst) // 2], lst[len(lst) // 2:]\n\n\ndef main():\n    lst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    print(split_list_into_two(lst))\n\n\nmain()"
    },
    {
      "rank": 85,
      "score": 7.738292593776799,
      "candidate": "def split_list(list_of_numbers, first_part_length):\n    # Your code here\n    first_part = list_of_numbers[:first_part_length]\n    second_part = list_of_numbers[first_part_length:]\n    return first_part, second_part\n\nprint(split_list([1,2,3,4,5,6], 3))\nprint(split_list([1,2,3,4,5,6], 4))\nprint(split_list([1,2,3,4,5,6], 5))\nprint(split_list([1,2,3,4,5,6], 6))\nprint(split_list([1,2,3,4,5,6], 7))"
    },
    {
      "rank": 86,
      "score": 7.7320703513377165,
      "candidate": "def split_list(list, length):\n    if length < 2:\n        return list\n    else:\n        return [list[0:length], list[length:]]\n\n\nprint(split_list([1, 2, 3, 4], 3))\nprint(split_list([1, 2, 3, 4], 3))\nprint(split_list([1, 2, 3, 4, 5, 6], 4))\nprint(split_list([1, 2, 3, 4, 5, 6, 7], 4))\nprint(split_list([1, 2, 3, 4, 5, 6, 7], 3))"
    },
    {
      "rank": 87,
      "score": 7.705183449260731,
      "candidate": "def split_list(lst, n):\n    if n == 0:\n        return [lst[0]]\n    else:\n        return [lst[0]] + split_list(lst[1:], n-1)\n\n\nprint(split_list([1, 2, 3, 4, 5], 4))\nprint(split_list([1, 2, 3, 4, 5], 5))\nprint(split_list([1, 2, 3, 4, 5], 4))\nprint(split_list([1, 2, 3, 4, 5], 2))"
    },
    {
      "rank": 88,
      "score": 7.5819855281879285,
      "candidate": "def split_list(arr, n):\n    if len(arr) < n:\n        return [arr[0:n], arr[n:]]\n    else:\n        return [arr[:n], arr[n:]]\n\n\nprint(split_list([1, 2, 3, 4, 5, 6], 2))"
    },
    {
      "rank": 89,
      "score": 7.562924366763077,
      "candidate": "def split_list(list, length):\n    return list[0:length], list[length:]\n\n\nprint(split_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3))"
    },
    {
      "rank": 90,
      "score": 7.4878043221155455,
      "candidate": "def split_list(list_, first_length):\n    first_length = int(first_length)\n    if first_length < 0:\n        raise ValueError(\"Invalid first length\")\n    if first_length == 0:\n        return list_\n    elif first_length == 1:\n        return [list_[0]]\n    else:\n        first_part = split_list(list_[:first_length], first_length - 1)\n        second_part = split_list(list_[first_length:], first_length)\n        return first_part + second_part\n\n\nprint(split_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2))\nprint(split_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], -1))"
    },
    {
      "rank": 91,
      "score": 7.464609382504557,
      "candidate": "def split_list(list, length):\n    print(list[:length])\n    print(list[length:])\n\nsplit_list([1, 2, 3, 4, 5], 3)"
    },
    {
      "rank": 92,
      "score": 7.134571892399572,
      "candidate": "def split(list, first_len):\n    first_len = int(first_len)\n    first_list = list[:first_len]\n    second_list = list[first_len:]\n    return first_list, second_list\n\n\nprint(split([1, 2, 3, 4, 5], 2))"
    },
    {
      "rank": 93,
      "score": 3.0,
      "candidate": "def split_list(l, n):\n    return l[0:n], l[n:]\n\n\nprint(split_list([1, 2, 3, 4, 5], 2))\nprint(split_list([1, 2, 3, 4, 5], 4))\nprint(split_list([1, 2, 3, 4, 5], 4))\nprint(split_list([1, 2, 3, 4, 5], 6))\nprint(split_list([1, 2, 3, 4, 5], 6))\nprint(split_list([1, 2, 3, 4, 5], 6))"
    },
    {
      "rank": 94,
      "score": 3.0,
      "candidate": "def split_list(list_to_split, first_length):\n    # code here\n    return list_to_split[:first_length], list_to_split[first_length:]\n\n\nprint(split_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3))"
    },
    {
      "rank": 95,
      "score": 3.0,
      "candidate": "def split_list(list, first_length):\n    return list[0:first_length], list[first_length:]\n\n\nprint(split_list([1, 2, 3, 4], 3))\nprint(split_list([1, 2, 3, 4], 2))\nprint(split_list([1, 2, 3, 4], 4))\nprint(split_list([1, 2, 3, 4], 1))\nprint(split_list([1, 2, 3, 4], 0))\nprint(split_list([1, 2, 3, 4], -1))\nprint(split_list([1, 2, 3, 4], -2))\nprint(split_list([1, 2, 3, 4], -3))\nprint(split_list([1, 2, 3, 4], -4))\nprint(split_list([1, 2, 3, 4], -5))\nprint(split_list([1, 2, 3, 4], -6))\nprint(split_list([1, 2, 3, 4], -7))\nprint(split_list([1, 2, 3, 4], -8))\nprint(split_list([1, 2, 3, 4], -9))\nprint(split_list([1, 2, 3, 4], -10))\nprint(split_list([1, 2, 3, 4], -11))\nprint(split_list([1, 2, 3, 4], -12))\nprint(split_list([1, 2, 3, 4], -13))\nprint(split_list([1, 2, 3, 4], -14))\nprint(split_list([1, 2, 3, 4], -15))\nprint(split_list([1, 2, 3, 4], -16))\nprint(split_list([1, 2, 3, 4], -17))\nprint(split_list([1, 2, 3, 4], -18))\nprint(split_list([1, 2, 3, 4], -19))\nprint(split_list([1, 2, 3, 4], -20))\nprint(split_list([1, 2, 3, 4], -21))\nprint(split_list([1, 2, 3, 4], -"
    },
    {
      "rank": 96,
      "score": 3.0,
      "candidate": "def split_list(list_, first_len):\n    first_part = list_[:first_len]\n    second_part = list_[first_len:]\n\n    return first_part, second_part\n\n\nprint(split_list([1, 2, 3, 4, 5, 6, 7, 8, 9], 3))"
    },
    {
      "rank": 97,
      "score": 3.0,
      "candidate": "def split_list(list_, length):\n    return list_[0:length], list_[length:]\n\n\ndef test_split_list():\n    assert split_list([], 1) == ([], [])\n    assert split_list([1], 1) == ([1], [1])\n    assert split_list([1, 2, 3], 2) == ([1, 2, 3], [1, 2])\n    assert split_list([1, 2, 3, 4], 3) == ([1, 2, 3, 4], [1, 2, 3, 4])\n    assert split_list([1, 2, 3, 4, 5, 6, 7, 8, 9], 4) == ([1, 2, 3, 4, 5, 6, 7, 8, 9], [1, 2, 3, 4, 5, 6, 7, 8, 9])\n    assert split_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11], 5) == ([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])\n    assert split_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13], 6) == ([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13])\n    assert split_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13], 7) == ([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13])\n    assert split_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13], 8) == ([1, 2, 3, 4, 5, 6, 7, 8"
    },
    {
      "rank": 98,
      "score": 3.0,
      "candidate": "def split_list(list, length):\n    if len(list) <= length:\n        return [list]\n    return [list[0:length]]\n\n\nif __name__ == '__main__':\n    assert split_list([1, 2, 3, 4, 5, 6, 7, 8, 9], 2) == [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    assert split_list([1, 2, 3, 4, 5, 6, 7, 8, 9], 4) == [1, 2, 3, 4, 5, 6, 7, 8, 9]"
    },
    {
      "rank": 99,
      "score": 3.0,
      "candidate": "def split_list(list, first_part_len):\n    left = list[:first_part_len]\n    right = list[first_part_len:]\n    return left, right\n\n\nif __name__ == \"__main__\":\n    print(split_list([1, 2, 3, 4, 5, 6, 7, 8, 9], 4))\n    print(split_list([1, 2, 3, 4, 5, 6, 7, 8, 9], 3))\n    print(split_list([1, 2, 3, 4, 5, 6, 7, 8, 9], 2))"
    },
    {
      "rank": 100,
      "score": 3.0,
      "candidate": "def split_list_into_two_parts(list_of_ints):\n    first_part = list_of_ints[0]\n    second_part = list_of_ints[1:]\n    return [first_part, second_part]\n\n\ndef test_split_list_into_two_parts():\n    assert split_list_into_two_parts([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]\n    assert split_list_into_two_parts([1, 2, 3, 4, 5, 6]) == [1, 2, 3, 4, 5, 6]\n    assert split_list_into_two_parts([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]"
    }
  ]
}