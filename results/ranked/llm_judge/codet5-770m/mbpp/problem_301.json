{
  "timestamp": "2025-09-14T14:40:40.610968",
  "method": "improved_llm_judge",
  "judge_model": "codellama/CodeLlama-7b-Python-hf",
  "target_model": "codet5-770m",
  "dataset": "mbpp",
  "problem_number": 301,
  "total_candidates": 100,
  "results": [
    {
      "rank": 1,
      "score": 10.0,
      "candidate": "def volume(a, b):\n    return (a * b) / 2\n\n\nprint(volume(2, 3))"
    },
    {
      "rank": 2,
      "score": 10.0,
      "candidate": "def volume(l):\n    return l * l * l\n\nprint(volume(5))"
    },
    {
      "rank": 3,
      "score": 10.0,
      "candidate": "def cone_volume(length, width):\n    volume = length * width\n    return volume\n\n\ndef main():\n    length = float(input(\"Enter the length of the cone: \"))\n    width = float(input(\"Enter the width of the cone: \"))\n    print(\"The volume of a cone is \", cone_volume(length, width))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 4,
      "score": 10.0,
      "candidate": "def cone_volume(length, width, height):\n    return (length * width * height)\n\n\nprint(cone_volume(3, 4, 5))"
    },
    {
      "rank": 5,
      "score": 10.0,
      "candidate": "def get_volume(r, h):\n    return (3.14159 * r * h) / 2\n\n\nprint(get_volume(3, 4))\nprint(get_volume(3, 5))\nprint(get_volume(3, 6))"
    },
    {
      "rank": 6,
      "score": 10.0,
      "candidate": "def cone_volume(radius):\n    return 3.141592653589793238462643383279502884197169399375105820974944592307816406286224821696\n\nprint(cone_volume(3))"
    },
    {
      "rank": 7,
      "score": 10.0,
      "candidate": "def volume(radius):\n    return 3.14159 * radius * radius\n\n\nprint(volume(4))"
    },
    {
      "rank": 8,
      "score": 10.0,
      "candidate": "def volume(length, width):\n    return length * width\n\n\nif __name__ == \"__main__\":\n    print(volume(10, 10))"
    },
    {
      "rank": 9,
      "score": 10.0,
      "candidate": "def volume(r, h):\n    return r * h\n\ndef test_volume():\n    assert volume(1,1) == 1\n    assert volume(1,2) == 1\n    assert volume(1,3) == 2\n    assert volume(1,4) == 4\n    assert volume(2,1) == 2\n    assert volume(2,2) == 3\n    assert volume(2,3) == 6\n    assert volume(2,4) == 9\n    assert volume(3,1) == 9\n    assert volume(3,2) == 16\n    assert volume(3,3) == 36\n    assert volume(4,1) == 36\n    assert volume(4,2) == 36\n    assert volume(4,3) == 36\n    assert volume(4,4) == 36\n    assert volume(5,1) == 36\n    assert volume(5,2) == 36\n    assert volume(5,3) == 36\n    assert volume(5,4) == 36\n    assert volume(6,1) == 36\n    assert volume(6,2) == 36\n    assert volume(6,3) == 36\n    assert volume(6,4) == 36\n    assert volume(7,1) == 36\n    assert volume(7,2) == 36\n    assert volume(7,3) == 36\n    assert volume(7,4) == 36"
    },
    {
      "rank": 10,
      "score": 10.0,
      "candidate": "def cone_volume(a, b, c):\n    return (a * b * c)\n\nprint(cone_volume(1, 2, 3))\nprint(cone_volume(2, 3, 1))"
    },
    {
      "rank": 11,
      "score": 10.0,
      "candidate": "def volume_cone(radius, height):\n    return (4/3)*(radius**3)*height\n\n\nprint(volume_cone(2, 6))"
    },
    {
      "rank": 12,
      "score": 10.0,
      "candidate": "def cone_volume(cone_length, cone_width):\n    cone_volume = cone_length * cone_width\n    return cone_volume\n\n\nprint(cone_volume(2, 2))\nprint(cone_volume(4, 4))\nprint(cone_volume(4, 4))\nprint(cone_volume(8, 8))\nprint(cone_volume(8, 8))"
    },
    {
      "rank": 13,
      "score": 10.0,
      "candidate": "def volume(r, h):\n    return r * h"
    },
    {
      "rank": 14,
      "score": 10.0,
      "candidate": "def volume_cone(length, width, height, base):\n    return (length * width * height) / base\n\nprint(volume_cone(1, 1, 1, 2))\nprint(volume_cone(1, 1, 2, 2))\nprint(volume_cone(2, 2, 2, 2))\nprint(volume_cone(2, 2, 2, 3))\nprint(volume_cone(2, 2, 3, 1))\nprint(volume_cone(2, 2, 3, 3))\nprint(volume_cone(2, 2, 3, 4))\nprint(volume_cone(2, 2, 3, 5))\nprint(volume_cone(2, 2, 3, 6))\nprint(volume_cone(2, 2, 3, 7))\nprint(volume_cone(2, 2, 3, 8))\nprint(volume_cone(2, 2, 3, 9))\nprint(volume_cone(2, 2, 3, 10))\nprint(volume_cone(2, 2, 3, 11))\nprint(volume_cone(2, 2, 3, 12))\nprint(volume_cone(2, 2, 3, 13))\nprint(volume_cone(2, 2, 3, 14))\nprint(volume_cone(2, 2, 3, 15))\nprint(volume_cone(2, 2, 3, 16))\nprint(volume_cone(2, 2, 3, 17))\nprint(volume_cone(2, 2, 3, 18))\nprint(volume_cone(2, 2, 3, 19))\nprint(volume_cone(2, 2, 3, 20))\nprint(volume_cone(2, 2, 3, 21))\nprint(volume_cone(2, 2, 3, 22))\nprint(volume_cone(2, 2, 3, 23))\nprint(volume_cone(2, 2, 3, 24))\nprint(volume_cone(2, 2, 3, 25))\nprint(volume_cone(2, 2, 3, 26))\nprint(volume_cone(2, 2, 3, 27))\nprint"
    },
    {
      "rank": 15,
      "score": 10.0,
      "candidate": "def volume(r,h):\n    return (r*r+h*h)**(1/2)\n\nprint(volume(5,4))\nprint(volume(3,3))"
    },
    {
      "rank": 16,
      "score": 10.0,
      "candidate": "def cone_volume(a, b, c):\n    return (a * b * c) / 4\n\n\nprint(cone_volume(1, 2, 3))"
    },
    {
      "rank": 17,
      "score": 10.0,
      "candidate": "def cone_volume(radius):\n    return 4 * 3.14 * radius**3\n\nprint(cone_volume(3))"
    },
    {
      "rank": 18,
      "score": 10.0,
      "candidate": "def volume(r, h):\n    return 3.14 * r * h\n\nprint(volume(3, 2))\nprint(volume(2, 3))\nprint(volume(2, 5))\nprint(volume(2, 6))\nprint(volume(3, 4))"
    },
    {
      "rank": 19,
      "score": 10.0,
      "candidate": "def cone_volume(a,b,c):\n    return a*b*c\n\n\nprint(cone_volume(3,3,3))"
    },
    {
      "rank": 20,
      "score": 10.0,
      "candidate": "def volume(r):\n    return 3.14159 * r**3\n\nprint(volume(3))\nprint(volume(5))"
    },
    {
      "rank": 21,
      "score": 10.0,
      "candidate": "def volume(n):\n    return n**3\n\n\nprint(volume(3))\nprint(volume(4))\nprint(volume(5))\nprint(volume(6))"
    },
    {
      "rank": 22,
      "score": 10.0,
      "candidate": "def volume_cone(a, b, c):\n    return a * b * c\n\n\na = float(input('a: '))\nb = float(input('b: '))\nc = float(input('c: '))\n\nprint(f'volume of cone = {volume_cone(a, b, c)}')"
    },
    {
      "rank": 23,
      "score": 10.0,
      "candidate": "def volume(r, theta):\n    return r * r * r * (theta - r / 2)\n\nprint(volume(1, 0))"
    },
    {
      "rank": 24,
      "score": 10.0,
      "candidate": "def volume(a,b,c):\n    return a*b*c\n\nprint(volume(2,5,10))"
    },
    {
      "rank": 25,
      "score": 10.0,
      "candidate": "def volume(r, theta):\n    return 3.14159*r*r*theta\n\nr = float(input(\"Enter radius of cone: \"))\ntheta = float(input(\"Enter angle of cone: \"))\nprint(\"Volume of cone: \", volume(r, theta))"
    },
    {
      "rank": 26,
      "score": 10.0,
      "candidate": "def volume(r, h):\n    return (4/3)*(r*h)\n\nprint(volume(2,2))"
    },
    {
      "rank": 27,
      "score": 10.0,
      "candidate": "def volume(a,b,c):\n    return a*b*c\n\nprint(volume(10,10,10))\nprint(volume(10,10,5))\nprint(volume(10,10,5.5))\nprint(volume(10,10,5.5,5))\nprint(volume(10,10,5,5.5,5.5,5.5,5.5))"
    },
    {
      "rank": 28,
      "score": 10.0,
      "candidate": "def volume(r, h, a):\n    return r * h * a\n\n\nif __name__ == \"__main__\":\n    print(volume(5, 2, 3))"
    },
    {
      "rank": 29,
      "score": 10.0,
      "candidate": "def volume(a, b, c):\n    return a * b * c\n\nprint(volume(2, 3, 4))"
    },
    {
      "rank": 30,
      "score": 10.0,
      "candidate": "from math import pi\n\ndef cone_volume(a, b, c):\n    return a*b*c\n\nprint(cone_volume(1,2,3))\nprint(cone_volume(1,2,-2))\nprint(cone_volume(1,2,-2.3))\nprint(cone_volume(1,2,-3.5))\nprint(cone_volume(1,2,-3.5))"
    },
    {
      "rank": 31,
      "score": 9.0,
      "candidate": "def volume(r, theta):\n    return r * (np.cos(theta)) * (np.sin(theta))"
    },
    {
      "rank": 32,
      "score": 8.0,
      "candidate": "def volume(n):\n    return n * (n + 1) / 2\n\nprint(volume(3))\nprint(volume(4))\nprint(volume(5))"
    },
    {
      "rank": 33,
      "score": 8.0,
      "candidate": "def volume(x, y, z):\n    return (x ** 2 + y ** 2 + z ** 2) ** (1/2)\n\n\nprint(volume(1, 2, 3))\nprint(volume(3, 4, 5))"
    },
    {
      "rank": 34,
      "score": 8.0,
      "candidate": "def cone_volume(r, theta, phi):\n    return (4/3)*(r*r*r)\n\nprint(cone_volume(1, 0, 0))"
    },
    {
      "rank": 35,
      "score": 8.0,
      "candidate": "def volume(r, h):\n    return r * h\n\nprint(volume(1, 3))\nprint(volume(3, 2))\nprint(volume(2, 1))"
    },
    {
      "rank": 36,
      "score": 8.0,
      "candidate": "def get_volume(a, b):\n    return a * b\n\n\nprint(get_volume(3, 4))"
    },
    {
      "rank": 37,
      "score": 8.0,
      "candidate": "def cone_volume(length, width):\n    return length * width\n\nprint(cone_volume(3, 5))\nprint(cone_volume(4, 5))\nprint(cone_volume(6, 5))"
    },
    {
      "rank": 38,
      "score": 8.0,
      "candidate": "def cone_volume(r, h):\n    return (4/3) * r * h"
    },
    {
      "rank": 39,
      "score": 8.0,
      "candidate": "def cone_volume(r, h):\n    return 2 * r * h\n\n\nprint(cone_volume(4, 4))"
    },
    {
      "rank": 40,
      "score": 8.0,
      "candidate": "def cone_volume(r,h):\n    return (r*h)\n\nprint(cone_volume(1,1))\nprint(cone_volume(3,3))\nprint(cone_volume(5,5))"
    },
    {
      "rank": 41,
      "score": 8.0,
      "candidate": "def cone(length, width):\n    return length * width\n\nprint(cone(3, 2))\nprint(cone(4, 3))"
    },
    {
      "rank": 42,
      "score": 8.0,
      "candidate": "def volume_cone(length, width):\n    return length * width\n\nif __name__ == \"__main__\":\n    print(volume_cone(3, 5))"
    },
    {
      "rank": 43,
      "score": 8.0,
      "candidate": "def volume(r, theta):\n    return r * theta * (theta - r)\n\nr = float(input(\"Radius of cone: \"))\ntheta = float(input(\"Theta of cone: \"))\nprint(volume(r, theta))"
    },
    {
      "rank": 44,
      "score": 8.0,
      "candidate": "def volume(length, width):\n    return length * width * length * width\n\nif __name__ == \"__main__\":\n    print(volume(10, 10))"
    },
    {
      "rank": 45,
      "score": 8.0,
      "candidate": "def cone_volume(a, b, c):\n    return a * b * c"
    },
    {
      "rank": 46,
      "score": 8.0,
      "candidate": "def cone_volume(a, b):\n    return a * b\n\nprint(cone_volume(1, 2))\nprint(cone_volume(1, 1))"
    },
    {
      "rank": 47,
      "score": 8.0,
      "candidate": "def volume(a, b, c):\n    return a*b*c\n\nprint(volume(3, 5, 7))\nprint(volume(2, 3, 4))"
    },
    {
      "rank": 48,
      "score": 8.0,
      "candidate": "def cone_volume(radius):\n    return 3.14 * radius ** 2"
    },
    {
      "rank": 49,
      "score": 8.0,
      "candidate": "def volume(r, h):\n\treturn r * h\n\nprint(volume(1, 2))"
    },
    {
      "rank": 50,
      "score": 8.0,
      "candidate": "def volume(radius, height):\n    return 2 * radius * height\n\n\nprint(volume(3, 2))\nprint(volume(3, 4))\nprint(volume(5, 4))"
    },
    {
      "rank": 51,
      "score": 8.0,
      "candidate": "def volume_cone(r, theta):\n    return 3.14159 * (r ** 2) * (theta ** 2)\n\n\ndef volume_cone_2(r, theta):\n    return r * theta * r * theta"
    },
    {
      "rank": 52,
      "score": 8.0,
      "candidate": "def volume(n):\n    return n**3\n\n\nprint(volume(6))"
    },
    {
      "rank": 53,
      "score": 8.0,
      "candidate": "def volume(radius):\n    return 3.14159 * radius ** 2\n\n\nprint(volume(3))"
    },
    {
      "rank": 54,
      "score": 8.0,
      "candidate": "def cone_volume(radius):\n\treturn 3.14 * radius ** 2\n\ndef main():\n\tprint(cone_volume(5))\n\tprint(cone_volume(10))\n\tprint(cone_volume(15))\n\nif __name__ == '__main__':\n\tmain()"
    },
    {
      "rank": 55,
      "score": 8.0,
      "candidate": "import math\n\n\ndef cone_volume(r, h):\n    return math.pi * r * h\n\n\nprint(cone_volume(1, 1))\nprint(cone_volume(1, 2))\nprint(cone_volume(1, 3))\nprint(cone_volume(1, 4))\nprint(cone_volume(1, 5))\nprint(cone_volume(1, 6))\nprint(cone_volume(1, 7))\nprint(cone_volume(1, 8))\nprint(cone_volume(1, 9))\nprint(cone_volume(2, 1))\nprint(cone_volume(2, 2))\nprint(cone_volume(2, 3))\nprint(cone_volume(2, 4))\nprint(cone_volume(2, 5))\nprint(cone_volume(2, 6))\nprint(cone_volume(2, 7))\nprint(cone_volume(2, 8))\nprint(cone_volume(3, 1))\nprint(cone_volume(3, 2))\nprint(cone_volume(3, 3))\nprint(cone_volume(3, 4))\nprint(cone_volume(3, 5))\nprint(cone_volume(3, 6))\nprint(cone_volume(3, 7))\nprint(cone_volume(3, 8))\nprint(cone_volume(4, 1))\nprint(cone_volume(4, 2))\nprint(cone_volume(4, 3))\nprint(cone_volume(4, 4))\nprint(cone_volume(4, 5))\nprint(cone_volume(4, 6))\nprint(cone_volume(4, 7))\nprint(cone_volume(4, 8))\nprint(cone_volume(5, 1))\nprint(cone_volume(5, 2))\nprint(cone_volume(5, 3))\nprint(cone_volume(5, 4))\nprint(cone_volume(5, 5))\nprint(cone_volume(5, 6))\nprint(cone_volume(5, 7))\nprint"
    },
    {
      "rank": 56,
      "score": 8.0,
      "candidate": "def volume_cone(radius):\n    return 3.14159 * radius ** 2\n\n\nprint(volume_cone(3))"
    },
    {
      "rank": 57,
      "score": 8.0,
      "candidate": "def cone_volume(r):\n    return (4/3)*(r**3)\n\nprint(cone_volume(5))"
    },
    {
      "rank": 58,
      "score": 8.0,
      "candidate": "import math\n\ndef cone_volume(r, theta):\n    return (4/3) * math.pi * (r ** 3) * math.sin(theta)\n\nif __name__ == '__main__':\n    r = float(input())\n    theta = float(input())\n    print(cone_volume(r, theta))"
    },
    {
      "rank": 59,
      "score": 8.0,
      "candidate": "def get_volume(radius):\n    return 4/3 * (radius**3)\n\nprint(get_volume(4))\nprint(get_volume(2))\nprint(get_volume(3))\nprint(get_volume(5))"
    },
    {
      "rank": 60,
      "score": 8.0,
      "candidate": "def volume(r, theta, phi):\n    return (r**2)*(np.sin(theta)*np.sin(phi))\n\n\nr = float(input(\"r = \"))\ntheta = float(input(\"theta = \"))\nphi = float(input(\"phi = \"))\n\nprint(f\"The volume of a cone is {volume(r, theta, phi)}\")"
    },
    {
      "rank": 61,
      "score": 8.0,
      "candidate": "import math\n\ndef cone(r, h):\n    return r * h\n\nprint(cone(5, 1.5))\nprint(cone(5, 2))\nprint(cone(3, 3))\nprint(cone(5, 2.5))\nprint(cone(5, 4.5))\nprint(cone(6, 6))\nprint(cone(6, 4))\nprint(cone(6, 5))\nprint(cone(6, 3))\nprint(cone(6, 2.5))\nprint(cone(6, 1.5))\nprint(cone(6, 2))\nprint(cone(6, 3))\nprint(cone(6, 2.5))\nprint(cone(6, 1.5))\nprint(cone(6, 2))\nprint(cone(6, 3))\nprint(cone(6, 2.5))\nprint(cone(6, 1.5))\nprint(cone(6, 2))\nprint(cone(6, 3))\nprint(cone(6, 2.5))\nprint(cone(6, 1.5))\nprint(cone(6, 2))\nprint(cone(6, 3))\nprint(cone(6, 2.5))\nprint(cone(6, 1.5))\nprint(cone(6, 2))\nprint(cone(6, 3))\nprint(cone(6, 2.5))\nprint(cone(6, 1.5))\nprint(cone(6, 2))\nprint(cone(6, 3))\nprint(cone(6, 2.5))\nprint(cone(6, 1.5))\nprint(cone(6, 2))\nprint(cone(6, 3))\nprint(cone(6, 2.5))\nprint(cone(6, 1.5))\nprint(cone(6, 2))\nprint(cone(6, 3))\nprint(cone(6, 2.5))\nprint(cone(6, 1.5))\nprint(cone(6, 2))\nprint(cone(6,"
    },
    {
      "rank": 62,
      "score": 8.0,
      "candidate": "def cone_volume(x, y, z):\n    return (x * y * z) / 2\n\n\nprint(cone_volume(5, 5, 5))"
    },
    {
      "rank": 63,
      "score": 8.0,
      "candidate": "def volume_cone(r, h, p):\n    return r * h * p\n\n\nprint(volume_cone(2, 2, 3))\nprint(volume_cone(4, 2, 3))\nprint(volume_cone(5, 2, 3))\nprint(volume_cone(6, 2, 3))\nprint(volume_cone(7, 2, 3))\nprint(volume_cone(8, 2, 3))"
    },
    {
      "rank": 64,
      "score": 8.0,
      "candidate": "def volume(length, width, height):\n    return length * width * height\n\n\ndef main():\n    length = float(input(\"Length of cone: \"))\n    width = float(input(\"Width of cone: \"))\n    height = float(input(\"Height of cone: \"))\n    print(f\"The volume of the cone is {volume(length, width, height)}\")\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 65,
      "score": 8.0,
      "candidate": "def volume_cone(length, width, height, volume):\n    return length * width * height * volume\n\n\nprint(volume_cone(10, 10, 10, 5))\nprint(volume_cone(10, 10, 10, 5))\nprint(volume_cone(10, 10, 10, 5))"
    },
    {
      "rank": 66,
      "score": 8.0,
      "candidate": "def volume(r):\n    return 3.14 * (r * r)\n\n\nprint(volume(4))\nprint(volume(2))\nprint(volume(1))"
    },
    {
      "rank": 67,
      "score": 8.0,
      "candidate": "def volume_cone(length, width, height):\n    return (length * width * height)"
    },
    {
      "rank": 68,
      "score": 8.0,
      "candidate": "def cone_volume(r, h, b):\n    return r*h*b\n\nprint(cone_volume(2, 3, 3))"
    },
    {
      "rank": 69,
      "score": 8.0,
      "candidate": "def cone_volume(r, theta):\n    return (r * r) * (r * r) * (r * r) * (theta * theta) * (theta * theta)\n\n\nprint(cone_volume(3, 3))"
    },
    {
      "rank": 70,
      "score": 8.0,
      "candidate": "def cone_volume(height, width):\n    return height * width\n\n\nif __name__ == \"__main__\":\n    height = float(input(\"Enter height: \"))\n    width = float(input(\"Enter width: \"))\n\n    print(f\"Volume of cone is {cone_volume(height, width)}\")"
    },
    {
      "rank": 71,
      "score": 8.0,
      "candidate": "def cone_volume(a, b, c):\n    return (a * b * c) ** (1/3)\n\nprint(cone_volume(1, 2, 3))\nprint(cone_volume(1, 2, 4))\nprint(cone_volume(2, 2, 2))\nprint(cone_volume(2, 2, 4))\nprint(cone_volume(2, 2, 8))"
    },
    {
      "rank": 72,
      "score": 8.0,
      "candidate": "def get_volume(radius):\n    return 4.0 * (3.0 - 2.0 * radius)\n\n\nprint(get_volume(3))\nprint(get_volume(5))"
    },
    {
      "rank": 73,
      "score": 8.0,
      "candidate": "def volume_cone(radius):\n    return 3.14 * (radius ** 2)\n\n\nprint(volume_cone(3))"
    },
    {
      "rank": 74,
      "score": 8.0,
      "candidate": "def cone_volume(r, h):\n    return 3.14 * r * h\n\n\nprint(cone_volume(2, 3))"
    },
    {
      "rank": 75,
      "score": 8.0,
      "candidate": "def cone_volume(a, b, c):\n    volume = (a * b * c) / 4\n    return volume\n\na = float(input())\nb = float(input())\nc = float(input())\n\nvolume = cone_volume(a, b, c)\nprint(f\"{volume:.3f}\")"
    },
    {
      "rank": 76,
      "score": 8.0,
      "candidate": "def volume(r, h):\n    return r * h\n\n\nif __name__ == \"__main__\":\n    print(volume(1, 1))\n    print(volume(1, 2))\n    print(volume(3, 2))\n    print(volume(2, 3))\n    print(volume(3, 4))"
    },
    {
      "rank": 77,
      "score": 8.0,
      "candidate": "def cone_volume(r, h):\n    return 2*r*h\n\n\nprint(cone_volume(1, 2))"
    },
    {
      "rank": 78,
      "score": 8.0,
      "candidate": "def cone_volume(r, h):\n    volume = r * h\n    return volume\n\nprint(cone_volume(2, 3))\nprint(cone_volume(5, 5))\nprint(cone_volume(3, 1))\nprint(cone_volume(5, 6))\nprint(cone_volume(4, 2))"
    },
    {
      "rank": 79,
      "score": 8.0,
      "candidate": "def cone_volume(radius):\n    return 2 * radius * radius\n\nprint(cone_volume(3))"
    },
    {
      "rank": 80,
      "score": 8.0,
      "candidate": "def cone(r, theta):\n    return r * r * theta * theta / 6\n\n\nprint(cone(3, 4))\nprint(cone(4, 2))"
    },
    {
      "rank": 81,
      "score": 8.0,
      "candidate": "def volume_cone(radius):\n    return 3.14 * radius * radius\n\n\nprint(volume_cone(3))\nprint(volume_cone(5))\nprint(volume_cone(10))"
    },
    {
      "rank": 82,
      "score": 8.0,
      "candidate": "def volume_cone(n):\n    if n == 1:\n        return 1\n    return n * (n + 1) / 2\n\n\nif __name__ == \"__main__\":\n    print(volume_cone(3))"
    },
    {
      "rank": 83,
      "score": 8.0,
      "candidate": "def cone_volume(r, h):\n    return 3.14 * (r * r + h * h)\n\nif __name__ == '__main__':\n    print(cone_volume(5, 3))\n    print(cone_volume(5, 5))"
    },
    {
      "rank": 84,
      "score": 8.0,
      "candidate": "def cone_volume(r, theta):\n    return (r**2) * (theta**2)\n\n\ndef test_volume():\n    assert cone_volume(3, 3) == 6\n    assert cone_volume(2, 3) == 6\n    assert cone_volume(3, 4) == 12\n    assert cone_volume(3, 5) == 18\n    assert cone_volume(2, 4) == 20\n    assert cone_volume(4, 3) == 24\n    assert cone_volume(3, 6) == 36\n    assert cone_volume(2, 6) == 38\n    assert cone_volume(4, 6) == 42\n\n\nif __name__ == '__main__':\n    test_volume()"
    },
    {
      "rank": 85,
      "score": 8.0,
      "candidate": "from math import pi\n\ndef cone_volume(r, h, n):\n    volume = r * h * n\n    return volume\n\nif __name__ == '__main__':\n    print(cone_volume(1, 1, 3))\n    print(cone_volume(1, 1, 5))\n    print(cone_volume(1, 1, 10))\n    print(cone_volume(1, 1, 20))\n    print(cone_volume(1, 1, 30))\n    print(cone_volume(1, 1, 40))\n    print(cone_volume(1, 1, 50))\n    print(cone_volume(1, 1, 60))\n    print(cone_volume(1, 1, 70))\n    print(cone_volume(1, 1, 80))"
    },
    {
      "rank": 86,
      "score": 8.0,
      "candidate": "def volume(cone):\n    return (4 / 3) * (cone ** 3)"
    },
    {
      "rank": 87,
      "score": 8.0,
      "candidate": "def cone_volume(l, h):\n    return (l * h) / 2\n\ndef main():\n    print(cone_volume(5, 6))\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 88,
      "score": 8.0,
      "candidate": "from math import pi\n\n\ndef cone_volume(r, h):\n    return (pi * r * h) ** 3\n\n\nif __name__ == '__main__':\n    r = float(input(\"Radius: \"))\n    h = float(input(\"Height: \"))\n    print(\"Volume of cone: {}\".format(cone_volume(r, h)))"
    },
    {
      "rank": 89,
      "score": 8.0,
      "candidate": "def cone_volume(r, theta):\n    return r * theta\n\n\nr = float(input(\"Radius of cone: \"))\ntheta = float(input(\"Theta of cone: \"))\nprint(cone_volume(r, theta))"
    },
    {
      "rank": 90,
      "score": 8.0,
      "candidate": "def volume(r, h):\n    return 3.1415926 * r * h\n\nprint(volume(r=1, h=1))"
    },
    {
      "rank": 91,
      "score": 8.0,
      "candidate": "def volume_cone(r, theta):\n    return r * theta\n\n\nprint(volume_cone(3, 1))"
    },
    {
      "rank": 92,
      "score": 8.0,
      "candidate": "def get_volume(r, theta, phi):\n    return (3 * r * r * r) * (theta * theta * theta) * (phi * phi * phi)\n\n\ndef main():\n    r = float(input(\"r: \"))\n    theta = float(input(\"theta: \"))\n    phi = float(input(\"phi: \"))\n    print(\"Volume of a cone is\", get_volume(r, theta, phi))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 93,
      "score": 8.0,
      "candidate": "def volume(r, theta):\n    return 3.14159 * r * theta * r * theta\n\nprint(volume(10, 0.5))"
    },
    {
      "rank": 94,
      "score": 8.0,
      "candidate": "def cone_volume(cone_radius):\n    return 2 * cone_radius**3\n\nprint(cone_volume(5))"
    },
    {
      "rank": 95,
      "score": 8.0,
      "candidate": "def volume(a, b, c):\n    return a * b * c"
    },
    {
      "rank": 96,
      "score": 8.0,
      "candidate": "def cone_volume(r):\n    return (4/3)*(r**3)\n\nprint(cone_volume(3))\nprint(cone_volume(5))\nprint(cone_volume(7))"
    },
    {
      "rank": 97,
      "score": 8.0,
      "candidate": "def cone(r, h):\n    return r * h\n\nprint(cone(3, 2))\nprint(cone(2, 3))\nprint(cone(4, 5))"
    },
    {
      "rank": 98,
      "score": 8.0,
      "candidate": "def cone_volume(r, h):\n    return r * h\n\nprint(cone_volume(r=1, h=1))\nprint(cone_volume(r=1, h=2))\nprint(cone_volume(r=2, h=1))\nprint(cone_volume(r=2, h=2))\nprint(cone_volume(r=3, h=1))\nprint(cone_volume(r=3, h=2))\nprint(cone_volume(r=4, h=1))\nprint(cone_volume(r=4, h=2))\nprint(cone_volume(r=4, h=3))\nprint(cone_volume(r=5, h=1))\nprint(cone_volume(r=5, h=2))\nprint(cone_volume(r=5, h=3))"
    },
    {
      "rank": 99,
      "score": 7.0,
      "candidate": "def cone_volume(r, h, a):\n\tvolume = a * r * r * r\n\treturn volume\n\nprint(cone_volume(3, 2, 8))\nprint(cone_volume(3, 2, 9))\nprint(cone_volume(3, 2, 10))"
    },
    {
      "rank": 100,
      "score": 1.0,
      "candidate": "def get_volume(a, b, c):\n    return a * b * c\n\n\nprint(get_volume(1, 2, 3))"
    }
  ]
}