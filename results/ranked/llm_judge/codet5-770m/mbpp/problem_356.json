{
  "timestamp": "2025-09-14T15:04:56.319887",
  "method": "improved_llm_judge",
  "judge_model": "codellama/CodeLlama-7b-Python-hf",
  "target_model": "codet5-770m",
  "dataset": "mbpp",
  "problem_number": 356,
  "total_candidates": 100,
  "results": [
    {
      "rank": 1,
      "score": 10.0,
      "candidate": "class Node:\n    def __init__(self, val, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\n\ndef is_balanced(root: Node) -> bool:\n    if root is None:\n        return True\n    if not (root.left is None and root.right is None):\n        return is_balanced(root.left) and is_balanced(root.right) and abs(\n            abs(root.left.val - root.right.val)\n        ) <= 1\n    else:\n        return False\n\n\ndef is_balanced_iterative(root: Node) -> bool:\n    if root is None:\n        return True\n    stack = [(root.left, root.right)]\n    while stack:\n        node_left, node_right = stack.pop()\n        if node_left is None and node_right is None:\n            continue\n        if node_left is not None and node_right is not None:\n            if abs(node_left.val - node_right.val) > 1:\n                return False\n        if node_left is not None:\n            stack.append((node_left.left, node_right.right))\n        if node_right is not None:\n            stack.append((node_left.right, node_right.left))\n    return True\n\n\nif __name__ == \"__main__\":\n    node_1 = Node(1)\n    node_2 = Node(2)\n    node_3 = Node(3)\n    node_4 = Node(4)\n    node_5 = Node(5)\n    node_6 = Node(6)\n    node_7 = Node(7)\n    node_8 = Node(8)\n    node_9 = Node(9)\n    node_10 = Node(10)\n    node_11 = Node(11)\n    node_12 = Node(12)\n    node_13 = Node(13)\n    node_14 = Node(14)\n    node_15 = Node(15)\n    node_16 = Node(16)\n    node_17 = Node(17)\n    node"
    },
    {
      "rank": 2,
      "score": 10.0,
      "candidate": "class Node:\n    def __init__(self, val):\n        self.val = val\n        self.left = None\n        self.right = None\n\ndef check_balanced(root):\n    return check_balanced_helper(root, float(\"-inf\"), float(\"inf\"))\n\ndef check_balanced_helper(node, min_val, max_val):\n    if node is None:\n        return True\n\n    if node.val <= min_val or node.val >= max_val:\n        return False\n\n    return check_balanced_helper(node.left, min_val, node.val) and check_balanced_helper(node.right, node.val, max_val)\n\ndef test_check_balanced():\n    root = Node(1)\n    root.left = Node(2)\n    root.right = Node(3)\n    assert check_balanced(root) is True\n\n    root = Node(1)\n    root.left = Node(2)\n    root.right = Node(3)\n    root.left.left = Node(4)\n    root.left.right = Node(5)\n    assert check_balanced(root) is False\n\n    root = Node(1)\n    root.left = Node(2)\n    root.right = Node(3)\n    root.left.left = Node(4)\n    root.left.right = Node(5)\n    root.right.right = Node(6)\n    assert check_balanced(root) is True\n\n    root = Node(1)\n    root.left = Node(2)\n    root.right = Node(3)\n    root.right.right = Node(4)\n    root.right.right.right = Node(5)\n    assert check_balanced(root) is False\n\n    root = Node(1)\n    root.left = Node(2)\n    root.right = Node(3)\n    root.right.right = Node(4)\n    root.right.right.right = Node(5)\n    root.left.left = Node(6)\n    assert check_balanced(root) is True\n\nif __name"
    },
    {
      "rank": 3,
      "score": 10.0,
      "candidate": "# Definition for a binary tree node.\nclass TreeNode:\n    def __init__(self, x):\n        self.val = x\n        self.left = None\n        self.right = None\n\n\ndef is_balanced(root):\n    if not root:\n        return True\n    else:\n        return is_balanced(root.left) and is_balanced(root.right) and abs(root.val - root.left.val - root.right.val) <= 1\n\n\nif __name__ == '__main__':\n    root = TreeNode(1)\n    root.left = TreeNode(2)\n    root.right = TreeNode(3)\n    root.left.left = TreeNode(4)\n    root.left.right = TreeNode(5)\n    root.right.left = TreeNode(6)\n    root.right.right = TreeNode(7)\n    root.left.left.left = TreeNode(8)\n    root.left.right.left = TreeNode(9)\n    root.left.right.right = TreeNode(10)\n    root.right.right.right = TreeNode(11)\n    print(is_balanced(root))"
    },
    {
      "rank": 4,
      "score": 10.0,
      "candidate": "class TreeNode:\n    def __init__(self, val):\n        self.val = val\n        self.left = None\n        self.right = None\n\n\ndef is_balanced(root):\n    if not root:\n        return True\n\n    if not is_balanced(root.left):\n        return False\n\n    if not is_balanced(root.right):\n        return False\n\n    if abs(root.val - root.left.val) > abs(root.val - root.right.val):\n        return False\n\n    return is_balanced(root.left) and is_balanced(root.right)"
    },
    {
      "rank": 5,
      "score": 10.0,
      "candidate": "# Definition for a binary tree node.\nclass TreeNode:\n    def __init__(self, x):\n        self.val = x\n        self.left = None\n        self.right = None\n\n\ndef is_balanced(root):\n    if root is None:\n        return True\n\n    if root.val == 0 or is_balanced(root.left) or is_balanced(root.right):\n        return False\n\n    return is_balanced(root.left) or is_balanced(root.right)\n\n\nroot = TreeNode(0)\nroot.left = TreeNode(1)\nroot.right = TreeNode(2)\nroot.right.left = TreeNode(4)\nroot.right.right = TreeNode(5)\n\nprint(is_balanced(root))"
    },
    {
      "rank": 6,
      "score": 10.0,
      "candidate": "# Definition for a binary tree node.\nclass TreeNode:\n    def __init__(self, x):\n        self.val = x\n        self.left = None\n        self.right = None\n\nclass Solution:\n    # @param root, a tree node\n    # @return a boolean\n    def isBalanced(self, root):\n        if root is None:\n            return True\n\n        return self.isBalancedHelper(root, float('-inf'), float('inf'))\n\n    def isBalancedHelper(self, root, min_val, max_val):\n        if root is None:\n            return True\n\n        if root.val < min_val or root.val > max_val:\n            return False\n\n        return self.isBalancedHelper(root.left, min_val, root.val) and self.isBalancedHelper(root.right, root.val, max_val)\n\n\nif __name__ == \"__main__\":\n    root = TreeNode(1)\n    root.left = TreeNode(2)\n    root.right = TreeNode(3)\n    root.left.left = TreeNode(4)\n    root.left.right = TreeNode(5)\n    root.right.right = TreeNode(6)\n    root.left.right.left = TreeNode(7)\n    root.left.right.right = TreeNode(8)\n    root.right.left.left = TreeNode(9)\n    root.right.left.right = TreeNode(10)\n    root.right.right.left = TreeNode(11)\n    root.right.right.right = TreeNode(12)\n\n    print(Solution().isBalanced(root))"
    },
    {
      "rank": 7,
      "score": 10.0,
      "candidate": "class TreeNode(object):\n    def __init__(self, x):\n        self.val = x\n        self.left = None\n        self.right = None\n\n\ndef is_balanced(root):\n    if not root:\n        return True\n    if not is_balanced(root.left) or not is_balanced(root.right):\n        return False\n    return abs(get_height(root.left) - get_height(root.right)) <= 1 and is_balanced(root.left) and is_balanced(root.right)\n\n\ndef get_height(root):\n    if not root:\n        return 0\n    return max(get_height(root.left), get_height(root.right)) + 1\n\n\nif __name__ == '__main__':\n    root = TreeNode(1)\n    root.left = TreeNode(2)\n    root.right = TreeNode(3)\n    root.left.left = TreeNode(4)\n    root.left.right = TreeNode(5)\n    root.right.left = TreeNode(6)\n    root.right.right = TreeNode(7)\n    print(is_balanced(root))"
    },
    {
      "rank": 8,
      "score": 10.0,
      "candidate": "class TreeNode:\n    def __init__(self, val):\n        self.val = val\n        self.left = None\n        self.right = None\n\ndef is_balanced(root):\n    if root is None:\n        return True\n    if root.left is None and root.right is None:\n        return True\n    return is_balanced(root.left) and is_balanced(root.right) and abs(root.val - root.left.val) < abs(root.val - root.right.val)\n\ndef is_balanced_recursive(root):\n    if root is None:\n        return True\n    if root.left is None and root.right is None:\n        return True\n    if root.left is not None and root.right is not None:\n        return is_balanced_recursive(root.left) and is_balanced_recursive(root.right) and abs(root.left.val - root.right.val) < abs(root.left.val - root.right.val)\n    else:\n        return False\n\ndef is_balanced_iterative(root):\n    if root is None:\n        return True\n    if root.left is None and root.right is None:\n        return True\n    if root.left is not None and root.right is not None:\n        return is_balanced_iterative(root.left) and is_balanced_iterative(root.right) and abs(root.left.val - root.right.val) < abs(root.left.val - root.right.val)\n    else:\n        return False\n\n\n\nif __name__ == '__main__':\n    root = TreeNode(5)\n    root.left = TreeNode(3)\n    root.right = TreeNode(6)\n    root.left.left = TreeNode(1)\n    root.left.right = TreeNode(4)\n    root.right.left = TreeNode(7)\n    root.right.right = TreeNode(8)\n    print(is_balanced(root))\n    print(is_balanced_recursive(root))\n    print(is_balanced_iterative(root))"
    },
    {
      "rank": 9,
      "score": 10.0,
      "candidate": "class Node:\n    def __init__(self, val, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\n\ndef is_balanced(root):\n    if not root:\n        return True\n\n    if not (is_balanced(root.left) and is_balanced(root.right)):\n        return False\n\n    return is_balanced(root.left) and is_balanced(root.right) and abs(\n        get_height(root.left) - get_height(root.right)\n    ) <= 1\n\n\ndef get_height(node):\n    if not node:\n        return 0\n\n    return 1 + max(get_height(node.left), get_height(node.right))\n\n\nif __name__ == \"__main__\":\n    root = Node(5)\n    root.left = Node(3)\n    root.right = Node(2)\n    root.left.left = Node(1)\n    root.left.right = Node(4)\n    root.right.left = Node(6)\n    root.right.right = Node(7)\n    print(is_balanced(root))"
    },
    {
      "rank": 10,
      "score": 10.0,
      "candidate": "class Node:\n    def __init__(self, value):\n        self.value = value\n        self.left = None\n        self.right = None\n\n\ndef check_balanced(root):\n    \"\"\"\n    :type root: Node\n    :rtype: bool\n    \"\"\"\n    if not root:\n        return True\n\n    left_is_balanced = check_balanced(root.left)\n    right_is_balanced = check_balanced(root.right)\n    if left_is_balanced and right_is_balanced:\n        return True\n    else:\n        return False"
    },
    {
      "rank": 11,
      "score": 10.0,
      "candidate": "class TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\n\ndef is_balanced(root):\n    if not root:\n        return True\n\n    if not is_balanced(root.left) or not is_balanced(root.right):\n        return False\n\n    return is_balanced(root.left) and is_balanced(root.right) and abs(root.val - root.left.val - root.right.val) <= 1"
    },
    {
      "rank": 12,
      "score": 10.0,
      "candidate": "class TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\n\ndef is_balanced(root):\n    if root is None:\n        return True\n\n    if root.left is None and root.right is None:\n        return True\n\n    return is_balanced(root.left) and is_balanced(root.right) and abs(root.val - root.left.val) < abs(root.val - root.right.val)\n\n\ndef main():\n    root = TreeNode(3)\n    root.left = TreeNode(9)\n    root.right = TreeNode(20)\n    root.left.left = TreeNode(15)\n    root.left.right = TreeNode(7)\n    root.right.left = TreeNode(21)\n    root.right.right = TreeNode(25)\n\n    print(is_balanced(root))\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 13,
      "score": 10.0,
      "candidate": "class Node:\n    def __init__(self, value):\n        self.value = value\n        self.left = None\n        self.right = None\n\n\nclass Solution:\n    def isBalanced(self, root):\n        if root is None:\n            return True\n\n        def depth(node):\n            if node is None:\n                return 0\n\n            left = depth(node.left)\n            right = depth(node.right)\n\n            if abs(left - right) > 1:\n                return False\n\n            return max(left, right) + 1\n\n        return depth(root) == 0"
    },
    {
      "rank": 14,
      "score": 10.0,
      "candidate": "class TreeNode:\n    def __init__(self, x):\n        self.val = x\n        self.left = None\n        self.right = None\n\n\ndef balanced_tree(root):\n    if not root:\n        return True\n\n    if not balanced_tree(root.left):\n        return False\n\n    if not balanced_tree(root.right):\n        return False\n\n    if abs(root.val - root.left.val) > abs(root.val - root.right.val):\n        return False\n\n    return balanced_tree(root.left) and balanced_tree(root.right)\n\n\nif __name__ == \"__main__\":\n    root = TreeNode(1)\n    root.left = TreeNode(2)\n    root.right = TreeNode(3)\n    root.left.left = TreeNode(4)\n    root.left.right = TreeNode(5)\n    root.right.left = TreeNode(6)\n    root.right.right = TreeNode(7)\n\n    print(balanced_tree(root))"
    },
    {
      "rank": 15,
      "score": 9.97108792940294,
      "candidate": "class Node:\n    def __init__(self, data):\n        self.data = data\n        self.left = None\n        self.right = None\n\n\ndef is_balanced(node):\n    if not node:\n        return True\n\n    return is_balanced(node.left) and is_balanced(node.right) and abs(node.data - node.left.data - node.right.data) <= 1\n\n\nif __name__ == \"__main__\":\n    n1 = Node(1)\n    n2 = Node(2)\n    n3 = Node(3)\n    n4 = Node(4)\n    n5 = Node(5)\n\n    n1.left = n2\n    n1.right = n3\n    n2.left = n4\n    n2.right = n5\n\n    print(is_balanced(n1))\n    print(is_balanced(n2))"
    },
    {
      "rank": 16,
      "score": 9.945082028040622,
      "candidate": "class TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\n\nclass Solution:\n    def isBalanced(self, root: TreeNode) -> bool:\n        if not root:\n            return True\n        return self.isBalanced(root.left) and self.isBalanced(root.right) and abs(self.height(root.left) - self.height(root.right)) <= 1 \\\n               and self.isBalanced(root.left.left) and self.isBalanced(root.left.right) and self.isBalanced(root.right.left) and self.isBalanced(root.right.right)\n\n    def height(self, root: TreeNode) -> int:\n        if not root:\n            return 0\n        return 1 + max(self.height(root.left), self.height(root.right))"
    },
    {
      "rank": 17,
      "score": 9.927076562551681,
      "candidate": "class TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\n\ndef balanced(root: TreeNode) -> bool:\n    if not root:\n        return True\n\n    if not balanced(root.left):\n        return False\n    if not balanced(root.right):\n        return False\n\n    if abs(root.val - root.left.val) > abs(root.val - root.right.val):\n        return False\n\n    return balanced(root.left) and balanced(root.right)"
    },
    {
      "rank": 18,
      "score": 9.918084463350558,
      "candidate": "# Definition for a binary tree node.\nclass TreeNode:\n    def __init__(self, x):\n        self.val = x\n        self.left = None\n        self.right = None\n\n\nclass Solution:\n    def isBalanced(self, root):\n        if not root:\n            return True\n        if not (self.isBalanced(root.left) and self.isBalanced(root.right)):\n            return False\n        return (self.isBalanced(root.left) and self.isBalanced(root.right) and abs(self.getDepth(root.left) - self.getDepth(root.right)) <= 1)\n\n    def getDepth(self, root):\n        if not root:\n            return 0\n        return max(self.getDepth(root.left), self.getDepth(root.right)) + 1"
    },
    {
      "rank": 19,
      "score": 9.903729429895922,
      "candidate": "from typing import Optional\n\n\nclass TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\n\ndef is_balanced(root: Optional[TreeNode]) -> bool:\n    if root is None:\n        return True\n\n    left_height = is_balanced(root.left)\n    right_height = is_balanced(root.right)\n    if left_height == -1 or right_height == -1:\n        return -1\n\n    if abs(left_height - right_height) > 1:\n        return -1\n\n    return max(left_height, right_height) + 1"
    },
    {
      "rank": 20,
      "score": 9.8498403275203,
      "candidate": "class Node:\n    def __init__(self, val, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\n\ndef check_balanced(node: Node):\n    if node is None:\n        return True\n\n    if not check_balanced(node.left) or not check_balanced(node.right):\n        return False\n\n    return check_balanced(node.left) and check_balanced(node.right) and abs(node.val - node.left.val) <= abs(node.val - node.right.val)\n\n\nif __name__ == \"__main__\":\n    node = Node(1)\n    node.left = Node(2)\n    node.right = Node(3)\n    node.left.left = Node(4)\n    node.left.right = Node(5)\n    node.right.left = Node(6)\n    node.right.right = Node(7)\n\n    print(check_balanced(node))"
    },
    {
      "rank": 21,
      "score": 9.824486726530662,
      "candidate": "class Node:\n    def __init__(self, val):\n        self.val = val\n        self.left, self.right = None, None\n\ndef is_balanced(root):\n    if root is None:\n        return True\n    if root.val == 0 or is_balanced(root.left) or is_balanced(root.right):\n        return False\n    return is_balanced(root.left) or is_balanced(root.right)\n\n\ndef main():\n    root = Node(0)\n    root.left = Node(1)\n    root.right = Node(2)\n    root.left.left = Node(3)\n    root.left.right = Node(4)\n    root.right.left = Node(5)\n    root.right.right = Node(6)\n    print(is_balanced(root))\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 22,
      "score": 9.820038947901322,
      "candidate": "# Definition for a binary tree node.\nclass TreeNode:\n    def __init__(self, x):\n        self.val = x\n        self.left = None\n        self.right = None\n\n\ndef is_balanced(root):\n    if not root:\n        return True\n\n    if not is_balanced_helper(root.left) or not is_balanced_helper(root.right):\n        return False\n\n    return is_balanced_helper(root.left) and is_balanced_helper(root.right)\n\n\ndef is_balanced_helper(node):\n    if not node:\n        return True\n\n    if not is_balanced_helper(node.left) or not is_balanced_helper(node.right):\n        return False\n\n    if abs(node.val - root.val) > 1:\n        return False\n    else:\n        return is_balanced_helper(node.left) and is_balanced_helper(node.right)\n\n\ndef main():\n    root = TreeNode(1)\n    root.left = TreeNode(2)\n    root.right = TreeNode(3)\n    root.left.left = TreeNode(4)\n    root.left.right = TreeNode(5)\n    print(is_balanced(root))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 23,
      "score": 9.772993981119697,
      "candidate": "# Definition for a binary tree node.\nclass TreeNode:\n    def __init__(self, x):\n        self.val = x\n        self.left = None\n        self.right = None\n\n\ndef isBalanced(root):\n    if not root:\n        return True\n\n    if not isBalanced(root.left) or not isBalanced(root.right):\n        return False\n\n    if abs(getDepth(root.left) - getDepth(root.right)) > 1:\n        return False\n\n    return isBalanced(root.left) and isBalanced(root.right)\n\n\ndef getDepth(root):\n    if not root:\n        return 0\n\n    return max(getDepth(root.left), getDepth(root.right)) + 1\n\n\nif __name__ == \"__main__\":\n    root = TreeNode(1)\n    root.left = TreeNode(2)\n    root.right = TreeNode(3)\n    root.left.left = TreeNode(4)\n    root.left.right = TreeNode(5)\n    root.right.left = TreeNode(6)\n    root.right.right = TreeNode(7)\n    root.left.left.left = TreeNode(8)\n    root.left.left.right = TreeNode(9)\n    root.left.right.left = TreeNode(10)\n    root.left.right.right = TreeNode(11)\n\n    print(isBalanced(root))"
    },
    {
      "rank": 24,
      "score": 9.700948343979832,
      "candidate": "class Node:\n    def __init__(self, val):\n        self.val = val\n        self.left = None\n        self.right = None\n\n\ndef is_balanced(root):\n    if root is None:\n        return True\n\n    if is_balanced(root.left) and is_balanced(root.right):\n        return is_balanced(root.left.left) and is_balanced(root.left.right) and is_balanced(root.right.left) and is_balanced(root.right.right)\n    return False\n\n\nif __name__ == \"__main__\":\n    root = Node(1)\n    root.left = Node(2)\n    root.right = Node(3)\n    root.left.left = Node(4)\n    root.left.right = Node(5)\n    root.right.left = Node(6)\n    root.right.right = Node(7)\n    root.left.left.left = Node(8)\n    root.left.left.right = Node(9)\n    root.left.right.left = Node(10)\n    root.left.right.right = Node(11)\n    root.right.right.left = Node(12)\n    root.right.right.right = Node(13)\n    print(is_balanced(root))"
    },
    {
      "rank": 25,
      "score": 9.694789087507244,
      "candidate": "class TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\n\ndef check_tree(root):\n    if not root:\n        return True\n\n    left = check_tree(root.left)\n    right = check_tree(root.right)\n\n    if not left and not right:\n        return True\n    else:\n        return False\n\n\ndef check_balanced(root):\n    if check_tree(root):\n        return True\n    else:\n        return False\n\n\nif __name__ == \"__main__\":\n    root = TreeNode(1)\n    root.left = TreeNode(2)\n    root.right = TreeNode(3)\n    root.left.left = TreeNode(4)\n    root.left.right = TreeNode(5)\n    root.right.left = TreeNode(6)\n    root.right.right = TreeNode(7)\n\n    print(check_balanced(root))"
    },
    {
      "rank": 26,
      "score": 8.926036772416769,
      "candidate": "class TreeNode:\n    def __init__(self, x):\n        self.val = x\n        self.left = None\n        self.right = None\n\n\ndef is_balanced(root):\n    if not root:\n        return True\n\n    if not is_balanced(root.left) or not is_balanced(root.right):\n        return False\n\n    return is_balanced(root.left) and is_balanced(root.right) and abs(\n        abs(root.left.val - root.right.val)\n    ) <= 1"
    },
    {
      "rank": 27,
      "score": 8.840432207110531,
      "candidate": "class TreeNode:\n    def __init__(self, x):\n        self.val = x\n        self.left = None\n        self.right = None\n\n\ndef is_balanced(root):\n    if not root:\n        return True\n    return is_balanced_helper(root, 0)\n\n\ndef is_balanced_helper(root, level):\n    if not root.left and not root.right:\n        if level == 1:\n            return True\n        else:\n            return False\n    if not root.left:\n        return is_balanced_helper(root.right, level - 1)\n    if not root.right:\n        return is_balanced_helper(root.left, level - 1)\n    if root.left.val!= root.right.val:\n        return False\n    return is_balanced_helper(root.left, level - 1) and is_balanced_helper(root.right, level - 1)\n\n\nif __name__ == \"__main__\":\n    root = TreeNode(1)\n    root.left = TreeNode(2)\n    root.right = TreeNode(3)\n    root.left.left = TreeNode(4)\n    root.left.right = TreeNode(5)\n    root.right.left = TreeNode(6)\n    root.right.right = TreeNode(7)\n    print(is_balanced(root))"
    },
    {
      "rank": 28,
      "score": 8.696292141982996,
      "candidate": "class Node:\n    def __init__(self, value, left=None, right=None):\n        self.value = value\n        self.left = left\n        self.right = right\n\n\ndef is_balanced(root):\n    if not root:\n        return True\n\n    if not is_balanced(root.left) and not is_balanced(root.right):\n        return False\n\n    return is_balanced(root.left) or is_balanced(root.right)\n\n\ndef main():\n    root = Node(1)\n    root.left = Node(2)\n    root.right = Node(3)\n    root.left.left = Node(4)\n    root.left.right = Node(5)\n    root.right.left = Node(6)\n    root.right.right = Node(7)\n\n    print(is_balanced(root))\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 29,
      "score": 8.6439774740242,
      "candidate": "class TreeNode:\n    def __init__(self, x):\n        self.val = x\n        self.left = None\n        self.right = None\n\n\ndef is_balanced(root):\n    if root is None:\n        return True\n    if root.left is None and root.right is None:\n        return True\n    return is_balanced(root.left) and is_balanced(root.right)\n\n\nif __name__ == \"__main__\":\n    root = TreeNode(1)\n    root.left = TreeNode(2)\n    root.right = TreeNode(3)\n    root.left.left = TreeNode(4)\n    root.left.right = TreeNode(5)\n    root.right.left = TreeNode(6)\n    root.right.right = TreeNode(7)\n    print(is_balanced(root))"
    },
    {
      "rank": 30,
      "score": 8.612843464350625,
      "candidate": "class Node:\n    def __init__(self, val):\n        self.val = val\n        self.left = None\n        self.right = None\n\n\ndef check_balance(root):\n    if root is None:\n        return True\n\n    left_balanced = check_balance(root.left)\n    right_balanced = check_balance(root.right)\n\n    if left_balanced and right_balanced:\n        return True\n    else:\n        return False\n\n\nif __name__ == '__main__':\n    root = Node(1)\n    root.left = Node(2)\n    root.right = Node(3)\n    root.left.left = Node(4)\n    root.left.right = Node(5)\n    root.right.right = Node(6)\n\n    print(check_balance(root))"
    },
    {
      "rank": 31,
      "score": 8.54212592921432,
      "candidate": "class TreeNode:\n    def __init__(self, x):\n        self.val = x\n        self.left = None\n        self.right = None\n\n\ndef is_balanced(root: TreeNode) -> bool:\n    if not root:\n        return True\n    if not is_balanced(root.left) and not is_balanced(root.right):\n        return False\n    return is_balanced(root.left) and is_balanced(root.right) and abs(root.val - root.left.val) < abs(root.val - root.right.val)\n\n\nif __name__ == '__main__':\n    root = TreeNode(1)\n    root.left = TreeNode(2)\n    root.right = TreeNode(3)\n    root.left.left = TreeNode(4)\n    root.left.right = TreeNode(5)\n    print(is_balanced(root))"
    },
    {
      "rank": 32,
      "score": 8.53846981095683,
      "candidate": "class Node:\n    def __init__(self, val):\n        self.val = val\n        self.left = None\n        self.right = None\n\n\ndef check_balanced(root):\n    if not root:\n        return True\n    if not check_balanced(root.left) or not check_balanced(root.right):\n        return False\n    return check_balanced(root.left) and check_balanced(root.right) and abs(\n        abs(root.val - root.left.val) + abs(root.val - root.right.val)) <= 1\n\n\nif __name__ == \"__main__\":\n    root = Node(5)\n    root.left = Node(4)\n    root.right = Node(3)\n    root.left.left = Node(1)\n    root.left.right = Node(2)\n    root.right.left = Node(6)\n    root.right.right = Node(7)\n    print(check_balanced(root))"
    },
    {
      "rank": 33,
      "score": 8.5372937130375,
      "candidate": "# Definition for a binary tree node.\nclass TreeNode:\n    def __init__(self, x):\n        self.val = x\n        self.left = None\n        self.right = None\n\n\ndef isBalanced(root):\n    if not root:\n        return True\n\n    left = isBalanced(root.left)\n    right = isBalanced(root.right)\n\n    if not left and not right:\n        return True\n\n    return False\n\n\nroot = TreeNode(3)\nroot.left = TreeNode(9)\nroot.right = TreeNode(20)\nroot.right.left = TreeNode(15)\nroot.right.right = TreeNode(7)\n\nprint(isBalanced(root))"
    },
    {
      "rank": 34,
      "score": 8.53057293660937,
      "candidate": "class Node:\n    def __init__(self, val, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\n\ndef is_balanced(root):\n    if root is None:\n        return True\n\n    if is_balanced(root.left) and is_balanced(root.right):\n        if abs(root.val - root.left.val) > abs(root.val - root.right.val):\n            return False\n        return is_balanced(root.left) or is_balanced(root.right)\n\n    return False\n\n\nif __name__ == \"__main__\":\n    root = Node(1)\n    root.left = Node(2)\n    root.right = Node(3)\n    print(is_balanced(root))"
    },
    {
      "rank": 35,
      "score": 8.526148750919216,
      "candidate": "class TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\n\ndef is_balanced(root):\n    if not root:\n        return True\n    return is_balanced(root.left) and is_balanced(root.right) and abs(root.val - root.left.val) <= abs(root.val - root.right.val)\n\n\nif __name__ == \"__main__\":\n    root = TreeNode(3)\n    root.left = TreeNode(9)\n    root.right = TreeNode(20)\n    root.left.left = TreeNode(15)\n    root.left.right = TreeNode(7)\n    root.right.left = TreeNode(1)\n    root.right.right = TreeNode(5)\n    print(is_balanced(root))"
    },
    {
      "rank": 36,
      "score": 8.512318815211216,
      "candidate": "from collections import deque\n\n\nclass Node:\n    def __init__(self, val):\n        self.val = val\n        self.left = None\n        self.right = None\n\n\ndef is_balanced(root):\n    if not root:\n        return True\n\n    queue = deque([(root, True)])\n    while queue:\n        node, is_balanced = queue.popleft()\n        if is_balanced:\n            if not node.left and not node.right:\n                return True\n\n            if node.left:\n                queue.append((node.left, False))\n            if node.right:\n                queue.append((node.right, False))\n\n    return False\n\n\nif __name__ == \"__main__\":\n    root = Node(1)\n    root.left = Node(2)\n    root.right = Node(3)\n    root.left.left = Node(4)\n    root.left.right = Node(5)\n    root.right.left = Node(6)\n    root.right.right = Node(7)\n\n    print(is_balanced(root))"
    },
    {
      "rank": 37,
      "score": 8.507354635051614,
      "candidate": "class Node:\n    def __init__(self, val):\n        self.val = val\n        self.left = None\n        self.right = None\n\n\ndef is_balanced(root):\n    if root is None:\n        return True\n\n    return is_balanced(root.left) and is_balanced(root.right) and abs(root.val - root.left.val - root.right.val) <= 1\n\n\nif __name__ == \"__main__\":\n    root = Node(1)\n    root.left = Node(2)\n    root.right = Node(3)\n    root.left.left = Node(4)\n    root.left.right = Node(5)\n    root.right.left = Node(6)\n    root.right.right = Node(7)\n    assert is_balanced(root) == True"
    },
    {
      "rank": 38,
      "score": 8.47328431776901,
      "candidate": "class Node:\n    def __init__(self, val):\n        self.val = val\n        self.left = None\n        self.right = None\n\n\ndef is_balanced(root):\n    if not root:\n        return True\n    elif (not root.left) or (not root.right):\n        return False\n    elif abs(root.left.val - root.right.val) > 1:\n        return False\n    else:\n        return is_balanced(root.left) and is_balanced(root.right)\n\n\nif __name__ == '__main__':\n    root = Node(1)\n    root.left = Node(2)\n    root.right = Node(3)\n    root.left.left = Node(4)\n    root.left.right = Node(5)\n    root.right.left = Node(6)\n    root.right.right = Node(7)\n    print(is_balanced(root))"
    },
    {
      "rank": 39,
      "score": 8.408495726139936,
      "candidate": "class TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\n\ndef is_balanced(root):\n    if root is None:\n        return True\n    if is_balanced(root.left) and is_balanced(root.right):\n        return is_balanced(root.left) and is_balanced(root.right) and abs(\n            abs(root.left.val - root.right.val) + 1) <= 1\n    return False\n\n\nif __name__ == '__main__':\n    root = TreeNode(val=1)\n    root.left = TreeNode(val=2)\n    root.right = TreeNode(val=3)\n    root.left.left = TreeNode(val=4)\n    root.left.right = TreeNode(val=5)\n    root.right.left = TreeNode(val=6)\n    root.right.right = TreeNode(val=7)\n    print(is_balanced(root))"
    },
    {
      "rank": 40,
      "score": 8.383564567016377,
      "candidate": "class Node:\n    def __init__(self, val):\n        self.val = val\n        self.left = None\n        self.right = None\n\n\ndef check_balanced(root):\n    if root is None:\n        return True\n\n    if root.val!= 0:\n        return False\n\n    if check_balanced(root.left) and check_balanced(root.right):\n        return True\n    else:\n        return False\n\n\nif __name__ == \"__main__\":\n    root = Node(2)\n    root.left = Node(1)\n    root.right = Node(3)\n    root.left.left = Node(4)\n    root.left.right = Node(5)\n    root.right.left = Node(6)\n    root.right.right = Node(7)\n    print(check_balanced(root))"
    },
    {
      "rank": 41,
      "score": 8.36670253332332,
      "candidate": "class TreeNode:\n    def __init__(self, val):\n        self.val = val\n        self.left = None\n        self.right = None\n\n\ndef is_balanced(root):\n    if root is None:\n        return True\n\n    left_balanced = is_balanced(root.left)\n    right_balanced = is_balanced(root.right)\n\n    if left_balanced and right_balanced:\n        return abs(left_balanced - right_balanced) <= 1\n    return False\n\n\nroot = TreeNode(1)\nroot.left = TreeNode(2)\nroot.right = TreeNode(3)\nroot.left.left = TreeNode(4)\nroot.left.right = TreeNode(5)\nroot.right.right = TreeNode(6)\n\nprint(is_balanced(root))"
    },
    {
      "rank": 42,
      "score": 8.366157483591229,
      "candidate": "from collections import deque\n\nclass Node:\n    def __init__(self, val):\n        self.val = val\n        self.left = None\n        self.right = None\n\n\ndef isBalanced(root):\n    if not root:\n        return True\n\n    if not isBalanced(root.left) or not isBalanced(root.right):\n        return False\n\n    q = deque([(root.left, -float(\"inf\"), 0)])\n    while q:\n        node, low, depth = q.popleft()\n        if node.val!= low:\n            return False\n\n        if depth > 1:\n            return False\n\n        q.append((node.left, low, depth + 1))\n        q.append((node.right, low, depth + 1))\n\n    return True\n\n\nif __name__ == \"__main__\":\n    root = Node(1)\n    root.left = Node(2)\n    root.right = Node(3)\n    root.left.left = Node(4)\n    root.left.right = Node(5)\n    root.right.left = Node(6)\n    root.right.right = Node(7)\n\n    print(isBalanced(root))"
    },
    {
      "rank": 43,
      "score": 8.342496324630083,
      "candidate": "class Node:\n    def __init__(self, val):\n        self.val = val\n        self.left = None\n        self.right = None\n\ndef check_balanced_tree(root):\n    if not root:\n        return True\n    else:\n        return check_balanced_tree(root.left) and check_balanced_tree(root.right) and abs(root.val - root.left.val - root.right.val) <= 1\n\ndef main():\n    root = Node(5)\n    root.left = Node(2)\n    root.right = Node(4)\n    root.left.left = Node(7)\n    root.left.right = Node(1)\n    root.right.right = Node(3)\n    print(check_balanced_tree(root))\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 44,
      "score": 8.3246783639949,
      "candidate": "class Node:\n    def __init__(self, val):\n        self.val = val\n        self.left = None\n        self.right = None\n\n\ndef balanced(root):\n    if not root:\n        return True\n\n    if not balanced(root.left):\n        return False\n\n    if not balanced(root.right):\n        return False\n\n    return balanced(root.left) and balanced(root.right)\n\n\nif __name__ == \"__main__\":\n    root = Node(10)\n    root.left = Node(20)\n    root.right = Node(30)\n    root.left.left = Node(40)\n    root.left.right = Node(50)\n    root.right.left = Node(60)\n    root.right.right = Node(70)\n    print(balanced(root))"
    },
    {
      "rank": 45,
      "score": 8.323955844313204,
      "candidate": "class Node:\n    def __init__(self, val):\n        self.val = val\n        self.left = None\n        self.right = None\n\n\ndef is_balanced(root):\n    if root is None:\n        return True\n\n    if root.left is None and root.right is None:\n        return True\n\n    if is_balanced(root.left) and is_balanced(root.right):\n        return True\n\n    return False\n\n\nif __name__ == \"__main__\":\n    root = Node(1)\n    root.left = Node(2)\n    root.right = Node(3)\n    root.left.left = Node(4)\n    root.left.right = Node(5)\n    root.right.left = Node(6)\n    root.right.right = Node(7)\n    print(is_balanced(root))"
    },
    {
      "rank": 46,
      "score": 8.322381104101357,
      "candidate": "class TreeNode(object):\n    def __init__(self, x):\n        self.val = x\n        self.left = None\n        self.right = None\n\n\ndef is_balanced(root):\n    if not root:\n        return True\n\n    return is_balanced_helper(root, 0)\n\n\ndef is_balanced_helper(root, depth):\n    if not root:\n        return True\n\n    if not (root.left or root.right):\n        return True\n\n    if (depth == 0 or\n            not is_balanced_helper(root.left, depth - 1)) and \\\n            not is_balanced_helper(root.right, depth - 1):\n        return False\n\n    return is_balanced(root.left) and is_balanced(root.right)\n\n\nif __name__ == \"__main__\":\n    root = TreeNode(1)\n    root.left = TreeNode(2)\n    root.right = TreeNode(3)\n    root.left.left = TreeNode(4)\n    root.left.right = TreeNode(5)\n    root.right.left = TreeNode(6)\n    root.right.right = TreeNode(7)\n\n    print(is_balanced(root))"
    },
    {
      "rank": 47,
      "score": 8.306706791465015,
      "candidate": "class Node:\n    def __init__(self, value, left=None, right=None):\n        self.value = value\n        self.left = left\n        self.right = right\n\ndef is_balanced(root):\n    if not root:\n        return True\n    left_node = is_balanced(root.left)\n    right_node = is_balanced(root.right)\n    if not left_node and not right_node:\n        return True\n    return False\n\nif __name__ == \"__main__\":\n    root = Node(10)\n    root.left = Node(5)\n    root.right = Node(20)\n    root.left.left = Node(15)\n    root.left.right = Node(30)\n    root.right.left = Node(40)\n    root.right.right = Node(50)\n    print(is_balanced(root))"
    },
    {
      "rank": 48,
      "score": 8.288000725264801,
      "candidate": "class Node:\n    def __init__(self, val):\n        self.val = val\n        self.left = None\n        self.right = None\n\n\ndef is_balanced(root):\n    if not root:\n        return True\n    return is_balanced(root.left) and is_balanced(root.right) and abs(root.val - root.left.val) < abs(root.val - root.right.val)\n\n\nif __name__ == \"__main__\":\n    root = Node(5)\n    root.left = Node(3)\n    root.right = Node(8)\n    root.left.left = Node(2)\n    root.left.right = Node(7)\n    root.right.left = Node(1)\n    root.right.right = Node(4)\n    print(is_balanced(root))"
    },
    {
      "rank": 49,
      "score": 8.276713308247112,
      "candidate": "class Node:\n    def __init__(self, val):\n        self.val = val\n        self.left = None\n        self.right = None\n\n\ndef check_balanced_tree(root):\n    if not root:\n        return True\n    if not check_balanced_tree(root.left) and not check_balanced_tree(root.right):\n        return False\n    return check_balanced_tree(root.left) or check_balanced_tree(root.right)\n\n\nif __name__ == \"__main__\":\n    root = Node(1)\n    root.left = Node(2)\n    root.right = Node(3)\n    root.left.left = Node(4)\n    root.left.right = Node(5)\n    root.right.right = Node(6)\n\n    print(check_balanced_tree(root))"
    },
    {
      "rank": 50,
      "score": 8.234236107692215,
      "candidate": "class Node:\n    def __init__(self, val):\n        self.val = val\n        self.left = None\n        self.right = None\n\n\ndef is_balanced(root):\n    if not root:\n        return True\n    return is_balanced_helper(root, 0)\n\n\ndef is_balanced_helper(root, depth):\n    if not root.left and not root.right:\n        return True\n    if not root.left or not root.right:\n        return False\n    if depth == 1:\n        return is_balanced_helper(root.left, depth - 1) and is_balanced_helper(root.right, depth - 1)\n    return is_balanced_helper(root.left.left, depth - 1) and is_balanced_helper(root.left.right, depth - 1) and is_balanced_helper(\n        root.right.left, depth - 1) and is_balanced_helper(root.right.right, depth - 1)\n\n\nif __name__ == \"__main__\":\n    root = Node(1)\n    root.left = Node(2)\n    root.right = Node(3)\n    root.left.left = Node(4)\n    root.left.right = Node(5)\n    root.right.left = Node(6)\n    root.right.right = Node(7)\n    print(is_balanced(root))"
    },
    {
      "rank": 51,
      "score": 8.145186114314646,
      "candidate": "class Node:\n    def __init__(self, val, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\n\ndef is_balanced(node):\n    if not node:\n        return True\n    if not is_balanced(node.left) or not is_balanced(node.right):\n        return False\n    return is_balanced(node.left) and is_balanced(node.right) and abs(node.left.val - node.right.val) < 2"
    },
    {
      "rank": 52,
      "score": 3.773814279598622,
      "candidate": "class TreeNode:\n    def __init__(self, x):\n        self.val = x\n        self.left = None\n        self.right = None\n\n\ndef is_balanced(root: TreeNode) -> bool:\n    if not root:\n        return True\n    elif root.val == 0 or is_balanced(root.left) or is_balanced(root.right):\n        return True\n    else:\n        return False\n\n\nif __name__ == '__main__':\n    root = TreeNode(0)\n    root.left = TreeNode(1)\n    root.right = TreeNode(2)\n    root.left.left = TreeNode(3)\n    root.left.right = TreeNode(4)\n    root.right.left = TreeNode(5)\n    root.right.right = TreeNode(6)\n    print(is_balanced(root))"
    },
    {
      "rank": 53,
      "score": 3.7536379175683248,
      "candidate": "class Node:\n    def __init__(self, val):\n        self.val = val\n        self.left = None\n        self.right = None\n\n\ndef balanced(root):\n    # write your code here\n    return is_balanced(root)\n\n\ndef is_balanced(node):\n    if not node:\n        return True\n\n    return is_balanced(node.left) and is_balanced(node.right) and abs(\n        node.val - balanced(node.left) - balanced(node.right)\n    ) <= 1"
    },
    {
      "rank": 54,
      "score": 3.724168081923343,
      "candidate": "from typing import Optional\n\nfrom binary_tree_node import TreeNode\n\n\ndef is_balanced(root: Optional[TreeNode]) -> bool:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(n)\n    \"\"\"\n    if not root:\n        return True\n\n    return (\n        is_balanced(root.left)\n        and is_balanced(root.right)\n        and abs(root.val - (\n            (is_balanced(root.left) or is_balanced(root.right)))) < 2\n    )\n\n\ndef test_is_balanced():\n    assert is_balanced(TreeNode(1)) is True\n    assert is_balanced(TreeNode(2)) is False\n    assert is_balanced(TreeNode(3)) is False\n    assert is_balanced(TreeNode(4)) is False\n    assert is_balanced(TreeNode(5)) is False\n    assert is_balanced(TreeNode(6)) is True\n    assert is_balanced(TreeNode(7)) is True\n    assert is_balanced(TreeNode(8)) is False\n    assert is_balanced(TreeNode(9)) is True\n    assert is_balanced(TreeNode(10)) is True\n    assert is_balanced(TreeNode(11)) is True\n    assert is_balanced(TreeNode(12)) is False\n    assert is_balanced(TreeNode(13)) is False\n    assert is_balanced(TreeNode(14)) is False\n    assert is_balanced(TreeNode(15)) is True\n    assert is_balanced(TreeNode(16)) is True\n    assert is_balanced(TreeNode(17)) is True\n    assert is_balanced(TreeNode(18)) is True\n    assert is_balanced(TreeNode(19)) is True\n    assert is_balanced(TreeNode(20)) is True\n    assert is_balanced(TreeNode(21)) is True\n    assert is_balanced(TreeNode(22)) is True\n    assert is_balanced(TreeNode(23)) is False\n    assert is_balanced(TreeNode(24)) is False\n    assert is_balanced(TreeNode(25)) is False\n    assert is_balanced(TreeNode(26)) is False"
    },
    {
      "rank": 55,
      "score": 3.7181678967715612,
      "candidate": "class TreeNode:\n    def __init__(self, x):\n        self.val = x\n        self.left = None\n        self.right = None\n\n\ndef is_balanced(root):\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(n)\n    \"\"\"\n    if not root:\n        return True\n    if not is_balanced(root.left) or not is_balanced(root.right):\n        return False\n    return is_balanced(root.left) and is_balanced(root.right) and abs(\n        abs(root.left.val - root.right.val) + 1\n    ) <= 1\n\n\nif __name__ == \"__main__\":\n    root = TreeNode(1)\n    root.left = TreeNode(2)\n    root.right = TreeNode(3)\n    root.left.left = TreeNode(4)\n    root.left.right = TreeNode(5)\n    print(is_balanced(root))"
    },
    {
      "rank": 56,
      "score": 3.6645576139997034,
      "candidate": "class TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\n\ndef is_balanced(root):\n    if not root:\n        return True\n    left_depth = is_balanced(root.left)\n    right_depth = is_balanced(root.right)\n    if abs(left_depth - right_depth) > 1:\n        return False\n    return True\n\n\nif __name__ == \"__main__\":\n    root = TreeNode(1)\n    root.left = TreeNode(2)\n    root.right = TreeNode(3)\n    root.left.left = TreeNode(4)\n    root.left.right = TreeNode(5)\n    root.right.right = TreeNode(6)\n    print(is_balanced(root))"
    },
    {
      "rank": 57,
      "score": 3.517989890847269,
      "candidate": "class Node:\n    def __init__(self, val, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\n\ndef check_balanced_tree(root: Node) -> bool:\n    if not root:\n        return True\n\n    def check_balanced(node):\n        if not node:\n            return True\n\n        left_balanced = check_balanced(node.left)\n        right_balanced = check_balanced(node.right)\n\n        if not left_balanced and not right_balanced:\n            return False\n        elif not left_balanced or not right_balanced:\n            return False\n\n        return True\n\n    return check_balanced(root)\n\n\nif __name__ == \"__main__\":\n    root = Node(1)\n    root.left = Node(2)\n    root.right = Node(3)\n    root.left.left = Node(4)\n    root.left.right = Node(5)\n    root.right.left = Node(6)\n    root.right.right = Node(7)\n\n    print(check_balanced_tree(root))"
    },
    {
      "rank": 58,
      "score": 3.505189766023016,
      "candidate": "# Definition for a binary tree node.\nclass TreeNode:\n    def __init__(self, x):\n        self.val = x\n        self.left = None\n        self.right = None\n\n\ndef is_balanced(root: TreeNode) -> bool:\n    if not root:\n        return True\n\n    if not (isinstance(root.left, TreeNode) and isinstance(root.right, TreeNode)):\n        return False\n\n    return is_balanced(root.left) and is_balanced(root.right) and abs(root.val - root.left.val) <= abs(root.val - root.right.val)\n\n\nif __name__ == '__main__':\n    root = TreeNode(1)\n    root.left = TreeNode(2)\n    root.right = TreeNode(3)\n    root.left.left = TreeNode(4)\n    root.left.right = TreeNode(5)\n    root.right.left = TreeNode(6)\n    root.right.right = TreeNode(7)\n\n    print(is_balanced(root))"
    },
    {
      "rank": 59,
      "score": 3.456327258366937,
      "candidate": "class Node:\n    def __init__(self, val):\n        self.val = val\n        self.left = None\n        self.right = None\n\n\ndef is_balanced(root):\n    if root is None:\n        return True\n\n    return is_balanced_helper(root, 0)\n\n\ndef is_balanced_helper(root, depth):\n    if root.left is None and root.right is None:\n        return True\n\n    if root.left is not None and root.right is not None:\n        return is_balanced_helper(root.left, depth + 1) and is_balanced_helper(root.right, depth + 1)\n\n    if root.left is None and root.right is not None:\n        return False\n\n    if root.right is not None and root.left is not None:\n        return is_balanced_helper(root.right, depth + 1) and is_balanced_helper(root.left, depth + 1)\n\n    return False\n\n\ndef test():\n    root = Node(1)\n    root.left = Node(2)\n    root.right = Node(3)\n    root.left.left = Node(4)\n    root.left.right = Node(5)\n    root.right.left = Node(6)\n    root.right.right = Node(7)\n    print(is_balanced(root))\n\n\ntest()"
    },
    {
      "rank": 60,
      "score": 3.4485470376740164,
      "candidate": "from typing import Optional\n\n\nclass TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\n\ndef check_balanced_tree(root: Optional[TreeNode]) -> bool:\n    if not root:\n        return True\n    if not check_balanced_tree(root.left) or not check_balanced_tree(root.right):\n        return False\n    return abs(check_balanced_tree(root.left) - check_balanced_tree(root.right)) < 1\n\n\nif __name__ == \"__main__\":\n    root = TreeNode(3)\n    root.left = TreeNode(9)\n    root.right = TreeNode(20)\n    root.left.left = TreeNode(15)\n    root.left.right = TreeNode(7)\n    root.right.left = TreeNode(1)\n    root.right.right = TreeNode(5)\n    print(check_balanced_tree(root))"
    },
    {
      "rank": 61,
      "score": 3.4027322271438596,
      "candidate": "class Node:\n    def __init__(self, val, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\n\ndef is_balanced(root):\n    if not root:\n        return True\n\n    return is_balanced_helper(root, True) or is_balanced_helper(root, False)\n\n\ndef is_balanced_helper(root, balanced):\n    if not root:\n        return balanced\n\n    if not is_balanced_helper(root.left, balanced) or not is_balanced_helper(root.right, balanced):\n        return False\n\n    if balanced and root.val!= root.left.val and root.val!= root.right.val:\n        return False\n    else:\n        return is_balanced_helper(root.left, balanced) or is_balanced_helper(root.right, balanced)\n\n\ndef main():\n    root = Node(1)\n    root.left = Node(2)\n    root.right = Node(3)\n    print(is_balanced(root))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 62,
      "score": 3.361848624197751,
      "candidate": "class Node:\n    def __init__(self, val=None, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\n\ndef is_balanced(node):\n    if not node:\n        return True\n\n    return is_balanced(node.left) and is_balanced(node.right) and abs(\n        node.val - node.left.val) < abs(node.val - node.right.val\n    )\n\n\nif __name__ == \"__main__\":\n    n1 = Node(5)\n    n2 = Node(3)\n    n3 = Node(4)\n    n4 = Node(6)\n    n5 = Node(7)\n    n6 = Node(8)\n    n7 = Node(9)\n\n    n1.left = n2\n    n1.right = n3\n    n2.left = n4\n    n2.right = n5\n    n3.left = n6\n    n3.right = n7\n\n    print(is_balanced(n1))"
    },
    {
      "rank": 63,
      "score": 3.2997213815320254,
      "candidate": "class TreeNode:\n    def __init__(self, x):\n        self.val = x\n        self.left = None\n        self.right = None\n\ndef checkBalance(root):\n    if not root:\n        return True\n\n    left = checkBalance(root.left)\n    right = checkBalance(root.right)\n\n    if not left and not right:\n        return True\n\n    return False\n\nif __name__ == '__main__':\n    root = TreeNode(1)\n    root.left = TreeNode(2)\n    root.right = TreeNode(3)\n    root.left.left = TreeNode(4)\n    root.left.right = TreeNode(5)\n\n    print(checkBalance(root))"
    },
    {
      "rank": 64,
      "score": 3.177083846699123,
      "candidate": "class TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\n\ndef check_balanced(root):\n    if root is None:\n        return True\n    return check_balanced_helper(root.left) and check_balanced_helper(root.right) and abs(root.val - root.left.val - root.right.val) <= 1\n\n\ndef check_balanced_helper(root):\n    if root is None:\n        return True\n    return check_balanced_helper(root.left) and check_balanced_helper(root.right) and abs(root.val - root.left.val - root.right.val) <= 1 \\\n           and check_balanced_helper(root.left.left) and check_balanced_helper(root.left.right) and check_balanced_helper(root.right.left) and check_balanced_helper(root.right.right)\n\n\nif __name__ == '__main__':\n    root = TreeNode(3)\n    root.left = TreeNode(9)\n    root.right = TreeNode(20)\n    root.left.left = TreeNode(15)\n    root.left.right = TreeNode(7)\n    root.right.left = TreeNode(1)\n    root.right.right = TreeNode(5)\n    root.right.right.right = TreeNode(6)\n    print(check_balanced(root))"
    },
    {
      "rank": 65,
      "score": 3.1610880437332454,
      "candidate": "class TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\n\ndef is_balanced(root: TreeNode) -> bool:\n    if not root:\n        return True\n\n    return is_balanced_helper(root, float('inf'))\n\n\ndef is_balanced_helper(root: TreeNode, min_val: float) -> bool:\n    if not root:\n        return True\n\n    if abs(min_val - root.val) > 1:\n        return False\n\n    return is_balanced_helper(root.left, min_val) and is_balanced_helper(root.right, min_val)"
    },
    {
      "rank": 66,
      "score": 3.1450989357616423,
      "candidate": "class Node:\n    def __init__(self, value):\n        self.value = value\n        self.left = None\n        self.right = None\n\n\ndef balanced_tree(root):\n    if not root:\n        return True\n    return balanced_tree(root.left) and balanced_tree(root.right) and abs(\n        abs(root.left.value - root.right.value)\n    ) < 2\n\n\nif __name__ == \"__main__\":\n    root = Node(1)\n    root.left = Node(2)\n    root.right = Node(3)\n    root.left.left = Node(4)\n    root.left.right = Node(5)\n    root.right.left = Node(6)\n    root.right.right = Node(7)\n    assert balanced_tree(root) is True"
    },
    {
      "rank": 67,
      "score": 3.10234316155233,
      "candidate": "class TreeNode:\n    def __init__(self, val):\n        self.val = val\n        self.left = None\n        self.right = None\n\n\ndef is_balanced(root):\n    if not root:\n        return True\n\n    return is_balanced_helper(root, float(\"-inf\"))\n\n\ndef is_balanced_helper(root, min_val):\n    if not root:\n        return True\n\n    if abs(root.val - min_val) > 1:\n        return False\n\n    return is_balanced_helper(root.left, min_val) and is_balanced_helper(root.right, min_val)\n\n\nif __name__ == \"__main__\":\n    root = TreeNode(1)\n    root.left = TreeNode(2)\n    root.right = TreeNode(3)\n\n    print(is_balanced(root))"
    },
    {
      "rank": 68,
      "score": 3.0964620055758707,
      "candidate": "# Definition for a binary tree node.\nclass TreeNode:\n    def __init__(self, x):\n        self.val = x\n        self.left = None\n        self.right = None\n\n\nclass Solution:\n    # @param root, a tree node\n    # @return a boolean\n    def isBalanced(self, root):\n        return self.isBalancedHelper(root, float('-inf'), float('inf'))\n\n    def isBalancedHelper(self, root, min_val, max_val):\n        if root is None:\n            return True\n\n        left_is_balanced = self.isBalancedHelper(root.left, min_val, max_val)\n        right_is_balanced = self.isBalancedHelper(root.right, min_val, max_val)\n\n        if left_is_balanced and right_is_balanced:\n            if abs(root.val - min_val) <= abs(root.val - max_val):\n                return True\n\n        return False"
    },
    {
      "rank": 69,
      "score": 3.042653063436704,
      "candidate": "class Node:\n    def __init__(self, val):\n        self.val = val\n        self.left = None\n        self.right = None\n\n\ndef is_balanced(root):\n    if not root:\n        return True\n    if not root.left and not root.right:\n        return True\n    return False\n\n\nif __name__ == '__main__':\n    root = Node(3)\n    root.left = Node(2)\n    root.right = Node(1)\n    root.left.left = Node(4)\n    root.left.right = Node(5)\n    root.right.right = Node(6)\n    print(is_balanced(root))"
    },
    {
      "rank": 70,
      "score": 3.002505593754806,
      "candidate": "class Node:\n    def __init__(self, val):\n        self.val = val\n        self.left = None\n        self.right = None\n\n\nclass Solution:\n    def isBalanced(self, root):\n        if not root:\n            return True\n\n        def helper(node, left, right):\n            if not node:\n                return True\n            if not left and not right:\n                return False\n            if node.val!= left or node.val!= right:\n                return False\n            return helper(node.left, left, node.val) and helper(node.right, node.val, right)\n\n        return helper(root.left, root.val, root.val)\n\n\nif __name__ == \"__main__\":\n    s = Solution()\n    node = Node(1)\n    node.left = Node(2)\n    node.right = Node(3)\n    print(s.isBalanced(node))"
    },
    {
      "rank": 71,
      "score": 2.9933863598784125,
      "candidate": "class Node:\n    def __init__(self, val, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\n\ndef is_balanced(root):\n    if not root:\n        return True\n    if not is_balanced(root.left) and not is_balanced(root.right):\n        return False\n    if is_balanced(root.left) and not is_balanced(root.right):\n        return True\n    return False\n\n\ndef main():\n    root = Node(1)\n    root.left = Node(2)\n    root.right = Node(3)\n    print(is_balanced(root))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 72,
      "score": 2.9824452408361237,
      "candidate": "class Node:\n    def __init__(self, val):\n        self.val = val\n        self.left = None\n        self.right = None\n\n\ndef balanced_tree(root):\n    if not root:\n        return True\n\n    return balanced_tree_helper(root, float(\"-inf\"), float(\"inf\"))\n\n\ndef balanced_tree_helper(root, min_val, max_val):\n    if not root:\n        return True\n\n    if root.val <= min_val or root.val >= max_val:\n        return False\n\n    return balanced_tree_helper(root.left, min_val, root.val) and balanced_tree_helper(root.right, root.val, max_val)\n\n\nif __name__ == \"__main__\":\n    node = Node(4)\n    node.left = Node(2)\n    node.right = Node(6)\n    node.left.left = Node(1)\n    node.left.right = Node(3)\n    node.right.right = Node(5)\n\n    assert balanced_tree(node) is True"
    },
    {
      "rank": 73,
      "score": 2.9647150404256366,
      "candidate": "class Node:\n    def __init__(self, val):\n        self.val = val\n        self.left = None\n        self.right = None\n\n\ndef is_balanced(root):\n    if not root:\n        return True\n    if not (root.left and root.right):\n        return False\n    if abs(root.left.val - root.right.val) > 1:\n        return False\n    return is_balanced(root.left) and is_balanced(root.right)\n\n\nif __name__ == \"__main__\":\n    n1 = Node(1)\n    n2 = Node(2)\n    n3 = Node(3)\n    n4 = Node(4)\n    n5 = Node(5)\n    n6 = Node(6)\n    n7 = Node(7)\n    n8 = Node(8)\n    n9 = Node(9)\n    n10 = Node(10)\n    n11 = Node(11)\n    n12 = Node(12)\n    n13 = Node(13)\n    n14 = Node(14)\n    n15 = Node(15)\n    n16 = Node(16)\n    n17 = Node(17)\n    n18 = Node(18)\n    n19 = Node(19)\n    n20 = Node(20)\n    n21 = Node(21)\n    n22 = Node(22)\n    n23 = Node(23)\n    n24 = Node(24)\n    n25 = Node(25)\n    n26 = Node(26)\n    n27 = Node(27)\n    n28 = Node(28)\n    n29 = Node(29)\n    n30 = Node(30)\n    n31 = Node(31)\n    n32 = Node(32)\n    n33 = Node(33)\n    n34 = Node(34)\n    n35 = Node(35)\n    n36 = Node(36)\n    n37 = Node(37)\n    n38 = Node(38)\n    n39 = Node(39)\n    n40 = Node(40)\n    n41 = Node(41)\n    n42 = Node(42"
    },
    {
      "rank": 74,
      "score": 2.9090271014347295,
      "candidate": "class Node:\n    def __init__(self, value):\n        self.value = value\n        self.left = None\n        self.right = None\n\n\nclass Solution:\n    def isBalanced(self, root: Node) -> bool:\n        if not root:\n            return True\n        if not root.left and not root.right:\n            return True\n        return False\n\n\nif __name__ == \"__main__\":\n    node = Node(1)\n    node.left = Node(2)\n    node.right = Node(3)\n    node.right.left = Node(4)\n    node.right.right = Node(5)\n\n    print(Solution().isBalanced(node))"
    },
    {
      "rank": 75,
      "score": 2.8893696127615973,
      "candidate": "class TreeNode:\n    def __init__(self, val):\n        self.val = val\n        self.left = None\n        self.right = None\n\n\ndef check_balanced(root):\n    if not root:\n        return True\n\n    return check_balanced_helper(root, True)\n\n\ndef check_balanced_helper(root, is_left):\n    if not root.left and not root.right:\n        if is_left:\n            return True\n        else:\n            return False\n\n    return check_balanced_helper(root.left, is_left) or check_balanced_helper(root.right, is_left)\n\n\nif __name__ == '__main__':\n    t = TreeNode(1)\n    t.left = TreeNode(2)\n    t.right = TreeNode(3)\n    t.left.left = TreeNode(4)\n    t.left.right = TreeNode(5)\n    t.right.left = TreeNode(6)\n    t.right.right = TreeNode(7)\n    print(check_balanced(t))"
    },
    {
      "rank": 76,
      "score": 2.8852728910949015,
      "candidate": "class Node:\n    def __init__(self, val=None, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\n\ndef check_balanced_tree(root):\n    if not root:\n        return True\n    if check_balanced_tree(root.left) and check_balanced_tree(root.right):\n        return True\n    else:\n        return False\n\n\ndef main():\n    root = Node(1, Node(2, Node(3), Node(4)), Node(5, Node(6)))\n    print(check_balanced_tree(root))\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 77,
      "score": 2.885052304646178,
      "candidate": "class TreeNode:\n    def __init__(self, val):\n        self.val = val\n        self.left, self.right = None, None\n\n\ndef check_balanced_tree(root: TreeNode) -> bool:\n    if root is None:\n        return True\n\n    if root.left is None and root.right is None:\n        return True\n\n    return check_balanced_tree(root.left) and check_balanced_tree(root.right)\n\n\nif __name__ == '__main__':\n    root = TreeNode(1)\n    root.left = TreeNode(2)\n    root.right = TreeNode(3)\n    root.left.left = TreeNode(4)\n    root.left.right = TreeNode(5)\n    root.right.left = TreeNode(6)\n    root.right.right = TreeNode(7)\n    root.right.left.left = TreeNode(8)\n    root.right.left.right = TreeNode(9)\n    root.right.right.left = TreeNode(10)\n    root.right.right.right = TreeNode(11)\n    root.right.right.right.left = TreeNode(12)\n    root.right.right.right.right = TreeNode(13)\n    root.right.right.right.right.right = TreeNode(14)\n    root.right.right.right.right.left = TreeNode(15)\n    root.right.right.right.right.left = TreeNode(16)\n    root.right.right.right.right.left = TreeNode(17)\n    root.right.right.right.right.right = TreeNode(18)\n    root.right.right.right.right.right.left = TreeNode(19)\n    root.right.right.right.right.right.left = TreeNode(20)\n    root.right.right.right.right.right.right = TreeNode(21)\n    root.right.right.right.right.right.right.left = TreeNode(22)\n    root.right.right.right.right.right.right.right.right = TreeNode(23)\n    root.right.right.right.right.right.right.right.right.left = TreeNode(24)"
    },
    {
      "rank": 78,
      "score": 2.8484859358329047,
      "candidate": "class TreeNode:\n    def __init__(self, x):\n        self.val = x\n        self.left = None\n        self.right = None\n\n\ndef is_balanced(root):\n    if not root:\n        return True\n    if not is_balanced(root.left) or not is_balanced(root.right):\n        return False\n    return is_balanced(root.left) and is_balanced(root.right) and abs(\n        abs(root.left.val - root.right.val) + 1\n    ) < 2\n\n\nif __name__ == \"__main__\":\n    root = TreeNode(1)\n    root.left = TreeNode(2)\n    root.right = TreeNode(3)\n    root.left.left = TreeNode(4)\n    root.left.right = TreeNode(5)\n    root.right.right = TreeNode(6)\n    print(is_balanced(root))"
    },
    {
      "rank": 79,
      "score": 2.771792420750574,
      "candidate": "class Node:\n    def __init__(self, val):\n        self.val = val\n        self.left = None\n        self.right = None\n\n\nclass Solution:\n    def isBalanced(self, root: 'Node') -> bool:\n        return self.is_balanced_helper(root)\n\n    def is_balanced_helper(self, node):\n        if not node:\n            return True\n        left_balanced = self.is_balanced_helper(node.left)\n        right_balanced = self.is_balanced_helper(node.right)\n        if not left_balanced and not right_balanced:\n            return True\n        return False\n\n\nif __name__ == '__main__':\n    sol = Solution()\n    root = Node(1)\n    root.left = Node(2)\n    root.right = Node(3)\n    root.left.left = Node(4)\n    root.left.right = Node(5)\n    root.right.left = Node(6)\n    root.right.right = Node(7)\n    print(sol.isBalanced(root))"
    },
    {
      "rank": 80,
      "score": 2.765204623455808,
      "candidate": "class TreeNode:\n    def __init__(self, val):\n        self.val = val\n        self.left = None\n        self.right = None\n\n\ndef is_balanced(root: TreeNode) -> bool:\n    if not root:\n        return True\n    if not root.left and not root.right:\n        return True\n    return False"
    },
    {
      "rank": 81,
      "score": 2.754139048643577,
      "candidate": "class Node:\n    def __init__(self, val, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\n\ndef check_balanced_tree(root: Node):\n    if root is None:\n        return True\n    if check_balanced_tree(root.left) and check_balanced_tree(root.right):\n        return True\n    else:\n        return False"
    },
    {
      "rank": 82,
      "score": 2.7460475930459127,
      "candidate": "class Node:\n    def __init__(self, val):\n        self.val = val\n        self.left = None\n        self.right = None\n\n\ndef is_balanced(root):\n    if not root:\n        return True\n    return is_balanced_helper(root, float(\"-inf\"))\n\n\ndef is_balanced_helper(node, low):\n    if not node:\n        return True\n\n    if low > node.val:\n        return False\n\n    if not is_balanced_helper(node.left, low):\n        return False\n\n    if not is_balanced_helper(node.right, low):\n        return False\n\n    return True\n\n\ndef main():\n    root = Node(1)\n    root.left = Node(2)\n    root.right = Node(3)\n    root.left.left = Node(4)\n    root.left.right = Node(5)\n    root.right.left = Node(6)\n    root.right.right = Node(7)\n    print(is_balanced(root))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 83,
      "score": 2.7332524649826606,
      "candidate": "class Node:\n    def __init__(self, val):\n        self.val = val\n        self.left = None\n        self.right = None\n\n\ndef check_balanced_tree(root):\n    if root is None:\n        return True\n\n    left_balanced = check_balanced_tree(root.left)\n    right_balanced = check_balanced_tree(root.right)\n\n    if left_balanced and right_balanced:\n        return True\n    else:\n        return False\n\n\nif __name__ == \"__main__\":\n    root = Node(1)\n    root.left = Node(2)\n    root.right = Node(3)\n    root.left.left = Node(4)\n    root.left.right = Node(5)\n    root.right.left = Node(6)\n    root.right.right = Node(7)\n\n    print(check_balanced_tree(root))"
    },
    {
      "rank": 84,
      "score": 2.7244791106719233,
      "candidate": "class Node:\n    def __init__(self, val):\n        self.val = val\n        self.left = None\n        self.right = None\n\nclass Solution:\n    def isBalanced(self, root: Node) -> bool:\n        return self.isBalancedHelper(root, 0)\n\n    def isBalancedHelper(self, root, depth):\n        if root is None:\n            return True\n\n        left = self.isBalancedHelper(root.left, depth + 1)\n        right = self.isBalancedHelper(root.right, depth + 1)\n\n        if left and right and abs(depth - left - right) <= 1:\n            return True\n\n        return False"
    },
    {
      "rank": 85,
      "score": 2.66830821985008,
      "candidate": "class Node:\n    def __init__(self, data):\n        self.data = data\n        self.left = None\n        self.right = None\n\n\ndef is_balanced(root):\n    if not root:\n        return True\n    if not is_balanced(root.left) or not is_balanced(root.right):\n        return False\n\n    return is_balanced(root.left) and is_balanced(root.right) and abs(get_height(root.left) - get_height(root.right)) <= 1\n\n\ndef get_height(root):\n    if not root:\n        return 0\n\n    left = get_height(root.left)\n    right = get_height(root.right)\n\n    return max(left, right) + 1\n\n\ndef test_is_balanced():\n    root = Node(10)\n    assert is_balanced(root) is True\n\n    root = Node(20)\n    assert is_balanced(root) is False\n\n    root = Node(30)\n    assert is_balanced(root) is False\n\n    root = Node(40)\n    assert is_balanced(root) is False\n\n    root = Node(50)\n    assert is_balanced(root) is False\n\n    root = Node(60)\n    assert is_balanced(root) is False\n\n    root = Node(70)\n    assert is_balanced(root) is False\n\n    root = Node(80)\n    assert is_balanced(root) is False"
    },
    {
      "rank": 86,
      "score": 2.588783413620907,
      "candidate": "class Node:\n    def __init__(self, val):\n        self.val = val\n        self.left = None\n        self.right = None\n\n\ndef is_balanced(root: Node):\n    if not root:\n        return True\n    if not is_balanced(root.left) or not is_balanced(root.right):\n        return False\n    return is_balanced(root.left) and is_balanced(root.right) and abs(root.val - root.left.val) + abs(root.val - root.right.val) <= 1\n\n\nif __name__ == \"__main__\":\n    n1 = Node(1)\n    n2 = Node(2)\n    n3 = Node(3)\n    n4 = Node(4)\n    n5 = Node(5)\n    n6 = Node(6)\n    n7 = Node(7)\n    n8 = Node(8)\n    n9 = Node(9)\n    n10 = Node(10)\n    n11 = Node(11)\n    n12 = Node(12)\n    n13 = Node(13)\n    n14 = Node(14)\n    n15 = Node(15)\n    n16 = Node(16)\n    n17 = Node(17)\n    n18 = Node(18)\n    n19 = Node(19)\n    n20 = Node(20)\n    n21 = Node(21)\n    n22 = Node(22)\n    n23 = Node(23)\n    n24 = Node(24)\n    n25 = Node(25)\n    n26 = Node(26)\n    n27 = Node(27)\n    n28 = Node(28)\n    n29 = Node(29)\n    n30 = Node(30)\n    n31 = Node(31)\n    n32 = Node(32)\n    n33 = Node(33)\n    n34 = Node(34)\n    n35 = Node(35)\n    n36 = Node(36)\n    n37 = Node(37)\n    n38 = Node(38)\n    n39 = Node(39)\n    n40 = Node(40)"
    },
    {
      "rank": 87,
      "score": 2.503712751036132,
      "candidate": "class Node:\n    def __init__(self, val):\n        self.val = val\n        self.left = None\n        self.right = None\n\n\ndef check_balanced_tree(root):\n    if root is None:\n        return True\n\n    if root.val!= -1:\n        left = check_balanced_tree(root.left)\n        right = check_balanced_tree(root.right)\n        return left and right and abs(left - right) <= 1\n\n    return False\n\n\nif __name__ == \"__main__\":\n    n1 = Node(1)\n    n2 = Node(2)\n    n3 = Node(3)\n    n4 = Node(4)\n    n5 = Node(5)\n    n6 = Node(6)\n    n7 = Node(7)\n    n8 = Node(8)\n    n9 = Node(9)\n\n    n1.left = n2\n    n1.right = n3\n    n2.left = n4\n    n2.right = n5\n    n3.left = n6\n    n3.right = n7\n    n4.left = n8\n    n4.right = n9\n\n    assert check_balanced_tree(n1) is True"
    },
    {
      "rank": 88,
      "score": 2.481721644811609,
      "candidate": "class Node:\n    def __init__(self, data):\n        self.data = data\n        self.left = None\n        self.right = None\n\n\nclass Solution:\n    def isBalanced(self, root: 'Node') -> bool:\n        if not root:\n            return True\n\n        if root.data!= self.get_height(root.left) + self.get_height(root.right):\n            return False\n\n        return self.isBalanced(root.left) and self.isBalanced(root.right)\n\n    def get_height(self, root):\n        if not root:\n            return 0\n        else:\n            return 1 + max(self.get_height(root.left), self.get_height(root.right))\n\n\nif __name__ == '__main__':\n    root = Node(10)\n    root.left = Node(20)\n    root.right = Node(30)\n    root.left.left = Node(40)\n    root.left.right = Node(50)\n    root.right.right = Node(60)\n    root.right.left = Node(70)\n\n    print(Solution().isBalanced(root))"
    },
    {
      "rank": 89,
      "score": 2.457895862737046,
      "candidate": "class TreeNode:\n    def __init__(self, x):\n        self.val = x\n        self.left = None\n        self.right = None\n\n\ndef isBalanced(root):\n    if not root:\n        return True\n    if not isBalanced(root.left) or not isBalanced(root.right):\n        return False\n    return isBalanced(root.left) and isBalanced(root.right) and abs(getDepth(root.left) - getDepth(root.right)) <= 1\n\n\ndef getDepth(root):\n    if not root:\n        return 0\n    return max(getDepth(root.left), getDepth(root.right)) + 1\n\n\ndef isBalanced(root):\n    if not root:\n        return True\n    if not isBalanced(root.left) and not isBalanced(root.right):\n        return False\n    return isBalanced(root.left) or isBalanced(root.right) and abs(getDepth(root.left) - getDepth(root.right)) <= 1\n\n\nif __name__ == '__main__':\n    root = TreeNode(1)\n    root.left = TreeNode(2)\n    root.right = TreeNode(3)\n    root.left.left = TreeNode(4)\n    root.left.right = TreeNode(5)\n    root.right.left = TreeNode(6)\n    root.right.right = TreeNode(7)\n\n    print(isBalanced(root))"
    },
    {
      "rank": 90,
      "score": 2.349188836039769,
      "candidate": "class Node:\n    def __init__(self, val):\n        self.val = val\n        self.left = None\n        self.right = None\n\n\ndef is_balanced(node: Node) -> bool:\n    if node is None:\n        return True\n\n    if node.val == 'null':\n        return True\n\n    return is_balanced(node.left) and is_balanced(node.right) and abs(node.left.val - node.right.val) <= 1\n\n\nif __name__ == '__main__':\n    node = Node(1)\n    node.left = Node(2)\n    node.right = Node(3)\n    node.left.left = Node(4)\n    node.left.right = Node(5)\n    node.right.left = Node(6)\n    node.right.right = Node(7)\n\n    print(is_balanced(node))"
    },
    {
      "rank": 91,
      "score": 2.307971186345707,
      "candidate": "class TreeNode:\n    def __init__(self, val):\n        self.val = val\n        self.left = None\n        self.right = None\n\n\ndef is_balanced(root):\n    if not root:\n        return True\n    return is_balanced_helper(root, float('-inf'))\n\n\ndef is_balanced_helper(root, min_val):\n    if not root:\n        return True\n    if abs(min_val - root.val) > 1:\n        return False\n    return is_balanced_helper(root.left, min_val) and is_balanced_helper(root.right, min_val)\n\n\nif __name__ == \"__main__\":\n    root = TreeNode(4)\n    root.left = TreeNode(2)\n    root.right = TreeNode(6)\n    root.left.left = TreeNode(1)\n    root.left.right = TreeNode(3)\n    root.right.left = TreeNode(5)\n    root.right.right = TreeNode(7)\n\n    print(is_balanced(root))"
    },
    {
      "rank": 92,
      "score": 2.301873388755406,
      "candidate": "from typing import Optional\n\nfrom binary_tree_node import TreeNode\n\n\ndef is_balanced(root: Optional[TreeNode]) -> bool:\n    return is_balanced_helper(root, 0)\n\n\ndef is_balanced_helper(root: TreeNode, depth: int) -> bool:\n    if root is None:\n        return True\n    if root.left is None and root.right is None and depth == 0:\n        return True\n    return is_balanced_helper(root.left, depth - 1) and is_balanced_helper(root.right, depth - 1)\n\n\nif __name__ == \"__main__\":\n    root = TreeNode(1)\n    root.left = TreeNode(2)\n    root.right = TreeNode(3)\n    root.left.left = TreeNode(4)\n    root.left.right = TreeNode(5)\n    root.right.left = TreeNode(6)\n    root.right.right = TreeNode(7)\n\n    assert is_balanced(root) is True"
    },
    {
      "rank": 93,
      "score": 2.282877675415262,
      "candidate": "from typing import Optional\n\n\nclass Node:\n    def __init__(self, val: int) -> None:\n        self.val = val\n        self.left = None\n        self.right = None\n\n\ndef check_balanced(root: Optional[Node]) -> bool:\n    if not root:\n        return True\n\n    if not check_balanced(root.left) and not check_balanced(root.right):\n        return True\n\n    return False\n\n\nif __name__ == \"__main__\":\n    root = Node(1)\n    root.left = Node(2)\n    root.right = Node(3)\n\n    assert check_balanced(root) == True\n    assert check_balanced(None) == True\n    assert check_balanced(Node(2)) == True\n    assert check_balanced(Node(2, Node(1))) == True\n    assert check_balanced(Node(2, Node(1), Node(3))) == False"
    },
    {
      "rank": 94,
      "score": 2.2755242247199607,
      "candidate": "class Node:\n    def __init__(self, data):\n        self.left = None\n        self.right = None\n        self.data = data\n\n\ndef is_balanced(root):\n    if root is None:\n        return True\n\n    return is_balanced_helper(root, float('-inf'), float('inf'))\n\n\ndef is_balanced_helper(node, low, high):\n    if node is None:\n        return True\n\n    if node.data <= low or node.data >= high:\n        return False\n\n    return is_balanced_helper(node.left, low, node.data) and is_balanced_helper(node.right, node.data, high)\n\n\ndef test_is_balanced():\n    root = Node(1)\n    assert is_balanced(root) == True\n\n    root = Node(2)\n    assert is_balanced(root) == False\n\n    root = Node(3)\n    assert is_balanced(root) == False\n\n    root = Node(4)\n    assert is_balanced(root) == False\n\n    root = Node(5)\n    assert is_balanced(root) == True\n\n    root = Node(6)\n    assert is_balanced(root) == False\n\n    root = Node(7)\n    assert is_balanced(root) == False\n\n    root = Node(8)\n    assert is_balanced(root) == False\n\n    root = Node(9)\n    assert is_balanced(root) == False\n\n    root = Node(10)\n    assert is_balanced(root) == True\n\n    root = Node(11)\n    assert is_balanced(root) == False\n\n    root = Node(12)\n    assert is_balanced(root) == True"
    },
    {
      "rank": 95,
      "score": 2.154790262068614,
      "candidate": "class TreeNode:\n    def __init__(self, val):\n        self.val = val\n        self.left, self.right = None, None\n\n\ndef check_balanced(root):\n    if not root:\n        return True\n\n    if not check_balanced(root.left) and not check_balanced(root.right):\n        return False\n\n    return check_balanced(root.left) or check_balanced(root.right)\n\n\nif __name__ == \"__main__\":\n    root = TreeNode(1)\n    root.left = TreeNode(2)\n    root.right = TreeNode(3)\n    root.left.left = TreeNode(4)\n    root.left.right = TreeNode(5)\n    root.right.left = TreeNode(6)\n    root.right.right = TreeNode(7)\n\n    print(check_balanced(root))"
    },
    {
      "rank": 96,
      "score": 2.1361103238722605,
      "candidate": "class Node:\n    def __init__(self, val):\n        self.val = val\n        self.left = None\n        self.right = None\n\n\nclass Solution:\n    def isBalanced(self, root: Node) -> bool:\n        if root is None:\n            return True\n\n        return self.isBalanced(root.left) and self.isBalanced(root.right) and abs(self.get_height(root.left) - self.get_height(root.right)) <= 1\n\n    def get_height(self, root):\n        if root is None:\n            return 0\n        else:\n            return max(self.get_height(root.left), self.get_height(root.right)) + 1\n\n\nif __name__ == \"__main__\":\n    root = Node(1)\n    root.left = Node(2)\n    root.right = Node(3)\n    root.left.left = Node(4)\n    root.left.right = Node(5)\n    root.right.left = Node(6)\n    root.right.right = Node(7)\n    root.left.left.left = Node(8)\n    root.left.left.right = Node(9)\n    root.left.right.left = Node(10)\n    root.left.right.right = Node(11)\n    print(Solution().isBalanced(root))"
    },
    {
      "rank": 97,
      "score": 2.0624926801176793,
      "candidate": "def is_balanced(root):\n    return check_balance(root)\n\n\ndef check_balance(root):\n    if not root:\n        return True\n    if not root.left and not root.right:\n        return True\n    return False\n\n\ndef test_is_balanced():\n    assert is_balanced(None) is True\n    assert is_balanced(None) is False\n    assert is_balanced(None) is True\n    assert is_balanced(None) is False\n    assert is_balanced(Node(1)) is True\n    assert is_balanced(Node(2)) is False\n    assert is_balanced(Node(3)) is True\n    assert is_balanced(Node(4)) is True\n    assert is_balanced(Node(5)) is True\n    assert is_balanced(Node(6)) is False\n    assert is_balanced(Node(7)) is False\n    assert is_balanced(Node(8)) is False\n    assert is_balanced(Node(9)) is False\n    assert is_balanced(Node(10)) is False\n    assert is_balanced(Node(11)) is True\n    assert is_balanced(Node(12)) is False\n    assert is_balanced(Node(13)) is True\n    assert is_balanced(Node(14)) is True\n    assert is_balanced(Node(15)) is False\n    assert is_balanced(Node(16)) is True\n    assert is_balanced(Node(17)) is False\n    assert is_balanced(Node(18)) is True\n    assert is_balanced(Node(19)) is False\n    assert is_balanced(Node(20)) is False\n    assert is_balanced(Node(21)) is False\n    assert is_balanced(Node(22)) is False\n    assert is_balanced(Node(23)) is False\n    assert is_balanced(Node(24)) is False\n    assert is_balanced(Node(25)) is False\n    assert is_balanced(Node(26)) is True\n    assert is_balanced(Node(27)) is False\n    assert is_balanced(Node(28)) is"
    },
    {
      "rank": 98,
      "score": 2.03976163929891,
      "candidate": "def isBalanced(root):\n    return isBalancedHelper(root, float('-inf'), float('inf'))\n\n\ndef isBalancedHelper(root, lower_bound, upper_bound):\n    if not root:\n        return True\n    if abs(root.val - lower_bound) > abs(root.val - upper_bound):\n        return False\n    return isBalancedHelper(root.left, lower_bound, root.val) and isBalancedHelper(root.right, root.val, upper_bound)"
    },
    {
      "rank": 99,
      "score": 2.0260912318455624,
      "candidate": "from typing import Optional\n\nfrom binary_tree_node import TreeNode\n\n\ndef is_balanced(root: Optional[TreeNode]) -> bool:\n    if not root:\n        return True\n\n    if not is_balanced(root.left) and not is_balanced(root.right):\n        return True\n\n    return False\n\n\nif __name__ == \"__main__\":\n    tree = TreeNode(1)\n    tree.left = TreeNode(2)\n    tree.right = TreeNode(3)\n    tree.left.left = TreeNode(4)\n    tree.left.right = TreeNode(5)\n    tree.right.left = TreeNode(6)\n    tree.right.right = TreeNode(7)\n\n    print(is_balanced(tree))"
    },
    {
      "rank": 100,
      "score": 1.7163248989960254,
      "candidate": "class Node:\n    def __init__(self, val, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\n\ndef is_balanced(root):\n    if not root:\n        return True\n\n    return is_balanced(root.left) and is_balanced(root.right) and abs(root.val - root.left.val) < abs(root.val - root.right.val)\n\n\nif __name__ == \"__main__\":\n    root = Node(10)\n    root.left = Node(5)\n    root.right = Node(20)\n    root.left.left = Node(15)\n    root.left.right = Node(25)\n    root.right.left = Node(30)\n    root.right.right = Node(35)\n\n    print(is_balanced(root))"
    }
  ]
}