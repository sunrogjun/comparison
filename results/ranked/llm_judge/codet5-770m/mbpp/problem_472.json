{
  "timestamp": "2025-09-14T15:55:31.822239",
  "method": "improved_llm_judge",
  "judge_model": "codellama/CodeLlama-7b-Python-hf",
  "target_model": "codet5-770m",
  "dataset": "mbpp",
  "problem_number": 472,
  "total_candidates": 100,
  "results": [
    {
      "rank": 1,
      "score": 10.0,
      "candidate": "def factorial(x):\n    factorial = 1\n    for i in range(1,x+1):\n        factorial *= i\n    return factorial\n\nprint(factorial(4))\nprint(factorial(5))\nprint(factorial(6))\nprint(factorial(7))\nprint(factorial(8))\nprint(factorial(9))"
    },
    {
      "rank": 2,
      "score": 10.0,
      "candidate": "def factorial(x):\n    i = 1\n    while x > 1:\n        if x % i == 0:\n            return i\n        i += 1\n\nprint(factorial(5))"
    },
    {
      "rank": 3,
      "score": 10.0,
      "candidate": "import math\n\ndef f(n, x):\n    return math.factorial(n) // (math.factorial(n - x) // math.factorial(x))\n\nprint(f(0, 5))\nprint(f(1, 5))\nprint(f(2, 5))\nprint(f(3, 5))\nprint(f(4, 5))\nprint(f(5, 5))\nprint(f(6, 5))\nprint(f(7, 5))\nprint(f(8, 5))\nprint(f(9, 5))\nprint(f(10, 5))\nprint(f(11, 5))\nprint(f(12, 5))\nprint(f(13, 5))\nprint(f(14, 5))\nprint(f(15, 5))\nprint(f(16, 5))\nprint(f(17, 5))\nprint(f(18, 5))\nprint(f(19, 5))\nprint(f(20, 5))\nprint(f(21, 5))\nprint(f(22, 5))\nprint(f(23, 5))\nprint(f(24, 5))\nprint(f(25, 5))\nprint(f(26, 5))\nprint(f(27, 5))\nprint(f(28, 5))\nprint(f(29, 5))\nprint(f(30, 5))\nprint(f(31, 5))\nprint(f(32, 5))\nprint(f(33, 5))\nprint(f(34, 5))\nprint(f(35, 5))\nprint(f(36, 5))\nprint(f(37, 5))\nprint(f(38, 5))\nprint(f(39, 5))\nprint(f(40, 5))\nprint(f(41, 5))\nprint(f(42, 5))\nprint(f(43, 5))\nprint(f(44, 5))\nprint(f(45, 5))\nprint(f(46, 5))\nprint(f(47, 5))\nprint(f(48, 5))\nprint(f(49, 5))\nprint(f(50, 5))\nprint(f(51, 5))"
    },
    {
      "rank": 4,
      "score": 10.0,
      "candidate": "def factorial(n):\n    if n <= 1:\n        return 1\n    else:\n        return n * factorial(n - 1)\n\n\nprint(factorial(10))"
    },
    {
      "rank": 5,
      "score": 10.0,
      "candidate": "def factorial(x):\n    factorial = 1\n    while factorial <= x:\n        factorial = factorial * x\n    return factorial\n\nprint(factorial(4))"
    },
    {
      "rank": 6,
      "score": 10.0,
      "candidate": "def factorial(x):\n    i = 1\n    while i<x:\n        print(i)\n        i += 1\n\nfactorial(5)"
    },
    {
      "rank": 7,
      "score": 10.0,
      "candidate": "def find_factorial(n):\n    factorial = 1\n    for i in range(1, n+1):\n        factorial = factorial * i\n    return factorial\n\nif __name__ == \"__main__\":\n    print(find_factorial(10))"
    },
    {
      "rank": 8,
      "score": 10.0,
      "candidate": "def factorial(x):\n    return x * factorial(x - 1)\n\nprint(factorial(3))"
    },
    {
      "rank": 9,
      "score": 10.0,
      "candidate": "def factorial(x):\n    if x == 1:\n        return 1\n    else:\n        return x * factorial(x - 1)\n\nprint(factorial(5))"
    },
    {
      "rank": 10,
      "score": 10.0,
      "candidate": "def factorial(x):\n    n = 1\n    while x > 1:\n        n *= x\n        x -= 1\n    return n\n\nprint(factorial(5))"
    },
    {
      "rank": 11,
      "score": 10.0,
      "candidate": "def factorial(n):\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    else:\n        return n * factorial(n-1)\n\ndef test_factorial():\n    assert factorial(5) == 120\n    assert factorial(7) == 2160\n    assert factorial(10) == 4321\n    assert factorial(15) == 8836\n    assert factorial(20) == 5040\n    assert factorial(25) == 7376\n    assert factorial(30) == 14572\n    assert factorial(35) == 4846\n    assert factorial(40) == 3554\n    assert factorial(45) == 2868\n    assert factorial(50) == 2406\n    assert factorial(55) == 8282\n    assert factorial(60) == 6867\n    assert factorial(65) == 3765\n    assert factorial(70) == 6892\n    assert factorial(75) == 5321\n    assert factorial(80) == 2160\n    assert factorial(85) == 7376\n    assert factorial(90) == 14572\n    assert factorial(95) == 4846\n    assert factorial(100) == 3554\n    assert factorial(110) == 2868\n    assert factorial(120) == 2406\n    assert factorial(130) == 8282\n    assert factorial(130) == 6867\n    assert factorial(140) == 6892\n    assert factorial(140) == 5321\n    assert factorial(150) == 8282\n    assert factorial(150) == 5321\n    assert factorial(150) == 7376\n    assert factorial(150) == 6892\n    assert factorial(150) == 7376\n    assert factorial(150) == 7376\n\nif __name__ == '__main__':\n    test_factorial()"
    },
    {
      "rank": 12,
      "score": 10.0,
      "candidate": "def factorial(x):\n    factorial = 1\n    while factorial <= x:\n        factorial = factorial * x\n    return factorial\n\nprint(factorial(5))"
    },
    {
      "rank": 13,
      "score": 10.0,
      "candidate": "def factorial(n):\n    if n == 1:\n        return 1\n    return n * factorial(n - 1)\n\n\ndef factorial_divisible(x):\n    for i in range(1, x + 1):\n        if factorial(i) % x == 0:\n            return i\n    return -1\n\n\nprint(factorial_divisible(5))"
    },
    {
      "rank": 14,
      "score": 10.0,
      "candidate": "def factorial(x):\n\tnum = 1\n\twhile x!= 0:\n\t\tnum *= x\n\t\tx -= 1\n\treturn num\n\n\nprint(factorial(5))\nprint(factorial(7))\nprint(factorial(13))"
    },
    {
      "rank": 15,
      "score": 9.99568088808386,
      "candidate": "def factorial(x):\n    if x == 0:\n        return 1\n    else:\n        return x*factorial(x-1)\n\n\nprint(factorial(0))\nprint(factorial(1))\nprint(factorial(2))\nprint(factorial(3))\nprint(factorial(4))\nprint(factorial(5))\nprint(factorial(6))\nprint(factorial(7))\nprint(factorial(8))\nprint(factorial(9))\nprint(factorial(10))"
    },
    {
      "rank": 16,
      "score": 9.976956761094293,
      "candidate": "def factorial(x):\n    if x == 0:\n        return 1\n    else:\n        return x * factorial(x-1)\n\n\nif __name__ == '__main__':\n    print(factorial(5))"
    },
    {
      "rank": 17,
      "score": 9.95575542362522,
      "candidate": "def factorial(x):\n    factorial = 1\n    for i in range(1, x + 1):\n        factorial *= i\n    return factorial\n\n\nif __name__ == \"__main__\":\n    x = int(input(\"Enter a number to find its factorial: \"))\n    print(factorial(x))"
    },
    {
      "rank": 18,
      "score": 9.904317647850922,
      "candidate": "def factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n*factorial(n-1)\n\ndef divisible(x):\n    for i in range(1, 101):\n        if factorial(i)%x==0:\n            print(i)\n            return True\n\nif __name__ == \"__main__\":\n    divisible(5)"
    },
    {
      "rank": 19,
      "score": 9.901052039727611,
      "candidate": "def fib(x):\n    a = 1\n    b = 1\n    while a < x:\n        yield a\n        a, b = b, a + b\n\n\nfor i in fib(100):\n    if i % 5 == 0 and i % 3 == 0:\n        print(i)\n        break"
    },
    {
      "rank": 20,
      "score": 9.851706338300012,
      "candidate": "def factorial(x):\n    # code here\n    return 1\n\nprint(factorial(5))"
    },
    {
      "rank": 21,
      "score": 9.850966478857519,
      "candidate": "def factorial(x):\n    if x == 0:\n        return 1\n    else:\n        return x * factorial(x-1)\n\n\nprint(factorial(5))"
    },
    {
      "rank": 22,
      "score": 9.849768196500815,
      "candidate": "def factorial(n):\n    if n == 0:\n        return 1\n    if n == 1:\n        return 1\n    return n * factorial(n - 1)\n\n\nprint(factorial(5))"
    },
    {
      "rank": 23,
      "score": 9.830476734794548,
      "candidate": "def factorial(x):\n    factorial_num = 1\n    for i in range(1,x+1):\n        factorial_num *= i\n    return factorial_num\n\nprint(factorial(5))"
    },
    {
      "rank": 24,
      "score": 9.820067990642888,
      "candidate": "def fact(n):\n    if n == 1:\n        return 1\n    else:\n        return n * fact(n - 1)\n\n\ndef factorial(n):\n    return fact(n)\n\n\nprint(factorial(5))"
    },
    {
      "rank": 25,
      "score": 9.79356167852636,
      "candidate": "def factorial(x):\n    a = 1\n    for i in range(2, x + 1):\n        a = a * i\n    return a\n\n\nprint(factorial(5))"
    },
    {
      "rank": 26,
      "score": 9.775343009959247,
      "candidate": "def fact(x):\n    if x <= 1:\n        return 1\n    else:\n        return x * fact(x - 1)\n\n\nprint(fact(5))"
    },
    {
      "rank": 27,
      "score": 9.709432295833212,
      "candidate": "def factorial(x):\n    return 1 if x == 1 else x * factorial(x - 1)\n\n\ndef main():\n    x = int(input(\"Enter the number: \"))\n    print(factorial(x))\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 28,
      "score": 9.675894041492985,
      "candidate": "def fact(x):\n    return x * fact(x-1) if x > 0 else 1\n\n\nif __name__ == \"__main__\":\n    print(fact(5))"
    },
    {
      "rank": 29,
      "score": 9.544080580411693,
      "candidate": "def factorial(x):\n    if x == 0:\n        return 1\n    elif x == 1:\n        return x\n    else:\n        return x * factorial(x-1)\n\n\nprint(factorial(3))\nprint(factorial(7))\nprint(factorial(11))\nprint(factorial(13))\nprint(factorial(17))\nprint(factorial(19))\nprint(factorial(23))\nprint(factorial(29))\nprint(factorial(33))\nprint(factorial(37))"
    },
    {
      "rank": 30,
      "score": 9.448026293595829,
      "candidate": "def f(n, x):\n    if n == 0:\n        return 1\n    else:\n        return n * f(n - 1, x)\n\n\ndef main():\n    print(f(10, 3))\n    print(f(10, 5))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 31,
      "score": 9.435827150283925,
      "candidate": "def factorial(x):\n    i = 1\n    while i < x:\n        print(i)\n        i = i*i\n    print(i)\n\nfactorial(5)"
    },
    {
      "rank": 32,
      "score": 9.370583536698913,
      "candidate": "def factorial(n):\n    if n == 1:\n        return 1\n    else:\n        return n * factorial(n - 1)\n\n\nx = int(input(\"Enter the number you want the factorial of: \"))\nprint(factorial(x))"
    },
    {
      "rank": 33,
      "score": 9.363977947327715,
      "candidate": "def factorial(n):\n    if n == 1 or n == 2:\n        return 1\n    return n * factorial(n - 1)\n\n\ndef main():\n    print(factorial(10))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 34,
      "score": 9.205959372648458,
      "candidate": "def factorial(x):\n\tfactorial = 1\n\tfor i in range(1,x+1):\n\t\tfactorial = factorial * i\n\treturn factorial\n\nprint(factorial(4))"
    },
    {
      "rank": 35,
      "score": 9.183391466815202,
      "candidate": "def factorial(x):\n    if x == 1:\n        return 1\n    elif x == 2:\n        return 2\n    else:\n        return x * factorial(x-1)\n\n\nprint(factorial(5))"
    },
    {
      "rank": 36,
      "score": 9.177268828905222,
      "candidate": "def factorial(x):\n    if x==1:\n        return 1\n    else:\n        return x*factorial(x-1)\n\ndef main():\n    x=int(input(\"Enter a number to find the factorial of\"))\n    print(\"The factorial of {} is {}\".format(x,factorial(x)))\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 37,
      "score": 8.973005557553902,
      "candidate": "def factorial(x):\n    n = 1\n    while n < x:\n        n += 1\n    return n\n\n\nif __name__ == '__main__':\n    n = int(input(\"Enter a number: \"))\n    print(\"Factorial of {} is {}\".format(n, factorial(n)))"
    },
    {
      "rank": 38,
      "score": 8.95994420569242,
      "candidate": "def factorial(n):\n    if n==1:\n        return 1\n    else:\n        return n*factorial(n-1)\n\nprint(factorial(5))"
    },
    {
      "rank": 39,
      "score": 8.946210893390457,
      "candidate": "def factorial(n):\n    if n <= 1:\n        return 1\n    else:\n        return n * factorial(n-1)\n\n\nx = int(input('Enter the number of factors: '))\nprint('Factorial of {} is {}'.format(x, factorial(x)))"
    },
    {
      "rank": 40,
      "score": 8.932217008005624,
      "candidate": "def factorial(x):\n    if x < 1:\n        return 0\n    if x == 1:\n        return 1\n    return x * factorial(x - 1)\n\n\nprint(factorial(5))"
    },
    {
      "rank": 41,
      "score": 8.910084504002544,
      "candidate": "def factorial(n):\n    fact = 1\n    for i in range(2,n+1):\n        fact = fact*i\n    return fact\n\ndef factorial_no_mod(n):\n    fact = 1\n    for i in range(2,n+1):\n        fact = fact*i\n        if (fact%n==0):\n            return fact\n\n\nprint(factorial(5))\nprint(factorial_no_mod(5))"
    },
    {
      "rank": 42,
      "score": 8.85571690049604,
      "candidate": "def fact(n, x):\n    if n == 1 or n == 0:\n        return 1\n    else:\n        return n * fact(n-1, x)\n\ndef main():\n    x = int(input(\"enter a number: \"))\n    print(fact(5, x))\n\nmain()"
    },
    {
      "rank": 43,
      "score": 8.855395696632057,
      "candidate": "def factorial(x):\n    fact = 1\n    for i in range(1, x+1):\n        fact *= i\n    return fact\n\n\nprint(factorial(5))"
    },
    {
      "rank": 44,
      "score": 8.8281618090209,
      "candidate": "def factorial(n):\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        return n * factorial(n - 1)\n\n\ndef main():\n    print(factorial(5))\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 45,
      "score": 8.81367773444215,
      "candidate": "def factorial(x):\n    n = 1\n    while(x > 1):\n        n *= x\n        x -= 1\n    return n\n\nprint(factorial(5))\n\n\"\"\"\nTime Complexity: O(log n)\nSpace Complexity: O(1)\n\"\"\""
    },
    {
      "rank": 46,
      "score": 8.715724466237427,
      "candidate": "def factorial(x):\n    return 1 if x==1 else x*factorial(x-1)\n\nprint(factorial(5))\nprint(factorial(20))\nprint(factorial(100))"
    },
    {
      "rank": 47,
      "score": 8.692801520950061,
      "candidate": "def find_factorial(num):\n    factorial = 1\n    for i in range(1,num+1):\n        factorial = factorial*i\n    return factorial\n\nprint(find_factorial(10))"
    },
    {
      "rank": 48,
      "score": 8.632293453617281,
      "candidate": "def factorial(x):\n    for i in range(1,x+1):\n        if x%i == 0:\n            return i\n\nprint(factorial(5))"
    },
    {
      "rank": 49,
      "score": 8.625142247198651,
      "candidate": "def factorial(x):\n    if x <= 1:\n        return 1\n    return x * factorial(x - 1)\n\ndef main():\n    print(factorial(5))\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 50,
      "score": 8.623000730200317,
      "candidate": "def factorial(n):\n    fact=1\n    for i in range(1,n+1):\n        fact=fact*i\n    return fact\n\ndef factorial_prime(n):\n    fact=1\n    for i in range(1,n+1):\n        if(n%i==0):\n            fact=fact*i\n    return fact\n\n\nprint(factorial(5))\nprint(factorial_prime(5))"
    },
    {
      "rank": 51,
      "score": 8.610076160146226,
      "candidate": "def factorial(x):\n    if x < 0:\n        raise ValueError(\"Factorial is not possible for negative numbers\")\n    if x == 0:\n        return 1\n    else:\n        return x * factorial(x - 1)\n\n\nif __name__ == \"__main__\":\n    print(factorial(5))"
    },
    {
      "rank": 52,
      "score": 8.608819999274287,
      "candidate": "def factorial(x):\n    if x == 0:\n        return 1\n    return x * factorial(x-1)\n\n\nprint(factorial(5))"
    },
    {
      "rank": 53,
      "score": 8.60156811074208,
      "candidate": "def factorial(n):\n    if n == 1:\n        return 1\n    else:\n        return n * factorial(n - 1)\n\n\nif __name__ == '__main__':\n    print(factorial(5))"
    },
    {
      "rank": 54,
      "score": 8.565425580227462,
      "candidate": "def find_factorial(x):\n    \"\"\"\n    x: int\n    Returns: int\n    \"\"\"\n    a = 1\n    for i in range(1, x + 1):\n        if i % x == 0:\n            a = i\n    return a\n\n\nif __name__ == \"__main__\":\n    x = 3\n    print(find_factorial(x))"
    },
    {
      "rank": 55,
      "score": 8.548876241946822,
      "candidate": "def factorial(x):\n    i = 1\n    while i <= x:\n        print(i, end=' ')\n        i *= x\n    print()\n\ndef main():\n    factorial(5)\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 56,
      "score": 8.542875062379007,
      "candidate": "def factorial(n):\n    if n <= 0:\n        return 0\n    else:\n        return n * factorial(n - 1)\n\n\nprint(factorial(5))"
    },
    {
      "rank": 57,
      "score": 8.53012858503943,
      "candidate": "def factorial(x):\n    # your code here\n    if x < 0:\n        return 0\n    elif x == 0:\n        return 1\n    else:\n        return x * factorial(x-1)\n\nprint(factorial(10))"
    },
    {
      "rank": 58,
      "score": 8.499905739299377,
      "candidate": "def factorial(n):\n    if n == 1:\n        return 1\n    else:\n        return n * factorial(n-1)\n\ndef main():\n    print(\"Factorial of the number\", factorial(int(input(\"Enter the number : \"))))\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 59,
      "score": 8.492983219118464,
      "candidate": "import math\n\ndef factorial(n):\n    f = 1\n    for i in range(1, n + 1):\n        f = f * i\n    return f\n\ndef factorial_prime(n):\n    f = 1\n    for i in range(2, n + 1):\n        if n % i == 0:\n            f = f * i\n    return f\n\ndef prime_factors(n):\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    return prime_factors(n - 1) + prime_factors(n - 2)\n\ndef prime_factors_prime(n):\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n == 3:\n        return 3\n    if n == 4:\n        return 4\n    if n == 5:\n        return 5\n    if n == 6:\n        return 6\n    if n == 7:\n        return 7\n    if n == 8:\n        return 8\n    if n == 9:\n        return 9\n    if n == 10:\n        return 10\n    if n == 11:\n        return 11\n    if n == 12:\n        return 12\n    if n == 13:\n        return 13\n    if n == 14:\n        return 14\n    if n == 15:\n        return 15\n    if n == 16:\n        return 16\n    if n == 17:\n        return 17\n    if n == 18:\n        return 18\n    if n == 19:\n        return 19\n    if n == 20:\n        return 20\n    if n == 21:\n        return 21\n    if n == 22:\n        return 22\n    if n == 23:\n        return 23\n    if n == 24:\n        return 24\n    if n == 25:\n        return 25\n    if n == 26:\n        return 26\n    if n == 27:\n        return 27\n    if n == 28:\n        return 28\n    if n == 29:\n        return 29\n    if n == 30:\n        return 30\n    if n == 31:\n        return 31\n    if n == 32:\n        return 32\n    if n == 33:"
    },
    {
      "rank": 60,
      "score": 8.490324832712195,
      "candidate": "def factorial(n):\n    if n == 1 or n == 0:\n        return 1\n    return n * factorial(n-1)\n\nprint(factorial(5))"
    },
    {
      "rank": 61,
      "score": 8.48796797856353,
      "candidate": "import math\n\n\ndef factorial(x):\n    return math.factorial(x)\n\n\nprint(factorial(10))"
    },
    {
      "rank": 62,
      "score": 8.478208546788407,
      "candidate": "def factorial(x):\n    i = 1\n    while i <= x:\n        print(i, end=\" \")\n        i += 1\n\n\nx = int(input(\"Enter a number: \"))\nfactorial(x)"
    },
    {
      "rank": 63,
      "score": 8.426531424889468,
      "candidate": "def factorial(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        return n * factorial(n-1)\n\n\ndef factorial_v2(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        return n * factorial_v2(n-1)\n\n\nif __name__ == \"__main__\":\n    print(factorial(5))\n    print(factorial_v2(5))"
    },
    {
      "rank": 64,
      "score": 8.386620303250325,
      "candidate": "def factorial(x):\n    \"\"\"\n    :type x: int\n    :rtype: int\n    \"\"\"\n    if x == 1:\n        return 1\n    else:\n        return x * factorial(x - 1)\n\n\nif __name__ == '__main__':\n    print(factorial(5))"
    },
    {
      "rank": 65,
      "score": 8.351614956112536,
      "candidate": "def find_factorial(x):\n    factorial = 1\n    for i in range(1, x + 1):\n        factorial = factorial * i\n    return factorial\n\n\nif __name__ == \"__main__\":\n    print(find_factorial(5))"
    },
    {
      "rank": 66,
      "score": 8.334608500525688,
      "candidate": "def factorial(x):\n    if x <= 0:\n        return 0\n    else:\n        return x * factorial(x-1)\n\nprint(factorial(5))"
    },
    {
      "rank": 67,
      "score": 8.331556294201176,
      "candidate": "def factorial(n):\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        return n * factorial(n - 1)\n\n\ndef factorial_1(n):\n    # return factorial(n)\n    return n * factorial(n - 1)\n\n\ndef main():\n    n = int(input(\"Enter the number: \"))\n    print(factorial(n))\n    print(factorial_1(n))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 68,
      "score": 8.327375965969855,
      "candidate": "def factorial_divisible_by_x(x):\n    return 1 if x == 1 else x * factorial_divisible_by_x(x - 1)\n\n\ndef main():\n    print(factorial_divisible_by_x(5))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 69,
      "score": 8.327367757082776,
      "candidate": "def factorial(x):\n    a = 1\n    for i in range(1, x+1):\n        a = a * i\n    return a\n\nprint(factorial(5))"
    },
    {
      "rank": 70,
      "score": 8.298597569547805,
      "candidate": "def factorial(n):\n    f = 1\n    for i in range(1, n + 1):\n        f *= i\n    return f\n\nprint(factorial(7))"
    },
    {
      "rank": 71,
      "score": 8.2938925966498,
      "candidate": "def factorial(n):\n    if n==1:\n        return 1\n    return n*factorial(n-1)\n\nprint(factorial(3))"
    },
    {
      "rank": 72,
      "score": 8.280613371145561,
      "candidate": "def factorial(x):\n    # Define the function\n    def factorial_(n):\n        if n == 0:\n            return 1\n        return n * factorial_(n-1)\n\n    # Call the function\n    return factorial_(x)\n\n\nprint(factorial(5))"
    },
    {
      "rank": 73,
      "score": 8.251903304236286,
      "candidate": "def fact(x):\n    if x == 0:\n        return 1\n    else:\n        return x * fact(x - 1)\n\n\ndef main():\n    print(fact(5))\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 74,
      "score": 8.248390367878367,
      "candidate": "def factorial(x):\n    if x == 1:\n        return 1\n    else:\n        return x * factorial(x - 1)\n\n\ndef main():\n    print(factorial(5))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 75,
      "score": 8.214125058964552,
      "candidate": "def factorial(n):\n    if n == 0:\n        return 1\n    return n * factorial(n - 1)\n\n\ndef factorial_of_x(x):\n    if x == 0:\n        return 1\n    return factorial(x) / factorial(x - 1)\n\n\nprint(factorial(5))\nprint(factorial_of_x(5))"
    },
    {
      "rank": 76,
      "score": 8.2048573255218,
      "candidate": "def factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n*factorial(n-1)\n\nprint(factorial(0))\nprint(factorial(1))\nprint(factorial(2))\nprint(factorial(3))\nprint(factorial(4))\nprint(factorial(5))\nprint(factorial(6))\nprint(factorial(7))\nprint(factorial(8))\nprint(factorial(9))\nprint(factorial(10))"
    },
    {
      "rank": 77,
      "score": 8.193565922652176,
      "candidate": "def fact_div(x):\n    a = 1\n    for i in range(2,x+1):\n        a = a * i\n    return a\n\nprint(fact_div(5))\nprint(fact_div(10))"
    },
    {
      "rank": 78,
      "score": 8.185309335307622,
      "candidate": "def factorial(x):\n    f = 1\n    while f < x:\n        f *= x\n    return f\n\nprint(factorial(5))\nprint(factorial(8))\nprint(factorial(13))\nprint(factorial(19))\nprint(factorial(31))"
    },
    {
      "rank": 79,
      "score": 8.172253082181854,
      "candidate": "def factorial(x):\n    factorial = 1\n    for i in range(1, x + 1):\n        factorial = factorial * i\n    return factorial\n\nprint(factorial(5))"
    },
    {
      "rank": 80,
      "score": 8.144125099485041,
      "candidate": "def factorial(n):\n    return 1 if n <= 1 else n * factorial(n - 1)\n\n\nprint(factorial(3))\n\n\ndef factorial2(n):\n    if n <= 1:\n        return 1\n    else:\n        return n * factorial2(n - 1)\n\n\nprint(factorial2(3))"
    },
    {
      "rank": 81,
      "score": 8.143591138329747,
      "candidate": "def factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n - 1)\n\nprint(factorial(5))"
    },
    {
      "rank": 82,
      "score": 8.105983444291466,
      "candidate": "def factorial(x):\n    if x == 0:\n        return 1\n    return x * factorial(x - 1)\n\nif __name__ == \"__main__\":\n    print(factorial(3))"
    },
    {
      "rank": 83,
      "score": 8.08452234024709,
      "candidate": "import math\n\n\ndef find_divisible_factorial(x):\n    for i in range(1, x + 1):\n        if math.factorial(i) % x == 0:\n            return i\n\n\nif __name__ == '__main__':\n    print(find_divisible_factorial(10))"
    },
    {
      "rank": 84,
      "score": 8.040197642997851,
      "candidate": "def factorial(n):\n    if n == 1:\n        return 1\n    if n == 2:\n        return 1\n    if n == 3:\n        return 2\n    return n * factorial(n-1)\n\nif __name__ == \"__main__\":\n    n = int(input())\n    print(factorial(n))"
    },
    {
      "rank": 85,
      "score": 8.024835682833125,
      "candidate": "def factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n-1)\n\n\nif __name__ == \"__main__\":\n    print(factorial(5))"
    },
    {
      "rank": 86,
      "score": 7.915588979966494,
      "candidate": "def factorial(x):\n    if x == 1:\n        return 1\n    else:\n        return x * factorial(x - 1)\n\n\nif __name__ == \"__main__\":\n    print(factorial(3))"
    },
    {
      "rank": 87,
      "score": 7.8912769574414305,
      "candidate": "def factorial(x):\n    return 1 if x == 0 else x * factorial(x-1)\n\nprint(factorial(3))"
    },
    {
      "rank": 88,
      "score": 7.868947655733293,
      "candidate": "import math\n\ndef factorial(x):\n    f = 1\n    for i in range(1, x + 1):\n        f *= i\n    return f\n\ndef factorial_no_recursion(x):\n    f = 1\n    for i in range(1, x + 1):\n        f *= i\n        if f % x == 0:\n            return i\n\ndef main():\n    x = int(input(\"Enter a number: \"))\n    print(f\"The factorial of {x} is {factorial(x)}\")\n    print(f\"The factorial of {x} is {factorial_no_recursion(x)}\")\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 89,
      "score": 7.84634113240411,
      "candidate": "def factorial(x):\n    fact = 1\n    for i in range(1,x+1):\n        fact *= i\n    return fact\n\nprint(factorial(5))"
    },
    {
      "rank": 90,
      "score": 7.834022619458933,
      "candidate": "def factorial(x):\n    \"\"\"\n    :type x: int\n    :rtype: int\n    \"\"\"\n    if x == 0:\n        return 1\n    if x == 1:\n        return 1\n\n    f = 1\n    while f < x:\n        f *= x\n    return f\n\n\nif __name__ == \"__main__\":\n    print(factorial(5))"
    },
    {
      "rank": 91,
      "score": 7.780351419995229,
      "candidate": "def find_factorial(n):\n    if n == 1 or n == 2:\n        return 1\n    elif n == 3:\n        return 6\n    elif n % 2 == 0:\n        return find_factorial(n // 2) * find_factorial(n // 2)\n    else:\n        return find_factorial(n // 2) * find_factorial(3 * n // 2)\n\n\nif __name__ == \"__main__\":\n    print(find_factorial(5))"
    },
    {
      "rank": 92,
      "score": 7.738292593776799,
      "candidate": "def factorial(n):\n    if n == 1:\n        return 1\n    return n * factorial(n-1)\n\n\ndef find_divisible_factorial(x):\n    for i in range(1, x+1):\n        if factorial(i) % x == 0:\n            return i\n    return -1\n\n\nprint(find_divisible_factorial(5))"
    },
    {
      "rank": 93,
      "score": 7.712686970378385,
      "candidate": "import math\n\n\ndef factorial(x):\n    return math.factorial(x)\n\n\nprint(factorial(5))"
    },
    {
      "rank": 94,
      "score": 7.705183449260731,
      "candidate": "def factorial(x):\n\tf = 1\n\tfor i in range(1, x+1):\n\t\tf *= i\n\treturn f\n\nprint(factorial(5))"
    },
    {
      "rank": 95,
      "score": 7.4878043221155455,
      "candidate": "def factorial(x):\n    \"\"\"\n    :param x:\n    :return:\n    \"\"\"\n    if x == 0:\n        return 1\n    elif x == 1:\n        return x\n    else:\n        return x * factorial(x - 1)\n\n\nprint(factorial(5))"
    },
    {
      "rank": 96,
      "score": 7.464609382504557,
      "candidate": "def fib(n):\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    else:\n        return fib(n-1) + fib(n-2)\n\n\ndef main():\n    print(fib(5))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 97,
      "score": 7.134571892399572,
      "candidate": "def factorial(x):\n    n = 0\n    while x > 1:\n        n = n * x\n        x = x - 1\n    return n\n\nprint(factorial(3))\nprint(factorial(5))\nprint(factorial(7))"
    },
    {
      "rank": 98,
      "score": 3.0,
      "candidate": "def factorial(n):\n    \"\"\"\n    Find the first natural number whose factorial is divisible by x.\n    :param n:\n    :return:\n    \"\"\"\n    if n < 0:\n        return -1\n    elif n == 0:\n        return 1\n    else:\n        return n * factorial(n - 1)\n\n\nif __name__ == \"__main__\":\n    print(factorial(5))"
    },
    {
      "rank": 99,
      "score": 3.0,
      "candidate": "def factorial(n):\n    factorial = 1\n    for i in range(1,n+1):\n        factorial = factorial*i\n    return factorial\n\nprint(factorial(5))\nprint(factorial(10))\nprint(factorial(20))\nprint(factorial(30))\nprint(factorial(40))\nprint(factorial(50))\nprint(factorial(60))\nprint(factorial(70))\nprint(factorial(80))\nprint(factorial(90))\nprint(factorial(100))\nprint(factorial(110))\nprint(factorial(120))\nprint(factorial(130))\nprint(factorial(140))\nprint(factorial(150))\nprint(factorial(160))\nprint(factorial(160))\nprint(factorial(170))\nprint(factorial(180))\nprint(factorial(180))\nprint(factorial(200))\nprint(factorial(210))\nprint(factorial(220))\nprint(factorial(230))\nprint(factorial(240))\nprint(factorial(260))\nprint(factorial(280))\nprint(factorial(300))\nprint(factorial(320))\nprint(factorial(320))\nprint(factorial(310))\nprint(factorial(320))\nprint(factorial(330))\nprint(factorial(320))\nprint(factorial(360))\nprint(factorial(380))\nprint(factorial(400))\nprint(factorial(410))\nprint(factorial(420))\nprint(factorial(430))\nprint(factorial(440))\nprint(factorial(450))\nprint(factorial(460))\nprint(factorial(470))\nprint(factorial(480))\nprint(factorial(490))\nprint(factorial(500))\nprint(factorial(550))\nprint(factorial(510))\nprint(factorial(520))\nprint(factorial(530))\nprint(factorial(540))\nprint(factorial(550))\nprint(factorial(560))\nprint(factor"
    },
    {
      "rank": 100,
      "score": 3.0,
      "candidate": "def factorial(n):\n    if n == 1:\n        return 1\n    else:\n        return n * factorial(n-1)\n\ndef prime_factors(n):\n    if n < 2:\n        return []\n    prime_factors = []\n    for i in range(2, n):\n        if n % i == 0:\n            prime_factors.append(i)\n    return prime_factors\n\n\n\ndef prime_factors_recursive(n):\n    if n < 2:\n        return []\n    if n == 1:\n        return [1]\n    prime_factors = []\n    for i in range(2, n):\n        if n % i == 0:\n            prime_factors.append(i)\n    return prime_factors + prime_factors_recursive(n-1)\n\n\n\ndef factorial_recursive(n):\n    if n < 2:\n        return 1\n    if n == 1:\n        return 1\n    return n * factorial_recursive(n-1)\n\n\n\ndef prime_factors_iterative(n):\n    if n < 2:\n        return []\n    prime_factors = []\n    for i in range(2, n):\n        if n % i == 0:\n            prime_factors.append(i)\n    return prime_factors\n\n\n\ndef prime_factors_iterative_recursive(n):\n    if n < 2:\n        return []\n    if n == 1:\n        return [1]\n    prime_factors = []\n    for i in range(2, n):\n        if n % i == 0:\n            prime_factors.append(i)\n    return prime_factors + prime_factors_iterative_recursive(n-1)\n\n\n\ndef factorial_iterative(n):\n    if n < 2:\n        return 1\n    if n == 1:\n        return 1\n    return n * factorial_iterative(n-1)\n\n\n\ndef factorial_iterative_recursive(n):\n    if n < 2:\n        return 1\n    if n == 1:\n        return 1\n    return n * factorial_iterative_recursive(n-1)\n\n\n\nif"
    }
  ]
}