{
  "timestamp": "2025-09-14T15:55:05.677006",
  "method": "improved_llm_judge",
  "judge_model": "codellama/CodeLlama-7b-Python-hf",
  "target_model": "codet5-770m",
  "dataset": "mbpp",
  "problem_number": 471,
  "total_candidates": 100,
  "results": [
    {
      "rank": 1,
      "score": 10.0,
      "candidate": "import re\n\n\ndef find_sequences(s):\n    s = s.lower()\n    return re.findall(r\"[A-Z]\", s)\n\n\nif __name__ == \"__main__\":\n    print(find_sequences(\"abc\"))"
    },
    {
      "rank": 2,
      "score": 10.0,
      "candidate": "import re\n\ndef find_sequences(string):\n    regex = r\"([A-Z][a-z]+)([A-Z])\"\n    res = re.findall(regex, string)\n    return res\n\n\nprint(find_sequences(\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"))\nprint(find_sequences(\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"))\nprint(find_sequences(\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"))"
    },
    {
      "rank": 3,
      "score": 10.0,
      "candidate": "import re\n\ndef find_lower_case_letters(string):\n    return re.findall(r'[A-Z]', string)\n\nprint(find_lower_case_letters(\"Abcde\"))"
    },
    {
      "rank": 4,
      "score": 10.0,
      "candidate": "import re\n\ndef find_sequences(str):\n\tmatch = re.findall(\"[A-Z]\", str)\n\treturn match\n\n\nif __name__ == \"__main__\":\n\tprint(find_sequences(\"abc\"))"
    },
    {
      "rank": 5,
      "score": 10.0,
      "candidate": "import re\n\ndef find_sequences(str):\n    # Write your code here\n    res = re.findall(r\"[A-Z]\",str)\n    return res\n\nprint(find_sequences(\"abcdefghijklmnopqrstuvwxyz\"))"
    },
    {
      "rank": 6,
      "score": 9.370583536698913,
      "candidate": "from typing import List\n\n\ndef find_sequences(string: str) -> List[str]:\n    \"\"\"\n    Time Complexity: O(n^2)\n    Space Complexity: O(n)\n    \"\"\"\n    result = []\n    for i in range(len(string)):\n        if string[i].isupper():\n            result.append(string[i])\n            if string[i+1].islower():\n                result.append(string[i+1])\n    return result\n\n\nif __name__ == '__main__':\n    assert find_sequences(\"AaBbCc\") == [\"A\", \"b\", \"c\", \"d\"]\n    assert find_sequences(\"ABC\") == []\n    assert find_sequences(\"AB\") == []\n    assert find_sequences(\"ab\") == []"
    },
    {
      "rank": 7,
      "score": 9.21346272767743,
      "candidate": "from re import search\n\n\ndef find_sequences(string: str) -> list[str]:\n    return [\n        word\n        for word in search(r'[A-Z][^a-z]', string)\n        if search(r'[a-z][^a-z]', word) is not None\n    ]\n\n\nif __name__ == '__main__':\n    assert find_sequences(\"Hello\") == [\"Hello\"]\n    assert find_sequences(\"Hey\") == [\"Hey\"]\n    assert find_sequences(\"Hey\") == [\"Hey\"]\n    assert find_sequences(\"Hey\") == []"
    },
    {
      "rank": 8,
      "score": 9.183391466815202,
      "candidate": "import re\n\ndef search_sequence(str):\n    pattern = re.compile(r\"[A-Z]\")\n    return pattern.findall(str)\n\n\nif __name__ == '__main__':\n    str = input(\"Enter the string: \")\n    print(search_sequence(str))"
    },
    {
      "rank": 9,
      "score": 9.177268828905222,
      "candidate": "# This solution is based on https://github.com/russellmann/leetcode-python/blob/master/leetcode-python/leetcode-uppercase-lowercase-letters.py\n\nimport re\n\ndef uppercase_lowercase_letters(string):\n    pattern = re.compile(r'[A-Z]')\n    result = pattern.findall(string)\n    return result\n\n\nif __name__ == \"__main__\":\n    string = \"Bobby\"\n    print(uppercase_lowercase_letters(string))"
    },
    {
      "rank": 10,
      "score": 9.122564458729856,
      "candidate": "import re\n\n\ndef upper_case_letters(string):\n    upper_case_letters = re.findall('[A-Z][^A-Z]+', string)\n    return upper_case_letters\n\n\ndef lower_case_letters(string):\n    lower_case_letters = re.findall('[a-z][^a-z]+', string)\n    return lower_case_letters\n\n\nprint(upper_case_letters('Hello World'))\nprint(lower_case_letters('Hello World'))"
    },
    {
      "rank": 11,
      "score": 8.973005557553902,
      "candidate": "import re\n\n\ndef upper_case(str):\n    upper_case = re.findall(r'[A-Z]', str)\n    return upper_case\n\n\ndef lower_case(str):\n    lower_case = re.findall(r'[a-z]', str)\n    return lower_case\n\n\nif __name__ == '__main__':\n    print(upper_case(\"Aaaaaaaaa\"))\n    print(lower_case(\"aA\"))"
    },
    {
      "rank": 12,
      "score": 8.932217008005624,
      "candidate": "import re\n\n\ndef check_upper(string):\n    return bool(re.search(r'[A-Z]', string))\n\n\ndef check_lower(string):\n    return bool(re.search(r'[a-z]', string))\n\n\nif __name__ == \"__main__\":\n    assert check_upper(\"A\") is True\n    assert check_upper(\"ab\") is False\n    assert check_upper(\"abcd\") is False\n    assert check_upper(\"abcdabc\") is True\n    assert check_upper(\"abcdabc\") is False\n    assert check_upper(\"abcdabcabc\") is False\n    assert check_upper(\"abcdabcabcabcabc\") is True\n    assert check_upper(\"abcdabcabcabcabc\") is False\n    assert check_upper(\"abcdabcabcabc\") is False\n    assert check_upper(\"abcdabcabcabc\") is False\n    assert check_upper(\"abcdabcabcabcabc\") is False\n    assert check_upper(\"abcdabcabcabcabc\") is True"
    },
    {
      "rank": 13,
      "score": 8.92876693971089,
      "candidate": "import re\n\n\ndef find_uppercase(str):\n    return bool(re.search(r'[A-Z]', str))\n\n\nprint(find_uppercase('Hello World!'))\nprint(find_uppercase('hello world!'))\nprint(find_uppercase('How are you?'))\nprint(find_uppercase('How are you?'))\nprint(find_uppercase('How are you?'))"
    },
    {
      "rank": 14,
      "score": 8.910084504002544,
      "candidate": "import re\n\n\ndef find_sequences(string: str) -> list:\n    return [\n        m.group(0)\n        for m in re.finditer(r\"([A-Z])\", string)\n        if m.group(0) in string\n    ]\n\n\nassert find_sequences(\"ABCDEF\") == [\"A\", \"B\", \"C\", \"D\"]\nassert find_sequences(\"abc\") == [\"A\", \"B\", \"C\"]\nassert find_sequences(\"ABC\") == [\"A\", \"B\", \"C\", \"D\"]\nassert find_sequences(\"abcd\") == [\"A\", \"B\", \"C\", \"D\"]"
    },
    {
      "rank": 15,
      "score": 8.85571690049604,
      "candidate": "import re\n\n\ndef find_sequences(str):\n    result = []\n    pattern = r'[A-Z]'\n    for letter in re.finditer(pattern, str):\n        result.append(letter.group())\n\n    return result\n\n\nprint(find_sequences('abcdef'))"
    },
    {
      "rank": 16,
      "score": 8.855395696632057,
      "candidate": "import re\n\ndef upper_lower(str):\n    pattern = re.compile(r'[A-Z][a-z]+')\n    result = pattern.findall(str)\n    return result\n\nif __name__ == '__main__':\n    str = \"Hello World\"\n    result = upper_lower(str)\n    print(result)"
    },
    {
      "rank": 17,
      "score": 8.850707355641543,
      "candidate": "import re\n\n\ndef find_sequence(s):\n    upper_case = re.findall('[A-Z]', s)\n    lower_case = re.findall('[a-z]', s)\n    return upper_case + lower_case"
    },
    {
      "rank": 18,
      "score": 8.81367773444215,
      "candidate": "def find_upper_lower_letters(string):\n    from re import match\n    return list(filter(match, string))\n\n\nif __name__ == \"__main__\":\n    print(find_upper_lower_letters(\"hello world\"))\n    print(find_upper_lower_letters(\"HELLO WORLD\"))"
    },
    {
      "rank": 19,
      "score": 8.76828871349479,
      "candidate": "import re\n\n\ndef find_sequences(s):\n    \"\"\"\n    :type s: str\n    :rtype: list[str]\n    \"\"\"\n    return re.findall(r'[A-Z]', s)\n\n\nif __name__ == '__main__':\n    assert find_sequences(\"ABCD\") == [\"A\", \"B\", \"C\"]\n    assert find_sequences(\"A-Z\") == [\"A\", \"Z\"]\n    assert find_sequences(\"abcd\") == [\"A\", \"B\", \"C\"]\n    assert find_sequences(\"abcdabcdabcd\") == [\"A\", \"B\", \"C\", \"D\", \"E\", \"F\"]"
    },
    {
      "rank": 20,
      "score": 8.750282588864879,
      "candidate": "import re\n\n\ndef search_uppercase_letters(string):\n    pattern = re.compile(r\"[A-Z]+\")\n    result = pattern.findall(string)\n    return result\n\n\nif __name__ == \"__main__\":\n    print(search_uppercase_letters(\"abc\"))"
    },
    {
      "rank": 21,
      "score": 8.692801520950061,
      "candidate": "def find_sequences(s):\n    # write your code here\n    import re\n\n    return re.findall(r'[A-Z]', s)\n\n\nprint(find_sequences(\"Grey Hat\"))\nprint(find_sequences(\"A\"))\nprint(find_sequences(\"A\"))\nprint(find_sequences(\"A\"))\nprint(find_sequences(\"\"))"
    },
    {
      "rank": 22,
      "score": 8.632293453617281,
      "candidate": "import re\n\ndef find_sequences(string):\n    # Your code here\n    return [x.group() for x in re.finditer(r'[A-Z][a-z]+', string)]\n\n# Test\nprint(find_sequences(\"AliceBob\"))\nprint(find_sequences(\"bob\"))\nprint(find_sequences(\"abc\"))\nprint(find_sequences(\"AliceBobC\"))\nprint(find_sequences(\"abbc\"))\nprint(find_sequences(\"AliceBobCabc\"))\nprint(find_sequences(\"abcd\"))\nprint(find_sequences(\"abcabc\"))\nprint(find_sequences(\"AliceBobCabc\"))"
    },
    {
      "rank": 23,
      "score": 8.625142247198651,
      "candidate": "import re\n\ndef upper_case_letters_following_lowercase(str):\n    pattern = r\"([A-Z])([a-z])\"\n    return re.findall(pattern, str)\n\nif __name__ == \"__main__\":\n    str = \"Alice Bob Cath\"\n    print(upper_case_letters_following_lowercase(str))"
    },
    {
      "rank": 24,
      "score": 8.616253589228675,
      "candidate": "from typing import List\n\n\ndef find_sequences(string: str) -> List[str]:\n    return [\n        x\n        for x in re.findall(r\"[A-Z][a-z]+\", string)\n        if x in re.findall(r\"[a-z][a-z]+\", string)\n    ]\n\n\nif __name__ == \"__main__\":\n    assert find_sequences(\"aab\") == [\"a\", \"b\", \"a\"]"
    },
    {
      "rank": 25,
      "score": 8.610076160146226,
      "candidate": "import re\n\ndef find_sequences(string):\n    pattern = r\"[A-Z][a-z]+[A-Z][a-z]+\"\n    return list(re.findall(pattern, string))\n\nprint(find_sequences(\"AbcdefG\"))"
    },
    {
      "rank": 26,
      "score": 8.608819999274287,
      "candidate": "import re\n\ndef find_sequences(string):\n    return re.findall(r'[A-Z][a-z]+[A-Z][a-z]+', string)\n\nprint(find_sequences(\"AbcDeFghi\"))"
    },
    {
      "rank": 27,
      "score": 8.606486429141842,
      "candidate": "from typing import List\n\n\ndef find_sequences(s: str) -> List[str]:\n    # TODO: Write your code here\n    result = []\n    for i in range(len(s)):\n        if s[i].isupper():\n            if s[i-1].islower():\n                result.append(s[i:i+2])\n    return result"
    },
    {
      "rank": 28,
      "score": 8.60156811074208,
      "candidate": "import re\n\n\ndef find_sequences(string):\n    # Your code here\n    pattern = r\"[A-Z]{1,2}$\"\n    return re.findall(pattern, string)\n\n\nif __name__ == \"__main__\":\n    print(find_sequences(\"ABC\"))"
    },
    {
      "rank": 29,
      "score": 8.548876241946822,
      "candidate": "from typing import List\n\n\ndef find_sequences(string: str) -> List[str]:\n    \"\"\"\n    :type string: str\n    :rtype: List[str]\n    \"\"\"\n    from re import match\n\n    return [match(r\"[A-Z]{2}\", char).group() for char in string]\n\n\nif __name__ == \"__main__\":\n    assert find_sequences(\"abc\") == [\"abc\", \"abcd\", \"abcd\", \"abcd\", \"abcd\"]\n    assert find_sequences(\"abcabc\") == [\"abcabc\", \"abcabc\", \"abcd\", \"abcd\", \"abcd\"]\n    assert find_sequences(\"abcd\") == [\"abcd\"]\n    assert find_sequences(\"abcabc\") == [\"abcabc\", \"abcd\", \"abcd\"]\n    assert find_sequences(\"abcabcabc\") == [\"abcabcabc\"]\n    assert find_sequences(\"abcabcabcabc\") == [\"abcabcabc\"]"
    },
    {
      "rank": 30,
      "score": 8.542875062379007,
      "candidate": "import re\n\n\ndef find_uppercase_letters(str):\n    return re.findall(r\"[A-Z]\", str)\n\n\ndef find_lowercase_letters(str):\n    return re.findall(r\"[a-z]\", str)\n\n\nif __name__ == \"__main__\":\n    assert find_uppercase_letters(\"Hello world\") == [\"h\", \"e\", \"l\", \"l\", \"o\", \"w\", \"o\"]\n    assert find_uppercase_letters(\"\") == []\n    assert find_uppercase_letters(\"Hello\") == [\"h\", \"e\", \"l\", \"l\", \"o\", \"w\", \"o\"]\n    assert find_uppercase_letters(\"Hello World\") == [\"h\", \"e\", \"l\", \"l\", \"o\", \"w\", \"o\"]\n    assert find_uppercase_letters(\"Hello World\") == []\n    assert find_uppercase_letters(\"Hello World\") == [\"h\", \"e\", \"l\", \"l\", \"o\", \"w\"]"
    },
    {
      "rank": 31,
      "score": 8.492983219118464,
      "candidate": "from collections import defaultdict\nimport re\n\ndef find_sequences(s):\n    \"\"\"\n    :type s: str\n    :rtype: list[str]\n    \"\"\"\n\n    upper_case_letters = {\n        letter: [letter for letter in s if letter.isupper()]\n        for letter in set(s)\n    }\n\n    lower_case_letters = {\n        letter: [letter for letter in s if letter.islower()]\n        for letter in set(s)\n    }\n\n    upper_case_letters_seq = set()\n    lower_case_letters_seq = set()\n\n    for upper_case_letter in upper_case_letters.values():\n        for lower_case_letter in lower_case_letters.values():\n            upper_case_letters_seq.add(upper_case_letter + lower_case_letter)\n\n    return list(upper_case_letters_seq)\n\n\nif __name__ == '__main__':\n    print(find_sequences('Hello'))\n    print(find_sequences('HELLO'))\n    print(find_sequences('HELLO WORLD'))"
    },
    {
      "rank": 32,
      "score": 8.490324832712195,
      "candidate": "import re\n\ndef find_upper_lower(string):\n    return bool(re.search(r\"[A-Z]\", string))\n\nprint(find_upper_lower(\"abc\"))\nprint(find_upper_lower(\"Aa\"))\nprint(find_upper_lower(\"AB\"))\nprint(find_upper_lower(\"aAB\"))"
    },
    {
      "rank": 33,
      "score": 8.48796797856353,
      "candidate": "def find_sequences(s):\n    return [i.start() for i in re.finditer(\"[A-Z]\", s)]\n\n\nif __name__ == \"__main__\":\n    assert find_sequences(\"ABC\") == [0, 2]\n    assert find_sequences(\"ABC\") == [0, 2, 5]\n    assert find_sequences(\"ABC\") == [0, 2, 5, 8]\n    assert find_sequences(\"ABC\") == [0, 2, 5, 8, 10]\n    assert find_sequences(\"ABC\") == [0, 2, 5, 8, 10, 12]"
    },
    {
      "rank": 34,
      "score": 8.408439383654278,
      "candidate": "from typing import List\n\n\ndef find_sequences(string: str) -> List[str]:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(n)\n    \"\"\"\n    from re import search\n\n    result = []\n\n    for i in string:\n        if search(\"[A-Z]\", i):\n            result.append(i)\n\n    return result\n\n\nif __name__ == \"__main__\":\n    assert find_sequences(\"abc\") == [\"a\", \"b\", \"c\"]\n    assert find_sequences(\"abcd\") == [\"a\", \"b\", \"c\"]\n    assert find_sequences(\"abcdabcd\") == [\"a\", \"b\", \"c\"]\n    assert find_sequences(\"abcdabcdab\") == [\"a\", \"b\", \"c\"]\n    assert find_sequences(\"\") == []"
    },
    {
      "rank": 35,
      "score": 8.386620303250325,
      "candidate": "import re\n\ndef uppercase_lowercase(string):\n    return re.findall(r'[A-Z][a-z]+', string)\n\nprint(uppercase_lowercase('Python'))\nprint(uppercase_lowercase('Python3'))"
    },
    {
      "rank": 36,
      "score": 8.375312293858853,
      "candidate": "import re\n\n\ndef find_sequences(string):\n    regex_string = r\"([A-Z][a-z]+[A-Z])\"\n    regex_result = re.findall(regex_string, string)\n    return regex_result\n\n\nprint(find_sequences(\"the quick brown fox jumps over the lazy dog\"))"
    },
    {
      "rank": 37,
      "score": 8.334608500525688,
      "candidate": "import re\n\ndef sequence(str):\n    return re.findall(r'[A-Z][^A-Z]*[a-z]', str)\n\n\nprint(sequence(\"aabccde\"))\nprint(sequence(\"Abccde\"))\nprint(sequence(\"AABCCDE\"))\nprint(sequence(\"AABCCDEA\"))\nprint(sequence(\"abccde\"))\nprint(sequence(\"abccdeA\"))"
    },
    {
      "rank": 38,
      "score": 8.331556294201176,
      "candidate": "import re\n\ndef find_sequences(str):\n    return re.findall(r\"[A-Z]\", str)\n\n\nprint(find_sequences(\"How are you?\"))\nprint(find_sequences(\"How are you?\"))\nprint(find_sequences(\"How are you?\"))\nprint(find_sequences(\"Hello World!\"))\nprint(find_sequences(\"Hello World!\"))\nprint(find_sequences(\"Hello World!\"))\nprint(find_sequences(\"Hello World!\"))"
    },
    {
      "rank": 39,
      "score": 8.327375965969855,
      "candidate": "import re\n\n\ndef upper_case_letters_with_lower_case(s):\n    return re.findall('[A-Z]', s)\n\n\nif __name__ == \"__main__\":\n    s = \"hello world\"\n    print(upper_case_letters_with_lower_case(s))"
    },
    {
      "rank": 40,
      "score": 8.327367757082776,
      "candidate": "import re\n\n\ndef find_upper_case_letters(string):\n    \"\"\"\n    :type string: str\n    :rtype: list[str]\n    \"\"\"\n    upper_case_letters = re.findall(r'[A-Z]', string)\n    return upper_case_letters\n\n\ndef find_lower_case_letters(string):\n    \"\"\"\n    :type string: str\n    :rtype: list[str]\n    \"\"\"\n    lower_case_letters = re.findall(r'[a-z]', string)\n    return lower_case_letters\n\n\nif __name__ == '__main__':\n    string = 'AaBbCcDdEeFfGgHhIiJjKkLlMmNnOoPpQqRrSsTtUuVvWwXxYyZz'\n    print(find_upper_case_letters(string))\n    print(find_lower_case_letters(string))"
    },
    {
      "rank": 41,
      "score": 8.2938925966498,
      "candidate": "import re\n\ndef find_sequences(str):\n    return re.findall('[A-Z][a-z]+', str)\n\nif __name__ == '__main__':\n    str = 'abcdefghijklmnopqrstuvwxyz'\n    print(find_sequences(str))"
    },
    {
      "rank": 42,
      "score": 8.289838256518838,
      "candidate": "from typing import List\nfrom regex import findall\n\n\ndef upper_case_lower_case_sequences(string: str) -> List[str]:\n    return findall(r'[A-Z]', string)\n\n\nif __name__ == \"__main__\":\n    assert upper_case_lower_case_sequences('A') == ['A']\n    assert upper_case_lower_case_sequences('abc') == ['A', 'B', 'C', 'D', 'E', 'F']\n    assert upper_case_lower_case_sequences('abc') == ['A', 'B', 'C', 'D', 'E', 'F', 'G']\n    assert upper_case_lower_case_sequences('abc') == ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H']"
    },
    {
      "rank": 43,
      "score": 8.280613371145561,
      "candidate": "import re\n\n\ndef find_sequences(string):\n    pattern = r\"[A-Z][a-z]+\"\n    return list(re.findall(pattern, string))\n\n\nif __name__ == \"__main__\":\n    assert find_sequences(\"AliceBob\") == [\n        \"Alice\",\n        \"Bob\",\n        \"BobA\",\n        \"AliceBob\",\n    ]"
    },
    {
      "rank": 44,
      "score": 8.251903304236286,
      "candidate": "import re\n\ndef sequence(s):\n    return len(re.findall(\"[A-Z][a-z]\", s))\n\nprint(sequence(\"hello world\"))\nprint(sequence(\"hello world\"))"
    },
    {
      "rank": 45,
      "score": 8.248390367878367,
      "candidate": "import re\n\ndef upper_lower_sequences(str):\n\t\"\"\"\n\t:type str: str\n\t:rtype: list[str]\n\t\"\"\"\n\tpattern = r'[A-Z]'\n\tresults = re.findall(pattern, str)\n\treturn results\n\n\nif __name__ == \"__main__\":\n\tprint(upper_lower_sequences(\"abc\"))\n\tprint(upper_lower_sequences(\"abcc\"))"
    },
    {
      "rank": 46,
      "score": 8.214125058964552,
      "candidate": "import re\n\ndef find_sequences(string):\n    pattern = re.compile(r\"[A-Z]{1}\")\n    return pattern.findall(string)"
    },
    {
      "rank": 47,
      "score": 8.212735598038213,
      "candidate": "import re\n\n\ndef get_sequences(text):\n    # TODO: Implement\n    return [\n        match.group() for match in re.finditer(r'[A-Z]', text)\n    ]\n\n\nif __name__ == '__main__':\n    assert get_sequences(\"abc\") == [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\"]\n    assert get_sequences(\"Hello, World!\") == [\"h\", \"l\", \"w\", \"r\", \"t\", \"y\", \"u\", \"i\", \"o\", \"p\", \"a\", \"n\", \"m\"]\n    assert get_sequences(\"abcdefghij\") == [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\"]"
    },
    {
      "rank": 48,
      "score": 8.211579567659316,
      "candidate": "import re\n\ndef match_upper(string):\n    return bool(re.match('[A-Z][^A-Z]', string))\n\ndef match_lower(string):\n    return bool(re.match('[a-z][^a-z]', string))\n\ndef match_all(string):\n    return bool(re.match('^[A-Z][^A-Z]', string))\n\nif __name__ == '__main__':\n    print(match_upper(\"Ahoy! It's a good day!\"))\n    print(match_lower(\"Ahoy! It's a good day!\"))\n    print(match_all(\"Ahoy! It's a good day!\"))\n    print(match_upper(\"Ahoy! It's a good day!\"))\n    print(match_lower(\"Ahoy! It's a good day!\"))\n    print(match_all(\"Ahoy! It's a good day!\"))"
    },
    {
      "rank": 49,
      "score": 8.209707251476969,
      "candidate": "import re\n\n\ndef find_sequences(s):\n    pattern = re.compile(r\"([A-Z][a-z])\")\n    return pattern.findall(s)\n\n\nif __name__ == \"__main__\":\n    print(find_sequences(\"abc\"))"
    },
    {
      "rank": 50,
      "score": 8.2048573255218,
      "candidate": "import re\n\ndef get_lower_upper(str):\n    return re.findall(r'[A-Z]', str)\n\n\nif __name__ == '__main__':\n    print(get_lower_upper(\"Hello world\"))"
    },
    {
      "rank": 51,
      "score": 8.193565922652176,
      "candidate": "import re\n\n\ndef upper_case_letters(string):\n    pattern = re.compile(r\"[A-Z]{2}\")\n    result = pattern.findall(string)\n    return result\n\n\nprint(upper_case_letters(\"Hello\"))\nprint(upper_case_letters(\"Hello world\"))\nprint(upper_case_letters(\"How are you?\"))\nprint(upper_case_letters(\"Hello world\"))\nprint(upper_case_letters(\"Hello world!\"))\nprint(upper_case_letters(\"Hello world!\"))\nprint(upper_case_letters(\"hello world!\"))"
    },
    {
      "rank": 52,
      "score": 8.185309335307622,
      "candidate": "import re\n\n\ndef get_sequences(string):\n    return re.findall(r\"[A-Z]{1}[a-z]\", string)\n\n\nif __name__ == \"__main__\":\n    print(get_sequences(\"Hello World\"))"
    },
    {
      "rank": 53,
      "score": 8.179564342560925,
      "candidate": "import re\n\ndef upper_lower(s):\n    \"\"\"\n    :type s: str\n    :rtype: list[str]\n    \"\"\"\n    return re.findall(r'\\b[A-Z]\\b', s)\n\n\n\nif __name__ == '__main__':\n    print(upper_lower('abcd'))"
    },
    {
      "rank": 54,
      "score": 8.172253082181854,
      "candidate": "import re\n\ndef find_sequences(input_str):\n    # your code here\n    pattern = re.compile(r'[A-Z]')\n    result = pattern.findall(input_str)\n    return result\n\nprint(find_sequences(\"Hello\"))\nprint(find_sequences(\"Hello world\"))\nprint(find_sequences(\"Hello world!\"))\nprint(find_sequences(\"Hello World!\"))"
    },
    {
      "rank": 55,
      "score": 8.163300679823958,
      "candidate": "from re import match\n\ndef find_sequences(string):\n    \"\"\"\n    :type string: str\n    :rtype: List[str]\n    \"\"\"\n    result = []\n    for match in re.finditer('[A-Z]', string):\n        result.append(match.group())\n    return result\n\n\nif __name__ == \"__main__\":\n    assert find_sequences(\"ABCD\") == [\"A\", \"B\", \"C\"]\n    assert find_sequences(\"ABCD\") == [\"A\", \"B\"]\n    assert find_sequences(\"ABCD\") == []\n    assert find_sequences(\"\") == []"
    },
    {
      "rank": 56,
      "score": 8.144125099485041,
      "candidate": "from regex import search\n\ndef find_sequences(s):\n    # Your code here\n    # return [s[i:i+2] for i in range(len(s)-1)]\n    return [s[i:i+1] for i in range(len(s)) if search(r'[A-Z]', s[i])]"
    },
    {
      "rank": 57,
      "score": 8.143591138329747,
      "candidate": "import re\n\n\ndef find_upper_lower(string):\n    return re.findall(r\"[A-Z]\", string)\n\n\nif __name__ == \"__main__\":\n    string = \"Hello World\"\n    print(find_upper_lower(string))"
    },
    {
      "rank": 58,
      "score": 8.121884567141883,
      "candidate": "import re\n\n\ndef get_lower_upper_letters(str):\n    pattern = re.compile(r'[A-Z][^A-Z]+')\n    return pattern.findall(str)\n\n\nprint(get_lower_upper_letters(\"I am a test\"))"
    },
    {
      "rank": 59,
      "score": 8.08452234024709,
      "candidate": "import re\n\ndef find_sequences(str):\n    return re.findall(r\"[A-Z][^A-Z]*\",str)\n\nif __name__ == \"__main__\":\n    print(find_sequences(\"aAa\"))"
    },
    {
      "rank": 60,
      "score": 8.040197642997851,
      "candidate": "import re\n\ndef find_sequences(string):\n    pattern = r'[A-Z][a-z]+[A-Z]'\n    result = re.findall(pattern, string)\n    return result\n\nprint(find_sequences(\"ABC\"))"
    },
    {
      "rank": 61,
      "score": 8.024835682833125,
      "candidate": "from re import search\n\n\ndef find_sequences(str):\n    return [m.group() for m in search('[A-Z][^a-z]+', str)]\n\n\nif __name__ == \"__main__\":\n    assert find_sequences(\"Hello world\") == [\"h\", \"l\", \"l\", \"o\", \"w\"]\n    assert find_sequences(\"aaaaa\") == [\"a\", \"a\", \"a\", \"a\", \"a\"]\n    assert find_sequences(\"\") == []\n    assert find_sequences(\"hello world\") == [\"hello\", \"world\"]"
    },
    {
      "rank": 62,
      "score": 7.990432406683839,
      "candidate": "import re\n\ndef find_sequences(string):\n    return re.findall(r'[A-Z]{2}[a-z]{2}', string)\n\n\nprint(find_sequences(\"Hello world\"))\nprint(find_sequences(\"Hello World\"))\nprint(find_sequences(\"Hello World\"))"
    },
    {
      "rank": 63,
      "score": 7.938028884277233,
      "candidate": "from re import search\n\n\ndef upper_case(s):\n    return search(r'[A-Z][a-z]', s) is not None\n\n\nprint(upper_case('abc'))\nprint(upper_case('ABC'))\nprint(upper_case('ABCDEF'))\nprint(upper_case('A'))\nprint(upper_case('ABCDEFG'))"
    },
    {
      "rank": 64,
      "score": 7.915588979966494,
      "candidate": "import re\n\n\ndef find_sequence(str):\n    # Write your code here\n    pattern = r'[A-Z]+[a-z]+[A-Z]'\n    result = re.findall(pattern, str)\n    return result\n\n\nif __name__ == '__main__':\n    print(find_sequence('Aabcccddd'))"
    },
    {
      "rank": 65,
      "score": 7.8912769574414305,
      "candidate": "from typing import List\n\n\ndef find_sequences(input_str: str) -> List[str]:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(n)\n    \"\"\"\n    result = []\n    for i in range(len(input_str)):\n        if input_str[i].isupper() and input_str[i+1].islower():\n            result.append(input_str[i:i+2])\n    return result\n\n\nif __name__ == '__main__':\n    input_str = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n    print(find_sequences(input_str))"
    },
    {
      "rank": 66,
      "score": 7.84634113240411,
      "candidate": "import re\n\ndef find_sequences(s):\n    \"\"\"\n    :type s: str\n    :rtype: list[str]\n    \"\"\"\n    # Your code here\n    result = []\n    for letter in re.findall('[A-Z][a-z]+', s):\n        result.append(letter)\n    return result\n\n\ns = 'AABBccDDEEF'\nprint(find_sequences(s))"
    },
    {
      "rank": 67,
      "score": 7.780351419995229,
      "candidate": "import re\n\ndef find_sequences(s):\n    return re.findall(r'[A-Z][^a-z]+', s)\n\nprint(find_sequences(\"Hello World\"))\nprint(find_sequences(\"abc\"))\nprint(find_sequences(\"ABC\"))\nprint(find_sequences(\"ABC\"))\nprint(find_sequences(\"ABC\"))\nprint(find_sequences(\"ABC\"))\nprint(find_sequences(\"ABC\"))\nprint(find_sequences(\"ABC\"))"
    },
    {
      "rank": 68,
      "score": 7.738292593776799,
      "candidate": "import re\n\n\ndef find_upper_lower_letters(s):\n    return re.findall(r'[A-Z]', s)\n\n\nprint(find_upper_lower_letters('ABCD'))\nprint(find_upper_lower_letters('ABC'))\nprint(find_upper_lower_letters('ABCDE'))\nprint(find_upper_lower_letters('abcd'))\nprint(find_upper_lower_letters('ABCDEabcd'))"
    },
    {
      "rank": 69,
      "score": 7.7320703513377165,
      "candidate": "import re\n\n\ndef upper_case_letters(string):\n    return re.findall(r'[A-Z]', string)\n\n\nif __name__ == \"__main__\":\n    print(upper_case_letters('ABC'))\n    print(upper_case_letters('aBc'))\n    print(upper_case_letters('aBc'))\n    print(upper_case_letters('aBcD'))"
    },
    {
      "rank": 70,
      "score": 7.705183449260731,
      "candidate": "import re\n\n\ndef find_sequences(s):\n    return [i for i in re.finditer(\"[A-Z]\", s)]\n\n\nprint(find_sequences(\"ABC\"))\nprint(find_sequences(\"abcd\"))\nprint(find_sequences(\"AbC\"))\nprint(find_sequences(\"ABC\"))\nprint(find_sequences(\"AbC\"))\nprint(find_sequences(\"AB\"))\nprint(find_sequences(\"AB\"))\nprint(find_sequences(\"AB\"))\nprint(find_sequences(\"AB\"))\nprint(find_sequences(\"AB\"))\nprint(find_sequences(\"AB\"))\nprint(find_sequences(\"AB\"))\nprint(find_sequences(\"AB\"))"
    },
    {
      "rank": 71,
      "score": 7.5819855281879285,
      "candidate": "#import re\nimport os\n\ndef check_sequences(string):\n    #print(string)\n    pattern = re.compile(r'^[A-Z]{1}.*$')\n    result = pattern.findall(string)\n    return result\n\n\ndef check_sequences2(string):\n    pattern = re.compile(r'^[A-Z]{1}[a-z].*$')\n    result = pattern.findall(string)\n    return result\n\n\ndef check_sequences3(string):\n    pattern = re.compile(r'^[A-Z]{1}[A-Z].*$')\n    result = pattern.findall(string)\n    return result\n\n\nif __name__ == \"__main__\":\n    string = \"Ahoya\"\n    print(check_sequences(string))\n    print(check_sequences2(string))\n    print(check_sequences3(string))"
    },
    {
      "rank": 72,
      "score": 7.562924366763077,
      "candidate": "import re\n\ndef find_sequences(s):\n    # Your code here\n    return re.findall(r'[A-Z]', s)\n\nif __name__ == \"__main__\":\n    s = \"Hello World!\"\n    print(find_sequences(s))"
    },
    {
      "rank": 73,
      "score": 7.4878043221155455,
      "candidate": "import re\n\n\ndef search_substring(string):\n    substring = re.findall('[A-Z]', string)\n    return substring\n\n\nprint(search_substring('abc'))\nprint(search_substring('AaBbCc'))\nprint(search_substring('AaBbCcD'))\nprint(search_substring('AaBbCcDd'))\nprint(search_substring('abcabc'))"
    },
    {
      "rank": 74,
      "score": 7.464609382504557,
      "candidate": "from typing import List\n\n\ndef find_lowercase_uppercase(string: str) -> List[str]:\n    return list(filter(lambda x: x.isupper(), string))\n\n\nif __name__ == \"__main__\":\n    assert find_lowercase_uppercase(\"hello\") == [\"h\", \"e\", \"l\"]\n    assert find_lowercase_uppercase(\"hello world\") == [\"h\", \"o\", \"w\"]\n    assert find_lowercase_uppercase(\"Hello World\") == [\"l\", \"o\", \"w\"]\n    assert find_lowercase_uppercase(\"hello world\") == [\"h\", \"o\", \"w\"]"
    },
    {
      "rank": 75,
      "score": 7.4506599871439985,
      "candidate": "import re\n\ndef find_sequences(str):\n    return re.findall(r'[A-Z][^A-Z]*', str)\n\nprint(find_sequences(\"Hello world\"))\nprint(find_sequences(\"Hello world\"))"
    },
    {
      "rank": 76,
      "score": 7.134571892399572,
      "candidate": "from typing import List\nimport re\n\n\ndef find_upper_lower_case_letters(str_: str) -> List[str]:\n    return re.findall(r'[A-Z]', str_)\n\n\nif __name__ == \"__main__\":\n    assert find_upper_lower_case_letters(\"aBc\") == [\"a\", \"b\"]\n    assert find_upper_lower_case_letters(\"aBc\") == [\"a\", \"b\"]\n    assert find_upper_lower_case_letters(\"aBc\") == [\"a\", \"b\"]\n    assert find_upper_lower_case_letters(\"abc\") == []\n    assert find_upper_lower_case_letters(\"abc\") == [\"a\", \"b\"]\n    assert find_upper_lower_case_letters(\"abc\") == [\"a\", \"b\"]\n    assert find_upper_lower_case_letters(\"abc\") == [\"a\", \"b\"]\n    assert find_upper_lower_case_letters(\"abc\") == [\"a\", \"b\"]"
    },
    {
      "rank": 77,
      "score": 3.379011075721774,
      "candidate": "import re\n\n\ndef check_up(string):\n    # O(n^2)\n    return bool(re.match(r'^[A-Z]{2}$', string))\n\n\ndef check_lower(string):\n    # O(n^2)\n    return bool(re.match(r'^[a-z]{2}$', string))\n\n\ndef check_all(string):\n    # O(n^2)\n    return bool(re.match(r'^[A-Z]{2}|[a-z]{2}$', string))\n\n\ndef check_all_lower(string):\n    # O(n^2)\n    return bool(re.match(r'^[A-Z]{2}|[a-z]{2}$'))\n\n\ndef check_all_upper(string):\n    # O(n^2)\n    return bool(re.match(r'^[A-Z]{2}|[A-Z]{2}$'))\n\n\ndef check_all_lower_upper(string):\n    # O(n^2)\n    return bool(re.match(r'^[A-Z]{2}|[A-Z]{2}$'))\n\n\nif __name__ == '__main__':\n    string = 'Hello World!'\n    print(check_all(string))\n    print(check_all_lower(string))\n    print(check_all_upper(string))\n    print(check_all_lower_upper(string))"
    },
    {
      "rank": 78,
      "score": 3.3755144773953614,
      "candidate": "def upper_lower_case_sequences(string):\n    # Write your code here\n    import re\n    return [re.findall(r\"[A-Z][a-z]+\", string)]\n\n\nprint(upper_lower_case_sequences(\"Hello World\"))"
    },
    {
      "rank": 79,
      "score": 3.365527165537926,
      "candidate": "# O(n) time | O(1) space\nimport re\n\n\ndef upper_case_letters(string):\n    return bool(re.match(r'^[A-Z]{2}$', string))\n\n\ndef lower_case_letters(string):\n    return bool(re.match(r'^[a-z]{2}$', string))\n\n\nif __name__ == \"__main__\":\n    assert upper_case_letters(\"Alice\") == True\n    assert upper_case_letters(\"ABCD\") == False\n    assert upper_case_letters(\"abcd\") == True\n    assert upper_case_letters(\"Alice\") == False\n    assert upper_case_letters(\"Alice\") == True\n    assert upper_case_letters(\"Alice\") == True\n    assert upper_case_letters(\"Alice\") == False\n    assert upper_case_letters(\"Alice\") == True\n    assert upper_case_letters(\"Alice\") == False\n    assert upper_case_letters(\"Alice\") == True\n    assert upper_case_letters(\"Alice\") == False\n    assert upper_case_letters(\"Alice\") == True\n    assert upper_case_letters(\"Alice\") == False\n    assert upper_case_letters(\"Alice\") == True\n    assert upper_case_letters(\"Alice\") == False\n    assert upper_case_letters(\"Alice\") == True\n    assert upper_case_letters(\"Alice\") == False\n    assert upper_case_letters(\"Alice\") == True\n    assert upper_case_letters(\"Alice\") == False\n    assert upper_case_letters(\"Alice\") == True\n    assert upper_case_letters(\"Alice\") == False\n    assert upper_case_letters(\"Alice\") == True\n    assert upper_case_letters(\"Alice\") == False"
    },
    {
      "rank": 80,
      "score": 3.2474398853990283,
      "candidate": "import re\n\ndef find_upper_lower_letters(str):\n    return re.findall(r'[A-Z]', str)\n\nprint(find_upper_lower_letters(\"abcd\"))\nprint(find_upper_lower_letters(\"Abcd\"))\nprint(find_upper_lower_letters(\"abcd\"))\nprint(find_upper_lower_letters(\"Abcd\"))\nprint(find_upper_lower_letters(\"abcd\"))\nprint(find_upper_lower_letters(\"abc\"))\nprint(find_upper_lower_letters(\"ABC\"))\nprint(find_upper_lower_letters(\"abc\"))\nprint(find_upper_lower_letters(\"abc\"))\nprint(find_upper_lower_letters(\"abc\"))\nprint(find_upper_lower_letters(\"abc\"))\nprint(find_upper_lower_letters(\"abc\"))\nprint(find_upper_lower_letters(\"abc\"))\nprint(find_upper_lower_letters(\"abc\"))\nprint(find_upper_lower_letters(\"abc\"))\nprint(find_upper_lower_letters(\"abc\"))\nprint(find_upper_lower_letters(\"abc\"))\nprint(find_upper_lower_letters(\"abc\"))\nprint(find_upper_lower_letters(\"abc\"))\nprint(find_upper_lower_letters(\"abc\"))\nprint(find_upper_lower_letters(\"abc\"))\nprint(find_upper_lower_letters(\"abc\"))\nprint(find_upper_lower_letters(\"abc\"))\nprint(find_upper_lower_letters(\"abc\"))\nprint(find_upper_lower_letters(\"abc\"))\nprint(find_upper_lower_letters(\"abc\"))\nprint(find_upper_lower_letters(\"abc\"))\nprint(find_upper_lower_letters(\"abc\"))\nprint(find_upper_lower_letters(\"abc\"))\nprint(find_upper_lower_letters(\"abc\"))\nprint(find_upper_lower_letters(\"abc\"))\nprint(find_upper_lower_letters(\"abc\"))\nprint(find_upper_lower_letters(\"abc\"))\nprint(find_upper_lower"
    },
    {
      "rank": 81,
      "score": 3.2408478954940856,
      "candidate": "import re\n\ndef find_sequences(str):\n    # code here\n    result = re.findall('[A-Z][a-z]+',str)\n    return result\n\n\n\n\n\nprint(find_sequences('hello'))"
    },
    {
      "rank": 82,
      "score": 3.219696508248498,
      "candidate": "import re\n\n\ndef check_upper(str):\n    if re.search(r'[A-Z]', str):\n        return True\n    else:\n        return False\n\n\ndef check_lower(str):\n    if re.search(r'[a-z]', str):\n        return True\n    else:\n        return False\n\n\ndef check_case(str):\n    if re.search(r'[A-Z]', str):\n        return True\n    else:\n        return False\n\n\ndef check_all(str):\n    if check_upper(str) and check_lower(str) and check_case(str):\n        return True\n    else:\n        return False\n\n\nif __name__ == \"__main__\":\n    str1 = \"abcdefghijklmnopqrstuvwxyz\"\n    str2 = \"abcdefghijklmnopqrstuvwxyz\"\n    str3 = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n    str4 = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n    str5 = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n    str6 = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n    str7 = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n    str8 = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n\n    print(check_all(str1))\n    print(check_all(str2))\n    print(check_all(str3))\n    print(check_all(str4))\n    print(check_all(str5))\n    print(check_all(str6))\n    print(check_all(str7))\n    print(check_all(str8))"
    },
    {
      "rank": 83,
      "score": 3.184184334996698,
      "candidate": "import re\n\n\ndef find_sequences(string):\n    # Fill this in.\n    regex = r\"(?<=[a-z])[A-Z][a-z]\"\n    return [i for i in re.finditer(regex, string)]\n\n\nprint(find_sequences(\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"))\nprint(find_sequences(\"abc\"))\nprint(find_sequences(\"abc\"))\nprint(find_sequences(\"abc\"))\nprint(find_sequences(\"abc\"))\nprint(find_sequences(\"abc\"))"
    },
    {
      "rank": 84,
      "score": 3.1302144104606313,
      "candidate": "# Solution:\n\nimport re\n\ndef check_sequences(str):\n    # Fill this in.\n    return bool(re.search(r'[A-Z][a-z]*[A-Z]', str))\n\n\nif __name__ == \"__main__\":\n    print(check_sequences(\"abababab\"))"
    },
    {
      "rank": 85,
      "score": 3.1231841839472056,
      "candidate": "from re import search\n\n\ndef find_uppercase_letter_following_lowercase(string):\n    \"\"\"\n    :type string: str\n    :rtype: list[str]\n    \"\"\"\n    return search(r\"[A-Z]\", string).groups()"
    },
    {
      "rank": 86,
      "score": 3.0867926460114323,
      "candidate": "import re\n\n\ndef find_upper_case_lower_case_sequences(string):\n    return re.findall(r'[A-Z][a-z]+', string)\n\n\nprint(find_upper_case_lower_case_sequences(\"ABC\"))"
    },
    {
      "rank": 87,
      "score": 3.085707017162819,
      "candidate": "# Python program to find upper case letters followed by lower case letters\n# using regex\n\nimport re\n\ndef find_uppercase_letters(string):\n    # Find upper case letters followed by lower case letters\n    return re.findall(r\"[A-Z]\", string)\n\n# Driver program to test above function\nstring = \"Hello World\"\nprint(find_uppercase_letters(string))"
    },
    {
      "rank": 88,
      "score": 3.058070945175848,
      "candidate": "import re\n\n\ndef find_sequences(s):\n    # Write your code here\n    return re.findall(r\"[A-Z][a-z]+\", s)\n\n\nif __name__ == \"__main__\":\n    s = \"AbcDeEfGaHbIj\"\n    print(find_sequences(s))"
    },
    {
      "rank": 89,
      "score": 3.041128387485593,
      "candidate": "import re\n\n\ndef upper_case(str):\n    return bool(re.match('[A-Z]', str))\n\n\ndef lower_case(str):\n    return bool(re.match('[a-z]', str))\n\n\nif __name__ == '__main__':\n    assert upper_case('abc') is True\n    assert upper_case('abc') is False\n    assert upper_case('ABC') is False\n\n    assert lower_case('abc') is True\n    assert lower_case('abc') is False\n    assert lower_case('ABC') is False"
    },
    {
      "rank": 90,
      "score": 3.026621421530368,
      "candidate": "def find_upper_lower(string):\n    pass\n\n\nif __name__ == '__main__':\n    string = 'Hello World!'\n    print(find_upper_lower(string))"
    },
    {
      "rank": 91,
      "score": 3.0162067691251018,
      "candidate": "# Solution 1:\nimport re\n\n\ndef upper_case_letters(s):\n    return [m.group(0) for m in re.finditer(r'[A-Z]', s)]\n\n\ndef lower_case_letters(s):\n    return [m.group(0) for m in re.finditer(r'[a-z]', s)]\n\n\n# Solution 2:\ndef upper_case_letters(s):\n    return [m.group(0) for m in re.finditer(r'[A-Z]', s, re.IGNORECASE)]\n\n\ndef lower_case_letters(s):\n    return [m.group(0) for m in re.finditer(r'[a-z]', s, re.IGNORECASE)]\n\n\n# Solution 3:\ndef upper_case_letters(s):\n    return [m.group(0) for m in re.finditer(r'[A-Z]', s, re.UNICODE)]\n\n\ndef lower_case_letters(s):\n    return [m.group(0) for m in re.finditer(r'[a-z]', s, re.UNICODE)]\n\n\n# Solution 4:\ndef upper_case_letters(s):\n    return [m.group(0) for m in re.finditer(r'[A-Z]', s, re.IGNORECASE | re.UNICODE)]\n\n\ndef lower_case_letters(s):\n    return [m.group(0) for m in re.finditer(r'[a-z]', s, re.IGNORECASE | re.UNICODE)]\n\n\n# Solution 5:\ndef upper_case_letters(s):\n    return [m.group(0) for m in re.finditer(r'[A-Z]', s, re.UNICODE) if m.group(0)!= m.group(0).lower()]\n\n\ndef lower_case_letters(s):\n    return [m.group(0) for m in re.finditer(r'[a-z]', s, re.UNICODE) if m.group(0)!= m.group(0).upper()]\n\n\n#"
    },
    {
      "rank": 92,
      "score": 2.996760666062896,
      "candidate": "from typing import List\n\n\ndef match_upper_case_letter(string: str) -> List[str]:\n    result = []\n\n    for i in range(len(string)):\n        if string[i].isupper():\n            result.append(string[i])\n\n    return result\n\n\nif __name__ == \"__main__\":\n    string = \"abc\"\n    assert match_upper_case_letter(string) == [\"a\", \"b\", \"c\"]\n\n    string = \"A\"\n    assert match_upper_case_letter(string) == [\"a\"]\n\n    string = \"a\"\n    assert match_upper_case_letter(string) == [\"a\"]\n\n    string = \"ABC\"\n    assert match_upper_case_letter(string) == [\"A\", \"B\", \"C\"]\n\n    string = \"aBc\"\n    assert match_upper_case_letter(string) == [\"A\", \"B\", \"C\"]\n\n    string = \"aBc\"\n    assert match_upper_case_letter(string) == [\"A\", \"B\", \"C\"]\n\n    string = \"aBc\"\n    assert match_upper_case_letter(string) == [\"a\", \"b\", \"c\"]\n\n    string = \"aBc\"\n    assert match_upper_case_letter(string) == [\"a\", \"b\", \"c\"]\n\n    string = \"aBc\"\n    assert match_upper_case_letter(string) == [\"a\", \"b\", \"c\"]\n\n    string = \"abc\"\n    assert match_upper_case_letter(string) == [\"abc\"]\n\n    string = \"aBc\"\n    assert match_upper_case_letter(string) == [\"a\", \"b\", \"c\"]\n\n    string = \"aBc\"\n    assert match_upper_case_letter(string) == [\"a\", \"b\", \"c\"]\n\n    string = \"aBc\"\n    assert match_upper_case_letter(string) == [\"a\", \"b\", \"c\"]\n\n    string = \"aBc\"\n    assert match_upper_case_letter(string) == [\"a\", \"b"
    },
    {
      "rank": 93,
      "score": 2.9914017506136115,
      "candidate": "import re\n\n\ndef find_sequences(string):\n    return re.findall(r\"[a-z]\", string)\n\n\nif __name__ == \"__main__\":\n    assert find_sequences(\"Python\") == [\"py\"]\n    assert find_sequences(\"Python3\") == [\"py\", \"py3\"]\n    assert find_sequences(\"Python2\") == [\"py\", \"py2\", \"py3\"]\n    assert find_sequences(\"Python\") == [\"py\"]\n    assert find_sequences(\"Python3\") == [\"py\", \"py3\"]\n    assert find_sequences(\"Python2\") == [\"py\", \"py2\", \"py3\"]"
    },
    {
      "rank": 94,
      "score": 2.9554418456006837,
      "candidate": "import re\n\n\ndef search_uppercase_lowercase(s: str) -> bool:\n    return bool(re.search(r\"[A-Z]\", s))\n\n\nif __name__ == \"__main__\":\n    assert search_uppercase_lowercase(\"abc\") == True\n    assert search_uppercase_lowercase(\"abc\") == False\n    assert search_uppercase_lowercase(\"abcabc\") == True\n    assert search_uppercase_lowercase(\"abcdef\") == True"
    },
    {
      "rank": 95,
      "score": 2.929993500049614,
      "candidate": "from typing import List\n\n\nclass Solution:\n    def find_sequences(self, s: str) -> List[str]:\n        from re import search\n\n        res = []\n        for i in range(len(s)):\n            if s[i] == s[i - 1] and s[i] == s[i + 1]:\n                res.append(s[0:i])\n\n        return res\n\n\nif __name__ == '__main__':\n    assert Solution().find_sequences(\"hello\") == [\"hello\"]\n    assert Solution().find_sequences(\"helloworld\") == [\"helloworld\"]\n    assert Solution().find_sequences(\"hello\") == [\"helloworld\", \"hello\", \"helloworld\"]\n    assert Solution().find_sequences(\"\") == []\n    assert Solution().find_sequences(\"helloworld\") == [\"helloworld\"]\n    assert Solution().find_sequences(\"helloworld\") == [\"helloworld\", \"helloworld\"]"
    },
    {
      "rank": 96,
      "score": 2.928238235888192,
      "candidate": "from typing import List\n\n\ndef get_upper_case_sequences(string: str) -> List[str]:\n    return [s for s in string if s.isupper()]\n\n\ndef get_lower_case_sequences(string: str) -> List[str]:\n    return [s for s in string if s.islower()]\n\n\nif __name__ == \"__main__\":\n    assert get_upper_case_sequences(\"abcd\") == [\"abcd\", \"cD\"]\n    assert get_upper_case_sequences(\"abcd\") == [\"abcd\"]\n    assert get_upper_case_sequences(\"abcd\") == [\"abcd\"]\n    assert get_upper_case_sequences(\"abcd\") == [\"abcd\"]\n    assert get_upper_case_sequences(\"ABCD\") == [\"ABCD\"]\n    assert get_upper_case_sequences(\"abCD\") == [\"abCD\"]"
    },
    {
      "rank": 97,
      "score": 2.83753871992657,
      "candidate": "import re\n\ndef find_sequences(str):\n    return [re.findall(r\"[A-Z]\", str)]\n\n\n\n\n\nif __name__ == \"__main__\":\n    print(find_sequences(\"abcdef\"))"
    },
    {
      "rank": 98,
      "score": 2.8315072574694353,
      "candidate": "from typing import List\nimport re\n\n\ndef is_upper_case_first(string: str) -> bool:\n    return bool(re.search(r\"[A-Z]\", string))\n\n\ndef is_lower_case_first(string: str) -> bool:\n    return bool(re.search(r\"[a-z]\", string))\n\n\ndef is_upper_case_last(string: str) -> bool:\n    return bool(re.search(r\"[A-Z]\", string) and re.search(r\"[a-z]\", string[::-1]))\n\n\ndef is_lower_case_last(string: str) -> bool:\n    return bool(re.search(r\"[a-z]\", string) and re.search(r\"[a-z]\", string[::-1]) and re.search(r\"[a-z]\", string[::-1][::-1]))\n\n\ndef is_upper_case_last_in_second(string: str) -> bool:\n    return bool(re.search(r\"[A-Z]\", string) and re.search(r\"[a-z]\", string[::-1]) and re.search(r\"[A-Z]\", string[::-1][::-1]))\n\n\ndef is_lower_case_last_in_second(string: str) -> bool:\n    return bool(re.search(r\"[a-z]\", string) and re.search(r\"[a-z]\", string[::-1]) and re.search(r\"[a-z]\", string[::-1][::-1]))\n\n\ndef is_upper_case_last_in_third(string: str) -> bool:\n    return bool(re.search(r\"[A-Z]\", string) and re.search(r\"[a-z]\", string[::-1]))\n\n\ndef is_lower_case_last_in_third(string: str) -> bool:\n    return bool(re.search(r\"[a-z]\", string) and re.search(r\"[a-z]\", string["
    },
    {
      "rank": 99,
      "score": 2.7237615414186473,
      "candidate": "from re import search\n\n\ndef find_sequences(s):\n    \"\"\"\n    :type s: str\n    :rtype: List[str]\n    \"\"\"\n\n    return list(filter(lambda x: search(r\"[A-Z]\", x), s))\n\n\nif __name__ == \"__main__\":\n    assert find_sequences(\"abc\") == [\"abc\"]\n    assert find_sequences(\"abc\") == [\"abc\", \"ab\"]\n    assert find_sequences(\"abc\") == [\"abc\", \"a\"]\n    assert find_sequences(\"abc\") == [\"abc\"]"
    },
    {
      "rank": 100,
      "score": 2.7069975240069546,
      "candidate": "from typing import List\n\n\ndef get_upper_case_lower_case_sequences(string: str) -> List[str]:\n    \"\"\"\n    Time complexity: O(N^2)\n    Space complexity: O(N)\n    \"\"\"\n    return [x for x in re.findall(r'[A-Z]', string) if x.isupper()]\n\n\nif __name__ == '__main__':\n    string = \"aBcDeF\"\n    print(get_upper_case_lower_case_sequences(string))"
    }
  ]
}