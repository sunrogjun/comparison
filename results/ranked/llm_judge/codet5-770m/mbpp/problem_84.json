{
  "timestamp": "2025-09-14T13:05:07.461167",
  "method": "improved_llm_judge",
  "judge_model": "codellama/CodeLlama-7b-Python-hf",
  "target_model": "codet5-770m",
  "dataset": "mbpp",
  "problem_number": 84,
  "total_candidates": 100,
  "results": [
    {
      "rank": 1,
      "score": 10.0,
      "candidate": "def min_len(sublist):\n    if len(sublist) == 0:\n        return 0\n    min_len = sublist[0]\n    for i in range(1, len(sublist)):\n        if sublist[i] < min_len:\n            min_len = sublist[i]\n    return min_len\n\nprint(min_len([2, 1, 3, 4, 5]))"
    },
    {
      "rank": 2,
      "score": 10.0,
      "candidate": "def min_length(sublist):\n    return min(sublist)\n\nprint(min_length([1, 2, 3, 4, 5, 6]))\nprint(min_length([1, 2, 3, 4, 5, 6, 7, 8]))\nprint(min_length([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\nprint(min_length([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]))"
    },
    {
      "rank": 3,
      "score": 10.0,
      "candidate": "def minimum_length(l):\n    min_len = float('inf')\n    for i in l:\n        if len(i) < min_len:\n            min_len = len(i)\n    return min_len\n\n\nprint(minimum_length([1, 2, 3, 4, 5, 6, 7, 8]))\nprint(minimum_length([1, 2, 3, 4, 5, 6, 7, 8, 9]))\nprint(minimum_length([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\nprint(minimum_length([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\nprint(minimum_length([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 131, 132, 133, 134, 135, 136, 137, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 151, 152, 153, 154, 155, 157, 158, 156, 159, 160,"
    },
    {
      "rank": 4,
      "score": 10.0,
      "candidate": "def min_sub_list(a):\n    if len(a) < 2:\n        return len(a)\n    else:\n        min_sub_list = a[0]\n        for i in range(1, len(a)):\n            if a[i] < min_sub_list:\n                min_sub_list = a[i]\n        return min_sub_list\n\n\na = [2, 1, 3, 4, 5, 6, 7, 8]\nprint(min_sub_list(a))"
    },
    {
      "rank": 5,
      "score": 10.0,
      "candidate": "def min_len_of_sublist(lst):\n    return min(len(i) for i in lst)\n\nprint(min_len_of_sublist([1,2,3,4,5,6]))\nprint(min_len_of_sublist([1,2,3,4,5,6,7,8]))"
    },
    {
      "rank": 6,
      "score": 10.0,
      "candidate": "def min_len(sublist):\n    if len(sublist) < 2:\n        return len(sublist)\n    else:\n        return min(min_len(sublist[1:]), len(sublist))\n\n\ndef main():\n    print(min_len([1, 2, 3, 4, 5, 6]))\n    print(min_len([1, 2, 3, 4, 5]))\n    print(min_len([1, 2, 3, 4, 5, 6, 7]))\n    print(min_len([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\n    print(min_len([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 122, 123, 124, 125, 126, 127, 128, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 151, 152, 153, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168,"
    },
    {
      "rank": 7,
      "score": 10.0,
      "candidate": "def min_len(list_):\n    if len(list_) == 0:\n        return 0\n    else:\n        return min(list_)\n\n\n\n\n\nif __name__ == \"__main__\":\n    list_ = [1,2,3,4,5,6,7,8,9]\n    print(min_len(list_))"
    },
    {
      "rank": 8,
      "score": 10.0,
      "candidate": "def min_length(a):\n    if not a:\n        return 0\n    min_length = a[0]\n    for i in range(1, len(a)):\n        if a[i] < min_length:\n            min_length = a[i]\n    return min_length\n\n\nif __name__ == \"__main__\":\n    a = [3, 1, 2, 4, 5]\n    print(min_length(a))"
    },
    {
      "rank": 9,
      "score": 10.0,
      "candidate": "def min_len(arr):\n    min_len = float('inf')\n    for i in arr:\n        if i < min_len:\n            min_len = i\n    return min_len\n\nprint(min_len([1, 2, 3, 4, 5]))\nprint(min_len([1, 2, 3, 4, 5, 6]))\nprint(min_len([1, 2, 3, 4, 5, 6, 7, 8, 9]))"
    },
    {
      "rank": 10,
      "score": 10.0,
      "candidate": "def min_len(sublist):\n    if len(sublist) == 1:\n        return 0\n    else:\n        return min(sublist[1:])\n\nprint(min_len([1, 2, 3, 4]))"
    },
    {
      "rank": 11,
      "score": 10.0,
      "candidate": "def min_list_len(sublist):\n    if len(sublist) == 0:\n        return 0\n    return min(sublist)\n\nprint(min_list_len([1, 2, 3, 4, 5]))"
    },
    {
      "rank": 12,
      "score": 10.0,
      "candidate": "def find_min_length(sublist):\n    min_len = float('inf')\n    for i in range(len(sublist)):\n        if i > 0:\n            if sublist[i] < sublist[i-1]:\n                min_len = min(min_len, i-1)\n    return min_len\n\nprint(find_min_length([1,2,3,4,5,6,7,8,9,10]))"
    },
    {
      "rank": 13,
      "score": 10.0,
      "candidate": "def min_length(sublist):\n    return min(len(sublist), len(set(sublist)))"
    },
    {
      "rank": 14,
      "score": 10.0,
      "candidate": "def min_length(list):\n    return min(len(l) for l in list)\n\n\nprint(min_length([1, 2, 3, 4, 5, 6]))\nprint(min_length([1, 2, 3, 4, 5, 6, 7]))\nprint(min_length([1, 2, 3, 4, 5, 6, 7, 8, 9]))"
    },
    {
      "rank": 15,
      "score": 10.0,
      "candidate": "def minimum_length_of_sublist(sublist):\n    min_length = len(sublist)\n    for i in range(1, len(sublist)):\n        if sublist[i] < sublist[i-1]:\n            min_length = i\n    return min_length\n\nif __name__ == '__main__':\n    sublist = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    print(minimum_length_of_sublist(sublist))"
    },
    {
      "rank": 16,
      "score": 10.0,
      "candidate": "def minimum_length(sublist):\n    if len(sublist) == 0:\n        return 0\n    if len(sublist) == 1:\n        return len(sublist)\n    return min(minimum_length(sublist[1:]), len(sublist))\n\nprint(minimum_length([1,2,3,4,5]))"
    },
    {
      "rank": 17,
      "score": 10.0,
      "candidate": "def min_list_length(lst):\n    if len(lst) == 0:\n        return 0\n    min_length = lst[0]\n    for i in range(1, len(lst)):\n        if lst[i] < min_length:\n            min_length = lst[i]\n    return min_length\n\n\nif __name__ == \"__main__\":\n    print(min_list_length([1, 2, 3, 4]))\n    print(min_list_length([1, 2, 3, 4, 5]))\n    print(min_list_length([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\n    print(min_list_length([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]))"
    },
    {
      "rank": 18,
      "score": 10.0,
      "candidate": "def min_len(a):\n    min_len = a[0]\n    for i in range(1, len(a)):\n        if a[i] < min_len:\n            min_len = a[i]\n    return min_len\n\n\nprint(min_len([1, 2, 3, 4, 5]))\nprint(min_len([3, 4, 5, 6]))"
    },
    {
      "rank": 19,
      "score": 8.0,
      "candidate": "def min_len(sublist):\n    \"\"\"\n    :type sublist: list\n    :rtype: int\n    \"\"\"\n\n    if not sublist:\n        return 0\n\n    min_len = sublist[0]\n    for i in range(1, len(sublist)):\n        if sublist[i] < min_len:\n            min_len = sublist[i]\n\n    return min_len\n\n\ndef main():\n    \"\"\"\n    Testing\n    \"\"\"\n    print(min_len([3, 4, 5, 6, 7]))\n    print(min_len([3, 4, 5, 6, 7, 8, 9]))\n    print(min_len([3, 4, 5, 6, 7, 8, 9, 10]))\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 20,
      "score": 8.0,
      "candidate": "def min_list_length(sublist):\n    min_len = float('inf')\n    for i in sublist:\n        if len(i) < min_len:\n            min_len = len(i)\n    return min_len\n\n\nprint(min_list_length([1,2,3,4,5]))\nprint(min_list_length([]))\nprint(min_list_length([1,2,3,4]))\nprint(min_list_length([1,2,3,4,5,6]))\nprint(min_list_length([1,2,3,4,5,6,7,8,9]))\nprint(min_list_length([1,2,3,4,5,6,7,8,9,10,11,12]))\nprint(min_list_length([1,2,3,4,5,6,7,8,9,10,11,12,13,14]))"
    },
    {
      "rank": 21,
      "score": 8.0,
      "candidate": "def min_length(sublist):\n    if len(sublist) == 0:\n        return 0\n\n    if len(sublist) == 1:\n        return 1\n\n    return min(min_length(sublist[1:]), min_length(sublist[:-1])) + 1\n\n\nif __name__ == \"__main__\":\n    print(min_length([1, 2, 3, 4, 5, 6]))"
    },
    {
      "rank": 22,
      "score": 8.0,
      "candidate": "def min_list(list_):\n    return min(list_)\n\n\nlist_ = [2, 5, 1, 3, 4]\nprint(min_list(list_))"
    },
    {
      "rank": 23,
      "score": 8.0,
      "candidate": "def minimum_length(sublist):\n    \"\"\"\n    :type sublist: List[int]\n    :rtype: int\n    \"\"\"\n\n    if len(sublist) < 1:\n        return 0\n\n    min_len = len(sublist)\n    min_index = 0\n\n    for i in range(1, len(sublist)):\n        if sublist[i] < sublist[min_index]:\n            min_len = i\n            min_index = i\n\n    return min_len\n\n\nif __name__ == '__main__':\n    print(minimum_length([1, 2, 3, 4]))\n    print(minimum_length([1, 2, 3, 4, 5]))\n    print(minimum_length([1, 2, 3, 4, 5, 6, 7]))\n    print(minimum_length([1, 2, 3, 4, 5, 6, 7, 8, 9]))"
    },
    {
      "rank": 24,
      "score": 8.0,
      "candidate": "def minimum_length(list_):\n    return min(len(list_), len(set(list_)))\n\n\nif __name__ == \"__main__\":\n    assert minimum_length([1, 2, 3, 4, 5]) == 5\n    assert minimum_length([2, 3, 4, 5, 6]) == 6"
    },
    {
      "rank": 25,
      "score": 8.0,
      "candidate": "def min_len(sublist):\n    return min(len(sublist), len(set(sublist)))\n\n\nif __name__ == '__main__':\n    sublist = [1, 2, 3, 4, 5, 6]\n    print(min_len(sublist))"
    },
    {
      "rank": 26,
      "score": 8.0,
      "candidate": "def minimum_length(sublist):\n    min_len = float('inf')\n    for i in range(len(sublist)):\n        if len(sublist) > i+1:\n            min_len = min(min_len, i+1)\n    return min_len\n\nsublist = [1,2,3,4,5,6,7]\nprint(minimum_length(sublist))"
    },
    {
      "rank": 27,
      "score": 8.0,
      "candidate": "def min_list_len(sublist):\n    min_len = len(sublist[0])\n    for i in range(1, len(sublist)):\n        if len(sublist[i]) < min_len:\n            min_len = len(sublist[i])\n    return min_len\n\nprint(min_list_len([1,2,3,4,5,6]))"
    },
    {
      "rank": 28,
      "score": 8.0,
      "candidate": "def min_len(l):\n    if not l:\n        return 0\n    if len(l) == 1:\n        return len(l)\n    if len(l) == 2:\n        if l[0] < l[1]:\n            return len(l)\n        else:\n            return 1\n    if len(l) == 3:\n        if l[0] < l[1] and l[0] < l[2]:\n            return len(l)\n        else:\n            return 2\n    if len(l) == 4:\n        if l[0] < l[1] and l[0] < l[2] and l[0] < l[3]:\n            return len(l)\n        else:\n            return 3\n\n\nl = [1, 2, 3, 4, 5]\nprint(min_len(l))"
    },
    {
      "rank": 29,
      "score": 8.0,
      "candidate": "def find_min_length(sublist):\n    return min(sublist)\n\n\nif __name__ == '__main__':\n    sublist = [1, 2, 3, 4, 5]\n    print(find_min_length(sublist))"
    },
    {
      "rank": 30,
      "score": 8.0,
      "candidate": "def min_list_length(list1, list2):\n    if len(list1) < len(list2):\n        return len(list1)\n    else:\n        return len(list2)\n\nprint(min_list_length([1, 2, 3], [1, 2]))"
    },
    {
      "rank": 31,
      "score": 8.0,
      "candidate": "def min_len_sublist(list):\n    if not list:\n        return 0\n    if len(list) == 1:\n        return 1\n    else:\n        return min(min_len_sublist(list[:-1]), min_len_sublist(list[1:])) + 1\n\n\nprint(min_len_sublist([1, 2, 3, 4, 5]))"
    },
    {
      "rank": 32,
      "score": 8.0,
      "candidate": "def minimum_length(S):\n    if len(S) == 1:\n        return len(S)\n\n    min_len = S[0]\n    for i in range(1, len(S)):\n        if S[i] < min_len:\n            min_len = S[i]\n\n    return min_len\n\n\nprint(minimum_length([1, 2, 3]))\nprint(minimum_length([1, 2, 3, 4, 5]))"
    },
    {
      "rank": 33,
      "score": 8.0,
      "candidate": "def min_length(sublist):\n    min_length = len(sublist)\n    for i in range(1, len(sublist)):\n        if len(sublist) > i:\n            min_length = min(min_length, len(sublist) - i)\n    return min_length\n\nprint(min_length([1, 2, 3, 4, 5, 6]))"
    },
    {
      "rank": 34,
      "score": 8.0,
      "candidate": "def min_len(sublist):\n    min_len = float('inf')\n    for i in sublist:\n        if len(sublist) > min_len:\n            min_len = len(sublist)\n    return min_len\n\n\nprint(min_len([1, 2, 3, 4, 5, 6, 7, 8, 9]))\nprint(min_len([]))\nprint(min_len([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]))"
    },
    {
      "rank": 35,
      "score": 8.0,
      "candidate": "def min_length(sublist):\n    min_len = 1\n    for i in range(len(sublist)):\n        if i == 0:\n            min_len = min(min_len, len(sublist)-i)\n        else:\n            min_len = min(min_len, len(sublist)-i)\n    return min_len\n\nsublist = [1, 2, 3, 4, 5]\nprint(min_length(sublist))"
    },
    {
      "rank": 36,
      "score": 8.0,
      "candidate": "def minimum_length(sublist):\n    if len(sublist) == 0:\n        return 0\n    return min(sublist)\n\n\nprint(minimum_length([1, 2, 3, 4]))\nprint(minimum_length([1, 2, 3, 4, 5]))"
    },
    {
      "rank": 37,
      "score": 8.0,
      "candidate": "def min_length(sublist):\n    \"\"\"\n    :type sublist: list\n    :rtype: int\n    \"\"\"\n    min_length = len(sublist)\n    if len(sublist) == 0:\n        return min_length\n    for i in range(1, len(sublist)):\n        if sublist[i] < sublist[i - 1]:\n            min_length = i\n    return min_length\n\n\nif __name__ == \"__main__\":\n    print(min_length([1, 2, 3, 4, 5]))\n    print(min_length([1, 2, 3, 4, 5, 6]))\n    print(min_length([1, 2, 3, 4, 5, 6, 7, 8]))"
    },
    {
      "rank": 38,
      "score": 8.0,
      "candidate": "def min_len(sublist):\n    min_len = len(sublist)\n    for i in range(1, len(sublist)):\n        if sublist[i] < sublist[i-1]:\n            min_len = i\n    return min_len\n\n\nprint(min_len([3, 1, 4, 2]))"
    },
    {
      "rank": 39,
      "score": 8.0,
      "candidate": "def min_length(sublist):\n    min_len = 99999999\n    for i in sublist:\n        if i < min_len:\n            min_len = i\n    return min_len\n\n\nif __name__ == \"__main__\":\n    sublist = [1, 2, 3, 4, 5]\n    print(min_length(sublist))"
    },
    {
      "rank": 40,
      "score": 8.0,
      "candidate": "def min_length(arr):\n    min_len = float('inf')\n    for i in arr:\n        if len(i) < min_len:\n            min_len = len(i)\n    return min_len\n\narr = [1,2,3,4,5]\nprint(min_length(arr))"
    },
    {
      "rank": 41,
      "score": 8.0,
      "candidate": "def min_length(a):\n    min_len = a[0]\n    for i in range(len(a)):\n        if a[i] < min_len:\n            min_len = a[i]\n    return min_len\n\nprint(min_length([1, 2, 3, 4]))\nprint(min_length([1, 2, 3, 4, 5]))\nprint(min_length([1, 2, 3, 4, 5, 6, 7]))"
    },
    {
      "rank": 42,
      "score": 8.0,
      "candidate": "def min_length(list1):\n    min_length = 0\n    if len(list1) == 0:\n        return min_length\n    for i in range(len(list1)):\n        min_length = min(min_length, len(list1[i]))\n    return min_length\n\nlist1 = [1,2,3,4,5]\nprint(min_length(list1))"
    },
    {
      "rank": 43,
      "score": 8.0,
      "candidate": "def min_len_of_list(list_):\n    \"\"\"\n    :type list_: list[int]\n    :rtype: int\n    \"\"\"\n    if len(list_) == 0:\n        return 0\n    else:\n        return min(list_)\n\n\nprint(min_len_of_list([1, 2, 3, 4, 5]))"
    },
    {
      "rank": 44,
      "score": 8.0,
      "candidate": "def min_len(sublist):\n    min_len = float('inf')\n    for i in sublist:\n        if i > min_len:\n            min_len = i\n    return min_len\n\n\nprint(min_len([1, 2, 3, 4, 5]))\nprint(min_len([1, 2, 3, 4, 5, 6]))\nprint(min_len([1, 2, 3, 4, 5, 6, 7]))\nprint(min_len([1, 2, 3, 4, 5, 6, 7, 8]))\nprint(min_len([1, 2, 3, 4, 5, 6, 7, 8, 9]))"
    },
    {
      "rank": 45,
      "score": 8.0,
      "candidate": "def min_len(a):\n    if len(a) == 0:\n        return 0\n    if len(a) == 1:\n        return 1\n    if len(a) == 2:\n        return 2\n    if len(a) == 3:\n        return 3\n    if len(a) == 4:\n        return 4\n    return min(min_len(a[0:2]), min_len(a[2:4]), min_len(a[4:]))\n\nprint(min_len([1,2,3]))\nprint(min_len([1,2,3,4]))\nprint(min_len([1,2,3,4,5]))"
    },
    {
      "rank": 46,
      "score": 8.0,
      "candidate": "def min_length(sublist):\n    if len(sublist) == 0:\n        return 0\n    if len(sublist) == 1:\n        return 1\n    min_len = len(sublist)\n    for i in range(1, len(sublist)):\n        if sublist[i] < sublist[i-1]:\n            min_len = i\n    return min_len\n\nif __name__ == \"__main__\":\n    print(min_length([1, 2, 3, 4, 5]))\n    print(min_length([1, 2, 3, 4]))\n    print(min_length([1, 2, 3, 4, 5, 6, 7]))"
    },
    {
      "rank": 47,
      "score": 8.0,
      "candidate": "def min_sublist(l):\n    if not l:\n        return 0\n    return min(l)\n\n\nif __name__ == \"__main__\":\n    l = [1, 2, 3]\n    print(min_sublist(l))"
    },
    {
      "rank": 48,
      "score": 8.0,
      "candidate": "def min_len(sublist):\n    if len(sublist) <= 1:\n        return len(sublist)\n    else:\n        return min(min_len(sublist[:i]), min_len(sublist[i:]))\n\n\nprint(min_len([1, 2, 3, 4, 5, 6]))\nprint(min_len([2, 3, 4, 5]))\nprint(min_len([2, 2, 2, 2, 2]))"
    },
    {
      "rank": 49,
      "score": 8.0,
      "candidate": "def min_length(sublist):\n    if len(sublist) == 0:\n        return 0\n    if len(sublist) == 1:\n        return len(sublist)\n\n    min_length = 1\n    min_index = 0\n    for i in range(len(sublist)):\n        if i == 0:\n            min_length = min(min_length, len(sublist) - i)\n        elif i == len(sublist) - 1:\n            min_length = min(min_length, min_index + 1)\n        else:\n            min_length = min(min_length, min(sublist[i], sublist[i + 1]))\n        min_index = min(min_index, i + 1)\n\n    return min_length\n\n\nif __name__ == \"__main__\":\n    print(min_length([1, 2, 3, 4]))\n    print(min_length([1, 2, 3, 4, 5, 6]))\n    print(min_length([1, 2, 3, 4, 5, 6, 7]))"
    },
    {
      "rank": 50,
      "score": 8.0,
      "candidate": "def min_list_length(list_of_int):\n    if len(list_of_int) == 0:\n        return 0\n    elif len(list_of_int) == 1:\n        return 1\n    else:\n        return 1 + min(list_of_int[0], min_list_length(list_of_int[1:]))\n\n\nif __name__ == \"__main__\":\n    print(min_list_length([3, 4, 5, 6]))"
    },
    {
      "rank": 51,
      "score": 8.0,
      "candidate": "def min_len(lst):\n    min_len = float('inf')\n    for i in lst:\n        if i < min_len:\n            min_len = i\n    return min_len\n\n\nif __name__ == \"__main__\":\n    lst = [1, 2, 3, 4, 5, 6, 7]\n    print(min_len(lst))"
    },
    {
      "rank": 52,
      "score": 8.0,
      "candidate": "def min_length_list(my_list):\n    if not my_list:\n        return 0\n    elif len(my_list) == 1:\n        return len(my_list)\n    elif len(my_list) == 2:\n        return min(my_list)\n    elif len(my_list) == 3:\n        return min(my_list) + 1\n    else:\n        return min(min_length_list(my_list[1:]), min_length_list(my_list[:-1]))\n\nif __name__ == '__main__':\n    my_list = [1, 2, 3]\n    print(min_length_list(my_list))"
    },
    {
      "rank": 53,
      "score": 8.0,
      "candidate": "def min_length(arr):\n    min_len = len(arr)\n    for i in range(len(arr) - 1):\n        if arr[i] < arr[i + 1]:\n            min_len = min(min_len, i + 1)\n    return min_len\n\n\nif __name__ == \"__main__\":\n    arr = [1, 2, 3, 4, 5]\n    print(min_length(arr))"
    },
    {
      "rank": 54,
      "score": 8.0,
      "candidate": "def min_length(l):\n    if len(l) == 1:\n        return l[0]\n    else:\n        return min(l[0], min_length(l[1:]))\n\n\nif __name__ == '__main__':\n    print(min_length([1, 2, 3, 4, 5]))\n    print(min_length([1, 2, 3, 4, 5, 6, 7]))"
    },
    {
      "rank": 55,
      "score": 8.0,
      "candidate": "def min_sub_list_length(sublist):\n    min_length = len(sublist[0])\n    for i in range(1, len(sublist)):\n        min_length = min(min_length, len(sublist[i]))\n    return min_length\n\n\nprint(min_sub_list_length([1, 2, 3, 4]))\nprint(min_sub_list_length([1, 2, 3, 4, 5]))\nprint(min_sub_list_length([1, 2, 3, 4, 5, 6, 7]))\nprint(min_sub_list_length([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]))"
    },
    {
      "rank": 56,
      "score": 8.0,
      "candidate": "def min_length_of_sublist(sublist):\n    if len(sublist) == 0:\n        return 0\n    elif len(sublist) == 1:\n        return len(sublist)\n    elif len(sublist) == 2:\n        return min(sublist)\n    else:\n        return min(min_length_of_sublist(sublist[0:-1]), min_length_of_sublist(sublist[1:]))\n\n\nprint(min_length_of_sublist([1, 2, 3, 4]))"
    },
    {
      "rank": 57,
      "score": 8.0,
      "candidate": "def min_length(sublist):\n    if len(sublist) == 0:\n        return 0\n    elif len(sublist) == 1:\n        return len(sublist)\n    else:\n        return min(min_length(sublist[:-1]), len(sublist) - 1) + 1\n\nsublist = [3, 2, 1, 5]\nprint(min_length(sublist))"
    },
    {
      "rank": 58,
      "score": 8.0,
      "candidate": "def min_sub_list(list_input):\n    min_length = float(\"inf\")\n    for i in range(len(list_input)-1):\n        if list_input[i] < list_input[i+1]:\n            min_length = min(min_length, i+1)\n    return min_length\n\nlist_input = [1,2,3,4,5,6,7]\nprint(min_sub_list(list_input))\n\nlist_input = [1,2,3,4,5,6]\nprint(min_sub_list(list_input))"
    },
    {
      "rank": 59,
      "score": 8.0,
      "candidate": "def min_length(sublist):\n    if len(sublist) == 0:\n        return 0\n    return min(sublist)\n\n\nsublist = [1, 2, 3, 4]\nprint(min_length(sublist))"
    },
    {
      "rank": 60,
      "score": 8.0,
      "candidate": "def min_length(list_):\n    if len(list_) == 0:\n        return 0\n    return min(list_)\n\ndef test_min_length():\n    assert min_length([1,2,3]) == 1\n    assert min_length([1,2,3,4]) == 1\n    assert min_length([1,2,3,4,5]) == 1\n    assert min_length([1,2,3,4,5,6]) == 2"
    },
    {
      "rank": 61,
      "score": 8.0,
      "candidate": "def minimum_length(sublist):\n    if len(sublist) == 0:\n        return 0\n    return min(sublist)\n\n\nprint(minimum_length([]))\nprint(minimum_length([1]))\nprint(minimum_length([1, 2, 3, 4, 5, 6]))"
    },
    {
      "rank": 62,
      "score": 8.0,
      "candidate": "def min_length(sublist):\n    \"\"\"\n    Find the minimum length of sublist.\n    \"\"\"\n    if len(sublist) == 0:\n        return 0\n    if len(sublist) == 1:\n        return 1\n    if len(sublist) == 2:\n        return 2\n\n    min_len = len(sublist)\n    min_index = 0\n    for index in range(1, len(sublist)):\n        if min_len > len(sublist) - index:\n            min_len = len(sublist) - index\n            min_index = index\n    return min_index\n\n\nif __name__ == \"__main__\":\n    sublist = [1, 2, 3, 4, 5]\n    print(min_length(sublist))"
    },
    {
      "rank": 63,
      "score": 8.0,
      "candidate": "def min_length(sublist):\n    if not sublist:\n        return 0\n    min_len = float('inf')\n    for i in range(len(sublist)):\n        if len(sublist) == 1:\n            return 0\n        elif sublist[i] < min_len:\n            min_len = sublist[i]\n    return min_len\n\nsublist = [1, 2, 3, 4, 5, 6, 7, 8, 9]\nprint(min_length(sublist))"
    },
    {
      "rank": 64,
      "score": 8.0,
      "candidate": "def min_len(sublist):\n    min_len = len(sublist)\n    for i in range(1, len(sublist)):\n        if sublist[i] < sublist[i-1]:\n            min_len = i\n    return min_len\n\n\nprint(min_len([1, 2, 3, 4, 5]))\nprint(min_len([4, 5, 3, 2, 1]))\nprint(min_len([1, 2, 3, 4]))\nprint(min_len([1, 2, 3]))"
    },
    {
      "rank": 65,
      "score": 8.0,
      "candidate": "def min_length(sublist):\n    if len(sublist) == 1:\n        return sublist[0]\n    if len(sublist) == 2:\n        return min(sublist)\n    else:\n        return min(sublist[0], min(sublist[1:]))\n\nprint(min_length([1, 2, 3, 4, 5, 6, 7]))\nprint(min_length([1, 2, 3, 4, 5, 6, 7, 8]))\nprint(min_length([1, 2, 3, 4, 5, 6, 7, 8, 9]))\nprint(min_length([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))"
    },
    {
      "rank": 66,
      "score": 8.0,
      "candidate": "def min_len(list):\n    if len(list) == 1:\n        return list[0]\n    else:\n        return min(list)\n\n\nlist = [1, 2, 3, 4, 5]\nprint(min_len(list))\n\nlist = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nprint(min_len(list))"
    },
    {
      "rank": 67,
      "score": 8.0,
      "candidate": "def min_list_len(a):\n    if a == []:\n        return 0\n    if len(a) == 1:\n        return len(a)\n    if len(a) == 2:\n        return min(a)\n    if len(a) == 3:\n        return min(a[0], a[1], a[2])\n    if len(a) == 4:\n        return min(a[0], a[1], a[2], a[3])\n    return min(a[0], a[1], a[2], a[3], a[4])"
    },
    {
      "rank": 68,
      "score": 8.0,
      "candidate": "def min_len(sublist):\n    min_len = float(\"inf\")\n    for i in range(len(sublist)):\n        if len(sublist) > i + 1:\n            if sublist[i] < min_len:\n                min_len = sublist[i]\n    return min_len\n\nprint(min_len([2,3,4,5,6,7,9]))\nprint(min_len([1,2,3,4,5,6]))\nprint(min_len([1,2,3,4,5,6,7]))\nprint(min_len([1,2,3,4,5,6,7]))\nprint(min_len([1,2,3,4,5,6,7,9,10]))\nprint(min_len([1,2,3,4,5,6,7,9,10]))\nprint(min_len([1,2,3,4,5,6,7,9,10,11]))"
    },
    {
      "rank": 69,
      "score": 8.0,
      "candidate": "def min_sub_list(list):\n    min_len = list[0]\n    for i in range(1, len(list)):\n        if list[i] < min_len:\n            min_len = list[i]\n    return min_len\n\nprint(min_sub_list([1, 3, 4, 5]))\nprint(min_sub_list([1, 3, 4, 5, 6]))\nprint(min_sub_list([1, 3, 4, 5, 6, 7]))\nprint(min_sub_list([1, 3, 4, 5, 6, 7, 8, 9]))\nprint(min_sub_list([1, 3, 4, 5, 6, 7, 8, 9, 10]))"
    },
    {
      "rank": 70,
      "score": 8.0,
      "candidate": "def min_length(lst):\n    if len(lst) < 2:\n        return len(lst)\n    else:\n        return min(min_length(lst[:-1]), min_length(lst[1:])) + 1\n\n\nif __name__ == '__main__':\n    print(min_length([1, 2, 3, 4, 5]))"
    },
    {
      "rank": 71,
      "score": 8.0,
      "candidate": "def min_length(list_of_items):\n    if len(list_of_items) == 0:\n        return 0\n    else:\n        return min(list_of_items)\n\nlist_of_items = [1, 2, 3, 4, 5]\nprint(min_length(list_of_items))\n\nlist_of_items = [1, 2, 3, 4, 5, 6]\nprint(min_length(list_of_items))\n\nlist_of_items = [1, 2, 3, 4, 5, 6, 7]\nprint(min_length(list_of_items))\n\nlist_of_items = [1, 2, 3, 4, 5, 6, 7, 8, 9]\nprint(min_length(list_of_items))"
    },
    {
      "rank": 72,
      "score": 8.0,
      "candidate": "def min_sublist_len(sublist):\n    if not sublist:\n        return 0\n    return min([len(x) for x in sublist])\n\n\nsublist = [1, 2, 3, 4, 5]\nprint(min_sublist_len(sublist))"
    },
    {
      "rank": 73,
      "score": 8.0,
      "candidate": "def min_length(list_of_sublists):\n    if len(list_of_sublists) == 0:\n        return 0\n    min_length = list_of_sublists[0]\n    for sublist in list_of_sublists:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n    return min_length\n\n\nprint(min_length([1, 2, 3, 4, 5, 6]))\nprint(min_length([]))\nprint(min_length([1, 2, 3, 4, 5, 6, 7, 8, 9]))\nprint(min_length([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))"
    },
    {
      "rank": 74,
      "score": 8.0,
      "candidate": "def min_length(arr):\n    min_len=arr[0]\n    for i in range(1,len(arr)):\n        if arr[i]<min_len:\n            min_len=arr[i]\n    return min_len\n\nif __name__ == \"__main__\":\n    arr = [1, 2, 3, 4, 5]\n    print(min_length(arr))"
    },
    {
      "rank": 75,
      "score": 8.0,
      "candidate": "def find_min_length(list):\n    if len(list) == 0:\n        return 0\n    elif len(list) == 1:\n        return len(list)\n    else:\n        return min(find_min_length(list[:-1]), find_min_length(list[1:]))\n\nif __name__ == \"__main__\":\n    list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]\n    print(find_min_length(list))"
    },
    {
      "rank": 76,
      "score": 8.0,
      "candidate": "def minimum_len(sublist):\n    min_len = len(sublist)\n    for i in range(1, len(sublist)):\n        if sublist[i] < sublist[i-1]:\n            min_len = i\n    return min_len\n\n\nsublist = [1, 2, 3, 4, 5, 6, 7, 8, 9]\nprint(minimum_len(sublist))"
    },
    {
      "rank": 77,
      "score": 8.0,
      "candidate": "def minimum_length(sublist):\n    if len(sublist) == 0:\n        return 0\n    min_len = len(sublist)\n    for i in range(1, len(sublist)):\n        if sublist[i] < sublist[i-1]:\n            min_len = i\n    return min_len\n\n\nif __name__ == \"__main__\":\n    sublist = [1, 2, 3, 4, 5]\n    print(minimum_length(sublist))"
    },
    {
      "rank": 78,
      "score": 8.0,
      "candidate": "def minimum_length(sublist):\n    min_len = float('inf')\n    min_len_index = 0\n    for i in range(len(sublist)):\n        if sublist[i] < min_len:\n            min_len = sublist[i]\n            min_len_index = i\n    return min_len, min_len_index\n\n\nprint(minimum_length([1, 2, 3, 4]))\nprint(minimum_length([1, 2, 3, 4, 5]))"
    },
    {
      "rank": 79,
      "score": 8.0,
      "candidate": "def min_len(list_of_elements):\n    list_of_elements.sort()\n    return list_of_elements[0]\n\n\nif __name__ == \"__main__\":\n    list_of_elements = [1, 2, 3, 4, 5]\n    print(min_len(list_of_elements))"
    },
    {
      "rank": 80,
      "score": 8.0,
      "candidate": "def minimum_length(arr):\n    if not arr:\n        return 0\n    elif len(arr) == 1:\n        return len(arr)\n    else:\n        return 1 + min(minimum_length(arr[1:]), minimum_length(arr[:-1]))\n\n\nprint(minimum_length([1, 2, 3, 4, 5]))\nprint(minimum_length([2, 3, 4, 5]))\nprint(minimum_length([3, 4, 5, 6]))"
    },
    {
      "rank": 81,
      "score": 8.0,
      "candidate": "def min_length(list_of_items):\n    min_len = list_of_items[0]\n    for i in range(1, len(list_of_items)):\n        if list_of_items[i] < min_len:\n            min_len = list_of_items[i]\n\n    return min_len\n\n\nlist_of_items = [1, 2, 3, 4, 5]\nprint(min_length(list_of_items))"
    },
    {
      "rank": 82,
      "score": 8.0,
      "candidate": "def min_length(sublist):\n    if len(sublist) == 1:\n        return sublist[0]\n    min_length = 1\n    for i in range(len(sublist) - 1):\n        if sublist[i + 1] < sublist[i]:\n            min_length = min(min_length, sublist[i + 1] - sublist[i])\n    return min_length\n\n\nif __name__ == '__main__':\n    assert min_length([1, 2, 3, 4, 5]) == 5\n    assert min_length([1, 2, 3, 4, 5, 6]) == 6\n    assert min_length([1, 2, 3, 4, 5, 6, 7, 8]) == 7"
    },
    {
      "rank": 83,
      "score": 6.0,
      "candidate": "def min_length(arr):\n    if len(arr) == 0:\n        return 0\n    else:\n        return min(arr)\n\nprint(min_length([1, 2, 3, 4, 5]))"
    },
    {
      "rank": 84,
      "score": 1.0,
      "candidate": "def min_list_length(list):\n    if len(list) == 0:\n        return 0\n    if len(list) == 1:\n        return len(list)\n\n    min_length = 1\n    for i in range(1, len(list)):\n        if list[i] < list[i - 1]:\n            min_length = i\n\n    return min_length\n\n\ndef test_min_list_length():\n    assert min_list_length([1, 2, 3]) == 1\n    assert min_list_length([1, 2, 3, 4]) == 2\n    assert min_list_length([1, 2, 3, 4, 5]) == 3\n    assert min_list_length([1, 2, 3, 4, 5, 6, 7, 8, 9]) == 5"
    },
    {
      "rank": 85,
      "score": 1.0,
      "candidate": "def find_min_length(list):\n    if len(list) < 2:\n        return len(list)\n    else:\n        return min(find_min_length(list[1:]), find_min_length(list[:-1])) + 1\n\n\nprint(find_min_length([1, 2, 3, 4, 5]))"
    },
    {
      "rank": 86,
      "score": 1.0,
      "candidate": "def min_len(list_of_int):\n    list_of_int.sort()\n    return list_of_int[-1]\n\n\nprint(min_len([1, 2, 3, 4, 5]))"
    },
    {
      "rank": 87,
      "score": 1.0,
      "candidate": "def min_len(l):\n    l.sort()\n    return len(l)\n\n\nl = [1, 2, 3, 4, 5]\nprint(min_len(l))"
    },
    {
      "rank": 88,
      "score": 1.0,
      "candidate": "def min_length(l):\n    l = sorted(l)\n    if len(l) == 1:\n        return l[0]\n    else:\n        return l[0] + min(l[1:])\n\n\nprint(min_length([1, 2, 3, 4, 5]))\nprint(min_length([1, 2, 3, 4, 5, 6]))"
    },
    {
      "rank": 89,
      "score": 1.0,
      "candidate": "def min_len_of_sublist(sublist):\n    min_len = float('inf')\n    for i in range(len(sublist)):\n        for j in range(i, len(sublist)):\n            if abs(sublist[i] - sublist[j]) < min_len:\n                min_len = abs(sublist[i] - sublist[j])\n    return min_len\n\n\nsublist = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nprint(min_len_of_sublist(sublist))"
    },
    {
      "rank": 90,
      "score": 1.0,
      "candidate": "def min_length(lst):\n    if len(lst) == 1:\n        return len(lst)\n    else:\n        min_length_1 = min(map(len, lst))\n        min_length_2 = min(map(len, lst))\n        return min(min_length_1, min_length_2)\n\nlst = [1, 2, 3, 4, 5, 6, 7]\nprint(min_length(lst))"
    },
    {
      "rank": 91,
      "score": 1.0,
      "candidate": "def min_length(lst):\n    if not lst:\n        return None\n\n    if len(lst) == 1:\n        return lst[0]\n\n    min_len = lst[0]\n    min_len_index = 0\n    for i in range(1, len(lst)):\n        if lst[i] < min_len:\n            min_len = lst[i]\n            min_len_index = i\n\n    return min_len, min_len_index\n\n\nprint(min_length([1, 3, 5, 7, 9]))\nprint(min_length([1, 2, 3, 4, 5]))"
    },
    {
      "rank": 92,
      "score": 1.0,
      "candidate": "def find_min_length(list_of_list):\n    min_len = len(list_of_list)\n    for i in range(len(list_of_list)-1):\n        if list_of_list[i] < list_of_list[i+1]:\n            min_len = i+1\n    return min_len\n\n\nlist_of_list = [1, 2, 3, 4, 5, 6, 7, 8, 9]\nprint(find_min_length(list_of_list))"
    },
    {
      "rank": 93,
      "score": 1.0,
      "candidate": "class Solution(object):\n    def minSubListLen(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        n = len(nums)\n        if n <= 1:\n            return n\n        if n == 2:\n            return 1\n        if n == 3:\n            return 2\n        if n == 4:\n            return 3\n        if n == 5:\n            return 4\n        if n == 6:\n            return 5\n        if n == 7:\n            return 6\n        if n == 8:\n            return 7\n        if n == 9:\n            return 8\n        if n == 10:\n            return 9\n        if n == 11:\n            return 10\n        if n == 12:\n            return 11\n        if n == 13:\n            return 12\n        if n == 14:\n            return 13\n        if n == 15:\n            return 14\n        if n == 16:\n            return 15\n        if n == 17:\n            return 16\n        if n == 18:\n            return 17\n        if n == 19:\n            return 18\n        if n == 20:\n            return 19\n        if n == 21:\n            return 20\n        if n == 22:\n            return 21\n        if n == 23:\n            return 22\n        if n == 24:\n            return 23\n        if n == 25:\n            return 24\n        if n == 26:\n            return 25\n        if n == 27:\n            return 26\n        if n == 28:\n            return 27\n        if n == 29:\n            return 28\n        if n == 30:\n            return 29\n        if n == 31:\n            return 30\n        if n == 32:\n            return 31\n        if n == 33:\n            return 32\n        if n == 34:\n            return 33\n        if n == 35:\n            return 34\n        if n == 36:\n            return 35\n        if n == 37:\n            return 36\n        if n == 38:\n            return 37\n        if n == 39:\n            return 38\n        if n == 40:\n            return 39\n        if n == 41:\n            return 40\n        if n == 42:\n            return"
    },
    {
      "rank": 94,
      "score": 1.0,
      "candidate": "def min_list(list_):\n    min_list=[]\n    for i in range(len(list_)):\n        if len(min_list)==0:\n            min_list.append(list_[i])\n        elif len(min_list)>=len(list_):\n            min_list.append(list_[i])\n        else:\n            min_list.append(min_list[len(min_list)-1])\n    return min_list\n\n\nlist_=[1, 2, 3, 4, 5]\nprint(min_list(list_))\n\nlist_=[1, 2, 3, 4, 5]\nprint(min_list(list_))\n\nlist_=[1, 2, 3, 4, 5]\nprint(min_list(list_))\n\nlist_=[1, 2, 3, 4, 5]\nprint(min_list(list_))\n\nlist_=[1, 2, 3, 4, 5]\nprint(min_list(list_))\n\nlist_=[1, 2, 3, 4, 5]\nprint(min_list(list_))\n\nlist_=[1, 2, 3, 4, 5]\nprint(min_list(list_))\n\nlist_=[1, 2, 3, 4, 5]\nprint(min_list(list_))\n\nlist_=[1, 2, 3, 4, 5]\nprint(min_list(list_))\n\nlist_=[1, 2, 3, 4, 5]\nprint(min_list(list_))\n\nlist_=[1, 2, 3, 4, 5]\nprint(min_list(list_))\n\nlist_=[1, 2, 3, 4, 5]\nprint(min_list(list_))\n\nlist_=[1, 2, 3, 4, 5]\nprint(min_list(list_))\n\nlist_=[1, 2, 3, 4, 5]\nprint(min_list(list_))\n\nlist_=[1, 2, 3, 4, 5]\nprint(min_list(list_))\n\nlist_=[1, 2, 3, 4, 5]\nprint(min_list"
    },
    {
      "rank": 95,
      "score": 1.0,
      "candidate": "def minimum_length(arr):\n    if len(arr) < 2:\n        return len(arr)\n    elif len(arr) == 2:\n        if arr[0] > arr[1]:\n            return len(arr)\n        else:\n            return 1\n    else:\n        min_len = min(arr)\n        min_ind = arr.index(min_len)\n        return min_ind\n\n\narr = [1, 2, 3, 4, 5]\nprint(minimum_length(arr))"
    },
    {
      "rank": 96,
      "score": 1.0,
      "candidate": "def min_len_sub_list(l):\n    min_len = l[0]\n    for i in l:\n        if i < min_len:\n            min_len = i\n    return min_len\n\n\nl = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]\nprint(min_len_sub_list(l))"
    },
    {
      "rank": 97,
      "score": 1.0,
      "candidate": "def min_list_len(sublist):\n    \"\"\"\n    :type sublist: List[int]\n    :rtype: int\n    \"\"\"\n    if sublist == []:\n        return 0\n    if len(sublist) == 1:\n        return 1\n    if len(sublist) == 2:\n        return max(sublist[0], sublist[1])\n\n    min_len = min(sublist)\n    max_len = max(sublist)\n    for i in range(len(sublist)):\n        if min_len < max_len:\n            min_len = max_len\n        if min_len > max_len:\n            max_len = min_len\n    return max_len\n\n\nif __name__ == \"__main__\":\n    assert min_list_len([1, 2, 3, 4, 5]) == 4\n    assert min_list_len([1, 2, 3]) == 1\n    assert min_list_len([1, 2, 3, 4, 5]) == 2\n    assert min_list_len([1, 2, 3, 4, 5]) == 3"
    },
    {
      "rank": 98,
      "score": 1.0,
      "candidate": "def find_min_len_sublist(arr):\n    min_len = arr[0]\n    for i in range(1,len(arr)):\n        if min_len > arr[i]:\n            min_len = arr[i]\n    return min_len\n\n\narr = [5,6,7,8,9,10]\nprint(find_min_len_sublist(arr))"
    },
    {
      "rank": 99,
      "score": 1.0,
      "candidate": "def min_len(a):\n    if len(a) == 1:\n        return a[0]\n\n    return min(a)\n\n\nprint(min_len([1, 2, 3]))\nprint(min_len([1, 2, 3, 4]))\nprint(min_len([1, 2, 3, 4, 5]))\nprint(min_len([1, 2, 3, 4, 5, 6]))\nprint(min_len([1, 2, 3, 4, 5, 6, 7]))"
    },
    {
      "rank": 100,
      "score": 1.0,
      "candidate": "def find_min_length_of_sublist(sublist):\n    if len(sublist) == 0:\n        return 0\n\n    min_length = 1\n    min_element = sublist[0]\n\n    for element in sublist:\n        if element < min_element:\n            min_element = element\n            min_length = min_length + 1\n\n    return min_length\n\n\nsublist = [1, 2, 3, 4, 5]\n\nprint(find_min_length_of_sublist(sublist))"
    }
  ]
}