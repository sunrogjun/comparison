{
  "timestamp": "2025-09-14T13:58:20.196993",
  "method": "improved_llm_judge",
  "judge_model": "codellama/CodeLlama-7b-Python-hf",
  "target_model": "codet5-770m",
  "dataset": "mbpp",
  "problem_number": 205,
  "total_candidates": 100,
  "results": [
    {
      "rank": 1,
      "score": 10.0,
      "candidate": "def nested_subset(nested_list, nested_list_2):\n\n    return True if all(nested_subset(nested_list[i], nested_list_2[i]) for i in range(len(nested_list))) else False"
    },
    {
      "rank": 2,
      "score": 10.0,
      "candidate": "def is_subset(nested_list, nested_list_2):\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(n)\n    \"\"\"\n    if len(nested_list) == 0:\n        return True\n    if len(nested_list_2) == 0:\n        return False\n    return is_subset(nested_list[-1], nested_list_2[-1]) or is_subset(nested_list[-1], nested_list_2[:-1])\n\n\ndef main():\n    print(is_subset([], []))\n    print(is_subset([1], [1]))\n    print(is_subset([1, 2], [2, 3]))\n    print(is_subset([1, 2], [2, 3, 4]))\n    print(is_subset([1, 2], [3, 4, 5]))\n    print(is_subset([1, 2, 3], [4, 5, 6]))\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 3,
      "score": 10.0,
      "candidate": "def is_subset(nested_list, nested_list2):\n    return nested_list == nested_list2\n\n\nif __name__ == '__main__':\n    nested_list = [[1, 2, 3, 4], [5, 6, 7, 8]]\n    nested_list2 = [[1, 2, 3], [4, 5, 6, 7]]\n\n    print(is_subset(nested_list, nested_list2))"
    },
    {
      "rank": 4,
      "score": 10.0,
      "candidate": "def check_subset(nested_list, nested_list_2):\n    return nested_list.keys() <= nested_list_2.keys()\n\nif __name__ == \"__main__\":\n    nested_list = [1,2,3,4,5,6,7,8,9]\n    nested_list_2 = [2,3,4,6,8,9]\n    print(check_subset(nested_list, nested_list_2))"
    },
    {
      "rank": 5,
      "score": 10.0,
      "candidate": "def nested_subset(nested_list1, nested_list2):\n    if type(nested_list1)!= list:\n        return False\n    if type(nested_list2)!= list:\n        return False\n    for i in range(len(nested_list1)):\n        if not nested_subset(nested_list1[i], nested_list2[i]):\n            return False\n    return True\n\nprint(nested_subset([1, 2, 3], [2, 3, 4]))\nprint(nested_subset([1, 2, 3], [3, 4, 5]))\nprint(nested_subset([1, 2, 3], [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5"
    },
    {
      "rank": 6,
      "score": 10.0,
      "candidate": "def subset(list1,list2):\n    return (isinstance(list1,list) and isinstance(list2,list))\n\n\nprint(subset([1,2,3],[1,2,3]))"
    },
    {
      "rank": 7,
      "score": 10.0,
      "candidate": "def is_subset(a, b):\n    if len(a)!= len(b):\n        return False\n    else:\n        for i in range(len(a)):\n            if not is_subset(a[i], b[i]):\n                return False\n        return True\n\n\ndef main():\n    a = [[1, 2, 3], [4, 5, 6]]\n    b = [[1, 2, 3], [4, 5, 6]]\n    print(is_subset(a, b))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 8,
      "score": 10.0,
      "candidate": "def list_subset(list1, list2):\n    if len(list1) == 0:\n        return True\n\n    if len(list2) == 0:\n        return False\n\n    for i in range(len(list1)):\n        if not list_subset(list1[i], list2[i]):\n            return False\n\n    return True\n\nlist1 = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nlist2 = [[1, 2], [3, 4], [5, 6]]\nprint(list_subset(list1, list2))"
    },
    {
      "rank": 9,
      "score": 10.0,
      "candidate": "def nested_subset(n, m):\n    if len(n)!= len(m):\n        return False\n    for i in n:\n        if not nested_subset(i, m):\n            return False\n    return True\n\n\nif __name__ == \"__main__\":\n    n = [[1, 2, 3, 4, 5], [6, 7, 8, 9]]\n    m = [[1, 2, 3], [4, 5]]\n    print(nested_subset(n, m))"
    },
    {
      "rank": 10,
      "score": 10.0,
      "candidate": "def subset(list1, list2):\n    if len(list1) > len(list2):\n        return False\n    elif len(list1) < len(list2):\n        return True\n    else:\n        for i in range(len(list1)):\n            if list1[i] not in list2[i]:\n                return False\n        return True\n\nprint(subset([1,2,3,4,5],[1,2,3,4,5]))\nprint(subset([1,2,3,4,5],[1,3,4,5]))\nprint(subset([1,2,3,4,5],[1,3,5]))\nprint(subset([1,2,3,4,5],[1,4,5]))\nprint(subset([1,2,3,4,5],[1,5]))\nprint(subset([1,2,3,4,5],[1,3,4,5]))\nprint(subset([1,2,3,4,5],[1,3,4,5]))\nprint(subset([1,2,3,4,5],[1,4,5]))\nprint(subset([1,2,3,4,5],[1,4,5]))"
    },
    {
      "rank": 11,
      "score": 9.370583536698913,
      "candidate": "def subset(list1, list2):\n    for i in list1:\n        if i not in list2:\n            return False\n    return True\n\nif __name__ == '__main__':\n    print(subset([1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6]))\n    print(subset([1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6, 7]))\n    print(subset([1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6, 7, 8]))\n    print(subset([1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6, 7, 8, 9]))\n    print(subset([1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\n    print(subset([1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]))"
    },
    {
      "rank": 12,
      "score": 9.234050852198141,
      "candidate": "def list_subset(a, b):\n    for i in a:\n        if type(i)!= list:\n            return False\n    for j in b:\n        if type(j)!= list:\n            return False\n    return True\n\nif __name__ == '__main__':\n    print(list_subset([1, 2, 3, 4, 5], [1, 2, 3]))\n    print(list_subset([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6]))\n    print(list_subset([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6, 7]))"
    },
    {
      "rank": 13,
      "score": 9.226766272351448,
      "candidate": "def nested_list_subset(list_1, list_2):\n    return len(set(list_1).intersection(set(list_2))) == 0\n\n\nif __name__ == \"__main__\":\n    assert nested_list_subset([1, 2, 3], [1, 2]) == True\n    assert nested_list_subset([1, 2, 3], [4, 5]) == False"
    },
    {
      "rank": 14,
      "score": 9.21346272767743,
      "candidate": "def is_subset(lst1, lst2):\n    if not lst1 or not lst2:\n        return True\n    if isinstance(lst1, list) and isinstance(lst2, list):\n        return is_subset(lst1[0], lst2[0]) and is_subset(lst1[1:], lst2[1:])\n    return False\n\nprint(is_subset([[1,2,3], [4,5,6]], [[1,2], [4,5,6]]))\nprint(is_subset([[1,2,3], [4,5,6]], [[1,4], [5,6]]))\nprint(is_subset([[1,2,3], [4,5,6]], [[1,3], [5,6]]))\nprint(is_subset([[1,2,3], [4,5,6]], [[1,2], [3,4]]))"
    },
    {
      "rank": 15,
      "score": 9.205959372648458,
      "candidate": "def nested_list_subset(nested_list, nested_list_subset):\n    for i in nested_list:\n        if not nested_list_subset:\n            return False\n        if isinstance(i, list):\n            if not nested_list_subset:\n                return False\n            if len(i)!= len(nested_list_subset):\n                return False\n            for j in range(len(i)):\n                if not nested_list_subset[j] == i[j]:\n                    return False\n        else:\n            if not nested_list_subset == i:\n                return False\n    return True\n\n\nif __name__ == \"__main__\":\n    print(nested_list_subset([1, 2, 3], [4, 5, 6]))\n    print(nested_list_subset([1, 2, 3], [4, 5, 7]))\n    print(nested_list_subset([1, 2, 3], [2, 3]))\n    print(nested_list_subset([1, 2, 3], [2, 2]))"
    },
    {
      "rank": 16,
      "score": 9.177268828905222,
      "candidate": "def is_subset(list1, list2):\n    if len(list1) == 0 or len(list2) == 0:\n        return True\n\n    for element in list1:\n        if not is_subset(element, list2):\n            return False\n\n    return True\n\n\nprint(is_subset([1, 2, 3], [4, 5]))\nprint(is_subset([1, 2, 3], [4, 6]))\nprint(is_subset([1, 2, 3], [6]))"
    },
    {
      "rank": 17,
      "score": 9.122564458729856,
      "candidate": "def is_subset(nested_list, subset_list):\n    if len(nested_list)!= len(subset_list):\n        return False\n    for i in range(len(nested_list)):\n        if not is_subset(nested_list[i], subset_list[i]):\n            return False\n    return True\n\n\nprint(is_subset([1, 2, 3, 4], [1, 2, 3]))"
    },
    {
      "rank": 18,
      "score": 8.973005557553902,
      "candidate": "def subset(nested_list, subset_list):\n    if isinstance(nested_list, list) and isinstance(subset_list, list):\n        return len(nested_list) == len(subset_list) and set(nested_list) <= set(subset_list)\n    else:\n        return False\n\n\ndef main():\n    nested_list = [1, 2, 3, 4, 5]\n    subset_list = [1, 2, 3]\n    print(subset(nested_list, subset_list))\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 19,
      "score": 8.95994420569242,
      "candidate": "def is_subset(l1, l2):\n    if l1 == [] or l2 == []:\n        return True\n    if type(l1)!= type(l2):\n        return False\n    if len(l1) > len(l2):\n        return False\n    for i in l1:\n        if not is_subset(i, l2):\n            return False\n    return True\n\n\nif __name__ == '__main__':\n    l1 = [[1, 2, 3, 4], [5, 6, 7, 8, 9], [10, 11, 12, 13]]\n    l2 = [[1, 2, 3, 4], [5, 6, 7, 8, 9], [10, 11, 12, 13]]\n    print(is_subset(l1, l2))"
    },
    {
      "rank": 20,
      "score": 8.946210893390457,
      "candidate": "def subset_of(l1, l2):\n    if len(l1) == 0 and len(l2) == 0:\n        return True\n    for i in range(len(l1)):\n        if l1[i] in l2:\n            if subset_of(l1[i+1:], l2[i]):\n                return True\n    return False\n\nl1 = [1, 2, 3, 4, 5]\nl2 = [1, 2, 3, 4, 5]\n\nprint(subset_of(l1, l2))"
    },
    {
      "rank": 21,
      "score": 8.932217008005624,
      "candidate": "from typing import List\n\n\ndef nested_subset(nested_list: List, nested_list_2: List) -> bool:\n    return nested_subset_recursive(nested_list, nested_list_2)\n\n\ndef nested_subset_recursive(nested_list: List, nested_list_2: List) -> bool:\n    if len(nested_list) == 0:\n        return True\n\n    if len(nested_list) == 1:\n        if nested_list[0] in nested_list_2:\n            return True\n        else:\n            return False\n\n    if nested_list[0] in nested_list_2:\n        if nested_subset_recursive(nested_list[1:], nested_list_2):\n            return True\n        else:\n            return False\n\n    return False\n\n\nif __name__ == '__main__':\n    assert nested_subset_recursive([1, 2, 3, 4, 5], [4, 5]) is True\n    assert nested_subset_recursive([1, 2, 3, 4, 5], [1, 2, 3, 4, 5]) is False"
    },
    {
      "rank": 22,
      "score": 8.910084504002544,
      "candidate": "def nested_subset(l1, l2):\n    if not l1:\n        return True\n    if not l2:\n        return False\n\n    if not isinstance(l1, list):\n        return False\n\n    if not isinstance(l2, list):\n        return False\n\n    for i in l1:\n        if not nested_subset(i, l2):\n            return False\n\n    for i in l2:\n        if not nested_subset(l1, i):\n            return False\n\n    return True\n\n\nif __name__ == \"__main__\":\n    print(nested_subset([1, 2, 3], [4, 5, 6]))"
    },
    {
      "rank": 23,
      "score": 8.85571690049604,
      "candidate": "def nested_subset(nested_list, nested_list2):\n    if type(nested_list)!= list:\n        return False\n    if type(nested_list2)!= list:\n        return False\n\n    return (set(nested_list) <= set(nested_list2))\n\nprint(nested_subset([1,2,3], [4,5,6]))\nprint(nested_subset([1,2,3], [4,5]))\nprint(nested_subset([1,2,3], [2,4]))"
    },
    {
      "rank": 24,
      "score": 8.855395696632057,
      "candidate": "def subset(nested_list, sub_list):\n    if not nested_list:\n        return True\n    elif not sub_list:\n        return False\n    elif isinstance(nested_list, list) and isinstance(sub_list, list):\n        if len(nested_list)!= len(sub_list):\n            return False\n        for i in range(len(nested_list)):\n            if not subset(nested_list[i], sub_list[i]):\n                return False\n        return True\n    else:\n        return False\n\n\nif __name__ == '__main__':\n    nested_list = [\n        [1,2,3],\n        [4,5,6]\n    ]\n    sub_list = [\n        [1,2],\n        [4,5,6]\n    ]\n    print(subset(nested_list, sub_list))"
    },
    {
      "rank": 25,
      "score": 8.850707355641543,
      "candidate": "def nested_subset(list_1, list_2):\n    list_1 = set(list_1)\n    list_2 = set(list_2)\n    return list_1.issubset(list_2)\n\n\nprint(nested_subset([1, 2, 3, 4, 5], [2, 4, 6, 8, 10]))"
    },
    {
      "rank": 26,
      "score": 8.8281618090209,
      "candidate": "def nested_subset(nested_list, sub_list):\n    for i in range(len(nested_list)):\n        if nested_list[i] not in sub_list:\n            return False\n    return True\n\n\nnested_list = [1, 2, 3, 4, 5]\nsub_list = [1, 2, 3, 4]\nprint(nested_subset(nested_list, sub_list))"
    },
    {
      "rank": 27,
      "score": 8.81367773444215,
      "candidate": "def is_subset(list_1, list_2):\n    return list(set(list_1) & set(list_2)) == list(set(list_1))\n\n\nprint(is_subset([1, 2, 3], [4, 5, 6]))"
    },
    {
      "rank": 28,
      "score": 8.76828871349479,
      "candidate": "def check_subset(nested_list, nested_list_2):\n    return nested_list_2 == set(nested_list)\n\n\nprint(check_subset([1, 2, 3], [1, 2, 3, 4]))\nprint(check_subset([1, 2, 3], [1, 4, 5]))\nprint(check_subset([1, 2, 3], [1, 3, 4]))\nprint(check_subset([1, 2, 3], [1, 2, 4]))\nprint(check_subset([1, 2, 3], [1, 3, 5]))\nprint(check_subset([1, 2, 3], [1, 2, 4, 5]))\nprint(check_subset([1, 2, 3], [1, 3, 5, 6]))\nprint(check_subset([1, 2, 3], [1, 2, 4, 5]))\nprint(check_subset([1, 2, 3], [1, 3, 5, 6]))\nprint(check_subset([1, 2, 3], [1, 3, 6]))\nprint(check_subset([1, 2, 3], [1, 4, 5]))\nprint(check_subset([1, 2, 3], [1, 3, 5, 6]))\nprint(check_subset([1, 2, 3], [1, 4, 6]))"
    },
    {
      "rank": 29,
      "score": 8.750282588864879,
      "candidate": "def subset(a,b):\n    if len(a) < len(b):\n        return False\n    for i in range(len(a)):\n        if not subset(a[i],b[i]):\n            return False\n    return True\n\nprint(subset([1,2,3],[4,5]))\nprint(subset([1,2,3],[4,5,6]))\nprint(subset([1,2,3],[4,5,7]))\nprint(subset([1,2,3],[4,5,8]))"
    },
    {
      "rank": 30,
      "score": 8.715724466237427,
      "candidate": "def list_subset(list1, list2):\n    return list(set(list1).intersection(set(list2)))\n\n\nif __name__ == \"__main__\":\n    print(list_subset([1, 2, 3], [2, 3]))"
    },
    {
      "rank": 31,
      "score": 8.692801520950061,
      "candidate": "def check(a, b):\n    if isinstance(a, list) and isinstance(b, list):\n        if len(a) == len(b):\n            for i in range(len(a)):\n                if check(a[i], b[i]):\n                    return True\n                else:\n                    return False\n    else:\n        return False\n\n\nif __name__ == '__main__':\n    a = [1, 2, 3]\n    b = [4, 5, 6]\n    print(check(a, b))"
    },
    {
      "rank": 32,
      "score": 8.632293453617281,
      "candidate": "class NestedList:\n\n    def __init__(self, items):\n        self.items = items\n\n    def is_subset(self, other_list):\n        return all(item in other_list for item in self.items)\n\n\nif __name__ == \"__main__\":\n    l1 = NestedList([1, 2, 3, 4])\n    l2 = NestedList([1, 2, 3, 4, 5])\n\n    print(l1.is_subset(l2))"
    },
    {
      "rank": 33,
      "score": 8.625262456968262,
      "candidate": "def is_subset(a, b):\n    \"\"\"\n    :type a: list\n    :type b: list\n    :rtype: bool\n    \"\"\"\n    return set(a) <= set(b)\n\n\nif __name__ == '__main__':\n    print(is_subset([1, 2, 3, 4, 5], [1, 2, 3, 4, 5]))\n    print(is_subset([1, 2, 3, 4, 5], [1, 2, 3, 4]))"
    },
    {
      "rank": 34,
      "score": 8.625142247198651,
      "candidate": "from typing import List\n\ndef subset_list(a: List, b: List) -> bool:\n    return (a == b)"
    },
    {
      "rank": 35,
      "score": 8.616253589228675,
      "candidate": "def check_subset(nested_list, other_list):\n    if len(nested_list)!= len(other_list):\n        return False\n    for nested_item in nested_list:\n        if check_subset(nested_item, other_list):\n            return True\n    return False\n\n\nif __name__ == '__main__':\n    nested_list = [1, 2, 3, 4, 5]\n    other_list = [1, 2, 3, 4]\n    assert check_subset(nested_list, other_list) == True"
    },
    {
      "rank": 36,
      "score": 8.610076160146226,
      "candidate": "def is_subset(nested_list, nested_list_2):\n    if len(nested_list) == 0 or len(nested_list_2) == 0:\n        return True\n\n    for i in range(len(nested_list)):\n        if not is_subset(nested_list[i], nested_list_2[i]):\n            return False\n\n    return True\n\n\nif __name__ == \"__main__\":\n    print(is_subset([1, 2, 3, 4], [1, 2, 3, 4, 5]))"
    },
    {
      "rank": 37,
      "score": 8.606486429141842,
      "candidate": "def is_subset(list_a, list_b):\n    for i in list_a:\n        if not is_subset(i, list_b):\n            return False\n    return True\n\n\nif __name__ == '__main__':\n    list_a = [1, 2, 3, 4, 5, 6]\n    list_b = [1, 2, 3, 4, 5, 6]\n    print(is_subset(list_a, list_b))"
    },
    {
      "rank": 38,
      "score": 8.60156811074208,
      "candidate": "def check_subset(a, b):\n    return a == b\n\n\nprint(check_subset([1, 2, 3], [2, 3]))\nprint(check_subset([1, 2, 3], [1, 2, 3]))\nprint(check_subset([1, 2, 3], [1, 3, 4]))\nprint(check_subset([1, 2, 3], [1, 4, 5]))\nprint(check_subset([1, 2, 3], [1, 5]))\nprint(check_subset([1, 2, 3], [1, 6, 7]))"
    },
    {
      "rank": 39,
      "score": 8.565425580227462,
      "candidate": "def subset_of_lists(a, b):\n    return len(a) == len(b) and set(a) <= set(b)\n\n\nif __name__ == \"__main__\":\n    print(subset_of_lists([1, 2, 3], [4, 5]))"
    },
    {
      "rank": 40,
      "score": 8.548876241946822,
      "candidate": "from typing import List\n\n\ndef is_subset(nested_list: List[List[int]],\n               other_list: List[List[int]]) -> bool:\n    if len(nested_list) > len(other_list):\n        return False\n    for i in range(len(nested_list)):\n        if not is_subset(nested_list[i], other_list[i]):\n            return False\n    return True\n\n\nif __name__ == '__main__':\n    assert is_subset([[1, 2, 3], [4, 5]], [[1, 2, 3], [4, 5]])\n    assert is_subset([[1, 2, 3], [4, 5]], [[1, 5], [2, 4]])\n    assert is_subset([[1, 2, 3], [4, 5]], [[1, 6], [3, 2]])\n    assert not is_subset([[1, 2, 3], [4, 5]], [[1, 3], [2, 4]])\n    assert not is_subset([[1, 2, 3], [4, 5]], [[1, 6], [3, 5]])\n    assert not is_subset([[1, 2, 3], [4, 5]], [[1, 7], [3, 2]])\n    assert not is_subset([[1, 2, 3], [4, 5]], [[1, 8], [3, 4]])"
    },
    {
      "rank": 41,
      "score": 8.542875062379007,
      "candidate": "def subset_list(list1, list2):\n    return set(list1).issubset(set(list2))\n\n\nprint(subset_list([1, 2, 3], [2, 3]))\nprint(subset_list([1, 2, 3], [1, 2]))\nprint(subset_list([1, 2, 3], [4, 5, 6, 7]))"
    },
    {
      "rank": 42,
      "score": 8.53012858503943,
      "candidate": "def subset(list1, list2):\n    if len(list1) > len(list2):\n        return False\n    elif len(list1) == len(list2):\n        for item in list1:\n            if not subset(list1[item], list2[item]):\n                return False\n        return True\n    else:\n        return False\n\n\nif __name__ == \"__main__\":\n    print(subset([1, 2, 3], [4, 5, 6]))\n    print(subset([1, 2, 3], [1, 2, 3, 4]))\n    print(subset([1, 2, 3], [4, 5, 6, 7]))"
    },
    {
      "rank": 43,
      "score": 8.499905739299377,
      "candidate": "def is_subset(list_1, list_2):\n    if isinstance(list_1, list) and isinstance(list_2, list):\n        return list_1 == list_2\n    else:\n        return False\n\n\nif __name__ == \"__main__\":\n    print(is_subset([1, 2, 3, 4, 5], [1, 2, 3]))\n    print(is_subset([1, 2, 3, 4, 5], [1, 3, 5]))\n    print(is_subset([1, 2, 3, 4, 5], [1, 4, 5]))\n    print(is_subset([1, 2, 3, 4, 5], [1, 4, 5, 6]))\n    print(is_subset([1, 2, 3, 4, 5], [1, 5]))\n    print(is_subset([1, 2, 3, 4, 5], [1, 4, 6]))\n    print(is_subset([1, 2, 3, 4, 5], [1, 5, 6]))\n    print(is_subset([1, 2, 3, 4, 5], [1, 4, 6]))"
    },
    {
      "rank": 44,
      "score": 8.48796797856353,
      "candidate": "def nested_subset(a, b):\n    if type(a)!= type(b):\n        return False\n\n    if len(a) == 0:\n        return True\n\n    for i in a:\n        if not nested_subset(i, b):\n            return False\n\n    return True\n\n\nif __name__ == \"__main__\":\n    print(nested_subset([1, 2, 3], [1, 2, 3]))\n    print(nested_subset([1, 2, 3], [1, 2, 4]))\n    print(nested_subset([1, 2, 3], [1, 2, 4, 5]))"
    },
    {
      "rank": 45,
      "score": 8.478208546788407,
      "candidate": "def is_subset(a, b):\n    return list(set(a).intersection(set(b))) == []"
    },
    {
      "rank": 46,
      "score": 8.437695832075478,
      "candidate": "def is_subset(lst1, lst2):\n    if lst1 == lst2:\n        return True\n    if isinstance(lst1, list) and isinstance(lst2, list):\n        for i in lst1:\n            if is_subset(i, lst2):\n                return True\n        for i in lst2:\n            if is_subset(lst1, i):\n                return True\n    return False"
    },
    {
      "rank": 47,
      "score": 8.426531424889468,
      "candidate": "def list_subset(a, b):\n    if isinstance(a, list) and isinstance(b, list):\n        if len(a) == len(b):\n            for i in a:\n                if list_subset(i, b):\n                    return True\n    return False\n\na = [1,2,3]\nb = [2,3,4]\n\nprint(list_subset(a, b))"
    },
    {
      "rank": 48,
      "score": 8.408439383654278,
      "candidate": "def nested_subset(a, b):\n    # Write your code here\n    return len(set(a) & set(b)) == 0\n\n\nif __name__ == '__main__':\n    print(nested_subset([1, 2, 3, 4, 5], [1, 2, 4]))"
    },
    {
      "rank": 49,
      "score": 8.386620303250325,
      "candidate": "def check_subset(list_1, list_2):\n    # return all(isinstance(item, list) for item in list_1) and all(isinstance(item, list) for item in list_2)\n    return all(item in list_1 for item in list_2)\n\n\nprint(check_subset([1, 2, 3, 4, 5, 6], [2, 4, 6]))\nprint(check_subset([1, 2, 3, 4, 5, 6], [4, 6]))"
    },
    {
      "rank": 50,
      "score": 8.375312293858853,
      "candidate": "def subset(list1, list2):\n    if list1 == []:\n        return list2 == []\n\n    if list2 == []:\n        return True\n\n    for i in list1:\n        if not subset(i, list2):\n            return False\n\n    return True\n\n\nif __name__ == \"__main__\":\n    print(subset([], []))\n    print(subset([1,2,3], [2,3]))\n    print(subset([1,2,3], [1,2,4]))\n    print(subset([1,2,3], [1,3]))\n    print(subset([1,2,3], [1,4]))\n    print(subset([1,2,3], [1,5]))"
    },
    {
      "rank": 51,
      "score": 8.351614956112536,
      "candidate": "def list_subset(a,b):\n    if isinstance(a,list) and isinstance(b,list):\n        return a == b\n    return False\n\nprint(list_subset([1,2,3],[3,4,5]))\nprint(list_subset([1,2,3],[4,5,6]))\nprint(list_subset([1,2,3],[4,6]))\nprint(list_subset([1,2,3],[5,6,7]))"
    },
    {
      "rank": 52,
      "score": 8.331556294201176,
      "candidate": "def is_subset(nested_list, nested_list_2):\n    return len(set(nested_list).intersection(set(nested_list_2))) == 0"
    },
    {
      "rank": 53,
      "score": 8.327375965969855,
      "candidate": "def nested_subset(list_1, list_2):\n    \"\"\"\n    :type list_1: list\n    :type list_2: list\n    :rtype: bool\n    \"\"\"\n    if len(list_1) == 0 and len(list_2) == 0:\n        return True\n    elif len(list_1) == 0:\n        return False\n    elif len(list_2) == 0:\n        return False\n\n    return nested_subset(list_1[0], list_2[0]) \\\n        or nested_subset(list_1[1:], list_2[1:])\n\n\nif __name__ == '__main__':\n    assert nested_subset([[1, 2], [3, 4], [5, 6]], [[1, 2, 3], [4, 5, 6]]) == True\n    assert nested_subset([[1, 2], [3, 4], [5, 6]], [[5, 6], [6, 7]]) == True\n    assert nested_subset([[1, 2], [3, 4], [5, 6]], [[1, 3], [2, 4], [5, 6]]) == True\n    assert nested_subset([[1, 2], [3, 4], [5, 6]], [[1, 4], [2, 5], [3, 6]]) == True\n    assert nested_subset([[1, 2], [3, 4], [5, 6]], [[1, 5], [2, 6], [3, 7]]) == True\n    assert nested_subset([[1, 2], [3, 4], [5, 6]], [[1, 7], [2, 8], [3, 9]]) == True"
    },
    {
      "rank": 54,
      "score": 8.327367757082776,
      "candidate": "def list_subset(a, b):\n    if not a:\n        return False\n    if not b:\n        return True\n    if a[0] == b[0]:\n        return list_subset(a[1:], b[1:])\n    else:\n        return False\n\n\nprint(list_subset([1, 2, 3], [2, 3]))\nprint(list_subset([1, 2, 3], [3, 2]))\nprint(list_subset([1, 2, 3], [3, 3]))\nprint(list_subset([1, 2, 3], [2, 3, 4]))"
    },
    {
      "rank": 55,
      "score": 8.298597569547805,
      "candidate": "def list_subset(list1, list2):\n    return list(set(list1) & set(list2))\n\ndef main():\n    print(list_subset([1, 2, 3], [2, 3]))\n    print(list_subset([1, 2, 3, 4], [2, 3]))\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 56,
      "score": 8.2938925966498,
      "candidate": "def nested_subset(a, b):\n    if len(a)!= len(b):\n        return False\n    for i in range(len(a)):\n        if a[i] not in b[i]:\n            return False\n        if type(a[i])!= type(b[i]):\n            return False\n    return True\n\n\na = [1, 2, 3, 4, 5, 6, 7, 8, 9]\nb = [1, 2, 3, 4, 5, 6, 7, 8, 9]\nprint(nested_subset(a, b))"
    },
    {
      "rank": 57,
      "score": 8.289838256518838,
      "candidate": "class NestedList:\n    def __init__(self, items):\n        self.items = items\n    def check_subset(self, items):\n        return self.items == items\n\ndef main():\n    nested_list = NestedList([1,2,3,4])\n    print(nested_list.check_subset([2,3,4,5]))\n    print(nested_list.check_subset([2,4,5]))\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 58,
      "score": 8.251903304236286,
      "candidate": "def is_subset(a, b):\n    if isinstance(a, list) and isinstance(b, list):\n        for x in a:\n            if is_subset(x, b):\n                return True\n        for x in b:\n            if is_subset(a, x):\n                return True\n    return False\n\n\nif __name__ == \"__main__\":\n    a = [1, 2, 3, 4]\n    b = [1, 2, 3, 4]\n    print(is_subset(a, b))"
    },
    {
      "rank": 59,
      "score": 8.214125058964552,
      "candidate": "def is_subset(nested_list, other_list):\n\n    if len(nested_list) == 0:\n        return True\n\n    for value in nested_list:\n        if not is_subset(value, other_list):\n            return False\n\n    return True\n\n\nnested_list = [1, 2, 3, 4, 5]\nother_list = [1, 2, 3, 4, 5, 6]\nprint(is_subset(nested_list, other_list))"
    },
    {
      "rank": 60,
      "score": 8.212735598038213,
      "candidate": "def subset(nested_list, nested_list_2):\n    if not nested_list:\n        return True\n    if not nested_list_2:\n        return False\n\n    return nested_list_2 in nested_list and subset(nested_list[1:], nested_list_2[1:])\n\n\nif __name__ == \"__main__\":\n    print(subset([1, 2, 3, 4], [4, 5]))\n    print(subset([1, 2, 3, 4], [1, 2]))\n    print(subset([1, 2, 3, 4], [5, 6]))\n    print(subset([1, 2, 3, 4], [1, 2, 3]))\n    print(subset([1, 2, 3, 4], [1, 2, 3, 4, 5]))\n    print(subset([1, 2, 3, 4], [1, 2, 3, 5]))\n    print(subset([1, 2, 3, 4], [1, 2, 3, 5, 6]))"
    },
    {
      "rank": 61,
      "score": 8.211579567659316,
      "candidate": "def is_subset(l1: list, l2: list) -> bool:\n    for i in l1:\n        if not is_subset(i, l2):\n            return False\n    return True\n\n\nif __name__ == \"__main__\":\n    assert is_subset([1, 2, 3], [2, 3]) is True\n    assert is_subset([1, 2, 3], [2, 2]) is False\n    assert is_subset([1, 2, 3], [2, 3, 4]) is False\n    assert is_subset([1, 2, 3], [2, 3, 5]) is True"
    },
    {
      "rank": 62,
      "score": 8.209707251476969,
      "candidate": "def is_subset(list1, list2):\n    if not list1 or not list2:\n        return True\n    for item in list1:\n        if not is_subset(item, list2):\n            return False\n    return True\n\ndef main():\n    print(is_subset([1, 2, 3, 4], [2, 4]))\n    print(is_subset([1, 2, 3, 4], [5, 6]))\n    print(is_subset([1, 2, 3, 4], [7, 8]))\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 63,
      "score": 8.2048573255218,
      "candidate": "def nested_list_subset(nested_list, nested_list_1):\n    if not nested_list:\n        return False\n    if not nested_list_1:\n        return True\n\n    if not isinstance(nested_list, list):\n        return False\n\n    if not isinstance(nested_list_1, list):\n        return False\n\n    if len(nested_list)!= len(nested_list_1):\n        return False\n\n    for i in range(len(nested_list)):\n        if not nested_list[i] in nested_list_1[i]:\n            return False\n\n    return True\n\n\nprint(nested_list_subset([], []))\nprint(nested_list_subset([1, 2, 3, 4, 5], [1, 2, 3, 4, 5]))\nprint(nested_list_subset([1, 2, 3, 4, 5], [2, 3, 4, 5]))\nprint(nested_list_subset([1, 2, 3, 4, 5], [2, 3, 4, 5, 6]))\nprint(nested_list_subset([1, 2, 3, 4, 5], [2, 3, 4, 5, 6, 7]))"
    },
    {
      "rank": 64,
      "score": 8.172253082181854,
      "candidate": "def is_subset(nested_list, nested_list2):\n    if not isinstance(nested_list, list):\n        return False\n    if not isinstance(nested_list2, list):\n        return False\n    return all([is_subset(item, nested_list2) for item in nested_list])"
    },
    {
      "rank": 65,
      "score": 8.163300679823958,
      "candidate": "def list_subset(a, b):\n    if not isinstance(a, list):\n        return False\n    if not isinstance(b, list):\n        return False\n\n    if len(a) == 0:\n        return True\n\n    for i in range(len(a)):\n        if not list_subset(a[i], b[i]):\n            return False\n\n    return True\n\n\nif __name__ == \"__main__\":\n    print(list_subset([1, 2, 3], [1, 2, 3]))\n    print(list_subset([1, 2, 3], [2, 3]))\n    print(list_subset([1, 2, 3], [2, 4]))\n    print(list_subset([1, 2, 3], [4, 5]))"
    },
    {
      "rank": 66,
      "score": 8.144125099485041,
      "candidate": "def list_subset(list1, list2):\n    for item in list1:\n        if isinstance(item, list):\n            if list_subset(item, list2):\n                return True\n    return False\n\n\nif __name__ == \"__main__\":\n    assert list_subset([1, 2, 3], [4, 5]) == True\n    assert list_subset([1, 2, 3], [1, 4, 5]) == False\n    assert list_subset([1, 2, 3], [5, 4]) == False\n    assert list_subset([1, 2, 3], [3, 2, 4]) == True"
    },
    {
      "rank": 67,
      "score": 8.143591138329747,
      "candidate": "def is_subset(a, b):\n    if type(a)!= type(b):\n        return False\n    if type(a)!= list:\n        return False\n    if len(a) == 0:\n        return False\n    for i in a:\n        if not is_subset(i, b):\n            return False\n    return True"
    },
    {
      "rank": 68,
      "score": 8.121884567141883,
      "candidate": "def list_subset(a, b):\n    return all([a_item in b_item for a_item in a])"
    },
    {
      "rank": 69,
      "score": 8.105983444291466,
      "candidate": "def is_subset(list1, list2):\n    if list1 is None or list2 is None:\n        return False\n    for i in list1:\n        if not is_subset(i, list2):\n            return False\n    return True\n\nif __name__ == \"__main__\":\n    print(is_subset([1, 2, 3, 4, 5], [2, 3, 4, 5]))"
    },
    {
      "rank": 70,
      "score": 8.08452234024709,
      "candidate": "def nested_subset(a, b):\n    if len(a)!= len(b):\n        return False\n    for i in range(len(a)):\n        if a[i] not in b:\n            return False\n        if not nested_subset(a[i + 1:], b[i]):\n            return False\n    return True\n\n\nprint(nested_subset([1, 2, 3], [2, 3]))\nprint(nested_subset([1, 2, 3], [3, 4]))\nprint(nested_subset([1, 2, 3], [4, 5]))\nprint(nested_subset([1, 2, 3], [1, 5]))"
    },
    {
      "rank": 71,
      "score": 8.024835682833125,
      "candidate": "def list_subset(lst1, lst2):\n    if isinstance(lst1, list) and isinstance(lst2, list):\n        return lst1 == lst2\n    else:\n        return False\n\n\nprint(list_subset([1, 2, 3], [2, 4]))\nprint(list_subset([1, 2, 3, 4], [1, 2, 3]))\nprint(list_subset([1, 2, 3, 4, 5], [1, 2, 3, 4]))\nprint(list_subset([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6]))"
    },
    {
      "rank": 72,
      "score": 7.990432406683839,
      "candidate": "def is_subset(nested_list, nested_list2):\n    if not nested_list or not nested_list2:\n        return True\n    if not isinstance(nested_list, list) or not isinstance(nested_list2, list):\n        return False\n    if len(nested_list) < len(nested_list2):\n        return False\n    for item1, item2 in zip(nested_list, nested_list2):\n        if not is_subset(item1, item2):\n            return False\n    return True"
    },
    {
      "rank": 73,
      "score": 7.938028884277233,
      "candidate": "def is_subset(list1, list2):\n    return all(is_subset(item1, item2) for item1 in list1 for item2 in list2)"
    },
    {
      "rank": 74,
      "score": 7.915588979966494,
      "candidate": "def check(nestedList, nestedList2):\n    for i in range(len(nestedList)):\n        if check(nestedList[i], nestedList2[i]):\n            return True\n    return False\n\nprint(check([[1,2,3],[4,5,6],[7,8,9]], [[1,2,3], [4,5,6], [7,8,9]]))\nprint(check([[1,2,3],[4,5,6],[7,8,9]], [[1,2,3], [4,5,6], [8,9]]))"
    },
    {
      "rank": 75,
      "score": 7.8912769574414305,
      "candidate": "def check_subset(list1, list2):\n    list1.sort()\n    list2.sort()\n    if list1 == list2:\n        return True\n    else:\n        return False\n\ndef main():\n    list1 = [1,2,3,4,5,6,7,8,9,10]\n    list2 = [5,6,7,8,9,10]\n    print(check_subset(list1, list2))\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 76,
      "score": 7.868947655733293,
      "candidate": "def is_subset(a, b):\n    if len(a) == len(b):\n        for i in a:\n            if not is_subset(i, b):\n                return False\n    return True\n\nif __name__ == \"__main__\":\n    print(is_subset([1,2,3], [4,5]))\n    print(is_subset([1,2,3], [1,3,4]))\n    print(is_subset([1,2,3], [2,3,4]))"
    },
    {
      "rank": 77,
      "score": 7.84634113240411,
      "candidate": "def nested_list_subset(a, b):\n    if len(a) > len(b):\n        return False\n    if len(b) == 0:\n        return True\n    if len(a) == 0:\n        return False\n\n    for i in range(0, len(a)):\n        if a[i] not in b:\n            return False\n    return True"
    },
    {
      "rank": 78,
      "score": 7.834022619458933,
      "candidate": "def subset(lst1, lst2):\n    if not isinstance(lst1, list) or not isinstance(lst2, list):\n        return False\n\n    for i in range(len(lst1)):\n        if lst1[i] not in lst2:\n            return False\n\n    return True\n\n\nprint(subset([1, 2, 3], [3, 2]))\nprint(subset([1, 2, 3], [1, 2]))\nprint(subset([1, 2, 3], [2, 2, 3]))"
    },
    {
      "rank": 79,
      "score": 7.780351419995229,
      "candidate": "def subset_of_nested_list(nested_list, subset_list):\n    \"\"\"\n    :type nested_list: List[List[Any]]\n    :type subset_list: List[List[Any]]\n    :rtype: bool\n    \"\"\"\n    if len(nested_list) == 0 or len(subset_list) == 0:\n        return True\n\n    for item in nested_list:\n        if not subset_of_nested_list(item, subset_list):\n            return False\n\n    return True"
    },
    {
      "rank": 80,
      "score": 7.738292593776799,
      "candidate": "def is_subset(a, b):\n    for x in a:\n        if x not in b:\n            return False\n    return True\n\n\nif __name__ == '__main__':\n    print(is_subset([1, 2, 3, 4, 5], [1, 2, 3, 5]))\n    print(is_subset([1, 2, 3, 4, 5], [1, 2, 3]))\n    print(is_subset([1, 2, 3, 4, 5], [1, 3]))"
    },
    {
      "rank": 81,
      "score": 7.7320703513377165,
      "candidate": "def nested_subset(list_1, list_2):\n    for i in list_1:\n        if i not in list_2:\n            return False\n    return True\n\n\nif __name__ == \"__main__\":\n    print(nested_subset([1, 2, 3], [4, 5]))"
    },
    {
      "rank": 82,
      "score": 7.705183449260731,
      "candidate": "def nested_list_subset(l1, l2):\n    if not isinstance(l1, list) or not isinstance(l2, list):\n        return False\n    if len(l1)!= len(l2):\n        return False\n    for i in range(len(l1)):\n        if not nested_list_subset(l1[i], l2[i]):\n            return False\n    return True\n\n\nif __name__ == \"__main__\":\n    print(nested_list_subset([[1, 2, 3], [4, 5, 6]], [[1, 2, 3], [4, 5, 6]]))"
    },
    {
      "rank": 83,
      "score": 7.5819855281879285,
      "candidate": "def subset(list1, list2):\n    if len(list1) == 0 and len(list2) == 0:\n        return True\n    if len(list1) == 0 or len(list2) == 0:\n        return False\n\n    if not isinstance(list1, list):\n        return False\n    if not isinstance(list2, list):\n        return False\n\n    for i in range(len(list1)):\n        if not subset(list1[i], list2[i]):\n            return False\n\n    return True"
    },
    {
      "rank": 84,
      "score": 7.562924366763077,
      "candidate": "def check_subset(nested_list, nested_list_2):\n    if len(nested_list) == 0:\n        return True\n    if len(nested_list_2) == 0:\n        return True\n    if not check_subset(nested_list[0], nested_list_2[0]):\n        return False\n    for i in range(len(nested_list)):\n        if not check_subset(nested_list[i], nested_list_2[i]):\n            return False\n    return True\n\ndef main():\n    nested_list = [[1, 2, 3], [4, 5]]\n    nested_list_2 = [[1, 2, 3], [4, 5], [6, 7]]\n    print(check_subset(nested_list, nested_list_2))\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 85,
      "score": 7.4878043221155455,
      "candidate": "def subset(nested_list, sub_list):\n    if not nested_list or not sub_list:\n        return True\n    if not isinstance(nested_list, list):\n        return False\n    if not isinstance(sub_list, list):\n        return False\n    if len(nested_list)!= len(sub_list):\n        return False\n    for i in range(len(nested_list)):\n        if not subset(nested_list[i], sub_list[i]):\n            return False\n    return True\n\n\ndef main():\n    nested_list = [1, 2, 3]\n    sub_list = [2, 3]\n    print(subset(nested_list, sub_list))\n    nested_list = [1, 2, 3, 4, 5, 6, 7]\n    sub_list = [1, 2, 3]\n    print(subset(nested_list, sub_list))\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 86,
      "score": 7.464609382504557,
      "candidate": "def subset(lst1, lst2):\n    return lst1 <= lst2\n\n\nif __name__ == '__main__':\n    lst1 = [1, 2, 3, 4, 5]\n    lst2 = [2, 3, 4, 5]\n    print(subset(lst1, lst2))"
    },
    {
      "rank": 87,
      "score": 7.134571892399572,
      "candidate": "def is_subset(list1, list2):\n    return list(set(list1).intersection(set(list2))) == []\n\nprint(is_subset([1, 2, 3, 4], [5, 6, 7]))"
    },
    {
      "rank": 88,
      "score": 3.0,
      "candidate": "def subset(x, y):\n    if len(x) == 0 and len(y) == 0:\n        return True\n    if len(x) == 0:\n        return False\n    if len(y) == 0:\n        return False\n    if type(x[0])!= type(y[0]):\n        return False\n    return subset(x[1:], y[1:]) or subset(x[0:-1], y[0:-1])\n\n\nprint(subset([1, 2, 3, 4], [1, 2, 3, 4]))\nprint(subset([1, 2, 3, 4], [1, 2]))\nprint(subset([1, 2, 3, 4], [1, 3, 4, 5]))\nprint(subset([1, 2, 3, 4], [1, 3, 5, 6]))\nprint(subset([1, 2, 3, 4], [1, 3, 6]))\nprint(subset([1, 2, 3, 4], [1, 4, 5]))\nprint(subset([1, 2, 3, 4], [1, 5, 6]))\nprint(subset([1, 2, 3, 4], [1, 6, 7, 8]))\nprint(subset([1, 2, 3, 4], [1, 7, 8]))\nprint(subset([1, 2, 3, 4], [1, 8, 9]))\nprint(subset([1, 2, 3, 4], [1, 9, 10]))\nprint(subset([1, 2, 3, 4], [1, 10, 11]))\nprint(subset([1, 2, 3, 4], [1, 11, 12]))\nprint(subset([1, 2, 3, 4], [1, 12, 13]))\nprint(subset([1, 2, 3, 4], [1, 13, 14]))"
    },
    {
      "rank": 89,
      "score": 3.0,
      "candidate": "def check_subset(nested_list, nested_list_1):\n    if not nested_list:\n        return True\n    if not nested_list_1:\n        return False\n    if len(nested_list)!= len(nested_list_1):\n        return False\n\n    for i, val in enumerate(nested_list):\n        if not check_subset(val, nested_list_1[i]):\n            return False\n    return True\n\n\nif __name__ == \"__main__\":\n    nested_list = [\n        [1, 2, 3, 4, 5],\n        [6, 7, 8, 9, 10],\n        [11, 12, 13, 14, 15],\n        [16, 17, 18, 19, 20],\n    ]\n    nested_list_1 = [\n        [1, 2, 3, 4, 5],\n        [6, 7, 8, 9, 10],\n        [11, 12, 13, 14, 15],\n        [16, 17, 18, 19, 20],\n    ]\n    print(check_subset(nested_list, nested_list_1))"
    },
    {
      "rank": 90,
      "score": 3.0,
      "candidate": "def list_subset(a, b):\n    if a == b:\n        return True\n    if isinstance(a, list) and isinstance(b, list):\n        return all(list_subset(item, b) for item in a)\n    else:\n        return False\n\n\nif __name__ == \"__main__\":\n    assert list_subset([1, 2, 3, 4], [1, 2])\n    assert list_subset([1, 2, 3, 4], [5, 6, 7, 8])\n    assert not list_subset([1, 2, 3, 4], [1, 5, 6, 7])"
    },
    {
      "rank": 91,
      "score": 3.0,
      "candidate": "def check_subset(list1, list2):\n    if len(list1) > len(list2):\n        return False\n    if len(list1) < len(list2):\n        return True\n\n    if check_subset(list2, list1):\n        return True\n    return False\n\n\nprint(check_subset([1, 2, 3, 4], [1, 2, 3, 4]))"
    },
    {
      "rank": 92,
      "score": 3.0,
      "candidate": "def is_subset(nested_list, sub_list):\n    # write your code here\n    if len(nested_list) == 0:\n        return True\n\n    if len(nested_list) > len(sub_list):\n        return False\n\n    for i in range(len(nested_list)):\n        if not is_subset(nested_list[i], sub_list[i]):\n            return False\n\n    return True\n\n\nprint(is_subset([1, 2, 3, 4, 5], [4, 5]))\nprint(is_subset([1, 2, 3, 4, 5], [1, 2, 3, 4]))"
    },
    {
      "rank": 93,
      "score": 3.0,
      "candidate": "def is_subset(l1, l2):\n    return len(l1) == len(l2) and all(is_subset(l1_item, l2_item) for l1_item in l1 for l2_item in l2)\n\n\ndef test():\n    l1 = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    l2 = [[10, 11, 12], [13, 14, 15], [16, 17, 18]]\n\n    assert is_subset(l1, l2)\n\n\nif __name__ == '__main__':\n    test()"
    },
    {
      "rank": 94,
      "score": 3.0,
      "candidate": "def is_subset(nested_list, nested_list2):\n    return isinstance(nested_list, list) and isinstance(nested_list2, list) and len(nested_list) == len(nested_list2) and nested_list == nested_list2\n\n\nprint(is_subset([1, 2, 3, 4, 5], [1, 2, 3, 4, 5]))\nprint(is_subset([1, 2, 3, 4, 5], [1, 3, 5]))"
    },
    {
      "rank": 95,
      "score": 3.0,
      "candidate": "def check_subset(nested_list, nested_list2):\n    if len(nested_list) == 0:\n        return True\n    elif len(nested_list) == 1:\n        return nested_list[0] in nested_list2\n    else:\n        return check_subset(nested_list[0], nested_list2) or check_subset(nested_list[1:], nested_list2)\n\n\nif __name__ == \"__main__\":\n    assert check_subset([1, 2, 3, 4, 5, 6, 7, 8, 9], [1, 2, 3, 4, 5, 6, 7, 8, 9])\n    assert not check_subset([1, 2, 3, 4, 5, 6, 7, 8, 9], [1, 3, 4, 5, 6, 7, 8, 9])\n    assert check_subset([1, 2, 3, 4, 5, 6, 7, 8, 9], [1, 3, 4, 5, 6, 8, 9])\n    assert check_subset([1, 2, 3, 4, 5, 6, 7, 8, 9], [1, 3, 4, 5, 6, 8, 9])\n    assert check_subset([1, 2, 3, 4, 5, 6, 7, 8, 9], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n    assert check_subset([1, 2, 3, 4, 5, 6, 7, 8, 9], [1, 2, 3, 4, 5, 6, 8, 9, 10])\n    assert check_subset([1, 2, 3, 4, 5, 6, 7, 8, 9], [1, 2, 3, 4, 5, 6, 8, 9, 10, 11])\n    assert check_subset([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11], [1, 2, 3, 4, 5, 6, 8, 9, 10])"
    },
    {
      "rank": 96,
      "score": 3.0,
      "candidate": "def check_if_list_subset(a, b):\n    if type(a)!= list:\n        return False\n    if type(b)!= list:\n        return False\n    if len(a)!= len(b):\n        return False\n\n    for i in range(len(a)):\n        if a[i]!= b[i]:\n            return False\n\n    return True\n\n\nif __name__ == '__main__':\n    a = [1, 2, 3]\n    b = [4, 5, 6]\n\n    print(check_if_list_subset(a, b))"
    },
    {
      "rank": 97,
      "score": 3.0,
      "candidate": "def check_list_subset(list_1, list_2):\n    \"\"\"\n    :type list_1: list\n    :type list_2: list\n    :rtype: bool\n    \"\"\"\n    if len(list_1) == len(list_2):\n        for i in list_1:\n            if not check_list_subset(i, list_2):\n                return False\n        return True\n    else:\n        return False\n\n\nif __name__ == '__main__':\n    assert check_list_subset([1, 2, 3], [2, 3]) == True\n    assert check_list_subset([1, 2, 3], [4]) == False"
    },
    {
      "rank": 98,
      "score": 3.0,
      "candidate": "def nested_subset(nested_list, nested_list_2):\n    if isinstance(nested_list, list) and isinstance(nested_list_2, list):\n        return set(nested_list) == set(nested_list_2)\n    else:\n        return False\n\n\nprint(nested_subset([1, 2, 3], [4, 5]))\nprint(nested_subset([1, 2, 3, 4], [5, 6]))\nprint(nested_subset([1, 2, 3, 4], [1, 2, 3]))\nprint(nested_subset([1, 2, 3, 4], [2, 3]))"
    },
    {
      "rank": 99,
      "score": 3.0,
      "candidate": "def check_subset(list1, list2):\n    # write your code here\n    return all(list1[i] in list2[i] for i in range(len(list1)))\n\n\n# Test cases\nlist1 = [1, 2, 3]\nlist2 = [1, 2, 4]\nprint(check_subset(list1, list2))\n\nlist1 = [1, 2, 3, 4]\nlist2 = [1, 2]\nprint(check_subset(list1, list2))\n\nlist1 = [1, 2, 3, 4]\nlist2 = [1, 2, 3, 4, 5]\nprint(check_subset(list1, list2))"
    },
    {
      "rank": 100,
      "score": 3.0,
      "candidate": "def is_subset(nested_list1, nested_list2):\n    if type(nested_list1) is not list:\n        return False\n    if type(nested_list2) is not list:\n        return False\n    return nested_list1 == nested_list2\n\n\ndef is_subset_recursive(nested_list1, nested_list2):\n    if type(nested_list1) is not list:\n        return False\n    if type(nested_list2) is not list:\n        return False\n    if len(nested_list1) == 0:\n        return True\n    return is_subset_recursive(nested_list1[0], nested_list2) or is_subset_recursive(nested_list1[1:], nested_list2)\n\n\nif __name__ == \"__main__\":\n    print(is_subset([1, 2, 3], [4, 5]))\n    print(is_subset([1, 2, 3], [4, 6]))\n    print(is_subset([1, 2, 3], [5, 6]))\n    print(is_subset([1, 2, 3], [4, 7]))\n    print(is_subset([1, 2, 3], [5, 8]))\n    print(is_subset([1, 2, 3], [6, 7]))\n    print(is_subset([1, 2, 3], [6, 8]))\n    print(is_subset([1, 2, 3], [7, 8]))\n    print(is_subset([1, 2, 3], [7, 9]))\n    print(is_subset([1, 2, 3], [8, 9]))\n    print(is_subset([1, 2, 3], [8, 9, 10]))\n    print(is_subset([1, 2, 3], [9, 10]))\n    print(is_subset([1, 2, 3], [10, 10]))\n    print(is_subset([1, 2, 3], [9, 10, 10]))\n    print(is_subset([1, 2, 3], [10, 10, 10]))\n    print(is_subset([1, 2, 3], [9, 10, 10, 9]))\n    print(is"
    }
  ]
}