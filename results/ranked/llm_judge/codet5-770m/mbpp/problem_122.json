{
  "timestamp": "2025-09-14T13:21:50.900541",
  "method": "improved_llm_judge",
  "judge_model": "codellama/CodeLlama-7b-Python-hf",
  "target_model": "codet5-770m",
  "dataset": "mbpp",
  "problem_number": 122,
  "total_candidates": 100,
  "results": [
    {
      "rank": 1,
      "score": 10.0,
      "candidate": "list = [-1, -2, -3, -4, -5]\nsum = lambda x: x if x >= 0 else 0\nprint(sum(list))"
    },
    {
      "rank": 2,
      "score": 10.0,
      "candidate": "def negative_sum(numbers):\n    return sum(map(lambda x: x if x < 0 else 0, numbers))\n\n\nprint(negative_sum([-1, 2, -4, -8, 9, 3, -2, -5]))\nprint(negative_sum([-1, 2, -4, -8, 9, 3, -2, -5, -6, -7]))"
    },
    {
      "rank": 3,
      "score": 10.0,
      "candidate": "# Time Complexity: O(n)\n# Space Complexity: O(n)\n\n\ndef negative_sum(arr):\n    return sum(map(lambda x: x if x < 0 else 0, arr))\n\n\ndef main():\n    arr = [5, -3, -4, -7, -8]\n    print(negative_sum(arr))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 4,
      "score": 10.0,
      "candidate": "numbers = [0, -2, -3, -4, -5]\n\nprint(f\"Sum of negative numbers in the given list is {sum(map(lambda x: x if x < 0 else 0, numbers))}\")"
    },
    {
      "rank": 5,
      "score": 10.0,
      "candidate": "numbers = [4, -2, 3, -1]\n\nsum = lambda x: x + sum(filter(lambda y: y < 0, x))\n\nprint(sum(numbers))"
    },
    {
      "rank": 6,
      "score": 10.0,
      "candidate": "list_of_numbers = [3, -2, -3, -5, -4, -6, -7, -8]\n\nprint(\"The sum of the negative numbers is {}\".format(sum(filter(lambda x: x < 0, list_of_numbers))))"
    },
    {
      "rank": 7,
      "score": 10.0,
      "candidate": "sum_negative = lambda nums: sum(filter(lambda x: x < 0, nums))\n\nprint(sum_negative([-1, 0, 1, 2, -3]))"
    },
    {
      "rank": 8,
      "score": 10.0,
      "candidate": "def negative_sum(numbers):\n    return sum(filter(lambda x: x < 0, numbers))\n\nprint(negative_sum([-10, -3, -7, -2, -9]))"
    },
    {
      "rank": 9,
      "score": 10.0,
      "candidate": "def sum_negatives(nums):\n    return sum(filter(lambda x: x < 0, nums))\n\nif __name__ == \"__main__\":\n    print(sum_negatives([-1, -2, -3, -4]))"
    },
    {
      "rank": 10,
      "score": 10.0,
      "candidate": "def sum_negative(numbers):\n    return sum(filter(lambda x: x < 0, numbers))\n\n\nprint(sum_negative([0, -1, -2, -3, -4, -5]))"
    },
    {
      "rank": 11,
      "score": 10.0,
      "candidate": "def sum_neg(nums):\n    return sum(map(lambda x: -x, nums))\n\nprint(sum_neg([-5, -1, -3, 0, -3, -10]))"
    },
    {
      "rank": 12,
      "score": 10.0,
      "candidate": "from functools import reduce\n\nnumbers = [1, -3, 5, -7, 4]\nsum = reduce(lambda x, y: x + y, numbers, 0)\nprint(sum)"
    },
    {
      "rank": 13,
      "score": 9.951728666067407,
      "candidate": "list = [4, -5, -1, -2, -3, -4, -6, -7, -8, -9]\n\nsum = lambda x: x + sum(filter(lambda y: y < 0, x))\n\nprint(sum(list))"
    },
    {
      "rank": 14,
      "score": 9.941298161873501,
      "candidate": "def negative_sum(list):\n    return sum(filter(lambda x: x < 0, list))\n\n\nif __name__ == \"__main__\":\n    print(negative_sum([-1, -4, 3, 2, -8, 10]))"
    },
    {
      "rank": 15,
      "score": 9.939124391193213,
      "candidate": "sum_negative = lambda x: sum([i for i in x if i < 0])\n\nprint(sum_negative([-3, -5, -7, -9, -11]))"
    },
    {
      "rank": 16,
      "score": 9.921713039146784,
      "candidate": "numbers = list(map(lambda x: -x, input().split()))\nprint(sum(numbers))"
    },
    {
      "rank": 17,
      "score": 9.87951139986876,
      "candidate": "list_of_numbers = [3, -5, 10, -2, 0, -2]\n\nprint(list_of_numbers)\n\nsum_of_negative_numbers = list(map(lambda x: x if x < 0 else 0, list_of_numbers))\n\nprint(sum_of_negative_numbers)"
    },
    {
      "rank": 18,
      "score": 9.878910264071733,
      "candidate": "def negative_sum(numbers):\n    return sum(filter(lambda x: x < 0, numbers))\n\n\nnumbers = [1, -2, 3, 4, 5, -6]\nprint(negative_sum(numbers))"
    },
    {
      "rank": 19,
      "score": 9.875414698160224,
      "candidate": "def negative_sum(numbers):\n    return sum(filter(lambda x: x < 0, numbers))\n\nprint(negative_sum([-3, -2, -1, 0, 4, 5]))"
    },
    {
      "rank": 20,
      "score": 9.832268863802668,
      "candidate": "list_of_numbers = [-2, -3, -4, -5]\n\nsum_of_negative_numbers = list(map(lambda num: num if num < 0 else 0, list_of_numbers))\n\nprint(sum_of_negative_numbers)"
    },
    {
      "rank": 21,
      "score": 9.824000279920451,
      "candidate": "numbers = [1, -2, -3, 4, -5]\nprint(sum(filter(lambda x: x < 0, numbers)))"
    },
    {
      "rank": 22,
      "score": 9.812840505817375,
      "candidate": "sum_neg = lambda x: -x\nprint(sum_neg(5))\nprint(sum_neg(10))\nprint(sum_neg(0))\nprint(sum_neg(-1))\nprint(sum_neg(-2))\nprint(sum_neg(-3))\nprint(sum_neg(-4))\nprint(sum_neg(-5))\nprint(sum_neg(0))\nprint(sum_neg(-1))\nprint(sum_neg(-2))\nprint(sum_neg(-3))\nprint(sum_neg(-4))\nprint(sum_neg(-5))\nprint(sum_neg(0))\nprint(sum_neg(-1))\nprint(sum_neg(-2))\nprint(sum_neg(-3))\nprint(sum_neg(-4))\nprint(sum_neg(-5))"
    },
    {
      "rank": 23,
      "score": 9.78979166324777,
      "candidate": "from functools import reduce\n\n\ndef negative_sum(numbers):\n    return reduce(lambda x, y: x + y, numbers, 0)\n\n\nif __name__ == '__main__':\n    print(negative_sum([-1, -3, -4, -5, -7]))"
    },
    {
      "rank": 24,
      "score": 9.724995158471465,
      "candidate": "def sum_negative_numbers(list_of_numbers):\n    return sum(filter(lambda x: x < 0, list_of_numbers))\n\n\nprint(sum_negative_numbers([-1, -2, -3, -4, -5]))"
    },
    {
      "rank": 25,
      "score": 9.6295654715845,
      "candidate": "nums = [-1, -2, -3, -4, -5, -6]\n\nprint(sum(map(lambda x: x * -1, nums)))"
    },
    {
      "rank": 26,
      "score": 9.61558428250447,
      "candidate": "def negative_sum(list_of_numbers):\n    return sum(filter(lambda x: x < 0, list_of_numbers))\n\n# Testing\ntest_list = [-1, 2, -3, 4, -5, 6, -7, 8, 9]\nprint(negative_sum(test_list))"
    },
    {
      "rank": 27,
      "score": 9.370583536698913,
      "candidate": "list = [1, -2, -3]\n\ndef negative_sum(list):\n    return sum(filter(lambda x: x < 0, list))\n\nprint(negative_sum(list))"
    },
    {
      "rank": 28,
      "score": 9.234050852198141,
      "candidate": "def negative_sum(num):\n    return sum(map(lambda x: -x, num))"
    },
    {
      "rank": 29,
      "score": 9.226766272351448,
      "candidate": "from math import sqrt\n\ndef negative_sum(numbers):\n    return sum(filter(lambda x: x < 0, numbers))\n\nif __name__ == \"__main__\":\n    assert negative_sum([-2, -3, -4]) == 4\n    assert negative_sum([-1, 0, -2, -3, -4]) == 9\n    assert negative_sum([-1, 0, -2, -3, -4, -5]) == 6\n    assert negative_sum([-1, 0, -2, -3, -4, -5, -6]) == -9\n    assert negative_sum([-1, 0, -2, -3, -4, -5, -6, -7, -8, -9]) == -10"
    },
    {
      "rank": 30,
      "score": 9.205959372648458,
      "candidate": "def negative_sum(list):\n    return sum(filter(lambda x: x < 0, list))\n\n\nif __name__ == '__main__':\n    print(negative_sum([-1, 3, -5, -7, -4, -10]))"
    },
    {
      "rank": 31,
      "score": 9.183391466815202,
      "candidate": "numbers = [10, -4, 5, 3, -2, -1, 8, 7]\n\nsum_of_negative = lambda x: sum(filter(lambda y: y < 0, x))\n\nprint(sum_of_negative(numbers))"
    },
    {
      "rank": 32,
      "score": 9.177268828905222,
      "candidate": "list_of_numbers = [2, -3, 4, -5, -6, -7]\n\nsum = sum(map(lambda x: x if x < 0 else 0, list_of_numbers))\n\nprint(sum)"
    },
    {
      "rank": 33,
      "score": 9.122564458729856,
      "candidate": "def negative_sum(numbers):\n    return sum(filter(lambda x: x < 0, numbers))\n\n\nprint(negative_sum([-2, -5, -3, -4, -1]))"
    },
    {
      "rank": 34,
      "score": 8.95994420569242,
      "candidate": "def sum_negative(numbers):\n    return sum(filter(lambda x: x < 0, numbers))\n\nprint(sum_negative([-4, -3, -2, -1]))"
    },
    {
      "rank": 35,
      "score": 8.932217008005624,
      "candidate": "def negative_sum(list_of_numbers):\n    return sum(filter(lambda x: x < 0, list_of_numbers))\n\n\nprint(negative_sum([-3, 4, -7, -5, -2, -8, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))"
    },
    {
      "rank": 36,
      "score": 8.910084504002544,
      "candidate": "def negative_sum(numbers):\n    return sum(filter(lambda x: x < 0, numbers))\n\n\nprint(negative_sum([-1, -2, -3, -4, -5]))"
    },
    {
      "rank": 37,
      "score": 8.85571690049604,
      "candidate": "def sum_neg(a):\n    return sum(filter(lambda x: x<0, a))\n\na = [1, -2, 3, -4]\nprint(sum_neg(a))\n\n\"\"\"\nTime Complexity : O(n)\nSpace Complexity : O(1)\n\"\"\""
    },
    {
      "rank": 38,
      "score": 8.81367773444215,
      "candidate": "def negative_sum(lst):\n    return sum(filter(lambda x: x < 0, lst))\n\n\nprint(negative_sum([-2, -3, -4, -5, -6]))"
    },
    {
      "rank": 39,
      "score": 8.76828871349479,
      "candidate": "nums = [9, -3, -4, -5, -1, -2, -5]\n\n# define the sum of negative numbers\nsum_negative = lambda x: sum(filter(lambda y: y < 0, x))\n\n# call the sum of negative numbers\nprint(sum_negative(nums))"
    },
    {
      "rank": 40,
      "score": 8.715724466237427,
      "candidate": "sum_negative = lambda num: sum(filter(lambda x: x < 0, num))\n\nprint(sum_negative([-1, 2, -3, -4, 5]))"
    },
    {
      "rank": 41,
      "score": 8.692801520950061,
      "candidate": "def sum_negative(lst):\n    return sum(filter(lambda x: x < 0, lst))\n\n\nif __name__ == '__main__':\n    assert sum_negative([-3, -5, -3, -4, -3, -2, -3, -2, -1]) == 6"
    },
    {
      "rank": 42,
      "score": 8.625142247198651,
      "candidate": "def sum_of_negative_numbers(list_of_numbers):\n    return list(filter(lambda x: x < 0, list_of_numbers))\n\n\nprint(sum_of_negative_numbers([-1, -2, -3, -4, -5, -6]))"
    },
    {
      "rank": 43,
      "score": 8.623000730200317,
      "candidate": "def negative_sum(nums):\n    return sum(filter(lambda x: x < 0, nums))\n\n\nif __name__ == '__main__':\n    nums = [1, -1, 3, -2, 4, -5]\n    print(negative_sum(nums))"
    },
    {
      "rank": 44,
      "score": 8.616253589228675,
      "candidate": "def negative_sum(numbers):\n    return sum(filter(lambda x: x < 0, numbers))\n\n\nprint(negative_sum([-1, -2, -3, -4, -5]))"
    },
    {
      "rank": 45,
      "score": 8.610076160146226,
      "candidate": "def negative_sum(list_num):\n    return sum(filter(lambda x: x < 0, list_num))\n\n\nprint(negative_sum([-1, -2, -3, -4, -5]))"
    },
    {
      "rank": 46,
      "score": 8.60156811074208,
      "candidate": "def negative_sum(nums):\n    return sum(filter(lambda x: x < 0, nums))\n\n\nprint(negative_sum([-1, -2, -3, -4, -5]))"
    },
    {
      "rank": 47,
      "score": 8.565425580227462,
      "candidate": "def negative_sum(list_):\n    return sum(filter(lambda x: x < 0, list_))\n\n\nlist_ = [3, -5, 4, -6]\nprint(negative_sum(list_))"
    },
    {
      "rank": 48,
      "score": 8.548876241946822,
      "candidate": "def sum_neg(l):\n    return sum(filter(lambda x: x < 0, l))\n\n\ndef test():\n    assert sum_neg([-1, 4, -5, 2, 3]) == 6\n    assert sum_neg([-1, -1, -1, -1, -1]) == 5\n\n\ntest()"
    },
    {
      "rank": 49,
      "score": 8.53012858503943,
      "candidate": "# def negative_sum(numbers):\n#     return sum(filter(lambda x: x < 0, numbers))\n\n\ndef negative_sum(numbers):\n    return sum(filter(lambda x: x < 0, numbers))\n\n\nprint(negative_sum([-10, -1, 5, 0, 3, 2, -3, -5, -6]))"
    },
    {
      "rank": 50,
      "score": 8.499905739299377,
      "candidate": "def negative_sum(numbers):\n    return sum([n for n in numbers if n < 0])\n\nnumbers = [1, -3, 4, 5]\nprint(negative_sum(numbers))"
    },
    {
      "rank": 51,
      "score": 8.490324832712195,
      "candidate": "def negative_sum(nums):\n    return sum(filter(lambda x: x < 0, nums))\n\nprint(negative_sum([-4, -1, 0, 2, 5, -3]))\nprint(negative_sum([-4, -1, 0, 2, 5, -3, -2, -1]))\nprint(negative_sum([-4, -1, 0, 2, 5, -3, -2, -1, -3]))"
    },
    {
      "rank": 52,
      "score": 8.478208546788407,
      "candidate": "def negative_sum(numbers):\n    return sum(filter(lambda x: x < 0, numbers))\n\nprint(negative_sum([-3, 4, -1, 2, -5, 1]))"
    },
    {
      "rank": 53,
      "score": 8.437695832075478,
      "candidate": "def negative_sum(arr):\n    return sum(filter(lambda x: x < 0, arr))\n\n\nprint(negative_sum([-1, 2, -3, 4, -5]))"
    },
    {
      "rank": 54,
      "score": 8.426531424889468,
      "candidate": "def negative_sum(numbers):\n    return sum(filter(lambda num: num < 0, numbers))\n\n\nif __name__ == '__main__':\n    print(negative_sum([-2, -3, -4, -5]))"
    },
    {
      "rank": 55,
      "score": 8.408439383654278,
      "candidate": "# solution\n\nsum = lambda x: sum([num for num in x if num < 0])\n\nprint(sum([1, 2, -3, 4]))"
    },
    {
      "rank": 56,
      "score": 8.386620303250325,
      "candidate": "def negative_sum(nums):\n    return sum(filter(lambda x: x < 0, nums))\n\n\nassert negative_sum([-1, -2, -3, -4]) == 5\nassert negative_sum([-1, -2, -3, -4, -5]) == 10"
    },
    {
      "rank": 57,
      "score": 8.375312293858853,
      "candidate": "list_of_numbers = [4, -1, 2, -3]\n\nprint(list_of_numbers)\nprint(sum(list_of_numbers))"
    },
    {
      "rank": 58,
      "score": 8.334608500525688,
      "candidate": "def negative_sum(arr):\n    return sum(filter(lambda x: x < 0, arr))\n\n\nprint(negative_sum([-5, -2, -3, -4, -7]))"
    },
    {
      "rank": 59,
      "score": 8.327367757082776,
      "candidate": "def sum_of_negatives(nums):\n    return sum(filter(lambda x: x < 0, nums))\n\n\nprint(sum_of_negatives([-3, 4, -1, -2, 1, 2]))"
    },
    {
      "rank": 60,
      "score": 8.298597569547805,
      "candidate": "def negative_sum(numbers):\n    return sum(filter(lambda num: num < 0, numbers))\n\nprint(negative_sum([1, -1, 2, -2, -3, -3]))"
    },
    {
      "rank": 61,
      "score": 8.294940769211511,
      "candidate": "def negative_sum(numbers):\n    return sum(filter(lambda num: num < 0, numbers))\n\n\nassert negative_sum([-1, -5, -5, -2, -1, -4, -5, -4, -4, -3, -2, -3, -1, -5]) == 6\nassert negative_sum([-1, -5, -5, -2, -1, -4, -5, -4, -4, -3, -2, -3, -1, -5]) == 0\nassert negative_sum([-1, -5, -5, -2, -1, -4, -5, -4, -4, -3, -2, -3, -1, -5]) == 6\nassert negative_sum([-1, -5, -5, -2, -1, -4, -5, -4, -3, -2, -3, -1, -5]) == 0\nassert negative_sum([-1, -5, -5, -2, -1, -4, -5, -4, -3, -2, -3, -1, -5]) == 0\nassert negative_sum([-1, -5, -5, -2, -1, -4, -5, -4, -3, -2, -3, -1, -5]) == 0\nassert negative_sum([-1, -5, -5, -2, -1, -4, -5, -4, -3, -2, -3, -1, -5]) == 0\nassert negative_sum([-1, -5, -5, -2, -1, -4, -5, -4, -3, -2, -3, -1, -5]) == 0"
    },
    {
      "rank": 62,
      "score": 8.289838256518838,
      "candidate": "def negative_sum(nums):\n    return sum(map(lambda x: x if x < 0 else 0, nums))\n\n\nif __name__ == \"__main__\":\n    assert negative_sum([-1, -2, -3, -4, -5]) == 0, \"0\""
    },
    {
      "rank": 63,
      "score": 8.251903304236286,
      "candidate": "def negative_sum(numbers):\n    return sum(filter(lambda x: x < 0, numbers))\n\n\nprint(negative_sum([-1, -2, -3, -4, -5, -6, -7, -8, -9]))"
    },
    {
      "rank": 64,
      "score": 8.214125058964552,
      "candidate": "# A list of negative numbers\nnumbers = [3, -2, 4, -5]\n\n# Calling lambda function\nsum_of_negative_numbers = lambda x: x if x < 0 else 0\n\n# Calling sum_of_negative_numbers function\nsum_of_negative_numbers_sum = sum(map(lambda x: sum_of_negative_numbers(x), numbers))\n\n# Printing sum of negative numbers\nprint(f\"Sum of negative numbers is {sum_of_negative_numbers_sum}\")"
    },
    {
      "rank": 65,
      "score": 8.209707251476969,
      "candidate": "def negative_sum(numbers):\n    return sum(filter(lambda x: x < 0, numbers))\n\n\nprint(negative_sum([-3, -2, -1, -4, -5, -6, -7]))"
    },
    {
      "rank": 66,
      "score": 8.193565922652176,
      "candidate": "numbers = [1, -2, -3, 4, 5]\n\n\ndef negative_sum(numbers):\n    return sum(filter(lambda x: x < 0, numbers))\n\n\nprint(negative_sum(numbers))"
    },
    {
      "rank": 67,
      "score": 8.185309335307622,
      "candidate": "def negative_sum(list_of_numbers):\n    return sum(filter(lambda x: x < 0, list_of_numbers))\n\n\nprint(negative_sum([-3, 4, -2, 1, -5, 2]))"
    },
    {
      "rank": 68,
      "score": 8.172253082181854,
      "candidate": "def negative_sum(numbers):\n    return sum(filter(lambda x: x < 0, numbers))\n\n\nprint(negative_sum([-2, -3, 4, -5, 6, -7]))"
    },
    {
      "rank": 69,
      "score": 8.163300679823958,
      "candidate": "from functools import reduce\n\n\ndef negative_sum(nums):\n    return reduce(lambda x, y: x + y, nums, 0)\n\n\nif __name__ == '__main__':\n    assert negative_sum([-1, 2, 3]) == 4\n    assert negative_sum([0, -1, 2, 3]) == 4\n    assert negative_sum([2, -3, 0, -1, -2, -4]) == -6"
    },
    {
      "rank": 70,
      "score": 8.144125099485041,
      "candidate": "def negative_sum(list_of_numbers):\n    return sum(filter(lambda x: x < 0, list_of_numbers))\n\n\nprint(negative_sum([-1, 0, 3, 4, 2]))"
    },
    {
      "rank": 71,
      "score": 8.143591138329747,
      "candidate": "def negative_sum(numbers):\n    return sum(map(lambda x: x if x < 0 else 0, numbers))\n\n\nif __name__ == '__main__':\n    print(negative_sum([-1, 2, -3]))"
    },
    {
      "rank": 72,
      "score": 8.024835682833125,
      "candidate": "def negative_sum(numbers):\n    return sum(map(lambda x: -x, numbers))\n\n\nif __name__ == '__main__':\n    print(negative_sum([3, 4, -3, -4]))"
    },
    {
      "rank": 73,
      "score": 7.990432406683839,
      "candidate": "def negative_sum(numbers):\n    return sum(filter(lambda x: x < 0, numbers))\n\n\ndef main():\n    print(negative_sum([-1, -2, -3, -4, -5]))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 74,
      "score": 7.938028884277233,
      "candidate": "numbers = [1, -2, 3, 4, 5]\n\nsum_negative = lambda x: sum(filter(lambda y: y < 0, x))\n\nprint(sum_negative(numbers))\n\n\n# O(n) time | O(n) space"
    },
    {
      "rank": 75,
      "score": 7.8912769574414305,
      "candidate": "def negative_sum(list_num):\n    return sum(filter(lambda num: num < 0, list_num))\n\n\nprint(negative_sum([-4, -5, -2, -3, -6, -7]))"
    },
    {
      "rank": 76,
      "score": 7.868947655733293,
      "candidate": "def negative_sum(list_of_numbers):\n    return sum(filter(lambda x: x < 0, list_of_numbers))\n\n\ndef test_negative_sum():\n    assert negative_sum([-2, 0, -3, -4]) == 12"
    },
    {
      "rank": 77,
      "score": 7.84634113240411,
      "candidate": "def negative_sum(nums):\n    return sum(map(lambda x: -x, nums))\n\n\nprint(negative_sum([4, -5, 6, -7]))"
    },
    {
      "rank": 78,
      "score": 7.834022619458933,
      "candidate": "def negative_sum(lst):\n    return sum(filter(lambda x: x < 0, lst))\n\n\nprint(negative_sum([4, -2, 3, -5, -7]))\nprint(negative_sum([-2, -5, -7, -9]))"
    },
    {
      "rank": 79,
      "score": 7.780351419995229,
      "candidate": "# def negative_sum(nums):\n#     return sum(filter(lambda x: x < 0, nums))\n\n\ndef negative_sum(nums):\n    return sum(filter(lambda x: x < 0, nums))\n\n\nprint(negative_sum([-1, -2, -3, -4, -5]))"
    },
    {
      "rank": 80,
      "score": 7.738292593776799,
      "candidate": "def negative_sum(numbers):\n    return sum(filter(lambda x: x < 0, numbers))\n\n\nprint(negative_sum([-1, 4, 2, -2, 7, -4]))"
    },
    {
      "rank": 81,
      "score": 7.5819855281879285,
      "candidate": "def negative_sum(list):\n    return sum(filter(lambda x: x < 0, list))\n\n\nif __name__ == \"__main__\":\n    print(negative_sum([-1, -2, -3, -4]))"
    },
    {
      "rank": 82,
      "score": 7.562924366763077,
      "candidate": "def negative_sum(nums):\n    return sum(filter(lambda x: x < 0, nums))\n\n\nprint(negative_sum([-1, -2, -3, -4, -5]))"
    },
    {
      "rank": 83,
      "score": 7.4878043221155455,
      "candidate": "def negative_sum(list_num):\n    return sum(filter(lambda x: x < 0, list_num))\n\n\nlist_num = [1, -2, 3, 4, -5, 6]\nprint(negative_sum(list_num))"
    },
    {
      "rank": 84,
      "score": 7.464609382504557,
      "candidate": "import numpy as np\n\n\ndef negative_sum(numbers):\n    return np.sum(list(filter(lambda x: x < 0, numbers)))\n\n\ndef main():\n    print(negative_sum([-1, 2, 3, -5, -4]))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 85,
      "score": 7.4506599871439985,
      "candidate": "# Solution:\nsum = lambda x: x if x > 0 else 0\nprint(sum([-1, -2, -3, -4, -5, -6, -7, -8, -9]))"
    },
    {
      "rank": 86,
      "score": 7.134571892399572,
      "candidate": "def negative_sum(nums):\n    return sum(map(lambda x: x if x < 0 else 0, nums))\n\n\nprint(negative_sum([-1, -2, -3, -4]))"
    },
    {
      "rank": 87,
      "score": 3.0,
      "candidate": "def negative_sum(arr):\n    return sum(filter(lambda x: x < 0, arr))\n\n\nprint(negative_sum([-2, -4, -6, -8]))"
    },
    {
      "rank": 88,
      "score": 3.0,
      "candidate": "import unittest\n\ndef negative_sum(numbers):\n    return sum(filter(lambda x: x < 0, numbers))\n\n\nclass Test(unittest.TestCase):\n    def test_negative_sum(self):\n        self.assertEqual(negative_sum([-1, 0, 1, 2, 3]), 6)\n        self.assertEqual(negative_sum([-1, 0, 1, 2, 3, 4]), 6)\n        self.assertEqual(negative_sum([-1, 0, 1, 2, 3, 4, 5, 6]), 6)\n\n\nif __name__ == '__main__':\n    unittest.main()"
    },
    {
      "rank": 89,
      "score": 3.0,
      "candidate": "list_of_negative_numbers = [1, -2, 3, 4, 5]\n\nsum_negative_numbers = list(map(lambda x: x if x < 0 else 0, list_of_negative_numbers))\n\nprint(sum_negative_numbers)"
    },
    {
      "rank": 90,
      "score": 3.0,
      "candidate": "# Using lambda function\n\nsum_negative = lambda nums: sum(filter(lambda x: x < 0, nums))\n\n\n# Using lambda function\n\nsum_negative_list = list(filter(lambda x: x < 0, [1, 2, 3, -4, 5, 6, 7, 8, 9]))\n\nprint(sum_negative_list)"
    },
    {
      "rank": 91,
      "score": 3.0,
      "candidate": "def negative_sum(list):\n    return sum(filter(lambda x: x < 0, list))\n\n\nprint(negative_sum([-3, -2, 1, 0, 5]))"
    },
    {
      "rank": 92,
      "score": 3.0,
      "candidate": "list_of_numbers = [1, 2, -3, -4, 5, 6, -7, -8, -9, -10]\n\n\ndef negative_sum(list_of_numbers):\n    return sum(list(filter(lambda x: x < 0, list_of_numbers)))\n\n\nprint(negative_sum(list_of_numbers))"
    },
    {
      "rank": 93,
      "score": 3.0,
      "candidate": "def negative_sum(lst):\n    return sum([num for num in lst if num < 0])\n\nprint(negative_sum([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10]))\n\n\ndef negative_sum(lst):\n    return sum(filter(lambda num: num < 0, lst))\n\nprint(negative_sum([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10]))\n\n\ndef negative_sum(lst):\n    return sum(filter(lambda num: num < 0, filter(lambda num: num > 0, lst)))\n\nprint(negative_sum([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10]))\n\n\ndef negative_sum(lst):\n    return sum(filter(lambda num: num < 0, filter(lambda num: num > 0, lst)))\n\nprint(negative_sum([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10]))\n\n\ndef negative_sum(lst):\n    return sum(filter(lambda num: num < 0, filter(lambda num: num > 0, lst)))\n\nprint(negative_sum([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10]))"
    },
    {
      "rank": 94,
      "score": 3.0,
      "candidate": "# solution 1\n\n\ndef negative_sum(numbers):\n    return sum(filter(lambda x: x < 0, numbers))\n\n\nprint(negative_sum([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10]))\n\n\n# solution 2\n\n\ndef negative_sum(numbers):\n    return sum(filter(lambda x: x < 0, numbers))\n\n\nprint(negative_sum([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10]))"
    },
    {
      "rank": 95,
      "score": 3.0,
      "candidate": "list_of_numbers = [-1, -2, -3, -4, -5]\n\nsum_of_negative_numbers = list(map(lambda num: num if num < 0 else 0, list_of_numbers))\n\nprint(sum_of_negative_numbers)\n\n# Output: [-1, -2, -3, -4, -5]"
    },
    {
      "rank": 96,
      "score": 3.0,
      "candidate": "# add negative numbers\nsum = lambda numbers: sum(map(lambda x: -x, numbers))\n\n# run the function\nprint(sum([1,2,-3]))"
    },
    {
      "rank": 97,
      "score": 3.0,
      "candidate": "def negative_sum(arr):\n    return sum(filter(lambda x: x < 0, arr))\n\n\nprint(negative_sum([-5, -2, -1, -4, -3]))"
    },
    {
      "rank": 98,
      "score": 3.0,
      "candidate": "# Write a function to calculate the sum of the negative numbers of a given list of numbers using lambda function.\n\n\n# Write a function to calculate the sum of the negative numbers of a given list of numbers using lambda function.\n\n\ndef sum_negative_numbers(list_of_numbers):\n    return sum(filter(lambda x: x < 0, list_of_numbers))\n\n\nprint(sum_negative_numbers([-1, 1, 2, 3, 4]))"
    },
    {
      "rank": 99,
      "score": 3.0,
      "candidate": "numbers = [2, -3, -4, -5, -6, -7]\n\nsum_neg_numbers = lambda x: x if x >= 0 else 0\n\nprint(sum_neg_numbers(numbers))"
    },
    {
      "rank": 100,
      "score": 3.0,
      "candidate": "# Solution:\n\ndef negative_sum(nums):\n    return sum(filter(lambda x: x < 0, nums))\n\n\nprint(negative_sum([-1, 2, -3, 4, -5]))\nprint(negative_sum([-1, 2, -3, 4, -5, -6, -7, -8, -9]))\nprint(negative_sum([-1, 2, -3, 4, -5, -6, -7, -8, -9, -10]))\nprint(negative_sum([-1, 2, -3, 4, -5, -6, -7, -8, -9, -10, -11, -12, -13, -14, -15]))"
    }
  ]
}