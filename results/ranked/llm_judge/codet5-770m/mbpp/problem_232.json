{
  "timestamp": "2025-09-14T14:10:15.011382",
  "method": "improved_llm_judge",
  "judge_model": "codellama/CodeLlama-7b-Python-hf",
  "target_model": "codet5-770m",
  "dataset": "mbpp",
  "problem_number": 232,
  "total_candidates": 100,
  "results": [
    {
      "rank": 1,
      "score": 10.0,
      "candidate": "def sort_tuples(lst):\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            if lst[i] > lst[j]:\n                lst[i], lst[j] = lst[j], lst[i]\n    return lst\n\nif __name__ == \"__main__\":\n    print(sort_tuples([(1, 2), (3, 4), (5, 6)]))"
    },
    {
      "rank": 2,
      "score": 10.0,
      "candidate": "from typing import List\n\n\ndef sort_tuples(tuples: List[Tuple[int, int]]) -> List[Tuple[int, int]]:\n    return sorted(tuples, key=lambda x: x[0])"
    },
    {
      "rank": 3,
      "score": 10.0,
      "candidate": "def sort_tuples(lst):\n    return sorted(lst, key=lambda x: x[0])"
    },
    {
      "rank": 4,
      "score": 10.0,
      "candidate": "def sort_tuple(l):\n    # Your code here\n    l.sort(key = lambda tup: tup[0])\n    return l"
    },
    {
      "rank": 5,
      "score": 10.0,
      "candidate": "def sort_tuples(tuples):\n    for i in range(len(tuples)):\n        for j in range(len(tuples)):\n            if i!= j:\n                if tuples[i][0] == tuples[j][0]:\n                    tuples[i], tuples[j] = tuples[j], tuples[i]\n    return tuples\n\n\nprint(sort_tuples([(1, 2), (3, 4), (5, 6), (7, 8), (9, 10)]))"
    },
    {
      "rank": 6,
      "score": 10.0,
      "candidate": "def sorted_tuples(tup):\n    return sorted(tup, key=lambda x:x[0])\n\nprint(sorted_tuples(((1,2),(3,4),(5,6),(7,8),(9,10))))"
    },
    {
      "rank": 7,
      "score": 10.0,
      "candidate": "def sort_by_first_occurence(tuple_list):\n    # Your code here\n    return sorted(tuple_list, key=lambda x: x[0])\n\n\ndef main():\n    print(sort_by_first_occurence([(2, 3), (4, 2), (3, 3), (2, 3), (4, 2)]))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 8,
      "score": 10.0,
      "candidate": "def sort_tuples(tuples):\n    return sorted(tuples, key = lambda x: x[0])\n\nif __name__ == '__main__':\n    print(sort_tuples([(1, 2), (2, 3), (3, 4), (4, 5)]))\n    print(sort_tuples([(1, 2), (3, 4), (4, 5), (1, 3)]))\n    print(sort_tuples([(1, 2), (3, 4), (4, 5), (1, 3), (1, 4)]))"
    },
    {
      "rank": 9,
      "score": 10.0,
      "candidate": "def sort_tuple(t):\n    return sorted(t, key=lambda x: x[0])\n\nif __name__ == \"__main__\":\n    print(sort_tuple((1, 2, 3)))\n    print(sort_tuple((1, 2, 3, 4)))\n    print(sort_tuple((1, 2, 3, 4, 5)))"
    },
    {
      "rank": 10,
      "score": 10.0,
      "candidate": "def first_tuple(lst):\n    return sorted(lst, key=lambda x: x[0])\n\n\nprint(first_tuple([(1, 2), (3, 4), (5, 6)]))"
    },
    {
      "rank": 11,
      "score": 10.0,
      "candidate": "def sort_tuples(tuples):\n    return sorted(tuples, key=lambda t: t[0])\n\n\nif __name__ == \"__main__\":\n    print(sort_tuples([(2, 4), (3, 6), (1, 8)]))"
    },
    {
      "rank": 12,
      "score": 10.0,
      "candidate": "from typing import List\n\n\ndef insertion_sort(data: List[Tuple[int, int]]) -> List[Tuple[int, int]]:\n    n = len(data)\n    for i in range(n - 1, 0, -1):\n        for j in range(i):\n            if data[j][0] < data[j + 1][0]:\n                data[j + 1], data[j] = data[j], data[j + 1]\n    return data\n\n\nif __name__ == \"__main__\":\n    data = [(1, 2), (2, 3), (3, 1), (2, 4), (4, 5), (5, 2)]\n    print(insertion_sort(data))"
    },
    {
      "rank": 13,
      "score": 10.0,
      "candidate": "def sort_tuples(tup):\n    return sorted(tup, key=lambda tup: tup[0])\n\n\ndef main():\n    print(sort_tuples((1, 2, 3, 4, 5)))\n    print(sort_tuples((1, 2, 3, 4)))\n    print(sort_tuples((1, 2, 3)))\n    print(sort_tuples((1, 2, 4)))\n    print(sort_tuples((1, 2, 3, 4, 5)))\n    print(sort_tuples((1, 2, 3, 4, 5, 6)))\n    print(sort_tuples((1, 2, 3, 4, 5, 6, 7, 8, 9)))\n    print(sort_tuples((1, 2, 3, 4, 5, 6, 7, 8, 9, 10)))\n    print(sort_tuples((1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11)))\n    print(sort_tuples((1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20)))\n    print(sort_tuples((1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100)))\n    print(sort_tuples((1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15"
    },
    {
      "rank": 14,
      "score": 10.0,
      "candidate": "def sort_by_first(tuple_list):\n    sorted_list = sorted(tuple_list, key = lambda x: x[0])\n    return sorted_list\n\ndef main():\n    tuple_list = [(1,2),(3,4),(5,6),(7,8)]\n    print(sort_by_first(tuple_list))\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 15,
      "score": 10.0,
      "candidate": "def sort_tuples(tuples):\n    return sorted(tuples, key = lambda x: x[0])\n\n\nif __name__ == '__main__':\n    print(sort_tuples([(1, 2), (2, 3), (3, 4), (4, 5)]))\n    print(sort_tuples([(1, 2), (2, 3), (3, 4), (4, 5), (5, 6)]))\n    print(sort_tuples([(1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 7), (7, 8)]))"
    },
    {
      "rank": 16,
      "score": 10.0,
      "candidate": "def insertion_sort(arr):\n    for i in range(1, len(arr)):\n        key = arr[i][0]\n        j = i - 1\n        while j >= 0 and arr[j][0] > key:\n            arr[j + 1] = arr[j]\n            j -= 1\n        arr[j + 1] = key\n\n\narr = [(1, 10), (1, 20), (1, 30), (2, 40), (3, 50), (4, 60), (5, 70), (6, 80), (7, 90), (8, 100)]\ninsertion_sort(arr)\nprint(arr)"
    },
    {
      "rank": 17,
      "score": 10.0,
      "candidate": "def sort_tuples(tup):\n    return sorted(tup, key=lambda x: x[0])\n\nif __name__ == \"__main__\":\n    print(sort_tuples((1,2,3,4,5,6)))"
    },
    {
      "rank": 18,
      "score": 10.0,
      "candidate": "def sort_tuples(tuples):\n    for i in range(len(tuples)):\n        for j in range(i + 1, len(tuples)):\n            if tuples[i] > tuples[j]:\n                temp = tuples[i]\n                tuples[i] = tuples[j]\n                tuples[j] = temp\n    return tuples"
    },
    {
      "rank": 19,
      "score": 10.0,
      "candidate": "def sort_tuples(tuples):\n    return sorted(tuples, key=lambda t: t[0])"
    },
    {
      "rank": 20,
      "score": 9.0,
      "candidate": "def sort_tuples(tuples):\n    return sorted(tuples, key = lambda x: x[0])"
    },
    {
      "rank": 21,
      "score": 9.0,
      "candidate": "def sort_tuples(tuples):\n    for i in range(len(tuples)):\n        for j in range(len(tuples[i])):\n            if tuples[i][j] == 1:\n                tuples.pop(i)\n                break\n    return tuples"
    },
    {
      "rank": 22,
      "score": 9.0,
      "candidate": "def sort_by_first_occurrence(tuple_list):\n    return sorted(tuple_list, key=lambda x: x[0])"
    },
    {
      "rank": 23,
      "score": 9.0,
      "candidate": "def sort_tuples(tuples):\n    return sorted(tuples, key=lambda x: x[0])"
    },
    {
      "rank": 24,
      "score": 8.0,
      "candidate": "def sort_tuples(tuples):\n    # Your code here\n    return sorted(tuples, key=lambda x: x[0])"
    },
    {
      "rank": 25,
      "score": 8.0,
      "candidate": "def sort_tuple(tuples):\n    return sorted(tuples, key=lambda x: x[0])\n\n\nprint(sort_tuple([(1, 2), (1, 3), (1, 4), (2, 3), (2, 4), (2, 5)]))"
    },
    {
      "rank": 26,
      "score": 8.0,
      "candidate": "def sort_tuples(tuples):\n    sorted_tuples = sorted(tuples, key=lambda tup: tup[0])\n    return [tup[0] for tup in sorted_tuples]\n\n\nif __name__ == \"__main__\":\n    assert sort_tuples([(1, 2), (1, 3), (2, 3), (3, 1)]) == [1, 2, 3, 1]\n    assert sort_tuples([(1, 2), (1, 3), (2, 3), (3, 1)]) == [1, 2, 3, 1]\n    assert sort_tuples([(1, 2, 3), (1, 3, 4), (2, 3, 4), (3, 4, 5)]) == [1, 2, 3, 4, 5]\n    assert sort_tuples([(1, 2, 3), (1, 3, 4), (2, 3, 5), (3, 4, 6)]) == [1, 2, 3, 4, 5, 6]\n    assert sort_tuples([]) == []\n    assert sort_tuples([(1, 2, 3)]) == [1, 2, 3]"
    },
    {
      "rank": 27,
      "score": 8.0,
      "candidate": "def sort_by_first_element(lst):\n    new_lst = []\n    for i in range(len(lst)):\n        if i == 0:\n            new_lst.append(lst[i])\n        elif lst[i][0] == new_lst[-1][0]:\n            new_lst.append(lst[i])\n    return new_lst\n\nprint(sort_by_first_element([(1,2), (1,3), (1,4), (1,5)]))"
    },
    {
      "rank": 28,
      "score": 8.0,
      "candidate": "def sort_tuple(tuple_list):\n    return sorted(tuple_list, key=lambda tup: tup[0])\n\n\nif __name__ == \"__main__\":\n    print(sort_tuple([(1, 2), (3, 4), (5, 6)]))\n    print(sort_tuple([(1, 2), (3, 4), (5, 6)]))"
    },
    {
      "rank": 29,
      "score": 8.0,
      "candidate": "def sort_tuples(tuples):\n    sorted_tuples = []\n    for i in range(len(tuples)):\n        if i == 0:\n            sorted_tuples.append(tuples[i])\n        else:\n            if sorted_tuples[i][0] == tuples[i][0]:\n                sorted_tuples.insert(i, tuples[i])\n            else:\n                sorted_tuples.append(tuples[i])\n    return sorted_tuples"
    },
    {
      "rank": 30,
      "score": 8.0,
      "candidate": "def sort_tuple_first(tuples):\n    # Sort tuples by first occurrence of first element\n    tuples.sort(key=lambda x: x[0])\n    return tuples\n\nprint(sort_tuple_first([(1, 2), (2, 3), (3, 4), (4, 5)]))"
    },
    {
      "rank": 31,
      "score": 8.0,
      "candidate": "def first_element_sort(arr):\n    return sorted(arr, key=lambda tup: tup[0])\n\nprint(first_element_sort([(1, 2, 3), (1, 3, 2), (2, 3, 1)]))"
    },
    {
      "rank": 32,
      "score": 8.0,
      "candidate": "def sort_first_tuple(tuples):\n    for i in range(len(tuples)):\n        for j in range(i + 1, len(tuples)):\n            if tuples[i][0] == tuples[j][0]:\n                tuples[i], tuples[j] = tuples[j], tuples[i]\n    return tuples\n\n\nif __name__ == \"__main__\":\n    print(sort_first_tuple((1, 2, 3, 4, 5)))\n    print(sort_first_tuple((1, 2, 3, 4, 5, 6)))\n    print(sort_first_tuple((1, 2, 3, 4, 5, 6, 7, 8, 9)))"
    },
    {
      "rank": 33,
      "score": 8.0,
      "candidate": "def occurrence(lst):\n    return sorted(lst, key=lambda x: x[0])\n\n\nprint(occurrence([(1,2,3), (3,2,1), (2,1,2)]))\n\n# Time complexity: O(nlogn)\n# Space complexity: O(n)"
    },
    {
      "rank": 34,
      "score": 8.0,
      "candidate": "def sort_tuples(tuples):\n    tuples.sort(key=lambda x: x[0])\n    return tuples\n\n\nif __name__ == \"__main__\":\n    print(sort_tuples([(2, 7), (3, 6), (2, 1), (1, 3), (6, 4)]))"
    },
    {
      "rank": 35,
      "score": 8.0,
      "candidate": "def sort_tuple(l):\n    l.sort(key=lambda x: x[0])\n\n\ndef test_sort():\n    assert sort_tuple([(1, 2), (2, 3), (3, 1)]) == [(2, 3), (3, 1), (1, 2)]"
    },
    {
      "rank": 36,
      "score": 8.0,
      "candidate": "def sort_by_first_element(lst):\n    return sorted(lst, key=lambda x: x[0])\n\n\ndef main():\n    print(sort_by_first_element([(1, 2), (1, 3), (1, 4), (2, 3), (2, 4), (3, 4)]))\n    print(sort_by_first_element([(1, 2), (1, 3), (1, 4), (2, 3), (2, 4), (3, 4)]))\n    print(sort_by_first_element([(1, 2), (1, 3), (1, 4), (2, 3), (2, 4), (3, 4)]))\n\n\nmain()"
    },
    {
      "rank": 37,
      "score": 8.0,
      "candidate": "from typing import List\n\n\ndef sort_by_first(tuples: List[Tuple[int, int]]) -> List[Tuple[int, int]]:\n    return sorted(tuples, key=lambda x: x[0])\n\n\nprint(sort_by_first([(1, 1), (1, 2), (2, 1), (2, 2)]))"
    },
    {
      "rank": 38,
      "score": 8.0,
      "candidate": "def sort_tuples(tup):\n    return sorted(tup, key=lambda x: x[0])\n\n\nif __name__ == '__main__':\n    tup = [(1, 2, 3), (1, 2, 4), (3, 4, 5), (2, 3, 4)]\n    print(sort_tuples(tup))"
    },
    {
      "rank": 39,
      "score": 8.0,
      "candidate": "def sort_tuples(tuples):\n    for i in range(len(tuples)):\n        for j in range(len(tuples[i])):\n            if tuples[i][j] == tuples[i][0]:\n                tuples[i], tuples[j] = tuples[j], tuples[i]\n    return tuples\n\n\nif __name__ == '__main__':\n    print(sort_tuples([(1, 2), (1, 3), (1, 4), (2, 3), (2, 4)]))\n    print(sort_tuples([(1, 2), (1, 3), (2, 4)]))"
    },
    {
      "rank": 40,
      "score": 8.0,
      "candidate": "def sort_by_first_element(tuples):\n    sorted_tuples = sorted(tuples, key=lambda tup: tup[0])\n    return sorted_tuples\n\n\nif __name__ == '__main__':\n    tuples = [(1, 2), (1, 2, 3), (2, 3, 4), (3, 4)]\n    print(sort_by_first_element(tuples))"
    },
    {
      "rank": 41,
      "score": 8.0,
      "candidate": "def sort_tuple(tup):\n    return sorted(tup, key=lambda tup: tup[0])\n\n\nif __name__ == \"__main__\":\n    assert sort_tuple((1, 2, 3)) == [1, 2, 3]\n    assert sort_tuple((1, 2, 3, 4, 5)) == [1, 2, 3, 4, 5]\n    assert sort_tuple(((1, 2), (3, 4), (5, 6))) == [(1, 2), (3, 4), (5, 6)]"
    },
    {
      "rank": 42,
      "score": 8.0,
      "candidate": "def sort_by_first_element(tuples):\n    return sorted(tuples, key=lambda tup: tup[0])\n\n\nif __name__ == '__main__':\n    assert sort_by_first_element([(1, 2), (2, 3), (3, 1)]) == [(3, 1), (2, 3), (1, 2)]"
    },
    {
      "rank": 43,
      "score": 8.0,
      "candidate": "def sort_tuples(arr):\n    # Your code here\n    return sorted(arr, key=lambda tup: tup[0])\n\nprint(sort_tuples([(2, 1), (3, 3), (4, 4), (4, 4)]))"
    },
    {
      "rank": 44,
      "score": 8.0,
      "candidate": "def first_occurrence(l):\n    return sorted(l, key=lambda x: x[0])\n\n\nprint(first_occurrence([(1, 2), (2, 3), (4, 5), (3, 1)]))"
    },
    {
      "rank": 45,
      "score": 8.0,
      "candidate": "def first_tuple_sort(list):\n    return sorted(list, key=lambda x: x[0])\n\n\nif __name__ == \"__main__\":\n    print(first_tuple_sort([(1, 1), (2, 2), (2, 3), (2, 4), (1, 1), (2, 4)]))"
    },
    {
      "rank": 46,
      "score": 8.0,
      "candidate": "def sort_tuples(t):\n    return sorted(t, key=lambda x: x[0])\n\n\nif __name__ == '__main__':\n    t = [(1, 2), (2, 3), (3, 4), (4, 5)]\n    print(sort_tuples(t))"
    },
    {
      "rank": 47,
      "score": 8.0,
      "candidate": "def sort_tuples(list):\n    list.sort(key=lambda x: x[0])\n\n\nif __name__ == '__main__':\n    print(sort_tuples([(1, 2), (2, 1), (3, 2), (4, 2), (2, 3)]))"
    },
    {
      "rank": 48,
      "score": 8.0,
      "candidate": "def sort_tuples(list):\n    return sorted(list, key=lambda x: x[0])\n\ndef main():\n    print(sort_tuples([(1, 'a'), (2, 'b'), (3, 'c'), (4, 'd')]))\n    print(sort_tuples([(1, 'a'), (2, 'b'), (3, 'c'), (4, 'd'), (5, 'e')]))\n    print(sort_tuples([(1, 'a'), (2, 'b'), (3, 'c'), (4, 'd'), (5, 'e'), (6, 'f')]))\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 49,
      "score": 8.0,
      "candidate": "def sort_tuple(tuple):\n    for i in range(len(tuple)):\n        if tuple[i][0] == tuple[0][0]:\n            return tuple\n    return tuple\n\n\ndef main():\n    print(sort_tuple((1, 2, 3, 4)))\n    print(sort_tuple((1, 2, 3, 4, 5)))\n    print(sort_tuple((1, 2, 3, 4, 5, 6)))\n    print(sort_tuple((1, 2, 3, 4, 5, 6, 7)))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 50,
      "score": 8.0,
      "candidate": "def sort_tuples(lst):\n    return sorted(lst, key=lambda tup: tup[0])\n\n\nif __name__ == '__main__':\n    lst = [(1, 2), (1, 3), (1, 4), (2, 4), (2, 5), (2, 6), (3, 6), (3, 7)]\n    print(sort_tuples(lst))"
    },
    {
      "rank": 51,
      "score": 8.0,
      "candidate": "def sort_tuples(tuples):\n    if len(tuples) == 0:\n        return\n    count = 0\n    for i in range(len(tuples)):\n        if len(tuples[i]) == 1:\n            count += 1\n    for i in range(len(tuples)):\n        if count == i:\n            tuples.remove(tuples[i])\n    return tuples\n\n\nif __name__ == \"__main__\":\n    print(sort_tuples([(1, 2), (2, 4), (2, 3), (3, 4), (3, 5), (4, 6), (4, 7), (5, 6), (5, 7)]))"
    },
    {
      "rank": 52,
      "score": 8.0,
      "candidate": "def sort_by_first_element(lst):\n    return sorted(lst, key=lambda tup: tup[0])\n\n\nif __name__ == \"__main__\":\n    assert sort_by_first_element([(1,), (2, 3), (4, 5), (3, 4, 5), (6,), (8, 9)]) == [(8, 9), (3, 4, 5), (6,), (2, 3), (1,)]\n    assert sort_by_first_element([(1,), (2, 3), (4, 5), (3, 4, 5), (6,), (8, 9)]) == [(6,), (8, 9), (3, 4, 5), (2, 3), (1,)]"
    },
    {
      "rank": 53,
      "score": 8.0,
      "candidate": "def first_occurrence(lst):\n    # write your code here\n    return sorted(lst, key=lambda x: lst.count(x))\n\n\nprint(first_occurrence([(1, 1), (2, 2), (3, 3), (4, 4), (5, 5)]))"
    },
    {
      "rank": 54,
      "score": 8.0,
      "candidate": "def sort_tuples(tuples):\n    new_list = []\n    for tuple in tuples:\n        if tuple[0] not in new_list:\n            new_list.append(tuple)\n    return new_list\n\n\nif __name__ == '__main__':\n    print(sort_tuples([(2, 'A'), (3, 'B'), (4, 'C'), (5, 'D')]))"
    },
    {
      "rank": 55,
      "score": 8.0,
      "candidate": "def sort_tuples(tuples):\n    sorted_tuples = []\n    for i in range(len(tuples)):\n        if len(tuples[i]) == 1:\n            sorted_tuples.append(tuples[i])\n    return sorted_tuples\n\n\nif __name__ == \"__main__\":\n    print(sort_tuples([(1, 1), (2, 2), (1, 2), (2, 2)]))"
    },
    {
      "rank": 56,
      "score": 8.0,
      "candidate": "def sort_tuple_first(list):\n    return sorted(list, key=lambda tup: tup[0])\n\nprint(sort_tuple_first([(1,2), (3,4), (5,6), (7,8), (9,10)]))"
    },
    {
      "rank": 57,
      "score": 8.0,
      "candidate": "def sort_tuples(tuples):\n    tuples.sort(key=lambda tup: tup[0])\n    return tuples\n\nif __name__ == \"__main__\":\n    print(sort_tuples([(1, 2), (2, 3), (3, 1), (1, 4), (2, 3)]))"
    },
    {
      "rank": 58,
      "score": 8.0,
      "candidate": "def sort_tuples(tuples):\n    sorted_tuples = sorted(tuples, key=lambda x: x[0])\n    return sorted_tuples"
    },
    {
      "rank": 59,
      "score": 8.0,
      "candidate": "def sort_tuples(tuples):\n    tuples.sort(key=lambda tup: tup[0])\n    return tuples\n\n\nprint(sort_tuples([(1, 2), (2, 3), (3, 4), (4, 5)]))"
    },
    {
      "rank": 60,
      "score": 8.0,
      "candidate": "def sort_by_first_occurrence(list_of_tuples):\n    return sorted(list_of_tuples, key=lambda x: x[0])\n\nprint(sort_by_first_occurrence([(1,2),(1,3),(1,4),(1,5),(1,6)]))"
    },
    {
      "rank": 61,
      "score": 8.0,
      "candidate": "def sort_tuples(l):\n    return sorted(l, key=lambda x: x[0])\n\n\nprint(sort_tuples([(1, 2), (2, 3), (3, 4)]))"
    },
    {
      "rank": 62,
      "score": 8.0,
      "candidate": "def sort_tuples(t):\n    return sorted(t, key=lambda x: x[0])\n\n\nprint(sort_tuples([(1, 1), (1, 2), (2, 1), (2, 2)]))"
    },
    {
      "rank": 63,
      "score": 8.0,
      "candidate": "def find_first_occurrence(a):\n    for i in range(len(a)):\n        if a[i][0] == 1:\n            return i\n    return -1\n\ndef main():\n    a = [(1,2), (2,4), (3,3), (3,4)]\n    print(find_first_occurrence(a))\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 64,
      "score": 8.0,
      "candidate": "def sort_tuples(tuples):\n    # Your code here\n    return sorted(tuples, key=lambda x: x[0])\n\n\nif __name__ == '__main__':\n    print(sort_tuples([(1, 2), (2, 3), (2, 4), (2, 5), (3, 4), (5, 4), (5, 6)]))"
    },
    {
      "rank": 65,
      "score": 8.0,
      "candidate": "def sort_tuples(tuples):\n    tuples.sort(key=lambda x: x[0])\n    return tuples\n\n\ndef main():\n    tuples = [(1, 2), (3, 4), (5, 6)]\n    print(sort_tuples(tuples))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 66,
      "score": 8.0,
      "candidate": "def occurrence_sort(tup):\n    if len(tup) < 2:\n        return tup\n    else:\n        first_tuple = tup[0]\n        second_tuple = tup[1]\n\n        # return tup[0], tup[1]\n        return (second_tuple[0], first_tuple[1])\n\n\nprint(occurrence_sort((1, 2, 3, 4, 5)))\nprint(occurrence_sort((2, 3, 4, 5, 1, 2)))"
    },
    {
      "rank": 67,
      "score": 8.0,
      "candidate": "def first_occurrence(tuples):\n    result = []\n    for i in range(len(tuples)):\n        if tuples[i][0] in result:\n            result.remove(tuples[i][0])\n            result.append(tuples[i])\n        else:\n            result.append(tuples[i])\n    return result\n\n\nprint(first_occurrence([(1, 2), (3, 4), (5, 6)]))"
    },
    {
      "rank": 68,
      "score": 8.0,
      "candidate": "def sort_tuples(tup):\n    return sorted(tup, key = lambda x: tup.index(x[0]))\n\ntup = (1,2,3,4,5)\nprint(sort_tuples(tup))"
    },
    {
      "rank": 69,
      "score": 8.0,
      "candidate": "def sort_tuples(tuples):\n    for i in range(len(tuples)):\n        for j in range(len(tuples)):\n            if i!= j:\n                if tuples[i][1] < tuples[j][1]:\n                    tuples[i], tuples[j] = tuples[j], tuples[i]\n    return tuples\n\n\nif __name__ == '__main__':\n    print(sort_tuples([(1, 2), (3, 4), (1, 2), (1, 3), (3, 4)]))"
    },
    {
      "rank": 70,
      "score": 8.0,
      "candidate": "def sort_tuples(tuples):\n    sorted_tuples = []\n    for item in sorted(tuples, key=lambda tup: tup[0]):\n        sorted_tuples.append(item)\n    return sorted_tuples\n\nif __name__ == \"__main__\":\n    print(sort_tuples([(1, 3), (1, 2), (2, 4)]))"
    },
    {
      "rank": 71,
      "score": 8.0,
      "candidate": "def sort_tuple(tuples):\n    result = []\n    for i in range(len(tuples)):\n        if len(result) == 0:\n            result.append(tuples[i])\n        elif result[-1][1] < tuples[i][1]:\n            result.append(tuples[i])\n    return result\n\n\nprint(sort_tuple([(1, 2), (2, 3), (1, 3)]))"
    },
    {
      "rank": 72,
      "score": 8.0,
      "candidate": "def sort_tuples(tuples):\n    return sorted(tuples, key=lambda x: x[0])\n\n\n\nif __name__ == \"__main__\":\n    print(sort_tuples([(1, 2), (3, 4), (2, 1)]))"
    },
    {
      "rank": 73,
      "score": 8.0,
      "candidate": "def sort_tuples(tuples):\n    return sorted(tuples, key=lambda x: x[0])\n\n\nif __name__ == \"__main__\":\n    assert sort_tuples([(1, 2), (2, 3), (3, 4)]) == [(3, 4), (2, 3), (1, 2)]"
    },
    {
      "rank": 74,
      "score": 8.0,
      "candidate": "def sort_tuples(tuples):\n    return sorted(tuples, key=lambda x: x[0])\n\nprint(sort_tuples([(1, 2), (3, 4), (5, 6)]))"
    },
    {
      "rank": 75,
      "score": 8.0,
      "candidate": "def sort_tuples(tuples):\n    return sorted(tuples, key=lambda x: x[0])\n\nprint(sort_tuples([(1,3),(2,4),(2,5),(3,4),(3,5),(4,5),(4,6),(5,6),(5,7),(6,8)]))"
    },
    {
      "rank": 76,
      "score": 4.0,
      "candidate": "from typing import List\n\n\ndef sort_tuples(tuples: List[Tuple[int, int]]) -> None:\n    \"\"\"\n    Sort tuples in place.\n    :param tuples: list of tuples\n    :return: None\n    \"\"\"\n    for i in range(0, len(tuples)):\n        key = tuples[i][1]\n        j = i\n        while j > 0 and tuples[j-1][1] < key:\n            tuples[j] = tuples[j-1]\n            j -= 1\n        tuples[j] = tuples[i]\n\n\nif __name__ == \"__main__\":\n    assert sort_tuples([(1, 1), (1, 2), (2, 1), (2, 2)]) == [(2, 2), (1, 1), (1, 2), (2, 2)]"
    },
    {
      "rank": 77,
      "score": 1.0,
      "candidate": "def sort_tuples(list_of_tuples):\n    return sorted(list_of_tuples, key=lambda x: x[0])\n\n\nif __name__ == '__main__':\n    list_of_tuples = [(2, 5), (3, 7), (3, 9), (1, 6), (2, 4), (4, 8), (5, 7)]\n    assert sort_tuples(list_of_tuples) == [(1, 6), (2, 4), (3, 7), (4, 8), (5, 7), (3, 9)]"
    },
    {
      "rank": 78,
      "score": 1.0,
      "candidate": "def sort_tuple(tuple_list):\n    return sorted(tuple_list, key=lambda x: x[0])\n\n\nif __name__ == \"__main__\":\n    print(sort_tuple([(1, 2), (1, 3), (1, 4), (2, 3), (2, 4)]))\n    print(sort_tuple([(1, 2), (1, 3), (1, 4), (2, 3), (2, 4), (3, 4)]))"
    },
    {
      "rank": 79,
      "score": 1.0,
      "candidate": "def sort_tuples(tuples):\n    return sorted(tuples, key=lambda x: x[0])\n\n\nif __name__ == '__main__':\n    print(sort_tuples([(1, 1), (2, 2), (3, 3), (4, 4)]))\n    print(sort_tuples([(1, 2), (3, 4), (2, 3)]))\n    print(sort_tuples([(1, 2), (3, 3), (4, 4), (5, 5)]))"
    },
    {
      "rank": 80,
      "score": 1.0,
      "candidate": "def insertion_sort(list):\n    for i in range(len(list)):\n        for j in range(i+1, len(list)):\n            if list[j][0] < list[i][0]:\n                list[i], list[j] = list[j], list[i]\n    return list\n\n\nif __name__ == \"__main__\":\n    print(insertion_sort([(2, 5), (3, 8), (1, 3), (1, 2), (3, 4), (1, 3), (2, 3), (3, 4)]))"
    },
    {
      "rank": 81,
      "score": 1.0,
      "candidate": "def sort_tuples(l):\n    return sorted(l, key=lambda x: l.index(x[0]))\n\n\nprint(sort_tuples([(1, 2), (3, 4), (4, 5), (5, 6), (6, 7)]))\nprint(sort_tuples([(1, 2), (3, 4), (4, 5), (5, 6), (6, 7)]))\nprint(sort_tuples([(1, 2), (3, 4), (4, 5), (5, 6), (6, 7)]))\nprint(sort_tuples([]))"
    },
    {
      "rank": 82,
      "score": 1.0,
      "candidate": "from typing import List\n\n\ndef sort_tuples(tuples: List[Tuple[int, int]]) -> List[Tuple[int, int]]:\n    return sorted(tuples, key=lambda x: x[0])\n\n\nif __name__ == \"__main__\":\n    assert sort_tuples([(1, 1), (2, 2)]) == [(1, 1), (2, 2)]\n    assert sort_tuples([(1, 1), (2, 2), (3, 3), (4, 4), (5, 5)]) == [(1, 1), (2, 2), (3, 3), (4, 4), (5, 5)]\n    assert sort_tuples([(1, 1), (2, 2), (3, 3), (4, 4), (5, 5)]) == [(1, 1), (2, 2), (3, 3), (4, 4), (5, 5)]"
    },
    {
      "rank": 83,
      "score": 1.0,
      "candidate": "def sort_tuples(list_of_tuples):\n    sorted_list = []\n    for i in range(len(list_of_tuples)):\n        if i == 0:\n            continue\n        elif list_of_tuples[i][0] > list_of_tuples[i-1][0]:\n            sorted_list.append(list_of_tuples[i])\n        else:\n            sorted_list.append(list_of_tuples[i-1])\n    return sorted_list\n\n\nif __name__ == \"__main__\":\n    assert sort_tuples([(1, 2), (1, 3), (1, 4), (2, 2), (3, 2)]) == [(1, 3), (1, 4), (2, 2), (3, 2)]\n    assert sort_tuples([(1, 2), (1, 3), (1, 4), (2, 2), (3, 2)]) == [(1, 3), (1, 4), (2, 2), (3, 2)]\n    assert sort_tuples([(1, 2), (1, 3), (1, 4), (2, 2), (3, 2)]) == [(1, 3), (1, 4), (2, 2), (3, 2)]\n    assert sort_tuples([(1, 2), (1, 3), (1, 4), (2, 2), (3, 2)]) == [(1, 4), (1, 2), (2, 2), (3, 2)]\n    assert sort_tuples([(1, 2), (1, 3), (1, 4), (2, 2), (3, 2)]) == [(1, 2), (1, 3), (1, 4), (2, 2), (3, 2)]\n    assert sort_tuples([(1, 2), (1, 3), (1, 4), (2, 2), (3, 2)]) == [(1, 3), (1, 4), (2, 2), (3, 2)]\n    assert sort_tuples([(1, 2), (1, 3), (1, 4), (2, 2), (3, 2)]) == [(1, 4), (1, 2), (2"
    },
    {
      "rank": 84,
      "score": 1.0,
      "candidate": "def sort_tuples(list):\n    return sorted(list, key=lambda x: x[0])\n\n\n\nif __name__ == '__main__':\n    t = [(1,3),(2,2),(1,2),(3,2),(2,1),(1,1),(2,1)]\n    print(sort_tuples(t))\n    t = [(1,2),(3,2),(1,3),(2,3),(1,2),(2,1)]\n    print(sort_tuples(t))"
    },
    {
      "rank": 85,
      "score": 1.0,
      "candidate": "def sort_tuples(tuples):\n    return sorted(tuples, key=lambda x: x[0])\n\n\nif __name__ == '__main__':\n    assert sort_tuples([(1, 2, 3), (3, 4, 5)]) == [(3, 4, 5), (1, 2, 3)]\n    assert sort_tuples([(1, 2, 3), (3, 4, 5)]) == [(1, 2, 3), (3, 4, 5)]"
    },
    {
      "rank": 86,
      "score": 1.0,
      "candidate": "def sort_tuples(my_list):\n    return sorted(my_list, key=lambda x: x[0])\n\n\nmy_list = [(1, 2), (4, 5), (2, 5), (3, 3)]\nprint(sort_tuples(my_list))"
    },
    {
      "rank": 87,
      "score": 1.0,
      "candidate": "def find_first_tuple(lst):\n    for x in lst:\n        if x[0] == lst[0][0]:\n            return lst\n\n\ndef sort_list(lst):\n    return sorted(lst, key=lambda x: x[0])\n\n\ndef test_function(test_case):\n    print(\"Test Case: \" + str(test_case))\n    solution = sort_list(test_case)\n    print(\"Solution: \" + str(solution))\n    if test_case == solution:\n        print(\"Pass\")\n    else:\n        print(\"Fail\")\n\n\ntest_case_1 = [(1, 2, 3), (4, 5, 6), (7, 8, 9)]\ntest_case_2 = [(1, 2, 3), (4, 5, 6), (7, 8, 9)]\ntest_case_3 = [(1, 2, 3), (4, 5, 6), (7, 8, 9), (9, 8, 7)]\ntest_case_4 = [(1, 2, 3), (4, 5, 6), (7, 8, 9), (9, 8, 7), (10, 11, 12)]\ntest_case_5 = [(1, 2, 3), (4, 5, 6), (7, 8, 9), (9, 8, 7), (10, 11, 12), (13, 14, 15)]\ntest_case_6 = [(1, 2, 3), (4, 5, 6), (7, 8, 9), (9, 8, 7), (10, 11, 12), (13, 14, 15), (14, 15, 16), (15, 16, 17), (16, 17, 18)]\ntest_case_7 = [(1, 2, 3), (4, 5, 6), (7, 8, 9), (9, 8, 7), (10, 11, 12), (13, 14, 15), (14, 15, 16), (15, 16, 17), (16, 17, 18), (17, 18, 19), (18, 19, 20)]\ntest_case_8 = [(1, 2, 3), (4, 5, 6), (7, 8, 9"
    },
    {
      "rank": 88,
      "score": 1.0,
      "candidate": "def sort_tuples(tuples):\n    return sorted(tuples, key=lambda x: x[0])\n\n\nif __name__ == \"__main__\":\n    assert sort_tuples([(1, 1), (2, 2), (3, 3), (1, 2)]) == [(1, 1), (2, 2), (3, 3), (1, 2)]\n    assert sort_tuples([(1, 1), (2, 2), (3, 3), (1, 2)]) == [(1, 1), (2, 2), (3, 3), (1, 2)]"
    },
    {
      "rank": 89,
      "score": 1.0,
      "candidate": "def sort_tuples(tuples):\n    tuples = sorted(tuples)\n    return [x[0] for x in tuples]\n\nprint(sort_tuples([(1,2,3),(4,5,6),(7,8,9)]))\nprint(sort_tuples([(1,2,3),(4,5,6),(7,8,9)]))\nprint(sort_tuples([(1,2,3),(4,5,6),(7,8,9)]))\nprint(sort_tuples([(1,2,3),(4,5,6),(7,8,9),(9,1,4)]))"
    },
    {
      "rank": 90,
      "score": 1.0,
      "candidate": "def sort_tuples(list_of_tuples):\n    list_of_tuples.sort(key=lambda x: x[0])\n    return list_of_tuples\n\n\ndef main():\n    list_of_tuples = [(1, 2), (3, 4), (5, 6)]\n    print(sort_tuples(list_of_tuples))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 91,
      "score": 1.0,
      "candidate": "def sort_tuples(tuples):\n    return sorted(tuples, key=lambda x: x[0])\n\n\nprint(sort_tuples([(2, 4), (1, 3), (3, 4), (6, 7), (6, 8), (5, 9), (1, 6), (5, 8), (7, 9)]))"
    },
    {
      "rank": 92,
      "score": 1.0,
      "candidate": "def insertion_sort(tuples):\n    for i in range(len(tuples)):\n        for j in range(i+1, len(tuples)):\n            if tuples[j][0] <= tuples[i][0]:\n                tmp = tuples[i]\n                tuples[i] = tuples[j]\n                tuples[j] = tmp\n    return tuples\n\ndef insertion_sort_2(tuples):\n    for i in range(len(tuples)):\n        for j in range(i+1, len(tuples)):\n            if tuples[j][0] > tuples[i][0]:\n                tmp = tuples[i]\n                tuples[i] = tuples[j]\n                tuples[j] = tmp\n    return tuples\n\ndef insertion_sort_3(tuples):\n    for i in range(len(tuples)):\n        for j in range(i+1, len(tuples)):\n            if tuples[j][0] > tuples[i][0]:\n                tmp = tuples[i]\n                tuples[i] = tuples[j]\n                tuples[j] = tmp\n    return tuples\n\ndef insertion_sort_4(tuples):\n    for i in range(len(tuples)):\n        for j in range(i+1, len(tuples)):\n            if tuples[j][0] < tuples[i][0]:\n                tmp = tuples[i]\n                tuples[i] = tuples[j]\n                tuples[j] = tmp\n    return tuples\n\n\nif __name__ == \"__main__\":\n    print(insertion_sort([(1,2),(3,4),(4,3),(1,3),(2,4)]))\n    print(insertion_sort([(1,2),(3,4),(4,3),(1,3),(2,4)]))\n    print(insertion_sort([(1,2),(3,4),(4,3),(1,3),(2,4)]))\n    print(insertion_sort([(1,2),(3,4),(4,3),(1,3),(2,4)]))\n    print(insertion_sort([(1,2),(3,"
    },
    {
      "rank": 93,
      "score": 1.0,
      "candidate": "def sort_first(lst):\n    first = lst[0]\n    for i in range(len(lst)):\n        if first[0] == lst[i][0]:\n            lst.remove(first)\n            lst.append(first)\n\n    return lst\n\n\nprint(sort_first([(1, 1), (2, 2), (3, 3), (4, 4), (5, 5), (6, 6)]))"
    },
    {
      "rank": 94,
      "score": 1.0,
      "candidate": "def sort_tuples(tuples):\n    return sorted(tuples, key=lambda tup: tup[0])\n\n\n# print(sort_tuples([(1, 1), (2, 2), (3, 3), (4, 4)]))\n\n\n# def sort_tuples(tuples):\n#     for tup in tuples:\n#         if tup[1] not in tup[0]:\n#             tup[0].append(tup[1])\n#     return sorted(tuples, key=lambda tup: tup[0])\n\n\n# def sort_tuples(tuples):\n#     return sorted(tuples, key=lambda tup: tup[0][0])\n\n\n# def sort_tuples(tuples):\n#     return sorted(tuples, key=lambda tup: tup[0][1])\n\n\n# def sort_tuples(tuples):\n#     return sorted(tuples, key=lambda tup: tup[0][2])\n\n\n# def sort_tuples(tuples):\n#     return sorted(tuples, key=lambda tup: tup[0][1])\n\n\n# def sort_tuples(tuples):\n#     return sorted(tuples, key=lambda tup: tup[0][2])\n\n\n# def sort_tuples(tuples):\n#     return sorted(tuples, key=lambda tup: tup[0][1])\n\n\n# def sort_tuples(tuples):\n#     return sorted(tuples, key=lambda tup: tup[0][2])\n\n\n# def sort_tuples(tuples):\n#     return sorted(tuples, key=lambda tup: tup[0][1])\n\n\n# def sort_tuples(tuples):\n#     return sorted(tuples, key=lambda tup: tup[0][2])\n\n\n# def sort_tuples(tuples):\n#     return sorted(tuples, key=lambda tup: tup[0][1])\n\n\n# def sort_tuples(tuples):\n#     return sorted(tuples, key=lambda tup: tup[0][2])\n\n\n# def sort_tuples(tuples):\n#     return sorted(tuples, key=lambda tup: tup[0][1])\n\n\n# def sort_tuples(tuples):\n#     return sorted(tuples, key=lambda tup: tup[0][2])"
    },
    {
      "rank": 95,
      "score": 1.0,
      "candidate": "def sort_tuples(tuples):\n    sorted_tuples = sorted(tuples, key=lambda tup: tup[0])\n    return sorted_tuples\n\n\nprint(sort_tuples([(1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 7), (7, 8), (8, 9)]))"
    },
    {
      "rank": 96,
      "score": 1.0,
      "candidate": "def sort_tuples(tup):\n    return sorted(tup, key=lambda x: x[0])\n\n\ndef test_function():\n    tup = [(2, 3), (4, 5), (6, 7), (8, 9)]\n    assert sort_tuples(tup) == [(6, 7), (8, 9), (4, 5), (2, 3)]\n\ntest_function()"
    },
    {
      "rank": 97,
      "score": 1.0,
      "candidate": "def sort_tuples(tuples):\n    return sorted(tuples, key=lambda x: x[0])\n\nif __name__ == \"__main__\":\n    assert sort_tuples([(1,3), (1,2), (2,3), (3,2)]) == [(1,3), (1,2), (2,3), (3,2)]\n    assert sort_tuples([(1,2), (1,3), (2,3), (3,2)]) == [(1,2), (1,3), (2,3), (3,2)]\n    assert sort_tuples([(1,2), (1,3), (2,3), (3,2)]) == [(1,2), (1,3), (2,3), (3,2)]\n    assert sort_tuples([(1,2), (1,3), (2,3), (3,2)]) == [(1,2), (1,3), (2,3), (3,2)]\n    assert sort_tuples([(1,2), (1,3), (2,3), (3,2)]) == [(1,2), (1,3), (2,3), (3,2)]\n    assert sort_tuples([(1,2), (1,3), (2,3), (3,2)]) == [(1,2), (1,3), (2,3), (3,2)]\n    assert sort_tuples([(1,2), (1,3), (2,3), (3,2)]) == [(1,2), (1,3), (2,3), (3,2)]\n    assert sort_tuples([(1,2), (1,3), (2,3), (3,2)]) == [(1,2), (1,3), (2,3), (3,2)]\n    assert sort_tuples([(1,2), (1,3), (2,3), (3,2)]) == [(1,2), (1,3), (2,3), (3,2)]\n    assert sort_tuples([(1,2), (1,3), (2,3), (3,"
    },
    {
      "rank": 98,
      "score": 1.0,
      "candidate": "def sort_tuples(lst):\n    for i in range(len(lst)):\n        for j in range(len(lst)):\n            if lst[i][0] > lst[j][0]:\n                lst[i], lst[j] = lst[j], lst[i]\n    return lst\n\n\nif __name__ == \"__main__\":\n    print(sort_tuples([(1, 1), (2, 2), (3, 3), (3, 4)]))"
    },
    {
      "rank": 99,
      "score": 1.0,
      "candidate": "def sort_tuples(tuples):\n    return sorted(tuples, key=lambda x: x[0])\n\n\nprint(sort_tuples([(1, 2), (2, 3), (3, 4), (4, 5)]))"
    },
    {
      "rank": 100,
      "score": 1.0,
      "candidate": "def sort_tuples(tuples):\n    return sorted(tuples, key=lambda x: x[0])\n\nprint(sort_tuples([(1, 3), (1, 4), (2, 2), (3, 2)]))\nprint(sort_tuples([(1, 3), (1, 4), (2, 2), (3, 2)]))\nprint(sort_tuples([(1, 3), (1, 4), (2, 2), (3, 2)]))\nprint(sort_tuples([(1, 3), (1, 4), (2, 2), (3, 2)]))\nprint(sort_tuples([(1, 3), (1, 4), (2, 2), (3, 2)]))\nprint(sort_tuples([(1, 3), (1, 4), (2, 2), (3, 2)]))\nprint(sort_tuples([(1, 3), (1, 4), (2, 2), (3, 2)]))\nprint(sort_tuples([(1, 3), (1, 4), (2, 2), (3, 2)]))\nprint(sort_tuples([(1, 3), (1, 4), (2, 2), (3, 2)]))\nprint(sort_tuples([(1, 3), (1, 4), (2, 2), (3, 2)]))\nprint(sort_tuples([(1, 3), (1, 4), (2, 2), (3, 2)]))\nprint(sort_tuples([(1, 3), (1, 4), (2, 2), (3, 2)]))\nprint(sort_tuples([(1, 3), (1, 4), (2, 2), (3, 2)]))\nprint(sort_tuples([(1, 3), (1, 4), (2, 2), (3, 2)]))\nprint(sort_tuples([(1, 3), (1, 4), (2, 2), (3, 2)]))\nprint(sort_tuples([(1, 3), (1, 4), (2, 2), (3, 2)]))\nprint(sort_tuples([(1, 3), (1, 4), (2, 2), (3, 2)]))\nprint(sort_tuples([(1"
    }
  ]
}