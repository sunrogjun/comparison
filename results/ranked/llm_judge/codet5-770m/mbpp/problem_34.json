{
  "timestamp": "2025-09-14T12:43:24.759674",
  "method": "improved_llm_judge",
  "judge_model": "codellama/CodeLlama-7b-Python-hf",
  "target_model": "codet5-770m",
  "dataset": "mbpp",
  "problem_number": 34,
  "total_candidates": 100,
  "results": [
    {
      "rank": 1,
      "score": 10.0,
      "candidate": "class Solution:\n    def gcd(self, a, b):\n        \"\"\"\n        :type a: int\n        :type b: int\n        :rtype: int\n        \"\"\"\n        if a == 0:\n            return b\n        return self.gcd(b % a, a)\n\n\nif __name__ == \"__main__\":\n    print(Solution().gcd(3, 5))"
    },
    {
      "rank": 2,
      "score": 10.0,
      "candidate": "def gcd(a, b):\n    if b == 0:\n        return a\n    return gcd(b, a % b)\n\n\nif __name__ == \"__main__\":\n    a = [1, 2, 3, 4, 5]\n    b = [5, 6, 7, 8, 9]\n    print(gcd(a, b))"
    },
    {
      "rank": 3,
      "score": 10.0,
      "candidate": "def gcd(a, b):\n    while b!= 0:\n        a, b = b, a % b\n\n    return a\n\n\nif __name__ == '__main__':\n    print(gcd(4, 5))\n    print(gcd(3, 7))\n    print(gcd(3, 9))\n    print(gcd(3, 5))\n    print(gcd(4, 8))"
    },
    {
      "rank": 4,
      "score": 10.0,
      "candidate": "def gcd(arr):\n    if len(arr) <= 1:\n        return arr[0]\n\n    return gcd(arr[1:])\n\n\nif __name__ == \"__main__\":\n    print(gcd([3, 6, 9]))"
    },
    {
      "rank": 5,
      "score": 10.0,
      "candidate": "def gcd(arr):\n    if len(arr) == 1:\n        return arr[0]\n    if len(arr) == 2:\n        return min(arr)\n    if len(arr) == 3:\n        return max(arr)\n    if len(arr) == 4:\n        return arr[0] * arr[1] * arr[2]\n    return gcd(arr[1:])\n\nprint(gcd([2, 3, 4, 5]))\nprint(gcd([1, 2, 3, 4, 5]))\nprint(gcd([1, 2, 3, 4]))\nprint(gcd([1, 2, 3, 4, 5, 6, 7, 8]))"
    },
    {
      "rank": 6,
      "score": 10.0,
      "candidate": "def gcd(a, b):\n    if b == 0:\n        return a\n    else:\n        return gcd(b, a % b)\n\n\na = [3, 5, 7]\nb = [3, 5, 7]\n\nprint(gcd(a, b))"
    },
    {
      "rank": 7,
      "score": 10.0,
      "candidate": "from typing import List\n\ndef gcd(a: List[int]) -> int:\n    if len(a) == 1:\n        return a[0]\n    return gcd(a[0], a[1])\n\nprint(gcd([1, 2, 3]))\nprint(gcd([1, 2, 3, 4]))\nprint(gcd([1, 2, 3, 4, 5]))\nprint(gcd([1, 2, 3, 4, 5, 6]))\nprint(gcd([1, 2, 3, 4, 5, 6, 7]))\nprint(gcd([1, 2, 3, 4, 5, 6, 7, 8]))\nprint(gcd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\nprint(gcd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\nprint(gcd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]))\nprint(gcd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]))\nprint(gcd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]))\nprint(gcd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]))\nprint(gcd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]))\nprint(gcd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]))\nprint(gcd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30,"
    },
    {
      "rank": 8,
      "score": 10.0,
      "candidate": "def gcd(arr):\n    if len(arr) == 1:\n        return arr[0]\n    if len(arr) == 2:\n        return max(arr)\n    if len(arr) == 3:\n        return min(arr)\n    if len(arr) == 4:\n        return arr[0] * arr[1] * arr[2]\n    if len(arr) == 5:\n        return min(arr[0] * arr[1] * arr[2], arr[0] * arr[3] * arr[4])\n\n\nif __name__ == \"__main__\":\n    print(gcd([-2, 2, -3, 4, 5]))\n    print(gcd([1, 2, 3, 4, 5]))\n    print(gcd([-2, 2, -3, 4, 5]))\n    print(gcd([-2, 2, -3, 4, 5, 6]))\n    print(gcd([1, 2, 3, 4, 5, 6, 7, 8, 9]))\n    print(gcd([-2, 2, -3, 4, 5, 6, 7, 8, 9, 10, 11]))"
    },
    {
      "rank": 9,
      "score": 10.0,
      "candidate": "def gcd(arr):\n    if len(arr) == 1:\n        return arr[0]\n    if len(arr) == 2:\n        return max(arr)\n    if len(arr) == 3:\n        return min(arr)\n    \n    mid = len(arr) // 2\n    left = arr[:mid]\n    right = arr[mid:]\n    \n    return gcd(left) if gcd(left) else gcd(right)\n\nprint(gcd([4, 3, 5, 2]))"
    },
    {
      "rank": 10,
      "score": 10.0,
      "candidate": "def gcd(nums):\n    if len(nums) <= 1:\n        return nums[0]\n    else:\n        return gcd(nums[1:])\n\nprint(gcd([1, 2, 3, 4, 5]))\nprint(gcd([-2, -3, -4, -5, -6, -7, -8, -9]))\nprint(gcd([-2, -3, -4, -5, -6, -7, -8, -9, 10, 20, 30, 40]))\nprint(gcd([-2, -3, -4, -5, -6, -7, -8, -9]))\nprint(gcd([-2, -3, -4, -5, -6, -7, -8, -9]))"
    },
    {
      "rank": 11,
      "score": 10.0,
      "candidate": "def gcd(arr):\n    if len(arr) == 1:\n        return arr[0]\n    else:\n        return gcd(arr[1:])\n\nprint(gcd([1, 2, 3, 4]))\nprint(gcd([2, 3, 4, 5]))\nprint(gcd([2, 3, 4, 5, 6, 7, 8, 9]))\nprint(gcd([2, 3, 4, 5, 6, 7, 8, 9, 10]))\nprint(gcd([2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\nprint(gcd([2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]))\nprint(gcd([2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]))"
    },
    {
      "rank": 12,
      "score": 10.0,
      "candidate": "def gcd(a):\n    if len(a) == 1:\n        return a[0]\n    return gcd(a[1:])\n\n\nprint(gcd([4, 2, 6, 2, 5]))"
    },
    {
      "rank": 13,
      "score": 10.0,
      "candidate": "def gcd(a, b):\n    if b == 0:\n        return a\n    else:\n        return gcd(b, a % b)\n\ndef test_gcd():\n    assert gcd(0, 0) == 0\n    assert gcd(1, 0) == 1\n    assert gcd(3, 1) == 2\n    assert gcd(4, 1) == 3\n    assert gcd(5, 1) == 4\n    assert gcd(7, 1) == 5\n    assert gcd(8, 1) == 7\n    assert gcd(9, 1) == 8\n    assert gcd(10, 1) == 9\n    assert gcd(11, 1) == 10\n    assert gcd(12, 1) == 11\n    assert gcd(13, 1) == 12\n    assert gcd(14, 1) == 13\n    assert gcd(15, 1) == 14\n    assert gcd(16, 1) == 15\n    assert gcd(17, 1) == 16\n    assert gcd(18, 1) == 17\n    assert gcd(19, 1) == 18\n    assert gcd(20, 1) == 19\n    assert gcd(21, 1) == 20\n    assert gcd(22, 1) == 21\n    assert gcd(23, 1) == 22\n    assert gcd(24, 1) == 23\n    assert gcd(25, 1) == 24\n    assert gcd(26, 1) == 25\n    assert gcd(27, 1) == 26\n    assert gcd(28, 1) == 27\n    assert gcd(29, 1) == 28\n    assert gcd(30, 1) == 29\n    assert gcd(31, 1) == 30\n    assert gcd(32, 1) == 31\n    assert gcd(33, 1) == 32\n    assert gcd(34, 1) == 34\n    assert gcd(35, 1) == 35\n    assert gcd(36, 1) == 36\n    assert gcd(37, 1) == 37\n    assert gcd(38, 1) == 38\n    assert gcd(39, 1) == 39\n    assert gcd(40, 1) == 40\n    assert gcd(41, 1) == 41\n    assert gcd(42, 1) == 42\n    assert gcd(43, 1) == 43\n    assert gcd(44"
    },
    {
      "rank": 14,
      "score": 10.0,
      "candidate": "def gcd(a):\n    if len(a) == 0:\n        return 1\n    elif len(a) == 1:\n        return a[0]\n    else:\n        return gcd(a[1:]) * a[0]\n\n\n\nif __name__ == \"__main__\":\n    a = [1, 2, 3, 4, 5]\n    print(gcd(a))"
    },
    {
      "rank": 15,
      "score": 10.0,
      "candidate": "def gcd(arr):\n    if len(arr) == 1:\n        return arr[0]\n\n    l = len(arr)\n    if l == 2:\n        return arr[0]\n    else:\n        return gcd(arr[1:])\n\n\narr = [2, 5, 7, 9, 11, 13]\nprint(gcd(arr))"
    },
    {
      "rank": 16,
      "score": 10.0,
      "candidate": "def gcd(nums):\n    if len(nums) == 1:\n        return nums[0]\n    gcd_of_2 = gcd(nums[0:2])\n    gcd_of_3 = gcd(nums[0:3])\n    return gcd_of_2 if gcd_of_2 > gcd_of_3 else gcd_of_3\n\nprint(gcd([1, 2, 3, 4, 5]))"
    },
    {
      "rank": 17,
      "score": 10.0,
      "candidate": "def gcd(a, b):\n    if b == 0:\n        return a\n    else:\n        return gcd(b, a % b)\n\n\ndef test_gcd():\n    assert gcd([1, 2, 3], 6) == 2\n    assert gcd([1, 2, 3], 1) == 1\n    assert gcd([1, 2, 3], 3) == 1\n    assert gcd([2, 1, 3], 1) == 1\n    assert gcd([2, 1, 3], 2) == 1\n    assert gcd([2, 1, 3], 3) == 1\n    assert gcd([2, 1, 3], 4) == 2\n    assert gcd([2, 1, 3], 5) == 1\n    assert gcd([2, 1, 3], 6) == 1\n    assert gcd([2, 1, 3], 7) == 1\n    assert gcd([2, 1, 3], 8) == 1\n    assert gcd([2, 1, 3], 9) == 1\n    assert gcd([2, 1, 3], 10) == 1\n    assert gcd([2, 1, 3], 11) == 1\n    assert gcd([2, 1, 3], 12) == 1\n    assert gcd([2, 1, 3], 13) == 1\n    assert gcd([2, 1, 3], 14) == 1\n    assert gcd([2, 1, 3], 15) == 1\n    assert gcd([2, 1, 3], 16) == 1\n    assert gcd([2, 1, 3], 17) == 1\n    assert gcd([2, 1, 3], 18) == 1\n    assert gcd([2, 1, 3], 19) == 1\n    assert gcd([2, 1, 3], 20) == 1\n    assert gcd([2, 1, 3], 21) == 1\n    assert gcd([2, 1, 3], 22) == 1\n    assert gcd([2, 1, 3], 23) == 1\n    assert gcd([2, 1, 3], 24) == 1\n    assert gcd([2, 1, 3], 25) == 1\n    assert gcd([2, 1, 3], 26) == 1\n    assert gcd([2, 1, 3], 27) == 1\n    assert gcd([2, 1, 3], 28) == 1"
    },
    {
      "rank": 18,
      "score": 10.0,
      "candidate": "def gcd(a):\n    if len(a) == 0:\n        return a\n    if len(a) == 1:\n        return a[0]\n    return gcd(a[1:])\n\nif __name__ == \"__main__\":\n    print(gcd([1,2,3]))\n    print(gcd([1,2,3,4]))\n    print(gcd([1,2,3,4,5]))"
    },
    {
      "rank": 19,
      "score": 10.0,
      "candidate": "def gcd(a):\n    if len(a) == 1:\n        return a[0]\n    else:\n        return gcd(a[1:])\n\na = [3, 4, 5, 6, 7]\nprint(gcd(a))"
    },
    {
      "rank": 20,
      "score": 10.0,
      "candidate": "def gcd(a):\n    if len(a) == 1:\n        return a[0]\n\n    if len(a) == 2:\n        return a[0]\n\n    if a[0] > a[1]:\n        return gcd(a[1:])\n    else:\n        return gcd(a[:-1])\n\n\nif __name__ == \"__main__\":\n    a = [1, 2, 3, 4, 5]\n    print(gcd(a))"
    },
    {
      "rank": 21,
      "score": 9.0,
      "candidate": "def gcd(A):\n    if len(A) == 0:\n        return 0\n\n    gcd = A[0]\n    for i in range(1, len(A)):\n        if A[i] > gcd:\n            gcd = A[i]\n\n    return gcd"
    },
    {
      "rank": 22,
      "score": 9.0,
      "candidate": "from math import gcd\n\ndef gcd(arr):\n    if len(arr) == 1:\n        return arr[0]\n    if len(arr) == 2:\n        return max(arr)\n\n    a = arr[0]\n    b = arr[1]\n\n    while b!= 0:\n        a, b = b, a % b\n\n    return a\n\nprint(gcd([1, 2, 3, 4]))"
    },
    {
      "rank": 23,
      "score": 9.0,
      "candidate": "def gcd(arr):\n    if len(arr) < 2:\n        return arr[0]\n\n    if arr[0] == arr[1]:\n        return arr[0]\n\n    return gcd(arr[1:])\n\n\nif __name__ == \"__main__\":\n    print(gcd([2, 3, 4, 5]))"
    },
    {
      "rank": 24,
      "score": 9.0,
      "candidate": "def gcd(a):\n    if len(a) <= 1:\n        return a\n\n    a.sort()\n\n    a[0] = 1\n    a[-1] = 1\n\n    for i in range(1, len(a)):\n        if a[i] > a[i - 1]:\n            return a[i]\n\n    return a[-1]\n\n\nif __name__ == \"__main__\":\n    print(gcd([1, 2, 3, 4]))\n    print(gcd([5, 3, 6, 7]))\n    print(gcd([1, 2, 3, 4, 5]))"
    },
    {
      "rank": 25,
      "score": 9.0,
      "candidate": "def gcd(arr):\n    if len(arr) <= 1:\n        return arr[0]\n\n    m = arr[0]\n    for i in arr[1:]:\n        m = m * i\n\n    return m\n\nprint(gcd([3, 7, 11, 15]))\nprint(gcd([5, 6, 8]))\nprint(gcd([2, 4, 6]))\nprint(gcd([-2, -4, -6]))\nprint(gcd([-2, -4, -6, -8]))"
    },
    {
      "rank": 26,
      "score": 8.0,
      "candidate": "def gcd(a, b):\n    if b == 0:\n        return a\n    return gcd(b, a % b)\n\n\nprint(gcd(2, 3))\nprint(gcd(2, 5))\nprint(gcd(3, 5))\nprint(gcd(3, 10))\nprint(gcd(10, 3))"
    },
    {
      "rank": 27,
      "score": 8.0,
      "candidate": "def gcd(a,b):\n    if a == 0:\n        return b\n    return gcd(b%a, a)\n\n\nprint(gcd(5,3))"
    },
    {
      "rank": 28,
      "score": 8.0,
      "candidate": "def gcd(a, b):\n    if len(a) < len(b):\n        a, b = b, a\n    while a!= b:\n        a, b = b, a % b\n    return b\n\n\nprint(gcd([1, 2, 3, 4, 5], [2, 3, 4, 5, 6]))\nprint(gcd([1, 2, 3, 4, 5], [2, 3, 4, 5, 6]))\nprint(gcd([1, 2, 3, 4, 5], [3, 4, 5, 6]))\nprint(gcd([1, 2, 3, 4, 5], [3, 4, 5, 6, 7]))\nprint(gcd([1, 2, 3, 4, 5], [3, 4, 5, 6, 7, 8]))\nprint(gcd([1, 2, 3, 4, 5], [3, 4, 5, 6, 7, 8]))"
    },
    {
      "rank": 29,
      "score": 8.0,
      "candidate": "def gcd(arr):\n    if len(arr) <= 1:\n        return arr[0]\n    else:\n        return gcd(arr[1:])\n\n\nprint(gcd([1, 2, 3, 4, 5]))"
    },
    {
      "rank": 30,
      "score": 8.0,
      "candidate": "def gcd(arr):\n    if len(arr) < 2:\n        return arr[0]\n    return gcd(arr[1:])\n\nprint(gcd([1, 2, 3]))\nprint(gcd([1, 2, 3, 4]))\nprint(gcd([1, 2, 3, 4, 5]))\nprint(gcd([1, 2, 3, 4, 5, 6]))\nprint(gcd([1, 2, 3, 4, 5, 6, 7]))"
    },
    {
      "rank": 31,
      "score": 8.0,
      "candidate": "def gcd(a):\n    # write your code in Python 3.6\n    if len(a) == 1:\n        return a[0]\n    else:\n        return gcd(a[1:])\n\nprint(gcd([1, 2, 3, 4]))"
    },
    {
      "rank": 32,
      "score": 8.0,
      "candidate": "def gcd(a):\n    if len(a) == 1:\n        return a[0]\n    if len(a) == 2:\n        return a[0] * a[1]\n\n    if len(a) == 3:\n        return a[0] * a[1] * a[2]\n\n    if len(a) == 4:\n        return a[0] * a[1] * a[2] * a[3]\n\n    return gcd(a[1:])\n\n\nprint(gcd([1, 2, 3, 4]))\nprint(gcd([1, 2, 3, 4, 5]))\nprint(gcd([1, 2, 3, 4, 5, 6]))\nprint(gcd([1, 2, 3, 4, 5, 6, 7]))"
    },
    {
      "rank": 33,
      "score": 8.0,
      "candidate": "def gcd(a):\n    if len(a) == 1:\n        return a[0]\n    else:\n        return gcd(a[1:])\n\n\nif __name__ == '__main__':\n    assert gcd([1, 2, 3]) == 2\n    assert gcd([1, 3, 4]) == 3\n    assert gcd([1, 3, 4, 5]) == 5\n    assert gcd([1, 2, 3, 4, 5]) == 6\n    assert gcd([1, 2, 3, 4, 5, 6, 7, 8]) == 8"
    },
    {
      "rank": 34,
      "score": 8.0,
      "candidate": "def gcd(a, b):\n    \"\"\"\n    :type a: int\n    :type b: int\n    :rtype: int\n    \"\"\"\n    while b:\n        a, b = b, a % b\n    return a\n\n\nif __name__ == '__main__':\n    assert gcd(1, 2) == 1\n    assert gcd(1, 3) == 1\n    assert gcd(1, 4) == 2\n    assert gcd(2, 3) == 2\n    assert gcd(2, 5) == 2\n    assert gcd(3, 4) == 3\n    assert gcd(3, 5) == 3\n    assert gcd(4, 5) == 5\n    assert gcd(5, 4) == 4\n    assert gcd(4, 6) == 6\n    assert gcd(4, 7) == 7\n    assert gcd(5, 8) == 8\n    assert gcd(5, 9) == 9\n    assert gcd(6, 7) == 7\n    assert gcd(6, 8) == 8\n    assert gcd(6, 9) == 9\n    assert gcd(7, 8) == 8\n    assert gcd(7, 9) == 9\n    assert gcd(7, 10) == 10\n    assert gcd(8, 9) == 9\n    assert gcd(8, 10) == 10"
    },
    {
      "rank": 35,
      "score": 8.0,
      "candidate": "def gcd(a):\n    if len(a) == 1:\n        return a[0]\n    else:\n        return gcd(a[0], a[1:])\n\n\nif __name__ == \"__main__\":\n    print(gcd([1, 2, 3, 4]))"
    },
    {
      "rank": 36,
      "score": 8.0,
      "candidate": "def gcd(arr):\n    return gcd_helper(arr, 0, len(arr) - 1)\n\ndef gcd_helper(arr, start, end):\n    if start == end:\n        return arr[start]\n\n    mid = (start + end) // 2\n    if arr[start] > arr[mid]:\n        return gcd_helper(arr, start, mid)\n    else:\n        return gcd_helper(arr, mid + 1, end)\n\nprint(gcd([2, 4, 6, 8, 10, 12, 14, 16, 18, 20]))"
    },
    {
      "rank": 37,
      "score": 8.0,
      "candidate": "def gcd(arr):\n    if len(arr) == 1:\n        return arr[0]\n    else:\n        return gcd(arr[1:])\n\n\narr = [2, 3, 4, 5]\nprint(gcd(arr))"
    },
    {
      "rank": 38,
      "score": 8.0,
      "candidate": "def gcd(a, b):\n    \"\"\"\n    :type a: int\n    :type b: int\n    :rtype: int\n    \"\"\"\n    if a == 0:\n        return b\n\n    if b == 0:\n        return a\n\n    return gcd(b, a % b)\n\n\nprint(gcd(5, 8))\nprint(gcd(9, 3))"
    },
    {
      "rank": 39,
      "score": 8.0,
      "candidate": "def gcd(a, b):\n    if b == 0:\n        return a\n    return gcd(b, a % b)\n\n\nif __name__ == '__main__':\n    print(gcd(2, 4))\n    print(gcd(4, 2))\n    print(gcd(2, 3))\n    print(gcd(3, 2))"
    },
    {
      "rank": 40,
      "score": 8.0,
      "candidate": "def gcd(a):\n    if len(a) == 1:\n        return a[0]\n    if len(a) == 2:\n        return a[0] * a[1]\n    if len(a) == 3:\n        return a[0] * a[1] * a[2]\n\n    gcd = gcd(a[0], a[1])\n    for i in range(2, len(a)):\n        gcd = gcd * a[i]\n    return gcd\n\n\nif __name__ == \"__main__\":\n    print(gcd([1, 2, 3, 4, 5]))"
    },
    {
      "rank": 41,
      "score": 8.0,
      "candidate": "def gcd(arr):\n    if len(arr) == 1:\n        return arr[0]\n    return gcd(arr[1:])\n\nprint(gcd([1, 2, 3, 4]))"
    },
    {
      "rank": 42,
      "score": 8.0,
      "candidate": "def gcd(a):\n    if len(a) < 2:\n        return a[0]\n    return gcd(a[1:])\n\nprint(gcd([1, 3, 5, 7, 9]))"
    },
    {
      "rank": 43,
      "score": 8.0,
      "candidate": "def gcd(arr):\n    if len(arr) == 1:\n        return arr[0]\n    else:\n        return gcd(arr[1:])\n\n\nif __name__ == \"__main__\":\n    print(gcd([1, 2, 3, 4, 5, 6]))\n    print(gcd([1, 1, 1, 1, 1, 1]))\n    print(gcd([1, 2, 3, 4, 5, 6]))"
    },
    {
      "rank": 44,
      "score": 8.0,
      "candidate": "def gcd(nums):\n    if len(nums) == 1:\n        return nums[0]\n    else:\n        return gcd(nums[1:])\n\n\nprint(gcd([1, 2, 3, 4, 5, 6, 7]))\nprint(gcd([1, 2, 3, 4, 5, 6, 7, 8]))"
    },
    {
      "rank": 45,
      "score": 8.0,
      "candidate": "def gcd(a, b):\n    if b == 0:\n        return a\n    else:\n        return gcd(b, a % b)\n\nprint(gcd(2, 3))\nprint(gcd(1, 2))\nprint(gcd(3, 2))\nprint(gcd(2, 1))\nprint(gcd(1, 3))\nprint(gcd(3, 1))"
    },
    {
      "rank": 46,
      "score": 8.0,
      "candidate": "def gcd(a):\n    # Write your code here\n    return gcd_helper(a, 0)\n\ndef gcd_helper(a, b):\n    if b == 0:\n        return a\n    else:\n        return gcd_helper(a, b % a)\n\ndef test_gcd():\n    assert gcd([1, 2, 3, 4, 5]) == 2\n    assert gcd([1, 2, 3, 4, 5]) == gcd([1, 2, 3, 4, 5])\n    assert gcd([1, 2, 3, 4, 5]) == gcd([1, 2, 3, 4, 5])\n    assert gcd([1, 2, 3, 4, 5]) == gcd([1, 2, 3, 4, 5])\n    assert gcd([1, 2, 3, 4, 5]) == gcd([1, 2, 3, 4, 5])\n    assert gcd([1, 2, 3, 4, 5]) == gcd([1, 2, 3, 4, 5])\n    assert gcd([1, 2, 3, 4, 5]) == gcd([1, 2, 3, 4, 5])\n    assert gcd([1, 2, 3, 4, 5]) == gcd([1, 2, 3, 4, 5])\n    assert gcd([1, 2, 3, 4, 5]) == gcd([1, 2, 3, 4, 5])\n    assert gcd([1, 2, 3, 4, 5]) == gcd([1, 2, 3, 4, 5])\n    assert gcd([1, 2, 3, 4, 5]) == gcd([1, 2, 3, 4, 5])\n    assert gcd([1, 2, 3, 4, 5]) == gcd([1, 2, 3, 4, 5])\n    assert gcd([1, 2, 3, 4, 5]) == gcd([1, 2, 3, 4, 5])\n    assert gcd([1, 2, 3, 4, 5]) == gcd([1, 2, 3, 4, 5])\n    assert gcd([1, 2, 3, 4, 5]) == gcd([1, 2, 3, 4, 5])\n    assert gcd([1, 2, 3, 4, 5]) == gcd([1, 2, 3, 4, 5])"
    },
    {
      "rank": 47,
      "score": 8.0,
      "candidate": "def gcd(nums):\n    if len(nums) == 1:\n        return nums[0]\n\n    if len(nums) == 2:\n        return max(nums)\n\n    if len(nums) == 3:\n        return min(nums)\n\n    if len(nums) == 4:\n        return max(nums)\n\n    return gcd(nums[0], nums[1], nums[2], nums[3])\n\n\nassert gcd([1, 2, 3, 4]) == 1\nassert gcd([1, 2, 3]) == 1\nassert gcd([1, 2, 3, 4, 5]) == 1\nassert gcd([1, 2, 3, 4, 5, 6]) == 1\nassert gcd([1, 2, 3, 4, 5, 6, 7]) == 1\nassert gcd([1, 2, 3, 4, 5, 6, 7, 8]) == 1\nassert gcd([1, 2, 3, 4, 5, 6, 7, 8, 9]) == 1\nassert gcd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1"
    },
    {
      "rank": 48,
      "score": 8.0,
      "candidate": "def gcd(arr):\n    if len(arr) == 1:\n        return arr[0]\n    if len(arr) == 2:\n        return arr[0] if arr[0] > arr[1] else arr[1]\n\n    return gcd(arr[0], arr[1])\n\n\nif __name__ == \"__main__\":\n    assert gcd([1, 2, 3]) == 3\n    assert gcd([1, 2]) == 1\n    assert gcd([1, 2, 3, 4]) == 3\n    assert gcd([1, 2, 3, 4, 5]) == 5\n    assert gcd([1, 2, 3, 4, 5, 6]) == 6\n    assert gcd([1, 2, 3, 4, 5, 6, 7, 8, 9]) == 9\n    assert gcd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 10"
    },
    {
      "rank": 49,
      "score": 8.0,
      "candidate": "def gcd(a, b):\n    if not b:\n        return a\n    return gcd(b, a % b)\n\n\ndef test_gcd():\n    assert gcd(1, 2) == 1\n    assert gcd(2, 1) == 1\n    assert gcd(1, 3) == 2\n    assert gcd(2, 3) == 3"
    },
    {
      "rank": 50,
      "score": 8.0,
      "candidate": "def gcd(arr):\n    if len(arr) == 0:\n        return 1\n    if len(arr) == 1:\n        return arr[0]\n    if len(arr) == 2:\n        return max(arr)\n    if arr[0] > arr[1]:\n        return gcd(arr[1:])\n    else:\n        return gcd(arr[:-1])\n\nprint(gcd([1, 2, 3]))"
    },
    {
      "rank": 51,
      "score": 8.0,
      "candidate": "def gcd(a):\n    if len(a) == 1:\n        return a[0]\n\n    if len(a) == 2:\n        if a[0] == a[1]:\n            return a[0]\n        else:\n            return a[1]\n\n    if len(a) == 3:\n        if a[0] == a[1] == a[2]:\n            return a[0]\n        else:\n            return a[1]\n\n    a.sort()\n    if a[0] > a[1]:\n        return gcd(a[1:])\n    else:\n        return gcd(a[:-1])\n\n\nprint(gcd([2, 3, 4, 5, 6, 7, 8]))"
    },
    {
      "rank": 52,
      "score": 8.0,
      "candidate": "def gcd(A):\n    gcd = 1\n    for a in A:\n        gcd = gcd * a\n    return gcd\n\n\nprint(gcd([3, 5, 7, 10, 15]))"
    },
    {
      "rank": 53,
      "score": 8.0,
      "candidate": "def gcd(a, b):\n    if a == 0:\n        return b\n    return gcd(b, a % b)\n\n\na = [1, 3, 5, 7, 9, 11]\nb = [3, 5, 7, 9, 11]\nprint(gcd(a, b))"
    },
    {
      "rank": 54,
      "score": 8.0,
      "candidate": "def gcd(nums):\n    if len(nums) < 2:\n        return None\n    if len(nums) == 2:\n        return nums[1]\n\n    if nums[0] % nums[1] == 0:\n        return nums[0]\n    else:\n        return gcd(nums[1:])\n\n\ndef test_function():\n    assert gcd([1, 2, 3]) == 2\n    assert gcd([1, 2]) == 1\n    assert gcd([]) == 0"
    },
    {
      "rank": 55,
      "score": 8.0,
      "candidate": "def gcd(arr):\n    if len(arr) == 1:\n        return arr[0]\n    else:\n        return gcd(arr[1:])\n\nprint(gcd([1, 2, 3, 4]))\nprint(gcd([1, 3, 5, 7, 9]))\nprint(gcd([]))\nprint(gcd([3, 2, 5]))\nprint(gcd([3, 2, 4]))\nprint(gcd([3, 2, 3]))\nprint(gcd([3, 2, 3, 1]))\nprint(gcd([3, 2, 3, 1, 1]))"
    },
    {
      "rank": 56,
      "score": 8.0,
      "candidate": "def gcd(a):\n    if len(a) == 1:\n        return a[0]\n\n    if len(a) == 2:\n        return a[0] if a[0] > a[1] else a[1]\n\n    return gcd(a[1:])\n\n\nprint(gcd([1, 2, 3, 4, 5, 6, 7, 8]))\nprint(gcd([1, 2, 3, 4, 5]))\nprint(gcd([1, 2, 3, 4, 5, 6, 7]))\nprint(gcd([1, 2, 3, 4, 5, 6, 7, 8, 9]))\nprint(gcd([1, 2, 3, 4, 5, 6, 7]))\nprint(gcd([1, 2, 3, 4, 5, 6]))\nprint(gcd([1, 2, 3, 4, 5, 6, 7, 8]))\nprint(gcd([1, 2, 3, 4, 5, 6]))"
    },
    {
      "rank": 57,
      "score": 8.0,
      "candidate": "def gcd(a, b):\n    while b!= 0:\n        a, b = b, a % b\n    return a\n\nprint(gcd(9, 2))\nprint(gcd(9, 3))\nprint(gcd(9, 4))\nprint(gcd(9, 5))\nprint(gcd(9, 6))\nprint(gcd(9, 7))\nprint(gcd(9, 8))\nprint(gcd(9, 9))\nprint(gcd(9, 10))"
    },
    {
      "rank": 58,
      "score": 8.0,
      "candidate": "from typing import List\n\n\ndef gcd(a: List[int]) -> int:\n    # find gcd of all the elements\n    n = len(a)\n    if n == 1:\n        return a[0]\n    if n == 2:\n        return a[0] * a[1]\n\n    # find gcd of the first two elements\n    a[0], a[1] = a[1], a[0]\n    return gcd(a)\n\n\nassert gcd([1, 2, 3, 4, 5]) == 5\nassert gcd([1, 2, 3, 4]) == 2\nassert gcd([1, 2]) == 1\nassert gcd([1]) == 1\nassert gcd([]) == 0"
    },
    {
      "rank": 59,
      "score": 8.0,
      "candidate": "def gcd(arr):\n    if len(arr) == 1:\n        return arr[0]\n    else:\n        return gcd(arr[1:])\n\nprint(gcd([1, 2, 3]))\nprint(gcd([1, 2, 3, 4]))\nprint(gcd([1, 2, 3, 4, 5]))"
    },
    {
      "rank": 60,
      "score": 8.0,
      "candidate": "def gcd(a, b):\n    if b == 0:\n        return a\n    else:\n        return gcd(b, a % b)\n\n\ndef gcd_recursive(a, b):\n    if b == 0:\n        return a\n    else:\n        return gcd_recursive(b, a % b)\n\n\ndef gcd_iterative(a, b):\n    if b == 0:\n        return a\n    else:\n        return gcd_recursive(b, a % b)\n\n\ndef gcd_iterative_recursive(a, b):\n    if b == 0:\n        return a\n    else:\n        return gcd_recursive_recursive(b, a % b)\n\n\ndef main():\n    a = int(input())\n    b = int(input())\n    print(gcd(a, b))\n    print(gcd_recursive(a, b))\n    print(gcd_iterative(a, b))\n    print(gcd_iterative_recursive(a, b))\n\n\nmain()"
    },
    {
      "rank": 61,
      "score": 8.0,
      "candidate": "def gcd(a):\n    if len(a) == 1:\n        return a[0]\n    else:\n        return gcd(a[1:])\n\n\nif __name__ == '__main__':\n    print(gcd([2, 3, 5, 7, 11]))"
    },
    {
      "rank": 62,
      "score": 8.0,
      "candidate": "def gcd(arr):\n  if len(arr) < 2:\n    return arr[0]\n  else:\n    return gcd(arr[1:])\n\n\ndef gcd2(arr):\n  if len(arr) < 2:\n    return arr[0]\n  else:\n    return gcd(arr[1:])\n\n\ndef gcd3(arr):\n  if len(arr) < 3:\n    return arr[0]\n  else:\n    return gcd(arr[1:])\n\n\ndef main():\n  arr = [1, 2, 3, 4]\n  print(gcd(arr))\n  print(gcd2(arr))\n  print(gcd3(arr))\n\nmain()"
    },
    {
      "rank": 63,
      "score": 8.0,
      "candidate": "def gcd(nums):\n    if len(nums) == 1:\n        return nums[0]\n    else:\n        return gcd(nums[1:])\n\n\nprint(gcd([1, 2, 3, 4, 5]))\nprint(gcd([1, 2, 3, 4, 5]))\nprint(gcd([1, 2, 3, 4, 5, 6]))\nprint(gcd([1, 2, 3, 4, 5, 6, 7]))"
    },
    {
      "rank": 64,
      "score": 8.0,
      "candidate": "def gcd(a,b):\n    if a==0 or b==0:\n        return a if a!=0 else b\n    else:\n        return gcd(b,a%b)\n\ndef test():\n    test_cases = [([1,2,3,4,5,6,7], 5), ([1,2,3,4,5,6,7], 6), ([1,2,3,4,5,6,7], 7), ([1,2,3,4,5,6,7], 8), ([1,2,3,4,5,6,7], 9)]\n    for test_case in test_cases:\n        print(gcd(*test_case))\n\ntest()"
    },
    {
      "rank": 65,
      "score": 8.0,
      "candidate": "def gcd(a, b):\n    if b == 0:\n        return a\n    else:\n        return gcd(b, a % b)\n\n\nif __name__ == '__main__':\n    a = int(input())\n    b = int(input())\n    print(gcd(a, b))"
    },
    {
      "rank": 66,
      "score": 8.0,
      "candidate": "def gcd(arr):\n    if len(arr) == 1:\n        return arr[0]\n\n    gcd = arr[0]\n    for i in arr[1:]:\n        if i > gcd:\n            gcd = i\n\n    return gcd\n\n\nprint(gcd([1, 2, 3]))\nprint(gcd([1, 2, 4]))\nprint(gcd([2, 3, 4]))\nprint(gcd([2, 2, 3, 4]))"
    },
    {
      "rank": 67,
      "score": 8.0,
      "candidate": "def gcd(a, b):\n    if b == 0:\n        return a\n    return gcd(b, a % b)\n\n\na = [1, 2, 3, 4, 5]\nb = [1, 2, 3, 4, 5]\n\nprint(gcd(a, b))"
    },
    {
      "rank": 68,
      "score": 8.0,
      "candidate": "def gcd(nums):\n    if len(nums) < 2:\n        return nums[0]\n    else:\n        return gcd(nums[1:])\n\n\nif __name__ == \"__main__\":\n    print(gcd([-1, -2, -3, -4, -5]))"
    },
    {
      "rank": 69,
      "score": 8.0,
      "candidate": "def gcd(a, b):\n    if a == 0 or b == 0:\n        return a if a!= b else b\n    else:\n        return gcd(b, a % b)\n\n\nif __name__ == \"__main__\":\n    a = [1, 2, 3, 4, 5]\n    b = [2, 4]\n    print(gcd(a, b))"
    },
    {
      "rank": 70,
      "score": 8.0,
      "candidate": "def gcd(arr):\n    if len(arr) <= 1:\n        return arr[0]\n    else:\n        return gcd(arr[1:])\n\n\nif __name__ == \"__main__\":\n    print(gcd([1, 2, 3, 4]))\n    print(gcd([1, 2, 3, 4, 5]))"
    },
    {
      "rank": 71,
      "score": 8.0,
      "candidate": "def gcd(a, b):\n    if b == 0:\n        return a\n    return gcd(b, a % b)\n\n\nif __name__ == '__main__':\n    print(gcd(1, 2))"
    },
    {
      "rank": 72,
      "score": 8.0,
      "candidate": "def gcd(arr):\n    if len(arr) == 1:\n        return arr[0]\n    else:\n        return gcd(arr[1:])\n\n\narr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nprint(gcd(arr))"
    },
    {
      "rank": 73,
      "score": 8.0,
      "candidate": "def gcd(a, b):\n    if a == 0:\n        return b\n    if b == 0:\n        return a\n    return gcd(b, a % b)\n\n\na = [1, 3, 4, 5, 7]\nprint(gcd(a, len(a)))"
    },
    {
      "rank": 74,
      "score": 8.0,
      "candidate": "def gcd(arr):\n    if len(arr) < 2:\n        return arr[0]\n    if len(arr) == 2:\n        return arr[0] * arr[1]\n\n    left = arr[0]\n    right = arr[1]\n\n    for i in range(2, len(arr)):\n        if arr[i] > right:\n            right = arr[i]\n        elif arr[i] < left:\n            left = arr[i]\n\n    return left\n\n\nprint(gcd([1, 2, 3, 4, 5]))\nprint(gcd([1, 2, 3, 4, 5, 6]))\nprint(gcd([1, 2, 3, 4, 5, 6, 7, 8, 9]))\nprint(gcd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))"
    },
    {
      "rank": 75,
      "score": 8.0,
      "candidate": "def gcd(arr):\n    if len(arr) <= 1:\n        return arr[0]\n    else:\n        return gcd(arr[1:])\n\nif __name__ == \"__main__\":\n    print(gcd([1, 2, 3, 4, 5]))\n    print(gcd([5, 2, 3, 1]))\n    print(gcd([3, 2, 1, 1]))"
    },
    {
      "rank": 76,
      "score": 8.0,
      "candidate": "def gcd(a, b):\n    if b == 0:\n        return a\n    else:\n        return gcd(b, a % b)\n\n\nif __name__ == '__main__':\n    assert gcd(1, 2) == 1\n    assert gcd(2, 1) == 2\n    assert gcd(3, 1) == 1\n    assert gcd(3, 2) == 2\n    assert gcd(3, 3) == 3"
    },
    {
      "rank": 77,
      "score": 8.0,
      "candidate": "def gcd(nums):\n    if len(nums) == 1:\n        return nums[0]\n    return gcd(nums[1:])\n\nprint(gcd([1, 2, 3]))\nprint(gcd([1, 2, 3, 4]))\nprint(gcd([1, 2, 3, 4, 5]))\nprint(gcd([1, 2, 3, 4, 5, 6]))"
    },
    {
      "rank": 78,
      "score": 8.0,
      "candidate": "def gcd(a,b):\n    if(a == 0):\n        return b\n    return gcd(b,a%b)\n\nprint(gcd(5,6))"
    },
    {
      "rank": 79,
      "score": 8.0,
      "candidate": "def gcd(arr):\n    if len(arr) == 1:\n        return arr[0]\n    else:\n        return gcd(arr[1:])\n\nprint(gcd([1, 2, 3]))\nprint(gcd([1, 2, 3, 4]))\nprint(gcd([1, 2, 3, 4, 5]))\nprint(gcd([1, 2, 3, 4, 5, 6]))\nprint(gcd([1, 2, 3, 4, 5, 6, 7]))"
    },
    {
      "rank": 80,
      "score": 8.0,
      "candidate": "def gcd(arr):\n    if len(arr) == 1:\n        return arr[0]\n    if len(arr) == 2:\n        return arr[0] * arr[1]\n    gcd = arr[0]\n    for i in range(1, len(arr)):\n        if gcd % arr[i] == 0:\n            gcd = gcd // arr[i]\n    return gcd\n\n\ndef main():\n    arr = [1, 2, 3, 4]\n    print(gcd(arr))\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 81,
      "score": 8.0,
      "candidate": "def gcd(a, b):\n    while b:\n        a, b = b, a%b\n\n    return a\n\n\ndef main():\n    print(gcd([1, 2, 3, 4, 5], [3, 5, 7, 9, 11]))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 82,
      "score": 8.0,
      "candidate": "def gcd(a, b):\n    if b == 0:\n        return a\n    return gcd(b, a % b)\n\nif __name__ == \"__main__\":\n    print(gcd(2, 3))\n    print(gcd(2, 5))\n    print(gcd(5, 5))\n    print(gcd(5, 5))\n    print(gcd(5, 4))\n    print(gcd(2, 4))\n    print(gcd(2, 2))\n    print(gcd(2, 1))\n    print(gcd(2, -1))\n    print(gcd(1, -1))\n    print(gcd(1, 1))\n    print(gcd(2, 1))\n    print(gcd(2, 2))\n    print(gcd(2, 3))\n    print(gcd(1, 2))\n    print(gcd(2, 3))\n    print(gcd(1, 3))\n    print(gcd(2, 3))\n    print(gcd(3, 1))\n    print(gcd(3, 2))\n    print(gcd(2, 3))\n    print(gcd(3, 4))\n    print(gcd(3, 2))\n    print(gcd(3, 3))\n    print(gcd(3, 2))\n    print(gcd(3, 2))\n    print(gcd(3, 1))\n    print(gcd(2, 2))\n    print(gcd(3, 3))\n    print(gcd(2, 1))"
    },
    {
      "rank": 83,
      "score": 8.0,
      "candidate": "class Solution:\n    def gcd(self, a, b):\n        \"\"\"\n        :type a: int\n        :type b: int\n        :rtype: int\n        \"\"\"\n        if a == 0 or b == 0:\n            return 0\n        if a == b:\n            return a\n        if a > b:\n            return self.gcd(b, a)\n        else:\n            return self.gcd(a, b)"
    },
    {
      "rank": 84,
      "score": 8.0,
      "candidate": "def gcd(a, b):\n    if a == 0:\n        return b\n    return gcd(b % a, a)\n\n\ndef main():\n    a = [1, 2, 3, 4, 5, 6]\n    b = [2, 3, 4, 5, 6]\n    print(gcd(a, b))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 85,
      "score": 8.0,
      "candidate": "def gcd(a, b):\n    if b == 0:\n        return a\n    else:\n        return gcd(b, a % b)\n\na = int(input())\nb = int(input())\nprint(gcd(a, b))"
    },
    {
      "rank": 86,
      "score": 1.0,
      "candidate": "def gcd(arr):\n    # your code here\n    return arr[0] if arr else None\n\n\nif __name__ == \"__main__\":\n    print(gcd([1, 2, 3, 4, 5]))"
    },
    {
      "rank": 87,
      "score": 1.0,
      "candidate": "from typing import List\n\n\ndef gcd(arr: List[int]) -> int:\n    if len(arr) <= 1:\n        return arr[0]\n\n    return gcd(arr[1:])\n\n\nif __name__ == \"__main__\":\n    assert gcd([1, 2, 3, 4]) == 2\n    assert gcd([1, 2, 3]) == 1\n    assert gcd([1]) == 1"
    },
    {
      "rank": 88,
      "score": 1.0,
      "candidate": "from typing import List\n\n\ndef gcd(arr: List[int]) -> int:\n    if len(arr) == 1:\n        return arr[0]\n\n    a = arr[0]\n    b = arr[1]\n    for i in range(2, len(arr)):\n        a = a * b\n        b = i\n\n    return a\n\n\nassert gcd([1, 3, 5]) == 1\nassert gcd([1, 2, 3, 4, 5]) == 2\nassert gcd([1, 2, 3, 4, 5]) == 3\nassert gcd([1, 2, 3, 4, 5, 6, 7, 8, 9]) == 9"
    },
    {
      "rank": 89,
      "score": 1.0,
      "candidate": "class Solution:\n    def gcd(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        if len(nums) == 1:\n            return nums[0]\n        if len(nums) == 2:\n            return max(nums)\n        if len(nums) == 3:\n            return min(nums)\n        if len(nums) == 4:\n            return max(nums)\n        if len(nums) == 5:\n            return min(nums)\n        if len(nums) == 6:\n            return max(nums)\n        if len(nums) == 7:\n            return min(nums)\n        if len(nums) == 8:\n            return max(nums)\n        if len(nums) == 9:\n            return min(nums)\n        return None"
    },
    {
      "rank": 90,
      "score": 1.0,
      "candidate": "def gcd(arr):\n    if len(arr) == 1:\n        return arr[0]\n\n    if len(arr) == 2:\n        return arr[0] if arr[0] > arr[1] else arr[1]\n\n    if len(arr) == 3:\n        return arr[0] if arr[0] % arr[1] == 0 else arr[1]\n\n    for i in range(1, len(arr)):\n        if arr[i] % arr[0] == 0:\n            return gcd(arr[:i])\n\n    return arr[-1]\n\n\narr = [1, 2, 3, 4, 5]\nprint(gcd(arr))"
    },
    {
      "rank": 91,
      "score": 1.0,
      "candidate": "def gcd(nums):\n    if len(nums) == 0:\n        return 0\n    return gcd(nums[1:])\n\n\nprint(gcd([1, 2, 3, 4, 5, 6, 7]))"
    },
    {
      "rank": 92,
      "score": 1.0,
      "candidate": "def gcd(a, b):\n    if b == 0:\n        return a\n    else:\n        return gcd(b, a % b)\n\n\nif __name__ == \"__main__\":\n    print(gcd([1, 2, 3, 4, 5], 4))\n    print(gcd([1, 2, 3, 4, 5], 3))\n    print(gcd([1, 2, 3, 4, 5], 2))\n    print(gcd([1, 2, 3, 4, 5], 1))"
    },
    {
      "rank": 93,
      "score": 1.0,
      "candidate": "def gcd(a):\n    if not a:\n        return 0\n\n    return a[0] if len(a) == 1 else gcd(a[1:])\n\ndef test_gcd():\n    assert gcd([1,2,3]) == 1\n    assert gcd([1,3,6]) == 2\n    assert gcd([1,2,3,6,10]) == 3\n    assert gcd([1,2,3,6,10,11]) == 3\n    assert gcd([1,2,3,6,10,11,12]) == 1"
    },
    {
      "rank": 94,
      "score": 1.0,
      "candidate": "def gcd(a):\n    if len(a) < 2:\n        return a[0]\n    else:\n        return gcd(a[1:])\n\n\nprint(gcd([1, 3, 7, 9]))\nprint(gcd([1, 2, 3, 4]))\nprint(gcd([4, 5, 6, 7]))\nprint(gcd([1, 2, 3, 4, 5]))\nprint(gcd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))"
    },
    {
      "rank": 95,
      "score": 1.0,
      "candidate": "def gcd(arr):\n    if len(arr) == 1:\n        return arr[0]\n    elif len(arr) == 2:\n        return arr[0] if arr[0] > arr[1] else arr[1]\n    else:\n        return gcd(arr[1:])\n\n\nprint(gcd([1, 2, 3]))\nprint(gcd([1, 2, 3, 4]))\nprint(gcd([1, 2, 3, 4, 5]))\nprint(gcd([1, 2, 3, 4, 5, 6]))\nprint(gcd([1, 2, 3, 4, 5, 6, 7]))"
    },
    {
      "rank": 96,
      "score": 1.0,
      "candidate": "def gcd(arr):\n    # Write your code here\n    if len(arr) == 1:\n        return arr[0]\n    else:\n        return gcd(arr[1:])"
    },
    {
      "rank": 97,
      "score": 1.0,
      "candidate": "def gcd(arr):\n    if len(arr) == 0:\n        return 0\n    else:\n        return arr[0] * gcd(arr[1:])\n\n\nif __name__ == \"__main__\":\n    print(gcd([1, 2, 3, 4]))\n    print(gcd([2, 3, 4, 5]))\n    print(gcd([0, 1, 2, 3, 4]))\n    print(gcd([0, 1, 2, 3, 4, 5, 6, 7, 8, 9]))"
    },
    {
      "rank": 98,
      "score": 1.0,
      "candidate": "def gcd(arr):\n    \"\"\"\n    :type arr: List[int]\n    :rtype: int\n    \"\"\"\n\n    if len(arr) == 1:\n        return arr[0]\n    else:\n        return gcd(arr[1:])\n\n\nif __name__ == \"__main__\":\n    print(gcd([1, 2, 3]))"
    },
    {
      "rank": 99,
      "score": 1.0,
      "candidate": "def gcd(arr):\n    if len(arr) < 2:\n        return arr[0]\n    if len(arr) == 2:\n        return arr[0] if arr[1] == arr[0] else arr[1]\n    mid = len(arr) // 2\n    left = gcd(arr[:mid])\n    right = gcd(arr[mid:])\n    return left if left > right else right\n\n\nprint(gcd([1, 3, 5, 7]))\nprint(gcd([3, 2, 7]))"
    },
    {
      "rank": 100,
      "score": 1.0,
      "candidate": "def gcd(a):\n    if len(a) == 1:\n        return a[0]\n\n    return gcd(a[0], a[1])\n\n\nprint(gcd([1, 2, 3, 4]))"
    }
  ]
}