{
  "timestamp": "2025-09-14T14:34:30.586985",
  "method": "improved_llm_judge",
  "judge_model": "codellama/CodeLlama-7b-Python-hf",
  "target_model": "codet5-770m",
  "dataset": "mbpp",
  "problem_number": 287,
  "total_candidates": 100,
  "results": [
    {
      "rank": 1,
      "score": 10.0,
      "candidate": "def find_in_list(list1, list2):\n    return [x for x in list1 if x in list2]\n\nprint(find_in_list([1, 2, 3], [4, 5, 6]))"
    },
    {
      "rank": 2,
      "score": 10.0,
      "candidate": "def find_in_list(list1, list2):\n    result = []\n    for i in list1:\n        if i in list2:\n            result.append(i)\n    return result\n\n\ndef main():\n    print(find_in_list([1, 2, 3], [4, 5, 6]))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 3,
      "score": 10.0,
      "candidate": "def nested_list_elements(list1, list2):\n    \"\"\"\n    :type list1: List[List[int]]\n    :type list2: List[List[int]]\n    :rtype: List[int]\n    \"\"\"\n    return [list1[i][j] for i in range(len(list1)) for j in range(len(list2)) if list1[i][j] in list2[i]]\n\n\nif __name__ == \"__main__\":\n    print(nested_list_elements([[1, 2], [3, 4]], [[5, 6], [7, 8]]))\n    print(nested_list_elements([[1, 2], [3, 4]], [[5, 6], [7, 8], [9, 10]]))\n    print(nested_list_elements([[1, 2], [3, 4]], [[5, 6], [7, 8], [9, 10], [11, 12]]))"
    },
    {
      "rank": 4,
      "score": 10.0,
      "candidate": "from typing import List\n\n\ndef nested_list_elements(lst: List[List[int]]) -> List[int]:\n    return [elem for lst in lst for elem in lst]\n\n\nif __name__ == \"__main__\":\n    print(nested_list_elements([[1, 2, 3], [4, 5, 6]]))"
    },
    {
      "rank": 5,
      "score": 10.0,
      "candidate": "def nested_list_element(nested_list, nested_list_element):\n    if nested_list == []:\n        return []\n    if nested_list_element == []:\n        return []\n    for i in nested_list:\n        if i in nested_list_element:\n            return True\n        else:\n            return nested_list_element\n\n\ndef main():\n    print(nested_list_element([], []))\n    print(nested_list_element([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\n    print(nested_list_element([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]))\n    print(nested_list_element([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]))\n\n\nmain()"
    },
    {
      "rank": 6,
      "score": 10.0,
      "candidate": "def find_elements_in_nested(list_a, list_b):\n    for i in range(len(list_a)):\n        if list_a[i] in list_b:\n            return True\n    return False\n\nif __name__ == '__main__':\n    print(find_elements_in_nested([1, 2, 3, 4, 5], [1, 2, 3, 4]))\n    print(find_elements_in_nested([1, 2, 3, 4, 5], [1, 2, 3, 5, 6, 7]))"
    },
    {
      "rank": 7,
      "score": 10.0,
      "candidate": "def nested_list_contains(list1, list2):\n    return [item for item in list1 if item in list2]\n\n\nprint(nested_list_contains([1, 2, 3], [1, 2, 3]))\nprint(nested_list_contains([1, 2, 3], [4, 5, 6]))\nprint(nested_list_contains([1, 2, 3], [7, 8, 9]))"
    },
    {
      "rank": 8,
      "score": 10.0,
      "candidate": "def find_nested_list_elements(nested_list_1, nested_list_2):\n    for element in nested_list_1:\n        if element in nested_list_2:\n            return True\n    return False"
    },
    {
      "rank": 9,
      "score": 10.0,
      "candidate": "def nested_list(arr, n):\n    for i in range(len(arr)):\n        if arr[i] == n:\n            return [i]\n        else:\n            if len(arr) > 1:\n                for j in nested_list(arr[i:], n):\n                    if j not in arr:\n                        arr.append(j)\n            else:\n                arr.remove(n)\n    return None\n\n\nif __name__ == \"__main__\":\n    print(nested_list([1, 2, 3, 4, 5, 6, 7], 3))\n    print(nested_list([1, 2, 3, 4, 5, 6, 7], 4))\n    print(nested_list([1, 2, 3, 4, 5, 6, 7], 5))"
    },
    {
      "rank": 10,
      "score": 10.0,
      "candidate": "def find_nested_list(nested_list, nested_list_element):\n    \"\"\"\n    :type nested_list: List[List[int]]\n    :type nested_list_element: int\n    :rtype: List[int]\n    \"\"\"\n    if not nested_list:\n        return []\n    if not nested_list_element:\n        return nested_list\n    for list in nested_list:\n        if isinstance(list, list):\n            return find_nested_list(list, nested_list_element)\n    return [nested_list_element]\n\n\ndef main():\n    print(find_nested_list([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 8))\n    print(find_nested_list([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 9))\n    print(find_nested_list([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 7))\n    print(find_nested_list([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 5))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 11,
      "score": 10.0,
      "candidate": "def find_nested_list(list1, list2):\n    return [item for sublist in list1 for item in sublist if item in list2]\n\n\nif __name__ == '__main__':\n    print(find_nested_list([1, 2, 3], [2, 4, 5]))"
    },
    {
      "rank": 12,
      "score": 10.0,
      "candidate": "def nested_list_present(nested_list_a, nested_list_b):\n    return nested_list_a in nested_list_b\n\n\nnested_list_a = [1, 2, 3, 4, 5]\nnested_list_b = [1, 2, 3, 4, 5]\n\nprint(nested_list_present(nested_list_a, nested_list_b))"
    },
    {
      "rank": 13,
      "score": 10.0,
      "candidate": "class ListNode:\n    def __init__(self, val, next=None):\n        self.val = val\n        self.next = next\n\n\ndef nested_list_elements(l1, l2):\n    return list(filter(lambda x: isinstance(x, ListNode), (l1, l2)))\n\n\ndef test_nested_list_elements():\n    assert nested_list_elements([1, 2, 3], [1, 2, 3]) == [1, 2]\n    assert nested_list_elements([1, 2, 3], [4, 5]) == []"
    },
    {
      "rank": 14,
      "score": 10.0,
      "candidate": "def nested_list_present(lst1, lst2):\n    for i in lst1:\n        if isinstance(i, list) and isinstance(lst2, list):\n            if i in lst2:\n                return True\n    return False\n\n\nprint(nested_list_present([1, [2, 3]], [4, [5, [6, 7]]]))\nprint(nested_list_present([1, [2, 3]], [4, [5, [6, 7]]]))\nprint(nested_list_present([1, [2, 3]], [5, [6, 7]]))"
    },
    {
      "rank": 15,
      "score": 9.0,
      "candidate": "def list_contain(list1, list2):\n    return all(x in list2 for x in list1)\n\n\nif __name__ == \"__main__\":\n    assert list_contain([1, 2, 3], [4, 5, 6])\n    assert list_contain([1, 2, 3], [7, 8])\n    assert list_contain([1, 2, 3], [1, 2, 3])"
    },
    {
      "rank": 16,
      "score": 9.0,
      "candidate": "def nested_list_present(nested_list1, nested_list2):\n    \"\"\"\n    :type nested_list1: list\n    :type nested_list2: list\n    :rtype: bool\n    \"\"\"\n    return any([item in nested_list2 for item in nested_list1])\n\n\ndef main():\n    print(nested_list_present([[1, 2], [3, 4], [5, 6]], [1, 2, 3, 4, 5, 6]))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 17,
      "score": 9.0,
      "candidate": "def nested_list_elements(list1, list2):\n    if not list1 or not list2:\n        return None\n    if not isinstance(list1, list):\n        return None\n    if not isinstance(list2, list):\n        return None\n    result = []\n    for element in list1:\n        if element in list2:\n            result.append(element)\n    return result"
    },
    {
      "rank": 18,
      "score": 8.0,
      "candidate": "def nested_list_elements(list1, list2):\n    list1 = list(filter(lambda x: x not in list2, list1))\n    return list1"
    },
    {
      "rank": 19,
      "score": 8.0,
      "candidate": "def find_nested_list(a,b):\n    for i in a:\n        if i in b:\n            return True\n    return False\n\n\na = [1,2,3,4,5]\nb = [4,5]\nprint(find_nested_list(a,b))"
    },
    {
      "rank": 20,
      "score": 8.0,
      "candidate": "def find_in_list(list_1, list_2):\n    return [i for i in list_1 if i in list_2]"
    },
    {
      "rank": 21,
      "score": 8.0,
      "candidate": "def find_nested_list(list1, list2):\n    list1.sort()\n    list2.sort()\n    for i in range(len(list1)):\n        if list1[i] in list2:\n            return True\n    return False\n\nlist1 = [1,2,3]\nlist2 = [4,5,6]\n\nprint(find_nested_list(list1, list2))"
    },
    {
      "rank": 22,
      "score": 8.0,
      "candidate": "def nested_list_element_present(list_of_lists, list_of_elements):\n    result = []\n    for list_element in list_of_elements:\n        if list_element in list_of_lists:\n            result.append(list_element)\n    return result\n\n\nprint(nested_list_element_present([[1, 2, 3], [4, 5]], [1, 2, 3, 4, 5]))"
    },
    {
      "rank": 23,
      "score": 8.0,
      "candidate": "def find_nested(list_1, list_2):\n    return list(set(list_1) & set(list_2))\n\n\nprint(find_nested([1,2,3], [4,5,6]))"
    },
    {
      "rank": 24,
      "score": 8.0,
      "candidate": "def find_nested_list_elements(list_1, list_2):\n    result = []\n    for item in list_1:\n        if isinstance(item, list) and isinstance(list_2, list):\n            if item in list_2:\n                result.append(item)\n        else:\n            if item == list_2:\n                result.append(item)\n    return result\n\n\nprint(find_nested_list_elements([1, 2, 3], [4, 5, 6]))"
    },
    {
      "rank": 25,
      "score": 8.0,
      "candidate": "def nested_list(a, b):\n    return [item for item in a if item in b]\n\n\nif __name__ == '__main__':\n    assert nested_list([1, 2, 3], [1, 2, 4]) == [1, 2, 4]\n    assert nested_list([1, 2, 3], [1, 4, 3]) == [1, 4, 3]"
    },
    {
      "rank": 26,
      "score": 8.0,
      "candidate": "def nested_list_contains(list1, list2):\n    if type(list1)!= list or type(list2)!= list:\n        return False\n    for item in list1:\n        if item not in list2:\n            return False\n    return True\n\n\nprint(nested_list_contains([1, 2, 3], [4, 5, 6]))\nprint(nested_list_contains([1, 2, 3], [1, 2, 3]))"
    },
    {
      "rank": 27,
      "score": 8.0,
      "candidate": "def nested_list_elements(list_1, list_2):\n    return [x for x in list_1 if x in list_2]\n\ndef main():\n    list_1 = [1,2,3,4,5]\n    list_2 = [2,3,4,5,6]\n    print(nested_list_elements(list_1, list_2))\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 28,
      "score": 8.0,
      "candidate": "def find_in_nested(nested_list, target_list):\n    nested_list = set(nested_list)\n    target_list = set(target_list)\n    return target_list.intersection(nested_list)\n\ndef test():\n    test_list = [1, [2,3], 4]\n    test_target = [1, 3, 4]\n    assert find_in_nested(test_list, test_target) == set([1, 2, 3, 4])\n\nif __name__ == '__main__':\n    test()"
    },
    {
      "rank": 29,
      "score": 8.0,
      "candidate": "def find_nested_list_elements(nested_list_1, nested_list_2):\n    return [item for item in nested_list_1 if item in nested_list_2]\n\n\nprint(find_nested_list_elements([1,2,3],[3,4]))"
    },
    {
      "rank": 30,
      "score": 8.0,
      "candidate": "def find_nested_list(list1, list2):\n    return [x for x in list1 if x in list2]\n\n\nprint(find_nested_list([1, 2, 3, 4], [1, 3, 4]))"
    },
    {
      "rank": 31,
      "score": 8.0,
      "candidate": "def find_nested_list_elements(nested_list, element):\n    return [x for x in nested_list if x[0] == element]\n\n\nprint(find_nested_list_elements([[1, 2, 3], [4, 5, 6], [7, 8]], 8))"
    },
    {
      "rank": 32,
      "score": 8.0,
      "candidate": "def nested_list(list1, list2):\n    if list1 == [] and list2 == []:\n        return True\n    if list1 == []:\n        return False\n    if list2 == []:\n        return False\n    for i in range(len(list1)):\n        if nested_list(list1[i], list2[0]):\n            return True\n        if nested_list(list1[i], list2[1]):\n            return True\n    return False\n\nprint(nested_list([1,2,3], [4,5,6]))\nprint(nested_list([1,2,3,4], [5,6,7,8]))\nprint(nested_list([1,2,3,4], [4,5,6,7,8]))\nprint(nested_list([1,2,3,4,5], [6,7,8,9,10]))"
    },
    {
      "rank": 33,
      "score": 8.0,
      "candidate": "def nested_list_element(list_1, list_2):\n    \"\"\"\n    :type list_1: list\n    :type list_2: list\n    :rtype: list\n    \"\"\"\n    result = []\n    for i in list_1:\n        if i in list_2:\n            result.append(i)\n    return result\n\n\ndef nested_list_element_2(list_1, list_2):\n    \"\"\"\n    :type list_1: list\n    :type list_2: list\n    :rtype: list\n    \"\"\"\n    for i in list_1:\n        if i in list_2:\n            return i\n    return None\n\n\nif __name__ == \"__main__\":\n    print(nested_list_element([1, 2, 3, 4, 5], [2, 5]))\n    print(nested_list_element_2([1, 2, 3, 4, 5], [2, 5]))"
    },
    {
      "rank": 34,
      "score": 8.0,
      "candidate": "def find_list_in_nested_list(list1, list2):\n    list1 = sorted(list1)\n    list2 = sorted(list2)\n\n    return [item for item in list1 if item in list2]\n\n\ndef main():\n    list1 = [1, 2, 3]\n    list2 = [4, 5, 6]\n    print(find_list_in_nested_list(list1, list2))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 35,
      "score": 8.0,
      "candidate": "def nested_list_elements(a, b):\n    \"\"\"\n    :type a: List[List[int]]\n    :type b: List[int]\n    :rtype: List[int]\n    \"\"\"\n    if len(a)!= len(b):\n        return []\n    result = []\n    for i in range(len(a)):\n        if a[i] in b:\n            result.append(a[i])\n    return result\n\n\nif __name__ == \"__main__\":\n    print(nested_list_elements([[1, 2, 3], [4, 5, 6]], [[1, 2, 3], [4, 5, 6]]))"
    },
    {
      "rank": 36,
      "score": 8.0,
      "candidate": "def nested_list_contains(list1, list2):\n    for elem in list1:\n        if elem in list2:\n            return True\n    return False\n\n\nif __name__ == \"__main__\":\n    list1 = [[1, 2], [3, 4]]\n    list2 = [[1, 2], [3, 4]]\n    print(nested_list_contains(list1, list2))"
    },
    {
      "rank": 37,
      "score": 8.0,
      "candidate": "def find_nested_list(list1, list2):\n    list1_set = set(list1)\n    list2_set = set(list2)\n    return list1_set.intersection(list2_set)\n\n\nif __name__ == \"__main__\":\n    assert find_nested_list([1, 2, 3], [1, 2]) == {1, 2}\n    assert find_nested_list([1, 2, 3], [2, 3]) == {1, 2}\n    assert find_nested_list([1, 2, 3], [3, 4]) == {1, 2}\n    assert find_nested_list([1, 2, 3], [1]) == {1, 2}\n    assert find_nested_list([1, 2, 3], []) == set()"
    },
    {
      "rank": 38,
      "score": 8.0,
      "candidate": "def nested_list_elements(list1, list2):\n    res = []\n    for element in list1:\n        if element in list2:\n            res.append(element)\n    return res\n\nif __name__ == \"__main__\":\n    list1 = [1,2,3]\n    list2 = [4,5,6]\n    print(nested_list_elements(list1,list2))"
    },
    {
      "rank": 39,
      "score": 8.0,
      "candidate": "def find_in_list(list1, list2):\n    # Write your code here\n    return [i for i in list1 if i in list2]"
    },
    {
      "rank": 40,
      "score": 8.0,
      "candidate": "def find_nested(a, b):\n    result = []\n\n    for i in range(len(a)):\n        if a[i] in b:\n            result.append(a[i])\n\n    return result\n\n\nprint(find_nested([1, 2, 3], [2, 4, 6]))"
    },
    {
      "rank": 41,
      "score": 8.0,
      "candidate": "def find_in_list(list_1, list_2):\n    \"\"\"\n    :type list_1: List[List[int]]\n    :type list_2: List[List[int]]\n    :rtype: List[int]\n    \"\"\"\n\n    result = []\n\n    for i in range(len(list_1)):\n        if list_1[i] in list_2:\n            result.append(list_1[i])\n\n    return result"
    },
    {
      "rank": 42,
      "score": 8.0,
      "candidate": "def find_nested_elements(list1, list2):\n    return [element for element in list1 if element in list2]\n\nif __name__ == \"__main__\":\n    print(find_nested_elements([1,2,3], [4,5,6]))\n    print(find_nested_elements([1,2,3,4,5], [6,7,8]))\n    print(find_nested_elements([1,2,3,4,5], [7,8,9,10]))"
    },
    {
      "rank": 43,
      "score": 8.0,
      "candidate": "def find_elements(list_1, list_2):\n    # your code here\n    if len(list_1) == 0 or len(list_2) == 0:\n        return []\n    elif len(list_1) == 1:\n        return [list_1[0]]\n    elif len(list_2) == 1:\n        return [list_2[0]]\n    elif list_1[0] == list_2[0]:\n        return find_elements(list_1[1:], list_2[1:])\n    elif list_1[0] in list_2:\n        return find_elements(list_1[1:], list_2[1:])\n    else:\n        return find_elements(list_1[:-1], list_2[:-1]) + find_elements(list_1[:-1], list_2[1:])"
    },
    {
      "rank": 44,
      "score": 8.0,
      "candidate": "def find_nested_elements(a, b):\n    if a is None or b is None:\n        return []\n    if a.value is None or b.value is None:\n        return []\n    return [x for x in [a.value, b.value] if x is not None]"
    },
    {
      "rank": 45,
      "score": 8.0,
      "candidate": "def nested_list_elements(list1, list2):\n    for item in list1:\n        if item in list2:\n            return True\n    return False\n\n\nlist1 = [[1, 2], [3, 4]]\nlist2 = [[1, 2], [3, 4]]\n\nprint(nested_list_elements(list1, list2))"
    },
    {
      "rank": 46,
      "score": 8.0,
      "candidate": "def find_nested_list(lst, val):\n    if isinstance(val, list):\n        for i in val:\n            if i in lst:\n                return True\n    return False\n\n\ndef main():\n    lst = [1, 2, 3, 4, 5]\n    val = 2\n\n    print(find_nested_list(lst, val))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 47,
      "score": 8.0,
      "candidate": "def find_list(list1, list2):\n    # write your code here\n    result = []\n    for item in list1:\n        if item in list2:\n            result.append(item)\n    return result\n\nlist1 = [[1,2],[3,4],[5,6]]\nlist2 = [[1,2],[3,4],[5,6]]\n\nprint(find_list(list1,list2))"
    },
    {
      "rank": 48,
      "score": 8.0,
      "candidate": "def find_in_list(nested_list, list_to_find):\n    for i in nested_list:\n        if i in list_to_find:\n            return True\n    return False\n\n\ndef find_in_list_2(nested_list, list_to_find):\n    for i in nested_list:\n        if i in list_to_find:\n            return True\n        if isinstance(i, list):\n            return find_in_list_2(i, list_to_find)\n    return False\n\n\ndef find_in_list_3(nested_list, list_to_find):\n    return any(i in list_to_find for i in nested_list)\n\n\ndef main():\n    nested_list = [1, [2, [3, 4]], 5]\n    list_to_find = [2, 3, 4]\n    print(find_in_list_3(nested_list, list_to_find))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 49,
      "score": 8.0,
      "candidate": "def find_in_list(nested_list, list_element):\n    if len(nested_list) == 0:\n        return False\n    if list_element in nested_list:\n        return True\n    return find_in_list(nested_list[1:], list_element)\n\nif __name__ == '__main__':\n    assert find_in_list([1, 2, 3], 3) == True\n    assert find_in_list([1, 2, 3], 4) == True\n    assert find_in_list([1, 2, 3], 5) == False\n    assert find_in_list([1, 2, 3], 6) == False\n    assert find_in_list([1, 2, 3, 4, 5, 6], 6) == True\n    assert find_in_list([1, 2, 3, 4, 5, 6], 7) == False\n    assert find_in_list([1, 2, 3, 4, 5, 6], 8) == False\n    assert find_in_list([1, 2, 3, 4, 5, 6, 7, 8], 9) == False"
    },
    {
      "rank": 50,
      "score": 8.0,
      "candidate": "def find_in_nested_list(lst, x):\n    result = []\n    for i in lst:\n        if isinstance(i, list) and x in i:\n            result.append(i)\n    return result\n\n\nif __name__ == \"__main__\":\n    lst = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    x = 2\n    print(find_in_nested_list(lst, x))"
    },
    {
      "rank": 51,
      "score": 8.0,
      "candidate": "def nested_list_elements(list1, list2):\n    return [\n        x\n        for x in list1\n        if x in list2\n    ]"
    },
    {
      "rank": 52,
      "score": 8.0,
      "candidate": "def list_contains(list1, list2):\n    for i in range(len(list1)):\n        if list1[i] in list2:\n            return True\n    return False\n\n\nif __name__ == \"__main__\":\n    list1 = [1, 2, 3, 4, 5]\n    list2 = [2, 4, 6, 8, 10]\n    print(list_contains(list1, list2))"
    },
    {
      "rank": 53,
      "score": 8.0,
      "candidate": "def find_nested_list_elements(list_1, list_2):\n    # write your code here\n    return [i for i in list_1 if i in list_2]"
    },
    {
      "rank": 54,
      "score": 8.0,
      "candidate": "def nested_list_in(list_a, list_b):\n    for i in list_a:\n        if isinstance(i, list) and isinstance(list_b, list):\n            if i in list_b:\n                return True\n        else:\n            return False\n\n\nif __name__ == \"__main__\":\n    assert nested_list_in([1, 2, 3], [1, 2, 3])\n    assert nested_list_in([1, 2, 3], [1, 3])\n    assert not nested_list_in([1, 2, 3], [1, 3, 4])\n    assert not nested_list_in([1, 2, 3], [2, 3])\n    assert not nested_list_in([1, 2, 3], [4, 3])\n    assert not nested_list_in([1, 2, 3], [4, 4])\n    assert not nested_list_in([1, 2, 3], [1, 4])\n    assert not nested_list_in([1, 2, 3], [1, 5])"
    },
    {
      "rank": 55,
      "score": 8.0,
      "candidate": "def find_nested_list_elements(l1, l2):\n    return [i for i in l1 if isinstance(i, list) and find_nested_list_elements(i, l2)]"
    },
    {
      "rank": 56,
      "score": 7.0,
      "candidate": "class Solution:\n    def find_nested_list_elements(self, nested_list, list):\n        res = []\n        for i in nested_list:\n            if type(i) == list:\n                res += self.find_nested_list_elements(i, list)\n            elif type(i) == dict:\n                for k in i:\n                    if k in list:\n                        res.append(k)\n        return res"
    },
    {
      "rank": 57,
      "score": 7.0,
      "candidate": "def find_in_nested_list(l1, l2):\n    return [i for i in l1 if i in l2]\n\n\nprint(find_in_nested_list([1,2,3], [4,5]))\nprint(find_in_nested_list([1,2,3], [4,6,7]))"
    },
    {
      "rank": 58,
      "score": 1.0,
      "candidate": "def nested_list(lst1, lst2):\n    return [lst1[i] for i in range(len(lst1)) if lst1[i] in lst2]\n\n\nif __name__ == '__main__':\n    print(nested_list([1, 2, 3], [4, 5, 6]))\n    print(nested_list([1, 2, 3], [5, 6, 7]))\n    print(nested_list([1, 2, 3], [1, 2, 3, 4]))"
    },
    {
      "rank": 59,
      "score": 1.0,
      "candidate": "def nested_list_in(l1, l2):\n    # Write your code here\n    return [x for x in l1 if x in l2]\n\n\nif __name__ == \"__main__\":\n    print(nested_list_in([1,2,3], [4,5,6]))"
    },
    {
      "rank": 60,
      "score": 1.0,
      "candidate": "def nested_list_elements(a, b):\n    a_set = set(a)\n    b_set = set(b)\n    return a_set.intersection(b_set)\n\n\ndef test():\n    a = [1, 2, 3]\n    b = [4, 5, 6]\n    assert nested_list_elements(a, b) == set([4, 5, 6])\n\n\ntest()"
    },
    {
      "rank": 61,
      "score": 1.0,
      "candidate": "def find_nested_list_elements(list_1, list_2):\n    result = []\n    for i in range(len(list_1)):\n        if list_1[i] in list_2:\n            result.append(list_1[i])\n    return result\n\nif __name__ == \"__main__\":\n    print(find_nested_list_elements([1, 2, 3, 4, 5], [2, 5]))"
    },
    {
      "rank": 62,
      "score": 1.0,
      "candidate": "def find_elements(lst, val):\n    \"\"\"\n    :type lst: List[List[str]]\n    :type val: str\n    :rtype: List[str]\n    \"\"\"\n    if not lst:\n        return []\n    if not val:\n        return [val]\n\n    res = []\n    for i in lst:\n        res += find_elements(i, val)\n\n    return res\n\n\nprint(find_elements([[1, 2, 3]], \"1\"))\nprint(find_elements([[1, 2, 3]], \"2\"))\nprint(find_elements([[1, 2, 3]], \"3\"))"
    },
    {
      "rank": 63,
      "score": 1.0,
      "candidate": "def find_elements(list_of_elements, nested_list_of_elements):\n    return [element for element in nested_list_of_elements if element in list_of_elements]\n\n\nif __name__ == \"__main__\":\n    list_of_elements = [1, 2, 3]\n    nested_list_of_elements = [[1, 2], [3, 4]]\n    print(find_elements(list_of_elements, nested_list_of_elements))\n\n    list_of_elements = [1, 2, 3]\n    nested_list_of_elements = [[1, 2], [3, 4]]\n    print(find_elements(list_of_elements, nested_list_of_elements))\n\n    list_of_elements = [1, 2, 3]\n    nested_list_of_elements = [[1, 2, 3, 4], [5, 6, 7]]\n    print(find_elements(list_of_elements, nested_list_of_elements))\n\n    list_of_elements = [1, 2, 3, 4]\n    nested_list_of_elements = [[1, 2, 3, 4], [5, 6, 7]]\n    print(find_elements(list_of_elements, nested_list_of_elements))"
    },
    {
      "rank": 64,
      "score": 1.0,
      "candidate": "def find_nested_list(list1, list2):\n    for i in list1:\n        if isinstance(i, list) and len(i) > 0:\n            for j in i:\n                if isinstance(j, list) and len(j) > 0:\n                    for k in j:\n                        if isinstance(k, list) and len(k) > 0:\n                            for l in k:\n                                if l in list2:\n                                    return True\n    return False\n\nprint(find_nested_list([1,2,3],[1,2,3]))\nprint(find_nested_list([1,2,3],[2,3]))\nprint(find_nested_list([1,2,3],[]))\nprint(find_nested_list([1,2,3],[3,4]))\nprint(find_nested_list([1,2,3],[4,5,6]))\nprint(find_nested_list([1,2,3],[1,2,3]))\nprint(find_nested_list([1,2,3],[1,2]))\nprint(find_nested_list([1,2,3],[1,2,4]))\nprint(find_nested_list([1,2,3],[1,2,5]))\nprint(find_nested_list([1,2,3],[1,2,6]))\nprint(find_nested_list([1,2,3],[1,2,7]))\nprint(find_nested_list([1,2,3],[1,2,8]))\nprint(find_nested_list([1,2,3],[1,2,9]))\nprint(find_nested_list([1,2,3],[1,2,10]))\nprint(find_nested_list([1,2,3],[1,2,11]))\nprint(find_nested_list([1,2,3],[1,2,12]))"
    },
    {
      "rank": 65,
      "score": 1.0,
      "candidate": "def nested_list_present(nested_list, other_list):\n    for i in range(len(other_list)):\n        if other_list[i] in nested_list:\n            return True\n\n    return False\n\n\nif __name__ == \"__main__\":\n    assert nested_list_present([1, 2, 3], [1, 2, 4]) == True\n    assert nested_list_present([1, 2, 3], [1, 4, 3]) == False\n    assert nested_list_present([1, 2, 3], [3, 4, 3]) == True\n    assert nested_list_present([1, 2, 3], [3, 5, 3]) == False\n\n    assert nested_list_present([1, 2, 3], [1, 4, 5]) == True\n    assert nested_list_present([1, 2, 3], [2, 3, 4]) == False\n    assert nested_list_present([1, 2, 3], [3, 5, 5]) == True\n    assert nested_list_present([1, 2, 3], [5, 4, 3]) == False"
    },
    {
      "rank": 66,
      "score": 1.0,
      "candidate": "def find_nested_list_elements(a, b):\n    a_set = set(a)\n    b_set = set(b)\n    return a_set.intersection(b_set)\n\n\nif __name__ == \"__main__\":\n    a = [1, 2, 3, 4, 5]\n    b = [6, 7, 8, 9, 10]\n    print(find_nested_list_elements(a, b))"
    },
    {
      "rank": 67,
      "score": 1.0,
      "candidate": "def nested_list_find(nested_list, item):\n    if isinstance(nested_list, list):\n        if item in nested_list:\n            return True\n        return False\n    return False\n\n\nif __name__ == '__main__':\n    nested_list = [1, 2, [3, 4, [5, [6, 7]]]]\n    item = 1\n    print(nested_list_find(nested_list, item))\n    item = 2\n    print(nested_list_find(nested_list, item))\n    item = [1, 2, [3, 4, [5, [6, 7]]]]\n    print(nested_list_find(nested_list, item))"
    },
    {
      "rank": 68,
      "score": 1.0,
      "candidate": "def find_nested_list_elements(a, b):\n    for i in range(len(a)):\n        if a[i] == b[i]:\n            return True\n    return False\n\n\nif __name__ == '__main__':\n    assert find_nested_list_elements([1, 2, 3], [4, 5]) == True\n    assert find_nested_list_elements([1, 2, 3], [6, 7]) == False\n    assert find_nested_list_elements([1, 2, 3], [8, 9]) == True"
    },
    {
      "rank": 69,
      "score": 1.0,
      "candidate": "def find_nested_list_element(nested_list, nested_list_element):\n    for element in nested_list:\n        if element == nested_list_element:\n            return True\n    return False\n\n\ndef main():\n    nested_list = [\n        [1, 2, 3],\n        [4, 5, 6],\n        [7, 8, 9],\n        [10]\n    ]\n    nested_list_element = 9\n    print(find_nested_list_element(nested_list, nested_list_element))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 70,
      "score": 1.0,
      "candidate": "def find_nested_list_elements(list1, list2):\n    if len(list1) == 0:\n        return []\n    if len(list2) == 0:\n        return []\n    result = []\n    for i in range(len(list1)):\n        if list1[i] in list2:\n            result.append(list1[i])\n    return result\n\n\nif __name__ == \"__main__\":\n    print(find_nested_list_elements([1, 2, 3], [4, 5, 6]))"
    },
    {
      "rank": 71,
      "score": 1.0,
      "candidate": "def find_in_list(list1, list2):\n    return [x for x in list1 if x in list2]\n\n\nif __name__ == \"__main__\":\n    test_cases = [\n        ([1, 2, 3], [4, 5, 6]),\n        ([1, 2, 3], [1, 3, 5, 6]),\n        ([1, 2, 3], [4, 5, 6, 7]),\n        ([1, 2, 3], [2, 4, 5, 6]),\n    ]\n\n    for test_case in test_cases:\n        print(find_in_list(*test_case))"
    },
    {
      "rank": 72,
      "score": 1.0,
      "candidate": "def nested_list_elements(list1, list2):\n    \"\"\"\n    :type list1: List[int]\n    :type list2: List[int]\n    :rtype: List[int]\n    \"\"\"\n    result = []\n    for i in range(len(list1)):\n        if list1[i] in list2:\n            result.append(list1[i])\n    return result\n\n\ndef main():\n    print(nested_list_elements([1, 2, 3], [2, 4, 5]))\n    print(nested_list_elements([1, 2, 3], [1, 3, 5]))\n    print(nested_list_elements([1, 2, 3], [1, 5, 6]))\n    print(nested_list_elements([1, 2, 3], [1, 4, 5]))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 73,
      "score": 1.0,
      "candidate": "from typing import List\n\n\ndef nested_list_elements(my_list: List[int], other_list: List[int]) -> List[int]:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(n)\n    \"\"\"\n    # Your code here\n    result = []\n\n    for item in my_list:\n        if item in other_list:\n            result.append(item)\n\n    return result\n\n\nprint(nested_list_elements([1, 2, 3, 4, 5, 6, 7], [2, 3, 4, 5, 6, 7]))"
    },
    {
      "rank": 74,
      "score": 1.0,
      "candidate": "from typing import List\n\n\ndef find_nested_list_elements(lst: List[List[int]], key: int) -> List[int]:\n    return [i for i in range(len(lst)) if key in lst[i]]\n\n\nif __name__ == \"__main__\":\n    assert find_nested_list_elements([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 1) == [5, 6]\n    assert find_nested_list_elements([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 2) == [7, 8, 9]\n    assert find_nested_list_elements([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 0) == []"
    },
    {
      "rank": 75,
      "score": 1.0,
      "candidate": "class Solution:\n    def findElements(self, l1: List[List[int]], l2: List[int]) -> List[int]:\n        # write your code here\n        l1.sort()\n        l2.sort()\n        i = 0\n        j = 0\n        while i < len(l1) and j < len(l2):\n            if l1[i] == l2[j]:\n                return [l1[i], l2[j]]\n            elif l1[i] < l2[j]:\n                i += 1\n            else:\n                j += 1\n        return []"
    },
    {
      "rank": 76,
      "score": 1.0,
      "candidate": "def nested_list_in(nested_list, element):\n    return any(nested_list[i][1] == element for i in range(len(nested_list)))\n\n\ndef test():\n    nested_list = [[1, 2], [3, 4]]\n    element = 5\n    assert nested_list_in(nested_list, element)\n\n    nested_list = [[1, 2], [3, 4]]\n    element = 6\n    assert not nested_list_in(nested_list, element)\n\n    nested_list = [[1, 2], [3, 4]]\n    element = 7\n    assert nested_list_in(nested_list, element)\n\n\ntest()"
    },
    {
      "rank": 77,
      "score": 1.0,
      "candidate": "def nested_list(my_list, other_list):\n    return [item for item in my_list if item in other_list]\n\n\nif __name__ == \"__main__\":\n    my_list = [1, 2, 3, 4, 5]\n    other_list = [1, 2, 3, 4, 5, 6]\n\n    print(nested_list(my_list, other_list))"
    },
    {
      "rank": 78,
      "score": 1.0,
      "candidate": "def find_nested_list(list1, list2):\n    for i in list1:\n        if isinstance(i, list):\n            find_nested_list(i, list2)\n        else:\n            print(i)\n\n\nif __name__ == \"__main__\":\n    list1 = [1, 2, 3]\n    list2 = [4, 5, 6]\n    find_nested_list(list1, list2)"
    },
    {
      "rank": 79,
      "score": 1.0,
      "candidate": "def nested_list(list1, list2):\n    list1 = sorted(list1)\n    list2 = sorted(list2)\n    result = []\n    for i in range(len(list1)):\n        if list1[i] in list2:\n            result.append(list1[i])\n    return result\n\n\nif __name__ == '__main__':\n    test_list = [1, 2, [4, 5, 6]]\n    test_list_2 = [1, 2, [4, 5, 6]]\n    print(nested_list(test_list, test_list_2))"
    },
    {
      "rank": 80,
      "score": 1.0,
      "candidate": "def find_nested_elements(list1, list2):\n    list1_keys = list1.keys()\n    list2_keys = list2.keys()\n    return [k for k in list1_keys if k in list2_keys]\n\n\nlist1 = {'a': {'b': {'c': {'d': {'e': {'f': 'g'}}}}}}\nlist2 = {'b': {'c': {'d': {'e': {'f': 'g'}}}}}\n\nprint(find_nested_elements(list1, list2))\n\n# Solution 1\n\ndef find_nested_elements_1(list1, list2):\n    list1_keys = list1.keys()\n    list2_keys = list2.keys()\n    return [k for k in list1_keys if k in list2_keys]\n\n\nlist1 = {'a': {'b': {'c': {'d': {'e': {'f': 'g'}}}}}}\nlist2 = {'b': {'c': {'d': {'e': {'f': 'g'}}}}}\n\nprint(find_nested_elements_1(list1, list2))"
    },
    {
      "rank": 81,
      "score": 1.0,
      "candidate": "def nested_list_elements(my_list, nested_list):\n    return [x for x in my_list if x in nested_list]\n\n\nif __name__ == '__main__':\n    my_list = [1, 2, 3, 4, 5]\n    nested_list = [1, 2, 3, 4]\n    print(nested_list_elements(my_list, nested_list))"
    },
    {
      "rank": 82,
      "score": 1.0,
      "candidate": "def nested_list_element_present(nested_list, element):\n    if type(nested_list)!= list:\n        return False\n    if len(nested_list) == 0:\n        return element in nested_list\n    return nested_list[0] in nested_list_element_present(nested_list[1:], element)\n\n\nif __name__ == \"__main__\":\n    nested_list = [\n        {\n            \"a\": {\n                \"b\": \"c\"\n            },\n            \"c\": {\n                \"d\": \"e\"\n            }\n        },\n        {\n            \"a\": {\n                \"b\": \"c\"\n            },\n            \"c\": {\n                \"d\": \"e\"\n            }\n        }\n    ]\n    element = {\n        \"a\": {\n            \"b\": \"c\"\n        },\n        \"c\": {\n            \"d\": \"e\"\n        }\n    }\n    print(nested_list_element_present(nested_list, element))"
    },
    {
      "rank": 83,
      "score": 1.0,
      "candidate": "def find_nested(nested_list, nested_element):\n    # Your code here\n    for i in nested_list:\n        if i.get(nested_element) is not None:\n            return True\n    return False\n\n\nnested_list = [\n    {\"name\": \"John\", \"children\": [{\"name\": \"John Smith\", \"children\": []}]},\n    {\"name\": \"Kate\", \"children\": [{\"name\": \"Kate Smith\", \"children\": []}]},\n    {\"name\": \"Jane\", \"children\": [{\"name\": \"Jane Smith\", \"children\": []}]},\n]\n\nnested_element = \"children\"\n\nprint(find_nested(nested_list, nested_element))"
    },
    {
      "rank": 84,
      "score": 1.0,
      "candidate": "def find_elements_in_nested_list(nested_list, target_list):\n    result = []\n\n    for element in target_list:\n        if element in nested_list:\n            result.append(element)\n\n    return result\n\n\nprint(find_elements_in_nested_list([1, 2, 3], [4, 5, 6]))\nprint(find_elements_in_nested_list([1, 2, 3], [7, 8, 9]))"
    },
    {
      "rank": 85,
      "score": 1.0,
      "candidate": "def nested_list_elements(nested_list, other_list):\n    result = []\n    for i in other_list:\n        if i in nested_list:\n            result.append(i)\n    return result\n\n\nif __name__ == \"__main__\":\n    nested_list = [1, [2, [3, 4]], 5]\n    other_list = [1, [2, [3, 4]], 5]\n    print(nested_list_elements(nested_list, other_list))"
    },
    {
      "rank": 86,
      "score": 1.0,
      "candidate": "def nested_list_elements(nested_list_1, nested_list_2):\n    return [item for item in nested_list_1 if item in nested_list_2]\n\n\ndef nested_list_elements_2(nested_list_1, nested_list_2):\n    return [item for item in nested_list_1 if item in nested_list_2]\n\n\nprint(nested_list_elements([1, 2, 3, 4, 5], [2, 3, 5]))\nprint(nested_list_elements_2([1, 2, 3, 4, 5], [2, 3, 5]))"
    },
    {
      "rank": 87,
      "score": 1.0,
      "candidate": "def nested_list_present(nested_list, sub_list):\n\n    return [element for element in nested_list if element in sub_list]\n\n\nnested_list = [1, 2, 3, 4]\nsub_list = [1, 2, 3]\nprint(nested_list_present(nested_list, sub_list))"
    },
    {
      "rank": 88,
      "score": 1.0,
      "candidate": "def nested_list_contains(lst, elem):\n    if type(lst) is not list:\n        return False\n    for i in lst:\n        if type(elem) is not list:\n            return False\n        if i not in elem:\n            return False\n    return True\n\n\ndef nested_list_contains2(lst, elem):\n    if type(lst) is not list:\n        return False\n    for i in lst:\n        if type(elem) is not list:\n            return False\n        if i not in elem:\n            return False\n    return True\n\n\nif __name__ == '__main__':\n    lst1 = [1, 2, 3]\n    lst2 = [4, 5]\n    print(nested_list_contains(lst1, lst2))\n    print(nested_list_contains2(lst1, lst2))"
    },
    {
      "rank": 89,
      "score": 1.0,
      "candidate": "def find_nested_list_elements(nested_list, elem):\n    return [elem for elem in nested_list if elem.get(elem)!= None]\n\n\nif __name__ == '__main__':\n    nested_list = [\n        {\n            \"a\": \"1\",\n            \"b\": \"2\",\n            \"c\": {\n                \"d\": \"3\"\n            }\n        },\n        {\n            \"a\": \"4\",\n            \"b\": \"5\",\n            \"c\": {\n                \"d\": \"6\"\n            }\n        }\n    ]\n\n    elem = {\n        \"a\": \"1\",\n        \"b\": \"2\",\n        \"c\": {\n            \"d\": \"3\"\n        }\n    }\n\n    print(find_nested_list_elements(nested_list, elem))"
    },
    {
      "rank": 90,
      "score": 1.0,
      "candidate": "def find_list_elements(list1, list2):\n    return [x for x in list1 if x in list2]\n\n\nif __name__ == '__main__':\n    assert find_list_elements([1, 2, 3], [4, 5, 6]) == [1, 2, 3, 4, 5, 6]\n    assert find_list_elements([1, 2, 3, 4], [5, 6, 7, 8]) == [1, 2, 3, 4, 5, 6, 7, 8]"
    },
    {
      "rank": 91,
      "score": 1.0,
      "candidate": "def find_nested_list(list_1, list_2):\n    return list(filter(lambda x: x in list_1, list_2))\n\n\ndef main():\n    list_1 = [1, 2, 3, 4]\n    list_2 = [5, 6, 7, 8]\n    print(find_nested_list(list_1, list_2))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 92,
      "score": 1.0,
      "candidate": "def find_nested_list_elements(list1, list2):\n    # write your code here\n    return [x for x in list1 if x in list2]\n\n\ndef find_nested_list_elements_recursive(list1, list2):\n    result = []\n    if list1 is None:\n        return result\n    if list2 is None:\n        return result\n    if len(list1) > len(list2):\n        return find_nested_list_elements_recursive(list2, list1[len(list1):])\n    else:\n        return find_nested_list_elements_recursive(list1, list2[len(list2):]) + [list2[len(list2):]]\n\n\nif __name__ == '__main__':\n    print(find_nested_list_elements([1, 2, 3, 4, 5], [6, 7, 8, 9, 10]))\n    print(find_nested_list_elements_recursive([1, 2, 3, 4, 5], [6, 7, 8, 9, 10]))"
    },
    {
      "rank": 93,
      "score": 1.0,
      "candidate": "def find_list_elements(list1, list2):\n    list1_list = list1\n    list2_list = list2\n    list_elements = []\n    while len(list1_list) > 0 and len(list2_list) > 0:\n        if list1_list[-1] in list2_list:\n            list_elements.append(list1_list[-1])\n            list1_list.pop()\n            list2_list.pop()\n        else:\n            break\n    return list_elements\n\n\nif __name__ == '__main__':\n    list1 = [2, 3, 4, 5]\n    list2 = [1, 2, 3, 4]\n    print(find_list_elements(list1, list2))"
    },
    {
      "rank": 94,
      "score": 1.0,
      "candidate": "def find_in_list(a, b):\n    # write your code here\n    if type(a) == list and type(b) == list:\n        return find_in_list_helper(a, b)\n    elif type(a) == list and type(b)!= list:\n        return False\n    elif type(a)!= list and type(b) == list:\n        return False\n    else:\n        return True\n\n\ndef find_in_list_helper(a, b):\n    if type(a) == list and type(b) == list:\n        for i in a:\n            if find_in_list_helper(i, b):\n                return True\n        for i in b:\n            if find_in_list_helper(a, i):\n                return True\n        return False\n    elif type(a)!= list and type(b)!= list:\n        return False\n    else:\n        return False\n\n\na = [1, 2, 3]\nb = [4, 5, 6]\nprint(find_in_list(a, b))"
    },
    {
      "rank": 95,
      "score": 1.0,
      "candidate": "def find_list_elements(list1, list2):\n    list1_set = set(list1)\n    list2_set = set(list2)\n\n    return list1_set.intersection(list2_set)\n\nprint(find_list_elements([1, 2, 3, 4], [2, 4, 6, 8]))"
    },
    {
      "rank": 96,
      "score": 1.0,
      "candidate": "def nested_list_element(list_1, list_2):\n    return list(set(list_1) & set(list_2))\n\n\nprint(nested_list_element([1, 2, 3], [4, 5]))"
    },
    {
      "rank": 97,
      "score": 1.0,
      "candidate": "def find_list_element(list_element, list_elements):\n    for list_element in list_elements:\n        if list_element in list_element:\n            return True\n\n    return False\n\nif __name__ == \"__main__\":\n    list_elements = [['a', 'b'], ['c', 'd'], ['e', 'f'], ['g', 'h']]\n    list_element = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h']\n    print(find_list_element(list_element, list_elements))"
    },
    {
      "rank": 98,
      "score": 1.0,
      "candidate": "from typing import List\n\n\ndef find_nested_list_elements(lst1: List[int], lst2: List[int]) -> List[int]:\n    return [num for num in lst1 if num in lst2]\n\n\nif __name__ == \"__main__\":\n    assert find_nested_list_elements([1, 2, 3], [4, 5]) == [1, 2, 3, 4, 5]\n    assert find_nested_list_elements([1, 2, 3], [4, 5, 6]) == [1, 2, 3, 4, 5, 6]\n    assert find_nested_list_elements([1, 2, 3], [4, 5, 6, 7]) == [1, 2, 3, 4, 5, 6, 7]\n    assert find_nested_list_elements([1, 2, 3], [4, 5, 6, 7, 8]) == [1, 2, 3, 4, 5, 6, 7, 8]"
    },
    {
      "rank": 99,
      "score": 1.0,
      "candidate": "def nested_list_element(nested_list, nested_list_element):\n    result = []\n\n    def traverse(nested_list, nested_list_element):\n        for item in nested_list:\n            if isinstance(item, list):\n                traverse(item, nested_list_element)\n            elif item == nested_list_element:\n                result.append(item)\n\n    traverse(nested_list, nested_list_element)\n    return result\n\n\nif __name__ == \"__main__\":\n    nested_list = [\n        [1, 2, 3],\n        [4, 5, 6],\n        [7, 8, 9],\n        [10, 11, 12],\n    ]\n    nested_list_element = 9\n    print(nested_list_element)\n    print(nested_list_element in nested_list)"
    },
    {
      "rank": 100,
      "score": 1.0,
      "candidate": "def find_nested_list_elements(list_1, list_2):\n    \"\"\"\n    :type list_1: list[list[int]]\n    :type list_2: list[list[int]]\n    :rtype: list[int]\n    \"\"\"\n    if len(list_1) == 0:\n        return list_2\n    if len(list_2) == 0:\n        return list_1\n    if list_1[0] == list_2[0]:\n        return find_nested_list_elements(list_1[1:], list_2[1:])\n    else:\n        return find_nested_list_elements(list_1[1:], find_nested_list_elements(list_2[1:], list_1))\n\n\nif __name__ == \"__main__\":\n    list_1 = [[1, 2], [3, 4], [5, 6]]\n    list_2 = [[1, 2], [3, 4], [5, 6]]\n    print(find_nested_list_elements(list_1, list_2))"
    }
  ]
}