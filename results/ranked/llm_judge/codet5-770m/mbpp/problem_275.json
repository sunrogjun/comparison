{
  "timestamp": "2025-09-14T14:28:58.830420",
  "method": "improved_llm_judge",
  "judge_model": "codellama/CodeLlama-7b-Python-hf",
  "target_model": "codet5-770m",
  "dataset": "mbpp",
  "problem_number": 275,
  "total_candidates": 100,
  "results": [
    {
      "rank": 1,
      "score": 10.0,
      "candidate": "class Solution:\n    def maxSubArray(self, nums: List[int], k: int) -> int:\n        return sum(nums[0:k] + nums[k:])"
    },
    {
      "rank": 2,
      "score": 10.0,
      "candidate": "def max_sum_repeated(arr, k):\n    if len(arr)==0:\n        return 0\n    max_sum=0\n    for i in range(k):\n        max_sum=max(max_sum+arr[i],arr[i])\n    return max_sum\n\nprint(max_sum_repeated([-2,1,-3,4,-1,2,1,-5,4],3))"
    },
    {
      "rank": 3,
      "score": 10.0,
      "candidate": "class Solution(object):\n    def max_subarray(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"\n        if k == 1:\n            return max(nums)\n        else:\n            return max(nums[0] + self.max_subarray(nums[1:], k-1), self.max_subarray(nums[1:], k))"
    },
    {
      "rank": 4,
      "score": 10.0,
      "candidate": "class Solution(object):\n    def maxSubArray(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"\n        if k == 1:\n            return max(nums)\n        if len(nums) == 1:\n            return nums[0]\n\n        max_sum = nums[0]\n        for i in range(1, len(nums)):\n            max_sum = max(max_sum + nums[i], nums[i])\n\n        return max_sum * k"
    },
    {
      "rank": 5,
      "score": 10.0,
      "candidate": "class Solution(object):\n    def max_sub_array(self, arr, k):\n        \"\"\"\n        :type arr: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"\n        if len(arr) < k:\n            return arr[0]\n        elif len(arr) == k:\n            return arr[0]\n        max_sum = arr[0]\n        for i in range(len(arr)-1):\n            max_sum = max(max_sum + arr[i+1], arr[i])\n        return max_sum"
    },
    {
      "rank": 6,
      "score": 10.0,
      "candidate": "def max_sum(arr, k):\n    n = len(arr)\n    if k < 0 or k > n:\n        return 0\n    max_sum = arr[0]\n    for i in range(1, n):\n        max_sum = max(max_sum + arr[i], arr[i])\n    return max_sum\n\n\nif __name__ == \"__main__\":\n    arr = [1, -2, 3, 4, 5, -1, 2]\n    k = 3\n    print(max_sum(arr, k))"
    },
    {
      "rank": 7,
      "score": 10.0,
      "candidate": "class Solution(object):\n    def maxSum(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"\n        if k == 1:\n            return max(nums)\n\n        temp = [0 for i in range(k)]\n\n        for i in range(len(nums)):\n            temp[nums[i]] += nums[i]\n\n        result = temp[-1]\n\n        for i in range(k - 1, len(nums)):\n            result = max(result, temp[i] + temp[i - k])\n\n        return result"
    },
    {
      "rank": 8,
      "score": 10.0,
      "candidate": "class Solution(object):\n    def max_sub_array(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"\n        if len(nums) == 0:\n            return 0\n        if k == 1:\n            return nums[0]\n        if k > len(nums):\n            k = len(nums)\n        res = nums[0]\n        for i in range(1, len(nums)):\n            res = max(res, nums[i] + nums[i-1])\n        return res\n\n\nif __name__ == \"__main__\":\n    s = Solution()\n    print s.max_sub_array([2, 7, 11, 15], 2)\n    print s.max_sub_array([2, 7, 11, 15], 3)\n    print s.max_sub_array([2, 7, 11, 15], 4)\n    print s.max_sub_array([2, 7, 11, 15], 5)"
    },
    {
      "rank": 9,
      "score": 10.0,
      "candidate": "def max_sub_array(arr, k):\n    if k == 0:\n        return 0\n    else:\n        return arr[k-1] + max_sub_array(arr, k-1)\n\nprint(max_sub_array([1,2,3,4,5,6], 3))"
    },
    {
      "rank": 10,
      "score": 10.0,
      "candidate": "def largest_sum(arr, k):\n    arr.sort()\n    # print(arr)\n    # print(k)\n    largest_sum = 0\n    # print(arr)\n    for i in range(len(arr)):\n        largest_sum = max(largest_sum + arr[i], arr[i] * k)\n    return largest_sum\n\n\nprint(largest_sum([-2, 1, -3, 4, -1, 2, 1, 5], 2))"
    },
    {
      "rank": 11,
      "score": 10.0,
      "candidate": "def largest_sum_of_repeating_array(arr, k):\n    max_sum = 0\n    for i in range(len(arr)):\n        for j in range(k):\n            max_sum = max(max_sum, arr[i] + arr[i + j])\n    return max_sum\n\n\ndef main():\n    arr = [1, 2, 3, 4, 5]\n    k = 3\n    print(largest_sum_of_repeating_array(arr, k))\n\n\nmain()"
    },
    {
      "rank": 12,
      "score": 10.0,
      "candidate": "class Solution(object):\n    def maxSubArray(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"\n        if k < 1:\n            return 0\n        if k == 1:\n            return max(nums)\n\n        max_sum = nums[0]\n        for i in range(1, len(nums)):\n            max_sum = max(max_sum + nums[i], nums[i])\n        return max_sum\n\na = Solution()\nprint(a.maxSubArray([-2, 1, -3, 4, -1, 2, 1, -5, 4], 2))"
    },
    {
      "rank": 13,
      "score": 10.0,
      "candidate": "def largest_sum_of_contiguous_array(arr, k):\n    \"\"\"\n    :type arr: List[int]\n    :type k: int\n    :rtype: int\n    \"\"\"\n    if not arr:\n        return 0\n    last_sum = arr[0]\n    for i in range(1, len(arr)):\n        last_sum = max(last_sum + arr[i], arr[i])\n    return last_sum * k\n\nif __name__ == \"__main__\":\n    print(largest_sum_of_contiguous_array([-2,1,-3,4,-1,2,1,-5,4], 3))"
    },
    {
      "rank": 14,
      "score": 10.0,
      "candidate": "class Solution(object):\n    def largestSum(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"\n        if not nums:\n            return 0\n        if k == 1:\n            return max(nums)\n        max_sum = 0\n        for i in range(k):\n            max_sum = max(max_sum, sum(nums) * k)\n            nums = [0] + nums\n        return max_sum\n\n\nif __name__ == \"__main__\":\n    s = Solution()\n    print s.largestSum([1, 2, 3, 4, 5], 3)\n    print s.largestSum([1, 2, 3, 4, 5], 3)\n    print s.largestSum([1, 2, 3, 4, 5], 2)\n    print s.largestSum([1, 2, 3, 4, 5], 1)"
    },
    {
      "rank": 15,
      "score": 10.0,
      "candidate": "def max_sum(arr, k):\n    if len(arr) == 0:\n        return 0\n    if k == 1:\n        return arr[0]\n\n    res = arr[0]\n    for i in range(1, len(arr)):\n        res = max(res, arr[i] + arr[i - 1])\n    return res\n\n\nprint(max_sum([-2, 1, -3, 4, -1, 2, 1, -5], 2))\nprint(max_sum([-2, 1, -3, 4, -1, 2, 1, -5], 3))\nprint(max_sum([-2, 1, -3, 4, -1, 2, 1, -5], 4))\nprint(max_sum([-2, 1, -3, 4, -1, 2, 1, -5], 5))"
    },
    {
      "rank": 16,
      "score": 10.0,
      "candidate": "def largest_sum_of_contiguous_array(arr, k):\n    # Write your code here\n    max_sum = 0\n    for i in range(len(arr)):\n        max_sum = max(arr[i] * k + max_sum, arr[i])\n    return max_sum\n\n\nif __name__ == '__main__':\n    print(largest_sum_of_contiguous_array([2, 3, 4, 5, 7, 8, 9], 3))"
    },
    {
      "rank": 17,
      "score": 10.0,
      "candidate": "class Solution(object):\n    def maxSubArray(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"\n        if not nums:\n            return 0\n        n = len(nums)\n        dp = [0] * (n + 1)\n        for i in range(n):\n            for j in range(i + 1, n + 1):\n                if nums[i] < nums[j]:\n                    dp[j] = max(dp[j], dp[i] + nums[i])\n                else:\n                    dp[j] = max(dp[j], dp[i] + nums[j] * k)\n        return max(dp)"
    },
    {
      "rank": 18,
      "score": 10.0,
      "candidate": "# Time Complexity: O(n)\n# Space Complexity: O(1)\n\n\ndef max_sum_repeating_array(arr, k):\n    max_sum = 0\n    for i in range(len(arr)):\n        max_sum = max(arr[i], max_sum + arr[i])\n    return max_sum\n\n\nif __name__ == '__main__':\n    print(max_sum_repeating_array([-2, 1, -3, 4, -1, 2, 1, 5, 4], 2))"
    },
    {
      "rank": 19,
      "score": 10.0,
      "candidate": "class Solution(object):\n    def largestSum(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"\n        n = len(nums)\n        if n == 0:\n            return 0\n        if k > n:\n            return max(nums)\n        nums.sort()\n        max_sum = nums[0]\n        for i in range(1, n):\n            max_sum = max(max_sum + nums[i], nums[i])\n        return max_sum * k"
    },
    {
      "rank": 20,
      "score": 8.965584673561883,
      "candidate": "def largest_sum_repeated_array(arr, k):\n    max_sum = 0\n\n    for i in range(k):\n        max_sum = max(max_sum, arr[i] + arr[i + 1])\n\n    return max_sum\n\n\nif __name__ == \"__main__\":\n    print(largest_sum_repeated_array([1, 2, 3, -4, 5], 3))"
    },
    {
      "rank": 21,
      "score": 8.928108538188557,
      "candidate": "def max_sum(arr, k):\n    if k == 0:\n        return max(arr)\n    else:\n        return max(max_sum(arr[:k], k - 1) + arr[k], max_sum(arr[k:], k))\n\n\nprint(max_sum([1, 2, 3, 4, 5, 6], 2))"
    },
    {
      "rank": 22,
      "score": 8.784674286868109,
      "candidate": "class Solution(object):\n    def maxSubArray(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"\n        if k == 0:\n            return max(nums)\n        else:\n            return max(nums[0] + self.maxSubArray(nums[1:], k-1), self.maxSubArray(nums[1:], k))"
    },
    {
      "rank": 23,
      "score": 8.75176688375279,
      "candidate": "def largest_sum_of_array_k_times(arr, k):\n    return max(arr[i] + arr[i+k] for i in range(len(arr)-k+1))\n\n\nprint(largest_sum_of_array_k_times([2, 3, -1, 4, -2, 1], 3))"
    },
    {
      "rank": 24,
      "score": 8.715672270888268,
      "candidate": "def max_sum_of_repeating_array(arr, k):\n    n = len(arr)\n    if n < k:\n        return arr[0]\n    return max(arr[0] + arr[i] for i in range(k, n))\n\n\nif __name__ == \"__main__\":\n    print(max_sum_of_repeating_array([-1, 2, 3, 4, 5, -1], 2))"
    },
    {
      "rank": 25,
      "score": 8.697697905064905,
      "candidate": "def max_subarray(arr, k):\n    \"\"\"\n    :type arr: List[int]\n    :type k: int\n    :rtype: int\n    \"\"\"\n    max_val = 0\n    for i in range(0, len(arr)):\n        max_val = max(max_val + arr[i], arr[i])\n    return max_val * k\n\n\nif __name__ == '__main__':\n    print(max_subarray([1, 2, 3, 4, 5, 6, 7, 8, 9], 2))"
    },
    {
      "rank": 26,
      "score": 8.68813841584293,
      "candidate": "class Solution(object):\n    def maxSubArray(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"\n        if len(nums) == 1:\n            return nums[0]\n        \n        max_sum = nums[0]\n        for i in range(1, len(nums)):\n            max_sum = max(max_sum + nums[i], nums[i])\n        \n        return max_sum * k"
    },
    {
      "rank": 27,
      "score": 8.658181662017673,
      "candidate": "def max_sum(arr, k):\n    arr.sort()\n    return arr[-k:] + arr[:-k]\n\n\nprint(max_sum([2, -2, 5, -3, -2, -3, 5], 3))"
    },
    {
      "rank": 28,
      "score": 8.646297619761931,
      "candidate": "def max_sum_repeating(arr, k):\n    max_sum = 0\n    for i in range(k):\n        max_sum = max(max_sum, arr[i] + arr[i+1])\n    return max_sum\n\n\nprint(max_sum_repeating([2, 3, 4, 5, 6], 3))\nprint(max_sum_repeating([2, 3, 4, 5, 6, 7, 8, 9, 10], 3))"
    },
    {
      "rank": 29,
      "score": 8.623489258827814,
      "candidate": "def max_subarray(arr, k):\n    return max(arr[i] + arr[i+1] for i in range(len(arr)-k+1))\n\n\ndef main():\n    print(max_subarray([2, -2, -3, -1, 5, -2, -3, -4, -5], 2))\n    print(max_subarray([2, -2, -3, -1, 5, -2, -3, -4, -5], 3))\n    print(max_subarray([1, 2, 3, 4, 5], 2))\n    print(max_subarray([1, 2, 3, 4, 5], 3))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 30,
      "score": 8.568424790498517,
      "candidate": "def largest_sum_repeated_array(arr, k):\n    # Write your code here\n    max_sum = 0\n    for i in range(0, k):\n        max_sum = max(arr[i], max_sum + arr[i])\n    return max_sum\n\n\nprint(largest_sum_repeated_array([2, 5, -1, -4, 1], 3))"
    },
    {
      "rank": 31,
      "score": 8.551392154344727,
      "candidate": "def max_sum(arr, k):\n    if k == 0:\n        return max(arr)\n    elif k == 1:\n        return max(arr[0], arr[1])\n    else:\n        return max(max_sum(arr[:k], k-1)+arr[k], max_sum(arr[k:], k))\n\nprint(max_sum([1, 3, -2, 2, -3, 4], 2))"
    },
    {
      "rank": 32,
      "score": 8.548146064200886,
      "candidate": "def largest_sum(nums, k):\n    if k == 1:\n        return max(nums)\n    else:\n        return max(nums[0] + largest_sum(nums[1:], k-1), largest_sum(nums[1:], k))\n\n\n\n\n\nif __name__ == \"__main__\":\n    print(largest_sum([1,2,3,4,5], 2))\n    print(largest_sum([-1,-2,-3,-4,-5], 2))\n    print(largest_sum([-1,-2,-3,-4,-5], 3))\n    print(largest_sum([-1,-2,-3,-4,-5], -1))\n    print(largest_sum([1,2,3,4,5], 4))\n    print(largest_sum([1,2,3,4,5], -1))\n    print(largest_sum([1,2,3,4,5], -2))\n    print(largest_sum([1,2,3,4,5], -3))\n    print(largest_sum([1,2,3,4,5], -4))"
    },
    {
      "rank": 33,
      "score": 8.509408652281255,
      "candidate": "def max_subarray(arr, k):\n    if k == 0:\n        return arr[0]\n    return max(arr[0], arr[0] + max_subarray(arr[1:], k-1))"
    },
    {
      "rank": 34,
      "score": 8.500995977237135,
      "candidate": "def largest_sum_of_repeated_array(arr, k):\n    arr_sum = [0] * (len(arr) + 1)\n    arr_sum[0] = arr[0]\n    for i in range(1, len(arr)):\n        arr_sum[i] = arr[i] + arr_sum[i - 1]\n\n    for i in range(1, k + 1):\n        arr_sum[i] = max(arr_sum[i], arr_sum[i - 1] + arr[i])\n\n    return arr_sum[-1]\n\n\nprint(largest_sum_of_repeated_array([2, 2, 2, 2, 2, 2, 2, 2, 2], 2))"
    },
    {
      "rank": 35,
      "score": 8.47316997696304,
      "candidate": "def largest_sum_of_contiguous_array(arr, k):\n    return max(arr[0] + arr[k], max(arr[k], sum(arr)))\n\n\nif __name__ == \"__main__\":\n    assert largest_sum_of_contiguous_array([0, 1, 2, -3, 4, -5, 6], 2) == 16"
    },
    {
      "rank": 36,
      "score": 8.420681104322934,
      "candidate": "def largest_sum(arr, k):\n    n = len(arr)\n    if n == 1:\n        return arr[0]\n    elif n == 2:\n        return max(arr[0] + arr[1], arr[1] + arr[2])\n    else:\n        return max(arr[0] + arr[1] + arr[2], arr[1] + arr[2] + largest_sum(arr[3:], k - 1))\n\n\nif __name__ == \"__main__\":\n    assert largest_sum([-2, 3, -1, 5, 2, -3], 2) == 6\n    assert largest_sum([-2, 3, -1, 5, 2, -3], 3) == 6"
    },
    {
      "rank": 37,
      "score": 8.406280511256325,
      "candidate": "def max_sum_repeated_array(arr, k):\n    max_sum = 0\n    for i in range(k):\n        max_sum = max(max_sum + arr[i], arr[i])\n    return max_sum\n\n\nprint(max_sum_repeated_array([2, 3, -5, -2, 4, -10, 3, 2, -7, -1, 5, -3], 5))"
    },
    {
      "rank": 38,
      "score": 8.371952721458065,
      "candidate": "def max_subarray(arr, k):\n    arr.sort()\n    return arr[k-1] + max(arr[k-1:k+1])\n\n\nif __name__ == \"__main__\":\n    print(max_subarray([2, -1, 3, 4, -2, 1, -5, 4], 2))"
    },
    {
      "rank": 39,
      "score": 8.367173830785744,
      "candidate": "def largest_sum(arr, k):\n    if len(arr) <= k:\n        return max(arr)\n    result = 0\n    for i in range(len(arr) - k + 1):\n        result = max(result, arr[i] + arr[i + k - 1])\n    return result\n\n\n\n\n\nif __name__ == \"__main__\":\n    arr = [1, 2, 3, 4, 5, 6]\n    k = 3\n    print(largest_sum(arr, k))"
    },
    {
      "rank": 40,
      "score": 8.345080224899979,
      "candidate": "def max_repeating_sum(arr, k):\n    max_sum = 0\n    for i in range(len(arr)):\n        max_sum = max(max_sum + arr[i], arr[i] * k)\n    return max_sum\n\nprint(max_repeating_sum([-2, -3, -4, -1, 0, 1, 2, 3, 4], 2))"
    },
    {
      "rank": 41,
      "score": 8.342404360413544,
      "candidate": "def largest_sum_repeating_array(arr, k):\n    if len(arr) <= k:\n        return max(arr)\n    else:\n        return arr[0] + largest_sum_repeating_array(arr[1:], k)\n\nprint(largest_sum_repeating_array([-2,1,-3,4,-1,2,1,-5,4], 3))"
    },
    {
      "rank": 42,
      "score": 8.31736729190706,
      "candidate": "def max_sum_of_array(arr, k):\n    max_sum = 0\n    max_sum_current = 0\n    for i in range(len(arr)):\n        max_sum_current = max(max_sum_current+arr[i], arr[i])\n        max_sum = max(max_sum, max_sum_current)\n    return max_sum\n\n\nprint(max_sum_of_array([1, 2, -4, 5, -5, -5, 2, -3, -1, -2, 3, 1], 3))"
    },
    {
      "rank": 43,
      "score": 8.29075362576626,
      "candidate": "def max_sum_of_contiguous_array(arr, k):\n    if len(arr) == 1:\n        return arr[0]\n\n    max_sum = 0\n    max_sum_of_repeating_array = arr[0]\n\n    for i in range(1, len(arr)):\n        max_sum += arr[i]\n        max_sum_of_repeating_array = max(max_sum_of_repeating_array, arr[i])\n\n    return max_sum_of_repeating_array\n\nprint(max_sum_of_contiguous_array([-2, 3, -1, 2, 1, -5, 4], 2))"
    },
    {
      "rank": 44,
      "score": 8.28951789708591,
      "candidate": "def max_sum_repeating(arr, k):\n    if k == 0:\n        return max(arr)\n    max_sum = 0\n    for i in range(k):\n        max_sum += max(arr[i::k])\n    return max_sum\n\n\nprint(max_sum_repeating([-2, 1, -3, 4, -1, 2, 1, -5, 4], 2))"
    },
    {
      "rank": 45,
      "score": 8.264798145351135,
      "candidate": "def max_sum(arr, k):\n    if len(arr) <= k:\n        return max(arr)\n    else:\n        return arr[0] + max_sum(arr[1:], k)\n\n\nif __name__ == \"__main__\":\n    print(max_sum([-2, 1, -3, 4, -1, 2, 1, -5, 4], 3))"
    },
    {
      "rank": 46,
      "score": 8.258889559794923,
      "candidate": "def max_sum(arr, k):\n    max_sum = 0\n    for i in range(0, len(arr)):\n        max_sum = max(max_sum + arr[i], arr[i] * k)\n    return max_sum\n\n\narr = [10, -2, 5, -3, 2, 4, -1]\nprint(max_sum(arr, 3))"
    },
    {
      "rank": 47,
      "score": 8.095399837888998,
      "candidate": "def max_sum_of_repeated_array(arr, k):\n    # write your code in Python 3.6\n    arr_sum = arr[0]\n    for i in range(1, len(arr)):\n        arr_sum = max(arr_sum + arr[i], arr[i])\n    return arr_sum\n\n\nprint(max_sum_of_repeated_array([-2, 1, -3, 4, -1, 2, 1, -5, 4], 2))"
    },
    {
      "rank": 48,
      "score": 8.079353903022456,
      "candidate": "class Solution(object):\n    def maxSubArray(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"\n        if k == 1:\n            return max(nums)\n        dp = [0 for _ in range(k)]\n        dp[0] = nums[0]\n        for i in range(1, k):\n            dp[i] = max(nums[i], dp[i-1] + nums[i])\n        return max(dp)\n\na = Solution()\nprint(a.maxSubArray([-2,1,-3,4,-1,2,1,-5,4], 3))"
    },
    {
      "rank": 49,
      "score": 8.049696258497823,
      "candidate": "def max_subarray_sum(arr, k):\n    arr.sort()\n    max_sum = 0\n    for i in range(k):\n        max_sum += arr[i]\n    return max_sum\n\n\nif __name__ == \"__main__\":\n    assert max_subarray_sum([1, 2, 3, 4, 5], 2) == 6"
    },
    {
      "rank": 50,
      "score": 7.974277542994004,
      "candidate": "class Solution:\n    def maxSubArray(self, nums: List[int], k: int) -> int:\n        max_sum = nums[0]\n        for i in range(1, len(nums)):\n            max_sum = max(max_sum + nums[i], nums[i])\n        return max_sum * k"
    },
    {
      "rank": 51,
      "score": 7.956532187623194,
      "candidate": "def largest_sum_of_contiguous_array(arr, k):\n    if not arr:\n        return 0\n    last_sum = 0\n    last_max = 0\n    for i in range(len(arr)):\n        last_sum += arr[i]\n        last_max = max(last_max, last_sum)\n        if i >= k - 1:\n            arr[i] = last_sum\n    return last_max\n\n\nif __name__ == \"__main__\":\n    assert largest_sum_of_contiguous_array([-2, 1, -3, 4, -1, 2, 1, -5, 4], 2) == 6\n    assert largest_sum_of_contiguous_array([1, 2, 3, 4, 5], 2) == 6\n    assert largest_sum_of_contiguous_array([2, 3, 4, 5, 1], 2) == 6\n    assert largest_sum_of_contiguous_array([1, 2, 3, 4, 5, 6], 2) == 6\n    assert largest_sum_of_contiguous_array([-2, 1, -3, 4, -1, 2, 1, -5, 4], 2) == 6"
    },
    {
      "rank": 52,
      "score": 7.579928560094829,
      "candidate": "def largest_sum(arr, k):\n    max_sum = 0\n    for i in range(k):\n        max_sum = max(arr[i], max_sum + arr[i])\n    return max_sum\n\nprint(largest_sum([5, -1, -3, -4, 3, 1, 2, -5], 2))"
    },
    {
      "rank": 53,
      "score": 3.88909352856429,
      "candidate": "def max_sum_repeated_array(arr, k):\n    if not arr:\n        return 0\n\n    if k == 1:\n        return max(arr)\n\n    # find the max sum of all the repeated array\n    max_sum = 0\n    for i in range(k):\n        max_sum = max(max_sum + arr[i], arr[i])\n\n    # find the max sum of all the repeated array\n    max_sum = max(max_sum + arr[k-1], arr[k-1])\n\n    return max_sum\n\n\nif __name__ == \"__main__\":\n    assert max_sum_repeated_array([1,2,3,4,5], 3) == 5\n    assert max_sum_repeated_array([1,2,3,4,5], 5) == 10\n    assert max_sum_repeated_array([1,2,3,4,5], -1) == -1\n    assert max_sum_repeated_array([1,2,3,4,5], 0) == 0\n    assert max_sum_repeated_array([1,2,3,4,5], 1) == 6\n    assert max_sum_repeated_array([1,2,3,4,5], 2) == 12\n    assert max_sum_repeated_array([1,2,3,4,5], 3) == 18"
    },
    {
      "rank": 54,
      "score": 3.7510289547907227,
      "candidate": "def max_sum_repeating(arr, k):\n    if len(arr) < k:\n        return 0\n\n    arr = arr[:k] + arr[k:]\n\n    for i in range(k, len(arr)):\n        arr[i] += arr[i-k]\n\n    return max(arr)\n\n\nif __name__ == '__main__':\n    assert max_sum_repeating([1, -1, -3, 3, 2, -2, -4], 3) == 6\n    assert max_sum_repeating([1, -1, -3, 3, 2, -2, -4], 2) == 9\n    assert max_sum_repeating([1, -1, -3, 3, 2, -2, -4], 1) == 9\n    assert max_sum_repeating([1, -1, -3, 3, 2, -2, -4], 0) == 0\n    assert max_sum_repeating([1, -1, -3, 3, 2, -2, -4], -1) == 0"
    },
    {
      "rank": 55,
      "score": 3.738257551903665,
      "candidate": "# Time Complexity: O(n)\n# Space Complexity: O(1)\n\n\ndef largest_sum_of_repeating_array(arr, k):\n    if not arr:\n        return 0\n    else:\n        max_sum = max(arr[0], arr[0] + arr[1])\n        for i in range(2, len(arr)):\n            max_sum = max(max_sum, arr[i] + arr[i-1])\n        return max_sum\n\n\nprint(largest_sum_of_repeating_array([-1, 2, -3, 4, -2, 1], 2))"
    },
    {
      "rank": 56,
      "score": 3.7310543310758524,
      "candidate": "class Solution(object):\n    def maxSubArray(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"\n        if k == 0:\n            return max(nums)\n\n        max_sum = 0\n        curr_sum = 0\n\n        for i in range(k):\n            curr_sum += nums[i]\n            max_sum = max(curr_sum, max_sum)\n\n        return max_sum\n\n\nif __name__ == \"__main__\":\n    s = Solution()\n    assert s.maxSubArray([1, 2, 3, 4, 5, 6, 7], 4) == 10\n    assert s.maxSubArray([1, 2, 3, 4, 5, 6, 7], 2) == 10\n    assert s.maxSubArray([1, 2, 3, 4, 5, 6, 7], 1) == 10\n    assert s.maxSubArray([1, 2, 3, 4, 5, 6, 7], -1) == 10\n    assert s.maxSubArray([1, 2, 3, 4, 5, 6, 7], 0) == 10"
    },
    {
      "rank": 57,
      "score": 3.650995213713995,
      "candidate": "class Solution(object):\n    def max_sub_array(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"\n        if len(nums) == 0 or len(nums) == 1:\n            return nums[0]\n        else:\n            return max(self.max_sub_array(nums[1:], k), self.max_sub_array(nums[0:1], k))"
    },
    {
      "rank": 58,
      "score": 3.5074186685850797,
      "candidate": "class Solution:\n    def maxSum(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"\n        if len(nums) == 1:\n            return nums[0]\n        res = nums[0]\n        for i in range(1, len(nums)):\n            res = max(res, nums[i] + nums[i-1])\n        return res\n\n\nif __name__ == \"__main__\":\n    nums = [2, 1, -2, 3, -1, 2, 1, -2, 3]\n    k = 2\n    print(Solution().maxSum(nums, k))"
    },
    {
      "rank": 59,
      "score": 3.4816957909881716,
      "candidate": "def max_sub_array(arr, k):\n    if len(arr) == 0:\n        return 0\n    if len(arr) == 1:\n        return arr[0]\n\n    max_so_far = max(arr[0], arr[1])\n    max_so_far_for_repeating = max(arr[0], arr[1])\n    for i in range(2, len(arr)):\n        max_so_far_for_repeating = max(max_so_far + arr[i], arr[i])\n        max_so_far = max(max_so_far_for_repeating, max_so_far)\n\n    return max_so_far"
    },
    {
      "rank": 60,
      "score": 3.4682616610187322,
      "candidate": "def max_sum_repeating(arr, k):\n    if len(arr) == 0:\n        return 0\n    else:\n        return arr[0] + max_sum_repeating(arr[1:], k)\n\n\nif __name__ == \"__main__\":\n    print(max_sum_repeating([1, 2, 3, 4, 5], 2))"
    },
    {
      "rank": 61,
      "score": 3.394821557809531,
      "candidate": "def largest_sum_with_repeats(arr, k):\n    \"\"\"\n    Time: O(n)\n    Space: O(n)\n    \"\"\"\n    if k < 1:\n        return 0\n\n    curr_sum = 0\n    curr_max = 0\n    curr_max_index = 0\n    max_sum = 0\n    max_sum_index = 0\n\n    for i in range(k):\n        curr_sum = arr[curr_max_index] + curr_sum\n        max_sum = max(curr_sum, max_sum)\n\n        curr_max = curr_sum\n        curr_max_index = (curr_max_index + 1) % len(arr)\n        curr_max_index = curr_max_index - 1\n\n    return max_sum\n\n\nif __name__ == \"__main__\":\n    print(largest_sum_with_repeats([1, 2, 3, 4, 5], 2))"
    },
    {
      "rank": 62,
      "score": 3.390012394749215,
      "candidate": "class Solution:\n    def max_sub_array(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"\n        if k == 0:\n            return max(nums)\n        if k == 1:\n            return max(nums[0], nums[1])\n        if k == 2:\n            return max(nums[0] + nums[1], nums[2])\n        max_ = nums[0]\n        for i in range(1, len(nums)):\n            max_ = max(max_ + nums[i], nums[i])\n        return max_\n\n\nif __name__ == '__main__':\n    s = Solution()\n    assert s.max_sub_array([-2, 1, -3, 4, -1, 2, 1, -5, 4], 3) == 6"
    },
    {
      "rank": 63,
      "score": 3.2384227934453915,
      "candidate": "def max_repeating_sum(arr, k):\n    if not arr:\n        return 0\n    if k == 0:\n        return max(arr)\n    else:\n        return max(max_repeating_sum(arr[1:], k - 1), max(arr[:k])) + max(arr[k:])\n\n\nprint(max_repeating_sum([1, 2, 3, 4, 5], 3))"
    },
    {
      "rank": 64,
      "score": 3.173585292022864,
      "candidate": "def largest_sum_of_repeated_array(arr, k):\n    max_sum = 0\n    for i in range(k):\n        max_sum = max(max_sum + arr[i], arr[i])\n    return max_sum\n\n\ndef test_function(test_case):\n    arr, k = test_case\n    solution = largest_sum_of_repeated_array(arr, k)\n    output = solution\n    if output == arr[k]:\n        print(\"Pass\")\n    else:\n        print(\"Fail\")\n\n\narr = [2, 4, -1, 5, -2, 3]\nk = 1\n\ntest_case = (arr, k)\ntest_function(test_case)\n\narr = [2, 2, -1, 2, 1, -2]\nk = 2\n\ntest_case = (arr, k)\ntest_function(test_case)\n\narr = [2, 1, 1, -1, 2, 1, -2, 3, 1, -2, -1]\nk = 3\n\ntest_case = (arr, k)\ntest_function(test_case)\n\narr = [1, 1, -1, -2, 2, 1, 1, 1, 1, 1, -2, 2, -2, 2, 1, -2, -2, 2]\nk = 5\n\ntest_case = (arr, k)\ntest_function(test_case)\n\narr = [1, -1, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2"
    },
    {
      "rank": 65,
      "score": 3.173469890644039,
      "candidate": "class Solution:\n    def max_sum(self, arr, k):\n        \"\"\"\n        :type arr: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"\n        if k == 0:\n            return max(arr)\n        elif k == 1:\n            return max(arr[0] + arr[1], arr[0])\n        else:\n            return max(arr[0] + arr[1], arr[0] + arr[k] + arr[k+1], arr[0] + arr[k+2] + arr[k+3])\n\n\na = Solution()\nprint(a.max_sum([1, 3, -2, -5, -1, 2, 5, -3, 4, -1, -2, 1, 2], 2))"
    },
    {
      "rank": 66,
      "score": 3.1649367789928613,
      "candidate": "class Solution(object):\n    def max_subarray(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"\n        if k == 0:\n            return max(nums)\n        res = 0\n        for i in range(k):\n            res = max(res, sum(nums) + nums[i])\n        return res\n\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    nums = [1, 2, 3, 4, 5]\n    k = 2\n    res = sol.max_subarray(nums, k)\n    print res"
    },
    {
      "rank": 67,
      "score": 3.1590064470737107,
      "candidate": "class Solution:\n    def largestSum(self, nums, k):\n        # Write your code here\n        if not nums:\n            return 0\n        ans = nums[0]\n        for i in range(1, len(nums)):\n            ans = max(ans, nums[i] + nums[i-1])\n        return ans\n\n\ns = Solution()\nprint(s.largestSum([-2,1,-3,4,-1,2,1,-5,4], 2))"
    },
    {
      "rank": 68,
      "score": 3.116141890351696,
      "candidate": "class Solution(object):\n    def maxSubArray(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"\n        if not nums:\n            return 0\n\n        max_sum = nums[0]\n        for i in range(1, len(nums)):\n            max_sum = max(max_sum + nums[i], nums[i])\n\n        return max_sum * k\n\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    nums = [2, 7, 11, 15]\n    k = 2\n    print sol.maxSubArray(nums, k)"
    },
    {
      "rank": 69,
      "score": 3.1002545256022827,
      "candidate": "def max_sum_of_array(arr, k):\n    max_sum = 0\n    for i in range(len(arr)):\n        max_sum = max(arr[i], max_sum + arr[i])\n    return max_sum * k\n\n\narr = [1, 2, 3, 4, 5]\nk = 2\nprint(max_sum_of_array(arr, k))"
    },
    {
      "rank": 70,
      "score": 3.053242843060736,
      "candidate": "class Solution:\n    # @param A : list of integers\n    # @param k : integer\n    # @return an integer\n    def maxSumRepeating(self, A, k):\n        if not A:\n            return 0\n        if k == 1:\n            return max(A)\n        last_max = 0\n        for i in range(k):\n            last_max = max(last_max + A[i], A[i])\n        return last_max\n\nA = [2,3,-2,4,-3,2,1,-5]\nk = 3\ns = Solution()\nprint(s.maxSumRepeating(A, k))"
    },
    {
      "rank": 71,
      "score": 3.0440451727370412,
      "candidate": "#Solution 1\nclass Solution(object):\n    def largestSum(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"\n        n = len(nums)\n        res = nums[0]\n        for i in range(1, n):\n            res = max(res + nums[i], nums[i])\n        return res\n\n#Solution 2\nclass Solution(object):\n    def largestSum(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"\n        n = len(nums)\n        res = nums[0]\n        for i in range(1, n):\n            res = max(res + nums[i], nums[i] * k)\n        return res\n\n#Solution 3\nclass Solution(object):\n    def largestSum(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"\n        n = len(nums)\n        res = nums[0]\n        for i in range(1, n):\n            res = max(res + nums[i], nums[i] * k)\n        return res\n\n#Solution 4\nclass Solution(object):\n    def largestSum(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"\n        n = len(nums)\n        res = nums[0]\n        for i in range(1, n):\n            res = max(res + nums[i], nums[i] * k)\n        return res\n\n#Solution 5\nclass Solution(object):\n    def largestSum(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"\n        n = len(nums)\n        res = nums[0]\n        for i in range(1, n):\n            res = max(res + nums[i], nums[i] * k)\n        return"
    },
    {
      "rank": 72,
      "score": 3.0324135382502035,
      "candidate": "class Solution:\n    def max_sub_array(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"\n        if not nums:\n            return 0\n        if k == 1:\n            return max(nums)\n        elif k > len(nums):\n            return 0\n        else:\n            return max(nums[0] + self.max_sub_array(nums[1:], k - 1), self.max_sub_array(nums[1:], k))\n\n\nif __name__ == \"__main__\":\n    s = Solution()\n    assert s.max_sub_array([2, 1, -3, 4, -1, 2, 1, -3, 4], 2) == 7\n    assert s.max_sub_array([1, 2, 3, 4, 5], 3) == 10"
    },
    {
      "rank": 73,
      "score": 2.9935213321257916,
      "candidate": "def max_array_sum(arr, k):\n    res = 0\n    for i in range(0, k):\n        res += arr[i]\n    return res\n\n\nif __name__ == '__main__':\n    assert max_array_sum([2, 1, 3, 4, 5], 2) == 6\n    assert max_array_sum([1, 2, 3, 4, 5], 2) == 6\n    assert max_array_sum([1, 2, 3, 4, 5, 6], 2) == 10\n    assert max_array_sum([1, 2, 3, 4, 5], 3) == 6\n    assert max_array_sum([1, 2, 3, 4, 5, 6, 7], 3) == 12"
    },
    {
      "rank": 74,
      "score": 2.9828035012272234,
      "candidate": "class Solution:\n    def maxSubArray(self, nums: List[int], k: int) -> int:\n        if len(nums) == 1:\n            return nums[0]\n\n        def find_max_sum(nums, k):\n            max_sum = nums[0]\n\n            for i in range(1, len(nums)):\n                max_sum = max(max_sum + nums[i], nums[i])\n\n            return max_sum\n\n        return find_max_sum(nums, k)"
    },
    {
      "rank": 75,
      "score": 2.9336331354378316,
      "candidate": "def max_sum_repeating_array(arr, k):\n    if not arr:\n        return 0\n    if k < 0:\n        return 0\n    last_sum = arr[0]\n    for i in range(1, len(arr)):\n        last_sum = max(last_sum + arr[i], arr[i])\n    return last_sum\n\n\nif __name__ == \"__main__\":\n    assert max_sum_repeating_array([1, 2, 3, 4, 5], 3) == 10\n    assert max_sum_repeating_array([1, 2, 3, 4, 5], 2) == 15\n    assert max_sum_repeating_array([1, 2, 3, 4, 5], 1) == 5\n    assert max_sum_repeating_array([1, 2, 3, 4, 5], -1) == 0"
    },
    {
      "rank": 76,
      "score": 2.910883691201368,
      "candidate": "class Solution:\n    def maxSubArray(self, nums: List[int], k: int) -> int:\n        if not nums: return 0\n\n        res = nums[0]\n        for i in range(1, len(nums)):\n            res = max(res, nums[i] + nums[i-1])\n\n        return res\n\n\nif __name__ == '__main__':\n    assert Solution().maxSubArray([-2,1,-3,4,-1,2,1,-5,4], 2) == 6"
    },
    {
      "rank": 77,
      "score": 2.891627375766463,
      "candidate": "def max_repeating_sum(arr, k):\n    # write your code here\n    arr.sort()\n    max_sum = arr[0]\n    for i in range(1, len(arr)):\n        max_sum = max(arr[i], max_sum + arr[i])\n    return max_sum * k\n\n\nprint(max_repeating_sum([2, -2, 3, 4, -2, 1], 2))"
    },
    {
      "rank": 78,
      "score": 2.8876142606643933,
      "candidate": "class Solution:\n    def maxSubArray(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"\n        if len(nums) == 1:\n            return nums[0]\n        if k == 1:\n            return max(nums)\n        res = nums[0]\n        for i in range(1, len(nums)):\n            res = max(res, nums[i] + nums[i - 1])\n        return res\n\n\nif __name__ == \"__main__\":\n    nums = [2, -2, 3, -3, 4, -4]\n    k = 2\n    print(Solution().maxSubArray(nums, k))"
    },
    {
      "rank": 79,
      "score": 2.859987000099227,
      "candidate": "# Time: O(n) Space:O(n)\ndef max_sum_repeated_array(arr, k):\n    # write your code here\n    arr.sort()\n    res = 0\n    for i in range(len(arr)):\n        res = max(res, arr[i] * k)\n    return res\n\nprint(max_sum_repeated_array([2, 1, -2, 3, -1], 2))"
    },
    {
      "rank": 80,
      "score": 2.8564764717763835,
      "candidate": "class Solution:\n    def largestSum(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"\n        n = len(nums)\n        if n == 0:\n            return 0\n        if k == 1:\n            return max(nums)\n        res = [0] * n\n        res[0] = nums[0]\n        for i in range(1, n):\n            res[i] = res[i - 1] + nums[i]\n        for i in range(n - 2, -1, -1):\n            res[i] = max(res[i], res[i + k] - nums[i])\n        return res[0]"
    },
    {
      "rank": 81,
      "score": 2.7788933899393022,
      "candidate": "class Solution:\n    def maxSubArray(self, nums: List[int], k: int) -> int:\n        if not nums:\n            return 0\n        max_sum = nums[0]\n        for i in range(1, len(nums)):\n            max_sum = max(max_sum + nums[i], nums[i])\n        return max_sum * k"
    },
    {
      "rank": 82,
      "score": 2.777559507450018,
      "candidate": "class Solution:\n    def maxSubArray(self, nums: List[int], k: int) -> int:\n        if k == 0:\n            return max(nums)\n        if k > len(nums):\n            return 0\n        max_sum = nums[0]\n        for i in range(1, len(nums)):\n            max_sum = max(max_sum + nums[i], nums[i])\n        return max_sum"
    },
    {
      "rank": 83,
      "score": 2.769996365834261,
      "candidate": "class Solution:\n    def largestSum(self, nums: List[int], k: int) -> int:\n        max_sum = nums[0]\n        for i in range(1, len(nums)):\n            max_sum = max(max_sum + nums[i], nums[i])\n        return max_sum\n\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.largestSum([1, 2, 3, 4, 5], 2))"
    },
    {
      "rank": 84,
      "score": 2.7116934288389736,
      "candidate": "class Solution(object):\n    def maxSubArray(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"\n        if len(nums) == 0:\n            return 0\n        if k <= 0:\n            return max(nums)\n        n = len(nums)\n        dp = [[0 for _ in range(n)] for _ in range(k+1)]\n        for i in range(1, k+1):\n            for j in range(0, n):\n                if j < i*2:\n                    dp[i][j] = nums[j]\n                else:\n                    dp[i][j] = max(dp[i-1][j], dp[i-1][j-i]*2)\n        return max(dp[k])\n\n\nif __name__ == \"__main__\":\n    assert Solution().maxSubArray([1, 3, -1, -2, 4, -5, 2], 3) == 6\n    assert Solution().maxSubArray([1, 2, 3, 4, 5, -1, -2, 4], 2) == 6\n    assert Solution().maxSubArray([1, 2, 3, 4, 5, -1, -2, 4], 0) == 6"
    },
    {
      "rank": 85,
      "score": 2.7111808261298895,
      "candidate": "def max_sum(arr, k):\n    # Time Complexity: O(n)\n    # Space Complexity: O(1)\n\n    # define a variable to keep track of the maximum sum\n    max_sum = arr[0]\n\n    # iterate through the array and update the maximum sum\n    for i in range(1, len(arr)):\n        max_sum = max(max_sum + arr[i], arr[i])\n\n    # return the maximum sum\n    return max_sum\n\n\ndef test_function(test_case):\n    # create a variable to store the result of the function call\n    result = max_sum(test_case[0], test_case[1])\n\n    # if the result is equal to the test case[0], then it means it passed all the tests\n    if result == test_case[0]:\n        print(\"Pass\")\n    # if the result is not equal to the test case[0], then it means it failed\n    else:\n        print(\"Fail\")\n\n\ntest_case_0 = [2, 1, -2, 3, -1]\ntest_case_1 = [2, 3, 5, 6]\ntest_case_2 = [2, 2, 1, -2, 2, 1, -2, -2, -2]\ntest_case_3 = [2, 3, 5, 6, 7, 8, 9, 10, 1]\ntest_case_4 = [1, -2, -3, -4, -5, -6, -7, -8, -9, -10, -11, -12, -13, -14, -15, -16, -17, -18, -19, -20, -21, -22, -23, -24, -25, -26, -27, -28, -29, -30, -31, -32, -33, -34, -35, -36, -37, -38, -39, -40, -41, -42, -43, -44, -45, -46, -47, -48, -49, -50, -51, -52, -53, -54, -55, -56, -57, -58"
    },
    {
      "rank": 86,
      "score": 2.6903425177895404,
      "candidate": "class Solution:\n    def largest_sum(self, nums, k):\n        n = len(nums)\n        if n == 0:\n            return 0\n        max_sum = nums[0]\n        for i in range(1, n):\n            max_sum = max(nums[i], max_sum + nums[i])\n        return max_sum * k"
    },
    {
      "rank": 87,
      "score": 2.6750774398531396,
      "candidate": "def max_sum(arr, k):\n    arr_len = len(arr)\n    arr_sum = [0] * arr_len\n    max_sum = 0\n    for i in range(arr_len):\n        arr_sum[i] = arr[i]\n    for i in range(k):\n        for j in range(arr_len):\n            arr_sum[j] = max(arr_sum[j], arr[j] + arr_sum[j-k])\n        max_sum = max(max_sum, arr_sum[-1])\n    return max_sum\n\n\nif __name__ == '__main__':\n    assert max_sum([-2, 1, -3, 4, -1, 2, 1, -5, 4], 2) == 9"
    },
    {
      "rank": 88,
      "score": 2.6544747799705397,
      "candidate": "class Solution(object):\n    def largestSum(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"\n\n        if not nums:\n            return 0\n\n        if k == 1:\n            return max(nums)\n\n        if k == 0:\n            return max(nums) + max(nums)\n\n        result = max(nums[0] + nums[k-1], 0)\n        for i in range(1, len(nums)):\n            result = max(result, nums[i] + nums[k-1])\n\n        return result\n\n\nif __name__ == \"__main__\":\n    s = Solution()\n    nums = [1, 2, 3, 4, 5]\n    k = 2\n    assert s.largestSum(nums, k) == 6\n\n    nums = [1, 2, 3, 4]\n    k = 1\n    assert s.largestSum(nums, k) == 6"
    },
    {
      "rank": 89,
      "score": 2.5971755888531334,
      "candidate": "class Solution(object):\n    def maxSubArray(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"\n        if k == 0:\n            return sum(nums)\n\n        temp = [0] * len(nums)\n        temp[0] = nums[0]\n\n        for i in range(1, len(nums)):\n            temp[i] = max(nums[i], temp[i-1] + nums[i])\n\n        return max(temp)"
    },
    {
      "rank": 90,
      "score": 2.5641484437498185,
      "candidate": "class Solution:\n    def maxSubArray(self, nums: List[int], k: int) -> int:\n        if not nums:\n            return 0\n\n        max_sum = nums[0]\n        max_sum_counter = 0\n\n        for num in nums:\n            max_sum = max(num, num + k)\n            max_sum_counter += 1\n\n        return max(max_sum, max_sum_counter)"
    },
    {
      "rank": 91,
      "score": 2.5138410622394765,
      "candidate": "def max_sum_repeated_array(arr, k):\n    max_sum = -1\n    arr_sum = 0\n    for i in range(0, len(arr)):\n        arr_sum += arr[i]\n        if arr_sum > max_sum:\n            max_sum = arr_sum\n\n    return max_sum * k\n\n\nif __name__ == \"__main__\":\n    arr = [1, -2, 3, 4, 5]\n    k = 3\n    print(max_sum_repeated_array(arr, k))"
    },
    {
      "rank": 92,
      "score": 2.4475230828372947,
      "candidate": "class Solution:\n    def maxSumRepeating(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"\n        if k == 0:\n            return sum(nums)\n        if k == 1:\n            return max(nums)\n\n        nums_sum = 0\n        for num in nums:\n            nums_sum += num\n            if nums_sum >= k:\n                nums_sum -= k\n\n        return nums_sum\n\n\ns = Solution()\nprint(s.maxSumRepeating([-2,1,-3,4,-1,2,1,-5,4], 3))"
    },
    {
      "rank": 93,
      "score": 2.413995048013909,
      "candidate": "def largest_sum(arr, k):\n    if k == 0:\n        return arr[0]\n\n    new_arr = []\n    for i in range(len(arr)):\n        new_arr.append(arr[i] + largest_sum(arr[i:], k - 1))\n\n    return max(new_arr)\n\n\nif __name__ == \"__main__\":\n    assert largest_sum([0, -1, 2, -3, 4, -2, 1], 0) == 9\n    assert largest_sum([0, -1, 2, -3, 4, -2, 1], 3) == 8\n    assert largest_sum([0, -1, 2, -3, 4, -2, 1], 4) == 12"
    },
    {
      "rank": 94,
      "score": 2.3624706965287534,
      "candidate": "def max_sum(arr, k):\n    max_sum = 0\n    for i in range(k):\n        max_sum = max(max_sum + arr[i], arr[i])\n    return max_sum\n\n\nif __name__ == \"__main__\":\n    arr = [1, -2, 3, -3, 4, -2, -4, -1]\n    k = 2\n    print(max_sum(arr, k))"
    },
    {
      "rank": 95,
      "score": 2.32209422335906,
      "candidate": "def max_sum_repeating(array, k):\n    if k == 0:\n        return array[0]\n    array_sum = 0\n    for i in range(0, k):\n        array_sum += array[i]\n    return array_sum\n\n\nprint(max_sum_repeating([1, 2, 3, 4, 5, 6], 2))\nprint(max_sum_repeating([1, 2, 3, 4, 5, 6], 3))\nprint(max_sum_repeating([1, 2, 3, 4, 5, 6], 4))\nprint(max_sum_repeating([1, 2, 3, 4, 5, 6], 5))"
    },
    {
      "rank": 96,
      "score": 2.1720394403937444,
      "candidate": "def largest_sum_repeating_array(arr, k):\n    # write your code here\n    if k <= 1:\n        return max(arr)\n    # create a copy of the array\n    arr_copy = arr.copy()\n    # find the maximum sum\n    max_sum = max(arr_copy)\n    for i in range(k):\n        # add the current element to the maximum sum\n        max_sum = max(max_sum, max(arr_copy) + arr_copy[0])\n        # remove the first element from the array\n        arr_copy.pop(0)\n    # return the maximum sum\n    return max_sum\n\n\nprint(largest_sum_repeating_array([-2, 3, -1, -4, 2, 1], 2))\nprint(largest_sum_repeating_array([-2, 3, -1, -4, 2, 1], 3))\nprint(largest_sum_repeating_array([-2, 3, -1, -4, 2, 1], 4))"
    },
    {
      "rank": 97,
      "score": 2.153740725425888,
      "candidate": "def largest_sum_of_repeated_array(arr, k):\n    # Write your code here\n    if len(arr) == 0:\n        return 0\n    if k > len(arr):\n        return arr[-1]\n    max_sum = arr[0]\n    for i in range(1, k):\n        max_sum = max(max_sum + arr[i], arr[i])\n    return max_sum\n\n\nprint(largest_sum_of_repeated_array([-2, 1, -3, 4, -1, 2, 1, -5, 4], 3))"
    },
    {
      "rank": 98,
      "score": 2.081625482564257,
      "candidate": "# O(n) time | O(1) space\ndef max_sum_repeated_array(arr, k):\n    max_sum = 0\n    for i in range(0, len(arr)):\n        max_sum += arr[i]\n        if i == k - 1:\n            return max_sum\n\n\nprint(max_sum_repeated_array([-2, 1, -3, 4, -1, 2, 1, -5, 4], 2))"
    },
    {
      "rank": 99,
      "score": 2.059358340537708,
      "candidate": "class Solution:\n    def maxSubArray(self, nums: List[int], k: int) -> int:\n        if len(nums) == 0:\n            return 0\n        else:\n            return max(nums[:k]) + max(nums[k:])"
    },
    {
      "rank": 100,
      "score": 2.0459669209915714,
      "candidate": "class Solution:\n    def maxSubArray(self, nums, k):\n        # write your code here\n        if len(nums) == 0:\n            return 0\n        if k == 1:\n            return max(nums)\n        if k == 2:\n            return max(nums[0] + nums[1], nums[0] + nums[1] + max(nums[1], nums[2]))\n        if k == 3:\n            return max(nums[0] + nums[1] + nums[2] + nums[3], nums[0] + nums[1] + nums[2] + nums[3] + max(nums[1], nums[2]))\n        if k == 4:\n            return max(nums[0] + nums[1] + nums[2] + nums[3] + nums[4], nums[0] + nums[1] + nums[2] + nums[3] + nums[4] + max(nums[1], nums[2]))\n        if k == 5:\n            return max(nums[0] + nums[1] + nums[2] + nums[3] + nums[4] + nums[5], nums[0] + nums[1] + nums[2] + nums[3] + nums[4] + nums[5] + max(nums[1], nums[2]))\n        if k == 6:\n            return max(nums[0] + nums[1] + nums[2] + nums[3] + nums[4] + nums[5] + nums[6], nums[0] + nums[1] + nums[2] + nums[3] + nums[4] + nums[5] + nums[6] + max(nums[1], nums[2]))\n        if k == 7:\n            return max(nums[0] + nums[1] + nums[2] + nums[3] + nums[4] + nums[5] + nums[6] + nums[7], nums[0] + nums[1] + nums[2] + nums[3] + nums[4] + nums[5] + nums[6] + nums[7])\n        if k == 8:\n            return max(nums[0] + nums[1] + nums"
    }
  ]
}