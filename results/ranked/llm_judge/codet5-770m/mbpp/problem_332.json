{
  "timestamp": "2025-09-14T14:54:22.283541",
  "method": "improved_llm_judge",
  "judge_model": "codellama/CodeLlama-7b-Python-hf",
  "target_model": "codet5-770m",
  "dataset": "mbpp",
  "problem_number": 332,
  "total_candidates": 100,
  "results": [
    {
      "rank": 1,
      "score": 10.0,
      "candidate": "def count_letters_digits(string):\n    \"\"\"\n    :type string: str\n    :rtype: int\n    \"\"\"\n    count = 0\n    for letter in string:\n        if letter.isdigit():\n            count += 1\n    return count\n\ndef count_letters_digits_2(string):\n    \"\"\"\n    :type string: str\n    :rtype: int\n    \"\"\"\n    count = 0\n    for letter in string:\n        if letter.isdigit():\n            count += 1\n            if count == 10:\n                return count\n    return count\n\n\ndef count_letters_digits_3(string):\n    \"\"\"\n    :type string: str\n    :rtype: int\n    \"\"\"\n    count = 0\n    for letter in string:\n        if letter.isdigit():\n            count += 1\n    return count\n\n\nprint(count_letters_digits(\"9\"))\nprint(count_letters_digits(\"9234\"))\nprint(count_letters_digits
    },
    {
      "rank": 2,
      "score": 10.0,
      "candidate": "def letter_digits(string):\n    digits = 0\n    letters = 0\n\n    for char in string:\n        if char.isdigit():\n            digits += 1\n        elif char.isalpha():\n            letters += 1\n\n    return digits, letters\n\nprint(letter_digits(\"12345678\"))"
    },
    {
      "rank": 3,
      "score": 10.0,
      "candidate": "def count_digits(string):\n    count = 0\n    for char in string:\n        if char.isdigit():\n            count += 1\n    return count\n\ndef count_letters(string):\n    count = 0\n    for char in string:\n        if char.isalpha():\n            count += 1\n    return count\n\ndef count_letters_and_digits(string):\n    count = 0\n    for char in string:\n        if char.isalpha() and char.isdigit():\n            count += 1\n    return count, count\n\ndef main():\n    print(\"Number of digits: \", count_digits(\"1234567890\"))\n    print(\"Number of letters: \", count_letters(\"abcd\"))\n    print(\"Number of letters and digits: \", count_letters_and_digits(\"abcd\"))\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 4,
      "score": 10.0,
      "candidate": "def number_of_digits_and_letters(str):\n    count = 0\n    for i in str:\n        if i.isdigit():\n            count += 1\n        if i.isalpha():\n            count += 1\n    return count\n\n\nprint(number_of_digits_and_letters(\"123456789\"))"
    },
    {
      "rank": 5,
      "score": 10.0,
      "candidate": "def count_digit(string):\n    count = 0\n    for char in string:\n        if char.isdigit():\n            count += 1\n    return count\n\nprint(count_digit(\"1234567890\"))"
    },
    {
      "rank": 6,
      "score": 10.0,
      "candidate": "def count_digits(str):\n    count = 0\n    for i in str:\n        if i.isdigit():\n            count += 1\n    return count\n\n\ndef count_letters(str):\n    count = 0\n    for i in str:\n        if i.isalpha():\n            count += 1\n    return count\n\n\nprint(count_digits(\"123456789\"))\nprint(count_letters(\"abcdefghijklmnopqrstuvwxyz\"))"
    },
    {
      "rank": 7,
      "score": 10.0,
      "candidate": "def num_letters(str):\n    return len(str) - str.count(' ') - str.count('0')\n\n\nprint(num_letters('1234'))\nprint(num_letters('123456'))\nprint(num_letters('123456789'))"
    },
    {
      "rank": 8,
      "score": 10.0,
      "candidate": "def num_digits(string):\n    return len(string)\n\n\ndef num_letters(string):\n    return len(string)\n\n\nif __name__ == \"__main__\":\n    print(num_digits(\"123\"))\n    print(num_digits(\"1\"))\n    print(num_digits(\"123\"))\n    print(num_digits(\"123\"))\n    print(num_digits(\"123\"))\n    print(num_digits(\"123\"))\n    print(num_digits(\"123\"))\n    print(num_digits(\"123\"))\n    print(num_digits(\"123\"))\n    print(num_digits(\"123\"))\n    print(num_digits(\"123\"))\n    print(num_digits(\"123\"))\n    print(num_digits(\"123\"))\n    print(num_digits(\"123\"))\n    print(num_digits(\"123\"))\n    print(num_digits(\"123\"))\n    print(num_digits(\"123\"))\n    print(num_digits(\"123\"))\n    print(num_digits(\"123\"))\n    print(num_digits(\"123\"))\n    print(num_digits(\"123\"))\n    print(num_digits(\"123\"))\n    print(num_digits(\"123\"))\n    print(num_digits(\"123\"))\n    print(num_digits(\"123\"))\n    print(num_digits(\"123\"))\n    print(num_digits(\"123\"))\n    print(num_digits(\"123\"))\n    print(num_digits(\"123\"))\n    print(num_digits(\"123\"))\n    print(num_digits(\"123\"))\n    print(num_digits(\"123\"))\n    print(num_digits(\"123\"))\n    print(num_digits(\"123\"))\n    print(num_digits(\"123\"))\n    print(num_digits(\"123\"))\n    print(num_digits(\"123\"))\n    print(num_digits(\"123\"))\n    print(num_digits(\"123\"))\n    print(num_digits(\"123\"))\n    print(num_digits(\"123\"))\n    print(num_digits(\"123\"))\n    print"
    },
    {
      "rank": 9,
      "score": 10.0,
      "candidate": "def digit_letter(str):\n    return len(str) - str.count(' ') - str.count('.') - str.count('-')"
    },
    {
      "rank": 10,
      "score": 10.0,
      "candidate": "def count_letters(string):\n    letters = 0\n    digits = 0\n    for c in string:\n        if c.isalpha():\n            letters += 1\n        elif c.isdigit():\n            digits += 1\n    return digits, letters\n\nprint(count_letters(\"123456789\"))"
    },
    {
      "rank": 11,
      "score": 10.0,
      "candidate": "def count_digits(string):\n    num_digits = 0\n    num_letters = 0\n    for char in string:\n        if char.isdigit():\n            num_digits += 1\n        else:\n            num_letters += 1\n    return num_digits, num_letters\n\nif __name__ == \"__main__\":\n    print(count_digits('1234567890'))\n    print(count_digits('1234567890'))\n    print(count_digits('1234567890a'))\n    print(count_digits('1234567890a'))\n    print(count_digits('1234567890a12345'))\n    print(count_digits('1234567890a12345a'))\n    print(count_digits('1234567890a12345a12345'))\n    print(count_digits('1234567890a12345a12345a'))\n    print(count_digits('1234567890a12345a12345a'))\n    print(count_digits('1234567890a12345a12345a12345a'))"
    },
    {
      "rank": 12,
      "score": 10.0,
      "candidate": "def num_of_digits(str):\n    return len(str)\n\ndef num_of_letters(str):\n    return len(str.lower())\n\nprint(num_of_digits(\"23\"))\nprint(num_of_digits(\"12345\"))\nprint(num_of_digits(\"1234\"))\nprint(num_of_digits(\"12345678\"))\nprint(num_of_digits(\"123456789\"))\nprint(num_of_digits(\"1234567890\"))\nprint(num_of_digits(\"12345678901\"))\nprint(num_of_digits(\"1234567890123\"))\nprint(num_of_digits(\"123456789012345\"))\nprint(num_of_digits(\"123456789012345234\"))\nprint(num_of_digits(\"123456789012345234234234234234234234234234234234234234234234234234234234234234234234234234234234234234234234234234234234234234234234234234234234234234234234234234234234234234234234234234234234234234234234234234234234234234234234234234234234234234234234234234234234234234234234234234234234234234234234234234234234234234234234234234234234234234234234234234234234234234234234234234234234234234234234234234234234234234234234234234234234234234234234234234234234234234234234234234234234234234234234234234234234234234234234234234234234234234234234234234234234234234234234234234234234234234234234234234234234234234234234234234234234234234234234234234234234234234234234234234234234234234234234234234234234234234234234234234234234234234234234234234234234234234234234234234234234234234234234234234234234234234234234234234234234234234234234234234234234234234234234234234234234234234234234234234234234234234234234234234234234234234234234234234234234234234234234234234234234234234234"
    },
    {
      "rank": 13,
      "score": 10.0,
      "candidate": "def count_digits(str):\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count\n\n\nprint(count_digits(\"123\"))\nprint(count_digits(\"23\"))\nprint(count_digits(\"1234\"))\nprint(count_digits(\"123456\"))\nprint(count_digits(\"1234567\"))\nprint(count_digits(\"12345678\"))\nprint(count_digits(\"123456789\"))\nprint(count_digits(\"1234567890\"))\nprint(count_digits(\"123456789123456\"))\nprint(count_digits(\"12345678912345678\"))\nprint(count_digits(\"12345678912345678123456\"))\nprint(count_digits(\"1234567891234567812345678123456781234567812345678123456781234567812345678123456781234567812345678123456781234567812345678123456781234567812345678123456781234567812345678123456781234567812345678123456781234567812345678123456781234567812345678123456781234567812345678123456781234567812345678123456781234567812345678123456781234567812345678123456781234567812345678123456781234567812345678123456781234567812345678123456781234567812345678123456781234567812345678123456781234567812345678123456781234567812345678123456781234567812345678123456781234567812345678123456781234567812345678123456781234567812345678123456781234567812345678123456781234567812345678123456781234567812345678123456781234567812345678123456781234567812345678123456781234567812345678123456781234567812345678123456781234567812345678123456781234567812345678123456781234567812345678123456781234567812345678123456781234567812345678123456"
    },
    {
      "rank": 14,
      "score": 10.0,
      "candidate": "def count_digits(string):\n    return len(string)\n\ndef count_letters(string):\n    return len(string) - string.count(' ')"
    },
    {
      "rank": 15,
      "score": 9.995815860331241,
      "candidate": "def count_digit(str):\n    count = 0\n    for i in str:\n        if i.isdigit():\n            count += 1\n    return count\n\ndef count_letter(str):\n    count = 0\n    for i in str:\n        if i.isalpha():\n            count += 1\n    return count\n\ndef main():\n    str = \"a123b456\"\n    print(\"Digits: \" + str + \" Letters: \" + str)\n    print(count_digit(str))\n    print(count_letter(str))\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 16,
      "score": 9.988893927875916,
      "candidate": "def digits(string):\n    count = 0\n    for i in string:\n        if i.isdigit():\n            count += 1\n    return count\n\ndef letters(string):\n    count = 0\n    for i in string:\n        if i.isalpha():\n            count += 1\n    return count\n\nif __name__ == \"__main__\":\n    print(digits(\"123456789\"))\n    print(letters(\"abc\"))"
    },
    {
      "rank": 17,
      "score": 9.977676862310096,
      "candidate": "def count_digits(str):\n    count = 0\n    for letter in str:\n        if letter.isdigit():\n            count += 1\n    return count\n\ndef count_letters(str):\n    count = 0\n    for letter in str:\n        if letter.isalpha():\n            count += 1\n    return count\n\n\nprint(count_digits(\"123\"))\nprint(count_digits(\"123.456\"))\nprint(count_digits(\"123.456.789\"))\nprint(count_digits(\"123.456.789.9\"))\nprint(count_digits(\"123.456.789.9.9\"))\nprint(count_digits(\"123.456.789.9.9.9\"))\nprint(count_digits(\"123.456.789.9.9.9.9\"))\nprint(count_digits(\"123.456.789.9.9.9.9.9\"))\nprint(count_digits(\"123.456.789.9.9.9.9.9\"))\nprint(count_digits(\"123.456.789.9.9.9.9.9\"))\nprint(count_digits(\"123.456.789.9.9.9.9.9.9\"))\nprint(count_digits(\"123.456.789.9.9.9.9.9.9\"))\nprint(count_digits(\"123.456.789.9.9.9.9.9.9\"))\nprint(count_digits(\"123.456.789.9.9.9.9.9\"))\nprint(count_digits(\"123.456.789.9.9.9.9.9\"))\nprint(count_digits(\"123.456.789.9.9.9.9.9\"))\nprint(count_digits(\"123.456.789.9.9.9.9.9\"))\nprint(count_digits(\"123.456.789.9.9.9.9.9\"))\nprint(count_digits(\"123.456.789.9.9"
    },
    {
      "rank": 18,
      "score": 9.93190171477037,
      "candidate": "def number_of_digits(s):\n    return len(set(s))\n\ndef number_of_letters(s):\n    return len(set(s))\n\nprint(number_of_digits(\"1234\"))\nprint(number_of_digits(\"123\"))\nprint(number_of_digits(\"0\"))\nprint(number_of_digits(\"123\"))\nprint(number_of_digits(\"123\"))\nprint(number_of_digits(\"123\"))\nprint(number_of_digits(\"123\"))\nprint(number_of_digits(\"123\"))\nprint(number_of_digits(\"123\"))\nprint(number_of_digits(\"123\"))\nprint(number_of_digits(\"123\"))\nprint(number_of_digits(\"123\"))\nprint(number_of_digits(\"123\"))\nprint(number_of_digits(\"123\"))\nprint(number_of_digits(\"123\"))\nprint(number_of_digits(\"123\"))\nprint(number_of_digits(\"123\"))\nprint(number_of_digits(\"123\"))\nprint(number_of_digits(\"123\"))\nprint(number_of_digits(\"123\"))\nprint(number_of_digits(\"123\"))\nprint(number_of_digits(\"123\"))\nprint(number_of_digits(\"123\"))\nprint(number_of_digits(\"123\"))\nprint(number_of_digits(\"123\"))\nprint(number_of_digits(\"123\"))\nprint(number_of_digits(\"123\"))\nprint(number_of_digits(\"123\"))\nprint(number_of_digits(\"123\"))\nprint(number_of_digits(\"123\"))\nprint(number_of_digits(\"123\"))\nprint(number_of_digits(\"123\"))\nprint(number_of_digits(\"123\"))\nprint(number_of_digits(\"123\"))\nprint(number_of_digits(\"123\"))\nprint(number_of_digits(\"123\"))\nprint(number_of_digits(\"123\"))\nprint(number_of_digits(\"123\"))\nprint(number_of_digits(\"123\"))\nprint"
    },
    {
      "rank": 19,
      "score": 9.927417543345754,
      "candidate": "def num_digits(s):\n    return len(s) - s.count('.') - s.count('-');\n\nprint(num_digits('123456'))\nprint(num_digits('456'))\nprint(num_digits('12345'))\nprint(num_digits('12345678'))\nprint(num_digits('45678'))"
    },
    {
      "rank": 20,
      "score": 9.909574937564084,
      "candidate": "def num_digits(string):\n    return len(list(filter(str.isdigit, string)))\n\ndef num_letters(string):\n    return len(list(filter(str.isalpha, string)))\n\n\nif __name__ == '__main__':\n    assert num_digits(\"123456\") == 2\n    assert num_digits(\"12345678\") == 3\n    assert num_digits(\"1234567812345678\") == 4\n    assert num_digits(\"123456781234567812345678\") == 5\n    assert num_digits(\"123456781234567812345678\") == 6\n    assert num_digits(\"123456781234567812345678\") == 7\n    assert num_digits(\"12345678123456781234567812345678\") == 8\n    assert num_digits(\"12345678123456781234567812345678123456781234567812345678\") == 9\n    assert num_digits
    },
    {
      "rank": 21,
      "score": 9.907307721355581,
      "candidate": "def number_of_digits(str):\n    return str.count('.') + str.count('0') + str.count('-')\n\n\ndef number_of_letters(str):\n    return len(str)\n\n\ndef main():\n    print(number_of_digits(\"1234\"))\n    print(number_of_digits(\"232\"))\n    print(number_of_digits(\"0\"))\n    print(number_of_digits(\"-12\"))\n    print(number_of_digits(\"-12.3456\"))\n    print(number_of_digits(\"-12.3456.\"))\n    print(number_of_digits(\"-12.3456.6789\"))\n    print(number_of_digits(\"-12.3456.6789.0\"))\n    print(number_of_digits(\"-12.3456.6789.0.\"))\n    print(number_of_digits(\"-12.3456.6789.0-12\"))\n    print(number_of_digits(\"-12.3456.6789.0-12.3456\"))\n    print(number_of_digits(\"-12.3456.6789.0-12.3456.6789\"))\n    print(number_of_digits(\"-12.3456.6789.0-12.3456.6789.0\"))\n    print(number_of_digits(\"-12.3456.6789.0-12.3456.6789.0.0\"))\n    print(number_of_digits(\"-12.3456.6789.0-12.3456.6789.0.0-12\"))\n    print(number_of_digits(\"-12.3456.6789.0-12.3456.6789.0.0.0\"))\n    print(number_of_digits(\"-12.3456.6789.0-12.3456.6789.0.0.0-12\"))\n    print(number_of_digits(\"-12.3456.6789.0-12.3456.6789.0-12.3456.6789\"))"
    },
    {
      "rank": 22,
      "score": 9.904144163486123,
      "candidate": "def count_digits(str):\n    num = 0\n    for i in str:\n        if i.isdigit():\n            num += 1\n    return num\n\ndef count_letters(str):\n    num = 0\n    for i in str:\n        if i.isalpha():\n            num += 1\n    return num\n\nif __name__ == '__main__':\n    print(count_digits(\"12345\"))\n    print(count_digits(\"12345345\"))\n    print(count_digits(\"123456789\"))\n    print(count_digits(\"12345678901234\"))\n    print(count_digits(\"1234567890123456\"))\n    print(count_digits(\"123456789012345678\"))\n    print(count_digits(\"12345678901234567812345678\"))\n    print(count_digits(\"1234567890123456781234567812345678\"))\n    print(count_digits(\"123456789012345678123456781234567812345678\"))\n    print(count_digits(\"1234567890123456781234567812345678123456781234567812345678123456781234567812345678\"))\n    print(count_digits(\"1234567890123456781234567812345678123456781234567812345678123456781234567812345678\"))\n    print(count_digits(\"123456789012345678123456781234567812345678123456781234567812345678123456781234567812345678123456781234567812345678\"))\n    print(count_digits(\"123456789012345678123456781234567812345678123456781234567812345678123456781234567812345678123456781234567812345678123456781234567812345678123456781234567812345678\"))\n    print(count_digits(\"123456789012345678123456781234567812345678123456781234567812345678123456781234567812345678123456781234567812345678123456781234567812345678123456781234567812345678123456781234567812345678\"))\n    print(count_"
    },
    {
      "rank": 23,
      "score": 9.880624493070941,
      "candidate": "def num_digits(string):\n    return len(string)\n\n\ndef num_letters(string):\n    return len(string)\n\n\nprint(num_digits(\"123\"))\nprint(num_digits(\"123.456\"))\nprint(num_digits(\"123.456.789\"))\nprint(num_digits(\"123.456.789.9\"))\nprint(num_digits(\"123.456.789.9.9\"))\nprint(num_digits(\"123.456.789.9.9.9.9.9.9\"))\nprint(num_digits(\"123.456.789.9.9.9.9.9.9.9\"))\nprint(num_digits(\"123.456.789.9.9.9.9.9.9.9.9\"))\nprint(num_digits(\"123.456.789.9.9.9.9.9.9.9.9\"))\nprint(num_digits(\"123.456.789.9.9.9.9.9.9.9\"))\nprint(num_digits(\"123.456.789.9.9.9.9.9.9.9.9.9\"))\nprint(num_digits(\"123.456.789.9.9.9.9.9.9.9.9.9\"))\nprint(num_digits(\"123.456.789.9.9.9.9.9.9.9.9\"))\nprint(num_digits(\"123.456.789.9.9.9.9.9.9.9.9.9\"))\nprint(num_digits(\"123.456.789.9.9.9.9.9.9.9.9\"))\nprint(num_digits(\"123.456.789.9.9.9.9.9.9.9\"))\nprint(num_digits(\"123.456.789.9.9.9.9.9.9.9\"))\nprint(num_digits(\"123.456.789.9.9.9"
    },
    {
      "rank": 24,
      "score": 9.81380200612517,
      "candidate": "def digits_letters(str):\n    return str.count('0') + str.count('1') + str.count('2') + str.count('3') + str.count('4') + str.count('5') + str.count('6') + str.count('7') + str.count('8') + str.count('9')\n\n\ndef main():\n    print(digits_letters('abc'))\n    print(digits_letters('123'))\n    print(digits_letters('123.456'))\n    print(digits_letters('123.456.789'))\n    print(digits_letters('123.456.789.9'))\n    print(digits_letters('123.456.789.9.9'))\n    print(digits_letters('123.456.789.9.9.9.9'))\n    print(digits_letters('123.456.789.9.9.9.9.9'))\n    print(digits_letters('123.456.789.9.9.9.9.9.9'))\n    print(digits_letters('123.456.789.9.9.9.9.9.9'))\n    print(digits_letters('123.456.789.9.9.9.9.9.9'))\n    print(digits_letters('123.456.789.9.9.9.9.9.9'))\n    print(digits_letters('123.456.789.9.9.9.9.9.9'))\n    print(digits_letters('123.456.789.9.9.9.9.9.9'))\n    print(digits_letters('123.456.789.9.9.9.9.9.9'))\n    print(digits_letters('123.456.789.9.9.9.9.9.9'))\n    print(digits_letters('123.456.789.9.9.9.9.9'))\n    print(digits_letters('123.456.789.9.9.9.9.9'))\n    print(digits_letters('123."
    },
    {
      "rank": 25,
      "score": 9.739842567800983,
      "candidate": "def count_digits(string):\n    return len(string)\n\ndef count_letters(string):\n    return len(string.replace(\" \",\"\"))\n\n\nprint(count_digits(\"12345678\"))\nprint(count_digits(\"123\"))\nprint(count_letters(\"ABC\"))\nprint(count_letters(\"ABC\"))\nprint(count_letters(\"ABC\"))\nprint(count_letters(\"\"))\nprint(count_letters(\"abc\"))\nprint(count_letters(\"abcd\"))\nprint(count_letters(\"abc\"))\nprint(count_letters(\"abc\"))"
    },
    {
      "rank": 26,
      "score": 9.686022352696328,
      "candidate": "def num_digits(s):\n    return len(list(filter(lambda x: x.isdigit(), s)))\n\n\ndef num_letters(s):\n    return len(list(filter(lambda x: x.isalpha(), s)))\n\n\nprint(num_digits('12345678'))\nprint(num_digits('123'))\nprint(num_digits('12345678123'))\nprint(num_digits('12345678123123'))\nprint(num_digits('12345678123123123'))\nprint(num_digits('12345678123123123123123'))"
    },
    {
      "rank": 27,
      "score": 9.621538468508984,
      "candidate": "def num_letters(s):\n    return len(s)\n\ndef num_digits(s):\n    return len(s.replace(\".\", \"\"))\n\nprint(num_digits(\"1234567890\"))\nprint(num_digits(\"1234567890.0\"))\nprint(num_digits(\"1234567890.0.0\"))\nprint(num_digits(\"1234567890.0.0.0\"))\nprint(num_digits(\"1234567890.0.0.0.0\"))"
    },
    {
      "rank": 28,
      "score": 9.588262324841487,
      "candidate": "def count_digits_and_letters(string):\n    return len(string), len(string.replace(' ', ''))\n\nprint(count_digits_and_letters(\"1\"))\nprint(count_digits_and_letters(\"1.1\"))\nprint(count_digits_and_letters(\"1.1.1\"))\nprint(count_digits_and_letters(\"1.1.1.1\"))\nprint(count_digits_and_letters(\"1.1.1.1.1.1.1.1.1\"))\nprint(count_digits_and_letters(\"1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1."
    },
    {
      "rank": 29,
      "score": 9.558328062273828,
      "candidate": "def count_digits(str):\n    str_len = len(str)\n    count = 0\n    for i in str:\n        if i.isdigit():\n            count += 1\n    return count, str_len\n\n\nprint(count_digits(\"\"))\nprint(count_digits(\"123\"))\nprint(count_digits(\"123123\"))\nprint(count_digits(\"12345\"))\nprint(count_digits(\"123456789\"))\nprint(count_digits(\"1234567890\"))\nprint(count_digits(\"123456789012345\"))"
    },
    {
      "rank": 30,
      "score": 9.46527547192096,
      "candidate": "def count_digits(str):\n    num_digits = 0\n    num_letters = 0\n    for char in str:\n        if char.isdigit():\n            num_digits += 1\n        else:\n            num_letters += 1\n    return num_digits, num_letters\n\nprint(count_digits(\"12345678\"))\nprint(count_digits(\"123456\"))\nprint(count_digits(\"12345678123456\"))\nprint(count_digits(\"123456781234567812345678123456781234567812345678\"))\nprint(count_digits(\"123456781234567812345678123456781234567812345678\"))\nprint(count_digits(\"12345678123456781234567812345678123456781234567812345678\"))\nprint(count_digits(\"123456781234567812345678123456781234567812345678\"))\nprint(count_digits(\"123456781234567812345678123456781234567812345678\"))\nprint(count_digits(\"12345678123456781234567812345678123456781234567812345678\"))\nprint(count_digits(\"123456781234567812345678123456781234567812345678\"))\nprint(count_digits(\"123456781234567812345678123456781234567812345678\"))\nprint(count_digits(\"123456781234567812345678123456781234567812345678\"))\nprint(count_digits(\"123456781234567812345678123456781234567812345678\"))\nprint(count_digits(\"123456781234567812345678123456781234567812345678\"))\nprint(count_digits(\"123456781234567812345678123456781234567812345678\"))\nprint(count_digits(\"123456781234567812345678123456781234567812345678\"))\nprint(count_digits(\"123456781234567812345678123456781234567812345678\"))\nprint(count_digits(\"12345678123456781234567812345678123456781234"
    },
    {
      "rank": 31,
      "score": 9.453457551837552,
      "candidate": "def count_digits(string):\n    return sum(1 for c in string if c.isdigit())\n\ndef count_letters(string):\n    return sum(1 for c in string if c.isalpha())\n\nprint(count_digits(\"12345\"))\nprint(count_digits(\"123\"))\nprint(count_digits(\"123\"))\nprint(count_digits(\"123\"))\nprint(count_digits(\"123\"))\nprint(count_digits(\"123\"))\nprint(count_digits(\"123\"))\nprint(count_digits(\"123\"))\nprint(count_digits(\"123\"))\nprint(count_digits(\"123\"))\nprint(count_digits(\"123\"))\nprint(count_digits(\"123\"))\nprint(count_digits(\"123\"))\nprint(count_digits(\"123\"))\nprint(count_digits(\"123\"))\nprint(count_digits(\"123\"))\nprint(count_digits(\"123\"))\nprint(count_digits(\"123\"))\nprint(count_digits(\"123\"))\nprint(count_digits(\"123\"))\nprint(count_digits(\"123\"))\nprint(count_digits(\"123\"))\nprint(count_digits(\"123\"))\nprint(count_digits(\"123\"))\nprint(count_digits(\"123\"))\nprint(count_digits(\"123\"))\nprint(count_digits(\"123\"))\nprint(count_digits(\"123\"))\nprint(count_digits(\"123\"))\nprint(count_digits(\"123\"))\nprint(count_digits(\"123\"))\nprint(count_digits(\"123\"))\nprint(count_digits(\"123\"))\nprint(count_digits(\"123\"))\nprint(count_digits(\"123\"))\nprint(count_digits(\"123\"))\nprint(count_digits(\"123\"))\nprint(count_digits(\"123\"))\nprint(count_digits(\"123\"))\nprint(count_digits(\"123\"))\nprint(count_digits(\"123\"))\nprint(count_digits(\"123\"))\nprint(count_digits(\"123\"))\nprint(count_digits(\"123\"))\nprint(count_digits(\"123\"))\nprint(count_digits(\"123\""
    },
    {
      "rank": 32,
      "score": 9.234050852198141,
      "candidate": "def num_digits_and_letters(s):\n    n = len(s)\n    return n, sum(map(s.count, '0123456789'))\n\n\nassert num_digits_and_letters('456') == (4, 1)\nassert num_digits_and_letters('123') == (3, 1)\nassert num_digits_and_letters('') == (0, 0)\nassert num_digits_and_letters('123456789') == (3, 3)\nassert num_digits_and_letters('1234567890123') == (3, 3)"
    },
    {
      "rank": 33,
      "score": 9.226766272351448,
      "candidate": "def count_digits(s):\n    return len(s.replace('.', ''))\n\ndef count_letters(s):\n    return len(s.replace(' ', ''))\n\ndef count_letters_digits(s):\n    return len(s.replace(' ', '').replace('.', ''))\n\n\nif __name__ == \"__main__\":\n    print(count_digits('123'))\n    print(count_digits('1234'))\n    print(count_digits('1234567'))\n    print(count_digits('1234567.'))\n    print(count_digits('1234567.56'))\n    print(count_digits('1234567.56.'))\n    print(count_digits('1234567.56.56'))\n    print(count_digits('1234567.56.56.56'))\n    print(count_digits('1234567.56.56.56.'))\n    print(count_digits('1234567.56.56.56'))\n    print(count_digits('1234567.56.56.56.56'))\n    print(count_digits('1234567.56.56.56.56.56'))\n    print(count_digits('1234567.56.56.56.56.56.56.56'))\n    print(count_digits('1234567.56.56.56.56.56.56.56.56'))\n    print(count_digits('1234567.56.56.56.56.56.56.56.56.56.56.56'))\n    print(count_digits('1234567.56.56.56.56.56.56.56.56.56.56.56'))\n    print(count_digits('1234567.56.56.56.56.56.56.56.56.56.56.56'))\n    print(count_digits('1234567.56.56.56.56.56.56.56.56.56.56.56'))\n    print(count_digits('1234567.56.56.56.56.56.56.56.56.56.56'))\n    print(count_digits('1234567.56.56.56.56.56.56.56.56.56.56'))\n    print("
    },
    {
      "rank": 34,
      "score": 9.21346272767743,
      "candidate": "def digits_and_letters(s: str) -> int:\n    return sum(1 for c in s if c.isdigit()) + sum(1 for c in s if c.isalpha())\n\n\nif __name__ == \"__main__\":\n    assert digits_and_letters(\"4321\") == 3\n    assert digits_and_letters(\"123456\") == 2\n    assert digits_and_letters(\"1\") == 1\n    assert digits_and_letters(\"\") == 0"
    },
    {
      "rank": 35,
      "score": 9.205959372648458,
      "candidate": "def count_letters(s):\n    count = 0\n    for i in s:\n        if i.isdigit():\n            count += 1\n        else:\n            count += 1\n            break\n    return count\n\ndef count_digits(s):\n    count = 0\n    for i in s:\n        if i.isdigit():\n            count += 1\n        else:\n            count += 1\n    return count\n\ndef count_digits_letters(s):\n    count = 0\n    for i in s:\n        if i.isdigit():\n            count += 1\n        elif i.isalpha():\n            count += 1\n        else:\n            count += 1\n    return count\n\nprint(count_digits_letters(\"abc\"))"
    },
    {
      "rank": 36,
      "score": 9.177268828905222,
      "candidate": "def number_of_digits_and_letters(str):\n    return len(str) - str.count('0') - str.count('1') - str.count('2') - str.count('3') - str.count('4') - str.count('5') - str.count('6') - str.count('7')"
    },
    {
      "rank": 37,
      "score": 9.122564458729856,
      "candidate": "def count_digits(string):\n    return len(string) - string.count('.') - string.count('-') - string.count(' ')\n\ndef count_letters(string):\n    return len(string) - string.count(' ')\n\nprint(count_digits(\"10.9\"))\nprint(count_digits(\"10.9.9\"))\nprint(count_digits(\"10.9.9.9\"))\nprint(count_digits(\"10.9.9.9.9\"))\nprint(count_digits(\"10.9.9.9.9\"))\nprint(count_digits(\"10.9.9.9.9.9\"))\nprint(count_digits(\"10.9.9.9.9.9\"))\nprint(count_digits(\"10.9.9.9.9.9\"))\nprint(count_digits(\"10.9.9.9.9.9\"))\nprint(count_digits(\"10.9.9.9.9.9\"))\nprint(count_digits(\"10.9.9.9.9.9\"))\nprint(count_digits(\"10.9.9.9.9.9.9\"))\nprint(count_digits(\"10.9.9.9.9.9\"))\nprint(count_digits(\"10.9.9.9.9.9.9\"))\nprint(count_digits(\"10.9.9.9.9.9.9\"))\nprint(count_digits(\"10.9.9.9.9.9.9\"))\nprint(count_digits(\"10.9.9.9.9.9.9\"))\nprint(count_digits(\"10.9.9.9.9.9.9\"))\nprint(count_digits(\"10.9.9.9.9.9\"))\nprint(count_digits(\"10.9.9.9.9.9.9\"))\nprint(count_digits(\"10.9.9.9.9.9\"))\nprint(count_digits(\"10.9.9.9.9.9\"))\nprint(count_digits(\"10.9.9.9.9.9\"))"
    },
    {
      "rank": 38,
      "score": 8.85571690049604,
      "candidate": "def count_digits(string):\n    count = 0\n    for i in string:\n        if i.isdigit():\n            count += 1\n    return count\n\ndef count_letters(string):\n    count = 0\n    for i in string:\n        if i.isalpha():\n            count += 1\n    return count"
    },
    {
      "rank": 39,
      "score": 8.855395696632057,
      "candidate": "def count_letters(str):\n    letters = 0\n    digits = 0\n\n    for char in str:\n        if char.isalpha():\n            letters += 1\n        elif char.isdigit():\n            digits += 1\n\n    return letters, digits\n\nprint(count_letters('abcd'))"
    },
    {
      "rank": 40,
      "score": 8.76828871349479,
      "candidate": "def num_digits(string):\n    return len(list(filter(lambda x: x.isdigit(), string)))\n\n\ndef num_letters(string):\n    return len(list(filter(lambda x: x.isalpha(), string)))\n\n\nprint(num_digits('123'))\nprint(num_digits('123123'))\nprint(num_digits('123123123'))\nprint(num_digits('123123123123'))\nprint(num_digits('123123123123123'))\nprint(num_digits('123123123123123123'))\nprint(num_digits('123123123123123123'))\nprint(num_digits('123123123123123123'))"
    },
    {
      "rank": 41,
      "score": 8.750282588864879,
      "candidate": "def count_digits(string):\n    count = 0\n    for char in string:\n        if char.isdigit():\n            count += 1\n    return count\n\ndef count_letters(string):\n    count = 0\n    for char in string:\n        if char.isalpha():\n            count += 1\n    return count\n\nif __name__ == '__main__':\n    string = input(\"Enter a string: \")\n    print(\"Number of digits: \", count_digits(string))\n    print(\"Number of letters: \", count_letters(string))"
    },
    {
      "rank": 42,
      "score": 8.625142247198651,
      "candidate": "def count_digits(string):\n    count = 0\n    for char in string:\n        if char.isdigit():\n            count += 1\n    return count\n\ndef count_letters(string):\n    count = 0\n    for char in string:\n        if char.isalpha():\n            count += 1\n    return count\n\ndef main():\n    string = input(\"Enter a string: \")\n    count = count_digits(string)\n    count = count_letters(string)\n    print(f\"Number of digits is {count}\")\n    print(f\"Number of letters is {count}\")\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 43,
      "score": 8.623000730200317,
      "candidate": "def count_digits(string):\n    digits = 0\n    letters = 0\n    for letter in string:\n        if letter.isdigit():\n            digits += 1\n        else:\n            letters += 1\n    return digits, letters\n\nprint(count_digits('123456789'))"
    },
    {
      "rank": 44,
      "score": 8.616253589228675,
      "candidate": "def letter_count(string):\n    return len(string) - string.count(' ') - string.count('-')\n\n\ndef digit_count(string):\n    return len(string) - string.count('0') - string.count('1') - string.count('2') - string.count('3') - string.count('4') - string.count('5') - string.count('6') - string.count('7') - string.count('8')\n\n\ndef main():\n    print(letter_count(\"4321\"))\n    print(digit_count(\"4321\"))\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 45,
      "score": 8.610076160146226,
      "candidate": "def digits_and_letters(s):\n    s = list(s)\n    digits = 0\n    letters = 0\n    for i in s:\n        if i.isdigit():\n            digits += 1\n        elif i.isalpha():\n            letters += 1\n    return digits, letters\n\nprint(digits_and_letters(\"7890\"))\nprint(digits_and_letters(\"1234567890\"))\nprint(digits_and_letters(\"1\"))\nprint(digits_and_letters(\"\"))"
    },
    {
      "rank": 46,
      "score": 8.606486429141842,
      "candidate": "def count_letters(str):\n    count = 0\n    for i in str:\n        if i.isdigit():\n            count += 1\n        else:\n            count = 0\n    return count\n\n\ndef count_digits(str):\n    count = 0\n    for i in str:\n        if i.isdigit():\n            count += 1\n        else:\n            count = 0\n    return count\n\n\ndef count_letters_digits(str):\n    count = 0\n    for i in str:\n        if i.isdigit():\n            count += 1\n        else:\n            count = 0\n    return count, count\n\n\nprint(count_letters(\"a\"))\nprint(count_digits(\"a\"))\nprint(count_letters_digits(\"a\"))"
    },
    {
      "rank": 47,
      "score": 8.60156811074208,
      "candidate": "def count_digits(string):\n    num_digits = 0\n    num_letters = 0\n    for char in string:\n        if char.isdigit():\n            num_digits += 1\n        elif char.isalpha():\n            num_letters += 1\n    return num_digits, num_letters\n\n\ndef test_count_digits():\n    assert count_digits(\"4\") == (1, 0)\n    assert count_digits(\"456\") == (1, 0)\n    assert count_digits(\"456a\") == (1, 0)\n    assert count_digits(\"456\") == (1, 0)\n    assert count_digits(\"456a\") == (1, 0)\n    assert count_digits(\"456\") == (1, 0)\n    assert count_digits(\"456a\") == (1, 0)\n    assert count_digits(\"456a\") == (1, 0)\n    assert count_digits(\"456a\") == (1, 0)\n    assert count_digits(\"456a\") == (1, 0)\n    assert count_digits(\"456a\") == (1, 0)\n    assert count_digits(\"456a\") == (1, 0)\n    assert count_digits(\"456a\") == (1, 0)\n    assert count_digits(\"456a\") == (1, 0)\n    assert count_digits(\"456a\") == (1, 0)\n    assert count_digits(\"\") == (0, 0)"
    },
    {
      "rank": 48,
      "score": 8.565425580227462,
      "candidate": "def count_digits(str):\n    count = 0\n    for c in str:\n        if c.isdigit():\n            count += 1\n    return count\n\n\ndef count_letters(str):\n    count = 0\n    for c in str:\n        if c.isalpha():\n            count += 1\n    return count\n\n\nprint(count_digits(\"abc\"))\nprint(count_digits(\"123\"))\nprint(count_digits(\"123456\"))\nprint(count_digits(\"12345678\"))\nprint(count_digits(\"123\"))\nprint(count_digits(\"123456\"))\nprint(count_digits(\"123abc\"))\nprint(count_digits(\"12345\"))\nprint(count_digits(\"12345abc\"))\nprint(count_digits(\"12345abc\"))\nprint(count_digits(\"12345abc\"))\nprint(count_digits(\"12345abc\"))\nprint(count_digits(\"12345abc\"))"
    },
    {
      "rank": 49,
      "score": 8.542875062379007,
      "candidate": "def number_of_digits_and_letters(s):\n    num_digits = 0\n    num_letters = 0\n\n    for c in s:\n        if c.isdigit():\n            num_digits += 1\n        else:\n            num_letters += 1\n\n    return num_digits, num_letters\n\nprint(number_of_digits_and_letters('abc'))\nprint(number_of_digits_and_letters('123456789'))\nprint(number_of_digits_and_letters('1234567890'))"
    },
    {
      "rank": 50,
      "score": 8.53012858503943,
      "candidate": "def count_digits(string):\n    digits = 0\n    letters = 0\n    for char in string:\n        if char.isdigit():\n            digits += 1\n        else:\n            letters += 1\n    return digits, letters\n\n\nprint(count_digits(\"1234567890\"))"
    },
    {
      "rank": 51,
      "score": 8.499905739299377,
      "candidate": "def count_digits_and_letters(string):\n    count = 0\n    for char in string:\n        if char.isdigit():\n            count += 1\n    return count, len(string)\n\nprint(count_digits_and_letters(\"hello world\"))"
    },
    {
      "rank": 52,
      "score": 8.490324832712195,
      "candidate": "def count_digits(string):\n    return sum([1 for i in string if i.isdigit()])\n\ndef count_letters(string):\n    return sum([1 for i in string if i.isalpha()])\n\ndef main():\n    string = input()\n    print(count_digits(string))\n    print(count_letters(string))\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 53,
      "score": 8.48796797856353,
      "candidate": "def count_letters(str):\n    if len(str) == 0:\n        return 0\n    return len(str) - str.count(\" \") - str.count(\"a\") - str.count(\"e\") - str.count(\"i\") - str.count(\"o\") - str.count(\"u\")\n\nprint(count_letters(\"\"))\nprint(count_letters(\"a\"))\nprint(count_letters(\"e\"))\nprint(count_letters(\"i\"))\nprint(count_letters(\"o\"))\nprint(count_letters(\"u\"))"
    },
    {
      "rank": 54,
      "score": 8.478208546788407,
      "candidate": "def number_of_digits_and_letters(s):\n    digits = 0\n    letters = 0\n    for i in s:\n        if i.isdigit():\n            digits += 1\n        else:\n            letters += 1\n    return digits, letters\n\n\nassert number_of_digits_and_letters('123') == (1, 1)\nassert number_of_digits_and_letters('123') == (2, 1)\nassert number_of_digits_and_letters('123') == (3, 1)\nassert number_of_digits_and_letters('') == (0, 0)"
    },
    {
      "rank": 55,
      "score": 8.386620303250325,
      "candidate": "def count_digits(str):\n    return len(str) - str.count('.') - str.count('-') - str.count('_')\n\ndef count_letters(str):\n    return len(str) - str.count('a') - str.count('e') - str.count('i') - str.count('o') - str.count('u')"
    },
    {
      "rank": 56,
      "score": 8.375312293858853,
      "candidate": "def number_of_digits_and_letters(string):\n    count = 0\n    for char in string:\n        if char.isdigit():\n            count += 1\n        elif char.isalpha():\n            count += 1\n    return count\n\n\ndef main():\n    string = \"9123\"\n    print(f\"Number of digits: {number_of_digits_and_letters(string)}\")\n    string = \"123456\"\n    print(f\"Number of digits: {number_of_digits_and_letters(string)}\")\n    string = \"123456123456\"\n    print(f\"Number of digits: {number_of_digits_and_letters(string)}\")\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 57,
      "score": 8.351614956112536,
      "candidate": "def count_digits_and_letters(str):\n  return len(str) - str.count(\".\") - str.count(\",\") - str.count(\"-\") - str.count(\".\") - str.count(\",\") - str.count(\"-\")"
    },
    {
      "rank": 58,
      "score": 8.331556294201176,
      "candidate": "def string_length(string):\n    return len(string)\n\n\nprint(string_length(\"12345\"))\nprint(string_length(\"abcd\"))\nprint(string_length(\"\"))\nprint(string_length(\"\"))"
    },
    {
      "rank": 59,
      "score": 8.327367757082776,
      "candidate": "def count_digits(str):\n    # Write your code here\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count\n\ndef count_letters(str):\n    # Write your code here\n    count = 0\n    for char in str:\n        if char.isalpha():\n            count += 1\n    return count\n\nif __name__ == \"__main__\":\n    str = \"abc\"\n    print(count_digits(str))\n    print(count_letters(str))"
    },
    {
      "rank": 60,
      "score": 8.2938925966498,
      "candidate": "def number_of_digits(string):\n    count = 0\n    for char in string:\n        if char.isdigit():\n            count += 1\n    return count\n\ndef number_of_letters(string):\n    count = 0\n    for char in string:\n        if char.isalpha():\n            count += 1\n    return count\n\nprint(number_of_digits('123456789'))\nprint(number_of_digits('abcdefghijklmnopqrstuvwxyz'))\nprint(number_of_digits('123456789'))\nprint(number_of_digits('abcdefghijklmnopqrstuvwxyz123456789'))\nprint(number_of_letters('abcdefghijklmnopqrstuvwxyz'))\nprint(number_of_letters('abcdefghijklmnopqrstuvwxyz123456789'))\nprint(number_of_letters('123456789'))\nprint(number_of_letters('abcdefghijklmnopqrstuvwxyz123456789'))"
    },
    {
      "rank": 61,
      "score": 8.214125058964552,
      "candidate": "def count_digits(string):\n    # Your code here\n    return len(string) - string.count('.') - string.count('-') - string.count('_')\n\n\ndef count_letters(string):\n    # Your code here\n    return len(string) - string.count('a') - string.count('e') - string.count('i') - string.count('o') - string.count('u')\n\n\nif __name__ == '__main__':\n    print(count_digits(\"7.3.5\"))\n    print(count_digits(\"7.3.5.\"))\n    print(count_digits(\"7.3.5.5\"))\n    print(count_digits(\"7.3.5.5.5\"))\n    print(count_digits(\"7.3.5.5.5.5\"))\n    print(count_digits(\"7.3.5.5.5.5.5\"))\n    print(count_digits(\"7.3.5.5.5.5.5\"))\n    print(count_digits(\"7.3.5.5.5.5.5\"))\n    print(count_digits(\"7.3.5.5.5.5.5\"))\n    print(count_digits(\"7.3.5.5.5.5.5\"))\n    print(count_digits(\"7.3.5.5.5.5.5\"))\n    print(count_digits(\"7.3.5.5.5.5.5\"))"
    },
    {
      "rank": 62,
      "score": 8.212735598038213,
      "candidate": "def num_digits(s):\n    return len(list(filter(str.isdigit, s)))\n\n\ndef num_letters(s):\n    return len(list(filter(str.isalpha, s)))"
    },
    {
      "rank": 63,
      "score": 8.211579567659316,
      "candidate": "def count_digits(string):\n    return len(string)\n\ndef count_letters(string):\n    return len(string.lower())\n\nprint(count_digits(\"This is a test\"))\nprint(count_letters(\"This is a test\"))"
    },
    {
      "rank": 64,
      "score": 8.209707251476969,
      "candidate": "def count_digits(str):\n    return len(str.split(\".\"))\n\ndef count_letters(str):\n    return len(str.lower())"
    },
    {
      "rank": 65,
      "score": 8.2048573255218,
      "candidate": "def num_digits_and_letters(str):\n    str_len = len(str)\n    str_digit = 0\n    str_letter = 0\n    for i in range(str_len):\n        if str[i].isdigit():\n            str_digit += 1\n        else:\n            str_letter += 1\n    print(str_len, \"length of string is\", str_digit, \"digits and\", str_len, \"letters.\")\n    return str_digit, str_letter\n\n\nprint(num_digits_and_letters(\"1234\"))"
    },
    {
      "rank": 66,
      "score": 8.172253082181854,
      "candidate": "def num_digits(str):\n    n = len(str)\n    return n, str.count(\".\"), str.count(\"-\"), str.count(\".\"), str.count(\"-\"), str.count(\".\")\n\ndef num_letters(str):\n    n = len(str)\n    return n, str.count(\"a\"), str.count(\"e\"), str.count(\"i\"), str.count(\"o\"), str.count(\"u\"), str.count(\"A\"), str.count(\"E\"), str.count(\"I\"), str.count(\"O\"), str.count(\"U\")\n\nif __name__ == \"__main__\":\n    print(num_digits(\"45678\"))\n    print(num_letters(\"45678\"))"
    },
    {
      "rank": 67,
      "score": 8.163300679823958,
      "candidate": "def count_digits(string):\n    return len(string) - string.count(\".\") - string.count(\"0\") - string.count(\"-\")\n\ndef count_letters(string):\n    return len(string) - string.count(\"a\") - string.count(\"e\") - string.count(\"i\") - string.count(\"o\") - string.count(\"u\")\n\ndef main():\n    string = \"456-789\"\n    print(count_digits(string))\n    print(count_letters(string))\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 68,
      "score": 8.143591138329747,
      "candidate": "def number_of_digits_and_letters(string):\n    return len(string), len(string.lower())"
    },
    {
      "rank": 69,
      "score": 8.121884567141883,
      "candidate": "def count_digits(string):\n    count = 0\n    for letter in string:\n        if letter.isdigit():\n            count += 1\n    return count\n\ndef count_letters(string):\n    count = 0\n    for letter in string:\n        if letter.isalpha():\n            count += 1\n    return count\n\ndef main():\n    print(count_digits('1234'))\n    print(count_digits('123456789'))\n    print(count_digits('1234567890'))\n    print(count_digits('1234567890123'))\n    print(count_digits('123456789012345'))\n    print(count_digits('123456789012345123456789'))\n    print(count_digits('1234567890123451234567890'))\n    print(count_digits('1234567890123451234567890123'))\n    print(count_digits('123456789012345123456789012345'))\n    print(count_digits('123456789012345123456789012345123456789012345123456789012345123456789'))\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 70,
      "score": 8.105983444291466,
      "candidate": "def count_digits(string):\n    count = 0\n    for char in string:\n        if char.isdigit():\n            count += 1\n    return count\n\ndef count_letters(string):\n    count = 0\n    for char in string:\n        if char.isalpha():\n            count += 1\n    return count\n\nprint(count_digits(\"213\"))\nprint(count_letters(\"a1b2c3\"))"
    },
    {
      "rank": 71,
      "score": 8.08452234024709,
      "candidate": "def num_digits_and_letters(string):\n    digits = 0\n    letters = 0\n    for c in string:\n        if c.isdigit():\n            digits += 1\n        elif c.isalpha():\n            letters += 1\n    return digits, letters"
    },
    {
      "rank": 72,
      "score": 7.990432406683839,
      "candidate": "def num_digits_and_letters(str):\n  return str.count('.'), str.count('_'), str.count('a')\n\n\n\nprint(num_digits_and_letters(\"1.2.3\"))\nprint(num_digits_and_letters(\"1234567890\"))\nprint(num_digits_and_letters(\"1234567890a\"))\nprint(num_digits_and_letters(\"1234567890a1\"))\nprint(num_digits_and_letters(\"1234567890a1a\"))\nprint(num_digits_and_letters(\"1234567890a1a1a\"))\nprint(num_digits_and_letters(\"1234567890a1a1a1a\"))\nprint(num_digits_and_letters(\"1234567890a1a1a1a1a1a1a1a1a1a1a1a1a1a1a1a1a1a1a1a1a1a1a1a1a1a1a1a1a1a1a1a1a1a1a1a1a1a1a1a1a1a1a1a1a1a1a1a1a1a1a1a1a1a1a1a1a1a1a1a1a1a1a1a1a1a1a1a1a1a1a1a1a1a1a1a1a1a1a1a1a1a1a1a1a1a1a1a1a1a1a1a1a1a1a1a1a1a1a1a1a1a1a1a1a1a1a1a1a1a1a1a1a1a1a1a1a1a1a1a1a1a1a1a1a1a1a1a1a1a1a1a1a1a1a1a1a1a1a1a1a1a1a1a1a1a1a1a1a1a1a1a1a1a1a1a1a1a1a1a1a1a1a1a1"
    },
    {
      "rank": 73,
      "score": 7.915588979966494,
      "candidate": "def number_of_digits(string):\n    return len(string)\n\n\ndef number_of_letters(string):\n    return len(string)\n\n\ndef main():\n    string = input(\"Enter a string: \")\n    print(f\"Number of digits: {number_of_digits(string)}\")\n    print(f\"Number of letters: {number_of_letters(string)}\")\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 74,
      "score": 7.8912769574414305,
      "candidate": "def digits_and_letters(str):\n    digits = 0\n    letters = 0\n    for char in str:\n        if char.isdigit():\n            digits += 1\n        else:\n            letters += 1\n    return digits, letters\n\nprint(digits_and_letters('332456'))"
    },
    {
      "rank": 75,
      "score": 7.868947655733293,
      "candidate": "def num_digits(s):\n    return len(set(s))\n\ndef num_letters(s):\n    return len(set(s))\n\ndef main():\n    s = \"9123\"\n    print(num_digits(s))\n    print(num_letters(s))\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 76,
      "score": 7.84634113240411,
      "candidate": "def count_letters(string):\n    return len(string)\n\ndef count_digits(string):\n    return len(string) - string.count('.') - string.count('-')\n\nif __name__ == '__main__':\n    print(count_letters('12345'))\n    print(count_digits('12345'))"
    },
    {
      "rank": 77,
      "score": 7.738292593776799,
      "candidate": "def countDigits(string):\n    digits = 0\n    letters = 0\n    for char in string:\n        if char.isdigit():\n            digits += 1\n        else:\n            letters += 1\n    return digits, letters\n\nprint(countDigits(\"123\"))"
    },
    {
      "rank": 78,
      "score": 7.705183449260731,
      "candidate": "def num_digits(s):\n    return len(s) - s.count(\".\") - s.count(\"-\")\n\n\nprint(num_digits(\"1.2.3\"))\nprint(num_digits(\"1.2.3.4\"))\nprint(num_digits(\"1.2.3.4.5\"))"
    },
    {
      "rank": 79,
      "score": 7.4878043221155455,
      "candidate": "def count_digits(str):\n    count = 0\n    for i in str:\n        if i.isdigit():\n            count += 1\n    return count\n\ndef count_letters(str):\n    count = 0\n    for i in str:\n        if i.isalpha():\n            count += 1\n    return count\n\ndef main():\n    str = \"helloworld\"\n    print(f\"Number of digits: {count_digits(str)}\")\n    print(f\"Number of letters: {count_letters(str)}\")\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 80,
      "score": 7.464609382504557,
      "candidate": "def count_digits(str):\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count\n\ndef count_letters(str):\n    count = 0\n    for char in str:\n        if char.isalpha():\n            count += 1\n    return count\n\n\n\n\nprint(count_digits(\"1234567890\"))\nprint(count_letters(\"abcdefghijklmnopqrstuvwxyz\"))"
    },
    {
      "rank": 81,
      "score": 7.4506599871439985,
      "candidate": "def count_digits(s):\n    count = 0\n    for i in s:\n        if i.isdigit():\n            count += 1\n    return count\n\ndef count_letters(s):\n    count = 0\n    for i in s:\n        if i.isalpha():\n            count += 1\n    return count\n\nprint(count_digits('Hello World'))\nprint(count_letters('Hello World'))\n\n\"\"\"\nTime Complexity: O(n)\nSpace Complexity: O(n)\n\"\"\""
    },
    {
      "rank": 82,
      "score": 7.134571892399572,
      "candidate": "def count_letters(str):\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n        else:\n            count = 0\n            break\n    return count, str\n\n\nprint(count_letters(\"123\"))\nprint(count_letters(\"456\"))\nprint(count_letters(\"abc\"))\nprint(count_letters(\"abc3\"))"
    },
    {
      "rank": 83,
      "score": 3.0,
      "candidate": "def count_letters(str):\n    count = 0\n    for i in str:\n        if i.isdigit():\n            count += 1\n        else:\n            count = 0\n    return count\n\n\ndef count_digits(str):\n    count = 0\n    for i in str:\n        if i.isdigit():\n            count += 1\n        else:\n            count = 0\n    return count\n\n\nprint(count_digits(\"9\"))\nprint(count_digits(\"12345\"))\nprint(count_digits(\"1234567\"))\nprint(count_digits(\"0123456789\"))\nprint(count_digits(\"0123456789\"))\nprint(count_digits(\"123456789\"))"
    },
    {
      "rank": 84,
      "score": 3.0,
      "candidate": "def count_digits(string):\n    return len(set(string))\n\ndef count_letters(string):\n    return len(set(string.lower()))\n\ndef count_digits_letters(string):\n    return len(set(string.lower()).intersection(set('0123456789')))\n\nprint(count_digits('1234'))\nprint(count_digits_letters('1234'))"
    },
    {
      "rank": 85,
      "score": 3.0,
      "candidate": "def num_of_digits_and_letters(string):\n    num_of_digits = 0\n    num_of_letters = 0\n\n    for char in string:\n        if char.isdigit():\n            num_of_digits += 1\n        else:\n            num_of_letters += 1\n\n    return (num_of_digits, num_of_letters)\n\n\nprint(num_of_digits_and_letters(\"1234\"))\nprint(num_of_digits_and_letters(\"123\"))\nprint(num_of_digits_and_letters(\"123\"))\nprint(num_of_digits_and_letters(\"123\"))\nprint(num_of_digits_and_letters(\"123456\"))\nprint(num_of_digits_and_letters(\"123456\"))\nprint(num_of_digits_and_letters(\"123456\"))\nprint(num_of_digits_and_letters(\"123456\"))\nprint(num_of_digits_and_letters(\"123456\"))\nprint(num_of_digits_and_letters(\"123456\"))\nprint(num_of_digits_and_letters(\"123456\"))\nprint(num_of_digits_and_letters(\"123456\"))\nprint(num_of_digits_and_letters(\"123456\"))\nprint(num_of_digits_and_letters(\"123456\"))\nprint(num_of_digits_and_letters(\"123456\"))\nprint(num_of_digits_and_letters(\"123456\"))\nprint(num_of_digits_and_letters(\"123456\"))\nprint(num_of_digits_and_letters(\"123456\"))\nprint(num_of_digits_and_letters(\"123456\"))\nprint(num_of_digits_and_letters(\"123456\"))\nprint(num_of_digits_and_letters(\"123456\"))\nprint(num_of_digits_and_letters(\"123456\"))\nprint(num_of_digits_and_letters(\"123456\"))\nprint(num_of_digits_and_letters(\"123456\"))\nprint(num_of_digits_and_letters(\"123456\""
    },
    {
      "rank": 86,
      "score": 3.0,
      "candidate": "def count_digit_letters(string):\n    return len(string) - string.count(' ') - string.count('0')\n\n\ndef test_count_digit_letters():\n    assert count_digit_letters('123456789') == 3\n    assert count_digit_letters('') == 0\n    assert count_digit_letters('  ') == 0"
    },
    {
      "rank": 87,
      "score": 3.0,
      "candidate": "def digits_and_letters(str):\n    \"\"\"\n    :type str: str\n    :rtype: int\n    \"\"\"\n    return len(str) - str.count(\" \") - str.count(\".\") - str.count(\"0\") - str.count(\"-\")\n\n\ndef digits_and_letters_v2(str):\n    \"\"\"\n    :type str: str\n    :rtype: int\n    \"\"\"\n    return str.count(\" \") - str.count(\".\") - str.count(\"0\")\n\n\nif __name__ == \"__main__\":\n    print(digits_and_letters(\"311\"))\n    print(digits_and_letters(\"123456\"))\n    print(digits_and_letters(\"123\"))\n    print(digits_and_letters(\"123\"))\n    print(digits_and_letters(\"123\"))\n    print(digits_and_letters(\"123\"))"
    },
    {
      "rank": 88,
      "score": 3.0,
      "candidate": "def count_letters(str):\n    count = 0\n    for i in str:\n        if i.isdigit():\n            count += 1\n        else:\n            count += 1\n    return count\n\nprint(count_letters(\"a12345\"))\nprint(count_letters(\"12345\"))\nprint(count_letters(\"123\"))\nprint(count_letters(\"123\"))\nprint(count_letters(\"123\"))\nprint(count_letters(\"123\"))\nprint(count_letters(\"123456\"))\nprint(count_letters(\"123456\"))\nprint(count_letters(\"123456\"))\nprint(count_letters(\"123456\"))\nprint(count_letters(\"123456\"))\nprint(count_letters(\"123456\"))\nprint(count_letters(\"123456\"))\nprint(count_letters(\"123456\"))\nprint(count_letters(\"123456\"))\nprint(count_letters(\"123456\"))\nprint(count_letters(\"123456\"))\nprint(count_letters(\"123456\"))\nprint(count_letters(\"123456\"))\nprint(count_letters(\"123456\"))\nprint(count_letters(\"123456\"))\nprint(count_letters(\"123456\"))\nprint(count_letters(\"123456\"))\nprint(count_letters(\"123456\"))\nprint(count_letters(\"123456\"))\nprint(count_letters(\"123456\"))\nprint(count_letters(\"123456\"))\nprint(count_letters(\"123456\"))\nprint(count_letters(\"123456\"))\nprint(count_letters(\"123456\"))\nprint(count_letters(\"123456\"))\nprint(count_letters(\"123456\"))\nprint(count_letters(\"123456\"))\nprint(count_letters(\"123456\"))\nprint(count_letters(\"123456\"))\nprint(count_letters(\"123456\"))\nprint(count_letters(\"123456\"))\nprint(count_letters(\"123456\"))\nprint(count_letters(\"123456\"))\nprint(count_letters(\"123456\"))\nprint(count_letters(\"123456\"))\nprint(count_letters(\"123456\"))\nprint(count"
    },
    {
      "rank": 89,
      "score": 3.0,
      "candidate": "def get_letters(str):\n    return len(str)\n\n\ndef get_digits(str):\n    return len(str.replace(\".\", \"\"))\n\n\ndef get_letters_digits(str):\n    return get_letters(str) + get_digits(str)\n\n\nif __name__ == \"__main__\":\n    assert get_letters_digits(\"123\") == 2\n    assert get_letters_digits(\"abc\") == 1\n    assert get_letters_digits(\"123.456\") == 3\n    assert get_letters_digits(\"abc123\") == 4"
    },
    {
      "rank": 90,
      "score": 3.0,
      "candidate": "def count_digits(string):\n    return len(string) - string.count('.') - string.count('-')\n\ndef count_letters(string):\n    return len(string) - string.count('a') - string.count('A')\n\ndef test_count_digits():\n    assert count_digits('0') == 0\n    assert count_digits('1') == 0\n    assert count_digits('12') == 0\n    assert count_digits('1234') == 0\n    assert count_digits('123456') == 2\n    assert count_digits('12345') == 3\n    assert count_digits('12345678') == 5\n\ndef test_count_letters():\n    assert count_letters('a') == 0\n    assert count_letters('A') == 0\n    assert count_letters('12') == 0\n    assert count_letters('1234') == 0\n    assert count_letters('123456') == 0\n    assert count_letters('12345') == 3\n    assert count_letters('12345678') == 5"
    },
    {
      "rank": 91,
      "score": 3.0,
      "candidate": "def number_of_digits(str):\n    count_digits = 0\n    count_letters = 0\n\n    for i in str:\n        if i.isdigit():\n            count_digits += 1\n        else:\n            count_letters += 1\n\n    return count_digits, count_letters\n\nprint(number_of_digits(\"1234567890\"))"
    },
    {
      "rank": 92,
      "score": 3.0,
      "candidate": "def count_digits(s):\n    return len(s)\n\ndef count_letters(s):\n    return len(s.lower())\n\n\nprint(count_digits('123456'))\nprint(count_digits('1234567890'))\nprint(count_digits('1234567890123'))\nprint(count_digits('123456789012345'))\nprint(count_digits('123456789012345123'))\nprint(count_digits('123456789012345123123'))\nprint(count_digits('123456789012345123123123123'))\nprint(count_digits('123456789012345123123123123123'))\nprint(count_digits('123456789012345123123123123123'))\nprint(count_digits('123456789012345123123123123123'))\nprint(count_digits('123456789012345123123123123123'))\nprint(count_digits('123456789012345123123123123123'))\nprint(count_digits('123456789012345123123123123123'))\nprint(count_digits('123456789012345123123123123123'))\nprint(count_digits('123456789012345123123123123123'))\nprint(count_digits('123456789012345123123123123'))\nprint(count_digits('123456789012345123123123123'))\nprint(count_digits('123456789012345123123123123'))\nprint(count_digits('123456789012345123123123'))\nprint(count_digits('123456789012345123123123'))\nprint(count_digits('123456789012345123123'))\nprint(count_digits('123456789012345123'))\nprint(count_digits('123456789012345123'))\nprint(count_digits('123456789012345123'))\nprint(count_digits('123456789012345123123'))\nprint(count_digits('123456789012345123123'))\nprint(count_digits('123456789012345123123'))\nprint(count_digits('123456789012345123123'))\nprint(count_digits('123456789012345123123'))\nprint(count_digits('123456789012345123123'))\nprint(count_digits('123456789"
    },
    {
      "rank": 93,
      "score": 3.0,
      "candidate": "def count_letters(s):\n    # Write your code here.\n    return len(s), len(s.upper())\n\nprint(count_letters(\"abc\"))"
    },
    {
      "rank": 94,
      "score": 3.0,
      "candidate": "def num_digits_and_letters(str):\n    return len(str) - str.count('0') - str.count('1') - str.count('2') - str.count('3') - str.count('4') - str.count('5') - str.count('6') - str.count('7') - str.count('8') - str.count('9')\n\n\nprint(num_digits_and_letters('123'))"
    },
    {
      "rank": 95,
      "score": 3.0,
      "candidate": "def count_digits(s):\n    count = 0\n    for char in s:\n        if char.isdigit():\n            count += 1\n    return count\n\ndef count_letters(s):\n    count = 0\n    for char in s:\n        if char.isalpha():\n            count += 1\n    return count\n\nprint(count_digits(\"1234567890\"))\nprint(count_letters(\"abcd\"))\nprint(count_digits(\"1234567890\"))\nprint(count_letters(\"abcd\"))\nprint(count_digits(\"1234567890\"))\nprint(count_letters(\"abcd\"))\nprint(count_digits(\"1234567890\"))\nprint(count_letters(\"1234567890\"))\nprint(count_digits(\"1234567890\"))\nprint(count_letters(\"1234567890\"))\nprint(count_letters(\"1234567890\"))\nprint(count_digits(\"1234567890\"))\nprint(count_letters(\"1234567890\"))\nprint(count_digits(\"1234567890\"))\nprint(count_letters(\"1234567890\"))\nprint(count_digits(\"1234567890\"))\nprint(count_letters(\"1234567890\"))\nprint(count_digits(\"1234567890\"))\nprint(count_letters(\"1234567890\"))\nprint(count_digits(\"1234567890\"))\nprint(count_letters(\"1234567890\"))\nprint(count_digits(\"1234567890\"))\nprint(count_letters(\"1234567890\"))\nprint(count_letters(\"1234567890\"))\nprint(count_digits(\"1234567890\"))\nprint(count_letters(\"1234567890\"))\nprint(count_letters(\"1234567890\"))\nprint(count_digits(\"1234567890\"))\nprint(count_letters(\"1234567890\"))\nprint(count_digits(\"1234567890\"))\nprint(count_letters(\"1234567890\"))\nprint(count_letters(\"1234567890\"))\nprint(count_digits(\"1234567890\"))\nprint(count_letters(\"1234567890\"))\nprint(count_digits(\"1234567890\"))\nprint(count_letters(\"1234567890\"))\nprint(count_"
    },
    {
      "rank": 96,
      "score": 3.0,
      "candidate": "def digit_letter(s):\n    count = 0\n    for i in s:\n        if i.isdigit():\n            count += 1\n        else:\n            count += 1\n            if i.isalpha():\n                count += 1\n    return count\n\nif __name__ == '__main__':\n    assert digit_letter('123') == 1\n    assert digit_letter('1234') == 2\n    assert digit_letter('123abc') == 3\n    assert digit_letter('abc123') == 4\n    assert digit_letter('abc1234') == 5\n    assert digit_letter('123abcabc') == 6\n    assert digit_letter('abc123abcabc') == 7\n    assert digit_letter('123abcabcabc') == 8\n    assert digit_letter('abc123abcabcabc') == 9\n    assert digit_letter('') == 0\n    assert digit_letter('a') == 0\n    assert digit_letter('abc') == 0\n    assert digit_letter('123abc') == 0\n    assert digit_letter('abc123abc') == 0\n    assert digit_letter('abc123abc123') == 0\n    assert digit_letter('abc123abc123abc') == 0\n    assert digit_letter('abc123abc123abc123') == 0\n    assert digit_letter('abc123abc123abc123abc') == 0\n    assert digit_letter('abc123abc123abc123abc123') == 0\n    assert digit_letter('abc123abc123abc123abc123abc123') == 0\n    assert digit_letter('abc123abc123abc123abc123abc123') == 0\n    assert digit_letter('abc123abc123abc123abc123abc123abc123abc123') == 0\n    assert digit_letter('abc123abc123abc123abc123abc123abc123abc123abc') == 0\n    assert digit_letter('abc123abc123abc123abc123abc123abc123abc123') == 0\n    assert digit_letter('abc123abc123abc123abc123abc123abc123abc123abc123') == 0\n    assert digit_letter('abc123abc123abc123abc123abc123abc123abc123abc123') == 0\n    assert digit_letter('abc123abc123abc123abc123abc123abc123abc123abc') =="
    },
    {
      "rank": 97,
      "score": 3.0,
      "candidate": "def number_of_digits_and_letters(string):\n    count = 0\n    for c in string:\n        if c.isdigit():\n            count += 1\n        elif c.isalpha():\n            count += 1\n    return count\n\n\nprint(number_of_digits_and_letters(\"0123456789\"))\nprint(number_of_digits_and_letters(\"a\"))\nprint(number_of_digits_and_letters(\"\"))\nprint(number_of_digits_and_letters(\"abcd\"))"
    },
    {
      "rank": 98,
      "score": 3.0,
      "candidate": "def count_digits(s):\n    return len(s) - s.count('.') - s.count('-') - s.count(' ')\n\ndef count_letters(s):\n    return len(s) - s.count('a') - s.count('e') - s.count('i') - s.count('o') - s.count('u')\n\n\nif __name__ == '__main__':\n    assert count_digits(\"3\") == 0\n    assert count_digits(\"-3\") == 0\n    assert count_digits(\"3.5\") == 0\n    assert count_digits(\"5.3\") == 0\n    assert count_digits(\"\") == 0\n    assert count_digits(\"a\") == 0\n    assert count_digits(\"a1\") == 0\n    assert count_digits(\"a-1\") == 0\n    assert count_digits(\"1a\") == 0\n    assert count_digits(\"1a-1\") == 0\n    assert count_digits(\"1a-1.1\") == 0\n    assert count_digits(\"1a-1.2\") == 0\n    assert count_digits(\"-1a-1\") == 0\n    assert count_digits(\"1a-1.2\") == 0\n    assert count_digits(\"a-1.2\") == 0\n    assert count_digits(\"a-1.2.1\") == 0\n    assert count_digits(\"a-1.2.2\") == 0\n    assert count_digits(\"a-1.2.3\") == 0\n    assert count_digits(\"a-1.2.4\") == 0\n    assert count_digits(\"a-1.2.5\") == 0\n    assert count_digits(\"a-1.2.6\") == 0\n    assert count_digits(\"a-1.2.7\") == 0\n    assert count_digits(\"a-1.2.8\") == 0\n    assert count_digits(\"a-1.2.9\") == 0\n    assert count_digits(\"a-1.2.10\") == 0\n    assert count_digits(\"a-1.2.11\") == 0\n    assert count_digits(\"a-1.2.12\") == 0\n    assert count_digits(\"a-"
    },
    {
      "rank": 99,
      "score": 3.0,
      "candidate": "def digit_letters(s):\n    return len(list(set(s)))\n\n\ndef main():\n    assert digit_letters(\"123\") == 1\n    assert digit_letters(\"1234\") == 2\n    assert digit_letters(\"123456\") == 3\n    assert digit_letters(\"12345678\") == 4\n    assert digit_letters
    },
    {
      "rank": 100,
      "score": 3.0,
      "candidate": "def count_digits_and_letters(str):\n    # Your code here\n    return len(str)"
    }
  ]
}