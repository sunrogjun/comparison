{
  "timestamp": "2025-09-14T15:59:30.125535",
  "method": "improved_llm_judge",
  "judge_model": "codellama/CodeLlama-7b-Python-hf",
  "target_model": "codet5-770m",
  "dataset": "mbpp",
  "problem_number": 481,
  "total_candidates": 100,
  "results": [
    {
      "rank": 1,
      "score": 10.0,
      "candidate": "def binary_search(array, element):\n    low = 0\n    high = len(array) - 1\n    while low <= high:\n        mid = (low + high) // 2\n        if array[mid] == element:\n            return mid\n        elif element < array[mid]:\n            high = mid - 1\n        else:\n            low = mid + 1\n    return None\n\n\nif __name__ == \"__main__\":\n    array = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 178, 179, 181, 182, 183, 184, 18"
    },
    {
      "rank": 2,
      "score": 10.0,
      "candidate": "def search(array, target):\n    if not array:\n        return False\n    lo = 0\n    hi = len(array) - 1\n    while lo <= hi:\n        mid = (lo + hi) // 2\n        if array[mid] == target:\n            return mid\n        elif array[mid] < target:\n            lo = mid + 1\n        else:\n            hi = mid - 1\n    return False\n\n\ndef main():\n    array = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    target = 5\n    print(search(array, target))\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 3,
      "score": 10.0,
      "candidate": "def binary_search(arr, element):\n    low = 0\n    high = len(arr) - 1\n    while low <= high:\n        mid = (low + high) // 2\n        if arr[mid] == element:\n            return mid\n        elif arr[mid] > element:\n            high = mid - 1\n        else:\n            low = mid + 1\n    return -1\n\n\narr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nelement = 10\n\nprint(binary_search(arr, element))"
    },
    {
      "rank": 4,
      "score": 10.0,
      "candidate": "def binary_search(arr, element):\n    start = 0\n    end = len(arr) - 1\n    while start <= end:\n        mid = (start + end) // 2\n        if arr[mid] == element:\n            return mid\n        elif arr[mid] < element:\n            end = mid - 1\n        else:\n            start = mid + 1\n    return -1\n\n\ndef main():\n    print(binary_search([1, 2, 3, 4, 5, 6, 7], 5))\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 5,
      "score": 10.0,
      "candidate": "def binary_search(nums, element):\n    if len(nums) == 0:\n        return False\n\n    left = 0\n    right = len(nums) - 1\n\n    while left <= right:\n        mid = (left + right) // 2\n        if nums[mid] == element:\n            return True\n\n        if nums[mid] > element:\n            right = mid - 1\n        else:\n            left = mid + 1\n\n    return False\n\n\nif __name__ == \"__main__\":\n    test_cases = [\n        [1, 3, 5, 7, 9, 11],\n        [2, 4, 6, 8, 10],\n        [2, 4, 6, 8, 10, 12],\n        [2, 4, 6, 8, 10, 12, 15, 20],\n        [2, 4, 6, 8, 10, 12, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70, 75, 80, 85, 90, 95, 99, 99.9, 99.9, 99.9, 99.9, 99.9, 99.9, 99.9, 99.9, 99.9, 99.9, 99.9, 99.9, 99.9, 99.9, 99.9, 99.9, 99.9, 99.9, 99.9, 99.9, 99.9, 99.9, 99.9, 99.9, 99.9, 99.9, 99.9, 99.9, 99.9, 99.9, 99.9, 99.9, 99.9, 99.9, 99.9, 99.9, 99.9, 99.9, 99.9, 99.9, 99.9, 99.9, 99.9, 99.9, 99.9, 99.9, 99.9, 99.9, 99.9, 99.9, 99.9, 99.9, 99.9, 99.9, 99.9, 99.9, 99.9, 99.9, 99.9, 99.9, 99.9, 99.9, 99.9, 99.9, 99.9, 99.9, 99.9, 99.9"
    },
    {
      "rank": 6,
      "score": 10.0,
      "candidate": "class Solution(object):\n    def search(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: bool\n        \"\"\"\n        if len(nums) == 0:\n            return False\n\n        low = 0\n        high = len(nums) - 1\n\n        while low <= high:\n            mid = (low + high) // 2\n            if nums[mid] == target:\n                return True\n            elif nums[mid] > target:\n                high = mid - 1\n            else:\n                low = mid + 1\n\n        return False"
    },
    {
      "rank": 7,
      "score": 10.0,
      "candidate": "def search(arr, n, e):\n    low = 0\n    high = n - 1\n    while low <= high:\n        mid = (low + high) // 2\n        if arr[mid] == e:\n            return mid\n        elif arr[mid] < e:\n            high = mid - 1\n        else:\n            low = mid + 1\n\n    return -1\n\n\ndef main():\n    arr = [3, 5, 6, 7, 8, 10]\n    print(search(arr, len(arr), 7))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 8,
      "score": 10.0,
      "candidate": "def binary_search(arr, target):\n    low = 0\n    high = len(arr) - 1\n    while low <= high:\n        mid = (low + high) // 2\n        if arr[mid] == target:\n            return mid\n        elif arr[mid] > target:\n            high = mid - 1\n        else:\n            low = mid + 1\n    return -1\n\n\narr = [2, 3, 5, 6, 9, 11, 12]\ntarget = 12\nprint(binary_search(arr, target))"
    },
    {
      "rank": 9,
      "score": 10.0,
      "candidate": "def search(arr, x):\n    low, high = 0, len(arr) - 1\n    while low <= high:\n        mid = low + (high - low) // 2\n        if arr[mid] == x:\n            return mid\n        elif arr[mid] > x:\n            high = mid - 1\n        else:\n            low = mid + 1\n    return -1\n\n\ndef main():\n    arr = [1, 2, 3, 4, 5, 6]\n    print(search(arr, 5))\n    print(search(arr, 7))\n    print(search(arr, 8))\n    print(search(arr, 9))\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 10,
      "score": 10.0,
      "candidate": "def binary_search(arr, element):\n    low = 0\n    high = len(arr) - 1\n    mid = (low + high) // 2\n\n    if arr[mid] == element:\n        return mid\n    if arr[mid] < element:\n        return binary_search(arr, element)\n    return binary_search(arr, arr[mid])\n\n\nif __name__ == '__main__':\n    print(binary_search([1, 2, 3, 4, 5, 6], 3))\n    print(binary_search([1, 2, 3, 4, 5, 6], 4))\n    print(binary_search([1, 2, 3, 4, 5, 6], 7))\n    print(binary_search([1, 2, 3, 4, 5, 6], 8))"
    },
    {
      "rank": 11,
      "score": 10.0,
      "candidate": "def search(arr, n, e):\n    low = 0\n    high = n-1\n\n    while low <= high:\n        mid = (low + high) // 2\n\n        if arr[mid] == e:\n            return mid\n\n        if arr[mid] < e:\n            low = mid + 1\n        else:\n            high = mid - 1\n\n    return -1\n\narr = [1,2,3,4,5,6,7,8,9,10]\nprint(search(arr, len(arr), 5))"
    },
    {
      "rank": 12,
      "score": 10.0,
      "candidate": "def binary_search(arr, n, e):\n    lo = 0\n    hi = len(arr)-1\n    while lo <= hi:\n        mid = (lo+hi)//2\n        if arr[mid] == e:\n            return mid\n        elif e < arr[mid]:\n            hi = mid - 1\n        else:\n            lo = mid + 1\n    return -1\n\n\narr = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\nn = len(arr)\nprint(binary_search(arr, n, 6))"
    },
    {
      "rank": 13,
      "score": 10.0,
      "candidate": "def binary_search(nums, target):\n    \"\"\"\n    :type nums: List[int]\n    :type target: int\n    :rtype: int\n    \"\"\"\n    if len(nums) == 0:\n        return -1\n    low, high = 0, len(nums) - 1\n    while low <= high:\n        mid = (low + high) // 2\n        if nums[mid] == target:\n            return mid\n        elif nums[mid] < target:\n            low = mid + 1\n        else:\n            high = mid - 1\n    return -1\n\n\nif __name__ == \"__main__\":\n    print(binary_search([4, 5, 6, 7, 8, 9], 9))\n    print(binary_search([4, 5, 6, 7, 8, 9], 7))\n    print(binary_search([4, 5, 6, 7, 8, 9], 8))\n    print(binary_search([4, 5, 6, 7, 8, 9], 6))"
    },
    {
      "rank": 14,
      "score": 10.0,
      "candidate": "def search(arr, element):\n    low = 0\n    high = len(arr) - 1\n    while low <= high:\n        mid = (low + high) // 2\n        if arr[mid] == element:\n            return mid\n        if arr[mid] > element:\n            high = mid - 1\n        else:\n            low = mid + 1\n    return -1\n\n\nif __name__ == '__main__':\n    arr = [3, 5, 7, 9, 11, 13]\n    print(search(arr, 13))"
    },
    {
      "rank": 15,
      "score": 10.0,
      "candidate": "def binary_search(arr, target):\n    low = 0\n    high = len(arr) - 1\n    mid = (low + high) // 2\n    if arr[mid] == target:\n        return mid\n    elif arr[mid] < target:\n        return binary_search(arr, target)\n    else:\n        return binary_search(arr, target)\n\ndef main():\n    arr = [1, 3, 5, 7, 9, 11, 13]\n    print(binary_search(arr, 13))\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 16,
      "score": 10.0,
      "candidate": "def binary_search(arr, target):\n    low = 0\n    high = len(arr) - 1\n\n    while low <= high:\n        mid = (low + high) // 2\n        if arr[mid] == target:\n            return mid\n        elif arr[mid] < target:\n            low = mid + 1\n        else:\n            high = mid - 1\n\n    return -1\n\n\ndef main():\n    print(binary_search([2, 3, 4, 5, 6, 7], 6))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 17,
      "score": 10.0,
      "candidate": "def binary_search(arr, n, x):\n    low = 0\n    high = len(arr) - 1\n\n    while low <= high:\n        mid = (low + high) // 2\n        if arr[mid] == x:\n            return mid\n        elif arr[mid] < x:\n            low = mid + 1\n        else:\n            high = mid - 1\n    return -1\n\n\nif __name__ == \"__main__\":\n    print(binary_search([1, 2, 3, 4, 5, 6, 7, 8, 9], 8, 8))\n    print(binary_search([1, 2, 3, 4, 5, 6, 7, 8, 9], 5, 8))\n    print(binary_search([1, 2, 3, 4, 5, 6, 7, 8, 9], 2, 8))\n    print(binary_search([1, 2, 3, 4, 5, 6, 7, 8, 9], 1, 8))"
    },
    {
      "rank": 18,
      "score": 10.0,
      "candidate": "def binary_search(arr, target):\n    if len(arr) == 0:\n        return False\n    start = 0\n    end = len(arr) - 1\n    while start <= end:\n        mid = start + (end - start)//2\n        if arr[mid] == target:\n            return True\n        elif arr[mid] > target:\n            end = mid - 1\n        else:\n            start = mid + 1\n    return False\n\n\nif __name__ == \"__main__\":\n    arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    print(binary_search(arr, 7))"
    },
    {
      "rank": 19,
      "score": 10.0,
      "candidate": "def binary_search(arr, x):\n    low = 0\n    high = len(arr) - 1\n    while low <= high:\n        mid = (low + high) // 2\n        if arr[mid] == x:\n            return mid\n        elif arr[mid] > x:\n            high = mid - 1\n        else:\n            low = mid + 1\n\n    return -1\n\n\nif __name__ == \"__main__\":\n    arr = [1, 2, 3, 4, 5, 6, 7]\n    x = 7\n\n    print(binary_search(arr, x))"
    },
    {
      "rank": 20,
      "score": 9.18535571824802,
      "candidate": "def binarySearch(arr, target):\n    if len(arr) == 0:\n        return -1\n\n    left = 0\n    right = len(arr) - 1\n    mid = (left + right) // 2\n    if arr[mid] == target:\n        return mid\n    elif arr[mid] < target:\n        return binarySearch(arr, target)\n    else:\n        return binarySearch(arr, target - arr[mid])\n\n\nif __name__ == \"__main__\":\n    arr = [2, 3, 4, 5, 6, 7, 8, 9, 10]\n    target = 10\n    result = binarySearch(arr, target)\n    if result == -1:\n        print(\"Element is not present in the array.\")\n    else:\n        print(\"Element is present at index\", result)"
    },
    {
      "rank": 21,
      "score": 9.076129570647401,
      "candidate": "def binary_search(arr, element):\n    low = 0\n    high = len(arr) - 1\n\n    while low <= high:\n        mid = (low + high) // 2\n\n        if arr[mid] == element:\n            return mid\n        elif element < arr[mid]:\n            high = mid - 1\n        else:\n            low = mid + 1\n    return None\n\n\narr = [1, 2, 3, 4, 5, 6, 7, 8, 9]\nprint(binary_search(arr, 5))"
    },
    {
      "rank": 22,
      "score": 9.030703952013067,
      "candidate": "def binary_search(arr, elem, low, high):\n    if low > high:\n        return False\n\n    mid = (low + high) // 2\n\n    if arr[mid] == elem:\n        return True\n    elif arr[mid] > elem:\n        if elem < arr[mid]:\n            return binary_search(arr, elem, low, mid - 1)\n        else:\n            return binary_search(arr, elem, mid + 1, high)\n    else:\n        if elem > arr[mid]:\n            return binary_search(arr, elem, mid + 1, high)\n        else:\n            return binary_search(arr, elem, low, mid - 1)\n\n\narr = [1, 2, 3, 4, 5, 6, 7]\nprint(binary_search(arr, 3, 0, len(arr) - 1))"
    },
    {
      "rank": 23,
      "score": 8.986940455872773,
      "candidate": "def binary_search(arr, x):\n    low = 0\n    high = len(arr) - 1\n    while low <= high:\n        mid = (low + high) // 2\n        if x == arr[mid]:\n            return mid\n        elif x < arr[mid]:\n            low = mid + 1\n        else:\n            high = mid - 1\n    return -1\n\n\narr = [1, 2, 3, 4, 5, 6, 7, 8, 9]\nx = int(input(\"Enter element: \"))\nresult = binary_search(arr, x)\nif result == -1:\n    print(\"Element not found\")\nelse:\n    print(\"Element is present at index \", result)"
    },
    {
      "rank": 24,
      "score": 8.867293334932011,
      "candidate": "def binarySearch(arr, target):\n    left, right = 0, len(arr) - 1\n    while left <= right:\n        mid = left + (right - left) // 2\n        if arr[mid] == target:\n            return mid\n        elif arr[mid] > target:\n            right = mid - 1\n        else:\n            left = mid + 1\n    return -1\n\n\nif __name__ == \"__main__\":\n    print(binarySearch([1, 2, 3, 4, 5, 6, 7], 7))"
    },
    {
      "rank": 25,
      "score": 8.856844253442825,
      "candidate": "def binary_search(arr, target):\n    low = 0\n    high = len(arr) - 1\n    while low <= high:\n        mid = low + (high - low) // 2\n        if arr[mid] == target:\n            return mid\n        elif arr[mid] < target:\n            low = mid + 1\n        else:\n            high = mid - 1\n    return -1\n\n\nif __name__ == \"__main__\":\n    print(binary_search([1, 2, 3, 4, 5], 5))\n    print(binary_search([1, 2, 3, 4, 5], 6))"
    },
    {
      "rank": 26,
      "score": 8.845857603601255,
      "candidate": "def binary_search(arr, element):\n    low = 0\n    high = len(arr) - 1\n\n    while low <= high:\n        mid = (low + high) // 2\n        if arr[mid] == element:\n            return mid\n        elif arr[mid] > element:\n            high = mid - 1\n        else:\n            low = mid + 1\n\n    return -1\n\n\nprint(binary_search([1, 2, 3, 4, 5, 6, 7], 3))\nprint(binary_search([1, 2, 3, 4, 5, 6, 7], 7))"
    },
    {
      "rank": 27,
      "score": 8.834662495293388,
      "candidate": "def binary_search(arr, element):\n    low = 0\n    high = len(arr) - 1\n    while low <= high:\n        mid = (low + high) // 2\n        if arr[mid] == element:\n            return mid\n        elif arr[mid] > element:\n            high = mid - 1\n        else:\n            low = mid + 1\n    return -1\n\n\nif __name__ == '__main__':\n    arr = [1, 3, 5, 7, 9]\n    print(binary_search(arr, 3))"
    },
    {
      "rank": 28,
      "score": 8.77346240928572,
      "candidate": "def binary_search(array, element):\n    if array == None or array == []:\n        return None\n    if len(array) == 1:\n        return array.index(element)\n    if len(array) == 2:\n        if array[0] == element:\n            return 0\n        return 1\n    mid = len(array) // 2\n    if array[mid] == element:\n        return mid\n    if array[mid] > element:\n        return binary_search(array[:mid], element)\n    else:\n        return binary_search(array[mid + 1:], element)\n\n\nprint(binary_search([1, 2, 3, 4, 5, 6, 7], 3))\nprint(binary_search([1, 2, 3, 4, 5, 6, 7], 4))\nprint(binary_search([1, 2, 3, 4, 5, 6, 7], 7))\nprint(binary_search([1, 2, 3, 4, 5, 6, 7], 10))\nprint(binary_search([1, 2, 3, 4, 5, 6, 7], 15))"
    },
    {
      "rank": 29,
      "score": 8.773205446194535,
      "candidate": "def binary_search(arr, element):\n    left = 0\n    right = len(arr) - 1\n\n    while left <= right:\n        mid = (left + right) // 2\n\n        if arr[mid] == element:\n            return mid\n\n        elif arr[mid] < element:\n            left = mid + 1\n\n        else:\n            right = mid - 1\n\n    return None\n\n\nif __name__ == '__main__':\n    arr = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    element = 8\n\n    print(binary_search(arr, element))"
    },
    {
      "rank": 30,
      "score": 8.751418336105608,
      "candidate": "def search(arr, e):\n    if len(arr) == 0:\n        return False\n\n    low = 0\n    high = len(arr) - 1\n\n    while low <= high:\n        mid = (low + high) // 2\n\n        if arr[mid] == e:\n            return True\n        elif arr[mid] > e:\n            high = mid - 1\n        else:\n            low = mid + 1\n\n    return False\n\nif __name__ == \"__main__\":\n    arr = [3, 5, 7, 11, 13]\n    e = 13\n    print(search(arr, e))"
    },
    {
      "rank": 31,
      "score": 8.703519859684722,
      "candidate": "def search(arr, element):\n    start = 0\n    end = len(arr) - 1\n    while start <= end:\n        mid = (start + end) // 2\n        if arr[mid] == element:\n            return mid\n        elif arr[mid] < element:\n            start = mid + 1\n        else:\n            end = mid - 1\n\n    return None\n\n\nprint(search([1, 2, 3, 4, 5, 6], 6))"
    },
    {
      "rank": 32,
      "score": 8.689114959980792,
      "candidate": "def binary_search(arr, item):\n    left = 0\n    right = len(arr) - 1\n    while left <= right:\n        mid = left + (right - left) // 2\n        if arr[mid] == item:\n            return mid\n        elif arr[mid] > item:\n            right = mid - 1\n        else:\n            left = mid + 1\n    return -1\n\n\nprint(binary_search([1, 2, 3, 4, 5, 6], 3))"
    },
    {
      "rank": 33,
      "score": 8.661468461878831,
      "candidate": "def search(arr, x):\n    low = 0\n    high = len(arr) - 1\n    while low <= high:\n        mid = (low + high) // 2\n        if arr[mid] == x:\n            return mid\n        elif arr[mid] > x:\n            high = mid - 1\n        else:\n            low = mid + 1\n    return None\n\n\nprint(search([1, 2, 3, 4, 5, 6, 7], 5))"
    },
    {
      "rank": 34,
      "score": 8.643130105648938,
      "candidate": "def binarySearch(arr, target, low, high):\n    if high >= low:\n        mid = (high + low) // 2\n\n        if arr[mid] == target:\n            return mid\n        elif arr[mid] > target:\n            return binarySearch(arr, target, mid + 1, high)\n        else:\n            return binarySearch(arr, target, low, mid - 1)\n    else:\n        return -1\n\n\narr = [2, 3, 4, 5, 6, 7, 8, 9]\ntarget = 8\nprint(binarySearch(arr, target, 0, len(arr) - 1))"
    },
    {
      "rank": 35,
      "score": 8.58189176027183,
      "candidate": "def binary_search(arr, target):\n    left = 0\n    right = len(arr) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == target:\n            return mid\n        elif arr[mid] > target:\n            right = mid - 1\n        else:\n            left = mid + 1\n    return -1\n\n\narr = [1, 2, 3, 4, 5, 6, 7, 8]\nprint(binary_search(arr, 8))"
    },
    {
      "rank": 36,
      "score": 8.57694981700587,
      "candidate": "def binary_search(array, element):\n    if len(array) == 1:\n        return array[0] == element\n    else:\n        return array[0] < element or array[len(array) - 1] > element\n\n\ndef main():\n    print(binary_search([1, 3, 5, 7, 9], 3))\n    print(binary_search([1, 3, 5, 7, 9], 6))\n    print(binary_search([1, 3, 5, 7, 9], 7))\n\n\nmain()"
    },
    {
      "rank": 37,
      "score": 8.574078032202362,
      "candidate": "def binary_search(arr, val):\n    low = 0\n    high = len(arr) - 1\n    mid = (low + high) // 2\n\n    if arr[mid] == val:\n        return mid\n    elif arr[mid] > val:\n        return binary_search(arr, val)\n    else:\n        return binary_search(arr, val - arr[mid])\n\n\nif __name__ == \"__main__\":\n    arr = [1, 3, 5, 7, 9]\n    print(binary_search(arr, 3))\n    print(binary_search(arr, 5))\n    print(binary_search(arr, 7))\n    print(binary_search(arr, 9))\n    print(binary_search(arr, 0))\n    print(binary_search(arr, 9))"
    },
    {
      "rank": 38,
      "score": 8.512991756920433,
      "candidate": "def binary_search(arr, e):\n    left, right = 0, len(arr) - 1\n    while left <= right:\n        mid = left + (right - left)//2\n        if arr[mid] == e:\n            return mid\n        elif arr[mid] > e:\n            right = mid - 1\n        else:\n            left = mid + 1\n    return None\n\n\nif __name__ == \"__main__\":\n    arr = [2, 3, 5, 7, 9, 11, 13, 15]\n    print(binary_search(arr, 13))"
    },
    {
      "rank": 39,
      "score": 8.479263271739713,
      "candidate": "def binary_search(arr, element):\n    left, right = 0, len(arr)-1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == element:\n            return mid\n        elif arr[mid] > element:\n            right = mid - 1\n        else:\n            left = mid + 1\n    return -1\n\n\narr = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\nprint(binary_search(arr, 7))"
    },
    {
      "rank": 40,
      "score": 8.471455726319615,
      "candidate": "def binary_search(arr, element):\n    low = 0\n    high = len(arr) - 1\n    while low <= high:\n        mid = (low + high) // 2\n        if arr[mid] == element:\n            return mid\n        elif arr[mid] < element:\n            high = mid - 1\n        else:\n            low = mid + 1\n    return -1\n\n\nif __name__ == \"__main__\":\n    print(binary_search([1, 2, 3, 4, 5, 6], 5))"
    },
    {
      "rank": 41,
      "score": 8.398185131489148,
      "candidate": "def binarySearch(arr, elem):\n    if len(arr) == 0:\n        return False\n    left = 0\n    right = len(arr) - 1\n    mid = (left + right) // 2\n    if arr[mid] == elem:\n        return True\n    elif arr[mid] < elem:\n        return binarySearch(arr[:mid], elem)\n    else:\n        return binarySearch(arr[mid+1:], elem)\n\n\nprint(binarySearch([1, 2, 3, 4, 5, 6, 7], 7))\nprint(binarySearch([1, 2, 3, 4, 5, 6, 7], 2))\nprint(binarySearch([1, 2, 3, 4, 5, 6, 7], 6))"
    },
    {
      "rank": 42,
      "score": 8.35413392424983,
      "candidate": "def binary_search(arr, target):\n    low = 0\n    high = len(arr) - 1\n    mid = int((low + high) / 2)\n\n    if arr[mid] == target:\n        return mid\n    elif arr[mid] > target:\n        return binary_search(arr, target)\n    elif arr[mid] < target:\n        return binary_search(arr, target)\n    else:\n        return -1\n\n\nif __name__ == '__main__':\n    print(binary_search([1, 2, 3, 4, 5, 6, 7], 5))"
    },
    {
      "rank": 43,
      "score": 8.327766944527134,
      "candidate": "class Solution(object):\n    def search(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: bool\n        \"\"\"\n        low = 0\n        high = len(nums) - 1\n\n        while low <= high:\n            mid = (low + high) // 2\n            if nums[mid] == target:\n                return True\n            elif nums[mid] < target:\n                low = mid + 1\n            else:\n                high = mid - 1\n\n        return False"
    },
    {
      "rank": 44,
      "score": 8.32400296620873,
      "candidate": "def binary_search(array, target):\n    left = 0\n    right = len(array) - 1\n\n    while left <= right:\n        mid = (left + right) // 2\n\n        if array[mid] == target:\n            return mid\n        elif array[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n\n    return -1\n\n\ndef main():\n    array = [1, 2, 3, 4, 5, 6, 7]\n    target = 5\n\n    print(binary_search(array, target))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 45,
      "score": 8.25907736731946,
      "candidate": "def search(arr, element):\n    low = 0\n    high = len(arr) - 1\n    mid = (low + high) // 2\n\n    if arr[mid] == element:\n        return mid\n    elif arr[mid] < element:\n        return search(arr, element)\n    else:\n        return search(arr, arr[mid])\n\n\nif __name__ == \"__main__\":\n    print(search([1, 2, 3, 4, 5, 6], 6))"
    },
    {
      "rank": 46,
      "score": 8.258152543016342,
      "candidate": "def binary_search(arr, elem):\n    left = 0\n    right = len(arr) - 1\n\n    while left <= right:\n        mid = (left + right) // 2\n\n        if arr[mid] == elem:\n            return mid\n\n        elif arr[mid] < elem:\n            left = mid + 1\n\n        else:\n            right = mid - 1\n\n    return -1\n\n\nif __name__ == \"__main__\":\n    print(binary_search([1, 2, 3, 4, 5, 6, 7], 7))"
    },
    {
      "rank": 47,
      "score": 8.256654690070464,
      "candidate": "def binary_search(array, value):\n    if array is None or len(array) == 0:\n        return False\n\n    left = 0\n    right = len(array) - 1\n\n    while left <= right:\n        mid = left + (right - left) // 2\n        if array[mid] == value:\n            return mid\n        elif array[mid] < value:\n            left = mid + 1\n        else:\n            right = mid - 1\n\n    return False\n\nif __name__ == '__main__':\n    print(binary_search([1,2,3,4,5,6,7,8,9,10], 10))\n    print(binary_search([1,2,3,4,5,6,7,8,9,10], 2))\n    print(binary_search([1,2,3,4,5,6,7,8,9,10], 7))\n    print(binary_search([1,2,3,4,5,6,7,8,9,10], 2))\n    print(binary_search([1,2,3,4,5,6,7,8,9,10], 9))\n    print(binary_search([1,2,3,4,5,6,7,8,9,10], 3))\n    print(binary_search([1,2,3,4,5,6,7,8,9,10], 0))\n    print(binary_search([1,2,3,4,5,6,7,8,9,10], -10))\n    print(binary_search([1,2,3,4,5,6,7,8,9,10], 9))\n    print(binary_search([1,2,3,4,5,6,7,8,9,10], 1))\n    print(binary_search([1,2,3,4,5,6,7,8,9,10], 7))\n    print(binary_search([1,2,3,4,5,6,7,8,9,10], -3))"
    },
    {
      "rank": 48,
      "score": 8.226691354634372,
      "candidate": "def binary_search(arr, x):\n    low = 0\n    high = len(arr) - 1\n\n    while low <= high:\n        mid = (low + high) // 2\n        if arr[mid] == x:\n            return mid\n        if arr[mid] > x:\n            high = mid - 1\n        else:\n            low = mid + 1\n\n    return -1\n\n\nif __name__ == \"__main__\":\n    arr = [2, 3, 4, 5, 6, 7, 8, 9]\n    print(binary_search(arr, 4))"
    },
    {
      "rank": 49,
      "score": 8.204188968476922,
      "candidate": "def binary_search(arr, val, low=0, high=None):\n    if high is None:\n        high = len(arr) - 1\n    if low > high:\n        return -1\n    mid = int((low + high) / 2)\n    if arr[mid] == val:\n        return mid\n    elif val < arr[mid]:\n        return binary_search(arr, val, low, mid - 1)\n    else:\n        return binary_search(arr, val, mid + 1, high)\n\n\nif __name__ == '__main__':\n    print(binary_search([1, 2, 3, 4, 5], 5))"
    },
    {
      "rank": 50,
      "score": 8.203761799552685,
      "candidate": "def binary_search(arr, target):\n    start = 0\n    end = len(arr) - 1\n    while start <= end:\n        mid = (start + end) // 2\n        if arr[mid] == target:\n            return mid\n        elif arr[mid] > target:\n            end = mid - 1\n        else:\n            start = mid + 1\n    return -1\n\ndef main():\n    arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    print(binary_search(arr, 9))\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 51,
      "score": 8.173675644322062,
      "candidate": "def binary_search(array, element):\n    start = 0\n    end = len(array) - 1\n    while start <= end:\n        mid = (start + end) // 2\n        if array[mid] == element:\n            return mid\n        elif element < array[mid]:\n            start = mid + 1\n        else:\n            end = mid - 1\n    return -1\n\n\nif __name__ == '__main__':\n    array = [1, 2, 3, 4, 5, 6, 7]\n    element = 5\n    print(binary_search(array, element))"
    },
    {
      "rank": 52,
      "score": 8.156506761086561,
      "candidate": "def binary_search(array, target):\n    left = 0\n    right = len(array) - 1\n    mid = (left + right) // 2\n\n    if array[mid] == target:\n        return mid\n    elif array[mid] > target:\n        return binary_search(array, target)\n    else:\n        return binary_search(array, target - array[mid])\n\n\nprint(binary_search([1, 2, 3, 4, 5], 4))"
    },
    {
      "rank": 53,
      "score": 8.021360072862084,
      "candidate": "def binary_search(array, element):\n    left, right = 0, len(array) - 1\n    mid = (left + right) // 2\n    if array[mid] == element:\n        return mid\n    elif array[mid] > element:\n        return binary_search(array, element)\n    else:\n        return binary_search(array, array[mid])\n\n\nif __name__ == '__main__':\n    assert binary_search([1, 2, 3, 4, 5, 6, 7], 7) == 5\n    assert binary_search([1, 2, 3, 4, 5, 6, 7], 3) == 2\n    assert binary_search([1, 2, 3, 4, 5, 6, 7], 2) == 1\n    assert binary_search([1, 2, 3, 4, 5, 6, 7], 1) == 0\n    assert binary_search([1, 2, 3, 4, 5, 6, 7], 2) == 0"
    },
    {
      "rank": 54,
      "score": 7.913170024885073,
      "candidate": "def search(arr, target):\n    low = 0\n    high = len(arr) - 1\n\n    while low <= high:\n        mid = (low + high) // 2\n\n        if arr[mid] == target:\n            return mid\n\n        elif arr[mid] < target:\n            low = mid + 1\n        else:\n            high = mid - 1\n\n    return -1\n\n\nif __name__ == '__main__':\n    assert search([1, 2, 3, 4, 5, 6, 7], 6) == 2\n    assert search([1, 2, 3, 4, 5, 6, 7], 2) == -1\n    assert search([1, 2, 3, 4, 5, 6, 7], 1) == 0\n    assert search([1, 2, 3, 4, 5, 6, 7], 3) == -1\n    assert search([1, 2, 3, 4, 5, 6, 7], 4) == -1\n    assert search([1, 2, 3, 4, 5, 6, 7], 5) == 1\n    assert search([1, 2, 3, 4, 5, 6, 7], 6) == -1"
    },
    {
      "rank": 55,
      "score": 7.874545169959062,
      "candidate": "def binary_search(arr, element):\n    start = 0\n    end = len(arr) - 1\n    while start <= end:\n        mid = (start + end) // 2\n        if arr[mid] == element:\n            return mid\n        elif arr[mid] > element:\n            end = mid - 1\n        else:\n            start = mid + 1\n    return -1\n\narr = [2,3,4,5,6,7]\nelement = 2\n\nprint(binary_search(arr, element))"
    },
    {
      "rank": 56,
      "score": 7.853035648297474,
      "candidate": "def binary_search(arr, element):\n    if len(arr) == 0:\n        return False\n    if len(arr) == 1:\n        if arr[0] == element:\n            return True\n        else:\n            return False\n    mid = len(arr) // 2\n    if arr[mid] == element:\n        return True\n    elif arr[mid] > element:\n        return binary_search(arr[:mid], element)\n    else:\n        return binary_search(arr[mid+1:], element)\n\n\nif __name__ == \"__main__\":\n    print(binary_search([1, 2, 3, 4, 5, 6, 7], 5))"
    },
    {
      "rank": 57,
      "score": 7.754477311439231,
      "candidate": "def binary_search(arr, target, low, high):\n    if high <= low:\n        return False\n\n    mid = (high + low) // 2\n    if arr[mid] == target:\n        return True\n    elif arr[mid] > target:\n        return binary_search(arr, target, low, mid - 1)\n    else:\n        return binary_search(arr, target, mid + 1, high)\n\n\ndef main():\n    arr = [1, 2, 3, 4, 5]\n    print(binary_search(arr, 1, 0, len(arr) - 1))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 58,
      "score": 7.6605763948925345,
      "candidate": "def binary_search(arr, n, x):\n    low = 0\n    high = len(arr) - 1\n    while low <= high:\n        mid = (low + high) // 2\n        if arr[mid] == x:\n            return mid\n        elif arr[mid] < x:\n            low = mid + 1\n        else:\n            high = mid - 1\n    return -1\n\nif __name__ == '__main__':\n    assert binary_search([1, 2, 3, 4, 5, 6], 5, 3) == 0\n    assert binary_search([1, 2, 3, 4, 5, 6], 5, 4) == 1\n    assert binary_search([1, 2, 3, 4, 5, 6], 5, 6) == -1\n    assert binary_search([1, 2, 3, 4, 5, 6], 2, 5) == -1\n    assert binary_search([1, 2, 3, 4, 5, 6], 2, 4) == 1\n    assert binary_search([1, 2, 3, 4, 5, 6], 2, 3) == 2\n    assert binary_search([1, 2, 3, 4, 5, 6], 2, 7) == -1\n    assert binary_search([1, 2, 3, 4, 5, 6], 2, 8) == -1\n    assert binary_search([1, 2, 3, 4, 5, 6], 2, 9) == -1\n    assert binary_search([1, 2, 3, 4, 5, 6], 2, 10) == -1\n    assert binary_search([1, 2, 3, 4, 5, 6], 2, 11) == -1"
    },
    {
      "rank": 59,
      "score": 7.396546402808546,
      "candidate": "def binary_search(arr, n, element):\n    if n == 0:\n        return False\n    elif n == 1:\n        return True\n\n    left = 0\n    right = len(arr) - 1\n\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == element:\n            return True\n        elif arr[mid] < element:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return False\n\n\nif __name__ == \"__main__\":\n    print(binary_search([2, 3, 5, 7, 11], 3, 7))"
    },
    {
      "rank": 60,
      "score": 3.6415038988837427,
      "candidate": "def binary_search(arr, target):\n    left = 0\n    right = len(arr) - 1\n\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == target:\n            return mid\n        elif arr[mid] > target:\n            right = mid - 1\n        else:\n            left = mid + 1\n\n    return -1\n\n\nif __name__ == \"__main__\":\n    arr = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    target = 6\n    print(binary_search(arr, target))"
    },
    {
      "rank": 61,
      "score": 3.6305949922510474,
      "candidate": "def binary_search(arr, el):\n    low = 0\n    high = len(arr) - 1\n    while low <= high:\n        mid = (low + high) // 2\n        if arr[mid] == el:\n            return mid\n        elif arr[mid] > el:\n            high = mid - 1\n        else:\n            low = mid + 1\n    return -1\n\n\ndef test_binary_search():\n    assert binary_search([1, 2, 3, 4, 5], 5) == 1\n    assert binary_search([1, 2, 3, 4, 5], 2) == 0\n    assert binary_search([1, 2, 3, 4, 5], 0) == -1\n    assert binary_search([1, 2, 3, 4, 5], 1) == 0\n    assert binary_search([1, 2, 3, 4, 5], 2) == -1\n    assert binary_search([1, 2, 3, 4, 5], 3) == 1\n    assert binary_search([1, 2, 3, 4, 5], 4) == -1\n    assert binary_search([1, 2, 3, 4, 5], 5) == -1"
    },
    {
      "rank": 62,
      "score": 3.6244422411272903,
      "candidate": "def binary_search(arr, x):\n    low = 0\n    high = len(arr) - 1\n    while low <= high:\n        mid = (low + high) // 2\n        if arr[mid] == x:\n            return mid\n        elif arr[mid] > x:\n            high = mid - 1\n        else:\n            low = mid + 1\n    return None\n\n\narr = [4, 6, 8, 10, 12]\nx = 6\nprint(binary_search(arr, x))"
    },
    {
      "rank": 63,
      "score": 3.3818248488376415,
      "candidate": "def binary_search(arr, target):\n    left = 0\n    right = len(arr) - 1\n\n    while left <= right:\n        mid = (left + right) // 2\n\n        if arr[mid] == target:\n            return mid\n        elif arr[mid] > target:\n            right = mid - 1\n        else:\n            left = mid + 1\n\n    return -1\n\n\nif __name__ == '__main__':\n    print(binary_search([1, 2, 3, 4, 5, 6], 5))"
    },
    {
      "rank": 64,
      "score": 3.333135587181621,
      "candidate": "def binary_search(arr, x):\n    if arr is None or len(arr) == 0:\n        return False\n\n    low = 0\n    high = len(arr) - 1\n\n    while low <= high:\n        mid = (low + high) // 2\n        if arr[mid] == x:\n            return mid\n\n        if x < arr[mid]:\n            high = mid - 1\n        else:\n            low = mid + 1\n\n    return False\n\n\nif __name__ == '__main__':\n    arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    print(binary_search(arr, 3))"
    },
    {
      "rank": 65,
      "score": 3.302771297798118,
      "candidate": "class Solution:\n    def search(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: bool\n        \"\"\"\n        l = 0\n        r = len(nums) - 1\n        while l <= r:\n            mid = (l + r) // 2\n            if nums[mid] == target:\n                return True\n            elif nums[mid] < target:\n                l = mid + 1\n            else:\n                r = mid - 1\n        return False\n\n\nif __name__ == '__main__':\n    s = Solution()\n    assert s.search([1, 2, 3, 4, 5, 6], 2) == True\n    assert s.search([1, 2, 3, 4, 5, 6], 3) == False\n    assert s.search([1, 2, 3, 4, 5, 6], 4) == True\n    assert s.search([1, 2, 3, 4, 5, 6], 5) == False\n    assert s.search([1, 2, 3, 4, 5, 6], 1) == True"
    },
    {
      "rank": 66,
      "score": 3.1540361875217253,
      "candidate": "def binary_search(arr, val):\n    low = 0\n    high = len(arr) - 1\n    while low <= high:\n        mid = (low + high) // 2\n        if arr[mid] == val:\n            return mid\n        elif arr[mid] > val:\n            high = mid - 1\n        else:\n            low = mid + 1\n    return -1\n\n\narr = [2, 3, 4, 5, 7, 9]\nval = 7\n\nprint(binary_search(arr, val))"
    },
    {
      "rank": 67,
      "score": 3.14827077026953,
      "candidate": "class Solution(object):\n    def search(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: bool\n        \"\"\"\n        low, high = 0, len(nums)-1\n        while low <= high:\n            mid = (low+high)//2\n            if nums[mid] == target:\n                return True\n            elif nums[mid] < target:\n                low = mid+1\n            else:\n                high = mid-1\n        return False\n\n\nif __name__ == \"__main__\":\n    s = Solution()\n    print s.search([1,2,3,4,5,6], 3)"
    },
    {
      "rank": 68,
      "score": 3.14817219825845,
      "candidate": "def binary_search(arr, element):\n    left = 0\n    right = len(arr) - 1\n\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == element:\n            return mid\n        elif arr[mid] < element:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return -1\n\n\narr = [1, 2, 3, 4, 5, 6]\n\nprint(binary_search(arr, 1))\nprint(binary_search(arr, 5))"
    },
    {
      "rank": 69,
      "score": 3.1288414063640624,
      "candidate": "def binary_search(arr, target):\n    low = 0\n    high = len(arr) - 1\n    while low <= high:\n        mid = (low + high) // 2\n        if arr[mid] == target:\n            return mid\n        elif arr[mid] < target:\n            high = mid - 1\n        else:\n            low = mid + 1\n    return None\n\n\nif __name__ == \"__main__\":\n    assert binary_search([1, 2, 3, 4, 5], 3) == 2\n    assert binary_search([1, 2, 3, 4, 5], 5) == None\n    assert binary_search([1, 2, 3, 4, 5], 5) == 1\n    assert binary_search([1, 2, 3, 4, 5], 7) == 4\n    assert binary_search([1, 2, 3, 4, 5], 8) == None"
    },
    {
      "rank": 70,
      "score": 3.099204531342074,
      "candidate": "def binary_search(arr, element):\n    if arr is None or len(arr) == 0:\n        return False\n    left = 0\n    right = len(arr) - 1\n    mid = left + (right - left) // 2\n    if arr[mid] == element:\n        return True\n    if arr[mid] < element:\n        if arr[mid] < arr[mid + 1]:\n            return binary_search(arr[:mid], element)\n        else:\n            return binary_search(arr[mid + 1:], element)\n    else:\n        if arr[mid] > arr[mid - 1]:\n            return binary_search(arr[mid + 1:], element)\n        else:\n            return binary_search(arr[:mid], element)\n\n\nif __name__ == '__main__':\n    print(binary_search([1, 2, 3, 4, 5, 6, 7, 8], 8))"
    },
    {
      "rank": 71,
      "score": 3.0856340739519497,
      "candidate": "def binary_search(arr, n, x):\n    if len(arr) == 0:\n        return False\n    left = 0\n    right = len(arr) - 1\n    mid = (left + right) // 2\n    if arr[mid] == x:\n        return mid\n    elif arr[mid] > x:\n        return binary_search(arr[left:mid], n, x)\n    else:\n        return binary_search(arr[mid + 1:right], n, x)\n\n\narr = [2, 4, 8, 12, 16, 20]\nprint(binary_search(arr, len(arr), 8))"
    },
    {
      "rank": 72,
      "score": 3.0807131067063405,
      "candidate": "def binary_search(arr, target):\n    low = 0\n    high = len(arr) - 1\n    mid = (low + high) // 2\n\n    if arr[mid] == target:\n        return mid\n\n    if arr[low] <= arr[mid]:\n        if arr[low] <= target:\n            return binary_search(arr, target)\n        else:\n            return binary_search(arr, target - arr[mid])\n    else:\n        if arr[mid] <= target:\n            return binary_search(arr, target)\n        else:\n            return binary_search(arr, target - arr[low])\n\n\nif __name__ == '__main__':\n    print(binary_search([1, 2, 3, 4, 5], 5))\n    print(binary_search([1, 2, 3, 4, 5], 4))"
    },
    {
      "rank": 73,
      "score": 3.045478261781045,
      "candidate": "def binary_search(array, target):\n    low = 0\n    high = len(array) - 1\n    if low > high:\n        return -1\n    mid = (low + high) // 2\n    if array[mid] == target:\n        return mid\n    elif array[mid] < target:\n        return binary_search(array, target)\n    else:\n        return binary_search(array, target)\n\n\nif __name__ == \"__main__\":\n    print(binary_search([3, 4, 5, 7, 9], 4))"
    },
    {
      "rank": 74,
      "score": 3.037621918379556,
      "candidate": "class Solution:\n    def search(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: int\n        \"\"\"\n\n        def binary_search(left, right, target):\n            if left > right:\n                return -1\n\n            mid = (left + right) // 2\n            if nums[mid] == target:\n                return mid\n            elif nums[mid] < target:\n                return binary_search(left, mid - 1, target)\n            else:\n                return binary_search(mid + 1, right, target)\n\n        return binary_search(0, len(nums) - 1, target)\n\n\ns = Solution()\nprint(s.search([1, 2, 3, 4, 5, 6], 6))\nprint(s.search([1, 2, 3, 4, 5, 6], 1))"
    },
    {
      "rank": 75,
      "score": 2.9944661378574473,
      "candidate": "def binary_search(arr, val):\n    low = 0\n    high = len(arr) - 1\n\n    while low <= high:\n        mid = low + (high - low) // 2\n\n        if arr[mid] == val:\n            return mid\n        elif arr[mid] < val:\n            low = mid + 1\n        else:\n            high = mid - 1\n\n    return -1\n\n\nif __name__ == '__main__':\n    arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    val = 8\n    result = binary_search(arr, val)\n    print(result)"
    },
    {
      "rank": 76,
      "score": 2.98531132396492,
      "candidate": "def binary_search(arr, element):\n    if len(arr) == 0:\n        return False\n    else:\n        mid = len(arr) // 2\n        if arr[mid] == element:\n            return True\n        elif arr[mid] < element:\n            return binary_search(arr[:mid], element)\n        else:\n            return binary_search(arr[mid:], element)\n\n\narr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nprint(binary_search(arr, 7))"
    },
    {
      "rank": 77,
      "score": 2.970475850152063,
      "candidate": "def binary_search(arr, target):\n    low = 0\n    high = len(arr) - 1\n    mid = (low + high) // 2\n\n    if arr[mid] == target:\n        return mid\n    elif arr[mid] < target:\n        return binary_search(arr, target)\n    else:\n        return binary_search(arr, target - arr[mid])\n\n\nif __name__ == '__main__':\n    arr = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    target = 7\n    print(binary_search(arr, target))"
    },
    {
      "rank": 78,
      "score": 2.943311636519814,
      "candidate": "def binary_search(arr, target):\n    # write your code here\n    low = 0\n    high = len(arr) - 1\n    while low <= high:\n        mid = (low + high) // 2\n        if arr[mid] == target:\n            return mid\n        elif arr[mid] > target:\n            high = mid - 1\n        else:\n            low = mid + 1\n    return -1\n\n\narr = [2, 5, 8, 10, 13, 18, 21, 34]\ntarget = 8\nprint(binary_search(arr, target))"
    },
    {
      "rank": 79,
      "score": 2.923879819567835,
      "candidate": "def binary_search(arr, target):\n    if arr is None or len(arr) == 0:\n        return False\n    low, high = 0, len(arr) - 1\n    while low <= high:\n        mid = (low + high) // 2\n        if arr[mid] == target:\n            return True\n        if arr[mid] < target:\n            low = mid + 1\n        else:\n            high = mid - 1\n    return False\n\n\nif __name__ == \"__main__\":\n    print(binary_search([1, 2, 3, 4, 5, 6], 4))\n    print(binary_search([1, 2, 3, 4, 5, 6], 5))\n    print(binary_search([1, 2, 3, 4, 5, 6], 2))\n    print(binary_search([1, 2, 3, 4, 5, 6], 3))\n    print(binary_search([1, 2, 3, 4, 5, 6], 7))\n    print(binary_search([1, 2, 3, 4, 5, 6], 0))\n    print(binary_search([1, 2, 3, 4, 5, 6], -1))\n    print(binary_search([1, 2, 3, 4, 5, 6], -2))\n    print(binary_search([1, 2, 3, 4, 5, 6], -3))\n    print(binary_search([1, 2, 3, 4, 5, 6], -4))\n    print(binary_search([1, 2, 3, 4, 5, 6], -5))\n    print(binary_search([1, 2, 3, 4, 5, 6], -6))\n    print(binary_search([1, 2, 3, 4, 5, 6], -7))\n    print(binary_search([1, 2, 3, 4, 5, 6], -8))\n    print(binary_search([1, 2, 3, 4, 5, 6], -9))\n    print(binary_search([1, 2, 3, 4, 5, 6], -10))\n    print(binary_search([1, 2, 3, 4, 5, 6], -11))\n    print(binary_search"
    },
    {
      "rank": 80,
      "score": 2.9099345259866203,
      "candidate": "def binary_search(arr, target):\n    low = 0\n    high = len(arr) - 1\n    while low <= high:\n        mid = (low + high) // 2\n        if arr[mid] == target:\n            return mid\n        elif arr[mid] < target:\n            high = mid - 1\n        else:\n            low = mid + 1\n    return -1\n\n\narr = [2, 3, 5, 7, 11, 13, 15]\ntarget = 15\n\nprint(binary_search(arr, target))"
    },
    {
      "rank": 81,
      "score": 2.904003847650836,
      "candidate": "def binary_search(arr, target):\n    low = 0\n    high = len(arr) - 1\n    mid = (low + high) // 2\n\n    if arr[mid] == target:\n        return mid\n\n    if arr[mid] < target:\n        if arr[low] <= target < arr[mid]:\n            return binary_search(arr, target)\n        else:\n            return binary_search(arr, arr[mid])\n    else:\n        if arr[high] <= target < arr[mid]:\n            return binary_search(arr, arr[mid])\n        else:\n            return binary_search(arr, target)\n\n\nif __name__ == \"__main__\":\n    assert binary_search([1, 2, 3, 4, 5, 6], 6) == 3\n    assert binary_search([1, 2, 3, 4, 5, 6], 5) == 4\n    assert binary_search([1, 2, 3, 4, 5, 6], 2) == 0\n    assert binary_search([1, 2, 3, 4, 5, 6], 1) == 0\n    assert binary_search([1, 2, 3, 4, 5, 6], 0) == -1\n    assert binary_search([1, 2, 3, 4, 5, 6], 1) == -1\n    assert binary_search([1, 2, 3, 4, 5, 6], 2) == -1\n    assert binary_search([1, 2, 3, 4, 5, 6], 3) == 4\n    assert binary_search([1, 2, 3, 4, 5, 6], 5) == 5\n    assert binary_search([1, 2, 3, 4, 5, 6], 6) == 7\n    assert binary_search([1, 2, 3, 4, 5, 6], 7) == -1"
    },
    {
      "rank": 82,
      "score": 2.903997116363432,
      "candidate": "def binary_search(array, element):\n    low = 0\n    high = len(array) - 1\n    while low <= high:\n        mid = (low + high) // 2\n        if array[mid] == element:\n            return mid\n        elif array[mid] > element:\n            high = mid - 1\n        else:\n            low = mid + 1\n    return -1\n\n\n# Testing\narray = [1, 2, 3, 4, 5, 6, 7]\nelement = 5\n\nprint(binary_search(array, element))"
    },
    {
      "rank": 83,
      "score": 2.877406986308994,
      "candidate": "class Solution:\n    def search(self, nums: List[int], target: int) -> int:\n        left = 0\n        right = len(nums) - 1\n        \n        while left <= right:\n            mid = left + (right - left)//2\n            if nums[mid] == target:\n                return mid\n            elif nums[mid] > target:\n                right = mid - 1\n            else:\n                left = mid + 1\n        return -1\n\na = Solution()\nprint(a.search([1,2,3,4,5,6], 3))\nprint(a.search([1,2,3,4,5,6], 2))\nprint(a.search([1,2,3,4,5,6], 4))\nprint(a.search([1,2,3,4,5,6], 5))\nprint(a.search([1,2,3,4,5,6], 0))\nprint(a.search([1,2,3,4,5,6], 7))\nprint(a.search([1,2,3,4,5,6], 8))\nprint(a.search([1,2,3,4,5,6], 9))\nprint(a.search([1,2,3,4,5,6], 11))\nprint(a.search([1,2,3,4,5,6], 12))\nprint(a.search([1,2,3,4,5,6], 13))\nprint(a.search([1,2,3,4,5,6], 14))\nprint(a.search([1,2,3,4,5,6], 15))\nprint(a.search([1,2,3,4,5,6], 16))\nprint(a.search([1,2,3,4,5,6], 17))\nprint(a.search([1,2,3,4,5,6], 18))\nprint(a.search([1,2,3,4,5,6], 19))\nprint(a.search([1,2,3,4,5,6], 20))\nprint(a.search([1,2,3,4,5,6"
    },
    {
      "rank": 84,
      "score": 2.8732229259010023,
      "candidate": "def binary_search(arr, target):\n    low = 0\n    high = len(arr) - 1\n    found = False\n\n    while not found:\n        mid = (low + high) // 2\n        if arr[mid] == target:\n            found = True\n        elif arr[mid] > target:\n            high = mid - 1\n        else:\n            low = mid + 1\n    return mid\n\n\ndef test_binary_search():\n    assert binary_search([1, 2, 3, 4, 5], 5) == 2\n    assert binary_search([1, 2, 3, 4, 5], 1) == 0\n    assert binary_search([1, 2, 3, 4, 5], 2) == 0\n    assert binary_search([1, 2, 3, 4, 5], 3) == 1\n    assert binary_search([1, 2, 3, 4, 5], 4) == 1\n    assert binary_search([1, 2, 3, 4, 5], 6) == -1\n    assert binary_search([1, 2, 3, 4, 5], 7) == -1\n\n\ntest_binary_search()"
    },
    {
      "rank": 85,
      "score": 2.8421162650293104,
      "candidate": "def binary_search(arr, target):\n    start = 0\n    end = len(arr) - 1\n\n    while start <= end:\n        mid = (start + end) // 2\n\n        if arr[mid] == target:\n            return mid\n        elif arr[mid] > target:\n            end = mid - 1\n        else:\n            start = mid + 1\n\n    return -1\n\n\ndef main():\n    arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    print(binary_search(arr, 10))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 86,
      "score": 2.811138103906487,
      "candidate": "def binary_search(arr, element):\n    start = 0\n    end = len(arr) - 1\n\n    while start <= end:\n        mid = start + (end - start) // 2\n\n        if arr[mid] == element:\n            return mid\n\n        elif arr[mid] > element:\n            end = mid - 1\n\n        else:\n            start = mid + 1\n\n    return -1\n\n\nif __name__ == \"__main__\":\n    print(binary_search([1, 2, 3, 4, 5, 6, 7, 8, 9], 8))\n    print(binary_search([1, 2, 3, 4, 5, 6, 7, 8, 9], 0))\n    print(binary_search([1, 2, 3, 4, 5, 6, 7, 8, 9], 3))\n    print(binary_search([1, 2, 3, 4, 5, 6, 7, 8, 9], 10))"
    },
    {
      "rank": 87,
      "score": 2.803538562483431,
      "candidate": "def binary_search(arr, num):\n    low = 0\n    high = len(arr) - 1\n    while low <= high:\n        mid = (low + high) // 2\n        if arr[mid] == num:\n            return mid\n        elif arr[mid] < num:\n            low = mid + 1\n        else:\n            high = mid - 1\n    return None\n\n\nif __name__ == \"__main__\":\n    print(binary_search([1, 2, 3, 4, 5, 6], 6))\n    print(binary_search([1, 2, 3, 4, 5, 6], 2))\n    print(binary_search([1, 2, 3, 4, 5, 6], 5))\n    print(binary_search([1, 2, 3, 4, 5, 6], 7))"
    },
    {
      "rank": 88,
      "score": 2.769462113011201,
      "candidate": "def search(arr, element):\n    low = 0\n    high = len(arr) - 1\n    if high <= low:\n        return False\n\n    mid = (low + high) // 2\n\n    if arr[mid] == element:\n        return True\n    elif arr[mid] > element:\n        return search(arr, element)\n    else:\n        return search(arr, arr[mid])\n\n\nif __name__ == \"__main__\":\n    arr = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    print(search(arr, 9))"
    },
    {
      "rank": 89,
      "score": 2.735500900611899,
      "candidate": "def binary_search(arr, val):\n    low = 0\n    high = len(arr) - 1\n    while low <= high:\n        mid = (low + high) // 2\n        if val == arr[mid]:\n            return mid\n        if val < arr[mid]:\n            high = mid - 1\n        else:\n            low = mid + 1\n    return -1\n\n\ndef test_binary_search():\n    assert binary_search([1, 3, 5, 7, 9], 5) == 3\n    assert binary_search([1, 3, 5, 7, 9], 1) == -1\n    assert binary_search([1, 3, 5, 7, 9], 0) == 0\n    assert binary_search([1, 3, 5, 7, 9], 2) == -1\n    assert binary_search([1, 3, 5, 7, 9], 3) == -1\n    assert binary_search([1, 3, 5, 7, 9], 4) == -1\n    assert binary_search([1, 3, 5, 7, 9], 5) == -1\n    assert binary_search([1, 3, 5, 7, 9], 6) == -1\n    assert binary_search([1, 3, 5, 7, 9], 7) == -1\n    assert binary_search([1, 3, 5, 7, 9], 8) == -1\n    assert binary_search([1, 3, 5, 7, 9], 9) == -1"
    },
    {
      "rank": 90,
      "score": 2.6559208154787184,
      "candidate": "def binary_search(nums, target):\n    low = 0\n    high = len(nums) - 1\n    while low <= high:\n        mid = (low + high) // 2\n        if nums[mid] == target:\n            return mid\n        elif nums[mid] > target:\n            high = mid - 1\n        else:\n            low = mid + 1\n    return -1\n\n\nprint(binary_search([1, 2, 3, 4, 5, 6, 7, 8, 9], 8))\nprint(binary_search([1, 2, 3, 4, 5, 6, 7, 8, 9], 3))\nprint(binary_search([1, 2, 3, 4, 5, 6, 7, 8, 9], 4))\nprint(binary_search([1, 2, 3, 4, 5, 6, 7, 8, 9], -1))\nprint(binary_search([1, 2, 3, 4, 5, 6, 7, 8, 9], 0))\nprint(binary_search([1, 2, 3, 4, 5, 6, 7, 8, 9], -2))"
    },
    {
      "rank": 91,
      "score": 2.6277101290363034,
      "candidate": "def search(arr, target):\n    left = 0\n    right = len(arr) - 1\n\n    while left <= right:\n        mid = (left + right) // 2\n\n        if arr[mid] == target:\n            return mid\n        elif target < arr[mid]:\n            right = mid - 1\n        else:\n            left = mid + 1\n\n    return -1\n\n\narr = [3, 5, 7, 9, 11, 13, 15]\ntarget = 13\n\nprint(search(arr, target))"
    },
    {
      "rank": 92,
      "score": 2.5847392406628864,
      "candidate": "def binary_search(arr, val):\n    low = 0\n    high = len(arr) - 1\n\n    while low <= high:\n        mid = (low + high) // 2\n\n        if arr[mid] == val:\n            return mid\n        elif val < arr[mid]:\n            high = mid - 1\n        else:\n            low = mid + 1\n\n    return -1\n\n\nif __name__ == \"__main__\":\n    arr = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    val = 8\n    print(binary_search(arr, val))"
    },
    {
      "rank": 93,
      "score": 2.5464026606575283,
      "candidate": "class Solution:\n    def search(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: bool\n        \"\"\"\n        if not nums:\n            return False\n\n        low, high = 0, len(nums) - 1\n\n        while low <= high:\n            mid = (low + high) // 2\n\n            if nums[mid] == target:\n                return True\n            elif nums[mid] < target:\n                low = mid + 1\n            else:\n                high = mid - 1\n\n        return False\n\n\nif __name__ == \"__main__\":\n    nums = [3, 4, 5, 7, 9]\n    target = 7\n    sol = Solution()\n    print(sol.search(nums, target))"
    },
    {
      "rank": 94,
      "score": 2.528092633256856,
      "candidate": "def binary_search(arr, num):\n    left = 0\n    right = len(arr)-1\n    while left <= right:\n        mid = (left + right)//2\n        if arr[mid] == num:\n            return mid\n        elif arr[mid] > num:\n            right = mid-1\n        else:\n            left = mid+1\n    return -1\n\n\narr = [4, 5, 6, 7, 8, 9]\nnum = 9\nprint(binary_search(arr, num))"
    },
    {
      "rank": 95,
      "score": 2.509555284126925,
      "candidate": "def binary_search(arr, target):\n    # write your code here\n    if len(arr) == 0:\n        return False\n    low = 0\n    high = len(arr) - 1\n    while low <= high:\n        mid = (low + high) // 2\n        if arr[mid] == target:\n            return True\n        elif arr[mid] < target:\n            low = mid + 1\n        else:\n            high = mid - 1\n    return False\n\n\nif __name__ == '__main__':\n    assert binary_search([1, 2, 3, 4, 5, 6], 3) == True\n    assert binary_search([1, 2, 3, 4, 5, 6], 5) == False\n    assert binary_search([1, 2, 3, 4, 5, 6], 8) == False\n    assert binary_search([1, 2, 3, 4, 5, 6], 7) == True"
    },
    {
      "rank": 96,
      "score": 2.499454103511881,
      "candidate": "def binary_search(arr, elem):\n    low = 0\n    high = len(arr) - 1\n\n    while low <= high:\n        mid = (low + high) // 2\n\n        if arr[mid] == elem:\n            return mid\n\n        elif arr[mid] > elem:\n            high = mid - 1\n\n        else:\n            low = mid + 1\n\n    return -1\n\n\narr = [2, 4, 5, 7, 9, 11]\nelem = 9\n\nprint(binary_search(arr, elem))"
    },
    {
      "rank": 97,
      "score": 2.4209554824525306,
      "candidate": "def binary_search(arr, target):\n    low, high = 0, len(arr) - 1\n\n    while low <= high:\n        mid = (low + high) // 2\n        if arr[mid] == target:\n            return mid\n        elif arr[mid] > target:\n            high = mid - 1\n        else:\n            low = mid + 1\n\n    return -1\n\n\nif __name__ == \"__main__\":\n    assert binary_search([1, 2, 3, 4, 5], 5) == 3\n    assert binary_search([1, 2, 3, 4, 5], 7) == -1"
    },
    {
      "rank": 98,
      "score": 2.277153536301279,
      "candidate": "def binary_search(arr, elem, low=0, high=None):\n    if high is None:\n        high = len(arr) - 1\n    if low > high:\n        return -1\n    mid = (low + high) // 2\n    if arr[mid] == elem:\n        return mid\n    if arr[mid] < elem:\n        return binary_search(arr, elem, mid + 1, high)\n    return binary_search(arr, elem, low, mid - 1)\n\n\narr = [1, 2, 3, 4, 5, 6, 7]\nprint(binary_search(arr, 7))"
    },
    {
      "rank": 99,
      "score": 2.215555099690303,
      "candidate": "def binary_search(arr, target):\n    low = 0\n    high = len(arr)-1\n    while low <= high:\n        mid = (low + high)//2\n        if arr[mid] == target:\n            return mid\n        elif target < arr[mid]:\n            high = mid-1\n        elif target > arr[mid]:\n            low = mid+1\n    return -1\n\nif __name__ == \"__main__\":\n    arr = [1,2,3,4,5,6,7,8,9,10]\n    print(binary_search(arr, 8))\n    print(binary_search(arr, 9))\n    print(binary_search(arr, 10))\n    print(binary_search(arr, 11))\n    print(binary_search(arr, 12))\n    print(binary_search(arr, 13))\n    print(binary_search(arr, 14))"
    },
    {
      "rank": 100,
      "score": 2.185096745013634,
      "candidate": "def search(arr, e):\n    low = 0\n    high = len(arr) - 1\n\n    while low <= high:\n        mid = (low + high) // 2\n\n        if arr[mid] == e:\n            return mid\n        elif arr[mid] < e:\n            low = mid + 1\n        else:\n            high = mid - 1\n\n    return -1\n\n\narr = [1, 3, 5, 7, 9]\ne = 5\n\nprint(search(arr, e))"
    }
  ]
}