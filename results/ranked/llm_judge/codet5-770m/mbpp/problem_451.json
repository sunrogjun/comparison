{
  "timestamp": "2025-09-14T15:46:16.315597",
  "method": "improved_llm_judge",
  "judge_model": "codellama/CodeLlama-7b-Python-hf",
  "target_model": "codet5-770m",
  "dataset": "mbpp",
  "problem_number": 451,
  "total_candidates": 100,
  "results": [
    {
      "rank": 1,
      "score": 10.0,
      "candidate": "def combinations(n, arr):\n    if n == 1:\n        return [[arr[0]]]\n    else:\n        return [[arr[i] + arr[j] for i in range(n) for j in range(n)]\n\n\nn = int(input(\"Enter the number of elements: \"))\narr = list(map(int, input(\"Enter the elements: \").split()))\n\nprint(combinations(n, arr))"
    },
    {
      "rank": 2,
      "score": 10.0,
      "candidate": "def combinations(arr, n):\n    if n == 1:\n        return [[]]\n    result = []\n    arr = sorted(arr)\n    for i in range(n):\n        comb = combinations(arr, n-1)\n        for j in comb:\n            result.append([arr[i]] + j)\n    return result\n\nprint(combinations([1, 2, 3], 3))"
    },
    {
      "rank": 3,
      "score": 10.0,
      "candidate": "def combinations(lst, n):\n    result = []\n    self.helper(lst, n, 0, result)\n    return result\n\n\ndef helper(lst, n, i, result):\n    if i == n:\n        result.append(lst[:])\n        return\n    for j in range(i, n):\n        lst[i], lst[j] = lst[j], lst[i]\n        self.helper(lst, n, i+1, result)\n        lst[i], lst[j] = lst[j], lst[i]\n\n\nif __name__ == \"__main__\":\n    print(combinations([1, 2, 3], 4))"
    },
    {
      "rank": 4,
      "score": 10.0,
      "candidate": "def comb_list(lst, n):\n    if n == 0:\n        return []\n    return comb_list(lst, n-1) + [lst]\n\nprint(comb_list([], 1))"
    },
    {
      "rank": 5,
      "score": 10.0,
      "candidate": "def combinations(arr):\n    arr.sort()\n    n = len(arr)\n    result = []\n    if n == 1:\n        result.append([arr[0]])\n    else:\n        for i in range(n):\n            result.append([arr[i]])\n            result.append([arr[i] + arr[i+1]])\n            result.append([arr[i] + arr[i+1] + arr[i+2]])\n    return result\n\n\narr = [1, 2, 3]\nprint(combinations(arr))"
    },
    {
      "rank": 6,
      "score": 10.0,
      "candidate": "def comb(arr, n):\n    if len(arr) == 0:\n        return [[]]\n    res = []\n    for i in range(n):\n        res += comb(arr[1:], i + 1)\n    return res\n\n\narr = [1, 2, 3, 4, 5]\nprint(comb(arr, len(arr)))"
    },
    {
      "rank": 7,
      "score": 10.0,
      "candidate": "def comb(list_elements):\n    # write your code here\n    return\n\n\nif __name__ == \"__main__\":\n    print(comb([1, 2, 3, 4]))"
    },
    {
      "rank": 8,
      "score": 10.0,
      "candidate": "from typing import List\n\n\ndef combinations(nums: List[int], k: int) -> List[List[int]]:\n    return _combinations(nums, k)\n\n\ndef _combinations(nums: List[int], k: int) -> List[List[int]]:\n    if k == 0:\n        return [[nums[0]]]\n    elif k == 1:\n        return [[nums[0], nums[1]]]\n    else:\n        return _combinations(nums[1:], k - 1) + [\n            [nums[0], nums[1]] + comb\n            for comb in _combinations(nums[1:], k - 1)\n        ]"
    },
    {
      "rank": 9,
      "score": 9.0,
      "candidate": "def combinations(arr, n):\n    if n == 1:\n        return [[arr[0]]]\n    return [[arr[i] + arr[j] for j in range(n)] for i in range(n)]\n\n\narr = [1, 2, 3]\nn = len(arr)\nprint(combinations(arr, n))"
    },
    {
      "rank": 10,
      "score": 8.0,
      "candidate": "def find_combinations(arr):\n    n = len(arr)\n    result = []\n    for i in range(n+1):\n        for j in range(n+1):\n            if i!= j:\n                result.append(arr[i:j+1])\n    return result\n\n\nif __name__ == '__main__':\n    arr = [1, 2, 3, 4]\n    print(find_combinations(arr))"
    },
    {
      "rank": 11,
      "score": 8.0,
      "candidate": "def combinations(l, n):\n    if n == 1:\n        return [l]\n    res = []\n    for i in range(n):\n        for j in combinations(l, n - i - 1):\n            res.append(j + [i])\n    return res\n\n\nif __name__ == \"__main__\":\n    print(combinations([1, 2, 3], 3))"
    },
    {
      "rank": 12,
      "score": 8.0,
      "candidate": "def combination(arr, n):\n    res = []\n    find_combination(arr, 0, n, [], res)\n    return res\n\n\ndef find_combination(arr, start, n, current_comb, res):\n    if start == n:\n        res.append(current_comb)\n        return\n\n    for i in range(start, n):\n        current_comb.append(arr[i])\n        find_combination(arr, i + 1, n, current_comb, res)\n        current_comb.pop()\n\n\nif __name__ == '__main__':\n    print(combination([1, 2, 3, 4], 4))"
    },
    {
      "rank": 13,
      "score": 8.0,
      "candidate": "def combinations(nums):\n    n = len(nums)\n    if n < 2:\n        return [[]]\n\n    result = []\n    for i in range(n - 1, -1, -1):\n        for j in range(i + 1, n + 1):\n            result.append([nums[i], nums[j]])\n\n    return result"
    },
    {
      "rank": 14,
      "score": 8.0,
      "candidate": "def find_combinations(arr, n):\n    if n == 0:\n        return [[]]\n    if n == 1:\n        return [[arr[0]]]\n    if n == 2:\n        return [[arr[0], arr[1]]]\n    result = []\n    for i in range(n):\n        for j in find_combinations(arr, n - i - 1):\n            result.append([arr[0]] + j)\n    return result\n\n\nprint(find_combinations([1, 2, 3], 4))"
    },
    {
      "rank": 15,
      "score": 8.0,
      "candidate": "def combinations(nums):\n    # Write your code here\n    if not nums:\n        return []\n    if len(nums) == 1:\n        return [nums]\n    result = []\n    for i in range(len(nums)):\n        for j in combinations(nums[1:]):\n            result.append([nums[i]] + j)\n    return result\n\n\nif __name__ == \"__main__\":\n    print(combinations([1, 2, 3]))"
    },
    {
      "rank": 16,
      "score": 8.0,
      "candidate": "def combinations(n, arr):\n    # Fill this in.\n    if n == 0 or n == 1:\n        return [[]]\n    else:\n        return combinations(n-1, arr) + [[x] + y for x in arr for y in combinations(n-1, arr)]"
    },
    {
      "rank": 17,
      "score": 8.0,
      "candidate": "def combinations(nums):\n    # Write your code here\n    if not nums:\n        return []\n    if len(nums) == 1:\n        return [nums]\n    return [nums[i] + [x] for x in combinations(nums[1:]) for i in range(len(nums))]\n\nprint(combinations([1, 2, 3, 4]))\nprint(combinations([1, 2, 3, 4, 5]))\nprint(combinations([1, 2, 3, 4, 5, 6]))\nprint(combinations([1, 2, 3, 4, 5, 6, 7]))"
    },
    {
      "rank": 18,
      "score": 8.0,
      "candidate": "def combinations(arr, n):\n    return list(map(list, zip(*itertools.combinations(arr, n))))\n\n\narr = list(range(1, 11))\nn = len(arr)\nprint(combinations(arr, n))"
    },
    {
      "rank": 19,
      "score": 8.0,
      "candidate": "def all_combos(list_of_elements):\n    combinations = []\n    combos_helper(list_of_elements, [], combinations)\n    return combinations\n\ndef combos_helper(list_of_elements, combos, combinations):\n    if len(list_of_elements) == 0:\n        combinations.append(combos)\n        return\n\n    for i in range(len(list_of_elements)):\n        combos.append(list_of_elements[i])\n        combos_helper(list_of_elements[i+1:], combos, combinations)\n        combos.pop()\n\n\nif __name__ == \"__main__\":\n    all_combos([1, 2, 3])"
    },
    {
      "rank": 20,
      "score": 8.0,
      "candidate": "from typing import List\n\n\ndef find_combination(arr: List[int], n: int) -> List[List[int]]:\n    if n == 0:\n        return []\n    return find_combination(arr, n - 1) + [[arr[0]]]\n\n\nif __name__ == \"__main__\":\n    assert find_combination([1, 2, 3], 3) == [[1, 2, 3]]\n    assert find_combination([1, 2, 3, 4], 2) == [[1, 2, 3], [1, 2, 4], [1, 3, 4], [1, 4]]\n    assert find_combination([1, 2, 3, 4, 5], 3) == [[1, 2, 3, 4], [1, 3, 4], [1, 4, 5]]"
    },
    {
      "rank": 21,
      "score": 8.0,
      "candidate": "def combinations(nums, k):\n    if k == 0:\n        return [[]]\n\n    if k == 1:\n        return [[n] for n in nums]\n\n    res = []\n    for n in nums:\n        for sub_comb in combinations(nums, k - 1):\n            res.append([n] + sub_comb)\n\n    return res"
    },
    {
      "rank": 22,
      "score": 8.0,
      "candidate": "def find_combinations(nums, n):\n    if n == 0:\n        return []\n    combinations = []\n    for i in range(n):\n        for j in range(n):\n            if i!= j:\n                combinations.append([nums[i], nums[j]])\n    return combinations"
    },
    {
      "rank": 23,
      "score": 8.0,
      "candidate": "def combinations(arr, k):\n    # write your code here\n    result = []\n    if len(arr) == 0:\n        return result\n    arr.sort()\n    return _combinations(arr, 0, k, [], result)\n\n\ndef _combinations(arr, start, k, combination, result):\n    if len(combination) == k:\n        result.append(combination)\n        return\n\n    for i in range(start, len(arr)):\n        combination.append(arr[i])\n        _combinations(arr, i + 1, k, combination, result)\n        combination.pop()\n\n\nif __name__ == \"__main__\":\n    print(combinations([1, 2, 3], 3))"
    },
    {
      "rank": 24,
      "score": 8.0,
      "candidate": "def combinations(arr, n):\n    if n <= 0:\n        return []\n    if n == 1:\n        return [arr]\n    result = []\n    for i in range(n):\n        result += combinations(arr, n - 1)\n    for i in range(len(result)):\n        result[i] = list(result[i])\n    return result\n\n\nif __name__ == \"__main__\":\n    print(combinations([1, 2, 3], 3))"
    },
    {
      "rank": 25,
      "score": 8.0,
      "candidate": "def find_all_combinations(arr, n):\n    res = []\n    if n == 1:\n        res.append(arr)\n    else:\n        for i in range(n):\n            for j in range(i+1, n+1):\n                temp = arr[:i] + arr[i+1:]\n                res.append(temp)\n    return res\n\nif __name__ == '__main__':\n    print(find_all_combinations([1, 2, 3], 4))"
    },
    {
      "rank": 26,
      "score": 8.0,
      "candidate": "import itertools\n\n\ndef combinations(l, r):\n    \"\"\"\n    :type l: List[int]\n    :type r: int\n    :rtype: List[List[int]]\n    :rtype: List[List[int]]\n    \"\"\"\n    l.sort()\n    if r == 0:\n        return [[i] for i in l]\n\n    return [list(i) for i in itertools.combinations(l, r)]\n\n\nif __name__ == \"__main__\":\n    print(combinations([1, 2, 3, 4], 4))\n    print(combinations([1, 2, 3, 4], 3))"
    },
    {
      "rank": 27,
      "score": 8.0,
      "candidate": "def combination(nums, k):\n    if k == 0:\n        return []\n    result = []\n    for i in range(len(nums)):\n        temp = combination(nums[i+1:], k-1)\n        for j in temp:\n            result.append([nums[i]] + j)\n    return result\n\nprint(combination([1,2,3], 2))"
    },
    {
      "rank": 28,
      "score": 8.0,
      "candidate": "def combinations(arr):\n    # Initialize the list to contain all combinations of the elements in the given list.\n    all_combinations = []\n\n    # If the list is empty, then return an empty list.\n    if len(arr) == 0:\n        return []\n\n    # If the list is not empty, then iterate through the list and add it to the list.\n    else:\n        for i in range(0, len(arr)):\n            # Add the current element to the list.\n            all_combinations.append(arr[i])\n\n            # Iterate through all the elements of the list and add them to the list.\n            for j in range(0, len(arr)):\n                # Append all the combinations of the current element to the list.\n                all_combinations.append(arr[i] + arr[j])\n\n        return all_combinations\n\n\nif __name__ == \"__main__\":\n    arr = [1, 2, 3, 4, 5]\n    print(combinations(arr))"
    },
    {
      "rank": 29,
      "score": 8.0,
      "candidate": "def combinations(nums, n):\n    res = []\n    for i in range(n):\n        res += [list(x) for x in combinations(nums, i + 1)]\n    return res\n\n\nif __name__ == \"__main__\":\n    print(combinations([1, 2, 3], 3))"
    },
    {
      "rank": 30,
      "score": 8.0,
      "candidate": "def combinations(arr, n):\n    res = []\n    arr.sort()\n    def helper(arr, n, res, i):\n        if i == n:\n            res.append(list(res))\n        for j in range(i, n):\n            helper(arr, n, res, j + 1)\n    helper(arr, n, res, 0)\n    return res\n\n\nprint(combinations([1, 2, 3], 3))"
    },
    {
      "rank": 31,
      "score": 8.0,
      "candidate": "def comb(lst, k):\n    res = []\n    n = len(lst)\n    if k == 0:\n        res.append([])\n    elif k == 1:\n        res.append([lst[0]])\n    else:\n        for i in range(n):\n            for j in range(k):\n                res.append([lst[i]])\n                res.append([lst[i] + lst[j]])\n    return res\n\n\nif __name__ == \"__main__\":\n    lst = [1, 2, 3, 4]\n    k = 3\n    print(comb(lst, k))"
    },
    {
      "rank": 32,
      "score": 8.0,
      "candidate": "from typing import List\n\n\ndef combinations(nums: List[int], r: int) -> List[List[int]]:\n    \"\"\"\n    Time Complexity: O(n^2)\n    Space Complexity: O(n^2)\n    \"\"\"\n    if r == 0:\n        return []\n    elif r == 1:\n        return [[nums[0]]]\n\n    return [[nums[i] + x for x in combinations(nums, r - 1)] +\n            [[nums[i] + y for y in combinations(nums, r - 1)] for i in range(1, len(nums))]\n\n\nif __name__ == '__main__':\n    assert combinations([1, 2, 3], 2) == [[1, 2], [2, 3], [3]]"
    },
    {
      "rank": 33,
      "score": 8.0,
      "candidate": "def combinations(nums, k):\n    res = []\n    for i in range(len(nums)):\n        for j in range(k):\n            res.append(nums[i:i+j+1])\n    return res\n\n\nprint(combinations([1, 2, 3], 2))"
    },
    {
      "rank": 34,
      "score": 8.0,
      "candidate": "def find_all_combinations(arr):\n    combinations = []\n    for i in range(1, len(arr) + 1):\n        for j in range(len(arr)):\n            if arr[j] > arr[j - 1]:\n                combinations.append(arr[j:j + i])\n    return combinations\n\n\nif __name__ == \"__main__\":\n    print(find_all_combinations([1, 2, 3, 4]))"
    },
    {
      "rank": 35,
      "score": 8.0,
      "candidate": "def combination_sum(arr):\n    result = []\n    combos = []\n    arr_len = len(arr)\n    if arr_len == 0:\n        return []\n    if arr_len == 1:\n        result.append([arr[0]])\n    elif arr_len == 2:\n        result.append([arr[0], arr[1]])\n    else:\n        for i in range(arr_len):\n            for j in range(i+1, arr_len+1):\n                combos.append([arr[i], arr[j]])\n        for combo in combos:\n            result.append(combo)\n    return result\n\n\nif __name__ == \"__main__\":\n    print(combination_sum([2, 3, 4, 5]))"
    },
    {
      "rank": 36,
      "score": 8.0,
      "candidate": "def combinations(arr, n):\n    if n <= 1:\n        return [arr]\n\n    return [list(i) for i in combinations(arr, n - 1)] + combinations(arr, n - 1)"
    },
    {
      "rank": 37,
      "score": 8.0,
      "candidate": "def combinations(list, n):\n    \"\"\"\n    :type list: List[int]\n    :type n: int\n    :rtype: List[List[int]]\n    \"\"\"\n    return _combinations(list, n, [])\n\n\ndef _combinations(list, n, result):\n    if n == 0:\n        result.append(list)\n        return result\n\n    for i in range(len(list)):\n        _combinations(list[:i] + list[i + 1:], n - 1, result)\n\n    return result\n\n\nif __name__ == \"__main__\":\n    assert combinations([1, 2, 3, 4], 3) == [[1, 2, 3], [1, 3], [2, 3], [3], [4]]\n    assert combinations([1, 2, 3], 4) == [[1, 2], [1, 3], [2, 3], [3, 4]]"
    },
    {
      "rank": 38,
      "score": 8.0,
      "candidate": "def combos(lst):\n    combos = []\n    return helper(lst, [], [])\n\n\ndef helper(lst, current, combination):\n    if len(current) == len(lst):\n        combos.append(combination)\n        return\n    for i in range(len(lst)):\n        if i!= len(current) - 1 and lst[i] == current[i + 1]:\n            current.append(lst[i])\n            helper(lst, current, combination + [lst[i]])\n            current.pop()\n\n\nprint(combos([1, 2, 3, 4]))"
    },
    {
      "rank": 39,
      "score": 8.0,
      "candidate": "def combinations(arr, n):\n    # write your code here\n    if n == 0:\n        return []\n\n    if n == 1:\n        return [[x] for x in arr]\n\n    # find the combinations of the previous two elements\n    prev_combs = combinations(arr[:-1], n-1)\n    # find the combinations of the next two elements\n    next_combs = combinations(arr[1:], n-1)\n\n    # find all combinations of the previous two elements\n    prev_combs = [x+y for x in prev_combs for y in next_combs]\n\n    # find all combinations of the next two elements\n    next_combs = [x+y for x in prev_combs for y in next_combs]\n\n    return prev_combs + [arr[-1]] + next_combs\n\n\nprint(combinations([1, 2, 3], 3))"
    },
    {
      "rank": 40,
      "score": 8.0,
      "candidate": "def find_combination(arr, n):\n    if n == 0:\n        return []\n    else:\n        return find_combination(arr, n-1) + [list(arr)]\n\n\nif __name__ == '__main__':\n    arr = [1, 2, 3]\n    print(find_combination(arr, 3))"
    },
    {
      "rank": 41,
      "score": 8.0,
      "candidate": "from typing import List\n\n\ndef combinations(nums: List[int]) -> List[List[int]]:\n    if len(nums) == 0:\n        return []\n    if len(nums) == 1:\n        return [[nums[0]]]\n\n    result = []\n    for i in range(len(nums)):\n        for j in combinations(nums[i + 1:], i + 1):\n            result.append([nums[i]] + j)\n\n    return result\n\n\nif __name__ == \"__main__\":\n    print(combinations([1, 2, 3, 4]))"
    },
    {
      "rank": 42,
      "score": 8.0,
      "candidate": "def find_combinations(arr, n):\n    if n == 0:\n        return []\n\n    res = find_combinations(arr[1:], n - 1)\n    res.append(arr[:])\n    return res\n\n\nif __name__ == '__main__':\n    arr = [1, 2, 3]\n    n = len(arr)\n    print(find_combinations(arr, n))"
    },
    {
      "rank": 43,
      "score": 8.0,
      "candidate": "def combinations(nums, n):\n    res = []\n    combinations_helper(nums, 0, res, [], n)\n    return res\n\n\ndef combinations_helper(nums, start, res, comb, n):\n    if len(comb) == n:\n        res.append(comb)\n        return\n\n    for i in range(start, len(nums)):\n        comb.append(nums[i])\n        combinations_helper(nums, i + 1, res, comb, n)\n        comb.pop()\n\n\nif __name__ == \"__main__\":\n    print(combinations([1, 2, 3], 3))"
    },
    {
      "rank": 44,
      "score": 8.0,
      "candidate": "def find_combinations(a, n):\n    res = []\n    find_combinations_helper(a, n, [], res)\n    return res\n\ndef find_combinations_helper(a, n, comb, res):\n    if len(comb) == n:\n        res.append(comb)\n    else:\n        for i in range(len(a)):\n            comb.append(a[i])\n            find_combinations_helper(a, n, comb, res)\n            comb.pop()\n\n\n\nif __name__ == '__main__':\n    print(find_combinations([1,2,3], 3))"
    },
    {
      "rank": 45,
      "score": 8.0,
      "candidate": "import itertools\n\ndef combinations(list_of_elements, k):\n    if not list_of_elements:\n        return []\n\n    # Create a list of all combinations\n    all_combinations = list(itertools.combinations(list_of_elements, k))\n\n    return all_combinations\n\n\nif __name__ == \"__main__\":\n    list_of_elements = [1, 2, 3]\n    k = 2\n    print(combinations(list_of_elements, k))"
    },
    {
      "rank": 46,
      "score": 8.0,
      "candidate": "def find_combinations(arr):\n    \"\"\"\n    :type arr: List[int]\n    :rtype: List[List[int]]\n    \"\"\"\n\n    if not arr:\n        return []\n\n    combinations = []\n\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            combinations.append([arr[i], arr[j]])\n\n    return combinations\n\n\nprint(find_combinations([1, 2, 3]))"
    },
    {
      "rank": 47,
      "score": 8.0,
      "candidate": "def combinations(nums, k):\n    n = len(nums)\n    if n < k:\n        return []\n    if k == 1:\n        return [[nums[0]]]\n    result = []\n    for i in range(n):\n        for j in range(i+1, n+1):\n            result.append([nums[i], nums[j]])\n    return result\n\nprint(combinations([1, 2, 3], 2))"
    },
    {
      "rank": 48,
      "score": 8.0,
      "candidate": "def combinations(arr, n):\n    if not arr:\n        return []\n\n    res = []\n    combinations_helper(arr, 0, [], res)\n    return res\n\n\ndef combinations_helper(arr, index, combination, res):\n    if index == len(arr):\n        res.append(combination)\n        return\n\n    for i in range(index, len(arr)):\n        combination.append(arr[i])\n        combinations_helper(arr, i + 1, combination, res)\n        combination.pop()\n\n\nif __name__ == \"__main__\":\n    print(combinations([1, 2, 3, 4], 3))\n    print(combinations([1, 2, 3, 4], 4))"
    },
    {
      "rank": 49,
      "score": 8.0,
      "candidate": "def combination(elements):\n    result = []\n    for i in range(len(elements)):\n        for j in range(len(elements)):\n            result.append(elements[i] + \" \" + elements[j])\n    return result\n\nprint(combination([1, 2, 3]))\nprint(combination([]))\nprint(combination([1, 2, 3, 4]))\nprint(combination([1, 2, 3, 4, 5]))\nprint(combination([1, 2, 3, 4, 5, 6]))\nprint(combination([1, 2, 3, 4, 5, 6, 7]))"
    },
    {
      "rank": 50,
      "score": 8.0,
      "candidate": "def combinations(arr, n):\n    return combinations_helper(arr, n, [])\n\ndef combinations_helper(arr, n, result):\n    if n == 0:\n        result.append(result)\n        return\n\n    for i in range(len(arr)):\n        result = combinations_helper(arr[i+1:], n-1, result)\n        result.append([arr[i]])\n    return result\n\nif __name__ == \"__main__\":\n    print(combinations([1,2,3], 3))"
    },
    {
      "rank": 51,
      "score": 8.0,
      "candidate": "def combination(elements, n):\n    combinations = []\n    comb = []\n    for i in range(n):\n        comb = combinations + [comb + [elements[i]]]\n    return comb\n\n\nprint(combination([1, 2, 3, 4], 4))\nprint(combination([1, 2, 3, 4], 5))\nprint(combination([1, 2, 3, 4], 6))\nprint(combination([1, 2, 3, 4], 7))\nprint(combination([1, 2, 3, 4], 8))\nprint(combination([1, 2, 3, 4], 9))\nprint(combination([1, 2, 3, 4], 10))"
    },
    {
      "rank": 52,
      "score": 8.0,
      "candidate": "def combination(arr, n):\n    arr.sort()\n    if n == 1:\n        return [arr]\n    else:\n        return combination(arr[1:], n - 1) + combination(arr[:-1], n)\n\n\nprint(combination([1, 2, 3], 3))"
    },
    {
      "rank": 53,
      "score": 8.0,
      "candidate": "def combinations(arr, n):\n    if n == 0:\n        return []\n    if n == 1:\n        return [[i] for i in arr]\n    if n == 2:\n        return [[i, j] for i in arr for j in arr]\n\n    return combinations(arr[1:], n - 1) + combinations(arr[1:], n)\n\n\nprint(combinations([1, 2, 3], 4))\nprint(combinations([1, 2, 3], 5))"
    },
    {
      "rank": 54,
      "score": 8.0,
      "candidate": "def possible_combinations(arr, n):\n    return _possible_combinations(arr, n, [])\n\ndef _possible_combinations(arr, n, combinations):\n    if len(combinations) == n:\n        combinations.append(list(combinations))\n        return combinations\n    for i in range(n):\n        if i > 0 and arr[i] == arr[i - 1]:\n            continue\n        combinations.append(arr[:i] + [arr[i]] + arr[i + 1:])\n        _possible_combinations(arr, n, combinations)\n        combinations.pop()\n    return combinations\n\nprint(possible_combinations([1, 2, 3], 3))"
    },
    {
      "rank": 55,
      "score": 8.0,
      "candidate": "def combination_list(lst, n):\n    return comb(lst, n, [])\n\n\ndef comb(lst, n, combination):\n    if n == 0:\n        combination.append(lst)\n        return combination\n\n    for i in range(n):\n        comb(lst, n - 1, combination)\n\n        lst.pop()\n\n    return combination\n\n\nprint(combination_list([1, 2, 3], 3))"
    },
    {
      "rank": 56,
      "score": 8.0,
      "candidate": "def combinations(nums, k):\n    if k == 0:\n        return [[]]\n    if k == 1:\n        return [[num] for num in nums]\n    return [[num] + x for x in combinations(nums, k - 1) for num in x]\n\n\nprint(combinations([1, 2, 3], 2))"
    },
    {
      "rank": 57,
      "score": 8.0,
      "candidate": "def combinations(lst):\n    if not lst:\n        return []\n    return [x + [y] for x in lst for y in combinations(lst[1:])]\n\n\nprint(combinations([1, 2, 3]))"
    },
    {
      "rank": 58,
      "score": 8.0,
      "candidate": "def combination(nums, n):\n    if n == 1:\n        return [nums]\n    else:\n        return [list(x) + y for x in combination(nums, n - 1) for y in combination(nums, n - 1)]\n\n\nprint(combination([1, 2, 3], 3))"
    },
    {
      "rank": 59,
      "score": 8.0,
      "candidate": "def find_comb(arr, n):\n    if n == 0:\n        return []\n    elif n == 1:\n        return [[i] for i in arr]\n    else:\n        return find_comb(arr, n-1) + [[i] + j for j in find_comb(arr, n-1)]\n\n\nprint(find_comb([1, 2, 3], 3))\nprint(find_comb([1, 2, 3], 4))"
    },
    {
      "rank": 60,
      "score": 8.0,
      "candidate": "def combinations(nums, k):\n    if k == 0:\n        return [[]]\n    if k == 1:\n        return [[n] for n in nums]\n\n    combos = []\n    for i in range(len(nums)):\n        for j in combinations(nums[i:], k - 1):\n            combos.append([nums[i]] + j)\n    return combos"
    },
    {
      "rank": 61,
      "score": 8.0,
      "candidate": "def combinations(arr, n):\n    res = []\n    res.append([])\n    for i in range(1, n+1):\n        for j in res:\n            for k in range(i):\n                res.append(j+[arr[k]])\n    return res\n\n\nif __name__ == \"__main__\":\n    print(combinations([1, 2, 3], 4))"
    },
    {
      "rank": 62,
      "score": 8.0,
      "candidate": "def combination(l, n):\n    if l == []:\n        return []\n    elif l[0] == n:\n        return [[l[0]]]\n    else:\n        return combination(l[1:], n) + [\n            [l[0] + str(i) for i in range(1, n + 1)]\n        ]\n\n\ndef main():\n    l = [1, 2, 3, 4]\n    n = 4\n    print(combination(l, n))\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 63,
      "score": 8.0,
      "candidate": "def all_combinations(arr, n):\n    if len(arr) == 1:\n        return [arr]\n\n    result = []\n    for i in range(n):\n        for j in all_combinations(arr[1:], n):\n            result.append([arr[0]] + j)\n\n    return result\n\n\nif __name__ == \"__main__\":\n    assert all_combinations([1, 2, 3], 3) == [[1, 2, 3], [1, 3, 2], [2, 1, 3], [2, 3, 1], [3, 1, 2], [3, 2, 1]]\n    assert all_combinations([1, 2, 3], 4) == [[1, 2, 3], [1, 3, 2], [2, 1, 3], [2, 3, 1], [3, 1, 2], [3, 2, 1]]\n    assert all_combinations([1, 2, 3], 5) == [[1, 2, 3], [1, 3, 2], [2, 1, 3], [2, 3, 1], [3, 1, 2], [3, 2, 1]]\n    assert all_combinations([1, 2, 3], 6) == [[1, 2, 3], [1, 3, 2], [2, 1, 3], [2, 3, 1], [3, 1, 2], [3, 2, 1]]\n    assert all_combinations([1, 2, 3], 7) == [[1, 2, 3], [1, 3, 2], [2, 1, 3], [2, 3, 1], [3, 1, 2], [3, 2, 1]]"
    },
    {
      "rank": 64,
      "score": 8.0,
      "candidate": "def combination(list_of_elements):\n    list_of_elements.sort()\n    result = []\n    for i in range(len(list_of_elements)):\n        for j in range(i+1, len(list_of_elements)):\n            result.append([list_of_elements[i], list_of_elements[j]])\n    return result\n\n\nlist_of_elements = [1, 2, 3, 4, 5]\nprint(combination(list_of_elements))"
    },
    {
      "rank": 65,
      "score": 8.0,
      "candidate": "def find_combination(nums, n):\n    nums.sort()\n    result = []\n    if n == 0:\n        return [nums]\n    for i in range(n):\n        for j in range(len(nums)):\n            if i == 0 or nums[j]!= nums[i-1]:\n                result.append([nums[i]] + find_combination(nums[j+1:], n-1))\n    return result\n\n\nnums = [1, 2, 3, 4]\nn = len(nums)\nprint(find_combination(nums, n))"
    },
    {
      "rank": 66,
      "score": 8.0,
      "candidate": "def combination(n, nums):\n    if n == 0:\n        return [[]]\n\n    result = []\n    for i in range(len(nums)):\n        for combination in combination(n - 1, nums):\n            result.append([nums[i]] + combination)\n\n    return result\n\n\nprint(combination(4, [1, 2, 3]))\nprint(combination(4, [1, 2, 3, 4]))\nprint(combination(4, [1, 2, 3, 4, 5, 6]))\nprint(combination(4, [1, 2, 3, 4, 5, 6, 7]))\nprint(combination(4, [1, 2, 3, 4, 5, 6, 7, 8]))"
    },
    {
      "rank": 67,
      "score": 8.0,
      "candidate": "def combinations(lst, n):\n    res = []\n\n    def helper(lst, idx, res):\n        if idx == n:\n            res.append(lst[:])\n            return\n\n        for i in range(idx, len(lst)):\n            helper(lst, i, res)\n            lst.append(lst[i])\n\n    helper(lst, 0, res)\n    return res\n\n\ndef main():\n    lst = [1, 2, 3, 4, 5]\n    print(combinations(lst, 3))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 68,
      "score": 8.0,
      "candidate": "def combos(nums):\n    if len(nums) == 1:\n        return [nums]\n    else:\n        return list(combinations(nums[1:], len(nums))) + list(combinations(nums[:-1], len(nums)))\n\n\ndef combinations(nums, n):\n    res = []\n    for i in range(n):\n        for j in range(len(nums)):\n            res.append(nums[j] + nums[i])\n    return res\n\n\nif __name__ == '__main__':\n    assert combos([1, 2, 3]) == [[1, 2, 3], [1, 3, 2], [2, 1, 3], [2, 3, 1], [3, 1, 2], [3, 2, 1]]\n    assert combos([]) == []"
    },
    {
      "rank": 69,
      "score": 8.0,
      "candidate": "def combinations(nums, k):\n    if k==0:\n        return [[]]\n    if k==1:\n        return [[i] for i in nums]\n    result = []\n    for i in range(len(nums)):\n        for j in combinations(nums[:i]+nums[i+1:],k-1):\n            result.append([nums[i]] + j)\n    return result\n\nprint(combinations([1,2,3], 3))"
    },
    {
      "rank": 70,
      "score": 8.0,
      "candidate": "def combinations(nums, n):\n    if n == 0:\n        return []\n    if n == 1:\n        return [[]]\n    if n == 2:\n        return [[1]]\n    result = []\n    for i in range(n):\n        for j in combinations(nums, n - i - 1):\n            result.append([i] + j)\n    return result\n\n\nif __name__ == '__main__':\n    nums = [1, 2, 3]\n    n = len(nums)\n    print(combinations(nums, n))"
    },
    {
      "rank": 71,
      "score": 8.0,
      "candidate": "from typing import List\n\n\ndef combination(nums: List[int], n: int) -> List[List[int]]:\n    \"\"\"\n    :type nums: List[int]\n    :type n: int\n    :rtype: List[List[int]]\n    \"\"\"\n    result = []\n    combos = [[]]\n\n    for i in range(n):\n        for comb in combos:\n            result.append([nums[i]] + comb)\n        combos.append([nums[i]])\n\n    return result\n\n\nif __name__ == '__main__':\n    assert combination([1, 2, 3], 2) == [[1, 2, 3], [1, 3, 2], [2, 1, 3], [2, 3, 1], [3, 1, 2], [3, 2, 1], [3, 2, 3], [2, 3, 3], [1, 3, 3], [3, 2, 2]]\n    assert combination([1, 2, 3], 4) == [[1, 2, 3], [1, 3, 2], [2, 1, 3], [2, 3, 1], [3, 1, 2], [3, 2, 3]]"
    },
    {
      "rank": 72,
      "score": 8.0,
      "candidate": "def combinations(arr, n):\n    if n == 0:\n        return [[]]\n    result = []\n    for i in range(n):\n        for combination in combinations(arr, n - i - 1):\n            result.append(combination + [arr[i]])\n    return result\n\n\narr = [1, 2, 3]\nn = len(arr)\nprint(combinations(arr, n))"
    },
    {
      "rank": 73,
      "score": 8.0,
      "candidate": "def find_combinations(l, n):\n    if n == 1:\n        return [[l[0]]]\n    res = []\n    for i in range(n):\n        if i == 0:\n            res += find_combinations(l[1:], n - i - 1)\n        else:\n            for j in res:\n                res.append([l[i]] + j)\n    return res\n\n\nif __name__ == \"__main__\":\n    print(find_combinations([1, 2, 3], 4))"
    },
    {
      "rank": 74,
      "score": 8.0,
      "candidate": "def combinations(arr, n):\n    # Write your code here\n    combinations = []\n    combinations.append([])\n    for i in range(n):\n        for j in combinations[-1]:\n            combinations.append(j + [arr[i]])\n    return combinations\n\n\nprint(combinations([1, 2, 3], 3))\nprint(combinations([1, 2, 3, 4, 5], 4))\nprint(combinations([1, 2, 3, 4, 5, 6, 7, 8, 9], 5))\nprint(combinations([1, 2, 3, 4, 5, 6, 7, 8, 9], 6))\nprint(combinations([1, 2, 3, 4, 5, 6, 7, 8, 9], 7))\nprint(combinations([1, 2, 3, 4, 5, 6, 7, 8, 9], 8))"
    },
    {
      "rank": 75,
      "score": 8.0,
      "candidate": "def find_combinations(lst, n):\n    if n == 0:\n        return []\n    if n == 1:\n        return [lst]\n    return find_combinations(lst[1:], n - 1) + find_combinations(lst, n - 1)\n\n\nif __name__ == '__main__':\n    assert find_combinations([1, 2], 3) == [[1, 2], [1, 2, 3]]\n    assert find_combinations([1], 3) == [[1], [1, 2], [1, 2, 3]]\n    assert find_combinations([2], 3) == [[1, 2], [1, 2, 3], [2], [2, 3]]\n    assert find_combinations([1, 2, 3], 4) == [[1, 2, 3], [1, 2, 3, 4], [1, 2, 3, 4, 5], [2, 3, 4, 5], [2, 3, 4, 5, 6], [3, 4, 5, 6],\n                                             [3, 4, 5, 6, 7], [3, 4, 5, 6, 7, 8]]"
    },
    {
      "rank": 76,
      "score": 8.0,
      "candidate": "def combination(list, n):\n    comb = []\n    comb.append([])\n    for i in range(n):\n        comb.append([])\n        for j in range(len(list)):\n            if j < i:\n                comb[i].append(list[j])\n            else:\n                comb[i].append(list[j] + list[i])\n    return comb\n\nprint(combination([1,2,3,4,5], 3))"
    },
    {
      "rank": 77,
      "score": 8.0,
      "candidate": "def all_combinations(n, arr):\n    if n == 1:\n        return [arr]\n\n    return [arr[i] + [arr[i + 1]] for i in range(n - 1)]\n\n\ndef test_all_combinations():\n    assert all_combinations(3, [1, 2]) == [\n        [1, 2],\n        [1, 2, 3],\n        [1, 2, 3, 4],\n        [1, 2, 3, 4, 5],\n        [1, 2, 3, 4, 5, 6],\n        [1, 2, 3, 4, 5, 6, 7],\n        [1, 2, 3, 4, 5, 6, 7, 8],\n        [1, 2, 3, 4, 5, 6, 7, 8, 9],\n        [1, 2, 3, 4, 5, 6, 7, 8, 9, 10],\n        [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11],\n        [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12],\n        [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13],\n        [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14],\n        [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15],\n        [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16],\n        [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17],\n        [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18],\n        [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17,"
    },
    {
      "rank": 78,
      "score": 8.0,
      "candidate": "def combinations(arr):\n    arr.sort()\n    n = len(arr)\n    combinations = []\n    for i in range(n+1):\n        for j in range(i+1, n+1):\n            combinations.append((arr[i], arr[j]))\n    return combinations\n\narr = [1, 2, 3, 4]\nprint(combinations(arr))"
    },
    {
      "rank": 79,
      "score": 8.0,
      "candidate": "def all_combinations(lst, n):\n    return all_combinations_recursive(lst, 0, [], n)\n\n\ndef all_combinations_recursive(lst, i, path, n):\n    if len(path) == n:\n        res.append(path)\n        return\n\n    for j in range(i, n):\n        if lst[i] < lst[j]:\n            return\n        path.append(lst[i])\n        all_combinations_recursive(lst, j + 1, path, n)\n        path.pop()"
    },
    {
      "rank": 80,
      "score": 8.0,
      "candidate": "def combination(lst, n):\n    if n == 0:\n        return [[]]\n\n    return [combination(lst, i) + combination(lst, n-i-1) for i in range(n)]\n\n\nprint(combination([1, 2, 3], 3))"
    },
    {
      "rank": 81,
      "score": 8.0,
      "candidate": "def find_combinations(nums, k):\n    if k == 0:\n        return []\n\n    if len(nums) < k:\n        return []\n\n    combinations = find_combinations(nums[1:], k - 1)\n    combinations.append([nums[0]])\n\n    for i in range(1, len(nums)):\n        combinations.append([nums[i]])\n        for j in range(len(combinations)):\n            for combo in combinations:\n                combo.append(nums[i])\n\n    return combinations\n\n\ndef main():\n    print(find_combinations([1, 2, 3], 2))\n    print(find_combinations([1, 2, 3], 1))\n    print(find_combinations([1, 2, 3], 5))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 82,
      "score": 8.0,
      "candidate": "def find_comb(arr, n):\n    result = []\n    find_comb_helper(arr, [], n, 0, result)\n    return result\n\n\ndef find_comb_helper(arr, combination, n, current_index, result):\n    if current_index == n:\n        result.append(combination)\n        return\n\n    for i in range(current_index, n):\n        combination.append(arr[i])\n        find_comb_helper(arr, combination, n, i + 1, result)\n        combination.pop()"
    },
    {
      "rank": 83,
      "score": 8.0,
      "candidate": "def combination(arr, n):\n    if n == 1:\n        return [[arr[0]]]\n    else:\n        return [[arr[i] + arr[j] for i in range(n)] for j in range(n)]\n\n\nif __name__ == \"__main__\":\n    arr = [1, 2, 3, 4, 5]\n    print(combination(arr, len(arr)))"
    },
    {
      "rank": 84,
      "score": 8.0,
      "candidate": "def find_combinations(arr, n):\n    if len(arr) == 0:\n        return []\n    if len(arr) == 1:\n        return [[arr[0]]]\n    result = []\n    for i in range(1, n + 1):\n        temp = []\n        for j in arr:\n            for k in find_combinations(arr[1:], i):\n                temp.append([j] + k)\n        result.append(temp)\n    return result\n\n\ndef main():\n    print(find_combinations([1, 2, 3], 3))\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 85,
      "score": 8.0,
      "candidate": "def combinations(arr, n):\n    # Write your code here\n    if len(arr) == 0 or len(arr) == 1:\n        return [[]]\n    res = []\n    for i in range(n):\n        for j in combinations(arr[1:], i + 1):\n            res.append([arr[0]] + j)\n    return res"
    },
    {
      "rank": 86,
      "score": 8.0,
      "candidate": "def find_combinations(lst, n):\n    if len(lst) == 0:\n        return [[]]\n    else:\n        res = []\n        for i in range(n):\n            lst_temp = lst[:]\n            lst_temp.pop(i)\n            new_res = find_combinations(lst_temp, len(lst_temp))\n            for j in new_res:\n                res.append(j + [lst[i]])\n        return res\n\n\nif __name__ == '__main__':\n    lst = [1, 2, 3]\n    n = len(lst)\n    res = find_combinations(lst, n)\n    print(res)"
    },
    {
      "rank": 87,
      "score": 8.0,
      "candidate": "def combination(arr, n):\n    # Write your code here\n    if n == 0:\n        return []\n    elif n == 1:\n        return [arr]\n    else:\n        return [x + y for x in combination(arr, n - 1) for y in combination(arr, n - 1)]\n\n\nprint(combination([1, 2, 3], 2))"
    },
    {
      "rank": 88,
      "score": 8.0,
      "candidate": "def combinations(nums, k):\n    return combinations_helper(nums, k, [])\n\n\ndef combinations_helper(nums, k, result):\n    if k == 0:\n        result.append(result[:])\n        return\n    for i in range(len(nums)):\n        if i == 0 or nums[i]!= nums[i - 1]:\n            combinations_helper(nums, k - 1, result)\n            result.append(nums[i])\n\n\nif __name__ == \"__main__\":\n    test_cases = [\n        ([1, 2, 3], 3),\n        ([1, 2, 3, 4], 4),\n        ([1, 2, 3, 4, 5], 5),\n        ([1, 2, 3, 4, 5, 6], 6),\n        ([1, 2, 3, 4, 5, 6, 7, 8, 9], 9),\n        ([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 10),\n    ]\n\n    for test_case in test_cases:\n        print(combinations(*test_case))"
    },
    {
      "rank": 89,
      "score": 8.0,
      "candidate": "def comb_list(arr):\n\tif len(arr) == 0:\n\t\treturn [[]]\n\telif len(arr) == 1:\n\t\treturn [[arr[0]]]\n\telse:\n\t\tresult = []\n\t\tfor i in range(len(arr)):\n\t\t\tcomb_list_1 = comb_list(arr[:i+1])\n\t\t\tfor j in comb_list_1:\n\t\t\t\tresult.append([arr[i]] + j)\n\t\treturn result\n\nprint(comb_list([1,2,3]))\nprint(comb_list([1,2,3,4]))\nprint(comb_list([1,2,3,4,5]))"
    },
    {
      "rank": 90,
      "score": 1.0,
      "candidate": "def find_combos(nums):\n    res = []\n    def dfs(i, comb, result):\n        if len(comb) == len(nums):\n            res.append(result)\n            return\n        for j in range(i, len(nums)):\n            comb.append(nums[j])\n            dfs(j + 1, comb, result)\n            comb.pop()\n    dfs(0, [], [])\n    return res\n\n\nnums = [1, 2, 3]\nprint(find_combos(nums))"
    },
    {
      "rank": 91,
      "score": 1.0,
      "candidate": "import itertools\n\n\ndef find_combinations(nums):\n    if len(nums) == 0:\n        return []\n    return find_combinations_helper(nums, 0, [])\n\n\ndef find_combinations_helper(nums, idx, result):\n    if idx == len(nums):\n        result.append(result)\n        return\n    for i in range(idx, len(nums)):\n        find_combinations_helper(nums, i + 1, result)\n\n\nif __name__ == \"__main__\":\n    print(find_combinations([1, 2, 3]))"
    },
    {
      "rank": 92,
      "score": 1.0,
      "candidate": "def find_combinations(arr, n):\n    return find_combinations_recursive(arr, [], n)\n\n\ndef find_combinations_recursive(arr, comb, n):\n    if len(comb) == n:\n        return [comb]\n    else:\n        for i in range(len(arr)):\n            comb.append(arr[i])\n            find_combinations_recursive(arr, comb, n)\n            comb.pop()\n        return comb\n\n\nif __name__ == \"__main__\":\n    print(find_combinations([1, 2, 3], 2))\n    print(find_combinations([1, 2, 3], 3))"
    },
    {
      "rank": 93,
      "score": 1.0,
      "candidate": "def find_combinations(arr, n):\n    # write your code here\n    if n == 0:\n        return []\n    if n == 1:\n        return [[arr[0]]]\n    return [x + y for x in find_combinations(arr[1:], n - 1) for y in find_combinations(arr, n - 1)]\n\n\nif __name__ == \"__main__\":\n    arr = [1, 2, 3]\n    print(find_combinations(arr, 3))"
    },
    {
      "rank": 94,
      "score": 1.0,
      "candidate": "def all_combinations(arr):\n    all_combinations = []\n    return all_combinations\n\n\narr = [1, 2, 3]\n\nall_combinations(arr)"
    },
    {
      "rank": 95,
      "score": 1.0,
      "candidate": "def find_all_combinations(arr, n):\n    # Write your code here\n    arr.sort()\n    if n == 1:\n        return [arr]\n    else:\n        return find_all_combinations(arr[1:], n - 1) + [arr]\n\n\nprint(find_all_combinations([1, 2, 3], 4))"
    },
    {
      "rank": 96,
      "score": 1.0,
      "candidate": "def find_combinations(nums, k):\n    # Your code here\n    if not nums:\n        return []\n    result = []\n    return find_combinations_helper(nums, k, [], result)\n\n\ndef find_combinations_helper(nums, k, current_comb, result):\n    if k == 0:\n        result.append(current_comb)\n        return\n    for i in range(len(nums)):\n        if i > k:\n            break\n        current_comb.append(nums[i])\n        find_combinations_helper(nums, k - 1, current_comb, result)\n        current_comb.pop()\n\n\nif __name__ == \"__main__\":\n    find_combinations([1, 2, 3], 4)"
    },
    {
      "rank": 97,
      "score": 1.0,
      "candidate": "def combinations(a):\n    return combinations_helper(a, [])\n\n\ndef combinations_helper(a, combinations):\n    if len(combinations) == len(a):\n        return combinations\n\n    for i in range(len(a)):\n        new_combinations = combinations + [a[i]]\n        combinations_helper(a, new_combinations)\n\n    return combinations\n\n\ndef test_combinations():\n    assert combinations([1, 2, 3]) == [\n        [1, 2, 3],\n        [1, 2, 3, 4],\n        [1, 2, 3, 4, 5],\n        [1, 2, 3, 4, 5, 6],\n        [1, 2, 3, 4, 5, 6, 7],\n        [1, 2, 3, 4, 5, 6, 7, 8],\n        [1, 2, 3, 4, 5, 6, 7, 8, 9],\n        [1, 2, 3, 4, 5, 6, 7, 8, 9, 10],\n        [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11],\n        [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12],\n        [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13],\n        [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14],\n        [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15],\n        [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16],\n        [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17],\n        [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19],\n        [1, 2"
    },
    {
      "rank": 98,
      "score": 1.0,
      "candidate": "def combinations(arr, n):\n    if n == 0:\n        return []\n    else:\n        return combinations(arr, n - 1) + [[arr[0]]]\n\n\nprint(combinations([1, 2, 3], 3))"
    },
    {
      "rank": 99,
      "score": 1.0,
      "candidate": "def get_combos(arr, n):\n    # Write your code here\n    res = []\n    get_combos_helper(arr, [], res, n)\n    return res\n\n\ndef get_combos_helper(arr, cur_comb, res, n):\n    if n == 0:\n        res.append(cur_comb)\n        return\n    for i in range(n):\n        cur_comb.append(arr[i])\n        get_combos_helper(arr, cur_comb, res, n - 1)\n        cur_comb.pop()\n\n\nif __name__ == \"__main__\":\n    arr = [1, 2, 3]\n    n = len(arr)\n    res = get_combos(arr, n)\n    print(res)"
    },
    {
      "rank": 100,
      "score": 1.0,
      "candidate": "from typing import List\n\n\ndef comb(arr: List[int], n: int) -> List[List[int]]:\n    # TODO: Implement this function\n    # Your code here\n\n    return []\n\n\nif __name__ == '__main__':\n    assert comb([1, 2, 3], 2) == [[1, 2, 3], [1, 3, 2], [2, 1, 3], [2, 3, 1], [3, 1, 2], [3, 2, 1]]\n    assert comb([1, 2, 3], 3) == [[1, 2, 3], [1, 3, 2], [2, 1, 3], [2, 3, 1], [3, 1, 2], [3, 2, 1]]\n    assert comb([1, 2, 3], 4) == [[1, 2, 3], [1, 3, 2], [2, 1, 3], [2, 3, 1], [3, 1, 2], [3, 2, 1]]\n    assert comb([1, 2, 3], 5) == [[1, 2, 3], [1, 3, 2], [2, 1, 3], [2, 3, 1], [3, 1, 2], [3, 2, 1]]\n    assert comb([1, 2, 3], 6) == [[1, 2, 3], [1, 3, 2], [2, 1, 3], [2, 3, 1], [3, 1, 2], [3, 2, 1]]\n    assert comb([1, 2, 3], 7) == [[1, 2, 3], [1, 3, 2], [2, 1, 3], [2, 3, 1], [3, 1, 2], [3, 2, 1]]\n    assert comb([1, 2, 3], 8) == [[1, 2, 3], [1, 3, 2], [2, 1, 3], [2, 3, 1], [3, 1, 2], [3, 2, 1]]\n    assert comb([1, 2, 3], 9) == [[1, 2, 3], [1, 3, 2], [2, 1, 3], [2, 3, 1], [3, 1, 2], [3, 2, 1], [4"
    }
  ]
}