{
  "timestamp": "2025-09-14T14:11:07.759501",
  "method": "improved_llm_judge",
  "judge_model": "codellama/CodeLlama-7b-Python-hf",
  "target_model": "codet5-770m",
  "dataset": "mbpp",
  "problem_number": 234,
  "total_candidates": 100,
  "results": [
    {
      "rank": 1,
      "score": 10.0,
      "candidate": "class Solution(object):\n    def maxSubSequence(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        if not nums:\n            return 0\n        return self.helper(nums, 0, len(nums) - 1)\n\n    def helper(self, nums, left, right):\n        if left == right:\n            return nums[left]\n        if nums[left] > nums[right]:\n            return self.helper(nums, left + 1, right)\n        else:\n            return self.helper(nums, left, right - 1)"
    },
    {
      "rank": 2,
      "score": 10.0,
      "candidate": "class Solution(object):\n    def maxSubSequence(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        if not nums:\n            return 0\n\n        res = 0\n        for i in range(len(nums)):\n            res = max(nums[i], res + nums[i])\n\n        return res"
    },
    {
      "rank": 3,
      "score": 10.0,
      "candidate": "def max_subsequence(arr):\n    max_sum = 0\n    current_sum = 0\n\n    for i in range(len(arr)):\n        current_sum += arr[i]\n        if i > 0:\n            max_sum = max(max_sum, current_sum)\n\n    return max_sum\n\n\ndef main():\n    arr = [2, -1, 2, 3, 1, -1, 4]\n    print(max_subsequence(arr))\n\n\nmain()"
    },
    {
      "rank": 4,
      "score": 10.0,
      "candidate": "def bi_tonic_sum(arr):\n    if len(arr) < 2:\n        return 0\n    if arr[0] == 0:\n        return arr[0]\n    return max(arr[0], arr[1] + bi_tonic_sum(arr[2:]))\n\n\nif __name__ == \"__main__\":\n    arr = [1, -2, 1, -3, 4, -2, -1, 5, -3, 2, 1, -1, -4, -2, -5, -3, 2, 1, -2, -4, -5, -3, 2, 1, -2, -4, -5, -3, 2, 1, -2, -4, -5, -3, 2, 1, -2, -4, -5, -3, 2, 1, -2, -4, -5, -3, 2, 1, -2, -4, -5, -3, 2, 1, -2, -4, -5, -3, 2, 1, -2, -4, -5, -3, 2, 1, -2, -4, -5, -3, 2, 1, -2, -4, -5, -3, 2, 1, -2, -4, -5, -3, 2, 1, -2, -4, -5, -3, 2, 1, -2, -4, -5, -3, 2, 1, -2, -4, -5, -3, 2, 1, -2, -4, -5, -3, 2, 1, -2, -4, -5, -3, 2, 1, -2, -4, -5, -3, 2, 1, -2, -4, -5, -3, 2, 1, -2, -4, -5, -3, 2, 1, -2, -4, -5, -3, 2, 1, -2, -4, -5, -3, 2, 1, -2, -4, -5, -3, 2, 1, -2, -4, -5, -3, 2, 1, -2, -4, -5, -3"
    },
    {
      "rank": 5,
      "score": 10.0,
      "candidate": "def max_sum_of_bi_tonic_subseq(arr):\n    max_sum = float('-inf')\n    current_sum = 0\n\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            current_sum += arr[i] + arr[j]\n            if current_sum > max_sum:\n                max_sum = current_sum\n    return max_sum\n\n\narr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]\nprint(max_sum_of_bi_tonic_subseq(arr))"
    },
    {
      "rank": 6,
      "score": 10.0,
      "candidate": "class Solution(object):\n    def maxSubSequence(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        if not nums:\n            return 0\n        max_sum = nums[0]\n        for num in nums[1:]:\n            max_sum = max(max_sum, num + max_sum)\n        return max_sum\n\n\nif __name__ == \"__main__\":\n    nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    print Solution().maxSubSequence(nums)"
    },
    {
      "rank": 7,
      "score": 10.0,
      "candidate": "def max_sum(arr):\n    if len(arr) <= 1:\n        return max(arr)\n    max_sum = max(arr[0], arr[1])\n    for i in range(2, len(arr)):\n        max_sum = max(max_sum + arr[i], arr[i])\n    return max_sum\n\n\narr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nprint(max_sum(arr))"
    },
    {
      "rank": 8,
      "score": 10.0,
      "candidate": "def max_subsequence(arr):\n    n = len(arr)\n    if n == 1:\n        return arr[0]\n    if n == 2:\n        return max(arr[0], arr[1])\n    if n == 3:\n        return max(arr[0], arr[1], arr[2])\n    if n == 4:\n        return max(arr[0], arr[1], arr[2], arr[3])\n    if n == 5:\n        return max(arr[0], arr[1], arr[2], arr[3], arr[4])\n    if n == 6:\n        return max(arr[0], arr[1], arr[2], arr[3], arr[4], arr[5])\n    if n == 7:\n        return max(arr[0], arr[1], arr[2], arr[3], arr[4], arr[5], arr[6])\n    if n == 8:\n        return max(arr[0], arr[1], arr[2], arr[3], arr[4], arr[5], arr[6], arr[7])\n    if n == 9:\n        return max(arr[0], arr[1], arr[2], arr[3], arr[4], arr[5], arr[6], arr[7], arr[8])\n\nprint(max_subsequence([4, 2, 5, 9, 7, 1, 3, 6, 8, 2, 4]))"
    },
    {
      "rank": 9,
      "score": 10.0,
      "candidate": "def find_max_sum_bi_tonic(arr):\n    n = len(arr)\n    if n == 0:\n        return 0\n    if n == 1:\n        return arr[0]\n\n    dp = [[0] * (n + 1) for _ in range(n + 1)]\n    dp[0][0] = arr[0]\n\n    for i in range(1, n + 1):\n        for j in range(1, n + 1):\n            dp[i][j] = max(dp[i - 1][j], dp[i - 1][j - 1] + arr[i - 1])\n\n    return dp[n][n]\n\n\nif __name__ == \"__main__\":\n    print(find_max_sum_bi_tonic([1, 2, 3, 4, 5, 6, 7, 8, 9]))"
    },
    {
      "rank": 10,
      "score": 10.0,
      "candidate": "class Solution(object):\n    def maxSubSequence(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        if len(nums) == 0:\n            return 0\n        max_sum = float(\"-inf\")\n        for i in range(len(nums)):\n            for j in range(i+1, len(nums)):\n                max_sum = max(max_sum, nums[i] + nums[j])\n        return max_sum"
    },
    {
      "rank": 11,
      "score": 10.0,
      "candidate": "def max_bi_tonic_sub_sequence(arr):\n    if len(arr) < 2:\n        return max(arr)\n    else:\n        return max(arr[0] + max_bi_tonic_sub_sequence(arr[1:]), arr[0] + max_bi_tonic_sub_sequence(arr[1:-1]))\n\narr = [1, 2, 3, 4, 5, 6, 7, 8, 9]\nprint(max_bi_tonic_sub_sequence(arr))"
    },
    {
      "rank": 12,
      "score": 10.0,
      "candidate": "def max_sum_bi_tonic(array):\n    n = len(array)\n    if n == 0:\n        return 0\n    if n == 1:\n        return array[0]\n    if n == 2:\n        return max(array[0], array[1])\n    if n == 3:\n        return max(array[0], array[1], array[2])\n    max_sum = 0\n    for i in range(2, n):\n        max_sum = max(max_sum, array[i] + array[i - 1])\n    return max_sum\n\n\ndef main():\n    print(max_sum_bi_tonic([-2, 1, -3, 4, -1, 2, 1, -5, 4]))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 13,
      "score": 10.0,
      "candidate": "def max_sum(arr):\n    # Write your code here\n    n = len(arr)\n    dp = [0 for _ in range(n)]\n    dp[0] = arr[0]\n    for i in range(1, n):\n        for j in range(i):\n            if arr[i] > arr[j]:\n                dp[i] = max(dp[i], dp[j] + arr[i])\n    return dp[n-1]\n\n\nprint(max_sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\nprint(max_sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12]))\nprint(max_sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14]))\nprint(max_sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15]))\nprint(max_sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16]))\nprint(max_sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100]))"
    },
    {
      "rank": 14,
      "score": 10.0,
      "candidate": "def max_sum_bi_tonic_subsequence(arr):\n    n = len(arr)\n    if n == 0:\n        return 0\n    if n == 1:\n        return arr[0]\n    if n == 2:\n        return arr[0] + arr[1]\n    if n == 3:\n        return arr[0] + arr[1] + arr[2]\n\n    if arr[0] > arr[1] and arr[0] > arr[2]:\n        return max_sum_bi_tonic_subsequence(arr[1:])\n    elif arr[1] > arr[2]:\n        return max_sum_bi_tonic_subsequence(arr[:-1])\n    else:\n        return max_sum_bi_tonic_subsequence(arr[1:]) + max_sum_bi_tonic_subsequence(arr[:-1])\n\nprint(max_sum_bi_tonic_subsequence([1, 2, 3, 4, 5, 6, 7, 8]))"
    },
    {
      "rank": 15,
      "score": 10.0,
      "candidate": "class Solution(object):\n    def maxSubSequence(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        if len(nums) == 0:\n            return 0\n\n        m = 0\n        for i in range(1, len(nums)):\n            m = max(m, nums[i] + nums[i - 1])\n\n        return m"
    },
    {
      "rank": 16,
      "score": 10.0,
      "candidate": "class Solution(object):\n    def maxSubSequence(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        if not nums:\n            return 0\n        nums.sort()\n        max_sum = nums[0]\n        for i in range(1, len(nums)):\n            max_sum = max(max_sum, nums[i] + nums[i-1])\n        return max_sum\n\na = Solution()\nprint(a.maxSubSequence([2,-2,3,-3,4]))"
    },
    {
      "rank": 17,
      "score": 10.0,
      "candidate": "class Solution(object):\n    def maxSubArray(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        if len(nums) < 2:\n            return sum(nums)\n\n        max_sum = nums[0]\n        for i in range(1, len(nums)):\n            max_sum = max(max_sum + nums[i], nums[i])\n\n        return max_sum\n\n\ns = Solution()\nprint(s.maxSubArray([-2, 3, -1, 4, -1, 2, 1, -5, 4]))"
    },
    {
      "rank": 18,
      "score": 10.0,
      "candidate": "def max_sub_seq_bi_tonic(array):\n    if len(array) == 1:\n        return array[0]\n    max_val = array[0]\n    for i in range(1, len(array)):\n        max_val = max(max_val + array[i], array[i])\n    return max_val\n\n\ndef test_function(test_case):\n    array = test_case[0]\n    solution = test_case[1]\n    output = max_sub_seq_bi_tonic(array)\n    if output == solution:\n        print(\"Pass\")\n    else:\n        print(\"Fail\")\n\n\ntest_case_0 = [1, 2, 3, 4, 5, 6, 7, 8, 9]\ntest_case_1 = [1, 1, 2, 2, 3, 3, 3, 4, 4, 4]\ntest_case_2 = [1, 1, 2, 2, 3, 3, 3, 4, 4, 4]\ntest_case_3 = [1, 1, 2, 2, 3, 3, 3, 4, 4, 4]\ntest_case_4 = [1, 1, 2, 2, 3, 3, 3, 4, 4, 4]\ntest_case_5 = [1, 1, 2, 2, 3, 3, 3, 3, 4, 4, 4]\ntest_case_6 = [1, 1, 2, 2, 3, 3, 3, 3, 4, 4, 4]\ntest_case_7 = [1, 1, 2, 2, 3, 3, 3, 3, 4, 4, 4]\ntest_case_8 = [1, 1, 2, 2, 3, 3, 3, 3, 4, 4, 4]\ntest_case_9 = [1, 1, 2, 2, 3, 3, 3, 3, 4, 4, 4]\ntest_case_10 = [1, 1, 2, 2, 3, 3, 3, 3, 4, 4, 4]\ntest_case_11 = [1, 1, 2, 2, 3, 3, 3, 3, 4, 4, 4]\ntest_case_12"
    },
    {
      "rank": 19,
      "score": 10.0,
      "candidate": "def max_sum(a):\n    max_sum = 0\n    max_sum_current = 0\n    for i in range(len(a)):\n        max_sum = max(max_sum, max_sum_current + a[i])\n        max_sum_current = a[i]\n    return max_sum\n\nprint(max_sum([5, -2, -1, -3, 4, -2, -1, -5, -4]))"
    },
    {
      "rank": 20,
      "score": 10.0,
      "candidate": "class Solution(object):\n    def maxSubSequence(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        if not nums:\n            return 0\n\n        max_sum = float(\"-inf\")\n        max_sum_cur = float(\"-inf\")\n\n        for i in range(len(nums)):\n            max_sum_cur = max(nums[i], max_sum_cur + nums[i])\n            max_sum = max(max_sum, max_sum_cur)\n\n        return max_sum"
    },
    {
      "rank": 21,
      "score": 9.0,
      "candidate": "def max_sum_of_bi_tonic_subsequence(array):\n    # Write your code here\n    max_sum = 0\n    curr_sum = 0\n    for i in range(len(array)):\n        curr_sum = curr_sum + array[i]\n        max_sum = max(max_sum, curr_sum)\n    return max_sum"
    },
    {
      "rank": 22,
      "score": 8.0,
      "candidate": "def find_max_sum_of_bi_tonic_subseq(arr):\n    if len(arr) < 2:\n        return max(arr)\n\n    # create a dictionary that stores the sum of the subseq\n    subseq_dict = {}\n    for i in range(len(arr)):\n        # if the current element is not already in the dictionary,\n        # then add it to the dictionary and update its sum\n        if arr[i] not in subseq_dict:\n            subseq_dict[arr[i]] = 1\n        else:\n            subseq_dict[arr[i]] += 1\n\n    # find the maximum sum of subseq\n    max_sum = 0\n    for subseq in subseq_dict:\n        max_sum = max(max_sum, subseq + (max_sum - subseq) * subseq)\n\n    return max_sum\n\nif __name__ == '__main__':\n    print(find_max_sum_of_bi_tonic_subseq([1, 2, 3, 4, 5, 6, 7, 8, 9]))\n    print(find_max_sum_of_bi_tonic_subseq([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115,"
    },
    {
      "rank": 23,
      "score": 8.0,
      "candidate": "def max_sum_bi_tonic(arr):\n    n = len(arr)\n    if n == 0:\n        return 0\n    if n == 1:\n        return arr[0]\n    max_sum = arr[0]\n    for i in range(1, n):\n        if arr[i] > max_sum:\n            max_sum = arr[i]\n        else:\n            max_sum += arr[i]\n    return max_sum\n\nprint(max_sum_bi_tonic([1, -2, 3, -2, 1, 5, -2, 4, -2, 3]))"
    },
    {
      "rank": 24,
      "score": 8.0,
      "candidate": "def max_sum_of_bi_tonic_subsequence(arr):\n    length = len(arr)\n    if length == 0:\n        return 0\n\n    if length == 1:\n        return arr[0]\n\n    max_sum_of_bi_tonic_subsequence_1 = max_sum_of_bi_tonic_subsequence(arr[1:])\n    max_sum_of_bi_tonic_subsequence_2 = max_sum_of_bi_tonic_subsequence(arr[:-1])\n    max_sum_of_bi_tonic_subsequence_3 = max_sum_of_bi_tonic_subsequence(arr[1:-1])\n\n    return max(max_sum_of_bi_tonic_subsequence_1, max_sum_of_bi_tonic_subsequence_2, max_sum_of_bi_tonic_subsequence_3)\n\n\nif __name__ == \"__main__\":\n    print(max_sum_of_bi_tonic_subsequence([1, -2, 3, -4, 5, -6, 7]))\n    print(max_sum_of_bi_tonic_subsequence([1, 2, 3]))\n    print(max_sum_of_bi_tonic_subsequence([]))\n    print(max_sum_of_bi_tonic_subsequence([1, 2, 3, 4, 5]))"
    },
    {
      "rank": 25,
      "score": 8.0,
      "candidate": "def max_bi_tonic_sub_seq(arr):\n    max_sum = 0\n    max_sum_prev = 0\n    for i in range(len(arr)):\n        max_sum = max(arr[i], max_sum_prev + arr[i])\n        max_sum_prev = max_sum\n    return max_sum\n\n\nprint(max_bi_tonic_sub_seq([1, -1, 2, -3, 4, -2, 1, -5, 4, -3, 2, -1, 4, -2, 1, -5, 4, -3, 2, -1, 4, -2, 1, -5, 4, -3, 2, -1, 4, -2, 1, -5, 4, -3, 2, -1, 4, -2, 1, -5, 4, -3, 2, -1, 4, -2, 1, -5, 4, -3, 2, -1, 4, -2, 1, -5, 4, -3, 2, -1, 4, -2, 1, -5, 4, -3, 2, -1]))"
    },
    {
      "rank": 26,
      "score": 8.0,
      "candidate": "def max_sub_sequence(arr):\n    n = len(arr)\n    if n < 2:\n        return max(arr)\n    dp = [0] * n\n    dp[0] = arr[0]\n    dp[1] = max(arr[0], arr[1])\n    for i in range(2, n):\n        dp[i] = max(dp[i - 1], arr[i] + dp[i - 2])\n    return dp[n - 1]\n\n\nif __name__ == \"__main__\":\n    arr = [1, 2, 3, 4, 5]\n    print(max_sub_sequence(arr))"
    },
    {
      "rank": 27,
      "score": 8.0,
      "candidate": "def max_sum_of_bi_tonic_sub_sequence(arr):\n    m = len(arr)\n    if m == 1:\n        return arr[0]\n\n    max_sum = arr[0]\n    for i in range(1, m):\n        max_sum = max(max_sum, arr[i] + arr[i-1])\n\n    return max_sum\n\n\nprint(max_sum_of_bi_tonic_sub_sequence([1, 4, 5, -2, -4]))"
    },
    {
      "rank": 28,
      "score": 8.0,
      "candidate": "class Solution(object):\n    def maxSumBiTonicSubseq(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        if len(nums) == 0:\n            return 0\n        if len(nums) == 1:\n            return nums[0]\n        \n        n = len(nums)\n        m = n - 1\n        \n        dp = [0] * (n + 1)\n        dp[0] = nums[0]\n        \n        for i in range(1, n + 1):\n            dp[i] = max(dp[i - 1] + nums[i - 1], nums[i - 1])\n        \n        for i in range(n - 2, -1, -1):\n            for j in range(i + 1, n + 1):\n                dp[j] = max(dp[j], dp[j - 1] + nums[j])\n        \n        return dp[0]"
    },
    {
      "rank": 29,
      "score": 8.0,
      "candidate": "def max_sum(arr):\n    if len(arr) == 1:\n        return arr[0]\n\n    max_sum = 0\n    for i in range(1, len(arr)):\n        max_sum = max(max_sum + arr[i], arr[i])\n\n    return max_sum\n\n\nprint(max_sum([1, -3, 4, 5, 6, 7]))"
    },
    {
      "rank": 30,
      "score": 8.0,
      "candidate": "def bi_tonic_sub(arr):\n    if not arr:\n        return 0\n    if len(arr) == 1:\n        return arr[0]\n    max_sum = arr[0]\n    for i in range(1, len(arr)):\n        max_sum = max(max_sum + arr[i], arr[i])\n    return max_sum\n\nprint(bi_tonic_sub([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]))\nprint(bi_tonic_sub([]))"
    },
    {
      "rank": 31,
      "score": 8.0,
      "candidate": "def max_bi_tonic_sub_sequence(arr):\n    n = len(arr)\n    max_sum = arr[0]\n    for i in range(1, n):\n        max_sum = max(max_sum + arr[i], arr[i])\n    return max_sum\n\n\nif __name__ == '__main__':\n    assert max_bi_tonic_sub_sequence([3, 2, 1, 6, 5, 4]) == 8\n    assert max_bi_tonic_sub_sequence([1, -1, -2, -3, 1, 2, -1, -4]) == -4"
    },
    {
      "rank": 32,
      "score": 8.0,
      "candidate": "def max_sum_of_bi_tonic_subsequence(array):\n    max_sum = float('-inf')\n    n = len(array)\n\n    for i in range(n):\n        for j in range(i+1, n):\n            if array[i] + array[j] > max_sum:\n                max_sum = array[i] + array[j]\n    return max_sum\n\nif __name__ == '__main__':\n    print(max_sum_of_bi_tonic_subsequence([-2, -3, 4, -1, 2, 1, -5, 4]))"
    },
    {
      "rank": 33,
      "score": 8.0,
      "candidate": "def max_sum_bi_tonic_sub_seq(arr):\n    n = len(arr)\n    if n <= 1:\n        return max(arr)\n    max_so_far = max_sum_bi_tonic_sub_seq(arr[:n//2])\n    max_so_far = max(max_so_far, max_sum_bi_tonic_sub_seq(arr[n//2:]))\n    return max(max_so_far, sum(arr[n//2:]))\n\nprint(max_sum_bi_tonic_sub_seq([-1, -2, -3, -4, -5, -6, -7, -8, -9, 10, -11, -12, -13, -14, -15, -16, -17, -18, -19, 20, -21, -22, -23, -24, -25, -26, -27, -28, -29, -30, -31, -32, -33, -34, -35, -36, -37, -38, -39, 40, -41, -42, -43, -44, -45, -46, -47, -48, -49, -50, -51, -52, -53, -54, -55, -56, -57, -58, -59, -60, -61, -62, -63, -64, -65, -66, -67, -68, -69, -70, -71, -72, -73, -74, -75, -76, -77, -78, -79, -80, -81, -82, -83, -84, -85, -86, -87, -88, -89, -90, -91, -92, -93, -94, -95, -96, -97, -98, -99, -100]))\nprint(max_sum_bi_tonic_sub_seq([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,"
    },
    {
      "rank": 34,
      "score": 8.0,
      "candidate": "def max_sum(arr):\n    if len(arr) == 0:\n        return 0\n    if len(arr) == 1:\n        return arr[0]\n    max_sum = arr[0]\n    current_sum = 0\n    for i in range(1, len(arr)):\n        current_sum = max(current_sum, arr[i])\n        max_sum = max(max_sum, current_sum + arr[i])\n    return max_sum\n\n\narr = [1, 2, 3, 4, 5, 6, 7, 8, 9]\nprint(max_sum(arr))"
    },
    {
      "rank": 35,
      "score": 8.0,
      "candidate": "def max_sum_bi_tonic(arr):\n    # Write your code here\n    max_sum = 0\n    for i in range(len(arr)):\n        for j in range(i):\n            if arr[i] > arr[j]:\n                max_sum = max(max_sum, arr[i] + arr[j])\n    return max_sum\n\n\nif __name__ == \"__main__\":\n    print(max_sum_bi_tonic([7, 2, 4, 1, 9, 5]))"
    },
    {
      "rank": 36,
      "score": 8.0,
      "candidate": "def max_sub_seq_bi_tonic(arr):\n    max_sum = 0\n    max_sum_cur = 0\n    for i in range(len(arr)):\n        for j in range(i):\n            max_sum_cur = max(max_sum_cur + arr[j], arr[i])\n        max_sum = max(max_sum, max_sum_cur)\n    return max_sum\n\n\nprint(max_sub_seq_bi_tonic([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))"
    },
    {
      "rank": 37,
      "score": 8.0,
      "candidate": "def max_sum_bi_tonic(arr):\n    if len(arr) == 1:\n        return arr[0]\n    elif len(arr) == 2:\n        return max(arr[0], arr[1])\n    else:\n        return max(arr[0], arr[1]) + max_sum_bi_tonic(arr[2:])\n\n\nif __name__ == \"__main__\":\n    assert max_sum_bi_tonic([0, 1, 2, 3, 4]) == 5\n    assert max_sum_bi_tonic([1, 2, 3, 4, 5]) == 6\n    assert max_sum_bi_tonic([2, 3, 4, 5, 6]) == 7"
    },
    {
      "rank": 38,
      "score": 8.0,
      "candidate": "def max_sub_sequence(arr):\n    max_sum = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] > max_sum:\n                max_sum = arr[i] + arr[j]\n    return max_sum\n\n\narr = [1, 2, 3, 4, 5, 6]\nprint(max_sub_sequence(arr))"
    },
    {
      "rank": 39,
      "score": 8.0,
      "candidate": "def max_sum_bi_tonic_sub_sequence(arr):\n    if not arr:\n        return 0\n    if len(arr) == 1:\n        return arr[0]\n    if len(arr) == 2:\n        return max(arr[0], arr[1])\n    if len(arr) == 3:\n        return max(arr[0], arr[1], arr[2])\n    if len(arr) == 4:\n        return max(arr[0], arr[1], arr[2], arr[3])\n\n    if arr[0] > arr[1]:\n        return max(max_sum_bi_tonic_sub_sequence(arr[1:]), arr[0])\n    else:\n        return max(max_sum_bi_tonic_sub_sequence(arr[:-1]), arr[-1])\n\n\nif __name__ == '__main__':\n    print(max_sum_bi_tonic_sub_sequence([-1, 0, 1, -2, 3, 4, -1, 2, 1, -5, 4]))"
    },
    {
      "rank": 40,
      "score": 8.0,
      "candidate": "class Solution(object):\n    def maxSubSequence(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        if len(nums) == 1:\n            return nums[0]\n        else:\n            return max(nums[0], nums[-1]) + max(nums[0], self.maxSubSequence(nums[1:-1]))\n\n\nif __name__ == \"__main__\":\n    s = Solution()\n    print s.maxSubSequence([1, 2, 3, 4, 5])\n    print s.maxSubSequence([1, 2, 3, 4])\n    print s.maxSubSequence([1, 2, 3, 4, 5, 6, 7])"
    },
    {
      "rank": 41,
      "score": 8.0,
      "candidate": "def max_sum_of_bi_tonic_subseq(array):\n    n = len(array)\n    if n < 2:\n        return max(array)\n    dp = [[0] * (n + 1) for _ in range(n + 1)]\n    dp[0][0] = array[0]\n    dp[0][1] = array[1]\n    for i in range(2, n + 1):\n        dp[i][0] = max(dp[i - 1][0], array[i - 1] + dp[i - 2][0])\n        dp[i][1] = max(dp[i - 1][1], array[i - 1] + dp[i - 2][1])\n    return dp[n][n]\n\n\nif __name__ == \"__main__\":\n    print(max_sum_of_bi_tonic_subseq([-2, 1, -3, 4, -1, 2, 1, -5, 4]))"
    },
    {
      "rank": 42,
      "score": 8.0,
      "candidate": "def max_bi_tonic_sub_sequence(arr):\n    if len(arr) < 2:\n        return max(arr)\n    max_sum = 0\n    max_sum_prev = 0\n    max_sum_curr = 0\n    for i in range(1, len(arr)):\n        max_sum_prev = max_sum_curr\n        max_sum_curr = max(arr[i], max_sum_prev + arr[i])\n        max_sum = max(max_sum, max_sum_curr)\n    return max_sum\n\n\narr = [3, -5, 4, -3, 2, -5, 4, -3, 2, -5, 4, -3, 2, -5, 4, -3, 2, -5, 4, -3, 2, -5, 4, -3, 2, -5, 4, -3, 2, -5, 4, -3, 2, -5, 4, -3, 2, -5, 4, -3, 2, -5, 4, -3, 2, -5, 4, -3, 2, -5, 4, -3, 2, -5, 4, -3, 2, -5, 4, -3, 2, -5, 4, -3, 2, -5, 4, -3, 2, -5, 4, -3, 2, -5, 4, -3, 2, -5, 4, -3, 2, -5, 4, -3, 2, -5, 4, -3, 2, -5, 4, -3, 2, -5, 4, -3, 2, -5, 4, -3, 2, -5, 4, -3, 2, -5, 4, -3, 2, -5, 4, -3, 2, -5, 4, -3, 2, -5, 4, -3, 2, -5, 4, -3, 2, -5, 4, -3, 2, -5, 4, -3, 2, -5, 4, -3, 2, -5, 4, -3, 2, -5, 4, -3, 2, -5, 4, -3, 2"
    },
    {
      "rank": 43,
      "score": 8.0,
      "candidate": "def max_bi_tonic_sub_sequence(arr):\n    \"\"\"\n    :type arr: List[int]\n    :rtype: int\n    \"\"\"\n    if not arr:\n        return 0\n    max_sum = arr[0]\n    for i in range(1, len(arr)):\n        max_sum = max(arr[i], max_sum + arr[i])\n    return max_sum"
    },
    {
      "rank": 44,
      "score": 8.0,
      "candidate": "def max_sub_seq(arr):\n    if not arr:\n        return 0\n    max_sum = 0\n    for i in range(len(arr)):\n        max_sum = max(max_sum + arr[i], arr[i])\n    return max_sum"
    },
    {
      "rank": 45,
      "score": 8.0,
      "candidate": "def max_sum_bi_tonic(arr):\n    if not arr:\n        return 0\n    if len(arr) == 1:\n        return arr[0]\n    arr.sort()\n    return max(arr[0] + arr[1] + max_sum_bi_tonic(arr[2:]),\n               max(arr[0] + arr[1],\n                   arr[2] + arr[3],\n                   arr[3] + arr[4]))\n\n\nif __name__ == \"__main__\":\n    assert max_sum_bi_tonic([1, 2, 3, 4]) == 6\n    assert max_sum_bi_tonic([-2, -1, -3, -4, -5]) == -5"
    },
    {
      "rank": 46,
      "score": 8.0,
      "candidate": "def max_sum(arr):\n    n = len(arr)\n    dp = [0 for i in range(n+1)]\n\n    for i in range(1, n+1):\n        for j in range(1, i+1):\n            if arr[i-1] > arr[j-1]:\n                dp[i] = max(dp[i], dp[j] + arr[i-1] + arr[j-1])\n            else:\n                dp[i] = dp[i]\n\n    return dp[n]\n\n\nif __name__ == \"__main__\":\n    arr = [1, -2, -3, 4, -1, -2, -3, 4]\n    print(max_sum(arr))"
    },
    {
      "rank": 47,
      "score": 8.0,
      "candidate": "def max_sum_of_bi_tonic_sub_sequence(arr):\n    arr.sort()\n    return arr[-1] + max(arr[0], arr[-2])\n\n\nprint(max_sum_of_bi_tonic_sub_sequence([3, -3, 3, -3, 3, -3, -3]))"
    },
    {
      "rank": 48,
      "score": 8.0,
      "candidate": "def max_sum_of_bi_tonic_subsequence(arr):\n    n = len(arr)\n    if n == 1:\n        return arr[0]\n    else:\n        result = [0] * n\n        result[0] = arr[0]\n        result[1] = max(arr[0], arr[1])\n        for i in range(2, n):\n            result[i] = max(arr[i], arr[i - 1] + result[i - 2])\n        return max(result)\n\n\n\nprint(max_sum_of_bi_tonic_subsequence([1, 2, 3, 4, 5, 6]))\nprint(max_sum_of_bi_tonic_subsequence([2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]))\nprint(max_sum_of_bi_tonic_subsequence([2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]))"
    },
    {
      "rank": 49,
      "score": 8.0,
      "candidate": "def max_bi_tonic(arr):\n    max_sum = 0\n    for i in range(1, len(arr)):\n        temp = 0\n        for j in range(i):\n            temp += arr[j]\n        max_sum = max(max_sum, temp)\n    return max_sum\n\n\narr = [0, 2, 4, 5, 6, 8, 10, 12]\nprint(max_bi_tonic(arr))"
    },
    {
      "rank": 50,
      "score": 8.0,
      "candidate": "def max_sum_bi_tonic(arr):\n    max_sum = 0\n    for i in range(len(arr) - 1):\n        for j in range(i + 1, len(arr)):\n            if arr[i] + arr[j] > max_sum:\n                max_sum = arr[i] + arr[j]\n    return max_sum\n\n\narr = [2, -2, 3, -4, -5, 2, 1]\nprint(max_sum_bi_tonic(arr))"
    },
    {
      "rank": 51,
      "score": 8.0,
      "candidate": "def max_sum(array):\n    # Write your code here\n    n = len(array)\n    res = 0\n    for i in range(n-1, -1, -1):\n        res = max(res, array[i] + array[i+1])\n    return res\n\n\nprint(max_sum([2, -2, 3, -3, 4, -4]))\nprint(max_sum([-1, -2, -3, -4, -5, -6, -7]))"
    },
    {
      "rank": 52,
      "score": 8.0,
      "candidate": "def max_sum_bi_tonic_subsequence(arr):\n    max_sum = 0\n    cur_sum = 0\n    for num in arr:\n        cur_sum = max(num, cur_sum + num)\n        max_sum = max(max_sum, cur_sum)\n    return max_sum\n\narr = [1, 2, 3, 4, 5, 6]\nprint(max_sum_bi_tonic_subsequence(arr))"
    },
    {
      "rank": 53,
      "score": 8.0,
      "candidate": "class Solution:\n    def maxSubSequence(self, nums: List[int]) -> int:\n        if not nums:\n            return 0\n\n        max_sum = nums[0]\n        for i in range(1, len(nums)):\n            max_sum = max(max_sum + nums[i], nums[i])\n        return max_sum"
    },
    {
      "rank": 54,
      "score": 8.0,
      "candidate": "class Solution:\n    def maximumSumBT(self, arr):\n        if len(arr) == 1:\n            return arr[0]\n        arr.sort()\n        max_sum = arr[0]\n        for i in range(1, len(arr)):\n            max_sum = max(max_sum + arr[i], arr[i])\n        return max_sum"
    },
    {
      "rank": 55,
      "score": 8.0,
      "candidate": "def find_max_sum(arr, max_sum):\n    n = len(arr)\n    if n < 2:\n        return max_sum\n\n    # initialize the start and end index of the first and last element\n    # of the array\n    start = 0\n    end = 0\n\n    # initialize the maximum sum of the bi-tonic sub sequence\n    max_sum = 0\n\n    # while the end index is less than or equal to the length of the array\n    while end < n:\n\n        # check if the current element is greater than the last element\n        # of the array\n        if arr[end] > arr[end - 1]:\n\n            # update the maximum sum of the sub sequence\n            max_sum = max(max_sum, arr[start] + arr[end])\n\n            # update the start and end index of the first and last\n            # element of the array\n            start += 1\n            end += 1\n\n        else:\n            # update the maximum sum of the sub sequence\n            max_sum = max(max_sum, arr[start] + arr[end])\n\n            # update the start and end index of the first and last\n            # element of the array\n            start += 1\n\n    return max_sum\n\n\nif __name__ == '__main__':\n    # test cases\n    assert find_max_sum([2, 3, 4, 1, 2, 4], 6) == 6\n    assert find_max_sum([1, 2, 3, 4, 5], 10) == 10\n    assert find_max_sum([1, 1, 1, 1, 1], 6) == 6\n    assert find_max_sum([1, 1, 1, 1, 1], 6) == 6\n    assert find_max_sum([1, 2, 3, 4, 5], 11) == 11\n    assert find_max_sum([1, 2, 3, 4, 5], 10) == 10"
    },
    {
      "rank": 56,
      "score": 8.0,
      "candidate": "def max_sub_sequence(a):\n    # Write your code here\n    n = len(a)\n    if n == 0:\n        return 0\n    max_sum = a[0]\n    for i in range(1, n):\n        if a[i] > max_sum:\n            max_sum = a[i]\n        else:\n            max_sum = max(max_sum, a[i] + max_sum)\n    return max_sum\n\n\nprint(max_sub_sequence([-2, -1, 4, -3, 2, 1, -5, 4]))"
    },
    {
      "rank": 57,
      "score": 8.0,
      "candidate": "def max_sum_bi_tonic_sub(arr):\n\n    max_sum = arr[0]\n    for i in range(1, len(arr)):\n        max_sum = max(max_sum, arr[i] + arr[i-1])\n\n    return max_sum\n\n\nif __name__ == \"__main__\":\n    print(max_sum_bi_tonic_sub([4, 1, 3, 2, 5]))\n    print(max_sum_bi_tonic_sub([1, 2, 3, 4, 5, 6]))"
    },
    {
      "rank": 58,
      "score": 8.0,
      "candidate": "def max_sum_of_bi_tonic_sub_seq(arr):\n    n = len(arr)\n    if n == 0:\n        return 0\n\n    dp = [0 for _ in range(n+1)]\n    dp[0] = arr[0]\n    for i in range(1, n+1):\n        dp[i] = max(arr[i-1] + dp[i-2], dp[i-1])\n\n    return dp[n]\n\nif __name__ == \"__main__\":\n    print(max_sum_of_bi_tonic_sub_seq([-2, -1, -3, 4, -1, 2, 1]))"
    },
    {
      "rank": 59,
      "score": 8.0,
      "candidate": "def max_sum_bi_tonic_sub(array):\n    if not array:\n        return 0\n\n    max_sum = array[0]\n    for i in range(1, len(array)):\n        max_sum = max(max_sum + array[i], array[i])\n    return max_sum\n\n\nif __name__ == \"__main__\":\n    print(max_sum_bi_tonic_sub([-2, 1, -3, 4, -1, 2, 1, -5, 4]))"
    },
    {
      "rank": 60,
      "score": 8.0,
      "candidate": "def max_bi_tonic_subseq(arr):\n    max_sum = arr[0]\n    for i in range(1, len(arr)):\n        max_sum = max(max_sum, arr[i] + arr[i - 1])\n    return max_sum\n\n\ndef test():\n    assert max_bi_tonic_subseq([1, 2, 3, 4, 5]) == 8\n    assert max_bi_tonic_subseq([1, 2, 3, 4, 5, 6]) == 24\n\n\nif __name__ == '__main__':\n    test()"
    },
    {
      "rank": 61,
      "score": 8.0,
      "candidate": "def max_sum_bi_tonic(arr):\n    n = len(arr)\n    dp = [[0 for _ in range(n)] for _ in range(n)]\n    dp[0][0] = arr[0]\n    for i in range(1, n):\n        dp[i][0] = arr[i]\n        for j in range(1, n):\n            dp[i][j] = max(arr[i] + dp[i-1][j], arr[i] + dp[i][j-1])\n    return max(dp[-1])\n\n\nprint(max_sum_bi_tonic([1, 2, 3, 4, 5]))\nprint(max_sum_bi_tonic([1, 2, 2, 4, 2, 2, 2, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,"
    },
    {
      "rank": 62,
      "score": 8.0,
      "candidate": "def max_sum_of_bi_tonic_subseq(arr):\n    if len(arr) < 2:\n        return arr[0]\n    else:\n        return max(arr[0], max_sum_of_bi_tonic_subseq(arr[1:])) + max(arr[1], arr[0])"
    },
    {
      "rank": 63,
      "score": 8.0,
      "candidate": "def max_sum(arr):\n    if len(arr) == 1:\n        return arr[0]\n\n    result = 0\n    for i in range(1, len(arr)):\n        result = max(result + arr[i], arr[i])\n\n    return result\n\n\nif __name__ == '__main__':\n    arr = [2, 4, 6, 2, 3, 1]\n    print(max_sum(arr))"
    },
    {
      "rank": 64,
      "score": 8.0,
      "candidate": "def max_sum_of_bis_sub_seq(arr):\n    n = len(arr)\n    if n == 0:\n        return 0\n    if n == 1:\n        return arr[0]\n    if n == 2:\n        return max(arr[0], arr[1])\n    if n == 3:\n        return max(arr[0], arr[1], arr[2])\n\n    if n == 4:\n        return max(arr[0], arr[1], arr[2], arr[3])\n    if n == 5:\n        return max(arr[0], arr[1], arr[2], arr[3], arr[4])\n\n    if n == 6:\n        return max(arr[0], arr[1], arr[2], arr[3], arr[4], arr[5])\n    if n == 7:\n        return max(arr[0], arr[1], arr[2], arr[3], arr[4], arr[5], arr[6])\n\n    if n == 8:\n        return max(arr[0], arr[1], arr[2], arr[3], arr[4], arr[5], arr[6], arr[7])\n    if n == 9:\n        return max(arr[0], arr[1], arr[2], arr[3], arr[4], arr[5], arr[6], arr[7], arr[8])"
    },
    {
      "rank": 65,
      "score": 8.0,
      "candidate": "def max_sum_bi_tonic_subseq(arr):\n    if len(arr) <= 1:\n        return max(arr)\n    max_sum = 0\n    for i in range(len(arr) - 1):\n        for j in range(i + 1, len(arr)):\n            max_sum = max(max_sum, arr[i] + arr[j])\n    return max_sum\n\n\nprint(max_sum_bi_tonic_subseq([1, -2, 3, -1, 4, -1, -2, 3]))\nprint(max_sum_bi_tonic_subseq([1, -2, 3, -1, 4, -1, -2, 3]))\nprint(max_sum_bi_tonic_subseq([1, -2, 3, -1, 4, -1, -2, 3]))"
    },
    {
      "rank": 66,
      "score": 8.0,
      "candidate": "def max_sum_of_bi_tonic_sub_sequence(arr):\n    n = len(arr)\n    if n < 2:\n        return arr[0]\n\n    dp = [0] * n\n    dp[0] = arr[0]\n    dp[1] = max(arr[0], arr[1])\n    for i in range(2, n):\n        dp[i] = max(dp[i - 1] + arr[i], arr[i])\n\n    return dp[n - 1]"
    },
    {
      "rank": 67,
      "score": 8.0,
      "candidate": "def find_max_sum_of_bi_tonic_sub_sequence(array):\n    n = len(array)\n    if n == 1:\n        return array[0]\n    if n == 2:\n        return max(array[0], array[1])\n    if n == 3:\n        return max(array[0], array[1], array[2])\n    if n == 4:\n        return max(array[0], array[1], array[2], array[3])\n    if n == 5:\n        return max(array[0], array[1], array[2], array[3], array[4])\n\n\nif __name__ == \"__main__\":\n    print(find_max_sum_of_bi_tonic_sub_sequence([3, 2, 2, 5, 1, 3, 2, 2, 3, 4, 2, 4, 2, 4, 5]))"
    },
    {
      "rank": 68,
      "score": 8.0,
      "candidate": "def max_sum_of_subsequence(arr):\n    max_sum = 0\n    sum_of_subsequence = 0\n    for i in range(len(arr)):\n        sum_of_subsequence += arr[i]\n        if i > 0 and arr[i] == arr[i - 1]:\n            max_sum = max(max_sum, sum_of_subsequence)\n        elif i > 0:\n            max_sum = max(max_sum, sum_of_subsequence)\n    return max_sum\n\n\narr = [3, 2, 1, -1, 5, -4]\nprint(max_sum_of_subsequence(arr))"
    },
    {
      "rank": 69,
      "score": 8.0,
      "candidate": "def max_bi_tonic_sequence(array):\n    n = len(array)\n    if n < 2:\n        return 0\n    array.sort()\n    res = 0\n    for i in range(n - 1):\n        res = max(res, array[i] + array[i + 1])\n    return res\n\n\nprint(max_bi_tonic_sequence([0, -1, 3, -2, 1, -5, 4]))"
    },
    {
      "rank": 70,
      "score": 8.0,
      "candidate": "def max_sum_bi_tonic_sub_seq(array):\n    n = len(array)\n    if n < 2:\n        return max(array)\n\n    max_so_far = array[0]\n    max_so_far_prev = 0\n    for i in range(1, n):\n        max_so_far = max(max_so_far, array[i] + max_so_far_prev)\n        max_so_far_prev = max(array[i], max_so_far)\n\n    return max_so_far\n\n\nprint(max_sum_bi_tonic_sub_seq([1, 2, 3, 4, 5]))"
    },
    {
      "rank": 71,
      "score": 8.0,
      "candidate": "def max_sum_bi_tonic(arr):\n    max_sum = 0\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            curr_sum = arr[i] + arr[j]\n            if curr_sum > max_sum:\n                max_sum = curr_sum\n    return max_sum\n\n\nif __name__ == \"__main__\":\n    print(max_sum_bi_tonic([1, -2, 3, -4, 5, -6]))"
    },
    {
      "rank": 72,
      "score": 8.0,
      "candidate": "def max_sum_bi_tonic(array):\n    # Write your code here\n    n = len(array)\n    if n == 0:\n        return 0\n    if n == 1:\n        return array[0]\n    max_sum = array[0]\n    current_sum = 0\n    for i in range(1, n):\n        current_sum = max(current_sum, array[i] + array[i-1])\n        max_sum = max(current_sum, max_sum)\n    return max_sum\n\n\n\n\n\nprint(max_sum_bi_tonic([1, 2, 3, 4, 5, 6, 7, 8]))\nprint(max_sum_bi_tonic([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\nprint(max_sum_bi_tonic([]))"
    },
    {
      "rank": 73,
      "score": 1.0,
      "candidate": "def max_sum_bi_tonic(arr):\n    # Your code here\n    max_sum = 0\n    for i in range(len(arr)):\n        max_sum = max(max_sum + arr[i], arr[i])\n    return max_sum\n\n\nprint(max_sum_bi_tonic([1, 2, 3, 4, 5, 6, 7, 8, 9]))\nprint(max_sum_bi_tonic([-1, -2, -3, -4, -5, -6, -7, -8, -9]))"
    },
    {
      "rank": 74,
      "score": 1.0,
      "candidate": "def max_sum_bi_tonic_sub(arr):\n    # Fill this in.\n    n = len(arr)\n    if n == 0:\n        return 0\n    dp = [[0 for i in range(n)] for j in range(n)]\n    dp[0][0] = arr[0]\n    for i in range(1, n):\n        dp[i][0] = max(dp[i-1][0], arr[i])\n    for i in range(1, n):\n        for j in range(1, n):\n            if j == i:\n                continue\n            dp[i][j] = max(dp[i-1][j], dp[i][j-1] + arr[j])\n    return dp[n-1][n-1]\n\n\nprint(max_sum_bi_tonic_sub([1, 3, 5, -2, -4]))"
    },
    {
      "rank": 75,
      "score": 1.0,
      "candidate": "def max_sum_of_bi_tonic_sub_seq(arr):\n    # Fill this in.\n    max_sum = 0\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            sum_of_sub_seq = arr[i] + arr[j]\n            if sum_of_sub_seq > max_sum:\n                max_sum = sum_of_sub_seq\n    return max_sum\n\n\nif __name__ == '__main__':\n    print(max_sum_of_bi_tonic_sub_seq([1, 2, 3, 4, 5]))"
    },
    {
      "rank": 76,
      "score": 1.0,
      "candidate": "def max_sum_bi_tonic_subseq(arr):\n    # Your code here\n    max_sum = 0\n    for i in range(len(arr) - 1):\n        for j in range(i + 1, len(arr)):\n            if arr[i] > arr[j]:\n                max_sum = max(max_sum, arr[i] + arr[j])\n    return max_sum\n\n\nprint(max_sum_bi_tonic_subseq([1, 2, 3, 4, 5]))"
    },
    {
      "rank": 77,
      "score": 1.0,
      "candidate": "class Solution:\n    def maxSubSequence(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        if len(nums) <= 1:\n            return 0\n        n = len(nums)\n        dp = [[0] * n for i in range(n)]\n        dp[0][0] = nums[0]\n        for i in range(1, n):\n            dp[i][0] = max(dp[i - 1][0], nums[i] + dp[i - 1][1])\n        for i in range(n - 1, -1, -1):\n            dp[i][0] = max(dp[i + 1][0], dp[i + 1][1] + nums[i])\n        return max(dp[0][-1])\n\n\nif __name__ == \"__main__\":\n    assert Solution().maxSubSequence([1, 2, 3, 4, 5, 6]) == 10\n    assert Solution().maxSubSequence([4, 2, 3, 6, 1, 5]) == 30"
    },
    {
      "rank": 78,
      "score": 1.0,
      "candidate": "def max_sub_sequence(array):\n    # Write your code here\n    max_sum = 0\n    prev_sum = array[0]\n    for i in range(1, len(array)):\n        max_sum = max(max_sum, prev_sum + array[i])\n        prev_sum = array[i]\n    return max_sum\n\n\nprint(max_sub_sequence([2, 3, 4, -1, -2, -3, 1, 5, -4]))\nprint(max_sub_sequence([2, 3, 4, -1, -2, -3, 1, 5, -4, 2, 6, 7]))"
    },
    {
      "rank": 79,
      "score": 1.0,
      "candidate": "def max_sum_bi_tonic_sub(arr):\n    n = len(arr)\n    if n == 1:\n        return arr[0]\n    if n == 2:\n        return max(arr[0], arr[1])\n    max_sum = 0\n    for i in range(1, n):\n        for j in range(i):\n            if arr[i] > arr[j]:\n                max_sum = max(max_sum, arr[i] + arr[j])\n    return max_sum\n\n\n\n\n\n\narr = [2, 2, 1, 1, 2, 3, 4, 5, 6]\nprint(max_sum_bi_tonic_sub(arr))"
    },
    {
      "rank": 80,
      "score": 1.0,
      "candidate": "def max_sum_bi_tonic_sub_sequence(arr):\n    # Write your code here\n    n = len(arr)\n    max_sum = 0\n    max_sum_cur = 0\n    for i in range(n):\n        max_sum = max(arr[i], max_sum_cur + arr[i])\n        max_sum_cur = max(max_sum, max_sum_cur)\n    return max_sum\n\nprint(max_sum_bi_tonic_sub_sequence([2, 3, -3, -2, 1, 4, -1, -1, -2, 4, -2, -1]))"
    },
    {
      "rank": 81,
      "score": 1.0,
      "candidate": "def max_sum(arr):\n    max_sum = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            max_sum = max(max_sum + arr[i], arr[j])\n    return max_sum\n\n\narr = [1, 3, 4, -2, 5]\nprint(max_sum(arr))\n\narr = [0, 1, 0, -1, 1]\nprint(max_sum(arr))"
    },
    {
      "rank": 82,
      "score": 1.0,
      "candidate": "def find_max_sub_sequence(array):\n    n = len(array)\n    if n == 0:\n        return 0\n    if n == 1:\n        return array[0]\n    if n == 2:\n        return max(array[0], array[1])\n\n    max_sum = array[0]\n    curr_sum = array[0]\n\n    for i in range(n):\n        max_sum = max(max_sum + array[i], curr_sum)\n        curr_sum = array[i]\n\n    return max_sum\n\n\nif __name__ == \"__main__\":\n    assert find_max_sub_sequence([-1, 2, -3, 4, -1, 2, -5, 4]) == 10\n    assert find_max_sub_sequence([1, 3, 6, 2, 5, 7]) == 12"
    },
    {
      "rank": 83,
      "score": 1.0,
      "candidate": "def max_sum_bi_tonic_sub_sequence(arr):\n    # Your code here\n    if not arr:\n        return 0\n\n    max_sum = 0\n    sum_max = 0\n    sum_max_prev = 0\n\n    for i in range(1, len(arr)):\n        sum_max = max(arr[i], sum_max + arr[i])\n        max_sum = max(max_sum, sum_max_prev)\n        sum_max_prev = sum_max\n\n    return max_sum\n\n\nprint(max_sum_bi_tonic_sub_sequence([-1, -2, 3, -1, 2, -3]))"
    },
    {
      "rank": 84,
      "score": 1.0,
      "candidate": "def max_sum_of_bi_tonic_sub_sequence(arr):\n    max_sum = 0\n    # start at the end of the array\n    for i in range(len(arr) - 1, -1, -1):\n        # check if the current element is greater than the previous one\n        if arr[i] > arr[i + 1]:\n            # update the current element\n            max_sum = max(max_sum, arr[i] + max_sum_of_bi_tonic_sub_sequence(arr[i + 1:]))\n        else:\n            # update the current element\n            max_sum = max(max_sum, arr[i])\n\n    return max_sum\n\n\nif __name__ == \"__main__\":\n    assert max_sum_of_bi_tonic_sub_sequence([1, 3, 5, -4, 2, 7]) == 30\n    assert max_sum_of_bi_tonic_sub_sequence([3, 5, -4, 1, 2, 7]) == 50\n    assert max_sum_of_bi_tonic_sub_sequence([1, 1, 1, 1, 1]) == 1\n    assert max_sum_of_bi_tonic_sub_sequence([-2]) == -2\n    assert max_sum_of_bi_tonic_sub_sequence([]) == 0"
    },
    {
      "rank": 85,
      "score": 1.0,
      "candidate": "def max_sum_bi_tonic(arr):\n    max_sum = float('-inf')\n    n = len(arr)\n    for i in range(1, n):\n        for j in range(i):\n            if arr[i] > arr[j]:\n                max_sum = max(max_sum, arr[i] + arr[j])\n    return max_sum\n\n\ndef test_function(test_case):\n    result = max_sum_bi_tonic(test_case)\n    if result == test_case[0]:\n        print(\"Pass\")\n    else:\n        print(\"Fail\")\n\n\ntest_case_0 = [4, 2, 1, 5, 3, 6]\ntest_function(test_case_0)\n\ntest_case_1 = [1, 2, 3]\ntest_function(test_case_1)\n\ntest_case_2 = [-1, -2, -3, -4]\ntest_function(test_case_2)\n\ntest_case_3 = [-1, -2, -3, -4, -5, -6, -7, -8, -9]\ntest_function(test_case_3)\n\ntest_case_4 = [-1, -2, -3, -4, -5, -6, -7, -8, -9, -10, -11, -12, -13, -14, -15, -16, -17, -18, -19, -20, -21, -22, -23, -24, -25, -26, -27, -28, -29, -30, -31, -32, -33, -34, -35, -36, -37, -38, -39, -40, -41, -42, -43, -44, -45, -46, -47, -48, -49, -50, -51, -52, -53, -54, -55, -56, -57, -58, -59, -60, -61, -62, -63, -64, -65, -66, -67, -68, -69, -70, -71, -72, -73"
    },
    {
      "rank": 86,
      "score": 1.0,
      "candidate": "def max_sum_bi_tonic_subseq(arr):\n    # Write your code here\n    n = len(arr)\n    if n == 0:\n        return 0\n    if n == 1:\n        return arr[0]\n\n    # initialize the result\n    max_sum = 0\n\n    # iterate over all the elements\n    for i in range(1, n):\n        max_sum = max(arr[i], max_sum + arr[i])\n\n    return max_sum\n\n\nif __name__ == \"__main__\":\n    print(max_sum_bi_tonic_subseq([1, 2, 3, 4, 5]))"
    },
    {
      "rank": 87,
      "score": 1.0,
      "candidate": "def max_sum_bi_tonic_sub_seq(arr):\n    n = len(arr)\n    m = n - 1\n    max_sum = 0\n    for i in range(1, n):\n        for j in range(0, i):\n            if arr[j] > arr[j + 1]:\n                m = i - j - 1\n                max_sum = max(max_sum, arr[i] + arr[j] + arr[i + j])\n    return max_sum\n\n\nif __name__ == \"__main__\":\n    assert max_sum_bi_tonic_sub_seq([1, 2, 3, 4]) == 8\n    assert max_sum_bi_tonic_sub_seq([1, 2, 3, 4, 5]) == 16\n    assert max_sum_bi_tonic_sub_seq([1, 2, 3, 4, 5, 6, 7]) == 10\n    assert max_sum_bi_tonic_sub_seq([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 20"
    },
    {
      "rank": 88,
      "score": 1.0,
      "candidate": "class Solution:\n    def maxSubSequence(self, nums: List[int]) -> int:\n        if not nums:\n            return 0\n        max_sum = nums[0]\n        max_sum_so_far = nums[0]\n        for i in range(1, len(nums)):\n            max_sum = max(max_sum + nums[i], nums[i])\n            max_sum_so_far = max(max_sum_so_far, max_sum)\n        return max_sum_so_far"
    },
    {
      "rank": 89,
      "score": 1.0,
      "candidate": "def max_sum_of_bi_tonic(arr):\n    max_sum = arr[0]\n    current_sum = arr[0]\n\n    for i in range(1, len(arr)):\n        current_sum += arr[i]\n        if current_sum > max_sum:\n            max_sum = current_sum\n\n    return max_sum\n\n\narr = [1, 2, 3, 4, 5, 6]\nprint(max_sum_of_bi_tonic(arr))"
    },
    {
      "rank": 90,
      "score": 1.0,
      "candidate": "def max_sum_of_bi_tonic_sub_seq(arr):\n    # Write your code here\n    max_sum = 0\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            if arr[i] > arr[j]:\n                max_sum = max(max_sum, arr[i] + arr[j])\n    return max_sum\n\n\narr = [1, 2, 3, 4, 5]\nprint(max_sum_of_bi_tonic_sub_seq(arr))"
    },
    {
      "rank": 91,
      "score": 1.0,
      "candidate": "def max_sub_sequence(arr):\n    if not arr:\n        return 0\n    # create a stack\n    stack = [0]\n    # add the first element\n    stack.append(arr[0])\n    # add the second element\n    stack.append(max(arr[0], arr[1]))\n    # for the rest of the elements\n    for num in arr[2:]:\n        # get the current value of the stack\n        current_value = stack.pop()\n        # calculate the new value of the stack\n        current_value = current_value + num\n        # add the new value to the stack\n        stack.append(current_value)\n    # return the maximum value of the stack\n    return stack[0]\n\n\nif __name__ == '__main__':\n    assert max_sub_sequence([1, 2, 3, 4, 5]) == 10\n    assert max_sub_sequence([-1, 2, -3, 4, 5]) == -10\n    assert max_sub_sequence([-2, -3, -1, 0, 4]) == 5"
    },
    {
      "rank": 92,
      "score": 1.0,
      "candidate": "def max_sum_of_bi_tonic_sub_seq(arr):\n    if len(arr) == 0:\n        return 0\n    elif len(arr) == 1:\n        return arr[0]\n    else:\n        return max(arr[0] + max_sum_of_bi_tonic_sub_seq(arr[1:]), max(arr[0] + max_sum_of_bi_tonic_sub_seq(arr[1:]), arr[0] + arr[1]))\n\narr = [1, 2, 3, 4, 5, 6, 7, 8, 9]\nprint(max_sum_of_bi_tonic_sub_seq(arr))"
    },
    {
      "rank": 93,
      "score": 1.0,
      "candidate": "class Solution:\n    def maxSubSequence(self, nums: List[int]) -> int:\n        max_sum = float(\"-inf\")\n        curr_sum = 0\n\n        for num in nums:\n            curr_sum = max(curr_sum + num, num)\n            max_sum = max(max_sum, curr_sum)\n\n        return max_sum\n\n\na = Solution()\nprint(a.maxSubSequence([-2, 1, -3, 4, -1, 2, 1, -5, 4]))"
    },
    {
      "rank": 94,
      "score": 1.0,
      "candidate": "def max_sum_of_bi_tonic_sub_sequence(arr):\n    if len(arr) < 2:\n        return max(arr)\n    left = [0] * len(arr)\n    right = [0] * len(arr)\n    for i in range(1, len(arr)):\n        left[i] = max(arr[i - 1], arr[i])\n        right[i] = max(arr[i], arr[i - 1])\n    for i in range(len(arr) - 2, -1, -1):\n        left[i] = max(left[i], left[i - 1] + arr[i])\n        right[i] = max(right[i], right[i + 1] + arr[i])\n    return max(left[0], right[0])\n\n\nif __name__ == \"__main__\":\n    assert max_sum_of_bi_tonic_sub_sequence([2, 7, 11, 15, 17, 19]) == 30"
    },
    {
      "rank": 95,
      "score": 1.0,
      "candidate": "def max_bi_tonic_sub_sequence(arr):\n    # Your code here\n    return max_bi_tonic_sub_sequence_helper(arr, 0, len(arr) - 1, 0)\n\n\ndef max_bi_tonic_sub_sequence_helper(arr, start, end, max_sum):\n    if start == end:\n        return arr[start]\n    elif start > end:\n        return max_sum\n    else:\n        mid = (start + end) // 2\n        left = max_bi_tonic_sub_sequence_helper(arr, start, mid - 1, max_sum)\n        right = max_bi_tonic_sub_sequence_helper(arr, mid + 1, end, max_sum)\n        return max(left, right) + arr[mid]\n\n\nprint(max_bi_tonic_sub_sequence([3, 3, 3, 3, 3]))"
    },
    {
      "rank": 96,
      "score": 1.0,
      "candidate": "def find_max_sum_bi_tonic_subseq(arr):\n    # write your code here\n    n = len(arr)\n    max_sum = arr[0]\n    for i in range(1, n):\n        max_sum = max(max_sum, arr[i] + max_sum)\n    return max_sum"
    },
    {
      "rank": 97,
      "score": 1.0,
      "candidate": "def bi_tonic_sub_seq(arr, n):\n    # Write your code here\n    dp = [[0 for _ in range(n + 1)] for _ in range(n + 1)]\n    dp[0][0] = arr[0]\n\n    for i in range(1, n + 1):\n        for j in range(1, n + 1):\n            if i == j:\n                dp[i][j] = dp[i - 1][j - 1]\n            else:\n                dp[i][j] = max(dp[i - 1][j], dp[i - 1][j - 1] + arr[i - 1])\n    return dp[n][n]\n\n\nprint(bi_tonic_sub_seq([3, 2, 1, 4], 4))"
    },
    {
      "rank": 98,
      "score": 1.0,
      "candidate": "def max_sum_of_bis(arr):\n    max_sum = 0\n    current_sum = 0\n    for i in range(len(arr)):\n        if i == 0:\n            current_sum = arr[i]\n        elif i == len(arr) - 1:\n            max_sum = max(current_sum, max_sum)\n            current_sum = 0\n        else:\n            current_sum = max(current_sum + arr[i], arr[i])\n\n    return max_sum\n\n\nif __name__ == \"__main__\":\n    assert max_sum_of_bis([0, 1, 2, 3, 4, 5]) == 6\n    assert max_sum_of_bis([2, 4, 5, 10, -1, -2]) == -2\n    assert max_sum_of_bis([1, -1]) == 0"
    },
    {
      "rank": 99,
      "score": 1.0,
      "candidate": "def max_subseq_sum(arr):\n    # Fill this in.\n    res = 0\n    for i in range(1, len(arr)):\n        res = max(res, arr[i] + max(arr[:i] + arr[i+1:]))\n    return res\n\n\nif __name__ == \"__main__\":\n    print(max_subseq_sum([-1, -2, -3, -4, -5]))\n    print(max_subseq_sum([-1, -2, -3, -4]))\n    print(max_subseq_sum([-1, -2, -3, -4, -5, -6, -7, -8]))"
    },
    {
      "rank": 100,
      "score": 1.0,
      "candidate": "def max_sub_sequence(arr, n):\n    # Write your code here\n    if len(arr) == 0:\n        return 0\n    else:\n        max_sum = 0\n        for i in range(len(arr)-1):\n            for j in range(i+1, len(arr)):\n                if arr[i] > arr[j]:\n                    max_sum = max(max_sum, arr[i]+arr[j])\n        return max_sum\n\n\narr = [1, -2, 3, 4, -1, -1, -3, 2, 1]\nn = len(arr)\nprint(max_sub_sequence(arr, n))"
    }
  ]
}