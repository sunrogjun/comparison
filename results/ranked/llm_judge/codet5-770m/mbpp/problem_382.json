{
  "timestamp": "2025-09-14T15:16:18.263078",
  "method": "improved_llm_judge",
  "judge_model": "codellama/CodeLlama-7b-Python-hf",
  "target_model": "codet5-770m",
  "dataset": "mbpp",
  "problem_number": 382,
  "total_candidates": 100,
  "results": [
    {
      "rank": 1,
      "score": 10.0,
      "candidate": "def find_list_max_len(list):\n    return max(list, key=lambda x: len(x))\n\n\nif __name__ == '__main__':\n    list = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    print(find_list_max_len(list))"
    },
    {
      "rank": 2,
      "score": 10.0,
      "candidate": "max_length = lambda x: len(x)\nprint(max_length([1, 2, 3, 4, 5, 6, 7, 8, 9]))\nprint(max_length([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]))\nprint(max_length([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 178, 179, 181, 182, 183, 184, 185, 186, 189, 190, 191"
    },
    {
      "rank": 3,
      "score": 10.0,
      "candidate": "list_1 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nprint(max(list_1, key=len))"
    },
    {
      "rank": 4,
      "score": 10.0,
      "candidate": "def max_length(a):\n    return max(a, key=len)\n\n\na = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nprint(max_length(a))"
    },
    {
      "rank": 5,
      "score": 10.0,
      "candidate": "def max_length(list_of_numbers):\n    return max(list_of_numbers, key=len)\n\nprint(max_length([1,2,3,4,5,6,7,8,9]))"
    },
    {
      "rank": 6,
      "score": 10.0,
      "candidate": "def max_length(arr):\n    return max(arr, key=len)\n\nif __name__ == '__main__':\n    arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    print(max_length(arr))"
    },
    {
      "rank": 7,
      "score": 10.0,
      "candidate": "list_with_max_length = lambda list: max(list, key=len)\n\nlist_with_max_length([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])"
    },
    {
      "rank": 8,
      "score": 10.0,
      "candidate": "def max_list_length(lst):\n    return max(map(lambda x: len(x), lst))\n\n\nif __name__ == \"__main__\":\n    print(max_list_length([1, 2, 3, 4, 5, 6, 7, 8, 9]))"
    },
    {
      "rank": 9,
      "score": 10.0,
      "candidate": "# Function to find list with maximum length\n\nmax_length = lambda list: max(list)\n\n# List to be searched\nlist = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]\n\n# Function to find the maximum length\nmax_length_function = lambda list: max(list)\n\n# Function to find the maximum length function\nmax_length_function_2 = lambda list: max(list, key = lambda x: len(x))\n\n# Function to find the maximum length function\nmax_length_function_3 = lambda list: max(list, key = lambda x: len(x), default = 0)\n\n# Function to find the maximum length function\nmax_length_function_4 = lambda list: max(list, key = lambda x: len(x), default = 0)\n\n# Function to find the maximum length function\nmax_length_function_5 = lambda list: max(list, key = lambda x: len(x), default = 0)\n\n# Function to find the maximum length function\nmax_length_function_6 = lambda list: max(list, key = lambda x: len(x), default = 0)\n\n# Function to find the maximum length function\nmax_length_function_7 = lambda list: max(list, key = lambda x: len(x), default = 0)\n\n# Function to find the maximum length function\nmax_length_function_8 = lambda list: max(list, key = lambda x: len(x), default = 0)\n\n# Function to find the maximum length function\nmax_length_function_9 = lambda list: max(list, key = lambda x: len(x), default = 0)\n\n# Function to find the maximum length function\nmax_length_function_10 = lambda list: max(list, key = lambda x: len(x), default = 0)\n\n# Function to find the maximum length function\nmax_length_function_11 = lambda list: max(list, key = lambda x: len(x), default = 0)\n\n# Function to find the maximum length function\nmax_length_function_12 = lambda list: max(list, key = lambda x: len(x), default = 0"
    },
    {
      "rank": 10,
      "score": 10.0,
      "candidate": "def max_list(list_of_numbers):\n    return max(list_of_numbers, key=len)\n\n\nprint(max_list([1, 2, 3, 4, 5]))\nprint(max_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\nprint(max_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\nprint(max_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 134, 135, 136, 137, 138, 139, 144, 145, 146, 151, 152, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 180, 181, 182, 183, 184, 185, 186, 187, 188, 191, 192, 193, 195, 197, 198, 199, 200, 201, 202, 203"
    },
    {
      "rank": 11,
      "score": 10.0,
      "candidate": "def max_len(lst):\n    return max(lst, key=len)\n\n\nprint(max_len([1, 2, 3, 4, 5]))"
    },
    {
      "rank": 12,
      "score": 10.0,
      "candidate": "def max_length(l):\n    return max(l, key=len)\n\n\ndef test():\n    l = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    assert max_length(l) == 8"
    },
    {
      "rank": 13,
      "score": 10.0,
      "candidate": "import time\n\ndef max_len_list(lst):\n    return max(lst, key=len)\n\ndef main():\n    start = time.time()\n    print(max_len_list([1,2,3,4,5,6]))\n    print(max_len_list([1,2,3,4,5,6,7]))\n    print(max_len_list([1,2,3,4,5,6,7,8,9]))\n    print(max_len_list([1,2,3,4,5,6,7,8,9,10]))\n    print(max_len_list([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,170,170,170,170,170,170,170,170"
    },
    {
      "rank": 14,
      "score": 10.0,
      "candidate": "list_of_numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nmaximum_length_list = list(map(lambda x: len(x), list_of_numbers))\nprint(maximum_length_list)"
    },
    {
      "rank": 15,
      "score": 10.0,
      "candidate": "list_ = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n\nprint(list_)\n\nmax_len = max(list_, key=lambda x: len(x))\nprint(max_len)\n\n\"\"\"\nInput:\n[1, 2, 3, 4, 5, 6, 7, 8, 9]\nOutput:\n8\n\nInput:\n[1, 2, 3, 4, 5, 6, 7]\nOutput:\n9\n\nInput:\n[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nOutput:\n10\n\nInput:\n[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100]\nOutput:\n13\n\"\"\""
    },
    {
      "rank": 16,
      "score": 10.0,
      "candidate": "list_of_numbers = [1, 2, 3, 4, 5, 6, 7]\n\nprint(max(list_of_numbers, key=lambda x: len(x)))"
    },
    {
      "rank": 17,
      "score": 10.0,
      "candidate": "import random\n\n\ndef find_max_length_list(nums):\n    return [lambda x: len(x) if len(x) > len(nums) else nums]\n\n\ndef main():\n    nums = [str(random.randint(1, 100)) for _ in range(1000)]\n    print(find_max_length_list(nums))\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 18,
      "score": 10.0,
      "candidate": "def max_length(arr):\n    return max(arr, key=lambda x: len(x))\n\n\nprint(max_length([1, 2, 3, 4, 5]))"
    },
    {
      "rank": 19,
      "score": 10.0,
      "candidate": "def max_list(lst):\n    return max(lst, key=lambda x: len(x))\n\nprint(max_list([1, 2, 3, 4, 5]))\nprint(max_list([1, 2, 3, 4, 5, 6, 7, 8, 9]))\nprint(max_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\nprint(max_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]))\nprint(max_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 161, 162, 163, 164, 165, 166, 171, 172,"
    },
    {
      "rank": 20,
      "score": 10.0,
      "candidate": "list_to_sort = [10, 5, 2, 1, -4, 8, 3, 4]\nmax_length = lambda x: len(x)\n\nprint(max_length(list_to_sort))"
    },
    {
      "rank": 21,
      "score": 10.0,
      "candidate": "def longest_string(my_list):\n    return max(my_list, key=lambda x: len(x))\n\n\nprint(longest_string([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))"
    },
    {
      "rank": 22,
      "score": 10.0,
      "candidate": "def max_length(numbers):\n    return max(numbers, key=len)\n\n\nprint(max_length([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))"
    },
    {
      "rank": 23,
      "score": 10.0,
      "candidate": "def max_length(list_of_numbers):\n    return max(list_of_numbers, key=lambda x: len(x))\n\n\nif __name__ == '__main__':\n    print(max_length([1,2,3,4,5,6,7,8,9]))\n    print(max_length([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,145,145,146,147,148,149,150,151,152,153,154,155,156,156,156,156,156,156,156,156,156,156,156,156,156,156,156,156,156,156,156,156,156,156,156,156,156,156,156,156,156,156,156,156,156,156,156,156,156,156,156,156,156,156,156,156,156,156,156,156,156,156,156,156,156,156,156,156,156,156,156"
    },
    {
      "rank": 24,
      "score": 10.0,
      "candidate": "def find_max_length(list_):\n    return max(list_, key=len)\n\n\nlist_ = [1, 2, 3, 4, 5, 6, 7, 8, 9]\nprint(find_max_length(list_))"
    },
    {
      "rank": 25,
      "score": 10.0,
      "candidate": "def max_length(lst):\n    return max(lst, key=len)\n\nprint(max_length([1,2,3,4,5,6,7,8,9]))"
    },
    {
      "rank": 26,
      "score": 10.0,
      "candidate": "def max_len(lst):\n    return max(map(lambda x: len(x), lst))\n\n\nprint(max_len([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 123, 125, 126, 127, 128, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 144, 145, 146, 147, 148, 149, 151, 152, 153, 155, 156, 157, 158, 159, 161, 162, 163, 164, 165, 166, 167, 168, 169, 171, 172, 173, 176, 177, 178, 179, 181, 182, 183, 184, 185, 186, 187, 189, 191, 192, 193, 195, 196, 197, 199, 200, 201, 202, 203, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 2"
    },
    {
      "rank": 27,
      "score": 10.0,
      "candidate": "test_list = [1, 2, 3, 4, 5, 6, 7, 8]\n\nprint(max(test_list, key=len))"
    },
    {
      "rank": 28,
      "score": 10.0,
      "candidate": "def max_len(lst):\n    return max(map(len, lst))\n\n\nif __name__ == \"__main__\":\n    lst = [1, 2, 3, 4, 5, 6, 7]\n    print(max_len(lst))\n\n    lst = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    print(max_len(lst))\n\n    lst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]\n    print(max_len(lst))"
    },
    {
      "rank": 29,
      "score": 10.0,
      "candidate": "def list_max_length(lst):\n    return max(lst, key=len)\n\nprint(list_max_length([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))"
    },
    {
      "rank": 30,
      "score": 10.0,
      "candidate": "def max_length(lst):\n    return max(lst, key=len)\n\n\nprint(max_length([1, 2, 3, 4, 5, 6]))\nprint(max_length([1, 2, 3, 4, 5, 6, 7, 8, 9]))\nprint(max_length([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))"
    },
    {
      "rank": 31,
      "score": 10.0,
      "candidate": "def max_length(lst):\n    return max(lst, key=len)\n\n\nif __name__ == \"__main__\":\n    print(max_length([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))"
    },
    {
      "rank": 32,
      "score": 10.0,
      "candidate": "max_len = lambda x: len(x)\nprint(max_len([1, 2, 3, 4, 5, 6, 7, 8, 9]))\nprint(max_len([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]))\nprint(max_len([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 155, 157, 158, 156, 159, 160, 161, 162, 163, 164, 167, 168, 169, 171, 172, 173, 174, 178, 179, 181, 182, 184, 185, 186, 188, 191, 193, 194, 195, 196, 197, 199, 200, 201, 202, 203,"
    },
    {
      "rank": 33,
      "score": 10.0,
      "candidate": "max_length = lambda x: len(x)\nprint(max_length([1, 2, 3, 4, 5, 6, 7, 8]))"
    },
    {
      "rank": 34,
      "score": 10.0,
      "candidate": "def max_length(l):\n    return max(l, key=len)\n\n\nif __name__ == '__main__':\n    l = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    print(max_length(l))"
    },
    {
      "rank": 35,
      "score": 10.0,
      "candidate": "def maximum_list_length(lst):\n    return max(map(len, lst))\n\n\nlst = [1, 2, 3, 4, 5, 6, 7, 8, 9]\nprint(maximum_list_length(lst))"
    },
    {
      "rank": 36,
      "score": 10.0,
      "candidate": "list_of_numbers = [3, 5, 7, 1, 2, 8, 9]\n\nprint(max(list_of_numbers, key=lambda x: len(x)))"
    },
    {
      "rank": 37,
      "score": 10.0,
      "candidate": "def find_max_length(list_of_numbers):\n    return max(list_of_numbers, key=len)\n\n\nif __name__ == '__main__':\n    print(find_max_length([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))"
    },
    {
      "rank": 38,
      "score": 10.0,
      "candidate": "list_of_numbers = [1, 2, 3, 4, 5, 6]\n\nprint(max(list_of_numbers, key=lambda x: len(x)))"
    },
    {
      "rank": 39,
      "score": 10.0,
      "candidate": "def max_length(arr):\n    return max(arr, key=len)"
    },
    {
      "rank": 40,
      "score": 10.0,
      "candidate": "def max_length(list_):\n    return max(list_, key=len)\n\n\nlist_ = [1, 2, 3, 4, 5, 6, 7, 8, 9]\nprint(max_length(list_))"
    },
    {
      "rank": 41,
      "score": 10.0,
      "candidate": "list_of_numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nprint(max(list_of_numbers))"
    },
    {
      "rank": 42,
      "score": 10.0,
      "candidate": "def max_length(list):\n    return max(list, key=lambda x: len(x))\n\nprint(max_length([1, 2, 3, 4, 5, 6, 7, 8, 9]))"
    },
    {
      "rank": 43,
      "score": 10.0,
      "candidate": "def maximum_length(nums):\n    return max(nums, key=lambda x: len(x))\n\nprint(maximum_length([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))"
    },
    {
      "rank": 44,
      "score": 9.0,
      "candidate": "list = [1, 2, 3, 4, 5]\n\nprint(list)\n\nmax_length = max(list, key=lambda x: len(x))\nprint(max_length)"
    },
    {
      "rank": 45,
      "score": 8.0,
      "candidate": "def max_length(l):\n    return max(l, key=len)\n\n\nprint(max_length([1, 2, 3, 4, 5, 6, 7]))\nprint(max_length([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\nprint(max_length([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12]))"
    },
    {
      "rank": 46,
      "score": 8.0,
      "candidate": "def max_length(lst):\n    return max(lst, key=lambda x: len(x))\n\n\nif __name__ == '__main__':\n    assert max_length([1, 2, 3, 4, 5, 6, 7, 8, 9]) == 9"
    },
    {
      "rank": 47,
      "score": 8.0,
      "candidate": "def find_max_len(list):\n    return max(list, key=len)\n\n\nprint(find_max_len([1, 2, 3, 4, 5]))"
    },
    {
      "rank": 48,
      "score": 8.0,
      "candidate": "max_length_list = lambda list_of_numbers: max(list_of_numbers, key=len)\n\n# Test 1\nprint(max_length_list([1, 2, 3, 4, 5, 6, 7, 8]))\n\n# Test 2\nprint(max_length_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))"
    },
    {
      "rank": 49,
      "score": 8.0,
      "candidate": "def find_max(my_list):\n    return max(my_list, key=len)\n\nprint(find_max([1,2,3,4,5,6,7,8,9]))"
    },
    {
      "rank": 50,
      "score": 8.0,
      "candidate": "def maximum_length(list_of_numbers):\n    return list(filter(lambda x: len(x) > len(max(list_of_numbers, key=len)), list_of_numbers))\n\n\nprint(maximum_length([1, 2, 3, 4, 5, 6, 7, 8, 9]))"
    },
    {
      "rank": 51,
      "score": 8.0,
      "candidate": "def maximum_length(list):\n    return max(list, key=len)\n\nif __name__ == \"__main__\":\n    print(maximum_length([1, 2, 3, 4, 5, 6, 7]))"
    },
    {
      "rank": 52,
      "score": 8.0,
      "candidate": "def find_max_length(lst):\n    return max(lst, key=len)\n\n\nif __name__ == \"__main__\":\n    lst = [1, 2, 3, 4, 5, 6]\n    print(find_max_length(lst))"
    },
    {
      "rank": 53,
      "score": 8.0,
      "candidate": "def maximum_length(list):\n    return max(list, key=len)\n\n\nprint(maximum_length([1, 2, 3, 4, 5, 6, 7]))"
    },
    {
      "rank": 54,
      "score": 8.0,
      "candidate": "list_1 = [1, 2, 3, 4, 5]\n\nmax_length = lambda l: max(l, key=len)\n\nprint(max_length(list_1))"
    },
    {
      "rank": 55,
      "score": 8.0,
      "candidate": "def find_max_length(arr):\n    max_len = max(map(len, arr))\n    return arr[:max_len]\n\n\narr = [1, 2, 3, 4, 5, 6, 7]\nprint(find_max_length(arr))"
    },
    {
      "rank": 56,
      "score": 8.0,
      "candidate": "def find_max_length(lst):\n    return max(lst, key=len)\n\n\ndef test_find_max_length():\n    assert find_max_length([1, 2, 3, 4, 5]) == 5"
    },
    {
      "rank": 57,
      "score": 8.0,
      "candidate": "# Solution 1\ndef find_max_length(list):\n    return max(list, key=lambda x: len(x))\n\n\n# Solution 2\ndef find_max_length(list):\n    return max(list, key=len)\n\n\nif __name__ == \"__main__\":\n    test_list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    print(find_max_length(test_list))"
    },
    {
      "rank": 58,
      "score": 8.0,
      "candidate": "def max_length(lst):\n    return max(lst, key=lambda x: len(x))\n\n\nif __name__ == '__main__':\n    assert max_length([]) == []\n    assert max_length([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]\n    assert max_length([1, 2, 3, 4, 5, 6, 7]) == [1, 2, 3, 4, 5, 6, 7]"
    },
    {
      "rank": 59,
      "score": 8.0,
      "candidate": "def max_list(l):\n    return max(l, key=len)\n\nl = [1, 2, 3, 4, 5]\nprint(max_list(l))"
    },
    {
      "rank": 60,
      "score": 8.0,
      "candidate": "list_of_numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n\nprint(f\"The list with maximum length is {max(list_of_numbers)}\")"
    },
    {
      "rank": 61,
      "score": 8.0,
      "candidate": "list = [1, 2, 3, 4, 5, 6]\nprint(list)\nmax_len = max(list, key=len)\nprint(max_len)"
    },
    {
      "rank": 62,
      "score": 8.0,
      "candidate": "import random\n\ndef find_max_len(lst):\n    return max(map(len, lst))\n\nif __name__ == \"__main__\":\n    lst = [random.randint(0, 100) for _ in range(10)]\n    print(f\"The list with maximum length is {find_max_len(lst)}\")"
    },
    {
      "rank": 63,
      "score": 8.0,
      "candidate": "import numpy as np\n\nlist1 = [1, 2, 3, 4, 5]\nlist2 = [1, 2, 3, 4, 5, 6, 7, 8, 9]\nlist3 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nlist4 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]\nlist5 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 125, 126, 127, 128, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175,"
    },
    {
      "rank": 64,
      "score": 8.0,
      "candidate": "def max_len(numbers):\n    return max(numbers, key=len)\n\n\nnumbers = [1, 2, 3, 4, 5, 6, 7]\nprint(max_len(numbers))"
    },
    {
      "rank": 65,
      "score": 8.0,
      "candidate": "def max_length(nums):\n    return max(nums, key=len)\n\n\nif __name__ == '__main__':\n    print(max_length([1, 2, 3, 4, 5, 6]))"
    },
    {
      "rank": 66,
      "score": 8.0,
      "candidate": "def find_max_length(list_of_numbers):\n    return max(list_of_numbers, key=len)"
    },
    {
      "rank": 67,
      "score": 8.0,
      "candidate": "def find_max_length(list):\n    return max(list, key=lambda x: len(x))\n\n\nif __name__ == '__main__':\n    print(find_max_length([1, 2, 3, 4, 5, 6]))"
    },
    {
      "rank": 68,
      "score": 8.0,
      "candidate": "def longest_list(list):\n    return max(list, key=len)\n\nprint(longest_list([1, 2, 3, 4, 5, 6, 7]))\nprint(longest_list([1, 2, 3, 4, 5]))\nprint(longest_list([1, 2, 3, 4, 5, 6, 7, 8]))\nprint(longest_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]))"
    },
    {
      "rank": 69,
      "score": 8.0,
      "candidate": "def list_max_len(list):\n    return max(list, key=lambda x: len(x))"
    },
    {
      "rank": 70,
      "score": 8.0,
      "candidate": "def max_list(a_list):\n    return max(a_list, key=len)\n\n\nprint(max_list([1, 2, 3, 4, 5]))"
    },
    {
      "rank": 71,
      "score": 8.0,
      "candidate": "# Given a list\nlist_to_find = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n\n# Given a function\nmax_len = lambda x: len(x)\n\n# When it is called\nmax_len(list_to_find)"
    },
    {
      "rank": 72,
      "score": 8.0,
      "candidate": "def max_length(lst):\n    return max(lst, key=len)"
    },
    {
      "rank": 73,
      "score": 8.0,
      "candidate": "def max_list_length(lst):\n    return max(lst, key=lambda x: len(x))\n\n\nif __name__ == \"__main__\":\n    print(max_list_length([]))"
    },
    {
      "rank": 74,
      "score": 8.0,
      "candidate": "def max_len(list_):\n    return max(list_, key=lambda x: len(x))"
    },
    {
      "rank": 75,
      "score": 8.0,
      "candidate": "def max_len(lst):\n    return max(lst, key=len)\n\n\nif __name__ == '__main__':\n    print(max_len([1, 2, 3, 4, 5, 6, 7, 8, 9]))"
    },
    {
      "rank": 76,
      "score": 8.0,
      "candidate": "def max_length(my_list):\n    return max(map(len, my_list))\n\n\ndef main():\n    my_list = [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\"]\n    print(f\"max length is {max_length(my_list)}\")\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 77,
      "score": 8.0,
      "candidate": "list1 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]\n\nmax_len_list = list(filter(lambda x: len(x) > len(max_len_list), list1))\nprint(max_len_list)"
    },
    {
      "rank": 78,
      "score": 8.0,
      "candidate": "from typing import List\n\n\ndef find_max_length(lst: List[int]) -> int:\n    return max(map(lambda x: len(x), lst))\n\n\nif __name__ == '__main__':\n    assert find_max_length([1, 2, 3, 4, 5]) == 5\n    assert find_max_length([1, 2, 3, 4, 5, 6]) == 6\n    assert find_max_length([1, 2, 3, 4, 5, 6, 7, 8]) == 8\n    assert find_max_length([1, 2, 3, 4, 5, 6, 7, 8, 9]) == 9"
    },
    {
      "rank": 79,
      "score": 8.0,
      "candidate": "l = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n\nmax_len = max(map(lambda x: len(x), l))\nprint(max_len)"
    },
    {
      "rank": 80,
      "score": 8.0,
      "candidate": "def max_length(l):\n    return max(l, key=len)\n\n\nprint(max_length([1, 2, 3, 4, 5]))"
    },
    {
      "rank": 81,
      "score": 8.0,
      "candidate": "def find_max_length(list_of_numbers):\n    return max(list_of_numbers, key=lambda x: len(x))\n\n\nif __name__ == '__main__':\n    print(find_max_length([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))"
    },
    {
      "rank": 82,
      "score": 8.0,
      "candidate": "def max_length(list):\n    return max(list, key=lambda x: len(x))\n\n\nif __name__ == \"__main__\":\n    assert max_length([]) == []\n    assert max_length([1]) == [1]\n    assert max_length([1, 2, 3]) == [1, 2, 3]\n    assert max_length([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert max_length([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]"
    },
    {
      "rank": 83,
      "score": 8.0,
      "candidate": "list_of_numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n\nmax_len_list = list(map(lambda num: len(num), list_of_numbers))\nprint(max_len_list)"
    },
    {
      "rank": 84,
      "score": 8.0,
      "candidate": "def find_max_length(numbers):\n    return max(numbers, key=lambda x: len(x))\n\n\nif __name__ == '__main__':\n    numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    print(find_max_length(numbers))"
    },
    {
      "rank": 85,
      "score": 8.0,
      "candidate": "def max_length(lst):\n    return max(lst, key=len)"
    },
    {
      "rank": 86,
      "score": 8.0,
      "candidate": "# Write a function to find the list with maximum length using lambda function.\ndef find_max_length(lst):\n    return max(lst, key=len)\n\n# Test cases\nprint(find_max_length([1, 2, 3, 4, 5]))\nprint(find_max_length([1, 2, 3, 4, 5, 6, 7]))\nprint(find_max_length([]))\nprint(find_max_length([1, 2, 3, 4, 5, 6, 7]))\nprint(find_max_length([1, 2, 3, 4, 5, 6, 7, 8, 9]))\nprint(find_max_length([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))"
    },
    {
      "rank": 87,
      "score": 8.0,
      "candidate": "def max_len(lst):\n    return max(lst, key = len)\n\nprint(max_len([1, 2, 3, 4, 5, 6, 7, 8, 9]))"
    },
    {
      "rank": 88,
      "score": 8.0,
      "candidate": "import pytest\nfrom functools import reduce\n\n\ndef max_length_list(lst):\n    return reduce(lambda a, b: max(a, b), lst)\n\n\ndef test_max_length_list():\n    assert max_length_list([1, 2, 3, 4, 5]) == 5\n\n    assert max_length_list([1, 2, 3, 4, 5, 6]) == 6\n    assert max_length_list([1, 2, 3, 4, 5, 6, 7]) == 7\n\n    assert max_length_list([1, 2, 3, 4, 5, 6, 7]) == 7\n\n    with pytest.raises(ValueError):\n        max_length_list([1, 2, 3, 4, 5, 6, 7, 8, 9])"
    },
    {
      "rank": 89,
      "score": 8.0,
      "candidate": "def find_max_length(lst):\n    return max(map(len, lst))\n\n\nif __name__ == '__main__':\n    print(find_max_length([1, 2, 3, 4, 5]))\n    print(find_max_length([1, 2, 3, 4, 5, 6]))\n    print(find_max_length([1, 2, 3, 4, 5, 6, 7]))"
    },
    {
      "rank": 90,
      "score": 8.0,
      "candidate": "def find_max_length(list_of_numbers):\n    max_length = 0\n    for i in range(len(list_of_numbers)):\n        if len(list_of_numbers[i]) > max_length:\n            max_length = len(list_of_numbers[i])\n    return max_length\n\n\ndef main():\n    list_of_numbers = [1, 2, 3, 4, 5]\n    print(find_max_length(list_of_numbers))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 91,
      "score": 8.0,
      "candidate": "def find_max_length(l):\n    return max(l, key=len)\n\n\nprint(find_max_length([1, 2, 3, 4, 5]))\nprint(find_max_length([1, 2, 3, 4, 5, 6]))\nprint(find_max_length([1, 2, 3, 4, 5, 6, 7, 8, 9]))"
    },
    {
      "rank": 92,
      "score": 8.0,
      "candidate": "def max_length(my_list):\n    return max(my_list, key=len)\n\nprint(max_length([1, 2, 3, 4, 5, 6, 7, 8, 9]))\nprint(max_length([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))"
    },
    {
      "rank": 93,
      "score": 8.0,
      "candidate": "def find_max_len(list_of_numbers):\n    return max(list_of_numbers, key=len)\n\nlist_of_numbers = [1, 2, 3, 4, 5, 6]\nprint(find_max_len(list_of_numbers))"
    },
    {
      "rank": 94,
      "score": 8.0,
      "candidate": "def max_length(lst):\n    return max(lst, key=len)\n\n\nprint(max_length([1, 2, 3, 4, 5]))\nprint(max_length([1, 2, 3, 4, 5, 6, 7, 8]))"
    },
    {
      "rank": 95,
      "score": 8.0,
      "candidate": "list_of_numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n\nprint(\"The list with maximum length using lambda function is {}\".format(max(list_of_numbers)))"
    },
    {
      "rank": 96,
      "score": 8.0,
      "candidate": "def max_len(arr):\n    return max(arr, key=len)\n\nif __name__ == \"__main__\":\n    print(max_len([1,2,3,4,5,6,7,8,9]))"
    },
    {
      "rank": 97,
      "score": 8.0,
      "candidate": "def find_max_length(list):\n    return max(map(len, list))"
    },
    {
      "rank": 98,
      "score": 1.0,
      "candidate": "from typing import List\n\n\ndef find_max_length(lst: List[int]) -> int:\n    return max(lst, key=len)\n\n\nif __name__ == '__main__':\n    assert find_max_length([1, 2, 3]) == 3\n    assert find_max_length([1, 2, 3, 4, 5]) == 5\n    assert find_max_length([1, 2, 3, 4, 5, 6]) == 6\n    assert find_max_length([1, 2, 3, 4, 5, 6, 7]) == 7"
    },
    {
      "rank": 99,
      "score": 1.0,
      "candidate": "from typing import List\n\n\ndef find_max_length(arr: List[int]) -> int:\n    return max(arr, key=len)"
    },
    {
      "rank": 100,
      "score": 1.0,
      "candidate": "def find_max_length(arr):\n    return max(arr, key=lambda x: len(x))\n\n\nif __name__ == '__main__':\n    assert find_max_length([]) == []\n    assert find_max_length([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]\n    assert find_max_length([1, 2, 3, 4, 5, 6]) == [1, 2, 3, 4, 5, 6]\n    assert find_max_length([1, 2, 3, 4, 5, 6, 7]) == [1, 2, 3, 4, 5, 6, 7]\n    assert find_max_length([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    assert find_max_length([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]"
    }
  ]
}