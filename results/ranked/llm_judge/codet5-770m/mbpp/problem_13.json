{
  "timestamp": "2025-09-14T12:34:15.234277",
  "method": "improved_llm_judge",
  "judge_model": "codellama/CodeLlama-7b-Python-hf",
  "target_model": "codet5-770m",
  "dataset": "mbpp",
  "problem_number": 13,
  "total_candidates": 100,
  "results": [
    {
      "rank": 1,
      "score": 10.0,
      "candidate": "class Solution(object):\n    def convert(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        return int(bin(n)[2:])"
    },
    {
      "rank": 2,
      "score": 10.0,
      "candidate": "def bin2dec(bin_num):\n    dec_num = 0\n    for i in bin_num:\n        dec_num = dec_num * 2 + int(i)\n    return dec_num\n\nprint(bin2dec(5))\nprint(bin2dec(7))\nprint(bin2dec(9))"
    },
    {
      "rank": 3,
      "score": 10.0,
      "candidate": "def binary_to_decimal(binary):\n    decimal = 0\n    for bit in binary:\n        decimal += 2**bit\n    return decimal\n\nprint(binary_to_decimal(\"0111\"))"
    },
    {
      "rank": 4,
      "score": 10.0,
      "candidate": "def binary_to_decimal(binary):\n    return int(binary, 2)"
    },
    {
      "rank": 5,
      "score": 10.0,
      "candidate": "def binary_to_decimal(binary_num):\n    decimal_num = 0\n    while binary_num!= 0:\n        decimal_num += binary_num % 2\n        binary_num = binary_num // 2\n    return decimal_num\n\n\nprint(binary_to_decimal(5))"
    },
    {
      "rank": 6,
      "score": 10.0,
      "candidate": "def bin_to_dec(binary):\n    return int(binary, 2)\n\n\nif __name__ == \"__main__\":\n    print(bin_to_dec(\"101\"))"
    },
    {
      "rank": 7,
      "score": 10.0,
      "candidate": "def decimal_to_binary(n):\n    binary_number = \"\"\n    while n!= 0:\n        binary_number += str(n % 2)\n        n //= 2\n    return binary_number\n\nprint(decimal_to_binary(7))\nprint(decimal_to_binary(8))\nprint(decimal_to_binary(3))\nprint(decimal_to_binary(5))\nprint(decimal_to_binary(0))"
    },
    {
      "rank": 8,
      "score": 10.0,
      "candidate": "def binary_to_decimal(binary):\n    decimal = 0\n    if len(binary) < 1:\n        return decimal\n    for i in range(len(binary)):\n        decimal += int(binary[i]) * pow(2, i)\n    return decimal\n\n\nif __name__ == \"__main__\":\n    assert binary_to_decimal(\"100\") == 100\n    assert binary_to_decimal(\"11\") == 11\n    assert binary_to_decimal(\"10\") == 10\n    assert binary_to_decimal(\"01\") == 1\n    assert binary_to_decimal(\"0\") == 0\n    assert binary_to_decimal(\"1111111111111111111111\") == 2\n    assert binary_to_decimal(\"1111111111111111111111111\") == 9\n    assert binary_to_decimal(\"11111111111111111111110111\") == 3\n    assert binary_to_decimal(\"11111111111111111111110011\") == 4\n    assert binary_to_decimal(\"1111111111111111111111011111\") == 5\n    assert binary_to_decimal(\"11111111111111111111111111011100\") == 6\n    assert binary_to_decimal(\"111111111111111111111111110111001100\") == 7\n    assert binary_to_decimal(\"111111111111111111111111110111001100\") == 8\n    assert binary_to_decimal(\"1111111111111111111111111101111100\") == 9\n    assert binary_to_decimal(\"111111111111111111111111110111001100\") == 10"
    },
    {
      "rank": 9,
      "score": 10.0,
      "candidate": "def binary_to_decimal(binary):\n    decimal = 0\n    for i in range(len(binary)):\n        decimal += int(binary[i]) * (2 ** i)\n    return decimal\n\n\nprint(binary_to_decimal(\"100\"))\nprint(binary_to_decimal(\"101\"))\nprint(binary_to_decimal(\"110\"))\nprint(binary_to_decimal(\"111\"))"
    },
    {
      "rank": 10,
      "score": 10.0,
      "candidate": "class Solution:\n    def decimalToBinary(self, n: int) -> str:\n        if n == 0:\n            return \"0\"\n        if n == 1:\n            return \"1\"\n\n        if n < 0:\n            n *= -1\n            return self.decimalToBinary(-n)\n\n        result = []\n        while n > 0:\n            result.append(n % 2)\n            n //= 2\n\n        result.reverse()\n        return \"\".join([str(i) for i in result])"
    },
    {
      "rank": 11,
      "score": 10.0,
      "candidate": "def decimal_to_binary(num):\n    if num == 0:\n        return 0\n    else:\n        return num // 2\n\nprint(decimal_to_binary(12))\nprint(decimal_to_binary(6))\nprint(decimal_to_binary(3))\nprint(decimal_to_binary(2))\nprint(decimal_to_binary(1))"
    },
    {
      "rank": 12,
      "score": 10.0,
      "candidate": "def convert_binary_to_decimal(binary_num):\n    decimal_num = 0\n    while binary_num:\n        decimal_num = decimal_num * 2 + binary_num % 2\n        binary_num //= 2\n    return decimal_num\n\n\nprint(convert_binary_to_decimal(0b111))"
    },
    {
      "rank": 13,
      "score": 10.0,
      "candidate": "def binary_to_decimal(binary_num):\n    decimal = 0\n    while binary_num:\n        decimal = decimal*2 + int(binary_num % 2)\n        binary_num = int(binary_num / 2)\n    return decimal\n\nprint(binary_to_decimal(5))\nprint(binary_to_decimal(2))\nprint(binary_to_decimal(3))\nprint(binary_to_decimal(10))\nprint(binary_to_decimal(11))\nprint(binary_to_decimal(12))\nprint(binary_to_decimal(13))\nprint(binary_to_decimal(14))\nprint(binary_to_decimal(15))\nprint(binary_to_decimal(16))\nprint(binary_to_decimal(17))\nprint(binary_to_decimal(18))\nprint(binary_to_decimal(19))\nprint(binary_to_decimal(20))\nprint(binary_to_decimal(21))\nprint(binary_to_decimal(22))\nprint(binary_to_decimal(23))\nprint(binary_to_decimal(24))\nprint(binary_to_decimal(25))\nprint(binary_to_decimal(26))\nprint(binary_to_decimal(27))\nprint(binary_to_decimal(28))\nprint(binary_to_decimal(29))\nprint(binary_to_decimal(30))\nprint(binary_to_decimal(31))\nprint(binary_to_decimal(32))\nprint(binary_to_decimal(33))\nprint(binary_to_decimal(34))\nprint(binary_to_decimal(35))\nprint(binary_to_decimal(36))\nprint(binary_to_decimal(37))\nprint(binary_to_decimal(38))\nprint(binary_to_decimal(39))\nprint(binary_to_decimal(40))\nprint(binary_to_decimal(41))\nprint(binary_to_decimal(42))\nprint(binary_to_decimal(43))\nprint(binary_to_decimal(44))\nprint(binary_to_decimal(45))\nprint(binary_to_decimal(46))\nprint(binary_to_decimal(47))"
    },
    {
      "rank": 14,
      "score": 10.0,
      "candidate": "def convert_binary_to_decimal(binary_number):\n    if binary_number == 0:\n        return 0\n    binary_number_as_decimal = binary_number - 1\n    decimal_number = 0\n    while binary_number_as_decimal >= 0:\n        decimal_number = decimal_number * 2 + binary_number_as_decimal\n        binary_number_as_decimal = binary_number_as_decimal - 1\n    return decimal_number\n\n\ndef main():\n    print(convert_binary_to_decimal(0))\n    print(convert_binary_to_decimal(1))\n    print(convert_binary_to_decimal(2))\n    print(convert_binary_to_decimal(3))\n    print(convert_binary_to_decimal(4))\n    print(convert_binary_to_decimal(5))\n    print(convert_binary_to_decimal(6))\n    print(convert_binary_to_decimal(7))\n    print(convert_binary_to_decimal(8))\n    print(convert_binary_to_decimal(9))\n\n\nmain()"
    },
    {
      "rank": 15,
      "score": 10.0,
      "candidate": "def binary_to_decimal(binary):\n    decimal = 0\n    for i in range(len(binary)-1,-1,-1):\n        decimal += int(binary[i]) * 2 ** i\n    return decimal\n\nprint(binary_to_decimal(\"100\"))"
    },
    {
      "rank": 16,
      "score": 10.0,
      "candidate": "def decimal(n):\n    if n == 0:\n        return 0\n    else:\n        return n * decimal(n - 1)\n\nprint(decimal(5))"
    },
    {
      "rank": 17,
      "score": 10.0,
      "candidate": "def binary_to_decimal(binary_num):\n    decimal_num = 0\n    for i in binary_num:\n        decimal_num += int(i) * 2**(len(binary_num) - i - 1)\n    return decimal_num\n\nif __name__ == '__main__':\n    binary_num = \"111111\"\n    print(binary_to_decimal(binary_num))\n\n    binary_num = \"1110111\"\n    print(binary_to_decimal(binary_num))\n\n    binary_num = \"101\"\n    print(binary_to_decimal(binary_num))\n\n    binary_num = \"1101\"\n    print(binary_to_decimal(binary_num))\n\n    binary_num = \"1111\"\n    print(binary_to_decimal(binary_num))\n\n    binary_num = \"10101\"\n    print(binary_to_decimal(binary_num))\n\n    binary_num
    },
    {
      "rank": 18,
      "score": 10.0,
      "candidate": "def convert_binary(n):\n    if n == 0:\n        return 0\n    else:\n        return convert_binary(n//2) + convert_binary(n%2)\n\n\nif __name__ == \"__main__\":\n    print(convert_binary(5))\n    print(convert_binary(4))\n    print(convert_binary(1))\n    print(convert_binary(8))\n    print(convert_binary(5))"
    },
    {
      "rank": 19,
      "score": 10.0,
      "candidate": "def binary_to_decimal(n):\n    decimal = 0\n    while n!= 0:\n        decimal = decimal * 2 + n % 2\n        n //= 2\n    return decimal\n\nprint(binary_to_decimal(1))\nprint(binary_to_decimal(2))\nprint(binary_to_decimal(3))\nprint(binary_to_decimal(4))\nprint(binary_to_decimal(5))\nprint(binary_to_decimal(6))\nprint(binary_to_decimal(7))\nprint(binary_to_decimal(8))\nprint(binary_to_decimal(9))"
    },
    {
      "rank": 20,
      "score": 10.0,
      "candidate": "def binary_to_decimal(binary):\n    decimal = 0\n    while binary:\n        decimal = decimal * 2 + binary % 2\n        binary //= 2\n    return decimal\n\n\nprint(binary_to_decimal(4))\nprint(binary_to_decimal(1))\nprint(binary_to_decimal(3))\nprint(binary_to_decimal(2))\nprint(binary_to_decimal(6))\nprint(binary_to_decimal(8))\nprint(binary_to_decimal(0))\nprint(binary_to_decimal(9))\nprint(binary_to_decimal(6))\nprint(binary_to_decimal(7))\nprint(binary_to_decimal(4))\nprint(binary_to_decimal(8))\nprint(binary_to_decimal(0))"
    },
    {
      "rank": 21,
      "score": 10.0,
      "candidate": "def binary_to_decimal(binary_num):\n    decimal_num = 0\n    while binary_num:\n        decimal_num = decimal_num * 2 + binary_num % 2\n        binary_num //= 2\n    return decimal_num\n\n\nprint(binary_to_decimal(1))\nprint(binary_to_decimal(2))\nprint(binary_to_decimal(3))\nprint(binary_to_decimal(4))\nprint(binary_to_decimal(5))\nprint(binary_to_decimal(6))\nprint(binary_to_decimal(7))\nprint(binary_to_decimal(8))\nprint(binary_to_decimal(9))\nprint(binary_to_decimal(10))"
    },
    {
      "rank": 22,
      "score": 10.0,
      "candidate": "def binary_to_decimal(binary_num):\n    decimal_num = 0\n    while binary_num!= 0:\n        decimal_num = decimal_num * 2 + binary_num % 2\n        binary_num //= 2\n    return decimal_num\n\n\nif __name__ == \"__main__\":\n    assert binary_to_decimal(7) == 1\n    assert binary_to_decimal(10) == 9\n    assert binary_to_decimal(11) == 11\n    assert binary_to_decimal(12) == 14\n    assert binary_to_decimal(13) == 16\n    assert binary_to_decimal(14) == 21\n    assert binary_to_decimal(15) == 28\n    assert binary_to_decimal(16) == 36\n    assert binary_to_decimal(17) == 49\n    assert binary_to_decimal(18) == 64\n    assert binary_to_decimal(19) == 81\n    assert binary_to_decimal(20) == 100\n    assert binary_to_decimal(21) == 111\n    assert binary_to_decimal(22) == 121\n    assert binary_to_decimal(23) == 131\n    assert binary_to_decimal(24) == 141\n    assert binary_to_decimal(25) == 151\n    assert binary_to_decimal(26) == 161\n    assert binary_to_decimal(27) == 181\n    assert binary_to_decimal(28) == 191\n    assert binary_to_decimal(29) == 211\n    assert binary_to_decimal(30) == 222\n    assert binary_to_decimal(31) == 231"
    },
    {
      "rank": 23,
      "score": 10.0,
      "candidate": "def decimal_to_binary(decimal):\n    binary = \"\"\n    while decimal!= 0:\n        binary = str(decimal % 2) + binary\n        decimal //= 2\n    return binary\n\n\nprint(decimal_to_binary(0))\nprint(decimal_to_binary(1))\nprint(decimal_to_binary(2))\nprint(decimal_to_binary(3))\nprint(decimal_to_binary(4))\nprint(decimal_to_binary(5))\nprint(decimal_to_binary(6))\nprint(decimal_to_binary(7))\nprint(decimal_to_binary(8))\nprint(decimal_to_binary(9))\nprint(decimal_to_binary(10))\nprint(decimal_to_binary(11))\nprint(decimal_to_binary(12))\nprint(decimal_to_binary(13))\nprint(decimal_to_binary(14))\nprint(decimal_to_binary(15))\nprint(decimal_to_binary(16))\nprint(decimal_to_binary(17))\nprint(decimal_to_binary(18))\nprint(decimal_to_binary(19))\nprint(decimal_to_binary(20))\nprint(decimal_to_binary(21))\nprint(decimal_to_binary(22))\nprint(decimal_to_binary(23))\nprint(decimal_to_binary(24))\nprint(decimal_to_binary(25))\nprint(decimal_to_binary(26))\nprint(decimal_to_binary(27))\nprint(decimal_to_binary(28))\nprint(decimal_to_binary(29))\nprint(decimal_to_binary(30))\nprint(decimal_to_binary(31))\nprint(decimal_to_binary(32))\nprint(decimal_to_binary(33))\nprint(decimal_to_binary(34))\nprint(decimal_to_binary(35))\nprint(decimal_to_binary(36))\nprint(decimal_to_binary(37))\nprint(decimal_to_binary(38))\nprint(decimal_to_binary(39))\nprint(decimal_to_binary(40))\nprint(decimal_to_binary(41))\nprint"
    },
    {
      "rank": 24,
      "score": 9.0,
      "candidate": "def bin_to_dec(bin_num):\n    decimal = 0\n    for i in range(len(bin_num)):\n        decimal += 2 ** (len(bin_num) - 1 - i) * int(bin_num[i])\n    return decimal\n\nprint(bin_to_dec(\"101\"))"
    },
    {
      "rank": 25,
      "score": 9.0,
      "candidate": "def binary_to_decimal(binary_num):\n    decimal_num = 0\n    while binary_num!= 0:\n        decimal_num = decimal_num * 2 + binary_num % 2\n        binary_num //= 2\n    return decimal_num\n\n\nprint(binary_to_decimal(2))\nprint(binary_to_decimal(4))\nprint(binary_to_decimal(6))\nprint(binary_to_decimal(8))\nprint(binary_to_decimal(1))"
    },
    {
      "rank": 26,
      "score": 8.0,
      "candidate": "def binary_to_decimal(num):\n    if num == 0:\n        return 0\n    num = str(num)\n    if len(num) == 1:\n        return int(num, 2)\n    else:\n        return int(num[0]) + binary_to_decimal(int(num[1:]))\n\n\nprint(binary_to_decimal(3))"
    },
    {
      "rank": 27,
      "score": 8.0,
      "candidate": "def binary_to_decimal(binary_num):\n    decimal_num = 0\n\n    while binary_num > 0:\n        decimal_num = decimal_num * 2 + binary_num % 2\n        binary_num //= 2\n\n    return decimal_num"
    },
    {
      "rank": 28,
      "score": 8.0,
      "candidate": "class Solution(object):\n    def convertBinary(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        # Your code here\n        if n == 0:\n            return 0\n        return bin(n).count('1') + self.convertBinary(n // 2)"
    },
    {
      "rank": 29,
      "score": 8.0,
      "candidate": "def binary_to_decimal(binary_num):\n    decimal = 0\n    while binary_num > 0:\n        decimal += binary_num % 10\n        binary_num //= 10\n    return decimal"
    },
    {
      "rank": 30,
      "score": 8.0,
      "candidate": "def convert_binary_to_decimal(binary_number):\n    decimal_number = 0\n    while binary_number!= 0:\n        decimal_number = decimal_number * 2 + binary_number % 2\n        binary_number //= 2\n    return decimal_number\n\nprint(convert_binary_to_decimal(10))"
    },
    {
      "rank": 31,
      "score": 8.0,
      "candidate": "def convert_binary(num):\n    decimal = 0\n    while num:\n        decimal += (num & 1) * 2 ** (num - 1)\n        num >>= 1\n    return decimal\n\n\nprint(convert_binary(5))"
    },
    {
      "rank": 32,
      "score": 8.0,
      "candidate": "def binary_to_decimal(binary: str) -> int:\n    binary = binary.split(\" \")\n    decimal = 0\n    for i in binary:\n        decimal = decimal * 2 + int(i)\n    return decimal\n\n\nif __name__ == \"__main__\":\n    assert binary_to_decimal(\"100\") == 10\n    assert binary_to_decimal(\"101\") == 11\n    assert binary_to_decimal(\"110\") == 10\n    assert binary_to_decimal(\"10101\") == 11\n    assert binary_to_decimal(\"101011\") == 10\n    assert binary_to_decimal(\"1010110101\") == 10\n    assert binary_to_decimal(\"1010110101101\") == 10\n    assert binary_to_decimal(\"101011010110101\") == 10\n    assert binary_to_decimal(\"1000101\") == 10\n    assert binary_to_decimal(\"10101010110101\") == 10\n    assert binary_to_decimal(\"10101010110101\") == 10\n    assert binary_to_decimal(\"101010110110101101\") == 10"
    },
    {
      "rank": 33,
      "score": 8.0,
      "candidate": "def bin2dec(bin_str):\n    dec_str = \"\"\n    for i in range(len(bin_str)):\n        dec_str += str(bin_str[i])\n    return dec_str\n\n\nif __name__ == \"__main__\":\n    print(bin2dec(\"101\"))"
    },
    {
      "rank": 34,
      "score": 8.0,
      "candidate": "def decimal_to_binary(num):\n    return bin(num)[2:]\n\n\ndef binary_to_decimal(bin):\n    return int(bin, 2)\n\n\nprint(decimal_to_binary(10))\nprint(binary_to_decimal(\"01\"))"
    },
    {
      "rank": 35,
      "score": 8.0,
      "candidate": "class Solution:\n    # @param n, an integer\n    # @return an integer\n    def convert(self, n):\n        return int(bin(n)[2:], 2)"
    },
    {
      "rank": 36,
      "score": 8.0,
      "candidate": "def convert(num):\n    res = 0\n    while num:\n        res += num % 10\n        num = num // 10\n    return res\n\nif __name__ == '__main__':\n    num = int(input('Enter a binary number: '))\n    print(f'Decimal equivalent: {convert(num)}')"
    },
    {
      "rank": 37,
      "score": 8.0,
      "candidate": "def convert_binary_to_decimal(binary_number):\n    decimal_number = 0\n\n    while binary_number > 0:\n        decimal_number = decimal_number * 2 + binary_number % 2\n        binary_number //= 2\n\n    return decimal_number\n\n\nprint(convert_binary_to_decimal(int(input(\"Enter a binary number: \"))))"
    },
    {
      "rank": 38,
      "score": 8.0,
      "candidate": "def binary_to_decimal(num):\n    return int(str(num)[::-1],2)\n\ndef test():\n    assert binary_to_decimal(10) == 10\n    assert binary_to_decimal(5) == 5\n    assert binary_to_decimal(2) == 2\n    assert binary_to_decimal(1) == 1\n\nif __name__ == \"__main__\":\n    test()"
    },
    {
      "rank": 39,
      "score": 8.0,
      "candidate": "def binary_to_decimal(num: str):\n    return int(num, 2)\n\n\nif __name__ == \"__main__\":\n    print(binary_to_decimal(\"0101\"))\n    print(binary_to_decimal(\"100\"))\n    print(binary_to_decimal(\"1010\"))"
    },
    {
      "rank": 40,
      "score": 8.0,
      "candidate": "def convert_binary(binary):\n    # write your code here\n    decimal = 0\n    for i in binary:\n        decimal = decimal * 2 + int(i)\n    return decimal\n\n\nprint(convert_binary(input(\"Enter the binary number: \")))"
    },
    {
      "rank": 41,
      "score": 8.0,
      "candidate": "def convert_binary(binary_num: int) -> int:\n    decimal_num = 0\n    while binary_num > 0:\n        decimal_num += binary_num % 10\n        binary_num //= 10\n    return decimal_num\n\n\nif __name__ == '__main__':\n    assert convert_binary(3) == 2\n    assert convert_binary(2) == 1\n    assert convert_binary(1) == 0"
    },
    {
      "rank": 42,
      "score": 8.0,
      "candidate": "def convert_binary_to_decimal(binary_number):\n    decimal_number = 0\n    for digit in binary_number:\n        decimal_number += int(digit) * 2 ** (len(binary_number) - 1 - int(digit))\n    return decimal_number\n\n\nprint(convert_binary_to_decimal('01'))\nprint(convert_binary_to_decimal('10'))\nprint(convert_binary_to_decimal('11'))\nprint(convert_binary_to_decimal('0111'))"
    },
    {
      "rank": 43,
      "score": 8.0,
      "candidate": "def binary_to_decimal(bin_num):\n    decimal_num = 0\n    while bin_num:\n        decimal_num += bin_num % 10\n        bin_num = bin_num // 10\n    return decimal_num\n\n\nif __name__ == \"__main__\":\n    print(binary_to_decimal(3))\n    print(binary_to_decimal(2))\n    print(binary_to_decimal(1))"
    },
    {
      "rank": 44,
      "score": 8.0,
      "candidate": "def binary_to_decimal(n):\n    if n < 0:\n        return -1\n    return int(bin(n)[2:])"
    },
    {
      "rank": 45,
      "score": 8.0,
      "candidate": "def decimal_to_binary(num):\n    decimal_list = []\n    while num > 0:\n        decimal_list.append(num % 2)\n        num = num // 2\n    return decimal_list\n\n\nassert decimal_to_binary(2) == [0, 1, 1, 0]\nassert decimal_to_binary(3) == [0, 0, 1, 1]\nassert decimal_to_binary(4) == [0, 0, 0, 1]\nassert decimal_to_binary(5) == [0, 0, 0, 0, 0]\nassert decimal_to_binary(6) == [0, 0, 0, 0, 0]"
    },
    {
      "rank": 46,
      "score": 8.0,
      "candidate": "def binary_to_decimal(binary):\n    decimal = 0\n    for i in range(len(binary)):\n        decimal = decimal * 2 + int(binary[i])\n    return decimal\n\n\nif __name__ == '__main__':\n    print(binary_to_decimal(\"11\"))\n    print(binary_to_decimal(\"100\"))\n    print(binary_to_decimal(\"101\"))\n    print(binary_to_decimal(\"1101\"))"
    },
    {
      "rank": 47,
      "score": 8.0,
      "candidate": "def binary_to_decimal(binary_num):\n    decimal_num = 0\n    for i in range(len(binary_num)):\n        decimal_num += (2**i)*binary_num[i]\n    return decimal_num\n\nbinary_num = input()\nprint(binary_to_decimal(binary_num))"
    },
    {
      "rank": 48,
      "score": 8.0,
      "candidate": "def decimal_to_binary(n):\n    # print(n)\n    res = []\n    while n:\n        res.append(n % 2)\n        n = n // 2\n    return res\n\n\nprint(decimal_to_binary(4))\nprint(decimal_to_binary(6))\nprint(decimal_to_binary(7))\nprint(decimal_to_binary(8))\nprint(decimal_to_binary(9))\nprint(decimal_to_binary(10))"
    },
    {
      "rank": 49,
      "score": 8.0,
      "candidate": "def binary_to_decimal(binary):\n    decimal = 0\n    for i in range(len(binary)):\n        decimal += (2**i)*int(binary[i])\n    return decimal\n\n\nbinary = \"1010\"\nprint(binary_to_decimal(binary))"
    },
    {
      "rank": 50,
      "score": 8.0,
      "candidate": "def convert(num):\n    return int(num, 2)\n\n\nnum = input(\"Enter a binary number: \")\nprint(f\"Binary number: {num} is decimal equivalent: {convert(num)}\")"
    },
    {
      "rank": 51,
      "score": 8.0,
      "candidate": "def convert_to_decimal(binary_num):\n    binary_num = binary_num.replace('0', '.')\n    decimal_num = ''\n    for num in binary_num:\n        if num.isdigit():\n            decimal_num += str(int(num))\n        else:\n            decimal_num += num\n    return decimal_num\n\n\nprint(convert_to_decimal('01'))\nprint(convert_to_decimal('11'))\nprint(convert_to_decimal('101'))\nprint(convert_to_decimal('111'))\nprint(convert_to_decimal('111001'))\nprint(convert_to_decimal('1010101'))\nprint(convert_to_decimal('1101010101'))"
    },
    {
      "rank": 52,
      "score": 8.0,
      "candidate": "def binary_to_decimal(binary_num):\n    if binary_num == 0:\n        return 0\n    decimal_num = 0\n    while binary_num > 0:\n        decimal_num += binary_num % 2\n        binary_num //= 2\n    return decimal_num\n\n\nprint(binary_to_decimal(2))\nprint(binary_to_decimal(1))\nprint(binary_to_decimal(0))\nprint(binary_to_decimal(3))\nprint(binary_to_decimal(4))"
    },
    {
      "rank": 53,
      "score": 8.0,
      "candidate": "def decimal_to_binary(decimal):\n    binary = \"\"\n    while decimal!= 0:\n        binary += str(decimal % 2)\n        decimal //= 2\n\n    return binary\n\n\nprint(decimal_to_binary(3))\nprint(decimal_to_binary(5))"
    },
    {
      "rank": 54,
      "score": 8.0,
      "candidate": "def bin_to_dec(binary):\n    binary = binary.split(\"1\")\n    dec = 0\n    for i in range(len(binary)):\n        dec += (int(binary[i]) * 2**i)\n    return dec\n\nprint(bin_to_dec(\"101\"))\nprint(bin_to_dec(\"0111\"))\nprint(bin_to_dec(\"01011\"))"
    },
    {
      "rank": 55,
      "score": 8.0,
      "candidate": "def binary_to_decimal(binary: str) -> str:\n    decimal = 0\n    for i in range(len(binary)):\n        decimal += int(binary[i]) * 2 ** i\n    return str(decimal)\n\n\nif __name__ == \"__main__\":\n    print(binary_to_decimal(\"100\"))"
    },
    {
      "rank": 56,
      "score": 8.0,
      "candidate": "def binary_to_decimal(binary):\n    decimal = 0\n    for i in range(len(binary)):\n        decimal = decimal + (2**i)*int(binary[i])\n    return decimal\n\nprint(binary_to_decimal(\"1010\"))\nprint(binary_to_decimal(\"1111\"))\nprint(binary_to_decimal(\"101\"))\nprint(binary_to_decimal(\"10\"))\nprint(binary_to_decimal(\"11\"))\nprint(binary_to_decimal(\"101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101"
    },
    {
      "rank": 57,
      "score": 8.0,
      "candidate": "def binary_to_decimal(binary_num):\n    decimal_num = 0\n    while binary_num > 0:\n        decimal_num = decimal_num * 2 + binary_num % 2\n        binary_num //= 2\n    return decimal_num\n\n\nif __name__ == \"__main__\":\n    binary_num = int(input(\"Enter the binary number: \"))\n    decimal_num = binary_to_decimal(binary_num)\n    print(\"Decimal equivalent of {} is {}\".format(binary_num, decimal_num))"
    },
    {
      "rank": 58,
      "score": 8.0,
      "candidate": "def binary_to_decimal(n):\n    if n == 0:\n        return 0\n    return (bin(n)).count('1')"
    },
    {
      "rank": 59,
      "score": 8.0,
      "candidate": "def binary_to_decimal(binary_num):\n    if binary_num == 0:\n        return 0\n    else:\n        return binary_num * 2 + binary_to_decimal(binary_num - 1)\n\nif __name__ == \"__main__\":\n    binary_num = int(input(\"Enter a binary number: \"))\n    print(binary_to_decimal(binary_num))"
    },
    {
      "rank": 60,
      "score": 1.0,
      "candidate": "def binary_to_decimal(binary):\n    decimal = 0\n    for i in range(len(binary)):\n        decimal += int(binary[i]) * 2 ** i\n    return decimal\n\n\nassert binary_to_decimal(\"1010\") == 100\nassert binary_to_decimal(\"101\") == 100\nassert binary_to_decimal(\"1011\") == 101\nassert binary_to_decimal(\"1101\") == 10\nassert binary_to_decimal(\"1111\") == 0\nassert binary_to_decimal(\"111110\") == 0\nassert binary_to_decimal(\"111101\") == 0\nassert binary_to_decimal(\"11111111\") == 0"
    },
    {
      "rank": 61,
      "score": 1.0,
      "candidate": "class Solution:\n    def convert(self, num: str, base: int) -> str:\n        if num == \"0\":\n            return \"0\"\n        if num[0] == \"1\":\n            return self.convert(num[1:], base) + \".\"\n        else:\n            return self.convert(num[1:], base) + self.convert(num[0], base)\n\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.convert(\"100\", 2))\n    print(sol.convert(\"100\", 2))\n    print(sol.convert(\"101\", 2))\n    print(sol.convert(\"101\", 2))"
    },
    {
      "rank": 62,
      "score": 1.0,
      "candidate": "def binary_to_decimal(binary):\n    if binary == \"0\":\n        return 0\n    else:\n        return int(binary, 2)\n\nprint(binary_to_decimal(\"1\"))\nprint(binary_to_decimal(\"0\"))\nprint(binary_to_decimal(\"1\"))\nprint(binary_to_decimal(\"0\"))\nprint(binary_to_decimal(\"1\"))\nprint(binary_to_decimal(\"1\"))\nprint(binary_to_decimal(\"0\"))\nprint(binary_to_decimal(\"0\"))\nprint(binary_to_decimal(\"1\"))\nprint(binary_to_decimal(\"0\"))\nprint(binary_to_decimal(\"0\"))\nprint(binary_to_decimal(\"0\"))\nprint(binary_to_decimal(\"0\"))\nprint(binary_to_decimal(\"1\"))\nprint(binary_to_decimal(\"0\"))\nprint(binary_to_decimal(\"0\"))\nprint(binary_to_decimal(\"0\"))\nprint(binary_to_decimal(\"0\"))\nprint(binary_to_decimal(\"1\"))\nprint(binary_to_decimal(\"0\"))\nprint(binary_to_decimal(\"0\"))\nprint(binary_to_decimal(\"0\"))\nprint(binary_to_decimal(\"0\"))\nprint(binary_to_decimal(\"0\"))\nprint(binary_to_decimal(\"0\"))\nprint(binary_to_decimal(\"0\"))\nprint(binary_to_decimal(\"0\"))\nprint(binary_to_decimal(\"0\"))\nprint(binary_to_decimal(\"0\"))\nprint(binary_to_decimal(\"0\"))\nprint(binary_to_decimal(\"0\"))\nprint(binary_to_decimal(\"0\"))\nprint(binary_to_decimal(\"0\"))\nprint(binary_to_decimal(\"0\"))\nprint(binary_to_decimal(\"0\"))\nprint(binary_to_decimal(\"0\"))\nprint(binary_to_decimal(\"0\"))\nprint(binary_to_decimal(\"0\"))\nprint(binary_to_decimal(\"0\"))\nprint(binary_to"
    },
    {
      "rank": 63,
      "score": 1.0,
      "candidate": "def convert_binary_to_decimal(binary_number: str) -> float:\n    return float(binary_number)"
    },
    {
      "rank": 64,
      "score": 1.0,
      "candidate": "def bin2dec(num):\n    # return num * 10\n    num = int(num)\n    return num\n\n\ndef dec2bin(num):\n    num = int(num)\n    return str(num)\n\n\ndef dec2bin2dec(num):\n    num = int(num)\n    if num == 0:\n        return \"0\"\n    return str(num)\n\n\ndef dec2bin2dec2(num):\n    num = int(num)\n    if num == 0:\n        return \"0\"\n    return str(num)\n\n\ndef dec2bin2dec2(num):\n    num = int(num)\n    if num == 0:\n        return \"0\"\n    return str(num)\n\n\ndef dec2bin2dec2(num):\n    num = int(num)\n    if num == 0:\n        return \"0\"\n    return str(num)\n\n\ndef dec2bin2dec2(num):\n    num = int(num)\n    if num == 0:\n        return \"0\"\n    return str(num)\n\n\ndef dec2bin2dec2(num):\n    num = int(num)\n    if num == 0:\n        return \"0\"\n    return str(num)\n\n\ndef dec2bin2dec2(num):\n    num = int(num)\n    if num == 0:\n        return \"0\"\n    return str(num)\n\n\ndef dec2bin2dec2(num):\n    num = int(num)\n    if num == 0:\n        return \"0\"\n    return str(num)\n\n\ndef dec2bin2dec2(num):\n    num = int(num)\n    if num == 0:\n        return \"0\"\n    return str(num)\n\n\ndef dec2bin2dec2(num):\n    num = int(num)\n    if num == 0:\n        return \"0\"\n    return str(num)\n\n\ndef dec2bin2dec2(num):\n    num = int(num)\n    if num == 0:\n        return \"0\"\n    return str(num)\n\n\ndef dec2bin"
    },
    {
      "rank": 65,
      "score": 1.0,
      "candidate": "def binary_to_decimal(binary):\n    decimal = 0\n    for i in range(len(binary)):\n        decimal += int(binary[i]) * 2**i\n    return decimal\n\ndef test_case_1():\n    assert binary_to_decimal(\"100\") == 100\n\ndef test_case_2():\n    assert binary_to_decimal(\"101\") == 101\n\ndef test_case_3():\n    assert binary_to_decimal(\"10101\") == 10101\n\ndef test_case_4():\n    assert binary_to_decimal(\"11001\") == 11001\n\ndef test_case_5():\n    assert binary_to_decimal(\"1111\") == 11001\n\ndef test_case_6():\n    assert binary_to_decimal(\"101011\") == 101011\n\ndef test_case_7():\n    assert binary_to_decimal(\"1100101\") == 1100101\n\ndef test_case_8():\n    assert binary_to_decimal(\"11111111\") == 110011111\n\ndef test_case_9():\n    assert binary_to_decimal(\"11010110\") == 11010110\n\ndef test_case_10():\n    assert binary_to_decimal(\"11010111\") == 11010111\n\ndef test_case_11():\n    assert binary_to_decimal(\"1100011\") == 1100011\n\ndef test_case_12():\n    assert binary_to_decimal(\"11110111\") == 11000111\n\ndef test_case_13():\n    assert binary_to_decimal(\"11111011\") == 1100011011\n\ndef test_case_14():\n    assert binary_to_decimal(\"1111111111\") == 110001111111\n\ndef test_case_15():\n    assert binary_to_decimal(\"11111111011\") == 1100011111011\n\ndef test_case_16():\n    assert binary_to_decimal(\"111111111111\") == 11000111111111\n\ndef test_case_17():\n    assert binary_to_decimal(\"11111111111111\") == 1100011111111111\n\ndef test_case_18():\n    assert binary_to_decimal(\"11111111111111\") == 110001"
    },
    {
      "rank": 66,
      "score": 1.0,
      "candidate": "def binary_to_decimal(binary):\n    if not binary:\n        return 0\n    decimal = 0\n    for i in range(len(binary)):\n        decimal = decimal * 2 + int(binary[i])\n    return decimal\n\n\ndef binary_to_decimal2(binary):\n    if not binary:\n        return 0\n    decimal = 0\n    for i in range(len(binary)):\n        decimal = decimal * 2 + int(binary[i])\n    return decimal\n\n\ndef main():\n    print(binary_to_decimal2(\"0011\"))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 67,
      "score": 1.0,
      "candidate": "def binary_to_decimal(bin_str):\n    # Your code here\n    decimal = 0\n    for i in bin_str:\n        decimal = decimal * 2 + int(i)\n    return decimal\n\n\n\nprint(binary_to_decimal('100'))\nprint(binary_to_decimal('101'))\nprint(binary_to_decimal('1011'))\nprint(binary_to_decimal('111111'))\nprint(binary_to_decimal('010101'))\nprint(binary_to_decimal('11111111'))\nprint(binary_to_decimal('1100101'))\nprint(binary_to_decimal('11010111'))\nprint(binary_to_decimal('1111111111'))\nprint(binary_to_decimal('111111111101'))"
    },
    {
      "rank": 68,
      "score": 1.0,
      "candidate": "def convert_to_decimal(binary_number: str) -> int:\n    if len(binary_number) == 0:\n        return 0\n    decimal_number = 0\n    for i in range(len(binary_number)):\n        decimal_number = decimal_number * 2 + int(binary_number[i])\n    return decimal_number\n\n\nif __name__ == \"__main__\":\n    assert convert_to_decimal(\"100\") == 100\n    assert convert_to_decimal(\"1001\") == 10011\n    assert convert_to_decimal(\"101\") == 101\n    assert convert_to_decimal(\"1101\") == 1111\n    assert convert_to_decimal(\"1111\") == 11111\n    assert convert_to_decimal(\"0101\") == 1\n    assert convert_to_decimal(\"111111\") == 11111\n    assert convert_to_decimal(\"110111\") == 11111\n    assert convert_to_decimal(\"1111101\") == 11111"
    },
    {
      "rank": 69,
      "score": 1.0,
      "candidate": "def convert_binary_to_decimal(n: int) -> int:\n    if n == 0:\n        return 0\n    binary_str = str(bin(n))[2:]\n    return int(binary_str, 2)\n\n\nif __name__ == \"__main__\":\n    assert convert_binary_to_decimal(0) == 0\n    assert convert_binary_to_decimal(1) == 1\n    assert convert_binary_to_decimal(2) == 2\n    assert convert_binary_to_decimal(3) == 3\n    assert convert_binary_to_decimal(4) == 4\n    assert convert_binary_to_decimal(5) == 5\n    assert convert_binary_to_decimal(6) == 6\n    assert convert_binary_to_decimal(7) == 7\n    assert convert_binary_to_decimal(8) == 8\n    assert convert_binary_to_decimal(9) == 9"
    },
    {
      "rank": 70,
      "score": 1.0,
      "candidate": "def decimal_to_binary(num):\n    if num == 0:\n        return 0\n    elif num == 1:\n        return 1\n    else:\n        return decimal_to_binary(num // 2) + decimal_to_binary(num % 2)\n\n\nprint(decimal_to_binary(0))\nprint(decimal_to_binary(1))\nprint(decimal_to_binary(2))\nprint(decimal_to_binary(3))\nprint(decimal_to_binary(4))\nprint(decimal_to_binary(5))\nprint(decimal_to_binary(6))\nprint(decimal_to_binary(7))\nprint(decimal_to_binary(8))\nprint(decimal_to_binary(9))\nprint(decimal_to_binary(10))\nprint(decimal_to_binary(11))\nprint(decimal_to_binary(12))\nprint(decimal_to_binary(13))\nprint(decimal_to_binary(14))\nprint(decimal_to_binary(15))\nprint(decimal_to_binary(16))\nprint(decimal_to_binary(17))\nprint(decimal_to_binary(18))\nprint(decimal_to_binary(19))\nprint(decimal_to_binary(20))\nprint(decimal_to_binary(21))\nprint(decimal_to_binary(22))\nprint(decimal_to_binary(23))\nprint(decimal_to_binary(24))\nprint(decimal_to_binary(25))\nprint(decimal_to_binary(26))\nprint(decimal_to_binary(27))\nprint(decimal_to_binary(28))\nprint(decimal_to_binary(29))\nprint(decimal_to_binary(30))\nprint(decimal_to_binary(31))\nprint(decimal_to_binary(32))\nprint(decimal_to_binary(33))\nprint(decimal_to_binary(34))\nprint(decimal_to_binary(35))\nprint(decimal_to_binary(36))\nprint(decimal_to_binary(37))\nprint(decimal_to_binary(38))\nprint(decimal_to_binary(39))\nprint(decimal_to_binary"
    },
    {
      "rank": 71,
      "score": 1.0,
      "candidate": "class Solution(object):\n    def convert(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        if n == 0:\n            return 0\n        ans = 0\n        while n > 0:\n            ans = ans * 2 + n % 10\n            n //= 2\n        return ans\n\n\nif __name__ == \"__main__\":\n    assert Solution().convert(4) == 1\n    assert Solution().convert(5) == 2\n    assert Solution().convert(7) == 3\n    assert Solution().convert(8) == 4\n    assert Solution().convert(9) == 5\n    assert Solution().convert(10) == 6"
    },
    {
      "rank": 72,
      "score": 1.0,
      "candidate": "def convert_binary(number: int) -> int:\n    if number < 0:\n        return -1\n    if number == 0:\n        return 0\n    if number == 1:\n        return 1\n    ans = 0\n    while number > 0:\n        ans = ans * 2 + number % 10\n        number = number // 10\n    return ans\n\n\nprint(convert_binary(3))\nprint(convert_binary(-3))\nprint(convert_binary(0))\nprint(convert_binary(10))\nprint(convert_binary(10 ** 10))\nprint(convert_binary(10 ** 100))\nprint(convert_binary(10 ** 1000))\nprint(convert_binary(10 ** 10000))"
    },
    {
      "rank": 73,
      "score": 1.0,
      "candidate": "class Solution:\n    # @param {integer} num\n    # @return {integer}\n    def binaryToDecimal(self, num):\n        return bin(num)[2:]\n\na = Solution()\nprint(a.binaryToDecimal(5))\nprint(a.binaryToDecimal(3))\nprint(a.binaryToDecimal(0))\nprint(a.binaryToDecimal(2))\nprint(a.binaryToDecimal(1))\nprint(a.binaryToDecimal(7))\nprint(a.binaryToDecimal(6))\nprint(a.binaryToDecimal(4))\nprint(a.binaryToDecimal(0))\nprint(a.binaryToDecimal(2))\nprint(a.binaryToDecimal(1))\nprint(a.binaryToDecimal(3))\nprint(a.binaryToDecimal(7))\nprint(a.binaryToDecimal(6))\nprint(a.binaryToDecimal(4))\nprint(a.binaryToDecimal(0))\nprint(a.binaryToDecimal(2))\nprint(a.binaryToDecimal(1))\nprint(a.binaryToDecimal(3))\nprint(a.binaryToDecimal(7))\nprint(a.binaryToDecimal(6))\nprint(a.binaryToDecimal(4))\nprint(a.binaryToDecimal(0))\nprint(a.binaryToDecimal(2))\nprint(a.binaryToDecimal(1))\nprint(a.binaryToDecimal(3))\nprint(a.binaryToDecimal(7))\nprint(a.binaryToDecimal(6))\nprint(a.binaryToDecimal(4))\nprint(a.binaryToDecimal(0))\nprint(a.binaryToDecimal(2))\nprint(a.binaryToDecimal(1))\nprint(a.binaryToDecimal(3))\nprint(a.binaryToDecimal(7))\nprint(a.binaryToDecimal(6))\nprint(a.binaryToDecimal(4))\nprint(a.binaryToDecimal(0))\nprint(a.binaryToDecimal(2))\nprint(a.binaryToDecimal(1))\nprint(a.binaryToDecimal(3))\nprint(a.binaryToDecimal(7))\nprint(a.binaryToDecimal(6))"
    },
    {
      "rank": 74,
      "score": 1.0,
      "candidate": "def binary_to_decimal(n):\n    result = 0\n    while n:\n        result = result * 2 + n % 2\n        n //= 2\n    return result\n\n\nif __name__ == \"__main__\":\n    assert binary_to_decimal(1) == 1\n    assert binary_to_decimal(2) == 2\n    assert binary_to_decimal(3) == 3\n    assert binary_to_decimal(4) == 4\n    assert binary_to_decimal(5) == 5\n    assert binary_to_decimal(6) == 6\n    assert binary_to_decimal(7) == 7\n    assert binary_to_decimal(8) == 8\n    assert binary_to_decimal(9) == 9"
    },
    {
      "rank": 75,
      "score": 1.0,
      "candidate": "class Solution(object):\n    def convert(self, num, binary):\n        \"\"\"\n        :type num: int\n        :type binary: str\n        :rtype: int\n        \"\"\"\n        # Write your code here\n        if num == 0:\n            return 0\n\n        num_dec = 0\n        while num!= 0:\n            num_dec += (num & 1) * 2**(binary.find(str(num)))\n            num = num >> 1\n\n        return num_dec\n\n\nif __name__ == \"__main__\":\n    sol = Solution()\n\n    print sol.convert(6, '11')"
    },
    {
      "rank": 76,
      "score": 1.0,
      "candidate": "class Solution(object):\n    def convert(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        if n == 0:\n            return 0\n        ans = 0\n        while n > 0:\n            ans = ans * 2 + n % 2\n            n = n // 2\n        return ans\n\nif __name__ == \"__main__\":\n    s = Solution()\n    assert s.convert(1) == 1\n    assert s.convert(2) == 2\n    assert s.convert(3) == 6\n    assert s.convert(4) == 9\n    assert s.convert(5) == 12\n    assert s.convert(6) == 25\n    assert s.convert(7) == 36\n    assert s.convert(8) == 49\n    assert s.convert(9) == 64\n    assert s.convert(10) == 81\n    assert s.convert(11) == 100\n    assert s.convert(12) == 101\n    assert s.convert(13) == 103\n    assert s.convert(14) == 104\n    assert s.convert(15) == 110\n    assert s.convert(16) == 111\n    assert s.convert(17) == 112\n    assert s.convert(18) == 113\n    assert s.convert(19) == 114\n    assert s.convert(20) == 115\n    assert s.convert(21) == 116\n    assert s.convert(22) == 117\n    assert s.convert(23) == 118\n    assert s.convert(24) == 119\n    assert s.convert(25) == 120\n    assert s.convert(26) == 121\n    assert s.convert(27) == 122\n    assert s.convert(28) == 123\n    assert s.convert(29) == 126"
    },
    {
      "rank": 77,
      "score": 1.0,
      "candidate": "class Solution:\n    def convertBinary(self, num: int) -> int:\n        binary = bin(num)[2:]\n        decimal = 0\n        for i in range(len(binary)):\n            decimal += int(binary[i]) * (2**i)\n        return decimal"
    },
    {
      "rank": 78,
      "score": 1.0,
      "candidate": "def binary_to_decimal(num: str):\n    if len(num) == 1:\n        return int(num, 2)\n    else:\n        return int(num, 2) + binary_to_decimal(num[1:])\n\n\nif __name__ == \"__main__\":\n    print(binary_to_decimal(\"01\"))\n    print(binary_to_decimal(\"10\"))\n    print(binary_to_decimal(\"11\"))\n    print(binary_to_decimal(\"100\"))\n    print(binary_to_decimal(\"1000\"))\n    print(binary_to_decimal(\"1\"))\n    print(binary_to_decimal(\"0\"))"
    },
    {
      "rank": 79,
      "score": 1.0,
      "candidate": "def convert_binary_to_decimal(binary_number: str) -> int:\n    decimal_number = 0\n\n    for i in binary_number:\n        decimal_number += int(i) * 2 ** (len(binary_number) - 1 - i)\n\n    return decimal_number\n\n\nassert convert_binary_to_decimal(\"100\") == 100\nassert convert_binary_to_decimal(\"101\") == 101\nassert convert_binary_to_decimal(\"011\") == 111\nassert convert_binary_to_decimal(\"0110\") == 1111\nassert convert_binary_to_decimal(\"0111\") == 11111"
    },
    {
      "rank": 80,
      "score": 1.0,
      "candidate": "class Solution(object):\n    def binToInt(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        if len(s) == 0:\n            return 0\n        if len(s) == 1:\n            return int(s)\n        if s[0] == '1':\n            return self.binToInt(s[1:])\n        if s[0] == '0':\n            return -self.binToInt(s[1:])\n        if s[0] == '1':\n            return self.binToInt(s[1:]) * 2\n        if s[0] == '0':\n            return -self.binToInt(s[1:]) * 2\n\nif __name__ == '__main__':\n    sol = Solution()\n    print sol.binToInt('100')\n    print sol.binToInt('101')\n    print sol.binToInt('1011')\n    print sol.binToInt('1011011')\n    print sol.binToInt('0101110111')\n    print sol.binToInt('0101110111011')\n    print sol.binToInt('010111011101110111')\n    print sol.binToInt('01011101110111011111')\n    print sol.binToInt('11111101110111011111')\n    print sol.binToInt('1111110111011101111111011101110111111101')\n    print sol.binToInt('11111101110111011111110111011111110111111101')\n    print sol.binToInt('11111101110111011111110111111101111111111101')\n    print sol.binToInt('11111101110111011111110111111101111111111101')\n    print sol.binToInt('1111110111011101111111011111111111011111111111')\n    print sol.binToInt('1111110111011111110111111111111111111101111111')\n    print sol.binToInt('11111101110111111101111111111111111111111101')\n    print sol.binToInt('111111011101111111011111"
    },
    {
      "rank": 81,
      "score": 1.0,
      "candidate": "class BinaryToDecimal:\n    def __init__(self, binary_num):\n        self.binary_num = binary_num\n\n    def decimal_to_binary(self, decimal_num):\n        binary_num = \"\"\n        for i in range(len(decimal_num)):\n            binary_num += str(decimal_num % 2)\n            decimal_num //= 2\n        return binary_num\n\n\nif __name__ == \"__main__\":\n    binary_num = \"11\"\n    decimal_num = BinaryToDecimal(binary_num)\n    print(binary_num, decimal_num)"
    },
    {
      "rank": 82,
      "score": 1.0,
      "candidate": "def binary_to_decimal(binary):\n    if not binary:\n        return 0\n    else:\n        return binary_to_decimal(binary[1:]) + int(binary)\n\n\ndef main():\n    assert binary_to_decimal(\"11\") == 12\n    assert binary_to_decimal(\"100\") == 100\n    assert binary_to_decimal(\"10\") == 10\n    assert binary_to_decimal(\"1100\") == 11\n    assert binary_to_decimal(\"1111\") == 111\n    assert binary_to_decimal(\"0101\") == 0\n    assert binary_to_decimal(\"0000\") == 0\n    assert binary_to_decimal(\"000001\") == 0\n    assert binary_to_decimal(\"11111111\") == 1111111\n    assert binary_to_decimal(\"1111111111\") == 111111111\n    assert binary_to_decimal(\"111111111111\") == 11111111111\n    assert binary_to_decimal(\"11111111111111\") == 1111111111111\n    assert binary_to_decimal(\"11111111111111\") == 1111111111111\n    assert binary_to_decimal(\"11111111111111\") == 1111111111111\n    assert binary_to_decimal(\"11111111111111\") == 1111111111111\n    assert binary_to_decimal(\"11111111111111\") == 1111111111111\n    assert binary_to_decimal(\"11111111111111\") == 1111111111111\n    assert binary_to_decimal(\"11111111111111\") == 1111111111111\n    assert binary_to_decimal(\"11111111111111\") == 1111111111111\n    assert binary_to_decimal(\"11111111111111\") == 1111111111111\n    assert binary_to_decimal(\"11111111111111\") == 1111111111111\n    assert binary_to_decimal(\"11111111111111\") == 1111111111111\n    assert binary_to_decimal(\"11111111111111\") == 1111111111111\n    assert binary_to_decimal(\"11111111111111\") == 1111111111111\n    assert binary_to_decimal(\"11111111111111\") == 1111111111111\n    assert binary_to_decimal(\"11111111111111\") == 1111111111111\n    assert binary_to_decimal(\"11111111111111\") == 1111111111111"
    },
    {
      "rank": 83,
      "score": 1.0,
      "candidate": "def decimal_to_binary(n):\n    if n == 0:\n        return \"0\"\n    elif n == 1:\n        return \"1\"\n    else:\n        return decimal_to_binary(n - 1) + \"0\"\n\n\nif __name__ == \"__main__\":\n    assert decimal_to_binary(2) == \"0\"\n    assert decimal_to_binary(3) == \"1\"\n    assert decimal_to_binary(4) == \"1\"\n    assert decimal_to_binary(5) == \"1\"\n    assert decimal_to_binary(6) == \"0\"\n    assert decimal_to_binary(7) == \"0\"\n    assert decimal_to_binary(8) == \"1\"\n    assert decimal_to_binary(9) == \"0\"\n    assert decimal_to_binary(10) == \"0\""
    },
    {
      "rank": 84,
      "score": 1.0,
      "candidate": "def convert_bin(n: int) -> int:\n    if n < 0:\n        return -1\n    elif n == 0:\n        return 0\n    else:\n        return convert_bin(n // 2) + convert_bin(n % 2)\n\n\nif __name__ == \"__main__\":\n    assert convert_bin(0) == 0\n    assert convert_bin(1) == 1\n    assert convert_bin(2) == 2\n    assert convert_bin(3) == 3\n    assert convert_bin(4) == 4\n    assert convert_bin(5) == 5\n    assert convert_bin(6) == 6\n    assert convert_bin(7) == 7\n    assert convert_bin(8) == 8\n    assert convert_bin(9) == 9\n    assert convert_bin(10) == 10"
    },
    {
      "rank": 85,
      "score": 1.0,
      "candidate": "def binary_to_decimal(n):\n    result = 0\n    for i in range(len(n)):\n        if n[i] == '1':\n            result += 2**(len(n) - i - 1)\n    return result\n\n\nif __name__ == '__main__':\n    assert binary_to_decimal('100') == 1\n    assert binary_to_decimal('10') == 1\n    assert binary_to_decimal('11') == 2\n    assert binary_to_decimal('101') == 3\n    assert binary_to_decimal('1011') == 4\n    assert binary_to_decimal('11100') == 5\n    assert binary_to_decimal('111111') == 6\n    assert binary_to_decimal('0101') == 7\n    assert binary_to_decimal('1101') == 8\n    assert binary_to_decimal('010111') == 9\n    assert binary_to_decimal('1101110101') == 10"
    },
    {
      "rank": 86,
      "score": 1.0,
      "candidate": "def binary_to_decimal(num: int) -> int:\n    decimal = 0\n    while num:\n        decimal += num % 2\n        num = num // 2\n    return decimal\n\n\nif __name__ == \"__main__\":\n    assert binary_to_decimal(0) == 0\n    assert binary_to_decimal(1) == 1\n    assert binary_to_decimal(2) == 2\n    assert binary_to_decimal(3) == 3\n    assert binary_to_decimal(4) == 4\n    assert binary_to_decimal(5) == 5\n    assert binary_to_decimal(6) == 6\n    assert binary_to_decimal(7) == 7\n    assert binary_to_decimal(8) == 8\n    assert binary_to_decimal(9) == 9\n    assert binary_to_decimal(10) == 9"
    },
    {
      "rank": 87,
      "score": 1.0,
      "candidate": "def decimal_to_binary(n):\n    return \"{:b}\".format(n)\n\n\ndef binary_to_decimal(n):\n    return int(decimal_to_binary(n), 2)\n\n\nif __name__ == \"__main__\":\n    assert binary_to_decimal(0) == 0\n    assert binary_to_decimal(1) == 1\n    assert binary_to_decimal(2) == 2\n    assert binary_to_decimal(3) == 3\n    assert binary_to_decimal(4) == 5\n    assert binary_to_decimal(5) == 10\n    assert binary_to_decimal(6) == 11\n    assert binary_to_decimal(7) == 12\n    assert binary_to_decimal(8) == 13\n    assert binary_to_decimal(9) == 14\n    assert binary_to_decimal(10) == 15\n    assert binary_to_decimal(11) == 16\n    assert binary_to_decimal(12) == 17\n    assert binary_to_decimal(13) == 18\n    assert binary_to_decimal(14) == 19\n    assert binary_to_decimal(15) == 20\n    assert binary_to_decimal(16) == 21\n    assert binary_to_decimal(17) == 22\n    assert binary_to_decimal(18) == 23\n    assert binary_to_decimal(19) == 24\n    assert binary_to_decimal(20) == 25\n    assert binary_to_decimal(21) == 26\n    assert binary_to_decimal(22) == 27\n    assert binary_to_decimal(23) == 28\n    assert binary_to_decimal(24) == 29\n    assert binary_to_decimal(25) == 30\n    assert binary_to_decimal(26) == 31\n    assert binary_to_decimal(27) == 32\n    assert binary_to_decimal(28) == 33\n    assert binary_to_decimal(29) == 34\n    assert binary_to_decimal(30) == 35\n    assert binary_to_decimal(31) == 36\n    assert binary_to_decimal(32) == 37\n    assert binary_to_decimal(33) == 38\n    assert binary_to"
    },
    {
      "rank": 88,
      "score": 1.0,
      "candidate": "def convert(n: int):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return convert(n // 2) + convert(n % 2)\n\n\nassert convert(1) == 0\nassert convert(2) == 1\nassert convert(3) == 2\nassert convert(4) == 3\nassert convert(5) == 4\nassert convert(6) == 5\nassert convert(7) == 6\nassert convert(8) == 7\nassert convert(9) == 8\nassert convert(10) == 9\nassert convert(11) == 10\nassert convert(12) == 11\nassert convert(13) == 12\nassert convert(14) == 13\nassert convert(15) == 14\nassert convert(16) == 15\nassert convert(17) == 16\nassert convert(18) == 17\nassert convert(19) == 18\nassert convert(20) == 19\nassert convert(21) == 20\nassert convert(22) == 21\nassert convert(23) == 22\nassert convert(24) == 23\nassert convert(25) == 24\nassert convert(26) == 25\nassert convert(27) == 26\nassert convert(28) == 27\nassert convert(29) == 28\nassert convert(30) == 29\nassert convert(31) == 30\nassert convert(32) == 31\nassert convert(33) == 32\nassert convert(34) == 33\nassert convert(35) == 34\nassert convert(36) == 35\nassert convert(37) == 36\nassert convert(38) == 37\nassert convert(39) == 38\nassert convert(40) == 39\nassert convert(41) == 40\nassert convert(42) == 42\nassert convert(43) == 43\nassert convert(44) == 44\nassert convert(45) == 45\nassert convert(46) == 46\nassert convert(47) == 47\nassert convert(48) == 48\nassert convert(49) == 49\nassert convert(50) == 50\nassert convert(51) == 51\nassert convert(52) == 52\nassert convert(53) == 53\nassert convert(54) == 54\nassert convert(55) == 55\nassert convert(56) == 56\nassert convert(57) == 57"
    },
    {
      "rank": 89,
      "score": 1.0,
      "candidate": "def convert_binary(n):\n    s = ''\n    while n:\n        s += str(n % 2)\n        n = n // 2\n    return int(s, 2)\n\ndef test_convert_binary():\n    assert convert_binary(0) == 0\n    assert convert_binary(1) == 1\n    assert convert_binary(2) == 2\n    assert convert_binary(3) == 3\n    assert convert_binary(4) == 4\n    assert convert_binary(5) == 5\n    assert convert_binary(6) == 6\n    assert convert_binary(7) == 7\n    assert convert_binary(8) == 8\n    assert convert_binary(9) == 9\n    assert convert_binary(10) == 10\n    assert convert_binary(11) == 11\n    assert convert_binary(12) == 12\n    assert convert_binary(13) == 13\n    assert convert_binary(14) == 14\n    assert convert_binary(15) == 15\n    assert convert_binary(16) == 16\n    assert convert_binary(17) == 17\n    assert convert_binary(18) == 18\n    assert convert_binary(19) == 19\n    assert convert_binary(20) == 20\n    assert convert_binary(21) == 21\n    assert convert_binary(22) == 22\n    assert convert_binary(23) == 23\n    assert convert_binary(24) == 24\n    assert convert_binary(25) == 25\n    assert convert_binary(26) == 26\n    assert convert_binary(27) == 27\n    assert convert_binary(28) == 28\n    assert convert_binary(29) == 29\n    assert convert_binary(30) == 30\n    assert convert_binary(31) == 31\n    assert convert_binary(32) == 32\n    assert convert_binary(33) == 33\n    assert convert_binary(34) == 34\n    assert convert_binary(35) == 35\n    assert convert_binary(36) == 36\n    assert convert_binary(37) == 37\n    assert convert_binary(38) == 38\n    assert convert_binary(39) == 39\n    assert convert_binary(40) == 40\n    assert convert_binary"
    },
    {
      "rank": 90,
      "score": 1.0,
      "candidate": "def decimal_to_binary(num):\n    # Write your code here\n    num = int(num)\n    if num == 0:\n        return 0\n    if num == 1:\n        return 1\n    result = []\n    while num > 0:\n        result.append(num % 2)\n        num = num // 2\n    result.reverse()\n    return result\n\nprint(decimal_to_binary(1))\nprint(decimal_to_binary(0))\nprint(decimal_to_binary(9))\nprint(decimal_to_binary(16))\nprint(decimal_to_binary(32))\nprint(decimal_to_binary(64))\nprint(decimal_to_binary(128))\nprint(decimal_to_binary(256))\nprint(decimal_to_binary(512))\nprint(decimal_to_binary(1024))\nprint(decimal_to_binary(2048))\nprint(decimal_to_binary(4096))\nprint(decimal_to_binary(8192))\nprint(decimal_to_binary(16384))\nprint(decimal_to_binary(32768))\nprint(decimal_to_binary(524288))\nprint(decimal_to_binary(8192))\nprint(decimal_to_binary(4096))\nprint(decimal_to_binary(8192))\nprint(decimal_to_binary(16384))\nprint(decimal_to_binary(32768))\nprint(decimal_to_binary(524288))\nprint(decimal_to_binary(8192))\nprint(decimal_to_binary(4096))\nprint(decimal_to_binary(16384))\nprint(decimal_to_binary(32768))\nprint(decimal_to_binary(524288))\nprint(decimal_to_binary(8192))\nprint(decimal_to_binary(4096))\nprint(decimal_to_binary(8192))\nprint(decimal_to_binary(16384))\nprint(decimal_to_binary(32768))\nprint(decimal_to_binary(524288))\nprint(decimal_to_binary(8192))\nprint(decimal_to_binary"
    },
    {
      "rank": 91,
      "score": 1.0,
      "candidate": "def decimal_to_binary(num):\n    # write your code here\n    return bin(int(num,2))[2:]\n\nif __name__ == \"__main__\":\n    print(decimal_to_binary(\"0101\"))\n    print(decimal_to_binary(\"1001\"))\n    print(decimal_to_binary(\"1011\"))\n    print(decimal_to_binary(\"101\"))\n    print(decimal_to_binary(\"10101\"))\n    print(decimal_to_binary(\"1010101\"))\n    print(decimal_to_binary(\"00000000\"))\n    print(decimal_to_binary(\"11\"))\n    print(decimal_to_binary(\"1101\"))\n    print(decimal_to_binary(\"1111\"))\n    print(decimal_to_binary(\"111101\"))\n    print(decimal_to_binary(\"11111111\"))\n    print(decimal_to_binary(\"111111111111\"))"
    },
    {
      "rank": 92,
      "score": 1.0,
      "candidate": "def binary_to_decimal(b):\n    decimal = 0\n    for i in range(len(b)):\n        decimal += int(b[i]) * (2 ** i)\n    return decimal\n\n\nassert binary_to_decimal(\"101\") == 2\nassert binary_to_decimal(\"100\") == 2\nassert binary_to_decimal(\"1010\") == 4\nassert binary_to_decimal(\"10101\") == 5\nassert binary_to_decimal(\"10100\") == 6"
    },
    {
      "rank": 93,
      "score": 1.0,
      "candidate": "def binary_to_decimal(binary_num):\n    decimal_num = 0\n    for i in range(len(binary_num)):\n        decimal_num += int(binary_num[i]) * 2 ** i\n    return decimal_num\n\n\nif __name__ == \"__main__\":\n    assert binary_to_decimal(\"1\") == 0\n    assert binary_to_decimal(\"101\") == 1\n    assert binary_to_decimal(\"1001\") == 2\n    assert binary_to_decimal(\"100100\") == 4\n    assert binary_to_decimal(\"111111\") == 8\n    assert binary_to_decimal(\"111101\") == 16\n    assert binary_to_decimal(\"11111101\") == 32"
    },
    {
      "rank": 94,
      "score": 1.0,
      "candidate": "def binary_to_decimal(num):\n    # Your code here\n    if num == 0:\n        return 0\n    elif num == 1:\n        return 1\n    elif num == 2:\n        return 2\n    elif num == 3:\n        return 4\n    else:\n        return binary_to_decimal(num // 2) + binary_to_decimal(num % 2)"
    },
    {
      "rank": 95,
      "score": 1.0,
      "candidate": "def convert_to_decimal(num):\n    result = 0\n    for i in range(len(num)):\n        result = result * 2 + int(num[i])\n    return result\n\n\ndef test_function():\n    assert convert_to_decimal(\"101\") == 101\n    assert convert_to_decimal(\"1010\") == 1010\n    assert convert_to_decimal(\"11\") == 11\n    assert convert_to_decimal(\"1100\") == 1100\n    assert convert_to_decimal(\"1101\") == 1101\n    assert convert_to_decimal(\"1111\") == 1111\n    assert convert_to_decimal(\"111110\") == 11110\n    assert convert_to_decimal(\"111111\") == 11111\n    assert convert_to_decimal(\"1111111\") == 111111\n    assert convert_to_decimal(\"110001\") == 110001\n    assert convert_to_decimal(\"1111011\") == 110001\n    assert convert_to_decimal(\"1101011\") == 1101011\n    assert convert_to_decimal(\"11010101\") == 11010101\n    assert convert_to_decimal(\"1111011111\") == 111011111\n    assert convert_to_decimal(\"1111111111\") == 111111111\n    assert convert_to_decimal(\"111111111111\") == 11111111111"
    },
    {
      "rank": 96,
      "score": 1.0,
      "candidate": "def binary_to_decimal(binary_number):\n    binary_number = int(binary_number)\n    decimal_number = 0\n    while binary_number > 0:\n        decimal_number = decimal_number * 2 + binary_number % 2\n        binary_number = int(binary_number / 2)\n    return decimal_number\n\n\nprint(binary_to_decimal(\"101\"))\nprint(binary_to_decimal(\"11\"))\nprint(binary_to_decimal(\"11\"))\nprint(binary_to_decimal(\"11\"))\nprint(binary_to_decimal(\"11\"))\nprint(binary_to_decimal(\"11\"))\nprint(binary_to_decimal(\"11\"))\nprint(binary_to_decimal(\"11\"))"
    },
    {
      "rank": 97,
      "score": 1.0,
      "candidate": "def convert_binary_to_decimal(binary):\n    # Write your code here\n    decimal = 0\n    for i in range(len(binary)):\n        decimal += int(binary[i]) * 2 ** i\n    return decimal\n\n\nif __name__ == \"__main__\":\n    binary = \"101\"\n    print(convert_binary_to_decimal(binary))"
    },
    {
      "rank": 98,
      "score": 1.0,
      "candidate": "def decimal_to_binary(num):\n    decimal_value = 0\n    if num == 0:\n        return decimal_value\n    while num!= 0:\n        decimal_value = decimal_value * 2 + num % 2\n        num = num // 2\n    return decimal_value\n\n\nprint(decimal_to_binary(7))\nprint(decimal_to_binary(8))\nprint(decimal_to_binary(5))\nprint(decimal_to_binary(3))\nprint(decimal_to_binary(0))\nprint(decimal_to_binary(-1))\nprint(decimal_to_binary(1))\nprint(decimal_to_binary(-2))\nprint(decimal_to_binary(2))"
    },
    {
      "rank": 99,
      "score": 1.0,
      "candidate": "def bin_to_dec(bin_str):\n    bin_num = int(bin_str, 2)\n    dec_num = bin_num\n    return dec_num\n\n\nprint(bin_to_dec(\"100\"))\nprint(bin_to_dec(\"101\"))\nprint(bin_to_dec(\"11\"))\nprint(bin_to_dec(\"111\"))\nprint(bin_to_dec(\"111\"))\nprint(bin_to_dec(\"111\"))\nprint(bin_to_dec(\"111\"))\nprint(bin_to_dec(\"11111\"))\nprint(bin_to_dec(\"11111\"))\nprint(bin_to_dec(\"1111\"))\nprint(bin_to_dec(\"1111\"))\nprint(bin_to_dec(\"1111\"))\nprint(bin_to_dec(\"1111\"))\nprint(bin_to_dec(\"1111\"))\nprint(bin_to_dec(\"1111\"))\nprint(bin_to_dec(\"1111\"))\nprint(bin_to_dec(\"1111\"))\nprint(bin_to_dec(\"1111\"))\nprint(bin_to_dec(\"1111\"))\nprint(bin_to_dec(\"1111\"))\nprint(bin_to_dec(\"1111\"))\nprint(bin_to_dec(\"1111\"))\nprint(bin_to_dec(\"1111\"))\nprint(bin_to_dec(\"1111\"))\nprint(bin_to_dec(\"1111\"))"
    },
    {
      "rank": 100,
      "score": 1.0,
      "candidate": "def bin_to_dec(n):\n    if n == 0:\n        return 0\n    return bin_to_dec(n >> 1) + n & 1\n\n\ndef dec_to_bin(n):\n    if n == 0:\n        return 0\n    return bin(n)\n\n\nif __name__ == '__main__':\n    assert bin_to_dec(0) == 0\n    assert bin_to_dec(1) == 0\n    assert bin_to_dec(2) == 0\n    assert bin_to_dec(3) == 1\n    assert bin_to_dec(4) == 1\n    assert bin_to_dec(5) == 1\n    assert bin_to_dec(6) == 2\n    assert bin_to_dec(7) == 3\n    assert bin_to_dec(8) == 4\n    assert bin_to_dec(9) == 5\n    assert bin_to_dec(10) == 6\n    assert bin_to_dec(11) == 7\n    assert bin_to_dec(12) == 8\n    assert bin_to_dec(13) == 9\n    assert bin_to_dec(14) == 10\n    assert bin_to_dec(15) == 11\n    assert bin_to_dec(16) == 12\n    assert bin_to_dec(17) == 13\n    assert bin_to_dec(18) == 14\n    assert bin_to_dec(19) == 15\n    assert bin_to_dec(20) == 16\n    assert bin_to_dec(21) == 17\n    assert bin_to_dec(22) == 18\n    assert bin_to_dec(23) == 19\n    assert bin_to_dec(24) == 20\n    assert bin_to_dec(25) == 21\n    assert bin_to_dec(26) == 22\n    assert bin_to_dec(27) == 23\n    assert bin_to_dec(28) == 24\n    assert bin_to_dec(29) == 25\n    assert bin_to_dec(30) == 26\n    assert bin_to_dec(31) == 27\n    assert bin_to_dec(32) == 28"
    }
  ]
}