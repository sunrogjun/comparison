{
  "timestamp": "2025-09-14T14:16:50.999372",
  "method": "improved_llm_judge",
  "judge_model": "codellama/CodeLlama-7b-Python-hf",
  "target_model": "codet5-770m",
  "dataset": "mbpp",
  "problem_number": 247,
  "total_candidates": 100,
  "results": [
    {
      "rank": 1,
      "score": 10.0,
      "candidate": "def odd_list(lst):\n    return sum(filter(lambda x: x % 2 == 1, lst))\n\n\nprint(odd_list([1, 2, 3, 4, 5]))"
    },
    {
      "rank": 2,
      "score": 10.0,
      "candidate": "list1 = [1, 2, 3, 4, 5, 6, 7, 8, 9]\nprint(list1)\nprint(list(map(lambda x: x % 2, list1)))\n\n\n\"\"\"\nInput:\n[1, 2, 3, 4, 5, 6, 7, 8, 9]\nOutput:\n[2, 3]\n\"\"\""
    },
    {
      "rank": 3,
      "score": 10.0,
      "candidate": "def odd_elements(list):\n    return list(filter(lambda x: x % 2 == 0, list))\n\n\nprint(odd_elements([1, 2, 3, 4, 5]))"
    },
    {
      "rank": 4,
      "score": 10.0,
      "candidate": "def odd_elements(list):\n    return list(map(lambda x: x % 2, list))"
    },
    {
      "rank": 5,
      "score": 10.0,
      "candidate": "def odd(arr):\n    return sum(map(lambda x: x%2, arr))\n\n\ndef odd_2(arr):\n    return sum(map(lambda x: x%2, arr))\n\n\nif __name__ == \"__main__\":\n    print(odd([1, 2, 3, 4, 5, 6, 7, 8, 9]))\n    print(odd_2([1, 2, 3, 4, 5, 6, 7, 8, 9]))"
    },
    {
      "rank": 6,
      "score": 10.0,
      "candidate": "import unittest\n\ndef odd_elements(nums):\n    return len(list(filter(lambda x: x % 2!= 0, nums)))\n\nclass Test(unittest.TestCase):\n\n    def test_odd_elements(self):\n        self.assertEqual(odd_elements([1, 2, 3, 4, 5, 6, 7, 8, 9]), 3)\n        self.assertEqual(odd_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]), 0)\n\nif __name__ == \"__main__\":\n    unittest.main()"
    },
    {
      "rank": 7,
      "score": 10.0,
      "candidate": "def odd_elements(lst):\n    return len(list(filter(lambda x: x % 2 == 0, lst)))\n\n\nif __name__ == '__main__':\n    print(odd_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]))"
    },
    {
      "rank": 8,
      "score": 10.0,
      "candidate": "def odd(l):\n    return sum(map(lambda x: x % 2, l))\n\n\nprint(odd([1, 2, 3, 4, 5]))\nprint(odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\nprint(odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29]))"
    },
    {
      "rank": 9,
      "score": 10.0,
      "candidate": "def odd_elements(nums):\n    return len([x for x in nums if x % 2 == 1])\n\n\nprint(odd_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))"
    },
    {
      "rank": 10,
      "score": 10.0,
      "candidate": "def odd(lst):\n    return [x for x in lst if x % 2!= 0]\n\n\nprint(odd([1, 2, 3, 4]))"
    },
    {
      "rank": 11,
      "score": 10.0,
      "candidate": "def odd_elements(lst):\n    return len(list(filter(lambda x: x % 2 == 1, lst)))"
    },
    {
      "rank": 12,
      "score": 10.0,
      "candidate": "list_odd = [1, 2, 3, 4, 5, 6]\nprint(list_odd)\n\n# Odd elements are even\nodd_list_odd = list(filter(lambda x: x % 2 == 1, list_odd))\nprint(odd_list_odd)\n\n# Odd elements are odd\nodd_list_odd = list(filter(lambda x: x % 2 == 0, list_odd))\nprint(odd_list_odd)"
    },
    {
      "rank": 13,
      "score": 10.0,
      "candidate": "def odd_numbers(numbers):\n    return len(list(filter(lambda x: x % 2 == 1, numbers)))\n\n\ndef main():\n    print(odd_numbers([1, 2, 3, 4, 5, 6, 7]))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 14,
      "score": 10.0,
      "candidate": "def odd(a):\n    return len(list(filter(lambda x: x % 2 == 1, a)))"
    },
    {
      "rank": 15,
      "score": 10.0,
      "candidate": "def odd_element(list):\n    return len(list) % 2 == 1\n\n\nprint(odd_element([1, 2, 3, 4, 5, 6, 7, 8, 9]))"
    },
    {
      "rank": 16,
      "score": 10.0,
      "candidate": "def odd_count(arr):\n    return len([x for x in arr if x%2==0])"
    },
    {
      "rank": 17,
      "score": 10.0,
      "candidate": "def odd_elements(list_of_numbers):\n    return list(filter(lambda x: x%2==1,list_of_numbers))\n\n\nprint(odd_elements([1,2,3,4,5,6]))\nprint(odd_elements([1,2,3,4,5,6,7,8,9,10]))\nprint(odd_elements([1,2,3,4,5,6,7,8,9,10,11]))"
    },
    {
      "rank": 18,
      "score": 10.0,
      "candidate": "def odd_numbers(l):\n    return sum(map(lambda x: x % 2, l))\n\n\nif __name__ == \"__main__\":\n    print(odd_numbers([1, 2, 3, 4, 5, 6]))"
    },
    {
      "rank": 19,
      "score": 10.0,
      "candidate": "def odd_element(list):\n    odd = list(filter(lambda x: x % 2 == 1, list))\n    return len(odd)\n\n\nif __name__ == \"__main__\":\n    print(odd_element([1, 2, 3, 4, 5, 6, 7]))\n    print(odd_element([4, 5, 6, 7, 8, 9, 10, 11]))\n    print(odd_element([-3, -4, -5, -6, -7, -8, -9]))\n    print(odd_element([1, 2, 3, 4, 5, 6, 7]))\n    print(odd_element([-3, -4, -5, -6, -7, -8, -9, 10, 11]))\n    print(odd_element([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100]))"
    },
    {
      "rank": 20,
      "score": 10.0,
      "candidate": "list = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n\nprint(f\"The odd elements in the given list are {list[1:] if list[1] % 2 == 0 else list[2:]}\")"
    },
    {
      "rank": 21,
      "score": 10.0,
      "candidate": "def odd_elements(arr):\n    return len(list(filter(lambda x: x % 2 == 1, arr)))\n\n\nif __name__ == \"__main__\":\n    print(odd_elements([2, 4, 6, 8, 10]))"
    },
    {
      "rank": 22,
      "score": 10.0,
      "candidate": "def odd_elements(lst):\n    return len(list(filter(lambda x: x % 2 == 0, lst)))\n\n\nif __name__ == '__main__':\n    print(odd_elements([1, 2, 3, 4, 5]))"
    },
    {
      "rank": 23,
      "score": 10.0,
      "candidate": "def odd_elements(list):\n    return list(filter(lambda x: x%2!=0, list))\n\nprint(odd_elements([1,2,3,4,5]))"
    },
    {
      "rank": 24,
      "score": 10.0,
      "candidate": "def odd_count(list):\n    return len(list) - list.count(lambda x: x % 2)\n\n\nprint(odd_count([1, 2, 3, 4, 5]))"
    },
    {
      "rank": 25,
      "score": 10.0,
      "candidate": "from functools import reduce\n\ndef odd_num(arr):\n    return reduce(lambda x, y: x if x % 2 == 1 else y, arr)\n\nprint(odd_num([1, 2, 3, 4, 5]))\nprint(odd_num([1, 2, 3, 4, 5, 6, 7, 8, 9]))\nprint(odd_num([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\nprint(odd_num([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]))"
    },
    {
      "rank": 26,
      "score": 10.0,
      "candidate": "odd_list = [1, 2, 3, 4, 5]\n\nodd_list = list(map(lambda x: x%2, odd_list))\nprint(odd_list)"
    },
    {
      "rank": 27,
      "score": 10.0,
      "candidate": "def odd_list(list):\n    odd_list = list(filter(lambda x: x % 2 == 0, list))\n    return len(odd_list)\n\n\nif __name__ == '__main__':\n    list = [2, 5, -2, 3, 1, 4, 5, -2, 4]\n    print(odd_list(list))"
    },
    {
      "rank": 28,
      "score": 10.0,
      "candidate": "def odd_number(list):\n    return len(list) % 2!= 0\n\n\nprint(odd_number([1, 2, 3, 4, 5]))"
    },
    {
      "rank": 29,
      "score": 10.0,
      "candidate": "odd_numbers = [1, 2, 3, 4, 5]\n\nodd_numbers_count = [(x, odd_numbers.count(x)) for x in odd_numbers if odd_numbers.count(x) % 2 == 1]\n\nprint(odd_numbers_count)"
    },
    {
      "rank": 30,
      "score": 10.0,
      "candidate": "from collections import Counter\n\ndef odd(arr):\n    return Counter(arr).get(True, 0)\n\n\nif __name__ == '__main__':\n    test_cases = [\n        [1, 2, 3, 4, 5, 6, 7],\n        [2, 3, 4, 5, 6, 7, 8],\n        [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 151, 152, 153, 154, 155, 156, 157, 158, 159, 161, 162, 163, 164, 165, 166, 167, 168, 169, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 19"
    },
    {
      "rank": 31,
      "score": 10.0,
      "candidate": "def odd_elements(arr):\n    odd_elements = []\n    for i in arr:\n        if i % 2!= 0:\n            odd_elements.append(i)\n    return odd_elements\n\n\nprint(odd_elements([1, 2, 3, 4, 5]))"
    },
    {
      "rank": 32,
      "score": 10.0,
      "candidate": "def odd_element(list):\n    return list.count(lambda x: x%2==1)\n\n\nprint(odd_element([1, 2, 3, 4, 5]))"
    },
    {
      "rank": 33,
      "score": 10.0,
      "candidate": "def odd_numbers(arr):\n    return sum(x for x in arr if x % 2 == 1)\n\n\nprint(odd_numbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))"
    },
    {
      "rank": 34,
      "score": 10.0,
      "candidate": "def odd_element(list):\n    return len(list)%2\n\nprint(odd_element([1,2,3,4,5,6,7,8,9,10]))"
    },
    {
      "rank": 35,
      "score": 10.0,
      "candidate": "list = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n\nodd = list(map(lambda x: x % 2 == 1, list))\n\nprint(odd)"
    },
    {
      "rank": 36,
      "score": 10.0,
      "candidate": "def odd(n):\n    return n % 2 == 0\n\nprint(odd([1,2,3,4,5,6,7,8,9,10]))"
    },
    {
      "rank": 37,
      "score": 10.0,
      "candidate": "def odd_elements(lst):\n    odd = map(lambda x: x % 2, lst)\n    return sum(odd)\n\n\nif __name__ == \"__main__\":\n    print(odd_elements([1, 2, 3, 4, 5, 6, 7, 8, 9]))"
    },
    {
      "rank": 38,
      "score": 10.0,
      "candidate": "def odd_num(nums):\n    return len([x for x in nums if x % 2 == 1])\n\nprint(odd_num([1, 2, 3, 4, 5, 6, 7, 8, 9]))"
    },
    {
      "rank": 39,
      "score": 10.0,
      "candidate": "def odd(l):\n    odd_list = list(filter(lambda x: x % 2 == 0, l))\n    return len(odd_list)\n\n\nprint(odd([1, 2, 3, 4, 5]))\nprint(odd([1, 2, 3, 4, 5, 6]))\nprint(odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))"
    },
    {
      "rank": 40,
      "score": 9.0,
      "candidate": "def odd(l):\n    return list(filter(lambda x: x % 2 == 0, l))\n\n\ndef test_odd():\n    assert odd([1, 2, 3, 4, 5, 6]) == [1, 3, 4, 5, 6]"
    },
    {
      "rank": 41,
      "score": 9.0,
      "candidate": "def odd_elements(lst):\n    return len(list(filter(lambda x: x%2==0, lst)))"
    },
    {
      "rank": 42,
      "score": 8.0,
      "candidate": "def odd_element(list):\n    return list.count(lambda x: x % 2)\n\n\nif __name__ == \"__main__\":\n    list = [1, 2, 3, 4, 5, 6]\n    print(odd_element(list))"
    },
    {
      "rank": 43,
      "score": 8.0,
      "candidate": "def odd_elements(elements):\n    return len(list(filter(lambda x: x % 2 == 1, elements)))\n\n\nif __name__ == \"__main__\":\n    assert odd_elements([1, 2, 3, 4, 5]) == 2"
    },
    {
      "rank": 44,
      "score": 8.0,
      "candidate": "def odd_element(nums):\n    return sum(filter(lambda x: x % 2 == 0, nums))"
    },
    {
      "rank": 45,
      "score": 8.0,
      "candidate": "def odd_num(lst):\n    return len(filter(lambda x: x%2==1, lst))\n\nprint(odd_num([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]))"
    },
    {
      "rank": 46,
      "score": 8.0,
      "candidate": "def odd_elements(l):\n    return sum(filter(lambda x: x % 2 == 0, l))\n\n\nif __name__ == \"__main__\":\n    l = [1, 2, 3, 4, 5, 6]\n    print(f\"odd elements in {l} are: {odd_elements(l)}\")"
    },
    {
      "rank": 47,
      "score": 8.0,
      "candidate": "list = [1,2,3,4,5,6,7,8,9,10]\n\nodd_elements = list(filter(lambda x: x%2!= 0, list))\n\nprint(odd_elements)"
    },
    {
      "rank": 48,
      "score": 8.0,
      "candidate": "list1 = [1, 2, 3, 4, 5]\n\nprint(f'The odd elements in the list are: {list(map(lambda x: x % 2, list1))}')"
    },
    {
      "rank": 49,
      "score": 8.0,
      "candidate": "def odd_elements(a):\n    return len([x for x in a if x % 2 == 0])\n\nprint(odd_elements([1, 2, 3, 4, 5, 6]))\nprint(odd_elements([5, 4, 3, 2, 1]))"
    },
    {
      "rank": 50,
      "score": 8.0,
      "candidate": "from typing import List\n\n\ndef odd_num(nums: List[int]) -> int:\n    return len(list(filter(lambda x: x % 2 == 0, nums)))\n\n\nif __name__ == \"__main__\":\n    print(odd_num([1, 2, 3, 4, 5]))"
    },
    {
      "rank": 51,
      "score": 8.0,
      "candidate": "def odd_elements(arr):\n    return len(list(filter(lambda x: x % 2 == 1, arr)))"
    },
    {
      "rank": 52,
      "score": 8.0,
      "candidate": "def odd_count(arr):\n    return list(filter(lambda x: x % 2!= 0, arr))\n\n\nif __name__ == \"__main__\":\n    print(odd_count([1, 2, 3, 4, 5]))\n    print(odd_count([5, 4, 3, 2, 1]))"
    },
    {
      "rank": 53,
      "score": 8.0,
      "candidate": "def odd_elements(nums):\n    return len(list(filter(lambda num: num % 2 == 1, nums)))\n\n\nassert odd_elements([1, 2, 3, 4, 5]) == 1\nassert odd_elements([1, 2, 3, 4, 5, 6]) == 2\nassert odd_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 6\nassert odd_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]) == 7"
    },
    {
      "rank": 54,
      "score": 8.0,
      "candidate": "def odd_number(list):\n    return list(map(lambda x: x % 2, list))\n\n\nprint(odd_number([1, 2, 3, 4, 5, 6, 7, 8, 9]))"
    },
    {
      "rank": 55,
      "score": 8.0,
      "candidate": "from functools import reduce\n\n\ndef odd_elements(arr):\n    return reduce(lambda x, y: x + y, filter(lambda x: x % 2 == 1, arr))\n\n\nprint(odd_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))"
    },
    {
      "rank": 56,
      "score": 8.0,
      "candidate": "def odd_elements(lst):\n    return len([x for x in lst if x % 2 == 1])\n\n\nprint(odd_elements([1, 2, 3, 4, 5]))"
    },
    {
      "rank": 57,
      "score": 8.0,
      "candidate": "def odd_elements(list_of_elements):\n    odd_elements = list(filter(lambda x: x%2 == 1, list_of_elements))\n    return len(odd_elements)\n\nprint(odd_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))"
    },
    {
      "rank": 58,
      "score": 8.0,
      "candidate": "def odd(list):\n    return list.count(lambda x: x%2==1)\n\nlist = [1,2,3,4,5,6,7,8,9]\nprint(odd(list))"
    },
    {
      "rank": 59,
      "score": 8.0,
      "candidate": "def odd_elements(nums):\n    return sum(map(lambda x: x % 2, nums))\n\n\nprint(odd_elements([1, 2, 3, 4, 5, 6]))\nprint(odd_elements([1, 2, 3, 4, 5, 6, 7, 8, 9]))"
    },
    {
      "rank": 60,
      "score": 8.0,
      "candidate": "list = [1, 2, 3, 4, 5, 6]\n\nprint(\"Number of odd elements in list is : \", list.count(lambda x: x % 2 == 1))"
    },
    {
      "rank": 61,
      "score": 8.0,
      "candidate": "def odd_list(list):\n    return len(list) % 2\n\n\nif __name__ == '__main__':\n    list = [1, 2, 3, 4, 5]\n    print(odd_list(list))"
    },
    {
      "rank": 62,
      "score": 8.0,
      "candidate": "def odd_elements(list):\n    return len(list) - list.count(lambda x: x % 2)"
    },
    {
      "rank": 63,
      "score": 8.0,
      "candidate": "def odd_elements(nums):\n    return len(list(filter(lambda x: x % 2!= 0, nums)))"
    },
    {
      "rank": 64,
      "score": 8.0,
      "candidate": "list = [1, 2, 3, 4, 5, 6, 7]\nodd = list(map(lambda x: x % 2, list))\nprint(odd)"
    },
    {
      "rank": 65,
      "score": 8.0,
      "candidate": "# Time: O(n)\n# Space:O(1)\n\nodd_elements = list(map(lambda x: x%2, [1, 2, 3, 4, 5]))\nprint(odd_elements)\n\n# Time: O(n)\n# Space:O(1)\n\nodd_elements = list(map(lambda x: x%2, [1, 2, 3, 4, 5]))\nprint(odd_elements)"
    },
    {
      "rank": 66,
      "score": 8.0,
      "candidate": "def odd(lst):\n    return len(list(filter(lambda x: x % 2 == 1, lst)))"
    },
    {
      "rank": 67,
      "score": 8.0,
      "candidate": "def odd_elements(arr):\n    return list(filter(lambda x: x % 2 == 1, arr))\n\n\nprint(odd_elements([1, 2, 3, 4, 5, 6]))"
    },
    {
      "rank": 68,
      "score": 8.0,
      "candidate": "list_nums = [1, 2, 3, 4, 5]\nodd_num = lambda x: x % 2\nprint(odd_num(list_nums))"
    },
    {
      "rank": 69,
      "score": 8.0,
      "candidate": "def odd_elements(arr):\n    return [i for i in arr if i % 2!= 0]\n\n\nprint(odd_elements([1, 2, 3, 4, 5]))\nprint(odd_elements([1, 2, 3, 4, 5, 6, 7, 8, 9]))\nprint(odd_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]))\nprint(odd_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100]))"
    },
    {
      "rank": 70,
      "score": 8.0,
      "candidate": "list_of_odd = [1, 2, 3, 4, 5]\nodd_element = lambda x: x % 2 == 1\nprint(odd_element(list_of_odd))"
    },
    {
      "rank": 71,
      "score": 8.0,
      "candidate": "def odd_number(list_of_elements):\n    return list(filter(lambda x: x % 2 == 1, list_of_elements))\n\nprint(odd_number([1,2,3,4,5,6,7,8,9]))"
    },
    {
      "rank": 72,
      "score": 8.0,
      "candidate": "def odd(lst):\n    return len([x for x in lst if x % 2!= 0])\n\nprint(odd([1,2,3,4,5]))"
    },
    {
      "rank": 73,
      "score": 8.0,
      "candidate": "import math\n\n\ndef odd_elements(lst):\n    return math.floor(len(lst) / 2)\n\n\nprint(odd_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))"
    },
    {
      "rank": 74,
      "score": 8.0,
      "candidate": "def odd_numbers(numbers):\n    return sum(map(lambda x: x % 2!= 0, numbers))"
    },
    {
      "rank": 75,
      "score": 8.0,
      "candidate": "list_1 = [1, 2, 3, 4, 5, 6, 7, 8]\n\nprint(sum(filter(lambda x: x % 2 == 1, list_1)))\n\n# O(n) time | O(1) space"
    },
    {
      "rank": 76,
      "score": 8.0,
      "candidate": "list = [1, 2, 3, 4, 5, 6, 7, 8, 9]\nodd_element = list(filter(lambda x: x%2 == 1, list))\nprint(odd_element)"
    },
    {
      "rank": 77,
      "score": 8.0,
      "candidate": "def odd_elements(list):\n    return len([element for element in list if element % 2 == 1])\n\n\nprint(odd_elements([1, 2, 3, 4, 5, 6]))\nprint(odd_elements([1, 2, 3, 4, 5, 6, 7, 8, 9]))"
    },
    {
      "rank": 78,
      "score": 8.0,
      "candidate": "# \u0418\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u044f \u043f\u043e \u043f\u043e\u0440\u044f\u0434\u043a\u0435\n\n\n# \u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u044f \u043f\u043e \u0441\u043b\u043e\u0432\u0430\u0440\u0435 \u0432 \u0434\u0430\u043d\u043d\u044b\u0445 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u0441\u043f\u0438\u0441\u043e\u043a \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u044f \u043f\u043e \u0441\u043b\u043e\u0432\u0430\u0440\u0435\ndef odd(list):\n    return list.count(lambda x: x % 2)\n\n\n# \u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u044f \u043f\u043e \u0441\u043b\u043e\u0432\u0430\u0440\u0435 \u0432 \u0434\u0430\u043d\u043d\u044b\u0445 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u0441\u043f\u0438\u0441\u043e\u043a \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u044f \u043f\u043e \u0441\u043b\u043e\u0432\u0430\u0440\u0435\ndef even(list):\n    return list.count(lambda x: x % 2 == 0)\n\n\n# \u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u044f \u043f\u043e \u0441\u043b\u043e\u0432\u0430\u0440\u0435 \u0432 \u0434\u0430\u043d\u043d\u044b\u0445 \u043f\ufffd"
    },
    {
      "rank": 79,
      "score": 8.0,
      "candidate": "# solution\ndef odd_num(num):\n    return len([num for num in num if num % 2 == 1])\n\n# input\nnum = [1, 2, 3, 4, 5, 6, 7]\n\nprint(odd_num(num))\n\n# output\n\"\"\"\n3\n\"\"\""
    },
    {
      "rank": 80,
      "score": 8.0,
      "candidate": "def odd_elements(lst):\n    return len(list(filter(lambda x: x % 2 == 0, lst)))\n\n\nif __name__ == \"__main__\":\n    print(odd_elements([1, 2, 3, 4, 5]))"
    },
    {
      "rank": 81,
      "score": 8.0,
      "candidate": "def odd_elements(arr):\n    return len(list(filter(lambda x: x % 2 == 1, arr)))\n\n\narr = [1, 2, 3, 4, 5]\nprint(odd_elements(arr))"
    },
    {
      "rank": 82,
      "score": 8.0,
      "candidate": "from typing import List\n\n\ndef odd_elements(list: List[int]) -> int:\n    return sum(filter(lambda x: x % 2 == 1, list))\n\n\nif __name__ == '__main__':\n    assert odd_elements([1, 2, 3, 4, 5]) == 4"
    },
    {
      "rank": 83,
      "score": 8.0,
      "candidate": "def odd_elements(list):\n    return [i for i in list if i % 2!= 0]\n\nprint(odd_elements([1, 2, 3, 4, 5, 6, 7]))"
    },
    {
      "rank": 84,
      "score": 8.0,
      "candidate": "def odd_elements(list):\n    return list(filter(lambda x: x%2!=0, list))\n\nprint(odd_elements([1, 2, 3, 4, 5]))\nprint(odd_elements([1, 2, 3, 4, 5, 6, 7, 8]))\nprint(odd_elements([1, 2, 3, 4, 5, 6, 7, 8, 9]))"
    },
    {
      "rank": 85,
      "score": 8.0,
      "candidate": "def odd_elements(list):\n    return list.count(lambda x: x % 2 == 1)\n\nlist = [1,2,3,4,5,6]\n\nprint(odd_elements(list))"
    },
    {
      "rank": 86,
      "score": 8.0,
      "candidate": "def odd_elements(list_input):\n    return list(filter(lambda x: x % 2 == 1, list_input))\n\n\nif __name__ == '__main__':\n    assert odd_elements([1, 2, 3, 4, 5]) == [1, 2]\n    assert odd_elements([1, 2, 3, 4, 5, 6]) == [1, 2, 3, 4, 5, 6]\n    assert odd_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]"
    },
    {
      "rank": 87,
      "score": 8.0,
      "candidate": "list = [1, 2, 3, 4, 5]\n\nodd_elements = list(filter(lambda x: x % 2 == 0, list))\n\nprint(odd_elements)"
    },
    {
      "rank": 88,
      "score": 8.0,
      "candidate": "def odd_element(list_of_elements):\n    return len([element for element in list_of_elements if element % 2 == 1])\n\nlist_of_elements = [1, 2, 3, 4, 5]\nprint(odd_element(list_of_elements))"
    },
    {
      "rank": 89,
      "score": 8.0,
      "candidate": "def odd_numbers(list):\n    return len(list) % 2!= 0\n\nprint(odd_numbers([1, 2, 3, 4, 5, 6, 7, 8, 9]))\nprint(odd_numbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\nprint(odd_numbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))"
    },
    {
      "rank": 90,
      "score": 8.0,
      "candidate": "list = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n\nodd_elements = list(filter(lambda x: x % 2 == 1, list))\nprint(odd_elements)\n\n\"\"\"\nOutput:\n[2, 4, 6, 8]\n\"\"\""
    },
    {
      "rank": 91,
      "score": 8.0,
      "candidate": "nums = [1, 2, 3, 4, 5, 6]\n\n# Odd elements\nprint(f'Number of odd elements in the given list: {sum([1 if x % 2 == 1 else 0 for x in nums])}')\n\n# Even elements\nprint(f'Number of even elements in the given list: {sum([1 if x % 2 == 0 else 0 for x in nums])}')"
    },
    {
      "rank": 92,
      "score": 8.0,
      "candidate": "def odd_elements(l):\n    return len(list(filter(lambda x: x % 2!= 0, l)))"
    },
    {
      "rank": 93,
      "score": 8.0,
      "candidate": "# Solution:\ndef odd_element(nums):\n    return len([x for x in nums if x%2==1])\n\n# Testing:\nassert odd_element([2,4,6,8,10]) == 3\nassert odd_element([2,4,6,8]) == 2\nassert odd_element([4,6,8]) == 1\nassert odd_element([4,6,8,10]) == 0"
    },
    {
      "rank": 94,
      "score": 8.0,
      "candidate": "def odd_elements(list_of_odd_elements):\n    return len(list(filter(lambda x: x % 2 == 1, list_of_odd_elements)))\n\n\nif __name__ == \"__main__\":\n    print(odd_elements([1, 2, 3, 4, 5, 6, 7, 8, 9]))"
    },
    {
      "rank": 95,
      "score": 8.0,
      "candidate": "def odd_element_count(list_of_odd_numbers):\n    return sum(filter(lambda x: x % 2 == 1, list_of_odd_numbers))\n\n\nodd_list = [1, 3, 5, 7, 9]\nprint(odd_element_count(odd_list))"
    },
    {
      "rank": 96,
      "score": 1.0,
      "candidate": "from typing import List\n\n\ndef odd(arr: List[int]) -> int:\n    return sum([x for x in arr if x % 2 == 1])\n\n\nassert odd([1, 2, 3, 4]) == 3\nassert odd([1, 2, 3, 4, 5]) == 4\nassert odd([1, 2, 3, 4, 5, 6]) == 3\nassert odd([1, 2, 3, 4, 5, 6, 7]) == 2\nassert odd([1, 2, 3, 4, 5, 6, 7, 8]) == 1\nassert odd([1, 2, 3, 4, 5, 6, 7, 8, 9]) == 0\nassert odd([]) == 0"
    },
    {
      "rank": 97,
      "score": 1.0,
      "candidate": "import math\n\n\ndef odd_num(num):\n    return math.ceil(num / 2)\n\n\nif __name__ == \"__main__\":\n    assert odd_num([1, 2, 3]) == 2\n    assert odd_num([1, 2, 3, 4]) == 2\n    assert odd_num([1, 2, 3, 4, 5, 6]) == 5\n    assert odd_num([1, 2, 3, 4, 5, 6, 7]) == 7"
    },
    {
      "rank": 98,
      "score": 1.0,
      "candidate": "# O(n) time | O(1) space\ndef odd_elements(lst):\n    return len([i for i in lst if i % 2!= 0])\n\n\nprint(odd_elements([1, 2, 3, 4, 5]))"
    },
    {
      "rank": 99,
      "score": 1.0,
      "candidate": "import pytest\n\n\ndef odd_elements(arr):\n    return sum(1 for elem in arr if elem % 2 == 1)\n\n\n@pytest.mark.parametrize(\"input_arr, expected\", [\n    ([1, 2, 3], 1),\n    ([1, 2, 3, 4, 5], 1),\n    ([1, 2, 3, 4, 5, 6], 4),\n    ([1, 2, 3, 4, 5, 6, 7], 1),\n    ([1, 2, 3, 4, 5, 6, 7, 8, 9], 4),\n    ([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100], 6),\n    ([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83"
    },
    {
      "rank": 100,
      "score": 1.0,
      "candidate": "from typing import List\n\n\ndef odd_elements(nums: List[int]) -> int:\n    return sum(map(lambda x: x % 2, nums))\n\n\nif __name__ == \"__main__\":\n    assert odd_elements([1, 2, 3, 4, 5]) == 4"
    }
  ]
}