{
  "timestamp": "2025-09-14T13:40:15.737338",
  "method": "improved_llm_judge",
  "judge_model": "codellama/CodeLlama-7b-Python-hf",
  "target_model": "codet5-770m",
  "dataset": "mbpp",
  "problem_number": 164,
  "total_candidates": 100,
  "results": [
    {
      "rank": 1,
      "score": 10.0,
      "candidate": "def isValid(string):\n    stack = []\n    for i in range(len(string)):\n        if string[i] == '(':\n            stack.append(string[i])\n        elif stack and string[i] == ')':\n            if stack.pop()!= '(':\n                return False\n        else:\n            continue\n    return not stack\n\n\nprint(isValid(\"(()))((()))()(())\"))\nprint(isValid(\"(()))((()))()(())\"))\nprint(isValid(\"))((()))()(())\"))\nprint(isValid(\"))((()))()(())\"))\nprint(isValid(\"))((()))()(())\"))\nprint(isValid(\"))((()))()(())\"))\nprint(isValid(\"))((()))()(())\"))\nprint(isValid(\"))((()))()(())\"))"
    },
    {
      "rank": 2,
      "score": 10.0,
      "candidate": "class Solution:\n    def isValid(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: bool\n        \"\"\"\n        stack = []\n        for i in s:\n            if i == '(':\n                stack.append(i)\n            elif i == ')':\n                if len(stack) == 0:\n                    return False\n                else:\n                    top = stack.pop()\n                    if top == '(':\n                        continue\n                    elif top == ')':\n                        return False\n            else:\n                continue\n        return len(stack) == 0\n\n\ns = Solution()\nprint(s.isValid
    },
    {
      "rank": 3,
      "score": 10.0,
      "candidate": "def isValid(s):\n    if s == \"\":\n        return True\n\n    stack = []\n    for i in range(len(s)):\n        if s[i] == '(':\n            stack.append(s[i])\n        elif s[i] == ')':\n            if len(stack) == 0:\n                return False\n            top = stack.pop()\n            if top!= '(':\n                return False\n    return len(stack) == 0\n\n\nprint(isValid
    },
    {
      "rank": 4,
      "score": 10.0,
      "candidate": "class Solution(object):\n    def isValid(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: bool\n        \"\"\"\n        s = s.replace('(', '').replace(')', '').replace(' ', '')\n        if len(s) % 2 == 0:\n            return False\n        i = 0\n        while i < len(s):\n            if s[i] == '(' and s[i+1] == ')':\n                i += 2\n            else:\n                if s[i] == ')':\n                    i += 1\n                elif s[i] == '(':\n                    i += 1\n                else:\n                    return False\n        return i == len(s)\n\ns = Solution()\nprint(s.isValid('()()()()()'))"
    },
    {
      "rank": 5,
      "score": 10.0,
      "candidate": "def is_valid(string):\n    stack = []\n    for i in string:\n        if i == '(':\n            stack.append(i)\n        elif i == ')':\n            if len(stack) == 0:\n                return False\n            if i == '(':\n                stack.pop()\n            elif i == ')':\n                return False\n    return len(stack) == 0\n\n\nif __name__ == '__main__':\n    print(is_valid(\"(())\"))\n    print(is_valid(\"))()()()\"))\n    print(is_valid(\"())\"))\n    print(is_valid(\"()()()\"))\n    print(is_valid(\"))()()()\"))\n    print(is_valid(\"())()()()()\"))\n    print(is_valid(\"()()()()()()\"))\n    print(is_valid(\"))()()()()()\"))\n    print(is_valid(\"())()()()()()\"))\n    print(is_valid(\"())()()()()()\"))"
    },
    {
      "rank": 6,
      "score": 10.0,
      "candidate": "def isValid(string):\n    stack = []\n    for c in string:\n        if c == '(' or c == ')':\n            if not stack or stack[-1]!= '(':\n                return False\n            else:\n                stack.pop()\n        else:\n            stack.append(c)\n    return not stack\n\nif __name__ == \"__main__\":\n    string = \"()()()\"\n    print(isValid(string))"
    },
    {
      "rank": 7,
      "score": 10.0,
      "candidate": "def is_valid(expression):\n    if len(expression) % 2!= 0:\n        return False\n    stack = []\n    for i in range(len(expression)):\n        if expression[i] == \"(\":\n            stack.append(i)\n        elif expression[i] == \")\":\n            if len(stack) == 0:\n                return False\n            else:\n                top = stack.pop()\n                if top!= i:\n                    return False\n    return len(stack) == 0\n\n\nif __name__ == \"__main__\":\n    assert is_valid(\"(())\") is True\n    assert is_valid(\")()())\") is False\n    assert is_valid(\")()()()()\") is True\n    assert is_valid(\"(()())\") is False\n    assert is_valid(\"()()()()\") is False\n    assert is_valid(\"(()()())()()\") is True\n    assert is_valid(\")()()()()()\") is True\n    assert is_valid(\"()()()()()()\") is False\n    assert is_valid(\"(()())()()()()\") is False\n    assert is_valid(\"()()()()()()\") is True\n    assert is_valid(\"()()()()()()\") is True\n    assert is_valid(\")()()()()()\") is True\n    assert is_valid(\")()()()()()\") is True\n    assert is_valid(\"())()()()()()\") is True\n    assert is_valid(\"())()()()()()\") is False\n    assert is_valid(\"())()()()()()\") is False\n    assert is_valid(\"())()()()()()\") is False\n    assert is_valid(\"())()()()()()\") is False\n    assert is_valid(\"())()()()()()\") is False\n    assert is_valid(\"())()()()()()()\") is False\n    assert is_valid(\"())()()()()()()\") is False\n    assert is_valid(\"())()()()()()()\") is True\n    assert is_valid(\"())()()()()()()\") is False\n    assert is_valid(\"())()()()()()()()\") is True"
    },
    {
      "rank": 8,
      "score": 10.0,
      "candidate": "def check_parentheses(string):\n    brackets_count = 0\n    for char in string:\n        if char == '(':\n            brackets_count += 1\n        elif char == ')':\n            if brackets_count == 0:\n                return False\n            else:\n                brackets_count -= 1\n    return brackets_count == 0\n\n\nif __name__ == '__main__':\n    print(check_parentheses(\"(()())\"))"
    },
    {
      "rank": 9,
      "score": 10.0,
      "candidate": "class Solution:\n    def isValid(self, s):\n        if len(s) == 0:\n            return True\n        if len(s) == 1:\n            return False\n        stack = []\n        for i in s:\n            if i == '(':\n                stack.append(i)\n            elif i == ')':\n                if len(stack) == 0:\n                    return False\n                else:\n                    if stack[-1]!= '(':\n                        return False\n                    else:\n                        stack.pop()\n        return len(stack) == 0"
    },
    {
      "rank": 10,
      "score": 10.0,
      "candidate": "def valid(s):\n    stack = []\n    for i in s:\n        if i == \"(\":\n            stack.append(i)\n        elif i == \")\":\n            if stack:\n                stack.pop()\n            else:\n                return False\n    if stack:\n        return False\n    return True\n\n\nassert valid(\"(()\")\nassert valid(\"()())\")\nassert valid(\"()\")\nassert valid(\"(())(\")\nassert not valid(\"(()))\")\nassert not valid(\"()(())\")\nassert not valid(\")()(\")\nassert not valid(\")()())\")"
    },
    {
      "rank": 11,
      "score": 10.0,
      "candidate": "class Solution:\n    def isValid(self, s: str) -> bool:\n        stack = []\n        for c in s:\n            if c == \"(\":\n                stack.append(c)\n            elif c == \")\":\n                if stack and stack[-1] == \"(\":\n                    stack.pop()\n                else:\n                    return False\n        return not stack"
    },
    {
      "rank": 12,
      "score": 10.0,
      "candidate": "def validate_parentheses(s):\n    stack = []\n    for i in s:\n        if i == '(':\n            stack.append(i)\n        elif i == ')':\n            if len(stack) == 0:\n                return False\n            top = stack.pop()\n            if top == '(':\n                return False\n    return len(stack) == 0\n\n\ndef validate_parentheses_2(s):\n    stack = []\n    for i in s:\n        if i == '(':\n            stack.append(i)\n        elif i == ')':\n            if len(stack) > 0:\n                top = stack.pop()\n                if top == '(':\n                    return False\n        else:\n            if len(stack) > 0:\n                top = stack.pop()\n                if top == '(':\n                    return False\n    return len(stack) == 0\n\n\nprint(validate_parentheses(\"(())()()\"))\nprint(validate_parentheses(\"(())()(())()(())\"))\nprint(validate_parentheses(\"(())()(())()(())\"))\nprint(validate_parentheses(\"(())()()(())()()(())\"))\nprint(validate_parentheses(\"(())()()(())()()(())\"))\nprint(validate_parentheses(\"(())()()(())()()(())\"))\nprint(validate_parentheses(\"(())()()(())()()(())\"))\nprint(validate_parentheses_2(\"(())()()(())()(())\"))\nprint(validate_parentheses_2(\"(())()()(())()(())\"))\nprint(validate_parentheses_2(\"(())()()(())()(())\"))\nprint(validate_parentheses_2(\"(())()()(())()(())\"))\nprint(validate_parentheses_2(\"(())()()(())()(())\"))\nprint(validate_parentheses_2(\"(())()(())()(())\"))\nprint(validate_parentheses_2(\"(())()()(())()(())\"))\nprint(validate_parentheses_2(\"(())"
    },
    {
      "rank": 13,
      "score": 10.0,
      "candidate": "class Solution:\n    def isValid(self, s: str) -> bool:\n        stack = []\n        for i in range(len(s)):\n            if s[i] == '(':\n                stack.append(i)\n            elif s[i] == ')':\n                if len(stack) == 0:\n                    return False\n                top = stack.pop()\n                if top!= i:\n                    return False\n        return len(stack) == 0\n\n\ns = Solution()\nprint(s.isValid(\"()(())\"))\nprint(s.isValid(\"()())\"))\nprint(s.isValid(\"()())\"))\nprint(s.isValid(\"()())\"))\nprint(s.isValid(\"()())\"))\nprint(s.isValid(\"()()()\"))"
    },
    {
      "rank": 14,
      "score": 10.0,
      "candidate": "class Solution:\n    def isValid(self, s: str) -> bool:\n        stack = []\n\n        for c in s:\n            if c == \"(\":\n                stack.append(c)\n            elif c == \")\":\n                if len(stack) == 0:\n                    return False\n                top = stack.pop()\n                if top!= \"(\" and top!= \")\":\n                    return False\n            else:\n                pass\n\n        return len(stack) == 0"
    },
    {
      "rank": 15,
      "score": 10.0,
      "candidate": "class Solution:\n    def isValid(self, s: str) -> bool:\n        stack = []\n\n        for i in range(len(s)):\n            if s[i] == '(':\n                stack.append(i)\n            elif s[i] == ')':\n                if len(stack) == 0:\n                    return False\n                top = stack.pop()\n                if top!= i:\n                    return False\n        return len(stack) == 0"
    },
    {
      "rank": 16,
      "score": 10.0,
      "candidate": "def isValid(string):\n    stack = []\n    for i in string:\n        if i == \"(\":\n            stack.append(i)\n        elif i == \")\":\n            if len(stack) == 0:\n                return False\n            top = stack.pop()\n            if top!= \"(\":\n                return False\n    return len(stack) == 0\n\n\nprint(isValid(\"(())\"))\nprint(isValid(\"()()\"))\nprint(isValid(\"()()\"))\nprint(isValid(\"(()())\"))\nprint(isValid(\"()(())\"))"
    },
    {
      "rank": 17,
      "score": 8.0,
      "candidate": "def is_valid(string):\n    open_brackets = [\"(\", \"[\", \"{\"]\n    close_brackets = [\")\", \"]\", \"}\"]\n    stack = []\n    for char in string:\n        if char in open_brackets:\n            stack.append(char)\n        elif char in close_brackets:\n            if len(stack) == 0:\n                return False\n            if open_brackets.index(stack.pop())!= close_brackets.index(char):\n                return False\n    if len(stack) == 0:\n        return True\n    return False\n\n\nif __name__ == \"__main__\":\n    print(is_valid(\"(()))()()\"))\n    print(is_valid(\"(())()()()\"))\n    print(is_valid(\"((()))()()()\"))\n    print(is_valid(\"))()()()()\"))"
    },
    {
      "rank": 18,
      "score": 8.0,
      "candidate": "def validate(string: str) -> bool:\n    stack = []\n    for c in string:\n        if c == '(':\n            stack.append(c)\n        elif c == ')':\n            if stack:\n                stack.pop()\n            else:\n                return False\n    return stack == []\n\n\nif __name__ == \"__main__\":\n    assert validate(\"(()())\") is True\n    assert validate(\")()\") is False\n    assert validate(\"\") is True\n    assert validate(\"(()())\") is True\n    assert validate(\"(()())\") is False\n    assert validate(\"(()())\") is True\n    assert validate(\"(()())\") is False"
    },
    {
      "rank": 19,
      "score": 8.0,
      "candidate": "def valid_parentheses(string):\n    stack = []\n    for c in string:\n        if c == '(':\n            stack.append(c)\n        elif c == ')':\n            if len(stack) == 0:\n                return False\n            else:\n                top = stack.pop()\n                if top!= '(':\n                    return False\n    return len(stack) == 0\n\n\nprint(valid_parentheses('()(())'))\nprint(valid_parentheses('(())'))\nprint(valid_parentheses('(())'))\nprint(valid_parentheses('()()()()()()()()()()()()()()()'))\nprint(valid_parentheses('()()()()()()()()()()()()()()()()()'))\nprint(valid_parentheses('()()()()()()()()()()()()()()()()()'))"
    },
    {
      "rank": 20,
      "score": 8.0,
      "candidate": "def is_valid_parentheses(string: str) -> bool:\n    \"\"\"\n    :type string: str\n    :rtype: bool\n    \"\"\"\n\n    brackets = {\"(\": \")\", \"[\": \"]\", \"{\": \"}\"}\n\n    stack = []\n    for char in string:\n        if char in brackets:\n            stack.append(char)\n        elif not stack:\n            return False\n        elif brackets[stack.pop()]!= char:\n            return False\n\n    return not stack"
    },
    {
      "rank": 21,
      "score": 8.0,
      "candidate": "def valid_parentheses(s):\n    if len(s) == 0:\n        return True\n    open_parentheses = 0\n    closed_parentheses = 0\n    for c in s:\n        if c == \"(\":\n            open_parentheses += 1\n        elif c == \")\":\n            closed_parentheses += 1\n        elif c == \"(\" and open_parentheses == 0:\n            return False\n        elif c == \")\" and closed_parentheses == 0:\n            return False\n    if closed_parentheses == 0:\n        return True\n    else:\n        return False\n\nprint(valid_parentheses(\"()()\"))\nprint(valid_parentheses(\"))()()\"))\nprint(valid_parentheses(\")()()()\"))\nprint(valid_parentheses(\")()()()()\"))\nprint(valid_parentheses(\")()()()()()\"))\nprint(valid_parentheses(\")()()()()\"))\nprint(valid_parentheses(\")()()()()()\"))\nprint(valid_parentheses(\")()()()()\"))\nprint(valid_parentheses(\")()()()()()\"))\nprint(valid_parentheses(\")()()()()\"))\nprint(valid_parentheses(\")()()()()\"))\nprint(valid_parentheses(\")()()()()\"))\nprint(valid_parentheses(\")()()()()\"))\nprint(valid_parentheses(\")()()()()\"))\nprint(valid_parentheses(\")()()()()\"))\nprint(valid_parentheses(\")()()()()\"))\nprint(valid_parentheses(\")()()()()\"))\nprint(valid_parentheses(\")()()()()\"))\nprint(valid_parentheses(\")()()()()\"))\nprint(valid_parentheses(\")()()()()\"))\nprint(valid_parentheses(\")()()()()\"))\nprint(valid_parentheses(\")()()()()\"))\nprint(valid_parentheses(\")()()()()\"))\nprint(valid_parentheses(\")()()()()\"))\nprint(valid_parentheses(\")"
    },
    {
      "rank": 22,
      "score": 8.0,
      "candidate": "def valid_parentheses(s):\n    stack = []\n    for c in s:\n        if c == '(':\n            stack.append(c)\n        elif c == ')':\n            if not stack:\n                return False\n            top = stack.pop()\n            if top!= '(':\n                return False\n    return not stack\n\nprint(valid_parentheses(\"(()())\"))\nprint(valid_parentheses(\"(()())\"))\nprint(valid_parentheses(\"()()())\"))\nprint(valid_parentheses(\"()()()()()()()()\"))\nprint(valid_parentheses(\"()()()()\"))\nprint(valid_parentheses(\"()()()()\"))\nprint(valid_parentheses(\"()()()()\"))\nprint(valid_parentheses(\"()()()()\"))\nprint(valid_parentheses(\"()()()()\"))"
    },
    {
      "rank": 23,
      "score": 8.0,
      "candidate": "def valid_parentheses(string):\n    stack = []\n    for i in string:\n        if i == \"(\":\n            stack.append(i)\n        elif i == \")\":\n            if len(stack) == 0:\n                return False\n            if stack.pop()!= \"(\":\n                return False\n    return len(stack) == 0\n\n\nprint(valid_parentheses(\"()()()\"))\nprint(valid_parentheses(\"()()()()\"))\nprint(valid_parentheses(\"((())\"))\nprint(valid_parentheses(\")))\"))\nprint(valid_parentheses(\")))\"))\nprint(valid_parentheses(\")))\"))\nprint(valid_parentheses(\"((())\"))\nprint(valid_parentheses(\"))(\"))\nprint(valid_parentheses(\"))(\"))\nprint(valid_parentheses(\"))(\"))\nprint(valid_parentheses(\"))(\"))\nprint(valid_parentheses(\"))(\"))"
    },
    {
      "rank": 24,
      "score": 8.0,
      "candidate": "def is_valid(s: str) -> bool:\n    stack = []\n    for c in s:\n        if c == \"(\":\n            stack.append(c)\n        elif c == \")\":\n            if len(stack) == 0:\n                return False\n            top = stack.pop()\n            if top!= \"(\":\n                return False\n    return len(stack) == 0\n\n\nif __name__ == \"__main__\":\n    assert is_valid(\"()()\") is True\n    assert is_valid(\"())()\") is False\n    assert is_valid(\"(())\") is True\n    assert is_valid(\"((()))()\") is True\n    assert is_valid(\"((()))()\") is False\n    assert is_valid(\")()()\") is False\n    assert is_valid(\")()()\") is True\n    assert is_valid(\")()()\") is False\n    assert is_valid(\")()()\") is False\n    assert is_valid(\")()()\") is False\n    assert is_valid(\")()()\") is False\n    assert is_valid(\")()()\") is True"
    },
    {
      "rank": 25,
      "score": 8.0,
      "candidate": "def validate_parentheses(s):\n    stack = []\n    for c in s:\n        if c == \"(\":\n            stack.append(c)\n        elif c == \")\":\n            if len(stack) == 0:\n                return False\n            if stack[-1]!= \"(\":\n                return False\n            stack.pop()\n    if len(stack)!= 0:\n        return False\n    return True\n\n\nprint(validate_parentheses(\"(()()())\"))\nprint(validate_parentheses(\"))()()())\"))\nprint(validate_parentheses(\"()(())\"))\nprint(validate_parentheses(\"())()()()\"))"
    },
    {
      "rank": 26,
      "score": 8.0,
      "candidate": "class Solution(object):\n    def isValid(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: bool\n        \"\"\"\n        stack = []\n        for c in s:\n            if c == '(':\n                stack.append(c)\n            elif c == ')':\n                if len(stack) == 0:\n                    return False\n                else:\n                    last_c = stack.pop()\n                    if last_c!= '(':\n                        return False\n        return len(stack) == 0\n\nif __name__ == \"__main__\":\n    assert Solution().isValid(\"()\") == True\n    assert Solution().isValid(\"((())\") == False\n    assert Solution().isValid(\"((())\") == True\n    assert Solution().isValid(\")()()\") == False\n    assert Solution().isValid(\")())()()\") == True\n    assert Solution().isValid(\"(())\") == True\n    assert Solution().isValid(\"())()()\") == True\n    assert Solution().isValid(\")()()()\") == False\n    assert Solution().isValid(\")())()()\") == False\n    assert Solution().isValid(\")())()()\") == False"
    },
    {
      "rank": 27,
      "score": 8.0,
      "candidate": "def check_parentheses(string):\n    stack = []\n\n    for char in string:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if not stack:\n                return False\n            top = stack.pop()\n            if char!= top:\n                return False\n    return not stack\n\n\nprint(check_parentheses(\"(()())\"))"
    },
    {
      "rank": 28,
      "score": 8.0,
      "candidate": "def check_parentheses(string: str):\n    \"\"\"\n    :type string: str\n    :rtype: bool\n    \"\"\"\n\n    stack = []\n\n    for char in string:\n        if char == \"(\":\n            stack.append(char)\n        elif char == \")\":\n            if len(stack) == 0:\n                return False\n            else:\n                top = stack.pop()\n                if top!= \"(\":\n                    return False\n\n    return len(stack) == 0\n\n\nif __name__ == \"__main__\":\n    assert check_parentheses(\"(()()())\") is True\n    assert check_parentheses(\"((()()()))\") is False\n    assert check_parentheses(\"))()()())\") is False"
    },
    {
      "rank": 29,
      "score": 8.0,
      "candidate": "def is_valid_parentheses(string):\n    stack = []\n\n    for char in string:\n        if char == \"(\":\n            stack.append(char)\n        elif char == \")\":\n            if not stack:\n                return False\n            top = stack.pop()\n            if top!= \"(\":\n                return False\n\n    return not stack\n\n\nif __name__ == '__main__':\n    assert is_valid_parentheses(\"()\") is True\n    assert is_valid_parentheses(\"()[]{}\") is False\n    assert is_valid_parentheses(\"()\") is True\n    assert is_valid_parentheses(\"\") is True"
    },
    {
      "rank": 30,
      "score": 8.0,
      "candidate": "def valid_parentheses(s):\n    stack = []\n    for c in s:\n        if c == '(':\n            stack.append(c)\n        elif c == ')':\n            if not stack:\n                return False\n            top = stack.pop()\n            if top!= '(':\n                return False\n    return not stack\n\n\nprint(valid_parentheses(\"((())\"))"
    },
    {
      "rank": 31,
      "score": 8.0,
      "candidate": "def valid(s):\n    if s.count('(')!= s.count(')'):\n        return False\n    stack = []\n    for char in s:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if len(stack) == 0:\n                return False\n            elif stack[-1]!= '(':\n                return False\n            else:\n                stack.pop()\n    return len(stack) == 0\n\n\nprint(valid('(())'))\nprint(valid('()()'))\nprint(valid('()'))\nprint(valid('()()'))\nprint(valid('()()()'))"
    },
    {
      "rank": 32,
      "score": 8.0,
      "candidate": "def isValid(s: str) -> bool:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(1)\n    \"\"\"\n    stack = []\n    for i in range(len(s)):\n        if s[i] == \"(\":\n            stack.append(i)\n        elif s[i] == \")\":\n            if len(stack) == 0:\n                return False\n            else:\n                last_paren = stack.pop()\n                if last_paren == i - 1:\n                    return False\n    return len(stack) == 0\n\n\nif __name__ == \"__main__\":\n    assert isValid(\"()\")\n    assert isValid(\"()()\"), True\n    assert isValid(\"()()()(())\"), False\n    assert isValid(\"()(())()()(())()()(())()()(()()())\"), True\n    assert isValid
    },
    {
      "rank": 33,
      "score": 8.0,
      "candidate": "def validate_parentheses(string):\n    if len(string) < 1:\n        return True\n    elif string[0] == '(' and string[-1] == ')':\n        return validate_parentheses(string[1:-1])\n    else:\n        return False\n\n\nprint(validate_parentheses(\"((())\"))\nprint(validate_parentheses(\"())\"))\nprint(validate_parentheses(\"((((())))\"))\nprint(validate_parentheses(\"((()))(()))(\"))"
    },
    {
      "rank": 34,
      "score": 8.0,
      "candidate": "def check_parentheses(s):\n    stack = []\n    for i in s:\n        if i == '(':\n            stack.append(i)\n        elif i == ')':\n            if len(stack) == 0:\n                return False\n            else:\n                top = stack.pop()\n                if top!= '(':\n                    return False\n    return len(stack) == 0\n\n\nprint(check_parentheses(\"(())\"))\nprint(check_parentheses(\"((())\"))\nprint(check_parentheses(\"()(())\"))\nprint(check_parentheses(\"((())\"))"
    },
    {
      "rank": 35,
      "score": 8.0,
      "candidate": "def isValid(s):\n    if not s:\n        return True\n    stack = []\n    for c in s:\n        if c == \"(\":\n            stack.append(c)\n        elif c == \")\":\n            if not stack:\n                return False\n            top = stack.pop()\n            if top!= \"(\":\n                return False\n    return not stack\n\n\nprint(isValid(\"(())\"))\nprint(isValid(\"()()\"))\nprint(isValid(\"(())()()\"))\nprint(isValid(\"(())()()()\"))\nprint(isValid(\"()()()()()()\"))"
    },
    {
      "rank": 36,
      "score": 8.0,
      "candidate": "def validate(string):\n    \"\"\"\n    :type string: str\n    :rtype: bool\n    \"\"\"\n\n    if string[0] == '(' and string[-1] == ')':\n        return False\n    elif string[0] == '(' and string[-2] == ')':\n        return False\n    elif string[0] == ')' and string[-1] == '(':\n        return False\n    return True\n\n\nif __name__ == \"__main__\":\n    assert validate(\"(()())\") is True\n    assert validate(\"(())\") is False\n    assert validate(\"(())\") is True\n    assert validate(\"(())\") is False\n    assert validate(\"()()\") is True\n    assert validate(\"()())\") is False\n    assert validate(\"(())\") is True\n    assert validate(\"(())\") is False"
    },
    {
      "rank": 37,
      "score": 8.0,
      "candidate": "def is_valid(string):\n    stack = []\n    for c in string:\n        if c == '(':\n            stack.append(c)\n        elif c == ')':\n            if len(stack) == 0:\n                return False\n            top = stack.pop()\n            if top == '(':\n                return False\n    return len(stack) == 0\n\n\nassert is_valid('((') == False\nassert is_valid('))') == True\nassert is_valid('))') == False\nassert is_valid('))') == True\nassert is_valid('())') == False\nassert is_valid(')(') == True\nassert is_valid('))') == False\nassert is_valid(')))') == False\nassert is_valid(')))') == True"
    },
    {
      "rank": 38,
      "score": 8.0,
      "candidate": "def is_valid_parentheses(s):\n    stack = []\n    for i in s:\n        if i == '(':\n            stack.append(i)\n        elif i == ')':\n            if len(stack) == 0:\n                return False\n            top = stack.pop()\n            if top!= '(':\n                return False\n    return len(stack) == 0\n\n\nassert is_valid_parentheses(\"()\")\nassert is_valid_parentheses(\"()(())\")\nassert is_valid_parentheses(\"(())\")\nassert is_valid_parentheses(\"((())))\")\nassert is_valid_parentheses(\"(()())(\")\nassert not is_valid_parentheses(\"()())\")\nassert not is_valid_parentheses(\"()())\")\nassert not is_valid_parentheses(\"()()()(\")\nassert not is_valid_parentheses(\"()()()(\")\nassert not is_valid_parentheses(\"()()()(\")\nassert is_valid_parentheses(\"(()()()(\")\nassert is_valid_parentheses(\"()()()()(\")"
    },
    {
      "rank": 39,
      "score": 8.0,
      "candidate": "def check_parentheses(string):\n    stack = []\n    for i in string:\n        if i == '(':\n            stack.append(i)\n        elif i == ')':\n            if len(stack) == 0:\n                return False\n            else:\n                top = stack.pop()\n                if top!= '(':\n                    return False\n    return len(stack) == 0\n\n\nassert check_parentheses(\"()\")\nassert check_parentheses(\"()(()\")\nassert check_parentheses(\"(()()(()\")\nassert check_parentheses(\"(())(()(()\")\nassert check_parentheses(\")()(()(()()\")\nassert check_parentheses(\"(()))()(()\")\nassert check_parentheses(\"(()))()(()(()\")\nassert check_parentheses(\"())()(()()\")\nassert check_parentheses(\"(())(()()\")"
    },
    {
      "rank": 40,
      "score": 8.0,
      "candidate": "def check_parentheses(s):\n    stack = []\n    for i in range(len(s)):\n        if s[i] == '(':\n            stack.append(i)\n        elif s[i] == ')':\n            if len(stack) == 0:\n                return False\n            else:\n                top = stack.pop()\n                if s[top]!= '(':\n                    return False\n    return len(stack) == 0\n\n\nif __name__ == '__main__':\n    assert check_parentheses(\"(((())))\")\n    assert check_parentheses(\"(((())))\") is True\n    assert check_parentheses(\"(((())())))\") is False\n    assert check_parentheses(\"(((()())))\") is False\n    assert check_parentheses(\"(((())())))\") is True\n    assert check_parentheses(\"))()(())\") is True\n    assert check_parentheses(\"))()(())\") is False\n    assert check_parentheses(\"())()(())\") is False\n    assert check_parentheses(\"))()(())\") is True\n    assert check_parentheses(\"))()(())\") is False\n    assert check_parentheses(\"))()(())\") is True"
    },
    {
      "rank": 41,
      "score": 8.0,
      "candidate": "class Solution:\n    def isValid(self, s):\n        stack = []\n        for c in s:\n            if c == \"(\":\n                stack.append(c)\n            elif c == \")\":\n                if len(stack) == 0:\n                    return False\n                elif stack.pop()!= \"(\":\n                    return False\n        return len(stack) == 0"
    },
    {
      "rank": 42,
      "score": 8.0,
      "candidate": "def valid_parentheses(str):\n    if len(str) % 2!= 0:\n        return False\n    else:\n        for i in range(0, len(str), 2):\n            if str[i]!= '(' and str[i + 1]!= ')':\n                return False\n    return True\n\n\ndef main():\n    str = \"(((())))\"\n    print(valid_parentheses(str))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 43,
      "score": 8.0,
      "candidate": "def check_parentheses(string):\n    \"\"\"\n    :type string: str\n    :rtype: bool\n    \"\"\"\n    stack = []\n    for char in string:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if len(stack) == 0:\n                return False\n            if stack[-1]!= '(':\n                return False\n            else:\n                stack.pop()\n    return len(stack) == 0\n\n\ndef check_parentheses_2(string):\n    \"\"\"\n    :type string: str\n    :rtype: bool\n    \"\"\"\n    stack = []\n    for char in string:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if len(stack) == 0:\n                return False\n            if stack[-1]!= '(':\n                return False\n            else:\n                stack.pop()\n    return len(stack) == 0\n\n\nprint(check_parentheses(\"()()()()\"))\nprint(check_parentheses(\"()()(()()()\"))\nprint(check_parentheses(\"(())()()()\"))\nprint(check_parentheses(\"()()()()()()()()\"))\nprint(check_parentheses(\"()()()()()()()()()\"))\nprint(check_parentheses_2(\"()()()()()()()()\"))\nprint(check_parentheses_2(\"()()()()()()()()\"))\nprint(check_parentheses_2(\"()()()()()()()\"))\nprint(check_parentheses_2(\"()()()()()()()\"))\nprint(check_parentheses_2(\"()()()()()()()\"))"
    },
    {
      "rank": 44,
      "score": 8.0,
      "candidate": "def is_valid_parentheses(s):\n    if len(s) == 0:\n        return True\n    if s[0] == '(' and s[-1] == ')':\n        return is_valid_parentheses(s[1:-1])\n    return False\n\nprint(is_valid_parentheses('()()'))\nprint(is_valid_parentheses(')'))\nprint(is_valid_parentheses('())'))\nprint(is_valid_parentheses(')()'))\nprint(is_valid_parentheses('())'))"
    },
    {
      "rank": 45,
      "score": 8.0,
      "candidate": "def isValid(s):\n    stack = []\n    for i in s:\n        if i == \"(\":\n            stack.append(i)\n        elif i == \")\":\n            if len(stack) == 0:\n                return False\n            top = stack.pop()\n            if top!= \"(\":\n                return False\n    if len(stack)!= 0:\n        return False\n    return True\n\nprint(isValid(\"()()\"))\nprint(isValid(\"))(\"))"
    },
    {
      "rank": 46,
      "score": 8.0,
      "candidate": "def is_valid(string):\n    stack = []\n    for i in range(len(string)):\n        if string[i] == \"(\":\n            stack.append(i)\n        elif string[i] == \")\":\n            if len(stack) > 0:\n                top = stack.pop()\n            else:\n                return False\n            if string[top]!= \"(\":\n                return False\n    return len(stack) == 0\n\n\ndef main():\n    print(is_valid(\"(())\"))\n    print(is_valid(\"(()))\"))\n    print(is_valid(\"(()())\"))\n    print(is_valid(\"(()())\"))\n    print(is_valid(\"()(())\"))\n    print(is_valid(\"()()()()(\"))\n\n\nmain()"
    },
    {
      "rank": 47,
      "score": 8.0,
      "candidate": "def validate_parentheses(string):\n    stack = []\n    for char in string:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if stack and stack[-1] == '(':\n                stack.pop()\n            else:\n                return False\n    return not stack\n\nprint(validate_parentheses(\")))\"))\nprint(validate_parentheses(\")))\"))\nprint(validate_parentheses(\"()()()\"))"
    },
    {
      "rank": 48,
      "score": 8.0,
      "candidate": "def check_parentheses(string):\n    stack = []\n\n    for i in string:\n        if i == '(':\n            stack.append(i)\n        elif i == ')':\n            if len(stack) == 0:\n                return False\n            else:\n                top = stack.pop()\n                if top!= '(':\n                    return False\n        else:\n            return False\n\n    return len(stack) == 0\n\n\nif __name__ == \"__main__\":\n    assert check_parentheses(\"()\") is True\n    assert check_parentheses(\"()()\") is False\n    assert check_parentheses(\"()()\") is True\n    assert check_parentheses(\"()()()\") is False\n    assert check_parentheses(\"(())()()\") is False\n    assert check_parentheses(\"((()))\") is True\n    assert check_parentheses(\"((()())\") is False\n    assert check_parentheses(\"((()))()\") is True\n    assert check_parentheses(\"((())()())\") is False"
    },
    {
      "rank": 49,
      "score": 8.0,
      "candidate": "def is_valid_parentheses(string):\n    \"\"\"\n    :type string: str\n    :rtype: bool\n    \"\"\"\n    stack = []\n    for c in string:\n        if c == \"(\":\n            stack.append(c)\n        elif c == \")\":\n            if not stack:\n                return False\n            else:\n                top = stack.pop()\n                if c!= top:\n                    return False\n    return not stack\n\n\nassert is_valid_parentheses(\"()()())\")\nassert is_valid_parentheses(\"())()())\")\nassert is_valid_parentheses(\")()()())\")\nassert is_valid_parentheses(\"(())()())\")\nassert is_valid_parentheses(\"(()())()(\")"
    },
    {
      "rank": 50,
      "score": 8.0,
      "candidate": "def is_valid(s: str) -> bool:\n    stack = []\n    for i in s:\n        if i in [ \")\", \"]\"]:\n            if len(stack) == 0:\n                return False\n            elif stack[-1] == \"(\" and i == \")\":\n                stack.pop()\n            elif stack[-1] == \"[\" and i == \"]\":\n                stack.pop()\n            else:\n                return False\n        else:\n            stack.append(i)\n    return len(stack) == 0\n\n\nassert is_valid(\"(())\") is True\nassert is_valid(\"(()[]{}\") is False\nassert is_valid(\"()[]{}\") is False\nassert is_valid(\")]\") is True\nassert is_valid(\")]\") is False\nassert is_valid(\")]\") is False\nassert is_valid(\")]\") is False\nassert is_valid(\")]\") is False\nassert is_valid(\")]\") is False\nassert is_valid(\")]\") is False\nassert is_valid(\"(())\") is True\nassert is_valid(\")]\") is False\nassert is_valid(\")]\") is False\nassert is_valid(\")]\") is False\nassert is_valid(\")]\") is False\nassert is_valid(\")]\") is False\nassert is_valid(\")]\") is False\nassert is_valid(\")]\") is False\nassert is_valid(\")]\") is False\nassert is_valid(\"(())]\") is False\nassert is_valid(\")]\") is False\nassert is_valid(\")]\") is False"
    },
    {
      "rank": 51,
      "score": 8.0,
      "candidate": "def valid_parentheses(s):\n    s = s.replace('(', '').replace(')', '')\n    if len(s) % 2!= 0:\n        return False\n    return s == ''\n\n\nif __name__ == \"__main__\":\n    print(valid_parentheses('(())'))\n    print(valid_parentheses('))('))\n    print(valid_parentheses('))('))\n    print(valid_parentheses(')'))\n    print(valid_parentheses(')'))"
    },
    {
      "rank": 52,
      "score": 8.0,
      "candidate": "def is_valid(s):\n    stack = []\n    for i in s:\n        if i == '(':\n            stack.append(i)\n        elif i == ')':\n            if len(stack) == 0:\n                return False\n            else:\n                top = stack.pop()\n                if top == '(':\n                    stack.append(i)\n                elif top == ')':\n                    return False\n    if len(stack) == 0:\n        return True\n    else:\n        return False\n\nprint(is_valid(\"(())\"))\nprint(is_valid(\"))()()\"))\nprint(is_valid(\"))()()()\"))\nprint(is_valid(\"))()()()()\"))\nprint(is_valid(\"))()()()()()()\"))"
    },
    {
      "rank": 53,
      "score": 8.0,
      "candidate": "def is_valid(string: str) -> bool:\n    stack = []\n    for char in string:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if not stack or stack[-1]!= '(':\n                return False\n            else:\n                stack.pop()\n        else:\n            if not stack:\n                return False\n    return not stack"
    },
    {
      "rank": 54,
      "score": 8.0,
      "candidate": "def is_valid(string):\n    stack = []\n    for c in string:\n        if c == \"(\":\n            stack.append(c)\n        elif c == \")\":\n            if len(stack) == 0:\n                return False\n            else:\n                top = stack.pop()\n                if top == \"(\":\n                    return False\n    return len(stack) == 0\n\n\nprint(is_valid(\"(()()())\"))\nprint(is_valid(\"(((((()())))\"))\nprint(is_valid(\"()(((((())))))\"))\nprint(is_valid(\"))()(((((())))))\"))\nprint(is_valid(\"))()(((((())))))\"))"
    },
    {
      "rank": 55,
      "score": 8.0,
      "candidate": "def valid_parentheses(s):\n    stack = []\n    for i in s:\n        if i == '(':\n            stack.append(i)\n        elif i == ')':\n            if len(stack) == 0:\n                return False\n            elif stack[-1]!= '(':\n                return False\n            else:\n                stack.pop()\n    return len(stack) == 0\n\n\nif __name__ == \"__main__\":\n    assert valid_parentheses(\"()\") == True\n    assert valid_parentheses(\"(()\") == False\n    assert valid_parentheses(\"(()()))\") == True\n    assert valid_parentheses(\"()()()))\") == False"
    },
    {
      "rank": 56,
      "score": 8.0,
      "candidate": "def check_parentheses(string):\n    stack = []\n    for char in string:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if len(stack) == 0:\n                return False\n            top = stack.pop()\n            if top!= '(':\n                return False\n    return len(stack) == 0"
    },
    {
      "rank": 57,
      "score": 8.0,
      "candidate": "def is_valid_parentheses(string):\n    if len(string) % 2!= 0:\n        return False\n    stack = []\n    for i in range(len(string)):\n        if string[i] == '(':\n            stack.append(i)\n        elif string[i] == ')':\n            if stack:\n                top = stack.pop()\n                if top == i:\n                    return False\n            else:\n                return False\n    return not stack\n\n\ndef is_valid_parentheses_2(string):\n    return string.count('(') == string.count(')')\n\n\ndef is_valid_parentheses_3(string):\n    return string.count('(') == string.count(')') + 1\n\n\ndef is_valid_parentheses_4(string):\n    return string.count('(') == string.count(')') - 1\n\n\nif __name__ == '__main__':\n    print(is_valid_parentheses(\"()()\"))\n    print(is_valid_parentheses(\"())()()\"))\n    print(is_valid_parentheses_2(\"()()()()\"))\n    print(is_valid_parentheses_3(\"()()()()\"))\n    print(is_valid_parentheses_4(\"()()()()\"))"
    },
    {
      "rank": 58,
      "score": 8.0,
      "candidate": "def is_valid_parentheses(str):\n    stack = []\n    for i in range(len(str)):\n        if str[i] == \"(\":\n            stack.append(i)\n        elif str[i] == \")\":\n            if len(stack) == 0:\n                return False\n            elif stack[-1]!= i:\n                return False\n            else:\n                stack.pop()\n    if len(stack) == 0:\n        return True\n    else:\n        return False\n\n\nprint(is_valid_parentheses(\"()()()()\"))\nprint(is_valid_parentheses(\"()()(()\"))\nprint(is_valid_parentheses(\"(()()())\"))\nprint(is_valid_parentheses(\"))(\"))"
    },
    {
      "rank": 59,
      "score": 8.0,
      "candidate": "def is_valid(s: str):\n    stack = []\n    for i in s:\n        if i == '(':\n            stack.append(i)\n        elif i == ')':\n            if len(stack) == 0:\n                return False\n            else:\n                top = stack.pop()\n                if top == '(':\n                    return False\n                else:\n                    continue\n    return len(stack) == 0\n\n\nprint(is_valid(\"(())()\"))\nprint(is_valid(\"((())())\"))\nprint(is_valid(\"((((())())))\"))\nprint(is_valid(\"((((((((())())))))))\"))"
    },
    {
      "rank": 60,
      "score": 8.0,
      "candidate": "def valid(str):\n    return str == str[::-1]\n\n\nassert valid(\"()\") == False\nassert valid(\"()()\"), \"Invalid parentheses\"\nassert valid(\"()(())\"), \"Invalid parentheses\"\nassert valid(\"()(())\"), \"Invalid parentheses\"\nassert valid(\"()(()(())\"), \"Invalid parentheses\"\nassert valid(\"()(()(())\"), \"Invalid parentheses\"\nassert valid(\"())(()(())\"), \"Invalid parentheses\"\nassert valid(\"())()(())\"), \"Invalid parentheses\"\nassert valid(\"())()())\"), \"Invalid parentheses\"\nassert valid(\"()(()(())\"), \"Invalid parentheses\"\nassert valid(\"())()())\"), \"Invalid parentheses\"\nassert valid(\"())()())\"), \"Invalid parentheses\"\nassert valid(\"()()())\"), \"Invalid parentheses\"\nassert valid(\"()()())\"), \"Invalid parentheses\"\nassert valid(\"()()())\"), \"Invalid parentheses\"\nassert valid(\"()()())\"), \"Invalid parentheses\"\nassert valid(\"()()())\"), \"Invalid parentheses\"\nassert valid(\"()()())\"), \"Invalid parentheses\"\nassert valid(\"()()())\"), \"Invalid parentheses\""
    },
    {
      "rank": 61,
      "score": 8.0,
      "candidate": "def isValid(s):\n    stack = []\n\n    for i in s:\n        if i == '(':\n            stack.append(i)\n        elif i == ')':\n            if len(stack) == 0:\n                return False\n            else:\n                top = stack.pop()\n                if top == '(':\n                    continue\n                elif top == ')':\n                    continue\n                else:\n                    return False\n    return len(stack) == 0\n\n\nprint(isValid(\"(())\"))\nprint(isValid(\"(())\"))\nprint(isValid(\"(())\"))\nprint(isValid(\"(())\"))\nprint(isValid(\"()())\"))\nprint(isValid(\"()()()()\"))"
    },
    {
      "rank": 62,
      "score": 8.0,
      "candidate": "def valid_parentheses(str):\n    open_parentheses = []\n    close_parentheses = []\n    for char in str:\n        if char == '(':\n            open_parentheses.append(char)\n        elif char == ')':\n            if len(open_parentheses) == 0:\n                return False\n            else:\n                if open_parentheses[-1] == '(':\n                    open_parentheses.pop()\n                else:\n                    return False\n    return len(open_parentheses) == 0\n\n\nassert valid_parentheses(\"(()())()()()\")\nassert valid_parentheses(\"())()()()\")\nassert valid_parentheses(\"())()()()\")"
    },
    {
      "rank": 63,
      "score": 8.0,
      "candidate": "class Solution:\n    def isValid(self, s: str) -> bool:\n        stack = []\n        for c in s:\n            if c == '(':\n                stack.append(c)\n            elif c == ')':\n                if not stack:\n                    return False\n                top = stack.pop()\n                if top!= '(':\n                    return False\n        return not stack"
    },
    {
      "rank": 64,
      "score": 8.0,
      "candidate": "def valid_parentheses(string):\n    stack = []\n    for char in string:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if not stack:\n                return False\n            top = stack.pop()\n            if char!= top:\n                return False\n    return not stack\n\n\nprint(valid_parentheses(\"(())\"))\nprint(valid_parentheses(\")()()()\"))\nprint(valid_parentheses(\"(())\"))\nprint(valid_parentheses(\"(())\"))\nprint(valid_parentheses(\"()()\"))\nprint(valid_parentheses(\")()()()()\"))\nprint(valid_parentheses(\")()()()()()()()()()()()()()()()\"))\nprint(valid_parentheses(\"()()()()()()()()()()()()()()()\"))\nprint(valid_parentheses(\"()()()()()()()()()()()()()()()()\"))"
    },
    {
      "rank": 65,
      "score": 8.0,
      "candidate": "def valid_parentheses(string):\n    stack = []\n    for char in string:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if not stack:\n                return False\n            else:\n                top = stack.pop()\n                if top!= '(':\n                    return False\n    return not stack\n\n\nprint(valid_parentheses('(())()'))\nprint(valid_parentheses('())'))\nprint(valid_parentheses('()()()'))\nprint(valid_parentheses('))('))\nprint(valid_parentheses('))('))\nprint(valid_parentheses(')('))\nprint(valid_parentheses('))('))\nprint(valid_parentheses('))('))"
    },
    {
      "rank": 66,
      "score": 8.0,
      "candidate": "def is_valid(s):\n    stack = []\n    for c in s:\n        if c == '(':\n            stack.append(c)\n        elif c == ')':\n            if len(stack) == 0:\n                return False\n            else:\n                top = stack.pop()\n                if top == '(':\n                    return False\n                else:\n                    return is_valid(top)\n    return len(stack) == 0\n\nprint(is_valid('(((())))))'))\nprint(is_valid('()()()()))('))\nprint(is_valid('(((()))))()()()))('))\nprint(is_valid('()()()()()))('))"
    },
    {
      "rank": 67,
      "score": 8.0,
      "candidate": "def valid_parentheses(s):\n    stack = []\n    for c in s:\n        if c == '(' or c == ')':\n            stack.append(c)\n        else:\n            if stack:\n                if stack[-1]!= '(' and stack[-1]!= ')':\n                    return False\n            else:\n                return False\n    return not stack\n\n\nprint(valid_parentheses(\"((()))\"))\nprint(valid_parentheses(\"(((())))\"))\nprint(valid_parentheses(\"(()))()\"))\nprint(valid_parentheses(\"((()))\"))\nprint(valid_parentheses(\"(((((())))))\"))\nprint(valid_parentheses(\"(((((((())))))))\"))"
    },
    {
      "rank": 68,
      "score": 8.0,
      "candidate": "def is_valid(string):\n    stack = []\n    for i in string:\n        if i == '(':\n            stack.append(i)\n        elif i == ')':\n            if len(stack) == 0:\n                return False\n            top = stack.pop()\n            if top!= '(':\n                return False\n    return len(stack) == 0\n\n\ndef is_valid2(string):\n    stack = []\n    for i in string:\n        if i == '(':\n            stack.append(i)\n        elif i == ')':\n            if len(stack) == 0:\n                return False\n            top = stack.pop()\n            if top!= ')':\n                return False\n    return len(stack) == 0\n\n\nif __name__ == \"__main__\":\n    assert is_valid(\"()\")\n    assert is_valid(\")()()(()(())\")\n    assert not is_valid(\"()(()()(())\")\n    assert not is_valid(\")\")\n    assert is_valid2(\")\")\n    assert is_valid2(\"()\")\n    assert is_valid2(\"(()()()(())\")\n    assert not is_valid2(\")\")\n    assert not is_valid2(\"(())()()\")\n    assert is_valid2(\"()()()()\")\n    assert not is_valid2(\"(())()()()()()\")"
    },
    {
      "rank": 69,
      "score": 8.0,
      "candidate": "def check_parentheses(string):\n    \"\"\"\n    :type string: str\n    :rtype: bool\n    \"\"\"\n    stack = []\n    for char in string:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if not stack:\n                return False\n            else:\n                top = stack.pop()\n                if top!= '(':\n                    return False\n        else:\n            continue\n    return not stack\n\n\nif __name__ == '__main__':\n    assert check_parentheses('()()') == True\n    assert check_parentheses('(((()()(()))') == False\n    assert check_parentheses('(()()())') == True\n    assert check_parentheses('(()())') == False"
    },
    {
      "rank": 70,
      "score": 8.0,
      "candidate": "def check_parentheses(s):\n    stack = []\n    for i in s:\n        if i == \"(\":\n            stack.append(i)\n        elif i == \")\":\n            if stack and stack[-1] == \"(\":\n                stack.pop()\n            else:\n                return False\n    return not stack\n\n\nprint(check_parentheses(\"(())\"))\nprint(check_parentheses(\"(())\"))\nprint(check_parentheses(\"((())\"))\nprint(check_parentheses(\"((())\"))\nprint(check_parentheses(\"(()(())\"))\nprint(check_parentheses(\"))()()()(())\"))\nprint(check_parentheses(\"))()()()(())\"))"
    },
    {
      "rank": 71,
      "score": 8.0,
      "candidate": "def validate_parentheses(s):\n    stack = []\n    for i in s:\n        if i == '(':\n            stack.append(i)\n        elif i == ')':\n            if len(stack) == 0:\n                return False\n            elif stack[-1] == '(':\n                stack.pop()\n            else:\n                return False\n        else:\n            return False\n    if len(stack) == 0:\n        return True\n    else:\n        return False\n\nassert validate_parentheses('(())()()()') == True\nassert validate_parentheses('()()()()()') == False\nassert validate_parentheses('))()())()()') == True\nassert validate_parentheses('))()())()()') == False\nassert validate_parentheses('()()()()()') == True"
    },
    {
      "rank": 72,
      "score": 8.0,
      "candidate": "def check_parentheses(string: str) -> bool:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(n)\n    \"\"\"\n    stack = []\n\n    for char in string:\n        if char == \"(\":\n            stack.append(char)\n        elif char == \")\":\n            if not stack or stack.pop()!= \"(\":\n                return False\n\n    return not stack\n\n\nif __name__ == \"__main__\":\n    assert check_parentheses(\")()()\") is True\n    assert check_parentheses(\"(())()\") is False\n    assert check_parentheses(\"(())(()\") is True\n    assert check_parentheses(\"()()\") is False"
    },
    {
      "rank": 73,
      "score": 8.0,
      "candidate": "def valid_parentheses(string):\n    stack = []\n    for char in string:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if stack:\n                top = stack.pop()\n            else:\n                return False\n    if stack:\n        return False\n    return True\n\n\nassert valid_parentheses(\"()\")\nassert valid_parentheses(\"(())()\")\nassert not valid_parentheses(\")())())()()()\")\nassert valid_parentheses(\"(()())()\")\nassert not valid_parentheses(\"()()()\")\nassert valid_parentheses(\"))()()()\")\nassert not valid_parentheses(\"()()()()()\")\nassert valid_parentheses(\"())()()()()\")\nassert valid_parentheses(\"()()()()()\")\nassert not valid_parentheses(\"()()()()()\")\nassert valid_parentheses(\"())()()()()\")\nassert not valid_parentheses(\"())()()()()()\")\nassert valid_parentheses(\"())()()()()()\")"
    },
    {
      "rank": 74,
      "score": 8.0,
      "candidate": "def is_valid(string):\n    brackets = [\"(\", \"[\", \"{\"]\n    stack = []\n    for char in string:\n        if char in brackets:\n            if stack:\n                top = stack.pop()\n                if char!= top:\n                    return False\n            else:\n                return False\n        else:\n            stack.append(char)\n    return len(stack) == 0\n\n\nprint(is_valid(\"()\"))\nprint(is_valid(\"(]\"))\nprint(is_valid(\"[]\"))\nprint(is_valid(\"{]\"))"
    },
    {
      "rank": 75,
      "score": 8.0,
      "candidate": "class Solution:\n    def isValid(self, s: str) -> bool:\n        stack = []\n        for i in range(len(s)):\n            if s[i] == '(':\n                stack.append(s[i])\n            elif stack:\n                if s[i] == ')':\n                    if len(stack) == 0:\n                        return False\n                    elif s[stack[-1]] == '(':\n                        stack.pop()\n                    else:\n                        return False\n                else:\n                    return False\n        return len(stack) == 0"
    },
    {
      "rank": 76,
      "score": 8.0,
      "candidate": "def is_valid(s):\n    stack = []\n    for c in s:\n        if c == '(':\n            stack.append(c)\n        elif c == ')':\n            if stack:\n                stack.pop()\n            else:\n                return False\n    return not stack\n\n\nprint(is_valid('()())'))\nprint(is_valid('(((((('))"
    },
    {
      "rank": 77,
      "score": 8.0,
      "candidate": "class Solution(object):\n    def isValid(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: bool\n        \"\"\"\n        if s == \"\" or s == \" \":\n            return True\n\n        stack = []\n        for i in s:\n            if i == \"(\":\n                stack.append(i)\n            elif i == \")\":\n                if len(stack) == 0:\n                    return False\n                else:\n                    top = stack.pop()\n                    if top == \"(\" and i!= \")\":\n                        return False\n                    if top == \")\" and i!= \"(\":\n                        return False\n        if len(stack) == 0:\n            return True\n        else:\n            return False\n\n\ns = Solution()\nprint(s.isValid(\"()()()\"))\nprint(s.isValid(\"()(()()()()()())\"))\nprint(s.isValid(\"()(()()()()()())\"))\nprint(s.isValid(\"()))()\"))"
    },
    {
      "rank": 78,
      "score": 8.0,
      "candidate": "def is_valid(s):\n    stack = []\n    for i in s:\n        if i in \"()\":\n            stack.append(i)\n        elif stack:\n            if i == \")\":\n                if not stack:\n                    return False\n                else:\n                    stack.pop()\n            else:\n                return False\n    return not stack\n\n\nprint(is_valid(\"(()\"))\nprint(is_valid(\"((())\"))\nprint(is_valid(\"((())))\"))\nprint(is_valid(\"(()())()()()()(())\"))"
    },
    {
      "rank": 79,
      "score": 8.0,
      "candidate": "def is_valid_parentheses(string):\n    stack = []\n    for c in string:\n        if c == '(':\n            stack.append(c)\n        elif c == ')':\n            if len(stack) == 0:\n                return False\n            else:\n                top = stack.pop()\n                if top!= '(':\n                    return False\n    return len(stack) == 0\n\n\nprint(is_valid_parentheses(\"()\"))\nprint(is_valid_parentheses(\"()()()()\"))\nprint(is_valid_parentheses(\"(()\"))\nprint(is_valid_parentheses(\")\"))\nprint(is_valid_parentheses(\"))(\"))\nprint(is_valid_parentheses(\"))()(\"))"
    },
    {
      "rank": 80,
      "score": 8.0,
      "candidate": "def is_valid(s):\n    stack = []\n\n    for c in s:\n        if c == '(':\n            stack.append(c)\n        elif c == ')':\n            if len(stack) == 0:\n                return False\n            else:\n                top = stack.pop()\n                if top == '(' and c!= ')':\n                    return False\n\n    return len(stack) == 0"
    },
    {
      "rank": 81,
      "score": 8.0,
      "candidate": "def valid_parentheses(str):\n    stack = []\n    for i in str:\n        if i == \"(\":\n            stack.append(i)\n        elif i == \")\":\n            if stack and stack[-1] == \"(\":\n                stack.pop()\n            else:\n                return False\n    if stack:\n        return False\n    else:\n        return True\n\nprint(valid_parentheses(\"()()()\"))"
    },
    {
      "rank": 82,
      "score": 8.0,
      "candidate": "def valid_parentheses(string: str) -> bool:\n    \"\"\"\n    Time: O(n)\n    Space: O(n)\n    \"\"\"\n    stack = []\n    for char in string:\n        if char == \"(\":\n            stack.append(char)\n        else:\n            if len(stack) == 0:\n                return False\n            if stack[-1]!= \"(\":\n                return False\n            stack.pop()\n    return len(stack) == 0\n\n\nif __name__ == \"__main__\":\n    print(valid_parentheses(\"(()())()()\"))\n    print(valid_parentheses(\"(()()()())\"))\n    print(valid_parentheses(\"()))()()()()\"))\n    print(valid_parentheses(\"()))()()()()\"))\n    print(valid_parentheses(\"()))()()()\"))\n    print(valid_parentheses(\"()))()()()\"))\n    print(valid_parentheses(\"()))()()()\"))"
    },
    {
      "rank": 83,
      "score": 8.0,
      "candidate": "def is_valid(string):\n    if string.count('(')!= string.count(')'):\n        return False\n    return True\n\n\ndef main():\n    string = '(()())'\n    print(is_valid(string))\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 84,
      "score": 8.0,
      "candidate": "def check_validity(string):\n    stack = []\n    for char in string:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if len(stack) == 0:\n                return False\n            else:\n                top = stack.pop()\n                if char!= top:\n                    return False\n    return len(stack) == 0\n\n\nif __name__ == '__main__':\n    assert check_validity(\"()\") == True\n    assert check_validity(\")()\") == False\n    assert check_validity(\"()()\") == True\n    assert check_validity(\"()()(()())()\") == True\n    assert check_validity(\"()\") == True\n    assert check_validity(\"())()()()()()\") == True\n    assert check_validity(\"())())()()()()()()\") == True\n    assert check_validity(\"()()()()()()\") == False"
    },
    {
      "rank": 85,
      "score": 8.0,
      "candidate": "def is_valid(s):\n    stack = []\n    for char in s:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if len(stack) == 0:\n                return False\n            else:\n                top = stack.pop()\n                if top!= '(':\n                    return False\n    if len(stack) == 0:\n        return True\n    else:\n        return False\n\n\nprint(is_valid(\"(())\"))\nprint(is_valid(\"(())\"))"
    },
    {
      "rank": 86,
      "score": 8.0,
      "candidate": "def valid_parentheses(string):\n    stack = []\n    for char in string:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if stack:\n                top = stack.pop()\n                if top == '(':\n                    continue\n                else:\n                    return False\n            else:\n                return False\n    return not stack\n\n\nprint(valid_parentheses(\"()()\"))\nprint(valid_parentheses(\"))()()()\"))\nprint(valid_parentheses(\")()()()()\"))\nprint(valid_parentheses(\"))()()()()\"))"
    },
    {
      "rank": 87,
      "score": 8.0,
      "candidate": "def check_parentheses(string):\n    stack = []\n    for char in string:\n        if char == \"(\":\n            stack.append(char)\n        elif char == \")\":\n            if not stack:\n                return False\n            top = stack.pop()\n            if top!= \"(\":\n                return False\n    return not stack\n\n\nprint(check_parentheses(\"(())\"))\nprint(check_parentheses(\"))()(())\"))"
    },
    {
      "rank": 88,
      "score": 7.0,
      "candidate": "def valid(string):\n    stack = []\n    for char in string:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if len(stack) == 0:\n                return False\n            else:\n                top = stack.pop()\n                if char!= top:\n                    return False\n    return len(stack) == 0"
    },
    {
      "rank": 89,
      "score": 1.0,
      "candidate": "def valid(s):\n    return s.count('(') == s.count(')') and s.count('{') == s.count('}') and s.count('[') == s.count(']')\n\nprint(valid(\"[]{}\"))\nprint(valid(\"[]{}\"))\nprint(valid(\"[]{}\"))\nprint(valid(\"[]{}\"))\nprint(valid(\"[]{}\"))\nprint(valid(\"[]{}\"))\nprint(valid(\"[]{}\"))\nprint(valid(\"[]{}\"))\nprint(valid(\"[]{}\"))\nprint(valid(\"[]{}\"))\nprint(valid(\"[]{}\"))\nprint(valid(\"[]{}\"))\nprint(valid(\"[]{}\"))\nprint(valid(\"[]{}\"))\nprint(valid(\"[]{}\"))\nprint(valid(\"[]{}\"))\nprint(valid(\"[]{}\"))\nprint(valid(\"[]{}\"))\nprint(valid(\"[]{}\"))\nprint(valid(\"[]{}\"))\nprint(valid(\"[]{}\"))\nprint(valid(\"[]{}\"))\nprint(valid(\"[]{}\"))\nprint(valid(\"[]{}\"))\nprint(valid(\"[]{}\"))\nprint(valid(\"[]{}\"))\nprint(valid(\"[]{}\"))\nprint(valid(\"[]{}\"))\nprint(valid(\"[]{}\"))\nprint(valid(\"[]{}\"))\nprint(valid(\"[]{}\"))\nprint(valid(\"[]{}\"))\nprint(valid(\"[]{}\"))\nprint(valid(\"[]{}\"))\nprint(valid(\"[]{}\"))\nprint(valid(\"[]{}\"))\nprint(valid(\"[]{}\"))\nprint(valid(\"[]{}\"))\nprint(valid(\"[]{}\"))\nprint(valid(\"[]{}\"))\nprint(valid(\"[]{}\"))\nprint(valid(\"[]{}\"))\nprint(valid(\"[]{}\"))\nprint(valid(\"[]{}\"))\nprint(valid(\"[]{}\"))\nprint(valid(\"[]{}\"))\nprint(valid(\"[]{}\"))\nprint(valid(\"[]{}\"))\nprint(valid(\"[]{}\"))\nprint(valid(\"[]{}\"))\nprint(valid(\"[]{}\"))"
    },
    {
      "rank": 90,
      "score": 1.0,
      "candidate": "class Solution:\n    def isValid(self, s):\n        open_stack = []\n        close_stack = []\n        for i in range(len(s)):\n            if s[i] == '(':\n                open_stack.append(i)\n            elif s[i] == ')':\n                if len(open_stack) == 0:\n                    return False\n                else:\n                    open_stack.pop()\n            else:\n                if len(close_stack) == 0:\n                    return False\n                else:\n                    close_stack.pop()\n        if len(open_stack) == 0 and len(close_stack) == 0:\n            return True\n        else:\n            return False\n\n\nif __name__ == \"__main__\":\n    s = \"(()())\"\n    print(Solution().isValid(s))\n\n    s = \"()(())\"\n    print(Solution().isValid(s))\n\n    s = \"()(())\"\n    print(Solution().isValid(s))\n\n    s = \"()()()()\"\n    print(Solution().isValid(s))\n\n    s = \"()(())\"\n    print(Solution().isValid(s))\n\n    s = \"()(())\"\n    print(Solution().isValid(s))\n\n    s = \"()(())\"\n    print(Solution().isValid(s))"
    },
    {
      "rank": 91,
      "score": 1.0,
      "candidate": "def check_validity(s):\n    stack = []\n    for c in s:\n        if c == '(':\n            stack.append(c)\n        elif c == ')':\n            if len(stack) == 0:\n                return False\n            else:\n                top = stack.pop()\n                if top!= '(':\n                    return False\n        else:\n            return False\n    return len(stack) == 0\n\n\nprint(check_validity(\"()()\"))\nprint(check_validity(\"(()\"))\nprint(check_validity(\"()\"))\nprint(check_validity(\"()(())\"))\nprint(check_validity(\"((())\"))\nprint(check_validity(\"))()()()()(()\"))\nprint(check_validity(\"))()()()()(())\"))"
    },
    {
      "rank": 92,
      "score": 1.0,
      "candidate": "class Solution:\n    def isValid(self, s: str) -> bool:\n        stack = []\n        for char in s:\n            if char == '(':\n                stack.append(char)\n            elif char == ')':\n                if len(stack) == 0:\n                    return False\n                top = stack.pop()\n                if char!= top:\n                    return False\n        if len(stack) == 0:\n            return True\n        return False\n\n\nif __name__ == \"__main__\":\n    s = \"()()()\"\n    print(Solution().isValid(s))"
    },
    {
      "rank": 93,
      "score": 1.0,
      "candidate": "def is_valid(string):\n    stack = []\n    for char in string:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if not stack:\n                return False\n            elif stack[-1] == '(':\n                stack.pop()\n            else:\n                return False\n    return not stack\n\n\ndef is_valid_2(string):\n    stack = []\n    for char in string:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if not stack:\n                return False\n            elif stack[-1] == '(':\n                stack.pop()\n            else:\n                return False\n    return not stack\n\n\nprint(is_valid(\"(())\"))\nprint(is_valid_2(\"((())\"))"
    },
    {
      "rank": 94,
      "score": 1.0,
      "candidate": "def is_valid_parentheses(string: str):\n    stack = []\n\n    for i in string:\n        if i == '(':\n            stack.append(i)\n        elif i == ')':\n            if len(stack) == 0:\n                return False\n            else:\n                top = stack.pop()\n                if top == '(' and i!= ')':\n                    return False\n        else:\n            continue\n\n    return len(stack) == 0\n\n\nif __name__ == '__main__':\n    assert is_valid_parentheses('(()') is True\n    assert is_valid_parentheses('()())()') is True\n    assert is_valid_parentheses('()()()()') is False\n    assert is_valid_parentheses('(())()()') is False"
    },
    {
      "rank": 95,
      "score": 1.0,
      "candidate": "class Solution:\n    def isValid(self, s: str) -> bool:\n        stack = []\n\n        for c in s:\n            if c == '(':\n                stack.append(c)\n            elif c == ')':\n                if stack and stack[-1] == '(':\n                    stack.pop()\n                else:\n                    return False\n\n        return not stack\n\n\nif __name__ == \"__main__\":\n    assert Solution().isValid(\"())()()()()()\") is False\n    assert Solution().isValid(\")()()()()()\") is True\n    assert Solution().isValid(\"()())()()()()\") is False\n    assert Solution().isValid(\")()()()()()\") is True"
    },
    {
      "rank": 96,
      "score": 1.0,
      "candidate": "class Solution:\n    def isValid(self, s: str) -> bool:\n        stack = []\n        for c in s:\n            if c == '(':\n                stack.append(c)\n            elif c == ')':\n                if not stack:\n                    return False\n                top = stack.pop()\n                if top!= '(':\n                    return False\n        return not stack\n\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    assert sol.isValid(\"((((())))\") is True\n    assert sol.isValid(\"((((())))\") is False\n    assert sol.isValid
    },
    {
      "rank": 97,
      "score": 1.0,
      "candidate": "class Solution:\n    def isValid(self, s: str) -> bool:\n        stack = []\n        for i in s:\n            if i == '(':\n                stack.append(i)\n            elif i == ')':\n                if len(stack) == 0:\n                    return False\n                top = stack.pop()\n                if top!= '(' and top!= ')':\n                    return False\n        return len(stack) == 0\n\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    assert sol.isValid(\"(())\") == True\n    assert sol.isValid(\"(()())\") == False\n    assert sol.isValid(\"()(())\") == True\n    assert sol.isValid(\"((())\") == False"
    },
    {
      "rank": 98,
      "score": 1.0,
      "candidate": "class Solution:\n    def isValid(self, s):\n        if s == \"\":\n            return True\n        stack = []\n        for i in range(len(s)):\n            if s[i] == \"(\":\n                stack.append(s[i])\n            else:\n                if stack:\n                    if s[i] == \")\":\n                        if stack[-1] == \"(\":\n                            stack.pop()\n                        else:\n                            return False\n                    else:\n                        return False\n        if not stack:\n            return True\n        else:\n            return False\n\n\nif __name__ == \"__main__\":\n    s = Solution()\n    assert s.isValid(\"())()\"), \"()()()()()\"\n    assert s.isValid(\"())()()()(())\"), \"(())()()()()()()()\"\n    assert s.isValid(\"(()())()()()()()()()()\"), \"(())()()()()()()()()\""
    },
    {
      "rank": 99,
      "score": 1.0,
      "candidate": "def is_valid(s):\n    stack = []\n    for i in s:\n        if i in ['(','[','{']:\n            stack.append(i)\n        elif i in [')',']','}']:\n            if len(stack) == 0:\n                return False\n            elif stack.pop()!= '(' and stack.pop()!= '[' and stack.pop()!= '{' :\n                return False\n    if len(stack) == 0:\n        return True\n    return False\n\n\nprint(is_valid(\"((()))()\"))\nprint(is_valid(\"(()())\"))\nprint(is_valid(\"(())(()))\"))"
    },
    {
      "rank": 100,
      "score": 1.0,
      "candidate": "class Solution:\n    def isValid(self, s: str) -> bool:\n        stack = []\n        for i in s:\n            if i == '(':\n                stack.append(i)\n            elif i == ')':\n                if len(stack) == 0:\n                    return False\n                top = stack.pop()\n                if top!= '(':\n                    return False\n        return len(stack) == 0\n\n\nif __name__ == \"__main__\":\n    s = \"(()\")\n    print(Solution().isValid(s))"
    }
  ]
}