{
  "timestamp": "2025-09-14T12:32:02.940082",
  "method": "improved_llm_judge",
  "judge_model": "codellama/CodeLlama-7b-Python-hf",
  "target_model": "codet5-770m",
  "dataset": "mbpp",
  "problem_number": 8,
  "total_candidates": 100,
  "results": [
    {
      "rank": 1,
      "score": 10.0,
      "candidate": "def contains_duplicate(nums):\n    for i in range(len(nums)):\n        if nums[i] in nums[i+1:]:\n            return True\n    return False\n\nprint(contains_duplicate([2, 3, 2, 4, 5, 2, 4, 4, 3, 3, 2, 2, 4, 4, 3, 3, 4, 4, 4, 4, 5, 4, 5, 5, 5, 5, 5, 5, 4, 5, 5, 4, 4, 5, 4, 5, 5, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4"
    },
    {
      "rank": 2,
      "score": 10.0,
      "candidate": "def find_duplicate(nums):\n    return len(nums)!= len(set(nums))\n\n\nprint(find_duplicate([1, 1, 2, 2, 2, 3, 3, 3]))\nprint(find_duplicate([1, 2, 3, 4, 5, 6, 7, 8, 9]))\nprint(find_duplicate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))"
    },
    {
      "rank": 3,
      "score": 10.0,
      "candidate": "def containsDuplicate(arr):\n    seen = set()\n    for num in arr:\n        if num in seen:\n            return True\n        seen.add(num)\n    return False\n\n\nprint(containsDuplicate([1, 2, 3, 4, 5]))"
    },
    {
      "rank": 4,
      "score": 10.0,
      "candidate": "def containsDuplicate(nums):\n    if len(nums) == 1:\n        return False\n    else:\n        for i in range(len(nums)):\n            if nums[i] in nums[i + 1:]:\n                return True\n        return False\n\nprint(containsDuplicate([1,2,3,4,2]))\nprint(containsDuplicate([1,2,3,4,5,2]))\nprint(containsDuplicate([1,2,3,4,2,3,4,5]))"
    },
    {
      "rank": 5,
      "score": 10.0,
      "candidate": "class Solution:\n    def containsDuplicate(self, nums: List[int]) -> bool:\n        return len(set(nums))!= len(nums)"
    },
    {
      "rank": 6,
      "score": 10.0,
      "candidate": "def containsDuplicate(arr):\n    # Write your code here\n    for i in arr:\n        if arr.count(i) > 1:\n            return True\n    return False\n\n\nprint(containsDuplicate([1, 2, 3, 4, 5]))\nprint(containsDuplicate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 190, 191, 193, 194"
    },
    {
      "rank": 7,
      "score": 10.0,
      "candidate": "def contains_duplicate(arr):\n    if not arr:\n        return False\n    for i in arr:\n        if arr.count(i) > 1:\n            return True\n    return False\n\n\nif __name__ == \"__main__\":\n    print(contains_duplicate([1, 2, 3, 1]))\n    print(contains_duplicate([1, 2, 3, 2, 4]))\n    print(contains_duplicate([1, 2, 3, 4, 5]))\n    print(contains_duplicate([1, 2, 3, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9]))"
    },
    {
      "rank": 8,
      "score": 10.0,
      "candidate": "def find_duplicate(arr):\n    seen = set()\n    for num in arr:\n        if num in seen:\n            return True\n        seen.add(num)\n    return False\n\n\nprint(find_duplicate([1, 2, 3, 4, 5, 6, 7, 8, 9]))"
    },
    {
      "rank": 9,
      "score": 10.0,
      "candidate": "class Solution(object):\n    def containsDuplicate(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: bool\n        \"\"\"\n        d = {}\n        for i in nums:\n            if i in d:\n                return True\n            else:\n                d[i] = True\n        return False"
    },
    {
      "rank": 10,
      "score": 10.0,
      "candidate": "def contains_duplicate(nums):\n    return len(set(nums)) == len(nums)\n\n\nif __name__ == \"__main__\":\n    nums = [1, 2, 2, 3, 4, 4, 4, 5, 5, 5, 5, 6, 7, 8, 9, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 131, 132, 133, 134, 135, 136, 137, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 171, 172, 173, 179, 181, 182, 183, 184, 179, 191, 192, 193, 195, 196, 197, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213,"
    },
    {
      "rank": 11,
      "score": 10.0,
      "candidate": "def contains_duplicate(arr):\n    for i in range(len(arr)):\n        if arr[i] in arr:\n            return True\n    return False\n\n\nif __name__ == \"__main__\":\n    print(contains_duplicate([1, 2, 3, 4, 5]))"
    },
    {
      "rank": 12,
      "score": 10.0,
      "candidate": "def contains_duplicate(nums):\n    hash_map = {}\n    for num in nums:\n        if num in hash_map:\n            return True\n        hash_map[num] = True\n    return False\n\n\nprint(contains_duplicate([1, 2, 3, 4, 5]))\nprint(contains_duplicate([1, 2, 3, 4, 5, 6, 7, 8, 9]))"
    },
    {
      "rank": 13,
      "score": 10.0,
      "candidate": "def find_duplicate_element(arr):\n    count = 0\n    for i in arr:\n        if arr[i] == i:\n            count += 1\n    if count > 1:\n        return True\n    else:\n        return False\n\n\nprint(find_duplicate_element([1, 1, 2, 2, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,"
    },
    {
      "rank": 14,
      "score": 10.0,
      "candidate": "def contains_duplicate(nums):\n    seen = set()\n    for num in nums:\n        if num in seen:\n            return True\n        seen.add(num)\n    return False\n\n\nprint(contains_duplicate([1, 2, 3, 4, 5, 4]))"
    },
    {
      "rank": 15,
      "score": 10.0,
      "candidate": "def find_duplicate(arr):\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] == arr[j]:\n                return True\n    return False\n\n\narr = [1, 2, 3, 4, 5, 4, 1, 2, 3]\nprint(find_duplicate(arr))"
    },
    {
      "rank": 16,
      "score": 10.0,
      "candidate": "def contains_duplicate(nums):\n    seen = set()\n    for num in nums:\n        if num in seen:\n            return True\n        else:\n            seen.add(num)\n    return False\n\n\nprint(contains_duplicate([1, 2, 3, 3, 4, 3, 3, 4]))\nprint(contains_duplicate([1, 1, 2, 2, 2, 3, 4]))"
    },
    {
      "rank": 17,
      "score": 10.0,
      "candidate": "def find_duplicate(nums):\n    # write your code here\n    seen = set()\n    for num in nums:\n        if num in seen:\n            return True\n        seen.add(num)\n    return False\n\n\nnums = [1, 1, 2, 2, 3, 3, 4]\nprint(find_duplicate(nums))"
    },
    {
      "rank": 18,
      "score": 10.0,
      "candidate": "def contains_duplicate(arr):\n    if len(arr) <= 1:\n        return False\n\n    for i in range(len(arr)):\n        if arr[i] in arr[1:]:\n            return True\n\n    return False\n\nprint(contains_duplicate([1, 2, 3, 4, 5]))\nprint(contains_duplicate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\nprint(contains_duplicate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]))"
    },
    {
      "rank": 19,
      "score": 10.0,
      "candidate": "def containsDuplicate(nums):\n    hashmap = {}\n    for num in nums:\n        if num in hashmap:\n            return True\n        hashmap[num] = True\n    return False\n\nif __name__ == '__main__':\n    nums = [1, 2, 3, 4, 2, 3, 4, 3, 2, 4, 2, 5, 3, 2, 4, 2, 3, 2, 3, 3, 4, 3, 2, 4, 5, 4, 2, 3, 4, 4, 3, 5, 4, 3, 2, 4, 3, 3, 2, 4, 3, 5, 4, 4, 2, 3, 4, 4, 3, 2, 4, 4, 3, 2, 4, 4, 3, 3, 2, 4, 3, 2, 4, 4, 4, 3, 2, 5, 4, 2, 3, 4, 4, 4, 3, 2, 4, 3, 4, 4, 4, 4, 4, 3, 2, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 2, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 2, 4, 4, 4, 4, 3, 2, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4"
    },
    {
      "rank": 20,
      "score": 10.0,
      "candidate": "def contains_duplicate(arr):\n    \"\"\"\n    :type arr: List[int]\n    :rtype: bool\n    \"\"\"\n    seen = set()\n\n    for num in arr:\n        if num in seen:\n            return True\n        seen.add(num)\n\n    return False\n\n\nprint(contains_duplicate([1, 2, 3, 4, 5]))\nprint(contains_duplicate([1, 2, 3, 4, 5, 6]))\nprint(contains_duplicate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))"
    },
    {
      "rank": 21,
      "score": 10.0,
      "candidate": "def contains_duplicate(arr):\n    for i in range(len(arr)):\n        if arr[i] in arr:\n            return True\n    return False\n\n\ndef main():\n    arr = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    print(contains_duplicate(arr))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 22,
      "score": 10.0,
      "candidate": "def containsDuplicate(nums):\n    for i in nums:\n        if nums.count(i) > 1:\n            return True\n    return False\n\n\nprint(containsDuplicate([4, 2, 1, 3, 2, 1, 4]))\nprint(containsDuplicate([4, 2, 3, 1, 3, 2, 1]))\nprint(containsDuplicate([2, 1, 1, 2, 2, 2, 2, 1]))\nprint(containsDuplicate([1, 2, 3, 4, 2, 3, 4, 2, 3, 2, 4, 2, 1, 4, 2, 1, 3, 4, 2, 3, 2, 3, 4, 2, 4, 2, 2, 3, 4, 2, 1, 4, 2, 3, 4, 2, 3, 2, 4, 2, 4, 2, 3, 4, 2, 3, 2, 3, 4, 2, 2, 4, 2, 4, 2, 3, 4, 2, 3, 2, 4, 2, 2, 4, 2, 4, 2, 3, 4, 2, 4, 2, 4, 2, 3, 4, 2, 4, 2, 2, 4, 2, 4, 2, 4, 2, 4, 2, 4, 2, 4, 2, 4, 2, 4, 2, 4, 2, 4, 2, 4, 2, 4, 2, 4, 2, 4, 2, 4, 2, 4, 2, 4, 2, 4, 2, 4, 2, 4, 2, 4, 2, 4, 2, 4, 2, 4, 2, 4, 2, 4, 2, 4, 2, 4, 2, 4, 2, 4, 2, 4, 2, 4, 2, 4, 2, 4, 2, 4, 2, 4, 2, 4, 2, 4, 2, 4, 2, 4, 2, 4, 2, 4, 2, 4, 2, 4, 2, 4, 2, 4, 2, 4, 2, 4, 2, 4, 2, 4, 2, 4, 2, 4, 2, 4, 2, 4, 2, 4, 2, 4, 2, 4, 2, 4, 2, 4, 2, 4, 2, 4, 2, 4"
    },
    {
      "rank": 23,
      "score": 10.0,
      "candidate": "class Solution:\n    def containsDuplicate(self, nums: List[int]) -> bool:\n        d = {}\n        for x in nums:\n            if x in d:\n                return True\n            else:\n                d[x] = 1\n        return False"
    },
    {
      "rank": 24,
      "score": 10.0,
      "candidate": "def containsDuplicate(arr):\n    seen = set()\n    for num in arr:\n        if num in seen:\n            return True\n        seen.add(num)\n    return False\n\narr = [1,2,3,4,5,6,7,8,9,10,11,12,13]\nprint(containsDuplicate(arr))"
    },
    {
      "rank": 25,
      "score": 9.0,
      "candidate": "def contains_duplicate(arr):\n    seen = {}\n    for num in arr:\n        if num in seen:\n            return True\n        seen[num] = True\n    return False\n\nif __name__ == \"__main__\":\n    print(contains_duplicate([1, 2, 3, 3, 4, 5, 5, 5, 6, 7]))\n    print(contains_duplicate([1, 2, 3, 4, 5, 6, 7, 8, 9]))\n    print(contains_duplicate([1, 2, 3, 4, 5, 6, 7, 8, 9]))\n    print(contains_duplicate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\n    print(contains_duplicate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\n    print(contains_duplicate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]))"
    },
    {
      "rank": 26,
      "score": 8.0,
      "candidate": "class Solution:\n    # @param A : list of integers\n    # @return a boolean\n    def containsDuplicate(self, A):\n        for i in range(len(A)):\n            if A[i] in A[i+1:]:\n                return True\n        return False"
    },
    {
      "rank": 27,
      "score": 8.0,
      "candidate": "def containsDuplicate(nums):\n    # Write your code here\n    return len(set(nums))!= len(nums)\n\nprint(containsDuplicate([1,2,3,3,2,1]))\nprint(containsDuplicate([1,2,2,3,3,2,1]))\nprint(containsDuplicate([1,2,2,3,3,2,1]))"
    },
    {
      "rank": 28,
      "score": 8.0,
      "candidate": "def containsDuplicate(nums):\n    # Write your code here\n    if len(nums) == 0:\n        return False\n    d = {}\n    for i in nums:\n        if i in d:\n            return True\n        else:\n            d[i] = 1\n    return False\n\nprint(containsDuplicate([1, 2, 3, 4, 5, 6]))\nprint(containsDuplicate([1, 2, 3, 4, 5, 6]))\nprint(containsDuplicate([1, 2, 3, 4, 5, 6, 7]))"
    },
    {
      "rank": 29,
      "score": 8.0,
      "candidate": "def duplicate_element(arr):\n    # Write your code here\n    for i in arr:\n        if arr.count(i) > 1:\n            return True\n    return False"
    },
    {
      "rank": 30,
      "score": 8.0,
      "candidate": "def contains_duplicate(nums):\n    return len(nums)!= len(set(nums))\n\n\nprint(contains_duplicate([2, 1, 3, 4, 4, 1]))"
    },
    {
      "rank": 31,
      "score": 8.0,
      "candidate": "def contains_duplicate(arr):\n    if len(arr) == 0:\n        return False\n\n    for i in range(len(arr)):\n        if arr[i] in arr[i+1:]:\n            return True\n\n    return False\n\n\nif __name__ == \"__main__\":\n    print(contains_duplicate([1, 2, 3, 3, 2, 4]))"
    },
    {
      "rank": 32,
      "score": 8.0,
      "candidate": "def contains_duplicate(arr):\n    seen = set()\n    for num in arr:\n        if num in seen:\n            return True\n        else:\n            seen.add(num)\n    return False"
    },
    {
      "rank": 33,
      "score": 8.0,
      "candidate": "def contains_duplicate(arr):\n    arr.sort()\n    for i in range(1, len(arr)):\n        if arr[i] == arr[i-1]:\n            return True\n    return False\n\n\nprint(contains_duplicate([3, 5, 6, 1, 2]))"
    },
    {
      "rank": 34,
      "score": 8.0,
      "candidate": "def find_duplicate(arr):\n    dic = {}\n    for i in arr:\n        if dic.get(i) is not None:\n            return True\n        dic[i] = 1\n    return False\n\n\narr = [2, 2, 4, 4, 3, 3, 3, 4, 4]\nprint(find_duplicate(arr))"
    },
    {
      "rank": 35,
      "score": 8.0,
      "candidate": "def contains_duplicate(nums):\n    return len(set(nums)) == len(nums)\n\n\nif __name__ == \"__main__\":\n    assert contains_duplicate([1, 2, 3, 4, 5, 6, 7]) == True\n    assert contains_duplicate([1, 2, 3, 4, 5, 6, 7]) == False"
    },
    {
      "rank": 36,
      "score": 8.0,
      "candidate": "# Time: O(n)\n# Space: O(1)\n# Time complexity: O(n)\n\ndef contains_duplicate(nums):\n    if len(nums) == 0:\n        return False\n    for i in range(len(nums)):\n        if nums[i] in nums[i+1:]:\n            return True\n    return False\n\n\ndef main():\n    nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    print(contains_duplicate(nums))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 37,
      "score": 8.0,
      "candidate": "class Solution(object):\n    def containsDuplicate(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: bool\n        \"\"\"\n        if len(nums)<=1:\n            return False\n        d={}\n        for num in nums:\n            if num in d.keys():\n                return True\n            else:\n                d[num]=1\n        return False"
    },
    {
      "rank": 38,
      "score": 8.0,
      "candidate": "def contains_duplicate(array):\n    # Your code here\n    return len(array)!= len(set(array))\n\n\nprint(contains_duplicate([1, 1, 2, 2, 3, 3, 4, 4, 4, 5, 5]))\nprint(contains_duplicate([1, 1, 2, 2, 3, 3, 4, 4, 5, 5]))\nprint(contains_duplicate([1, 1, 2, 2, 3, 3, 4, 4, 5, 5]))\nprint(contains_duplicate([1, 1, 2, 2, 3, 3, 4, 4, 5, 5]))\nprint(contains_duplicate([1, 1, 2, 2, 3, 3, 4, 4, 5, 5]))\nprint(contains_duplicate([1, 1, 2, 2, 3, 3, 4, 4, 5, 5]))\nprint(contains_duplicate([1, 1, 2, 2, 3, 3, 4, 4, 5, 5]))\nprint(contains_duplicate([1, 1, 2, 2, 3, 3, 4, 4, 5, 5]))\nprint(contains_duplicate([1, 1, 2, 2, 3, 3, 4, 4, 5, 5]))\nprint(contains_duplicate([1, 1, 2, 2, 3, 3, 4, 4, 5, 5]))\nprint(contains_duplicate([1, 1, 2, 2, 3, 3, 4, 4, 5, 5]))\nprint(contains_duplicate([1, 1, 2, 2, 3, 3, 4, 4, 5, 5]))\nprint(contains_duplicate([1, 1, 2, 2, 3, 3, 4, 4, 5, 5]))"
    },
    {
      "rank": 39,
      "score": 8.0,
      "candidate": "def containsDuplicate(nums):\n    return len(set(nums))!= len(nums)"
    },
    {
      "rank": 40,
      "score": 8.0,
      "candidate": "def contains_duplicate(arr):\n    # Write your code here\n    dic = {}\n    for num in arr:\n        if num in dic.keys():\n            return True\n        else:\n            dic[num] = 1\n    return False\n\nprint(contains_duplicate([1, 2, 3, 3, 4, 5]))\nprint(contains_duplicate([1, 2, 3, 3, 4, 5, 6, 6, 6]))\nprint(contains_duplicate([1, 2, 3, 4, 5, 6, 6, 7]))"
    },
    {
      "rank": 41,
      "score": 8.0,
      "candidate": "def check_duplicate(arr):\n    for i in range(len(arr)):\n        if arr[i] in arr[i+1:]:\n            return True\n    return False\n\n\narr = [1, 2, 3, 4, 5, 5, 5, 5, 6, 7, 7, 7, 7, 7]\nprint(check_duplicate(arr))"
    },
    {
      "rank": 42,
      "score": 8.0,
      "candidate": "def find_duplicate_element(arr):\n    arr.sort()\n    for i in range(1, len(arr)):\n        if arr[i] == arr[i-1]:\n            return arr[i]\n    return -1\n\n\nprint(find_duplicate_element([1, 2, 3, 3, 3, 4, 4, 4, 5]))\nprint(find_duplicate_element([1, 2, 3, 4, 5]))"
    },
    {
      "rank": 43,
      "score": 8.0,
      "candidate": "def find_duplicate(array):\n    if len(array) <= 1:\n        return False\n    else:\n        for i in array:\n            if array.count(i) > 1:\n                return True\n        return False"
    },
    {
      "rank": 44,
      "score": 8.0,
      "candidate": "def contains_duplicate(arr):\n    seen = set()\n\n    for num in arr:\n        if num in seen:\n            return True\n        seen.add(num)\n\n    return False\n\n\nif __name__ == \"__main__\":\n    arr = [1, 1, 2, 2, 2, 3]\n    print(contains_duplicate(arr))"
    },
    {
      "rank": 45,
      "score": 8.0,
      "candidate": "def containsDuplicate(arr):\n    # Write your code here\n    hash_table = {}\n\n    for i in arr:\n        if i in hash_table:\n            return True\n        else:\n            hash_table[i] = True\n\n    return False\n\n\nif __name__ == \"__main__\":\n    arr = [1, 2, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 7, 7, 8, 8, 8, 8, 8, 8, 9]\n    print(containsDuplicate(arr))"
    },
    {
      "rank": 46,
      "score": 8.0,
      "candidate": "def duplicate(arr):\n    if len(arr) < 2:\n        return False\n    if arr[0] == arr[1]:\n        return True\n    for i in range(len(arr)):\n        if arr[i] == arr[i+1]:\n            return True\n    return False\n\n\nprint(duplicate([1, 2, 3, 4]))\nprint(duplicate([2, 2, 2, 2, 2, 3, 4, 4]))\nprint(duplicate([1, 1, 1, 1, 1, 2, 3, 3, 3, 3]))\nprint(duplicate([1, 2, 3, 4, 5, 5, 5, 5, 5, 5, 5]))"
    },
    {
      "rank": 47,
      "score": 8.0,
      "candidate": "def duplicate(arr):\n    hash = {}\n    for i in arr:\n        if i in hash:\n            return True\n        hash[i] = True\n    return False\n\n\ndef main():\n    print(duplicate([1, 1, 2, 2, 3, 3]))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 48,
      "score": 8.0,
      "candidate": "def contains_duplicate(array):\n    seen = set()\n    for num in array:\n        if num in seen:\n            return True\n        seen.add(num)\n    return False\n\n\nassert contains_duplicate([3, 2, 1, 4, 5, 2]) == True\nassert contains_duplicate([1, 2, 3, 4]) == False\nassert contains_duplicate([1, 2, 3, 4, 5]) == True"
    },
    {
      "rank": 49,
      "score": 8.0,
      "candidate": "def checkDuplicate(arr):\n    # Write your code here\n    hash_table = {}\n    for i in arr:\n        if i in hash_table.keys():\n            return True\n        else:\n            hash_table[i] = 1\n    return False\n\nprint(checkDuplicate([1, 2, 3, 1, 2, 3]))"
    },
    {
      "rank": 50,
      "score": 8.0,
      "candidate": "def check_duplicate(arr):\n    seen = set()\n    for num in arr:\n        if num in seen:\n            return True\n        else:\n            seen.add(num)\n\n\nif __name__ == '__main__':\n    arr = [3, 2, 2, 4, 2, 3, 1]\n    print(check_duplicate(arr))"
    },
    {
      "rank": 51,
      "score": 8.0,
      "candidate": "class Solution(object):\n    def containsDuplicate(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: bool\n        \"\"\"\n        nums.sort()\n        if nums[0]!= nums[1]:\n            return True\n        return False"
    },
    {
      "rank": 52,
      "score": 8.0,
      "candidate": "def containsDuplicate(arr):\n    seen = set()\n    for i in arr:\n        if i in seen:\n            return True\n        else:\n            seen.add(i)\n    return False\n\n\narr = [1, 2, 3, 4, 5, 1, 4, 5]\nprint(containsDuplicate(arr))"
    },
    {
      "rank": 53,
      "score": 8.0,
      "candidate": "def contains_duplicate(arr):\n    for i in range(0, len(arr)):\n        if arr[arr[i] - 1]!= arr[i]:\n            return True\n    return False\n\n\nif __name__ == '__main__':\n    print(contains_duplicate([1, 2, 3, 2, 3]))\n    print(contains_duplicate([1, 2, 3, 2, 3, 3]))\n    print(contains_duplicate([1, 2, 3, 2, 3, 3, 4, 5]))\n    print(contains_duplicate([1, 2, 3, 2, 3, 3, 4, 5]))\n    print(contains_duplicate([1, 2, 3, 2, 3, 3, 4, 5, 6, 7, 8, 9, 9, 9]))"
    },
    {
      "rank": 54,
      "score": 8.0,
      "candidate": "def containsDuplicate(arr):\n    # Write your code here\n    d = {}\n    for i in arr:\n        if i in d.keys():\n            return True\n        else:\n            d[i] = 1\n    return False\n\nprint(containsDuplicate([1,2,3,4,5]))"
    },
    {
      "rank": 55,
      "score": 8.0,
      "candidate": "def contains_duplicate(nums):\n    for i in nums:\n        if nums.count(i) > 1:\n            return True\n\n    return False\n\n\nif __name__ == '__main__':\n    nums = [1, 2, 2, 3, 3, 3, 4, 4, 4, 5, 5, 5]\n\n    print(contains_duplicate(nums))"
    },
    {
      "rank": 56,
      "score": 8.0,
      "candidate": "def duplicate_element(arr):\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] == arr[j]:\n                return True\n    return False\n\n\nif __name__ == \"__main__\":\n    arr = [2, 4, 3, 5, 1]\n    print(duplicate_element(arr))\n\n    arr = [2, 3, 3, 2, 2]\n    print(duplicate_element(arr))\n\n    arr = [1, 1, 1]\n    print(duplicate_element(arr))\n\n    arr = [1, 1, 1]\n    print(duplicate_element(arr))\n\n    arr = [1, 1, 1, 2]\n    print(duplicate_element(arr))"
    },
    {
      "rank": 57,
      "score": 8.0,
      "candidate": "def contains_duplicate(nums):\n    # write your code here\n    for i in nums:\n        if nums.count(i) > 1:\n            return True\n    return False\n\n\ndef main():\n    print(contains_duplicate([1, 2, 3, 4, 5]))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 58,
      "score": 8.0,
      "candidate": "class Solution:\n    def containsDuplicate(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: bool\n        \"\"\"\n        if len(nums) == 0:\n            return False\n        if len(nums) == 1:\n            return True\n\n        hash_map = {}\n        for num in nums:\n            if num in hash_map:\n                return True\n            hash_map[num] = 1\n        return False\n\n\nif __name__ == \"__main__\":\n    assert Solution().containsDuplicate([1, 2, 3, 3, 4]) == True"
    },
    {
      "rank": 59,
      "score": 8.0,
      "candidate": "def containsDuplicate(arr):\n    return arr.count(arr[0]) > 1\n\n\narr = [1, 1, 2, 2, 3, 3, 4, 4, 4, 4]\nprint(containsDuplicate(arr))"
    },
    {
      "rank": 60,
      "score": 8.0,
      "candidate": "def duplicate(arr):\n    arr.sort()\n    for i in range(len(arr)-1):\n        if arr[i] == arr[i+1]:\n            return True\n    return False\n\n\nprint(duplicate([3, 2, 3, 1, 1]))\nprint(duplicate([3, 2, 3, 1, 2]))\nprint(duplicate([3, 2, 3, 4, 5]))"
    },
    {
      "rank": 61,
      "score": 8.0,
      "candidate": "def containsDuplicate(nums):\n    if len(nums) < 2:\n        return False\n    for i in range(len(nums)):\n        if nums[nums[i] - 1] == nums[i]:\n            return True\n    return False\n\n\nprint(containsDuplicate([1, 2, 3, 4, 5, 6]))\nprint(containsDuplicate([1, 2, 3, 4, 5, 6, 7, 8, 9]))"
    },
    {
      "rank": 62,
      "score": 8.0,
      "candidate": "def contains_duplicate(nums):\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] == nums[j]:\n                return True\n    return False\n\nprint(contains_duplicate([1,2,3,1,2,4,3]))\nprint(contains_duplicate([1,1,1,2,2,2,3,3,3,4,4,5]))"
    },
    {
      "rank": 63,
      "score": 8.0,
      "candidate": "def contains_duplicate(nums):\n    if len(nums) < 2:\n        return False\n\n    prev = nums[0]\n    for num in nums[1:]:\n        if num == prev:\n            return True\n        prev = num\n\n    return False\n\n\nif __name__ == '__main__':\n    assert contains_duplicate([0, 1, 2, 3, 4, 5, 5, 5, 5, 6, 7, 8, 8, 8]) == True\n    assert contains_duplicate([1, 2, 3, 4, 5, 5, 5, 6, 7, 8, 8, 8]) == False"
    },
    {
      "rank": 64,
      "score": 8.0,
      "candidate": "def find_duplicate(arr):\n    seen = {}\n\n    for i in arr:\n        if i in seen:\n            return True\n        seen[i] = 1\n\n    return False\n\nif __name__ == \"__main__\":\n    print(find_duplicate([1, 2, 3, 4, 4]))\n    print(find_duplicate([1, 2, 3, 4, 4, 5]))"
    },
    {
      "rank": 65,
      "score": 8.0,
      "candidate": "def contains_duplicate(arr):\n    arr_set = set(arr)\n    return len(arr_set)!= len(arr)\n\n\nprint(contains_duplicate([1, 1, 2, 2, 3, 3, 4]))"
    },
    {
      "rank": 66,
      "score": 8.0,
      "candidate": "def find_duplicate(arr):\n    arr.sort()\n    for i in range(len(arr) - 1):\n        if arr[i] == arr[i + 1]:\n            return True\n    return False\n\narr = [1,2,3,4,4,5,5,6,7]\nprint(find_duplicate(arr))"
    },
    {
      "rank": 67,
      "score": 8.0,
      "candidate": "def contains_duplicate(nums):\n    # write your code here\n    return len(set(nums))!= len(nums)\n\n\nnums = [1, 2, 3, 3, 4, 4, 4, 5]\nprint(contains_duplicate(nums))"
    },
    {
      "rank": 68,
      "score": 8.0,
      "candidate": "class Solution:\n    def containsDuplicate(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: bool\n        \"\"\"\n        if not nums:\n            return False\n\n        nums.sort()\n        for i in range(len(nums)-1):\n            if nums[i] == nums[i+1]:\n                return True\n\n        return False"
    },
    {
      "rank": 69,
      "score": 8.0,
      "candidate": "def contains_duplicate(arr):\n    if len(arr) < 2:\n        return False\n\n    for i in range(len(arr)):\n        if arr[i] in arr[1:]:\n            return True\n    return False\n\n\nif __name__ == \"__main__\":\n    print(contains_duplicate([1, 2, 3, 4, 5]))"
    },
    {
      "rank": 70,
      "score": 8.0,
      "candidate": "def contains_duplicate(arr):\n    # Write your code here\n    arr.sort()\n    for i in range(len(arr)-1):\n        if arr[i] == arr[i+1]:\n            return True\n    return False\n\n\narr = [1, 2, 3, 4, 5, 6, 7]\nprint(contains_duplicate(arr))"
    },
    {
      "rank": 71,
      "score": 8.0,
      "candidate": "def contains_duplicate(arr):\n    if len(arr) <= 1:\n        return False\n\n    for i in range(len(arr)):\n        if arr[i] in arr[i+1:]:\n            return True\n\n    return False\n\nprint(contains_duplicate([1, 2, 3, 4, 5, 1, 2, 3, 4, 5]))\nprint(contains_duplicate([1, 2, 3, 4, 5]))"
    },
    {
      "rank": 72,
      "score": 8.0,
      "candidate": "def contains_duplicate(arr):\n    if len(arr) < 2:\n        return False\n\n    hash_map = {}\n\n    for num in arr:\n        if num in hash_map:\n            return True\n        else:\n            hash_map[num] = True\n\n    return False"
    },
    {
      "rank": 73,
      "score": 8.0,
      "candidate": "def containsDuplicate(arr):\n    if len(arr) <= 1:\n        return False\n    seen = set()\n    for num in arr:\n        if num in seen:\n            return True\n        else:\n            seen.add(num)\n    return False"
    },
    {
      "rank": 74,
      "score": 8.0,
      "candidate": "def find_duplicate(nums):\n    # Write your code here\n    nums.sort()\n    for i in range(1,len(nums)):\n        if nums[i]==nums[i-1]:\n            return True\n    return False"
    },
    {
      "rank": 75,
      "score": 8.0,
      "candidate": "def containsDuplicate(arr):\n    seen = {}\n    for x in arr:\n        if x in seen:\n            return True\n        else:\n            seen[x] = 1\n    return False\n\nprint(containsDuplicate([1,2,3,4,5,6,7]))\nprint(containsDuplicate([1,2,3,4,5,6]))"
    },
    {
      "rank": 76,
      "score": 8.0,
      "candidate": "def containsDuplicate(nums):\n    for i in range(len(nums)):\n        if nums[i] in nums[:i]:\n            return True\n    return False\n\n\nprint(containsDuplicate([1, 2, 3, 4, 2, 2]))\nprint(containsDuplicate([1, 2, 3, 4, 2, 3, 2, 1]))"
    },
    {
      "rank": 77,
      "score": 8.0,
      "candidate": "def duplicate_element(arr):\n    return len(set(arr))!= len(arr)\n\nprint(duplicate_element([1, 2, 3, 4, 5]))"
    },
    {
      "rank": 78,
      "score": 8.0,
      "candidate": "def containsDuplicate(nums):\n    # Write your code here\n    return len(set(nums))!= len(nums)\n\nnums = [1,2,3,4,5,5]\nprint(containsDuplicate(nums))"
    },
    {
      "rank": 79,
      "score": 8.0,
      "candidate": "class Solution:\n    def containsDuplicate(self, nums):\n        if len(nums) <= 1:\n            return False\n\n        hash_map = {}\n        for num in nums:\n            if num in hash_map:\n                return True\n            else:\n                hash_map[num] = True\n        return False\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.containsDuplicate([1,2,3,4]))"
    },
    {
      "rank": 80,
      "score": 8.0,
      "candidate": "def find_duplicate(arr):\n    d = {}\n    for num in arr:\n        if num in d:\n            return True\n        else:\n            d[num] = 1\n    return False\n\nprint(find_duplicate([1, 2, 3, 4, 5]))\nprint(find_duplicate([1, 2, 3, 4, 5, 6, 7, 8, 9]))\nprint(find_duplicate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))"
    },
    {
      "rank": 81,
      "score": 8.0,
      "candidate": "class Solution(object):\n    def containsDuplicate(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: bool\n        \"\"\"\n        if len(nums) <= 1:\n            return False\n        seen = {}\n        for num in nums:\n            if num in seen:\n                return True\n            else:\n                seen[num] = True\n        return False\n\n\nif __name__ == \"__main__\":\n    assert Solution().containsDuplicate([1, 2, 3, 4, 3, 2]) == True\n    assert Solution().containsDuplicate([1, 2, 3, 4]) == False\n    assert Solution().containsDuplicate([1, 2, 3, 1, 4]) == True"
    },
    {
      "rank": 82,
      "score": 8.0,
      "candidate": "def containsDuplicate(arr):\n    dict = {}\n    for i in arr:\n        if i in dict:\n            return True\n        else:\n            dict[i] = True\n    return False\n\n\nprint(containsDuplicate([1, 2, 3, 4, 5]))\nprint(containsDuplicate([1, 2, 3, 4, 5, 6, 7]))\nprint(containsDuplicate([1, 2, 3, 4, 5, 6, 7, 8]))"
    },
    {
      "rank": 83,
      "score": 7.0,
      "candidate": "def contains_duplicate(arr):\n    seen = set()\n    for i in arr:\n        if i in seen:\n            return True\n        seen.add(i)\n    return False\n\nprint(contains_duplicate([1,2,3,4,2,3]))"
    },
    {
      "rank": 84,
      "score": 7.0,
      "candidate": "def check_duplicate(arr):\n    dic = {}\n    for i in arr:\n        if i in dic:\n            return True\n        else:\n            dic[i] = 1\n    return False\n\nprint(check_duplicate([1, 2, 3, 2, 1]))\nprint(check_duplicate([1, 2, 3, 2, 1, 2, 3, 3]))"
    },
    {
      "rank": 85,
      "score": 7.0,
      "candidate": "def containsDuplicate(nums):\n    if len(nums) < 2:\n        return False\n    for i in nums:\n        if nums.count(i) > 1:\n            return True\n    return False\n\n\nprint(containsDuplicate([1, 2, 3, 4, 5]))\nprint(containsDuplicate([1, 2, 3, 5, 4, 3]))"
    },
    {
      "rank": 86,
      "score": 6.0,
      "candidate": "class Solution:\n    def containsDuplicate(self, nums: List[int]) -> bool:\n        return len(nums)!= len(set(nums))"
    },
    {
      "rank": 87,
      "score": 1.0,
      "candidate": "def contains_duplicate(nums):\n    # write your code here\n    return len(set(nums))!= len(nums)"
    },
    {
      "rank": 88,
      "score": 1.0,
      "candidate": "def check_duplicate_element(arr):\n    for i in range(len(arr)):\n        if arr[i] in arr[:i]:\n            return True\n    return False\n\n\nprint(check_duplicate_element([1, 2, 3, 4, 4, 5]))\nprint(check_duplicate_element([1, 2, 3, 4, 4, 5]))"
    },
    {
      "rank": 89,
      "score": 1.0,
      "candidate": "def contains_duplicate(array):\n    \"\"\"\n    :type array: List[int]\n    :rtype: bool\n    \"\"\"\n    if len(array) <= 1:\n        return False\n    for i in range(len(array) - 1):\n        if array[i] == array[i + 1]:\n            return True\n    return False\n\n\nif __name__ == '__main__':\n    assert contains_duplicate([1, 2, 3, 4, 5, 6]) == True\n    assert contains_duplicate([1, 2, 3, 4, 5]) == False\n    assert contains_duplicate([1, 2, 3, 4, 5, 1]) == True"
    },
    {
      "rank": 90,
      "score": 1.0,
      "candidate": "class Solution(object):\n    def containsDuplicate(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: bool\n        \"\"\"\n        return len(set(nums)) == len(nums)\n\na = Solution()\nprint(a.containsDuplicate([1,1,2,2,3,3,4,4,4,5,5,5,6,6,6,7,7,7,8,8,8,9,9,9,10,10,11,11,11,12,12,12,13,13,13,14,14,14,15,15,15,15,16,16,16,16,16,17,17,17,17,17,18,18,18,19,19,19,19,19,20,20,20,21,21,21,22,22,22,23,23,23,23,24,24,24,25,25,25,26,26,26,27,27,27,28,28,29,29,30,30,31,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32"
    },
    {
      "rank": 91,
      "score": 1.0,
      "candidate": "def containsDuplicate(nums):\n    # Write your code here\n    hashmap = {}\n    for num in nums:\n        if num in hashmap:\n            return True\n        else:\n            hashmap[num] = True\n    return False"
    },
    {
      "rank": 92,
      "score": 1.0,
      "candidate": "# O(n) time | O(1) space\ndef check_duplicate_number(nums):\n    if len(nums) == 0:\n        return False\n\n    for i in nums:\n        if nums[abs(nums[i]) - 1] >= 0:\n            return True\n\n    return False\n\n\nprint(check_duplicate_number([1, 2, 3, 4, 5]))\nprint(check_duplicate_number([2, 3, 4, 1, 2, 4, 5]))"
    },
    {
      "rank": 93,
      "score": 1.0,
      "candidate": "# Time: O(n)\n# Space: O(1)\n\ndef contains_duplicate(arr):\n    # Write your code here\n    # return len(set(arr)) == len(arr)\n    return set(arr)!= set(arr)\n\nprint(contains_duplicate([1, 2, 3, 3, 1, 2, 4]))\n\n# Time: O(n)\n# Space: O(1)\n\ndef contains_duplicate(arr):\n    # write your code here\n    if not arr:\n        return False\n    seen = {}\n    for num in arr:\n        if num in seen:\n            return True\n        seen[num] = True\n    return False\n\nprint(contains_duplicate([1, 2, 3, 3, 1, 2, 4]))\n\n# Time: O(n)\n# Space: O(1)\n\ndef contains_duplicate(arr):\n    # write your code here\n    if not arr:\n        return False\n    seen = {}\n    for num in arr:\n        if num in seen:\n            return True\n        seen[num] = True\n    return False\n\nprint(contains_duplicate([1, 2, 3, 3, 1, 2, 4]))\n\n# Time: O(n)\n# Space: O(1)\n\ndef contains_duplicate(arr):\n    # write your code here\n    seen = {}\n    for num in arr:\n        if num in seen:\n            return True\n        seen[num] = True\n    return False\n\nprint(contains_duplicate([1, 2, 3, 3, 1, 2, 4]))\n\n# Time: O(n)\n# Space: O(1)\n\ndef contains_duplicate(arr):\n    # write your code here\n    if not arr:\n        return False\n    seen = {}\n    for num in arr:\n        if num in seen:\n            return True\n        seen[num] = True\n    return False\n\nprint(contains_duplicate([1, 2, 3, 3, 1, 2, 4]))\n\n# Time: O(n)\n# Space: O(1)\n\ndef contains_duplicate(arr):\n    # write your code here\n    seen = {}"
    },
    {
      "rank": 94,
      "score": 1.0,
      "candidate": "def contains_duplicate(arr):\n    # Fill this in.\n    return False\n\n\nprint(contains_duplicate([1, 1, 2, 2, 3]))"
    },
    {
      "rank": 95,
      "score": 1.0,
      "candidate": "def contains_duplicate(nums):\n    for i in range(len(nums)):\n        if nums[nums[i] - 1]!= nums[i]:\n            return True\n    return False\n\n\nif __name__ == '__main__':\n    assert contains_duplicate([1, 2, 3, 4]) is True\n    assert contains_duplicate([1, 2, 3, 4, 5, 6]) is False\n    assert contains_duplicate([1, 2, 3, 4, 5, 6, 7]) is True\n    assert contains_duplicate([1, 2, 3, 4, 5, 6, 7, 8, 9]) is False\n    assert contains_duplicate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) is True"
    },
    {
      "rank": 96,
      "score": 1.0,
      "candidate": "def find_duplicate_num(nums):\n    # write your code here\n    for num in nums:\n        if nums.count(num) > 1:\n            return True\n    return False\n\n\nif __name__ == \"__main__\":\n    assert find_duplicate_num([1, 2, 3, 4]) == True\n    assert find_duplicate_num([1, 2, 3, 4, 5]) == False\n    assert find_duplicate_num([1, 2, 3, 4, 5, 6]) == True\n    assert find_duplicate_num([1, 2, 3, 4, 5, 6, 7, 8]) == False"
    },
    {
      "rank": 97,
      "score": 1.0,
      "candidate": "def check_duplicate(arr):\n    for i in range(len(arr)):\n        if arr[i] == arr[i+1]:\n            return True\n    return False\n\n\narr = [1, 2, 3, 3, 1, 2, 3, 3, 1, 2, 3, 3, 1, 2, 3, 3, 1, 2, 3, 3, 1, 2, 3, 3, 1, 2, 3, 3, 1, 2, 3, 3, 1, 2, 3, 3, 1, 2, 3, 3, 1, 2, 3, 3, 1, 2, 3, 3, 1, 2, 3, 3, 1, 2, 3, 3, 1, 2, 3, 3, 1, 2, 3, 3, 1, 2, 3, 3, 1, 2, 3, 3, 1, 2, 3, 3, 1, 2, 3, 3, 1, 2, 3, 3, 1, 2, 3, 3, 1, 2, 3, 3, 1, 2, 3, 3, 1, 2, 3, 3, 1, 2, 3, 3, 1, 2, 3, 3, 1, 2, 3, 3, 1, 2, 3, 3, 1, 2, 3, 3, 1, 2, 3, 3, 1, 2, 3, 3, 1, 2, 3, 3, 1, 2, 3, 3, 1, 2, 3, 3, 1, 2, 3, 3, 1, 2, 3, 3, 1, 2, 3, 3, 1, 2, 3, 3, 1, 2, 3, 3, 1, 2, 3, 3, 1, 2, 3, 3, 1, 2, 3, 3, 1, 2, 3, 3, 1, 2, 3, 3, 1, 2, 3, 3, 1, 2, 3, 3, 1, 2, 3, 3, 1, 2, 3, 3, 1, 2, 3, 3, 1, 2, 3, 3, 1, 2, 3, 3, 1, 2, 3, 3, 1, 2, 3, 3, 1, 2, 3, 3, 1, 2, 3, 3, 1, 2, 3, 3, 1, 2, 3"
    },
    {
      "rank": 98,
      "score": 1.0,
      "candidate": "def contains_duplicate(arr):\n    \"\"\"\n    :type arr: List[int]\n    :rtype: bool\n    \"\"\"\n    # Time Complexity: O(n)\n    # Space Complexity: O(1)\n    d = {}\n    for num in arr:\n        if num in d:\n            return True\n        else:\n            d[num] = 1\n    return False\n\n\nif __name__ == \"__main__\":\n    print(contains_duplicate([1, 2, 3, 4, 5, 6]))\n    print(contains_duplicate([1, 2, 3, 4, 5, 6, 7]))\n    print(contains_duplicate([1, 2, 3, 4, 5, 6, 7, 8]))\n    print(contains_duplicate([1, 2, 3, 4, 5, 6, 7, 8, 9]))\n    print(contains_duplicate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]))"
    },
    {
      "rank": 99,
      "score": 1.0,
      "candidate": "def contains_duplicate(arr):\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(1)\n    \"\"\"\n    for i in arr:\n        if arr.count(i) > 1:\n            return True\n    return False\n\n\nif __name__ == \"__main__\":\n    assert contains_duplicate([1, 2, 3, 4, 5, 6, 7, 8, 9]) is True"
    },
    {
      "rank": 100,
      "score": 1.0,
      "candidate": "def contains_duplicate(nums):\n    for num in nums:\n        if nums.count(num) > 1:\n            return True\n    return False\n\n\nif __name__ == \"__main__\":\n    assert contains_duplicate([1, 2, 2, 3, 4, 5, 4, 4, 4, 5, 3, 3, 2, 1])\n    assert contains_duplicate([1, 2, 3, 4, 5, 4, 4, 4, 5, 3, 3, 2, 1])\n    assert not contains_duplicate([1, 2, 3, 4, 5, 4, 4, 4, 5, 3, 3, 2, 1])"
    }
  ]
}