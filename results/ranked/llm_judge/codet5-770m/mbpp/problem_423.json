{
  "timestamp": "2025-09-14T15:34:18.199848",
  "method": "improved_llm_judge",
  "judge_model": "codellama/CodeLlama-7b-Python-hf",
  "target_model": "codet5-770m",
  "dataset": "mbpp",
  "problem_number": 423,
  "total_candidates": 100,
  "results": [
    {
      "rank": 1,
      "score": 10.0,
      "candidate": "def match_string(string):\n    return any(string.startswith(char) for char in 'abc')"
    },
    {
      "rank": 2,
      "score": 10.0,
      "candidate": "def match(str):\n    return str.find(\"a\")!= -1 or str.find(\"b\")!= -1\n\n\ndef test_match():\n    assert match(\"aab\") == True\n    assert match(\"ab\") == True\n    assert match(\"abcd\") == True\n    assert match(\"aabcd\") == True\n    assert match(\"abcdab\") == True\n    assert match(\"abcdabcd\") == False"
    },
    {
      "rank": 3,
      "score": 10.0,
      "candidate": "def match(string):\n    return string.startswith(\"a\") and string.endswith(\"b\")\n\n\nprint(match(\"abcd\"))\nprint(match(\"abcdab\"))\nprint(match(\"abcdabcd\"))\nprint(match(\"abcdabcdabcd\"))"
    },
    {
      "rank": 4,
      "score": 10.0,
      "candidate": "def find_a_in_b(s):\n    return s.find('a')!= -1\n\nprint(find_a_in_b('aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"
    },
    {
      "rank": 5,
      "score": 10.0,
      "candidate": "def has_a_b(string):\n    return string.find('a') == 0 and string.find('b') == 0\n\n\nprint(has_a_b('abc'))\nprint(has_a_b('aba'))\nprint(has_a_b('abcd'))"
    },
    {
      "rank": 6,
      "score": 10.0,
      "candidate": "def match_a(s):\n    return s.startswith('a') and s.endswith('b')\n\n\nprint(match_a('abc'))\nprint(match_a('abcba'))\nprint(match_a('aabccb'))\nprint(match_a('abcbaabcc'))\nprint(match_a('abcabcba'))\nprint(match_a('abcbaabcc'))"
    },
    {
      "rank": 7,
      "score": 10.0,
      "candidate": "def match(str):\n    return str.find(\"a\")!= -1 and str.find(\"b\")!= -1"
    },
    {
      "rank": 8,
      "score": 10.0,
      "candidate": "def match_b(s: str) -> bool:\n    if s[0]!= \"a\":\n        return False\n    for i in range(1, len(s)):\n        if s[i]!= \"b\":\n            return False\n    return True\n\n\nif __name__ == \"__main__\":\n    print(match_b(\"abcd\"))"
    },
    {
      "rank": 9,
      "score": 10.0,
      "candidate": "def match(string):\n    return string.startswith(\"a\") and string.endswith(\"b\")\n\n\nif __name__ == '__main__':\n    assert match(\"abba\") == True\n    assert match(\"abbba\") == False"
    },
    {
      "rank": 10,
      "score": 10.0,
      "candidate": "def match_b_string(s):\n    return s.startswith('a') and s.endswith('b')\n\nprint(match_b_string('abc'))"
    },
    {
      "rank": 11,
      "score": 10.0,
      "candidate": "def match_string(string):\n    return string.startswith('a') and string.endswith('b')"
    },
    {
      "rank": 12,
      "score": 10.0,
      "candidate": "def match(string):\n    if string.startswith('a'):\n        return True\n    return False"
    },
    {
      "rank": 13,
      "score": 10.0,
      "candidate": "def match(s):\n    return 'a' in s and 'b' in s\n\nprint(match('abcd'))\nprint(match('abcdabcdabcd'))\nprint(match('abcdabcdabcdabcd'))\nprint(match('abcdabcdabcdabcdabcdabcd'))\nprint(match('aabcdabcdabcdabcdabcdabcd'))\nprint(match('aabcdabcdabcdabcdabcdabcdabcdabcdabcdabcd'))\nprint(match('aabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcd'))\nprint(match('abcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcd'))\nprint(match('abcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcd'))\nprint(match('abcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdab"
    },
    {
      "rank": 14,
      "score": 10.0,
      "candidate": "def contains_a(string):\n    return string.find('a')!= -1\n\nprint(contains_a('ababccccc'))\nprint(contains_a('ababccccc'))"
    },
    {
      "rank": 15,
      "score": 8.0,
      "candidate": "def match(string):\n    return string.startswith('a') and string.endswith('b')\n\nprint(match('abc'))\nprint(match('abcab'))\nprint(match('abccc'))\nprint(match('abccb'))\nprint(match('aabcc'))\nprint(match('aabccab'))\nprint(match('aabccabccc'))\nprint(match('aabccabcccab'))\nprint(match('abccabcccabccab'))\nprint(match('aabccabcccabccab'))"
    },
    {
      "rank": 16,
      "score": 8.0,
      "candidate": "def match_b(string):\n    if string.startswith('a'):\n        return True\n    return False\n\n\nif __name__ == \"__main__\":\n    print(match_b(\"abcabcbb\"))\n    print(match_b(\"abcab\"))\n    print(match_b(\"abc\"))"
    },
    {
      "rank": 17,
      "score": 8.0,
      "candidate": "def has_b(string):\n    return string.find('a') > -1 and string.find('b') > -1"
    },
    {
      "rank": 18,
      "score": 8.0,
      "candidate": "def has_a_b(str):\n    return str.find(\"a\")!= -1 and str.find(\"b\")!= -1\n\n\ndef has_a_b_match(str):\n    return has_a_b(str) and str.find(\"a\")!= -1 and str.find(\"b\")!= -1\n\n\nif __name__ == \"__main__\":\n    print(has_a_b_match(\"aba\"))\n    print(has_a_b_match(\"abab\"))\n    print(has_a_b_match(\"ababba\"))"
    },
    {
      "rank": 19,
      "score": 8.0,
      "candidate": "def is_a_followed_by_b(s):\n    return 'a' in s and any(b in s for b in 'ab')\n\n\nprint(is_a_followed_by_b('abba'))\nprint(is_a_followed_by_b('abab'))\nprint(is_a_followed_by_b('ababa'))\nprint(is_a_followed_by_b('abaabaababaababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababab"
    },
    {
      "rank": 20,
      "score": 8.0,
      "candidate": "def match_string(string):\n    return string.startswith('a') and string.endswith('b')"
    },
    {
      "rank": 21,
      "score": 8.0,
      "candidate": "def is_a_followed_by_b(word):\n    return word.startswith('a') and word.endswith('b')\n\n\ndef main():\n    assert is_a_followed_by_b('abc') is True\n    assert is_a_followed_by_b('abcd') is False\n    assert is_a_followed_by_b('abcb') is False\n    assert is_a_followed_by_b('abcba') is True\n    assert is_a_followed_by_b('abcbaab') is True\n    assert is_a_followed_by_b('abcbaabab') is True\n    assert is_a_followed_by_b('abcbaabababab') is True\n    assert is_a_followed_by_b('abcbaabababababababab') is False\n    assert is_a_followed_by_b('abcbaababababababababababab') is False\n    assert is_a_followed_by_b('abcbaabababababababababababababab') is True\n    assert is_a_followed_by_b('abcbaababababababababababababababab') is False\n    assert is_a_followed_by_b('abcbaabababababababababababababababab') is True\n    assert is_a_followed_by_b('abcbaababababababababababababababababab') is False\n    assert is_a_followed_by_b('abcbaababababababababababababababababababababab') is True\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 22,
      "score": 8.0,
      "candidate": "def string_contains_a(string):\n    return \"a\" in string\n\n\nprint(string_contains_a(\"abcabcabcabcabcabcabcabcabcabcabcabcabcabc\"))"
    },
    {
      "rank": 23,
      "score": 8.0,
      "candidate": "def match_ab(s):\n    return s.count(\"a\") > 0 and s.count(\"b\") > 0\n\nprint(match_ab(\"abcabcbb\"))\nprint(match_ab(\"abcd\"))\nprint(match_ab(\"abcabcd\"))\nprint(match_ab(\"abcabcbb\"))\nprint(match_ab(\"abc\"))\nprint(match_ab(\"\"))"
    },
    {
      "rank": 24,
      "score": 8.0,
      "candidate": "def match_b(s):\n    return s.find('a') == 0 and s.count('b') == 1\n\ndef test_match_b():\n    assert match_b('aabcb') == True\n    assert match_b('abbbc') == False\n    assert match_b('abbbcc') == False\n    assert match_b('aabbbcc') == False"
    },
    {
      "rank": 25,
      "score": 8.0,
      "candidate": "def match_a_b(s):\n    return s.find('a') == 0 and s.find('b')!= -1\n\n\nprint(match_a_b('abbaab'))\nprint(match_a_b('abbaabcbb'))\nprint(match_a_b('abbaabcbbcbb'))\nprint(match_a_b('abbaabcbbcbb'))\nprint(match_a_b('abbaabcbbcbbcbb'))\nprint(match_a_b('abbaabcbbcbbcbb'))"
    },
    {
      "rank": 26,
      "score": 8.0,
      "candidate": "def find_a(string):\n    for i in range(len(string)):\n        if string[i] == 'a' and string[i + 1] == 'b':\n            return True\n    return False\n\n\ndef main():\n    print(find_a('abc'))\n    print(find_a('abcab'))\n    print(find_a('abcabcd'))\n    print(find_a('abcabcdab'))\n    print(find_a('abcabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcd'))\n    print(find_a('abcabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcd"
    },
    {
      "rank": 27,
      "score": 8.0,
      "candidate": "def match(s):\n    return s.startswith('a') and any(s[i:i+2] == 'b' for i in range(0, len(s), 2))"
    },
    {
      "rank": 28,
      "score": 8.0,
      "candidate": "def match_a_and_b(string):\n    a_count = 0\n    b_count = 0\n    for char in string:\n        if char == 'a':\n            a_count += 1\n        elif char == 'b':\n            b_count += 1\n    if a_count == 1 and b_count == 1:\n        return True\n    else:\n        return False"
    },
    {
      "rank": 29,
      "score": 8.0,
      "candidate": "def match(s):\n    return s.startswith(\"a\") and s.endswith(\"b\")\n\n\nassert match(\"aabbbc\") is True\nassert match(\"abbbc\") is False\nassert match(\"abbbb\") is False"
    },
    {
      "rank": 30,
      "score": 8.0,
      "candidate": "def matches(s: str) -> bool:\n    return s.startswith('a') and s.endswith('b')"
    },
    {
      "rank": 31,
      "score": 8.0,
      "candidate": "def check_pattern(string):\n    pattern = r'[a-zA-Z0-9]+[bB]'\n    return re.search(pattern, string)\n\n\ndef check_pattern2(string):\n    pattern = r'[a-zA-Z0-9]+[bB][a-zA-Z0-9]+'\n    return re.search(pattern, string)\n\n\nif __name__ == '__main__':\n    print(check_pattern(\"aaaaaabbbb\"))\n    print(check_pattern(\"aabbbbb\"))\n    print(check_pattern(\"aabb\"))\n    print(check_pattern(\"abc\"))\n    print(check_pattern(\"aabbbbbb\"))\n    print(check_pattern(\"aaaaaabbbb\"))\n    print(check_pattern(\"aabbbbbb\"))\n    print(check_pattern(\"abc\"))\n    print(check_pattern(\"aabb\"))\n    print(check_pattern(\"aabbbbbb\"))"
    },
    {
      "rank": 32,
      "score": 8.0,
      "candidate": "def has_b(s):\n    return s.startswith('a') and s.endswith('b')\n\nprint(has_b('ababa'))\nprint(has_b('ababaab'))\nprint(has_b('ababababa'))\nprint(has_b('abababababab'))\nprint(has_b('ababababababab'))"
    },
    {
      "rank": 33,
      "score": 8.0,
      "candidate": "def match(string):\n    return string.count('a') == len(string) - string.count('b')\n\n\nprint(match('aabbbbbb'))"
    },
    {
      "rank": 34,
      "score": 8.0,
      "candidate": "def match_b(string):\n    if string[0] == \"a\" and string[1:].count(\"b\") >= 1:\n        return True\n    else:\n        return False\n\n\nif __name__ == \"__main__\":\n    assert match_b(\"abcd\") == True\n    assert match_b(\"abc\") == False\n    assert match_b(\"abcd\") == False"
    },
    {
      "rank": 35,
      "score": 8.0,
      "candidate": "def is_valid_string(string):\n    return string.find('a') == 0 and string.find('b') == 0\n\nassert is_valid_string(\"aab\") == True\nassert is_valid_string(\"ab\") == False\nassert is_valid_string(\"aba\") == False\nassert is_valid_string(\"abba\") == False\nassert is_valid_string(\"abab\") == True"
    },
    {
      "rank": 36,
      "score": 8.0,
      "candidate": "def has_a(s):\n    return s.find('a')!= -1\n\nprint(has_a('aba'))"
    },
    {
      "rank": 37,
      "score": 8.0,
      "candidate": "def has_a_b(s):\n    return \"a\" in s and \"b\" in s\n\n\nassert has_a_b(\"abcd\") is True\nassert has_a_b(\"abcdabcd\") is True\nassert has_a_b(\"abcdabcdabcd\") is False\nassert has_a_b(\"\") is False\nassert has_a_b(\"abcdabcdabcd\") is False"
    },
    {
      "rank": 38,
      "score": 8.0,
      "candidate": "def match(string: str) -> bool:\n    return string.startswith(\"a\") and string.endswith(\"b\")"
    },
    {
      "rank": 39,
      "score": 8.0,
      "candidate": "import re\n\n\ndef match_a_b(string):\n    return bool(re.match(r\"^a[a-z]+b[0-9]+$\", string))"
    },
    {
      "rank": 40,
      "score": 8.0,
      "candidate": "def is_a_followed_by_b(s):\n    return s.startswith(\"a\") and s.endswith(\"b\")\n\nprint(is_a_followed_by_b(\"abab\"))\nprint(is_a_followed_by_b(\"ababab\"))\nprint(is_a_followed_by_b(\"ababababab\"))\nprint(is_a_followed_by_b(\"abababababab\"))"
    },
    {
      "rank": 41,
      "score": 8.0,
      "candidate": "def match_string(string):\n    return string.startswith(\"a\") and string.endswith(\"b\")\n\n\nassert match_string(\"aaaaaaaa\")\nassert match_string(\"aaaaaaa\")\nassert match_string(\"aaaaa\")\nassert match_string(\"aab\")\nassert match_string(\"aaa\")\nassert not match_string(\"aaab\")\nassert not match_string(\"aba\")\nassert not match_string(\"aaba\")\nassert not match_string(\"aaaba\")\nassert match_string(\"abaab\")\nassert match_string(\"abaaba\")\nassert match_string(\"abaabaab\")\nassert match_string(\"abaabaaba\")\nassert not match_string(\"abaabaabaab\")"
    },
    {
      "rank": 42,
      "score": 8.0,
      "candidate": "def check_string(string):\n    return string.find('a')!= -1 and string.find('b')!= -1"
    },
    {
      "rank": 43,
      "score": 8.0,
      "candidate": "def match_b(str):\n    return str.startswith(\"a\") and str.endswith(\"b\")"
    },
    {
      "rank": 44,
      "score": 8.0,
      "candidate": "def has_a_b(s):\n    return s.startswith('a') and s.endswith('b')"
    },
    {
      "rank": 45,
      "score": 8.0,
      "candidate": "def match(string):\n    return string.find(\"a\")!= -1 and string.find(\"b\")!= -1"
    },
    {
      "rank": 46,
      "score": 8.0,
      "candidate": "def match(str):\n    a = str[0]\n    b = str[1:]\n    return a == \"a\" and b in \"b\"\n\n\nif __name__ == \"__main__\":\n    assert match(\"abc\") == True\n    assert match(\"abab\") == False"
    },
    {
      "rank": 47,
      "score": 8.0,
      "candidate": "def match_string(string):\n    return string.count(\"a\") == len(string) - string.count(\"b\")\n\n\nif __name__ == \"__main__\":\n    assert match_string(\"abbbb\") == True\n    assert match_string(\"abbbbabc\") == False"
    },
    {
      "rank": 48,
      "score": 8.0,
      "candidate": "def has_a_b(string):\n    return string.find(\"a\")!= -1 and string.find(\"b\")!= -1\n\n\nprint(has_a_b(\"aabbbb\"))\nprint(has_a_b(\"abbb\"))\nprint(has_a_b(\"abbbbab\"))\nprint(has_a_b(\"abbbbb\"))\nprint(has_a_b(\"abbbbbb\"))\nprint(has_a_b(\"abbbbbbb\"))\nprint(has_a_b(\"aabbbb\"))\nprint(has_a_b(\"abbbbbbb\"))"
    },
    {
      "rank": 49,
      "score": 8.0,
      "candidate": "def check_a(s):\n    return s.count(\"a\") > 0 and s.count(\"b\") > 0"
    },
    {
      "rank": 50,
      "score": 8.0,
      "candidate": "def match_substring(string, substring):\n    return substring in string"
    },
    {
      "rank": 51,
      "score": 8.0,
      "candidate": "def has_a_b(string: str) -> bool:\n    return any(string.startswith(b) for b in (\"a\", \"b\"))"
    },
    {
      "rank": 52,
      "score": 8.0,
      "candidate": "def is_valid(s):\n    return s.startswith('a') and s.endswith('b')\n\n\nprint(is_valid(\"aabcc\"))\nprint(is_valid(\"aabccb\"))\nprint(is_valid(\"abcc\"))"
    },
    {
      "rank": 53,
      "score": 8.0,
      "candidate": "def is_valid_string(string):\n    return string.startswith('a') and len(string) > 2\n\ndef test_is_valid_string():\n    assert is_valid_string('abc') == True\n    assert is_valid_string('aab') == False\n    assert is_valid_string('abcd') == False\n    assert is_valid_string('abcdab') == False\n    assert is_valid_string('') == False\n    assert is_valid_string('a') == False\n    assert is_valid_string('abcab') == False"
    },
    {
      "rank": 54,
      "score": 8.0,
      "candidate": "def is_valid_word(word):\n    return word.startswith(\"a\") and len(word) > 1"
    },
    {
      "rank": 55,
      "score": 8.0,
      "candidate": "def has_a_b(string):\n    return 'a' in string and 'b' in string\n\n\ndef main():\n    assert has_a_b('aabbbc')\n    assert not has_a_b('aabbbcabbbc')\n    assert not has_a_b('abbbcabbbc')\n    assert has_a_b('abbbcabbbcc')\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 56,
      "score": 8.0,
      "candidate": "def match(s):\n    return s.count('a') + s.count('b') == len(s)\n\n\nprint(match('abcabcbb'))\nprint(match('abccbbb'))\nprint(match('aabccbbb'))\nprint(match('aabccbb'))\nprint(match('aabccbbbab'))\nprint(match('aabccbbbaba'))\nprint(match('abccbbbabaab'))\nprint(match('aabccbbbabaab'))"
    },
    {
      "rank": 57,
      "score": 8.0,
      "candidate": "def match_b(str):\n    return str.count('a') == len(str) - str.count('b')\n\n\nassert match_b('aa') is True\nassert match_b('ab') is True\nassert match_b('aba') is True\nassert match_b('abab') is True\nassert match_b('ababa') is True\nassert match_b('abababa') is True\nassert match_b('abababab') is False\nassert match_b('abababab') is False\nassert match_b('ababababa') is False"
    },
    {
      "rank": 58,
      "score": 8.0,
      "candidate": "def has_a(s):\n    return s.count(\"a\") == 1 and s.count(\"b\") == 1\n\nassert has_a(\"abcd\") == True\nassert has_a(\"abcdab\") == False\nassert has_a(\"abcdabcd\") == False\nassert has_a(\"abcdabcdabcd\") == True\nassert has_a(\"abcdabcdabcdabcd\") == False\nassert has_a(\"abcdabcdabcdabcd\") == True"
    },
    {
      "rank": 59,
      "score": 8.0,
      "candidate": "def is_a_b(s):\n    return s.startswith('a') and s.endswith('b')\n\nprint(is_a_b('abcd'))\nprint(is_a_b('abcdabcd'))\nprint(is_a_b('abcdabcdabcd'))"
    },
    {
      "rank": 60,
      "score": 8.0,
      "candidate": "def match_b(str):\n    if str.count(\"a\") + str.count(\"b\"):\n        return True\n    else:\n        return False\n\n\nprint(match_b(\"aabbbc\"))\nprint(match_b(\"aabbbbbb\"))\nprint(match_b(\"abbbbabbb\"))\nprint(match_b(\"aabbbbbbbb\"))"
    },
    {
      "rank": 61,
      "score": 8.0,
      "candidate": "def match_a_b_string(string):\n    return string.startswith('a') and string.endswith('b')\n\n\nassert match_a_b_string('abc') is True\nassert match_a_b_string('aaaa') is False\nassert match_a_b_string('aaab') is False\nassert match_a_b_string('aaabbb') is True\nassert match_a_b_string('aabbb') is False"
    },
    {
      "rank": 62,
      "score": 8.0,
      "candidate": "def is_a_b(str):\n    if str.count(\"a\") == 1 and str.count(\"b\") == 1:\n        return True\n    else:\n        return False\n\n\nif __name__ == \"__main__\":\n    assert is_a_b(\"aabb\") == True\n    assert is_a_b(\"a\") == True\n    assert is_a_b(\"ab\") == False"
    },
    {
      "rank": 63,
      "score": 8.0,
      "candidate": "def is_a_b(string):\n    return string.find('a')!= -1 and string.find('b')!= -1\n\n\ndef is_a_b_2(string):\n    return string.find('a')!= -1 and string.find('b')!= -1 and string.find('b')!= -1\n\n\nprint(is_a_b('abc'))\nprint(is_a_b_2('abc'))"
    },
    {
      "rank": 64,
      "score": 8.0,
      "candidate": "def is_a_followed_by_one_or_more_b(string):\n    return string.startswith('a') and string.endswith('b')\n\n\nif __name__ == \"__main__\":\n    assert is_a_followed_by_one_or_more_b('ababba')\n    assert not is_a_followed_by_one_or_more_b('ababab')\n    assert not is_a_followed_by_one_or_more_b('ababaa')"
    },
    {
      "rank": 65,
      "score": 8.0,
      "candidate": "def is_a_b(string):\n    return string.count('a') == 1 and string.count('b') == 1"
    },
    {
      "rank": 66,
      "score": 8.0,
      "candidate": "def match(s):\n    return s.count('a') == 1 and s.count('b') >= 1\n\n\nassert match('abcbb')\nassert not match('abcbbab')\nassert match('abcbbabcd')\nassert not match('abcbbabcdab')"
    },
    {
      "rank": 67,
      "score": 8.0,
      "candidate": "def has_a(string):\n    return 'a' in string\n\n\nassert has_a(\"abc\") == True\nassert has_a(\"abcd\") == True\nassert has_a(\"abcdabc\") == False\nassert has_a(\"abcdabcabcd\") == True\nassert has_a(\"abcdabcd\") == False"
    },
    {
      "rank": 68,
      "score": 8.0,
      "candidate": "def is_a_in_string(string):\n    return string.startswith('a') and string.endswith('b')"
    },
    {
      "rank": 69,
      "score": 8.0,
      "candidate": "def matches(string):\n    return bool(string.startswith(\"a\") and string.endswith(\"b\"))\n\n\nassert matches(\"aaabbbb\") == True\nassert matches(\"aaabbbb\") == False\nassert matches(\"aaabbb\") == False\nassert matches(\"aaab\") == False\nassert matches(\"\") == False\nassert matches(\"\") == False"
    },
    {
      "rank": 70,
      "score": 8.0,
      "candidate": "def is_a_followed_by_one_or_more_b(string):\n    return string.startswith(\"a\") and string.endswith(\"b\")\n\nprint(is_a_followed_by_one_or_more_b(\"abc\"))\nprint(is_a_followed_by_one_or_more_b(\"abcd\"))\nprint(is_a_followed_by_one_or_more_b(\"abcdab\"))"
    },
    {
      "rank": 71,
      "score": 8.0,
      "candidate": "def is_a_followed_by_b(string):\n    return string.startswith('a') and any(string[i] == 'b' for i in range(len(string)))\n\nprint(is_a_followed_by_b('ababcbabcbab'))\nprint(is_a_followed_by_b('ababcbabcbabcbababab'))\nprint(is_a_followed_by_b('ababcbabcbabcbababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababab"
    },
    {
      "rank": 72,
      "score": 7.0,
      "candidate": "def matches(str):\n    return str.startswith(\"a\") and str.endswith(\"b\")\n\nprint(matches(\"abcc\"))\nprint(matches(\"abc\"))\nprint(matches(\"aabcc\"))\nprint(matches(\"aaaa\"))\nprint(matches(\"aa\"))"
    },
    {
      "rank": 73,
      "score": 1.0,
      "candidate": "def is_a_followed_by_b(string):\n    return string.startswith('a') and string.endswith('b')\n\n\nassert is_a_followed_by_b('aabbb')\nassert is_a_followed_by_b('aabbbb')\nassert not is_a_followed_by_b('abbb')\nassert not is_a_followed_by_b('abbbbb')\nassert not is_a_followed_by_b('abbbbbbbb')"
    },
    {
      "rank": 74,
      "score": 1.0,
      "candidate": "import re\n\n\ndef match_string(string: str) -> bool:\n    return re.match(r\"^a+b[01]$\", string)"
    },
    {
      "rank": 75,
      "score": 1.0,
      "candidate": "def is_a_ followed_by_one_or_more_b(string):\n    return string.count(\"a\") == 1 and string.count(\"b\") > 1\n\n\ndef is_a_followed_by_one_or_more_b_recursive(string):\n    if string == \"\":\n        return False\n\n    if string[0] == \"a\":\n        return is_a_followed_by_one_or_more_b_recursive(string[1:])\n    elif string[0] == \"b\":\n        return is_a_followed_by_one_or_more_b_recursive(string[1:]) or is_a_followed_by_one_or_more_b(string[1:])\n    else:\n        return False\n\n\nassert is_a_followed_by_one_or_more_b(\"abc\") == True\nassert is_a_followed_by_one_or_more_b(\"abcabcd\") == True\nassert is_a_followed_by_one_or_more_b(\"abcabcdabcd\") == False\nassert is_a_followed_by_one_or_more_b(\"abcdabcdabcd\") == False\nassert is_a_followed_by_one_or_more_b(\"abcdabcdabcd\") == True"
    },
    {
      "rank": 76,
      "score": 1.0,
      "candidate": "def is_valid_string(string):\n    return string[0] == \"a\" and string.count(\"b\") == 1"
    },
    {
      "rank": 77,
      "score": 1.0,
      "candidate": "def is_a_followed_by_b(s):\n    return 'a' in s and 'b' in s\n\n\nassert is_a_followed_by_b('aabbbccc')\nassert not is_a_followed_by_b('aabccb')\nassert is_a_followed_by_b('aaabbbccc')\nassert not is_a_followed_by_b('aaabbbcc')\nassert is_a_followed_by_b('')\nassert not is_a_followed_by_b('aabcccab')"
    },
    {
      "rank": 78,
      "score": 1.0,
      "candidate": "def is_a_followed_by_b(s):\n    return s.startswith('a') and any(b in s for b in 'ab')\n\nprint(is_a_followed_by_b('abcd'))\nprint(is_a_followed_by_b('abcd'))\nprint(is_a_followed_by_b('abcdabcd'))\nprint(is_a_followed_by_b('abcdabcdabcdabcdabcdabcd'))"
    },
    {
      "rank": 79,
      "score": 1.0,
      "candidate": "def matches_a(string):\n    # Your code here\n    return bool(string.find('a')!= -1)\n\n\nif __name__ == '__main__':\n    assert matches_a('abc') == True\n    assert matches_a('ab') == True\n    assert matches_a('abcd') == False\n    assert matches_a('aba') == False\n    assert matches_a('aab') == False\n    assert matches_a('') == True\n    assert matches_a('abcdab') == True\n    assert matches_a('abcabcdab') == True\n    assert matches_a('abcdabcdab') == False"
    },
    {
      "rank": 80,
      "score": 1.0,
      "candidate": "def match_a_and_b(string):\n    return string.startswith('a') and string.endswith('b')\n\n\nassert match_a_and_b('abc') is True\nassert match_a_and_b('abcc') is True\nassert match_a_and_b('abcbb') is True\nassert match_a_and_b('abccab') is False\nassert match_a_and_b('abccabbc') is False\nassert match_a_and_b('abccabbcab') is True\nassert match_a_and_b('abccabbcabcd') is False\nassert match_a_and_b('abccabbcabcdab') is True"
    },
    {
      "rank": 81,
      "score": 1.0,
      "candidate": "def has_a_b(string):\n    return string.startswith(\"a\") and string.endswith(\"b\")\n\n\nassert has_a_b(\"a\")\nassert has_a_b(\"ab\")\nassert has_a_b(\"abcd\")\nassert not has_a_b(\"abab\")\nassert not has_a_b(\"abcc\")\nassert not has_a_b(\"aba\")\nassert not has_a_b(\"abbb\")\nassert not has_a_b(\"abbbb\")\nassert not has_a_b(\"abbbbb\")"
    },
    {
      "rank": 82,
      "score": 1.0,
      "candidate": "def match(string):\n    return string.count(\"a\") == 1 and string.count(\"b\") == 1\n\n\nprint(match(\"abcb\"))\nprint(match(\"abbb\"))\nprint(match(\"abcba\"))\nprint(match(\"abcbaabcb\"))\nprint(match(\"abcbaabcba\"))"
    },
    {
      "rank": 83,
      "score": 1.0,
      "candidate": "def contains_a(s):\n    return s.find('a')!= -1\n\n\ndef contains_b(s):\n    return s.find('b')!= -1\n\n\ndef contains_c(s):\n    return s.find('c')!= -1\n\n\ndef contains_d(s):\n    return s.find('d')!= -1\n\n\ndef contains_e(s):\n    return s.find('e')!= -1\n\n\ndef contains_f(s):\n    return s.find('f')!= -1\n\n\ndef contains_g(s):\n    return s.find('g')!= -1\n\n\ndef contains_h(s):\n    return s.find('h')!= -1\n\n\ndef contains_i(s):\n    return s.find('i')!= -1\n\n\ndef contains_j(s):\n    return s.find('j')!= -1\n\n\ndef contains_k(s):\n    return s.find('k')!= -1\n\n\ndef contains_l(s):\n    return s.find('l')!= -1\n\n\ndef contains_m(s):\n    return s.find('m')!= -1\n\n\ndef contains_n(s):\n    return s.find('n')!= -1\n\n\ndef contains_o(s):\n    return s.find('o')!= -1\n\n\ndef contains_p(s):\n    return s.find('p')!= -1\n\n\ndef contains_q(s):\n    return s.find('q')!= -1\n\n\ndef contains_r(s):\n    return s.find('r')!= -1\n\n\ndef contains_s(s):\n    return s.find('s')!= -1\n\n\ndef contains_t(s):\n    return s.find('t')!= -1\n\n\ndef contains_u(s):\n    return s.find('u')!= -1\n\n\ndef contains_v(s):\n    return s.find('v')!= -1\n\n\ndef contains_w(s):\n    return s.find('w')!= -1\n\n\ndef contains"
    },
    {
      "rank": 84,
      "score": 1.0,
      "candidate": "def match(str):\n    for c in str:\n        if c == \"a\":\n            return True\n        elif c == \"b\":\n            return False\n\n\nprint(match(\"abba\"))\nprint(match(\"aabbbbb\"))\nprint(match(\"aabbbbbba\"))"
    },
    {
      "rank": 85,
      "score": 1.0,
      "candidate": "def is_a_followed_by_b(s):\n    return s.startswith('a') and s.endswith('b')\n\nprint(is_a_followed_by_b('abcd'))\nprint(is_a_followed_by_b('abcdabcd'))"
    },
    {
      "rank": 86,
      "score": 1.0,
      "candidate": "def has_a_followed_by_b(string):\n    return string.find(\"a\")!= -1 and string.find(\"b\")!= -1\n\nprint(has_a_followed_by_b(\"abcd\"))\nprint(has_a_followed_by_b(\"abcc\"))\nprint(has_a_followed_by_b(\"abccb\"))\nprint(has_a_followed_by_b(\"abcdab\"))\nprint(has_a_followed_by_b(\"abcdabcd\"))"
    },
    {
      "rank": 87,
      "score": 1.0,
      "candidate": "def is_a_followed_by_one_or_more_b(str):\n    return str.startswith('a') and str.endswith('b')\n\n\nif __name__ == '__main__':\n    assert is_a_followed_by_one_or_more_b('abcd') is True\n    assert is_a_followed_by_one_or_more_b('abcdab') is False\n    assert is_a_followed_by_one_or_more_b('abcdaba') is False"
    },
    {
      "rank": 88,
      "score": 1.0,
      "candidate": "def contains_a(string):\n    return 'a' in string and 'b' in string\n\n\nassert contains_a('aabbcbb') == True\nassert contains_a('aabcbb') == False\nassert contains_a('aabccbbb') == True\nassert contains_a('aabccbbb') == False\nassert contains_a('aabccccbbb') == True"
    },
    {
      "rank": 89,
      "score": 1.0,
      "candidate": "def is_a_following_one_or_more_b(s: str) -> bool:\n    return 'a' in s and any(b in s for b in 'b')\n\n\nif __name__ == '__main__':\n    assert is_a_following_one_or_more_b('abbbc')\n    assert is_a_following_one_or_more_b('abbbcc')\n    assert not is_a_following_one_or_more_b('abbbccc')"
    },
    {
      "rank": 90,
      "score": 1.0,
      "candidate": "def is_a_followed_by_b(string):\n    return string.find('a') == 0 and string.count('b') == 1\n\n\ndef is_a_followed_by_b_2(string):\n    return string.find('a')!= -1 and string.count('b') == 1\n\n\ndef is_a_followed_by_b_3(string):\n    return string.find('a')!= -1 and string.count('b') > 1\n\n\nif __name__ == \"__main__\":\n    assert is_a_followed_by_b('a') == True\n    assert is_a_followed_by_b('a') == False\n    assert is_a_followed_by_b('ab') == True\n    assert is_a_followed_by_b('abcd') == False\n    assert is_a_followed_by_b('abcd') == False\n    assert is_a_followed_by_b_2('abcd') == True\n    assert is_a_followed_by_b_2('abcd') == False\n    assert is_a_followed_by_b_3('abcd') == False\n    assert is_a_followed_by_b_3('a') == True\n    assert is_a_followed_by_b_3('a') == False\n    assert is_a_followed_by_b_3('aabcd') == True\n    assert is_a_followed_by_b_3('aabcd') == False"
    },
    {
      "rank": 91,
      "score": 1.0,
      "candidate": "from collections import defaultdict\n\n\ndef is_a_followed_by_b(string):\n    a_count = defaultdict(int)\n    for char in string:\n        if char == \"a\":\n            a_count[\"a\"] += 1\n        elif char == \"b\":\n            a_count[\"b\"] += 1\n        elif char == \"c\":\n            a_count[\"c\"] += 1\n        elif char == \"d\":\n            a_count[\"d\"] += 1\n        elif char == \"e\":\n            a_count[\"e\"] += 1\n    for key in a_count.keys():\n        if a_count[key] == 1:\n            return True\n    return False\n\n\nif __name__ == \"__main__\":\n    assert is_a_followed_by_b(\"abcabcbb\")\n    assert not is_a_followed_by_b(\"a\")\n    assert not is_a_followed_by_b(\"abcd\")\n    assert is_a_followed_by_b(\"cbba\")\n    assert not is_a_followed_by_b(\"abcd\")\n    assert not is_a_followed_by_b(\"cbba\")"
    },
    {
      "rank": 92,
      "score": 1.0,
      "candidate": "from typing import List\n\n\ndef is_a_followed_by_b(s: str) -> bool:\n    return s.find('a')!= -1 and s.find('b')!= -1\n\n\nif __name__ == \"__main__\":\n    assert is_a_followed_by_b('abc')\n    assert is_a_followed_by_b('abcabc')\n    assert not is_a_followed_by_b('ab')\n    assert not is_a_followed_by_b('abc')"
    },
    {
      "rank": 93,
      "score": 1.0,
      "candidate": "def matches(string):\n    return string.find(\"a\") > -1 and string.find(\"b\") > -1\n\nprint(matches(\"aaaa\"))\nprint(matches(\"bbbbb\"))\nprint(matches(\"aabbb\"))\nprint(matches(\"aabbbb\"))"
    },
    {
      "rank": 94,
      "score": 1.0,
      "candidate": "def check_string(s):\n    return s.startswith(\"a\") and any(s.endswith(b) for b in \"ab\")\n\n\nif __name__ == \"__main__\":\n    assert check_string(\"abcabcbb\")\n    assert check_string(\"abcabcbbab\")\n    assert check_string(\"abcabcbbabba\")\n    assert check_string(\"abcabcbbabbaab\")\n    assert check_string(\"abcabcbbabbaabba\")\n    assert check_string(\"abcabcbbabbaabba\")"
    },
    {
      "rank": 95,
      "score": 1.0,
      "candidate": "def is_a_followed_by_b(string):\n    return string.startswith('a') and string.endswith('b')\n\nprint(is_a_followed_by_b('aabbbbb'))\nprint(is_a_followed_by_b('aabbbbbb'))\nprint(is_a_followed_by_b('aabbbbbbbb'))\nprint(is_a_followed_by_b('abbbbbbbbbbb'))\nprint(is_a_followed_by_b('abbbbbbbbbb'))\nprint(is_a_followed_by_b('aabbbbbbbbbbbb'))\nprint(is_a_followed_by_b('abbbbbbbbbb'))\nprint(is_a_followed_by_b('abbbbbbbbbb'))\nprint(is_a_followed_by_b('abbbbbbbbbbbb'))\nprint(is_a_followed_by_b('aabbbbbbbbbb'))\nprint(is_a_followed_by_b('abbbbbbbbbb'))\nprint(is_a_followed_by_b('aabbbbbbbbbbb'))\nprint(is_a_followed_by_b('aabbbbbbbbbb'))\nprint(is_a_followed_by_b('aabbbbbbbbbb'))"
    },
    {
      "rank": 96,
      "score": 1.0,
      "candidate": "def is_a_followed_by_b(s):\n    if s.startswith('a') and s.endswith('b'):\n        return True\n    else:\n        return False\n\n\nif __name__ == '__main__':\n    assert is_a_followed_by_b('ab') == True\n    assert is_a_followed_by_b('aa') == False\n    assert is_a_followed_by_b('abcd') == False\n    assert is_a_followed_by_b('abcdab') == True\n    assert is_a_followed_by_b('abcdabcd') == False"
    },
    {
      "rank": 97,
      "score": 1.0,
      "candidate": "from typing import List\n\n\ndef is_a_followed_by_one_or_more_b(string: str) -> bool:\n    return string.startswith('a') and string.endswith('b')\n\n\nassert is_a_followed_by_one_or_more_b('abcb') is True\nassert is_a_followed_by_one_or_more_b('a') is False\nassert is_a_followed_by_one_or_more_b('abcbb') is False\nassert is_a_followed_by_one_or_more_b('abcbbab') is True\nassert is_a_followed_by_one_or_more_b('abcbbabab') is False"
    },
    {
      "rank": 98,
      "score": 1.0,
      "candidate": "def is_a_followed_by_b(str):\n    return str.find('a')!= -1 and str.find('b')!= -1\n\n\nprint(is_a_followed_by_b(\"abcd\"))\nprint(is_a_followed_by_b(\"abcdab\"))\nprint(is_a_followed_by_b(\"abc\"))\nprint(is_a_followed_by_b(\"abcdabcd\"))\nprint(is_a_followed_by_b(\"abcdabcdab\"))"
    },
    {
      "rank": 99,
      "score": 1.0,
      "candidate": "from typing import List\n\n\ndef is_a_followed_by_b(string: str) -> bool:\n    return string.startswith('a') and string.endswith('b')\n\n\nassert is_a_followed_by_b('abcd')\nassert is_a_followed_by_b('abc')\nassert is_a_followed_by_b('abcdabcdabcdabcd')\nassert is_a_followed_by_b('')"
    },
    {
      "rank": 100,
      "score": 1.0,
      "candidate": "def is_a_followed_by_one_b(s):\n    return s.count('a') == 1 and s.count('b') == 1\n\nprint(is_a_followed_by_one_b('abcd'))"
    }
  ]
}