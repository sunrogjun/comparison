{
  "timestamp": "2025-09-14T12:52:56.149708",
  "method": "improved_llm_judge",
  "judge_model": "codellama/CodeLlama-7b-Python-hf",
  "target_model": "codet5-770m",
  "dataset": "mbpp",
  "problem_number": 56,
  "total_candidates": 100,
  "results": [
    {
      "rank": 1,
      "score": 10.0,
      "candidate": "def bell_num_ways(n):\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        return bell_num_ways(n-1) + bell_num_ways(n-2)\n\nprint(bell_num_ways(4))"
    },
    {
      "rank": 2,
      "score": 10.0,
      "candidate": "def partition(n, arr):\n    if n == 1:\n        return 1\n    else:\n        return arr[0] + partition(n-1, arr[1:])\n\n\nif __name__ == '__main__':\n    print(partition(5, [1, 5, 10, 20]))"
    },
    {
      "rank": 3,
      "score": 10.0,
      "candidate": "def num_of_ways(bell_nums):\n    if len(bell_nums) == 0:\n        return 0\n    elif len(bell_nums) == 1:\n        return 1\n    elif bell_nums[0] == bell_nums[1]:\n        return num_of_ways(bell_nums[2:])\n    else:\n        return num_of_ways(bell_nums[1:]) + num_of_ways(bell_nums[0:2])\n\n\nif __name__ == \"__main__\":\n    print(num_of_ways([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 122, 123, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 16"
    },
    {
      "rank": 4,
      "score": 10.0,
      "candidate": "def num_ways(nums):\n    \"\"\"\n    :type nums: List[int]\n    :rtype: int\n    \"\"\"\n    if len(nums) == 0:\n        return 0\n    elif len(nums) == 1:\n        return 1\n    else:\n        return num_ways(nums[1:]) + num_ways(nums[:-1])\n\n\ndef main():\n    print(num_ways([2, 3, 4, 5]))\n    print(num_ways([2, 4, 6, 8, 10]))\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 5,
      "score": 10.0,
      "candidate": "def num_of_ways(bell_numbers, n):\n    \"\"\"\n    :type bell_numbers: List[int]\n    :type n: int\n    :rtype: int\n    \"\"\"\n    dp = [0] * (n + 1)\n    dp[0] = 1\n    dp[1] = 1\n    for i in range(2, n + 1):\n        for j in range(i):\n            if bell_numbers[i - 1] <= j:\n                dp[i] += dp[j]\n    return dp[n]\n\n\nif __name__ == \"__main__\":\n    print(num_of_ways([1, 2, 3, 4, 5], 7))"
    },
    {
      "rank": 6,
      "score": 10.0,
      "candidate": "def partition(n, arr):\n    dp = [0] * (n + 1)\n    dp[0] = 1\n    dp[1] = 1\n    for i in range(2, n + 1):\n        for j in range(i):\n            if arr[j] <= i:\n                dp[i] += dp[j]\n    return dp[n]\n\nprint(partition(6, [1, 2, 3, 4, 5]))\nprint(partition(6, [1, 2, 3, 4, 5, 6, 7, 8]))\nprint(partition(6, [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))"
    },
    {
      "rank": 7,
      "score": 10.0,
      "candidate": "def bell_number_ways(nums):\n    if len(nums) == 1:\n        return 1\n    if len(nums) == 2:\n        return nums[0] * nums[1]\n    if len(nums) == 3:\n        return nums[0] * nums[1] * nums[2]\n    if len(nums) == 4:\n        return nums[0] * nums[1] * nums[2] * nums[3]\n    if len(nums) == 5:\n        return nums[0] * nums[1] * nums[2] * nums[3] * nums[4]\n    if len(nums) == 6:\n        return nums[0] * nums[1] * nums[2] * nums[3] * nums[4] * nums[5]\n    if len(nums) == 7:\n        return nums[0] * nums[1] * nums[2] * nums[3] * nums[4] * nums[5] * nums[6]\n\n\nprint(bell_number_ways([1, 2, 3, 4, 5, 6]))\nprint(bell_number_ways([1, 1, 2, 3, 4, 5, 6]))\nprint(bell_number_ways([1, 2, 3, 4, 5, 6, 7]))\nprint(bell_number_ways([2, 2, 3, 4, 5, 6, 7, 8]))"
    },
    {
      "rank": 8,
      "score": 10.0,
      "candidate": "from functools import lru_cache\n\n\n@lru_cache(maxsize=None)\ndef count_ways(n):\n    if n == 0:\n        return 1\n\n    if n == 1:\n        return 1\n\n    if n == 2:\n        return 2\n\n    if n == 3:\n        return 4\n\n    if n == 4:\n        return 8\n\n    return count_ways(n - 1) + count_ways(n - 2)\n\n\nif __name__ == \"__main__\":\n    print(count_ways(5))\n    print(count_ways(6))\n    print(count_ways(7))\n    print(count_ways(8))"
    },
    {
      "rank": 9,
      "score": 10.0,
      "candidate": "def bell_number(arr, n):\n    dp = [0] * (n + 1)\n    dp[0] = 1\n    for i in range(1, n + 1):\n        for j in range(i):\n            if arr[j] <= i:\n                dp[i] += dp[j]\n    return dp[n]\n\ndef main():\n    arr = [1, 2, 3, 4, 5]\n    n = len(arr)\n    print(bell_number(arr, n))\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 10,
      "score": 10.0,
      "candidate": "def num_ways(arr, n):\n    if n == 0:\n        return 1\n    if n == 1:\n        return arr[0]\n\n    return num_ways(arr, n - 1) + num_ways(arr, n - 2)\n\n\ndef main():\n    print(num_ways([1, 2, 3, 4, 5], 5))\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 11,
      "score": 10.0,
      "candidate": "def num_ways(nums):\n    if len(nums) == 1:\n        return 1\n\n    return num_ways(nums[1:]) + num_ways(nums[:-1])\n\n\nprint(num_ways([0, 1, 2, 3, 4]))\nprint(num_ways([1, 2, 3, 4, 5]))\nprint(num_ways([1, 2, 3, 4, 5, 6, 7, 8, 9]))\nprint(num_ways([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]))\nprint(num_ways([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 125, 126, 127, 128, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 151, 152, 153, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173,"
    },
    {
      "rank": 12,
      "score": 10.0,
      "candidate": "def count_ways(nums):\n    if len(nums) == 0:\n        return 0\n    elif len(nums) == 1:\n        return 1\n    else:\n        return count_ways(nums[1:]) + count_ways(nums[:-1])\n\n\nprint(count_ways([3, 5, 7]))"
    },
    {
      "rank": 13,
      "score": 10.0,
      "candidate": "def bell_numbers(n):\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 4\n    elif n == 4:\n        return 6\n    elif n == 5:\n        return 8\n    elif n == 6:\n        return 9\n    else:\n        return 1 + bell_numbers(n - 1) + bell_numbers(n - 2) + bell_numbers(n - 3)\n\nprint(bell_numbers(5))"
    },
    {
      "rank": 14,
      "score": 10.0,
      "candidate": "def num_of_ways(n, m):\n    dp = [0] * (n + 1)\n    dp[0] = 1\n    for i in range(1, m + 1):\n        for j in range(n):\n            if i <= j:\n                dp[i] += dp[j]\n    return dp[n]\n\nprint(num_of_ways(10, 2))\nprint(num_of_ways(10, 3))\nprint(num_of_ways(10, 4))\nprint(num_of_ways(10, 5))\nprint(num_of_ways(10, 6))\nprint(num_of_ways(10, 7))\nprint(num_of_ways(10, 8))\nprint(num_of_ways(10, 9))\nprint(num_of_ways(10, 10))\nprint(num_of_ways(10, 11))\nprint(num_of_ways(10, 12))\nprint(num_of_ways(10, 13))\nprint(num_of_ways(10, 14))\nprint(num_of_ways(10, 15))\nprint(num_of_ways(10, 16))\nprint(num_of_ways(10, 17))\nprint(num_of_ways(10, 18))\nprint(num_of_ways(10, 19))\nprint(num_of_ways(10, 20))\nprint(num_of_ways(10, 21))\nprint(num_of_ways(10, 22))\nprint(num_of_ways(10, 23))\nprint(num_of_ways(10, 24))\nprint(num_of_ways(10, 25))\nprint(num_of_ways(10, 26))\nprint(num_of_ways(10, 27))\nprint(num_of_ways(10, 28))\nprint(num_of_ways(10, 29))\nprint(num_of_ways(10, 30))\nprint(num_of_ways(10, 31))\nprint(num_of_ways(10, 32))\nprint(num_of_ways(10, 33))\nprint(num_of_ways(10, 34))"
    },
    {
      "rank": 15,
      "score": 9.990326969440313,
      "candidate": "class Solution(object):\n    def numWays(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        if not nums:\n            return 0\n        dp = [0] * len(nums)\n        dp[0] = 1\n        dp[1] = 1\n        for i in range(2, len(nums)):\n            for j in range(i):\n                if nums[j] <= nums[i]:\n                    dp[i] += dp[j]\n        return dp[len(nums)]\n\n\ns = Solution()\nprint s.numWays([5, 4, 3, 2, 1])"
    },
    {
      "rank": 16,
      "score": 9.98055726717331,
      "candidate": "def num_ways(n, arr):\n    dp = [0]*(n+1)\n    dp[0] = 1\n    dp[1] = 1\n    for i in range(2, n+1):\n        for j in range(0, i):\n            dp[i] += dp[j]\n\n    return dp[n]\n\nprint(num_ways(5, [2, 3, 5, 7, 11]))"
    },
    {
      "rank": 17,
      "score": 9.940688590283871,
      "candidate": "def count_ways(arr):\n    if len(arr) == 0:\n        return 0\n    if len(arr) == 1:\n        return 1\n    return count_ways(arr[1:]) + count_ways(arr[:-1])\n\n\ndef main():\n    print(count_ways([1, 2, 3]))\n    print(count_ways([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 18,
      "score": 9.9367785888247,
      "candidate": "def partition(nums):\n    \"\"\"\n    :type nums: List[int]\n    :rtype: int\n    \"\"\"\n    if not nums:\n        return 0\n    if len(nums) == 1:\n        return 1\n    dp = [0 for i in range(len(nums)+1)]\n    dp[0] = 1\n    dp[1] = 1\n    for i in range(2, len(nums)+1):\n        for j in range(i):\n            if nums[j] < nums[j-1]:\n                dp[i] += dp[i-1]\n    return dp[len(nums)]\n\n\nprint(partition([4, 5, 6, 7, 8, 9, 10]))"
    },
    {
      "rank": 19,
      "score": 9.921242687555814,
      "candidate": "def count_ways(n):\n    if n == 0:\n        return 1\n    else:\n        return count_ways(n - 1) + count_ways(n - 2)\n\nprint(count_ways(10))"
    },
    {
      "rank": 20,
      "score": 9.873241915797562,
      "candidate": "def number_of_ways(nums):\n    if len(nums) == 0:\n        return 0\n    if len(nums) == 1:\n        return 1\n\n    dp = [0 for _ in range(len(nums))]\n    dp[0] = 1\n    dp[1] = 1\n\n    for i in range(2, len(nums)):\n        dp[i] = dp[i - 1] + dp[i - 2]\n\n    return dp[-1]\n\n\nif __name__ == '__main__':\n    print(number_of_ways([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))"
    },
    {
      "rank": 21,
      "score": 9.870622955781771,
      "candidate": "def num_ways(n):\n    if n == 1:\n        return 1\n\n    dp = [0] * (n + 1)\n    dp[0] = 1\n    dp[1] = 1\n\n    for i in range(2, n + 1):\n        for j in range(1, i + 1):\n            dp[i] += dp[j]\n\n    return dp[n]\n\n\nif __name__ == \"__main__\":\n    print(num_ways(2))\n    print(num_ways(3))\n    print(num_ways(4))\n    print(num_ways(5))"
    },
    {
      "rank": 22,
      "score": 9.8569647449829,
      "candidate": "def num_ways(n, m):\n    if m == 0:\n        return 1\n    if n == 0:\n        return 0\n    return num_ways(n - 1, m) + num_ways(n - 1, m - 1)\n\n\nif __name__ == \"__main__\":\n    print(num_ways(5, 3))"
    },
    {
      "rank": 23,
      "score": 9.848182367104938,
      "candidate": "def bell(arr, n):\n    if n == 1:\n        return 1\n    elif n == 2:\n        return arr[0] * arr[1]\n    else:\n        return bell(arr, n-1) + bell(arr, n-2)\n\n\nprint(bell([3, 2, 1, 5], 3))"
    },
    {
      "rank": 24,
      "score": 9.78170672721884,
      "candidate": "def count_partitions(arr):\n    if len(arr) == 1:\n        return 1\n    else:\n        return arr[0] * count_partitions(arr[1:])\n\n\nif __name__ == \"__main__\":\n    arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 125, 126, 127, 128, 131, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 151, 152, 153, 154, 155, 156, 157, 158, 159, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 175, 176, 177, 178, 181, 182, 183, 179, 185, 186, 187, 180, 191, 192, 193, 194, 195, 196, 197, 195, 199, 200, 201, 202, 203, 204, 205, 206"
    },
    {
      "rank": 25,
      "score": 9.67702421149822,
      "candidate": "def count_ways(num):\n    if num == 1:\n        return 1\n    if num == 2:\n        return 2\n    if num == 3:\n        return 4\n    if num == 4:\n        return 8\n    if num == 5:\n        return 16\n    if num == 6:\n        return 32\n    if num == 7:\n        return 64\n    if num == 8:\n        return 128\n\n    return 0\n\n\ndef main():\n    print(count_ways(1))\n    print(count_ways(2))\n    print(count_ways(3))\n    print(count_ways(4))\n    print(count_ways(5))\n    print(count_ways(6))\n    print(count_ways(7))\n    print(count_ways(8))\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 26,
      "score": 9.618678000639472,
      "candidate": "def num_ways(n, arr):\n    if n == 1:\n        return 1\n    if n == 2:\n        return arr[0] * arr[1]\n    if n == 3:\n        return arr[0] * arr[1] * arr[2]\n    \n    dp = [0] * (n + 1)\n    dp[1] = 1\n    dp[2] = 1\n    dp[3] = 1\n    \n    for i in range(4, n + 1):\n        dp[i] = dp[i - 1]\n        for j in range(1, i):\n            if arr[j] > arr[i - 1]:\n                dp[i] += dp[j]\n                \n    return dp[n]\n\nprint(num_ways(5, [1, 2, 3, 4, 5]))"
    },
    {
      "rank": 27,
      "score": 9.470889066552461,
      "candidate": "class Solution(object):\n    def numWays(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        if len(nums) <= 1:\n            return 1\n        dp = [0] * (len(nums) + 1)\n        dp[0] = 1\n        dp[1] = 1\n\n        for i in range(2, len(nums) + 1):\n            for j in range(len(nums) - i + 1):\n                dp[i] += dp[j]\n\n        return dp[len(nums)]\n\n\nif __name__ == \"__main__\":\n    print Solution().numWays([1, 2, 3, 4, 5, 6, 7])"
    },
    {
      "rank": 28,
      "score": 8.444444444444445,
      "candidate": "def num_ways(n, k):\n    if n == 1 or k == 1:\n        return 1\n    else:\n        return num_ways(n-1, k) + num_ways(n-k, k)\n\nif __name__ == '__main__':\n    n = 5\n    k = 4\n    print(num_ways(n, k))"
    },
    {
      "rank": 29,
      "score": 8.444444444444445,
      "candidate": "def num_ways(arr):\n    if len(arr) <= 1:\n        return 1\n    return num_ways(arr[1:]) + num_ways(arr[:-1])"
    },
    {
      "rank": 30,
      "score": 8.444444444444445,
      "candidate": "def find_number_of_ways(nums):\n    if len(nums) <= 1:\n        return 1\n    else:\n        return nums[0] + find_number_of_ways(nums[1:])"
    },
    {
      "rank": 31,
      "score": 8.444444444444445,
      "candidate": "def num_ways(num, ways):\n    if num == 1:\n        ways[num] = 1\n        return ways\n    ways[num] = num_ways(num - 1, ways) + num_ways(num - 2, ways)\n    return ways[num]\n\nnum = int(input(\"Enter the number of ways: \"))\nways = [0 for i in range(num + 1)]\nways[0] = 1\nways[1] = 1\nprint(num_ways(num, ways))"
    },
    {
      "rank": 32,
      "score": 8.444444444444445,
      "candidate": "def count_ways(nums):\n    if len(nums) == 0:\n        return 1\n    else:\n        return count_ways(nums[1:]) + count_ways(nums[:-1])"
    },
    {
      "rank": 33,
      "score": 8.444444444444445,
      "candidate": "def num_ways(n):\n    if n == 0:\n        return 1\n    if n == 1:\n        return 1\n    return num_ways(n-1) + num_ways(n-2)\n\nprint(num_ways(9))"
    },
    {
      "rank": 34,
      "score": 8.444444444444445,
      "candidate": "def count_ways(n, k):\n    if n < k:\n        return 0\n    if n == k:\n        return 1\n    return count_ways(n-k, k) + count_ways(n, k-n)\n\nprint(count_ways(4,2))"
    },
    {
      "rank": 35,
      "score": 3.926139092254469,
      "candidate": "def numWays(nums):\n    # Write your code here\n    # This is a recursive solution\n    dp = [0] * len(nums)\n    dp[0] = 1\n    dp[1] = 1\n    for i in range(2, len(nums)):\n        dp[i] = dp[i-1] * nums[i-2]\n    return dp[len(nums)-1]\n\nprint(numWays([2, 1, 3, 4]))"
    },
    {
      "rank": 36,
      "score": 3.782321827907003,
      "candidate": "def num_ways(n, p):\n    if p == 0:\n        return 1\n    if p == 1:\n        return n\n\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n\n    dp = [[0 for _ in range(p + 1)] for _ in range(n + 1)]\n    dp[0][0] = 1\n    dp[0][1] = 1\n\n    for i in range(1, n + 1):\n        for j in range(1, p + 1):\n            if i > j:\n                dp[i][j] = dp[i - 1][j]\n            elif i == j:\n                dp[i][j] = 1\n            else:\n                dp[i][j] = dp[i - 1][j - 1] + dp[i - 1][j]\n\n    return dp[n][p]\n\n\nif __name__ == \"__main__\":\n    n = 5\n    p = 2\n    print(num_ways(n, p))"
    },
    {
      "rank": 37,
      "score": 3.761514928204013,
      "candidate": "def num_ways(arr, n):\n    if n <= 1:\n        return 1\n    if arr[0] > arr[n-1]:\n        return 0\n    return num_ways(arr[1:], n-1) + num_ways(arr, n-1)\n\n\nprint(num_ways([1, 2, 3, 4, 5], 5))\nprint(num_ways([1, 2, 3, 4, 5], 6))"
    },
    {
      "rank": 38,
      "score": 3.738947022370758,
      "candidate": "def num_ways(nums):\n    dp = [0] * (len(nums) + 1)\n    dp[0] = 1\n    dp[1] = 1\n\n    for i in range(2, len(nums) + 1):\n        for j in range(len(nums)):\n            if nums[j] <= i:\n                dp[i] += dp[i - nums[j]]\n\n    return dp[len(nums)]\n\n\nif __name__ == \"__main__\":\n    print(num_ways([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))"
    },
    {
      "rank": 39,
      "score": 3.6781200142854114,
      "candidate": "def num_ways(nums):\n    n = len(nums)\n    dp = [0] * (n + 1)\n    dp[0] = 1\n    dp[1] = 1\n    for i in range(2, n + 1):\n        for j in range(i):\n            if nums[j] <= i:\n                dp[i] += dp[j]\n    return dp[n]\n\n\nif __name__ == '__main__':\n    nums = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    print(num_ways(nums))"
    },
    {
      "rank": 40,
      "score": 3.5285611131094576,
      "candidate": "def partition_bell_numbers(n, m):\n    dp = [[0 for _ in range(m + 1)] for _ in range(n + 1)]\n\n    dp[0][0] = 1\n    for i in range(1, n + 1):\n        for j in range(1, m + 1):\n            if i <= j:\n                dp[i][j] = dp[i - 1][j] + dp[i][j - 1]\n\n    return dp[n][m]\n\n\nif __name__ == \"__main__\":\n    n = 5\n    m = 10\n    print(partition_bell_numbers(n, m))"
    },
    {
      "rank": 41,
      "score": 3.5154997612479755,
      "candidate": "def bell_partition(arr):\n    if len(arr) <= 1:\n        return 1\n    if arr[0] > arr[1]:\n        return 0\n    else:\n        return bell_partition(arr[1:]) + bell_partition(arr[:-1])\n\n\narr = [1, 2, 3, 4, 5, 6, 7, 8, 9]\nprint(bell_partition(arr))"
    },
    {
      "rank": 42,
      "score": 3.501766448946012,
      "candidate": "def num_ways(n, m, A):\n    # write your code in Python 3.6\n    dp = [0 for _ in range(m+1)]\n    dp[0] = 1\n    for i in range(1, m+1):\n        for j in range(1, n+1):\n            if A[i-1] <= j:\n                dp[i] += dp[i-1]\n    return dp[m]\n\n\nif __name__ == \"__main__\":\n    A = [2, 2, 2, 2, 2, 2, 2]\n    print(num_ways(3, 4, A))"
    },
    {
      "rank": 43,
      "score": 3.4877725635611796,
      "candidate": "def bell_partition(nums):\n    n = len(nums)\n    dp = [[0 for i in range(n+1)] for j in range(n+1)]\n    dp[0][0] = 1\n    for i in range(1, n+1):\n        for j in range(i, n+1):\n            dp[i][j] = dp[i-1][j] + dp[i-1][j-nums[i-1]]\n    return dp[n][n]\n\nprint(bell_partition([1, 2, 3, 4]))\nprint(bell_partition([2, 3, 4, 1]))"
    },
    {
      "rank": 44,
      "score": 3.4843224952664444,
      "candidate": "def count_ways(n):\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    return count_ways(n - 1) + count_ways(n - 2)\n\n\nassert count_ways(0) == 0\nassert count_ways(1) == 1\nassert count_ways(2) == 2\nassert count_ways(3) == 3\nassert count_ways(4) == 5\nassert count_ways(5) == 7\nassert count_ways(6) == 8\nassert count_ways(7) == 9\nassert count_ways(8) == 10\nassert count_ways(9) == 11\nassert count_ways(10) == 12\nassert count_ways(11) == 13\nassert count_ways(12) == 14\nassert count_ways(13) == 15\nassert count_ways(14) == 16\nassert count_ways(15) == 17\nassert count_ways(16) == 18\nassert count_ways(17) == 19\nassert count_ways(18) == 20\nassert count_ways(19) == 21"
    },
    {
      "rank": 45,
      "score": 3.457701058851037,
      "candidate": "def count_partitions(arr, target):\n    if len(arr) == 0:\n        return 0\n    if len(arr) == 1:\n        if arr[0] == target:\n            return 1\n        return 0\n\n    dp = [0 for _ in range(target + 1)]\n    dp[0] = 1\n\n    for i in range(1, target + 1):\n        for j in range(len(arr)):\n            if arr[j] <= i:\n                dp[i] += dp[i - arr[j]]\n\n    return dp[target]\n\n\ndef main():\n    print(count_partitions([2, 3, 5, 7, 11, 13], 7))\n    print(count_partitions([2, 3, 5, 7, 11, 13], 13))\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 46,
      "score": 3.4112724560515946,
      "candidate": "def num_ways(bell_nums):\n    if len(bell_nums) == 1:\n        return 1\n    else:\n        return num_ways(bell_nums[1:]) + num_ways(bell_nums[:-1])\n\n\nif __name__ == '__main__':\n    assert num_ways([3, 1, 5, 2]) == 4\n    assert num_ways([1, 1, 1, 1, 1]) == 2\n    assert num_ways([1, 1, 1, 1, 1]) == 3\n    assert num_ways([1, 1, 1, 1, 1]) == 1\n    assert num_ways([1, 1, 1, 1, 1]) == 1\n    assert num_ways([1, 1, 1, 1, 1, 1, 1, 1]) == 1"
    },
    {
      "rank": 47,
      "score": 3.3837173645764542,
      "candidate": "class Solution(object):\n    def numWays(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        dp = [0 for _ in range(len(nums)+1)]\n        dp[0] = 1\n        dp[1] = 1\n        for i in range(2, len(nums)+1):\n            dp[i] = dp[i-1] + dp[i-2]\n        return dp[len(nums)]\n\n\nif __name__ == '__main__':\n    nums = [2, 3, 5, 7]\n    print Solution().numWays(nums)"
    },
    {
      "rank": 48,
      "score": 3.3238442690503462,
      "candidate": "class Solution(object):\n    def numWays(self, n, k):\n        \"\"\"\n        :type n: int\n        :type k: int\n        :rtype: int\n        \"\"\"\n        if k == 0:\n            return 1\n        if k == 1:\n            return n\n\n        dp = [[0] * (k + 1) for _ in range(n + 1)]\n        dp[0][0] = 1\n        dp[0][1] = 1\n        for i in range(2, n + 1):\n            for j in range(1, k + 1):\n                if j <= i:\n                    dp[i][j] += dp[i - 1][j - 1]\n\n        return dp[n][k]\n\n\nif __name__ == '__main__':\n    sol = Solution()\n    print sol.numWays(10, 10)\n    print sol.numWays(10, 5)\n    print sol.numWays(10, 2)"
    },
    {
      "rank": 49,
      "score": 3.2712800217929825,
      "candidate": "def num_partitions(arr, n):\n    if n == 0:\n        return 1\n    if n == 1:\n        return arr[0]\n    dp = [0] * (n + 1)\n    dp[0] = 1\n    dp[1] = 1\n    for i in range(2, n + 1):\n        for j in range(1, i):\n            dp[i] += dp[j] * arr[j]\n    return dp[n]\n\n\nif __name__ == \"__main__\":\n    assert num_partitions([1, 2, 3, 4, 5], 6) == 1\n    assert num_partitions([1, 2, 3, 4, 5], 8) == 2\n    assert num_partitions([1, 2, 3, 4, 5], 15) == 4\n    assert num_partitions([1, 2, 3, 4, 5], 18) == 4"
    },
    {
      "rank": 50,
      "score": 3.256633716556678,
      "candidate": "def num_ways(n):\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 4\n    else:\n        return num_ways(n-1) + num_ways(n-2) + num_ways(n-3)\n\nn = int(input())\nprint(num_ways(n))"
    },
    {
      "rank": 51,
      "score": 3.2483570765056164,
      "candidate": "def num_ways(arr):\n    if len(arr) < 2:\n        return 1\n    if arr[0] == arr[1]:\n        return 1\n\n    count = 0\n    for i in range(2, len(arr)):\n        if arr[i] < arr[i - 1]:\n            count += num_ways(arr[:i])\n\n    return count\n\n\nprint(num_ways([10, 20, 30, 40, 50]))"
    },
    {
      "rank": 52,
      "score": 3.180818012523817,
      "candidate": "def count_ways(bell_numbers):\n    # Write your code here\n    dp = [0] * (len(bell_numbers) + 1)\n    dp[0] = 1\n    for i in range(1, len(bell_numbers) + 1):\n        for j in range(i):\n            if bell_numbers[i-1] <= bell_numbers[j]:\n                dp[i] += dp[j]\n    return dp[len(bell_numbers)]\n\nprint(count_ways([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))"
    },
    {
      "rank": 53,
      "score": 3.180697802754207,
      "candidate": "class Solution(object):\n    def numWays(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        dp = [0] * (len(nums) + 1)\n        dp[0] = 1\n        dp[1] = 1\n        for i in range(2, len(nums) + 1):\n            for j in range(i):\n                if nums[j] <= nums[i - 1]:\n                    dp[i] += dp[j]\n        return dp[len(nums)]"
    },
    {
      "rank": 54,
      "score": 3.178556285755873,
      "candidate": "def partition(nums):\n    if len(nums) == 1:\n        return 1\n    if len(nums) == 2:\n        return 2\n    if len(nums) == 3:\n        return 3\n    if len(nums) == 4:\n        return 4\n    if len(nums) == 5:\n        return 5\n    if len(nums) == 6:\n        return 6\n    if len(nums) == 7:\n        return 7\n    if len(nums) == 8:\n        return 8\n    if len(nums) == 9:\n        return 9\n    if len(nums) == 10:\n        return 10\n    if len(nums) == 11:\n        return 11\n    if len(nums) == 12:\n        return 12\n    if len(nums) == 13:\n        return 13\n    if len(nums) == 14:\n        return 14\n    if len(nums) == 15:\n        return 15\n    if len(nums) == 16:\n        return 16\n    if len(nums) == 17:\n        return 17\n    if len(nums) == 18:\n        return 18\n    if len(nums) == 19:\n        return 19\n    if len(nums) == 20:\n        return 20\n    if len(nums) == 21:\n        return 21\n    if len(nums) == 22:\n        return 22\n    if len(nums) == 23:\n        return 23\n    if len(nums) == 24:\n        return 24\n    if len(nums) == 25:\n        return 25\n    if len(nums) == 26:\n        return 26\n    if len(nums) == 27:\n        return 27\n    if len(nums) == 28:\n        return 28\n    if len(nums) == 29:\n        return 29\n    if len(nums) == 30:\n        return 30\n    if len(nums) == 31:\n        return 31\n    if len(nums) == 32:\n        return 32\n    if len(nums) == 33:\n        return 33\n    if len(nums) == 34:\n        return 34\n    if len(nums) == 35:\n        return 35\n    if len(nums) == 36:\n        return 36"
    },
    {
      "rank": 55,
      "score": 3.1643755548298422,
      "candidate": "class Solution(object):\n    def numWays(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        if len(nums) < 2:\n            return 0\n\n        dp = [0 for _ in range(len(nums) + 1)]\n        dp[0] = 1\n        dp[1] = 1\n\n        for i in range(2, len(nums) + 1):\n            for j in range(i):\n                if nums[j] <= nums[i-1]:\n                    dp[i] += dp[j]\n\n        return dp[len(nums)]\n\n\nif __name__ == \"__main__\":\n    s = Solution()\n    assert s.numWays([3, 2, 5, 7, 4, 1]) == 2\n    assert s.numWays([3, 2, 5, 7, 4]) == 2\n    assert s.numWays([3, 2]) == 1\n    assert s.numWays([2]) == 1\n    assert s.numWays([3, 2, 4]) == 2\n    assert s.numWays([1, 2]) == 2\n    assert s.numWays([4, 2, 3, 5]) == 1\n    assert s.numWays([4, 3, 2, 1]) == 2"
    },
    {
      "rank": 56,
      "score": 3.157123666297637,
      "candidate": "def num_ways(bell_numbers):\n    if len(bell_numbers) == 0:\n        return 0\n    elif len(bell_numbers) == 1:\n        return 1\n\n    dp = [0] * (len(bell_numbers) + 1)\n    dp[0] = 1\n    dp[1] = 1\n\n    for i in range(2, len(bell_numbers) + 1):\n        dp[i] = dp[i - 1] + dp[i - 2]\n\n    return dp[len(bell_numbers)]\n\n\nif __name__ == '__main__':\n    print(num_ways([1, 2, 3, 4, 5, 6, 7, 8]))"
    },
    {
      "rank": 57,
      "score": 3.1209811357830173,
      "candidate": "def bell_partition(nums, n):\n    if n <= 0:\n        return 0\n\n    dp = [0] * (n + 1)\n    dp[0] = 1\n    for i in range(1, n + 1):\n        for j in range(1, i + 1):\n            dp[i] += dp[j - 1]\n\n    return dp[n]\n\n\nif __name__ == '__main__':\n    nums = [3, 5, 7, 2]\n    n = len(nums)\n    print(bell_partition(nums, n))"
    },
    {
      "rank": 58,
      "score": 3.104431797502378,
      "candidate": "def partition(numbers):\n    if len(numbers) == 0:\n        return 0\n    elif len(numbers) == 1:\n        return 1\n    elif len(numbers) == 2:\n        return 2\n    else:\n        return partition(numbers[1:]) + partition(numbers[0:2])\n\nprint(partition([0, 1, 2, 3, 4, 5]))"
    },
    {
      "rank": 59,
      "score": 3.0984306179345618,
      "candidate": "class Solution:\n    def numWays(self, nums: List[int]) -> int:\n        dp = [0] * (len(nums) + 1)\n        dp[0] = 1\n        dp[1] = 1\n\n        for i in range(2, len(nums) + 1):\n            for j in range(i):\n                if nums[j] > nums[i - 1]:\n                    dp[i] += dp[i - 1]\n\n        return dp[len(nums)]\n\n\nif __name__ == \"__main__\":\n    s = Solution()\n    nums = [2, 4, 6, 8, 10]\n    print(s.numWays(nums))"
    },
    {
      "rank": 60,
      "score": 3.0485387746740202,
      "candidate": "def num_partitions(nums):\n    # Write your code here\n    if len(nums) <= 1:\n        return 1\n    return num_partitions(nums[1:]) + num_partitions(nums[0:-1])"
    },
    {
      "rank": 61,
      "score": 3.045880388267751,
      "candidate": "def count_ways(nums):\n    # Write your code here\n    if len(nums) == 0:\n        return 0\n    dp = [0 for _ in range(len(nums))]\n    dp[0] = 1\n    dp[1] = 1\n    for i in range(2, len(nums)):\n        dp[i] = dp[i - 1] + dp[i - 2]\n    return dp[len(nums) - 1]\n\n\nif __name__ == \"__main__\":\n    print(count_ways([0, 1, 2, 3, 4, 5]))"
    },
    {
      "rank": 62,
      "score": 3.043523534119086,
      "candidate": "class Solution(object):\n    def numWays(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        if len(nums) == 1:\n            return 1\n        nums.sort()\n        dp = [0 for i in range(len(nums))]\n        dp[0] = 1\n        dp[1] = 1\n        for i in range(2, len(nums)):\n            dp[i] = dp[i-1] + dp[i-2]\n        return dp[len(nums)-1]\n\n\nif __name__ == '__main__':\n    s = Solution()\n    print s.numWays([5, 3, 2])"
    },
    {
      "rank": 63,
      "score": 3.033764102343962,
      "candidate": "def num_partitions(numbers):\n    if len(numbers) == 0:\n        return 0\n    if len(numbers) == 1:\n        return 1\n    if numbers[0] == numbers[1]:\n        return num_partitions(numbers[2:])\n    else:\n        return num_partitions(numbers[1:]) + num_partitions(numbers[2:])\n\n\nif __name__ == \"__main__\":\n    print(num_partitions([1, 2, 3, 4, 5, 6, 7, 8, 9]))"
    },
    {
      "rank": 64,
      "score": 2.993251387631033,
      "candidate": "class Solution(object):\n    def numWays(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        if not nums:\n            return 0\n        dp = [0] * (len(nums) + 1)\n        dp[0] = 1\n        dp[1] = 1\n        for i in range(2, len(nums) + 1):\n            for j in range(i):\n                if nums[j] <= nums[i - 1]:\n                    dp[i] += dp[j]\n        return dp[len(nums)]"
    },
    {
      "rank": 65,
      "score": 2.94217585880588,
      "candidate": "def bell_number_partition(numbers):\n    return bell_number_partition_helper(numbers, 0)\n\n\ndef bell_number_partition_helper(numbers, index):\n    if index == len(numbers):\n        return 1\n\n    if numbers[index] > numbers[index - 1]:\n        return bell_number_partition_helper(numbers, index + 1)\n\n    return bell_number_partition_helper(numbers, index + 1) + bell_number_partition_helper(numbers, index + 2)\n\n\nif __name__ == \"__main__\":\n    assert bell_number_partition([1, 2, 3, 4, 5, 6]) == 2\n    assert bell_number_partition([1, 2, 3, 4, 5, 6, 7]) == 4"
    },
    {
      "rank": 66,
      "score": 2.930867849414408,
      "candidate": "def bell_numbers(n):\n    # Write your code here\n    dp = [0] * (n + 1)\n    dp[0] = 1\n    for i in range(1, n + 1):\n        for j in range(i):\n            if i % j == 0:\n                dp[i] += dp[j]\n    return dp[n]\n\n\nprint(bell_numbers(5))"
    },
    {
      "rank": 67,
      "score": 2.9071705116680913,
      "candidate": "def num_ways(n):\n    if n == 0:\n        return 1\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n == 3:\n        return 4\n    if n == 4:\n        return 6\n    if n == 5:\n        return 8\n    if n == 6:\n        return 16\n    if n == 7:\n        return 32\n    if n == 8:\n        return 64\n    if n == 9:\n        return 128\n    if n == 10:\n        return 256\n    if n == 11:\n        return 512\n    if n == 12:\n        return 1024\n    if n == 13:\n        return 2048\n    if n == 14:\n        return 4096\n    if n == 15:\n        return 8192\n    if n == 16:\n        return 16384\n    if n == 17:\n        return 32768\n    if n == 18:\n        return 65536\n    if n == 19:\n        return 131072\n    if n == 20:\n        return 262144\n    if n == 21:\n        return 524288\n    if n == 22:\n        return 1048576\n    if n == 23:\n        return 2097152\n    if n == 24:\n        return 4194304\n    if n == 25:\n        return 8388608\n    if n == 26:\n        return 262144\n    if n == 27:\n        return 1048576\n    if n == 28:\n        return 2097152\n    if n == 29:\n        return 524288\n    if n == 30:\n        return 1048576\n    if n == 31:\n        return 2097152\n    if n == 32:\n        return 262144\n    if n == 33:\n        return 1048576\n    if n == 34:\n        return 2097152\n    if n == 35:\n        return 4194304\n    if n == 36:\n        return 8388608\n    if n == 37:\n        return 2097152\n    if n == 38:\n        return 4194304\n    if n == 39:\n        return 1048576\n    if n == 40:\n        return 2"
    },
    {
      "rank": 68,
      "score": 2.887111849756732,
      "candidate": "def partition(nums):\n    n = len(nums)\n    dp = [0 for _ in range(n + 1)]\n    dp[0] = 1\n    dp[1] = 1\n    for i in range(2, n + 1):\n        for j in range(1, i):\n            dp[i] += dp[j]\n            if nums[j - 1] <= i:\n                dp[i] += dp[i - nums[j - 1]]\n    return dp[n]\n\n\ndef main():\n    nums = [2, 5, 6, 7, 8, 10]\n    print(partition(nums))\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 69,
      "score": 2.8829315215254097,
      "candidate": "def count_ways(nums):\n    if len(nums) <= 1:\n        return 1\n    elif len(nums) == 2:\n        if nums[0] == nums[1]:\n            return 1\n        else:\n            return 0\n    else:\n        dp = [0 for _ in range(len(nums))]\n        dp[0] = 1\n        dp[1] = 1\n        for i in range(2, len(nums)):\n            dp[i] = dp[i - 1] + dp[i - 2]\n        return dp[len(nums) - 1]\n\n\n\nif __name__ == \"__main__\":\n    nums = [1, 2, 3, 4, 5, 6, 7]\n    print(count_ways(nums))"
    },
    {
      "rank": 70,
      "score": 2.8504963247670663,
      "candidate": "def count_ways(n, k):\n    dp = [0] * (n + 1)\n    dp[0] = 1\n    dp[1] = 1\n    for i in range(2, n + 1):\n        for j in range(i):\n            if i % j == 0:\n                dp[i] += dp[j]\n    return dp[k]\n\n\nprint(count_ways(10, 3))"
    },
    {
      "rank": 71,
      "score": 2.8494481522053556,
      "candidate": "def num_ways(nums, target):\n    if not nums:\n        return 0\n    dp = [[0 for _ in range(target + 1)] for _ in range(len(nums))]\n    dp[0][0] = 1\n    for i in range(1, len(nums)):\n        for j in range(0, target + 1):\n            if j - nums[i] <= 0:\n                dp[i][j] += dp[i - 1][j]\n            else:\n                dp[i][j] += dp[i - 1][j - nums[i]]\n    return dp[len(nums) - 1][target]\n\n\nif __name__ == \"__main__\":\n    assert num_ways([1, 2, 3, 4, 5], 5) == 1\n    assert num_ways([1, 2, 3, 4, 5], 1) == 1\n    assert num_ways([1, 2, 3, 4, 5], 2) == 2\n    assert num_ways([1, 2, 3, 4, 5], 3) == 3\n    assert num_ways([1, 2, 3, 4, 5], 4) == 4\n    assert num_ways([1, 2, 3, 4, 5], 5) == 5\n    assert num_ways([1, 2, 3, 4, 5], 6) == 6\n    assert num_ways([1, 2, 3, 4, 5], 7) == 8\n    assert num_ways([1, 2, 3, 4, 5], 8) == 9\n    assert num_ways([1, 2, 3, 4, 5], 9) == 10\n    assert num_ways([1, 2, 3, 4, 5], 10) == 11\n    assert num_ways([1, 2, 3, 4, 5], 11) == 12\n    assert num_ways([1, 2, 3, 4, 5], 12) == 13"
    },
    {
      "rank": 72,
      "score": 2.8453938120743927,
      "candidate": "def number_of_ways(numbers):\n    # Write your code here\n    if len(numbers) == 0:\n        return 0\n    elif len(numbers) == 1:\n        return 1\n    else:\n        return number_of_ways(numbers[1:]) + number_of_ways(numbers[1:-1])\n\nprint(number_of_ways([1, 2, 3, 4, 5]))"
    },
    {
      "rank": 73,
      "score": 2.8074588597918417,
      "candidate": "from typing import List\n\n\ndef count_ways(n: int) -> int:\n    # base case\n    if n <= 1:\n        return n\n\n    # recursively call to count ways\n    return count_ways(n-1) + count_ways(n-2)\n\n\nif __name__ == \"__main__\":\n    assert count_ways(5) == 3"
    },
    {
      "rank": 74,
      "score": 2.769680614520106,
      "candidate": "def partition(arr):\n    # Write your code here\n    if len(arr) <= 1:\n        return 1\n    dp = [0 for i in range(len(arr)+1)]\n    dp[0] = 1\n    dp[1] = 1\n    for i in range(2, len(arr)+1):\n        for j in range(i):\n            if arr[i-j] <= arr[i-1]:\n                dp[i] += dp[i-j]\n    return dp[-1]"
    },
    {
      "rank": 75,
      "score": 2.768291153593769,
      "candidate": "def num_of_partitions(n, m):\n    dp = [[0 for _ in range(m+1)] for _ in range(n+1)]\n    dp[0][0] = 1\n    for i in range(1, n+1):\n        for j in range(1, m+1):\n            if i == j:\n                dp[i][j] = dp[i-1][j]\n            else:\n                dp[i][j] = dp[i-1][j] + dp[i][j-1]\n    return dp[n][m]\n\n\ndef main():\n    n = 6\n    m = 3\n    print(num_of_partitions(n, m))\n\n\nmain()"
    },
    {
      "rank": 76,
      "score": 2.7671351232148718,
      "candidate": "def num_ways(n, m):\n    if n == m:\n        return 1\n    return num_ways(n-1, m) + num_ways(n, m-1)\n\nn = int(input())\nm = int(input())\n\nprint(num_ways(n, m))"
    },
    {
      "rank": 77,
      "score": 2.749121478207732,
      "candidate": "def partition(a):\n    n = len(a)\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n == 3:\n        return 4\n    if n == 4:\n        return 6\n    if n == 5:\n        return 8\n\n    dp = [0] * (n+1)\n    dp[0] = 1\n    dp[1] = 1\n    dp[2] = 1\n    dp[3] = 1\n    dp[4] = 1\n    dp[5] = 1\n    dp[6] = 1\n    dp[7] = 1\n    dp[8] = 1\n    dp[9] = 1\n\n    for i in range(n+1):\n        for j in range(i, n+1):\n            if a[i-1] <= a[j-1]:\n                dp[i] += dp[j]\n    return dp[n]\n\n\nprint(partition([1, 3, 5, 7, 9, 11, 13]))"
    },
    {
      "rank": 78,
      "score": 2.7408648908631763,
      "candidate": "def partition(arr, n):\n    dp = [[0 for i in range(n + 1)] for j in range(n + 1)]\n    dp[0][0] = 1\n    for i in range(1, n + 1):\n        for j in range(1, n + 1):\n            if i == j:\n                dp[i][j] = 1\n            elif arr[i - 1] <= j:\n                dp[i][j] = dp[i - 1][j]\n            else:\n                dp[i][j] = dp[i - 1][j - arr[i - 1]] + dp[i - 1][j]\n    return dp[n][n]\n\n\ndef partition2(arr, n):\n    dp = [[0 for i in range(n + 1)] for j in range(n + 1)]\n    dp[0][0] = 1\n    for i in range(1, n + 1):\n        for j in range(1, n + 1):\n            if i == j:\n                dp[i][j] = 1\n            elif arr[i - 1] <= j:\n                dp[i][j] = dp[i - 1][j]\n            else:\n                dp[i][j] = dp[i - 1][j - arr[i - 1]] + dp[i - 1][j]\n    return dp[n][n]\n\n\nif __name__ == '__main__':\n    print(partition([1, 2, 3, 4, 5], 3))\n    print(partition2([1, 2, 3, 4, 5], 3))"
    },
    {
      "rank": 79,
      "score": 2.7278086377374087,
      "candidate": "from typing import List\n\n\nclass Solution:\n    # @param A : list of integers\n    # @return an integer\n    def numWays(self, A: List[int]) -> int:\n        if len(A) < 2:\n            return 0\n\n        dp = [0 for _ in range(len(A))]\n        dp[0] = 1\n        dp[1] = 1\n        for i in range(2, len(A)):\n            dp[i] = dp[i - 1] + dp[i - 2]\n\n        return dp[len(A) - 1]\n\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    print(sol.numWays([1, 2, 3, 4, 5]))\n    print(sol.numWays([4, 2, 1, 5, 3]))"
    },
    {
      "rank": 80,
      "score": 2.6996806550405976,
      "candidate": "def count_partitions(nums):\n    if len(nums) <= 1:\n        return 1\n    return count_partitions_helper(nums, 0, 0)\n\n\ndef count_partitions_helper(nums, index, count):\n    if index >= len(nums):\n        return 0\n    if nums[index] <= count:\n        return count_partitions_helper(nums, index + 1, count)\n    return count_partitions_helper(nums, index + 1, count + nums[index])\n\n\nassert count_partitions([1, 2, 3, 4]) == 1\nassert count_partitions([1, 2, 3, 4, 5]) == 1\nassert count_partitions([1, 2, 3, 4, 5, 6]) == 2\nassert count_partitions([1, 2, 3, 4, 5, 6, 7]) == 2\nassert count_partitions([1, 2, 3, 4, 5, 6, 7, 8]) == 4\nassert count_partitions([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 2\nassert count_partitions([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]) == 2\nassert count_partitions([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17]) == 3\nassert count_partitions([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92,"
    },
    {
      "rank": 81,
      "score": 2.6991466938853015,
      "candidate": "def num_ways(n):\n    dp = [0] * (n+1)\n    dp[0] = 1\n    dp[1] = 1\n\n    for i in range(2, n+1):\n        for j in range(i):\n            if i % j == 0:\n                dp[i] += dp[j]\n\n    return dp[n]\n\nprint(num_ways(7))"
    },
    {
      "rank": 82,
      "score": 2.677440122697438,
      "candidate": "def partition(nums):\n    # Write your code here\n    if len(nums) == 0:\n        return 0\n    elif len(nums) == 1:\n        return 1\n    else:\n        return (nums[0] + partition(nums[1:])) % (10**9 + 7)\n\nif __name__ == '__main__':\n    print(partition([1, 2, 3, 4, 5, 6, 7, 8, 9]))"
    },
    {
      "rank": 83,
      "score": 2.6615389998470205,
      "candidate": "def number_of_ways(nums):\n    \"\"\"\n    :type nums: List[int]\n    :rtype: int\n    \"\"\"\n    if len(nums) <= 1:\n        return 1\n    if nums[0] == 1:\n        return 1\n    if nums[1] == 1:\n        return 1\n\n    nums.sort()\n\n    return number_of_ways(nums[1:]) + number_of_ways(nums[:-1])\n\n\nif __name__ == \"__main__\":\n    print(number_of_ways([1, 2, 3]))"
    },
    {
      "rank": 84,
      "score": 2.648973453061324,
      "candidate": "class Solution(object):\n    def numWays(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        dp = [0 for _ in range(n+1)]\n        dp[0] = 1\n        for i in range(1, n+1):\n            for j in range(i):\n                if j > 0 and dp[j] + dp[i-j] <= i:\n                    dp[i] += dp[j]\n        return dp[n]"
    },
    {
      "rank": 85,
      "score": 2.6400778958026456,
      "candidate": "def num_partitions(n):\n    if n <= 1:\n        return 1\n    dp = [0] * (n + 1)\n    dp[0] = 1\n    dp[1] = 1\n    dp[2] = 1\n\n    for i in range(3, n + 1):\n        for j in range(1, i):\n            dp[i] += dp[j - 1]\n\n    return dp[n]\n\n\nif __name__ == \"__main__\":\n    print(num_partitions(5))"
    },
    {
      "rank": 86,
      "score": 2.580391238388681,
      "candidate": "def partition(arr):\n    if len(arr) == 0:\n        return 0\n    if len(arr) == 1:\n        return 1\n\n    dp = [0] * (len(arr) + 1)\n    dp[0] = 1\n    dp[1] = 1\n    for i in range(2, len(arr) + 1):\n        dp[i] = dp[i - 1] + dp[i - 2]\n    return dp[len(arr)]\n\n\nif __name__ == \"__main__\":\n    print(partition([0, 1, 2, 3, 4]))\n    print(partition([0, 1, 2, 3, 4, 5]))\n    print(partition([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]))\n    print(partition([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]))"
    },
    {
      "rank": 87,
      "score": 2.5459879622393946,
      "candidate": "def count_ways(n):\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n == 3:\n        return 4\n    if n == 4:\n        return 8\n    if n == 5:\n        return 16\n\n    dp = [0 for _ in range(n+1)]\n    dp[0] = 1\n    dp[1] = 1\n    dp[2] = 1\n    dp[3] = 1\n    dp[4] = 1\n    dp[5] = 1\n\n    for i in range(1, n+1):\n        for j in range(i+1, n+1):\n            if i == j:\n                dp[i] += dp[i-j]\n            elif i < j:\n                dp[i] += dp[i-j]\n\n    return dp[n]\n\n\nif __name__ == '__main__':\n    print(count_ways(5))"
    },
    {
      "rank": 88,
      "score": 2.493584439832788,
      "candidate": "def num_ways(nums, k):\n    \"\"\"\n    :type nums: List[int]\n    :type k: int\n    :rtype: int\n    \"\"\"\n    if k == 0:\n        return 1\n    if k == 1:\n        return len(nums)\n\n    dp = [0] * (k + 1)\n    dp[0] = 1\n    dp[1] = 1\n\n    for i in range(2, k + 1):\n        for j in range(0, i):\n            if nums[j] <= nums[i - 1]:\n                dp[i] += dp[i - 1]\n\n    return dp[k]"
    },
    {
      "rank": 89,
      "score": 2.4711445355220496,
      "candidate": "def num_ways(n):\n    if n == 1:\n        return 1\n\n    if n == 2:\n        return 2\n\n    if n == 3:\n        return 4\n\n    return num_ways(n - 1) + num_ways(n - 2) + num_ways(n - 3)\n\n\nassert num_ways(3) == 1\nassert num_ways(4) == 2\nassert num_ways(5) == 4"
    },
    {
      "rank": 90,
      "score": 2.446832512996986,
      "candidate": "def count_ways(nums):\n    if len(nums) == 0:\n        return 1\n    elif len(nums) == 1:\n        return 0\n    else:\n        return count_ways(nums[1:]) + count_ways(nums[:-1])\n\n\nprint(count_ways([1, 2, 3, 5]))"
    },
    {
      "rank": 91,
      "score": 2.4245032112888487,
      "candidate": "def number_of_ways(n, k):\n    if n == 0:\n        return 1\n    if n == 1:\n        return k\n    if k == 0:\n        return 0\n\n    return number_of_ways(n - 1, k) + number_of_ways(n - 1, k - 1)\n\n\nprint(number_of_ways(4, 3))"
    },
    {
      "rank": 92,
      "score": 2.389578175014489,
      "candidate": "def num_of_ways(nums):\n    if len(nums) == 1:\n        return 1\n\n    if len(nums) == 2:\n        return 2\n\n    count = 0\n\n    for i in range(1, len(nums)):\n        if nums[i] % nums[i - 1] == 0:\n            count += num_of_ways(nums[i:])\n\n    return count\n\n\nif __name__ == \"__main__\":\n    assert num_of_ways([2, 3, 5, 7, 1]) == 2\n    assert num_of_ways([1, 2, 3, 4]) == 1\n    assert num_of_ways([1, 2, 3, 4, 5]) == 2"
    },
    {
      "rank": 93,
      "score": 2.3359069755507846,
      "candidate": "class Solution:\n    def numWays(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        if len(nums) == 0:\n            return 0\n        if len(nums) == 1:\n            return 1\n        dp = [0] * len(nums)\n        dp[0] = 1\n        dp[1] = 1\n        for i in range(2, len(nums)):\n            dp[i] = dp[i - 1] + dp[i - 2]\n        return dp[-1]"
    },
    {
      "rank": 94,
      "score": 2.287625906893272,
      "candidate": "def num_ways(nums, n):\n    if n == 0:\n        return 1\n    if n == 1:\n        return 0\n    if n == 2:\n        return 1 if nums[0] < nums[1] else 0\n    if n == 3:\n        return 1 if nums[0] < nums[1] and nums[0] < nums[2] else 0\n    \n    return num_ways(nums[1:], n - 1) + num_ways(nums, n - 2)\n\n\nif __name__ == \"__main__\":\n    print(num_ways([1, 2, 3, 4], 4))"
    },
    {
      "rank": 95,
      "score": 2.260739004816286,
      "candidate": "class Solution:\n    def numWays(self, nums: List[int]) -> int:\n        if len(nums) == 0:\n            return 0\n        dp = [1] * len(nums)\n        dp[0] = 0\n        dp[1] = 1\n        for i in range(2, len(nums)):\n            dp[i] = dp[i-1] + dp[i-2]\n        return dp[len(nums)]\n\n\nif __name__ == \"__main__\":\n    nums = [1, 2, 3]\n    print(Solution().numWays(nums))"
    },
    {
      "rank": 96,
      "score": 2.137541083743484,
      "candidate": "def bell(arr):\n    if len(arr) == 1:\n        return 1\n    dp = [0] * (len(arr) + 1)\n    dp[0] = 1\n    dp[1] = 1\n    for i in range(2, len(arr) + 1):\n        for j in range(1, i):\n            if arr[i - j] <= arr[i]:\n                dp[i] += dp[i - j]\n    return dp[len(arr)]\n\n\nif __name__ == \"__main__\":\n    print(bell([1, 2, 3, 4, 5, 6, 7, 8, 9]))"
    },
    {
      "rank": 97,
      "score": 2.118479922318633,
      "candidate": "class Solution(object):\n    def numWays(self, n, k):\n        \"\"\"\n        :type n: int\n        :type k: int\n        :rtype: int\n        \"\"\"\n        dp = [0] * (n + 1)\n        dp[0] = 1\n        for i in range(1, n + 1):\n            for j in range(1, k + 1):\n                if i >= j:\n                    dp[i] += dp[i - j]\n\n        return dp[n]\n\n\nif __name__ == \"__main__\":\n    s = Solution()\n    assert s.numWays(2, 3) == 1\n    assert s.numWays(5, 3) == 2\n    assert s.numWays(6, 3) == 2\n    assert s.numWays(8, 3) == 4\n    assert s.numWays(9, 3) == 4\n    assert s.numWays(7, 3) == 4\n    assert s.numWays(10, 3) == 4"
    },
    {
      "rank": 98,
      "score": 2.043359877671101,
      "candidate": "def num_ways(n, k):\n    dp = [0] * (n + 1)\n    dp[0] = 1\n    for i in range(1, n + 1):\n        for j in range(k + 1):\n            if i - j < 0:\n                break\n            dp[i] += dp[i - j]\n    return dp[n]\n\n\nif __name__ == \"__main__\":\n    print(num_ways(5, 2))"
    },
    {
      "rank": 99,
      "score": 2.006215542699554,
      "candidate": "def num_ways(arr):\n    # Fill this in.\n    if len(arr) == 0:\n        return 0\n    if len(arr) == 1:\n        return 1\n    if len(arr) == 2:\n        return arr[0] * arr[1]\n    if len(arr) == 3:\n        return arr[0] * arr[1] * arr[2]\n    if len(arr) == 4:\n        return arr[0] * arr[1] * arr[2] * arr[3]\n    if len(arr) == 5:\n        return arr[0] * arr[1] * arr[2] * arr[3] * arr[4]\n\n\nprint(num_ways([1, 2, 3, 4, 5]))"
    },
    {
      "rank": 100,
      "score": 1.6901274479551278,
      "candidate": "def partition(n, k):\n    dp = [[0] * (k + 1) for _ in range(n + 1)]\n    dp[0][0] = 1\n\n    for i in range(1, n + 1):\n        for j in range(1, k + 1):\n            if i == j:\n                dp[i][j] = 1\n            else:\n                dp[i][j] = dp[i - 1][j]\n\n    return dp[n][k]\n\n\nprint(partition(2, 2))\nprint(partition(3, 2))"
    }
  ]
}