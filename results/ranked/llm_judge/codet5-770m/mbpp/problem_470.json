{
  "timestamp": "2025-09-14T15:54:39.778275",
  "method": "improved_llm_judge",
  "judge_model": "codellama/CodeLlama-7b-Python-hf",
  "target_model": "codet5-770m",
  "dataset": "mbpp",
  "problem_number": 470,
  "total_candidates": 100,
  "results": [
    {
      "rank": 1,
      "score": 10.0,
      "candidate": "class Solution:\n    def subsetSum(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: bool\n        \"\"\"\n        nums.sort()\n        for i in range(len(nums)):\n            if i == 0 or nums[i]!= nums[i - 1]:\n                for j in range(i + 1, len(nums)):\n                    if nums[j] == target:\n                        return True\n        return False"
    },
    {
      "rank": 2,
      "score": 10.0,
      "candidate": "def subset_sum(nums, target_sum):\n    subset_sum_dict = dict()\n    for i in range(len(nums)):\n        subset_sum_dict[nums[i]] = True\n\n    for i in range(len(nums)):\n        for j in range(target_sum - nums[i]):\n            if (j in subset_sum_dict) and (j!= nums[i]):\n                return True\n\n    return False\n\n\ndef main():\n    print(subset_sum([1, 2, 3, 4, 5], 6))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 3,
      "score": 10.0,
      "candidate": "class Solution:\n    def canPartition(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: bool\n        \"\"\"\n        if not nums:\n            return False\n        if target == 0:\n            return True\n\n        nums.sort()\n        for i in range(len(nums)):\n            if i == 0 or nums[i]!= nums[i - 1]:\n                if i + 1 < len(nums) and nums[i] == nums[i + 1]:\n                    continue\n                return self.canPartition(nums[i + 1:], target - nums[i])\n        return False\n\n\nif __name__ == \"__main__\":\n    sol = Solution()\n    nums = [1, 2, 3, 4, 5]\n    target = 6\n    print(sol.canPartition(nums, target))"
    },
    {
      "rank": 4,
      "score": 10.0,
      "candidate": "class Solution:\n    def subset_sum(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: bool\n        \"\"\"\n        if target <= 0:\n            return False\n        for i in range(len(nums)):\n            for j in range(i+1, len(nums)):\n                if nums[i] + nums[j] == target:\n                    return True\n        return False\n\n\nif __name__ == \"__main__\":\n    s = Solution()\n    nums = [1, 2, 3, 4]\n    target = 6\n    print(s.subset_sum(nums, target))"
    },
    {
      "rank": 5,
      "score": 10.0,
      "candidate": "def has_subset_sum(arr, s):\n    if not arr:\n        return False\n    if s == 0:\n        return True\n    for i in arr:\n        if s - i in arr:\n            return True\n    return False\n\n\narr = [1, 2, 3, 4]\ns = 5\nprint(has_subset_sum(arr, s))"
    },
    {
      "rank": 6,
      "score": 10.0,
      "candidate": "class Solution:\n    def has_subset(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: bool\n        \"\"\"\n        nums.sort()\n        for i in range(len(nums) - 1):\n            if nums[i] + nums[i+1] == target:\n                return True\n        return False\n\n\nif __name__ == \"__main__\":\n    print(Solution().has_subset([1, 2, 3, 4], 6))"
    },
    {
      "rank": 7,
      "score": 10.0,
      "candidate": "class Solution(object):\n    def subsetSum(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: bool\n        \"\"\"\n        if not nums:\n            return False\n        if not target:\n            return True\n        nums.sort()\n        sum_map = {}\n        for i, num in enumerate(nums):\n            if num not in sum_map:\n                sum_map[target - num] = True\n            else:\n                return True\n        return False\n\nif __name__ == \"__main__\":\n    s = Solution()\n    print(s.subsetSum([1, 2, 3, 4, 5], 6))\n    print(s.subsetSum([1, 2, 3, 4, 5], 7))\n    print(s.subsetSum([1, 2, 3, 4, 5], 8))\n    print(s.subsetSum([1, 2, 3, 4, 5], 9))"
    },
    {
      "rank": 8,
      "score": 10.0,
      "candidate": "def subset_sum(nums, target):\n    nums = sorted(nums)\n    n = len(nums)\n    if n == 0:\n        return False\n    if n == 1:\n        return nums[0] == target\n    for i in range(n):\n        if nums[i] == target:\n            return True\n        elif i > 0 and nums[i] > target:\n            continue\n        elif i < n - 1 and nums[i] < target:\n            continue\n        else:\n            return False\n    return False\n\nprint(subset_sum([1,2,3,4,5,6,7], 8))\nprint(subset_sum([1,2,3,4,5,6,7], 9))"
    },
    {
      "rank": 9,
      "score": 10.0,
      "candidate": "def subset_sum_equal_to_sum(arr, sum):\n    \"\"\"\n    :type arr: List[int]\n    :type sum: int\n    :rtype: bool\n    \"\"\"\n    if sum == 0:\n        return True\n    else:\n        for i in range(len(arr)):\n            if arr[i] == sum:\n                if subset_sum_equal_to_sum(arr[1:], sum-arr[i]):\n                    return True\n        return False\n\n\nif __name__ == \"__main__\":\n    print(subset_sum_equal_to_sum([1, 2, 3], 6))\n    print(subset_sum_equal_to_sum([1, 2, 3], 7))\n    print(subset_sum_equal_to_sum([1, 2, 3], 8))"
    },
    {
      "rank": 10,
      "score": 10.0,
      "candidate": "def subset_sum(arr, s):\n    \"\"\"\n    :type arr: List[int]\n    :type s: int\n    :rtype: bool\n    \"\"\"\n    if len(arr) == 0 or s <= 0:\n        return False\n\n    dp = [False] * (s + 1)\n    dp[0] = True\n\n    for i in range(1, s + 1):\n        if i in arr:\n            dp[i] = dp[i - arr[i - 1]]\n\n    return dp[s]\n\n\nif __name__ == \"__main__\":\n    print(subset_sum([1, 2, 3, 4], 6))\n    print(subset_sum([1, 2, 3, 4], 7))\n    print(subset_sum([1, 2, 3, 4], 8))\n    print(subset_sum([1, 2, 3, 4], 11))"
    },
    {
      "rank": 11,
      "score": 10.0,
      "candidate": "class Solution(object):\n    def subsetSum(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: bool\n        \"\"\"\n        if len(nums) == 0:\n            return False\n\n        dict_nums = {}\n        for i in range(len(nums)):\n            dict_nums[nums[i]] = i\n\n        for i in range(len(nums)):\n            if target - nums[i] in dict_nums.keys():\n                return True\n\n        return False\n\n\ns = Solution()\nprint(s.subsetSum([1, 2, 3, 4], 6))\nprint(s.subsetSum([1, 2, 3, 4], 7))\nprint(s.subsetSum([1, 2, 3, 4], 8))\nprint(s.subsetSum([1, 2, 3, 4], 9))"
    },
    {
      "rank": 12,
      "score": 9.0,
      "candidate": "def subset_sum(nums, sum):\n    nums_set = set(nums)\n    if sum in nums_set:\n        return True\n    return False\n\n\nif __name__ == \"__main__\":\n    print(subset_sum([1, 2, 3, 4], 7))\n    print(subset_sum([1, 2, 3, 4], 8))\n    print(subset_sum([1, 2, 3, 4], 10))\n    print(subset_sum([1, 2, 3, 4], 12))"
    },
    {
      "rank": 13,
      "score": 8.0,
      "candidate": "def subset_sum(nums, sum):\n    if sum < 0:\n        return False\n    if sum == 0:\n        return True\n\n    for num in nums:\n        if subset_sum(nums[1:], sum - num):\n            return True\n    return False\n\n\nif __name__ == \"__main__\":\n    print(subset_sum([1, 2, 3, 4], 6))\n    print(subset_sum([2, 3, 4, 5], 5))\n    print(subset_sum([2, 3, 4, 5], 10))\n    print(subset_sum([2, 3, 4, 5], 5))"
    },
    {
      "rank": 14,
      "score": 8.0,
      "candidate": "def subset_sum(set, sum):\n    set_length = len(set)\n    if set_length == 0:\n        return False\n    elif set_length == 1:\n        if set[0] == sum:\n            return True\n    else:\n        if set[0] == sum:\n            return subset_sum(set[1:], sum - set[0])\n        else:\n            return subset_sum(set[1:], sum)\n\n\nif __name__ == '__main__':\n    set_1 = [1, 2, 3, 4]\n    sum_1 = 5\n    set_2 = [2, 3, 4, 5]\n    sum_2 = 7\n    set_3 = [1, 2, 3, 4, 5]\n    sum_3 = 8\n    print(subset_sum(set_1, sum_1))\n    print(subset_sum(set_2, sum_2))\n    print(subset_sum(set_3, sum_3))"
    },
    {
      "rank": 15,
      "score": 8.0,
      "candidate": "def subset(nums, target):\n    if not nums:\n        return False\n\n    nums.sort()\n    sum_seen = set()\n\n    for num in nums:\n        if target - num in sum_seen:\n            return True\n        else:\n            sum_seen.add(num)\n\n    return False\n\n\nif __name__ == \"__main__\":\n    assert subset([1, 2, 3, 4], 6) == True\n    assert subset([1, 2, 3, 4], 7) == False\n    assert subset([1, 2, 3, 4], 8) == True\n    assert subset([1, 2, 3, 4], 9) == False"
    },
    {
      "rank": 16,
      "score": 8.0,
      "candidate": "def subset_sum(set_of_sum, target_sum):\n    set_of_sum.sort()\n    for i in range(len(set_of_sum)):\n        if set_of_sum[i] == target_sum:\n            return True\n    return False\n\n\nif __name__ == '__main__':\n    print(subset_sum([2, 2, 4, 4], 4))"
    },
    {
      "rank": 17,
      "score": 8.0,
      "candidate": "def subsets(arr, target):\n    s = set(arr)\n    return sum(s.intersection(target)) == 0"
    },
    {
      "rank": 18,
      "score": 8.0,
      "candidate": "def subset_sum(nums, target):\n    if not nums:\n        return False\n\n    nums_set = set(nums)\n    for num in nums_set:\n        if num == target:\n            return True\n        if num < target:\n            return False\n\n    return False\n\n\nif __name__ == \"__main__\":\n    print(subset_sum([1, 2, 3, 4, 5], 6))"
    },
    {
      "rank": 19,
      "score": 8.0,
      "candidate": "def subset_sum(nums, target):\n    if len(nums) == 0:\n        return False\n    if len(nums) == 1:\n        if nums[0] == target:\n            return True\n        else:\n            return False\n\n    if nums[0] > target:\n        return False\n\n    for i in range(len(nums)):\n        if nums[i] == target:\n            if subset_sum(nums[1:], target-nums[i]):\n                return True\n\n    return False\n\n\nprint(subset_sum([1, 2, 3, 4, 5], 8))\nprint(subset_sum([1, 2, 3, 4, 5], 6))\nprint(subset_sum([1, 2, 3, 4, 5], 7))\nprint(subset_sum([1, 2, 3, 4, 5], 9))"
    },
    {
      "rank": 20,
      "score": 8.0,
      "candidate": "def subset_sum(nums, target):\n    nums = sorted(nums)\n    for i in range(len(nums)):\n        if nums[i] + target < nums[i + 1]:\n            return True\n    return False\n\n\nif __name__ == '__main__':\n    print(subset_sum([1, 2, 3, 4], 6))\n    print(subset_sum([1, 2, 3, 4], 6))\n    print(subset_sum([1, 2, 3, 4], 8))\n    print(subset_sum([1, 2, 3, 4], 8))"
    },
    {
      "rank": 21,
      "score": 8.0,
      "candidate": "def subset_sum(nums, target):\n    if target == 0:\n        return True\n    if target < 0:\n        return False\n\n    for num in nums:\n        if subset_sum(nums[1:], target - num):\n            return True\n\n    return False\n\n\nif __name__ == \"__main__\":\n    print(subset_sum([1, 2, 3, 4], 7))\n    print(subset_sum([1, 2, 3, 4], 8))\n    print(subset_sum([1, 2, 3, 4], 0))"
    },
    {
      "rank": 22,
      "score": 8.0,
      "candidate": "def subset_sum(nums, target):\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\n\n\nif __name__ == \"__main__\":\n    print(subset_sum([1, 2, 3, 4], 6))"
    },
    {
      "rank": 23,
      "score": 8.0,
      "candidate": "def subset_sum(nums, target):\n    nums.sort()\n    for i in range(len(nums)):\n        if nums[i] == target:\n            return True\n    return False\n\n\nprint(subset_sum([3, 4, 7, 8], 8))\nprint(subset_sum([3, 4, 7, 8], 4))\nprint(subset_sum([3, 4, 7, 8], 9))\nprint(subset_sum([3, 4, 7, 8], 5))\nprint(subset_sum([3, 4, 7, 8], 10))"
    },
    {
      "rank": 24,
      "score": 8.0,
      "candidate": "def subsets_sum_equal_to_sum(nums, target_sum):\n    nums_sum = {num: nums.count(num) for num in nums}\n    return any(num in nums_sum for num in range(target_sum))\n\n\nif __name__ == '__main__':\n    assert subsets_sum_equal_to_sum([2, 3, 4], 6) is True\n    assert subsets_sum_equal_to_sum([1, 2, 3, 4, 5], 6) is False\n    assert subsets_sum_equal_to_sum([2, 3, 4, 5], 8) is False\n    assert subsets_sum_equal_to_sum([1, 2, 3, 4, 5], 10) is True"
    },
    {
      "rank": 25,
      "score": 8.0,
      "candidate": "def subset_sum(arr, sum):\n    if sum == 0:\n        return True\n    if sum < 0:\n        return False\n    dp = [False] * (sum + 1)\n    dp[0] = True\n    for i in range(1, sum + 1):\n        for j in range(0, i):\n            if dp[i] and arr[j] <= i:\n                dp[i] = dp[i] or dp[i - arr[j]]\n    return dp[sum]\n\n\nif __name__ == \"__main__\":\n    assert subset_sum([1, 2, 3, 4, 5], 6) == True\n    assert subset_sum([1, 2, 3, 4, 5], 7) == False\n    assert subset_sum([1, 2, 3, 4, 5], 8) == False\n    assert subset_sum([1, 2, 3, 4, 5], 9) == True"
    },
    {
      "rank": 26,
      "score": 8.0,
      "candidate": "def subset_sum(array, target):\n    if not array or not target:\n        return False\n\n    hash_map = {}\n    for element in array:\n        if target - element in hash_map:\n            return True\n        hash_map[element] = True\n\n    return False\n\n\nprint(subset_sum([1, 2, 3, 4], 7))"
    },
    {
      "rank": 27,
      "score": 8.0,
      "candidate": "def check_subset(arr, sum):\n    sum_set = set()\n    for i in range(len(arr)):\n        sum_set.add(arr[i])\n    return sum_set == {sum}"
    },
    {
      "rank": 28,
      "score": 8.0,
      "candidate": "def subset_sum(nums, target_sum):\n    sum_count = {}\n    for num in nums:\n        if num in sum_count:\n            sum_count[num] += 1\n        else:\n            sum_count[num] = 1\n\n    for num in nums:\n        if target_sum - num in sum_count:\n            return True\n    return False\n\n\nif __name__ == \"__main__\":\n    assert subset_sum([1, 2, 3, 4], 6) == True\n    assert subset_sum([1, 2, 3, 4], 5) == False\n    assert subset_sum([1, 2, 3, 4], 8) == True\n    assert subset_sum([1, 2, 3, 4], 9) == False"
    },
    {
      "rank": 29,
      "score": 8.0,
      "candidate": "def subset_sum(nums, sum):\n    if sum == 0:\n        return True\n    for num in nums:\n        if subset_sum(nums[1:], sum - num):\n            return True\n    return False\n\nprint(subset_sum([1,2,3,4], 7))"
    },
    {
      "rank": 30,
      "score": 8.0,
      "candidate": "def subset_sum(nums, target):\n    nums.sort()\n    for i in range(len(nums)):\n        if i == 0 or nums[i]!= nums[i - 1]:\n            if i == 0 and nums[i] == nums[i - 1]:\n                continue\n            if target - nums[i] in nums:\n                return True\n    return False\n\n\nif __name__ == '__main__':\n    nums = [1, 3, 5, 5, 7]\n    target = 10\n    print(subset_sum(nums, target))"
    },
    {
      "rank": 31,
      "score": 8.0,
      "candidate": "def subset_sum(arr, s):\n    if s == 0:\n        return True\n    if s < 0:\n        return False\n\n    for i in range(len(arr)):\n        if arr[i] > s:\n            break\n        if subset_sum(arr[:i] + arr[i+1:], s - arr[i]):\n            return True\n    return False\n\n\nif __name__ == \"__main__\":\n    print(subset_sum([-1, 3, -2, 5, -4], 6))\n    print(subset_sum([-1, 3, -2, 5, -4], 0))\n    print(subset_sum([-1, 3, -2, 5, -4], 1))"
    },
    {
      "rank": 32,
      "score": 8.0,
      "candidate": "def subset_sum(nums, sum):\n    result = False\n    if sum == 0:\n        return True\n    if sum < 0:\n        return False\n    for i in range(len(nums)):\n        if subset_sum(nums[i+1:], sum - nums[i]):\n            result = True\n    return result\n\n\nif __name__ == \"__main__\":\n    print(subset_sum([1, 2, 3, 4, 5], 6))"
    },
    {
      "rank": 33,
      "score": 8.0,
      "candidate": "def subset_sum(arr, s):\n    # write your code here\n    arr_sum = {}\n    for i in range(len(arr)):\n        arr_sum[arr[i]] = arr_sum.get(arr[i], 0) + 1\n\n    for i in range(len(arr)):\n        if arr_sum[s - arr[i]] > 0:\n            return True\n    return False\n\nprint(subset_sum([1, 2, 3, 4, 5, 6, 7, 8], 9))\nprint(subset_sum([1, 2, 3, 4, 5, 6, 7, 8], 7))\nprint(subset_sum([1, 2, 3, 4, 5, 6, 7, 8], 10))\nprint(subset_sum([1, 2, 3, 4, 5, 6, 7, 8], 11))\nprint(subset_sum([1, 2, 3, 4, 5, 6, 7, 8], 15))"
    },
    {
      "rank": 34,
      "score": 8.0,
      "candidate": "def subset(nums, sum):\n    if sum == 0:\n        return True\n    for i in range(len(nums)):\n        if subset(nums[i+1:], sum-nums[i]):\n            return True\n    return False\n\nprint(subset([1,2,3,4], 6))"
    },
    {
      "rank": 35,
      "score": 8.0,
      "candidate": "def subset_sum(nums, target):\n    set_sum = set(nums)\n    if target in set_sum:\n        return True\n    else:\n        return False\n\n\nif __name__ == '__main__':\n    print(subset_sum([1, 2, 3, 4, 5], 7))\n    print(subset_sum([1, 2, 3, 4, 5], 7))\n    print(subset_sum([1, 2, 3, 4, 5], 8))\n    print(subset_sum([1, 2, 3, 4, 5], 10))"
    },
    {
      "rank": 36,
      "score": 8.0,
      "candidate": "def subset_sum(nums, target_sum):\n    nums.sort()\n    for i in range(len(nums)):\n        if nums[i] == target_sum:\n            return True\n    return False\n\n\ndef main():\n    nums = [1, 2, 3, 4, 5]\n    target_sum = 6\n    print(subset_sum(nums, target_sum))\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 37,
      "score": 8.0,
      "candidate": "def subset(nums, target):\n    nums.sort()\n    for i in range(len(nums)):\n        for j in range(i + 1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return True\n    return False\n\nprint(subset([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 10))"
    },
    {
      "rank": 38,
      "score": 8.0,
      "candidate": "def subset_sum(arr, target):\n    arr.sort()\n    n = len(arr)\n\n    for i in range(n):\n        for j in range(i + 1, n):\n            if arr[i] + arr[j] == target:\n                return True\n    return False\n\n\nif __name__ == '__main__':\n    assert subset_sum([1, 2, 2], 3) == True\n    assert subset_sum([1, 2, 3, 4], 7) == False"
    },
    {
      "rank": 39,
      "score": 8.0,
      "candidate": "def subset_sum(arr, target):\n    set_sum = {0}\n    for i in arr:\n        if i in set_sum:\n            return True\n        else:\n            set_sum.add(target - i)\n    return False\n\n\nprint(subset_sum([1, 2, 3, 4, 5], 6))"
    },
    {
      "rank": 40,
      "score": 8.0,
      "candidate": "def subset_sum_equal_to(nums, target):\n    nums.sort()\n    for i in range(len(nums) - 1):\n        if nums[i] + nums[i+1] == target:\n            return True\n    return False\n\nprint(subset_sum_equal_to([1, 2, 3], 6))\nprint(subset_sum_equal_to([1, 2, 3], 7))\nprint(subset_sum_equal_to([1, 2, 3], 8))\nprint(subset_sum_equal_to([1, 2, 3], 10))\nprint(subset_sum_equal_to([1, 2, 3], 11))\nprint(subset_sum_equal_to([1, 2, 3], 12))"
    },
    {
      "rank": 41,
      "score": 8.0,
      "candidate": "def subset_sum(arr, s):\n    \"\"\"\n    :type arr: List[int]\n    :type s: int\n    :rtype: bool\n    \"\"\"\n    if len(arr) == 0:\n        return False\n    if s == 0:\n        return True\n    if s < 0:\n        return False\n    if arr[0] == s:\n        return subset_sum(arr[1:], s)\n    return subset_sum(arr[1:], s - arr[0])\n\n\nif __name__ == \"__main__\":\n    print(subset_sum([1, 2, 3, 4], 5))"
    },
    {
      "rank": 42,
      "score": 8.0,
      "candidate": "def subset_sum(arr, n, sum):\n    if sum == 0:\n        return True\n    for i in range(n):\n        if arr[i] > sum:\n            break\n        if subset_sum(arr, n, sum - arr[i]):\n            return True\n    return False\n\n\nprint(subset_sum([1, 2, 3, 4], 4, 6))"
    },
    {
      "rank": 43,
      "score": 8.0,
      "candidate": "def subset_sum(arr, s):\n    if s == 0:\n        return True\n    if s < 0:\n        return False\n\n    if s == arr[0]:\n        return subset_sum(arr[1:], s)\n    if s < arr[0]:\n        return False\n\n    for i in range(len(arr)):\n        if subset_sum(arr[i+1:], s - arr[i]):\n            return True\n    return False\n\n\nif __name__ == \"__main__\":\n    print(subset_sum([1, 2, 3, 4, 5, 6, 7], 9))"
    },
    {
      "rank": 44,
      "score": 8.0,
      "candidate": "def subset_sum(nums, target_sum):\n    nums.sort()\n    for i in range(len(nums) - 1):\n        if nums[i] + nums[i + 1] == target_sum:\n            return True\n    return False\n\n\nif __name__ == '__main__':\n    nums = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    target_sum = 10\n    print(subset_sum(nums, target_sum))"
    },
    {
      "rank": 45,
      "score": 8.0,
      "candidate": "def subset_sum(a, s):\n    n = len(a)\n    if s == 0:\n        return True\n    else:\n        if s < 0:\n            return False\n        else:\n            return subset_sum(a, s - a[0]) or subset_sum(a[1:], s)\n\n\nprint(subset_sum([1, 3, 2, 7, 4], 6))\nprint(subset_sum([1, 2, 3, 4, 5, 6], 7))\nprint(subset_sum([1, 2, 3, 4, 5, 6], 8))"
    },
    {
      "rank": 46,
      "score": 8.0,
      "candidate": "def subset_sum(arr, target):\n    if len(arr) == 0:\n        return False\n    if target < 0:\n        return False\n\n    # if there is only one element, return true\n    if len(arr) == 1:\n        return True\n\n    # if there are multiple elements, return false\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            if arr[i] + arr[j] == target:\n                return True\n    return False\n\n\nprint(subset_sum([1, 2, 3, 4, 5, 6, 7, 8], 8))"
    },
    {
      "rank": 47,
      "score": 8.0,
      "candidate": "def subset_sum(nums, sum):\n    return sum in nums and nums.count(sum) > 1\n\n\ndef subset_sum_2(nums, sum):\n    return sum in nums and nums.count(sum) == 1\n\n\nif __name__ == \"__main__\":\n    print(subset_sum([1, 2, 3, 4, 5], 5))\n    print(subset_sum([1, 2, 3, 4, 5], 6))\n    print(subset_sum([1, 2, 3, 4, 5], 7))\n    print(subset_sum([1, 2, 3, 4, 5], 8))\n    print(subset_sum([1, 2, 3, 4, 5], 9))\n    print(subset_sum([1, 2, 3, 4, 5], 11))"
    },
    {
      "rank": 48,
      "score": 8.0,
      "candidate": "class Solution(object):\n    def subsetSum(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: bool\n        \"\"\"\n        nums.sort()\n        for i in range(len(nums)-1):\n            if nums[i] + nums[i+1] == target:\n                return True\n        return False"
    },
    {
      "rank": 49,
      "score": 7.0,
      "candidate": "def subset_sum(nums, target):\n    if len(nums) == 0:\n        return True\n\n    target_sum = target - sum(nums)\n    if target_sum in nums:\n        return True\n\n    return False\n\n\nif __name__ == '__main__':\n    print(subset_sum([1,2,3,4,5,6], 8))\n    print(subset_sum([1,2,3,4,5,6], 9))\n    print(subset_sum([1,2,3,4,5,6], 10))\n    print(subset_sum([1,2,3,4,5,6], 11))\n    print(subset_sum([1,2,3,4,5,6], 12))\n    print(subset_sum([1,2,3,4,5,6], 13))"
    },
    {
      "rank": 50,
      "score": 1.0,
      "candidate": "class Solution:\n    def subsetSum(self, nums: List[int], target: int) -> bool:\n        nums.sort()\n        for i in range(len(nums)):\n            if i > 0 and nums[i] == nums[i - 1]:\n                continue\n            if i == 0 or nums[i]!= nums[i - 1]:\n                if i == len(nums) - 1:\n                    return False\n                if target - nums[i] == nums[i + 1]:\n                    return True\n        return False"
    },
    {
      "rank": 51,
      "score": 1.0,
      "candidate": "def subset_sum(arr, s):\n    # create a set\n    set_arr = set(arr)\n    # print(set_arr)\n    # check if there is any subset with the given sum\n    if sum(set_arr) == s:\n        return True\n    else:\n        return False\n\n\nif __name__ == '__main__':\n    print(subset_sum([1, 2, 3, 4, 5], 6))"
    },
    {
      "rank": 52,
      "score": 1.0,
      "candidate": "def subset_sum(arr, n, sum):\n    if sum == 0:\n        return True\n    if sum < 0:\n        return False\n    if sum < n:\n        return subset_sum(arr, n - sum, sum)\n    else:\n        return subset_sum(arr, sum, n)\n\n\narr = [0, 1, 2, 3]\nn = len(arr)\nsum = 4\nprint(subset_sum(arr, n, sum))"
    },
    {
      "rank": 53,
      "score": 1.0,
      "candidate": "def subset_sum(set_, sum):\n    sum_set = set(set_)\n    if sum_set == set_:\n        return True\n    else:\n        return False\n\n\nprint(subset_sum([1, 2, 3], 4))\nprint(subset_sum([1, 2, 3, 4], 5))"
    },
    {
      "rank": 54,
      "score": 1.0,
      "candidate": "def subset_sum(arr, target):\n    if sum(arr) == target:\n        return True\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == target:\n                return True\n    return False\n\n\nprint(subset_sum([1, 2, 3, 4, 5], 7))\nprint(subset_sum([1, 2, 3, 4, 5], 8))\nprint(subset_sum([1, 2, 3, 4, 5], 11))"
    },
    {
      "rank": 55,
      "score": 1.0,
      "candidate": "def subset_sum(arr, s):\n    if s == 0:\n        return True\n\n    # Base Case\n    if s == 1:\n        return False\n\n    # Create a list to store the subsets\n    subsets = []\n\n    # Loop through each element in the array\n    for elem in arr:\n        # Check if the subset sum is equal to the current sum\n        if subset_sum(arr, s - elem) == True:\n            # Add the subset to the list\n            subsets.append(elem)\n\n    # Return the result\n    return len(subsets) > 0\n\n\nif __name__ == '__main__':\n    assert subset_sum([1, 2, 3, 4, 5], 6) == True\n    assert subset_sum([1, 2, 3, 4, 5], 6) == False\n    assert subset_sum([1, 2, 3, 4, 5], 8) == True\n    assert subset_sum([1, 2, 3, 4, 5], 6) == False\n    assert subset_sum([1, 2, 3, 4, 5], 7) == False\n    assert subset_sum([1, 2, 3, 4, 5], 8) == False"
    },
    {
      "rank": 56,
      "score": 1.0,
      "candidate": "def subset_sum(arr, target):\n    arr_set = set(arr)\n    if sum(arr_set) == target:\n        return True\n    else:\n        return False\n\n\ndef subset_sum_recursion(arr, target):\n    if sum(arr) == target:\n        return True\n    else:\n        if sum(arr) > target:\n            return False\n        else:\n            return subset_sum_recursion(arr[1:], target - arr[0]) or subset_sum_recursion(arr[1:], target)\n\n\nprint(subset_sum([1, 2, 3], 5))\nprint(subset_sum([1, 2, 3], 8))\nprint(subset_sum([1, 2, 3], 12))\nprint(subset_sum_recursion([1, 2, 3], 5))\nprint(subset_sum_recursion([1, 2, 3], 8))\nprint(subset_sum_recursion([1, 2, 3], 12))"
    },
    {
      "rank": 57,
      "score": 1.0,
      "candidate": "def subset_sum(nums, target):\n    nums.sort()\n    for i in range(len(nums) - 1):\n        if nums[i] + nums[i + 1] == target:\n            return True\n    return False\n\n\nif __name__ == \"__main__\":\n    print(subset_sum([2, 3, 5, 7, 11], 7))\n    print(subset_sum([2, 3, 5, 7, 11], 10))\n    print(subset_sum([2, 3, 5, 7, 11], 9))\n    print(subset_sum([2, 3, 5, 7, 11], 8))\n    print(subset_sum([2, 3, 5, 7, 11], 11))\n    print(subset_sum([2, 3, 5, 7, 11], 14))"
    },
    {
      "rank": 58,
      "score": 1.0,
      "candidate": "def subset_sum_eq(arr, sum):\n    if sum == 0:\n        return True\n    if sum < 0:\n        return False\n    if sum == 0 and len(arr) == 0:\n        return True\n\n    for i in range(len(arr)):\n        if subset_sum_eq(arr[i + 1:], sum - arr[i]):\n            return True\n\n    return False\n\n\nif __name__ == \"__main__\":\n    print(subset_sum_eq([2, 5, 6, 7], 8))"
    },
    {
      "rank": 59,
      "score": 1.0,
      "candidate": "def subset_sum(array, target):\n    # Write your code here\n    arr_sum = [0] * (target + 1)\n    arr_sum[0] = 1\n    for i in range(len(array)):\n        for j in range(target + 1):\n            if j == array[i]:\n                arr_sum[j] += arr_sum[j - array[i]]\n            else:\n                arr_sum[j] += arr_sum[j - array[i]]\n\n    return arr_sum[target]\n\n\nprint(subset_sum([1, 2, 3, 4, 5], 6))\nprint(subset_sum([1, 2, 3, 4, 5], 8))\nprint(subset_sum([1, 2, 3, 4, 5], 10))"
    },
    {
      "rank": 60,
      "score": 1.0,
      "candidate": "def has_subset_sum_equal_to_sum(arr, sum):\n    if sum < 0:\n        return False\n    if sum == 0:\n        return True\n\n    if sum == 1:\n        return arr[0] in arr\n\n    for i in range(len(arr)):\n        if arr[i] == arr[i - 1] + 1:\n            continue\n        if has_subset_sum_equal_to_sum(arr[:i], sum - arr[i]):\n            return True\n    return False\n\n\narr = [2, 3, 4, 5, 6]\nsum = 6\nprint(has_subset_sum_equal_to_sum(arr, sum))\n\narr = [2, 3, 4, 5, 6]\nsum = 7\nprint(has_subset_sum_equal_to_sum(arr, sum))\n\narr = [2, 3, 4, 5, 6]\nsum = 8\nprint(has_subset_sum_equal_to_sum(arr, sum))\n\narr = [2, 3, 4, 5, 6]\nsum = 9\nprint(has_subset_sum_equal_to_sum(arr, sum))\n\narr = [2, 3, 4, 5, 6]\nsum = 10\nprint(has_subset_sum_equal_to_sum(arr, sum))\n\narr = [2, 3, 4, 5, 6]\nsum = 11\nprint(has_subset_sum_equal_to_sum(arr, sum))"
    },
    {
      "rank": 61,
      "score": 1.0,
      "candidate": "def subset(arr, n, s):\n    if n == 0:\n        return False\n\n    for i in range(n):\n        if arr[i] > s:\n            return False\n\n    return True\n\nprint(subset([1, 2, 3], 4, 6))\nprint(subset([1, 2, 3], 5, 6))\nprint(subset([1, 2, 3], 7, 6))\nprint(subset([1, 2, 3], 8, 6))\nprint(subset([1, 2, 3], 9, 6))\nprint(subset([1, 2, 3], 10, 6))"
    },
    {
      "rank": 62,
      "score": 1.0,
      "candidate": "def subset_sum_eq_to_sum(arr, target):\n    if target < 0:\n        return False\n    if target == 0:\n        return True\n\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == target:\n                return True\n\n    return False\n\n\nif __name__ == \"__main__\":\n    assert subset_sum_eq_to_sum([1, 2, 3, 4], 6) == True\n    assert subset_sum_eq_to_sum([1, 2, 3, 4], 7) == True\n    assert subset_sum_eq_to_sum([1, 2, 3, 4], 8) == True\n    assert subset_sum_eq_to_sum([1, 2, 3, 4], 9) == False"
    },
    {
      "rank": 63,
      "score": 1.0,
      "candidate": "def subset_sum(nums, target):\n    if not nums:\n        return False\n    if len(nums) == 1:\n        return True if nums[0] == target else False\n\n    for i in range(len(nums)):\n        if subset_sum(nums[i:], target - nums[i]):\n            return True\n\n    return False\n\n\nprint(subset_sum([1, 2, 3, 4, 5], 6))\nprint(subset_sum([1, 2, 3, 4, 5], 6))\nprint(subset_sum([1, 2, 3, 4, 5], 7))\nprint(subset_sum([1, 2, 3, 4, 5], 8))\nprint(subset_sum([1, 2, 3, 4, 5], 9))\nprint(subset_sum([1, 2, 3, 4, 5], 10))\nprint(subset_sum([1, 2, 3, 4, 5], 11))\nprint(subset_sum([1, 2, 3, 4, 5], 12))\nprint(subset_sum([1, 2, 3, 4, 5], 13))\nprint(subset_sum([1, 2, 3, 4, 5], 14))\nprint(subset_sum([1, 2, 3, 4, 5], 15))\nprint(subset_sum([1, 2, 3, 4, 5], 16))\nprint(subset_sum([1, 2, 3, 4, 5], 17))\nprint(subset_sum([1, 2, 3, 4, 5], 18))\nprint(subset_sum([1, 2, 3, 4, 5], 19))\nprint(subset_sum([1, 2, 3, 4, 5], 20))\nprint(subset_sum([1, 2, 3, 4, 5], 21))\nprint(subset_sum([1, 2, 3, 4, 5], 22))"
    },
    {
      "rank": 64,
      "score": 1.0,
      "candidate": "def subset_sum(arr, s):\n    # Write your code here\n    dp = [False] * (s + 1)\n    dp[0] = True\n    for i in range(1, s + 1):\n        for j in range(len(arr)):\n            if arr[j] <= i:\n                dp[i] |= dp[i - arr[j]]\n    return dp[s]\n\nprint(subset_sum([1, 2, 3, 4, 5], 6))\nprint(subset_sum([1, 2, 3, 4, 5], 7))\nprint(subset_sum([1, 2, 3, 4, 5], 8))\nprint(subset_sum([1, 2, 3, 4, 5], 9))\nprint(subset_sum([1, 2, 3, 4, 5], 10))\nprint(subset_sum([1, 2, 3, 4, 5], 11))"
    },
    {
      "rank": 65,
      "score": 1.0,
      "candidate": "def subset_sum(nums, target):\n    if not nums:\n        return False\n\n    nums.sort()\n    for i in range(len(nums) - 1):\n        if nums[i] + nums[i + 1] == target:\n            return True\n    return False\n\n\nif __name__ == '__main__':\n    assert subset_sum([2, 4, 6], 6) == True\n    assert subset_sum([2, 4, 6], 7) == False\n    assert subset_sum([2, 4, 6], 8) == False\n    assert subset_sum([1, 2, 4, 6], 8) == True"
    },
    {
      "rank": 66,
      "score": 1.0,
      "candidate": "def subset_sum(arr, target):\n    # write your code in Python 3.6\n    arr.sort()\n    for i in range(len(arr)):\n        if arr[i] == target:\n            return True\n    return False\n\n\nprint(subset_sum([1, 3, 2, 5, 6], 6))\nprint(subset_sum([1, 2, 3, 4, 5], 5))\nprint(subset_sum([1, 3, 4, 5, 6, 7], 8))"
    },
    {
      "rank": 67,
      "score": 1.0,
      "candidate": "def subsetSum(arr, target):\n    # Write your code here\n    arr.sort()\n    if sum(arr) == target:\n        return True\n    else:\n        return False\n\nif __name__ == \"__main__\":\n    arr = [1, 2, 3, 4, 5]\n    target = 6\n    print(subsetSum(arr, target))"
    },
    {
      "rank": 68,
      "score": 1.0,
      "candidate": "def subset_sum_equal_to(arr, target):\n    if target == 0:\n        return True\n    if target < 0:\n        return False\n    for i in range(len(arr)):\n        if i > 0 and arr[i] == arr[i-1]:\n            continue\n        if i > 0 and arr[i] + arr[i-1] == target:\n            return True\n    return False\n\n\nif __name__ == \"__main__\":\n    assert subset_sum_equal_to([1, 2, 3], 5)\n    assert subset_sum_equal_to([1, 2, 3], 6)\n    assert subset_sum_equal_to([1, 2, 3], 7)\n    assert subset_sum_equal_to([1, 2, 3], 8)\n    assert subset_sum_equal_to([1, 2, 3], 9)\n    assert subset_sum_equal_to([1, 2, 3], 11)\n    assert subset_sum_equal_to([1, 2, 3], 12)"
    },
    {
      "rank": 69,
      "score": 1.0,
      "candidate": "def subset_sum(arr, target):\n    if target == 0:\n        return True\n    if target < 0:\n        return False\n    if target == 0:\n        return False\n    if arr == []:\n        return True\n    return False\n\nprint(subset_sum([1,2,3], 5))\nprint(subset_sum([1,2,3,4,5,6], 7))"
    },
    {
      "rank": 70,
      "score": 1.0,
      "candidate": "def subset_sum(arr, target):\n    arr.sort()\n    if arr[0] == target:\n        return True\n    for i in range(len(arr) - 1):\n        for j in range(i + 1, len(arr)):\n            if arr[i] + arr[j] == target:\n                return True\n    return False\n\n\nif __name__ == \"__main__\":\n    assert subset_sum([3, 5, 2, 7], 7) == True\n    assert subset_sum([1, 2, 3, 4], 6) == False\n    assert subset_sum([1, 2, 3, 4], 8) == False\n    assert subset_sum([1, 2, 3, 4], 9) == True\n    assert subset_sum([1, 2, 3, 4], 5) == False"
    },
    {
      "rank": 71,
      "score": 1.0,
      "candidate": "def subset_sum(nums, target_sum):\n    nums.sort()\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target_sum:\n                return True\n    return False\n\n\nprint(subset_sum([1, 2, 3, 4], 7))"
    },
    {
      "rank": 72,
      "score": 1.0,
      "candidate": "def subset_sum(arr, sum):\n    # Write your code here\n    if sum == 0:\n        return True\n    return False\n\nif __name__ == \"__main__\":\n    print(subset_sum([1, 2, 3, 4, 5, 6], 6))\n    print(subset_sum([2, 3, 4, 5, 6], 10))\n    print(subset_sum([1, 2, 3, 4, 5, 6], 5))\n    print(subset_sum([1, 2, 3, 4, 5, 6], 10))\n    print(subset_sum([1, 2, 3, 4, 5, 6], -1))"
    },
    {
      "rank": 73,
      "score": 1.0,
      "candidate": "def subset_sum(arr, s):\n    if not arr or len(arr) == 0 or s < 0:\n        return False\n    if s == 0:\n        return True\n    if s == 1:\n        return False\n    return (subset_sum(arr[1:], s - arr[0]) or subset_sum(arr[1:], s))\n\n\nprint(subset_sum([1, 2, 3, 4], 6))\nprint(subset_sum([1, 2, 3, 4], 7))\nprint(subset_sum([1, 2, 3, 4], 8))\nprint(subset_sum([1, 2, 3, 4], 9))"
    },
    {
      "rank": 74,
      "score": 1.0,
      "candidate": "def subset_sum(arr, sum):\n    \"\"\"\n    :type arr: List[int]\n    :type sum: int\n    :rtype: bool\n    \"\"\"\n    if sum == 0:\n        return True\n    if sum < 0:\n        return False\n    if sum == 1:\n        return arr[0] in arr\n    if sum == 2:\n        return arr[0] in arr[1:]\n\n    sum_to_check = sum // 2\n    for i in range(len(arr)):\n        if subset_sum(arr[i + 1:], sum_to_check - arr[i]):\n            return True\n    return False\n\n\nif __name__ == \"__main__\":\n    assert subset_sum([1, 2, 3], 2) is True\n    assert subset_sum([1, 2, 3], 4) is False\n    assert subset_sum([1, 2, 3], 5) is True\n    assert subset_sum([1, 2, 3], 6) is False\n    assert subset_sum([1, 2, 3], 7) is False"
    },
    {
      "rank": 75,
      "score": 1.0,
      "candidate": "def subset_sum(nums, target):\n    \"\"\"\n    :type nums: List[int]\n    :type target: int\n    :rtype: bool\n    \"\"\"\n    if target == 0:\n        return True\n    else:\n        if nums == []:\n            return False\n        elif nums[0] == target:\n            return subset_sum(nums[1:], target - nums[0])\n        else:\n            return subset_sum(nums[1:], target)\n\n\nprint(subset_sum([1, 2, 3, 4], 6))"
    },
    {
      "rank": 76,
      "score": 1.0,
      "candidate": "class Solution:\n    def canSum(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: bool\n        \"\"\"\n        nums.sort()\n        return self.helper(nums, 0, target)\n\n    def helper(self, nums, left, target):\n        if left == len(nums):\n            return True\n        if target < 0:\n            return False\n        if nums[left] == target:\n            return self.helper(nums, left + 1, target)\n        return self.helper(nums, left + 1, target - nums[left])"
    },
    {
      "rank": 77,
      "score": 1.0,
      "candidate": "class Solution(object):\n    def canCompleteSet(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: bool\n        \"\"\"\n        if not nums:\n            return False\n        sum_dict = {}\n        for i in range(len(nums)):\n            if target - nums[i] in sum_dict:\n                return True\n            sum_dict[nums[i]] = i\n        return False"
    },
    {
      "rank": 78,
      "score": 1.0,
      "candidate": "def subset(nums, target):\n    \"\"\"\n    :type nums: List[int]\n    :type target: int\n    :rtype: bool\n    \"\"\"\n    if not nums:\n        return False\n    elif sum(nums) == target:\n        return True\n    else:\n        return False\n\n\nif __name__ == \"__main__\":\n    assert subset([1, 2, 3], 6) == True\n    assert subset([2, 2], 6) == False\n    assert subset([2, 3, 2], 6) == True\n    assert subset([2, 3, 4], 6) == False"
    },
    {
      "rank": 79,
      "score": 1.0,
      "candidate": "def subset(arr, sum):\n    if sum == 0:\n        return True\n\n    for i in arr:\n        if sum - i in arr:\n            return True\n\n    return False\n\n\nprint(subset([1, 2, 3], 5))"
    },
    {
      "rank": 80,
      "score": 1.0,
      "candidate": "def has_subset(arr, target):\n    n = len(arr)\n    dp = [[False for _ in range(target+1)] for _ in range(n+1)]\n    dp[0][0] = True\n    for i in range(1, n+1):\n        for j in range(0, target+1):\n            if j == arr[i-1]:\n                dp[i][j] = dp[i-1][j]\n            elif j > arr[i-1]:\n                dp[i][j] = dp[i-1][j] or dp[i-1][j-arr[i-1]]\n            else:\n                dp[i][j] = dp[i-1][j]\n    return dp[n][target]\n\narr = [1,2,3,4,5]\ntarget = 6\nprint(has_subset(arr, target))"
    },
    {
      "rank": 81,
      "score": 1.0,
      "candidate": "def subset_sum_equal_to_sum(nums, target_sum):\n    if not nums:\n        return False\n    nums_set = set(nums)\n    if target_sum in nums_set:\n        return True\n    else:\n        return False\n\n\nprint(subset_sum_equal_to_sum([1, 2, 3, 4], 6))"
    },
    {
      "rank": 82,
      "score": 1.0,
      "candidate": "def subset(arr, s):\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            if arr[i] + arr[j] == s:\n                return True\n\n    return False\n\n\nprint(subset([1, 2, 3], 6))\nprint(subset([1, 2, 3, 4], 7))"
    },
    {
      "rank": 83,
      "score": 1.0,
      "candidate": "def subset(arr, n, sum):\n    if sum == 0:\n        return True\n    if sum < 0:\n        return False\n    if n == 0:\n        return False\n\n    for i in range(n):\n        if subset(arr, n-1, sum - arr[i]):\n            return True\n    return False\n\n\nprint(subset([1, 2, 3, 4], 4, 8))"
    },
    {
      "rank": 84,
      "score": 1.0,
      "candidate": "def subset_sum(nums, target_sum):\n    if not nums:\n        return False\n\n    nums.sort()\n    target_sum = target_sum - sum(nums)\n\n    for i in range(len(nums)):\n        if target_sum >= 0 and i > 0 and nums[i] == nums[i - 1]:\n            continue\n\n        if nums[i] == target_sum:\n            return True\n\n    return False\n\n\nprint(subset_sum([1, 2, 3, 4], 6))\nprint(subset_sum([1, 2, 3, 4], 8))\nprint(subset_sum([1, 2, 3, 4], 5))\nprint(subset_sum([1, 2, 3, 4], 3))"
    },
    {
      "rank": 85,
      "score": 1.0,
      "candidate": "def subset_sum_equal_to_sum(arr, sum):\n    if sum == 0:\n        return True\n\n    if sum < 0:\n        return False\n\n    for i in range(len(arr)):\n        if subset_sum_equal_to_sum(arr[i+1:], sum-arr[i]):\n            return True\n\n    return False\n\n\nprint(subset_sum_equal_to_sum([2, 1, 3, 4, 5], 6))\nprint(subset_sum_equal_to_sum([1, 2, 3, 4, 5], 8))\nprint(subset_sum_equal_to_sum([1, 2, 3, 4, 5], 7))"
    },
    {
      "rank": 86,
      "score": 1.0,
      "candidate": "def subset(nums, target):\n    dp = [[False] * (target + 1) for _ in range(len(nums) + 1)]\n    dp[0][0] = True\n\n    for i in range(1, len(nums) + 1):\n        for j in range(target + 1):\n            if nums[i - 1] == j:\n                dp[i][j] = dp[i - 1][j]\n            elif j > 0:\n                dp[i][j] = dp[i - 1][j] or dp[i - 1][j - nums[i - 1]]\n\n    return dp[-1][-1]\n\n\nprint(subset([1, 2, 3, 4], 6))\nprint(subset([1, 2, 3, 4], 7))\nprint(subset([1, 2, 3, 4], 8))\nprint(subset([1, 2, 3, 4], 9))"
    },
    {
      "rank": 87,
      "score": 1.0,
      "candidate": "def subset_sum(arr,sum):\n    # Write your code here\n    if sum == 0:\n        return True\n    elif sum == 1:\n        return False\n    else:\n        return subset_sum(arr,sum-arr[0]) or subset_sum(arr,sum-arr[1])\n\n\narr = [1,2,3,4,5,6,7,8,9]\nsum = 9\n\nprint(subset_sum(arr,sum))"
    },
    {
      "rank": 88,
      "score": 1.0,
      "candidate": "def subset_sum(arr, sum):\n    arr.sort()\n    i = 0\n    while i < len(arr):\n        if sum - arr[i] == 0:\n            return True\n        i += 1\n    return False\n\n\narr = [2, 4, 6, 8]\nsum = 10\nprint(subset_sum(arr, sum))"
    },
    {
      "rank": 89,
      "score": 1.0,
      "candidate": "def subset_sum(nums, sum):\n    if sum == 0:\n        return True\n    if sum < 0:\n        return False\n    if sum == 0:\n        return False\n    for i in range(len(nums)):\n        if subset_sum(nums[i:], sum - nums[i]):\n            return True\n    return False\n\n\nprint(subset_sum([1, 2, 3], 4))\nprint(subset_sum([1, 2, 3], 5))\nprint(subset_sum([1, 2, 3], 6))\nprint(subset_sum([1, 2, 3], 7))\nprint(subset_sum([1, 2, 3], 8))\nprint(subset_sum([1, 2, 3], 9))\nprint(subset_sum([1, 2, 3], 11))\nprint(subset_sum([1, 2, 3], 12))\nprint(subset_sum([1, 2, 3], 13))"
    },
    {
      "rank": 90,
      "score": 1.0,
      "candidate": "class Solution:\n    def check_sum_subset(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: bool\n        \"\"\"\n        nums.sort()\n        for i in range(len(nums) - 1):\n            if nums[i] + nums[i + 1] == target:\n                return True\n        return False"
    },
    {
      "rank": 91,
      "score": 1.0,
      "candidate": "def subset_sum(arr, s):\n    # Write your code here\n    if s == 0:\n        return True\n    elif s == 1:\n        return False\n    else:\n        return subset_sum(arr, s - arr[0]) or subset_sum(arr, s - arr[1])\n\n\nif __name__ == \"__main__\":\n    arr = [1, 2, 4, 5]\n    s = 7\n    print(subset_sum(arr, s))"
    },
    {
      "rank": 92,
      "score": 1.0,
      "candidate": "def subset(arr, s):\n    if s == 0:\n        return True\n    if s == 1:\n        return False\n    if s > 0 and arr[0] == arr[1]:\n        return subset(arr[2:], s - arr[0])\n    else:\n        return subset(arr[2:], s - arr[0]) or subset(arr[1:], s - arr[0])\n\n\nif __name__ == \"__main__\":\n    print(subset([1, 2, 3, 4, 5], 6))\n    print(subset([1, 2, 3, 4, 5], 6))"
    },
    {
      "rank": 93,
      "score": 1.0,
      "candidate": "def subset_sum(arr, sum):\n    # write your code here\n    sum_arr = [0] * (sum + 1)\n    for i in arr:\n        sum_arr[i] += 1\n    return sum_arr[sum] > 0\n\n\nprint(subset_sum([1, 2, 3], 5))\nprint(subset_sum([1, 2, 3], 4))\nprint(subset_sum([1, 2, 3], 7))\nprint(subset_sum([1, 2, 3], 9))\nprint(subset_sum([1, 2, 3], 10))"
    },
    {
      "rank": 94,
      "score": 1.0,
      "candidate": "def subset(arr, sum):\n    # Your code here\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i]+arr[j] == sum:\n                return True\n    return False\n\n\nif __name__ == \"__main__\":\n    print(subset([1, 2, 3, 4, 5, 6, 7, 8, 9], 12))\n    print(subset([1, 2, 3, 4, 5, 6, 7, 8, 9], 14))\n    print(subset([1, 2, 3, 4, 5, 6, 7, 8, 9], 10))"
    },
    {
      "rank": 95,
      "score": 1.0,
      "candidate": "def subset_sum(arr, target):\n    n = len(arr)\n    if n <= 0 or target <= 0:\n        return False\n    elif target == 0:\n        return True\n    elif target == 1:\n        return arr[0] == 1\n\n    dp = [False] * (target + 1)\n    dp[0] = True\n\n    for i in range(n):\n        for j in range(1, target + 1):\n            if j < arr[i]:\n                dp[j] = dp[j] or dp[j - arr[i]]\n\n    return dp[target]\n\n\ndef main():\n    print(subset_sum([1, 2, 3, 4], 6))\n\n\nmain()"
    },
    {
      "rank": 96,
      "score": 1.0,
      "candidate": "def subset_sum(nums, target_sum):\n    if target_sum in nums:\n        return True\n    else:\n        return False\n\n\nprint(subset_sum([1, 2, 3, 4, 5], 5))\nprint(subset_sum([1, 2, 3, 4, 5], 4))\nprint(subset_sum([1, 2, 3, 4, 5], 7))"
    },
    {
      "rank": 97,
      "score": 1.0,
      "candidate": "class Solution:\n    # @param A : list of integers\n    # @param B : integer\n    # @return a boolean\n    def subset_sum(self, A, B):\n        if len(A) == 0 or len(A) == 1:\n            return True\n        if sum(A)!= B:\n            return False\n        n = len(A)\n        dp = [[False] * (B+1) for _ in range(n+1)]\n        dp[0][0] = True\n        for i in range(1, n+1):\n            for j in range(1, B+1):\n                if A[i-1] == j:\n                    dp[i][j] = dp[i-1][j]\n                else:\n                    dp[i][j] = dp[i-1][j] or dp[i-1][j-A[i-1]]\n        return dp[n][B]"
    },
    {
      "rank": 98,
      "score": 1.0,
      "candidate": "def subset_sum(arr, sum):\n    if sum == 0:\n        return True\n\n    if sum < 0:\n        return False\n\n    for i in range(len(arr)):\n        if sum - arr[i] < 0:\n            continue\n\n        if subset_sum(arr, sum - arr[i]):\n            return True\n\n    return False\n\n\nif __name__ == \"__main__\":\n    print(subset_sum([2, 2, 3, 2], 4))"
    },
    {
      "rank": 99,
      "score": 1.0,
      "candidate": "def subset_sum_equal_to(nums, target):\n    # Write your code here\n    if not nums or not target:\n        return False\n    nums.sort()\n    return subset_sum(nums, 0, target)\n\n\ndef subset_sum(nums, start, target):\n    if start == len(nums):\n        return target == 0 or target == nums[start]\n    if target == 0:\n        return False\n    return subset_sum(nums, start + 1, target - nums[start]) or subset_sum(nums, start + 1, target)\n\n\nprint(subset_sum_equal_to([1, 2, 3, 4, 5], 5))"
    },
    {
      "rank": 100,
      "score": 1.0,
      "candidate": "def subset_sum_eq_to_sum(sum, set_):\n    # Write your code here\n    set_sum = set(set_)\n    if sum in set_sum:\n        return True\n    else:\n        return False\n\nprint(subset_sum_eq_to_sum(2, [1, 2, 3, 4, 5]))\nprint(subset_sum_eq_to_sum(6, [1, 2, 3, 4, 5]))\nprint(subset_sum_eq_to_sum(5, [1, 2, 3, 4, 5]))\nprint(subset_sum_eq_to_sum(7, [1, 2, 3, 4, 5]))\nprint(subset_sum_eq_to_sum(8, [1, 2, 3, 4, 5]))"
    }
  ]
}