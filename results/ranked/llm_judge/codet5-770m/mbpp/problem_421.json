{
  "timestamp": "2025-09-14T15:33:26.155972",
  "method": "improved_llm_judge",
  "judge_model": "codellama/CodeLlama-7b-Python-hf",
  "target_model": "codet5-770m",
  "dataset": "mbpp",
  "problem_number": 421,
  "total_candidates": 100,
  "results": [
    {
      "rank": 1,
      "score": 10.0,
      "candidate": "def median(trapezium):\n    return sorted(trapezium)[len(trapezium) // 2]\n\n\nprint(median([1, 2, 3, 4, 5, 6, 7, 8]))"
    },
    {
      "rank": 2,
      "score": 10.0,
      "candidate": "def median(arr):\n    return (arr[len(arr)//2] + arr[len(arr)//2 - 1]) / 2\n\n\nprint(median([3, 2, 5, 1, 1, 2, 4, 6, 5, 9, 8, 9, 6, 2, 3, 4, 7, 8, 9, 4, 8, 8, 6, 2, 3, 4, 7, 8, 9, 8, 9, 6, 2, 3, 4, 7, 8, 9, 6, 2, 3, 4, 7, 8, 9, 6, 2, 3, 4, 7, 8, 9, 6, 2, 3, 4, 7, 8, 9, 6, 2, 3, 4, 7, 8, 9, 6, 2, 3, 4, 7, 8, 9, 6, 2, 3, 4, 7, 8, 9, 6, 2, 3, 4, 7, 8, 9, 6, 2, 3, 4, 7, 8, 9, 6, 2, 3, 4, 7, 8, 9, 6, 2, 3, 4, 7, 8, 9, 6, 2, 3, 4, 7, 8, 9, 6, 2, 3, 4, 7, 8, 9, 6, 2, 3, 4, 7, 8, 9, 6, 2, 3, 4, 7, 8, 9, 6, 2, 3, 4, 7, 8, 9, 6, 2, 3, 4, 7, 8, 9, 6, 2, 3, 4, 7, 8, 9, 6, 2, 3, 4, 7, 8, 9, 6, 2, 3, 4, 7, 8, 9, 6, 2, 3, 4, 7, 8, 9, 6, 2, 3, 4, 7, 8, 9, 6, 2, 3, 4, 7, 8, 9, 6, 2, 3, 4, 7, 8, 9, 6, 2, 3, 4, 7, 8, 9, 6, 2, 3, 4, 7, 8, 9, 6, 2, 3, 4, 7, 8, 9, 6, 2, 3, 4, 7, 8, 9, 6, 2, 3, 4, 7, 8, 9, 6"
    },
    {
      "rank": 3,
      "score": 10.0,
      "candidate": "from typing import List\n\n\ndef find_median(data: List[int]) -> float:\n    if len(data) % 2 == 1:\n        return (data[int(len(data)/2)] + data[int(len(data)/2 - 1)]) / 2\n    else:\n        return data[int((len(data)/2)-1)]\n\n\nprint(find_median([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))"
    },
    {
      "rank": 4,
      "score": 10.0,
      "candidate": "def find_median(trapezium):\n    length = len(trapezium)\n    if length % 2 == 0:\n        mid = length // 2\n        if length % 4 == 0:\n            return (trapezium[mid] + trapezium[mid + 1] + trapezium[mid + 2]) / 2\n        else:\n            return (trapezium[mid] + trapezium[mid + 1]) / 2\n    else:\n        return trapezium[mid]\n\n\nprint(find_median([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]))"
    },
    {
      "rank": 5,
      "score": 10.0,
      "candidate": "def median(arr):\n    if len(arr) == 1:\n        return arr[0]\n    else:\n        return (arr[0] + arr[len(arr)-1])/2\n\n\nif __name__ == \"__main__\":\n    arr = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    print(median(arr))"
    },
    {
      "rank": 6,
      "score": 10.0,
      "candidate": "def median(data):\n    if len(data) % 2 == 0:\n        return (data[(len(data) // 2) - 1] + data[len(data) // 2]) / 2\n    else:\n        return data[len(data) // 2]\n\n\nif __name__ == '__main__':\n    data = [2, 1, 3, 4, 5, 6, 7, 8, 9]\n    print(median(data))"
    },
    {
      "rank": 7,
      "score": 10.0,
      "candidate": "import math\n\n\ndef median_of_trapezium(a):\n    length = len(a)\n    if length % 2 == 0:\n        median_of_a = (a[int(length / 2)] + a[int(length / 2) - 1]) / 2\n        return median_of_a\n    else:\n        median_of_a = (a[int(length / 2)] + a[int(length / 2) - 1]) / 2\n        return median_of_a\n\n\nif __name__ == \"__main__\":\n    a = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    print(median_of_trapezium(a))"
    },
    {
      "rank": 8,
      "score": 10.0,
      "candidate": "def median(arr):\n    arr.sort()\n    if len(arr) % 2 == 0:\n        return (arr[len(arr)//2 - 1] + arr[len(arr)//2])/2\n    else:\n        return arr[len(arr)//2]\n\n\nif __name__ == \"__main__\":\n    arr = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    print(median(arr))"
    },
    {
      "rank": 9,
      "score": 10.0,
      "candidate": "def median(arr):\n    if len(arr) % 2!= 0:\n        return None\n\n    mid = len(arr) // 2\n    left, right = 0, len(arr) - 1\n\n    while left < right:\n        if arr[left] + arr[right] > arr[mid]:\n            right -= 1\n        elif arr[left] + arr[right] < arr[mid]:\n            left += 1\n        else:\n            return arr[mid]\n\n    return None\n\n\ndef main():\n    arr = [2, 7, 4, 1, 9]\n    print(median(arr))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 10,
      "score": 10.0,
      "candidate": "def find_median(array):\n    array = sorted(array)\n    if len(array) % 2 == 0:\n        return (array[len(array) // 2 - 1] + array[len(array) // 2]) / 2\n    else:\n        return array[len(array) // 2]\n\n\nprint(find_median([1, 2, 3, 4, 5, 6, 7]))\nprint(find_median([2, 4, 6, 8, 10, 12]))\nprint(find_median([4, 6, 8, 10, 12]))\nprint(find_median([2, 4, 6, 8, 10, 12]))"
    },
    {
      "rank": 11,
      "score": 10.0,
      "candidate": "def find_median(trapezium):\n    n = len(trapezium)\n    if n % 2 == 0:\n        return (trapezium[n//2-1] + trapezium[n//2])/2\n    else:\n        return trapezium[n//2]\n\n\nif __name__ == \"__main__\":\n    print(find_median([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\n    print(find_median([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 126, 127, 128, 131, 132, 133, 134, 135, 136, 137, 138, 133, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 151, 152, 153, 154, 155, 157, 158, 159, 161, 162, 163, 164, 165, 166, 167, 168, 169, 171, 172, 173, 174, 175, 176, 177,"
    },
    {
      "rank": 12,
      "score": 10.0,
      "candidate": "def median(arr):\n    if len(arr) % 2!= 0:\n        return arr[(len(arr) // 2)]\n    return (arr[len(arr) // 2] + arr[len(arr) // 2 - 1]) / 2\n\n\nprint(median([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\nprint(median([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\nprint(median([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\nprint(median([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29]))\nprint(median([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\nprint(median([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100]))"
    },
    {
      "rank": 13,
      "score": 10.0,
      "candidate": "def find_median(arr):\n    if len(arr) % 2 == 0:\n        return (arr[len(arr) // 2 - 1] + arr[len(arr) // 2]) / 2\n    else:\n        return arr[len(arr) // 2]\n\n\nif __name__ == \"__main__\":\n    print(find_median([1, 2, 3, 4, 5, 6, 7, 8, 9]))"
    },
    {
      "rank": 14,
      "score": 10.0,
      "candidate": "def median(arr):\n    if len(arr) == 1:\n        return arr[0]\n    else:\n        return (arr[0] + arr[len(arr) - 1]) / 2\n\n\nprint(median([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\nprint(median([5, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 123, 124, 125, 126, 127, 128, 131, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 145, 146, 147, 148, 149, 151, 152, 153, 154, 155, 156, 157, 158, 159, 161, 162, 163, 164, 165, 166, 166, 167, 168, 169, 171, 172, 173, 170, 173, 176, 178, 179, 180, 181, 182, 183, 185, 186, 179, 190, 191, 193, 195, 195, 196, 196, 197, 199, 201, 202, 203, 204"
    },
    {
      "rank": 15,
      "score": 10.0,
      "candidate": "import numpy as np\n\n\ndef median(arr):\n    arr.sort()\n    if len(arr) % 2 == 1:\n        return arr[len(arr)//2]\n    else:\n        return (arr[len(arr)//2 - 1] + arr[len(arr)//2])/2\n\n\ndef main():\n    arr = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n    print(median(arr))\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 16,
      "score": 10.0,
      "candidate": "def median(a):\n    if len(a) == 1:\n        return a[0]\n    if len(a) == 2:\n        return (a[0] + a[1]) / 2\n    if len(a) % 2 == 1:\n        mid = len(a) // 2\n        return (a[mid - 1] + a[mid]) / 2\n\nif __name__ == '__main__':\n    print(median([1, 2, 3, 4, 5, 6, 7, 8, 9]))"
    },
    {
      "rank": 17,
      "score": 10.0,
      "candidate": "def median(a):\n    if len(a) % 2 == 1:\n        return a[int(len(a)/2)]\n    else:\n        return (a[int(len(a)/2)-1]+a[int(len(a)/2)])/2\n\n\nprint(median([0, 1, 2, 3, 4, 5, 6, 7]))\nprint(median([1, 2, 3, 4, 5, 6, 7]))\nprint(median([0, 1, 2, 3, 4, 5, 6, 7]))\nprint(median([1, 2, 3, 4, 5, 6, 7, 8]))\nprint(median([1, 2, 3, 4, 5, 6, 7, 8, 9]))\nprint(median([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\nprint(median([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\nprint(median([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]))\nprint(median([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]))\nprint(median([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]))\nprint(median([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18]))\nprint(median([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]))\nprint(median([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]))\nprint(median([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22]))\nprint(median"
    },
    {
      "rank": 18,
      "score": 10.0,
      "candidate": "import sys\n\n\ndef median(numbers):\n    if len(numbers) % 2 == 0:\n        return (numbers[len(numbers) // 2 - 1] + numbers[len(numbers) // 2]) / 2\n    else:\n        return (numbers[len(numbers) // 2 - 1] + numbers[len(numbers) // 2]) / 2\n\n\nif __name__ == '__main__':\n    # Test cases\n    print(median([2, 1, 3, 5, 6, 4, 7, 8, 9, 10, 11, 12]))\n    print(median([2, 1, 3, 5, 6, 4, 7, 8, 9, 10]))\n    print(median([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\n    print(median([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]))\n    print(median([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]))\n    print(median([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]))\n    print(median([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]))\n    print(median([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]))\n    print(median([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17]))\n    print(median([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]))\n    print(median([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23,"
    },
    {
      "rank": 19,
      "score": 10.0,
      "candidate": "def median(numbers):\n    numbers.sort()\n    if len(numbers) % 2 == 0:\n        return (numbers[int(len(numbers) / 2)] + numbers[int(len(numbers) / 2) - 1]) / 2\n    else:\n        return numbers[int(len(numbers) / 2)]\n\n\nnumbers = [1, 2, 3, 4, 5]\nprint(median(numbers))"
    },
    {
      "rank": 20,
      "score": 10.0,
      "candidate": "import numpy as np\n\n\ndef median(A):\n    # a = np.array(A)\n    # a.sort()\n    # return (a[len(a) // 2] + a[len(a) // 2 - 1]) / 2\n    # return np.median(A)\n    return np.median(A)\n\n\ndef median_2(A):\n    return np.median(A)\n\n\nif __name__ == '__main__':\n    print(median([1, 2, 3, 4, 5]))\n    print(median([1, 2, 3, 4, 5, 6, 7, 8]))\n    print(median([1, 2, 3, 4, 5, 6, 7, 8, 9]))\n    print(median([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\n    print(median([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]))"
    },
    {
      "rank": 21,
      "score": 10.0,
      "candidate": "def median(arr):\n    if len(arr) < 2:\n        return arr[0]\n\n    if len(arr) == 2:\n        return (arr[0] + arr[1]) / 2\n\n    mid = len(arr) // 2\n\n    left = median(arr[:mid])\n    right = median(arr[mid:])\n\n    return (left + right) / 2"
    },
    {
      "rank": 22,
      "score": 10.0,
      "candidate": "def find_median(arr):\n    length = len(arr)\n    if length % 2 == 0:\n        return (arr[length // 2 - 1] + arr[length // 2]) / 2\n    else:\n        return arr[length // 2]\n\n\nprint(find_median([1, 3, 5, 7, 9]))"
    },
    {
      "rank": 23,
      "score": 10.0,
      "candidate": "def find_median(array):\n    if len(array) % 2!= 0:\n        return array[len(array)//2]\n    else:\n        return (array[len(array)//2] + array[len(array)//2 - 1])/2\n\n\nprint(find_median([3, 4, 5, 1, 2, 7]))\nprint(find_median([1, 3, 5, 7, 9, 11]))\nprint(find_median([2, 4, 6, 8, 10, 12]))"
    },
    {
      "rank": 24,
      "score": 10.0,
      "candidate": "def median(arr):\n    if len(arr) % 2 == 0:\n        return (arr[int(len(arr) / 2)] + arr[int(len(arr) / 2) - 1]) / 2\n    else:\n        return arr[int(len(arr) / 2)]\n\n\nprint(median([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 165, 166, 167, 168, 169, 171, 172, 173, 177, 178, 179, 180, 181, 182, 183, 184, 184, 185, 186, 187, 188, 189, 190, 191, 199, 200, 201,"
    },
    {
      "rank": 25,
      "score": 10.0,
      "candidate": "def find_median(list_of_numbers):\n    list_of_numbers.sort()\n    if len(list_of_numbers) % 2 == 0:\n        return (list_of_numbers[int(len(list_of_numbers) / 2)] + list_of_numbers[int(len(list_of_numbers) / 2) - 1]) / 2\n    else:\n        return list_of_numbers[int(len(list_of_numbers) / 2)]"
    },
    {
      "rank": 26,
      "score": 10.0,
      "candidate": "def find_median(list_of_numbers):\n    return sorted(list_of_numbers)[len(list_of_numbers) // 2]\n\n\nif __name__ == '__main__':\n    print(find_median([1, 2, 3, 4, 5, 6, 7, 8, 9]))"
    },
    {
      "rank": 27,
      "score": 10.0,
      "candidate": "def median(arr):\n    if len(arr) == 0:\n        return 0\n    if len(arr) == 1:\n        return arr[0]\n    mid = len(arr) // 2\n    left = arr[:mid]\n    right = arr[mid:]\n    return (left[0] + right[0]) / 2\n\n\nif __name__ == \"__main__\":\n    arr = [1, 2, 3, 4, 5, 6]\n    print(median(arr))"
    },
    {
      "rank": 28,
      "score": 10.0,
      "candidate": "def median(arr):\n    if len(arr) % 2 == 0:\n        return (arr[len(arr) // 2 - 1] + arr[len(arr) // 2]) / 2\n    else:\n        return (arr[len(arr) // 2])\n\nif __name__ == \"__main__\":\n    assert median([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 5"
    },
    {
      "rank": 29,
      "score": 9.0,
      "candidate": "def median_trapezium(trapezium):\n    if len(trapezium) == 1:\n        return trapezium[0]\n    else:\n        return (trapezium[0] + trapezium[len(trapezium)-1])/2.0"
    },
    {
      "rank": 30,
      "score": 9.0,
      "candidate": "import math\n\ndef find_median(trapezium):\n    if len(trapezium) % 2 == 0:\n        length = len(trapezium) // 2\n        return (trapezium[length] + trapezium[length-1]) / 2\n    else:\n        return trapezium[int(math.floor(len(trapezium)/2))]"
    },
    {
      "rank": 31,
      "score": 8.0,
      "candidate": "import numpy as np\n\n\ndef find_median(arr):\n    arr = np.array(arr)\n    n = len(arr)\n\n    if n % 2 == 0:\n        return (arr[n // 2] + arr[n // 2 - 1]) / 2\n    else:\n        return (arr[n // 2] + arr[n // 2 - 1]) / 2"
    },
    {
      "rank": 32,
      "score": 8.0,
      "candidate": "def find_median(a):\n    return sum(a) / len(a)\n\nprint(find_median([1, 2, 3, 4, 5]))"
    },
    {
      "rank": 33,
      "score": 8.0,
      "candidate": "def find_median(arr):\n    if len(arr) % 2 == 1:\n        return arr[int(len(arr)/2)]\n    else:\n        return (arr[int(len(arr)/2)-1] + arr[int(len(arr)/2)]) / 2\n\n\nif __name__ == \"__main__\":\n    print(find_median([1, 2, 3, 4, 5, 6, 7, 8, 9]))"
    },
    {
      "rank": 34,
      "score": 8.0,
      "candidate": "def median(arr):\n    if len(arr) % 2 == 0:\n        return (arr[int(len(arr)/2)] + arr[int(len(arr)/2) - 1]) / 2\n    else:\n        return arr[int(len(arr)/2)]\n\n\nprint(median([1, 3, 5, 7, 9, 11]))"
    },
    {
      "rank": 35,
      "score": 8.0,
      "candidate": "def median(arr):\n    arr.sort()\n    if len(arr) % 2 == 0:\n        return (arr[int(len(arr) / 2)] + arr[int(len(arr) / 2 - 1)]) / 2\n    else:\n        return arr[int(len(arr) / 2)]\n\nprint(median([1, 2, 3, 4, 5, 6, 7]))"
    },
    {
      "rank": 36,
      "score": 8.0,
      "candidate": "def median(arr):\n    arr.sort()\n    if len(arr) % 2 == 0:\n        return arr[int(len(arr)/2)]\n    else:\n        return (arr[int(len(arr)/2) - 1] + arr[int(len(arr)/2)])/2\n\n\nif __name__ == \"__main__\":\n    arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]\n    print(median(arr))"
    },
    {
      "rank": 37,
      "score": 8.0,
      "candidate": "def find_median(trapezium):\n    if len(trapezium) % 2 == 0:\n        return (trapezium[len(trapezium) // 2 - 1] + trapezium[len(trapezium) // 2]) / 2\n    else:\n        return (trapezium[len(trapezium) // 2 - 1] + trapezium[len(trapezium) // 2]) / 2\n\n\nif __name__ == \"__main__\":\n    assert find_median([1, 2, 3, 4, 5, 6, 7, 8, 9]) == 9.5\n    assert find_median([1, 2, 3, 4]) == 1.5\n    assert find_median([1]) == 1\n    assert find_median([]) == None"
    },
    {
      "rank": 38,
      "score": 8.0,
      "candidate": "def find_median(a):\n    \"\"\"\n    :type a: List[int]\n    :rtype: int\n    \"\"\"\n    a.sort()\n    if len(a) % 2 == 0:\n        return (a[len(a)//2-1] + a[len(a)//2])/2\n    else:\n        return (a[len(a)//2] + a[len(a)//2-1])/2\n\n\nprint(find_median([1, 2, 3, 4, 5]))\nprint(find_median([4, 3, 2, 1]))"
    },
    {
      "rank": 39,
      "score": 8.0,
      "candidate": "from typing import List\n\n\ndef median(arr: List[int]) -> int:\n    if len(arr) < 2:\n        return arr[0]\n    if len(arr) % 2 == 0:\n        return (arr[len(arr) // 2 - 1] + arr[len(arr) // 2]) / 2\n    else:\n        return (arr[len(arr) // 2] + arr[len(arr) // 2 + 1]) / 2\n\n\nif __name__ == \"__main__\":\n    arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    print(median(arr))"
    },
    {
      "rank": 40,
      "score": 8.0,
      "candidate": "from typing import List\n\n\ndef median_trapezium(trapezium: List[int]) -> int:\n    median = 0\n    if len(trapezium) % 2 == 0:\n        median = (trapezium[len(trapezium) // 2] + trapezium[len(trapezium) // 2 - 1]) / 2\n    else:\n        median = (trapezium[len(trapezium) // 2] + trapezium[len(trapezium) // 2 - 1]) / 2\n    return median\n\n\nif __name__ == \"__main__\":\n    print(median_trapezium([1, 2, 3, 4, 5]))\n    print(median_trapezium([1, 2, 3, 4, 5, 6, 7, 8, 9]))"
    },
    {
      "rank": 41,
      "score": 8.0,
      "candidate": "import math\n\ndef find_median(arr):\n    arr.sort()\n    n = len(arr)\n    if n % 2 == 1:\n        return (arr[n//2-1] + arr[n//2])/2\n    else:\n        return arr[n//2]\n\n\nprint(find_median([1, 2, 3, 4, 5]))\nprint(find_median([1, 2, 3, 4, 5, 6]))\nprint(find_median([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))"
    },
    {
      "rank": 42,
      "score": 8.0,
      "candidate": "def median(arr):\n    n = len(arr)\n    if n % 2 == 0:\n        return (arr[n//2 - 1] + arr[n//2]) / 2\n    else:\n        return arr[n//2]\n\n\narr = [0, 0, 0, 1, 1, 1, 1, 1]\nprint(median(arr))"
    },
    {
      "rank": 43,
      "score": 8.0,
      "candidate": "def median_of_trapezium(trapezium):\n    return sorted(trapezium)[len(trapezium)//2]\n\n\nif __name__ == \"__main__\":\n    print(median_of_trapezium([0, 1, 2, 3, 4, 5]))\n    print(median_of_trapezium([0, 1, 2, 3, 4, 5, 6, 7]))\n    print(median_of_trapezium([0, 1, 2, 3, 4, 5, 6, 7, 8]))\n    print(median_of_trapezium([0, 1, 2, 3, 4, 5, 6, 7, 8, 9]))"
    },
    {
      "rank": 44,
      "score": 8.0,
      "candidate": "import math\n\n\ndef median(array):\n    if len(array) % 2 == 0:\n        return (array[len(array) // 2] + array[len(array) // 2 - 1]) / 2\n    else:\n        return array[len(array) // 2]\n\n\nif __name__ == \"__main__\":\n    array = [1, 2, 3, 4, 5, 6]\n    print(f\"The median of the array is: {median(array)}\")"
    },
    {
      "rank": 45,
      "score": 8.0,
      "candidate": "def find_median(trapezium):\n    if len(trapezium) % 2 == 0:\n        return (trapezium[len(trapezium)//2] + trapezium[len(trapezium)//2-1])/2\n    else:\n        return trapezium[len(trapezium)//2]\n\nprint(find_median([1,2,3,4,5,6,7,8,9,10]))\nprint(find_median([1,2,3,4,5,6,7,8,9]))\nprint(find_median([1,2,3,4,5,6,7,8]))\nprint(find_median([1,2,3,4,5,6,7]))"
    },
    {
      "rank": 46,
      "score": 8.0,
      "candidate": "import math\n\n\ndef median(lst):\n    # print(lst)\n    return int(math.ceil(sum(lst) / 2))\n\n\nif __name__ == '__main__':\n    lst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    print(median(lst))"
    },
    {
      "rank": 47,
      "score": 8.0,
      "candidate": "import math\n\ndef median(a):\n    if len(a) % 2 == 0:\n        a = a[int(len(a)/2)]\n    median = (a[0] + a[-1])/2\n    return median\n\nprint(median([1,2,3,4,5,6,7,8,9,10]))"
    },
    {
      "rank": 48,
      "score": 8.0,
      "candidate": "import math\n\ndef median(arr):\n    return (arr[0] + arr[len(arr)//2])/2\n\nprint(median([1,3,4,5]))\nprint(median([3,2,1,4]))\nprint(median([5,7,9]))\nprint(median([5,7,9,8,1]))\nprint(median([5,7,9,8,1,2,3,4]))\nprint(median([5,7,9,8,1,2,3,4,5]))"
    },
    {
      "rank": 49,
      "score": 8.0,
      "candidate": "from typing import List\n\n\ndef find_median(nums: List[int]) -> int:\n    if len(nums) % 2 == 0:\n        return (nums[len(nums) // 2 - 1] + nums[len(nums) // 2]) / 2\n    else:\n        return nums[len(nums) // 2]\n\n\nif __name__ == \"__main__\":\n    assert find_median([1, 2, 3, 4, 5]) == 3\n    assert find_median([1, 2, 3, 4]) == 2\n    assert find_median([1, 2, 3, 4, 5, 6]) == 6\n    assert find_median([1, 2, 3, 4, 5, 6, 7]) == 7"
    },
    {
      "rank": 50,
      "score": 8.0,
      "candidate": "def find_median(arr):\n    n = len(arr)\n    if n % 2 == 0:\n        return (arr[n//2-1] + arr[n//2])/2\n    else:\n        return arr[n//2]\n\nprint(find_median([1, 2, 3, 4, 5]))\nprint(find_median([1, 2, 3, 4, 5, 6]))\nprint(find_median([1, 2, 3, 4, 5, 6, 7]))\nprint(find_median([1, 2, 3, 4, 5, 6, 7, 8]))\nprint(find_median([1, 2, 3, 4, 5, 6, 7, 8, 9]))\nprint(find_median([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\nprint(find_median([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\nprint(find_median([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]))\nprint(find_median([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]))\nprint(find_median([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]))"
    },
    {
      "rank": 51,
      "score": 8.0,
      "candidate": "def median_of_trapezium(trapezium):\n    return sorted(trapezium)[len(trapezium)//2]\n\nif __name__ == '__main__':\n    assert median_of_trapezium([1,2,3]) == 2\n    assert median_of_trapezium([1,2,3,4]) == 2\n    assert median_of_trapezium([1,2,3,4,5]) == 3\n    assert median_of_trapezium([1,2,3,4,5,6]) == 4\n    assert median_of_trapezium([1,2,3,4,5,6,7]) == 6"
    },
    {
      "rank": 52,
      "score": 8.0,
      "candidate": "def median(arr):\n    if len(arr) % 2 == 0:\n        return (arr[len(arr)//2] + arr[len(arr)//2-1])/2\n    else:\n        return arr[len(arr)//2]\n\n\nif __name__ == \"__main__\":\n    arr = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]\n    print(median(arr))"
    },
    {
      "rank": 53,
      "score": 8.0,
      "candidate": "def find_median(array):\n    if len(array) == 1:\n        return array[0]\n    else:\n        return (array[0] + array[len(array) - 1]) / 2"
    },
    {
      "rank": 54,
      "score": 8.0,
      "candidate": "from math import floor\n\n\ndef median(trapezium):\n    median = 0.0\n    if len(trapezium) % 2 == 0:\n        median = (trapezium[int(len(trapezium)/2)] + trapezium[int(len(trapezium)/2)-1])/2\n    else:\n        median = trapezium[int(len(trapezium)/2)]\n    return median\n\n\nprint(median([0, 1, 3, 5, 7, 9]))\nprint(median([0, 1, 2, 4, 6, 8, 9]))\nprint(median([0, 1, 3, 5, 7, 9, 10, 12, 15, 16, 17]))\nprint(median([0, 1, 2, 4, 6, 8, 9, 10, 12, 15, 16, 17, 18]))\nprint(median([0, 1, 2, 4, 6, 8, 9, 10, 12, 15, 16, 17, 18, 19]))\nprint(median([0, 1, 2, 4, 6, 8, 9, 10, 12, 15, 16, 17, 18, 19, 20]))\nprint(median([0, 1, 2, 4, 6, 8, 9, 10, 12, 15, 16, 17, 18, 19, 20, 21, 22]))\nprint(median([0, 1, 2, 4, 6, 8, 9, 10, 12, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32]))\nprint(median([0, 1, 2, 4, 6, 8, 9, 10, 12, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32]))\nprint(median([0, 1, 2, 4, 6, 8, 9, 10, 12, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32]))\nprint(median([0, 1, 2, 4, 6, 8, 9, 10, 12"
    },
    {
      "rank": 55,
      "score": 8.0,
      "candidate": "def median_of_trapezium(trapezium):\n    \"\"\"\n    :type trapezium: List[int]\n    :rtype: int\n    \"\"\"\n    if len(trapezium) % 2 == 0:\n        return (trapezium[(len(trapezium) // 2) - 1] + trapezium[(len(trapezium) // 2)]) / 2\n    else:\n        return trapezium[(len(trapezium) // 2)]\n\n\ntrapezium = [1, 2, 3, 4, 5, 6]\n\nprint(median_of_trapezium(trapezium))"
    },
    {
      "rank": 56,
      "score": 8.0,
      "candidate": "def median(trapezium):\n    # create a sorted list\n    sorted_trapezium = sorted(trapezium)\n    if len(trapezium) % 2 == 1:\n        return sorted_trapezium[int(len(trapezium)/2)]\n    else:\n        return sorted_trapezium[int(len(trapezium)/2) - 1] + sorted_trapezium[int(len(trapezium)/2) - 2]\n\n\nprint(median([1, 5, 10, 13, 16, 18, 22, 24]))\nprint(median([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24]))\nprint(median([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24]))\nprint(median([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25]))"
    },
    {
      "rank": 57,
      "score": 8.0,
      "candidate": "def median(array):\n    if len(array) % 2!= 0:\n        return array[int(len(array) / 2)]\n    else:\n        return (array[int(len(array) / 2)] + array[int(len(array) / 2 - 1)]) / 2"
    },
    {
      "rank": 58,
      "score": 8.0,
      "candidate": "import numpy as np\n\n\ndef find_median(array):\n    if len(array) % 2 == 1:\n        return array[int(len(array) / 2)]\n    else:\n        return (array[int(len(array) / 2 - 1)] + array[int(len(array) / 2)]) / 2\n\n\ndef test_find_median():\n    assert find_median([0, 1, 2, 3]) == 2\n    assert find_median([1, 2, 3, 4]) == 3\n    assert find_median([1, 2, 3, 4, 5]) == 4\n    assert find_median([1, 2, 3, 4, 5, 6]) == 5\n    assert find_median([1, 2, 3, 4, 5, 6, 7]) == 7\n    assert find_median([1, 2, 3, 4, 5, 6, 7, 8]) == 8"
    },
    {
      "rank": 59,
      "score": 8.0,
      "candidate": "from typing import List\n\n\ndef find_median(arr: List[int]) -> int:\n    n = len(arr)\n    if n % 2 == 0:\n        return (arr[n//2-1] + arr[n//2])/2\n    else:\n        return arr[n//2]\n\n\nif __name__ == \"__main__\":\n    arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    print(find_median(arr))"
    },
    {
      "rank": 60,
      "score": 8.0,
      "candidate": "def median(arr):\n    arr.sort()\n    return (arr[len(arr) // 2] if len(arr) % 2 else arr[len(arr) // 2 - 1])\n\n\nif __name__ == \"__main__\":\n    print(median([1, 2, 3, 4, 5, 6, 7, 8]))\n    print(median([5, 4, 3, 2, 1, 0]))\n    print(median([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\n    print(median([5, 4, 3, 2, 1, 0, 2, 3, 4, 6, 7, 8, 9, 10, 11, 12]))\n    print(median([5, 4, 3, 2, 1, 0, 2, 3, 4, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100]))"
    },
    {
      "rank": 61,
      "score": 8.0,
      "candidate": "def find_median(arr):\n    \"\"\"\n    :type arr: List[int]\n    :rtype: int\n    \"\"\"\n    if len(arr) % 2 == 0:\n        return (arr[int(len(arr) / 2)] + arr[int(len(arr) / 2 - 1)]) / 2\n    else:\n        return arr[int(len(arr) / 2)]"
    },
    {
      "rank": 62,
      "score": 8.0,
      "candidate": "def median(array):\n    if len(array) == 0:\n        return array\n    return (array[0] + array[-1]) / 2\n\n\nprint(median([2, 3, 1, 4, 5, 8, 9]))\nprint(median([-2, -3, -1, -4, -5, -8, -9]))\nprint(median([1, 2, 3, 4, 5, 6, 7, 8, 9]))"
    },
    {
      "rank": 63,
      "score": 8.0,
      "candidate": "import math\n\n\ndef find_median(trapezium):\n    \"\"\"\n    :type trapezium: list\n    :rtype: float\n    \"\"\"\n    length = len(trapezium)\n    if length % 2 == 0:\n        median = (trapezium[length // 2 - 1] + trapezium[length // 2]) / 2\n    else:\n        median = (trapezium[length // 2] + trapezium[length // 2 + 1]) / 2\n    return median\n\n\nprint(find_median([1, 2, 3, 4, 5]))\nprint(find_median([1, 2, 3, 4, 5, 6]))\nprint(find_median([1, 2, 3, 4, 5, 6, 7]))\nprint(find_median([1, 2, 3, 4, 5, 6, 7, 8, 9]))\nprint(find_median([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))"
    },
    {
      "rank": 64,
      "score": 8.0,
      "candidate": "def median_trapezium(arr):\n    if len(arr) == 0:\n        return\n    if len(arr) == 1:\n        return arr[0]\n    if len(arr) == 2:\n        return (arr[0] + arr[1])/2\n    if len(arr) % 2 == 0:\n        return (arr[int(len(arr)/2)] + arr[int(len(arr)/2-1)])/2\n\n\nif __name__ == \"__main__\":\n    print(median_trapezium([1, 2, 3, 4, 5]))"
    },
    {
      "rank": 65,
      "score": 8.0,
      "candidate": "def median(list_of_numbers):\n    list_of_numbers.sort()\n    return list_of_numbers[len(list_of_numbers) // 2]\n\n\nif __name__ == \"__main__\":\n    print(median([1, 2, 3, 4, 5]))\n    print(median([1, 3, 4, 5]))\n    print(median([1, 4, 5]))"
    },
    {
      "rank": 66,
      "score": 8.0,
      "candidate": "def median(arr):\n    if len(arr) % 2 == 0:\n        return (arr[(len(arr)//2) - 1] + arr[(len(arr)//2)])/2\n    else:\n        return arr[(len(arr)//2)]\n\n\nif __name__ == \"__main__\":\n    assert median([1, 2, 3, 4]) == 3.0\n    assert median([]) == 0.0\n    assert median([-1, -2, -3, -4]) == 4.0"
    },
    {
      "rank": 67,
      "score": 8.0,
      "candidate": "def median(arr):\n    if len(arr) == 1:\n        return arr[0]\n\n    median_index = len(arr) // 2\n    median_element = arr[median_index]\n    left = median_index - 1\n    right = median_index + 1\n\n    while left <= right:\n        mid_index = (left + right) // 2\n        if arr[mid_index] < median_element:\n            left = mid_index + 1\n        else:\n            right = mid_index - 1\n\n    return median_element"
    },
    {
      "rank": 68,
      "score": 8.0,
      "candidate": "import math\n\n\ndef find_median(array):\n    n = len(array)\n    if n % 2 == 0:\n        return array[(n // 2) - 1] + array[(n // 2) + 1]\n    else:\n        return (array[n // 2] + array[n // 2 + 1]) / 2\n\n\nprint(find_median([1, 3, 5, 7, 9]))"
    },
    {
      "rank": 69,
      "score": 8.0,
      "candidate": "from typing import List\n\n\ndef find_median(trapezium: List[int]) -> int:\n    if len(trapezium) % 2 == 1:\n        return (trapezium[len(trapezium) // 2] + trapezium[len(trapezium) // 2 - 1]) / 2\n    else:\n        return trapezium[len(trapezium) // 2]\n\n\nif __name__ == \"__main__\":\n    print(find_median([1, 3, 5, 7, 9, 11, 13, 15]))"
    },
    {
      "rank": 70,
      "score": 8.0,
      "candidate": "def median(list):\n    if len(list) % 2 == 0:\n        return (list[int(len(list)/2)] + list[int(len(list)/2) - 1])/2\n    else:\n        return list[int(len(list)/2)]\n\nprint(median([1,2,3,4,5,6,7,8,9]))"
    },
    {
      "rank": 71,
      "score": 8.0,
      "candidate": "def median(array):\n    return sorted(array)[len(array) // 2]"
    },
    {
      "rank": 72,
      "score": 8.0,
      "candidate": "def median_trapezium(trapezium):\n    n = len(trapezium)\n    if n % 2 == 0:\n        return (trapezium[int((n - 1) / 2)] + trapezium[int((n - 1) / 2 + 1)]) / 2\n    else:\n        return trapezium[int((n - 1) / 2)]\n\n\ndef main():\n    print(median_trapezium([1, 2, 3, 4, 5]))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 73,
      "score": 8.0,
      "candidate": "def find_median(arr):\n    if len(arr) % 2 == 1:\n        return (arr[len(arr)//2-1] + arr[len(arr)//2])/2\n    else:\n        return (arr[len(arr)//2] + arr[len(arr)//2-1])/2\n\nif __name__ == \"__main__\":\n    arr = [1,2,3,4,5,6,7,8,9]\n    print(find_median(arr))"
    },
    {
      "rank": 74,
      "score": 8.0,
      "candidate": "def median(trapezium):\n    if len(trapezium) % 2 == 0:\n        return (trapezium[len(trapezium) // 2 - 1] + trapezium[len(trapezium) // 2]) / 2\n    else:\n        return trapezium[len(trapezium) // 2]\n\n\nif __name__ == \"__main__\":\n    print(median([1, 2, 3, 4, 5, 6]))\n    print(median([1, 2, 3, 4, 5, 6, 7, 8, 9]))"
    },
    {
      "rank": 75,
      "score": 8.0,
      "candidate": "from math import floor\n\n\ndef find_median(trapezium):\n    median = []\n    for i in range(len(trapezium)):\n        if len(trapezium) % 2 == 0:\n            median.append(trapezium[i])\n        else:\n            median.append(floor(trapezium[i]))\n    median.sort()\n    return median[int(len(median)/2)]\n\n\nprint(find_median([1, 2, 3, 4, 5, 6, 7]))\nprint(find_median([1, 2, 3, 4, 5, 6, 7]))\nprint(find_median([1, 2, 3, 4, 5, 6, 7, 8, 9]))\nprint(find_median([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\nprint(find_median([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]))\nprint(find_median([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]))"
    },
    {
      "rank": 76,
      "score": 8.0,
      "candidate": "from typing import List\n\n\ndef median_of_trapezium(trapezium: List[int]) -> int:\n    if len(trapezium) % 2 == 0:\n        return (trapezium[int(len(trapezium)/2)] + trapezium[int(len(trapezium)/2 - 1)])/2\n    else:\n        return trapezium[int(len(trapezium)/2)]\n\n\nif __name__ == \"__main__\":\n    assert median_of_trapezium([1, 2, 3, 4, 5]) == 5\n    assert median_of_trapezium([1, 2, 3, 4]) == 2\n    assert median_of_trapezium([1, 2, 3]) == 1"
    },
    {
      "rank": 77,
      "score": 8.0,
      "candidate": "def median(trapezium):\n    n = len(trapezium)\n    if n % 2 == 0:\n        return (trapezium[n // 2] + trapezium[n // 2 - 1]) / 2\n    else:\n        return trapezium[n // 2]\n\n\nprint(median([1, 2, 3, 4, 5]))"
    },
    {
      "rank": 78,
      "score": 8.0,
      "candidate": "def median(arr):\n    if len(arr) == 0:\n        return None\n\n    arr.sort()\n\n    if len(arr) % 2 == 0:\n        return (arr[int(len(arr)/2)] + arr[int(len(arr)/2-1)])/2\n    else:\n        return arr[int(len(arr)/2)]\n\n\narr = [1, 4, 2, 7, 5, 10]\nprint(median(arr))"
    },
    {
      "rank": 79,
      "score": 8.0,
      "candidate": "def median_of_trapezium(arr):\n    if len(arr) < 2:\n        return arr[0]\n    mid_index = len(arr) // 2\n    left_median = median_of_trapezium(arr[:mid_index])\n    right_median = median_of_trapezium(arr[mid_index:])\n    return (left_median + right_median) / 2\n\n\nprint(median_of_trapezium([1, 2, 3, 4, 5, 6, 7]))\nprint(median_of_trapezium([1, 2, 3, 4, 5]))"
    },
    {
      "rank": 80,
      "score": 8.0,
      "candidate": "import numpy as np\n\ndef median(arr):\n    n = len(arr)\n    if n%2 == 0:\n        return (arr[int(n/2)-1]+arr[int(n/2)])/2\n    else:\n        return arr[int(n/2)]\n\n\narr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 161, 162, 163, 164, 165, 166, 167, 168, 169, 171, 172, 173, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 186, 187, 188, 189, 190, 191, 192"
    },
    {
      "rank": 81,
      "score": 8.0,
      "candidate": "def find_median(trapezium):\n    if len(trapezium) % 2 == 0:\n        return (trapezium[int(len(trapezium) / 2)] + trapezium[int(len(trapezium) / 2) - 1]) / 2\n    else:\n        return (trapezium[int(len(trapezium) / 2)] + trapezium[int(len(trapezium) / 2) - 1]) / 2\n\n\nprint(find_median([1, 2, 3, 4, 5, 6, 7, 8]))"
    },
    {
      "rank": 82,
      "score": 8.0,
      "candidate": "def median(list):\n    list.sort()\n    if len(list)%2 == 0:\n        return list[int(len(list)/2)]\n    else:\n        return (list[int((len(list)/2)-1)] + list[int((len(list)/2)+1)])/2\n\nif __name__ == \"__main__\":\n    print(median([0,1,2,3,4]))\n    print(median([0,1,2,3,4,5,6]))\n    print(median([0,1,2,3,4,5,6,7,8]))\n    print(median([0,1,2,3,4,5,6,7,8,9]))\n    print(median([0,1,2,3,4,5,6,7,8,9,10]))\n    print(median([0,1,2,3,4,5,6,7,8,9,10,11,12]))\n    print(median([0,1,2,3,4,5,6,7,8,9,10,11,12,13]))\n    print(median([0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]))\n    print(median([0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]))\n    print(median([0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30]))\n    print(median([0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,"
    },
    {
      "rank": 83,
      "score": 8.0,
      "candidate": "def median(arr):\n    if len(arr) % 2 == 1:\n        return (arr[len(arr)//2] + arr[len(arr)//2 - 1]) / 2\n    else:\n        return (arr[len(arr)//2] + arr[len(arr)//2 - 1] + arr[len(arr)//2]) / 3\n\n\nif __name__ == \"__main__\":\n    print(median([-2, -1, 0, 1, 2, 3, 4, 5, 6, 7]))"
    },
    {
      "rank": 84,
      "score": 8.0,
      "candidate": "def median(arr):\n    if len(arr) % 2 == 0:\n        return (arr[len(arr)//2 - 1] + arr[len(arr)//2])/2\n    else:\n        return (arr[len(arr)//2])\n\n\nprint(median([1, 2, 3, 4, 5, 6, 7, 8, 9]))"
    },
    {
      "rank": 85,
      "score": 8.0,
      "candidate": "def median(array):\n    \"\"\"\n    Find the median of a trapezium.\n    :param array:\n    :return:\n    \"\"\"\n    if len(array) < 2:\n        return array[0]\n    else:\n        if len(array) % 2 == 0:\n            return (array[int(len(array) / 2)] + array[int(len(array) / 2 + 1)]) / 2\n        else:\n            return (array[int(len(array) / 2)] + array[int(len(array) / 2 - 1)]) / 2"
    },
    {
      "rank": 86,
      "score": 8.0,
      "candidate": "def median(array):\n    if len(array) % 2 == 0:\n        return (array[(len(array) // 2) - 1] + array[(len(array) // 2)]) / 2\n    else:\n        return array[(len(array) // 2)]\n\n\nif __name__ == \"__main__\":\n    print(median([1, 2, 3, 4, 5, 6]))\n    print(median([0, 1, 2, 3, 4, 5, 6]))\n    print(median([1, 2, 3, 4, 5, 6, 7, 8, 9]))"
    },
    {
      "rank": 87,
      "score": 8.0,
      "candidate": "def find_median(trapezium):\n    if len(trapezium) % 2 == 0:\n        return (trapezium[int(len(trapezium)/2)-1]+trapezium[int(len(trapezium)/2)])/2\n    else:\n        return trapezium[int(len(trapezium)/2)]\n\n\nif __name__ == \"__main__\":\n    print(find_median([1,2,3,4,5,6,7,8,9,10]))"
    },
    {
      "rank": 88,
      "score": 8.0,
      "candidate": "def find_median(list_data):\n    median = list_data[len(list_data)//2]\n    for i in range(len(list_data)//2):\n        if list_data[i] < median:\n            median = list_data[i]\n    return median\n\nprint(find_median([1,3,5,7,9,11,13,15]))"
    },
    {
      "rank": 89,
      "score": 8.0,
      "candidate": "def median(array):\n    array = sorted(array)\n    if len(array) % 2 == 0:\n        return array[int(len(array) / 2)]\n    else:\n        return (array[int(len(array) / 2) - 1] + array[int(len(array) / 2)]) / 2\n\n\nprint(median([1, 2, 3, 4, 5]))\nprint(median([4, 3, 2, 1]))\nprint(median([5, 4, 3, 2, 1]))"
    },
    {
      "rank": 90,
      "score": 8.0,
      "candidate": "from typing import List\n\n\ndef find_median(arr: List[int]) -> float:\n    arr = sorted(arr)\n    if len(arr) % 2 == 0:\n        return (arr[len(arr) // 2 - 1] + arr[len(arr) // 2]) / 2\n    else:\n        return arr[len(arr) // 2]\n\n\nif __name__ == \"__main__\":\n    print(find_median([1, 2, 3, 4, 5, 6, 7]))\n    print(find_median([1, 3, 5, 7, 9]))\n    print(find_median([1, 3, 5, 7, 9, 12]))\n    print(find_median([1, 3, 5, 7, 9, 12, 15]))\n    print(find_median([1, 3, 5, 7, 9, 12, 15, 18, 21, 25]))"
    },
    {
      "rank": 91,
      "score": 8.0,
      "candidate": "import math\n\ndef find_median(trapezium):\n    # Your code here\n    return math.median(trapezium)\n\n\nprint(find_median([0, 3, 4, 5]))\nprint(find_median([-4, -3, -2, -1, 0, 1, 2, 3, 4, 5]))"
    },
    {
      "rank": 92,
      "score": 8.0,
      "candidate": "def median(array):\n    n = len(array)\n    if n % 2 == 0:\n        return (array[n // 2 - 1] + array[n // 2]) / 2\n    else:\n        return array[n // 2]\n\n\nif __name__ == \"__main__\":\n    print(median([1, 2, 3, 4, 5, 6, 7, 8]))"
    },
    {
      "rank": 93,
      "score": 8.0,
      "candidate": "def median_of_a_trapezium(trapezium):\n    if len(trapezium) % 2 == 0:\n        return (trapezium[len(trapezium)//2 - 1] + trapezium[len(trapezium)//2])/2\n    else:\n        return trapezium[len(trapezium)//2]\n\n\nif __name__ == \"__main__\":\n    print(median_of_a_trapezium([1, 2, 3, 4, 5]))\n    print(median_of_a_trapezium([4, 5, 6, 7, 8, 9, 10]))"
    },
    {
      "rank": 94,
      "score": 8.0,
      "candidate": "import sys\n\ndef median(trapezium):\n    return sorted(trapezium)[len(trapezium)//2]\n\nif __name__ == \"__main__\":\n    input_list = []\n    for line in sys.stdin:\n        input_list.append(int(line))\n    print(median(input_list))"
    },
    {
      "rank": 95,
      "score": 1.0,
      "candidate": "import random\n\n\ndef find_median(trapezium):\n    random.shuffle(trapezium)\n    length = len(trapezium)\n    if length % 2 == 1:\n        return (trapezium[length // 2] + trapezium[length // 2 - 1]) / 2\n    else:\n        return trapezium[length // 2]\n\n\nprint(find_median([1, 2, 3, 4, 5, 6, 7, 8, 9]))\nprint(find_median([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\nprint(find_median([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]))"
    },
    {
      "rank": 96,
      "score": 1.0,
      "candidate": "def find_median(arr):\n    if len(arr) % 2 == 0:\n        return (arr[int(len(arr) / 2)] + arr[int(len(arr) / 2) - 1]) / 2\n    else:\n        return arr[int(len(arr) / 2)]\n\n\nprint(find_median([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))"
    },
    {
      "rank": 97,
      "score": 1.0,
      "candidate": "def median(list):\n    if len(list) == 0:\n        return 0\n    if len(list) == 1:\n        return list[0]\n    if len(list) % 2 == 0:\n        return (list[len(list) // 2] + list[len(list) // 2 - 1]) / 2\n    else:\n        return (list[len(list) // 2] + list[len(list) // 2 - 1]) / 2 + (list[len(list) // 2] + list[len(list) // 2 + 1]) / 2\n\n\nprint(median([4, 5, 6, 7, 8, 9, 10]))"
    },
    {
      "rank": 98,
      "score": 1.0,
      "candidate": "def median(lst):\n    if not lst:\n        return None\n    if len(lst) % 2:\n        return (lst[0] + lst[-1]) / 2\n    else:\n        return (lst[len(lst) // 2] + lst[len(lst) // 2 - 1]) / 2\n\n\ndef test_median():\n    assert median([1, 2, 3, 4, 5]) == 5\n    assert median([1, 2, 3, 4, 5, 6, 7, 8, 9]) == 4\n    assert median([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 8"
    },
    {
      "rank": 99,
      "score": 1.0,
      "candidate": "from typing import List\n\n\ndef find_median(arr: List[int]) -> int:\n    return arr[len(arr) // 2]\n\n\nif __name__ == \"__main__\":\n    assert find_median([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 9\n    assert find_median([]) == None"
    },
    {
      "rank": 100,
      "score": 1.0,
      "candidate": "def find_median(arr):\n    if len(arr) <= 1:\n        return arr[0]\n    mid = len(arr) // 2\n    return (arr[mid - 1] + arr[mid]) / 2\n\n\nif __name__ == \"__main__\":\n    assert find_median([1, 3, 5, 7, 9]) == 2.5\n    assert find_median([1, 2, 3]) == 1.5\n    assert find_median([1, 2, 3, 4, 5]) == 3.5"
    }
  ]
}