{
  "timestamp": "2025-09-14T13:20:07.162014",
  "method": "improved_llm_judge",
  "judge_model": "codellama/CodeLlama-7b-Python-hf",
  "target_model": "codet5-770m",
  "dataset": "mbpp",
  "problem_number": 118,
  "total_candidates": 100,
  "results": [
    {
      "rank": 1,
      "score": 10.0,
      "candidate": "def magic_square(height):\n    magic_square = (height * height)\n    return magic_square\n\n\nprint(magic_square(10))"
    },
    {
      "rank": 2,
      "score": 10.0,
      "candidate": "def magic_square(n):\n    return n**2"
    },
    {
      "rank": 3,
      "score": 10.0,
      "candidate": "def magic_square(a, b):\n    return a**2 + b**2\n\n\nprint(magic_square(10, 10))"
    },
    {
      "rank": 4,
      "score": 10.0,
      "candidate": "def magic_square(n):\n    if n == 1:\n        return 1\n    else:\n        return n*magic_square(n-1)\n\nif __name__ == \"__main__\":\n    print(magic_square(2))\n    print(magic_square(3))\n    print(magic_square(4))\n    print(magic_square(5))\n    print(magic_square(6))\n    print(magic_square(7))\n    print(magic_square(8))\n    print(magic_square(9))\n    print(magic_square(10))\n    print(magic_square(11))\n    print(magic_square(12))\n    print(magic_square(13))\n    print(magic_square(14))\n    print(magic_square(15))\n    print(magic_square(16))\n    print(magic_square(17))\n    print(magic_square(18))\n    print(magic_square(19))\n    print(magic_square(20))\n    print(magic_square(21))\n    print(magic_square(22))\n    print(magic_square(23))\n    print(magic_square(24))\n    print(magic_square(25))\n    print(magic_square(26))\n    print(magic_square(27))\n    print(magic_square(28))\n    print(magic_square(29))\n    print(magic_square(30))\n    print(magic_square(31))\n    print(magic_square(32))\n    print(magic_square(33))\n    print(magic_square(34))\n    print(magic_square(35))\n    print(magic_square(36))\n    print(magic_square(37))\n    print(magic_square(38))\n    print(magic_square(39))\n    print(magic_square(40))\n    print(magic_square(41))\n    print(magic_square(42))\n    print(magic_square(43))\n    print(magic_square(44))\n    print(magic_square(45))\n    print(magic_square(46))\n    print(magic_square(47))\n    print"
    },
    {
      "rank": 5,
      "score": 10.0,
      "candidate": "def magic_square(x, y):\n    if x > y:\n        return magic_square(y, x)\n    else:\n        return magic_square(x, y)\n\ndef main():\n    print(magic_square(3, 3))\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 6,
      "score": 10.0,
      "candidate": "def magic_square(size):\n    magic_square = []\n    for i in range(size):\n        magic_square.append(list(map(int, input().split())))\n    return magic_square\n\n\nprint(magic_square(10))"
    },
    {
      "rank": 7,
      "score": 10.0,
      "candidate": "def magic_square(n):\n    square = n**2\n    return square\n\nprint(magic_square(6))"
    },
    {
      "rank": 8,
      "score": 10.0,
      "candidate": "def magic_square(a, b):\n    print(\"magic square: \")\n    print(\"a = \", a)\n    print(\"b = \", b)\n    if a > b:\n        print(\"a must be greater than b\")\n    else:\n        print(\"a must be less than b\")\n\nmagic_square(2, 3)"
    },
    {
      "rank": 9,
      "score": 10.0,
      "candidate": "def magic_square(n):\n    '''\n    n: int\n    returns: int\n    '''\n    return n * n"
    },
    {
      "rank": 10,
      "score": 10.0,
      "candidate": "def magic_square(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return (magic_square(n-1)+magic_square(n-2))\n\nprint(magic_square(10))"
    },
    {
      "rank": 11,
      "score": 10.0,
      "candidate": "def magic_square(rows, cols):\n    magic_square = [0] * rows * cols\n    magic_square[0] = 1\n    magic_square[1] = 2\n    magic_square[2] = 4\n    magic_square[3] = 8\n    magic_square[4] = 16\n    magic_square[5] = 32\n    magic_square[6] = 64\n    magic_square[7] = 128\n    magic_square[8] = 256\n    magic_square[9] = 512\n    magic_square[10] = 1024\n    magic_square[11] = 2048\n    magic_square[12] = 4096\n    magic_square[13] = 8192\n    magic_square[14] = 16384\n    magic_square[15] = 32768\n    magic_square[16] = 65536\n    magic_square[17] = 131072\n    magic_square[18] = 262144\n    magic_square[19] = 524288\n    magic_square[20] = 1048576\n    magic_square[21] = 2097152\n    magic_square[22] = 4194304\n    magic_square[23] = 8388608\n    magic_square[24] = 1048576\n    magic_square[25] = 2097152\n    magic_square[26] = 16777216\n    magic_square[27] = 8194304\n    magic_square[28] = 262144\n    magic_square[29] = 524288\n    magic_square[30] = 1048576\n    magic_square[31] = 2097152\n    magic_square[32] = 16777216\n    magic_square[33] = 8194304\n    magic_square[34] = 262144\n    magic_square[35] = 4194304\n    magic_square[36] = 8388608\n    magic_square[37] = 1048576\n    magic_square[38] = 2097152\n    magic_square[39] = 16777216\n    magic_square[40] = 8194304\n    magic_square[41] = 262144\n    magic"
    },
    {
      "rank": 12,
      "score": 10.0,
      "candidate": "def magic_square(n):\n    \"\"\"\n    Calculate magic square.\n    \"\"\"\n    return (2 * (n + 1)) ** 2"
    },
    {
      "rank": 13,
      "score": 10.0,
      "candidate": "def magic_square(n):\n    '''\n    n: int\n    returns: int\n    '''\n    return n**2\n\nprint(magic_square(8))"
    },
    {
      "rank": 14,
      "score": 10.0,
      "candidate": "def magic_square(rows, columns):\n    magic_square = [[0 for _ in range(columns)] for _ in range(rows)]\n\n    for i in range(rows):\n        for j in range(columns):\n            magic_square[i][j] = (i**2 + j**2)**0.5\n\n    return magic_square\n\n\nprint(magic_square(5, 5))"
    },
    {
      "rank": 15,
      "score": 10.0,
      "candidate": "def magic_square(n):\n    return (n * n) ** 0.5\n\nprint(magic_square(6))"
    },
    {
      "rank": 16,
      "score": 10.0,
      "candidate": "def magic_square(rows):\n    magic_square = []\n    for i in range(rows):\n        magic_square.append([])\n        for j in range(rows):\n            magic_square[i].append(0)\n    for i in range(rows):\n        for j in range(rows):\n            magic_square[i][j] = int(input())\n    for i in range(rows):\n        for j in range(rows):\n            magic_square[i][j] = int(magic_square[i][j])\n    return magic_square\n\n\nprint(magic_square(6))"
    },
    {
      "rank": 17,
      "score": 10.0,
      "candidate": "def magic_square(n):\n    return n*n"
    },
    {
      "rank": 18,
      "score": 10.0,
      "candidate": "def magic_square(n):\n    square = []\n    for i in range(n):\n        square.append(i)\n    return square\n\ndef test():\n    assert magic_square(4) == [0, 1, 2, 3, 4]\n    assert magic_square(7) == [0, 1, 2, 3, 4, 5, 6, 7]\n    assert magic_square(10) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    assert magic_square(15) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]\n    assert magic_square(20) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]\n    assert magic_square(40) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100]\n    assert magic_square(100) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34"
    },
    {
      "rank": 19,
      "score": 10.0,
      "candidate": "def magic_square(n):\n    if n < 2:\n        return n\n    else:\n        return n*magic_square(n-1) + magic_square(n-2)\n\nprint(magic_square(8))"
    },
    {
      "rank": 20,
      "score": 10.0,
      "candidate": "def magic_square(n):\n    magic_square = n**2\n    return magic_square\n\nprint(magic_square(5))"
    },
    {
      "rank": 21,
      "score": 10.0,
      "candidate": "def magic_square(rows, cols):\n    magic_square = [0] * rows\n    for i in range(rows):\n        for j in range(cols):\n            magic_square[i] += 1\n    return magic_square\n\nprint(magic_square(5, 5))"
    },
    {
      "rank": 22,
      "score": 10.0,
      "candidate": "def magic_square(height):\n    return height*height\n\nprint(magic_square(10))"
    },
    {
      "rank": 23,
      "score": 9.0,
      "candidate": "def magic_square(n):\n    magic_square = 1\n    for i in range(1, n):\n        magic_square *= (i + 1)\n    return magic_square\n\nif __name__ == \"__main__\":\n    n = int(input(\"Enter the number of elements: \"))\n    print(\"The magic square is\", magic_square(n))"
    },
    {
      "rank": 24,
      "score": 9.0,
      "candidate": "def magic_square(size):\n    magic_square = size ** 2\n    return magic_square\n\ndef main():\n    size = int(input(\"Enter size: \"))\n    print(magic_square(size))\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 25,
      "score": 9.0,
      "candidate": "def magic_square(height):\n    magic_square = 0\n    for x in range(height):\n        magic_square += x * x\n    return magic_square\n\nif __name__ == \"__main__\":\n    print(magic_square(8))"
    },
    {
      "rank": 26,
      "score": 8.0,
      "candidate": "def magic_square(n):\n    return n ** 2"
    },
    {
      "rank": 27,
      "score": 8.0,
      "candidate": "def magic_square(n):\n    square_list = []\n    for i in range(n):\n        square_list.append(list(map(int, input().split())))\n    magic_square_list = []\n    for i in range(n):\n        magic_square_list.append([])\n        for j in range(n):\n            magic_square_list[i].append(square_list[i][j]**2)\n    for i in range(n):\n        for j in range(n):\n            if magic_square_list[i][j]!= 0:\n                magic_square_list[i].append(magic_square_list[i][j]**0.5)\n    for i in range(n):\n        for j in range(n):\n            print(magic_square_list[i][j], end=\" \")\n        print()\n\nmagic_square(5)"
    },
    {
      "rank": 28,
      "score": 8.0,
      "candidate": "def magic_square(size):\n    magic_square = [size**2]\n    for i in range(1,size+1):\n        for j in range(1,size+1):\n            magic_square.append(magic_square[i-1]+magic_square[j-1])\n    return magic_square[size]\n\nprint(magic_square(8))"
    },
    {
      "rank": 29,
      "score": 8.0,
      "candidate": "def magic_square(n):\n    return (n * n) * (2 * n + 1) // 6\n\n\ndef main():\n    magic_square(4)\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 30,
      "score": 8.0,
      "candidate": "def magic_square(n):\n    return n ** 2\n\ndef magic_square_with_range(n):\n    return n ** 2 if n < 16 else n ** 2 + n ** 2 + n ** 2 + n ** 2\n\ndef magic_square_with_range_and_range_and_range(n):\n    return n ** 2 if n < 16 else n ** 2 + n ** 2 + n ** 2 + n ** 2 + n ** 2\n\nif __name__ == \"__main__\":\n    print(magic_square(8))\n    print(magic_square_with_range(8))\n    print(magic_square_with_range_and_range(8))"
    },
    {
      "rank": 31,
      "score": 8.0,
      "candidate": "import numpy as np\n\ndef magic_square(a):\n    return np.sqrt(np.sum(np.square(a)))"
    },
    {
      "rank": 32,
      "score": 8.0,
      "candidate": "def magic_square(n):\n    return n**2\n\nif __name__ == \"__main__\":\n    print(magic_square(int(input())))"
    },
    {
      "rank": 33,
      "score": 8.0,
      "candidate": "def magic_square(rows, cols):\n    magic = [[0 for i in range(cols)] for j in range(rows)]\n    for i in range(rows):\n        for j in range(cols):\n            if i == 0 or j == 0:\n                magic[i][j] = i + j\n            else:\n                magic[i][j] = min(magic[i - 1][j - 1], magic[i - 1][j], magic[i - 1][j + 1], magic[i][j - 1], magic[i][j + 1]) + 1\n    return magic\n\n\nif __name__ == \"__main__\":\n    print(magic_square(5, 5))"
    },
    {
      "rank": 34,
      "score": 8.0,
      "candidate": "def magic_square(rows, cols):\n    magic_square = []\n    for i in range(rows):\n        magic_square.append([])\n        for j in range(cols):\n            magic_square[i].append(0)\n    for i in range(rows):\n        for j in range(cols):\n            if i == 0 or j == 0:\n                magic_square[i][j] = 1\n            elif i == 1 and j == 1:\n                magic_square[i][j] = 2\n            elif i == 2 and j == 2:\n                magic_square[i][j] = 3\n            elif i == 3 and j == 3:\n                magic_square[i][j] = 4\n            elif i == 4 and j == 4:\n                magic_square[i][j] = 5\n            elif i == 5 and j == 5:\n                magic_square[i][j] = 6\n            else:\n                magic_square[i][j] = 7\n    return magic_square"
    },
    {
      "rank": 35,
      "score": 8.0,
      "candidate": "def magic_square(n):\n    magic_square = 0\n    for i in range(n):\n        magic_square += i**2\n    return magic_square\n\nprint(magic_square(5))"
    },
    {
      "rank": 36,
      "score": 8.0,
      "candidate": "import math\n\ndef magic_square(a):\n    return math.sqrt(a ** 2)\n\nprint(magic_square(3))"
    },
    {
      "rank": 37,
      "score": 8.0,
      "candidate": "def magic_square(size):\n    square = []\n    for i in range(size):\n        square.append(i)\n    magic_square = []\n    for i in range(size):\n        for j in range(size):\n            magic_square.append(square[i] + square[j])\n    return magic_square\n\nprint(magic_square(5))"
    },
    {
      "rank": 38,
      "score": 8.0,
      "candidate": "def magic_square(n):\n    return (n * (n + 1)) / 2\n\nprint(magic_square(4))"
    },
    {
      "rank": 39,
      "score": 8.0,
      "candidate": "def magic_square(n):\n    if n==0:\n        return 0\n    else:\n        return n**2 + magic_square(n-1)\n\n\nif __name__ == \"__main__\":\n    print(magic_square(5))"
    },
    {
      "rank": 40,
      "score": 8.0,
      "candidate": "def magic_square(x):\n    if x % 2 == 0:\n        return x**2\n    else:\n        return 2*x + 1\n\n\nif __name__ == \"__main__\":\n    assert magic_square(5) == 16\n    assert magic_square(2) == 8\n    assert magic_square(1) == 16\n    assert magic_square(0) == 0"
    },
    {
      "rank": 41,
      "score": 8.0,
      "candidate": "def magic_square(n):\n    return (n * n) * (2 * n + 1) / 6\n\nprint(magic_square(10))\n\n# https://www.geeksforgeeks.org/magic-square/\n# https://www.geeksforgeeks.org/magic-square/"
    },
    {
      "rank": 42,
      "score": 8.0,
      "candidate": "def magic_square(rows, cols):\n    magic_square = [0] * rows * cols\n    magic_square[0] = 1\n    for i in range(1, rows):\n        magic_square[i * cols + 1] = magic_square[i]\n        magic_square[i * cols + 2] = magic_square[i]\n        magic_square[i * cols + 3] = magic_square[i]\n        magic_square[i * cols + 4] = magic_square[i]\n    return magic_square\n\nprint(magic_square(3, 4))"
    },
    {
      "rank": 43,
      "score": 8.0,
      "candidate": "def magic_square(n):\n    return n * n\n\ndef magic_square_2(n):\n    return n * n * 3\n\n\nprint(magic_square(10))\nprint(magic_square_2(10))"
    },
    {
      "rank": 44,
      "score": 8.0,
      "candidate": "def magic_square(height):\n    magic_square_value = height * height\n    print(magic_square_value)\n\nmagic_square(5)"
    },
    {
      "rank": 45,
      "score": 8.0,
      "candidate": "def magic_square(n):\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 4\n    elif n == 3:\n        return 8\n    elif n == 4:\n        return 16\n    elif n == 5:\n        return 32\n    else:\n        return magic_square(n-1) + magic_square(n-2) + magic_square(n-3)\n\n\nprint(magic_square(4))"
    },
    {
      "rank": 46,
      "score": 1.0,
      "candidate": "def magic_square(n):\n    return n * n\n\n\nprint(magic_square(6))"
    },
    {
      "rank": 47,
      "score": 1.0,
      "candidate": "def magic_square(a, b):\n    return (a * b)**2\n\nprint(magic_square(5, 5))"
    },
    {
      "rank": 48,
      "score": 1.0,
      "candidate": "def magic_square(n):\n    return n * n\n\nif __name__ == \"__main__\":\n    print(magic_square(100))"
    },
    {
      "rank": 49,
      "score": 1.0,
      "candidate": "def magic_square(rows, cols):\n    magic_square = [[0 for x in range(cols)] for x in range(rows)]\n\n    for i in range(rows):\n        for j in range(cols):\n            magic_square[i][j] = (i * i + j * j) % 100\n\n    return magic_square\n\n\nprint(magic_square(5, 5))"
    },
    {
      "rank": 50,
      "score": 1.0,
      "candidate": "def magic_square(n):\n    return n * n\n\n\nprint(magic_square(2))\nprint(magic_square(6))\nprint(magic_square(32))"
    },
    {
      "rank": 51,
      "score": 1.0,
      "candidate": "def magic_square(n):\n    magic_square = 0\n    for i in range(n):\n        for j in range(n):\n            magic_square += i**2 + j**2\n    return magic_square\n\n\ndef main():\n    print(magic_square(100000))\n    print(magic_square(1000000))\n    print(magic_square(1000000))\n    print(magic_square(100000))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 52,
      "score": 1.0,
      "candidate": "def magic_square(n):\n    magic_square = 0\n    for i in range(n):\n        for j in range(n):\n            magic_square += (i**2 + j**2)**0.5\n    return magic_square\n\n\nif __name__ == \"__main__\":\n    print(magic_square(4))"
    },
    {
      "rank": 53,
      "score": 1.0,
      "candidate": "def magic_square(n):\n    return n * n\n\n\nif __name__ == \"__main__\":\n    assert magic_square(3) == 36\n    assert magic_square(4) == 352\n    assert magic_square(5) == 962"
    },
    {
      "rank": 54,
      "score": 1.0,
      "candidate": "def magic_square(height):\n    magic_square = [0 for _ in range(height)]\n    magic_square[0] = 1\n    magic_square[1] = 2\n    magic_square[2] = 3\n    magic_square[3] = 4\n    magic_square[4] = 5\n\n    for i in range(5, height + 1):\n        for j in range(i):\n            magic_square[j] += magic_square[j - i]\n\n    return magic_square\n\n\ndef test_magic_square():\n    assert magic_square(5) == [1, 2, 3, 4, 5]"
    },
    {
      "rank": 55,
      "score": 1.0,
      "candidate": "def magic_square(n):\n    magic_square = 1\n    for i in range(n):\n        magic_square *= i\n    return magic_square\n\n\nif __name__ == \"__main__\":\n    assert magic_square(3) == 16\n    assert magic_square(10) == 24\n    assert magic_square(20) == 36\n    assert magic_square(10) == 16\n    assert magic_square(0) == 0\n    assert magic_square(1) == 1\n    assert magic_square(2) == 2\n    assert magic_square(4) == 4\n    assert magic_square(5) == 8\n    assert magic_square(6) == 16\n    assert magic_square(7) == 32\n    assert magic_square(8) == 64\n    assert magic_square(9) == 128\n    assert magic_square(10) == 256"
    },
    {
      "rank": 56,
      "score": 1.0,
      "candidate": "def magic_square(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return magic_square(n - 1) + magic_square(n - 2)\n\n\nprint(magic_square(5))"
    },
    {
      "rank": 57,
      "score": 1.0,
      "candidate": "def magic_square(n):\n    return n * (n + 1) / 2\n\n\nassert magic_square(10) == 2\nassert magic_square(20) == 6\nassert magic_square(30) == 24"
    },
    {
      "rank": 58,
      "score": 1.0,
      "candidate": "def magic_square(n):\n    magic = n * n\n    return magic\n\n\nprint(magic_square(5))"
    },
    {
      "rank": 59,
      "score": 1.0,
      "candidate": "def magic_square(n):\n    magic_square = 0\n    for i in range(n):\n        magic_square += i**2\n    return magic_square\n\nprint(magic_square(3))"
    },
    {
      "rank": 60,
      "score": 1.0,
      "candidate": "def magic_square(n):\n    return n * (n + 1) / 2\n\n\nprint(magic_square(4))\nprint(magic_square(8))\nprint(magic_square(16))"
    },
    {
      "rank": 61,
      "score": 1.0,
      "candidate": "def magic_square(size):\n    \"\"\"\n    :type size: int\n    :rtype: int\n    \"\"\"\n    return (size ** 2)\n\n\nif __name__ == \"__main__\":\n    print(magic_square(10))"
    },
    {
      "rank": 62,
      "score": 1.0,
      "candidate": "def magic_square(n):\n    return (n*n)**2\n\n\nprint(magic_square(4))\nprint(magic_square(5))"
    },
    {
      "rank": 63,
      "score": 1.0,
      "candidate": "def magic_square(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    return int(n**0.5)\n\n\nif __name__ == '__main__':\n    assert magic_square(3) == 4\n    assert magic_square(5) == 8\n    assert magic_square(7) == 16\n    assert magic_square(9) == 32\n    assert magic_square(1) == 1"
    },
    {
      "rank": 64,
      "score": 1.0,
      "candidate": "def magic_square(n):\n    magic_square = n * n\n    return magic_square\n\nprint(magic_square(8))\nprint(magic_square(10))\nprint(magic_square(100))"
    },
    {
      "rank": 65,
      "score": 1.0,
      "candidate": "def magic_square(n):\n    return n * n\n\n\nif __name__ == '__main__':\n    print(magic_square(4))"
    },
    {
      "rank": 66,
      "score": 1.0,
      "candidate": "def magic_square(a):\n    for i in range(1,a+1):\n        for j in range(1,a+1):\n            if i**2 + j**2 == a**2:\n                return i,j\n    return 0,0\n\n\nprint(magic_square(5))\nprint(magic_square(10))"
    },
    {
      "rank": 67,
      "score": 1.0,
      "candidate": "def magic_square(n):\n    return n**2\n\n\nprint(magic_square(4))"
    },
    {
      "rank": 68,
      "score": 1.0,
      "candidate": "def magic_square(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    if n < 0:\n        return -1\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    return magic_square(n-1) + magic_square(n-2) + magic_square(n-3)\n\nprint(magic_square(10))\nprint(magic_square(100))\nprint(magic_square(1000))\nprint(magic_square(1000000))"
    },
    {
      "rank": 69,
      "score": 1.0,
      "candidate": "def magic_square(n):\n    if n == 0:\n        return 0\n    else:\n        return (n * n) + magic_square(n - 1)\n\n\nprint(magic_square(5))"
    },
    {
      "rank": 70,
      "score": 1.0,
      "candidate": "def magic_square(n):\n    return n * n\n\n\nprint(magic_square(10))"
    },
    {
      "rank": 71,
      "score": 1.0,
      "candidate": "def magic_square(n):\n    magic_square = 0\n    for i in range(n):\n        magic_square += i**2\n    return magic_square\n\nprint(magic_square(6))"
    },
    {
      "rank": 72,
      "score": 1.0,
      "candidate": "def magic_square(n):\n    return n ** 2\n\nif __name__ == \"__main__\":\n    print(magic_square(int(input(\"Enter a number: \"))))"
    },
    {
      "rank": 73,
      "score": 1.0,
      "candidate": "def magic_square(n):\n    # Write your code here\n    return n*n"
    },
    {
      "rank": 74,
      "score": 1.0,
      "candidate": "def magic_square(n):\n    if n == 1:\n        return 1\n    else:\n        return (n*n)*(n+1)/2\n\n\nprint(magic_square(5))"
    },
    {
      "rank": 75,
      "score": 1.0,
      "candidate": "def magic_square(n):\n    return (n*n)\n\n\nprint(magic_square(5))"
    },
    {
      "rank": 76,
      "score": 1.0,
      "candidate": "def magic_square(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    if n < 3:\n        return n\n\n    return (n * (n + 1)) // 2\n\n\nprint(magic_square(8))"
    },
    {
      "rank": 77,
      "score": 1.0,
      "candidate": "def magic_square(m):\n    \"\"\"\n    :type m: int\n    :rtype: int\n    \"\"\"\n    return m * m\n\n\ndef main():\n    magic_square(12)\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 78,
      "score": 1.0,
      "candidate": "def magic_square(width, height):\n    if width == height:\n        return width**2\n    elif width < height:\n        return magic_square(width - 1, height) + magic_square(width, height - 1)\n    else:\n        return magic_square(width - 1, height - 1) + magic_square(width, height - 1)\n\nif __name__ == \"__main__\":\n    print(magic_square(4, 4))"
    },
    {
      "rank": 79,
      "score": 1.0,
      "candidate": "def magic_square(x, y):\n    return (x * x + y * y) ** 0.5\n\n\nprint(magic_square(2, 2))"
    },
    {
      "rank": 80,
      "score": 1.0,
      "candidate": "def magic_square(n):\n    magic_square = []\n    for i in range(n):\n        magic_square.append(i ** 2)\n\n    return magic_square\n\n\nprint(magic_square(4))"
    },
    {
      "rank": 81,
      "score": 1.0,
      "candidate": "def magic_square(n):\n    if n <= 1:\n        return n\n    else:\n        return magic_square(n-1) + magic_square(n-2)\n\n\nprint(magic_square(6))"
    },
    {
      "rank": 82,
      "score": 1.0,
      "candidate": "def magic_square(n):\n    if n == 1:\n        return 1\n    return n * magic_square(n - 1)\n\n\nif __name__ == \"__main__\":\n    print(magic_square(5))"
    },
    {
      "rank": 83,
      "score": 1.0,
      "candidate": "def magic_square(n):\n    return (n**2)\n\n\nprint(magic_square(2))\nprint(magic_square(5))"
    },
    {
      "rank": 84,
      "score": 1.0,
      "candidate": "def magic_square(n):\n    if n == 1:\n        return 1\n    else:\n        return n * magic_square(n - 1)\n\n\nif __name__ == \"__main__\":\n    print(magic_square(6))"
    },
    {
      "rank": 85,
      "score": 1.0,
      "candidate": "def magic_square(n):\n    return n ** 2\n\nprint(magic_square(3))\nprint(magic_square(4))\nprint(magic_square(5))\nprint(magic_square(6))\nprint(magic_square(7))\nprint(magic_square(8))"
    },
    {
      "rank": 86,
      "score": 1.0,
      "candidate": "def magic_square(n):\n    magic = n ** 2\n    return magic\n\n\nprint(magic_square(10))"
    },
    {
      "rank": 87,
      "score": 1.0,
      "candidate": "def magic_square(n):\n    return n**2\n\n\n\nprint(magic_square(5))\nprint(magic_square(10))\nprint(magic_square(20))"
    },
    {
      "rank": 88,
      "score": 1.0,
      "candidate": "def magic_square(rows, cols):\n    magic_square = []\n    magic_square.append(rows * rows)\n    magic_square.append(cols * cols)\n    return magic_square\n\n\nprint(magic_square(5, 10))\nprint(magic_square(10, 5))\nprint(magic_square(10, 10))"
    },
    {
      "rank": 89,
      "score": 1.0,
      "candidate": "def magic_square(n):\n    return n ** 2\n\n\ndef main():\n    print(magic_square(5))\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 90,
      "score": 1.0,
      "candidate": "def magic_square(n):\n    return (n**2)*(n**2)\n\nprint(magic_square(10))"
    },
    {
      "rank": 91,
      "score": 1.0,
      "candidate": "def magic_square(a, b):\n    return a*a + b*b\n\nprint(magic_square(1, 1))\nprint(magic_square(5, 5))\nprint(magic_square(8, 8))"
    },
    {
      "rank": 92,
      "score": 1.0,
      "candidate": "def magic_square(n):\n    magic_square = [0] * (n + 1)\n    magic_square[0] = 1\n    for i in range(1, n + 1):\n        magic_square[i] = magic_square[i - 1] * magic_square[i - 1]\n\n    return magic_square\n\n\nif __name__ == \"__main__\":\n    print(magic_square(8))"
    },
    {
      "rank": 93,
      "score": 1.0,
      "candidate": "def magic_square(n):\n    return n * n\n\nprint(magic_square(10))\nprint(magic_square(20))\nprint(magic_square(30))\nprint(magic_square(40))"
    },
    {
      "rank": 94,
      "score": 1.0,
      "candidate": "def magic_square(n):\n    return n ** 2\n\n\nprint(magic_square(4))"
    },
    {
      "rank": 95,
      "score": 1.0,
      "candidate": "def magic_square(num):\n    return num ** 2"
    },
    {
      "rank": 96,
      "score": 1.0,
      "candidate": "def magic_square(n):\n    return ((n * n) - 1) ** 2\n\n\nif __name__ == '__main__':\n    print(magic_square(5))"
    },
    {
      "rank": 97,
      "score": 1.0,
      "candidate": "def magic_square(n):\n    return (n * n)\n\n\nprint(magic_square(100))"
    },
    {
      "rank": 98,
      "score": 1.0,
      "candidate": "def magic_square(n):\n    return n * n\n\nprint(magic_square(10))\nprint(magic_square(100))\nprint(magic_square(1000))\nprint(magic_square(100000000))\nprint(magic_square(10000000000000000))"
    },
    {
      "rank": 99,
      "score": 1.0,
      "candidate": "def magic_square(n):\n    return (n**2)**(1/2)\n\ndef main():\n    print(magic_square(8))\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 100,
      "score": 1.0,
      "candidate": "def magic_square(x, y):\n    return ((x * x) + (y * y)) ** 0.5\n\n\nprint(magic_square(3, 4))"
    }
  ]
}