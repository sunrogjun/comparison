{
  "timestamp": "2025-09-14T13:32:20.975190",
  "method": "improved_llm_judge",
  "judge_model": "codellama/CodeLlama-7b-Python-hf",
  "target_model": "codet5-770m",
  "dataset": "mbpp",
  "problem_number": 146,
  "total_candidates": 100,
  "results": [
    {
      "rank": 1,
      "score": 10.0,
      "candidate": "def run_length_encoding(string):\n    # code here\n    return \"\".join(list(map(lambda x: str(len(x)), string)))\n\nif __name__ == \"__main__\":\n    print(run_length_encoding([1, 2, 3, 4, 5]))"
    },
    {
      "rank": 2,
      "score": 10.0,
      "candidate": "def run_length_encoding(sequence):\n    \"\"\"\n    :type sequence: List[str]\n    :rtype: List[str]\n    \"\"\"\n    if sequence is None:\n        return []\n\n    result = []\n    result.append(sequence[0])\n    for i in range(1, len(sequence)):\n        if sequence[i] == sequence[i - 1]:\n            result.append(sequence[i])\n        else:\n            result.append(sequence[i - 1])\n            result.append(sequence[i])\n    return result"
    },
    {
      "rank": 3,
      "score": 10.0,
      "candidate": "def run_length(list):\n    length = 0\n    for i in range(len(list)):\n        if i!= len(list) - 1:\n            length += 1\n        else:\n            if length!= 0:\n                print(list[i], end=' ')\n            length = 1\n            list[i] =''\n    print(list[i], end=' ')\n\n\nif __name__ == '__main__':\n    run_length([])\n    run_length([1, 2, 3, 4, 5, 6, 7, 8, 9])\n    run_length([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n    run_length([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14])\n    run_length([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21])\n    run_length([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29])\n    run_length([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30])\n    run_length([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31])\n    run_length([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31])\n    run_length([1, 2, 3, 4, 5,"
    },
    {
      "rank": 4,
      "score": 10.0,
      "candidate": "def run_length(list):\n    return''.join([' '.join(list[i:i+3]) for i in range(0, len(list), 3)])\n\nif __name__ == \"__main__\":\n    print(run_length([1,2,3,4,5,6,7,8,9]))\n    print(run_length([1,2,3,4,5,6,7,8,9,10,11,12]))\n    print(run_length([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,165,168,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169"
    },
    {
      "rank": 5,
      "score": 10.0,
      "candidate": "def run_length_encode(s):\n    return ''.join([str(len(s) - i - 1) +'' for i in range(len(s))])\n\nif __name__ == \"__main__\":\n    print(run_length_encode([1, 2, 3, 4, 5, 6, 7, 8, 9]))\n    print(run_length_encode([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 151, 152, 153, 154, 155, 156, 157, 158, 159, 161, 162, 163, 164, 165, 166, 167, 168, 169, 171, 172, 173, 176, 177, 181, 182, 183, 184, 185, 186, 187, 188, 189, 191, 192,"
    },
    {
      "rank": 6,
      "score": 10.0,
      "candidate": "def run_length_encoding(list):\n    \"\"\"\n    :type list: list\n    :rtype: list\n    \"\"\"\n    if len(list) == 0:\n        return []\n    res = []\n    for i in range(len(list)):\n        if len(res) > 0:\n            res.append(\"\")\n        res.append(list[i])\n    return res\n\n\nif __name__ == \"__main__\":\n    print(run_length_encoding([]))\n    print(run_length_encoding([1, 2, 3, 4, 5, 6, 7]))\n    print(run_length_encoding([1, 2, 3, 4, 5, 6, 7]))\n    print(run_length_encoding([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\n    print(run_length_encoding([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]))\n    print(run_length_encoding([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100]))\n    print(run_length_encoding([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23"
    },
    {
      "rank": 7,
      "score": 10.0,
      "candidate": "def run_length(seq):\n    n = len(seq)\n    res = []\n    for i in range(n):\n        if i > 0:\n            res.append(seq[i-1])\n        res.append(seq[i])\n    return res\n\n\nif __name__ == '__main__':\n    print(run_length([1, 2, 3, 4, 5, 6]))\n    print(run_length([1, 2, 3, 4, 5, 6, 7, 8, 9]))\n    print(run_length([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]))\n    print(run_length([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 122, 123, 124, 125, 126, 127, 128, 131, 132, 133, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 155, 157, 158, 159"
    },
    {
      "rank": 8,
      "score": 10.0,
      "candidate": "def run_length_encoding(lst):\n    lst = list(set(lst))\n    return [str(len(lst))] + lst\n\nprint(run_length_encoding([1, 2, 3, 4, 5, 6, 7, 8, 9]))\nprint(run_length_encoding([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\nprint(run_length_encoding([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 20, 30, 40, 50]))\nprint(run_length_encoding([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100]))"
    },
    {
      "rank": 9,
      "score": 10.0,
      "candidate": "def run_length_encoding(input_list):\n    if len(input_list) == 0:\n        return []\n\n    output_list = []\n    last_char = input_list[0]\n    output_list.append(last_char)\n\n    for i in range(1, len(input_list)):\n        if input_list[i]!= last_char:\n            output_list.append(last_char)\n        last_char = input_list[i]\n        output_list.append(input_list[i])\n\n    return output_list\n\n\ndef main():\n    print(run_length_encoding([1, 2, 3, 4, 5, 6]))\n    print(run_length_encoding([1, 2, 3, 4, 5]))\n    print(run_length_encoding([1, 2, 3, 4, 5, 6, 7, 8, 9]))\n    print(run_length_encoding([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 10,
      "score": 10.0,
      "candidate": "def run_length_encoding(list):\n    # Write your code here\n    run_length_list = []\n    for item in list:\n        if len(run_length_list) == 0:\n            run_length_list.append(item)\n        else:\n            run_length_list.append(str(len(run_length_list)))\n            run_length_list.append(item)\n    return run_length_list\n\nprint(run_length_encoding([1, 2, 3, 4, 5, 6, 7, 8, 9]))"
    },
    {
      "rank": 11,
      "score": 10.0,
      "candidate": "def run_length_encoding(arr):\n    return''.join(map(str, arr))\n\n\nif __name__ == '__main__':\n    print(run_length_encoding([1, 2, 3, 4, 5, 6]))"
    },
    {
      "rank": 12,
      "score": 10.0,
      "candidate": "def run_len_encoding(s):\n    return''.join(str(len(s)) for s in s)\n\n\nif __name__ == '__main__':\n    print(run_len_encoding([1, 2, 3, 4, 5]))"
    },
    {
      "rank": 13,
      "score": 10.0,
      "candidate": "def run_length_encode(l):\n    r = []\n    for i in l:\n        if len(r) == 0:\n            r.append(i)\n        else:\n            r.append(str(len(r)))\n            r.append(i)\n    return r\n\nprint(run_length_encode([0, 1, 2, 3, 4, 5]))\nprint(run_length_encode([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 144, 151, 152, 153, 155, 156, 157, 158, 159, 160, 161, 162, 163, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 188, 191, 192, 193,"
    },
    {
      "rank": 14,
      "score": 10.0,
      "candidate": "def run_len(lst):\n    return''.join(str(len(x)) for x in lst)\n\n\nprint(run_len([1, 2, 3, 4, 5, 6, 7]))\nprint(run_len([1, 2, 3, 4, 5, 6, 7, 8, 9]))\nprint(run_len([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))"
    },
    {
      "rank": 15,
      "score": 10.0,
      "candidate": "def run_length_encode(a):\n    if len(a) == 0:\n        return []\n    elif len(a) == 1:\n        return [a[0]]\n    else:\n        result = [a[0]]\n        for i in range(1, len(a)):\n            result.append(a[i] +'')\n        return result\n\n\nprint(run_length_encode([1, 2, 3, 4, 5, 6, 7, 8]))"
    },
    {
      "rank": 16,
      "score": 10.0,
      "candidate": "def run_length_encoding(lst):\n    return''.join(str(len(x)) for x in lst)\n\nprint(run_length_encoding([1, 2, 3, 4, 5]))\nprint(run_length_encoding([1, 2, 3, 4, 5, 6]))\nprint(run_length_encoding([1, 2, 3, 4, 5, 6, 7, 8, 9]))\nprint(run_length_encoding([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]))"
    },
    {
      "rank": 17,
      "score": 10.0,
      "candidate": "def run_length_encoding(l: list) -> list:\n    r = []\n    for i in l:\n        if len(r) > 0:\n            r.append(i)\n        else:\n            r.append(i)\n    return r"
    },
    {
      "rank": 18,
      "score": 10.0,
      "candidate": "def run_length_encoding(lst):\n    if len(lst) == 0:\n        return []\n    else:\n        return [lst[0]] + run_length_encoding(lst[1:])\n\nif __name__ == \"__main__\":\n    print(run_length_encoding([1,2,3,4,5]))\n    print(run_length_encoding([1,2,3,4]))\n    print(run_length_encoding([]))\n    print(run_length_encoding([1,2,3,4,5,6,7,8,9,10,11,12,13]))\n    print(run_length_encoding([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,157,158,159,160,161,162,163,164,165,166,157,158"
    },
    {
      "rank": 19,
      "score": 10.0,
      "candidate": "def run_len_encode(arr):\n    return [len(str(x)) for x in arr]\n\nprint(run_len_encode([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))"
    },
    {
      "rank": 20,
      "score": 9.370583536698913,
      "candidate": "def run_length_encoding(list_):\n    list_len = len(list_)\n    res = []\n    for i in range(list_len):\n        res.append(list_[i])\n    return res"
    },
    {
      "rank": 21,
      "score": 9.234050852198141,
      "candidate": "def run_length_encoding(data):\n    result = []\n    for i in range(len(data)):\n        while data[i]!= 0:\n            result.append(data[i])\n            data[i] = data[i-1]\n        result.append(data[i])\n    return result"
    },
    {
      "rank": 22,
      "score": 9.21346272767743,
      "candidate": "def run_length_encoding(lst):\n    rle = []\n    for i in range(len(lst)):\n        if i > 0:\n            rle.append(lst[i] +'')\n        rle.append(str(lst[i]))\n    return rle\n\n\ndef run_length_encoding_2(lst):\n    rle = []\n    for i in range(len(lst)):\n        if i > 0:\n            rle.append(lst[i] +'')\n        rle.append(str(lst[i]))\n    return rle"
    },
    {
      "rank": 23,
      "score": 9.205959372648458,
      "candidate": "def run_length(str_list):\n    result = []\n    for i in range(0, len(str_list), 2):\n        if len(str_list[i]) == 1:\n            result.append(str_list[i])\n        else:\n            result.append(str_list[i][0])\n            result.append(str_list[i][1])\n    return result\n\n\nif __name__ == '__main__':\n    print(run_length([\"hello\", \"world\", \"hello\", \"world\"]))"
    },
    {
      "rank": 24,
      "score": 9.122564458729856,
      "candidate": "def encode(l):\n    \"\"\"\n    :type l: List[str]\n    :rtype: List[int]\n    \"\"\"\n    return [len(c) for c in l]\n\nprint(encode([\"a\",\"b\",\"c\",\"d\"]))"
    },
    {
      "rank": 25,
      "score": 8.973005557553902,
      "candidate": "def run_length_encoding(string):\n    result = []\n    for char in string:\n        if char not in result:\n            result.append(char)\n        else:\n            result[-1] += char\n    return result"
    },
    {
      "rank": 26,
      "score": 8.95994420569242,
      "candidate": "def run_length_encode(input_list):\n    return''.join(map(str, input_list))\n\nprint(run_length_encode([1, 2, 3, 4, 5, 6, 7, 8, 9]))\nprint(run_length_encode([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\nprint(run_length_encode([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))"
    },
    {
      "rank": 27,
      "score": 8.932217008005624,
      "candidate": "def run_length_encoding(list_of_numbers):\n    \"\"\"\n    :type list_of_numbers: List[int]\n    :rtype: List[str]\n    \"\"\"\n    if not list_of_numbers:\n        return []\n    elif len(list_of_numbers) == 1:\n        return [\"1\"]\n    else:\n        return [\"%s\" % list_of_numbers[0]] + run_length_encoding(list_of_numbers[1:])\n\nprint(run_length_encoding([1,2,3,4,5,6]))\nprint(run_length_encoding([1,2,3,4,5,6,7,8,9]))\nprint(run_length_encoding([1,2,3,4,5,6,7,8,9,10,11,12,13]))\nprint(run_length_encoding([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]))\nprint(run_length_encoding([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,88,89,90,91,92,93,94,95,96,97,98,99]))"
    },
    {
      "rank": 28,
      "score": 8.85571690049604,
      "candidate": "def run_length_encoding(lst):\n    return''.join(str(len(item)) for item in lst)"
    },
    {
      "rank": 29,
      "score": 8.855395696632057,
      "candidate": "def run_length_encoding(l):\n    n = len(l)\n    res = [0] * (n + 1)\n    res[0] = 0\n\n    for i in range(1, n + 1):\n        res[i] = res[i - 1] + 1\n\n    for i in range(1, n + 1):\n        for j in range(0, res[i]):\n            l[i - 1] = l[i - 1] * 10 + j\n\n    return l\n\n\nprint(run_length_encoding([1, 2, 3, 4, 5]))"
    },
    {
      "rank": 30,
      "score": 8.81367773444215,
      "candidate": "def run_length_encoding(s):\n    return''.join(s[i:i+len(s)//2] for i in range(0, len(s), len(s)//2))\n\nprint(run_length_encoding([1, 2, 3, 4, 5, 6, 7, 8]))\nprint(run_length_encoding([1, 2, 3, 4, 5, 6, 7, 8, 9]))"
    },
    {
      "rank": 31,
      "score": 8.76828871349479,
      "candidate": "def run_length_encode(l):\n    \"\"\"\n    :type l: List[int]\n    :rtype: List[str]\n    \"\"\"\n    return [\" \".join(map(str, l[i:i + 2])) for i in range(0, len(l), 2)]\n\n\nif __name__ == \"__main__\":\n    print(run_length_encode([1, 2, 3, 4, 5, 6, 7, 8, 9]))"
    },
    {
      "rank": 32,
      "score": 8.750282588864879,
      "candidate": "def run_length_encoding(input_list):\n    result = []\n    for element in input_list:\n        if result and result[-1][-1] == element:\n            result[-1][-1] += 1\n        else:\n            result.append([element, 1])\n\n    return result\n\n\nif __name__ == \"__main__\":\n    print(run_length_encoding([1, 2, 3, 4, 5, 6, 7]))"
    },
    {
      "rank": 33,
      "score": 8.715724466237427,
      "candidate": "def run_length_encoding(list):\n    if len(list) == 1:\n        return list\n    else:\n        return [list[0]] + run_length_encoding(list[1:])\n\n\nif __name__ == \"__main__\":\n    print(run_length_encoding([1, 2, 3, 4, 5]))"
    },
    {
      "rank": 34,
      "score": 8.692801520950061,
      "candidate": "def run_length_encoding(nums):\n    if not nums:\n        return []\n    result = []\n    for i in range(len(nums) - 1):\n        if nums[i] == nums[i + 1]:\n            result.append(nums[i])\n        else:\n            result.append(nums[i] + \" \" + nums[i + 1])\n    return result\n\nif __name__ == \"__main__\":\n    assert run_length_encoding([]) == []\n    assert run_length_encoding([1]) == [\"1\"]\n    assert run_length_encoding([1, 2, 3]) == [\"1\", \"2\", \"3\"]\n    assert run_length_encoding([1, 2, 3, 4, 5]) == [\"1\", \"2\", \"3\", \"4\", \"5\"]\n    assert run_length_encoding([1, 2, 3, 4, 5, 6]) == [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\"]"
    },
    {
      "rank": 35,
      "score": 8.632293453617281,
      "candidate": "import re\n\n\ndef run_length_encoding(str):\n    return re.sub(r'[^a-zA-Z0-9]+', '', str).lower()\n\n\nif __name__ == '__main__':\n    assert run_length_encoding('aabbccddeeeff') == 'aabbccddeeeff'\n    assert run_length_encoding('aabbccddeeeff2') == 'aabbccddeeeff'"
    },
    {
      "rank": 36,
      "score": 8.625262456968262,
      "candidate": "def run_length_encoding(list_of_ints):\n    \"\"\"\n    :type list_of_ints: list[int]\n    :rtype: list[int]\n    \"\"\"\n    run_length = []\n    for x in list_of_ints:\n        run_length.append(x)\n        if len(run_length) == 1:\n            run_length = []\n\n    return run_length\n\n\nif __name__ == \"__main__\":\n    print(run_length_encoding([1, 2, 3, 4, 5, 6, 7, 8, 9]))"
    },
    {
      "rank": 37,
      "score": 8.625142247198651,
      "candidate": "def run_length(arr):\n    if len(arr) == 0:\n        return \"0\"\n    if len(arr) == 1:\n        return str(arr[0])\n    else:\n        return str(arr[0]) + \" \" + run_length(arr[1:])\n\nprint(run_length([1,2,3,4,5,6,7,8,9,10]))"
    },
    {
      "rank": 38,
      "score": 8.616253589228675,
      "candidate": "def run_length_encode(lst):\n    if len(lst) == 0:\n        return \"\"\n    else:\n        return str(len(lst)) + \" \" + run_length_encode(lst[1:])\n\n\nif __name__ == \"__main__\":\n    assert run_length_encode([1, 2, 3, 4, 5, 6, 7]) == \"1 2 3 4 5 6 7\"\n    assert run_length_encode([]) == \"\"\n    assert run_length_encode([0]) == \"0\""
    },
    {
      "rank": 39,
      "score": 8.565425580227462,
      "candidate": "def run_length(l):\n    return''.join(str(len(x)) for x in l)\n\n\nif __name__ == '__main__':\n    assert run_length([1, 2, 3, 4, 5, 6, 7, 8]) == '1 2 3 4 5 6 7 8'"
    },
    {
      "rank": 40,
      "score": 8.548876241946822,
      "candidate": "def encode(arr):\n    arr = list(map(str, arr))\n    return \" \".join(arr)\n\nprint(encode([1, 2, 3, 4, 5]))\n\n\"\"\"\nTime Complexity: O(n)\nSpace Complexity: O(1)\n\"\"\""
    },
    {
      "rank": 41,
      "score": 8.542875062379007,
      "candidate": "def run_length_encode(sequence):\n    result = []\n    for i in range(len(sequence)):\n        if len(result) > 0 and result[-1] == sequence[i]:\n            result.append(sequence[i])\n        else:\n            result.append(sequence[i])\n    return result\n\n\nif __name__ == \"__main__\":\n    assert run_length_encode([1, 2, 3, 4, 5]) == [\"1\", \"2\", \"3\", \"4\", \"5\"]\n    assert run_length_encode([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\"]"
    },
    {
      "rank": 42,
      "score": 8.53012858503943,
      "candidate": "def run_length_encoding(lst):\n    if len(lst) == 0:\n        return []\n    res = []\n    i = 0\n    while i < len(lst):\n        if lst[i] == lst[i+1]:\n            res.append(lst[i])\n        else:\n            res.append(lst[i] + \" \" + str(lst[i+1]))\n        i += 1\n    return res\n\nprint(run_length_encoding([1, 2, 3, 4, 5, 6, 7]))"
    },
    {
      "rank": 43,
      "score": 8.490324832712195,
      "candidate": "def run_len(lst):\n    if len(lst) == 1:\n        return lst[0]\n    else:\n        return \" \".join([lst[i] + \" \" for i in range(1, len(lst))])\n\nprint(run_len([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]))"
    },
    {
      "rank": 44,
      "score": 8.48796797856353,
      "candidate": "def run_length_encode(array):\n    encoded_array = []\n    for item in array:\n        encoded_array.append(str(len(item)))\n    return encoded_array\n\n\narray = [\"one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\", \"eight\", \"nine\"]\n\nencoded_array = run_length_encode(array)\nprint(encoded_array)"
    },
    {
      "rank": 45,
      "score": 8.478208546788407,
      "candidate": "def run_length_encoding(l):\n    result = []\n    for i in l:\n        if len(result) > 0:\n            result[-1] += i\n        else:\n            result.append(i)\n    return result\n\nif __name__ == '__main__':\n    print(run_length_encoding([1, 2, 3, 4, 5]))\n    print(run_length_encoding([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\n    print(run_length_encoding([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]))"
    },
    {
      "rank": 46,
      "score": 8.437695832075478,
      "candidate": "def run_length_encoding(arr):\n    result = []\n    for i in arr:\n        if len(result) > 0:\n            result.append(i)\n        else:\n            result.append(i)\n\n    return result\n\n\ndef run_length_encoding_2(arr):\n    result = []\n    for i in arr:\n        if len(result) > 0:\n            result.append(i)\n        else:\n            result.append(i)\n\n    return result\n\n\nif __name__ == \"__main__\":\n    print(run_length_encoding([1, 2, 3, 4, 5]))\n    print(run_length_encoding_2([1, 2, 3, 4, 5]))"
    },
    {
      "rank": 47,
      "score": 8.351614956112536,
      "candidate": "def run_length_encoding(seq):\n    if len(seq) <= 1:\n        return seq\n    else:\n        return seq[:-1] + [seq[-1]] + run_length_encoding(seq[1:])\n\n\nprint(run_length_encoding([1, 2, 3, 4, 5, 6, 7, 8, 9]))"
    },
    {
      "rank": 48,
      "score": 8.334608500525688,
      "candidate": "def run_length_encoding(l):\n    \"\"\"\n    :type l: List[int]\n    :rtype: List[str]\n    \"\"\"\n    if len(l) == 1:\n        return [str(l[0])]\n    else:\n        return [str(l[i]) + \" \" + str(l[i + 1]) for i in range(len(l) - 1)] + [\".\"]"
    },
    {
      "rank": 49,
      "score": 8.331556294201176,
      "candidate": "def encode(string):\n\tif len(string) == 0:\n\t\treturn [\"\"]\n\tresult = []\n\tfor i in range(len(string) - 1):\n\t\tresult.append(string[i] + string[i+1])\n\treturn result\n\nprint(encode([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\"]))"
    },
    {
      "rank": 50,
      "score": 8.327375965969855,
      "candidate": "def run_len_encode(l):\n    \"\"\"\n    :type l: list\n    :rtype: list\n    \"\"\"\n    if len(l) == 0:\n        return []\n    elif len(l) == 1:\n        return [l[0]]\n    else:\n        return [l[0]] + run_len_encode(l[1:])\n\ndef run_len_decode(l):\n    \"\"\"\n    :type l: list\n    :rtype: list\n    \"\"\"\n    if len(l) == 0:\n        return []\n    elif len(l) == 1:\n        return [l[0]]\n    else:\n        return run_len_decode(l[1:]) + [l[0]]\n\nif __name__ == \"__main__\":\n    assert run_len_encode([1,2,3,4,5]) == [1,2,3,4,5]\n    assert run_len_encode([1,2,3,4,5]) == [1,2,3,4,5]\n    assert run_len_encode([1,2,3,4,5,6]) == [1,2,3,4,5,6]\n    assert run_len_encode([1,2,3,4,5,6,7]) == [1,2,3,4,5,6,7]\n    assert run_len_encode([1,2,3,4,5]) == [1,2,3,4,5]\n    assert run_len_encode([1,2,3,4,5,6,7,8,9]) == [1,2,3,4,5,6,7,8,9]\n    assert run_len_encode([1,2,3,4,5]) == [1,2,3,4,5]\n    assert run_len_encode([1,2,3,4,5,6,7,8,9]) == [1,2,3,4,5,6,7,8,9]\n    assert run_len_encode([1,2,3,4,5,6,7,8,9,10]) == [1,2"
    },
    {
      "rank": 51,
      "score": 8.327367757082776,
      "candidate": "def run_length_encoding(l):\n    if not l:\n        return []\n    return [len(l[i]) for i in range(len(l))]\n\nif __name__ == \"__main__\":\n    print(run_length_encoding([1, 2, 3, 4, 5]))"
    },
    {
      "rank": 52,
      "score": 8.298597569547805,
      "candidate": "def run_length_encoding(lst):\n    result = []\n    for i in range(len(lst)):\n        if i == 0:\n            result.append(lst[i])\n        else:\n            result.append(str(lst[i]) + \" \")\n    return result\n\nprint(run_length_encoding([1, 2, 3, 4, 5, 6]))"
    },
    {
      "rank": 53,
      "score": 8.294940769211511,
      "candidate": "def run_length(lst):\n    \"\"\"\n    :type lst: List[str]\n    :rtype: List[str]\n    \"\"\"\n    if not lst:\n        return []\n\n    result = []\n    last = None\n    for element in lst:\n        if not last:\n            result.append(element)\n        else:\n            result.append(element +'' + last)\n            last = element\n    result.append(last)\n    return result\n\n\nif __name__ == '__main__':\n    assert run_length([]) == []\n    assert run_length([1, 2, 3, 4, 5, 6]) == ['1', '2', '3', '4', '5', '6']\n    assert run_length([1, 2, 3, 4, 5, 6]) == ['1', '2', '3', '4', '5', '6']\n    assert run_length([1, 2, 3, 4, 5, 6, 7]) == ['1', '2', '3', '4', '5', '6', '7']\n    assert run_length([1, 2, 3, 4, 5, 6, 7, 8, 9]) == ['1', '2', '3', '4', '5', '6', '7', '8', '9']\n    assert run_length([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]) == ['1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12']"
    },
    {
      "rank": 54,
      "score": 8.2938925966498,
      "candidate": "def run_length_encoding(lst):\n    if len(lst) <= 1:\n        return lst\n    if len(lst) == 2:\n        return [lst[0]] + run_length_encoding(lst[1:])\n    return run_length_encoding(lst[1:]) + [lst[0]]\n\n\nif __name__ == '__main__':\n    print(run_length_encoding([1, 2, 3, 4, 5]))"
    },
    {
      "rank": 55,
      "score": 8.289838256518838,
      "candidate": "def encode_list(arr):\n    encoded_list = []\n    for i in range(len(arr)):\n        if len(arr[i]) == 1:\n            encoded_list.append(\"0\")\n        else:\n            encoded_list.append(str(len(arr[i])))\n    return encoded_list\n\n\nif __name__ == '__main__':\n    print(encode_list([1, 2, 3, 4, 5, 6, 7, 8, 9]))"
    },
    {
      "rank": 56,
      "score": 8.251903304236286,
      "candidate": "def run_length_encode(arr):\n    return \" \".join(str(len(arr[i])) for i in range(len(arr)))\n\n\nprint(run_length_encode([\"a\", \"b\", \"c\", \"d\"]))\nprint(run_length_encode([\"a\", \"b\", \"c\", \"d\", \"e\"]))\nprint(run_length_encode([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\"]))\nprint(run_length_encode([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\"]))\nprint(run_length_encode([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\"]))\nprint(run_length_encode([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\"]))"
    },
    {
      "rank": 57,
      "score": 8.214125058964552,
      "candidate": "def run_length_encode(list):\n    return list[:len(list)//2]"
    },
    {
      "rank": 58,
      "score": 8.212735598038213,
      "candidate": "def run_length_encoding(a):\n    n = len(a)\n    if n == 1:\n        return a\n    else:\n        return a[0] + run_length_encoding(a[1:])\n\nprint(run_length_encoding([1, 2, 3, 4, 5]))\nprint(run_length_encoding([1, 2, 3, 4, 5, 6, 7, 8]))\nprint(run_length_encoding([1, 2, 3, 4, 5, 6, 7, 8, 9]))\nprint(run_length_encoding([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))"
    },
    {
      "rank": 59,
      "score": 8.211579567659316,
      "candidate": "def run_len_enc(lst):\n    if lst == []:\n        return []\n    else:\n        return [lst[0]] + run_len_enc(lst[1:])"
    },
    {
      "rank": 60,
      "score": 8.2048573255218,
      "candidate": "import math\n\ndef encode_run_length(list):\n    # Your code here\n    max_length = 0\n    for i in range(len(list)):\n        if len(str(list[i])) > max_length:\n            max_length = len(str(list[i]))\n\n    if max_length == 0:\n        return '0'\n\n    max_length = math.ceil(max_length/2)\n    return str(max_length) +'' + str(max_length)"
    },
    {
      "rank": 61,
      "score": 8.163300679823958,
      "candidate": "def run_length_encoding(lst):\n    lst_set = set(lst)\n    return [lst_set.count(elem) for elem in lst_set]"
    },
    {
      "rank": 62,
      "score": 8.144125099485041,
      "candidate": "def run_length_encoding(lst):\n    \"\"\"\n    :type lst: List[int]\n    :rtype: List[str]\n    \"\"\"\n    run_length_list = []\n    for i in range(len(lst)):\n        if i == 0:\n            run_length_list.append(lst[i])\n        elif i == len(lst)-1:\n            run_length_list.append(lst[i])\n        else:\n            run_length_list.append(str(lst[i]) + \" \" + str(lst[i+1]))\n    return run_length_list"
    },
    {
      "rank": 63,
      "score": 8.121884567141883,
      "candidate": "def run_length_encoding(seq):\n    return''.join(map(str, seq))\n\n\nassert run_length_encoding([1, 2, 3, 4, 5]) == '1 2 3 4 5'\nassert run_length_encoding([1, 2, 3, 4, 5, 6, 7, 8, 9]) == '1 2 3 4 5 6 7 8 9'\nassert run_length_encoding([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]) == '1 2 3 4 5 6 7 8 9 10 11 12 13 14 15'"
    },
    {
      "rank": 64,
      "score": 8.024835682833125,
      "candidate": "def run_length_encoding(seq):\n    if len(seq) == 1:\n        return seq\n\n    for i in range(1, len(seq)):\n        if seq[i - 1]!= seq[i]:\n            return seq[:i] + [seq[i - 1]] + seq[i:]\n\n    return seq\n\n\nif __name__ == '__main__':\n    assert run_length_encoding([]) == []\n    assert run_length_encoding([0]) == [0]\n    assert run_length_encoding([0, 0, 0, 0, 0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\n    assert run_length_encoding([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\n    assert run_length_encoding([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]"
    },
    {
      "rank": 65,
      "score": 7.990432406683839,
      "candidate": "def run_length_encoding(arr):\n    if not arr:\n        return []\n    return [arr[0]] + [run_length_encoding(arr[1:]) + [arr[0]]]\n\n\nif __name__ == \"__main__\":\n    print(run_length_encoding([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))"
    },
    {
      "rank": 66,
      "score": 7.938028884277233,
      "candidate": "def run_length_encoding(s):\n    if len(s) == 0:\n        return \"\"\n    if len(s) == 1:\n        return s\n    return run_length_encoding(s[1:]) + s[0]\n\n\nif __name__ == \"__main__\":\n    assert run_length_encoding([]) == \"\"\n    assert run_length_encoding([\"a\", \"b\", \"c\", \"d\"]) == \"a b c d\"\n    assert run_length_encoding([\"a\", \"b\", \"c\", \"d\"]) == \"a b c d\"\n    assert run_length_encoding([\"a\", \"b\", \"c\"]) == \"a b c\"\n    assert run_length_encoding([\"a\", \"b\", \"c\", \"d\", \"e\"]) == \"a b c d e\"\n    assert run_length_encoding([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\"]) == \"a b c d e f\""
    },
    {
      "rank": 67,
      "score": 7.915588979966494,
      "candidate": "def run_length_encoding(lst):\n    \"\"\"\n    :type lst: List[int]\n    :rtype: List[str]\n    \"\"\"\n    return [str(len(str(x))) for x in lst]\n\n\nprint(run_length_encoding([1, 2, 3, 4, 5]))"
    },
    {
      "rank": 68,
      "score": 7.868947655733293,
      "candidate": "def run_length_encoding(string):\n    if len(string) == 1:\n        return string\n    if string[0] == string[-1]:\n        return run_length_encoding(string[1:-1])\n    else:\n        return string[0] + run_length_encoding(string[1:])\n\nprint(run_length_encoding([1,2,3,4,5]))"
    },
    {
      "rank": 69,
      "score": 7.84634113240411,
      "candidate": "def encode(seq):\n    res = []\n    for i in range(len(seq)):\n        if i == 0:\n            res.append(seq[i])\n            continue\n        if i == len(seq) - 1:\n            res.append(seq[i])\n            continue\n        res.append(seq[i] + seq[i + 1])\n    return res\n\n\nassert encode([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]\nassert encode([1, 2, 3, 4, 5, 6]) == [1, 2, 3, 4, 5, 6]"
    },
    {
      "rank": 70,
      "score": 7.780351419995229,
      "candidate": "def run_length_encoding(array):\n    \"\"\"\n    :type array: List[int]\n    :rtype: List[int]\n    \"\"\"\n    return [len(str(x)) for x in array]"
    },
    {
      "rank": 71,
      "score": 7.738292593776799,
      "candidate": "def run_length_encoding(lst):\n    # Write your code here\n    if len(lst) == 0:\n        return []\n    res = []\n    for i in range(len(lst) - 1):\n        if lst[i] == lst[i + 1]:\n            res.append(str(i + 1))\n        else:\n            res.append(str(i + 1) + \" -> \" + str(lst[i]))\n    return res"
    },
    {
      "rank": 72,
      "score": 7.7320703513377165,
      "candidate": "def run_length_encoding(l):\n    res = []\n    for i in range(len(l)):\n        if i == 0:\n            res.append(l[i])\n            continue\n        if l[i] == l[i-1]:\n            res.append(l[i])\n        else:\n            res.append(l[i])\n    return res\n\n\nif __name__ == \"__main__\":\n    assert run_length_encoding([1, 2, 3]) == [1, 2, 3]\n    assert run_length_encoding([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert run_length_encoding([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]"
    },
    {
      "rank": 73,
      "score": 7.5819855281879285,
      "candidate": "def run_length_encoding(l):\n    return''.join(map(lambda x: str(len(x)), l))\n\nprint(run_length_encoding([1, 2, 3, 4, 5, 6, 7]))\nprint(run_length_encoding([1, 2, 3, 4, 5, 6, 7, 8, 9]))"
    },
    {
      "rank": 74,
      "score": 7.562924366763077,
      "candidate": "def run_length_encoding(list_of_ints):\n    list_of_ints.sort()\n    return list_of_ints"
    },
    {
      "rank": 75,
      "score": 7.464609382504557,
      "candidate": "def run_length_encode(sequence):\n    for i in range(len(sequence)):\n        for j in range(len(sequence) - i - 1):\n            if sequence[j] == sequence[j + 1]:\n                sequence[j + 1] = sequence[j]\n                sequence.pop(j)\n                break\n    return sequence\n\n\nif __name__ == \"__main__\":\n    print(run_length_encode([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))"
    },
    {
      "rank": 76,
      "score": 7.134571892399572,
      "candidate": "def run_length_encoding(list_):\n    # your code here\n    return [list_[i:i+2] for i in range(0,len(list_),2)]"
    },
    {
      "rank": 77,
      "score": 3.3755144773953614,
      "candidate": "def run_length_encode(lst):\n    return''.join(map(str, lst))\n\n\ndef run_length_encode2(lst):\n    return''.join(map(str, lst))\n\n\ndef run_length_encode3(lst):\n    return''.join(map(str, lst))\n\n\ndef run_length_encode4(lst):\n    return''.join(map(str, lst))\n\n\ndef run_length_encode5(lst):\n    return''.join(map(str, lst))\n\n\ndef run_length_encode6(lst):\n    return''.join(map(str, lst))\n\n\ndef run_length_encode7(lst):\n    return''.join(map(str, lst))\n\n\ndef run_length_encode8(lst):\n    return''.join(map(str, lst))\n\n\ndef run_length_encode9(lst):\n    return''.join(map(str, lst))\n\n\ndef run_length_encode10(lst):\n    return''.join(map(str, lst))\n\n\ndef run_length_encode11(lst):\n    return''.join(map(str, lst))\n\n\ndef run_length_encode12(lst):\n    return''.join(map(str, lst))\n\n\ndef run_length_encode13(lst):\n    return''.join(map(str, lst))\n\n\ndef run_length_encode14(lst):\n    return''.join(map(str, lst))\n\n\ndef run_length_encode15(lst):\n    return''.join(map(str, lst))\n\n\ndef run_length_encode16(lst):\n    return''.join(map(str, lst))\n\n\ndef run_length_encode17(lst):\n    return''.join(map(str, lst))\n\n\ndef run_length_encode18(lst):\n    return''.join(map(str, lst))\n\n\ndef run_length_encode19(lst):\n    return''.join(map(str, lst))\n\n\ndef run_length_encode20(lst):\n    return''.join"
    },
    {
      "rank": 78,
      "score": 3.3517557045411728,
      "candidate": "def run_length(l):\n    return [len(x) for x in l]\n\nprint(run_length([\"a\", \"b\", \"c\", \"d\"]))"
    },
    {
      "rank": 79,
      "score": 3.2408478954940856,
      "candidate": "def run_length_encode(input_list):\n    \"\"\"\n    :type input_list: List[int]\n    :rtype: List[str]\n    \"\"\"\n    if not input_list:\n        return []\n\n    input_list.sort()\n\n    output_list = [\"\"]\n    for i in range(len(input_list) - 1):\n        output_list.append(input_list[i])\n\n    return output_list\n\n\ndef run_length_decode(input_list):\n    \"\"\"\n    :type input_list: List[str]\n    :rtype: List[int]\n    \"\"\"\n    if not input_list:\n        return []\n\n    output_list = []\n    for i in range(len(input_list) - 1):\n        output_list.append(input_list[i] * 2)\n\n    return output_list"
    },
    {
      "rank": 80,
      "score": 3.223507228587888,
      "candidate": "def run_length_encoding(list_):\n    # Your code here\n    if list_ is None:\n        return None\n    length = len(list_)\n    if length == 1:\n        return list_[0]\n    else:\n        return \"{}{}\".format(list_[0], run_length_encoding(list_[1:]))\n\n\nprint(run_length_encoding([1, 2, 3]))\nprint(run_length_encoding([1, 2, 3, 4, 5]))\nprint(run_length_encoding([1, 2, 3, 4, 5, 6]))"
    },
    {
      "rank": 81,
      "score": 3.1950061973746076,
      "candidate": "def encode(input_list):\n    input_list_length = len(input_list)\n    if input_list_length <= 1:\n        return input_list\n\n    encoded_list = []\n\n    for index, value in enumerate(input_list):\n        if index < input_list_length - 1:\n            encoded_list.append(value)\n        else:\n            encoded_list.append(value + input_list[index])\n\n    return encoded_list\n\n\nprint(encode([1, 2, 3, 4, 5, 6, 7, 8]))"
    },
    {
      "rank": 82,
      "score": 3.184184334996698,
      "candidate": "def run_length_encoding(lst):\n    # Your code here\n    return [len(s) for s in lst]\n\n\nprint(run_length_encoding([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))"
    },
    {
      "rank": 83,
      "score": 3.0795032235368556,
      "candidate": "def run_length_encoding(arr):\n    if len(arr) == 0:\n        return []\n    elif len(arr) == 1:\n        return [arr[0]]\n    else:\n        return [arr[0]] + [arr[1]] + run_length_encoding(arr[2:])\n\n\nif __name__ == '__main__':\n    assert run_length_encoding([1, 2, 3, 4, 5, 6]) == [1, 2, 3, 4, 5, 6]"
    },
    {
      "rank": 84,
      "score": 3.077780152654751,
      "candidate": "def run_length_encoding(l):\n    if len(l) <= 1:\n        return l\n\n    result = []\n    prev = l[0]\n    for i in range(1, len(l)):\n        if l[i]!= prev:\n            result.append(prev)\n            prev = l[i]\n        else:\n            prev = l[i]\n    result.append(prev)\n    return result\n\n\ndef run_length_encoding_with_list(l):\n    if len(l) <= 1:\n        return l\n\n    result = []\n    prev = l[0]\n    for i in range(1, len(l)):\n        if l[i]!= prev:\n            result.append(prev)\n            prev = l[i]\n        else:\n            result.append(l[i])\n    result.append(prev)\n    return result\n\n\ndef run_length_encoding_with_dict(l):\n    if len(l) <= 1:\n        return l\n\n    result = {}\n    prev = l[0]\n    for i in range(1, len(l)):\n        if l[i] not in result:\n            result[l[i]] = 1\n        else:\n            result[l[i]] += 1\n        if l[i] == prev:\n            result[l[i]] = 1\n        else:\n            result[l[i]] = 0\n        prev = l[i]\n    return result\n\n\ndef run_length_encoding_with_set(l):\n    if len(l) <= 1:\n        return l\n\n    result = set()\n    prev = l[0]\n    for i in range(1, len(l)):\n        if l[i] not in result:\n            result.add(l[i])\n        else:\n            result.add(l[i])\n        if l[i] == prev:\n            result.add(l[i])\n        else:\n            result.add(l[i])\n        prev = l[i]\n    return list(result)\n\n\ndef run_length_encoding_with_hashmap(l"
    },
    {
      "rank": 85,
      "score": 3.075419359822866,
      "candidate": "def run_length_encoding(l):\n    return''.join(l[i:i+2] for i in range(0, len(l), 2))\n\n\nassert run_length_encoding([1, 2, 3, 4, 5]) == '1 2 3 4 5'\nassert run_length_encoding([1, 2, 3, 4, 5, 6]) == '1 2 3 4 5 6'\nassert run_length_encoding([1, 2, 3, 4, 5, 6, 7]) == '1 2 3 4 5 6 7'\nassert run_length_encoding([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == '1 2 3 4 5 6 7 8 9 10'\nassert run_length_encoding([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == '1 2 3 4 5 6 7 8 9 10 11'"
    },
    {
      "rank": 86,
      "score": 3.026621421530368,
      "candidate": "def run_length_encoding(l):\n    # Your code here\n    return [len(str(e)) for e in l]\n\nprint(run_length_encoding([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]))"
    },
    {
      "rank": 87,
      "score": 2.9914017506136115,
      "candidate": "def run_length_encoding(seq):\n    if len(seq) == 1:\n        return seq[0]\n\n    i = 0\n    for j in range(1, len(seq)):\n        if seq[i] == seq[j]:\n            i += 1\n        else:\n            yield seq[i]\n            i = j\n            yield seq[j]\n\n\nif __name__ == \"__main__\":\n    assert run_length_encoding([1, 2, 3, 4, 5, 6]) == [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\"]\n    assert run_length_encoding([1, 2, 3, 4, 5, 6]) == [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\"]\n    assert run_length_encoding([1, 2, 3, 4, 5, 6, 7, 8, 9]) == [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\"]\n    assert run_length_encoding([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\"]"
    },
    {
      "rank": 88,
      "score": 2.98271757082072,
      "candidate": "def run_length(arr):\n    # Your code here\n    return len(arr)"
    },
    {
      "rank": 89,
      "score": 2.9722444122268223,
      "candidate": "def run_length_encoding(l):\n    return \" \".join(str(len(str(i))) for i in l)\n\n\nprint(run_length_encoding([1, 2, 3, 4, 5]))\nprint(run_length_encoding([1, 2, 3, 4, 5, 6, 7, 8, 9]))\nprint(run_length_encoding([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\nprint(run_length_encoding([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))"
    },
    {
      "rank": 90,
      "score": 2.9668165677189156,
      "candidate": "def run_length_encoding(arr):\n    arr_length = len(arr)\n    if arr_length == 0:\n        return \"0\"\n\n    res = \"\"\n    for i in range(arr_length):\n        res += arr[i]\n\n    return res\n\n\nif __name__ == \"__main__\":\n    assert run_length_encoding([]) == \"0\"\n    assert run_length_encoding([1, 2, 3, 4, 5]) == \"1,2,3,4,5\"\n    assert run_length_encoding([1, 2, 3, 4, 5, 6, 7]) == \"1,2,3,4,5,6,7\""
    },
    {
      "rank": 91,
      "score": 2.8873261473756116,
      "candidate": "def run_length_encoding(str_list):\n    \"\"\"\n    :type str_list: List[str]\n    :rtype: List[str]\n    \"\"\"\n    if len(str_list) == 0:\n        return []\n\n    str_list.sort(key=lambda x: len(x))\n    output_list = []\n\n    for i in range(len(str_list)):\n        if i == 0 or str_list[i]!= str_list[i - 1]:\n            output_list.append(str_list[i])\n        else:\n            output_list.append(str_list[i - 1])\n\n    return output_list\n\n\nif __name__ == \"__main__\":\n    assert run_length_encoding([]) == []\n    assert run_length_encoding([\"a\", \"b\", \"c\"]) == [\"a\", \"b\", \"c\"]\n    assert run_length_encoding([\"a\", \"b\", \"c\", \"d\"]) == [\"a\", \"b\", \"c\", \"d\"]"
    },
    {
      "rank": 92,
      "score": 2.869348146113956,
      "candidate": "def run_length_encoding(arr):\n    return''.join([str(len(arr[i:i+1])) for i in range(0,len(arr),1)])\n\nprint(run_length_encoding([0,1,2,3,4,5]))\nprint(run_length_encoding([1,2,3,4,5]))\nprint(run_length_encoding([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,168,168,168,168,168,168,168,168,168,168,168,168,168,168,168,168,168,168,168,168,168,168,168,168,168,168,168,168,168,168,168,168,168,168,168,168,168,168,168,"
    },
    {
      "rank": 93,
      "score": 2.8555904130649448,
      "candidate": "def run_length_encoding(list):\n    \"\"\"\n    :type list: List[str]\n    :rtype: str\n    \"\"\"\n    # your code here\n    return''.join(list)"
    },
    {
      "rank": 94,
      "score": 2.83753871992657,
      "candidate": "def run_length_encoding(lst):\n    if len(lst) == 0:\n        return ''\n    if len(lst) == 1:\n        return lst[0]\n    return lst[0] +'' + run_length_encoding(lst[1:])\n\nprint(run_length_encoding([1,2,3,4,5]))\nprint(run_length_encoding([1,2,3,4,5,6,7,8,9]))\nprint(run_length_encoding([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19]))"
    },
    {
      "rank": 95,
      "score": 2.82723738998527,
      "candidate": "def run_length_encoding(lst):\n    return \"\".join(f\"{len(lst[i])} \" for i in range(len(lst)))\n\n\ndef run_length_encoding_2(lst):\n    return \" \".join(f\"{len(lst[i])} \" for i in range(len(lst)))\n\n\ndef test_run_length_encoding():\n    assert run_length_encoding([\"a\", \"b\", \"c\", \"d\", \"e\"]) == \"4\"\n    assert run_length_encoding([\"a\", \"b\", \"c\", \"d\", \"e\"]) == \"4 a b c d e\"\n\n\ndef test_run_length_encoding_2():\n    assert run_length_encoding_2([\"a\", \"b\", \"c\", \"d\", \"e\"]) == \"4\"\n    assert run_length_encoding_2([\"a\", \"b\", \"c\", \"d\", \"e\"]) == \"4 a b c d e\""
    },
    {
      "rank": 96,
      "score": 2.734479606238553,
      "candidate": "def run_length_encoding(lst):\n    # Your code here\n    pass\n\n\nif __name__ == \"__main__\":\n    run_length_encoding([1, 2, 3])\n    run_length_encoding([1, 2, 3, 4])\n    run_length_encoding([1, 2, 3, 4, 5])\n    run_length_encoding([1, 2, 3, 4, 5, 6])\n    run_length_encoding([1, 2, 3, 4, 5, 6, 7])\n    run_length_encoding([1, 2, 3, 4, 5, 6, 7, 8])\n    run_length_encoding([1, 2, 3, 4, 5, 6, 7, 8, 9])"
    },
    {
      "rank": 97,
      "score": 2.7069975240069546,
      "candidate": "def run_length_encoding(list):\n    # Write your code here\n    if len(list) == 0:\n        return None\n    elif len(list) == 1:\n        return list[0]\n    else:\n        return list[0] +'' + run_length_encoding(list[1:])\n\n\nprint(run_length_encoding([1, 2, 3, 4, 5, 6, 7, 8, 9]))"
    },
    {
      "rank": 98,
      "score": 2.6451547223118173,
      "candidate": "def run_length_encoding(input_list):\n    # Write your code here\n    return input_list\n\nprint(run_length_encoding([1,2,3,4,5,6,7,8,9]))\nprint(run_length_encoding([1,2,3,4,5,6,7,8,9,10]))\nprint(run_length_encoding([1,2,3,4,5,6,7,8,9,10,11,12]))\nprint(run_length_encoding([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29]))\nprint(run_length_encoding([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29]))"
    },
    {
      "rank": 99,
      "score": 2.5408127412821284,
      "candidate": "def run_length_encoding(l):\n    # Write your code here\n    if len(l) == 1:\n        return l[0]\n    else:\n        return l[0] + run_length_encoding(l[1:])"
    },
    {
      "rank": 100,
      "score": 2.522983460495786,
      "candidate": "def run_length_encoding(lst):\n    # Write your code here\n    lst_length = len(lst)\n    if lst_length <= 1:\n        return lst\n    else:\n        return [lst[i] for i in range(lst_length)]\n\n\ndef run_length_encoding_2(lst):\n    # Write your code here\n    lst_length = len(lst)\n    if lst_length <= 1:\n        return lst\n    else:\n        return [lst[i] + lst[i + 1] for i in range(lst_length - 1)]\n\n\ndef run_length_encoding_3(lst):\n    # Write your code here\n    lst_length = len(lst)\n    if lst_length <= 1:\n        return lst\n    else:\n        return [lst[i] + lst[i + 1] + lst[i + 2] for i in range(lst_length - 2)]\n\n\ndef run_length_encoding_4(lst):\n    # Write your code here\n    lst_length = len(lst)\n    if lst_length <= 1:\n        return lst\n    else:\n        return [lst[i] + lst[i + 1] + lst[i + 2] + lst[i + 3] for i in range(lst_length - 3)]\n\n\ndef run_length_encoding_5(lst):\n    # Write your code here\n    lst_length = len(lst)\n    if lst_length <= 1:\n        return lst\n    else:\n        return [lst[i] + lst[i + 1] + lst[i + 2] + lst[i + 3] + lst[i + 4] for i in range(lst_length - 4)]\n\n\ndef run_length_encoding_6(lst):\n    # Write your code here\n    lst_length = len(lst)\n    if lst_length <= 1:\n        return lst\n    else:\n        return [lst[i] + lst[i + 1] + lst[i + 2] + lst[i + 3] + lst[i + 4] + lst[i + 5] for i in range(lst_length - 6)]\n\n\nif __name__ == \"__"
    }
  ]
}