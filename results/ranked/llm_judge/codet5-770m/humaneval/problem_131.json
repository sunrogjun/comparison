{
  "timestamp": "2025-09-14T12:13:43.375849",
  "method": "improved_llm_judge",
  "judge_model": "codellama/CodeLlama-7b-Python-hf",
  "target_model": "codet5-770m",
  "dataset": "humaneval",
  "problem_number": 131,
  "total_candidates": 100,
  "results": [
    {
      "rank": 1,
      "score": 10.0,
      "candidate": "if n == 0:\n        return 0\n    if n % 2 == 0:\n        return n\n    return n * digits(n // 2)\n\n\ndef test_digits():\n    assert digits(1) == 1\n    assert digits(4) == 0\n    assert digits(235) == 15\n\n\nif __name__ == \"__main__\":\n    test_digits()"
    },
    {
      "rank": 2,
      "score": 10.0,
      "candidate": "if n == 0:\n        return 0\n    else:\n        return n % 2\n\ndef test_digits():\n    assert digits(1) == 1\n    assert digits(4) == 0\n    assert digits(235) == 15\n\nif __name__ == \"__main__\":\n    test_digits()"
    },
    {
      "rank": 3,
      "score": 10.0,
      "candidate": "s = str(n)\n    if len(s) % 2 == 0:\n        return int(s[::-1])\n    else:\n        return 0\n\n\ndef test_digits():\n    assert digits(1) == 1\n    assert digits(4) == 0\n    assert digits(235) == 15\n\n\nif __name__ == '__main__':\n    test_digits()"
    },
    {
      "rank": 4,
      "score": 10.0,
      "candidate": "return int(''.join(str(n)[::2]))\n\ndef digits_iterative(n):\n    \"\"\"Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example\n    digits_iterative(1)  == 1\n    digits_iterative(4)  == 0\n    digits_iterative(235) == 15\n    \"\"\"\n    if n == 0:\n        return 0\n    result = 1\n    for i in range(2, n + 1):\n        result *= i\n    return result\n\ndef digits_recursive(n):\n    \"\"\"Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example\n    digits_recursive(1)  == 1\n    digits_recursive(4)  == 0\n    digits_recursive(235) == 15\n    \"\"\"\n    if n == 0:\n        return 0\n    if n < 10:\n        return n\n    return digits_recursive(n // 10) * n % 10\n\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()\n\n    print(\"digits(1)  = \", digits(1))\n    print(\"digits(4)  = \", digits(4))\n    print(\"digits(235) = \", digits(235))\n    print(\"digits_iterative(1)  = \", digits_iterative(1))\n    print(\"digits_iterative(4)  = \", digits_iterative(4))\n    print(\"digits_iterative(235) = \", digits_iterative(235))\n    print(\"digits_recursive(1)  = \", digits_recursive(1))\n    print(\"digits_recursive(4)  = \", digits_recursive(4))\n    print(\"digits_recursive(235) = \", digits_recursive(235))"
    },
    {
      "rank": 5,
      "score": 10.0,
      "candidate": "if n == 0:\n        return 0\n    return n % 2\n\n\ndef main():\n    print(digits(1))\n    print(digits(4))\n    print(digits(235))\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 6,
      "score": 10.0,
      "candidate": "product = 1\n    for i in str(n):\n        if i % 2 == 1:\n            product *= int(i)\n    return product\n\n\nif __name__ == \"__main__\":\n    assert digits(1) == 1\n    assert digits(4) == 0\n    assert digits(235) == 15"
    },
    {
      "rank": 7,
      "score": 10.0,
      "candidate": "if n == 0:\n        return 0\n    elif n % 2 == 0:\n        return 1\n    else:\n        return n * digits(n // 2)\n\nprint(digits(235))"
    },
    {
      "rank": 8,
      "score": 10.0,
      "candidate": "return sum(int(d) for d in str(n)) % 2 == 0\n\n\nif __name__ == \"__main__\":\n    assert digits(1) == 1\n    assert digits(4) == 0\n    assert digits(235) == 15\n    assert digits(10) == 1\n    assert digits(0) == 0\n    assert digits(-10) == 0\n    assert digits(0) == 0"
    },
    {
      "rank": 9,
      "score": 10.0,
      "candidate": "result = 1\n    while n!= 0:\n        result *= n % 10\n        n /= 10\n    return result"
    },
    {
      "rank": 10,
      "score": 10.0,
      "candidate": "n = str(n)\n    if len(n) % 2 == 0:\n        return int(n[:len(n)//2])\n    else:\n        return int(n[len(n)//2:])\n\n\ndef main():\n    print(digits(1))\n    print(digits(4))\n    print(digits(235))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 11,
      "score": 10.0,
      "candidate": "n = int(n)\n    if n % 2 == 0:\n        return 0\n    else:\n        return n\n\n\ndef main():\n    print(digits(235))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 12,
      "score": 10.0,
      "candidate": "if n % 2 == 0:\n        return n // 2\n    else:\n        return n // 2 - 1\n\n\ndef digits_list(n):\n    \"\"\"Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example\n    digits_list(1)  == 1\n    digits_list(4)  == 0\n    digits_list(235) == 15\n    \"\"\"\n    if n % 2 == 0:\n        return n // 2\n    else:\n        return n // 2 - 1\n\n\ndef main():\n    n = int(input(\"Enter a positive integer: \"))\n    print(f\"{n} is even: {digits(n)}\")\n    print(f\"{n} is odd: {digits_list(n)}\")\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 13,
      "score": 10.0,
      "candidate": "n = str(n)\n    if not n:\n        return 0\n    return int(n[0]) * int(n[1:])\n\n\nif __name__ == '__main__':\n    print(digits(235))"
    },
    {
      "rank": 14,
      "score": 10.0,
      "candidate": "if n < 10:\n        return n\n    return n % 10 + digits(n // 10)\n\n\ndef sum_digits(n):\n    \"\"\"Given a positive integer n, return the sum of the odd digits.\n    Return 0 if all digits are even.\n    For example\n    sum_digits(1)  == 1\n    sum_digits(4)  == 0\n    sum_digits(235) == 15\n    \"\"\"\n    if n < 10:\n        return n\n    return sum([digits(x) for x in str(n)])"
    },
    {
      "rank": 15,
      "score": 10.0,
      "candidate": "if n <= 0:\n        return 0\n    return n % 10\n\n\ndef is_prime(n):\n    \"\"\"Return True if n is prime, False otherwise.\"\"\"\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    for i in range(3, int(n**0.5)+1, 2):\n        if n % i == 0:\n            return False\n    return True\n\n\ndef is_prime_iterative(n):\n    \"\"\"Return True if n is prime, False otherwise.\"\"\"\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    for i in range(3, int(n**0.5)+1, 2):\n        if n % i == 0:\n            return False\n    return True"
    },
    {
      "rank": 16,
      "score": 10.0,
      "candidate": "if n == 0:\n        return 0\n    s = str(n)\n    odd_digits = list(filter(lambda x: x % 2 == 1, s))\n    return int(odd_digits[0]) * int(odd_digits[1])\n\n\nif __name__ == '__main__':\n    n = int(input())\n    print(digits(n))"
    },
    {
      "rank": 17,
      "score": 10.0,
      "candidate": "if n < 10:\n        return n\n    else:\n        return n % 10 * digits(n//10)"
    },
    {
      "rank": 18,
      "score": 10.0,
      "candidate": "product = 1\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            product *= i\n    return product\n\n\ndef main():\n    print(digits(1))\n    print(digits(4))\n    print(digits(235))\n    print(digits(5))\n    print(digits(6))\n    print(digits(10))\n    print(digits(20))\n    print(digits(500))\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 19,
      "score": 10.0,
      "candidate": "if n == 0:\n        return 0\n    return n % 10\n\n\ndef main():\n    n = int(input())\n    print(digits(n))\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 20,
      "score": 10.0,
      "candidate": "if n < 10:\n        return n\n    else:\n        return digits(n//10) * digits(n % 10)\n\nif __name__ == \"__main__\":\n    print(digits(1))\n    print(digits(4))\n    print(digits(235))"
    },
    {
      "rank": 21,
      "score": 10.0,
      "candidate": "if n % 2 == 0:\n        return n\n    else:\n        return 0\n\n\ndef main():\n    print(digits(234))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 22,
      "score": 10.0,
      "candidate": "if n <= 0:\n        return 0\n    elif n % 2 == 1:\n        return n\n    else:\n        return n * digits(n // 2)\n\n\ndef main():\n    print(digits(1))\n    print(digits(4))\n    print(digits(235))\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 23,
      "score": 9.993251387631034,
      "candidate": "if n == 0:\n        return 0\n    s = str(n)\n    if len(s) == 1:\n        return 1\n    else:\n        return int(s[0]) * int(s[1])\n\n\ndef main():\n    print(digits(235))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 24,
      "score": 9.982086980445024,
      "candidate": "if n < 0:\n        raise ValueError(\"n must be non-negative\")\n\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n\n    result = 1\n    for i in range(2, n + 1, 2):\n        result *= i\n\n    return result\n\n\nif __name__ == '__main__':\n    assert digits(0) == 0\n    assert digits(1) == 1\n    assert digits(4) == 0\n    assert digits(235) == 15\n    assert digits(1) == 1\n    assert digits(2) == 1\n    assert digits(3) == 2\n    assert digits(5) == 4\n    assert digits(6) == 8\n    assert digits(7) == 16\n    assert digits(8) == 32\n    assert digits(9) == 64\n    assert digits(10) == 128\n    assert digits(11) == 256\n    assert digits(12) == 512\n    assert digits(13) == 1024\n    assert digits(14) == 2048\n    assert digits(15) == 4096\n    assert digits(16) == 8192\n    assert digits(17) == 16384\n    assert digits(18) == 32768\n    assert digits(19) == 65536\n    assert digits(20) == 131072\n    assert digits(21) == 262144\n    assert digits(22) == 524288\n    assert digits(23) == 1048576\n    assert digits(24) == 2097152\n    assert digits(25) == 1048576\n    assert digits(26) == 2097152\n    assert digits(27) == 1048576\n    assert digits(28) == 2097152\n    assert digits(29) == 2097152\n    assert digits(30) == 2097152\n    assert digits(31) == 2097152\n    assert digits(32) == 2097152\n    assert digits(33) == 2097152\n    assert digits(34) == 2097152\n    assert digits(35) == 2097152\n    assert digits(36) == 2097152\n    assert digits(37) == 2097152\n    assert digits(38) == 2097152\n    assert digits(39) == 2097152\n    assert digits("
    },
    {
      "rank": 25,
      "score": 9.963994939209833,
      "candidate": "product = 1\n    while n > 0:\n        if n % 2 == 0:\n            product *= n // 2\n        n //= 2\n    return product\n\n\ndef main():\n    print(digits(1))\n    print(digits(4))\n    print(digits(235))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 26,
      "score": 9.94217585880588,
      "candidate": "if n < 0:\n        return 0\n    if n == 0:\n        return 1\n    else:\n        return n % 10 + digits(n // 10)\n\n\ndef digits_test():\n    assert digits(1) == 1\n    assert digits(4) == 0\n    assert digits(235) == 15\n\n\nif __name__ == '__main__':\n    digits_test()"
    },
    {
      "rank": 27,
      "score": 9.907170511668092,
      "candidate": "if n == 0:\n        return 0\n    return n % 2\n\n\ndef main():\n    print(digits(1))\n    print(digits(4))\n    print(digits(235))\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 28,
      "score": 9.890164056081243,
      "candidate": "if n <= 0:\n        return 0\n    else:\n        return (n % 10) * (n // 10)\n\n\ndef main():\n    print(digits(4))\n    print(digits(235))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 29,
      "score": 9.88293152152541,
      "candidate": "if n % 2 == 0:\n        return n\n    else:\n        return 0\n\n\ndef digits_sum(n):\n    \"\"\"Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example\n    digits_sum(1)  == 1\n    digits_sum(4)  == 0\n    digits_sum(235) == 15\n    \"\"\"\n    product = 1\n    for d in str(n):\n        product *= int(d)\n    return product\n\n\ndef digits_prod(n):\n    \"\"\"Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example\n    digits_prod(1)  == 1\n    digits_prod(4)  == 0\n    digits_prod(235) == 15\n    \"\"\"\n    product = 1\n    for d in str(n):\n        product *= int(d)\n    return product\n\n\ndef digits_prod_sum(n):\n    \"\"\"Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example\n    digits_prod_sum(1)  == 1\n    digits_prod_sum(4)  == 0\n    digits_prod_sum(235) == 15\n    \"\"\"\n    product = 1\n    for d in str(n):\n        product *= int(d)\n    return product\n\n\ndef digits_prod_sum_sum(n):\n    \"\"\"Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example\n    digits_prod_sum_sum(1)  == 1\n    digits_prod_sum_sum(4)  == 0\n    digits_prod_sum_sum(235) == 15\n    \"\"\"\n    product = 1\n    for d in str(n):\n        product *= int(d)\n        product *= int(d)\n    return product\n\n\ndef digits_prod_prod_sum(n):\n    \"\"\"Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example\n    digits_prod"
    },
    {
      "rank": 30,
      "score": 9.882923312638333,
      "candidate": "if n == 0:\n        return 0\n    result = 1\n    while n > 0:\n        result *= n % 10\n        n //= 10\n    return result\n\n\ndef test_digits():\n    assert digits(1) == 1\n    assert digits(4) == 0\n    assert digits(235) == 15\n    assert digits(0) == 0\n    assert digits(10) == 1\n    assert digits(11) == 1\n    assert digits(12) == 1\n    assert digits(13) == 1\n    assert digits(14) == 1\n    assert digits(15) == 1\n    assert digits(16) == 1\n    assert digits(17) == 1\n    assert digits(18) == 1\n    assert digits(19) == 1\n    assert digits(20) == 1\n    assert digits(21) == 1\n    assert digits(22) == 1\n    assert digits(23) == 1\n    assert digits(24) == 1\n    assert digits(25) == 1\n    assert digits(26) == 1\n    assert digits(27) == 1\n    assert digits(28) == 1\n    assert digits(29) == 1\n    assert digits(30) == 1\n    assert digits(31) == 1\n    assert digits(32) == 1\n    assert digits(33) == 1\n    assert digits(34) == 1\n    assert digits(35) == 1\n    assert digits(36) == 1\n    assert digits(37) == 1\n    assert digits(38) == 1\n    assert digits(39) == 1\n    assert digits(40) == 1\n    assert digits(41) == 1\n    assert digits(42) == 1\n    assert digits(43) == 1\n    assert digits(44) == 1\n    assert digits(45) == 1\n    assert digits(46) == 1\n    assert digits(47) == 1\n    assert digits(48) == 1\n    assert digits(49) == 1\n    assert digits(50) == 1\n    assert digits(51) == 1\n    assert digits(52) == 1\n    assert digits(53) == 1\n    assert digits(54) == 1\n    assert digits(55) == 1\n    assert digits(56) == 1\n    assert digits"
    },
    {
      "rank": 31,
      "score": 9.854153125103362,
      "candidate": "if n == 0:\n        return 0\n    return n % 10\n\n\nif __name__ == '__main__':\n    import sys\n    for arg in sys.argv[1:]:\n        print(digits(int(arg)))"
    },
    {
      "rank": 32,
      "score": 9.850496324767066,
      "candidate": "return sum(int(x) for x in str(n))\n\ndef digits_iterative(n):\n    \"\"\"Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits_iterative(1)  == 1\n    digits_iterative(4)  == 0\n    digits_iterative(235) == 15\n    \"\"\"\n    if n < 10:\n        return n\n    return n % 10 + (n // 10)\n\ndef digits_recursive(n):\n    \"\"\"Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits_recursive(1)  == 1\n    digits_recursive(4)  == 0\n    digits_recursive(235) == 15\n    \"\"\"\n    if n < 10:\n        return n\n    return n % 10 + (n // 10) * digits_recursive(n // 10)\n\ndef digits_iterative_recursive(n):\n    \"\"\"Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits_iterative_recursive(1)  == 1\n    digits_iterative_recursive(4)  == 0\n    digits_iterative_recursive(235) == 15\n    \"\"\"\n    if n < 10:\n        return n\n    return n % 10 + (n // 10) * digits_iterative_recursive(n // 10)\n\ndef digits_recursive_recursive(n):\n    \"\"\"Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits_recursive_recursive(1)  == 1\n    digits_recursive_recursive(4)  == 0\n    digits_recursive_recursive(235) == 15\n    \"\"\"\n    if n < 10:\n        return n\n    return n % 10 + (n // 10) * digits_recursive_recursive(n // 10)\n\ndef digits_iterative_recursive_2(n):\n    \"\"\"Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even."
    },
    {
      "rank": 33,
      "score": 9.849448152205355,
      "candidate": "return 0 if n < 10 else int(str(n)[::2])\n\ndef main():\n    \"\"\"Main entry point for this program.\"\"\"\n    print(digits(235))\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 34,
      "score": 9.807458859791842,
      "candidate": "return (n % 2 == 0) * (n // 2)\n\n\ndef main():\n    \"\"\"Run the digits function.\"\"\"\n    print(digits(1))\n    print(digits(4))\n    print(digits(235))\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 35,
      "score": 9.769680614520107,
      "candidate": "if n == 1:\n        return 0\n    if n == 2:\n        return 1\n    if n % 2 == 1:\n        return n // 2\n    else:\n        return n // 2 + digits(n // 2)\n\n\ndef test_digits():\n    assert digits(1) == 1\n    assert digits(4) == 0\n    assert digits(235) == 15"
    },
    {
      "rank": 36,
      "score": 9.76713512321487,
      "candidate": "if n == 0:\n        return 0\n    if n < 10:\n        return n\n    return n % 10 + digits(n // 10)\n\n\nif __name__ == '__main__':\n    print(digits(1))\n    print(digits(4))\n    print(digits(235))"
    },
    {
      "rank": 37,
      "score": 9.718856235379514,
      "candidate": "if n == 0:\n        return 0\n    else:\n        return n % 2\n\n\ndef main():\n    print(digits(1))\n    print(digits(4))\n    print(digits(235))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 38,
      "score": 9.699680655040597,
      "candidate": "return sum(int(x) for x in str(n))\n\n\ndef main():\n    import sys\n    import time\n\n    # Test cases\n    print('digits(1)  =', digits(1))\n    print('digits(4)  =', digits(4))\n    print('digits(235) =', digits(235))\n    print('digits(2147483648) =', digits(2147483648))\n    print('digits(1000000000) =', digits(1000000000))\n    print('digits(8)  =', digits(8))\n    print('digits(9)  =', digits(9))\n    print('digits(1.5) =', digits(1.5))\n    print('digits(1.1) =', digits(1.1))\n    print('digits(2)  =', digits(2))\n    print('digits(3)  =', digits(3))\n    print('digits(10) =', digits(10))\n    print('digits(100) =', digits(100))\n    print('digits(1.1e-5) =', digits(1.1e-5))\n    print('digits(0)  =', digits(0))\n    print('digits(0.5) =', digits(0.5))\n    print('digits(0.1) =', digits(0.1))\n    print('digits(0.01) =', digits(0.01))\n    print('digits(0.001) =', digits(0.001))\n    print('digits(1.0e-4) =', digits(1.0e-4))\n    print('digits(1e-5) =', digits(1e-5))\n    print('digits(1e-6) =', digits(1e-6))\n    print('digits(1e-7) =', digits(1e-7))\n    print('digits(1e-8) =', digits(1e-8))\n    print('digits(1e-9) =', digits(1e-9))\n    print('digits(1e-10) =', digits(1e-10))\n    print('digits(1e-11) =', digits(1"
    },
    {
      "rank": 39,
      "score": 9.677440122697439,
      "candidate": "if n < 0:\n        return 0\n    return n % 10"
    },
    {
      "rank": 40,
      "score": 9.640077895802646,
      "candidate": "if n < 10:\n        return n\n    else:\n        return digits(n//10) * digits(n%10)\n\n\ndef main():\n    print(digits(1))\n    print(digits(4))\n    print(digits(235))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 41,
      "score": 9.595753198553407,
      "candidate": "return int(str(n)[::2])\n\n\ndef test_digits():\n    assert digits(1) == 1\n    assert digits(4) == 0\n    assert digits(235) == 15\n\n\nif __name__ == '__main__':\n    test_digits()"
    },
    {
      "rank": 42,
      "score": 9.58039123838868,
      "candidate": "if n < 0:\n        raise ValueError\n    if n == 0:\n        return 0\n    if n % 2 == 0:\n        return 1\n    return n // 2\n\n\ndef digits_product(n):\n    \"\"\"Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example\n    digits_product(1)  == 1\n    digits_product(4)  == 0\n    digits_product(235) == 15\n    \"\"\"\n    if n < 0:\n        raise ValueError\n    if n == 0:\n        return 0\n    if n % 2 == 0:\n        return n\n    return n * digits_product(n // 2)"
    },
    {
      "rank": 43,
      "score": 9.47114453552205,
      "candidate": "return 0 if n == 0 else (n % 2 == 0) * n // 2\n\n\ndef digits_recursive(n):\n    \"\"\"Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits_recursive(1)  == 1\n    digits_recursive(4)  == 0\n    digits_recursive(235) == 15\n    \"\"\"\n    if n == 0:\n        return 0\n    if n % 2 == 0:\n        return n // 2\n    else:\n        return n * digits_recursive(n // 2)\n\n\nif __name__ == \"__main__\":\n    # Test 1\n    print(digits(1))\n    # Test 2\n    print(digits(2))\n    # Test 3\n    print(digits(3))\n    # Test 4\n    print(digits(4))\n    # Test 5\n    print(digits(5))\n    # Test 6\n    print(digits(6))\n    # Test 7\n    print(digits(7))\n    # Test 8\n    print(digits(8))\n    # Test 9\n    print(digits(9))\n    # Test 10\n    print(digits(10))\n    # Test 11\n    print(digits(11))\n    # Test 12\n    print(digits(12))\n    # Test 13\n    print(digits(13))\n    # Test 14\n    print(digits(14))\n    # Test 15\n    print(digits(15))\n    # Test 16\n    print(digits(16))\n    # Test 17\n    print(digits(17))\n    # Test 18\n    print(digits(18))\n    # Test 19\n    print(digits(19))\n    # Test 20\n    print(digits(20))\n    # Test 21\n    print(digits(21))\n    # Test 22\n    print(digits(22))\n    # Test 23\n    print(digits(23))\n    # Test 24\n    print(digits(24))\n    # Test 25\n    print(digits(25))\n    # Test 26\n    print(digits(26))\n    # Test 27\n    print(digits(27))\n    # Test 28\n    print"
    },
    {
      "rank": 44,
      "score": 9.446832512996986,
      "candidate": "if n < 10:\n        return n\n    else:\n        return n % 10 + digits(n // 10)\n\n\nif __name__ == \"__main__\":\n    print(digits(1))\n    print(digits(4))\n    print(digits(235))"
    },
    {
      "rank": 45,
      "score": 9.287625906893272,
      "candidate": "if n == 0:\n        return 0\n    else:\n        return n % 2\n\n\nif __name__ == '__main__':\n    print(digits(1))\n    print(digits(4))\n    print(digits(235))"
    },
    {
      "rank": 46,
      "score": 9.137541083743484,
      "candidate": "if n < 10:\n        return n\n    if n == 10:\n        return 1\n    if n % 2 == 0:\n        return n * digits(n // 2)\n    else:\n        return digits(n // 2) * digits(n % 2)\n\n\ndef main():\n    import sys\n    print(digits(int(sys.argv[1])))\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 47,
      "score": 9.118479922318633,
      "candidate": "if n < 10:\n        return n\n    else:\n        return n % 10\n\n\ndef even_digits(n):\n    \"\"\"Given a positive integer n, return the product of the even digits.\n    Return 0 if all digits are odd.\n    For example:\n    even_digits(1)  == 1\n    even_digits(4)  == 0\n    even_digits(235) == 15\n    \"\"\"\n    if n < 10:\n        return n\n    else:\n        return n % 10\n\n\ndef odd_digits(n):\n    \"\"\"Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    odd_digits(1)  == 0\n    odd_digits(4)  == 1\n    odd_digits(235) == 15\n    \"\"\"\n    if n < 10:\n        return n\n    else:\n        return n % 10\n\n\ndef sum_of_even_digits(n):\n    \"\"\"Given a positive integer n, return the sum of the even digits.\n    Return 0 if all digits are even.\n    For example:\n    sum_of_even_digits(1)  == 1\n    sum_of_even_digits(4)  == 0\n    sum_of_even_digits(235) == 15\n    \"\"\"\n    if n < 10:\n        return n\n    else:\n        return n % 10 + sum_of_even_digits(n // 10)\n\n\ndef sum_of_odd_digits(n):\n    \"\"\"Given a positive integer n, return the sum of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    sum_of_odd_digits(1)  == 0\n    sum_of_odd_digits(4)  == 1\n    sum_of_odd_digits(235) == 15\n    \"\"\"\n    if n < 10:\n        return n\n    else:\n        return n % 10 + sum_of_odd_digits(n // 10)\n\n\ndef product_of_even_digits(n):\n    \"\"\"Given a positive integer n, return the product of the even digits.\n    Return 0 if all digits are even"
    },
    {
      "rank": 48,
      "score": 9.020164938060113,
      "candidate": "return sum(int(d) for d in str(n)) % 2\n\n\ndef test_digits():\n    assert digits(1) == 1\n    assert digits(4) == 0\n    assert digits(235) == 15\n    assert digits(123456789) == 0\n    assert digits(12345) == 0\n    assert digits(12345678912345) == 0\n    assert digits(12345678912345678912345) == 0\n    assert digits(12345678912345678912345678912345678912345678912345) == 0\n\n\nif __name__ == '__main__':\n    test_digits()"
    },
    {
      "rank": 49,
      "score": 9.006215542699554,
      "candidate": "if n < 0:\n        return 0\n    else:\n        return int(str(n)[0]) * int(str(n)[1:])"
    },
    {
      "rank": 50,
      "score": 8.977504894187254,
      "candidate": "if n == 0:\n        return 0\n    if n % 2 == 0:\n        return n\n    return digits(n / 2) * n\n\n\nprint(digits(1))\nprint(digits(4))\nprint(digits(235))"
    },
    {
      "rank": 51,
      "score": 8.919128454444232,
      "candidate": "if n < 10:\n        return n\n    else:\n        return n % 10 + digits(n//10)"
    },
    {
      "rank": 52,
      "score": 8.814437223621065,
      "candidate": "if n == 0:\n        return 0\n    return n % 10"
    },
    {
      "rank": 53,
      "score": 8.805294277318028,
      "candidate": "if n < 0:\n        return 0\n    if n < 10:\n        return n\n\n    return n * digits(n//10)\n\n\nif __name__ == '__main__':\n    assert digits(1) == 1\n    assert digits(4) == 0\n    assert digits(235) == 15"
    },
    {
      "rank": 54,
      "score": 8.795680958706653,
      "candidate": "if n == 0:\n        return 0\n    else:\n        return n % 2\n\n\ndef test_digits():\n    assert digits(1) == 1\n    assert digits(4) == 0\n    assert digits(235) == 15\n\n\nif __name__ == \"__main__\":\n    test_digits()"
    },
    {
      "rank": 55,
      "score": 8.770392486135114,
      "candidate": "return int(''.join(str(i) for i in n if i % 2 == 0))"
    },
    {
      "rank": 56,
      "score": 8.732335163680562,
      "candidate": "if n % 2 == 0:\n        return n\n    else:\n        return 0"
    },
    {
      "rank": 57,
      "score": 8.732110320975773,
      "candidate": "if n == 1:\n        return 0\n    else:\n        return (n % 10) * digits(n // 10)\n\n\nif __name__ == \"__main__\":\n    assert digits(1) == 1\n    assert digits(4) == 0\n    assert digits(235) == 15"
    },
    {
      "rank": 58,
      "score": 8.713046599647964,
      "candidate": "n = str(n)\n    if len(n) % 2 == 0:\n        return int(n[::-1])\n    else:\n        return 0"
    },
    {
      "rank": 59,
      "score": 8.702907747442838,
      "candidate": "odd = False\n    if n % 2 == 0:\n        odd = True\n    return int(n) if odd else 0\n\n\nif __name__ == \"__main__\":\n    print(digits(1))\n    print(digits(4))\n    print(digits(235))"
    },
    {
      "rank": 60,
      "score": 8.690127447955128,
      "candidate": "return 0 if n == 0 else (n % 2)\n\n\ndef main():\n    n = int(input())\n    print(digits(n))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 61,
      "score": 8.618294397998376,
      "candidate": "if n == 0:\n        return 0\n    s = str(n)\n    return int(''.join(filter(str.isdigit, s)))\n\n\nprint(digits(1))\nprint(digits(4))\nprint(digits(235))"
    },
    {
      "rank": 62,
      "score": 8.57593875086543,
      "candidate": "return 0 if len(str(n)) % 2 else n\n\n\nif __name__ == \"__main__\":\n    print(digits(4))\n    print(digits(235))"
    },
    {
      "rank": 63,
      "score": 8.571017053211117,
      "candidate": "if n == 0:\n        return 0\n    if n % 2 == 0:\n        return 1\n    else:\n        return 0\n\n\ndef main():\n    print(digits(1))\n    print(digits(4))\n    print(digits(235))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 64,
      "score": 8.569433844473556,
      "candidate": "if n % 2 == 0:\n        return 1\n    else:\n        return 0\n\n\nif __name__ == '__main__':\n    print(digits(4))\n    print(digits(235))"
    },
    {
      "rank": 65,
      "score": 8.564710845793407,
      "candidate": "if n < 10:\n        return n\n    else:\n        return n % 10 + digits(n // 10)\n\n\nif __name__ == '__main__':\n    assert digits(1) == 1\n    assert digits(4) == 0\n    assert digits(235) == 15"
    },
    {
      "rank": 66,
      "score": 8.529131239492557,
      "candidate": "if n == 0:\n        return 0\n    if n % 2 == 0:\n        return 1\n    else:\n        return 0\n\n\nif __name__ == \"__main__\":\n    assert digits(1) == 1\n    assert digits(4) == 0\n    assert digits(235) == 15"
    },
    {
      "rank": 67,
      "score": 8.39605193903453,
      "candidate": "if n <= 0:\n        return 0\n    else:\n        return n % 2\n\nprint(digits(1))\nprint(digits(4))\nprint(digits(235))"
    },
    {
      "rank": 68,
      "score": 8.365422739274157,
      "candidate": "if n % 2 == 0:\n        return n\n    else:\n        return n * 2\n\n\nif __name__ == \"__main__\":\n    n = int(input(\"Enter a positive integer: \"))\n    print(f\"{n} is {digits(n)}\")"
    },
    {
      "rank": 69,
      "score": 8.33622011289652,
      "candidate": "if n < 0:\n        return 0\n    if n == 0:\n        return 1\n    if n % 2 == 0:\n        return n\n    return digits(n // 2) * digits(n // 2)\n\n\nif __name__ == \"__main__\":\n    print(digits(1))\n    print(digits(4))\n    print(digits(235))"
    },
    {
      "rank": 70,
      "score": 8.282248251960082,
      "candidate": "return sum(int(i) for i in str(n)) % 2 == 0\n\n\ndef main():\n    print(digits(1))\n    print(digits(4))\n    print(digits(235))\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 71,
      "score": 8.280128409367212,
      "candidate": "if n < 10:\n        return n\n    else:\n        return n % 10 + digits(n // 10)\n\n\ndef main():\n    print(digits(1))\n    print(digits(4))\n    print(digits(235))\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 72,
      "score": 8.276733461198592,
      "candidate": "product = 1\n    for i in range(1, n + 1):\n        product *= i\n    return product\n\n\ndef test_digits():\n    assert digits(1) == 1\n    assert digits(4) == 0\n    assert digits(235) == 15"
    },
    {
      "rank": 73,
      "score": 8.263049868048668,
      "candidate": "if n == 0:\n        return 0\n    return n % 2\n\n\nprint(digits(1))\nprint(digits(4))\nprint(digits(235))"
    },
    {
      "rank": 74,
      "score": 8.253910490860632,
      "candidate": "s = str(n)\n    odd = [int(x) for x in s if int(x) % 2 == 1]\n    return sum(odd)\n\n\nif __name__ == '__main__':\n    print(digits(1))\n    print(digits(4))\n    print(digits(235))"
    },
    {
      "rank": 75,
      "score": 8.233847130164156,
      "candidate": "if n < 0:\n        return 0\n    if n % 2 == 0:\n        return n\n    else:\n        return digits(n // 2) * n"
    },
    {
      "rank": 76,
      "score": 8.20752174433736,
      "candidate": "s = str(n)\n    odd_digits = 0\n    for i in s:\n        if i % 2!= 0:\n            odd_digits += 1\n    return odd_digits\n\nif __name__ == '__main__':\n    print(digits(123))"
    },
    {
      "rank": 77,
      "score": 8.126636018012022,
      "candidate": "return int(str(n)[-1]) if len(str(n)) % 2 == 0 else 0\n\n\ndef test_digits():\n    assert digits(1) == 1\n    assert digits(4) == 0\n    assert digits(235) == 15\n\n\nif __name__ == \"__main__\":\n    test_digits()"
    },
    {
      "rank": 78,
      "score": 8.089953552327396,
      "candidate": "if n == 0:\n        return 0\n    elif n % 2 == 0:\n        return n//2\n    else:\n        return (n//2) + (n%2)\n\n\nif __name__ == \"__main__\":\n    print(digits(1))\n    print(digits(4))\n    print(digits(235))"
    },
    {
      "rank": 79,
      "score": 8.041596692346639,
      "candidate": "if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    if n % 2 == 0:\n        return n * digits(n // 2)\n    else:\n        return 0\n\n\nif __name__ == '__main__':\n    assert digits(1) == 1\n    assert digits(4) == 0\n    assert digits(235) == 15"
    },
    {
      "rank": 80,
      "score": 8.02577212601621,
      "candidate": "s = str(n)\n    return int(\"\".join([i for i in s if i % 2 == 0]))\n\n\nif __name__ == \"__main__\":\n    assert digits(1) == 1\n    assert digits(4) == 0\n    assert digits(235) == 15"
    },
    {
      "rank": 81,
      "score": 8.017149166954587,
      "candidate": "if n == 0:\n        return 0\n    else:\n        return n % 2\n\n\nif __name__ == \"__main__\":\n    print(digits(1))\n    print(digits(4))\n    print(digits(235))"
    },
    {
      "rank": 82,
      "score": 7.9795793273299935,
      "candidate": "return n if n % 2 == 0 else 0\n\n\ndef main():\n    \"\"\"Run the program.\"\"\"\n    print(digits(1))\n    print(digits(4))\n    print(digits(235))\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 83,
      "score": 7.950138148977093,
      "candidate": "if n == 0:\n        return 0\n    result = 1\n    while n > 0:\n        result *= n % 10\n        n //= 10\n    return result\n\nif __name__ == \"__main__\":\n    print(digits(1))\n    print(digits(4))\n    print(digits(235))"
    },
    {
      "rank": 84,
      "score": 7.926961747815845,
      "candidate": "if n == 0:\n        return 0\n    result = 1\n    while n > 0:\n        if n % 2 == 0:\n            result = result * 2\n        n = n / 2\n    return result\n\n\ndef digits_recur(n):\n    \"\"\"Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example\n    digits_recur(1)  == 1\n    digits_recur(4)  == 0\n    digits_recur(235) == 15\n    \"\"\"\n    if n == 0:\n        return 0\n    if n % 2 == 0:\n        return digits_recur(n / 2) * 2\n    else:\n        return digits_recur(n / 2) * 2 + digits_recur(n % 2)\n\n\ndef digits_recur_n(n):\n    \"\"\"Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example\n    digits_recur_n(1)  == 1\n    digits_recur_n(4)  == 0\n    digits_recur_n(235) == 15\n    \"\"\"\n    if n == 0:\n        return 0\n    if n % 2 == 0:\n        return digits_recur_n(n / 2) * 2\n    else:\n        return digits_recur_n(n / 2) * 2 + digits_recur_n(n % 2)"
    },
    {
      "rank": 85,
      "score": 7.774796358814215,
      "candidate": "if n < 1:\n        return 0\n    else:\n        return n % 2\n\n\ndef main():\n    print(digits(1))\n    print(digits(4))\n    print(digits(235))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 86,
      "score": 3.0,
      "candidate": "if n == 0:\n        return 0\n    if n % 2 == 0:\n        return n // 2\n    return n // 2 + digits(n // 2)\n\n\ndef digits_recursive(n):\n    \"\"\"\n    Recursive version of digits\n    \"\"\"\n    if n == 0:\n        return 0\n    if n % 2 == 0:\n        return n // 2\n    return n // 2 + digits_recursive(n // 2)\n\n\ndef digits_recursive2(n):\n    \"\"\"\n    Iterative version of digits\n    \"\"\"\n    if n == 0:\n        return 0\n    if n % 2 == 0:\n        return n // 2\n    return n // 2 + digits_recursive2(n // 2)\n\n\ndef digits_recursive3(n):\n    \"\"\"\n    Iterative version of digits\n    \"\"\"\n    if n == 0:\n        return 0\n    if n % 2 == 0:\n        return n // 2\n    return n // 2 + digits_recursive3(n // 2)\n\n\nif __name__ == '__main__':\n    print(digits(1))\n    print(digits(4))\n    print(digits(235))\n    print(digits_recursive(1))\n    print(digits_recursive(4))\n    print(digits_recursive(235))\n    print(digits_recursive2(1))\n    print(digits_recursive2(4))\n    print(digits_recursive2(235))\n    print(digits_recursive2(2))\n    print(digits_recursive2(3))\n    print(digits_recursive2(4))\n    print(digits_recursive2(5))\n    print(digits_recursive2(6))\n    print(digits_recursive2(7))\n    print(digits_recursive2(8))\n    print(digits_recursive2(9))\n    print(digits_recursive2(10))\n    print(digits_recursive2(11))\n    print(digits_recursive2(12))\n    print(digits_recursive2(13))\n    print(digits_recursive2(14))\n    print(digits_recursive2(15))\n    print(digits_recursive2(16))\n    print(digits_recursive2(17))"
    },
    {
      "rank": 87,
      "score": 3.0,
      "candidate": "return int(''.join(str(n)[::-1]))\n\n\ndef test_digits():\n    assert digits(1) == 1\n    assert digits(4) == 0\n    assert digits(235) == 15\n    assert digits(3) == 0\n    assert digits(2) == 1\n    assert digits(1) == 0\n    assert digits(0) == 0\n    assert digits(5) == 0\n    assert digits(9) == 0\n    assert digits(14) == 0\n    assert digits(20) == 0\n    assert digits(15) == 0\n    assert digits(515) == 0\n    assert digits(17) == 0\n    assert digits(5) == 0\n    assert digits(314) == 0\n    assert digits(3) == 0\n    assert digits(214) == 0\n    assert digits(2) == 0\n    assert digits(7) == 0\n    assert digits(14) == 0\n    assert digits(35) == 0\n    assert digits(714) == 0\n    assert digits(1714) == 0\n    assert digits(514) == 0\n    assert digits(1514) == 0\n    assert digits(1714) == 0\n    assert digits(17) == 0\n    assert digits(31414) == 0\n    assert digits(314) == 0\n    assert digits(21414) == 0\n    assert digits(21414) == 0\n    assert digits(2) == 0\n    assert digits(151414) == 0\n    assert digits(151414) == 0\n    assert digits(171414) == 0\n    assert digits(171414) == 0\n    assert digits(171414) == 0\n    assert digits(171414) == 0\n    assert digits(171414) == 0\n    assert digits(171414) == 0\n    assert digits(171414) == 0\n    assert digits(171414) == 0\n    assert digits(171414) == 0\n    assert digits(171414) == 0\n    assert digits(171414) == 0\n    assert digits(171414) == 0\n    assert digits(171414) == 0\n    assert digits(171414) =="
    },
    {
      "rank": 88,
      "score": 3.0,
      "candidate": "result = 1\n    while n > 0:\n        result *= n % 10\n        n = n // 10\n    return result\n\n\ndef digits_sum(n):\n    \"\"\"Given a positive integer n, return the sum of the odd digits.\n    Return 0 if all digits are even.\n    For example\n    digits_sum(1)  == 1\n    digits_sum(4)  == 0\n    digits_sum(235) == 15\n    \"\"\"\n    result = 0\n    while n > 0:\n        result += n % 10\n        n = n // 10\n    return result\n\n\ndef digits_product(n):\n    \"\"\"Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example\n    digits_product(1)  == 1\n    digits_product(4)  == 0\n    digits_product(235) == 15\n    \"\"\"\n    result = 1\n    while n > 0:\n        result *= n % 10\n        n = n // 10\n    return result\n\n\ndef digits_pow(n, p):\n    \"\"\"Given a positive integer n and a positive integer p, return the product\n    of the odd digits with the exponent p.\n    For example\n    digits_pow(1, 2)  == 1\n    digits_pow(4, 2)  == 0\n    digits_pow(235, 3) == 15\n    \"\"\"\n    result = 1\n    while p > 0:\n        result *= n % 10 ** p\n        p -= 1\n    return result\n\n\ndef digits_factorial(n):\n    \"\"\"Given a positive integer n, return the factorial of the odd digits.\n    Return 0 if all digits are even.\n    For example\n    digits_factorial(1)  == 1\n    digits_factorial(4)  == 0\n    digits_factorial(235) == 15\n    \"\"\"\n    result = 1\n    while n > 0:\n        result *= n\n        n = n // 10\n    return result\n\n\ndef digits_factorial_sum(n):\n    \"\"\"Given a positive integer n, return the factorial of the odd digits.\n    Return 0 if all digits are even.\n    For example"
    },
    {
      "rank": 89,
      "score": 3.0,
      "candidate": "if n == 0:\n        return 0\n    elif n % 2 == 1:\n        return 1\n    else:\n        return n % 2\n\n\ndef odd_digits(n):\n    \"\"\"Given a positive integer n, return the product of the even digits.\n    Return 0 if all digits are odd.\n    For example:\n    odd_digits(1)  == 0\n    odd_digits(4)  == 1\n    odd_digits(235) == 15\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n % 2 == 0:\n        return 1\n    else:\n        return n % 2"
    },
    {
      "rank": 90,
      "score": 3.0,
      "candidate": "return n if n > 0 else 0\n\n\ndef digits_2(n):\n    \"\"\"Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example\n    digits_2(1)  == 1\n    digits_2(4)  == 0\n    digits_2(235) == 15\n    \"\"\"\n    if n < 0:\n        return 0\n    digits = str(n)\n    if len(digits) % 2 == 0:\n        return int(digits[:len(digits)//2])\n    return 0\n\n\ndef digits_3(n):\n    \"\"\"Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example\n    digits_3(1)  == 1\n    digits_3(4)  == 0\n    digits_3(235) == 15\n    \"\"\"\n    if n < 0:\n        return 0\n    digits = str(n)\n    return int(digits[:len(digits)//2]) * int(digits[len(digits)//2:])\n\n\ndef digits_4(n):\n    \"\"\"Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example\n    digits_4(1)  == 1\n    digits_4(4)  == 0\n    digits_4(235) == 15\n    \"\"\"\n    if n < 0:\n        return 0\n    digits = str(n)\n    return int(digits[:len(digits)//2]) * int(digits[len(digits)//2:]) * int(digits[len(digits)//2+1:])\n\n\ndef digits_5(n):\n    \"\"\"Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example\n    digits_5(1)  == 1\n    digits_5(4)  == 0\n    digits_5(235) == 15\n    \"\"\"\n    if n < 0:\n        return 0\n    digits = str(n)\n    return int(digits[:len(digits)//2]) * int(digits[len(digits"
    },
    {
      "rank": 91,
      "score": 3.0,
      "candidate": "n = str(n)\n    if len(n) % 2 == 0:\n        return n\n    return int(n[0]) * int(n[1])\n\n\ndef digits2(n):\n    \"\"\"Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits2(1)  == 1\n    digits2(4)  == 0\n    digits2(235) == 15\n    \"\"\"\n    n = str(n)\n    if len(n) % 2 == 0:\n        return n\n    return int(n[0]) * int(n[1]) + int(n[2]) * int(n[3])\n\n\ndef digits3(n):\n    \"\"\"Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits3(1)  == 1\n    digits3(4)  == 0\n    digits3(235) == 15\n    \"\"\"\n    n = str(n)\n    if len(n) % 2 == 0:\n        return n\n    return int(n[0]) * int(n[1]) * int(n[2]) * int(n[3])\n\n\ndef digits4(n):\n    \"\"\"Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits4(1)  == 1\n    digits4(4)  == 0\n    digits4(235) == 15\n    \"\"\"\n    n = str(n)\n    if len(n) % 2 == 0:\n        return n\n    return int(n[0]) * int(n[1]) * int(n[2]) * int(n[3]) * int(n[4])\n\n\ndef digits5(n):\n    \"\"\"Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits5(1)  == 1\n    digits5(4)  == 0\n    digits5(235) == 15\n    \"\"\"\n    n = str(n)"
    },
    {
      "rank": 92,
      "score": 3.0,
      "candidate": "odd = [int(i) for i in str(n)]\n    if len(odd) % 2 == 0:\n        return sum(odd)\n    else:\n        return 0\n\n\ndef digits_2(n):\n    \"\"\"Given a positive integer n, return the product of the even digits.\n    Return 0 if all digits are even.\n    For example\n    digits_2(1)  == 1\n    digits_2(4)  == 0\n    digits_2(235) == 15\n    \"\"\"\n    odd = [int(i) for i in str(n)]\n    if len(odd) % 2 == 1:\n        return sum(odd)\n    else:\n        return 0\n\n\ndef digits_3(n):\n    \"\"\"Given a positive integer n, return the product of the even digits.\n    Return 0 if all digits are even.\n    For example\n    digits_3(1)  == 1\n    digits_3(4)  == 0\n    digits_3(235) == 15\n    \"\"\"\n    odd = [int(i) for i in str(n)]\n    if len(odd) % 2 == 1:\n        return sum(odd)\n    else:\n        return 0\n\n\ndef digits_4(n):\n    \"\"\"Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example\n    digits_4(1)  == 1\n    digits_4(4)  == 0\n    digits_4(235) == 15\n    \"\"\"\n    odd = [int(i) for i in str(n)]\n    if len(odd) % 2 == 0:\n        return sum(odd)\n    else:\n        return 0\n\n\ndef digits_5(n):\n    \"\"\"Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example\n    digits_5(1)  == 1\n    digits_5(4)  == 0\n    digits_5(235) == 15\n    \"\"\"\n    odd = [int(i) for i in str(n)]\n    if len(odd) % 2 == 1:\n        return sum(odd)"
    },
    {
      "rank": 93,
      "score": 3.0,
      "candidate": "if n == 0:\n        return 0\n    else:\n        return n % 2\n\n\ndef is_prime(n):\n    \"\"\"Given a positive integer n, check if it is a prime number.\n    Return True if n is a prime number, False otherwise.\n    For example\n    is_prime(1)  == True\n    is_prime(4)  == False\n    is_prime(235) == True\n    \"\"\"\n    if n < 2:\n        return False\n    else:\n        for i in range(2, n):\n            if n % i == 0:\n                return False\n        return True\n\n\ndef is_palindrome(n):\n    \"\"\"Given a positive integer n, check if it is a palindrome.\n    Return True if n is a palindrome, False otherwise.\n    For example\n    is_palindrome(1)  == True\n    is_palindrome(4)  == False\n    is_palindrome(235) == True\n    \"\"\"\n    if n < 2:\n        return False\n    else:\n        for i in range(len(n)):\n            if n[i]!= n[-1-i]:\n                return False\n        return True"
    },
    {
      "rank": 94,
      "score": 3.0,
      "candidate": "if n == 1:\n        return 0\n    result = 1\n    for i in str(n):\n        result *= int(i)\n    return result\n\n\ndef digits_2(n):\n    \"\"\"Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example\n    digits_2(1)  == 1\n    digits_2(4)  == 0\n    digits_2(235) == 15\n    \"\"\"\n    if n == 1:\n        return 0\n    result = 1\n    for i in str(n):\n        result *= int(i)\n        if result % 2 == 0:\n            return 0\n    return result\n\n\ndef digits_3(n):\n    \"\"\"Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example\n    digits_3(1)  == 1\n    digits_3(4)  == 0\n    digits_3(235) == 15\n    \"\"\"\n    if n == 1:\n        return 0\n    result = 1\n    for i in str(n):\n        result *= int(i)\n        if result % 2 == 0:\n            return 0\n    return result"
    },
    {
      "rank": 95,
      "score": 3.0,
      "candidate": "if n < 0:\n        return 0\n    n = str(n)\n    result = 1\n    for c in n:\n        if c == \"0\":\n            continue\n        result *= int(c)\n    return result\n\n\ndef digits_reverse(n):\n    \"\"\"Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example\n    digits_reverse(1)  == 1\n    digits_reverse(4)  == 0\n    digits_reverse(235) == 15\n    \"\"\"\n    if n < 0:\n        return 0\n    n = str(n)\n    result = 1\n    for c in n[::-1]:\n        if c == \"0\":\n            continue\n        result *= int(c)\n    return result\n\n\nif __name__ == \"__main__\":\n    assert digits(1) == 1\n    assert digits(4) == 0\n    assert digits(235) == 15\n    assert digits_reverse(1) == 1\n    assert digits_reverse(4) == 0\n    assert digits_reverse(235) == 15"
    },
    {
      "rank": 96,
      "score": 3.0,
      "candidate": "if n == 0:\n        return 0\n    else:\n        return n % 2\n\ndef digits_recursive(n):\n    \"\"\"\n    Recursively return the product of the odd digits of n.\n    \"\"\"\n    if n == 0:\n        return 0\n    else:\n        return n % 2\n\ndef digits_iterative(n):\n    \"\"\"\n    Iterative solution.\n    \"\"\"\n    if n == 0:\n        return 0\n    else:\n        return n % 2\n\ndef digits_recursive_iterative(n):\n    \"\"\"\n    Iterative solution.\n    \"\"\"\n    if n == 0:\n        return 0\n    else:\n        return n % 2\n\ndef digits_recursive_iterative_2(n):\n    \"\"\"\n    Iterative solution.\n    \"\"\"\n    if n == 0:\n        return 0\n    else:\n        return n % 2\n\ndef digits_recursive_iterative_3(n):\n    \"\"\"\n    Iterative solution.\n    \"\"\"\n    if n == 0:\n        return 0\n    else:\n        return n % 2\n\ndef digits_iterative_2(n):\n    \"\"\"\n    Iterative solution.\n    \"\"\"\n    if n == 0:\n        return 0\n    else:\n        return n % 2\n\ndef digits_iterative_3(n):\n    \"\"\"\n    Iterative solution.\n    \"\"\"\n    if n == 0:\n        return 0\n    else:\n        return n % 2\n\ndef digits_recursive_iterative_4(n):\n    \"\"\"\n    Iterative solution.\n    \"\"\"\n    if n == 0:\n        return 0\n    else:\n        return n % 2\n\ndef digits_iterative_4(n):\n    \"\"\"\n    Iterative solution.\n    \"\"\"\n    if n == 0:\n        return 0\n    else:\n        return n % 2\n\ndef digits_recursive_iterative_5(n):\n    \"\"\"\n    Iterative solution.\n    \"\"\"\n    if n == 0:\n        return 0\n    else:\n        return n % 2\n\ndef digits_iterative_5(n):\n    \"\"\"\n    Iterative solution.\n    \"\"\"\n    if n == 0"
    },
    {
      "rank": 97,
      "score": 3.0,
      "candidate": "if n == 0:\n        return 0\n    return n % 2\n\n\ndef even_digits(n):\n    \"\"\"Given a positive integer n, return the product of the even digits.\n    Return 0 if all digits are even.\n    For example\n    even_digits(1)  == 0\n    even_digits(4)  == 1\n    even_digits(235) == 15\n    \"\"\"\n    if n == 0:\n        return 0\n    return (n // 2) % 2\n\n\ndef odd_digits(n):\n    \"\"\"Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are odd.\n    For example\n    odd_digits(1)  == 0\n    odd_digits(4)  == 0\n    odd_digits(235) == 15\n    \"\"\"\n    if n == 0:\n        return 0\n    return (n // 2) % 2\n\n\ndef product(n):\n    \"\"\"Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are odd.\n    For example\n    product(1)  == 1\n    product(4)  == 0\n    product(235) == 15\n    \"\"\"\n    if n == 0:\n        return 0\n    return n * (n // 2) * (n // 2) * (n // 2)\n\n\ndef product_of_digits(n):\n    \"\"\"Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are odd.\n    For example\n    product_of_digits(1)  == 1\n    product_of_digits(4)  == 0\n    product_of_digits(235) == 15\n    \"\"\"\n    if n == 0:\n        return 0\n    return n * (n // 2) * (n // 2) * (n // 2) * (n // 2)"
    },
    {
      "rank": 98,
      "score": 3.0,
      "candidate": "return 1 if n % 2 == 0 else 0\n\n\ndef product_of_digits(n):\n    \"\"\"Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example\n    product_of_digits(1)  == 1\n    product_of_digits(4)  == 0\n    product_of_digits(235) == 15\n    \"\"\"\n    return n * digits(n)\n\n\ndef product_of_digits_recursive(n):\n    \"\"\"Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example\n    product_of_digits_recursive(1)  == 1\n    product_of_digits_recursive(4)  == 0\n    product_of_digits_recursive(235) == 15\n    \"\"\"\n    if n == 1:\n        return 1\n    else:\n        return n * product_of_digits_recursive(n - 1)\n\n\ndef product_of_digits_recursive_2(n):\n    \"\"\"Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example\n    product_of_digits_recursive_2(1)  == 1\n    product_of_digits_recursive_2(4)  == 0\n    product_of_digits_recursive_2(235) == 15\n    \"\"\"\n    if n == 1:\n        return 1\n    else:\n        return n * product_of_digits_recursive_2(n - 1)\n\n\nif __name__ == '__main__':\n    print(digits(1))\n    print(digits(4))\n    print(digits(235))\n\n    print(product_of_digits(1))\n    print(product_of_digits(4))\n    print(product_of_digits(235))\n\n    print(product_of_digits_recursive(1))\n    print(product_of_digits_recursive(4))\n    print(product_of_digits_recursive(235))\n\n    print(product_of_digits_recursive_2(1))\n    print(product_of_digits_recursive_2(4"
    },
    {
      "rank": 99,
      "score": 3.0,
      "candidate": "if n == 0:\n        return 0\n    if n % 2 == 0:\n        return n * (n - 1) // 2\n    else:\n        return n * (n - 1) // 2 + 1\n\n\ndef is_prime(n):\n    \"\"\"Returns True if n is a prime number.\n    For example, is_prime(2)  == True\n    is_prime(5)  == False\n    \"\"\"\n    if n < 2:\n        return False\n    for i in range(2, n):\n        if n % i == 0:\n            return False\n    return True\n\n\ndef is_prime_of_digits(n):\n    \"\"\"Returns True if n is a prime number with digits.\n    For example, is_prime_of_digits(1)  == True\n    is_prime_of_digits(4)  == False\n    is_prime_of_digits(235) == True\n    \"\"\"\n    if n < 2:\n        return False\n    if n == 1:\n        return False\n    for i in range(2, n):\n        if digits(i) == n - 1:\n            return False\n    return True\n\n\ndef prime_factors(n):\n    \"\"\"Returns a list of prime factors of n.\n    For example, prime_factors(123)  == [2, 3]\n    prime_factors(123)  == [2, 3, 5]\n    prime_factors(23)  == [2, 3, 5, 7]\n    \"\"\"\n    if n < 2:\n        return []\n    if n == 1:\n        return [1]\n    if n == 2:\n        return [1, 2]\n    if n % 2 == 0:\n        return [2, n]\n    return [n]\n\n\ndef is_prime_of_prime_factors(n):\n    \"\"\"Returns True if n is a prime number with prime factors.\n    For example, is_prime_of_prime_factors(2)  == True\n    is_prime_of_prime_factors(3)  == False\n    is_prime_of_prime_factors(5)  == True\n    \"\"\"\n    if n < 2:\n        return False"
    },
    {
      "rank": 100,
      "score": 3.0,
      "candidate": "if n <= 0:\n        return 0\n    s = str(n)\n    ans = 1\n    for i in s:\n        ans *= int(i)\n    return ans\n\n\ndef digits_longest(n):\n    \"\"\"Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits_longest(1)  == 1\n    digits_longest(4)  == 0\n    digits_longest(235) == 15\n    \"\"\"\n    if n <= 0:\n        return 0\n    s = str(n)\n    ans = 1\n    for i in s:\n        if i == '0':\n            continue\n        ans *= int(i)\n    return ans"
    }
  ]
}