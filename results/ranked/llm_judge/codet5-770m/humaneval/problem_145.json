{
  "timestamp": "2025-09-14T12:20:00.019567",
  "method": "improved_llm_judge",
  "judge_model": "codellama/CodeLlama-7b-Python-hf",
  "target_model": "codet5-770m",
  "dataset": "humaneval",
  "problem_number": 145,
  "total_candidates": 100,
  "results": [
    {
      "rank": 1,
      "score": 10.0,
      "candidate": "if not nums:\n        return []\n    total_sum = 0\n    for num in nums:\n        total_sum += num\n    nums.sort(reverse=True)\n    result = []\n    for num in nums:\n        result.append(num)\n        result.append(total_sum - num)\n    return result\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 2,
      "score": 10.0,
      "candidate": "digits_sum = {}\n    for num in nums:\n        digits_sum[num] = sum([int(digit) for digit in str(num)])\n\n    sorted_nums = sorted(digits_sum.items(), key=lambda item: item[1])\n\n    return [num for num, digit in sorted_nums]\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 3,
      "score": 10.0,
      "candidate": "sum_of_digits = [0] * 10\n    for num in nums:\n        for i in range(len(sum_of_digits)):\n            if num == sum_of_digits[i]:\n                sum_of_digits[i] += 1\n            else:\n                break\n        else:\n            nums.insert(0, num)\n    return nums\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 4,
      "score": 10.0,
      "candidate": "nums_copy = nums[:]\n    nums_copy.sort(key=lambda x: sum([int(i) for i in str(x)]))\n    return nums_copy\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 5,
      "score": 10.0,
      "candidate": "# Your code here\n    return sorted(nums, key=lambda x: sum(map(int, str(x))))\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 6,
      "score": 10.0,
      "candidate": "nums = [int(num) for num in nums]\n    nums.sort()\n    result = []\n    for num in nums:\n        result.append(num)\n    return result"
    },
    {
      "rank": 7,
      "score": 10.0,
      "candidate": "nums.sort(key=lambda x: sum([int(i) for i in str(x)]))\n    return nums\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 8,
      "score": 10.0,
      "candidate": "num_sums = []\n    for num in nums:\n        num_sums.append(sum(int(x) for x in str(num)))\n    return sorted(nums, key=lambda x: num_sums[x])\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 9,
      "score": 10.0,
      "candidate": "res = []\n    for i, num in enumerate(nums):\n        res.append(num)\n        res.sort()\n        res.append(i)\n    return res\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 10,
      "score": 10.0,
      "candidate": "nums.sort()\n    sum_ = 0\n    for i in range(len(nums)):\n        sum_ += nums[i]\n        nums.insert(i, sum_)\n    return nums\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 11,
      "score": 10.0,
      "candidate": "return sorted(nums, key=lambda x: sum(int(i) for i in str(x)))\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 12,
      "score": 10.0,
      "candidate": "nums = sorted(nums)\n    for i, n in enumerate(nums):\n        if n == 0:\n            nums.pop(i)\n        else:\n            break\n    return nums\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 13,
      "score": 10.0,
      "candidate": "if nums == []:\n        return []\n    nums_sum = sum(nums)\n    nums_dict = {}\n    for i in range(len(nums)):\n        nums_dict[nums[i]] = i\n    sorted_list = []\n    for key, value in nums_dict.items():\n        sorted_list.append(key)\n    return sorted(sorted_list)\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 14,
      "score": 10.0,
      "candidate": "# Your code here\n    sum_of_digits = 0\n    sorted_nums = []\n    for num in nums:\n        sum_of_digits += num\n        if sum_of_digits == 0:\n            sorted_nums.append(num)\n    return sorted(sorted_nums)\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 15,
      "score": 10.0,
      "candidate": "nums.sort()\n    return [nums[i] for i in range(len(nums))]\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 16,
      "score": 10.0,
      "candidate": "return sorted(nums, key=lambda x: sum(map(int, str(x))))\n\n\ndef order_by_points_2(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    return sorted(nums, key=lambda x: sum(map(int, str(x))))\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 17,
      "score": 10.0,
      "candidate": "nums.sort()\n    return nums\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 18,
      "score": 10.0,
      "candidate": "if not nums:\n        return []\n\n    nums.sort()\n    sum_nums = [0] * len(nums)\n    for i, num in enumerate(nums):\n        sum_nums[i] = sum(map(int, str(num)))\n    result = []\n    for i in range(len(nums)):\n        result.append(nums[i] * sum_nums[i])\n    return result\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 19,
      "score": 10.0,
      "candidate": "sum_nums = [0] * len(nums)\n    for i, num in enumerate(nums):\n        sum_nums[i] = sum([int(x) for x in str(num)])\n    return sorted(nums, key=lambda num: sum_nums[num])\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 20,
      "score": 10.0,
      "candidate": "sum_of_digits = [0] * 10\n    for num in nums:\n        for i in range(10):\n            sum_of_digits[i] += num % 10\n\n    result = []\n    for i in range(10):\n        num = 0\n        for j in range(len(nums)):\n            num += nums[j] * (10 ** i)\n        result.append(num)\n\n    for i in range(len(nums)):\n        result[i] += nums[i] * (10 ** i)\n\n    return result\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 21,
      "score": 10.0,
      "candidate": "nums.sort()\n    return nums\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 22,
      "score": 10.0,
      "candidate": "digit_sums = [0] * 10\n    for num in nums:\n        digit_sums[num % 10] += num\n    return sorted(nums, key=lambda num: digit_sums[num % 10])\n\n\ndef order_by_points_recursive(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points_recursive([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points_recursive([]) == []\n    \"\"\"\n    if not nums:\n        return []\n\n    digit_sums = [0] * 10\n    for num in nums:\n        digit_sums[num % 10] += num\n\n    result = []\n    for i, num in enumerate(nums):\n        result.append(digit_sums[num % 10] - num)\n\n    return result\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 23,
      "score": 9.952584204220821,
      "candidate": "if nums == []:\n        return []\n\n    nums.sort()\n    nums_sum = 0\n    for i in range(len(nums)):\n        nums_sum += nums[i]\n    return [nums[i] for i in range(len(nums)) if nums_sum == nums[i]]\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 24,
      "score": 9.943311636519814,
      "candidate": "nums_sum = 0\n    nums_sum_map = {}\n    for i in range(len(nums)):\n        nums_sum += nums[i]\n        nums_sum_map[nums_sum] = i\n\n    sorted_nums = []\n    for i in range(len(nums)):\n        sorted_nums.append(nums[nums_sum_map[nums_sum]])\n\n    return sorted_nums\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 25,
      "score": 9.90993452598662,
      "candidate": "# if the list is empty, return an empty list\n    if len(nums) == 0:\n        return []\n\n    # calculate the sum of each digit\n    sum_of_digits = [sum(map(int, str(num))) for num in nums]\n\n    # sort the list based on the sum of each digit\n    sorted_nums = sorted(nums, key=lambda num: sum_of_digits[num])\n\n    return sorted_nums\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 26,
      "score": 9.877406986308994,
      "candidate": "num_sum = sum(nums)\n    for i in range(len(nums)):\n        if num_sum == nums[i]:\n            nums.sort(key=lambda x: nums.index(x))\n    return nums\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 27,
      "score": 9.80999874594689,
      "candidate": "digits = [int(d) for d in str(sum(nums))]\n    return [nums.index(d) for d in digits]\n\n\ndef order_by_points_with_sorted_list(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points_with_sorted_list([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points_with_sorted_list([]) == []\n    \"\"\"\n    return sorted(nums, key=lambda num: sum(int(d) for d in str(num)))\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 28,
      "score": 9.809050801036195,
      "candidate": "nums = sorted(nums, key=lambda x: sum([int(i) for i in str(x)]))\n    return nums\n\n\ndef order_by_points_v2(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    nums = sorted(nums)\n    return [nums[i] for i in range(len(nums)) if nums[i]!= 0]\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 29,
      "score": 9.80751550176667,
      "candidate": "nums.sort()\n    return [nums[i] for i in range(len(nums))]\n\n\ndef order_by_points_recursive(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example\n    >>> order_by_points_recursive([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points_recursive([]) == []\n    \"\"\"\n    nums.sort()\n    if len(nums) == 1:\n        return nums\n    else:\n        return [nums[i] + order_by_points_recursive(nums[:i])\n                for i in range(1, len(nums))]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 30,
      "score": 9.803538562483432,
      "candidate": "nums_copy = list(nums)\n    nums_copy.sort(reverse=True)\n    sum_of_digits = 0\n    for num in nums_copy:\n        sum_of_digits += num\n    sorted_nums = []\n    for num in nums:\n        index = nums_copy.index(num)\n        sorted_nums.insert(index, num)\n    return sorted_nums\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 31,
      "score": 9.787509210507805,
      "candidate": "# Your code here\n    return sorted(nums, key=lambda x: sum([int(i) for i in str(x)]))\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 32,
      "score": 9.782798316455514,
      "candidate": "# Your code here\n    result = []\n    for num in nums:\n        result.append(num)\n        result.sort(key=lambda x: sum(int(i) for i in str(x)))\n\n    return result\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 33,
      "score": 9.776803082944674,
      "candidate": "if not nums:\n        return []\n\n    nums.sort()\n    sum_sum = 0\n    index = 0\n    sorted_nums = []\n    for num in nums:\n        sum_sum += num\n        if sum_sum == 0:\n            sorted_nums.append(nums[index])\n            index += 1\n        elif sum_sum > 0:\n            sorted_nums.append(num)\n    return sorted_nums\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 34,
      "score": 9.769462113011201,
      "candidate": "return sorted(nums, key=lambda x: sum(map(int, str(x))))\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 35,
      "score": 9.70486387455817,
      "candidate": "# Your code here\n    return sorted(nums, key=lambda x: sum(map(int, str(x))))\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 36,
      "score": 9.54640266065753,
      "candidate": "nums = sorted(nums)\n    for i in range(len(nums)):\n        nums[i] += nums[i+1]\n    return nums\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 37,
      "score": 9.42095548245253,
      "candidate": "nums.sort()\n    return nums\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 38,
      "score": 9.39995887126583,
      "candidate": "nums.sort()\n    return nums\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 39,
      "score": 9.292783688669656,
      "candidate": "# Your code here\n    if not nums:\n        return []\n\n    sum_dict = {}\n\n    for i in nums:\n        if i not in sum_dict:\n            sum_dict[i] = 1\n        else:\n            sum_dict[i] += 1\n\n    sorted_nums = sorted(nums, key=lambda x: sum_dict[x])\n    return sorted_nums\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 40,
      "score": 9.234050852198141,
      "candidate": "return sorted(nums, key=lambda x: sum(int(i) for i in str(x)))\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 41,
      "score": 9.215555099690302,
      "candidate": "if len(nums) == 0:\n        return []\n    nums.sort()\n    return nums\n\n\ndef order_by_points_2(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points_2([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points_2([]) == []\n    \"\"\"\n    sum_nums = 0\n    for num in nums:\n        sum_nums += num\n    nums.sort()\n    return [nums[i] for i in range(len(nums)) if sum_nums == nums[i]]\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 42,
      "score": 9.21346272767743,
      "candidate": "sum_nums = [0] * 10\n    for num in nums:\n        sum_nums[num % 10] += num\n    index = [i for i, val in enumerate(sum_nums) if val == sum_nums[i]]\n    index.sort()\n    return [nums[i] for i in index]"
    },
    {
      "rank": 43,
      "score": 9.205959372648458,
      "candidate": "return sorted(nums, key=lambda x: sum(map(int, str(x))))\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 44,
      "score": 9.185096745013634,
      "candidate": "nums.sort()\n    sum_ = 0\n    for i in range(len(nums)):\n        sum_ += nums[i]\n    return [nums[i] for i in range(len(nums)) if sum_ == nums[i]]\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 45,
      "score": 8.973005557553902,
      "candidate": "s = sum(nums)\n    nums.sort(key=lambda x: sum(map(int, str(x))))\n    return nums\n\n\ndef order_by_points_recursive(nums):\n    \"\"\"\n    Recursive version of order_by_points.\n    \"\"\"\n    if not nums:\n        return []\n    return [nums[0]] + order_by_points_recursive(nums[1:])\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 46,
      "score": 8.910084504002544,
      "candidate": "nums.sort()\n    return [nums[i] for i in range(len(nums))]\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 47,
      "score": 8.902145503295483,
      "candidate": "sum_of_digits = [0] * 10\n    for num in nums:\n        sum_of_digits[num % 10] += num\n\n    return sorted(sum_of_digits, reverse=True)\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 48,
      "score": 8.85571690049604,
      "candidate": "# Your code here\n    return sorted(nums, key=lambda x: sum(map(int, str(x))))"
    },
    {
      "rank": 49,
      "score": 8.855395696632057,
      "candidate": "return sorted(nums, key=lambda x: sum(map(int, str(x))))"
    },
    {
      "rank": 50,
      "score": 8.76828871349479,
      "candidate": "sum_dict = {}\n    for i, num in enumerate(nums):\n        if num in sum_dict:\n            sum_dict[num].append(i)\n        else:\n            sum_dict[num] = [i]\n    sum_dict = {k: sorted(v) for k, v in sum_dict.items()}\n    return [sum_dict[num] for num in nums]\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 51,
      "score": 8.750282588864879,
      "candidate": "nums.sort()\n    return nums"
    },
    {
      "rank": 52,
      "score": 8.715724466237427,
      "candidate": "num_sum = [0] * len(nums)\n    for i, num in enumerate(nums):\n        num_sum[i] = sum(map(int, str(num)))\n\n    sorted_nums = sorted(nums, key=lambda x: num_sum[x])\n\n    return sorted_nums\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 53,
      "score": 8.701078161001123,
      "candidate": "nums.sort(key=lambda x: sum([int(d) for d in str(x)]))\n    return nums\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 54,
      "score": 8.632293453617281,
      "candidate": "nums.sort()\n    result = []\n    for num in nums:\n        sum_num = 0\n        for num_char in str(num):\n            sum_num += int(num_char)\n        result.append(sum_num)\n    return result\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 55,
      "score": 8.625262456968262,
      "candidate": "return sorted(nums, key=lambda x: sum(map(int, str(x))))\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 56,
      "score": 8.623000730200317,
      "candidate": "if not nums:\n        return []\n    result = []\n    for num in nums:\n        sum_of_digit = 0\n        for i in range(len(str(num))):\n            sum_of_digit += int(str(num)[i])\n        if sum_of_digit == num:\n            result.append(num)\n        else:\n            result.append(num + sum_of_digit)\n    return result\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 57,
      "score": 8.616253589228675,
      "candidate": "nums.sort()\n    return nums"
    },
    {
      "rank": 58,
      "score": 8.610076160146226,
      "candidate": "return sorted(nums, key=lambda x: sum([int(n) for n in str(x)]))\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 59,
      "score": 8.606486429141842,
      "candidate": "for i in range(len(nums)):\n        for j in range(i + 1, len(nums)):\n            if sum([nums[i], nums[j]]) == sum(nums):\n                return [nums[i], nums[j]]\n\n    return []\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 60,
      "score": 8.60156811074208,
      "candidate": "if nums == []:\n        return []\n\n    nums_sorted = []\n    nums_sorted_index = []\n    nums_sum = 0\n    for num in nums:\n        nums_sum += num\n        nums_sorted.append(num)\n        nums_sorted_index.append(nums.index(num))\n\n    nums_sorted_index.sort()\n    nums_sorted.sort()\n\n    return nums_sorted_index + nums_sorted\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 61,
      "score": 8.548876241946822,
      "candidate": "if not nums:\n        return []\n    nums.sort()\n    return nums"
    },
    {
      "rank": 62,
      "score": 8.499905739299377,
      "candidate": "if not nums:\n        return []\n\n    sum_sum = 0\n    for num in nums:\n        sum_sum += num\n    index = [i for i, num in enumerate(nums) if sum_sum == num]\n    index = [nums[i] for i in index]\n    index.sort()\n    return index\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 63,
      "score": 8.492983219118464,
      "candidate": "nums_set = set(nums)\n    return sorted(nums_set, key=lambda x: sum([int(n) for n in str(x)]))\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 64,
      "score": 8.490324832712195,
      "candidate": "if nums == []:\n        return []\n    nums.sort()\n    digits = [int(x) for x in str(nums[0])]\n    result = []\n    for i in range(len(nums)):\n        for j in range(len(digits)):\n            if digits[j] == nums[i]:\n                result.append(nums[i])\n                break\n        else:\n            result.append(nums[i])\n    return result\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 65,
      "score": 8.478208546788407,
      "candidate": "digits = [int(x) for x in str(sum(nums))]\n    nums.sort(key=lambda x: digits[x])\n    return nums"
    },
    {
      "rank": 66,
      "score": 8.437695832075478,
      "candidate": "nums = [int(n) for n in str(sum(nums))]\n    return sorted(nums)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 67,
      "score": 8.426531424889468,
      "candidate": "nums.sort()\n    return nums\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 68,
      "score": 8.408439383654278,
      "candidate": "return sorted(nums, key=lambda x: sum([int(digit) for digit in str(x)]))"
    },
    {
      "rank": 69,
      "score": 8.351614956112536,
      "candidate": "if len(nums) == 0:\n        return []\n    sum_nums = [0] * 10\n    for num in nums:\n        sum_nums[num % 10] += num\n    return sorted(nums, key=lambda num: sum_nums[num % 10])\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 70,
      "score": 8.331556294201176,
      "candidate": "return sorted(nums, key=lambda x: sum([int(y) for y in str(x)]))\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 71,
      "score": 8.327375965969855,
      "candidate": "nums_sum = [0] * 10\n    for num in nums:\n        nums_sum[num] += num\n    nums_sum.sort()\n    return [nums_sum[i] for i in range(10)]\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 72,
      "score": 8.327367757082776,
      "candidate": "return sorted(nums, key=lambda x: sum([int(d) for d in str(x)]))\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 73,
      "score": 8.298597569547805,
      "candidate": "if not nums:\n        return []\n    nums = sorted(nums)\n    sum_of_digits = 0\n    for i in range(len(nums)):\n        sum_of_digits += nums[i]\n        if sum_of_digits == 0:\n            return nums[i:]\n    return nums\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 74,
      "score": 8.2938925966498,
      "candidate": "nums_sum = [0] * len(nums)\n    for i in range(len(nums)):\n        nums_sum[i] = sum(map(int, str(nums[i])))\n\n    sorted_nums = []\n    for i in range(len(nums)):\n        sorted_nums.append(nums[i])\n        if nums_sum[i] == nums_sum[sorted_nums[-1]]:\n            sorted_nums.pop()\n\n    return sorted_nums"
    },
    {
      "rank": 75,
      "score": 8.289838256518838,
      "candidate": "nums.sort()\n    return [nums[i] for i in range(len(nums))]\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 76,
      "score": 8.280613371145561,
      "candidate": "nums.sort()\n    return [nums[i] for i in range(len(nums))]"
    },
    {
      "rank": 77,
      "score": 8.251903304236286,
      "candidate": "nums.sort()\n    return [nums[i] for i in range(len(nums))]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 78,
      "score": 8.248390367878367,
      "candidate": "digits = set(map(int, str(sum(nums))))\n    return sorted(nums, key=lambda num: digits.pop(num))\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 79,
      "score": 8.214125058964552,
      "candidate": "nums_sorted = sorted(nums)\n    return nums_sorted\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 80,
      "score": 8.193565922652176,
      "candidate": "if len(nums) == 0:\n        return []\n\n    nums.sort(key=lambda x: sum(map(int, str(x))))\n    return nums"
    },
    {
      "rank": 81,
      "score": 8.144125099485041,
      "candidate": "return sorted(nums, key=lambda x: sum(int(n) for n in str(x)))\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 82,
      "score": 8.143591138329747,
      "candidate": "sum_of_digits = 0\n    sorted_nums = []\n    for num in nums:\n        sum_of_digits += num\n        sorted_nums.append(sum_of_digits)\n    return sorted_nums"
    },
    {
      "rank": 83,
      "score": 8.121884567141883,
      "candidate": "if len(nums) == 0:\n        return []\n    total_sum = 0\n    sorted_nums = []\n    for num in nums:\n        total_sum += num\n        sorted_nums.append(num)\n        sorted_nums.sort(key=lambda x: (total_sum - x))\n    return sorted_nums"
    },
    {
      "rank": 84,
      "score": 8.105983444291466,
      "candidate": "return sorted(nums, key=lambda x: sum(map(int, str(x))))\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 85,
      "score": 8.093417897505768,
      "candidate": "digits = [int(d) for d in str(sum(nums))]\n    return sorted(nums, key=lambda x: digits.index(x))\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 86,
      "score": 8.040197642997851,
      "candidate": "nums_sum = 0\n    for num in nums:\n        nums_sum += num\n    nums.sort(key=lambda num: nums_sum)\n    return nums\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 87,
      "score": 8.024835682833125,
      "candidate": "# Your code here\n    nums.sort()\n    return nums"
    },
    {
      "rank": 88,
      "score": 7.990432406683839,
      "candidate": "nums.sort(key=lambda x: sum(int(i) for i in str(x)))\n\n    return nums\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 89,
      "score": 7.938028884277233,
      "candidate": "if not nums:\n        return []\n\n    nums.sort(key=lambda x: sum(map(int, str(x))))\n    return nums\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 90,
      "score": 7.915588979966494,
      "candidate": "nums.sort()\n    return nums\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 91,
      "score": 7.868947655733293,
      "candidate": "return sorted(nums, key=lambda num: sum(map(int, str(num))))\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 92,
      "score": 7.84634113240411,
      "candidate": "nums = sorted(nums, key=lambda x: sum(int(n) for n in str(x)))\n    return nums"
    },
    {
      "rank": 93,
      "score": 7.834022619458933,
      "candidate": "sum_list = []\n    for num in nums:\n        sum_list.append(sum(map(int, str(num))))\n    return sorted(nums, key=lambda x: sum_list[x])\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 94,
      "score": 7.780351419995229,
      "candidate": "# Your code here\n\n    if nums == []:\n        return []\n    else:\n        sorted_nums = sorted(nums)\n        sorted_nums_index = [i for i, num in enumerate(nums) if num == sorted_nums[0]]\n        sorted_nums_index = sorted_nums_index + [i for i, num in enumerate(nums) if num > sorted_nums[0]]\n        return sorted_nums_index"
    },
    {
      "rank": 95,
      "score": 7.7320703513377165,
      "candidate": "return sorted(nums, key=lambda x: sum(int(i) for i in str(x)))\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 96,
      "score": 7.705183449260731,
      "candidate": "sorted_nums = []\n\n    for num in nums:\n        sum_of_num = 0\n        for digit in str(num):\n            sum_of_num += int(digit)\n\n        if sum_of_num in sorted_nums:\n            sorted_nums.remove(sum_of_num)\n            sorted_nums.append(num)\n        else:\n            sorted_nums.append(sum_of_num)\n\n    return sorted_nums"
    },
    {
      "rank": 97,
      "score": 7.562924366763077,
      "candidate": "return sorted(nums, key=lambda x: sum([int(d) for d in str(x)]))\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod(verbose=True)"
    },
    {
      "rank": 98,
      "score": 7.464609382504557,
      "candidate": "sum_dict = {}\n    for num in nums:\n        sum_dict[num] = sum_dict.get(num, 0) + num\n    return sorted(sum_dict.keys(), key=lambda k: sum_dict[k])\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 99,
      "score": 7.134571892399572,
      "candidate": "nums.sort(key=lambda x: sum(map(int, str(x))))\n    return nums\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 100,
      "score": 3.0,
      "candidate": "# Your code here\n    return sorted(nums, key=lambda num: sum(map(int, str(num))))\n\n\ndef order_by_points_recursive(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points_recursive([]) == []\n    \"\"\"\n    # Your code here\n    if not nums:\n        return []\n    elif len(nums) == 1:\n        return [nums[0]]\n    else:\n        return [nums[0]] + order_by_points_recursive(nums[1:])\n\n\ndef order_by_points_2(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points_2([]) == []\n    \"\"\"\n    # Your code here\n    if not nums:\n        return []\n    elif len(nums) == 1:\n        return [nums[0]]\n    else:\n        return [nums[0]] + order_by_points_2(nums[1:])\n\n\ndef order_by_points_3(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11"
    }
  ]
}