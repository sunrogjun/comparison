{
  "timestamp": "2025-09-14T11:27:19.699210",
  "method": "improved_llm_judge",
  "judge_model": "codellama/CodeLlama-7b-Python-hf",
  "target_model": "codet5-770m",
  "dataset": "humaneval",
  "problem_number": 26,
  "total_candidates": 100,
  "results": [
    {
      "rank": 1,
      "score": 10.0,
      "candidate": "seen = set()\n    result = []\n    for num in numbers:\n        if num in seen:\n            continue\n        seen.add(num)\n        result.append(num)\n    return result\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 2,
      "score": 10.0,
      "candidate": "seen = set()\n    result = []\n    for number in numbers:\n        if number in seen:\n            continue\n        seen.add(number)\n        result.append(number)\n    return result\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 3,
      "score": 10.0,
      "candidate": "seen = set()\n    return [num for num in numbers if num not in seen]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 4,
      "score": 10.0,
      "candidate": "seen = set()\n    result = []\n    for number in numbers:\n        if number not in seen:\n            seen.add(number)\n            result.append(number)\n    return result\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 5,
      "score": 10.0,
      "candidate": "seen = set()\n    result = []\n    for number in numbers:\n        if number not in seen:\n            seen.add(number)\n            result.append(number)\n    return result\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 6,
      "score": 10.0,
      "candidate": "seen = {}\n    return [x for x in numbers if x not in seen or seen[x] == 0]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 7,
      "score": 10.0,
      "candidate": "seen = set()\n    return [\n        n for n in numbers if n not in seen and not seen.add(n)\n    ]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 8,
      "score": 10.0,
      "candidate": "seen = set()\n    return [number for number in numbers if number not in seen]\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 9,
      "score": 10.0,
      "candidate": "seen = set()\n    return [x for x in numbers if x not in seen and not seen.add(x)]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 10,
      "score": 10.0,
      "candidate": "seen = set()\n    result = []\n    for number in numbers:\n        if number not in seen:\n            result.append(number)\n            seen.add(number)\n    return result\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 11,
      "score": 10.0,
      "candidate": "result = []\n    seen = set()\n    for num in numbers:\n        if num in seen:\n            continue\n        seen.add(num)\n        result.append(num)\n    return result\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 12,
      "score": 10.0,
      "candidate": "seen = set()\n    result = []\n\n    for number in numbers:\n        if number not in seen:\n            seen.add(number)\n            result.append(number)\n\n    return result\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 13,
      "score": 10.0,
      "candidate": "seen = set()\n    return [\n        number for number in numbers if number not in seen and not seen.add(number)\n    ]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 14,
      "score": 10.0,
      "candidate": "seen = set()\n    return [x for x in numbers if x not in seen and not seen.add(x)]\n\n\nif __name__ == '__main__':\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 15,
      "score": 10.0,
      "candidate": "seen = set()\n    return [n for n in numbers if not (n in seen or seen.add(n))]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 16,
      "score": 10.0,
      "candidate": "numbers_set = set(numbers)\n    return [x for x in numbers if x not in numbers_set]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 17,
      "score": 10.0,
      "candidate": "seen = set()\n    return [n for n in numbers if n not in seen and not seen.add(n)]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 18,
      "score": 10.0,
      "candidate": "seen = set()\n    return [num for num in numbers if num not in seen and not seen.add(num)]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 19,
      "score": 9.370583536698913,
      "candidate": "seen = set()\n    result = []\n\n    for number in numbers:\n        if number in seen:\n            continue\n        seen.add(number)\n        result.append(number)\n\n    return result\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 20,
      "score": 9.234050852198141,
      "candidate": "seen = set()\n    result = []\n    for number in numbers:\n        if number not in seen:\n            seen.add(number)\n            result.append(number)\n    return result\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 21,
      "score": 9.226766272351448,
      "candidate": "seen = set()\n    return [n for n in numbers if n not in seen and not seen.add(n)]"
    },
    {
      "rank": 22,
      "score": 9.21346272767743,
      "candidate": "numbers = set(numbers)\n    return [number for number in numbers if numbers.count(number) == 1]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 23,
      "score": 9.205959372648458,
      "candidate": "seen = set()\n    for number in numbers:\n        if number not in seen:\n            seen.add(number)\n            yield number\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 24,
      "score": 9.177268828905222,
      "candidate": "seen = set()\n    seen_add = seen.add\n    return [num for num in numbers if not (num in seen or seen_add(num))]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 25,
      "score": 9.122564458729856,
      "candidate": "seen = set()\n    return [n for n in numbers if n not in seen and not seen.add(n)]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 26,
      "score": 8.973005557553902,
      "candidate": "seen = set()\n    return [x for x in numbers if x not in seen]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 27,
      "score": 8.95994420569242,
      "candidate": "seen = set()\n    return [num for num in numbers if num not in seen]\n\n\nif __name__ == '__main__':\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 28,
      "score": 8.946210893390457,
      "candidate": "seen = set()\n    result = []\n    for number in numbers:\n        if number not in seen:\n            result.append(number)\n            seen.add(number)\n    return result\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 29,
      "score": 8.932217008005624,
      "candidate": "seen = set()\n    return [num for num in numbers if num not in seen and not seen.add(num)]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 30,
      "score": 8.910084504002544,
      "candidate": "return [number for number in numbers if numbers.count(number) > 1]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 31,
      "score": 8.85571690049604,
      "candidate": "seen = set()\n    return [x for x in numbers if x not in seen]\n\n\nif __name__ == \"__main__\":\n    numbers = [1, 2, 3, 2, 4]\n    print(remove_duplicates(numbers))"
    },
    {
      "rank": 32,
      "score": 8.855395696632057,
      "candidate": "seen = set()\n    return [x for x in numbers if x not in seen]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 33,
      "score": 8.850707355641543,
      "candidate": "seen = set()\n    return [num for num in numbers if num not in seen and not seen.add(num)]\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 34,
      "score": 8.8281618090209,
      "candidate": "result = []\n    for number in numbers:\n        if number not in result:\n            result.append(number)\n    return result\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 35,
      "score": 8.81367773444215,
      "candidate": "seen = set()\n    return [x for x in numbers if x not in seen and not seen.add(x)]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 36,
      "score": 8.76828871349479,
      "candidate": "seen = set()\n    return [x for x in numbers if x not in seen]\n\n\nif __name__ == \"__main__\":\n    numbers = [1, 2, 3, 2, 4]\n    print(remove_duplicates(numbers))"
    },
    {
      "rank": 37,
      "score": 8.750282588864879,
      "candidate": "result = []\n    for number in numbers:\n        if number not in result:\n            result.append(number)\n    return result\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 38,
      "score": 8.715724466237427,
      "candidate": "seen = set()\n    return [val for val in numbers if val not in seen]\n\n\nif __name__ == '__main__':\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 39,
      "score": 8.692801520950061,
      "candidate": "seen = set()\n    return [number for number in numbers if number not in seen and not seen.add(number)]\n\n\nif __name__ == \"__main__\":\n    numbers = [1, 2, 3, 2, 4]\n    print(remove_duplicates(numbers))"
    },
    {
      "rank": 40,
      "score": 8.632293453617281,
      "candidate": "seen = set()\n    return [x for x in numbers if x not in seen and not seen.add(x)]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 41,
      "score": 8.625262456968262,
      "candidate": "seen = set()\n    return [num for num in numbers if num not in seen]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 42,
      "score": 8.625142247198651,
      "candidate": "seen = set()\n    result = []\n    for n in numbers:\n        if n not in seen:\n            seen.add(n)\n            result.append(n)\n    return result\n\n\nif __name__ == \"__main__\":\n    numbers = [1, 2, 3, 2, 4]\n    print(remove_duplicates(numbers))"
    },
    {
      "rank": 43,
      "score": 8.616253589228675,
      "candidate": "seen = set()\n    return [num for num in numbers if num not in seen]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 44,
      "score": 8.610076160146226,
      "candidate": "seen = set()\n    result = []\n    for number in numbers:\n        if number not in seen:\n            result.append(number)\n            seen.add(number)\n    return result"
    },
    {
      "rank": 45,
      "score": 8.606486429141842,
      "candidate": "unique_numbers = list(set(numbers))\n    return [number for number in numbers if number not in unique_numbers]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 46,
      "score": 8.60156811074208,
      "candidate": "seen = set()\n    return [x for x in numbers if x not in seen and not seen.add(x)]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 47,
      "score": 8.565425580227462,
      "candidate": "seen = set()\n    return [x for x in numbers if x not in seen and not seen.add(x)]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 48,
      "score": 8.548876241946822,
      "candidate": "seen = set()\n    return [value for value in numbers if value not in seen]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 49,
      "score": 8.542875062379007,
      "candidate": "seen = set()\n    result = []\n    for number in numbers:\n        if number in seen:\n            continue\n        seen.add(number)\n        result.append(number)\n    return result"
    },
    {
      "rank": 50,
      "score": 8.53012858503943,
      "candidate": "result = []\n    seen = set()\n    for number in numbers:\n        if number in seen:\n            continue\n        seen.add(number)\n        result.append(number)\n    return result\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 51,
      "score": 8.499905739299377,
      "candidate": "result = []\n    for number in numbers:\n        if number not in result:\n            result.append(number)\n    return result\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 52,
      "score": 8.490324832712195,
      "candidate": "seen = set()\n    return [num for num in numbers if num not in seen]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 53,
      "score": 8.48796797856353,
      "candidate": "seen = set()\n    result = []\n    for number in numbers:\n        if number not in seen:\n            seen.add(number)\n            result.append(number)\n    return result\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 54,
      "score": 8.478208546788407,
      "candidate": "seen = {}\n    return [x for x in numbers if x not in seen and seen[x] == 0]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 55,
      "score": 8.437695832075478,
      "candidate": "seen = set()\n    result = []\n    for number in numbers:\n        if number not in seen:\n            result.append(number)\n            seen.add(number)\n    return result\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 56,
      "score": 8.426531424889468,
      "candidate": "seen = set()\n    return [number for number in numbers if number not in seen]\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 57,
      "score": 8.408439383654278,
      "candidate": "return list(set(numbers))\n\n\nif __name__ == '__main__':\n    numbers = [1, 2, 3, 2, 4]\n    print(remove_duplicates(numbers))"
    },
    {
      "rank": 58,
      "score": 8.386620303250325,
      "candidate": "seen = set()\n    return [x for x in numbers if x not in seen]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 59,
      "score": 8.375312293858853,
      "candidate": "seen = set()\n    return [x for x in numbers if x not in seen and not seen.add(x)]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 60,
      "score": 8.351614956112536,
      "candidate": "seen = {}\n    return [\n        number for number in numbers if number not in seen or seen[number] == 0\n    ]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 61,
      "score": 8.334608500525688,
      "candidate": "seen = set()\n    return [n for n in numbers if n not in seen and not seen.add(n)]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 62,
      "score": 8.331556294201176,
      "candidate": "seen = set()\n    return [number for number in numbers if number not in seen]"
    },
    {
      "rank": 63,
      "score": 8.327375965969855,
      "candidate": "seen = set()\n    return [num for num in numbers if num not in seen]\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 64,
      "score": 8.327367757082776,
      "candidate": "return [number for number in numbers if numbers.count(number) > 1]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 65,
      "score": 8.298597569547805,
      "candidate": "seen = set()\n    return [x for x in numbers if not (x in seen or seen.add(x))]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 66,
      "score": 8.294940769211511,
      "candidate": "numbers_set = set(numbers)\n    numbers_list = []\n    for item in numbers:\n        if item not in numbers_set:\n            numbers_list.append(item)\n    return numbers_list\n\n\nif __name__ == \"__main__\":\n    numbers = [1, 2, 3, 2, 4]\n    print(remove_duplicates(numbers))"
    },
    {
      "rank": 67,
      "score": 8.2938925966498,
      "candidate": "return [number for number in numbers if numbers.count(number) > 1]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 68,
      "score": 8.289838256518838,
      "candidate": "seen = set()\n    return [x for x in numbers if x not in seen and not seen.add(x)]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 69,
      "score": 8.251903304236286,
      "candidate": "return [num for num in numbers if numbers.count(num) > 1]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 70,
      "score": 8.214125058964552,
      "candidate": "seen = set()\n    return [n for n in numbers if n not in seen and not seen.add(n)]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 71,
      "score": 8.212735598038213,
      "candidate": "seen_numbers = set()\n    new_numbers = []\n    for number in numbers:\n        if number not in seen_numbers:\n            seen_numbers.add(number)\n            new_numbers.append(number)\n    return new_numbers"
    },
    {
      "rank": 72,
      "score": 8.211579567659316,
      "candidate": "seen = set()\n    seen_add = seen.add\n    return [\n        value\n        for value in numbers\n        if value not in seen and value not in seen_add(value)\n    ]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 73,
      "score": 8.209707251476969,
      "candidate": "seen = set()\n    return [x for x in numbers if x not in seen and not seen.add(x)]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 74,
      "score": 8.2048573255218,
      "candidate": "seen = set()\n    return [number for number in numbers if number not in seen]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 75,
      "score": 8.172253082181854,
      "candidate": "seen_numbers = set()\n    result = []\n    for number in numbers:\n        if number not in seen_numbers:\n            seen_numbers.add(number)\n            result.append(number)\n    return result\n\n\nif __name__ == \"__main__\":\n    print(remove_duplicates([1, 2, 3, 2, 4]))"
    },
    {
      "rank": 76,
      "score": 8.163300679823958,
      "candidate": "seen = set()\n    result = []\n    for number in numbers:\n        if number not in seen:\n            seen.add(number)\n            result.append(number)\n    return result\n\n\nif __name__ == \"__main__\":\n    numbers = [1, 2, 3, 2, 4]\n    print(remove_duplicates(numbers))"
    },
    {
      "rank": 77,
      "score": 8.144125099485041,
      "candidate": "seen = set()\n    return [number for number in numbers if number not in seen]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 78,
      "score": 8.143591138329747,
      "candidate": "return [\n        num for num in numbers if numbers.count(num) > 1\n    ]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 79,
      "score": 8.121884567141883,
      "candidate": "seen = set()\n    return [x for x in numbers if x not in seen and not seen.add(x)]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 80,
      "score": 8.105983444291466,
      "candidate": "seen = set()\n    result = []\n    for number in numbers:\n        if number not in seen:\n            result.append(number)\n            seen.add(number)\n    return result"
    },
    {
      "rank": 81,
      "score": 8.08452234024709,
      "candidate": "seen = set()\n    return [n for n in numbers if n not in seen]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 82,
      "score": 8.024835682833125,
      "candidate": "if numbers is None or len(numbers) == 0:\n        return []\n\n    seen = set()\n    return [x for x in numbers if x not in seen and not seen.add(x)]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 83,
      "score": 7.990432406683839,
      "candidate": "seen = {}\n    for num in numbers:\n        if num in seen:\n            seen.pop(num)\n        else:\n            seen[num] = True\n    return list(seen.keys())\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 84,
      "score": 7.938028884277233,
      "candidate": "seen = set()\n    return [x for x in numbers if x not in seen and not seen.add(x)]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 85,
      "score": 7.915588979966494,
      "candidate": "seen = set()\n    return [x for x in numbers if x not in seen and not seen.add(x)]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 86,
      "score": 7.8912769574414305,
      "candidate": "seen = set()\n    return [x for x in numbers if x not in seen]"
    },
    {
      "rank": 87,
      "score": 7.868947655733293,
      "candidate": "numbers_set = set(numbers)\n    return [number for number in numbers if number not in numbers_set]\n\n\nif __name__ == \"__main__\":\n    numbers = [1, 2, 3, 2, 4]\n    print(remove_duplicates(numbers))"
    },
    {
      "rank": 88,
      "score": 7.84634113240411,
      "candidate": "numbers.sort()\n    result = []\n    for number in numbers:\n        if number not in result:\n            result.append(number)\n    return result\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 89,
      "score": 7.834022619458933,
      "candidate": "new_numbers = []\n    for number in numbers:\n        if number not in new_numbers:\n            new_numbers.append(number)\n    return new_numbers\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 90,
      "score": 7.780351419995229,
      "candidate": "seen = set()\n    result = []\n    for num in numbers:\n        if num not in seen:\n            seen.add(num)\n            result.append(num)\n    return result\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 91,
      "score": 7.738292593776799,
      "candidate": "seen = set()\n    return [val for val in numbers if val not in seen]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 92,
      "score": 7.7320703513377165,
      "candidate": "seen_numbers = set()\n    new_numbers = []\n    for number in numbers:\n        if number not in seen_numbers:\n            seen_numbers.add(number)\n            new_numbers.append(number)\n    return new_numbers\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 93,
      "score": 7.705183449260731,
      "candidate": "seen = set()\n    return [x for x in numbers if x not in seen and not seen.add(x)]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 94,
      "score": 7.5819855281879285,
      "candidate": "return [x for x in numbers if numbers.count(x) > 1]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 95,
      "score": 7.562924366763077,
      "candidate": "seen = set()\n    result = []\n\n    for number in numbers:\n        if number not in seen:\n            result.append(number)\n            seen.add(number)\n\n    return result\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 96,
      "score": 7.4878043221155455,
      "candidate": "seen_numbers = {}\n    return [seen_numbers.get(n, n) for n in numbers if n not in seen_numbers]\n\n\nif __name__ == \"__main__\":\n    numbers = [1, 2, 3, 2, 4]\n    print(remove_duplicates(numbers))"
    },
    {
      "rank": 97,
      "score": 7.464609382504557,
      "candidate": "seen = set()\n    result = []\n    for number in numbers:\n        if number not in seen:\n            seen.add(number)\n            result.append(number)\n    return result\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 98,
      "score": 7.4506599871439985,
      "candidate": "result = []\n    seen = set()\n\n    for number in numbers:\n        if number in seen:\n            continue\n        seen.add(number)\n        result.append(number)\n\n    return result\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 99,
      "score": 7.134571892399572,
      "candidate": "seen = set()\n    return [val for val in numbers if val not in seen and not seen.add(val)]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 100,
      "score": 3.0,
      "candidate": "seen = {}\n    return [\n        x for x in numbers if x not in seen or seen[x] == 0\n    ]  # noqa"
    }
  ]
}