{
  "timestamp": "2025-09-14T11:26:53.789501",
  "method": "improved_llm_judge",
  "judge_model": "codellama/CodeLlama-7b-Python-hf",
  "target_model": "codet5-770m",
  "dataset": "humaneval",
  "problem_number": 25,
  "total_candidates": 100,
  "results": [
    {
      "rank": 1,
      "score": 10.0,
      "candidate": "factors = []\n    if n < 2:\n        return factors\n    for i in range(2, n):\n        if n % i == 0:\n            factors.append(i)\n            factors.append(n // i)\n    return factors"
    },
    {
      "rank": 2,
      "score": 10.0,
      "candidate": "factors = []\n    for i in range(1, n + 1):\n        if n % i == 0:\n            factors.append(i)\n    return factors\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 3,
      "score": 10.0,
      "candidate": "factors = [1]\n    for i in range(2, n):\n        if n % i == 0:\n            factors.append(i)\n            factors.append(n // i)\n    return factors"
    },
    {
      "rank": 4,
      "score": 10.0,
      "candidate": "factors = []\n    for i in range(2, n):\n        if n % i == 0:\n            factors.append(i)\n    return factors\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 5,
      "score": 10.0,
      "candidate": "factors = []\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            factors.append(i)\n    return factors\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 6,
      "score": 10.0,
      "candidate": "factors = []\n    for i in range(1, n + 1):\n        if n % i == 0:\n            factors.append(i)\n    return factors"
    },
    {
      "rank": 7,
      "score": 10.0,
      "candidate": "if n <= 1:\n        return []\n    factors = []\n    for i in range(2, n):\n        while n % i == 0:\n            factors.append(i)\n            n = n / i\n    if n > 1:\n        factors.append(n)\n    return factors\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 8,
      "score": 10.0,
      "candidate": "factors = [1] * (n + 1)\n    for i in range(2, int(n ** 0.5) + 1):\n        if factors[i] == 1:\n            for j in range(i * i, n + 1, i):\n                factors[j] = 0\n    return factors\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 9,
      "score": 10.0,
      "candidate": "factors = []\n    for i in range(1, n + 1):\n        if n % i == 0:\n            factors.append(i)\n    return factors\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 10,
      "score": 10.0,
      "candidate": "factors = [1]\n    for i in range(2, n):\n        if n % i == 0:\n            factors.append(i)\n    return factors\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 11,
      "score": 10.0,
      "candidate": "factors = []\n    for i in range(1, n+1):\n        if n % i == 0:\n            factors.append(i)\n    return factors\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 12,
      "score": 10.0,
      "candidate": "factors = []\n    for i in range(2, n):\n        if n % i == 0:\n            factors.append(i)\n    return factors\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 13,
      "score": 10.0,
      "candidate": "factors = []\n    for i in range(1, n):\n        if n % i == 0:\n            factors.append(i)\n    return factors"
    },
    {
      "rank": 14,
      "score": 10.0,
      "candidate": "factors = []\n    for i in range(1, n + 1):\n        if n % i == 0:\n            factors.append(i)\n    return factors\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 15,
      "score": 10.0,
      "candidate": "factors = []\n    for i in range(1, n + 1):\n        if n % i == 0:\n            factors.append(i)\n    return factors\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 16,
      "score": 10.0,
      "candidate": "factors = []\n    for i in range(1, n+1):\n        if n % i == 0:\n            factors.append(i)\n    return factors\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 17,
      "score": 10.0,
      "candidate": "factors = []\n    for i in range(1, n + 1):\n        if n % i == 0:\n            factors.append(i)\n    return factors\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 18,
      "score": 10.0,
      "candidate": "if n <= 1:\n        return []\n    factors = []\n    while n > 1:\n        if n % 2 == 0:\n            factors.append(2)\n            n = n / 2\n        else:\n            factors.append(n)\n            n = n * 3 + 1\n    return factors\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 19,
      "score": 10.0,
      "candidate": "factors = []\n\n    for i in range(1, n + 1):\n        if n % i == 0:\n            factors.append(i)\n\n    return factors\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 20,
      "score": 10.0,
      "candidate": "factors = []\n    for i in range(1, n + 1):\n        if n % i == 0:\n            factors.append(i)\n    return factors\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 21,
      "score": 10.0,
      "candidate": "factors = [1] * n\n    for i in range(2, n):\n        if i * i > n:\n            break\n        while n % i == 0:\n            factors[i] += 1\n            n //= i\n    return factors\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 22,
      "score": 10.0,
      "candidate": "factorization = []\n    for i in range(1, n + 1):\n        if n % i == 0:\n            factorization.append(i)\n    return factorization\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 23,
      "score": 10.0,
      "candidate": "factors = [1] * n\n    for i in range(2, n):\n        if n % i == 0:\n            factors[i] = 0\n            while n % i == 0:\n                factors[i] += 1\n                n = n / i\n    return factors\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 24,
      "score": 10.0,
      "candidate": "prime_factors = [2]\n    for i in range(3, n, 2):\n        if n % i == 0:\n            prime_factors.append(i)\n    return prime_factors\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 25,
      "score": 10.0,
      "candidate": "factors = []\n    for i in range(1, n + 1):\n        if n % i == 0:\n            factors.append(i)\n    return factors\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 26,
      "score": 10.0,
      "candidate": "prime_factors = []\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            prime_factors.append(i)\n    return prime_factors\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 27,
      "score": 10.0,
      "candidate": "factors = []\n    for i in range(1, n + 1):\n        if n % i == 0:\n            factors.append(i)\n    return factors\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 28,
      "score": 10.0,
      "candidate": "factors = []\n    for i in range(1, n + 1):\n        if n % i == 0:\n            factors.append(i)\n    return factors\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 29,
      "score": 10.0,
      "candidate": "factors = []\n    for i in range(2, n):\n        if n % i == 0:\n            factors.append(i)\n            while n % i == 0:\n                factors.append(i)\n    return factors\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 30,
      "score": 10.0,
      "candidate": "factors = []\n    for i in range(2, n):\n        if n % i == 0:\n            factors.append(i)\n    return factors\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 31,
      "score": 10.0,
      "candidate": "factors = []\n    for i in range(2, n + 1):\n        if n % i == 0:\n            factors.append(i)\n    return factors\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 32,
      "score": 10.0,
      "candidate": "factors = []\n    for i in range(2, n):\n        if n % i == 0:\n            factors.append(i)\n    return factors\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 33,
      "score": 10.0,
      "candidate": "factors = []\n    for i in range(1, n + 1):\n        if n % i == 0:\n            factors.append(i)\n    return factors"
    },
    {
      "rank": 34,
      "score": 10.0,
      "candidate": "factors = []\n    for i in range(1, n):\n        if n % i == 0:\n            factors.append(i)\n    return factors\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 35,
      "score": 10.0,
      "candidate": "factors = []\n    for i in range(2, n + 1):\n        if n % i == 0:\n            factors.append(i)\n    return factors"
    },
    {
      "rank": 36,
      "score": 10.0,
      "candidate": "factors = [1] * n\n    for i in range(2, n):\n        if factors[i] == 1:\n            for j in range(2, n):\n                if n % j == 0:\n                    factors[j] = 0\n                    break\n    return factors\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 37,
      "score": 10.0,
      "candidate": "factors = [n]\n    for i in range(2, n):\n        if n % i == 0:\n            factors.append(i)\n            factors.append(n // i)\n    return factors\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 38,
      "score": 10.0,
      "candidate": "factors = []\n    for i in range(2, n):\n        if n % i == 0:\n            factors.append(i)\n            factors.append(n // i)\n    return factors\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 39,
      "score": 10.0,
      "candidate": "factors = []\n    for i in range(2, n):\n        if n % i == 0:\n            factors.append(i)\n    return factors\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 40,
      "score": 8.0,
      "candidate": "factors = []\n    for i in range(1, int(n ** 0.5) + 1):\n        if n % i == 0:\n            factors.append(i)\n            factors.append(n // i)\n    return factors"
    },
    {
      "rank": 41,
      "score": 8.0,
      "candidate": "factors = [1] * n\n    for i in range(2, n):\n        if n % i == 0:\n            factors[i] += 1\n    return factors"
    },
    {
      "rank": 42,
      "score": 8.0,
      "candidate": "return [i for i in range(2, n) if n % i == 0]"
    },
    {
      "rank": 43,
      "score": 8.0,
      "candidate": "factors = []\n    for i in range(2, n):\n        if n % i == 0:\n            factors.append(i)\n            while n % i == 0:\n                factors.append(i)\n                n /= i\n    return factors"
    },
    {
      "rank": 44,
      "score": 8.0,
      "candidate": "return [i for i in range(2, int(n ** 0.5) + 1) if n % i == 0]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 45,
      "score": 8.0,
      "candidate": "factors = [1]\n    for i in range(2, n):\n        if n % i == 0:\n            factors.append(i)\n            factors.append(n // i)\n    return factors"
    },
    {
      "rank": 46,
      "score": 8.0,
      "candidate": "if n <= 1:\n        return [n]\n    factors = []\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            factors.append(i)\n            factors.append(n // i)\n    return factors"
    },
    {
      "rank": 47,
      "score": 8.0,
      "candidate": "return [\n        i\n        for i in range(1, n // 2 + 1)\n        if n % i == 0\n    ]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 48,
      "score": 8.0,
      "candidate": "factors = []\n    for i in range(2, n):\n        if n % i == 0:\n            factors.append(i)\n            while n % i == 0:\n                factors.append(i)\n                n = n // i\n    return factors"
    },
    {
      "rank": 49,
      "score": 1.5,
      "candidate": "if n <= 1:\n        return []\n    factors = []\n    for i in range(2, int(n ** 0.5) + 1):\n        while n % i == 0:\n            factors.append(i)\n            n /= i\n    if n > 2:\n        factors.append(n)\n    return factors\n\n\ndef factorize_iterative(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize_iterative(8)\n    [2, 2, 2]\n    >>> factorize_iterative(25)\n    [5, 5]\n    >>> factorize_iterative(70)\n    [2, 5, 7]\n    \"\"\"\n    if n <= 1:\n        return []\n    factors = []\n    for i in range(2, int(n ** 0.5) + 1):\n        while n % i == 0:\n            factors.append(i)\n            n /= i\n    if n > 2:\n        factors.append(n)\n    return factors\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 50,
      "score": 1.0,
      "candidate": "factors = [1] * n\n    for i in range(2, n):\n        if factors[i] == 1:\n            for j in range(i * i, n, i):\n                factors[j] = 0\n    return factors\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 51,
      "score": 1.0,
      "candidate": "factors = []\n    for i in range(2, n + 1):\n        if n % i == 0:\n            factors.append(i)\n            factors.append(n // i)\n    return factors\n\n\nif __name__ == \"__main__\":\n    print(factorize(8))\n    print(factorize(25))\n    print(factorize(70))"
    },
    {
      "rank": 52,
      "score": 1.0,
      "candidate": "factors = [1]\n    while n > 1:\n        if n % 2 == 0:\n            factors.append(2)\n            n //= 2\n        else:\n            factors.append(n)\n            n = n // 2\n    return factors\n\n\ndef factorize_recursive(n: int, factors: List[int]) -> List[int]:\n    \"\"\" Recursive factorization.\n    >>> factorize_recursive(8, [2, 2, 2])\n    [2, 2, 2]\n    >>> factorize_recursive(25, [5, 5])\n    [5, 5]\n    >>> factorize_recursive(70, [2, 5, 7])\n    [2, 5, 7]\n    \"\"\"\n    if n == 1:\n        return factors\n    elif n < 2:\n        return []\n    else:\n        factors.append(n)\n        return factorize_recursive(n, factors)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 53,
      "score": 1.0,
      "candidate": "factors = []\n    i = 2\n    while i <= n // 2:\n        if n % i == 0:\n            factors.append(i)\n            factors.append(n // i)\n        i += 1\n    return factors\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 54,
      "score": 1.0,
      "candidate": "factors = []\n    for i in range(1, n + 1):\n        if n % i == 0:\n            factors.append(i)\n    return factors\n\n\ndef main():\n    import doctest\n\n    doctest.testmod()\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 55,
      "score": 1.0,
      "candidate": "factors = []\n    for i in range(2, n + 1):\n        while n % i == 0:\n            factors.append(i)\n            n = int(n / i)\n    return factors\n\n\nif __name__ == '__main__':\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 56,
      "score": 1.0,
      "candidate": "factors = [1]\n    for i in range(2, n):\n        if n % i == 0:\n            factors.append(i)\n            factors.append(n // i)\n    return factors"
    },
    {
      "rank": 57,
      "score": 1.0,
      "candidate": "return [x for x in range(2, n + 1) if n % x == 0]\n\n\ndef factorize_recursive(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors.\n    >>> factorize_recursive(8)\n    [2, 2, 2]\n    >>> factorize_recursive(25)\n    [5, 5]\n    >>> factorize_recursive(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 1:\n        return [2]\n    factors = []\n    for i in factorize_recursive(n // 2):\n        if n % i == 0:\n            factors.append(i)\n    factors.append(n)\n    return factors\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 58,
      "score": 1.0,
      "candidate": "factors = []\n    if n <= 1:\n        return factors\n    for i in range(2, n):\n        if n % i == 0:\n            factors.append(i)\n    return factors\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 59,
      "score": 1.0,
      "candidate": "factors = [1] * n\n    for i in range(2, n):\n        if factors[i] == 1:\n            for j in range(2, int(n / i) + 1):\n                if i % j == 0:\n                    factors[i * j] = 0\n    return factors\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 60,
      "score": 1.0,
      "candidate": "factors = []\n    for i in range(2, int(n**0.5)+1):\n        if n % i == 0:\n            factors.append(i)\n    return factors\n\n\ndef main():\n    print(factorize(int(input().strip())))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 61,
      "score": 1.0,
      "candidate": "factors = []\n    for i in range(1, n + 1):\n        if n % i == 0:\n            factors.append(i)\n    return factors\n\n\ndef main():\n    print(factorize(8))\n    print(factorize(25))\n    print(factorize(70))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 62,
      "score": 1.0,
      "candidate": "factors = []\n    for i in range(1, n):\n        if n % i == 0:\n            factors.append(i)\n    return factors\n\n\ndef main():\n    print(factorize(8))\n    print(factorize(25))\n    print(factorize(70))\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 63,
      "score": 1.0,
      "candidate": "factors = []\n    for i in range(1, n + 1):\n        if n % i == 0:\n            factors.append(i)\n    return factors\n\n\nif __name__ == \"__main__\":\n    print(factorize(8))\n    print(factorize(25))\n    print(factorize(70))"
    },
    {
      "rank": 64,
      "score": 1.0,
      "candidate": "factorization = []\n    while n > 1:\n        if n % 2 == 0:\n            factorization.append(2)\n            n = n / 2\n        elif n % 3 == 0:\n            factorization.append(3)\n            n = n / 3\n        else:\n            factorization.append(n)\n            n = n / 2\n    return factorization\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 65,
      "score": 1.0,
      "candidate": "factors = []\n    for i in range(1, n + 1):\n        if n % i == 0:\n            factors.append(i)\n    return factors"
    },
    {
      "rank": 66,
      "score": 1.0,
      "candidate": "if n < 2:\n        return []\n    factors = [1] * (n + 1)\n    factors[0] = 0\n    factors[1] = 0\n    for i in range(2, n + 1):\n        if factors[i] == 1:\n            for j in range(2, i):\n                if i % j == 0:\n                    factors[i] = 0\n    return factors[2:]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 67,
      "score": 1.0,
      "candidate": "result: List[int] = []\n    for i in range(2, n):\n        if n % i == 0:\n            result.append(i)\n            while n % i == 0:\n                result.append(i)\n                n //= i\n    return result\n\n\nif __name__ == \"__main__\":\n    print(factorize(int(input())))"
    },
    {
      "rank": 68,
      "score": 1.0,
      "candidate": "if n < 2:\n        return [n]\n\n    factors = []\n    for i in range(2, n):\n        if n % i == 0:\n            factors.append(i)\n            factors.extend(factorize(n // i))\n\n    return factors\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 69,
      "score": 1.0,
      "candidate": "factors = []\n    for i in range(1, n + 1):\n        if n % i == 0:\n            factors.append(i)\n    return factors\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 70,
      "score": 1.0,
      "candidate": "if n == 0:\n        return []\n    factors = [2]\n    for i in range(2, int(n ** 0.5) + 1):\n        while n % i == 0:\n            factors.append(i)\n            n //= i\n    if n > 2:\n        factors.append(n)\n    return factors"
    },
    {
      "rank": 71,
      "score": 1.0,
      "candidate": "factors = [n]\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            factors.append(i)\n    return factors\n\n\nif __name__ == \"__main__\":\n    print(factorize(8))\n    print(factorize(25))\n    print(factorize(70))"
    },
    {
      "rank": 72,
      "score": 1.0,
      "candidate": "factors = []\n    for i in range(2, n + 1):\n        if n % i == 0:\n            factors.append(i)\n    return factors\n\n\ndef main():\n    number = int(input(\"Enter a number to factorize: \"))\n    factors = factorize(number)\n    print(\"Factors: \", factors)\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 73,
      "score": 1.0,
      "candidate": "factors = []\n    for i in range(1, n+1):\n        if n % i == 0:\n            factors.append(i)\n    return factors\n\n\ndef main():\n    print(factorize(8))\n    print(factorize(25))\n    print(factorize(70))\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 74,
      "score": 1.0,
      "candidate": "factors = [1] * n\n    factors[0] = 0\n    factors[1] = 1\n    for i in range(2, n):\n        if factors[i] == 1:\n            for j in range(2, i):\n                if i % j == 0:\n                    factors[i] = 0\n    return factors\n\n\ndef main():\n    n = int(input())\n    print(factorize(n))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 75,
      "score": 1.0,
      "candidate": "factors = []\n    for i in range(2, n):\n        if n % i == 0:\n            factors.append(i)\n    return factors\n\n\ndef main():\n    import doctest\n\n    doctest.testmod()\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 76,
      "score": 1.0,
      "candidate": "factors = []\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            factors.append(i)\n    return factors\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 77,
      "score": 1.0,
      "candidate": "factors = []\n    for i in range(2, n + 1):\n        if n % i == 0:\n            factors.append(i)\n    return factors\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 78,
      "score": 1.0,
      "candidate": "factors = []\n    for i in range(1, n):\n        if n % i == 0:\n            factors.append(i)\n            factors.append(n // i)\n    return factors\n\n\ndef factorize_recursive(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize_recursive(8)\n    [2, 2, 2]\n    >>> factorize_recursive(25)\n    [5, 5]\n    >>> factorize_recursive(70)\n    [2, 5, 7]\n    \"\"\"\n    if n == 1:\n        return []\n    factors = [n]\n    for i in range(2, n):\n        if n % i == 0:\n            factors.append(i)\n            factors.append(n // i)\n    return factors\n\n\ndef factorize_recursive_iterative(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize_recursive_iterative(8)\n    [2, 2, 2]\n    >>> factorize_recursive_iterative(25)\n    [5, 5]\n    >>> factorize_recursive_iterative(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = [n]\n    for i in range(2, n):\n        if n % i == 0:\n            factors.append(i)\n            factors.append(n // i)\n    return factors"
    },
    {
      "rank": 79,
      "score": 1.0,
      "candidate": "factors = []\n    i = 2\n    while i * i <= n:\n        if n % i == 0:\n            factors.append(i)\n            factors.append(n // i)\n            n //= i\n    if n > 1:\n        factors.append(n)\n    return factors\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 80,
      "score": 1.0,
      "candidate": "factors = []\n    for i in range(1, int(n ** 0.5) + 1):\n        if n % i == 0:\n            factors.append(i)\n    return factors\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 81,
      "score": 1.0,
      "candidate": "factors = []\n    for i in range(1, n + 1):\n        if n % i == 0:\n            factors.append(i)\n            while n % i == 0:\n                factors.append(i)\n    return factors\n\n\ndef main():\n    import doctest\n\n    doctest.testmod()\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 82,
      "score": 1.0,
      "candidate": "if n <= 1:\n        return []\n    result = []\n    for i in range(2, int(n ** 0.5) + 1):\n        while n % i == 0:\n            result.append(i)\n            n = n // i\n    if n!= 1:\n        result.append(n)\n    return result\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 83,
      "score": 1.0,
      "candidate": "factors = []\n\n    for i in range(1, int(n**0.5)+1):\n        if n % i == 0:\n            factors.append(i)\n            factors.append(n // i)\n\n    return factors\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 84,
      "score": 1.0,
      "candidate": "factors = [1]\n    for i in range(2, n):\n        if n % i == 0:\n            factors.append(i)\n    return factors\n\n\ndef is_prime(n: int) -> bool:\n    \"\"\" Return True if n is prime.\n    >>> is_prime(8)\n    True\n    >>> is_prime(25)\n    True\n    >>> is_prime(70)\n    True\n    \"\"\"\n    if n <= 1:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    for i in range(5, int(n**0.5)+1, 2):\n        if n % i == 0:\n            return False\n    return True"
    },
    {
      "rank": 85,
      "score": 1.0,
      "candidate": "factors = []\n    for i in range(2, int(n ** 0.5) + 1):\n        while n % i == 0:\n            factors.append(i)\n            n /= i\n    factors.append(n)\n    return factors\n\n\ndef main():\n    import doctest\n\n    doctest.testmod()\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 86,
      "score": 1.0,
      "candidate": "factors = []\n    for i in range(1, n + 1):\n        if n % i == 0:\n            factors.append(i)\n    return factors\n\n\ndef main():\n    print(factorize(8))\n    print(factorize(25))\n    print(factorize(70))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 87,
      "score": 1.0,
      "candidate": "factors = []\n    for i in range(2, n):\n        if n % i == 0:\n            factors.append(i)\n            factors.append(n // i)\n    return factors\n\n\nif __name__ == \"__main__\":\n    print(factorize(int(input(\"Enter number: \"))))"
    },
    {
      "rank": 88,
      "score": 1.0,
      "candidate": "if n <= 2:\n        return []\n    factors = [2]\n    for i in range(3, n, 2):\n        if n % i == 0:\n            factors.append(i)\n            factors.append(n // i)\n    return factors\n\n\ndef main():\n    import doctest\n\n    doctest.testmod()\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 89,
      "score": 1.0,
      "candidate": "if n <= 1:\n        return []\n    factors = []\n    for i in range(1, n + 1):\n        if n % i == 0:\n            factors.append(i)\n    return factors\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 90,
      "score": 1.0,
      "candidate": "factors = [1]\n    for i in range(2, n):\n        if n % i == 0:\n            factors.append(i)\n            factors.append(n // i)\n    return factors\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 91,
      "score": 1.0,
      "candidate": "factors = []\n\n    if n <= 1:\n        return factors\n\n    for i in range(2, n + 1):\n        if n % i == 0:\n            factors.append(i)\n            factors.append(n // i)\n\n    return factors\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 92,
      "score": 1.0,
      "candidate": "if n < 2:\n        return []\n    if n == 2:\n        return [2]\n    factors = []\n    for i in range(2, n):\n        if n % i == 0:\n            factors.append(i)\n    return factors\n\n\nif __name__ == \"__main__\":\n    print(factorize(int(input())))"
    },
    {
      "rank": 93,
      "score": 1.0,
      "candidate": "prime_factors = [2]\n    for i in range(3, int(n**0.5) + 1, 2):\n        while n % i == 0:\n            prime_factors.append(i)\n            n //= i\n    return prime_factors\n\n\nif __name__ == \"__main__\":\n    print(factorize(8))\n    print(factorize(25))\n    print(factorize(70))"
    },
    {
      "rank": 94,
      "score": 1.0,
      "candidate": "return [n // i for i in range(2, n + 1)]\n\n\nif __name__ == \"__main__\":\n    n = int(input())\n    print(*factorize(n))"
    },
    {
      "rank": 95,
      "score": 1.0,
      "candidate": "factors = []\n    for i in range(2, n):\n        if n % i == 0:\n            factors.append(i)\n            while n % i == 0:\n                factors.append(i)\n                n //= i\n    return factors\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 96,
      "score": 1.0,
      "candidate": "factors = []\n    for i in range(2, n):\n        if n % i == 0:\n            factors.append(i)\n            factors.append(n // i)\n    return factors\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 97,
      "score": 1.0,
      "candidate": "factors = []\n    for i in range(1, n + 1):\n        if n % i == 0:\n            factors.append(i)\n    return factors\n\n\ndef is_prime(n: int) -> bool:\n    \"\"\" Return True if n is prime, False otherwise\n    >>> is_prime(8)\n    True\n    >>> is_prime(25)\n    False\n    >>> is_prime(70)\n    False\n    \"\"\"\n    if n < 2:\n        return False\n    for i in range(2, n):\n        if n % i == 0:\n            return False\n    return True\n\n\ndef is_prime_list(n: List[int]) -> bool:\n    \"\"\" Return True if n is prime, False otherwise\n    >>> is_prime_list([1, 2, 3])\n    True\n    >>> is_prime_list([1, 2, 3, 4])\n    False\n    >>> is_prime_list([1, 2, 3, 4, 5])\n    True\n    >>> is_prime_list([1, 2, 3, 4, 5, 6])\n    False\n    \"\"\"\n    for i in range(len(n)):\n        if n[i] == 1:\n            return False\n    return True\n\n\ndef main():\n    print(factorize(8))\n    print(factorize(25))\n    print(factorize(70))\n    print(is_prime(8))\n    print(is_prime(25))\n    print(is_prime(70))\n    print(is_prime_list([1, 2, 3]))\n    print(is_prime_list([1, 2, 3, 4]))\n    print(is_prime_list([1, 2, 3, 4, 5]))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 98,
      "score": 1.0,
      "candidate": "factors = []\n    for i in range(1, n):\n        if n % i == 0:\n            factors.append(i)\n    return factors\n\n\ndef is_prime(n: int) -> bool:\n    \"\"\" Return True if given integer is prime.\n    >>> is_prime(8)\n    True\n    >>> is_prime(25)\n    False\n    >>> is_prime(70)\n    False\n    \"\"\"\n    if n < 2:\n        return False\n    elif n == 2:\n        return True\n    elif n == 3:\n        return True\n    elif n == 5:\n        return True\n    elif n % 2 == 0:\n        return False\n    elif n % 3 == 0:\n        return False\n    else:\n        for i in range(5, n, 2):\n            if n % i == 0:\n                return False\n        return True\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 99,
      "score": 1.0,
      "candidate": "factors = []\n    for i in range(1, n + 1):\n        if n % i == 0:\n            factors.append(i)\n    return factors\n\n\ndef main() -> None:\n    print(factorize(8))\n    print(factorize(25))\n    print(factorize(70))\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 100,
      "score": 1.0,
      "candidate": "factors = []\n    for i in range(1, n + 1):\n        if n % i == 0:\n            factors.append(i)\n    return factors\n\n\ndef main():\n    print(factorize(8))\n    print(factorize(25))\n    print(factorize(70))\n\n\nif __name__ == \"__main__\":\n    main()"
    }
  ]
}