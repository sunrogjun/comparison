{
  "timestamp": "2025-09-14T12:24:24.930812",
  "method": "improved_llm_judge",
  "judge_model": "codellama/CodeLlama-7b-Python-hf",
  "target_model": "codet5-770m",
  "dataset": "humaneval",
  "problem_number": 155,
  "total_candidates": 100,
  "results": [
    {
      "rank": 1,
      "score": 10.0,
      "candidate": "even = 0\n    odd = 0\n    for i in str(num):\n        if int(i) % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n    return even, odd\n\n\ndef test_function():\n    assert even_odd_count(-12) == (1, 1)\n    assert even_odd_count(123) == (1, 2)\n    assert even_odd_count(0) == (0, 0)\n\n\nif __name__ == '__main__':\n    test_function()"
    },
    {
      "rank": 2,
      "score": 10.0,
      "candidate": "if num < 0:\n        num = -num\n\n    even_count = 0\n    odd_count = 0\n\n    while num > 0:\n        odd_count += 1\n        if num % 2 == 0:\n            even_count += 1\n        num = num // 2\n\n    return (even_count, odd_count)\n\n\nif __name__ == \"__main__\":\n    print(even_odd_count(-12))\n    print(even_odd_count(123))"
    },
    {
      "rank": 3,
      "score": 10.0,
      "candidate": "even_count = 0\n    odd_count = 0\n    if num > 0:\n        even_count = num % 2\n    if num < 0:\n        odd_count = num % 2\n    return (even_count, odd_count)\n\nprint(even_odd_count(-12))\nprint(even_odd_count(123))"
    },
    {
      "rank": 4,
      "score": 10.0,
      "candidate": "even = 0\n    odd = 0\n    for digit in str(num):\n        if digit == '0':\n            even += 1\n        else:\n            odd += 1\n    return (even, odd)\n\n\ndef main():\n    num = int(input(\"Enter a number: \"))\n    print(even_odd_count(num))\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 5,
      "score": 10.0,
      "candidate": "count = 0\n    for i in str(num):\n        if i == '0':\n            count += 1\n        else:\n            break\n    return (count, count)\n\n\ndef main():\n    print(even_odd_count(-12))\n    print(even_odd_count(123))\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 6,
      "score": 10.0,
      "candidate": "even = 0\n    odd = 0\n\n    if num < 0:\n        num = abs(num)\n\n    while num > 0:\n        if num % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n\n        num //= 2\n\n    return (even, odd)\n\n\nif __name__ == \"__main__\":\n    print(even_odd_count(123))\n    print(even_odd_count(-12))"
    },
    {
      "rank": 7,
      "score": 10.0,
      "candidate": "even_count = 0\n    odd_count = 0\n    if num == 0:\n        return (0, 0)\n    while num > 0:\n        digit = num % 10\n        if digit == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n        num = num // 10\n    return (even_count, odd_count)\n\n\ndef main():\n    print(even_odd_count(-12))\n    print(even_odd_count(123))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 8,
      "score": 10.0,
      "candidate": "even_count = 0\n    odd_count = 0\n    if num > 0:\n        for digit in str(num):\n            if digit == '0':\n                even_count += 1\n            else:\n                odd_count += 1\n    return (even_count, odd_count)\n\n\nprint(even_odd_count(-12))\nprint(even_odd_count(123))"
    },
    {
      "rank": 9,
      "score": 10.0,
      "candidate": "odd_count = 0\n    even_count = 0\n    for digit in str(num):\n        if digit % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    return (even_count, odd_count)\n\n\ndef main():\n    print(even_odd_count(-12))\n    print(even_odd_count(123))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 10,
      "score": 10.0,
      "candidate": "even_num = 0\n    odd_num = 0\n\n    if num > 0:\n        while num >= 10:\n            even_num += 1\n            num = num // 10\n    else:\n        while num < 0:\n            odd_num += 1\n            num = num * 10\n\n    return (even_num, odd_num)\n\n\nprint(even_odd_count(-12))\nprint(even_odd_count(123))"
    },
    {
      "rank": 11,
      "score": 10.0,
      "candidate": "even_odd = 0\n    for i in str(num):\n        if i % 2 == 0:\n            even_odd += 1\n    return even_odd, num\n\n\ndef main():\n    print(even_odd_count(-12))\n    print(even_odd_count(123))\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 12,
      "score": 10.0,
      "candidate": "if num < 0:\n        num = abs(num)\n        return num % 2, num // 2\n    else:\n        return num % 2, num // 2 + 1\n\n\nprint(even_odd_count(-12))\nprint(even_odd_count(123))"
    },
    {
      "rank": 13,
      "score": 10.0,
      "candidate": "even_count = 0\n    odd_count = 0\n    for c in str(num):\n        if c % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    return (even_count, odd_count)\n\n\ndef test_even_odd_count():\n    assert even_odd_count(-12) == (1, 1)\n    assert even_odd_count(123) == (1, 2)\n\n\nif __name__ == '__main__':\n    test_even_odd_count()"
    },
    {
      "rank": 14,
      "score": 10.0,
      "candidate": "even_count = 0\n    odd_count = 0\n    num = str(num)\n    for i in num:\n        if i % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    return (even_count, odd_count)\n\nprint(even_odd_count(-12))\nprint(even_odd_count(123))"
    },
    {
      "rank": 15,
      "score": 10.0,
      "candidate": "even_count = 0\n    odd_count = 0\n    for digit in str(num):\n        if digit == '0':\n            odd_count += 1\n        else:\n            even_count += 1\n    return (even_count, odd_count)\n\n\nprint(even_odd_count(-12))\nprint(even_odd_count(123))"
    },
    {
      "rank": 16,
      "score": 10.0,
      "candidate": "even_odd_count = 0, 0\n    for digit in str(num):\n        if digit % 2 == 0:\n            even_odd_count += 1\n        else:\n            odd_count += 1\n    return (even_odd_count, odd_count)\n\nprint(even_odd_count(-12))\nprint(even_odd_count(123))"
    },
    {
      "rank": 17,
      "score": 10.0,
      "candidate": "even_count = 0\n    odd_count = 0\n    if num > 0:\n        while num > 0:\n            odd_count += 1\n            num //= 10\n    else:\n        while num < 0:\n            even_count += 1\n            num = num * 10\n    return (even_count, odd_count)\n\n\nprint(even_odd_count(-12))\nprint(even_odd_count(123))"
    },
    {
      "rank": 18,
      "score": 10.0,
      "candidate": "even = 0\n    odd = 0\n    for i in str(num):\n        if i == '0':\n            even += 1\n        else:\n            odd += 1\n    return (even, odd)\n\n\nprint(even_odd_count(-12))\nprint(even_odd_count(123))"
    },
    {
      "rank": 19,
      "score": 10.0,
      "candidate": "return (num // 10, num % 10)\n\n\ndef main():\n    print(even_odd_count(-12))\n    print(even_odd_count(123))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 20,
      "score": 10.0,
      "candidate": "even_count = 0\n    odd_count = 0\n    if num < 0:\n        num = -num\n    if num % 2 == 0:\n        even_count = 1\n    if num % 2 == 1:\n        odd_count = 1\n    return (even_count, odd_count)\n\n\nif __name__ == \"__main__\":\n    assert even_odd_count(-12) == (1, 1)\n    assert even_odd_count(123) == (1, 2)\n    assert even_odd_count(0) == (0, 0)\n    assert even_odd_count(1) == (1, 1)\n    assert even_odd_count(2) == (1, 2)\n    assert even_odd_count(3) == (1, 2)\n    assert even_odd_count(4) == (1, 2)\n    assert even_odd_count(5) == (1, 2)\n    assert even_odd_count(6) == (1, 2)\n    assert even_odd_count(7) == (1, 2)\n    assert even_odd_count(8) == (1, 2)\n    assert even_odd_count(9) == (1, 2)\n    assert even_odd_count(10) == (1, 2)\n    assert even_odd_count(11) == (1, 2)\n    assert even_odd_count(12) == (1, 2)\n    assert even_odd_count(13) == (1, 2)\n    assert even_odd_count(14) == (1, 2)\n    assert even_odd_count(15) == (1, 2)\n    assert even_odd_count(16) == (1, 2)\n    assert even_odd_count(17) == (1, 2)\n    assert even_odd_count(18) == (1, 2)\n    assert even_odd_count(19) == (1, 2)\n    assert even_odd_count(20) == (1, 2)\n    assert even_odd_count(21) == (1, 2)\n    assert even_odd_count(22) == (1, 2)\n    assert"
    },
    {
      "rank": 21,
      "score": 10.0,
      "candidate": "even_odd_count = 0\n    odd_count = 0\n    for digit in str(num):\n        if digit == '0':\n            even_odd_count += 1\n        else:\n            odd_count += 1\n    return (even_odd_count, odd_count)\n\n\nprint(even_odd_count(-12))\nprint(even_odd_count(123))"
    },
    {
      "rank": 22,
      "score": 10.0,
      "candidate": "if num < 0:\n        return (-1, -1)\n    even = 0\n    odd = 0\n    for i in str(num):\n        if i % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n    return (even, odd)"
    },
    {
      "rank": 23,
      "score": 10.0,
      "candidate": "even = 0\n    odd = 0\n    if num >= 0:\n        even = int(num / 2)\n        num = num - even * 2\n    if num < 0:\n        odd = int(num / 2)\n        num = num - odd * 2\n    return (even, odd)\n\nprint(even_odd_count(-12))\nprint(even_odd_count(123))"
    },
    {
      "rank": 24,
      "score": 10.0,
      "candidate": "if num < 0:\n        num = num * -1\n    even_count = 0\n    odd_count = 0\n    while num!= 0:\n        if num % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n        num //= 2\n    return (even_count, odd_count)\n\n\nprint(even_odd_count(-12))\nprint(even_odd_count(123))"
    },
    {
      "rank": 25,
      "score": 10.0,
      "candidate": "even_count = 0\n    odd_count = 0\n    if num > 0:\n        while num > 0:\n            if num % 2 == 0:\n                even_count += 1\n            num //= 2\n    else:\n        while num < 0:\n            if num % 2 == 0:\n                odd_count += 1\n            num //= 2\n    return (even_count, odd_count)\n\n\nprint(even_odd_count(-12))\nprint(even_odd_count(123))"
    },
    {
      "rank": 26,
      "score": 10.0,
      "candidate": "count = 0\n    while num > 0:\n        count += num % 10\n        num = num // 10\n    return (count, count + 1)\n\n\ndef test_even_odd_count():\n    assert even_odd_count(-12) == (1, 1)\n    assert even_odd_count(123) == (1, 2)\n    assert even_odd_count(0) == (0, 0)\n    assert even_odd_count(2147483647) == (2, 3)\n    assert even_odd_count(2147483648) == (2, 4)\n    assert even_odd_count(0) == (0, 0)\n    assert even_odd_count(2147483647) == (2, 3)\n    assert even_odd_count(2147483648) == (2, 4)\n    assert even_odd_count(0) == (0, 0)\n    assert even_odd_count(2147483647) == (2, 3)\n    assert even_odd_count(2147483648) == (2, 4)\n\n\ndef main():\n    test_even_odd_count()\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 27,
      "score": 9.963994939209833,
      "candidate": "even_odd_count = []\n    for i in str(num):\n        if int(i) % 2 == 0:\n            even_odd_count.append(int(i))\n    return tuple(even_odd_count)\n\n\nif __name__ == '__main__':\n    print(even_odd_count(-12))\n    print(even_odd_count(123))"
    },
    {
      "rank": 28,
      "score": 9.94217585880588,
      "candidate": "even = 0\n    odd = 0\n    for i in str(num):\n        if i % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n    return (even, odd)"
    },
    {
      "rank": 29,
      "score": 9.890164056081243,
      "candidate": "even = 0\n    odd = 0\n    for i in str(num):\n        if int(i) % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n    return (even, odd)\n\nprint(even_odd_count(123))"
    },
    {
      "rank": 30,
      "score": 9.887111849756732,
      "candidate": "return (num // 10, num % 10)"
    },
    {
      "rank": 31,
      "score": 9.882923312638333,
      "candidate": "if num == 0:\n        return (0, 0)\n    even_count = 0\n    odd_count = 0\n    while num > 0:\n        if num % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n        num //= 10\n    return (even_count, odd_count)\n\n\ndef main():\n    print(even_odd_count(-12))\n    print(even_odd_count(123))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 32,
      "score": 9.850496324767066,
      "candidate": "if num < 0:\n        return (0, 0)\n    if num == 0:\n        return (1, 1)\n    if num % 2 == 0:\n        return (1, 2)\n    return (2, 1)\n\n\ndef main():\n    print(even_odd_count(-12))\n    print(even_odd_count(123))\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 33,
      "score": 9.849448152205355,
      "candidate": "if num < 0:\n        num = -num\n    even_num, odd_num = 0, 0\n    while num > 0:\n        even_num += (num % 2)\n        num /= 2\n    return even_num, odd_num\n\n\ndef main():\n    print(even_odd_count(-12))\n    print(even_odd_count(123))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 34,
      "score": 9.845393812074393,
      "candidate": "even = 0\n    odd = 0\n    for i in str(num):\n        if i % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n    return (even, odd)\n\n\nif __name__ == \"__main__\":\n    print(even_odd_count(123))"
    },
    {
      "rank": 35,
      "score": 9.807458859791842,
      "candidate": "even_count = 0\n    odd_count = 0\n    while num > 0:\n        digit = num % 10\n        even_count += 1 if digit % 2 == 0 else 0\n        num //= 10\n    return (even_count, odd_count)\n\n\nprint(even_odd_count(-12))\nprint(even_odd_count(123))"
    },
    {
      "rank": 36,
      "score": 9.768291153593768,
      "candidate": "count = 0\n    for i in str(num):\n        if i == '0':\n            count += 1\n        else:\n            break\n    return count, int(count)\n\n\ndef main():\n    print(even_odd_count(123))\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 37,
      "score": 9.765262807032524,
      "candidate": "even_count = 0\n    odd_count = 0\n    for i in str(num):\n        if i % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    return (even_count, odd_count)\n\n\ndef main():\n    print(even_odd_count(123))\n    print(even_odd_count(-12))\n    print(even_odd_count(1))\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 38,
      "score": 9.740864890863175,
      "candidate": "even = 0\n    odd = 0\n    for c in str(num):\n        if c % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n    return (even, odd)\n\n\ndef main():\n    print(even_odd_count(123))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 39,
      "score": 9.718856235379514,
      "candidate": "even = 0\n    odd = 0\n    num = str(num)\n    for i in num:\n        if i % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n    return (even, odd)\n\n\nif __name__ == \"__main__\":\n    print(even_odd_count(-12))\n    print(even_odd_count(123))"
    },
    {
      "rank": 40,
      "score": 9.677440122697439,
      "candidate": "if num < 0:\n        return (num % 2, num // 2)\n    else:\n        return (num % 2, num // 2)\n\n\ndef main():\n    num = int(input(\"Enter a number: \"))\n    print(even_odd_count(num))\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 41,
      "score": 9.661538999847021,
      "candidate": "if num < 0:\n        num = -num\n    even_count = 0\n    odd_count = 0\n    while num > 0:\n        even_count += num % 2\n        num = num // 2\n    return (even_count, odd_count)\n\n\nprint(even_odd_count(-12))\nprint(even_odd_count(123))"
    },
    {
      "rank": 42,
      "score": 9.58039123838868,
      "candidate": "if num == 0:\n        return 0, 0\n    even = 0\n    odd = 0\n    for i in str(num):\n        if i == \"0\":\n            odd += 1\n        else:\n            even += 1\n    return even, odd\n\n\nif __name__ == \"__main__\":\n    print(even_odd_count(-12))\n    print(even_odd_count(123))"
    },
    {
      "rank": 43,
      "score": 9.545987962239394,
      "candidate": "even_odd = 0\n    while num > 0:\n        even_odd += 1\n        num = num//10\n    return (even_odd, num)\n\n\ndef even_odd_count_recursive(num):\n    \"\"\"Recursive function.\n    Given an integer. Return a tuple that has the number of even and odd digits respectively.\n\n    Example:\n        even_odd_count_recursive(-12) ==> (1, 1)\n        even_odd_count_recursive(123) ==> (1, 2)\n    \"\"\"\n    if num == 0:\n        return (0, 0)\n    if num % 2 == 0:\n        return (1, num)\n    else:\n        return (num-1, num)\n\n\ndef even_odd_count_recursive2(num):\n    \"\"\"Recursive function.\n    Given an integer. Return a tuple that has the number of even and odd digits respectively.\n\n    Example:\n        even_odd_count_recursive2(-12) ==> (1, 1)\n        even_odd_count_recursive2(123) ==> (1, 2)\n    \"\"\"\n    if num == 0:\n        return (0, 0)\n    if num % 2 == 0:\n        return (1, num)\n    else:\n        return (num-1, num)\n\n\ndef even_odd_count_iterative(num):\n    \"\"\"Iterative function.\n    Given an integer. Return a tuple that has the number of even and odd digits respectively.\n\n    Example:\n        even_odd_count_iterative(-12) ==> (1, 1)\n        even_odd_count_iterative(123) ==> (1, 2)\n    \"\"\"\n    even_odd = 0\n    while num > 0:\n        even_odd += 1\n        num = num//10\n    return (even_odd, num)\n\n\ndef even_odd_count_recursive_iterative(num):\n    \"\"\"Iterative function.\n    Given an integer. Return a tuple that has the number of even and odd digits respectively.\n\n    Example:\n        even_odd_count_recursive_iterative(-12) ==> (1, 1)\n        even_odd_count"
    },
    {
      "rank": 44,
      "score": 9.493584439832787,
      "candidate": "if num < 0:\n        return (0, 0)\n\n    even_num = 0\n    odd_num = 0\n\n    while num > 0:\n        odd_num += 1\n        if num % 2 == 0:\n            even_num += 1\n        num //= 10\n\n    return (even_num, odd_num)\n\n\nprint(even_odd_count(-12))\nprint(even_odd_count(123))"
    },
    {
      "rank": 45,
      "score": 9.446832512996986,
      "candidate": "if num < 0:\n        return (0, 0)\n    even_digits = 0\n    odd_digits = 0\n    while num > 0:\n        if num % 2 == 0:\n            even_digits += 1\n        else:\n            odd_digits += 1\n        num = num // 2\n    return (even_digits, odd_digits)\n\n\ndef main():\n    print(even_odd_count(-12))\n    print(even_odd_count(123))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 46,
      "score": 9.42450321128885,
      "candidate": "if num < 0:\n        num = num * -1\n    even_count = 0\n    odd_count = 0\n    while num > 0:\n        if num % 2 == 0:\n            even_count += 1\n        num = num // 2\n    return (even_count, odd_count)\n\n\ndef main():\n    print(even_odd_count(-12))\n    print(even_odd_count(123))\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 47,
      "score": 9.389578175014488,
      "candidate": "even = 0\n    odd = 0\n    if num < 0:\n        num = -num\n    while num > 0:\n        odd += num % 2\n        even += num // 2\n        num //= 10\n    return (even, odd)\n\n\ndef main():\n    print(even_odd_count(-12))\n    print(even_odd_count(123))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 48,
      "score": 9.335906975550785,
      "candidate": "if num == 0:\n        return (0, 0)\n\n    even_count = 0\n    odd_count = 0\n\n    while num > 0:\n        if num % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n        num //= 2\n\n    return (even_count, odd_count)\n\n\nif __name__ == \"__main__\":\n    print(even_odd_count(-12))\n    print(even_odd_count(123))"
    },
    {
      "rank": 49,
      "score": 9.293848149332355,
      "candidate": "if num < 0:\n        num = -num\n    even = 0\n    odd = 0\n    while num:\n        even += num % 2\n        num = num // 2\n    return (even, odd)\n\n\nif __name__ == '__main__':\n    assert even_odd_count(-12) == (1, 1)\n    assert even_odd_count(123) == (1, 2)\n    assert even_odd_count(1234) == (1, 2)\n    assert even_odd_count(12345) == (1, 2)"
    },
    {
      "rank": 50,
      "score": 9.287625906893272,
      "candidate": "odd_count = 0\n    even_count = 0\n    for digit in str(num):\n        if digit % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    return (even_count, odd_count)\n\n\nprint(even_odd_count(-12))\nprint(even_odd_count(123))"
    },
    {
      "rank": 51,
      "score": 9.260739004816287,
      "candidate": "if num == 0:\n        return (0, 0)\n    even_count = 0\n    odd_count = 0\n    while num > 0:\n        if num % 2 == 0:\n            even_count += 1\n            num /= 2\n        else:\n            odd_count += 1\n            num /= 2\n    return (even_count, odd_count)\n\n\nprint(even_odd_count(-12))\nprint(even_odd_count(123))"
    },
    {
      "rank": 52,
      "score": 9.137541083743484,
      "candidate": "odd_count = 0\n    even_count = 0\n    if num < 0:\n        num = -num\n\n    while num > 0:\n        odd_count += 1\n        if num % 2 == 0:\n            even_count += 1\n        num = num // 2\n\n    return (even_count, odd_count)\n\n\nprint(even_odd_count(123))\nprint(even_odd_count(-12))\nprint(even_odd_count(10))\nprint(even_odd_count(-1))"
    },
    {
      "rank": 53,
      "score": 8.929483977746786,
      "candidate": "even = 0\n    odd = 0\n\n    for digit in str(num):\n        if digit == '0':\n            even += 1\n        else:\n            odd += 1\n\n    return (even, odd)\n\n\nprint(even_odd_count(123))"
    },
    {
      "rank": 54,
      "score": 8.921235780048896,
      "candidate": "even_count = 0\n    odd_count = 0\n\n    for i in str(num):\n        if int(i) % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n\n    return (even_count, odd_count)\n\nprint(even_odd_count(-12))\nprint(even_odd_count(123))"
    },
    {
      "rank": 55,
      "score": 8.916583699930932,
      "candidate": "even_count = 0\n    odd_count = 0\n\n    for i in str(num):\n        if i % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n\n    return (even_count, odd_count)\n\n\nif __name__ == '__main__':\n    print(even_odd_count(-12))\n    print(even_odd_count(123))"
    },
    {
      "rank": 56,
      "score": 8.902591598314315,
      "candidate": "even_count = 0\n    odd_count = 0\n    for i in str(num):\n        if i % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    return (even_count, odd_count)\n\n\nprint(even_odd_count(-12))\nprint(even_odd_count(123))"
    },
    {
      "rank": 57,
      "score": 8.898795562810127,
      "candidate": "return tuple(map(int, str(num)))\n\nif __name__ == \"__main__\":\n    print(even_odd_count(-12))\n    print(even_odd_count(123))"
    },
    {
      "rank": 58,
      "score": 8.733141281370466,
      "candidate": "even_count = 0\n    odd_count = 0\n\n    for i in str(num):\n        if i % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n\n    return (even_count, odd_count)\n\n\nprint(even_odd_count(-12))\nprint(even_odd_count(123))"
    },
    {
      "rank": 59,
      "score": 8.690127447955128,
      "candidate": "even = 0\n    odd = 0\n    for digit in str(num):\n        if digit == '2':\n            even += 1\n        else:\n            odd += 1\n    return (even, odd)\n\n\nprint(even_odd_count(-12))\nprint(even_odd_count(123))"
    },
    {
      "rank": 60,
      "score": 8.682349210481846,
      "candidate": "odd_count = 0\n    even_count = 0\n\n    for i in str(num):\n        if i % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n\n    return (even_count, odd_count)\n\n\nif __name__ == \"__main__\":\n    print(even_odd_count(-12))\n    print(even_odd_count(123))"
    },
    {
      "rank": 61,
      "score": 8.612638057956094,
      "candidate": "odd_count = 0\n    even_count = 0\n    for digit in str(num):\n        if digit == '0':\n            even_count += 1\n        elif digit == '1':\n            odd_count += 1\n    return (even_count, odd_count)"
    },
    {
      "rank": 62,
      "score": 8.560910830131602,
      "candidate": "even_num = 0\n    odd_num = 0\n    for digit in str(num):\n        if digit == '2':\n            odd_num += 1\n        else:\n            even_num += 1\n    return (even_num, odd_num)\n\n\nprint(even_odd_count(-12))\nprint(even_odd_count(123))"
    },
    {
      "rank": 63,
      "score": 8.555149341613086,
      "candidate": "if num < 0:\n        return (-1, -1)\n    even_count = 0\n    odd_count = 0\n    while num > 0:\n        even_count += num % 2\n        num //= 2\n    return (even_count, odd_count)\n\n\nprint(even_odd_count(-12))\nprint(even_odd_count(123))"
    },
    {
      "rank": 64,
      "score": 8.544910474956831,
      "candidate": "even = 0\n    odd = 0\n    for char in str(num):\n        if char % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n    return (even, odd)\n\n\nif __name__ == \"__main__\":\n    print(even_odd_count(-12))\n    print(even_odd_count(123))"
    },
    {
      "rank": 65,
      "score": 8.497568611613335,
      "candidate": "even_odd = 0\n    if num % 2 == 0:\n        even_odd = 1\n    return (even_odd, num // 2)"
    },
    {
      "rank": 66,
      "score": 8.440260304775686,
      "candidate": "even_count = 0\n    odd_count = 0\n    for digit in str(num):\n        if digit == '0':\n            even_count += 1\n        else:\n            odd_count += 1\n    return (even_count, odd_count)\n\n\nif __name__ == '__main__':\n    print(even_odd_count(-12))\n    print(even_odd_count(123))"
    },
    {
      "rank": 67,
      "score": 8.43333837232036,
      "candidate": "even = 0\n    odd = 0\n\n    for digit in str(num):\n        if digit == \"2\":\n            even += 1\n        else:\n            odd += 1\n\n    return (even, odd)\n\n\nif __name__ == \"__main__\":\n    print(even_odd_count(-12))\n    print(even_odd_count(123))"
    },
    {
      "rank": 68,
      "score": 8.401582511081378,
      "candidate": "even_digits = 0\n    odd_digits = 0\n    for digit in str(num):\n        if digit % 2 == 0:\n            even_digits += 1\n        else:\n            odd_digits += 1\n    return (even_digits, odd_digits)"
    },
    {
      "rank": 69,
      "score": 8.38689016167866,
      "candidate": "if num < 0:\n        num = -num\n\n    even_count = 0\n    odd_count = 0\n\n    while num > 0:\n        if num % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n        num = num // 2\n\n    return (even_count, odd_count)\n\n\nprint(even_odd_count(-12))\nprint(even_odd_count(123))\nprint(even_odd_count(-2))\nprint(even_odd_count(0))\nprint(even_odd_count(3))"
    },
    {
      "rank": 70,
      "score": 8.371861987790199,
      "candidate": "even_count = 0\n    odd_count = 0\n\n    for digit in str(num):\n        if digit == \"0\":\n            even_count += 1\n        else:\n            odd_count += 1\n\n    return (even_count, odd_count)"
    },
    {
      "rank": 71,
      "score": 8.354019382008529,
      "candidate": "even_odd_count = 0\n    odd_count = 0\n\n    if num < 0:\n        num = num * -1\n\n    for i in range(1, num + 1):\n        if i % 2 == 0:\n            even_odd_count += 1\n        else:\n            odd_count += 1\n\n    return (even_odd_count, odd_count)"
    },
    {
      "rank": 72,
      "score": 8.301646425446911,
      "candidate": "if num == 0:\n        return (0, 0)\n    elif num % 2 == 0:\n        return (1, 1)\n    else:\n        return (1, 2)\n\n\nif __name__ == \"__main__\":\n    print(even_odd_count(-12))\n    print(even_odd_count(123))"
    },
    {
      "rank": 73,
      "score": 8.300068220837664,
      "candidate": "even_count = 0\n    odd_count = 0\n    for digit in str(num):\n        if digit % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n\n    return (even_count, odd_count)\n\n\nif __name__ == \"__main__\":\n    num = int(input(\"Enter a number: \"))\n    print(even_odd_count(num))"
    },
    {
      "rank": 74,
      "score": 8.295900430712404,
      "candidate": "return (num % 2, num % 2)\n\n\ndef main():\n    print(even_odd_count(-12))\n    print(even_odd_count(123))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 75,
      "score": 8.275685799841638,
      "candidate": "even = 0\n    odd = 0\n\n    for i in str(num):\n        if i % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n\n    return (even, odd)\n\n\nprint(even_odd_count(-12))\nprint(even_odd_count(123))"
    },
    {
      "rank": 76,
      "score": 8.258246450569615,
      "candidate": "if num < 0:\n        num = num + 2**31\n    even_count = 0\n    odd_count = 0\n    for i in str(num):\n        if i % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    return (even_count, odd_count)\n\n\nprint(even_odd_count(-12))\nprint(even_odd_count(123))"
    },
    {
      "rank": 77,
      "score": 8.257915394653331,
      "candidate": "even = 0\n    odd = 0\n    for i in str(num):\n        if i % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n    return (even, odd)\n\n\ndef main():\n    num = int(input('Enter a number: '))\n    print(even_odd_count(num))\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 78,
      "score": 8.221292739842085,
      "candidate": "even = 0\n    odd = 0\n\n    if num < 0:\n        num = -num\n\n    while num > 0:\n        even += 1\n        if num % 2 == 0:\n            odd += 1\n        num = num / 2\n\n    return (even, odd)"
    },
    {
      "rank": 79,
      "score": 8.116554056468116,
      "candidate": "even = 0\n    odd = 0\n    for i in str(num):\n        if int(i) % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n    return (even, odd)"
    },
    {
      "rank": 80,
      "score": 8.073620390979437,
      "candidate": "even = 0\n    odd = 0\n    for i in str(num):\n        if i % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n\n    return (even, odd)\n\nprint(even_odd_count(-12))\nprint(even_odd_count(123))"
    },
    {
      "rank": 81,
      "score": 7.897901996281997,
      "candidate": "even = 0\n    odd = 0\n    for digit in str(num):\n        if digit % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n    return (even, odd)"
    },
    {
      "rank": 82,
      "score": 7.851327568600527,
      "candidate": "if num < 0:\n        num = num * -1\n    even_digit = 0\n    odd_digit = 0\n    while num > 0:\n        even_digit += (num % 10)\n        num = num // 10\n    return (even_digit, odd_digit)\n\n\nprint(even_odd_count(-12))\nprint(even_odd_count(123))"
    },
    {
      "rank": 83,
      "score": 7.836946706041714,
      "candidate": "if num < 0:\n        num = -num\n    even_digit = 0\n    odd_digit = 0\n    for digit in str(num):\n        if digit % 2 == 0:\n            even_digit += 1\n        else:\n            odd_digit += 1\n    return (even_digit, odd_digit)\n\n\nprint(even_odd_count(-12))\nprint(even_odd_count(123))"
    },
    {
      "rank": 84,
      "score": 7.828298080918168,
      "candidate": "even = 0\n    odd = 0\n    for digit in str(num):\n        if digit == '2':\n            even += 1\n        else:\n            odd += 1\n    return (even, odd)\n\n\nif __name__ == '__main__':\n    print(even_odd_count(-12))\n    print(even_odd_count(123))"
    },
    {
      "rank": 85,
      "score": 3.0,
      "candidate": "even_count = 0\n    odd_count = 0\n\n    # check if num is positive\n    if num < 0:\n        num = num * -1\n\n    # if num is positive, count the number of even digits\n    for i in str(num):\n        if int(i) % 2 == 0:\n            even_count += 1\n\n        # if num is positive, count the number of odd digits\n        else:\n            odd_count += 1\n\n    return (even_count, odd_count)\n\n\nif __name__ == '__main__':\n    assert even_odd_count(-12) == (1, 1)\n    assert even_odd_count(123) == (1, 2)"
    },
    {
      "rank": 86,
      "score": 3.0,
      "candidate": "even_count = 0\n    odd_count = 0\n    while num:\n        digit = num % 10\n        if digit % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n        num = num // 10\n    return (even_count, odd_count)\n\n\ndef even_odd_count2(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    even_count = 0\n    odd_count = 0\n    while num:\n        digit = num % 10\n        if digit % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n        num = num // 10\n    return (even_count, odd_count)\n\n\nprint(even_odd_count(-12))\nprint(even_odd_count(123))\n\nprint(even_odd_count2(-12))\nprint(even_odd_count2(123))"
    },
    {
      "rank": 87,
      "score": 3.0,
      "candidate": "if num < 0:\n        return (0, 0)\n    num = abs(num)\n    even = 0\n    odd = 0\n    for i in str(num):\n        if i == '0':\n            even += 1\n        else:\n            odd += 1\n    return (even, odd)\n\n\ndef test_function():\n    assert even_odd_count(-12) == (1, 1)\n    assert even_odd_count(123) == (1, 2)\n    assert even_odd_count(12345) == (0, 0)\n\n\nif __name__ == '__main__':\n    test_function()"
    },
    {
      "rank": 88,
      "score": 3.0,
      "candidate": "return (num % 10, num // 10)\n\n\ndef test_even_odd_count():\n    assert even_odd_count(-12) == (1, 1)\n    assert even_odd_count(123) == (1, 2)\n\n\ndef test_even_odd_count_negative():\n    assert even_odd_count(-12) == (1, 1)\n    assert even_odd_count(123) == (1, 2)"
    },
    {
      "rank": 89,
      "score": 3.0,
      "candidate": "even_count = 0\n    odd_count = 0\n    for digit in str(num):\n        if digit % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    return (even_count, odd_count)\n\n\ndef test_even_odd_count():\n    assert even_odd_count(-12) == (1, 1)\n    assert even_odd_count(123) == (1, 2)\n    assert even_odd_count(456) == (0, 0)"
    },
    {
      "rank": 90,
      "score": 3.0,
      "candidate": "if num == 0:\n        return (0, 0)\n\n    even = 0\n    odd = 0\n\n    while num > 0:\n        if num % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n        num //= 10\n\n    return (even, odd)\n\n\nif __name__ == \"__main__\":\n    assert even_odd_count(123) == (1, 2)\n    assert even_odd_count(-12) == (1, 1)"
    },
    {
      "rank": 91,
      "score": 3.0,
      "candidate": "if num < 0:\n        return (0, 0)\n    even_count = 0\n    odd_count = 0\n    while num!= 0:\n        digit = num % 10\n        if digit % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n        num = num // 10\n    return (even_count, odd_count)\n\n\ndef even_odd_count2(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    if num < 0:\n        return (0, 0)\n    even_count = 0\n    odd_count = 0\n    while num!= 0:\n        digit = num % 10\n        if digit % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n        num = num // 10\n    return (even_count, odd_count)\n\n\nif __name__ == \"__main__\":\n    # Test 1\n    num = -12\n    result = even_odd_count(num)\n    assert result == (1, 1)\n    # Test 2\n    num = 123\n    result = even_odd_count(num)\n    assert result == (1, 2)\n    # Test 3\n    num = -12.123\n    result = even_odd_count(num)\n    assert result == (1, 1)\n    # Test 4\n    num = 123.123\n    result = even_odd_count(num)\n    assert result == (1, 2)\n    # Test 5\n    num = -12.123.123\n    result = even_odd_count(num)\n    assert result == (1, 2)\n    # Test 6\n    num = 123.123.123.123\n    result = even_odd_count(num)\n    assert result == (1, 2)\n    # Test 7\n    num = -12.123.123.123\n    result = even_odd_count(num)\n    assert result == (1"
    },
    {
      "rank": 92,
      "score": 3.0,
      "candidate": "even_count = 0\n    odd_count = 0\n    while num!= 0:\n        num, mod = divmod(num, 10)\n        even_count += 1\n    return (even_count, odd_count)\n\n\ndef test_function(test_case):\n    result = even_odd_count(test_case[0])\n    if result == test_case[1]:\n        print(\"Pass\")\n    else:\n        print(\"Fail\")\n\n\ntest_cases = [\n    (-12, (1, 1)),\n    (123, (1, 2))\n]\n\nfor test_case in test_cases:\n    test_function(test_case)"
    },
    {
      "rank": 93,
      "score": 3.0,
      "candidate": "even = 0\n    odd = 0\n    while num > 0:\n        if num % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n        num //= 10\n    return even, odd\n\n\nprint(even_odd_count(-12))\nprint(even_odd_count(123))"
    },
    {
      "rank": 94,
      "score": 3.0,
      "candidate": "even_count = 0\n    odd_count = 0\n    while num > 0:\n        if num % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n        num /= 2\n    return (even_count, odd_count)\n\nprint(even_odd_count(-12))\nprint(even_odd_count(123))\n\n\ndef even_odd_count_2(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count_2(-12) ==> (1, 1)\n        even_odd_count_2(123) ==> (1, 2)\n    \"\"\"\n    even_count = 0\n    odd_count = 0\n    while num > 0:\n        if num % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n        num /= 2\n    return (even_count, odd_count)\n\nprint(even_odd_count_2(-12))\nprint(even_odd_count_2(123))\n\n\ndef even_odd_count_3(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count_3(-12) ==> (1, 1)\n        even_odd_count_3(123) ==> (1, 2)\n    \"\"\"\n    even_count = 0\n    odd_count = 0\n    while num > 0:\n        if num % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n        num /= 2\n    return (even_count, odd_count)\n\nprint(even_odd_count_3(-12))\nprint(even_odd_count_3(123))"
    },
    {
      "rank": 95,
      "score": 3.0,
      "candidate": "even = 0\n    odd = 0\n    for i in str(num):\n        if i == '0':\n            even += 1\n        else:\n            odd += 1\n    return even, odd\n\n\ndef test_even_odd_count():\n    assert even_odd_count(-12) == (1, 1)\n    assert even_odd_count(123) == (1, 2)\n\n\nif __name__ == '__main__':\n    test_even_odd_count()"
    },
    {
      "rank": 96,
      "score": 3.0,
      "candidate": "if num < 0:\n        return (0, 0)\n\n    even, odd = 0, 0\n\n    for digit in str(num):\n        if digit % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n\n    return (even, odd)\n\n\ndef test_even_odd_count():\n    assert even_odd_count(-12) == (1, 1)\n    assert even_odd_count(123) == (1, 2)\n    assert even_odd_count(1234) == (1, 2)\n\n    assert even_odd_count(-123) == (0, 0)\n    assert even_odd_count(123) == (0, 0)\n    assert even_odd_count(1234) == (0, 0)\n\n    assert even_odd_count(-1234) == (0, 0)\n    assert even_odd_count(1234) == (0, 0)\n    assert even_odd_count(123456789) == (0, 0)\n\n    assert even_odd_count(-12345) == (1, 1)\n    assert even_odd_count(123456) == (1, 2)\n    assert even_odd_count(12345) == (1, 2)\n\n    assert even_odd_count(-12345) == (0, 0)\n    assert even_odd_count(123456) == (0, 0)\n    assert even_odd_count(12345) == (0, 0)\n\n    assert even_odd_count(-12345) == (0, 0)\n    assert even_odd_count(123456) == (0, 0)\n    assert even_odd_count(12345) == (0, 0)\n\n    assert even_odd_count(-12345) == (0, 0)\n    assert even_odd_count(123456) == (0, 0)\n    assert even_odd_count(12345) == (0, 0)\n\n    assert even_odd_count(-12345) == (0, 0)\n    assert even_odd_count(123456) == (0, 0)\n    assert even_odd_count(12345) == (0, 0)"
    },
    {
      "rank": 97,
      "score": 3.0,
      "candidate": "even_count = 0\n    odd_count = 0\n    for i in str(num):\n        if i % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    return (even_count, odd_count)\n\n\ndef test_even_odd_count():\n    assert even_odd_count(-12) == (1, 1)\n    assert even_odd_count(123) == (1, 2)\n\n\nif __name__ == '__main__':\n    test_even_odd_count()"
    },
    {
      "rank": 98,
      "score": 3.0,
      "candidate": "even = 0\n    odd = 0\n    if num >= 0:\n        while num > 0:\n            even += num % 2\n            num //= 2\n        while num > 0:\n            odd += num % 2\n            num //= 2\n    return (even, odd)\n\n\ndef test_function():\n    assert even_odd_count(-12) == (1, 1)\n    assert even_odd_count(123) == (1, 2)\n    assert even_odd_count(0) == (0, 0)\n    assert even_odd_count(4) == (0, 0)\n\n\nif __name__ == '__main__':\n    test_function()"
    },
    {
      "rank": 99,
      "score": 3.0,
      "candidate": "even_count = 0\n    odd_count = 0\n    while num > 0:\n        if num % 2 == 0:\n            even_count += 1\n        num = num // 2\n    return (even_count, odd_count)\n\n\nprint(even_odd_count(123))\nprint(even_odd_count(-12))"
    },
    {
      "rank": 100,
      "score": 3.0,
      "candidate": "even_count = 0\n    odd_count = 0\n    if num < 0:\n        num = -num\n\n    for i in str(num):\n        if int(i) % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    return (even_count, odd_count)\n\n\ndef test_even_odd_count():\n    assert even_odd_count(-12) == (1, 1)\n    assert even_odd_count(123) == (1, 2)\n    assert even_odd_count(0) == (0, 0)\n    assert even_odd_count(1) == (1, 1)\n    assert even_odd_count(2) == (2, 1)\n    assert even_odd_count(3) == (3, 1)\n    assert even_odd_count(4) == (3, 2)\n    assert even_odd_count(5) == (3, 3)\n    assert even_odd_count(6) == (3, 4)\n    assert even_odd_count(7) == (3, 5)\n    assert even_odd_count(8) == (3, 6)\n    assert even_odd_count(9) == (3, 7)\n    assert even_odd_count(10) == (3, 8)\n    assert even_odd_count(11) == (3, 9)\n    assert even_odd_count(12) == (3, 10)\n    assert even_odd_count(13) == (3, 11)\n    assert even_odd_count(14) == (3, 12)\n    assert even_odd_count(15) == (3, 13)\n    assert even_odd_count(16) == (3, 14)\n    assert even_odd_count(17) == (3, 15)\n    assert even_odd_count(18) == (3, 16)\n    assert even_odd_count(19) == (3, 17)\n    assert even_odd_count(20) == (3, 18)\n    assert even_odd_count(21) == (3, 19)\n    assert even_odd_count(22) =="
    }
  ]
}