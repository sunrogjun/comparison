{
  "timestamp": "2025-09-14T11:40:05.056553",
  "method": "improved_llm_judge",
  "judge_model": "codellama/CodeLlama-7b-Python-hf",
  "target_model": "codet5-770m",
  "dataset": "humaneval",
  "problem_number": 55,
  "total_candidates": 100,
  "results": [
    {
      "rank": 1,
      "score": 10.0,
      "candidate": "a, b = 0, 1\n    for _ in range(n):\n        a, b = b, a + b\n    return a\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 2,
      "score": 10.0,
      "candidate": "if n < 2:\n        return n\n    return fib(n - 1) + fib(n - 2)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 3,
      "score": 10.0,
      "candidate": "if n <= 1:\n        return n\n    return fib(n - 1) + fib(n - 2)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 4,
      "score": 10.0,
      "candidate": "a = 1\n    b = 0\n    for _ in range(n):\n        a, b = b, a + b\n    return a\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 5,
      "score": 10.0,
      "candidate": "if n == 0 or n == 1:\n        return n\n    return fib(n - 1) + fib(n - 2)\n\n\ndef fib_p(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib_p(10)\n    55\n    >>> fib_p(1)\n    1\n    >>> fib_p(8)\n    21\n    \"\"\"\n    if n == 0 or n == 1:\n        return n\n    return fib_p(n - 1) + fib_p(n - 2) + fib_p(n - 3)\n\n\ndef fib_l(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib_l(10)\n    55\n    >>> fib_l(1)\n    1\n    >>> fib_l(8)\n    21\n    \"\"\"\n    if n == 0 or n == 1:\n        return n\n    return fib_l(n - 1) + fib_l(n - 2) + fib_l(n - 3)\n\n\ndef fib_r(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib_r(10)\n    55\n    >>> fib_r(1)\n    1\n    >>> fib_r(8)\n    21\n    \"\"\"\n    if n == 0 or n == 1:\n        return n\n    return fib_r(n - 1) + fib_r(n - 2) + fib_r(n - 3)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 6,
      "score": 10.0,
      "candidate": "a, b = 0, 1\n    for _ in range(n):\n        a, b = b, a + b\n    return a"
    },
    {
      "rank": 7,
      "score": 10.0,
      "candidate": "if n < 2:\n        return n\n    return fib(n - 1) + fib(n - 2)"
    },
    {
      "rank": 8,
      "score": 10.0,
      "candidate": "if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fib(n-1) + fib(n-2)\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 9,
      "score": 10.0,
      "candidate": "if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fib(n - 1) + fib(n - 2)\n\n\ndef fib_iterative(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib_iterative(10)\n    55\n    >>> fib_iterative(1)\n    1\n    >>> fib_iterative(8)\n    21\n    \"\"\"\n    a, b = 0, 1\n    for _ in range(n):\n        a, b = b, a + b\n    return a\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 10,
      "score": 10.0,
      "candidate": "if n == 0:\n        return 0\n    if n == 1:\n        return 1\n\n    f1 = 0\n    f2 = 1\n    for _ in range(2, n + 1):\n        f3 = f1 + f2\n        f1 = f2\n        f2 = f3\n\n    return f3\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 11,
      "score": 10.0,
      "candidate": "if n <= 0:\n        raise ValueError('n must be greater than 0')\n\n    a, b = 0, 1\n    for _ in range(n - 1):\n        a, b = b, a + b\n    return b\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 12,
      "score": 10.0,
      "candidate": "a, b = 0, 1\n    for _ in range(n):\n        a, b = b, a + b\n    return a\n\n\ndef fib_recursive(n: int, memo=None):\n    \"\"\"Return n-th Fibonacci number recursively.\n    >>> fib_recursive(10)\n    55\n    >>> fib_recursive(1)\n    1\n    >>> fib_recursive(8)\n    21\n    \"\"\"\n    if memo is None:\n        memo = {}\n    if n in memo:\n        return memo[n]\n    if n <= 2:\n        memo[n] = n\n        return n\n    memo[n] = fib_recursive(n - 1, memo) + fib_recursive(n - 2, memo)\n    return memo[n]\n\n\ndef fib_iterative(n: int):\n    \"\"\"Return n-th Fibonacci number iteratively.\n    >>> fib_iterative(10)\n    55\n    >>> fib_iterative(1)\n    1\n    >>> fib_iterative(8)\n    21\n    \"\"\"\n    a, b = 0, 1\n    for _ in range(n):\n        a, b = b, a + b\n    return a\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 13,
      "score": 10.0,
      "candidate": "if n <= 1:\n        return n\n    return fib(n - 1) + fib(n - 2)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 14,
      "score": 10.0,
      "candidate": "if n <= 1:\n        return n\n    return fib(n - 1) + fib(n - 2)"
    },
    {
      "rank": 15,
      "score": 10.0,
      "candidate": "a, b = 0, 1\n    for _ in range(n):\n        a, b = b, a + b\n    return a"
    },
    {
      "rank": 16,
      "score": 10.0,
      "candidate": "a, b = 0, 1\n    for _ in range(n):\n        a, b = b, a + b\n    return a\n\n\ndef fib2(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib2(10)\n    55\n    >>> fib2(1)\n    1\n    >>> fib2(8)\n    21\n    \"\"\"\n    a, b = 0, 1\n    for _ in range(n):\n        yield a\n        a, b = b, a + b\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 17,
      "score": 10.0,
      "candidate": "if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    return fib(n - 1) + fib(n - 2)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 18,
      "score": 10.0,
      "candidate": "a, b = 0, 1\n    for _ in range(n):\n        a, b = b, a + b\n    return b\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 19,
      "score": 10.0,
      "candidate": "if n <= 1:\n        return n\n    return fib(n - 1) + fib(n - 2)\n\n\ndef fib_prime(n: int):\n    \"\"\"Return n-th Fibonacci number, with prime.\n    >>> fib_prime(10)\n    55\n    >>> fib_prime(1)\n    1\n    >>> fib_prime(8)\n    21\n    \"\"\"\n    if n <= 1:\n        return n\n    i = 2\n    j = 3\n    while j < n:\n        i = j\n        j += i\n    return i\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 20,
      "score": 10.0,
      "candidate": "if n < 0:\n        raise ValueError(\"n must be a non-negative integer.\")\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    return fib(n - 1) + fib(n - 2)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 21,
      "score": 10.0,
      "candidate": "if n < 0:\n        raise ValueError('n must be greater than 0')\n\n    if n == 0 or n == 1:\n        return n\n\n    return fib(n-1) + fib(n-2)"
    },
    {
      "rank": 22,
      "score": 10.0,
      "candidate": "if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    return fib(n - 1) + fib(n - 2)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 23,
      "score": 10.0,
      "candidate": "a = 0\n    b = 1\n    for _ in range(n):\n        a, b = b, a + b\n    return b\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 24,
      "score": 10.0,
      "candidate": "if n <= 1:\n        return n\n    return fib(n - 1) + fib(n - 2)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 25,
      "score": 10.0,
      "candidate": "a, b = 0, 1\n    for _ in range(n):\n        a, b = b, a + b\n    return a"
    },
    {
      "rank": 26,
      "score": 10.0,
      "candidate": "if n < 0:\n        raise ValueError(\"n must be non-negative.\")\n    if n == 0 or n == 1:\n        return n\n    return fib(n - 1) + fib(n - 2)"
    },
    {
      "rank": 27,
      "score": 10.0,
      "candidate": "if n < 0:\n        raise ValueError(\"n must be >= 0\")\n\n    a, b = 0, 1\n    for _ in range(n - 1):\n        a, b = b, a + b\n    return b\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 28,
      "score": 10.0,
      "candidate": "if n <= 1:\n        return n\n    return fib(n - 1) + fib(n - 2)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 29,
      "score": 10.0,
      "candidate": "if n < 2:\n        return n\n    return fib(n - 1) + fib(n - 2)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 30,
      "score": 10.0,
      "candidate": "if n < 2:\n        return n\n    return fib(n - 1) + fib(n - 2)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 31,
      "score": 10.0,
      "candidate": "if n < 1:\n        raise ValueError(\"n must be a positive integer.\")\n    if n == 1:\n        return 1\n    if n == 2:\n        return 1\n    return fib(n - 1) + fib(n - 2)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 32,
      "score": 10.0,
      "candidate": "if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fib(n - 1) + fib(n - 2)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 33,
      "score": 10.0,
      "candidate": "if n == 0 or n == 1:\n        return n\n    else:\n        return fib(n - 1) + fib(n - 2)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 34,
      "score": 10.0,
      "candidate": "if n < 2:\n        return n\n    return fib(n - 1) + fib(n - 2)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 35,
      "score": 10.0,
      "candidate": "a, b = 0, 1\n    for _ in range(n):\n        a, b = b, a + b\n    return b\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 36,
      "score": 10.0,
      "candidate": "a = 1\n    b = 1\n    for i in range(n):\n        a, b = b, a + b\n    return b\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 37,
      "score": 10.0,
      "candidate": "a, b = 0, 1\n    for _ in range(n):\n        a, b = b, a + b\n    return b\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 38,
      "score": 10.0,
      "candidate": "a, b = 0, 1\n    for _ in range(n):\n        a, b = b, a + b\n    return a"
    },
    {
      "rank": 39,
      "score": 10.0,
      "candidate": "if n <= 1:\n        return n\n    else:\n        return fib(n - 1) + fib(n - 2)"
    },
    {
      "rank": 40,
      "score": 10.0,
      "candidate": "if n < 0:\n        raise ValueError('n must be >= 0')\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    return fib(n - 1) + fib(n - 2)\n\n\nif __name__ == '__main__':\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 41,
      "score": 10.0,
      "candidate": "a, b = 0, 1\n    for i in range(n):\n        a, b = b, a + b\n    return a\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 42,
      "score": 10.0,
      "candidate": "if n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return fib(n - 1) + fib(n - 2)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 43,
      "score": 10.0,
      "candidate": "a, b = 0, 1\n    for _ in range(n):\n        a, b = b, a + b\n    return a"
    },
    {
      "rank": 44,
      "score": 10.0,
      "candidate": "if n == 0 or n == 1:\n        return n\n    else:\n        return fib(n - 1) + fib(n - 2)"
    },
    {
      "rank": 45,
      "score": 10.0,
      "candidate": "if n < 2:\n        return n\n    return fib(n - 1) + fib(n - 2)\n\n\ndef fib_prime(n: int):\n    \"\"\"Return the nth Fibonacci number.\n    >>> fib_prime(10)\n    55\n    >>> fib_prime(1)\n    1\n    >>> fib_prime(8)\n    21\n    \"\"\"\n    if n < 2:\n        return n\n    a, b = 0, 1\n    for _ in range(n - 1):\n        a, b = b, a + b\n    return b\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 46,
      "score": 10.0,
      "candidate": "if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fib(n-1) + fib(n-2)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 47,
      "score": 10.0,
      "candidate": "a, b = 0, 1\n    for _ in range(n):\n        a, b = b, a + b\n    return b\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 48,
      "score": 10.0,
      "candidate": "if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fib(n - 1) + fib(n - 2)\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 49,
      "score": 10.0,
      "candidate": "if n <= 0:\n        raise ValueError(\"n must be positive\")\n    a, b = 0, 1\n    for _ in range(n):\n        a, b = b, a + b\n    return a\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 50,
      "score": 10.0,
      "candidate": "a, b = 0, 1\n    for _ in range(n):\n        a, b = b, a + b\n    return a"
    },
    {
      "rank": 51,
      "score": 10.0,
      "candidate": "a, b = 0, 1\n    for _ in range(n):\n        a, b = b, a + b\n    return b\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 52,
      "score": 10.0,
      "candidate": "a, b = 0, 1\n    for _ in range(n):\n        a, b = b, a + b\n    return b"
    },
    {
      "rank": 53,
      "score": 10.0,
      "candidate": "if n < 2:\n        return n\n    return fib(n - 1) + fib(n - 2)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 54,
      "score": 10.0,
      "candidate": "if n == 0 or n == 1:\n        return n\n    else:\n        return fib(n-1) + fib(n-2)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 55,
      "score": 10.0,
      "candidate": "if n < 2:\n        return n\n    return fib(n - 1) + fib(n - 2)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 56,
      "score": 10.0,
      "candidate": "if n <= 1:\n        return n\n    else:\n        return fib(n-1) + fib(n-2)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 57,
      "score": 10.0,
      "candidate": "a = 0\n    b = 1\n    for i in range(n):\n        a, b = b, a + b\n    return a"
    },
    {
      "rank": 58,
      "score": 10.0,
      "candidate": "if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fib(n - 1) + fib(n - 2)\n\n\ndef fib_gen(n: int):\n    \"\"\"Generate n-th Fibonacci number.\n    >>> fib_gen(10)\n    55\n    >>> fib_gen(1)\n    1\n    >>> fib_gen(8)\n    21\n    \"\"\"\n    fib_list = []\n    for i in range(n):\n        fib_list.append(fib(i))\n    return fib_list\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 59,
      "score": 10.0,
      "candidate": "if n <= 0:\n        raise ValueError(\"n must be greater than zero\")\n    if n == 1:\n        return 0\n    return n - 1\n\n\ndef fib_2(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib_2(10)\n    55\n    >>> fib_2(1)\n    1\n    >>> fib_2(8)\n    21\n    \"\"\"\n    if n <= 0:\n        raise ValueError(\"n must be greater than zero\")\n    if n == 1:\n        return 0\n    return n - 1\n\n\ndef fib_3(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib_3(10)\n    55\n    >>> fib_3(1)\n    1\n    >>> fib_3(8)\n    21\n    \"\"\"\n    if n <= 0:\n        raise ValueError(\"n must be greater than zero\")\n    if n == 1:\n        return 0\n    return n - 1\n\n\ndef fib_4(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib_4(10)\n    55\n    >>> fib_4(1)\n    1\n    >>> fib_4(8)\n    21\n    \"\"\"\n    if n <= 0:\n        raise ValueError(\"n must be greater than zero\")\n    if n == 1:\n        return 0\n    return n - 1\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 60,
      "score": 10.0,
      "candidate": "if n <= 1:\n        return n\n    else:\n        return fib(n-1) + fib(n-2)"
    },
    {
      "rank": 61,
      "score": 10.0,
      "candidate": "if n < 0:\n        raise ValueError(f\"n must be non-negative: {n}\")\n\n    a = 1\n    b = 0\n    for _ in range(n - 1):\n        c = a + b\n        a = b\n        b = c\n    return c\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 62,
      "score": 10.0,
      "candidate": "if n <= 0:\n        raise ValueError('n must be greater than 0.')\n\n    a, b = 0, 1\n    for _ in range(n):\n        a, b = b, a + b\n    return b\n\n\nif __name__ == '__main__':\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 63,
      "score": 10.0,
      "candidate": "a, b = 0, 1\n    for _ in range(n):\n        a, b = b, a + b\n    return b\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 64,
      "score": 10.0,
      "candidate": "if n <= 1:\n        return n\n    return fib(n - 1) + fib(n - 2)\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 65,
      "score": 9.0,
      "candidate": "a, b = 0, 1\n    for _ in range(n - 1):\n        a, b = b, a + b\n    return b\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 66,
      "score": 9.0,
      "candidate": "if n < 2:\n        return n\n    return fib(n - 1) + fib(n - 2)"
    },
    {
      "rank": 67,
      "score": 9.0,
      "candidate": "if n <= 2:\n        return n\n\n    return fib(n-1) + fib(n-2)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 68,
      "score": 9.0,
      "candidate": "a, b = 0, 1\n    for _ in range(n):\n        a, b = b, a + b\n    return b\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 69,
      "score": 9.0,
      "candidate": "if n == 0 or n == 1:\n        return n\n    return fib(n - 1) + fib(n - 2)\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 70,
      "score": 9.0,
      "candidate": "if n == 1:\n        return 1\n    if n == 2:\n        return 1\n    return fib(n - 1) + fib(n - 2)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 71,
      "score": 9.0,
      "candidate": "a, b = 0, 1\n    for _ in range(n):\n        a, b = b, a + b\n    return b\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 72,
      "score": 9.0,
      "candidate": "a, b = 0, 1\n    for _ in range(n):\n        a, b = b, a + b\n    return b\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 73,
      "score": 9.0,
      "candidate": "if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fib(n - 1) + fib(n - 2)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 74,
      "score": 9.0,
      "candidate": "a, b = 0, 1\n    for _ in range(n):\n        a, b = b, a + b\n    return b\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 75,
      "score": 9.0,
      "candidate": "if n < 1:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fib(n - 1) + fib(n - 2)\n\n\nif __name__ == '__main__':\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 76,
      "score": 9.0,
      "candidate": "if n < 2:\n        return n\n    return fib(n-1) + fib(n-2)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 77,
      "score": 9.0,
      "candidate": "a, b = 0, 1\n    for _ in range(n - 1):\n        a, b = b, a + b\n    return a\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 78,
      "score": 9.0,
      "candidate": "if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    return fib(n - 1) + fib(n - 2)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 79,
      "score": 9.0,
      "candidate": "if n <= 1:\n        return n\n    return fib(n - 1) + fib(n - 2)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 80,
      "score": 9.0,
      "candidate": "if n < 2:\n        return n\n    return fib(n - 1) + fib(n - 2)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 81,
      "score": 9.0,
      "candidate": "if n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return fib(n-1) + fib(n-2)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 82,
      "score": 9.0,
      "candidate": "if n <= 1:\n        return n\n\n    return fib(n - 1) + fib(n - 2)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 83,
      "score": 9.0,
      "candidate": "a, b = 0, 1\n    for _ in range(n):\n        a, b = b, a + b\n    return a\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 84,
      "score": 9.0,
      "candidate": "a, b = 0, 1\n    for _ in range(n - 1):\n        a, b = b, a + b\n    return b\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 85,
      "score": 9.0,
      "candidate": "if n < 2:\n        return n\n    else:\n        return fib(n-1) + fib(n-2)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 86,
      "score": 9.0,
      "candidate": "if n <= 1:\n        return n\n    return fib(n - 1) + fib(n - 2)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 87,
      "score": 9.0,
      "candidate": "if n < 0:\n        raise ValueError(f\"n must be non-negative: {n}\")\n\n    a, b = 0, 1\n    for _ in range(n - 1):\n        a, b = b, a + b\n    return a\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 88,
      "score": 8.0,
      "candidate": "if n <= 1:\n        return n\n    else:\n        return fib(n - 1) + fib(n - 2)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 89,
      "score": 8.0,
      "candidate": "if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    return fib(n-1) + fib(n-2)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 90,
      "score": 8.0,
      "candidate": "if n == 1:\n        return 1\n    if n == 2:\n        return 1\n    a, b = 1, 1\n    for i in range(n - 2):\n        a, b = b, a + b\n    return b"
    },
    {
      "rank": 91,
      "score": 8.0,
      "candidate": "a, b = 0, 1\n    for _ in range(n - 1):\n        a, b = b, a + b\n    return b\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 92,
      "score": 8.0,
      "candidate": "if n < 2:\n        return n\n    return fib(n-1) + fib(n-2)"
    },
    {
      "rank": 93,
      "score": 8.0,
      "candidate": "a, b = 0, 1\n    for _ in range(n - 1):\n        a, b = b, a + b\n    return a\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 94,
      "score": 8.0,
      "candidate": "a, b = 0, 1\n    for _ in range(n - 1):\n        a, b = b, a + b\n    return b\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 95,
      "score": 8.0,
      "candidate": "if n < 2:\n        return n\n    else:\n        return fib(n - 1) + fib(n - 2)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 96,
      "score": 8.0,
      "candidate": "a, b = 0, 1\n    for _ in range(n):\n        a, b = b, a + b\n    return b\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 97,
      "score": 8.0,
      "candidate": "a, b = 0, 1\n    for i in range(n):\n        a, b = b, a + b\n    return b"
    },
    {
      "rank": 98,
      "score": 8.0,
      "candidate": "if n < 2:\n        return n\n    return fib(n - 1) + fib(n - 2)"
    },
    {
      "rank": 99,
      "score": 1.0,
      "candidate": "if n == 1:\n        return 1\n    if n == 2:\n        return 1\n    return fib(n-1) + fib(n-2)\n\n\ndef fib_prime(n: int):\n    \"\"\"Return the nth Fibonacci prime number.\n    >>> fib_prime(10)\n    1\n    >>> fib_prime(1)\n    1\n    >>> fib_prime(8)\n    21\n    \"\"\"\n    if n == 1:\n        return 1\n    if n == 2:\n        return 1\n    if n % 2 == 0:\n        return 0\n    i = 3\n    while i < n:\n        if n % i == 0:\n            return i\n        i += 2\n    return n\n\n\ndef fib_sieve(n: int):\n    \"\"\"Return the nth Fibonacci sieve number.\n    >>> fib_sieve(10)\n    [1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144]\n    >>> fib_sieve(1)\n    [1]\n    >>> fib_sieve(8)\n    [1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144]\n    \"\"\"\n    if n == 1:\n        return [1]\n    if n == 2:\n        return [1, 2]\n    sieve = [1]\n    for i in range(3, n+1):\n        if n % i == 0:\n            sieve.append(i)\n    return sieve\n\n\ndef fib_prime_sieve(n: int):\n    \"\"\"Return the nth Fibonacci prime number.\n    >>> fib_prime_sieve(10)\n    [1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144]\n    >>> fib_prime_sieve(1)\n    [1]\n    >>> fib_prime_sieve(8)\n    [1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144]\n    \"\"\"\n    if n == 1:\n        return [1]"
    },
    {
      "rank": 100,
      "score": 1.0,
      "candidate": "a = 0\n    b = 1\n    for i in range(1, n):\n        a, b = b, a + b\n    return a\n\n\ndef fib_iterative(n: int):\n    \"\"\"Return n-th Fibonacci number iteratively.\n    >>> fib_iterative(10)\n    55\n    >>> fib_iterative(1)\n    1\n    >>> fib_iterative(8)\n    21\n    \"\"\"\n    a, b = 0, 1\n    for i in range(1, n):\n        a, b = b, a + b\n    return a"
    }
  ]
}