{
  "timestamp": "2025-09-14T11:41:23.725406",
  "method": "improved_llm_judge",
  "judge_model": "codellama/CodeLlama-7b-Python-hf",
  "target_model": "codet5-770m",
  "dataset": "humaneval",
  "problem_number": 58,
  "total_candidates": 100,
  "results": [
    {
      "rank": 1,
      "score": 10.0,
      "candidate": "l1_set = set(l1)\n    l2_set = set(l2)\n    common_set = l1_set & l2_set\n    return sorted(list(common_set))\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 2,
      "score": 10.0,
      "candidate": "common_list = []\n    for i in range(min(len(l1), len(l2))):\n        if l1[i] in l2:\n            common_list.append(l1[i])\n    return sorted(common_list)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 3,
      "score": 10.0,
      "candidate": "common = []\n    for i in l1:\n        for j in l2:\n            if i == j:\n                common.append(i)\n    return sorted(common)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 4,
      "score": 10.0,
      "candidate": "if not l1 or not l2:\n        return []\n\n    result = []\n    while l1 and l2:\n        if l1[0] == l2[0]:\n            result.append(l1[0])\n            l1.pop(0)\n            l2.pop(0)\n        elif l1[0] > l2[0]:\n            l1.pop(0)\n        else:\n            l2.pop(0)\n\n    return result"
    },
    {
      "rank": 5,
      "score": 10.0,
      "candidate": "common = []\n    l1.sort()\n    l2.sort()\n    for i in range(min(len(l1), len(l2))):\n        if l1[i] == l2[i]:\n            common.append(l1[i])\n    return common\n\n\ndef find_common_element(l1: list, l2: list):\n    \"\"\"Return the index of the common element.\n    >>> find_common_element([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    2\n    >>> find_common_element([5, 3, 2, 8], [3, 2])\n    2\n\n    \"\"\"\n    common = common(l1, l2)\n    if len(common) > 1:\n        return common.index(common[1])\n    else:\n        return 0\n\n\ndef find_common_element_2(l1: list, l2: list):\n    \"\"\"Return the index of the common element.\n    >>> find_common_element_2([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    2\n    >>> find_common_element_2([5, 3, 2, 8], [3, 2])\n    2\n\n    \"\"\"\n    common = common(l1, l2)\n    if len(common) > 1:\n        return common.index(common[1])\n    else:\n        return 0\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 6,
      "score": 10.0,
      "candidate": "# TODO: Implement this\n    pass"
    },
    {
      "rank": 7,
      "score": 10.0,
      "candidate": "return sorted(set(l1).intersection(set(l2)))\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 8,
      "score": 10.0,
      "candidate": "return sorted(set(l1) & set(l2))"
    },
    {
      "rank": 9,
      "score": 10.0,
      "candidate": "if not l1 or not l2:\n        return []\n\n    common_set = set(l1) & set(l2)\n    return sorted(list(common_set))\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 10,
      "score": 10.0,
      "candidate": "return sorted(set(l1) & set(l2))\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 11,
      "score": 10.0,
      "candidate": "return sorted(set(l1) & set(l2))\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 12,
      "score": 10.0,
      "candidate": "return sorted(set(l1) & set(l2))\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 13,
      "score": 10.0,
      "candidate": "# Sort both lists by first element.\n    l1.sort()\n    l2.sort()\n    return [x for x in l1 if x in l2]\n\n\ndef common_sort(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    # Sort both lists by first element.\n    l1.sort()\n    l2.sort()\n    return [x for x in l1 if x in l2]"
    },
    {
      "rank": 14,
      "score": 10.0,
      "candidate": "l1.sort()\n    l2.sort()\n\n    common = set()\n    for element in l1:\n        if element in common:\n            continue\n        common.add(element)\n    for element in l2:\n        if element in common:\n            continue\n        common.add(element)\n    return sorted(list(common))\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 15,
      "score": 10.0,
      "candidate": "result = []\n    common_dict = {}\n    for item in l1:\n        if item in common_dict:\n            common_dict[item].append(item)\n        else:\n            common_dict[item] = [item]\n\n    for item in l2:\n        if item in common_dict:\n            result.append(item)\n        else:\n            result.append(common_dict[item][0])\n    return sorted(result)\n\n\ndef main():\n    import doctest\n    doctest.testmod()\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 16,
      "score": 10.0,
      "candidate": "result = []\n    for i in l1:\n        for j in l2:\n            if i == j:\n                result.append(i)\n    return sorted(result)\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 17,
      "score": 10.0,
      "candidate": "common = set(l1) & set(l2)\n    return sorted(common)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 18,
      "score": 10.0,
      "candidate": "set1 = set(l1)\n    set2 = set(l2)\n    return sorted(list(set1.intersection(set2)))\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 19,
      "score": 10.0,
      "candidate": "c = []\n    for i in l1:\n        for j in l2:\n            if i == j:\n                c.append(i)\n    return sorted(c)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 20,
      "score": 10.0,
      "candidate": "common = []\n    for i in range(min(len(l1), len(l2))):\n        if l1[i] == l2[i]:\n            common.append(l1[i])\n        elif l1[i] > l2[i]:\n            common.append(l2[i])\n        elif l1[i] < l2[i]:\n            common.append(l1[i])\n    return sorted(common)\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 21,
      "score": 10.0,
      "candidate": "return sorted(set(l1).intersection(set(l2)))\n\n\ndef main():\n    import doctest\n\n    doctest.testmod()\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 22,
      "score": 10.0,
      "candidate": "c = []\n    i = 0\n    j = 0\n    while i < len(l1) and j < len(l2):\n        if l1[i] == l2[j]:\n            c.append(l1[i])\n            i += 1\n            j += 1\n        elif l1[i] > l2[j]:\n            j += 1\n        elif l1[i] < l2[j]:\n            i += 1\n    return c"
    },
    {
      "rank": 23,
      "score": 10.0,
      "candidate": "return sorted(set(l1) & set(l2))\n\n\ndef common_sort(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common_sort([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common_sort([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    return sorted(set(l1) & set(l2))\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 24,
      "score": 10.0,
      "candidate": "# TODO: implement\n    pass"
    },
    {
      "rank": 25,
      "score": 10.0,
      "candidate": "set1 = set(l1)\n    set2 = set(l2)\n    common = set1.intersection(set2)\n    return sorted(list(common))\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 26,
      "score": 10.0,
      "candidate": "if len(l1) == 0:\n        return l2\n    if len(l2) == 0:\n        return l1\n\n    if l1[0] == l2[0]:\n        return common(l1[1:], l2[1:])\n    if l1[0] > l2[0]:\n        return common(l1, l2[1:])\n\n    return common(l1[1:], l2)\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 27,
      "score": 10.0,
      "candidate": "common = []\n    for i in l1:\n        for j in l2:\n            if i == j:\n                common.append(i)\n    return sorted(common)\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 28,
      "score": 10.0,
      "candidate": "common = []\n    for i in range(min(len(l1), len(l2))):\n        if l1[i] in l2:\n            common.append(l1[i])\n    return sorted(common)\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 29,
      "score": 10.0,
      "candidate": "c = []\n    for i in range(min(len(l1), len(l2))):\n        if l1[i] in l2 and l1[i] not in c:\n            c.append(l1[i])\n    return c\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 30,
      "score": 10.0,
      "candidate": "return sorted(list(set(l1) & set(l2)))\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 31,
      "score": 10.0,
      "candidate": "if len(l1) > len(l2):\n        l1, l2 = l2, l1\n    return sorted(set(l1) & set(l2))\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 32,
      "score": 10.0,
      "candidate": "common_list = []\n    i = 0\n    j = 0\n    while i < len(l1) and j < len(l2):\n        if l1[i] == l2[j]:\n            common_list.append(l1[i])\n            i += 1\n            j += 1\n        elif l1[i] < l2[j]:\n            i += 1\n        else:\n            j += 1\n    return common_list\n\n\ndef main():\n    import doctest\n    doctest.testmod()\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 33,
      "score": 10.0,
      "candidate": "if len(l1) > len(l2):\n        l1, l2 = l2, l1\n\n    common = []\n    i, j = 0, 0\n    while i < len(l1) and j < len(l2):\n        if l1[i] == l2[j]:\n            common.append(l1[i])\n            i += 1\n            j += 1\n        elif l1[i] > l2[j]:\n            i += 1\n        else:\n            j += 1\n    return common\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 34,
      "score": 10.0,
      "candidate": "return sorted(set(l1).intersection(set(l2)))\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 35,
      "score": 10.0,
      "candidate": "common_list = []\n\n    for elem in l1:\n        for other in l2:\n            if elem == other:\n                common_list.append(elem)\n                break\n        else:\n            common_list.append(elem)\n\n    return sorted(common_list)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 36,
      "score": 9.993251387631034,
      "candidate": "return [element for element in l1 if element in l2]"
    },
    {
      "rank": 37,
      "score": 9.982086980445024,
      "candidate": "common_list = []\n    i, j = 0, 0\n    while i < len(l1) and j < len(l2):\n        if l1[i] == l2[j]:\n            common_list.append(l1[i])\n            i += 1\n            j += 1\n        elif l1[i] > l2[j]:\n            i += 1\n        else:\n            j += 1\n    common_list.extend(l2[j:])\n    return sorted(common_list)\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 38,
      "score": 9.94217585880588,
      "candidate": "result = []\n    common_list = list(set(l1) & set(l2))\n    for c in common_list:\n        result.append(c)\n    return result\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 39,
      "score": 9.930867849414408,
      "candidate": "return sorted(set(l1) & set(l2))\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 40,
      "score": 9.907170511668092,
      "candidate": "if len(l1) == 0:\n        return l2\n    if len(l2) == 0:\n        return l1\n\n    if l1[0] == l2[0]:\n        return common(l1[1:], l2[1:])\n\n    common_elements = []\n    for i in range(min(len(l1), len(l2))):\n        if l1[i] == l2[i]:\n            common_elements.append(l1[i])\n    common_elements.sort()\n    return common_elements\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 41,
      "score": 9.887111849756732,
      "candidate": "c = set(l1).intersection(set(l2))\n    return sorted(c)\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 42,
      "score": 9.88293152152541,
      "candidate": "common_set = set(l1) & set(l2)\n    return list(common_set)"
    },
    {
      "rank": 43,
      "score": 9.882923312638333,
      "candidate": "return sorted(set(l1).intersection(set(l2)))\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 44,
      "score": 9.854153125103362,
      "candidate": "common_list = []\n    common_set = set(l1) & set(l2)\n    common_list.append(common_set.pop())\n    for element in common_set:\n        common_list.append(element)\n    return sorted(common_list)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 45,
      "score": 9.850496324767066,
      "candidate": "common = []\n    if len(l1) > len(l2):\n        l1, l2 = l2, l1\n    for i in range(min(len(l1), len(l2))):\n        if l1[i] == l2[i]:\n            common.append(l1[i])\n    return common\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 46,
      "score": 9.845393812074393,
      "candidate": "return sorted(set(l1).intersection(set(l2)))\n\n\ndef test_common():\n    assert common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653]\n    assert common([5, 3, 2, 8], [3, 2]) == [2, 3]"
    },
    {
      "rank": 47,
      "score": 9.807458859791842,
      "candidate": "common_elements = []\n    for element in l1:\n        if element in l2:\n            common_elements.append(element)\n    return sorted(common_elements)\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 48,
      "score": 9.803945923433922,
      "candidate": "return sorted(set(l1).intersection(set(l2)))\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 49,
      "score": 9.769680614520107,
      "candidate": "set_1 = set(l1)\n    set_2 = set(l2)\n    return sorted(list(set_1.intersection(set_2)))"
    },
    {
      "rank": 50,
      "score": 9.76713512321487,
      "candidate": "return sorted(set(l1) & set(l2))\n\n\ndef main():\n    import doctest\n\n    doctest.testmod()\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 51,
      "score": 9.765262807032524,
      "candidate": "common_list = []\n    if len(l1)!= len(l2):\n        return []\n    for i in range(min(len(l1), len(l2))):\n        if l1[i] == l2[i]:\n            common_list.append(l1[i])\n    return sorted(common_list)\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 52,
      "score": 9.760412881077356,
      "candidate": "return sorted(set(l1) & set(l2))\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 53,
      "score": 9.749121478207732,
      "candidate": "c = []\n    for i in range(min(len(l1), len(l2))):\n        if l1[i] in l2:\n            c.append(l1[i])\n    return c\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 54,
      "score": 9.73511989811648,
      "candidate": "return [i for i in l1 if i in l2]"
    },
    {
      "rank": 55,
      "score": 9.72780863773741,
      "candidate": "common = []\n    i = 0\n    j = 0\n    while i < len(l1) and j < len(l2):\n        if l1[i] == l2[j]:\n            common.append(l1[i])\n            i += 1\n            j += 1\n        elif l1[i] < l2[j]:\n            i += 1\n        else:\n            j += 1\n    return common\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 56,
      "score": 9.718856235379514,
      "candidate": "common_list = []\n    common_list.append(l1[0])\n    for i in range(len(l1)):\n        if l1[i] in l2:\n            common_list.append(l1[i])\n            l2.remove(l1[i])\n    common_list.sort()\n    return common_list\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 57,
      "score": 9.699680655040597,
      "candidate": "common = []\n    for i in range(len(l1)):\n        if l1[i] in l2:\n            common.append(l1[i])\n    return sorted(common)\n\n\ndef merge(l1: list, l2: list):\n    \"\"\"Return sorted unique elements for two lists.\n    >>> merge([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> merge([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    common = common(l1, l2)\n    return sorted(set(common))\n\n\ndef merge_sort(l: list):\n    \"\"\"Return sorted unique elements for two lists.\n    >>> merge_sort([1, 4, 3, 34, 653, 2, 5])\n    [1, 5, 653]\n    >>> merge_sort([5, 3, 2, 8])\n    [2, 3]\n\n    \"\"\"\n    if len(l) == 1:\n        return l\n    mid = len(l) // 2\n    l1 = l[:mid]\n    l2 = l[mid:]\n    return merge_sort(l1) + merge_sort(l2)\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 58,
      "score": 9.699146693885302,
      "candidate": "return sorted(set(l1) & set(l2))\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 59,
      "score": 9.677440122697439,
      "candidate": "common_list = []\n    for item in l1:\n        for item2 in l2:\n            if item == item2:\n                common_list.append(item)\n    return sorted(common_list)\n\n\ndef main():\n    import doctest\n    doctest.testmod()\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 60,
      "score": 9.661538999847021,
      "candidate": "return list(set(l1) & set(l2))"
    },
    {
      "rank": 61,
      "score": 9.648973453061323,
      "candidate": "common_list = []\n    for x in l1:\n        for y in l2:\n            if x == y:\n                common_list.append(x)\n    return sorted(list(set(common_list)))\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 62,
      "score": 9.58039123838868,
      "candidate": "return sorted(set(l1) & set(l2))\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 63,
      "score": 9.545987962239394,
      "candidate": "common = []\n    for i in range(len(l1)):\n        if l1[i] in l2:\n            common.append(l1[i])\n    return sorted(common)\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 64,
      "score": 9.493584439832787,
      "candidate": "return list(set(l1) & set(l2))\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 65,
      "score": 9.47114453552205,
      "candidate": "l1 = sorted(set(l1))\n    l2 = sorted(set(l2))\n    if len(l1) == 0:\n        return l2\n    if len(l2) == 0:\n        return l1\n    if l1[0] == l2[0]:\n        return common(l1[1:], l2[1:])\n    return [l1[0]] + common(l1[1:], l2)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 66,
      "score": 9.446832512996986,
      "candidate": "common = []\n    for i in l1:\n        for j in l2:\n            if i == j:\n                common.append(i)\n    return sorted(common)\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 67,
      "score": 9.42450321128885,
      "candidate": "c = []\n    for i in range(len(l1)):\n        if l1[i] in l2:\n            c.append(l1[i])\n    return sorted(set(c))\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 68,
      "score": 9.401896687959665,
      "candidate": "assert len(l1) == len(l2)\n    if len(l1) == 0:\n        return l2\n    if len(l2) == 0:\n        return l1\n    if l1[0] == l2[0]:\n        return common(l1[1:], l2[1:])\n    if l1[0] > l2[0]:\n        return common(l1, l2[1:])\n    else:\n        return common(l1[1:], l2)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 69,
      "score": 9.389578175014488,
      "candidate": "common = set(l1) & set(l2)\n    return sorted(common)\n\n\ndef find_common_common_element(l1: list, l2: list):\n    \"\"\"Return the first element common to both lists.\n    >>> find_common_common_element([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    1\n    >>> find_common_common_element([5, 3, 2, 8], [3, 2])\n    2\n    >>> find_common_common_element([5, 3, 2, 8], [1, 3])\n    3\n    >>> find_common_common_element([5, 3, 2, 8], [2, 3])\n    8\n\n    \"\"\"\n    common = common(l1, l2)\n    return common[0] if common else None\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 70,
      "score": 9.293848149332355,
      "candidate": "l1.sort()\n    l2.sort()\n    common = set(l1[0]) & set(l2[0])\n    for i in range(1, len(l1)):\n        if l1[i]!= common:\n            return []\n    return sorted(list(common))"
    },
    {
      "rank": 71,
      "score": 9.287625906893272,
      "candidate": "if len(l1) == 0:\n        return l2\n    elif len(l2) == 0:\n        return l1\n\n    common = []\n    for item in l1:\n        if item in l2:\n            common.append(item)\n    return sorted(common)\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 72,
      "score": 9.260739004816287,
      "candidate": "common_list = []\n    for x in l1:\n        for y in l2:\n            if x == y:\n                common_list.append(x)\n    return sorted(common_list)"
    },
    {
      "rank": 73,
      "score": 9.118479922318633,
      "candidate": "return list(set(l1) & set(l2))\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 74,
      "score": 9.0433598776711,
      "candidate": "return sorted(set(l1).intersection(set(l2)))\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 75,
      "score": 9.020164938060113,
      "candidate": "if len(l1) > len(l2):\n        l1, l2 = l2, l1\n    result = []\n    while l1:\n        if l1[0] in l2:\n            result.append(l1[0])\n            l1.remove(l1[0])\n        else:\n            break\n    return result\n\n\ndef main():\n    import doctest\n    doctest.testmod()\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 76,
      "score": 9.006215542699554,
      "candidate": "c = []\n    for i in l1:\n        for j in l2:\n            if i == j:\n                c.append(i)\n    return sorted(c)\n\n\ndef main():\n    import doctest\n    doctest.testmod()\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 77,
      "score": 8.85194564503641,
      "candidate": "return sorted(set(l1) & set(l2))"
    },
    {
      "rank": 78,
      "score": 8.766887173607186,
      "candidate": "common_list = []\n    for i in range(min(len(l1), len(l2))):\n        if l1[i] == l2[i]:\n            common_list.append(l1[i])\n    return sorted(common_list)"
    },
    {
      "rank": 79,
      "score": 8.690127447955128,
      "candidate": "common = []\n    i, j = 0, 0\n    while i < len(l1) and j < len(l2):\n        if l1[i] == l2[j]:\n            common.append(l1[i])\n            i += 1\n            j += 1\n        elif l1[i] > l2[j]:\n            j += 1\n        elif l1[i] < l2[j]:\n            i += 1\n    return common\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 80,
      "score": 8.671264339393554,
      "candidate": "common = []\n    for item in l1:\n        if item in l2:\n            common.append(item)\n    common.sort()\n    return common"
    },
    {
      "rank": 81,
      "score": 8.613280084858085,
      "candidate": "return [element for element in set(l1) & set(l2) if l1.count(element) == l2.count(element)]"
    },
    {
      "rank": 82,
      "score": 8.524004369954923,
      "candidate": "return sorted(list(set(l1) & set(l2)))\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 83,
      "score": 8.523951477656295,
      "candidate": "return list(set(l1) & set(l2))"
    },
    {
      "rank": 84,
      "score": 8.52300921017703,
      "candidate": "common_list = []\n    i = 0\n    j = 0\n    while i < len(l1) and j < len(l2):\n        if l1[i] == l2[j]:\n            common_list.append(l1[i])\n            i += 1\n            j += 1\n        elif l1[i] < l2[j]:\n            i += 1\n        else:\n            j += 1\n    return common_list\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 85,
      "score": 8.50187660432402,
      "candidate": "return sorted(set(l1) & set(l2))\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 86,
      "score": 8.482145466306239,
      "candidate": "return list(set(l1) & set(l2))"
    },
    {
      "rank": 87,
      "score": 8.465801505301014,
      "candidate": "common = []\n    for i in range(min(len(l1), len(l2))):\n        if l1[i] in l2:\n            common.append(l1[i])\n    return sorted(common)"
    },
    {
      "rank": 88,
      "score": 8.459300649475788,
      "candidate": "return sorted(set(l1).intersection(set(l2)))"
    },
    {
      "rank": 89,
      "score": 8.42860221769677,
      "candidate": "return sorted(set(l1) & set(l2))\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 90,
      "score": 8.396116629120192,
      "candidate": "return sorted(set(l1) & set(l2))\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 91,
      "score": 8.3782016314148,
      "candidate": "return [x for x in l1 if x in l2]"
    },
    {
      "rank": 92,
      "score": 8.372358772192936,
      "candidate": "c = []\n    for i in l1:\n        if i in l2:\n            c.append(i)\n    return c\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 93,
      "score": 8.342492552025703,
      "candidate": "return sorted(set(l1).intersection(l2))\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 94,
      "score": 8.330424996424242,
      "candidate": "return sorted(set(l1) & set(l2))\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 95,
      "score": 8.286078718597608,
      "candidate": "return sorted(set(l1).intersection(set(l2)))\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 96,
      "score": 8.266575851807943,
      "candidate": "return sorted(list(set(l1) & set(l2)))"
    },
    {
      "rank": 97,
      "score": 8.15224351368679,
      "candidate": "return sorted(set(l1).intersection(set(l2)))"
    },
    {
      "rank": 98,
      "score": 8.12247115585538,
      "candidate": "common_list = list(set(l1).intersection(l2))\n    return sorted(common_list)"
    },
    {
      "rank": 99,
      "score": 8.064962521291577,
      "candidate": "result = []\n    l1.sort()\n    l2.sort()\n    if len(l1) == 0:\n        return l2\n    if len(l2) == 0:\n        return l1\n    if l1[0] == l2[0]:\n        result.append(l1[0])\n        return common(l1[1:], l2[1:])\n    for i in range(len(l1)):\n        if l1[i] == l2[0]:\n            result.append(l1[i])\n            return common(l1[i + 1:], l2[1:])\n    return result"
    },
    {
      "rank": 100,
      "score": 3.0,
      "candidate": "return sorted(set(l1).intersection(set(l2)))\n\n\ndef intersection(l1: list, l2: list):\n    \"\"\"Return sorted unique elements for two lists.\n    >>> intersection([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> intersection([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    return sorted(set(l1).intersection(set(l2)))"
    }
  ]
}