{
  "timestamp": "2025-09-14T11:30:52.103576",
  "method": "improved_llm_judge",
  "judge_model": "codellama/CodeLlama-7b-Python-hf",
  "target_model": "codet5-770m",
  "dataset": "humaneval",
  "problem_number": 34,
  "total_candidates": 100,
  "results": [
    {
      "rank": 1,
      "score": 10.0,
      "candidate": "seen = set()\n    seen_add = seen.add\n    return [x for x in l if not (x in seen or seen_add(x))]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 2,
      "score": 10.0,
      "candidate": "seen = set()\n    seen_add = seen.add\n    return [x for x in l if not (x in seen or seen_add(x))]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 3,
      "score": 10.0,
      "candidate": "seen = set()\n    seen_add = seen.add\n    return [x for x in l if not (x in seen or seen_add(x))]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 4,
      "score": 10.0,
      "candidate": "return sorted(set(l))\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 5,
      "score": 10.0,
      "candidate": "seen = set()\n    seen_add = seen.add\n    return [x for x in l if not (x in seen or seen_add(x))]"
    },
    {
      "rank": 6,
      "score": 10.0,
      "candidate": "return sorted(set(l))\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 7,
      "score": 10.0,
      "candidate": "return sorted(set(l))\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 8,
      "score": 10.0,
      "candidate": "seen = set()\n    seen_add = seen.add\n    return [x for x in l if not (x in seen or seen_add(x))]"
    },
    {
      "rank": 9,
      "score": 10.0,
      "candidate": "seen = set()\n    seen_add = seen.add\n    return [x for x in l if not (x in seen or seen_add(x))]\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 10,
      "score": 10.0,
      "candidate": "seen = set()\n    return [x for x in l if x not in seen and not seen.add(x)]\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 11,
      "score": 10.0,
      "candidate": "seen = set()\n    seen_add = seen.add\n    return [x for x in l if not (x in seen or seen_add(x))]\n\n\ndef find_unique_numbers(l: list):\n    \"\"\"Return sorted unique numbers in a list\n    >>> find_unique_numbers([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    seen = set()\n    seen_add = seen.add\n    seen_remove = seen.remove\n    return [x for x in l if not (x in seen or seen_add(x)) and not (x in seen_remove(x))]\n\n\ndef find_unique_numbers_reversed(l: list):\n    \"\"\"Return sorted unique numbers in a list\n    >>> find_unique_numbers_reversed([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    seen = set()\n    seen_add = seen.add\n    seen_remove = seen.remove\n    return [x for x in reversed(l) if not (x in seen or seen_add(x)) and not (x in seen_remove(x))]\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 12,
      "score": 10.0,
      "candidate": "seen = set()\n    return [x for x in l if x not in seen and not seen.add(x)]\n\n\nif __name__ == '__main__':\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 13,
      "score": 10.0,
      "candidate": "return sorted(set(l))\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 14,
      "score": 10.0,
      "candidate": "seen = set()\n    seen_add = seen.add\n    return [x for x in l if not (x in seen or seen_add(x))]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 15,
      "score": 10.0,
      "candidate": "if len(l) == 1:\n        return [l[0]]\n    else:\n        return sorted(set(l))\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 16,
      "score": 10.0,
      "candidate": "seen = set()\n    seen_add = seen.add\n    return sorted(\n        (x for x in l if not (x in seen or seen_add(x))),\n        key=lambda x: seen_add(x),\n    )\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 17,
      "score": 10.0,
      "candidate": "seen = set()\n    seen_add = seen.add\n    return [x for x in l if not (x in seen or seen_add(x))]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 18,
      "score": 10.0,
      "candidate": "seen = set()\n    seen_add = seen.add\n    return sorted(set(i for i in l if i not in seen and not seen_add(i)))\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 19,
      "score": 10.0,
      "candidate": "seen = set()\n    seen_add = seen.add\n    return sorted(set(x for x in l if not (x in seen or seen_add(x))))\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 20,
      "score": 10.0,
      "candidate": "unique_l = []\n    for el in l:\n        if el not in unique_l:\n            unique_l.append(el)\n    return unique_l\n\n\ndef main():\n    import doctest\n    doctest.testmod()\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 21,
      "score": 10.0,
      "candidate": "seen = set()\n    return sorted(list(seen.union(set(l))))\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 22,
      "score": 9.983520022009422,
      "candidate": "seen = set()\n    seen_add = seen.add\n    return [x for x in l if not (x in seen or seen_add(x))]"
    },
    {
      "rank": 23,
      "score": 9.914596870734645,
      "candidate": "seen = set()\n    seen_add = seen.add\n    return [x for x in l if not (x in seen or seen_add(x))]"
    },
    {
      "rank": 24,
      "score": 9.898950931594744,
      "candidate": "return list(set(l))\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 25,
      "score": 9.896142901776194,
      "candidate": "unique_list = []\n    for i in l:\n        if i not in unique_list:\n            unique_list.append(i)\n    return unique_list\n\n\ndef main():\n    import doctest\n\n    doctest.testmod()\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 26,
      "score": 9.861492300028926,
      "candidate": "return sorted(set(l))\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 27,
      "score": 9.857762307108441,
      "candidate": "seen = set()\n    return [x for x in l if x not in seen and not seen.add(x)]\n\n\ndef main():\n    import doctest\n\n    doctest.testmod()\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 28,
      "score": 9.849275412565026,
      "candidate": "seen = set()\n    seen_add = seen.add\n    return [x for x in l if not (x in seen or seen_add(x))]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 29,
      "score": 9.822862151008495,
      "candidate": "seen = set()\n    return [x for x in l if not (x in seen or seen.add(x))]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 30,
      "score": 9.819630249559207,
      "candidate": "seen = set()\n    return [x for x in l if x not in seen and not seen.add(x)]\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 31,
      "score": 9.784041782469922,
      "candidate": "seen = set()\n    seen_add = seen.add\n    return [x for x in l if x not in seen and not seen_add(x)]\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 32,
      "score": 9.769191759951113,
      "candidate": "if len(l) == 1:\n        return [l[0]]\n\n    seen = set()\n    seen_add = seen.add\n    return [x for x in l if not (x in seen or seen_add(x))]\n\n\ndef unique_1(l: list):\n    \"\"\"Return sorted unique elements in a list\n    >>> unique_1([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    if len(l) == 1:\n        return [l[0]]\n\n    seen = set()\n    seen_add = seen.add\n    return [x for x in l if not (x in seen or seen_add(x))]\n\n\ndef unique_2(l: list):\n    \"\"\"Return sorted unique elements in a list\n    >>> unique_2([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    if len(l) == 1:\n        return [l[0]]\n\n    seen = set()\n    seen_add = seen.add\n    return [x for x in l if not (x in seen or seen_add(x))]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 33,
      "score": 9.756310306267162,
      "candidate": "seen = set()\n    seen_add = seen.add\n    return [x for x in l if not (x in seen or seen_add(x))]\n\n\ndef unique_2(l: list):\n    \"\"\"Return sorted unique elements in a list\n    >>> unique_2([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    seen = set()\n    seen_add = seen.add\n    return [x for x in l if not (x in seen or seen_add(x))]"
    },
    {
      "rank": 34,
      "score": 9.741347736549152,
      "candidate": "seen = set()\n    seen_add = seen.add\n    return [x for x in l if x not in seen and not seen_add(x)]\n\n\ndef unique_list(l: list):\n    \"\"\"Return sorted unique elements in a list\n    >>> unique_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    seen = set()\n    seen_add = seen.add\n    return sorted(list(set(l) - seen))"
    },
    {
      "rank": 35,
      "score": 9.703244912881642,
      "candidate": "return sorted(set(l))\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 36,
      "score": 9.68861587985926,
      "candidate": "seen = set()\n    seen_add = seen.add\n    return [x for x in l if not (x in seen or seen_add(x))]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 37,
      "score": 9.677055576816418,
      "candidate": "seen = set()\n    seen_add = seen.add\n\n    for element in l:\n        if element not in seen:\n            seen_add(element)\n            yield element\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 38,
      "score": 9.668871664138434,
      "candidate": "seen = set()\n    seen_add = seen.add\n    return [x for x in l if not (x in seen or seen_add(x))]\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 39,
      "score": 9.613959939317587,
      "candidate": "seen = set()\n    seen_add = seen.add\n    return [x for x in l if not (x in seen or seen_add(x))]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 40,
      "score": 9.582308925260243,
      "candidate": "seen = set()\n    seen_add = seen.add\n    return [x for x in l if x not in seen and not seen_add(x)]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 41,
      "score": 9.47054295438574,
      "candidate": "return sorted(set(l))\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 42,
      "score": 9.389034417506721,
      "candidate": "seen = set()\n    seen_add = seen.add\n    return [x for x in l if not (x in seen or seen_add(x))]\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 43,
      "score": 9.319879884430984,
      "candidate": "unique_list = []\n    for element in l:\n        if element not in unique_list:\n            unique_list.append(element)\n    return unique_list\n\n\ndef main():\n    import doctest\n    doctest.testmod()\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 44,
      "score": 9.234050852198141,
      "candidate": "seen = set()\n    seen_add = seen.add\n    return [x for x in l if not (x in seen or seen_add(x))]"
    },
    {
      "rank": 45,
      "score": 9.21346272767743,
      "candidate": "seen = set()\n    seen_add = seen.add\n    return [x for x in l if x not in seen and not seen_add(x)]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 46,
      "score": 9.206537797044005,
      "candidate": "seen = set()\n    seen_add = seen.add\n    return [x for x in l if not (x in seen or seen_add(x))]"
    },
    {
      "rank": 47,
      "score": 9.205959372648458,
      "candidate": "seen = set()\n    seen_add = seen.add\n    return [x for x in l if x not in seen and not seen_add(x)]"
    },
    {
      "rank": 48,
      "score": 9.189001528533142,
      "candidate": "l.sort()\n    return [x for x in l if l.count(x) == 1]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 49,
      "score": 9.183391466815202,
      "candidate": "return sorted(set(l))\n\n\ndef unique_in_list(l: list):\n    \"\"\"Return sorted unique elements in a list\n    >>> unique_in_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    return sorted(set(l))"
    },
    {
      "rank": 50,
      "score": 9.177268828905222,
      "candidate": "seen = set()\n    seen_add = seen.add\n    return [x for x in l if x not in seen and not seen_add(x)]"
    },
    {
      "rank": 51,
      "score": 9.098551743015303,
      "candidate": "seen = set()\n    seen_add = seen.add\n    return sorted(list(seen_add(e) for e in l))\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 52,
      "score": 8.973005557553902,
      "candidate": "seen = set()\n    return [x for x in l if x not in seen and not seen.add(x)]"
    },
    {
      "rank": 53,
      "score": 8.95994420569242,
      "candidate": "seen = set()\n    seen_add = seen.add\n    return [x for x in l if not (x in seen or seen_add(x))]"
    },
    {
      "rank": 54,
      "score": 8.932217008005624,
      "candidate": "seen = set()\n    seen_add = seen.add\n    return [x for x in l if not (x in seen or seen_add(x))]\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 55,
      "score": 8.92876693971089,
      "candidate": "seen = set()\n    seen_add = seen.add\n    return [x for x in l if not (x in seen or seen_add(x))]\n\n\ndef unique_2(l: list):\n    \"\"\"Return sorted unique elements in a list\n    >>> unique_2([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    seen = set()\n    seen_add = seen.add\n    return [x for x in l if not (x in seen or seen_add(x))]"
    },
    {
      "rank": 56,
      "score": 8.902145503295483,
      "candidate": "unique_list = []\n    for item in l:\n        if item not in unique_list:\n            unique_list.append(item)\n    return unique_list"
    },
    {
      "rank": 57,
      "score": 8.85571690049604,
      "candidate": "seen = set()\n    return [x for x in l if x not in seen and not seen.add(x)]"
    },
    {
      "rank": 58,
      "score": 8.850707355641543,
      "candidate": "if len(l) == 0:\n        return []\n    else:\n        seen = set()\n        seen_add = seen.add\n        return [x for x in l if x not in seen and not seen_add(x)]"
    },
    {
      "rank": 59,
      "score": 8.8281618090209,
      "candidate": "seen = set()\n    seen_add = seen.add\n    return [x for x in l if x not in seen and not seen_add(x)]"
    },
    {
      "rank": 60,
      "score": 8.76828871349479,
      "candidate": "if len(l) == 0:\n        return []\n    res = []\n    for i in l:\n        if i not in res:\n            res.append(i)\n    return res\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 61,
      "score": 8.632293453617281,
      "candidate": "seen = set()\n    return sorted(list(seen.union(set(l))))\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 62,
      "score": 8.616253589228675,
      "candidate": "seen = set()\n    return [x for x in l if not (x in seen or seen.add(x))]\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 63,
      "score": 8.606486429141842,
      "candidate": "unique_list = []\n    for i in l:\n        if i not in unique_list:\n            unique_list.append(i)\n    return unique_list\n\n\nif __name__ == '__main__':\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 64,
      "score": 8.60156811074208,
      "candidate": "seen = set()\n    seen_add = seen.add\n    return sorted(list(seen_add(x) for x in l))\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 65,
      "score": 8.542875062379007,
      "candidate": "seen = set()\n    return [x for x in l if x not in seen and not seen.add(x)]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 66,
      "score": 8.499905739299377,
      "candidate": "return sorted(set(l))\n\n\ndef main():\n    import doctest\n\n    doctest.testmod()\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 67,
      "score": 8.492983219118464,
      "candidate": "return sorted(set(l))\n\n\ndef unique_v1(l: list):\n    \"\"\"Return sorted unique elements in a list\n    >>> unique_v1([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    return sorted(set(l))\n\n\ndef unique_v2(l: list):\n    \"\"\"Return sorted unique elements in a list\n    >>> unique_v2([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    return sorted(set(l))"
    },
    {
      "rank": 68,
      "score": 8.48796797856353,
      "candidate": "return sorted(set(l))\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 69,
      "score": 8.437695832075478,
      "candidate": "seen = set()\n    seen_add = seen.add\n    return [x for x in l if not (x in seen or seen_add(x))]\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 70,
      "score": 8.408439383654278,
      "candidate": "seen = set()\n    seen_add = seen.add\n    return sorted(\n        i for i in l if not (i in seen or seen_add(i))\n    )"
    },
    {
      "rank": 71,
      "score": 8.386620303250325,
      "candidate": "seen = set()\n    seen_add = seen.add\n    return [x for x in l if not (x in seen or seen_add(x))]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 72,
      "score": 8.375312293858853,
      "candidate": "seen = set()\n    seen_add = seen.add\n    return [x for x in l if not (x in seen or seen_add(x))]"
    },
    {
      "rank": 73,
      "score": 8.327375965969855,
      "candidate": "seen = set()\n    seen_add = seen.add\n    return [x for x in l if x not in seen and not seen_add(x)]\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 74,
      "score": 8.327367757082776,
      "candidate": "seen = set()\n    seen_add = seen.add\n    return [x for x in l if not (x in seen or seen_add(x))]"
    },
    {
      "rank": 75,
      "score": 8.298597569547805,
      "candidate": "seen = set()\n    seen_add = seen.add\n    return [x for x in l if x not in seen and not seen_add(x)]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 76,
      "score": 8.294940769211511,
      "candidate": "unique_list = []\n    for i in l:\n        if i not in unique_list:\n            unique_list.append(i)\n    return unique_list\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 77,
      "score": 8.214125058964552,
      "candidate": "seen = set()\n    seen_add = seen.add\n    return [x for x in l if not (x in seen or seen_add(x))]"
    },
    {
      "rank": 78,
      "score": 8.212735598038213,
      "candidate": "seen = set()\n    return [i for i in l if not (i in seen or seen.add(i))]"
    },
    {
      "rank": 79,
      "score": 8.211579567659316,
      "candidate": "seen = set()\n    return [v for v in l if v not in seen and not seen.add(v)]"
    },
    {
      "rank": 80,
      "score": 8.2048573255218,
      "candidate": "seen = set()\n    seen_add = seen.add\n    return [x for x in l if x not in seen and not seen_add(x)]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 81,
      "score": 8.185309335307622,
      "candidate": "return list(set(l))\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 82,
      "score": 8.172253082181854,
      "candidate": "seen = set()\n    seen_add = seen.add\n    return [x for x in l if not (x in seen or seen_add(x))]\n\n\ndef main():\n    import doctest\n    doctest.testmod()\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 83,
      "score": 8.144125099485041,
      "candidate": "seen = set()\n    seen_add = seen.add\n    return [x for x in l if x not in seen and not seen_add(x)]"
    },
    {
      "rank": 84,
      "score": 8.143591138329747,
      "candidate": "return sorted(set(l))"
    },
    {
      "rank": 85,
      "score": 8.040197642997851,
      "candidate": "unique_list = []\n    for i in l:\n        if i not in unique_list:\n            unique_list.append(i)\n    return unique_list\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 86,
      "score": 7.938028884277233,
      "candidate": "seen = set()\n    return [x for x in l if not (x in seen or seen.add(x))]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 87,
      "score": 7.915588979966494,
      "candidate": "l.sort()\n    return l\n\n\ndef find_duplicates(l: list):\n    \"\"\"Return list of unique elements in a list\n    >>> find_duplicates([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    l.sort()\n    return [i for i, x in enumerate(l) if x!= l[i - 1]]"
    },
    {
      "rank": 88,
      "score": 7.8912769574414305,
      "candidate": "seen = set()\n    seen_add = seen.add\n    return [x for x in l if x not in seen and not seen_add(x)]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 89,
      "score": 7.84634113240411,
      "candidate": "unique = set(l)\n    return sorted(list(unique))\n\n\ndef main():\n    l = [5, 3, 5, 2, 3, 3, 9, 0, 123]\n    print(unique(l))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 90,
      "score": 7.834022619458933,
      "candidate": "seen = set()\n    seen_add = seen.add\n    return sorted(set(x for x in l if x not in seen and not seen_add(x)))\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 91,
      "score": 7.738292593776799,
      "candidate": "seen = set()\n    seen_add = seen.add\n    return [x for x in l if not (x in seen or seen_add(x))]\n\n\ndef unique_from_list(l: list):\n    \"\"\"Return sorted unique elements in a list\n    >>> unique_from_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    return sorted(set(l))\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 92,
      "score": 7.7320703513377165,
      "candidate": "seen = set()\n    seen_add = seen.add\n    return sorted(list(seen_add(x) for x in l if x not in seen))\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 93,
      "score": 7.712686970378385,
      "candidate": "return sorted(set(l))"
    },
    {
      "rank": 94,
      "score": 7.4878043221155455,
      "candidate": "seen = set()\n    seen_add = seen.add\n    return [x for x in l if not (x in seen or seen_add(x))]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 95,
      "score": 7.4506599871439985,
      "candidate": "seen = set()\n    seen_add = seen.add\n    return [x for x in l if not (x in seen or seen_add(x))]"
    },
    {
      "rank": 96,
      "score": 7.134571892399572,
      "candidate": "seen = set()\n    seen_add = seen.add\n    return sorted(\n        x for x in l if x not in seen and not seen_add(x)\n    )\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 97,
      "score": 3.0,
      "candidate": "return sorted(set(l))\n\n\ndef unique_list(l: list):\n    \"\"\"Return unique elements in a list\n    >>> unique_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    return sorted(set(l))\n\n\ndef unique_dict(d: dict):\n    \"\"\"Return unique elements in a dict\n    >>> unique_dict({'a': 5, 'b': 3, 'c': 5, 'd': 2, 'e': 3, 'f': 3, 'g': 9, 'h': 0, 'i': 123})\n    {0: 5, 2: 3, 3: 5, 5: 9, 9: 123}\n    \"\"\"\n    return sorted(set(d.values()))"
    },
    {
      "rank": 98,
      "score": 3.0,
      "candidate": "return sorted(set(l))\n\n\ndef sort_by_value(l: list):\n    \"\"\"Return a list sorted by value\n    >>> sort_by_value([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    return sorted(l, key=lambda x: l.index(x))\n\n\ndef sort_by_value_in_ascending_order(l: list):\n    \"\"\"Return a list sorted by value in ascending order\n    >>> sort_by_value_in_ascending_order([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    return sorted(l, key=lambda x: l.index(x), reverse=True)"
    },
    {
      "rank": 99,
      "score": 3.0,
      "candidate": "return sorted(set(l))\n\n\ndef unique_sort(l: list):\n    \"\"\"Return sorted unique elements in a list\n    >>> unique_sort([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    return sorted(set(l))"
    },
    {
      "rank": 100,
      "score": 3.0,
      "candidate": "return sorted(set(l))\n\n\ndef unique_l(l: list):\n    \"\"\"Return sorted unique elements in a list\n    >>> unique_l([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    return sorted(set(l))\n\n\ndef unique_l_v2(l: list):\n    \"\"\"Return sorted unique elements in a list\n    >>> unique_l_v2([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    return sorted(set(l))"
    }
  ]
}