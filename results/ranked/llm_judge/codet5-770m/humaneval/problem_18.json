{
  "timestamp": "2025-09-14T11:23:50.211359",
  "method": "improved_llm_judge",
  "judge_model": "codellama/CodeLlama-7b-Python-hf",
  "target_model": "codet5-770m",
  "dataset": "humaneval",
  "problem_number": 18,
  "total_candidates": 100,
  "results": [
    {
      "rank": 1,
      "score": 10.0,
      "candidate": "count = 0\n    for i in range(len(string)):\n        if string[i:i+len(substring)] == substring:\n            count += 1\n    return count\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 2,
      "score": 10.0,
      "candidate": "return string.count(substring)\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 3,
      "score": 10.0,
      "candidate": "count = 0\n    for i in range(len(string)):\n        if string[i:i+len(substring)] == substring:\n            count += 1\n    return count\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 4,
      "score": 10.0,
      "candidate": "if not string or not substring:\n        return 0\n\n    string_index = 0\n    substring_index = 0\n\n    while substring_index < len(substring):\n        if string[string_index] == substring[substring_index]:\n            substring_index += 1\n            string_index += 1\n        else:\n            if string_index == len(string) - 1:\n                return substring_index - substring_index\n            else:\n                string_index += 1\n\n    return 0\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 5,
      "score": 10.0,
      "candidate": "return string.count(substring)\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 6,
      "score": 10.0,
      "candidate": "count = 0\n    for i in range(len(string) - len(substring) + 1):\n        if string[i:i + len(substring)] == substring:\n            count += 1\n    return count\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 7,
      "score": 10.0,
      "candidate": "return sum(string.count(char) for char in substring)\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 8,
      "score": 10.0,
      "candidate": "count = 0\n    for i in range(len(string) - len(substring) + 1):\n        if string[i:i + len(substring)] == substring:\n            count += 1\n    return count\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 9,
      "score": 10.0,
      "candidate": "if len(string) == 0:\n        return 0\n    if len(substring) == 0:\n        return 1\n    if len(substring) == 1:\n        return string.count(substring)\n    if substring[0] == substring[-1]:\n        return how_many_times(string[1:-1], substring[1:]) + how_many_times(string, substring[:-1])\n    return how_many_times(string[1:-1], substring[:-1]) + how_many_times(string, substring[1:])\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 10,
      "score": 10.0,
      "candidate": "if not string or not substring:\n        return 0\n    start_index = 0\n    end_index = 0\n    count = 0\n    while start_index < len(string) and end_index < len(string):\n        if string[start_index] == substring[0]:\n            if start_index < len(substring) - 1:\n                start_index += 1\n            else:\n                count += 1\n        elif string[start_index] == substring[1]:\n            if end_index < len(substring) - 1:\n                end_index += 1\n            else:\n                count += 1\n        elif string[start_index] == substring[2]:\n            if end_index < len(substring) - 1:\n                end_index += 1\n            else:\n                count += 1\n        start_index += 1\n    return count\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 11,
      "score": 10.0,
      "candidate": "if len(substring) == 0:\n        return 0\n\n    count = 0\n    for i in range(len(string) - len(substring) + 1):\n        if string[i:i + len(substring)] == substring:\n            count += 1\n\n    return count\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 12,
      "score": 10.0,
      "candidate": "if not string or not substring:\n        return 0\n    count = 0\n    for i in range(len(string)):\n        if string[i] == substring:\n            count += 1\n    return count\n\n\nif __name__ == '__main__':\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 13,
      "score": 10.0,
      "candidate": "count = 0\n    start = 0\n    for i in range(len(string)):\n        if string[i:i + len(substring)] == substring:\n            count += 1\n            start = i\n        elif start < 0:\n            return 0\n    return count\n\n\nif __name__ == '__main__':\n    print(how_many_times('', 'a'))\n    print(how_many_times('aaa', 'a'))\n    print(how_many_times('aaaa', 'aa'))"
    },
    {
      "rank": 14,
      "score": 10.0,
      "candidate": "if not string:\n        return 0\n\n    if not substring:\n        return 1\n\n    substring_index = 0\n    substring_count = 0\n\n    for i, char in enumerate(string):\n        if char == substring[0]:\n            substring_index = i\n            substring_count += 1\n\n    if substring_index == len(substring) - 1:\n        return substring_count\n\n    return how_many_times(string[substring_index + 1:], substring)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 15,
      "score": 10.0,
      "candidate": "if substring in string:\n        return string.count(substring)\n    return 0\n\n\ndef how_many_times_iterative(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times_iterative('', 'a')\n    0\n    >>> how_many_times_iterative('aaa', 'a')\n    3\n    >>> how_many_times_iterative('aaaa', 'aa')\n    3\n    \"\"\"\n    if substring in string:\n        return string.count(substring)\n    return 0\n\n\nif __name__ == '__main__':\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 16,
      "score": 10.0,
      "candidate": "if not string:\n        return 0\n    if not substring:\n        return 1\n    start = 0\n    end = 0\n    count = 0\n    while end < len(string):\n        if string[end] == substring[0]:\n            if string[start] == substring[1]:\n                count += 1\n            start += 1\n        end += 1\n    return count\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 17,
      "score": 10.0,
      "candidate": "if not string or not substring:\n        return 0\n\n    string_index = 0\n    substring_index = 0\n\n    while string_index < len(string) and substring_index < len(substring):\n        if string[string_index] == substring[substring_index]:\n            substring_index += 1\n            string_index += 1\n        else:\n            if substring_index == 0:\n                substring_index = 1\n            else:\n                substring_index -= 1\n\n    return substring_index\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 18,
      "score": 10.0,
      "candidate": "count = 0\n    for i in range(len(string) - len(substring) + 1):\n        if string[i:i + len(substring)] == substring:\n            count += 1\n    return count"
    },
    {
      "rank": 19,
      "score": 10.0,
      "candidate": "if len(substring) == 0:\n        return 0\n    count = 0\n    start = 0\n    end = len(string) - 1\n    while start < end:\n        if string[start] == substring[0]:\n            count += 1\n            start += 1\n        elif string[start] == substring[-1]:\n            count -= 1\n            if count == 0:\n                end -= 1\n        else:\n            start += 1\n    return count\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 20,
      "score": 10.0,
      "candidate": "if not string:\n        return 0\n\n    string = string.lower()\n    substring = substring.lower()\n\n    count = 0\n    for i in range(len(string) - len(substring) + 1):\n        if string[i:i + len(substring)] == substring:\n            count += 1\n\n    return count\n\n\nif __name__ == '__main__':\n    string, substring = input().split()\n    print(how_many_times(string, substring))"
    },
    {
      "rank": 21,
      "score": 10.0,
      "candidate": "if len(string) < len(substring):\n        return 0\n\n    count = 0\n    start = 0\n    end = 0\n    while end < len(string):\n        if string[end] == substring[0]:\n            count += 1\n            if count == len(substring):\n                return count\n\n            if string[end + 1] == substring[0]:\n                count += 1\n                if count == len(substring):\n                    return count\n\n            if string[end + 2] == substring[0]:\n                count += 1\n                if count == len(substring):\n                    return count\n\n            if string[end + 3] == substring[0]:\n                count += 1\n                if count == len(substring):\n                    return count\n\n            if string[end + 4] == substring[0]:\n                count += 1\n                if count == len(substring):\n                    return count\n\n        start = end + 1\n        end += 1\n\n    return 0\n\n\nif __name__ == '__main__':\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 22,
      "score": 10.0,
      "candidate": "if len(substring) == 0:\n        return 0\n    count = 0\n    for i in range(len(string)):\n        if string[i:i + len(substring)] == substring:\n            count += 1\n    return count\n\n\nif __name__ == '__main__':\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 23,
      "score": 10.0,
      "candidate": "if not string or not substring:\n        return 0\n    if len(substring) == 1:\n        return string.count(substring)\n\n    substring_start_index = 0\n    substring_end_index = 0\n    string_start_index = 0\n    string_end_index = len(string)\n    count = 0\n\n    while substring_start_index < len(substring) and substring_end_index < len(string):\n        if substring[0] == string[string_start_index]:\n            string_start_index += 1\n            substring_start_index += 1\n        elif substring[0] == string[string_end_index]:\n            string_end_index += 1\n            substring_end_index += 1\n        else:\n            count += 1\n\n    return count\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 24,
      "score": 10.0,
      "candidate": "count = 0\n    for i in range(len(string) - len(substring) + 1):\n        if string[i:i + len(substring)] == substring:\n            count += 1\n    return count\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 25,
      "score": 10.0,
      "candidate": "if len(string) == 0 or len(substring) == 0:\n        return 0\n\n    if string == substring:\n        return 1\n\n    # count all occurrences of substring in the original string\n    count = 0\n    for i in range(len(string)):\n        if string[i:i + len(substring)] == substring:\n            count += 1\n\n    return count\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 26,
      "score": 10.0,
      "candidate": "if substring in string:\n        return string.count(substring)\n    return 0\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 27,
      "score": 10.0,
      "candidate": "if not string:\n        return 0\n\n    if not substring:\n        return 1\n\n    return string.count(substring)\n\n\nif __name__ == '__main__':\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 28,
      "score": 10.0,
      "candidate": "count = 0\n    for index in range(len(string) - len(substring) + 1):\n        if string[index: index + len(substring)] == substring:\n            count += 1\n    return count\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 29,
      "score": 9.993251387631034,
      "candidate": "count = 0\n    for i in range(len(string)):\n        if string[i:i+len(substring)] == substring:\n            count += 1\n    return count\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 30,
      "score": 9.982086980445024,
      "candidate": "count = 0\n    for i in range(len(string) - len(substring) + 1):\n        if string[i: i + len(substring)] == substring:\n            count += 1\n    return count\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 31,
      "score": 9.930867849414408,
      "candidate": "count = 0\n    for i in range(len(string)):\n        if string[i:i+len(substring)] == substring:\n            count += 1\n    return count\n\n\nif __name__ == '__main__':\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 32,
      "score": 9.907170511668092,
      "candidate": "if len(string) < len(substring):\n        return 0\n\n    count = 0\n    i = 0\n    j = 0\n\n    while i < len(string):\n        if string[i] == substring[j]:\n            count += 1\n            j += 1\n        else:\n            if j == len(substring):\n                count += 1\n            j = 0\n        i += 1\n\n    return count\n\n\nif __name__ == '__main__':\n    string = input()\n    substring = input()\n    print(how_many_times(string, substring))"
    },
    {
      "rank": 33,
      "score": 9.890164056081243,
      "candidate": "if len(substring) == 0:\n        return 0\n\n    count = 0\n    for i in range(len(string) - len(substring) + 1):\n        if string[i: i + len(substring)] == substring:\n            count += 1\n\n    return count\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 34,
      "score": 9.887111849756732,
      "candidate": "if len(substring) == 0:\n        return 0\n    if len(string) == 0:\n        return 1\n    if len(substring) == 1:\n        return string.count(substring)\n    if len(substring) == 2:\n        return string.count(substring[0]) + string.count(substring[1])\n    if len(substring) == 3:\n        return string.count(substring[0]) + string.count(substring[1]) + string.count(substring[2])\n    if len(substring) == 4:\n        return string.count(substring[0]) + string.count(substring[1]) + string.count(substring[2]) + string.count(substring[3])\n    return 0\n\n\nif __name__ == '__main__':\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 35,
      "score": 9.88293152152541,
      "candidate": "if not string:\n        return 0\n    if not substring:\n        return 1\n    count = 0\n    for i in range(len(string) - len(substring) + 1):\n        if string[i:i + len(substring)] == substring:\n            count += 1\n    return count\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 36,
      "score": 9.854153125103362,
      "candidate": "count = 0\n    for i in range(len(string) - len(substring) + 1):\n        if string[i:i + len(substring)] == substring:\n            count += 1\n    return count\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 37,
      "score": 9.850496324767066,
      "candidate": "n = len(string)\n    m = len(substring)\n    count = 0\n    for i in range(n - m + 1):\n        if string[i:i + m] == substring:\n            count += 1\n    return count\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 38,
      "score": 9.849448152205355,
      "candidate": "count = 0\n    for i in range(len(string)):\n        if string[i:i + len(substring)] == substring:\n            count += 1\n    return count\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 39,
      "score": 9.845393812074393,
      "candidate": "count = 0\n    for i in range(len(string) - len(substring) + 1):\n        if string[i:i + len(substring)] == substring:\n            count += 1\n    return count\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 40,
      "score": 9.807458859791842,
      "candidate": "substring_count = 0\n    for i in range(len(string)):\n        if string[i:i+len(substring)] == substring:\n            substring_count += 1\n    return substring_count\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 41,
      "score": 9.803945923433922,
      "candidate": "count = 0\n    i = 0\n    j = 0\n    while i < len(string) and j < len(substring):\n        if string[i] == substring[j]:\n            count += 1\n            i += 1\n            j += 1\n        elif string[i] == substring[j] and i < len(string) - 1:\n            i += 1\n        elif string[i] == substring[j] and i > 0:\n            i -= 1\n        elif string[i] == substring[j] and i == 0:\n            j += 1\n    return count\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 42,
      "score": 9.769680614520107,
      "candidate": "count = 0\n    for i in range(len(string) - len(substring) + 1):\n        if string[i:i + len(substring)] == substring:\n            count += 1\n    return count"
    },
    {
      "rank": 43,
      "score": 9.740864890863175,
      "candidate": "if substring == '':\n        return 0\n    if substring not in string:\n        return 0\n    i = 0\n    j = 0\n    while i < len(string) - len(substring):\n        if string[i + len(substring)] == substring[0]:\n            if i + len(substring) > j:\n                return 0\n            j += 1\n        i += 1\n    return j\n\n\nif __name__ == '__main__':\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 44,
      "score": 9.73511989811648,
      "candidate": "count = 0\n    for i in range(len(string) - len(substring) + 1):\n        if string[i: i + len(substring)] == substring:\n            count += 1\n    return count\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 45,
      "score": 9.718856235379514,
      "candidate": "if not string:\n        return 0\n    if not substring:\n        return 1\n    if string[0] == substring[0]:\n        return how_many_times(string[1:], substring[1:])\n    return how_many_times(string[1:], substring) + how_many_times(string[:-1], substring)\n\n\nif __name__ == '__main__':\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 46,
      "score": 9.699146693885302,
      "candidate": "count = 0\n    for i in range(len(string) - len(substring) + 1):\n        if string[i:i + len(substring)] == substring:\n            count += 1\n    return count"
    },
    {
      "rank": 47,
      "score": 9.640077895802646,
      "candidate": "# Your code here\n    count = 0\n    for i in range(len(string) - len(substring) + 1):\n        if string[i: i + len(substring)] == substring:\n            count += 1\n    return count\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 48,
      "score": 9.595753198553407,
      "candidate": "if substring == '':\n        return 0\n    if len(substring) == 1:\n        return string.count(substring)\n    if string[0] == substring[0]:\n        return how_many_times(string[1:], substring[1:])\n    return how_many_times(string[1:], substring[1:]) + how_many_times(string, substring[1:])"
    },
    {
      "rank": 49,
      "score": 9.545987962239394,
      "candidate": "count = 0\n    for i in range(len(string) - len(substring) + 1):\n        if string[i:i + len(substring)] == substring:\n            count += 1\n    return count\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 50,
      "score": 9.446832512996986,
      "candidate": "count = 0\n    for i, char in enumerate(string):\n        if char == substring[0]:\n            count += 1\n            if count == len(substring):\n                return i - len(substring) + 1\n    return count\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 51,
      "score": 9.42450321128885,
      "candidate": "string_length = len(string)\n    substring_length = len(substring)\n\n    if string_length < substring_length:\n        return 0\n\n    if substring_length == 1:\n        return string_length\n\n    start_index = 0\n    end_index = 0\n\n    for end_index in range(substring_length, string_length):\n        if string[end_index] == substring[0]:\n            start_index = end_index\n\n    if start_index == 0:\n        return 0\n\n    return end_index - start_index + 1\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 52,
      "score": 9.401896687959665,
      "candidate": "if not string:\n        return 0\n    count = 0\n    for i in range(len(string)):\n        if string[i:i+len(substring)] == substring:\n            count += 1\n    return count\n\n\ndef how_many_times2(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times2('', 'a')\n    0\n    >>> how_many_times2('aaa', 'a')\n    3\n    >>> how_many_times2('aaaa', 'aa')\n    3\n    \"\"\"\n    if not string:\n        return 0\n    count = 0\n    i = 0\n    j = len(substring)\n    while i < len(string) and j >= 0:\n        if string[i:i+len(substring)] == substring:\n            count += 1\n            i += len(substring)\n        else:\n            j -= 1\n    return count\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 53,
      "score": 9.335906975550785,
      "candidate": "count = 0\n    for i in range(len(string)):\n        if string[i:i + len(substring)] == substring:\n            count += 1\n    return count\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 54,
      "score": 9.293848149332355,
      "candidate": "if string is None or substring is None:\n        return 0\n    if len(string) == 0 or len(substring) == 0:\n        return 0\n    if len(string) == 1:\n        return 1 if string[0] == substring[0] else 0\n    count = 0\n    for i in range(len(substring)):\n        if substring[i] == string[0]:\n            count += how_many_times(string[1:], substring[i + 1:])\n    return count\n\n\nif __name__ == '__main__':\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 55,
      "score": 9.287625906893272,
      "candidate": "if not string or not substring:\n        return 0\n    count = 0\n    for i in range(len(string)):\n        if string[i:i + len(substring)] == substring:\n            count += 1\n    return count\n\n\nif __name__ == '__main__':\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 56,
      "score": 9.26824252593394,
      "candidate": "count = 0\n    start = 0\n    for i in range(len(string)):\n        if string[i] == substring[0]:\n            count += 1\n            if string[i - start:i] == substring:\n                count += 1\n            start += 1\n    return count\n\n\nif __name__ == '__main__':\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 57,
      "score": 9.260739004816287,
      "candidate": "if substring not in string:\n        return 0\n\n    index = 0\n    count = 0\n    while index < len(string):\n        if string[index] == substring[0]:\n            count += 1\n        if string[index] == substring[-1]:\n            count -= 1\n        if count == 0:\n            return count\n        index += 1\n    return 0\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 58,
      "score": 9.118479922318633,
      "candidate": "count = 0\n    for i in range(len(string)):\n        if string[i:i + len(substring)] == substring:\n            count += 1\n    return count"
    },
    {
      "rank": 59,
      "score": 9.0433598776711,
      "candidate": "if not string or not substring:\n        return 0\n    count = 0\n    for index in range(len(string)):\n        if string[index:index + len(substring)] == substring:\n            count += 1\n    return count\n\n\nif __name__ == '__main__':\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 60,
      "score": 9.020164938060113,
      "candidate": "n, m = len(string), len(substring)\n    if n == 0:\n        return 0\n    if m == 0:\n        return n\n    if m > n:\n        return 0\n    count = 0\n    for i in range(n - m + 1):\n        if string[i:i + m] == substring:\n            count += 1\n    return count\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 61,
      "score": 9.006215542699554,
      "candidate": "if string == \"\":\n        return 0\n\n    if substring == \"\":\n        return 1\n\n    if len(string) == len(substring):\n        return 1 if string[0] == substring[0] else 0\n\n    if len(substring) == 1:\n        return how_many_times(string[1:], substring[0])\n\n    if len(substring) == 2:\n        if string[0] == substring[0]:\n            return how_many_times(string[1:], substring[1])\n        else:\n            return how_many_times(string[1:], substring[1]) + how_many_times(string[0:-1], substring[0])\n\n    if len(substring) == 3:\n        if string[0] == substring[0]:\n            return how_many_times(string[1:], substring[1]) + how_many_times(string[2:], substring[2])\n        else:\n            return how_many_times(string[1:], substring[1]) + how_many_times(string[0:-1], substring[0]) + how_many_times(\n                string[1:], substring[2]) + how_many_times(string[2:], substring[2])\n\n    if len(substring) == 4:\n        if string[0] == substring[0]:\n            return how_many_times(string[1:], substring[1]) + how_many_times(string[2:], substring[2]) + how_many_times(\n                string[3:], substring[3])\n        else:\n            return how_many_times(string[1:], substring[1]) + how_many_times(string[2:], substring[2]) + how_many_times(\n                string[3:], substring[3]) + how_many_times(string[0:-1], substring[0]) + how_many_times(\n                string[1:], substring[1]) + how_many_times(string[2:], substring[2]) + how_many_times(\n                string[3:], substring[3])"
    },
    {
      "rank": 62,
      "score": 3.6158929980478827,
      "candidate": "count = 0\n    for i in range(len(string) - len(substring) + 1):\n        if string[i: i + len(substring)] == substring:\n            count += 1\n    return count\n\n\nif __name__ == '__main__':\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 63,
      "score": 3.528933611142621,
      "candidate": "count = 0\n    for i in range(len(string) - len(substring) + 1):\n        if string[i:i + len(substring)] == substring:\n            count += 1\n    return count\n\n\nif __name__ == \"__main__\":\n    print(how_many_times(\"\", \"a\"))\n    print(how_many_times(\"aaa\", \"a\"))\n    print(how_many_times(\"aaaa\", \"aa\"))"
    },
    {
      "rank": 64,
      "score": 3.402089813773421,
      "candidate": "count = 0\n    for i in range(len(string) - len(substring) + 1):\n        if string[i:i + len(substring)] == substring:\n            count += 1\n    return count\n\n\nif __name__ == '__main__':\n    print(how_many_times('', 'a'))\n    print(how_many_times('aaa', 'a'))\n    print(how_many_times('aaaa', 'aa'))"
    },
    {
      "rank": 65,
      "score": 3.3913778301778894,
      "candidate": "if not string or not substring:\n        return 0\n    count = 0\n    i = 0\n    j = 0\n    while i < len(string) and j < len(substring):\n        if string[i] == substring[j]:\n            count += 1\n            i += 1\n            j += 1\n        elif string[i] < substring[j]:\n            i += 1\n        else:\n            j += 1\n    return count"
    },
    {
      "rank": 66,
      "score": 3.38046259957772,
      "candidate": "count = 0\n    for i in range(len(string) - len(substring) + 1):\n        if string[i: i + len(substring)] == substring:\n            count += 1\n    return count\n\n\nif __name__ == '__main__':\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 67,
      "score": 3.320792515720244,
      "candidate": "substring_count = 0\n\n    for i in range(len(string)):\n        if string[i:i+len(substring)] == substring:\n            substring_count += 1\n\n    return substring_count\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 68,
      "score": 3.316885070733737,
      "candidate": "count = 0\n    for i in range(len(string) - len(substring) + 1):\n        if string[i:i + len(substring)] == substring:\n            count += 1\n    return count\n\n\nif __name__ == '__main__':\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 69,
      "score": 3.25259852985927,
      "candidate": "if substring in string:\n        return string.count(substring)\n    return 0"
    },
    {
      "rank": 70,
      "score": 3.2385537526479387,
      "candidate": "if not string or not substring:\n        return 0\n\n    count = 0\n    for index, char in enumerate(string):\n        if char == substring[0]:\n            count += 1\n            if index - 1 >= 0:\n                count += string[index - 1] == substring[1]\n        elif char == substring[1]:\n            count += 1\n            if index + 1 < len(string):\n                count += string[index + 1] == substring[0]\n\n    return count"
    },
    {
      "rank": 71,
      "score": 3.200174298914209,
      "candidate": "count = 0\n    for index, char in enumerate(string):\n        if char == substring[0]:\n            count += 1\n        if index >= len(substring):\n            return count\n    return count"
    },
    {
      "rank": 72,
      "score": 3.193718519674381,
      "candidate": "count = 0\n    start = 0\n    end = 0\n    while end < len(string):\n        if string[end] == substring[0]:\n            count += 1\n            start = end + 1\n        end += 1\n    return count"
    },
    {
      "rank": 73,
      "score": 3.1410380497685773,
      "candidate": "if substring == \"\":\n        return 0\n\n    count = 0\n    for i in range(len(string) - len(substring) + 1):\n        if string[i:i + len(substring)] == substring:\n            count += 1\n\n    return count\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 74,
      "score": 3.1340111329317,
      "candidate": "count = 0\n    for i in range(len(string)):\n        if string[i:i+len(substring)] == substring:\n            count += 1\n    return count\n\n\nif __name__ == '__main__':\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 75,
      "score": 3.12919273824739,
      "candidate": "if not string:\n        return 0\n    if not substring:\n        return 1\n    count = 0\n    for index, char in enumerate(string):\n        if char == substring[0]:\n            if index < len(substring) - 1:\n                count += how_many_times(string[index + 1:], substring[1:])\n            else:\n                count += 1\n    return count\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 76,
      "score": 3.1154869080551846,
      "candidate": "count = 0\n    for i in range(len(string)):\n        if string[i:i + len(substring)] == substring:\n            count += 1\n    return count"
    },
    {
      "rank": 77,
      "score": 3.0767758819889583,
      "candidate": "if not string:\n        return 0\n    if not substring:\n        return 1\n    if not len(substring) == len(string):\n        return 0\n\n    count = 0\n    for i in range(len(string)):\n        if string[i:i+len(substring)] == substring:\n            count += 1\n    return count\n\n\nif __name__ == '__main__':\n    string = input()\n    substring = input()\n    print(how_many_times(string, substring))"
    },
    {
      "rank": 78,
      "score": 3.033948356612887,
      "candidate": "if not string or not substring:\n        return 0\n\n    count = 0\n    for i in range(len(string) - len(substring) + 1):\n        if string[i:i + len(substring)] == substring:\n            count += 1\n\n    return count\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 79,
      "score": 3.00199424809056,
      "candidate": "if len(string) < len(substring):\n        return 0\n\n    start, count = 0, 0\n    while start < len(string):\n        if string[start] == substring[0]:\n            count += 1\n            start += 1\n        elif string[start] == substring[-1]:\n            count -= 1\n            if count == 0:\n                start += 1\n        else:\n            start += 1\n\n    return count"
    },
    {
      "rank": 80,
      "score": 2.9719160525836696,
      "candidate": "if substring == '':\n        return 0\n    if substring == string:\n        return 1\n    count = 0\n    for i in range(len(substring)):\n        if substring[i] == string[i]:\n            count += 1\n    return count\n\n\nif __name__ == '__main__':\n    string = input()\n    substring = input()\n    print(how_many_times(string, substring))"
    },
    {
      "rank": 81,
      "score": 2.954897169868586,
      "candidate": "count = 0\n    for i in range(len(string)):\n        if string[i:i+len(substring)] == substring:\n            count += 1\n    return count"
    },
    {
      "rank": 82,
      "score": 2.908680183857899,
      "candidate": "count = 0\n    for index in range(len(string) - len(substring) + 1):\n        if string[index:index + len(substring)] == substring:\n            count += 1\n    return count\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 83,
      "score": 2.9085110179836926,
      "candidate": "return string.count(substring)\n\n\nif __name__ == '__main__':\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 84,
      "score": 2.87221176282687,
      "candidate": "if substring not in string:\n        return 0\n    count = 0\n    for i in range(len(string) - len(substring) + 1):\n        if string[i:i + len(substring)] == substring:\n            count += 1\n    return count\n\n\nif __name__ == \"__main__\":\n    string, substring = input(), input()\n    print(how_many_times(string, substring))"
    },
    {
      "rank": 85,
      "score": 2.81926709980314,
      "candidate": "if not string or not substring:\n        return 0\n    count = 0\n    for i, char in enumerate(string):\n        if string[i:i + len(substring)] == substring:\n            count += 1\n    return count\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 86,
      "score": 2.8183653961075996,
      "candidate": "count = 0\n    for i in range(len(string) - len(substring) + 1):\n        if string[i:i + len(substring)] == substring:\n            count += 1\n    return count\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 87,
      "score": 2.816904989485369,
      "candidate": "if substring == \"\":\n        return 0\n    if substring in string:\n        return string.count(substring)\n    return 0"
    },
    {
      "rank": 88,
      "score": 2.813122047240337,
      "candidate": "count = 0\n    for i in range(len(string) - len(substring) + 1):\n        if string[i: i + len(substring)] == substring:\n            count += 1\n    return count"
    },
    {
      "rank": 89,
      "score": 2.8043147530020307,
      "candidate": "count = 0\n    for i in range(len(string)):\n        if string[i:i + len(substring)] == substring:\n            count += 1\n    return count"
    },
    {
      "rank": 90,
      "score": 2.7876907374351787,
      "candidate": "if not string:\n        return 0\n    count = 0\n    for i, char in enumerate(string):\n        if char == substring[0]:\n            count += 1\n            if count == len(substring):\n                return i - len(substring) + 1\n        else:\n            count = 0\n    return -1\n\n\nif __name__ == '__main__':\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 91,
      "score": 2.7657509109316663,
      "candidate": "count = 0\n    for i in range(len(string) - len(substring) + 1):\n        if string[i:i + len(substring)] == substring:\n            count += 1\n    return count\n\n\nif __name__ == '__main__':\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 92,
      "score": 2.7484032957040014,
      "candidate": "count = 0\n    for i in range(len(string) - len(substring) + 1):\n        if string[i:i + len(substring)] == substring:\n            count += 1\n    return count\n\n\nif __name__ == '__main__':\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 93,
      "score": 2.736000419880676,
      "candidate": "if not string or not substring:\n        return 0\n    substring_index = 0\n    for char in substring:\n        substring_index = string.find(char, substring_index)\n        if substring_index == -1:\n            return 0\n    return 1 + how_many_times(string[substring_index + 1:], substring)"
    },
    {
      "rank": 94,
      "score": 2.7261992933878325,
      "candidate": "return sum(string.count(sub) for sub in substring)\n\n\nif __name__ == '__main__':\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 95,
      "score": 2.672705165943171,
      "candidate": "count = 0\n    for i in range(len(string)):\n        if string[i:i + len(substring)] == substring:\n            count += 1\n    return count\n\n\nif __name__ == '__main__':\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 96,
      "score": 2.6049958630695746,
      "candidate": "if len(substring) == 0:\n        return 0\n\n    count = 0\n    for i in range(len(string)):\n        if string[i:i+len(substring)] == substring:\n            count += 1\n\n    return count\n\n\nif __name__ == \"__main__\":\n    string = str(input(\"Enter a string: \"))\n    substring = str(input(\"Enter a substring: \"))\n    print(f\"Number of times '{substring}' can be found in '{string}' is {how_many_times(string, substring)}\")"
    },
    {
      "rank": 97,
      "score": 2.587492737707199,
      "candidate": "if not string or not substring:\n        return 0\n    count = 0\n    start = 0\n    for end in range(len(string)):\n        if string[start:end] == substring:\n            count += 1\n        start += 1\n    return count\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 98,
      "score": 2.523870976511301,
      "candidate": "# This method is not very efficient, but it's useful.\n    count = 0\n    for i in range(len(string)):\n        if string[i:i + len(substring)] == substring:\n            count += 1\n    return count\n\n\nif __name__ == '__main__':\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 99,
      "score": 2.327282045319917,
      "candidate": "if len(string) == 0:\n        return 0\n    if len(substring) == 0:\n        return 1\n    if len(substring) > len(string):\n        return 0\n\n    string_count = 0\n    substring_count = 0\n    for i in range(len(string)):\n        if string[i] == substring[0]:\n            string_count += 1\n        else:\n            substring_count += 1\n            if substring_count == len(substring):\n                return string_count\n\n    return 0"
    },
    {
      "rank": 100,
      "score": 1.9782994094049997,
      "candidate": "return sum(string.count(c) for c in substring)\n\n\nif __name__ == '__main__':\n    import doctest\n\n    doctest.testmod()"
    }
  ]
}