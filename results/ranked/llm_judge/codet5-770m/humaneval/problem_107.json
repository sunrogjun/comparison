{
  "timestamp": "2025-09-14T12:03:01.551635",
  "method": "improved_llm_judge",
  "judge_model": "codellama/CodeLlama-7b-Python-hf",
  "target_model": "codet5-770m",
  "dataset": "humaneval",
  "problem_number": 107,
  "total_candidates": 100,
  "results": [
    {
      "rank": 1,
      "score": 10.0,
      "candidate": "# Runtime: 36 ms\n    # Memory: 13.2 MB\n    even_odd_palindromes = [0, 0]\n    for i in range(1, n):\n        if (i % 2 == 0):\n            even_odd_palindromes[0] += 1\n        else:\n            even_odd_palindromes[1] += 1\n    return tuple(even_odd_palindromes)"
    },
    {
      "rank": 2,
      "score": 10.0,
      "candidate": "even = 0\n    odd = 0\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n    return (even, odd)"
    },
    {
      "rank": 3,
      "score": 10.0,
      "candidate": "odd_palindromes = 0\n    even_palindromes = 0\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            if i % 5 == 0:\n                odd_palindromes += 1\n            else:\n                even_palindromes += 1\n    return (even_palindromes, odd_palindromes)\n\n\ndef main():\n    print(even_odd_palindrome(3))\n    print(even_odd_palindrome(12))\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 4,
      "score": 10.0,
      "candidate": "# Runtime: 36 ms, faster than 63.07% of Python3 online submissions for Even Odd Palindrome.\n    # Memory Usage: 14.8 MB, less than 16.01% of Python3 online submissions for Even Odd Palindrome.\n    even_odd_palindrome_list = []\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            even_odd_palindrome_list.append(i)\n    return (len(even_odd_palindrome_list), len(set(even_odd_palindrome_list)))\n\n\nif __name__ == '__main__':\n    assert even_odd_palindrome(3) == (1, 2)\n    assert even_odd_palindrome(12) == (4, 6)"
    },
    {
      "rank": 5,
      "score": 10.0,
      "candidate": "even_palindrome = 0\n    odd_palindrome = 0\n\n    for i in range(1, n + 1):\n        if (i % 2) == 0:\n            even_palindrome += 1\n        else:\n            odd_palindrome += 1\n\n    return (even_palindrome, odd_palindrome)\n\n\ndef main():\n    print(even_odd_palindrome(3))\n    print(even_odd_palindrome(12))\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 6,
      "score": 10.0,
      "candidate": "even = odd = 0\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n    return (even, odd)\n\n\nif __name__ == '__main__':\n    assert even_odd_palindrome(3) == (1, 2)\n    assert even_odd_palindrome(12) == (4, 6)"
    },
    {
      "rank": 7,
      "score": 10.0,
      "candidate": "count = 0\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            if i % 10!= 0:\n                count += 1\n        else:\n            if i % 10!= 0:\n                count += 1\n    return count, count"
    },
    {
      "rank": 8,
      "score": 10.0,
      "candidate": "even = 0\n    odd = 0\n\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n\n    return (even, odd)"
    },
    {
      "rank": 9,
      "score": 10.0,
      "candidate": "even_palindromes = 0\n    odd_palindromes = 0\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            even_palindromes += 1\n        else:\n            odd_palindromes += 1\n    return (even_palindromes, odd_palindromes)"
    },
    {
      "rank": 10,
      "score": 10.0,
      "candidate": "even_odd_palindrome_list = []\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            even_odd_palindrome_list.append(i)\n        else:\n            odd_odd_palindrome_list.append(i)\n    return even_odd_palindrome_list\n\n\ndef main():\n    print(even_odd_palindrome(3))\n    print(even_odd_palindrome(12))\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 11,
      "score": 10.0,
      "candidate": "even = 0\n    odd = 0\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n    return (even, odd)\n\n\ndef main():\n    print(even_odd_palindrome(3))\n    print(even_odd_palindrome(12))\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 12,
      "score": 10.0,
      "candidate": "even = 0\n    odd = 0\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n    return (even, odd)\n\n\ndef main():\n    print(even_odd_palindrome(3))\n    print(even_odd_palindrome(12))\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 13,
      "score": 10.0,
      "candidate": "count = 0\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            if i == int(str(i)[::-1]):\n                count += 1\n    return (count, count)\n\n\nif __name__ == '__main__':\n    assert even_odd_palindrome(3) == (1, 2)\n    assert even_odd_palindrome(12) == (4, 6)"
    },
    {
      "rank": 14,
      "score": 10.0,
      "candidate": "even_palindromes = 0\n    odd_palindromes = 0\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            even_palindromes += 1\n        else:\n            odd_palindromes += 1\n    return (even_palindromes, odd_palindromes)\n\n\ndef main():\n    print(even_odd_palindrome(3))\n    print(even_odd_palindrome(12))\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 15,
      "score": 10.0,
      "candidate": "# Runtime: 32 ms, faster than 98.77% of Python3 online submissions for Even Odd Palindrome.\n    # Memory Usage: 13.7 MB, less than 88.03% of Python3 online submissions for Even Odd Palindrome.\n    count_even = 0\n    count_odd = 0\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            if i % 5 == 0:\n                count_even += 1\n            else:\n                count_odd += 1\n        else:\n            if i % 5 == 0:\n                count_odd += 1\n            else:\n                count_even += 1\n    return (count_even, count_odd)\n\n\nif __name__ == '__main__':\n    assert even_odd_palindrome(3) == (1, 2)\n    assert even_odd_palindrome(12) == (4, 6)"
    },
    {
      "rank": 16,
      "score": 10.0,
      "candidate": "result = []\n    for i in range(1, n):\n        if i % 2 == 0:\n            result.append(i)\n    return tuple(result)\n\n\ndef test_even_odd_palindrome():\n    assert even_odd_palindrome(3) == (1, 2)\n    assert even_odd_palindrome(12) == (4, 6)"
    },
    {
      "rank": 17,
      "score": 10.0,
      "candidate": "even_odd = 0\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            even_odd += 1\n        else:\n            odd_odd = 0\n            for j in range(1, n + 1):\n                if j % 2!= 0:\n                    odd_odd += 1\n                    break\n            else:\n                return (even_odd, odd_odd)\n    return (even_odd, odd_odd)\n\n\nassert even_odd_palindrome(3) == (1, 2)\nassert even_odd_palindrome(12) == (4, 6)"
    },
    {
      "rank": 18,
      "score": 9.370583536698913,
      "candidate": "even_odd_palindrome_list = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            even_odd_palindrome_list.append(i)\n    return even_odd_palindrome_list\n\n\nif __name__ == '__main__':\n    assert even_odd_palindrome(3) == (1, 2)\n    assert even_odd_palindrome(12) == (4, 6)"
    },
    {
      "rank": 19,
      "score": 9.234050852198141,
      "candidate": "even = odd = 0\n    for i in range(1, n):\n        if i % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n    return (even, odd)\n\n\nassert even_odd_palindrome(3) == (1, 2)\nassert even_odd_palindrome(12) == (4, 6)"
    },
    {
      "rank": 20,
      "score": 9.226766272351448,
      "candidate": "even = 0\n    odd = 0\n\n    for i in range(1, n):\n        if i % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n\n    return (even, odd)\n\n\nassert even_odd_palindrome(3) == (1, 2)\nassert even_odd_palindrome(12) == (4, 6)"
    },
    {
      "rank": 21,
      "score": 9.21346272767743,
      "candidate": "if n == 0:\n        return (0, 0)\n    even_palindrome = 0\n    odd_palindrome = 0\n    for i in range(1, n):\n        if i % 2 == 0:\n            even_palindrome += 1\n        else:\n            odd_palindrome += 1\n    return (even_palindrome, odd_palindrome)\n\n\nassert even_odd_palindrome(3) == (1, 2)\nassert even_odd_palindrome(12) == (4, 6)"
    },
    {
      "rank": 22,
      "score": 9.205959372648458,
      "candidate": "even_count = 0\n    odd_count = 0\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    return even_count, odd_count"
    },
    {
      "rank": 23,
      "score": 9.183391466815202,
      "candidate": "even_palindrome = 0\n    odd_palindrome = 0\n\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            even_palindrome += 1\n        else:\n            odd_palindrome += 1\n\n    return (even_palindrome, odd_palindrome)\n\n\nif __name__ == '__main__':\n    assert even_odd_palindrome(3) == (1, 2)\n    assert even_odd_palindrome(12) == (4, 6)"
    },
    {
      "rank": 24,
      "score": 9.122564458729856,
      "candidate": "even_palindromes = 0\n    odd_palindromes = 0\n\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            even_palindromes += 1\n        else:\n            odd_palindromes += 1\n\n    return (even_palindromes, odd_palindromes)"
    },
    {
      "rank": 25,
      "score": 8.973005557553902,
      "candidate": "result = []\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            result.append(i)\n    return tuple(result)\n\n\nif __name__ == \"__main__\":\n    assert even_odd_palindrome(3) == (1, 2)\n    assert even_odd_palindrome(12) == (4, 6)"
    },
    {
      "rank": 26,
      "score": 8.95994420569242,
      "candidate": "count_even = 0\n    count_odd = 0\n    for num in range(1, n + 1):\n        if num % 2 == 0:\n            count_even += 1\n        else:\n            count_odd += 1\n    return count_even, count_odd"
    },
    {
      "rank": 27,
      "score": 8.946210893390457,
      "candidate": "even = odd = 0\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n    return (even, odd)\n\n\nassert even_odd_palindrome(3) == (1, 2)\nassert even_odd_palindrome(12) == (4, 6)"
    },
    {
      "rank": 28,
      "score": 8.932217008005624,
      "candidate": "even_count = 0\n    odd_count = 0\n    for i in range(1, n):\n        if i % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    return (even_count, odd_count)\n\n\ndef test_even_odd_palindrome():\n    assert even_odd_palindrome(3) == (1, 2)\n    assert even_odd_palindrome(12) == (4, 6)"
    },
    {
      "rank": 29,
      "score": 8.855395696632057,
      "candidate": "even = odd = 0\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n    return even, odd\n\n\ndef test_even_odd_palindrome():\n    assert even_odd_palindrome(3) == (1, 2)\n    assert even_odd_palindrome(12) == (4, 6)"
    },
    {
      "rank": 30,
      "score": 8.850707355641543,
      "candidate": "even = 0\n    odd = 0\n\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n\n    return (even, odd)\n\n\nassert even_odd_palindrome(3) == (1, 2)\nassert even_odd_palindrome(12) == (4, 6)"
    },
    {
      "rank": 31,
      "score": 8.8281618090209,
      "candidate": "even_odd_palindrome = 0\n    for num in range(1, n + 1):\n        if num % 2 == 0:\n            if num % 3 == 0:\n                even_odd_palindrome += 1\n    return (even_odd_palindrome, n - even_odd_palindrome)"
    },
    {
      "rank": 32,
      "score": 8.76828871349479,
      "candidate": "even = 0\n    odd = 0\n\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n\n    return even, odd\n\n\nif __name__ == '__main__':\n    assert even_odd_palindrome(3) == (1, 2)\n    assert even_odd_palindrome(12) == (4, 6)"
    },
    {
      "rank": 33,
      "score": 8.750282588864879,
      "candidate": "odd_palindrome = []\n    even_palindrome = []\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            even_palindrome.append(i)\n        else:\n            odd_palindrome.append(i)\n    return (len(even_palindrome), len(odd_palindrome))\n\n\ndef main():\n    print(even_odd_palindrome(3))\n    print(even_odd_palindrome(12))\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 34,
      "score": 8.692801520950061,
      "candidate": "even_palindromes = 0\n    odd_palindromes = 0\n\n    for i in range(1, n):\n        if (i % 2 == 0):\n            even_palindromes += 1\n        else:\n            odd_palindromes += 1\n\n    return (even_palindromes, odd_palindromes)"
    },
    {
      "rank": 35,
      "score": 8.632293453617281,
      "candidate": "even_odd = 0\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            if i == int(str(i)[::-1]):\n                even_odd += 1\n    return even_odd, n - even_odd\n\n\nif __name__ == '__main__':\n    assert even_odd_palindrome(3) == (1, 2)\n    assert even_odd_palindrome(12) == (4, 6)"
    },
    {
      "rank": 36,
      "score": 8.616253589228675,
      "candidate": "even = 0\n    odd = 0\n\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n\n    return (even, odd)"
    },
    {
      "rank": 37,
      "score": 8.606486429141842,
      "candidate": "even = 0\n    odd = 0\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n    return even, odd\n\n\ndef main():\n    print(even_odd_palindrome(3))\n    print(even_odd_palindrome(12))\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 38,
      "score": 8.60156811074208,
      "candidate": "return (n % 2 == 0, n % 2!= 0)"
    },
    {
      "rank": 39,
      "score": 8.565425580227462,
      "candidate": "even_palindromes = 0\n    odd_palindromes = 0\n\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            even_palindromes += 1\n        else:\n            odd_palindromes += 1\n\n    return even_palindromes, odd_palindromes\n\n\nassert even_odd_palindrome(3) == (1, 2)\nassert even_odd_palindrome(12) == (4, 6)"
    },
    {
      "rank": 40,
      "score": 8.53012858503943,
      "candidate": "count_even = 0\n    count_odd = 0\n    for i in range(1, n + 1):\n        if str(i) == str(i)[::-1]:\n            count_odd += 1\n        else:\n            count_even += 1\n    return (count_even, count_odd)\n\n\nassert even_odd_palindrome(3) == (1, 2)\nassert even_odd_palindrome(12) == (4, 6)"
    },
    {
      "rank": 41,
      "score": 8.490324832712195,
      "candidate": "even = 0\n    odd = 0\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n    return (even, odd)\n\n\nassert even_odd_palindrome(3) == (1, 2)\nassert even_odd_palindrome(12) == (4, 6)"
    },
    {
      "rank": 42,
      "score": 8.48796797856353,
      "candidate": "even = 0\n    odd = 0\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n    return (even, odd)"
    },
    {
      "rank": 43,
      "score": 8.426531424889468,
      "candidate": "even_palindrome_count = 0\n    odd_palindrome_count = 0\n\n    for i in range(1, n):\n        if i % 2 == 0:\n            even_palindrome_count += 1\n        else:\n            odd_palindrome_count += 1\n\n    return (even_palindrome_count, odd_palindrome_count)\n\n\nif __name__ == '__main__':\n    assert even_odd_palindrome(3) == (1, 2)\n    assert even_odd_palindrome(12) == (4, 6)"
    },
    {
      "rank": 44,
      "score": 8.408439383654278,
      "candidate": "even = 0\n    odd = 0\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            if i % 5 == 0:\n                even += 1\n            else:\n                odd += 1\n        else:\n            if i % 5 == 0:\n                odd += 1\n            else:\n                even += 1\n    return even, odd\n\n\nassert even_odd_palindrome(3) == (1, 2)\nassert even_odd_palindrome(12) == (4, 6)"
    },
    {
      "rank": 45,
      "score": 8.375312293858853,
      "candidate": "even_odd_palindrome_set = set()\n    for num in range(1, n + 1):\n        if num % 2 == 0:\n            even_odd_palindrome_set.add(num)\n\n    return len(even_odd_palindrome_set), len(odd_even_palindrome_set)\n\n\nif __name__ == '__main__':\n    assert even_odd_palindrome(3) == (1, 2)\n    assert even_odd_palindrome(12) == (4, 6)"
    },
    {
      "rank": 46,
      "score": 8.351614956112536,
      "candidate": "result = (0, 0)\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            result = (result[0] + 1, result[1] + 1)\n        else:\n            result = (result[1] + 1, result[0] + 1)\n    return result\n\n\nif __name__ == \"__main__\":\n    assert even_odd_palindrome(3) == (1, 2)\n    assert even_odd_palindrome(12) == (4, 6)"
    },
    {
      "rank": 47,
      "score": 8.334608500525688,
      "candidate": "result = 0\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            result += 1\n        else:\n            result -= 1\n    return result, result\n\n\ndef main():\n    print(even_odd_palindrome(3))\n    print(even_odd_palindrome(12))\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 48,
      "score": 8.331556294201176,
      "candidate": "even, odd = 0, 0\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n    return (even, odd)\n\n\ndef main():\n    print(even_odd_palindrome(12))\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 49,
      "score": 8.327375965969855,
      "candidate": "odd_palindrome = 0\n    even_palindrome = 0\n    for i in range(1, n):\n        if i % 2 == 0:\n            even_palindrome += 1\n        else:\n            odd_palindrome += 1\n    return even_palindrome, odd_palindrome\n\n\nassert even_odd_palindrome(3) == (1, 2)\nassert even_odd_palindrome(12) == (4, 6)"
    },
    {
      "rank": 50,
      "score": 8.327367757082776,
      "candidate": "even = 0\n    odd = 0\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n    return (even, odd)\n\n\ndef main():\n    print(even_odd_palindrome(3))\n    print(even_odd_palindrome(12))\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 51,
      "score": 8.294940769211511,
      "candidate": "even_palindrome_count = 0\n    odd_palindrome_count = 0\n\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            even_palindrome_count += 1\n        else:\n            odd_palindrome_count += 1\n\n    return (even_palindrome_count, odd_palindrome_count)"
    },
    {
      "rank": 52,
      "score": 8.2938925966498,
      "candidate": "even_count = 0\n    odd_count = 0\n\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n\n    return (even_count, odd_count)\n\n\nassert even_odd_palindrome(3) == (1, 2)\nassert even_odd_palindrome(12) == (4, 6)"
    },
    {
      "rank": 53,
      "score": 8.214125058964552,
      "candidate": "result = []\n    for i in range(1, n + 1):\n        even = 0\n        odd = 0\n        while i > 0:\n            if i % 2 == 0:\n                even += 1\n                i //= 2\n            else:\n                odd += 1\n                i //= 2\n        result.append((even, odd))\n    return result"
    },
    {
      "rank": 54,
      "score": 8.211579567659316,
      "candidate": "result = []\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            result.append(i)\n    return tuple(result)\n\n\nif __name__ == '__main__':\n    assert even_odd_palindrome(3) == (1, 2)\n    assert even_odd_palindrome(12) == (4, 6)"
    },
    {
      "rank": 55,
      "score": 8.2048573255218,
      "candidate": "even = 0\n    odd = 0\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n    return (even, odd)\n\n\nassert even_odd_palindrome(3) == (1, 2)\nassert even_odd_palindrome(12) == (4, 6)"
    },
    {
      "rank": 56,
      "score": 8.163300679823958,
      "candidate": "even = odd = 0\n    for i in range(1, n):\n        if i % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n\n    return (even, odd)\n\n\nassert even_odd_palindrome(3) == (1, 2)\nassert even_odd_palindrome(12) == (4, 6)"
    },
    {
      "rank": 57,
      "score": 8.144125099485041,
      "candidate": "even_palindromes = 0\n    odd_palindromes = 0\n\n    for x in range(1, n + 1):\n        if x % 2 == 0:\n            even_palindromes += 1\n        else:\n            odd_palindromes += 1\n\n    return (even_palindromes, odd_palindromes)\n\n\nassert even_odd_palindrome(3) == (1, 2)\nassert even_odd_palindrome(12) == (4, 6)"
    },
    {
      "rank": 58,
      "score": 8.143591138329747,
      "candidate": "even_count = 0\n    odd_count = 0\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    return (even_count, odd_count)\n\n\nif __name__ == '__main__':\n    assert even_odd_palindrome(3) == (1, 2)\n    assert even_odd_palindrome(12) == (4, 6)"
    },
    {
      "rank": 59,
      "score": 8.121884567141883,
      "candidate": "even = 0\n    odd = 0\n\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n\n    return even, odd\n\n\ndef test_even_odd_palindrome():\n    assert even_odd_palindrome(3) == (1, 2)\n    assert even_odd_palindrome(12) == (4, 6)"
    },
    {
      "rank": 60,
      "score": 8.105983444291466,
      "candidate": "count = 0\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            if i % 10!= 0:\n                count += 1\n        else:\n            if i % 10 == 0:\n                count += 1\n    return (count, count)"
    },
    {
      "rank": 61,
      "score": 7.990432406683839,
      "candidate": "result = (0, 0)\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            result = (result[0] + 1, result[1])\n        else:\n            result = (result[0] + 1, result[1] + 1)\n    return result"
    },
    {
      "rank": 62,
      "score": 7.938028884277233,
      "candidate": "if n <= 1:\n        return (1, 1)\n\n    even_count = 0\n    odd_count = 0\n\n    for i in range(1, n + 1):\n        if str(i) == str(i)[::-1]:\n            even_count += 1\n        else:\n            odd_count += 1\n\n    return (even_count, odd_count)"
    },
    {
      "rank": 63,
      "score": 7.868947655733293,
      "candidate": "even_palindromes = 0\n    odd_palindromes = 0\n\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            if i == str(i)[::-1]:\n                even_palindromes += 1\n        else:\n            if i == str(i)[::-1]:\n                odd_palindromes += 1\n\n    return (even_palindromes, odd_palindromes)"
    },
    {
      "rank": 64,
      "score": 7.84634113240411,
      "candidate": "even_palindromes = 0\n    odd_palindromes = 0\n    for i in range(1, n):\n        if i % 2 == 0:\n            even_palindromes += 1\n        else:\n            odd_palindromes += 1\n    return even_palindromes, odd_palindromes"
    },
    {
      "rank": 65,
      "score": 7.834022619458933,
      "candidate": "return sum(int(x) % 2 == 1 for x in str(n)), sum(int(x) % 2 == 0 for x in str(n))\n\n\nif __name__ == '__main__':\n    assert even_odd_palindrome(3) == (1, 2)\n    assert even_odd_palindrome(12) == (4, 6)"
    },
    {
      "rank": 66,
      "score": 7.780351419995229,
      "candidate": "even_palindrome = 0\n    odd_palindrome = 0\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            even_palindrome += 1\n        else:\n            odd_palindrome += 1\n    return (even_palindrome, odd_palindrome)"
    },
    {
      "rank": 67,
      "score": 7.738292593776799,
      "candidate": "odd = 0\n    even = 0\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n    return even, odd"
    },
    {
      "rank": 68,
      "score": 7.7320703513377165,
      "candidate": "even = 0\n    odd = 0\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n    return even, odd\n\n\ndef main():\n    print(even_odd_palindrome(3))\n    print(even_odd_palindrome(12))\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 69,
      "score": 7.5819855281879285,
      "candidate": "even_palindromes = 0\n    odd_palindromes = 0\n\n    for i in range(1, n):\n        if i % 2 == 0:\n            even_palindromes += 1\n        else:\n            odd_palindromes += 1\n\n    return (even_palindromes, odd_palindromes)"
    },
    {
      "rank": 70,
      "score": 7.562924366763077,
      "candidate": "even = odd = 0\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n    return (even, odd)"
    },
    {
      "rank": 71,
      "score": 7.4878043221155455,
      "candidate": "even, odd = 0, 0\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n    return (even, odd)"
    },
    {
      "rank": 72,
      "score": 7.464609382504557,
      "candidate": "even_count = 0\n    odd_count = 0\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            if i % 10 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n        else:\n            if i % 10 == 0:\n                odd_count += 1\n            else:\n                even_count += 1\n    return even_count, odd_count\n\n\nif __name__ == '__main__':\n    print(even_odd_palindrome(3))\n    print(even_odd_palindrome(12))"
    },
    {
      "rank": 73,
      "score": 7.4506599871439985,
      "candidate": "even_count = 0\n    odd_count = 0\n    for i in range(1, n + 1):\n        if str(i)[::-1] == str(i):\n            even_count += 1\n        else:\n            odd_count += 1\n    return (even_count, odd_count)\n\n\nassert even_odd_palindrome(3) == (1, 2)\nassert even_odd_palindrome(12) == (4, 6)"
    },
    {
      "rank": 74,
      "score": 3.39572516760882,
      "candidate": "even_count = odd_count = 0\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    return (even_count, odd_count)\n\n\ndef test_even_odd_palindrome():\n    assert even_odd_palindrome(3) == (1, 2)\n    assert even_odd_palindrome(12) == (4, 6)"
    },
    {
      "rank": 75,
      "score": 3.2514456321613734,
      "candidate": "even_palindrome = 0\n    odd_palindrome = 0\n    for num in range(1, n + 1):\n        if num % 2 == 0:\n            even_palindrome += 1\n        else:\n            odd_palindrome += 1\n    return (even_palindrome, odd_palindrome)\n\n\ndef main():\n    print(even_odd_palindrome(3))\n    print(even_odd_palindrome(12))\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 76,
      "score": 3.222087126267861,
      "candidate": "even_palindrome = 0\n    odd_palindrome = 0\n\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            even_palindrome += 1\n        else:\n            odd_palindrome += 1\n\n    return even_palindrome, odd_palindrome\n\n\nif __name__ == '__main__':\n    assert even_odd_palindrome(3) == (1, 2)\n    assert even_odd_palindrome(12) == (4, 6)"
    },
    {
      "rank": 77,
      "score": 3.199385976598761,
      "candidate": "even_odd = 0\n    for num in range(1, n + 1):\n        if is_palindrome(num):\n            even_odd += 1\n    return (even_odd, n - even_odd)\n\n\ndef is_palindrome(num):\n    \"\"\"\n    Checks if a number is a palindrome.\n\n    :type num: int\n    :rtype: bool\n    \"\"\"\n    if num % 2 == 0:\n        return False\n    if num % 10 == 0:\n        return True\n    return False"
    },
    {
      "rank": 78,
      "score": 3.1464912117682107,
      "candidate": "even = 0\n    odd = 0\n    for i in range(1, n):\n        if (i % 2 == 0) and (i!= n - 1):\n            even += 1\n        else:\n            if (i % 2 == 0) and (i!= n - 1):\n                odd += 1\n    return (even, odd)\n\n\ndef main():\n    print(even_odd_palindrome(3))\n    print(even_odd_palindrome(12))\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 79,
      "score": 3.0976417267628613,
      "candidate": "even_palindromes = 0\n    odd_palindromes = 0\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            even_palindromes += 1\n        else:\n            odd_palindromes += 1\n    return (even_palindromes, odd_palindromes)\n\n\nassert even_odd_palindrome(3) == (1, 2)\nassert even_odd_palindrome(12) == (4, 6)"
    },
    {
      "rank": 80,
      "score": 3.097576813487272,
      "candidate": "odd_palindrome = 0\n    even_palindrome = 0\n    for i in range(1, n+1):\n        if (i % 2) == 0:\n            even_palindrome += 1\n        else:\n            odd_palindrome += 1\n\n    return (even_palindrome, odd_palindrome)\n\n\nif __name__ == '__main__':\n    assert even_odd_palindrome(3) == (1, 2)\n    assert even_odd_palindrome(12) == (4, 6)"
    },
    {
      "rank": 81,
      "score": 3.0964203943081716,
      "candidate": "even_palindromes = 0\n    odd_palindromes = 0\n\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            if i % 10 == 0:\n                even_palindromes += 1\n            else:\n                odd_palindromes += 1\n        else:\n            if i % 10 == 0:\n                odd_palindromes += 1\n            else:\n                even_palindromes += 1\n\n    return even_palindromes, odd_palindromes\n\n\nif __name__ == '__main__':\n    assert even_odd_palindrome(3) == (1, 2)\n    assert even_odd_palindrome(12) == (4, 6)"
    },
    {
      "rank": 82,
      "score": 3.0894411264789623,
      "candidate": "even, odd = 0, 0\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n    return (even, odd)\n\n\ndef main():\n    assert even_odd_palindrome(3) == (1, 2)\n    assert even_odd_palindrome(12) == (4, 6)\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 83,
      "score": 3.056393170651284,
      "candidate": "even_odd = 0\n    odd_even = 0\n\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            odd_even += 1\n        else:\n            even_odd += 1\n\n    return even_odd, odd_even\n\n\ndef main():\n    print(even_odd_palindrome(3))\n    print(even_odd_palindrome(12))\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 84,
      "score": 3.0531525336846634,
      "candidate": "odd = 0\n    even = 0\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            odd += 1\n        else:\n            even += 1\n    return (even, odd)\n\n\ndef even_odd_palindrome_2(n):\n    \"\"\"\n    Time: O(n log(n)), where n is the number of odd and even palindromes.\n    Space: O(1).\n    \"\"\"\n    even, odd = 0, 0\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            odd += 1\n        else:\n            even += 1\n    return (even, odd)"
    },
    {
      "rank": 85,
      "score": 3.029949099221664,
      "candidate": "even, odd = 0, 0\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n\n    return (even, odd)\n\n\ndef main():\n    print(even_odd_palindrome(12))\n    print(even_odd_palindrome(3))\n    print(even_odd_palindrome(4))\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 86,
      "score": 3.0182326152657395,
      "candidate": "even_odd_palindrome_list = []\n    odd_even_palindrome_list = []\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            even_odd_palindrome_list.append(i)\n        else:\n            odd_even_palindrome_list.append(i)\n    return even_odd_palindrome_list, odd_even_palindrome_list\n\n\ndef test_even_odd_palindrome():\n    assert even_odd_palindrome(3) == (1, 2)\n    assert even_odd_palindrome(12) == (4, 6)\n\n\nif __name__ == '__main__':\n    test_even_odd_palindrome()"
    },
    {
      "rank": 87,
      "score": 2.9963557493207578,
      "candidate": "odd = 0\n    even = 0\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n\n    return (even, odd)\n\n\nassert even_odd_palindrome(3) == (1, 2)\nassert even_odd_palindrome(12) == (4, 6)"
    },
    {
      "rank": 88,
      "score": 2.968774963755175,
      "candidate": "even_palindrome_count = 0\n    odd_palindrome_count = 0\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            even_palindrome_count += 1\n        else:\n            odd_palindrome_count += 1\n    return even_palindrome_count, odd_palindrome_count\n\n\nif __name__ == '__main__':\n    assert even_odd_palindrome(3) == (1, 2)\n    assert even_odd_palindrome(12) == (4, 6)"
    },
    {
      "rank": 89,
      "score": 2.9212426875558153,
      "candidate": "even_palindrome = 0\n    odd_palindrome = 0\n    for i in range(1, n + 1):\n        if (i % 2) == 0:\n            even_palindrome += 1\n        else:\n            odd_palindrome += 1\n    return (even_palindrome, odd_palindrome)\n\n\nassert even_odd_palindrome(3) == (1, 2)\nassert even_odd_palindrome(12) == (4, 6)"
    },
    {
      "rank": 90,
      "score": 2.916512658520172,
      "candidate": "even_odd_palindrome_list = []\n    odd_even_palindrome_list = []\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            even_odd_palindrome_list.append(i)\n        else:\n            odd_even_palindrome_list.append(i)\n\n    return (len(even_odd_palindrome_list), len(odd_even_palindrome_list))\n\n\nassert even_odd_palindrome(3) == (1, 2)\nassert even_odd_palindrome(12) == (4, 6)\nassert even_odd_palindrome(100) == (1, 2, 3, 4, 5, 6, 7, 8, 9, 11)"
    },
    {
      "rank": 91,
      "score": 2.8960277842875946,
      "candidate": "even_palindromes = 0\n    odd_palindromes = 0\n\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            even_palindromes += 1\n        else:\n            odd_palindromes += 1\n\n    return (even_palindromes, odd_palindromes)\n\n\ndef test_even_odd_palindrome():\n    assert even_odd_palindrome(3) == (1, 2)\n    assert even_odd_palindrome(12) == (4, 6)"
    },
    {
      "rank": 92,
      "score": 2.8748772229406354,
      "candidate": "odd_palindromes = 0\n    even_palindromes = 0\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            even_palindromes += 1\n        else:\n            odd_palindromes += 1\n    return (even_palindromes, odd_palindromes)\n\n\ndef even_odd_palindrome_2(n):\n    \"\"\"\n    O(log n) time | O(1) space\n    \"\"\"\n    even_palindromes = 0\n    odd_palindromes = 0\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            even_palindromes += 1\n        else:\n            odd_palindromes += 1\n    return (even_palindromes, odd_palindromes)\n\n\ndef even_odd_palindrome_3(n):\n    \"\"\"\n    O(log n) time | O(1) space\n    \"\"\"\n    even_palindromes = 0\n    odd_palindromes = 0\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            even_palindromes += 1\n        else:\n            odd_palindromes += 1\n    return (even_palindromes, odd_palindromes)\n\n\ndef even_odd_palindrome_4(n):\n    \"\"\"\n    O(log n) time | O(1) space\n    \"\"\"\n    even_palindromes = 0\n    odd_palindromes = 0\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            even_palindromes += 1\n        else:\n            odd_palindromes += 1\n    return (even_palindromes, odd_palindromes)\n\n\ndef even_odd_palindrome_5(n):\n    \"\"\"\n    O(log n) time | O(1) space\n    \"\"\"\n    even_palindromes = 0\n    odd_palindromes = 0\n    for i in range(1, n +"
    },
    {
      "rank": 93,
      "score": 2.873241915797563,
      "candidate": "even, odd = 0, 0\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n    return even, odd\n\n\ndef test_even_odd_palindrome():\n    assert even_odd_palindrome(3) == (1, 2)\n    assert even_odd_palindrome(12) == (4, 6)"
    },
    {
      "rank": 94,
      "score": 2.8530166643782007,
      "candidate": "if n <= 1:\n        return (0, 0)\n\n    even_palindrome = [0, 0]\n    odd_palindrome = [0, 0]\n\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            even_palindrome[0] += 1\n            odd_palindrome[0] += 1\n        else:\n            even_palindrome[1] += 1\n            odd_palindrome[1] += 1\n\n    return (even_palindrome, odd_palindrome)\n\n\nif __name__ == '__main__':\n    assert even_odd_palindrome(3) == (1, 2)\n    assert even_odd_palindrome(12) == (4, 6)"
    },
    {
      "rank": 95,
      "score": 2.8056420637334285,
      "candidate": "even, odd = 0, 0\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            if i == int(str(i)[::-1]):\n                even += 1\n        else:\n            if i == int(str(i)[::-1]):\n                odd += 1\n    return (even, odd)\n\n\ndef main():\n    print(even_odd_palindrome(3))\n    print(even_odd_palindrome(12))\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 96,
      "score": 2.7734112687298875,
      "candidate": "result = set()\n    for i in range(1, n + 1):\n        result.add(i)\n    return tuple(result)\n\n\ndef test_even_odd_palindrome():\n    assert even_odd_palindrome(3) == (1, 2)\n    assert even_odd_palindrome(12) == (4, 6)\n\n\nif __name__ == '__main__':\n    test_even_odd_palindrome()"
    },
    {
      "rank": 97,
      "score": 2.7144180491819068,
      "candidate": "even = 0\n    odd = 0\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n    return (even, odd)\n\n\ndef test_even_odd_palindrome():\n    assert even_odd_palindrome(3) == (1, 2)\n    assert even_odd_palindrome(12) == (4, 6)"
    },
    {
      "rank": 98,
      "score": 2.7012895570183724,
      "candidate": "if n == 1:\n        return (1, 1)\n\n    even_palindrome = [0] * (n + 1)\n    odd_palindrome = [0] * (n + 1)\n\n    for i in range(2, n + 1):\n        even_palindrome[i] = even_palindrome[i // 2] + 1\n        odd_palindrome[i] = odd_palindrome[i // 2] + 1\n\n    return (even_palindrome[1], odd_palindrome[1])\n\n\nif __name__ == '__main__':\n    assert even_odd_palindrome(3) == (1, 2)\n    assert even_odd_palindrome(12) == (4, 6)"
    },
    {
      "rank": 99,
      "score": 2.6007990626007946,
      "candidate": "even_palindromes = 0\n    odd_palindromes = 0\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            even_palindromes += 1\n        else:\n            odd_palindromes += 1\n    return even_palindromes, odd_palindromes\n\n\nif __name__ == '__main__':\n    assert even_odd_palindrome(3) == (1, 2)\n    assert even_odd_palindrome(12) == (4, 6)"
    },
    {
      "rank": 100,
      "score": 2.292668821895769,
      "candidate": "even_odd_palindrome_dict = {}\n\n    for i in range(1, n + 1):\n        odd_palindrome_dict = {}\n\n        for j in range(1, i):\n            if i % j == 0:\n                odd_palindrome_dict[i] = odd_palindrome_dict.get(i, 0) + 1\n                odd_palindrome_dict[j] = odd_palindrome_dict.get(j, 0) + 1\n\n        if odd_palindrome_dict:\n            even_odd_palindrome_dict[i] = odd_palindrome_dict.get(i, 0) + 1\n            even_odd_palindrome_dict[i - 1] = odd_palindrome_dict.get(i - 1, 0) + 1\n\n    return tuple(even_odd_palindrome_dict.values())\n\n\nif __name__ == '__main__':\n    assert even_odd_palindrome(3) == (1, 2)\n    assert even_odd_palindrome(12) == (4, 6)"
    }
  ]
}