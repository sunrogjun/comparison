{
  "timestamp": "2025-09-14T12:24:51.992411",
  "method": "improved_llm_judge",
  "judge_model": "codellama/CodeLlama-7b-Python-hf",
  "target_model": "codet5-770m",
  "dataset": "humaneval",
  "problem_number": 156,
  "total_candidates": 100,
  "results": [
    {
      "rank": 1,
      "score": 10.0,
      "candidate": "numeral = {\n        1000: 'M',\n        900: 'CM',\n        500: 'D',\n        400: 'CD',\n        100: 'C',\n        90: 'XC',\n        50: 'L',\n        40: 'XL',\n        10: 'X',\n        9: 'IX',\n        5: 'V',\n        4: 'IV',\n        1: 'I'\n    }\n    result = ''\n    for numeral_value, roman_value in numeral.items():\n        while number >= numeral_value:\n            result += roman_value\n            number -= numeral_value\n    return result\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 2,
      "score": 10.0,
      "candidate": "roman_dict = {\n        1: 'I',\n        2: 'II',\n        3: 'III',\n        4: 'IV',\n        5: 'V',\n        6: 'VI',\n        7: 'VII',\n        8: 'IX',\n        9: 'X',\n        10: 'XL',\n        11: 'L',\n        12: 'XC',\n        13: 'C',\n        14: 'CD',\n        15: 'D',\n        16: 'DC',\n        17: 'CM',\n        18: 'M'\n    }\n\n    result = ''\n    for i in range(1, number + 1):\n        result += roman_dict[i - 1]\n    return result\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod(verbose=True)"
    },
    {
      "rank": 3,
      "score": 10.0,
      "candidate": "int_number = int(number)\n    result = ''\n    int_number_to_roman = {1: 'I', 2: 'II', 3: 'III', 4: 'IV', 5: 'V', 6: 'VI', 7: 'VII', 8: 'VIII', 9: 'IX'}\n    int_roman_to_int_number = {v: k for k, v in int_number_to_roman.items()}\n\n    for i in range(0, len(int_roman_to_int_number)):\n        if i + 1 < len(int_roman_to_int_number):\n            if int_roman_to_int_number[i] < int_roman_to_int_number[i + 1]:\n                result += int_roman_to_int_number[i]\n            else:\n                result += int_roman_to_int_number[i + 1]\n        else:\n            result += int_roman_to_int_number[i]\n\n    return result.lower()\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 4,
      "score": 10.0,
      "candidate": "roman_numeral = {'I': 1, 'V': 5, 'X': 10, 'L': 50, 'C': 100, 'D': 500, 'M': 1000}\n    result = ''\n    for roman in range(1000):\n        if roman_numeral[roman] < number:\n            result += 'M'\n        else:\n            result += 'C'\n    return result\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 5,
      "score": 10.0,
      "candidate": "result = ''\n    for i in range(1, 4):\n        while number >= 1000:\n            result +='m'\n            number -= 1000\n        while number >= 900:\n            result += 'cm'\n            number -= 900\n        while number >= 500:\n            result += 'd'\n            number -= 500\n        while number >= 400:\n            result += 'cd'\n            number -= 400\n        while number >= 100:\n            result += 'c'\n            number -= 100\n        while number >= 90:\n            result += 'x'\n            number -= 90\n        while number >= 50:\n            result += 'l'\n            number -= 50\n        while number >= 40:\n            result += 'xl'\n            number -= 40\n        while number >= 10:\n            result += 'x'\n            number -= 10\n        while number >= 9:\n            result += 'ix'\n            number -= 9\n        while number >= 5:\n            result += 'v'\n            number -= 5\n        while number >= 4:\n            result += 'ix'\n            number -= 4\n        while number >= 1:\n            result += 'i'\n            number -= 1\n    return result.lower()\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 6,
      "score": 10.0,
      "candidate": "int_roman = 'MCMXCIV'\n    int_to_roman = {\n        1000: 'M',\n        900: 'CM',\n        500: 'D',\n        400: 'CD',\n        100: 'C',\n        90: 'XC',\n        50: 'L',\n        40: 'XL',\n        10: 'X',\n        9: 'IX',\n        5: 'V',\n        4: 'IV',\n        1: 'I'\n    }\n    mini_roman = ''\n    for i in range(len(int_roman)):\n        if i < len(int_roman) - 1:\n            if int_roman[i] + int_roman[i+1] > 1000:\n                mini_roman += int_to_roman[int_roman[i]]\n                mini_roman += int_to_roman[int_roman[i+1]]\n                mini_roman += int_to_roman[i+1]\n            else:\n                mini_roman += int_to_roman[i]\n        else:\n            mini_roman += int_to_roman[i]\n    return mini_roman\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod(verbose=True)"
    },
    {
      "rank": 7,
      "score": 10.0,
      "candidate": "# Write your code here\n    roman = ['', 'I', 'II', 'III', 'IV', 'V', 'VI', 'VII', 'VIII']\n    num = str(number)\n    result = ''\n    for i in range(len(num)):\n        if i == 0:\n            result += roman[num[0]]\n        else:\n            if roman[i]!= roman[i-1]:\n                result += roman[i]\n            else:\n                result += roman[i]\n    return result\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod(verbose=True)"
    },
    {
      "rank": 8,
      "score": 10.0,
      "candidate": "roman_numeral = {\n        'I': 1,\n        'V': 5,\n        'X': 10,\n        'L': 50,\n        'C': 100,\n        'D': 500,\n        'M': 1000\n    }\n    result = ''\n    for i in range(len(roman_numeral)):\n        if roman_numeral[i] <= number <= roman_numeral[i+1]:\n            result += roman_numeral[i]\n    return result[::-1]\n\n\ndef mini_roman_to_int(roman_numeral):\n    \"\"\"\n    Given a roman numeral, obtain its integer equivalent as a positive integer,\n    and return it in lowercase.\n    Restrictions: 1 <= roman_numeral <= 4000\n\n    Examples:\n    >>> mini_roman_to_int('xix') == 19\n    >>> mini_roman_to_int('clii') == 152\n    >>> mini_roman_to_int('cdxxvi') == 426\n    \"\"\"\n    roman_numeral = roman_numeral.lower()\n    result = 0\n    for i in range(len(roman_numeral)):\n        if roman_numeral[i] == 'x':\n            result += 10**i\n        elif roman_numeral[i] == 'i':\n            result += 10**(i-1)\n        elif roman_numeral[i] == 'v':\n            result += 10**(i-2)\n        elif roman_numeral[i] == 'l':\n            result += 10**(i-3)\n        elif roman_numeral[i] == 'c':\n            result += 10**(i-4)\n        elif roman_numeral[i] == 'd':\n            result += 10**(i-5)\n        elif roman_numeral[i] =='m':\n            result += 10**(i-6)\n    return result\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 9,
      "score": 10.0,
      "candidate": "if number == 0:\n        return 'zero'\n    if number < 10:\n        return 'one'\n    if number < 50:\n        return 'two'\n    if number < 100:\n        return 'three'\n    if number < 500:\n        return 'four'\n    if number < 1000:\n        return 'five'\n    if number < 5000:\n        return'six'\n    if number < 9000:\n        return'seven'\n    if number < 10000:\n        return 'eight'\n    if number < 50000:\n        return 'nine'\n    return 'ten'\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 10,
      "score": 10.0,
      "candidate": "numeral_dict = {\n        1000:'m',\n        900: 'cm',\n        500: 'd',\n        400: 'cd',\n        100: 'c',\n        90: 'x',\n        50: 'l',\n        40: 'x',\n        10: 'ix',\n        9: 'v',\n        5: 'v',\n        4: 'i',\n        1: 'x'\n    }\n\n    roman_numeral = ''\n    for key, value in numeral_dict.items():\n        while number >= key:\n            roman_numeral += value\n            number -= key\n\n    return roman_numeral\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 11,
      "score": 10.0,
      "candidate": "roman_numeral = {\n        'I': 1,\n        'V': 5,\n        'X': 10,\n        'L': 50,\n        'C': 100,\n        'D': 500,\n        'M': 1000\n    }\n\n    result = ''\n\n    for i in range(len(number)):\n        if i == 0:\n            result += number[i]\n        elif i == len(number) - 1:\n            result += number[i]\n            result += roman_numeral[number[i]]\n        else:\n            result += roman_numeral[number[i]]\n            result += number[i+1]\n\n    return result\n\n\ndef mini_roman_to_int(roman_numeral):\n    \"\"\"\n    Given a roman numeral, obtain its integer equivalent as a positive integer,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> mini_roman_to_int('xix') == 19\n    >>> mini_roman_to_int('clii') == 152\n    >>> mini_roman_to_int('cdxxvi') == 426\n    \"\"\"\n\n    result = 0\n\n    for i in range(len(roman_numeral)):\n        if i == 0:\n            result += roman_numeral[i]\n        elif i == len(roman_numeral) - 1:\n            result += roman_numeral[i]\n            result += roman_numeral[i+1]\n        else:\n            result += roman_numeral[i]\n            result += roman_numeral[i+1] * roman_numeral[i]\n\n    return result\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 12,
      "score": 10.0,
      "candidate": "roman = \"MCMXCIV\"\n    integer = number\n\n    if integer < 0:\n        return ''\n\n    if integer == 1:\n        return roman[0]\n\n    while integer > 0:\n        if integer >= 1000:\n            integer -= 1000\n            return roman[1] + roman[2] + roman[3]\n\n        if integer >= 900:\n            integer -= 900\n            return roman[4] + roman[5] + roman[6]\n\n        if integer >= 500:\n            integer -= 500\n            return roman[7] + roman[8] + roman[9]\n\n        if integer >= 400:\n            integer -= 400\n            return roman[10] + roman[11] + roman[12]\n\n        if integer >= 100:\n            integer -= 100\n            return roman[13] + roman[14] + roman[15]\n\n        if integer >= 90:\n            integer -= 90\n            return roman[16] + roman[17] + roman[18]\n\n        if integer >= 50:\n            integer -= 50\n            return roman[19] + roman[20] + roman[21]\n\n        if integer >= 40:\n            integer -= 40\n            return roman[22] + roman[23] + roman[24]\n\n        if integer >= 10:\n            integer -= 10\n            return roman[24] + roman[25] + roman[26]\n\n        if integer >= 9:\n            integer -= 9\n            return roman[26] + roman[27] + roman[28]\n\n        if integer >= 5:\n            integer -= 5\n            return roman[27] + roman[28] + roman[29]\n\n        if integer >= 4:\n            integer -= 4\n            return roman[29] + roman[30] + roman[31]\n\n        if integer >= 1:\n            integer -= 1\n            return roman[30] + roman[31] + roman[32]\n\n    return ''\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.test"
    },
    {
      "rank": 13,
      "score": 10.0,
      "candidate": "roman_numeral = ['I', 'V', 'X', 'L', 'C', 'D', 'M']\n    digits = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9]\n    result = ''\n\n    for i in range(len(roman_numeral)):\n        while number >= digits[i]:\n            result += roman_numeral[i]\n            number -= digits[i]\n\n    return result\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 14,
      "score": 10.0,
      "candidate": "roman_map = {\n        1000: 'M',\n        900: 'CM',\n        500: 'D',\n        400: 'CD',\n        100: 'C',\n        90: 'XC',\n        50: 'L',\n        40: 'XL',\n        10: 'X',\n        9: 'IX',\n        5: 'V',\n        4: 'IV',\n        1: 'I'\n    }\n    result = ''\n    for i in range(len(roman_map)):\n        if number >= roman_map[i]:\n            result += roman_map[i]\n            number -= roman_map[i]\n    return result\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 15,
      "score": 10.0,
      "candidate": "result = \"\"\n    if number == 0:\n        return \"0\"\n    if number == 1:\n        result = \"1\"\n    if number == 2:\n        result = \"2\"\n    if number == 3:\n        result = \"3\"\n    if number == 4:\n        result = \"4\"\n    if number == 5:\n        result = \"5\"\n    if number == 6:\n        result = \"6\"\n    if number == 7:\n        result = \"7\"\n    if number == 8:\n        result = \"8\"\n    if number == 9:\n        result = \"9\"\n    if number == 10:\n        result = \"10\"\n    if number == 11:\n        result = \"11\"\n    if number == 12:\n        result = \"12\"\n    if number == 13:\n        result = \"13\"\n    if number == 14:\n        result = \"14\"\n    if number == 15:\n        result = \"15\"\n    if number == 16:\n        result = \"16\"\n    if number == 17:\n        result = \"17\"\n    if number == 18:\n        result = \"18\"\n    if number == 19:\n        result = \"19\"\n    if number == 20:\n        result = \"20\"\n    if number == 21:\n        result = \"21\"\n    if number == 22:\n        result = \"22\"\n    if number == 23:\n        result = \"23\"\n    if number == 24:\n        result = \"24\"\n    if number == 25:\n        result = \"25\"\n    if number == 26:\n        result = \"26\"\n    if number == 27:\n        result = \"27\"\n    if number == 28:\n        result = \"28\"\n    if number == 29:\n        result = \"29\"\n    if number == 30:\n        result = \"30\"\n    if number == 31:\n        result = \"31\"\n    if number == 32:\n        result = \"32\"\n    if number == 33:\n        result = \"33\"\n    if number == 34:\n        result = \"34\"\n    if number == 35:\n        result = \"35\"\n    if"
    },
    {
      "rank": 16,
      "score": 10.0,
      "candidate": "result = ''\n    result += int_to_mini_roman(number // 1000)\n    result += int_to_mini_roman(number % 1000)\n    return result\n\n\ndef int_to_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in uppercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_roman(19) == 'XIX'\n    >>> int_to_roman(152) == 'CLII'\n    >>> int_to_roman(426) == 'CDXXVI'\n    \"\"\"\n    result = ''\n    result += int_to_roman(number // 100)\n    result += int_to_roman(number % 100)\n    return result.upper()\n\n\ndef roman_to_int(roman_string):\n    \"\"\"\n    Given a roman numeral equivalent as a string, obtain its integer equivalent as a\n    positive integer, and return it in lowercase.\n    Restrictions: 1 <= roman_string <= 4000\n\n    Examples:\n    >>> roman_to_int('XIX') == 19\n    >>> roman_to_int('CLII') == 152\n    >>> roman_to_int('CDXXVI') == 426\n    \"\"\"\n    result = 0\n    for i in range(len(roman_string)):\n        if i < len(roman_string) - 1:\n            if roman_string[i] == roman_string[i+1]:\n                result += 2**(len(roman_string) - i - 1)\n            else:\n                result += 2**(len(roman_string) - i)\n        else:\n            result += 2**(len(roman_string) - i)\n    return result"
    },
    {
      "rank": 17,
      "score": 10.0,
      "candidate": "roman_dict = {\n        'I': 1,\n        'V': 5,\n        'X': 10,\n        'L': 50,\n        'C': 100,\n        'D': 500,\n        'M': 1000,\n    }\n\n    result = ''\n\n    for i in range(len(number)):\n        if i == 0:\n            result += 'I'\n        elif i == len(number) - 1:\n            result += 'X'\n        elif roman_dict[number[i]] < roman_dict[number[i - 1]]:\n            result += 'L'\n        else:\n            result += 'C'\n\n    return result\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 18,
      "score": 10.0,
      "candidate": "roman_numeral = {'I': 1, 'V': 5, 'X': 10, 'L': 50, 'C': 100, 'D': 500, 'M': 1000}\n    result = ''\n    for i in range(len(number) - 1, -1, -1):\n        if roman_numeral[number[i]] > roman_numeral[number[i + 1]]:\n            result += roman_numeral[number[i]]\n        else:\n            result += roman_numeral[number[i]]\n    return result[::-1]\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 19,
      "score": 10.0,
      "candidate": "int_to_roman_table = {\n        1: 'I',\n        2: 'II',\n        3: 'III',\n        4: 'IV',\n        5: 'V',\n        6: 'VI',\n        7: 'VII',\n        8: 'IX',\n        9: 'X',\n        10: 'XL',\n        11: 'L',\n        12: 'XC',\n        13: 'C',\n        14: 'CD',\n        15: 'D',\n        16: 'CM',\n        17: 'M',\n        18: 'MM'\n    }\n\n    result = \"\"\n    while number:\n        num = number % 10\n        if num >= 4:\n            num -= 4\n            result += int_to_roman_table[num]\n            number /= 10\n        else:\n            result += int_to_roman_table[num]\n\n    return result\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 20,
      "score": 10.0,
      "candidate": "roman_dict = {\n        1000: 'M',\n        900: 'CM',\n        500: 'D',\n        400: 'CD',\n        100: 'C',\n        90: 'XC',\n        50: 'L',\n        40: 'XL',\n        10: 'X',\n        9: 'IX',\n        5: 'V',\n        4: 'IV',\n        1: 'I'\n    }\n\n    result = \"\"\n    for i in range(len(number)):\n        if i > 0 and number[i] == '0':\n            result += '0'\n        elif i > 0 and number[i] == '9':\n            result += '9'\n        elif i > 0 and number[i] == '8':\n            result += '8'\n        elif i > 0 and number[i] == '7':\n            result += '7'\n        elif i > 0 and number[i] == '6':\n            result += '6'\n        elif i > 0 and number[i] == '5':\n            result += '5'\n        elif i > 0 and number[i] == '4':\n            result += '4'\n        elif i > 0 and number[i] == '3':\n            result += '3'\n        elif i > 0 and number[i] == '2':\n            result += '2'\n        elif i > 0 and number[i] == '1':\n            result += '1'\n        else:\n            result += roman_dict[number[i]]\n    return result\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 21,
      "score": 10.0,
      "candidate": "roman_numeral_map = {\n        1000: 'M',\n        900: 'CM',\n        500: 'D',\n        400: 'CD',\n        100: 'C',\n        90: 'XC',\n        50: 'L',\n        40: 'XL',\n        10: 'X',\n        9: 'IX',\n        5: 'V',\n        4: 'IV',\n        1: 'I'\n    }\n    result = ''\n    for i in range(0, len(number), 2):\n        if number[i] > number[i+1]:\n            result += roman_numeral_map[number[i]]\n        else:\n            result += roman_numeral_map[number[i+1]]\n    return result\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 22,
      "score": 10.0,
      "candidate": "# create a dictionary with the values of the roman numeral\n    roman_dict = {\n        'I': 1,\n        'V': 5,\n        'X': 10,\n        'L': 50,\n        'C': 100,\n        'D': 500,\n        'M': 1000\n    }\n\n    # create a list with the roman numeral\n    roman_list = []\n\n    # loop through all the values of the number\n    for value in range(1, number + 1):\n\n        # if the value is less than 10, add it to the list\n        if value < 10:\n            roman_list.append(str(value))\n\n        # if the value is greater than the maximal number, add it to the list\n        else:\n            # find the smallest value in the list and add it to the list\n            smallest_value = min(roman_dict.values())\n            smallest_index = roman_dict.values().index(smallest_value)\n\n            # add the smallest value to the list\n            roman_list.insert(smallest_index, str(value))\n\n    # create a string with the roman numeral\n    roman_string = ''.join(roman_list)\n\n    # return the string\n    return roman_string"
    },
    {
      "rank": 23,
      "score": 10.0,
      "candidate": "if number == 0:\n        return '0'\n    if number == 1:\n        return '1'\n    if number == 2:\n        return '2'\n    if number == 3:\n        return '3'\n    if number == 4:\n        return '4'\n    if number == 5:\n        return '5'\n    if number == 6:\n        return '6'\n    if number == 7:\n        return '7'\n    if number == 8:\n        return '8'\n    if number == 9:\n        return '9'\n    if number == 10:\n        return '10'\n    if number == 11:\n        return '11'\n    if number == 12:\n        return '12'\n    if number == 13:\n        return '13'\n    if number == 14:\n        return '14'\n    if number == 15:\n        return '15'\n    if number == 16:\n        return '16'\n    if number == 17:\n        return '17'\n    if number == 18:\n        return '18'\n    if number == 19:\n        return '19'\n    if number == 20:\n        return '20'\n    if number == 21:\n        return '21'\n    if number == 22:\n        return '22'\n    if number == 23:\n        return '23'\n    if number == 24:\n        return '24'\n    if number == 25:\n        return '25'\n    if number == 26:\n        return '26'\n    if number == 27:\n        return '27'\n    if number == 28:\n        return '28'\n    if number == 29:\n        return '29'\n    if number == 30:\n        return '30'\n    if number == 31:\n        return '31'\n    if number == 32:\n        return '32'\n    if number == 33:\n        return '33'\n    if number == 34:\n        return '34'\n    if number == 35:\n        return '35'\n    if number == 36:\n        return '36'\n    if number == 37:\n        return '37'\n    if number == 38:\n        return '38'\n    if number"
    },
    {
      "rank": 24,
      "score": 10.0,
      "candidate": "roman_numeral = {\n        'I': 1,\n        'V': 5,\n        'X': 10,\n        'L': 50,\n        'C': 100,\n        'D': 500,\n        'M': 1000\n    }\n\n    result = \"\"\n    for i in range(0, number - 1):\n        result += roman_numeral[str(number - 1)]\n    result += roman_numeral[str(number)]\n    return result.lower()\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 25,
      "score": 10.0,
      "candidate": "int_to_roman_table = {\n        0: 'I',\n        1: 'II',\n        2: 'III',\n        3: 'IV',\n        4: 'V',\n        5: 'VI',\n        6: 'VII',\n        7: 'IX',\n        8: 'X',\n        9: 'XL',\n        10: 'L',\n        11: 'XC',\n        12: 'C',\n        13: 'CD',\n        14: 'D',\n        15: 'CM',\n        16: 'M',\n        17: 'MM'\n    }\n    result = ''\n    for i in range(len(number)):\n        if i == 0:\n            result += int_to_roman_table[number[i]]\n        else:\n            result += int_to_roman_table[number[i]] + int_to_roman_table[number[i - 1]]\n    return result\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 26,
      "score": 9.963994939209833,
      "candidate": "if number <= 0:\n        raise ValueError('Number must be > 0')\n    if number >= 1000:\n        return int_to_mini_roman(number - 1000)\n\n    # The first roman numeral is the one which has the smallest number of digits.\n    # The second roman numeral is the one which has the largest number of digits.\n    roman_numeral_dict = {\n        1: 'I',\n        2: 'II',\n        3: 'III',\n        4: 'IV',\n        5: 'V',\n        6: 'VI',\n        7: 'VII',\n        8: 'VIII',\n        9: 'IX',\n        10: 'X',\n        11: 'XL',\n        12: 'L',\n        13: 'XC',\n        14: 'C',\n        15: 'CD',\n        16: 'D',\n        17: 'CM',\n        18: 'M',\n    }\n\n    # The last roman numeral is the one which has the largest number of digits.\n    # The second roman numeral is the one which has the smallest number of digits.\n    roman_numeral_dict_reverse = {\n        1: 'I',\n        2: 'II',\n        3: 'III',\n        4: 'IV',\n        5: 'V',\n        6: 'VI',\n        7: 'VII',\n        8: 'VIII',\n        9: 'IX',\n        10: 'X',\n        11: 'XL',\n        12: 'L',\n        13: 'XC',\n        14: 'C',\n        15: 'CD',\n        16: 'D',\n        17: 'CM',\n        18: 'M',\n    }\n\n    # The roman numeral is represented as a list of strings.\n    roman_numeral_list = []\n\n    # The roman numeral list is represented as a list of integers.\n    roman_numeral_list.append(number)\n\n    # The roman numeral list is represented as a list of integers.\n    for i in range(len(roman_numeral_list) - 1"
    },
    {
      "rank": 27,
      "score": 9.930867849414408,
      "candidate": "roman_map = {\n        1000: 'M',\n        900: 'CM',\n        500: 'D',\n        400: 'CD',\n        100: 'C',\n        90: 'XC',\n        50: 'L',\n        40: 'XL',\n        10: 'X',\n        9: 'IX',\n        5: 'V',\n        4: 'IV',\n        1: 'I'\n    }\n\n    result = []\n    for i in range(1, len(number) + 1):\n        if number[i - 1] < number[i]:\n            result.append(roman_map[number[i - 1]])\n        else:\n            result.append(roman_map[number[i]])\n\n    return ''.join(result)\n\n\ndef mini_roman_to_int(roman):\n    \"\"\"\n    Given a roman numeral equivalent as a string, obtain its integer equivalent,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> mini_roman_to_int('xix') == 19\n    >>> mini_roman_to_int('clii') == 152\n    >>> mini_roman_to_int('cdxxvi') == 426\n    \"\"\"\n    roman_map = {\n        'M': 1000,\n        'C': 900,\n        'D': 500,\n        'L': 400,\n        'X': 100,\n        'V': 90,\n        'I': 50,\n        'XC': 40,\n        'LI': 10,\n        'XI': 9,\n        'IV': 5,\n        'IVI': 4,\n        'VI': 1\n    }\n\n    result = 0\n    for i in range(len(roman) - 1, -1, -1):\n        if roman[i] in roman_map:\n            result += roman_map[roman[i]]\n        else:\n            result += roman_map[roman[i - 1]]\n\n    return result\n\n\nif __name__ == '__main__':\n    import doctest"
    },
    {
      "rank": 28,
      "score": 9.907170511668092,
      "candidate": "numbers = ['', 'I', 'II', 'III', 'IV', 'V', 'VI', 'VII', 'IX']\n    output = []\n    for i in range(len(numbers)):\n        while number >= numbers[i]:\n            output.append(numbers[i])\n            number -= numbers[i]\n    return ''.join(output)\n\n\ndef mini_roman_to_int(roman_numeral):\n    \"\"\"\n    Given a roman numeral string, obtain its integer equivalent as a positive integer,\n    and return it in lowercase.\n    Restrictions: 1 <= roman_numeral <= 4000\n\n    Examples:\n    >>> mini_roman_to_int('xix') == 19\n    >>> mini_roman_to_int('clii') == 152\n    >>> mini_roman_to_int('cdxxvi') == 426\n    \"\"\"\n    numbers = ['', 'I', 'II', 'III', 'IV', 'V', 'VI', 'VII', 'IX']\n    output = 0\n    for i in range(len(roman_numeral)):\n        output += (numbers.index(roman_numeral[i]) - 1) * (len(numbers) - i)\n    return output\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 29,
      "score": 9.887111849756732,
      "candidate": "roman_numbers = {\n        1000: 'M',\n        900: 'CM',\n        500: 'D',\n        400: 'CD',\n        100: 'C',\n        90: 'XC',\n        50: 'L',\n        40: 'XL',\n        10: 'X',\n        9: 'IX',\n        5: 'V',\n        4: 'IV',\n        1: 'I'\n    }\n\n    # return the value of the number\n    return roman_numbers[number]\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 30,
      "score": 9.882923312638333,
      "candidate": "if number == 0:\n        return '0'\n    if number == 1:\n        return '1'\n    if number == 2:\n        return '2'\n    if number == 3:\n        return '3'\n    if number == 4:\n        return '4'\n    if number == 5:\n        return '5'\n    if number == 6:\n        return '6'\n    if number == 7:\n        return '7'\n    if number == 8:\n        return '8'\n    if number == 9:\n        return '9'\n    if number == 10:\n        return '10'\n    if number == 11:\n        return '11'\n    if number == 12:\n        return '12'\n    if number == 13:\n        return '13'\n    if number == 14:\n        return '14'\n    if number == 15:\n        return '15'\n    if number == 16:\n        return '16'\n    if number == 17:\n        return '17'\n    if number == 18:\n        return '18'\n    if number == 19:\n        return '19'\n    if number == 20:\n        return '20'\n    if number == 21:\n        return '21'\n    if number == 22:\n        return '22'\n    if number == 23:\n        return '23'\n    if number == 24:\n        return '24'\n    if number == 25:\n        return '25'\n    if number == 26:\n        return '26'\n    if number == 27:\n        return '27'\n    if number == 28:\n        return '28'\n    if number == 29:\n        return '29'\n    if number == 30:\n        return '30'\n    if number == 31:\n        return '31'\n    if number == 32:\n        return '32'\n    if number == 33:\n        return '33'\n    if number == 34:\n        return '34'\n    if number == 35:\n        return '35'\n    if number == 36:\n        return '36'\n    if number == 37:\n        return '37'\n    if number == 38:\n        return '38'\n    if number"
    },
    {
      "rank": 31,
      "score": 9.845393812074393,
      "candidate": "roman_dict = {1: 'I', 2: 'II', 3: 'III', 4: 'IV', 5: 'V', 6: 'VI', 7: 'VII', 8: 'IX', 9: 'X', 10: 'XL',\n                  11: 'L', 12: 'XC', 13: 'CD', 14: 'C', 15: 'CC', 16: 'CCC', 17: 'CCL', 18: 'CCCC', 19: 'CXX', 20: 'XXX',\n                  30: 'LXXX', 40: 'LXC', 50: 'LXXC', 60: 'LXXII', 70: 'LXXXI', 80: 'LXXXII', 90: 'LXIII',\n                  100: 'XXXI', 200: 'XIII', 300: 'XII', 400: 'XIII', 500: 'XIII', 600: 'XIV', 700: 'XV',\n                  800: 'XVI', 900: 'XVI', 1000: 'XXX']\n    return roman_dict[number]\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 32,
      "score": 9.836168926701117,
      "candidate": "roman_numeral = {\n        'I': 1,\n        'V': 5,\n        'X': 10,\n        'L': 50,\n        'C': 100,\n        'D': 500,\n        'M': 1000\n    }\n    result = ''\n    for i in range(len(number)):\n        if roman_numeral[number[i]] <= roman_numeral[number[i - 1]]:\n            result += 'X'\n        else:\n            result += 'C'\n    return result\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 33,
      "score": 9.803945923433922,
      "candidate": "if number < 0:\n        return f'-{int_to_mini_roman(-number)}'\n    if number == 0:\n        return 'zero'\n    result = ''\n    last_digit = number % 10\n    if last_digit > 4:\n        result = 'thousand'\n    elif last_digit == 4:\n        result = 'five'\n    elif last_digit == 9:\n        result ='six'\n    elif last_digit == 8:\n        result ='seven'\n    elif last_digit == 7:\n        result = 'eight'\n    elif last_digit == 6:\n        result = 'nine'\n    elif last_digit == 5:\n        result = 'five'\n    elif last_digit == 4:\n        result = 'twelve'\n    elif last_digit == 3:\n        result = 'thirteen'\n    elif last_digit == 2:\n        result = 'four'\n    elif last_digit == 1:\n        result = 'fifteen'\n    return f'{result}{int_to_mini_roman(number // 10)}'"
    },
    {
      "rank": 34,
      "score": 9.768291153593768,
      "candidate": "result = []\n    for i in range(1, number+1):\n        result.append(int_to_roman_value(i))\n    return ''.join(result)\n\n\ndef int_to_roman_value(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_roman_value(19) == 'xix'\n    >>> int_to_roman_value(152) == 'clii'\n    >>> int_to_roman_value(426) == 'cdxxvi'\n    \"\"\"\n    if number == 0:\n        return 'zero'\n    if number == 1:\n        return 'one'\n    if number == 2:\n        return 'two'\n    if number == 3:\n        return 'three'\n    if number == 4:\n        return 'four'\n    if number == 5:\n        return 'five'\n    if number == 6:\n        return'six'\n    if number == 7:\n        return'seven'\n    if number == 8:\n        return 'eight'\n    if number == 9:\n        return 'nine'\n    if number == 10:\n        return 'ten'\n    if number == 11:\n        return 'eleven'\n    if number == 12:\n        return 'twelve'\n    if number == 13:\n        return 'thirteen'\n    if number == 14:\n        return 'fourteen'\n    if number == 15:\n        return 'fifteen'\n    if number == 16:\n        return'sixteen'\n    if number == 17:\n        return'seventeen'\n    if number == 18:\n        return 'eighteen'\n    if number == 19:\n        return 'nineteen'\n    if number == 20:\n        return 'twenty'\n    if number == 30:\n        return 'thirty'\n    if number == 40:\n        return 'forty'\n    if number == 50:\n        return 'fift"
    },
    {
      "rank": 35,
      "score": 9.76713512321487,
      "candidate": "numeral_to_roman = {'M': 1000, 'D': 500, 'C': 100, 'L': 50, 'X': 10, 'V': 5, 'I': 1}\n    roman_to_numeral = {'I': 1, 'V': 5, 'X': 10, 'L': 50, 'C': 100, 'D': 500}\n\n    result = ''\n    for i in range(len(numeral_to_roman)):\n        while number >= roman_to_numeral[i]:\n            result += numeral_to_roman[i]\n            number -= roman_to_numeral[i]\n\n    return result\n\n\ndef mini_roman_to_int(roman):\n    \"\"\"\n    Given a roman numeral, obtain its integer equivalent as a positive integer,\n    and return it in lowercase.\n    Restrictions: 1 <= roman <= 4000\n\n    Examples:\n    >>> mini_roman_to_int('xix') == 19\n    >>> mini_roman_to_int('clii') == 152\n    >>> mini_roman_to_int('cdxxvi') == 426\n    \"\"\"\n    roman_to_int = {'M': 1000, 'D': 500, 'C': 100, 'L': 50, 'X': 10, 'V': 5, 'I': 1}\n    int_to_roman = {'1': 'M', '5': 'D', '10': 'C', '15': 'L', '20': 'X', '25': 'V', '30': 'I'}\n\n    result = 0\n    for i in range(len(roman)):\n        while roman[i] in roman_to_int:\n            result += roman_to_int[roman[i]]\n            roman.pop(i)\n\n    return result\n\n\ndef main():\n    import doctest\n    doctest.testmod()\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 36,
      "score": 9.749121478207732,
      "candidate": "assert 1 <= number <= 1000\n\n    roman_numeral = ['I', 'II', 'III', 'IV', 'V', 'VI', 'VII', 'IX']\n    min_roman_numeral = ['', 'X', 'XC', 'CD', 'CM', 'M']\n\n    result = ''\n    for i in range(len(min_roman_numeral)):\n        if number >= roman_numeral[i]:\n            result += min_roman_numeral[i]\n            number -= roman_numeral[i]\n        else:\n            result += min_roman_numeral[i]\n\n    return result\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 37,
      "score": 9.740864890863175,
      "candidate": "numeral = [\n        'I', 'II', 'III', 'IV', 'V', 'VI', 'VII', 'VIII',\n        'IX', 'X', 'XX', 'XXX', 'XL', 'L', 'LX', 'LXX', 'LXXX',\n        'XC', 'C', 'CC', 'CCC', 'CD', 'D', 'DC', 'DCC', 'DCCC',\n        'CM', 'M', 'MM', 'MMM', 'MMMM', 'MMMCM', 'MMMMCM'\n    ]\n    result = []\n    i = 0\n    while number >= 1000:\n        result.append(numeral[i])\n        number -= 1000\n        i += 1\n    result.append(numeral[i])\n    while number >= 500:\n        result.append(numeral[i])\n        number -= 500\n        i += 1\n    result.append(numeral[i])\n    while number >= 100:\n        result.append(numeral[i])\n        number -= 100\n        i += 1\n    result.append(numeral[i])\n    while number >= 50:\n        result.append(numeral[i])\n        number -= 50\n        i += 1\n    result.append(numeral[i])\n    while number >= 10:\n        result.append(numeral[i])\n        number -= 10\n        i += 1\n    result.append(numeral[i])\n    while number >= 9:\n        result.append(numeral[i])\n        number -= 9\n        i += 1\n    result.append(numeral[i])\n    while number >= 5:\n        result.append(numeral[i])\n        number -= 5\n        i += 1\n    result.append(numeral[i])\n    while number >= 1:\n        result.append(numeral[i])\n        number -= 1\n        i += 1\n    return ''.join(result)\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 38,
      "score": 9.73511989811648,
      "candidate": "int_to_roman_map = {'I': 1, 'V': 5, 'X': 10, 'L': 50, 'C': 100, 'D': 500, 'M': 1000}\n    int_to_roman_map_reverse = {'1': 'I', '5': 'V', '10': 'X', '50': 'L', '100': 'C', '500': 'D', '1000': 'M'}\n    result = ''\n    for i in range(len(str(number))):\n        if i < len(str(number)) - 1:\n            if int_to_roman_map[str(number)[i]] > int_to_roman_map[str(number)[i + 1]]:\n                result += int_to_roman_map_reverse[str(number)[i]]\n            else:\n                result += int_to_roman_map_reverse[str(number)[i]]\n        else:\n            if int_to_roman_map[str(number)][0] > int_to_roman_map[str(number)][1]:\n                result += int_to_roman_map_reverse[str(number)][0]\n            else:\n                result += int_to_roman_map_reverse[str(number)][1]\n    return result.lower()\n\n\ndef roman_to_int(roman):\n    \"\"\"\n    Given a roman numeral, obtain its integer equivalent as a positive integer,\n    and return it in lowercase.\n    Restrictions: 1 <= roman <= 4000\n\n    Examples:\n    >>> roman_to_int('XIX') == 19\n    >>> roman_to_int('XIII') == 154\n    >>> roman_to_int('XIIIX') == 154\n    >>> roman_to_int('IX') == 1\n    >>> roman_to_int('IXIX') == 3\n    >>> roman_to_int('XIIII') == 4\n    >>> roman_to_int('XIIIIX') == 4\n    >>> roman_to_int('IXIIII') == 6\n    >>> roman_to_int"
    },
    {
      "rank": 39,
      "score": 9.72780863773741,
      "candidate": "if number == 0:\n        return '0'\n    roman_dict = {\n        1: 'I',\n        2: 'II',\n        3: 'III',\n        4: 'IV',\n        5: 'V',\n        6: 'VI',\n        7: 'VII',\n        8: 'VIII',\n        9: 'IX',\n        10: 'X',\n        11: 'XX',\n        12: 'XXX',\n        13: 'XL',\n        14: 'L',\n        15: 'LX',\n        16: 'LXX',\n        17: 'LXXX',\n        18: 'XC',\n        19: 'C',\n        20: 'CD',\n        30: 'D',\n        40: 'CD',\n        50: 'DC',\n        60: 'DCC',\n        70: 'DCCC',\n        80: 'CM',\n        90: 'M',\n        100: 'CMXC',\n        200: 'MCMXC',\n        300: 'CMXCCC',\n        400: 'CMXXCC',\n        500: 'CMXCCCCC'\n    }\n    result = ''\n    for i in range(len(roman_dict)):\n        while number >= roman_dict[i]:\n            result += roman_dict[i]\n            number -= roman_dict[i]\n    return result\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod(verbose=True)"
    },
    {
      "rank": 40,
      "score": 9.718856235379514,
      "candidate": "num_to_roman = {\n        1: 'I',\n        2: 'II',\n        3: 'III',\n        4: 'IV',\n        5: 'V',\n        6: 'VI',\n        7: 'VII',\n        8: 'IX',\n        9: 'X',\n        10: 'XX',\n        11: 'XXX',\n        12: 'XL',\n        13: 'L',\n        14: 'LX',\n        15: 'LXX',\n        16: 'LXXX',\n        17: 'XC',\n        18: 'C',\n        19: 'CD',\n        20: 'D',\n        30: 'DC',\n        40: 'DCC',\n        50: 'DCCC',\n        60: 'DCCCC',\n        70: 'CD',\n        80: 'D',\n        90: 'CM',\n        100: 'CM',\n    }\n    return num_to_roman[number]\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod(verbose=True)"
    },
    {
      "rank": 41,
      "score": 9.699146693885302,
      "candidate": "int_to_roman_table = {\n        1: 'I',\n        2: 'II',\n        3: 'III',\n        4: 'IV',\n        5: 'V',\n        6: 'VI',\n        7: 'VII',\n        8: 'IX',\n        9: 'X',\n        10: 'XL',\n        11: 'L',\n        12: 'XC',\n        13: 'C',\n        14: 'CD',\n        15: 'D',\n        16: 'CM',\n        17: 'M',\n        18: 'MM',\n    }\n    mini_roman_table = {\n        'I': 1,\n        'II': 2,\n        'III': 3,\n        'IV': 4,\n        'V': 5,\n        'VI': 6,\n        'VII': 7,\n        'IX': 8,\n        'X': 9,\n        'XL': 10,\n        'L': 11,\n        'XC': 12,\n        'C': 13,\n        'CD': 14,\n        'D': 15,\n        'CM': 16,\n        'M': 17,\n        'MM': 18,\n    }\n    result = \"\"\n    for i in range(len(number)):\n        if i!= 0 and mini_roman_table[int_to_roman_table[i]] > mini_roman_table[int_to_roman_table[i - 1]]:\n            result += mini_roman_table[int_to_roman_table[i]]\n        else:\n            result += int_to_roman_table[i]\n    return result[::-1]\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 42,
      "score": 9.677440122697439,
      "candidate": "# Write your code here\n    return int_to_mini_roman_helper(number, 0, 1000, 'M', 'CM', 'D', 'CD', 'C', 'XC', 'L', 'XL', 'X', 'IX', 'V', 'IV', 'I')\n\n\ndef int_to_mini_roman_helper(number, index, total, prefix, suffix, numeral, suffix_len):\n    if index >= total:\n        return prefix + numeral[suffix_len:] + suffix\n\n    if number == 0:\n        return prefix + numeral[suffix_len:]\n    if number < 0:\n        return prefix + numeral[suffix_len:] + '0' * (total - index)\n    return prefix + numeral[suffix_len:] + str(number)\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod(verbose=True)"
    },
    {
      "rank": 43,
      "score": 9.648973453061323,
      "candidate": "roman_numeral_dict = {\n        1: 'I',\n        2: 'II',\n        3: 'III',\n        4: 'IV',\n        5: 'V',\n        6: 'VI',\n        7: 'VII',\n        8: 'VIII',\n        9: 'IX',\n        10: 'X',\n        11: 'XL',\n        12: 'L',\n        13: 'XC',\n        14: 'C',\n        15: 'CD',\n        16: 'D',\n        17: 'CM',\n        18: 'M',\n        19: 'MM'\n    }\n\n    result = ''\n    for i in range(len(number)):\n        result += roman_numeral_dict[number[i]]\n\n    return result.lower()"
    },
    {
      "rank": 44,
      "score": 9.595753198553407,
      "candidate": "numeral_dict = {\n        'M': 1000,\n        'D': 500,\n        'C': 100,\n        'L': 50,\n        'X': 10,\n        'V': 5,\n        'I': 1\n    }\n\n    result = ''\n    for i in range(len(number)):\n        result += numeral_dict[number[i]]\n\n    return result.lower()\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 45,
      "score": 9.58039123838868,
      "candidate": "def int_to_roman_helper(number):\n        roman_numeral = ['', 'M', 'CM', 'D', 'CD', 'C', 'XC', 'L', 'XL', 'X', 'IX', 'V', 'IV', 'I']\n        result = ''\n        for index, roman_numeral_index in enumerate(roman_numeral):\n            while number >= int(roman_numeral_index):\n                result += roman_numeral[index]\n                number -= int(roman_numeral_index)\n        return result\n\n    return int_to_roman_helper(number)\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 46,
      "score": 9.545987962239394,
      "candidate": "roman_dict = {\n        \"I\": 1,\n        \"V\": 5,\n        \"X\": 10,\n        \"L\": 50,\n        \"C\": 100,\n        \"D\": 500,\n        \"M\": 1000,\n    }\n\n    result = \"\"\n    for numeral in range(1, number+1):\n        if numeral < roman_dict[number-1]:\n            result += roman_dict[number-1]\n        else:\n            result += roman_dict[number]\n\n    return result[::-1]\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 47,
      "score": 9.493584439832787,
      "candidate": "# Check if the number is a valid integer\n    if not isinstance(number, int):\n        raise TypeError(\"Number must be an integer\")\n\n    # Check if the number is greater than 1000\n    if number > 1000:\n        raise ValueError(\"Number must be less than 1000\")\n\n    # Create a list to store the result\n    result = []\n\n    # Iterate through the range of numbers\n    for i in range(1, len(str(number)) + 1):\n        # If the current number is greater than the last number in the list, append the\n        # previous number to the result.\n        if number > i:\n            result.append(str(number - i))\n\n        # If the current number is less than the last number in the list, append the\n        # current number to the result.\n        else:\n            result.append(str(i))\n\n    # Join the list and return it\n    return \"\".join(result)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 48,
      "score": 9.446832512996986,
      "candidate": "int_to_roman_dict = {\n        1: 'I',\n        2: 'II',\n        3: 'III',\n        4: 'IV',\n        5: 'V',\n        6: 'VI',\n        7: 'VII',\n        8: 'IX',\n        9: 'X',\n        10: 'XL',\n        11: 'L',\n        12: 'XC',\n        13: 'C',\n        14: 'CD',\n        15: 'D',\n        16: 'CM',\n        17: 'M',\n    }\n\n    result = ''\n    for i in range(1, number + 1):\n        if i < 500:\n            result += int_to_roman_dict[i]\n        elif i < 900:\n            result += int_to_roman_dict[i - 500]\n        elif i < 1000:\n            result += int_to_roman_dict[i - 900]\n        elif i < 500:\n            result += int_to_roman_dict[i - 1000]\n        elif i < 900:\n            result += int_to_roman_dict[i - 500]\n        elif i < 1000:\n            result += int_to_roman_dict[i - 900]\n        elif i < 500:\n            result += int_to_roman_dict[i - 1000]\n        else:\n            result += int_to_roman_dict[i - 500]\n\n    return result.lower()\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 49,
      "score": 9.42450321128885,
      "candidate": "if number < 0:\n        return '0'\n\n    if number == 0:\n        return '0'\n\n    # TODO: implement this function\n    return ''"
    },
    {
      "rank": 50,
      "score": 9.401896687959665,
      "candidate": "roman_numeral = {1: 'I', 2: 'II', 3: 'III', 4: 'IV', 5: 'V', 6: 'VI', 7: 'VII', 8: 'VIII', 9: 'IX',\n                    10: 'X', 11: 'XL', 12: 'L', 13: 'XC', 14: 'C', 15: 'CD', 16: 'D', 17: 'CM', 18: 'M', 19: 'MM'}\n\n    return roman_numeral[number]\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod(verbose=True)"
    },
    {
      "rank": 51,
      "score": 9.389578175014488,
      "candidate": "roman_dict = {1: \"I\", 5: \"V\", 10: \"X\", 50: \"L\", 100: \"C\", 500: \"D\", 1000: \"M\"}\n    number_str = str(number)\n    result = \"\"\n    for i in range(len(number_str) - 1, -1, -1):\n        if roman_dict[i] < roman_dict[i + 1]:\n            result += roman_dict[i]\n        else:\n            result += roman_dict[i + 1]\n    return result\n\n\ndef int_to_mini_roman_v2(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman_v2(19) == 'xix'\n    >>> int_to_mini_roman_v2(152) == 'clii'\n    >>> int_to_mini_roman_v2(426) == 'cdxxvi'\n    \"\"\"\n    roman_dict = {1: \"I\", 5: \"V\", 10: \"X\", 50: \"L\", 100: \"C\", 500: \"D\", 1000: \"M\"}\n    number_str = str(number)\n    result = \"\"\n    for i in range(len(number_str) - 1, -1, -1):\n        if roman_dict[i] < roman_dict[i + 1]:\n            result += roman_dict[i]\n        else:\n            result += roman_dict[i + 1]\n    return result\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 52,
      "score": 9.335906975550785,
      "candidate": "# check input\n    if not (1 <= number <= 1000):\n        raise ValueError\n\n    # initialize output\n    output = ''\n\n    # loop through the numbers\n    for num in range(1, number + 1):\n        # get the roman numeral for the current number\n        roman = int_to_roman(num)\n        # add the current number to the output\n        output += roman\n\n    return output\n\n\ndef mini_roman_to_int(string):\n    \"\"\"\n    Given a roman numeral equivalent as a string, obtain its integer equivalent as an integer,\n    and return it in lowercase.\n    Restrictions: 1 <= roman <= 4000\n\n    Examples:\n    >>> mini_roman_to_int('xix') == 19\n    >>> mini_roman_to_int('clii') == 152\n    >>> mini_roman_to_int('cdxxvi') == 426\n    \"\"\"\n    # check input\n    if not (1 <= string <= 4000):\n        raise ValueError\n\n    # initialize output\n    output = 0\n\n    # loop through the roman numeral\n    for i in range(len(string)):\n        # get the roman numeral for the current number\n        roman = string[i]\n\n        # if the roman numeral is the first character of the string,\n        # add the current number to the output\n        if i == 0:\n            output += int(roman)\n\n        # otherwise, the roman numeral is not the first character of the string,\n        # add the current number to the output\n        else:\n            # if the roman numeral is greater than the last character of the string,\n            # subtract the current number from the output\n            if i == len(string) - 1:\n                output -= int(roman)\n            # else, the roman numeral is less than the last character of the string,\n            # add the current number to the output\n            else:\n                output += int(roman)\n\n    return output\n\n\ndef main():\n    import doctest\n    doctest.testmod(verbose=True)\n\n\nif __name__ == '__main__':"
    },
    {
      "rank": 53,
      "score": 9.293848149332355,
      "candidate": "if number < 0:\n        raise ValueError(\"Number must be non-negative\")\n    if number == 0:\n        return \"zero\"\n    if number == 1:\n        return \"one\"\n    if number == 2:\n        return \"two\"\n    if number == 3:\n        return \"three\"\n    if number == 4:\n        return \"four\"\n    if number == 5:\n        return \"five\"\n    if number == 6:\n        return \"six\"\n    if number == 7:\n        return \"seven\"\n    if number == 8:\n        return \"eight\"\n    if number == 9:\n        return \"nine\"\n    if number == 10:\n        return \"ten\"\n    if number == 11:\n        return \"eleven\"\n    if number == 12:\n        return \"twelve\"\n    if number == 13:\n        return \"thirteen\"\n    if number == 14:\n        return \"fourteen\"\n    if number == 15:\n        return \"fifteen\"\n    if number == 16:\n        return \"sixteen\"\n    if number == 17:\n        return \"seventeen\"\n    if number == 18:\n        return \"eighteen\"\n    if number == 19:\n        return \"nineteen\"\n\n    # TODO: Implement this\n    raise NotImplementedError(\"int_to_mini_roman not implemented yet\")\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 54,
      "score": 9.260739004816287,
      "candidate": "int_to_roman_map = {\n        1: \"I\",\n        2: \"II\",\n        3: \"III\",\n        4: \"IV\",\n        5: \"V\",\n        6: \"VI\",\n        7: \"VII\",\n        8: \"VIII\",\n        9: \"IX\",\n        10: \"X\",\n        11: \"XX\",\n        12: \"XXX\",\n        13: \"XL\",\n        14: \"L\",\n        15: \"LX\",\n        16: \"LXX\",\n        17: \"LXXX\",\n        18: \"XC\",\n        19: \"C\",\n        20: \"CC\",\n        30: \"CD\",\n        40: \"D\",\n        50: \"DC\",\n        60: \"DCC\",\n        70: \"DCCC\",\n        80: \"CD\",\n        90: \"CX\",\n        100: \"XC\",\n        200: \"XXX\",\n        300: \"L\",\n        400: \"LX\",\n        500: \"LXX\",\n        600: \"LXXX\",\n        700: \"C\",\n        800: \"CC\",\n        900: \"CD\",\n        1000: \"M\"\n    }\n    result = \"\"\n    for i in range(len(number)):\n        result += int_to_roman_map[number[i]]\n    return result.lower()\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 55,
      "score": 9.137541083743484,
      "candidate": "roman_numeral = {\n        1: 'I',\n        2: 'II',\n        3: 'III',\n        4: 'IV',\n        5: 'V',\n        6: 'VI',\n        7: 'VII',\n        8: 'IX',\n        9: 'X',\n        10: 'XL',\n        11: 'L',\n        12: 'XC',\n        13: 'C',\n        14: 'CD',\n        15: 'D',\n        16: 'CM',\n        17: 'M',\n        18: 'CM',\n        19: 'CM',\n        20: 'CM',\n        30: 'CM',\n        40: 'CM',\n        50: 'CM',\n        60: 'CM',\n        70: 'CM',\n        80: 'CM',\n        90: 'CM',\n        100: 'XC',\n        200: 'X',\n        300: 'XX',\n        400: 'XXX',\n        500: 'XXX',\n        600: 'XXX',\n        700: 'XXX',\n        800: 'XXX',\n        900: 'XXX',\n        1000: 'X',\n        1001: 'L',\n        1002: 'LXX',\n        1003: 'LXXX',\n        1004: 'LXXX',\n        1005: 'LXXX',\n        1006: 'LXXX',\n        1007: 'LXXX',\n        1008: 'LXXX',\n        1009: 'LXXX',\n        1000: 'XX',\n        1010: 'XL',\n        1020: 'LXX',\n        1030: 'LXXX',\n        1040: 'LXXX',\n        1050: 'LXXX',\n        1060: 'LXXX',\n        1070: 'LXXX',\n        1080: 'LXXX',\n        1090: 'LXXX',\n        1100: 'XX',\n        1110: 'LXX',\n        1120: 'LXXX',\n        1130: 'LXXX',\n        1140: 'LXXX',\n        1150: 'LXXX',\n        1160: 'LXXX',\n        1170: 'L"
    },
    {
      "rank": 56,
      "score": 9.0433598776711,
      "candidate": "if number < 0:\n        return '-'\n    elif number == 0:\n        return '0'\n    elif number == 1:\n        return '1'\n    elif number == 2:\n        return '2'\n    elif number == 3:\n        return '3'\n    elif number == 4:\n        return '4'\n    elif number == 5:\n        return '5'\n    elif number == 6:\n        return '6'\n    elif number == 7:\n        return '7'\n    elif number == 8:\n        return '8'\n    elif number == 9:\n        return '9'\n    elif number == 10:\n        return '10'\n    elif number == 11:\n        return '11'\n    elif number == 12:\n        return '12'\n    elif number == 13:\n        return '13'\n    elif number == 14:\n        return '14'\n    elif number == 15:\n        return '15'\n    elif number == 16:\n        return '16'\n    elif number == 17:\n        return '17'\n    elif number == 18:\n        return '18'\n    elif number == 19:\n        return '19'\n    elif number == 20:\n        return '20'\n    elif number == 21:\n        return '21'\n    elif number == 22:\n        return '22'\n    elif number == 23:\n        return '23'\n    elif number == 24:\n        return '24'\n    elif number == 25:\n        return '25'\n    elif number == 26:\n        return '26'\n    elif number == 27:\n        return '27'\n    elif number == 28:\n        return '28'\n    elif number == 29:\n        return '29'\n    elif number == 30:\n        return '30'\n    elif number == 31:\n        return '31'\n    elif number == 32:\n        return '32'\n    elif number == 33:\n        return '33'\n    elif number == 34:\n        return '34'\n    elif number == 35:\n        return '35'\n    elif number == 36:\n        return '36'\n    elif number == 37:\n        return '37'\n    elif number =="
    },
    {
      "rank": 57,
      "score": 9.020164938060113,
      "candidate": "assert 1 <= number <= 1000\n    roman_numeral_map = {\n        1000: 'M',\n        900: 'CM',\n        500: 'D',\n        400: 'CD',\n        100: 'C',\n        90: 'XC',\n        50: 'L',\n        40: 'XL',\n        10: 'X',\n        9: 'IX',\n        5: 'V',\n        4: 'IV',\n        1: 'I'\n    }\n    return roman_numeral_map[number]\n\n\ndef int_to_mini_roman_2(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman_2(19) == 'xix'\n    >>> int_to_mini_roman_2(152) == 'clii'\n    >>> int_to_mini_roman_2(426) == 'cdxxvi'\n    \"\"\"\n    assert 1 <= number <= 1000\n    roman_numeral_map = {\n        1000: 'M',\n        900: 'CM',\n        500: 'D',\n        400: 'CD',\n        100: 'C',\n        90: 'XC',\n        50: 'L',\n        40: 'XL',\n        10: 'X',\n        9: 'IX',\n        5: 'V',\n        4: 'IV',\n        1: 'I'\n    }\n    return roman_numeral_map[number]\n\n\ndef int_to_mini_roman_3(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman_3(19) == 'xix'\n    >>> int_to_mini_roman_3(152) == 'clii'\n    >>> int_to_mini_roman_3"
    },
    {
      "rank": 58,
      "score": 9.006215542699554,
      "candidate": "if number < 0:\n        raise ValueError('Number must be greater than or equal to zero.')\n\n    if number == 0:\n        return 'zero'\n\n    if number < 10:\n        return 'one'\n\n    if number < 100:\n        return 'two'\n\n    if number < 1000:\n        return 'three'\n\n    if number < 10000:\n        return 'four'\n\n    if number < 100000:\n        return 'five'\n\n    if number < 1000000:\n        return'six'\n\n    if number < 10000000000:\n        return'seven'\n\n    if number < 1000000000000:\n        return 'eight'\n\n    if number < 100000000000000:\n        return 'nine'\n\n    if number < 10000000000:\n        return 'ten'\n\n    if number < 100000000000:\n        return 'eleven'\n\n    if number < 50000000000:\n        return 'twelve'\n\n    if number < 10000000000:\n        return 'thirteen'\n\n    if number < 5000000000:\n        return 'fourteen'\n\n    if number < 1000000000:\n        return 'fifteen'\n\n    if number < 500000000:\n        return'sixteen'\n\n    if number < 100000000:\n        return'seventeen'\n\n    if number < 500000000:\n        return 'eighteen'\n\n    if number < 200000000:\n        return 'nineteen'\n\n    if number < 1000000000:\n        return 'twenty'\n\n    if number < 500000000:\n        return 'thirty'\n\n    if number < 2000000000:\n        return 'forty'\n\n    if number < 1000000000:\n        return 'fifty'\n\n    if number < 500000000:\n        return'sixty'\n\n    if number < 500000000:\n        return'seventy'\n\n    if number < 200000000:\n        return 'eighty'\n\n    if number < 1000000000:\n        return 'ninety'\n\n    if number < 500000000:\n        return 'twenty'\n\n    if number < 1000000000:\n        return 'thirty"
    },
    {
      "rank": 59,
      "score": 8.690127447955128,
      "candidate": "# check input\n    if not isinstance(number, int):\n        raise TypeError('input must be an integer')\n    if number < 1 or number > 1000:\n        raise ValueError('input must be between 1 and 1000')\n\n    # initialize result\n    result = ''\n\n    # loop over roman numbers\n    for i in range(1, 4):\n        # check if number is divisible by i\n        if number % i == 0:\n            # add to result\n            result += int_to_mini_roman(number / i)\n            # remove i\n            number = number % i\n\n    # add to result\n    result += int_to_mini_roman(number)\n\n    # return the result\n    return result\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 60,
      "score": 8.444444444444445,
      "candidate": "result = ''\n    int_num = str(number)\n    if len(int_num) > 2:\n        result += int_num[:2]\n    if len(int_num) > 1:\n        result += int_num[1]\n    if len(int_num) > 0:\n        result += int_num[-1]\n    return result.lower()"
    },
    {
      "rank": 61,
      "score": 8.444444444444445,
      "candidate": "roman = 'MCMXCIV'\n    numeral = ''\n    while number > 0:\n        number, digit = divmod(number - 1, len(roman))\n        numeral += roman[digit]\n    return numeral[::-1]"
    },
    {
      "rank": 62,
      "score": 3.722388491958486,
      "candidate": "if number < 0:\n        raise ValueError(\"number should be >= 0\")\n\n    roman_numeral = {\n        \"M\": 1000,\n        \"CM\": 900,\n        \"D\": 500,\n        \"CD\": 400,\n        \"C\": 100,\n        \"XC\": 90,\n        \"L\": 50,\n        \"XL\": 40,\n        \"X\": 10,\n        \"IX\": 9,\n        \"V\": 5,\n        \"IV\": 4,\n        \"I\": 1,\n    }\n\n    result = \"\"\n    for key, value in roman_numeral.items():\n        while number >= value:\n            result += key\n            number -= value\n\n    return result\n\n\ndef mini_roman_to_int(roman_numeral):\n    \"\"\"\n    Given a roman numeral, obtain its integer equivalent as a positive integer,\n    and return it in lowercase.\n    Restrictions: 1 <= roman_numeral <= 4000\n\n    Examples:\n    >>> mini_roman_to_int('xix') == 19\n    >>> mini_roman_to_int('clii') == 151\n    >>> mini_roman_to_int('cdxxvi') == 426\n    \"\"\"\n    if roman_numeral == \"\":\n        raise ValueError(\"roman_numeral should not be empty\")\n\n    roman_numeral = roman_numeral.lower()\n\n    result = 0\n    for i in range(len(roman_numeral) - 1, -1, -1):\n        if roman_numeral[i] == \"i\":\n            result += 4\n        elif roman_numeral[i] == \"v\":\n            result += 9\n        elif roman_numeral[i] == \"x\":\n            result += 100\n        elif roman_numeral[i] == \"l\":\n            result += 50\n        elif roman_numeral[i] == \"c\":\n            result += 40\n        elif roman_numeral[i] == \"d\":\n            result += 10\n        elif roman_numeral[i] == \"m\":\n            result += 5\n\n    return result"
    },
    {
      "rank": 63,
      "score": 3.6158929980478827,
      "candidate": "result = []\n    if number < 0:\n        return -1\n\n    # base cases\n    if number == 0:\n        result.append('0')\n    if number == 1:\n        result.append('1')\n    if number == 2:\n        result.append('2')\n    if number == 3:\n        result.append('3')\n    if number == 4:\n        result.append('4')\n    if number == 5:\n        result.append('5')\n    if number == 6:\n        result.append('6')\n    if number == 7:\n        result.append('7')\n    if number == 8:\n        result.append('8')\n    if number == 9:\n        result.append('9')\n    if number == 10:\n        result.append('10')\n    if number == 11:\n        result.append('11')\n    if number == 12:\n        result.append('12')\n    if number == 13:\n        result.append('13')\n    if number == 14:\n        result.append('14')\n    if number == 15:\n        result.append('15')\n    if number == 16:\n        result.append('16')\n    if number == 17:\n        result.append('17')\n    if number == 18:\n        result.append('18')\n    if number == 19:\n        result.append('19')\n    if number == 20:\n        result.append('20')\n    if number == 21:\n        result.append('21')\n    if number == 22:\n        result.append('22')\n    if number == 23:\n        result.append('23')\n    if number == 24:\n        result.append('24')\n    if number == 25:\n        result.append('25')\n    if number == 26:\n        result.append('26')\n    if number == 27:\n        result.append('27')\n    if number == 28:\n        result.append('28')\n    if number == 29:\n        result.append('29')\n    if number == 30:\n        result.append('30')\n    if number == 31:\n        result.append('31')\n    if number == 32:"
    },
    {
      "rank": 64,
      "score": 3.599834260921728,
      "candidate": "if number < 0:\n        raise ValueError('Number must be positive')\n    # if number == 0:\n    #     return '0'\n    # else:\n    #     return int_to_mini_roman(number // 1000) + int_to_mini_roman(number % 1000)\n\n    if number < 400:\n        return int_to_mini_roman(number // 100) + 'cm'\n    elif number < 400:\n        return int_to_mini_roman(number // 10) + 'd'\n    elif number < 500:\n        return int_to_mini_roman(number // 5) + 'cd'\n    elif number < 600:\n        return int_to_mini_roman(number // 1) + 'c'\n    elif number < 800:\n        return int_to_mini_roman(number // 5) + 'x'\n    elif number < 1000:\n        return int_to_mini_roman(number // 10) + 'l'\n    else:\n        return int_to_mini_roman(number // 5) + 'x'\n\n\ndef int_to_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in uppercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_roman(19) == 'xix'\n    >>> int_to_roman(152) == 'clii'\n    >>> int_to_roman(426) == 'cdxxvi'\n    \"\"\"\n    if number < 0:\n        raise ValueError('Number must be positive')\n    # if number == 0:\n    #     return '0'\n    # else:\n    #     return int_to_roman(number // 1000) + int_to_roman(number % 1000)\n\n    if number < 400:\n        return int_to_roman(number // 100) + 'c'\n    elif number < 400:\n        return int_to_roman(number // 10) + 'x'\n    elif number < 500:\n        return int"
    },
    {
      "rank": 65,
      "score": 3.59398164399913,
      "candidate": "if number <= 0:\n        raise ValueError('Number must be positive')\n    if number > 1000:\n        raise ValueError('Number must be less than 1000')\n    return int_to_roman_helper(number, 'M', 1000)\n\n\ndef int_to_roman_helper(number, roman_numeral, number_of_roman_numerals):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_roman_helper(19) == 'xix'\n    >>> int_to_roman_helper(152) == 'clii'\n    >>> int_to_roman_helper(426) == 'cdxxvi'\n    \"\"\"\n    if number <= 0:\n        raise ValueError('Number must be positive')\n    if number > 1000:\n        raise ValueError('Number must be less than 1000')\n    if number_of_roman_numerals == 0:\n        return ''\n    if number_of_roman_numerals == 1:\n        if number == 1:\n            return 'I'\n        else:\n            return 'X'\n    if number_of_roman_numerals == 2:\n        if number == 1:\n            return 'II'\n        elif number == 2:\n            return 'III'\n        else:\n            return 'IV'\n    if number_of_roman_numerals == 3:\n        if number == 1:\n            return 'IV'\n        elif number == 2:\n            return 'V'\n        elif number == 3:\n            return 'VI'\n        else:\n            return 'VII'\n    if number_of_roman_numerals == 4:\n        if number == 1:\n            return 'IX'\n        elif number == 2:\n            return 'XL'\n        elif number == 3:\n            return 'L'\n        elif number == 4:\n            return 'XC'\n        else:\n            return 'XLVI'\n    if number_of_roman_numerals == 5:\n        if number == 1:"
    },
    {
      "rank": 66,
      "score": 3.571603019879406,
      "candidate": "roman_numeral_map = {\n        1: \"I\",\n        2: \"II\",\n        3: \"III\",\n        4: \"IV\",\n        5: \"V\",\n        6: \"VI\",\n        7: \"VII\",\n        8: \"IX\",\n        9: \"X\",\n        10: \"XL\",\n        11: \"L\",\n        12: \"XC\",\n        13: \"C\",\n        14: \"CD\",\n        15: \"D\",\n        16: \"CM\",\n        17: \"M\",\n        18: \"MM\",\n    }\n    return \"\".join([roman_numeral_map[number % 10] for number in range(1, number + 1)])"
    },
    {
      "rank": 67,
      "score": 3.528933611142621,
      "candidate": "numeral = ['', 'I', 'II', 'III', 'IV', 'V', 'VI', 'VII', 'IX']\n    roman = ['', 'X', 'L', 'C', 'D', 'M']\n    numeral_dict = dict(enumerate(numeral))\n    roman_dict = dict(enumerate(roman))\n    result = ''\n    for i in range(len(number)):\n        if numeral_dict[number[i]] > roman_dict[number[i]]:\n            result += numeral_dict[number[i]]\n        else:\n            result += roman_dict[number[i]]\n    return result.lower()\n\n\ndef int_to_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_roman(19) == 'xix'\n    >>> int_to_roman(152) == 'clii'\n    >>> int_to_roman(426) == 'cdxxvi'\n    \"\"\"\n    numeral = ['', 'X', 'L', 'C', 'D', 'M']\n    roman = ['', 'I', 'II', 'III', 'IV', 'V', 'VI', 'VII', 'IX']\n    numeral_dict = dict(enumerate(numeral))\n    roman_dict = dict(enumerate(roman))\n    result = ''\n    for i in range(len(number)):\n        if numeral_dict[number[i]] > roman_dict[number[i]]:\n            result += numeral_dict[number[i]]\n        else:\n            result += roman_dict[number[i]]\n    return result.lower()\n\n\ndef roman_to_int(roman):\n    \"\"\"\n    Given a roman numeral, obtain its integer equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= roman <= 4000\n\n    Examples:\n    >>> roman_to_int('III')"
    },
    {
      "rank": 68,
      "score": 3.4122776682253773,
      "candidate": "if number == 0:\n        return 'zero'\n    numeral = ['m', 'cm', 'd', 'cd', 'c', 'x', 'l', 'x']\n    result = ''\n    for i in range(len(numeral)):\n        if number >= 1000 and number <= 900:\n            result += numeral[i]\n        elif number >= 500 and number <= 400:\n            result += numeral[i] + 'ix'\n        elif number >= 100 and number <= 90:\n            result += numeral[i] + 'ix'\n        elif number >= 90 and number <= 50:\n            result += numeral[i] + 'ix'\n        elif number >= 50 and number <= 40:\n            result += numeral[i] + 'ix'\n        elif number >= 40 and number <= 10:\n            result += numeral[i] + 'ix'\n        elif number >= 10 and number <= 9:\n            result += numeral[i] + 'ix'\n        elif number >= 9 and number <= 5:\n            result += numeral[i] + 'ix'\n        elif number >= 5 and number <= 4:\n            result += numeral[i] + 'ix'\n        elif number >= 4 and number <= 1:\n            result += numeral[i] + 'ix'\n    return result.lower()\n\n\ndef mini_roman_to_int(roman):\n    \"\"\"\n    Given a roman numeral, obtain its integer equivalent as a positive integer,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 4000\n\n    Examples:\n    >>> mini_roman_to_int('xix') == 19\n    >>> mini_roman_to_int('clii') == 152\n    >>> mini_roman_to_int('cdxxvi') == 426\n    \"\"\"\n    if roman == 'zero':\n        return 0\n    result = 0\n    numeral = ['m', 'cm', 'd', 'cd', 'c', 'x', 'l', 'x']\n    for i in range(len(numeral)):\n        if roman[i] == 'x':\n            result += 1000\n        elif roman[i] == 'c"
    },
    {
      "rank": 69,
      "score": 3.402089813773421,
      "candidate": "numeral_dict = {\n        1: \"I\",\n        2: \"II\",\n        3: \"III\",\n        4: \"IV\",\n        5: \"V\",\n        6: \"VI\",\n        7: \"VII\",\n        8: \"VIII\",\n        9: \"IX\",\n        10: \"X\",\n        11: \"XX\",\n        12: \"XXX\",\n        13: \"XL\",\n        14: \"L\",\n        15: \"LX\",\n        16: \"LXX\",\n        17: \"LXXX\",\n        18: \"XC\",\n        19: \"CC\",\n        20: \"CD\",\n        30: \"D\",\n        40: \"DC\",\n        50: \"DCC\",\n        60: \"DCCC\",\n        70: \"CM\",\n        80: \"M\",\n        90: \"MM\",\n        100: \"MMM\"\n    }\n    result = \"\"\n    for i in range(len(numeral_dict)):\n        while number >= numeral_dict[i]:\n            result += numeral_dict[i]\n            number -= numeral_dict[i]\n    return result"
    },
    {
      "rank": 70,
      "score": 3.38046259957772,
      "candidate": "if number == 0:\n        return '0'\n    elif number == 1:\n        return '1'\n    elif number == 2:\n        return '2'\n    elif number == 3:\n        return '3'\n    elif number == 4:\n        return '4'\n    elif number == 5:\n        return '5'\n    elif number == 6:\n        return '6'\n    elif number == 7:\n        return '7'\n    elif number == 8:\n        return '8'\n    elif number == 9:\n        return '9'\n    elif number == 10:\n        return '10'\n    elif number == 11:\n        return '11'\n    elif number == 12:\n        return '12'\n    elif number == 13:\n        return '13'\n    elif number == 14:\n        return '14'\n    elif number == 15:\n        return '15'\n    elif number == 16:\n        return '16'\n    elif number == 17:\n        return '17'\n    elif number == 18:\n        return '18'\n    elif number == 19:\n        return '19'\n    elif number == 20:\n        return '20'\n    elif number == 30:\n        return '30'\n    elif number == 40:\n        return '40'\n    elif number == 50:\n        return '50'\n    elif number == 60:\n        return '60'\n    elif number == 70:\n        return '70'\n    elif number == 80:\n        return '80'\n    elif number == 90:\n        return '90'\n    elif number == 100:\n        return '100'\n    elif number == 110:\n        return '110'\n    elif number == 120:\n        return '120'\n    elif number == 130:\n        return '130'\n    elif number == 140:\n        return '140'\n    elif number == 150:\n        return '150'\n    elif number == 160:\n        return '160'\n    elif number == 170:\n        return '170'\n    elif number == 180:\n        return '180'\n    elif number == 190:\n        return '190'\n    elif number == 200:\n        return '200'"
    },
    {
      "rank": 71,
      "score": 3.320792515720244,
      "candidate": "numeral = ['I', 'V', 'X', 'L', 'C', 'D', 'M']\n    result = ''\n    for i in range(len(numeral)):\n        if number >= numeral[i]:\n            result += numeral[i]\n            number -= numeral[i]\n    return result\n\n\ndef roman_to_int(roman_numeral):\n    \"\"\"\n    Given a roman numeral, obtain its integer equivalent as a positive integer,\n    and return it in lowercase.\n    Restrictions: 1 <= roman_numeral <= 4000\n\n    Examples:\n    >>> roman_to_int('XIX') == 19\n    >>> roman_to_int('CLII') == 152\n    >>> roman_to_int('CDXXVI') == 426\n    \"\"\"\n    if roman_numeral == '':\n        return 0\n    result = 0\n    roman_numeral = roman_numeral.strip()\n    for i in range(len(roman_numeral)):\n        if roman_numeral[i] == 'I':\n            result += 1\n        elif roman_numeral[i] == 'V':\n            result += 5\n        elif roman_numeral[i] == 'X':\n            result += 10\n        elif roman_numeral[i] == 'L':\n            result += 50\n        elif roman_numeral[i] == 'C':\n            result += 100\n        elif roman_numeral[i] == 'D':\n            result += 500\n        elif roman_numeral[i] == 'M':\n            result += 1000\n    return result"
    },
    {
      "rank": 72,
      "score": 3.3205419767063376,
      "candidate": "if number == 0:\n        return 'zero'\n\n    int_roman_table = {1: 'I', 2: 'II', 3: 'III', 4: 'IV', 5: 'V', 6: 'VI', 7: 'VII', 8: 'IX', 9: 'X', 10: 'XL',\n                      20: 'L', 30: 'XC', 40: 'CD', 50: 'C', 60: 'CC', 70: 'CCC', 80: 'CD', 90: 'D',\n                      100: 'CM', 400: 'CD', 500: 'CM', 600: 'CD', 700: 'CM', 800: 'CM', 900: 'CM', 1000: 'M'}\n\n    result = ''\n    for i in range(len(int_roman_table)):\n        while number >= int_roman_table[i]:\n            result += int_roman_table[i]\n            number -= int_roman_table[i]\n\n    return result\n\n\ndef mini_roman_to_int(roman):\n    \"\"\"\n    Given a roman numeral, obtain its integer equivalent as a positive integer, and return it in lowercase.\n    Restrictions: 1 <= roman <= 3999\n\n    Examples:\n    >>> mini_roman_to_int('xix') == 19\n    >>> mini_roman_to_int('clii') == 152\n    >>> mini_roman_to_int('cdxxvi') == 426\n    \"\"\"\n    if roman == '':\n        return 0\n\n    result = 0\n    int_roman_table = {1: 'I', 2: 'II', 3: 'III', 4: 'IV', 5: 'V', 6: 'VI', 7: 'VII', 8: 'IX', 9: 'X', 10: 'XL',\n                      20: 'L', 30: 'XC', 40: 'CD', 50: 'C', 60: 'CC', 70: 'CCC', 80: 'CD', 90: 'D',\n                      100: 'CM', 400: 'CD', 500: 'CM', 600: 'CM', 700: 'CM', 800: 'CM', 9"
    },
    {
      "rank": 73,
      "score": 3.2992995443696342,
      "candidate": "result = []\n    for i in range(1, 4):\n        result.append(int_to_mini_roman(number // i))\n        number = number % i\n    result.append(int_to_mini_roman(number))\n    return ''.join(result)\n\n\ndef mini_roman_to_int(roman_numeral):\n    \"\"\"\n    Given a roman numeral, obtain its integer equivalent as a positive integer,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> mini_roman_to_int('xix') == 19\n    >>> mini_roman_to_int('clii') == 152\n    >>> mini_roman_to_int('cdxxvi') == 426\n    \"\"\"\n    result = 0\n    for i in range(len(roman_numeral)):\n        if roman_numeral[i] == 'I':\n            result += 1\n        elif roman_numeral[i] == 'V':\n            result += 5\n        elif roman_numeral[i] == 'X':\n            result += 10\n        elif roman_numeral[i] == 'L':\n            result += 50\n        elif roman_numeral[i] == 'C':\n            result += 100\n        elif roman_numeral[i] == 'D':\n            result += 500\n        elif roman_numeral[i] == 'M':\n            result += 1000\n    return result\n\n\ndef test_function():\n    test_cases = [\n        (19, 'xix'),\n        (152, 'clii'),\n        (426, 'cdxxvi'),\n    ]\n\n    for test_case in test_cases:\n        assert int_to_mini_roman(test_case[0]) == test_case[1]\n        assert mini_roman_to_int(test_case[1]) == test_case[0]\n\n\nif __name__ == '__main__':\n    test_function()"
    },
    {
      "rank": 74,
      "score": 3.2385537526479387,
      "candidate": "if number == 0:\n        return 'zero'\n    if number == 1:\n        return 'one'\n    if number == 2:\n        return 'two'\n    if number == 3:\n        return 'three'\n    if number == 4:\n        return 'four'\n    if number == 5:\n        return 'five'\n    if number == 6:\n        return'six'\n    if number == 7:\n        return'seven'\n    if number == 8:\n        return 'eight'\n    if number == 9:\n        return 'nine'\n    if number == 10:\n        return 'ten'\n    if number == 11:\n        return 'eleven'\n    if number == 12:\n        return 'twelve'\n    if number == 13:\n        return 'thirteen'\n    if number == 14:\n        return 'fourteen'\n    if number == 15:\n        return 'fifteen'\n    if number == 16:\n        return'sixteen'\n    if number == 17:\n        return'seventeen'\n    if number == 18:\n        return 'eighteen'\n    if number == 19:\n        return 'nineteen'\n    if number == 20:\n        return 'twenty'\n    if number == 30:\n        return 'thirty'\n    if number == 40:\n        return 'forty'\n    if number == 50:\n        return 'fifty'\n    if number == 60:\n        return'sixty'\n    if number == 70:\n        return'seventy'\n    if number == 80:\n        return 'eighty'\n    if number == 90:\n        return 'ninety'\n    if number == 100:\n        return 'hundred'\n    if number == 1000:\n        return 'thousand'\n    if number == 10000:\n        return'million'\n    return 'hundred'"
    },
    {
      "rank": 75,
      "score": 3.200174298914209,
      "candidate": "number = abs(number)\n    result = ''\n\n    if number < 0:\n        return ''\n\n    if number == 0:\n        result = '0'\n\n    if number == 1:\n        result = '1'\n\n    if number == 2:\n        result = '2'\n\n    if number == 3:\n        result = '3'\n\n    if number == 4:\n        result = '4'\n\n    if number == 5:\n        result = '5'\n\n    if number == 6:\n        result = '6'\n\n    if number == 7:\n        result = '7'\n\n    if number == 8:\n        result = '8'\n\n    if number == 9:\n        result = '9'\n\n    if number == 10:\n        result = '10'\n\n    if number == 11:\n        result = '11'\n\n    if number == 12:\n        result = '12'\n\n    if number == 13:\n        result = '13'\n\n    if number == 14:\n        result = '14'\n\n    if number == 15:\n        result = '15'\n\n    if number == 16:\n        result = '16'\n\n    if number == 17:\n        result = '17'\n\n    if number == 18:\n        result = '18'\n\n    if number == 19:\n        result = '19'\n\n    if number == 20:\n        result = '20'\n\n    if number == 21:\n        result = '21'\n\n    if number == 22:\n        result = '22'\n\n    if number == 23:\n        result = '23'\n\n    if number == 24:\n        result = '24'\n\n    if number == 25:\n        result = '25'\n\n    if number == 26:\n        result = '26'\n\n    if number == 27:\n        result = '27'\n\n    if number == 28:\n        result = '28'\n\n    if number == 29:\n        result = '29'\n\n    if number == 30:\n        result = '30'\n\n    if number == 31:\n        result = '31'\n\n    if number"
    },
    {
      "rank": 76,
      "score": 3.193718519674381,
      "candidate": "if number <= 0:\n        raise ValueError(\"Number should be greater than 0\")\n\n    if number < 3000:\n        return \"im\"\n    elif number < 4000:\n        return \"ve\"\n    elif number < 5000:\n        return \"i\"\n    elif number < 6000:\n        return \"x\"\n    elif number < 8000:\n        return \"l\"\n    elif number < 9000:\n        return \"c\"\n    elif number < 10000:\n        return \"d\"\n    elif number < 9000:\n        return \"m\"\n    elif number < 5000:\n        return \"v\"\n    elif number < 8000:\n        return \"f\"\n    elif number < 4000:\n        return \"p\"\n    elif number < 1000:\n        return \"e\"\n    elif number < 9000:\n        return \"s\"\n    elif number < 8000:\n        return \"i\"\n    elif number < 500:\n        return \"x\"\n    elif number < 400:\n        return \"l\"\n    elif number < 90:\n        return \"c\"\n    elif number < 50:\n        return \"v\"\n    elif number < 40:\n        return \"i\"\n    elif number < 10:\n        return \"f\"\n    elif number < 9:\n        return \"p\"\n    elif number < 5:\n        return \"e\"\n    elif number < 4:\n        return \"s\"\n    elif number < 1:\n        return \"t\"\n    else:\n        raise ValueError(\"Number should be less than or equal to 1000\")\n\n\ndef mini_roman_to_int(roman_numeral):\n    \"\"\"\n    Given a roman numeral equivalent as a string, obtain its integer equivalent as a\n    positive integer, and return it in lowercase.\n    Restrictions: 1 <= num <= 4\n\n    Examples:\n    >>> mini_roman_to_int('xix') == 19\n    >>> mini_roman_to_int('clii') == 152\n    >>> mini_roman_to_int('cdxxvi') == 426\n    \"\"\"\n    if roman_numeral <= 0:\n        raise ValueError(\"Roman numeral should be greater than 0"
    },
    {
      "rank": 77,
      "score": 3.1410380497685773,
      "candidate": "roman_dict = {\n        1: \"I\",\n        2: \"IV\",\n        3: \"V\",\n        4: \"IX\",\n        5: \"X\",\n        6: \"XL\",\n        7: \"L\",\n        8: \"XC\",\n        9: \"C\",\n        10: \"CD\",\n        11: \"D\",\n        12: \"CM\",\n        13: \"M\"\n    }\n\n    result = \"\"\n    for i in range(1, number + 1):\n        if i == 1:\n            result += roman_dict[i]\n        elif i == 2:\n            result += roman_dict[i] + roman_dict[i - 1]\n        else:\n            result += roman_dict[i] + roman_dict[i - 2]\n    return result.lower()\n\n\ndef mini_roman_to_int(roman_string):\n    \"\"\"\n    Given a roman numeral equivalent as a string, obtain its positive integer, and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> mini_roman_to_int('xix') == 19\n    >>> mini_roman_to_int('clii') == 152\n    >>> mini_roman_to_int('cdxxvi') == 426\n    \"\"\"\n\n    roman_dict = {\n        \"I\": 1,\n        \"V\": 5,\n        \"X\": 10,\n        \"L\": 50,\n        \"C\": 100,\n        \"D\": 500,\n        \"M\": 1000\n    }\n\n    result = 0\n    for i in range(len(roman_string)):\n        if roman_dict[roman_string[i]] <= roman_dict[roman_string[i - 1]]:\n            result += roman_dict[roman_string[i]]\n        else:\n            result -= roman_dict[roman_string[i]]\n    return result\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 78,
      "score": 3.0767758819889583,
      "candidate": "result = ''\n    if number < 0:\n        return 'Negative'\n    roman_map = {'I': 1, 'V': 5, 'X': 10, 'L': 50, 'C': 100, 'D': 500, 'M': 1000}\n    for i in range(len(roman_map)):\n        if roman_map[i] < number:\n            result += 'M'\n        else:\n            result += 'C'\n    return result[::-1]\n\n\ndef int_to_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_roman(19) == 'xix'\n    >>> int_to_roman(152) == 'clii'\n    >>> int_to_roman(426) == 'cdxxvi'\n    \"\"\"\n    result = ''\n    if number < 0:\n        return 'Negative'\n    roman_map = {'I': 1, 'V': 5, 'X': 10, 'L': 50, 'C': 100, 'D': 500, 'M': 1000}\n    for i in range(len(roman_map)):\n        if roman_map[i] < number:\n            result += roman_map[i]\n        else:\n            result += 'C'\n    return result[::-1]"
    },
    {
      "rank": 79,
      "score": 3.0668336296640883,
      "candidate": "roman_numbers = {\n        'I': 1,\n        'V': 5,\n        'X': 10,\n        'L': 50,\n        'C': 100,\n        'D': 500,\n        'M': 1000\n    }\n\n    num_to_roman_dict = {\n        '1': 'I',\n        '5': 'V',\n        '10': 'X',\n        '50': 'L',\n        '100': 'C',\n        '500': 'D',\n        '1000': 'M'\n    }\n\n    result = ''\n    for num in range(1, number + 1):\n        if num in roman_numbers:\n            result += num_to_roman_dict[roman_numbers[num]]\n        else:\n            result += str(num)\n\n    return result.lower()\n\n\ndef mini_roman_to_int(roman_number):\n    \"\"\"\n    Given a roman numeral equivalent as a string, obtain its integer equivalent as a positive integer.\n    Restrictions: 1 <= roman_number <= 4000\n\n    Examples:\n    >>> mini_roman_to_int('xix') == 19\n    >>> mini_roman_to_int('clii') == 152\n    >>> mini_roman_to_int('cdxxvi') == 426\n    \"\"\"\n\n    roman_numbers = {\n        'I': 1,\n        'V': 5,\n        'X': 10,\n        'L': 50,\n        'C': 100,\n        'D': 500,\n        'M': 1000\n    }\n\n    number_to_roman_dict = {\n        '1': 'I',\n        '5': 'V',\n        '10': 'X',\n        '50': 'L',\n        '100': 'C',\n        '500': 'D',\n        '1000': 'M'\n    }\n\n    result = 0\n    for num in range(0, len(roman_number)):\n        if num in roman_numbers:\n            result += roman_numbers[roman_number[num]]\n        else:\n            result += int"
    },
    {
      "rank": 80,
      "score": 3.035786702848846,
      "candidate": "result = ''\n    for i in range(len(number)):\n        if i < len(number) - 1:\n            if number[i] == 'I' and number[i+1] == 'V':\n                result += 'IX'\n            elif number[i] == 'V' and number[i+1] == 'X':\n                result += 'IV'\n            elif number[i] == 'X' and number[i+1] == 'L':\n                result += 'IX'\n            elif number[i] == 'L' and number[i+1] == 'C':\n                result += 'LV'\n            elif number[i] == 'C' and number[i+1] == 'D':\n                result += 'CD'\n            elif number[i] == 'D' and number[i+1] == 'M':\n                result += 'MM'\n        else:\n            if number[i] == 'I':\n                result += 'IX'\n            elif number[i] == 'V':\n                result += 'IV'\n            elif number[i] == 'X':\n                result += 'XL'\n            elif number[i] == 'L':\n                result += 'XC'\n            elif number[i] == 'C':\n                result += 'CD'\n            elif number[i] == 'D':\n                result += 'CM'\n    return result"
    },
    {
      "rank": 81,
      "score": 3.0263359998282904,
      "candidate": "roman_numeral_map = {\n        1: 'I',\n        2: 'II',\n        3: 'III',\n        4: 'IV',\n        5: 'V',\n        6: 'VI',\n        7: 'VII',\n        8: 'VIII',\n        9: 'IX',\n        10: 'X',\n        11: 'XL',\n        12: 'L',\n        13: 'LX',\n        14: 'LXX',\n        15: 'LXXX',\n        16: 'XC',\n        17: 'C',\n        18: 'CD',\n        19: 'D',\n        20: 'DC',\n        21: 'DCC',\n        22: 'DCCC',\n        23: 'DCCCC',\n        24: 'CM',\n        25: 'M',\n        26: 'MM',\n        27: 'MMM'\n    }\n    roman_numeral_map = {v: k for k, v in roman_numeral_map.items()}\n    result = ''\n    for i in range(len(number)):\n        if i == 0:\n            result += roman_numeral_map[number[i]]\n        elif i == 1:\n            result += roman_numeral_map[number[i]]\n        elif i == 2:\n            result += roman_numeral_map[number[i]]\n        elif i == 3:\n            result += roman_numeral_map[number[i]]\n        elif i == 4:\n            result += roman_numeral_map[number[i]]\n        elif i == 5:\n            result += roman_numeral_map[number[i]]\n        elif i == 6:\n            result += roman_numeral_map[number[i]]\n        elif i == 7:\n            result += roman_numeral_map[number[i]]\n        elif i == 8:\n            result += roman_numeral_map[number[i]]\n        elif i == 9:\n            result += roman_numeral_map[number[i]]\n        elif i == 10:\n            result += roman_numeral_map[number"
    },
    {
      "rank": 82,
      "score": 2.9947360823522056,
      "candidate": "numeral = {1000: 'M', 900: 'CM', 500: 'D', 400: 'CD', 100: 'C', 90: 'XC',\n                50: 'L', 40: 'XL', 10: 'X', 9: 'IX', 5: 'V', 4: 'IV', 1: 'I'}\n    result = ''\n    for i in range(len(numeral)):\n        if number >= i * 1000:\n            result += numeral[i]\n            number -= i * 1000\n        else:\n            break\n    return result\n\n\ndef mini_roman_to_int(roman):\n    \"\"\"\n    Given a roman numeral equivalent as a string, obtain its integer equivalent as a positive integer,\n    and return it in lowercase.\n    Restrictions: 1 <= roman <= 4000\n\n    Examples:\n    >>> mini_roman_to_int('xix') == 19\n    >>> mini_roman_to_int('clii') == 152\n    >>> mini_roman_to_int('cdxxvi') == 426\n    \"\"\"\n    numeral = {\n        'M': 1000,\n        'CM': 900,\n        'D': 500,\n        'CD': 400,\n        'C': 100,\n        'XC': 90,\n        'L': 50,\n        'XL': 40,\n        'X': 10,\n        'IX': 9,\n        'V': 5,\n        'IV': 4,\n        'I': 1\n    }\n    result = 0\n    for i in roman:\n        result += numeral[i]\n        number = result\n    return number"
    },
    {
      "rank": 83,
      "score": 2.986027844747119,
      "candidate": "result = ''\n\n    num = number\n    while num >= 1000:\n        result +='m'\n        num -= 1000\n    while num >= 900:\n        result += 'cm'\n        num -= 900\n    while num >= 500:\n        result += 'd'\n        num -= 500\n    while num >= 400:\n        result += 'cd'\n        num -= 400\n    while num >= 100:\n        result += 'c'\n        num -= 100\n    while num >= 90:\n        result += 'x'\n        num -= 90\n    while num >= 50:\n        result += 'l'\n        num -= 50\n    while num >= 40:\n        result += 'x'\n        num -= 40\n    while num >= 10:\n        result += 'ix'\n        num -= 10\n    while num >= 9:\n        result += 'v'\n        num -= 9\n    while num >= 5:\n        result += 'v'\n        num -= 5\n    while num >= 4:\n        result += 'i'\n        num -= 4\n    while num >= 1:\n        result += '1'\n        num -= 1\n\n    return result\n\n\ndef mini_roman_to_int(roman):\n    \"\"\"\n    Given a string, obtain its integer equivalent as a positive integer,\n    and return it in lowercase.\n    Restrictions: 1 <= roman <= 4000\n\n    Examples:\n    >>> mini_roman_to_int('xix') == 19\n    >>> mini_roman_to_int('clii') == 152\n    >>> mini_roman_to_int('cdxxvi') == 426\n    \"\"\"\n    result = 0\n    roman = roman.lower()\n    for i in range(len(roman) - 1, -1, -1):\n        if roman[i] == 'x':\n            result += 10 ** (i + 1)\n        elif roman[i] == 'i':\n            result += 1\n        elif roman[i] == 'v':\n            result += 5 ** (i + 1)\n        elif roman[i] == 'l':\n            result += 5 ** (i + 1)\n        elif roman[i"
    },
    {
      "rank": 84,
      "score": 2.954897169868586,
      "candidate": "result = \"\"\n    for i in range(1, len(number) + 1):\n        if i < len(number) - 1:\n            if number[i] == 'I':\n                result += 'IV'\n            elif number[i] == 'V':\n                result += 'V'\n            elif number[i] == 'X':\n                result += 'IX'\n            elif number[i] == 'L':\n                result += 'L'\n            elif number[i] == 'C':\n                result += 'CC'\n            elif number[i] == 'D':\n                result += 'CD'\n            elif number[i] == 'M':\n                result += 'MM'\n            else:\n                result += 'X'\n        else:\n            result += number[i]\n    return result.lower()\n\n\ndef min_to_int_roman(number):\n    \"\"\"\n    Given a string, obtain its roman numeral equivalent as a positive integer,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> min_to_int_roman('xix') == 19\n    >>> min_to_int_roman('clii') == 152\n    >>> min_to_int_roman('cdxxvi') == 426\n    \"\"\"\n    result = \"\"\n    for i in range(1, len(number) + 1):\n        if i < len(number) - 1:\n            if number[i] == 'I':\n                result += 'IV'\n            elif number[i] == 'V':\n                result += 'V'\n            elif number[i] == 'X':\n                result += 'IX'\n            elif number[i] == 'L':\n                result += 'L'\n            elif number[i] == 'C':\n                result += 'CC'\n            elif number[i] == 'D':\n                result += 'CD'\n            elif number[i] == 'M':\n                result += 'MM'\n            else:\n                result += number[i]\n        else:\n            result += number[i]\n    return result.lower()\n\n\ndef int_to_roman(number):"
    },
    {
      "rank": 85,
      "score": 2.9143279637433706,
      "candidate": "int_roman = {\n        0: 'I',\n        1: 'IV',\n        2: 'V',\n        3: 'VI',\n        4: 'IX',\n        5: 'X',\n        6: 'XL',\n        7: 'L',\n        8: 'XC',\n        9: 'C',\n        10: 'CD',\n        11: 'D',\n        12: 'CM',\n        13: 'M'\n    }\n    int_mini_roman = {\n        0: 'I',\n        1: 'IV',\n        2: 'V',\n        3: 'VI',\n        4: 'IX',\n        5: 'X',\n        6: 'XL',\n        7: 'L',\n        8: 'XC',\n        9: 'C',\n        10: 'CD',\n        11: 'D',\n        12: 'CM',\n        13: 'M'\n    }\n    num_str = str(number)\n    if len(num_str) == 1:\n        return int_mini_roman[0]\n    else:\n        if num_str[0] == '0':\n            return int_mini_roman[int_roman[int_str[1]]] + int_to_mini_roman(int(num_str[2:]))\n        else:\n            return int_mini_roman[int_roman[int_str[1]]] + int_to_mini_roman(int(num_str[2:])) + int_to_mini_roman(int(num_str[0]))\n\n\ndef mini_roman_to_int(roman_numeral):\n    \"\"\"\n    Given a roman numeral, obtain its integer equivalent as a positive integer,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> mini_roman_to_int('xix') == 19\n    >>> mini_roman_to_int('clii') == 152\n    >>> mini_roman_to_int('cdxxvi') == 426\n    \"\"\"\n    mini_roman"
    },
    {
      "rank": 86,
      "score": 2.9086865867898197,
      "candidate": "number = str(number)\n    result = ''\n    for i in range(len(number) - 1):\n        if number[i] == '1' and number[i + 1] == '2':\n            result += 'III'\n        elif number[i] == '2' and number[i + 1] == '4':\n            result += 'IV'\n        elif number[i] == '4' and number[i + 1] == '6':\n            result += 'V'\n        elif number[i] == '6' and number[i + 1] == '8':\n            result += 'IX'\n        elif number[i] == '8' and number[i + 1] == '9':\n            result += 'XL'\n        elif number[i] == '9' and number[i + 1] == '10':\n            result += 'XC'\n        elif number[i] == '10' and number[i + 1] == '13':\n            result += 'CM'\n        elif number[i] == '13' and number[i + 1] == '20':\n            result += 'CD'\n        elif number[i] == '20' and number[i + 1] == '40':\n            result += 'C'\n        elif number[i] == '40' and number[i + 1] == '80':\n            result += 'L'\n        elif number[i] == '80' and number[i + 1] == '90':\n            result += 'X'\n        elif number[i] == '90' and number[i + 1] == '100':\n            result += 'C'\n        elif number[i] == '100' and number[i + 1] == '500':\n            result += 'D'\n        elif number[i] == '500' and number[i + 1] == '1000':\n            result += 'M'\n        elif number[i] == '1000' and number[i + 1] == '2000':\n            result += 'C'\n        elif number[i] == '2000' and number[i + 1] == '4000':\n            result += 'L'\n        elif number[i] == '4000' and number[i +"
    },
    {
      "rank": 87,
      "score": 2.886239437580622,
      "candidate": "result = \"\"\n    numeral_map = {\n        0: \"I\",\n        1: \"V\",\n        2: \"X\",\n        3: \"L\",\n        4: \"C\",\n        5: \"D\",\n        6: \"M\",\n        7: \"IV\",\n        8: \"IX\",\n        9: \"XL\",\n        10: \"XC\",\n        11: \"CD\",\n        12: \"CD\",\n        13: \"CM\",\n        14: \"CM\",\n        15: \"MCD\",\n        16: \"MM\",\n        17: \"MMM\",\n        18: \"MMMM\"\n    }\n    for i in range(9):\n        result += numeral_map[number // 1000]\n        number %= 1000\n    for i in range(9, 16):\n        result += numeral_map[number // 500]\n        number %= 500\n    for i in range(9, 8):\n        result += numeral_map[number // 100]\n        number %= 100\n    for i in range(9, 7):\n        result += numeral_map[number // 50]\n        number %= 50\n    for i in range(9, 4):\n        result += numeral_map[number // 10]\n        number %= 10\n    for i in range(9, 2):\n        result += numeral_map[number // 5]\n        number %= 5\n    for i in range(9, 1):\n        result += numeral_map[number // 1]\n        number %= 1\n    return result.lower()\n\n\ndef mini_roman_to_int(roman):\n    \"\"\"\n    Given a roman numeral equivalent as a string, obtain its integer equivalent as a positive integer,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> mini_roman_to_int('xix') == 19\n    >>> mini_roman_to_int('clii') == 152\n    >>> mini_roman_to_int('cdxxvi') == 426\n    \"\"\"\n    result = 0\n    roman_map = {\n        \"I\": 1,\n        \"V\": 5,"
    },
    {
      "rank": 88,
      "score": 2.883387133318312,
      "candidate": "roman_numeral = {\n        1: 'I',\n        2: 'II',\n        3: 'III',\n        4: 'IV',\n        5: 'V',\n        6: 'VI',\n        7: 'VII',\n        8: 'VIII',\n        9: 'IX',\n        10: 'X',\n        11: 'XX',\n        12: 'XXX',\n        13: 'XL',\n        14: 'L',\n        15: 'LX',\n        16: 'LXX',\n        17: 'LXXX',\n        18: 'XC',\n        19: 'C',\n        20: 'CC',\n        21: 'CCC',\n        22: 'CCCC',\n        23: 'CD',\n        24: 'D',\n        25: 'DC',\n        26: 'DCC',\n        27: 'DCCC',\n        28: 'DCCCC',\n        29: 'CM',\n        30: 'M',\n        31: 'MM',\n        32: 'MMM',\n        33: 'MMMM',\n        34: 'MMMMMM',\n        35: 'MMMMMMMM',\n        36: 'MMMMMMMMMM',\n        37: 'MMMMMMMMMMMM',\n        38: 'MMMMMMMMMMMMMM'\n    }\n\n    result = ''\n    for k in roman_numeral:\n        while number >= k:\n            result += roman_numeral[k]\n            number -= k\n\n    return result[::-1]\n\n\ndef min_to_int(string):\n    \"\"\"\n    Given a string, obtain its roman numeral equivalent as a positive integer,\n    and return it in lowercase.\n    Restrictions: 1 <= string <= 4000\n\n    Examples:\n    >>> min_to_int('xix') == 19\n    >>> min_to_int('clii') == 152\n    >>> min_to_int('cdxxvi') == 426\n    \"\"\"\n    roman_numeral = {\n        'I': 1,\n        'II': 2,\n        'III': 3,\n        'IV': 4,\n        '"
    },
    {
      "rank": 89,
      "score": 2.8825695587201774,
      "candidate": "numerals = [\n        (\"M\", 1000),\n        (\"CM\", 900),\n        (\"D\", 500),\n        (\"CD\", 400),\n        (\"C\", 100),\n        (\"XC\", 90),\n        (\"L\", 50),\n        (\"XL\", 40),\n        (\"X\", 10),\n        (\"IX\", 9),\n        (\"V\", 5),\n        (\"IV\", 4),\n        (\"I\", 1),\n    ]\n\n    result = \"\"\n\n    for numeral, num in numerals:\n        while number >= num:\n            result += numeral\n            number -= num\n\n    return result\n\n\ndef int_to_mini_roman_2(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    numerals = [\n        (\"M\", 1000),\n        (\"CM\", 900),\n        (\"D\", 500),\n        (\"CD\", 400),\n        (\"C\", 100),\n        (\"XC\", 90),\n        (\"L\", 50),\n        (\"XL\", 40),\n        (\"X\", 10),\n        (\"IX\", 9),\n        (\"V\", 5),\n        (\"IV\", 4),\n        (\"I\", 1),\n    ]\n\n    result = \"\"\n\n    for numeral, num in numerals:\n        while number >= num:\n            result += numeral\n            number -= num\n\n    return result\n\n\ndef int_to_mini_roman_3(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152"
    },
    {
      "rank": 90,
      "score": 2.8498179106376367,
      "candidate": "result = ''\n    if number < 0:\n        return 'invalid'\n    elif number == 0:\n        return 'zero'\n    elif number == 1:\n        return 'one'\n    elif number == 2:\n        return 'two'\n    elif number == 3:\n        return 'three'\n    elif number == 4:\n        return 'four'\n    elif number == 5:\n        return 'five'\n    elif number == 6:\n        return'six'\n    elif number == 7:\n        return'seven'\n    elif number == 8:\n        return 'eight'\n    elif number == 9:\n        return 'nine'\n    elif number == 10:\n        return 'ten'\n    elif number == 11:\n        return 'eleven'\n    elif number == 12:\n        return 'twelve'\n    elif number == 13:\n        return 'thirteen'\n    elif number == 14:\n        return 'fourteen'\n    elif number == 15:\n        return 'fifteen'\n    elif number == 16:\n        return'sixteen'\n    elif number == 17:\n        return'seventeen'\n    elif number == 18:\n        return 'eighteen'\n    elif number == 19:\n        return 'nineteen'\n    elif number == 20:\n        return 'twenty'\n    elif number == 30:\n        return 'thirty'\n    elif number == 40:\n        return 'forty'\n    elif number == 50:\n        return 'fifty'\n    elif number == 60:\n        return'sixty'\n    elif number == 70:\n        return'seventy'\n    elif number == 80:\n        return 'eighty'\n    elif number == 90:\n        return 'ninety'\n\n    if number == 1:\n        result += 'one'\n    elif number == 2:\n        result += 'two'\n    elif number == 3:\n        result += 'three'\n    elif number == 4:\n        result += 'four'\n    elif number == 5:\n        result += 'five'\n    elif number == 6:\n        result += '"
    },
    {
      "rank": 91,
      "score": 2.820350879325683,
      "candidate": "# Your code here\n    return int_to_roman_dict[number]\n\n\ndef int_to_roman_dict(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a dictionary,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_roman_dict(19) == {\n   ...     'xix': 'xix',\n   ...     'clii': 'clii',\n   ...     'cdxxvi': 'cdxxvi'\n   ... }\n    >>> int_to_roman_dict(152) == {\n   ...     'xix': 'xix',\n   ...     'clii': 'clii',\n   ...     'cdxxvi': 'cdxxvi'\n   ... }\n    >>> int_to_roman_dict(426) == {\n   ...     'xix': 'xix',\n   ...     'clii': 'clii',\n   ...     'cdxxvi': 'cdxxvi'\n   ... }\n    \"\"\"\n    # Your code here\n    result = {\n        'i': 'I',\n        'v': 'V',\n        'x': 'X',\n        'l': 'L',\n        'c': 'C',\n        'd': 'D',\n       'm': 'M'\n    }\n    result_dict = {\n        'i': 'I',\n        'v': 'V',\n        'x': 'X',\n        'l': 'L',\n        'c': 'C',\n        'd': 'D',\n       'm': 'M'\n    }\n    roman_dict = {\n        'I': 'X',\n        'V': 'L',\n        'X': 'C',\n        'L': 'D',\n        'C': 'M'\n    }\n\n    if number == 0:\n        return 0\n    elif number < 0:\n        return -1\n\n    while number > 0:\n        if number >= 1000:\n            number -= 1000\n            result = result_dict[roman_dict[number]] + result\n            number = number"
    },
    {
      "rank": 92,
      "score": 2.816904989485369,
      "candidate": "if number <= 0:\n        return \"\"\n\n    numeral = [\"\", \"M\", \"CM\", \"D\", \"CD\", \"C\", \"XC\", \"L\", \"XL\", \"X\", \"IX\", \"V\", \"IV\", \"I\"]\n\n    result = \"\"\n    for i in range(len(numeral)):\n        if i == 0 or i == len(numeral) - 1:\n            result += numeral[i]\n        elif number >= numeral[i] + numeral[i + 1]:\n            result += numeral[i]\n        else:\n            result += numeral[i]\n    return result[::-1]\n\n\ndef mini_roman_to_int(string):\n    \"\"\"\n    Given a roman numeral equivalent as a string, obtain its integer equivalent as a positive integer,\n    and return it in lowercase.\n    Restrictions: 1 <= string <= 4000\n\n    Examples:\n    >>> mini_roman_to_int('xix') == 19\n    >>> mini_roman_to_int('clii') == 152\n    >>> mini_roman_to_int('cdxxvi') == 426\n    \"\"\"\n    if string == \"\":\n        return 0\n\n    result = 0\n    for i in range(len(string)):\n        if i == 0 or i == len(string) - 1:\n            result += string[i]\n        elif string[i] == 'I':\n            result += 1\n        elif string[i] == 'V':\n            result += 5\n        elif string[i] == 'X':\n            result += 10\n        elif string[i] == 'L':\n            result += 50\n        elif string[i] == 'C':\n            result += 100\n        elif string[i] == 'D':\n            result += 500\n        elif string[i] == 'M':\n            result += 1000\n        elif string[i] == 'I':\n            result += 10000\n\n    return result\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 93,
      "score": 2.813122047240337,
      "candidate": "int_to_mini_roman_table = {\n        1: \"I\",\n        2: \"IV\",\n        3: \"V\",\n        4: \"IX\",\n        5: \"X\",\n        6: \"XL\",\n        7: \"L\",\n        8: \"XC\",\n        9: \"C\",\n        10: \"CD\",\n        11: \"D\",\n        12: \"CM\",\n        13: \"M\",\n        14: \"MM\",\n    }\n    roman_to_int_table = {\n        \"I\": 1,\n        \"IV\": 2,\n        \"V\": 3,\n        \"IX\": 4,\n        \"X\": 5,\n        \"XL\": 6,\n        \"L\": 7,\n        \"XC\": 8,\n        \"C\": 9,\n        \"CD\": 10,\n        \"D\": 11,\n        \"CM\": 12,\n        \"M\": 13,\n    }\n    result = \"\"\n    for i in range(number):\n        if roman_to_int_table[result[len(result)-1]] < roman_to_int_table[i]:\n            result += int_to_mini_roman_table[roman_to_int_table[i]]\n        else:\n            result += int_to_mini_roman_table[roman_to_int_table[i]]\n    return result.lower()\n\n\ndef int_to_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_roman(19) == 'xix'\n    >>> int_to_roman(152) == 'clii'\n    >>> int_to_roman(426) == 'cdxxvi'\n    \"\"\"\n    int_to_roman_table = {\n        1: \"I\",\n        2: \"IV\",\n        3: \"V\",\n        4: \"IX\",\n        5: \"X\",\n        6: \"XL\",\n        7: \"L\","
    },
    {
      "rank": 94,
      "score": 2.7657509109316663,
      "candidate": "roman_dict = {\n        'I': 1,\n        'V': 5,\n        'X': 10,\n        'L': 50,\n        'C': 100,\n        'D': 500,\n        'M': 1000,\n    }\n\n    result = ''\n    for key, value in roman_dict.items():\n        while number >= value:\n            result += key\n            number -= value\n    return result.lower()\n\n\ndef roman_to_int(roman_numeral):\n    \"\"\"\n    Given a roman numeral, obtain its integer equivalent as a positive integer,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> roman_to_int('xix') == 19\n    >>> roman_to_int('clii') == 152\n    >>> roman_to_int('cdxxvi') == 426\n    \"\"\"\n    roman_dict = {\n        'I': 1,\n        'V': 5,\n        'X': 10,\n        'L': 50,\n        'C': 100,\n        'D': 500,\n        'M': 1000,\n    }\n\n    result = 0\n    for key, value in roman_dict.items():\n        while roman_numeral.startswith(key):\n            result += value\n            roman_numeral = roman_numeral[len(key):]\n    return result\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 95,
      "score": 2.736000419880676,
      "candidate": "if number < 0:\n        return 'Negative number'\n    if number == 0:\n        return 'Zero'\n    if number < 500:\n        return 'One'\n    if number < 1000:\n        return 'Two'\n    if number < 2000:\n        return 'Three'\n    if number < 5000:\n        return 'Four'\n    if number < 9000:\n        return 'Five'\n    if number < 10000:\n        return 'Six'\n    if number < 50000:\n        return 'Seven'\n    if number < 500000:\n        return 'Eight'\n    if number < 100000:\n        return 'Nine'\n\n    # Reversible way of handling negative numbers\n    if number < 0:\n        return int_to_mini_roman(number * -1)\n    return int_to_mini_roman(number // 1000) + int_to_mini_roman(number % 1000)\n\n\ndef roman_to_int(roman_numeral):\n    \"\"\"\n    Given a roman numeral, obtain its integer equivalent as a positive integer,\n    and return it in lowercase.\n    Restrictions: 1 <= roman_numeral <= 3999\n\n    Examples:\n    >>> roman_to_int('IX') == 19\n    >>> roman_to_int('XLIX') == 39\n    >>> roman_to_int('MCMXCIV') == 987654321\n    >>> roman_to_int('CMXCIV') == 987654321\n    \"\"\"\n    if roman_numeral == '0':\n        return 0\n    if roman_numeral == '1':\n        return 1\n    if roman_numeral == '2':\n        return 2\n    if roman_numeral == '3':\n        return 3\n    if roman_numeral == '4':\n        return 4\n    if roman_numeral == '5':\n        return 5\n    if roman_numeral == '6':\n        return 6\n    if roman_numeral == '7':\n        return 7\n    if roman_numeral == '8':\n        return 8"
    },
    {
      "rank": 96,
      "score": 2.7192607587260635,
      "candidate": "roman_map = {1: 'I', 2: 'II', 3: 'III', 4: 'IV', 5: 'V', 6: 'VI', 7: 'VII', 8: 'VIII', 9: 'IX', 10: 'X',\n                 11: 'XX', 12: 'XXX', 13: 'XL', 14: 'L', 15: 'LX', 16: 'LXX', 17: 'LXXX', 18: 'XC', 19: 'C', 20: 'CD',\n                 21: 'D', 22: 'DC', 23: 'DCC', 24: 'DCCC', 25: 'DCCCC', 26: 'CM', 27: 'M', 28: 'MM', 29: 'MMM'}\n    return roman_map[number]"
    },
    {
      "rank": 97,
      "score": 2.587492737707199,
      "candidate": "# O(n) time | O(1) space\n    roman_map = {'I': 1, 'V': 5, 'X': 10, 'L': 50, 'C': 100, 'D': 500, 'M': 1000}\n    result = ''\n    for i in range(len(number)):\n        if roman_map[number[i]] > roman_map[number[i - 1]]:\n            result += roman_map[number[i]]\n        else:\n            result += roman_map[number[i - 1]]\n\n    return result"
    },
    {
      "rank": 98,
      "score": 2.444348207376752,
      "candidate": "if number == 0:\n        return \"zero\"\n    elif number == 1:\n        return \"one\"\n    elif number == 2:\n        return \"two\"\n    elif number == 3:\n        return \"three\"\n    elif number == 4:\n        return \"four\"\n    elif number == 5:\n        return \"five\"\n    elif number == 6:\n        return \"six\"\n    elif number == 7:\n        return \"seven\"\n    elif number == 8:\n        return \"eight\"\n    elif number == 9:\n        return \"nine\"\n    elif number == 10:\n        return \"ten\"\n    elif number == 11:\n        return \"eleven\"\n    elif number == 12:\n        return \"twelve\"\n    elif number == 13:\n        return \"thirteen\"\n    elif number == 14:\n        return \"fourteen\"\n    elif number == 15:\n        return \"fifteen\"\n    elif number == 16:\n        return \"sixteen\"\n    elif number == 17:\n        return \"seventeen\"\n    elif number == 18:\n        return \"eighteen\"\n    elif number == 19:\n        return \"nineteen\"\n    elif number == 20:\n        return \"twenty\"\n    elif number == 30:\n        return \"thirty\"\n    elif number == 40:\n        return \"forty\"\n    elif number == 50:\n        return \"fifty\"\n    elif number == 60:\n        return \"sixty\"\n    elif number == 70:\n        return \"seventy\"\n    elif number == 80:\n        return \"eighty\"\n    elif number == 90:\n        return \"ninety\"\n\n\ndef roman_to_int(roman_numeral):\n    \"\"\"\n    Given a string, obtain its integer equivalent as a positive integer,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 4000\n\n    Examples:\n    >>> roman_to_int('xix') == 19\n    >>> roman_to_int('clii') == 152\n    >>> roman_to_int('cdxxvi')"
    },
    {
      "rank": 99,
      "score": 2.429229170228474,
      "candidate": "if number == 0:\n        return '0'\n    if number == 1:\n        return '1'\n    if number == 2:\n        return '2'\n    if number == 3:\n        return '3'\n    if number == 4:\n        return '4'\n    if number == 5:\n        return '5'\n    if number == 6:\n        return '6'\n    if number == 7:\n        return '7'\n    if number == 8:\n        return '8'\n    if number == 9:\n        return '9'\n    if number == 10:\n        return '10'\n    if number == 11:\n        return '11'\n    if number == 12:\n        return '12'\n    if number == 13:\n        return '13'\n    if number == 14:\n        return '14'\n    if number == 15:\n        return '15'\n    if number == 16:\n        return '16'\n    if number == 17:\n        return '17'\n    if number == 18:\n        return '18'\n    if number == 19:\n        return '19'\n    if number == 20:\n        return '20'\n    if number == 21:\n        return '21'\n    if number == 22:\n        return '22'\n    if number == 23:\n        return '23'\n    if number == 24:\n        return '24'\n    if number == 25:\n        return '25'\n    if number == 26:\n        return '26'\n    if number == 27:\n        return '27'\n    if number == 28:\n        return '28'\n    if number == 29:\n        return '29'\n    if number == 30:\n        return '30'\n    if number == 31:\n        return '31'\n    if number == 32:\n        return '32'\n    if number == 33:\n        return '33'\n    if number == 34:\n        return '34'\n    if number == 35:\n        return '35'\n    if number == 36:\n        return '36'\n    if number == 37:\n        return '37'\n    if number == 38:\n        return '38'\n    if number"
    },
    {
      "rank": 100,
      "score": 2.3124143394085337,
      "candidate": "if number <= 0:\n        raise ValueError('number must be greater than 0')\n\n    if number == 1:\n        return 'I'\n\n    if number == 2:\n        return 'II'\n\n    if number == 3:\n        return 'III'\n\n    if number == 4:\n        return 'IV'\n\n    if number == 5:\n        return 'V'\n\n    if number == 6:\n        return 'VI'\n\n    if number == 7:\n        return 'VII'\n\n    if number == 8:\n        return 'VIII'\n\n    if number == 9:\n        return 'IX'\n\n    if number == 10:\n        return 'X'\n\n    if number == 11:\n        return 'XX'\n\n    if number == 12:\n        return 'XXX'\n\n    if number == 13:\n        return 'XL'\n\n    if number == 14:\n        return 'L'\n\n    if number == 15:\n        return 'LX'\n\n    if number == 16:\n        return 'LXX'\n\n    if number == 17:\n        return 'LXXX'\n\n    if number == 18:\n        return 'LXL'\n\n    if number == 19:\n        return 'LXXL'\n\n    if number == 20:\n        return 'LXXXI'\n\n    if number == 30:\n        return 'LXXIV'\n\n    if number == 40:\n        return 'LXXXVI'\n\n    if number == 50:\n        return 'LXXXIX'\n\n    if number == 60:\n        return 'LXXLIX'\n\n    if number == 70:\n        return 'LXXXXC'\n\n    if number == 80:\n        return 'LXXXIX'\n\n    if number == 90:\n        return 'LXXCXI'\n\n    if number == 100:\n        return 'LXXCIX'\n\n    if number == 110:\n        return 'LXXCIXI'\n\n    if number == 120:\n        return 'LXCIX'\n\n    if number == 130:\n        return 'LXCXI'\n\n    if number == 140:\n        return 'CXX"
    }
  ]
}