{
  "timestamp": "2025-09-14T11:54:38.907288",
  "method": "improved_llm_judge",
  "judge_model": "codellama/CodeLlama-7b-Python-hf",
  "target_model": "codet5-770m",
  "dataset": "humaneval",
  "problem_number": 88,
  "total_candidates": 100,
  "results": [
    {
      "rank": 1,
      "score": 10.0,
      "candidate": "array = sorted(array)\n    return array\n\n\ndef main():\n    print(sort_array([]))\n    print(sort_array([5]))\n    print(sort_array([2, 4, 3, 0, 1, 5]))\n    print(sort_array([2, 4, 3, 0, 1, 5, 6]))\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 2,
      "score": 10.0,
      "candidate": "if array == []:\n        return []\n    if len(array) <= 1:\n        return array\n    if array[0] % 2 == 0:\n        return sort_array(array[1:]) + sort_array(array[:-1])\n    else:\n        return sort_array(array[:-1]) + sort_array(array[1:])"
    },
    {
      "rank": 3,
      "score": 10.0,
      "candidate": "if not array:\n        return []\n    if len(array) == 1:\n        return array\n    first_index = array[0]\n    last_index = array[-1]\n    if first_index % 2 == 0:\n        if last_index % 2 == 0:\n            return sorted(array)\n        else:\n            return sorted(array, reverse=True)\n    else:\n        if last_index % 2 == 0:\n            return sorted(array, reverse=False)\n        else:\n            return sorted(array, reverse=True)\n\n\nassert sort_array([]) == []\nassert sort_array([5]) == [5]\nassert sort_array([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5]\nassert sort_array([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0]"
    },
    {
      "rank": 4,
      "score": 10.0,
      "candidate": "if array == []:\n        return []\n    elif len(array) == 1:\n        return array\n    else:\n        left_sum = 0\n        right_sum = 0\n        for i in range(len(array)):\n            left_sum += array[i]\n            right_sum += array[len(array) - 1 - i]\n\n        if left_sum % 2 == 0:\n            return sorted(array)\n        else:\n            return sorted(array, reverse=True)\n\n\ndef test_sort_array():\n    assert sort_array([]) == []\n    assert sort_array([5]) == [5]\n    assert sort_array([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5]\n    assert sort_array([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0]\n    assert sort_array([1, 2, 3, 4, 5, 6]) == [1, 2, 3, 4, 5, 6]\n    assert sort_array([1, 2, 3, 4, 5, 6, 7, 8, 9]) == [1, 2, 3, 4, 5, 6, 7, 8, 9]\n\n\nif __name__ == \"__main__\":\n    test_sort_array()"
    },
    {
      "rank": 5,
      "score": 10.0,
      "candidate": "if not array:\n        return []\n\n    # find the sum of the first and last index values\n    first_sum = sum(array[:len(array) // 2])\n    last_sum = sum(array[len(array) // 2:])\n\n    # if the sum is odd, sort the array in ascending order\n    if first_sum % 2 == 1:\n        return sort_array(array[::-1])\n\n    # if the sum is even, sort the array in descending order\n    return sort_array(array[::2])\n\n\nif __name__ == '__main__':\n    assert sort_array([]) == []\n    assert sort_array([5]) == [5]\n    assert sort_array([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5]\n    assert sort_array([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0]"
    },
    {
      "rank": 6,
      "score": 10.0,
      "candidate": "if len(array) <= 1:\n        return array\n    sum_even = sum_odd = 0\n    for i in range(len(array)):\n        sum_even += array[i]\n        if sum_even % 2 == 0:\n            array.sort(reverse=True)\n            return array\n        sum_odd += array[i]\n        if sum_odd % 2 == 1:\n            array.sort(reverse=True)\n            return array\n\n    return array"
    },
    {
      "rank": 7,
      "score": 10.0,
      "candidate": "if array == []:\n        return []\n\n    # initialize the first index value\n    first_index = 0\n    # initialize the last index value\n    last_index = len(array) - 1\n\n    while first_index < last_index:\n        # get the sum of the given array\n        sum = array[first_index] + array[last_index]\n\n        # if the sum is odd\n        if sum % 2 == 1:\n            # swap the first index value with the last index value\n            array[first_index], array[last_index] = array[last_index], array[first_index]\n\n            # update the first index value\n            first_index += 1\n\n        # if the sum is even\n        else:\n            # swap the last index value with the first index value\n            array[last_index], array[first_index] = array[first_index], array[last_index]\n\n            # update the last index value\n            last_index -= 1\n\n    return array\n\n\n# Tests\nassert sort_array([]) == []\nassert sort_array([5]) == [5]\nassert sort_array([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5]\nassert sort_array([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0]"
    },
    {
      "rank": 8,
      "score": 10.0,
      "candidate": "if array is None:\n        return None\n    odd_sum, even_sum = 0, 0\n    for i in range(len(array)):\n        if array[i] % 2 == 0:\n            odd_sum += array[i]\n        else:\n            even_sum += array[i]\n    if odd_sum % 2 == 0:\n        return [odd_sum] + sorted(array)\n    else:\n        return [even_sum] + sorted(array, reverse=True)"
    },
    {
      "rank": 9,
      "score": 10.0,
      "candidate": "if not array:\n        return []\n\n    if len(array) == 1:\n        return array\n\n    if len(array) == 2:\n        if array[0] + array[1] % 2 == 0:\n            return [array[0], array[1]]\n        else:\n            return [array[1], array[0]]\n\n    left_sum = array[0]\n    right_sum = array[-1]\n    sorted_array = []\n\n    for i in range(len(array)):\n        if left_sum <= right_sum:\n            sorted_array.append(array[i])\n            left_sum += array[i]\n        else:\n            sorted_array.append(array[i])\n            right_sum -= array[i]\n\n    return sorted_array + sort_array(array[1:len(array)])"
    },
    {
      "rank": 10,
      "score": 10.0,
      "candidate": "if len(array) <= 1:\n        return array\n    # TODO: sort by sum of first and last index\n    return sorted(array, key=lambda x: (x % 2 == 0, x % 2 == 1))\n\n\ndef main():\n    import doctest\n    doctest.testmod()\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 11,
      "score": 10.0,
      "candidate": "# Your code here\n    return sorted(array, key=lambda x: (x % 2, x // 2))\n\n\n# Tests\nassert sort_array([]) == []\nassert sort_array([5]) == [5]\nassert sort_array([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5]\nassert sort_array([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0]"
    },
    {
      "rank": 12,
      "score": 10.0,
      "candidate": "if len(array) == 0:\n        return []\n\n    odd_index = 0\n    even_index = len(array) - 1\n\n    while odd_index <= even_index:\n        if array[odd_index] % 2 == 1:\n            array[odd_index], array[even_index] = array[even_index], array[odd_index]\n            even_index -= 1\n            odd_index += 1\n        else:\n            array[even_index], array[odd_index] = array[odd_index], array[even_index]\n            odd_index += 1\n            even_index -= 1\n\n    return array"
    },
    {
      "rank": 13,
      "score": 10.0,
      "candidate": "# Write your code here\n    if array == []:\n        return []\n    if len(array) == 1:\n        return array\n\n    if array[0] + array[-1] % 2 == 0:\n        return sort_array(array[1:-1])\n    else:\n        return sort_array(array[1:])\n\n\n# Testing\nassert sort_array([]) == []\nassert sort_array([5]) == [5]\nassert sort_array([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5]\nassert sort_array([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0]"
    },
    {
      "rank": 14,
      "score": 10.0,
      "candidate": "if not array:\n        return []\n\n    odd = False\n    even = False\n    for i in range(len(array)):\n        if array[i] % 2 == 1:\n            even = True\n        else:\n            odd = True\n\n    if odd:\n        return sort_array(array[::-1])\n    else:\n        return sort_array(array[::-1]) + [array[0]]"
    },
    {
      "rank": 15,
      "score": 10.0,
      "candidate": "# Your code here\n    n = len(array)\n    if n <= 1:\n        return array\n    if n % 2 == 1:\n        return sort_array(array[:n//2]) + sort_array(array[n//2:])\n    else:\n        return sort_array(array[:n//2]) + sort_array(array[n//2+1:])\n\n\n# Test cases:\nprint(sort_array([]))\nprint(sort_array([5]))\nprint(sort_array([2, 4, 3, 0, 1, 5]))\nprint(sort_array([2, 4, 3, 0, 1, 5, 6]))"
    },
    {
      "rank": 16,
      "score": 10.0,
      "candidate": "# initialize a new array\n    new_array = []\n\n    # iterate through the given array\n    for element in array:\n\n        # if the element is odd, we want to add it to the new array\n        if element % 2 == 0:\n            new_array.append(element)\n\n        # if the element is even, we want to subtract it from the new array\n        else:\n            new_array.append(-element)\n\n    return new_array"
    },
    {
      "rank": 17,
      "score": 10.0,
      "candidate": "# O(n) time | O(1) space\n    if len(array) <= 1:\n        return array\n\n    # check if the sum of the first index value is even\n    # if so, we need to sort the array in ascending order\n    # if not, we need to sort the array in descending order\n    if sum(array[:-1]) % 2 == 0:\n        return sort_array(array[1:]) + sort_array(array[:-1])\n    else:\n        return sort_array(array[1:]) + sort_array(array[:-1])[::-1]\n\n\n# TESTS\nassert sort_array([]) == []\nassert sort_array([5]) == [5]\nassert sort_array([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5]\nassert sort_array([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0]\nassert sort_array([2, 4, 3, 0, 1, 5, 6]) == sort_array([1, 2, 3, 4, 5, 6])"
    },
    {
      "rank": 18,
      "score": 8.976423287421207,
      "candidate": "if len(array) <= 1:\n        return array\n    else:\n        first_index = array[0]\n        last_index = array[-1]\n        if sum(array[1:-1]) % 2 == 0:\n            return sort_array(array[1:]) + [first_index] + sort_array(array[:-1])\n        else:\n            return sort_array(array[:-1]) + [last_index] + sort_array(array[1:])"
    },
    {
      "rank": 19,
      "score": 8.967376877042874,
      "candidate": "if len(array) == 0:\n        return []\n    if len(array) == 1:\n        return array\n\n    odd_sum = array[0] + array[-1]\n    if odd_sum % 2 == 1:\n        return sort_array(array[1:-1])\n    else:\n        return sort_array(array[1:])\n\n\ndef test_sort_array():\n    assert sort_array([]) == []\n    assert sort_array([5]) == [5]\n    assert sort_array([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5]\n    assert sort_array([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0]"
    },
    {
      "rank": 20,
      "score": 8.962274595623173,
      "candidate": "# Your code here\n\n    return sorted(array, key = lambda x: x % 2, reverse = True)\n\n\n# Testing\nassert sort_array([]) == []\nassert sort_array([5]) == [5]\nassert sort_array([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5]\nassert sort_array([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0]"
    },
    {
      "rank": 21,
      "score": 8.905566054158525,
      "candidate": "if not array:\n        return []\n    if len(array) <= 1:\n        return array\n    first = array[0]\n    last = array[-1]\n    if first % 2 == 0:\n        return sort_array(array[1:-1])\n    else:\n        return sort_array(array[1:])\n\n\n# Tests\nassert sort_array([]) == []\nassert sort_array([5]) == [5]\nassert sort_array([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5]\nassert sort_array([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0]"
    },
    {
      "rank": 22,
      "score": 8.724109714559528,
      "candidate": "# define a variable to store the result\n    result = []\n\n    # find the first and last index of the given array\n    first_index = 0\n    last_index = len(array) - 1\n\n    # check if the sum of the first and last index values is even or odd\n    if sum(array[first_index:last_index+1]) % 2 == 0:\n        # sort the array in ascending order\n        result = sort_array(array[:first_index]) + sort_array(array[last_index:])\n    else:\n        # sort the array in descending order\n        result = sort_array(array[:last_index]) + sort_array(array[first_index:])\n\n    # return the result\n    return result"
    },
    {
      "rank": 23,
      "score": 8.72389129593202,
      "candidate": "# initialize the variable to return\n    result = []\n\n    # loop over the given array\n    for num in array:\n\n        # if the sum of the first and last index values is odd, sort the array\n        if num % 2 == 1:\n\n            # append the number to the result\n            result.append(num)\n\n            # sort the array in ascending order\n            result.sort()\n\n        # if the sum of the first and last index values is even, sort the array\n        else:\n\n            # append the number to the result\n            result.append(num)\n\n            # sort the array in descending order\n            result.sort(reverse=True)\n\n    return result\n\n\n# test\nassert sort_array([]) == []\nassert sort_array([5]) == [5]\nassert sort_array([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5]\nassert sort_array([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0]"
    },
    {
      "rank": 24,
      "score": 8.705372252356433,
      "candidate": "n = len(array)\n    if n == 0:\n        return []\n\n    if n == 1:\n        return array\n\n    even_sum = 0\n    odd_sum = 0\n    for i in range(0, n):\n        if i % 2 == 0:\n            even_sum += array[i]\n        else:\n            odd_sum += array[i]\n\n    if odd_sum % 2 == 0:\n        return sort_array(array[::-1])\n    else:\n        return sort_array(array[::-1])[::-1]"
    },
    {
      "rank": 25,
      "score": 8.695523081642884,
      "candidate": "if not array:\n        return []\n\n    first = array[0]\n    last = array[-1]\n\n    if first % 2 == 0 and last % 2 == 0:\n        return sort_array(array[1:-1]) + sort_array(array)\n    else:\n        return sort_array(array[1:-1]) + [last] + sort_array(array)"
    },
    {
      "rank": 26,
      "score": 8.66465854739868,
      "candidate": "# Your code here\n    if not array:\n        return []\n    odd, even = sum(array[:2]), sum(array[2:])\n    if odd % 2 == 0:\n        return sorted(array, reverse=True)\n    else:\n        return sorted(array, reverse=False)\n\n\nif __name__ == '__main__':\n    assert sort_array([]) == []\n    assert sort_array([5]) == [5]\n    assert sort_array([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5]\n    assert sort_array([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0]"
    },
    {
      "rank": 27,
      "score": 8.628914859263674,
      "candidate": "return sorted(array, key=lambda x: x % 2, reverse=True)\n\n\ndef test_sort_array():\n    assert sort_array([]) == []\n    assert sort_array([5]) == [5]\n    assert sort_array([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5]\n    assert sort_array([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0]"
    },
    {
      "rank": 28,
      "score": 8.613327256468263,
      "candidate": "if not array:\n        return []\n\n    odd_sum, even_sum = 0, 0\n    for i in range(len(array)):\n        if array[i] % 2 == 0:\n            even_sum += array[i]\n        else:\n            odd_sum += array[i]\n\n    if odd_sum % 2 == 0:\n        return [i for i in range(len(array)) if i % 2 == 0] + [i for i in range(len(array)) if i % 2!= 0]\n    else:\n        return [i for i in range(len(array)) if i % 2!= 0] + [i for i in range(len(array)) if i % 2 == 0]\n\n\nif __name__ == \"__main__\":\n    assert sort_array([]) == []\n    assert sort_array([5]) == [5]\n    assert sort_array([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5]\n    assert sort_array([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0]\n    assert sort_array([2, 4, 3, 0, 1, 5, 6, 7, 8]) == [7, 8, 9, 5, 4, 3, 2, 1, 0]"
    },
    {
      "rank": 29,
      "score": 8.572181770681974,
      "candidate": "array.sort()\n    return array\n\n\nif __name__ == \"__main__\":\n    assert sort_array([]) == []\n    assert sort_array([5]) == [5]\n    assert sort_array([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5]\n    assert sort_array([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0]"
    },
    {
      "rank": 30,
      "score": 8.567400692960641,
      "candidate": "array = sorted(array)\n    if sum(array[:len(array)//2]) % 2 == 0:\n        return array[::-1]\n    return array\n\n\n# Tests\nassert sort_array([]) == []\nassert sort_array([5]) == [5]\nassert sort_array([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5]\nassert sort_array([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0]"
    },
    {
      "rank": 31,
      "score": 8.565862718758439,
      "candidate": "return sorted(array, key=lambda x: (x % 2 == 1, -x % 2))\n\n\ndef test_sort_array():\n    assert sort_array([]) == []\n    assert sort_array([5]) == [5]\n    assert sort_array([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5]\n    assert sort_array([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0]"
    },
    {
      "rank": 32,
      "score": 8.561274662897722,
      "candidate": "if len(array) < 2:\n        return array\n\n    left = 0\n    right = len(array) - 1\n\n    while left < right:\n        sum_of_two = array[left] + array[right]\n        if sum_of_two % 2 == 0:\n            array[left], array[right] = array[right], array[left]\n            left += 1\n            right -= 1\n        else:\n            array[left], array[right] = array[right], array[left]\n            right -= 1\n\n    return array"
    },
    {
      "rank": 33,
      "score": 8.557074011121657,
      "candidate": "return sorted(array, key=lambda num: (num % 2, num))\n\n\n# Testing\nassert sort_array([]) == []\nassert sort_array([5]) == [5]\nassert sort_array([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5]\nassert sort_array([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0]"
    },
    {
      "rank": 34,
      "score": 8.551288537526839,
      "candidate": "if not array:\n        return array\n    odd_sum = 0\n    even_sum = 0\n    for i in range(len(array)):\n        if array[i] % 2 == 1:\n            even_sum += array[i]\n        else:\n            odd_sum += array[i]\n    array.sort(reverse=True)\n    if odd_sum % 2 == 0:\n        array.extend([0] * (len(array) - odd_sum))\n    if even_sum % 2 == 0:\n        array.extend([0] * (len(array) - even_sum))\n    return array\n\n\n# Tests\nassert sort_array([]) == []\nassert sort_array([5]) == [5]\nassert sort_array([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5]\nassert sort_array([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0]"
    },
    {
      "rank": 35,
      "score": 8.502709660049035,
      "candidate": "if not array:\n        return array\n\n    first_index = array[0]\n    last_index = array[-1]\n    sum_odd = 0\n    sum_even = 0\n\n    for i in range(len(array)):\n        if i == 0:\n            sum_odd += array[i]\n        elif i == len(array) - 1:\n            sum_even += array[i]\n        else:\n            sum_odd += array[i]\n            sum_even += array[i + 1]\n\n    result = []\n    if sum_odd % 2 == 0:\n        result.extend(array[::-1])\n    else:\n        result.extend(array)\n    if sum_even % 2 == 0:\n        result.extend(array[::-1])\n    else:\n        result.extend(array)\n\n    return result"
    },
    {
      "rank": 36,
      "score": 8.467404034038339,
      "candidate": "if len(array) <= 1:\n        return array\n    else:\n        odd_sum = array[0]\n        for i in range(1, len(array)):\n            if array[i] % 2 == 1:\n                odd_sum += array[i]\n            else:\n                odd_sum -= array[i]\n        if odd_sum % 2 == 1:\n            return sort_array(array[::-1])\n        else:\n            return sort_array(array[1::])"
    },
    {
      "rank": 37,
      "score": 8.432263591147061,
      "candidate": "odd_sum = 0\n    even_sum = 0\n    result = []\n    for i in array:\n        if i % 2 == 1:\n            result.append(i)\n        else:\n            result.append(i - 1)\n    if even_sum == 0:\n        result.sort()\n    elif odd_sum == 0:\n        result.sort(reverse=True)\n    return result"
    },
    {
      "rank": 38,
      "score": 8.419961003107131,
      "candidate": "if not array:\n        return []\n\n    # find the first index value\n    first_index = None\n    for i in range(len(array)):\n        if first_index is None:\n            first_index = i\n\n    # find the last index value\n    last_index = None\n    for i in range(len(array)):\n        if last_index is None:\n            last_index = i\n\n    # find the sum of the first index value and the last index value\n    sum_odd = 0\n    sum_even = 0\n    for i in range(len(array)):\n        if array[i] % 2 == 1:\n            sum_odd += array[i]\n        else:\n            sum_even += array[i]\n\n    # sort the array in ascending order if the sum is odd\n    if sum_odd % 2 == 1:\n        array.sort(reverse=True)\n    else:\n        array.sort(reverse=False)\n\n    # sort the array in descending order if the sum is even\n    if sum_even % 2 == 1:\n        array.sort(reverse=True)\n    else:\n        array.sort(reverse=False)\n\n    return array\n\n\n# Tests\nassert sort_array([]) == []\nassert sort_array([5]) == [5]\nassert sort_array([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5]\nassert sort_array([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0]"
    },
    {
      "rank": 39,
      "score": 8.397434582046241,
      "candidate": "if len(array) == 0:\n        return []\n    even_sum = 0\n    odd_sum = 0\n    for i in range(0, len(array)):\n        if array[i] % 2 == 0:\n            even_sum += array[i]\n        else:\n            odd_sum += array[i]\n    if even_sum % 2 == 0:\n        array.sort()\n    else:\n        array.reverse()\n    return array\n\n\n# TESTS\nassert sort_array([]) == []\nassert sort_array([5]) == [5]\nassert sort_array([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5]\nassert sort_array([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0]"
    },
    {
      "rank": 40,
      "score": 8.313516469102897,
      "candidate": "first = 0\n    last = len(array) - 1\n    if last < first:\n        return array\n    if sum(array[first:last]) % 2 == 0:\n        return sort_array(array[first:last][::-1])\n    else:\n        return sort_array(array[first:last])[::-1]\n\n\nassert sort_array([]) == []\nassert sort_array([5]) == [5]\nassert sort_array([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5]\nassert sort_array([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0]"
    },
    {
      "rank": 41,
      "score": 8.286882428888207,
      "candidate": "# Your code here\n    if not array:\n        return []\n    odd_sum, even_sum = 0, 0\n    for i in range(len(array)):\n        if array[i] % 2 == 0:\n            odd_sum += array[i]\n        else:\n            even_sum += array[i]\n    if odd_sum > even_sum:\n        return array[::-1]\n    return array\n\n\n# Tests\nassert sort_array([]) == []\nassert sort_array([5]) == [5]\nassert sort_array([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5]\nassert sort_array([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0]"
    },
    {
      "rank": 42,
      "score": 8.284823153226561,
      "candidate": "if len(array) == 0:\n        return []\n\n    if len(array) == 1:\n        return array\n\n    if array[0] < array[-1]:\n        return sort_array(array[1:]) + [array[0]]\n    else:\n        return sort_array(array[:-1]) + [array[-1]]"
    },
    {
      "rank": 43,
      "score": 8.253266684502513,
      "candidate": "n = len(array)\n    for i in range(n):\n        for j in range(i + 1, n):\n            if array[i] + array[j] % 2 == 1:\n                array[i], array[j] = array[j], array[i]\n    return array\n\n\nassert sort_array([]) == []\nassert sort_array([5]) == [5]\nassert sort_array([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5]\nassert sort_array([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0]"
    },
    {
      "rank": 44,
      "score": 8.21429096434042,
      "candidate": "if not array:\n        return []\n    n = len(array)\n    if n < 2:\n        return array\n    if n == 2:\n        if array[0] + array[1] % 2 == 1:\n            return [array[0], array[1]]\n        return [array[1], array[0]]\n    if array[0] + array[n-1] % 2 == 1:\n        return sort_array(array[1:n]) + sort_array(array[0:n-1])\n    return sort_array(array[0:n-1]) + sort_array(array[n-1:])"
    },
    {
      "rank": 45,
      "score": 8.159110486548748,
      "candidate": "if len(array) == 0:\n        return []\n\n    # check odd sum\n    odd_sum = 0\n    for i in range(len(array)):\n        if odd_sum % 2 == 0:\n            odd_sum += array[i]\n        else:\n            odd_sum -= array[i]\n\n    # check even sum\n    even_sum = 0\n    for i in range(len(array)):\n        if even_sum % 2 == 1:\n            even_sum += array[i]\n        else:\n            even_sum -= array[i]\n\n    # check if odd or even sum is odd\n    if odd_sum % 2 == 0:\n        return sort_array(array[::-1])\n    else:\n        return sort_array(array[::-1])[::-1]"
    },
    {
      "rank": 46,
      "score": 8.037734192257016,
      "candidate": "# Your code here\n    if not array:\n        return []\n    elif len(array) == 1:\n        return array\n    elif len(array) == 2:\n        return [array[0], array[1]]\n\n    if sum(array[:2]) % 2 == 0:\n        return sort_array(array[2:])\n    else:\n        return sort_array(array[:2]) + sort_array(array[2:])\n\n\nif __name__ == '__main__':\n    assert sort_array([]) == []\n    assert sort_array([5]) == [5]\n    assert sort_array([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5]\n    assert sort_array([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0]\n    assert sort_array([-5, -3, -2, -1, 0, 1, 2, 3]) == [0, 1, 2, 3, 4, 5, -5, -3]\n    assert sort_array([-1, -2, -3, -4, -5]) == [-1, -2, -3, -4, -5]"
    },
    {
      "rank": 47,
      "score": 7.992861187818979,
      "candidate": "odd = []\n    even = []\n    for i in array:\n        if i % 2 == 0:\n            odd.append(i)\n        else:\n            even.append(i)\n    return sort_array(odd) + even\n\n\ndef test_sort_array():\n    assert sort_array([]) == []\n    assert sort_array([5]) == [5]\n    assert sort_array([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5]\n    assert sort_array([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0]"
    },
    {
      "rank": 48,
      "score": 7.960030061131869,
      "candidate": "# Write your code here\n    return sorted(array, key=lambda x: x % 2)"
    },
    {
      "rank": 49,
      "score": 7.7939291612607935,
      "candidate": "if not array:\n        return []\n\n    if len(array) <= 1:\n        return array\n\n    first_value = array[0]\n    last_value = array[-1]\n    sum_odd = first_value + last_value\n    if sum_odd % 2 == 0:\n        return sort_array(array[1:-1]) + sort_array(array[:-1])\n    else:\n        return sort_array(array[1:]) + sort_array(array[:1])\n\n\nif __name__ == '__main__':\n    assert sort_array([]) == []\n    assert sort_array([5]) == [5]\n    assert sort_array([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5]\n    assert sort_array([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0]"
    },
    {
      "rank": 50,
      "score": 7.778156602325321,
      "candidate": "if len(array) <= 1:\n        return array\n    if array[0] + array[-1] % 2 == 0:\n        return sort_array(array[1:-1]) + sort_array(array[0:-1])\n    else:\n        return sort_array(array[::-1]) + sort_array(array[1:])"
    },
    {
      "rank": 51,
      "score": 7.553731109053931,
      "candidate": "# Write your code here\n    # Return the array in sorted order\n    # Sort the given array in ascending order if the sum( first index value, last index value) is odd\n    # or sort it in descending order if the sum( first index value, last index value) is even\n    return sorted(array, key=lambda x: (x % 2, x % 2))"
    },
    {
      "rank": 52,
      "score": 3.9076163104093795,
      "candidate": "if array is None:\n        return array\n    if len(array) == 1:\n        return array\n    if len(array) == 2:\n        return [array[0], array[1]]\n    if len(array) == 3:\n        return [array[0], array[1], array[2]]\n\n    odd_sum = 0\n    even_sum = 0\n    for i in range(len(array)):\n        if array[i] % 2 == 0:\n            even_sum += array[i]\n        else:\n            odd_sum += array[i]\n\n    if odd_sum % 2 == 0:\n        return sort_array(array[::-1])\n    else:\n        return sort_array(array[::-1])[::-1]\n\n\nif __name__ == '__main__':\n    assert sort_array([]) == []\n    assert sort_array([5]) == [5]\n    assert sort_array([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5]\n    assert sort_array([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0]"
    },
    {
      "rank": 53,
      "score": 3.773814279598622,
      "candidate": "odd_sum = 0\n    even_sum = 0\n    result = []\n\n    for i in range(len(array)):\n        if array[i] % 2 == 0:\n            even_sum += array[i]\n        else:\n            odd_sum += array[i]\n\n    for i in range(len(array)):\n        if even_sum % 2 == 0:\n            array[i], array[odd_sum - 1] = array[odd_sum - 1], array[i]\n        else:\n            array[i], array[even_sum - 1] = array[even_sum - 1], array[i]\n\n    return result\n\n\n# Testing\nassert sort_array([]) == []\nassert sort_array([5]) == [5]\nassert sort_array([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5]\nassert sort_array([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0]"
    },
    {
      "rank": 54,
      "score": 3.724168081923343,
      "candidate": "if not array:\n        return array\n\n    odd = 0\n    even = len(array) - 1\n\n    while odd <= even:\n        if odd + array[even] % 2 == 1:\n            array[even], array[odd] = array[odd], array[even]\n            odd += 1\n        else:\n            array[even], array[even] = array[even], array[even]\n            even -= 1\n\n    return array\n\n\ndef test_sort_array():\n    assert sort_array([]) == []\n    assert sort_array([5]) == [5]\n    assert sort_array([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5]\n    assert sort_array([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0]"
    },
    {
      "rank": 55,
      "score": 3.7181678967715612,
      "candidate": "# Your code here\n    if array is None:\n        return []\n    array = list(array)\n    array.sort()\n    result = []\n    index = 0\n    while index < len(array):\n        if array[index] % 2 == 0:\n            result.append(array[index])\n        index += 1\n    return result\n\n\ndef test_function(test_case):\n    # write your code in Python 3.6\n    result = sort_array(test_case[0])\n    if result == test_case[1]:\n        print(\"Pass\")\n    else:\n        print(\"Fail\")\n\n\ntest_case_0 = [None, []]\ntest_case_1 = [5, []]\ntest_case_2 = [2, 4, 3, 0, 1, 5]\ntest_case_3 = [2, 4, 3, 0, 1, 5, 6]\ntest_case_4 = [1]\ntest_case_5 = [0]\ntest_case_6 = [1, -1, -2, -3, -4, -5, -6, -7, -8, -9, -10, -11, -12, -13, -14, -15, -16, -17, -18, -19, -20, -21, -22, -23, -24, -25, -26, -27, -28, -29, -30, -31, -32, -33, -34, -35, -36, -37, -38, -39, -40, -41, -42, -43, -44, -45, -46, -47, -48, -49, -50, -51, -52, -53, -54, -55, -56, -57, -58, -59, -60, -61, -62, -63, -64, -65, -66, -67, -68, -69, -70, -71, -72, -73, -74, -75, -76, -77, -78, -79, -80, -81, -82, -83, -84, -85, -86, -87, -88, -89,"
    },
    {
      "rank": 56,
      "score": 3.517989890847269,
      "candidate": "if len(array) == 0:\n        return []\n\n    odd_sum = 0\n    even_sum = 0\n\n    for i in range(0, len(array)):\n        if array[i] % 2 == 1:\n            odd_sum += array[i]\n        else:\n            even_sum += array[i]\n\n    if even_sum % 2 == 0:\n        return sorted(array, reverse=True)\n    else:\n        return sorted(array, reverse=False)\n\n\ndef test_sort_array():\n    assert sort_array([]) == []\n    assert sort_array([5]) == [5]\n    assert sort_array([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5]\n    assert sort_array([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0]\n\n\nif __name__ == '__main__':\n    test_sort_array()"
    },
    {
      "rank": 57,
      "score": 3.505189766023016,
      "candidate": "# initialize the result array\n    result = []\n    # start with an empty array\n    for i in range(len(array)):\n        # check if the sum of the first index and the last index is odd\n        if array[i] % 2 == 0:\n            # add the first index value to the result\n            result.append(array[i])\n        else:\n            # add the last index value to the result\n            result.append(array[i] + 1)\n    # return the result\n    return result\n\n\ndef test_function(test_case):\n    # convert the test case to an array\n    array = test_case[0]\n    # call the function\n    result = sort_array(array)\n    # compare the results\n    if result == test_case[1]:\n        print(\"Pass\")\n    else:\n        print(\"Fail\")\n\n\ntest_case_1 = [2, 4, 3, 0, 1, 5]\ntest_case_2 = [2, 4, 3, 0, 1, 5, 6]\ntest_case_3 = [5]\ntest_case_4 = []\ntest_case_5 = [1]\ntest_case_6 = [2, 3, 4, 5]\ntest_case_7 = [0]\n\ntest_function([test_case_1, test_case_2, test_case_3, test_case_4, test_case_5, test_case_6, test_case_7])"
    },
    {
      "rank": 58,
      "score": 3.491731119967092,
      "candidate": "array.sort(key=lambda x: (x % 2 == 0, x % 2 == 1), reverse=True)\n    return array\n\n\ndef test_sort_array():\n    assert sort_array([]) == []\n    assert sort_array([5]) == [5]\n    assert sort_array([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5]\n    assert sort_array([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0]"
    },
    {
      "rank": 59,
      "score": 3.478017112289956,
      "candidate": "if len(array) < 2:\n        return array\n    else:\n        first = array[0]\n        last = array[-1]\n        if first % 2 == 0:\n            return sort_array(array[1:-1]) + sort_array(array[0:1])\n        else:\n            return sort_array(array[1:]) + sort_array(array[0:-1])\n\n\ndef test_sort_array():\n    assert sort_array([]) == []\n    assert sort_array([5]) == [5]\n    assert sort_array([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5]\n    assert sort_array([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0]\n    assert sort_array([]) == []\n    assert sort_array([1]) == [1]\n    assert sort_array([1, 2, 3]) == [1, 2, 3]\n    assert sort_array([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert sort_array([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]\n    assert sort_array([1, 2, 3, 4, 5, 6]) == [6, 5, 4, 3, 2, 1, 0]"
    },
    {
      "rank": 60,
      "score": 3.456327258366937,
      "candidate": "if len(array) <= 1:\n        return array\n\n    first_index = 0\n    last_index = len(array) - 1\n    while first_index < last_index:\n        if array[first_index] > array[last_index]:\n            array[first_index], array[last_index] = array[last_index], array[first_index]\n            first_index += 1\n        else:\n            last_index -= 1\n\n    return array\n\n\ndef test_sort_array():\n    assert sort_array([]) == []\n    assert sort_array([5]) == [5]\n    assert sort_array([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5]\n    assert sort_array([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0]\n\n\nif __name__ == '__main__':\n    test_sort_array()"
    },
    {
      "rank": 61,
      "score": 3.398137652973157,
      "candidate": "if len(array) == 0:\n        return []\n\n    if len(array) == 1:\n        return array\n\n    # find the sum of the first index value and last index value\n    sum_of_first_index_value = 0\n    sum_of_last_index_value = 0\n    for i in range(0, len(array)):\n        sum_of_first_index_value += array[i]\n        sum_of_last_index_value += array[i]\n\n    if sum_of_first_index_value % 2 == 0:\n        # ascending order\n        return sort_array(array[:-1]) + sort_array(array[-1:])\n    else:\n        # descending order\n        return sort_array(array[:-1]) + sort_array(array[1:])\n\n\ndef main():\n    assert sort_array([]) == []\n    assert sort_array([5]) == [5]\n    assert sort_array([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5]\n    assert sort_array([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0]\n    assert sort_array([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert sort_array([3, 2, 1]) == [3, 2, 1]\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 62,
      "score": 3.2997213815320254,
      "candidate": "if not array:\n        return []\n    if len(array) == 1:\n        return array\n    if len(array) == 2:\n        if array[0] + array[1] % 2 == 0:\n            return [array[0], array[1]]\n        return [array[1], array[0]]\n\n    # O(n^2) time | O(1) space\n    # O(n) space\n    first_sum, last_sum = 0, 0\n    for i in range(len(array)):\n        first_sum += array[i]\n        last_sum += array[len(array) - i - 1]\n    if first_sum % 2 == 0:\n        return sort_array(array[0:len(array) // 2]) + sort_array(array[len(array) // 2:])\n    return sort_array(array[len(array) // 2:]) + sort_array(array[:len(array) // 2])\n\n\ndef test_sort_array():\n    assert sort_array([]) == []\n    assert sort_array([5]) == [5]\n    assert sort_array([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5]\n    assert sort_array([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0]\n\n    assert sort_array([2, 4, 3, 0, 1, 5, 6]) == [0, 1, 2, 3, 4, 5, 6]\n    assert sort_array([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5]"
    },
    {
      "rank": 63,
      "score": 3.177083846699123,
      "candidate": "if len(array) == 1:\n        return array\n\n    even = [x for x in array if x % 2 == 0]\n    odd = [x for x in array if x % 2 == 1]\n    result = []\n\n    while even or odd:\n        if not even:\n            result.append(odd.pop())\n        else:\n            result.append(even.pop())\n\n    return result\n\n\ndef test_function(test_case):\n    sorted_array = sort_array(test_case)\n    if sorted_array == test_case:\n        print(\"Pass\")\n    else:\n        print(\"Fail\")\n\n\ntest_function([])\ntest_function([5])\ntest_function([2, 4, 3, 0, 1, 5])\ntest_function([2, 4, 3, 0, 1, 5, 6])"
    },
    {
      "rank": 64,
      "score": 3.1588011450034497,
      "candidate": "if not array:\n        return []\n\n    # first find first index value, if there is no first index value, then return the array\n    first_index = None\n    for i, value in enumerate(array):\n        if first_index is None:\n            first_index = i\n\n    # find last index value, if there is no last index value, then return the array\n    last_index = None\n    for i, value in enumerate(array):\n        if last_index is None:\n            last_index = i\n\n    # sort the given array in ascending order if the sum of the first index value is odd,\n    # or sort it in descending order if the sum of the first index value is even\n    if first_index and last_index and array[first_index] % 2 == 1:\n        array.sort(reverse=True)\n\n    if last_index and array[last_index] % 2 == 0:\n        array.sort(reverse=False)\n\n    return array\n\n\ndef test_sort_array():\n    assert sort_array([]) == []\n    assert sort_array([5]) == [5]\n    assert sort_array([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5]\n    assert sort_array([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0]"
    },
    {
      "rank": 65,
      "score": 3.1185615130673567,
      "candidate": "if len(array) <= 1:\n        return array\n    # Sort the array in ascending order\n    if sum(array[:-1]) % 2 == 0:\n        # Sort the array in descending order\n        array.sort(reverse=True)\n    # Sort the array in ascending order\n    else:\n        # Sort the array in descending order\n        array.sort(reverse=False)\n    return array\n\n\nassert sort_array([]) == []\nassert sort_array([5]) == [5]\nassert sort_array([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5]\nassert sort_array([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0]\n\n\n# Tests\nassert sort_array([]) == []\nassert sort_array([5]) == [5]\nassert sort_array([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5]\nassert sort_array([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0]"
    },
    {
      "rank": 66,
      "score": 3.10234316155233,
      "candidate": "if len(array) == 0:\n        return []\n\n    odd = True\n    while odd:\n        odd = False\n        for i in range(1, len(array)):\n            if array[i] > array[i - 1]:\n                array[i], array[i - 1] = array[i - 1], array[i]\n                odd = True\n                break\n\n    return array\n\n\ndef test_sort_array():\n    assert sort_array([]) == []\n    assert sort_array([5]) == [5]\n    assert sort_array([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5]\n    assert sort_array([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0]\n\n\nif __name__ == '__main__':\n    test_sort_array()"
    },
    {
      "rank": 67,
      "score": 3.0964620055758707,
      "candidate": "if not array:\n        return []\n    if len(array) == 1:\n        return array\n    if len(array) == 2:\n        if array[0] + array[1] % 2 == 0:\n            return sort_array(array[1:])\n        else:\n            return sort_array(array[:-1])\n    if len(array) == 3:\n        if array[0] + array[1] + array[2] % 2 == 0:\n            return sort_array(array[1:])\n        else:\n            return sort_array(array[:-2])\n    if len(array) == 4:\n        if array[0] + array[1] + array[2] + array[3] % 2 == 0:\n            return sort_array(array[1:])\n        else:\n            return sort_array(array[:-2])\n    if len(array) == 5:\n        if array[0] + array[1] + array[2] + array[3] + array[4] % 2 == 0:\n            return sort_array(array[1:])\n        else:\n            return sort_array(array[:-2])\n    if len(array) == 6:\n        if array[0] + array[1] + array[2] + array[3] + array[4] + array[5] % 2 == 0:\n            return sort_array(array[1:])\n        else:\n            return sort_array(array[:-2])\n    if len(array) == 7:\n        if array[0] + array[1] + array[2] + array[3] + array[4] + array[5] + array[6] % 2 == 0:\n            return sort_array(array[1:])\n        else:\n            return sort_array(array[:-2])\n    if len(array) == 8:\n        if array[0] + array[1] + array[2] + array[3] + array[4] + array[5] + array[6] + array[7] % 2 == 0:\n            return sort_array(array[1:])\n        else:\n            return sort_array(array[:"
    },
    {
      "rank": 68,
      "score": 3.0543520689578343,
      "candidate": "if len(array) == 0:\n        return []\n    if len(array) == 1:\n        return [array[0]]\n    first_index = 0\n    last_index = len(array) - 1\n    sorted_array = []\n    while first_index <= last_index:\n        if sum(array[first_index:last_index+1]) % 2 == 0:\n            sorted_array.append(array[first_index])\n            first_index += 1\n        else:\n            sorted_array.append(array[last_index])\n            last_index -= 1\n    return sorted_array\n\n\ndef sort_array_v2(array):\n    \"\"\"\n    Similar to sort_array, but with a different approach.\n    \"\"\"\n    if len(array) == 0:\n        return []\n    if len(array) == 1:\n        return [array[0]]\n    first_index = 0\n    last_index = len(array) - 1\n    sorted_array = []\n    while first_index <= last_index:\n        if sum(array[first_index:last_index+1]) % 2 == 0:\n            sorted_array.append(array[first_index])\n            first_index += 1\n        else:\n            sorted_array.append(array[last_index])\n            last_index -= 1\n    return sorted_array\n\n\ndef sort_array_v3(array):\n    \"\"\"\n    Similar to sort_array, but with a different approach.\n    \"\"\"\n    if len(array) == 0:\n        return []\n    if len(array) == 1:\n        return [array[0]]\n    first_index = 0\n    last_index = len(array) - 1\n    sorted_array = []\n    while first_index <= last_index:\n        if sum(array[first_index:last_index+1]) % 2 == 0:\n            sorted_array.append(array[first_index])\n            first_index += 1\n        else:\n            sorted_array.append(array[last_index])\n            last_index -= 1\n    return sorted_array\n\n\nif __name__ == '__main__':\n    assert sort"
    },
    {
      "rank": 69,
      "score": 3.044962780502396,
      "candidate": "if len(array) == 1:\n        return array\n    if len(array) == 2:\n        return [array[0], array[1]]\n    if len(array) == 3:\n        return [array[0], array[1], array[2]]\n    if len(array) == 4:\n        return [array[0], array[1], array[2], array[3]]\n    if len(array) == 5:\n        return [array[0], array[1], array[2], array[3], array[4]]\n\n    # O(n) time | O(1) space\n    # we can use a binary search to find the index of the first value greater than or equal to the last one\n    # the first index value is always greater than the last index value\n    # the last index value is always less than the first index value\n    # this is to avoid the first index value being sorted first\n    # and the last index value being sorted last\n    # the first index value is always less than the last index value\n    first_index_value = array[0]\n    last_index_value = array[-1]\n    first_index = 0\n    last_index = len(array) - 1\n    while first_index < last_index:\n        if first_index_value + array[first_index] > last_index_value:\n            first_index += 1\n        elif first_index_value + array[first_index] < last_index_value:\n            last_index -= 1\n        else:\n            # we have found the index of the first value greater than the last one\n            # we need to find the index of the first value less than the last one\n            # we need to find the index of the first value greater than the last one\n            # we need to find the index of the first value less than the last one\n            # we need to find the index of the first value less than the last one\n            # we need to find the index of the first value greater than the last one\n            # we need to find the index of the first value greater than the last one\n            # we need to find the index of the first value greater than the last one\n            # we need to find the index of the first value greater than the"
    },
    {
      "rank": 70,
      "score": 3.042653063436704,
      "candidate": "if len(array) == 0:\n        return []\n\n    array.sort()\n    odd = array[0] % 2 == 1\n    if odd:\n        return [array[0]] + [array[-1]]\n    else:\n        return [array[-1]] + [array[0]]\n\n\ndef test_function(test_case):\n    array = test_case[0]\n    solution = test_case[1]\n    output = sort_array(array)\n    if output == solution:\n        print(\"Pass\")\n    else:\n        print(\"Fail\")\n\n\ntest_case_1 = [2, 4, 3, 0, 1, 5]\ntest_case_2 = [2, 4, 3, 0, 1, 5, 6]\ntest_case_3 = [1, 0]\ntest_case_4 = [0, 1, 2, 3, 4, 5]\ntest_case_5 = [1, 2, 3, 4, 5, 6, 7, 8, 9]\ntest_case_6 = [1, 2, 3, 4, 5, 6]\ntest_case_7 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\ntest_case_8 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]\ntest_case_9 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]\ntest_case_10 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18]\ntest_case_11 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]\ntest_case_12 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29,"
    },
    {
      "rank": 71,
      "score": 2.9933863598784125,
      "candidate": "# implement sort_array_v1(array) and sort_array_v2(array)\n    # your code here\n\n    # return sorted(array)\n    return sorted(array, key=lambda x: (x % 2, -x))\n\n\ndef sort_array_v1(array):\n    # use the list comprehension to sort the given array\n    # return sorted(array, key=lambda x: (x % 2, -x))\n\n    # use list comprehension to sort the given array,\n    # using the following formula:\n    # sort_array = [x for x in array if x % 2 == 0]\n    # sort_array = [x for x in array if x % 2!= 0]\n    return sorted(array, key=lambda x: (x % 2, -x))\n\n\ndef sort_array_v2(array):\n    # use the list comprehension to sort the given array\n    # use the following formula:\n    # sort_array = [x for x in array if x % 2 == 0]\n    # sort_array = [x for x in array if x % 2!= 0]\n    return sorted(array, key=lambda x: (x % 2, -x))\n\n\ndef test_sort_array():\n    assert sort_array([]) == []\n    assert sort_array([5]) == [5]\n    assert sort_array([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5]\n    assert sort_array([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0]\n\n\ntest_sort_array()"
    },
    {
      "rank": 72,
      "score": 2.943332341629762,
      "candidate": "sorted_array = []\n    if len(array) > 0:\n        if len(array) % 2 == 0:\n            for i in range(len(array) // 2):\n                sorted_array.append(array[i])\n        else:\n            for i in range(len(array) // 2, len(array)):\n                sorted_array.append(array[i])\n    return sorted_array\n\n\ndef sort_array_v2(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array_v2([]) => []\n    * sort_array_v2([5]) => [5]\n    * sort_array_v2([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    * sort_array_v2([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    sorted_array = []\n    if len(array) > 0:\n        for i in range(len(array)):\n            if i % 2 == 0:\n                sorted_array.append(array[i])\n            else:\n                sorted_array.append(array[len(array) - i - 1])\n    return sorted_array\n\n\ndef sort_array_v3(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array_v3([]) => []\n    *"
    },
    {
      "rank": 73,
      "score": 2.9090271014347295,
      "candidate": "# write your code here\n    if len(array) == 0:\n        return array\n    if len(array) == 1:\n        return [array[0]]\n\n    left_sum = array[0]\n    right_sum = array[-1]\n    sorted_array = []\n    while left_sum < right_sum:\n        if left_sum % 2 == 0:\n            sorted_array.append(left_sum)\n            left_sum += 1\n        else:\n            sorted_array.append(right_sum)\n            right_sum -= 1\n    if left_sum % 2 == 0:\n        sorted_array.extend(array[1:])\n    else:\n        sorted_array.extend(array[:-1])\n    return sorted_array\n\n\n# Tests\nassert sort_array([]) == []\nassert sort_array([5]) == [5]\nassert sort_array([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5]\nassert sort_array([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0]"
    },
    {
      "rank": 74,
      "score": 2.892360774959619,
      "candidate": "# TODO: Write your code here\n    if len(array) == 0:\n        return []\n    if len(array) == 1:\n        return array\n    odd, even = 0, 0\n    for i in range(len(array)):\n        if array[i] % 2 == 0:\n            even += array[i]\n        else:\n            odd += array[i]\n    if odd > even:\n        return sort_array(array[::-1])\n    return sort_array(array)\n\n\nif __name__ == '__main__':\n    assert sort_array([]) == []\n    assert sort_array([5]) == [5]\n    assert sort_array([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5]\n    assert sort_array([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0]"
    },
    {
      "rank": 75,
      "score": 2.8893696127615973,
      "candidate": "return _sort_array_in_ascending_order(array)\n\n\ndef _sort_array_in_ascending_order(array):\n    # write your code in Python 3.6\n    return sorted(array)\n\n\ndef sort_array_in_descending_order(array):\n    # write your code in Python 3.6\n    return sorted(array, reverse=True)\n\n\ndef _sort_array_in_descending_order(array):\n    # write your code in Python 3.6\n    return sorted(array, reverse=False)\n\n\ndef test_function(test_case):\n    # write your code in Python 3.6\n    if sort_array(test_case[0]) == test_case[1]:\n        print(\"Pass\")\n    else:\n        print(\"Fail\")\n\n\ntest_case_0 = [2, 4, 3, 0, 1, 5]\ntest_case_1 = [2, 4, 3, 0, 1, 6]\ntest_case_2 = [2, 4, 3, 0, 1, 6, 5]\ntest_case_3 = [2, 4, 3, 0, 1, 5, 6]\ntest_case_4 = [2, 4, 3, 0, 1, 5, 6]\ntest_case_5 = [5]\ntest_case_6 = [2, 4, 3, 0, 1, 5, 6]\ntest_case_7 = [2, 4, 3, 0, 1, 5, 6, 5]\ntest_case_8 = [2, 4, 3, 0, 1, 5, 6, 5]\ntest_case_9 = [2, 4, 3, 0, 1, 5, 6, 5]\ntest_case_10 = [2, 4, 3, 0, 1, 5, 6, 5]\ntest_case_11 = [2, 4, 3, 0, 1, 5, 6, 5]\ntest_case_12 = [2, 4, 3, 0, 1, 5, 6, 5]\ntest_case_13 = [2, 4, 3, 0, 1, 5, 6, 5, 6]\ntest_case_14 = [2,"
    },
    {
      "rank": 76,
      "score": 2.8852728910949015,
      "candidate": "odd_sum_index = 0\n    even_sum_index = len(array) - 1\n    result = []\n    while odd_sum_index < even_sum_index:\n        if array[odd_sum_index] < array[even_sum_index]:\n            result.append(array[odd_sum_index])\n            odd_sum_index += 1\n        else:\n            result.append(array[even_sum_index])\n            even_sum_index -= 1\n    result += array[odd_sum_index:even_sum_index + 1]\n    return result\n\n\ndef test_function(test_case):\n    sort_array(test_case)\n    print(\"Test Case: \" + str(test_case))\n\n\ntest_function([])\ntest_function([5])\ntest_function([2, 4, 3, 0, 1, 5])\ntest_function([2, 4, 3, 0, 1, 5, 6])\ntest_function([])"
    },
    {
      "rank": 77,
      "score": 2.8852648463855655,
      "candidate": "if array == []:\n        return []\n    if len(array) == 1:\n        return array\n    if array[0] > array[-1]:\n        return [array[-1]] + sort_array(array[1:-1])\n    else:\n        return [array[0]] + sort_array(array[1:])\n\n\ndef test_sort_array():\n    assert sort_array([]) == []\n    assert sort_array([5]) == [5]\n    assert sort_array([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5]\n    assert sort_array([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0]\n    assert sort_array([2, 4, 3, 0, 1, 5, 6, 7, 8, 9]) == [6, 7, 8, 9, 9, 8, 5, 4, 3, 2, 1]\n    assert sort_array([2, 4, 3, 0, 1, 5, 6, 7, 8, 9, 10]) == [9, 8, 7, 6, 5, 4, 3, 2, 1, 10]\n    assert sort_array([2, 4, 3, 0, 1, 5, 6, 7, 8, 9, 10]) == [10, 8, 7, 6, 5, 4, 3, 2, 1, 9]\n    assert sort_array([2, 4, 3, 0, 1, 5, 6, 7, 8, 9]) == [9, 8, 7, 6, 5, 4, 3, 2, 1]\n    assert sort_array([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0]\n    assert sort_array([2, 4, 3, 0, 1, 5, 6, 7, 8]) == [7, 8, 6, 5, 4, 3, 2, 1]\n    assert sort_array([2, 4, 3, 0, 1, 5, 6, 7, 8, 9]) == [9, 8, 7, 6, 5, 4, 3, 2, 1]"
    },
    {
      "rank": 78,
      "score": 2.857070062601294,
      "candidate": "# Write your code here\n    if len(array) == 0:\n        return []\n    if len(array) == 1:\n        return [array[0]]\n    if len(array) == 2:\n        if array[0] + array[1] % 2 == 1:\n            return [array[0], array[1]]\n        return [array[1], array[0]]\n    if len(array) == 3:\n        if array[0] + array[1] % 2 == 1:\n            if array[0] > array[2]:\n                return [array[0], array[2], array[1]]\n            if array[0] < array[2]:\n                return [array[2], array[0], array[1]]\n            return [array[1], array[2], array[0]]\n        if array[1] + array[2] % 2 == 1:\n            if array[1] > array[2]:\n                return [array[1], array[2], array[0]]\n            if array[1] < array[2]:\n                return [array[2], array[1], array[0]]\n            return [array[0], array[1], array[2]]\n    if len(array) == 4:\n        if array[0] + array[1] + array[2] + array[3] % 2 == 1:\n            if array[0] > array[3]:\n                return [array[0], array[3], array[1], array[2]]\n            if array[0] < array[3]:\n                return [array[3], array[0], array[1], array[2]]\n            return [array[1], array[3], array[0], array[2]]\n        if array[1] + array[2] + array[3] % 2 == 1:\n            if array[1] > array[3]:\n                return [array[1], array[3], array[0], array[2]]\n            if array[1] < array[3]:\n                return [array[3], array[1], array[0], array[2]]\n            return [array[0], array[1], array[3], array[2]]\n        if array[2"
    },
    {
      "rank": 79,
      "score": 2.853486398271725,
      "candidate": "# Your code here\n    # first, find the first index value which is even\n    first_index_value = None\n    for index, value in enumerate(array):\n        if first_index_value is None:\n            first_index_value = value\n            continue\n        if value % 2 == 0:\n            # sort the array in ascending order\n            index_value = value\n            break\n    # now, find the last index value which is odd\n    last_index_value = None\n    for index, value in enumerate(array):\n        if last_index_value is None:\n            last_index_value = value\n            continue\n        if value % 2 == 1:\n            # sort the array in descending order\n            index_value = value\n            break\n    # if the first index value is even, then sort the array in ascending order\n    if first_index_value % 2 == 0:\n        array = sorted(array, key=lambda x: x % 2)\n    # if the last index value is odd, then sort the array in descending order\n    if last_index_value % 2 == 1:\n        array = sorted(array, key=lambda x: x % 2, reverse=True)\n    return array\n\n\n# TESTS\nassert sort_array([]) == []\nassert sort_array([5]) == [5]\nassert sort_array([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5]\nassert sort_array([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0]"
    },
    {
      "rank": 80,
      "score": 2.8524591891612485,
      "candidate": "array.sort(key=lambda x: x % 2, reverse=True)\n    return array\n\n\ndef sort_array2(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([]) => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    array.sort(key=lambda x: x % 2, reverse=False)\n    return array\n\n\ndef sort_array3(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([]) => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    array.sort(key=lambda x: x % 2, reverse=True)\n    return array\n\n\ndef sort_array4(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given"
    },
    {
      "rank": 81,
      "score": 2.8484859358329047,
      "candidate": "if not array:\n        return []\n\n    odd_sum, even_sum = 0, 0\n    for i in range(len(array)):\n        if array[i] % 2 == 0:\n            odd_sum += array[i]\n        else:\n            even_sum += array[i]\n\n    if odd_sum > even_sum:\n        return sort_array(array[::-1])\n    else:\n        return sort_array(array)\n\n\ndef test_sort_array():\n    assert sort_array([]) == []\n    assert sort_array([5]) == [5]\n    assert sort_array([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5]\n    assert sort_array([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0]\n\n\nif __name__ == '__main__':\n    test_sort_array()"
    },
    {
      "rank": 82,
      "score": 2.774287002229704,
      "candidate": "result = []\n    if len(array) > 0:\n        sum_odd = sum_even = 0\n        for i in range(len(array)):\n            sum_odd += array[i]\n            sum_even += array[len(array) - 1 - i]\n        if sum_odd % 2 == 0:\n            result.extend(array)\n            result.sort(reverse=True)\n        else:\n            result.extend(array)\n            result.sort(reverse=False)\n    return result\n\n\ndef test_sort_array():\n    assert sort_array([]) == []\n    assert sort_array([5]) == [5]\n    assert sort_array([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5]\n    assert sort_array([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0]"
    },
    {
      "rank": 83,
      "score": 2.771792420750574,
      "candidate": "# Write your code here\n    array.sort()\n    return array\n\n\n# Tests\nassert sort_array([]) == []\nassert sort_array([5]) == [5]\nassert sort_array([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5]\nassert sort_array([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0]"
    },
    {
      "rank": 84,
      "score": 2.765204623455808,
      "candidate": "# Your code here\n    return sorted(array, key=lambda x: x % 2, reverse=False)\n\n\n# Tests\nassert sort_array([]) == []\nassert sort_array([5]) == [5]\nassert sort_array([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5]\nassert sort_array([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0]"
    },
    {
      "rank": 85,
      "score": 2.7332524649826606,
      "candidate": "# implement sort_array_iterative and sort_array_recursive below, then\n    # change this to call your implementation to verify it passes all tests\n    return sort_array_iterative(array)\n\n\ndef sort_array_iterative(array):\n    # write your code in Python 3.6\n    if not array:\n        return []\n    if len(array) == 1:\n        return array\n    i = 0\n    j = len(array) - 1\n    while i < j:\n        if array[i] + array[j] % 2 == 1:\n            array[i], array[j] = array[j], array[i]\n            i += 1\n            j -= 1\n        else:\n            array[i], array[j] = array[j], array[i]\n            j -= 1\n    return array\n\n\ndef sort_array_recursive(array, left, right):\n    # write your code in Python 3.6\n    if not array:\n        return\n    if left < right:\n        middle = (left + right) // 2\n        sort_array_recursive(array, left, middle)\n        sort_array_recursive(array, middle + 1, right)\n        swap(array, left, middle, right)\n\n\ndef swap(array, left, middle, right):\n    # write your code in Python 3.6\n    if not array:\n        return\n    if left < middle and right < middle:\n        array[left], array[middle] = array[middle], array[left]\n        array[left], array[right] = array[right], array[left]\n\n\nif __name__ == '__main__':\n    assert sort_array([]) == []\n    assert sort_array([5]) == [5]\n    assert sort_array([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5]\n    assert sort_array([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0]\n    assert sort_array([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2"
    },
    {
      "rank": 86,
      "score": 2.7056870419397856,
      "candidate": "# Your code here\n    if len(array) == 1:\n        return array\n\n    if array[0] > array[-1]:\n        return sort_array(array[::-1])\n    else:\n        return sort_array(array)\n\n\ndef test_function(test_case):\n    sorted_array = sort_array(test_case)\n    if sorted_array == test_case:\n        print(\"Pass\")\n    else:\n        print(\"Fail\")\n\n\ntest_function([])\ntest_function([5])\ntest_function([2, 4, 3, 0, 1, 5])\ntest_function([2, 4, 3, 0, 1, 5, 6])"
    },
    {
      "rank": 87,
      "score": 2.7051637600075953,
      "candidate": "if len(array) <= 1:\n        return array\n\n    first_index = array[0]\n    last_index = array[-1]\n\n    if first_index % 2 == 0:\n        return sort_array(array[1:-1])\n    else:\n        return sort_array(array[1:])\n\n\ndef main():\n    assert sort_array([]) == []\n    assert sort_array([5]) == [5]\n    assert sort_array([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5]\n    assert sort_array([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0]\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 88,
      "score": 2.683891320243489,
      "candidate": "# write your code in Python 3.6\n    if not array:\n        return []\n\n    sum_of_first_index = sum_of_last_index = 0\n    for i in range(len(array)):\n        sum_of_first_index += array[i]\n        sum_of_last_index += array[-(i + 1)]\n\n    if sum_of_first_index % 2 == 0:\n        return sort_array(array[:-1]) + sort_array(array[1:])\n    else:\n        return sort_array(array[::-1]) + sort_array(array[:-1])\n\n\n# TESTS\nassert sort_array([]) == []\nassert sort_array([5]) == [5]\nassert sort_array([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5]\nassert sort_array([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0]"
    },
    {
      "rank": 89,
      "score": 2.6472763378865927,
      "candidate": "if len(array) == 0:\n        return array\n    if len(array) == 1:\n        return [array[0]]\n    # if the sum of the first index value is odd,\n    # then we need to sort in ascending order.\n    # if the sum of the first index value is even,\n    # then we need to sort in descending order.\n    if array[0] % 2 == 1:\n        return sort_array(array[1:]) + sort_array(array[:1])\n    else:\n        return sort_array(array[1:]) + sort_array(array[:-1])\n\n\ndef test_sort_array():\n    assert sort_array([]) == []\n    assert sort_array([5]) == [5]\n    assert sort_array([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5]\n    assert sort_array([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0]\n    assert sort_array([-1, 0, 1]) == [-1, 0, 1]\n    assert sort_array([-1, 0, 1, -1]) == [-1, 0, 1, -1]\n    assert sort_array([-1, -1, -1]) == [-1, -1, -1]"
    },
    {
      "rank": 90,
      "score": 2.555068202994607,
      "candidate": "# Your code here\n    if len(array) == 0:\n        return []\n    if len(array) == 1:\n        return [array[0]]\n\n    if array[0] == array[-1]:\n        return [array[0]]\n\n    if array[0] % 2 == 1:\n        return [array[-1]] + sort_array(array[1:])\n    else:\n        return sort_array(array[1:]) + [array[0]]\n\n\ndef test_sort_array():\n    assert sort_array([]) == []\n    assert sort_array([5]) == [5]\n    assert sort_array([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5]\n    assert sort_array([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0]"
    },
    {
      "rank": 91,
      "score": 2.503712751036132,
      "candidate": "return sorted(array, key=lambda x: (x % 2, -x % 2))\n\n\ndef test_sort_array():\n    assert sort_array([]) == []\n    assert sort_array([5]) == [5]\n    assert sort_array([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5]\n    assert sort_array([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0]\n    assert sort_array([0, 1, 2, 3, 4, 5]) == [0, 1, 2, 3, 4, 5]\n    assert sort_array([0, 1, 2, 3, 4, 5, 6]) == [6, 5, 4, 3, 2, 1, 0]\n    assert sort_array([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0]\n    assert sort_array([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0]\n    assert sort_array([0, 1, 2, 3, 4, 5]) == [0, 1, 2, 3, 4, 5]\n    assert sort_array([2, 4, 3, 0, 1, 5, 6]) == [0, 1, 2, 3, 4, 5]\n    assert sort_array([2, 4, 3, 0, 1, 5, 6]) == [0, 1, 2, 3, 4, 5]\n    assert sort_array([2, 4, 3, 0, 1, 5, 6]) == [0, 1, 2, 3, 4, 5]\n    assert sort_array([2, 4, 3, 0, 1, 5, 6]) == [0, 1, 2, 3, 4, 5]\n    assert sort_array([2, 4, 3, 0, 1, 5, 6]) == [0, 1, 2, 3, 4, 5]\n    assert sort_array([2, 4, 3, 0, 1, 5, 6]) == [0, 1, 2, 3, 4, 5"
    },
    {
      "rank": 92,
      "score": 2.481721644811609,
      "candidate": "# write your code here\n    return sorted(array, key=lambda x: (x % 2, x // 2))\n\n\n# tests\nassert sort_array([]) == []\nassert sort_array([5]) == [5]\nassert sort_array([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5]\nassert sort_array([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0]"
    },
    {
      "rank": 93,
      "score": 2.457895862737046,
      "candidate": "return sorted(array, key=lambda x: (x % 2, -x % 2))\n\n\ndef test_sort_array():\n    assert sort_array([]) == []\n    assert sort_array([5]) == [5]\n    assert sort_array([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5]\n    assert sort_array([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0]"
    },
    {
      "rank": 94,
      "score": 2.4360131470630715,
      "candidate": "first_index = 0\n    last_index = len(array) - 1\n    while first_index < last_index:\n        if array[first_index] + array[last_index] % 2 == 1:\n            array[first_index], array[last_index] = array[last_index], array[first_index]\n            first_index += 1\n            last_index -= 1\n        else:\n            array[first_index], array[last_index] = array[last_index], array[first_index]\n            last_index -= 1\n    return array\n\n\ndef test_sort_array():\n    assert sort_array([]) == []\n    assert sort_array([5]) == [5]\n    assert sort_array([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5]\n    assert sort_array([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0]"
    },
    {
      "rank": 95,
      "score": 2.4017866115141993,
      "candidate": "if len(array) <= 1:\n        return array\n    if sum(array[0:len(array)//2]) % 2 == 1:\n        return sort_array(array[len(array)//2:])\n    else:\n        return sort_array(array[:len(array)//2])\n\n\ndef test_sort_array():\n    assert sort_array([]) == []\n    assert sort_array([5]) == [5]\n    assert sort_array([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5]\n    assert sort_array([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0]"
    },
    {
      "rank": 96,
      "score": 2.307971186345707,
      "candidate": "if len(array) <= 1:\n        return array\n    if sum(array[:-1]) % 2 == 0:\n        return sort_array(array[1:]) + [array[0]]\n    else:\n        return sort_array(array[:-1]) + [array[-1]]\n\n\ndef test_sort_array():\n    assert sort_array([]) == []\n    assert sort_array([5]) == [5]\n    assert sort_array([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5]\n    assert sort_array([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0]"
    },
    {
      "rank": 97,
      "score": 2.2755242247199607,
      "candidate": "if not array:\n        return []\n\n    if len(array) == 1:\n        return array\n\n    first_index = 0\n    last_index = len(array) - 1\n\n    while first_index < last_index:\n        if array[first_index] + array[last_index] % 2 == 1:\n            array[first_index], array[last_index] = array[last_index], array[first_index]\n            first_index += 1\n            last_index -= 1\n        else:\n            array[last_index], array[first_index] = array[first_index], array[last_index]\n            last_index -= 1\n\n    return array\n\n\ndef test_sort_array():\n    assert sort_array([]) == []\n    assert sort_array([5]) == [5]\n    assert sort_array([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5]\n    assert sort_array([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0]\n\n\nif __name__ == '__main__':\n    test_sort_array()"
    },
    {
      "rank": 98,
      "score": 2.154790262068614,
      "candidate": "# Your code here\n\n    # [0, 1, 2, 3, 4, 5]\n    # [0, 1, 2, 3, 4, 5]\n    # [0, 1, 2, 3, 4, 5]\n    # [0, 1, 2, 3, 4, 5]\n    # [0, 1, 2, 3, 4, 5]\n    # [0, 1, 2, 3, 4, 5]\n    # [0, 1, 2, 3, 4, 5]\n    # [0, 1, 2, 3, 4, 5]\n    # [0, 1, 2, 3, 4, 5]\n    # [0, 1, 2, 3, 4, 5]\n    # [0, 1, 2, 3, 4, 5]\n    # [0, 1, 2, 3, 4, 5]\n    # [0, 1, 2, 3, 4, 5]\n    # [0, 1, 2, 3, 4, 5]\n    # [0, 1, 2, 3, 4, 5]\n    # [0, 1, 2, 3, 4, 5]\n    # [0, 1, 2, 3, 4, 5]\n\n    if len(array) <= 1:\n        return array\n    first_index = 0\n    last_index = len(array) - 1\n    while first_index <= last_index:\n        if (first_index + array[first_index]) % 2 == 1:\n            array[first_index], array[last_index] = array[last_index], array[first_index]\n            first_index += 1\n        elif (first_index + array[first_index]) % 2 == 0:\n            array[first_index], array[last_index] = array[last_index], array[first_index]\n            last_index -= 1\n    return array\n\n\ndef test_function(test_case):\n    sorted_array = sort_array(test_case)\n    if sorted_array == sorted(test_case):\n        print(\"Pass\")\n    else:\n        print(\"Fail\")\n\n\ntest_function([])\ntest_function([5])\ntest_function([2"
    },
    {
      "rank": 99,
      "score": 2.1361103238722605,
      "candidate": "# Your code here\n    n = len(array)\n    if n == 0:\n        return array\n    if n == 1:\n        return [array[0]]\n\n    # the array is sorted in ascending or descending order\n    # if the sum of first index value is odd,\n    # return the array in ascending order\n    if array[0] % 2 == 0:\n        return sort_array(array[1:])\n\n    # if the sum of first index value is even,\n    # return the array in descending order\n    return sort_array(array[:-1]) + [array[-1]]\n\n\n# Test cases\nassert sort_array([]) == []\nassert sort_array([5]) == [5]\nassert sort_array([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5]\nassert sort_array([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0]"
    },
    {
      "rank": 100,
      "score": 2.0260912318455624,
      "candidate": "if not array:\n        return []\n    if len(array) == 1:\n        return array\n    if len(array) == 2:\n        if array[0] == array[1]:\n            return array\n        else:\n            return [array[1], array[0]]\n    left_sum = array[0]\n    right_sum = array[-1]\n    if left_sum % 2 == 0:\n        right_sum += 1\n    if right_sum % 2 == 0:\n        left_sum += 1\n    sorted_array = []\n    for i in range(len(array)):\n        if left_sum <= right_sum:\n            sorted_array.append(array[i])\n            left_sum += array[i]\n        else:\n            sorted_array.append(array[i])\n            right_sum -= array[i]\n    return sorted_array\n\n\ndef test_function(test_case):\n    sorted_array = sort_array(test_case)\n    print(sorted_array)\n    if sorted_array == test_case:\n        print(\"Pass\")\n    else:\n        print(\"Fail\")\n\n\ntest_function([2, 4, 3, 0, 1, 5])\ntest_function([2, 4, 3, 0, 1, 5, 6])\ntest_function([])\ntest_function([5])\ntest_function([2, 4, 3, 0, 1, 5])\ntest_function([2, 4, 3, 0, 1, 5, 6])\ntest_function([2, 4, 3, 0, 1, 5, 6, 7])"
    }
  ]
}