{
  "timestamp": "2025-09-14T11:59:31.715740",
  "method": "improved_llm_judge",
  "judge_model": "codellama/CodeLlama-7b-Python-hf",
  "target_model": "codet5-770m",
  "dataset": "humaneval",
  "problem_number": 99,
  "total_candidates": 100,
  "results": [
    {
      "rank": 1,
      "score": 10.0,
      "candidate": "number = float(value)\n    return int(number) if abs(number) < abs(int(number)) else int(number)\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 2,
      "score": 10.0,
      "candidate": "# Your code here\n    pass"
    },
    {
      "rank": 3,
      "score": 10.0,
      "candidate": "return int(value)\n\n\ndef closest_float(value):\n    '''\n    Create a function that takes a value (string) representing a number\n    and returns the closest float to it. If the number is equidistant\n    from two floats, round it away from zero.\n\n    Examples\n    >>> closest_float(\"10\")\n    10.0\n    >>> closest_float(\"15.3\")\n    15.0\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two floats, the one you should return is the one that is the\n    farthest from zero. For example closest_float(\"14.5\") should\n    return 15 and closest_float(\"-14.5\") should return -15.\n    '''\n    return float(value)\n\n\ndef closest_string(value):\n    '''\n    Create a function that takes a value (string) representing a number\n    and returns the closest string to it. If the number is equidistant\n    from two strings, round it away from zero.\n\n    Examples\n    >>> closest_string(\"10\")\n    \"10\"\n    >>> closest_string(\"15.3\")\n    \"15\"\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two strings, the one you should return is the one that is the\n    farthest from zero. For example closest_string(\"14.5\") should\n    return 15 and closest_string(\"-14.5\") should return -15.\n    '''\n    return str(value)"
    },
    {
      "rank": 4,
      "score": 10.0,
      "candidate": "value = value.replace(\".\", \"\")\n    value = int(value)\n    if value == 0:\n        return 0\n    if value == value-1:\n        return value\n    if value == value+1:\n        return value\n    if value == value-1:\n        return int(value)\n    return int(value) + int(value) - int(value) // 2\n\n\ndef closest_integer_2(value):\n    '''\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer_2(\"10\")\n    10\n    >>> closest_integer_2(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer_2(\"14.5\") should\n    return 15 and closest_integer_2(\"-14.5\") should return -15.\n    '''\n    value = value.replace(\".\", \"\")\n    value = int(value)\n    if value == 0:\n        return 0\n    if value == value-1:\n        return value\n    if value == value+1:\n        return value\n    if value == value-1:\n        return int(value)\n    return int(value) + int(value) - int(value) // 2\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 5,
      "score": 10.0,
      "candidate": "num_list = value.split(\".\")\n    return int(num_list[0]) + (int(num_list[1]) - int(num_list[0])) * int(num_list[2]) / 10\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 6,
      "score": 10.0,
      "candidate": "value = int(value)\n    value_floor = int(value)\n    value_ceil = int(value)\n    if value_ceil > value_floor:\n        return value_ceil\n    else:\n        return value_floor\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 7,
      "score": 10.0,
      "candidate": "return int(value)\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 8,
      "score": 10.0,
      "candidate": "return int(round(float(value)))\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 9,
      "score": 10.0,
      "candidate": "if value.isdigit():\n        return int(value)\n    else:\n        return int(round(float(value)))\n\n\ndef closest_float(value):\n    '''\n    Create a function that takes a value (string) representing a number\n    and returns the closest float to it. If the number is equidistant\n    from two floats, round it away from zero.\n\n    Examples\n    >>> closest_float(\"10\")\n    10.0\n    >>> closest_float(\"15.3\")\n    15.0\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two floats, the one you should return is the one that is the\n    farthest from zero. For example closest_float(\"14.5\") should\n    return 15 and closest_float(\"-14.5\") should return -15.\n    '''\n    if value.isdigit():\n        return float(value)\n    else:\n        return float(round(float(value), 0))"
    },
    {
      "rank": 10,
      "score": 10.0,
      "candidate": "value = float(value)\n    return int(round(value))\n\n\ndef closest_float(value):\n    '''\n    Create a function that takes a value (string) representing a number\n    and returns the closest float to it. If the number is equidistant\n    from two floats, round it away from zero.\n\n    Examples\n    >>> closest_float(\"10.3\")\n    10.3\n    >>> closest_float(\"15.3\")\n    15.3\n\n    Note\n    Rounding away from zero means that if the given number is equidistant\n    from two floats, the one you should return is the one that is the\n    farthest from zero. For example closest_float(\"14.5\") should\n    return 15 and closest_float(\"-14.5\") should return -15.\n    '''\n    value = float(value)\n    return round(value)\n\n\ndef closest_str(value):\n    '''\n    Create a function that takes a value (string) representing a number\n    and returns the closest string to it. If the number is equidistant\n    from two strings, round it away from zero.\n\n    Examples\n    >>> closest_str(\"10\")\n    '10'\n    >>> closest_str(\"15.3\")\n    '15'\n\n    Note\n    Rounding away from zero means that if the given number is equidistant\n    from two strings, the one you should return is the one that is the\n    farthest from zero. For example closest_str(\"14.5\") should\n    return 15 and closest_str(\"-14.5\") should return -15.\n    '''\n    value = str(value)\n    return value[0]\n\n\ndef closest_bool(value):\n    '''\n    Create a function that takes a value (string) representing a number\n    and returns the closest bool to it. If the number is equidistant\n    from two booleans, round it away from zero.\n\n    Examples\n    >>> closest_bool(\"true\")\n    True\n    >>> closest_bool(\"false\")\n    False\n\n    Note\n    Rounding away from zero means that if the given number is equidistant\n    from two booleans, the one you should return is the one that is the"
    },
    {
      "rank": 11,
      "score": 10.0,
      "candidate": "try:\n        return int(value)\n    except ValueError:\n        return int(value)\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 12,
      "score": 10.0,
      "candidate": "try:\n        value = int(value)\n        return value\n    except ValueError:\n        return None\n\n\ndef closest_float(value):\n    '''\n    Create a function that takes a value (string) representing a number\n    and returns the closest float to it. If the number is equidistant\n    from two floats, round it away from zero.\n\n    Examples\n    >>> closest_float(\"10\")\n    10.0\n    >>> closest_float(\"15.3\")\n    15.0\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two floats, the one you should return is the one that is the\n    farthest from zero. For example closest_float(\"14.5\") should\n    return 15 and closest_float(\"-14.5\") should return -15.\n    '''\n    try:\n        value = float(value)\n        return value\n    except ValueError:\n        return None\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 13,
      "score": 10.0,
      "candidate": "if value.isdigit():\n        return int(value)\n    else:\n        value = value.replace(\".\", \"\")\n        try:\n            return int(value)\n        except ValueError:\n            return None\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 14,
      "score": 10.0,
      "candidate": "return int(round(float(value)))\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 15,
      "score": 10.0,
      "candidate": "value = value.replace(\".\", \"\")\n    value = float(value)\n    if value % 1 == 0:\n        return int(value)\n    else:\n        return round(value, -1)\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 16,
      "score": 10.0,
      "candidate": "return int(round(float(value)))\n\n\ndef closest_float(value):\n    '''\n    Create a function that takes a value (string) representing a number\n    and returns the closest float to it. If the number is equidistant\n    from two floats, round it away from zero.\n\n    Examples\n    >>> closest_float(\"10\")\n    10.0\n    >>> closest_float(\"15.3\")\n    15.0\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two floats, the one you should return is the one that is the\n    farthest from zero. For example closest_float(\"14.5\") should\n    return 15 and closest_float(\"-14.5\") should return -15.\n    '''\n    return float(round(float(value)))\n\n\ndef closest_int_float(value):\n    '''\n    Create a function that takes a value (string) representing a number\n    and returns the closest int to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_int_float(\"10\")\n    10\n    >>> closest_int_float(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two floats, the one you should return is the one that is the\n    farthest from zero. For example closest_int_float(\"14.5\") should\n    return 15 and closest_int_float(\"-14.5\") should return -15.\n    '''\n    return int(round(float(value)))\n\n\ndef closest_str(value):\n    '''\n    Create a function that takes a value (string) representing a number\n    and returns the closest string to it. If the number is equidistant\n    from two strings, round it away from zero.\n\n    Examples\n    >>> closest_str(\"10\")\n    '10'\n    >>> closest_str(\"15.3\")\n    '15'\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two strings, the one you should return is the one that is the"
    },
    {
      "rank": 17,
      "score": 10.0,
      "candidate": "try:\n        value = int(value)\n    except:\n        value = float(value)\n    if value == 0:\n        return 0\n    if value == 1:\n        return 1\n    if value == -1:\n        return -1\n    if value == -2:\n        return -2\n    if value == -3:\n        return -3\n    if value == -4:\n        return -4\n    if value == -5:\n        return -5\n    if value == -6:\n        return -6\n    if value == -7:\n        return -7\n    if value == -8:\n        return -8\n    if value == -9:\n        return -9\n    if value == -10:\n        return -10\n    if value == -11:\n        return -11\n    if value == -12:\n        return -12\n    if value == -13:\n        return -13\n    if value == -14:\n        return -14\n    if value == -15:\n        return -15\n    if value == -16:\n        return -16\n    if value == -17:\n        return -17\n    if value == -18:\n        return -18\n    if value == -19:\n        return -19\n    if value == -20:\n        return -20\n    if value == -21:\n        return -21\n    if value == -22:\n        return -22\n    if value == -23:\n        return -23\n    if value == -24:\n        return -24\n    if value == -25:\n        return -25\n    if value == -26:\n        return -26\n    if value == -27:\n        return -27\n    if value == -28:\n        return -28\n    if value == -29:\n        return -29\n    if value == -30:\n        return -30\n    if value == -31:\n        return -31\n    if value == -32:\n        return -32\n    if value == -33:\n        return -33\n    if value == -34:\n        return -34\n    if value == -35:\n        return -35\n    if value == -36:"
    },
    {
      "rank": 18,
      "score": 10.0,
      "candidate": "return int(round(float(value), 0))"
    },
    {
      "rank": 19,
      "score": 9.986027844747118,
      "candidate": "if value[0] == '-':\n        return int(value) - 1\n    elif value[0] == '.':\n        return int(value)\n    else:\n        return int(value)\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 20,
      "score": 9.954897169868586,
      "candidate": "value = float(value)\n    if value < 0:\n        value = -value\n    return round(value)\n\n\ndef closest_float(value):\n    '''\n    Create a function that takes a value (string) representing a number\n    and returns the closest float to it. If the number is equidistant\n    from two floats, round it away from zero.\n\n    Examples\n    >>> closest_float(\"10\")\n    10\n    >>> closest_float(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two floats, the one you should return is the one that is the\n    farthest from zero. For example closest_float(\"14.5\") should\n    return 15 and closest_float(\"-14.5\") should return -15.\n    '''\n\n    value = float(value)\n    if value < 0:\n        value = -value\n    return round(value)\n\n\ndef closest_string(value):\n    '''\n    Create a function that takes a value (string) representing a number\n    and returns the closest string to it. If the number is equidistant\n    from two strings, round it away from zero.\n\n    Examples\n    >>> closest_string(\"10\")\n    10\n    >>> closest_string(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two strings, the one you should return is the one that is the\n    farthest from zero. For example closest_string(\"14.5\") should\n    return 15 and closest_string(\"-14.5\") should return -15.\n    '''\n\n    value = value.lower()\n    if value == 'zero':\n        return 'zero'\n    return value.split()[-1]\n\n\ndef closest_tuple(value):\n    '''\n    Create a function that takes a value (string) representing a number\n    and returns the closest tuple to it. If the number is equidistant\n    from two tuples, round it away from zero.\n\n    Examples\n    >>> closest_tuple(\"10\")\n    (10,)\n    >>> closest_tuple(\"15.3\")"
    },
    {
      "rank": 21,
      "score": 9.946076922543238,
      "candidate": "return int(round(float(value)))"
    },
    {
      "rank": 22,
      "score": 9.90868658678982,
      "candidate": "value = value.replace(\".\", \"\")\n    value = float(value)\n\n    if value == 0:\n        return 0\n    elif value == 1:\n        return 1\n    elif value == -1:\n        return -1\n    else:\n        return int(round(value))\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 23,
      "score": 9.886239437580622,
      "candidate": "return int(value)\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 24,
      "score": 9.883387133318312,
      "candidate": "value = float(value)\n    if value == 0:\n        return 0\n    elif value == 1:\n        return 1\n    else:\n        return round(value)"
    },
    {
      "rank": 25,
      "score": 9.849817910637636,
      "candidate": "return int(float(value))\n\n\ndef main():\n    import doctest\n    doctest.testmod()\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 26,
      "score": 9.820350879325684,
      "candidate": "value = float(value)\n    return round(value)\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 27,
      "score": 9.81926709980314,
      "candidate": "value = int(value)\n    if value < 0:\n        return abs(value)\n    return value\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 28,
      "score": 9.80431475300203,
      "candidate": "value = value.strip()\n    try:\n        return int(value)\n    except ValueError:\n        return float(value)\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 29,
      "score": 9.78769073743518,
      "candidate": "if not isinstance(value, str):\n        raise TypeError(\"Value must be a string\")\n    value = value.strip()\n    if not value:\n        raise ValueError(\"Value cannot be empty\")\n\n    try:\n        value = float(value)\n    except ValueError:\n        raise ValueError(\"Value must be a number\")\n\n    if not 0 <= value <= 100:\n        raise ValueError(\"Value must be between 0 and 100\")\n\n    # We need to round away from zero, because we are dealing with a floating point\n    # value.\n    return round(value, -1)"
    },
    {
      "rank": 30,
      "score": 9.780707863596021,
      "candidate": "a = float(value)\n    b = float(value)\n    if a == b:\n        return a\n    else:\n        return round((a + b) / 2)"
    },
    {
      "rank": 31,
      "score": 9.765334421230536,
      "candidate": "value = float(value)\n    return round(value, -int(abs(value)))\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 32,
      "score": 9.719260758726064,
      "candidate": "return int(round(float(value)))\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 33,
      "score": 9.684687494871657,
      "candidate": "value_float = float(value)\n    value_int = int(value_float)\n    if abs(value_int - value_float) > abs(value_int + value_float):\n        return value_int\n    else:\n        return value_float\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 34,
      "score": 9.56852936013765,
      "candidate": "return round(float(value))\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 35,
      "score": 9.482007440929612,
      "candidate": "return round(int(value), 0)\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 36,
      "score": 9.449201556479236,
      "candidate": "return int(value) if value.isdigit() else value\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 37,
      "score": 9.444348207376752,
      "candidate": "return int(value) if float(value) % 1 == 0 else int(value) + 1"
    },
    {
      "rank": 38,
      "score": 9.25382070458346,
      "candidate": "# Your code here\n    if value == \"10\":\n        return 10\n    elif value == \"15.3\":\n        return 15\n    else:\n        return round(float(value), -1)\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 39,
      "score": 8.978299409405,
      "candidate": "value = float(value)\n    if value < 0:\n        return -value\n    elif value == 0:\n        return 0\n    else:\n        return round(value)\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 40,
      "score": 6.5,
      "candidate": "return int(value.replace(\".\", \"\"))"
    },
    {
      "rank": 41,
      "score": 6.5,
      "candidate": "return int(value)\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 42,
      "score": 6.5,
      "candidate": "value = float(value)\n    return int(round(value))"
    },
    {
      "rank": 43,
      "score": 6.5,
      "candidate": "if value.isnumeric():\n        return int(value)\n    else:\n        return None\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 44,
      "score": 6.5,
      "candidate": "return int(round(float(value)))\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 45,
      "score": 6.5,
      "candidate": "value = float(value)\n    if value < 0:\n        value = -value\n    return round(value)\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 46,
      "score": 6.5,
      "candidate": "value = int(value)\n    if value < 0:\n        value = abs(value)\n    return value\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 47,
      "score": 6.5,
      "candidate": "value = float(value)\n    if value == 0:\n        return 0\n    if value > 0:\n        return value\n    else:\n        return -value\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 48,
      "score": 6.5,
      "candidate": "if isinstance(value, str):\n        value = float(value)\n    return int(round(value))\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 49,
      "score": 3.926139092254469,
      "candidate": "value = float(value)\n    return int(value)\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 50,
      "score": 3.7896064077536957,
      "candidate": "value = float(value)\n    if value == 0:\n        return 0\n    if value < 0:\n        return -closest_integer(value)\n    return int(round(value))\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 51,
      "score": 3.738947022370758,
      "candidate": "try:\n        return int(value)\n    except ValueError:\n        return float(value)"
    },
    {
      "rank": 52,
      "score": 3.732824384460777,
      "candidate": "value = int(value)\n    return round(value, 0)\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 53,
      "score": 3.5285611131094576,
      "candidate": "value = float(value)\n\n    if value < 0:\n        return -value\n    elif value > 0:\n        return value\n    else:\n        return 0"
    },
    {
      "rank": 54,
      "score": 3.5154997612479755,
      "candidate": "number = float(value)\n    if number == 0:\n        return 0\n    elif number == 1:\n        return 1\n    elif number > 1:\n        return round(number - 1, 0)\n    else:\n        return round(number + 1, 0)\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 55,
      "score": 3.4877725635611796,
      "candidate": "if value == \"10\":\n        return 10\n    elif value == \"15.3\":\n        return 15\n    else:\n        return int(round(float(value)))\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 56,
      "score": 3.4656400595580994,
      "candidate": "num1, num2 = value.split(\".\")\n    num1, num2 = int(num1), int(num2)\n\n    if num1 == num2:\n        return num1\n\n    if num1 < num2:\n        return num1 + abs(num2 - num1)\n\n    return num2 - abs(num1 - num2)\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 57,
      "score": 3.457701058851037,
      "candidate": "return int(value)\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 58,
      "score": 3.4112724560515946,
      "candidate": "try:\n        return int(value)\n    except ValueError:\n        return float(value)\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 59,
      "score": 3.3837173645764542,
      "candidate": "return int(value)\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 60,
      "score": 3.3692332899977053,
      "candidate": "value = float(value)\n    return round(value, -1)\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 61,
      "score": 3.3238442690503462,
      "candidate": "value = float(value)\n    min_value = float('inf')\n    min_index = None\n\n    for index, value in enumerate(sorted(list(range(1, 101)))):\n        if abs(value - value) < min_value:\n            min_value = abs(value - value)\n            min_index = index\n\n    return min_index\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 62,
      "score": 3.305838144420434,
      "candidate": "return int(value.replace(\".\", \"\").replace(\",\", \".\"))\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 63,
      "score": 3.256633716556678,
      "candidate": "a = [int(n) for n in value.split('.')]\n    if len(a) == 2:\n        return round(a[0]+a[1])\n    else:\n        return round(a[0]-a[1])"
    },
    {
      "rank": 64,
      "score": 3.180818012523817,
      "candidate": "value = float(value)\n    if abs(value) == 0:\n        return 0\n    if value < 0:\n        value = -value\n    if value == 0:\n        return 0\n    return int(value)\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 65,
      "score": 3.180697802754207,
      "candidate": "if value.isdigit():\n        return int(value)\n    else:\n        return round(float(value))"
    },
    {
      "rank": 66,
      "score": 3.1718091447842305,
      "candidate": "num_list = value.split('.')\n    num_list = [int(i) for i in num_list]\n    num_list.sort()\n    return num_list[0] if num_list else 0"
    },
    {
      "rank": 67,
      "score": 3.165631715701782,
      "candidate": "# Create a list of integers\n    numbers = [int(i) for i in value.split(\".\")]\n\n    # Find the closest integer from the numbers\n    closest_number = max(numbers)\n    closest_index = numbers.index(closest_number)\n\n    # Round the closest number\n    rounded_closest_number = round(closest_number)\n\n    # Return the closest integer\n    return rounded_closest_number\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 68,
      "score": 3.157123666297637,
      "candidate": "return round(int(value), 0)\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 69,
      "score": 3.085684140594985,
      "candidate": "number = float(value)\n    if number >= 0:\n        return number\n    elif number < 0:\n        return -number\n    else:\n        return number"
    },
    {
      "rank": 70,
      "score": 3.055461294854933,
      "candidate": "value = float(value)\n    if value == 0:\n        return 0\n    if value == 1:\n        return 1\n    if value == -1:\n        return -1\n\n    if abs(value) == abs(value - 1):\n        return value\n    if abs(value) > abs(value - 1):\n        return value\n\n    return -value"
    },
    {
      "rank": 71,
      "score": 3.0485387746740202,
      "candidate": "try:\n        value = float(value)\n        return round(value, 0)\n    except:\n        return value\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 72,
      "score": 3.033764102343962,
      "candidate": "value = float(value)\n    return int(value) if value % 1 == 0 else int(value - 1)\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 73,
      "score": 2.993251387631033,
      "candidate": "try:\n        return int(value)\n    except ValueError:\n        return int(round(float(value), 0))"
    },
    {
      "rank": 74,
      "score": 2.963994939209833,
      "candidate": "if value == '10':\n        return 10\n    elif value == '15.3':\n        return 15\n    elif value == '14.5':\n        return 14.5\n    elif value == '-14.5':\n        return -14.5\n    else:\n        return int(value)\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 75,
      "score": 2.9071705116680913,
      "candidate": "value = int(value)\n    return value\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 76,
      "score": 2.890164056081244,
      "candidate": "value = float(value)\n    return round(value)"
    },
    {
      "rank": 77,
      "score": 2.887111849756732,
      "candidate": "try:\n        value = int(value)\n    except ValueError:\n        raise ValueError(\"Value must be an integer.\")\n\n    if value == 0:\n        return 0\n    elif value < 0:\n        return -value\n    else:\n        return value\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 78,
      "score": 2.882923312638332,
      "candidate": "value = int(value)\n    if value == 0:\n        return 0\n    if value % 2 == 0:\n        return round(value/2)\n    return round(value/2 - 1)\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 79,
      "score": 2.8494481522053556,
      "candidate": "value = float(value)\n    if value < 0:\n        return -value\n    elif value > 0:\n        return value\n    else:\n        return 0\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 80,
      "score": 2.8453938120743927,
      "candidate": "num1, num2 = value.split('.')\n    num1 = int(num1)\n    num2 = int(num2)\n    return round((num1 + num2) / 2)"
    },
    {
      "rank": 81,
      "score": 2.7671351232148718,
      "candidate": "if value.isdigit():\n        return int(value)\n    else:\n        return int(value[:-1]) + int(value[-1])"
    },
    {
      "rank": 82,
      "score": 2.765262807032524,
      "candidate": "value = value.strip()\n    return int(value) if value.isdigit() else float(value)\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 83,
      "score": 2.760412881077355,
      "candidate": "value = float(value)\n    return int(round(value))"
    },
    {
      "rank": 84,
      "score": 2.7408648908631763,
      "candidate": "if value.isdigit():\n        return int(value)\n    else:\n        return int(round(float(value)))\n\n\nprint(closest_integer(\"10\"))\nprint(closest_integer(\"15.3\"))\nprint(closest_integer(\"14.5\"))\nprint(closest_integer(\"-14.5\"))"
    },
    {
      "rank": 85,
      "score": 2.735119898116481,
      "candidate": "return int(float(value))\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 86,
      "score": 2.6996806550405976,
      "candidate": "value_int = int(value)\n    return value_int if value_int > 0 else value_int + 1\n\n\nprint(closest_integer(\"10\"))\nprint(closest_integer(\"15.3\"))\nprint(closest_integer(\"14.5\"))\nprint(closest_integer(\"-14.5\"))\nprint(closest_integer(\"14.5\"))"
    },
    {
      "rank": 87,
      "score": 2.677440122697438,
      "candidate": "return int(value)\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 88,
      "score": 2.6615389998470205,
      "candidate": "if value.isdigit():\n        return int(value)\n    elif value.startswith(\"-\"):\n        return -int(value)\n    else:\n        return int(value)"
    },
    {
      "rank": 89,
      "score": 2.580391238388681,
      "candidate": "return int(round(float(value), 0))\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 90,
      "score": 2.5459879622393946,
      "candidate": "value = float(value)\n    closest = value\n    for i in range(1, int(value)):\n        if abs(value - i) < abs(value - closest):\n            closest = i\n    return closest\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 91,
      "score": 2.493584439832788,
      "candidate": "return int(value)\n\n\ndef closest_float(value):\n    '''\n    Create a function that takes a value (string) representing a number\n    and returns the closest float to it. If the number is equidistant\n    from two floats, round it away from zero.\n\n    Examples\n    >>> closest_float(\"10.5\")\n    10\n    >>> closest_float(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two floats, the one you should return is the one that is the\n    farthest from zero. For example closest_float(\"14.5\") should\n    return 15 and closest_float(\"-14.5\") should return -15.\n    '''\n    return float(value)\n\n\ndef closest_string(value):\n    '''\n    Create a function that takes a value (string) representing a number\n    and returns the closest string to it. If the number is equidistant\n    from two strings, round it away from zero.\n\n    Examples\n    >>> closest_string(\"10\")\n    '10'\n    >>> closest_string(\"15.3\")\n    '15'\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two strings, the one you should return is the one that is the\n    farthest from zero. For example closest_string(\"14.5\") should\n    return 15 and closest_string(\"-14.5\") should return -15.\n    '''\n    return str(value)\n\n\ndef closest_bool(value):\n    '''\n    Create a function that takes a value (string) representing a number\n    and returns the closest boolean to it. If the number is equidistant\n    from two booleans, round it away from zero.\n\n    Examples\n    >>> closest_bool(\"10\")\n    True\n    >>> closest_bool(\"15.3\")\n    False\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two booleans, the one you should return is the one that is the\n    farthest from zero. For example closest_bool(\"14.5\") should\n    return True and closest_bool"
    },
    {
      "rank": 92,
      "score": 2.4711445355220496,
      "candidate": "number = float(value)\n    return round(number)\n\n\ndef main():\n    print(closest_integer(\"10\"))\n    print(closest_integer(\"15.3\"))\n    print(closest_integer(\"14.5\"))\n    print(closest_integer(\"-14.5\"))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 93,
      "score": 2.4245032112888487,
      "candidate": "value = float(value)\n    return round(value)\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 94,
      "score": 2.4018966879596646,
      "candidate": "return int(value) if value.isdigit() else float(value)\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 95,
      "score": 2.389578175014489,
      "candidate": "# your code here\n    if value.isdigit():\n        return int(value)\n    if value.islower():\n        return int(value)\n    if value.isupper():\n        return int(value)\n\n    return int(value.replace('.', ''))"
    },
    {
      "rank": 96,
      "score": 2.260739004816286,
      "candidate": "value = int(value)\n    if value < 0:\n        return -value\n    elif value == 0:\n        return 0\n    elif value % 2 == 0:\n        return value // 2\n    else:\n        return value * 2 + 1"
    },
    {
      "rank": 97,
      "score": 2.137541083743484,
      "candidate": "# Your code here\n    value = int(value)\n    return round(value, 0)\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 98,
      "score": 2.118479922318633,
      "candidate": "return round(int(value), 0)\n\n\ndef closest_float(value):\n    '''\n    Create a function that takes a value (string) representing a number\n    and returns the closest float to it. If the number is equidistant\n    from two floats, round it away from zero.\n\n    Examples\n    >>> closest_float(\"10.3\")\n    10.3\n    >>> closest_float(\"15.3\")\n    15.3\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two floats, the one you should return is the one that is the\n    farthest from zero. For example closest_float(\"14.5\") should\n    return 15 and closest_float(\"-14.5\") should return -15.\n    '''\n    return round(float(value), 0)"
    },
    {
      "rank": 99,
      "score": 2.020164938060112,
      "candidate": "value = value.replace(\".\", \"\")\n    value = int(value)\n\n    return int(round(value))\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 100,
      "score": 2.006215542699554,
      "candidate": "return round(float(value), 0)\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    }
  ]
}