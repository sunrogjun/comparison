{
  "timestamp": "2025-09-14T11:19:26.520636",
  "method": "improved_llm_judge",
  "judge_model": "codellama/CodeLlama-7b-Python-hf",
  "target_model": "codet5-770m",
  "dataset": "humaneval",
  "problem_number": 8,
  "total_candidates": 100,
  "results": [
    {
      "rank": 1,
      "score": 10.0,
      "candidate": "if not numbers:\n        return 0, 1\n    return numbers[0] * sum_product(numbers[1:])\n\n\ndef main() -> None:\n    numbers = [int(i) for i in input().split()]\n    print(sum_product(numbers))\n\n\nif __name__ == '__main__':\n    import doctest\n\n    doctest.testmod()\n    main()"
    },
    {
      "rank": 2,
      "score": 10.0,
      "candidate": "if numbers == []:\n        return (0, 1)\n    elif len(numbers) == 1:\n        return (numbers[0], 1)\n    else:\n        return (numbers[0] * sum_product(numbers[1:]), numbers[0] * sum_product(numbers[1:]))"
    },
    {
      "rank": 3,
      "score": 10.0,
      "candidate": "if len(numbers) == 0:\n        return (0, 1)\n    if len(numbers) == 1:\n        return (numbers[0], 1)\n    return (numbers[0] * sum_product(numbers[1:]), numbers[0] * sum_product(numbers[1:]))\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 4,
      "score": 10.0,
      "candidate": "if len(numbers) == 0:\n        return 0, 1\n    elif len(numbers) == 1:\n        return numbers[0], numbers[0]\n    else:\n        return sum_product(numbers[1:])\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 5,
      "score": 10.0,
      "candidate": "sum = 0\n    product = 1\n    for number in numbers:\n        sum += number\n        product *= number\n    return sum, product\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 6,
      "score": 10.0,
      "candidate": "if not numbers:\n        return (0, 1)\n    if len(numbers) == 1:\n        return (numbers[0], 1)\n    return (numbers[0] * sum_product(numbers[1:]), numbers[0] * sum_product(numbers[1:]))\n\n\nif __name__ == '__main__':\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 7,
      "score": 10.0,
      "candidate": "if not numbers:\n        return 0, 1\n    return sum(numbers), 1\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 8,
      "score": 10.0,
      "candidate": "if numbers:\n        return sum(numbers), 1\n    return 0, 0\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 9,
      "score": 10.0,
      "candidate": "sum = 0\n    prod = 1\n\n    for num in numbers:\n        sum += num\n        prod *= num\n\n    return sum, prod\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 10,
      "score": 10.0,
      "candidate": "if not numbers:\n        return 0, 1\n    return numbers[0] * sum_product(numbers[1:])\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 11,
      "score": 10.0,
      "candidate": "if not numbers:\n        return 0, 1\n\n    sum_of_all_numbers = 0\n    product_of_all_numbers = 1\n    for number in numbers:\n        sum_of_all_numbers += number\n        product_of_all_numbers *= number\n\n    return sum_of_all_numbers, product_of_all_numbers\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 12,
      "score": 10.0,
      "candidate": "sum = 0\n    product = 1\n    for num in numbers:\n        sum += num\n        product *= num\n    return (sum, product)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 13,
      "score": 10.0,
      "candidate": "total = 0\n    product = 1\n    for number in numbers:\n        total += number\n        product *= number\n    return (total, product)\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 14,
      "score": 10.0,
      "candidate": "if not numbers:\n        return 0, 1\n    return sum(numbers), 1\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 15,
      "score": 10.0,
      "candidate": "if not numbers:\n        return (0, 1)\n    return (sum(numbers), sum(numbers) * len(numbers))"
    },
    {
      "rank": 16,
      "score": 10.0,
      "candidate": "if not numbers:\n        return 0, 1\n    else:\n        sum = 0\n        product = 1\n        for number in numbers:\n            sum += number\n            product *= number\n        return sum, product\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 17,
      "score": 10.0,
      "candidate": "if not numbers:\n        return 0, 1\n    else:\n        return sum(numbers), sum(numbers) * len(numbers)"
    },
    {
      "rank": 18,
      "score": 10.0,
      "candidate": "if len(numbers) == 0:\n        return 0, 1\n    else:\n        return numbers[0] * sum_product(numbers[1:])\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 19,
      "score": 10.0,
      "candidate": "if not numbers:\n        return 0, 1\n    else:\n        return numbers[0] * sum_product(numbers[1:])\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 20,
      "score": 10.0,
      "candidate": "if not numbers:\n        return 0, 1\n\n    sum = 1\n    product = 1\n    for num in numbers:\n        product *= num\n        sum += num\n\n    return sum, product"
    },
    {
      "rank": 21,
      "score": 10.0,
      "candidate": "if not numbers:\n        return 0, 1\n    sum_num = 0\n    product_num = 1\n    for num in numbers:\n        sum_num += num\n        product_num *= num\n    return sum_num, product_num\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 22,
      "score": 9.993926248867929,
      "candidate": "if not numbers:\n        return 0, 1\n    else:\n        return numbers[0] * sum_product(numbers[1:])\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 23,
      "score": 9.947958272925291,
      "candidate": "sum_of_products = 0\n    product_of_products = 1\n    for number in numbers:\n        sum_of_products += number\n        product_of_products *= number\n    return sum_of_products, product_of_products\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 24,
      "score": 9.937781064472967,
      "candidate": "if not numbers:\n        return 0, 1\n    else:\n        return sum(numbers), sum([n * n for n in numbers])\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 25,
      "score": 9.901147650473119,
      "candidate": "if not numbers:\n        return 0, 1\n\n    return numbers[0] * sum(numbers), sum(numbers)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 26,
      "score": 9.89840066478106,
      "candidate": "if numbers == []:\n        return (0, 1)\n    return (sum(numbers), sum(numbers) * len(numbers))\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 27,
      "score": 9.8946309813745,
      "candidate": "if numbers == []:\n        return (0, 1)\n    return (sum(numbers), 1)\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 28,
      "score": 9.894435789981184,
      "candidate": "sum_of_all_numbers = 0\n    product_of_all_numbers = 1\n    for number in numbers:\n        sum_of_all_numbers += number\n        product_of_all_numbers *= number\n    return sum_of_all_numbers, product_of_all_numbers\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 29,
      "score": 9.86450333698482,
      "candidate": "if numbers:\n        return sum(numbers), 1\n    else:\n        return 0, 1\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 30,
      "score": 9.852552034031005,
      "candidate": "sum = 0\n    product = 1\n    for n in numbers:\n        sum += n\n        product *= n\n    return sum, product\n\n\nif __name__ == '__main__':\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 31,
      "score": 9.82355133109053,
      "candidate": "sum_ = 0\n    product_ = 1\n    for number in numbers:\n        sum_ += number\n        product_ *= number\n    return (sum_, product_)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 32,
      "score": 9.792712553068096,
      "candidate": "if not numbers:\n        return 0, 1\n    return sum(numbers), sum(numbers) * len(numbers)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 33,
      "score": 9.791462038234393,
      "candidate": "if not numbers:\n        return 0, 1\n    elif len(numbers) == 1:\n        return numbers[0], 1\n    else:\n        sum = 0\n        product = 1\n        for number in numbers:\n            sum += number\n            product *= number\n        return sum, product\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 34,
      "score": 9.788736526329272,
      "candidate": "if not numbers:\n        return 0, 1\n    else:\n        return numbers[0] * sum_product(numbers[1:])\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 35,
      "score": 9.774209330386958,
      "candidate": "return sum(numbers), sum(range(1, len(numbers) + 1))\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 36,
      "score": 9.761607908304832,
      "candidate": "if not numbers:\n        return 0, 1\n    return numbers[0] * sum_product(numbers[1:])\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 37,
      "score": 9.72923202449677,
      "candidate": "if not numbers:\n        return 0, 1\n    sum = 0\n    product = 1\n    for number in numbers:\n        sum += number\n        product *= number\n    return sum, product\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 38,
      "score": 9.676070106222381,
      "candidate": "if not numbers:\n        return 0, 1\n    else:\n        return sum(numbers), 1\n\n\nif __name__ == '__main__':\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 39,
      "score": 9.591389166015455,
      "candidate": "if not numbers:\n        return 0, 1\n\n    sum = 0\n    product = 1\n    for num in numbers:\n        sum += num\n        product *= num\n\n    return sum, product\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 40,
      "score": 9.524030081969844,
      "candidate": "sum = 0\n    product = 1\n    for n in numbers:\n        sum += n\n        product *= n\n    return sum, product\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 41,
      "score": 9.502149261697287,
      "candidate": "if len(numbers) == 0:\n        return 0, 1\n    sum = numbers[0]\n    product = 1\n    for i in numbers:\n        product *= i\n        sum += i\n    return sum, product\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 42,
      "score": 9.482052890159963,
      "candidate": "if numbers == []:\n        return 0, 1\n    elif numbers == [1]:\n        return 1, 1\n    else:\n        return numbers[0] * sum_product(numbers[1:])\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 43,
      "score": 9.402316277995705,
      "candidate": "if len(numbers) == 0:\n        return 0, 1\n    elif len(numbers) == 1:\n        return numbers[0], 1\n    else:\n        return numbers[0] + sum_product(numbers[1:]), numbers[0] * sum_product(numbers[1:])\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 44,
      "score": 9.20663193008677,
      "candidate": "if not numbers:\n        return 0, 1\n    return numbers[0] * sum_product(numbers[1:])\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 45,
      "score": 9.118148444254102,
      "candidate": "if not numbers:\n        return 0, 1\n    return numbers[0] * sum_product(numbers[1:])\n\n\ndef main():\n    import doctest\n\n    doctest.testmod()\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 46,
      "score": 8.967376877042874,
      "candidate": "if not numbers:\n        return 0, 1\n    return sum(numbers), sum(numbers) * len(numbers)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 47,
      "score": 8.905566054158525,
      "candidate": "if not numbers:\n        return (0, 1)\n    else:\n        return (sum(numbers) * numbers[0], sum(numbers))\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 48,
      "score": 8.75568116446315,
      "candidate": "sum = 0\n    product = 1\n    for number in numbers:\n        sum += number\n        product *= number\n    return sum, product\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 49,
      "score": 8.724109714559528,
      "candidate": "if not numbers:\n        return 0, 1\n    else:\n        return sum(numbers), 1"
    },
    {
      "rank": 50,
      "score": 8.720703224058472,
      "candidate": "if not numbers:\n        return 0, 1\n    return numbers[0] * sum_product(numbers[1:])\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 51,
      "score": 8.695523081642884,
      "candidate": "sum_ = 0\n    product = 1\n    for number in numbers:\n        sum_ += number\n        product *= number\n    return sum_, product\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 52,
      "score": 8.66465854739868,
      "candidate": "if not numbers:\n        return (0, 1)\n    else:\n        return (sum(numbers), sum(numbers) * len(numbers))\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 53,
      "score": 8.613327256468263,
      "candidate": "if not numbers:\n        return 0, 1\n    else:\n        return numbers[0] * sum_product(numbers[1:])\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 54,
      "score": 8.572181770681974,
      "candidate": "if not numbers:\n        return 0, 1\n    if len(numbers) == 1:\n        return numbers[0], 1\n    return numbers[0] + sum_product(numbers[1:]), numbers[0] * sum_product(numbers[1:])\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 55,
      "score": 8.565862718758439,
      "candidate": "sum = 0\n    product = 1\n\n    for number in numbers:\n        sum += number\n        product *= number\n\n    return sum, product\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 56,
      "score": 8.551288537526839,
      "candidate": "if not numbers:\n        return 0, 1\n    else:\n        return numbers[0] * sum_product(numbers[1:])\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 57,
      "score": 8.5451253386464,
      "candidate": "if not numbers:\n        return 0, 1\n    if len(numbers) == 1:\n        return numbers[0], 1\n    return sum_product(numbers[1:]), numbers[0] * sum_product(numbers[1:])\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 58,
      "score": 8.533203236985607,
      "candidate": "if not numbers:\n        return 0, 1\n    return numbers[0] * sum_product(numbers[1:])\n\n\nif __name__ == '__main__':\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 59,
      "score": 8.515458066746062,
      "candidate": "sum_ = 0\n    prod_ = 1\n    for num in numbers:\n        sum_ += num\n        prod_ *= num\n    return sum_, prod_\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 60,
      "score": 8.511377264639947,
      "candidate": "sum = 0\n    product = 1\n    for number in numbers:\n        sum += number\n        product *= number\n    return sum, product\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 61,
      "score": 8.475643108466516,
      "candidate": "if not numbers:\n        return 0, 1\n    return numbers[0] + sum(numbers), numbers[0] * sum(numbers)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 62,
      "score": 8.432263591147061,
      "candidate": "sum = 0\n    product = 1\n    for num in numbers:\n        sum += num\n        product *= num\n    return sum, product\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 63,
      "score": 8.419961003107131,
      "candidate": "if numbers == []:\n        return 0, 1\n    elif numbers[0] == 0:\n        return 0, 1\n    else:\n        return numbers[0] * sum_product(numbers[1:])"
    },
    {
      "rank": 64,
      "score": 8.381320392378747,
      "candidate": "if not numbers:\n        return 0, 1\n    return sum(numbers), 1\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 65,
      "score": 8.364837879081723,
      "candidate": "if not numbers:\n        return 0, 1\n    return numbers[0] * sum_product(numbers[1:])\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 66,
      "score": 8.286096328230558,
      "candidate": "if not numbers:\n        return 0, 1\n    return numbers[0] * sum_product(numbers[1:])\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 67,
      "score": 8.268232570231405,
      "candidate": "if not numbers:\n        return 0, 1\n    else:\n        return numbers[0] * sum_product(numbers[1:])\n\n\nif __name__ == '__main__':\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 68,
      "score": 8.253266684502513,
      "candidate": "if not numbers:\n        return 0, 1\n    return sum(numbers), 1"
    },
    {
      "rank": 69,
      "score": 8.24022728987205,
      "candidate": "if not numbers:\n        return 0, 1\n    return sum(numbers), 1\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 70,
      "score": 8.225103727878702,
      "candidate": "sum = 0\n    prod = 1\n    for number in numbers:\n        sum += number\n        prod *= number\n    return sum, prod\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 71,
      "score": 8.21429096434042,
      "candidate": "if not numbers:\n        return 0, 1\n    sum_ = 0\n    product_ = 1\n    for number in numbers:\n        sum_ += number\n        product_ *= number\n    return sum_, product_\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 72,
      "score": 8.205746392526144,
      "candidate": "if not numbers:\n        return (0, 1)\n    sum = 0\n    product = 1\n    for number in numbers:\n        sum += number\n        product *= number\n    return (sum, product)"
    },
    {
      "rank": 73,
      "score": 8.037734192257016,
      "candidate": "if not numbers:\n        return (0, 1)\n    else:\n        return (sum(numbers), 1)"
    },
    {
      "rank": 74,
      "score": 7.964261185990446,
      "candidate": "sum = 0\n    product = 1\n    for number in numbers:\n        sum += number\n        product *= number\n    return (sum, product)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 75,
      "score": 7.946849362079524,
      "candidate": "if len(numbers) == 0:\n        return 0, 1\n    else:\n        return numbers[0] * sum_product(numbers[1:])\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 76,
      "score": 7.941746967719519,
      "candidate": "if len(numbers) == 0:\n        return 0, 1\n    else:\n        return numbers[0] * sum_product(numbers[1:])\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 77,
      "score": 7.857972381390013,
      "candidate": "sum_of_all = 0\n    product_of_all = 1\n    for number in numbers:\n        sum_of_all += number\n        product_of_all *= number\n\n    return (sum_of_all, product_of_all)\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 78,
      "score": 7.7939291612607935,
      "candidate": "sum = 0\n    product = 1\n\n    for number in numbers:\n        sum += number\n        product *= number\n\n    return (sum, product)"
    },
    {
      "rank": 79,
      "score": 7.768671013480141,
      "candidate": "if numbers:\n        sum = 0\n        product = 1\n        for num in numbers:\n            sum += num\n            product *= num\n\n        return sum, product\n    else:\n        return 0, 1\n\n\nif __name__ == '__main__':\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 80,
      "score": 3.3198362698456854,
      "candidate": "if not numbers:\n        return 0, 1\n\n    return sum(numbers), 1"
    },
    {
      "rank": 81,
      "score": 3.2219956675059724,
      "candidate": "if not numbers:\n        return 0, 1\n    return sum(numbers), sum(numbers) * len(numbers)"
    },
    {
      "rank": 82,
      "score": 3.2048644766956955,
      "candidate": "if not numbers:\n        return 0, 1\n    return numbers[0] * sum_product(numbers[1:])\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 83,
      "score": 3.1284520206565825,
      "candidate": "if numbers:\n        return sum(numbers), 1\n    else:\n        return 0, 1"
    },
    {
      "rank": 84,
      "score": 3.075893077156767,
      "candidate": "return sum(numbers), 1 if numbers else 0\n\n\nif __name__ == '__main__':\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 85,
      "score": 3.068057633572907,
      "candidate": "sum_ = 0\n    product_ = 1\n    for number in numbers:\n        sum_ += number\n        product_ *= number\n    return (sum_, product_)"
    },
    {
      "rank": 86,
      "score": 3.023293743839072,
      "candidate": "if not numbers:\n        return 0, 1\n\n    return sum(numbers), 1\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 87,
      "score": 3.0203862853630885,
      "candidate": "sum = 0\n    product = 1\n    for number in numbers:\n        sum += number\n        product *= number\n    return sum, product\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 88,
      "score": 3.001073825894917,
      "candidate": "sum_of_numbers = 0\n    product_of_numbers = 1\n\n    for num in numbers:\n        sum_of_numbers += num\n        product_of_numbers *= num\n\n    return (sum_of_numbers, product_of_numbers)\n\n\ndef main():\n    print(sum_product([]))\n    print(sum_product([1, 2, 3, 4]))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 89,
      "score": 2.938744312543412,
      "candidate": "if numbers is None or len(numbers) == 0:\n        return 0, 1\n\n    return sum(numbers), 1"
    },
    {
      "rank": 90,
      "score": 2.9372084564021677,
      "candidate": "if not numbers:\n        return 0, 1\n\n    sum_ = 0\n    product_ = 1\n    for num in numbers:\n        sum_ += num\n        product_ *= num\n\n    return sum_, product_\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 91,
      "score": 2.935065401071245,
      "candidate": "if not numbers:\n        return (0, 1)\n    else:\n        return (sum(numbers), sum(numbers) * len(numbers))\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 92,
      "score": 2.9191327211125735,
      "candidate": "# Your code here\n    sum = 0\n    product = 1\n    for number in numbers:\n        sum += number\n        product *= number\n\n    return sum, product\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 93,
      "score": 2.899373410052489,
      "candidate": "if numbers == []:\n        return (0, 1)\n\n    product = 1\n    for number in numbers:\n        product *= number\n\n    return (sum(numbers), product)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 94,
      "score": 2.8856796278497114,
      "candidate": "if not numbers:\n        return 0, 1\n    if len(numbers) == 1:\n        return numbers[0], 1\n\n    first_number = numbers[0]\n    second_number = numbers[1]\n\n    total_sum = first_number\n    total_product = first_number\n\n    for number in numbers[2:]:\n        total_product *= number\n        total_sum += number\n\n    return total_sum, total_product\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 95,
      "score": 2.8302163433924306,
      "candidate": "if not numbers:\n        return (0, 1)\n    if len(numbers) == 1:\n        return (numbers[0], 1)\n    sum_of_products = [sum_product(x) for x in numbers]\n    return (sum_of_products[0][0] + sum_of_products[1][0], sum_of_products[0][1] * sum_of_products[1][1])\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 96,
      "score": 2.823764320123246,
      "candidate": "if numbers == []:\n        return 0, 1\n    else:\n        return sum(numbers), 1"
    },
    {
      "rank": 97,
      "score": 2.787305464729771,
      "candidate": "if not numbers:\n        return (0, 1)\n\n    return (numbers[0] * sum(numbers), numbers[0] * sum(map(lambda x: x * x, numbers)))\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 98,
      "score": 2.7436228335060853,
      "candidate": "if numbers == []:\n        return 0, 1\n    else:\n        return numbers[0] * sum_product(numbers[1:])"
    },
    {
      "rank": 99,
      "score": 2.700802880895174,
      "candidate": "if len(numbers) == 0:\n        return 0, 1\n\n    product = 1\n    for number in numbers:\n        product *= number\n\n    return product, product * numbers[0]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 100,
      "score": 2.449853528141154,
      "candidate": "if not numbers:\n        return 0, 1\n    else:\n        return numbers[0] * sum_product(numbers[1:])"
    }
  ]
}