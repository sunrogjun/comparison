{
  "timestamp": "2025-09-14T11:24:42.655791",
  "method": "improved_llm_judge",
  "judge_model": "codellama/CodeLlama-7b-Python-hf",
  "target_model": "codet5-770m",
  "dataset": "humaneval",
  "problem_number": 20,
  "total_candidates": 100,
  "results": [
    {
      "rank": 1,
      "score": 10.0,
      "candidate": "return min(numbers, key=lambda x: abs(x - numbers[0])), max(numbers, key=lambda x: abs(x - numbers[0]))\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 2,
      "score": 10.0,
      "candidate": "closest_to_other = numbers[0]\n    closest_to_smaller = numbers[0]\n    for number in numbers:\n        if number < closest_to_other:\n            closest_to_other = number\n        elif number > closest_to_smaller:\n            closest_to_smaller = number\n    return closest_to_smaller, closest_to_other\n\n\nif __name__ == '__main__':\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 3,
      "score": 10.0,
      "candidate": "smallest_number = float('inf')\n    largest_number = float('-inf')\n    for number in numbers:\n        if number < smallest_number:\n            smallest_number = number\n        elif number > largest_number:\n            largest_number = number\n    return smallest_number, largest_number\n\n\nif __name__ == '__main__':\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 4,
      "score": 10.0,
      "candidate": "smallest_number = numbers[0]\n    largest_number = numbers[0]\n    for number in numbers[1:]:\n        if number < smallest_number:\n            smallest_number = number\n        elif number > largest_number:\n            largest_number = number\n    return smallest_number, largest_number\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 5,
      "score": 10.0,
      "candidate": "if len(numbers) < 2:\n        return numbers[0], numbers[0]\n    smallest_number = numbers[0]\n    largest_number = numbers[0]\n    for number in numbers:\n        if smallest_number > number:\n            smallest_number = number\n        elif largest_number < number:\n            largest_number = number\n    return smallest_number, largest_number\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 6,
      "score": 10.0,
      "candidate": "smallest_number = numbers[0]\n    largest_number = numbers[0]\n    for number in numbers:\n        if number < smallest_number:\n            smallest_number = number\n        elif number > largest_number:\n            largest_number = number\n    return smallest_number, largest_number\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 7,
      "score": 10.0,
      "candidate": "sorted_numbers = sorted(numbers)\n    smallest_number = sorted_numbers[0]\n    larger_number = sorted_numbers[1]\n    for number in numbers:\n        if number < smallest_number:\n            smallest_number = number\n        if number > larger_number:\n            larger_number = number\n    return smallest_number, larger_number\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 8,
      "score": 10.0,
      "candidate": "smallest = float(\"inf\")\n    largest = float(\"-inf\")\n    for n in numbers:\n        if n < smallest:\n            smallest = n\n        elif n > largest:\n            largest = n\n    return smallest, largest\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 9,
      "score": 10.0,
      "candidate": "numbers.sort()\n    smallest = numbers[0]\n    largest = numbers[-1]\n    for number in numbers[1:-1]:\n        if number < smallest:\n            smallest = number\n        if number > largest:\n            largest = number\n    return smallest, largest\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 10,
      "score": 10.0,
      "candidate": "smallest_number = min(numbers)\n    largest_number = max(numbers)\n    closest_element = (smallest_number, largest_number)\n    return closest_element\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 11,
      "score": 10.0,
      "candidate": "smallest_number = float(\"inf\")\n    smallest_index = -1\n    for index, number in enumerate(numbers):\n        if index == 0:\n            continue\n        if number < smallest_number:\n            smallest_number = number\n            smallest_index = index\n    return numbers[smallest_index], numbers[0]"
    },
    {
      "rank": 12,
      "score": 10.0,
      "candidate": "if len(numbers) < 2:\n        return numbers[0], numbers[0]\n\n    closest_1: float = numbers[0]\n    closest_2: float = numbers[0]\n    for num in numbers[1:]:\n        if num < closest_1:\n            closest_1 = num\n        elif num > closest_2:\n            closest_2 = num\n    return closest_1, closest_2\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 13,
      "score": 10.0,
      "candidate": "smallest_number = None\n    largest_number = None\n    for number in numbers:\n        if smallest_number is None:\n            smallest_number = number\n        elif number < smallest_number:\n            smallest_number = number\n        if largest_number is None:\n            largest_number = number\n        elif number > largest_number:\n            largest_number = number\n\n    return smallest_number, largest_number\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 14,
      "score": 10.0,
      "candidate": "min_num = float(\"inf\")\n    max_num = -float(\"inf\")\n    for number in numbers:\n        if number < min_num:\n            min_num = number\n        if number > max_num:\n            max_num = number\n    return min_num, max_num\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 15,
      "score": 10.0,
      "candidate": "return min(numbers), max(numbers)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 16,
      "score": 10.0,
      "candidate": "smallest_number = float('inf')\n    largest_number = float('-inf')\n    for number in numbers:\n        if number < smallest_number:\n            smallest_number = number\n        elif number > largest_number:\n            largest_number = number\n    return smallest_number, largest_number\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 17,
      "score": 10.0,
      "candidate": "closest_1 = None\n    closest_2 = None\n    for number in numbers:\n        if closest_1 is None:\n            closest_1 = number\n            closest_2 = number\n        elif number < closest_1:\n            closest_1 = number\n        elif number > closest_2:\n            closest_2 = number\n    return closest_1, closest_2\n\n\nif __name__ == '__main__':\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 18,
      "score": 10.0,
      "candidate": "if len(numbers) < 2:\n        return numbers[0], numbers[-1]\n    smallest_number = numbers[0]\n    largest_number = numbers[-1]\n    for number in numbers[1:]:\n        if number < smallest_number:\n            smallest_number = number\n        elif number > largest_number:\n            largest_number = number\n    return smallest_number, largest_number\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 19,
      "score": 10.0,
      "candidate": "return min(numbers), max(numbers)\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 20,
      "score": 10.0,
      "candidate": "smallest = numbers[0]\n    largest = numbers[-1]\n    for num in numbers:\n        if abs(num - smallest) > abs(num - largest):\n            smallest = num\n        elif abs(num - largest) > abs(num - smallest):\n            largest = num\n    return smallest, largest\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 21,
      "score": 10.0,
      "candidate": "smallest_number = None\n    largest_number = None\n    for number in numbers:\n        if smallest_number is None:\n            smallest_number = number\n            largest_number = number\n        elif smallest_number > number:\n            smallest_number = number\n        elif largest_number < number:\n            largest_number = number\n    return smallest_number, largest_number\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 22,
      "score": 10.0,
      "candidate": "numbers = sorted(numbers)\n    return numbers[0], numbers[-1]"
    },
    {
      "rank": 23,
      "score": 10.0,
      "candidate": "smallest = min(numbers)\n    largest = max(numbers)\n    for num in numbers:\n        if num < smallest:\n            smallest = num\n        elif num > largest:\n            largest = num\n    return smallest, largest\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 24,
      "score": 10.0,
      "candidate": "if not numbers:\n        return (0.0, 0.0)\n\n    # Find the closest number to each other and return them in order\n    smallest_number = min(numbers)\n    largest_number = max(numbers)\n    return (smallest_number, largest_number)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 25,
      "score": 10.0,
      "candidate": "closest_numbers = None\n    closest_number = None\n    for number in numbers:\n        if closest_numbers is None:\n            closest_numbers = [number]\n            closest_number = number\n        elif closest_numbers[-1] > number:\n            closest_numbers.append(number)\n            closest_number = number\n        else:\n            closest_numbers.pop(-1)\n    return closest_number, closest_numbers[0]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 26,
      "score": 10.0,
      "candidate": "assert len(numbers) >= 2, \"Must have at least two numbers\"\n    smallest_number = numbers[0]\n    largest_number = numbers[0]\n    for number in numbers[1:]:\n        if number < smallest_number:\n            smallest_number = number\n        if number > largest_number:\n            largest_number = number\n    return smallest_number, largest_number\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 27,
      "score": 10.0,
      "candidate": "smallest = numbers[0]\n    largest = numbers[0]\n    for num in numbers:\n        if num < smallest:\n            smallest = num\n        elif num > largest:\n            largest = num\n    return smallest, largest\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 28,
      "score": 10.0,
      "candidate": "if len(numbers) < 2:\n        return numbers[0], numbers[0]\n    else:\n        smallest_index = numbers.index(min(numbers))\n        largest_index = numbers.index(max(numbers))\n        return numbers[smallest_index], numbers[largest_index]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 29,
      "score": 10.0,
      "candidate": "sorted_numbers = sorted(numbers)\n    return sorted_numbers[0], sorted_numbers[-1]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 30,
      "score": 10.0,
      "candidate": "smallest_number = numbers[0]\n    largest_number = numbers[-1]\n    for number in numbers:\n        if number < smallest_number:\n            smallest_number = number\n        if number > largest_number:\n            largest_number = number\n    return smallest_number, largest_number\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 31,
      "score": 10.0,
      "candidate": "assert len(numbers) >= 2\n\n    smallest_number = numbers[0]\n    largest_number = numbers[0]\n\n    for number in numbers[1:]:\n        if number < smallest_number:\n            smallest_number = number\n        elif number > largest_number:\n            largest_number = number\n\n    return smallest_number, largest_number\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 32,
      "score": 10.0,
      "candidate": "smallest_number = numbers[0]\n    largest_number = numbers[0]\n    for number in numbers:\n        if number < smallest_number:\n            smallest_number = number\n        elif number > largest_number:\n            largest_number = number\n\n    return smallest_number, largest_number\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 33,
      "score": 9.993251387631034,
      "candidate": "smallest_number = float('inf')\n    largest_number = float('-inf')\n    for number in numbers:\n        if number < smallest_number:\n            smallest_number = number\n        elif number > largest_number:\n            largest_number = number\n    return smallest_number, largest_number\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 34,
      "score": 9.982086980445024,
      "candidate": "smallest_number = None\n    largest_number = None\n    for number in numbers:\n        if smallest_number is None:\n            smallest_number = number\n        elif number < smallest_number:\n            smallest_number = number\n        if largest_number is None:\n            largest_number = number\n        elif number > largest_number:\n            largest_number = number\n    return smallest_number, largest_number\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 35,
      "score": 9.94217585880588,
      "candidate": "smallest_number = numbers[0]\n    largest_number = numbers[0]\n    for number in numbers:\n        if number < smallest_number:\n            smallest_number = number\n        elif number > largest_number:\n            largest_number = number\n    return smallest_number, largest_number\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 36,
      "score": 9.930867849414408,
      "candidate": "smallest = None\n    largest = None\n    for num in numbers:\n        if smallest is None:\n            smallest = num\n        elif num < smallest:\n            smallest = num\n        if largest is None:\n            largest = num\n        elif num > largest:\n            largest = num\n    return smallest, largest\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 37,
      "score": 9.907170511668092,
      "candidate": "sorted_numbers = sorted(numbers)\n    smallest_number = sorted_numbers[0]\n    largest_number = sorted_numbers[len(numbers) - 1]\n    return smallest_number, largest_number\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 38,
      "score": 9.890164056081243,
      "candidate": "smallest_number = float('inf')\n    largest_number = -float('inf')\n    for number in numbers:\n        if number < smallest_number:\n            smallest_number = number\n        elif number > largest_number:\n            largest_number = number\n    return smallest_number, largest_number\n\n\nif __name__ == '__main__':\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 39,
      "score": 9.88293152152541,
      "candidate": "return min(numbers), max(numbers)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 40,
      "score": 9.882923312638333,
      "candidate": "smallest_number = numbers[0]\n    largest_number = numbers[0]\n    for number in numbers:\n        if number < smallest_number:\n            smallest_number = number\n        elif number > largest_number:\n            largest_number = number\n    return smallest_number, largest_number\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 41,
      "score": 9.854153125103362,
      "candidate": "if len(numbers) < 2:\n        raise ValueError(f\"The list of numbers should have at least two elements: {numbers}\")\n    min_value = min(numbers)\n    max_value = max(numbers)\n    return min_value, max_value\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 42,
      "score": 9.850496324767066,
      "candidate": "smallest_number = None\n    largest_number = None\n    for num in numbers:\n        if smallest_number is None or num < smallest_number:\n            smallest_number = num\n        if largest_number is None or num > largest_number:\n            largest_number = num\n    return smallest_number, largest_number\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 43,
      "score": 9.849448152205355,
      "candidate": "if len(numbers) < 2:\n        raise ValueError('Must have at least two numbers')\n\n    smallest_number = numbers[0]\n    largest_number = numbers[-1]\n\n    for number in numbers:\n        if number < smallest_number:\n            smallest_number = number\n        if number > largest_number:\n            largest_number = number\n\n    return smallest_number, largest_number"
    },
    {
      "rank": 44,
      "score": 9.807458859791842,
      "candidate": "smallest_number = min(numbers)\n    largest_number = max(numbers)\n    return smallest_number, largest_number\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 45,
      "score": 9.803945923433922,
      "candidate": "smallest = numbers[0]\n    largest = numbers[0]\n    for number in numbers:\n        if number < smallest:\n            smallest = number\n        elif number > largest:\n            largest = number\n    return smallest, largest\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 46,
      "score": 9.769680614520107,
      "candidate": "smallest_number = float('inf')\n    smallest_number_index = 0\n\n    for index, number in enumerate(numbers):\n        if index == 0:\n            smallest_number = number\n            smallest_number_index = index\n        elif index == 1:\n            continue\n        else:\n            if abs(number - smallest_number) < abs(number - smallest_number_index):\n                smallest_number = number\n                smallest_number_index = index\n\n    return smallest_number, smallest_number_index\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 47,
      "score": 9.768291153593768,
      "candidate": "smallest = numbers[0]\n    largest = numbers[0]\n    for n in numbers:\n        if n < smallest:\n            smallest = n\n        if n > largest:\n            largest = n\n    return smallest, largest\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 48,
      "score": 9.765262807032524,
      "candidate": "smallest_number = None\n    largest_number = None\n\n    for number in numbers:\n        if smallest_number is None or number < smallest_number:\n            smallest_number = number\n        if largest_number is None or number > largest_number:\n            largest_number = number\n\n    return smallest_number, largest_number\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 49,
      "score": 9.760412881077356,
      "candidate": "return min(numbers), max(numbers)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 50,
      "score": 9.73511989811648,
      "candidate": "if len(numbers) < 2:\n        raise ValueError(\"Must have at least two numbers\")\n    return min(numbers), max(numbers)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 51,
      "score": 9.718856235379514,
      "candidate": "smallest_number = numbers[0]\n    largest_number = numbers[-1]\n    for number in numbers:\n        if number < smallest_number:\n            smallest_number = number\n        elif number > largest_number:\n            largest_number = number\n    return smallest_number, largest_number\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 52,
      "score": 9.699146693885302,
      "candidate": "return min(numbers), max(numbers)"
    },
    {
      "rank": 53,
      "score": 9.677440122697439,
      "candidate": "smallest_number = float(\"inf\")\n    largest_number = -float(\"inf\")\n    for number in numbers:\n        if number < smallest_number:\n            smallest_number = number\n        elif number > largest_number:\n            largest_number = number\n    return smallest_number, largest_number\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 54,
      "score": 9.648973453061323,
      "candidate": "closest_element = None\n    smallest_element = None\n    largest_element = None\n\n    for num in numbers:\n        if closest_element is None:\n            closest_element = num\n        elif num < closest_element:\n            closest_element = num\n        elif num > closest_element:\n            closest_element = num\n\n    return smallest_element, largest_element\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 55,
      "score": 9.640077895802646,
      "candidate": "smallest_number = min(numbers)\n    largest_number = max(numbers)\n    closest_numbers = [x for x in numbers if x == largest_number]\n    return smallest_number, largest_number\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 56,
      "score": 9.58039123838868,
      "candidate": "smallest_number = numbers[0]\n    largest_number = numbers[0]\n    for number in numbers[1:]:\n        if number < smallest_number:\n            smallest_number = number\n        elif number > largest_number:\n            largest_number = number\n    return smallest_number, largest_number\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 57,
      "score": 9.545987962239394,
      "candidate": "smallest_number = numbers[0]\n    larger_number = numbers[0]\n    for number in numbers:\n        if smallest_number > number:\n            smallest_number = number\n        if larger_number < number:\n            larger_number = number\n    return smallest_number, larger_number\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 58,
      "score": 9.493584439832787,
      "candidate": "return min(numbers, key=lambda x: abs(x - numbers[0])), max(numbers, key=lambda x: abs(x - numbers[0]))\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 59,
      "score": 9.47114453552205,
      "candidate": "if len(numbers) < 2:\n        raise ValueError('Numbers list must have at least two elements')\n\n    smallest = numbers[0]\n    smallest_index = 0\n    for index, number in enumerate(numbers):\n        if number < smallest:\n            smallest = number\n            smallest_index = index\n\n    larger = numbers[smallest_index + 1]\n    larger_index = len(numbers) - 1\n    for index, number in enumerate(numbers):\n        if number > larger:\n            larger = number\n            larger_index = index\n\n    return smallest, larger\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 60,
      "score": 9.446832512996986,
      "candidate": "smallest_number = numbers[0]\n    largest_number = numbers[-1]\n\n    for i in range(1, len(numbers)):\n        if numbers[i] < smallest_number:\n            smallest_number = numbers[i]\n        if numbers[i] > largest_number:\n            largest_number = numbers[i]\n\n    return smallest_number, largest_number\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 61,
      "score": 9.42450321128885,
      "candidate": "smallest = numbers[0]\n    largest = numbers[0]\n    for number in numbers:\n        if number < smallest:\n            smallest = number\n        elif number > largest:\n            largest = number\n    return smallest, largest\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 62,
      "score": 9.401896687959665,
      "candidate": "return min(numbers), max(numbers)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 63,
      "score": 9.389578175014488,
      "candidate": "closest_to_each_other = numbers[0]\n    smallest_number = closest_to_each_other\n    largest_number = closest_to_each_other\n    for number in numbers:\n        if number < smallest_number:\n            smallest_number = number\n        elif number > largest_number:\n            largest_number = number\n\n    return smallest_number, largest_number\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 64,
      "score": 9.26824252593394,
      "candidate": "assert len(numbers) >= 2\n    smallest_number = min(numbers)\n    largest_number = max(numbers)\n    return smallest_number, largest_number\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 65,
      "score": 9.0433598776711,
      "candidate": "if len(numbers) < 2:\n        return numbers[0], numbers[0]\n\n    closest_number_to_other = numbers[0]\n    smallest_number = numbers[0]\n    largest_number = numbers[0]\n\n    for number in numbers:\n        if number < closest_number_to_other:\n            smallest_number = number\n        elif number > closest_number_to_other:\n            largest_number = number\n        closest_number_to_other = number\n\n    return smallest_number, largest_number\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 66,
      "score": 9.006215542699554,
      "candidate": "smallest_number = min(numbers)\n    largest_number = max(numbers)\n    if smallest_number == largest_number:\n        return smallest_number, largest_number\n    else:\n        return largest_number, smallest_number\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 67,
      "score": 8.898795562810127,
      "candidate": "smallest_number = numbers[0]\n    larger_number = numbers[0]\n\n    for number in numbers:\n        if smallest_number > number:\n            smallest_number = number\n        elif smallest_number < number:\n            larger_number = number\n\n    return smallest_number, larger_number\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 68,
      "score": 8.74472439150964,
      "candidate": "smallest = numbers[0]\n    largest = numbers[0]\n\n    for number in numbers[1:]:\n        if number < smallest:\n            smallest = number\n        elif number > largest:\n            largest = number\n\n    return smallest, largest\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 69,
      "score": 8.699433367196434,
      "candidate": "smallest = numbers[0]\n    largest = numbers[-1]\n    for num in numbers:\n        if abs(num - smallest) < abs(largest - num):\n            largest = num\n        if abs(num - largest) < abs(smallest - num):\n            smallest = num\n    return smallest, largest"
    },
    {
      "rank": 70,
      "score": 8.690127447955128,
      "candidate": "# sort the list of numbers\n    numbers.sort()\n\n    # find the two closest numbers\n    smallest_number = numbers[0]\n    larger_number = numbers[1]\n\n    for number in numbers:\n        if number < smallest_number:\n            smallest_number = number\n        if number > larger_number:\n            larger_number = number\n\n    return smallest_number, larger_number\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 71,
      "score": 8.612638057956094,
      "candidate": "if len(numbers) < 2:\n        return numbers[0], numbers[0]\n    elif len(numbers) == 2:\n        return numbers[0], numbers[1]\n    else:\n        smallest_number = numbers[0]\n        smallest_index = 0\n        for index, number in enumerate(numbers):\n            if number < smallest_number:\n                smallest_number = number\n                smallest_index = index\n        largest_number = numbers[-1]\n        largest_index = len(numbers) - 1\n        for index, number in enumerate(numbers):\n            if number > largest_number:\n                largest_number = number\n                largest_index = index\n        return numbers[smallest_index], numbers[largest_index]"
    },
    {
      "rank": 72,
      "score": 8.603557348709584,
      "candidate": "smallest_number = None\n    largest_number = None\n    for number in numbers:\n        if smallest_number is None:\n            smallest_number = number\n            largest_number = number\n        elif smallest_number > number:\n            smallest_number = number\n        elif largest_number < number:\n            largest_number = number\n    return smallest_number, largest_number\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 73,
      "score": 8.560910830131602,
      "candidate": "smallest_number = None\n    largest_number = None\n\n    for number in numbers:\n        if smallest_number is None:\n            smallest_number = number\n        elif smallest_number > number:\n            smallest_number = number\n\n        if largest_number is None:\n            largest_number = number\n        elif largest_number < number:\n            largest_number = number\n\n    return smallest_number, largest_number\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 74,
      "score": 8.556551612209212,
      "candidate": "closest_smaller = float(\"inf\")\n    closest_larger = float(\"-inf\")\n\n    for number in numbers:\n        if number < closest_smaller:\n            closest_smaller = number\n        elif number > closest_larger:\n            closest_larger = number\n\n    return closest_smaller, closest_larger"
    },
    {
      "rank": 75,
      "score": 8.547136108179549,
      "candidate": "return min(numbers), max(numbers)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 76,
      "score": 8.546357288438946,
      "candidate": "smallest_number = min(numbers)\n    largest_number = max(numbers)\n    return smallest_number, largest_number\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 77,
      "score": 8.544910474956831,
      "candidate": "smallest_number = min(numbers)\n    largest_number = max(numbers)\n    return smallest_number, largest_number\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 78,
      "score": 8.519452748629915,
      "candidate": "return sorted(numbers, reverse=True)[0], sorted(numbers, reverse=True)[1]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 79,
      "score": 8.478830447254504,
      "candidate": "return min(numbers), max(numbers)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 80,
      "score": 8.47289028517045,
      "candidate": "smallest = float(\"inf\")\n    largest = float(\"-inf\")\n    for number in numbers:\n        if smallest > number:\n            smallest = number\n        elif largest < number:\n            largest = number\n    return smallest, largest\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 81,
      "score": 8.42212130675454,
      "candidate": "smallest_number = float(\"inf\")\n    largest_number = float(\"-inf\")\n    for number in numbers:\n        if number < smallest_number:\n            smallest_number = number\n        if number > largest_number:\n            largest_number = number\n    return smallest_number, largest_number\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 82,
      "score": 8.374453791293618,
      "candidate": "numbers.sort()\n    return numbers[0], numbers[-1]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 83,
      "score": 8.348588607930568,
      "candidate": "smallest = numbers[0]\n    largest = numbers[0]\n\n    for number in numbers:\n        if number < smallest:\n            smallest = number\n        elif number > largest:\n            largest = number\n\n    return smallest, largest\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 84,
      "score": 8.342869178999136,
      "candidate": "smallest = min(numbers)\n    largest = max(numbers)\n    return smallest, largest"
    },
    {
      "rank": 85,
      "score": 8.300068220837664,
      "candidate": "return min(numbers), max(numbers)\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 86,
      "score": 8.288899760933239,
      "candidate": "smallest_number = None\n    largest_number = None\n    for number in numbers:\n        if smallest_number is None:\n            smallest_number = number\n            largest_number = number\n        elif number < smallest_number:\n            smallest_number = number\n        elif number > largest_number:\n            largest_number = number\n    return smallest_number, largest_number\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 87,
      "score": 8.283780676779614,
      "candidate": "return min(numbers), max(numbers)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 88,
      "score": 8.275685799841638,
      "candidate": "return min(numbers), max(numbers)"
    },
    {
      "rank": 89,
      "score": 8.258246450569615,
      "candidate": "if len(numbers) < 2:\n        raise ValueError(\"Must have at least two numbers to select two that are the closest to each other\")\n    numbers.sort()\n    return numbers[0], numbers[1]"
    },
    {
      "rank": 90,
      "score": 8.234598624349598,
      "candidate": "if not numbers:\n        return ()\n    return min(numbers), max(numbers)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 91,
      "score": 8.193811427547557,
      "candidate": "smallest = None\n    largest = None\n    for num in numbers:\n        if smallest is None:\n            smallest = num\n            largest = num\n        elif num < smallest:\n            smallest = num\n        elif num > largest:\n            largest = num\n    return smallest, largest\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 92,
      "score": 8.032706769285932,
      "candidate": "smallest = float('inf')\n    largest = float('-inf')\n    for num in numbers:\n        if num < smallest:\n            smallest = num\n        if num > largest:\n            largest = num\n    return smallest, largest\n\n\nif __name__ == '__main__':\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 93,
      "score": 8.006630297030505,
      "candidate": "if len(numbers) <= 2:\n        return numbers[0], numbers[1]\n    smaller, larger = None, None\n    for number in numbers:\n        if smaller is None:\n            smaller = number\n        if larger is None:\n            larger = number\n        elif number < smaller:\n            smaller = number\n        elif number > larger:\n            larger = number\n    return smaller, larger\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 94,
      "score": 8.002772506718273,
      "candidate": "smallest_number = min(numbers)\n    largest_number = max(numbers)\n    return smallest_number, largest_number\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 95,
      "score": 7.986102627430542,
      "candidate": "if len(numbers) < 2:\n        raise ValueError('Expected at least two numbers')\n\n    smallest_number = numbers[0]\n    largest_number = numbers[0]\n\n    for number in numbers[1:]:\n        if number < smallest_number:\n            smallest_number = number\n        elif number > largest_number:\n            largest_number = number\n\n    return smallest_number, largest_number\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 96,
      "score": 7.909719916365405,
      "candidate": "if len(numbers) < 2:\n        raise ValueError('The list of numbers should have at least two elements')\n    smallest_number = min(numbers)\n    largest_number = max(numbers)\n    return smallest_number, largest_number\n\n\nif __name__ == '__main__':\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 97,
      "score": 7.897901996281997,
      "candidate": "smallest_element = float('inf')\n    largest_element = float('-inf')\n\n    for number in numbers:\n        if number < smallest_element:\n            smallest_element = number\n        elif number > largest_element:\n            largest_element = number\n\n    return smallest_element, largest_element\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 98,
      "score": 7.836946706041714,
      "candidate": "return sorted(numbers, key=lambda n: abs(n - numbers[0]), reverse=True)[0], sorted(numbers, key=lambda n: abs(n - numbers[1]), reverse=True)[0]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 99,
      "score": 3.0,
      "candidate": "if len(numbers) < 2:\n        return numbers[0], numbers[0]\n\n    closest_to_each_other = numbers[0]\n    closest_to_smaller_number = numbers[0]\n\n    for number in numbers:\n        if number < closest_to_each_other:\n            closest_to_each_other = number\n        elif number > closest_to_smaller_number:\n            closest_to_smaller_number = number\n\n    return closest_to_each_other, closest_to_smaller_number\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 100,
      "score": 3.0,
      "candidate": "closest_numbers: List[float] = []\n    smallest_number: float = float(\"inf\")\n    smallest_number_index: int = -1\n    for index, number in enumerate(numbers):\n        if index == 0:\n            smallest_number = number\n            smallest_number_index = index\n        elif index == len(numbers) - 1:\n            largest_number = number\n            largest_number_index = index\n        else:\n            if number < smallest_number:\n                smallest_number = number\n                smallest_number_index = index\n            if number > largest_number:\n                largest_number = number\n                largest_number_index = index\n    return smallest_number, largest_number\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    }
  ]
}