{
  "timestamp": "2025-09-14T11:41:50.293563",
  "method": "improved_llm_judge",
  "judge_model": "codellama/CodeLlama-7b-Python-hf",
  "target_model": "codet5-770m",
  "dataset": "humaneval",
  "problem_number": 59,
  "total_candidates": 100,
  "results": [
    {
      "rank": 1,
      "score": 10.0,
      "candidate": "if n == 1:\n        return 1\n    for i in range(2, n):\n        if n % i == 0:\n            return i\n    return n\n\n\ndef largest_prime_factor_iterative(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor_iterative(13195)\n    29\n    >>> largest_prime_factor_iterative(2048)\n    2\n    \"\"\"\n    if n == 1:\n        return 1\n    for i in range(2, n):\n        if n % i == 0:\n            return i\n    return n\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 2,
      "score": 10.0,
      "candidate": "if n < 2:\n        return n\n    if n < 3:\n        return 2\n    for i in range(3, int(n ** 0.5) + 1, 2):\n        if n % i == 0:\n            return i\n    return n\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 3,
      "score": 10.0,
      "candidate": "if n <= 1:\n        return 0\n    if n == 2:\n        return 1\n    if n == 3:\n        return 2\n\n    if n % 2 == 0:\n        return 2\n\n    p = 3\n    while p * p <= n:\n        if n % p == 0:\n            return p\n        p += 2\n    return n\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 4,
      "score": 10.0,
      "candidate": "if n <= 1:\n        return 0\n    if n == 2:\n        return 1\n    if n % 2 == 0:\n        return 2\n    if n % 3 == 0:\n        return 3\n    if n % 5 == 0:\n        return 5\n    return n\n\n\ndef is_prime(n: int) -> bool:\n    \"\"\"Return True if n is prime, False otherwise.\n    >>> is_prime(13195)\n    False\n    >>> is_prime(2048)\n    True\n    \"\"\"\n    if n <= 1:\n        return False\n    if n % 2 == 0 or n % 3 == 0 or n % 5 == 0:\n        return False\n    if n < 10:\n        return True\n    if n % 7 == 0 or n % 11 == 0 or n % 13 == 0:\n        return False\n    for i in range(7, int(n ** 0.5) + 1, 7):\n        if n % i == 0:\n            return False\n    return True\n\n\ndef is_triangular_prime(n: int) -> bool:\n    \"\"\"Return True if n is a triangular prime, False otherwise.\n    >>> is_triangular_prime(13195)\n    False\n    >>> is_triangular_prime(2048)\n    True\n    \"\"\"\n    if n <= 1:\n        return False\n    if n % 2 == 0 or n % 3 == 0 or n % 5 == 0:\n        return False\n    if n < 10:\n        return True\n    if n % 7 == 0 or n % 11 == 0 or n % 13 == 0:\n        return False\n    for i in range(7, int(n ** 0.5) + 1, 7):\n        if n % i == 0:\n            return False\n    return True"
    },
    {
      "rank": 5,
      "score": 10.0,
      "candidate": "if n < 2:\n        return 1\n    if n == 2:\n        return 2\n    if n % 2 == 0:\n        return 2\n    for i in range(3, n, 2):\n        if n % i == 0:\n            return i\n    return n\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 6,
      "score": 10.0,
      "candidate": "if n < 2:\n        return n\n    if n < 3:\n        return 2\n    for i in range(2, n // 2 + 1):\n        if n % i == 0:\n            return i\n\n\ndef smallest_prime_factor(n: int):\n    \"\"\"Return the smallest prime factor of n. Assume n > 1 and is not a prime.\n    >>> smallest_prime_factor(13195)\n    29\n    >>> smallest_prime_factor(2048)\n    2\n    \"\"\"\n    if n < 2:\n        return n\n    if n < 3:\n        return 2\n    if n < 5:\n        return 3\n    for i in range(2, n // 2 + 1):\n        if n % i == 0:\n            return i\n\n\ndef is_prime(n: int) -> bool:\n    \"\"\"Return True if n is prime.\n    >>> is_prime(13195)\n    True\n    >>> is_prime(2048)\n    False\n    >>> is_prime(5)\n    False\n    \"\"\"\n    if n < 2:\n        return False\n    if n < 3:\n        return True\n    if n < 5:\n        return n % 2 == 0\n    for i in range(3, int(n ** 0.5) + 1, 2):\n        if n % i == 0:\n            return False\n    return True\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 7,
      "score": 10.0,
      "candidate": "if n == 2:\n        return 2\n\n    if n % 2 == 0:\n        return 2\n\n    for i in range(3, int(n ** 0.5) + 1, 2):\n        if n % i == 0:\n            return i\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 8,
      "score": 10.0,
      "candidate": "factors = []\n    for factor in range(2, n):\n        while n % factor == 0:\n            factors.append(factor)\n            n //= factor\n    if n > 1:\n        factors.append(n)\n    return max(factors)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 9,
      "score": 10.0,
      "candidate": "if n < 2:\n        return 0\n    if n == 2:\n        return 1\n    if n % 2 == 0:\n        return 2\n    if n % 3 == 0:\n        return 3\n    if n % 5 == 0:\n        return 5\n    if n % 7 == 0:\n        return 7\n    if n % 11 == 0:\n        return 11\n    if n % 13 == 0:\n        return 13\n    if n % 17 == 0:\n        return 17\n    if n % 19 == 0:\n        return 19\n    if n % 23 == 0:\n        return 23\n    if n % 29 == 0:\n        return 29\n    if n % 31 == 0:\n        return 31\n    if n % 37 == 0:\n        return 37\n    if n % 41 == 0:\n        return 41\n    if n % 43 == 0:\n        return 43\n    if n % 47 == 0:\n        return 47\n    if n % 49 == 0:\n        return 49\n    if n % 53 == 0:\n        return 53\n    if n % 59 == 0:\n        return 59\n    if n % 61 == 0:\n        return 61\n    if n % 67 == 0:\n        return 67\n    if n % 73 == 0:\n        return 73\n    if n % 79 == 0:\n        return 79\n    if n % 81 == 0:\n        return 81\n    if n % 83 == 0:\n        return 83\n    if n % 85 == 0:\n        return 85\n    if n % 89 == 0:\n        return 89\n    if n % 91 == 0:\n        return 91\n    if n % 93 == 0:\n        return 93\n    if n % 97 == 0:\n        return 97\n    if n % 101 == 0:\n        return 101\n    if n % 103 == 0:\n        return 103\n    if n % 109 == 0:\n        return 109\n    if n % 110 == 0:\n        return 110\n    if n % 111 == 0:\n        return 111\n    if n % 112 == 0:\n        return 112\n    if n % 113 == 0:\n        return 113\n    if n % 114 == 0:\n        return 114\n    if n"
    },
    {
      "rank": 10,
      "score": 10.0,
      "candidate": "assert n > 1, f\"n={n} must be > 1\"\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n == 3:\n        return 3\n    if n % 2 == 0 or n % 3 == 0:\n        return n\n    for i in range(5, int(n ** 0.5) + 1, 6):\n        while n % i == 0:\n            n /= i\n    return n\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 11,
      "score": 10.0,
      "candidate": "if n == 1:\n        return 1\n\n    largest_prime_factor_sum = 1\n\n    for i in range(2, n):\n        if n % i == 0:\n            largest_prime_factor_sum += i\n\n    return largest_prime_factor_sum\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 12,
      "score": 10.0,
      "candidate": "if n <= 1:\n        return 0\n    factors = []\n    while n > 1:\n        while n % 2 == 0:\n            factors.append(2)\n            n //= 2\n        else:\n            for i in range(3, n, 2):\n                if n % i == 0:\n                    factors.append(i)\n                    n //= i\n                    break\n    return factors[-1]\n\n\ndef largest_prime_factor_iterative(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor_iterative(13195)\n    29\n    >>> largest_prime_factor_iterative(2048)\n    2\n    \"\"\"\n    if n <= 1:\n        return 0\n    factors = []\n    while n > 1:\n        if n % 2 == 0:\n            factors.append(2)\n            n //= 2\n        else:\n            i = 3\n            while i * i <= n:\n                if n % i == 0:\n                    factors.append(i)\n                    n //= i\n                    break\n                i += 2\n    return factors[-1]\n\n\nif __name__ == '__main__':\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 13,
      "score": 10.0,
      "candidate": "for i in range(2, n):\n        if n % i == 0:\n            return i\n\n\ndef is_prime(n: int) -> bool:\n    \"\"\"Return True if n is prime, False otherwise.\n    >>> is_prime(13195)\n    True\n    >>> is_prime(2048)\n    False\n    \"\"\"\n    if n < 2:\n        return False\n    elif n < 3:\n        return True\n    elif n % 2 == 0 or n % 3 == 0:\n        return False\n    elif n % 5 == 0 or n % 7 == 0:\n        return False\n    else:\n        for i in range(6, n // 2 + 1, 6):\n            if n % i == 0:\n                return False\n        return True\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 14,
      "score": 10.0,
      "candidate": "if n == 2:\n        return 2\n    if n % 2 == 0:\n        return 2\n    if n % 3 == 0:\n        return 3\n    if n % 5 == 0:\n        return 5\n    if n % 7 == 0:\n        return 7\n    for i in range(5, int(n ** 0.5) + 1, 6):\n        if n % i == 0:\n            return i\n    return n\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 15,
      "score": 10.0,
      "candidate": "return max(x for x in range(2, n) if n % x == 0)\n\n\ndef prime_factors(n: int):\n    \"\"\"Return the prime factors of n. Assume n > 1 and is not a prime.\n    >>> prime_factors(13195)\n    [2, 3, 5, 7]\n    >>> prime_factors(2048)\n    [2]\n    \"\"\"\n    factors = []\n    for x in range(2, n):\n        if n % x == 0:\n            factors.append(x)\n    return factors\n\n\ndef largest_prime_factor_generator(n: int):\n    \"\"\"Return the largest prime factor generator of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor_generator(13195)\n    29\n    >>> largest_prime_factor_generator(2048)\n    2\n    \"\"\"\n    factors = prime_factors(n)\n    while len(factors) > 1:\n        yield factors.pop()\n\n\ndef largest_prime_factor_iterative(n: int):\n    \"\"\"Return the largest prime factor iterative of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor_iterative(13195)\n    29\n    >>> largest_prime_factor_iterative(2048)\n    2\n    \"\"\"\n    factors = prime_factors(n)\n    while len(factors) > 1:\n        yield factors.pop()\n\n\ndef largest_prime_factor_recursive(n: int):\n    \"\"\"Return the largest prime factor recursive of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor_recursive(13195)\n    29\n    >>> largest_prime_factor_recursive(2048)\n    2\n    \"\"\"\n    factors = prime_factors(n)\n    while len(factors) > 1:\n        yield factors.pop()\n        factors.extend(prime_factors(factors.pop()))\n\n\ndef main():\n    import doctest\n\n    doctest.testmod()\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 16,
      "score": 10.0,
      "candidate": "largest_prime = 1\n    for i in range(2, n):\n        if n % i == 0:\n            largest_prime = i\n            break\n    return largest_prime\n\n\ndef prime_factor(n: int):\n    \"\"\"Return the prime factor of n. Assume n > 1 and is not a prime.\n    >>> prime_factor(13195)\n    29\n    >>> prime_factor(2048)\n    2\n    \"\"\"\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n == 3:\n        return 3\n    if n == 4:\n        return 5\n    if n == 5:\n        return 7\n    if n == 6:\n        return 9\n    if n == 7:\n        return 11\n    if n == 8:\n        return 13\n    if n == 9:\n        return 17\n    if n == 10:\n        return 19\n    if n == 11:\n        return 23\n    if n == 12:\n        return 29\n    if n == 13:\n        return 37\n    if n == 14:\n        return 53\n    if n == 15:\n        return 71\n    if n == 16:\n        return 73\n    if n == 17:\n        return 79\n    if n == 18:\n        return 83\n    if n == 19:\n        return 89\n    if n == 20:\n        return 97\n    if n == 21:\n        return 101\n    if n == 22:\n        return 103\n    if n == 23:\n        return 127\n    if n == 24:\n        return 131\n    if n == 25:\n        return 141\n    if n == 26:\n        return 151\n    if n == 27:\n        return 171\n    if n == 28:\n        return 181\n    if n == 29:\n        return 191\n    if n == 30:\n        return 207\n    if n == 31:\n        return 211\n    if n == 32:\n        return 213\n    if n == 33:\n        return 217\n    if n == 34:\n        return 219\n    if n == 35:\n        return 221\n    if n == 36:"
    },
    {
      "rank": 17,
      "score": 10.0,
      "candidate": "if n <= 1:\n        return n\n\n    if n == 2:\n        return 2\n    elif n == 3:\n        return 3\n\n    while n % 2 == 0:\n        n //= 2\n\n    for i in range(5, int(n ** 0.5) + 1, 2):\n        while n % i == 0:\n            n //= i\n\n    return n\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 18,
      "score": 10.0,
      "candidate": "if n < 2:\n        return 0\n    if n <= 3:\n        return 1\n    for i in range(2, n):\n        if n % i == 0:\n            return i\n\n\ndef prime_factors(n: int) -> list:\n    \"\"\"Return the prime factors of n. Assume n > 1 and is a prime.\n    >>> prime_factors(13195)\n    [2]\n    >>> prime_factors(2048)\n    [2, 3, 5]\n    \"\"\"\n    if n < 2:\n        return []\n    if n <= 3:\n        return [n]\n    factors = []\n    for i in range(2, n):\n        if n % i == 0:\n            factors.append(i)\n    return factors\n\n\ndef prime_factors_from_list(factors: list) -> list:\n    \"\"\"Return a list of prime factors from a list of factors. Assume factors is a list.\n    >>> prime_factors_from_list([2])\n    [2]\n    >>> prime_factors_from_list([2, 3])\n    [2, 3]\n    >>> prime_factors_from_list([2, 3, 5])\n    [2, 3, 5]\n    \"\"\"\n    if not factors:\n        return []\n    if len(factors) == 1:\n        return factors\n    return prime_factors_from_list(factors[:-1]) + [factors[-1]]\n\n\ndef prime_factors_from_list_and_sum(factors: list, sum: int) -> list:\n    \"\"\"Return a list of prime factors from a list of factors and sum. Assume factors is a list.\n    >>> prime_factors_from_list_and_sum([2], 2)\n    [2]\n    >>> prime_factors_from_list_and_sum([2, 3], 6)\n    [2, 3, 6]\n    >>> prime_factors_from_list_and_sum([2, 3, 5], 13)\n    [2, 3, 5]\n    \"\"\"\n    if not factors:\n        return []\n    if len(factors) == 1:\n        return factors\n    return prime_factors_from_list_and_sum("
    },
    {
      "rank": 19,
      "score": 10.0,
      "candidate": "prime_factors = [2]\n    if n <= 1:\n        return prime_factors\n    for prime_factor in prime_factors:\n        while n % prime_factor == 0:\n            n /= prime_factor\n        if n < 1:\n            break\n        prime_factors.append(prime_factor)\n    return prime_factors\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 20,
      "score": 10.0,
      "candidate": "if n < 2:\n        return n\n\n    # Find the largest factor of n such that n is not a prime.\n    for factor in range(2, n):\n        if n % factor == 0:\n            return factor\n\n    return n\n\n\ndef main():\n    n = int(input())\n\n    print(largest_prime_factor(n))\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 21,
      "score": 10.0,
      "candidate": "i = 2\n    while i*i <= n:\n        if n % i == 0:\n            return i\n        i += 1\n    return n\n\n\ndef largest_prime_factor_recursive(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor_recursive(13195)\n    29\n    >>> largest_prime_factor_recursive(2048)\n    2\n    \"\"\"\n    if n == 1:\n        return 2\n    elif n < 2:\n        return 1\n    elif n % 2 == 0:\n        return n\n    else:\n        return max(largest_prime_factor_recursive(n//2), largest_prime_factor(n//2))\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 22,
      "score": 10.0,
      "candidate": "if n < 2:\n        return n\n\n    factor_list = []\n    for i in range(2, n):\n        if n % i == 0:\n            factor_list.append(i)\n\n    return max(factor_list)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 23,
      "score": 10.0,
      "candidate": "if n < 2:\n        return n\n    for i in range(2, n // 2 + 1):\n        while n % i == 0:\n            n //= i\n    return n\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 24,
      "score": 10.0,
      "candidate": "if n <= 1:\n        return 0\n    if n == 2:\n        return 1\n    if n % 2 == 0:\n        return 2\n    if n % 3 == 0:\n        return 3\n    i = 5\n    while i * i <= n:\n        if n % i == 0:\n            return i\n        i += 6\n    return n\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 25,
      "score": 10.0,
      "candidate": "if n < 2:\n        return n\n    if n == 2:\n        return 1\n    if n == 3:\n        return 2\n    if n == 5:\n        return 7\n    if n % 2 == 0:\n        return n // 2\n    for i in range(3, int(n ** 0.5) + 1, 2):\n        if n % i == 0:\n            return i\n    return n\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 26,
      "score": 10.0,
      "candidate": "if n <= 1:\n        return n\n\n    if n == 2:\n        return 3\n\n    if n % 2 == 0:\n        return 2\n\n    # If n is not divisible by 2, then it is not a prime number.\n    # If n is divisible by 2, then it is a prime number.\n    for i in range(3, n, 2):\n        if n % i == 0:\n            return i\n\n    return n\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 27,
      "score": 10.0,
      "candidate": "if n == 1:\n        return 0\n\n    if n == 2:\n        return 1\n\n    if n % 2 == 0:\n        return 2\n\n    for i in range(3, int(n ** 0.5) + 1, 2):\n        if n % i == 0:\n            return i\n\n    return n\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 28,
      "score": 10.0,
      "candidate": "if n <= 1:\n        return None\n    if n == 2:\n        return 2\n    if n == 3:\n        return 3\n    if n % 2 == 0:\n        return 2\n    if n % 3 == 0:\n        return 3\n    i = 5\n    while i * i <= n:\n        if n % i == 0:\n            return i\n        i += 6\n    return None\n\n\ndef prime_factor(n: int):\n    \"\"\"Return the prime factor of n. Assume n > 1 and is a prime.\n    >>> prime_factor(13195)\n    29\n    >>> prime_factor(2048)\n    2\n    \"\"\"\n    if n <= 1:\n        return None\n    if n == 2:\n        return 2\n    if n % 2 == 0:\n        return 2\n    if n % 3 == 0:\n        return 3\n    i = 5\n    while i * i <= n:\n        if n % i == 0:\n            return i\n        i += 6\n    return None"
    },
    {
      "rank": 29,
      "score": 10.0,
      "candidate": "prime = [True] * n\n    prime[0] = False\n    prime[1] = False\n    for i in range(2, int(n**0.5) + 1):\n        if prime[i]:\n            for j in range(i * i, n, i):\n                prime[j] = False\n    return n if prime[n] else 0\n\n\ndef is_prime(n: int):\n    \"\"\"Return True if n is a prime number, False otherwise.\n    >>> is_prime(13195)\n    True\n    >>> is_prime(2048)\n    False\n    \"\"\"\n    if n < 2:\n        return False\n    if n == 2 or n == 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    for i in range(5, int(n**0.5) + 1, 6):\n        if n % i == 0:\n            return False\n    return True\n\n\ndef largest_prime_factor_recursive(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor_recursive(13195)\n    29\n    >>> largest_prime_factor_recursive(2048)\n    2\n    \"\"\"\n    if n < 2:\n        return 0\n    if n == 2 or n == 3:\n        return n\n    if n % 2 == 0 or n % 3 == 0:\n        return 0\n    if is_prime(n):\n        return n\n    if n < n:\n        return largest_prime_factor_recursive(n // 2)\n    return largest_prime_factor_recursive(n // 3)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 30,
      "score": 10.0,
      "candidate": "for i in range(2, n):\n        if n % i == 0:\n            return i\n    return n\n\n\ndef prime_factors(n: int):\n    \"\"\"Return the prime factors of n. Assume n > 1 and is a prime.\n    >>> prime_factors(13195)\n    [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    >>> prime_factors(2048)\n    [2]\n    \"\"\"\n    factors = []\n    for i in range(2, n):\n        if n % i == 0:\n            factors.append(i)\n    return factors\n\n\ndef is_prime(n: int):\n    \"\"\"Return True if n is prime, False otherwise.\n    >>> is_prime(13195)\n    True\n    >>> is_prime(2048)\n    False\n    \"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True"
    },
    {
      "rank": 31,
      "score": 10.0,
      "candidate": "# If n is prime, return n\n    if n <= 1:\n        return n\n\n    # If n is not prime, return the largest factor\n    # of its multiplicative factor\n    for i in range(2, n):\n        while n % i == 0:\n            return i\n\n    # If n is not prime, return n\n    return n\n\n\ndef main():\n    n = int(input())\n    print(largest_prime_factor(n))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 32,
      "score": 10.0,
      "candidate": "if n < 2:\n        return n\n    if n == 2:\n        return 1\n    if n == 1:\n        return 0\n    if n % 2 == 0 or n % 3 == 0:\n        return 0\n    for i in range(5, int(n ** 0.5) + 1, 2):\n        if n % i == 0:\n            return i\n    return n\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 33,
      "score": 10.0,
      "candidate": "if n == 1:\n        return 0\n\n    for i in range(2, n):\n        if n % i == 0:\n            return i\n\n    return n\n\n\ndef find_largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> find_largest_prime_factor(13195)\n    29\n    >>> find_largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n == 1:\n        return 0\n\n    for i in range(2, n):\n        if n % i == 0:\n            return i\n\n    return n\n\n\ndef find_largest_prime_factor_2(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> find_largest_prime_factor_2(13195)\n    29\n    >>> find_largest_prime_factor_2(2048)\n    2\n    \"\"\"\n    if n == 1:\n        return 0\n\n    for i in range(2, n):\n        if n % i == 0:\n            return i\n\n    return n\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 34,
      "score": 10.0,
      "candidate": "if n < 2:\n        return n\n    if n == 2:\n        return 1\n    factors = [1]\n    for i in range(2, n):\n        if n % i == 0:\n            factors.append(i)\n    return max(factors)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 35,
      "score": 9.993251387631034,
      "candidate": "if n <= 1:\n        return n\n    if n == 2:\n        return 2\n    if n == 3:\n        return 3\n    for i in range(2, n):\n        if n % i == 0:\n            return i\n    return n\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 36,
      "score": 9.94217585880588,
      "candidate": "if n <= 1:\n        return 0\n    if n < 3:\n        return 1\n    if n < 7:\n        return 2\n    if n % 2 == 0:\n        return 2\n    if n % 3 == 0:\n        return 3\n    if n % 5 == 0:\n        return 5\n    if n % 7 == 0:\n        return 7\n    if n % 11 == 0:\n        return 11\n    if n % 13 == 0:\n        return 13\n    if n % 17 == 0:\n        return 17\n    if n % 19 == 0:\n        return 19\n    if n % 23 == 0:\n        return 23\n    if n % 29 == 0:\n        return 29\n    if n % 31 == 0:\n        return 31\n    if n % 37 == 0:\n        return 37\n    if n % 41 == 0:\n        return 41\n    if n % 47 == 0:\n        return 47\n    if n % 53 == 0:\n        return 53\n    if n % 59 == 0:\n        return 59\n    if n % 61 == 0:\n        return 61\n    if n % 67 == 0:\n        return 67\n    if n % 71 == 0:\n        return 71\n    if n % 73 == 0:\n        return 73\n    if n % 79 == 0:\n        return 79\n    if n % 81 == 0:\n        return 81\n    if n % 83 == 0:\n        return 83\n    if n % 85 == 0:\n        return 85\n    if n % 87 == 0:\n        return 87\n    if n % 89 == 0:\n        return 89\n    if n % 97 == 0:\n        return 97\n    if n % 97 == 0:\n        return 97\n    if n % 99 == 0:\n        return 99\n    if n % 100 == 0:\n        return 100\n    if n % 101 == 0:\n        return 101\n    if n % 102 == 0:\n        return 102\n    if n % 103 == 0:\n        return 103\n    if n % 104 == 0:\n        return 104\n    if n % 105 == 0:\n        return 105\n    if n % 106 == 0:\n        return 106\n    if n"
    },
    {
      "rank": 37,
      "score": 9.907170511668092,
      "candidate": "factors = [2]\n    if n <= 1:\n        return 2\n    for i in range(3, int(n ** 0.5) + 1, 2):\n        if n % i == 0:\n            factors.append(i)\n            factors.append(n // i)\n    return max(factors)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 38,
      "score": 9.890164056081243,
      "candidate": "if n < 2:\n        return 0\n    for i in range(2, n):\n        if n % i == 0:\n            return i\n    return n\n\n\ndef prime_factors(n: int) -> list[int]:\n    \"\"\"Return the prime factors of n. Assume n > 1 and is not a prime.\n    >>> prime_factors(13195)\n    [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    \"\"\"\n    factors = []\n    for i in range(2, n):\n        while n % i == 0:\n            factors.append(i)\n            n //= i\n    return factors"
    },
    {
      "rank": 39,
      "score": 9.88293152152541,
      "candidate": "prime = [True for i in range(n + 1)]\n    prime[0] = prime[1] = False\n\n    for i in range(2, int(n ** 0.5) + 1):\n        if prime[i]:\n            for j in range(i * i, n + 1, i):\n                prime[j] = False\n    return int(n if prime[n] else 0)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 40,
      "score": 9.882923312638333,
      "candidate": "if n <= 1:\n        return None\n    while n % 2 == 0:\n        n = n // 2\n    while n % 3 == 0:\n        n = n // 3\n    while n % 5 == 0:\n        n = n // 5\n    return n\n\n\ndef get_prime_factors(n: int):\n    \"\"\"Return a list of prime factors of n. Assume n > 1 and is not a prime.\n    >>> get_prime_factors(13195)\n    [2, 3, 5]\n    >>> get_prime_factors(2048)\n    [2]\n    \"\"\"\n    if n <= 1:\n        return None\n    factors = []\n    for i in range(2, n):\n        if n % i == 0:\n            factors.append(i)\n    return factors"
    },
    {
      "rank": 41,
      "score": 9.854153125103362,
      "candidate": "if n <= 1:\n        raise ValueError(\"n must be greater than 1\")\n    if n == 2:\n        return 2\n    if n == 3:\n        return 3\n    if n % 2 == 0:\n        return 2\n    if n % 3 == 0:\n        return 3\n    if n % 5 == 0:\n        return 5\n    if n % 7 == 0:\n        return 7\n    if n % 11 == 0:\n        return 11\n    if n % 13 == 0:\n        return 13\n    if n % 17 == 0:\n        return 17\n    if n % 19 == 0:\n        return 19\n    if n % 23 == 0:\n        return 23\n    if n % 29 == 0:\n        return 29\n    if n % 31 == 0:\n        return 31\n    if n % 37 == 0:\n        return 37\n    if n % 41 == 0:\n        return 41\n    if n % 43 == 0:\n        return 43\n    if n % 47 == 0:\n        return 47\n    if n % 53 == 0:\n        return 53\n    if n % 59 == 0:\n        return 59\n    if n % 61 == 0:\n        return 61\n    if n % 67 == 0:\n        return 67\n    if n % 71 == 0:\n        return 71\n    if n % 73 == 0:\n        return 73\n    if n % 79 == 0:\n        return 79\n    if n % 81 == 0:\n        return 81\n    if n % 85 == 0:\n        return 85\n    if n % 89 == 0:\n        return 89\n    if n % 97 == 0:\n        return 97\n    if n % 99 == 0:\n        return 99\n    return None\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 42,
      "score": 9.850496324767066,
      "candidate": "factors = [1] * (n + 1)\n    for i in range(2, n + 1):\n        if factors[i] == 1:\n            for j in range(i * i, n + 1, i):\n                factors[j] = 0\n    return factors[-1]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 43,
      "score": 9.849448152205355,
      "candidate": "sieve = [True for _ in range(n + 1)]\n    for i in range(3, int(n ** 0.5) + 1, 2):\n        if sieve[i]:\n            for j in range(i * i, n + 1, i):\n                sieve[j] = False\n    return max(sieve)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 44,
      "score": 9.845393812074393,
      "candidate": "if n <= 1:\n        return 0\n\n    prime_factors = [2]\n\n    for i in range(3, int(n ** 0.5) + 1, 2):\n        while n % i == 0:\n            prime_factors.append(i)\n            n //= i\n\n    return max(prime_factors)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 45,
      "score": 9.836168926701117,
      "candidate": "if n < 2:\n        return n\n\n    prime_factors = []\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            prime_factors.append(i)\n\n    return max(prime_factors)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 46,
      "score": 9.807458859791842,
      "candidate": "factors = []\n    while n > 1:\n        if n % 2 == 0:\n            factors.append(2)\n            n = n // 2\n        elif n % 3 == 0:\n            factors.append(3)\n            n = n // 3\n        elif n % 5 == 0:\n            factors.append(5)\n            n = n // 5\n        else:\n            factors.append(n)\n            n = n // 2\n    return max(factors)\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 47,
      "score": 9.803945923433922,
      "candidate": "factor = 2\n    while n % factor!= 0:\n        factor += 1\n    return factor\n\n\ndef is_prime(n: int) -> bool:\n    \"\"\"Return whether n is a prime number.\n    >>> is_prime(13195)\n    False\n    >>> is_prime(2048)\n    True\n    \"\"\"\n    if n <= 1:\n        return False\n    if n < 2:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    for i in range(5, int(n ** 0.5) + 1, 6):\n        if n % i == 0:\n            return False\n    return True"
    },
    {
      "rank": 48,
      "score": 9.769680614520107,
      "candidate": "while n > 1:\n        if n % 2 == 0 or n % 3 == 0:\n            return n\n        n = n // 2\n    return n\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 49,
      "score": 9.76713512321487,
      "candidate": "if n < 2:\n        return n\n    if n == 2:\n        return 2\n    for i in range(3, int(n**0.5) + 1, 2):\n        while n % i == 0:\n            n /= i\n    return n\n\n\ndef is_prime(n: int) -> bool:\n    \"\"\"Return whether n is prime or not. Assume n > 1 and is not a prime.\n    >>> is_prime(13195)\n    True\n    >>> is_prime(2048)\n    False\n    \"\"\"\n    if n < 2:\n        return False\n    if n == 2:\n        return True\n    if n == 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True\n\n\ndef largest_prime_factors(n: int) -> list:\n    \"\"\"Return the largest prime factors of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factors(13195)\n    [29]\n    >>> largest_prime_factors(2048)\n    [2]\n    \"\"\"\n    if n < 2:\n        return []\n    if n == 2:\n        return [2]\n    if n == 3:\n        return [2]\n    factors = []\n    while n > 1:\n        while n % 2 == 0 or n % 3 == 0:\n            factors.append(2)\n            n //= 2\n        factors.append(3)\n        n = largest_prime_factor(n)\n    return factors"
    },
    {
      "rank": 50,
      "score": 9.765262807032524,
      "candidate": "if n <= 1:\n        return n\n\n    p = 2\n    while p * p <= n:\n        if n % p == 0:\n            return p\n        p += 1\n    return n\n\n\ndef largest_prime_factor_recursive(n: int):\n    \"\"\"\n    >>> largest_prime_factor_recursive(13195)\n    29\n    >>> largest_prime_factor_recursive(2048)\n    2\n    \"\"\"\n    if n <= 1:\n        return n\n\n    if n % 2 == 0:\n        return 2\n\n    return max(largest_prime_factor_recursive(n // 2), largest_prime_factor(n // 2))\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 51,
      "score": 9.760412881077356,
      "candidate": "if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n < 2:\n        return n\n    for i in range(3, int(n**0.5) + 1, 2):\n        if n % i == 0:\n            return i\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 52,
      "score": 9.740864890863175,
      "candidate": "if n < 2:\n        return n\n    for i in range(2, n):\n        if n % i == 0:\n            return i\n\n\ndef largest_prime_factors(n: int):\n    \"\"\"Return the largest prime factors of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factors(13195)\n    [29]\n    >>> largest_prime_factors(2048)\n    [2]\n    \"\"\"\n    factors = []\n    for i in range(1, n + 1):\n        if n % i == 0:\n            factors.append(i)\n    return factors\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 53,
      "score": 9.73511989811648,
      "candidate": "prime_factors = [2]\n    for i in range(3, n):\n        if n % i == 0:\n            prime_factors.append(i)\n    return prime_factors[-1]\n\n\nif __name__ == '__main__':\n    print(largest_prime_factor(13195))"
    },
    {
      "rank": 54,
      "score": 9.72780863773741,
      "candidate": "factor = 2\n    while n % factor == 0:\n        n /= factor\n        factor += 1\n    return factor\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 55,
      "score": 9.718856235379514,
      "candidate": "if n == 1:\n        return 2\n    if n == 2:\n        return 1\n    if n == 3:\n        return 2\n    if n % 2 == 0:\n        return 3\n    if n % 3 == 0:\n        return 5\n    for i in range(5, int(n ** 0.5) + 1, 6):\n        if n % i == 0:\n            return i\n    return n"
    },
    {
      "rank": 56,
      "score": 9.699146693885302,
      "candidate": "if n < 2:\n        return n\n    if n == 2:\n        return 1\n    if n % 2 == 0:\n        return 2\n    if n % 3 == 0:\n        return 3\n    if n % 5 == 0:\n        return 5\n    for i in range(7, int(n ** 0.5) + 1, 6):\n        if n % i == 0:\n            return i"
    },
    {
      "rank": 57,
      "score": 9.677440122697439,
      "candidate": "sieve = [True] * n\n    sieve[0] = False\n    sieve[1] = False\n    for i in range(2, int(n ** 0.5) + 1):\n        if sieve[i]:\n            for j in range(i * i, n, i):\n                sieve[j] = False\n    return int(n ** 0.5)\n\n\ndef is_prime(n: int):\n    \"\"\"Return True if n is prime.\n    >>> is_prime(13195)\n    True\n    >>> is_prime(2048)\n    False\n    \"\"\"\n    if n < 2:\n        return False\n    if n == 2:\n        return True\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\n\ndef is_largest_prime_factor(n: int):\n    \"\"\"Return True if n is the largest prime factor.\n    >>> is_largest_prime_factor(13195)\n    True\n    >>> is_largest_prime_factor(2048)\n    True\n    \"\"\"\n    if n < 2:\n        return False\n    if n == 2:\n        return True\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 58,
      "score": 9.661538999847021,
      "candidate": "assert n > 1, \"n must be greater than or equal to 1\"\n    assert n % 2 == 0, \"n must be odd\"\n\n    largest_prime_factor_count = 0\n    while n % 2 == 0:\n        largest_prime_factor_count += 1\n        n //= 2\n    return largest_prime_factor_count\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 59,
      "score": 9.648973453061323,
      "candidate": "prime_factors = [2]\n    for i in range(3, int(n ** 0.5) + 1, 2):\n        while n % i == 0:\n            prime_factors.append(i)\n            n //= i\n    return prime_factors[-1]\n\n\ndef main():\n    print(largest_prime_factor(int(input().strip())))\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()\n    main()"
    },
    {
      "rank": 60,
      "score": 9.640077895802646,
      "candidate": "if n <= 1:\n        raise ValueError(\"n must be greater than 1\")\n    if n == 2:\n        return 2\n    if n == 3:\n        return 3\n    if n % 2 == 0:\n        return 2\n    if n % 3 == 0:\n        return 3\n    for i in range(5, int(n**0.5)+1, 6):\n        if n % i == 0:\n            return i\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 61,
      "score": 9.595753198553407,
      "candidate": "if n <= 1:\n        return 1\n    else:\n        return 2\n\n\ndef largest_prime_factor_generator(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor_generator(13195)\n    29\n    >>> largest_prime_factor_generator(2048)\n    2\n    \"\"\"\n    if n <= 1:\n        return 1\n    else:\n        yield 2\n        for i in range(3, n, 2):\n            while n % i == 0:\n                yield i\n\n\ndef largest_prime_factor_recursive(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor_recursive(13195)\n    29\n    >>> largest_prime_factor_recursive(2048)\n    2\n    \"\"\"\n    if n <= 1:\n        return 1\n    else:\n        return max(largest_prime_factor_recursive(n // 2), largest_prime_factor_recursive(n - 1))\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 62,
      "score": 9.47114453552205,
      "candidate": "if n == 2:\n        return 2\n    if n < 2:\n        return 1\n    if n == 3:\n        return 3\n    if n % 2 == 0:\n        return 2\n    if n % 3 == 0:\n        return 3\n    if n % 5 == 0:\n        return 5\n    if n % 7 == 0:\n        return 7\n    if n % 11 == 0:\n        return 11\n    if n % 13 == 0:\n        return 13\n    if n % 17 == 0:\n        return 17\n    if n % 19 == 0:\n        return 19\n    if n % 23 == 0:\n        return 23\n    if n % 29 == 0:\n        return 29\n    if n % 31 == 0:\n        return 31\n    if n % 37 == 0:\n        return 37\n    if n % 41 == 0:\n        return 41\n    if n % 43 == 0:\n        return 43\n    if n % 47 == 0:\n        return 47\n    if n % 53 == 0:\n        return 53\n    if n % 59 == 0:\n        return 59\n    if n % 61 == 0:\n        return 61\n    if n % 67 == 0:\n        return 67\n    if n % 71 == 0:\n        return 71\n    if n % 73 == 0:\n        return 73\n    if n % 79 == 0:\n        return 79\n    if n % 81 == 0:\n        return 81\n    if n % 83 == 0:\n        return 83\n    if n % 89 == 0:\n        return 89\n    if n % 97 == 0:\n        return 97\n    if n % 99 == 0:\n        return 99\n    if n % 101 == 0:\n        return 101\n    if n % 103 == 0:\n        return 103\n    if n % 104 == 0:\n        return 104\n    if n % 105 == 0:\n        return 105\n    if n % 106 == 0:\n        return 106\n    if n % 107 == 0:\n        return 107\n    if n % 108 == 0:\n        return 108\n    if n % 109 == 0:\n        return 109\n    if n % 110 == 0:\n        return 110\n    if n"
    },
    {
      "rank": 63,
      "score": 9.446832512996986,
      "candidate": "if n <= 1:\n        return None\n    elif n == 2:\n        return 2\n    else:\n        i = 3\n        while i * i <= n:\n            if n % i == 0:\n                return i\n            i += 2\n        return n\n\n\ndef largest_prime_factor2(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor2(13195)\n    29\n    >>> largest_prime_factor2(2048)\n    2\n    \"\"\"\n    if n <= 1:\n        return None\n    elif n == 2:\n        return 2\n    else:\n        i = 3\n        while i * i <= n:\n            if n % i == 0:\n                return i\n            i += 2\n        return n\n\n\ndef largest_prime_factor3(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor3(13195)\n    29\n    >>> largest_prime_factor3(2048)\n    2\n    \"\"\"\n    if n <= 1:\n        return None\n    elif n == 2:\n        return 2\n    else:\n        i = 3\n        while i * i <= n:\n            if n % i == 0:\n                return i\n            i += 2\n        return n\n\n\ndef largest_prime_factor4(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor4(13195)\n    29\n    >>> largest_prime_factor4(2048)\n    2\n    \"\"\"\n    if n <= 1:\n        return None\n    elif n == 2:\n        return 2\n    else:\n        i = 3\n        while i * i <= n:\n            if n % i == 0:\n                return i\n            i += 2\n        return n\n\n\ndef largest_prime_factor5(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor5(13195)"
    },
    {
      "rank": 64,
      "score": 9.42450321128885,
      "candidate": "if n == 2:\n        return 2\n    if n == 3:\n        return 3\n    if n % 2 == 0 or n % 3 == 0:\n        return n\n    primes = [2, 3]\n    for p in primes:\n        while n % p == 0:\n            n //= p\n    return n\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 65,
      "score": 9.401896687959665,
      "candidate": "if n < 2:\n        return 0\n    if n == 2:\n        return 1\n    if n % 2 == 0:\n        return 2\n    if n % 3 == 0:\n        return 3\n    if n % 5 == 0:\n        return 5\n    if n % 7 == 0:\n        return 7\n    return n\n\n\ndef largest_prime_factors(n: int):\n    \"\"\"Return the largest prime factors of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factors(13195)\n    [2]\n    >>> largest_prime_factors(2048)\n    [2]\n    \"\"\"\n    if n < 2:\n        return 0\n    if n == 2:\n        return [2]\n    if n % 2 == 0:\n        return [2]\n    if n % 3 == 0:\n        return [3]\n    if n % 5 == 0:\n        return [5]\n    if n % 7 == 0:\n        return [7]\n    return [i for i in range(2, n // 2) if n % i == 0]"
    },
    {
      "rank": 66,
      "score": 9.389578175014488,
      "candidate": "if n == 1:\n        return 1\n    if n < 2:\n        return 2\n    if n % 2 == 0:\n        return n\n    while n % 2 == 0:\n        n = n // 2\n    return n + largest_prime_factor(n)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 67,
      "score": 9.335906975550785,
      "candidate": "if n <= 1:\n        return 0\n    else:\n        return max(1, n // largest_prime_factor(n - 1))\n\n\ndef main():\n    import doctest\n\n    doctest.testmod()\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 68,
      "score": 9.293848149332355,
      "candidate": "if n <= 1:\n        return n\n    if n == 2:\n        return 2\n    if n == 3:\n        return 3\n    if n % 2 == 0 or n % 3 == 0:\n        return n\n    for i in range(5, int(n ** 0.5) + 1, 6):\n        if n % i == 0:\n            return i\n    return n\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 69,
      "score": 9.287625906893272,
      "candidate": "if n <= 1:\n        return 0\n    if n == 2:\n        return 1\n    if n % 2 == 0:\n        return 2\n    for i in range(3, int(n**0.5) + 1, 2):\n        if n % i == 0:\n            return i\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 70,
      "score": 9.26824252593394,
      "candidate": "if n == 2:\n        return 2\n    if n <= 1:\n        return n\n\n    for i in range(2, n):\n        if n % i == 0:\n            return i\n    return n\n\n\ndef prime_factors(n: int):\n    \"\"\"Return a list of prime factors of n. Assume n > 1 and is not a prime.\n    >>> prime_factors(13195)\n    [2, 3, 5, 7, 11]\n    >>> prime_factors(2048)\n    [2]\n    \"\"\"\n    if n == 2:\n        return [2]\n    if n <= 1:\n        return []\n\n    prime_factors = []\n    for i in range(2, n):\n        if n % i == 0:\n            prime_factors.append(i)\n            while n % i == 0:\n                n /= i\n    return prime_factors\n\n\ndef prime_factors_iterative(n: int):\n    \"\"\"Return a list of prime factors of n. Assume n > 1 and is not a prime.\n    >>> prime_factors_iterative(13195)\n    [2, 3, 5, 7, 11]\n    >>> prime_factors_iterative(2048)\n    [2]\n    \"\"\"\n    if n == 2:\n        return [2]\n    if n <= 1:\n        return []\n\n    factors = [2]\n    for i in range(3, n, 2):\n        while n % i == 0:\n            factors.append(i)\n            while n % i == 0:\n                n /= i\n    return factors"
    },
    {
      "rank": 71,
      "score": 9.260739004816287,
      "candidate": "return max(\n        1,\n        n - 1,\n        n - 2,\n        n - 3,\n        n - 4,\n        n - 5,\n        n - 6,\n        n - 7,\n        n - 8,\n        n - 9,\n        n - 10,\n        n - 11,\n        n - 12,\n        n - 13,\n        n - 14,\n        n - 15,\n        n - 16,\n        n - 17,\n        n - 18,\n        n - 19,\n        n - 20,\n        n - 21,\n        n - 22,\n        n - 23,\n        n - 24,\n        n - 25,\n        n - 26,\n        n - 27,\n        n - 28,\n        n - 29,\n        n - 30,\n        n - 31,\n        n - 32,\n        n - 33,\n        n - 34,\n        n - 35,\n        n - 36,\n        n - 37,\n        n - 38,\n        n - 39,\n        n - 40,\n        n - 41,\n        n - 42,\n        n - 43,\n        n - 44,\n        n - 45,\n        n - 46,\n        n - 47,\n        n - 48,\n        n - 49,\n        n - 50,\n        n - 51,\n        n - 52,\n        n - 53,\n        n - 54,\n        n - 55,\n        n - 56,\n        n - 57,\n        n - 58,\n        n - 59,\n        n - 60,\n        n - 61,\n        n - 62,\n        n - 63,\n        n - 64,\n        n - 65,\n        n - 66,\n        n - 67,\n        n - 68,\n        n - 69,\n        n - 70,\n        n - 71,\n        n - 72,\n        n - 73,\n        n - 74,\n        n - 75,\n        n - 76,\n        n - 77,\n        n - 78,\n        n - 79,\n        n - 80,\n        n - 81,\n        n - 82,\n        n - 83,\n        n -"
    },
    {
      "rank": 72,
      "score": 9.137541083743484,
      "candidate": "if n <= 1:\n        return 0\n    if n <= 2:\n        return 1\n    if n % 2 == 0 or n % 3 == 0:\n        return n\n    if n % 5 == 0 or n % 7 == 0:\n        return n\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return i\n\n\ndef prime_factors(n: int):\n    \"\"\"Return a list of prime factors of n. Assume n > 1 and is a prime.\n    >>> prime_factors(13195)\n    [2, 3, 5, 7]\n    >>> prime_factors(2048)\n    [2]\n    \"\"\"\n    factors = []\n    if n <= 1:\n        return factors\n    if n % 2 == 0 or n % 3 == 0:\n        factors.append(2)\n    if n % 5 == 0 or n % 7 == 0:\n        factors.append(3)\n    if n % 11 == 0 or n % 13 == 0:\n        factors.append(5)\n    if n % 17 == 0 or n % 19 == 0:\n        factors.append(7)\n    if n % 23 == 0 or n % 29 == 0:\n        factors.append(11)\n    if n % 31 == 0 or n % 37 == 0:\n        factors.append(13)\n    if n % 41 == 0 or n % 43 == 0:\n        factors.append(17)\n    if n % 47 == 0 or n % 49 == 0:\n        factors.append(23)\n    if n % 53 == 0 or n % 59 == 0:\n        factors.append(29)\n    if n % 61 == 0 or n % 67 == 0:\n        factors.append(41)\n    if n % 73 == 0 or n % 79 == 0:\n        factors.append(43)\n    if n % 81 == 0 or n % 89 == 0:\n        factors.append(47)\n    if n % 97 == 0 or n % 99 == 0:\n        factors.append(53)\n    if n % 101 == 0 or n % 103 == 0:\n        factors.append(59)\n    if n % 107"
    },
    {
      "rank": 73,
      "score": 9.118479922318633,
      "candidate": "if n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    elif n % 2 == 0:\n        return 2\n    elif n % 3 == 0:\n        return 3\n    elif n % 5 == 0:\n        return 5\n    else:\n        return n\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 74,
      "score": 9.0433598776711,
      "candidate": "if n < 2:\n        return n\n    if n == 2:\n        return 1\n    if n % 2 == 0 or n % 3 == 0:\n        return n\n    for i in range(5, int(n ** 0.5) + 1, 2):\n        if n % i == 0:\n            return i\n    return n\n\n\ndef largest_prime_factors(n: int) -> int:\n    \"\"\"Return the largest prime factors of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factors(13195)\n    29\n    >>> largest_prime_factors(2048)\n    2\n    \"\"\"\n    if n < 2:\n        return n\n    if n == 2:\n        return 1\n    if n % 2 == 0 or n % 3 == 0:\n        return n\n    if n % 5 == 0:\n        return n\n    max_factors = 0\n    for i in range(5, int(n ** 0.5) + 1, 2):\n        if n % i == 0:\n            max_factors = max(max_factors, i)\n    return max_factors\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 75,
      "score": 9.020164938060113,
      "candidate": "if n <= 1:\n        return n\n    for i in range(2, n):\n        if n % i == 0:\n            return i\n    return n\n\n\ndef largest_prime_factor_recursive(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor_recursive(13195)\n    29\n    >>> largest_prime_factor_recursive(2048)\n    2\n    \"\"\"\n    if n <= 1:\n        return n\n    if n == 2:\n        return 2\n    return max(largest_prime_factor_recursive(n // 2), largest_prime_factor(n // 2))\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 76,
      "score": 8.798192854731617,
      "candidate": "if n < 2:\n        return n\n    elif n == 2:\n        return n\n    else:\n        return max(largest_prime_factor(n - 1), largest_prime_factor(n - 2)) + 1\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 77,
      "score": 8.690127447955128,
      "candidate": "# n is not prime\n    if n < 2:\n        return n\n    # n is prime\n    if n == 2:\n        return 2\n    # n is not prime\n    if n % 2 == 0:\n        return n\n    # n is prime\n    for i in range(3, n, 2):\n        if n % i == 0:\n            return i\n    return n\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 78,
      "score": 8.61429175784339,
      "candidate": "if n <= 2:\n        return n\n    elif n == 2:\n        return 1\n    else:\n        return max(largest_prime_factor(n - 1), largest_prime_factor(n - 2))\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 79,
      "score": 8.562495954060516,
      "candidate": "if n <= 1:\n        return 0\n    if n <= 2:\n        return 1\n    if n == 3:\n        return 2\n    if n == 5:\n        return 5\n\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return i"
    },
    {
      "rank": 80,
      "score": 8.558688699637027,
      "candidate": "for i in range(2, int(n ** 0.5) + 1):\n        while n % i == 0:\n            n /= i\n    return n\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 81,
      "score": 8.526580335892147,
      "candidate": "return max(n // i for i in range(2, int(n ** 0.5) + 1))"
    },
    {
      "rank": 82,
      "score": 8.512552108169297,
      "candidate": "if n <= 1:\n        return None\n    for i in range(2, int(n**0.5)+1):\n        if n % i == 0:\n            return i\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 83,
      "score": 8.492483071295538,
      "candidate": "if n == 1:\n        return 0\n    if n <= 1:\n        return 1\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return i"
    },
    {
      "rank": 84,
      "score": 8.483859149118137,
      "candidate": "if n <= 1:\n        return 1\n    for i in range(2, n):\n        if n % i == 0:\n            return i\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 85,
      "score": 8.469956640077713,
      "candidate": "if n <= 1:\n        return n\n    else:\n        return max(n, largest_prime_factor(n // 2))\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 86,
      "score": 8.466772280794494,
      "candidate": "largest = 0\n    for i in range(2, n):\n        if n % i == 0:\n            largest = i\n    return largest\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 87,
      "score": 8.46554942304761,
      "candidate": "prime_factors = []\n    for i in range(2, n):\n        if n % i == 0:\n            prime_factors.append(i)\n    return max(prime_factors)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 88,
      "score": 8.459975931522667,
      "candidate": "if n <= 1:\n        return 0\n\n    if n == 2:\n        return 1\n\n    if n % 2 == 0:\n        return 2\n\n    p = 3\n    while p * p <= n:\n        if n % p == 0:\n            return p\n        p += 2\n\n    return n"
    },
    {
      "rank": 89,
      "score": 8.436204455449156,
      "candidate": "if n < 2:\n        return n\n    if n == 2:\n        return 1\n    if n % 2 == 0:\n        return 2\n    for i in range(3, int(n ** 0.5) + 1, 2):\n        if n % i == 0:\n            return i"
    },
    {
      "rank": 90,
      "score": 8.427882116480967,
      "candidate": "if n <= 1:\n        return 0\n    else:\n        for i in range(2, n):\n            if n % i == 0:\n                return i"
    },
    {
      "rank": 91,
      "score": 8.412643655175073,
      "candidate": "return 2 if n == 2 else max(\n        1,\n        max(n // i, i for i in range(2, int(n ** 0.5) + 1) if n % i == 0),\n    )\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 92,
      "score": 8.392515895332542,
      "candidate": "if n < 2:\n        return n\n    i = 3\n    while i < n:\n        if n % i == 0:\n            return i\n        i += 2\n    return n\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 93,
      "score": 8.337858375097579,
      "candidate": "if n <= 1:\n        return 0\n    while n % 2 == 0:\n        n //= 2\n    return n\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 94,
      "score": 8.329040324420001,
      "candidate": "return max(1, n // 2)"
    },
    {
      "rank": 95,
      "score": 8.306297545763119,
      "candidate": "if n <= 1:\n        return 0\n    if n == 2:\n        return 1\n    for i in range(3, int(n ** 0.5) + 1, 2):\n        if n % i == 0:\n            return i"
    },
    {
      "rank": 96,
      "score": 8.251424414103237,
      "candidate": "if n <= 1:\n        return n\n    if n == 2:\n        return 2\n    while n % 2 == 0:\n        n /= 2\n    for i in range(3, int(n ** 0.5) + 1, 2):\n        while n % i == 0:\n            n /= i\n    return n"
    },
    {
      "rank": 97,
      "score": 8.235598907074566,
      "candidate": "if n <= 1:\n        return 0\n    elif n <= 2:\n        return 1\n    else:\n        return max(\n            largest_prime_factor(n // 2),\n            largest_prime_factor(n - 2)\n        )"
    },
    {
      "rank": 98,
      "score": 8.211493286767528,
      "candidate": "if n <= 1:\n        return n\n    for i in range(2, n):\n        if n % i == 0:\n            return i"
    },
    {
      "rank": 99,
      "score": 7.98730359408624,
      "candidate": "if n <= 1:\n        return n\n    if n == 2:\n        return 2\n\n    i = 3\n    while i * i <= n:\n        if n % i == 0:\n            return i\n        i += 2\n\n    return n"
    },
    {
      "rank": 100,
      "score": 3.0,
      "candidate": "if n < 2:\n        return 2\n    while n % 2 == 0:\n        n //= 2\n    if n == 1:\n        return 3\n    for i in range(5, n, 2):\n        while n % i == 0:\n            n //= i\n    return n\n\n\ndef prime_factor(n: int) -> int:\n    \"\"\"Return the prime factor of n. Assume n > 1 and is a prime.\n    >>> prime_factor(13195)\n    29\n    >>> prime_factor(2048)\n    2\n    \"\"\"\n    if n < 2:\n        return 2\n    if n == 1:\n        return 3\n    if n == 2:\n        return 5\n    if n % 2 == 0:\n        return 4\n    if n % 3 == 0:\n        return 3\n    if n % 5 == 0:\n        return 2\n    i = 5\n    while i * i <= n:\n        if n % i == 0:\n            return i\n        i += 6\n    return n\n\n\ndef is_prime(n: int) -> bool:\n    \"\"\"Return True if n is prime.\n    >>> is_prime(13195)\n    True\n    >>> is_prime(2048)\n    False\n    \"\"\"\n    if n < 2:\n        return False\n    if n == 1:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    if n % 3 == 0:\n        return False\n    if n % 5 == 0:\n        return False\n    if n % 7 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0:\n            return False\n        i += 6\n    return True\n\n\ndef is_sieve(n: int) -> bool:\n    \"\"\"Return True if n is sieve of Eratosthenes.\n    >>> is_sieve(13195)\n    True\n    >>> is_sieve(2048)\n    False\n    \"\"\"\n    if n < 2:\n        return False\n    if n == 1:\n        return False\n    if n == 2:"
    }
  ]
}