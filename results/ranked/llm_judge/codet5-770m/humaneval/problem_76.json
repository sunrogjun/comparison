{
  "timestamp": "2025-09-14T11:49:17.073698",
  "method": "improved_llm_judge",
  "judge_model": "codellama/CodeLlama-7b-Python-hf",
  "target_model": "codet5-770m",
  "dataset": "humaneval",
  "problem_number": 76,
  "total_candidates": 100,
  "results": [
    {
      "rank": 1,
      "score": 10.0,
      "candidate": "if x == 1:\n        return True\n    elif x % n == 0:\n        return is_simple_power(x // n, n)\n    return False\n\n\nprint(is_simple_power(1, 4))\nprint(is_simple_power(2, 2))\nprint(is_simple_power(8, 2))\nprint(is_simple_power(3, 2))\nprint(is_simple_power(3, 1))\nprint(is_simple_power(5, 3))"
    },
    {
      "rank": 2,
      "score": 10.0,
      "candidate": "if x==0:\n        return False\n    if n==1:\n        return True\n    if x%n==0:\n        return is_simple_power(x//n,n)\n    else:\n        return False\n\nprint(is_simple_power(1,4))\nprint(is_simple_power(2,2))\nprint(is_simple_power(8,2))\nprint(is_simple_power(3,2))\nprint(is_simple_power(3,1))\nprint(is_simple_power(5,3))"
    },
    {
      "rank": 3,
      "score": 10.0,
      "candidate": "if n == 1:\n        return True\n    elif x == 1:\n        return False\n    elif x == 0:\n        return False\n    else:\n        return (is_simple_power(x/n, n-1) and is_simple_power(x, n-1))\n\nprint(is_simple_power(1, 4))\nprint(is_simple_power(2, 2))\nprint(is_simple_power(8, 2))\nprint(is_simple_power(3, 2))\nprint(is_simple_power(3, 1))\nprint(is_simple_power(5, 3))"
    },
    {
      "rank": 4,
      "score": 10.0,
      "candidate": "if x == 1:\n        return True\n    elif x == 2:\n        return True\n    elif x == 8:\n        return True\n    elif x == 3:\n        return False\n    elif x == 5:\n        return False\n    else:\n        return False\n\n\nif __name__ == \"__main__\":\n    print(is_simple_power(1, 4))\n    print(is_simple_power(2, 2))\n    print(is_simple_power(8, 2))\n    print(is_simple_power(3, 2))\n    print(is_simple_power(3, 1))\n    print(is_simple_power(5, 3))"
    },
    {
      "rank": 5,
      "score": 10.0,
      "candidate": "return n**x == x"
    },
    {
      "rank": 6,
      "score": 10.0,
      "candidate": "if n == 1:\n        return x == 1\n    if n == 0:\n        return False\n\n    if n == 1:\n        return x % n == 0\n    if n == 2:\n        return x % n == 0 and x % n == 1\n    if n % 2 == 0:\n        return is_simple_power(x, n//2)\n    else:\n        return is_simple_power(x, n//2) and x % n == 0\n\n\nprint(is_simple_power(1, 4))\nprint(is_simple_power(2, 2))\nprint(is_simple_power(8, 2))\nprint(is_simple_power(3, 2))\nprint(is_simple_power(3, 1))\nprint(is_simple_power(5, 3))"
    },
    {
      "rank": 7,
      "score": 10.0,
      "candidate": "return x == n**int(x)\n\n\nif __name__ == \"__main__\":\n    print(is_simple_power(1, 4))\n    print(is_simple_power(2, 2))\n    print(is_simple_power(8, 2))\n    print(is_simple_power(3, 2))\n    print(is_simple_power(3, 1))\n    print(is_simple_power(5, 3))"
    },
    {
      "rank": 8,
      "score": 10.0,
      "candidate": "if n == 1:\n        return x == 1\n    if x == 0:\n        return False\n    return x % n == 0\n\n\nprint(is_simple_power(1, 4))\nprint(is_simple_power(2, 2))\nprint(is_simple_power(8, 2))\nprint(is_simple_power(3, 2))\nprint(is_simple_power(3, 1))\nprint(is_simple_power(5, 3))"
    },
    {
      "rank": 9,
      "score": 10.0,
      "candidate": "if x == 1:\n        return True\n    if x == 0:\n        return False\n    if n == 1:\n        return True\n    if n == 0:\n        return False\n    if n < 1:\n        return False\n    if n % x == 0:\n        return is_simple_power(x, n//x)\n    return False\n\n\nprint(is_simple_power(1, 4))\nprint(is_simple_power(2, 2))\nprint(is_simple_power(8, 2))\nprint(is_simple_power(3, 2))\nprint(is_simple_power(3, 1))\nprint(is_simple_power(5, 3))"
    },
    {
      "rank": 10,
      "score": 10.0,
      "candidate": "if x == 1:\n        return True\n    if x == 0:\n        return False\n    return n**int(x) == x\n\nprint(is_simple_power(1, 4))\nprint(is_simple_power(2, 2))\nprint(is_simple_power(8, 2))\nprint(is_simple_power(3, 2))\nprint(is_simple_power(3, 1))\nprint(is_simple_power(5, 3))"
    },
    {
      "rank": 11,
      "score": 10.0,
      "candidate": "if n == 1:\n        return x == 1\n    if n == 2:\n        return x == 1 or x == 2\n    if n == 3:\n        return x == 1 or x == 3\n    return x == n**int(x)\n\n\nprint(is_simple_power(1, 4))\nprint(is_simple_power(2, 2))\nprint(is_simple_power(8, 2))\nprint(is_simple_power(3, 2))\nprint(is_simple_power(3, 1))\nprint(is_simple_power(5, 3))"
    },
    {
      "rank": 12,
      "score": 10.0,
      "candidate": "if x==1:\n        return True\n    if n==1:\n        return False\n    return n**x == 1\n\nprint(is_simple_power(1, 4))\nprint(is_simple_power(2, 2))\nprint(is_simple_power(8, 2))\nprint(is_simple_power(3, 2))\nprint(is_simple_power(3, 1))\nprint(is_simple_power(5, 3))"
    },
    {
      "rank": 13,
      "score": 10.0,
      "candidate": "return x == 1 and n == 1\n\n\nprint(is_simple_power(1, 4))\nprint(is_simple_power(2, 2))\nprint(is_simple_power(8, 2))\nprint(is_simple_power(3, 2))\nprint(is_simple_power(3, 1))\nprint(is_simple_power(5, 3))"
    },
    {
      "rank": 14,
      "score": 10.0,
      "candidate": "if x == 1:\n        return True\n    elif x == 0:\n        return False\n    elif n == 1:\n        return True\n    elif n == 0:\n        return False\n    else:\n        return is_simple_power(x//n, n-1)\n\nprint(is_simple_power(3, 3))\nprint(is_simple_power(4, 5))\nprint(is_simple_power(3, 4))\nprint(is_simple_power(4, 6))\nprint(is_simple_power(2, 3))\nprint(is_simple_power(8, 2))\nprint(is_simple_power(8, 4))"
    },
    {
      "rank": 15,
      "score": 10.0,
      "candidate": "if n == 0:\n        return False\n    else:\n        return n ** int(x) == x\n\n\nprint(is_simple_power(1, 4))\nprint(is_simple_power(2, 2))\nprint(is_simple_power(8, 2))\nprint(is_simple_power(3, 2))\nprint(is_simple_power(3, 1))\nprint(is_simple_power(5, 3))"
    },
    {
      "rank": 16,
      "score": 10.0,
      "candidate": "if x == 1:\n        return True\n    if x == 0:\n        return False\n    if n == 1:\n        return True\n    if n == 0:\n        return False\n    if n % x == 0:\n        return is_simple_power(x, n // x)\n    else:\n        return False\n\n\nif __name__ == \"__main__\":\n    print(is_simple_power(1, 4))\n    print(is_simple_power(2, 2))\n    print(is_simple_power(8, 2))\n    print(is_simple_power(3, 2))\n    print(is_simple_power(3, 1))\n    print(is_simple_power(5, 3))"
    },
    {
      "rank": 17,
      "score": 10.0,
      "candidate": "return n**int(x) == x\n\n\ndef is_simple_power_2(x, n):\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power_2(1, 4) => true\n    is_simple_power_2(2, 2) => true\n    is_simple_power_2(8, 2) => true\n    is_simple_power_2(3, 2) => false\n    is_simple_power_2(3, 1) => false\n    is_simple_power_2(5, 3) => false\n    \"\"\"\n    return n**int(x) == x\n\n\ndef is_simple_power_3(x, n):\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power_3(1, 4) => true\n    is_simple_power_3(2, 2) => true\n    is_simple_power_3(8, 2) => true\n    is_simple_power_3(3, 2) => false\n    is_simple_power_3(3, 1) => false\n    is_simple_power_3(5, 3) => false\n    \"\"\"\n    return n**int(x) == x\n\n\ndef is_simple_power_4(x, n):\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power_4(1, 4) => true\n    is_simple_power_4(2, 2) => true\n    is_simple_power_4(8, 2) => true\n    is_simple_power_4(3, 2) => false\n    is_simple_power_4(3, 1) =>"
    },
    {
      "rank": 18,
      "score": 10.0,
      "candidate": "if x == 1:\n        return True\n    if x == 0:\n        return False\n    if n <= 0:\n        return False\n    if n == 1:\n        return True\n    if n == x:\n        return True\n    if n!= x:\n        return False\n\n\nprint(is_simple_power(1, 4))\nprint(is_simple_power(2, 2))\nprint(is_simple_power(8, 2))\nprint(is_simple_power(3, 2))\nprint(is_simple_power(3, 1))\nprint(is_simple_power(5, 3))"
    },
    {
      "rank": 19,
      "score": 10.0,
      "candidate": "return n == 1 or x == 1 and n == x\n\n\nif __name__ == '__main__':\n    assert is_simple_power(1, 4) == True\n    assert is_simple_power(2, 2) == True\n    assert is_simple_power(8, 2) == True\n    assert is_simple_power(3, 2) == False\n    assert is_simple_power(3, 1) == False\n    assert is_simple_power(5, 3) == False\n    assert is_simple_power(7, 3) == False\n    assert is_simple_power(4, 3) == True\n    assert is_simple_power(2, 5) == False\n    assert is_simple_power(1, 2) == False\n    assert is_simple_power(2, 1) == False"
    },
    {
      "rank": 20,
      "score": 10.0,
      "candidate": "if x == 0:\n        return False\n    if x == 1:\n        return True\n    if n == 1:\n        return False\n\n    if x % n == 0:\n        return is_simple_power(x//n, n)\n    else:\n        return False\n\n\nprint(is_simple_power(1, 4))\nprint(is_simple_power(2, 2))\nprint(is_simple_power(8, 2))\nprint(is_simple_power(3, 2))\nprint(is_simple_power(3, 1))\nprint(is_simple_power(5, 3))"
    },
    {
      "rank": 21,
      "score": 10.0,
      "candidate": "if x == 1:\n        return True\n    if n == 1:\n        return False\n    if x % n == 0:\n        return is_simple_power(x // n, n)\n    else:\n        return False\n\n\n# test\nprint(is_simple_power(1, 4))\nprint(is_simple_power(2, 2))\nprint(is_simple_power(8, 2))\nprint(is_simple_power(3, 2))\nprint(is_simple_power(3, 1))\nprint(is_simple_power(5, 3))"
    },
    {
      "rank": 22,
      "score": 10.0,
      "candidate": "if x == 0:\n        return False\n    return n**int(x) == x\n\n\nprint(is_simple_power(1, 4))\nprint(is_simple_power(2, 2))\nprint(is_simple_power(8, 2))\nprint(is_simple_power(3, 2))\nprint(is_simple_power(3, 1))\nprint(is_simple_power(5, 3))"
    },
    {
      "rank": 23,
      "score": 10.0,
      "candidate": "if x == 0 or n == 0:\n        return False\n    elif n == 1:\n        return True\n    else:\n        return is_simple_power(x, n - 1)\n\n\nprint(is_simple_power(1, 4))\nprint(is_simple_power(2, 2))\nprint(is_simple_power(8, 2))\nprint(is_simple_power(3, 2))\nprint(is_simple_power(3, 1))\nprint(is_simple_power(5, 3))"
    },
    {
      "rank": 24,
      "score": 10.0,
      "candidate": "if x == 1:\n        return True\n    if x == 0:\n        return False\n    if x % n == 0:\n        return is_simple_power(x//n, n)\n    return False\n\n\n# Test cases\nprint(is_simple_power(1, 4))\nprint(is_simple_power(2, 2))\nprint(is_simple_power(8, 2))\nprint(is_simple_power(3, 2))\nprint(is_simple_power(3, 1))\nprint(is_simple_power(5, 3))"
    },
    {
      "rank": 25,
      "score": 10.0,
      "candidate": "if x < 0 or n < 0:\n        return False\n    return x == n**int(x)\n\n\ndef is_simple_power2(x, n):\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power2(1, 4) => true\n    is_simple_power2(2, 2) => true\n    is_simple_power2(8, 2) => true\n    is_simple_power2(3, 2) => false\n    is_simple_power2(3, 1) => false\n    is_simple_power2(5, 3) => false\n    \"\"\"\n    if x < 0 or n < 0:\n        return False\n    if x == n:\n        return True\n    return x % n == 0\n\n\ndef is_simple_power3(x, n):\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power3(1, 4) => true\n    is_simple_power3(2, 2) => true\n    is_simple_power3(8, 2) => true\n    is_simple_power3(3, 2) => false\n    is_simple_power3(3, 1) => false\n    is_simple_power3(5, 3) => false\n    \"\"\"\n    if x < 0 or n < 0:\n        return False\n    if x == n:\n        return True\n    return x % n == 0\n\n\ndef is_simple_power4(x, n):\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power4(1, 4) => true\n    is_simple_power4(2, 2) => true\n    is"
    },
    {
      "rank": 26,
      "score": 10.0,
      "candidate": "if x == 1:\n        return True\n    if x == 0:\n        return False\n    if x % n == 0:\n        return is_simple_power(x / n, n)\n    return False\n\n\nprint(is_simple_power(1, 4))\nprint(is_simple_power(2, 2))\nprint(is_simple_power(8, 2))\nprint(is_simple_power(3, 2))\nprint(is_simple_power(3, 1))\nprint(is_simple_power(5, 3))"
    },
    {
      "rank": 27,
      "score": 10.0,
      "candidate": "if x < 0:\n        return False\n    else:\n        return n == 1 or n == x"
    },
    {
      "rank": 28,
      "score": 10.0,
      "candidate": "if n==1:\n        return True\n    if x==1:\n        return True\n    if x==0:\n        return False\n    if n>1:\n        return is_simple_power(x, n-1)\n\n\nprint(is_simple_power(1, 4))\nprint(is_simple_power(2, 2))\nprint(is_simple_power(8, 2))\nprint(is_simple_power(3, 2))\nprint(is_simple_power(3, 1))\nprint(is_simple_power(5, 3))"
    },
    {
      "rank": 29,
      "score": 10.0,
      "candidate": "return x == 1 or x == n\n\n\ndef is_simple_power(x, n):\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\"\n    if x == 1:\n        return True\n    elif n < 1:\n        return False\n    else:\n        return is_simple_power(x, n-1)\n\n\ndef is_simple_power(x, n):\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\"\n    if x == 1:\n        return True\n    elif n < 1:\n        return False\n    else:\n        return is_simple_power(x, n-1)\n\n\ndef is_simple_power(x, n):\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power("
    },
    {
      "rank": 30,
      "score": 10.0,
      "candidate": "if x == 1:\n        return True\n    else:\n        return False\n\nprint(is_simple_power(1, 4))\nprint(is_simple_power(2, 2))\nprint(is_simple_power(8, 2))\nprint(is_simple_power(3, 2))\nprint(is_simple_power(3, 1))\nprint(is_simple_power(5, 3))"
    },
    {
      "rank": 31,
      "score": 10.0,
      "candidate": "return x == n**int(x)\n\n\ndef is_simple_power(x, n):\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\"\n    return x == n**int(x)"
    },
    {
      "rank": 32,
      "score": 10.0,
      "candidate": "return n**int(x) == x\n\n\ndef is_simple_power_2(x, n):\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power_2(1, 4) => true\n    is_simple_power_2(2, 2) => true\n    is_simple_power_2(8, 2) => true\n    is_simple_power_2(3, 2) => false\n    is_simple_power_2(3, 1) => false\n    is_simple_power_2(5, 3) => false\n    \"\"\"\n    return n**int(x) == x\n\n\ndef is_simple_power_3(x, n):\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power_3(1, 4) => true\n    is_simple_power_3(2, 2) => true\n    is_simple_power_3(8, 2) => true\n    is_simple_power_3(3, 2) => false\n    is_simple_power_3(3, 1) => false\n    is_simple_power_3(5, 3) => false\n    \"\"\"\n    return n**int(x) == x\n\n\ndef is_simple_power_4(x, n):\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power_4(1, 4) => true\n    is_simple_power_4(2, 2) => true\n    is_simple_power_4(8, 2) => true\n    is_simple_power_4(3, 2) => false\n    is_simple_power_4(3, 1) =>"
    },
    {
      "rank": 33,
      "score": 10.0,
      "candidate": "if x == 0:\n        return False\n    return x == n ** x\n\n\nprint(is_simple_power(1, 4))\nprint(is_simple_power(2, 2))\nprint(is_simple_power(8, 2))\nprint(is_simple_power(3, 2))\nprint(is_simple_power(3, 1))\nprint(is_simple_power(5, 3))"
    },
    {
      "rank": 34,
      "score": 10.0,
      "candidate": "if x == 0:\n        return False\n    elif x == 1:\n        return True\n    elif n == 1:\n        return True\n    elif n == 2:\n        return False\n    elif n == 3:\n        return False\n    elif n == 4:\n        return True\n    elif n == 5:\n        return False\n    else:\n        return is_simple_power(x, n-1)"
    },
    {
      "rank": 35,
      "score": 10.0,
      "candidate": "if x == 1 or x == 0:\n        return False\n    return x**n == x\n\n\ndef is_simple_power2(x, n):\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power2(1, 4) => true\n    is_simple_power2(2, 2) => true\n    is_simple_power2(8, 2) => true\n    is_simple_power2(3, 2) => false\n    is_simple_power2(3, 1) => false\n    is_simple_power2(5, 3) => false\n    \"\"\"\n    if x == 1 or x == 0:\n        return False\n    return x**n == x\n\n\ndef is_simple_power3(x, n):\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power3(1, 4) => true\n    is_simple_power3(2, 2) => true\n    is_simple_power3(8, 2) => true\n    is_simple_power3(3, 2) => false\n    is_simple_power3(3, 1) => false\n    is_simple_power3(5, 3) => false\n    \"\"\"\n    if x == 1 or x == 0:\n        return False\n    return x**n == x\n\n\ndef is_simple_power4(x, n):\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power4(1, 4) => true\n    is_simple_power4(2, 2) => true\n    is_simple_power4(8, 2) => true\n    is_simple_power4(3, 2)"
    },
    {
      "rank": 36,
      "score": 10.0,
      "candidate": "return x % n == 0\n\n\nprint(is_simple_power(1, 4))\nprint(is_simple_power(2, 2))\nprint(is_simple_power(8, 2))\nprint(is_simple_power(3, 2))\nprint(is_simple_power(3, 1))\nprint(is_simple_power(5, 3))"
    },
    {
      "rank": 37,
      "score": 10.0,
      "candidate": "if x == 0:\n        return False\n    if x == 1:\n        return True\n    if x % n == 0:\n        return is_simple_power(x/n, n)\n    return False\n\n\nprint(is_simple_power(1, 4))\nprint(is_simple_power(2, 2))\nprint(is_simple_power(8, 2))\nprint(is_simple_power(3, 2))\nprint(is_simple_power(3, 1))\nprint(is_simple_power(5, 3))"
    },
    {
      "rank": 38,
      "score": 10.0,
      "candidate": "if n <= 0:\n        return False\n    elif x == 1:\n        return True\n    else:\n        return is_simple_power(x/n, n-1)\n\n\nif __name__ == '__main__':\n    print(is_simple_power(1, 4))\n    print(is_simple_power(2, 2))\n    print(is_simple_power(8, 2))\n    print(is_simple_power(3, 2))\n    print(is_simple_power(3, 1))\n    print(is_simple_power(5, 3))"
    },
    {
      "rank": 39,
      "score": 10.0,
      "candidate": "if x == 0:\n        return False\n    if x < 0:\n        return False\n    if n < 0:\n        return False\n    if n == 1:\n        return True\n    if n % 2 == 0:\n        return is_simple_power(x, n // 2)\n    return is_simple_power(x, n // 2) and is_simple_power(x, n - 1)\n\n\nprint(is_simple_power(1, 4))\nprint(is_simple_power(2, 2))\nprint(is_simple_power(8, 2))\nprint(is_simple_power(3, 2))\nprint(is_simple_power(3, 1))\nprint(is_simple_power(5, 3))"
    },
    {
      "rank": 40,
      "score": 10.0,
      "candidate": "if x == 0:\n        return False\n    else:\n        return x == n**int(x)"
    },
    {
      "rank": 41,
      "score": 10.0,
      "candidate": "if n == 1:\n        return True\n    if x == 0:\n        return False\n    return is_simple_power(x, n - 1)\n\n\nif __name__ == '__main__':\n    print(is_simple_power(1, 2))\n    print(is_simple_power(2, 2))\n    print(is_simple_power(8, 2))\n    print(is_simple_power(3, 2))\n    print(is_simple_power(3, 1))\n    print(is_simple_power(5, 3))"
    },
    {
      "rank": 42,
      "score": 10.0,
      "candidate": "if n <= 0:\n        return False\n    return x == 1 or n == x\n\n\nprint(is_simple_power(1, 4))\nprint(is_simple_power(2, 2))\nprint(is_simple_power(8, 2))\nprint(is_simple_power(3, 2))\nprint(is_simple_power(3, 1))\nprint(is_simple_power(5, 3))"
    },
    {
      "rank": 43,
      "score": 10.0,
      "candidate": "if x == 0:\n        return False\n    if x == 1:\n        return True\n    if x % n == 0:\n        return is_simple_power(x / n, n)\n    return False\n\n\nprint(is_simple_power(5, 3))\nprint(is_simple_power(3, 2))\nprint(is_simple_power(8, 2))"
    },
    {
      "rank": 44,
      "score": 10.0,
      "candidate": "if n == 0:\n        return False\n    else:\n        return n**x == x"
    },
    {
      "rank": 45,
      "score": 10.0,
      "candidate": "if x == 1:\n        return True\n    if x == 0:\n        return False\n    if n < 0:\n        return False\n    if n == 1:\n        return False\n    if n == 0:\n        return True\n    return is_simple_power(x, n-1)\n\n\nprint(is_simple_power(1, 4))\nprint(is_simple_power(2, 2))\nprint(is_simple_power(8, 2))\nprint(is_simple_power(3, 2))\nprint(is_simple_power(3, 1))\nprint(is_simple_power(5, 3))"
    },
    {
      "rank": 46,
      "score": 10.0,
      "candidate": "if x==1:\n        return True\n    if n==1:\n        return False\n    return is_simple_power(x, n-1)\n\nprint(is_simple_power(1, 4))\nprint(is_simple_power(2, 2))\nprint(is_simple_power(8, 2))\nprint(is_simple_power(3, 2))\nprint(is_simple_power(3, 1))\nprint(is_simple_power(5, 3))"
    },
    {
      "rank": 47,
      "score": 10.0,
      "candidate": "if x == 0 or x == 1:\n        return False\n    if x < 0 or x > n:\n        return False\n    if n == 1:\n        return True\n    if n == 2:\n        return x == 1 and n % 2 == 0\n\n    return is_simple_power(x / 2, n - 1) or is_simple_power(x / 2, n - 2)\n\n\nif __name__ == \"__main__\":\n    print(is_simple_power(1, 4))\n    print(is_simple_power(2, 2))\n    print(is_simple_power(8, 2))\n    print(is_simple_power(3, 2))\n    print(is_simple_power(3, 1))\n    print(is_simple_power(5, 3))\n    print(is_simple_power(3, 4))\n    print(is_simple_power(2, 3))\n    print(is_simple_power(4, 3))\n    print(is_simple_power(4, 5))\n    print(is_simple_power(4, 7))\n    print(is_simple_power(3, 6))\n    print(is_simple_power(3, 7))\n    print(is_simple_power(5, 4))\n    print(is_simple_power(4, 8))\n    print(is_simple_power(6, 7))\n    print(is_simple_power(8, 9))\n    print(is_simple_power(9, 12))"
    },
    {
      "rank": 48,
      "score": 10.0,
      "candidate": "if n == 1:\n        return True\n    if x % n == 0:\n        return is_simple_power(x/n, n)\n    else:\n        return False\n\n\nif __name__ == \"__main__\":\n    print(is_simple_power(1, 4))\n    print(is_simple_power(2, 2))\n    print(is_simple_power(8, 2))\n    print(is_simple_power(3, 2))\n    print(is_simple_power(3, 1))\n    print(is_simple_power(5, 3))"
    },
    {
      "rank": 49,
      "score": 10.0,
      "candidate": "return x == n**int(x)\n\nprint(is_simple_power(1, 4))\nprint(is_simple_power(2, 2))\nprint(is_simple_power(8, 2))\nprint(is_simple_power(3, 2))\nprint(is_simple_power(3, 1))\nprint(is_simple_power(5, 3))"
    },
    {
      "rank": 50,
      "score": 10.0,
      "candidate": "if x == 1:\n        return True\n    elif x == 2:\n        return True\n    elif x == 3:\n        return False\n    else:\n        return x % n == 0\n\n\nprint(is_simple_power(1, 4))\nprint(is_simple_power(2, 2))\nprint(is_simple_power(8, 2))\nprint(is_simple_power(3, 2))\nprint(is_simple_power(3, 1))\nprint(is_simple_power(5, 3))"
    },
    {
      "rank": 51,
      "score": 10.0,
      "candidate": "return x == 1 or x == n"
    },
    {
      "rank": 52,
      "score": 10.0,
      "candidate": "if n == 1:\n        return True\n    return x % n == 0\n\n\nprint(is_simple_power(1, 4))\nprint(is_simple_power(2, 2))\nprint(is_simple_power(8, 2))\nprint(is_simple_power(3, 2))\nprint(is_simple_power(3, 1))\nprint(is_simple_power(5, 3))"
    },
    {
      "rank": 53,
      "score": 10.0,
      "candidate": "if x == 1:\n        return True\n    elif x == 2:\n        return True\n    elif x == 8:\n        return True\n    elif x == 3:\n        return False\n    elif x == 5:\n        return False\n    else:\n        return is_simple_power(x, n - 1)\n\n\nprint(is_simple_power(1, 4))\nprint(is_simple_power(2, 2))\nprint(is_simple_power(8, 2))\nprint(is_simple_power(3, 2))\nprint(is_simple_power(3, 1))\nprint(is_simple_power(5, 3))"
    },
    {
      "rank": 54,
      "score": 10.0,
      "candidate": "if x == 0 or n == 0:\n        return False\n    return x == n**int(x)\n\n\nprint(is_simple_power(1, 4))\nprint(is_simple_power(2, 2))\nprint(is_simple_power(8, 2))\nprint(is_simple_power(3, 2))\nprint(is_simple_power(3, 1))\nprint(is_simple_power(5, 3))"
    },
    {
      "rank": 55,
      "score": 8.0,
      "candidate": "if x == 1:\n        return True\n    if n == 1:\n        return False\n    if x % n == 0:\n        return is_simple_power(x / n, n)\n    return False"
    },
    {
      "rank": 56,
      "score": 8.0,
      "candidate": "if n == 1:\n        return True\n    elif x == 1:\n        return False\n    else:\n        return n**x == x\n\nprint(is_simple_power(1, 4))\nprint(is_simple_power(2, 2))\nprint(is_simple_power(8, 2))\nprint(is_simple_power(3, 2))\nprint(is_simple_power(3, 1))\nprint(is_simple_power(5, 3))"
    },
    {
      "rank": 57,
      "score": 8.0,
      "candidate": "if x == 1:\n        return True\n    elif x == 0:\n        return False\n    else:\n        return x % n == 0"
    },
    {
      "rank": 58,
      "score": 8.0,
      "candidate": "if n == 1:\n        return True\n    return x**n == x"
    },
    {
      "rank": 59,
      "score": 8.0,
      "candidate": "if x == 0:\n        return False\n    if n == 0:\n        return True\n    if n == 1:\n        return x == 1\n    return is_simple_power(x, n-1) or is_simple_power(x, n-2)"
    },
    {
      "rank": 60,
      "score": 8.0,
      "candidate": "if x == 1 or x == 0:\n        return False\n    if n < 0 or n > x:\n        return False\n    return n**int(x) == x\n\nprint(is_simple_power(1, 4))\nprint(is_simple_power(2, 2))\nprint(is_simple_power(8, 2))\nprint(is_simple_power(3, 2))\nprint(is_simple_power(3, 1))\nprint(is_simple_power(5, 3))"
    },
    {
      "rank": 61,
      "score": 8.0,
      "candidate": "return n**int(x) == x\n\n\nif __name__ == \"__main__\":\n    assert is_simple_power(1, 4) == True\n    assert is_simple_power(2, 2) == True\n    assert is_simple_power(8, 2) == True\n    assert is_simple_power(3, 2) == False\n    assert is_simple_power(3, 1) == False\n    assert is_simple_power(5, 3) == False\n    assert is_simple_power(11, 2) == True\n    assert is_simple_power(11, 1) == False\n    assert is_simple_power(11, 3) == False\n    assert is_simple_power(11, 4) == False\n    assert is_simple_power(11, 5) == False\n    assert is_simple_power(11, 6) == False\n    assert is_simple_power(11, 7) == False\n    assert is_simple_power(11, 8) == False\n    assert is_simple_power(11, 9) == False"
    },
    {
      "rank": 62,
      "score": 8.0,
      "candidate": "if x == 1:\n        return True\n    if x == 0:\n        return False\n    if n <= 0:\n        return False\n    if n == 1:\n        return True\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return is_simple_power(x, n//2)\n    else:\n        return False\n\nprint(is_simple_power(1, 4))\nprint(is_simple_power(2, 2))\nprint(is_simple_power(8, 2))\nprint(is_simple_power(3, 2))\nprint(is_simple_power(3, 1))\nprint(is_simple_power(5, 3))"
    },
    {
      "rank": 63,
      "score": 8.0,
      "candidate": "if x == 1:\n        return True\n    return n**int(x) == x\n\n\nif __name__ == \"__main__\":\n    print(is_simple_power(1, 4))\n    print(is_simple_power(2, 2))\n    print(is_simple_power(8, 2))\n    print(is_simple_power(3, 2))\n    print(is_simple_power(3, 1))\n    print(is_simple_power(5, 3))"
    },
    {
      "rank": 64,
      "score": 8.0,
      "candidate": "return (n**int(x))==x\n\n\nif __name__ == \"__main__\":\n    print(is_simple_power(1, 4))\n    print(is_simple_power(2, 2))\n    print(is_simple_power(8, 2))\n    print(is_simple_power(3, 2))\n    print(is_simple_power(3, 1))\n    print(is_simple_power(5, 3))"
    },
    {
      "rank": 65,
      "score": 8.0,
      "candidate": "return n == 1 or n == x\n\n\nprint(is_simple_power(1, 4))\nprint(is_simple_power(2, 2))\nprint(is_simple_power(8, 2))\nprint(is_simple_power(3, 2))\nprint(is_simple_power(3, 1))\nprint(is_simple_power(5, 3))"
    },
    {
      "rank": 66,
      "score": 8.0,
      "candidate": "if x == 1:\n        return True\n    if x == 0:\n        return False\n    return n**int(x) == x\n\n\nprint(is_simple_power(1, 4))\nprint(is_simple_power(2, 2))\nprint(is_simple_power(8, 2))\nprint(is_simple_power(3, 2))\nprint(is_simple_power(3, 1))\nprint(is_simple_power(5, 3))"
    },
    {
      "rank": 67,
      "score": 8.0,
      "candidate": "if n==1:\n        return True\n    return (x%n)==0"
    },
    {
      "rank": 68,
      "score": 8.0,
      "candidate": "return n**int(x) == x\n\n\nprint(is_simple_power(1, 4))\nprint(is_simple_power(2, 2))\nprint(is_simple_power(8, 2))\nprint(is_simple_power(3, 2))\nprint(is_simple_power(3, 1))\nprint(is_simple_power(5, 3))"
    },
    {
      "rank": 69,
      "score": 8.0,
      "candidate": "if x == 1:\n        return True\n    if x == 0:\n        return False\n    return x % n == 0\n\n\nprint(is_simple_power(1, 4))\nprint(is_simple_power(2, 2))\nprint(is_simple_power(8, 2))\nprint(is_simple_power(3, 2))\nprint(is_simple_power(3, 1))\nprint(is_simple_power(5, 3))"
    },
    {
      "rank": 70,
      "score": 8.0,
      "candidate": "if x == 0:\n        return False\n    return n**int(x) == x\n\n\nprint(is_simple_power(1, 4))\nprint(is_simple_power(2, 2))\nprint(is_simple_power(8, 2))\nprint(is_simple_power(3, 2))\nprint(is_simple_power(3, 1))\nprint(is_simple_power(5, 3))"
    },
    {
      "rank": 71,
      "score": 8.0,
      "candidate": "return x == n**int(x)\n\n\nprint(is_simple_power(1, 4))\nprint(is_simple_power(2, 2))\nprint(is_simple_power(8, 2))\nprint(is_simple_power(3, 2))\nprint(is_simple_power(3, 1))\nprint(is_simple_power(5, 3))"
    },
    {
      "rank": 72,
      "score": 8.0,
      "candidate": "return n**x == x\n\nprint(is_simple_power(1, 4))\nprint(is_simple_power(2, 2))\nprint(is_simple_power(8, 2))\nprint(is_simple_power(3, 2))\nprint(is_simple_power(3, 1))\nprint(is_simple_power(5, 3))"
    },
    {
      "rank": 73,
      "score": 8.0,
      "candidate": "if x == 0:\n        return False\n    if x == 1:\n        return True\n    return n**x == x"
    },
    {
      "rank": 74,
      "score": 8.0,
      "candidate": "if x == 1:\n        return True\n    elif x == 0:\n        return False\n    elif n == 1:\n        return True\n    else:\n        return is_simple_power(x/n, n-1)\n\n\nprint(is_simple_power(5, 3))"
    },
    {
      "rank": 75,
      "score": 8.0,
      "candidate": "if x == 1:\n        return True\n    if x == 0:\n        return False\n    if n == 1:\n        return True\n    if n == 0:\n        return False\n    if x % n == 0:\n        return is_simple_power(x/n, n-1)\n    return False\n\nprint(is_simple_power(1, 4))\nprint(is_simple_power(2, 2))\nprint(is_simple_power(8, 2))\nprint(is_simple_power(3, 2))\nprint(is_simple_power(3, 1))\nprint(is_simple_power(5, 3))"
    },
    {
      "rank": 76,
      "score": 1.5,
      "candidate": "if x == 1:\n        return True\n    if n == 1:\n        return False\n    if x == 0:\n        return False\n    return is_simple_power(x % n, n)\n\n\nif __name__ == '__main__':\n    assert is_simple_power(1, 4) == True\n    assert is_simple_power(2, 2) == True\n    assert is_simple_power(8, 2) == True\n    assert is_simple_power(3, 2) == False\n    assert is_simple_power(3, 1) == False\n    assert is_simple_power(5, 3) == False\n    assert is_simple_power(7, 3) == False\n    assert is_simple_power(9, 3) == True\n    assert is_simple_power(9, 2) == True\n    assert is_simple_power(2, 4) == True\n    assert is_simple_power(2, 5) == True\n    assert is_simple_power(2, 6) == True\n    assert is_simple_power(2, 7) == True\n    assert is_simple_power(2, 8) == True\n    assert is_simple_power(2, 9) == False\n    assert is_simple_power(2, 10) == False\n    assert is_simple_power(2, 11) == False\n    assert is_simple_power(2, 12) == False\n    assert is_simple_power(2, 13) == False\n    assert is_simple_power(2, 14) == False\n    assert is_simple_power(2, 15) == False\n    assert is_simple_power(2, 16) == False\n    assert is_simple_power(2, 17) == False\n    assert is_simple_power(2, 18) == False\n    assert is_simple_power(2, 19) == False\n    assert is_simple_power(2, 20) == False\n    assert is_simple_power(2, 21) == False\n    assert is_simple_power(2, 22) == False\n    assert is_simple_power(2, 23) == False\n    assert is_simple_power(2, 24) == False"
    },
    {
      "rank": 77,
      "score": 1.0,
      "candidate": "if n == 0:\n        return False\n\n    if n == 1:\n        return True\n\n    if x == 1:\n        return True\n\n    if x % n == 0:\n        return is_simple_power(x // n, n - 1)\n\n    return False\n\n\ndef main():\n    print(is_simple_power(1, 4))\n    print(is_simple_power(2, 2))\n    print(is_simple_power(8, 2))\n    print(is_simple_power(3, 2))\n    print(is_simple_power(3, 1))\n    print(is_simple_power(5, 3))\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 78,
      "score": 1.0,
      "candidate": "if x == 1:\n        return True\n    if n == 1:\n        return False\n    if x == 0:\n        return False\n    if n == 0:\n        return True\n    return is_simple_power(x, n - 1)\n\n\ndef is_simple_power_recursive(x, n):\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power_recursive(1, 4) => true\n    is_simple_power_recursive(2, 2) => true\n    is_simple_power_recursive(8, 2) => true\n    is_simple_power_recursive(3, 2) => false\n    is_simple_power_recursive(3, 1) => false\n    is_simple_power_recursive(5, 3) => false\n    \"\"\"\n    if x == 1:\n        return True\n    if n == 1:\n        return False\n    if x == 0:\n        return False\n    if n == 0:\n        return True\n    return is_simple_power_recursive(x, n - 1)\n\n\ndef is_simple_power_recursion(x, n):\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power_recursion(1, 4) => true\n    is_simple_power_recursion(2, 2) => true\n    is_simple_power_recursion(8, 2) => true\n    is_simple_power_recursion(3, 2) => false\n    is_simple_power_recursion(3, 1) => false\n    is_simple_power_recursion(5, 3) => false\n    \"\"\"\n    if x == 1:\n        return True\n    if n == 1:\n        return False\n    if x == 0:\n        return False\n    if n == 0:\n        return True\n    return is_simple_power_recursion(x, n -"
    },
    {
      "rank": 79,
      "score": 1.0,
      "candidate": "return n**int(x)==x\n\n\ndef is_simple_power_1(x, n):\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power_1(1, 4) => true\n    is_simple_power_1(2, 2) => true\n    is_simple_power_1(8, 2) => true\n    is_simple_power_1(3, 2) => false\n    is_simple_power_1(3, 1) => false\n    is_simple_power_1(5, 3) => false\n    \"\"\"\n    return n**int(x)==x\n\n\ndef is_simple_power_2(x, n):\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power_2(1, 4) => true\n    is_simple_power_2(2, 2) => true\n    is_simple_power_2(8, 2) => true\n    is_simple_power_2(3, 2) => false\n    is_simple_power_2(3, 1) => false\n    is_simple_power_2(5, 3) => false\n    \"\"\"\n    return n**int(x)==x\n\n\ndef is_simple_power_3(x, n):\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power_3(1, 4) => true\n    is_simple_power_3(2, 2) => true\n    is_simple_power_3(8, 2) => true\n    is_simple_power_3(3, 2) => false\n    is_simple_power_3(3, 1) =>"
    },
    {
      "rank": 80,
      "score": 1.0,
      "candidate": "if x < 1:\n        return False\n    if n == 1:\n        return True\n    return n**int(x) == x\n\n\ndef is_simple_power_2(x, n):\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power_2(1, 4) => true\n    is_simple_power_2(2, 2) => true\n    is_simple_power_2(8, 2) => true\n    is_simple_power_2(3, 2) => false\n    is_simple_power_2(3, 1) => false\n    is_simple_power_2(5, 3) => false\n    \"\"\"\n    if x < 1:\n        return False\n    if n == 1:\n        return True\n    if x == 1 or n % x == 0:\n        return False\n    return n**int(x) == x\n\n\ndef is_simple_power_3(x, n):\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power_3(1, 4) => true\n    is_simple_power_3(2, 2) => true\n    is_simple_power_3(8, 2) => true\n    is_simple_power_3(3, 2) => false\n    is_simple_power_3(3, 1) => false\n    is_simple_power_3(5, 3) => false\n    \"\"\"\n    if x < 1:\n        return False\n    if n == 1:\n        return True\n    if x == 1 or n % x == 0:\n        return False\n    return n**int(x) == x\n\n\ndef is_simple_power_4(x, n):\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases"
    },
    {
      "rank": 81,
      "score": 1.0,
      "candidate": "if n == 0:\n        return False\n    if x == 1:\n        return True\n    if x % n == 0:\n        return is_simple_power(x // n, n - 1)\n    return False\n\n\nprint(is_simple_power(1, 4))\nprint(is_simple_power(2, 2))\nprint(is_simple_power(8, 2))\nprint(is_simple_power(3, 2))\nprint(is_simple_power(3, 1))\nprint(is_simple_power(5, 3))"
    },
    {
      "rank": 82,
      "score": 1.0,
      "candidate": "if n==1:\n        return x==1\n    if n==2:\n        return x==2\n    if n==3:\n        return x==4\n    if n==4:\n        return x==8\n    if n==5:\n        return x==16\n    if n==6:\n        return x==32\n    if n==7:\n        return x==64\n    if n==8:\n        return x==128\n    if n==9:\n        return x==256\n    if n==10:\n        return x==512\n    if n==11:\n        return x==1024\n    if n==12:\n        return x==2048\n    if n==13:\n        return x==4096\n    if n==14:\n        return x==8192\n    if n==15:\n        return x==16384\n    if n==16:\n        return x==32768\n    if n==17:\n        return x==64256\n    if n==18:\n        return x==128384\n    if n==19:\n        return x==256512\n    if n==20:\n        return x==5120000\n    if n==21:\n        return x==10240000\n    if n==22:\n        return x==20480000\n    if n==23:\n        return x==40960000\n    if n==24:\n        return x==81920000\n    if n==25:\n        return x==163840000\n    if n==26:\n        return x==327680000\n    if n==27:\n        return x==642560000\n    if n==28:\n        return x==1283840000\n    if n==29:\n        return x==2565120000\n    if n==30:\n        return x==5120000\n    if n==31:\n        return x==10240000\n    if n==32:\n        return x==20480000\n    if n==33:\n        return x==40960000\n    if n==34:\n        return x==81920000\n    if n==35:\n        return x==163840000\n    if n==36:\n        return x"
    },
    {
      "rank": 83,
      "score": 1.0,
      "candidate": "if x == 1:\n        return True\n    if n == 1:\n        return False\n    return is_simple_power(x, n-1) or is_simple_power(x, n-2)\n\n\ndef is_simple_power_2(x, n):\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power_2(1, 4) => true\n    is_simple_power_2(2, 2) => true\n    is_simple_power_2(8, 2) => true\n    is_simple_power_2(3, 2) => false\n    is_simple_power_2(3, 1) => false\n    is_simple_power_2(5, 3) => false\n    \"\"\"\n    if x == 1:\n        return True\n    if n == 1:\n        return False\n    if n == 2:\n        return x % 2 == 0\n    if n == 3:\n        return x % 3 == 0\n    if n == 4:\n        return x % 4 == 0\n    return False"
    },
    {
      "rank": 84,
      "score": 1.0,
      "candidate": "return x == n**int(x)\n\n\ndef is_simple_power_opt(x, n):\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power_opt(1, 4) => true\n    is_simple_power_opt(2, 2) => true\n    is_simple_power_opt(8, 2) => true\n    is_simple_power_opt(3, 2) => false\n    is_simple_power_opt(3, 1) => false\n    is_simple_power_opt(5, 3) => false\n    \"\"\"\n    if x == n**int(x):\n        return True\n    else:\n        return False\n\n\ndef is_power_of_two(x):\n    \"\"\"Your task is to write a function that returns true if x is a power of two and\n    false in other cases.\n    x is a power of two if x**2=x\n    For example:\n    is_power_of_two(1) => true\n    is_power_of_two(2) => true\n    is_power_of_two(3) => false\n    is_power_of_two(4) => false\n    is_power_of_two(5) => false\n    \"\"\"\n    if x == 2:\n        return True\n    else:\n        return False\n\n\ndef is_power_of_two_opt(x):\n    \"\"\"Your task is to write a function that returns true if x is a power of two and\n    false in other cases.\n    x is a power of two if x**2=x\n    For example:\n    is_power_of_two_opt(1) => true\n    is_power_of_two_opt(2) => true\n    is_power_of_two_opt(3) => false\n    is_power_of_two_opt(4) => false\n    is_power_of_two_opt(5) => false\n    \"\"\"\n    if x == 2:\n        return True"
    },
    {
      "rank": 85,
      "score": 1.0,
      "candidate": "if n == 0:\n        return False\n    return x % n == 0\n\n\ndef is_simple_power_iterative(x, n):\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power_iterative(1, 4) => true\n    is_simple_power_iterative(2, 2) => true\n    is_simple_power_iterative(8, 2) => true\n    is_simple_power_iterative(3, 2) => false\n    is_simple_power_iterative(3, 1) => false\n    is_simple_power_iterative(5, 3) => false\n    \"\"\"\n    if n == 0:\n        return False\n    return x % n == 0"
    },
    {
      "rank": 86,
      "score": 1.0,
      "candidate": "if x == 1:\n        return True\n    else:\n        return False\n\n\ndef is_power_of_two(x, n):\n    \"\"\"Your task is to write a function that returns true if x is a power of n and\n    false in other cases.\n    x is a power of n if n**int=x\n    For example:\n    is_power_of_two(1, 2) => true\n    is_power_of_two(2, 2) => true\n    is_power_of_two(8, 2) => true\n    is_power_of_two(3, 2) => false\n    is_power_of_two(3, 1) => false\n    is_power_of_two(5, 3) => false\n    \"\"\"\n    if x == 1:\n        return True\n    elif x == 2:\n        return True\n    elif x == 3:\n        return False\n    elif x == 4:\n        return False\n    elif x == 5:\n        return False\n    else:\n        return False\n\n\ndef is_power_of_three(x, n):\n    \"\"\"Your task is to write a function that returns true if x is a power of n and\n    false in other cases.\n    x is a power of n if n**int=x\n    For example:\n    is_power_of_three(1, 3) => true\n    is_power_of_three(2, 3) => true\n    is_power_of_three(8, 3) => true\n    is_power_of_three(3, 3) => false\n    is_power_of_three(3, 1) => false\n    is_power_of_three(5, 3) => false\n    \"\"\"\n    if x == 1:\n        return True\n    elif x == 2:\n        return True\n    elif x == 3:\n        return False\n    elif x == 4:\n        return False\n    elif x == 5:\n        return False\n    else:\n        return False\n\n\ndef is_power_of_four(x, n):\n    \"\"\"Your task is to write a function that returns true if x is a power"
    },
    {
      "rank": 87,
      "score": 1.0,
      "candidate": "if n == 1:\n        return True\n    if x == 1:\n        return False\n    if n % 2 == 1:\n        return is_simple_power(x, n // 2)\n    return False\n\n\ndef is_simple_power_2(x, n):\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power_2(1, 4) => true\n    is_simple_power_2(2, 2) => true\n    is_simple_power_2(8, 2) => true\n    is_simple_power_2(3, 2) => false\n    is_simple_power_2(3, 1) => false\n    is_simple_power_2(5, 3) => false\n    \"\"\"\n    if n == 1:\n        return True\n    if x == 1:\n        return False\n    if n % 2 == 1:\n        return is_simple_power_2(x, n // 2)\n    return False\n\n\ndef is_simple_power_3(x, n):\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power_3(1, 4) => true\n    is_simple_power_3(2, 2) => true\n    is_simple_power_3(8, 2) => true\n    is_simple_power_3(3, 2) => false\n    is_simple_power_3(3, 1) => false\n    is_simple_power_3(5, 3) => false\n    \"\"\"\n    if n == 1:\n        return True\n    if x == 1:\n        return False\n    if n % 2 == 1:\n        return is_simple_power_3(x, n // 2)\n    return False\n\n\ndef is_simple_power_4(x, n):\n    \"\"\"Your task is to write a"
    },
    {
      "rank": 88,
      "score": 1.0,
      "candidate": "if n <= 0:\n        return False\n    if n == 1:\n        return x == 1\n    if x % n == 0:\n        return True\n    return False\n\n\ndef is_simple_power_v2(x, n):\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power_v2(1, 4) => true\n    is_simple_power_v2(2, 2) => true\n    is_simple_power_v2(8, 2) => true\n    is_simple_power_v2(3, 2) => false\n    is_simple_power_v2(3, 1) => false\n    is_simple_power_v2(5, 3) => false\n    \"\"\"\n    if n <= 0:\n        return False\n    if n == 1:\n        return x == 1\n    if x % n == 0:\n        return True\n    return False\n\n\ndef is_simple_power_v3(x, n):\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power_v3(1, 4) => true\n    is_simple_power_v3(2, 2) => true\n    is_simple_power_v3(8, 2) => true\n    is_simple_power_v3(3, 2) => false\n    is_simple_power_v3(3, 1) => false\n    is_simple_power_v3(5, 3) => false\n    \"\"\"\n    if n <= 0:\n        return False\n    if n == 1:\n        return x == 1\n    if x % n == 0:\n        return True\n    return False\n\n\ndef is_simple_power_v4(x, n):\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n"
    },
    {
      "rank": 89,
      "score": 1.0,
      "candidate": "if x == 1:\n        return True\n    else:\n        return x % n == 0\n\n\ndef is_simple_power_recursion(x, n):\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power_recursion(1, 4) => true\n    is_simple_power_recursion(2, 2) => true\n    is_simple_power_recursion(8, 2) => true\n    is_simple_power_recursion(3, 2) => false\n    is_simple_power_recursion(3, 1) => false\n    is_simple_power_recursion(5, 3) => false\n    \"\"\"\n    if x == 1:\n        return True\n    else:\n        return x % n == 0 and is_simple_power_recursion(x // n, n)\n\n\ndef is_simple_power_iterative(x, n):\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power_iterative(1, 4) => true\n    is_simple_power_iterative(2, 2) => true\n    is_simple_power_iterative(8, 2) => true\n    is_simple_power_iterative(3, 2) => false\n    is_simple_power_iterative(3, 1) => false\n    is_simple_power_iterative(5, 3) => false\n    \"\"\"\n    if x == 1:\n        return True\n    else:\n        return x % n == 0 and is_simple_power_iterative(x // n, n)\n\n\ndef is_simple_power_binary_search(x, n):\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is"
    },
    {
      "rank": 90,
      "score": 1.0,
      "candidate": "if n == 1:\n        return False\n    if x == 1:\n        return True\n\n    return is_simple_power(x, n - 1)\n\n\ndef is_simple_power_recur(x, n):\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power_recur(1, 4) => true\n    is_simple_power_recur(2, 2) => true\n    is_simple_power_recur(8, 2) => true\n    is_simple_power_recur(3, 2) => false\n    is_simple_power_recur(3, 1) => false\n    is_simple_power_recur(5, 3) => false\n    \"\"\"\n    if n == 1:\n        return False\n    if x == 1:\n        return True\n    if n % 2 == 0:\n        return is_simple_power_recur(x/2, n/2)\n    return is_simple_power_recur(x/2, n/2) and is_simple_power_recur(x/2, n/4)\n\n\ndef is_simple_power_iterative(x, n):\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power_iterative(1, 4) => true\n    is_simple_power_iterative(2, 2) => true\n    is_simple_power_iterative(8, 2) => true\n    is_simple_power_iterative(3, 2) => false\n    is_simple_power_iterative(3, 1) => false\n    is_simple_power_iterative(5, 3) => false\n    \"\"\"\n    if n == 1:\n        return False\n    if x == 1:\n        return True\n    if n % 2 == 0:\n        return is_simple"
    },
    {
      "rank": 91,
      "score": 1.0,
      "candidate": "if n == 1:\n        return x == 1\n    if n == 2:\n        return x == 2\n    if n % 2 == 0:\n        return is_simple_power(x, n/2)\n    else:\n        return is_simple_power(x, n//2)\n\n\ndef is_square(x):\n    \"\"\"Your task is to write a function that returns true if a number x is a square of n and false\n    in other cases.\n    x is a square of n if n**int=x\n    For example:\n    is_square(1) => true\n    is_square(2) => true\n    is_square(8) => true\n    is_square(3) => false\n    is_square(3, 1) => false\n    is_square(5) => false\n    \"\"\"\n    if x == 1:\n        return True\n    if x == 2:\n        return True\n    if x % 2 == 0:\n        return is_square(x/2)\n    else:\n        return is_square(x/2)\n\n\ndef is_cube(x):\n    \"\"\"Your task is to write a function that returns true if a number x is a cube of n and false\n    in other cases.\n    x is a cube of n if n**int=x\n    For example:\n    is_cube(1) => true\n    is_cube(2) => true\n    is_cube(8) => true\n    is_cube(3) => false\n    is_cube(3, 1) => false\n    is_cube(5) => false\n    \"\"\"\n    if x == 1:\n        return True\n    if x == 2:\n        return True\n    if x % 2 == 0:\n        return is_cube(x/2)\n    else:\n        return is_cube(x/2)"
    },
    {
      "rank": 92,
      "score": 1.0,
      "candidate": "if x == 1:\n        return True\n    if n == 1:\n        return False\n    return is_simple_power(x, n-1) and is_simple_power(x, n-2)\n\n\ndef is_power_of_two(x):\n    \"\"\"Your task is to write a function that returns true if a number x is a power of two\n    and false in other cases.\n    x is a power of two if 2**int=x\n    For example:\n    is_power_of_two(1) => true\n    is_power_of_two(2) => true\n    is_power_of_two(8) => true\n    is_power_of_two(3) => false\n    is_power_of_two(3, 1) => false\n    is_power_of_two(5, 3) => false\n    \"\"\"\n    if x == 1:\n        return True\n    if x == 2:\n        return False\n    if x == 3:\n        return False\n    if x == 4:\n        return False\n    if x == 5:\n        return False\n    if x == 6:\n        return False\n    if x == 7:\n        return False\n    return is_power_of_two(x/2) and is_power_of_two(x/3)\n\n\ndef is_power_of_three(x):\n    \"\"\"Your task is to write a function that returns true if a number x is a power of\n    three and false in other cases.\n    x is a power of three if 3**int=x\n    For example:\n    is_power_of_three(1) => true\n    is_power_of_three(2) => true\n    is_power_of_three(8) => true\n    is_power_of_three(3) => false\n    is_power_of_three(3, 1) => false\n    is_power_of_three(5, 3) => false\n    \"\"\"\n    if x == 1:\n        return True\n    if x == 2:\n        return False\n    if x == 3:\n        return False\n    if x == 4:"
    },
    {
      "rank": 93,
      "score": 1.0,
      "candidate": "if x < 0:\n        return False\n    if x == 0:\n        return True\n    else:\n        return is_simple_power(x/n, n)\n\n\ndef is_simple_power_2(x, n):\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power_2(1, 4) => true\n    is_simple_power_2(2, 2) => true\n    is_simple_power_2(8, 2) => true\n    is_simple_power_2(3, 2) => false\n    is_simple_power_2(3, 1) => false\n    is_simple_power_2(5, 3) => false\n    \"\"\"\n    if x < 0:\n        return False\n    if x == 0:\n        return True\n    else:\n        return is_simple_power_2(x/n, n)\n\n\ndef is_simple_power_3(x, n):\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power_3(1, 4) => true\n    is_simple_power_3(2, 2) => true\n    is_simple_power_3(8, 2) => true\n    is_simple_power_3(3, 2) => false\n    is_simple_power_3(3, 1) => false\n    is_simple_power_3(5, 3) => false\n    \"\"\"\n    if x < 0:\n        return False\n    if x == 0:\n        return True\n    else:\n        return is_simple_power_3(x/n, n)\n\n\ndef is_simple_power_4(x, n):\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a"
    },
    {
      "rank": 94,
      "score": 1.0,
      "candidate": "return x == 1 or x == n\n\n\nprint(is_simple_power(1, 4))\nprint(is_simple_power(2, 2))\nprint(is_simple_power(8, 2))\nprint(is_simple_power(3, 2))\nprint(is_simple_power(3, 1))\nprint(is_simple_power(5, 3))\n\n\ndef is_power_of_two(x):\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of two and false in other cases.\n    x is a simple power of two if x**2=x and x**2=2\n    For example:\n    is_power_of_two(1) => true\n    is_power_of_two(2) => true\n    is_power_of_two(8) => true\n    is_power_of_two(3) => false\n    is_power_of_two(3) => false\n    is_power_of_two(5) => false\n    \"\"\"\n    return x == 1 or x == 2 or x == 8 or x == 4 or x == 6 or x == 8\n\n\nprint(is_power_of_two(1))\nprint(is_power_of_two(2))\nprint(is_power_of_two(8))\nprint(is_power_of_two(3))\nprint(is_power_of_two(3))\nprint(is_power_of_two(5))"
    },
    {
      "rank": 95,
      "score": 1.0,
      "candidate": "return n**int(x) == x\n\n\ndef is_prime(x):\n    \"\"\"Your task is to write a function that returns true if a number x is prime and\n    false in other cases.\n    x is prime if n^int=x\n    For example\n    is_prime(1) => true\n    is_prime(5) => true\n    is_prime(10) => false\n    is_prime(3) => false\n    is_prime(5) => false\n    \"\"\"\n    if x < 2:\n        return False\n    for i in range(2, int(x**0.5)+1):\n        if x % i == 0:\n            return False\n    return True\n\n\ndef is_prime_list(x):\n    \"\"\"Your task is to write a function that returns true if a list of numbers x is\n    prime and false in other cases.\n    x is prime if n^int=x\n    For example\n    is_prime_list([1]) => true\n    is_prime_list([5]) => true\n    is_prime_list([10]) => false\n    is_prime_list([3]) => false\n    is_prime_list([5]) => false\n    \"\"\"\n    if x < 2:\n        return False\n    for i in range(2, int(x**0.5)+1):\n        if x % i == 0:\n            return False\n    return True\n\n\ndef is_prime_dict(x):\n    \"\"\"Your task is to write a function that returns true if a dictionary x is\n    prime and false in other cases.\n    x is prime if n^int=x\n    For example\n    is_prime_dict({1}) => true\n    is_prime_dict({5}) => true\n    is_prime_dict({10}) => false\n    is_prime_dict({3}) => false\n    is_prime_dict({5}) => false\n    \"\"\"\n    if x < 2:\n        return False\n    for i in range(2, int(x**0.5)+1):\n        if x % i == 0:\n            return False\n    return True\n\n\ndef is_prime_tuple(x):\n    \"\"\"Your task is"
    },
    {
      "rank": 96,
      "score": 1.0,
      "candidate": "if n == 1:\n        return x == 1\n    if n == 2:\n        return x == 2\n    if x % n == 0:\n        return is_simple_power(x / n, n)\n    else:\n        return False\n\n\ndef is_simple_power_2(x, n):\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power_2(1, 4) => true\n    is_simple_power_2(2, 2) => true\n    is_simple_power_2(8, 2) => true\n    is_simple_power_2(3, 2) => false\n    is_simple_power_2(3, 1) => false\n    is_simple_power_2(5, 3) => false\n    \"\"\"\n    if n == 1:\n        return x == 1\n    if n == 2:\n        return x == 2\n    if x % n == 0:\n        return is_simple_power_2(x / n, n)\n    else:\n        return False"
    },
    {
      "rank": 97,
      "score": 1.0,
      "candidate": "if n < 0:\n        return False\n    elif n == 0:\n        return True\n\n    if n % 1 == 0:\n        return is_simple_power(x, n // 1)\n    else:\n        return is_simple_power(x, n // 2) or is_simple_power(x, n // 3)\n\n\nif __name__ == \"__main__\":\n    assert is_simple_power(1, 4) == True\n    assert is_simple_power(2, 2) == True\n    assert is_simple_power(8, 2) == True\n    assert is_simple_power(3, 2) == False\n    assert is_simple_power(3, 1) == False\n    assert is_simple_power(5, 3) == False"
    },
    {
      "rank": 98,
      "score": 1.0,
      "candidate": "if x == 1:\n        return True\n    if n == 1:\n        return False\n\n    if n % x == 0:\n        return is_simple_power(x, n / x)\n    else:\n        return False\n\n\ndef is_power_of_2(x, n):\n    \"\"\"Your task is to write a function that returns true if a number x is a power\n    of 2 and false in other cases.\n    x is a power of 2 if n**int=x\n    For example:\n    is_power_of_2(1, 4) => true\n    is_power_of_2(2, 2) => true\n    is_power_of_2(8, 2) => true\n    is_power_of_2(3, 2) => false\n    is_power_of_2(3, 1) => false\n    is_power_of_2(5, 3) => false\n    \"\"\"\n\n    if x == 1:\n        return True\n    if n == 1:\n        return False\n\n    if n % x == 0:\n        return is_power_of_2(x, n / x)\n    else:\n        return False\n\n\ndef is_power_of_3(x, n):\n    \"\"\"Your task is to write a function that returns true if a number x is a power\n    of 3 and false in other cases.\n    x is a power of 3 if n**int=x\n    For example:\n    is_power_of_3(1, 4) => true\n    is_power_of_3(2, 2) => true\n    is_power_of_3(8, 2) => true\n    is_power_of_3(3, 2) => false\n    is_power_of_3(3, 1) => false\n    is_power_of_3(5, 3) => false\n    \"\"\"\n\n    if x == 1:\n        return True\n    if n == 1:\n        return False\n\n    if n % x == 0:\n        return is_power_of_3(x, n / x)\n    else:\n        return False\n\n\ndef is_power_of_5"
    },
    {
      "rank": 99,
      "score": 1.0,
      "candidate": "return (x == 1) or (x == n) or (x == n**int(x))\n\n\ndef is_power_of_two(x):\n    \"\"\"Your task is to write a function that returns true if a number x is a power of two.\n    x is a power of two if x**int=x\n    For example:\n    is_power_of_two(1) => true\n    is_power_of_two(2) => true\n    is_power_of_two(8) => true\n    is_power_of_two(3) => false\n    is_power_of_two(3, 1) => false\n    is_power_of_two(5, 3) => false\n    \"\"\"\n    return (x == 2) or (x == 3) or (x == n**int(x))\n\n\ndef is_power_of_three(x):\n    \"\"\"Your task is to write a function that returns true if a number x is a power of three.\n    x is a power of three if n**int=x\n    For example:\n    is_power_of_three(1) => true\n    is_power_of_three(2) => true\n    is_power_of_three(8) => true\n    is_power_of_three(3) => false\n    is_power_of_three(3, 1) => false\n    is_power_of_three(5, 3) => false\n    \"\"\"\n    return (x == 3) or (x == 4) or (x == 5) or (x == n**int(x))\n\n\ndef is_power_of_four(x):\n    \"\"\"Your task is to write a function that returns true if a number x is a power of four.\n    x is a power of four if n**int=x\n    For example:\n    is_power_of_four(1) => true\n    is_power_of_four(2) => true\n    is_power_of_four(8) => true\n    is_power_of_four(3) => false\n    is_power_of_four(3, 1)"
    },
    {
      "rank": 100,
      "score": 1.0,
      "candidate": "return x == 1 or x == n or x == n**int(x)\n\n\ndef is_simple_power_2(x, n):\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power_2(1, 4) => true\n    is_simple_power_2(2, 2) => true\n    is_simple_power_2(8, 2) => true\n    is_simple_power_2(3, 2) => false\n    is_simple_power_2(3, 1) => false\n    is_simple_power_2(5, 3) => false\n    \"\"\"\n    return x == 1 or x == n or x == n**int(x)\n\n\ndef is_simple_power_3(x, n):\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power_3(1, 4) => true\n    is_simple_power_3(2, 2) => true\n    is_simple_power_3(8, 2) => true\n    is_simple_power_3(3, 2) => false\n    is_simple_power_3(3, 1) => false\n    is_simple_power_3(5, 3) => false\n    \"\"\"\n    return x == 1 or x == n or x == n**int(x)"
    }
  ]
}