{
  "timestamp": "2025-09-14T11:34:48.822237",
  "method": "improved_llm_judge",
  "judge_model": "codellama/CodeLlama-7b-Python-hf",
  "target_model": "codet5-770m",
  "dataset": "humaneval",
  "problem_number": 43,
  "total_candidates": 100,
  "results": [
    {
      "rank": 1,
      "score": 10.0,
      "candidate": "d = {}\n    for i in l:\n        if i in d:\n            return True\n        else:\n            d[i] = True\n    return False\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 2,
      "score": 10.0,
      "candidate": "l.sort()\n    for i in range(len(l)-1):\n        for j in range(i+1, len(l)):\n            if l[i] + l[j] == 0:\n                return True\n    return False\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 3,
      "score": 10.0,
      "candidate": "s = set(l)\n    for i in s:\n        if i + 0 == 0:\n            return True\n    return False\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 4,
      "score": 10.0,
      "candidate": "d = {}\n    for i in l:\n        if i in d:\n            return True\n        else:\n            d[i] = True\n    return False\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 5,
      "score": 10.0,
      "candidate": "d = {}\n    for i in l:\n        if i in d:\n            return True\n        else:\n            d[i] = True\n    return False\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 6,
      "score": 10.0,
      "candidate": "for i in range(len(l) - 1):\n        for j in range(i + 1, len(l)):\n            if l[i] + l[j] == 0:\n                return True\n    return False\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 7,
      "score": 10.0,
      "candidate": "if len(l) < 2:\n        return False\n    l.sort()\n    for i in range(0, len(l) - 1):\n        if i == 0 or l[i]!= l[i - 1]:\n            if l[i] == 0:\n                return True\n    return False\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 8,
      "score": 10.0,
      "candidate": "d = {}\n    for i in l:\n        if i in d:\n            return True\n        else:\n            d[i] = 1\n    return False\n\n\ndef pairs_sum_to_zero_rec(l):\n    \"\"\"\n    pairs_sum_to_zero_rec takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairs_sum_to_zero_rec([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero_rec([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero_rec([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero_rec([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero_rec([1])\n    False\n    \"\"\"\n    d = {}\n    for i in l:\n        if i in d:\n            return True\n        else:\n            d[i] = 1\n    return False\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 9,
      "score": 10.0,
      "candidate": "seen = {}\n    for i in l:\n        if i in seen:\n            return True\n        else:\n            seen[i] = True\n    return False\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 10,
      "score": 10.0,
      "candidate": "d = {}\n    for i in l:\n        if i in d:\n            return True\n        else:\n            d[i] = 1\n    return False\n\n\ndef pairs_sum_to_zero2(l):\n    \"\"\"\n    pairs_sum_to_zero2 takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairs_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero([1])\n    False\n    \"\"\"\n    d = {}\n    for i in l:\n        if i in d:\n            return True\n        else:\n            d[i] = 1\n    return False\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 11,
      "score": 10.0,
      "candidate": "d = {}\n    for i in l:\n        if i in d:\n            return True\n        else:\n            d[i] = True\n    return False\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 12,
      "score": 10.0,
      "candidate": "hash_table = {}\n\n    for i in l:\n        if i in hash_table:\n            return True\n        else:\n            hash_table[i] = True\n\n    return False\n\n\ndef pairs_sum_to_zero_2(l):\n    \"\"\"\n    pairs_sum_to_zero_2 takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairs_sum_to_zero_2([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero_2([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero_2([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero_2([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero_2([1])\n    False\n    \"\"\"\n    hash_table = {}\n    for i in l:\n        if i in hash_table:\n            return True\n        else:\n            hash_table[i] = True\n\n    return False\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 13,
      "score": 10.0,
      "candidate": "if not l:\n        return False\n    if len(l) < 2:\n        return False\n    d = {}\n    for i in l:\n        if i in d:\n            return True\n        d[i] = 1\n    return False\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 14,
      "score": 10.0,
      "candidate": "hash_map = {}\n    for i in l:\n        if i in hash_map:\n            return True\n        else:\n            hash_map[i] = True\n    return False\n\n\ndef pairs_sum_to_zero2(l):\n    \"\"\"\n    pairs_sum_to_zero2 takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairs_sum_to_zero2([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero2([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero2([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero2([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero2([1])\n    False\n    \"\"\"\n    hash_map = {}\n    for i in l:\n        if i in hash_map:\n            return True\n        else:\n            hash_map[i] = False\n    return False\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 15,
      "score": 10.0,
      "candidate": "dict_of_lists = {}\n    for i in l:\n        if i in dict_of_lists.keys():\n            return True\n        else:\n            dict_of_lists[i] = True\n    return False\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 16,
      "score": 10.0,
      "candidate": "for i in range(len(l)):\n        for j in range(i + 1, len(l)):\n            if l[i] + l[j] == 0:\n                return True\n    return False\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 17,
      "score": 10.0,
      "candidate": "set_1 = set()\n    set_2 = set()\n    for i in l:\n        if i in set_1:\n            return True\n        elif i in set_2:\n            return True\n        else:\n            set_1.add(i)\n            set_2.add(i - i)\n    return False\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 18,
      "score": 10.0,
      "candidate": "seen = {}\n    for x in l:\n        if x in seen:\n            return True\n        else:\n            seen[x] = True\n    return False\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 19,
      "score": 10.0,
      "candidate": "d = {}\n    for i in l:\n        if i in d:\n            return True\n        else:\n            d[i] = True\n    return False\n\n\ndef pairs_sum_to_zero_recursive(l, d, s):\n    \"\"\"\n    pairs_sum_to_zero_recursive takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairs_sum_to_zero_recursive([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero_recursive([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero_recursive([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero_recursive([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero_recursive([1])\n    False\n    \"\"\"\n    if s == 0:\n        return True\n    if s in d:\n        return True\n    if l[0] == s:\n        return False\n    if l[1] == s:\n        return False\n    d[s] = True\n    return pairs_sum_to_zero_recursive(l[1:], d, s - l[0])\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 20,
      "score": 10.0,
      "candidate": "d = {}\n    for i in l:\n        if i in d:\n            return True\n        d[i] = True\n    return False\n\n\ndef pairs_sum_to_zero_1(l):\n    \"\"\"\n    pairs_sum_to_zero_1 takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairs_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero([1])\n    False\n    \"\"\"\n    d = {}\n    for i in l:\n        if i in d:\n            return True\n        d[i] = True\n    return False\n\n\ndef pairs_sum_to_zero_2(l):\n    \"\"\"\n    pairs_sum_to_zero_2 takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairs_sum_to_zero_2([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero_2([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero_2([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero_2([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero_2([1])\n    False\n    \"\"\"\n    d = {}\n    for i in l:\n        if i in d:\n            return True\n        d[i] = True\n    return False\n\n\ndef pairs_sum_to_zero_3(l):\n    \"\"\"\n    pairs_sum_to_zero_3 takes a list of integers as an input.\n    it"
    },
    {
      "rank": 21,
      "score": 10.0,
      "candidate": "dict = {}\n    for i in l:\n        if i in dict:\n            return True\n        else:\n            dict[i] = 1\n    return False\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 22,
      "score": 10.0,
      "candidate": "d = {}\n    for i in l:\n        if i in d:\n            return True\n        d[i] = True\n    return False\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 23,
      "score": 10.0,
      "candidate": "d = {}\n    for i in l:\n        if i in d:\n            return True\n        else:\n            d[i] = True\n    return False\n\n\ndef pairs_sum_to_zero_v2(l):\n    \"\"\"\n    pairs_sum_to_zero_v2 takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairs_sum_to_zero_v2([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero_v2([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero_v2([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero_v2([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero_v2([1])\n    False\n    \"\"\"\n    d = {}\n    for i in l:\n        if i in d:\n            return True\n        else:\n            d[i] = True\n    return False\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 24,
      "score": 10.0,
      "candidate": "dict = {}\n    for i in l:\n        if i in dict.keys():\n            return True\n        else:\n            dict[i] = True\n    return False\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 25,
      "score": 10.0,
      "candidate": "if not l:\n        return False\n\n    for i in range(len(l)):\n        for j in range(i+1, len(l)):\n            if l[i] + l[j] == 0:\n                return True\n\n    return False\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 26,
      "score": 10.0,
      "candidate": "d = {}\n    for i in l:\n        if (i in d):\n            return True\n        d[l[0] - i] = i\n    return False\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 27,
      "score": 10.0,
      "candidate": "d = {}\n    for i in l:\n        if i in d:\n            return True\n        else:\n            d[i] = True\n    return False\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 28,
      "score": 10.0,
      "candidate": "d = {}\n    for x in l:\n        if x in d:\n            return True\n        else:\n            d[x] = True\n    return False\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 29,
      "score": 10.0,
      "candidate": "d = {}\n    for i in l:\n        if i in d:\n            return True\n        else:\n            d[i] = True\n    return False\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 30,
      "score": 10.0,
      "candidate": "d = {}\n    for i in l:\n        if i in d:\n            return True\n        d[i] = True\n    return False\n\n\ndef pairs_sum_to_zero_2(l):\n    \"\"\"\n    pairs_sum_to_zero_2 takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairs_sum_to_zero_2([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero_2([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero_2([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero_2([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero_2([1])\n    False\n    \"\"\"\n    d = {}\n    for i in l:\n        if i in d:\n            return True\n        d[i] = False\n    return False\n\n\ndef pairs_sum_to_zero_3(l):\n    \"\"\"\n    pairs_sum_to_zero_3 takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairs_sum_to_zero_3([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero_3([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero_3([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero_3([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero_3([1])\n    False\n    \"\"\"\n    d = {}\n    for i in l:\n        if i in d:\n            return True\n        d[i] = False\n    return False\n\n\ndef pairs_sum_to_zero_4(l):\n    \"\"\"\n    pairs_sum_to_zero_4 takes a"
    },
    {
      "rank": 31,
      "score": 10.0,
      "candidate": "d = {}\n    for i in l:\n        if i in d:\n            return True\n        else:\n            d[i] = 1\n    return False\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 32,
      "score": 10.0,
      "candidate": "for i in range(len(l)):\n        for j in range(i+1, len(l)):\n            if l[i] + l[j] == 0:\n                return True\n    return False\n\n\ndef pairs_sum_to_zero_recursive(l):\n    \"\"\"\n    pairs_sum_to_zero_recursive takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairs_sum_to_zero_recursive([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero_recursive([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero_recursive([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero_recursive([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero_recursive([1])\n    False\n    \"\"\"\n    if len(l) < 2:\n        return False\n\n    if l[0] == l[1]:\n        return False\n\n    if l[0] == 0:\n        return True\n\n    return pairs_sum_to_zero_recursive(l[1:])\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 33,
      "score": 10.0,
      "candidate": "d = {}\n    for i in l:\n        if i in d:\n            return True\n        d[i] = True\n    return False\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 34,
      "score": 10.0,
      "candidate": "d = {}\n    for i in l:\n        if (i in d):\n            return True\n        else:\n            d[l[0]] = True\n    return False\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 35,
      "score": 10.0,
      "candidate": "d = {}\n    for i in l:\n        if i in d:\n            return True\n        else:\n            d[i] = 1\n    return False\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 36,
      "score": 10.0,
      "candidate": "hash_table = {}\n    for i in l:\n        if i in hash_table:\n            return True\n        else:\n            hash_table[i] = True\n\n    return False\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 37,
      "score": 10.0,
      "candidate": "d = {}\n    for i in l:\n        if i in d:\n            return True\n        else:\n            d[i] = True\n    return False\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 38,
      "score": 10.0,
      "candidate": "d = {}\n    for i in l:\n        if (i in d):\n            return True\n        else:\n            d[i] = True\n    return False\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 39,
      "score": 10.0,
      "candidate": "# if the list is empty, return false\n    if not l:\n        return False\n\n    # if the list has only one element, return true\n    if len(l) == 1:\n        return True\n\n    # if the list has 2 elements, return true\n    if len(l) == 2:\n        return l[0] == l[1] and l[0]!= 0\n\n    # otherwise, sort the list\n    l.sort()\n\n    # check the first element\n    first = l[0]\n\n    # check the last element\n    last = l[-1]\n\n    # if the first element and last element are distinct, return True\n    if first == last:\n        return True\n\n    # otherwise, return False\n    return False\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 40,
      "score": 9.0,
      "candidate": "d = {}\n    for i in l:\n        if i in d:\n            return True\n        d[i] = 1\n    return False\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 41,
      "score": 9.0,
      "candidate": "for i in range(len(l)):\n        for j in range(len(l)):\n            if l[i] + l[j] == 0:\n                return True\n    return False"
    },
    {
      "rank": 42,
      "score": 9.0,
      "candidate": "d = {}\n    for i in l:\n        if i in d:\n            return True\n        else:\n            d[i] = True\n    return False\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 43,
      "score": 9.0,
      "candidate": "d = {}\n    for i in l:\n        if i in d:\n            return True\n        else:\n            d[i] = True\n    return False\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 44,
      "score": 9.0,
      "candidate": "seen = set()\n    for i in l:\n        if i in seen:\n            return True\n        else:\n            seen.add(i)\n    return False\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 45,
      "score": 9.0,
      "candidate": "d = {}\n    for i in l:\n        if i in d:\n            return True\n        d[i] = True\n    return False\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 46,
      "score": 9.0,
      "candidate": "d = {}\n    for i in l:\n        if i in d:\n            return True\n        d[i] = True\n    return False\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 47,
      "score": 8.0,
      "candidate": "d = {}\n    for i in l:\n        if (i in d):\n            return True\n        d[i] = 1\n    return False\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 48,
      "score": 8.0,
      "candidate": "if len(l) < 2:\n        return False\n    for i in range(len(l)):\n        for j in range(i+1, len(l)):\n            if l[i] + l[j] == 0:\n                return True\n    return False"
    },
    {
      "rank": 49,
      "score": 8.0,
      "candidate": "dict = {}\n    for i in range(len(l)):\n        if l[i] in dict:\n            return True\n        else:\n            dict[l[i]] = i\n    return False\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 50,
      "score": 8.0,
      "candidate": "if len(l) < 2:\n        return False\n    dict = {}\n    for i in l:\n        if i in dict:\n            return True\n        dict[i] = 1\n    return False\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 51,
      "score": 8.0,
      "candidate": "seen = {}\n    for i in l:\n        if i in seen:\n            return True\n        seen[i] = True\n    return False\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 52,
      "score": 8.0,
      "candidate": "l.sort()\n    for i in range(len(l)-1):\n        for j in range(i+1, len(l)):\n            if l[i] + l[j] == 0:\n                return True\n    return False\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 53,
      "score": 8.0,
      "candidate": "if len(l) < 2:\n        return False\n    if len(l) == 2:\n        if l[0] == l[1]:\n            return False\n        else:\n            return True\n\n    for i in range(len(l) - 1):\n        for j in range(i + 1, len(l)):\n            if l[i] + l[j] == 0:\n                return True\n    return False"
    },
    {
      "rank": 54,
      "score": 8.0,
      "candidate": "hash = {}\n    for i in l:\n        if i in hash:\n            return True\n        else:\n            hash[i] = 1\n    return False\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 55,
      "score": 8.0,
      "candidate": "for i in range(len(l)):\n        for j in range(i+1, len(l)):\n            if l[i] + l[j] == 0:\n                return True\n    return False\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 56,
      "score": 8.0,
      "candidate": "# write your code here\n\n    # we're using set, so that we can use the same hash table\n    # for the elements in the list.\n    set_l = set(l)\n    for i in l:\n        if i in set_l:\n            return True\n    return False\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 57,
      "score": 8.0,
      "candidate": "for i in range(len(l)):\n        for j in range(i + 1, len(l)):\n            if l[i] + l[j] == 0:\n                return True\n    return False\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 58,
      "score": 8.0,
      "candidate": "for i in range(len(l)):\n        for j in range(i + 1, len(l)):\n            if l[i] + l[j] == 0:\n                return True\n    return False\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 59,
      "score": 8.0,
      "candidate": "l.sort()\n    for i in range(len(l) - 1):\n        for j in range(i + 1, len(l)):\n            if l[i] + l[j] == 0:\n                return True\n    return False\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 60,
      "score": 8.0,
      "candidate": "if len(l) < 2:\n        return False\n\n    d = {}\n    for i in l:\n        if i in d:\n            return True\n        else:\n            d[i] = True\n\n    return False\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 61,
      "score": 8.0,
      "candidate": "d = {}\n    for x in l:\n        if x in d.keys():\n            return True\n        d[x] = 1\n    return False\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 62,
      "score": 8.0,
      "candidate": "l = sorted(l)\n    for i in range(len(l) - 1):\n        for j in range(i + 1, len(l)):\n            if l[i] + l[j] == 0:\n                return True\n    return False\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 63,
      "score": 8.0,
      "candidate": "hash_table = {}\n    for i in l:\n        if (i in hash_table):\n            return True\n        else:\n            hash_table[i] = 1\n    return False"
    },
    {
      "rank": 64,
      "score": 8.0,
      "candidate": "for i in range(len(l)):\n        for j in range(len(l)):\n            if l[i] + l[j] == 0:\n                return True\n    return False\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 65,
      "score": 8.0,
      "candidate": "d = {}\n    for i in l:\n        if i in d:\n            return True\n        else:\n            d[i] = 1\n    return False"
    },
    {
      "rank": 66,
      "score": 8.0,
      "candidate": "for i in range(len(l)):\n        for j in range(len(l)):\n            if i!= j and l[i] + l[j] == 0:\n                return True\n    return False\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 67,
      "score": 8.0,
      "candidate": "for i in range(len(l)):\n        for j in range(i + 1, len(l)):\n            if l[i] + l[j] == 0:\n                return True\n    return False\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 68,
      "score": 8.0,
      "candidate": "# check if list is empty\n    if len(l) == 0:\n        return False\n\n    # check if list is not empty\n    if len(l) == 1:\n        return True\n\n    # if list is not empty\n    for i in range(len(l) - 1):\n        # if the difference between the two elements is zero\n        if l[i] + l[i + 1] == 0:\n            return True\n\n    return False\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 69,
      "score": 8.0,
      "candidate": "for i in range(len(l)):\n        for j in range(i + 1, len(l)):\n            if l[i] + l[j] == 0:\n                return True\n    return False\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 70,
      "score": 8.0,
      "candidate": "l.sort()\n    for i in range(len(l)):\n        if l[i]!= 0:\n            if i > 0 and l[i] == l[i-1]:\n                return True\n            else:\n                return False\n    return False\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 71,
      "score": 8.0,
      "candidate": "d = {}\n    for i in l:\n        if i in d:\n            return True\n        else:\n            d[i] = True\n    return False\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 72,
      "score": 8.0,
      "candidate": "d = {}\n    for i in l:\n        if i in d:\n            return True\n        d[i] = 1\n    return False\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 73,
      "score": 8.0,
      "candidate": "if len(l) == 1:\n        return False\n    else:\n        d = {}\n        for i in l:\n            if i in d:\n                return True\n            else:\n                d[i] = True\n    return False\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 74,
      "score": 8.0,
      "candidate": "n = len(l)\n    if n < 2:\n        return False\n    else:\n        dict_ = {}\n        for i in l:\n            if i in dict_:\n                return True\n            else:\n                dict_[l[0]] = i"
    },
    {
      "rank": 75,
      "score": 8.0,
      "candidate": "for i in range(len(l)):\n        for j in range(i + 1, len(l)):\n            if l[i] + l[j] == 0:\n                return True\n    return False\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 76,
      "score": 8.0,
      "candidate": "d = {}\n    for i in l:\n        if i in d:\n            return True\n        else:\n            d[i] = True\n    return False\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 77,
      "score": 8.0,
      "candidate": "for i in range(len(l)):\n        for j in range(i + 1, len(l)):\n            if l[i] + l[j] == 0:\n                return True\n    return False\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 78,
      "score": 8.0,
      "candidate": "for i in range(len(l)):\n        for j in range(i + 1, len(l)):\n            if l[i] + l[j] == 0:\n                return True\n    return False\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 79,
      "score": 8.0,
      "candidate": "hash_map = {}\n    for i in l:\n        hash_map[i] = hash_map.get(i, 0) + 1\n\n    for i in l:\n        if i in hash_map:\n            return True\n\n    return False\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 80,
      "score": 8.0,
      "candidate": "for i in range(len(l)):\n        for j in range(i + 1, len(l)):\n            if l[i] + l[j] == 0:\n                return True\n    return False\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 81,
      "score": 8.0,
      "candidate": "hash_table = {}\n    for i in l:\n        if i in hash_table:\n            return True\n        else:\n            hash_table[i] = True\n    return False\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 82,
      "score": 8.0,
      "candidate": "d = {}\n    for i in l:\n        if i in d:\n            return True\n        else:\n            d[i] = True\n    return False\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 83,
      "score": 8.0,
      "candidate": "for i in range(len(l)):\n        for j in range(i + 1, len(l)):\n            if l[i] + l[j] == 0:\n                return True\n    return False\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 84,
      "score": 8.0,
      "candidate": "seen = set()\n    for i in l:\n        if i in seen:\n            return True\n        else:\n            seen.add(i)\n    return False\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 85,
      "score": 8.0,
      "candidate": "l.sort()\n    for i in range(len(l) - 1):\n        for j in range(i + 1, len(l)):\n            if l[i] + l[j] == 0:\n                return True\n    return False\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 86,
      "score": 8.0,
      "candidate": "for i in range(len(l)):\n        for j in range(i + 1, len(l)):\n            if l[i] + l[j] == 0:\n                return True\n    return False\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 87,
      "score": 8.0,
      "candidate": "d = {}\n    for i in l:\n        if i in d:\n            return True\n        else:\n            d[i] = True\n    return False\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 88,
      "score": 8.0,
      "candidate": "seen = {}\n    for i in l:\n        if i in seen:\n            return True\n        else:\n            seen[i] = True\n    return False\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 89,
      "score": 8.0,
      "candidate": "seen = set()\n    for x in l:\n        if x in seen:\n            return True\n        else:\n            seen.add(x)\n    return False\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 90,
      "score": 8.0,
      "candidate": "for i in range(len(l)):\n        for j in range(len(l)):\n            if i!= j and l[i] + l[j] == 0:\n                return True\n    return False\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 91,
      "score": 8.0,
      "candidate": "d = {}\n    for i in l:\n        if (i in d):\n            return True\n        else:\n            d[i] = True\n    return False\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 92,
      "score": 8.0,
      "candidate": "if len(l) == 0:\n        return False\n    l.sort()\n    for i in range(len(l) - 1):\n        j = i + 1\n        if l[i] + l[j] == 0:\n            return True\n    return False\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 93,
      "score": 8.0,
      "candidate": "d = {}\n    for i in l:\n        if i in d:\n            return True\n        else:\n            d[i] = True\n\n    return False\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 94,
      "score": 8.0,
      "candidate": "s = set(l)\n    if len(s) < 2:\n        return False\n    for i in s:\n        for j in s:\n            if i + j == 0:\n                return True\n    return False\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 95,
      "score": 8.0,
      "candidate": "d = {}\n    for i in l:\n        if (i in d):\n            return True\n        d[i] = 1\n    return False\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 96,
      "score": 8.0,
      "candidate": "d = {}\n    for i in l:\n        if i in d:\n            return True\n        else:\n            d[i] = 1\n    return False"
    },
    {
      "rank": 97,
      "score": 8.0,
      "candidate": "d = {}\n    for i in l:\n        if i in d:\n            return True\n        else:\n            d[i] = True\n    return False"
    },
    {
      "rank": 98,
      "score": 8.0,
      "candidate": "d = {}\n    for x in l:\n        if x in d:\n            return True\n        d[x] = True\n    return False\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 99,
      "score": 8.0,
      "candidate": "if len(l) < 2:\n        return False\n\n    d = {}\n    for i in l:\n        if i in d:\n            return True\n        else:\n            d[i] = True\n    return False\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 100,
      "score": 1.0,
      "candidate": "for i in range(0, len(l)):\n        for j in range(i + 1, len(l)):\n            if l[i] + l[j] == 0:\n                return True\n    return False\n\n\ndef pairs_sum_to_zero_2(l):\n    \"\"\"\n    pairs_sum_to_zero_2 takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairs_sum_to_zero_2([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero_2([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero_2([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero_2([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero_2([1])\n    False\n    \"\"\"\n    for i in range(0, len(l)):\n        for j in range(i + 1, len(l)):\n            if l[i] + l[j] == 0:\n                return True\n    return False\n\n\ndef pairs_sum_to_zero_3(l):\n    \"\"\"\n    pairs_sum_to_zero_3 takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairs_sum_to_zero_3([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero_3([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero_3([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero_3([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero_3([1])\n    False\n    \"\"\"\n    for i in range(0, len(l)):\n        for j in range(i + 1, len(l)):"
    }
  ]
}