{
  "timestamp": "2025-09-14T11:43:34.763895",
  "method": "improved_llm_judge",
  "judge_model": "codellama/CodeLlama-7b-Python-hf",
  "target_model": "codet5-770m",
  "dataset": "humaneval",
  "problem_number": 63,
  "total_candidates": 100,
  "results": [
    {
      "rank": 1,
      "score": 10.0,
      "candidate": "a, b = 0, 1\n    for i in range(n):\n        a, b = b, a + b\n    return a\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 2,
      "score": 10.0,
      "candidate": "if n <= 2:\n        return n\n    return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 3,
      "score": 10.0,
      "candidate": "if n < 0:\n        raise ValueError\n    a, b = 0, 1\n    for _ in range(n):\n        a, b = b, a + b\n    return a\n\n\nif __name__ == '__main__':\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 4,
      "score": 10.0,
      "candidate": "a, b = 0, 1\n    for _ in range(n):\n        a, b = b, a + b\n    return b\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 5,
      "score": 10.0,
      "candidate": "if n <= 1:\n        return n\n    return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 6,
      "score": 10.0,
      "candidate": "if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3)"
    },
    {
      "rank": 7,
      "score": 10.0,
      "candidate": "if n <= 1:\n        return n\n    else:\n        return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 8,
      "score": 10.0,
      "candidate": "if n == 0 or n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3)\n\n\nif __name__ == \"__main__\":\n    print(fibfib(int(input().strip())))"
    },
    {
      "rank": 9,
      "score": 10.0,
      "candidate": "a, b = 0, 1\n    for i in range(n):\n        a, b = b, a + b\n    return a"
    },
    {
      "rank": 10,
      "score": 10.0,
      "candidate": "if n < 0:\n        raise ValueError\n\n    if n == 0:\n        return 0\n\n    if n == 1:\n        return 1\n\n    fib = [0, 1]\n    for i in range(2, n + 1):\n        fib.append(fib[i - 2] + fib[i - 1])\n\n    return fib[n]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 11,
      "score": 10.0,
      "candidate": "a, b = 0, 1\n    for _ in range(n - 1):\n        a, b = b, a + b\n    return b\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 12,
      "score": 10.0,
      "candidate": "if n < 2:\n        return n\n    else:\n        return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 13,
      "score": 10.0,
      "candidate": "if n <= 1:\n        return n\n    return fibfib(n-1) + fibfib(n-2)"
    },
    {
      "rank": 14,
      "score": 10.0,
      "candidate": "if n < 2:\n        return n\n    return fibfib(n - 1) + fibfib(n - 2)\n\n\nif __name__ == '__main__':\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 15,
      "score": 10.0,
      "candidate": "if n < 2:\n        return n\n    else:\n        return fibfib(n - 1) + fibfib(n - 2)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 16,
      "score": 10.0,
      "candidate": "if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 17,
      "score": 10.0,
      "candidate": "if n < 2:\n        return n\n    return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 18,
      "score": 10.0,
      "candidate": "if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)"
    },
    {
      "rank": 19,
      "score": 10.0,
      "candidate": "if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 20,
      "score": 10.0,
      "candidate": "if n <= 1:\n        return 0\n    return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 21,
      "score": 10.0,
      "candidate": "a, b = 0, 1\n    for _ in range(n):\n        a, b = b, a + b\n    return a\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 22,
      "score": 10.0,
      "candidate": "a, b = 0, 1\n    for i in range(n):\n        a, b = b, a + b\n    return b\n\n\nif __name__ == '__main__':\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 23,
      "score": 10.0,
      "candidate": "if n < 2:\n        return n\n    return fibfib(n - 1) + fibfib(n - 2)"
    },
    {
      "rank": 24,
      "score": 10.0,
      "candidate": "if n <= 1:\n        return n\n    else:\n        return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 25,
      "score": 10.0,
      "candidate": "a, b = 0, 1\n    for _ in range(n):\n        a, b = b, a + b\n    return b\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 26,
      "score": 10.0,
      "candidate": "if n < 0:\n        raise ValueError(\"n should be a non-negative integer\")\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    a = 0\n    b = 1\n    for i in range(2, n + 1):\n        c = a + b\n        a = b\n        b = c\n    return b\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 27,
      "score": 10.0,
      "candidate": "if n == 0 or n == 1:\n        return n\n    else:\n        return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 28,
      "score": 10.0,
      "candidate": "if n <= 1:\n        return n\n    else:\n        return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 29,
      "score": 10.0,
      "candidate": "if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3)\n\n\nif __name__ == '__main__':\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 30,
      "score": 10.0,
      "candidate": "if n <= 1:\n        return n\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 31,
      "score": 10.0,
      "candidate": "if n <= 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 32,
      "score": 10.0,
      "candidate": "if n <= 1:\n        return n\n    return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 33,
      "score": 10.0,
      "candidate": "if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 34,
      "score": 10.0,
      "candidate": "if n <= 1:\n        return n\n    else:\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\n\nif __name__ == \"__main__\":\n    print(fibfib(int(input().strip())))"
    },
    {
      "rank": 35,
      "score": 10.0,
      "candidate": "if n == 0 or n == 1:\n        return n\n\n    a, b = 0, 1\n    for i in range(n):\n        a, b = b, a + b\n    return b\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 36,
      "score": 10.0,
      "candidate": "if n < 1:\n        raise ValueError(\"n must be >= 1\")\n    if n == 1:\n        return 0\n    if n == 2:\n        return 1\n    return fibfib(n-1) + fibfib(n-2)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 37,
      "score": 9.993251387631034,
      "candidate": "if n < 2:\n        return n\n    else:\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 38,
      "score": 9.982086980445024,
      "candidate": "if n == 0 or n == 1:\n        return n\n    else:\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 39,
      "score": 9.963994939209833,
      "candidate": "a = 0\n    b = 1\n    for i in range(n):\n        a, b = b, a + b\n    return a\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 40,
      "score": 9.930867849414408,
      "candidate": "a, b = 0, 1\n    for _ in range(n):\n        a, b = b, a + b\n    return a\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 41,
      "score": 9.907170511668092,
      "candidate": "a, b = 0, 1\n    for _ in range(n):\n        a, b = b, a + b\n    return a\n\n\nif __name__ == '__main__':\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 42,
      "score": 9.890164056081243,
      "candidate": "if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3)\n\n\nif __name__ == '__main__':\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 43,
      "score": 9.887111849756732,
      "candidate": "if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 44,
      "score": 9.882923312638333,
      "candidate": "if n <= 2:\n        return n\n    return fibfib(n - 1) + fibfib(n - 2)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 45,
      "score": 9.882706433312427,
      "candidate": "if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\n\nif __name__ == '__main__':\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 46,
      "score": 9.854153125103362,
      "candidate": "if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 47,
      "score": 9.850496324767066,
      "candidate": "if n <= 0:\n        return 0\n    if n == 1:\n        return 0\n    a, b = 0, 1\n    for _ in range(n - 1):\n        a, b = b, a + b\n    return b\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 48,
      "score": 9.849448152205355,
      "candidate": "a = 0\n    b = 1\n    for i in range(n):\n        a, b = b, a + b\n    return a\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 49,
      "score": 9.845393812074393,
      "candidate": "if n <= 1:\n        return n\n    return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3)\n\n\nif __name__ == '__main__':\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 50,
      "score": 9.836168926701117,
      "candidate": "if n <= 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 51,
      "score": 9.807458859791842,
      "candidate": "if n < 0:\n        raise ValueError('n must be a non-negative integer')\n\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3)"
    },
    {
      "rank": 52,
      "score": 9.803945923433922,
      "candidate": "if n <= 1:\n        return n\n\n    return fibfib(n - 1) + fibfib(n - 2)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 53,
      "score": 9.769680614520107,
      "candidate": "if n == 0 or n == 1:\n        return 0\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\n\nif __name__ == '__main__':\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 54,
      "score": 9.768291153593768,
      "candidate": "if n <= 0:\n        return 0\n    if n == 1:\n        return 1\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 55,
      "score": 9.765262807032524,
      "candidate": "if n <= 1:\n        return n\n    return fibfib(n - 1) + fibfib(n - 2)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 56,
      "score": 9.760412881077356,
      "candidate": "if n <= 1:\n        return n\n    return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3)"
    },
    {
      "rank": 57,
      "score": 9.740864890863175,
      "candidate": "if n < 0:\n        raise ValueError('n must be greater than or equal to 0.')\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3)"
    },
    {
      "rank": 58,
      "score": 9.73511989811648,
      "candidate": "if n < 2:\n        return n\n    else:\n        return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 59,
      "score": 9.72780863773741,
      "candidate": "if n <= 1:\n        return n\n    else:\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 60,
      "score": 9.718856235379514,
      "candidate": "if n == 0 or n == 1:\n        return n\n    return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 61,
      "score": 9.699680655040597,
      "candidate": "if n == 0 or n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 62,
      "score": 9.677440122697439,
      "candidate": "a = 0\n    b = 1\n    for _ in range(n):\n        a, b = b, a + b\n    return a\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 63,
      "score": 9.661538999847021,
      "candidate": "if n == 0 or n == 1:\n        return n\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 64,
      "score": 9.648973453061323,
      "candidate": "if n == 0 or n == 1:\n        return n\n    else:\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 65,
      "score": 9.640077895802646,
      "candidate": "if n <= 1:\n        return n\n    return fibfib(n - 1) + fibfib(n - 2)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 66,
      "score": 9.595753198553407,
      "candidate": "if n < 2:\n        return n\n    return fibfib(n - 1) + fibfib(n - 2)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 67,
      "score": 9.545987962239394,
      "candidate": "if n <= 1:\n        return n\n    else:\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)"
    },
    {
      "rank": 68,
      "score": 9.446832512996986,
      "candidate": "if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)"
    },
    {
      "rank": 69,
      "score": 9.42450321128885,
      "candidate": "if n <= 1:\n        return n\n    return fibfib(n - 1) + fibfib(n - 2)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 70,
      "score": 9.389578175014488,
      "candidate": "if n < 2:\n        return n\n    else:\n        return fibfib(n - 1) + fibfib(n - 2)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 71,
      "score": 9.293848149332355,
      "candidate": "if n == 0 or n == 1:\n        return n\n\n    return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 72,
      "score": 9.287625906893272,
      "candidate": "if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3)"
    },
    {
      "rank": 73,
      "score": 9.260739004816287,
      "candidate": "fib_1, fib_2 = 0, 1\n    for _ in range(n):\n        fib_1, fib_2 = fib_2, fib_1 + fib_2\n    return fib_1\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 74,
      "score": 9.137541083743484,
      "candidate": "a = 0\n    b = 1\n    for _ in range(n):\n        a, b = b, a + b\n    return a\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 75,
      "score": 9.118479922318633,
      "candidate": "if n <= 1:\n        return n\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 76,
      "score": 9.006215542699554,
      "candidate": "if n < 2:\n        return n\n    return fibfib(n - 1) + fibfib(n - 2)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 77,
      "score": 3.444546764282145,
      "candidate": "if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 78,
      "score": 3.379011075721774,
      "candidate": "if n <= 1:\n        return n\n    return fibfib(n - 1) + fibfib(n - 2)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 79,
      "score": 3.365527165537926,
      "candidate": "if n <= 1:\n        return n\n\n    return fibfib(n - 1) + fibfib(n - 2)\n\n\nif __name__ == '__main__':\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 80,
      "score": 3.2537093342925396,
      "candidate": "if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 81,
      "score": 3.219696508248498,
      "candidate": "if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 82,
      "score": 3.197410778904765,
      "candidate": "if n <= 1:\n        return n\n    return fibfib(n - 1) + fibfib(n - 2)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 83,
      "score": 3.184184334996698,
      "candidate": "fib = [0, 1]\n    for _ in range(n):\n        fib.append(fib[-2] + fib[-1])\n    return fib[-1]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 84,
      "score": 3.0710688664954984,
      "candidate": "if n < 1:\n        raise ValueError(\"n must be greater than 0\")\n    a, b = 0, 1\n    for _ in range(n - 1):\n        a, b = b, a + b\n    return b\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 85,
      "score": 3.0626532653231733,
      "candidate": "if n <= 1:\n        return n\n    return fibfib(n - 1) + fibfib(n - 2)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 86,
      "score": 3.0220225863685206,
      "candidate": "if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3)"
    },
    {
      "rank": 87,
      "score": 2.9722444122268223,
      "candidate": "a, b = 0, 1\n    for _ in range(n):\n        a, b = b, a + b\n    return b\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 88,
      "score": 2.9438071303321967,
      "candidate": "a = 0\n    b = 1\n    for _ in range(n):\n        a, b = b, a + b\n    return b"
    },
    {
      "rank": 89,
      "score": 2.8882248591431385,
      "candidate": "if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 90,
      "score": 2.879578309539711,
      "candidate": "if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3)\n\n\nif __name__ == \"__main__\":\n    print(fibfib(int(input().strip())))"
    },
    {
      "rank": 91,
      "score": 2.8555904130649448,
      "candidate": "if n < 2:\n        return n\n    return fibfib(n - 1) + fibfib(n - 2)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 92,
      "score": 2.7985877944265667,
      "candidate": "if n < 2:\n        return n\n    return fibfib(n - 1) + fibfib(n - 2)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 93,
      "score": 2.7569205311197384,
      "candidate": "a, b = 0, 1\n    for _ in range(n):\n        a, b = b, a + b\n    return b"
    },
    {
      "rank": 94,
      "score": 2.746149377050584,
      "candidate": "a, b = 0, 1\n    for i in range(n):\n        a, b = b, a + b\n    return a\n\n\nif __name__ == '__main__':\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 95,
      "score": 2.712910410220639,
      "candidate": "if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 96,
      "score": 2.6812353482643765,
      "candidate": "if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 97,
      "score": 2.6487564124482916,
      "candidate": "if n <= 0:\n        return 0\n    if n == 1:\n        return 0\n    return fibfib(n - 1) + fibfib(n - 2)\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 98,
      "score": 2.5408127412821284,
      "candidate": "if n < 2:\n        return n\n    return fibfib(n-1) + fibfib(n-2)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 99,
      "score": 2.529679170268854,
      "candidate": "if n < 1:\n        return 0\n    if n < 2:\n        return 1\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)"
    },
    {
      "rank": 100,
      "score": 2.3712611750184616,
      "candidate": "a, b = 0, 1\n    for _ in range(n):\n        a, b = b, a + b\n    return b\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    }
  ]
}