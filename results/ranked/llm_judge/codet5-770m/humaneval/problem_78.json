{
  "timestamp": "2025-09-14T11:50:10.557987",
  "method": "improved_llm_judge",
  "judge_model": "codellama/CodeLlama-7b-Python-hf",
  "target_model": "codet5-770m",
  "dataset": "humaneval",
  "problem_number": 78,
  "total_candidates": 100,
  "results": [
    {
      "rank": 1,
      "score": 10.0,
      "candidate": "key = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\n    for i in num:\n        key[ord(i)-ord('A')] += 1\n    for i in range(0, len(key)):\n        if key[i] > 1:\n            return key[i]\n\nprint(hex_key(\"ABED1A33\"))\nprint(hex_key(\"123456789ABCDEF0\"))\nprint(hex_key(\"2020\"))\nprint(hex_key(\"AB\"))\nprint(hex_key(\"1077E\"))\nprint(hex_key(\"ABED1A33\"))"
    },
    {
      "rank": 2,
      "score": 10.0,
      "candidate": "hex_num = num.upper()\n    hex_count = 0\n    for i in hex_num:\n        if hex_num.count(i) == 1:\n            hex_count += 1\n    return hex_count\n\n\ndef main():\n    print(hex_key(\"AB\"))\n    print(hex_key(\"1077E\"))\n    print(hex_key(\"ABED1A33\"))\n    print(hex_key(\"123456789ABCDEF0\"))\n    print(hex_key(\"2020\"))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 3,
      "score": 10.0,
      "candidate": "count = 0\n    for i in num:\n        if i.isdigit():\n            if int(i) == 1:\n                count += 1\n    return count\n\n\ndef hex_key2(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    count = 0\n    for i in num:\n        if i.isdigit():\n            if int(i) == 1:\n                count += 1\n    return count\n\n\ndef hex_key3(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a"
    },
    {
      "rank": 4,
      "score": 10.0,
      "candidate": "prime_count = 0\n    for char in num:\n        if char.isdigit() and int(char) > 1:\n            if not num.lower().count(char) % 2:\n                prime_count += 1\n    return prime_count\n\n\nprint(hex_key(\"ABED1A33\"))\nprint(hex_key(\"ABED1A33\"))\nprint(hex_key(\"123456789ABCDEF0\"))\nprint(hex_key(\"ABED1A33\"))\nprint(hex_key(\"ABED1A33\"))\nprint(hex_key(\"ABED1A33\"))\nprint(hex_key(\"ABED1A33\"))\nprint(hex_key(\"ABED1A33\"))\nprint(hex_key(\"ABED1A33\"))\nprint(hex_key(\"ABED1A33\"))\nprint(hex_key(\"ABED1A33\"))\nprint(hex_key(\"ABED1A33\"))\nprint(hex_key(\"ABED1A33\"))\nprint(hex_key(\"ABED1A33\"))\nprint(hex_key(\"ABED1A33\"))\nprint(hex_key(\"ABED1A33\"))\nprint(hex_key(\"ABED1A33\"))\nprint(hex_key(\"ABED1A33\"))\nprint(hex_key(\"ABED1A33\"))\nprint(hex_key(\"ABED1A33\"))\nprint(hex_key(\"ABED1A33\"))\nprint(hex_key(\"ABED1A33\"))\nprint(hex_key(\"ABED1A33\"))\nprint(hex_key(\"ABED1A33\"))\nprint(hex_key(\"ABED1A33\"))\nprint(hex_key(\"ABED1A33\"))\nprint(hex_key(\"ABED1A33\"))\nprint(hex_key(\"ABED1A33\"))\nprint(hex_key(\"ABED1A33\"))\nprint(hex_key(\"ABED1A33\"))\nprint(hex_key(\"ABED1A33\"))\nprint(hex_key(\"ABED1A33\"))\nprint("
    },
    {
      "rank": 5,
      "score": 10.0,
      "candidate": "counter = 0\n    for i in num:\n        if i.isalpha():\n            counter += 1\n    return counter\n\n\ndef test_hex_key():\n    assert hex_key(\"AB\") == 1\n    assert hex_key(\"1077E\") == 2\n    assert hex_key(\"ABED1A33\") == 4\n    assert hex_key(\"123456789ABCDEF0\") == 6\n    assert hex_key(\"2020\") == 2\n\n\ntest_hex_key()"
    },
    {
      "rank": 6,
      "score": 10.0,
      "candidate": "d = dict()\n    for i in num:\n        if i.isnumeric():\n            d[i] = d.get(i, 0) + 1\n    return d.get(num[0], 0)\n\n\ndef test_hex_key():\n    assert hex_key(\"AB\") == 1\n    assert hex_key(\"1077E\") == 2\n    assert hex_key(\"ABED1A33\") == 4\n    assert hex_key(\"123456789ABCDEF0\") == 6\n    assert hex_key(\"2020\") == 2\n    assert hex_key(\"AB\") == 1\n    assert hex_key(\"1077E\") == 2\n    assert hex_key(\"ABED1A33\") == 4\n    assert hex_key(\"123456789ABCDEF0\") == 6\n    assert hex_key(\"2020\") == 2\n    assert hex_key(\"AB\") == 1\n    assert hex_key(\"1077E\") == 2\n    assert hex_key(\"ABED1A33\") == 4\n    assert hex_key(\"123456789ABCDEF0\") == 6\n    assert hex_key(\"2020\") == 2\n    assert hex_key(\"AB\") == 1\n    assert hex_key(\"1077E\") == 2\n    assert hex_key(\"ABED1A33\") == 4\n    assert hex_key(\"123456789ABCDEF0\") == 6\n    assert hex_key(\"2020\") == 2\n    assert hex_key(\"AB\") == 1\n    assert hex_key(\"1077E\") == 2\n    assert hex_key(\"ABED1A33\") == 4\n    assert hex_key(\"123456789ABCDEF0\") == 6\n    assert hex_key(\"2020\") == 2\n    assert hex_key(\"AB\") == 1\n    assert hex_key(\"1077E\") == 2\n    assert hex_key(\"ABED1A33\") == 4\n    assert hex_key(\"123456789ABCDEF0\") == 6\n    assert hex_key(\"2020\") == 2\n\n\nif __name__ == \"__main__\":\n    test_hex_key()"
    },
    {
      "rank": 7,
      "score": 10.0,
      "candidate": "primes = [2, 3, 5, 7]\n    primes.append(11)\n    primes.append(13)\n    hex_key = 0\n    for i in num:\n        if i in primes:\n            hex_key += 1\n    return hex_key\n\n\ndef main():\n    num = input(\"Enter a hexadecimal number: \")\n    print(hex_key(num))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 8,
      "score": 10.0,
      "candidate": "# Write your code here.\n    return hex_key(num.upper())\n\n\nif __name__ == '__main__':\n    print(hex_key(\"ABED1A33\"))"
    },
    {
      "rank": 9,
      "score": 10.0,
      "candidate": "return str(num).count(\"A\") + str(num).count(\"B\") + str(num).count(\"C\") + str(num).count(\"D\") + str(num).count(\"E\") + str(num).count(\"F\")\n\n\ndef hex_key_2(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    return str(num).count(\"A\") + str(num).count(\"B\") + str(num).count(\"C\") + str(num).count(\"D\") + str(num).count(\"E\") + str(num).count(\"F\")\n\n\ndef hex_key_3(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C"
    },
    {
      "rank": 10,
      "score": 10.0,
      "candidate": "count = 0\n    for i in num:\n        if i.isdigit():\n            count += 1\n    return count\n\nprint(hex_key(\"AB\"))\nprint(hex_key(\"1077E\"))\nprint(hex_key(\"ABED1A33\"))\nprint(hex_key(\"123456789ABCDEF0\"))\nprint(hex_key(\"2020\"))"
    },
    {
      "rank": 11,
      "score": 10.0,
      "candidate": "prime_counter = 0\n    for i in num:\n        if is_prime(i):\n            prime_counter += 1\n    return prime_counter\n\ndef is_prime(num):\n    \"\"\"Given a number, determine if it is a prime number.\n    \"\"\"\n    if num == 1:\n        return False\n    if num == 2:\n        return True\n    if num % 2 == 0:\n        return False\n    if num % 3 == 0:\n        return False\n    if num % 5 == 0:\n        return False\n    if num % 7 == 0:\n        return False\n    if num % 11 == 0:\n        return False\n    if num % 13 == 0:\n        return False\n    return True\n\ndef main():\n    print(hex_key(\"AB\"))\n    print(hex_key(\"1077E\"))\n    print(hex_key(\"ABED1A33\"))\n    print(hex_key(\"123456789ABCDEF0\"))\n    print(hex_key(\"2020\"))\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 12,
      "score": 10.0,
      "candidate": "if len(num) == 0:\n        return 0\n    primes = [2, 3, 5, 7, 11, 13, 17, 19]\n    primes_count = 0\n    for i in range(len(num)):\n        if num[i] == '0':\n            continue\n        if num[i] == '1':\n            primes_count += 1\n        if num[i] == '2':\n            if primes_count in primes:\n                primes_count += 1\n        if num[i] == '3':\n            if primes_count in primes:\n                primes_count += 1\n        if num[i] == '4':\n            if primes_count in primes:\n                primes_count += 1\n        if num[i] == '5':\n            if primes_count in primes:\n                primes_count += 1\n        if num[i] == '6':\n            if primes_count in primes:\n                primes_count += 1\n        if num[i] == '7':\n            if primes_count in primes:\n                primes_count += 1\n        if num[i] == '8':\n            if primes_count in primes:\n                primes_count += 1\n        if num[i] == '9':\n            if primes_count in primes:\n                primes_count += 1\n        if num[i] == 'A':\n            if primes_count in primes:\n                primes_count += 1\n        if num[i] == 'B':\n            if primes_count in primes:\n                primes_count += 1\n        if num[i] == 'C':\n            if primes_count in primes:\n                primes_count += 1\n        if num[i] == 'D':\n            if primes_count in primes:\n                primes_count += 1\n        if num[i] == 'E':\n            if primes_count in primes:\n                primes_count += 1\n        if num[i] == 'F':\n            if primes_count in primes:\n                primes_count += 1"
    },
    {
      "rank": 13,
      "score": 10.0,
      "candidate": "num = num.upper()\n    count = 0\n    for i in num:\n        if num.count(i) == 1:\n            count += 1\n    return count\n\nprint(hex_key('AB'))\nprint(hex_key('1077E'))\nprint(hex_key('ABED1A33'))\nprint(hex_key('123456789ABCDEF0'))\nprint(hex_key('2020'))"
    },
    {
      "rank": 14,
      "score": 10.0,
      "candidate": "# write your code in Python 3.6\n    # set up a list to store primes\n    primes = []\n    # set up a list to store the number of digits in the hexadecimal number\n    digits = []\n    # set up a list to store the number of digits in the number\n    digits_count = []\n    # set up a list to store the number of digits in the number\n    digits_count_count = []\n    # set up a list to store the number of digits in the number\n    digits_count_count_count = []\n    # set up a list to store the number of digits in the number\n    digits_count_count_count_count = []\n    # set up a list to store the number of digits in the number\n    digits_count_count_count_count_count = []\n    # set up a list to store the number of digits in the number\n    digits_count_count_count_count_count = []\n    # set up a list to store the number of digits in the number\n    digits_count_count_count_count_count_count = []\n    # set up a list to store the number of digits in the number\n    digits_count_count_count_count_count_count_count = []\n    \n    # set up a list to store the number of digits in the number\n    digits_count_count_count_count_count_count_count_count = []\n    \n    # set up a list to store the number of digits in the number\n    digits_count_count_count_count_count_count_count_count = []\n    \n    # set up a list to store the number of digits in the number\n    digits_count_count_count_count_count_count_count_count_count = []\n    \n    # set up a list to store the number of digits in the number\n    digits_count_count_count_count_count_count_count_count = []\n    \n    # set up a list to store the number of digits in the number\n    digits_count_count_count_count_count_count_count_count_count = []\n    \n    # set up a list to store the number of digits in the number\n    digits_count_count_"
    },
    {
      "rank": 15,
      "score": 10.0,
      "candidate": "# Your code here\n    prime_nums = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 196, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 263, 269, 271, 277, 281, 293, 297, 307, 311, 313, 317, 331, 337, 347, 353, 359, 361, 367, 371, 373, 379, 383, 389, 397, 400, 400, 401, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497,"
    },
    {
      "rank": 16,
      "score": 10.0,
      "candidate": "primes = [2, 3, 5, 7]\n    primes = [int(x) for x in num if x.isdigit()]\n    key = 0\n    for p in primes:\n        for c in num:\n            if c == str(p):\n                key += 1\n    return key\n\nprint(hex_key(\"AB\"))\nprint(hex_key(\"1077E\"))\nprint(hex_key(\"ABED1A33\"))\nprint(hex_key(\"123456789ABCDEF0\"))\nprint(hex_key(\"2020\"))"
    },
    {
      "rank": 17,
      "score": 10.0,
      "candidate": "count = 0\n    for i in num:\n        if i.isdigit():\n            count += int(i)\n    return count\n\n\ndef hex_key_2(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    count = 0\n    for i in num:\n        if i.isdigit():\n            count += int(i)\n            if count > 1:\n                return count\n    return count\n\n\ndef hex_key_3(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number"
    },
    {
      "rank": 18,
      "score": 10.0,
      "candidate": "# Your code here\n    # Initialize the counter to 0\n    counter = 0\n\n    # Loop through the string\n    for i in num:\n        # Check if the character is a digit\n        if i.isdigit():\n            # Increment the counter\n            counter += 1\n\n    # Return the counter\n    return counter\n\n\n# Testing\nassert hex_key(\"AB\") == 1\nassert hex_key(\"1077E\") == 2\nassert hex_key(\"ABED1A33\") == 4\nassert hex_key(\"123456789ABCDEF0\") == 6\nassert hex_key(\"2020\") == 2"
    },
    {
      "rank": 19,
      "score": 10.0,
      "candidate": "hex_dict = {'0': 0, '1': 1, '2': 2, '3': 3, '4': 4, '5': 5, '6': 6, '7': 7, '8': 8, '9': 9, 'A': 10, 'B': 11, 'C': 12, 'D': 13, 'E': 14, 'F': 15}\n    return hex_dict[num[0]] + hex_dict[num[1]] + hex_dict[num[2]] + hex_dict[num[3]] + hex_dict[num[4]] + hex_dict[num[5]] + hex_dict[num[6]]"
    },
    {
      "rank": 20,
      "score": 10.0,
      "candidate": "if len(num)!= 16:\n        raise ValueError(\"Input string should be 16 characters long\")\n    primes = [2, 3, 5, 7, 11, 13]\n    counter = 0\n    for i in range(len(num)):\n        if num[i] not in primes:\n            counter += 1\n    return counter\n\n\ndef hex_key2(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: You may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    if len(num)!= 16:\n        raise ValueError(\"Input string should be 16 characters long\")\n    primes = [2, 3, 5, 7, 11, 13]\n    counter = 0\n    for i in range(len(num)):\n        if num[i] not in primes:\n            counter += 1\n    return counter\n\n\ndef hex_key3(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater"
    },
    {
      "rank": 21,
      "score": 10.0,
      "candidate": "# Your code here\n    count = 0\n    for i in num:\n        if i.isdigit():\n            if int(i) in range(2, 32):\n                count += 1\n    return count\n\n\ndef hex_key2(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: You may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    # Your code here\n    count = 0\n    for i in num:\n        if i.isdigit():\n            if int(i) in range(2, 32):\n                count += 1\n    return count\n\n\ndef hex_key3(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2,"
    },
    {
      "rank": 22,
      "score": 10.0,
      "candidate": "# Your code here\n    num_list = list(num)\n    num_list.sort()\n    count = 0\n    for i in num_list:\n        if i.isnumeric():\n            count += 1\n    return count\n\n\nprint(hex_key(\"AB\"))\nprint(hex_key(\"1077E\"))\nprint(hex_key(\"ABED1A33\"))\nprint(hex_key(\"123456789ABCDEF0\"))\nprint(hex_key(\"2020\"))"
    },
    {
      "rank": 23,
      "score": 10.0,
      "candidate": "# Write your code here\n    count = 0\n    for i in num:\n        if i.isalpha():\n            count += 1\n    return count\n\n\nprint(hex_key(\"AB\"))\nprint(hex_key(\"1077E\"))\nprint(hex_key(\"ABED1A33\"))\nprint(hex_key(\"123456789ABCDEF0\"))\nprint(hex_key(\"2020\"))"
    },
    {
      "rank": 24,
      "score": 10.0,
      "candidate": "count = 0\n    for i in num:\n        if i.isalpha():\n            count += 1\n    return count\n\n\nprint(hex_key(\"AB\"))\nprint(hex_key(\"1077E\"))\nprint(hex_key(\"ABED1A33\"))\nprint(hex_key(\"123456789ABCDEF0\"))\nprint(hex_key(\"2020\"))"
    },
    {
      "rank": 25,
      "score": 10.0,
      "candidate": "return sum([1 for x in num if x.isdigit()])\n\n\ndef main():\n    print(hex_key(\"AB\"))\n    print(hex_key(\"1077E\"))\n    print(hex_key(\"ABED1A33\"))\n    print(hex_key(\"123456789ABCDEF0\"))\n    print(hex_key(\"2020\"))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 26,
      "score": 9.993251387631034,
      "candidate": "key = []\n    for i in num:\n        key.append(int(i))\n    return key\n\n\ndef hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    key = []\n    for i in num:\n        key.append(int(i, 16))\n    return key\n\n\ndef hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal"
    },
    {
      "rank": 27,
      "score": 9.963994939209833,
      "candidate": "count = 0\n    for i in num:\n        if i.isdigit():\n            count += 1\n        else:\n            break\n    return count\n\n\ndef hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: You may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    count = 0\n    for i in num:\n        if i.isdigit():\n            count += 1\n        else:\n            break\n    return count\n\n\ndef hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2,"
    },
    {
      "rank": 28,
      "score": 9.94217585880588,
      "candidate": "if len(num) == 0:\n        return 0\n    if len(num) == 1:\n        return 1\n    if len(num) == 2:\n        if num[0] == \"A\":\n            return 2\n        if num[0] == \"B\":\n            return 4\n        if num[0] == \"C\":\n            return 6\n        if num[0] == \"D\":\n            return 8\n        if num[0] == \"E\":\n            return 10\n        if num[0] == \"F\":\n            return 12\n    if len(num) == 3:\n        if num[0] == \"A\":\n            return 2\n        if num[0] == \"B\":\n            return 3\n        if num[0] == \"C\":\n            return 5\n        if num[0] == \"D\":\n            return 9\n        if num[0] == \"E\":\n            return 11\n        if num[0] == \"F\":\n            return 13\n    if len(num) == 4:\n        if num[0] == \"A\":\n            return 2\n        if num[0] == \"B\":\n            return 3\n        if num[0] == \"C\":\n            return 5\n        if num[0] == \"D\":\n            return 7\n        if num[0] == \"E\":\n            return 11\n        if num[0] == \"F\":\n            return 13\n    if len(num) == 5:\n        if num[0] == \"A\":\n            return 2\n        if num[0] == \"B\":\n            return 3\n        if num[0] == \"C\":\n            return 5\n        if num[0] == \"D\":\n            return 7\n        if num[0] == \"E\":\n            return 11\n        if num[0] == \"F\":\n            return 13\n\n\n\n\nif __name__ == \"__main__\":\n    print(hex_key(\"AB\"))\n    print(hex_key(\"1077E\"))\n    print(hex_key(\"ABED1A33\"))\n    print(hex_key(\"123456789ABCDEF0\"))\n    print(hex_key(\"2020\"))"
    },
    {
      "rank": 29,
      "score": 9.930867849414408,
      "candidate": "count = 0\n    for char in num:\n        if char == \"A\":\n            count += 2\n        elif char == \"B\":\n            count += 3\n        elif char == \"C\":\n            count += 5\n        elif char == \"D\":\n            count += 7\n        elif char == \"E\":\n            count += 13\n        elif char == \"F\":\n            count += 11\n    return count\n\n\ndef hex_key_2(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    count = 0\n    for char in num:\n        if char == \"A\":\n            count += 2\n        elif char == \"B\":\n            count += 3\n        elif char == \"C\":\n            count += 5\n        elif char == \"D\":\n            count += 7\n        elif char == \"E\":\n            count += 13\n        elif char == \"F\":\n            count += 11\n    return count"
    },
    {
      "rank": 30,
      "score": 9.907170511668092,
      "candidate": "if len(num) == 0:\n        return 0\n\n    # First, we need to create a list of all the characters in the input.\n    char_list = []\n    for c in num:\n        char_list.append(c)\n\n    # Next, we need to create a list of all the characters in the string.\n    string_list = []\n    for c in num:\n        string_list.append(c)\n\n    # Next, we need to create a list of all the characters in the string.\n    for c in string_list:\n        if c.isdigit():\n            char_list.remove(c)\n\n    # Next, we need to create a list of all the characters in the string.\n    for c in char_list:\n        if c.isalpha():\n            char_list.remove(c)\n\n    # Next, we need to create a list of all the characters in the string.\n    for c in char_list:\n        if c.islower():\n            char_list.remove(c)\n\n    # Next, we need to create a list of all the characters in the string.\n    for c in char_list:\n        if c.isupper():\n            char_list.remove(c)\n\n    # Next, we need to create a list of all the characters in the string.\n    for c in char_list:\n        if c.isdigit():\n            char_list.remove(c)\n\n    # Next, we need to create a list of all the characters in the string.\n    for c in char_list:\n        if c.islower():\n            char_list.remove(c)\n\n    # Next, we need to create a list of all the characters in the string.\n    for c in char_list:\n        if c.isupper():\n            char_list.remove(c)\n\n    # Next, we need to create a list of all the characters in the string.\n    for c in char_list:\n        if c.isdigit():\n            char_list.remove(c)\n\n    # Next, we need to create a list of all the characters in the string.\n    for c in char_list:\n        if c"
    },
    {
      "rank": 31,
      "score": 9.890164056081243,
      "candidate": "hex_val = 0\n    for char in num:\n        hex_val = hex_val * 16 + ord(char)\n    return hex_val\n\n\ndef hex_key2(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    hex_val = 0\n    for char in num:\n        hex_val = hex_val * 16 + ord(char)\n    return hex_val\n\n\ndef hex_key3(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits:"
    },
    {
      "rank": 32,
      "score": 9.887111849756732,
      "candidate": "if len(num) == 0:\n        return 0\n    count = 0\n    for i in num:\n        if i.isdigit():\n            count += 1\n        else:\n            break\n    return count\n\ndef is_prime(num):\n    \"\"\"You have been tasked to write a function that receives a \n    natural number as a string and counts the number of prime \n    numbers (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine if a number is prime.\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be True.\n    For num = \"1077E\" the output should be False.\n    For num = \"ABED1A33\" the output should be False.\n    For num = \"123456789ABCDEF0\" the output should be False.\n    For num = \"2020\" the output should be False.\n    \"\"\"\n    if len(num) == 0:\n        return False\n    for i in num:\n        if i.isdigit():\n            if num.count(i)!= 1:\n                return False\n        else:\n            break\n    return True\n\ndef main():\n    \"\"\"\n    Read in the hex_key function from the above and write it to the \n    is_prime function to test the above functions.\n    \"\"\"\n    hex_key_test_case = \"AB\"\n    print(hex_key(hex_key_test_case))\n    is_prime_test_case = \"1077E\"\n    print(is_prime(is_prime_test_case))\n    hex_key_test_case = \"ABED1A33\"\n    print(hex_key(hex_key_test_case))\n    is_prime_test_case = \"123456789ABCDEF0\"\n    print(is_prime(is_prime_test_case))\n    hex_key_test_case = \"2020\""
    },
    {
      "rank": 33,
      "score": 9.88293152152541,
      "candidate": "primes = [2, 3, 5, 7]\n    count = 0\n    for i in num:\n        if i.isalpha():\n            if i.isupper():\n                if i in primes:\n                    count += 1\n            else:\n                if i.isupper():\n                    if i in primes:\n                        count += 1\n        else:\n            if i.isupper():\n                if i in primes:\n                    count += 1\n            else:\n                if i in primes:\n                    count += 1\n    return count\n\n\nprint(hex_key(\"AB\"))\nprint(hex_key(\"1077E\"))\nprint(hex_key(\"ABED1A33\"))\nprint(hex_key(\"123456789ABCDEF0\"))\nprint(hex_key(\"2020\"))"
    },
    {
      "rank": 34,
      "score": 9.882923312638333,
      "candidate": "primes = [2, 3, 5, 7, 11, 13, 17, 19, 23]\n    # Your code here\n    hex_key_count = 0\n    for i in num:\n        if i in primes:\n            hex_key_count += 1\n    return hex_key_count\n\n\nhex_key(\"AB\")\nhex_key(\"1077E\")\nhex_key(\"ABED1A33\")\nhex_key(\"123456789ABCDEF0\")\nhex_key(\"2020\")"
    },
    {
      "rank": 35,
      "score": 9.850496324767066,
      "candidate": "primes = [2, 3, 5, 7, 11, 13, 17]\n    primes_count = 0\n    hex_digits = list(num)\n    for i in hex_digits:\n        if i in primes:\n            primes_count += 1\n    return primes_count\n\n\ndef hex_key_1(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    primes = [2, 3, 5, 7, 11, 13, 17]\n    primes_count = 0\n    for i in num:\n        if i in primes:\n            primes_count += 1\n    return primes_count\n\n\ndef hex_key_2(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4"
    },
    {
      "rank": 36,
      "score": 9.845393812074393,
      "candidate": "# Your code here\n    count = 0\n    for i in num:\n        if i.isdigit():\n            count += int(i)\n    return count\n    \nprint(hex_key(\"AB\"))\nprint(hex_key(\"1077E\"))\nprint(hex_key(\"ABED1A33\"))\nprint(hex_key(\"123456789ABCDEF0\"))\nprint(hex_key(\"2020\"))"
    },
    {
      "rank": 37,
      "score": 9.807458859791842,
      "candidate": "if len(num) == 0:\n        return 0\n    if len(num) == 1:\n        return 1\n    if num[0]!= '0':\n        return 0\n    if num[1]!= '1':\n        return 0\n    if num[2]!= '2':\n        return 0\n    if num[3]!= '3':\n        return 0\n    if num[4]!= '4':\n        return 0\n    if num[5]!= '5':\n        return 0\n    if num[6]!= '6':\n        return 0\n    if num[7]!= '7':\n        return 0\n    if num[8]!= '8':\n        return 0\n    if num[9]!= '9':\n        return 0\n    if num[10]!= 'A':\n        return 0\n    if num[11]!= 'B':\n        return 0\n    if num[12]!= 'C':\n        return 0\n    if num[13]!= 'D':\n        return 0\n    if num[14]!= 'E':\n        return 0\n    if num[15]!= 'F':\n        return 0\n    if num[16]!= 'G':\n        return 0\n    if num[17]!= 'H':\n        return 0\n    if num[18]!= 'I':\n        return 0\n    if num[19]!= 'J':\n        return 0\n    if num[20]!= 'K':\n        return 0\n    if num[21]!= 'L':\n        return 0\n    if num[22]!= 'M':\n        return 0\n    if num[23]!= 'N':\n        return 0\n    if num[24]!= 'O':\n        return 0\n    if num[25]!= 'P':\n        return 0\n    if num[26]!= 'Q':\n        return 0\n    if num[27]!= 'R':\n        return 0\n    if num[28]!= 'S':\n        return 0\n    if num[29]!= 'T':\n        return 0\n    if num[30]!= 'U':\n        return 0\n    if num[31]!= 'V':\n        return 0"
    },
    {
      "rank": 38,
      "score": 9.769680614520107,
      "candidate": "# Your code here\n    n = int(num, 16)\n    primes = [2, 3, 5, 7]\n    for i in range(n):\n        if i not in primes:\n            if n % i == 0:\n                primes.append(i)\n    return len(primes)\n\n\nprint(hex_key(\"AB\"))\nprint(hex_key(\"1077E\"))\nprint(hex_key(\"ABED1A33\"))\nprint(hex_key(\"123456789ABCDEF0\"))\nprint(hex_key(\"2020\"))"
    },
    {
      "rank": 39,
      "score": 9.768291153593768,
      "candidate": "num = num.upper()\n    primes = [2, 3, 5, 7, 11, 13, 17]\n    primes.remove(num[0])\n    primes.remove(num[1])\n    primes.remove(num[2])\n    primes.remove(num[3])\n    primes.remove(num[4])\n    primes.remove(num[5])\n    primes.remove(num[6])\n    primes.remove(num[7])\n    primes.remove(num[8])\n    primes.remove(num[9])\n    primes.remove(num[10])\n    primes.remove(num[11])\n    primes.remove(num[12])\n    primes.remove(num[13])\n    primes.remove(num[14])\n    primes.remove(num[15])\n    primes.remove(num[16])\n    primes.remove(num[17])\n    primes.remove(num[18])\n    primes.remove(num[19])\n    primes.remove(num[20])\n    primes.remove(num[21])\n    primes.remove(num[22])\n    primes.remove(num[23])\n    primes.remove(num[24])\n    primes.remove(num[25])\n    primes.remove(num[26])\n    primes.remove(num[27])\n    primes.remove(num[28])\n    primes.remove(num[29])\n    primes.remove(num[30])\n    primes.remove(num[31])\n    primes.remove(num[32])\n    primes.remove(num[33])\n    primes.remove(num[34])\n    primes.remove(num[35])\n    primes.remove(num[36])\n    primes.remove(num[37])\n    primes.remove(num[38])\n    primes.remove(num[39])\n    primes.remove(num[40])\n    primes.remove(num[41])\n    primes.remove(num[42])\n    primes.remove(num[43"
    },
    {
      "rank": 40,
      "score": 9.765262807032524,
      "candidate": "result = 0\n    for i in num:\n        result += int(i)\n    return result\n\n\ndef hex_key2(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    result = 0\n    for i in num:\n        result += int(i) * 2\n    return result\n\n\ndef hex_key3(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13)."
    },
    {
      "rank": 41,
      "score": 9.760412881077356,
      "candidate": "return sum(1 for c in num if c.isupper())\n\n\nprint(hex_key(\"ABED1A33\"))  # should be 4\nprint(hex_key(\"123456789ABCDEF0\"))  # should be 6\nprint(hex_key(\"2020\"))  # should be 2"
    },
    {
      "rank": 42,
      "score": 9.749121478207732,
      "candidate": "num = num.upper()\n    count = 0\n    for i in num:\n        if i.isdigit():\n            count += 1\n    return count\n\n\nprint(hex_key(\"AB\"))\nprint(hex_key(\"1077E\"))\nprint(hex_key(\"ABED1A33\"))\nprint(hex_key(\"123456789ABCDEF0\"))\nprint(hex_key(\"2020\"))"
    },
    {
      "rank": 43,
      "score": 9.740864890863175,
      "candidate": "num = num.upper()\n    prime_count = 0\n    for i in range(len(num)):\n        if num[i] == \"1\" or num[i] == \"2\" or num[i] == \"3\" or num[i] == \"4\" or num[i] == \"5\" or num[i] == \"6\" or num[i] == \"7\" or num[i] == \"8\" or num[i] == \"9\" or num[i] == \"A\" or num[i] == \"B\" or num[i] == \"C\" or num[i] == \"D\" or num[i] == \"E\" or num[i] == \"F\":\n            prime_count += 1\n    return prime_count\n\n\ndef hex_key2(num):\n    \"\"\"\n    \"\"\"\n    count = 0\n    for i in range(len(num)):\n        if num[i] == \"1\" or num[i] == \"2\" or num[i] == \"3\" or num[i] == \"4\" or num[i] == \"5\" or num[i] == \"6\" or num[i] == \"7\" or num[i] == \"8\" or num[i] == \"9\" or num[i] == \"A\" or num[i] == \"B\" or num[i] == \"C\" or num[i] == \"D\" or num[i] == \"E\" or num[i] == \"F\":\n            count += 1\n    return count\n\n\nif __name__ == \"__main__\":\n    num = input(\"Enter the hexadecimal number: \")\n    print(hex_key(num))\n    print(hex_key2(num))"
    },
    {
      "rank": 44,
      "score": 9.73511989811648,
      "candidate": "return sum([int(digit) for digit in str(num)])\n\n\n# Test Cases\nassert hex_key(\"AB\") == 1\nassert hex_key(\"1077E\") == 2\nassert hex_key(\"ABED1A33\") == 4\nassert hex_key(\"123456789ABCDEF0\") == 6\nassert hex_key(\"2020\") == 2"
    },
    {
      "rank": 45,
      "score": 9.718856235379514,
      "candidate": "result = 0\n    for i in range(len(num)):\n        if num[i].isalpha():\n            if num[i].isupper():\n                result += 1\n    return result\n\n\nprint(hex_key(\"AB\"))\nprint(hex_key(\"1077E\"))\nprint(hex_key(\"ABED1A33\"))\nprint(hex_key(\"123456789ABCDEF0\"))\nprint(hex_key(\"2020\"))"
    },
    {
      "rank": 46,
      "score": 9.699680655040597,
      "candidate": "# Your code here\n    # Convert the input string into a list of strings\n    num = list(num)\n    \n    # Create a list of hex digits\n    hex_digits = [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"A\", \"B\", \"C\", \"D\", \"E\", \"F\"]\n    \n    # Create a list of primes\n    primes = [2, 3, 5, 7, 11, 13, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 123, 124, 125, 126, 127, 128, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 144, 148, 149, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 164, 165, 166, 167, 168, 169, 171, 172, 173, 174, 175, 176, 178, 179, 181, 182, 183, 184, 185, 186, 189, 190"
    },
    {
      "rank": 47,
      "score": 9.699146693885302,
      "candidate": "num = num.upper()\n    counter = 0\n    for i in num:\n        if (num.count(i) == 1):\n            counter += 1\n    return counter\n\n\ndef hex_key_2(num):\n    \"\"\"You have been tasked to write a function that receives a hexadecimal \n    number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    num = num.upper()\n    counter = 0\n    for i in num:\n        if (num.count(i) == 1):\n            counter += 1\n    return counter"
    },
    {
      "rank": 48,
      "score": 9.677440122697439,
      "candidate": "num = str(num)\n    count = 0\n    for i in num:\n        if (i == 'A') or (i == 'B') or (i == 'C') or (i == 'D') or (i == 'E') or (i == 'F'):\n            count += 1\n        else:\n            count = 0\n    return count\n\n\ndef hex_key_2(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    num = str(num)\n    count = 0\n    for i in num:\n        if (i == 'A') or (i == 'B') or (i == 'C') or (i == 'D') or (i == 'E') or (i == 'F'):\n            count += 1\n        else:\n            count = 0\n    return count\n\n\ndef hex_key_3(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or"
    },
    {
      "rank": 49,
      "score": 9.640077895802646,
      "candidate": "# Your code here\n    num = num.upper()\n    primes = [2, 3, 5, 7, 11, 13, 17, 18, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    count = 0\n    for i in num:\n        if i in primes:\n            count += 1\n    return count\n\n# Test cases\nassert hex_key(\"AB\") == 1\nassert hex_key(\"1077E\") == 2\nassert hex_key(\"ABED1A33\") == 4\nassert hex_key(\"123456789ABCDEF0\") == 6\nassert hex_key(\"2020\") == 2\n\n# This code is contributed by Nikolay Kumar Singh (nikolaykumarsingh@gmail.com)"
    },
    {
      "rank": 50,
      "score": 9.595753198553407,
      "candidate": "result = 0\n    for i in num:\n        result = result + (ord(i) - ord('A') + 1)\n    return result\n\ndef main():\n    print(hex_key(\"AB\"))\n    print(hex_key(\"1077E\"))\n    print(hex_key(\"ABED1A33\"))\n    print(hex_key(\"123456789ABCDEF0\"))\n    print(hex_key(\"2020\"))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 51,
      "score": 9.47114453552205,
      "candidate": "primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    res = 0\n    for i in num:\n        if i in primes:\n            res += 1\n    return res\n\n\ndef is_prime(num):\n    \"\"\"You have been tasked to write a function that receives a number \n    as an integer and returns True if the number is prime, False if \n    not.\n    Examples:\n    For num = 1 the output should be True.\n    For num = 2 the output should be False.\n    For num = 3 the output should be True.\n    For num = 4 the output should be False.\n    For num = 5 the output should be False.\n    For num = 6 the output should be False.\n    For num = 7 the output should be False.\n    For num = 8 the output should be False.\n    For num = 9 the output should be False.\n    For num = 10 the output should be False.\n    For num = 11 the output should be False.\n    For num = 12 the output should be False.\n    For num = 13 the output should be False.\n    For num = 14 the output should be False.\n    For num = 15 the output should be False.\n    For num = 16 the output should be False.\n    For num = 17 the output should be False.\n    For num = 18 the output should be False.\n    For num = 19 the output should be False.\n    For num = 20 the output should be False.\n    For num = 21 the output should be False.\n    For num = 22 the output should be False.\n    For num = 23 the output should be False.\n    For num = 24 the output should be False.\n    For num = 25 the output should be False.\n    For num = 26 the output should be False.\n    For num = 27 the output should be False.\n    For num = 28 the output should be False.\n    For num = 29 the output should be False.\n    For num = 30 the output should be False.\n    For num = 31 the output should be False.\n    For num"
    },
    {
      "rank": 52,
      "score": 9.446832512996986,
      "candidate": "# Your code here\n    #print(hex_key(num))\n    return num.count(\"A\")+num.count(\"B\")+num.count(\"C\")+num.count(\"D\")+num.count(\"E\")+num.count(\"F\")\n\n\nprint(hex_key(\"AB\"))\nprint(hex_key(\"1077E\"))\nprint(hex_key(\"ABED1A33\"))\nprint(hex_key(\"123456789ABCDEF0\"))\nprint(hex_key(\"2020\"))"
    },
    {
      "rank": 53,
      "score": 9.401896687959665,
      "candidate": "# Your code here\n    count = 0\n    for char in num:\n        if char.isdigit():\n            count += 1\n    return count\n\nprint(hex_key(\"AB\"))\nprint(hex_key(\"1077E\"))\nprint(hex_key(\"ABED1A33\"))\nprint(hex_key(\"123456789ABCDEF0\"))\nprint(hex_key(\"2020\"))"
    },
    {
      "rank": 54,
      "score": 9.389578175014488,
      "candidate": "if num == \"\":\n        return 0\n    if len(num) == 1:\n        return 1\n    if num[0] == \"0\":\n        return 0\n    if num[0] == \"1\":\n        return 1\n    if num[0] == \"2\":\n        return 2\n    if num[0] == \"3\":\n        return 3\n    if num[0] == \"4\":\n        return 4\n    if num[0] == \"5\":\n        return 5\n    if num[0] == \"6\":\n        return 6\n    if num[0] == \"7\":\n        return 7\n    if num[0] == \"8\":\n        return 8\n    if num[0] == \"9\":\n        return 9\n    if num[0] == \"A\":\n        return 10\n    if num[0] == \"B\":\n        return 11\n    if num[0] == \"C\":\n        return 12\n    if num[0] == \"D\":\n        return 13\n    if num[0] == \"E\":\n        return 14\n    if num[0] == \"F\":\n        return 15\n\n\ndef hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED"
    },
    {
      "rank": 55,
      "score": 9.293848149332355,
      "candidate": "count = 0\n    for i in range(len(num)):\n        if num[i] == \"0\":\n            count += 1\n        elif num[i] == \"1\":\n            count += 2\n        elif num[i] == \"2\":\n            count += 4\n        elif num[i] == \"3\":\n            count += 6\n        elif num[i] == \"4\":\n            count += 8\n        elif num[i] == \"5\":\n            count += 10\n        elif num[i] == \"6\":\n            count += 12\n        elif num[i] == \"7\":\n            count += 14\n        elif num[i] == \"8\":\n            count += 16\n        elif num[i] == \"9\":\n            count += 18\n        elif num[i] == \"A\":\n            count += 20\n        elif num[i] == \"B\":\n            count += 22\n        elif num[i] == \"C\":\n            count += 24\n        elif num[i] == \"D\":\n            count += 28\n        elif num[i] == \"E\":\n            count += 30\n        elif num[i] == \"F\":\n            count += 32\n    return count\n\n\nprint(hex_key(\"AB\"))\nprint(hex_key(\"1077E\"))\nprint(hex_key(\"ABED1A33\"))\nprint(hex_key(\"123456789ABCDEF0\"))\nprint(hex_key(\"2020\"))"
    },
    {
      "rank": 56,
      "score": 9.260739004816287,
      "candidate": "result = 0\n    for c in num:\n        if (c == 'A'):\n            result += 1\n        elif (c == 'B'):\n            result += 2\n        elif (c == 'C'):\n            result += 3\n        elif (c == 'D'):\n            result += 5\n        elif (c == 'E'):\n            result += 7\n        elif (c == 'F'):\n            result += 11\n        elif (c == 'G'):\n            result += 13\n        else:\n            result += 1\n    return result\n\n\nprint(hex_key(\"AB\"))\nprint(hex_key(\"1077E\"))\nprint(hex_key(\"ABED1A33\"))\nprint(hex_key(\"123456789ABCDEF0\"))\nprint(hex_key(\"2020\"))"
    },
    {
      "rank": 57,
      "score": 9.137541083743484,
      "candidate": "num = num.upper()\n    count = 0\n    for i in num:\n        if i.isdigit():\n            count += 1\n        else:\n            break\n    return count\n\n\nprint(hex_key(\"AB\"))\nprint(hex_key(\"1077E\"))\nprint(hex_key(\"ABED1A33\"))\nprint(hex_key(\"123456789ABCDEF0\"))\nprint(hex_key(\"2020\"))"
    },
    {
      "rank": 58,
      "score": 9.118479922318633,
      "candidate": "prime_number = 2\n    count = 0\n    for i in num:\n        if num.count(i) == 1:\n            count += 1\n            if count == prime_number:\n                count = 0\n                prime_number += 1\n    return prime_number\n\ndef hex_key_2(num):\n    \"\"\"You have been tasked to write a function that receives a hexadecimal number \n    as a string and counts the number of hexadecimal digits that are primes \n    (prime number, or a prime, is a natural number greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    \n    prime_number = 2\n    count = 0\n    for i in num:\n        if num.count(i) == 1:\n            count += 1\n            if count == prime_number:\n                count = 0\n                prime_number += 1\n    return prime_number\n\ndef hex_key_3(num):\n    \"\"\"You have been tasked to write a function that receives a hexadecimal number \n    as a string and counts the number of hexadecimal digits that are primes \n    (prime number, or a prime, is a natural number greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6"
    },
    {
      "rank": 59,
      "score": 8.918208289096661,
      "candidate": "key = 0\n    for i in num:\n        key += int(i)**2\n    return key\n\n\nprint(hex_key(\"AB\"))\nprint(hex_key(\"1077E\"))\nprint(hex_key(\"ABED1A33\"))\nprint(hex_key(\"123456789ABCDEF0\"))\nprint(hex_key(\"2020\"))"
    },
    {
      "rank": 60,
      "score": 8.913837541188647,
      "candidate": "primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    num = str(num)\n    count = 0\n    for i in num:\n        if i in primes:\n            count += 1\n    return count\n\n\nif __name__ == '__main__':\n    print(hex_key('AB'))\n    print(hex_key('1077E'))\n    print(hex_key('ABED1A33'))\n    print(hex_key('123456789ABCDEF0'))\n    print(hex_key('2020'))"
    },
    {
      "rank": 61,
      "score": 8.851316453015691,
      "candidate": "primes = set([2, 3, 5, 7])\n    key = 0\n    for i in num:\n        if i in primes:\n            key += 1\n    return key\n\n\nif __name__ == \"__main__\":\n    print(hex_key(\"ABED1A33\"))"
    },
    {
      "rank": 62,
      "score": 8.76158111231012,
      "candidate": "if num == \"\":\n        return 0\n    prime = []\n    for i in range(0, len(num), 2):\n        if num[i] == '1':\n            prime.append(1)\n        elif num[i] == '2':\n            prime.append(2)\n        elif num[i] == '3':\n            prime.append(3)\n        elif num[i] == '4':\n            prime.append(4)\n        elif num[i] == '5':\n            prime.append(5)\n        elif num[i] == '6':\n            prime.append(6)\n        elif num[i] == '7':\n            prime.append(7)\n        elif num[i] == '8':\n            prime.append(8)\n        elif num[i] == '9':\n            prime.append(9)\n        elif num[i] == 'A':\n            prime.append(10)\n        elif num[i] == 'B':\n            prime.append(11)\n        elif num[i] == 'C':\n            prime.append(12)\n        elif num[i] == 'D':\n            prime.append(13)\n        elif num[i] == 'E':\n            prime.append(14)\n        elif num[i] == 'F':\n            prime.append(15)\n        else:\n            prime.append(num[i])\n    return len(prime)"
    },
    {
      "rank": 63,
      "score": 8.691207918075401,
      "candidate": "num = num.upper()\n    count = 0\n    for i in range(len(num)):\n        if num[i] == '0':\n            count += 1\n        elif num[i] == '1':\n            count += 2\n        elif num[i] == '2':\n            count += 3\n        elif num[i] == '3':\n            count += 5\n        elif num[i] == '4':\n            count += 7\n        elif num[i] == '5':\n            count += 11\n        elif num[i] == '6':\n            count += 13\n    return count\n\nprint(hex_key('ABED1A33'))\nprint(hex_key('123456789ABCDEF0'))\nprint(hex_key('2020'))"
    },
    {
      "rank": 64,
      "score": 8.691015195757013,
      "candidate": "if len(num) == 0:\n        return 0\n    count = 0\n    for i in num:\n        if (num[i].isnumeric()):\n            count += 1\n    return count\n\n\nif __name__ == \"__main__\":\n    assert hex_key(\"AB\") == 1\n    assert hex_key(\"1077E\") == 2\n    assert hex_key(\"ABED1A33\") == 4\n    assert hex_key(\"123456789ABCDEF0\") == 6\n    assert hex_key(\"2020\") == 2\n    assert hex_key(\"AB\") == 1\n    assert hex_key(\"1077E\") == 2\n    assert hex_key(\"ABED1A33\") == 4\n    assert hex_key(\"123456789ABCDEF0\") == 6\n    assert hex_key(\"2020\") == 2"
    },
    {
      "rank": 65,
      "score": 8.690127447955128,
      "candidate": "# Your code here\n    d = {}\n    for i in num:\n        d[i] = d.get(i,0) + 1\n    return d[num[0]]\n\n\nprint(hex_key(\"AB\"))\nprint(hex_key(\"1077E\"))\nprint(hex_key(\"ABED1A33\"))\nprint(hex_key(\"123456789ABCDEF0\"))\nprint(hex_key(\"2020\"))"
    },
    {
      "rank": 66,
      "score": 8.674674863190317,
      "candidate": "if len(num) == 0:\n        return 0\n    num = num.upper()\n    primes = []\n    for i in range(1,10):\n        if num.count(str(i)) > 1:\n            primes.append(i)\n    return len(primes)\n\ndef hex_key_test():\n    assert hex_key(\"AB\") == 1\n    assert hex_key(\"1077E\") == 2\n    assert hex_key(\"ABED1A33\") == 4\n    assert hex_key(\"123456789ABCDEF0\") == 6\n    assert hex_key(\"2020\") == 2\n\nif __name__ == \"__main__\":\n    hex_key_test()"
    },
    {
      "rank": 67,
      "score": 8.665984418443069,
      "candidate": "primes = [2, 3, 5, 7]\n    key_list = []\n    for i in num:\n        if i in primes:\n            key_list.append(primes.index(i))\n        else:\n            key_list.append(0)\n    return key_list\n\nprint(hex_key(\"AB\"))\nprint(hex_key(\"1077E\"))\nprint(hex_key(\"ABED1A33\"))\nprint(hex_key(\"123456789ABCDEF0\"))\nprint(hex_key(\"2020\"))"
    },
    {
      "rank": 68,
      "score": 8.638751005874653,
      "candidate": "hex_number = str(num).upper()\n    primes = [2, 3, 5, 7, 11, 13, 17]\n    primes_count = 0\n    for i in hex_number:\n        if i in primes:\n            primes_count += 1\n    return primes_count\n\n\nprint(hex_key(\"AB\"))\nprint(hex_key(\"1077E\"))\nprint(hex_key(\"ABED1A33\"))\nprint(hex_key(\"123456789ABCDEF0\"))\nprint(hex_key(\"2020\"))"
    },
    {
      "rank": 69,
      "score": 8.607212457520234,
      "candidate": "# Write your code here.\n    num = num.upper()\n    primes = [2, 3, 5, 7]\n    key = 0\n    for i in num:\n        if i in primes:\n            key += 1\n    return key\n\n\nif __name__ == \"__main__\":\n    print(hex_key(\"AB\"))\n    print(hex_key(\"1077E\"))\n    print(hex_key(\"ABED1A33\"))\n    print(hex_key(\"123456789ABCDEF0\"))\n    print(hex_key(\"2020\"))"
    },
    {
      "rank": 70,
      "score": 8.552935251958734,
      "candidate": "count = 0\n    for char in num:\n        if char.isdigit():\n            count += 1\n        else:\n            if count > 0:\n                break\n    return count\n\n\nprint(hex_key('AB'))\nprint(hex_key('1077E'))\nprint(hex_key('ABED1A33'))\nprint(hex_key('123456789ABCDEF0'))\nprint(hex_key('2020'))"
    },
    {
      "rank": 71,
      "score": 8.55286312609697,
      "candidate": "return len(num) - 1\n\n\ndef hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    key_sum = 0\n    for i in num:\n        if i.isdigit():\n            key_sum += int(i)\n    return key_sum\n\n\ndef hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you"
    },
    {
      "rank": 72,
      "score": 8.547529931314983,
      "candidate": "if num == \"\":\n        return 0\n    else:\n        num = num.upper()\n        result = 0\n        for i in range(len(num)):\n            if num[i] == \"A\" or num[i] == \"B\" or num[i] == \"C\" or num[i] == \"D\" or num[i] == \"E\" or num[i] == \"F\":\n                result += 1\n        return result\n\n\nprint(hex_key(\"AB\"))\nprint(hex_key(\"1077E\"))\nprint(hex_key(\"ABED1A33\"))\nprint(hex_key(\"123456789ABCDEF0\"))\nprint(hex_key(\"2020\"))"
    },
    {
      "rank": 73,
      "score": 8.54306977734235,
      "candidate": "# Your code here\n    primes = []\n    for i in num:\n        if i.isdigit():\n            primes.append(i)\n    primes.sort()\n    return len(primes)\n\n\nprint(hex_key(\"AB\"))\nprint(hex_key(\"1077E\"))\nprint(hex_key(\"ABED1A33\"))\nprint(hex_key(\"123456789ABCDEF0\"))\nprint(hex_key(\"2020\"))"
    },
    {
      "rank": 74,
      "score": 8.50350281520518,
      "candidate": "num_list = [int(n, 16) for n in num.upper()]\n    key_count = 0\n    for i in num_list:\n        if i > 1:\n            for j in range(2, i):\n                if (num_list[i-j] % 2) == 0:\n                    key_count += 1\n                    break\n    return key_count\n\n\ndef hex_key2(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    num_list = [int(n, 16) for n in num.upper()]\n    key_count = 0\n    for i in num_list:\n        if i > 1:\n            for j in range(2, i):\n                if (num_list[i-j] % 2) == 0:\n                    key_count += 1\n                    break\n    return key_count\n\n\ndef hex_key3(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal"
    },
    {
      "rank": 75,
      "score": 8.43369663271146,
      "candidate": "# Your code here\n    num_list = list(num)\n    key = 0\n    for i in num_list:\n        if num_list.count(i) == 1:\n            key += 1\n        else:\n            continue\n    return key\n\nprint(hex_key(\"AB\"))\nprint(hex_key(\"1077E\"))\nprint(hex_key(\"ABED1A33\"))\nprint(hex_key(\"123456789ABCDEF0\"))\nprint(hex_key(\"2020\"))"
    },
    {
      "rank": 76,
      "score": 8.356936319506461,
      "candidate": "counter = 0\n    for i in num:\n        if i in '0123456789ABCDEF':\n            counter += 1\n\n    return counter\n\n\ndef hex_key2(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: You may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n\n    counter = 0\n    for i in num:\n        if i in '0123456789ABCDEF':\n            counter += 1\n    if counter == 2:\n        return \"2\"\n    if counter == 3:\n        return \"3\"\n    if counter == 5:\n        return \"5\"\n    if counter == 7:\n        return \"7\"\n    if counter == 11:\n        return \"B\"\n    if counter == 13:\n        return \"D\"\n\n\ndef hex_key3(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are"
    },
    {
      "rank": 77,
      "score": 8.354113335767657,
      "candidate": "output = 0\n    for i in num:\n        if i in \"ABCDEF\":\n            output += 1\n    return output\n\n\ndef main():\n    print(hex_key(\"AB\"))\n    print(hex_key(\"1077E\"))\n    print(hex_key(\"ABED1A33\"))\n    print(hex_key(\"123456789ABCDEF0\"))\n    print(hex_key(\"2020\"))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 78,
      "score": 8.304725518373367,
      "candidate": "primes = [2, 3, 5, 7]\n    sum = 0\n    for i in num:\n        if i in primes:\n            sum += int(i)\n    return sum\n\nprint(hex_key(\"AB\"))\nprint(hex_key(\"1077E\"))\nprint(hex_key(\"ABED1A33\"))\nprint(hex_key(\"123456789ABCDEF0\"))\nprint(hex_key(\"2020\"))"
    },
    {
      "rank": 79,
      "score": 8.281129627086889,
      "candidate": "num = num.upper()\n    primes = []\n    for i in range(0, 256):\n        if num[i] == 'A' or num[i] == 'B':\n            continue\n        elif num[i] == 'C' or num[i] == 'D' or num[i] == 'E' or num[i] == 'F':\n            continue\n        elif num[i] == 'G' or num[i] == 'H':\n            continue\n        elif num[i] == 'I' or num[i] == 'J':\n            continue\n        elif num[i] == 'K' or num[i] == 'L' or num[i] == 'M' or num[i] == 'N':\n            continue\n        elif num[i] == 'O' or num[i] == 'P' or num[i] == 'Q' or num[i] == 'R' or num[i] == 'S':\n            continue\n        elif num[i] == 'T' or num[i] == 'U' or num[i] == 'V' or num[i] == 'W' or num[i] == 'X' or num[i] == 'Y':\n            continue\n        else:\n            primes.append(i)\n    return len(primes)\n\n\ndef hex_key2(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase."
    },
    {
      "rank": 80,
      "score": 8.241367844352657,
      "candidate": "# Your code here\n    count = 0\n    for c in num:\n        if c.isalpha():\n            count += 1\n\n    return count\n\nprint(hex_key(\"AB\"))\nprint(hex_key(\"1077E\"))\nprint(hex_key(\"ABED1A33\"))\nprint(hex_key(\"123456789ABCDEF0\"))\nprint(hex_key(\"2020\"))"
    },
    {
      "rank": 81,
      "score": 8.192679187477653,
      "candidate": "n = len(num)\n    d = 0\n    for i in range(n):\n        if num[i].isdigit():\n            d += 1\n    return d"
    },
    {
      "rank": 82,
      "score": 8.17203722178808,
      "candidate": "return int(num, 16)\n\nprint(hex_key('ABED1A33'))\nprint(hex_key('123456789ABCDEF0'))\nprint(hex_key('2020'))\nprint(hex_key('AB'))"
    },
    {
      "rank": 83,
      "score": 8.140595108344117,
      "candidate": "primes = [2, 3, 5, 7]\n    if num.isalpha():\n        num = num.upper()\n        for i in range(len(num)):\n            if num[i] in primes:\n                primes.remove(num[i])\n        return len(primes)\n    else:\n        return 0\n\n\nif __name__ == \"__main__\":\n    print(hex_key(\"AB\"))\n    print(hex_key(\"1077E\"))\n    print(hex_key(\"ABED1A33\"))\n    print(hex_key(\"123456789ABCDEF0\"))\n    print(hex_key(\"2020\"))"
    },
    {
      "rank": 84,
      "score": 8.099146371217754,
      "candidate": "return sum([int(digit) for digit in num])\n\n\ndef main():\n    print(hex_key(\"AB\"))\n    print(hex_key(\"1077E\"))\n    print(hex_key(\"ABED1A33\"))\n    print(hex_key(\"123456789ABCDEF0\"))\n    print(hex_key(\"2020\"))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 85,
      "score": 8.045988629774916,
      "candidate": "count = 0\n    for i in num:\n        if i.isnumeric():\n            if i > \"9\" and i < \"A\" and i < \"B\" and i < \"C\" and i < \"D\" and i < \"E\" and i < \"F\":\n                count += 1\n    return count\n\n\nprint(hex_key(\"AB\"))\nprint(hex_key(\"1077E\"))\nprint(hex_key(\"ABED1A33\"))\nprint(hex_key(\"123456789ABCDEF0\"))\nprint(hex_key(\"2020\"))\n\n# This code is contributed by Nikolay Kim (nikolay.kim@gmail.com)"
    },
    {
      "rank": 86,
      "score": 8.017019988580408,
      "candidate": "return int(num, 16)\n\n\ndef main():\n    \"\"\"This function calls the hex_key function and prints the output.\n    \"\"\"\n    print(hex_key(\"AB\"))\n    print(hex_key(\"1077E\"))\n    print(hex_key(\"ABED1A33\"))\n    print(hex_key(\"123456789ABCDEF0\"))\n    print(hex_key(\"2020\"))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 87,
      "score": 7.8704603710471055,
      "candidate": "if num == \"\":\n        return 0\n    num = num.upper()\n    primes = [2, 3, 5, 7, 11, 13, 17, 19]\n    prime_count = 0\n    for i in num:\n        if i in primes:\n            prime_count += 1\n    return prime_count\n\nprint(hex_key(\"AB\"))\nprint(hex_key(\"1077E\"))\nprint(hex_key(\"ABED1A33\"))\nprint(hex_key(\"123456789ABCDEF0\"))\nprint(hex_key(\"2020\"))"
    },
    {
      "rank": 88,
      "score": 7.856543407280512,
      "candidate": "output = 0\n    for i in num:\n        output += int(i)\n    return output\n\n\nprint(hex_key(\"AB\"))\nprint(hex_key(\"1077E\"))\nprint(hex_key(\"ABED1A33\"))\nprint(hex_key(\"123456789ABCDEF0\"))\nprint(hex_key(\"2020\"))"
    },
    {
      "rank": 89,
      "score": 7.848173770064177,
      "candidate": "hex_count = 0\n    for i in num:\n        if (i.isdigit()):\n            hex_count += 1\n    return hex_count\n\n\nif __name__ == \"__main__\":\n    print(hex_key(\"AB\"))\n    print(hex_key(\"1077E\"))\n    print(hex_key(\"ABED1A33\"))\n    print(hex_key(\"123456789ABCDEF0\"))\n    print(hex_key(\"2020\"))"
    },
    {
      "rank": 90,
      "score": 3.0,
      "candidate": "# Your code here\n    hash_map = {\n        '0': 0, '1': 1, '2': 2, '3': 3, '4': 4, '5': 5, '6': 6, '7': 7, '8': 8, '9': 9,\n        'A': 10, 'B': 11, 'C': 12, 'D': 13, 'E': 14, 'F': 15, 'A': 16, 'B': 17, 'C': 18,\n        'D': 19, 'E': 20, 'F': 21, 'A': 22, 'B': 23, 'C': 24, 'D': 25, 'E': 26, 'F': 27,\n    }\n    prime_count = 0\n    for char in num:\n        if char in hash_map:\n            prime_count += hash_map[char]\n    return prime_count\n\n\nif __name__ == '__main__':\n    # These \"asserts\" using only for self-checking and not necessary for auto-testing\n    assert hex_key(\"AB\") == 1, \"First\"\n    assert hex_key(\"1077E\") == 2, \"Second\"\n    assert hex_key(\"ABED1A33\") == 4, \"Third\"\n    assert hex_key(\"123456789ABCDEF0\") == 6, \"Fourth\"\n    assert hex_key(\"2020\") == 2, \"Fifth\"\n    print(\"Coding complete? Click 'Check' to earn cool rewards!\")"
    },
    {
      "rank": 91,
      "score": 3.0,
      "candidate": "# Your code here\n    pass\n\n\n# These \"asserts\" using only for self-checking and not necessary for auto-testing\nif __name__ == \"__main__\":\n    assert hex_key(\"AB\") == 1, \"Test 1 failed\"\n    assert hex_key(\"1077E\") == 2, \"Test 2 failed\"\n    assert hex_key(\"ABED1A33\") == 4, \"Test 4 failed\"\n    assert hex_key(\"123456789ABCDEF0\") == 6, \"Test 6 failed\"\n    assert hex_key(\"2020\") == 2, \"Test 2 failed\"\n\n    print(\"Coding complete? Click 'Check' to earn cool rewards!\")"
    },
    {
      "rank": 92,
      "score": 3.0,
      "candidate": "num = str(num)\n    prime_num = 2\n    for i in num:\n        if num.count(i) % 2 == 0:\n            prime_num += 1\n    return prime_num\n\n\ndef test_hex_key():\n    assert hex_key(\"AB\") == 1\n    assert hex_key(\"1077E\") == 2\n    assert hex_key(\"ABED1A33\") == 4\n    assert hex_key(\"123456789ABCDEF0\") == 6\n    assert hex_key(\"2020\") == 2"
    },
    {
      "rank": 93,
      "score": 3.0,
      "candidate": "count = 0\n    for i in num:\n        if i == '0' or i == '1' or i == '2' or i == '3' or i == '4' or i == '5' or i == '6' or i == '7' or i == '8' or i == '9':\n            count += 1\n    return count\n\n\ndef test_hex_key():\n    assert hex_key(\"AB\") == 1\n    assert hex_key(\"1077E\") == 2\n    assert hex_key(\"ABED1A33\") == 4\n    assert hex_key(\"123456789ABCDEF0\") == 6\n    assert hex_key(\"2020\") == 2\n\n\ndef main():\n    test_hex_key()\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 94,
      "score": 3.0,
      "candidate": "ans = 0\n    for i in num:\n        if i.isalpha():\n            ans += 2\n        else:\n            ans += 1\n    return ans\n\n\ndef hex_key_2(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    ans = 0\n    for i in num:\n        if i.isalpha():\n            ans += 2\n        else:\n            ans += 1\n    return ans"
    },
    {
      "rank": 95,
      "score": 3.0,
      "candidate": "key = 0\n    for i in range(len(num)):\n        if num[i] == \"A\":\n            key += 2\n        if num[i] == \"B\":\n            key += 3\n        if num[i] == \"C\":\n            key += 5\n        if num[i] == \"D\":\n            key += 7\n        if num[i] == \"E\":\n            key += 11\n        if num[i] == \"F\":\n            key += 13\n    return key\n\n\ndef hex_key_test():\n    num = \"AB\"\n    key = hex_key(num)\n    assert key == 1\n\n    num = \"1077E\"\n    key = hex_key(num)\n    assert key == 2\n\n    num = \"ABED1A33\"\n    key = hex_key(num)\n    assert key == 4\n\n    num = \"123456789ABCDEF0\"\n    key = hex_key(num)\n    assert key == 6\n\n    num = \"2020\"\n    key = hex_key(num)\n    assert key == 2\n\n\nif __name__ == \"__main__\":\n    hex_key_test()"
    },
    {
      "rank": 96,
      "score": 3.0,
      "candidate": "if len(num) == 1:\n        return 0\n    if len(num) == 2:\n        return 1\n    if len(num) == 3:\n        return 2\n    if len(num) == 4:\n        return 3\n    if len(num) == 5:\n        return 4\n    if len(num) == 6:\n        return 5\n    if len(num) == 7:\n        return 6\n    if len(num) == 8:\n        return 7\n    if len(num) == 9:\n        return 8\n    if len(num) == 10:\n        return 9\n    if len(num) == 11:\n        return 10\n    if len(num) == 12:\n        return 11\n    if len(num) == 13:\n        return 12\n    if len(num) == 14:\n        return 13\n    if len(num) == 15:\n        return 14\n    if len(num) == 16:\n        return 15\n    if len(num) == 17:\n        return 16\n    if len(num) == 18:\n        return 17\n    if len(num) == 19:\n        return 18\n    if len(num) == 20:\n        return 19\n    if len(num) == 21:\n        return 20\n    if len(num) == 22:\n        return 21\n    if len(num) == 23:\n        return 22\n    if len(num) == 24:\n        return 23\n    if len(num) == 25:\n        return 24\n    if len(num) == 26:\n        return 25\n    if len(num) == 27:\n        return 26\n    if len(num) == 28:\n        return 27\n    if len(num) == 29:\n        return 28\n    if len(num) == 30:\n        return 29\n    if len(num) == 31:\n        return 30\n    if len(num) == 32:\n        return 31\n    if len(num) == 33:\n        return 32\n    if len(num) == 34:\n        return 33\n    if len(num) == 35:\n        return 34\n    if len(num) == 36:\n        return 35\n    if len(num)"
    },
    {
      "rank": 97,
      "score": 3.0,
      "candidate": "count = 0\n    for i in num:\n        if num.count(i) == 1:\n            count += 1\n    return count\n\n\ndef main():\n    # These \"asserts\" using only for self-checking and not necessary for auto-testing\n    assert hex_key(\"AB\") == 1, \"First\"\n    assert hex_key(\"1077E\") == 2, \"Second\"\n    assert hex_key(\"ABED1A33\") == 4, \"Third\"\n    assert hex_key(\"123456789ABCDEF0\") == 6, \"Fourth\"\n    assert hex_key(\"2020\") == 2, \"Fifth\"\n    print(\"Coding complete? Click 'Check' to earn cool rewards!\")\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 98,
      "score": 3.0,
      "candidate": "output = 0\n    for i in num:\n        if i.isalpha():\n            output += 1\n    return output\n\n\nprint(hex_key(\"AB\"))\nprint(hex_key(\"1077E\"))\nprint(hex_key(\"ABED1A33\"))\nprint(hex_key(\"123456789ABCDEF0\"))\nprint(hex_key(\"2020\"))\n\n\ndef hex_key_2(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    output = 0\n    for i in num:\n        if i.isalpha():\n            output += 1\n    return output\n\n\nprint(hex_key_2(\"AB\"))\nprint(hex_key_2(\"1077E\"))\nprint(hex_key_2(\"ABED1A33\"))\nprint(hex_key_2(\"123456789ABCDEF0\"))\nprint(hex_key_2(\"2020\"))\n\n\ndef hex_key_3(num):\n    \"\"\"You have been tasked to write a function"
    },
    {
      "rank": 99,
      "score": 3.0,
      "candidate": "# Your code here\n    return len(set(num.upper()))\n\n\ndef hex_key_2(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    \n    # Your code here\n    primes = [2, 3, 5, 7, 11, 13, 17]\n    num = int(num)\n    if num in primes:\n        return 1\n    else:\n        return 0"
    },
    {
      "rank": 100,
      "score": 3.0,
      "candidate": "count = 0\n    for c in num:\n        if (ord(c) > ord('0') and ord(c) < ord('9')) or (c ==''):\n            count += 1\n    return count\n\n\ndef hex_key2(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: You may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n    count = 0\n    for c in num:\n        if (ord(c) > ord('0') and ord(c) < ord('9')) or (c ==''):\n            count += 1\n    for c in num:\n        if (ord(c) > ord('0') and ord(c) < ord('9')) or (c == 'A'):\n            count += 1\n    for c in num:\n        if (ord(c) > ord('0') and ord(c) < ord('9')) or (c == 'B'):\n            count += 1\n    for c in num:\n        if (ord(c) > ord('0') and ord(c) < ord('9')) or (c == '"
    }
  ]
}