{
  "timestamp": "2025-09-14T11:40:57.556182",
  "method": "improved_llm_judge",
  "judge_model": "codellama/CodeLlama-7b-Python-hf",
  "target_model": "codet5-770m",
  "dataset": "humaneval",
  "problem_number": 57,
  "total_candidates": 100,
  "results": [
    {
      "rank": 1,
      "score": 10.0,
      "candidate": "return l[0] < l[-1] and all(l[i] <= l[i+1] for i in range(len(l)-1))\n\n\ndef is_monotonic(l: list):\n    \"\"\"Return True if list elements are monotonically increasing or decreasing.\n    >>> is_monotonic([1, 2, 4, 20])\n    True\n    >>> is_monotonic([1, 20, 4, 10])\n    False\n    >>> is_monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    return l[0] < l[-1] and all(l[i] > l[i+1] for i in range(len(l)-1))\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 2,
      "score": 10.0,
      "candidate": "return l == sorted(l)\n\n\ndef is_monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> is_monotonic([1, 2, 4, 20])\n    True\n    >>> is_monotonic([1, 20, 4, 10])\n    False\n    >>> is_monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    return l == sorted(l)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 3,
      "score": 10.0,
      "candidate": "if len(l) == 1:\n        return True\n    else:\n        return l[0] <= l[-1] or l[0] >= l[-1]\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 4,
      "score": 10.0,
      "candidate": "if len(l) < 2:\n        return True\n    elif l[0] > l[1]:\n        return True\n    elif l[0] < l[1]:\n        return False\n\n\ndef main():\n    import doctest\n\n    doctest.testmod()\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 5,
      "score": 10.0,
      "candidate": "if not l:\n        return False\n    if len(l) == 1:\n        return True\n    if l[0] > l[-1]:\n        return monotonic(l[1:-1])\n    return False\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 6,
      "score": 10.0,
      "candidate": "if len(l) <= 1:\n        return True\n    if l[0] > l[-1]:\n        return False\n    return monotonic(l[1:-1])\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 7,
      "score": 10.0,
      "candidate": "if len(l) == 1:\n        return True\n    elif len(l) == 2:\n        return l[0] > l[1]\n    elif len(l) == 3:\n        return l[0] > l[1] and l[0] < l[2]\n    elif len(l) == 4:\n        return l[0] > l[1] and l[0] < l[2] and l[0] < l[3]\n    elif len(l) == 5:\n        return l[0] > l[1] and l[0] < l[2] and l[0] < l[3] and l[0] < l[4]\n    else:\n        return False"
    },
    {
      "rank": 8,
      "score": 10.0,
      "candidate": "return l[0] > l[-1] or l[-1] < l[0]\n\n\ndef main():\n    import doctest\n\n    doctest.testmod()\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 9,
      "score": 10.0,
      "candidate": "if len(l) < 2:\n        return True\n    if l[0] >= l[1]:\n        return False\n    return monotonic(l[1:])\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 10,
      "score": 10.0,
      "candidate": "if len(l) == 0:\n        return True\n    if len(l) == 1:\n        return l[0] == l[0]\n    if l[0] > l[-1]:\n        return False\n    return monotonic(l[1:]) or monotonic(l[:-1])\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 11,
      "score": 10.0,
      "candidate": "if len(l) < 2:\n        return True\n    else:\n        return l[0] > l[-1]\n\n\ndef monotonic_list(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic_list([1, 2, 4, 20])\n    True\n    >>> monotonic_list([1, 20, 4, 10])\n    False\n    >>> monotonic_list([4, 1, 0, -10])\n    True\n    \"\"\"\n    if len(l) < 2:\n        return True\n    else:\n        return l[0] > l[-1]"
    },
    {
      "rank": 12,
      "score": 10.0,
      "candidate": "if len(l) < 2:\n        return True\n    for i in range(1, len(l)):\n        if l[i] > l[i-1]:\n            return False\n    return True\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 13,
      "score": 10.0,
      "candidate": "if len(l) <= 1:\n        return True\n    if l[0] > l[-1]:\n        return False\n    return monotonic(l[1:-1])\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 14,
      "score": 10.0,
      "candidate": "return (l[0] >= l[-1]) and (l[1:] == sorted(l[1:]))\n\n\ndef main():\n    import doctest\n    doctest.testmod()\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 15,
      "score": 10.0,
      "candidate": "if len(l) < 2:\n        return True\n\n    for i in range(1, len(l)):\n        if l[i] > l[i - 1]:\n            return False\n    return True\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 16,
      "score": 10.0,
      "candidate": "if len(l) < 2:\n        return True\n    else:\n        return l[0] < l[-1] and monotonic(l[1:-1])\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 17,
      "score": 9.977676862310096,
      "candidate": "if len(l) <= 1:\n        return True\n    else:\n        return l[0] <= l[-1] and monotonic(l[1:-1])\n\n\ndef monotonic_recursive(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic_recursive([1, 2, 4, 20])\n    True\n    >>> monotonic_recursive([1, 20, 4, 10])\n    False\n    >>> monotonic_recursive([4, 1, 0, -10])\n    True\n    \"\"\"\n    if len(l) <= 1:\n        return True\n    else:\n        if l[0] <= l[-1]:\n            return monotonic_recursive(l[1:-1])\n        else:\n            return monotonic_recursive(l[:-1])\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 18,
      "score": 9.957138066636933,
      "candidate": "if len(l) == 1:\n        return True\n    elif len(l) == 2:\n        return l[0] > l[1]\n    elif len(l) == 3:\n        return l[0] < l[1]\n    else:\n        return False\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 19,
      "score": 9.898424734554691,
      "candidate": "l = sorted(l)\n    return l[0] < l[-1] or l[0] > l[-1]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 20,
      "score": 9.857201981002467,
      "candidate": "if len(l) <= 1:\n        return True\n    return l[0] > l[-1] and monotonic(l[1:-1])\n\n\ndef main():\n    import doctest\n\n    doctest.testmod()\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 21,
      "score": 9.854462940360165,
      "candidate": "if len(l) == 0:\n        return False\n    if len(l) == 1:\n        return True\n    if len(l) == 2:\n        return l[0] == l[1]\n    if len(l) == 3:\n        return l[0] < l[1] < l[2]\n    if len(l) == 4:\n        return l[0] > l[1] > l[2] > l[3]\n    return False\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 22,
      "score": 9.835774336832218,
      "candidate": "if len(l) == 1:\n        return True\n\n    if len(l) % 2 == 1:\n        return False\n\n    # find the middle of the list\n    mid = len(l) // 2\n    if l[mid] > l[mid - 1]:\n        return False\n    if l[mid] < l[mid + 1]:\n        return True\n\n    return False\n\n\ndef is_monotonic(l: list):\n    \"\"\"Return True if list elements are monotonically increasing or decreasing.\n    >>> is_monotonic([1, 2, 4, 20])\n    True\n    >>> is_monotonic([1, 20, 4, 10])\n    False\n    >>> is_monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if len(l) == 1:\n        return True\n\n    if len(l) % 2 == 1:\n        return False\n\n    # find the middle of the list\n    mid = len(l) // 2\n    if l[mid] > l[mid - 1]:\n        return False\n    if l[mid] < l[mid + 1]:\n        return True\n\n    return False"
    },
    {
      "rank": 23,
      "score": 9.800012876072412,
      "candidate": "if len(l) < 2:\n        return True\n    if l[0] > l[-1]:\n        return monotonic(l[1:-1])\n    return False\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 24,
      "score": 9.782363540898022,
      "candidate": "if len(l) < 2:\n        return True\n\n    if l[0] < l[-1]:\n        return True\n\n    return False\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 25,
      "score": 9.686022352696328,
      "candidate": "return all(l[i] <= l[i + 1] for i in range(len(l) - 1))\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 26,
      "score": 9.657036158058132,
      "candidate": "i = 0\n    while i < len(l):\n        if l[i] > l[i - 1]:\n            return False\n        i += 1\n    return True\n\n\ndef main():\n    import doctest\n\n    doctest.testmod()\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 27,
      "score": 9.643191990999085,
      "candidate": "if len(l) <= 1:\n        return True\n    return l[0] > l[-1]\n\n\ndef monotonic_increasing(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic_increasing([1, 2, 4, 20])\n    True\n    >>> monotonic_increasing([1, 20, 4, 10])\n    False\n    >>> monotonic_increasing([4, 1, 0, -10])\n    True\n    \"\"\"\n    if len(l) <= 1:\n        return True\n    return l[0] > l[-1]\n\n\ndef monotonic_decreasing(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic_decreasing([1, 2, 4, 20])\n    True\n    >>> monotonic_decreasing([1, 20, 4, 10])\n    False\n    >>> monotonic_decreasing([4, 1, 0, -10])\n    True\n    \"\"\"\n    if len(l) <= 1:\n        return True\n    return l[0] < l[-1]\n\n\ndef monotonic_decreasing_increasing(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic_decreasing_increasing([1, 2, 4, 20])\n    True\n    >>> monotonic_decreasing_increasing([1, 20, 4, 10])\n    False\n    >>> monotonic_decreasing_increasing([4, 1, 0, -10])\n    True\n    \"\"\"\n    if len(l) <= 1:\n        return True\n    return l[0] < l[-1]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 28,
      "score": 9.621538468508984,
      "candidate": "if not l:\n        return True\n    if len(l) == 1:\n        return l[0] == l[-1]\n    if l[0] > l[-1]:\n        return monotonic(l[1:-1])\n    else:\n        return monotonic(l[:-1])\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 29,
      "score": 9.558328062273828,
      "candidate": "if len(l) == 1:\n        return True\n    if len(l) == 2:\n        if l[0] < l[1]:\n            return False\n        else:\n            return True\n    if len(l) == 3:\n        if l[0] > l[1]:\n            return False\n        elif l[0] == l[2]:\n            return True\n    return False"
    },
    {
      "rank": 30,
      "score": 9.453457551837552,
      "candidate": "return l[0] < l[-1]\n\n\ndef is_monotonic(l: list):\n    \"\"\"Return True if list elements are monotonically increasing or decreasing.\n    >>> is_monotonic([1, 2, 4, 20])\n    True\n    >>> is_monotonic([1, 20, 4, 10])\n    False\n    >>> is_monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    return l[0] > l[-1]\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 31,
      "score": 9.383853636473724,
      "candidate": "if len(l) < 2:\n        return True\n    if l[0] > l[-1]:\n        return False\n    return monotonic(l[1:-1])\n\n\ndef monotonic_list(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic_list([1, 2, 4, 20])\n    True\n    >>> monotonic_list([1, 20, 4, 10])\n    False\n    >>> monotonic_list([4, 1, 0, -10])\n    True\n    \"\"\"\n    if len(l) < 2:\n        return True\n    if l[0] > l[-1]:\n        return False\n    return monotonic_list(l[1:-1])\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 32,
      "score": 9.370583536698913,
      "candidate": "if len(l) <= 1:\n        return True\n\n    l.sort()\n    return l[0] == l[-1]"
    },
    {
      "rank": 33,
      "score": 9.226766272351448,
      "candidate": "if len(l) < 2:\n        return True\n    if l[0] < l[-1]:\n        return False\n    return monotonic(l[1:-1])\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 34,
      "score": 9.21346272767743,
      "candidate": "if len(l) == 1:\n        return True\n    if len(l) == 2:\n        return l[0] == l[1]\n\n    if l[0] < l[1]:\n        return False\n    return True\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 35,
      "score": 9.205959372648458,
      "candidate": "return all(x > y for x, y in zip(l, l[1:]))\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 36,
      "score": 9.177268828905222,
      "candidate": "if not l:\n        return True\n    elif l[0] < l[-1]:\n        return monotonic(l[1:-1])\n    else:\n        return False\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 37,
      "score": 9.122564458729856,
      "candidate": "if len(l) == 1:\n        return True\n    if len(l) == 2:\n        return l[0] >= l[1]\n    return l[1] <= l[0]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 38,
      "score": 8.973005557553902,
      "candidate": "if len(l) < 2:\n        return True\n    if l[0] < l[1]:\n        return monotonic(l[1:])\n    return False\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 39,
      "score": 8.95994420569242,
      "candidate": "return all(l[i] >= l[i + 1] for i in range(len(l) - 1))\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 40,
      "score": 8.946210893390457,
      "candidate": "for i in range(1, len(l)):\n        if l[i] > l[i - 1]:\n            return False\n    return True"
    },
    {
      "rank": 41,
      "score": 8.910084504002544,
      "candidate": "if len(l) == 0:\n        return True\n    if len(l) == 1:\n        return l[0] == l[0]\n    return l[0] < l[1] and monotonic(l[1:])\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 42,
      "score": 8.902145503295483,
      "candidate": "for i in range(len(l) - 1):\n        if l[i] > l[i + 1]:\n            return False\n    return True\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 43,
      "score": 8.85571690049604,
      "candidate": "return sorted(l) == sorted(l, reverse=True)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 44,
      "score": 8.855395696632057,
      "candidate": "return l[0] < l[-1] or l[-1] > l[0]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 45,
      "score": 8.850707355641543,
      "candidate": "if len(l) < 2:\n        return True\n    if l[0] > l[-1]:\n        return False\n    return monotonic(l[1:-1])"
    },
    {
      "rank": 46,
      "score": 8.8281618090209,
      "candidate": "return all(x > y for x, y in zip(l[:-1], l[1:]))"
    },
    {
      "rank": 47,
      "score": 8.81367773444215,
      "candidate": "return all(l[i] <= l[i + 1] for i in range(len(l) - 1))\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 48,
      "score": 8.750282588864879,
      "candidate": "if len(l) <= 1:\n        return True\n    if l[0] < l[-1]:\n        return monotonic(l[1:-1])\n    else:\n        return False\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 49,
      "score": 8.715724466237427,
      "candidate": "if len(l) <= 1:\n        return True\n    if l[0] >= l[-1]:\n        return monotonic(l[1:-1])\n    return False\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 50,
      "score": 8.701078161001123,
      "candidate": "if len(l) < 2:\n        return False\n    else:\n        return l[0] == l[-1] and monotonic(l[1:-1])\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 51,
      "score": 8.632293453617281,
      "candidate": "return sorted(l) == sorted(l[::-1])\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 52,
      "score": 8.625142247198651,
      "candidate": "return (l[0] > l[1]) and (l[0] < l[2])\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 53,
      "score": 8.60156811074208,
      "candidate": "if len(l) <= 1:\n        return True\n    if l[0] > l[-1]:\n        return False\n    return monotonic(l[1:-1])\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 54,
      "score": 8.592504582976733,
      "candidate": "return l[0] < l[-1] or l[-1] > l[0]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 55,
      "score": 8.574972080534389,
      "candidate": "for i in range(1, len(l)):\n        if l[i] > l[i-1]:\n            return False\n    return True\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 56,
      "score": 8.548876241946822,
      "candidate": "if len(l) < 2:\n        return True\n    return l[0] < l[-1] and monotonic(l[1:-1])\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 57,
      "score": 8.499905739299377,
      "candidate": "return l == sorted(l)\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 58,
      "score": 8.492983219118464,
      "candidate": "if len(l) == 0:\n        return True\n    if len(l) == 1:\n        return l[0] == l[-1]\n    if len(l) == 2:\n        return l[0] > l[-1]\n\n    return l[0] < l[-1]"
    },
    {
      "rank": 59,
      "score": 8.490324832712195,
      "candidate": "return sorted(l) == sorted(l, reverse=True)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 60,
      "score": 8.478208546788407,
      "candidate": "return sorted(l) == sorted(l, reverse=True)"
    },
    {
      "rank": 61,
      "score": 8.447001172765676,
      "candidate": "try:\n        return sorted(l) == sorted(l[::-1])\n    except TypeError:\n        return False\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 62,
      "score": 8.437695832075478,
      "candidate": "if len(l) < 2:\n        return False\n    return l[0] <= l[-1] and all(l[i] <= l[i + 1] for i in range(len(l) - 1))"
    },
    {
      "rank": 63,
      "score": 8.426531424889468,
      "candidate": "if len(l) == 1:\n        return True\n    elif len(l) == 2:\n        return l[0] > l[1]\n    else:\n        return l[0] > l[-1] and monotonic(l[1:-1])\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 64,
      "score": 8.386620303250325,
      "candidate": "if len(l) <= 1:\n        return True\n    elif len(l) == 2:\n        return l[0] > l[1]\n    else:\n        return l[0] < l[1] or l[1] > l[2]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 65,
      "score": 8.351614956112536,
      "candidate": "if len(l) < 2:\n        return True\n\n    if l[0] > l[-1]:\n        return False\n\n    for i in range(len(l) - 1):\n        if l[i] > l[i + 1]:\n            return False\n\n    return True\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 66,
      "score": 8.334608500525688,
      "candidate": "if not l:\n        return False\n    if len(l) == 1:\n        return l[0] == l[-1]\n    return l[0] > l[-1] and l[0] >= l[-1]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 67,
      "score": 8.331556294201176,
      "candidate": "if len(l) < 2:\n        return True\n    if l[0] < l[1]:\n        return False\n    return monotonic(l[1:])\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 68,
      "score": 8.327375965969855,
      "candidate": "if len(l) == 1:\n        return True\n    if l[0] < l[-1]:\n        return monotonic(l[1:])\n    else:\n        return monotonic(l[:-1])\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 69,
      "score": 8.327367757082776,
      "candidate": "return sorted(l) == sorted(l, reverse=True)\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 70,
      "score": 8.298597569547805,
      "candidate": "return l == sorted(l) or l == sorted(l, reverse=True)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 71,
      "score": 8.294940769211511,
      "candidate": "if len(l) == 1:\n        return True\n    elif len(l) == 2:\n        return l[0] >= l[1]\n    else:\n        return l[0] < l[1] or l[1] < l[0]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 72,
      "score": 8.2938925966498,
      "candidate": "return sorted(l) == sorted(l, reverse=True)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 73,
      "score": 8.289838256518838,
      "candidate": "return all(x > y for x, y in zip(l[:-1], l[1:]))\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 74,
      "score": 8.251903304236286,
      "candidate": "if not l:\n        return True\n    if not isinstance(l[0], int):\n        return False\n    if len(l) > 1:\n        return sorted(l)[0] > sorted(l)[1]\n    else:\n        return True\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 75,
      "score": 8.248390367878367,
      "candidate": "if len(l) <= 1:\n        return True\n    if l[0] > l[-1]:\n        return False\n    else:\n        return True"
    },
    {
      "rank": 76,
      "score": 8.212735598038213,
      "candidate": "for i in range(len(l) - 1):\n        if l[i] > l[i + 1]:\n            return False\n    return True"
    },
    {
      "rank": 77,
      "score": 8.211579567659316,
      "candidate": "return all(a > b for a, b in zip(l, l[1:]))\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 78,
      "score": 8.2048573255218,
      "candidate": "if len(l) <= 1:\n        return True\n    if l[0] < l[1]:\n        return False\n    return monotonic(l[1:])\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 79,
      "score": 8.193565922652176,
      "candidate": "if len(l) <= 1:\n        return True\n    if l[0] < l[-1]:\n        return monotonic(l[1:-1])\n    return False\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 80,
      "score": 8.185309335307622,
      "candidate": "if len(l) <= 1:\n        return True\n    if l[0] <= l[-1]:\n        return monotonic(l[1:-1])\n    return False\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 81,
      "score": 8.172253082181854,
      "candidate": "if len(l) < 2:\n        return True\n    return (l[0] > l[-1]) or (l[0] < l[-1])\n\n\ndef monotonic_l(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic_l([1, 2, 4, 20])\n    True\n    >>> monotonic_l([1, 20, 4, 10])\n    False\n    >>> monotonic_l([4, 1, 0, -10])\n    True\n    \"\"\"\n    if len(l) < 2:\n        return True\n    return (l[0] > l[-1]) or (l[0] < l[-1])\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 82,
      "score": 8.163300679823958,
      "candidate": "if len(l) == 0:\n        return True\n    if len(l) == 1:\n        return l[0] == l[0]\n    if len(l) == 2:\n        return l[0] > l[1]\n    if len(l) == 3:\n        return l[0] < l[1]\n    return False\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 83,
      "score": 8.144125099485041,
      "candidate": "return sorted(l) == sorted(l)[::-1]"
    },
    {
      "rank": 84,
      "score": 8.143591138329747,
      "candidate": "if len(l) == 1:\n        return True\n    elif len(l) == 2:\n        return l[0] > l[1]\n    else:\n        if l[0] < l[1]:\n            return True\n        else:\n            return False\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 85,
      "score": 8.105983444291466,
      "candidate": "return all(\n        x <= y for x, y in zip(l[::-1], l[1:])\n    )\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 86,
      "score": 8.08452234024709,
      "candidate": "if not l:\n        return True\n    return l[0] <= max(l) and l[-1] >= min(l)"
    },
    {
      "rank": 87,
      "score": 8.040197642997851,
      "candidate": "if len(l) < 2:\n        return True\n    if len(l) == 2:\n        return l[0] == l[1]\n    return (l[0] > l[-1] and monotonic(l[:-1]) and monotonic(l[1:]))\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 88,
      "score": 8.024835682833125,
      "candidate": "return (l[0] >= l[-1] and l[1:] > l[:-1]) or (l[-1] < l[0] and l[:-1] < l[1:])\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 89,
      "score": 7.990432406683839,
      "candidate": "if len(l) < 2:\n        return True\n    if l[0] > l[-1]:\n        return False\n    return monotonic(l[:-1])\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 90,
      "score": 7.915588979966494,
      "candidate": "return sorted(l) == sorted(l, reverse=True)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 91,
      "score": 7.84634113240411,
      "candidate": "if len(l) == 1:\n        return True\n    if l[0] < l[-1]:\n        return False\n    return monotonic(l[1:-1])\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 92,
      "score": 7.780351419995229,
      "candidate": "if len(l) <= 1:\n        return True\n    return l[0] < l[-1] or l[-1] > l[0]"
    },
    {
      "rank": 93,
      "score": 7.738292593776799,
      "candidate": "if len(l) < 2:\n        return True\n    if l[0] >= l[-1]:\n        return False\n    return monotonic(l[1:-1])\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 94,
      "score": 7.712686970378385,
      "candidate": "return all(l[i] >= l[i+1] for i in range(len(l) - 1))\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 95,
      "score": 7.705183449260731,
      "candidate": "if not l:\n        return True\n    if l[0] < l[1]:\n        return False\n    return monotonic(l[1:])\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 96,
      "score": 7.5819855281879285,
      "candidate": "return sorted(l) == sorted(reversed(l))\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 97,
      "score": 7.4878043221155455,
      "candidate": "return sorted(l) == sorted(l, reverse=True)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 98,
      "score": 7.464609382504557,
      "candidate": "if len(l) <= 1:\n        return True\n    if l[0] < l[-1]:\n        return False\n    return monotonic(l[1:-1])\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 99,
      "score": 7.134571892399572,
      "candidate": "for i in range(1, len(l)):\n        if l[i] > l[i - 1]:\n            return False\n    return True\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 100,
      "score": 3.0,
      "candidate": "if len(l) == 1:\n        return True\n    if len(l) == 2:\n        return l[0] >= l[1]\n    return l[0] > l[-1]\n\n\ndef monotonic_v2(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic_v2([1, 2, 4, 20])\n    True\n    >>> monotonic_v2([1, 20, 4, 10])\n    False\n    >>> monotonic_v2([4, 1, 0, -10])\n    True\n    \"\"\"\n    if len(l) == 1:\n        return l[0] >= l[1]\n    if len(l) == 2:\n        return l[0] > l[-1]\n    if len(l) == 3:\n        return l[0] == l[-1]\n    if len(l) == 4:\n        return l[0] == l[-1] and l[1] >= l[-2]\n    if len(l) == 5:\n        return l[0] == l[-1] and l[1] == l[-2] and l[2] >= l[-3]\n    if len(l) == 6:\n        return l[0] == l[-1] and l[1] == l[-2] and l[2] == l[-3] and l[3] >= l[-4]\n    if len(l) == 7:\n        return l[0] == l[-1] and l[1] == l[-2] and l[2] == l[-3] and l[3] == l[-4] and l[4] >= l[-5]\n\n\ndef monotonic_v3(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic_v3([1, 2, 4, 20])\n    True\n    >>> monotonic_v3([1, 20, 4, 10])\n    False\n    >>> monotonic_v3([4, 1, 0, -10])\n    True\n    \"\"\"\n    if len(l) == 1:\n        return l[0"
    }
  ]
}