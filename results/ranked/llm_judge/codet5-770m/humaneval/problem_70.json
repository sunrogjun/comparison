{
  "timestamp": "2025-09-14T11:46:38.779073",
  "method": "improved_llm_judge",
  "judge_model": "codellama/CodeLlama-7b-Python-hf",
  "target_model": "codet5-770m",
  "dataset": "humaneval",
  "problem_number": 70,
  "total_candidates": 100,
  "results": [
    {
      "rank": 1,
      "score": 10.0,
      "candidate": "if len(lst) == 1:\n        return lst\n    else:\n        min = lst[0]\n        max = lst[-1]\n        for num in lst[1:-1]:\n            if num < min:\n                min = num\n            elif num > max:\n                max = num\n        return [min, max]\n\n\nif __name__ == '__main__':\n    lst = [5, 5, 5, 5]\n    print(strange_sort_list(lst))"
    },
    {
      "rank": 2,
      "score": 10.0,
      "candidate": "if not lst:\n        return []\n\n    start = min(lst)\n    end = max(lst)\n\n    if start > end:\n        return lst\n\n    mid = (start + end) // 2\n    left = strange_sort_list(lst[:mid])\n    right = strange_sort_list(lst[mid:])\n\n    return left + [start] + right\n\n\ndef test_strange_sort_list():\n    assert strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    assert strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    assert strange_sort_list([]) == []\n\n\nif __name__ == \"__main__\":\n    test_strange_sort_list()"
    },
    {
      "rank": 3,
      "score": 10.0,
      "candidate": "if len(lst) < 2:\n        return lst\n    lst.sort()\n    mid = len(lst) // 2\n    left = strange_sort_list(lst[:mid])\n    right = strange_sort_list(lst[mid:])\n    return left + right\n\n\ndef test_strange_sort_list():\n    assert strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    assert strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    assert strange_sort_list([]) == []"
    },
    {
      "rank": 4,
      "score": 10.0,
      "candidate": "if not lst:\n        return []\n    if len(lst) == 1:\n        return lst\n    if len(lst) == 2:\n        return [lst[0], lst[1]]\n\n    first = lst[0]\n    last = lst[len(lst) - 1]\n\n    return [first, last]\n\n\nprint(strange_sort_list([1, 2, 3, 4]))\nprint(strange_sort_list([5, 5, 5, 5]))\nprint(strange_sort_list([]))"
    },
    {
      "rank": 5,
      "score": 10.0,
      "candidate": "if len(lst) == 1:\n        return lst\n    min_val = min(lst)\n    max_val = max(lst)\n    if max_val - min_val < 3:\n        return lst\n    min_val_index = lst.index(min_val)\n    max_val_index = lst.index(max_val)\n    return strange_sort_list(lst[min_val_index + 1: max_val_index]) + [min_val] + strange_sort_list(lst[0: max_val_index - min_val_index])\n\n\ndef main():\n    print(strange_sort_list([1, 2, 3, 4]))\n    print(strange_sort_list([5, 5, 5, 5]))\n    print(strange_sort_list([]))\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 6,
      "score": 10.0,
      "candidate": "if lst == []:\n        return []\n\n    lst.sort()\n    start = lst[0]\n    end = lst[-1]\n    for i in range(1, len(lst)):\n        if lst[i] < start:\n            start = lst[i]\n        elif lst[i] > end:\n            end = lst[i]\n\n    return [start, end]\n\n\nprint(strange_sort_list([1, 2, 3, 4]))\nprint(strange_sort_list([5, 5, 5, 5]))\nprint(strange_sort_list([]))"
    },
    {
      "rank": 7,
      "score": 10.0,
      "candidate": "if len(lst) < 2:\n        return lst\n\n    min_val = lst[0]\n    max_val = lst[0]\n    for val in lst[1:]:\n        if val < min_val:\n            min_val = val\n        elif val > max_val:\n            max_val = val\n\n    return [min_val] + sorted(lst[1:], key=lambda x: x - min_val) + [max_val]"
    },
    {
      "rank": 8,
      "score": 10.0,
      "candidate": "if len(lst) == 0:\n        return []\n    if len(lst) == 1:\n        return [lst[0]]\n\n    min_val = min(lst)\n    max_val = max(lst)\n\n    return sorted([i for i in lst if i >= min_val and i <= max_val])"
    },
    {
      "rank": 9,
      "score": 10.0,
      "candidate": "if len(lst) < 2:\n        return lst\n\n    minimum = min(lst)\n    maximum = max(lst)\n    sorted_list = []\n    for i in lst:\n        if i < minimum:\n            sorted_list.append(minimum)\n            minimum = i\n        elif i > maximum:\n            sorted_list.append(maximum)\n            maximum = i\n        else:\n            sorted_list.append(i)\n\n    return sorted_list + [minimum, maximum]\n\n\ndef test_strange_sort_list():\n    assert strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    assert strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    assert strange_sort_list([]) == []"
    },
    {
      "rank": 10,
      "score": 10.0,
      "candidate": "if len(lst) == 1:\n        return lst\n\n    l = len(lst)\n    mid = l//2\n    mini = lst[0]\n    maxi = lst[mid]\n\n    for i in range(mid):\n        if lst[i] < mini:\n            mini = lst[i]\n\n    for i in range(mid, l):\n        if lst[i] > maxi:\n            maxi = lst[i]\n\n    lst[0], lst[mid] = maxi, mini\n\n    return strange_sort_list(lst)\n\n\nprint(strange_sort_list([1, 2, 3, 4]))\nprint(strange_sort_list([5, 5, 5, 5]))\nprint(strange_sort_list([]))"
    },
    {
      "rank": 11,
      "score": 10.0,
      "candidate": "if len(lst) == 0:\n        return []\n    min_val = lst[0]\n    max_val = lst[0]\n    for val in lst[1:]:\n        if val < min_val:\n            min_val = val\n        elif val > max_val:\n            max_val = val\n    return [min_val, max_val]\n\n\ndef main():\n    lst = [1, 2, 3, 4]\n    print(strange_sort_list(lst))\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 12,
      "score": 10.0,
      "candidate": "min = lst[0]\n    max = lst[0]\n    for i in lst[1:]:\n        if i < min:\n            min = i\n        if i > max:\n            max = i\n    return [min, max]\n\n\nif __name__ == '__main__':\n    assert strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    assert strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    assert strange_sort_list([]) == []"
    },
    {
      "rank": 13,
      "score": 10.0,
      "candidate": "if len(lst) < 2:\n        return lst\n\n    start = lst[0]\n    end = lst[-1]\n\n    if start < end:\n        mid = (start + end) // 2\n        strange_sort_list(lst[:mid])\n        strange_sort_list(lst[mid:])\n        return strange_sort_list(lst)\n\n    return lst\n\n\ndef test_strange_sort_list():\n    assert strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    assert strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    assert strange_sort_list([]) == []"
    },
    {
      "rank": 14,
      "score": 10.0,
      "candidate": "if len(lst) < 2:\n        return lst\n\n    lst_len = len(lst)\n    if lst_len == 1:\n        return lst\n\n    lst_min = lst[0]\n    lst_max = lst[lst_len - 1]\n\n    for i in range(1, lst_len - 1):\n        if lst[i] < lst_min:\n            lst_min = lst[i]\n        elif lst[i] > lst_max:\n            lst_max = lst[i]\n\n    lst_min = lst_min + 1\n    lst_max = lst_max - 1\n\n    lst_min_index = lst.index(lst_min)\n    lst_max_index = lst.index(lst_max)\n\n    lst[lst_min_index], lst[lst_max_index] = lst[lst_max_index], lst[lst_min_index]\n\n    return strange_sort_list(lst)\n\n\ndef main():\n    print(strange_sort_list([1, 2, 3, 4]))\n    print(strange_sort_list([5, 5, 5, 5]))\n    print(strange_sort_list([]))\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 15,
      "score": 10.0,
      "candidate": "if lst == []:\n        return []\n\n    start_val = lst[0]\n    end_val = lst[len(lst) - 1]\n\n    start_index = 0\n    end_index = len(lst) - 1\n\n    while start_index < len(lst) and end_index >= start_index:\n\n        if lst[start_index] < lst[end_index]:\n            lst[start_index], lst[end_index] = lst[end_index], lst[start_index]\n            start_index += 1\n\n        elif lst[start_index] > lst[end_index]:\n            lst[start_index], lst[end_index] = lst[end_index], lst[start_index]\n            end_index -= 1\n\n        else:\n            start_index += 1\n\n    lst[start_index:end_index+1] = lst[start_index:end_index+1][::-1]\n\n    return lst\n\n\ndef test_strange_sort_list():\n    assert strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    assert strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    assert strange_sort_list([]) == []"
    },
    {
      "rank": 16,
      "score": 10.0,
      "candidate": "min_val = min(lst)\n    max_val = max(lst)\n    sorted_lst = []\n    for i in lst:\n        if i < min_val:\n            sorted_lst.append(min_val)\n            min_val = i\n        elif i > max_val:\n            sorted_lst.append(max_val)\n            max_val = i\n        else:\n            sorted_lst.append(i)\n    return sorted_lst\n\n\ndef test_strange_sort_list():\n    assert strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    assert strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    assert strange_sort_list([]) == []"
    },
    {
      "rank": 17,
      "score": 10.0,
      "candidate": "if not lst:\n        return []\n    if len(lst) == 1:\n        return lst\n    min_val = min(lst)\n    max_val = max(lst)\n    return [i for i in lst if i <= min_val and i >= max_val] + [max_val] + [min_val]\n\n\ndef main():\n    print(strange_sort_list([1, 2, 3, 4]))\n    print(strange_sort_list([5, 5, 5, 5]))\n    print(strange_sort_list([]))\n    print(strange_sort_list([1, 2, 3]))\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 18,
      "score": 10.0,
      "candidate": "min_value = min(lst)\n    max_value = max(lst)\n\n    if len(lst) > 1:\n        for i in range(len(lst) - 1):\n            if lst[i] > max_value:\n                max_value = lst[i]\n            elif lst[i] < min_value:\n                min_value = lst[i]\n        return [min_value, max_value]\n    return lst\n\n\nprint(strange_sort_list([1, 2, 3, 4]))\nprint(strange_sort_list([5, 5, 5, 5]))\nprint(strange_sort_list([]))"
    },
    {
      "rank": 19,
      "score": 10.0,
      "candidate": "if not lst:\n        return []\n\n    minimum = lst[0]\n    maximum = lst[-1]\n    for i in range(len(lst) - 1):\n        if lst[i] < minimum:\n            minimum = lst[i]\n        if lst[i] > maximum:\n            maximum = lst[i]\n\n    return [minimum] + sorted(lst[1:-1], reverse=True)\n\n\ndef test_strange_sort_list():\n    assert strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    assert strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    assert strange_sort_list([]) == []"
    },
    {
      "rank": 20,
      "score": 10.0,
      "candidate": "if not lst:\n        return []\n\n    if len(lst) == 1:\n        return lst\n\n    min_val = min(lst)\n    max_val = max(lst)\n    min_idx = lst.index(min_val)\n    max_idx = lst.index(max_val)\n    lst = lst[min_idx + 1:max_idx]\n    return strange_sort_list(lst) + [max_val] + strange_sort_list(lst[1:])\n\n\nif __name__ == \"__main__\":\n    assert strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    assert strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    assert strange_sort_list([]) == []"
    },
    {
      "rank": 21,
      "score": 10.0,
      "candidate": "if len(lst) <= 1:\n        return lst\n\n    min_val = lst[0]\n    max_val = lst[-1]\n\n    for i in range(len(lst) - 1):\n        if lst[i] < min_val:\n            min_val = lst[i]\n\n        if lst[i] > max_val:\n            max_val = lst[i]\n\n    return [min_val] + lst[1:-1] + [max_val]\n\n\nprint(strange_sort_list([1, 2, 3, 4]))\nprint(strange_sort_list([5, 5, 5, 5]))\nprint(strange_sort_list([]))"
    },
    {
      "rank": 22,
      "score": 9.972636153799472,
      "candidate": "if lst is None or len(lst) == 0:\n        return lst\n\n    # the first number\n    min_num = lst[0]\n    min_index = 0\n\n    # the last number\n    max_num = lst[-1]\n    max_index = len(lst) - 1\n\n    # iterate over the remaining numbers\n    for index in range(1, len(lst)):\n        if lst[index] < min_num:\n            min_num = lst[index]\n            min_index = index\n        if lst[index] > max_num:\n            max_num = lst[index]\n            max_index = index\n\n    # put the remaining numbers into a list\n    sorted_list = [lst[min_index], lst[max_index]]\n    return sorted_list"
    },
    {
      "rank": 23,
      "score": 9.94745956555495,
      "candidate": "if not lst:\n        return []\n\n    min_idx = 0\n    max_idx = len(lst) - 1\n    while min_idx <= max_idx:\n        if lst[min_idx] < lst[max_idx]:\n            lst[min_idx], lst[max_idx] = lst[max_idx], lst[min_idx]\n        min_idx += 1\n        max_idx -= 1\n\n    return lst\n\n\ndef main():\n    print(strange_sort_list([1, 2, 3, 4]))\n    print(strange_sort_list([5, 5, 5, 5]))\n    print(strange_sort_list([]))\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 24,
      "score": 9.92944958886775,
      "candidate": "min_val = lst[0]\n    max_val = lst[0]\n    for i in range(1, len(lst)):\n        if lst[i] < min_val:\n            min_val = lst[i]\n        if lst[i] > max_val:\n            max_val = lst[i]\n    return [min_val, max_val]\n\n\ndef test_strange_sort_list():\n    assert strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    assert strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    assert strange_sort_list([]) == []\n    assert strange_sort_list([-5, -3, -2, -1]) == [-1, -2, -3, -5]"
    },
    {
      "rank": 25,
      "score": 9.882499297176539,
      "candidate": "if len(lst) == 1:\n        return lst\n\n    min_value = min(lst)\n    max_value = max(lst)\n\n    sorted_lst = []\n\n    for i in range(len(lst)):\n        if lst[i] <= min_value:\n            sorted_lst.append(min_value)\n            sorted_lst.append(lst[i])\n            min_value = lst[i]\n        elif lst[i] > max_value:\n            sorted_lst.append(max_value)\n            sorted_lst.append(lst[i])\n            max_value = lst[i]\n\n    return sorted_lst\n\n\nprint(strange_sort_list([1, 2, 3, 4]))\nprint(strange_sort_list([5, 5, 5, 5]))\nprint(strange_sort_list([]))"
    },
    {
      "rank": 26,
      "score": 9.8536687334418,
      "candidate": "min_val = min(lst)\n    max_val = max(lst)\n    lst.remove(min_val)\n    lst.remove(max_val)\n    lst.append(max_val)\n    lst.append(min_val)\n    return lst\n\n\nprint(strange_sort_list([1, 2, 3, 4]))\nprint(strange_sort_list([5, 5, 5, 5]))\nprint(strange_sort_list([]))"
    },
    {
      "rank": 27,
      "score": 9.82495726703528,
      "candidate": "if len(lst) == 1:\n        return lst\n    if len(lst) == 2:\n        if lst[0] > lst[1]:\n            return [lst[0], lst[1]]\n        return lst\n    if lst[0] > lst[1]:\n        return [lst[0], lst[1]]\n    if lst[0] == lst[2]:\n        return [lst[0], lst[2]]\n    if lst[0] == lst[3]:\n        return [lst[0], lst[3]]\n    if lst[0] == lst[4]:\n        return [lst[0], lst[4]]\n    if lst[0] == lst[5]:\n        return [lst[0], lst[5]]\n    if lst[0] == lst[6]:\n        return [lst[0], lst[6]]\n    if lst[0] == lst[7]:\n        return [lst[0], lst[7]]\n    return [lst[0], lst[1], lst[2], lst[3], lst[4], lst[5], lst[6], lst[7]]\n\n\nif __name__ == '__main__':\n    print(strange_sort_list([1, 2, 3, 4]))\n    print(strange_sort_list([5, 5, 5, 5]))\n    print(strange_sort_list([]))\n    print(strange_sort_list([1]))\n    print(strange_sort_list([1, 2]))\n    print(strange_sort_list([1, 2, 3]))"
    },
    {
      "rank": 28,
      "score": 9.81791378961879,
      "candidate": "if len(lst) == 0:\n        return []\n\n    if len(lst) == 1:\n        return lst\n\n    first_min = lst[0]\n    second_max = lst[0]\n\n    for item in lst[1:]:\n        if item < first_min:\n            first_min = item\n        elif item > second_max:\n            second_max = item\n\n    return [first_min] + strange_sort_list(lst[1:]) + [second_max]\n\n\nprint(strange_sort_list([1, 2, 3, 4]))\nprint(strange_sort_list([5, 5, 5, 5]))\nprint(strange_sort_list([]))"
    },
    {
      "rank": 29,
      "score": 9.79313456468043,
      "candidate": "if lst == []:\n        return []\n    else:\n        if lst[0] == lst[1]:\n            return lst\n        else:\n            mid = lst[0] + lst[1] // 2\n            return [lst[0], mid, lst[1]]\n\n\ndef main():\n    print(strange_sort_list([1, 2, 3, 4]))\n    print(strange_sort_list([5, 5, 5, 5]))\n    print(strange_sort_list([]))\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 30,
      "score": 9.78633073888843,
      "candidate": "if len(lst) == 1:\n        return lst\n    if len(lst) == 2:\n        if lst[0] < lst[1]:\n            return [lst[0], lst[1]]\n        return [lst[1], lst[0]]\n    min_value = min(lst)\n    max_value = max(lst)\n    mid = (min_value + max_value) // 2\n    left_strange = strange_sort_list(lst[:mid])\n    right_strange = strange_sort_list(lst[mid:])\n    return strange_merge_two_lists(left_strange, right_strange)\n\n\ndef strange_merge_two_lists(left, right):\n    result = []\n    i, j = 0, 0\n    while i < len(left) and j < len(right):\n        if left[i] <= right[j]:\n            result.append(left[i])\n            i += 1\n        else:\n            result.append(right[j])\n            j += 1\n    result += left[i:]\n    result += right[j:]\n    return result"
    },
    {
      "rank": 31,
      "score": 9.77135148735283,
      "candidate": "if not lst:\n        return []\n    elif len(lst) == 1:\n        return lst\n    elif len(lst) == 2:\n        return [lst[0], lst[1]]\n    elif len(lst) == 3:\n        return [lst[0], lst[1], lst[2]]\n    else:\n        return [lst[0], lst[1], lst[2]] + strange_sort_list(lst[3:])\n\n\nprint(strange_sort_list([1, 2, 3, 4]))\nprint(strange_sort_list([5, 5, 5, 5]))\nprint(strange_sort_list([]))"
    },
    {
      "rank": 32,
      "score": 9.598069846996758,
      "candidate": "if not lst:\n        return []\n    min_val = lst[0]\n    min_index = 0\n    max_val = lst[-1]\n    max_index = len(lst) - 1\n    while min_index <= max_index:\n        if lst[min_index] <= min_val:\n            lst[min_index], lst[max_index] = lst[max_index], lst[min_index]\n            min_index += 1\n            max_index -= 1\n        else:\n            min_index += 1\n    return lst\n\n\ndef main():\n    print(strange_sort_list([1, 2, 3, 4]))\n    print(strange_sort_list([5, 5, 5, 5]))\n    print(strange_sort_list([]))\n    print(strange_sort_list([1, 2, 3, 4, 5]))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 33,
      "score": 9.579592709877709,
      "candidate": "if len(lst) == 0:\n        return []\n    if len(lst) == 1:\n        return [lst[0]]\n\n    if lst[0] < lst[1]:\n        return [lst[0]]\n\n    m = lst[0]\n    m_idx = 0\n    n = lst[1:]\n    n_idx = len(n) - 1\n\n    while m < n[m_idx]:\n        lst[m_idx], lst[n_idx] = lst[n_idx], lst[m_idx]\n        m_idx += 1\n        n_idx -= 1\n\n    lst[m_idx], lst[n_idx] = lst[n_idx], lst[m_idx]\n    return lst\n\n\nif __name__ == \"__main__\":\n    print(strange_sort_list([1, 2, 3, 4]))\n    print(strange_sort_list([5, 5, 5, 5]))\n    print(strange_sort_list([]))"
    },
    {
      "rank": 34,
      "score": 9.562622440579524,
      "candidate": "if not lst:\n        return []\n    if lst[0] < lst[-1]:\n        return strange_sort_list(lst[1:]) + [lst[0]]\n    else:\n        return strange_sort_list(lst[:-1]) + [lst[-1]]\n\n\nif __name__ == '__main__':\n    assert strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    assert strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    assert strange_sort_list([]) == []\n    assert strange_sort_list([1, 2, 3, 4, 5]) == [1, 4, 2, 3, 5]\n    assert strange_sort_list([1, 2, 3, 4, 5, 6, 7, 8, 9]) == [1, 4, 2, 3, 5, 6, 7, 8, 9]\n    assert strange_sort_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 4, 2, 3, 5, 6, 7, 8, 9, 10]"
    },
    {
      "rank": 35,
      "score": 9.545441482849345,
      "candidate": "if len(lst) <= 1:\n        return lst\n\n    i, j = 0, len(lst) - 1\n    min_val, max_val = lst[i], lst[j]\n    while i < j:\n        if lst[i] < min_val:\n            lst[i], lst[j] = lst[j], lst[i]\n            i += 1\n            j -= 1\n        elif lst[i] > max_val:\n            lst[i], lst[j] = lst[j], lst[i]\n            j -= 1\n        else:\n            i += 1\n\n    return lst\n\n\nif __name__ == '__main__':\n    assert strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    assert strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    assert strange_sort_list([]) == []"
    },
    {
      "rank": 36,
      "score": 9.463324593492588,
      "candidate": "lst.sort()\n    return lst\n\n\ndef test_strange_sort_list():\n    assert strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    assert strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    assert strange_sort_list([]) == []\n\n\nif __name__ == '__main__':\n    test_strange_sort_list()"
    },
    {
      "rank": 37,
      "score": 9.458595689238887,
      "candidate": "if lst == []:\n        return []\n    min_val = lst[0]\n    max_val = lst[-1]\n    strange_lst = []\n    for num in lst:\n        if num < min_val:\n            strange_lst.append(min_val)\n            min_val = num\n        elif num > max_val:\n            strange_lst.append(max_val)\n            max_val = num\n        else:\n            strange_lst.append(num)\n    strange_lst.extend(lst[1:])\n    return strange_lst\n\n\ndef test_strange_sort_list():\n    assert strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    assert strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    assert strange_sort_list([]) == []\n    assert strange_sort_list([1, 2, 3]) == [1, 2, 3]\n    assert strange_sort_list([4]) == [4]"
    },
    {
      "rank": 38,
      "score": 9.272953507030037,
      "candidate": "if not lst:\n        return []\n\n    min_val = lst[0]\n    max_val = lst[-1]\n\n    for i in range(len(lst) - 1):\n        if lst[i] < min_val:\n            min_val = lst[i]\n        elif lst[i] > max_val:\n            max_val = lst[i]\n\n    return [min_val, max_val] + lst[1:]\n\n\nprint(strange_sort_list([1, 2, 3, 4]))\nprint(strange_sort_list([5, 5, 5, 5]))\nprint(strange_sort_list([]))"
    },
    {
      "rank": 39,
      "score": 9.234050852198141,
      "candidate": "if not lst:\n        return []\n    elif len(lst) == 1:\n        return lst\n    elif lst[0] < lst[1]:\n        return [lst[0]] + strange_sort_list(lst[1:])\n    else:\n        return [lst[1]] + strange_sort_list(lst[0:-1])\n\n\nif __name__ == '__main__':\n    assert strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    assert strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    assert strange_sort_list([]) == []"
    },
    {
      "rank": 40,
      "score": 9.226766272351448,
      "candidate": "lst.sort(key=lambda x: (x - 1) % len(lst))\n    return lst"
    },
    {
      "rank": 41,
      "score": 9.21346272767743,
      "candidate": "if len(lst) == 0:\n        return lst\n    if len(lst) == 1:\n        return [lst[0]]\n    min_val = lst[0]\n    max_val = lst[0]\n    for num in lst[1:]:\n        if num < min_val:\n            min_val = num\n        if num > max_val:\n            max_val = num\n    return [min_val] + strange_sort_list(lst[1:]) + [max_val]"
    },
    {
      "rank": 42,
      "score": 9.205959372648458,
      "candidate": "if not lst:\n        return []\n    min_value = lst[0]\n    max_value = lst[-1]\n    min_index = 0\n    max_index = len(lst) - 1\n    while min_index < max_index:\n        if lst[min_index] > max_value:\n            lst[max_index], lst[min_index] = lst[min_index], lst[max_index]\n            max_index -= 1\n        elif lst[min_index] < min_value:\n            lst[min_index], lst[max_index] = lst[max_index], lst[min_index]\n            min_index += 1\n    return lst"
    },
    {
      "rank": 43,
      "score": 9.183391466815202,
      "candidate": "if not lst:\n        return lst\n    lst.sort()\n    min_val = lst[0]\n    max_val = lst[-1]\n    for i in range(len(lst) - 1):\n        if lst[i] < min_val:\n            min_val = lst[i]\n        if lst[i] > max_val:\n            max_val = lst[i]\n    return [min_val, max_val]\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 44,
      "score": 9.177268828905222,
      "candidate": "if len(lst) == 1:\n        return lst\n    if len(lst) == 2:\n        return [lst[0], lst[1]]\n    mid = len(lst) // 2\n    left = strange_sort_list(lst[:mid])\n    right = strange_sort_list(lst[mid:])\n    return left + right\n\n\ndef main():\n    print(strange_sort_list([1, 2, 3, 4]))\n    print(strange_sort_list([5, 5, 5, 5]))\n    print(strange_sort_list([]))\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 45,
      "score": 9.122564458729856,
      "candidate": "if not lst:\n        return []\n\n    min_val = lst[0]\n    max_val = lst[0]\n    for val in lst[1:]:\n        if val < min_val:\n            min_val = val\n        if val > max_val:\n            max_val = val\n    return [min_val, max_val]"
    },
    {
      "rank": 46,
      "score": 8.973005557553902,
      "candidate": "if len(lst) == 1:\n        return lst\n    elif len(lst) == 2:\n        if lst[0] < lst[1]:\n            return lst\n        else:\n            return [lst[0]] + strange_sort_list(lst[1:])\n    elif len(lst) == 3:\n        if lst[0] < lst[1] < lst[2]:\n            return lst\n        elif lst[0] < lst[2]:\n            return [lst[0]] + strange_sort_list(lst[1:])\n        else:\n            return [lst[2]] + strange_sort_list(lst[3:])\n\n\nprint(strange_sort_list([1, 2, 3, 4]))\nprint(strange_sort_list([5, 5, 5, 5]))\nprint(strange_sort_list([]))"
    },
    {
      "rank": 47,
      "score": 8.932217008005624,
      "candidate": "if len(lst) == 0:\n        return lst\n    if len(lst) == 1:\n        return [lst[0]]\n    mid = len(lst) // 2\n    return strange_sort_list(lst[:mid]) + [lst[mid]] + strange_sort_list(lst[mid + 1:])"
    },
    {
      "rank": 48,
      "score": 8.902145503295483,
      "candidate": "if len(lst) <= 1:\n        return lst\n\n    lst.sort()\n    return lst"
    },
    {
      "rank": 49,
      "score": 8.855395696632057,
      "candidate": "if len(lst) <= 1:\n        return lst\n    if lst[0] > lst[-1]:\n        return strange_sort_list(lst[1:]) + [lst[0]]\n    else:\n        return strange_sort_list(lst[:-1]) + [lst[-1]]\n\n\nprint(strange_sort_list([5, 5, 5, 5]))\nprint(strange_sort_list([1, 2, 3, 4]))"
    },
    {
      "rank": 50,
      "score": 8.850707355641543,
      "candidate": "if len(lst) <= 1:\n        return lst\n    else:\n        mid = len(lst) // 2\n        return strange_sort_list(lst[:mid]) + [lst[mid]] + strange_sort_list(lst[mid+1:])"
    },
    {
      "rank": 51,
      "score": 8.81367773444215,
      "candidate": "if len(lst) == 0:\n        return []\n\n    if lst[0] < lst[-1]:\n        return strange_sort_list(lst[1:]) + [lst[0]]\n    else:\n        return strange_sort_list(lst[:-1]) + [lst[-1]]"
    },
    {
      "rank": 52,
      "score": 8.715724466237427,
      "candidate": "if lst == []:\n        return []\n    min_value = min(lst)\n    max_value = max(lst)\n    lst.sort()\n    result = []\n    for i in lst:\n        if i < min_value:\n            result.append(min_value)\n        elif i == max_value:\n            result.append(max_value)\n        else:\n            result.append(i)\n    return result"
    },
    {
      "rank": 53,
      "score": 8.701078161001123,
      "candidate": "if not lst:\n        return []\n    if len(lst) == 1:\n        return lst\n\n    # Find the minimum value and the maximum value\n    min_val = lst[0]\n    max_val = lst[0]\n    for i in range(1, len(lst)):\n        if lst[i] < min_val:\n            min_val = lst[i]\n        if lst[i] > max_val:\n            max_val = lst[i]\n\n    # Sort the list in the right order\n    strange_sort_list_helper(lst, 0, len(lst) - 1)\n\n    # Re-sort the list in the left order\n    strange_sort_list_helper(lst, 0, len(lst) - 1)\n\n    # Merge sorted lists\n    result = []\n    i = 0\n    j = 0\n    k = 0\n    while i < len(lst) and j < len(lst):\n        if lst[i] < lst[j]:\n            result.append(lst[k])\n            i += 1\n        else:\n            result.append(lst[j])\n            j += 1\n        k += 1\n\n    if i < len(lst):\n        result += lst[i:]\n    if j < len(lst):\n        result += lst[j:]\n\n    return result\n\n\ndef strange_sort_list_helper(lst, start, end):\n    '''\n    Helper function to sort list in the right order.\n    '''\n    if start < end:\n        mid = (start + end) // 2\n        strange_sort_list_helper(lst, start, mid)\n        strange_sort_list_helper(lst, mid + 1, end)\n        strange_merge(lst, start, end, mid)\n\n\ndef strange_merge(lst, start, end, mid):\n    '''\n    Helper function to merge sorted lists.\n    '''\n    i = start\n    j = mid\n    k = start\n\n    # Copy the list elements from the left to the right\n    while i < end:\n        if lst[i] < lst[j]:\n            lst[k] = lst["
    },
    {
      "rank": 54,
      "score": 8.692801520950061,
      "candidate": "if len(lst) < 2:\n        return lst\n    min_val = lst[0]\n    max_val = lst[0]\n    for val in lst[1:]:\n        if val < min_val:\n            min_val = val\n        elif val > max_val:\n            max_val = val\n    return [min_val, max_val]"
    },
    {
      "rank": 55,
      "score": 8.610076160146226,
      "candidate": "if len(lst) <= 1:\n        return lst\n    else:\n        min_val = lst[0]\n        max_val = lst[0]\n        for num in lst[1:]:\n            if num < min_val:\n                min_val = num\n            elif num > max_val:\n                max_val = num\n        return [min_val, max_val]"
    },
    {
      "rank": 56,
      "score": 8.608819999274287,
      "candidate": "if lst == []:\n        return lst\n    if len(lst) == 1:\n        return lst\n\n    min_val = min(lst)\n    max_val = max(lst)\n\n    sorted_lst = []\n    for num in lst:\n        if num < min_val:\n            sorted_lst.append(min_val)\n        elif num > max_val:\n            sorted_lst.append(max_val)\n        else:\n            sorted_lst.append(num)\n    return sorted_lst\n\n\nprint(strange_sort_list([5, 5, 5, 5]))\nprint(strange_sort_list([]))\nprint(strange_sort_list([1, 2, 3, 4]))"
    },
    {
      "rank": 57,
      "score": 8.565425580227462,
      "candidate": "if lst == []:\n        return []\n    if len(lst) == 1:\n        return lst\n    if lst[0] < lst[1]:\n        return [lst[0], lst[1]]\n    return [lst[1], lst[0]]"
    },
    {
      "rank": 58,
      "score": 8.53012858503943,
      "candidate": "if len(lst) == 0:\n        return lst\n\n    min_index = 0\n    max_index = len(lst) - 1\n    min_value = lst[min_index]\n    max_value = lst[max_index]\n\n    while min_index < max_index:\n        if lst[min_index] > min_value:\n            lst[min_index], lst[max_index] = lst[max_index], lst[min_index]\n            min_index += 1\n            max_index -= 1\n        elif lst[max_index] < min_value:\n            lst[min_index], lst[max_index] = lst[max_index], lst[max_index]\n            max_index -= 1\n        else:\n            min_index += 1\n            max_index -= 1\n\n    return lst"
    },
    {
      "rank": 59,
      "score": 8.492983219118464,
      "candidate": "if lst == []:\n        return []\n\n    # Base Case: List is empty.\n    if len(lst) <= 1:\n        return lst\n\n    # Find the minimum number.\n    min_num = min(lst)\n\n    # Find the maximum number.\n    max_num = max(lst)\n\n    # Make a list of the range of numbers.\n    range_lst = [max_num]\n    for num in lst:\n        if num < min_num:\n            range_lst.append(min_num)\n        else:\n            range_lst.append(num)\n\n    # Sort the range.\n    return strange_sort_list(range_lst)\n\n\ndef main():\n    print(strange_sort_list([1, 2, 3, 4]))\n    print(strange_sort_list([5, 5, 5, 5]))\n    print(strange_sort_list([]))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 60,
      "score": 8.437695832075478,
      "candidate": "if lst == []:\n        return []\n    if len(lst) == 1:\n        return lst\n    if lst[0] < lst[1]:\n        return [lst[0], lst[1]]\n    if lst[0] > lst[1]:\n        return [lst[1], lst[0]]\n    return [lst[0], lst[1], lst[2]]"
    },
    {
      "rank": 61,
      "score": 8.426531424889468,
      "candidate": "if len(lst) < 2:\n        return lst\n    else:\n        middle = len(lst) // 2\n        left = strange_sort_list(lst[:middle])\n        right = strange_sort_list(lst[middle:])\n        return left + right\n\n\nprint(strange_sort_list([5, 5, 5, 5]))"
    },
    {
      "rank": 62,
      "score": 8.386620303250325,
      "candidate": "if not lst:\n        return []\n\n    lst.append(lst[-1])\n    lst.append(lst[-2])\n\n    min_val = lst[0]\n    max_val = lst[0]\n    for val in lst[1:]:\n        if val < min_val:\n            min_val = val\n        if val > max_val:\n            max_val = val\n\n    lst = [min_val] + lst + [max_val]\n    return lst"
    },
    {
      "rank": 63,
      "score": 8.334608500525688,
      "candidate": "lst.sort(reverse=True)\n    return lst\n\n\nprint(strange_sort_list([1, 2, 3, 4]))\nprint(strange_sort_list([5, 5, 5, 5]))\nprint(strange_sort_list([]))"
    },
    {
      "rank": 64,
      "score": 8.331556294201176,
      "candidate": "if len(lst) == 1:\n        return lst\n    elif len(lst) == 2:\n        if lst[0] < lst[1]:\n            return [lst[0], lst[1]]\n        else:\n            return [lst[1], lst[0]]\n    else:\n        mid = len(lst) // 2\n        left = strange_sort_list(lst[:mid])\n        right = strange_sort_list(lst[mid:])\n        return left + right"
    },
    {
      "rank": 65,
      "score": 8.327375965969855,
      "candidate": "min_val = min(lst)\n    max_val = max(lst)\n    lst = [x for x in lst if x <= max_val]\n    lst = [x for x in lst if x >= min_val]\n    return lst"
    },
    {
      "rank": 66,
      "score": 8.327367757082776,
      "candidate": "min_num = min(lst)\n    max_num = max(lst)\n    lst.remove(min_num)\n    lst.remove(max_num)\n    lst.append(min_num)\n    lst.append(max_num)\n    lst.sort()\n    return lst\n\n\nif __name__ == '__main__':\n    assert strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    assert strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    assert strange_sort_list([]) == []"
    },
    {
      "rank": 67,
      "score": 8.298597569547805,
      "candidate": "if not lst:\n        return []\n    if len(lst) < 2:\n        return lst\n    mid = len(lst) // 2\n    return strange_sort_list(lst[:mid]) + [lst[mid]] + strange_sort_list(lst[mid+1:])"
    },
    {
      "rank": 68,
      "score": 8.294940769211511,
      "candidate": "min_val = min(lst)\n    max_val = max(lst)\n\n    for i in range(0, len(lst)):\n        if lst[i] < min_val:\n            lst[i], lst[min_val] = lst[min_val], lst[i]\n        elif lst[i] > max_val:\n            lst[i], lst[max_val] = lst[max_val], lst[i]\n\n    return lst"
    },
    {
      "rank": 69,
      "score": 8.2938925966498,
      "candidate": "if not lst:\n        return lst\n    lst = sorted(lst)\n    return lst[::-1]"
    },
    {
      "rank": 70,
      "score": 8.212735598038213,
      "candidate": "if not lst:\n        return []\n    n = len(lst)\n    if n < 2:\n        return lst\n    min = lst[0]\n    max = lst[n-1]\n    i = 0\n    j = n-1\n    k = 0\n    while i < n-1:\n        if lst[i] < min:\n            lst[i], lst[k] = lst[k], lst[i]\n            k += 1\n            i += 1\n        elif lst[i] > max:\n            lst[i], lst[j] = lst[j], lst[i]\n            j -= 1\n        else:\n            i += 1\n    return lst"
    },
    {
      "rank": 71,
      "score": 8.211579567659316,
      "candidate": "if lst == []:\n        return []\n    elif len(lst) == 1:\n        return lst\n    else:\n        min_val = min(lst)\n        max_val = max(lst)\n        lst = [i for i in lst if i >= min_val and i <= max_val]\n        return strange_sort_list(lst) + [min_val] + strange_sort_list(lst[1:])"
    },
    {
      "rank": 72,
      "score": 8.209707251476969,
      "candidate": "if len(lst) == 1:\n        return lst\n    min = lst[0]\n    max = lst[0]\n    for i in range(1, len(lst)):\n        if lst[i] < min:\n            min = lst[i]\n        if lst[i] > max:\n            max = lst[i]\n    return [min, max] + lst[1:]"
    },
    {
      "rank": 73,
      "score": 8.193565922652176,
      "candidate": "if len(lst) < 2:\n        return lst\n\n    min_value = lst[0]\n    max_value = lst[0]\n\n    for i in lst:\n        if i < min_value:\n            min_value = i\n        elif i > max_value:\n            max_value = i\n\n    min_index = lst.index(min_value)\n    max_index = lst.index(max_value)\n\n    return strange_sort_list(lst[min_index+1:max_index]) + lst[0:min_index] + strange_sort_list(lst[max_index+1:])\n\n\nif __name__ == \"__main__\":\n    assert strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    assert strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    assert strange_sort_list([]) == []"
    },
    {
      "rank": 74,
      "score": 8.185309335307622,
      "candidate": "if len(lst) <= 1:\n        return lst\n    mid = len(lst) // 2\n    left = strange_sort_list(lst[:mid])\n    right = strange_sort_list(lst[mid:])\n    return [min(left), max(right)]"
    },
    {
      "rank": 75,
      "score": 8.179564342560925,
      "candidate": "if not lst:\n        return lst\n\n    lst = sorted(lst)\n    for i in range(len(lst)):\n        if lst[i] == lst[i - 1]:\n            lst[i] = lst[i - 1]\n            lst.pop(i - 1)\n    return lst\n\n\nif __name__ == '__main__':\n    print(strange_sort_list([1, 2, 3, 4]))"
    },
    {
      "rank": 76,
      "score": 8.144125099485041,
      "candidate": "if len(lst) == 1:\n        return lst\n    if len(lst) == 2:\n        return [lst[0], lst[1]]\n\n    if lst[0] < lst[1]:\n        return strange_sort_list(lst[1:])\n    else:\n        return strange_sort_list(lst[:-1])\n\n\nif __name__ == '__main__':\n    assert strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    assert strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    assert strange_sort_list([]) == []"
    },
    {
      "rank": 77,
      "score": 8.121884567141883,
      "candidate": "if not lst:\n        return []\n\n    lst.sort()\n    return lst"
    },
    {
      "rank": 78,
      "score": 8.105983444291466,
      "candidate": "if len(lst) <= 1:\n        return lst\n\n    min_val = lst[0]\n    max_val = lst[0]\n\n    for i in lst:\n        if i < min_val:\n            min_val = i\n        if i > max_val:\n            max_val = i\n\n    return [min_val] + strange_sort_list(lst[1:]) + [max_val]\n\n\nif __name__ == '__main__':\n    assert strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    assert strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    assert strange_sort_list([]) == []"
    },
    {
      "rank": 79,
      "score": 8.08452234024709,
      "candidate": "if len(lst) == 0:\n        return []\n\n    min_val = min(lst)\n    max_val = max(lst)\n\n    return [min_val] + sorted(lst) + [max_val]"
    },
    {
      "rank": 80,
      "score": 8.040197642997851,
      "candidate": "if lst == []:\n        return []\n\n    n = len(lst)\n    min_val = lst[0]\n    max_val = lst[-1]\n\n    for i in range(n-1):\n        if lst[i] < min_val:\n            min_val = lst[i]\n\n        if lst[i] > max_val:\n            max_val = lst[i]\n\n    return [min_val] + [i+1 for i in range(n-1, -1, -1)] + [max_val]"
    },
    {
      "rank": 81,
      "score": 8.024835682833125,
      "candidate": "if not lst:\n        return []\n    min_val = lst[0]\n    max_val = lst[0]\n    for item in lst[1:]:\n        if item < min_val:\n            min_val = item\n        elif item > max_val:\n            max_val = item\n    return [min_val] + [item for item in lst[1:] if item!= max_val] + [max_val]"
    },
    {
      "rank": 82,
      "score": 7.990432406683839,
      "candidate": "# Base case: list is empty\n    if len(lst) == 0:\n        return []\n\n    # Base case: list contains only one element\n    if len(lst) == 1:\n        return [lst[0]]\n\n    # Base case: list contains only two elements\n    if len(lst) == 2:\n        return [lst[0], lst[1]]\n\n    # Base case: list contains two elements\n    if lst[0] > lst[1]:\n        return [lst[0], lst[1]]\n\n    # Base case: list contains three elements\n    if lst[0] < lst[1] and lst[1] < lst[2]:\n        return [lst[0], lst[1], lst[2]]\n\n    # Base case: list contains four elements\n    if lst[0] < lst[1] < lst[2] and lst[2] < lst[3]:\n        return [lst[0], lst[1], lst[2], lst[3]]\n\n    # Base case: list contains five elements\n    if lst[0] < lst[1] < lst[2] < lst[3] < lst[4]:\n        return [lst[0], lst[1], lst[2], lst[3], lst[4]]\n\n    # Base case: list contains six elements\n    if lst[0] < lst[1] < lst[2] < lst[3] < lst[4] < lst[5]:\n        return [lst[0], lst[1], lst[2], lst[3], lst[4], lst[5]]\n\n    # Base case: list contains seven elements\n    if lst[0] < lst[1] < lst[2] < lst[3] < lst[4] < lst[5] < lst[6]:\n        return [lst[0], lst[1], lst[2], lst[3], lst[4], lst[5], lst[6]]\n\n    # Base case: list contains nine elements\n    if lst[0] < lst[1] < lst[2] < lst[3] < lst[4] < lst[5] < lst[6] < lst[7]:\n        return [lst[0], lst[1], lst"
    },
    {
      "rank": 83,
      "score": 7.938028884277233,
      "candidate": "if not lst:\n        return []\n\n    min_val = lst[0]\n    max_val = lst[0]\n    min_index = 0\n\n    for i in range(1, len(lst)):\n        if lst[i] < min_val:\n            min_val = lst[i]\n            min_index = i\n        if lst[i] > max_val:\n            max_val = lst[i]\n            max_index = i\n\n    return [min_val] + strange_sort_list(lst[min_index+1:max_index])\n\n\nif __name__ == \"__main__\":\n    assert strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    assert strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    assert strange_sort_list([]) == []"
    },
    {
      "rank": 84,
      "score": 7.834022619458933,
      "candidate": "if len(lst) < 2:\n        return lst\n\n    mid = len(lst) // 2\n    left = strange_sort_list(lst[:mid])\n    right = strange_sort_list(lst[mid:])\n\n    return sorted(left + [lst[0]] + right)\n\n\nprint(strange_sort_list([1, 2, 3, 4]))\nprint(strange_sort_list([5, 5, 5, 5]))\nprint(strange_sort_list([]))"
    },
    {
      "rank": 85,
      "score": 7.780351419995229,
      "candidate": "if len(lst) == 1:\n        return lst\n    else:\n        min_val = min(lst)\n        max_val = max(lst)\n        mid_val = (min_val + max_val) // 2\n        return strange_sort_list(lst[0:mid_val]) + \\\n               strange_sort_list(lst[mid_val:])\n\n\nprint(strange_sort_list([1, 2, 3, 4]))\nprint(strange_sort_list([5, 5, 5, 5]))\nprint(strange_sort_list([]))"
    },
    {
      "rank": 86,
      "score": 7.705183449260731,
      "candidate": "if len(lst) < 2:\n        return lst\n    else:\n        mid = len(lst) // 2\n        return strange_sort_list(lst[:mid]) + [lst[mid]] + strange_sort_list(lst[mid + 1:])"
    },
    {
      "rank": 87,
      "score": 7.5819855281879285,
      "candidate": "if len(lst) == 0:\n        return []\n    if len(lst) == 1:\n        return lst\n\n    if lst[0] > lst[-1]:\n        return strange_sort_list(lst[1:-1])\n    else:\n        return strange_sort_list(lst[1:]) + strange_sort_list(lst[0:-1])"
    },
    {
      "rank": 88,
      "score": 7.562924366763077,
      "candidate": "if lst == []:\n        return []\n    min_val = min(lst)\n    max_val = max(lst)\n    return [min_val] + [x for x in lst if x < max_val]\n\n\ndef test_strange_sort_list():\n    assert strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    assert strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    assert strange_sort_list([]) == []\n    assert strange_sort_list([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]\n    assert strange_sort_list([1, 2, 3, 4, 5, 6]) == [1, 2, 3, 4, 5, 6]"
    },
    {
      "rank": 89,
      "score": 7.464609382504557,
      "candidate": "if not lst:\n        return []\n    if len(lst) == 1:\n        return lst\n    if len(lst) == 2:\n        if lst[0] > lst[1]:\n            return [lst[0], lst[1]]\n        else:\n            return [lst[1], lst[0]]\n    mid = len(lst) // 2\n    return strange_sort_list(lst[:mid]) + strange_sort_list(lst[mid:])"
    },
    {
      "rank": 90,
      "score": 7.4506599871439985,
      "candidate": "if lst == []:\n        return []\n    lst.sort()\n    result = []\n    i = 0\n    j = len(lst) - 1\n    while i < len(lst) - 1:\n        if lst[i] < lst[j]:\n            result.append(lst[i])\n            i += 1\n        else:\n            result.append(lst[j])\n            j -= 1\n    return result + lst[i:]\n\n\nif __name__ == '__main__':\n    assert strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    assert strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    assert strange_sort_list([]) == []"
    },
    {
      "rank": 91,
      "score": 7.134571892399572,
      "candidate": "if lst == []:\n        return []\n\n    if len(lst) == 1:\n        return lst\n\n    if lst[0] > lst[1]:\n        return [lst[0]] + strange_sort_list(lst[1:])\n\n    return lst + strange_sort_list(lst[1:])"
    },
    {
      "rank": 92,
      "score": 3.0,
      "candidate": "if not lst:\n        return []\n    if len(lst) == 1:\n        return lst\n    lst.sort()\n    min_value = lst[0]\n    max_value = lst[0]\n    for value in lst[1:]:\n        if value < min_value:\n            min_value = value\n        if value > max_value:\n            max_value = value\n    return [min_value, max_value]\n\n\nif __name__ == \"__main__\":\n    assert strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    assert strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    assert strange_sort_list([]) == []"
    },
    {
      "rank": 93,
      "score": 3.0,
      "candidate": "if not lst:\n        return []\n\n    if len(lst) == 1:\n        return lst\n\n    if lst[0] < lst[-1]:\n        return [lst[-1]] + strange_sort_list(lst[1:])\n    else:\n        return strange_sort_list(lst[1:]) + [lst[0]]\n\n\ndef test_strange_sort_list():\n    assert strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    assert strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    assert strange_sort_list([]) == []\n\n\nif __name__ == '__main__':\n    test_strange_sort_list()"
    },
    {
      "rank": 94,
      "score": 3.0,
      "candidate": "lst.sort()\n    return lst\n\n\ndef test_function(test_case):\n    lst = test_case[0]\n    solution = test_case[1]\n    output = strange_sort_list(lst)\n    if output == solution:\n        print(\"Pass\")\n    else:\n        print(\"Fail\")\n\n\ntest_case_0 = [1, 2, 3, 4]\nsolution_0 = [1, 4, 2, 3]\ntest_case_1 = [5, 5, 5, 5]\nsolution_1 = [5, 5, 5, 5]\ntest_case_2 = []\nsolution_2 = []\ntest_function([test_case_0, solution_0, test_case_1, solution_1, test_case_2, solution_2])"
    },
    {
      "rank": 95,
      "score": 3.0,
      "candidate": "min_val = min(lst)\n    max_val = max(lst)\n\n    if min_val < max_val:\n        mid_idx = (min_val + max_val) // 2\n\n        strange_sort_list(lst[:mid_idx])\n        strange_sort_list(lst[mid_idx:])\n\n        strange_sort_list(lst[:])\n\n        return lst\n    else:\n        return lst\n\n\ndef test_strange_sort_list():\n    assert strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    assert strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    assert strange_sort_list([]) == []\n\n\nif __name__ == \"__main__\":\n    test_strange_sort_list()"
    },
    {
      "rank": 96,
      "score": 3.0,
      "candidate": "if not lst:\n        return []\n\n    min_value = min(lst)\n    max_value = max(lst)\n\n    if max_value - min_value == 1:\n        return lst\n\n    result = []\n    while min_value < max_value:\n        mid_index = (min_value + max_value) // 2\n        result.append(min_value)\n        min_value = mid_index\n\n    result.append(max_value)\n\n    return result\n\n\nif __name__ == '__main__':\n    print(strange_sort_list([1, 2, 3, 4]))\n    print(strange_sort_list([5, 5, 5, 5]))\n    print(strange_sort_list([]))"
    },
    {
      "rank": 97,
      "score": 3.0,
      "candidate": "if not lst:\n        return []\n\n    # find the minimum value\n    min_value = lst[0]\n    for i in lst:\n        if i < min_value:\n            min_value = i\n\n    # find the maximum value\n    max_value = lst[-1]\n    for i in lst:\n        if i > max_value:\n            max_value = i\n\n    # swap the minimum and maximum values\n    i = 0\n    j = len(lst) - 1\n    while i < len(lst) - 1 and lst[i] <= lst[i+1]:\n        lst[i], lst[j] = lst[j], lst[i]\n        i += 1\n        j -= 1\n\n    # add the minimum value to the list\n    lst[i], lst[0] = lst[0], lst[i]\n\n    return lst\n\n\nif __name__ == '__main__':\n    import unittest\n\n    class TestStrangeSortList(unittest.TestCase):\n\n        def test_strange_sort_list(self):\n            self.assertEqual(strange_sort_list([1, 2, 3, 4]), [1, 4, 2, 3])\n            self.assertEqual(strange_sort_list([5, 5, 5, 5]), [5, 5, 5, 5])\n            self.assertEqual(strange_sort_list([]), [])\n\n    unittest.main()"
    },
    {
      "rank": 98,
      "score": 3.0,
      "candidate": "if lst is None:\n        return None\n\n    length = len(lst)\n    if length <= 1:\n        return lst\n\n    min_value = min(lst)\n    max_value = max(lst)\n\n    mid_point = (length // 2) - 1\n\n    sorted_lst = []\n    while mid_point >= 0:\n        if lst[mid_point] <= min_value:\n            sorted_lst.append(lst[mid_point])\n            mid_point -= 1\n        elif lst[mid_point] > max_value:\n            sorted_lst.append(lst[mid_point])\n            mid_point -= 1\n        else:\n            sorted_lst.append(lst[mid_point])\n            mid_point -= 1\n\n    return sorted_lst + [min_value] + sorted_lst + [max_value]\n\n\nprint(strange_sort_list([1, 2, 3, 4]))\nprint(strange_sort_list([5, 5, 5, 5]))\nprint(strange_sort_list([]))"
    },
    {
      "rank": 99,
      "score": 3.0,
      "candidate": "if len(lst) == 0:\n        return lst\n    min_val = min(lst)\n    max_val = max(lst)\n    min_index = lst.index(min_val)\n    max_index = lst.index(max_val)\n    if max_index == min_index:\n        return lst\n    return lst[min_index + 1: max_index]\n\n\ndef test_strange_sort_list():\n    assert strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    assert strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    assert strange_sort_list([]) == []"
    },
    {
      "rank": 100,
      "score": 3.0,
      "candidate": "if lst == []:\n        return []\n\n    min_val = lst[0]\n    max_val = lst[0]\n\n    for i in range(1, len(lst)):\n        if lst[i] < min_val:\n            min_val = lst[i]\n        if lst[i] > max_val:\n            max_val = lst[i]\n\n    return [min_val, max_val]\n\n\nif __name__ == '__main__':\n    assert strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    assert strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    assert strange_sort_list([]) == []"
    }
  ]
}