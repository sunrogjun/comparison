{
  "timestamp": "2025-09-14T12:01:16.194304",
  "method": "improved_llm_judge",
  "judge_model": "codellama/CodeLlama-7b-Python-hf",
  "target_model": "codet5-770m",
  "dataset": "humaneval",
  "problem_number": 103,
  "total_candidates": 100,
  "results": [
    {
      "rank": 1,
      "score": 10.0,
      "candidate": "if n > m:\n        return -1\n    return \"{0:b}\".format(int(n/m))\n\n\nprint(rounded_avg(1, 5))\nprint(rounded_avg(7, 5))\nprint(rounded_avg(10, 20))\nprint(rounded_avg(20, 33))"
    },
    {
      "rank": 2,
      "score": 10.0,
      "candidate": "if n > m:\n        return -1\n    avg = 0\n    for i in range(n, m+1):\n        avg += int(bin(i)[2:])\n    avg = round(avg/(n+m), 2)\n    return str(avg)\n\n\nif __name__ == \"__main__\":\n    assert rounded_avg(1, 5) == \"0b11\"\n    assert rounded_avg(7, 5) == -1\n    assert rounded_avg(10, 20) == \"0b1111\"\n    assert rounded_avg(20, 33) == \"0b11010\""
    },
    {
      "rank": 3,
      "score": 10.0,
      "candidate": "if n > m:\n        return -1\n    return str(bin(n + m)).replace('0b', '')\n\n\nif __name__ == '__main__':\n    assert rounded_avg(1, 5) == \"0b11\"\n    assert rounded_avg(7, 5) == -1\n    assert rounded_avg(10, 20) == \"0b1111\"\n    assert rounded_avg(20, 33) == \"0b11010\""
    },
    {
      "rank": 4,
      "score": 10.0,
      "candidate": "if n > m:\n        return -1\n    return bin(round((n + m) / 2))[2:].zfill(32)\n\n\nprint(rounded_avg(1, 5))\nprint(rounded_avg(7, 5))\nprint(rounded_avg(10, 20))\nprint(rounded_avg(20, 33))"
    },
    {
      "rank": 5,
      "score": 10.0,
      "candidate": "if n > m:\n        return -1\n    else:\n        return \"{0:b}\".format(round(n/m))\n\n\n\nif __name__ == \"__main__\":\n    print(rounded_avg(1, 5))\n    print(rounded_avg(7, 5))\n    print(rounded_avg(10, 20))\n    print(rounded_avg(20, 33))"
    },
    {
      "rank": 6,
      "score": 10.0,
      "candidate": "if n > m:\n        return -1\n    else:\n        return str(bin(int(n/m))[2:].zfill(m))\n\n\nif __name__ == \"__main__\":\n    print(rounded_avg(1, 5))\n    print(rounded_avg(7, 5))\n    print(rounded_avg(10, 20))\n    print(rounded_avg(20, 33))"
    },
    {
      "rank": 7,
      "score": 10.0,
      "candidate": "if n > m:\n        return -1\n    return str(bin(n + m).count('1') + bin(n - m).count('1'))\n\n\nprint(rounded_avg(1, 5))\nprint(rounded_avg(7, 5))\nprint(rounded_avg(10, 20))\nprint(rounded_avg(20, 33))"
    },
    {
      "rank": 8,
      "score": 10.0,
      "candidate": "result = 0\n    for i in range(n, m + 1):\n        result += int(bin(i)[2:])\n    return result // 2\n\n\nprint(rounded_avg(1, 5))\nprint(rounded_avg(7, 5))\nprint(rounded_avg(10, 20))\nprint(rounded_avg(20, 33))"
    },
    {
      "rank": 9,
      "score": 10.0,
      "candidate": "if n > m:\n        return -1\n    return f\"{bin(n).count('1')}0b{bin(m).count('1')}\"\n\n\nif __name__ == \"__main__\":\n    n = int(input(\"Enter a positive integer: \"))\n    m = int(input(\"Enter a positive integer: \"))\n    print(rounded_avg(n, m))"
    },
    {
      "rank": 10,
      "score": 10.0,
      "candidate": "if n > m:\n        return -1\n\n    result = 0\n    for i in range(0, n):\n        result += int(bin(i)[2:])\n    return result / n\n\n\nif __name__ == \"__main__\":\n    print(rounded_avg(1, 5))\n    print(rounded_avg(7, 5))\n    print(rounded_avg(10, 20))\n    print(rounded_avg(20, 33))"
    },
    {
      "rank": 11,
      "score": 10.0,
      "candidate": "avg = (n+m) // 2\n    if n >= m:\n        return -1\n    return str(bin(avg))[2:]"
    },
    {
      "rank": 12,
      "score": 10.0,
      "candidate": "if n > m:\n        return -1\n    return \"{0:b}\".format(int(round(n / m)))"
    },
    {
      "rank": 13,
      "score": 10.0,
      "candidate": "if n > m:\n        return -1\n    return \"{0:b}\".format(round(n/m))\n\nprint(rounded_avg(1, 5))\nprint(rounded_avg(7, 5))\nprint(rounded_avg(10, 20))\nprint(rounded_avg(20, 33))"
    },
    {
      "rank": 14,
      "score": 10.0,
      "candidate": "if n > m:\n        return -1\n    avg = n + m\n    return str(round(avg / 2))[::-1]\n\nprint(rounded_avg(1, 5))\nprint(rounded_avg(7, 5))\nprint(rounded_avg(10, 20))\nprint(rounded_avg(20, 33))"
    },
    {
      "rank": 15,
      "score": 10.0,
      "candidate": "if n > m:\n        return -1\n    return \"{0:b}\".format(n + m // 2)\n\n\nif __name__ == '__main__':\n    print(rounded_avg(1, 5))\n    print(rounded_avg(7, 5))\n    print(rounded_avg(10, 20))\n    print(rounded_avg(20, 33))"
    },
    {
      "rank": 16,
      "score": 9.995815860331241,
      "candidate": "if n > m:\n        return -1\n\n    avg = (n + m) // 2\n    return \"{0:b}\".format(avg)\n\n\nprint(rounded_avg(1, 5))\nprint(rounded_avg(7, 5))\nprint(rounded_avg(10, 20))\nprint(rounded_avg(20, 33))"
    },
    {
      "rank": 17,
      "score": 9.964149032459645,
      "candidate": "if n > m:\n        return -1\n\n    # compute the average\n    avg = (n + m) // 2\n\n    # convert to binary\n    return f'{bin(avg)[2:]}'\n\n\nif __name__ == '__main__':\n    print(rounded_avg(1, 5))\n    print(rounded_avg(7, 5))\n    print(rounded_avg(10, 20))\n    print(rounded_avg(20, 33))"
    },
    {
      "rank": 18,
      "score": 9.942445717234216,
      "candidate": "if n > m:\n        return -1\n\n    avg = 0\n    for i in range(n, m+1):\n        avg += int(bin(i).replace('0b', ''), 2)\n    return str(avg)\n\n\ndef main():\n    n = int(input())\n    m = int(input())\n    print(rounded_avg(n, m))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 19,
      "score": 9.904144163486123,
      "candidate": "if n > m:\n        return -1\n    return bin(round((n+m)/2))[2:]\n\n\nif __name__ == \"__main__\":\n    assert rounded_avg(1, 5) == \"0b11\"\n    assert rounded_avg(7, 5) == -1\n    assert rounded_avg(10, 20) == \"0b1111\"\n    assert rounded_avg(20, 33) == \"0b11010\""
    },
    {
      "rank": 20,
      "score": 9.880624493070941,
      "candidate": "if n > m:\n        return -1\n    n = int(n)\n    m = int(m)\n    return str(bin(n + m - 1)[2:])\n\n\nprint(rounded_avg(1, 5))\nprint(rounded_avg(7, 5))\nprint(rounded_avg(10, 20))\nprint(rounded_avg(20, 33))"
    },
    {
      "rank": 21,
      "score": 9.878446472529031,
      "candidate": "if n > m:\n        return -1\n    return \"{0:b}\".format(round(n/m, 2))\n\n\nprint(rounded_avg(1, 5))\nprint(rounded_avg(7, 5))\nprint(rounded_avg(10, 20))\nprint(rounded_avg(20, 33))"
    },
    {
      "rank": 22,
      "score": 9.854462940360165,
      "candidate": "if n > m:\n        return -1\n    avg = round(n / (m + 1))\n    return str(bin(avg))[2:]\n\n\nif __name__ == \"__main__\":\n    print(rounded_avg(1, 5))\n    print(rounded_avg(7, 5))\n    print(rounded_avg(10, 20))\n    print(rounded_avg(20, 33))"
    },
    {
      "rank": 23,
      "score": 9.813470950208886,
      "candidate": "if n < m:\n        return -1\n    else:\n        return str(bin(n)[2:])[2:].rjust(m, '0')"
    },
    {
      "rank": 24,
      "score": 9.790154179905153,
      "candidate": "if n > m:\n        return -1\n\n    n = int(n)\n    m = int(m)\n\n    if n == m:\n        return \"0b1\"\n\n    # find the nearest integer to n and m\n    nearest_n = n\n    nearest_m = m\n    while nearest_n < nearest_m:\n        if n % nearest_n == 0:\n            nearest_n += 1\n        else:\n            nearest_m -= 1\n\n    # compute the average\n    return \"0b\" + str(round(nearest_n / nearest_m, 2))\n\n\n# Test cases\nprint(rounded_avg(1, 5))\nprint(rounded_avg(7, 5))\nprint(rounded_avg(10, 20))\nprint(rounded_avg(20, 33))"
    },
    {
      "rank": 25,
      "score": 9.739842567800983,
      "candidate": "if n > m:\n        return -1\n\n    return bin(n + m)\n\n\nif __name__ == \"__main__\":\n    print(rounded_avg(1, 5))\n    print(rounded_avg(7, 5))\n    print(rounded_avg(10, 20))\n    print(rounded_avg(20, 33))"
    },
    {
      "rank": 26,
      "score": 9.718512536588424,
      "candidate": "if n > m:\n        return -1\n    return \"{0:b}\".format((n + m) // 2)\n\n\nif __name__ == \"__main__\":\n    print(rounded_avg(1, 5))\n    print(rounded_avg(7, 5))\n    print(rounded_avg(10, 20))\n    print(rounded_avg(20, 33))"
    },
    {
      "rank": 27,
      "score": 9.672109612023672,
      "candidate": "if n > m:\n        return -1\n    else:\n        return '{:b}'.format((n + m) // 2)"
    },
    {
      "rank": 28,
      "score": 9.56218585258606,
      "candidate": "if n > m:\n        return -1\n    avg = (n + m) // 2\n    return bin(avg).replace(\"0b\", \"\")[2:]\n\n\nprint(rounded_avg(1, 5))\nprint(rounded_avg(7, 5))\nprint(rounded_avg(10, 20))\nprint(rounded_avg(20, 33))"
    },
    {
      "rank": 29,
      "score": 9.541658182986097,
      "candidate": "if n > m:\n        return -1\n    binary_n = bin(n)[2:]\n    binary_m = bin(m)[2:]\n    return binary_n + binary_m[::-1]\n\n\nif __name__ == '__main__':\n    print(rounded_avg(1, 5))\n    print(rounded_avg(7, 5))\n    print(rounded_avg(10, 20))\n    print(rounded_avg(20, 33))"
    },
    {
      "rank": 30,
      "score": 9.406883124156083,
      "candidate": "return bin(round(n/m))[2:]\n\n\ndef test_round_avg():\n    assert rounded_avg(1, 5) == \"0b11\"\n    assert rounded_avg(7, 5) == -1\n    assert rounded_avg(10, 20) == \"0b1111\"\n    assert rounded_avg(20, 33) == \"0b11010\"\n    assert rounded_avg(100, 200) == \"0b100010\"\n    assert rounded_avg(100, 200) == \"0b100011\"\n    assert rounded_avg(1000, 2000) == \"0b100100\"\n    assert rounded_avg(1000, 2000) == \"0b101101\"\n    assert rounded_avg(1000, 2000) == \"0b101011\"\n    assert rounded_avg(1000, 2000) == \"0b1001011\"\n    assert rounded_avg(1000, 2000) == \"0b10101101\"\n    assert rounded_avg(1000, 2000) == \"0b101011111\"\n    assert rounded_avg(1000, 2000) == \"0b101011111\"\n    assert rounded_avg(1000, 2000) == \"0b101011111\"\n    assert rounded_avg(1000, 2000) == \"0b101011111\"\n    assert rounded_avg(1000, 2000) == \"0b101011111\"\n    assert rounded_avg(1000, 2000) == \"0b101011111\"\n    assert rounded_avg(1000, 2000) == \"0b101011111\"\n    assert rounded_avg(1000, 2000) == \"0b101011111\"\n    assert rounded_avg(1000, 2000) == \"0b101011111\"\n    assert rounded_avg(1000, 2000) == \"0b101011111\"\n    assert rounded_avg(1000, 2000) == \"0b101011111\"\n    assert rounded_avg(1000, 2000) == \"0b101011111\"\n    assert rounded_avg(1000, 2000) == \"0b101011111\"\n    assert rounded_avg(1000, 2000) == \"0b101011111\"\n    assert rounded_avg(1000, 2000) == \"0b101011111\"\n    assert rounded_avg"
    },
    {
      "rank": 31,
      "score": 9.383853636473724,
      "candidate": "# Your code here\n    if n > m:\n        return -1\n\n    avg = n + m\n    return str(round(avg / 2))\n\n\nif __name__ == '__main__':\n    n, m = map(int, input().split())\n    print(rounded_avg(n, m))"
    },
    {
      "rank": 32,
      "score": 9.240924063783288,
      "candidate": "if n > m:\n        return -1\n    else:\n        return \"{0:b}\".format(n + (m - n) // 2)\n\n\n# Tests\nassert rounded_avg(1, 5) == \"0b11\"\nassert rounded_avg(7, 5) == -1\nassert rounded_avg(10, 20) == \"0b1111\"\nassert rounded_avg(20, 33) == \"0b11010\""
    },
    {
      "rank": 33,
      "score": 9.079938883683297,
      "candidate": "if n > m:\n        return -1\n    else:\n        return str(bin(n)).replace('0b', '').replace('b', '').zfill(8)\n\n\nif __name__ == \"__main__\":\n    print(rounded_avg(1, 5))\n    print(rounded_avg(7, 5))\n    print(rounded_avg(10, 20))\n    print(rounded_avg(20, 33))"
    },
    {
      "rank": 34,
      "score": 9.074673415080714,
      "candidate": "if n > m:\n        return -1\n    else:\n        return \"{0:b}\".format(int(n + m / 2))\n\n\nprint(rounded_avg(1, 5))\nprint(rounded_avg(7, 5))\nprint(rounded_avg(10, 20))\nprint(rounded_avg(20, 33))"
    },
    {
      "rank": 35,
      "score": 8.86392884910706,
      "candidate": "if n > m:\n        return -1\n    ans = (n + m) // 2\n    return str(ans)\n\n\nif __name__ == '__main__':\n    print(rounded_avg(1, 5))\n    print(rounded_avg(7, 5))\n    print(rounded_avg(10, 20))\n    print(rounded_avg(20, 33))"
    },
    {
      "rank": 36,
      "score": 8.84489489566441,
      "candidate": "if n < m:\n        return -1\n    else:\n        return str(int(bin(n)[2:], 2))\n\n\nif __name__ == \"__main__\":\n    print(rounded_avg(1, 5))\n    print(rounded_avg(7, 5))\n    print(rounded_avg(10, 20))\n    print(rounded_avg(20, 33))"
    },
    {
      "rank": 37,
      "score": 8.838067355056337,
      "candidate": "if n > m:\n        return -1\n    else:\n        return \"{0:b}\".format((n + m) / 2)\n\n\nif __name__ == \"__main__\":\n    print(rounded_avg(1, 5))\n    print(rounded_avg(7, 5))\n    print(rounded_avg(10, 20))\n    print(rounded_avg(20, 33))"
    },
    {
      "rank": 38,
      "score": 8.707465248646018,
      "candidate": "if n > m:\n        return -1\n    return \"{0:b}\".format((n + m) // 2)\n\n\nassert rounded_avg(1, 5) == \"0b11\"\nassert rounded_avg(7, 5) == -1\nassert rounded_avg(10, 20) == \"0b1111\"\nassert rounded_avg(20, 33) == \"0b11010\""
    },
    {
      "rank": 39,
      "score": 8.67774526318641,
      "candidate": "if n > m:\n        return -1\n    return str(bin(n).count('1') + bin(m).count('1'))[2:]\n\n\nif __name__ == '__main__':\n    print(rounded_avg(1, 5))\n    print(rounded_avg(7, 5))\n    print(rounded_avg(10, 20))\n    print(rounded_avg(20, 33))"
    },
    {
      "rank": 40,
      "score": 8.665149440683187,
      "candidate": "if n > m:\n        return -1\n    binary_str = \"{:b}\".format(n)\n    return int(binary_str[::-1], 2)\n\n\nassert rounded_avg(1, 5) == \"0b11\"\nassert rounded_avg(7, 5) == -1\nassert rounded_avg(10, 20) == \"0b1111\"\nassert rounded_avg(20, 33) == \"0b11010\""
    },
    {
      "rank": 41,
      "score": 8.658031530239274,
      "candidate": "if n > m:\n        return -1\n    return bin(n << (32-m))[2:]\n\n\nprint(rounded_avg(1, 5))\nprint(rounded_avg(7, 5))\nprint(rounded_avg(10, 20))\nprint(rounded_avg(20, 33))"
    },
    {
      "rank": 42,
      "score": 8.599844554813062,
      "candidate": "if n > m:\n        return -1\n    return \"{0:b}\".format(n + m)"
    },
    {
      "rank": 43,
      "score": 8.592200308958883,
      "candidate": "if n > m:\n        return -1\n\n    result = 0\n    for i in range(n, m + 1):\n        result += int(bin(i)[2:])\n\n    return result / n\n\n\nprint(rounded_avg(1, 5))\nprint(rounded_avg(7, 5))\nprint(rounded_avg(10, 20))\nprint(rounded_avg(20, 33))"
    },
    {
      "rank": 44,
      "score": 8.585807421598108,
      "candidate": "if n > m:\n        return -1\n\n    return bin(n + m)\n\n\nif __name__ == '__main__':\n    print(rounded_avg(1, 5))\n    print(rounded_avg(7, 5))\n    print(rounded_avg(10, 20))\n    print(rounded_avg(20, 33))"
    },
    {
      "rank": 45,
      "score": 8.583800551284206,
      "candidate": "if n > m:\n        return -1\n    return '{0:b}'.format(round((n + m) / 2))\n\n\nif __name__ == \"__main__\":\n    assert rounded_avg(1, 5) == \"0b11\"\n    assert rounded_avg(7, 5) == -1\n    assert rounded_avg(10, 20) == \"0b1111\"\n    assert rounded_avg(20, 33) == \"0b11010\"\n    assert rounded_avg(13, 9) == \"0b0101\""
    },
    {
      "rank": 46,
      "score": 8.571776163582213,
      "candidate": "if n > m:\n        return -1\n    else:\n        return str(round(n / m, 1)) + '0b' + str(n % m)\n\n\nprint(rounded_avg(1, 5))\nprint(rounded_avg(7, 5))\nprint(rounded_avg(10, 20))\nprint(rounded_avg(20, 33))"
    },
    {
      "rank": 47,
      "score": 8.54848822121784,
      "candidate": "return bin(n+m)\n\n\nif __name__ == \"__main__\":\n    assert rounded_avg(1, 5) == \"0b11\"\n    assert rounded_avg(7, 5) == -1\n    assert rounded_avg(10, 20) == \"0b1111\"\n    assert rounded_avg(20, 33) == \"0b11010\""
    },
    {
      "rank": 48,
      "score": 8.529094775868169,
      "candidate": "if n >= m:\n        return -1\n    else:\n        return \"{0:b}\".format(n+m//2)\n\n\nif __name__ == \"__main__\":\n    n = int(input())\n    m = int(input())\n    print(rounded_avg(n, m))"
    },
    {
      "rank": 49,
      "score": 8.492141158019686,
      "candidate": "if n > m:\n        return -1\n    return f\"{round(n / (m - n)):0{8}b}\"\n\n\nprint(rounded_avg(1, 5))\nprint(rounded_avg(7, 5))\nprint(rounded_avg(10, 20))\nprint(rounded_avg(20, 33))"
    },
    {
      "rank": 50,
      "score": 8.384990794940835,
      "candidate": "if n > m:\n        return -1\n    return str(bin(round(n, -m)))[2:]\n\n\nif __name__ == '__main__':\n    assert rounded_avg(1, 5) == '0b11'\n    assert rounded_avg(7, 5) == -1\n    assert rounded_avg(10, 20) == '0b1111'\n    assert rounded_avg(20, 33) == '0b11010'"
    },
    {
      "rank": 51,
      "score": 8.349985532674314,
      "candidate": "if n > m:\n        return -1\n    else:\n        return str(round(n / m)) + \"0b\" + str(n % m)\n\n\nif __name__ == \"__main__\":\n    n = int(input())\n    m = int(input())\n    print(rounded_avg(n, m))"
    },
    {
      "rank": 52,
      "score": 8.347360635235233,
      "candidate": "if n > m:\n        return -1\n    return bin(int(round((n + m) / 2)))[2:]\n\n\nif __name__ == '__main__':\n    assert rounded_avg(1, 5) == \"0b11\"\n    assert rounded_avg(7, 5) == -1\n    assert rounded_avg(10, 20) == \"0b1111\"\n    assert rounded_avg(20, 33) == \"0b11010\""
    },
    {
      "rank": 53,
      "score": 8.343765552956297,
      "candidate": "if n > m:\n        return -1\n    else:\n        return str(bin(n).replace('0b', '')) + str(bin(m).replace('0b', ''))\n\n\nprint(rounded_avg(1, 5))\nprint(rounded_avg(7, 5))\nprint(rounded_avg(10, 20))\nprint(rounded_avg(20, 33))"
    },
    {
      "rank": 54,
      "score": 8.34357197709313,
      "candidate": "if n > m:\n        return -1\n\n    avg = (n + m) // 2\n    return str(round(avg))[2:]\n\n\nprint(rounded_avg(1, 5))\nprint(rounded_avg(7, 5))\nprint(rounded_avg(10, 20))\nprint(rounded_avg(20, 33))"
    },
    {
      "rank": 55,
      "score": 8.319016132033335,
      "candidate": "if n > m:\n        return -1\n    return \"{0:b}\".format(n + (m - n) // 2)\n\n\nif __name__ == \"__main__\":\n    print(rounded_avg(1, 5))\n    print(rounded_avg(7, 5))\n    print(rounded_avg(10, 20))\n    print(rounded_avg(20, 33))"
    },
    {
      "rank": 56,
      "score": 8.315871283744121,
      "candidate": "if n > m:\n        return -1\n    return bin(round(n + m)).replace(\"0b\", \"\")\n\n\nprint(rounded_avg(1, 5))\nprint(rounded_avg(7, 5))\nprint(rounded_avg(10, 20))\nprint(rounded_avg(20, 33))"
    },
    {
      "rank": 57,
      "score": 8.314969855341051,
      "candidate": "if n > m:\n        return -1\n    else:\n        return str(bin(n + m)).replace('0b', '')\n\nprint(rounded_avg(1, 5))\nprint(rounded_avg(7, 5))\nprint(rounded_avg(10, 20))\nprint(rounded_avg(20, 33))"
    },
    {
      "rank": 58,
      "score": 8.246369772931736,
      "candidate": "if n > m:\n        return -1\n    return str(bin(n + m)).replace(\"0b\", \"\")[:-1]\n\n\nif __name__ == \"__main__\":\n    print(rounded_avg(1, 5))\n    print(rounded_avg(7, 5))\n    print(rounded_avg(10, 20))\n    print(rounded_avg(20, 33))"
    },
    {
      "rank": 59,
      "score": 8.245174836535085,
      "candidate": "if n > m:\n        return -1\n    return \"{0:b}\".format((n+m)/2)\n\n\nif __name__ == \"__main__\":\n    print(rounded_avg(1, 5))\n    print(rounded_avg(7, 5))\n    print(rounded_avg(10, 20))\n    print(rounded_avg(20, 33))"
    },
    {
      "rank": 60,
      "score": 8.244180650409234,
      "candidate": "if n > m:\n        return -1\n    else:\n        return \"{0:b}\".format(int(n) + int(m) // 2)\n\n\nif __name__ == \"__main__\":\n    assert rounded_avg(1, 5) == \"0b11\"\n    assert rounded_avg(7, 5) == -1\n    assert rounded_avg(10, 20) == \"0b1111\"\n    assert rounded_avg(20, 33) == \"0b11010\""
    },
    {
      "rank": 61,
      "score": 8.23839952217097,
      "candidate": "if n > m:\n        return -1\n    return format(round(n/m), 'b')\n\nprint(rounded_avg(1, 5))\nprint(rounded_avg(7, 5))\nprint(rounded_avg(10, 20))\nprint(rounded_avg(20, 33))"
    },
    {
      "rank": 62,
      "score": 8.221588250586777,
      "candidate": "if n > m:\n        return -1\n    else:\n        return \"{0:b}\".format(round((n + m) / 2))\n\n\ndef main():\n    print(rounded_avg(1, 5))\n    print(rounded_avg(7, 5))\n    print(rounded_avg(10, 20))\n    print(rounded_avg(20, 33))\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 63,
      "score": 8.216647556824618,
      "candidate": "if n > m:\n        return -1\n\n    res = 0\n    for i in range(n, m + 1):\n        res += int(bin(i).replace('0b', ''), 2)\n\n    return str(res // (n + m))\n\n\nif __name__ == '__main__':\n    print(rounded_avg(1, 5))\n    print(rounded_avg(7, 5))\n    print(rounded_avg(10, 20))\n    print(rounded_avg(20, 33))"
    },
    {
      "rank": 64,
      "score": 8.202660806870826,
      "candidate": "if n > m:\n        return -1\n\n    avg = 0\n    while n!= m:\n        avg += n % 2\n        n //= 2\n\n    avg = avg / 2\n    return f\"{avg:0>8b}\"\n\n\nif __name__ == \"__main__\":\n    assert rounded_avg(1, 5) == \"0b11\"\n    assert rounded_avg(7, 5) == -1\n    assert rounded_avg(10, 20) == \"0b1111\"\n    assert rounded_avg(20, 33) == \"0b11010\"\n    assert rounded_avg(1, 1) == \"0b1\""
    },
    {
      "rank": 65,
      "score": 8.186169807779358,
      "candidate": "if n > m:\n        return -1\n    return bin(n).replace('0b', '') + bin(m).replace('0b', '')[:-1]"
    },
    {
      "rank": 66,
      "score": 8.13491143483472,
      "candidate": "if n > m:\n        return -1\n    return bin(n + m)\n\n\nprint(rounded_avg(1, 5))\nprint(rounded_avg(7, 5))\nprint(rounded_avg(10, 20))\nprint(rounded_avg(20, 33))"
    },
    {
      "rank": 67,
      "score": 8.096792195200374,
      "candidate": "if n > m:\n        return -1\n    return \"{0:b}\".format(int(n + m) / 2)\n\n\nprint(rounded_avg(1, 5))\nprint(rounded_avg(7, 5))\nprint(rounded_avg(10, 20))\nprint(rounded_avg(20, 33))"
    },
    {
      "rank": 68,
      "score": 8.008927062700643,
      "candidate": "if n > m:\n        return -1\n\n    return bin(round(n/m))[2:]\n\nprint(rounded_avg(1, 5))\nprint(rounded_avg(7, 5))\nprint(rounded_avg(10, 20))\nprint(rounded_avg(20, 33))"
    },
    {
      "rank": 69,
      "score": 7.968720405621853,
      "candidate": "if n > m:\n        return -1\n    else:\n        return str(int(bin(n + m)[-2:], 2))\n\n\nif __name__ == '__main__':\n    assert rounded_avg(1, 5) == \"0b11\"\n    assert rounded_avg(7, 5) == -1\n    assert rounded_avg(10, 20) == \"0b1111\"\n    assert rounded_avg(20, 33) == \"0b11010\""
    },
    {
      "rank": 70,
      "score": 7.930075596089756,
      "candidate": "if n > m:\n        return -1\n    return f\"{int(bin(n)[2:]) + int(bin(m)[2:]):b}\"\n\n\nif __name__ == \"__main__\":\n    print(rounded_avg(1, 5))\n    print(rounded_avg(7, 5))\n    print(rounded_avg(10, 20))\n    print(rounded_avg(20, 33))"
    },
    {
      "rank": 71,
      "score": 7.873324443418119,
      "candidate": "if n > m:\n        return -1\n    avg = 0\n    for i in range(n, m + 1):\n        avg += int(bin(i)[2:])\n    return avg / n\n\n\nprint(rounded_avg(1, 5))\nprint(rounded_avg(7, 5))\nprint(rounded_avg(10, 20))\nprint(rounded_avg(20, 33))"
    },
    {
      "rank": 72,
      "score": 7.686337177638469,
      "candidate": "if n > m:\n        return -1\n    result = 0\n    for i in range(n, m + 1):\n        result += int(bin(i)[2:])\n    return result / (n - 1)"
    },
    {
      "rank": 73,
      "score": 7.601786291176142,
      "candidate": "if n > m:\n        return -1\n    else:\n        return str(bin(n + m)).replace('0b', '')\n\n\nif __name__ == '__main__':\n    assert rounded_avg(1, 5) == '0b11'\n    assert rounded_avg(7, 5) == -1\n    assert rounded_avg(10, 20) == '0b1111'\n    assert rounded_avg(20, 33) == '0b11010'"
    },
    {
      "rank": 74,
      "score": 7.317954049685855,
      "candidate": "if n > m:\n        return -1\n    return bin(n).replace(\"0b\", \"\").rjust(m, \"0\")\n\n\ndef main():\n    print(rounded_avg(1, 5))\n    print(rounded_avg(7, 5))\n    print(rounded_avg(10, 20))\n    print(rounded_avg(20, 33))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 75,
      "score": 3.3959877626660866,
      "candidate": "if n >= m:\n        return -1\n\n    return format(int(n + (m - n) / 2), 'b').zfill(8)\n\n\ndef test_rounded_avg():\n    assert rounded_avg(1, 5) == \"0b11\"\n    assert rounded_avg(7, 5) == -1\n    assert rounded_avg(10, 20) == \"0b1111\"\n    assert rounded_avg(20, 33) == \"0b11010\"\n\n\nif __name__ == \"__main__\":\n    test_rounded_avg()"
    },
    {
      "rank": 76,
      "score": 3.352622407428414,
      "candidate": "return f'{int(bin(n)[2:]) + int(bin(m)[2:]):0>8b}'\n\n\ndef test_round_avg():\n    assert rounded_avg(1, 5) == \"0b11\"\n    assert rounded_avg(7, 5) == -1\n    assert rounded_avg(10, 20) == \"0b1111\"\n    assert rounded_avg(20, 33) == \"0b11010\"\n    assert rounded_avg(13, 21) == \"0b111011\""
    },
    {
      "rank": 77,
      "score": 3.274851778816918,
      "candidate": "if n > m:\n        return -1\n    return bin(n << 1 + m).replace('0b', '')\n\n\ndef test_rounded_avg():\n    assert rounded_avg(1, 5) == '0b11'\n    assert rounded_avg(7, 5) == '-1'\n    assert rounded_avg(10, 20) == '0b1111'\n    assert rounded_avg(20, 33) == '0b11010'\n\n\nif __name__ == '__main__':\n    test_rounded_avg()"
    },
    {
      "rank": 78,
      "score": 3.251847697538551,
      "candidate": "if n > m:\n        return -1\n    else:\n        return str(bin(n+m).count('1'))[2:]\n\n\nif __name__ == '__main__':\n    assert rounded_avg(1, 5) == \"0b11\"\n    assert rounded_avg(7, 5) == -1\n    assert rounded_avg(10, 20) == \"0b1111\"\n    assert rounded_avg(20, 33) == \"0b11010\""
    },
    {
      "rank": 79,
      "score": 3.2138616771468294,
      "candidate": "if n > m:\n        return -1\n    return bin(n + m).count('1') // 2\n\n\ndef test_rounded_avg():\n    assert rounded_avg(1, 5) == \"0b11\"\n    assert rounded_avg(7, 5) == -1\n    assert rounded_avg(10, 20) == \"0b1111\"\n    assert rounded_avg(20, 33) == \"0b11010\"\n\n\nif __name__ == '__main__':\n    test_rounded_avg()"
    },
    {
      "rank": 80,
      "score": 3.2112567138224914,
      "candidate": "if n > m:\n        return -1\n\n    result = 0\n    for i in range(n, m + 1):\n        result = result + int(bin(i)[2:], 2)\n\n    result = result / 2\n\n    return str(result)\n\n\ndef test_rounded_avg():\n    assert rounded_avg(1, 5) == \"0b11\"\n    assert rounded_avg(7, 5) == -1\n    assert rounded_avg(10, 20) == \"0b1111\"\n    assert rounded_avg(20, 33) == \"0b11010\"\n\n\nif __name__ == \"__main__\":\n    test_rounded_avg()"
    },
    {
      "rank": 81,
      "score": 3.1920013107988066,
      "candidate": "if n < m:\n        return round(n/m, 2)\n    else:\n        return -1\n\n\ndef test_rounded_avg():\n    assert rounded_avg(1, 5) == \"0b11\"\n    assert rounded_avg(7, 5) == -1\n    assert rounded_avg(10, 20) == \"0b1111\"\n    assert rounded_avg(20, 33) == \"0b11010\"\n\n\nif __name__ == \"__main__\":\n    test_rounded_avg()"
    },
    {
      "rank": 82,
      "score": 3.0976814847698746,
      "candidate": "if n > m:\n        return -1\n\n    return \"{0:b}\".format(int(n/m))\n\n\nif __name__ == \"__main__\":\n    assert rounded_avg(1, 5) == \"0b11\"\n    assert rounded_avg(7, 5) == -1\n    assert rounded_avg(10, 20) == \"0b1111\"\n    assert rounded_avg(20, 33) == \"0b11010\""
    },
    {
      "rank": 83,
      "score": 3.092849268593054,
      "candidate": "if n > m:\n        return -1\n    return bin(n + m)[-1]\n\n\ndef test_rounded_avg():\n    assert rounded_avg(1, 5) == \"0b11\"\n    assert rounded_avg(7, 5) == -1\n    assert rounded_avg(10, 20) == \"0b1111\"\n    assert rounded_avg(20, 33) == \"0b11010\"\n\n\nif __name__ == \"__main__\":\n    test_rounded_avg()"
    },
    {
      "rank": 84,
      "score": 3.0543045347012363,
      "candidate": "if n > m:\n        return -1\n    return \"{:b}\".format((n + m) // 2)\n\n\ndef test_rounded_avg():\n    assert rounded_avg(1, 5) == \"0b11\"\n    assert rounded_avg(7, 5) == -1\n    assert rounded_avg(10, 20) == \"0b1111\"\n    assert rounded_avg(20, 33) == \"0b11010\"\n\n\ndef test_rounded_avg_empty():\n    assert rounded_avg(0, 0) == \"0b0\"\n    assert rounded_avg(1, 0) == \"0b0\"\n    assert rounded_avg(0, 1) == \"0b0\"\n    assert rounded_avg(1, 1) == \"0b1\"\n    assert rounded_avg(1, 2) == \"0b1\"\n    assert rounded_avg(2, 2) == \"0b0\"\n    assert rounded_avg(3, 2) == \"0b1\"\n    assert rounded_avg(4, 2) == \"0b0\"\n    assert rounded_avg(5, 2) == \"0b0\"\n    assert rounded_avg(6, 2) == \"0b1\"\n    assert rounded_avg(7, 2) == \"0b0\"\n    assert rounded_avg(8, 2) == \"0b1\"\n\n\ndef test_rounded_avg_small():\n    assert rounded_avg(5, 0) == \"0b0\"\n    assert rounded_avg(5, 1) == \"0b0\"\n    assert rounded_avg(5, 2) == \"0b0\"\n    assert rounded_avg(5, 3) == \"0b0\"\n    assert rounded_avg(5, 4) == \"0b0\"\n    assert rounded_avg(5, 5) == \"0b0\"\n    assert rounded_avg(5, 6) == \"0b0\"\n    assert rounded_avg(5, 7) == \"0b1\"\n    assert rounded_avg(5, 8) == \"0b1\"\n\n\ndef test_rounded_avg_large():\n    assert rounded_avg(5, 10) == \""
    },
    {
      "rank": 85,
      "score": 3.0238578018992306,
      "candidate": "if n > m:\n        return -1\n\n    res = n // m\n    bin_res = bin(res)\n    return bin_res[2:]\n\n\ndef test_round_avg():\n    assert rounded_avg(1, 5) == \"0b11\"\n    assert rounded_avg(7, 5) == -1\n    assert rounded_avg(10, 20) == \"0b1111\"\n    assert rounded_avg(20, 33) == \"0b11010\"\n\n\nif __name__ == \"__main__\":\n    test_round_avg()"
    },
    {
      "rank": 86,
      "score": 3.0226322377419246,
      "candidate": "if n > m:\n        return -1\n    return \"{0:b}\".format(round(n / m, 2))\n\n\ndef rounded_avg_v2(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n\n    if n > m:\n        return -1\n    return \"{0:b}\".format(n // m)\n\n\ndef test_cases():\n    \"\"\"\n    Test cases\n    \"\"\"\n    assert rounded_avg(1, 5) == \"0b11\"\n    assert rounded_avg(7, 5) == \"-1\"\n    assert rounded_avg(10, 20) == \"0b1111\"\n    assert rounded_avg(20, 33) == \"0b11010\"\n    assert rounded_avg(1, 7) == \"0b00\"\n    assert rounded_avg(7, 7) == \"0b00\"\n    assert rounded_avg(10, 20) == \"0b1111\"\n    assert rounded_avg(20, 33) == \"0b11010\"\n    assert rounded_avg(1, 5) == \"0b00\"\n    assert rounded_avg(7, 5) == \"0b00\"\n    assert rounded_avg(10, 20) == \"0b00\"\n    assert rounded_avg(20, 33) == \"0b00\"\n\n\nif __name__ == \"__main__\":\n    test_cases()"
    },
    {
      "rank": 87,
      "score": 3.01755733321886,
      "candidate": "if n > m:\n        return -1\n    else:\n        return str(bin(n + m - 1).replace('0b', ''))\n\n\ndef test_round():\n    assert rounded_avg(1, 5) == \"0b11\"\n    assert rounded_avg(7, 5) == -1\n    assert rounded_avg(10, 20) == \"0b1111\"\n    assert rounded_avg(20, 33) == \"0b11010\"\n\n\ndef test_bin():\n    assert rounded_avg(1, 5) == \"0b11\"\n    assert rounded_avg(7, 5) == -1\n    assert rounded_avg(10, 20) == \"0b1111\"\n    assert rounded_avg(20, 33) == \"0b11010\"\n\n\ndef test_str():\n    assert rounded_avg(1, 5) == \"0b11\"\n    assert rounded_avg(7, 5) == -1\n    assert rounded_avg(10, 20) == \"0b1111\"\n    assert rounded_avg(20, 33) == \"0b11010\"\n\n\nif __name__ == \"__main__\":\n    test_round()\n    test_bin()\n    test_str()"
    },
    {
      "rank": 88,
      "score": 2.9906852298314126,
      "candidate": "if n > m:\n        return -1\n\n    avg = (n + m) // 2\n    return str(int(avg))[2:]\n\n\ndef test_rounded_avg():\n    assert rounded_avg(1, 5) == \"0b11\"\n    assert rounded_avg(7, 5) == -1\n    assert rounded_avg(10, 20) == \"0b1111\"\n    assert rounded_avg(20, 33) == \"0b11010\"\n\n\nif __name__ == \"__main__\":\n    test_rounded_avg()"
    },
    {
      "rank": 89,
      "score": 2.9812773683891134,
      "candidate": "if n > m:\n        return -1\n    return f\"{round(n/m, 2)}\"\n\n\ndef test_rounded_avg():\n    assert rounded_avg(1, 5) == \"0b11\"\n    assert rounded_avg(7, 5) == -1\n    assert rounded_avg(10, 20) == \"0b1111\"\n    assert rounded_avg(20, 33) == \"0b11010\"\n\n\nif __name__ == \"__main__\":\n    test_rounded_avg()"
    },
    {
      "rank": 90,
      "score": 2.9391201225719326,
      "candidate": "if n > m:\n        return -1\n    avg = 0\n    for i in range(n, m + 1):\n        avg += int(bin(i)[2:])\n    avg = avg / (n + m)\n    return str(avg)\n\n\ndef test_rounded_avg():\n    assert rounded_avg(1, 5) == \"0b11\"\n    assert rounded_avg(7, 5) == -1\n    assert rounded_avg(10, 20) == \"0b1111\"\n    assert rounded_avg(20, 33) == \"0b11010\""
    },
    {
      "rank": 91,
      "score": 2.9148078418845804,
      "candidate": "if n > m:\n        return -1\n    else:\n        return f\"{round(n/m)}b{n % m}\"\n\n\ndef test_rounded_avg():\n    assert rounded_avg(1, 5) == \"0b11\"\n    assert rounded_avg(7, 5) == -1\n    assert rounded_avg(10, 20) == \"0b1111\"\n    assert rounded_avg(20, 33) == \"0b11010\"\n\n\nif __name__ == \"__main__\":\n    test_rounded_avg()"
    },
    {
      "rank": 92,
      "score": 2.8695431686680206,
      "candidate": "if n > m:\n        return -1\n    if n == m:\n        return \"0b\" + str(n)\n    return str(round(float(n) / float(m), 2))\n\n\nif __name__ == \"__main__\":\n    assert rounded_avg(1, 5) == \"0b11\"\n    assert rounded_avg(7, 5) == -1\n    assert rounded_avg(10, 20) == \"0b1111\"\n    assert rounded_avg(20, 33) == \"0b11010\""
    },
    {
      "rank": 93,
      "score": 2.8584604916234526,
      "candidate": "if n > m:\n        return -1\n    avg = 0\n    for i in range(n, m + 1):\n        avg += int(bin(i)[2:])\n    return str(round(avg / n))\n\n\ndef test_rounded_avg():\n    assert rounded_avg(1, 5) == \"0b11\"\n    assert rounded_avg(7, 5) == -1\n    assert rounded_avg(10, 20) == \"0b1111\"\n    assert rounded_avg(20, 33) == \"0b11010\"\n\n\nif __name__ == \"__main__\":\n    test_rounded_avg()"
    },
    {
      "rank": 94,
      "score": 2.8322688638026676,
      "candidate": "if n > m:\n        return -1\n    return \"{0:b}\".format(n + m // 2)\n\n\ndef test_round_avg():\n    assert rounded_avg(1, 5) == \"0b11\"\n    assert rounded_avg(7, 5) == -1\n    assert rounded_avg(10, 20) == \"0b1111\"\n    assert rounded_avg(20, 33) == \"0b11010\""
    },
    {
      "rank": 95,
      "score": 2.8174661955918885,
      "candidate": "if n >= m:\n        return -1\n    return str(bin(n+m)).replace('0b', '')\n\n\ndef test_rounded_avg():\n    assert rounded_avg(1, 5) == \"0b11\"\n    assert rounded_avg(7, 5) == -1\n    assert rounded_avg(10, 20) == \"0b1111\"\n    assert rounded_avg(20, 33) == \"0b11010\"\n\n\nif __name__ == '__main__':\n    test_rounded_avg()"
    },
    {
      "rank": 96,
      "score": 2.7007416698702014,
      "candidate": "if n > m:\n        return -1\n\n    return \"{0:b}\".format(n + (m - n) // 2)\n\n\ndef test_rounded_avg():\n    assert rounded_avg(1, 5) == \"0b11\"\n    assert rounded_avg(7, 5) == -1\n    assert rounded_avg(10, 20) == \"0b1111\"\n    assert rounded_avg(20, 33) == \"0b11010\"\n\n\nif __name__ == \"__main__\":\n    test_rounded_avg()"
    },
    {
      "rank": 97,
      "score": 2.6825806510075343,
      "candidate": "if n > m:\n        return -1\n\n    return str(bin(round(n/m))[2:])\n\n\ndef test_rounded_avg():\n    assert rounded_avg(1, 5) == \"0b11\"\n    assert rounded_avg(7, 5) == -1\n    assert rounded_avg(10, 20) == \"0b1111\"\n    assert rounded_avg(20, 33) == \"0b11010\"\n\n\ntest_rounded_avg()"
    },
    {
      "rank": 98,
      "score": 2.629565471584501,
      "candidate": "if n > m:\n        return -1\n    return str(bin(n)).replace('0b', '') + str(bin(m)).replace('0b', '')\n\n\nprint(rounded_avg(1, 5))\nprint(rounded_avg(7, 5))\nprint(rounded_avg(10, 20))\nprint(rounded_avg(20, 33))\n\n\ndef rounded_avg(n, m):\n    \"\"\"\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n    if n > m:\n        return -1\n    return str(bin(n)).replace('0b', '') + str(bin(m)).replace('0b', '')\n\n\nprint(rounded_avg(1, 5))\nprint(rounded_avg(7, 5))\nprint(rounded_avg(10, 20))\nprint(rounded_avg(20, 33))"
    },
    {
      "rank": 99,
      "score": 2.619486113485649,
      "candidate": "if n > m:\n        return -1\n    return \"{:b}\".format(int(n / m))\n\n\ndef test_rounded_avg():\n    assert rounded_avg(1, 5) == \"0b11\"\n    assert rounded_avg(7, 5) == -1\n    assert rounded_avg(10, 20) == \"0b1111\"\n    assert rounded_avg(20, 33) == \"0b11010\""
    },
    {
      "rank": 100,
      "score": 2.5515213635466116,
      "candidate": "if n > m:\n        return -1\n    return \"{0:b}\".format((n + m) // 2)\n\n\ndef test_rounded_avg():\n    assert rounded_avg(1, 5) == \"0b11\"\n    assert rounded_avg(7, 5) == -1\n    assert rounded_avg(10, 20) == \"0b1111\"\n    assert rounded_avg(20, 33) == \"0b11010\"\n\n\nif __name__ == \"__main__\":\n    test_rounded_avg()"
    }
  ]
}