{
  "timestamp": "2025-09-14T12:22:38.551350",
  "method": "improved_llm_judge",
  "judge_model": "codellama/CodeLlama-7b-Python-hf",
  "target_model": "codet5-770m",
  "dataset": "humaneval",
  "problem_number": 151,
  "total_candidates": 100,
  "results": [
    {
      "rank": 1,
      "score": 10.0,
      "candidate": "if lst:\n        return sum(x**2 for x in lst if x % 2)\n    else:\n        return 0\n\n\n\nif __name__ == '__main__':\n    print(double_the_difference([1, 3, 2, 0]))\n    print(double_the_difference([-1, -2, 0]))\n    print(double_the_difference([9, -2]))\n    print(double_the_difference([0]))"
    },
    {
      "rank": 2,
      "score": 10.0,
      "candidate": "return sum([i**2 for i in lst if i % 2 == 0])"
    },
    {
      "rank": 3,
      "score": 10.0,
      "candidate": "if lst == []:\n        return 0\n    else:\n        return sum(i ** 2 for i in lst if i % 2 == 1)\n\n\nif __name__ == '__main__':\n    assert double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 == 10\n    assert double_the_difference([-1, -2, 0]) == 0\n    assert double_the_difference([9, -2]) == 81\n    assert double_the_difference([0]) == 0"
    },
    {
      "rank": 4,
      "score": 10.0,
      "candidate": "if lst == []:\n        return 0\n    \n    sum_of_squares = 0\n    \n    for item in lst:\n        if item % 2 == 1:\n            sum_of_squares += item * item\n    \n    return sum_of_squares\n\n\ndef double_the_difference_fast(lst):\n    '''\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n    \n    double_the_difference_fast([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference_fast([-1, -2, 0]) == 0\n    double_the_difference_fast([9, -2]) == 81\n    double_the_difference_fast([0]) == 0  \n   \n    If the input list is empty, return 0.\n    '''\n    if lst == []:\n        return 0\n    \n    sum_of_squares = 0\n    \n    for item in lst:\n        if item % 2 == 1:\n            sum_of_squares += item * item\n    \n    return sum_of_squares\n\n\ndef double_the_difference_slow(lst):\n    '''\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n    \n    double_the_difference_slow([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference_slow([-1, -2, 0]) == 0\n    double_the_difference_slow([9, -2]) == 81\n    double_the_difference_slow([0]) == 0  \n   \n    If the input list is empty, return 0.\n    '''\n    if lst == []:\n        return 0\n    \n    sum_of_squares = 0\n    \n    for item in lst:\n        if item % 2 == 1:\n            sum_of_squares += item\n    \n    return sum_of_squares\n\n\ndef double_the_difference_fast_2(lst):\n    '''"
    },
    {
      "rank": 5,
      "score": 10.0,
      "candidate": "if lst == []:\n        return 0\n    \n    odd_sum = 0\n    even_sum = 0\n    for num in lst:\n        if num % 2 == 0:\n            odd_sum += num\n        else:\n            even_sum += num\n    \n    return odd_sum + even_sum\n\n\ndef test_double_the_difference():\n    assert double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    assert double_the_difference([-1, -2, 0]) == 0\n    assert double_the_difference([9, -2]) == 81\n    assert double_the_difference([0]) == 0\n    \n    assert double_the_difference([]) == 0\n    \n    assert double_the_difference([-1]) == 0\n    assert double_the_difference([-1, -1]) == 0\n    assert double_the_difference([-1, -1, -1]) == 0\n    assert double_the_difference([-1, -1, -1, -1]) == 0\n    \n    assert double_the_difference([-1, -1, -1, -1]) == 0\n    assert double_the_difference([-1, -1, -1, -1, -1]) == 0\n    assert double_the_difference([-1, -1, -1, -1, -1]) == 0\n    assert double_the_difference([-1, -1, -1, -1, -1]) == 0\n    \n    assert double_the_difference([-1, -1, -1, -1, -1]) == 0\n    assert double_the_difference([-1, -1, -1, -1, -1]) == 0\n    assert double_the_difference([-1, -1, -1, -1, -1]) == 0\n    assert double_the_difference([-1, -1, -1, -1, -1]) == 0\n    \n    assert double_the_difference([-1, -1, -1, -1, -1]) == 0\n    assert double_the_difference([-1, -1, -1, -1, -1])"
    },
    {
      "rank": 6,
      "score": 10.0,
      "candidate": "if lst == []:\n        return 0\n    else:\n        return sum([num ** 2 for num in lst if num % 2 == 1])\n\ndef double_the_difference_2(lst):\n    '''\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n    \n    double_the_difference_2([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference_2([-1, -2, 0]) == 0\n    double_the_difference_2([9, -2]) == 81\n    double_the_difference_2([0]) == 0  \n   \n    If the input list is empty, return 0.\n    '''\n    \n    if lst == []:\n        return 0\n    else:\n        return sum([num ** 2 for num in lst if num % 2 == 1])"
    },
    {
      "rank": 7,
      "score": 10.0,
      "candidate": "if len(lst) == 0:\n        return 0\n    if lst[0] < 0:\n        lst = lst[1:]\n    return sum([x**2 for x in lst if x%2 == 1])\n\ndef main():\n    lst = [1, 3, 2, 0]\n    print(double_the_difference(lst))\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 8,
      "score": 10.0,
      "candidate": "if lst == []:\n        return 0\n    return sum([x*x for x in lst if x%2==1])"
    },
    {
      "rank": 9,
      "score": 10.0,
      "candidate": "if not lst:\n        return 0\n    return sum([x**2 for x in lst if x % 2 == 1])"
    },
    {
      "rank": 10,
      "score": 10.0,
      "candidate": "if len(lst) == 0:\n        return 0\n    if lst[0] == -1 or lst[0] == 0:\n        return 0\n    else:\n        return sum(x**2 for x in lst)\n\n\nif __name__ == '__main__':\n    assert double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 == 10\n    assert double_the_difference([-1, -2, 0]) == 0\n    assert double_the_difference([9, -2]) == 81\n    assert double_the_difference([0]) == 0"
    },
    {
      "rank": 11,
      "score": 10.0,
      "candidate": "if len(lst) == 0:\n        return 0\n    sum = 0\n    for i in lst:\n        if i % 2 == 0:\n            sum += i**2\n    return sum\n\ndef double_the_difference2(lst):\n    '''\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n    \n    double_the_difference2([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference2([-1, -2, 0]) == 0\n    double_the_difference2([9, -2]) == 81\n    double_the_difference2([0]) == 0  \n   \n    If the input list is empty, return 0.\n    '''\n    if len(lst) == 0:\n        return 0\n    sum = 0\n    for i in lst:\n        if i % 2 == 0:\n            sum += i**2\n    return sum\n\ndef double_the_difference3(lst):\n    '''\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n    \n    double_the_difference3([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference3([-1, -2, 0]) == 0\n    double_the_difference3([9, -2]) == 81\n    double_the_difference3([0]) == 0  \n   \n    If the input list is empty, return 0.\n    '''\n    if len(lst) == 0:\n        return 0\n    sum = 0\n    for i in lst:\n        if i % 2 == 0:\n            sum += i**2\n    return sum\n\ndef double_the_difference4(lst):\n    '''\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n    \n    double_the_difference4([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference4([-1"
    },
    {
      "rank": 12,
      "score": 10.0,
      "candidate": "if lst:\n        return sum(x**2 for x in lst if x % 2 == 1)\n    else:\n        return 0\n\n\ndef test_double_the_difference():\n    assert double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 == 10\n    assert double_the_difference([-1, -2, 0]) == 0\n    assert double_the_difference([9, -2]) == 81\n    assert double_the_difference([0]) == 0"
    },
    {
      "rank": 13,
      "score": 10.0,
      "candidate": "if len(lst) == 0:\n        return 0\n    sum = 0\n    for x in lst:\n        if x % 2 == 0:\n            sum += x**2\n    return sum\n    \n    \ndef double_the_difference_recursive(lst, sum):\n    if len(lst) == 0:\n        return 0\n    if lst[0] % 2 == 0:\n        sum += lst[0]**2\n    return double_the_difference_recursive(lst[1:], sum)\n    \n    \ndef double_the_difference_recursive_2(lst, sum):\n    if len(lst) == 0:\n        return 0\n    if lst[0] % 2 == 0:\n        sum += lst[0]**2\n    return double_the_difference_recursive_2(lst[1:], sum)\n    \n    \ndef double_the_difference_recursive_3(lst, sum):\n    if len(lst) == 0:\n        return 0\n    if lst[0] % 2 == 0:\n        sum += lst[0]**2\n    return double_the_difference_recursive_3(lst[1:], sum)\n    \n    \ndef double_the_difference_recursive_4(lst, sum):\n    if len(lst) == 0:\n        return 0\n    if lst[0] % 2 == 0:\n        sum += lst[0]**2\n    return double_the_difference_recursive_4(lst[1:], sum)\n    \n    \ndef double_the_difference_recursive_5(lst, sum):\n    if len(lst) == 0:\n        return 0\n    if lst[0] % 2 == 0:\n        sum += lst[0]**2\n    return double_the_difference_recursive_5(lst[1:], sum)\n    \n    \ndef double_the_difference_recursive_6(lst, sum):\n    if len(lst) == 0:\n        return 0\n    if lst[0] % 2 == 0:\n        sum += lst[0]**2\n    return double_the_difference_recursive_6(lst[1:], sum)\n    \n    \ndef double_the_difference_recursive"
    },
    {
      "rank": 14,
      "score": 10.0,
      "candidate": "return sum([x**2 for x in lst if x%2 == 1])"
    },
    {
      "rank": 15,
      "score": 10.0,
      "candidate": "if not lst:\n        return 0\n    \n    lst.sort()\n    return lst[0] * lst[0] + lst[1] * lst[1]\n\nif __name__ == '__main__':\n    assert double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    assert double_the_difference([-1, -2, 0]) == 0\n    assert double_the_difference([9, -2]) == 81\n    assert double_the_difference([0]) == 0\n    assert double_the_difference([]) == 0"
    },
    {
      "rank": 16,
      "score": 10.0,
      "candidate": "if not lst:\n        return 0\n    result = 0\n    for i in lst:\n        if i % 2 == 1:\n            result += i**2\n    return result\n\n\ndef test_double_the_difference():\n    assert double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    assert double_the_difference([-1, -2, 0]) == 0\n    assert double_the_difference([9, -2]) == 81\n    assert double_the_difference([0]) == 0\n    assert double_the_difference([]) == 0"
    },
    {
      "rank": 17,
      "score": 10.0,
      "candidate": "if lst == []:\n        return 0\n    sum = 0\n    for num in lst:\n        if num % 2!= 0:\n            sum += num * num\n    return sum\n\n\ndef double_the_difference_2(lst):\n    '''\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n    \n    double_the_difference_2([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference_2([-1, -2, 0]) == 0\n    double_the_difference_2([9, -2]) == 81\n    double_the_difference_2([0]) == 0  \n   \n    If the input list is empty, return 0.\n    '''\n    if lst == []:\n        return 0\n    sum = 0\n    for num in lst:\n        if num % 2!= 0:\n            sum += num * num\n    return sum\n\n\ndef double_the_difference_3(lst):\n    '''\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n    \n    double_the_difference_3([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference_3([-1, -2, 0]) == 0\n    double_the_difference_3([9, -2]) == 81\n    double_the_difference_3([0]) == 0  \n   \n    If the input list is empty, return 0.\n    '''\n    if lst == []:\n        return 0\n    sum = 0\n    for num in lst:\n        if num % 2!= 0:\n            sum += num * num\n    return sum\n\n\ndef double_the_difference_4(lst):\n    '''\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n    \n    double_the_difference_4([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the"
    },
    {
      "rank": 18,
      "score": 9.370583536698913,
      "candidate": "if lst == []:\n        return 0\n    \n    sum = 0\n    for i in lst:\n        if i % 2 == 1:\n            sum += i ** 2\n    return sum"
    },
    {
      "rank": 19,
      "score": 9.234050852198141,
      "candidate": "if lst == []:\n        return 0\n    else:\n        return sum([x**2 for x in lst if x % 2!= 0])\n\nprint(double_the_difference([1, 3, 2, 0]))\nprint(double_the_difference([-1, -2, 0]))\nprint(double_the_difference([9, -2]))\nprint(double_the_difference([0]))"
    },
    {
      "rank": 20,
      "score": 9.226766272351448,
      "candidate": "if not lst:\n        return 0\n    \n    sum_of_squares = 0\n    \n    for number in lst:\n        if number % 2 == 1:\n            sum_of_squares += number**2\n            \n    return sum_of_squares\n\nprint(double_the_difference([1, 3, 2, 0]))\nprint(double_the_difference([-1, -2, 0]))\nprint(double_the_difference([9, -2]))\nprint(double_the_difference([0]))"
    },
    {
      "rank": 21,
      "score": 9.21346272767743,
      "candidate": "if len(lst) == 0:\n        return 0\n    sum = 0\n    for x in lst:\n        if x % 2 == 0:\n            sum += x ** 2\n    return sum\n\n\nprint(double_the_difference([1, 3, 2, 0]))\nprint(double_the_difference([-1, -2, 0]))\nprint(double_the_difference([9, -2]))\nprint(double_the_difference([0]))"
    },
    {
      "rank": 22,
      "score": 9.205959372648458,
      "candidate": "sum = 0\n    for i in lst:\n        if i % 2 == 1:\n            sum += i**2\n            \n    return sum\n    \n\nif __name__ == '__main__':\n    lst = [1, 3, 2, 0]\n    print(double_the_difference(lst))\n    lst = [-1, -2, 0]\n    print(double_the_difference(lst))\n    lst = [9, -2]\n    print(double_the_difference(lst))\n    lst = [0]\n    print(double_the_difference(lst))\n    lst = []\n    print(double_the_difference(lst))"
    },
    {
      "rank": 23,
      "score": 9.177268828905222,
      "candidate": "sum = 0\n    for i in lst:\n        if i % 2 == 1:\n            sum += i ** 2\n    return sum\n\n\nprint(double_the_difference([1, 3, 2, 0]))\nprint(double_the_difference([-1, -2, 0]))\nprint(double_the_difference([9, -2]))\nprint(double_the_difference([0]))"
    },
    {
      "rank": 24,
      "score": 9.122564458729856,
      "candidate": "if lst == []:\n        return 0\n    else:\n        return sum([i**2 for i in lst if i%2==1])\n    \nprint(double_the_difference([1, 3, 2, 0]))\nprint(double_the_difference([-1, -2, 0]))\nprint(double_the_difference([9, -2]))\nprint(double_the_difference([0]))"
    },
    {
      "rank": 25,
      "score": 8.973005557553902,
      "candidate": "if not lst:\n        return 0\n    \n    sum = 0\n    for number in lst:\n        if number % 2 == 0:\n            sum += number ** 2\n    return sum\n\nprint(double_the_difference([1, 3, 2, 0]))\nprint(double_the_difference([-1, -2, 0]))\nprint(double_the_difference([9, -2]))\nprint(double_the_difference([0]))"
    },
    {
      "rank": 26,
      "score": 8.95994420569242,
      "candidate": "if lst == []:\n        return 0\n    \n    sum_of_squares = 0\n    \n    for element in lst:\n        if element % 2 == 1:\n            sum_of_squares += element ** 2\n    \n    return sum_of_squares\n\nprint(double_the_difference([1, 3, 2, 0]))\nprint(double_the_difference([-1, -2, 0]))\nprint(double_the_difference([9, -2]))\nprint(double_the_difference([0]))"
    },
    {
      "rank": 27,
      "score": 8.946210893390457,
      "candidate": "if len(lst) == 0:\n        return 0\n    elif len(lst) == 1:\n        return lst[0]\n    else:\n        return lst[0] + lst[1] * lst[1]\n\n\nprint(double_the_difference([1, 3, 2, 0]))\nprint(double_the_difference([-1, -2, 0]))\nprint(double_the_difference([9, -2]))\nprint(double_the_difference([0]))"
    },
    {
      "rank": 28,
      "score": 8.932217008005624,
      "candidate": "if not lst:\n        return 0\n    else:\n        result = 0\n        for num in lst:\n            if num % 2:\n                result += num**2\n        return result\n\n\nprint(double_the_difference([1, 3, 2, 0]))\nprint(double_the_difference([-1, -2, 0]))\nprint(double_the_difference([9, -2]))\nprint(double_the_difference([0]))"
    },
    {
      "rank": 29,
      "score": 8.910084504002544,
      "candidate": "if lst == []:\n        return 0\n    sum = 0\n    for i in lst:\n        sum += i**2\n    return sum"
    },
    {
      "rank": 30,
      "score": 8.85571690049604,
      "candidate": "if lst == []:\n        return 0\n    sum = 0\n    for i in lst:\n        sum += i**2\n    return sum\n\nprint(double_the_difference([1, 3, 2, 0]))\nprint(double_the_difference([-1, -2, 0]))\nprint(double_the_difference([9, -2]))\nprint(double_the_difference([0]))"
    },
    {
      "rank": 31,
      "score": 8.855395696632057,
      "candidate": "if not lst:\n        return 0\n    return sum([num**2 for num in lst if num % 2 == 1])\n\n\nprint(double_the_difference([1, 3, 2, 0]))\nprint(double_the_difference([-1, -2, 0]))\nprint(double_the_difference([9, -2]))\nprint(double_the_difference([0]))"
    },
    {
      "rank": 32,
      "score": 8.850707355641543,
      "candidate": "if len(lst) <= 1:\n        return 0\n    else:\n        odd_numbers = [num for num in lst if num % 2 == 1]\n        sum_of_squares = sum([num * num for num in lst if num % 2 == 1])\n        return sum_of_squares - sum(odd_numbers)"
    },
    {
      "rank": 33,
      "score": 8.8281618090209,
      "candidate": "if not lst:\n        return 0\n    sum = 0\n    for i in lst:\n        if i % 2 == 0:\n            sum += i**2\n    return sum\n\nprint(double_the_difference([1, 3, 2, 0]))\nprint(double_the_difference([-1, -2, 0]))\nprint(double_the_difference([9, -2]))\nprint(double_the_difference([0]))"
    },
    {
      "rank": 34,
      "score": 8.81367773444215,
      "candidate": "return sum([i**2 for i in lst if i%2==0])\n    \nprint(double_the_difference([1, 3, 2, 0]))\nprint(double_the_difference([-1, -2, 0]))\nprint(double_the_difference([9, -2]))\nprint(double_the_difference([0]))"
    },
    {
      "rank": 35,
      "score": 8.76828871349479,
      "candidate": "if len(lst) == 0:\n        return 0\n    return sum([x**2 for x in lst if x%2==1])"
    },
    {
      "rank": 36,
      "score": 8.750282588864879,
      "candidate": "if lst == []:\n        return 0\n    \n    sum_of_squares = 0\n    for i in lst:\n        if i % 2 == 1:\n            sum_of_squares += i ** 2\n            \n    return sum_of_squares\n\nprint(double_the_difference([1, 3, 2, 0]))\nprint(double_the_difference([-1, -2, 0]))\nprint(double_the_difference([9, -2]))\nprint(double_the_difference([0]))"
    },
    {
      "rank": 37,
      "score": 8.715724466237427,
      "candidate": "if lst:\n        return sum([x**2 for x in lst if x % 2!= 0])\n    else:\n        return 0\n    \n    \n    \nprint(double_the_difference([1, 3, 2, 0]))\nprint(double_the_difference([-1, -2, 0]))\nprint(double_the_difference([9, -2]))\nprint(double_the_difference([0]))\nprint(double_the_difference([]))"
    },
    {
      "rank": 38,
      "score": 8.692801520950061,
      "candidate": "sum = 0\n    for i in lst:\n        if i % 2 == 1:\n            sum += i**2\n    \n    return sum\n\n\nprint(double_the_difference([1, 3, 2, 0]))\nprint(double_the_difference([-1, -2, 0]))\nprint(double_the_difference([9, -2]))\nprint(double_the_difference([0]))"
    },
    {
      "rank": 39,
      "score": 8.632293453617281,
      "candidate": "result = 0\n    for i in lst:\n        if i % 2 == 1:\n            result += i * i\n    return result\n\nprint(double_the_difference([1, 3, 2, 0]))\nprint(double_the_difference([-1, -2, 0]))\nprint(double_the_difference([9, -2]))\nprint(double_the_difference([0]))"
    },
    {
      "rank": 40,
      "score": 8.625262456968262,
      "candidate": "if len(lst) == 0:\n        return 0\n    else:\n        return sum([i*i for i in lst if i%2 == 1])\n    \n    \nprint(double_the_difference([1, 3, 2, 0]))\nprint(double_the_difference([-1, -2, 0]))\nprint(double_the_difference([9, -2]))\nprint(double_the_difference([0]))"
    },
    {
      "rank": 41,
      "score": 8.625142247198651,
      "candidate": "sum_of_squares = 0\n    for item in lst:\n        if item % 2!= 0:\n            sum_of_squares += item ** 2\n    return sum_of_squares\n\n\nprint(double_the_difference([1, 3, 2, 0]))\nprint(double_the_difference([-1, -2, 0]))\nprint(double_the_difference([9, -2]))\nprint(double_the_difference([0]))"
    },
    {
      "rank": 42,
      "score": 8.616253589228675,
      "candidate": "if not lst:\n        return 0\n    else:\n        return sum(x**2 for x in lst)\n\n\nprint(double_the_difference([1, 3, 2, 0]))\nprint(double_the_difference([-1, -2, 0]))\nprint(double_the_difference([9, -2]))\nprint(double_the_difference([0]))"
    },
    {
      "rank": 43,
      "score": 8.610076160146226,
      "candidate": "if not lst:\n        return 0\n    else:\n        return sum(x**2 for x in lst if x%2 == 1)"
    },
    {
      "rank": 44,
      "score": 8.606486429141842,
      "candidate": "if lst == []:\n        return 0\n    \n    odd_numbers = 0\n    \n    for num in lst:\n        if num % 2!= 0:\n            odd_numbers += num ** 2\n    \n    return odd_numbers\n\nprint(double_the_difference([1, 3, 2, 0]))\nprint(double_the_difference([-1, -2, 0]))\nprint(double_the_difference([9, -2]))\nprint(double_the_difference([0]))"
    },
    {
      "rank": 45,
      "score": 8.60156811074208,
      "candidate": "if len(lst) == 0:\n        return 0\n    return sum(x**2 for x in lst if x % 2 == 1)"
    },
    {
      "rank": 46,
      "score": 8.565425580227462,
      "candidate": "sum = 0\n    for num in lst:\n        if num % 2 == 0:\n            sum += num * num\n    return sum\n\nprint(double_the_difference([1, 3, 2, 0]))\nprint(double_the_difference([-1, -2, 0]))\nprint(double_the_difference([9, -2]))\nprint(double_the_difference([0]))"
    },
    {
      "rank": 47,
      "score": 8.548876241946822,
      "candidate": "if not lst:\n        return 0\n    odd_sum = 0\n    for num in lst:\n        if num % 2 == 1:\n            odd_sum += num * num\n    return odd_sum"
    },
    {
      "rank": 48,
      "score": 8.542875062379007,
      "candidate": "if lst == []:\n        return 0\n    else:\n        return sum(i**2 for i in lst if i % 2 == 1)\n\nprint(double_the_difference([1, 3, 2, 0]))\nprint(double_the_difference([-1, -2, 0]))\nprint(double_the_difference([9, -2]))\nprint(double_the_difference([0]))"
    },
    {
      "rank": 49,
      "score": 8.53012858503943,
      "candidate": "if lst == []:\n        return 0\n    else:\n        sum = 0\n        for i in lst:\n            if i % 2 == 1:\n                sum += i * i\n        return sum\n\n\nprint(double_the_difference([1, 3, 2, 0]))\nprint(double_the_difference([-1, -2, 0]))\nprint(double_the_difference([9, -2]))\nprint(double_the_difference([0]))"
    },
    {
      "rank": 50,
      "score": 8.499905739299377,
      "candidate": "if len(lst) == 0:\n        return 0\n    sum_of_squares = 0\n    for item in lst:\n        if item % 2 == 0:\n            sum_of_squares += item ** 2\n    return sum_of_squares\n\nprint(double_the_difference([1, 3, 2, 0]))\nprint(double_the_difference([-1, -2, 0]))\nprint(double_the_difference([9, -2]))\nprint(double_the_difference([0]))"
    },
    {
      "rank": 51,
      "score": 8.48796797856353,
      "candidate": "if not lst:\n        return 0\n\n    sum_squares = 0\n    for num in lst:\n        if num % 2 == 1:\n            sum_squares += num ** 2\n\n    return sum_squares\n\n\nprint(double_the_difference([1, 3, 2, 0]))\nprint(double_the_difference([-1, -2, 0]))\nprint(double_the_difference([9, -2]))\nprint(double_the_difference([0]))"
    },
    {
      "rank": 52,
      "score": 8.478208546788407,
      "candidate": "if lst == []:\n        return 0\n    \n    sum_of_squares = 0\n    for x in lst:\n        if x % 2 == 0:\n            sum_of_squares += x ** 2\n    \n    return sum_of_squares\n\n\nif __name__ == '__main__':\n    print(double_the_difference([1, 3, 2, 0]))\n    print(double_the_difference([-1, -2, 0]))\n    print(double_the_difference([9, -2]))\n    print(double_the_difference([0]))"
    },
    {
      "rank": 53,
      "score": 8.437695832075478,
      "candidate": "if lst:\n        return sum(x**2 for x in lst if x%2 == 1)\n    return 0\n\nprint(double_the_difference([1, 3, 2, 0]))\nprint(double_the_difference([-1, -2, 0]))\nprint(double_the_difference([9, -2]))\nprint(double_the_difference([0]))"
    },
    {
      "rank": 54,
      "score": 8.426531424889468,
      "candidate": "if lst == []:\n        return 0\n    else:\n        return sum([i**2 for i in lst if i%2 == 1])"
    },
    {
      "rank": 55,
      "score": 8.408439383654278,
      "candidate": "return sum([x**2 for x in lst if x % 2 == 1])\n\ndef main():\n    print(double_the_difference([1, 3, 2, 0]))\n    print(double_the_difference([-1, -2, 0]))\n    print(double_the_difference([9, -2]))\n    print(double_the_difference([0]))\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 56,
      "score": 8.386620303250325,
      "candidate": "if not lst:\n        return 0\n    if all(isinstance(x, int) for x in lst):\n        return sum(x**2 for x in lst if x % 2)\n    return 0\n\nprint(double_the_difference([1, 3, 2, 0]))\nprint(double_the_difference([-1, -2, 0]))\nprint(double_the_difference([9, -2]))\nprint(double_the_difference([0]))"
    },
    {
      "rank": 57,
      "score": 8.375312293858853,
      "candidate": "if len(lst) == 0:\n        return 0\n    sum = 0\n    for num in lst:\n        if num % 2!= 0:\n            sum += num**2\n    return sum"
    },
    {
      "rank": 58,
      "score": 8.351614956112536,
      "candidate": "if lst == []:\n        return 0\n    else:\n        odd_numbers = 0\n        for i in lst:\n            if i % 2 == 0:\n                odd_numbers += i**2\n        return odd_numbers\n\n\nprint(double_the_difference([1, 3, 2, 0]))\nprint(double_the_difference([-1, -2, 0]))\nprint(double_the_difference([9, -2]))\nprint(double_the_difference([0]))"
    },
    {
      "rank": 59,
      "score": 8.331556294201176,
      "candidate": "if not lst:\n        return 0\n    sum_of_squares = 0\n    for num in lst:\n        if num % 2 == 1:\n            sum_of_squares += num * num\n    return sum_of_squares\n\nprint(double_the_difference([1, 3, 2, 0]))\nprint(double_the_difference([-1, -2, 0]))\nprint(double_the_difference([9, -2]))\nprint(double_the_difference([0]))"
    },
    {
      "rank": 60,
      "score": 8.327375965969855,
      "candidate": "odd = 0\n    for num in lst:\n        if num % 2!= 0:\n            odd += num ** 2\n    return odd\n\nprint(double_the_difference([1, 3, 2, 0]))\nprint(double_the_difference([-1, -2, 0]))\nprint(double_the_difference([9, -2]))\nprint(double_the_difference([0]))"
    },
    {
      "rank": 61,
      "score": 8.327367757082776,
      "candidate": "if lst == []:\n        return 0\n    return sum([x**2 for x in lst if x%2!=0])"
    },
    {
      "rank": 62,
      "score": 8.298597569547805,
      "candidate": "if len(lst) == 0:\n        return 0\n    sum_of_squares = 0\n    for i in lst:\n        if i % 2 == 0:\n            sum_of_squares += i ** 2\n    return sum_of_squares\n\nprint(double_the_difference([1, 3, 2, 0]))\nprint(double_the_difference([-1, -2, 0]))\nprint(double_the_difference([9, -2]))\nprint(double_the_difference([0]))"
    },
    {
      "rank": 63,
      "score": 8.294940769211511,
      "candidate": "if len(lst) <= 0:\n        return 0\n    else:\n        odd_list = [x for x in lst if x % 2 == 1]\n        return sum(odd_list) ** 2"
    },
    {
      "rank": 64,
      "score": 8.2938925966498,
      "candidate": "if len(lst) == 0:\n        return 0\n    sum_of_squares = 0\n    for number in lst:\n        if number % 2 == 1:\n            sum_of_squares += number**2\n    return sum_of_squares\n\nprint(double_the_difference([1, 3, 2, 0]))\nprint(double_the_difference([-1, -2, 0]))\nprint(double_the_difference([9, -2]))\nprint(double_the_difference([0]))"
    },
    {
      "rank": 65,
      "score": 8.289838256518838,
      "candidate": "if lst == []:\n        return 0\n    \n    odd_lst = []\n    for i in lst:\n        if i % 2 == 1:\n            odd_lst.append(i)\n    \n    return sum(odd_lst) ** 2"
    },
    {
      "rank": 66,
      "score": 8.251903304236286,
      "candidate": "if not lst:\n        return 0\n    \n    sum_of_squares = 0\n    for i in lst:\n        if i % 2:\n            sum_of_squares += i ** 2\n    return sum_of_squares\n\nprint(double_the_difference([1, 3, 2, 0]))\nprint(double_the_difference([-1, -2, 0]))\nprint(double_the_difference([9, -2]))\nprint(double_the_difference([0]))"
    },
    {
      "rank": 67,
      "score": 8.214125058964552,
      "candidate": "return sum(x**2 for x in lst if x % 2!= 0)\n\n\nprint(double_the_difference([1, 3, 2, 0]))\nprint(double_the_difference([-1, -2, 0]))\nprint(double_the_difference([9, -2]))\nprint(double_the_difference([0]))"
    },
    {
      "rank": 68,
      "score": 8.212735598038213,
      "candidate": "return sum(x**2 for x in lst if x % 2 == 1)\n\n\ndef double_the_difference_recursive(lst):\n    '''\n    Recursive version of double_the_difference.\n    '''\n    if len(lst) == 0:\n        return 0\n    else:\n        return lst[0] + double_the_difference_recursive(lst[1:])\n\n\ndef main():\n    lst = [1, 3, 2, 0]\n    print(double_the_difference(lst))\n    lst = [-1, -2, 0]\n    print(double_the_difference(lst))\n    lst = [9, -2]\n    print(double_the_difference(lst))\n    lst = []\n    print(double_the_difference(lst))\n    lst = [-1, -2, 0]\n    print(double_the_difference(lst))\n    lst = [0]\n    print(double_the_difference(lst))\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 69,
      "score": 8.211579567659316,
      "candidate": "if lst == []:\n        return 0\n    odd_sum = 0\n    for i in lst:\n        if i % 2 == 1:\n            odd_sum += i ** 2\n    return odd_sum\n\n\nprint(double_the_difference([1, 3, 2, 0]))\nprint(double_the_difference([-1, -2, 0]))\nprint(double_the_difference([9, -2]))\nprint(double_the_difference([0]))"
    },
    {
      "rank": 70,
      "score": 8.209707251476969,
      "candidate": "if not lst:\n        return 0\n    result = 0\n    for num in lst:\n        if num % 2!= 0:\n            result += num * num\n    return result\n\nprint(double_the_difference([1, 3, 2, 0]))\nprint(double_the_difference([-1, -2, 0]))\nprint(double_the_difference([9, -2]))\nprint(double_the_difference([0]))"
    },
    {
      "rank": 71,
      "score": 8.2048573255218,
      "candidate": "if len(lst) == 0:\n        return 0\n    \n    odd_numbers = [x for x in lst if x % 2!= 0]\n    return sum(odd_numbers) ** 2"
    },
    {
      "rank": 72,
      "score": 8.172253082181854,
      "candidate": "if len(lst) == 0:\n        return 0\n    odd = 0\n    for i in lst:\n        if i % 2 == 1:\n            odd += i ** 2\n    return odd"
    },
    {
      "rank": 73,
      "score": 8.163300679823958,
      "candidate": "sum = 0\n    for i in lst:\n        if type(i) is not int:\n            return 0\n        if i % 2!= 0:\n            sum += i**2\n    return sum\n    \nprint(double_the_difference([1, 3, 2, 0]))\nprint(double_the_difference([-1, -2, 0]))\nprint(double_the_difference([9, -2]))\nprint(double_the_difference([0]))"
    },
    {
      "rank": 74,
      "score": 8.144125099485041,
      "candidate": "if lst == []:\n        return 0\n    if lst[0] % 2 == 1:\n        return lst[0] ** 2\n    else:\n        return 0\n\nprint(double_the_difference([1, 3, 2, 0]))\nprint(double_the_difference([-1, -2, 0]))\nprint(double_the_difference([9, -2]))\nprint(double_the_difference([0]))\n\n'''\nTime Complexity: O(n)\nSpace Complexity: O(1)\n'''"
    },
    {
      "rank": 75,
      "score": 8.143591138329747,
      "candidate": "if len(lst) == 0:\n        return 0\n    \n    sum_of_squares = 0\n    for i in lst:\n        if i % 2 == 1:\n            sum_of_squares += i ** 2\n    return sum_of_squares\n    \nprint(double_the_difference([1, 3, 2, 0]))\nprint(double_the_difference([-1, -2, 0]))\nprint(double_the_difference([9, -2]))\nprint(double_the_difference([0]))"
    },
    {
      "rank": 76,
      "score": 8.121884567141883,
      "candidate": "if lst == []:\n        return 0\n    else:\n        sum = 0\n        for num in lst:\n            if num % 2!= 0:\n                sum += num**2\n        return sum\n\n\nprint(double_the_difference([1, 3, 2, 0]))\nprint(double_the_difference([-1, -2, 0]))\nprint(double_the_difference([9, -2]))\nprint(double_the_difference([0]))"
    },
    {
      "rank": 77,
      "score": 8.105983444291466,
      "candidate": "lst.sort()\n    return (lst[-1] * lst[-1]) - (lst[-2] * lst[-2])\n\nprint(double_the_difference([1, 3, 2, 0]))\nprint(double_the_difference([-1, -2, 0]))\nprint(double_the_difference([9, -2]))\nprint(double_the_difference([0]))"
    },
    {
      "rank": 78,
      "score": 8.08452234024709,
      "candidate": "if not lst:\n        return 0\n    odd_sum = 0\n    for num in lst:\n        if num % 2 == 1:\n            odd_sum += num\n    return odd_sum\n    \n\nprint(double_the_difference([1, 3, 2, 0]))\nprint(double_the_difference([-1, -2, 0]))\nprint(double_the_difference([9, -2]))\nprint(double_the_difference([0]))"
    },
    {
      "rank": 79,
      "score": 8.024835682833125,
      "candidate": "if lst == []:\n        return 0\n    sum_of_squares = 0\n    for num in lst:\n        if num % 2 == 0:\n            sum_of_squares += num ** 2\n    return sum_of_squares\n\nprint(double_the_difference([1, 3, 2, 0]))\nprint(double_the_difference([-1, -2, 0]))\nprint(double_the_difference([9, -2]))\nprint(double_the_difference([0]))"
    },
    {
      "rank": 80,
      "score": 7.990432406683839,
      "candidate": "if lst == []:\n        return 0\n    \n    sum_of_squares = 0\n    for num in lst:\n        if num % 2 == 0:\n            sum_of_squares += num * num\n            \n    return sum_of_squares\n\nprint(double_the_difference([1, 3, 2, 0]))\nprint(double_the_difference([-1, -2, 0]))\nprint(double_the_difference([9, -2]))\nprint(double_the_difference([0]))"
    },
    {
      "rank": 81,
      "score": 7.938028884277233,
      "candidate": "odd_sum = 0\n    for i in lst:\n        if i % 2 == 1:\n            odd_sum += i**2\n    return odd_sum\n\nprint(double_the_difference([1, 3, 2, 0]))\nprint(double_the_difference([-1, -2, 0]))\nprint(double_the_difference([9, -2]))\nprint(double_the_difference([0]))"
    },
    {
      "rank": 82,
      "score": 7.915588979966494,
      "candidate": "if len(lst) == 0:\n        return 0\n    \n    result = 0\n    for num in lst:\n        if num % 2 == 0:\n            result += num * num\n    return result\n\n\ndef main():\n    print(double_the_difference([1, 3, 2, 0]))\n    print(double_the_difference([-1, -2, 0]))\n    print(double_the_difference([9, -2]))\n    print(double_the_difference([0]))\n\n\nmain()"
    },
    {
      "rank": 83,
      "score": 7.8912769574414305,
      "candidate": "if len(lst) == 0:\n        return 0\n    \n    odd_lst = []\n    for x in lst:\n        if x % 2 == 1:\n            odd_lst.append(x)\n    \n    return sum(odd_lst)**2\n\nprint(double_the_difference([1, 3, 2, 0]))\nprint(double_the_difference([-1, -2, 0]))\nprint(double_the_difference([9, -2]))\nprint(double_the_difference([0]))"
    },
    {
      "rank": 84,
      "score": 7.868947655733293,
      "candidate": "if not lst:\n        return 0\n    else:\n        return sum([i*i for i in lst if i%2 == 1])\n    \nprint(double_the_difference([1, 3, 2, 0]))\nprint(double_the_difference([-1, -2, 0]))\nprint(double_the_difference([9, -2]))\nprint(double_the_difference([0]))"
    },
    {
      "rank": 85,
      "score": 7.84634113240411,
      "candidate": "if len(lst) == 0:\n        return 0\n    else:\n        return sum([num*num for num in lst if num % 2!= 0])\n\n\nprint(double_the_difference([1, 3, 2, 0]))\nprint(double_the_difference([-1, -2, 0]))\nprint(double_the_difference([9, -2]))\nprint(double_the_difference([0]))"
    },
    {
      "rank": 86,
      "score": 7.834022619458933,
      "candidate": "return sum([i**2 for i in lst if i % 2!= 0])\n\nprint(double_the_difference([1, 3, 2, 0]))\nprint(double_the_difference([-1, -2, 0]))\nprint(double_the_difference([9, -2]))\nprint(double_the_difference([0]))"
    },
    {
      "rank": 87,
      "score": 7.780351419995229,
      "candidate": "if not lst:\n        return 0\n    else:\n        sum_of_squares = 0\n        for item in lst:\n            if item % 2 == 1:\n                sum_of_squares += item ** 2\n        return sum_of_squares\n\n\nprint(double_the_difference([1, 3, 2, 0]))\nprint(double_the_difference([-1, -2, 0]))\nprint(double_the_difference([9, -2]))\nprint(double_the_difference([0]))"
    },
    {
      "rank": 88,
      "score": 7.738292593776799,
      "candidate": "if lst == []:\n        return 0\n    \n    return sum(x**2 for x in lst if x%2 == 1)\n\nprint(double_the_difference([1, 3, 2, 0]))\nprint(double_the_difference([-1, -2, 0]))\nprint(double_the_difference([9, -2]))\nprint(double_the_difference([0]))"
    },
    {
      "rank": 89,
      "score": 7.7320703513377165,
      "candidate": "if lst == []:\n        return 0\n    \n    lst = list(filter(lambda x: x % 2 == 1, lst))\n    return sum(x ** 2 for x in lst)"
    },
    {
      "rank": 90,
      "score": 7.705183449260731,
      "candidate": "if not lst:\n        return 0\n    else:\n        odd_numbers = []\n        for num in lst:\n            if num % 2 == 1:\n                odd_numbers.append(num)\n        return sum(odd_numbers)\n\nprint(double_the_difference([1, 3, 2, 0]))\nprint(double_the_difference([-1, -2, 0]))\nprint(double_the_difference([9, -2]))\nprint(double_the_difference([0]))"
    },
    {
      "rank": 91,
      "score": 7.5819855281879285,
      "candidate": "return sum([num**2 for num in lst if num % 2 == 1])"
    },
    {
      "rank": 92,
      "score": 7.562924366763077,
      "candidate": "if not lst:\n        return 0\n    odd = 0\n    for num in lst:\n        if num % 2 == 1:\n            odd += num**2\n    return odd\n\nprint(double_the_difference([1, 3, 2, 0]))\nprint(double_the_difference([-1, -2, 0]))\nprint(double_the_difference([9, -2]))\nprint(double_the_difference([0]))"
    },
    {
      "rank": 93,
      "score": 7.4878043221155455,
      "candidate": "lst = filter(lambda x: x > 0, lst)\n    lst = list(lst)\n    if len(lst) == 0:\n        return 0\n    return sum([x*x for x in lst if x % 2 == 1])\n\nprint(double_the_difference([1, 3, 2, 0]))\nprint(double_the_difference([-1, -2, 0]))\nprint(double_the_difference([9, -2]))\nprint(double_the_difference([0]))"
    },
    {
      "rank": 94,
      "score": 7.464609382504557,
      "candidate": "if len(lst) == 0:\n        return 0\n    else:\n        return sum(x**2 for x in lst if x%2==1)\n    \nprint(double_the_difference([1, 3, 2, 0]))\nprint(double_the_difference([-1, -2, 0]))\nprint(double_the_difference([9, -2]))\nprint(double_the_difference([0]))"
    },
    {
      "rank": 95,
      "score": 7.134571892399572,
      "candidate": "if lst == []:\n        return 0\n    \n    odd_numbers = [num for num in lst if num % 2 == 1]\n    sum_of_squares = sum(x * x for x in odd_numbers)\n    return sum_of_squares\n\nprint(double_the_difference([1, 3, 2, 0]))\nprint(double_the_difference([-1, -2, 0]))\nprint(double_the_difference([9, -2]))\nprint(double_the_difference([0]))"
    },
    {
      "rank": 96,
      "score": 3.0,
      "candidate": "odd_sum = 0\n    for element in lst:\n        if element % 2 == 1:\n            odd_sum += element**2\n    return odd_sum\n\n\ndef double_the_difference_1(lst):\n    '''\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9, -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list is empty, return 0.\n    '''\n    odd_sum = 0\n    for element in lst:\n        if element % 2 == 1:\n            odd_sum += element**2\n    return odd_sum\n\n\ndef double_the_difference_2(lst):\n    '''\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9, -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list is empty, return 0.\n    '''\n    odd_sum = 0\n    for element in lst:\n        if element % 2 == 1:\n            odd_sum += element**2\n    return odd_sum\n\n\ndef double_the_difference_3(lst):\n    '''\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9, -2]) == 81\n    double_the"
    },
    {
      "rank": 97,
      "score": 3.0,
      "candidate": "if lst == []:\n        return 0\n    \n    odd_nums = []\n    for num in lst:\n        if num % 2 == 1:\n            odd_nums.append(num)\n    \n    return sum(odd_nums) ** 2\n\ndef double_the_difference_with_list(lst):\n    '''\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n    \n    double_the_difference_with_list([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference_with_list([-1, -2, 0]) == 0\n    double_the_difference_with_list([9, -2]) == 81\n    double_the_difference_with_list([0]) == 0  \n   \n    If the input list is empty, return 0.\n    '''\n    if lst == []:\n        return 0\n    \n    odd_nums = []\n    for num in lst:\n        if num % 2 == 1:\n            odd_nums.append(num)\n    \n    return sum(odd_nums) ** 2\n\n\n\ndef double_the_difference_with_set(lst):\n    '''\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n    \n    double_the_difference_with_set([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference_with_set([-1, -2, 0]) == 0\n    double_the_difference_with_set([9, -2]) == 81\n    double_the_difference_with_set([0]) == 0  \n   \n    If the input list is empty, return 0.\n    '''\n    if lst == []:\n        return 0\n    \n    odd_nums = set()\n    for num in lst:\n        if num % 2 == 1:\n            odd_nums.add(num)\n    \n    return sum(odd_nums) ** 2\n\n\ndef double_the_difference_with_dict(lst):"
    },
    {
      "rank": 98,
      "score": 3.0,
      "candidate": "if lst == []:\n        return 0\n    else:\n        sum = 0\n        for i in lst:\n            if i % 2 == 1:\n                sum += i**2\n        return sum\n\n\ndef double_the_difference_v2(lst):\n    '''\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9, -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list is empty, return 0.\n    '''\n    if lst == []:\n        return 0\n    else:\n        sum = 0\n        for i in lst:\n            if i % 2 == 1:\n                sum += i**2\n        return sum\n\n\ndef double_the_difference_v3(lst):\n    '''\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9, -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list is empty, return 0.\n    '''\n    if lst == []:\n        return 0\n    else:\n        sum = 0\n        for i in lst:\n            if i % 2 == 1:\n                sum += i**2\n        return sum"
    },
    {
      "rank": 99,
      "score": 3.0,
      "candidate": "return sum([x**2 for x in lst if x%2 == 1])\n\n\ndef double_the_difference_2(lst):\n    '''\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are even. Ignore numbers that are negative or not integers.\n    \n    double_the_difference_2([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference_2([-1, -2, 0]) == 0\n    double_the_difference_2([9, -2]) == 81\n    double_the_difference_2([0]) == 0  \n   \n    If the input list is empty, return 0.\n    '''\n    return sum([x for x in lst if x%2 == 0])\n\n\ndef double_the_difference_3(lst):\n    '''\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n    \n    double_the_difference_3([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference_3([-1, -2, 0]) == 0\n    double_the_difference_3([9, -2]) == 81\n    double_the_difference_3([0]) == 0  \n   \n    If the input list is empty, return 0.\n    '''\n    return sum([x**2 for x in lst if x%2 == 1])\n\n\ndef double_the_difference_4(lst):\n    '''\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are even. Ignore numbers that are negative or not integers.\n    \n    double_the_difference_4([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference_4([-1, -2, 0]) == 0\n    double_the_difference_4([9, -2]) == 81\n    double_the_difference_4([0]) == 0  \n   \n    If the input list is empty, return 0.\n    '''\n    return sum([x**2 for x in lst"
    },
    {
      "rank": 100,
      "score": 3.0,
      "candidate": "if lst == []:\n        return 0\n    sum_of_squares = 0\n    for i in lst:\n        if i % 2 == 0:\n            sum_of_squares += i ** 2\n    return sum_of_squares\n\n\ndef sum_of_squares_of_odd_numbers(lst):\n    '''\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n    \n    sum_of_squares_of_odd_numbers([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    sum_of_squares_of_odd_numbers([-1, -2, 0]) == 0\n    sum_of_squares_of_odd_numbers([9, -2]) == 81\n    sum_of_squares_of_odd_numbers([0]) == 0  \n   \n    If the input list is empty, return 0.\n    '''\n    if lst == []:\n        return 0\n    sum_of_squares = 0\n    for i in lst:\n        if i % 2 == 1:\n            sum_of_squares += i ** 2\n    return sum_of_squares\n\n\ndef sum_of_squares_of_even_numbers(lst):\n    '''\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are even. Ignore numbers that are negative or not integers.\n    \n    sum_of_squares_of_even_numbers([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    sum_of_squares_of_even_numbers([-1, -2, 0]) == 0\n    sum_of_squares_of_even_numbers([9, -2]) == 81\n    sum_of_squares_of_even_numbers([0]) == 0  \n   \n    If the input list is empty, return 0.\n    '''\n    if lst == []:\n        return 0\n    sum_of_squares = 0\n    for i in lst:\n        if i % 2 == 0:\n            sum_of_squares += i ** 2"
    }
  ]
}