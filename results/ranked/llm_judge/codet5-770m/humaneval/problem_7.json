{
  "timestamp": "2025-09-14T11:18:59.918542",
  "method": "improved_llm_judge",
  "judge_model": "codellama/CodeLlama-7b-Python-hf",
  "target_model": "codet5-770m",
  "dataset": "humaneval",
  "problem_number": 7,
  "total_candidates": 100,
  "results": [
    {
      "rank": 1,
      "score": 10.0,
      "candidate": "return [s for s in strings if substring in s]\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 2,
      "score": 10.0,
      "candidate": "return [\n        string\n        for string in strings\n        if substring in string\n    ]\n\n\nif __name__ == '__main__':\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 3,
      "score": 10.0,
      "candidate": "return [\n        string\n        for string in strings\n        if substring in string\n    ]\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 4,
      "score": 10.0,
      "candidate": "return [s for s in strings if substring in s]"
    },
    {
      "rank": 5,
      "score": 10.0,
      "candidate": "return [string for string in strings if substring in string]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 6,
      "score": 10.0,
      "candidate": "filtered = []\n    for string in strings:\n        if substring in string:\n            filtered.append(string)\n    return filtered\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 7,
      "score": 10.0,
      "candidate": "return [string for string in strings if substring in string]"
    },
    {
      "rank": 8,
      "score": 10.0,
      "candidate": "filtered_strings = []\n    for string in strings:\n        if substring in string:\n            filtered_strings.append(string)\n    return filtered_strings\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 9,
      "score": 10.0,
      "candidate": "return [s for s in strings if substring in s]"
    },
    {
      "rank": 10,
      "score": 10.0,
      "candidate": "return [string for string in strings if substring in string]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 11,
      "score": 10.0,
      "candidate": "return [string for string in strings if substring in string]"
    },
    {
      "rank": 12,
      "score": 10.0,
      "candidate": "result = []\n    for string in strings:\n        if substring in string:\n            result.append(string)\n    return result\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 13,
      "score": 10.0,
      "candidate": "return [string for string in strings if substring in string]"
    },
    {
      "rank": 14,
      "score": 10.0,
      "candidate": "return [s for s in strings if substring in s]"
    },
    {
      "rank": 15,
      "score": 10.0,
      "candidate": "return list(filter(lambda s: substring in s, strings))\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 16,
      "score": 10.0,
      "candidate": "return [string for string in strings if substring in string]\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 17,
      "score": 10.0,
      "candidate": "return [s for s in strings if substring in s]\n\n\nif __name__ == '__main__':\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 18,
      "score": 10.0,
      "candidate": "return [string for string in strings if substring in string]"
    },
    {
      "rank": 19,
      "score": 10.0,
      "candidate": "return [s for s in strings if substring in s]"
    },
    {
      "rank": 20,
      "score": 10.0,
      "candidate": "return [string for string in strings if substring in string]"
    },
    {
      "rank": 21,
      "score": 10.0,
      "candidate": "return [string for string in strings if substring in string]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 22,
      "score": 10.0,
      "candidate": "return [string for string in strings if substring in string]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 23,
      "score": 10.0,
      "candidate": "return [s for s in strings if substring in s]"
    },
    {
      "rank": 24,
      "score": 10.0,
      "candidate": "return [\n        s for s in strings if substring in s\n    ]\n\n\nif __name__ == '__main__':\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 25,
      "score": 10.0,
      "candidate": "return [s for s in strings if substring in s]\n\n\nif __name__ == '__main__':\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 26,
      "score": 10.0,
      "candidate": "return [string for string in strings if substring in string]\n\n\nif __name__ == '__main__':\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 27,
      "score": 10.0,
      "candidate": "result = []\n    for string in strings:\n        if substring in string:\n            result.append(string)\n    return result"
    },
    {
      "rank": 28,
      "score": 9.0,
      "candidate": "return [s for s in strings if substring in s]"
    },
    {
      "rank": 29,
      "score": 9.0,
      "candidate": "return [x for x in strings if substring in x]"
    },
    {
      "rank": 30,
      "score": 9.0,
      "candidate": "return [s for s in strings if substring in s]"
    },
    {
      "rank": 31,
      "score": 9.0,
      "candidate": "return [string for string in strings if substring in string]"
    },
    {
      "rank": 32,
      "score": 9.0,
      "candidate": "return [s for s in strings if substring in s]"
    },
    {
      "rank": 33,
      "score": 8.0,
      "candidate": "return [string for string in strings if substring in string]"
    },
    {
      "rank": 34,
      "score": 8.0,
      "candidate": "return [x for x in strings if substring in x]"
    },
    {
      "rank": 35,
      "score": 8.0,
      "candidate": "return [string for string in strings if substring in string]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 36,
      "score": 8.0,
      "candidate": "result = []\n    for string in strings:\n        if substring in string:\n            result.append(string)\n    return result\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 37,
      "score": 8.0,
      "candidate": "result = []\n    for string in strings:\n        if substring in string:\n            result.append(string)\n    return result\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 38,
      "score": 8.0,
      "candidate": "return list(filter(lambda x: substring in x, strings))\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 39,
      "score": 8.0,
      "candidate": "return [string for string in strings if substring in string]\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 40,
      "score": 8.0,
      "candidate": "return [s for s in strings if substring in s]\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 41,
      "score": 8.0,
      "candidate": "return [string for string in strings if substring in string]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 42,
      "score": 8.0,
      "candidate": "return [string for string in strings if substring in string]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 43,
      "score": 8.0,
      "candidate": "return [string for string in strings if substring in string]"
    },
    {
      "rank": 44,
      "score": 8.0,
      "candidate": "return [s for s in strings if substring in s]\n\n\nif __name__ == '__main__':\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 45,
      "score": 8.0,
      "candidate": "return [s for s in strings if substring in s]\n\n\nif __name__ == '__main__':\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 46,
      "score": 8.0,
      "candidate": "return [x for x in strings if substring in x]\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 47,
      "score": 8.0,
      "candidate": "return [string for string in strings if substring in string]"
    },
    {
      "rank": 48,
      "score": 8.0,
      "candidate": "filtered_strings = []\n    for string in strings:\n        if substring in string:\n            filtered_strings.append(string)\n    return filtered_strings\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 49,
      "score": 8.0,
      "candidate": "return [s for s in strings if substring in s]"
    },
    {
      "rank": 50,
      "score": 8.0,
      "candidate": "return [string for string in strings if substring in string]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 51,
      "score": 8.0,
      "candidate": "return [string for string in strings if substring in string]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 52,
      "score": 8.0,
      "candidate": "return [s for s in strings if substring in s]\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 53,
      "score": 8.0,
      "candidate": "return [s for s in strings if substring in s]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 54,
      "score": 8.0,
      "candidate": "return [string for string in strings if substring in string]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 55,
      "score": 8.0,
      "candidate": "return [s for s in strings if substring in s]\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 56,
      "score": 8.0,
      "candidate": "return [string for string in strings if substring in string]\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 57,
      "score": 8.0,
      "candidate": "return [\n        string\n        for string in strings\n        if substring in string\n    ]"
    },
    {
      "rank": 58,
      "score": 8.0,
      "candidate": "return [string for string in strings if substring in string]"
    },
    {
      "rank": 59,
      "score": 8.0,
      "candidate": "return [string for string in strings if substring in string]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 60,
      "score": 8.0,
      "candidate": "return [string for string in strings if substring in string]\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 61,
      "score": 8.0,
      "candidate": "filtered_strings = []\n    for string in strings:\n        if substring in string:\n            filtered_strings.append(string)\n    return filtered_strings"
    },
    {
      "rank": 62,
      "score": 8.0,
      "candidate": "return [string for string in strings if substring in string]\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 63,
      "score": 8.0,
      "candidate": "return [string for string in strings if substring in string]"
    },
    {
      "rank": 64,
      "score": 8.0,
      "candidate": "return [string for string in strings if substring in string]"
    },
    {
      "rank": 65,
      "score": 8.0,
      "candidate": "return [string for string in strings if substring in string]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 66,
      "score": 8.0,
      "candidate": "return [x for x in strings if substring in x]"
    },
    {
      "rank": 67,
      "score": 8.0,
      "candidate": "return [s for s in strings if substring in s]"
    },
    {
      "rank": 68,
      "score": 8.0,
      "candidate": "return [\n        string\n        for string in strings\n        if substring in string\n    ]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 69,
      "score": 8.0,
      "candidate": "return [s for s in strings if substring in s]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 70,
      "score": 8.0,
      "candidate": "return [string for string in strings if substring in string]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 71,
      "score": 8.0,
      "candidate": "return [s for s in strings if substring in s]\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 72,
      "score": 8.0,
      "candidate": "return [s for s in strings if substring in s]\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 73,
      "score": 8.0,
      "candidate": "return [\n        string\n        for string in strings\n        if substring in string\n    ]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 74,
      "score": 8.0,
      "candidate": "return [string for string in strings if substring in string]"
    },
    {
      "rank": 75,
      "score": 8.0,
      "candidate": "return [string for string in strings if substring in string]"
    },
    {
      "rank": 76,
      "score": 8.0,
      "candidate": "return [string for string in strings if substring in string]"
    },
    {
      "rank": 77,
      "score": 8.0,
      "candidate": "return [string for string in strings if substring in string]\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 78,
      "score": 8.0,
      "candidate": "filtered_strings = [\n        string for string in strings if substring in string\n    ]\n    return filtered_strings\n\n\nif __name__ == '__main__':\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 79,
      "score": 8.0,
      "candidate": "return [s for s in strings if substring in s]"
    },
    {
      "rank": 80,
      "score": 8.0,
      "candidate": "return [string for string in strings if substring in string]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 81,
      "score": 8.0,
      "candidate": "return [\n        string\n        for string in strings\n        if substring in string\n    ]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 82,
      "score": 8.0,
      "candidate": "return [s for s in strings if substring in s]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 83,
      "score": 8.0,
      "candidate": "return [s for s in strings if substring in s]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 84,
      "score": 8.0,
      "candidate": "return [string for string in strings if substring in string]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 85,
      "score": 8.0,
      "candidate": "return [string for string in strings if substring in string]"
    },
    {
      "rank": 86,
      "score": 8.0,
      "candidate": "return [string for string in strings if substring in string]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 87,
      "score": 8.0,
      "candidate": "result = []\n    for string in strings:\n        if substring in string:\n            result.append(string)\n    return result"
    },
    {
      "rank": 88,
      "score": 8.0,
      "candidate": "return [\n        string\n        for string in strings\n        if substring in string\n    ]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 89,
      "score": 8.0,
      "candidate": "return [string for string in strings if substring in string]"
    },
    {
      "rank": 90,
      "score": 1.5,
      "candidate": "return [s for s in strings if substring in s]\n\n\ndef filter_by_substr(strings: List[str], substr: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> filter_by_substr([], 'a')\n    []\n    >>> filter_by_substr(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [s for s in strings if substr in s]\n\n\ndef filter_by_regex(strings: List[str], regex: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> filter_by_regex([], 'a')\n    []\n    >>> filter_by_regex(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [s for s in strings if regex in s]\n\n\ndef filter_by_regex_in_strings(strings: List[str], regex: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> filter_by_regex_in_strings([], 'a')\n    []\n    >>> filter_by_regex_in_strings(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [s for s in strings if regex in s]\n\n\ndef filter_by_regex_and_substring(strings: List[str], regex: str, substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> filter_by_regex_and_substring([], 'a', 'b')\n    []\n    >>> filter_by_regex_and_substring(['abc', 'bacd', 'cde', 'array'], 'a', 'b')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [s for s in strings if regex in s and substring in s]"
    },
    {
      "rank": 91,
      "score": 1.0,
      "candidate": "return [string for string in strings if substring in string]\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given prefix\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [string for string in strings if string.startswith(prefix)]\n\n\ndef filter_by_suffix(strings: List[str], suffix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given suffix\n    >>> filter_by_suffix([], 'a')\n    []\n    >>> filter_by_suffix(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [string for string in strings if string.endswith(suffix)]"
    },
    {
      "rank": 92,
      "score": 1.0,
      "candidate": "return [s for s in strings if substring in s]\n\n\ndef filter_by_substring_recursively(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> filter_by_substring_recursively([], 'a')\n    []\n    >>> filter_by_substring_recursively(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    def _recursive_filter_by_substring(strings, substring):\n        if substring in strings:\n            return strings\n        return [s for s in strings if substring in _recursive_filter_by_substring(strings, substring)]\n\n    return _recursive_filter_by_substring(strings, substring)"
    },
    {
      "rank": 93,
      "score": 1.0,
      "candidate": "return [x for x in strings if substring in x]\n\n\ndef filter_by_substring_count(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> filter_by_substring_count([], 'a')\n    []\n    >>> filter_by_substring_count(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [x for x in strings if substring in x and x.count(substring) == 1]\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 94,
      "score": 1.0,
      "candidate": "return [s for s in strings if substring in s]\n\n\ndef filter_by_pattern(strings: List[str], pattern: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that match given pattern\n    >>> filter_by_pattern([], 'a')\n    []\n    >>> filter_by_pattern(['abc', 'bacd', 'cde', 'array'], 'c')\n    ['abc', 'bacd']\n    \"\"\"\n    return [s for s in strings if pattern in s]\n\n\ndef filter_by_length(strings: List[str], length: int) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that have given length\n    >>> filter_by_length([], 5)\n    []\n    >>> filter_by_length(['abc', 'bacd', 'cde', 'array'], 5)\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [s for s in strings if len(s) == length]\n\n\ndef filter_by_regex(strings: List[str], regex: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that match given regex\n    >>> filter_by_regex([], 'a')\n    []\n    >>> filter_by_regex(['abc', 'bacd', 'cde', 'array'], 'c')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [s for s in strings if regex in s]\n\n\ndef filter_by_length_or_regex(strings: List[str], length: int | str | None = None, regex: str | None = None) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that have given length\n    >>> filter_by_length_or_regex([], 5)\n    []\n    >>> filter_by_length_or_regex(['abc', 'bacd', 'cde', 'array'], 5)\n    ['abc', 'bacd', 'array']\n    >>> filter_by_length_or_regex(['abc', 'bacd', 'cde', 'array'], 5, 'c')\n    ['"
    },
    {
      "rank": 95,
      "score": 1.0,
      "candidate": "return [s for s in strings if substring in s]\n\n\ndef filter_by_substring_recursively(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> filter_by_substring_recursively([], 'a')\n    []\n    >>> filter_by_substring_recursively(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    if not strings:\n        return []\n    if not substring:\n        return [string for string in strings if not string.startswith(substring)]\n    if not substring.startswith(strings[0]):\n        return []\n    return [string for string in strings if substring in string]"
    },
    {
      "rank": 96,
      "score": 1.0,
      "candidate": "return [string for string in strings if substring in string]\n\n\ndef filter_by_case(strings: List[str], case: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given case\n    >>> filter_by_case([], 'a')\n    []\n    >>> filter_by_case(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [string for string in strings if case in string.lower()]"
    },
    {
      "rank": 97,
      "score": 1.0,
      "candidate": "return [s for s in strings if substring in s]\n\n\ndef filter_by_substring_with_length(strings: List[str], substring: str, length: int) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> filter_by_substring_with_length([], 'a', 1)\n    []\n    >>> filter_by_substring_with_length(['abc', 'bacd', 'cde', 'array'], 'a', 1)\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [s for s in strings if len(s) == length and substring in s]\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 98,
      "score": 1.0,
      "candidate": "return [s for s in strings if substring in s]\n\n\ndef filter_by_substring_with_regex(strings: List[str], substring: str, regex: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> filter_by_substring_with_regex([], 'a')\n    []\n    >>> filter_by_substring_with_regex(['abc', 'bacd', 'cde', 'array'], 'a', '.*')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [s for s in strings if regex.search(s)]\n\n\ndef filter_by_substring_with_regex_and_index(strings: List[str], substring: str, regex: str, index: int) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> filter_by_substring_with_regex_and_index([], 'a', '.*', 0)\n    []\n    >>> filter_by_substring_with_regex_and_index(['abc', 'bacd', 'cde', 'array'], 'a', '.*', 0)\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [s for s in strings if regex.search(s, index)]\n\n\ndef filter_by_substring_with_regex_and_substring(strings: List[str], substring: str, regex: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> filter_by_substring_with_regex_and_substring([], 'a', '.*')\n    []\n    >>> filter_by_substring_with_regex_and_substring(['abc', 'bacd', 'cde', 'array'], 'a', '.*')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [s for s in strings if regex.search(s, substring)]\n\n\ndef filter_by_substring_with_regex_and_substring_and_index(strings: List[str], substring: str, regex: str, index: int) -> List[str]:\n    \"\"\" Filter an"
    },
    {
      "rank": 99,
      "score": 1.0,
      "candidate": "return [s for s in strings if substring in s]\n\n\ndef filter_by_substring_with_prefix(strings: List[str], substring: str, prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> filter_by_substring_with_prefix([], 'a')\n    []\n    >>> filter_by_substring_with_prefix(['abc', 'bacd', 'cde', 'array'], 'a', 'c')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [s for s in strings if substring.startswith(prefix)]\n\n\ndef filter_by_substring_with_suffix(strings: List[str], substring: str, suffix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> filter_by_substring_with_suffix([], 'a')\n    []\n    >>> filter_by_substring_with_suffix(['abc', 'bacd', 'cde', 'array'], 'a', 'c')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [s for s in strings if substring.endswith(suffix)]\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 100,
      "score": 1.0,
      "candidate": "return [string for string in strings if substring in string]\n\n\ndef filter_by_regex(strings: List[str], regex: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given regex\n    >>> filter_by_regex([], 'a')\n    []\n    >>> filter_by_regex(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [string for string in strings if regex in string]"
    }
  ]
}