{
  "timestamp": "2025-09-14T11:29:05.652179",
  "method": "improved_llm_judge",
  "judge_model": "codellama/CodeLlama-7b-Python-hf",
  "target_model": "codet5-770m",
  "dataset": "humaneval",
  "problem_number": 30,
  "total_candidates": 100,
  "results": [
    {
      "rank": 1,
      "score": 10.0,
      "candidate": "return [num for num in l if num > 0]\n\n\ndef get_negative(l: list):\n    \"\"\"Return only negative numbers in the list.\n    >>> get_negative([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_negative([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\n    return [num for num in l if num < 0]\n\n\ndef get_fib(n: int):\n    \"\"\"Return the n-th Fibonacci number.\n    >>> get_fib(10)\n    1\n    >>> get_fib(20)\n    2\n    >>> get_fib(40)\n    3\n    >>> get_fib(50)\n    5\n    >>> get_fib(60)\n    8\n    \"\"\"\n    if n <= 0:\n        raise ValueError(\"n must be a positive integer\")\n\n    if n == 1:\n        return 1\n\n    if n == 2:\n        return 1\n\n    if n == 3:\n        return 2\n\n    if n == 4:\n        return 3\n\n    if n == 5:\n        return 4\n\n    if n == 6:\n        return 5\n\n    if n == 7:\n        return 6\n\n    if n == 8:\n        return 7\n\n    if n == 9:\n        return 8\n\n    if n == 10:\n        return 9\n\n    raise ValueError(\"n must be a positive integer\")"
    },
    {
      "rank": 2,
      "score": 10.0,
      "candidate": "return [i for i in l if i > 0]\n\n\ndef get_negative(l: list):\n    \"\"\"Return only negative numbers in the list.\n    >>> get_negative([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_negative([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\n    return [i for i in l if i < 0]\n\n\ndef get_sum(l: list):\n    \"\"\"Return the sum of the given list.\n    >>> get_sum([-1, 2, -4, 5, 6])\n    6\n    >>> get_sum([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    9\n    \"\"\"\n    return sum(l)\n\n\ndef get_product(l: list):\n    \"\"\"Return the product of the given list.\n    >>> get_product([-1, 2, -4, 5, 6])\n    6\n    >>> get_product([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    9\n    \"\"\"\n    return reduce(lambda x, y: x * y, l)\n\n\ndef get_division(l: list):\n    \"\"\"Return the division of the given list.\n    >>> get_division([-1, 2, -4, 5, 6])\n    2\n    >>> get_division([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    2.5\n    \"\"\"\n    return reduce(lambda x, y: x / y, l)\n\n\ndef get_floor_division(l: list):\n    \"\"\"Return the floor division of the given list.\n    >>> get_floor_division([-1, 2, -4, 5, 6])\n    1\n    >>> get_floor_division([5, 3, -5, 2, -3, 3, 9, 0, 123, 1,"
    },
    {
      "rank": 3,
      "score": 10.0,
      "candidate": "return [x for x in l if x > 0]\n\n\ndef get_negative(l: list):\n    \"\"\"Return only negative numbers in the list.\n    >>> get_negative([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_negative([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\n    return [x for x in l if x < 0]\n\n\ndef get_empty(l: list):\n    \"\"\"Return list with 0 elements.\n    >>> get_empty([])\n    []\n    >>> get_empty([-1])\n    []\n    >>> get_empty([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_empty([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\n    return [x for x in l if x!= 0]\n\n\ndef get_negative_from_zero(l: list):\n    \"\"\"Return list with negative numbers from 0.\n    >>> get_negative_from_zero([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_negative_from_zero([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\n    return [x for x in l if x < 0]\n\n\ndef get_negative_from_negative(l: list):\n    \"\"\"Return list with negative numbers from negative.\n    >>> get_negative_from_negative([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_negative_from_negative([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]"
    },
    {
      "rank": 4,
      "score": 10.0,
      "candidate": "return [num for num in l if num > 0]\n\n\ndef get_negative(l: list):\n    \"\"\"Return only negative numbers in the list.\n    >>> get_negative([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_negative([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\n    return [num for num in l if num < 0]\n\n\ndef get_sum(l: list):\n    \"\"\"Return the sum of all numbers in the list.\n    >>> get_sum([-1, 2, -4, 5, 6])\n    6\n    >>> get_sum([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    123\n    \"\"\"\n    return sum(l)\n\n\ndef get_mean(l: list):\n    \"\"\"Return the mean of all numbers in the list.\n    >>> get_mean([-1, 2, -4, 5, 6])\n    2.5\n    >>> get_mean([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    3.0\n    \"\"\"\n    return sum(l) / len(l)\n\n\ndef get_median(l: list):\n    \"\"\"Return the median of all numbers in the list.\n    >>> get_median([-1, 2, -4, 5, 6])\n    5\n    >>> get_median([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    3.0\n    \"\"\"\n    l = sorted(l)\n    if len(l) % 2 == 0:\n        return l[int(len(l) / 2)]\n    else:\n        return (l[int(len(l) / 2 - 1)] + l[int(len(l) / 2)]) / 2\n\n\ndef get_max(l: list):\n    \"\"\"Return the max of all numbers in the list.\n    >>> get_"
    },
    {
      "rank": 5,
      "score": 10.0,
      "candidate": "return [x for x in l if x > 0]\n\n\ndef get_negative(l: list):\n    \"\"\"Return only negative numbers in the list.\n    >>> get_negative([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_negative([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\n    return [x for x in l if x < 0]\n\n\ndef get_number_of_duplicates(l: list):\n    \"\"\"Return the number of duplicates in the list.\n    >>> get_number_of_duplicates([1, 2, 3, 4, 5, 6, 7, 8, 9])\n    4\n    \"\"\"\n    return len(set(l))"
    },
    {
      "rank": 6,
      "score": 10.0,
      "candidate": "pos = []\n    for num in l:\n        if num > 0:\n            pos.append(num)\n    return pos\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 7,
      "score": 10.0,
      "candidate": "return [num for num in l if num > 0]\n\n\ndef get_positive_from_str(string: str):\n    \"\"\"Return only positive numbers in the string.\n    >>> get_positive_from_str(\"-1\")\n    [2, 5, 6]\n    >>> get_positive_from_str(\"5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10\")\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\n    return [num for num in string.split(\",\") if num > 0]\n\n\ndef get_positive_from_dict(dict: dict):\n    \"\"\"Return only positive numbers in the dictionary.\n    >>> get_positive_from_dict({-1: 2, -4: 5, 5: 6})\n    [2, 5, 6]\n    >>> get_positive_from_dict({5: 3, -5: 2, -3: 3, 9: 9, 0: 123, 1: -10})\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\n    return [num for num in dict.keys() if num > 0]\n\n\ndef get_positive_from_tuple(tuple: tuple):\n    \"\"\"Return only positive numbers in the tuple.\n    >>> get_positive_from_tuple((-1, 2, -4, 5, 6))\n    [2, 5, 6]\n    >>> get_positive_from_tuple((5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10))\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\n    return [num for num in tuple if num > 0]\n\n\ndef get_positive_from_set(set: set):\n    \"\"\"Return only positive numbers in the set.\n    >>> get_positive_from_set({-1, 2, -4, 5, 6})\n    [2, 5, 6]\n    >>> get_positive_from_set({5: 3, -5: 2, -3: 3, 9: 9, 0: 123, 1: -10})\n    [5, 3, 2, 3"
    },
    {
      "rank": 8,
      "score": 10.0,
      "candidate": "return [x for x in l if x > 0]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 9,
      "score": 10.0,
      "candidate": "positive = []\n    for i in l:\n        if i > 0:\n            positive.append(i)\n    return positive\n\n\ndef get_negative(l: list):\n    \"\"\"Return only negative numbers in the list.\n    >>> get_negative([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_negative([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\n    negative = []\n    for i in l:\n        if i < 0:\n            negative.append(i)\n    return negative\n\n\ndef get_sum(l: list):\n    \"\"\"Return the sum of the list.\n    >>> get_sum([-1, 2, -4, 5, 6])\n    6\n    >>> get_sum([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    9\n    \"\"\"\n    sum = 0\n    for i in l:\n        sum += i\n    return sum\n\n\ndef get_product(l: list):\n    \"\"\"Return the product of the list.\n    >>> get_product([-1, 2, -4, 5, 6])\n    3\n    >>> get_product([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    9\n    \"\"\"\n    product = 1\n    for i in l:\n        product *= i\n    return product\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 10,
      "score": 10.0,
      "candidate": "return [num for num in l if num > 0]\n\n\ndef get_negative(l: list):\n    \"\"\"Return only negative numbers in the list.\n    >>> get_negative([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_negative([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\n    return [num for num in l if num < 0]\n\n\ndef get_unique(l: list):\n    \"\"\"Return only unique numbers in the list.\n    >>> get_unique([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_unique([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\n    return list(set(l))\n\n\ndef get_unique_with_duplicates(l: list):\n    \"\"\"Return only unique numbers in the list.\n    >>> get_unique_with_duplicates([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_unique_with_duplicates([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\n    return list(set(l))\n\n\ndef get_unique_with_non_duplicates(l: list):\n    \"\"\"Return only unique numbers in the list.\n    >>> get_unique_with_non_duplicates([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_unique_with_non_duplicates([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\n    return list(set(l) - set(l))"
    },
    {
      "rank": 11,
      "score": 10.0,
      "candidate": "return [x for x in l if x > 0]\n\n\ndef get_negative(l: list):\n    \"\"\"Return only negative numbers in the list.\n    >>> get_negative([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_negative([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\n    return [x for x in l if x < 0]\n\n\ndef get_max(l: list):\n    \"\"\"Return the maximum value in the list.\n    >>> get_max([-1, 2, -4, 5, 6])\n    6\n    >>> get_max([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    123\n    \"\"\"\n    return max(l)\n\n\ndef get_min(l: list):\n    \"\"\"Return the minimum value in the list.\n    >>> get_min([-1, 2, -4, 5, 6])\n    -1\n    >>> get_min([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    -1\n    \"\"\"\n    return min(l)\n\n\ndef get_sum(l: list):\n    \"\"\"Return the sum of the list.\n    >>> get_sum([-1, 2, -4, 5, 6])\n    9\n    >>> get_sum([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    14\n    \"\"\"\n    return sum(l)"
    },
    {
      "rank": 12,
      "score": 10.0,
      "candidate": "return [n for n in l if n > 0]\n\n\ndef get_negative(l: list):\n    \"\"\"Return only negative numbers in the list.\n    >>> get_negative([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_negative([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\n    return [n for n in l if n < 0]\n\n\ndef get_list_length(l: list):\n    \"\"\"Return the length of the list.\n    >>> get_list_length([1, 2, 3])\n    3\n    >>> get_list_length([-1, 2, 3])\n    3\n    >>> get_list_length([-1, 2, -3])\n    3\n    \"\"\"\n    return len(l)\n\n\ndef get_list_min(l: list):\n    \"\"\"Return the minimum value in the list.\n    >>> get_list_min([1, 2, 3])\n    1\n    >>> get_list_min([-1, 2, 3])\n    -1\n    >>> get_list_min([-1, 2, -3])\n    -1\n    \"\"\"\n    return min(l)\n\n\ndef get_list_max(l: list):\n    \"\"\"Return the maximum value in the list.\n    >>> get_list_max([1, 2, 3])\n    3\n    >>> get_list_max([-1, 2, 3])\n    -1\n    >>> get_list_max([-1, 2, -3])\n    -1\n    \"\"\"\n    return max(l)\n\n\ndef get_list_sum(l: list):\n    \"\"\"Return the sum of the values in the list.\n    >>> get_list_sum([1, 2, 3])\n    6\n    >>> get_list_sum([-1, 2, 3])\n    -1\n    >>> get_list_sum([-1, 2, -3])\n    -1\n    \"\"\"\n    return sum(l)\n\n\ndef get"
    },
    {
      "rank": 13,
      "score": 10.0,
      "candidate": "return [num for num in l if num > 0]\n\n\ndef get_negative(l: list):\n    \"\"\"Return only negative numbers in the list.\n    >>> get_negative([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_negative([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\n    return [num for num in l if num < 0]\n\n\ndef main():\n    import doctest\n    doctest.testmod()\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 14,
      "score": 10.0,
      "candidate": "return [x for x in l if x > 0]\n\n\ndef get_negative(l: list):\n    \"\"\"Return only negative numbers in the list.\n    >>> get_negative([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_negative([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\n    return [x for x in l if x < 0]\n\n\ndef is_prime(n: int):\n    \"\"\"Return whether the number is prime or not.\n    >>> is_prime(5)\n    True\n    >>> is_prime(7)\n    False\n    >>> is_prime(2)\n    True\n    >>> is_prime(9)\n    False\n    \"\"\"\n    for i in range(2, n):\n        if n % i == 0:\n            return False\n    return True\n\n\ndef is_square_root(n: int):\n    \"\"\"Return whether the number is square root or not.\n    >>> is_square_root(5)\n    True\n    >>> is_square_root(7)\n    False\n    >>> is_square_root(2)\n    False\n    >>> is_square_root(9)\n    False\n    \"\"\"\n    if n == 2:\n        return True\n    if n == 3:\n        return False\n    if is_prime(n):\n        return True\n    if is_square_root(n // 2):\n        return True\n    return False\n\n\ndef is_primality_test(n: int, x: int, y: int):\n    \"\"\"Return whether the number is primality or not.\n    >>> is_primality_test(5, 4, 6)\n    True\n    >>> is_primality_test(7, 4, 6)\n    False\n    >>> is_primality_test(2, 5, 7)\n    False\n    >>> is_primality_test(9, 4, 6)\n    False\n    \"\"\"\n    if n == x:\n        return True\n    if"
    },
    {
      "rank": 15,
      "score": 10.0,
      "candidate": "return [x for x in l if x > 0]\n\n\nif __name__ == '__main__':\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 16,
      "score": 10.0,
      "candidate": "pos = []\n    for i in l:\n        if i > 0:\n            pos.append(i)\n    return pos\n\n\ndef get_negatives(l: list):\n    \"\"\"Return only negative numbers in the list.\n    >>> get_negatives([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_negatives([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\n    neg = []\n    for i in l:\n        if i < 0:\n            neg.append(i)\n    return neg\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 17,
      "score": 10.0,
      "candidate": "result = []\n\n    for num in l:\n        if num > 0:\n            result.append(num)\n\n    return result\n\n\ndef get_negatives(l: list):\n    \"\"\"Return all negative numbers in the list.\n    >>> get_negatives([-1, 2, -4, 5, 6])\n    [5, 6]\n    >>> get_negatives([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\n\n    result = []\n\n    for num in l:\n        if num < 0:\n            result.append(num)\n\n    return result\n\n\ndef get_fibonacci(n: int):\n    \"\"\"Return the fibonacci sequence up to n.\n    >>> get_fibonacci(10)\n    [1, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 5, 5, 5]\n    >>> get_fibonacci(11)\n    [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29]\n    \"\"\"\n\n    if n < 2:\n        return []\n\n    fib = [1, 1]\n\n    for i in range(2, n + 1):\n        fib.append(fib[-1] + fib[-2])\n\n    return fib\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 18,
      "score": 10.0,
      "candidate": "return [num for num in l if num > 0]\n\n\ndef get_negative(l: list):\n    \"\"\"Return only negative numbers in the list.\n    >>> get_negative([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_negative([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\n    return [num for num in l if num < 0]\n\n\ndef get_sum(l: list):\n    \"\"\"Return the sum of the list.\n    >>> get_sum([-1, 2, -4, 5, 6])\n    6\n    >>> get_sum([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    123\n    \"\"\"\n    return sum(l)\n\n\ndef get_div(l: list):\n    \"\"\"Return the average of the list.\n    >>> get_div([-1, 2, -4, 5, 6])\n    3.0\n    >>> get_div([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    2.5\n    \"\"\"\n    return get_sum(l) / len(l)\n\n\ndef get_mean(l: list):\n    \"\"\"Return the average of the list.\n    >>> get_mean([-1, 2, -4, 5, 6])\n    2.5\n    >>> get_mean([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    3.0\n    \"\"\"\n    return get_div(l)\n\n\ndef get_max(l: list):\n    \"\"\"Return the maximum of the list.\n    >>> get_max([-1, 2, -4, 5, 6])\n    6\n    >>> get_max([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    123\n    \"\"\"\n    return max(l)\n\n\ndef get_min"
    },
    {
      "rank": 19,
      "score": 10.0,
      "candidate": "return [x for x in l if x > 0]\n\n\ndef get_negative(l: list):\n    \"\"\"Return only negative numbers in the list.\n    >>> get_negative([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_negative([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\n    return [x for x in l if x < 0]\n\n\ndef get_numbers_with_negative(l: list):\n    \"\"\"Return only numbers with negative numbers in the list.\n    >>> get_numbers_with_negative([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_numbers_with_negative([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\n    return [x for x in l if x < 0]\n\n\ndef get_numbers_with_positive(l: list):\n    \"\"\"Return only numbers with positive numbers in the list.\n    >>> get_numbers_with_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_numbers_with_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\n    return [x for x in l if x > 0]\n\n\ndef get_all_numbers(l: list):\n    \"\"\"Return all numbers in the list.\n    >>> get_all_numbers([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_all_numbers([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\n    return [x for x in l]"
    },
    {
      "rank": 20,
      "score": 10.0,
      "candidate": "result = []\n    for i in l:\n        if i > 0:\n            result.append(i)\n    return result\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 21,
      "score": 10.0,
      "candidate": "return [x for x in l if x >= 0]\n\n\ndef get_negative(l: list):\n    \"\"\"Return only negative numbers in the list.\n    >>> get_negative([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_negative([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\n    return [x for x in l if x < 0]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 22,
      "score": 10.0,
      "candidate": "result = []\n    for i in l:\n        if i > 0:\n            result.append(i)\n    return result\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 23,
      "score": 10.0,
      "candidate": "return [x for x in l if x > 0]\n\n\ndef get_negative(l: list):\n    \"\"\"Return only negative numbers in the list.\n    >>> get_negative([-1, 2, -4, 5, 6])\n    [-1, 2, -4, 5, 6]\n    >>> get_negative([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [-5, -3, -2, -3, -9, -123, -1, -10]\n    \"\"\"\n    return [x for x in l if x < 0]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 24,
      "score": 10.0,
      "candidate": "return [num for num in l if num > 0]\n\n\ndef get_negative(l: list):\n    \"\"\"Return only negative numbers in the list.\n    >>> get_negative([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_negative([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\n    return [num for num in l if num < 0]\n\n\ndef get_all_positive(l: list):\n    \"\"\"Return all positive numbers in the list.\n    >>> get_all_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_all_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\n    return [num for num in l if num > 0 and num < 10]\n\n\ndef get_all_negative(l: list):\n    \"\"\"Return all negative numbers in the list.\n    >>> get_all_negative([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_all_negative([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\n    return [num for num in l if num < 0 and num > 0]\n\n\ndef get_all_positive_and_negative(l: list):\n    \"\"\"Return all positive and negative numbers in the list.\n    >>> get_all_positive_and_negative([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_all_positive_and_negative([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\""
    },
    {
      "rank": 25,
      "score": 10.0,
      "candidate": "return [i for i in l if i > 0]"
    },
    {
      "rank": 26,
      "score": 10.0,
      "candidate": "return [i for i in l if i > 0]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 27,
      "score": 10.0,
      "candidate": "return [x for x in l if x > 0]"
    },
    {
      "rank": 28,
      "score": 10.0,
      "candidate": "return [x for x in l if x > 0]"
    },
    {
      "rank": 29,
      "score": 10.0,
      "candidate": "pos = []\n    for i in l:\n        if i > 0:\n            pos.append(i)\n    return pos\n\n\ndef get_positive_with_custom_func(l: list):\n    \"\"\"Return only positive numbers in the list.\n    >>> get_positive_with_custom_func([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive_with_custom_func([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\n    pos = []\n    for i in l:\n        if i > 0:\n            pos.append(i)\n    return pos\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 30,
      "score": 10.0,
      "candidate": "return [i for i in l if i > 0]\n\n\ndef get_negative(l: list):\n    \"\"\"Return only negative numbers in the list.\n    >>> get_negative([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_negative([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\n    return [i for i in l if i < 0]\n\n\ndef get_list_sum(l: list):\n    \"\"\"Return the sum of all elements in the list.\n    >>> get_list_sum([-1, 2, -4, 5, 6])\n    8\n    >>> get_list_sum([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    12\n    \"\"\"\n    return sum(l)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 31,
      "score": 10.0,
      "candidate": "return [i for i in l if i > 0]\n\n\ndef get_negative(l: list):\n    \"\"\"Return only negative numbers in the list.\n    >>> get_negative([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_negative([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\n    return [i for i in l if i < 0]\n\n\ndef get_count(l: list):\n    \"\"\"Return the number of times a number appears in a list.\n    >>> get_count([-1, 2, -4, 5, 6])\n    3\n    >>> get_count([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    6\n    \"\"\"\n    return len(l)\n\n\ndef get_max(l: list):\n    \"\"\"Return the maximum number in the list.\n    >>> get_max([-1, 2, -4, 5, 6])\n    6\n    >>> get_max([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    123\n    \"\"\"\n    return max(l)\n\n\ndef get_min(l: list):\n    \"\"\"Return the minimum number in the list.\n    >>> get_min([-1, 2, -4, 5, 6])\n    -1\n    >>> get_min([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    0\n    \"\"\"\n    return min(l)\n\n\ndef get_mean(l: list):\n    \"\"\"Return the average number in the list.\n    >>> get_mean([-1, 2, -4, 5, 6])\n    4.0\n    >>> get_mean([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    3.5\n    \"\"\"\n    return sum(l) / len(l)\n\n\ndef get_"
    },
    {
      "rank": 32,
      "score": 10.0,
      "candidate": "positive_list = []\n    for x in l:\n        if x > 0:\n            positive_list.append(x)\n    return positive_list\n\n\ndef get_positive_with_list_comprehension(l: list):\n    \"\"\"Return only positive numbers in the list.\n    >>> get_positive_with_list_comprehension([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive_with_list_comprehension([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\n    positive_list = []\n    for x in l:\n        if x > 0:\n            positive_list.append(x)\n    return positive_list\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 33,
      "score": 10.0,
      "candidate": "return [num for num in l if num > 0]\n\n\ndef get_negative(l: list):\n    \"\"\"Return only negative numbers in the list.\n    >>> get_negative([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_negative([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\n    return [num for num in l if num < 0]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 34,
      "score": 10.0,
      "candidate": "return [x for x in l if x > 0]\n\n\ndef get_negative(l: list):\n    \"\"\"Return only negative numbers in the list.\n    >>> get_negative([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_negative([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\n    return [x for x in l if x < 0]\n\n\ndef get_divisible_by(l: list, divisor: int):\n    \"\"\"Return the list of numbers that are divisible by the given divisor.\n    >>> get_divisible_by([1, 2, 3, 4, 5, 6], 3)\n    [2, 3, 4, 5, 6]\n    >>> get_divisible_by([1, 2, 3, 4, 5, 6], 2)\n    [1, 4, 5, 6]\n    >>> get_divisible_by([1, 2, 3, 4, 5, 6], 1)\n    [1, 2, 3, 4, 5, 6]\n    \"\"\"\n    return [x for x in l if x % divisor == 0]\n\n\ndef get_even_divisible_by(l: list, divisor: int):\n    \"\"\"Return the list of numbers that are evenly divisible by the given divisor.\n    >>> get_even_divisible_by([1, 2, 3, 4, 5, 6], 3)\n    [2, 3, 4, 5, 6]\n    >>> get_even_divisible_by([1, 2, 3, 4, 5, 6], 2)\n    [1, 3, 4, 5, 6]\n    >>> get_even_divisible_by([1, 2, 3, 4, 5, 6], 1)\n    [1, 3, 4, 5, 6]\n    \"\"\"\n    return [x for x in l if x % divisor == 0 and x!= 0]\n\n\ndef get_odd_divisible_by(l: list, divisor: int):\n    \"\"\"Return the list of numbers that are oddly div"
    },
    {
      "rank": 35,
      "score": 10.0,
      "candidate": "return [x for x in l if x > 0]"
    },
    {
      "rank": 36,
      "score": 10.0,
      "candidate": "return [x for x in l if x > 0]\n\n\ndef get_negatives(l: list):\n    \"\"\"Return only negative numbers in the list.\n    >>> get_negatives([-1, 2, -4, 5, 6])\n    [-1, 2, 5, 6]\n    >>> get_negatives([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [-1, 3, 2, 3, 9, 123, 1]\n    \"\"\"\n    return [x for x in l if x < 0]\n\n\ndef get_negative(l: list):\n    \"\"\"Return only negative numbers in the list.\n    >>> get_negative([-1, 2, -4, 5, 6])\n    [-1, 5, 6]\n    >>> get_negative([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [-1, 3, 2, 3, 9, 123, 1]\n    \"\"\"\n    return [x for x in l if x >= 0]"
    },
    {
      "rank": 37,
      "score": 10.0,
      "candidate": "return [num for num in l if num > 0]"
    },
    {
      "rank": 38,
      "score": 10.0,
      "candidate": "return [num for num in l if num > 0]\n\n\ndef get_negative(l: list):\n    \"\"\"Return only negative numbers in the list.\n    >>> get_negative([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_negative([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\n    return [num for num in l if num < 0]\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 39,
      "score": 10.0,
      "candidate": "return [i for i in l if i > 0]\n\n\ndef get_negative(l: list):\n    \"\"\"Return only negative numbers in the list.\n    >>> get_negative([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_negative([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\n    return [i for i in l if i < 0]\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 40,
      "score": 10.0,
      "candidate": "positive = []\n    for i in l:\n        if i > 0:\n            positive.append(i)\n    return positive\n\n\ndef get_negative(l: list):\n    \"\"\"Return only negative numbers in the list.\n    >>> get_negative([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_negative([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\n    negative = []\n    for i in l:\n        if i < 0:\n            negative.append(i)\n    return negative"
    },
    {
      "rank": 41,
      "score": 10.0,
      "candidate": "return [x for x in l if x > 0]\n\n\ndef get_negative(l: list):\n    \"\"\"Return only negative numbers in the list.\n    >>> get_negative([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_negative([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\n    return [x for x in l if x < 0]\n\n\ndef get_sorted(l: list):\n    \"\"\"Return sorted list.\n    >>> get_sorted([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_sorted([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\n    return sorted(l)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 42,
      "score": 10.0,
      "candidate": "return [num for num in l if num > 0]\n\n\ndef get_negatives(l: list):\n    \"\"\"Return only negative numbers in the list.\n    >>> get_negatives([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_negatives([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\n    return [num for num in l if num < 0]\n\n\ndef get_squares(l: list):\n    \"\"\"Return only squares in the list.\n    >>> get_squares([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_squares([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\n    return [num ** 2 for num in l]\n\n\ndef get_sum_squares(l: list):\n    \"\"\"Return the sum of squares in the list.\n    >>> get_sum_squares([-1, 2, -4, 5, 6])\n    12\n    >>> get_sum_squares([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    12\n    \"\"\"\n    return sum(l)\n\n\ndef get_product_squares(l: list):\n    \"\"\"Return the product of squares in the list.\n    >>> get_product_squares([-1, 2, -4, 5, 6])\n    120\n    >>> get_product_squares([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    120\n    \"\"\"\n    return sum(i * i for i in l)\n\n\ndef get_total_squares(l: list):\n    \"\"\"Return the total of squares in the list.\n    >>> get_total_squares([-1, 2, -4, 5, 6])\n    120"
    },
    {
      "rank": 43,
      "score": 10.0,
      "candidate": "return [num for num in l if num > 0]\n\n\ndef get_negative(l: list):\n    \"\"\"Return only negative numbers in the list.\n    >>> get_negative([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_negative([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\n    return [num for num in l if num < 0]\n\n\ndef get_sum(l: list):\n    \"\"\"Return the sum of the list.\n    >>> get_sum([-1, 2, -4, 5, 6])\n    8\n    >>> get_sum([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    8\n    \"\"\"\n    return sum(l)\n\n\ndef get_product(l: list):\n    \"\"\"Return the product of the list.\n    >>> get_product([-1, 2, -4, 5, 6])\n    4\n    >>> get_product([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    24\n    \"\"\"\n    return sum(l) * sum(l)\n\n\ndef get_difference(l: list):\n    \"\"\"Return the difference of the list.\n    >>> get_difference([-1, 2, -4, 5, 6])\n    2\n    >>> get_difference([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    0\n    \"\"\"\n    return sum(l) - get_sum(l)\n\n\ndef get_average(l: list):\n    \"\"\"Return the average of the list.\n    >>> get_average([-1, 2, -4, 5, 6])\n    2.5\n    >>> get_average([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    3.5\n    \"\"\"\n    return sum(l) / len(l)"
    },
    {
      "rank": 44,
      "score": 10.0,
      "candidate": "return [x for x in l if x >= 0]\n\n\ndef get_negative(l: list):\n    \"\"\"Return only negative numbers in the list.\n    >>> get_negative([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_negative([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\n    return [x for x in l if x < 0]\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 45,
      "score": 10.0,
      "candidate": "return [x for x in l if x > 0]\n\n\ndef get_negative(l: list):\n    \"\"\"Return only negative numbers in the list.\n    >>> get_negative([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_negative([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\n    return [x for x in l if x < 0]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 46,
      "score": 10.0,
      "candidate": "return [x for x in l if x > 0]\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 47,
      "score": 9.0,
      "candidate": "return [x for x in l if x > 0]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 48,
      "score": 9.0,
      "candidate": "return [num for num in l if num > 0]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 49,
      "score": 9.0,
      "candidate": "return [x for x in l if x > 0]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 50,
      "score": 9.0,
      "candidate": "return [i for i in l if i > 0]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 51,
      "score": 8.0,
      "candidate": "return [num for num in l if num > 0]\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 52,
      "score": 8.0,
      "candidate": "return [n for n in l if n > 0]\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 53,
      "score": 8.0,
      "candidate": "return [x for x in l if x > 0]"
    },
    {
      "rank": 54,
      "score": 8.0,
      "candidate": "return [num for num in l if num > 0]"
    },
    {
      "rank": 55,
      "score": 8.0,
      "candidate": "return [x for x in l if x > 0]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 56,
      "score": 8.0,
      "candidate": "return [x for x in l if x > 0]\n\n\nif __name__ == '__main__':\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 57,
      "score": 8.0,
      "candidate": "return [i for i in l if i > 0]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 58,
      "score": 8.0,
      "candidate": "return [n for n in l if n > 0]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 59,
      "score": 8.0,
      "candidate": "return [n for n in l if n > 0]"
    },
    {
      "rank": 60,
      "score": 8.0,
      "candidate": "pos = []\n    for i in l:\n        if i > 0:\n            pos.append(i)\n    return pos\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 61,
      "score": 8.0,
      "candidate": "return [n for n in l if n > 0]\n\n\ndef get_negative(l: list):\n    \"\"\"Return only negative numbers in the list.\n    >>> get_negative([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_negative([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\n    return [n for n in l if n < 0]"
    },
    {
      "rank": 62,
      "score": 8.0,
      "candidate": "return [num for num in l if num > 0]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 63,
      "score": 8.0,
      "candidate": "return [x for x in l if x > 0]\n\n\ndef get_negative(l: list):\n    \"\"\"Return only negative numbers in the list.\n    >>> get_negative([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_negative([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\n    return [x for x in l if x < 0]\n\n\ndef get_odd(l: list):\n    \"\"\"Return only odd numbers in the list.\n    >>> get_odd([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_odd([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\n    return [x for x in l if x % 2 == 1]\n\n\ndef get_even(l: list):\n    \"\"\"Return only even numbers in the list.\n    >>> get_even([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_even([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\n    return [x for x in l if x % 2 == 0]"
    },
    {
      "rank": 64,
      "score": 8.0,
      "candidate": "return [x for x in l if x > 0]\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 65,
      "score": 8.0,
      "candidate": "return [x for x in l if x > 0]\n\n\ndef get_positive_count(l: list):\n    \"\"\"Return the number of positive numbers in the list.\n    >>> get_positive_count([-1, 2, -4, 5, 6])\n    3\n    >>> get_positive_count([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    9\n    \"\"\"\n    return len(get_positive(l))"
    },
    {
      "rank": 66,
      "score": 8.0,
      "candidate": "return [i for i in l if i > 0]\n\n\ndef get_negative(l: list):\n    \"\"\"Return only negative numbers in the list.\n    >>> get_negative([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_negative([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\n    return [i for i in l if i < 0]"
    },
    {
      "rank": 67,
      "score": 8.0,
      "candidate": "return [x for x in l if x > 0]\n\n\ndef get_negative(l: list):\n    \"\"\"Return only negative numbers in the list.\n    >>> get_negative([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_negative([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\n    return [x for x in l if x < 0]"
    },
    {
      "rank": 68,
      "score": 8.0,
      "candidate": "return [i for i in l if i > 0]\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 69,
      "score": 8.0,
      "candidate": "return [num for num in l if num > 0]\n\n\ndef get_negative(l: list):\n    \"\"\"Return only negative numbers in the list.\n    >>> get_negative([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_negative([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\n    return [num for num in l if num < 0]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 70,
      "score": 8.0,
      "candidate": "return [num for num in l if num > 0]\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 71,
      "score": 8.0,
      "candidate": "return [num for num in l if num > 0]\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 72,
      "score": 8.0,
      "candidate": "return [num for num in l if num > 0]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 73,
      "score": 8.0,
      "candidate": "return [x for x in l if x > 0]\n\n\ndef get_negative(l: list):\n    \"\"\"Return only negative numbers in the list.\n    >>> get_negative([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_negative([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\n    return [x for x in l if x < 0]\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 74,
      "score": 8.0,
      "candidate": "return [num for num in l if num > 0]\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 75,
      "score": 8.0,
      "candidate": "return [num for num in l if num > 0]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 76,
      "score": 8.0,
      "candidate": "return [x for x in l if x > 0]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 77,
      "score": 8.0,
      "candidate": "return [num for num in l if num > 0]\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 78,
      "score": 8.0,
      "candidate": "return [num for num in l if num > 0]\n\n\ndef get_negative(l: list):\n    \"\"\"Return only negative numbers in the list.\n    >>> get_negative([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_negative([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\n    return [num for num in l if num < 0]"
    },
    {
      "rank": 79,
      "score": 8.0,
      "candidate": "return [x for x in l if x > 0]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 80,
      "score": 8.0,
      "candidate": "return [i for i in l if i > 0]\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 81,
      "score": 8.0,
      "candidate": "return [num for num in l if num > 0]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 82,
      "score": 8.0,
      "candidate": "return [x for x in l if x > 0]\n\n\ndef get_negative(l: list):\n    \"\"\"Return only negative numbers in the list.\n    >>> get_negative([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_negative([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\n    return [x for x in l if x < 0]"
    },
    {
      "rank": 83,
      "score": 8.0,
      "candidate": "return [x for x in l if x >= 0]\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 84,
      "score": 8.0,
      "candidate": "return [x for x in l if x > 0]\n\n\ndef get_negative(l: list):\n    \"\"\"Return only negative numbers in the list.\n    >>> get_negative([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_negative([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\n    return [x for x in l if x < 0]\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 85,
      "score": 8.0,
      "candidate": "return [n for n in l if n > 0]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 86,
      "score": 8.0,
      "candidate": "return [num for num in l if num > 0]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 87,
      "score": 1.0,
      "candidate": "return [num for num in l if num > 0]\n\n\ndef get_negative(l: list):\n    \"\"\"Return only negative numbers in the list.\n    >>> get_negative([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_negative([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\n    return [num for num in l if num < 0]"
    },
    {
      "rank": 88,
      "score": 1.0,
      "candidate": "return [num for num in l if num > 0]\n\n\ndef get_positive_from_list(l: list):\n    \"\"\"Return only positive numbers in the list.\n    >>> get_positive_from_list([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive_from_list([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\n    return [num for num in l if num > 0]\n\n\ndef get_negative(l: list):\n    \"\"\"Return only negative numbers in the list.\n    >>> get_negative([-1, 2, -4, 5, 6])\n    [6]\n    >>> get_negative([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\n    return [num for num in l if num < 0]\n\n\ndef get_negative_from_list(l: list):\n    \"\"\"Return only negative numbers in the list.\n    >>> get_negative_from_list([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_negative_from_list([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\n    return [num for num in l if num < 0]\n\n\ndef get_zero(l: list):\n    \"\"\"Return only zero numbers in the list.\n    >>> get_zero([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_zero([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\n    return [num for num in l if num > 0]\n\n\ndef get_zero_from"
    },
    {
      "rank": 89,
      "score": 1.0,
      "candidate": "return [num for num in l if num > 0]\n\n\ndef get_negatives(l: list):\n    \"\"\"Return only negative numbers in the list.\n    >>> get_negatives([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_negatives([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\n    return [num for num in l if num < 0]\n\n\ndef get_unique(l: list):\n    \"\"\"Return only unique numbers in the list.\n    >>> get_unique([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_unique([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\n    return list(set(l))\n\n\ndef get_unique_and_pos(l: list):\n    \"\"\"Return only unique numbers in the list.\n    >>> get_unique_and_pos([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_unique_and_pos([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\n    return list(set(l) & set(get_positive(l)))\n\n\ndef get_unique_and_neg(l: list):\n    \"\"\"Return only unique numbers in the list.\n    >>> get_unique_and_neg([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_unique_and_neg([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\n    return list(set(l) & set(get_negatives("
    },
    {
      "rank": 90,
      "score": 1.0,
      "candidate": "return [x for x in l if x > 0]\n\n\ndef get_negative(l: list):\n    \"\"\"Return only negative numbers in the list.\n    >>> get_negative([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_negative([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\n    return [x for x in l if x < 0]\n\n\ndef get_positive_and_negative(l: list):\n    \"\"\"Return only positive and negative numbers in the list.\n    >>> get_positive_and_negative([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive_and_negative([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\n    return get_positive(l) + get_negative(l)\n\n\ndef get_unique_numbers(l: list):\n    \"\"\"Return only unique numbers in the list.\n    >>> get_unique_numbers([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\n    return list(set(l))\n\n\ndef get_unique_numbers_and_negative(l: list):\n    \"\"\"Return only unique numbers and negative numbers in the list.\n    >>> get_unique_numbers_and_negative([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_unique_numbers_and_negative([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\n    return get_unique_numbers(l) + get_negative(l)\n\n\ndef get_unique_numbers_and_positive(l: list"
    },
    {
      "rank": 91,
      "score": 1.0,
      "candidate": "return [x for x in l if x > 0]\n\n\ndef get_negative(l: list):\n    \"\"\"Return only negative numbers in the list.\n    >>> get_negative([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_negative([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\n    return [x for x in l if x < 0]"
    },
    {
      "rank": 92,
      "score": 1.0,
      "candidate": "return [i for i in l if i > 0]\n\n\ndef get_negative(l: list):\n    \"\"\"Return only negative numbers in the list.\n    >>> get_negative([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_negative([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\n    return [i for i in l if i < 0]\n\n\ndef get_zero(l: list):\n    \"\"\"Return only zero numbers in the list.\n    >>> get_zero([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_zero([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\n    return [i for i in l if i!= 0]\n\n\ndef get_neg_zero(l: list):\n    \"\"\"Return only negative numbers and zero numbers in the list.\n    >>> get_neg_zero([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_neg_zero([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\n    return get_negative(get_zero(l)) + get_zero(get_negative(l))\n\n\ndef get_zero_neg_zero(l: list):\n    \"\"\"Return only zero numbers and negative numbers in the list.\n    >>> get_zero_neg_zero([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_zero_neg_zero([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\n    return get_zero(get_"
    },
    {
      "rank": 93,
      "score": 1.0,
      "candidate": "return [x for x in l if x > 0]\n\n\ndef get_negative(l: list):\n    \"\"\"Return only negative numbers in the list.\n    >>> get_negative([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_negative([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\n    return [x for x in l if x < 0]\n\n\ndef get_zero(l: list):\n    \"\"\"Return only zero numbers in the list.\n    >>> get_zero([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_zero([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\n    return [x for x in l if x == 0]"
    },
    {
      "rank": 94,
      "score": 1.0,
      "candidate": "return [x for x in l if x > 0]\n\n\ndef get_positive_in_list(l: list):\n    \"\"\"Return only positive numbers in the list.\n    >>> get_positive_in_list([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive_in_list([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\n    return [x for x in l if x > 0 and x in l]"
    },
    {
      "rank": 95,
      "score": 1.0,
      "candidate": "return [x for x in l if x > 0]\n\n\ndef get_negative(l: list):\n    \"\"\"Return only negative numbers in the list.\n    >>> get_negative([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_negative([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\n    return [x for x in l if x < 0]\n\n\ndef get_sum_of_positive_and_negative(l: list):\n    \"\"\"Return the sum of all positive and negative numbers in the list.\n    >>> get_sum_of_positive_and_negative([-1, 2, -4, 5, 6])\n    3\n    >>> get_sum_of_positive_and_negative([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    6\n    \"\"\"\n    return sum(get_positive(l) + get_negative(l))\n\n\ndef get_sum_of_all(l: list):\n    \"\"\"Return the sum of all numbers in the list.\n    >>> get_sum_of_all([-1, 2, -4, 5, 6])\n    6\n    >>> get_sum_of_all([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    15\n    \"\"\"\n    return sum(l)\n\n\ndef get_sum_of_all_with_negative(l: list):\n    \"\"\"Return the sum of all negative numbers in the list.\n    >>> get_sum_of_all_with_negative([-1, 2, -4, 5, 6])\n    -1\n    >>> get_sum_of_all_with_negative([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    -10\n    \"\"\"\n    return sum(get_negative(l))\n\n\ndef get_sum_of_all_with_negative_and_positive(l: list"
    },
    {
      "rank": 96,
      "score": 1.0,
      "candidate": "return [x for x in l if x > 0]\n\n\ndef get_negative(l: list):\n    \"\"\"Return only negative numbers in the list.\n    >>> get_negative([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_negative([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\n    return [x for x in l if x < 0]\n\n\ndef get_list_of_positive(l: list):\n    \"\"\"Return a list of all positive numbers in the list.\n    >>> get_list_of_positive([-1, 2, -4, 5, 6])\n    [-1, 2, -4, 5, 6]\n    >>> get_list_of_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [-1, 2, -4, 5, 6, 3, 9, 123, 1]\n    \"\"\"\n    return [x for x in l if x > 0]\n\n\ndef get_list_of_negative(l: list):\n    \"\"\"Return a list of all negative numbers in the list.\n    >>> get_list_of_negative([-1, 2, -4, 5, 6])\n    [-1, 2, -4, 5, 6]\n    >>> get_list_of_negative([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [-1, 2, -4, 5, 6, 3, 9, 123, 1]\n    \"\"\"\n    return [x for x in l if x < 0]"
    },
    {
      "rank": 97,
      "score": 1.0,
      "candidate": "return [num for num in l if num > 0]\n\n\ndef get_negative(l: list):\n    \"\"\"Return only negative numbers in the list.\n    >>> get_negative([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_negative([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\n    return [num for num in l if num < 0]\n\n\ndef get_zero_or_negative(l: list):\n    \"\"\"Return only zero or negative numbers in the list.\n    >>> get_zero_or_negative([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_zero_or_negative([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\n    return [num for num in l if num!= 0 or num!= -1]\n\n\ndef get_zero_or_positive(l: list):\n    \"\"\"Return only zero or positive numbers in the list.\n    >>> get_zero_or_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_zero_or_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\n    return [num for num in l if num!= 0 and num!= -1]\n\n\ndef get_one_or_negative(l: list):\n    \"\"\"Return only one or negative numbers in the list.\n    >>> get_one_or_negative([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_one_or_negative([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3,"
    },
    {
      "rank": 98,
      "score": 1.0,
      "candidate": "return [i for i in l if i > 0]\n\n\ndef get_negative(l: list):\n    \"\"\"Return only negative numbers in the list.\n    >>> get_negative([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_negative([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\n    return [i for i in l if i < 0]\n\n\ndef get_sorted(l: list):\n    \"\"\"Return a sorted list.\n    >>> get_sorted([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_sorted([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\n    return sorted(l)"
    },
    {
      "rank": 99,
      "score": 1.0,
      "candidate": "return [i for i in l if i > 0]\n\n\ndef get_negative(l: list):\n    \"\"\"Return only negative numbers in the list.\n    >>> get_negative([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_negative([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\n    return [i for i in l if i < 0]\n\n\ndef get_both(l: list):\n    \"\"\"Return both positive and negative numbers in the list.\n    >>> get_both([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_both([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\n    return get_positive(l) + get_negative(l)"
    },
    {
      "rank": 100,
      "score": 1.0,
      "candidate": "return [x for x in l if x > 0]\n\n\ndef get_negative(l: list):\n    \"\"\"Return only negative numbers in the list.\n    >>> get_negative([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_negative([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\n    return [x for x in l if x < 0]\n\n\ndef get_fibonacci(n: int):\n    \"\"\"Return the Fibonacci sequence up to n.\n    >>> get_fibonacci(5)\n    [1, 1, 1, 2, 2, 3, 3, 4]\n    >>> get_fibonacci(10)\n    [1, 2, 3, 4, 5, 6]\n    \"\"\"\n    if n == 1:\n        return [1]\n    elif n == 2:\n        return [1, 2]\n    else:\n        fib = [1, 1]\n        for _ in range(2, n):\n            fib.append(fib[_ - 2] + fib[_ - 1])\n        return fib"
    }
  ]
}