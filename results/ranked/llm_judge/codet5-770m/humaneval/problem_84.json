{
  "timestamp": "2025-09-14T11:52:52.372837",
  "method": "improved_llm_judge",
  "judge_model": "codellama/CodeLlama-7b-Python-hf",
  "target_model": "codet5-770m",
  "dataset": "humaneval",
  "problem_number": 84,
  "total_candidates": 100,
  "results": [
    {
      "rank": 1,
      "score": 10.0,
      "candidate": "res = 0\n    while N > 0:\n        res += N % 2\n        N = N // 2\n    return str(res)\n\n\nif __name__ == \"__main__\":\n    N = 1000\n    print(solve(N))\n    N = 150\n    print(solve(N))\n    N = 147\n    print(solve(N))"
    },
    {
      "rank": 2,
      "score": 10.0,
      "candidate": "sum = 0\n    while N:\n        digit = N % 10\n        N = N // 10\n        sum += digit\n    \n    return str(sum)\n\nif __name__ == \"__main__\":\n    print(solve(1000))\n    print(solve(150))\n    print(solve(147))\n    print(solve(10000))"
    },
    {
      "rank": 3,
      "score": 10.0,
      "candidate": "# Your code here\n    sum = 0\n    while N > 0:\n        sum += N % 2\n        N = N // 2\n    \n    return str(sum)\n\n\n# Tests\nprint(solve(1000))\nprint(solve(150))\nprint(solve(147))"
    },
    {
      "rank": 4,
      "score": 10.0,
      "candidate": "return str(bin(N)[2:])"
    },
    {
      "rank": 5,
      "score": 10.0,
      "candidate": "# Your code here\n    return str(bin(N))[2:]\n\nif __name__ == '__main__':\n    print(solve(1000))\n    print(solve(150))\n    print(solve(147))"
    },
    {
      "rank": 6,
      "score": 10.0,
      "candidate": "result = \"\"\n    while N > 0:\n        digit = N % 10\n        N = N // 10\n        result = str(digit) + result\n    return result"
    },
    {
      "rank": 7,
      "score": 10.0,
      "candidate": "sum = 0\n    while N > 0:\n        sum += N % 2\n        N = N // 2\n    \n    return str(sum)\n\n\nif __name__ == \"__main__\":\n    print(solve(1000))\n    print(solve(150))\n    print(solve(147))"
    },
    {
      "rank": 8,
      "score": 10.0,
      "candidate": "def sum_of_digits(n):\n        if n == 0:\n            return 1\n        else:\n            return n % 2 + sum_of_digits(n // 2)\n    \n    return str(sum_of_digits(N))\n\n\nif __name__ == '__main__':\n    test_cases = [1000, 150, 147]\n    for i, test_case in enumerate(test_cases):\n        assert solve(test_case) == str(i + 1), f\"Test Case {i} failed! Expected: {solve(test_case)}, Actual: {str(i + 1)}\""
    },
    {
      "rank": 9,
      "score": 10.0,
      "candidate": "return bin(N).count(\"1\")\n\n\ndef main():\n    print(solve(1000))\n    print(solve(150))\n    print(solve(147))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 10,
      "score": 10.0,
      "candidate": "return str(bin(N))[2:]\n\ndef solve2(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    return bin(N)[2:]\n\nif __name__ == \"__main__\":\n    test_cases = [1000, 150, 147]\n    for test_case in test_cases:\n        print(solve(test_case))\n        print(solve2(test_case))"
    },
    {
      "rank": 11,
      "score": 10.0,
      "candidate": "return str(bin(N)[2:])\n\n\nif __name__ == \"__main__\":\n    test_cases = [1000, 150, 147]\n    for test_case in test_cases:\n        print(\"Input: {}, Output: {}\".format(test_case, solve(test_case)))"
    },
    {
      "rank": 12,
      "score": 10.0,
      "candidate": "return str(bin(N))[2:]"
    },
    {
      "rank": 13,
      "score": 10.0,
      "candidate": "# Your code here\n    return str(bin(N))[2:]"
    },
    {
      "rank": 14,
      "score": 10.0,
      "candidate": "# Your code here\n    return f\"{sum(int(c) for c in str(bin(N)))}\""
    },
    {
      "rank": 15,
      "score": 10.0,
      "candidate": "# Your code here\n    sum = 0\n    while N > 0:\n        digit = N % 10\n        sum = sum + digit\n        N = N // 10\n    return str(sum)\n\n\nif __name__ == \"__main__\":\n    print(solve(1000))\n    print(solve(150))\n    print(solve(147))"
    },
    {
      "rank": 16,
      "score": 10.0,
      "candidate": "result = \"\"\n    while N!= 0:\n        result = str(N % 2) + result\n        N = N // 2\n    return result"
    },
    {
      "rank": 17,
      "score": 10.0,
      "candidate": "result = \"\"\n    while N!= 0:\n        digit = N % 2\n        result = str(digit) + result\n        N = int(N / 2)\n    return result\n\nif __name__ == \"__main__\":\n    N = 1000\n    print(solve(N))\n    N = 150\n    print(solve(N))\n    N = 147\n    print(solve(N))\n\n# Time: O(logN)\n# Space: O(1)"
    },
    {
      "rank": 18,
      "score": 10.0,
      "candidate": "# Your code here\n    # (1) Write an algorithm to find the sum of digits in binary N.\n    # (2) Write an algorithm to find the sum of digits in binary N.\n    # (3) Write an algorithm to find the sum of digits in binary N.\n    # (4) Write an algorithm to find the sum of digits in binary N.\n    # (5) Write an algorithm to find the sum of digits in binary N.\n    # (6) Write an algorithm to find the sum of digits in binary N.\n    # (7) Write an algorithm to find the sum of digits in binary N.\n    # (8) Write an algorithm to find the sum of digits in binary N.\n    # (9) Write an algorithm to find the sum of digits in binary N.\n    # (10) Write an algorithm to find the sum of digits in binary N.\n    # (11) Write an algorithm to find the sum of digits in binary N.\n    # (12) Write an algorithm to find the sum of digits in binary N.\n    # (13) Write an algorithm to find the sum of digits in binary N.\n    # (14) Write an algorithm to find the sum of digits in binary N.\n    # (15) Write an algorithm to find the sum of digits in binary N.\n    # (16) Write an algorithm to find the sum of digits in binary N.\n    # (17) Write an algorithm to find the sum of digits in binary N.\n    # (18) Write an algorithm to find the sum of digits in binary N.\n    # (19) Write an algorithm to find the sum of digits in binary N.\n    # (20) Write an algorithm to find the sum of digits in binary N.\n    # (21) Write an algorithm to find the sum of digits in binary N.\n    # (22) Write an algorithm to find the sum of digits in binary N.\n    # (23) Write an algorithm to find the sum of digits in binary N.\n    # (24) Write an algorithm to find the sum of digits in binary N.\n    # (25) Write an algorithm to find the sum of digits in binary N.\n    # (26) Write an algorithm to find the sum of digits in binary N.\n    # (27) Write an algorithm to find"
    },
    {
      "rank": 19,
      "score": 10.0,
      "candidate": "if N == 0:\n        return \"0\"\n    if N < 10:\n        return str(N)\n    \n    return str(int(str(N)[::-1]))"
    },
    {
      "rank": 20,
      "score": 10.0,
      "candidate": "sum = 0\n    while N > 0:\n        sum += N % 2\n        N //= 2\n    return str(sum)\n\n\nif __name__ == \"__main__\":\n    assert solve(1000) == \"1\"\n    assert solve(150) == \"110\"\n    assert solve(147) == \"1100\"\n    print(\"Tests passed!\")"
    },
    {
      "rank": 21,
      "score": 9.99406122111531,
      "candidate": "res = \"\"\n    while N!= 0:\n        N, remainder = divmod(N, 2)\n        res = str(remainder) + res\n    return res[::-1]\n\n\nif __name__ == '__main__':\n    print(solve(1000))\n    print(solve(150))\n    print(solve(147))"
    },
    {
      "rank": 22,
      "score": 9.968315546504654,
      "candidate": "# Your code here\n    return \"1\"\n\n\nif __name__ == \"__main__\":\n    test_cases = [1000, 150, 147]\n\n    for test_case in test_cases:\n        print(solve(test_case))"
    },
    {
      "rank": 23,
      "score": 9.918310050267921,
      "candidate": "if N == 0:\n        return \"0\"\n    if N == 1:\n        return \"1\"\n    return solve(N-1) + solve(N-2)\n\n\nif __name__ == \"__main__\":\n    print(solve(1000))\n    print(solve(150))\n    print(solve(147))"
    },
    {
      "rank": 24,
      "score": 9.903344369351494,
      "candidate": "if N == 0:\n        return \"0\"\n    else:\n        return str(bin(N)[2:])\n\n\nif __name__ == \"__main__\":\n    print(solve(1000))\n    print(solve(150))\n    print(solve(147))"
    },
    {
      "rank": 25,
      "score": 9.900658427785924,
      "candidate": "# Your code here\n    return str(bin(N)[2:])\n\n\nprint(solve(1000))\nprint(solve(150))\nprint(solve(147))"
    },
    {
      "rank": 26,
      "score": 9.871654750090958,
      "candidate": "return str(bin(N))[2:]\n\n\nif __name__ == \"__main__\":\n    assert solve(1000) == \"1\"\n    assert solve(150) == \"110\"\n    assert solve(147) == \"1100\""
    },
    {
      "rank": 27,
      "score": 9.867514373940713,
      "candidate": "# Your code here\n    num = bin(N)\n    return num[2:].count(\"1\")\n\n\nif __name__ == '__main__':\n    print(solve(1000))\n    print(solve(150))\n    print(solve(147))"
    },
    {
      "rank": 28,
      "score": 9.83056379661682,
      "candidate": "if N == 0:\n        return \"0\"\n    if N == 1:\n        return \"1\"\n    if N < 10:\n        return solve(N-1) + \"0\"\n    if N % 10 == 1:\n        return solve(N//10) + \"1\"\n    return solve(N//10) + \"0\"\n\n\nif __name__ == \"__main__\":\n    N = 1000\n    print(solve(N))"
    },
    {
      "rank": 29,
      "score": 9.795078908429087,
      "candidate": "# Initialize sum and count variables\n    sum = 0\n    count = 0\n    \n    # If N is negative, return error\n    if N < 0:\n        print(\"Error: N must be non-negative\")\n        return\n    \n    # For each digit of N\n    for digit in str(N):\n        # Add digit to sum\n        sum += int(digit)\n        # Count digits\n        count += 1\n    \n    # Return sum and count\n    return str(sum), count"
    },
    {
      "rank": 30,
      "score": 9.771961103959596,
      "candidate": "# Write your code here\n    return str(bin(N))[2:]\n\n\nif __name__ == \"__main__\":\n    print(solve(1000))\n    print(solve(150))\n    print(solve(143))"
    },
    {
      "rank": 31,
      "score": 9.766905510342504,
      "candidate": "# Your code here\n    binary_string = bin(N)\n    return sum(int(i) for i in binary_string[2:])\n\n\nif __name__ == \"__main__\":\n    N = 1000\n    print(solve(N))\n\n    N = 150\n    print(solve(N))\n\n    N = 147\n    print(solve(N))"
    },
    {
      "rank": 32,
      "score": 9.716147307973745,
      "candidate": "# Your code here\n    return str(bin(N))[2:]"
    },
    {
      "rank": 33,
      "score": 9.702154319865379,
      "candidate": "binary = bin(N)\n    return sum(int(digit) for digit in binary)\n\nif __name__ == '__main__':\n    print(solve(1000))\n    print(solve(150))\n    print(solve(147))"
    },
    {
      "rank": 34,
      "score": 9.683268548306328,
      "candidate": "if N == 0:\n        return '0'\n    binary_str = bin(N)[2:]\n    result = ''\n    for i in binary_str:\n        result += i\n    return result\n\n\nif __name__ == '__main__':\n    N = int(input())\n    print(solve(N))"
    },
    {
      "rank": 35,
      "score": 9.644262814726998,
      "candidate": "sum = 0\n    while N:\n        sum += N % 2\n        N //= 2\n    return str(sum)\n\n\nprint(solve(1000))\nprint(solve(150))\nprint(solve(147))"
    },
    {
      "rank": 36,
      "score": 9.600469406770667,
      "candidate": "return str(bin(N).count('1'))\n\nprint(solve(1000))\nprint(solve(150))\nprint(solve(147))"
    },
    {
      "rank": 37,
      "score": 9.554354307052854,
      "candidate": "binary_string = str(bin(N))\n    return sum(int(digit) for digit in binary_string)\n\n\ndef test_solve():\n    assert solve(1000) == \"1\"\n    assert solve(150) == \"110\"\n    assert solve(147) == \"1100\"\n    assert solve(3) == \"1\"\n    assert solve(7) == \"0\"\n    assert solve(8) == \"1\"\n    assert solve(9) == \"0\"\n    assert solve(10) == \"0\"\n\n\nif __name__ == \"__main__\":\n    test_solve()"
    },
    {
      "rank": 38,
      "score": 9.513212611437348,
      "candidate": "if N == 0:\n        return \"0\"\n    return str(bin(N))[2:]\n\nif __name__ == \"__main__\":\n    print(solve(1000))\n    print(solve(150))\n    print(solve(147))"
    },
    {
      "rank": 39,
      "score": 9.46282879401275,
      "candidate": "return str(sum(int(x) for x in str(N)))\n\n\nif __name__ == \"__main__\":\n    print(solve(1000))\n    print(solve(150))\n    print(solve(147))"
    },
    {
      "rank": 40,
      "score": 9.37311079806608,
      "candidate": "binary_number = str(bin(N))\n    sum_of_binary_number = 0\n    for i in binary_number:\n        sum_of_binary_number += int(i)\n    return sum_of_binary_number"
    },
    {
      "rank": 41,
      "score": 9.349450324238331,
      "candidate": "return str(bin(N)[2:])\n\n\nif __name__ == \"__main__\":\n    N = 1000\n    print(solve(N))\n\n    N = 150\n    print(solve(N))\n\n    N = 147\n    print(solve(N))"
    },
    {
      "rank": 42,
      "score": 9.241036153694266,
      "candidate": "binary = bin(N)\n    return binary[2:]\n\n\ndef main():\n    N = 1000\n    print(solve(N))\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 43,
      "score": 9.186674467732919,
      "candidate": "return bin(N)[2:]\n\n\nif __name__ == '__main__':\n    print(solve(1000))\n    print(solve(150))\n    print(solve(147))"
    },
    {
      "rank": 44,
      "score": 9.16732163068345,
      "candidate": "s = str(bin(N))\n    return sum([int(d) for d in s])\n\nif __name__ == \"__main__\":\n    print(solve(1000))\n    print(solve(150))\n    print(solve(147))"
    },
    {
      "rank": 45,
      "score": 9.160268476956217,
      "candidate": "if N == 0:\n        return \"0\"\n    else:\n        return str(sum(int(c) for c in str(N)))"
    },
    {
      "rank": 46,
      "score": 9.139054645472957,
      "candidate": "s = str(bin(N))[2:]\n    return sum(int(i) for i in s)\n\n\nif __name__ == \"__main__\":\n    print(solve(1000))\n    print(solve(150))\n    print(solve(147))"
    },
    {
      "rank": 47,
      "score": 9.133299365837575,
      "candidate": "return str(bin(N)[2:])\n\n\ndef main():\n    N = 1000\n    print(solve(N))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 48,
      "score": 9.125469677575607,
      "candidate": "if N < 0:\n        return None\n    if N == 0:\n        return \"0\"\n    if N < 2:\n        return str(N)\n    if N == 1:\n        return \"1\"\n    return str(int(str(N)[::-1], 2))\n\n\nif __name__ == \"__main__\":\n    N = 1000\n    print(solve(N))"
    },
    {
      "rank": 49,
      "score": 9.081877257872732,
      "candidate": "s = str(bin(N))\n    return sum(int(d) for d in s[2:])\n\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 50,
      "score": 8.941291890767335,
      "candidate": "return str(bin(N).count('1'))\n\n\nif __name__ == '__main__':\n    print(solve(1000))\n    print(solve(150))\n    print(solve(147))"
    },
    {
      "rank": 51,
      "score": 8.847312154200512,
      "candidate": "return str(bin(N))[2:]"
    },
    {
      "rank": 52,
      "score": 8.805138767146312,
      "candidate": "binary_string = bin(N)[2:]\n    total = 0\n    for i in binary_string:\n        total += int(i)\n    return str(total)\n\nif __name__ == \"__main__\":\n    print(solve(1000))\n    print(solve(150))\n    print(solve(147))\n    print(solve(1500))"
    },
    {
      "rank": 53,
      "score": 8.685680138007722,
      "candidate": "if N == 0:\n        return '0'\n    return str(bin(N))[2:]\n\nprint(solve(1000))\nprint(solve(150))\nprint(solve(147))"
    },
    {
      "rank": 54,
      "score": 8.62102251306691,
      "candidate": "if N < 0:\n        return None\n    \n    N = str(N)\n    return sum(int(d) for d in N)"
    },
    {
      "rank": 55,
      "score": 8.614413376216833,
      "candidate": "return str(bin(N))[2:]\n\n\nif __name__ == '__main__':\n    print(solve(1000))\n    print(solve(150))\n    print(solve(147))"
    },
    {
      "rank": 56,
      "score": 8.612287353054965,
      "candidate": "sum = 0\n    while N!= 0:\n        digit = N % 10\n        sum += digit\n        N = int(N/10)\n    return str(sum)\n\n\nif __name__ == \"__main__\":\n    print(solve(1000))\n    print(solve(150))\n    print(solve(147))"
    },
    {
      "rank": 57,
      "score": 8.605945040541622,
      "candidate": "return str(bin(N))[2:]\n\n\nif __name__ == \"__main__\":\n    N = 1000\n    print(solve(N))\n\n    N = 150\n    print(solve(N))\n\n    N = 147\n    print(solve(N))\n\n    N = 0\n    print(solve(N))"
    },
    {
      "rank": 58,
      "score": 8.60013825720412,
      "candidate": "binary_number = bin(N)\n    return sum([int(d) for d in binary_number])\n\n\nif __name__ == \"__main__\":\n    N = 1000\n    print(solve(N))\n\n    N = 150\n    print(solve(N))\n\n    N = 147\n    print(solve(N))"
    },
    {
      "rank": 59,
      "score": 8.598957465984496,
      "candidate": "bin_str = bin(N)[2:]\n    bin_str = ''.join(map(str, bin_str))\n    return bin_str\n\nprint(solve(1000))\nprint(solve(150))\nprint(solve(147))"
    },
    {
      "rank": 60,
      "score": 8.55816671208048,
      "candidate": "s = bin(N)\n    sum = 0\n    for i in s:\n        sum += int(i)\n    return str(sum)\n\n\nif __name__ == \"__main__\":\n    print(solve(1000))\n    print(solve(150))\n    print(solve(147))"
    },
    {
      "rank": 61,
      "score": 8.542610334096679,
      "candidate": "bin_str = bin(N)\n    return bin_str[2:].lstrip('0')\n\n\nif __name__ == '__main__':\n    print(solve(1000))\n    print(solve(150))\n    print(solve(147))"
    },
    {
      "rank": 62,
      "score": 8.536969225302933,
      "candidate": "sum = 0\n    while N:\n        sum += N % 2\n        N = N // 2\n    return str(sum)\n\n\nprint(solve(1000))\nprint(solve(150))\nprint(solve(147))"
    },
    {
      "rank": 63,
      "score": 8.524987536603732,
      "candidate": "if N == 0:\n        return '0'\n    \n    return str(bin(N)[2:])\n\n\nif __name__ == '__main__':\n    test_cases = [1000, 150, 147]\n    for test_case in test_cases:\n        print(f'Test Case {test_case}: {solve(test_case)}')"
    },
    {
      "rank": 64,
      "score": 8.490070892638023,
      "candidate": "if N == 0:\n        return \"0\"\n    if N == 1:\n        return \"1\"\n    return str(int(bin(N)[2:]))"
    },
    {
      "rank": 65,
      "score": 8.48757200941613,
      "candidate": "if N <= 0:\n        return '0'\n    else:\n        return str(bin(N))[2:]\n\nif __name__ == \"__main__\":\n    print(solve(1000))\n    print(solve(150))\n    print(solve(147))"
    },
    {
      "rank": 66,
      "score": 8.476182700647769,
      "candidate": "return str(bin(N)[2:])\n\n\nif __name__ == \"__main__\":\n    print(solve(1000))\n    print(solve(150))\n    print(solve(147))"
    },
    {
      "rank": 67,
      "score": 8.427606206062768,
      "candidate": "return sum([int(digit) for digit in str(N)])\n\n\nif __name__ == '__main__':\n    N = int(input())\n    print(solve(N))"
    },
    {
      "rank": 68,
      "score": 8.390089751721971,
      "candidate": "if N == 0:\n        return \"0\"\n    \n    result = \"\"\n    while N:\n        result += str(N % 2)\n        N //= 2\n    \n    return result[::-1]"
    },
    {
      "rank": 69,
      "score": 8.379460222893988,
      "candidate": "return str(bin(N)[2:].count('1'))\n\n\nif __name__ == '__main__':\n    print(solve(1000))\n    print(solve(150))\n    print(solve(147))\n    print(solve(10000))"
    },
    {
      "rank": 70,
      "score": 8.33440007467833,
      "candidate": "# Your code here\n    if N == 0:\n        return \"0\"\n    else:\n        return str(N) + solve(N//2)\n\nprint(solve(1000))"
    },
    {
      "rank": 71,
      "score": 8.334392358324477,
      "candidate": "s = str(bin(N))\n    return sum(int(i) for i in s[2:])"
    },
    {
      "rank": 72,
      "score": 8.303910989725487,
      "candidate": "binary = bin(N)\n    sum = 0\n    for digit in binary:\n        sum += int(digit)\n    return sum\n\n\nif __name__ == \"__main__\":\n    print(solve(1000))\n    print(solve(150))\n    print(solve(147))"
    },
    {
      "rank": 73,
      "score": 8.299114627794374,
      "candidate": "if N == 0:\n        return '0'\n    if N == 1:\n        return '1'\n    if N % 2 == 0:\n        return str(N // 2) + solve(N // 2)\n    else:\n        return str(N // 2) + solve(2 * N)"
    },
    {
      "rank": 74,
      "score": 8.227944222093345,
      "candidate": "if N < 0:\n        return \"Invalid Input\"\n    res = \"\"\n    while N > 0:\n        res = str(N % 2) + res\n        N = N // 2\n    return res\n\nprint(solve(1000))\nprint(solve(150))\nprint(solve(147))"
    },
    {
      "rank": 75,
      "score": 8.226638128822588,
      "candidate": "N = bin(N)\n    return N[2:]\n\nif __name__ == '__main__':\n    test_cases = [1000, 150, 147]\n    for i in test_cases:\n        print(solve(i))"
    },
    {
      "rank": 76,
      "score": 8.223791483055017,
      "candidate": "return str(bin(N).count('1'))\n\n\nif __name__ == '__main__':\n    N = int(input())\n    print(solve(N))"
    },
    {
      "rank": 77,
      "score": 8.219232552657159,
      "candidate": "return bin(N).replace('0b', '')\n\nprint(solve(1000))\nprint(solve(150))\nprint(solve(147))"
    },
    {
      "rank": 78,
      "score": 8.208618633959713,
      "candidate": "result = \"\"\n    while N!= 0:\n        result = str(N % 2) + result\n        N = N // 2\n    return result\n\n\nif __name__ == \"__main__\":\n    N = int(input(\"Enter a positive integer N: \"))\n    print(f\"The sum of digits in binary is {solve(N)}\")"
    },
    {
      "rank": 79,
      "score": 8.188584563917608,
      "candidate": "if N == 0:\n        return \"0\"\n    elif N < 10:\n        return str(N)\n    else:\n        return solve(N//2) + str(N%2)\n\nprint(solve(1000))\nprint(solve(150))\nprint(solve(147))"
    },
    {
      "rank": 80,
      "score": 8.180169305701188,
      "candidate": "return str(bin(N))[2:]\n\n\nif __name__ == \"__main__\":\n    print(solve(1000))\n    print(solve(150))\n    print(solve(147))"
    },
    {
      "rank": 81,
      "score": 8.162144260182606,
      "candidate": "return str(bin(N)[2:])\n\n\nif __name__ == '__main__':\n    print(solve(1000))\n    print(solve(150))\n    print(solve(147))"
    },
    {
      "rank": 82,
      "score": 8.161642336696628,
      "candidate": "return str(bin(N))[2:]\n\n\nif __name__ == '__main__':\n    test_cases = [1000, 150, 147]\n    for N in test_cases:\n        print(\"Test Case #{}: {}\".format(N, solve(N)))"
    },
    {
      "rank": 83,
      "score": 8.050012208529804,
      "candidate": "result = \"\"\n    while N > 0:\n        digit = N % 10\n        result = str(digit) + result\n        N = N // 10\n    return result\n\nif __name__ == \"__main__\":\n    N = 1000\n    print(solve(N))\n    N = 150\n    print(solve(N))\n    N = 147\n    print(solve(N))"
    },
    {
      "rank": 84,
      "score": 7.947320307835172,
      "candidate": "bin_str = str(bin(N))\n    return bin_str[2:]\n\n\nif __name__ == \"__main__\":\n    print(solve(1000))\n    print(solve(150))\n    print(solve(143))"
    },
    {
      "rank": 85,
      "score": 7.903477463055962,
      "candidate": "return str(bin(N))[2:]\n\n\nif __name__ == \"__main__\":\n    assert solve(1000) == \"1\"\n    assert solve(150) == \"110\"\n    assert solve(147) == \"1100\""
    },
    {
      "rank": 86,
      "score": 7.882227331126529,
      "candidate": "res = \"\"\n    while N:\n        res = str(N % 2) + res\n        N //= 2\n    return res\n\n\n\nprint(solve(1000))\nprint(solve(150))\nprint(solve(147))"
    },
    {
      "rank": 87,
      "score": 7.820197001462183,
      "candidate": "num = bin(N)\n    return num.count('1')"
    },
    {
      "rank": 88,
      "score": 7.780661704816858,
      "candidate": "return str(bin(N)[2:])\n\n\nif __name__ == \"__main__\":\n    N = 1000\n    print(solve(N))\n    N = 150\n    print(solve(N))\n    N = 147\n    print(solve(N))"
    },
    {
      "rank": 89,
      "score": 7.61581557142396,
      "candidate": "# Your code here\n    \n    return str(bin(N))[2:]\n\nif __name__ == \"__main__\":\n    print(solve(1000))\n    print(solve(150))\n    print(solve(147))"
    },
    {
      "rank": 90,
      "score": 7.54520272945528,
      "candidate": "s = str(bin(N)[2:])\n    return sum(int(d) for d in s)\n\n\nif __name__ == '__main__':\n    print(solve(1000))\n    print(solve(150))\n    print(solve(147))"
    },
    {
      "rank": 91,
      "score": 7.52339948622095,
      "candidate": "if N == 0:\n        return 0\n    if N % 2 == 0:\n        return solve(N/2) + solve(N/2)\n    else:\n        return solve(N/2) + solve(2*N/2)\n\nprint(solve(1000))\nprint(solve(150))\nprint(solve(147))"
    },
    {
      "rank": 92,
      "score": 3.0,
      "candidate": "sum = 0\n    while N:\n        digit = N % 10\n        N = N // 10\n        sum += digit\n    return str(sum)\n\n\nif __name__ == \"__main__\":\n    assert solve(1000) == \"1\"\n    assert solve(150) == \"110\"\n    assert solve(147) == \"1100\""
    },
    {
      "rank": 93,
      "score": 3.0,
      "candidate": "bin_number = bin(N)[2:]\n    sum_of_digits = sum([int(digit) for digit in bin_number])\n    return str(sum_of_digits)\n\n\ndef solve2(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    bin_number = bin(N)[2:]\n    return str(sum([int(digit) for digit in bin_number]))\n\n\nif __name__ == '__main__':\n    print(solve(1000))\n    print(solve(150))\n    print(solve(147))"
    },
    {
      "rank": 94,
      "score": 3.0,
      "candidate": "return str(bin(N)[2:])"
    },
    {
      "rank": 95,
      "score": 3.0,
      "candidate": "total_sum = 0\n    while N > 0:\n        total_sum = total_sum + N % 2\n        N = N // 2\n    return str(total_sum)\n\n\nif __name__ == \"__main__\":\n    N = 1000\n    print(solve(N))\n\n    N = 150\n    print(solve(N))\n\n    N = 147\n    print(solve(N))\n\n    N = 100\n    print(solve(N))"
    },
    {
      "rank": 96,
      "score": 3.0,
      "candidate": "# Your code here\n    sum_of_digits = 0\n    while N > 0:\n        digit = N % 10\n        sum_of_digits += digit\n        N = N // 10\n    \n    return str(sum_of_digits)\n\n\nprint(solve(1000))\nprint(solve(150))\nprint(solve(147))"
    },
    {
      "rank": 97,
      "score": 3.0,
      "candidate": "# Your code here\n    # if N is None:\n    #     return None\n    # if N < 0:\n    #     return None\n    # return bin(N).replace('0b', '')\n\n    if N < 0:\n        return None\n    if N == 0:\n        return '0'\n    if N == 1:\n        return '1'\n    if N == 2:\n        return '11'\n    if N == 3:\n        return '101'\n    if N == 4:\n        return '1011'\n    if N == 5:\n        return '10111'\n    if N == 6:\n        return '101101'\n    if N == 7:\n        return '1011101'\n    if N == 8:\n        return '10111111'\n    if N == 9:\n        return '10111101'\n    if N == 10:\n        return '1011111'\n    if N == 11:\n        return '101111111'\n    if N == 12:\n        return '1011111111'\n    if N == 13:\n        return '10111111111'\n    if N == 14:\n        return '1011111111111'\n    if N == 15:\n        return '101111111111101'\n    if N == 16:\n        return '1011111111111111'\n    if N == 17:\n        return '1011111111111111101'\n    if N == 18:\n        return '1011111111111111101'\n    if N == 19:\n        return '1011111111111111101'\n    if N == 20:\n        return '1011111111111111101'\n    if N == 21:\n        return '10111111111111111111101'\n    if N == 22:\n        return '10111111111111111111101'\n    if N == 23:\n        return '101111111111111111111111101'\n    if N == 24:\n        return '101111111111111111111111101'\n    if N == 25:\n        return '1011111111111111111111111111101'\n    if N == 26:\n        return '10111111111111111111111111111111101'\n    if N == 27:\n        return"
    },
    {
      "rank": 98,
      "score": 3.0,
      "candidate": "if N == 0:\n        return \"0\"\n    result = \"\"\n    while N:\n        result = str(N % 2) + result\n        N = int(N/2)\n    return result\n\n\ndef solve_2(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    if N == 0:\n        return \"0\"\n    result = \"\"\n    while N:\n        result = str(N % 2) + result\n        N = int(N/2)\n    return result\n\n\nif __name__ == '__main__':\n    test_cases = [1000, 150, 147]\n    for N in test_cases:\n        print(\"Test case {}: {}\".format(N, solve(N)))\n\n    print()\n\n    test_cases = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n    for N in test_cases:\n        print(\"Test case {}: {}\".format(N, solve_2(N)))"
    },
    {
      "rank": 99,
      "score": 3.0,
      "candidate": "return str(bin(N))[2:]\n\n\ndef test_solve():\n    assert solve(1000) == '1'\n    assert solve(150) == '110'\n    assert solve(147) == '1100'\n    assert solve(15) == '01'\n    assert solve(0) == '0'\n    assert solve(1) == '0'\n    assert solve(2) == '0'\n    assert solve(3) == '0'\n    assert solve(4) == '0'\n    assert solve(5) == '0'\n    assert solve(6) == '0'\n    assert solve(7) == '0'\n    assert solve(8) == '0'\n    assert solve(9) == '0'\n    assert solve(10) == '0'\n    assert solve(11) == '0'\n    assert solve(12) == '0'\n    assert solve(13) == '0'\n    assert solve(14) == '0'\n    assert solve(15) == '0'\n    assert solve(16) == '0'\n    assert solve(17) == '0'\n    assert solve(18) == '0'\n    assert solve(19) == '0'\n    assert solve(20) == '0'\n    assert solve(21) == '0'\n    assert solve(22) == '0'\n    assert solve(23) == '0'\n    assert solve(24) == '0'\n    assert solve(25) == '0'\n    assert solve(26) == '0'\n    assert solve(27) == '0'\n    assert solve(28) == '0'\n    assert solve(29) == '0'\n    assert solve(30) == '0'\n    assert solve(31) == '0'\n    assert solve(32) == '0'\n    assert solve(33) == '0'\n    assert solve(34) == '0'\n    assert solve(35) == '0'\n    assert solve(36) == '0'\n    assert solve(37) == '0'\n    assert solve(38) == '0'\n    assert solve(39) == '0'\n    assert solve(40"
    },
    {
      "rank": 100,
      "score": 3.0,
      "candidate": "# Your code here\n    return str(bin(N)[2:])\n\n\ndef main():\n    print(solve(1000))\n    print(solve(150))\n    print(solve(147))\n\n\nif __name__ == \"__main__\":\n    main()"
    }
  ]
}