{
  "timestamp": "2025-09-14T11:26:27.951009",
  "method": "improved_llm_judge",
  "judge_model": "codellama/CodeLlama-7b-Python-hf",
  "target_model": "codet5-770m",
  "dataset": "humaneval",
  "problem_number": 24,
  "total_candidates": 100,
  "results": [
    {
      "rank": 1,
      "score": 10.0,
      "candidate": "max_divisor = n\n    for divisor in range(2, int(n ** 0.5) + 1):\n        if n % divisor == 0:\n            max_divisor = divisor\n    return max_divisor\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 2,
      "score": 10.0,
      "candidate": "largest = 1\n    for i in range(1, n + 1):\n        if n % i == 0:\n            largest = i\n    return largest\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 3,
      "score": 10.0,
      "candidate": "largest = n\n    for i in range(1, n + 1):\n        if n % i == 0:\n            largest = i\n    return largest\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 4,
      "score": 10.0,
      "candidate": "largest_divisor = 0\n    for divisor in range(1, n+1):\n        if n % divisor == 0:\n            largest_divisor = divisor\n    return largest_divisor\n\n\nif __name__ == \"__main__\":\n    n = int(input())\n    print(largest_divisor(n))"
    },
    {
      "rank": 5,
      "score": 10.0,
      "candidate": "largest_number = 1\n    for divisor in range(2, n + 1):\n        if n % divisor == 0:\n            largest_number = divisor\n            break\n    return largest_number\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 6,
      "score": 10.0,
      "candidate": "largest_divisor_list = [n]\n    largest_divisor_list.append(2)\n    for i in range(3, n, 2):\n        if n % i == 0:\n            largest_divisor_list.append(i)\n    return max(largest_divisor_list)"
    },
    {
      "rank": 7,
      "score": 10.0,
      "candidate": "largest = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            largest = i\n            break\n    return largest\n\n\nif __name__ == '__main__':\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 8,
      "score": 10.0,
      "candidate": "largest = n\n    for i in range(1, n + 1):\n        if n % i == 0:\n            largest = i\n    return largest\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 9,
      "score": 10.0,
      "candidate": "max = 0\n    for divisor in range(1, n + 1):\n        if n % divisor == 0:\n            max = divisor\n    return max\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 10,
      "score": 10.0,
      "candidate": "largest = n\n    for divisor in range(2, n):\n        if n % divisor == 0:\n            largest = max(largest, divisor)\n    return largest\n\n\nif __name__ == '__main__':\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 11,
      "score": 10.0,
      "candidate": "largest = n\n    for i in range(1, n):\n        if n % i == 0:\n            largest = i\n    return largest\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 12,
      "score": 10.0,
      "candidate": "if n <= 1:\n        return n\n    return max(n // i for i in range(1, n + 1))\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 13,
      "score": 10.0,
      "candidate": "if n < 1:\n        raise ValueError(\"n must be greater than or equal to 1\")\n    if n == 1:\n        return 1\n    return max(largest_divisor(n - 1), largest_divisor(n - 2)) + 1\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 14,
      "score": 10.0,
      "candidate": "if n < 1:\n        return 0\n\n    largest = 1\n    for i in range(2, n):\n        if n % i == 0:\n            largest = i\n    return largest\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 15,
      "score": 10.0,
      "candidate": "largest = 0\n    for divisor in range(1, n + 1):\n        if n % divisor == 0:\n            largest = divisor\n    return largest"
    },
    {
      "rank": 16,
      "score": 10.0,
      "candidate": "largest_divisor_value = 0\n    largest_divisor_value_1 = 0\n    for divisor in range(1, n + 1):\n        if n % divisor == 0:\n            largest_divisor_value = divisor\n            largest_divisor_value_1 = n\n    if largest_divisor_value_1 < largest_divisor_value:\n        return largest_divisor_value\n    else:\n        return largest_divisor_value_1\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 17,
      "score": 10.0,
      "candidate": "largest = n\n    for i in range(2, n):\n        if n % i == 0:\n            largest = max(largest, i)\n    return largest\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 18,
      "score": 10.0,
      "candidate": "max_divisor = n\n    for i in range(2, n):\n        if n % i == 0:\n            max_divisor = i\n    return max_divisor\n\n\ndef largest_divisor2(n: int) -> int:\n    \"\"\" For a given number n, find the largest number that divides n evenly, smaller than n\n    >>> largest_divisor2(15)\n    5\n    \"\"\"\n    max_divisor = n\n    for i in range(2, n):\n        if n % i == 0:\n            max_divisor = i\n    return max_divisor"
    },
    {
      "rank": 19,
      "score": 10.0,
      "candidate": "if n == 0:\n        return 0\n    else:\n        return max(n, largest_divisor(n-1))\n\n\ndef largest_divisor_iterative(n: int) -> int:\n    \"\"\" For a given number n, find the largest number that divides n evenly, smaller than n.\n    >>> largest_divisor_iterative(15)\n    5\n    \"\"\"\n    if n == 0:\n        return 0\n    i = 1\n    while i <= n:\n        if n % i == 0:\n            return i\n        i += 1\n    return n\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 20,
      "score": 10.0,
      "candidate": "max_num = 0\n    for i in range(2, n + 1):\n        if n % i == 0:\n            max_num = i\n    return max_num\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 21,
      "score": 10.0,
      "candidate": "# Your code here\n    return max(n // i for i in range(1, n + 1))\n\n\nif __name__ == '__main__':\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 22,
      "score": 10.0,
      "candidate": "return max(2, int(n ** 0.5))\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 23,
      "score": 10.0,
      "candidate": "for i in range(1, n + 1):\n        if n % i == 0:\n            return i\n    return 0\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 24,
      "score": 10.0,
      "candidate": "divisor_list = [1]\n    largest_number = 1\n    for divisor in divisor_list:\n        if n % divisor == 0:\n            largest_number = divisor\n        else:\n            continue\n\n    return largest_number\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 25,
      "score": 10.0,
      "candidate": "return max(n, 1)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 26,
      "score": 10.0,
      "candidate": "largest_divisor = 0\n    for divisor in range(1, n + 1):\n        if n % divisor == 0:\n            largest_divisor = divisor\n    return largest_divisor\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 27,
      "score": 10.0,
      "candidate": "largest_number = 1\n\n    for divisor in range(2, n + 1):\n        if n % divisor == 0:\n            largest_number = max(largest_number, divisor)\n\n    return largest_number\n\n\ndef main():\n    import doctest\n\n    doctest.testmod()\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 28,
      "score": 10.0,
      "candidate": "for i in range(2, n):\n        if n % i == 0:\n            return i\n    return n"
    },
    {
      "rank": 29,
      "score": 10.0,
      "candidate": "return max(n // i for i in range(1, n + 1))\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 30,
      "score": 10.0,
      "candidate": "largest = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            if i > largest:\n                largest = i\n    return largest\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 31,
      "score": 10.0,
      "candidate": "if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    return max(largest_divisor(n // 2), largest_divisor(n // 3))\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 32,
      "score": 10.0,
      "candidate": "if n < 2:\n        return n\n    else:\n        return max(largest_divisor(n // 2), largest_divisor(n - 1))\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 33,
      "score": 10.0,
      "candidate": "largest = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            largest = max(largest, i)\n    return largest"
    },
    {
      "rank": 34,
      "score": 10.0,
      "candidate": "return max(\n        int(i) for i in range(1, n + 1) if n % i == 0\n    )\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 35,
      "score": 10.0,
      "candidate": "if n == 0:\n        return 0\n    if n % 2 == 0:\n        return 2\n    if n % 3 == 0:\n        return 3\n    if n % 5 == 0:\n        return 5\n    if n % 7 == 0:\n        return 7\n    if n % 11 == 0:\n        return 11\n    if n % 13 == 0:\n        return 13\n    if n % 17 == 0:\n        return 17\n    if n % 19 == 0:\n        return 19\n    if n % 23 == 0:\n        return 23\n    if n % 29 == 0:\n        return 29\n    if n % 31 == 0:\n        return 31\n    if n % 37 == 0:\n        return 37\n    if n % 41 == 0:\n        return 41\n    if n % 47 == 0:\n        return 47\n    if n % 53 == 0:\n        return 53\n    if n % 59 == 0:\n        return 59\n    if n % 61 == 0:\n        return 61\n    if n % 67 == 0:\n        return 67\n    if n % 71 == 0:\n        return 71\n    if n % 73 == 0:\n        return 73\n    if n % 79 == 0:\n        return 79\n    if n % 83 == 0:\n        return 83\n    if n % 85 == 0:\n        return 85\n    if n % 89 == 0:\n        return 89\n    if n % 97 == 0:\n        return 97\n    if n % 101 == 0:\n        return 101\n    if n % 103 == 0:\n        return 103\n    if n % 109 == 0:\n        return 109\n    if n % 111 == 0:\n        return 111\n    if n % 127 == 0:\n        return 127\n    if n % 113 == 0:\n        return 113\n    if n % 119 == 0:\n        return 119\n    if n % 141 == 0:\n        return 141\n    if n % 151 == 0:\n        return 151\n    if n % 161 == 0:\n        return 161\n    if n % 172 == 0:\n        return 172\n    if n % 181 == 0:\n        return 181\n    if"
    },
    {
      "rank": 36,
      "score": 10.0,
      "candidate": "if n < 2:\n        return n\n    return max(n, 2) + max(n % i for i in range(3, int(n ** 0.5) + 1, 2))\n\n\ndef largest_divisor_recursive(n: int) -> int:\n    \"\"\" Recursive function to find the largest divisor of n.\n    >>> largest_divisor_recursive(15)\n    5\n    \"\"\"\n    if n < 2:\n        return n\n    return max(largest_divisor_recursive(n // i) for i in range(3, int(n ** 0.5) + 1, 2))\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 37,
      "score": 10.0,
      "candidate": "return max(1, n // 2)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 38,
      "score": 10.0,
      "candidate": "if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n == 3:\n        return 3\n\n    largest = 3\n    for i in range(4, n, 2):\n        if n % i == 0:\n            largest = max(largest, i)\n    return largest\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 39,
      "score": 10.0,
      "candidate": "return max(n, 1)\n\n\nif __name__ == '__main__':\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 40,
      "score": 10.0,
      "candidate": "largest_divisor = n\n    for divisor in range(2, n):\n        if n % divisor == 0:\n            largest_divisor = divisor\n    return largest_divisor\n\n\ndef largest_divisor_2(n: int) -> int:\n    \"\"\" For a given number n, find the largest number that divides n evenly, smaller than n\n    >>> largest_divisor_2(15)\n    5\n    \"\"\"\n    largest_divisor = n\n    for divisor in range(2, n):\n        if n % divisor == 0:\n            largest_divisor = divisor\n    return largest_divisor\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 41,
      "score": 10.0,
      "candidate": "return max(n, 1)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 42,
      "score": 10.0,
      "candidate": "largest_divisor_number = 0\n    for divisor in range(1, n + 1):\n        if n % divisor == 0:\n            largest_divisor_number = divisor\n            break\n    return largest_divisor_number\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 43,
      "score": 10.0,
      "candidate": "largest = 0\n    for divisor in range(2, n + 1):\n        if n % divisor == 0:\n            largest = divisor\n    return largest\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 44,
      "score": 10.0,
      "candidate": "return max(1, int(n/2))\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 45,
      "score": 10.0,
      "candidate": "largest = 1\n    for i in range(1, n):\n        if n % i == 0:\n            largest = i\n    return largest\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 46,
      "score": 10.0,
      "candidate": "for i in range(2, n):\n        if n % i == 0:\n            return i\n    return n\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 47,
      "score": 10.0,
      "candidate": "max_divisor = 0\n\n    for i in range(1, n + 1):\n        if n % i == 0:\n            max_divisor = i\n\n    return max_divisor\n\n\ndef largest_divisor_iterative(n: int) -> int:\n    \"\"\" For a given number n, find the largest number that divides n evenly, smaller than n\n    >>> largest_divisor_iterative(15)\n    5\n    \"\"\"\n    max_divisor = 0\n\n    for i in range(1, n + 1):\n        if n % i == 0:\n            max_divisor = i\n\n    return max_divisor\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 48,
      "score": 10.0,
      "candidate": "return max(n, 1)\n\n\nif __name__ == '__main__':\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 49,
      "score": 10.0,
      "candidate": "return max(n - 1, 1)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 50,
      "score": 9.0,
      "candidate": "max = n\n    for i in range(2, n):\n        if n % i == 0:\n            max = i\n    return max\n\n\nif __name__ == '__main__':\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 51,
      "score": 9.0,
      "candidate": "max_num = n\n    for num in range(2, n):\n        if n % num == 0:\n            max_num = num\n    return max_num\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 52,
      "score": 9.0,
      "candidate": "if n <= 1:\n        return 0\n    else:\n        largest = n\n        for i in range(2, n):\n            if n % i == 0:\n                largest = i\n        return largest"
    },
    {
      "rank": 53,
      "score": 9.0,
      "candidate": "return max(n - 1, 1)\n\n\nif __name__ == '__main__':\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 54,
      "score": 9.0,
      "candidate": "largest = 0\n    for i in range(1, n):\n        if n % i == 0:\n            largest = i\n    return largest\n\n\nif __name__ == '__main__':\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 55,
      "score": 9.0,
      "candidate": "largest_divisor_value = 0\n    for divisor in range(1, n):\n        if n % divisor == 0:\n            largest_divisor_value = divisor\n    return largest_divisor_value\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 56,
      "score": 9.0,
      "candidate": "for i in range(1, n):\n        if n % i == 0:\n            return i\n    return n\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 57,
      "score": 9.0,
      "candidate": "result = 1\n    for i in range(2, n):\n        if n % i == 0:\n            result = i\n    return result\n\n\nif __name__ == '__main__':\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 58,
      "score": 9.0,
      "candidate": "max_divisor = n\n    for divisor in range(2, int(n ** 0.5) + 1):\n        if n % divisor == 0:\n            max_divisor = divisor\n            break\n    return max_divisor\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 59,
      "score": 9.0,
      "candidate": "largest = n\n    for i in range(1, n):\n        if n % i == 0:\n            largest = max(largest, i)\n    return largest"
    },
    {
      "rank": 60,
      "score": 8.0,
      "candidate": "largest = 1\n    while n % largest!= 0:\n        largest += 1\n    return largest\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 61,
      "score": 8.0,
      "candidate": "if n == 0:\n        return 0\n    largest = n\n    for i in range(2, n):\n        if n % i == 0:\n            largest = max(largest, i)\n    return largest\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 62,
      "score": 8.0,
      "candidate": "largest = n\n    for i in range(1, n):\n        if n % i == 0:\n            largest = i\n    return largest"
    },
    {
      "rank": 63,
      "score": 8.0,
      "candidate": "largest_number = 0\n    for divisor in range(1, n+1):\n        if n % divisor == 0:\n            largest_number = divisor\n            break\n    return largest_number"
    },
    {
      "rank": 64,
      "score": 8.0,
      "candidate": "largest = n\n    for i in range(2, n):\n        if n % i == 0:\n            largest = i\n    return largest\n\n\ndef largest_divisor_recursive(n: int) -> int:\n    \"\"\" For a given number n, find the largest number that divides n evenly, smaller than n\n    >>> largest_divisor_recursive(15)\n    5\n    \"\"\"\n    if n < 2:\n        return n\n    else:\n        return max(n % i for i in range(2, n))\n\n\ndef largest_divisor_iterative(n: int) -> int:\n    \"\"\" For a given number n, find the largest number that divides n evenly, smaller than n\n    >>> largest_divisor_iterative(15)\n    5\n    \"\"\"\n    largest = n\n    for i in range(2, n):\n        if n % i == 0:\n            largest = i\n    return largest"
    },
    {
      "rank": 65,
      "score": 8.0,
      "candidate": "largest = n\n    for i in range(2, n + 1):\n        if n % i == 0:\n            largest = max(largest, i)\n    return largest\n\n\nif __name__ == '__main__':\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 66,
      "score": 8.0,
      "candidate": "if n < 0:\n        raise ValueError(\"Negative numbers are not supported\")\n\n    if n == 0:\n        return 0\n\n    # check for odd number\n    if n % 2 == 0:\n        return n\n\n    # check for even number\n    for i in range(3, int(n ** 0.5) + 1, 2):\n        if n % i == 0:\n            return i\n\n    return n\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 67,
      "score": 8.0,
      "candidate": "max_divisor = 1\n    for i in range(1, n+1):\n        if n % i == 0:\n            max_divisor = i\n    return max_divisor\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 68,
      "score": 8.0,
      "candidate": "for divisor in range(1, n + 1):\n        if n % divisor == 0:\n            return divisor\n    return n\n\n\ndef largest_divisor_2(n: int) -> int:\n    \"\"\" For a given number n, find the largest number that divides n evenly, smaller than n\n    >>> largest_divisor_2(15)\n    5\n    \"\"\"\n    for divisor in range(1, n + 1):\n        if n % divisor == 0:\n            return divisor\n    return n"
    },
    {
      "rank": 69,
      "score": 8.0,
      "candidate": "divisor = 2\n    while divisor <= n:\n        if n % divisor == 0:\n            return divisor\n        divisor += 1\n    return n"
    },
    {
      "rank": 70,
      "score": 8.0,
      "candidate": "if n < 0:\n        raise ValueError(\"n must be non-negative\")\n    elif n == 0:\n        return 0\n    else:\n        return 1 + max(largest_divisor(n // 2), largest_divisor(n // 3))"
    },
    {
      "rank": 71,
      "score": 8.0,
      "candidate": "largest = n\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            largest = max(largest, i)\n    return largest\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 72,
      "score": 8.0,
      "candidate": "if n <= 1:\n        return n\n    return max(n, 1) + largest_divisor(n - 1)\n\n\ndef largest_divisor_recursive(n: int) -> int:\n    \"\"\" For a given number n, find the largest number that divides n evenly, smaller than n\n    >>> largest_divisor_recursive(15)\n    5\n    \"\"\"\n    if n <= 1:\n        return n\n    return max(n, 1) + largest_divisor_recursive(n - 1)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 73,
      "score": 8.0,
      "candidate": "largest = n\n    for i in range(1, n + 1):\n        if n % i == 0:\n            largest = i\n    return largest"
    },
    {
      "rank": 74,
      "score": 8.0,
      "candidate": "if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    return max(1, n % 2)\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 75,
      "score": 8.0,
      "candidate": "if n < 0:\n        return -1\n    elif n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n % 2 == 0:\n        return 2\n    else:\n        return max(largest_divisor(n // 2), largest_divisor(n // 2) + 1)\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 76,
      "score": 8.0,
      "candidate": "if n == 1:\n        return 1\n    return max(n // d for d in range(1, n + 1))\n\n\nif __name__ == '__main__':\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 77,
      "score": 8.0,
      "candidate": "largest = n\n    for i in range(1, n + 1):\n        if n % i == 0:\n            largest = max(largest, i)\n    return largest\n\n\nif __name__ == \"__main__\":\n    print(largest_divisor(15))"
    },
    {
      "rank": 78,
      "score": 8.0,
      "candidate": "return max(n, 1)\n\n\nif __name__ == '__main__':\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 79,
      "score": 8.0,
      "candidate": "largest = n\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            largest = i\n    return largest\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 80,
      "score": 8.0,
      "candidate": "largest = 1\n    for i in range(2, n):\n        if n % i == 0:\n            largest = max(largest, i)\n    return largest\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 81,
      "score": 8.0,
      "candidate": "largest_divisor_number = n\n    largest_divisor_number = max(n, largest_divisor_number)\n    largest_divisor_number = min(n, largest_divisor_number)\n    return largest_divisor_number\n\n\nif __name__ == \"__main__\":\n    n = int(input())\n    print(largest_divisor(n))"
    },
    {
      "rank": 82,
      "score": 8.0,
      "candidate": "largest = n\n    for i in range(1, n + 1):\n        if n % i == 0:\n            largest = i\n    return largest\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 83,
      "score": 8.0,
      "candidate": "largest_number = 0\n    for divisor in range(1, n + 1):\n        if n % divisor == 0:\n            largest_number = divisor\n    return largest_number\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 84,
      "score": 8.0,
      "candidate": "largest = 0\n    while n > 1:\n        if n % 2 == 0:\n            largest = max(largest, n)\n        n = n // 2\n    return largest\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 85,
      "score": 8.0,
      "candidate": "if n < 2:\n        return n\n    if n % 2 == 0:\n        return n // 2\n    return largest_divisor(n // 2)"
    },
    {
      "rank": 86,
      "score": 8.0,
      "candidate": "max_divisor = n\n    for i in range(1, n+1):\n        if n % i == 0:\n            max_divisor = max(max_divisor, i)\n    return max_divisor\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 87,
      "score": 8.0,
      "candidate": "if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n == 3:\n        return 3\n\n    # use a loop to iterate over the range of n to find the largest divisor\n    for i in range(3, int(n ** 0.5) + 1, 2):\n        if n % i == 0:\n            return i\n    return n\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 88,
      "score": 8.0,
      "candidate": "divisor = 1\n    while divisor < n:\n        if n % divisor == 0:\n            return divisor\n        divisor += 1\n    return 0\n\n\ndef largest_divisor_fast(n: int) -> int:\n    \"\"\" For a given number n, find the largest number that divides n evenly, smaller than n\n    >>> largest_divisor_fast(15)\n    5\n    \"\"\"\n    if n == 0:\n        return 0\n\n    i = 2\n    while i * i <= n:\n        if n % i == 0:\n            return i\n        i += 1\n    return 0\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 89,
      "score": 8.0,
      "candidate": "largest_divisor_number = n\n    for i in range(2, n):\n        if n % i == 0:\n            largest_divisor_number = max(largest_divisor_number, i)\n    return largest_divisor_number"
    },
    {
      "rank": 90,
      "score": 8.0,
      "candidate": "return max(1, n // 2)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 91,
      "score": 8.0,
      "candidate": "if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 3\n    elif n % 2 == 0:\n        return 2\n    elif n % 3 == 0:\n        return 3\n    else:\n        return n\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 92,
      "score": 8.0,
      "candidate": "if n <= 1:\n        return 0\n    else:\n        return max(map(lambda x: x//n, range(1, n+1)))\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 93,
      "score": 8.0,
      "candidate": "if n <= 1:\n        return n\n\n    largest = 0\n    for divisor in range(2, n + 1):\n        if n % divisor == 0:\n            largest = divisor\n            break\n\n    return largest\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 94,
      "score": 8.0,
      "candidate": "max_divisor = n\n    for divisor in range(2, n):\n        if n % divisor == 0:\n            max_divisor = max(max_divisor, divisor)\n\n    return max_divisor\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 95,
      "score": 8.0,
      "candidate": "if n < 1:\n        return 0\n    if n == 1:\n        return 1\n    if n % 2 == 0:\n        return 2\n    for i in range(3, int(n ** 0.5) + 1, 2):\n        if n % i == 0:\n            return i\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 96,
      "score": 1.0,
      "candidate": "if n < 0:\n        return -1\n    elif n == 0:\n        return 0\n    elif n % 2 == 0:\n        return 2\n    elif n % 2 == 1:\n        return 1\n    else:\n        for i in range(3, int(n**0.5)+1, 2):\n            if n % i == 0:\n                return i"
    },
    {
      "rank": 97,
      "score": 1.0,
      "candidate": "largest = n\n    for i in range(1, n):\n        if n % i == 0:\n            largest = max(largest, i)\n    return largest\n\n\nif __name__ == \"__main__\":\n    print(largest_divisor(15))"
    },
    {
      "rank": 98,
      "score": 1.0,
      "candidate": "return max(1, n // 2)\n\n\ndef largest_divisor_iterative(n: int) -> int:\n    \"\"\" For a given number n, find the largest number that divides n evenly, smaller than n\n    >>> largest_divisor_iterative(15)\n    5\n    \"\"\"\n    largest_divisor = 1\n    for i in range(2, n // 2 + 1):\n        if n % i == 0:\n            largest_divisor = i\n            break\n    return largest_divisor"
    },
    {
      "rank": 99,
      "score": 1.0,
      "candidate": "return max(2, n - 1)\n\n\ndef smallest_divisor(n: int) -> int:\n    \"\"\" For a given number n, find the smallest number that divides n evenly, smaller than n\n    >>> smallest_divisor(15)\n    5\n    \"\"\"\n    return min(2, n - 1)"
    },
    {
      "rank": 100,
      "score": 1.0,
      "candidate": "if n < 0:\n        raise ValueError('n must be non-negative')\n    elif n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 5\n    elif n == 4:\n        return 7\n    elif n == 5:\n        return 11\n    elif n == 6:\n        return 13\n    elif n == 7:\n        return 17\n    elif n == 8:\n        return 19\n    elif n == 9:\n        return 23\n    elif n == 10:\n        return 29\n    elif n == 11:\n        return 31\n    elif n == 12:\n        return 37\n    elif n == 13:\n        return 41\n    elif n == 14:\n        return 53\n    elif n == 15:\n        return 61\n    elif n == 16:\n        return 71\n    elif n == 17:\n        return 73\n    elif n == 18:\n        return 79\n    elif n == 19:\n        return 81\n    elif n == 20:\n        return 83\n    elif n == 21:\n        return 84\n    elif n == 22:\n        return 85\n    elif n == 23:\n        return 86\n    elif n == 24:\n        return 88\n    elif n == 25:\n        return 89\n    elif n == 26:\n        return 92\n    elif n == 27:\n        return 95\n    elif n == 28:\n        return 100\n    elif n == 29:\n        return 101\n    elif n == 30:\n        return 102\n    elif n == 31:\n        return 103\n    elif n == 32:\n        return 104\n    elif n == 33:\n        return 105\n    elif n == 34:\n        return 106\n    elif n == 35:\n        return 107\n    elif n == 36:\n        return 108\n    elif n == 37:\n        return 109\n    elif n == 38:\n        return 110\n    elif n == 39:\n        return 111\n    elif n == 40:\n        return 112\n    elif n == 41:\n        return 113\n    elif n == 42:\n        return 114\n    elif n == 43:\n        return 115\n    elif n"
    }
  ]
}