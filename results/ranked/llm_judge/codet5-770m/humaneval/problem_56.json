{
  "timestamp": "2025-09-14T11:40:31.298059",
  "method": "improved_llm_judge",
  "judge_model": "codellama/CodeLlama-7b-Python-hf",
  "target_model": "codet5-770m",
  "dataset": "humaneval",
  "problem_number": 56,
  "total_candidates": 100,
  "results": [
    {
      "rank": 1,
      "score": 10.0,
      "candidate": "opening_brackets = {\"(\": \")\", \"[\": \"]\", \"{\": \"}\"}\n    closing_brackets = {\")\": \"(\", \"]\": \"[\", \"}\": \"{\"}\n    stack = []\n    for b in brackets:\n        if b in opening_brackets:\n            stack.append(b)\n        elif b in closing_brackets:\n            if len(stack) == 0:\n                return False\n            if opening_brackets[b]!= closing_brackets[stack.pop():]:\n                return False\n    return len(stack) == 0\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 2,
      "score": 10.0,
      "candidate": "opening_brackets = {\"<\": \"(\", \">\": \")\"}\n    closing_brackets = {\"(\": \")\", \")\": \"(\"}\n    for bracket in brackets:\n        if bracket in opening_brackets:\n            if opening_brackets[bracket] == closing_brackets[bracket]:\n                continue\n            return False\n    return True\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 3,
      "score": 10.0,
      "candidate": "stack = []\n    for char in brackets:\n        if char == \"(\":\n            stack.append(char)\n        elif char == \")\":\n            if not stack:\n                return False\n            else:\n                top = stack.pop()\n                if top!= \"(\":\n                    return False\n    if not stack:\n        return True\n    else:\n        return False\n\n\ndef correct_bracketing_recursive(brackets: str):\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing_recursive(\"<\")\n    False\n    >>> correct_bracketing_recursive(\"<>\")\n    True\n    >>> correct_bracketing_recursive(\"<<><>>\")\n    True\n    >>> correct_bracketing_recursive(\"><<>\")\n    False\n    \"\"\"\n    stack = []\n    for char in brackets:\n        if char == \"(\":\n            stack.append(char)\n        elif char == \")\":\n            if not stack:\n                return False\n            else:\n                top = stack.pop()\n                if top!= \"(\":\n                    return False\n        elif char == \"<\":\n            if not stack:\n                return False\n            else:\n                top = stack.pop()\n                if top!= \"<\":\n                    return False\n        elif char == \">\":\n            if not stack:\n                return False\n            else:\n                top = stack.pop()\n                if top!= \">\":\n                    return False\n    if not stack:\n        return True\n    else:\n        return False\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 4,
      "score": 10.0,
      "candidate": "stack = []\n\n    for bracket in brackets:\n        if bracket == \"<\" or bracket == \">\":\n            stack.append(bracket)\n        elif not stack or stack.pop()!= bracket:\n            return False\n\n    return not stack\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 5,
      "score": 10.0,
      "candidate": "stack = []\n    for bracket in brackets:\n        if bracket == \"(\":\n            stack.append(bracket)\n        elif bracket == \")\":\n            if len(stack) == 0:\n                return False\n            else:\n                if stack[-1] == \"(\":\n                    stack.pop()\n                else:\n                    return False\n    return len(stack) == 0\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 6,
      "score": 10.0,
      "candidate": "stack = []\n    for c in brackets:\n        if c == \"<\":\n            if stack:\n                stack.pop()\n        elif c == \">\":\n            if stack:\n                stack.pop()\n        else:\n            raise Exception(\"invalid brackets\")\n    return not stack\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 7,
      "score": 10.0,
      "candidate": "stack = []\n    for bracket in brackets:\n        if bracket == \"<\" or bracket == \">\":\n            stack.append(bracket)\n        else:\n            if not stack:\n                return False\n            if stack[-1] == bracket:\n                stack.pop()\n            else:\n                return False\n    return not stack\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 8,
      "score": 10.0,
      "candidate": "open_brackets = [\"<\", \"<>\"]\n    close_brackets = [\">\", \">\"]\n    open_bracket_count = 0\n    close_bracket_count = 0\n    for i in range(len(brackets)):\n        if brackets[i] == open_brackets[open_bracket_count]:\n            open_bracket_count += 1\n        elif brackets[i] == close_brackets[close_bracket_count]:\n            close_bracket_count += 1\n        else:\n            return False\n    return True\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 9,
      "score": 10.0,
      "candidate": "stack = []\n    for bracket in brackets:\n        if bracket == \"<\" and stack:\n            if stack[-1]!= \">\":\n                return False\n        elif bracket == \">\" and stack:\n            if stack[-1] == \"<\" and stack[-1]!= \"<\" and stack[-1]!= \">\":\n                return False\n        elif stack:\n            stack.pop()\n        else:\n            return False\n    return stack == []\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 10,
      "score": 10.0,
      "candidate": "opening_brackets = {\"(\": \")\", \"[\": \"]\", \"<\": \">\"}\n    closing_brackets = {\")\": \"(\", \"]\": \"[\", \"<\": \"<\"}\n    for bracket in brackets:\n        if bracket in opening_brackets:\n            opening_brackets[bracket] = closing_brackets[bracket]\n        elif bracket in closing_brackets:\n            closing_brackets[bracket] = opening_brackets[bracket]\n    return all(bracket in opening_brackets.values() for bracket in closing_brackets.values())\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 11,
      "score": 10.0,
      "candidate": "open_brackets = {\n        \"(\": \")\",\n        \"[\": \"]\",\n        \"{\": \"}\",\n        \"<\": \">\",\n    }\n    close_brackets = {\n        \")\": \"(\",\n        \"]\": \"[\",\n        \"}\": \"{\",\n        \">\": \"<\",\n    }\n    for bracket in brackets:\n        if bracket in open_brackets:\n            if bracket in close_brackets:\n                return False\n        if bracket in close_brackets:\n            if bracket in open_brackets:\n                return False\n    return True\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 12,
      "score": 10.0,
      "candidate": "if brackets == \"<>\":\n        return True\n    if brackets == \"<<\":\n        return True\n    if brackets == \">>\":\n        return True\n    if brackets == \">>\":\n        return True\n    return False\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 13,
      "score": 10.0,
      "candidate": "if not brackets:\n        return True\n\n    opening_bracket = None\n    closing_bracket = None\n\n    for bracket in brackets:\n        if bracket == \"<\" and not opening_bracket:\n            opening_bracket = bracket\n        elif bracket == \">\" and not closing_bracket:\n            closing_bracket = bracket\n        elif bracket == \"<\" and opening_bracket and opening_bracket!= closing_bracket:\n            return False\n        elif bracket == \">\" and closing_bracket and closing_bracket!= opening_bracket:\n            return False\n\n    return True\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 14,
      "score": 10.0,
      "candidate": "stack = []\n    for bracket in brackets:\n        if bracket == \">\":\n            if stack:\n                if stack[-1] == \">\":\n                    stack.pop()\n                else:\n                    return False\n            else:\n                return False\n        elif bracket == \"<\":\n            if stack:\n                if stack[-1] == \"<\":\n                    stack.pop()\n                else:\n                    return False\n            else:\n                return False\n        else:\n            stack.append(bracket)\n    return stack == []\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 15,
      "score": 10.0,
      "candidate": "return brackets.count(\"<\") == brackets.count(\">\")\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 16,
      "score": 10.0,
      "candidate": "if len(brackets) % 2!= 0:\n        return False\n    open_brackets = {\n        \"(\": \")\",\n        \"{\": \"}\",\n        \"[\": \"]\",\n    }\n    close_brackets = {\n        \"<\": \">\",\n        \">\": \"<\",\n        \"<>\": \">\",\n    }\n    for bracket in brackets:\n        if bracket not in open_brackets and bracket not in close_brackets:\n            return False\n    return True\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 17,
      "score": 10.0,
      "candidate": "stack = []\n    for char in brackets:\n        if char == \"<\":\n            stack.append(char)\n        elif char == \">\":\n            if len(stack) == 0:\n                return False\n            if stack[-1]!= \">\":\n                return False\n            stack.pop()\n    return len(stack) == 0\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 18,
      "score": 10.0,
      "candidate": "open_brackets = []\n    close_brackets = []\n    for bracket in brackets:\n        if bracket == \"<\":\n            open_brackets.append(bracket)\n        elif bracket == \">\":\n            close_brackets.append(bracket)\n        else:\n            if open_brackets and close_brackets:\n                if open_brackets[-1] == close_brackets[-1]:\n                    open_brackets.pop()\n                    close_brackets.pop()\n                else:\n                    return False\n    return open_brackets == [] and close_brackets == []\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 19,
      "score": 10.0,
      "candidate": "stack = []\n    for bracket in brackets:\n        if bracket == \"<\" or bracket == \">\":\n            stack.append(bracket)\n        elif not stack:\n            return False\n        elif stack[-1] == bracket:\n            stack.pop()\n        else:\n            return False\n    return not stack\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 20,
      "score": 10.0,
      "candidate": "opening_brackets = [0] * 2\n    for i in range(len(brackets)):\n        opening_brackets[brackets[i]] += 1\n    for i in range(len(brackets)):\n        if opening_brackets[brackets[i]] > 0:\n            return False\n    return True\n\n\ndef correct_bracketing2(brackets: str):\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing2(\"<\")\n    False\n    >>> correct_bracketing2(\"<>\")\n    True\n    >>> correct_bracketing2(\"<<><>>\")\n    True\n    >>> correct_bracketing2(\"><<>\")\n    False\n    \"\"\"\n    opening_brackets = {0}\n    for i in range(len(brackets)):\n        if brackets[i] in opening_brackets:\n            return False\n        opening_brackets.add(brackets[i])\n    return True\n\n\ndef correct_bracketing3(brackets: str):\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing3(\"<\")\n    False\n    >>> correct_bracketing3(\"<>\")\n    True\n    >>> correct_bracketing3(\"<<><>>\")\n    True\n    >>> correct_bracketing3(\"><<>\")\n    False\n    \"\"\"\n    opening_brackets = {0}\n    for i in range(len(brackets)):\n        if brackets[i] in opening_brackets:\n            return False\n        opening_brackets.add(brackets[i])\n    return True\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 21,
      "score": 10.0,
      "candidate": "stack = []\n\n    for bracket in brackets:\n        if bracket == \"(\":\n            stack.append(bracket)\n        elif bracket == \")\":\n            if stack:\n                if stack[-1]!= \"(\":\n                    return False\n            else:\n                return False\n\n    return stack == []\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 22,
      "score": 10.0,
      "candidate": "stack = []\n    for bracket in brackets:\n        if bracket == \"<\":\n            stack.append(bracket)\n        elif bracket == \">\":\n            if len(stack) == 0:\n                return False\n            else:\n                stack.pop()\n    return len(stack) == 0\n\n\ndef main():\n    import doctest\n\n    doctest.testmod()\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 23,
      "score": 10.0,
      "candidate": "opening_brackets = {\"(\": \")\", \"[\": \"]\", \"<\": \"<\"}\n    closing_brackets = {\")\": \"(\", \"]\": \"[\", \"<\": \"<\"}\n    for bracket in brackets:\n        if bracket in opening_brackets:\n            if opening_brackets[bracket] == closing_brackets[bracket]:\n                continue\n        else:\n            return False\n    return True\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 24,
      "score": 10.0,
      "candidate": "open_brackets = {\"(\": \")\", \"[\": \"]\", \"{\": \"}\", \"<\": \">\"}\n    close_brackets = {\")\": \"(\", \"]\": \"[\", \"}\": \"{\"}\n\n    for bracket in brackets:\n        if bracket in open_brackets:\n            if bracket in close_brackets:\n                return False\n        elif bracket in close_brackets:\n            if bracket not in open_brackets:\n                return False\n    return True\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 25,
      "score": 10.0,
      "candidate": "opening = {\n        \"<\" : \"{\",\n        \">\" : \"}\"\n    }\n    closing = {\n        \"{\" : \"}\",\n        \"}\" : \"<\"\n    }\n\n    if len(brackets) == 0:\n        return False\n\n    for bracket in brackets:\n        if bracket not in opening:\n            return False\n        if closing[bracket]!= opening[bracket]:\n            return False\n\n    return True\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 26,
      "score": 10.0,
      "candidate": "stack = []\n    for i in brackets:\n        if i == \"<\":\n            stack.append(i)\n        elif i == \">\":\n            if not stack:\n                return False\n            if stack[-1] == \"<\" and stack[-2] == \">\":\n                stack.pop()\n                stack.pop()\n            else:\n                return False\n    return not stack\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 27,
      "score": 10.0,
      "candidate": "stack = []\n    for char in brackets:\n        if char == \">\":\n            if stack:\n                if stack[-1] == \"<\" or stack[-1] == \"<\" or stack[-1] == \">\":\n                    return False\n            else:\n                return False\n        elif char == \"<\":\n            if stack:\n                if stack[-1] == \">\" or stack[-1] == \"<\" or stack[-1] == \">\":\n                    return False\n            else:\n                return False\n        else:\n            stack.append(char)\n    return True\n\n\ndef correct_bracketing2(brackets: str):\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing2(\"<\")\n    False\n    >>> correct_bracketing2(\"<>\")\n    True\n    >>> correct_bracketing2(\"<<><>>\")\n    True\n    >>> correct_bracketing2(\"><<>\")\n    False\n    \"\"\"\n    stack = []\n    for char in brackets:\n        if char == \">\":\n            if stack:\n                if stack[-1] == \"<\" or stack[-1] == \"<\" or stack[-1] == \">\":\n                    return False\n            else:\n                return False\n        elif char == \"<\":\n            if stack:\n                if stack[-1] == \">\" or stack[-1] == \"<\" or stack[-1] == \">\":\n                    return False\n            else:\n                return False\n        else:\n            stack.append(char)\n    return True\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 28,
      "score": 10.0,
      "candidate": "if not brackets:\n        return True\n\n    if brackets[0]!= \"<\" and brackets[-1]!= \">\":\n        return False\n\n    if brackets[0] == \"<\" and brackets[-1] == \">\":\n        return correct_bracketing(brackets[1:-1])\n    elif brackets[0] == \">\" and brackets[-1] == \"<\" or brackets[0] == \"<\" and brackets[-1] == \">\":\n        return correct_bracketing(brackets[1:-1])\n\n    return False\n\n\nif __name__ == \"__main__\":\n    print(correct_bracketing(\"<\"))\n    print(correct_bracketing(\"<>\"))\n    print(correct_bracketing(\"<<><>>\"))\n    print(correct_bracketing(\"><<>\"))\n    print(correct_bracketing(\"<\"))"
    },
    {
      "rank": 29,
      "score": 10.0,
      "candidate": "stack = []\n    for bracket in brackets:\n        if bracket == \">\":\n            if stack:\n                if stack[-1] == \"<\":\n                    return False\n                else:\n                    stack.pop()\n            else:\n                return False\n        elif bracket == \"<\":\n            if stack:\n                if stack[-1] == \">\":\n                    return False\n                else:\n                    stack.pop()\n            else:\n                return False\n        else:\n            stack.append(bracket)\n    return stack == []\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 30,
      "score": 10.0,
      "candidate": "opening_brackets = {\"(\": \")\", \"[\": \"]\", \"<\": \"}\"}\n    closing_brackets = {\")\": \"(\", \"]\": \"[\", \"}\": \"{\"}\n\n    for bracket in brackets:\n        if bracket in opening_brackets:\n            if opening_brackets[bracket]!= closing_brackets[bracket]:\n                return False\n        else:\n            if closing_brackets[bracket]!= opening_brackets[bracket]:\n                return False\n\n    return True\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 31,
      "score": 10.0,
      "candidate": "stack = []\n    for bracket in brackets:\n        if bracket == \"<\" or bracket == \">\":\n            stack.append(bracket)\n        elif len(stack) == 0:\n            return False\n        elif stack[-1] == bracket:\n            stack.pop()\n        else:\n            return False\n    return len(stack) == 0\n\n\ndef correct_bracketing_recursive(brackets: str):\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing_recursive(\"<\")\n    False\n    >>> correct_bracketing_recursive(\"<>\")\n    True\n    >>> correct_bracketing_recursive(\"<<><>>\")\n    True\n    >>> correct_bracketing_recursive(\"><<>\")\n    False\n    \"\"\"\n    stack = []\n    for bracket in brackets:\n        if bracket == \"<\" or bracket == \">\":\n            stack.append(bracket)\n        elif len(stack) == 0:\n            return False\n        elif stack[-1] == bracket:\n            stack.pop()\n        else:\n            return False\n    return len(stack) == 0\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 32,
      "score": 10.0,
      "candidate": "brackets_stack = []\n    for bracket in brackets:\n        if bracket == \">\":\n            brackets_stack.pop()\n        elif bracket == \"<\":\n            brackets_stack.append(bracket)\n        else:\n            if len(brackets_stack) == 0:\n                return False\n            if brackets_stack[-1] == \"<\" and brackets_stack[-2] == \">\":\n                brackets_stack.pop()\n            elif brackets_stack[-1] == \">\" and brackets_stack[-2] == \"<\":\n                brackets_stack.pop()\n            elif brackets_stack[-1] == \"<\" and brackets_stack[-2] == \">\":\n                brackets_stack.pop()\n    return len(brackets_stack) == 0\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 33,
      "score": 10.0,
      "candidate": "if brackets == \"\":\n        return True\n    stack = []\n    for bracket in brackets:\n        if bracket == \"<\":\n            stack.append(bracket)\n        elif bracket == \">\":\n            if stack:\n                if stack[-1] == \">\":\n                    stack.pop()\n                else:\n                    return False\n            else:\n                return False\n    return stack == []\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 34,
      "score": 10.0,
      "candidate": "stack = []\n\n    for bracket in brackets:\n        if bracket == \"<\":\n            if stack:\n                stack.pop()\n        elif bracket == \">\":\n            if stack:\n                stack.pop()\n        else:\n            raise ValueError(f\"Unexpected bracket: {bracket}\")\n\n    return not stack"
    },
    {
      "rank": 35,
      "score": 10.0,
      "candidate": "if brackets == \"\":\n        return True\n    if brackets[0] == \"<\":\n        return correct_bracketing(brackets[1:])\n    if brackets[0] == \">\":\n        return correct_bracketing(brackets[1:])\n    return False\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 36,
      "score": 10.0,
      "candidate": "stack = []\n    for c in brackets:\n        if c == \"<\" or c == \">\":\n            stack.append(c)\n        elif c == \"(\" or c == \"[\" or c == \"{\" or c == \"<>\":\n            if stack:\n                stack.pop()\n            else:\n                return False\n    return stack\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 37,
      "score": 10.0,
      "candidate": "if len(brackets) == 0:\n        return True\n    if brackets[0] == \"<\":\n        return correct_bracketing(brackets[1:])\n    return correct_bracketing(brackets[1:]) or correct_bracketing(brackets[0:-1])\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 38,
      "score": 10.0,
      "candidate": "stack = []\n    for bracket in brackets:\n        if bracket == \"<\" or bracket == \">\":\n            stack.append(bracket)\n        elif len(stack) == 0:\n            return False\n        elif stack[-1] == \"<\" and bracket == \">\":\n            stack.pop()\n        elif stack[-1] == \">\" and bracket == \"<\" and stack[-2] == \"<\":\n            stack.pop()\n        else:\n            return False\n    return len(stack) == 0"
    },
    {
      "rank": 39,
      "score": 10.0,
      "candidate": "opening = {\"(\": \")\", \"{\": \"}\", \"<\": \">\"}\n    closing = {\")\": \"(\", \"}\": \"{\", \"<\": \"<\"}\n    for bracket in brackets:\n        if bracket not in opening or opening[bracket]!= closing[bracket]:\n            return False\n    return True\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 40,
      "score": 10.0,
      "candidate": "opening = {\"(\": \")\", \"[\": \"]\", \"{\": \"}\"}\n    closing = {\")\": \"(\", \"]\": \"[\", \"}\": \"{\"}\n    stack = []\n    for bracket in brackets:\n        if bracket in opening.keys():\n            stack.append(bracket)\n        elif bracket in closing.keys():\n            if len(stack) > 0 and opening[stack.pop()] == bracket:\n                continue\n            return False\n    return len(stack) == 0"
    },
    {
      "rank": 41,
      "score": 10.0,
      "candidate": "if brackets == \"\":\n        return True\n    if brackets[0] == \"<\" and brackets[-1] == \">\":\n        return correct_bracketing(brackets[1:-1])\n    return False\n\n\ndef correct_bracketing2(brackets: str):\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing2(\"<\")\n    False\n    >>> correct_bracketing2(\"<>\")\n    True\n    >>> correct_bracketing2(\"<<><>>\")\n    True\n    >>> correct_bracketing2(\"><<>\")\n    False\n    \"\"\"\n    if brackets == \"\":\n        return True\n    if brackets[0] == \"<\" and brackets[-1] == \">\":\n        return correct_bracketing2(brackets[1:-1])\n    return False\n\n\ndef correct_bracketing3(brackets: str):\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing3(\"<\")\n    False\n    >>> correct_bracketing3(\"<>\")\n    True\n    >>> correct_bracketing3(\"<<><>>\")\n    True\n    >>> correct_bracketing3(\"><<>\")\n    False\n    \"\"\"\n    if brackets == \"\":\n        return True\n    if brackets[0] == \"<\" and brackets[-1] == \">\":\n        return correct_bracketing3(brackets[1:-1])\n    return False\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 42,
      "score": 10.0,
      "candidate": "opening_brackets = []\n    closing_brackets = []\n    for bracket in brackets:\n        if bracket == \"<\":\n            opening_brackets.append(bracket)\n        elif bracket == \">\":\n            closing_brackets.append(bracket)\n\n    return (len(opening_brackets) == 0) and (len(closing_brackets) == 0)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 43,
      "score": 10.0,
      "candidate": "stack = []\n    for char in brackets:\n        if char == \"<\":\n            stack.append(char)\n        else:\n            if stack and stack[-1] == \">\":\n                stack.pop()\n            else:\n                return False\n    return stack == []\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 44,
      "score": 10.0,
      "candidate": "stack = []\n    for b in brackets:\n        if b == \"<\" or b == \">\":\n            stack.append(b)\n        elif b == \"<\":\n            if len(stack) == 0:\n                return False\n            elif stack[-1] == \">\":\n                stack.pop()\n            else:\n                return False\n    return len(stack) == 0\n\n\ndef correct_bracketing_recursive(brackets: str):\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing_recursive(\"<\")\n    False\n    >>> correct_bracketing_recursive(\"<>\")\n    True\n    >>> correct_bracketing_recursive(\"<<><>>\")\n    True\n    >>> correct_bracketing_recursive(\"><<>\")\n    False\n    \"\"\"\n    if len(brackets) == 0:\n        return True\n    elif brackets[0] == \"<\" or brackets[0] == \">\":\n        return correct_bracketing_recursive(brackets[1:])\n    elif brackets[0] == \"<\":\n        return correct_bracketing_recursive(brackets[1:]) or correct_bracketing_recursive(brackets[1:-1])\n    elif brackets[0] == \">\":\n        return correct_bracketing_recursive(brackets[1:]) or correct_bracketing_recursive(brackets[1:-1])\n    else:\n        return False\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 45,
      "score": 10.0,
      "candidate": "opening_brackets = {\"(\": \")\", \"[\": \"]\", \"<\": \"<\"}\n    closing_brackets = {\")\": \"(\", \"]\": \"[\", \"<\": \"<\"}\n    return all(opening_brackets[bracket] == closing_brackets[bracket] for bracket in brackets)\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 46,
      "score": 10.0,
      "candidate": "opening_brackets = [\"(\", \"[\", \"{\"]\n    closing_brackets = [\")\", \"]\", \"}\"]\n\n    if brackets == \"\":\n        return True\n\n    for bracket in brackets:\n        if bracket in opening_brackets:\n            if brackets.count(bracket) == 1:\n                return True\n        if bracket in closing_brackets:\n            if brackets.count(bracket) == -1:\n                return True\n    return False"
    },
    {
      "rank": 47,
      "score": 10.0,
      "candidate": "brackets_list = [{\"<\": \"<\", \">\": \">\"}[b] for b in brackets]\n    if brackets_list.count(\"<\")!= brackets_list.count(\">\"):\n        return False\n    else:\n        return True\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 48,
      "score": 10.0,
      "candidate": "if len(brackets) % 2!= 0:\n        return False\n    opening = 0\n    closing = 0\n    for bracket in brackets:\n        if bracket == \"<\" or bracket == \">\":\n            opening += 1\n        elif bracket == \"<\":\n            closing += 1\n        elif bracket == \">\":\n            opening -= 1\n    return opening == 0 and closing == 0\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 49,
      "score": 10.0,
      "candidate": "open_brackets = {\"(\", \"[\", \"{\", \"<\", \">\"}\n    close_brackets = {\")\", \"]\", \"}\", \">\", \"<\"}\n    return all([open_brackets.issubset(bracket) for bracket in brackets])\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 50,
      "score": 10.0,
      "candidate": "stack = []\n    for c in brackets:\n        if c == \"<\":\n            stack.append(c)\n        elif c == \">\":\n            if stack:\n                if stack[-1] == \"<\":\n                    stack.pop()\n                else:\n                    return False\n            else:\n                return False\n    if stack:\n        return False\n    return True\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 51,
      "score": 10.0,
      "candidate": "if len(brackets) <= 0:\n        return True\n    open_brackets = [\"<\", \"<>\"]\n    close_brackets = [\">\", \">\"]\n    for bracket in brackets:\n        if bracket in open_brackets:\n            open_brackets.remove(bracket)\n        if bracket in close_brackets:\n            close_brackets.remove(bracket)\n    return len(open_brackets) == 0 and len(close_brackets) == 0\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 52,
      "score": 10.0,
      "candidate": "stack = []\n    for bracket in brackets:\n        if bracket == \"(\":\n            stack.append(bracket)\n        elif bracket == \")\":\n            if not stack:\n                return False\n            else:\n                if stack[-1] == \"(\":\n                    stack.pop()\n                else:\n                    return False\n    if not stack:\n        return True\n    else:\n        return False\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 53,
      "score": 10.0,
      "candidate": "if len(brackets) == 0:\n        return False\n    if len(brackets) == 1:\n        return True\n\n    # create a dictionary to store opening and closing brackets\n    opening_brackets = {\"(\": \")\", \"[\": \"]\", \"{\": \"}\"}\n    closing_brackets = {\")\": \"(\", \"]\": \"[\", \"}\": \"{\"}\n    brackets_dict = {\"(\": \")\", \"[\": \"]\", \"{\": \"}\"}\n\n    # iterate over brackets and check if they match\n    for bracket in brackets:\n        if bracket not in opening_brackets.keys():\n            return False\n        if opening_brackets[bracket]!= closing_brackets[bracket]:\n            return False\n\n    return True\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 54,
      "score": 10.0,
      "candidate": "stack = []\n    for char in brackets:\n        if char == \"<\" or char == \">\":\n            if not stack:\n                return False\n            elif stack[-1] == char:\n                stack.pop()\n            else:\n                return False\n        else:\n            stack.append(char)\n    return not stack\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 55,
      "score": 10.0,
      "candidate": "opening_brackets = {\"(\": \")\", \"[\": \"]\", \"{\": \"}\"}\n    closing_brackets = {\"(\": \")\", \"[\": \"]\", \"{\": \"}\"}\n    for bracket in brackets:\n        if bracket not in opening_brackets.values():\n            return False\n        elif bracket not in closing_brackets.values():\n            return False\n    return True\n\n\ndef correct_bracketing_2(brackets: str):\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing_2(\"<\")\n    False\n    >>> correct_bracketing_2(\"<>\")\n    True\n    >>> correct_bracketing_2(\"<<><>>\")\n    True\n    >>> correct_bracketing_2(\"><<>\")\n    False\n    \"\"\"\n    opening_brackets = {\"(\": \")\", \"[\": \"]\", \"{\": \"}\"}\n    closing_brackets = {\"(\": \")\", \"[\": \"]\", \"{\": \"}\"}\n    for bracket in brackets:\n        if bracket not in opening_brackets.values():\n            return False\n        elif bracket not in closing_brackets.values():\n            return False\n    return True\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 56,
      "score": 10.0,
      "candidate": "open_brackets = ['<', '>']\n    close_brackets = ['<', '>']\n    for bracket in brackets:\n        if bracket in open_brackets:\n            open_brackets.remove(bracket)\n        elif bracket in close_brackets:\n            close_brackets.remove(bracket)\n    return len(open_brackets) == 0 and len(close_brackets) == 0\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 57,
      "score": 10.0,
      "candidate": "stack = []\n    for bracket in brackets:\n        if bracket == \"<\" and len(stack) > 0:\n            if stack[-1] == \">\":\n                return False\n            stack.pop()\n        elif bracket == \">\" and len(stack) > 0:\n            if stack[-1] == \"<\" and stack[-2] == \">\":\n                return False\n            stack.pop()\n        elif bracket == \"<\":\n            if stack and stack[-1] == \"<\" and stack[-2] == \">\":\n                return False\n            stack.pop()\n        elif bracket == \">\" and len(stack) > 0:\n            if stack[-1] == \"<\" and stack[-2] == \"<\":\n                return False\n            stack.pop()\n        elif bracket == \"<\":\n            if stack and stack[-1] == \">\" and stack[-2] == \"<\":\n                return False\n            stack.pop()\n        else:\n            stack.append(bracket)\n    return len(stack) == 0\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 58,
      "score": 10.0,
      "candidate": "stack = []\n    for char in brackets:\n        if char == \"<\":\n            stack.append(char)\n        elif char == \">\":\n            if not stack:\n                return False\n            if stack[-1]!= \"<\" and stack[-1]!= \">\":\n                return False\n            stack.pop()\n    if not stack:\n        return True\n    return False\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 59,
      "score": 10.0,
      "candidate": "brackets_stack = []\n    for bracket in brackets:\n        if bracket == \"<\" or bracket == \">\":\n            brackets_stack.append(bracket)\n        else:\n            if len(brackets_stack)!= 0:\n                previous_bracket = brackets_stack.pop()\n                if previous_bracket!= bracket:\n                    return False\n    return len(brackets_stack) == 0\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 60,
      "score": 10.0,
      "candidate": "if brackets == \"\":\n        return True\n    if brackets[0] == \"<\" or brackets[0] == \"<=\":\n        return correct_bracketing(brackets[1:])\n    if brackets[0] == \">\" or brackets[0] == \">=\":\n        return correct_bracketing(brackets[1:])\n    return False\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 61,
      "score": 10.0,
      "candidate": "if len(brackets) < 2:\n        return True\n\n    opening = {}\n    closing = {}\n    for bracket in brackets:\n        opening[bracket] = opening.get(bracket, 0) + 1\n        closing[bracket] = closing.get(bracket, 0) + 1\n\n    if opening == closing:\n        return True\n    return False\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 62,
      "score": 10.0,
      "candidate": "if len(brackets) == 0:\n        return True\n    elif len(brackets) == 1:\n        return brackets[0] == \"<\"\n    elif len(brackets) == 2:\n        return brackets[0] == \"<\" and brackets[1] == \">\"\n    elif len(brackets) == 3:\n        return brackets[0] == \"<\" and brackets[1] == \"<\" and brackets[2] == \">\"\n    elif len(brackets) == 4:\n        return brackets[0] == \"<\" and brackets[1] == \"<\" and brackets[2] == \"<\" and brackets[3] == \">\"\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 63,
      "score": 10.0,
      "candidate": "open_brackets = {\n        \"(\": \")\",\n        \"[\": \"]\",\n        \"{\": \"}\",\n    }\n\n    close_brackets = {\n        \")\": \"(\",\n        \"]\": \"[\",\n        \"}\": \"{\"\n    }\n\n    for bracket in brackets:\n        if bracket in open_brackets:\n            if bracket not in close_brackets:\n                return False\n        elif bracket in close_brackets:\n            if bracket not in open_brackets:\n                return False\n\n    return True\n\n\ndef correct_bracketing2(brackets: str):\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n    open_brackets = {\n        \"(\": \")\",\n        \"[\": \"]\",\n        \"{\": \"}\",\n    }\n\n    close_brackets = {\n        \")\": \"(\",\n        \"]\": \"[\",\n        \"}\": \"{\"\n    }\n\n    for bracket in brackets:\n        if bracket in open_brackets:\n            if bracket not in close_brackets:\n                return False\n        elif bracket in close_brackets:\n            if bracket not in open_brackets:\n                return False\n\n    return True\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 64,
      "score": 10.0,
      "candidate": "stack = []\n    for bracket in brackets:\n        if bracket == \"<\":\n            if stack:\n                stack.pop()\n            else:\n                return False\n        elif bracket == \">\":\n            if stack:\n                stack.pop()\n            else:\n                return False\n        else:\n            stack.append(bracket)\n    return not stack\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 65,
      "score": 10.0,
      "candidate": "if len(brackets) < 2:\n        return True\n\n    opening_brackets = {\"(\": \")\", \"[\": \"]\", \"<\": \"}\", \"<=\": \">=\"}\n    closing_brackets = {\")\": \"(\", \"]\": \"[\", \"}\": \"{\"}\n\n    for opening_bracket in brackets:\n        if opening_bracket not in opening_brackets:\n            return False\n        closing_bracket = closing_brackets[opening_bracket]\n        if closing_bracket not in closing_brackets:\n            return False\n\n    return True\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 66,
      "score": 10.0,
      "candidate": "open_brackets = {\"(\", \"[\", \"{\", \"<\", \">\"}\n    close_brackets = {\")\", \"]\", \"}\", \">\", \"<\"}\n    if not brackets:\n        return True\n    for i in range(len(brackets)):\n        if brackets[i] in open_brackets:\n            if brackets[i + 1] in close_brackets:\n                return False\n            else:\n                if brackets[i + 2] in open_brackets:\n                    return False\n        else:\n            if brackets[i + 1] in close_brackets:\n                return False\n            else:\n                if brackets[i + 2] in open_brackets:\n                    return False\n    return True\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 67,
      "score": 10.0,
      "candidate": "opening_brackets = []\n    closing_brackets = []\n    for bracket in brackets:\n        if bracket == \"<\":\n            opening_brackets.append(bracket)\n        elif bracket == \">\":\n            closing_brackets.append(bracket)\n    return len(opening_brackets) == 0 and len(closing_brackets) == 0\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 68,
      "score": 10.0,
      "candidate": "brackets_stack = []\n    for bracket in brackets:\n        if bracket == \"<\":\n            brackets_stack.append(bracket)\n        elif bracket == \">\":\n            if brackets_stack:\n                brackets_stack.pop()\n            else:\n                return False\n    return not brackets_stack\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 69,
      "score": 10.0,
      "candidate": "brackets = brackets.replace(\"<\", \"\").replace(\">\", \"\").replace(\"<<\", \"\").replace(\">>\", \"\")\n    if len(brackets) % 2!= 0:\n        return False\n    if brackets.count(\"<\")!= brackets.count(\">\"):\n        return False\n    return True\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 70,
      "score": 10.0,
      "candidate": "opening_brackets = {\"(\": \")\", \"[\": \"]\", \"<\": \"}\"}\n    closing_brackets = {\")\": \"(\", \"]\": \"[\", \"<\": \"<\"}\n\n    for bracket in brackets:\n        if bracket not in opening_brackets and bracket not in closing_brackets:\n            return False\n\n    return True\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 71,
      "score": 10.0,
      "candidate": "opening = {\n        \"<\": \">\",\n        \">\": \"<\",\n        \"<>\": \">\",\n        \"<<\": \"<\",\n        \">>\": \">\",\n        \"<<>\": \"<\",\n    }\n    closing = {\n        \"<\": \"<\",\n        \">\": \">\",\n        \"<>\": \"<\",\n        \"<<\": \"<\",\n        \">>\": \">\",\n        \"<<>\": \"<\",\n    }\n\n    for i in range(len(brackets)):\n        if opening[brackets[i]]!= closing[brackets[i]]:\n            return False\n\n    return True\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 72,
      "score": 10.0,
      "candidate": "if not brackets:\n        return True\n\n    opening = [0]\n    closing = [0]\n    for char in brackets:\n        if char == \"<\":\n            opening.append(opening[-1] + 1)\n        elif char == \">\":\n            closing.append(closing[-1] + 1)\n        elif char == \"<\":\n            opening.pop()\n        elif char == \">\":\n            closing.pop()\n        else:\n            return False\n\n    if len(opening)!= len(closing):\n        return False\n\n    for i in range(len(opening)):\n        if opening[i]!= closing[i]:\n            return False\n\n    return True\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 73,
      "score": 10.0,
      "candidate": "stack = []\n    for char in brackets:\n        if char == \"<\":\n            stack.append(char)\n        elif char == \">\":\n            if stack:\n                stack.pop()\n            else:\n                return False\n    return stack == []\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 74,
      "score": 10.0,
      "candidate": "opening_brackets = {\"(\": \")\", \"[\": \"]\", \"{\": \"}\"}\n    closing_brackets = {\")\": \"(\", \"]\": \"[\", \"}\": \"{\"}\n    opening_brackets_open = opening_brackets.get(brackets[0])\n    closing_brackets_open = closing_brackets.get(brackets[0])\n    for bracket in brackets[1:]:\n        opening_brackets_close = opening_brackets.get(bracket)\n        closing_brackets_close = closing_brackets.get(bracket)\n        if opening_brackets_close!= closing_brackets_close:\n            return False\n        opening_brackets_open = opening_brackets.get(opening_brackets_open)\n    return True\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 75,
      "score": 10.0,
      "candidate": "if len(brackets) % 2!= 0:\n        return False\n    opening_bracket = 0\n    closing_bracket = 0\n    for i in range(len(brackets)):\n        if brackets[i] == \"<\" or brackets[i] == \">\":\n            opening_bracket += 1\n        if brackets[i] == \"<\" and opening_bracket == 0:\n            closing_bracket += 1\n        if brackets[i] == \">\" and closing_bracket == 0:\n            opening_bracket -= 1\n        if opening_bracket == 0 or closing_bracket == 0:\n            return False\n    return True\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 76,
      "score": 10.0,
      "candidate": "opening_brackets = []\n    closing_brackets = []\n    for bracket in brackets:\n        if bracket == \"<\":\n            opening_brackets.append(bracket)\n        elif bracket == \">\":\n            closing_brackets.append(bracket)\n        elif len(opening_brackets) == 0:\n            if len(closing_brackets) == 0:\n                return False\n        elif len(closing_brackets) == 0:\n            return False\n        else:\n            if opening_brackets[-1]!= closing_brackets[-1]:\n                return False\n            else:\n                opening_brackets.pop()\n                closing_brackets.pop()\n    return len(opening_brackets) == 0\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 77,
      "score": 10.0,
      "candidate": "stack = []\n    for char in brackets:\n        if char == \"<\":\n            stack.append(char)\n        elif char == \">\":\n            if stack:\n                stack.pop()\n            else:\n                return False\n    return not stack\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 78,
      "score": 9.0,
      "candidate": "if not brackets:\n        return True\n    if brackets[0] == brackets[-1]:\n        return correct_bracketing(brackets[1:-1])\n    return False"
    },
    {
      "rank": 79,
      "score": 8.0,
      "candidate": "if not brackets:\n        return True\n\n    opening = {\n        \">\": \"(\",\n        \"<\": \"[\",\n        \"<>\": \"{\",\n        \"|\": \"|\",\n        \"^\": \"^\",\n        \"^>\": \"^\",\n        \"^<\": \"^\",\n    }\n\n    closing = {\n        \">\": \")\",\n        \"<\": \"]\",\n        \"<>\": \"}\",\n        \"|\": \"}\",\n        \"^\": \"}\",\n        \"^>\": \"}\",\n        \"^<\": \"}\",\n    }\n\n    for bracket in brackets:\n        if bracket not in opening:\n            return False\n        if opening[bracket]!= closing[bracket]:\n            return False\n\n    return True"
    },
    {
      "rank": 80,
      "score": 8.0,
      "candidate": "stack = []\n    for bracket in brackets:\n        if bracket == \"<\" or bracket == \">\":\n            stack.append(bracket)\n        else:\n            if stack:\n                stack.pop()\n            else:\n                return False\n    return not stack\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 81,
      "score": 8.0,
      "candidate": "if brackets == \"\":\n        return False\n\n    opening_brackets = {\"(\": \")\", \"[\": \"]\", \"{\": \"}\"}\n    closing_brackets = {\"(\": \")\", \"[\": \"]\", \"{\": \"}\"}\n\n    for bracket in brackets:\n        if bracket not in opening_brackets.keys():\n            return False\n        elif bracket not in closing_brackets.keys():\n            return False\n\n    return True\n\n\nif __name__ == \"__main__\":\n    print(correct_bracketing(\"<<><>>\"))\n    print(correct_bracketing(\"><<>\"))\n    print(correct_bracketing(\"<>\"))\n    print(correct_bracketing(\">\"))"
    },
    {
      "rank": 82,
      "score": 8.0,
      "candidate": "stack = []\n    for bracket in brackets:\n        if bracket == \"<\" or bracket == \">\":\n            stack.append(bracket)\n        else:\n            if not stack:\n                return False\n            if stack[-1] == \">\":\n                stack.pop()\n            else:\n                return False\n    return not stack\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 83,
      "score": 8.0,
      "candidate": "opening = []\n    closing = []\n    for bracket in brackets:\n        if bracket == \"<\":\n            opening.append(bracket)\n        elif bracket == \">\":\n            closing.append(bracket)\n        elif opening and closing and opening[-1] == closing[-1]:\n            opening.pop()\n            closing.pop()\n        else:\n            return False\n    return len(opening) == 0 and len(closing) == 0"
    },
    {
      "rank": 84,
      "score": 8.0,
      "candidate": "brackets_stack = []\n    for bracket in brackets:\n        if bracket == \"<\" and brackets_stack:\n            brackets_stack.pop()\n        elif bracket == \">\" and brackets_stack:\n            brackets_stack.pop()\n        else:\n            brackets_stack.append(bracket)\n    return len(brackets_stack) == 0\n\n\nif __name__ == \"__main__\":\n    print(correct_bracketing(\"<>\"))\n    print(correct_bracketing(\"<<><>>\"))\n    print(correct_bracketing(\"><<>\"))"
    },
    {
      "rank": 85,
      "score": 8.0,
      "candidate": "if len(brackets) == 0:\n        return False\n    if brackets[0] == \"<\" and brackets[-1] == \">\":\n        return correct_bracketing(brackets[1:-1])\n    else:\n        return False\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 86,
      "score": 8.0,
      "candidate": "stack = []\n    for bracket in brackets:\n        if bracket == \"<\":\n            stack.append(bracket)\n        elif bracket == \">\":\n            if len(stack) > 0 and stack[-1] == bracket:\n                stack.pop()\n            else:\n                return False\n    return len(stack) == 0"
    },
    {
      "rank": 87,
      "score": 8.0,
      "candidate": "stack = []\n    for bracket in brackets:\n        if bracket == \">\":\n            if stack:\n                stack.pop()\n        elif bracket == \"<\":\n            if stack:\n                stack.pop()\n        else:\n            stack.append(bracket)\n    return not stack\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 88,
      "score": 8.0,
      "candidate": "stack = []\n    for bracket in brackets:\n        if bracket == \">\":\n            if not stack:\n                return False\n            if stack[-1] == \">\":\n                stack.pop()\n        elif bracket == \"<\":\n            if not stack:\n                return False\n            if stack[-1] == \"<\":\n                stack.pop()\n        elif bracket == \"<>\":\n            if not stack:\n                return False\n            if stack[-1] == \"<>\":\n                stack.pop()\n        else:\n            stack.append(bracket)\n    return not stack\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 89,
      "score": 8.0,
      "candidate": "open_brackets = {\"<\", \">\"}\n    close_brackets = {\">\", \"<\", \"<\"}\n    return all(\n        open_brackets.issubset(bracket)\n        for bracket in brackets\n    )\n\n\nif __name__ == \"__main__\":\n    print(correct_bracketing(\"<\"))\n    print(correct_bracketing(\"<>\"))\n    print(correct_bracketing(\"<<><>>\"))\n    print(correct_bracketing(\"><<>\"))"
    },
    {
      "rank": 90,
      "score": 8.0,
      "candidate": "stack = []\n    for bracket in brackets:\n        if bracket == \"<\":\n            stack.append(bracket)\n        elif bracket == \">\":\n            if stack:\n                stack.pop()\n            else:\n                return False\n    return stack\n\n\nif __name__ == \"__main__\":\n    print(correct_bracketing(\"<\"))\n    print(correct_bracketing(\"<>\"))\n    print(correct_bracketing(\"<<><>>\"))\n    print(correct_bracketing(\"><<>\"))"
    },
    {
      "rank": 91,
      "score": 8.0,
      "candidate": "stack = []\n    for char in brackets:\n        if char == \"<\":\n            stack.append(char)\n        elif char == \">\":\n            if stack:\n                stack.pop()\n            else:\n                return False\n    return not stack\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 92,
      "score": 8.0,
      "candidate": "stack = []\n    for bracket in brackets:\n        if bracket == \"<\":\n            stack.append(bracket)\n        elif bracket == \">\":\n            if not stack:\n                return False\n            else:\n                if stack[-1] == bracket:\n                    stack.pop()\n                else:\n                    return False\n    return not stack"
    },
    {
      "rank": 93,
      "score": 8.0,
      "candidate": "stack = []\n\n    for bracket in brackets:\n        if bracket == \"<\" or bracket == \">\":\n            stack.append(bracket)\n        else:\n            if not stack:\n                return False\n            if stack[-1] == bracket:\n                stack.pop()\n            else:\n                return False\n    return not stack\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 94,
      "score": 8.0,
      "candidate": "stack = []\n    for bracket in brackets:\n        if bracket == \"<\" and not stack:\n            return False\n        elif bracket == \">\" and not stack:\n            return False\n        elif bracket == \"<\" and stack:\n            if stack[-1] == \">\":\n                return False\n            stack.pop()\n        elif bracket == \">\" and stack:\n            if stack[-1] == \"<\" or stack[-1] == \"<>\":\n                return False\n            stack.pop()\n    return len(stack) == 0"
    },
    {
      "rank": 95,
      "score": 8.0,
      "candidate": "brackets_stack = []\n    for bracket in brackets:\n        if bracket == \"<\" or bracket == \">\":\n            brackets_stack.append(bracket)\n        else:\n            if brackets_stack and brackets_stack[-1] == \">\":\n                brackets_stack.pop()\n            else:\n                return False\n    if brackets_stack:\n        return False\n    return True"
    },
    {
      "rank": 96,
      "score": 8.0,
      "candidate": "stack = []\n    for bracket in brackets:\n        if bracket == \"(\":\n            stack.append(bracket)\n        else:\n            if not stack:\n                return False\n            if stack[-1]!= bracket:\n                return False\n            stack.pop()\n    return not stack"
    },
    {
      "rank": 97,
      "score": 8.0,
      "candidate": "stack = []\n\n    for c in brackets:\n        if c == \"<\":\n            stack.append(c)\n        else:\n            if not stack:\n                return False\n            if c == stack[-1]:\n                stack.pop()\n            else:\n                return False\n\n    return not stack\n\n\nif __name__ == \"__main__\":\n    print(correct_bracketing(\"<>\"))"
    },
    {
      "rank": 98,
      "score": 8.0,
      "candidate": "stack = []\n    for b in brackets:\n        if b == \"<\":\n            stack.append(b)\n        elif b == \">\":\n            if len(stack) == 0:\n                return False\n            if stack[-1] == \">\":\n                stack.pop()\n            else:\n                return False\n    return len(stack) == 0"
    },
    {
      "rank": 99,
      "score": 8.0,
      "candidate": "stack = []\n    for b in brackets:\n        if b == \"<\":\n            stack.append(b)\n        else:\n            if not stack:\n                return False\n            if stack.pop()!= b:\n                return False\n    return not stack\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 100,
      "score": 1.0,
      "candidate": "opening = {\"(\": \")\", \"[\": \"]\", \"<\": \"<\"}\n    closing = {\"(\": \")\", \"[\": \"]\", \"<\": \"<\"}\n\n    for bracket in brackets:\n        if bracket in opening:\n            if closing[bracket]!= opening[bracket]:\n                return False\n        elif bracket in closing:\n            if opening[bracket]!= closing[bracket]:\n                return False\n    return True\n\n\ndef correct_bracketing_iterative(brackets: str):\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing_iterative(\"<\")\n    False\n    >>> correct_bracketing_iterative(\"<>\")\n    True\n    >>> correct_bracketing_iterative(\"<<><>>\")\n    True\n    >>> correct_bracketing_iterative(\"><<>\")\n    False\n    \"\"\"\n    opening = {\"(\": \")\", \"[\": \"]\", \"<\": \"<\"}\n    closing = {\"(\": \")\", \"[\": \"]\", \"<\": \"<\"}\n\n    for bracket in brackets:\n        if bracket in opening:\n            if opening[bracket]!= closing[bracket]:\n                return False\n        elif bracket in closing:\n            if closing[bracket]!= opening[bracket]:\n                return False\n\n    return True\n\n\ndef correct_bracketing_recursive(brackets: str):\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing_recursive(\"<\")\n    False\n    >>> correct_bracketing_recursive(\"<>\")\n    True\n    >>> correct_bracketing_recursive(\"<<><>>\")\n    True\n    >>> correct_bracketing_recursive(\"><<>\")\n    False\n    \"\"\"\n    opening = {\"(\": \")\", \"[\": \"]\", \"<\": \"<\"}\n    closing = {\"(\": \")\", \"[\": \"]\", \"<\": \"<\"}\n\n    def _correct_bracketing(bracket):\n        if bracket in opening:\n            if closing[bracket]!= opening[bracket]:\n                return False\n        elif bracket in closing:\n            if opening[bracket]!= closing[bracket]:\n                return False\n\n        return True"
    }
  ]
}