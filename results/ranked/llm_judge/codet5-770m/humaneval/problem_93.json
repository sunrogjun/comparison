{
  "timestamp": "2025-09-14T11:56:51.436623",
  "method": "improved_llm_judge",
  "judge_model": "codellama/CodeLlama-7b-Python-hf",
  "target_model": "codet5-770m",
  "dataset": "humaneval",
  "problem_number": 93,
  "total_candidates": 100,
  "results": [
    {
      "rank": 1,
      "score": 10.0,
      "candidate": "vowels = 'aeiou'\n    message = list(message)\n    for i in range(len(message)):\n        if message[i].lower() in vowels:\n            message[i] = message[i].upper()\n            for j in range(i + 1, len(message)):\n                if message[j].lower() in vowels:\n                    message[j] = message[j].upper()\n                    for k in range(j + 1, len(message)):\n                        if message[k].lower() in vowels:\n                            message[k] = message[k].upper()\n                            for l in range(k + 1, len(message)):\n                                if message[l].lower() in vowels:\n                                    message[l] = message[l].upper()\n                                    for m in range(l + 1, len(message)):\n                                        if message[m].lower() in vowels:\n                                            message[m] = message[m].upper()\n                                            for n in range(n + 1, len(message)):\n                                                if message[n].lower() in vowels:\n                                                    message[n] = message[n].upper()\n                                                    for o in range(o + 1, len(message)):\n                                                        if message[o].lower() in vowels:\n                                                            message[o] = message[o].upper()\n                                                            for p in range(p + 1, len(message)):\n                                                                if message[p].lower() in vowels:\n                                                                    message[p] = message[p].upper()\n                                                                for q in range(q + 1, len(message)):\n                                                                    if message[q].lower() in vowels:\n                                                                        message[q] = message[q].upper()\n                                                            for q in range(q + 1, len(message)):\n                                                                if message[q].lower() in vowels:\n                                                                    message[q] = message[q].upper()\n                                    message = ''.join(message)\n    return message\n\n\ndef decode(message):\n    \"\"\"\n    Write a function that takes a message, and decodes in such a \n    way that it replaces all vowels in the message with"
    },
    {
      "rank": 2,
      "score": 10.0,
      "candidate": "vowels = \"aeiou\"\n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    result = \"\"\n    for char in message:\n        if char in vowels:\n            result += alphabet[alphabet.index(char)+1]\n        else:\n            result += char\n    return result\n\ndef decode(message):\n    \"\"\"\n    Write a function that takes a message, and decodes in such a \n    way that it decodes the message back to a string. \n    Assume only letters. \n    \n    Examples:\n    >>> decode('TGST')\n    'test'\n    >>> decode('tHKS KS C MGSSCGG')\n    'This is a message'\n    \"\"\"\n    vowels = \"aeiou\"\n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    result = \"\"\n    for char in message:\n        if char in vowels:\n            result += alphabet[alphabet.index(char)-1]\n        else:\n            result += char\n    return result"
    },
    {
      "rank": 3,
      "score": 10.0,
      "candidate": "vowels = 'aeiou'\n    result = ''\n    for letter in message:\n        if letter.lower() in vowels:\n            result += letter.lower()\n            result += message[(vowels.index(letter.lower()) + 2):]\n        else:\n            result += letter\n    return result\n\n\ndef decode(message):\n    \"\"\"\n    Write a function that takes a message, and decodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. Assume only letters. \n    \n    Examples:\n    >>> decode('TGST')\n    'test'\n    >>> decode('tHKS KS C MGSSCGG')\n    'This is a message'\n    \"\"\"\n    vowels = 'aeiou'\n    result = ''\n    for letter in message:\n        if letter.lower() in vowels:\n            result += vowels[(vowels.index(letter.lower()) - 2) % len(vowels)]\n        else:\n            result += letter\n    return result\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod(verbose=True)"
    },
    {
      "rank": 4,
      "score": 10.0,
      "candidate": "# Your code here\n    # Replace all vowels in the message with the letter that appears 2 places ahead of that vowel in the english alphabet. \n    # Assume only letters.\n    pass\n\ndef decode(message):\n    \"\"\"\n    Write a function that takes a message, and decodes in such a way that it \n    swaps case of all letters, replaces all vowels in the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. Assume only letters.\n    \n    Examples:\n    >>> decode('TGST')\n    'test'\n    >>> decode('tHKS KS C MGSSCGG')\n    'This is a message'\n    \"\"\"\n    \n    # Your code here\n    # Replace all vowels in the message with the letter that appears 2 places ahead of that vowel in the english alphabet. \n    # Assume only letters.\n    pass"
    },
    {
      "rank": 5,
      "score": 10.0,
      "candidate": "alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    message = message.lower()\n    message = ''.join(letter if letter in alphabet else alphabet[alphabet.index(letter)] for letter in message)\n    return message\n\n\ndef decode(message):\n    \"\"\"\n    Write a function that takes a message, and decodes in such a \n    way that it replaces all vowels in the message with the letter \n    that appears 2 places ahead of that vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> decode('TGST')\n    'test'\n    >>> decode('tHKS KS C MGSSCGG')\n    'This is a message'\n    \"\"\"\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    message = message.upper()\n    message = ''.join(letter if letter in alphabet else alphabet[alphabet.index(letter)] for letter in message)\n    return message\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 6,
      "score": 10.0,
      "candidate": "alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    message = ''.join(message)\n    vowels = 'aeiou'\n    encoded = []\n    for i in message:\n        if i.lower() in vowels:\n            encoded.append(alphabet[alphabet.index(i) + 1])\n        else:\n            encoded.append(i)\n    return ''.join(encoded)\n    \n\ndef decode(message):\n    \"\"\"\n    Write a function that takes a message, and decodes in such a way that it \n    swaps case of all letters, replaces all vowels in the message with \n    the letter that appears 2 places ahead of that vowel in the english \n    alphabet. Assume only letters. \n    \n    Examples:\n    >>> decode('TGST')\n    'test'\n    >>> decode('tHKS KS C MGSSCGG')\n    'This is a message'\n    \"\"\"\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    message = ''.join(message)\n    vowels = 'aeiou'\n    decoded = []\n    for i in message:\n        if i.lower() in vowels:\n            decoded.append(alphabet[alphabet.index(i) - 1])\n        else:\n            decoded.append(i)\n    return ''.join(decoded)\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 7,
      "score": 10.0,
      "candidate": "alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    encoded = ''\n    for letter in message:\n        if letter.lower() in alphabet:\n            encoded += alphabet[alphabet.index(letter.lower()) + 2]\n        else:\n            encoded += letter\n    return encoded\n    \n    \nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 8,
      "score": 10.0,
      "candidate": "# Your code here\n    vowels = 'aeiou'\n    \n    new_message = ''\n    for letter in message:\n        if letter.lower() in vowels:\n            new_message += vowels[vowels.index(letter.lower()) + 1]\n        else:\n            new_message += letter\n            \n    return new_message\n\n\ndef decode(message):\n    \"\"\"\n    Write a function that takes a message, and decodes in such a way that it \n    swaps case of all letters, replaces all vowels in the message with \n    the letter that appears 2 places ahead of that vowel in the \n    english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> decode('test')\n    'test'\n    >>> decode('This is a message')\n    'This is a message'\n    \"\"\"\n    \n    # Your code here\n    vowels = 'aeiou'\n    \n    new_message = ''\n    for letter in message:\n        if letter.lower() in vowels:\n            new_message += vowels[vowels.index(letter.lower()) - 1]\n        else:\n            new_message += letter\n            \n    return new_message\n\n\nprint(encode('test'))\nprint(encode('This is a message'))\nprint(decode('tHKS KS C MGSSCGG'))"
    },
    {
      "rank": 9,
      "score": 10.0,
      "candidate": "pass\n\ndef decode(message):\n    \"\"\"\n    Write a function that takes a message, and decodes in such a \n    way that it replaces all vowels in the message with the letter \n    that appears 2 places ahead of that vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> decode('TGST')\n    'test'\n    >>> decode('tHKS KS C MGSSCGG')\n    'This is a message'\n    \"\"\"\n    pass\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 10,
      "score": 10.0,
      "candidate": "alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    vowels = 'aeiou'\n    new_message = ''\n    for letter in message:\n        if letter.lower() in vowels:\n            new_message += alphabet[vowels.index(letter.lower())+2]\n        else:\n            new_message += alphabet[vowels.index(letter.upper())+2]\n    return new_message\n\n\ndef decode(message):\n    \"\"\"\n    Write a function that takes a message, and decodes in such a way that it \n    replaces all vowels in the message with the letter that appears 2 places \n    ahead of that vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> decode('TGST')\n    'test'\n    >>> decode('tHKS KS C MGSSCGG')\n    'This is a message'\n    \"\"\"\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    vowels = 'aeiou'\n    new_message = ''\n    for letter in message:\n        if letter.lower() in vowels:\n            new_message += alphabet[vowels.index(letter.lower())-2]\n        else:\n            new_message += alphabet[vowels.index(letter.upper())-2]\n    return new_message\n\n\ndef main():\n    import doctest\n    doctest.testmod()\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 11,
      "score": 10.0,
      "candidate": "new_message = ''\n    for i in message:\n        if i.lower() in 'aeiou':\n            new_message += chr(ord(i.lower()) + 2)\n        else:\n            new_message += i\n    return new_message\n\ndef decode(message):\n    \"\"\"\n    Write a function that takes a message, and decodes in such a way that it \n    swaps case of all letters, replaces all vowels in the message with \n    the letter that appears 2 places ahead of that vowel in the english \n    alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> decode('TGST')\n    'test'\n    >>> decode('tHKS KS C MGSSCGG')\n    'This is a message'\n    \"\"\"\n    new_message = ''\n    for i in message:\n        if i.lower() in 'aeiou':\n            new_message += chr(ord(i.lower()) - 2)\n        else:\n            new_message += i\n    return new_message\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 12,
      "score": 10.0,
      "candidate": "pass\n\ndef decode(message):\n    \"\"\"\n    Write a function that takes a message, and decodes in such a \n    way that it replaces all vowels in the message with the letter that \n    appears 2 places ahead of that vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> decode('test')\n    'TGST'\n    >>> decode('This is a message')\n    'This is a message'\n    \"\"\"\n    pass\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 13,
      "score": 10.0,
      "candidate": "# Your code here\n    \n    #return message.upper()\n    return message.lower()\n\ndef decode(message):\n    \"\"\"\n    Write a function that takes a message, and decodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. Assume only letters. \n    \n    Examples:\n    >>> decode('TGST')\n    'test'\n    >>> decode('tHKS KS C MGSSCGG')\n    'This is a message'\n    \"\"\"\n    \n    # Your code here\n    \n    #return message.upper()\n    return message.lower()"
    },
    {
      "rank": 14,
      "score": 10.0,
      "candidate": "vowels = 'aeiou'\n    return ''.join([message.replace(vowel, letter, 1) for letter in message for vowel in vowels])\n\ndef decode(message):\n    \"\"\"\n    Write a function that takes a message, and decodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> decode('TGST')\n    'test'\n    >>> decode('tHKS KS C MGSSCGG')\n    'This is a message'\n    \"\"\"\n    vowels = 'aeiou'\n    return ''.join([message[i].replace(letter, vowel, 1) for i, letter in enumerate(message) if letter in vowels])\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 15,
      "score": 10.0,
      "candidate": "vowels = 'aeiouAEIOU'\n    encoded_message = ''\n    for letter in message:\n        if letter in vowels:\n            encoded_message += letter.lower()\n            encoded_message += '2'\n        else:\n            encoded_message += letter\n    return encoded_message\n\n\ndef decode(message):\n    \"\"\"\n    Write a function that takes a message, and decodes in such a way that it \n    replaces all vowels in the message with the letter that appears 2 places \n    ahead of that vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> decode('test')\n    'test'\n    >>> decode('tHKS KS C MGSSCGG')\n    'This is a message'\n    \"\"\"\n    vowels = 'aeiouAEIOU'\n    decoded_message = ''\n    for letter in message:\n        if letter in vowels:\n            decoded_message += letter.upper()\n        else:\n            decoded_message += letter\n    return decoded_message\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 16,
      "score": 10.0,
      "candidate": "new_message = ''\n    for letter in message:\n        if letter.lower() in 'aeiou':\n            new_message += letter.upper()\n        else:\n            new_message += letter\n    return new_message\n\n\ndef decode(message):\n    \"\"\"\n    Write a function that takes a message, and decodes in such a \n    way that it replaces all vowels in the message with the letter that \n    appears 2 places ahead of that vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> decode('tHKS KS C MGSSCGG')\n    'test'\n    >>> decode('This is a message')\n    'This is a message'\n    \"\"\"\n    new_message = ''\n    for letter in message:\n        if letter.upper() in 'AEIOU':\n            new_message += letter.lower()\n        else:\n            new_message += letter\n    return new_message\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 17,
      "score": 10.0,
      "candidate": "alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    \n    new_message = \"\"\n    vowels = \"aeiou\"\n    \n    for letter in message:\n        if letter in vowels:\n            new_message += alphabet[alphabet.index(letter)] * 2\n        else:\n            new_message += alphabet[alphabet.index(letter)]\n    \n    return new_message\n\n\ndef decode(message):\n    \"\"\"\n    Write a function that takes a message, and decodes in such a \n    way that it swaps case of all letters, replaces all vowels \n    in the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. Assume only letters. \n    \n    Examples:\n    >>> decode('TGST')\n    'test'\n    >>> decode('tHKS KS C MGSSCGG')\n    'This is a message'\n    \"\"\"\n    \n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    \n    new_message = \"\"\n    vowels = \"aeiou\"\n    \n    for letter in message:\n        if letter in vowels:\n            new_message += alphabet[alphabet.index(letter)]\n        else:\n            new_message += letter\n    \n    return new_message\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 18,
      "score": 10.0,
      "candidate": "return ''.join(map(lambda x: chr((ord(x)-ord('a')+2)%26+ord('a')), message))\n    \n    \n    \ndef decode(message):\n    \"\"\"\n    Write a function that takes a message, and decodes in such a \n    way that it replaces all vowels in the message with the letter that \n    appears 2 places ahead of that vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> decode('TGST')\n    'test'\n    >>> decode('tHKS KS C MGSSCGG')\n    'This is a message'\n    \"\"\"\n    return ''.join(map(lambda x: chr((ord(x)-ord('a')+2)%26+ord('a')), message))\n    \n    \n    \ndef test():\n    import doctest\n    doctest.testmod()\n    \n    \nif __name__ == '__main__':\n    test()"
    },
    {
      "rank": 19,
      "score": 10.0,
      "candidate": "vowels = 'aeiouAEIOU'\n    encode_string = ''\n    for letter in message:\n        if letter in vowels:\n            encode_string += letter.lower()\n        else:\n            encode_string += letter\n    return encode_string\n\ndef decode(message):\n    \"\"\"\n    Write a function that takes a message, and decodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. Assume only letters. \n    \n    Examples:\n    >>> decode('test')\n    'TGST'\n    >>> decode('This is a message')\n    'This is a message'\n    \"\"\"\n    vowels = 'aeiouAEIOU'\n    decode_string = ''\n    for letter in message:\n        if letter in vowels:\n            decode_string += letter.upper()\n        else:\n            decode_string += letter\n    return decode_string\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 20,
      "score": 10.0,
      "candidate": "# Your code here\n    \n    return ''\n    \n    \ndef decode(message):\n    \"\"\"\n    Write a function that takes a message, and decodes in such a \n    way that it replaces all vowels in the message with the letter that \n    appears 2 places ahead of that vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> decode('test')\n    'TGST'\n    >>> decode('This is a message')\n    'This is a message'\n    \"\"\"\n    \n    # Your code here\n    \n    return ''\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 21,
      "score": 10.0,
      "candidate": "word = ''\n    for letter in message:\n        if letter == 'a':\n            word += 'a'\n        elif letter == 'e':\n            word += 'e'\n        elif letter == 'i':\n            word += 'i'\n        elif letter == 'o':\n            word += 'o'\n        elif letter == 'u':\n            word += 'u'\n        elif letter == 'A':\n            word += 'A'\n        elif letter == 'E':\n            word += 'E'\n        elif letter == 'I':\n            word += 'I'\n        elif letter == 'O':\n            word += 'O'\n        elif letter == 'U':\n            word += 'U'\n        elif letter == 'A':\n            word += 'A'\n        elif letter == 'E':\n            word += 'E'\n        elif letter == 'I':\n            word += 'I'\n        elif letter == 'O':\n            word += 'O'\n        elif letter == 'U':\n            word += 'U'\n        elif letter == 'A':\n            word += 'A'\n        elif letter == 'E':\n            word += 'E'\n        elif letter == 'I':\n            word += 'I'\n        elif letter == 'O':\n            word += 'O'\n        elif letter == 'U':\n            word += 'U'\n    return word\n\n\n\ndef decode(message):\n    \"\"\"\n    Write a function that takes a message, and decodes in such a \n    way that it replaces all vowels in the message with the letter \n    that appears 2 places ahead of that vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> decode('test')\n    'test'\n    >>> decode('This is a message')\n    'This is a message'\n    \"\"\"\n    word = ''\n    for letter in message:\n        if letter == 'a':\n            word += 'a'\n        elif letter == 'e':\n            word += 'e'\n        elif letter == 'i':\n            word += 'i'\n        elif letter == 'o':\n            word += 'o'\n        elif letter == 'u':\n            word += 'u'\n        elif letter == '"
    },
    {
      "rank": 22,
      "score": 10.0,
      "candidate": "vowels = 'AEIOU'\n    new_message = ''\n    for i in message:\n        if i.lower() in vowels:\n            new_message += i.upper()\n            new_message += message[message.index(i.lower())+1:].replace(i, i.upper())\n        else:\n            new_message += i\n    return new_message\n\n\ndef decode(message):\n    \"\"\"\n    Write a function that takes a message, and decodes in such a \n    way that it swaps case of all letters, replaces all vowels \n    in the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. Assume only letters. \n    \n    Examples:\n    >>> decode('TGST')\n    'test'\n    >>> decode('tHKS KS C MGSSCGG')\n    'This is a message'\n    \"\"\"\n    vowels = 'AEIOU'\n    new_message = ''\n    for i in message:\n        if i.lower() in vowels:\n            new_message += i.upper()\n            new_message += message[message.index(i.lower())+1:].replace(i, i.lower())\n        else:\n            new_message += i\n    return new_message\n\n\ndef main():\n    print(encode('test'))\n    print(decode('tHKS KS C MGSSCGG'))\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 23,
      "score": 10.0,
      "candidate": "# Your code here\n    \n    return''.join([chr((ord(c) - ord('a') + 2) % 26 + ord('a')) if c in 'aeiou' else c for c in message])\n\n\n# Tests\nimport doctest\ndoctest.testmod()"
    },
    {
      "rank": 24,
      "score": 10.0,
      "candidate": "# Write your code here\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    encoded_message = ''\n    for letter in message:\n        if letter in alphabet:\n            index = alphabet.find(letter)\n            if index < 0:\n                index = alphabet.find(letter.upper())\n            if index < 0:\n                index = alphabet.find(letter.lower())\n            if index < 0:\n                index = alphabet.find(letter.title())\n            if index < 0:\n                index = alphabet.find(letter.upper().title())\n            if index < 0:\n                index = alphabet.find(letter.lower().title())\n            if index < 0:\n                index = alphabet.find(letter.title().upper())\n            if index < 0:\n                index = alphabet.find(letter.lower().title().upper())\n            if index < 0:\n                index = alphabet.find(letter.title().lower().upper())\n            if index < 0:\n                index = alphabet.find(letter.title().lower().lower())\n            if index < 0:\n                index = alphabet.find(letter.title().upper().upper())\n            if index < 0:\n                index = alphabet.find(letter.lower().upper().upper())\n            if index < 0:\n                index = alphabet.find(letter.title().lower().lower())\n            if index < 0:\n                index = alphabet.find(letter.title().lower().upper())\n            if index < 0:\n                index = alphabet.find(letter.upper().lower())\n            if index < 0:\n                index = alphabet.find(letter.upper().upper())\n            if index < 0:\n                index = alphabet.find(letter.lower().lower())\n            if index < 0:\n                index = alphabet.find(letter.lower().upper())\n            if index < 0:\n                index = alphabet.find(letter.title().upper())\n            if index < 0:\n                index = alphabet.find(letter.upper().title())\n            if index < 0:\n                index = alphabet.find(letter.title().lower())\n            if index < 0:\n                index = alphabet.find(letter.lower().upper())\n            if index < 0:"
    },
    {
      "rank": 25,
      "score": 10.0,
      "candidate": "# Your code here\n    return ''\n\n\ndef decode(message):\n    \"\"\"\n    Write a function that takes a message, and decodes in such a \n    way that it replaces all vowels in the message with the letter that appears \n    2 places ahead of that vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> decode('tHKS KS C MGSSCGG')\n    'test'\n    >>> decode('This is a message')\n    'This is a message'\n    \"\"\"\n    # Your code here\n    return ''\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 26,
      "score": 10.0,
      "candidate": "alphabet = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n    new_message = ''\n\n    for letter in message:\n        if letter in alphabet:\n            new_message += alphabet[alphabet.index(letter) + 2]\n        else:\n            new_message += letter\n    return new_message\n\n\ndef decode(message):\n    \"\"\"\n    Write a function that takes a message, and decodes in such a way that it \n    replaces all vowels in the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> decode('test')\n    'test'\n    >>> decode('This is a message')\n    'This is a message'\n    \"\"\"\n\n    alphabet = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n    new_message = ''\n\n    for letter in message:\n        if letter in alphabet:\n            new_message += alphabet[alphabet.index(letter) - 2]\n        else:\n            new_message += letter\n    return new_message\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 27,
      "score": 10.0,
      "candidate": "new_message = ''\n    vowels = 'aeiouAEIOU'\n    for char in message:\n        if char in vowels:\n            new_message += char.upper()\n        else:\n            new_message += char\n    return new_message\n\n\ndef decode(message):\n    \"\"\"\n    Write a function that takes a message, and decodes in such a way that it \n    swaps case of all letters, replaces all vowels in the message with the letter \n    that appears 2 places ahead of that vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> decode('TGST')\n    'test'\n    >>> decode('tHKS KS C MGSSCGG')\n    'This is a message'\n    \"\"\"\n    new_message = ''\n    vowels = 'AEIOUAEIOU'\n    for char in message:\n        if char in vowels:\n            new_message += char.lower()\n        else:\n            new_message += char\n    return new_message\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 28,
      "score": 10.0,
      "candidate": "# Your code here\n    vowels = 'aeiou'\n    new_message = []\n    for i in message:\n        if i in vowels:\n            new_message.append(i.upper() if i.isupper() else i.lower())\n        else:\n            new_message.append(i)\n    return ''.join(new_message)\n\n\ndef decode(message):\n    \"\"\"\n    Write a function that takes a message, and decodes in such a \n    way that it replaces all vowels in the message with the letter \n    that appears 2 places ahead of that vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> decode('test')\n    'test'\n    >>> decode('This is a message')\n    'This is a message'\n    \"\"\"\n    # Your code here\n    vowels = 'aeiou'\n    new_message = []\n    for i in message:\n        if i.lower() in vowels:\n            new_message.append(i.upper() if i.isupper() else i)\n        else:\n            new_message.append(i)\n    return ''.join(new_message)\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 29,
      "score": 10.0,
      "candidate": "new_message = ''\n    for letter in message:\n        if letter.lower() in 'aeiou':\n            new_letter = letter.lower()\n            new_letter = new_letter.replace('e', 'e')\n            new_letter = new_letter.replace('i', 'i')\n            new_letter = new_letter.replace('o', 'o')\n            new_letter = new_letter.replace('u', 'u')\n            new_letter = new_letter.replace('A', 'a')\n            new_letter = new_letter.replace('E', 'e')\n            new_letter = new_letter.replace('I', 'i')\n            new_letter = new_letter.replace('O', 'o')\n            new_letter = new_letter.replace('U', 'u')\n            new_message += new_letter\n        else:\n            new_message += letter\n    return new_message\n\n\ndef decode(message):\n    \"\"\"\n    Write a function that takes a message, and decodes in such a way that it \n    replaces all vowels in the message with the letter that appears 2 places \n    ahead of that vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> decode('test')\n    'test'\n    >>> decode('This is a message')\n    'This is a message'\n    \"\"\"\n    new_message = ''\n    for letter in message:\n        if letter.lower() in 'aeiou':\n            new_letter = letter.lower()\n            new_letter = new_letter.replace('e', 'e')\n            new_letter = new_letter.replace('i', 'i')\n            new_letter = new_letter.replace('o', 'o')\n            new_letter = new_letter.replace('u', 'u')\n            new_letter = new_letter.replace('A', 'a')\n            new_letter = new_letter.replace('E', 'e')\n            new_letter = new_letter.replace('I', 'i')\n            new_letter = new_letter.replace('O', 'o')\n            new_letter = new_letter.replace('U', 'u')\n            new_"
    },
    {
      "rank": 30,
      "score": 10.0,
      "candidate": "# Your code here\n    letters = \"abcdefghijklmnopqrstuvwxyz\"\n    encoded_message = \"\"\n    for letter in message:\n        if letter in letters:\n            index = letters.find(letter)\n            encoded_message += letters[index]\n            encoded_message += letter\n        else:\n            encoded_message += letter\n    return encoded_message\n\n\ndef decode(message):\n    \"\"\"\n    Write a function that takes a message, and decodes in such a \n    way that it replaces all vowels in the message with the letter that \n    appears 2 places ahead of that vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> decode('tHKS KS C MGSSCGG')\n    'test'\n    >>> decode('This is a message')\n    'This is a message'\n    \"\"\"\n    # Your code here\n    decoded_message = \"\"\n    for letter in message:\n        if letter in \"abcdefghijklmnopqrstuvwxyz\":\n            index = letters.find(letter)\n            decoded_message += letters[index+1]\n            decoded_message += letter\n        else:\n            decoded_message += letter\n    return decoded_message\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 31,
      "score": 10.0,
      "candidate": "# Your code here\n    pass\n\n\ndef decode(message):\n    \"\"\"\n    Write a function that takes a message, and decodes in such a way that it \n    swaps case of all letters, replaces all vowels in the message with the \n    letter that appears 2 places ahead of that vowel in the english \n    alphabet. Assume only letters. \n    \n    Examples:\n    >>> decode('TGST')\n    'test'\n    >>> decode('tHKS KS C MGSSCGG')\n    'This is a message'\n    \"\"\"\n    # Your code here\n    pass"
    },
    {
      "rank": 32,
      "score": 9.993251387631034,
      "candidate": "alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    new_string = \"\"\n    for i in message:\n        if i in alphabet:\n            new_string += alphabet[alphabet.index(i)] + i + alphabet[alphabet.index(i) + 1]\n        else:\n            new_string += i\n    return new_string\n\n\ndef decode(message):\n    \"\"\"\n    Write a function that takes a message, and decodes in such a way that it \n    replaces all vowels in the message with the letter that appears 2 places \n    ahead of that vowel in the english alphabet. Assume only letters. \n    \n    Examples:\n    >>> decode('TGST')\n    'test'\n    >>> decode('tHKS KS C MGSSCGG')\n    'This is a message'\n    \"\"\"\n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    new_string = \"\"\n    for i in message:\n        if i in alphabet:\n            new_string += alphabet[alphabet.index(i)]\n        else:\n            new_string += i\n    return new_string\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 33,
      "score": 9.982086980445024,
      "candidate": "alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    vowels = \"aeiou\"\n    new_message = \"\"\n\n    for letter in message:\n        if letter.lower() in alphabet:\n            new_message += alphabet[alphabet.index(letter) + 2]\n        elif letter.lower() in vowels:\n            new_message += alphabet[alphabet.index(letter) + 1]\n\n    return new_message\n\ndef decode(message):\n    \"\"\"\n    Write a function that takes a message, and decodes in such a \n    way that it replaces all vowels in the message with the letter that \n    appears 2 places ahead of that vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> decode('test')\n    'test'\n    >>> decode('This is a message')\n    'This is a message'\n    \"\"\"\n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    vowels = \"aeiou\"\n    new_message = \"\"\n\n    for letter in message:\n        if letter.lower() in alphabet:\n            new_message += alphabet[alphabet.index(letter) - 1]\n        elif letter.lower() in vowels:\n            new_message += alphabet[alphabet.index(letter) + 2]\n\n    return new_message\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 34,
      "score": 9.963994939209833,
      "candidate": "alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    new_string = ''\n    for letter in message:\n        if letter in alphabet:\n            new_string += alphabet[alphabet.index(letter)] * (2 ** alphabet.index(letter))\n        else:\n            new_string += letter\n    return new_string\n\n\ndef decode(message):\n    \"\"\"\n    Write a function that takes a message, and decodes in such a \n    way that it replaces all vowels in the message with the letter that \n    appears 2 places ahead of that vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> decode('TGST')\n    'test'\n    >>> decode('tHKS KS C MGSSCGG')\n    'This is a message'\n    \"\"\"\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    new_string = ''\n    for letter in message:\n        if letter in alphabet:\n            new_string += alphabet[alphabet.index(letter)]\n        else:\n            new_string += letter\n    return new_string\n\n\ndef main():\n    import doctest\n    doctest.testmod()\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 35,
      "score": 9.94217585880588,
      "candidate": "new_message = ''\n    for letter in message:\n        if letter.lower() in ['a', 'e', 'i', 'o', 'u']:\n            new_message += letter.upper()\n        else:\n            new_message += letter\n    return new_message\n\n\ndef decode(message):\n    \"\"\"\n    Write a function that takes a message, and decodes in such a \n    way that it swaps case of all letters, replaces all vowels \n    in the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> decode('TGST')\n    'test'\n    >>> decode('tHKS KS C MGSSCGG')\n    'This is a message'\n    \"\"\"\n    new_message = ''\n    for letter in message:\n        if letter.upper() in ['A', 'E', 'I', 'O', 'U']:\n            new_message += letter.lower()\n        else:\n            new_message += letter\n    return new_message\n\n\ndef encode_decode(message):\n    \"\"\"\n    Write a function that takes a message, and encodes/decodes in such a \n    way that it swaps case of all letters, replaces all vowels \n    in the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode_decode('test')\n    'TGST'\n    >>> encode_decode('tHKS KS C MGSSCGG')\n    'This is a message'\n    \"\"\"\n    new_message = ''\n    for letter in message:\n        if letter.lower() in ['a', 'e', 'i', 'o', 'u']:\n            new_message += letter.upper()\n        else:\n            new_message += letter\n    return new_message"
    },
    {
      "rank": 36,
      "score": 9.930867849414408,
      "candidate": "# Write your code here\n    vowel = 'aeiouAEIOU'\n    new_message = ''\n    for char in message:\n        if char in vowel:\n            new_message += char.upper()\n        else:\n            new_message += char\n    return new_message\n\n\ndef decode(message):\n    \"\"\"\n    Write a function that takes a message, and decodes in such a \n    way that it replaces all vowels in the message with the letter \n    that appears 2 places ahead of that vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> decode('tHKS KS C MGSSCGG')\n    'test'\n    >>> decode('This is a message')\n    'This is a message'\n    \"\"\"\n    # Write your code here\n    vowel = 'aeiouAEIOU'\n    new_message = ''\n    for char in message:\n        if char.upper() in vowel:\n            new_message += char\n        else:\n            new_message += char.lower()\n    return new_message\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 37,
      "score": 9.907170511668092,
      "candidate": "vowels = 'aeiou'\n    new_message = ''\n    for letter in message:\n        if letter in vowels:\n            new_message += letter.swapcase()\n        else:\n            new_message += letter\n    return new_message\n\n\ndef decode(message):\n    \"\"\"\n    Write a function that takes a message, and decodes in such a way that it \n    replaces all vowels in the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> decode('TGST')\n    'test'\n    >>> decode('tHKS KS C MGSSCGG')\n    'This is a message'\n    \"\"\"\n    vowels = 'aeiou'\n    new_message = ''\n    for letter in message:\n        if letter in vowels:\n            new_message += letter.swapcase()\n        else:\n            new_message += letter\n    return new_message\n\n\ndef main():\n    import doctest\n    doctest.testmod()\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 38,
      "score": 9.890164056081243,
      "candidate": "vowel_list = ['a','e','i','o','u']\n    new_message = ''\n    for letter in message:\n        if letter in vowel_list:\n            new_message += letter.upper()\n            new_message += letter.lower()\n            new_message += letter.capitalize()\n        else:\n            new_message += letter\n    return new_message\n\n\ndef decode(message):\n    \"\"\"\n    Write a function that takes a message, and decodes in such a way that it \n    swaps case of all letters, replaces all vowels in the message with \n    the letter that appears 2 places ahead of that vowel in the english \n    alphabet. Assume only letters. \n    \n    Examples:\n    >>> decode('TGST')\n    'test'\n    >>> decode('tHKS KS C MGSSCGG')\n    'This is a message'\n    \"\"\"\n    vowel_list = ['a','e','i','o','u']\n    new_message = ''\n    for letter in message:\n        if letter in vowel_list:\n            new_message += letter.upper()\n            new_message += letter.lower()\n            new_message += letter.capitalize()\n        else:\n            new_message += letter\n    return new_message\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 39,
      "score": 9.88293152152541,
      "candidate": "vowels = 'aeiou'\n    message = message.lower()\n    new_message = ''\n    for letter in message:\n        if letter in vowels:\n            new_message += letter * 2\n        else:\n            new_message += letter\n    return new_message\n\ndef decode(message):\n    \"\"\"\n    Write a function that takes a message, and decodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. Assume only letters. \n    \n    Examples:\n    >>> decode('TGST')\n    'test'\n    >>> decode('tHKS KS C MGSSCGG')\n    'This is a message'\n    \"\"\"\n    vowels = 'aeiou'\n    message = message.lower()\n    new_message = ''\n    for letter in message:\n        if letter in vowels:\n            new_message += letter * 2\n        else:\n            new_message += letter\n    return new_message\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 40,
      "score": 9.882706433312427,
      "candidate": "alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    new_message = ''\n    for char in message:\n        if char.lower() in alphabet:\n            new_char = alphabet.index(char.lower()) + 2\n            new_message += alphabet[new_char]\n        else:\n            new_message += char\n    return new_message\n\n\ndef decode(message):\n    \"\"\"\n    Write a function that takes a message, and decodes in such a way that it \n    replaces all vowels in the message with the letter that appears 2 places \n    ahead of that vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> decode('TGST')\n    'test'\n    >>> decode('tHKS KS C MGSSCGG')\n    'This is a message'\n    \"\"\"\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    new_message = ''\n    for char in message:\n        if char.lower() in alphabet:\n            new_char = alphabet.index(char.lower()) - 2\n            new_message += alphabet[new_char]\n        else:\n            new_message += char\n    return new_message\n\n\nprint(encode('test'))\nprint(encode('This is a message'))\nprint(decode('tHKS KS C MGSSCGG'))"
    },
    {
      "rank": 41,
      "score": 9.849448152205355,
      "candidate": "vowels = 'aeiou'\n    new_message = ''\n    for letter in message:\n        if letter in vowels:\n            new_message += letter.upper()\n        else:\n            new_message += letter\n    return new_message\n\n\ndef decode(message):\n    \"\"\"\n    Write a function that takes a message, and decodes in such a \n    way that it replaces all vowels in the message with the letter that appears \n    2 places ahead of that vowel in the english alphabet. Assume only letters. \n    \n    Examples:\n    >>> decode('tHKS KS C MGSSCGG')\n    'test'\n    >>> decode('This is a message')\n    'This is a message'\n    \"\"\"\n    vowels = 'aeiou'\n    new_message = ''\n    for letter in message:\n        if letter.lower() in vowels:\n            new_message += letter.upper()\n        else:\n            new_message += letter\n    return new_message\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 42,
      "score": 9.845393812074393,
      "candidate": "alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    new_message = ''\n    for letter in message:\n        if letter.lower() in alphabet:\n            new_message += alphabet[(alphabet.index(letter.lower()) + 2) % 26]\n        else:\n            new_message += letter\n    return new_message\n\n\ndef decode(message):\n    \"\"\"\n    Write a function that takes a message, and decodes in such a \n    way that it replaces all vowels in the message with the letter that \n    appears 2 places ahead of that vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> decode('TGST')\n    'test'\n    >>> decode('tHKS KS C MGSSCGG')\n    'This is a message'\n    \"\"\"\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    new_message = ''\n    for letter in message:\n        if letter.lower() in alphabet:\n            new_message += alphabet[(alphabet.index(letter.lower()) - 2) % 26]\n        else:\n            new_message += letter\n    return new_message"
    },
    {
      "rank": 43,
      "score": 9.836168926701117,
      "candidate": "vowels = \"aeiouAEIOU\"\n    new_message = ''\n    for letter in message:\n        if letter in vowels:\n            new_message += letter.upper()\n        else:\n            new_message += letter\n    return new_message\n\n\ndef decode(message):\n    \"\"\"\n    Write a function that takes a message, and decodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. Assume only letters. \n    \n    Examples:\n    >>> decode('TGST')\n    'test'\n    >>> decode('tHKS KS C MGSSCGG')\n    'This is a message'\n    \"\"\"\n    vowels = \"AEIOU\"\n    new_message = ''\n    for letter in message:\n        if letter.upper() in vowels:\n            new_message += letter\n        else:\n            new_message += letter.lower()\n    return new_message\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod(verbose=True)"
    },
    {
      "rank": 44,
      "score": 9.803945923433922,
      "candidate": "alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    vowel = 'aeiou'\n    new_message = ''\n    for letter in message:\n        if letter in alphabet:\n            new_message += alphabet[alphabet.index(letter)+2]\n        else:\n            new_message += letter\n    return new_message\n\n\ndef decode(message):\n    \"\"\"\n    Write a function that takes a message, and decodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. Assume only letters. \n    \n    Examples:\n    >>> decode('TGST')\n    'test'\n    >>> decode('tHKS KS C MGSSCGG')\n    'This is a message'\n    \"\"\"\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    vowel = 'aeiou'\n    new_message = ''\n    for letter in message:\n        if letter in alphabet:\n            new_message += alphabet[alphabet.index(letter)-2]\n        else:\n            new_message += letter\n    return new_message\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 45,
      "score": 9.765262807032524,
      "candidate": "vowels = 'aeiou'\n    result = []\n    for letter in message:\n        if letter.lower() in vowels:\n            result.append(letter.upper())\n        else:\n            result.append(letter)\n    return \"\".join(result)\n\n\ndef decode(message):\n    \"\"\"\n    Write a function that takes a message, and decodes in such a way that it \n    swaps case of all letters, replaces all vowels in the message with \n    the letter that appears 2 places ahead of that vowel in the english \n    alphabet. Assume only letters. \n    \n    Examples:\n    >>> decode('TGST')\n    'test'\n    >>> decode('tHKS KS C MGSSCGG')\n    'This is a message'\n    \"\"\"\n    vowels = 'aeiou'\n    result = []\n    for letter in message:\n        if letter.upper() in vowels:\n            result.append(letter.lower())\n        else:\n            result.append(letter)\n    return \"\".join(result)\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 46,
      "score": 9.73511989811648,
      "candidate": "alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    vowels = 'aeiou'\n    \n    message = message.lower()\n    new_message = ''\n    for letter in message:\n        if letter in vowels:\n            if len(new_message) > 0:\n                new_message += alphabet[alphabet.index(letter)+2]\n            else:\n                new_message += alphabet[alphabet.index(letter)]\n        else:\n            new_message += letter\n    return new_message\n\ndef decode(message):\n    \"\"\"\n    Write a function that takes a message, and decodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> decode('TGST')\n    'test'\n    >>> decode('This is a message')\n    'This is a message'\n    \"\"\"\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    vowels = 'aeiou'\n    \n    message = message.lower()\n    new_message = ''\n    for letter in message:\n        if letter in vowels:\n            if len(new_message) > 0:\n                new_message += alphabet[alphabet.index(letter)-2]\n            else:\n                new_message += alphabet[alphabet.index(letter)]\n        else:\n            new_message += letter\n    return new_message\n    \n    \nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 47,
      "score": 9.72780863773741,
      "candidate": "encoded_message = ''\n    for letter in message:\n        if letter.lower() in 'aeiou':\n            encoded_message += letter.upper()\n        else:\n            encoded_message += letter\n    return encoded_message\n    \ndef decode(message):\n    \"\"\"\n    Write a function that takes a message, and decodes in such a way that \n    it replaces all vowels in the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. Assume only letters. \n    \n    Examples:\n    >>> decode('TGST')\n    'test'\n    >>> decode('tHKS KS C MGSSCGG')\n    'This is a message'\n    \"\"\"\n    decoded_message = ''\n    for letter in message:\n        if letter.lower() in 'aeiou':\n            decoded_message += letter.lower()\n        else:\n            decoded_message += letter\n    return decoded_message"
    },
    {
      "rank": 48,
      "score": 9.718856235379514,
      "candidate": "vowels = 'aeiouAEIOU'\n    message = list(message)\n    for i in range(len(message)):\n        if message[i].lower() in vowels:\n            message[i] = vowels[vowels.index(message[i].lower())]\n        else:\n            message[i] = message[i].lower()\n    return ''.join(message)\n\n\ndef decode(message):\n    \"\"\"\n    Write a function that takes a message, and decodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. Assume only letters. \n    \n    Examples:\n    >>> decode('tHKS KS C MGSSCGG')\n    'test'\n    >>> decode('This is a message')\n    'This is a message'\n    \"\"\"\n    vowels = 'aeiouAEIOU'\n    message = list(message)\n    for i in range(len(message)):\n        if message[i].lower() in vowels:\n            message[i] = vowels[vowels.index(message[i].lower())]\n        else:\n            message[i] = message[i].lower()\n    return ''.join(message)\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 49,
      "score": 9.699146693885302,
      "candidate": "# write your code here\n    vowels = 'aeiouAEIOU'\n    result = ''\n    for char in message:\n        if char.lower() in vowels:\n            result += char.upper() * 2\n        else:\n            result += char\n    return result\n\n\ndef decode(message):\n    \"\"\"\n    Write a function that takes a message, and decodes in such a \n    way that it replaces all vowels in the message with the letter that \n    appears 2 places ahead of that vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> decode('TGST')\n    'test'\n    >>> decode('tHKS KS C MGSSCGG')\n    'This is a message'\n    \"\"\"\n    # write your code here\n    vowels = 'aeiouAEIOU'\n    result = ''\n    for char in message:\n        if char.lower() in vowels:\n            result += char\n        else:\n            result += char.lower()\n    return result\n\n\ndef main():\n    import doctest\n    doctest.testmod()\n    message = input('Enter a message: ')\n    print(encode(message))\n    print(decode(encode(message)))\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 50,
      "score": 9.677440122697439,
      "candidate": "result = \"\"\n    for letter in message:\n        if letter.lower() in \"aeiou\":\n            result += letter.upper()\n        else:\n            result += letter\n\n    return result\n\n\ndef decode(message):\n    \"\"\"\n    Write a function that takes a message, and decodes in such a \n    way that it swaps case of all letters, replaces all vowels \n    in the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. Assume only letters. \n    \n    Examples:\n    >>> decode('TGST')\n    'test'\n    >>> decode('tHKS KS C MGSSCGG')\n    'This is a message'\n    \"\"\"\n    result = \"\"\n    for letter in message:\n        if letter.upper() in \"AEIOU\":\n            result += letter.lower()\n        else:\n            result += letter\n\n    return result\n\n\ndef main():\n    message = input(\"Enter a message: \")\n    print(encode(message))\n    print(decode(encode(message)))\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 51,
      "score": 9.661538999847021,
      "candidate": "message = message.lower()\n    vowels = 'aeiou'\n\n    encoded = ''\n    for char in message:\n        if char in vowels:\n            index = vowels.index(char)\n            encoded += vowels[index + 2]\n        else:\n            encoded += char\n\n    return encoded\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 52,
      "score": 9.648973453061323,
      "candidate": "# write your code here\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    encoded_message = ''\n    for letter in message:\n        if letter.lower() in alphabet:\n            encoded_message += alphabet[alphabet.index(letter) + 2]\n        else:\n            encoded_message += letter\n    return encoded_message\n\n\ndef decode(message):\n    \"\"\"\n    Write a function that takes a message, and decodes in such a \n    way that it replaces all vowels in the message with the letter that \n    appears 2 places ahead of that vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> decode('tHKS KS C MGSSCGG')\n    'test'\n    >>> decode('This is a message')\n    'This is a message'\n    \"\"\"\n    # write your code here\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    decoded_message = ''\n    for letter in message:\n        if letter.lower() in alphabet:\n            decoded_message += alphabet[alphabet.index(letter) - 2]\n        else:\n            decoded_message += letter\n    return decoded_message\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 53,
      "score": 9.595753198553407,
      "candidate": "# Your code here\n    encoded = []\n    for i in message:\n        if i.lower() in 'aeiou':\n            encoded.append(i.upper())\n        elif i.lower() in 'aeiouaeiou':\n            encoded.append(i.upper() + '2')\n        else:\n            encoded.append(i)\n    return ''.join(encoded)\n\n\ndef decode(message):\n    \"\"\"\n    Write a function that takes a message, and decodes in such a \n    way that it replaces all vowels in the message with the letter that \n    appears 2 places ahead of that vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> decode('TGST')\n    'test'\n    >>> decode('tHKS KS C MGSSCGG')\n    'This is a message'\n    \"\"\"\n    # Your code here\n    decoded = []\n    for i in message:\n        if i.upper() in 'aeiouaeiou':\n            decoded.append(i.lower())\n        elif i.upper() in 'aeiou':\n            decoded.append(i.lower() + '2')\n        else:\n            decoded.append(i)\n    return ''.join(decoded)\n\n\ndef main():\n    import doctest\n    doctest.testmod()\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 54,
      "score": 9.58039123838868,
      "candidate": "vowels = 'aeiouAEIOU'\n    new_message = ''\n    for letter in message:\n        if letter in vowels:\n            index = vowels.find(letter)\n            new_message += vowels[index - 2] + letter\n        else:\n            new_message += letter\n    return new_message\n\n\ndef decode(message):\n    \"\"\"\n    Write a function that takes a message, and decodes in such a way that it \n    replaces all vowels in the message with the letter that appears 2 places \n    ahead of that vowel in the english alphabet. Assume only letters. \n    \n    Examples:\n    >>> decode('TGST')\n    'test'\n    >>> decode('tHKS KS C MGSSCGG')\n    'This is a message'\n    \"\"\"\n    vowels = 'aeiouAEIOU'\n    new_message = ''\n    for letter in message:\n        if letter in vowels:\n            index = vowels.find(letter)\n            new_message += vowels[index + 2] + letter\n        else:\n            new_message += letter\n    return new_message\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 55,
      "score": 9.545987962239394,
      "candidate": "vowels = ['a', 'e', 'i', 'o', 'u']\n    message = message.lower()\n    new_message = ''\n    for letter in message:\n        if letter in vowels:\n            new_message += letter * (2 + vowels.index(letter))\n        else:\n            new_message += letter\n    return new_message\n\n\ndef decode(message):\n    \"\"\"\n    Write a function that takes a message, and decodes in such a way that it \n    swaps case of all letters, replaces all vowels in the message with \n    the letter that appears 2 places ahead of that vowel in the \n    english alphabet. Assume only letters. \n    \n    Examples:\n    >>> decode('TGST')\n    'test'\n    >>> decode('tHKS KS C MGSSCGG')\n    'This is a message'\n    \"\"\"\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    message = message.lower()\n    new_message = ''\n    for letter in message:\n        if letter in vowels:\n            new_message += letter * (2 - vowels.index(letter))\n        else:\n            new_message += letter\n    return new_message\n\n\ndef test_encode():\n    assert encode('test') == 'TGST'\n    assert encode('This is a message') == 'tHKS KS C MGSSCGG'\n\n\ndef test_decode():\n    assert decode('TGST') == 'test'\n    assert decode('tHKS KS C MGSSCGG') == 'This is a message'\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 56,
      "score": 9.47114453552205,
      "candidate": "vowels = 'aeiou'\n    encoded_message = ''\n    for char in message:\n        if char in vowels:\n            encoded_message += char.upper()\n            encoded_message += char.lower()\n            encoded_message += char\n            encoded_message += char\n            encoded_message += char\n            encoded_message += char\n            encoded_message += char\n            encoded_message += char\n            encoded_message += char\n        else:\n            encoded_message += char\n    return encoded_message\n\n\ndef decode(message):\n    \"\"\"\n    Write a function that takes a message, and decodes in such a way that it \n    swaps case of all letters, replaces all vowels in the message with the \n    letter that appears 2 places ahead of that vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> decode('TGST')\n    'test'\n    >>> decode('tHKS KS C MGSSCGG')\n    'This is a message'\n    \"\"\"\n    vowels = 'aeiou'\n    decoded_message = ''\n    for char in message:\n        if char in vowels:\n            decoded_message += char.lower()\n            decoded_message += char.upper()\n            decoded_message += char\n            decoded_message += char\n            decoded_message += char\n            decoded_message += char\n            decoded_message += char\n            decoded_message += char\n        else:\n            decoded_message += char\n    return decoded_message\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 57,
      "score": 9.446832512996986,
      "candidate": "message = message.lower()\n    vowels = 'aeiou'\n    result = []\n    for letter in message:\n        if letter in vowels:\n            result.append(message[0] + message[1] + message[2])\n        else:\n            result.append(message[0] + message[1] + message[2] + message[3])\n    return ''.join(result)\n\n\ndef decode(message):\n    \"\"\"\n    Write a function that takes a message, and decodes in such a way that it \n    replaces all vowels in the message with the letter that appears 2 places \n    ahead of that vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> decode('tHKS KS C MGSSCGG')\n    'test'\n    >>> decode('This is a message')\n    'This is a message'\n    \"\"\"\n    message = message.lower()\n    vowels = 'aeiou'\n    result = []\n    for letter in message:\n        if letter in vowels:\n            result.append(message[0] + message[1] + message[2] + message[3])\n        else:\n            result.append(message[0] + message[1] + message[2] + message[4])\n    return ''.join(result)\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 58,
      "score": 9.42450321128885,
      "candidate": "pass"
    },
    {
      "rank": 59,
      "score": 9.389578175014488,
      "candidate": "vowels = \"aeiouAEIOU\"\n    return \"\".join(vowel if message.startswith(vowel) else letter for letter, vowel in zip(message, vowels))\n\ndef decode(message):\n    \"\"\"\n    Write a function that takes a message, and decodes in such a \n    way that it converts a message back to a string. \n    Assume only letters. \n    \n    Examples:\n    >>> decode('TGST')\n    'test'\n    >>> decode('tHKS KS C MGSSCGG')\n    'This is a message'\n    \"\"\"\n    vowels = \"aeiouAEIOU\"\n    return \"\".join(vowel if message.startswith(vowel) else letter for letter, vowel in zip(message, vowels))\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 60,
      "score": 9.335906975550785,
      "candidate": "vowels = 'aeiouAEIOU'\n    message = message.lower()\n    message = message.replace(' ', '')\n    new_message = ''\n    for letter in message:\n        if letter in vowels:\n            new_message += letter\n            new_message += '2'\n        else:\n            new_message += letter\n    return new_message\n\n\ndef decode(message):\n    \"\"\"\n    Write a function that takes a message, and decodes in such a way that it \n    swaps case of all letters, replaces all vowels in the message with \n    the letter that appears 3 places ahead of that vowel in the english \n    alphabet. Assume only letters. \n    \n    Examples:\n    >>> decode('test')\n    'TGST'\n    >>> decode('This is a message')\n    'This is a message'\n    \"\"\"\n    vowels = 'aeiouAEIOU'\n    message = message.lower()\n    message = message.replace('2', '')\n    message = message.replace('3', '')\n    new_message = ''\n    for letter in message:\n        if letter in vowels:\n            new_message += letter\n            new_message += '1'\n        else:\n            new_message += letter\n    return new_message\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 61,
      "score": 9.293848149332355,
      "candidate": "# Your code here\n    new_message = \"\"\n    \n    for letter in message:\n        if letter.lower() == 'a' or letter.lower() == 'e' or letter.lower() == 'i' or letter.lower() == 'o' or letter.lower() == 'u':\n            new_message += letter.lower()\n        elif letter.lower() == 'u' or letter.lower() == 'i':\n            new_message += letter.upper()\n        elif letter.lower() == 'e' or letter.lower() == 'o':\n            new_message += letter.upper()\n        elif letter.lower() == 'i' or letter.lower() == 'u':\n            new_message += letter.lower()\n        elif letter.lower() == 'a' or letter.lower() == 'e':\n            new_message += letter.upper()\n        elif letter.lower() == 'i' or letter.lower() == 'u':\n            new_message += letter.upper()\n        elif letter.lower() == 'e' or letter.lower() == 'o':\n            new_message += letter.upper()\n        elif letter.lower() == 'i' or letter.lower() == 'u':\n            new_message += letter.upper()\n        else:\n            new_message += letter\n    \n    return new_message\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 62,
      "score": 9.287625906893272,
      "candidate": "vowels = 'aeiou'\n    vowels_index = [i for i in range(len(vowels))]\n    message = list(message)\n\n    for i in range(len(message)):\n        if message[i].lower() in vowels_index:\n            message[i] = vowels[vowels_index.index(message[i].lower())+2]\n        else:\n            message[i] = message[i].lower()\n\n    return ''.join(message)\n\ndef decode(message):\n    \"\"\"\n    Write a function that takes a message, and decodes in such a way that \n    it decodes the message back to a string. Assume only letters. \n    \n    Examples:\n    >>> decode('TGST')\n    'test'\n    >>> decode('tHKS KS C MGSSCGG')\n    'This is a message'\n    \"\"\"\n\n    vowels = 'aeiou'\n    vowels_index = [i for i in range(len(vowels))]\n    message = list(message)\n\n    for i in range(len(message)):\n        if message[i].lower() in vowels_index:\n            message[i] = vowels[vowels_index.index(message[i].lower())-1]\n        else:\n            message[i] = message[i].lower()\n\n    return ''.join(message)\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 63,
      "score": 9.260739004816287,
      "candidate": "# Your code here\n    new_message = []\n    for letter in message:\n        if letter.lower() in ['a','e','i','o','u']:\n            new_message.append(letter.upper())\n        else:\n            new_message.append(letter)\n    return ''.join(new_message)\n    \n    \ndef decode(message):\n    \"\"\"\n    Write a function that takes a message, and decodes in such a way that it \n    replaces all vowels in the message with the letter that appears 2 places \n    ahead of that vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> decode('test')\n    'TGST'\n    >>> decode('This is a message')\n    'This is a message'\n    \"\"\"\n    # Your code here\n    new_message = []\n    for letter in message:\n        if letter.lower() in ['a','e','i','o','u']:\n            new_message.append(letter.lower())\n        else:\n            new_message.append(letter)\n    return ''.join(new_message)\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 64,
      "score": 9.137541083743484,
      "candidate": "return ''.join(map(lambda x: x.lower(), message))\n\n\ndef decode(message):\n    \"\"\"\n    Write a function that takes a message, and decodes in such a way \n    that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. Assume only letters. \n    \n    Examples:\n    >>> decode('tHKS KS C MGSSCGG')\n    'test'\n    >>> decode('this is a message')\n    'This is a message'\n    \"\"\"\n    return ''.join(map(lambda x: x.upper(), message))\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 65,
      "score": 9.118479922318633,
      "candidate": "message = message.lower()\n    vowels = 'aeiou'\n    message = ''.join([i if i in vowels else'' for i in message])\n    return message\n\ndef decode(message):\n    \"\"\"\n    Write a function that takes a message, and decodes in such a \n    way that it replaces all vowels in the message with the letter that \n    appears 2 places ahead of that vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> decode('tHKS KS C MGSSCGG')\n    'test'\n    >>> decode('test')\n    'test'\n    \"\"\"\n    message = message.lower()\n    vowels = 'aeiou'\n    message = ''.join([i if i in vowels else'' for i in message])\n    return message\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 66,
      "score": 9.0433598776711,
      "candidate": "# Your code here\n    pass\n\n\ndef decode(message):\n    \"\"\"\n    Write a function that takes a message, and decodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. Assume only letters. \n    \n    Examples:\n    >>> decode('TGST')\n    'test'\n    >>> decode('tHKS KS C MGSSCGG')\n    'This is a message'\n    \"\"\"\n\n    # Your code here\n    pass\n\n\ndef main():\n    import doctest\n    doctest.testmod()\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
      "rank": 67,
      "score": 9.006215542699554,
      "candidate": "vowels = 'aeiou'\n    vowels_index = [vowels.index(letter) for letter in message]\n    vowels_index_position = vowels_index + [len(vowels)]\n    vowels_index_position_position = [vowels_index_position[i] for i in range(len(vowels_index_position))]\n    vowels_index_position_position = [vowels_index_position_position[i] - 1 for i in range(len(vowels_index_position))]\n    vowels_index_position_position = [vowels_index_position_position[i] + 1 for i in range(len(vowels_index_position))]\n    vowels_index_position_position = [vowels_index_position_position[i] for i in range(len(vowels_index_position))]\n    vowels_index_position_position = [vowels_index_position_position[i] for i in range(len(vowels_index_position))]\n    vowels_index_position_position = [vowels_index_position_position[i] for i in range(len(vowels_index_position))]\n    vowels_index_position_position = [vowels_index_position_position[i] for i in range(len(vowels_index_position))]\n    vowels_index_position_position = [vowels_index_position_position[i] for i in range(len(vowels_index_position))]\n    vowels_index_position_position = [vowels_index_position_position[i] for i in range(len(vowels_index_position))]\n    vowels_index_position_position = [vowels_index_position_position[i] for i in range(len(vowels_index_position))]\n    vowels_index_position_position = [vowels_index_position_position[i] for i in range(len(vowels_index_position))]\n    vowels_index_position_position = [vowels_index_position_position[i] for i in range(len(vowels_index_position))]\n    v"
    },
    {
      "rank": 68,
      "score": 8.690127447955128,
      "candidate": "alphabet = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n    message = message.lower()\n    encode_list = []\n    for i in message:\n        if i in alphabet:\n            encode_list.append(alphabet[alphabet.index(i)])\n        else:\n            encode_list.append(i)\n    return ''.join(encode_list)\n\n\ndef decode(message):\n    \"\"\"\n    Write a function that takes a message, and decodes in such a way that it \n    decodes in such a way that it replaces all vowels in the message \n    with the letter that appears 2 places ahead of that vowel in the \n    english alphabet. Assume only letters. \n    \n    Examples:\n    >>> decode('TGST')\n    'test'\n    >>> decode('tHKS KS C MGSSCGG')\n    'This is a message'\n    \"\"\"\n    \n    alphabet = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n    message = message.lower()\n    decode_list = []\n    for i in message:\n        if i in alphabet:\n            decode_list.append(alphabet[alphabet.index(i)])\n        else:\n            decode_list.append(i)\n    return ''.join(decode_list)"
    },
    {
      "rank": 69,
      "score": 3.4873695540505683,
      "candidate": "vowel = 'aeiou'\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    \n    new_message = ''\n    for char in message:\n        if char in vowel:\n            new_message += alphabet[(alphabet.index(char)+1)%26]\n        else:\n            new_message += char\n    return new_message\n    \n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 70,
      "score": 3.4690076060548973,
      "candidate": "return ''.join([message[0].lower() if i==0 else message[1:len(message)] for i in range(len(message))])\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 71,
      "score": 3.4339968091426636,
      "candidate": "vowel = \"aeiou\"\n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    new_message = \"\"\n    for letter in message:\n        if letter in vowel:\n            new_message += alphabet[vowel.index(letter)]\n        else:\n            new_message += letter\n    return new_message\n\n\ndef decode(message):\n    \"\"\"\n    Write a function that takes a message, and decodes in such a \n    way that it replaces all vowels in the message with the letter that \n    appears 2 places ahead of that vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> decode('TGST')\n    'test'\n    >>> decode('tHKS KS C MGSSCGG')\n    'This is a message'\n    \"\"\"\n    vowel = \"aeiou\"\n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    new_message = \"\"\n    for letter in message:\n        if letter in vowel:\n            new_message += alphabet[vowel.index(letter)]\n        else:\n            new_message += letter\n    return new_message"
    },
    {
      "rank": 72,
      "score": 3.321130527325448,
      "candidate": "vowels = 'aeiouAEIOU'\n    new_message = ''\n    for letter in message:\n        if letter.lower() in vowels:\n            new_message += letter.upper()\n        else:\n            new_message += letter\n    return new_message\n\n\ndef decode(message):\n    \"\"\"\n    Write a function that takes a message, and decodes in such a way that it \n    replaces all vowels in the message with the letter that appears 2 places ahead \n    of that vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> decode('tHKS KS C MGSSCGG')\n    'test'\n    >>> decode('This is a message')\n    'This is a message'\n    \"\"\"\n    vowels = 'AEIOUaeiouAEIOU'\n    new_message = ''\n    for letter in message:\n        if letter.upper() in vowels:\n            new_message += letter.lower()\n        else:\n            new_message += letter\n    return new_message"
    },
    {
      "rank": 73,
      "score": 3.3099663969705246,
      "candidate": "vowels = \"aeiouAEIOU\"\n    message = message.lower()\n    message = \"\".join([c for c in message if c.isalpha()])\n    message = \"\".join([c if c.isalpha() else c.lower() for c in message])\n    message = \"\".join([c if c.isalpha() else c.lower() for c in message if c not in vowels])\n    return message\n    \n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod(verbose=True)"
    },
    {
      "rank": 74,
      "score": 3.2600082631661436,
      "candidate": "# Your code here\n    vowels = 'aeiouAEIOU'\n    new_message = ''\n    for char in message:\n        if char in vowels:\n            new_message += char.upper()\n        else:\n            new_message += char\n    return new_message\n    \nprint(encode('test'))\nprint(encode('This is a message'))"
    },
    {
      "rank": 75,
      "score": 3.245579113328931,
      "candidate": "alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    new_message = ''\n    for letter in message:\n        if letter in alphabet:\n            new_message += alphabet[alphabet.index(letter)+2]\n        else:\n            new_message += letter\n    return new_message\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 76,
      "score": 3.1642455785962738,
      "candidate": "vowels = 'aeiou'\n    new_message = ''\n    for char in message:\n        if char.lower() in vowels:\n            if len(char) > 1:\n                new_message += char[0] + char[1] * 2\n            else:\n                new_message += char\n        else:\n            new_message += char\n    return new_message\n\n\ndef decode(message):\n    \"\"\"\n    Write a function that takes a message, and decodes in such a way that it \n    swaps case of all letters, replaces all vowels in the message with \n    the letter that appears 2 places ahead of that vowel in the english \n    alphabet. Assume only letters. \n    \n    Examples:\n    >>> decode('tHKS KS C MGSSCGG')\n    'test'\n    >>> decode('This is a message')\n    'This is a message'\n    \"\"\"\n    vowels = 'aeiou'\n    new_message = ''\n    for char in message:\n        if char.lower() in vowels:\n            if len(char) > 1:\n                new_message += char[0]\n            else:\n                new_message += char\n        else:\n            new_message += char\n    return new_message\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 77,
      "score": 3.120223365870615,
      "candidate": "vowel_list = ['a', 'e', 'i', 'o', 'u']\n    new_message = ''\n    for letter in message:\n        if letter in vowel_list:\n            new_message += letter.swapcase() * 2\n        else:\n            new_message += letter\n    return new_message\n\nprint(encode('test'))"
    },
    {
      "rank": 78,
      "score": 3.115723528015243,
      "candidate": "# Your code here\n    new_string = ''\n    \n    for letter in message:\n        if letter == 'A':\n            new_string += letter.upper()\n        elif letter == 'B':\n            new_string += letter.lower()\n        elif letter == 'C':\n            new_string += letter.upper()\n        elif letter == 'D':\n            new_string += letter.lower()\n        elif letter == 'E':\n            new_string += letter.upper()\n        elif letter == 'F':\n            new_string += letter.lower()\n        elif letter == 'G':\n            new_string += letter.upper()\n        elif letter == 'H':\n            new_string += letter.lower()\n        elif letter == 'I':\n            new_string += letter.upper()\n        elif letter == 'J':\n            new_string += letter.lower()\n        elif letter == 'K':\n            new_string += letter.upper()\n        elif letter == 'L':\n            new_string += letter.lower()\n        elif letter == 'M':\n            new_string += letter.upper()\n        elif letter == 'N':\n            new_string += letter.lower()\n        elif letter == 'O':\n            new_string += letter.upper()\n        elif letter == 'P':\n            new_string += letter.lower()\n        elif letter == 'Q':\n            new_string += letter.upper()\n        elif letter == 'R':\n            new_string += letter.lower()\n        elif letter == 'S':\n            new_string += letter.upper()\n        elif letter == 'T':\n            new_string += letter.lower()\n        elif letter == 'U':\n            new_string += letter.upper()\n        elif letter == 'V':\n            new_string += letter.lower()\n        elif letter == 'W':\n            new_string += letter.upper()\n        elif letter == 'X':\n            new_string += letter.lower()\n        elif letter == 'Y':\n            new_string += letter.upper()\n        elif letter == 'Z':\n            new_string += letter.lower()\n        elif letter =='':\n            new_string += letter.upper()"
    },
    {
      "rank": 79,
      "score": 3.1156465937626923,
      "candidate": "encode = \"\"\n    for letter in message:\n        if letter.lower() in \"aeiou\":\n            encode += letter.upper()\n            encode += letter\n            encode += letter\n            encode += letter\n            encode += letter\n        elif letter.lower() in \"aeiouAEIOU\":\n            encode += letter.upper()\n            encode += letter\n            encode += letter\n            encode += letter\n            encode += letter\n            encode += letter\n        elif letter.lower() in \"aeiouAEIOU\":\n            encode += letter.upper()\n            encode += letter\n            encode += letter\n            encode += letter\n            encode += letter\n        elif letter.lower() in \"aeiouAEIOUAEIOU\":\n            encode += letter.upper()\n            encode += letter\n            encode += letter\n            encode += letter\n            encode += letter\n            encode += letter\n    return encode\n    \nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 80,
      "score": 3.109957852661908,
      "candidate": "return ''.join(\n        [\n            c if c in 'aeiou' else c.upper() if c in 'AEIOU' else c.lower()\n            for c in message\n        ]\n    )\n\n\ndef decode(message):\n    \"\"\"\n    Write a function that takes a message, and decodes in such a way that it \n    decodes in such a way that it swaps case of all letters, replaces \n    all vowels in the message with the letter that appears 2 places ahead \n    of that vowel in the english alphabet. Assume only letters. \n    \n    Examples:\n    >>> decode('test')\n    'test'\n    >>> decode('This is a message')\n    'This is a message'\n    \"\"\"\n    return ''.join(\n        [\n            c if c in 'AEIOU' else c.lower() if c in 'aeiou' else c.upper()\n            for c in message\n        ]\n    )"
    },
    {
      "rank": 81,
      "score": 3.1060042980491405,
      "candidate": "result = \"\"\n    vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    for letter in message:\n        if letter.lower() in vowels:\n            result += letter.lower()\n            result += message[message.index(letter)+1]\n            result += message[message.index(letter)+2]\n        else:\n            result += letter\n    return result\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 82,
      "score": 3.077427926901131,
      "candidate": "# Your code here\n    vowels = \"aeiouAEIOU\"\n    new_message = \"\"\n    for letter in message:\n        if letter in vowels:\n            index = vowels.index(letter)\n            new_message += vowels[(index + 2) % len(vowels)]\n        else:\n            new_message += letter\n    return new_message\n\n\ndef decode(message):\n    \"\"\"\n    Write a function that takes a message, and decodes in such a way that it \n    replaces all letters with the letter that appears 2 places ahead of \n    that vowel in the english alphabet. Assume only letters. \n    \n    Examples:\n    >>> decode('test')\n    'test'\n    >>> decode('This is a message')\n    'This is a message'\n    \"\"\"\n\n    # Your code here\n    vowels = \"aeiouAEIOU\"\n    new_message = \"\"\n    for letter in message:\n        if letter in vowels:\n            index = vowels.index(letter)\n            new_message += vowels[(index - 1) % len(vowels)]\n        else:\n            new_message += letter\n    return new_message"
    },
    {
      "rank": 83,
      "score": 3.0548378499807907,
      "candidate": "letters = 'abcdefghijklmnopqrstuvwxyz'\n    new_message = []\n    for letter in message:\n        if letter.lower() in letters:\n            new_message.append(letters[letters.index(letter.lower())+1])\n        else:\n            new_message.append(letter)\n    return ''.join(new_message)"
    },
    {
      "rank": 84,
      "score": 2.9277515838443087,
      "candidate": "vowels = 'aeiou'\n    new_message = ''\n    for char in message:\n        if char in vowels:\n            new_message += char.upper()\n            new_message += char.lower() * 2\n        else:\n            new_message += char\n    return new_message\n\nprint(encode('test'))\nprint(encode('This is a message'))\n\n\ndef decode(message):\n    \"\"\"\n    Write a function that takes a message, and decodes in such a way that it \n    replaces all vowels in the message with the letter that appears 2 places \n    ahead of that vowel in the english alphabet. Assume only letters. \n    \n    Examples:\n    >>> decode('TGST')\n    'test'\n    >>> decode('tHKS KS C MGSSCGG')\n    'This is a message'\n    \"\"\"\n    vowels = 'aeiou'\n    new_message = ''\n    for char in message:\n        if char in vowels:\n            new_message += char.upper()\n            new_message += char.lower() * 2\n        else:\n            new_message += char\n    return new_message\n\nprint(decode('TGST'))\nprint(decode('tHKS KS C MGSSCGG'))"
    },
    {
      "rank": 85,
      "score": 2.9250709200885323,
      "candidate": "alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    vowels = 'aeiou'\n    new_message = ''\n    \n    for char in message:\n        if char.lower() in alphabet:\n            new_message += alphabet[alphabet.index(char) + 2]\n        else:\n            new_message += char\n            \n    return new_message\n\n\ndef decode(message):\n    \"\"\"\n    Write a function that takes a message, and decodes in such a way that it \n    converts back the message into a letter, replacing all vowels \n    in the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> decode('tHKS KS C MGSSCGG')\n    'test'\n    >>> decode('This is a message')\n    'test'\n    \"\"\"\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    vowels = 'aeiou'\n    new_message = ''\n    \n    for char in message:\n        if char.lower() in alphabet:\n            new_message += alphabet[alphabet.index(char) - 2]\n        else:\n            new_message += char\n            \n    return new_message"
    },
    {
      "rank": 86,
      "score": 2.9066580000661513,
      "candidate": "return ''.join(\n        [\n            letter if letter in 'aeiou' else letter[1] + letter[0] * 2\n            for letter in message\n        ]\n    )"
    },
    {
      "rank": 87,
      "score": 2.9043176478509225,
      "candidate": "encoded_message = ''\n    for letter in message:\n        if letter.lower() in 'aeiou':\n            encoded_message += letter.lower()\n            encoded_message += letter.lower()\n            encoded_message += letter.lower()\n            encoded_message += letter.lower()\n            encoded_message += letter.lower()\n        else:\n            encoded_message += letter\n    return encoded_message\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 88,
      "score": 2.8767736702667785,
      "candidate": "vowel = ['a', 'e', 'i', 'o', 'u']\n    message = message.lower()\n    new_message = ''\n    for letter in message:\n        if letter in vowel:\n            new_message += letter + letter.upper()\n            new_message += letter.lower()\n        else:\n            new_message += letter\n    return new_message\n\n\ndef decode(message):\n    \"\"\"\n    Write a function that takes a message, and decodes in such a way that it \n    swaps case of all letters, replaces all vowels in the message with the \n    letter that appears 2 places ahead of that vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> decode('tHKS KS C MGSSCGG')\n    'test'\n    >>> decode('this is a message')\n    'This is a message'\n    \"\"\"\n    vowel = ['a', 'e', 'i', 'o', 'u']\n    message = message.lower()\n    new_message = ''\n    for letter in message:\n        if letter in vowel:\n            new_message += letter.upper()\n            new_message += letter.lower()\n        else:\n            new_message += letter\n    return new_message\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 89,
      "score": 2.852595593292868,
      "candidate": "alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    vowels = \"aeiou\"\n\n    encoded_message = \"\"\n    for letter in message:\n        if letter in vowels:\n            encoded_message += alphabet[(alphabet.index(letter) + 2) % 26]\n        else:\n            encoded_message += letter\n\n    return encoded_message\n\n\ndef decode(message):\n    \"\"\"\n    Write a function that takes a message, and decodes in such a \n    way that it replaces all vowels in the message with the letter that \n    appears 2 places ahead of that vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> decode('TGST')\n    'test'\n    >>> decode('tHKS KS C MGSSCGG')\n    'This is a message'\n    \"\"\"\n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    vowels = \"aeiou\"\n\n    decoded_message = \"\"\n    for letter in message:\n        if letter in vowels:\n            decoded_message += alphabet[(alphabet.index(letter) - 2) % 26]\n        else:\n            decoded_message += letter\n\n    return decoded_message"
    },
    {
      "rank": 90,
      "score": 2.851706338300012,
      "candidate": "alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    vowels = 'aeiou'\n    new_message = ''\n    for letter in message:\n        if letter in vowels:\n            new_message += alphabet[alphabet.index(letter)+2]\n        else:\n            new_message += letter\n    return new_message"
    },
    {
      "rank": 91,
      "score": 2.8509664788575177,
      "candidate": "word = []\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    \n    for letter in message:\n        if letter.lower() in vowels:\n            word.append(letter.lower() * 2)\n        else:\n            word.append(letter)\n    return ''.join(word)\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 92,
      "score": 2.8466642438895073,
      "candidate": "alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    new_message = ''\n    for char in message:\n        if char in alphabet:\n            new_message += alphabet[alphabet.index(char)+2]\n        else:\n            new_message += char\n    return new_message\n\n\ndef decode(message):\n    \"\"\"\n    Write a function that takes a message, and decodes in such a way that \n    it swaps case of all letters, replaces all vowels in the message \n    with the letter that appears 2 places ahead of that vowel \n    in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> decode('TGST')\n    'test'\n    >>> decode('tHKS KS C MGSSCGG')\n    'This is a message'\n    \"\"\"\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    new_message = ''\n    for char in message:\n        if char in alphabet:\n            new_message += alphabet[alphabet.index(char)-2]\n        else:\n            new_message += char\n    return new_message\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 93,
      "score": 2.8394377460529485,
      "candidate": "vowels = 'aeiou'\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    new_message = ''\n    for letter in message:\n        if letter in vowels:\n            new_message += alphabet[(alphabet.index(letter)+2)%26]\n        else:\n            new_message += letter\n    return new_message\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 94,
      "score": 2.8341535301524328,
      "candidate": "vowels = 'aeiouAEIOU'\n    converted_message = []\n    \n    for letter in message:\n        if letter in vowels:\n            converted_message.append(letter.upper())\n        else:\n            converted_message.append(letter)\n            \n    return ''.join(converted_message)\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 95,
      "score": 2.8077956192259825,
      "candidate": "import string\n    alphabet = list(string.ascii_lowercase)\n    new_message = ''\n    for letter in message:\n        if letter in alphabet:\n            letter_index = alphabet.index(letter)\n            new_message = new_message + alphabet[(letter_index + 2) % len(alphabet)]\n        else:\n            new_message = new_message + letter\n    return new_message\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 96,
      "score": 2.7696498533136933,
      "candidate": "alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    new_message = ''\n    for letter in message:\n        if letter in alphabet:\n            new_message += alphabet.replace(letter, alphabet[alphabet.index(letter) + 2])\n        else:\n            new_message += letter\n    return new_message\n\n\ndef decode(message):\n    \"\"\"\n    Write a function that takes a message, and decodes in such a way that it \n    replaces all vowels in the message with the letter that appears 2 places \n    ahead of that vowel in the english alphabet. Assume only letters. \n    \n    Examples:\n    >>> decode('TGST')\n    'test'\n    >>> decode('tHKS KS C MGSSCGG')\n    'This is a message'\n    \"\"\"\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    new_message = ''\n    for letter in message:\n        if letter in alphabet:\n            new_message += alphabet.replace(alphabet[alphabet.index(letter) + 2], letter)\n        else:\n            new_message += letter\n    return new_message\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 97,
      "score": 2.6758940414929846,
      "candidate": "message = message.lower()\n    vowels = 'aeiou'\n    new_message = ''\n    for char in message:\n        if char in vowels:\n            new_message += char\n            if char == 'a':\n                new_message += 'A'\n            if char == 'e':\n                new_message += 'E'\n            if char == 'i':\n                new_message += 'I'\n            if char == 'o':\n                new_message += 'O'\n            if char == 'u':\n                new_message += 'U'\n            if char == 'y':\n                new_message += 'Y'\n            if char == 'z':\n                new_message += 'Z'\n        else:\n            new_message += char\n    return new_message\n\n\ndef decode(message):\n    \"\"\"\n    Write a function that takes a message, and decodes in such a way that it \n    replaces all vowels in the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. Assume only letters. \n    \n    Examples:\n    >>> decode('test')\n    'TGST'\n    >>> decode('This is a message')\n    'This is a message'\n    \"\"\"\n    message = message.lower()\n    vowels = 'aeiou'\n    new_message = ''\n    for char in message:\n        if char in vowels:\n            new_message += char\n            if char == 'a':\n                new_message += 'A'\n            if char == 'e':\n                new_message += 'E'\n            if char == 'i':\n                new_message += 'I'\n            if char == 'o':\n                new_message += 'O'\n            if char == 'u':\n                new_message += 'U'\n            if char == 'y':\n                new_message += 'Y'\n            if char == 'z':\n                new_message += 'Z'\n        else:\n            new_message += char\n    return new_message"
    },
    {
      "rank": 98,
      "score": 2.6172138802941856,
      "candidate": "vowels = 'aeiou'\n    new_message = ''\n    \n    for char in message:\n        if char.lower() in vowels:\n            new_message += char.upper()\n        else:\n            new_message += char\n    return new_message\n\n\ndef decode(message):\n    \"\"\"\n    Write a function that takes a message, and decodes in such a \n    way that it replaces all vowels in the message with the letter \n    that appears 2 places ahead of that vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> decode('TGST')\n    'test'\n    >>> decode('tHKS KS C MGSSCGG')\n    'This is a message'\n    \"\"\"\n    vowels = 'aeiou'\n    new_message = ''\n    \n    for char in message:\n        if char.upper() in vowels:\n            new_message += char.lower()\n        else:\n            new_message += char\n    return new_message"
    },
    {
      "rank": 99,
      "score": 2.531675216597722,
      "candidate": "alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    result = []\n    for c in message:\n        if c.lower() in alphabet:\n            result.append(alphabet[alphabet.index(c) + 1])\n        else:\n            result.append(c)\n    return ''.join(result)\n\n\ndef decode(message):\n    \"\"\"\n    Write a function that takes a message, and decodes in such a way that it \n    swaps case of all letters, replaces all vowels in the message with \n    the letter that appears 2 places ahead of that vowel in the \n    english alphabet. Assume only letters. \n    \n    Examples:\n    >>> decode('TGST')\n    'test'\n    >>> decode('tHKS KS C MGSSCGG')\n    'This is a message'\n    \"\"\"\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    result = []\n    for c in message:\n        if c.lower() in alphabet:\n            result.append(alphabet[alphabet.index(c) - 1])\n        else:\n            result.append(c)\n    return ''.join(result)\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 100,
      "score": 2.372905560358472,
      "candidate": "vowels = 'aeiou'\n    new_string = ''\n    for char in message:\n        if char in vowels:\n            new_string += char.upper()\n        else:\n            new_string += char\n    return new_string\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod(verbose=True)"
    }
  ]
}