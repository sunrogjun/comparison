{
  "timestamp": "2025-09-14T11:23:24.035883",
  "method": "improved_llm_judge",
  "judge_model": "codellama/CodeLlama-7b-Python-hf",
  "target_model": "codet5-770m",
  "dataset": "humaneval",
  "problem_number": 17,
  "total_candidates": 100,
  "results": [
    {
      "rank": 1,
      "score": 10.0,
      "candidate": "return [int(note) for note in music_string.split('|') if note!= 'o']\n\n\ndef parse_music_2(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music_2('o o|.| o| o|.|.|.| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    return [int(note) for note in music_string.split('|') if note!= 'o']\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 2,
      "score": 10.0,
      "candidate": "notes = []\n    for c in music_string:\n        if c == 'o':\n            notes.append(4)\n        elif c == 'o|':\n            notes.append(2)\n        elif c == '.':\n            notes.append(1)\n        else:\n            notes.append(0)\n    return notes\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 3,
      "score": 10.0,
      "candidate": "beats_per_beat = [0, 0, 0, 0, 0, 0, 0, 0]\n    for i, note in enumerate(music_string):\n        if note == 'o':\n            beats_per_beat[0] += 1\n        elif note == '|' or note == '.':\n            beats_per_beat[i + 1] += 1\n        else:\n            raise ValueError(f\"Unknown note: {note}\")\n    return beats_per_beat\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 4,
      "score": 10.0,
      "candidate": "# Your code here\n    return [music_string.count(char) for char in 'o|']"
    },
    {
      "rank": 5,
      "score": 10.0,
      "candidate": "# TODO: Implement this function\n    pass\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 6,
      "score": 10.0,
      "candidate": "# Your code here\n    return [music_string.count('o'), music_string.count('o|'), music_string.count('.'), music_string.count('o')]\n\n\nif __name__ == '__main__':\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 7,
      "score": 10.0,
      "candidate": "return [int(music_string[i:i + 2]) for i in range(len(music_string) - 1)]\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 8,
      "score": 10.0,
      "candidate": "# Your code here\n    notes = []\n    for i in range(len(music_string)):\n        if music_string[i] == 'o':\n            notes.append(4)\n        elif music_string[i] == 'o|':\n            notes.append(2)\n        elif music_string[i] == '.|':\n            notes.append(1)\n        elif music_string[i] == '|':\n            notes.append(4)\n            notes.append(4)\n            notes.append(4)\n            notes.append(4)\n            notes.append(4)\n    return notes"
    },
    {
      "rank": 9,
      "score": 10.0,
      "candidate": "# Your code here\n    notes = []\n    last_beat = 0\n    for char in music_string:\n        if char == 'o':\n            last_beat = 4\n        elif char == '.':\n            last_beat += 1\n        else:\n            notes.append(last_beat)\n            last_beat = 0\n    notes.append(last_beat)\n    return notes\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 10,
      "score": 10.0,
      "candidate": "notes = []\n    for char in music_string:\n        if char == 'o':\n            notes.append(4)\n        elif char == 'o|':\n            notes.append(2)\n        else:\n            notes.append(1)\n    return notes\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 11,
      "score": 10.0,
      "candidate": "notes = []\n    for note in music_string:\n        if note == 'o':\n            notes.append(4)\n        elif note == '|':\n            notes.append(2)\n        else:\n            notes.append(1)\n    return notes\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 12,
      "score": 10.0,
      "candidate": "notes = music_string.split(\"|\")\n    return [int(notes[i].split()[-1]) for i in range(len(notes)) if notes[i]!= \"\"]"
    },
    {
      "rank": 13,
      "score": 10.0,
      "candidate": "notes = []\n    for beat in music_string:\n        if beat == '|':\n            notes.append(1)\n        else:\n            notes.append(notes[-1] + 1)\n    return notes\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 14,
      "score": 10.0,
      "candidate": "notes = []\n    for char in music_string:\n        if char == 'o':\n            notes.append(4)\n        elif char == 'o|':\n            notes.append(2)\n        elif char == '.|':\n            notes.append(1)\n        else:\n            notes.append(0)\n    return notes\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 15,
      "score": 10.0,
      "candidate": "notes = music_string.split('|')\n    return [int(note) for note in notes if note!= 'o']\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 16,
      "score": 10.0,
      "candidate": "notes = []\n    for i in range(len(music_string)):\n        if music_string[i] == 'o':\n            notes.append(4)\n        elif music_string[i] == 'o|':\n            notes.append(2)\n        elif music_string[i] == '.|':\n            notes.append(1)\n        else:\n            notes.append(0)\n\n    return notes\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 17,
      "score": 10.0,
      "candidate": "last_beats = []\n    last_beat = None\n    for note in music_string:\n        if note == 'o':\n            last_beats.append(4)\n        elif note == '|' or note == '.':\n            if last_beat:\n                last_beats.append(last_beat)\n                last_beat = None\n            else:\n                last_beats.append(1)\n        else:\n            if last_beat:\n                last_beats.append(last_beat)\n                last_beat = None\n    return last_beats\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod(verbose=True)"
    },
    {
      "rank": 18,
      "score": 10.0,
      "candidate": "result = []\n    for line in music_string.split('|'):\n        result.append(len(line))\n    return result\n\n\ndef main():\n    with open('input.txt', 'r') as f:\n        music_string = f.read()\n\n    print(parse_music(music_string))\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 19,
      "score": 9.99406122111531,
      "candidate": "beat_count = [0] * 8\n    beat_count[0] = 4\n    beat_count[1] = 2\n    beat_count[2] = 1\n    beat_count[3] = 1\n    beat_count[4] = 1\n    beat_count[5] = 1\n    beat_count[6] = 1\n    beat_count[7] = 1\n    beat_count[8] = 1\n    beat_count[9] = 1\n    beat_count[10] = 1\n    beat_count[11] = 1\n    beat_count[12] = 1\n    beat_count[13] = 1\n    beat_count[14] = 1\n    beat_count[15] = 1\n    beat_count[16] = 1\n    beat_count[17] = 1\n    beat_count[18] = 1\n    beat_count[19] = 1\n    beat_count[20] = 1\n    beat_count[21] = 1\n    beat_count[22] = 1\n    beat_count[23] = 1\n    beat_count[24] = 1\n    beat_count[25] = 1\n    beat_count[26] = 1\n    beat_count[27] = 1\n    beat_count[28] = 1\n    beat_count[29] = 1\n    beat_count[30] = 1\n    beat_count[31] = 1\n    beat_count[32] = 1\n    beat_count[33] = 1\n    beat_count[34] = 1\n    beat_count[35] = 1\n    beat_count[36] = 1\n    beat_count[37] = 1\n    beat_count[38] = 1\n    beat_count[39] = 1\n    beat_count[40] = 1\n    beat_count[41] = 1\n    beat_count[42] = 1\n    beat_count[43] = 1\n    beat_count[44] = 1\n    beat_count[45] = 1\n    beat_count[46] = 1\n    beat_count[47] = 1\n    beat_count[48] = 1\n    beat_count[49] = 1"
    },
    {
      "rank": 20,
      "score": 9.903344369351494,
      "candidate": "return [0] * len(music_string)\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 21,
      "score": 9.900658427785924,
      "candidate": "parsed_music = []\n    for note in music_string:\n        if note == 'o':\n            parsed_music.append(4)\n        elif note == 'o|':\n            parsed_music.append(2)\n        elif note == '.|':\n            parsed_music.append(1)\n        else:\n            parsed_music.append(0)\n    return parsed_music\n\n\ndef main():\n    print(parse_music('o o|.| o| o|.|.|.| o o'))\n    print(parse_music('o o|.| o| o|.|.|.| o o| o o| o o| o o'))\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 22,
      "score": 9.867514373940713,
      "candidate": "# Your code here\n    if not music_string:\n        return []\n\n    notes = []\n    last_note = None\n    for note in music_string:\n        if note == 'o':\n            notes.append(4)\n            last_note = None\n        elif note == 'o|':\n            notes.append(2)\n            last_note = None\n        elif note == '.':\n            notes.append(1)\n            last_note = None\n        else:\n            if last_note:\n                notes.append(last_note - 1)\n            last_note = note\n\n    if last_note:\n        notes.append(last_note - 1)\n\n    return notes\n\n\nif __name__ == '__main__':\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 23,
      "score": 9.863946554625466,
      "candidate": "# Your code here\n    pass\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 24,
      "score": 9.83056379661682,
      "candidate": "# your code here\n\n    return [i for i in range(len(music_string)) if i % 2 == 0]\n\n\nif __name__ == '__main__':\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 25,
      "score": 9.82747241262185,
      "candidate": "# Your code here\n    return [music_string.count('o'), music_string.count('o|'), music_string.count('.'), music_string.count('o'), music_string.count('o'),\n            music_string.count('o'), music_string.count('o')]"
    },
    {
      "rank": 26,
      "score": 9.797318940777693,
      "candidate": "return [0 if note == 'o' else 1 for note in music_string.split('|')]\n\n\nif __name__ == '__main__':\n    with open('input.txt', 'r') as f:\n        music_string = f.read()\n    print(parse_music(music_string))"
    },
    {
      "rank": 27,
      "score": 9.795078908429087,
      "candidate": "return [int(note_string[i:i+2]) for i in range(0, len(music_string), 2)]\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod(verbose=True)"
    },
    {
      "rank": 28,
      "score": 9.789163335348073,
      "candidate": "# Your code here\n    return [note_count for note_count in [0] + [note_count + 4 for note_count in [0, 1, 2, 2, 1] if note_count < 5] if note_count!= 0]\n\n\nif __name__ == '__main__':\n    print(parse_music(input()))"
    },
    {
      "rank": 29,
      "score": 9.779226900822804,
      "candidate": "result = []\n    for beat in music_string:\n        if beat == 'o':\n            result.append(4)\n        elif beat == '|':\n            result.append(2)\n        elif beat == '.':\n            result.append(1)\n        else:\n            raise ValueError('Invalid note')\n    return result\n\n\nif __name__ == '__main__':\n    with open('input.txt', 'r') as file:\n        music_string = file.read()\n        print(parse_music(music_string))"
    },
    {
      "rank": 30,
      "score": 9.752593487133971,
      "candidate": "beats = []\n\n    for note in music_string.split('|'):\n        if note == 'o':\n            beats.append(4)\n        elif note == 'o|':\n            beats.append(2)\n        elif note == '.|':\n            beats.append(1)\n        else:\n            raise ValueError('Invalid note string')\n\n    return beats"
    },
    {
      "rank": 31,
      "score": 9.716147307973745,
      "candidate": "return [int(beat) for beat in music_string.split('|')]\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 32,
      "score": 9.683268548306328,
      "candidate": "notes = list()\n    for i in range(len(music_string)):\n        if music_string[i] == 'o':\n            notes.append(4)\n        elif music_string[i] == 'o|':\n            notes.append(2)\n        elif music_string[i] == '.':\n            notes.append(1)\n        else:\n            raise ValueError('Not a valid music string')\n    return notes"
    },
    {
      "rank": 33,
      "score": 9.644262814726998,
      "candidate": "notes = []\n    for note in music_string:\n        if note == 'o':\n            notes.append(4)\n        elif note == '|':\n            notes.append(2)\n        elif note == '.':\n            notes.append(1)\n        else:\n            notes.append(0)\n\n    return notes\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 34,
      "score": 9.554354307052854,
      "candidate": "# Your code here\n    return [0] * 4 + [0] * 2 + [0] * 1 + [0] * 1 + [0] * 1 + [0] * 1 + [0] * 1 + [0] * 1\n\n\nif __name__ == '__main__':\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 35,
      "score": 9.534607191259404,
      "candidate": "return [int(beat) for beat in music_string.split('|')]"
    },
    {
      "rank": 36,
      "score": 9.513212611437348,
      "candidate": "notes = []\n    for note in music_string:\n        if note == 'o':\n            notes.append(4)\n        elif note == 'o|':\n            notes.append(2)\n        elif note == '.|':\n            notes.append(1)\n        else:\n            notes.append(0)\n    return notes\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 37,
      "score": 9.493562825934188,
      "candidate": "notes = []\n    for character in music_string:\n        if character == 'o':\n            notes.append(4)\n        elif character == '|':\n            notes.append(2)\n        else:\n            notes.append(1)\n    return notes\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 38,
      "score": 9.473669085404504,
      "candidate": "return [int(x) for x in music_string.split('|')]\n\n\nif __name__ == '__main__':\n    with open('input.txt', 'r') as f:\n        music = f.read()\n\n    print(parse_music(music))"
    },
    {
      "rank": 39,
      "score": 9.415598138484691,
      "candidate": "beat_count = 0\n    note_count = 0\n    for char in music_string:\n        if char == 'o':\n            beat_count += 1\n        elif char == '|':\n            note_count += 1\n        else:\n            beat_count -= 1\n            note_count -= 1\n    return [beat_count, note_count]\n\n\nif __name__ == '__main__':\n    print(parse_music('o o|.| o| o|.|.|.| o o'))"
    },
    {
      "rank": 40,
      "score": 9.37311079806608,
      "candidate": "return [int(note) for note in music_string.split('|')]\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 41,
      "score": 9.370583536698913,
      "candidate": "return [int(beat) for beat in music_string.split('|')]\n\n\nif __name__ == '__main__':\n    print(parse_music('o o|.| o| o|.|.|.| o o'))"
    },
    {
      "rank": 42,
      "score": 9.349450324238331,
      "candidate": "return [int(c) for c in music_string.split('|')]\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 43,
      "score": 9.234050852198141,
      "candidate": "parsed_music = []\n    for letter in music_string:\n        if letter == 'o':\n            parsed_music.append(4)\n        elif letter == '|':\n            parsed_music.append(2)\n        else:\n            parsed_music.append(1)\n    return parsed_music\n\n\nif __name__ == '__main__':\n    import doctest\n\n    doctest.testmod(verbose=True)"
    },
    {
      "rank": 44,
      "score": 9.226766272351448,
      "candidate": "beats = []\n    for character in music_string:\n        if character == 'o':\n            beats.append(4)\n        elif character == 'o|':\n            beats.append(2)\n        elif character == '.|':\n            beats.append(1)\n        else:\n            beats.append(0)\n    return beats"
    },
    {
      "rank": 45,
      "score": 9.224262331640396,
      "candidate": "notes = []\n    for char in music_string:\n        if char == 'o':\n            notes.append(4)\n        elif char == 'o|':\n            notes.append(2)\n        elif char == '.|':\n            notes.append(1)\n        else:\n            notes.append(0)\n    return notes\n\n\ndef parse_music_with_list(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music_with_list('o o|.| o| o|.|.|.| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    notes = []\n    for char in music_string:\n        if char == 'o':\n            notes.append(4)\n        elif char == 'o|':\n            notes.append(2)\n        elif char == '.|':\n            notes.append(1)\n        else:\n            notes.append(0)\n    return notes\n\n\nif __name__ == '__main__':\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 46,
      "score": 9.21346272767743,
      "candidate": "return [int(note) for note in music_string.split('|')]\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod(verbose=True)"
    },
    {
      "rank": 47,
      "score": 9.137745145492898,
      "candidate": "return [int(x) for x in music_string.split('|')]"
    },
    {
      "rank": 48,
      "score": 8.95994420569242,
      "candidate": "if music_string == '':\n        return []\n    else:\n        return [int(music_string[i]) for i in range(len(music_string)) if music_string[i]!='']\n\n\nif __name__ == '__main__':\n    music_string = input()\n    print(parse_music(music_string))"
    },
    {
      "rank": 49,
      "score": 8.946210893390457,
      "candidate": "return [int(char) for char in music_string]\n\n\nif __name__ == '__main__':\n    with open('input.txt', 'r') as f:\n        music_string = f.read()\n    print(parse_music(music_string))"
    },
    {
      "rank": 50,
      "score": 8.85571690049604,
      "candidate": "return [int(music_string[i]) for i in range(len(music_string) - 1)]\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod(verbose=True)"
    },
    {
      "rank": 51,
      "score": 8.850707355641543,
      "candidate": "return [int(music_string[i:i + 2]) for i in range(0, len(music_string), 2)]\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod(verbose=True)"
    },
    {
      "rank": 52,
      "score": 8.847312154200512,
      "candidate": "# Your code here\n    notes = []\n    for i in range(0, len(music_string), 2):\n        if music_string[i] == 'o':\n            notes.append(4)\n        elif music_string[i] == 'o|':\n            notes.append(2)\n        elif music_string[i] == '.|':\n            notes.append(1)\n        else:\n            notes.append(0)\n\n    return notes\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 53,
      "score": 8.8281618090209,
      "candidate": "return [int(note) for note in music_string.split('|') if note!= 'o']\n\n\nif __name__ == \"__main__\":\n    print(parse_music('o o|.| o| o|.|.|.| o o'))"
    },
    {
      "rank": 54,
      "score": 8.76828871349479,
      "candidate": "return [int(x) for x in music_string.split('|')]\n\n\nif __name__ == '__main__':\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 55,
      "score": 8.715724466237427,
      "candidate": "return [int(i) for i in music_string.split('|')]\n\n\nif __name__ == '__main__':\n    print(parse_music('o o|.| o| o|.|.|.| o o'))"
    },
    {
      "rank": 56,
      "score": 8.701078161001123,
      "candidate": "return [int(music_string[i:i + 2]) for i in range(len(music_string) - 2, -1, -1)]"
    },
    {
      "rank": 57,
      "score": 8.692801520950061,
      "candidate": "notes = []\n    for index, char in enumerate(music_string):\n        if char == 'o':\n            notes.append(4)\n        elif char == 'o|':\n            notes.append(2)\n        elif char == '.|':\n            notes.append(1)\n        elif char == 'o':\n            notes.append(index + 1)\n        else:\n            notes.append(0)\n    return notes"
    },
    {
      "rank": 58,
      "score": 8.632293453617281,
      "candidate": "return [int(c) for c in music_string.split('|')]\n\n\nif __name__ == '__main__':\n    print(parse_music('o o|.| o| o|.|.|.| o o'))"
    },
    {
      "rank": 59,
      "score": 8.625142247198651,
      "candidate": "if music_string == \"\":\n        return []\n\n    # TODO: Implement\n    pass\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 60,
      "score": 8.623000730200317,
      "candidate": "result = []\n\n    for note in music_string.split('|'):\n        result.append(int(note))\n\n    return result\n\n\nif __name__ == '__main__':\n    music_string = input().strip()\n    result = parse_music(music_string)\n    print(result)"
    },
    {
      "rank": 61,
      "score": 8.616253589228675,
      "candidate": "return [int(beat) for beat in music_string.split('|')]\n\n\nif __name__ == '__main__':\n    with open('input.txt', 'r') as input_file:\n        input_string = input_file.read()\n        print(parse_music(input_string))"
    },
    {
      "rank": 62,
      "score": 8.610076160146226,
      "candidate": "# Your code here\n    pass\n\n\nif __name__ == '__main__':\n    with open('input.txt', 'r') as file:\n        music_string = file.read().strip()\n    print(parse_music(music_string))"
    },
    {
      "rank": 63,
      "score": 8.606486429141842,
      "candidate": "return [int(i) for i in music_string.split(\"|\")]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 64,
      "score": 8.565425580227462,
      "candidate": "notes = []\n    for i in range(len(music_string)):\n        if music_string[i] == 'o':\n            notes.append(4)\n        elif music_string[i] == 'o|':\n            notes.append(2)\n        elif music_string[i] == '.|':\n            notes.append(1)\n        else:\n            pass\n    return notes\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 65,
      "score": 8.53012858503943,
      "candidate": "notes = []\n    for note in music_string:\n        if note == 'o':\n            notes.append(4)\n        elif note == 'o|':\n            notes.append(2)\n        else:\n            notes.append(1)\n    return notes\n\n\nif __name__ == '__main__':\n    print(parse_music('o o|.| o| o|.|.|.| o o'))"
    },
    {
      "rank": 66,
      "score": 8.499905739299377,
      "candidate": "music_list = []\n    last_beat = 0\n    for i in range(len(music_string) - 1, -1, -1):\n        if music_string[i] == '|':\n            music_list.append(last_beat)\n            last_beat = 0\n        elif music_string[i] == 'o':\n            last_beat += 1\n        else:\n            last_beat = 0\n    music_list.append(last_beat)\n    return music_list\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod(verbose=True)"
    },
    {
      "rank": 67,
      "score": 8.492983219118464,
      "candidate": "return [int(char) for char in music_string.split('|')]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 68,
      "score": 8.490324832712195,
      "candidate": "notes = music_string.split('|')\n    return [int(note.split('|')[-1]) for note in notes]"
    },
    {
      "rank": 69,
      "score": 8.478208546788407,
      "candidate": "return [int(i) for i in music_string.split('|') if i!= 'o']\n\n\nif __name__ == '__main__':\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 70,
      "score": 8.426531424889468,
      "candidate": "result = [0] * 4\n\n    for i in range(len(music_string)):\n        if i % 2 == 1:\n            result[int(music_string[i])] += 1\n        else:\n            result[int(music_string[i])] -= 1\n\n    return result\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod(verbose=True)"
    },
    {
      "rank": 71,
      "score": 8.408439383654278,
      "candidate": "notes = []\n    for i in range(len(music_string)):\n        if music_string[i] == 'o':\n            notes.append(4)\n        elif music_string[i] == 'o|':\n            notes.append(2)\n        elif music_string[i] == '.|':\n            notes.append(1)\n        else:\n            raise ValueError\n    return notes\n\n\nif __name__ == '__main__':\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 72,
      "score": 8.386620303250325,
      "candidate": "return [0] * len(music_string)\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 73,
      "score": 8.375312293858853,
      "candidate": "notes = []\n    for note in music_string:\n        if note == 'o':\n            notes.append(4)\n        elif note == 'o|':\n            notes.append(2)\n        elif note == '.':\n            notes.append(1)\n        else:\n            raise ValueError('Not a valid note')\n    return notes\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 74,
      "score": 8.351614956112536,
      "candidate": "return [0 if c == 'o' else 1 for c in music_string]\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 75,
      "score": 8.327375965969855,
      "candidate": "return [int(x) for x in music_string.split('|')]\n\n\nif __name__ == '__main__':\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 76,
      "score": 8.327367757082776,
      "candidate": "return [int(note) for note in music_string.split('|')]\n\n\nif __name__ == '__main__':\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 77,
      "score": 8.298597569547805,
      "candidate": "result = []\n    for note in music_string:\n        if note == 'o':\n            result.append(4)\n        elif note == 'o|':\n            result.append(2)\n        else:\n            result.append(1)\n    return result\n\n\nif __name__ == '__main__':\n    print(parse_music('o o|.| o| o|.|.|.| o o'))"
    },
    {
      "rank": 78,
      "score": 8.294940769211511,
      "candidate": "return [int(beat) for beat in music_string.split('|') if beat!= 'o']\n\n\nif __name__ == '__main__':\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 79,
      "score": 8.280613371145561,
      "candidate": "return [0] * len(music_string)\n\n\nif __name__ == '__main__':\n    print(parse_music('o o|.| o| o|.|.|.| o o'))"
    },
    {
      "rank": 80,
      "score": 8.212735598038213,
      "candidate": "notes = []\n    for i in range(len(music_string) - 1):\n        if music_string[i] == 'o':\n            notes.append(4)\n        elif music_string[i] == '|' and music_string[i + 1] == 'o':\n            notes.append(2)\n        elif music_string[i] == '|' and music_string[i + 1] == '|' and music_string[i + 2] == 'o':\n            notes.append(1)\n        else:\n            notes.append(0)\n\n    return notes"
    },
    {
      "rank": 81,
      "score": 8.209707251476969,
      "candidate": "return [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 82,
      "score": 8.185309335307622,
      "candidate": "# Your code here\n    return [int(x) for x in music_string.split('|')]\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 83,
      "score": 8.179564342560925,
      "candidate": "return [int(x) for x in music_string.split('|')]\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 84,
      "score": 8.172253082181854,
      "candidate": "if len(music_string) < 2:\n        return [0]\n    elif len(music_string) == 2:\n        return [1, 1]\n    else:\n        return [int(music_string[0]), int(music_string[1])]\n\n\ndef main():\n    print(parse_music('o o|.| o| o|.|.|.| o o'))\n\n\nif __name__ == '__main__':\n    main()"
    },
    {
      "rank": 85,
      "score": 8.144125099485041,
      "candidate": "# Your code here\n    return [note_count for note_count in [0] * (len(music_string) - 1)]\n\n\nif __name__ == '__main__':\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 86,
      "score": 8.143591138329747,
      "candidate": "return [int(note) for note in music_string.split('|') if note!= 'o']\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 87,
      "score": 8.105983444291466,
      "candidate": "return [int(x) for x in music_string.split('|')]\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 88,
      "score": 8.093417897505768,
      "candidate": "return [note for note in music_string.split('|') if note!= 'o']\n\n\nif __name__ == '__main__':\n    with open('input.txt') as f:\n        music_string = f.read()\n    print(parse_music(music_string))"
    },
    {
      "rank": 89,
      "score": 8.024835682833125,
      "candidate": "result = []\n    for char in music_string:\n        if char == 'o':\n            result.append(4)\n        elif char == 'o|':\n            result.append(2)\n        elif char == '.':\n            result.append(1)\n        else:\n            result.append(0)\n    return result\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 90,
      "score": 7.990432406683839,
      "candidate": "note_list = [0] * 4\n    for note in music_string:\n        if note == 'o':\n            note_list[0] += 1\n        elif note == 'o|':\n            note_list[1] += 1\n        elif note == '.|':\n            note_list[2] += 1\n        elif note == 'o|':\n            note_list[3] += 1\n        elif note == '.|':\n            note_list[4] += 1\n    return note_list\n\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()"
    },
    {
      "rank": 91,
      "score": 7.834022619458933,
      "candidate": "return [int(n) for n in music_string.split('|')]\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod(verbose=True)"
    },
    {
      "rank": 92,
      "score": 7.738292593776799,
      "candidate": "return [1 if i == 'o' else 2 for i in music_string.split('|')]\n\n\nif __name__ == '__main__':\n    print(parse_music(input()))"
    },
    {
      "rank": 93,
      "score": 7.5819855281879285,
      "candidate": "return [0 if note == '-' else 1 for note in music_string.split('|')]\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 94,
      "score": 7.4878043221155455,
      "candidate": "return [1 if beat == 'o' else 2 for beat in music_string.split('|')]\n\n\nif __name__ == '__main__':\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 95,
      "score": 7.4506599871439985,
      "candidate": "return [int(music_string[i:i + 2]) for i in range(0, len(music_string), 2)]\n\n\nif __name__ == '__main__':\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 96,
      "score": 3.0,
      "candidate": "if len(music_string) == 0:\n        return []\n    return [note_count(music_string, index) for index, note in enumerate(music_string)]\n\n\ndef note_count(music_string: str, index: int) -> int:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to count how many beats does each not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> note_count('o o|.| o| o|.|.|.| o o', 0)\n    4\n    \"\"\"\n    if index == len(music_string) - 1:\n        return 4\n    return int(music_string[index + 1])\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()"
    },
    {
      "rank": 97,
      "score": 3.0,
      "candidate": "return [1 if x == 'o' else 2 for x in music_string.split('|')]\n\n\ndef parse_music_2(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music_2('o o|.| o| o|.|.|.| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    return [2 if x == 'o' else 1 for x in music_string.split('|')]"
    },
    {
      "rank": 98,
      "score": 3.0,
      "candidate": "# Your code here\n\n    # Your code here\n\n    # Your code here\n\n    # Your code here\n\n    # Your code here\n\n    # Your code here\n\n    # Your code here\n\n    # Your code here\n\n    # Your code here\n\n    # Your code here\n\n    # Your code here\n\n    # Your code here\n\n    # Your code here\n\n    # Your code here\n\n    # Your code here\n\n    # Your code here\n\n    # Your code here\n\n    # Your code here\n\n    # Your code here\n\n    # Your code here\n\n    # Your code here\n\n    # Your code here\n\n    # Your code here\n\n    # Your code here\n\n    # Your code here\n\n    # Your code here\n\n    # Your code here\n\n    # Your code here\n\n    # Your code here\n\n    # Your code here\n\n    # Your code here\n\n    # Your code here\n\n    # Your code here\n\n    # Your code here\n\n    # Your code here\n\n    # Your code here\n\n    # Your code here\n\n    # Your code here\n\n    # Your code here\n\n    # Your code here\n\n    # Your code here\n\n    # Your code here\n\n    # Your code here\n\n    # Your code here\n\n    # Your code here\n\n    # Your code here\n\n    # Your code here\n\n    # Your code here\n\n    # Your code here\n\n    # Your code here\n\n    # Your code here\n\n    # Your code here\n\n    # Your code here\n\n    # Your code here\n\n    # Your code here\n\n    # Your code here\n\n    # Your code here\n\n    # Your code here\n\n    # Your code here\n\n    # Your code here\n\n    # Your code here\n\n    # Your code here\n\n    # Your code here\n\n    # Your code here\n\n    # Your code here\n\n    # Your code here\n\n    # Your code here\n\n    # Your code here\n\n    # Your code here\n\n    # Your code here\n\n    # Your code here\n\n    # Your code here\n\n    # Your code here"
    },
    {
      "rank": 99,
      "score": 3.0,
      "candidate": "return [int(x) for x in music_string.split('|')]\n\n\ndef parse_music_2(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music_2('o o|.| o| o|.|.|.| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    return [int(x) for x in music_string.split('|')]"
    },
    {
      "rank": 100,
      "score": 3.0,
      "candidate": "return [int(c) for c in music_string.split('|')]\n\n\ndef parse_music_2(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o|.| o| o|.|.|.| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    return [int(c) for c in music_string.split('|') if c!= 'o']\n\n\nif __name__ == '__main__':\n    with open('../data/input.txt', 'r') as f:\n        music_string = f.read().strip()\n\n    print(parse_music_2(music_string))"
    }
  ]
}